Journal Artificial Intelligence Research 14 (2001) 105{136

Submitted 3/00; published 4/01

Partial-Order Planning Concurrent Interacting Actions
Craig Boutilier

cebly@cs.toronto.edu

Department Computer Science
University Toronto
Toronto, ON, M5S 3H8, Canada

Ronen I. Brafman

brafman@cs.bgu.ac.il

Department Computer Science
Ben-Gurion University
Beer Sheva, Israel 84105

Abstract

order generate plans agents multiple actuators, agent teams, distributed controllers, must able represent plan using concurrent actions
interacting effects. historically considered challenging task requiring
temporal planner ability reason explicitly time. show
simple modifications,
action representation language used represent
interacting actions. Moreover, algorithms partial-order planning require small
modifications order applied multiagent domains. demonstrate fact
developing sound complete partial-order planner planning concurrent interacting actions, POMP, extends existing partial-order planners straightforward
way. results open way use partial-order planners centralized
control cooperative multiagent systems.
STRIPS

1. Introduction
order construct plans agents multiple actuators (such multi-armed robots),
agent teams, controllers distributed throughout environment, must able
model effects interactions multiple actions executed concurrently, generate plans take interactions account. viable solution basic
multiagent/multi-actuator planning (MAP) problem must include economical action descriptions convenient specify easily manipulable planning algorithms,
well planning methods deal interactions generally associated
concurrent actions.
Surprisingly, despite interest multiagent applications|for instance, robotics
(Donald, Jennings, & Rus, 1993; Khatib, Yokoi, Chang, Ruspini, Holmberg, Casal, &
Baader, 1996) distributed AI (e.g., see various proceedings International
Conference Multiagent Systems)|and large body work distributed multiagent
planning, little research addresses basic problem planning context
concurrent interacting actions. Researchers distributed AI considered many central
issues multiagent planning multiagent interaction, much existing research
concerned mainly problems stemming distributed nature systems,
task decomposition resource allocation (Durfee & Lesser, 1989; Wilkins &
Myers, 1998; Stone & Veloso, 1999), obtaining local plans combine form global plans

c 2001 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiBoutilier & Brafman

(Durfee & Lesser, 1991; Ephrati, Pollack, & Rosenschein, 1995), minimizing communication
needs (Wolverton & des Jardins, 1998; Donald et al., 1993), on. opposed
form distributed planning, focus paper centralized planning agent
teams (or distributed actuators).
Representation concurrent actions dealt various researchers
knowledge-representation community (e.g., Lin & Shoham, 1992; Reiter, 1996; de Giacomo,
Lesperance, & Levesque, 1997; Moses & Tennenholtz, 1995; Pinto, 1998). particular
note action languages Ac (Baral & Gelfond, 1997) C (Giunchiglia & Lifschitz,
1998) enable specification concurrent interacting actions employ nonmonotonic override mechanism deduce effects set actions con icting
effects. Finally, number contemporary planners handle concurrent noninteracting
actions certain degree|examples include Graphplan (Blum & Furst, 1995), IPP
(Koehler, 1998), extends Graphplan handle resource constraints, recently
OBDD-based planners MBP (Cimatti, Giunchiglia, Giunchiglia, & Traverso, 1997)
UMOP (Jensen & Veloso, 2000)|while Knoblock (1994) provides good discussion
issue parallelizing serial plans.
Despite advances, one often sees planning community suggestions
temporal planners required adequately deal concurrent interacting actions.
example, discussion parallel execution plans, Knoblock (1994) asserts:
handle cases [of interacting actions] requires introduction
explicit representation time, provided temporal planning systems.
similar perspective seems implicit work parallel action execution presented
Lingard Richards (1998). Certainly time plays role planning|in planner
idea sequences actions occur embodies implicit notion time. However,
disagree time centralized multiagent planning must dealt explicit
fashion single-agent planning. main aim paper demonstrate
MAP problem solved using simple extensions existing (single-agent) planners
like UCPOP (Penberthy & Weld, 1992). provide representation MAP algorithm
requires explicit representation time. deny explicit temporal
representations useful planning|for many problems may necessary|but
think key bottleneck planning activities multiagent teams.
Specifically, view temporal issues orthogonal main concerns facing multiagent
planning.
central issue multiagent planning lies fact individual agent actions
interact. Sometimes planning hindered result action interaction: action X
agent 1 might destroy intended effect action agent 2 executed concurrently.
example, half-duplex communication line, cannot allow simultaneous transmission
messages sides. case, planning algorithm make sure
X executed time. interesting fact planning
often benefits result action interaction: action X agent 1 might achieve
intended effect agent 2 performs action concurrently. example, opening typical
door requires two simultaneous actions: turning knob pushing door. military
activities, different units may coordinate actions order effective (e.g.,
106

fiPlanning Concurrent Interacting Actions

turn engines lights simultaneously, attack time). Similar situations
arise variety domains. cases, planning algorithm ensure
appropriate actions executed time. action representation makes
interactions explicit planning algorithm can, result interactions,
prescribe certain actions must must executed concurrently
main features multiagent planner. Temporal representations may play role
scheduling actions, strictly necessary reasoning effects
interaction (or lack thereof).
illustrate issues, consider following example discussed
detail later paper: two agents must move large set blocks one room
another. could pick block separately, better solution would use
existing table following manner. First, agents put blocks table,
lift one side table. However, must lift table simultaneously;
otherwise, one side table lifted, blocks fall off. lifted
table, must move room. put table down. fact,
depending precise goal effects actions, may better one agent drop
side table, causing blocks slide once. Notice generating
plan requires agents coordinate two different ways: first, must lift
table together blocks fall; later, one (and one) must drop
side table let blocks fall.
Since actions distinct agents interact, cannot, general, specify effects
individual's actions without taking account actions might performed
agents time. truly concurrent actions often desirable precludes
oft-used trick \interleaving semantics" (Reiter, 1996; de Giacomo et al., 1997). Agents
lifting table number items must simultaneously risk
items sliding table, perhaps causing damage. Interleaving individual \lift side
table" actions do.
One way handle action interactions specify effects joint actions directly.
specifically, let Ai set actions available agent (assuming n agents labeled
1 : : :n), let joint action space A1 A2 . treat element
space separate action, specify effects using favorite action representation.1
main advantage reduction scheme resulting planning problem
tackled using standard planning algorithm. However, serious drawbacks
respect ease representation. First, number joint actions increases exponentially number agents. severe implications specification
planning process. Second, reduction fails exploit fact substantial fraction individual actions may interact all, least interact certain
conditions. would like representation actions multiagent/multi-actuator settings
exploits independence individual action effects whatever extent possible.
instance, lift actions two agents may interact, many actions
(e.g., one agent lifting table another picking block). Hence, need
1. discussion center STRIPS action representation, similar considerations apply
representations situation calculus (McCarthy & Hayes, 1969; Reiter, 1991) dynamic Bayes
nets (Dean & Kanazawa, 1989; Boutilier & Goldszmidt, 1996).

107

fiBoutilier & Brafman

explicitly consider combinations actions, specify certain individual
effects separately, combining effects \as needed."
Joint actions also cause problems planning process itself: use context
planners forces seems excessive degree commitment. Whenever
individual action agent accomplish desired effect, must insert
plan joint action, thereby committing agents specific actions executed
concurrently, even though actual choices may irrelevant. reasons, desire
\distributed" representation actions.
therefore faced following two problems:
1. representation problem: naturally concisely represent interactions
among concurrently executed actions.
2. planning problem: plan context representation.
paper, show STRIPS action representation augmented
handle concurrent interacting actions existing nonlinear planners adapted
handle actions. fact, might come surprise solving problems
requires small number changes existing nonlinear planners, UCPOP
(Penberthy & Weld, 1992).2 main addition STRIPS representation action
concurrent action list: describes restrictions actions (or cannot)
executed concurrently order specified effect (indeed, number
different conditional effects depending concurrent actions applied). order
handle richer language, must make number modifications \standard"
partial-order planners: (a) add equality (respectively, inequality) constraints action
orderings enforce concurrency (respectively, nonconcurrency) constraints; (b)
expand definition threats cover concurrent actions could prevent intended
action effect.
emphasize deal problem planning activities multiple agents
agents multiple actuators centralized fashion, opposed distributed planning. model assumes one available central controller decide
appropriate joint plan communicate plan individual agents (or actuators).
distributed planning important dicult problem, problem addressed
work. also assume mechanism available individual agents
ensure execution concurrent plans synchronized. Again,
issue significance subtlety, task consider paper.
note planning parallel actions addressed detail Lingard
Richards (1998). Specifically, provide general framework understanding
constraint-posting, least-commitment planners allow concurrent action execution.
However, mentioned above, work takes explicit temporal view problem
focuses primarily issues action duration. Furthermore,
multiagent planning could presumably made fit within model, seems
main motivation. fact, planning algorithms discuss deal
issue ensuring parallel actions negative synergistic effects, explicitly
2. Moreover, planning algorithms (e.g., Blum & Furst, 1995; Kautz & Selman, 1996) prove
amenable extension planning concurrent interacting actions using similar ideas.

108

fiPlanning Concurrent Interacting Actions

exclude possibility positive synergy. work, abstract away temporal
component focus precisely planning presence synergies, positive
negative.
following section describe STRIPS-style representation concurrent,
interacting actions multiagent plans. Section 3 describe Partial-Order Multiagent Planning algorithm (POMP), modified version UCPOP algorithm
used generate plans multiagent teams multiactuator devices. Section 4 illustrates
POMP algorithm extended example. Section 5 discuss soundness
completeness POMP algorithm. conclude Section 6 discussion
issues raised work.

2. Representing Concurrent Actions Plans

begin considering representation concurrent actions partially ordered plans
using simple extension traditional planning representations. first describe standard action representation based STRIPS model, specifically used UCPOP
(Penberthy & Weld, 1992). describe extension representation represent concurrent interacting actions semantics, finally describe representation
semantics partially ordered multiagent plans.

2.1 STRIPS Action Representation

Variants STRIPS action representation language (Fikes & Nilsson, 1971)
employed many planning systems. assume finite set predicates domain
objects (generally typed) characterize domain question. States system
truth assignments ground atomic formulae language. state represented
set (or conjunction) ground atoms true state,
f

OnTable(B 1); Holding(A; B 2)g

thus embodying closed world assumption (Reiter, 1978). Actions induce state transitions
viewed partial mappings states states. action represented
using precondition effect, conjunction literals (sometimes referred
precondition effect list). state satisfy conjunction literals
precondition list, effect applying action undefined. Otherwise,
state resulting performing action determined deleting current state
description negative literals appearing effect list adding positive
literals appearing effect list.
example, action picking particular block B oor described
Figure 1, using usual LISP-style notation many planning systems. action
executed agent's hand empty block B clear oor.
action executed, agent's hand longer empty (it holds B ), B
oor.
Since action picking block location essentially same, regardless
particular block location, whole class actions described using
action schema operator free variables denoting object picked
109

fiBoutilier & Brafman

(define (action pickup-block-B-from-floor)
:precondition (and (on floor B) (handempty) (clear B))
:effect
(and (not (handempty)) (not (on floor B)) (holding B))))

Figure 1: Pickup-block-B-from- oor action
(define (operator pickup)
:parameters
(?x ?y)
:precondition (and (on ?x ?y) (handempty) (clear ?x) (not (= ?x ?y)))
:effect
(and (not (handempty)) (not (on ?x ?y)) (holding ?x))))

Figure 2: Pickup action schema
pickup location. action schema specification similar specification single
action except use free variables. precondition list action schema
contain, along predicates (or precisely, proposition \schemata"), equality
inequality constraints variables.
Figure 2 illustrates action schema pickup action. two variables, ?x
?y , stand object picked location object, respectively.
precondition list includes requirements ?x ?y , hand empty,
?x clear, ?x ?y designate different objects (i.e., one cannot pickup
object atop itself).
STRIPS representation enhanced, obtaining expressive language
allows form universal quantification action description (e.g., UCPOP
Penberthy & Weld, 1992). addition, conditional effects captured using
clause consisting antecedent consequent. semantics action description
similar original semantics except states satisfy preconditions
action antecedent clause, actual effect action union
\standard" effect specified effect list consequent clause.
clause change expressiveness language|each conditional
action description expressed using separate non-conditional actions classic
STRIPS representation capture clause. However, allows economical natural specification actions. example, classic STRIPS blocks world,
putting block B1 destination block B2 , block B2 longer clear. However,
putting B1 table, table remains clear. Hence, different putdown schema
required describe moving block table. Using clause, use single
schema conditional effect modifies standard effect action case
destination table (i.e., clause state destination
table, become unclear). addition, conditional effects may allow us postpone
commitment planning (e.g., may decide put block down, don't
commit whether destination table not).

2.2 Representing Concurrent Actions STRIPS

introduction concurrent interacting actions requires us address two issues specific
multiagent setting: performing action, actions
110

fiPlanning Concurrent Interacting Actions

(define (operator pickup)
:parameters
(?a1 ?x ?y)
:precondition (and (on ?x ?y)(handempty ?a1) (clear ?x)(not (= ?x ?y)))
:concurrent
(not (and (pickup ?a2 ?x ?y) (not (= ?a1 ?a2))))
:effect
(and (not (handempty ?a1)) (not (on ?x ?y)) (holding ?a1 ?x)))

Figure 3: multiagent Pickup schema
performed time. First, deal identity performing agent
introducing agent variable action schema. schema instantiated,
variable bound constant denoting particular agent carrying action.
Second, must take account fact action particular effect,
certain actions may may performed concurrently. capture constraints
adding concurrent action list existing precondition effect lists specification action. concurrent action list list action schemata negated action
schemata, partially instantiated. action schema A0 appears
concurrent action list action instance schema A0 must performed
concurrently action order intended effect. action schema A0
appears negated concurrent action list action instance schema A0
performed concurrently action prescribed effect.
concurrent action list similar precondition list following sense:
constraints specifies environment action performed
satisfied, action effects specified effect list. Notice positive
action schemata implicitly existentially quantified|one instance schema must
occur concurrently|whereas negated action schema implicitly universally quantified|
instance schema performed concurrently.
schema A0 appearing concurrent action list schema partially instantiated constrained: A0 contains free variables appearing parameter list A,
variables must instantiated instantiated A. addition, constraints
restrict possible instantiations schema appear within concurrent
action list. seen description multiagent setting version action
pickup shown Figure 3. multiagent pickup schema additional parameter, ?a1,
signifying performing agent. list preconditions effects similar
single-agent pickup schema, also concurrent action list:
(not (and (pickup ?a2 ?x ?y) (not (= ?a1 ?a2))))

\not" prefix restricts set actions performed concurrently
instance schema Pickup(?a1; ?x; ?y ). particular, disallow concurrent execution
instance schema Pickup(?a2; ?x; ?y ) ?a2 different ?a1.
is, agent attempt pickup object ?x time.
Using representation, represent actions whose effects modified
concurrent execution actions. example, suppose agent a1 lifts
one side table blocks dumped onto oor long agent
a2 lifts side; agent a2 lift side table
effect simply raise side table. Clearly, distinguish two
111

fiBoutilier & Brafman

(define (operator lower)
:parameters
(?a1 ?s1)
:precondition (and (holding ?a1 ?s1) (raised ?s1))
:effect
(and (not (raised ?s1))
(forall ?x
(when ((ontable ?x)
(not (and (lower ?a2 ?s2)(not (= ?s1 ?s2)))))
(and (onfloor ?x) (not (ontable ?x)))))))

Figure 4: Lower action schema
cases using concurrency conditions (not (lift ?a2 ?side)) (lift ?a2 ?side).
However, treating standard concurrency conditions essentially splits action
two separate actions similar effects. single-agent representations, treat
\modifiers" using clause; now, antecedent clause two
parts: list additional preconditions list additional concurrency conditions.
general form clause (when antecedent effect), antecedent
consists two parts: (preconditions concurrency-constraints). latter list
form concurrent-action list, similar semantics. Thus,
whenever precondition part antecedent satisfied current state
concurrency condition satisfied actions executed concurrently, actual effect
action obtained conjoining standard effect consequent
clause.
syntax clauses illustrated table-lowering action described Figure 4. Notice operator contains universally quantified effect, is, effect
form (forall ?x (effect ?x)). allows us state conditional effect,
described clause, applies object ?x satisfies precondition (e.g.,
every object table case). use universally quantified conditional effects
finite domains well understood (see Weld's (1994) discussion). However, simplify
presentation, treat formally paper.
lower one side table, side longer raised. addition,
object table, lowering one side table cause object fall,
long side table lowered time. Here, use
universal quantification describe fact happen object
table. Notice concurrent part antecedent see constrained schema
again. stipulates additional effect (i.e., objects falling oor
table) occur instance schema lower(?a2; ?s2) executed concurrently,
?s1 different ?s2.3
action description clause, one clause, multiple
clauses. latter case, preconditions clauses must disjoint.4
One might insist set clauses exhaustive well; however,
3. certain cases might also insist ?a1 6=?a2, agents perform one action time.
agent multiple effectors (to take one example) might able lower one sides
concurrently. See this.
4. case multiple clauses, disjointness restriction relaxed effects independent,
much like Bayes net action description (Boutilier & Goldszmidt, 1996).

112

fiPlanning Concurrent Interacting Actions

require this. clause satisfied action performed, assume
\additional" effect null; is, effect action simply given main
effect list. discuss clauses specific action formal definitions
below, generally assume existence implicit clause whose precondition
consists negation preconditions explicitly specified clauses, whose
effect list empty. allows definitions stated concisely.5

2.3 Semantics Concurrent Action Specifications

semantics individual actions is, course, different multiagent setting
single-agent case. individual actions transform one state world
another state world. Rather joint actions define state transitions. Joint
actions describe set individual actions (some could no-ops) performed
agents; is, n-tuples individual actions.
Given joint action = ha1 ; ; ani, refer individual actions ai elements
a. say concurrent action list element ai satisfied respect
when, every positive schema list, contains element aj (j 6= i)
instance A, every negative schema A0 list, none elements
aj (1 j n) instance A0. Ignoring moment existence clauses,
define notion joint action consistency straightforward manner:

Definition Let = a1; ; joint action individual action ai contains
h





clause. say consistent





precondition lists pi ai jointly (logically) consistent (i.e.,
contain proposition negation).
effect lists ei ai jointly consistent.
concurrent action list element satisfied w.r.t. a.

Given state s, consistent joint action = ha1; ; executed
precondition lists elements satisfied s. resulting state obtained
taking union effect lists elements applying s,
single-agent case. fact, consistent joint action viewed single-agent
action whose preconditions union preconditions various ai whose
effects union effects ai .
Notice semantics, joint action inconsistent individual action
causes Q true, another b causes Q false. responsibility
axiomatizer planning domain recognize con icts either state true
effect b performed concurrently (by imposing conditional effects concurrent action conditions) disallow concurrent execution (by imposing nonconcurrency
conditions).6
5. assume clause ever explicitly constructed planning purposes|it merely
conceptual device.
6. One easily preprocess actions descriptions order check consistency. actions b
discovered con icting effects, specification allows executed concurrently,
algorithm could automatically add nonconcurrency constraint action description, thus

113

fiBoutilier & Brafman

clauses definition consistency bit involved. Consistent joint
actions without clauses applied consistently possible states (if
applicable all). contrast, joint actions clauses may consistent
applied states, inconsistent others. Given joint action = ha1 ; ; ani
specific state s, exactly one clause action ai satisfied; is,
one clause preconditions concurrency constraints satisfied.7 Thus
joint action state together determine conditional effects selected.

Definition Given joint action = a1; ; state s, active clause wi
h





ai relative (unique) clause satisfied (i.e.,
whose preconditions satisfied whose concurrency constraints satisfied
a).

thus relativize notion consistency case.

Definition Let = a1; ; joint action (where individual actions ai may contain
h





clauses). Let state, let wi active clause ai (w.r.t. s,
a), let wi preconditions wpi, concurrency constraints wci, effects wei.
say consistent state if:





precondition lists pi active when-preconditions wpi ai mutually consistent.
effect lists ei active when-effects wei ai mutually consistent.
concurrent action list element satisfied w.r.t. a.

Note require concurrent action lists clauses satisfied,
since \selected" a. Note also definition reduces \whenless"
definition individual actions clauses|an action consistent respect
iff consistent original sense.
Given state s, joint action = ha1 ; ; ani (involving clauses) consistent
respect executed precondition lists elements satisfied
s. resulting state obtained taking union effect lists
elements a, together effect lists active clauses, applying
s.
Several interesting issues arise specification actions multiple agents. First,
assume throughout rest paper agent perform one action
time, possible concurrent actions must performed distinct agents.
allows action descriptions simpler otherwise might. single
agent perform one action time, captured using group
\agents" denoting different actuators. agents perform certain actions
preventing problems arising planning process. would valid b could
not, fact, (meaningfully) performed concurrently. can, important domain
axiomatizer specify true interacting effect (e.g., maybe action dominates). note
automatic inconsistency detection repair admits certain additional degree convenience
domain specification.
7. assume implicit clause corresponding negation explicitly stated clauses described
above.

114

fiPlanning Concurrent Interacting Actions

concurrently, captured adding extra concurrency constraints. generally,
different agents may different capabilities, would useful ability
explicitly specify capabilities form constraints types actions
different agents execute. One way handle constraints via preprocessing
step augments action descriptions additional preconditions concurrency
conditions capture constraints. alternative alter planning algorithm
take constraints account explicitly. simple constraints|for
instance, fact n agents might imply n actions executed
concurrently|this done simple ecient manner. approach
take planning algorithm develop Section 3. However, capability
constraints complex, former method seems better.
Another issue must addressed precise effect joint action, one
whose individual actions negates precondition concurrently executed individual
action. make special allowances this, simply retaining semantics described
above. complicate definition joint actions, note
combinations may make sense. example, concurrent writing variable p
q variable q p computer program might seen action destroying
preconditions other; yet net effect individual actions simply swap
values. Hence, certain circumstances, may acceptable describe actions
way, others may true effect joint action. Again,
treat issue several ways: allow specification actions design
planner excludes combinations forming concurrent plans unless
explicit concurrency condition given (this means axiomatizer need think
interactions); allow combinations, general, explicitly exclude
problematic cases adding nonconcurrency constraints.
Finally, undesirable (though theoretically unproblematic) situation arise
provide \incongruous" concurrency lists. example, may require action concurrent b order particular effect, b may required nonconcurrent
(this span set actions two elements, naturally). Hence,
b cannot occur together consistent joint action, would able achieve
intended effect a. Although planner eventually \recognize" fact,
specifications lead unnecessary backtracking planning process. Again,
something easily detected preprocessor, generally assume
concurrency lists congruous.

2.4 Concurrent Plan Representation
moving discuss planning process, describe representation multiagent plans, rather straightforward extension standard single-agent, partially
ordered plan representations. (single-agent) nonlinear plan consists of: (1) set action
instances; (2) various strict ordering constraints using relations < > ordering actions; (3) codesignation non-codesignation constraints values
variables appearing actions, forcing different values,
respectively (Weld, 1994; Penberthy & Weld, 1992). plan sort represents set
possible linearizations, set totally ordered plans formed action instances
115

fiBoutilier & Brafman

violate ordering, codesignation, non-codesignation constraints.8
say plan consistent linearization. set linearizations seen
\semantics" nonlinear plan sense. (consistent) nonlinear plan satisfies
goal set G, given starting state s, linearization guaranteed satisfy G.
concurrent nonlinear plan n agents (labeled 1; : : :n) similar: consists set
action instances (with agent arguments, though necessarily instantiated) together
set arbitrary ordering constraints actions (i.e., <; >; = 6=)
usual codesignation non-codesignation constraints. Unlike single-agent nonlinear plans,
allow equality inequality ordering constraints concurrent nonconcurrent
execution pair actions imposed. semantics must allow concurrent
execution actions n agents. end extend notion linearization:
Definition Let P concurrent nonlinear plan agents 1; : : :n. n-linearization
P sequence joint actions A1; Ak agents 1; : : :n
1. individual action instance P member exactly one joint action Ai ;
2. individual action occurs A1 ; Ak P , individual
No-op actions;
3. codesignation non-codesignation constraints P respected;
4. ordering constraints P respected. precisely, individual
action instances b P , joint actions Aj Ak b
occur, ordering constraints b true Aj Ak ; is,
af<; >; =; 6=gb, j f<; >; =; 6=gk.
words, actions P arranged set joint actions ordering
individual actions satisfies constraints, \synchronization" ensured no-ops.
Note set k actions (which allowed executed distinct
agents) ordering constraints, set linearizations includes \short" plan
single joint action k actions executed concurrently different agents
(assuming k n), \strung out" plan k actions executed one time
single agent, others nothing (or different agents take turns
individual actions), \longer" plans stretched even joint no-ops, anything
between.

Example Suppose planner outputs following plan group three agents:
set actions

f

a(1); b(2); c(2); d(3); e(1); f (2)

g

ordering constraints

e(1) = b(2); c(2) = d(3); a(1) < e(1); d(3) < f (2)

f

6

g

Here, numerical arguments denote agent performing action. Joint actions
involve one action three agents. simple 3-linearization plan|
depicted first linearization Figure 5, using N denote no-ops
8. Concurrent execution also considered context non-interacting actions; see Knoblock's
discussion issue (Knoblock, 1994).

116

fiPlanning Concurrent Interacting Actions

Time

1

2

3

4

5

Time

1

2

3

Agent 1



e

N

N

N

Agent 1



e

N

Agent 2

N

b

c

N

f

Agent 2

c

b

f

Agent 3

N

N

N



N

Agent 3

N



N

Linearization 1

Linearization 2

Figure 5: Two possible linearizations partially ordered multiagent plan
corresponding agents|is:
(1) (2) (3)i h (1) (2) (3)i

ha

;N

;N

; e

;b

;N

; hN

(1) (2) (3)i
;c

;N

; hN

(1) (2) (3)i
;N

;d

; hN

(1) (2) (3)i
;f

;N

insert additional tuples form hN (1); N (2); N (3)i location
wish. Another possible 3-linearization (the second Figure 5) is:

a(1); c(2); N (3) ; e(1); b(2); d(3) ; N (1); f (2); N (3)

h

h

h



fact, shortest 3-linearization plan.
definition n-linearization requires agent perform one action
time. conforms assumption made last section, though definition could quite easily relaxed allow this. no-ops, n-linearizations
correspond shortest plans, either concurrently nonconcurrently executed
senses term. However, relatively easy matter \sweep through" concurrent nonlinear plan construct shortest n-linearization, one fewest joint
actions, taking least amount \time." Though explicit notion
time, sequence joint actions n-linearization implicitly determines time line
along agent must execute individual actions. fact concurrency
nonconcurrency constraints enforced linearizations ensure plan coordinated synchronized. note order execute plan coordinated
fashion agents need synchronization mechanism. issue dealt
paper.

3. Planning Concurrent Actions

Figure 6, present POMP algorithm, version Weld's POP algorithm (Weld,
1994) modified handle concurrent actions. keep discussion simple, begin
describing POMP without considering conditional action effects. describe
simple modifications required add conditionals (i.e., build analog CPOP).
Though discuss universal quantification paper, algorithm could easily
extended handle universally quantified effects much way Penberthy
Weld's (1992) full UCPOP algorithm.
117

fiBoutilier & Brafman

POMP(hA; O; L; NC;B i,agenda )
Termination: agenda empty, return hA; O; L; NC;B i.
Goal Selection: Let hQ; Aneed pair agenda . (Aneed action Q conjunct
precondition list.)
Action Selection: Let Aadd = Choose action one whose effects unifies Q subject constraints B . (This may newly instantiated action action already
ordered consistently prior Aneed). action exists, return failure. Let
Q g. Form B adding B codesignation constraints needed
L = L [ fAadd !
need
order force Aadd desired effect. Let = [ fAadd < Aneed g. Aadd newly
instantiated, = [ fAadd g = [ fA0 < Aadd < g (otherwise, let = A).
Concurrent Action Selection: Aadd newly instantiated apply following steps positive
actions ffconc concurrent list: Let Aconc = Choose newly instantiated action
action already ordered consistently concurrently Aadd. Make sure
free agent perform action concurrently Aadd concurrently
scheduled actions. action exists return failure. Let = [ fAconc = Aneedg.
Aconc newly instantiated, = [ fAadd g = [ fA0 < Aconc < g (otherwise,
let = A). aadd agent variable Aadd aconc agent variable Aconc ,
add aadd 6= aconc B , well similar non-codesignation constraints actions
= Aadd 2 O.
Re-apply step Aconc , needed.
every negative action conc Aadd concurrent list let NC = NC [ fA conc 6= Aadd g. Add
B codesignation constraints associated conc .
Updating Goal State: Let agenda = agenda , fhQ; Aneedig.
Aadd newly instantiated, add fhQj ; Aaddig agenda every Qj logical precondition Aadd. Add preconditions B . additional concurrent actions added, add
preconditions well.
Causal Link Protection: every action might threaten causal link Ap !R Ac perform one
(a) Demotion: Add < Ap .
(b) Weak Promotion: Add Ac . agent perform concurrently Ac , add
> Ac, instead.
neither constraint consistent, return failure.
Nonconcurrency Enforcement every action threatens nonconcurrency constraint 6=
(i.e., instance schema violate constraint B ) add consistent
constraint, either
(a) Demotion: Add < .
(b) Promotion: Add > .
neither constraint consistent, return failure.
Recursive Invocation: POMP(hA ; ; L ; NC ; B i,agenda' )
0

0

0

0

0

0

0

1

0

0

0

0

1

0

0

0

:

0

:

:

0

0

0

0

0

0

0

0

0

0

0

0

0

Figure 6: Partially Ordered Multiagent Planning algorithm

118

fiPlanning Concurrent Interacting Actions

assume existence function MGU(Q; R; B ) returns general
unifier literals Q R respect codesignation constraints B .
used wherever unification action schemata required (see Action Selection step
Figure 6 discussion NC-threats below). algorithm number input
variables: set contains action instances inserted plan far; set
contains ordering constraints elements A; set L contains causal links; set
NC contains nonconcurrency constraints; set B contains current codesignation
constraints. set NC appear POP algorithm contains elements
form 6= a, 2 action schema action instance A.
Intuitively, nonconcurrency constraint form requires action instance a0
matches schema subject (non) codesignation constraints appear
concurrently plan.
agenda set pairs form hQ; Ai, listing preconditions Q
achieved yet actions require them. Initially, sets L, NC , B
empty, contains two fictitious actions A0 A1 , A0 initial
state propositions effects A1 goal state conditions preconditions.
agenda contains pairs hQ; A1 Q one conjuncts description
goal state. specification initial agenda identical used POP
(Weld, 1994). Finally, note choose operator, appears Action
Selection Concurrent Action Selection steps, denotes nondeterministic choice.
Again, device used POP make algorithm specification independent
search strategy actually used planning. Intuitively, complete planner require
one search nondeterministic choices, backtracking lead failure.
Many structures algorithmic steps POMP correspond exactly
used POP. Rather describe detail, focus discussion elements
POMP differ POP. Apart additional data structure NC mentioned
above, one key difference additional Concurrent Action Selection step POMP,
takes care concurrency requirements newly instantiated action.
One final key distinction notion threat used POMP, general
used POP. Much like POP, given plan hA; O; L; NC i, say
Q [ fA < g consistent, :Q
threatens causal link Ap !
c
p

c

effect. Threats handled using demotion (much like POP), weak promotion.
latter differs standard promotion technique used POP: allows
ordered concurrently Ac , Ac .9
Apart handling conventional threats different manner, another form
threat concurrent plans, namely, NC-threats . say action instance threatens
nonconcurrency constraint 6= Ac [ fAt = Ac g consistent instantiation
violate codesignation constraints. Demotion promotion
used handle NC-threats, conventional threats. Notice
although set NC contains negative (inequality) constraints, ultimately
grounded set positive constraints O. Following approach suggested Weld
9. wish exclude actions negate precondition another concurrent action (see discussion
Section 2), must use [ fAp Ac g definition threat, must change weak
promotion standard promotion.

119

fiBoutilier & Brafman

(1994), consider action threat variables consistently
instantiated manner would remove threat.
POMP algorithm must check consistency ordering constraints several
places: Action Selection action chosen achieve effect must consistently ordered consumer effect; Concurrent Action Selection
concurrency requirement added plan must tested consistency;
Nonconcurrency Enforcement demotion promotion used ensure
nonconcurrency requirements violated. consistency testing set ordering
constraints similar employed POP (see Weld (1994) nice discussion), one key difference: existence equality (=) inequality (6=) ordering
constraints opposed simple strict inequalities (i.e., < >). However, minor
modifications, standard consistency-checking algorithms strict ordering constraints
used. Equality dealt simply \merging" actions must occur concurrently (i.e., treating single action purposes consistency testing).
Inequalities easily handled assuming actions occur different points whenever
possible. Non-strict inequalities (i.e., ) arise directly algorithm
(though two easily dealt with). refer Ghallab Alaoui (1989)
details processing constraints.
POMP algorithm described easily modified handle conditional effects,
POP algorithm extended CPOP. main fact note
action selection phase, use action whose conditional effects achieve chosen
subgoal. case, add preconditions selected action
agenda, also antecedent particular conditional effect (this ensure
action particular effect). handle additional concurrency conditions
antecedent much like regular concurrency conditions. CPOP algorithm,
must consider possibility particular conditional effect added action
threatens established causal link. case, can, aside using existing
threat resolution techniques, consider form confrontation , add negation
conditional effect's antecedent agenda. Again, several ways
this: could add negation literal antecedent's condition agenda;
also add concurrent action negate negative concurrency condition
antecedent, post nonconcurrency constraint offset positive concurrency constraint
antecedent. details steps straightforward look similar
involved unconditional algorithm.

4. Example POMP Algorithm
section, formalize example alluded introduction describe
construction concurrent plan problem using POMP algorithm.
initial state, two agents, Agent1 Agent2, located Room1, together
table set blocks scattered around room. goal ensure
blocks Room2 table oor. order simplify example,
assume one block B , omit certain natural operators, simplify action
descriptions. order compactly represent multiple block version this, would
require introduction universal quantification. shown Weld (1994),
120

fiPlanning Concurrent Interacting Actions

done little diculty. Intuitively, agents gather blocks room
(in case one), put table, carry table room, dump
blocks table, put table down. best plan
single block, illustrates plan would constructed multiple blocks
(in case strategy better agents making multiple trips carrying
individual blocks). use following actions:







Pickup(a; b): agent picks block b
PutDown(a; b): agent puts block b table
ToTable(a; s): agent moves side (left, right) table
MoveTable(a; r): agent moves room r table
Lift(a; s): agent lifts side table
Lower(a; s): agent lowers side table

variables type agent , b variables type block , r variables type room ,
variables type table-side. (We omit natural actions since won't
used plan interest.)
domain described using following predicates:









OnTable(b): block b table
OnFloor(b): block b oor
AtSide(a; s): agent side (left, right) table
Up(s): side table raised
Down(s): side table oor
InRoom(x; r): object x (agent, block, table) room r
HandEmpty(a): hand agent empty
Holding(a; x): agent holding x (block, side table)

operator descriptions defined Figure 7.
initial state planning problem is:
InRoom(B; Room1); OnFloor(B ); InRoom(Agent1; Room1); InRoom(Agent2; Room1);
InRoom(Table; Room1); Down(LeftSide); Down(RightSide)g

f

goal propositions are:
InRoom(B; Room2); OnFloor(B ); Down(LeftSide); Down(RightSide)g

f

consider concurrent nonlinear plan multiagent planning problem
might generated POMP.
121

fiBoutilier & Brafman

(define (operator pickup)
:parameters
(?a1 ?x)
:precondition (and (inroom ?a1 ?r1) (inroom ?x ?r1)
(handempty ?a1) (onfloor ?x))
:concurrent
(and (not (pickup ?a2 ?x)) (not (= ?a1 ?a2)))
:effect
(and (not (handempty ?a1)) (not (onfloor ?x)) (holding ?a1 ?x)))
(define (operator putdown)
:parameters
(?a1 ?x)
:precondition
(and (inroom ?a1 ?r1) (inroom ?x ?r1) (inroom Table ?r1)
(holding ?a1 ?x))
:concurrent
(not (lift ?a2 ?s1))
:effect
(and (not (holding ?a1 ?x)) (ontable ?x) (handempty ?a1)))
(define (operator totable)
:parameters
(?a1 ?s1)
:precondition (and (inroom ?a1 ?r1) (inroom Table ?r1) (not (atside ?a2 ?s1)))
:concurrent
(and (not (totable ?a2 ?s1)) (not (= ?a1 ?a2)))
:effect
(atside ?a1 ?s1))

(define (operator movetable)
:parameters
(?a1 ?r1)
:precondition (holding ?a1 Table)
:concurrent
(and (movetable ?a2 ?r1) (not (= ?a1 ?a2)))
:effect
(and (inroom ?r1 Table) (inroom ?r1 ?a1)
(when ((ontable ?x) ()) (inroom ?r1 ?x))))
(define (operator lower)
:parameters
(?a1 ?s1)
:precondition (and (holding ?a1 ?s1) (up ?s1))
:concurrent
(and (not (lift ?a2 ?s2)) (not (= ?a1 ?a2)) (not (= ?s1 ?s2)))
:effect
(and (not (up ?s1))(down ?s1) (not (holding ?a1 ?s1))
(when ((and (ontable ?x) (up ?s2) (not (= ?s1 ?s2)))
(and (not (lower ?a2 ?s2)) (not (= ?a2 ?a1))))
(and (onfloor ?x) (not (ontable x))))))
(define (operator lift)
:parameters
(?a1 ?s1)
:precondition (and (atside ?s1 ?a1) (down ?s1) (down ?s2) (not (= ?s1 ?s2)))
:concurrent
(and (not (lower ?a2 ?s2)) (not (= ?a1 ?a2)) (not (= ?s1 ?s2)))
:effect
(and (not (down ?s1)) (up ?s1) (holding ?a1 ?s1)
(when ((and (ontable ?x) (down ?s2) (not (= ?s1 ?s2)))
(and (not (lift ?a2 ?s2))))
(and (onfloor ?x) (not (ontable x))))))

Figure 7: table movers domain

122

fiPlanning Concurrent Interacting Actions

Suppose InRoom(B; Room2) first goal selected. achieved performing A1 = MoveTable(a1; Room2) via conditional effect (note a1 agent variable, commitment agent performs action).10 must add
Holding(a1; Table) OnTable(B ) agenda insert appropriate causal links.
addition, concurrent list forces us add action A2 = MoveTable(a2; Room2)
plan together non-codesignation constraint a1 6= a2. ordering constraint
A1 = A2 added well. add A2, must add precondition Holding(a2; Table)
agenda well. structure partially constructed plan might viewed
follows:11
InRoom(Block, R2)

A1

GOAL

MoveTable(a1,R2)

A2

C

MoveTable(a2,R2)

Next, choose subgoal OnTable(B ) agenda (which added).
add action A3 = PutDown(a3; B ) plan appropriate ordering constraint
A3 < A1; preconditions added agenda causal link added L.
addition, must add NC nonconcurrency constraint not(Lift(a; s)): agent
lift side table block placed desired effect
achieved.
InRoom(Block, R2)

OnTable(Block)

A3
PutDown(a3,Block)

A1

MoveTable(a1,R2)

GOAL

C

A2

MoveTable(a2,R2)

10. pursue notion heuristics action selection here; note action
plausible candidate selection multi-block setting. goal list asserts number
blocks second room, single action moving table achieve
appropriate conditions (i.e., blocks table). action selection favors (conditional)
actions achieve goals subgoals, action considered actions needed
\one one" transport blocks individual agents. choice silly might
seem single-block setting.
11. plan diagrams follow, indicate actions Ai name action it. Variables
indicated lower-case names (we indicate co-designation constraints diagrams).
arrow one action another denotes causal link (from producer consumer), labeled
proposition produced. Large arrows labeled C (resp. NC) denote concurrency (resp.
nonconcurrency) constraints actions. use left-to-right ordering denote temporal
ordering actions, constraints exist.

123

fiBoutilier & Brafman

choose subgoal Holding(a1; Table). achieved using A4 =
Lift(a1; s1), ordering constraint A4 < A1 . preconditions added
agenda, concurrency conditions added (yet!) action, since
yet need invoke conditional effects action induced simultaneous lifting
side table:
Holding(a1,Table)

A4
Lift(a1,LS)

InRoom(Block, R2)

NC OnTable(Block)

A3

A1

PutDown(a3,Block)

GOAL

MoveTable(a1,R2)
C

A2

MoveTable(a2,R2)

note conditional effect A4 poses threat causal link A3 ontable
!
A1; lifting single side table dump block table.
addition, nonconcurrency constraint associated A3 , lifting performed
concurrently A3 , threatened A4 (an NC-threat), indicated plan diagram
above. confrontation strategy used handle first threat, action A5 =
Lift(a4; s2) scheduled concurrently A4 . constraints s1 6= s2 a4 6= a1 also
imposed. ensures undesirable effect occur. resolve NC threat
ordering A3 A4 .12 resulting partially completed plan free threats:
Holding(a1,Table)

A4
Lift(a1,LS)

InRoom(Block, R2)
OnTable(Block)

A3
PutDown(a3,Block)

C

A1

MoveTable(a1,R2)

GOAL

C

A5

A2

Lift(a2,RS)

MoveTable(a2,R2)

Next, choose subgoal Down(LeftSide). achieved using action A6 =
Lower(a1; LeftSide) preconditions added agenda. completely similar
way, A7 = Lower(a2; RightSide) added achieve Down(RightSide) (again, anticipate
unification agent variables).
12. anticipation subsequent step, use variable a2 plan diagram instead a4, since
soon unified. keep things concrete, also replaced s1 s2 particular sides
table, LeftSide RightSide, make discussion bit less convoluted.

124

fiPlanning Concurrent Interacting Actions

A6
Lower(a1,LS)
Down(LS)

A4

Holding(a1,Table)

Lift(a1,LS)
OnTable(Block)

InRoom(Block, R2)

A3

A1

PutDown(a3,Block) C

MoveTable(a1,R2)

GOAL

C

A5

A2

Lift(a2,RS)

MoveTable(a2,R2)

A7

Down(RS)

Lower(a2,RS)

choose work preconditions A6 A7 . preconditions,
Up(s) Holding(a; s), effects Lift, use A4 A5 producers.
stage, A6 A7 constrained follow A4 A5 , constraints
relative ordering A6 A7 themselves. also see A6 A7
\potentially" threaten causal link A3 ontable
!
A1; is, conditional
effect would cause block fall table. several ways resolve
two threats, including confrontation. choose strict promotion, order A6
A7 occur A1 A2 .
Holding(a1,LS)
Up(a1,LS)

A4

A6
Lower(a1,LS)

Holding(a1,Table)

Down(LS)

Lift(a1,LS)
OnTable(Block)



3

PutDown(a3,Block)

C

A5
Lift(a2,RS)

InRoom(Block, R2)

A1

MoveTable(a1,R2)

GOAL

C

A2

MoveTable(a2,R2)

Down(RS)

A7
Lower(a2,RS)
Up(a2,RS)
Holding(a2,RS)

Now, choose subgoal OnFloor(B ), conditional effect Lower
action. choose accomplish using existing action, A6 . order obtain
desired effect, ensure antecedent clause effect holds: involves
adding conditions antecedent (OnTable(B ) Up(LeftSide)) agenda,
imposing nonconcurrency constraint antecedent, namely, concurrent
Lower action take place. constraint threatened action A7 , order
125

fiBoutilier & Brafman

A6 A7 posting constraint A6 < A7.13 conditions antecedent,
OnTable(B ) Up(LeftSide), use A3 A5 producers, respectively.
OnTable(Block)
Holding(a1,LS)
Up(a1,LS)

A4

A6
Lower(a1,LS)

Holding(a1,Table)

Down(LS)
OnFloor(Block)

Lift(a1,LS)
OnTable(Block)



3

PutDown(a3,Block)

C

InRoom(Block, R2)

A1

MoveTable(a1,R2)

GOAL

C
Holding(a2,Table)
2
Lift(a2,RS)
MoveTable(a2,R2)

A5

Down(RS)

A7
Up(a2,RS)

Lower(a2,RS)

Holding(a2,RS)

unsolved subgoal precondition initial PutDown(a3; B ) action
(others, Down(LeftSide) Lift action, produced initial state).
don't illustrate it, simple matter introduce Pickup(a3; B ) action
PutDown(a3; B ).
following plan: first, block picked put table
agent a3 (either Agent1 Agent2 this). followed two concurrent
lift actions two concurrent move actions get table room
block top. Next, single lower action, makes block fall off, followed
another lower action ensures sides table oor.
note plan care agents (the one lifts LeftSide
RightSide) initially puts block table.14

5. Soundness Completeness POMP Algorithm
say planning algorithm sound generates plans guaranteed
achieve goals posed it; complete algorithm guaranteed generate plan
successful plan exists.15 case concurrent nonlinear plans, say
algorithm sound n-linearization plan produced given problem
reach goal state, algorithm complete successfully generates concurrent
nonlinear plan whenever sequence joint actions (i.e., n-linearization
13. ordering A7 < A6 could used resolve threat; would cause \unresolvable" threat conditions antecedent, require side remain up. is,
course, \unresolvable" sense would require agents pick block, etc.,
essentially introducing cycle plan.
14. examples MAP problems, plans produced POMP, code implementing POMP
algorithm obtained http://www.cs.bgu.ac.il/ishayl/project/.
15. formal definitions concepts, refer reader (Penberthy & Weld, 1992).

126

fiPlanning Concurrent Interacting Actions

concurrent plan) achieves goal initial state. show POMP
algorithm sound complete.
soundness proof straightforward. Suppose generated plan sound.
Thus, n-linearization plan achieve goal required subgoal
(i.e., precondition one plan's actions). agenda mechanism,
clear needed goal precondition exists action plan
achieves subgoal (goal precondition). Moreover, explicit causal link
plan particular subgoal well ordering constraint requiring
producing action appear prior consuming action (or goal). n-linearization
plan another plan obtained original plan adding new, consistent, strict
(i.e. <; >) ordering constraints. Recall original plan's ordering constraints must
consistent, otherwise would constitute solution,
threats. Clearly, adding new strict ordering constraints cannot cause new threats
causal links violate nonconcurrency constraint. Hence, resulting n-linearization
respects causal links original plan ordering constraints original plan.
complete proof, must convinced POMP actually considers possible,
relevant interactions actions. Consider effect P action needed
action b ordered a. Given semantics actions, two reasons
P hold prior execution b: (1) action c b (possibly
concurrent a) effect :P ; (2) actually P effect. Case (1)
contradicts fact threats (in extended sense, covering possibility
c occurring concurrently a) context plan. Case (2) implies either
P effect subject concurrency nonconcurrency condition violated
n-linearization. problem would taken care Action
Selection Nonconcurrency Enforcement steps (and ordering constraints).
Thus clear n-linearization plan produced POMP fact
achieve goals; is, POMP sound.
completeness proof rests three key elements:
1. reduction multiagent planning problems single agent planning problems.
2. fact POMP solve multiagent planning problem iff POP solve
single agent planning problem obtained via reduction.
3. fact POP sound complete (Penberthy & Weld, 1992).
First, show given multiagent planning problem, similar single agent planning
problem obtained. shall refer generated problem equivalent single
agent planning problem (or ESA problem). reduction property plan
multiagent planning problem exists plan ESA problem exists.
introduction, discussed reduction via use joint actions. Here,
use similar idea, little care POMP POP perform
similar steps solution original problem ESA problem, respectively.
Combining results fact POP sound complete, deduce
POMP sound complete well.
127

fiBoutilier & Brafman

discussion below, ignore conditional effects avoid undue and,
part, uninteresting complications. extension arguments deal conditional
effects straightforward. first recall following facts relevant argument:
(a) POP POMP nondeterministic planning algorithms and, although
various ways making deterministic, issue orthogonal
proof. Thus, showing correspondence POP POMP alluded
point (2) above, utilize exibility awarded us planner's
use nondeterministic choice. particular, sucient show
given solution path one planner, similar solution path exists other.
(b) choice next agenda element work immaterial POP
POMP|it affect running time (e.g., causing backtracking)
existence solution. Hence, exible ordering subgoals
achieved, long respect causality (i.e., cannot achieve goal
derived precondition action introduced yet).
(c) introducing additional ordering constraints consistent current constraints
valid plan, obtain valid plan given problem.
(d) precise order actions ordering constraints inserted
affect validity solution. fact, well known planning
community, one postpone threat resolution step without affecting
soundness completeness algorithm, long threats eventually
resolved.
proof proceed two stages. first stage, limit
restricted set planning problems show connections POP
straightforward fashion. relax restriction show correspondence
two planners general case.
Recall Section 2.3 suggested possible restriction set actions one
allowed execute concurrently, namely, two actions b permitted
occur concurrently one's effects negate other's preconditions. remarked
concurrent, non-clobbering condition, enforced action specification
itself, easily enforced POMP algorithm modify definition threat
use promotions instead weak promotions resolve threats. Let us restrict attention,
time being, domains respecting condition.
first note following fact. Let POMP plan, consider nlinearization a1 a2 occur concurrently,
future actions require effects produced concurrent execution actions.
is, actions a1 a2 forced occur concurrently plan . case,
similar n-linearization a1 ordered a2 , vice versa,
ordering constraints violated (some linearization must exist) also achieve
goal. case might happen one a1 a2 clobbers
other's preconditions; explicitly disallowed restricted setting (by
imposition nonconcurrency constraint \precondition").
128

fiPlanning Concurrent Interacting Actions

consider ESA problem, actions available agent follows:
individual action concurrency constraints multiagent problem,
create action corresponding joint action performed \owning"
agent, no-ops executed every agent; individual action
concurrency conditions, requiring actions b1; bk executed concurrently,
create action corresponding joint action bi performed,
actions apart no-ops performed.16 note nonconcurrency
constraints ignored ESA problem definition.
Clearly, joint action sequence exists given problem, also exists concurrent nonlinear plan problem. addition, argument involving
assumption concurrent action clobber another's precondition, also easy
see that, concurrent nonlinear plan found problem, also exists
concurrent nonlinear plan concurrency constraints involve actions whose
specification requires concurrent execution another action (or set actions) order
obtain particular effect. implies that, problem solvable, solvable
sequence joint actions type constructed above, using single-agent individual actions together set no-ops, involving minimal sets interacting
actions. words, concurrent nonlinear plan exists given problem iff plan
ESA problem exists. note structure solution ESA problem
(or linearization nonlinear single-agent plan ESA problem) specific:
actions occur concurrently forced to. words, solutions ESA
problem strung plans, agents \take turns" performing actions.
Next, want show (in restricted setting) POMP's solution path given
planning problem POP's solution path ESA problem resemble other.
becomes apparent combine POMP's action selection concurrent action selection
steps. obtain step equivalent action selection step POP ESA
problem (i.e., whenever POMP chooses action requires another concurrent action,
required concurrent action immediately inserted well; equivalent inserting
proper ESA action). fact, POP POMP look almost identical, except
POMP's Nonconcurrency Enforcement step. However, fashion
ESA problem defined, nonconcurrency constraints automatically \imposed"
plan produced POP since refer different joint actions. linearization
joint actions enforces nonconcurrency joint actions. Therefore,
(single-agent) actions occur together POP's solution ESA problem
occur together nonconcurrency constraint. (In
fact, actions explicit concurrency constraint.)17
argument demonstrates POP POMP generate \identical" sets
plans, except two small differences. First, POMP's semantics allows concurrent
execution certain actions, even though need executed concurrently order
16. important note single action schema gives rise n individual actions, one
agent (e.g., Lift(Agent1; s) Lift(Agent2; s) distinct actions, separate joint actions
created). Similarly, concurrency conditions involve action schemata, permitted
combination agent instantiations give rise distinct joint action.
17. assumes concurrency lists congruous, described Section 2; if, not, simple
redefinition ESA problem given \incongruous" concurrent actions admitted.

129

fiBoutilier & Brafman

solve problem, POP (for ESA problem) cannot generate plans admit
this. However, difference cannot affect completeness argument (since means
POMP exible POP).18 Second, POMP commits particular ordering
actions nonconcurrency constraint, POP make
commitment orderings consistent. However, consistent (and remain
unordered final plan ESA problem) choice POMP makes cannot
impact solution (and POMP produce either alternative ordering matter).
Now, using fact POP sound complete, virtual equivalence POMP
POP steps, facts strung plans ESA problem, see POMP
sound complete special case concurrent actions destroy
other's preconditions.
Finally, wish remove restrictions placed concurrent actions, admit
problems concurrent action clobber precondition another. note
problems type exist cannot solved strung plan sense defined
above. instance, consider following problem. two actions:


Action a: Precondition P ; effect Q



Action b: Precondition :Q; effect :P

Actions b nonconcurrency constraints, thus required
concurrent specified effects considered isolation. Suppose initial
state fP; :Qg goal state f:P; Qg. plan achieves goal requires
b executed concurrently. order one other, destroy
ability perform second, goal reachable. Thus, POMP solve
problem POP could solve ESA problem (as formulated above).
deal general case, extend construction ESA problem
including (in addition actions used restricted case) joint action ESA
problem set actions satisfying following conditions:


element permitted executed concurrently (but need forced
concurrent).



element clobbers precondition element A.



element removed without destroying property.

words, create joint action corresponding concurrent execution
element set A. We'll call \self-clobbering" joint actions. evident
concurrent nonlinear plan exists arbitrary multiagent planning problem iff
exists sequence joint actions (allowing self-clobbering actions) solve problem,
hence (by soundness completeness POP) iff POP find plan
generalized ESA problem. already seen POMP emulate step POP
18. additional exibility impacts soundness POMP (and addressed above). fact,
could used current line reasoning part integrated soundness completeness proof
based POP/POMP correspondence, case, would need explain last point
hinder soundness POMP.

130

fiPlanning Concurrent Interacting Actions

involving actions self-clobbering actions. simply show POMP
emulate POP's introduction self-clobbering actions show completeness.
Let self-clobbering joint action. claim POP complete (for
generalized ESA problem) ever considers adding incomplete plan
elements ai 2 effect satisfies subgoal agenda. Suppose,
contrary, ai 2 consumer current agenda. either
necessary successful plan (since subset actions used),
actions consume effects ai yet introduced. discount
former case considering executions POP use action. POP
complete even action never considered, since able introduce
individual components (or concurrent subsets) produce necessary effects.
discount latter case, since must valid execution POP introduces
(ultimate) consumers element ai introducing A. Thus, without loss
generality, assume element ai 2 satisfies subgoal agenda
introduced POP.
suppose POP introduces self-clobbering action A. Since ai 2 satisfy
agenda item, POMP simulate step follows: introduce ai turn satisfy
agenda item, postponing threat resolution among ai ; resolve self-threats among
ai weak promotion Causal Link Protection step (so impose
ordering constraint ai aj ai threatens aj ). example above, instance,
actions b added achieve subgoals Q :P , respectively, way
resolve mutual threat weak promotion actions; is, impose b
b a. words, forced concurrent. Thus introduction
self-clobbering joint action POP (under assumptions stated above) strong
correspondence sequence possible steps POMP. Since POP always find
plan assumptions, POMP. Thus completeness POMP
general case arbitrary multiagent planning problems demonstrated.

6. Concluding Remarks
One often finds assertions planning literature planning interacting actions
inherently problematic affair, requiring substantial extension existing single-agent
planning representations algorithms. Thus, somewhat surprising minor
changes needed enable STRIPS action representation language capture interacting actions, relatively small modifications existing nonlinear planners
required generate concurrent plans. solution involves addition concurrent
action list standard action description, specifying actions
scheduled concurrently current action order achieve desired effect.
POP planner augmented two steps: one handles insertion required
concurrent actions, one handles threats emanating potential concurrent
execution two interfering actions. addition, explicit reasoning equality inequality constraints introduced. strong resemblance solution
multiagent case solution single agent case, little overhead incurred
actions interact. fact, extreme case non-interacting actions,
extension STRIPS POP reduce single-agent equivalents.
131

fiBoutilier & Brafman

close connection specification method Knoblock's (1994)
approach generating parallel execution plans. Knoblock adds action description
list describes resources used action: actions require resource
(e.g., access database) cannot scheduled time. Hence, Knoblock's
resource list actually characterizes one form nonconcurrency constraint.19 fact,
believe certain nonconcurrency constraints naturally described using
resource list general method proposed here|augmenting language
lists prove dicult.
treatment concurrent actions specification languages Ac (Baral & Gelfond, 1997) C (Giunchiglia & Lifschitz, 1998) many features common
extension STRIPS (although C , particular, expressive language many
additional features). languages allow use complex actions|which sets
primitive actions|analogous ability provide combine number elements
joint action. Typically, complex actions inherit effects primitive actions contained them. However, explicit specification effects complex actions
possible, overriding inheritance. overriding mechanism extend arbitrary
number levels (e.g., action effect, overridden b
performed concurrently, effect overridden c performed well,
etc.). action description languages, implicit view time adopted, much like
treatment, concurrent actions assumed performed simultaneously. quite recently, tools actually synthesizing plans domains described
languages C . However, recent progress model-based techniques led
number new algorithms, including SAT encoding language C (Giunchiglia,
2000).
effects one agent's actions depend actions performed agents
time, action specification becomes complex task. STRIPS representation
useful admits relatively simple planning algorithm. However, despite STRIPS's
semantic adequacy ability, principle, represent set actions, verifying
domain description accurate becomes dicult interactions must taken
account. Consequently, believe use dynamic Bayes nets, conjunction
conditional outcome (or probability) trees (Boutilier & Goldszmidt, 1996), provide
natural concise representation actions multiagent settings. specification
technique makes clear uence different context conditions action's effects,
allows one exploit independence different effects. representation
used stochastic domains, dynamic Bayes nets offer advantages even
case purely deterministic actions. POMP algorithm naturally extends form
domain description, complete treatment issue would interesting
direction future research.
adapting existing nonlinear planners handle interacting actions conceptually
simple, expect increase domain complexity inevitably lead poor computational performance. Indeed, experiments POMP algorithm,
found performance greatly affected ordering agenda items. Hence, adequate
heuristics making various choices planner faced with|namely, choosing sub19. principle, nonconcurrency constraint handled manner introducing fictitious
resources.

132

fiPlanning Concurrent Interacting Actions

goals, choosing actions achieve them, choosing threat-resolution strategies|will
become even critical. course, issues central single-agent nonlinear
planners, though anticipate multiagent case interacting actions
require different, additional, heuristics.
interesting topic future work would extending newer planning algorithms
Graphplan (Blum & Furst, 1995) handle multiagent representation language.
Indeed, model-based algorithm Cimatti, et al. (1997) seems offer promising developments direction. Naturally, representational issues raised paper arise
regardless particular planning algorithm used, although different implications.
example, question whether allow concurrent actions destroy
one another's preconditions affected threat removal operators valid POMP,
whereas Graphplan would affect definition interfering actions (and consequently, question actions considered mutually exclusive).
Finally, note approach considered suitable team agents
common set goals. assumes central entity generates plan,
agents access global clock synchronization mechanism
(this typically case single agent multiple effectors, applies certain
cases truly distributed systems). important research issue plans
generated executed distributed fashion, execution
coordinated controlled. important question answers
emerged DAI literature (des Jardins, Durfee, Ortiz Jr., & Wolverton, 1999; Grosz,
Hunsberger, & Kraus, 1999; des Jardins & Wolverton, 1999; Boutilier, 1996, 1999; Brafman,
Halpern, & Shoham, 1998) distributed systems literature (Fagin, Halpern, Moses,
& Vardi, 1995).

Acknowledgments
Thanks referees suggestions presentation ideas Mike
Wellman helpful comments. also thank Daniel Fogel, Ishay Levy, Igor Razgon
implementation POMP algorithm. Boutilier supported NSERC Research Grant OGP0121843, NCE IRIS-II program Project IC-7. Brafman supported Paul Ivanier Center Robotics NCE IRIS-II program Project IC-7. Much
work undertaken authors University British Columbia,
Department Computer Science. Preliminary results paper presented
\Planning Concurrent Interacting Actions," Proceedings Fourteenth National
Conference Artificial Intelligence (AAAI-97), Providence, RI, pp.720{729 (1997).

References
Baral, C., & Gelfond, M. (1997). Reasoning effects concurrent actions. Journal
Logic Programming, 85{117.
Blum, A. L., & Furst, M. L. (1995). Fast planning graph analysis. Proceedings
Fourteenth International Joint Conference Artificial Intelligence, pp. 1636{
1642 Montreal.
133

fiBoutilier & Brafman

Boutilier, C. (1996). Planning, learning coordination multiagent decision processes.
Proceedings Sixth Conference Theoretical Aspects Rationality
Knowledge, pp. 195{210 Amsterdam.
Boutilier, C. (1999). Sequential optimality coordination multiagent systems.
Proceedings Sixteenth International Joint Conference Artificial Intelligence,
pp. 478{485 Stockholm.
Boutilier, C., & Goldszmidt, M. (1996). frame problem Bayesian network action
representations. Proceedings Eleventh Biennial Canadian Conference
Artificial Intelligence, pp. 69{83 Toronto.
Brafman, R. I., Halpern, J. Y., & Shoham, Y. (1998). knowledge requirements
tasks. Artificial Intelligence, 98 (1-2), 317{350.
Cimatti, A., Giunchiglia, E., Giunchiglia, F., & Traverso, P. (1997). Planning via model
checking: decision procedure AR. Proceedings Fourth European Conference Planning (ECP'97), pp. 130{142 Toulouse.
de Giacomo, G., Lesperance, Y., & Levesque, H. J. (1997). Reasoning concurrent
execution, prioritized interrupts, exogenous actions situation calculus.
Proceedings Fifteenth International Joint Conference Artificial Intelligence,
pp. 1221{1226 Nagoya.
Dean, T., & Kanazawa, K. (1989). Persistence probabilistic projection. IEEE Trans.
Systems, Man Cybernetics, 19 (3), 574{585.
des Jardins, M. E., Durfee, E. H., Ortiz Jr., C. L., & Wolverton, M. J. (1999). survey
research distributed continual planning. AI Magazine, 20 (4), 13{22.
des Jardins, M. E., & Wolverton, M. J. (1999). Coodinating distributed planning system.
AI Magazine, 20 (4), 13{22.
Donald, B. R., Jennings, J., & Rus, D. (1993). Information invariants cooperating
autonomous mobile robots. Proceedings International Symposium Robotics
Research Hidden Valley, PA.
Durfee, E. H., & Lesser, V. R. (1989). Negotiating task decomposition allocation using
partial global planning. Huhns, M., & Gasser, L. (Eds.), Distributed AI, Vol. 2.
Morgan Kaufmann.
Durfee, E. H., & Lesser, V. R. (1991). Partial global planning: coordination framework distributed hypothesis formation. IEEE Transactions System, Man,
Cybernetics, 21 (5), 1167{1183.
Ephrati, E., Pollack, M. E., & Rosenschein, J. S. (1995). tractable heuristic maximizes global utility plan combination. Proceedings First International Conference Multiagent Systems, pp. 94{101 San Francisco.
134

fiPlanning Concurrent Interacting Actions

Fagin, R., Halpern, J. Y., Moses, Y., & Vardi, M. Y. (1995). Reasoning Knowledge.
MIT Press, Cambridge, MA.
Fikes, R., & Nilsson, N. (1971). STRIPS: new approach application theorem
proving problem solving. Artificial Intelligence, 2 (3{4), 189{208.
Ghallab, M., & Alaoui, A. M. (1989). Managing eciently temporal relations
indexed spanning trees. Proceedings Eleventh International Joint Conference
Artificial Intelligence, pp. 1297{1303 Detroit.
Giunchiglia, E. (2000). Planning satisfiability expressive action languages: Concurrency, constraints nondeterminism. Proceedings Seventh International
Conference Principles Knowledge Representation Reasoning (KR'00), pp.
657{666 Breckenridge, CO.
Giunchiglia, E., & Lifschitz, V. (1998). action language based causal explanation:
Preliminary report. Proceedings Fifteenth National Conference Artificial
Intelligence, pp. 623{630 Madison, WI.
Grosz, B. J., Hunsberger, L., & Kraus, S. (1999). Planning acting together. AI
Magazine, 20 (4), 13{22.
Jensen, R. M., & Veloso, M. M. (2000). OBDD-based universal planning synchronized
agents non-deterministic domains. Journal Artificial Intelligence Research, 13,
189{226.
Kautz, H., & Selman, B. (1996). Pushing envelope: Planning, propositional logic,
stochastic search. Proceedings Thirteenth National Conference Artificial
Intelligence, pp. 1194{1201 Portland, OR.
Khatib, O., Yokoi, K., Chang, K., Ruspini, D., Holmberg, R., Casal, A., & Baader, A.
(1996). Force strategies cooperative tasks multiple mobile manipulation systems.
Giralt, G., & Hirzinger, G. (Eds.), Robotics Research 7, Seventh International
Symposium, pp. 333{342. Springer-Verlag, Berlin.
Knoblock, C. A. (1994). Generating parallel execution plans partial-order planner.
Proceedings Second International Conference AI Planning Systems, pp.
98{103 Chicago.
Koehler, J. (1998). Planning resource constraints. Proceedings Thirteenth
European Conference Artificial Intelligence, pp. 489{493 Brighton, UK.
Lin, F., & Shoham, Y. (1992). Concurrent actions situation calculus. Proceedings
Tenth National Conference Artificial Intelligence, pp. 590{595 San Jose.
Lingard, A. R., & Richards, E. B. (1998). Planning parallel actions. Artificial Intelligence,
99 (2), 261{324.
McCarthy, J., & Hayes, P. (1969). philosophical problems standpoint
artificial intelligence. Machine Intelligence, 4, 463{502.
135

fiBoutilier & Brafman

Moses, Y., & Tennenholtz, M. (1995). Multi-entity models. Machine Intelligence, 14, 63{88.
Penberthy, J. S., & Weld, D. S. (1992). UCPOP: sound, complete, partial order planner
ADL. Proceedings Third International Conference Principles Knowledge
Representation Reasoning (KR'92), pp. 103{114 Cambridge, MA.
Pinto, J. (1998). Concurrent actions interacting effects. Proceedings Sixth
International Conference Principles Knowledge Rerpresentation Reasoning
(KR'98), pp. 292{303 Trento.
Reiter, R. (1978). closed world databases. Gallaire, H., & Minker, J. (Eds.), Logic
Databases, pp. 55{76. Plenum, New York.
Reiter, R. (1991). frame problem situation calculus: simple solution (sometimes) completeness result goal regression. Lifschitz, V. (Ed.), Artificial
Intelligence Mathematical Theory Computation (Papers Honor John McCarthy), pp. 359{380. Academic Press, San Diego.
Reiter, R. (1996). Natural actions, concurrency continuous time situation calculus. Proceedings Fifth International Conference Principles Knowledge
Representation Reasoning (KR'96), pp. 2{13.
Stone, P., & Veloso, M. M. (1999). Task decomposition, dynamic role assignment, lowbandwidth communication real-time strategic teamwork. Artificial Intelligence,
110 (2), 241{273.
Weld, D. S. (1994). introduction least commitment planning. AI Magazine, 15 (4),
27{61.
Wilkins, D. E., & Myers, K. L. (1998). multiagent planning architecture. Proceedings
Fourth International Conference AI Planning Systems, pp. 154{162 Pittsburgh.
Wolverton, M. J., & des Jardins, M. (1998). Controlling communication distributed planning using irrelevance reasoning. Proceedings Fifteenth National Conference
Artificial Intelligence, pp. 868{874 Madison, WI.

136

fiJournal Artificial Intelligence Research 14 (2001) 303358

Submitted 10/00; published 6/01

GIB: Imperfect Information Computationally
Challenging Game
Matthew L. Ginsberg

ginsberg@cirl.uoregon.edu

CIRL
1269 University Oregon
Eugene, 97405 USA

Abstract
paper investigates problems arising construction program play
game contract bridge. problems include difficulty solving games
perfect information variant, techniques needed address fact bridge not,
fact, perfect information game. Gib, program described, involves five separate
technical advances: partition search, practical application Monte Carlo techniques
realistic problems, focus achievable sets solve problems inherent Monte Carlo
approach, extension alpha-beta pruning total orders arbitrary distributive
lattices, use squeaky wheel optimization find approximately optimal solutions
cardplay problems.
Gib currently believed approximately expert caliber, currently
strongest computer bridge program world.

1. Introduction
classic games mental skill, card games Go yet see appearance serious computer challengers. Go, appears game
fundamentally one pattern recognition opposed search; brute-force techniques
successful development chess-playing programs failed almost utterly deal Gos huge branching factor. Indeed, arguably strongest Go
program world (Handtalk) beaten 1-dan Janice Kim (winner 1984 Fuji
Womens Championship) 1997 AAAI Hall Champions Kim given
program monumental 25 stone handicap.
Card games appear different. Perhaps games imperfect information, perhaps reasons, existing poker bridge programs extremely
weak. World poker champion Howard Lederer (Texas Holdem, 1996) said would
expect beat existing poker program five minutes play.1 Perennial world bridge
champion Bob Hamman, seven-time winner Bermuda Bowl, summarized state
bridge programs 1994 saying that, would improve hopeless.
poker, reason optimism: gala system (Koller & Pfeffer, 1995),
applicable, promises produce computer player unprecedented strength reducing
poker problem large linear optimization problem solved generate
strategy nearly optimal game-theoretic sense. Schaeffer, author world
1. Many citations results personal communications. communications indicated simply presence accompanying text.
c
2001
AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiGinsberg

champion checkers program Chinook (Schaeffer, 1997), also reporting significant success
poker domain (Billings, Papp, Schaeffer, & Szafron, 1998).
situation bridge bleaker. addition, American Contract
Bridge League (acbl) rank bulk players meaningful ways, difficult
compare strengths competing programs players.
general, performance bridge measured playing deal twice more,
cards held one pair players given another pair replay
results compared.2 team bridge match thus typically consists
two pairs, one pair playing North/South (N/S) cards one table
pair playing E/W cards table. results obtained two pairs
added; sum positive, team wins particular deal negative, lose
it.
general, numeric sum results obtained two pairs converted
International Match Points, imps. purpose conversion diminish
impact single deals total, lest abnormal result one particular deal
unduly large impact result entire match.
Jeff Goldsmith reports standard deviation single deal bridge 5.5
imps, two roughly equal pairs play deal, would surprising one
team beat amount. also appears difference
average club player expert 1.5 imps (per deal played); strongest players
world approximately 0.5 imps/deal better still. Excepting gib, strongest
bridge playing programs appear slightly weaker average club players.
Progress computer bridge slow. incorporation planning techniques
Bridge Baron, example, appears led performance increment approximately
1/3 imp per deal (Smith, Nau, & Throop, 1996). modest improvement still leaves
Bridge Baron far shy expert-level (or even good amateur-level) performance.
Prior 1997, bridge programs generally attempted duplicate human bridge-playing
methodology proceeded attempting recognize class
particular deal fell: finesse, end play, squeeze, etc. Smith et al.s work Bridge Baron
program uses planning extend approach, plans continue constructed
human bridge techniques. Nygate Sterlings early work python (Sterling &
Nygate, 1990) produced expert system could recognize squeezes prepare
them. retrospect, perhaps expected approach limited success;
certainly chess-playing programs attempted mimic human methodology,
paradise (Wilkins, 1980), fared poorly.
Gib, introduced 1998, works differently. Instead modeling play techniques
used humans, gib uses brute-force search analyze situation finds itself.
variety techniques used suggest plays based results brute-force
search. technique successful competitive bridge programs
switched knowledge-based approach search-based approach.
GIBs cardplay based brute-force techniques expert level (see Section 3)
even without extensions discuss Section 5 subsequently.
weakest part gibs game bidding, relies large database rules describing
2. rules bridge summarized Appendix A.

304

fiGIB: Imperfect information computationally challenging game

meanings various auctions. Quantitative comparisons difficult, although
general impression stronger players using GIB overall play comparable
human expert.
paper describes various techniques used gib project,
follows:
1. Gibs analysis bidding cardplay rests ability analyze bridges
perfect-information variant, cards visible side attempts
take many tricks possible (this perfect-information variant generally referred
double dummy bridge). Double dummy problems solved using technique
known partition search, discussed Section 2.
2. Early versions gib used Monte Carlo methods exclusively select action based
double dummy analysis. technique originally proposed cardplay
Levy (Levy, 1989), implemented performance program
gib. Extending Levys suggestion, gib uses Monte Carlo simulation cardplay
(discussed Section 3) bidding (discussed Section 4).
3. Section 5 discusses difficulties Monte Carlo approach. Frank et al.
suggested dealing problems searching space possible plans
playing particular bridge deal, methods appear intractable
theory practice (Frank & Basin, 1998; Frank, Basin, & Bundy, 2000). instead
choose deal difficulties modifying understanding game
value bridge deal integer (the number tricks
taken) instead taken distributive lattice.
4. Section 6, show alpha-beta pruning mechanism extended deal
games type. allows us find optimal plans playing bridge end
positions involving 32 cards fewer. (In contrast, Franks method capable
finding solutions 16 card endings.)
5. Finally, applying ideas play full deals (52 cards) requires solving
approximate version overall problem. Section 7, describe nature
approximation used application squeaky wheel optimization (Joslin &
Clements, 1999) solve it.
Concluding remarks contained Section 8.

2. Partition search
Computers effective game players extent brute-force search overcome
innate stupidity; time spent searching spent examining moves human
player would discard obviously without merit.
example, suppose White forced win particular chess position,
perhaps beginning attack Blacks queen. human analyzing position
see Black doesnt respond attack, lose queen; analysis considers
places queen could move appropriate responses each.
305

fiGinsberg

machine considers responses queen moves well, course. must also
analyze detail every Black move, carefully demonstrating
moves refuted capturing Black queen. six-ply search analyze
every one moves five ply, even refutations identical cases.
Conventional pruning techniques cannot help here; using - pruning, example,
entire main line (Whites winning choices Blacks losing responses) must
analyzed even though great deal apparent redundancy analysis.3
search problems, techniques based ideas dependency maintenance (Stallman & Sussman, 1977) potentially used overcome sort difficulty.
example, consider chronological backtracking applied map coloring problem.
dead end reached search backs up, information cached effect
eliminate specific dead end encountered. Recording information giving
reason failure make search substantially efficient.
attempting color map three colors, example, thirty countries may
colored detected contradiction involves five. recording
contradiction five countries, dead ends fail reason avoided.
Dependency-based methods limited use practice overhead
involved constructing using collection accumulated reasons. problem
substantially addressed work dynamic backtracking (Ginsberg, 1993)
successors relsat (Bayardo & Miranker, 1996), polynomial limits placed
number nogoods maintained.
game search, however, algorithms already include significant cached information
form transposition table (Greenblatt, Eastlake, & Crocker, 1967; Marsland, 1986).
transposition table stores single game position backed value
associated it. name reflects fact many games transpose identical
positions reached swapping order moves made. transposition
table eliminates need recompute values positions already analyzed.
collected observations lead naturally idea transposition tables
store single positions values, sets positions values. Continuing
dependency-maintenance analogy, transposition table storing sets positions
prune subsequent search far efficiently table stores singletons.
two reasons approach works. first, already mentioned, game-playing programs already maintain transposition tables, thereby
incurring bulk computational expense involved storing tables
general form. second fundamental reason game ends one
player winner, reason victory generally local one. chess game
thought ending one side king captured (a completely local phenomenon);
checkers game, one side runs moves. Even internal search node evaluated game ends, reason assigning specific value likely
independent global features (e.g., Black pawn a5 a6?). Partition search
exploits existence transposition tables locality evaluation realistic
games.
3. informal solution Adelson-Velskiy et al.s method analogies (Adelson-Velskiy, Arlazarov,
& Donskoy, 1975). approach appears little use practice restricted
specific class situations arising chess games.

306

fiGIB: Imperfect information computationally challenging game

X X


X

!
!!
!
!

!

moves

aa

@

@
@

aa
aa

X X


X

X X

X

X X



X

X X


X

X X X


X

X X X

X

X X X



X

X X
X

X

Figure 1: portion game tree tic-tac-toe

section explains ideas via example describes formally.
Experimental results bridge also presented.
2.1 example
illustrative examples partition search taken game tic-tac-toe.
portion game tree game appears Figure 1, analyzing
position win X. show Os four possible moves, winning response
X case. Although X frequently wins making row across top
diagram, - pruning cannot reduce size tree Os losing options must
analyzed separately.
Consider position lower left diagram, X won:
X X X


X

(1)

reason X local. retaining list positions known
outcomes, entry make position is:
X X X
? ? ?
? ? ?

(2)

? means irrelevant whether associated square marked X,
O, unmarked. table entry corresponds single position, approximately
36 unassigned squares contain Xs, Os, blank. reduce
game tree Figure 1 to:
307

fiGinsberg

X X


X

!
!!
!
!

!

X X


X

moves


@ aa
aa
@
@


X X

X

X X



X

X X


X

@

@
@

X X X
? ? ?
? ? ?

Continuing analysis, clear position

X X
X

X

X X
? ? ?
? ? ?

(3)

win X X play.4
X ? ?
?
?
? ? X

tree reduced to:
X X


X






X X
? ? ?
? ? ?

moves

HH
H
HH

X ? ?
?
?
? ? X

X X X
? ? ?
? ? ?

X ? ?
? X ?
? ? X

Finally, consider position
X X
?
? ? X

(4)

Os turn opposed Xs. moves second row, get instance
X X
? ? ?
? ? ?

moves upper right, get instance
X ? ?
?
?
? ? X
4. assume already game here, since X would play game
over.

308

fiGIB: Imperfect information computationally challenging game

Thus every one Os moves leads position known win X,
conclude original position (4) win X well. root node
reduced tree therefore replaced position (4).
positions capture essence algorithm propose: player x
move position member set known win x, given position
win well. every move position loss, original position also.
2.2 Formalizing partition search
section, present summary existing methods evaluating positions game
trees. nothing new here; aim simply develop precise framework
new results presented.
Definition 2.2.1 interval-valued game quadruple (G, pI , s, ev), G finite
set legal positions, pI G initial position, : G 2G gives immediate
successors given position, ev evaluation function
ev : G {max, min} [0, 1]
Informally, p0 s(p) means position p0 reached p single move,
evaluation function ev labels internal nodes based upon whose turn play (max
min) values terminal positions terms element unit interval [0, 1].
structures G, pI , ev required satisfy following conditions:
1. sequence positions p0 , . . . , pn n > 0, pi s(pi1 )
pn = p0 . words, loops return identical position.
2. ev(p) [0, 1] s(p) = . words, ev assigns numerical value
p game over. Informally, ev(p) = max means maximizer
play ev(p) = min means minimizer play.
use 2G denote power set G, set subsets G. two
things note definition.
First, requirement game loops consistent modern
games. chess, example, positions repeat concealed counter
draws game either single position repeats three times certain number moves
pass without capture pawn move. fact, dealing hidden counter
natural partition search setting conventional one, since evaluation function
general (although always) independent value counter.
Second, range ev includes entire unit interval [0, 1]. value 0 represents
win minimizer, 1 win maximizer. intermediate values might
correspond intermediate results (e.g., draw) or, importantly, allow us deal
internal search nodes treated terminal assigned approximate values
time remains additional search.
evaluation function ev used assign numerical values entire set G
positions:
309

fiGinsberg

Definition 2.2.2 Given interval-valued game (G, pI , s, ev), introduce function
evc : G [0, 1] defined recursively

ev(p),

evc (p) = maxp0 s(p) evc (p0 ),

minp0 s(p) evc (p0 ),

ev(p) [0, 1];
ev(p) = max;
ev(p) = min.

value (G, pI , s, ev) defined evc (pI ).
evaluate position game, use well-known minimax procedure:
Algorithm 2.2.3 (Minimax) game (G, pI , s, ev) position p G, compute
evc (p):
ev(p) [0, 1] return ev(p)
ev(p) = max return maxp0 s(p) minimax(p0 )
ev(p) = min return minp0 s(p) minimax(p0 )
two ways algorithm typically extended. first involves introduction transposition tables; assume new entry added
transposition table whenever one computed. (A modification cache
selected results straightforward.) second involves introduction - pruning.
Incorporating ideas gives us algorithm top next page.
entry transposition table consists position p, current cutoffs [x, y],
computed value v. Note need include information cutoffs
transposition table itself, since validity particular entry depends cutoffs
question.
example, suppose value node fact 1 (a win maximizer) node evaluated cutoffs [0, 0.5] value 0.5 returned
(indicating draw) maximizer obviously drawing line. clear
value accurate given cutoffs; wider cutoffs lead different answer.
general, upper cutoff currently smallest value assigned minimizing
node; minimizer least well force value lower.
Similarly, x currently greatest value assigned maximizing node. cutoff
values updated algorithm invoked recursively lines responsible setting
vnew , value assigned child current position p.
Proposition 2.2.4 Suppose v = (p, [x, y]) entry (p, [x, y], v) .
evc (p) [x, y], value returned Algorithm 2.2.5 evc (p).

310

fiGIB: Imperfect information computationally challenging game

Algorithm 2.2.5 (- pruning transposition tables) Given interval-valued
game (G, pI , s, ev), position p G, cutoffs [x, y] [0, 1] transposition table
consisting triples (p, [a, b], v) p G b, v [0, 1], compute (p, [x, y]):
entry (p, [x, y], z) return z
ev(p) [0, 1] vans = ev(p)
ev(p) = max
vans := 0
p0 s(p)
vnew = (p0 , [max(vans , x), y])
vnew
:= (p, [x, y], vnew )
return vnew
vnew > vans vans = vnew
ev(p) = min
vans := 1
p0 s(p)
vnew = (p0 , [x, min(vans , y)])
vnew x
:= (p, [x, y], vnew )
return vnew
vnew < vans vans = vnew
:= (p, [x, y], vans )
return vans

2.3 Partitions
position present new ideas. begin formalizing idea
position reach known winning position one reach known losing
ones.
Definition 2.3.1 Given interval-valued game (G, pI , s, ev) set positions G,
say set positions reach set p s(p)S 6= .
set denoted R0 (S). set positions constrained reach set
p s(p) S, denoted C0 (S).
definitions match intuition; set positions reach set
indeed set positions p element immediate successor p,
s(p) 6= . Similarly, position p constrained reach every immediate
successor p S, s(p) S.
Unfortunately, may feasible construct R0 C0 operators explicitly;
may concise representation set positions reach S.
practice, reflected fact data structures used describe
311

fiGinsberg

set may conveniently describe set R0 (S) situations
reached.
suppose expanding search tree itself, find analyzing particular position p determined win maximizer
maximizer move p winning set S; words, p win
R0 (S). would like record point set R0 (S) win maximizer, may able construct represent set conveniently. therefore
assume computationally effective way approximate R0 C0
functions, (for example) function R conservative implementation
R0 R says reach S, can:
R(p, S) R0 (S)
R(p, S) intended represent set positions like p reach
(winning) set S. Note inclusion p argument R(p, S), since certainly
want p R(p, S). cache fact every element R(p, S) win
maximizer, certainly want information include fact p
shown win. Thus require p R(p, S) well.
Finally, need way generalize information returned evaluation
function; evaluation function identifies position p win maximizer,
want way generalize wider set positions also wins.
formalize assuming generalization function P respects
evaluation function sense value returned P set positions
ev evaluates identically.
Definition 2.3.2 Let (G, pI , S, ev) interval-valued game. Let f function
range 2G , f selects set positions based arguments. say
f respects evaluation function ev whenever p, p0 F F range f ,
ev(p) = ev(p0 ).
partition system game triple (P, R, C) functions respect ev
that:
1. P : G 2G maps positions sets positions position p, p
P (p).
2. R : G 2G 2G accepts arguments position p set positions S.
p R0 (S), p reach S, p R(p, S) R0 (S).
3. C : G 2G 2G accepts arguments position p set positions S.
p C0 (S), p constrained reach S, p C(p, S) C0 (S).
mentioned above, function P tells us positions sufficiently like p
evaluate value. tic-tac-toe, example, position (1) X
row across top might generalized P set positions
X X X
? ? ?
? ? ?

312

(5)

fiGIB: Imperfect information computationally challenging game

(2).
functions R C approximate R0 C0 . turning tic-tac-toe
example, suppose take set positions appearing (5) p
given
X X


X

reached p. R(p, S) might
X X
? ? ?
? ? ?

(6)

(3), although could also take R(p, S) = {p} R(p, S)
X X


X

X X

X

X

? ? ? ? ? ?
? ?

?

? ? ?

although last union might awkward represent. Note R C
functions p well S; set returned must include given position p
otherwise expected vary p does.
modify Algorithm 2.2.5 transposition table, instead caching
results single positions, caches results sets positions. discussed introduction section, analog introduction truth maintenance techniques
adversary search. modified algorithm 2.3.3 appears Figure 2 returns pair
values value given position, set positions take
value.
Proposition 2.3.4 Suppose v = (p, [x, y]) every (S, [x, y], v) p S.
evc (p) [x, y], value returned Algorithm 2.3.3 evc (p).
Proof. need show algorithm returns, position Sans
value vans . ensure transposition table remains correct.
see this, suppose node expanded maximizing node; minimizing
case dual. Suppose first node loss maximizer, value 0.
showing node loss, examined successor nodes sets
denoted Snew Algorithm 2.3.3; maximizer subsequently finds position
moves outside various Snew , still losing position.
Since Sall = Snew , maximizer lose position constrained
next move element Sall . Since every position C(p, Sall ) property,
safe take Sans = C(p, Sall ). done first line dagger
algorithm.
interesting case eventual value node nonzero;
order another node n demonstrably value, maximizer must
new options n, must still move achieves value vans n.
first condition identical earlier case vans = 0. second, note
time maximizer finds new best move, set Sans set positions
313

fiGinsberg

Algorithm 2.3.3 (Partition search) Given game (G, pI , s, ev) (P, R, C) partition
system it, position p G, cutoffs [x, y] [0, 1] transposition table consisting
triples (S, [a, b], v) G b, v [0, 1], compute (p, [x, y]):
entry (S, [x, y], z) p return hz, Si
ev(p) [0, 1] hvans , Sans = hev(p), P (p)i
ev(p) = max
vans := 0
Sall :=
p0 s(p)
hvnew , Snew = (p0 , [max(vans , x), y])
vnew
:= (Snew , [x, y], vnew )
return hvnew , Snew
vnew > vans hvans , Sans = hvnew , Snew
Sall := Sall Snew
vans = 0 Sans = C(p, Sall )

else Sans = R(p, Sans ) C(p, Sall )

ev(p) = min
vans := 1
Sall :=
p0 s(p)
hvnew , Snew = (p0 , [x, min(vans , y)])
vnew x
:= (Snew , [x, y], vnew )
return hvnew , Snew
vnew < vans hvans , Sans = hvnew , Snew
Sall := Sall Snew
vans = 1 Sans = C(p, Sall )
else Sans = R(p, Sans ) C(p, Sall )

:= (Sans , [x, y], vans )
return hvans , Sans
Figure 2: partition search algorithm

314

fiGIB: Imperfect information computationally challenging game

know recursively achieve value. complete maximizers loop
algorithm, follows Sans set positions maximizer
indeed achieve value vans . Thus maximizer also achieve value
position R(p, Sans ). follows overall set positions known value
vans given R(p, Sans ) C(p, Sall ), intersecting two conditions paragraph.
done second daggered step algorithm.
2.4 Zero-window variations
effectiveness partition search depends crucially size sets maintained
transposition table. sets large, many positions evaluated lookup.
sets small, partition search collapses conventional - pruning.
examination Algorithm 2.3.3 suggests points algorithm
sets reduced marked double dagger description,
intersection required need ensure player make
move equivalent best one options. effectiveness
method would improved possibility removed.
see this, suppose moment evaluation function always returned
0 1, opposed intermediate values. maximizer play value
vnew = 1, prune generated better value found
maximizer. vnew 0, vans = 0 avoid troublesome
intersection. maximizer loses best move worry
making.
reality, restriction values 0 1 unrealistic. games, bridge,
allow two outcomes, others cannot analyzed termination need
rely evaluation functions return approximate values internal nodes.
deal situations using technique known zero-window search (originally called
scout search (Pearl, 1980)). evaluate specific position, one first estimates value
e determines whether actual value e treating
value v > e win maximizer value v e win minimizer.
results calculation used refine guess, process repeated.
initial estimate available, binary search used find value within
desired tolerance.
Zero-window search effective little time wasted iterations
estimate wildly inaccurate; typically many lines showing new estimate
needed. time spent last iteration two, developing tight bounds
position considered. analog conventional - pruning,
bounds typically get tight quickly bulk analysis deals situation
value original position known lie fairly narrow range.
zero-window search, node always evaluates 0 1, since either v > e v e.
allows straightforward modification Algorithm 2.3.3 avoids troublesome
cases mentioned earlier.
315

fiGinsberg

2.5 Experimental results
Partition search tested analyzing 1000 randomly generated bridge deals comparing number nodes expanded using partition search conventional methods.
addition general interest bridge, two reasons expected
partition search useful game. First, partition search requires
functions R0 C0 support partition-like analysis; must case analysis
one situation apply equally well variety similar ones. Second, must possible
build approximating functions R C reasonably accurate representatives
R0 C0 .
Bridge satisfies properties. Expert discussion particular deal often
refer small cards xs, indicating indeed case exact ranks
cards irrelevant. Second, possible back xs one position
predecessors. If, example, one player plays club chance impact
rest game, reaches position subsequent analysis shows
two small clubs, clearly must three small clubs originally.
Finally, fact cards simply replaced xs means possible
construct data structures time per node expanded virtually unchanged
using conventional methods.
Perhaps example make clearer. Consider following partial bridge deal
East lead trumps:












AK


10













AQ




KJ




analysis situation shows main line, cards win tricks
virtue ranks spade Ace, King Queen. sanctions replacement
figure following general one:
316

fiGIB: Imperfect information computationally challenging game












xx


x
x












AQ




Kx




Note first replacement sound sense every position
instance second diagram guaranteed value original.
resorted informal argument form Jacks lower tend matter,
instead precise argument form, expansion search tree associated
given deal, Jacks lower proven never matter.
Bridge also appears extremely well-suited (no pun intended) kind analysis
describing; chess analog might involve describing mating combination
saying position Blacks queen didnt matter. happen,
casual chess conversation much less likely include sort remark bridge
conversation likely refer host small cards xs, suggesting least
partition technique easily applied bridge chess (or games).
said, however, results bridge striking, leading performance improvements order magnitude fairly small search spaces (perhaps 106 nodes).
deals tested involved 12 48 cards analyzed termination,
depth search varied 12 48. (The solver without partition search
unable solve larger problems.) branching factor minimax without transposition
tables appeared approximately 4, results appear Figure 3.
point graph corresponds single deal. position point
x-axis indicates number nodes expanded using - pruning transposition tables,
position y-axis number expanded using partition search well.
axes plotted logarithmically.
partition conventional cases, binary zero-window search used
determine exact value assigned hand, rules bridge constrain
range 0 number tricks left (one quarter number cards play).
mentioned previously, hands generated using full deck 52 cards considered
conventional method general incapable solving them. program
run Sparc 5 PowerMac 6100, expanded approximately 15K nodes/second.
transposition table shares common structure among different sets result, uses
approximately 6 bytes/node.
dotted line figure = x corresponds breakeven point relative
- pruning isolation. solid line least-squares best fit logarithmic data,
given = 1.57x0.76 . suggests partition search leading effective
reduction branching factor b b0.76 . improvement, beyond
317

fiGinsberg

107

p

1.57x0.76

105

Partition
103

10

p p

p

p

p
p p
p p pp p p
p
p
p pp p
p p p pp p p p p p p p p p p pp p
p p pp pppppppppp pp pppppppp ppppppppp p p pppp pp ppp p
pp p p p p p p
p pppp p p p pp p p p p pp ppp p p p p p p p
ppp p ppp pppp pppp pppp p pp ppppp pppppp pp p pppp ppp p pp p
p
p pp p p p p p p p pp p p p p pp p p pp p p p p
pp p p p pp pppppppp ppppp ppppp pppppppppp pp ppp p pp ppp p ppp p p p p p p p p
p p p p p p p p pp p p
p p p p ppppp p p pp pp pppppppp p p p p p p p p p p p
pp p pppppppppppppppp ppppppp pppp pp ppp ppppp pppppp pp p p p pp pp pp p p pp
p p
p p p pppp ppp p pp p ppppp pp p p p p p p p p p p
p ppp pp pp pppppp pppppp ppppppppppp pp p ppp pp p p p p ppp p ppp p p p
p
p
p
p pppp pp pppp p p p ppppp p p p p pp p p p p p
p pp pppppppppppppppppppppp pppp p pp pp p p p p pp p p
p
p
p
p
p
p
p
pppp p p p p p pp
p p p p p p ppp p p

p

10

103

105

107

Conventional
Figure 3: Nodes expanded function method
provided - pruning, contrasted - pruning itself, gives reduction
compared pure minimax b b0.75 moves ordered randomly (Pearl,
1982) b b0.5 ordering optimal.
method also applied full deals 52 cards, solved expanding average 18,000 nodes per deal.5 works second cpu
time.

3. Monte Carlo cardplay algorithms
One way might use perfect-information cardplay engine proceed
realistic situation would deal unseen cards random, biasing deal
consistent bidding cards played thus far. could
analyze resulting deal double dummy decide possible plays
strongest. Averaging large number Monte Carlo samples would allow us
deal imperfect nature bridge information. idea initially suggested
Levy (Levy, 1989), although appear realized (see below)
problems practice.
Algorithm 3.0.1 (Monte Carlo card selection) select move candidate set
moves:
5. version gib released October 2000 replaced transposition table data
structure uses fixed amount memory, also sorts moves based narrowness (suggested
Plaat et al. (Plaat, Schaeffer, Pijls, & de Bruin, 1996) rooted idea conspiracy search
(McAllester, 1988)) killer heuristic. memory requirements reduced, overall
performance little changed.

318

fiGIB: Imperfect information computationally challenging game

1. Construct set deals consistent bidding play deal thus
far.
2. move deal D, evaluate double dummy result
making move deal d. Denote score obtained making move
s(m, d).
3. Return

P

s(m, d)

maximal.

Monte Carlo approach drawbacks pointed variety
authors, including Koller others (Frank & Basin, 1998). obvious among
approach never suggests making information gathering play. all,
perfect-information variant decision based invariably assumes
information available time next decision must made! Instead,
tendency approach simply defer important decisions; many situations
may lead information gathering inadvertently, amount information acquired
generally far less approaches might provide.
example, suppose particular deal, gib four possible lines play
make contract:
1. Line works West Q.
2. Line B works East Q.
3. Line C defers guess later.
4. Line (the clever line) works independent Q.
Assuming either player equally likely hold Q, Monte Carlo analyzer
correctly conclude line works half time, line B works half time. Line
C, however, presumed work time, since contract still made
(double dummy) guess deferred. Line also concluded work
time (correctly, case).
result, gib choose randomly last two possibilities above, believing
defer guess later (even next card), make
guess correctly. correct play, course, D.
discuss solution difficulties Sections 57; although gibs defensive
cardplay continues based ideas, declarer play uses stronger techniques. Nevertheless, basing card play algorithm presented leads extremely
strong results, approximately level human expert. Since gibs introduction,
competitive bridge-playing programs switched cardplay similar methods, although gibs double dummy analysis substantially faster
programs play correspondingly stronger.
describe three tests GIBs cardplay algorithms: Performance commercially available set benchmarks, performance human championship designed
highlight cardplay isolation, statistical performance measured large set
deals.
319

fiGinsberg

first test, evaluated strength gibs cardplay using Bridge Master (BM),
commercial program developed Canadian internationalist Fred Gitelman. BM contains
180 deals 5 levels difficulty. 36 deals level problem declarer
play. misplay hand, BM moves defenders cards around necessary ensure
defeat.
BM used test instead randomly dealt deals signal noise ratio far higher; good plays generally rewarded bad ones punished. Every deal also
contains lesson kind; completely uninteresting deals line
play irrelevant obvious. drawbacks testing gibs performance nonrandomly dealt deals, course, since BM deals may way representative
problems bridge player would actually encounter table.
test run Microsoft Windows 200 MHz Pentium Pro. benchmark,
Bridge Baron (BB) version 6 also tested deals using hardware.6
BB given 10 seconds select play, gib given 90 seconds play entire
deal maximum Monte Carlo sample size 50.7 New deals generated time
play decision needed made.
numbers approximately equalized computational resources used two
programs; BB could theory take 260 seconds per deal (ten seconds 26 plays),
practice took substantially less. Gib given auctions well;
facility BB. information critical small number deals.
two systems performed:
Level
1
2
3
4
5
Total

BB
16
8
2
1
4
33
18.3%

GIB
31
23
12
21
13
100
55.6%

entry number deals played successfully program question.
Gibs mistakes illuminating. involve failing gather information, problems combining multiple chances (as case above). BMs deals
get difficult, often involve combining variety possibly winning options
GIBs performance falls levels 2 3.
still higher levels, however, BM typically involves successful development
complex end positions, gibs performance rebounds. appeared happen BB
well, although much lesser extent. gratifying see gib discover
complex end positions around BM deals designed, gratifying still
witness gibs discovery maneuver hitherto identified bridge
literature, described Appendix B.
6. current version Bridge Baron 10 could expected perform guardedly better test
this. Bridge Baron 6 include Smith enhancements (Smith et al., 1996).
7. GIBs Monte Carlo sample size fixed 50 cases, provides good compromise
speed play accuracy result.

320

fiGIB: Imperfect information computationally challenging game

Experiments one tedious, text interface commercial program Bridge Master Bridge Baron. result, information regarding
sensitivity gibs performance various parameters tends anecdotal.
Gib solves additional 16 problems (bringing total 64.4%) given additional
resources form extra time (up 100 seconds per play, although time
rarely taken), larger Monte Carlo sample (100 deals instead 50) hand-generated
explanations opponents bids opening leads. three factors appeared
contribute equally improved performance.
authors reporting comparable levels performance gib. Forrester, working
different similar benchmark (Blackwood, 1979), reports8 gib solves 68%
problems given 20 seconds/play, 74% given 30 seconds/play. Deals
gib outplayed human experts topic series articles Dutch bridge
magazine IMP (Eskes, 1997, sequels).9 Based results, gib invited
participate invitational event 1998 world bridge championships France;
event involved deals similar Bridge Masters substantially difficult. Gib joined
field 34 best card players world, player facing twelve problems
course two days. Gib leading halfway mark, played poorly
second day (perhaps pressure much it), finished twelfth.
human participants given 90 minutes play deal, although
penalized slightly playing slowly. GIB played deal ten minutes, using
Monte Carlo sample size 500; tests event indicated little improvement
gib allotted time. Michael Rosenberg, eventual winner contest
pre-tournament favorite, fact made one mistake Bart Bramley,
second place finisher. Rosenberg played quickly enough Bramleys accumulated
time penalties gave Rosenberg victory. scoring method thus favors GIB slightly.
Finally, gibs performance evaluated directly using records actual play.
records available high levels human competition (world national championships, typically), possible determine exactly frequently humans make
mistakes bridge table. Figure 4, show frequency data
indicates human declarer, leading nth trick deal, makes mistake
causes contract become unmakeable double-dummy basis. axis gives
frequency mistakes plotted logarithmically; one would expect, play becomes
accurate later deal.
also give similar data gib, based large sample deals gib played
itself. error profiles two quite similar.
turning defensive play, let point method analysis favors gib
slightly. Failing make information gathering play gets reflected figure,
since lack information cause gib make double-dummy mistake subsequently.
human declarers often work give defenders problems exploit relative
lack information, tactic rewarded analysis. Similar results
defensive play appear Figure 5.
8. Posting rec.games.bridge 14 July 1997.
9. http://www.imp-bridge.nl

321

fiGinsberg

0.1

human
GIB

0.01
P(err)
0.001

0.0001

0

2

4

6
trick

8

10

12

Figure 4: Gibs performance declarer

0.1

human
GIB

0.01

P(err) 0.001

0.0001

1e-05

0

2

4

6
trick

8

Figure 5: Gibs performance defender

322

10

12

fiGIB: Imperfect information computationally challenging game

two important technical remarks must made Monte Carlo
algorithm proceeding. First, note cavalier simply saying, Construct
set deals consistent bidding play deal thus far.
construct deals consistent bidding, first simplify auction observed,
building constraints describing hands around table. deal hands
consistent constraints using deal generator deals unbiased hands given
restrictions number cards held player suit. set deals
tested remove elements satisfy remaining constraints,
remaining deals passed bidding module identify observed bids
would made players question. (This assumes gib reasonable
understanding bidding methods used opponents.) overall dealing process
typically takes one two seconds generate full set deals needed algorithm.
card play must analyzed. Ideally, gib would something similar
bidding, determining whether player would played indicated
particular deal. Unfortunately, simply impractical test hypothetical decision
recursively cardplay module itself. Instead, gib tries evaluate probability
West (for example) K (for example), use probabilities
weight sample itself.
understand source weighting probabilities, let us consider specific example. Suppose particular situation, gib plays 5. analysis indicates
80% time next player (say West) holds K, mistake West
play it. words, Wests failure play K leads odds 4:1
hasnt got it.
odds used via Bayes rule adjust probability West holds
K all. probabilities modified include information revealed
defensive signalling (if any), adjusted probabilities finally used bias Monte
P
P
Carlo sample. evaluation s(m, d) Algorithm 3.0.1 replaced wd s(m, d)
wd weight assigned deal d. heavily weighted deals thus larger
impact gibs eventual decision.
second technical point regarding algorithm involves fact needs
run quickly may need terminated analysis complete.
former, variety greedy techniques used ensure move
P
P
considered show s(d, m) s(d, m0 ) m0 . algorithm also
uses iterative broadening (Ginsberg & Harvey, 1992) ensure low-width answer
available high-width search fails terminate time. Results low-
high-width searches combined time expires.
Also regarding speed, algorithm requires deal Monte Carlo
sample possible move, evaluate resulting position exactly. Knowing simply
move m1 good move m2 deal enough; m1 may better m2
elsewhere need compare quantitatively. approach aided substantially
partition search idea, entries transposition table correspond single
positions evaluated values, sets positions values. many cases,
m1 m2 may fall entry partition table long actually
transpose one another exactly.
323

fiGinsberg

4. Monte Carlo bidding
purpose bidding bridge twofold. primary purpose share information
cards partner cooperatively select optimal final
contract. secondary purpose disrupt opponents attempt same.
order achieve purpose, wide variety bidding languages developed. some, suggest clubs trumps, means lot them.
others, suggestion temporary information conveyed quite different.
languages, meaning assigned wide variety bids particular
situations; also default rules assign meanings bids specifically
assigned meanings. computer bridge player need similar understandings.
Bidding interesting meanings frequently overlap; may one
bids suitable (or nearly so) particular set cards. Existing computer
programs simply matched possible bids large databases giving meanings,
searching bid best matches cards machines hold. World champion
Chip Martel reports human experts take different approach.10,11
Although expert bidding based database used existing programs,
close decisions made simulating results candidate action. involves
projecting bidding likely proceed evaluating play one variety
possible final contracts. expert gets judgment Monte Carlo-like simulation
results possible bids, often referred bridge-playing community Borel
simulation (so named first player describe method). Gib takes similar
tack.
Algorithm 4.0.2 (Borel simulation) select bid candidate set B, given
database Z suggests bids various situations:
1. Construct set deals consistent bidding thus far.
2. bid b B deal D, use database Z project auction
continue bid b made. (If bid suggested database, player
question assumed pass.) Compute double dummy result eventual
contract, denoting s(b, d).
3. Return b

P

s(b, d)

maximal.

Monte Carlo approach card play, approach take account
fact bridge played double dummy. Human experts often choose make
bids convey much information opponents order make defenders
task difficult possible. consideration missing algorithm.12
10. 1994 Rosenblum Cup World Team Championship team included Martel
Rosenberg.
11. Frank suggests (Frank, 1998) existing machine approach capable reaching expert levels
performance. appears true early 1980s (Lindelof, 1983), modern expert
bidding practice begun highlight disruptive aspect bidding, machine performance
longer likely competitive.
12. theory least, issue could addressed using single-dummy ideas present
subsequent sections. Computational considerations currently make impractical, however.

324

fiGIB: Imperfect information computationally challenging game

serious problems also, generally centering around development
bidding database Z.
First, database needs built debugged. large number rules need
written, typically specialized language dependent upon bridge expertise
author. rules need debugged actual play reveals oversights
difficulties.
nature sizes databases vary enormously, although represent
substantial investments part authors. database distributed
meadowlark bridge includes 7300 rules; q-plus bridge 2500 rules
comprising 40,000 lines specialized code. Gibs database built using derivative
Meadowlark language, includes 3000 rules.
databases doubtless contain errors one sort another; one nice
things bidding methods tend fairly robust problems. Unfortunately, Borel algorithm described introduces substantial instability
gibs overall bidding.
understand this, suppose database Z somewhat conservative actions.
projection step 2 Algorithm 4.0.2 leads player assume partner bids
conservatively, therefore bid somewhat aggressively compensate. partnership
whole ends compensating.
Worse still, suppose omission kind Z; perhaps every time
someone bids 7, database suggests foolish action. Since 7 rare bid, bidding system matches bids directly database encounter problem
infrequently.
Gib, however, much aggressive, bidding 7 often grounds
cause opponents make mistake. practice, course, bug
database unlikely replicated opponents minds, gibs attempts exploit
gap unrewarded worse.
serious problem, appears apply attempt heuristically model
adversarys behavior: difficult distinguish good choice successful
opponent winning options bad choice appears successful
heuristic fails identify options.
variety ways problem might addressed, none
perfect. obvious simply use gibs aggressive tendencies identify bugs
gaps bidding database, fix them. size database,
slow process.
Another approach try identify bugs database automatically,
wary situations. bidding simulation indicates opponents
achieve result much worse might achieve saw others cards,
evidence may gap database. Unfortunately, also evidence
gib simply effectively disrupting opponents efforts bid accurately.
Finally, restrictions could placed gib require make bids close
bids suggested database, grounds bids likely
reflect improvements judgment highlight gaps database.
techniques used, useful. Gibs bidding substantially
better earlier programs, yet expert caliber.
325

fiGinsberg

bidding tested part 1998 Baron Barclay/OKBridge World Computer
Bridge Championships, 2000 Orbis World Computer Bridge Championship.
program bid deals previously bid played experts; result 0
particular deal meant program bid contract good average expert
result. positive result better, negative result worse.
20 deals contest; although card play issue, deals
selected pose challenges bidding standard deviation 5.5 imps/deal still
reasonable estimate. One standard deviation 20 deal set could thus expected
25 imps.
Gibs final score 1998 bidding contest +2 imps; 2000 contest +9
imps. cases, narrowly edged expert field compared.13
next best program 1998, Blue Chip Bridge, finished score -35 imps,
dissimilar -37 imps sufficient win bidding contest 1997.
second place program 2000 (once Blue Chip Bridge) score -2 imps.

5. value information
previous sections paper, described Monte Carlo methods dealing
fact bridge game imperfect information, also described possible
problems approach. turn ways overcomes difficulties.
moment, let assume replace bridge {0, 1} game,
interested question whether declarer makes contract. Overtricks
extra undertricks irrelevant. least first approximation, bridge experts often look
hands way, subsequently refining analysis.
ask expert took particular line deal, often say
something like, playing opponent three hearts, playing
West hold spade queen. reporting set distributions
unseen cards expecting make hand.
level, expert treating value game zero one (which
would could see unseen cards), function set possible
distributions unseen cards {0, 1}. denote set distributions S,
value game thus function
f : {0, 1}
follow standard mathematical notation denote set {0, 1} 2 denote
set functions f : 2 2S .
possible extend max min set {0, 1} 2S pointwise fashion,
that, example
min(f, g)(s) = min(f (s), g(s))
(7)
functions f, g 2S specific situation S. maximizing function defined
similarly.
13. spite earlier remark GIBs bidding expert caliber. GIB fortunate
bidding contests problems involved situations handled database.
faced situation understand, GIBs bidding deteriorates drastically.

326

fiGIB: Imperfect information computationally challenging game

example, suppose particular situation, one line play f
wins West Q. another line play g wins East exactly
three hearts. min(f, g) line play wins case West Q
East three hearts, max(f, g) line play wins either condition
obtains.
important realize set 2S totally ordered max min
functions, like unit interval is. Instead, 2S instance mathematical structure
known lattice (Gratzer, 1978, Section 6). point, note
extend Definition 2.2.1 set maximization minimization operators:
Definition 5.0.3 game octuple (G, V, pI , s, ev, f+ , f ) that:
1. G finite set possible positions game.
2. V set values game.
3. pI G initial position game.
4. : G 2G gives successors given position.
5. ev : G {max, min} V gives value terminal positions indicates
player move nonterminal positions.
6. f+ : P(V ) V f : P(V ) V combination functions maximizer
minimizer respectively.
structures G, V , pI , ev required satisfy following conditions (unchanged
Definition 2.2.1):
1. sequence positions p0 , . . . , pn n > 0, pi s(pi1 )
pn = p0 . words, loops return identical position.
2. ev(p) V s(p) = .
definition extends Definition 2.2.1 value set combination
functions generalized. such, Definition 5.0.3 includes conventional
games values numeric combination functions max/min,
general setting values functional combination functions
combine described above.
usual, use maximization minimization functions assign value
root tree:
Definition 5.0.4 Given game (G, V, pI , s, ev, f+ , f ), introduce function evc : G
V defined recursively

ev(p),

evc (p) =

f {evc
+

(p0 )|p0

s(p)},
f {evc (p0 )|p0 s(p)},

ev(p) V ;
ev(p) = max;
ev(p) = min.

value (G, V, pI , s, ev, f+ , f ) defined evc (pI ).
327

fiGinsberg

definition well founded game loops, straightforward
extend minimax algorithm 2.2.3 general formalism. discuss
extensions - pruning next section.
flesh previous informal description, need instantiate Definition 5.0.3.
value particular node correspond set positions
maximizer win:
1. set G positions set pairs (p, Z) p position two
four bridge hands visible (i.e., position single dummy game), Z
subset (the set situations) consistent p
cards played reach p initial position.
2. value set V 2S .
3. initial position pI (p0 , S), p0 initial single-dummy position.
4. successor function described follows:
(a) declarer/maximizer play given position, successors
obtained enumerating maximizers legal plays leaving set Z
situations unchanged.
(b) minimizer play given position, successors obtained
playing card c legal element Z restricting Z
subset c fact legal play.
5. Terminal nodes nodes cards played, therefore correspond
single situations s, since locations cards revealed.
terminal position, declarer made contract, value (the entire set
positions possible root). declarer failed make contract,
value {s}.
6. maximization minimization functions computed pointwise,
f+ (U, V ) = U V

f (U, V ) = U V
Given initial single-dummy situation p corresponding set situations,
call game (p, S) game.
Proposition 5.0.5 Suppose set situations maximizer make
contract S. value (p, S) game .
natural view element 2S ; function mapping points 1
points outside 0.
Proof. proof proceeds induction depth game tree. root node
p also terminal, = {s} value clearly set correctly (to )
definition (p, S) game.
328

fiGIB: Imperfect information computationally challenging game

p nonterminal, suppose first maximizing node. let
particular situation. maximizer win s, successor (p0 , 0 )
(p, S) maximizer wins, hence inductive hypothesis, value
(p0 , 0 ) set U U . since maximizer moves p, value assigned
(p, S) superset value assigned subnode, evc (p, S) = .
If, hand, maximizer cannot win s, cannot win child
s. (pi , Si ) successors (p, S) game tree, inductive
hypothesis, must 6 evc (pi , Si ) i.
evc (p, S) = evc (pi , Si )
6 evc (p, S) = .
minimizing case, suppose maximizer wins s. maximizer
must win every successor s, evc (pi , Si ) successor therefore
evc (p, S). Alternatively, minimizer wins s, must legal winning option
6 evc (pi , Si ) therefore 6 evc (p, S).
Unfortunately, Proposition 5.0.5 sense exactly wanted prove:
says modified game computes set situations possible
maximizer make contract perfect information opponents cards,
set situations possible make contract given actual
state incomplete information.
go deal this, however, let look example detail.
example use similar Section 3 involves situation
maximizer make contract either West Q East three hearts.
denote set situations West Q, set East
three hearts. possible tie defer guess example Section 3 well,
also. game tree game question:

min q







q
Aq


1

0

q max
P
@PPP
PP
@
P
@ max PPP
@q
Pq min
min q














Aq min q
Aq min q
Aq
q
C
C
0
1
1
1


C C
C
C
q Cq
q Cq





1

0

0

1

root node, maximizer four choices. makes move left
(playing S, turns out), minimizer moves situation maximizer
wins holds loses holds. second move, maximizer essentially
playing , reverse true.
third case, maximizer defers guess. suppose play
immediately, forced commit playing playing . last case,
wins independent whether obtains.
329

fiGinsberg

Monte Carlo setting, tree actually split based element
sample question. cases, true examine subtree:
q max
P
PP

@
PP


@
PP


PP

@
PPq min
@q max
min q
min q














Aq min q
q
q
min q


1
0
1




q
q

1

0

maximizer win making move second. cases
obtains, examine:
q max
P
PP

@
PP


@
PP


PP

@
PPq min
@q max
q
min
min q













Aq
Aq min q
Aq min
Aq
C
C
0
1
1
CT
CT
C
C
Cq
Cq

0

1

Here, maximizer win making move first. cases,
last two moves win maximizer, since approach cannot recognize fact
third move simply defers guess fourth wins outright.
let us return situation include information sets
possible play for. tree again:
q max
P
@PPP
PP

@
PP


@
PP
@q max
Pq min
min q
min q


















Aq
Aq min q
Aq min q
Aq
q
q
C
C
1
0
0
1
1
1


C C
C
C
q Cq
q Cq



1

0

0

1

first thing need realize terminal nodes
labelled 1s 0s instead sets maximizer win. produces:
330

fiGIB: Imperfect information computationally challenging game

q max
P
@PPP
PP

@
PP


@
PP
q
@q max
Pq min
min
min q


















q
Aq
q
Aq min q
Aq min q
Aq
ST


ST
ST
ST
C
C


C C
C
C
q Cq
q Cq



ST





ST

understand labels, consider two leftmost fringe nodes. leftmost node gets
labelled free eliminated fact minimizer chose S.
Since maximizer wins S, maximizer wins cases.
second fringe node, included virtue minimizers moving ;
included minimizer actually wins line. Hence label
node question. analysis assumes disjoint; overlap,
labels become slightly complex overall analysis little changed.
Backing values one step gives us:
q max
P
PP

@

PP

@
PP



@ max PPP


q
q
@q
Pq

















q
Aq
q
Aq
q
Aq
q
Aq
ST


ST
ST
ST
C
C
C
C
C
C
q Cq
q Cq
ST





ST

minimizer, playing perfect information, always best can. first
interior nodes label S, example, means maximizer wins actually
case.
course, definitions thus far imply maximizer playing perfect
information well, back rest tree get:
qS
P
PP

@
PP


PP
@


PP

@
PPq

q
@q
q

















Aq
Aq
Aq
Aq
q
q
q
q
ST


ST
ST
ST
C
C
C
C
C
C
q Cq
q Cq
ST

331





ST

fiGinsberg

0.1

declare
defend

0.01

P(err) 0.001

0.0001

1e-05

0

2

4

6
trick

8

10

12

Figure 6: Defense vs. declarer play humans
before, maximizer wins either last two options.
address fact players fact perfect information,
let point bridge analyses, imperfect information assumed
issue maximizer only. defenders assumed operating complete
information least following reasons:
1. general, premium declaring opposed defending,
sides want declare. Typically, pair greater assets terms high cards
wins bidding battle succeeds becoming declaring side,
overall assets available defenders terms high cards generally less
available declarer. means defenders generally able
predict others hands accuracy declarer can.
2. defenders signal, conveying one another information cards
hold. (As example, play unnecessarily high card often indicates even
number cards suit played.) generally assumed signal
information useful declarer, improving
collective ability play perfect information.
3. first two three tricks, defenders play typically closer double dummy
declarers. shown Figure 6, contrasts quality human
play defender quality human play declarer; make mistakes
declaring defending trick four. (This figure analogous Figures 4
5.)
332

fiGIB: Imperfect information computationally challenging game

deals important declarer exploit uncertainty part
defenders, definitely exception opposed rule.
suggests Proposition 5.0.5 reasonable job modeling defenders
cardplay, combination function maximizer needs modified reflect
imperfect-information nature task.
understand this, let us return putative expert, suggested beginning
section might playing West hold spade queen. might
say bit detail is, could play opponent hold exactly three hearts,
could play West hold spade queen. latter better chance.
suggests value assigned position maximizer single
set situations (those make contract), set sets situations.
set corresponds one set situations maximizer could play for, given
incomplete knowledge positions opposing cards.
Extending notation used earlier section, denote set sets


situations 22 . maximizers combination function 22 given
max(F, G) = F G

(8)

F G sets sets situations. says maximizer
play situation p, one move allow select set F
things play another move allow select set G,
choice p select element F G.
minimizers function bit subtle. Suppose node p, minimizer
move successor value F = {Fi }, successor value G = {Gi }.
value assign p?
Since minimizer perfect information, always guarantee maximizer
achieves minimum value actual situation. Whatever element Fi F Gj G
eventually selected maximizer, eventual value p minimum Fi
Gj . words
min({Fi }, {Gj }) = {min(Fi , Gj )}
(9)
individual minima computed using perfect information rule (7).
Definition 5.0.6 Let G set positions imperfect information game, set
pairs (p, Z) p position point view maximizing player Z
set perfect information positions consistent p. imperfect information game
G game (G, V, pI , s, ev, f+ , f ) where:


1. value set V 22 .
2. initial position pI (p0 , S), p0 initial imperfect information position
set perfect information positions consistent it.
3. successor function described follows:
(a) maximizer play given position, successors obtained
enumerating maximizers legal plays leaving elements set Z
situations unchanged.
333

fiGinsberg

(b) minimizer play given position, successors obtained
making playing card c legal element X restricting
Z situations c fact legal play.
4. Terminal nodes nodes cards played, therefore correspond
single situations s. terminal position, declarer made contract,
value ({s}, {S}). declarer failed make contract, value
({s}, {S {s}}).
5. maximization minimization functions given (8) (9) respectively.
Theorem 5.0.7 Suppose value imperfect information game G .
set positions subset element maximizer
strategy wins every element , assuming minimizer plays perfect
information.
Proof. again, proof proceeds induction depth game tree.
again, case p terminal position handled easily definition.
inductive case, consider maximizer minimizer separately.
maximizer, suppose set situations satisfies
conditions theorem, maximizer strategy caters
elements . first move strategy single move position
pi successor p caters elements . Thus value
successful child F, subset F F inductive hypothesis. Thus
value original game G, subset element G virtue (8).
Alternatively, set maximizer strategy, clearly
maximizer cannot strategy making moves successor positions
pi . means superset U evc (pi ), thus superset evc (p)
either.
minimizing case really harder. Suppose first maximizer
strategy succeeding every situation . minimizer (playing perfect
information) must move position pi value Fi subset
element Fi . Fi = {Ti }, recall
min({Ti }, {Ui }) = {Ti Uj },
6 Ti i. Thus 6 Ti Uj j, V
V min({Ti }, {Ui })
last case, suppose maximizer strategy succeeding
every situation . means move minimizer, maximizer
still strategy succeeds , pi successors p evc (pi ) = Ti ,
Ti Ti Ti . Ti min(Ti ) = evc (p). Thus evc (p)
contains element superset .
Using result, theory compute exactly set things might play
given single-dummy bridge problem. turn issues involved
practice, however, let repeat example section using imperfect information
technique. game tree values assigned terminal nodes:
334

fiGIB: Imperfect information computationally challenging game

q max
P
@PPP
PP

@
PP


@
PP
q
@q max
Pq min
min
min q


















q
Aq
q
Aq min q
Aq min q
Aq
{S }
{S}
{T }
{S }
{S } {S }
C
C


C C
C
C
q Cq
q Cq



{S }

{S} {T }

{S }

Backing past minimizers final move gives us:
q max
P
PP

@
PP


@
PP



@ max PPP {S }
{S} q
{T } q
@q
Pq














{T }

{S}
Aq
Aq
Aq
Aq
q
q
q
q
{S }
{S}
{T }
{S }
{S } {S }
C
C
C
C
C
C
q Cq
q Cq
{S }

{S} {T }

{S }

complete analysis finally get:
q {S, T, }
P
@PPP
PP
@

PP


@
PP {S }
{S}
{T } q
q
@q {S, }
Pq













{T }


{S}
q
q
Aq
q
Aq
Aq
q
Aq
{S }
{S}
{T }
{S }
{S } {S }
C
C
C
C
C
C
q Cq
q Cq



{S }

{S} {T }

{S }

Note difference values assigned maximizers third fourth choices
first ply. third choice value {S, }, indicating clearly maximizer
need subsequently decide whether play . fourth choice value
{S } indicating possibilities catered to.
value assigned root contains redundancy (which deal
Section 7), one maximizers choices (ST ) dominates others. Nevertheless,
value clearly indicates maximizer option available root caters
situations.
335

fiGinsberg

C
C

C

C

C
Cq min

AQQ

QQ


Q
Aq
Qq
q

q

m1

m2

m3

m4

C
Cq min




Sq min
q
m2




q
q Aq

m1

m3

m4

Figure 7: Equivalent games?

6. Extending alpha-beta pruning lattices
results previous section allow us deal imperfect information theory.
Unfortunately, computing value theory hardly computing practice.
ideas, transposition tables partition search, fairly obviously applied
games values taken sets general total orders. -
pruning, linchpin high-performance adversary search algorithms? answer
far subtle.
6.1 necessary definitions
Let us begin considering two small game trees Figure 7, minimizer
play nonfringe nodes none mi intended necessarily terminal.
two games always equivalent?
would argue are. game left, minimizer needs select
among four options m1 , m2 , m3 , m4 . game right, needs first select
whether play m2 ; decides to, must select among remaining
options. Since minimizer possibilities cases, assume
values assigned games same.
formal point view, value game left f (m1 , m2 , m3 , m4 ),
game right f (m2 , f (m1 , m3 , m4 )) abused notation somewhat, writing mi value node mi well.
Definition 6.1.1 game called simple x v V ,
f+ {x} = f {x} = x
also
f+ (v) = f+ {x, f+ (v x)}

f (v) = f {x, f (v x)}

336

fiGIB: Imperfect information computationally challenging game

augmented condition developed discussion Figure 7
assumption players move position p forced (so p unique successor),
value forced move same.
Proposition 6.1.2 simple game, binary functions V
commutative, associative idempotent 14
f+ {v0 , . . . , vm } = v0 vm

f {v0 , . . . , vm } = v0 vm
Proof. Induction m.
referring simple game, typically replace functions f+ f
equivalent binary functions . assume throughout rest section
games simple.15
binary functions induce partial order , say x
x = y. hard see partial order reflexive (x x),
antisymmetric (x x x = y) transitive. operators
behave like greatest lower bound least upper bound operators regard
partial order.
also following:
Proposition 6.1.3 Whenever , f+ (S) f+ (T ) f (S) f (T ).
words, assuming minimizer trying reach low value partial
order maximizer trying reach high one, options always good.
6.2 Shallow pruning
able investigate - pruning general framework. Let us begin
shallow pruning, shown Figure 8.
idea minimizer prefers x y, never allow maximizer
even possibility selecting value subtree rooted .
all, value maximizing node figure evc (T ) x, minimizer
therefore always prefer x.
order usual correctness proof (shallow) - pruning hold, need
following condition satisfied:
Definition 6.2.1 (Shallow - pruning) game G said allow shallow - pruning minimizer
x (y ) = x
(10)
14. binary function f called idempotent f (a, a) = a.
15. also assume games sufficiently complex find game tree node
desired functional value, e.g., (b c) specific a, b c. case, none
results would follow. example, game initial position also terminal surely admits
pruning kinds (since game tree empty) need satisfy conclusions results
section.

337

fiGinsberg

C

C

C
Cq min



max
Sq
q

x




Aq
q





Figure 8: pruned (shallowly) x
x, y, V x y. game said allow shallow - pruning
maximizer
x (y ) = x
(11)
x, y, V x y. say G allows shallow pruning allows shallow
- pruning players.
definition basically says backed value root game tree
unchanged pruning maximizing subtree figure.
see shortly, expressions (10) (11) describing shallow pruning
identical typically known absorption identities.
Definition 6.2.2 Suppose V set two binary operators V .
triple (V, , ) called lattice idempotent, commutative associative,
satisfy absorption identities x, V ,
x (x y) = x

(12)

x (x y) = x

(13)

also following:
Definition 6.2.3 lattice (V, , ) called distributive distribute respect
one another,
x (y z) = (x y) (x z)

(14)

x (y z) = (x y) (x z)

(15)

Lemma 6.2.4 (12) (13) implies other. (14) (15) implies
other.
Proof. well known results lattice theory (Gratzer, 1978).
Proposition 6.2.5 (Ginsberg & Jaffray, 2001) game G, following conditions
equivalent:
338

fiGIB: Imperfect information computationally challenging game

C

C

C
Cr min
r max

r min

SSr max
r


x




Ar
r





Figure 9: pruned (deeply) x
1. G allows shallow - pruning minimizer.
2. G allows shallow - pruning maximizer.
3. G allows shallow pruning.
4. (V, , ) lattice.
Proof.16 show first fourth conditions equivalent; everything else follows
easily.
G allows shallow - pruning minimizer, take x = = = b
(10). Clearly x get
(y y) = = (a b) =
(13).
converse, x y, x = x
x (y ) = (x y) (y )
= x (y (y ))
= xy
= x.
6.3 Deep pruning
Deep pruning bit subtle. example appears Figure 9.
before, assume x y. argument described previously: Given
minimizer guaranteed value x upper minimizing node, way
choice allowing maximizer reach main line; were,
maximizer could get value least y.
16. proofs Proposition 6.3.2 due Alan Jaffray.

339

fiGinsberg



r max
@
@ r min
@
@ r max

@
@
@r min

@
@r



0

Figure 10: deep pruning counterexample
Definition 6.3.1 (Deep - pruning) game G said allow - pruning
minimizer x, y, T, z1 , . . . , z2i V x y,
x (z1 (z2 (z2i (y ))) ) =
x (z1 (z2 z2i ) ).
game said allow - pruning maximizer
x (z1 (z2 (z2i (y ))) ) =
x (z1 (z2 z2i ) ).
say G allows pruning allows - pruning players.
before, prune allows us remove dominated node (y Figure 9)
siblings.
fact game allows shallow - pruning mean allows pruning
general, shown following counterexample. example involves game
one card known players; suit card matters. game tree
appears Figure 10.
tree, node labelled suit symbol terminal means maximizer
wins suit card matches given symbol. root given
tree, maximizer (whose turn play) choose turn card, winning
club, defer minimizer. minimizer choose turn
card (losing case diamond suit symbols refer maximizers
result), hand situation back maximizer. maximizer defers yet again,
minimizer either turn card, losing club, simply declare victory
(presumably choice).
one wrinkle game. point game, maximizer
change card either diamond spade club.
lets consider game itself. ply 4, minimizer obviously choose win
game. Thus ply 3, maximizer need choose , winning case
card heart. means ply 2, minimizer win game, since
card diamond move left (and win once) card
heart win moving right. (Remember minimizer knows suit
340

fiGIB: Imperfect information computationally challenging game

card.) upshot maximizer wins overall game
card question club. formal analysis proceeds similarly, labelling nodes
follows:
r = 0
@

@r0 =
@
@ r = 0
@
@
@r 0 = 0

@
@r






0

Note, incidentally, maximizers ability change card help win
game.
suppose apply deep pruning game. ply four node one
minimizer force value , suggesting siblings bottom
node pruned. produces following tree:
r
@

@r = 1
@
@ r1 =
@
@
@r

@
@r pruned?






maximizer reaches ply 3, win changing card club need be.
course, minimizer wont let maximizer reach ply 3; ply 2, hell move left
maximizer wins card diamond. means maximizer
wins root case card either club diamond.
partial graph values game follows:
r
1




r
r
r
r


Q




Q

Q
Q
Q
Q

r


0
included crucial fact x = 0 x 6= (since minimizer knows
card) = 1 maximizer invoke special rule. least
upper bounds shown diagram. maximizing function moves
figure; minimizing function moves down.
deep prune fails cant push value 0 past get
near root. Somewhat precisely, problem
= ( 0) 6= ( ) ( 0) = 0
suggests following:
341

fiGinsberg

Proposition 6.3.2 (Ginsberg & Jaffray, 2001) game G, following conditions
equivalent:
1. G allows - pruning minimizer.
2. G allows - pruning maximizer.
3. G allows pruning.
4. (V, , ) distributive lattice.
Proof. before, show first fourth conditions equivalent. Since
pruning implies shallow pruning (take = 0 definition), follows first
condition implies (V, , ) lattice.
deep pruning minimizer = 1, x y,
z 1 , z2 , ,
x (z1 (z2 (y ))) = x (z1 z2 )
take = = x get
x (z1 (z2 x)) = x (z1 z2 )

(16)

follows top level term left hand side (16) greater equal
right hand side; specifically
z1 (z2 x) x (z1 z2 ).

(17)

claim implies lattice question distributive.
see this, let u, v, w V . take z1 = u w, z2 = v x = w (17) get
(u w) (v w) w ((u w) v)

(18)

v (u w) w (v u) instance (17), combining (18) gives us
(u w) (v w) w ((u w) v)
w w (v u)
= w (v u)
hard direction; w (v u) (u w) (v w) lattice
w (v u) u w w (v u) v w individually. Thus w (v u) = (u w) (v w),
deep pruning implies lattice distributive.
converse, lattice distributive x y,
x (z1 (z2 (y ))) = (x z1 ) (x z2 (y ))
= (x z1 ) (x z2 )
= x (z1 z2 )
second equality consequence fact x (yT ), x = x(yT ).
validates pruning = 1; deeper cases similar.
Finally, note games result applies, continue use Algorithms
2.2.5 2.3.3 without modification, since prunes endorse continue sound
game tree expanded.
342

fiGIB: Imperfect information computationally challenging game

6.4 Application imperfect information
order apply ideas games imperfect information treated Section 5,
need show value set introduced (hopefully distributive) lattice.

this, recall redundant information arbitrary element F 22 ,
since F contains U U (in words, maximizer play
either U U properly better), set removed F without
affecting maximizers options interesting way. suggests following:


Definition 6.4.1 Let F 22 arbitrary set S. say F reduced
T, U F U . say F1 reduction F2 F1 reduced
F1 F2 .


Lemma 6.4.2 Every F 22 unique reduction.
Proof. immediate; remove subsumed elements F.
.
denote reduction F r(F).
Armed definition, modify Definition 5.0.6 obvious way,
replacing value set V set reduced elements V maximizing
minimizing functions (8) (9) reduced versions thereof,
max(F, G) = r(F G)

(19)

min({Fi }, {Gj }) = r({Fi Gj })

(20)


Remember typically write max min.
Proposition 6.4.3 Given definitions, (V, , ) distributive lattice.
Proof. need show max min defined commutative, associative,
idempotent, distribute respect one another, absorption
identity (12) satisfied. Since reduction operator clearly commutes initial
definitions max min, commutativity, associativity distributivity obvious,
fact idempotent. see idempotent,
F F = r({min(Fi , Fj )}) = r({Fi Fj })
element set righthand side subset Fi Fi
F F = r({Fi }) = r(F) = F.
absorption identity, need show
F (F G) = F

F G = r{Fi Gj }
343

fiGinsberg


F (F G) = r(F r{Fi Gj })
= r({Fi } {Fi Gj })
= r({Fi })
= r(F)
= F
since, again, element F G subsumed corresponding Fi .
follows implementation designed compute value imperfect information game described Theorem 5.0.7 indeed use - pruning speed
computation.
6.5 Bridge implementation
Given body theory, implemented single-dummy version gibs double-dummy
search engine. surprisingly, difficult element implementation buildS
ing efficient data structures manipulation elements 22 .
handle this, represented element conjunction. first identified
one two hidden hands H, card c, would write c c held
H c c held H. element 2S taken disjunctive

combination conjunctions, element 22 taken list
disjunctions. advantage representation logical inference could used
construct reduction list.
order make inference efficient possible, disjunctions
represented binary decision diagrams, bdds (Lind-Nielsen, 2000). variety
public domain implementations bdds available, used one provided LindNielsen (Lind-Nielsen, 2000).17
resulting implementation solves small endings (perhaps 16 cards left total) quickly
larger endings, running times come dominated bdd computations;
hardly surprising, since size individual bdds exponential size
(the number possible distributions unseen cards). found
generally able solve 32-card endings minute, running times
increasing two orders magnitude additional card added.
good news bad news. Viewed positively, performance system
constructed far superior performance preceding attempts deal
imperfect information arising bridge. Frank et.al, example, capable solving
single suit combinations (13 cards left, give take) using algorithm appears take
several minutes run (Frank, Basin, & Matsubara, 1998). subsequently improve
performance average time 0.6 seconds (Frank et al., 2000), still restricted
problems small much use program intended play complete
game.
17. tried variety non-bdd based implementations well. bdd-based implementation far
faster others.

344

fiGIB: Imperfect information computationally challenging game

Thats good news. bad news program capable solving 8card ending minute inappropriate production use. Gib production program,
expected play bridge human speeds. Another approach therefore needed.

7. Solving single-dummy problems practice
7.1 Achievable sets
key practical application ideas previous section realization
comes time make play, single element F must selected: play
West Q player three hearts cannot cater
possibilities simultaneously, eventually actually make choice.
Definition 7.1.1 Suppose value imperfect information game G F.
Given specific S, say achievable F F
F.
words, set situations achievable maximizer plan wins
elements A.
Definition 7.1.2 Given set situations, payoff function function
f : 2S IR f (U ) f (T ) whenever U .
payoff function evaluates potential achievable sets.
Definition 7.1.3 Let G game associated set situations. f payoff
function S, solution G f achievable set f (A) maximal.
practice, need find actual value game; finding solution G
appropriate payoff function suffices. bridge, payoff function presumably
probability cards dealt set A; function clearly increases
increasing set size required Definition 7.1.2 evaluated practice using
Monte Carlo sample Section 3.
Instead finding solution imperfect information game, suppose instead
Monte Carlo sample game consisting set situations = {si }
ordered = 0, . . . , n. produce achievable set follows:
Algorithm 7.1.4 construct maximal achievable set sequence hs0 , . . . , sn
situations:
1. Set = .
2. = 0, . . . , n, {si } achievable, set = {si }.
algorithm constructs achievable set greedy fashion, gradually adding elements
added.
Definition 7.1.5 Given game G sequence situations, achievable set induced G set constructed Algorithm 7.1.4.
345

fiGinsberg

computational point view, expensive step algorithm determining
whether set {si } achievable. relatively straightforward, however,
since focus specific set effectively replaces game G new game
values {0, 1}. particular node n, expanding n demonstrates {si }
achievable, value game zero. expanding n indicates {si }
achievable n reached, value node n one. Although search space
unchanged original imperfect information game Definition 5.0.6,
longer need manipulate complex values, check achievability
therefore tractable practice.
Let illustrate returning usual example Section 5. fully
evaluated tree again:
q {S }
P
@PPP
PP
@
PP


@
PP {S }
{S} q
{T } q
@q {S, }
Pq














{T }

{S}
q
Aq
q
Aq
q
Aq
q
Aq
{S }
{S}
{T }
{S }
{S } {S }
C
C
C
C
C
C
q Cq
q Cq




{S }

{S} {T }

{S }

Note replaced value root reduction.
suppose view set positions containing two elements,
. Presumably West holds Q s, East holds three hearts t.
ordering chosen hs, ti, first try achieve {s}. context, node n win
maximizer either maximizer indeed win n longer possible (in
case maximizers ability achieve {s} undiminished). game tree becomes:
q max
P
PP

@
PP


@
PP



@ max PPP

q
@q
Pq min
min
min q


















q
Aq
q
Aq min q
Aq min q
Aq
1
1
0
1
1
1
C
C


C C
C
C
q Cq
q Cq
1

1

0

1

branches wins maximizer (who concerned only),
branches wins case maximizer indeed win (as guesses
right either first two plies). Backing values gives us:
346

fiGIB: Imperfect information computationally challenging game

q1
P
PP

@
PP


@
PP


PP

@

PPq 1
1
0q
q
@q 1


















0 q
q
Aq
q
Aq
Aq 1
q
Aq
1
1
0
1
1
1
C
C


C C
C
C
q Cq
q Cq
1

1

0

1

indicates (correctly) maximizer achieve provided doesnt decide
play root tree. Note analysis straight minimax, allowing

fast algorithms applied avoiding manipulation elements 22 described
previous section.
add achievable set, thus becomes {s, t}. maximizer wins
really win (and isnt interested more),
basic tree becomes:
q max
P
PP

@

PP

@
PP



@ max PPP

q
@q
Pq min
min
min q


















Aq min q
Aq min q
Aq
q
Aq
q
1
0
0
1
1
1
C
C


C C
C
C
q Cq
q Cq
1

0

0

1

Backing values gives:
q1
P
PP

@

PP

@
PP


PP

@

PPq 1
0 q
0q
@q 0


















0 q
q
Aq
q
Aq
Aq 0
q
Aq
1
0
0
1
1
1
C
C


C C
C
C
q Cq
q Cq
1

0

0

1

maximizer achieve extended result making rightmost move,
desired.
rightmost branch exist, maximizer unable
combine chances? value root node tree 0, {s, t}
achievable. maximal achievable set returned algorithm would S;
347

fiGinsberg

ordering ht, si instead, alternative maximal achievable set would
returned instead.
event, have:
Proposition 7.1.6 Given game G sequence situations, let achievable
set induced G. proper superset achievable.
Proof. straightforward. element A, know U {s}
achievable U A. Thus {s} achievable well.
Algorithm 7.1.4 allows us construct maximal achievable sets relative Monte
Carlo sample; recall taking sequence situations ordering
sample itself. practice, however, important focus sharply
sample itself, lest eventual achievable set constructed overfit irrelevant probabilistic
characteristics sample. accomplished replacing simple union
step 2 algorithm complicated operation captures idea
situations either like si like already A. bridge, example, might
situations West two three hearts, si might new situation
West four hearts. generalized union would situations West
two, three four hearts. general set achievable, another attempt could
made simple union. denote general union , Algorithm 7.1.4
becomes:
Algorithm 7.1.7 construct achievable set sequence hs0 , . . . , sn situations:
1. Set = .
2. = 0, . . . , n:
(a) {si } achievable, set = {si }.
(b) Otherwise, {si } achievable, set = {si }.
algorithm used practice find achievable sets either maximal
effectively set possible instances, appearing Monte
Carlo sample.
7.2 Maximizing payoff
remains find maximal achievable sets, ones approximate solution
game question given particular payoff function.
understand this, let draw analogy problem trying
solve resource-constrained project scheduling (rcps). rcps, one list tasks
performed, together ordering constraints saying certain tasks need
performed others. addition, task uses certain quantity various resources;
limitations availability particular resource particular time.
example, building aircraft wing may involve fabricating top bottom flight
surfaces, building aileron, attaching two. clear aileron
348

fiGIB: Imperfect information computationally challenging game

cannot attached wing constructed. Building section
may involve use three sheetmetal workers, five may available general.
goal rcps problem typically minimize length schedule (often
called makespan) without exceeding resource limits. building wing,
efficient (and cost effective) build quickly slowly.
Many production scheduling systems try minimize makespan building schedule
initial time forward. point, select task whose predecessors
scheduled, schedule task early possible given previously
scheduled tasks resource constraints. Scheduling tasks way produces
locally optimal schedule may improved modifying order tasks
selected scheduling.
One method finding appropriate modification selection order known
squeaky wheel optimization, swo (Joslin & Clements, 1999). swo, locally optimal
schedule examined determine tasks scheduled suboptimally relative
overall metric; tasks deemed squeak advanced task
list scheduled earlier schedule reconstructed. process
repeated, producing variety candidate solutions scheduling problem hand; one
schedules typically optimal nearly so.
Applying swo game-playing problem relatively straightforward.18
use Algorithm 7.1.7 construct achievable set, also construct byproduct list
sample elements achievable set cannot extended; moving elements
list forward sequence hs0 , . . . , sn cause likely included
achievable set algorithm reinvoked. weights assigned failing
sequence elements constructed determining representative particular
element remainder sample.
Returning example, suppose set (where West Q) single
representative s1 Monte Carlo sample (presumably means unlikely West
hold card question), five representatives t1 , t2 , t3 , t4 t5 .
Suppose also initial ordering six elements hs1 , t4 , t2 , t1 , t5 , t3 i.
Assuming maximizer loses rightmost option (so cannot cater
simultaneously), maximal achievable set corresponding ordering S.
examination reveals ti could achieved werent; swo
terms, elements sample squeak.
next iteration, priorities ti increased moving forward
sequence, priority s1 falls. Perhaps new ordering ht4 , t2 , s1 , t1 , t5 , t3 i.
ordering easily seen lead maximal achievable set ; still
unachievable. payoff assigned likely much better assigned
(a probability 0.8 instead 0.2, Monte Carlo sample unweighted).
way swo allows us find globally optimal (or nearly so) achievable set.
18. Squeaky wheel optimization developed University Oregon; patent application
technique allowed U.S. Patent Trademark Office. Universitys interests swo
licensed exclusively Time Systems, Inc. use scheduling related applications,
Write, Inc. use bridge-playing systems.

349

fiGinsberg

7.3 Results
implementation gibs cardplay declarer based ideas described above.
(As defender, direct Monte Carlo approach appears preferable enough information typically available declarers hand make double-dummy assumption
reasonably valid.) implementation fast enough conform time requirements
placed production program (roughly one cpu minute play deal).
Evaluating impact ideas gibs cardplay difficult, since declarer play
already strongest aspect game. extended matches two versions
gib, approach based ideas described beats Monte-Carlo based version
approximately 0.1 imps/deal, great deal noise data
swings correspond differences bidding defensive play. possible remove
differences artificially (requiring bidding identical times
deal played, example), defensive differences remain. Nevertheless, gib currently
strong enough player 0.1 imps/deal difference significant.
situation problem deals, par contests Gitelman
sets, much clearer. addition, many deals gib gets wrong fact deals
gib plays correctly problem composers play incorrectly (Gitelman or,
case par contests, Swiss bridge expert Pietro Bernasconi). following table,
generous parties, deeming line correct clearly
inferior another. Let point designers problems attempting
construct deals unique solution (the answer test posing
solver), deal multiple solutions fact one composer
already misanalyzed.
Source
BM level 1
level 2
level 3
level 4
level 5
1998 par contest
1990 par contest

size
36
36
36
36
36
12
18

BB
16
8
2
1
4
0
0

GibMC
31
23
12
21
13
5
8

GibSWO
36
34
34
31
28
11
14

composer
35
34
34
34
34
12
17

ambiguous
0
1
2
4
5
2
3

rows order increasing difficulty; universally felt among human
competitors deals 1990 par contest far difficult
1998. columns follows:
Source
Size
BB
GibMC
GibSWO
composer
ambiguous

source problems obtained.
number problems available particular source.
gives number problems solved correctly Bridge Baron 6.
gives number solved correctly gib using Monte Carlo approach.
gives number solved correctly gib using swo achievable sets.
gives number solved correctly composer (in intended
solution best one available).
gives number misanalyzed composer (in multiple solutions
exist).
350

fiGIB: Imperfect information computationally challenging game

Note, incidentally, gibs performance still less perfect problems.
reason gibs sample may skewed way, swo may fail find
global optimum among set possible achievable sets.

8. Conclusion
8.1 GIB compared
programs Gib participated 1998 2000 World Computer
Bridge Championships. (There 1999 event.) Play organized machine
playing two hands competitors trusted cheat peeking partners
cards opponents.19
tournament began complete round robin among programs, top
four programs continuing knockout phase. matches round robin quite
short, expected bridges stochastic element would keep program
completely dominant.
may true theory, practice gib dominated round robins,
winning matches 1998 one 2000. round robin results
2000 event follows:20

Gib
WBridge
Micro
Buff
Q-Plus
Blue Chip
Baron
Meadowlark

Gib

6
9
4
13
1
4
3

WB
14

1
7
4
13
2
0

Micro
11
19

2
5
5
7
0

Buff
16
13
18

8
0
15
0

Q-Plus
7
16
15
12

9
6
9

Chip
19
7
15
20
11

9
0

Baron
16
18
13
5
14
11

6

Mlark
17
20
20
20
11
20
14


Total
100
99
91
70
66
59
57
18

match converted first imps victory points, VPs, two
competing programs sharing 20 VPs available match. first entry
table indicates gib beat wbridge 14 VPs 6; fourth gib lost
q-plus bridge 7 VPs 13. (This gibs loss ever another program
tournament play.)
1998 knockout phase, gib beat Bridge Baron semifinals 84 imps 48
deals. programs evenly matched, imp difference could expected
normally distributed, observed 84 imp difference would 2.2 standard deviation
19. Starting 2001 event, computer handle one four players, although
still attempt prevent (networked) computers transmitting illegal information
partners.
20. eight competitors event:
gib (www.gibware.com), Hans Lebers q-plus
(www.q-plus.com), Tomio Yumiko Uchidas micro bridge (www.threeweb.ad.jp/mcbridge),
Mike Whittaker Ian Trackmans blue chip bridge (www.bluechipbridge.co.uk), Rod Ludwigs meadowlark bridge (rrnet.com/meadowlark), bridge baron (www.bridgebaron.com),
two newcomers: Doug Bannions bridge buff (www.bridgebuff.com) Yves Costels wbridge
(ourworld.compuserve.com/homepages/yvescostel).

351

fiGinsberg

event. Gib beat Q-Plus Bridge finals 63 imps 64 deals (a 1.4 standard
deviation event). 2000, beat Bridge Buff 39 imps 48 deals semifinals
(a 1.0 standard deviation event) beat wbridge 101 imps 58 deals (a 2.6
standard deviation event). finals scheduled run 64 deals, wbridge
conceded 58 played.
publicized deal final one, extremely difficult deal
programs played moderately well. Gib reached better contract aided somewhat
wbridges misdefence moderately complex situation.









KQ9
AQJ
96432
86

10 6
10 9 2
10
J 10 9 5 3 2










8732
753
AKQJ85


AJ54
K864
7
KQ74

wbridge played North-South cards gib East-West, North opened
1 eventually played three notrump, committing taking nine tricks. gib East
started four rounds diamonds South discarded two clubs . . . ?
Looking four hands, contract cold; South discard another club East
none play. thus nine tricks: four hearts spades,
diamond nine.
Give East club, however, contract rates less four since
defense able take least four club tricks. WBridge decided play safe,
keeping KQ discarding heart. eight tricks contract
one.
bidding play interesting gib N-S. North opened 1NT,
showing 1114 HCP without four hearts spades unless exactly three cards held
every suit. East overcalled natural 2 South cue bid 3, showing weakness
diamonds asking North bid 4-card heart spade suit one.
North good bid point. Bidding 3NT five small diamonds rates
wrong 4 clearly question. Gibs simulation suggested 3 (ostensibly
showing four them) least evils. South raised 4, East doubled, ending
auction.
East led top diamond, shifted 3, Norths Q. Gib cashed
J led 6, East chose (wrongly) ruff. WBridge led K
East, ruffed J. Gib able cash AK produce:
352

fiGIB: Imperfect information computationally challenging game










Q

962
8




J 10 9 5 3










8
7
QJ85


5
K8

KQ4

Knowing position exactly, gib needed five tricks North lead. ruffed
diamond, returned drew Easts trump Q. club forced
entry South hand, K provided tenth trick.
Humans Gib played 14-deal demonstration match human world champions Zia
Mahmood Michael Rosenberg21 AAAI Hall Champions 1998, losing
total 6.4 imps (a 0.3 standard deviation event). Early versions gib also played
OKBridge, internet bridge club 15,000 members.22 playing thousands
deals human opponents various levels, gibs ranking comparable
OKBridge average.
probable neither results accurate reflection gibs current
strength. Mahmood-Rosenberg match extremely short gib appeared
best luck. OKBridge interface changed gib OKbots longer
function. performance figures thus somewhat outdated, predating various
recent improvements including ideas Sections 57. interesting information
become available starting late July 2001, gib, paired Gitelman
regular partner Brad Moss, begin series 64-deal matches human opponents
varying skill levels.
8.2 Current future work
Recent work gib focused weakest areas: defensive cardplay bidding.
bidding work continues primarily matter extending existing
bidding database, although gibs bidding language also changed Standard
American (a fairly natural system) variant artificial system called Moscito developed Australia.23 Moscito sharply defined meanings, making ideal use
21. Mahmood Rosenberg won, among titles, 1995 Cap Volmac World Top Invitational
Tournament. remarked earlier, Rosenberg would also go GIB match win Par
Competition GIB finished 12th.
22. http://www.okbridge.com
23. Gibs version Moscito called Moscito Byte.

353

fiGinsberg

computer program, action system, working hard make opponents
bidding difficult possible.
regard defensive cardplay, key elements high level defense make
hard partner make mistake making easy declarer so. Providing gib
abilities involve extra level recursion cardplay, element
Monte Carlo sample must considered players points view,
generate analyze samples. ideas implemented
currently lead small performance degradations (approximately 0.05 imps/deal)
computational cost recursive analyses require reducing size Monte
Carlo sample substantially. processor speeds increase, reasonable expect
ideas bear significant fruit.
1997, Martel, computer scientist himself, suggested expected gib
best bridge player world approximately 2003. work appears roughly
schedule.
8.3 games
left essentially untouched question extent basic techniques
discussed could applied games imperfect information bridge.
ideas presented likely applicable games
perfect information variant tractable computationally challenging, assumption ones opponents playing perfect information reasonable one.
suggests games like hearts trick-taking games amenable
techniques, games like poker (where essential realize exploit fact
opponents also imperfect information) likely need approaches.

Acknowledgments
great many people contributed gib project years. technical
community, would like thank Jonathan Schaeffer, Rich Korf, David Etherington, Bart
Massey members cirl. bridge community, received invaluable
assistance Chip Martel, Rod Ludwig, Zia Mahmood, Andrew Robson, Alan Jaffray,
Hans Kuijf, Fred Gitelman, Bob Hamman, Eric Rodwell, Jeff Goldsmith, Thomas Andrews
members rec.games.bridge community. work supported
Write, Inc., DARPA/Rome Labs contracts F30602-95-1-0023 F3060297-1-0294, Boeing Company contract AHQ569. everyone
contributed, whether named not, owe deepest appreciation.

Appendix A. summary rules bridge
give brief summary rules bridge. Readers wanting complete
description referred many excellent texts available (Sheinwold, 1996).
Bridge card game four players, split two pairs. Members single
pair sit opposite one another, North-South form one pair East-West other.
354

fiGIB: Imperfect information computationally challenging game

deck distributed evenly among players, deal involves giving
player hand 13 cards. game proceeds bidding playing phase.
playing phase consists 13 tricks, player contributing one card
trick clockwise fashion. player plays first trick said lead
trick. highest card suit led wins trick (Ace high deuce low), unless
trump played, case highest trump wins trick. person leads
trick free lead card wishes; subsequent players must play card suit led
one, play card choose dont. winner one trick
leads next; person leads first trick (the opening leader) determined
bidding phase game.
object card play phase always partnership take many tricks
possible; advantage one partners taking trick another, order
tricks taken irrelevant. opening leader plays first card
first trick, player left places cards face table
players see them. player called dummy, dummys turn
play, dummys partner (who see partnerships combined assets) selects card
played. Dummys partner called declarer members pair
called defenders.
purpose bidding phase identify trumps declarer, also
contract, described shortly. opening leader identified well,
player declarers left.
bidding phase, various contracts proposed. dealer first
opportunity propose contract subsequent opportunities given player
clockwise direction. player many opportunities suggest contract
phase game, called auction. partnership required explain
meanings actions auction side, requested.
contract suggests particular trump suit (or perhaps trump
suit all). player suggesting contract committing side winning particular number 13 available tricks. minimum commitment 7 tricks,
35 possible contracts (each 4 possible trumps, trumps, seven possible commitments, seven thirteen tricks). 35 contracts ordered, guarantees
bidding phase eventually terminate.
bidding phase complete, side suggested final contract
declaring side. two members declaring side, one first suggested
eventual trump suit (or trumps) declarer. Play begins player
declarers left leading first trick.
hand complete, two possible outcomes. declaring side took
least many tricks committed taking, declaring side receives positive
score defending side equal negative score. substantial bonuses
awarded committing taking particular numbers tricks; general, larger
commitment, larger bonus. small bonuses awarded winning tricks
beyond commitment.
declaring side failed honor commitment, receives negative score
defenders receive equal positive score. overall score case (where
355

fiGinsberg

declarer goes down) generally smaller overall score case declarer
makes (i.e., honors commitment).

Appendix B. new ending discovered GIB
deal occurred short imp match gib Bridge Baron.









96
QJ85
AQ3
K J 10 8

KQJ875
943
7
642










43
A72
J 10 6 2
AQ73

10 2
K 10 6
K9854
95

South (gib) dealing unfavorable vulnerability, auction went P2XP3NT
pass. (P pass X double.) opening lead K, ducked gib,
Bridge Baron switched small heart. East ace returned spades, gib
winning.
Gib cashed hearts, pitching small club hand. tested
diamonds, learning bad break winning third diamond hand. led
9 following position:












K J 10 8

Q


? ? ?












J
A??

10

98
9

gib pitched ten clubs dummy (it aiming ending
along), defenders helpless take two tricks independent location
club queen. table, Bridge Baron let gib play 2 making exactly,
gib picked 12 imps.
356

fiGIB: Imperfect information computationally challenging game

References
Adelson-Velskiy, G., Arlazarov, V., & Donskoy, M. (1975). methods controlling
tree search chess programs. Artificial Intelligence, 6, 361371.
Bayardo, R. J., & Miranker, D. P. (1996). complexity analysis space-bounded learning
algorithms constraint satisfaction problem. Proceedings Thirteenth
National Conference Artificial Intelligence, pp. 298304.
Billings, D., Papp, D., Schaeffer, J., & Szafron, D. (1998). Opponent modeling poker.
Proceedings Fifteenth National Conference Artificial Intelligence, pp. 493
499.
Blackwood, E. (1979). Play Hand Blackwood. Bobbs-Merrill.
Eskes, O. (1997). GIB: Sensational breakthrough bridge software. IMP, 8 (2).
Frank, I. (1998). Search Planning Incomplete Information: Study Using Bridge
Card Play. Springer-Verlag, Berlin.
Frank, I., & Basin, D. (1998). Search games incomplete information: case study
using bridge card play. Artificial Intelligence, 100, 87123.
Frank, I., Basin, D., & Bundy, A. (2000). Combining knowledge search solve singlesuit bridge. Proceedings Sixteenth National Conference Artificial Intelligence, pp. 195200.
Frank, I., Basin, D., & Matsubara, H. (1998). Finding optimal strategies imperfect
information games. Proceedings Fifteenth National Conference Artificial
Intelligence, pp. 500507.
Ginsberg, M. L. (1993). Dynamic backtracking. Journal Artificial Intelligence Research,
1, 2546.
Ginsberg, M. L., & Harvey, W. D. (1992). Iterative broadening. Artificial Intelligence, 55,
367383.
Ginsberg, M. L., & Jaffray, A. (2001). Alpha-beta pruning partial orders. Games
Chance II. appear.
Gratzer, G. (1978). General Lattice Theory. Birkhauser Verlag, Basel.
Greenblatt, R., Eastlake, D., & Crocker, S. (1967). greenblatt chess program. Fall
Joint Computer Conference 31, pp. 801810.
Joslin, D. E., & Clements, D. P. (1999). Squeaky wheel optimization. Journal Artificial
Intelligence Research, 10, 353373.
Koller, D., & Pfeffer, A. (1995). Generating solving imperfect information games.
Proceedings Fourteenth International Joint Conference Artificial Intelligence,
pp. 11851192.
Levy, D. N. (1989). million pound bridge program. Levy, D., & Beal, D. (Eds.),
Heuristic Programming Artificial Intelligence, Asilomar, CA. Ellis Horwood.
Lind-Nielsen, J. (2000). BuDDy: Binary Decision Diagram package. Tech. rep., Department Information Technology, Technical University Denmark, DK-2800 Lyngby,
Denmark.
357

fiGinsberg

Lindelof, T. (1983). COBRA: Computer-Designed Bidding System. Gollancz, London.
Marsland, T. A. (1986). review game-tree pruning. J. Intl. Computer Chess Assn.,
9 (1), 319.
McAllester, D. A. (1988). Conspiracy numbers min-max searching. Artificial Intelligence,
35, 287310.
Pearl, J. (1980). Asymptotic properties minimax trees game-searching procedures.
Artificial Intelligence, 14 (2), 113138.
Pearl, J. (1982). solution branching factor alpha-beta pruning algorithm
optimality. Comm. ACM, 25 (8), 559564.
Plaat, A., Schaeffer, J., Pijls, W., & de Bruin, A. (1996). Exploiting graph properties game
trees. Proceedings Thirteenth National Conference Artificial Intelligence,
pp. 234239.
Schaeffer, J. (1997). One Jump Ahead: Challenging Human Supremacy Checkers.
Springer-Verlag, New York.
Sheinwold, A. (1996). Five Weeks Winning Bridge. Pocket Books.
Smith, S. J., Nau, D. S., & Throop, T. (1996). Total-order multi-agent task-network planning contract bridge. Proceedings Thirteenth National Conference
Artificial Intelligence, Stanford, California.
Stallman, R. M., & Sussman, G. J. (1977). Forward reasoning dependency-directed
backtracking system computer-aided circuit analysis. Artificial Intelligence,
9, 135196.
Sterling, L., & Nygate, Y. (1990). PYTHON: expert squeezer. J. Logic Programming,
8, 2140.
Wilkins, D. E. (1980). Using patterns plans chess. Artificial Intelligence, 14, 165203.

358

fi
ff
fi
! #"$ %
'&)(*,+.-//!(102-346574/-

CEDGFIHJH

89:;< =,-?>
/!(@A: %&=B3?>
/!(

KMLNPOQOQROGSUTWVYX$Z[F]\_^MHGN`X$ZaKML?NPOcbdF]OGFfegN,Z[RhiOjCEDGeghlkGSiD


F]kGenRX$ZgR?opTqF]N`egorD

sfu2
vxwzy{u$|~}2

2fffff2$[i$f$$6x$#2

G ff
v r$vx f
f
x{9 ~
,<!!,

$i$f$$6x$#2

9x 1?ff

,g
`96?6`q91~1B66]1!
.x96f6, !qY1`[.
1 6G2n1,16G[G1992P71
B
6#1#19

$1~f6 1.g6
!669<$ 6?!<ffq191` 69#]i~] <6 1.f1Gff9
,11P6]1Ylx9B)x16ff?lW196
1
6q6`?)9
?iG<6 11.l196
2$1M19`17g91. 1.i71
6{Yx66691911q6196
1?[P6lx ?!1 7
11.)`,61!?9`fx .G?11$l 6ff 61! 6
6~?112]
,7#1r
6iffff!6x16f69 [7
6`16`176~[[ 1!1W,[

fiff ] ff
!#"$%'&()+*",-$').!/"0$12"3$4#51/47698"1:;4#1/8<"$>=&?><@84A1B8<*C=&ED9#"1/1/4#1/5
$%*F$%%G;$HIJ/4#$K4#1/8<-"$%L4#$JG;"4M1/A*'N/O/E%=;P1/)Q",D/D/="8R$S4M1TDB#"1T51-",4#=1H
IJ/U6B-$%V",D/DB="8-E)K"$WN/A=DXNEY:*?ZK#O/G["1BNE\/O-$%.]_^``acbc^``deRHUf_1E4AV$%G'4#1/",DB",DX
=1Thg?ikjklmklnWjop$*c$%%Gq]rZK#OBGtsu\/O-$%bV^``aeRb9*N/$8<-4AYXNT"
1)vDB#"1w51R",4A=1
%8-B1/4#xcOY9"$%Ny=1hz9{A|,}/}/~}:?%|RzBb:)k/4#8-h)K"$GhO/8Ry&"$%/"1
"1*h=%8-B1/4#xcOF1=)S1
",/4#$U4MG
HIS4AUDB",DX$%",%N;"?)S/=A.$-4A$U=&$%",-8R
<=-$/",<691/NhB4#$",D/D/="8R
Yc*wG;",F4#15;4#1!G
=P<@84A1:h]r\=snV=15bW^``cL"GhYB/"G
DB",4b/l",-b9sn"GPYB8-:b
^``deU"1/NYc*P<F%1/N/4#1/54A%=L8<=DXK)S4AG
=K<cDB$$4AKDBM"1/1/4#15k#"15O/",5$J]rE=c/Ab,okYXb
mk=,XG;"1B1bcsv?4#G;=D=OBA=$b/^``d:Bg?",1s[L1=YBA=F8bB^``d:j1/N-$%=1VbcFG;4AVbs#Nb^``c
okYbB,eRH
IJ/$%8<=1BNw",DBD/="8-T4#$Sz9{A|,}/}/~}:w|fik|r~((|~({~rr?G;=cNVb:)SB4#8-%-"1/$M",%$D9#"1/1/4#1/5
%=;D/-=D=$-4A4A=1/"$",4#$_6",YB4##4A*!]rL"O%hsF#G;"1b^``eRH.f1TDB",-4#8O/#",KL4M$KL=DX?/",
"N,"1/8<$4#13w$%",%w=&",h=&D/=DX=$4A4#=1/"U"$%=1/4M15!$%*F$%%G;$8",*3N/4#8<A*0=y%=
DB#"1B1/4#15w$%*c$%G;$EA*F4#15w=1/4M$?%8-/1=#=5*H;f1&r"8<bP"O%'"1/NcMG;"1]_^```e?D/-N/4#8<%N
/",k$%",-8R>=1>D9#"1/1/4#1/5yG;=cNB$)S4##XYX8<=G
h$ODX%9O=OB$YX8"O/$PP$",%P=&P",-S4#1
D/=DX=$4#4A=1/""$%=1/4M15;$%*F$%%G;$)S4M#X"Nfi"1B8<PGhOB8-&r"$%%SB"1>4#1TDB#"1B1/4#15y$%*F$%%G;$H
jB4A-N1/)",D/DB="8-C4#$'F<F~M<r~r|,%<!z9{7|}/}/~}:"$hD/=DX=$%NY:*3Z.=1
"1/Ng<1
]_^``cb^```eRHf1/4#$k",D/D/="8R0"wOR4#$%4#8?&rO/1/8<4A=14#$SN/-4AN&(=G+$%DX847698",4A=1!=&
DB#"1B1/4#15S4M1/$%"1/8<K"1/NyO/$%N&=5OB4#N/4#15kK$%",-8-;=O5K$%",%J$%DB"8<Hj$NG
=1/$%-",%N
Yc*'E$%*F$%%Gt\U\]r$=&=\/"$%_\=)K",-N9eJ",?DB#"1/1B4#15h8<=G;D4#4A=1T",JjSf_l.:,FbB/4#$
",D/D/-="8-D/-=N%=
YXE8<=G
DX4A4AHf_1T&"8<b9\\C=O%DX&=-G
N"M9/E=J&rO/#A*;"O%=G'",4#8
$%*F$%%G;$L"1BN)."$P1=G;4#1/",%NQK_,zCP~M<r~(}cF~MRFTS(,;|,}9R'K{A|,}/}/~}:!Bfit",L
8<=G
DX4A4A=1VH

-//!(g %%9!=6P
=KB?
.g
!fi;f
:! %&% &?%2%M? =

fi

2fffff$i

f_1ym?Fl]rZ.=1svg<1b/^``eRb:5="N/4#$%"1/8<$U",.$%4#G'",%NyY:*P",DBD/=4#G;",4M15k$%=MO4A=1
A150%="w#"fi",4A=10=&yDB#"1B1/4#15
"$%]rZ.=1bWnV=c-4#1B8$bXsg<1b^``deRHh/4MAh\U\
O/$%$SP$"G;P#"fi",4A=1&=kN/-4AF4#15
4A$S/O-4#$%4M8$b4ASN/47X-$&=G+m?Fl4#1>"1:O/GhYX=&4#Gy
DX="1:N"4##$Hf$YB"$JO-4#$4#8.%8-/1/4Mx:Ok8"1
YXJ$%1'"$"1'",D/DBM4#8",4A=1y=&Vg?iSjlmlnjko
%=P/J#"fi",4A=1HIJ/4M$U*c4AMN/$5="BNB4#$%"1/8<J$4#G;",%$/",b:4#1'N/47X1/8<J%=PmEFlS$$%4#G'",%$b
N=L1=-A*P=1;"1'4#1/NDX1/N1B8<."$$-O/G
D/4A=1VH\U\O/$%$"ENB47-1$%",R8-
%8R/1/4#xcO/"1;mEFlb
1/"G
#*!"1<}<,%R-L,=&/4M#78#4#GhYB4#1/5bB8<=GPY94#1/4#15wA=F8""1/N$%*F$%%G;",4#8y$%",-8RHy\4M1/"#A*b
4AkG
DBA=*c$?"D=)-&O/WD/-O/1B4#15
%8-B1/4#xcOhB",$%#8<$"T$%=&D/-=G;4#$4#1/5;$O/88<$$%=R$k%=T"8R
$%",-8R1=FNb"1BN0"1/=?D/-O/1/4M15
%8-/1B4#x:O/h/",E8O$=OY/-"1B8-$)S-h4A?",D/DX",-$k/",
$%=G
E5="W/"$YX1"8-/4#N%=:='",-A*HZ.=>%8R/1/4#xcO$",E=Y/"4M1N"$J"
$4#N/<X8<J=&
YB"$%hO-4#$4#8kG;=cNVH
.=1B8<-1/4#15E/S$%",R8-T$%%-",%5*;B",\U\34#$YB"$%N;=1Vb:).SG'",yS&=#A=)S4#15HUjvA==&
8#"$$-4#8"DB#"1/1/4M15'",D/D/-="8-$b#4ADB",4#"7=RN?DB#"1/1/4M15]r08jk##$%%hsiJ=$%1:YB#4#%b^``F^e
=
DB#"1B1/4#155-",DB"1/"A*F$4#$]rZK#O/Gs\BO-$%b^``deRbK",-51-4#8wD/=Y9AG$%=AF4#15G
=FN/$b
NA=DXN&=#A=)S4#15T$%=G
'=4#8"8<=1B8<D/b"1BN%$%%N3=13<F"G
D9A$E&=G'#4#%-",O
",&%).",RN/$Hf10=OL",D/DB="8-bW<cDB#=-4#15;4#N"w=&/O-4#$%4M8h$%",R8-bV/
4#$E1=$O/8R8A",
N/4#$4#1/8<4A=1YX).13NA=DBG;1L"1/N0%$%4M15HIS
$%",-8-$%%-",%5*b"$?).#"$?
DB-O/1/4#1/5
%8-B1/4#xcO$b",w51-4#8G
=FN/$PB",/"TY1CG
=4A,",%NCY:*=Y9$%F4#15><"G
DBA$Hj#$%=b
N$4#51hN84M$4A=1/$)-JG;"N.=1yY9"$4#$=&98",&rO/:<cDX-4MG
1",4#=1HIS/4#$4#1%-=cN/OB8<$4#1:%=?
$%*F$%%G"
YB4#"$S%=)K",-N/$kP<"G
DBA$kO/$%N!&(=k%$%4#15'NBO-4#15;N/A=DBG
1:HKh).P%$4#15
=O"A5=-4A/G'$E=1"!-"15=&KN/=G;"4#1/$E=&%1CO/$%N4M1'D9#"1/1/4#1/5TM4A%-",OHTIJ-=O5=O
LD9",Db/)h)S4##X-&(k%=N=G;"4M1/$/",",L&x:O/1A*O/$N>4#1#4A%-",O/bB"1/N%="$%F$
&=Gp$-O/8-N=G;"4#1B$b"$KR<}9;|,-RHf_1P/.N#=DBG
1:DBB"$%b,)KO/$%NhYX1/8-/G'",?<F"G
D9A$
&=Gkw7XbK(FURrBb9.-BbB.-/Rb,Mr-b>R%XbTX-Mb"1/N>UAfi-r
N=G;"4M1/$HU/1wN/$8<-4AYB4M15L=O"A5=-4#/G;$K4#1?DB",DXb:).E4#1/N/4M8",%S?DX=4#1:$)S/k/=$%
%$%4#1/5
<F"G
D9A$DB#"*N!"
-=AE&(=kN$4A51N84M$4A=1G;",F4#15H
l#"1/1/4#1/5h4#$.F1=)S1w%=
YX?l.FlXjSK8<=G
DBA%E14#1T4A$K$4MG
DBA$%&(=RGq]rZ*F#"1/N/b^``fi:eRH
IJcO/$b4#1hK51-"8"$%b4#$1=?<@84A1:U"#5=-4A/G;4M8G
=FNHf4#$&=K).=)k/4#A
%=>A=c=!&=L"A5=-4ABG;$?/",L",y<@84A1:L",LA"$%E=1-$%%-4#8<%N$O/YX8M"$$%$HIW=$%=G

<F%1:b
/4#$4#N"/"$YX1DBO/-$ONYc*3DX=$4#1/5!$%$%*F1"8<4M8"K$%%-4#8<4#=1/$P%=0wDB#"1/1B4#15"$%
$%DX847698",4#=1/$]rZ.*F#"1/NbK^``fi:eRH?O",D/D/="8R4#$h8<=G
DBAG;1",*%=/4M$H>"G;4#1/4M15
<4#$%4#15YX1/8-BG;",F$bF=1?691/N/$./",/*bB4#1/NNVbcN=
1=<FDBA=4#./&rO/#<FD/$$-4Ac4#*;=&
O/1/N/-A*F4#15EDB#"1B1/4#15L&=-G;"M4#$GHUIJ=O5*wN=1/=&rO/769M/"1*=Y:F4A=O/$-4A54MN$%*F1:"8<4#8"X<
$%%-4M8<4A=1/$b"#G;=$%1=1=&XG4#$UDB",4#8OB#",-A*PB",-NHf1;"MG
=$%"#F=&XJ<4#$%4M15?Y1B8-/G;",-
N=G;"4M1/$b"1=1F=D/4#G'"KDB#"18"1b4#1D/R4#1/84ADB#bY51/-",%N24#1DX=A*F1=G;4M"4MG
H2$4#15
hY1B8-/G;",-c$k&(=?4#1/$DB4A-",4A=1NBO-4#15;N/A=DBG
1:b9).y/"yYX1!",YB#P%=T8<=G
O/D)S4#!"
OR4#$%4#8yG
=FN/",h4#$L1=LDB=,",YBA*0<@84A1:bY9OLN=c$L).=).#G;DB4A-4#8"MA*>=1"!#",5
8#"$$S=&D9#"1/1/4#1/5"$c$H.IJ/4#$8M"$$J4#1/8MO/N$"#G
=$S"#X=&UP8O-1SDB#"1/1/4M15hYX1/8R/G;",F$H
f_1O/4#4AA*bk"A5=-4A/G'$<cD9A=4Ak$4#G
DB#K$%-O/8<OkO/1/N-#*c4#1/5k$J"$%F$H?O=1/5=4#15
).=4#$h8<=1/8<-1NC)S4A691/NB4#15>"&(=-G'"8R/",-"8<%-4A",4#=1=&J/",%$4#G
DB#>$%%-O/8<O/b"1/N
Yc*T&(=RG;"#4A4#1/5hh8#"$$=&DB#"1/1B4#15"$%c$S/",S\U\).=c$J)#X=1VH
c8<4#=1!54A$J"
$8RG;",4#8Lc4A)v=1!\\.$J$*c$%%G",-8-/4#%8<ObB"1/N!F8<4A=1!y4#1:%=FN/O/8<$
=O.1=",4A=1/"8<=11:4A=1/$.&=KFISiJf_l.yN=G'"4#1/$Hc8<4A=1/$h%=yLN$-8<-4AYXSY9"$%kO/-4#$%4#8
%8-B1/4#xcObV$%",-8R"A5=-4A/G>bX"1BND/-O/1/4M15'G
=FN/$bX$D8<4#A*Hc8<4A=1d$/=)S$E=)
"A5=-4#/G;$E",;<F%1/NN%=!N")k4Ajk?nN=G;"4#1B$Hc*F$%%GDX&=-G;"1/8<;4#$Lfi"#OB",%N34#1



fi 9>~20$7`$22



$##!2F

c8<4A=1cbKN/G
=1/$%%-",4M15/",'\U\u51-",%$w$%=#O/4A=1/$y<F%G
A*C&"$'4#1"3#",-5>-"15>=&
DB#"1B1/4#15YX1/8-/G'",N=G'"4#1/$HUf_1=-N%='4M##O/$%%R",%=O/J4#1OB4A4A=1/$.=1Pc4#1BN=&U$%%-OB8<O
/",\U\8"1<FDBA=4#w$OB88<$$%&rO/#A*b$%8<4#=1"M$%=54A$T<F"G;DBA$w=&hN=G'"4#1/$)S0
G
=FN>4#$#$$J",D/D/-=D/-4#",%H\U4#1/"MA*b%='8#",-4#&(*LDX&=-G;"1/8<EN/47X1/8<$JY)1\U\"1/N
mEFlbc/?$8<4A=1N$8<-4#Y$."y1:OBGPYXK=&W<FDX-4#G
1:$).LG;"N?4#1w=-NK%=
$%4MG;",%?)S/4#8R=&
E1)v"A5=-4#/G;4#8S%8-/1/4Mx:O$K4#$.G
=$%O/$&O/HE$/=)[8<=1/18<4#=1/$.%=-#",%NT)=-",K
DX=4#1:$4M1h/%<c)kK*h",DBDBA*b"1/Ny=c4#)=8<=1/1/8<4A=1/$4#1;c8<4A=1`cHF8<4A=1^
=O#4M1$K=OS8O-1J"1:O/P=&$%",-8RH



U




ff

2f

I=
54AE?"NS"1T=F4A)[=&\U\.$J$%*F$%%Gt",R8-/4A%8<O/b/\U4A5O
^E$=)S$=)[\\.$kG
=$%
&rO/1/N/"G
1:"X%8-B1/4#xcO$J",P",--"15NH

Relaxed GRAPHPLAN
Goal Distance
State
Helpful Actions
Task Specification

Solution / "Fail"

fi

Enforced Hill-climbing

\U4A5O;^ \\.$SYB"$%P$%*F$%%Gt",R8-/4A%8<O/H
IJ/k&rO/1/N/"G;1"O-4M$%4#8%8R/1/4#xcOk4M1\U\C4#$-#"ficNg?ikjklmklnWjoPbF)S/4M8-))S4##9N<
$8<-4#Y.4#1F8<4A=1HUIS%8R/1/4#xcO.5$8"#ANh=1*h$%",R8-
$%",%KYc*w<},%R-L:~({{ %{~;~(}cb
=OU$%",-8R"#5=-4A/GHIJ/4#$4#$W"k&=).",RNh$%",R8-/4#1/5S154#1/bfi%=YXN$-8<-4AYXNL4#1yc8<4A=1
acHgE4A1
"y$%",%b/M"ficN!g?ikjklmklnWjoQ4#1/&(=-G'$E$%",R8-)S4#w"5="VNB4#$%"1/8<$%4#G;",%b9"1/NT"N/N/47
4A=1/"MA*y)S4A'"$%K=&D/=G'4#$4#15h$O/88<$$%=R$&=K$",%bc/PF{ zfiRF{V|r~,}b%=hYXN$8<-4AYXN
4#1F8<4A=1CcH>kDX=13%-G'4#1/",4A=1b1&=-8<NC/4##78M4#GPY94#15'4#P=O%D9O$P"$%=#O4A=1DB#"1b=
DX=$B",S4A/"$J&r"4#ANVH
?1L%=DP=&FYB"$",-8-B4A%8<O.$=)k1L4#1L\U4A5O-J^,b)./"4#1:%5-",%Nh"J&)3=D/4#G;4#",4A=1/$

fi

%='8<=DXL)S4#$%DX84#"8"$%$JB",S",=$%PNBO-4#15%$%4#1/5



f&L"3D9#"1/1/4#1/50"$28<=1"4M1/$$",%$&=G

)S/4#8R5="k4#$O/1"8R/",YBAC]rN"N21BN/$b

N/<691N4#1>c8<4A=1>acHeRbB1T1&=-8<N>/4#M78#4#GhYB4#15L8"1T&r"4#X%=y691BNw"
$=#O4A=1HUf_1w/",



8"$b9";8<=G
D9A%POR4#$%4#8$%",-8R>154#1/L4#$4#1:=N>%='$%=#LE"$%T&=Gt$8<-",8RH
f_1yKD/$1/8<K=&B5="=-N/-4#15$b,1&=-8<N
/4M#78#4#GhYB4#1/5K$=G
4#G
$U)K"$%%$"?A=U=&94#G

"8R/4AF4#155="#$PB",1N%=!YXw8",N&=y#",%h=1VH>I)=%8-/1B4#x:O/$P%*F4#15!%="=4MN

fi

B4#$J",L4#1:%5-",%N




k-|,{<{#r~,}/bK4#1:%=cNBO/8<N4#12c8<4A=12cHcbK8O$
=O/;Y/-"1/8R$y)S->$%=G

5="/"$J",D/D9",1#*YX1>"8R/4AN>%=c=;",-#*H
IST:|,{J|c<}9|w%8R/1/4#xcOb"N/",D/%NC&=G



)=-3Y:*

"1/"0E=c/A]_^``eRb&N/$

/E5="#$K%=
EDB#"1B1.4M1w"1T=RNJN%-G;4M1NT"$"yD/<D/=F8<$$E]c8<4A=1cHcHeRH



fi


U



g ff

ff

ff ff

2fffff$i



\=S4M1%=FN/O/84M15\U\.$YB"$-4#8?%8-/1B4#x:O/$bF)L8<=1/$-4#NJ$4#G;DBALFIJiJf_l.'DBM"1/1/4#15h"$%F$b/"$).
4#1:%=FN/O/8<NTYc*w\U4A$k"1/Nok4M#$$%=13]_^`dc^eRHJ?OJ1=",4#=1/$S",h"$&(=MA=)S$H

,+

!"u$#&%(') *

$%",%

.-

Q~MP|k}/~rP.%L{7-~-|,{U|,

h"$-$O/G
E/",k"#X=DX-",%=k$8RG;","",E5=O/1/N/Nb/4H HAb/).E=1/A*w"AT",Y=O/P|r~,}H

!"u0/1%(')v !23,45"u *

76

FIJiJf_l."8<4A=1

68

96 ;:

!~MP|wrR~z9{#

96 ;: 96

]Mz9%fi] e |c] e <{M] e%e

96

<
GB -IH

=6> 96
.-A@
JHKML

F%z9%] ey|,
FDB8<=1/N/4A4#=1/$
_

>

WFhRF{7.%h|Rzz9{,~(}c>|'R~}:{#P

CBED

V?|,}!|,

L

.> <

R}FJRSR|fi

Fj

]

%e

96 cb

96

|] e%e ?{#] e

F}9r}

6
<

S<|,yc| h"8-/4#$


96 edf+
<

z9] e
<

96 gdh+i>

F<?z9%] e

96

|,}9>{7] eh~(hFLNA%

C|] e

%K3|r~,}w|'<|~(L:r}-|fi,{({A

PRQTSTUWVYX Z+:T[96ff\ ]8_^ Z+a`
]

?6
96 F> <

K|:] eh~(hF?"NBN!#4#$y_

#4#$_SE|r~,} |<w-~(}c
|hU_?|,

~M

7+A-EH

JF|r~r,}~M<|~r!-L",D/DB#4M8",YBAT~(}

!k

WyRF{7k_

|Rzz{ ,~}:>|' B<}9_L;,yc|,},}Xy|r~,}|'|h~(E%-F-~ <{T:r}-|fi

PRQTSTUWVYX Z+J:T[96 ( :OlOlOl":m6onp\ ]8 PRQ"SqUrVYX PRQ"SqUrV!X Z+:T[96 ( :OlOlOlT:m6ons ( \ ;:T[96"n\ ;l
]

%e

!"uftu%wv 2#wyx~3qz *
;> g
.%h|r~,} .|,}9

]

]

%e

%e

|{}8 Z~::F



DBM"1/1/4#15"$%



~(}B~r~|,{<| |,}

]

eP~M|wr~z{A

.-

?|,{ T|,%h%P|,

<

R~

F<

q~Mh

q

?OJ/O-4#$%4M8G;=cN4M$YB"$%N=13%{7| chz{7|,}B}/~(}cT|fi-RbB)k/4#8-",-PN<691N"$J&(=##=)S$H

!"u%w fv 2#'rwyx,3qz * Yk
|{ M{
M{W8 Z~9::F F> <
~ 8$ Q 96 ;: 96 ;:F = 96 ;:

I{8 Z~:=:F .-H

K~ ,}C|
z9{A|,}/}/~}:0|fi-

#"fi",4A=1

._

~(L:r}-|fi

:]

u]

] e |c] e

e

e

~r

t]

Ue

WFP<

96 ;: 96 eDE~,

]Mz9] e |F] e {M] e%e

f_1).=-N/$b=1y=Y/"4#1/$y#"fiFN0DB#"1/1B4#15'"$!Yc*4A51=R4#15'/yN/A%
#4#$%$=&"M"8<4A=1B$H
lM"1/$",P$4MG
DBA?$%xcO1/8<$J=&"8<4A=1B$J4#1T=OJ&-"G
).=H

!"u01%wv
[96 ( :OlOlOlq:m6on\
mj

2

* Yk
~

{8 Z~::F .mj 8
T> - T-> < I&
RP Q"SqUrVYX =:m
O{>
k
q a{ M{,-

K~ ,}|>z9{A|,}/}/~}:|fiR

L_L|r~,}E~}

k

]

c|<,{ ,<?L|fiR ~

|r~r,}0 B}9Rh~(P-|,{{A-|h#"fiFNDB#"1

F,

e vDB#"1[~(!| /}9R

~r

~ ~r,{ PFh<{A| :|r~r}

q



]

_

hekc,{Afi S}

fi 9>~20$7`$22

&)
7

f

g





$##!2F

7Q n

B]





f_1
/4#$$%8<4#=1b).S4#1:%=cNBO/8<KJYB"$%J/O-4#$%4M8.G;=cN
OB$%N;4#1
\U\.Hf4#$N-4#NyY:*y",D/DBA*F4#15
g?ikjklmklnWjo%=P#"fiFN;D9#"1/1/4#1/5k"$%F$HIJ/J$O/#4#15?5="9NB4#$%"1/8<J$4#G;",%$.N=P1=bF#4A
mEFlJ$E$4#G;",%$bA*0=13"14M1/NDX1/N1/8<y"$$OBG
D/4A=1H
D/=;/",P/;O-4#$4#8y8<=Gy
DBO",4#=14#$KDX=A*c1/=G;4#"bc54AP$%=G;L1=4A=1/$K=1>/=)QN/4M$%"1/8<E$%4#G'",%$S8"1YX?D/S8"O4#=O/$b
"1/N>N/$8<-4AYXE=)QLG
=FN>8"1>YXL4#G;DBAG
1:%NT<@84A1:A*H
.=1B$4#N?;O/-4#$%4#8hG
=FN/",P4#$?O/$N4#1m?Fl]rZ=1/hstg<1b^``eRHgE4A13"

{8 Z~:=:F

DB#"1B1/4#15"$%

t]

+

UeRbm?lv$%4#G;",%$?&=L"8R3$%",%

{ 8 Z~ :;+:F
+


$%",-8RT?$%=#O4A=1A15w=&V"$%
"8-B4A$S/L5="#$$%",4#15'=OJ&=G

]

/",L4M$k-"8-N34M10"w&=)K",-N

eRbB4H HAb:?A15w=&W"h#"fiFNwDB#"1'/",

,{

.HKjk$k8<=G
DBO4M15
L=D/4MG;"V$%=#O/4A=1>A15>%=

)S/4M8-
).=O/#NG;",k"1"N/G;4#$$-4AYBAOR4#$%4#8

4M$

B/",-N0]rZ.*c#"1BNb9^``fi:eRbFm?l$%4MG;",%

4#$"
-=O5>",D/D/-=4#G;",4A=1TYB"$N=1!8<=G
D9O4#15yL&=#A=)S4#15y).4A5:fi"#O/$H

BED|+
FG

QqX B ifi8



4A&

p

4A&

]

"N/N + 0

=)S4M$%

QqX )8
] Xe

D/ + 0

^

]_^e

mEFl["$$-O/G
$E&r"8<$E%=>YX
"8-/4#N34#1/NDX1/N/1A*>4M1/;$%1/$%
/",E/
)4A5:E=&K"$%
=&V&r"8<$



"1T"8<4A=1$KDB8<=1/N/4A4#=1/$

$%",%$O-4M$%4#8k$%4#G;",%P4M$



4#$$%4#G;",%NT"$.hRFQ=&V/4#1BN/4AF4#N/O/"c).4A5$HIJ

Z+ fi8 QqX ]8 QqX

] e

] e

]

e

]e

j$$O/G'4#15E&r"8<$%=hYXS"8-/4#Nw4M1/NDX1/N1:A*b/4#$O-4#$4#84A51=$DX=$4A4AS4M1%-"8<4#=1/$
/",8"1T=F88OH.=1/$-4#N.?&(=##=)S4#1/5h$=-<"G
DBADB#"1B1/4#15L"$9b)S/k/?4M1/4A4#"9$%",%

( :; -

4#$KG
DB*bB/E5="#$S",

Ofi

bB"1BNTP",PE&(=MA=)S4M15yP"8<4A=1B$

1/"G


2
u2
u 2
u

8
(

-

:
):
Tff:o ( ff:
Tff:o - ff:
: TIff:
|
]D/-

8
8

"N/N

NMe

]



]

e

e




]

mEFlJ$k).4A5,"#Oh8<=G;DBO",4A=10$OBA$S4#1

e

/"F4#15)4A5:=1b"1/N!"8R05="B"F4#15

).4A5).=HLj$$O/G;4M15'&r"8<$%=wYX"8-/4AN4M1/NDX1/N1:A*b/yN/4#$"1/8<h=&4M1/4A4#"$%",%
%=">5="$%",%w4#$E&=;$4#G;",%N%=>&(=O/HTYcF4A=O/$A*bV/=).bU;"$%34#$E$=Afi",Y9A;4#1
=1/A*P$%DB$b/"$

W2
u

( "1/N

2
u



- $B",EED/8<=1BN/4A4A=1


Hf_1=-N/%=;",h"88<=O/1:S=&

Z~9:;+:F

$O/8RDX=$4A4A
4#1:%-"8<4A=1B$bV=OP4MN"T4#$?%=!$%",yg?iSjlmlnjko=1;"$c$']

eRbU"1/N

<F%-"8<h"1<cDBM4#84AE$%=#O4#=1bW4H HAbW">#"fiFNDB#"1HE1'8"13/13O/$%
/4M$EDB#"1&=hO/-4#$%4#8

fi

,"#O/",4A=1H
')S4##$%'4#1/;1<ch$%8<4A=1/",P/4#$E",D/D/-="8-34#$?&"$4AY9A Pg?iSjlmlnjko
8"1>YX?D/=1>%='$=AL#"fiFN"$%F$S4M1TD=#*c1=G'4#"B4MG
H

#}v

uvx231u2v 0x,3qz3

2 #w

nV.O/$<"G;4#1/S=)[g?ikjklmklnWjoYB"$)S1'4#4#$$%",-%N'=1w"LDBM"1/1/4#15?"$%
B",N=c$
1=8<=1"4#1"1:*3NA%T#4#$%$HwTY/R4A<B*0c4#)YB"$4#8'1=",4A=1/$=&g?iSjlmlnjko
"A5=-4#/Gq]rZK#O/Gs\BO-$%bW^``deRH

"



fi

2fffff$i

Ofi

jD9#"1/1/4#1/55-",DBC4#$h"0N/4A-8<%Nb#"*N5R",DBB",8<=1:"4#1/$).=c4M1/N/$L=&k1=cN/$ E<|
}9:"1/N!|r~,}>}9:RHIJS#"*-$."A%-1/",%kY)1&r"8<"1/N"8<4A=1M"*-$b:)SS=1S&r"8<
"1/N"8<4A=13M"*E%=5G;",;OD"r~(';z9HPf_10y6B-$%4#G

$%%DWbV1:O/GhYXEFb);/"
&"8<y#"*y8<=$D=1BN/4#15%=4#1B4A4#"$%",%T"1/N3/"8<4A=1C#"*
8<=-$%DX=1/N/4#15%=0"#



"8<4A=1/$J/",J",L",D/DBM4#8",YBA?4#1wL4#1/4#4#"9$",%Hf_1T"8-!$-OYB$%xcO1:.4MG
E$%%D



#"*J=&"#&r"8<$K/",J8"1TDX=$$4AY9A*yYEG;"N/%ROE4#1
/",S",-LDX=$$4AYB#*;",D/DB#4#8",Y9A?54A1=$%P&"8<$H

b/).L/"L

4MG
E$%%DB$b/"1/NwE#"*J=&"M"8<4#=1/$

?1/>8<-O/84#"K/4M15/",g?iSjlmlnjkoN=c$y)S1Y9O/4##N/4M15!D9#"1/1/4#1/5!5-",DB24#$y

F
6

96:m6

4#1&1/8<
=&?yr/|,{K {cR~,}!-#",4A=1/$HjD9"4AL=&"8<4A=1/$w]

6"

GOO/"#A*<F8MO/$4AbB4#&
"1/N

U~}B<<<b94H HAbB4A&=1P"8<4A=10NA%$k"
D/8<=1/NB4A4A=1T=k"1"N/N

Br:FBr
B
96:m6o
6"

<X8<=&V=HjvD9"4A=&W&"8<$L]
4A&."8-C"8<4A=1C",hA

,Br

"8-B4A$



e?",h4#G
'$%%DC>4#$LG'",N

#e","4#G
?$%%D

^
/",h"8R/4A$

MH3jDB"4A=&k"8<4A=1B$T]




y4#$.G;",NGOO/"MA*y<F8#OB$4Ab

4#$L<8#O/$-4A
=&K"8-"8<4A=1",A

Meh",y"04#G;w$%%D

G

^;/",

4#$yG;",NGOO/"##*<F8#OB$4Ab

6

4A&T"8<4A=1/$y4#1:%&bU=
4A&*/"3-,kzr~(}:3}--fiRb4H HAb4#&J$%=G
wD/8<=1/N/4#4A=13=&
<8#O/$4Ak=&W$%=G
D/8<=1BN/4A4A=1
=&
"1:*w<8#O/$-4A=1T#",4A=1B$",S"#H

vWvxu2fuW3T!"uh# M{A8 Z~Y::F
= <
vWvxuguF
TN

L
!k
TN







4#$

HIJkDB#"1/1B4#15E5-",DB=&W"P#"fiFN"$'N=c$1=K8<=1:"4#1

q

]

JHKML



e>R>|<{A| c3

{Y> K

%.|fi- |,-}

'

Yk q-

~{({W}9.;|,-|}/EzF|~(y_|h,y|r~,}h|,Lr/|,{{ > :{cR~ ,

J

L

IJ/Jl=DX=$4A4#=1
4#$"$4##*hD/-=1;Yc*y4#1/N/O/8<4#=1y=.JND/
=&XSDB#"1/1/4M15k5R",DBH

|fiR|fi wr~(';zFH'?1/#*4#1:%&-4#15T"8<4A=1/$L",-;G;",N3GOO/"U<8#O/$4#;",E4#G


$%%D!FH.jk$JL",P1/=;NA%L<X8<$b91/=
DB"4AJ=&U"8<4A=1/$k4#1%-&($H
R}9r~ 'R|fi ;r~'y<z

r~('
z

c

^,HlP4#1/N/OB8<4A=1!:*:DX=$-4#$bX
&r"8<$L",

1=?<8#O/$4A
"$?4#?"8R/4A-$?=1/
4#G
y$%%D3""N3",
1=H\=G/4M$4#k&=#A=)S$/",L1=



DB"4A=&"8<4A=1B$J/"$J8<=G
DX4#1/5;1N/$HIS*N=1=J4#1:%&(-E4AH

1$%",%N0=1"wDB#"1/1/4M15
"$%bVgEiSjlmlnWjo<F%1/N/$DB#"1B1/4#15
5-",D90M"*?Y:*
#"*.O/1:4#9"L&r"8<.#"*.4M$"8RNw/",8<=1:"4#1/$."#/5="&r"8<$bF"1/N'4#1')S/4#8R'1=P).=5="9&r"8<$
",
G;",N0<8#O/$4#H (

F",4#15w&(-=G+B",?M"*bV"w8OR$4AYB"8c).",RN0$",-8-"A5=R4A/G4#$

4#1:=NHI=y691/N"yDBM"1T&(=J";$=&&r"8<$S",SM"*
",?#"*

r

c



Fb/4#1/4A4M"#4AL$%=&U$%A8<%N!"8<4#=1/$

^L%=wPG
DB*>$%HSIS1b/&=k"8R0&"8<bX8<=1/$4#N/k"#V"8R/4AF4#15w"8<4A=1/$",k#"*

^?=1?",&(%Sk=/J"1/NT$%A8<k6B-$%.=1?/",J4#$.1=K<8#O/$4A=&"1:*"8<4#=1T/",/"$

"A"N/*0YX1$%A8<%NHf&K'<4#$%$h$O/8R"1C"8<4A=1bUD/=F8<N3)S4#1/<ch&"8<Hf&1=b

YB"8-:%-"8-
%=LJ#"$&"8<"1BN
%*%=P"8-/4#S4A)S4A
"ENB47-1"8<4A=1VHf&X"1;"8-/4#c4#1/5L"8<4A=1
/"$YX1$A8<%N0&(=?"8-&r"8<b108<=#A8<?D/8<=1/NB4A4A=1/$S=&"#$%y"8<4A=1/$%=G;",
OD"
1)[$%=&&r"8<$=1E4#G
E$%%D",R#4AHFOB88<NT)S1T&r"8<J#"*S



L4#1/4A4M"9$%",%



4#$

"8RNbF)S?1=y"8-/4#c4#1/5h"8<4A=1/$K1Nw%=yYXk$%#8<%NH?1#"fiFN"$c$b1=YB"8-:%-"8-c4M15
=F88O-$J4#1!gEiSjlmlnWjoh$S$%",-8R!"A5=R4A/GH

vWvxu2fuW3T!"u/h M{A8 Z~Y::F
= < .k
vWvxuguF






]

q

JHKML

e>R>|<{A| c3

~{({W} <-|<,r_|

-

{Y> K

%.|fi- |,-}

'

J

gB

ZK"8c%-"8F4#15T=1/#*=F88O-$k4A&"#V"8-B4A-$k&(=";&r"8<

L

",P<F8#OB$4AL=&$%=G;P"A"N*

$%A8<%N0"8<4A=1H4Al=DX=$4A4#=1^,b9).PF1=)p/",k1/='<8#O/$4A=1B$K<F4#$b9"1/N!:O/$bB/",k/4#$

(!oe"FO;?JZwF"w
TZo=Zo;TZF(=Zeoo;(FoAro1oTZ9w





fi 9>~20$7`$22

B

N=c$k1/=/",DBD1VHSjkM$%=b4#&

c

^P$OD/DX=4#1/54AH



34#$k4#1!5R",DBM"*



$##!2F

bX1y4#$S",EA"$%=1y"8-/4#?4M1!#"*



/4#Ah
",YX=
",5O/G
1:",4A=14#$$OF@w84A1&=?$-=)S4M15l=DX=$4A4A=10cbV4AkN=c$?1=?%#
O/$.GhOB8-T",YX=O)k/",.4M$"8<O/"##*;5=4#15=1w)S1=1$",$Jg?iSjlmlnjkov=1T"h"$%')k4A=O
NA%#4#$%$HC/",'/",D/DX1/$
4M$y/4#$H2g?4A12"$%4#$
$%=#fi",YB#b>D9#"1/1/4#1/5!5-",DB5$
<F%1/NNCO/14M$%=G
w&"8<y#"*4#$P"8-/NB",8<=1:"4#1/$"#/'5="#$HIJ13/8O/-$4A
$%",-8Rh$",$WYc*E$%A8<4#1/5k"8-B4A-$&(=5="#$",WB4#$VAHUIJU69-$%W",%%G
DB$OB88<N/$b"1/N
1)p5="#$?",h$%OD!=1/h4#G;P$%%D0",-#4AHjk5"4#1bL69-$%S$%#8<4A=1!=&"8R/4A-$$O/88<NB$b
"1/N$%=&=bO/14M/;4#1/4A4#"$%",%'4M$?"8-NVH;IJ:OB$bV$%",-8RDX&(=RG;$=1/A*"$-4#15A
$%).D
=h
5-",DBVbW$%",4#1/5&(=G/
%=D#"*h5=4#15>N=)S1%=>;4M1/4A4#"#"*b"1/N8<=##8<$P"
#"fiFNDB#"1=1w4#$)K"*Hf1DB",4#8OB#",b/kD/-=c8<N/O/S",$K=1/#*
D=#*c1=G'4#"/4#G;k4#1?$4A
=&UE"$%H

x

#0 {8 Z~9:=:F
V- H
V >e ~ -

u2v }



]

{A,}::<|!{ ~(S%'|,}/!|r~r,}C~(

zF,{,}9,y~|,{U~(}

vWvxuguF

k



JHKML
K = <

UeP-h|
,{ ,|<{#P%{7| :;
WF}

|,}9

J



ZKO/4##NB4#15KDB#"1B1/4#155-",D94M$DX=A*F1=G;4M"4#1

=&V4#G;k$%%DB$.YBOB4#AS]rZK#O/G

T> <

%K|,-



{

~({{F}90|T,{ r~,}

V W ~ W
b

F%hFP{#<}:T_L

b

X

"1/N

X
R ~Z

b,)S

4#$K1:OBGPYX

sQ\BO-$%bX^``deRHok=)Lb4#1=OK8"$%k%="X1cO/GhY




4#$h"1OD/DXPM4#G;4AE%=1cO/GhYP=&4#G
'$%%D9$H>IJ/4#$P4#$

~}r~'

=&W"8<4#=1/$

O/$%LYX8"O/$",&%h/4M$L1:OBGPYXP=&

4#G
k$%%DB$./"$YX1'YBO/4#Ab"MB"8<4A=1/$.",D/DX",",K$%=G
#"*K4#1'S5-",D9H?)S4#$b4#$
"
#"*



c

)S/L1=;1)Q"8<4#=1>8<=G
$S4M1b4H HAbB"8<4A=1>M"*

~

/"G;"N';D/=F8<$$h$%%=D-4#5L")."*HF4#G;4#M",-A*b"8<4A=1M"*

~Z
V ~

"8<4A=13M"*
4#1

b

F"1/N



^E4#$J4#N1:4#8"%='"8<4A=1#"*

j$/"$4#$K$%=A,",YBAbc/4#$.4#G
D9#4A$B",K"MB5="#$",-?8<=1:"4#1N4M1'&r"8<J#"*



H

bc)k/4#8-).=O/#N

).=O/#N3Y;4MN14M8"%=

^,bW4MG
DBA*F4#15;%RG;4#1/",4A=1VHPIJy5-",DBY9O/4##N/4M15
DB/"$%
4#$?cO/$?DX=A*F1=G;4#"

H

fi

.=1B8<-1/4#15yDB#"1<c%R"8<4A=1DB/"$% S4Al=DX=$4A4A=10cbV$%",-8-%R"-$%$Lh5R",DB

&=Gt%=D0%=YX=%%=Gb8<=#A8<4#1/5"'$S=&"8-B4Ac4M15'"8<4A=1/$","8-#"*HkcA8<4#15"8-/4AR$

fiff V ~ ? ;fi

&="$%=&&r"8<$4M$

;]

V ~

e Ujv$%=&X&r"8<$K/"$",KG
=$%.$4A

bG;"fi4#G;"

1cO/GPYXh=&SN/4#$%4M1/8<L&r"8<$4M13w5-",DBH0jk1C"8-B4Ac4M15"8<4A=18"1CYX'&=O/1/N%="8R&"8<y4#1

fiff ~

8<=1/$%"1:.4#G
SO/$-4#15LkDB#"1/1B4#15?5-",DBHj$1:OBGPYX=&VM"*-$%=PYXSA=c=Nw",.4#$
$%",-8R!4#$KDX=A*F1=G;4M"4M1TPN$4#NTDB",-"G
%R$H

Z~9:;+:F

c",-4#15'g?iSjlmlnjkop=1"y$%=A,",YBAE$%",-8R>$%",%E"$%]
4#G
bfi)S4APIJ=G^



,[ff / :OlOlOl":ffs ( \

Fj

"JM"ficNL$=#O4A=1

$%A8<%NC4#1DB",-"#A",4#G
$%%D



bU"1BN

ff

e*c4##N/$

Rb,)S"8R

;]



eRb

4M1'DX=A*F1=G;4#"

4#$/$%V=&/"8<4#=1/$

4M$E1cO/GhYXP=&
69-$%L&r"8<M"*y8<=1"4#1B4#15

"#X5="#$Hj$)h",P4#1:%$%%N>4M1>"1$%4#G'",4A=1=&. B<}Br~|,{$%=#O/4A=1A15b).PN<61?=O
OR4#$%4#8"$J&=#A=)S$H

Z+ fi8
] e


ffF
/ Ms (

]e

IJ/$%4#G;",4A=1,"#O$;=Y/"4#1N/4M$y)."*",-b.=1=O
%$%4#15<"G
DB#$b.OB$O/"#A*A=).
/"13mEFlS$?$%4#G;",%$']rx:OB",4A=1/$;^
"1/N3eRb"$E<F%-"8<4#15!"TD9#"10",$h"88<=O/1:L=&.DX=$4A4A
4#1:%-"8<4A=1/$hYX).1C&"8<$H3.=1/$-4#Nh",5"4M1T$=-P<"G
DBA&(=G

( :; -

$%8<4A=1Vb/G
D/*T4M1/4A4#"$%",%bB)=5="#$

qfi

bB"1/N/P"8<4A=1/$





wYX54#1/1/4#1/5w=&S/4#$

fi

2fffff$i

:
):
Tff:o ( ff:
Tff:o - ff:
: TIff:

1/"G


2
u2
u 2
u

]D/-

8
(

8

-

8

"N/N

NMe

]



]

e

e




]

e

c",-4#15g?ikjklmklnWjo=1'4#1B4A4#"U$%",%b;5="#$h",'8<=1:"4#1N4M1&"8<h#"*h).=b

2

2

8"O/$4M15h$%#8<4A=1w=& u
( "1/N u
#"*=1/b)k/4#8-4#$"8-/4AN)k4A


2 o\

- 4#1"8<4#=1wM"*=1HIJB4#$*F4A#N/$?1)5=" ",K&r"8<

H?IJh$O/#4#15;DBM"1!4#$
Rb
u
u
u
( b u
-

W2

[ W2 ff:. 2

54AF4#15
O/$/L8<=8<S5="N/4#$%"1B8<E$%4#G;",%L/bB"$SNB4#$%4#1/8<.&=GtmEFlJ$$4#G;",%L&=OH

/ 'gu "u

I2"'}"!"u

rw

yO/$%g?ikjklmklnWjoP$?O/-4#$%4#8$%4MG;",%$bXxcO/",4A=1cbX4#1>"'5N*>$%%R",%5*b%='YXP4#1:%=,
N/O/8<N'4#1'c8<4A=1'acH#^,bc/",N/=:$1/=",k4A$N84#$4A=1B$UYB"8y=1/8<4A/"$G;"N/GH\=G=O
<FDR4A1/8<)S4#E-O/1/1B4#15./4#$W$%-",%5*L=1L=O/W%$%4#1/5J<F"G;DBA$bfi/4#$W)=F$VYX$%W)S1LN/4M$%"1/8<
$%4#G'",%$S",L8"O4#=O/$b/4H HAbB"$SA=)Q"$JD=$-$4AYBAHUj$J"A"N*T$"4#NVbF"1Rzr~
|{/$%x:O/14#"W$%=#OF
4A=1>8"1!1=JYXE$%*c1:$4#N<@84A1:A*H/",J=1'R|,}N/=;4#$J",D/DB#*'$%=G
L%8R/1/4#xcO$%=G;",
g?ikjklmklnWjo-O-1
"$$/=$%=#O4#=1/$"$DX=$$4#YBAHWZ.A=)Lb).SN$8<R4AYXK$=G
)."*c$=&N=4#15
/",H
IJ6BR$%k%8R/1/4#xcO
4#$E"TYBOB4#A_4#1!&(",O-
=&g?ikjklmklnWjo"1/N1B$O$E"G;4M1/4#G;"#4#*
8<-4A%R4A=1T&(=SL#"fiFNDBM"1HIJE).='=/J%8-/1B4#x:O/$J",PO/-4#$%4#8=D/4MG;4A",4A=1/$H

#%$'&($)+*-,.,/10325476'890;:

|.<=<

IJE=R4A54#1/"Vg?ikjklmklnWjo"#5=-4A/GG;",$S<c%1B$4APO/$E=&$%=,8"MAN

$HIJ/$%L",

N/O/G'GP*"8<4A=1/$k/",?$4#G
D9A*DB=DB",5",%&"8<$&=G=1/P&r"8<#"*?%=1<FHk\=?"8-0&r"8<

B

/",h5$y4#1/$%%N4#1%=0$%=G
&"8<#"*b"o?P?lp8<=-$%DX=1/N/4#1/5w%=0/",h&"8<4#$P4#1B$%%N
4#1:%=;"8<4A=13M"*h",E/;$"G
;4#G;y$%DVH
IJ/4#$EoEL?l[B"$E1==L<X8<P/"1"NBN/4#15

B

7B
c

bX"1/N1/==?D/-8<=1/N/4A4A=1!/"1

>

8<=1/$4MNN

Hk1D-&(=-G'4#15;YB"8-:)K",-N$%",-8RbXyo?LEl$?",

O/$%SM4AP"1:*w=/"8R/4AbX4H HAbB=1/L)."*>=&G;",F4#15'"'&"8<k%-OP",k4#G


%='$4MG
DBA*;D04A%-OE&=G4MG


^,H

4#$

M-<=<

f_1ygEiSjlmlnWjohb.4#G
DB#G
1",4#=1PO/$%$"$U"kN/&"O/#V

gB

h4#$";oEL?lDB$%1:&(=S"8R/4AF4#15;"
&r"8<



KR-<OR4#$%4#8,bfi4H HAbfi4#&

bF1!/4#$oEL?l4#$8<=1/$4#N/Nw6B-$%bYX&=

eB

D9#"1/1V%R4A$V$%A8<4M15J=_"#S"8<4#=1/$V/","8-/4#

HE1L#"fiFNE"$%F$b,oEL?l$_

6B-$JO-4#$4#8S1B$O$J"
G'4#1/4#G;"M4A*'8<R4A%-4A=1T&=JL-O-1NTDBM"1"$J&=#A=)k$H

q JHKML
"> <
vWvxu2fuW3T!"u0tC Z~Y::F
. <=<
o>
K g
<
q6
vWvxuguF
6D@ff 6D@Bff
6
GC
B
Cfi

,B

C
|6
F E C =B
]

e-|<{A| :-

.RRr%| Fz{7|,}0c|k

Jk

k

%K|fi-



rFR}/

k q- ?

~<Q~(<,{ fi|:<{#

W~(}:

~{({-}B|,~}|<T|r~,}|;fi<

,}9

nVWOB$V"$$O/G;=D/DX=$4#%bfi4H HAb=1"8<4A=1

/",gEiSjlmlnWjop691/N/$Hh/"
ok=)Lb/w"8<4A=1

"1/N

!B"$PYX1$A8<%N",#"*

[ff / O: lOlOlT:ffs ( \
:DC
F E C
B
GC

K=c88O/-$)k4#8<4#1LDB#"1
L&(=k$%=G
P#"*-$

')k4A

0%=0"8R/4A$%=G
&"8<

/H

",y#"*

^,H

j$/?"#5=-4A/G4#$KO/$4#1/5P?o?P?l$_69-$%$%-",%5*b//4#$K4#G;DB#4A$B",./E4#$1/=oEL?l&=
&r"8<

8<=1:"4#1N4#10"8<4A=1#"*

$%A8<%N!&(=k"8-/4AF4#15

S=)k4#$%bXyo?LEl

H

f_1!8<=1:%-"N/4#8<4#=1>%='B4#$b/"8<4A=10#"*

YX8"O/$%L"8<4A=1

76

1=?"8<4A=1

).=O/#N0/"
YX1

?B

wN=:$k4#1/NN!8<=1"4#1"'oEL?l2&(=k&"8<

y"A"N*w",D/DX",-$J4#1"8<4A=1!#"*

q



H.jk$

!5$k"N/NNYc*

6

H.IJB4#$4#$

:b/4#J",D/DX",-$4#1

fi 9>~20$7`$22

&r"8<k#"*

GHIC
^

?B
L r

HIJ/&(=-bB"'oEL?l&(=

O-1Vb)S4##9YXL4#1/$%%N4M1%=;"8R!"8<4A=1#"*



$##!2F

) JHKC

4#$S4M1/$%%N>4M1>"8<4A=1!M"*

^

^,H

/b9"1/NVbB4#1



#%$'&($'&ON>6'47476QP(RTS;:(UVXWYRT8%60:Z6QP
4A'",YX=",5O/G;1",4A=1Vb4A&.)8"1"8-B4A"&r"8<LYc*O/$4#15">oEL?lb).'$=OB#NN=

\[

/",HIJhxcO$%4#=14#$bB)S/4M8-!"8R/4AE$=OB#N).8R=:=$h)S/11=wo?P?l4#$S"fi"4#M",YBA 3f?4#$
8<"4#1BA*"5=c=FN34#N"w%=!$%#8<P"13"8-B4AP)S/=$%yD/8<=1/N/4#4A=1/$?$%Gq%=!Y_"$%*FFH'\-=G
y5-",DB0YBOB4##N/4#1/5
DB/"$%bX).y8"1=YB"4#1"w$-4#G
DBAG
"$O-h&=?
N/47@8O/#*=&"1"8<4A=1V$
D/8<=1BN/4A4A=1/$K"$S&(=##=)S$H

96 fi8 Z F
+0

N/47@8O/#*9] e

4#$JG;GPYX=&UE&r"8<k#"*k",J4#G;L$%%D

D/-



]:e

IJ/PN/47@8OBA*w=&U"8-"8<4A=108"1>YXP$%k)S1>4Ak4#$K6B-$S4#1/$%-%N>4#1:%='L5R",DBHKO/-4#15
DB#"1<F%-"8<4A=1b&"84#1/50"0&r"8<
&(=y)S/4M8-C1=o?LEl4#$h"fi"4M#",YBAb).T1$4#G
D9A*$%A8<
"1
"8-B4Ac4M15P"8<4A=1)S4A;G'4#1/4#G;"FN/4A@8O/A*HUIS/4#$OR4#$%4#8K).=F$).#B4#1'$4AO/",4A=1B$)SS
",P$-"V)K"*F$J%='"8R/4AL=1/L&"8<b9YBO$%=G
P)."*c$k1N>A$$J<=S/"1=-$H

#%$'&($^]`_JPZ:Z6Qa9bdc(We:Kfg6'b9WYhT8%6QijhY:(6aTb
j$$O/G
g?iSjlmlnjko

@ff

/"$0$%%ANQ&(="D9",-"#AL$




=&;"8-/4#-$",0"4#G;$%%D



4H HAbW"8R/4AF4#15!"8<4#=1/$hB"'YX13$A8<%N&=h"M5="#$P",h4#G
'$%D

^,Hjk$P)",'=1/#*

4#1:%$%%N4#1$%xcO14M"$%=#O4#=1A15b)'$4##U/"w">8-/=4#8<'=13/=)%=#4#1",-4#/'"8

76Dkff

4A=1/$H?c=G
y#4#1/",-4A",4A=1/$k8"1A"N!%=T$=-%D9#"1/$JB"1=/-$HSf&"10"8<4A=1

6o)Dlff



"yD/8<=1BN/4A4A=1

>=&"1=/S"8<4A=1



b1T).EN=
1=J1NT%=;4#1B8#O/N

."N/N/$

4M1/L1)v$%

,6

=&&r"8<$E%=YX
"8-/4#N=1y4#G

$%%D3",R#4AbX54A1/",E).
$%%R4#8<k=O/-$%A$?%=<F8O%

=6

YX&(=-

HISSxcO$%4A=1w1=)4#$bc=)N=h)k691/N"P#4#1/",-4A",4A=1'=&k"8<4A=1B$B",.G;4M1/4#G;4A$

[



=OS1/)[&"8<k$% IJL8<=$D=1BN/4#15yN84#$4#=1TD/=YBAG4M$

B8<=G
DB#%H

!"udmh gnZopqsrtsrvuMo1pwnxt7p
yzr{|pw}%r(o1pwn
<
A~
B~
B0fi~ : :OlOlOs l":" ~
[B ( ;:OlOlOl":FB ( ~ w\
1~[
snR( o1pqsrtsrFu%opwnRx
t7pfi y7r{pw}MrZopwnR e
Tx u2v }/

p^{y(u%oyM
vWvxuguF
nZ opqsrtt7p
yzr{r{|{MrMB By%qy)
_8 ]:
J~
uB}fifi : :OlOlOlo:"
B U E B Q
U :5






B
Q

B
B

H

~
[

U
+ 0

g~
8 + 0 i8 + 0



U 5:
P


l




g?4#1'"E$%

p:<}9<,{{A

p=&-#"ficNwFIJiJf_l.h"8<4A=1B$"1/N;"LD=$-4A4A4#1:%5

&rO/1/8<4A=1

^ -

<F8O4#15;/L$%x:O/1/8<

~(}chz9%<{#<

CHUf$/S"E=1<%=,=1/

>$OB8-/",PT1cO/GPYXL=&kO/1/$",4#$%6BND/8<=1BN/4A4A=1/$L)S1

]_^e

]

e K4M$J",SG
=$%

y-~,~(}c

[~(

W%-,kz9{#

GhYR$/4AD4#$y=Ycc4A=OB$Hm",-N/1$-$
4#$D/=1Y:*%-"1/$%&=-G;",4A=1&=G
q]r1Qs

t]

?e?"1BN0"TDX=$4#4A4M1%5

4A=1

^ -

] ] Fe

]

FB4#A="8-Vbh^`d,aeRHg?4A1v"N/4A-8<%N5R",DB

Cb
xcO$%4A=14#$bVN=:$?/y<F4#$$E"=1/<%=,=1'&rO/1/8

$O/8R/",

]

e

] Feh)S1/]

e

+"1BN$O/8-/",

e%e

I="!54A1N/4#8<%N5R",DBb).TN/<691"0$%y=&S"8<4A=1B$"$y&=#A=)S$H0\=
"8-1=FN

E5-",D9b)hN<691L"1>"8<4#=1!4#1T=OJ$

H\=$4#G
DBM4#84A*
=&UD/-$%1",4#=1b)h4#N1:4A&(*

"8<4A=1/$S)S4AT4#J8<=$%DX=1/N/4M15
1=cN/$HIW='Y54M1T)S4AbF).P$%JD/-]
;HTIJ1VbW&=P"8-CN5]

e

4#1

hb).8<",%T1)A=54#8"&r"8<$


H

q

e

v"N/NV]

e

y&=S"#

"1/N

&=

b

fi

2fffff$i



$4#15/$%;1)A=54M8"&"8<$b).;1=)"N O/$%E"#D/-8<=1/N/4A4A=1"1/N"N/N3#4#$$k%=!<cD/-$$
;8<=1/$%-"4#1:B",L4#$?54A1Yc*yN50]

U :5

U

FeRH'F"*0"8<4#=1

k

4#$?=-N/NYX&(=
"8<4A=1

fi

">#4M1",-4A",4A=1VHhw1N%=!$4MGhO/M",%
;N/47X1/8<
YX).13/;DX=$4A4A=1/$=&

0"1BN

!4#1

U

H;I=

N=/4#$b)>N<61=O/;"8<4A=1/$
4#1"0)."*C$-O/8-/",
/wY94A55
/4#$N/47X1/8<4#$bG
=
O/1/$-",4#$_6BND/8<=1/NB4A4A=1/$E",E)S/1<F8O4#1/5/?M4#1",-4A",4#=1H\4#-$%bF)_DBOB1/4#$/h"#

=

` + 0

"8<4A=1/$S/",S",E=RNNYX&=
D/-]

efi8
e

DB]

0

Bb/Yc*w54Ac4M15yG"1>OB1/$",4#$_69NTD/8<=1/N/4#4A=1H

e

4A'B4#$N<61/4A4A=1b"8<4#=1/$

+

D/8<=1BN/4A4A=1



Q efi8 Q `T + 0
1


aB Q

D@G:

&=

"NBNV] Fe

=RNNY&=

v"N/NV] Fe

"1/N

;4A$%#&

)k4##/"k?O/1/$-",4#$_6BN

b/)S/4MAE=$%h=-NN>",&%)S4##X5k/4#$JDB8<=1/N/4A4#=1"N/NN>Yc*

P1cO/GhYX=&O/1B$",4#$_6BNTDB8<=1/N/4A4#=1/$.)L5kP4#$K<"8<A*

] FeRH

c8<=1BN/A*bc)_54AE")K",-N/h%="8R"8<4A=1w/",4#$=-NN3-<%

U

Yc*wA%4M15
=$%P"8<4#=1/$S"N/N";D/8<=1/N/4#4A=1T=&
"NBNW]

fi8
e

["N/NV]


G:
c` P + 0 @
7 B U
e

&=

IJ/",)."*bF))S4##B"<F"8<A*

e

HE$4#G;DBA*
N=/4#$

b/)S/4M8-T).=O/#NT=)k4#$%E5='O/1B$",4#$_6BNVH

DB]

] ]

U

BHIJcO/$b

U fi8
e

D/]

U `E P + 0 Dl
e


P + 0
&B

^eOB1/$",4#$_69N;D/8<=1BN/4A4A=1/$b1/"G
A*y

&r"8<$J&=S"#V"8<4A=1B$<F8<DBJ=$%LB",S",L=-N/NYX&(=-

U

H

FOBG;G;4#15>O/Dw1:O/GhYXL=&JO/1/$-",4#$_6BNDB8<=1/N/4A4#=1/$E).5&(="!#4M1",-4A",4A=1
",-4#L",




+ 0

B Q B U
] ] Fe

] ]

e

B Q B U
+ 0
1~EWfi8 ~
U :5 eD
U





+

0

+

0
+ :OlOlOlT:;+

]8



^e%e

] ] Fe

PcO/$JN/<691?=OS1)QD=$-4A4AE4#1:%5
\U4#1/"MA*bF)LG;",h$O?/",S"8<4#=1/$

]

D/] e

"N/NW]

jA%=5bB"
M4#1",-4A",4#=1

B

]

B

4#1:%=

&(=]

Fe

PHPN=

B$D/8<=1/NB4A4A=1FK"1/N

U

$



U c`|o+ ( + 0 O: lOlOlT:;+ fi+ #0 (
~

U efi8
e

^e

^eRH

fi#(

(

Q `|o+ (+ 0 O: lOlOlT:;+ fi+ # 0 ( ff :

Q fi8

D/] e

e%e

5S=-NNTYX&=L"8<4A=1/$

/4#$kYc*!4#1/$%-4#15'1)uA=54#8"%$",&*F&r"8<$
"N/N>M4#$%H

]

b).

"N/NV]

e

=&=OS"8<4A=1B$JA"N/$K%='",JG;=$%

O/1B$",4#$_6BNwD/-8<=1/N/4A4A=1B$.4#&

"1/NP=1/A*E4A&
$",4#$%6B$VxcO/4AG
1:$V&=U"SN/4A-8<%NL=D/4#G'"#4#1/",",-"1/5G
1HYcc4#=O/$A*b

~

P"8<4#=1>$%S"1/N



8"1>YXL8<=G
D9O%N>4#1TDX=A*F1=G;4#"4#G;H

?O/$=ADBODX=$%)S4Au#4#1",R4A4#152"1"8<4#=1$%4#1u"8<-"4#1u=-N34#$0%=v"8-B4A2"
$G;"MA;1:OBGPYX
=&EO/1/$",4M$_6BND/8<=1BN/4A4A=1/$b)S/4M8-b.4#1O-1b.G;4A5:'A"N%="3$=%<
#"fiFNT$%=#O4A=1VH -

IS:O/$b:).E",E8<"4#1/A*1=K)S4###4M15L%=yDB"*?D/-4#8</",K691BN/4#15P"1T=DB4#G;"

#4#1/",-4A",4A=1
=&Wk"8<4A=1B$.4M$#4A#*%=y8<=$%b"88<=-N/4M15P%=yIJ=G

cHIJ-k",?"P&)G
F

=FN/$k/=)=18"1",D/DB=4#G;",%y$O/8R"w#4#1",R4A",4A=1bBM4Ah4#1:%=FN/O/84#1/5;"1=RN-4#158<=1/$%%-"4#1:

6 E 6

,6

&(="8R"8<4A=1

6

kB","N/N/$"?D/-8<=1/N/4A4A=1y=&X"1="8<4A=1

b"1/N
%*F4#15?%=L#4M1",-4A

P"8<4#=1/$S$OB8->B",SG;"1:*w=&/$%P8<=1/$%%R"4#1$k",PG
HK?O-4#1/5
=OJ<FDR4#G
1:",4A=1/$b).
&=O/1/NT/",JD9",-"#AX"8<4A=1/$k"N/N/4#1/5"8R>=$JD/8<=1BN/4A4A=1/$K=F88OS$=
-",A*T4#1T=OJ%$4#15
"$%F$J/",S1!",D/D/-=4#G;",4#15;4M$1=J).=>E<X=HPcO/$J$4#G;DBA*'#4M1",-4AE"#V"8<4#=1/$
4#1TP=-NJ*w5k$A8<%NbB8"O/$-4#15
"#G
=$%k1=;8<=G
DBO",4#=1/"=R"N",k"#H

q!"(oAoFZweoZZ mr"](TZMF FZ(M"wFZwmZ(omr;MZA9ZMTO; FFOZcZ"
Z"Z\ ZT wg;"Z(gZG("ZMF; o1r (o; .Goc;g(TA"G""Z9Z(
q



fi 9>~20$7`$22

t&5 r .}&2



$##!2F

r ou

}



;/";4#G
DBAG;1%N=O?=)S1R$4A=10=&Kg?ikjklmklnWjoPb/4#5/A*T=D/4#G;4#N&=E$%=AF4#15w<
#"fiFN3DBM"1/1/4#15w"$%F$HTfP<cDB#=4A$L'&"8<h/",P'DB#"1/1/4M15T5-",DB3=&"!#"fiFN"$%3N=c$
1=S8<=1:"4#1"1*w<F8MO/$4A=1-#",4A=1/$L]rl=DX=$4A4A=1^eRH?OJ4#G
D9AG
1:",4A=14#$J"#$=;/4A5/A*=D
4#G;4#N!&=k-D",%NBA*!$%=AF4#15'DB#"1/1/4M15
"$%F$?)S/4#8R!"#$/",y$"G
y$%?=&"8<4A=1/$

M{ 8 Z~ :;+:F

"$%F$

]

eK"$kN$8<-4AYXNT",JPY54M1/1/4#15=&/4#$$%8<4A=1VH





l#"1/1/4#1/5"$>$%DX847698",4A=1/$SO/$O/"##*8<=1:"4#1$=G
P=DX-",%=$8-G'","FbX"1BN>"'$%k=&8<=1F
$%"1:$Hf1/$"14#",4M15/y$-8-G;",">)S4A0
8<=1/$%"1:$E*F4A#N/$k;"8<4A=1/$?%=/"$9H
?O
$%*F$%%G4#1B$%"14M",%$"#F=DX-",%=$8RG;","h4#1y"E)."*
$O/8-yB","#b"1/N;=1/A*b"8R/",YBAS"8<4#=1/$
",EYBOB4#AHiJ"8R/",YB4##4#*w=&"1>"8<4#=1>LG
"1B$/",b/)S/1$O/88<$$4#A*w",DBDBA*F4#15=DR",%=-$
%=
E4#1/4#4#"9$",%bB"#=&WL"8<4#=1$KD/8<=1/NB4A4A=1/$.",D/DX",1OB"#A*HE1TY9O/4##N')S/",
).?8"MB?8<=1/18<4#c4A*'5-",D9HIJ/4#$5-",DBT8<=1/$4#$$=&).=yM"*-$bF=1E8<=1:"4#1/4#1/5"#]"8-
",YBAek"8<4A=1B$bW"1/N0
=L"MK]-"8-/",YB#ek&"8<$Hy\=Gq"8-3"8<4A=1VbV;",yDX=4#1:%-$%=
"#.D/8<=1BN/4A4A=1/$b"N/NC<8<$"1/NNA%<X8<$HCj#.=&k\U\.$;8<=G
D9O",4A=1/$
",T<@84#1A*
4#G
D9AG
1:%NO/$-4#15PB4#$5R",DBT$%%-O/8<O-HU\/=E$OYB$%xcO1:A*;N$8<R4AYXN'4#G
D9AG
1:",4A=1'=&
#"fiFNg?ikjklmklnWjoPb).L=1/#*1N/L4#1&=-G;",4A=1",YX=OKD/8<=1BN/4A4A=1/$K"1/N!"N/NT<8<$H
j$K"PM"ficNDB#"1/1B4#15?5-",DBwN=c$.1/=8<=1:"4#1T"1*;<8#O/$-4A=1;M",4A=1/$bcS=1BA*;4#1&=-G;"fi
4A=1=1/P1N/$S%=;D/$1S4#J",P)SB",)8"#;{A|,<h'<'--R~z9RbX4H HAb/&=J"8-&"8<k=
"8<4A=1b:S1cO/GhY=&/6B-$%M"*",)S/4#8R;4A",D/DX",-$4M1
J5-",D9H"#AN
=1;"14#1:%-G
<

{ 8 Z~ :;+:F

B
M6


N/4#",%"$

]

eRbc=O-$-4A=1
=&Wg?iSjlmlnjko8<=G
D9O%$$S#"*.G
GhYR$/4ADB$

Yc*O/$-4#15?J&=#A=)S4#156/FDX=4#18<=G
D9O",4A=1HIJJM"*G;GPYX-$B4ADB$=&"#F&"8<$."1/N;"8<4#=1/$
",4#1/4A4#"M4AN%=

H\=."8-w"8<4A=1bcS4M$"#$%=h"P8<=O/1:%bc)S/4#8R;4#$4#1B4A4#"#4AN%=FHIJ1b

MBEDE+

&r"8<J#"*Sy4#$.YBOB4#A4MG
DB#4#84#A*hYc*$%4#15yE#"*kG
GPYX-$-/4ADw=&"#&r"8<$
4#G
)S1"w&r"8<
1cO/GPYX=&



J6

4M$.691/4#$/Nb"#V"8<4A=1/$k$8-/N/O/ANT&=k$%%D

W



/"P4#S#"*G
GhYR$/4AD

b/"1/NT4A"N/N/$b/4A&W1=J"A-"N*'D/-$%1b/",-EDBOK%=;L#4M$%=&U$8RN/O/ANw&r"8<$&=J



1<FK&"8<#"*S",K4#G
?$%%D
$%%D

4#$?"wD/8<=1BN/4A4A=1

"8-$;T%="

c$hDB8<=1/N/4A4#=1/$b !4#$hDBOh%="0#4#$L=&S$8RN/O/ANC"8<4A=1/$&=h/w8O-1y#"*H

jk&(%"
&"8<#"*
$%%=

B
6

35$L4#$M"*LG
GhYX-$/4AD0$%bW"#U"8<4A=1B$k=&)S/4#8R

5
4A
8<=O/1:%'4#1B8<G
1:%NHj$
$%=:=1"$y>8<=OB1%
&=;"1"8<4A=1

%=;FH"8R

^,Hm"F4#15691/4#$-N;)S4#"8<4A=1M"*



b/"#$8RN/O/ANw&r"8<$",

^E/"L4AG
GhYX-$/4ADT$%bB"1BNw$=
=1HIJ?D/=F8<$$8<=1:4#1cO$JO/1:4#X"#5="#$J/"

"0#"*;G
GhYX-$/4#DA=)y/"1



H0fy$=OB#N3YXT1=4#8<Nw/",/4#$hc4A)=&SD9#"1/1/4#1/5

5-",DB!YBO/4#MN/4#158<=$%DX=1/N/$S8A=$%A*w%='h8<=G
DBO",4A=1!=&L).4A5:S,"#O$J4#1!m?FlHBIS=$%
8"13YX'8<=G;DBO%NYc*",D/DBA*F4#15T'"8<4#=1/$h4M1#"*-$"$P",YX=bUO/DXNB",4#15T)4#5L,"#O$h"1/N
D/=D9",5",4#15ES8R/"15$"8-4#G
J"1;"8<4A=18<=G
$4M1b"1/N;$%%=DBDB4#15?)S1'1=L8-/"1/5$=F88O
4#1
"LM"*Hm"F4#15?691B4#$NJ-#"ficN;-$4A=1
=&DB#"1B1/4#155-",DB
Y9O/4##N/4M15bfi"P$4#G;4#M",-A*E%-4AF4#"
-$4#=1=&gEiSjlmlnWjoh$S$%=#O/4A=1T<c%R"8<4A=1!G
8R/"1/4#$-Gt4#$4#1:=NHKFL\4#5OPcH
f_1/$%%"N=&DBO%4M15'"#W5="#$?4#1%=P%=D#"*E4#10g?ikjklmklnWjo$%*FAb"1/N!1!DB=DB"fi
5",4#15E/GN=)k1yY:*O/$4#15?oEL?l$%6B-$%b"8R;5="
",



$K69-$%#"*

"8-0#"*









4#$U$4#G
DB#*EDBO4#1:%=L"?5="/$%

HIJ1bF-?4M$"h&=%1<FJA=c=DN=)S1T&=G

b9"1!"8-B4Ac4M15'"8<4A=1!)S4A>#"*kG
GhYX-$/4#D



XA=F8",%N

?%=D>%=
/?4M1/4A4#"#"*HjK
^E5$$%A8<%N&=J"8-&"8<4#1

w8<=$%DX=1/N/4M15T5="$%HTf&K'4#$PG
='B"13=1w$O/8-"8-/4#b"!YX$%L=1w4#$EDB4#8-N
"88<=-N/4M15%=>N/47@8OBA*/O-4#$%4M8,HIJwD/8<=1/NB4A4A=1/$y",DBO/4#1:%=4A
8<=-$%DX=1/N/4#15
5="$$H"8-4#G
;"1"8<4#=14#$L$A8<%NbU"#U=&4A$L"N/N/$P",'G;",N%-O'",P4#G
$

r

^,HIJ?G;",J",K4#G;





"1/N

D/-1$"8R/4A-$K%=yYX$A8<%NT&(=K&r"8<$K/",",E"A"N*'%-O

q;

fi

2fffff$i

1F ;D
xGl 19)
T@
1 F

J <19 $ 6
9!fQ?1s)
<1 G\ ' Yi961 ( ff <wW?Y9
Q e ' r 1i961" B TW<69 2 1l e

.9 'i961 .1'l9)
z7
Q Qe '
1J $ 19 ( `

Q










fi

\U4A5O-E iJ#"fiFN>DBM"1T<c%-"8<4#=1

]

"1:*:)K"*H>0",F4#15!",h4#G


fi

^'"$$O/G
$P/",h"8<4#=1/$h",-#4#1/",-4AN4#1/;=-Nh*5

$%A8<%N JjD/8<=1/NB4A4A=1>B",k)K"$?"8-/4AN0Yc*>"1"8<4A=1""N4M$k1=?8<=1/$4MNN!"$?"1)
5="H



U



[




ff








F

ff

f_1/4#$J$8<4A=1bB).P4#1:%=FN/O/8<L\U\.$JYB"$h$%",-8R!"A5=R4A/GHhN/4#$-8O/$$KP"#5=-4A/G$J=,
4#8"VD/=DX4A$K5",RN/4#15
8<=G
DB#%1$$bB"1BN>N-4AL\U\.$J=-"#$%",-8-$%%-",%5*H
f_1!69-$%Tm?Fl

R$4A=1]rZ.=1!s

g<X1/bh^``eRbEmEFlS^0"$T)."$OB$%N4#12/0jkflK:

^``8<=G
DX4A4A=1b$",-8-C$%%-",%5*4M$P">,",-4#",4#=13=&J/4#M78#4#GhYB4#15b"A)K"*F$$%A8<4#15=1
YX$%L$O/88<$-$%=L%=>;$",%'4AL4#$E8O-1#*!&r"84#15H
Z.8"O/$%'$%",%fi"MO/",4A=1/$E",;8<=$A*bW).
"#$%=>8R=$%
%=>O/$;A=c8"U$%",R8-b4#10;=DXy%="8-5="$%",%$E)S4#"$?&(),"#O/",4#=1/$E"$
DX=$$4AY9AHh$%%AN&=P">N/4A1:L$%",-8R3"A5=-4#/GbW"1[_1/&(=-8<NB&(=RG=&.B4##78#4MGPYB4M15b
)S/4M8-v8<=GhYB4#1$A=F8"E"1/N[$*c$%%G'",4#8$%",-8RHIJ$%%R",%5*[4#$G
=4A,",%NvYc*3$-4#G
DBA
$%%-OB8<OE/",J/L$%",-8-$%DB"8<$S=&=O/J%$%4#15
YX1/8R/G;",F$K%1/N%=w/"H

)#` u2vo5 MyE ' 5 '} #w
=4#15DBM"1/1/4#15Y:*0O-4M$%4#8h&(=)K",-N$%",R8-b;$%",-8R3$%DB"8<;4#$?/;$%DB"8<
=&K"#U"8-B",YBA
$%",%$b:%=5)k4A4AO-4M$%4#8fi"#OB",4A=1HUoS=)Lb,"#O/",4#1/5$%",%$4#1=O%$%4#1/5YX1/8RF
G;",F$E)S4#;OR4#$%4#8yN<691/NY:*xcO/",4A=1cb=1
=&%1691/N/$/",h;$OBA4#15T$%",-8R
$%DB"8<$",S$4MG
DBA4#1
$%%RO/8<Obc$%DX847698"#A*bB",A=F8"/G;4#1/4MG;"?"1/N
DB#",%"OB$%1/N;%=PYJ$-G;"#H
\=S"1:*T$%",-8-$%",%b/L1/<cJ$%",%P)S4AT$%%-4#8<#*'YX%%SOR4#$%4#8Sfi"#OB",4A=1>4#$KO/$OB"#A*;=1/#*
"w&()$%%D9$E")K"*]r"10<F"G
D9Ay&(=?/4#$?4#$yMr-EN=G;"4M1N$-8<-4AYXN4M1c8<4#=13cH#^,H#^eRH
?O?4#N"w4#$k%=TD-&(=-G<FB"O/$%4Ay$%",-8R&(=?YX%%L$%",%$HLIJ"A5=-4ABG4M$k$/=)S104#1
\U4A5OPcH
n4A/4M#78#4#GhYB4#1/5b"A5=R4A/G

N/DB4#8<%N24M1\U4A5O3$%",$=Ow4#104#1/4A4#"$",%H

+

IJ1VbV&"84M15>"14#1:%-G
NB4#",%;$%",-8R$%",%

.b">8<=G;DBA%;Y/-"N6B-$L$%",-8-$%",4#1/5>=O

q



fi 9>~20$7`$22



$##!2F




=("'G 17
6 69 ff1X
f196
q7f
6 % <1 %


11
v 61P 91 B7> Z
1 P1Y1`11 % 1`91P619.


=("'
6 B6P?16x1l1`9q.


fi

\U4A5O-P IJE1&=-8<N>B4##78#4MGPYB4M15P"A5=-4#/GH

&=G

+

a+J

Q4#$4#1:=NH0IS/4#$?691BN/$LT8A=$%$hYX%%y$O/88<$$%=b4H HAb/w1",-$%$",%

)S4A

$%%-4M8<A*LYX%%,"#O/",4A=1b=&r"4##$Hf_1J#",%%8"$%b:)S=AK"A5=-4#/Gu&"4M#$b4#1K&(=RG


+ |+

8"$%byDB",&(-=G
5="W$",%



%=

U4#$?"N/NN%=
8O-1EDBM"1b"1/N$%",-8R34#$?4A%-",%NH13"

"'$%",%h)S4AT,"#O/",4A=1!



4#$K"8RNb9$",-8-$%%=DB$H

?O/U4MG
DBAG
1:",4A=1=&Y/"Nh6B-$U$",-8-;$",4#15?=OU&=G

+

4#$U$%"1/NB",-Nb)S-K$",%$

a+

",;DBh4#1"x:OO/HT?1;$",-8-C4A%-",4A=13G
=$h
69-$%L$%",%

U&(-=G'xcOObU"1/N

+

,"#O/",%$4ALYc*0RO/1/1/4#1/5g?ikjklmklnWjoPHf&Kfi"MO/",4A=134#$PYX%%P/"1/",P=&

]+J

$O/88<NB$H.-)S4#$%bFP$-O/88<$$%=-$J=&

.bU$%",-8R

",PDBOK%=;L1BN=&/Px:O/OHiJDX",%N!$",%$

",;"=4#NN3Yc*!D94#15>">/"$-",YBA
=&.c4#$-4A%N$%",%$P4#1G;G
=*H
f&1=>1)$",%$P8"13YX
"8RN!"1:*cG;=b/Y/"N/T6B-$%J$",-8-!&"4#M$H

) /Yu}2





3T3

f&K4M1=14A%R",4A=1Y/"N/6B-$L$%",-8-&=P">YX%%h$",%&r"4##$bW131&=-8<N/4##78M4#GPY94#15
$%%=DB$S)S4A=O/691/N/4M15
"'$%=#O/4A=1HKIJ/4#$8"10/",D/DX1YX8"O/$%h=1/8<P1/&(=-8<N/4##A8#4#GhYB4#15/"$
8-/=$%1%=!4#1B8#O/Ny"1"8<4A=14M1/
DB#"1bV4AL1/L",$L/4M$EN84#$4A=10YB"8-9H;IS;G
=FN4#$
&=L=1BA*8<=G
D9A%L=1"$%F$J)kL1=
&r","#A*w)J=15;N/84#$4A=1/$8"1!YXLG;"NHIJ$P",
L"$c$B",SN='1=J8<=1:"4#1%N"N>1/NB$H

!"u y% $d# * Z~::F

mj
+ 8 PR"Q SqUrVYX =:m
-F )fi&d PRQTSTUWVYX Z+:m .L]

-

,+

e-|wz9{7|}/}/~}:|,- |

.k

1/N~ ~rS~(;%-|<F|<{#|,}90}> /}9RT%|r~,}|<~ 'Fy:|,{B%,
]

heL|,}

]



~(T-|{({#3|>N"N

Y> - q-> E fi

~r k~ r

J~

o",O-"##*bB"
"$%4#$J8"MAN>N"NF1BN&(-P4A&4#SN=c$J1=S8<=1:"4#1!"1:*N"N>1BN>$%",%$H.
G;",-L/",UYX4#15kN/"NF1/N&(-K4MG
DB#4A$$%=A,",YB4##4#*b,"$U=)S4#$K4#1/4#4#"$%",%J4#$%A&).=O/#N
"A"N/*YXL"
N"N!1/NH

vWvxu2fuW3T!"uf} { 8 Z~::F
r<
vWvxuguF
,+18 PR"Q SqUrVYX =:m


~{({%{~('<~}:

]

-RL M{

e
-
|Pz{7|,}B}/~(}c>|fiR

~{({}9|'<,{r~r,}

(

(>

~(-|,<}9?- F}<},%R

jk$-$O/G
h1&(=R8<N0B4##78#4MGPYB4M15N/=:$?1="8-/h5="HEIJ/1!).
/"
$%=G
y4#1:%%

G
N/4M",%$%",%

]

heRb YX4#1/5;
8O1:SD9#"1b)ShY/"N6B-$k$%",-8R8"1

1=J4#G;D/=P=1L$4AOB",4A=1Hok=)Lb

Z+
] e

'"$J$%",-8R!/"$J1/=S$%%=D/DXNT*Hf&W/L)K"$S"

q



fi

_+
Z+ R8
?+

DB",&(-=G
=Y/"4#1

+J

3%=h$%=G
5="$%",%

]

e

E_ Z+



$=)S4#15y/",

2fffff$i

(bc1w8<=G
DBA%kY/"N;6B-$%$",-8-w).=O/#Ny691BN
/",.DB",b

] eRb"1/N3%RG;4#1/",%D=$-4A4AA*H>FO/8R">D9",8"1&=1/=P<4#$%b



4#$";N/"N1/N>$%",%4#18<=1:%-"N/4#8<4A=1>%=;P"$$-O/G
D/4A=1VH



G;",0/",Pl=DX=$4A4A=10!=MN/$?=1/A*0)S1

Z+ ]8

1cO/GPYX-$W4#1/8#O/NB4#15Fb,)S

,&df+

] e 47

4#$E"&rO/1/8<4A=1&=Gq$",%$P%=!1B",O-"

.HUIJDB=DX=$4A4A=1L4MN14A6B$V"S8M"$$W=&D9#"1/1/4#1/5

"$%F$)SL).y8"1$",&A*>",D/D9A*1/&(=-8<N0/4#M78#4#GhYB4#15H.k1/&(=OB1/",%A*b94#k4#$kl.FlXjSK/",-N
%='N84MNE)Sk"y54A1>DBM"1/1/4#15h"$%TYXA=15$%=;B",S8#"$$H

!"udh

Z@Kv



k

kP

{h8 Z~:=:F A{
@JKB

g?4#1>"
DB#"1B1/4#15"$%

x

u2v }

vWvxuguF



y-~,~(}cy

]

k

UeRb94#$

P

N

~(}cPz9_:<{#<

\[

N"N1/N&



~(.F

q-

_R,kz9{#

m",-N/1$$4#$
D/-=1Yc*DX=A*F1=G;4#"##*N/O/84#1/53lnWjoEFjI

A{


~
~ ( fi8 ~`|T6fi8}[:=:v;

N84#$-4A=1TD/=YB#G=&U)S/

4#$$%=#fi",YB#

$-4#G
DBA*"N/N"1=DX-",%=%=
4#1/4#4#"X$%",%H

6
{ ( 8 Z~ ( ::F

jkD/DBA*F4#15

<

v}9y<,{{A

]rZ.*F#"1/NbE^``fi:e



/

%=
LD/-=YBAG=&N84#N/4#1/5?j?ok\ikSH

/",4M$y<c8O",Y9A!4#1"#S$%",%$b"1/N<$",YB#4#$/$


96 bA\F

"N/NV] e

7{

%=!"1:*$%",%
"8-B",YBA;4#1

fi

tA"NB$?YB"80%=;4#1/4#4#"$",% L"#&"8<$P/",L8"1

SYX8<=G
P%-OP",PG
=NVb9"1/N/=$%P4#1Th4#1/4A4#"X$%",%",P"N/N/NHok=)Lb//PG
=FN/476BN
D/=Y9AG

]

E{

eK4M$JN"NF1/N>&(L4A

{ (
M{ (

4M$$%=A,",YBAH\=G+A&%='-4A5:b/4A&

{

1/N'&(bc14A4#$$%=A,",YBAb)k/4#8-'4#G
DB#4#$U/",

4#$$%=#fi",YB#b:"$)/"?1="N/N/N'"1:*;1)

{

DX=$$4AY94##4A*;=&"8-B4#15'/P5="HS\/=GR4A5S%=wA&b94#& 4#$S$=Afi",Y9AbB1"#$%=w4#$



$"G
$%=#O4#=1DB#"1

4#$SN"NF

{ (
,

;HJE1L8"1!/1bB&=G"MV$%",%$?4#1

%=;h4#1/4A4#"$%",%h)S4ATP1/)[=DX-",%=b/"1/N<F8O4#1/5

bBYc*

b9"8-B4Ah/L5="WYc*5=4#15'YB"8

",&%H

GPYX-$-/4AD>4#1lKFlXjSK2&=#A=)S$K&=GtE&r"8<SB",SlnjkoEFjIQ"1BN>4A$J8<=G
D9AG
1:S",
YX=L4#1ElKFlXjSKJHjC1=1FN%RG;4#1/4#$4#8"#5=-4A/G/",N84#N$/8<=G
DBAG
1:V=&F?jokk

,+

\UiS"1BN!/",?1N/$k=1/A*DX=A*F1=G;4M"$%DB"8<y8"1YX$%DX8476BN>"$&=#A=)k$Hg?O$-$k"w$%",%



+

.H

-4A&*4M1DX=A*F1=G;4M"$%D9"8<
/",

4#$"8-B",YBA
&=G;4#1/4#4#"W$%",%H
\/O/bVR4A&(*!/",

h5="8"1/1/=SYXE"8-/N!&=G

KH.f&U/4#$J"#5=-4A/G+$O/88<N/$b4AJ&=#A=)S$J/",kP4#1B$%"1/8<

4#$K1=JN"N1/Nw&(



$4#1/8<

+

+

C8<=1/$%4#O%$"
N"NT1/NHIS/4#$.4#G
DB#4#$/",J?j?ok\ik

4#$4#1ol.ljSJbB"1/N!1/8<L4#1lKFlXjSKJH



IJ/=O5).8"11/=L<@84A1:A*N84#N
)kh">54A13"$%34M$LN"NF1/N3&(bw",



"$4##*0%$",YBA$-OF@84A1:h8<-4#%-4#">4#13#4#%-",OH

=/1/$$%=13"H],ehN<61'"!1/=4A=1

=&,'rR~KDB#"1B1/4#15L"$c$b)k/4#8-w4#$K$OF@w84A1.&=KN/"NF1/Nw&(-1$$bFYBOK8<=,ol8<=G
DB#%H
IJ*
"#$=L54AS"PD=#*c1=G'4#"F$OF@84A1:8<-4#%-4A=1
&=$%*FG;G
%-*HUIS/4#$4#$bc=).bc*
%-4AF4#"H
m",-N/A*?"1*E=&/8O-1VYX1/8R/G;",F$&rO/769M#$X4AHE=c/A"1/NPmk=,G;"1/1],"e/".N/<691N

k

1=4A=1B$=&~(} ,<<r~<{#DB#"1/1/4M15L"$%F$



k

$O@84A1:.&=N"NF1/Nw&1$$bF"1BN~} <Rh|r~,}



$OF@w84A1&=?4M14#YB4##4A*b9O/1BN8<-"4#1$%%-4M8<4A=1/$HEIJ<4#$%%1/8<y=&4#1:-$%
"8<4A=1B$bV"1/N
$OF@w84A1k8<-4A%-4#";&(=h"NBN/4A4A=1/"V$%%-4#8<4#=1/$bB8"10YXPN84#N/N!4#1DX=A*F1=G;4M"X4#G
HJ0"1*
YX1/8-BG;",P"$c$N/=b4#1&"8<b:&OB769#=$%S8<-4#%-4#"?"1/N
8"1
cO/$U<@84A1:A*hYKD/-=1;N"N1/N
&H

qT

fi 9>~20$7`$22



$##!2F

?1/k8<=O/#N"N=D/.E=:BA"1/NwmS=,G;"1/1V$G
=FN=A=5*b"1/NO/$%kS<4#$%%1/8<k=&V4#1:-$%
"8<4A=1/$K%=
-8<=51/4ALN"NF1BNT&(?"$%F$Hf&W/%$&"4#M$b:=1/L8<=O/#Nw1TG
DB#=*"yN/4A1:

Wfi

$%",-8R!$%%R",%5*/"11&=-8<N>/4M#78#4#GhYB4#1/5HVh/"P)=;-"$%=1/$J&=L}95=4#15
/4M$)."*



1y"G
=15$%=OWYX1/8R/G;",F$bfiK",."$%c$/",UN=k1/=8<=1:"4#14#1R$%"8<4A=1B$bYBO
",-P1#$$SN"N1/N&Hj1<"G
DBAL4#$JwUA<fiU-
N/=G;"4#1b)S/E1&=-8<N
B4##78#4MGPYB4M15PA"N/$J%=;<F8<MA1S$O/A$H



1&=-8<N/4M#78#4#GhYB4#1/5w8"1=&(%1CxcO/4A%'$OB88<$$%&rO/#A*$%=A"$%c$h/",N=8<=1:"4#1CN"N
1BN/$b"$K4A.N/=:$1=K18<$$-",-4#A*;58"O5:J4#1=1HF"G
D9A$&=K/",J",?8<=1"4M1N4#1
/P/R_!"1/NTX-MN=G;"4#1B$bF)S/4#8RT)L)k4##XA=c=w",S4M1!c8<4A=1!cHcH#^,H

IJS=YB$%,",4A=1
/",&(=RG;$SYB"$4#$&==O/)K"*
=&N"#4#1/5E)S4A;8<=G
D9A%1$$4#$J&=#A=)
4#15Hf&B1&=-8<N;/4M#78#4#GhYB4#1/5J8"1;1=$%=AJ"?D9#"1/1/4#1/5S"$%b:4AO/$-O/"#A*E&r"4##$*yx:OB4#8FA*H?1
8"13/1$4#G;DBA*$)S4A8-3%=">N/4A1:P$%",R8-"#5=-4A/GH/"'<FDX-4#G
1:%N)S4A3-"1F
N=G;4#4#15;1&=-8<N0/4##A8#4#GhYB4#15b"1/N0N=4#15w";$",k)k1!=1/",%%G
DBk&r"4#ANHkIJ/4#$kN/4#N/1
A"N%=;8<=1:F4#1/84#15y$-O/A$HIJ/=O5T)E%R4AN";#",5E,",-4A*=&-"1/N/=G;4A",4A=1$%%R",%54A$b/).
N/4#N!1=J691BN!";D9#"1/1/4#1/5"$!4#1=O%$%4#1/5N=G;"4M1/$)S-P=1h-"1/N=G;4#N>$%",-kN/4#N!$4A5,
1/4768"1A*YX%%S/"1!LD/F4A=O/$K=1/bB4H HAb9"M",%%G
D/$$OFXN&=GP$-"G
LD/=Y9AG;$H
IJw"$%F$y/",y1&=-8<N/4##A8#4#GhYB4#15N=c$y1=$=AT-4A5:")."*",-T",DBDB",1:A*$%=&rO/#=&
N"N1BN/$/",J=1/P8"1!1=k"=4#N!=$%PN"N!1/N/$",k-"1/N=GH/"h&=P",R"15N

Ofi

=OJ=-"#$%",-8-$%%-",%5*4#1\U\"$J&=#A=)S$

^,HS=;1/&(=-8<N/4##A8#4#GhYB4#15POB14#P5="W4#$K"8RN>=kL"A5=-4#/G

&"4M#$H

cHJf&1&=-8<N/4#M78#4#GhYB4#15y&r"4#ANbX$%F4AD0*:B4#15TN=1y$%=&r",E"1/N0%*>%=$%=Ay"$%
Yc*;"8<=G
DBA%?O-4M$%4#8$%",-8RT"A5=-4A/G>Hf_1;/8O-1.4#G
DB#G
1",4#=1b/4M$4#$)S/",
ikO/$$%X"1/Nok=F4A5!]_^``aeK%RGt-T-<rR$%",-8RHIJB4#$K$%%-",%5*$4#G
D9A*
<cD9"1/N/$
"MV$%",-8R!1=FN$KYc*w4#1B8<"$4#15y=-N/J=&U5="WN/4#$"1/8<E$%4#G;",4#=1H
I=>$O/G;G;",R4Ab\\O/$$k1/&(=-8<NB4##78#4MGPYB4M15;"$?
YB"$%
$%",R8-3G
/=cNb"1/N"T8<=G
D9A%
YX$%_6B-$h"A5=-4#/Gq%=N")S4A=$%T$%DX84#"8"$%$)S/'1&=-8<NC/4##A8#4#GhYB4#15T/"$h-O/1
4#1:%=;";N"N1BN>"1/N&r"4#ANH

Fd 2
2



ff ff

U

ff

U

f_1/4#$
$%8<4#=1bK)!4M1%=FN/O/8<T)=CO-4#$4#8w%8-/1/4Mx:O$;/",'8"1bK4#1D/R4#1/84ADB#bYO/$N%=

fi

D/-OB1?L$%",-8R!$%DB"8<h4#1"1*T&=)K",-N>$%",%$%DB"8<P$%",R8-!"#5=-4A/G

g

^,H

<{ zF{S|r~,};$%A8<$w"3$%=&?D/=G;4#$-4#15$O/88<$$%=R$;%="$%",-8-$%",%Hjk$'))S4##

N/G
=1/$%%-",%04#1c8<4#=1cHcb!/O-4#$%4M8w4M$'8<-O/84M"&(=\\.$DX&(=RG;"1/8<>=1G;"1*
N/=G;"4#1/$H

cHk-
|{<{#r~,}w8O$=OY/R"1/8-$J)SE$%=G
P5="V/"$J",D/D9",1#*'YX1"8-/4#N
%=c=C",-A*H[I$%4#15O/-4#$%4#8,b.).&=O/1/NB",w4A8"12*F4A#N$"F4#15$'=12"$%F$/",
8<=1:"4#1!5="V=-NR4#15$b"1/N>B"$J1=
<X8<S=1"$%F$JB",SN=1 H

qo

fi

2fffff$i

Z.=T%8-B1/4#xcO$",-k=Y/"4M1NT"$."$4#N/S<X8<=&WO/$4#1/5g?iSjlmlnjkoQ"$"hO/-4#$%4#8J$%47
G;",%=U4#1?G'"1/1N/$8<-4AYXN?4#1hc8<4#=1LHUjk#$=bYX=E=&FGpN=L}9D/$%-8<=G
DBA%1/$$
=&J"1:*3*cDX=4#8"&=)K",-N$",-8-H!f18<=1:%<c=&=Oy$%",-8R"A5=R4A/Gb)w4#1:%5-",%
G$OB8-/",/*'D/-OB1k/L$%",-8-!$%DB"8<L4#1wL$4M15A1&(=R8<N>/4##A8#4#GhYB4#15?%*
4#$k1=k8<=G
D9A%h4#1!51-""1*c)K"*
4A&1&(=R8<N!/4#M78#4#GhYB4#15E&r"4#ANVH

m#


2 45ouc3
+
+



I=T"$",%





)S/4M8-

"1/N8<=G
DBA%#*wO/-1>G+=,N/OR4#15
YX$%_6B-$S$%",-8Rb

]Z+eS=&"8<4#=1/$?/",L$%G%=TYX
G
=$%?D/=G;4M$4#15'"G;=15

.b)
N<61"T$%

"8<4A=1/$U",D/D9#4#8",YBA4#1

KHIJ/%8R/1/4#xcO4M$NR4ANPYc*P/"c4M15"8A=$%A=c=P",U.#"fiFNPD9#"1/$

/",;g?iSjlmlnjko

<F%-"8<$=1C$%",-8-$%",%$y4#1=O%$%4#15"$%c$H0.=1/$4MNL.-/R

N=G;"4M1bW"$L4AE)K"$POB$%N4#1!^``!jSf_l.D9#"1/1/4#1/5w8<=G
DX4A4#=1H
IJ;",').=>=c=G;$bj
"1/NZbB"1/N"'8<"4#1>1cO/GhYK=&YB"##$bc)k/4#8-",-L"#4#1T=c=Gjp4M1/4A4#"##*;"1/N$/"#XYXEG
=N
4#1:%=T=:=GZHVIJ/D9#"1/1?8<=1%-=#$L"T=YX=b)S/4M8-8-/"1/5$E=c=G;$?c4M"/
"1/N!)S/4#8R/"$J)=w5-4AD/DX-$.%=

2Y5oz

=

2





}u

=DR",%=b

YB"#M$H"8R!5R4AD/DXJ8"1!=MN=1/A*w=1PY9"#",

vxu

"4#G
HJyA=c=>","w$G;"#W"$%>)S/h'YB"##$kGhO/$SYXhG
=N4#1%==c=G+ZHVF"*>/P=YX=

2JY5"z
#vxu2

/"$k"A"N*

N0OD!YX=!YB"##$b/4H HAb4#1>h8O-1k$%",-8-$%",%bh=YX=k4#$k4#1=c=G+jhb

fi }u

"1/N"8R05-4AD/DX=#N/$J=1LYB"#HIJh",Lh",D/DB#4#8",Y9AE"8<4A=1/$4#1T/4#$J$",%
=c=GZbc=



%=

=1/k=&V/SYB"#M$YB"8-4#1:%=P=c=GjPHFIJk#"fiFN$%=MO4A=1/",=O/.O/-4#$%4#8

<F%-"8<$k4M$KL&=#A=)k4#15H

E



}u



2
2





juZ

b

vxu

YB"#^?ZvA&b

vxu

YB"#MZ-4#5

?

IJ/4M$S4#$k"'DB",R"#AV-#"ficNDB#"18<=1/$4#$4#15'=&).=w4MG
h$%%D9$HkIJ/h"8<4A=1$%?$%A8<%N",?



6B-$P4#G
T$%%D8<=1:"4#1/$w=1/A*"8<4#=1B",yG'",$
$%1/$%T4#1$%",%",yB"1/Nb z
} u %=
=c=GZHE&=EDBO-$-OSL4MN"P=&$%%R4#8<4#15E"8<4A=1>8R=4#8<L4#1T"1:*'DB#"1B1/4#15$%",%
%=>=1/#*=$'"8<4A=1/$P/",P",'$A8<%N4#13y6B-$%E4MG
;$%%D=&K'#"fiFNDB#"1H
w8"#
$%''"8<4A=1/$L/",h$%Gq%=!YX
AD/&rO/Hyf_1;",YX=<F"G
D9A;$%",%bU/4#$E$%%R",%5*38O$
N=)S1EY/R"1/8-/4M15y&"8<%=&(-=GE%=;=1/H
c=G;4#G
$bfi$%%-4M8<4#15J=1$A&F%=S=1/A*?."8<4A=1/$W/",",-$%A8<%NYc*/#"fiFNLD9#"1/1
8"1YX?%=:=;GO/8RH..=1/$-4#NK?&(=MA=)S4M15
.Fc-r
<"G
DBAHKF"*w)LOB$%?E)M9F1=)S1
D/-$%1",4#=1)k4A!&=O=DX-",%=-$b

3O5"z c 3O5"z J2 Y5"z 2
2Y5oz 2
b

b

8<=1:%=#$P"$4#15#-=Y=h",-GbU"1/N;=DX-",%=R$h8"1Y;OB$%N3%=
"1==1b

c 3O5"z

">Y9A=c8-B",P'",RG
bW"1BNYBA=F8F$Pj

">YB#=c8-&(=G
4#$L/=#N/4#15



u

"1==1b



2 #u
3q5oz

"1BN

HIShD9#"1/1

=1;Y9A=c8-=1%=D=&

"!YBA=F8&=Gq/'",YBAb=

=1%=0;",YB#Hf_1/4A4#"MA*b'",-G

2

4#$L=MN/4#15TYBA=F8

"1/N3Z",;=13/'",YBAHwIJ;5="4#$L%=$%"8j=1:%=ZHUF",%N3=1/4#$

$%",%b#"fiFNg?iSjlmlnjko)S4#MWO/-10=1
=OE=&.
&(=MA=)S4M15/
4#G

$%%D3=DB4#G;"
$%=#O/4A=1/$H

E 2 #u $
2JY5"z 2


3q5oz

j

juZ

b

b



=

q;

fi 9>~20$7`$22

E 3q5oz

2JY5"z 2
3q5oz

j

$##!2F



b



j



b

juZ



=

E 3q5oz

2JY5"z 2
3q5oz

h


Z
j

b

b

juZ



j#F=&9/$%J",J,"#4#N#"fiFN;$%=MO4A=1/$b"$4#1J#"fi",4A=1
4AN/=:$1/=G;",%%/",
=1%=
j=ZNA%$.&r"8<$./",).?$%4##91NHUf&24#$=1jhbc)?8"11/=
"1/N>4#&U4#$K=1Zb/)h8"1>1=

3O5"z

jQ=1:%=Z"1:*cG
=-H

2JY5"z 2

3q5oz

4#15

jv"1:*cG;=b

IJ/?6B-$%J"8<4A=14#1T"8-!#"fiFNDB#"14M$=1/A*w4#1/$%%N>%=;5J-4#NT=&b/4H HAb/&(-EL=YX=
",-Gb/"1BN&(-=G

LDX=4#1:.=&F4A)[=&E#"fiFNDB#"1B1b"#X=&EP$",4#15;"8<4A=1B$JN=

v



_=YWHUIS:O/$#"fiFN$%=MO4A=1;<F%-"8<%NG;4#5Yk"1*;=&WS-",YX=Hf&V4A./",D/DX1/$

%=TYXhy$%8<=1/N=?/4#-N!=1/b/1).
A=$%yDB",0%="1=DB4#G;"U$%=#O4#=1!Yc*>$%%R4#8<4#15
=O-$A$S%=h8<=-$%DX=1/N/4#1/5;"8<4A=1/$b

3O5oz

Qju=

]Z+e.=&UADB&O/X"8<4A=1B$%="
$%",%I+"$J&=#A=)S$H

$%

Z+ fi8$T6,

] e

J ( Z+


mkb

3O5oz

[ZkHXIJ-&(=b9)yN<691/L

96 df+: 96 ff
( Z+ 8 fi

DB] e

] e

] e

]ae

] e?N1=%$P;$%L=&.5="#$EB",P4#$E8<=1/$%%RO/8<%N3Yc*-#"ficNCg?iSjlmlnjko",

4#G
;$%D^

=1wA""N=&K'4#1/4#4#"U#"*



Z~ :;+:F

)S13$%",-%N=1/;"$%2]

eRHwf_1

).=-N/$b).L8<=1/$4#N/J"$SADB&O/"8<4A=1/$S"#X=$%L",D/D9#4#8",YBA=1$bB)S/4#8R"N/N",SA"$%=1/E5="
",?6B-$%k4#G

$%%DVH?f_10
",Y=
.Fc-r<"G
DBAbX&4#15wy=YX=?",-G4#$k"G;=15
$%5="M$b)SB4#8-C8"O/$%$;"M/w/>$%",4#1/5"8<4#=1/$y%=YXw#D/&OB4#1C4#1B4A4#"$",%b

]KeRHf1",YX=.-BUR
<"G
DB#b./!G
=FN/47698",4A=12N=:$1=

4H HAb%=3YX>AG
1:$'=&
8-B"15h"1:*:B4#15H

IJ/1=4#=1=&AD/&rO//"8<4A=1B$$/",$K$%=G
?$4#G'4##",-4A4#$)S4A)S/",K)v8-G
=%k8"##$

k

<| ,,'|r~,}k]r08kRG
=%bV^``cb^```eRb/4M1
k8<=1:%<F.=&V8<=G;DBO4#15P%R,
%<-~r,}
%|RzB&=wO/-4#$%4#8>$%4#G;",4A=1VHQf_1"1cO$#b.5-N*5$-$4A=15-",DB/$YB"88R/"4#1&=G
w5="#$O/14M&r"8<$",-"8RNC/",y",w8<=1:"4#1NC4#1w8O/1:h$%",%HjkG;=15$%=
/4#1/5$bE5-",DBB$D/=c4#N/L"1>$%4#G'",4A=1=&)S/4#8R>"8<4A=1/$JG'4A5SYLOB$%&OB4M15%4#15'8#=$%

fi



!k

%=!/;5=" hIS=$%;",D/DBM4#8",YBAy=1$P)S/4#8R3",'G
GhYX-$E=&K0 r~ ;RB_|Rz9bU)S/4#8R34#$
PG'4#1/4#G;"8<=$%S$-OY/5-",DB"8R/4AF4#15
P5="#$H

IJ/4#$P"#$%="$4#G;4M#",-4A*YX).1#D/&OB"8<4A=1/$O-4#$4#8
"1/N)S/",P4#$Pc1/=)S1C"$

.k

<{# fi|}9RW&=G[#4A%-",O-S]roSYXb,?4#G
=DX=O/A=$bfisE=c/Abc^``deRH.=1/$4MNV"SK(F-r
"$%0)S
cO/1/N-N/$S=&.YBA=F8F$?",
=1
",YB#y4M1/4A4#"##*b9YBO/k
5="4#$=1/A*!%=>$"8=1

]KeJ)S4##4#10/4#$?8"$%
8<=1:"4#1=1/A*>/y$-4#15A

YBA=F8j=1%=D=&"1/=EYBA=F8!ZHIJ
$%
"8<4A=1

2J!5oz 2

jhb/=)S4M15")."*C"#=$%T",D/DBM4#8",YBA'"8<4#=1/$yG
=F4#15",=O/1/NYBA=F8F$h/",

",01=G
1:4A=1N4#1/!5="bS4H HAb=)S4#15")K"*"M=$%"8<4A=1/$/",",-04A-A,"1H
IJ;G'"4#13N/47X1/8<
YX)1'ADB&O/U"8<4A=1B$POR4#$%4#8y"1/N/'8<=1/8<D/h=&.-Afi"1B8<'4#$
/",kA,"1/8<h4#1!hOB$O/"V$%1B$%P&-$S%=)SB",k4#$JOB$%&OB&(=?$%=AF4#15
/P)S=#L"$%HSZ.4#15



ADB&O/b=1TE=JB"1/NbF&-$K%=;$%=G
/4M15hB",J4#$KO/$%&rO/~(}0FP} z9HIJB4#$K/"$K
N/4#$-"Nfi"1:",5/",k/#D/&OBX/4#15$k1N0%=YXL8<=G;DBO%N0&(="8-$%",R8-$%",%bXYBOk

q;

fi

2fffff$i

"N,"1",5EB",DX=$$4#YBA*&",KA$$/4#15$.",?AD/&rO/F/"1T",A,"1:Hf1=OK$%DX847698S$%4#15b
).5AD/&rO/"8<4#=1/$&=&("1:*:)K"*bc"$"?$4#N.<X8<=&B-OB1/1/4#15k#"fiFN;g?iSjlmlnjkohH
?8<=1/8#O/N/J/4#$$OYB$%8<4#=1
)S4A"1;<"G
DBA$=)k4#15E/",KAD/&rO/F"8<4A=1/$D/-OB1/4#15EN=c$
}9UDB$%
8<=G
DB#%1$$bW"1BN"&)G;",-c$?=1;8O/1:?4M1%5-",4#=1=&y%8R/1/4#xcO
4#1:%=
=OS$%",R8-!"#5=-4A/GH



$)$)affYSWe:ZWYbTW(0\0

f_1/
&(=##=)S4#1/5$=-<"G
DB#b;AD/&rO/"8<4A=1/$LO/-4#$%4#8PD/-O/1/$S=OL"M$=#O4A=1/$k&=G

;:

,

K$%",%$%DB"8<HF"*PK4#1/4A4M"$%",%4#$

qfi

"8<4A=1/$

1/"G


2
u2
u 2
u 2
u 2
u 2



u



8
8
8
8



8

-

N(e
fie

]

(



"N/N

]

-



b"1/NhK",/&=#A=)S4#15

o:
):
: ;Rff:

ff: ;Rff:

: ff:

: ,ff: ;
Teff: ,ff:

: ff:

]D/-

(



b/5="#$",-

e

]

e

]

fie

]

8

e

]

e

fi

f_1/4#$PDB#"1/1/4M15"$9bU",')=)."*c$h=&J"8-/4#c4#1/5G;4M$$4#15T5="

2



2

2



PH>?1'=&./$%b

%=0YX
( bNA%$w=y5=" wHIJ=y=1b u
- bU1/N/$DB8<=1/N/4A4#=1
"8-B4AN>69-$%JYc* u
b9"1/N!:O/$k4#1:=A$SO/$-4#15> PDB#"1/1/4M15
"8<4A=1/$S4M1/$%%"N>=&J,}XS4M1

u

<

6B-$8"$%HiS#"fiFNTg?ikjklmklnWjov8<=51/4#$=1BA*
J69-$%"#%-1/",4Ab"$K4A$k=1BA*y4#G

$%%D>=DB4#G;"=1HIJL$%J=&5="#$k",JP$4M15A?4#G
L$%%D8<",%N!Yc*w5-",DB>8<=1/$%-O/8<4A=1>4M$

( G8h :_
] Ke

IJ/4M$K54A$JO/$)=wAD/&rO/"8<4A=1/$b91/"G
A*

G8$ Wu 2 ( : u2 (

] Ke

2

?1?=&$%b u
( b/N=c$1=8"O/$%L"1:*w$%",%P%-"1/$4A4#=14#1wL4M1/4A4#"9$%",%HIJ/=/=1b
bA"N/$h%=0/w$%",%T)S/'=1/#* t4#$h%-OHIW=0/4#$$%",%b).T=Y/"4#1w$-"G
w$=&
u

2

k
W2

(

W2

ADB&O/U"8<4A=1B$b8<=1:"4#1/4M15b",5"4#1Vb u
( "1/N u
( HwIJ/4#$E4MG
bW;6B-$%L"8<4A=1C8"O/$%$h1=
$%",%%-"1B$4A4A=1b)k/4#Aw$%8<=1/N=1A"NB$
O/$YB"8C%=4#1/4A4M"$%",%HmkAD/&rO/"8<4#=1/$

u 2 - uW2

cO/$S8O$S=OJ$%=#O4#=1/$K&(-=GtP$",%$%D9"8<P=&U/4#$<"G
DB#L"$%H.hG;",T/",k
"$%'4M$N"N1/N'&

2 -
u



=1/?8"1T"A)K"*F$."8-



Y:*;",D/D9A*c4M15 u 2

v"1BN

b

b

b"1/N

"1/NT/",S=1P8"1>"$-4#A*G'",PE"$%4#1:4AY9A?)S4A=O8R/"154#15'EYX/"F4A=H

f_1IJiJf_l.N/=G;"4#1/$bK=18<=O/#N2=4#8"MA*=-8<=G;0/4#1/8<=G;DBA%1$$'=&PADB&O/

"8<4A=1/$yDB-O/1/4#1/5Y:*C8<=1/$4#NR4#15!1=y=1/#*w6B-$%#"fiFND9#"1C/",'g?iSjlmlnjko

61/N/$b

YBO8<=G
DBO4M15!"c4#1BN3=&JO/1/4#=13=;"M#"fiFNDB#"1/$P/",
gEiSjlmlnWjot8<=O/MNDX=$$4#YBA*

+
] ~

691/NVbJ)S1"#A=)S4#151=14#G
$%%Dv=DB4#G;"DB#"1/$H!=DB84#$%A*b4#1"$%",-8-v$",%

Z~ :;+:F


8<=1/$4MN/-#"ficNw"$%]
4#$h"8-/NHF"5="$%

~

&r"8<SA

.b

eRHF%1/Nw?#"fiFNwDB#"1/1/4M15L5-",DBTO/1:4#9&"8<A

W",w%=DC&r"8<
A%=

G fi8
=


^EN=)S1T%='&"8<S#^,b/)Sb",J"8R!A

"



HIJ1VbDB=c8<N&=G

bB"
$%

=&5="#$J4#$K51R",%N

fi 9>~20$7`$22

#(

"$E;OB1/4A=1=&

7= #(

&r"8<L4#1





$##!2F



)S4A0;D/-8<=1/N/4A4A=1B$k=&K"#"8<4A=1B$L4#1A

/",L"N/N3",LA"$L=1

HhSDX=10%-G;4#1B",4A=1bN<691y"$EADB&O/"#"8<4A=1/$?/",L"N/N",EA"$%?=1
&r"8<E4#1

+

( HTfh8"1Y
DB=1/",bU/4#$P)."*b'$%",4M15"8<4A=1B$L=&J"#=DB4#G;"$=#O4A=1/$L&(=G

",P8<=1B$4#NN/AD/&rO/HUmS=)b4#1"#X=O?FIJiJf_l.%$4#15;N=G;"4M1/$bFP8<=G
D9A%LG
=FN
"A)K"*F$S$%#8<$h|,{{",D/DB#4#8",Y9A"8<4#=1/$S"$J/AD/&rO/H

$)$'&b9:ZW98%hY:Z6Qa9bK6'b9:%adcZWYhT8%P!


j$/"$"#"N*Y1
1/=%N'",S*yY54M1/1/4#15=&/4#$$%8<4#=1b).S4#1:%5-",%k#D/&OBc"8<4#=1/$
D/-OB1/4#154#1:%=J=O$%",-8-y"A5=R4A/GvYc*E=1/A*?",D/DBA*F4#15J4#WN/O-4M15K$4M15A1&=-8<N/4##78M4#GPY94#15
%*bUA"F4#15/'8<=G
DBA%YX$%_6B-$%L$",-8-"A5=-4A/G

+

$%",%

O/1/8-B"15N]r$%Tc8<4A=1aeRHT\/"84#1/5"

N/OR4#15LY/-"N6B-$%K$%",-8RT&(="YX%%J$%",%L4#11&(=R8<NwB4##78#4MGPYB4M15b)EA=c=;=1/#*

"]Z+eRHPIS/4#$k1/N-$k=OE4#G
D9AG
1:",4A=1!=&1&=-8<N/4##7

",?=$%
$O/88<$-$%=-$?51-",%N3Y:*

8#4#GhYB4#1/5L4#1/8<=G
DB#%J1'=1w4#1:4AYB#DB#"1/1/4M15E"$%F$HmS=)b/4M1'"#B=O%$%4M15hN=G'"4#1/$b
L"$c$S/",S8"1/1=SYL$=AN>Yc*1/&(=-8<N/4##A8#4#GhYB4#15POB$4#15
ADB&O/X"8<4A=1B$JD/-OB1/4#15y",
<"8<A*T=$%L/",k8"1/1=JYXL$%=AN>Y:*w1&=-8<N!/4M#78#4#GhYB4#1/5L"1*c)."*H

/4



u2 "u

IJ$%8<=1BND/-O/1/4M15>%8-B1/4#xcOT/",
)4#1:%=FN/O/8<T4#1C/4#$y$%8<4A=124#$yG
=4A,",%NY:*=Y
$%,",4A=1B",P4#1$%=G
'DB#"1/1/4M15wN/=G;"4#1/$?-'",;5="=-N-4#1/5T8<=1B$%%-"4#1:$b"$P/"$LYX1
8<=51/4#N>Yc*TxcO/4A%h";1:OBGPYXJ=&U$%",R8--$4#1TPDB"$%]f-"1/4sK15b^`d:-O/G'G
=1/N



spO-4Ab/^``c =$#4#1;s[iJ="8-VbX^``,eRHf1'=O<FDR4#G
1:$=1;"$%F$)S4A
5="B=-N-4#1/5L8<=1F
$%%-"4M1$bF\U\.$KYB"$%E",-8-B4A%8<O?$%=G
4#G;$K)."$%%NT"yA=.=&V4#G
?"8-B4Ac4M15h5="M$K/",.1/NN
%=!YX'8",-N&=h#",%=1HTw&=N#=DN"!OR4#$%4#8y%=04#1&=-Gq$%",-8R",YX=OP5="
=-NR4#15$H
IJ/h8#"$$-4#8"W<"G
DB#h&="DB#"1B1/4#15'N/=G;"4#1>)k4A!5="=-N/-4#15'8<=1B$%%-"4#1:$?4#$S/h).#
F1=)S1K(FcU-BH"*).h/"h-LYBA=F8F$Sjhb9Z["1BN0=1!P",Y9AP4#1/4#4#"#A*b"1/N!)."1:
%=$%"8G

$O/8-/",w).0/"Zt=1%=D=&yb."1BNj=1%=D=&PZH?Y:F4A=O/$#*b

4#$;1/=GO/8-2D=4M1'4M1$%"8F4#15Cj=12Z

6BR$%Hok=)PbJ4#G;",54#1>"&(=-).",-N$%",-8R/4#153D9#"1/1

R+

8<=1&=1:%N')S4#'"P$",-8-w$%",%





+

.b:)kS$%=G;S5=" [/"$ O/$%YX1'"8R/4ANbF4H HAb $-O/A%N

6

&=Gq$%=G
'=h$%",%Y:*",D/DB#*c4#1/5w"1"8<4A=1


|

w)S4A

$4AOB",4A=1M4AB4#$h4M$b)."$
4#h"05=:=FN4#N"%="8-/4A

[

96

"NBNW] eRH'/",L=1'8"1"$%4#13"

[

+R4A5y1=)


$/=O/#N$=G
T=

5="KYX"8R/4ANC6B-$ t?Oy"1/$%).
4#$h4M1/$%DB4A-NY:*8<1y).=3=&E=:BA"1BNmk=,XG'"1/1

&


],"eRb)S/4M8-",5O$;/",;"8-/4#c4#1/5
1=
YX"8-/4#N)S4A/=O
N$%%=*c4#1/5

$=O/MNYXDX=$%%DX=1N4A&S/G;"4#1/4M15!5="#$8"1

q",5"4#1H2&8<=O-$%b691/N/4M15!=O",Y=O/B4#$
4#1:=A$

$%=AF4#15-G;"4#1/4#1/53DB#"1/1B4#15"$%Hpmk=).b)8"1",-4A0",T"*$4MG
DBA>Y9O
=OL%$4#15>N=G;"4M1/$



+
)
R ZD 96 6
]

3N] ek4#1

Ofi

.H0IJwG
=FN).w",-wO/$-4#15!4#$"$$4#G
DB#'"$/4#$

R+

f&#"fiFN$%=MO4A=1DB#"1b
bX/",Lg?iSjlmlnjko51-",%$?&=

b/",ENA%$

4#1

$O/D/-4#$-4#15A*T"88O-",%w",D/D/=F4#G'",4A=1Y:*O/$-4#15T
#"fiFNDBM"1/",

g?ikjklmklnWjo51-",%$y&=h/w$%",%

6D



+

$%",-8R!$%D9"8<bB4H HAbBN=;1/=J51-",%"1*T$O/88<$$=-$J%=
{Ar~r,}wO-4M$%4#8,H

6

KbX8<=1:"4#1/$?"1"8<4A=1

+

c$?1=1F-#"ficN-$4#=19eRbX10)G
=

cb

2&=G

KHh8"#B4#$G
=FN'|;:|,{

nWO/$P<cG;DB#4A&*/OR4#$%4#8
)k4Aw",Y=.Fc-r0<F"G;DBAHF"*3'D9#"1/1

B

/"$

O/$%E"8-B4AN

6

76

]rjPbZJeRbVY9Ok)k4A

]rZb Je$4##Y4M15&r"#$%bV4H HAb)
",;4#10
$4#O/",4A=1

"

fi

2fffff$i

)S-Lj4M$=1>%=D=&Zkb9"1/N>Z["1/N0v",P$"1/N/4#15
=1>P",YB#HIJE-#"ficN$%=#O4#=1T/",
g?ikjklmklnWjoQ61/N/$K%=;/4M$$4AO/",4A=14M$E&=#A=)k4#15H

E 3O5oz $
2JY5"z 2 $
juZ

Z

3q5oz
W6

b

b

$

ZQ

IJS5="

%

3O5oz

]rjhbZeRbc)S/4M8-;/"$ %OB$%YX1'"8R/4ANbc5$N/A%N;Yc*yJ6BR$%"8<4A=1

ZHc.=1/$x:O1:A*b).J"M4A/",
D/-OB1kB4#$DX=$$-4AYB4##4#*y&(-=G

3O5"z

j

4M15Lj=1%=PZR4A51/=))K"$D/-=YB",YBA*"EYB"N
4#N"Fbc"1/N

E$%",-8-$DB"8<b/)S/4M8-$O/A$K4#1T"y$%=#O/4A=1wDB#"1w/",

=1:%=T6BR$%H

3O5oz

$JZ

n4A'4#1;D/8<NB4#15!$O/YB$%8<4A=1b)w8<=1/8#O/N/;)S4A3"1<F"G;DBA'$/=)S4#1/5>/",PDB-O/1/4#1/5
$%",-8R$%",%$
4#13/G;"1/1/N$-8<-4AYXN3",YX=TN=c$h1=D/$8<=G
D9A%1$$b"1BN)S4#"
&)[G;",F$=1=O/S8O1:J$%",-8R!"A5=R4A/Gt4#G;DBAG
1:",4A=1H

$'&($)affYSWe:ZWYbTW(0\0


f_1E&=#A=)k4#15
$G;"#X<"G
DB#b=1L=&UE5="#$Pc<YX?N/$%%=*N%G
DX=-",-4MA*'4#1T=-N/J%=
"8-B4A/=5="H0IJ/4#$E-1/N-$PD9#"1/1/4#1/5w"$O/1/$%=#fi",YB#
)S13=1/w4#$hO/$4#1/5>
"N/NN'5="9N/A4A=1'/O-4#$%4M8,HUF"*
k4#1B4A4#"$%",%?4#$G;D/*bcS5="M$",

Ofi

",L/E&(=##=)S4#1/5y"8<4#=1/$

1B"G


W2
uW2
u

:
):
8
: ; Rff:

8 ;Rff: ff: ;R
u2
uW2

j#V$%=#O/4A=1/$%=/4#$"$%>1/N!%=w",D/DBA*

|

; :

]DB

"NBN

b"1/N'

NMe

]

e

]

fie

PbO/$%

t",&%b9"1/N!<$%",YBM4#$



hHIJ

8<-O/84M"DX=4#1V/4#$/", c<YX%G
DX=-",-4#A*N$%%=*NHIJ"N/N/NE5=":N/A4A=1LO/-4#$%4#8
4#$k1=k"NxcO/",%h&(=?$O/8R>DB#"1B1/4#15y"$%F$HSIJ/L<F"G;DBAP4#$kN"NF1/N!&(-b"1/N!=1h8"1"$4##*
G;",L/P$8<1/",-4#=;4#1-4AYBA?)S4A/=O8-/"154M15;EYX/"c4A=S=&hO-4#$4#8,H
1/#4Ah&(=E#D/&OBW"8<4A=1/$bX8<=G;DBA%1$$?8"11=YXh-5"4#1N0Y:*$%=G
=)1cO/G
R",4#15
"#XM"ficND9#"1/$K%='";$-4AO/",4A=1HUf_1L",YX=h<F"G;DBAb)S1

4;hTSz0W
$'&($'&b9:ZW98%hY:Z6Qa9bK6'b9:%adcZWYhT8%P!

$%4#M

bF1>"#-#"ficNTD9#"1/$8<=1:"4#1

Wu 2 wb/NA4M15-PH



#

u/"$JY1"8R/4ANYBO

4#$


O/$%hh"N/N/N!5="UNA4#=1!OR4#$%4#8L4M1!")."*!$4#G;4M#",J%=wh4#1:%5-",4A=10=&yADB&O/
"8<4A=1/$KO/-4#$%4#8,HUj$4#1BN/4#8",%N'",Kk*;YX54#1/1B4#15E=&V?$%8<4A=1Vbc4A.4#$.4#1%5R",%Nw4M1%=
$4#1/5A1&=-8<Ny/4#M78#4#GhYB4#15.%*LB",U$",-8-
N=c$b"1/Ny8<=G
DB#%A*EO-1Nh=,wNBO-4#15SY$_6B-$%
$%",-8RbB4#18"$P1&=-8<N>/4M#78#4#GhYB4#1/5PN/4#N/1V KG'",P4A%=;E5="H
"#$%=OB$%!"1=w5="k=-N-4#1/5%8-/1/4Mx:ObK",1&=G#4A%-",O-Hv?1/>=&E
G
=$%w8<=G;G
=1",D/D/-="8-$%=CN/"#4#153)k4A5="=-NR4#15$;4#$'%*F4#153%=C8<=51/4A0G

4#1

"D/DB=c8<$-$4#150DB/"$%b"1/N1O/$w/G%=D/-O/1w&-"8<4A=1/$
=&k>$%",-8R$%DB"8<>NBO-4#15

J

DB#"1B1/4#15]f-"1/4sK1/5bU^`d:K1/5Tsf-"1/4bU^``c =$#4#10s

iJ="8Rb^``,eRHhIS/4#$4#$?"#$%=


YB"$-4#8yD/-4#1B84ADBAO/1/N-#*c4#1/5';$%=,8"MAN[_5="",51BN/"!",D/DB="8-2]rL=:/#b^``eRH\/=
=O.$%*c$%Gb).k/"4MG
DBAG
1:%N
"P$-#4A5:A*$-4#G
DB#4A6BNPR$4A=1;=&Xk5="9",51BN/"P"A5=R4A/Gb
"1/NTO/$%?4A.%=
&O/.1//"1/8<?DX&=-G;"1/8<Hj[-*$=-.$OBG;G;",*
=&)S/",K/",D/DX1/$.4#$./4#$H

"



fi 9>~20$7`$22



$##!2F

f_1"D/-D/=F8<$$4#15D9/"$%b;DB#"1B1PA=c=c$P",h"#DB"4A-$?=&5="#$"1/N3N/84#N$P/O-4#$%4M8"#A*
)S/-4#$"1w=-N-4#1/5P8<=1/$%%-"4M1.YX).1/GHjS&%)K",-N/$bc5="X$%4#$$%D9#4A4#1:%=
"E%="##*h=-N/N;$%-4#$=&$OYB$%$U-$%DX8<4#15E$%S=-N-4#1/5$HIJ/$%S",J/1
&(N;%=L1&=-8<N

? ( :OlOlOlT:;?n
(
+
( `
( g` - `? 4

/4#M78#4#GhYB4#154#1"14#1B8<G
1:"JG;"1/1Hl-84#$%A*bK4A&

4#$y!=-NN$%-4A$
=&



$OY9$%$bF1&=-8<N/4##A8#4#GhYB4#15E5$K69-$%K$%",%N=1T?=-4#54#1/"X4#1/4A4M"B$%",%P"1BN

+

).=c$K=O/b/$%",-8->1/N/$4#1T$%=G
E$%",%

C$",4#$%&*c4M15h/E5="#$4#1

1T8"#ANw",5"4#1w=11/)$",4#15$%",%

3"1BN/#",-55="$%

$",4#$&(*F4#15/4#$b$%",R8-
5$$",%N
&=K5="#$

Yk

( Hf&W/",

H1&(=R8<NwB4##78#4MGPYB4M15L4#$

- H\=G

"y$%",%

b"1/Ny$%=E=1HUIJ4#1B8<G
1:"b=

|c<}9|_,~ ,<}Bb9DBM"1/1/4#15yD/-=c8<$$S8"1!YXP",D/D9#4ANT%="1:*DB#"1B1b/4#1DB-4#1/84AD9Abc"1BN>D/$$
8<=G
DB#%1$$=1BA*P=1N"NF1/N
&J"$c$]rE=:BAsvmk=,XG'"1/1b:,"eRb/4H HAb:",5"4#1b).S/"
"11//"1/8<G
1:?/",?A=$%$8<=G
DBA%1$-$4M1>51-"HIJcO/$b9)yO/$%h5="",51BN/"w=1/A*4#1
1&=-8<N>/4M#78#4#GhYB4#1/5bA"F4#15
/P8<=G
DBA%PY$_6B-$%$%",-8R>DBB"$%LO/1/8R/"15NH
IJ/L5="",51BN/";%8R/1/4#xcOL*F4A#N/$KRO/14MG
L$"F4#15$k4#1>N=G'"4#1/$)S/L",L=-N/-4#15
8<=1/$%%R"4#1$wYX).105="#$Hf_12=O/w%$4#15$O/4A%bJ/$%",/K(F-r"1/N

H

~%

<

,R{A,Hf1DB#"1/1/4M15T"$%c$h)S4A/=OL=-NR4#15>8<=1/$%%R"4#1$b/$%-4#$L=&J$OY9$%$P8<=#M",DB$%$

4#1:%="$4#15AP1%*bX$O/8R!B",k",51/N/"wG
8-B"1/4#$G+N=:$1=8-/"15y"1:*:/4M15'-HJIJ
-O/1:4#G
?",1&(=SED/<D/-=c8<$$S4A$%A&)."$k15A8<4AYB#L4#1"#X=OJ<FDX-4#G
1:$H

%
$ &
ff

, ff

('

E

c=w&",b).y/"y$%%R4#8<%N0=O-$%A$%=wDB#"1/1B4#15;"$%F$?$%DX8476BN4#1!/$4MG
DBAIJiJf_l.>#"1F
5O/",5HL)S4##1=)Q$=)[=)[=O/J",D/D/="8R!8"1YX?<c%1BNN%=;N"X)S4#jk?n]rlN/1B"O/Ab
^``eS"$%F$bG;=PD/-84#$%A*b/)k4A>jk?n$OY9$%S=&l?nv]r08kRG
=%?"HAb^``eS/",
)K"$O/$N24#120,1/N4#1:%-1/",4A=1/"SDB#"1/1B4#15$%*F$%%G;$w8<=G
DX4A4A=1p]rZK"88R:O/$b,eRHuIJ/4#$
4#1:=A$'N/"#4#15)S4#",YB4A%-",-*&rO/1/8<4A=1$%*cGhYX=K&(-6B-$%
=RNA=54M8T&(=-GO/#",b"1/N)S4A

Ofi

8<=1/N/4#4A=1/"X<X8<$HK?O/<c%1/$-4A=1).=w4M$JN/4AF4#NNT4#1:%=
E&=#A=)k4#15y&(=O/S$OYB",-"$

^,HSjkD/DB#*w"
DBD/=F8<$$4#1/5y",DBD/="8-!%='hjk?nCN=G;"4#1>"1BN"$%>N$8<R4AD/4A=1b8<=G
D94##4#15
/P$%DX8476BNT"$%TN=)S1>4#1:%='"yD/=DX=$4#4A=1/"X1=-G;"V&(=-G>H
cHSc%1BN!O/-4#$%4#8w,"#O/",4A=1=&?DBM"1/1/4#15$%",%$%=N")k4A$%!1/=-G;"K&=-G
8<=1B$%%-O/8<$H




cHSjN O/$%EDB-O/1/4#1/5h%8R/1/4#xcO$H
HSjN O/$%L$",-8-G
8-/"1B4#$G;$H

W#}vWv 2#vxu5 3q3T'rw24 $v

yx~3qz

2 #w

\U\.$ED/D/-=c8<$$-4#15wDB/"$%
4#$?"#G
=$L4#N1:4#8"%=
G
=FN=A=5*0/",L/"$?YX1NA=DXN
&=JLf_ll2DB#"1/1/4M15$*c$%%G>H\=kN/"4##$b).L&JE"N/S%=;P)=w/",$SY1!N=1
w]rE=:BASsmk=,XG;"1B1b9,,YeRb"1/N54AE=1/#*EY9"$4#8?D/-4M1/84ADBA$.H
IJ/0D9#"1/1T$%",$)k4A"D9#"1/1/4#1/5"$%$%DX847698",4A=154A1v4M1/$-OYB$%T=&hl?n
N<691/N&(=;/!jSf_l.c,DB#"1/1B4#158<=G
DX4A4A=1[]rZK"88-cO/$bS,eRHIJ>4#1/DBOy4#$
"3$%;=&
=DX-",%=h$-8-G;","Fb'4M1/4A4#"U$%",%bU"1/N3"5="&(=RGhO/M"FH;IJ;4#1/4#4#"$",%4#$L$-4#G
DBA*"$%
=&5=O/1BN!",%=G;$b"1/N!P5="&=-GO/#";4#$k"1",-YB4A%-",*w6BR$%J=-N?A=54#8"W&(=RGhO/M";O/$4#1/5;

|6

#",4#=1/"$%*FGhY=M$PN<691/N3&=hDB#"1/1B4#15T"$%Hj1*=DX-",%=y$8-/G;"

"

!4#$hN/<691N3Yc*3"

fi

2fffff$i

#4#$=&DB",-"G
%-$b/"hDB8<=1/N/4A4#=1bc"1BNw"
M4#$%=&<X8<$Hf_1/$%"1:4#",4#15y?DB",-"G;%-$K*c4##N/$b



O/$%?#4AyIJiJf_l."$%c$E",-yOB$O/"#A*$%DX84769NbBy"8<4A=1/$?%=Ty$8RG;"FHLIJD/8<=1BN/4A4A=1

,+

4#$"1",YB4A%-",-*](69-$%=-NeJ&(=RGhO/M"FHk\=L"1"8<4A=10%=TYXh",D/DBM4#8",YBAP4M1!"w54A1$%",%

+

4#1/$"14#",4#=1T=&B4#$K&(=RGhO/M"
GhO/$YL$-",4#$_6BN4#1



KH"8R><X8<

)+* / O: lOlOlT: * -n , fiB]/. ]96e;:"NBN ]96e;:N/ ]96e%e
* / :OlOlOlT: * 0n , ", SJ<X8< DB",-"G;%-$b. ]96e4#$S<8<.8<=1/N/4A4A=1

mkb

&=-GhOB#"



96

"1/N0"N/N

.b4A$

4#1>L#4#$%/"$JL&=-G

",5"4#1b"1'",YB4A%-",-*

96

] ek"1/NN ] ek",y",%=G'4#8y"N/N"1BN0N/A%h<X8<$bV-$%DX8<4AA*H?IJ

",%=G;4#8S<8<$K",$%$=&VO/1/4#1/$"14#",%N'",%=G;$bF4H HAbM",4A=1/"B$*cGhYX=#$8<=1:"4#1/4#15Pfi",-4M",YBA$H



1. ]96eE4#$Pfi"#OB",%NH

IJy$%G;"1:4#8$E",/",bV4A&"104M1/$%"1:4#",%N"8<4A=14#$k<c8O%NVbV1bX&="8R3$4#1/5AP<X8<

. ]96eL=#N/$P4#1w8O1:P$%",%b18<=-$%DX=1/N/4#1/5T4M1/$%"1:4#", 4A=1/$P=&./",%=G;$4#1

4#1#4M$%b"1/N&=h"8RC4M1/$%"1:4#",4A=13=&J4#$LDB",-"G;%-$bUT8<=1/N/4A4A=1
f&

"N/N

96

96

] e",E"N/NNT%=yE$%",%bB"1/NwE4#1B$%"14M",4A=1/$.=&",%=G;$S4#1N/ ] e",EG;=NT&=G

P$",%H

f_1'\U\.$O/-4#$%4#8G;=cNVb"8-T$4#1/5A$%",%k,"#O/",4#=1'8"1'4M1=AS=O/$"1/NB$=&=DX-",%=
",D/DBM4#8",4A=1/$



YBO/4##NB4#15'/M"ficNDB#"1/1B4#155-",DBVb=1w1/N/$P%=N%RG;4#1'"M",D/D9#4#8",YBA

"8<4A=1/$'",;"8-$4#15AT&r"8<'#"*H!-&(=>4M1$%
/><=-;%=38<=G
DB4##w/>=DX-",%=
N$8<R4AD/4A=1/$.N=)S14#1:%=y"yGO/8-$-4#G
DBA.D/=DX=$4#4A=1/"B1/=-G;"&(=RGb$O/8-TB",JO-4#$4#8J,"7

6

O/",4A=108"10YX4#G;DBAG
1:%N><@84#1A*HL?Ok691/"1=-G;"&=-G+"8<4#=1/$
&=-G;",H

fi

96

l-8<=1/N/4A4A=1 DB] e

Ofi

96 ;:
96 ;:

96 ;:
96 ;:

96 ;:

96 ;: 96

;/"/h&=#A=)S4#15

96 32
96 32

]DB / ] e "N/N / ] e N / ] e%e

X8<$

]DB ( ] e "N/N ( ] e N ( ] e%e
H
H
H
]DB

] e "N/N

] e N

] e%e

IJ/kD/-8<=1/N/4A4A=14#$."$=&5=O/1/Nw",%=G;$Hn4A)S4#$b?<X8<K8<=1BN/4A4A=1/$D/

96

] e=&

$4#1/5AS<X8<$",?$%%-4M8<%N'%=yYXk5-=O/1/Nw",%=G;$HE"#$%=D/-$%1.5="$%",%E"$"h$.=&
",%=G;$HEIJcO/$b).y8<=G;DB4#A")K"*0*:B4#15'<8<D/?
8<=1/N/4#4A=1/"V<X8<$Hh.=G;DB4##4#1/5;")K"*
!#=54#8"&=-GhOB#",!4#1:=A$;%R"1/$%&=-G;4#15G

4#1:%=3o\.b)SB4#8-8"OB$%$'"12<cDX=11:4#"

YBA=)OD4#1
51-"Hf_1;=O/%$%4#1/5PN=G;"4#1B$b=)bF).S&=O/1/N
B",/4#$%-"1/$%&=-G;",4A=18"1
YXPN=1h4#1"$%=1B",YBAL4#G;H.=1B8<-1/4#15
/h8<=1/N/4#4A=1/"<X8<$b=$%h8"11=SYXL8<=G
D94#AN
")K"*w)S4A/=O"1=/.<FDX=11:4#"BY9A=)ODVbc54A1w/",K))K"1K%=yD/$%-$%=MO4A=1'#15H
IJ/4M$
)."$wD/-=1Y:*okYXh],eRHj$').)k4##J$%bk8<=1/N/4A4A=1B"<8<$8"1<@84#1A*YX
4#1:%5-",%N4#1:%==Oy"A5=-4#/G;4#8
&-"G
).=b$%=!/w4M$h1=01N&(=
8<=G
DB4M#4#15G

Ofi

")K"*H

IJL8<=G;DB4##",4A=1TDB=c8<$-$D/=F8<N/$J"$&=#A=)S$

^,HS%-G'4#1;D/-N/4#8",%$E/",h",T|r~bU4#1$%1/$%
/",h1==DX-",%=h/"$P"1<8<h=1
/GHkFO/8R>D/NB4#8",%$S","'8<=G;G;=1!DB/1=G
1=14#1YX1/8-BG;",T"$%F$HJjk1!<F"G;DBA

[ V [54

",-Sy]r4#1F84A*

qfi

[ V

eU&r"8<$K4#1;U#r-"$%c$ Uj1:*;A=c8",4#=1

@[4

)k4A/4#1/$"G;84A*

$%"*F$bc=&V8<=O-$%bFA=F8",%N

E=O/5=Oh)k=APD9#"1/1/4#1/5
D/=F8<$$HSy8<=51B4A$",4#8

DBN/4#8",%$Yc*"
$4#G
D9AE$%)D!=?"#X=DX-",%=k$8RG;","FH

"

<

fi 9>~20$7`$22



$##!2F

qfi

cHSI-"1/$&(=-G"#X&(=RGhO/M",L4#1%=;xcO/"1:476B%&L?o\HIJ/4#$K4#$S$OYN/4AF4#NN4#1%=
/P$%%DB$

]r"eTl<1=-G'"#4A
"#UA=54#8"U&=-GO/#",Hy\=#A=)S4#15!g?",1"1/NL1=YB#=c8-C]_^``deRb/4#$
DB=c8<$-$E<cD9"1/N/$L"#x:O/"1:476BR$bW"1/N%R"1/$#",%$L1/5",4A=1/$H'1/N3O/D3)S4A&=%





GO/#",?/",",EG;"N/ODT=OK=&8<=1 %OB1/8<4A=1/$bFN/4#$ %O/1B8<4A=1/$b"1BNw",%=G'$8<=1"4#1B4#15
,",-4#",Y9A$H

]Yef_1/$%"1:4#",%E"#9DB",-"G
%R$HIJ/4#$4#$.$4#G
DB#*N=1/kYc*'4#1/$"14#",4M15h"#B=DX-",%=J"1/N
<X8<'D9",-"G
%-$')S4A"#*:DX>8<=1/$-4#$%%1:'8<=1/$%"1:$'=1/>",&(%>=HIJ
DB=c8<$-$G'",$;O/$%w=&SF1=)kAN5T",Y=O/y$",4#8wD/N/4#8",%$b4#1/T$1/$%T/",y
4M1/$%"1:4#",%Nw&(=-GO/#",8"1T=&(%1wYXk$-4#G
DB#4A6BN>]rE=c/AJsQmk=,G;"1/1b/,,YeRH\/=

7 6

<"G
DB#bV4A&"14#1/$"14#",%N$",4#8D/N/4#8",%>]

eS=F88O-$?4#1"T&=-GhOB#"Fb"1/N0/",

1 6

4M1/$%"1:4#",4A=1'4M$J}998<=1"4M1N4M1
k4M1/4A4#"$%",%bF10]

4;hTSz0W

H

]r8eTI-"1/$&(=-G

e8"1YSDB#"8<N')S4A

&=-GhOB#",'4#1:%=0?o\.HIJB4#$P4#$PDX=$%%DX=1NO/1:4#",&%
4#1/$%"1:4#",4A=1VbYX<

8"OB$%;4A?8"1Y
8<=$%#*bV$%=>4A?$=O/#NYX",DBDB#4AN%=>"$E$G;"#&=-GhOB#",
"$?D=$-$4AYBAH
f_1"!&rO/##*4M1/$%"1:4#",%NC&(=-GO/#"Fb4#4#$#4A#*/",
G;"1*$%",4#8w=
=1<)K"*DBN/47
8",%P=c88O-1/8<$8"1YXDB#"8<NTYc*
&=-GO/#"
$%%RO/8<OH

:Z8ZRTW

=

4hTSz0W

bc$O/A4M15h4#1T"yGO/8-$4MG
DBA

Q

cHS\U4#1B"#A*bX4A&
?ok\=&"1:*!&=-GO/#"'8<=1:"4#1/$EG;=hB"1=1/yNB4#$ O/1/8<b108<=-<
$D=1BN/4#15
<X8<b=DX-",%=bX=?5="8<=1BN/4A4A=1!5$E$%DB#4AkOD04M1>yG;"1/1D/=DX=$%N!Y:*
gE",1"1/NP1=YBA=F8]_^``deRH

W /_
1=)

4vqyvGe48!xYu#J l | 5 T3



$=)

=)q=O!$%DX84#"M4AN[g?iSjlmlnjko

4#G
DB#G
1",4#=1b"$>)."$>N/$8<-4AYXN4#1

c8<4A=1HcbS4#$8-/"1/5N%=CN"k)S4Aj?n8<=1/$%%-O/8<$HQZKO/4##N/4M15=1=OT1=-G;"M4AN"$%
D/-$%1",4#=1bB4AJ$O@8<$%=;",8",L=&U8<=1/N/4A4A=1B"X<8<$H

9($'&($);:GWeSh=<TW!>/Sh9bTbT6'b?A@>8%hBC0ED.6Q:A=aTb=>6":Z6Qa9bThTSGF4747W(PZ:M0
?O1B8<=cN/4M15h=&DB#"1B1/4#15h5-",DBTYBO/4M#N/4#15P&(=J-#"ficNT"$c$J"MG
=$%J4#G;G;N/4#",%A*'8",--4A$=
%=jk?nu"8<4A=1/$w4#10",YX=0D/=DX=$4A4A=1B"1=-G;"S&(=-G>Hp?1!$4MG
DBA*1N/$'%=D"1

9

"N/N/4#4A=1/"#"*G
GhYX-$/4#Dw,"#OP&(=S"M -K=&"1!"8<4A=1HKIJh#"*G
GPYX-$-/4AD=&"1
<X8<S4#1/N/4M8",%$K6B-$%#"*J)SE"#4#$K<8<S8<=1BN/4A4A=1/$.DBMO/$/L8<=$%DX=1/N/4M15h"8<4A=1V$
D/8<=1BN/4A4A=1/$",KD/$1HI=?8<=G;DBO%K$%G
GhYX-$/4AD4#1:%5-$4#1y"1y<@84A1:G;"1/1b,).

96

DT"L8<=O/1:%&="8R'<X8<

4D0D/



6

=&"1'"8<4A=1

:bc)S/4M8-y5$.4#1/8<G
1:%N;"8R'4MG
S"L8<=1/NB4A4A=1

ED

] eYX8<=G
$SDB$%1:b|,}9P"8-4#G
h";D/8<=1BN/4A4A=1

96 96

96

96

!D/-] e=&Uh8<=-$%DX=1/N/4#15

"8<4A=1YX8<=G
$yDB$%1:HCIJ/w<X8<;5$;4#$
#"*'G;GPYX-$B4ADC$;"$;$%=c=1"$
4A$
8<=O/1:%
"8R$

D/-

] e

D/-] e

H.IJ?<8<$"N/NT<X8<$k"NBN

] eK",E/1>$8-/N/O/ANT&=JL1<F

#"*HIJEDB=c8<$-$J4#$J4A%R",%N>O/1:4#"#X5="#$k",L"8RN>?69-$%4#G
H

9($'&($'&H:GWeSh=<TW!>/Sh9bIFJ<9:Z8%hTP(:Z6aTbKD.6Q:+AaTbB>96":Z6aTbTh9SLF4747W(PZ:%0
IJw#"fiFNDB#"1<c%-"8<4#=1CG;8-/"1/4M$G

&(=
jnvNB47R$P&=G

4A$yIJiJf_l.8<=O/1:%DB",y4#1

G
#*>).=#4A%AN"4##$H?f_1/$%%"N0=&$A8<4#15T"8-/4#c4#1/5w"8<4A=1B$bXy<c%-"8<4#=1G
8-/"1B4#$G
$%A8<$?"8R/4AF4#15'<X8<$HP?1/8<"1!<X8<



76

=&"8<4A=1

"



;4#$$%A8<%NbX"#=&4A$S<8<E8<=1/N/4#4A=1/$

fi

6

DB#OB$

2fffff$i

96

:$PD/8<=1/NB4A4A=1/$?1N%=>YX
DBOL4#1:%=>4Ah8<=$%DX=1/N/4M155="$%$HTjS&%)K",-N/$b1=

=1/A*/h<X8<$E=)k10"NBN!<X8<$L"N/N

] eS",-G;",-N

:(8ZRTW
FC c6

"N/NNw&r"8<$K=&"#9<X8<$/",",y~(kz9{~,bB4H HAbc/=$%?<8<$ ;=& P)k4A'DB

6

96

96

",/h4#G;hYX4#15bYBO"#$%=w
] e

D/-

] e]r4#1

DB",4M8O/#",b/4M$U)S4##cYXSO/1B8<=1/N/4A4A=1B"<X8<$=& cb)k/4#8-
B"k"1;G
D/*y<X8<8<=1/NB4A4A=19eRH

Wt 4 hvWv #wyx ff5 #/M r 3
Z.=;D/RO/1/4#15k%8-/1B4#x:O/$&(-=Gc8<4A=1'E"$4#A*8",*y=%=P"8<4A=1/$)S4A
8<=1/N/4#4A=1/"c<8<$H

9($^]M$)+VXWYS Y47RTS

_XP(:Z6aTb0

\=kFISiJf_l.b).?N<691N"$./AD/&rO//"#",D/DB#4M8",YBAS"8<4A=1B$."8R/4AF4#15",.A"$=15="",.4#G

$%%D^,b8<&HLc8<4A=1cH#^,HE\=?=OEjn1/=-G;"&(=-G>b9).$-4#G
DBA*T8-B"15y/4#$k%=|{({|Rzz9{~-|{A

k

9

.k

|r~r,}/c| ~}:h|}w|Rzz/|,~(}c; -c||<~ J|J|,{B|Vr~'.zT^,b)S/"1h<8<J|Rzz|,R
474A$K<X8<k8<=1/N/4#4A=14#$J$",4M$_6BN4#1Th8O1:J$%",%H

96 d0+N2

96 edf+: fi

Z+ fi8$T6,

] e

D/-] e

DB

] e

T"N/N

96 =
( Z+ O8
fi
] e

] e

]e

9($^]M$'&_&>B>9W!>A@aMhTSlN>WYSWe:Z6aTb

?+

-4#54#1/"#A*bfi).J8OU=,T"E$%",%



>

"
5=" pB",S/"N

9

+

04A&/=1=&9P|r~,}U$%A8<%N
&=M"ficNyDBM"1h%=

0N/A%N

O/$%YX1>"8R/4ANb8<&H.F8<4A=1!cHcH.h1=)Q$4#G
D9A*;",y"$J8<-4A%-4#=1

?y/",w",!$%A8<%N&='>-#"ficN2DB#"1bK4H HAb"$%",%4M$;8O'=,[4A&=1=&/!<X8<$

9



$%A8<%N!&(=k4A$#"fiFN>$%=MO4A=1NA%$S"
5=" p/",S/"$ %O/$Y1!"8-/4ANVH

W4 'r x,vx2c3" ouc3
\U4#1/"##*bB&=1B",YB#4#15'$",-8-"A5=-4#/G;$k%=w/"1BN/AP=O/kD/-=D=$-4A4A=1/"Vj?n1=-G;"&=-Gb
4AK4#$.$OF@84A1:.%=
N<691k|Pr%|,}R~rr~,}yRF}9r~r,}BH\=)K",-N$%",-8Rb1=
G;",%%J4A&V4AKN=c$
/4#M78#4#GhYB4#15bYX$%_6B-$y$",-8-b.=;)SB",$%=:b."A)K"*F$;&r"8<$;"38<=G;DBA%A*C$%DX8476BN$%",-8R
$%",%H 4

f8"1
&=8<=G
DBO%<"8<A*K<8<$=&9<F8O4#1/5?"E8<=1:%<FNDX1/N1:"8<4#=1H

\=##=)S4#1/5'E=c/AJ"HM]_^``deRbX)PN/<691L=Ojk?nC$%",%%-"1/$4A4#=1T&O/1B8<4A=1
$%",%$"1/NjnC1=-G'"X&(=-G"8<4A=1/$J%=$%",%$b9"$J&(=##=)S$H

PRQTS Z+:m6 ]8_^ Z+a` Z+:m6 cbQP Z+:m6
]

]

e

y]

e%e

O/1/N<61N

]

e

PRQTS

b9G'",D/DB4#15

96 edf+

4A&DB] e

=)S4#$

)S4A

Z+:m6 ]8
y]

e

D/-


, + 0SR

"N/N

96

] e

"1BN

P]Z+:m6e]8

D/-


, + 0SR

96 El

N ] e

TTU)oo;Ti Z"A" ZF)9FZM(AoZWVowI;o;)FZ("eFZTZZAo9Z(o>)MFZ

;"A(

"O

fi 9>~20$7`$22

XU $_ nM ff p& ) f



$##!2F

ff

'/"'4#G
D9AG
1:%N;G
=FN=A=5*0D/$%1:%N34#1/
D/8<N/4#1/5T$8<4A=1/$L4#1

u

UH *

f_1/4#$

$%8<4A=1VbW).;fi"MO/",%''D-&(=-G'"1/8<
=&/;$O/#4#15TDB#"1/1B4#15T$%*c$%GHG
DB4A-4M8"NB",">4#$

qfi

N/4AF4#NNT4#1:%=
h$OYB","$

^,HSISL\U\$%*c$%G%=:=TDB",-J4#1TE&rO/#A*'"O/%=G;",%N>%-"8-=&/P,1/N>4#1:%-1/",4A=1B"XDB#"1F
1B4#15?$%*c$%G;$8<=G
DX4A4A=1Vb8",-4AN=O"A=1/5$4#NK)S4AyjkflK:,L4#1yZ.8-1-4#N5bF.=7
=R"N=HkF4A)h-$O/A$bNG
=1/$%-",4#15w\\.$5=c=cN-O/1:4#G
"1/N!$%=MO4A=10A15
YX/"c4#=4#1T8<=G
DX4A4A=1H>"#$=54AT$%=G
T4#1:O/4A4A=1B$E=1)k*3\U\pYB"$
)K"*>4#JN=:$H
cHS\/=G=Ok=)S10<cDX-4MG
1$b9).hDB$%1:k$%=G
=&$OBA$J/",)./"y=Y/"4#1N04#1
N/=G;"4#1/$B",V)-1=WOB$%NL4#1E/jSf_l.c,S8<=G
DX4A4A=1VH\U4A-$%b)Y/-4A<9*k$O/G'G;",-4A
=O/;691/NB4#15$;4#12$%=G
G;=N=G'"4#1/$
)S/!\U\).=c$).#HvIJ1b.%=4###O/$%-",%T=O
4M1O/4#4A=1/$E=1'"$=1/$P&=h\U\.$DX&(=RG;"1/8<bW).w54A"!&()<F"G
D9A$L=&JN=G'"4#1/$
)kEP",DBD/="8-!4#$JA$$",DBD/=D/-4M",%H
cHJ61/"#A*D/-$%1"N"4##N8<=G;DB",-4#$%=1=&\\.$TDX&=-G;"1/8<0%=/",T=&hmEFlb4#1
/$%1/$;/",P).'4#1:$%4A5",%w)S/4M8-3N/4A1B8<$EYX).1\U\["1/Nm?lQA"N%=!)S/4M8-
DX&=-G;"1B8<E$O/A$H

#x 4 Ov' /!Y!YYv

u'+Z3O &
} 3Yu}&2 "!"u

2 #w

\=G+",R8-%='jSDB-4#V,Fbh,1/N>4M1%-1B",4A=1/"DBM"1/1/4#15y$%*F$%%G;$k8<=G
DX4A4A=1b=5"1B4AN
Yc*>\/"/4AGZK"88-cO/$bX)K"$8",--4AN>=O/4#1!P51/-"U$%%4#15=&hjkf_l.:,T8<=1&1/8<y4#1
Z.81/-4#N5bJ.=A=-"N/=HCIJ/T)!).=G;"4#1C%-"8-c$b.=1&=;&rO/#A*:"O%=G;",%NDBM"1/1-$b
"1/N=1!&=T/"1/NF"4##=NDBM"1/1-$H[Z.=%-"8F$T).0NB4Ac4MNN4#1:%=36B0DB",$b"8R=1
8<=1/8<-1/NE)S4AE"JNB47-1DBM"1/1/4#15KN=G;"4M1H?OV\U\$%*F$%%Gv%=c=?DB",V4#1?/&OB#A*S"O%=G'",%N
%-"8-9Hf_1w?8<=G
DX4A4A=1bF\U\NG;=1/$%%-",%Nw-O/1:4#G
kYX/"F4A=K$ODX-4A=%=B",.=&W?=
&rO/#A*"O%=G;",4#8'DB#"1/1/-$L"1/N)."$h&=5-"1%Nu-g-=ODCjNB4#$%4#15OB4#$N0DX&=-G;"1/8<
lM"1/1/4#15!c*F$%%G;]rZ."88R:OB$ystok"Ob,^eRHfP"#$%=>).=13/wF8-B4#1/N/ALjk)K",-N3&=L'6B-$%
DB#"8<T4#1w04#8<=1/4M8!^0A,",%=
N=G;"4#1bUjn%R"8H0f_1/4#$P$8<4A=1b).Y/R4A<B*D/$%1:
LN/","'8<=#A8<%N>4#1T/E&O/MA*'"O%=G;",%N!%-"8b9"1BNT54Ab/&="8-0N=G;"4#1b$%=G;L4#1OB4A4A=1/$
=10"$%=1/$k&(=E\U\.$?YX/"F4A=HIJP-"N$-=O/#N!Y")K",
/",y8<=G
DX4A4A=10G;"N
1=N/4M$%4#1/8<4A=1YX).1v=D/4MG;"E"1/N[$O/Y=DB4#G;"kDB#"1/1R$bSDBO/%4#15%=50-O/1:4#G

8O$K&=KYX=5-=ODB$Hf_1wk%<F%=y"8->N/=G;"4#1bc)L$",%E)S/4#8R'DBM"1/1-$&(=OB1/N'=DB4#G;"
$%=#O/4A=1/$b"1/Ny)k/4#8-
NB4#N/1 HlDB#"1/1B4#15S"$9bc"#FDB#"1/1/-$)S54A1;/"A&"1;=ORO/1/1/4#1/5
4#G
h=1"Ta,Tmkyl1:4#O/G+fff.)S4A^g?ZG;"4#1!G;G
=*HSf&1=w$%=#O4A=1!)."$k&=O/1/N>)k4A/4#1
$%P$%=O-8<EYX=O/1BN/$bFEDB#"1B1)."$kN8#",NT%=w/"P&"4##NT=1L$D8<4#E"$%9H

[

$)$)]\TW

U#r-

Naffh96'b

IJ.6BR$%U).=LN=G;"4#1/$/",)O/$N
4#1J8<=G
DX4A4A=1).JMr-"1/N
K(F-r
N=G;"4M1/$HV6B-$%VA=c=?",V&=-G
HIJ/4#$4M$V"8#"$$4M8"N=G;"4#1Vb4#1:=AF4#15K%-"1B$%DX=",4A=1

^ U)o(TZq"iw(FFo ;R(""Foo"ffff;ow;Ri"5o.;"wZ;uZ"fi`_;A (iF
OZba cd5c %%G FZMFZ "oWe Z""" Tc5fohgffM;"icg OZA

"T

fi

2fffff$i

=&KDB"8$hF4#"T%-O/8-c$L"1BN3"4ADBM"1$H
\U4A5O
!$-=)S$L;-O/1:4#G

8O-$E=&K=$%;DBM"1/1-$
/",J).P",Y9AE%='$8"AP%=;YB4A55S4M1/$%"1/8<$J4M1TL8<=G
DX4A4A=1H

10000
FF
HSP2
System-R
GRT
Mips
STAN

1000

100
sec.

j

10

1

0.1

fi

16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42
problem size

\U4A5OE kiSO/1:4#G
K8O$U=1
#",-5KU#r-4M1/$%"1/8<$U&=U=$%J$47hDB#"1/1R$W/",8<=OB#Ny$8"A
OD%=;GHIJ4#G
L4#$$-=)S1>=1>";A=5",-4#/G;4#8?$8"AH

IJ/L#-K"$%c$S)-L$OYN/4AF4#NN4#1%=
)=$%$J=&U4#1/$%"1B8<$bE"$%*T"1/NLB",-N
=1$HIJ=$%?DB#"1B1-$./",JN/4#Nw).#X=1"#X=&E"$%*T4#1/$%"1B8<$K)h"#$%=y-O/1w=1LB",-N
$%HIJ$%yDB#"1B1-$k);\U\.bVmEFl]rZ.=1Pstg<1b^``cb^```eRbc*F$%%GyiLbgEiIt]riS<
&r"1/4#N/4#$s



#"B","$b^```eRb04ADB$y]rNA,"G
DVb,eRbW"1/N3FIjo]rnV=15>s\=b^```c\=3s

fi

nV=1/5b9,^eRH.IJ)=
=YB$fi",4#=1/$J8"1>YXLG;"N/

^,HF*c$%%G
ipN=c$J$4#51/47698"1:A*;).=-$%LB"1L=SDB#"1/1R$H
cHSISTY%%
D9#"1/1-$h"#.YX/">xcO/4A%T$4#G;4M#",b)S4A\U\p"1/N04ADB$h%1/N/4M15%=YXw
&r"$%%$%H
ok=%;"#$%=T/",E4#G;$",-y$-=)S1=1"TA=5",R4A/G;4#8h$8"AbW$=w).
",}9UA=c=F4#15T",L#4#1",
4#G
TMr-DB#"1/1/-$HK=1/8<-1/4#1/5$%=#O/4A=1D9#"1#15b).TN/=01=y$=)"!695OTH
ok=1?=&E$/=)S1wDB#"1B1-$5O/",-"1:%$J?OR1NwDB#"1/$%=
YXk=D/4MG;"HUfKOR1/$.=OK/",
FIjkov691/N/$?$=%$%KDBM"1/$=1TG
=$K4M1/$%"1/8<$Hc*F$%%Gyi61/N/$.$4A51/4768"1A*;#=15D9#"1/$
/"1/;=-$b-"154#1/5&(=G

bk

lk

k

^d, %=0F^ =&SFIjoh$EDB#"13#15/$bV)k4A"1"-",5=&

ik

fi wH.IJLA15B$=&\U\.$JD9#"1/$",L)k4A/4#1`d

lk

lk

%=^^a =&FIjkoh$JDBM"1A15/$b)k4A"1

"R",5'A15=&S^a wHh.=1B8<-1/4#15\\.$?5=c=cN0-OB14#G;PYX/"F4A=b).h/4M1/",
",

Ofi

G;"4#1BA*')=;-"$%=1/$J&=J/",

"

fi 9>~20$7`$22



$##!2F

^,HJf_1'"M/4A%-",4A=1B$=&1&=-8<N'B4##78#4MGPYB4M15bYB"N
69-$%$%",-8R;61/N/$"h$%",%k)k4A
YX%%
,"#O/",4#=1",K*'$-G;"#BN/D//$?]rG
=4A,",4#15P=O/.$%",R8-"A5=-4#/Gb:8<&Hc8<4A=1TacH#^eRHf_1
G;=$%S8"$%$bBL1<FY%%k$O/88<$$%=k4#$",SND/^,b94H HAb/"
N/4A8<=1/HIJE",h$%=G

8"$$)S-J$/"##=).$%YX%%$O/88<$$=4#$",N/D/;cb:"1/N;=1/A*P-*h-",-A*hYB"N
69-$%J1N/$J%=;5='N=)S1%='NDB!cHIJ$E=YB$%,",4A=1/$J",-P4#1/NDX1/N/1.=&"$T$-4AH
cHSIS;AD/&rO/U"8<4A=1/$hO-4M$%4#8D/-O/1/$E#",5;&-"8<4A=1/$L=&./'$%",-8R$%DB"8<HwnV=c=c4M15>",
/k$%",%$./",K\U\1/8<=O/1:%-$.N/O-4#1/5L$%",-8-Vb:=1/#*YX)1h"1BNaEDX-8<1:=&V"M/=&V"
$",%$S$O/88<$-$%=-$).E8<=1/$4#N/NTAD/&rO/4#1w=O<cDX-4MG
1$b:)S4#T?%1/N1/8<*/",
/P#",5J/E"$%9b9LA$$SAD/&rO/$O/88<$$%=R$Jh",H
IJ/4#$"3=-4#8"k1/=%%=CYX!G;"N=12!6B-$%=YB$%,",4A=1Hv4A208<=G'G
=1



D/-$%1",4#=1P=&BU#r-W"$%F$b&=#A=)S4#15k8"1PYXDB=1HUnV YX.G;"fiF4MG;"N/4M$%"1/8<
YX).1).=#=c8",4A=1B$b4H HAb/L1cO/GhYK=&UG
="8<4A=1/$J"
G;=YB4#A?1N/$%=
",h%=
5J&=G
=1KA=F8",4A=1P%=?"1=H$4#15k"kO/-4#$%4#8&O/1B8<4A=1L/","$$4A51B$W%="8-
$%",%.KA15h=&/"1
Rzr~;|,{c#"fiFN$%=MO4A=1w"$/O/-4#$%4#8Jfi"#O/b:?N/4#$"1/8<k=&W"8-$%",%?%=y?1<c.YX%%

l

,"#O/",%NP$",%.4#$WG;"fiF4MG;"

^,HIJcO/$b"1h"A5=-4ABG[/",WOB$%NL1&=-8<Nh/4##78M4#GPY94#15)S4#L"1

=-"8A?&rO/1/8<4A=1'O-1B4#15LEA1/5'=&W"1w=D/4MG;"B-#"ficNT$%=MO4A=1;).=O/#NYXkDX=A*F1=G;4M"=1

/Hf1w?YX1/8-BG;",F$"fi"4#M",YBAb

$%"1/NB",-NT#--D/$%1:",4A=1/$bF54A1"1O/D/DX#4#G'4A%=



G
=YB4MA$8"1y-"8-
"1:*hA=F8",4A=1y"88<$$4AY9AK%=/G4#1

O/$%=1$%%DVb4H HAbfi/KG'"fiF4#G'":N/4M$%"1/8<

"8^,HLjk#$=bX\U\.$EOR4#$%4#8LOB$O/"#A*3S61/N>=D/4MG;"b=L8A=$%

4#1=$%y"$%F$?4#$?8<=1/$%"1:A*

%=w=D/4#G;"b9#"fiFN$=#O4A=1/$Sb$O/8R!B",k1&=-8<N0/4##A8#4#GhYB4#15y"#G
=$%1E1N/$k%=

" =^ 8vy$%DB$S""NVH

A=c=wG;=E/"1

[

$)$'&\TW

K(F-r

NaffhT6"b

IJK(FcU-4#$=1k=&/kYX$%F1=)S1'YX1/8R/G;",yDBM"1/1/4#15LN/=G;"4#1/$b:)SSkD9#"1/1



1N/$.%=y",R"15E"hY9O/1/8-=&WY9A=c8-c$K4#1:%=y"$D84A6BN'5="XDX=$4#4A=1b:OB$4#15"P=YX=",-GH

O/$%

#4AhhU#r-k"$%F$bXh8<=G;D4#4A=14M1/$%"1/8<$k)-N/4#c4#N/N4#1%=T"'$k=&"$-4AbX"1/N!=&
/",-N/=1/$HP\U4A5O
aw$=)S$?y-O/1:4#G
y8O$?=&yDB#"1/1R$J/",L$8"#N%=/yB",-N
=1$H
c*F$%%Gyi+$8"A$;G;=$%;$%%"N/4##*%=3>K(F-r3"$%F$;O/$N4#1C>8<=G
DX4A4A=1VHCf_1
DB",4M8O/#",b4A4#$KE=1BA*D9#"1/1K/",J8"1$%=A'|,{{:=&U=$E"$%c$Hm?ly$%=A$S$%=G
L=&
$G;"MA4#1/$"1/8<$bF"1/N'\U\$=A$",YX=O).=hB4A-N/$=&/k$%Hf&V\U\3$O/88<N/$=1w"14#1B$%"1/8<b

l

14ASN=c$S$%=wx:OB4A%L&r"$%H\=k<"G
DB#b9\U\$%=A$S=1P=&/P$4A<a,"$%F$k4#1^ d;$%8<=1BN/$b

l

)S-LF*c$%%G
iQ1N/$J` F^h$%8<=1/N/$HoS=1E=&E-EDB#"1/1R$691BN/$.=D/4#G;"XDBM"1/$H?1

ik

ik

J"$c$/",mEFlLG;"1/",5$%=h$%=Abc4A$D9#"1/$",k)S4A/4#1
`d %=^dd =&Wc*c$%GyiL$DB#"1

lk

A15B$b)k4A"1C"-",5T=&L^a wH?13/'"$%F$PB",\U\[G;"1B",5$h%=$%=Ab4A$PDB#"1/$h",

lk

lk

)S4AB4#1

lk

%=!^ =&F*c$%%G
iL$DBM"1A15/$b/"-",5
` wH

Z.*C<cDX-4#G;14#1/5!)S4AN/4A1:y8<=1F6B5O-",4#=1/$y=&k\U\.b)&=O/1/N/",
YX/"c4#==&
\U\u=1$>"$%F$'4#$;M",5A*N/O%=/>5="J=-N/-4#15OR4#$%4#8$y&=G
N/4#$"1/8<T$%4#G;",%$;",-T1/=;$%=5=:=FN
$4#1/5A
",-G





c8<4#=1cHcH[g="

TDBM"1/1y5-",YB$
"0)S=#wY9O/1/8-C=&kYBA=F8F$y)S4A4A$

"1/N14AP4M$E'#D/&OB"8<4#=1/$PO/-4#$%4#8



)S1'",-G

=#N/$E"Y9A=c8-9b"#

DX=$4A4A=1B$S)S/y
",-G8<=O/#N0DX=$$4AY9A*TDBO
YBA=F8!",-;O/$O/"##*>8<=1/$4#N-N#D/&OBHEIJ
5="",51/N/"]c8<4#=1cHcHeRbW=1/h=LB"1/NbXN/4AF4#N$J/h"$%F$?4#1:%=T$-G;"#W$-OY/"$%F$b"1/N
"N/NNh5="cNA4A=1T]c8<4A=1ycHeWD/1:$/DB#"1B1W&=GpDBO%4#15SYBA=F8F$V=1:%=?$"8F$)k

"

fi

2fffff$i

10000
FF
HSP2
System-R
1000

100

sec.

j

10

1

0.1

0.01

fi

18

20

22

24

26

28

30

32
34
36
problem size

38

40

42

44

46

48

50

\U4A5OPa kiSO/1:4#G
.8O$=1hM",5.K(F-rE4#1/$%"1B8<$W&=/=$%/D9#"1/1-$W/",U8<=O/#N

fi

$8"AKODh%=G

\U\bmEFlcb"1/N
c*F$%%GyiPHfiIJ4MG
4#$$=)S1"1"A=5",-4#/G;4#8$-8"AH

$%=G
YBA=F8YX1",$4##1N/$P%=!YX'G
=NH>mk=).b4#1$=G
'8"$%$y"8-B4Ac4M15>5="#$
&=Gt",-M4AJ1:%-4A$J4#1>L5="",51/N/"'8O/$J=,5="#$k/",k",h$%4##""NVH.ok=k").",=&U
YBA=F8F$/",4AU)S4#M1Ny%=L$%"8-h&="8-B4Ac4M15?5="#$""Nb/.D9#"1/1G;4A5:UDBO8O1:
YBA=F8F$?=1:%=>$%"8F$L/",E1N%=YX
N/4#$-"$$%GhYBAN0#",%L=1Hhf&/",E/",D/DX1/$)S4A0%=c=>G;"1*
YBA=F8F$



)k/4#8-wNDX1/N/$.G
=?=JA$-$R"1/N=G;A*'=1/L$%DX847698J"$w"1/NwE"8<4A=1B$K/",

DB#"1B18R=c=$%$



13
DB#"1/1/8"11=?61/N4A$)."*=OE=&;$4AOB",4A=1",5"4#1HhIS$%

",LDB=YB",YBA*'P4#1/$"1/8<$/",S\U\8<=O/MN/1 $%=AP4M1TP8<=G
DX4A4A=1VH

[

$)$^]m\TW3n po +q Naff1hT6'b
9

f_1;

n r o9sq(KN=G'"4#1bkDB#"1/1/4#$&r"84#15"LYBOB1/8-'=&=Y7 _8<$%=YS)=N=1)S4A;"h$%

1
7

=&UG;"8-/4M1$b4H HAbEDBM"1/14#$.xcO/4ANw%='8<",%h"



_=Y>$8RN/O/#?4M1)k/4#8-T/=Y _8<$k$/"#

YXS"$$4#51N'%=G;"8-/4M1$HIJ8<=G
DX4A4A=1;-D/$%1:",4A=1wG;",$KO/$%S=&V"$4#G;DBA&=-G=&
xcO/"14A6BNP8<=1/NB4A4A=1/"<8<$H\/=<"G
DB#b,4#&/"1P=Y %8<U5$DB"4#1:%NPNVbfi/1hB",4#$4A$1)
8<=A=b"1/N&=K"M98<=A=R$B",K4#4#$.8O1:A*
DB"4M1%NT4#1bc4AK4#$1/==&VB",K8<=#=K"1:*FG
=H.?1BA*
"0$OYB$%P=&D9#"1/1-$P4#13w8<=G
DX4A4A=18<=O/#NB"1/N/A;B4#$LF4#1/N=&J8<=1/N/4A4A=1B"<8<$H
IJ4#-O/1:4#G
E8O$J",-P$=)S1>4#1\U4A5O-PcH
jkDB",&(-=G

=$DBM"1/1-$h"A"N*$1bU)/"wRO/14MG
'8O$y4#1C\U4A5OT>&=fll

&=t #MN=YBAysc=t -b,eRH\\Q=O%DX%

]rE=c/A"HAbJ^``deRbl=D9l#"1b"1/NCZK?l#"1]rm

&=-G;$k=/.D9#"1/1-$Y:*'G'"1*;=RN-$=&WG;",51/4AOBN



G
GhYX/",.4#G
4#$.$=)k1'=1T"

A=5",-4#/G;4#8$8"AH.=1/8<-1B4#15?$%=#O4A=1A15Vb\\.$UDBM"1/$%1/N%=EYK$#4#5A*L#=15U/"1y





fi 9>~20$7`$22



$##!2F

10000
FF
HSP2
Mips
IPP
PropPlan
BDDPlan

1000

100

sec.

j

10

1

0.1

0.01

fi

2

4

6

8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50
problem size

\U4A5OP kiSO/1:4#G
P8O/$J=1

n r o+q(4#1B$%"1/8<$J&==$%PD9#"1/1-$KB",8<=O/MN>/"1/N/#L8<=1F

N/4A4A=1/"<X8<$HIS4#G
L4#$$/=)S1=1!";A=5",-4ABG;4#8?$8"AH

DB#"1B$-O-1NwYc*'E=SDB#"1/1R$=1TL$-G;"#A4#1/$"1/8<$HD/4MG;"BD9#"1/$K",E&=O/1/NwY:*

lk

04ADB$bFl=D9l#"1bF"1/NZK??l#"1H\U\.$DBM"1w#15/$K",?)S4A/4M1^d,a =&?=D/4#G;"XA1/5/$b

lk

)S4A
"1'"-",5?=&U^^ wH?1/A*m?l$%=G
4MG
$U691/NB$A=15DBM"1/$U/"1;\U\.bYX4#15E4#1
"L-"15

lk

&=G

ik

%=^^d

bk

=&\U\$SDB#"1A1/5/$bB`fi

=1!"-",5H

iS$%DX=1/$4AYB#w&='/>=O$%"1/NB4#15-O/1:4#G
YX/"c4#=;=&L\U\u=1

n r o9sq(wN=G;"4M14#$b

",D/DB",-1A*bBLAD/&rO/X"8<4A=1/$kO-4M$%4#8,H!"$-O-4#15b&=k$=G
L<"G
DBAL$%",%$bBLDX-8<1:_
",5y=&$OB88<$$%=-$/",?).8<=1B$4#NN0ADB&O/b/)
O/$-O/"#A*T&=O/1/N04AS)K"$E8A=$%%=>'DX-8<1:b
4H HAb=1/A*)=T=O=&"cO/1/N/N!",D/D9#4#8",YBAh"8<4A=1/$k)y8<=1/$4MNNY:*DB#"1B1HS\=?<c
"G
DB#b:"#=&X?dE$%",%$./",.\U\3A=c=c$",&(=.$%=AF4#15E=1k=&Xk$4#<a,L"$%F$B"a,,
$O/88<$-$%=-$J"A%=5/bB)S/EL$O/G

=&U"#F{ zfiRF{$O/88<$$=-$S4#$K=1BA*Td,cH.jk#$=b/EYX%%

$O/88<$-$%=-$bc$4#G;4#M",%=hSU#r-N=G;"4#1b:#4A",$B"#A=)ND//$HUZ."N;6B-$%$%",R8-w1
5=c$
NDXh/"1C-w$%%D9$h=1C

n p o9+qy"$%F$y4#1/w8<=G
DX4A4#=1$OB4A%H\4M1/"#A*bU4#1

"T&)<cDX-4MG
1$).;-"1&=E%$%4#15B",bW
5="",51BN/"ADXN0Y:*",YX=OE"T&"8<%=yT4#1
%-G;$J=&RO/1/1/4#1/5P4#G
H

[

$)$#u\TW(v

IJ

v

<#

NaffhT6"b

#N=G;"4#1&=-G;"M4A$J";$%=M4A"4AL8",-N>5"G
P/",8<=G
$k)S4A04#8<=$%=&S4#1/N=)S$H

IJw#",5$%h"$%F$h1:%NC4#13/w8<=G
DX4A4#=1]r$4A0^!4M1\U4A5OdeE8<=-$%DX=1/NN/4#8<A*%=
$%=G
S"7).=-#N;$4#N
"$%F$b)SB4#A4#1yS$-G;"#A"$%F$b:S",kA$$8",-NB$%=PYXJ8<=1/$4MNNH
\U4A5Ohd
$=)k$E-O/1:4#G
E8O-$J=&UE&=OJYX$%DX&=-G;4#15DB#"1B1-$H



fi

2fffff$i

10000
FF
HSP2
Mips
STAN
1000

100

sec.

j

10

1

0.1

0.01

fi

2

3

4

\U4A5Ohd kiSO/1:4#G
8O-$V=1

v

5

6

7

8
9
problem size

10

11

12

13

<#"$%F$V&=W/=$%DB#"1B1-$X/",W$-8"ANE%=SY94A55W4#1/$"1/8<$H

IJ4#G
E4#$J$-=)S1>=1>";A=5",-4#/G;4#8?$8"AH

\-=G5=O/D
=&9&=OYX$%_$-8"#4#15?DB#"1B1-$U$=)S1
4#1
\U4A5OSd:bcm?Fl.?4#$UJ$#=).$%b
)S/4MAKFIjo24#$&r"$%%$%DBM"1/1H\\04#$51-"MA*h$%8<=1BNyDB#"8<b"1/Ny/"$"E#==&9fi",R4#",4A=1y4#1
4A$K-OB1/1/4#15P4#G
$H?1wE=/J/"1/Nb\U\4M$K?=1/A*;DBM"1/1K/",4#$K8",DB",YBAE=&$%=AF4#15
"7).=-#N!"$%F$b$-4A^cHJf?$%=A$k&(=Ok=OS=&6Bh$OB8-"$%c$HSoS=1/P=&y$=)S1>DBM"1/1-$
5O/",-"1:%$'&=O/1/N3DB#"1/$P%=!YX;=D/4#G'"b"1/NC1=1'=&$/=)S1DB#"1/1R$ENG
=1/$%%R",%$
$ODX-4#=.DX&=-G;"1B8<L8<=1/8<-1/4#1/5y$=#O4A=1A1/5HFIjkopD/=FN/O/8<$O/1B18<$$",-4MA*A=1/5D9#"1/$
4#1"y&)[8"$%$H.l84#$A*bF=1E"$%F$/",JYX=mEFl"1/N\U\G;"1B",5L%=;$%=AbBmEFlS$KDB#"1

bk

lk

A15B$P",;)k4A/4#1"!-"15'=&Sd q%=^

lk

=&\U\$hDB#"1A15/$bU"R",5`a TH>E1"$%F$

lk

lk

$%=ANwYc*;YX=04ADB$"1/NT\U\bFDBM"1'A15B$=&W04ADB$.",)S4A/4M1` %=^ =&W\U\$KA1/5/$b

k

lk

"R",5w^^ wH.\=?IjoPb/L-"15P4M$Ja

lk

lk

%=F^ wb9)S4A^^ =1!"R",5H

.=1B8<-1/4#15L\U\.$-O/1:4#G
YX/"F4A=bSYB4#5Efi",-4M",4A=1'4#1;-O/1/1/4M15k4MG
S"$)#B"$4A$8",DB"fi
YB4#M4A*L=&$%=AF4#15E#",5"$c$YX=
$%G%=E$O/AU&=Gu)K"*=R"#/$%",-8R;"A5=-4#/G4#$
",-"1/5NH?=YB$%NT&=#A=)k4#15HIJ=$%"$%F$K/",K5$%=ANwY:*'1&(=R8<N/4##78M4#GPY94#15
",E=$B",J",L$%=ANT&r"$%H.c=G;4#G
$b=)bB$%DX84#"#A*
=1TLM",5"$%F$b1&=-8<N
/4#M78#4#GhYB4#15-O/1B$k4#1:%=T"N"N01/N0$4AOB",4A=1C]r1/=w8",-NB$8"10YXhG;=N"1:*cG
=-eRHLIJ1b
DB#"1B1;$%",$'&(=G

$8<-",8-2)S4A8<=G;DBA%>YX$%_6BR$%
$%",-8-Vb)S/4#8R",$G
=->4#G
b.YBO

8"1C$%=A;YB4#5!4#1/$%"1B8<$PxcO/4A%;M4#",YBA*bW"$8"13YX'$1=1;"$%F$P=&J$-4A!^cH>mkAD/&rO/"8

k

4A=1/$S)=-c$G
=FN-",%A*T).#b9$A8<4#15'",-=O/1/N0dfi t=&","4##",YBAh"8<4A=1/$bX"1/N>/PYX%%
$O/88<$-$%=-$S",-LO/$O/"##*'8A=$%b/Y9OJ$%=G
4#G;$J#4AL",SN/D//$K=&G
=E/"1a
$%%DB$H





fi 9>~20$7`$22

[ $)$xw\TW



$##!2F

Naffh96'b

-y

0r /r

IJ691/"N=G'"4#1LO/$%NP4#1E.8<=G
DX4A4A=1L8<=G
$&=GQ"S"7).=-#NL",D/D9#4#8",4A=1b)SG;=F4#15
$%xcO1/8<$U=&A,",%=-$1Ny%=EYXKDB#"1/1NVHWIJ$%xcO1/8<$",JNBO%=L"M:F4#1/NB$=&9$%%-4M8<4A=1/$b
#4A/",U



f_l$1N%=?Y.$%Nh6B-$HI=&=-GO/#",%."#=&B$%K$%%-4M8<4A=1/$b,8<=G
DBA<P6B-$%

=-N?D/-8<=1/N/4A4A=1B$k",;OB$%N4#10yD/$%1:",4A=1]rE=c/ALstF8R:OB$%%bW,eRHyjk$?=1/#*"
&)2DB#"1B1-$8<=O/MN;/"1/N/#JJ&rO/#j?n-D/$%1:",4A=1bckN/=G;"4#1
)K"$$-OYN/4AF4#NN4#1%=h
"$4AhIJiJf_l.>"1/Ncf_lnW]r8<=1/N/4A4#=1/"<8<$Re8M"$$%$by&rO/#jk?n8#"$-$bV"1/N"101
G
=S<cD/-$$4AJ8#"$-$)SJ1cO/G
R4#8"8<=1/$%%-"4M1$]S1cO/GPYX=&XDB"$$15-$4#1y/JA,",%=
",y"!4#G;eE1NN%=YX'8<=1/$4#N/NH>$=)/'-O/1:4#G
w8O$h&(=wDB",4#84#DB"1$h4#1

-y

h&O/Mjk?nC8#"$$4#1>\U4A5OcH.f_1>N/4A1B8<L%='hD/F4A=O/$JN/=G;"4#1/$bBP0r /rkN/=G;"4#1
)K"$-O/1=1$4A%E",JjkflK:,Fb9O/$-4#15Pa,'mkLl14#OBG

fffG;"8R/4#1$K)S4#Tay0Z.*:%hG;"4#1

G
G
=-*H

10000
FF
IPP
PropPlan
1000

100

sec.

j

10

1

0.1

0.01

fi

1

3

5

7

9

11

13

15
17
problem size

19

21

23

25

27

29

{z(-|~}FK"$%c$K&=.=$%?DB#"1/1/-$)SB4#8-w/"1/N/#N;&OB#Bj?n

\U4A5OP kiSO/1:4#G
8O$.=1

4#8<=1B4#8
^;N=G;"4M1TD/$%1:",4A=1HIJ4#G
L4#$$-=)S1>=1>";A=5",-4#/G;4#8?$8"AH

\U\=O%DX&=-G;$T).=3=;&rO/#jk?nQDB#"1/1R$h4#1C%-G'$y=&$%=MO4A=1C4#G
Hf
GO/$%
YX1=4M8<Nb=).b/",fllu"1/Nl=DBlM"1351-",%TD/-=,",YBA*=D/4#G;"DB#"1/$hb$O/8R
/",L=1/;1N/$E%=YX;8",&rO/U)S1NB4A8<A*08<=G
DB",-4#1/5w/=$%;-O/1B1/4#154#G
$H'?1'=
/"1/NVb\U\.$EDB#"1B$k",yxcO/4A%y8A=$%y%=T=D/4#G;"=10$%
4#1/$"1/8<$bXYX4#15')k4A/4#14#1"w-"1/5=&

lk

k

G;"fi4#G;"##*w^ =&=D/4#G'"B$%=#O/4A=1'A1/5/$%=y4#1/$%"1/8<$.$%=ANYc*;l=DBl#"1b^^^
=1>"-",5H

IJ/;#",5
,",-4#",4A=1=&K\U\$P-O/1/1B4#15'4MG
$E4#$E",D/DB",-1A*N/Oy%=>/;$"G

DB1/=G
1=1
"$fi",-4M",4A=14M1

v

Ofi

<#U4#$ J$%=G
4MG
$bX"$?)=YB$%NVb1/&(=-8<N/4M#78#4#GhYB4#1/5h-OB1/$S4#1:%=

;

fi

2fffff$i

"TN"N1/Nb)k/4#8-08"O/$%$P"w$)S4A8-0%=YX$%_6BR$%$",-8-b$%=AF4#15'/
"$%4#1G
=-4MG
bYBO

lk

#4M",YBA*HUIJ?AD/&rO//"8<4A=1B$DX-8<1:",5E",$*A=),"#O$=1w"-",5b9",-=O/1/N0^a wb/"1/N

\

Y/"N/6B-$k$%",-8R!R",A*5=c$N/Dk/"1&(=Ok=S69$%%D9$bB)S/P#",5yG;" %=-4A*=&
LYX%%S$-O/88<$$%=-$k#4AE",SNDB^,H

/ 'gu}


gn2}&2 3

}u2v

f_1T/4#$J$%8<4#=1b)PD/$%1:J$%=G
L=&E$-O/A$K/",J).P/"L=Y/"4#1/N>4#1N=G;"4M1/$K/",).
1=O/$%N34#13'jkflK:,8<=G;D4#4A=1Hw'54Aw$%=G
G;=;<"G
DBA$P=&KN/=G;"4#1/$E)k
\U\C)=F$).#b"1/NbF%=;4#M#O/$%%-",%=OJ4#1:O/4A4#=1/$=1>E"$%=1/$K&=S\U\.$YX/"F4A=b"#$=;$%=G

<"G
DBA$=&UN=G;"4M1/$)S-?\U\4#$SA$$J",D/DB=D/-4#",%H
\=,"#O/",4#=1b:).-"1T\\=1T"h8<=##8<4A=1w=&,Y1B8-/G;",-
DB#"1/1/4M15LN=G;"4#1B$b:4#1B8#O/N/4#1/5
"#:N=G;"4#1/$V&(=Gp.jSf_l.:-^``k"1/NjSf_l.c,k8<=G
DX4A4#=1/$b,"1/NP$%1yG
=-N=G;"4M1/$&=G
E#4A%R",OHl84M$%A*bcEN=G;"4#1/$.4#1=O$O/4A%).Ekw7Xbc).=;K(FcU-:$]/<

}
q MrF Rb v Mb v -cb.-r9bK-=
=}0y9fibVMr-bW0r-y/%jk?nbV0r-y/%cf0lnJbX-y/r%FIJiSflKbXl|(bw-#b
>R%Xb n p9
+q bJAfi-rBb"1/NUH!f_1/$%"1B8<$h).w4A",1&(-=G DBO/YB#4#$/NN/4#$_
"1/N&=O%=DX-",%=EDB$%1:",4A=19eRbW.-( ,Rfi-rBbV

Rb

%-4AY9O4A=1/$b&=G
#4A%-",O-b=LG;=cN/4A6BN!%=$/=)$8"#4M15YX/"c4#=H 3

IJ4#G
$k&=L\\).

G
"$O/N0=10">cD9",-8hA%-"0^T-O/1B1/4#15'",La,0mSb)k4A"TG;"4M10G;G
=*>=&Ka0Z.*:%$H
iSOB1/1/4#15?4#G;$/",).k$-=)&(==D9#"1/1-$U).J",1w=1'S$"G
G;"8-B4#1b:4#&1==F
)S4M$%P4#1/NB4#8",%N!4#1!P%<FHS&=O/1/N>B",\U\$/=)S$k<c%-G
A*>8<=G
DX4A4ADX&=-G;"1/8<
=1^;=&y,wN=G;"4M1/$S#4M$%%N",YX=HE?1).=.Fc-rc$b9TX-#wb9"1/N>R%XbX4A
$%4#MW$=)S$$",4#$%&*c4M15'YX/"c4A=H?c=G
<"G
DBA$k/",E/"
1=YX1OB$%N4M1>yjSf_l.c,

fi

8<=G
DX4A4A=1!",




kw7=G;"4#1Hy\U\$%=A$Paw=&.',T"$%F$L4#10;jkflK:-^``T%$%L$-O/4A%
4#1
#$$U/"16BJ$%8<=1BN/$b)S/KK6BK=-$",-4AO/1/$=Afi",Y9Ab,=/"S$D84A698",4A=1
-=-$HIJS=1/A*=DBM"1/1).SF1=)=&B",8"1'$=AS"1:*
=&/Sk-Rwy"$c$.4#$
f_llHIJE#",%$.R$4A=1Tf_llHy$%=#$K=1/A*;&=OK=&WE-*$G;"M94#1B$%"1/8<$bF",F4#15
OD
%=^w=OR$kRO/1/1/4#1/5
4#G
HE\U\$LDB#"1!#15/$?",bV4#1%-G;$=&
1cO/GhY=&"8<4A=1B$b

k

lk

$-=%J/"1>fllJ$4#G;P$%%D>=D/4MG;"X=1$b/R"154#15
&=G`, %=T` wH

}




R( ,fiU-=G;"4M1HPIJ/4M$k4#$?"8#"$-$4#8"UN=G;"4#1Vb)k



=Y _8<$E1N%=YX

%R"1/$%DX=%NO/$4#1/5"TY/-4#&8"$%HE1PyY/-4A&r8"$%y4#$?G
=Nb"w8<=1BN/4A4A=1/"<X8<

7

&=-8<$E"#=Y %8<$E4#1/$4MNLY/-4A&r8"$%%=G
=
)S4#4AHE\-=G=O$-O/4A%bXfllHw"$4##*
$=A$h"$c$)S4A

H

7

Qa;=Y %8<$bXYBOk&"4M#$J%=$%=Ay"1:*>"$%>)S/

7

L

d:H?\\.b=1

/h=E/"1BNb$=A$1/w^^=Y %8<$E"$%F$?4#10A$$k/"1"T$%8<=1BNHEE1!h"$%F$

bk

k

lk

B",.f_ll$=A$bFDB#"1wA15/$.=&W\U\C",?)S4A/4M1fi %=^^^ =&Wf_llS$.#15/$b`` =1
"-",5H



ISK-r3=G;"4#1H3IJ/0^``8<=G
DX4A4#=1&",ONC69T4M1/$%"1/8<$H3\/=
$%T"$%F$b
/;&"$%$%LDB#"1B1/4#15wG
8-/"1B4#$G).
c1/=)=&K&=G'#4#%-",O
4#$E"R$4A=1=&Sg?iUI
B",K4M$1/B"1/8<Nw)S4Aw"$-4#G
DBASc4#1BN;=&N/=G;"4#1wNDX1/N1:F1=)S#N5b$OD/DBM4AN
Yc*;

qCVo?F ; T( o9Fo ;oFZ;Z F;?T(M;"gmZaw(FFoa;&(ooaFe
o"ffC)U o("FZFZ"Z(Z"M ZgTZ"Z;o;(T);o"(AwmZ(9FZ; mZJ;Aw;;;"JF
OZba cd5c %%G FZMFZ "oWeZ""" Tc5fohgffM;"icgie!T(M;" OZA





fi 9>~20$7`$22

l



$##!2F

l l l
pl pl l l

l

OB$%HfS$%=#$JL"$c$4#1^ ,b cbXF^ acbU^` `'"1BN^^ a$%8<=1/N/$S=1!"',mk



l1:4#O/G.A-=1hG;"8R/4#1.)S4AfiEZ.*c%JG;"4#1G
G
=*']riS&"1/4MN/4#$Us
\U\C$%=A$.E$"G
"$%F$K)S4A/4M1; #^acb/

l

#"/"fi"$bc,eRH

:d:b9 #^^,bV^ `y"1/N0^` afi;$%8<=1/N/$bc-$%DX8<4AA*H

lk

lk

lk

l#"1>A1/5/$K=&\\",-L)S4A/4M1w` %=!^` =&g?iUIE$kA15/$bV^^ t=1>"-",5H



IS!.-/R?=G;"4#1bWOB$%N4#10>^``8<=G
DX4A4A=1VHPIJ
1cO/GPYX?=&K$%",%$E/",L\U\
,"#O/",%$hYX&(=-
O-1/4M15"1=D/4#G;"$%x:O/14#"$%=#O4A=14M$
{ ~}-|,L4#1'$-4A;=&K

pl

"$w/HIJEY94A55$%SjkflK:-^``y<"G
DBAE5$$%=AN!4#1 #^;$%8<=1BN/$H




Afi-rh=G;"4#1VHIJ=-4A54#1/"B"$%;&=-GO/#",%NwY:*FO/",KiSO/$$9"$%F$.DB#"1F
1/%=P691/N;=O/=)%=hDB#"8<"E9",4AHE=c/A"1BNmk=,XG'"1/1],"e.G
=FN/4769N

"$>$O/8->/",S"1!",-YB4A%-",*T1cO/GPYX=&



4A$S1N>%=;YXED9#"8<NHf_ll.cHcbBO/$4M15


pl pl
L

l

5="",51/N/"L%8-/1/4Mx:Obc$%=A$P^,bcb:"1/Nw4AJ"$%F$4M1; cbc F^,b"1/N!^ P$%8<=1BN/$b
-$%DX8<4AA*bYBOh<FB"O/$%$yG
G
=*$%=O-8<$y"$y$%=c=1"$
M",5J"$%F$b/",F4#15;A$-$/"1>"
%1:=&"
$%8<=1/N!)S1

pl

H\U\p$8"A$%=GhO/8R

H

cb9$%4##X$%=AF4#15y;^fi4#

"$>4#1> $%8<=1/N/$H\U\.$SD9#"1>A15B$J",b=1>L"$c$k/",Sf_llG;"1/",5$k%=$=Ab
xcO/"##*A=15;4M1T%-G;$J=&P1cO/GhYX=&"8<4A=1B$H

\

j$)K"$"A-"N*;$"4#Nb=O4#1:O/4A4#=1;4#$/",kG'" _=-4#*
=&S8O/1:A*
","4##",YBASY1B8-/G;",-
DB#"1B1/4#15!N/=G;"4#1/$



",A"$/=$%D/$1%NCYc*=O
N=G;"4M1C8<=MA8<4A=1



",-%$-4#G
DBA4#1

$%%-OB8<Ob"1/N3B",4A4#$LB4#$h$-4#G
DB#4M84A*)S/4#8RG;",$G$%=A,",YBA$%=!"$4MA*Y:*3"5N*
"A5=-4#/G$-O/8-w"$K\\.HI=y4M##O/$%%R",%J=OK4#1OB4A4A=1/$b)E1=)54AEN/","h&=K"h&)N/=G;"4#1/$/",
/"h"
A$$S$4#G
DB#$%%RO/8<OHIS*",P&=P8-B"#A154#1/5&=S\U\.H

$'&($)]\TW
[

>R_

h9b=>

TX-#

NaffhT6"b0

IJ/R_"1/Nw-#TN/=G;"4#1/$
).0O/$%N24M1!jkf_l.:-^``8<=G
DX4A4A=1HvZ.=",
,",-4#",4A=1/$=&.
#r-EN=G;"4#1Vb)ky
",;"N/NB4A4A=1/"8<=1/$%%-"4M1$?=1;8",D9"84A*
=&."8-/4M8AbV"1/NbW4M1D9",4#8O/#",b=1/;"G
=O/1:E=&&rO/",L4#$E","4##",Y9AHhZ.=3N=G'"4#1/$
",E8A=$%#*'#",%NVbc/=1BA*'N/47X1/8<?YX4#15h/",J4#1TTX-#bc&rOX4A%G;$K8"1YXk%R"1/$%DX=%N
YX).1y).=LA=F8",4A=1/$b4A&B=1K=&B=$%/"$UG
=-.B"1y=1$O/8-y4A%G>Hf_1y\4#5OJ`cb)8<=G
D9",
\U\.$J$OBA$=1YX=>N=G'"4#1/$K%=;/",SDX=%NYc*T)p8-G
=%&=JP1DX=D>$%*F$%%G
]r08kRG
=%b^```eRH

-?

f_1/$%"1/8<$",JJ$"G;&(=YX=;N/=G;"4#1/$U4#1
\U4A5O-S`cHUiS$O/A$U&=

},zFRz
/"kYX1y",1

Yc*08-G
=%=1;"L,PmkSl14MO/Gyff)=F$%",4A=1]r8-G
=%bX^```eRHjN/"$
4#1BN/4#8",%$
/",J/L"$%T8<=O/#N/1 YXL$%=#NY:*wP8<=-$%DX=1/N/4#1/5hDBM"1/1H

u

4#1

fi

?1/.1NB$W%=?YX8",&rO/c)S1h8<=G
DB",-4M15k/-OB1/1/4#154MG
$U4#1P\U4A5O-K` O/1/#4A\\.b8<=FNN

lt

b1DX=D4#$)S-4A%%1T4#1

HIJcO/$bF?",D/DB",-1K-O/1:4#G
?$ODX-4#=-4A*y=&\\C4#1T\U4A5OE`4#$

1=S$-4A51/47698"1:H?1L8<=1:%-",*bk1/D=D>$G;$J%='$=AE$%L"$T8<=MA8<4A=1/$JG;=E#4#",Y9A*

fi

/"1\U\

/4A.691/N/$.$%=#O/4A=1/$.%=
&(=O/K>/R_>"1/NwLTX-#J4#1/$%"1B8<$K)S/4#8Rw\U\N=c$1=

Ofi

G;"1/",5k%=P$%=AHok=1J=&XSDB#"1/1R$4M$$ODX-4A=4M1y%-G;$=&X$%=#O/4A=1;A15B$ U?1'/R_b

lk

lk

lk

\U\0-"15$)S4#/4#1yaa u%=;^a u=&k1/D=DW$A15/$b/^ =1
"-",5bF=1;TX-Mb\\R"15$

lk

)S4AB4#1wa

k

lk

%=!^a, wbX`

=1>"-",5H

/4#1w/",\\.$YX/"F4A=J=1$%h).=wN/=G;"4#1/$J4M$SN/OP%='#",5P"G
=OB1k=&N"N
1/N/$U4#1hK8<=$%DX=1/NB4#15k$",%K$DB"8<$



).%-4ANh%=?-"1/N=G;4#.\U\.$$%",-8R
$%%-",%5*bRO/1/1/4#1/5

4A=1/>R_w"1/Nww-#J$O/4A$HUiJ5",RN/A$$.=&V-"1/N/=G;4A",4A=1$%%-",%5*').%-4ANbc=1
E"$%F$JB",J=-4A54#1B"\U\8<=O/MN/1 $%=AP$",-8-!1/NNODYX4#15
$%OB84#1"
N"N1BNH"N





fi

r rr
rrrr
rrrr
rrrr
rrrr
rrrrx
rrrrx
rrrrx
rrrrx
rrrrxx
rrrrS
rrrrS
rrrrS
rrrrS
rrrrSS
rr

fi

2fffff$i

0 p lWW ~
r r
r
rr






r


r
xSr xx


r
xr
r
r r






r
rr
rr
rr r
r
Sr x rr


x











x






0 p l ~
r r
xr
rr x
xrr r x
xr x rr x xx
Sr x r


rr rr Sx xx

xrr x rrr




Sr rr x
x xx rr x Sx
Srr r

xr x rr Sx x
rr




\U4A5OP` kiSO/1/1B4#154#G
$"1/N$%=#O4#=1PA15h$OBA$V=1.jSf_l.:-^``>R_"1/Nw-#
$O/4A%$H

1/N/$K",E"&x:O/1KDB1/=G
1=1w4#1'/?>/R_T"1BNwTX-MJN/=G;"4#1/$bc)S-bc&=K<F"G;DBAb
"104#G
DX="1:J/4#8Ah8"1!-OB1>=Ok=&&OH.f_1>B",k$%1/$b9h"$%F$k4#1!$%N=G;"4#1/$S/"
"
G
=
8<=G
D9A<$%%-OB8<O/"10=$%
4#1"TA=k=&=EYX1/8-BG;",>N=G;"4M1/$bX)S"$%F$
",N"NF1/N'&(HDX1/N/4#1/5LG
=J=KA$$R"1/N=G;A*=1;"$;$%%-O/8<O-S"1/N'$A8<%N'"8<4A=1B$b
\U\8"14AE$%=A
>R%"1/NTX-#wE"$%F$ExcO/4A%&"$%bW=E&"4#M$b4H HAb1/8<=O/1:%-$E"TN"N
1/N$%",%>)k4AC1&(=R8<N/4##78M4#GPY94#15HI*F4#150%=$%=AT"$%F$y)S4A8<=G
DB#%Y$_6B-$%
$%",-8R></"O/$%$SG
G
=*w$%=OR8<$J&=S#",5S4M1/$%"1/8<$H

$'&($'&H:Gh9b=>|aff cZ_J\b0:hTbP(W(0
[

?Oy#"$%y<"G
DBATN=G;"4M14#$y1=
"08#"$$4M8"D9#"1/1/4#1/5>YX1/8-/G'",9HI=54A"1<F"G
D9A=&
"DB#"1B1/4#15"$%C8<=MA8<4A=1)S-T\U\|,{{ 1B8<=O/1%R$;N/47@8OBA4A$b).>8<",%N2"D9#"1/1/4#1/5
N=G;"4M138<=1"4M1/4#15!B",-N3-"1BN=G

JEcHcH

FjI4#1/$%"1/8<$HT\U4A5O/!^!$-=)S$P-O/1:4#G
;8O-$P&=h\U\.b

f_llHFb9"1/N>ZKnWjSKPZ

IJ/."$c$4M1\U4A5O/^E",-J$%=A,",YBAJFjI4#1/$%"1B8<$U/",)--"1/N=G;#*L51-",%N;"88<=RNF

l

4#15
%=L6BcN8#"O/$%<A1/5>G
=FNV)S4#
4#G;$S"$SG'"1*>8#"OB$%$S"$Sfi",-4M",YBA$P]r04A8-/#b
c#G'"1bsnW$xcObB^``eRHik"1/N=Gu4#1/$%"1B8<51R",4A=1
"1/N%-"1/$M",4A=1y$%=&().",-%=?l?n

7

/";YX=Y13D/=F4#NN0Yc*

O/$$4Uik4#1"1/1H'?O?6B5O-y$-=)S$L-O/1/1/4M15'4#G;$E&(=hjI4#1F

$%"1/8<$)S4#0acbU^Fb^acbV,Fbacb"1/N,fi",-4M",YBA$bB6Bh"$c$=&"8R$4AH



"MO$S&=?"$%F$k=&

S$-"G
S$4Ak",SN/4#$DB#"*N'4#1yO-1b:4H HAb:"#NB","LDX=4#1:$YXA=)Q^L=1;c"fi4#$$/=)2RO/1/1/4#1/5
4#G
$&=?a,",-4#",YB#P"$%F$b"1/N$%=w=1HEIJ=O5yN/","T$%4M$k$G'"#bh=Y9$%,",4A=10%=wYX



fi 9>~20$7`$22



$##!2F

1000
FF
IPP
BLACKBOX
100

10
sec.

j

1

0.1

0.01
5

10

15

20
#variables

25

30

lOCbi5/iQr?iC{QB#J 5hCl!0h`iCl
CiC~5Ji"xC~5iCCEs#iff00h0!5
iEJ505iNlClihiCiC~5!iC"`iE!iiJl55pAiC
QBQ# i&Cs5C{C5C5C~C0QffQJ J/i5
JC5C~!#i3CiC~5ffs/lffOi+0iff~i5+l!CsilC
h{0i00h0!iOCh{0i5OisiC5QC0J~lbi5s5~ixhi
C~00h0CiQs5il5=CQ-ixC5Jili=x#C5ii!5Qhir
OiOCChh&C0OQB#J Cb5+5QO/ i!CJ!iCOC5 ;5Clii
/il{iCip;i!1B`50h3i~``!i~iQi!0ih
ilC5b1{(~!l50lC5ruiKhClb!`i ChKihlC5b
50hiiO5?CCffEi=W+Q~l!5?ilQiCi!ib5ChCh&5il!
iCil&#~sl5bi50h!i~ibC5C055i
00h0!5QQx!xC5{ilh{0i5!!C5Q0iffCx hi~lCQC0Jlb
iCNlJi5b5
pN~lbhiJ`lJih5 #s5CC0!iC!ECliC+CCli!i
lCl1{!iC!"iC5KN !C0hKs5C5ilI5i`
silbCl3C0 5C~x&!{(NCh5 (iOiCCC
s5Ch!0

fiff ff!"#%$& ('")+*-,/.'1032435ff 6ff 789$&:;5ff-<$&%$&ff1=?>@AffB;CD;EF>@ FGH$I 6J>>IAffBff F
8K>IL$I FGMJEfi<$N%$Iff1ff:F
P!QR

fiS6TU<U<VWYXZX\[^]`_ba+_bc
d1egfihkj-lZmonplqr+stmFjBrvuxwzy{r+|Fr~}Bbr4m1

ib5lC C0ii !5is5(ii5(l/55b"0p 0ii
!i!C~lslxCffs(El5&505`ff 5bb5siu
&Ch{s@ LKC5Qii5i#i#ihi1 ?/iQ0h50hN{0!i~i
iC5Ch0iC0lElih5J Sl s! bJCQ! +h5C~5
"EQ5G5`05OiliCxiC~5+50hh 0ii=iCL ChC!5h!C5
ffiCi!x~#iCxh75hC!bC5C!h`+hih`iC~J5!lO~lC!C~5
CsQiB~sh5bl5hCCxb5#~l!+5liC{< xCs5C5b
5ih7i5
(i#~lE!C0lCi 5hCCxb55N5ih5IhCbiCIlxl
5i`siiC~Jl0i is!xiCCs5CC0ipC5~l 5~h+
~sh5bi=C=iC"C09 lJ+CCl5Jh C0iC"Ci5ih0Ci
Ch55 0lC#i5!J0-ix0!il!0Cs5CC+
"9"A3Z1z`Z-34Y/3

(/C5lbi5l0l`l`i/505Wi J5~5l~sh5 E

N!i0hC5~ii0ff!i0 i~lCb?ixli!5CC5?J55Es
C0?!i0hC5~6S~5~lbB=C5/ih~5&CxQiiihCN-ChJ
ili!iC~5505iC(CCC`50hh!i~`O `5C/!?i~lC5Ch0
Ji!ClCi?5CC5bih053C5i(s5ii55ffWi=CiC5 iliC5l
5iC#ili0i5CC0O~lC~h5OiliihlliCJ~l!+5p!h
50hi5iCi=h0C5i!50h!ihC` &5i`5ClChhC
ib5hC!bC5?xCs5C5b lCxli#C# fi C9 +5b?!iC?~l!l0lCO?5i
i=s5ii5hCCxb55C5llCEhi!h!6 /+5 iC il
0`CliCCx0iilC!#il ~l!lCh0lC#lCN+5!5i~i~Eil"
F ihi+lClixC ( 5x5~lC~5 0OliO/!CCi5bi5h!C5
J! +h5C~5#s5"ihi1 iC"?!i0hC5~E0/l
0? liCxiC~5x05&C
0CC`055-53ll(5CiC(~l
~iN5lbJ0i5CK~hi~O~!xQ5-5NlClC~r5~l
50hhI0i{Cx`ihi H5!G-0hx0liOiC!0h!x!x
IC5#5/ih~5"CxE!CiJQibCC~5{L5~lv

~!iCC ihCx5"ii G50h(Cis7~iCC
hCCx5h!Ci!
l!Clh!5C0O0~lCx55!/C~r5~l 0
(C5i55b5~shx5 iff~Ch5ihGi5iiih!C s5C~5O
0ihC5`h=lhCxJI5h!C#li< J#5lbC s5b~l!l0lC
ihC555lb! +h5 C5hxQ!iC- 5`ix!h50lbh5Cp
iC~i~1E!i`0hC5~hi
1i5< fflCb5 l3i
0xii1 ?CWiZ iJQQiJC5xCpbh! ~lsllC~C
iliffCiC~5x05OhNi!{ChC!5CC5Jh=!55b5{
ihlxCib!l!~hCO#50hh0ii #C5&lxxOx!Cx
5l
Q555~Jls5#0iC05NhC~5iOhiCli
P!QQ

fi+WY&xcFWX46_bXZ_b~WgTYX\Z~TY4S?_bZg&~gv~_W~
L5ihi?!iO05J`il"~5O{CxE!!0
QlC b!siff~lC5i 5Q`Ch!iffE b5iQChi

C55x0iQC0~lCbE~~5C&Nh5lff550h
C5lxL 5#CCxi0iOiliB!iC~5x0i

Nx55#5ii~hlJ50#hi#x{ihJ`ilN&C ~l!

0lNi?5OiOiE0i

po
0l i00h0lCi50h5h!C50 !55 5=BpshlCi!~l
CC0lQill?iCO5~i{ sC5C55iBO0l00h0lC
&
Cxh"s5~ +5!5ilC{x"/Hs5i=i5 iC C&5Jsl!5lL
5i
(~l!05s/ihiC~i#lCE55b0l 1ixh5Ch51<
G`s/ihiC~`iL O0hCCCx{`!xiChlA! LC bs5KJJp(liC
/
5C5/i ~C#`/lQli!bCOi#li5iiQsi
!i!hffrt
Z@@@g+iCt
!A&bl!i!li5iJi0C!05bC#&!~
5b0l"CiCllx
!iJJi05OCilO!iCC#l`i
iEhilEiJ5i1l{0i&iLp
M9@#F&A iC
6<Y50h
5h!C5E5 0i"C9 +5!~i&p
M9@#F&A! `i!i&li`i&i
CilCs5iCJiQ5#50Js/ii`lili /lCJ!iCCQli5
i&3 5I h5i&x
6<Yl&x!55b0liCi&~isi
Cio
!/ii#5il\
AO#li5iO
CxI OiiC5xl
i5 &l&~i5slCC5C~s5Gs5CiOi{ EiCNl~l!lCh0l
Gih5 hC5L< pGibLii=l~shx5 ChE!/!ff!lbOb{
s/ihiC~i5/ih~5KCxE!~l05K1 !`hilb/i0ICx
h0ii
ffiCi`C0b`0hiJ~i!JCi ~l ixCiii3 !i!C
/lul 0s5Ch!0liC5? hi0CJslCCCOiff5~l
C ll`iC
NI@K6
z~+MF&b /h~siClCish0iffhC55b0lY &z@%I<I#F&A!< (g
~FFI5 Z@@@g IAb+`
&! &CZ#I5M ?</# g!&# \A@AOM 4A@Zr GB J
4A@ZArJp++ bFzZ "&+ xZ!%IY YY"z3 M9@#F&A!iC
M%?p
?</
v
Li (C&(si5~ Ail`iCNC5/l
C s5bCiC~5N i1hi!iC~5&0i5LGCCC~l(C0`h53
5ilx1l`bG 5~iC0li5(G(5Ci1~ CN5~lCCJCQi
slGiBl`iCJ` zhEiBiLph! hCili5 L0
l~ 5~lCCp v
z~!#F&ANCh55 0lC=hiCClNi505(i

` !CJ0i5h0iCx5b
il!i&iC#JCi
0i r &I@bK3iC
&A!?C5Opbh! GCiC~5?!CGCsEi#hi
li5Ch05Gl5Oh0Jx"9 E`E!ii5 ~i!5ON&~lslLC5#p
&Z#I5li~lbi5K/l
G!iE shi!si5(pCh5iCC4

~lsl"liC5&C5E0iOxCiC~5i?C5s5~i~l+l"!5p
&z@%I<I#F&A`iC
(g~FFI5iCl`i5h05"0hlCC
00iiCO
0
i~ 5~iC
0lCff5s5~i5ir
&Ab+?/l ~lC5hih!i(
P!Q

fiS6TU<U<VWYXZX\[^]`_ba+_bc

s`~hCiCi5M9@#F&A!Q G5x55Gs`!xi~5iCxMG
0lCJC55s5C
i5i i5l ~l!l0lCOi5+EhiLEh5s5~iEiCJlG5i
iLixl~i!LhCi;JClG~l!lh0l!`Cx1hiCCl9 5ACx
hCG!ix5l(5i1i+ffiC C5Cih0i50Q0hC5JllG!ii
lbl!Ci`iCE+O@ 7Q5`i?E~l!0hC s5bJC
E!C{h0l5/imCi!5=/i~i!@ 7C`b!s553"s5il!0!
3C5h55sC0#"!iCCx"/hii+i#!x!xhi0hl
iN0iJ00hiC~!0/lCCKs5! +h5 hxii`CCi3 l
5C3hC!Aff~l!"C"~+5b`35ilC0"iG5h~575i
~lC!Cl3K! 4Gbii!x~lChCCl3I! 0G5~lCC A!CiiJ;C5C
i"i5iKl(!xiCCGiIi 5ilC0"9 i575W`i!0iN
liL`0`i7 i0NslC!Gi CL5~l=Lh5 C01`50i0!Nxi
lCx&0!+5!Cs+i~liC5 Li5Li0!Ci?Ch55 0lC
Oi=C`0h9
#5hCliC!C?Jlb5i!-0lC (J~i`5JC0!0h05
/i5iNlixiQlCQiiihCxJ5h!C5!ix0+5!5iQi#ii
!`lixr~l iCi{sO5h5 xi+! +h5C~5Q`C s5Ciiffi
5h!C5JxJ0C!5`ihl C s5bJliC5
"9" ?333z



z`

iQlhCCCxOx i5l0l~l!lCh0l`!iC`Ell!i`&li5
i+#5s5~ihCC!x-iCOx xi!05~l!CSl5
~l!lCh0l(i(h`C0SiCl CCC{!i=i~i!i15i~5(C
E!C(!iC`hCCCx1b3C5i5C/ ]rGlCGC5lC0L5ih
~l!lCh0lLb h5
HiC!O/i5CSC=i~l!Ol= H iCCOi5/ih~5GC
E!CEl
ff i!C#/iJ?K505#lrQh5< C5+5~i
!xi~5L"fi
i0hhC5~~l!l0l
H` lC6 OE`0l

!iC
H C/iJ~i!iC#!x!x
iliffCi!~5#iCN5!/C
i~lCJChCCx?CiO&!hQxC5hl`il#CCCCh5CC5ih0i5L0i5
sJli"li0
lhOiO0i?5ihlixiCE5ih~l!lCh0l05ih0i5h!CC#xi
iCiC~5`C0CliO Ci!~5`5ih{lix`0iix! i9 i!
!ixihl `i?OiE0ii5l5ih0lCii hCCCx#50i!~lChi
i{~hC0!C50li?hCbs5CiJC0lhiC5#i5Chi
!5lilC x5CsliQiCIli5`1/ Cx lN!C5l5C
C0lb&+C55b3CC0Ql!0i/i~ii-iC5ElhlbCiC
C@ 7liChCC5CSCi~lC A`lEl"CE/CiCL@ Al!xiCh
~!iCCC{ixlCi#50hC5p
&z@%I<IMFIALiC
6bgA~FFI5BhlbCiC3
0i50Cl!KiliilixC0~lC0!15JC&
5s5i1h{/i(hlbl~l!CCCG0i5&/i!i!h&C 5!/C
i~lCiC5/ih~5NCxE!CBJC#xCC05QC0ilCh~5#isiiC~

!Y*B$IF;; <ff75#) " ;C#O@#$I 7%$Nffff>I ff>@>I:FO@Gff FG3>!735ff 6>I87F$I;;#G FAffff%$&>@ FG->&8~O@ff FB%%$&$Iff <>&7?>@""!H$N:ffC>IH 67b#Aff$N%$&ff$O@@$&;$&$NJ;$I; v>L$I$ x@$&>I ;$&;J ;
$&ff3 ffff$# %&N% 11# F8K>IL$&ffD : F"g' 8J:FO 7F(%*) F>&b+ L$I F ,%+,
' 7>@L$&C F !ff;9
P!.-

fi+WY&xcFWX46_bXZ_b~WgTYX\Z~TY4S?_bZg&~gv~_W~

9 :;:;<>=?A@CB
@CN,OQPG:;RN.ST@CUGV H NEW$:
@CN,OQPG:;RN.ST@CUGV L NEW$:
STZ[<>\]O>^E:_<&R6NES;@`U
@C@`U,N.b&<>S
3 S;S;<&Z`U,<&cEO><>< @C@
3d STZ`U
STZCWAWe<&S
7g N.^JcEfAZCNE:_h;Z Z`O>:
ZCO>N.fAZ`OVj95k g
ZCO>N.fAZ`OVmlGn ipo6g 4
ZCO>N.fAZ`OVml,qrn l
N*sYZC<
WAS;ZC=t<
BG:_h;<&S;B
lAOQuA<&U @[<
qffZCST<>RN.ST@CU
q:;W

/0DED RG/1F H/
L$F -.K
-AF K.D KAF HEI
L$F <L R
KEI,F R*H
P!QAFXI P
H QAF -.K
P,F RJI
.HAF R*K
RA5F PFR
IJ-AF -.P,F K
P,F R
-AF F- P
R*HAF -
RQAFXI*L
HEI,FXIJD HEI,F H.L$F D.D

H /2D /
FRJ3
P,FXIJH
QAF Q
I,F QJL
HA5F P*L
LEKAF -EI
IJHAFX!I Q
DED AFXIJH
5F P
RJI,F -EI
F- P,F -
IJ-AF -.P,F -
P,F FH P
-AF F- P
K A5F PFR
.-AFXI.I
H FD P
DED -AF H Q
-AF QFP

/
45/

K /
46F 3 H.-AF D.D
IJKA5F PJDED K$F PJL
I,F RL
5F PFR
P,F K.AF Q
F -.HAF
DED.D F L R
I*L$5F PJH
F .H
FXIJH
-AF -FP
Q F LEH
Q.KAF -
L F <L P
P F H.L
-AF RJI

FP,F EI
AQ F HR
Q.-AF -FP

K.KAFXI
H F F- P
I*L$F
H F Q
DED IAF -YI
I,F K
KAF5P!
RAF RR
F- PAF IJL
P,F <L R
L$F QJL
-AF F- P
QFP,F Q
R F K.D LEH$F
DED $F PFP
P,F LYI

7L<R,/2F Q /
FL
5F P
IJ-$F -EQ F EFI R,F HYI
-AF QEI
DED IAF -ED FD R
IJ-$F -EH.K$F QFQ
L PAF
F HEI
F L.L
-AF F- P
<L R,F F-
RJIA5F RJH
RR,F Q
P FD H
P,F FL Q

7/
3

PJ-$F PEI
-AF .Q H

-$F H
IJ-$F -ED PJK$F I.L PAF FK Q
-AF K
EIAF -AF FL Q
RQ$F QP
H $F FK
P!Q$F PQ
-AF Q.K
F-
-AF F- P
!I Q$F LGI
EIAF PJL
H Q$F P.H
-EIAF <K R
-AFXFI R

7545/

PJ-$F H.L
-$F PR
P.IAF

IJ-$F -ED P!Q$F LYLEH$F F
F QFQ
Q$5F RJH
-$F R
LeF L R
-$F Q
EIAF LGI
-$F IEI
-$F K.L
-$F - P
Q$F I.K
QEIAF H
PAF P.H
R,F L
-$F

7 K$48F .3 L
K$F DED
LE-$F KYI
IJ-$F -ED L F -.L
L F LEL
PA5F RFR
D.D 5F RJH
-$F DED
PA5F RJD.D F .L
!I $F -E-$F I.K
-$F HEK
-$F -P
PJK$F K P
Q.K$F P
H$5F RFR
QEIAF K.L
-$F -<R

lCi0Oih0i5NCCCCE+JCli/iis5lb~llh0lCQiOh55
Ch!CN5CC{iC50hh0iAix(0&Cl lvH` (iC
H?ff ~lCC5ff!h3lC(C sE3ili!iC~50il(~l!lCh0l
0i5&0!Ci l 5ihKi~l!05 iC&~llh0lC&{i
lix
ffK!l{i!00lCl Kl!i(ii5/i{5ih]CliJ05i !i
i~l!lh0lC h=OilCbI 0x
wzy(|{ I!ii&!i!{+hih`iC~5
i5ihhChK!i5N55KClN~l!lCh0lIs/ih5Kl!ib1s
CiC1iNli BC51l!iC~i3~lCb53CE+iiN!0Nl
~l!lCh0l li5 Si5
(l!C"! +i5x0!&~hhlGCi !li
GC s5C~Ns5AhCC! 5`i5ihAi+; ii h9 iQh0Ci
s50i5hl si!!0l7C 5i9 !0hihG0i!~5!5
i~l!C~l5C~b0iiQhCbC s5C~550i5lC0!iCClC
0slJ&C!liC0 (COC5NClxxl!0ih0iB5
0i5hl5
i5( ~}EL JQi5xi! b CLC0{si
!i!h iCK +hih 5b!i(lK"li5IliGJ5li5ILhiCCl !iC~
/l C l`iO!i!0!x&C0#SiQCi;lC`s5Ci+E Ci0!
C0 mJSiCi" sff0i&COiCECbbsi5x OCCC0 si55!miC
s5C5i&C s5b`lLi"CiC~iC5Nx#/iOCi" OCi0!
| QJb!
iQ 7xSiJ0C!5iJ iQC s5 s5C5i#i~ihCCE
QlxiCxh!Cl
Ql! Ci!0&iBi!i5{l~l!C
Csbbsi5xWiCBC| 0 (i#h iCAs5CiC s5biiC

P!



fiS6TU<U<VWYXZX\[^]`_ba+_bc

h;J/i5G~l!CECi!0!xC0si~ihCC`!l`i=Ch!l
+lhi`lC~l5`0{iCix5K
7hxi(rC0Ci0!1
1
| 05ip
5i#5Ci+Ci4
0C5 5~#b!!bbsi5hQiC{5C0Js/ihl!ib
sCi Bhxiis5Ems/ih lCi sCi " (
50hC0ilixC=~~C# bF
i?~l!lh0l!Bs5Ci5E5Ci
E~i~NClE!0 ~lCx"iO+&li5Lb5OiE~llh0lC5Jr $
i5#O/lCCC0#l~llh0l{Asi5hlCibs#CiiCi
~l!lCh0l= i/il
,sCi!~5OO C s5 s5Cir
. ff;QiSi
lNi=!Ql!hN!iC~i
(00C0x 55""!ihJmi!"i~llh0lC&5!#/l
1hCxl`iOh5El5C"LiChCCh!ii5" 5Cx"0sl
l!ibChi55bx`Ci5Q5!0slO s5~QC0Oh5s5~i5CC
CiOl"s/ihi!~"lixJJE0! `!iJi~l!lCh0lCElEOhG
hC5{ll! O#l#!ClQ{5i5

U,NE=t^.Z[f
95:T:;<>=?$@[B
@[N,OQP,:;R6NES;@`UGV H N.We:
@[N,OQP,:;R6NES;@`UGV L N.We:
S;ZC<(\]O&^.:;<>RN.ST@CU
@C@CU,NEb><&S
3 STST<>Z`U,<c.O(<&< @[@
3d STZCU
STZ[WAW<>S
7g NE^.c.fAZ`N.:mhTZ ZCO&:
Z`O(NEfAZCO(V9 k g
Z`O(NEfAZCO(Vjl,n ipo8g 4
Z`O(NEfAZCO(VjlAqrn l
N*sGZC<
WASTZC=<
B,:_h;<>STB
l,OQuA<U @C<
qffZCS;<&R6NES;@`U
q:;W

3
4
7
/2 /
/ 4 7 / 57 4 2/ /
/ 3 7 / 57 3 2/ /
/ 3
4 / 84 3

/ //

/ / /
/
/
/ /
/ / / /
/
/
/
/
/ / / /

/
/ / / /
/


/ / /










/


/

l!OJs5~QihCxlEl iCihCCCii5C-
h9 5 N il!ibCi5"iCihi5LhCCCx&s/ihiC~
+OliiCN+Jh"~l!lh0l
lhE! E&sCCb`i/lOOl5!/iffH i!H
h5+CxhNs5~l&i~i"/l Ohl Ci 5iGi55+
0/l~l!lh0lC ii5iilCC=hC5C!x5i5Gb"l~l!C
P!FP

fi+WY&xcFWX46_bXZ_b~WgTYX\Z~TY4S?_bZg&~gv~_W~

0!ip{5ih"~lCs5CiQiff5s5~i!ihbil!C~l!l0l
Gi~iGh7hC5<;~l!057C"s5C5iCLi~i(hCh5
l(rs/ihiC~{&Chi5KlCi i{0!{O
>l!ib
ihiC5B0!CE
iC(ih5s5~i05b(5CiCi
~i!is~lCC&i( ~ih5+h0
{OhGi~ii=iC"C!ihbil!C
~l!lCh0l3xz
Wi?CE!lE5CSCi~lC5"i!1

Cx
CiC~55iCIiC
!(mCi!~5IO+hih`iC~N
l!ib`sJCi"CC05{{
>t
JCJl/l~lC!l! l5!i Ci!~#505i
CQKCi!~ 505Q50hi0J5x05#0shilJl`iC
5CC0/i5i{!iilCC~l!lCh0ls5CiiQl!ibCi5`
Eli!r~lbhihO0OlC
i5iiiQhJsiiC~Jiii
Jl!iC~5O0bCE051ilixCiCG!ihbihlCC ~l!l0lCs
C0xE!0JiQifflCiC~55hClx hi~lCQs55hC!bC5QC0
lCN~l ~i~iIl`iCi~i!i+hih`iC~Ci5I
(gAFFI53`iilCC~l!lh0l5CiEC5CSCi~l!!ii5
5`iilCC~l!lh0l`C5CxE!OC5CSCi~lCCCis~
Ci iLCisi!hi5"Li {ili=JC0 lixCJCs/ihiC~
Q!i5{{i+!l!ihbil!C~l!l0lOC!05b`5i5Jlb
i~ls53`5hCCxb5Chl!Gx(l+5~l!l0l
(`5`0 C0
i/5{hCCCx5Q505#0lC&xsQCi
J5`05
Wis5C5iiQCi55x0!&i#i!xCiC~5!lCixCSi~i( /iQi
5 i+C0 ~l0#JC s5C~5?s5`ih0iCCCCJ5lhi0bi~l!0
h0lCQl!CCi!~50Cii5I px
li!C505OChi
s/ihiC~~lCx5 3ii!iilC!I~l!lh0lCxCC0CL 5i#i0ib0i
iC9 +5bO!iC~&5055r &CMIS5~h+5L(5~l =/i ~i!i
/lCCKN/lIrisi``Kl iClxClClN!ix5Ch
C/h!x{1iiii&{Nl BWii~l15iC"
0O+-i!0l
}OCff0 !ixQ#lE5x
J#5Ch
5`0iQ!NC1iii 0 B!5x0i#Ll
]0Jb!+?C0&05i !iO/OLl Eshbl ]is
0iC0lCC&"5lb Ii5`05OCCSC5Qi?i~l
l!0h!x!xihhCJ5/ih~5GCE!Wii0 /lO~l!C
LCCil{! &i!00l OCJ&C s5b 50hG5hC!bC& !
5lC0C5!iilC!&~l!lh0l&5ffCi?C5C/!li~lC0!CBiOi
5/ih~5KCE!5C~~55b&5C5v
l5CSCi~lCs/ihiC~i
ihiC5iliQib5iQi#!i5b5i5b`5!/C!i~lC5/ih~5
CxE!Chi5s/ihi!~lC+i i#l
0LliC5Bs5Nii5
lC
&A+# (Ch57~l!Cl!?bOlCOi i50hh{h0i
i5C0Qs5CCsi&ChElClixBI!~i!/iB!0ffB 6<Y Cli
h!x!xiQ550+/ii(5i1iliK Al1i!0CCili
0 ~+lC5 ixib0hi!lC l{CiQsQ-i!0lCi
/0C55~lC0ffi&bhi~lEs5E5Cih~5CxE!CiC&5CSCli~lC
Ch!C{C0&Ch~lCh5b1i~l&il&ii#lC!i!ClixCJCis
~!i51b1C` s5~&!0EChC!5h!CCiElC9 +5bE50hhKh0l5
P!.H

fiS6TU<U<VWYXZX\[^]`_ba+_bc

pCE!5CSCQi~lCChCCxL!i5 `N!xiChl iC10bi
+lC`hC~5ihNl 5ih;hl 0(C0NK!0 i5hll C5i5"
CisilCi& 5ii=C!0 s5~l5Cih~5CxE!0 EC{i
hi01Ji5CSCi~l!ChC5ElCCC5~503hC~5ihiO5ih0NChCL
C5iC!h#50h!Wi#J{Chi!hCC&Si~i5C5!&+hih`iC~s5C!
~+lC5 ix{C!QC005!~lC h5
(Ci~l!0&~lCCh0lii=i~lCJihhC~lChh0lNi?l!{5!/C
l51Bbi0l lE/l~lC`Ci l ! 1Ji!00lK& C0
5!/C?i~lCE05iL5!/C 7N!is/ihiC~hlCib"x(ilii
l!i!C"CliC1CxE5+5xi(h/il{!iilC!I~l!lh0lCE!
5/ih~51CxE!C!Chibhi~l(C0Cilx5 0+iir3l
lixCffC5CSCi~lCEChC!sl5"i(hlx(5hx~l1l350h!i~i
YY/zi&i3x5~l 0 `/lCC1!0E05iKC5i{CC5!iC~5ih
hlC0slfi AiffCl0~lCh5NC5CSCBpiOliC5lC;i~lC
0QCh!50ix
6<Y0C0l?C#i~lC0#0C!x0!E5ih`0ilCxh0
iff~lCh5N5CSCLlOiEi55fi i5 `hi=ihEi5h~lLb5OCCix
5i7l!ib`Chi55bxs/ihiC~i]p7l`iCL &z@%I<I#F&AIiC
(gAFFI5C5CSC!i~l!i{!hCOlQbib`sl!5lWi#lxl
!0C5QCJC0!+5!#s5iChi5-5"!xiNiLliCxlJC0 0E~Ci/i
l5i?i+l!
&z@%I<IMFIA!Ch !N5~h+5G15~l
C =O
i~ 5~5(si51Cx{ChSii
A5CiCh/ix i5i?i~ 5~
Ch0i5{O``E~l!ClCi! +5~ }5-5`iCiJ5C
0iOibi~ 5~lisJ!hSi@ 7J5J +5~C0Cii~ 5~5iC
i~ 5~Oli 0J0hO0lrlihxCii~ 5~ CCOChSi
bh
"9"9 --/-#Z

(ixNbi5l051C+5~EC0Cu5hC!bC5C5il1lCl(5i{l

!0hx~l!l0lC uiCGOsEi"i C05+5~i&lxlG5i
/iliC0si1 iC1miC0i53"li@ AiblCiBxi&Ch3+lx
K~l!0(llI5iK5KlC!iCiCiCK(ll0i
("5
~lCb5`COCs
"iiOiC`Is5Ci5`C9 +5biiC b!s
ll"Qii=iC 55G0sllC+iC~Ei&5h~hs5Lx"i5~l
l O#lJ5hC#{li5JOxlNQ5
JCEC0"lh` 0hEili!9 5LxilC iC iCiiilCOlC`!
!h&lxiC~N00!5CC0?C 5hC!bC50Ni1C/C/i`ih5C
lCl`5Ci`~l!0hl
O0bii!/!CiC`0/iQCxhCb
s5C5i5=C/Cl`O/ll~lC! !iC~J505ihC?3Cp
iC~E505Ji!-0lCJ0!0!{5Cih~5LCE!x{!ihbil!C
5x05i/5G5C"hiiC+iCNC0 &0&l`iCJOlxl
5i!0`Ci53i~lix!iilCC~l!l0lCl!~hC{5~lC1i
00lCECCL!is5iJClix1C0&?55~il!9 5!

5WJ5ixC0Ji!hi50sl
ICZ#IliCJC5~5Cx5~lM
Nhi+iiCCC1Kl8ElCx lClN!iG?mC5hxli5!hx1
P!JL

fi+WY&xcFWX46_bXZ_b~WgTYX\Z~TY4S?_bZg&~gv~_W~

3
4
7
U,NE=t^.Z[f
/
2
/
/


4
7

/
7
5
4
/
2
/
/


3
7

/
7
5
3
/
2
/
/


3
95:T:;<>=?$@[B



4 / 84 3





@[N,OQP,:;R6NES;@`UGV H N.We:

@[N,OQP,:;R6NES;@`UGV L N.We:


S;ZC<(\]O&^.:;<>RN.ST@CU

@C@CU,NEb><&S
S3 T<><O(<&@[@






S3 TZ`U,c.<
/
/
STZCU

STZ[WAW<>S
/
/
^7 .fAN.Z
/

g NEc.Z`:mhTZCO&:




Z`O(NEfAZCO(V9 k g


Z`O(NEfAZCO(Vjl,n ipo8g 4 /

Z`O(NEfAZCO(VjlAqrn l
N*sGZC<
/ / / /
WASTZC=<
B,:_h;<>STB
l,OQuA<U @C<


qffZCS;<&R6NES;@`U

/
q:;W
l OJs5~QihCxlEl iCihCCCii5C-
h9 5islCi E!i5iihi5ll5is/ihiC~
+OliiCN+Jh"~l!lh0l
!iLs-i!0l3!ix"Gl JH55W&GC
JhiibC` 5hx5Cxli!xiClC~hCxQ!hi00l
!i5ll`5iC55Cih~5CxE! xiilCCO&iCi
ib ~!iC0lL/iCr5C0i5LLGCxhL5i~5(Cx
!CxC#!i!#B !#sC5N5CiC~505O0ilCCWi!
l!L/l~lC`C`7 C!iElh O!x!xLiC5/ih~5
CxE!EJ0i (i5C`C s5b50hhh0i(5hC(Ci
!i!M (!lC0C##CC CC s5b05is5C5i#C0#C50hhLC
~C!Wi5Qs5C5iQ
0QllCi=50h!i~i /ih~5{CE! 5
!05iAlhiJsi`~lG50hhA/i{0 7s0iC0l=iC
iCCQCi5#!0C0O0`5b#!i{Ch~C+M 5NCxE!C5
!05i=Qlx0l!CiOiQ5hiCCliC x!CE0sQ-i!0l
i!i5lliiC507 #C"i~lC`l? lhC1CNs0 0
iC!ii(p bFz!5Cl5lK&C3 LiChl5(h5
~lCbl
OQ +/ihl5hCLx
SCiis55Ch
0i5#CC~l`+5{C5Oi~lCI 5{QCi&h5Q ~l! J0li=J
5/ih~53!x!x!i!hiQ5h5~lC E!hJ!x!x`!xiCh
P!EI

fiS6TU<U<VWYXZX\[^]`_ba+_bc

l7"i{CiC=#hiClblL5CihCh(5Ci!i!0!xi Oi7
5~l
0ffCxili5L!ih5lG5ih(iBi!Lh5C 5ih0i5=&pL!i
h550l!CCi i"lxlCCN"~ih5~`ihhChC0Qii#iQ
5i0i0iQ#Ci{~i5+l!CE-iCO/i#5/ih~5CE!!xiCh
Cixib~l!0~lChh0liBix+i~lCQihCQ~lChh0liBl!5!/C
l5 5C~5&#hlbl/l~l!C?i+lC! Ql!C~s5~5
OlClClihElCl"5Ci"s/ihiC~& ihi5GhCCl
5!/Ci~lCKJCx&xCC05&C0Ni~lClKNih5!0I({iliJ0i
Si~!Ci~lCh55CSCK A!C52 Gblxl0C0hOh5Q5i!iQlx5
il!Gx1
Iz@I<@MF&GiC
6bgA~FFICliCz
!`iCEQ530hlCC
CilhlC(!+ffCCC{50h!i~`35!/Ci~lCl5&5iC
l!ibGhiEll(iC=5+5xiG5(CCx50hh3C
E!CffJlClC`5lC!!0hii h!Q~!iC0lEl!
C0i 0si`0sl!x05i +5!5iiCxE!CChiCl`"iCCxi~lC
{5bOiLx"50h is0iChG{50h 5l&O05G
C5CSCbi~lC!~5ihhl~ibCxbC5~lis#ilil 5
0iE5J!JC{Q5< 1!x05i

ff_,8A

J(l{xsii ~lCC5~lC{iC 0CChlihClil5si5A
00lC
!ix5{i#/iQ0h10{!i~`50hhiC3C5hxE0iC0l(b1lih
C5S lC?^ 5=!b

Hil5hi{s5i?ii { ff} SQCk Ch!b
i!NJ~lCC5~lo J5h
h0&i=5!/C!i~lCQ5hx#GOi#S5ii5i~l!6p!
i!`h5-i!~5~l"5hCiCx }O+5=iB!b
C!h0liNiCC5KiliJ5lK5Ch3iCl{bb5!iC
< iC0 iii iCCiC0Cliiliff0i5CC0!Clih 5C5=!b
`iC0Cl(iQrJ ChC~5{!!i\S5C <iCM0ii0/
!5{x5i#/l < 5LiCNih4p !b
(L!5iL!C5Ii#i5"~l!5~lCINh5s5~i"5~l!`i5iCi 3`C
/Cl1N~lC5~l(C0CiEiis5(5bl5=!is5(5~ilC9 50E
!h!iCCx~l+l10OrQbh!
!0`ix(si55(
Oh5~l

!0l"iC&5ChlL5i(lE50h 0i#5~5b0CCli50!i5Ll
i!h-0lGC0&s505 5~l0l 5~50h"s5iC&b5 /iQ0h
50hKGiQ0h5hx0Wi?C5~l!i50hhIiCK5Ch`0{hii
J{iiEi` HC55i5h3 550!&hCiCi50hhIC5~l
il!iQ0hCOl Eili?xv

SlC6 5! b J!#Q5isN5L
P!.K

fi+WY&xcFWX46_bXZ_b~WgTYX\Z~TY4S?_bZg&~gv~_W~

~l!C5l 0i5lCGlC~iff505i3Si~&CiC~`N`!i0iiC
lCCC5lbCNiO0E0 Chx&50hh
/iCxCQiC
iC50i
p! bbi#Ch5~liffC5hxO!5i# C
K~l!5QCiC~5ilx/l OC5b00h!COili 7ib5Q/l
ili"5ihSi~NJSCC~l(C0C51~hi~/i5ihK0{C{ih0h50h
&05OC5hx50i+C5JCC~l!5GCiC~5i5=i l&/ih0l
l!h{Si~OCi!0!`sihCi5"&CiClCi
p h5li5~l!C5Ci6 ffCC5hxJ/l~h0l{5ihL50hh0i
!JCi55ls/ih#iO0C!lih55 JCiE5LL5~l4
!CxJ
/iJl#!0CC ? 50h"h0iiCN5!/C+i~lCChC!5CCi

85 ;5Gm85z
,_ff

(CiC55b5(i(0CCli(li !s5C5b!i!CC0=0s5
ls/ihi~{5hCClii(l(``Fp ih iQ5b 50i0!+5!hC0h
lixC#l CiJO5xC 5N55~l!5l`iQ0h0 !i~
50h(iCG5h0iC0lLi05b"lih55? Ci ff+
C5` { ff}LiiihC (CIi~!x&5-5llK35ih750h
0iGJlll!li{"i{0SC50liJ"0i!
CiO&L5~lC
F iOC9+ 5!~ ?Cl 5 5J`Ci5?iB50hhGh0ii~lE!CxC

E!C~l!J50hCiiiCJ0i5C#i+sSC5h!hCCC
5h!C5Cxh0i5l~iCx5-5NllC
&{C5i5bl550hx5l !l3xC0&5ilC&/i?& 5!~3
h!~hi?Cis5 C0C5b iCCC`s5Ch!0O5! NC5iiO`0
i/i~?!iC+5!hC0hC`5C05Lii?lC~l`h5
KbiI/i{lCxs"50C0 ICZ#IiJCLl"!ix`57s
hiC+ih5/l lhbl 1iiC5~CE iiC s5b50hh!i~Nh!~
Ci i~ii C0hiCl CiC~55/ii x Ci5E!C!hC#C0
C s5b50h!00CCiC0/iihi!i0hiClCiGC5
/iC 0JO 5C~i?3l{ibi=s5CC0is5{iEC0
i!h-0lNC/i~i
ff0iE~#& si55O05L0siiECi&x i5l05"E0&!i~5i
!xiCC&s5Ch!0liOi` p! b!Ci~l5~5"5!isC0
5b/xC0hi~h&!0hih/iC s5b!CJi!iC!i=i&CC5C
iCg iixC&iC{!05i!J{50h"!i~iJCx!iJ5iNCQ-lCl
/i#!iCCxEl`iCCCC5 ihiff~l!~`C0#C5s5~ii+
0!i~5Q~!!5s5~Q5-5{ili=CxiC~5 Ll#iBC5bQ+5!hC0h
lixC0!!05bs5l
!> !0i=C0-lCl
A< iC= 0i (
i0!Clihl si55/luCiislbilOQJ5i#JCi
ix hi~lE!0?Si~& !iCCxJiE~C!0iCh5I~lCxClCBlQ50hh!i~
h!~`/l C0 CiliQ1!0E550hhEGLC3C0&iCl0i
5C5#C{!0#i?-llENli5!xiCC&i{s5llQ
p1C0&~l ~0l`50h"s`i`l1C0&!xiCC{550hh
5iCx i57sl C0iliOK{!5xIlCKis3Ci5i

.'g13 ffOI%$NffH76 !ff> .$&-$I 6>IFff>@ 6>&8G>I E<OI:F MH$NG ?F>G5g'/>I ff6T+b FH,>J(
P!R

fiS6TU<U<VWYXZX\[^]`_ba+_bc

5h!lii"!0 5fflfiGxCCJii liG~C5OL!iC!il!0i5
JCxQC0h!3sNsl!ii`i5!ilC0i5i{JJpi~Ch5N C!0h
Ci5#iE A!0lbJssl!ii#x5h!liiC0Ji
5slNliJC0
&G`sli5 5bip!0xC05!i!CEiN5Ji
~lCE!hiCi5 `iNCCxi5Cili55NQC5Jl!{
l!xiCCiiihC5 LE75Ei5iN5 !5iC"C0
i~l!x5?C?C5005i?/i55 xibiCCCJJpiC < ACx
#i#0C05C5{/ilC&iCl ]xCiC~5C5ih{li5JbCi5
!ixiEC\
&CZ#IiC
gA&l5Bi!Gx5!5Gi{Csii
lixChCCCLliC`ill3i` !C0hJCh5CN~il
l1C`C5!~lCiJiCH `iC5i p! bO"C+5~51C0!xiCC{5Clii
x!s5~lC+( lCs5iCi?SiJi0iC~iffC0i?0J{!isllCi
5il!5&JCi5is5 0h5"!/!B/ilNJ
lbQi5JisN0C!iCh0/i"!ihC~5i i`C0`O&iCCC
l!+x 55"

A51_
68A
J Cx#0xiN~5C5LiCNh5ihlNi!0sAO<s`iC/0iiJC0 CiJs5
!50Q~Lbi iCih`Ci`Qi+lJiC5~i?sQ/iQ5
5II(I~sh5blKN~l!0lKi? ?M (NCiC C
x i5iCxC3!7i/Q0 ~50 hiCCl Ci!~5L
il!0iiiCi5i il lC5~l`5 5OCh5s5CiO
!0s5

QA

Chl= B?EJ# (5=?&sp!bGlC!lCis5~ h0!i
pLxlC 5l/ 3/ !+BA!J>(,e,Qt&_*&,,G
,J***&G0t *jG&_C`GexY_*xQ,*+C= ffO
5Z L5C?0h
QihC 0ii 6 J*Q 5tt*G2AAtGe G JjGCsJQOrQbi
iC xQls( ( l"lp

QihC ` } i&
0i J
0iiO!iC x5"~ls( ( l
81
J$E~5 CiC~lp C
QClE C p! b Ci!i! OlliC Cih0!`iCi( Cp
2QG

>>GGQ *&_*&,,G G G.***& G J,&_[e*& &
C= . "lb5isQiCiCLiliLiSiC
QC-F! h<3p!bC iBiC Chll!iC ih0!i!i>A JG
&_[e*& 6$B pdb"b<
lJ 5E`p!bJO5> (x 50hh!iCC5IrQA2`G
,*G !hl+E
P!Q

fi+WY&xcFWX46_bXZ_b~WgTYX\Z~TY4S?_bZg&~gv~_W~

l k sC5Lp!b3iCxNi5>x(50h}O5!"pxCC
s" 5s3 AC ( GG0tGe
ff, fiQ (G GJJ(&p,
2`,efi ChCiZ C& im hx0
lO p E/ 0i BiC Ci5& ( Q50h6 *jG&_*Ce&~ ih
~l

lff ?=> CB 5 { p! b` i!!iC(Sii~( l155~( l15C-
/i!iC p 2QJ>>GGQp *AGG G.***&Qp &G
>*J*j,jG*Gt *jG&_*C`&Q!= ! " Lp]5h
xiC5Qfi p! JN~l0( lCiJ~l!~ Ki Cisl( ( l!i#JJp!xiC
*jG&_[e*& ,Bp b 0
Q5C Cb rhi -0 Z p! b+ h& JChi!5Cili5bp> C!0hiE }E + e 2QG

>>GGQ A,&_*&,,G G G.***& G J,&_[e*& &
eC=Z OhALLiliLiSiC
hClC/ Q> iCBp!b6liBihC> p N!0(iihC5N!xiCpG>CC-
iE
} ++BAJ>(,e,Q A,x&_,jGG G G.***&,1 JG
&_[e*& &Te C!=Z "dLili"i/`iC
C5-i=!+-0iiO5>x ( 50h"!xiC E Qpfi & zG .>& E
i5=s+Y liBp!b<b
} ~l!55Oiihiff0hhii55bChi!5B5
h= !05 Jil!O* 5!~iO, /Cph05
ff i5~J }x l} 1p!bJrQ+b]CA0C!lih0C! 0( liBCi5
! !i!5l C
*jG&_[e*& l B! 0b
+H=lCCE-p!bJil0( x h5C~Oi?0 b00> ibx (x GG6Q
*jG&_[e*& *(,Q* ffi 0
+#Bl?&0iOC> 3?} =p5b( / CNiC1iC0Ax "~lE C0i>x ii
(x p 0( l(hCi5t !i! Er2Q.&>>GeGp J1&_*&AGG G
,J***&Gv JG&_*C` &, 50i"1ix il1""ihli
i/`iCO~!5"/iJ! 0( l
hiCM?QC55iB?M HiC{p!bt 5(ih /, x=i50hh3isliii
GG J,&_[e*& *>G !Y 0
<5 fi i!+ p!b lE C(~C5h( i55{iQ
CN* 5C~i h0!ir5#+{ ip fiAC"( YG&x
2`,e
fi& >G GJJ(GGe fi Q 6 l {i5>J
,_z *jG&_[e*& C= BlClCi hi!~isC& im
hx0
O<si!MC0iiG C5> (x il, Cs5C5b!iC iC C 1i5
/ih~5K x E iii> !rJ>(,e,xx,$v&_*&,,GGY&
,*.AG(,mG&_C`
Y_ >z>A CCB . bbB!> im 0
P!

fiS6TU<U<VWYXZX\[^]`_ba+_bc
O<si!0iBiC50hh`i+lii iCCs5Ch!0ff 5&iiCi(

p2QJ>>GG1Q0.&_,jGG" G ,J***&, *jG5&_C`
&(,O50i~ 1i xil~ E Lili{iSiC=+ ~C5{/i! 0(l
$l# i!5+Z m% i# ~ E ?- 0ii l & 5 , x5 QChi!5
5bi!C
!( xC0C5* ( lN 0ihir0
J&&(GeGQ &
&
&_,jG, ,J***&
, ,mAGG8(A B`0!+50
rhi Q5{ CL p! bICCiliih> CGiCiliJiCl5 0( lKi5C> (
!i!5 l ffr
L hi/ 1 A= 2Q.&>>GeGQ $,p&_*&,,G G
,J***&Gx JG&_*C` &T'C=+! b 1xi rii~ "ihli
i/`iC
il!lJ?`
i!J?? i# h( l# 6 0ii uiC x(3hi!lp
9570CCli
*jG&_[e*&8 A"p
ilh & lihL
C# ` p! 0 Ci( ii!i> &i ~l CC~( i~iliJCi5
*jG&_[e*& 0/ b
iE!Ci0( 0i5 BiEC5hb J
p! b OCChiC xi!~5!
h0!!xip5s ip
? AC5 ) (&* YG&2`G


fi2Q&(G ,J***&,2`,efi Q lB

5>J( ,_z JG
&_[e*&CC=Z b<Bl!lCi iC~is!> im 0
iH ib E A5xii ~ p! b / OQi5iCi0!!i5E!i! ip
2Q.&>>G
e, G&_,jG, G GJJ(& G JG&_[e*& &A-
!= ! hlx+55Z Lili"i/`iC
iH =E- 5xi= { p! `! 5bi5isii! sCisl( ( lCi?iA 0
i!Ci( Q50hCpp
J&&(Ge,Q+*A,,jGG ,J***&t&G
>*J*j,jG*Gt *jG&_*C`&&!=i! ! 003 "p]h5
5C5 CB p! bl ~l~iC CEiOll~hi~( l"iCChi!5p
lC55 5l p
AC 2 J&&(GeG1 &_*&,,G
,J***&G0t *jG&_C`GexY_*xQ,*+C= + ffO
5Z L5C?0h
5C5+ + < iC=+ / 0iii `5ilC0!iC/ih~5`ili!ihC> li!J C
x(i10i5CC-& i5(!i! iii> CN- GG Qt *jG6&_*Ce&.J(G
,l
5C5 O< s`iCL ` 0ii0" 1
Cib( 0( li i+0ih
bil
0h h0!pihOih&Ci5#r
J&&(GeG/fi &(A0zG.&&,213&`
2`,e 4
>G[exGp&,C
5C5~ }s5O O< s`iC + islCl5+ &" p! b 5! !xiC i0!C
(iK ;!GpK5+M ip
AC ff >&* YG&fiG
e5
-fi2& >G G.***&G12`,efi Q lB `i 6(J(6,_
*jG&_[e*&C= b BlClCi iC~i+C& im hx0

H.-.-

fi+WY&xcFWX46_bXZ_b~WgTYX\Z~TY4S?_bZg&~gv~_W~

5C5 hC?0ii00i~lbli(!iCGCi!5NIr7#5
siE!Ci!0( ihAC2QJ>>GGzQx A&_*&,,G
,J***&G *jGG&_*Ce&
2`GY_*(A&- OO55F L5C
0+
=lC&Z 5sZ 1 p! b * 5b x!55b0( li= !iih0!
GG8Q
*jG&_[e*&*(,Q* ff e-/ b i!
GO55C&!E mJl5b! &B p! #50( ClC 50!i! ?rz
2Q.&>>GeG

,AGG GJJ(t j>Gxt&JJ,jG ,t *jG&_C`
&QAC= Y+ CiJ#ZLr 5h
GOiEp! 5C> ( "5( 0i/i5iCp5!C{iCi(7!iCx p
2Q.&>>GeGvQ17 *AQ&_,jGG GJJ(&vG *jG&_[e*&x2`G
E_ Q5 & C!= Q5hL5C0+
GOi&`i?p!b 8 Gev GpG j
,8GeA .e~ 7J
OpbiCx Qls( ( l"lp
GOi&ffE
Lp!b ( CLih5( l`0hih0!C&(~lbl#50hx 3!xiC
*jG&_[e*& 8$, pdbii !
0 h5xff&5i=ff =i5hbi#ECp!bv 0h3i!15i1x > !C( lC
!i!55 p2QJ>>GGQ2$G/
AGG GJJ( *&j>Gt&JJAG
*Gt *jG&_[e*&&G*- C= ivlli+QEZ"p]5
}O+5JO(0ii 7L~l 0 ] KiC7~Ch5( iL+iChi+l> ( lCi#iC C
/ihi] ! G&GQt *jG&_[e*& *(,Q* ff,l /b !
}O+5 islCl55C+1p!brli> 5-ibSi~#iCish0ih
ii5Ch0( lp5b+AOi iZAC55( GG2pGe

fi2Q&(G ,J***&,2`,e fi
Q lB
5>J( ,_z JG
&_[e*& CC= 0{Bl!lCi iC~is!> im 0
?5CCiC`JJ?p!b L!i>x 3(px CCLilCC s5 JpiC
> C0( lNixCCrNhiCiBi5iYEY/mJJ !BACJ"
12>Je8 T(**m,jG G9 >YGe5 2Q.&>>GeGQvY &_*&,,G
,J***&x Q$- CC= &Bihl t} Y"iliLiSiC
JSi d{ iC50ifip!b(l`, Cs5CC5 5>x ( iJJp
ih!!i53li51hi5( l0!55"p C!sM 5s{AC>&*
GG&Ge
:,- fi& (, GJJ(G12`G fi ; $ Ci
+C> im h0
JSi ?# i!50id0iiA ( N0N~lCh, b 5> ( 0~i~
iC CBpLQ 5=+Ci!!i!0( /Hi!+ -ACJ>(,e, Q
A&_*&,,G GJJ(&G *jG&_[e*&GexY_
!= -O Qh5ZL5C`0+
H.-

fiS6TU<U<VWYXZX\[^]`_ba+_bc

!5+}Oiff"p!bff *jG&_[e*&%J$*&AQJ$ ?5b(~~%
lbLQ] s5 }6
i5b+b }b CbQi5i= Z p! b< GG GQ,pJ&jtm,]*8*G>=t+.jGQ,Jj*&
0!5 ( l/ L 5#%
iCi? L J !is +( 0i Q{iA x( 5 *jG2&_[e*& G5i
i! !

H.-FP

fiJournal Artificial Intelligence Research 14 (2001) 167{203

Submitted 12/99; published 04/01

What's Attribute?
Consequences Least Common Subsumer

Ralf Kusters

kuesters@ti.informatik.uni-kiel.de

Institut f
ur Informatik und Praktische Mathematik
Christian-Albrechts-Universit
zu Kiel
24098 Kiel
Germany

Alex Borgida

borgida@cs.rutgers.edu

Department Computer Science
Rutgers University
Piscataway, NJ 08855
USA

Abstract

Functional relationships objects, called \attributes", considerable importance knowledge representation languages, including Description Logics (DLs). study
literature indicates papers made, often implicitly, different assumptions
nature attributes: whether always required value, whether
partial functions. work presented first explicit study
difference subclasses Classic DL, involving same-as concept constructor.
shown although determining subsumption concept descriptions
complexity (though requiring different algorithms), story different case
determining least common subsumer (lcs). attributes interpreted partial
functions, lcs exists computed relatively easily; even case results
correct extend three previous papers lcs DLs. case attributes
must value, lcs may exist, even exists may exponential size.
Interestingly, possible decide polynomial time lcs exists.
1. Introduction

Knowledge representation systems based Description Logics (DLs) subject continued attention Artificial Intelligence, subject theoretical studies
(Borgida, 1994; Baader, 1996; Baader & Sattler, 2000; Giacomo & Lenzerini, 1996; Calvanese, Giacomo, & Lenzerini, 1999b) applications (Artale, Franconi, Guarino, &
Pazzi, 1996; Brachman, McGuinness, Patel-Schneider, & Borgida, 1999; McGuinness &
Patel-Schneider, 1998). impressively, DLs found applications areas involving information processing, databases (Borgida, 1995; Calvanese, Lenzerini,
& Nardi, 1999), semi-structured data (Calvanese, Giacomo, & Lenzerini, 1998, 1999a),
information integration (Calvanese, Giacomo, Lenzerini, Nardi, & Rosati, 1998; Borgida
& Kusters, 2000), well general problems configuration (McGuinness
& Wright, 1998) software engineering (Borgida & Devanbu, 1999; Devanbu & Jones,
1997). fact, wherever ubiquitous term \ontology" used days (e.g., pro c 2001 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fi steres, Borgida
Ku

viding semantics web/XML documents), DLs prime contenders
clear semantics well-studied computational properties.
Description Logics, one takes object-centered view, world modeled
individuals, connected binary relationships (here called roles), grouped classes
(called concepts). familiar Predicate Logic, objects correspond
constants, roles binary predicates, concepts unary predicates. every DL system,
concepts application domain described concept descriptions built
atomic concepts roles using \constructors" provided DL language.
example, consider situation want concept describing individual cars
frequent (at least 10) repairs, also record fact cars, model
manufacturer's model. Concepts thought built
(possibly nested) simpler noun-phrases, concept, called Lemon sequel,
might captured conjunction
(objects Cars)
(things whose model values concept Model)
(things whose madeBy values concept Manufacturer)
(things whose model value model madeBy attribute)
(things least 10 repairs values)
(things whose repairs values RepairReport).
Using syntax classic language, abbreviate above, emphasizing
term-like nature descriptions constructors used each:
(and Car
(all model Model)
(all madeBy Manufacturer)
(same-as (model) (madeBy model))
(at-least 10 repairs)
(all repairs RepairReport))
So, example, concept term (at-least n p) constructor at-least, denotes
objects related relationship p least n objects; turn, (all p
C) instances exactly objects related p instances C.
Finally, present concept mathematical notation succinct
preferred formal work DLs:
Lemon := Car u
8model:Model u
8madeBy:Manufacturer u
madeBy # (model madeBy) u
10 repairs u
8repairs:RepairReport

Unlike preceding formalisms, semantic networks frames (Quillian, 1968; Minsky,
1975), DLs equipped formal semantics, given translation
168

fiWhat's Attribute?

first-order predicate logic (Borgida, 1994), example. Moreover, DL systems provide
users various inference capabilities allow deduce implicit knowledge
explicitly represented knowledge. instance, subsumption algorithms allow one
determine subconcept-superconcept relationships: C subsumed (C v D)
instances C also instances D, i.e., first description always interpreted
subset second description. example, concept Car obviously subsumes
concept description Lemon, (at-least 10 repairs) subsumed (at-least 8 repairs).
traditional inference problems DL systems, subsumption, inconsistency
detection, membership checking, well-investigated. Algorithms detailed
complexity results realizing inferences available variety DLs differing
expressive power | see, e.g., (Baader & Sattler, 2000) overview.
1.1 Least Common Subsumer

least common subsumer (lcs) concepts specific concept description subsuming given concepts. Finding lcs first introduced new inference problem
DLs Cohen, Borgida, Hirsh (1992). One motivation considering lcs
use alternative disjunction. idea replace disjunctions like C1 C
lcs C1; : : : ; C . Borgida Etherington (1989) call operation knowledge-base
vivification. Although, general, lcs equivalent corresponding disjunction,
best approximation disjunctive concept within available language. Using
approximation motivated fact that, many cases, adding disjunction
would increase complexity reasoning.1
proposed Baader et al. (Baader & Kusters, 1998; Baader, Kusters, & Molitor,
1999), lcs operation used support \bottom-up" construction DL knowledge bases, where, roughly speaking, starting \typical" examples lcs algorithm
used compute concept description (i) contains examples, (ii)
specific description satisfying property (i). Baader Kusters presented
algorithm cyclic ALN -concept descriptions; ALN relatively simple language allowing concept conjunction, primitive negation, value restrictions, number
restrictions. Also, Baader et al. (1999) proposed lcs algorithm DL allowing
existential restrictions instead number restrictions.
Originally, lcs introduced operation context inductive learning
examples (Cohen et al., 1992), several papers followed lead. DLs
considered mostly sublanguages Classic allowed same-as equalities, i.e.,
expressions like (same-as (madeBy) (model madeBy)). Cohen et al. proposed lcs
algorithm ALN language allows concept conjunction same-as,
call . algorithm extended Cohen Hirsh (1994a) CoreClassic, additionally allows value restrictions (see (Cohen & Hirsh, 1994b)
experimental results). Finally, Frazier Pitt (1996) presented lcs algorithm full
Classic.
n

n

1. Observe language already allows disjunction, lcs(C1 ; : : : ; Cn ) C1 Cn .
particular, means that, languages, lcs really interest.

169

fi steres, Borgida
Ku

1.2 Total vs. Partial Attributes

knowledge representation systems, including DLs, functional relationships,
called attributes (also called \features" literature), distinguished subclass
general relationships, least part functional restrictions occur frequently
practice2 . example, clearly madeBy model meant attributes,
thus making unnecessary number restrictions like (and (at-most 1 madeBy) (at-least
1 madeBy)). addition, distinguishing attributes helps identify tractable subsets DL
constructors: Classic, coreferences attribute chains (as examples)
reasoned eciently (Borgida & Patel-Schneider, 1994), changed
roles, e.g., allowed (same-as (repairs) (ownedBy repairsPaidFor)), subsumption problem becomes undecidable (Schmidt-Schau, 1989).
Whereas distinction roles attributes DLs theoretically
practically well understood, discovered another distinction, namely one attributes interpreted total functions (total attributes ) interpreted
partial functions (partial attributes ), \slipped cracks" contemporary
research. total attribute always value \the world there", even
know knowledge base currently. partial attribute may value.
distinction useful practice, since difference car possibly,
necessarily, CD player, car necessarily manufacturer (which
may known current knowledge base). latter modeled defining
attribute madeBy total attribute. Note madeBy total attribute,
every individual world discourse (not cars) must filler madeBy.
Since, however, structural information provided fillers madeBy non-car individuals, implications drawn fillers trivial. Thus, making madeBy total
attribute seems reasonable case. car's CD player, hand,
modeled partial attribute express fact cars required CD
player. indicate particular car CD player, one would add
description (at-least 1 CDplayer).
1.3 New Results

mentioned above, conjunction same-as constructor, roles attributes
behave differently respect subsumption. main objective paper
show distinction total partial attributes induces significantly different
behaviour computing lcs, presence same-as. precisely, purpose
paper twofold.
First, show respect complexity deciding subsumption
difference partial total attributes. Borgida Patel-Schneider (1994)
shown attributes total, subsumption classic concept descriptions
decided polynomial time. shown present work, slight modifications
algorithm proposed Borgida Patel-Schneider suce handle partial attributes.
2. Readers coming Machine Learning community aware difference
\attributes" (functional roles) \attributes", components input feature vector
usually describes exemplar.

170

fiWhat's Attribute?

Moreover, modifications change complexity algorithm. Thus, partial
total attributes behave similarly subsumption point view.
Second, surprising result paper, distinction
partial total attributes significant impact problem computing
lcs. Previous results sublanguages classic show partial attributes used,
lcs two concept descriptions always exists, computed polynomial time.
If, however, total attributes involved, situation different. lcs need
longer even exist, case exists size may grow exponential size
given concept descriptions. Nevertheless, existence lcs two concept descriptions
decided polynomial time.
Specifically, previous work (Cohen et al., 1992; Cohen & Hirsh, 1994a; Frazier &
Pitt, 1996) concerning lcs computation classic, constructions proofs
made without realizing difference two types attributes. Without going
details here, main problem lcs merely finite graphs employed,
making constructions applicable partial attribute case. addition fixing
problems, paper also presents proper handling inconsistent concepts
lcs algorithm classic presented Frazier Pitt (1996).
Although results subsumption intriguing, proofs show
results lcs make extensive use corresponding subsumption algorithms,
one reason present beforehand paper.
Returning general differences cases total partial attributes,
one could say fundamental cause differences lies same-as constructor,
whose semantics normally requires (i) two chains attributes value,
(ii) values coincide. case total attributes, same-as obeys principle
C v u # v implies C v u w # v w
u,v, w sequences total attributes, e.g., (madeBy model), condition
(i) ensured total aspect attributes. case partial attributes,
implication hold, w, hence u w, longer guaranteed
value, implying same-as restriction may hold. Clearly, implication affects
results subsumption. far lcs concerned, certain graph (representing lcs
two given concepts) may infinite case total attributes, thus jeopardizing
existence lcs.
general significance result knowledge representation language
designers users need explicitly check beginning whether deal total partial attributes choice significant effects. Although
situations total attributes convenient, guarantee existence attributes without
resort number restrictions, results show drawbacks.
things considered, requiring attributes total appears less desirable. Concerning classic, technical results paper support use partial attributes
ensure existence lcs computation polynomial time
well ecient decision subsumption. Moreover, current implementation
classic subsumption algorithm require major changes order handle partial
attributes.
171

fi steres, Borgida
Ku

outline paper follows: following section, basic notions necessary investigations introduced. Then, two subsequent sections, subsumption lcs computation classic partial attributes investigated. precisely,
Section 3 offer subsumption algorithm sublanguage classic classic,
contains main classic-constructors; Section 4, present lcs algorithm
classic concept descriptions, along lines proposed Cohen Hirsh
(1994a), formally prove correctness, thereby resolving shortcomings previous
lcs algorithms, handle inconsistencies properly. Finally, Section 5 covers
central new result paper, i.e., lcs computation presence total attributes.
section, restrict investigations sublanguage classic order
concentrate changes caused going partial total attributes. Nevertheless,
strongly conjecture results proved section easily extended
classic classic using similar techniques one employed two previous
sections.
2. Formal Preliminaries

section, introduce syntax semantics description languages considered paper formally define subsumption equivalence concept descriptions.
Finally, least common subsumer concept descriptions specified.
Definition 1 Let C , R, disjoint finite sets representing set concept names,
set role names, set attribute names. set classic -concept
descriptions C , R, inductively defined follows:
Every element C concept description (concept name, like Car).
symbol > concept description (top concept, denoting universe
objects).
r 2 R role n 0 nonnegative integer, n r n r concept
descriptions (number restrictions, like 10 repairs).
C concept descriptions, C u concept description (concept
conjunction).




C concept description r role attribute,
description (value restriction, like 8madeBy:Manufacturer).

8r:C

concept

k; h 0 non-negative integers a1 ; : : : ; ; b1 ; : : : ; b 2 attributes,
# b1 b concept description (same-as equality, like madeBy #
model madeBy). Note two sequences may empty, i.e., k = 0 h = 0.
empty sequence denoted ".
k

a1

k

h

h

Often dispense composition attributes. example, sequence
a1 simply written a1 . Moreover, use 8r1 r :C abbreviation
8r1:8r2 8r :C , 8":C case n = 0, denotes C .
usual, semantics classic defined model-theoretic way means
interpretations.
k

n

k

n

172

fiWhat's Attribute?

Definition 2 interpretation consists nonempty domain interpretation
function . interpretation function assigns extensions atomic identifiers follows:





extension concept name E subset E domain.
extension role name r subset rI .

extension attribute name partial function aI , i.e.,
(x; y1 ) 2 aI (x; y2 ) 2 aI y1 = y2 .
Given roles attributes r , use (r1 r )I denote composition binary
relations rI . n = 0 result "I , denotes identity relation, i.e., "I :=
f(d; d) j 2 g. individual 2 , define rI (d) := fe j (d; e) 2 rI g. r 's
attributes, say (r1 r )I defined iff (r1 r )I (d) 6= ;; occasionally,
refer (r1 r )(d)I image (r1 r )I (d).
extension C concept description C inductively defined follows:
>I := ;


n





n

n

n

n

( n r)I := fd 2 j cardinality(fe 2 j (d; e) 2 rI g) ng;
( n r)I := fd 2 j cardinality(fe 2 j (d; e) 2 rI g) ng;
(C u D)I := C \ DI ;
(8r:C )I := fd 2 j rI (d) C g r role attribute;
(a1 # b1 b )I := fd 2 j (a1 )I (b1 b )I defined
(a1 )I (d) = (b1 b )I (d)g:
Note definition attributes interpreted partial functions. Since
main point paper demonstrate impact different semantics attributes,
occasionally restrict set interpretations map attributes total
functions. interpretations called t-interpretations attributes interpreted
way called total attributes order distinguish partial ones.
stress, remarked introduction, definition (a1 # b1 b )I ,
a1 b1 b must defined order satisfy same-as restriction.
Although standard semantics same-as equalities, one could also think
relaxing restriction. example, same-as condition might specified hold
either paths undefined images defined identical values.
third definition might satisfied even one paths undefined.
definitions semantics same-as might lead different results. However,
paper pursue standard semantics.
subsumption relationship concept descriptions defined follows.
Definition 3 concept description C subsumed concept description (C v
short) interpretations , C DI . consider total
interpretations, get t-subsumption: C v iff C DI t-interpretations .






k

h

k

h

k

h

k

k

h



173

h

fi steres, Borgida
Ku

defined subsumption, equivalence concept descriptions defined usual way:
C v v C . T-equivalence C specified analogously.
already mentioned introduction, main difference partial total
attributes respect subsumption u # v v u w # v w holds attribute
chains u; v; w, whereas necessarily case u # v v u w # v w.
Finally, introducing lcs operation formally concluding section,
comment expressive power classic , since (syntactically) classic lacks
common constructors. Although classic , introduced here, contain bottom
concept ? explicitly, expressed by, e.g., ( 1 r) u ( 0 r). use ?
abbreviation inconsistent concept descriptions. Furthermore, primitive negation, i.e.,
negation concept names, simulated number restrictions. concept name
E one replace every occurrence E ( 1 r ) negation :E E ( 0 r )
r new role name. Finally, attribute following equivalences hold:
( n a) ? n 2; ( 1 a) (a # a); ( 0 a) >; ( n a) > n 1;
( 0 a) (8a:?). show lose expressive power allowing
number restrictions attributes. Still, full classic somewhat expressive
classic . mainly due introduction individuals (also called nominals)
classic. sake completeness give syntax full classic language.3
requires set, O, representing set individual names. define
two additional concept constructors
fe1 ; :::; e g, individuals e 2 (enumeration fF all; Summer; Springg)
p : e role attribute p, individual e (fills currentSeason : Summer).
technical report, Kusters Borgida (1999) extend results presented
work full classic, case individuals non-standard semantics.
least common subsumer set concept descriptions specific concept
subsuming concept descriptions set:
Definition 4 concept description least common subsumer (lcs) concept
descriptions C1 ; : : : ; C (lcs(C1 ; : : : ; C ) short) iff i) C v = 1; : : : ; n ii)
every D0 property v D0 . Analogously, define lcs (C1 ; : : : ; C ) using v
C





E

E

E





n

n





instead v.

n



Note lcs concept descriptions may exist, does, definition
uniquely determined equivalence. sense, may refer lcs.
following two sections, attributes always interpreted partial functions;
Section 5 consider total attributes.
3. Characterizing Subsumption

classic

section modify characterization t-subsumption Classic, proposed
Borgida Patel-Schneider (1994), handle case partial attributes.
3. Even omitting constructs dealing integers so-called \host individuals",
cannot roles act role/attribute fillers.

174

fiWhat's Attribute?

detail, tools used deciding subsumption intimately related
computation lcs.
T-subsumption Classic decided multi-part process. First, descriptions
turned description graphs. Next, description graphs put canonical form,
certain inferences explicated redundancies reduced combining nodes
edges graph. Finally, t-subsumption determined description
canonical description graph.
order \inherit" proofs, tried minimize necessary adjustments
specification (Borgida & Patel-Schneider, 1994). reason, roughly speaking,
attributes treated roles unless form part same-as equality. (Note
attributes participating same-as construct must values!) extent,
allow us adopt semantics original description graphs, crucial
proofs. However, two different occurrences attributes, namely, same-as equality
vs. role value-restriction, require us modify extend definition description
graphs, normalization rules, subsumption algorithm itself.
following, present steps subsumption algorithm detail. start
definition description graphs.
3.1 Description Graphs

Intuitively, description graphs ect syntactic structure concept descriptions.
description graph labeled, directed multigraph, distinguished node. Roughly
speaking, edges (a-edges ) graph capture constraints expressed same-as
equalities. labels nodes contain, among others, set so-called r-edges,
correspond value restrictions. Unlike description graphs defined Borgida
Patel-Schneider, r-edges labeled role names also attribute
names. (We shall comment later advantage modification order deal
partial attributes.) r-edges lead nested description graphs, representing concepts
corresponding value restrictions.
defining description graphs formally, Figure 1 present graph corresponding
concept description Lemon defined introduction. use G(Manufacturer),
G(Model), well G(RepairReport) denote description graphs concept names
Manufacturer, Model, RepairReport. graphs simple; merely consist
one node, labeled corresponding concept name. general, graphs
complex since value restriction like 8r:C leads (possibly complex) nested
concept description C .
Although number restrictions attributes allowed, r-edges labeled attributes, like model madeBy, always restriction [0; 1] order capture
semantics attributes. Formally, description graphs, nodes, edges defined mutually
recursively follows:
Definition 5 description graph G tuple (N; E; n0 ; l), consisting finite set N
nodes; finite set E edges (a-edges); distinguished node n0 2 N (root graph);
function l N set labels nodes. occasionally use notation
G:N odes, G:Edges, G:root access components N , E n0 graph G.
175

fi steres, Borgida
Ku

f>g

madeBy

f>g

RepairReport)

G(

madeBy

repairs

model

[10; 1]

Model)

G(

model [0; 1]

fCar >g
;

madeBy [0; 1]

Manufacturer)

G(

Figure 1: description graph Lemon, large node root graph
a-edge tuple form (n1 ; a; n2 ) n1 , n2 nodes attribute
name.
label node defined ? tuple form (C; H ), consisting finite
set C concept names (the atoms node) finite set H tuples (the r-edges
node). Concept names description graph stand atomic concept names >.
occasionally use notation n:Atoms n:REdges access components C
H node n.
r-edge tuple, (r; m; M; G0 ), consisting role attribute name, r; min, m,
non-negative integer; max, , non-negative integer 1;
(recursively nested) description graph G0 . graph G0 often called restriction
graph node role r. require nodes G0 distinct nodes
G nested description graphs G. r attribute, require: = 0
2 f0; 1g.

Given description graph G node n 2 G:N odes, define Gj graph
(N; E; n; l); Gj said rooted n. sequence p = n0a1 a2 n k 0
(n 1; ; n ) 2 G:Edges, = 1; : : : ; k, called path G node n0 n (p 2 G
short); k = 0 path p called empty; w = a1 called label p (the
empty path label "); p called rooted n0 root G. Occasionally, write
n0 a1 n 2 G omitting intermediate nodes.
Throughout work make assumption description graphs connected.
description graph said connected nodes graph reached
rooted path nested graphs connected. semantics description graphs (see
Definition 6) altered nodes cannot reached root deleted.
order merge description graphs need notion \recursive set nodes"
description graph G: recursive set nodes G union nodes G
recursive set nodes nested description graphs G.
concept descriptions, semantics description graphs defined means
interpretation . introduce function assigns individual domain
every node graph. ensures same-as equalities satisfied.
n

k

n







k

k

k

k

k

176

fiWhat's Attribute?

Definition 6 Let G = (N; E; n0 ; l) description graph let interpretation.
element, d, GI , iff total function, , N

1.



= (n0);

2 N , (n) 2 nI ;
3. (n1 ; a; n2 ) 2 E ((n1 ); (n2 )) 2 aI .
extension nI node n label ? empty set. element, d, nI ,
2.



( ) = (C; H ), iff

l n

2 C , 2 B ;
(r; m; M; G0 ) 2 H ,

1.
2.

n

B

(a) elements, d0 , domain

(b) d0 2 G0I d0 (d; d0 ) 2 rI .

(d; d0 ) 2 rI ;

Cohen Hirsh (1994a) defined semantics description graphs different way,
avoiding introduction total function . problem definition is,
however, well-defined acyclic graphs, which, example, excludes sameas equalities form " # spouse spouse, even p # p q.
semantics graphs proposed Borgida Patel-Schneider (1994) similar
Definition 6. However, paper a-edges captured same-as equalities
also value restrictions attributes. Still, context partial attributes, could
define semantics description graphs means total function since
attributes might fillers. Specifying semantics description graphs terms
partial mappings would make definition even longer. Furthermore, proofs
(Borgida & Patel-Schneider, 1994) would carry easily. Therefore, order
keep total function, value restrictions attributes initially always translated redges. next section present translation concept descriptions description
graphs detail.
defined semantics description graphs, subsumption equivalence description graphs (e.g., H v G) well concept descriptions description
graphs (e.g., C v G) defined way subsumption equivalence
concept descriptions.
3.2 Translating Concept Descriptions Description Graphs

Following Borgida Patel-Schneider (1994), classic concept description turned
description graph recursive process. process, nodes description
graphs often merged.
Definition 7 merge two nodes, n1 n2 , new node n following label:
n1 n2 label ?, label n ?. Otherwise labels equal
?, n:Atoms = n1:Atoms [ n2:Atoms n:REdges = n1:REdges [ n2:REdges.
177

fi steres, Borgida
Ku

G1 = (N1 ; E1 ; n1 ; l1 ) G2 = (N2 ; E2 ; n2 ; l2 ) two description graphs disjoint
recursive sets nodes, merge G1 G2 , G := G1 G2 = (N; E; n0 ; l), defined
follows:

3.

:= n1 n2;
N := (N1 [ N2 [ fn0 g) n fn1 ; n2 g;
E := (E1 [ E2 )[n1 =n0 ; n2 =n0 ], i.e., E union E1 E2 every occurrence

4.

l n

1.
2.

n0

n1 ; n2 substituted n0 ;

( ) := l1(n) n 2 N1 n fn1g; l(n) := l2 (n) n 2 N2 n fn2 g; l(n0)

defined label obtained merging n1

n2 .

Now, classic -concept description C turned corresponding description
G(C ) following translation rules.
1. > turned description graph one node n0 a-edges. atom
node > set r-edges empty.
2. concept name turned description graph one node a-edges.
atoms node contain concept name node r-edges.
3. description form ( n r) turned description graph one node
a-edges. node atoms > single r-edge (r; n; 1; G(>))
G(>) specified first translation rule.
4. description form ( n r) turned description graph one node
a-edges. node atom > single r-edge (r; 0; n; G(>)).
5. description form a1 # b1 b turned graph pairwise
distinct nodes n1; : : : ; n 1; m1; : : : ; 1, root m0 := n0, additional node
n = := n; set a-edges consists (n0 ; a1 ; n1 ), (n1 ; a2 ; n2 ); : : : ; (n 1 ; ; n )
(m0; b1 ; m1 ), (m1; b2 ; m2 ), : : :, (m 1; b ; ), i.e., two disjoint paths coincide starting point, n0, final point, n. (Note p = 0 first
path empty path n0 n0 q = 0 second path empty path
n0 n0.) nodes > atom r-edges.
6. description form 8r:C , r role, turned description graph
one node a-edges. node atom f>g single r-edge
(r; 0; 1; G(C )).
7. description form 8a:C , attribute, turned description
graph one node a-edges. node atom f>g single
r-edge (a; 0; 1; G(C )). (In work Borgida Patel-Schneider, concept
description 8a:C turned a-edge. already mentioned, would cause
problems attributes interpreted partial functions defining semantics
means specified Definition 6.)

graph

p

p

p

q

q

q

p

q

178

q

q

p

p

fiWhat's Attribute?

8. turn description form C u description graph, construct G(C )
G(D ) merge them.
Figure 1 shows description graph built way concept Lemon example.
easily verified translation preserves extensions:
Theorem 1 concept description C corresponding description graph G(C )
equivalent, i.e.,C = G(C )I every interpretation .
main diculty proof theorem showing merging two description
graphs corresponds conjunction concept descriptions.
Lemma 1 interpretations , n1 n2 nodes, (n1 n2 )I = nI1 \ nI2 ;

G1 G2 description graphs (G1 G2 )I = GI
1 \ G2 .
proof preceding statement rather simple like one (Borgida & PatelSchneider, 1994).
3.3 Translating Description Graphs Concept Descriptions

Although characterization subsumption require translating description
graphs back concept descriptions, translation presented show concept descriptions description graphs equivalent representations classic concept
descriptions. subsequent sections, fact need turn graphs concept descriptions.
translation description graph G specified rather straightforward
recursive definition. main idea translation stems Cohen Hirsh (1994a),
employed spanning trees translate same-as equalities. spanning tree (connected) graph tree rooted node graph containing nodes
graph. particular, coincides graph except a-edges deleted.
example, one possible spanning tree G Figure 1 obtained deleting a-edge
labeled madeBy, whose origin root G.
Now, let G connected description graph spanning tree it. Then,
corresponding concept description C obtained conjunction following
descriptions:
1. C contains (i) same-as equality v # v every leaf n , v label
rooted path n; (ii) same-as equality v1 # v2 a-edge
(n1 ; a; n2) 2 G:Edges contained , v label rooted path
n , = 1; 2.
2. every node n , C contains value restriction 8v:C , v label
rooted path n, C denotes translation label n, i.e., C
conjunction obtained follows:
every concept name atoms n conjunct C ;
every r-edge (r; m; M; G0 ) n, C contains (a) number restrictions (mr)
( r) (in case r role 6= 1) (b) value restriction 8r:C 0 ,
C 0 recursively defined translation G0 .
G

G





G

n

n

n

n

n

G

G

179

fi steres, Borgida
Ku

case set atoms r-edges n empty, define C := >.
Referring graph G Figure 1, C contains same-as equalities model madeBy #
model madeBy madeBy # model madeBy. Furthermore, n0 denotes root G,
C value restrictions 8":C , 8model:>, 8model madeBy:>, C
corresponds Lemon defined introduction, without same-as equality. Note
that, although case same-as equality model madeBy # model madeBy
needed, one cannot dispense 1.(i) construction above, illustrated following example: Without 1.(i), description graph G(a # a) would turned
description >, equivalent # since same-as equality requires
path value, may case.
easy prove translation thus defined correct following sense
(Kusters & Borgida, 1999).
n

G

n0

G

n0

Lemma 2 Every connected description graph G equivalent translation C , i.e.,
interpretations : GI = C .
G

G

3.4 Canonical Description Graphs

following occasionally refer \marking node incoherent"; means
label node changed ?. \Marking description graph incoherent" means
description graph replaced graph G(?) corresponding ?, i.e., graph
consisting one node label ?.
One important property canonical description graphs deterministic,
i.e., every node one outgoing edge (a-edge r-edge) labeled
attribute role name. Following Borgida Patel-Schneider (1994), order turn
description graph canonical graph need merge a-edges r-edges. addition,
different work, might necessary \lift" r-edges a-edges.
merge two a-edges (n; a; n1) (n; a; n2 ) description graph G, replace
single new edge (n; a; n0 ) n0 result merging n1 n2. addition,
replace n1 n2 n0 a-edges G.
order merge two r-edges (r; s1 ; k1 ; G1 ), (r; s2 ; k2 ; G2 ) replace new r-edge
(r; max(s1 ; s2 ); min(k1 ; k2 ); G1 G2 ).
lift r-edge (a; m; M; G ) node n concept graph G a-edge
(n; a; n1 ), remove n:REdges, augment G adding G :N odes G:N odes,
G :Edges G:Edges, well adding (n; a; G :Root) G:Edges. precondition
applying transformation = 1, = 0 G corresponds graph
G(?). reason precondition r-edge form (a; 0; 0; G ) lifted
without G inconsistent, fact a-successors allowed lost. Normalization rule 5 (see below) guarantee precondition always satisfied.
description graph G transformed canonical form exhaustively applying
following normalization rules. graph called canonical none rules
applied.
1. node G marked incoherent, mark description graph incoherent.
(Reason: Even node root, attributes corresponding a-edges must always














180

fiWhat's Attribute?

value (since participate same-as equalities), value cannot belong

)
2. r-edge node min greater max, mark node incoherent.
(Reason: 2
1
)
3. Add > atoms every node, absent.
4. r-edge node restriction graph marked incoherent, change max
0. (Reason: ( 0 )
.)
5. r-edge node max 0, mark restriction graph incoherent.
(Reason: See 4.)
6. r-edge form (r; 0; 1; G0 ) G0 contains one node empty
set atoms atoms set f>g r-edges, remove r-edge.
(Reason:
.)
7. node two r-edges labeled role, merge two edges,
described above. (Reason:
(
).)
8. description graph two a-edges node labeled
attribute, merge two edges, described above. (Reason:
(
).)
9. node graph a-edge r-edge attribute,
\lift r-edge" precondition satisfied (see above). (Reason: value
restrictions imposed attributes participate same-as equalities must made explicit
gathered one place similar previous cases.)
need show transformations canonical form change semantics
graph. main diculty showing merging processes lifting
preserve semantics. difference (Borgida & Patel-Schneider, 1994)
addition merging r-edges a-edges also need lift r-edges. Therefore,
omit proofs showing merging edges preserves extensions. proofs
following two lemmas routine quite similar one Lemma 5.
Lemma 3 Let G = (N; E; n0 ; l) description graph two mergeable a-edges let
G0 = (N 0 ; E 0 ; n0 ; l0 ) result merging two a-edges. Then, G G0 .
empty set.



r u



r ?

r

8r:?

8r:> >

8r:C u 8r:D 8r: C u

8a:C u 8a:D

8a: C u

Lemma 4 Let n node two mergeable r-edges let n0 node
edges merged. Then, nI = n0I every interpretation .
Lemma 5 Let G = (N; E; n0 ; l) description graph node n a-edge (n; a; n00 ).
Suppose n associated r-edge (a; m; M; G ). Provided precondition lifting
r-edges satisfied G0 = (N 0 ; E 0 ; n0 ; l0 ) result transformation,
G G0 .
Proof. sucient show GIj = G0 Ij , since label n changed G0


n obtains additional a-edge, points graph G connected
n

n



181

fi steres, Borgida
Ku

RepairReport

G

fModel >g
;

model

repairs

model

[10; 1]

fCar >g
;

madeBy

fManufacturer >g
;

Figure 2: canonical description graph Lemon, left-most node root.
rest G0 . W.l.o.g. therefore may assume n root G, i.e., n = n0. Let
2 GI . Thus, function N specified Definition 6
individual e = (n), e = (n00), (d; e) 2 aI . implies e 2 GI . Hence,
exists function 0 G :N odes G e satisfying conditions
Definition 6. Since sets nodes G G disjoint, define 00
union 0, i.e., 00 (m) := (m) nodes G 00(m) := 0(m)
nodes G . Since, construction, additional a-edge (n; a; G :Root) 2 E 0
(00(n); 00 (G :Root)) 2 aI , follows conditions Definition 6 satisfied
G0, thus, 2 G0I .
let 2 G0I . Thus, function 00 N 0 according Definition 6.
Let e := 00(G :Root) = 00(n00). Let G00 description graph obtain G0
deleting nodes corresponding G , graph G without r-edge
(a; m; M; G ). restrict 00 nodes G00 , follows 2 G00I . Furthermore,
restricting 00 nodes G yields e 2 GI . particular, G marked
incoherent. Then, precondition ensures = 1. Thus, since e a-successor
d, conclude 2 GI .
ut


























dealt issue merging lifting, easy verify \normalization" affect meaning description graphs.
Theorem 2 G description graph G0 corresponding canonical description
graph, G G0 .

example, canonical description graph graph given Figure 1 depicted
Figure 2.
3.5 Subsumption Algorithm

final part subsumption process checking see canonical description graph
subsumed concept description. Borgida Patel-Schneider (1994),
attributes total, turns necessary turn potential subsumer
canonical description graph. subsumption algorithm presented next also
considered characterization subsumption.
182

fiWhat's Attribute?

Algorithm 1 (Subsumption Algorithm) Given concept description description graph G = (N; E; n0 ; l), subsumes?(D; G) defined true one
following conditions hold:
1. description graph
2.



3.



4.



5.



G

marked incoherent.

concept name >, element atoms n0 .

( n r) i) r-edge n0 r role, min greater equal
n; ii) n = 0.

( n r) r-edge n0 r role, max less equal n.


# b1 b

, rooted paths label
G ending node.
a1

n



a1



n



b1

b



8r:C , role r, either (i) r-edge n0 r role G0
restriction graph subsumes?(C; G0 ); (ii) subsumes?(C; G(>)). (Reason:
8r:> >.)
7. 8a:C , attribute a, (i) a-edge G form (n0 ; a; n0 ),
subsumes?(C; (N; E; n0 ; l)); (ii) r-edge n0 attribute, G0
restriction graph subsumes?(C; G0 ); (iii) subsumes?(C; G(>)).

6.



8.



E u F subsumes?(E; G) subsumes?(F; G) true.

two differences algorithm one total attributes presented Borgida Patel-Schneider (see also Algorithm 2). First, partial attribute
case, given = 8a:C , one needs look value restriction either a-edge
r-edge G, since attributes label a-edges r-edges. (In total attribute
case, attributes label a-edges examining r-edges necessary.)
second important distinction treatment same-as equalities. shown
algorithm, = a1 # b1 b one needs check whether
exist two paths labeled v := a1 w := b1 b leading node G.
total attribute case, however, suces exist prefixes v0 w0 v w
property, long remaining suxes identical.
Soundness completeness algorithm stated following theorem.
Theorem 3 Let C , classic descriptions. Then, C v iff subsumes?(D; G ),
G canonical form G(C ).
soundness subsumption algorithm, i.e., direction theorem stated
above, pretty obvious. (Borgida & Patel-Schneider, 1994), main point
only-if direction (proof completeness) canonical graph G deterministic,
i.e., node, given role attribute name r, one outgoing r-edge
a-edge r label. point reader (Borgida & Patel-Schneider, 1994)
proof, since almost identical one total attributes already published there.
proofs reveal that, direction Theorem 3, description graphs need
normalized. Thus, one also show:
n



n



C

C

C

183

fi steres, Borgida
Ku

Remark 1 Let G (not necessarily normalized description graph) let
concept description. Then, subsumes?(D; G) implies G v D.





classic

Borgida Patel-Schneider argue canonical description graph G concept
description C constructed time polynomial size C . Furthermore, Algorithm 1 runs time polynomial size G D. hard see
changes presented increase complexity. Thus, soundness completeness
subsumption algorithm provides us following corollary.
Corollary 1 Subsumption classic concept descriptions C D, attributes
interpreted partial functions, decided time polynomial size C
D.
4. Computing LCS

classic

section, show lcs two classic concept descriptions stated
terms product canonical description graphs. similar result proven
Cohen Hirsh (1994a) sublanguage classic , allows concept
names, concept conjunction, value restrictions, same-as equalities. particular,
sublanguage allow inconsistent concept descriptions (which, example,
expressed con icting number-restrictions). Furthermore, semantics description
graphs provided Cohen Hirsh restricts results case description graphs
acyclic. excludes, example, same-as equalities form # spouse spouse.
following, first define product description graphs. Then, show
given concept descriptions C D, lcs equivalent description graph obtained
product G G . constructions proofs quite close
(Cohen & Hirsh, 1994a).
C



4.1 Product Description Graphs

description graph represents constraints must satisfied individuals
extension graph. Intuitively, product two description graphs intersection
constraints|as product finite automata corresponds intersection
words accepted automata. However, definition product description
graphs special care taken incoherent nodes, i.e., nodes labeled ?. Also,
since attributes may occur r-edges a-edges, one needs take product
restriction graphs r-edges, one hand, original graphs G1 G2
(rooted certain nodes), hand.
Definition 8 Let G1 = (N1 ; E1 ; n1 ; l1 ) G2 = (N2 ; E2 ; n2 ; l2 ) two description graphs.
Then, product G := G1 G2 := (N; E; n0 ; l) two graphs recursively defined
follows:
1.
2.
3.

:= N1 N2 ;
n0 := (n1 ; n2 );
E :=f((n; n0 ); a; (m; m0 )) j (n; a; m) 2 E1 (n0 ; a; m0 ) 2 E2 g;
N

184

fiWhat's Attribute?

4. Let n 2 N1 n0 2 N2 . l1 (n) = ?, let l((n; n0 )) := l2 (n0 ) and, analogously,
l2 (n0 ) = ?, l((n; n0 )) := l1 (n). Otherwise, l1 (n) = (S1 ; H1 ) l2 (n0 ) =
(S2 ; H2), define l((n; n0)) := (S; H )
(a)
(b)



:= S1 \ S2;

:=
(
(
)
(
)
) j (r; p1 ; q1 ; G1 ) 2 H1 , (r; p2 ; q2 ; G2 ) 2 H2 g [
f(a; 0; 1; G1 G2 ) j (n; a; m) 2 E1 , (a; p2 ; q2 ; G2 ) 2 H2 g [
f(a; 0; 1; G1 G2 ) j (a; p1 ; q1 ; G1 ) 2 H1 , (n ; a; m) 2 E2 g.
H

0

0

0

f r; min p1 ; p2 ; max q1 ; q2 ; G1 G2
0

j

0

0

0

0

j

0

According definition, tuple (n; n0) node, say n, incoherent,
label (n; n0 ) coincides one n0. reason defining label
way lcs(?; C ) C every concept description C . overlooked
Frazier Pitt (1996), thus making constructions proofs hold concept
descriptions contain inconsistent subexpressions.
Note G, defined here, might connected, i.e., might contain nodes
cannot reached root n0. Even G1 G2 connected happen
tuples (n1; n2 ) belong set nodes G regardless whether
reachable root not. However, already mentioned Section 3.1 may
assume G connected.
Also note product graph translated back classic concept
description since product two description graphs description graph.
4.2 Computing LCS

prove main theorem subsection, states product two
description graphs equivalent lcs corresponding concept descriptions.
Theorem 4 Let C1 C2 two concept descriptions, let G1 G2 corresponding
canonical description graphs. Then, C 1 2 lcs(C1 ; C2 ).
G

G

Let G := G1 G2 . sketch proof showing C subsumes C1 and,
symmetry, also C2 (see (Kusters & Borgida, 1999) details). construction,
two rooted paths common node G, G1 corresponding paths leading
node well. Thus, Theorem 3, same-as equalities C subsume ones
C1 . Now, let spanning tree G, (m1; m2 ) node G, v label
rooted path (m1 ; m2 ). Then, construction follows exists rooted
path G1 m1 labeled v. Furthermore, rather straightforward inductive proof shows
concept description E corresponding label (m1 ; m2 ) subsumes G1 j .
implies 8v:E w G1 . result, conclude G w G1 .
interesting part proof show C common subsumer
C1 C2, least common subsumer.
show induction size D, C1, C2 subsumes C1
C2 , subsumes C : distinguish different cases according definition
\subsumes?". Let G1 = (N1 ; E1 ; n1; l1 ) canonical description graph C1, G2 =
(N2 ; E2 ; n2; l2 ) canonical description graph C2 , G = (N; E; n0 ; l) = G1 G2 .
following, assume C1 v C2 v D; thus, subsumes?(D; G1)
Proof.

G

G

m1

G

G

185

fi steres, Borgida
Ku

?(D; G2). show subsumes?(D; G). Then, Remark 1 implies G v D,
thus, C v D. Note one cannot use Theorem 3 since G might canonical
description graph.
1. G incoherent, nothing show.
2. concept name, >, number-restriction, definition label
n0 easy see subsumes?(D; G).
3. v # w, exist nodes m1 G1 m2 G2 two
paths n1 m1 label v w, respectively, well two paths n2
m2 label v w. Then, definition G easy see two
paths n0 = (n1; n2 ) (m1 ; m2) label v w, respectively. shows
subsumes?(D; G).
4. 8r:C , r role attribute, one several cases applies:
(i) n1 n2 r-edges role attribute r, restriction graphs G01 G02 ,
respectively, subsumes?(C; G01 ) subsumes?(C; G02 );
(ii) without loss generality, n1 a-edge pointing m1 attribute r,
subsumes?(C; G01 ), G01 := G1 j ; n2 r-edge restriction
graph G02 subsumes?(C; G02 ).
cases (i) (ii), subsumes?(C; G01 G02 ) follows induction. Furthermore,
definition G r-edge role r restriction graph G01 G02 n0.
implies subsumes?(D; G).
(iii) n1 n2 a-edges attribute r leading nodes m1 m2 , respectively. Then, subsumes?(C; G1 j ) subsumes?(C; G2 j ). induction, know
subsumes?(C; G1 j
G2 j ). easy see Gj(
G2 j . Fur) = G1 j
thermore, definition a-edge attribute r (n1; n2 ) (m1 ; m2 )
G. shows subsumes?(D; G).
(iv) (without loss generality) n1 r-edge a-edge role attribute
r . implies subsumes?(C; G(>)), also ensures subsumes?(D; G).
5. E u F , definition subsumption algorithm, subsumes?(E; G1 )
subsumes?(E; G2 ) hold. induction, subsumes?(E; G), analogously,
subsumes?(F; G). Thus, subsumes?(D; G).
ut
stated Section 3.5, canonical description graph classic concept description
computed time polynomial size concept description. hard
verify product two description graphs computed time polynomial
size graphs. addition, concept description corresponding description
graph computed time polynomial size graph. Thus, consequence
Theorem 4 obtain:
subsumes
G

m1

m1

m1

m2

m2

m1 ;m2

m1

m2

Corollary 2 lcs two classic concept descriptions always exists computed time polynomial size concept descriptions.
186

fiWhat's Attribute?

j , j 6=

j , j 6=













Figure 3: canonical description graph , without node labels.


intimated (Cohen et al., 1992), statement hold sequences concept
descriptions. Intuitively, generalizing lcs algorithm sequences of, say, n concept descriptions, means computing product n description graphs. following proposition
shows size product graph may grow exponentially n. Thus, lcs
computed way grows exponentially size given sequence. However,
imply exponential blow-up unavoidable. might exist smaller,
still equivalent representation lcs. Nevertheless, show exponential
growth inevitable.
Proposition 1 integers n 2 exists sequence D1 ; : : : ; classic
concept descriptions size every classic concept description equivalent
lcs(D1 ; : : : ; ) least exponential n size 0 linear n.
Proof. Cohen et al. (1992), given n, define concept descriptions
follows:
:= u (" # ) u u (a # ) u (" # )
6=
6=
n

n







j

j



j







j





a1 ; : : : ; denote attributes. canonical description graph depicted
Figure 3. Using Algorithm 1 easy see v v # w iff number 0 v
number 0 w equal modulo 2 v; w words fa1 ; : : : ; g.
implies
D1 ; : : : ; v v # w
iff 1 n number 0s v
(1)
0
number w equal modulo 2.
Let f1; : : : ; ng non-empty set. define v := k i1 < <
elements w := 3 3 k 3 3 := . let E lcs
D1 ; : : : ; , let G corresponding canonical description graph root n0.
(1) know E v v # w every f1; : : : ; ng. Algorithm 1 implies
paths n0 G labeled v w exist lead node q .
Assume non-empty subsets s; f1; : : : ; ng, 6= t, q = q . would
imply E v v # v contradiction (1). Thus, 6= implies q 6= q . Since
2 1 non-empty subsets f1; : : : ; ng, shows G contains least 2 1 nodes.
fact size G linear size E completes proof.
ut
proposition shows algorithms computing lcs sequences necessarily worstcase exponential. Conversely, based polynomial time algorithm binary lcs
operation, exponential time algorithm easily specified employing following
identity lcs(D1 ; : : : ; ) lcs(D ; lcs(D 1 ; lcs( lcs(D2 ; D1 ) ).
n









n

n





i1



i1



n

i2



j



j

j

k

j

E





E















n

E

E

n

n

n

187





n

fi steres, Borgida
Ku

Corollary 3 size lcs sequences classic concept descriptions grow
exponentially size sequences exists exponential time algorithm
computing lcs.
5. LCS Same-as Total Attributes

previous sections, attributes interpreted partial functions. section,
present significant changes computing lcs occur considering
total functions instead partial functions. precisely, look sublanguage
classic allows concept conjunction same-as equalities,
general assumption attributes interpreted total functions.
restrict attention language order concentrate changes
caused going partial total functions. strongly conjecture, however,
results represented easily transfered classic extending description
graphs Section 4.
First, show lcs two concept descriptions always exist.
Then, present polynomial decision algorithm existence lcs two
concept descriptions. Finally, shown lcs two concept descriptions
exists, might exponential size given concept descriptions
computed exponential time.
sequel, simply refer lcs lcs. Since throughout section
attributes always assumed total, lead confusion.
again, may useful keep mind total (though partial) attributes
(u # v) v (u w # v w) u; w; v 2 A, set finite words
A, finite set attribute names. Indeed, differences partial
total attributes shown section finally trace back property.










5.1 Existence LCS

subsection, prove lcs two concept descriptions always
exist. Nevertheless, always infinite representation lcs, used
next subsection characterize existence lcs.
accomplish above, return graph-based characterization t-subsumption
proposed Borgida Patel-Schneider (1994), modified partial attributes Section 3. concept description C , let G denote corresponding canonical description
graph, defined Section 3.4. semantics specified Section 3.1, although
set interpretations restricted allow attributes interpreted total functions
only.
Since contains concept names allow value-restrictions, nodes
G contain concept names set r-edges empty. Therefore, G
defined triple (N; E; n0 ) N finite set nodes, E finite set
N N , n0 root graph.
corollary results Borgida Patel-Schneider, subsumption C v
concept descriptions C decided following algorithm, also
provides us characterization t-subsumption.
C

C

C



188

fiWhat's Attribute?

G

C0 :

D0 :

c

G




b

b




c

Figure 4: canonical graphs C0 D0
Algorithm 2 Let C , concept descriptions , G = (N; E; n0 ) canonical
description graph C . Then, subsumes ?(D; G ) defined true one
following conditions hold:
C



1.

C

v # w words v0 ; w0 ; u 2 v = v0 u w = w0 u,
rooted paths G labeled v0 w0 , respectively, ending node.



C

) subsumes ?(D2 ; G ) true.
Apart additional constructors handled Algorithm 1, Algorithm 2 differs
Algorithm 1 that, total attributes, considered here, sucient prefixes
rooted paths v w lead common node, long remainder cases
path.
2.



D1 u D2 subsumes ?(D1 ; G


C



C

Theorem 5 concept descriptions lcs concept descriptions exist .

result corrects statement Cohen et al. (1992) lcs always exists,
statement inadvertently assumed attributes partial, total.
proof, offer following -concept descriptions, shown
lcs:
C0 := # b;
D0 := # ac u b # bc u ad # bd:
graphs concepts depicted Figure 4.
following statement shows lcs E C0 D0 would satisfy condition
\regular structure". statement easily verified using
Algorithm 2.
E v v#w
iff v = w exists nonnegative integer n u 2
v = ac du w = bc du vice versa.
Given description lcs C0 D0 , one show, again, employing Algorithm 2, finite description graph equivalent E . However, omit
elementary proof here, absence lcs also follows Theorem 6,
infinite graphs used characterize existence lcs. Note partial
attribute case, lcs C0 D0 equivalent # u b # b, result


n

189

n

fi steres, Borgida
Ku

obtained lcs algorithm presented previous section. corresponding (finite) description graph consists root two additional nodes, root two
outgoing edges leading two nodes labeled b, respectively.
state Theorem 6, first introduce infinite description graphs show
always exists infinite description graph representing lcs two -concept descriptions.
infinite description graph G defined, like finite graph, triple (N; E; n0 )
except set nodes N set edges E may infinite. finite case,
nvn0 2 G means G contains path n n0 labeled word v 2 .
semantics infinite graphs defined finite case. Furthermore, infinite graphs
translated concept descriptions follows: take (infinite) spanning tree G, and,
finite case, every edge G contained it, add C same-as equality.
Note contrast partial attribute case, C need contain same-as equalities
form v # v since, total attributes, v # v >. Still, C might concept description
infinite number conjuncts (thus, infinite concept description). semantics
concept descriptions defined obvious way. Analogously Lemma 2, one
show (infinite) graph G corresponding (infinite) concept description C
equivalent, i.e., C G.
call (infinite) description graph G deterministic if, if, every node n
G every attribute 2 exists one a-successor n G. graph
G called complete every node n G every attribute 2 (at least)
one a-successor n G. Clearly, deterministic complete (infinite) description
graph, every path uniquely determined starting point label.
Algorithm 2 (which deals finite description graphs G ) generalized deterministic complete (infinite) description graphs G straightforward way. see
this, first note (finite) description graph coming -concept description
canonical iff deterministic sense introduced. Analogously, deterministic
infinite graph viewed canonical. Thus, requiring (infinite) graphs
deterministic satisfies precondition Algorithm 2. Now, addition graphs
complete, (unlike condition stated subsumption algorithm) longer
necessary consider prefixes words complete graph contains rooted path
every word. precisely, v0 w0 lead node, case
v = v 0 u w = w0 u well, thus making unnecessary consider prefixes v 0 w0
v w, respectively. Summing up, conclude:
Corollary 4 Let G = (N; E; n0 ) deterministic complete (infinite) description
G

G

G

G

G

C

graph

v; w

2 A. Then,
Gv v#w
iff


n0 vn

2 G n0wn 2 G node n:

shall construct (infinite) graph representing lcs two concept descriptions
product so-called completed canonical graphs. infinite representation
lcs used later characterize existence lcs , i.e., existence
finite representation lcs.
define completion graph. Intuitively, graph completed iteratively
adding outgoing a-edges labeled attribute every node graph
outgoing a-edge. process might extend graph infinite trees.
example, completion G (cf. Figure 4) depicted Figure 5 = fa; b; c; dg.
C0

190

fiWhat's Attribute?

G

1
C :
0







c

c

b

b







b

c





b

c



...
...
Figure 5: complete graph C0
Formally, completions defined follows: Let G (infinite) description graph.
graph G0 extension G every node n G every attribute 2
n outgoing edges labeled a, new node added, well edge
(n; a; ). Now, let G0 ; G1 ; G2 ; : : : sequence graphs G0 = G G +1
extension G ; 0. G = (N ; E ; n0),
[ [
G1 := (
N;
E ; n0 )
n;a



n;a









0



0
construction, G1






called completion G.
complete graph. Furthermore,
1
G deterministic, G deterministic well. Finally, easy see graph
extension Sare equivalent. Thus, induction, G1 G.
nodes 1 N , i.e., nodes G1 G, called tree nodes;
nodes G called non-tree nodes. construction, every tree node G1
exactly one direct predecessor G1, i.e., exactly one node n one attribute
(n; a; t) edge G1 ; n called a-predecessor t. Furthermore,
exactly one youngest ancestor n G tree node G1; n youngest ancestor
path n G1 contain non-tree nodes except n.
Note one path n G1. Finally, observe non-tree nodes
non-tree nodes ancestors.
Note completion canonical description graph always complete deterministic.
sequel, let C , two concept descriptions , G = (N ; E ; n ), G =
(N ; E ; n ) corresponding canonical graphs, G1 , G1 completions
G , G . products G := G G G
1 := G1 G1 specified Definition 1.
usual, may assume G G1 connected, i.e., contain nodes
reachable root (n ; n ); otherwise, one remove nodes cannot
reached root without changing semantics graphs.
denote product G1 G1 G1 instead G1 (or G1) otherwise
graph could confused completion G. general, graphs






C



C





C



C

C



C



C



191



C



C

C



fi steres, Borgida
Ku

coincide. example, take products G G G1 G1 (see Figure 4
graphs G G ). former product results graph consists root
two outgoing a-edges, one labeled one labeled b. (As mentioned before,
graph corresponds lcs C0 D0 partial attribute case.) product
completed graphs, hand, graph obtained completion
graph depicted Figure 6 (the infinite trees omitted sake simplicity).
easy consequence fact G G1 Corollary 4, one prove
following lemma.
C0

Lemma 6

C0

D0

C

C

C0

D0

D0

C

v v # w iff n


C

vn

2 G1 n
C

C

wn

2 G1 node n G1 .
C

C

then, construction G1 know:
Proposition 2 C v
node n G1 .



v

# w v v # w iff (n


C

) 2 G1 (n

; nD vn

C

)

; nD wn

2 G1

particular, G1 represents lcs concept descriptions C following
sense:
Corollary 5 (infinite) concept description C 1 corresponding G1 lcs C
D, i.e., i) C; v C 1 ii) C; v E 0 implies C 1 v E 0 every -concept
description E 0 .
G





G



G

5.2 Characterizing Existence LCS

Let C , concept descriptions let graphs G , G , G, G1 , G1, G1
defined above.
show G1 represents (possibly infinite) lcs -concept
descriptions C (Corollary 5), G1 used characterize existence
finite lcs. existence depends whether G1 contains finite infinite number
so-called same-as nodes.
Definition 9 node n (infinite) description graph H called same-as node
C

exist two direct predecessors
may labeled differently.)



n



H.



(The a-edges leading

c

c

c








b







c

c

c

Figure 6: subgraph G1 G1
C0

192

D0

C

n



nodes

fiWhat's Attribute?

example, graph depicted Figure 6 contains infinite number same-as nodes.
show sucient necessary condition lcs C0 D0
exist.
helpful observe same-as nodes G1 one forms (g; f ), (f; t),
(t; f ), g f non-tree nodes tree node. cannot exist
same-as node form (t1; t2 ), t1 t2 tree nodes, since tree nodes
exactly one direct predecessor, thus (t1; t2 ) does. Moreover, G1
infinite number same-as nodes, must infinite number same-as nodes
form (f; t) (t; f ), exist finite number nodes G1 form
(g; f ). reason, following lemma characterize same-as nodes
form (f; t). (Nodes form (t; f ) dealt analogously.) state lemma,
recall n0un1vn2 2 H , graph H , describe path H labeled uv
n0 n2 passes node n1 u (i.e., n0un1 2 H n1vn2 2 H );
generalized obvious way interpret n0u1n1u2n2u3n3 2 H .
G

1

(nC ; nD )
v

w

(h1 ; p0 )

x

(h2 ; p0 )

G

..
.

6=
6
1=

v
h

w
h2

..
.x

(e1 ; q0 )

(e2 ; q0 )


e1

6=

e2


n

= (f; t)

Figure 7: same-as nodes G1
Lemma 7 Given node f G tree-node G1 , node n = (f; t) G1
same-as node iff
C






exist nodes (h1 ; p0 ), (h2 ; p0 ) G, h1 6= h2 ;
exist nodes (e1 ; q0 ), (e2 ; q0 ) G1 , e1 , e2 distinct nodes G
q0 node G1 ;
exists attribute 2 v; w; x 2 , v 6= w, set attributes
C ,
C







(n

C

) (

) (

) ( ) (n

) ( ) ( )
direct successors (h01 ; p00 ) (h02 ; p00 ) (h1 ; p0 )

; nD v h1 ; p0 x e1 ; q0 f;

C

) (

; nD w h2 ; p0 x e2 ; q0 f;

paths G1 (see Figure 7).
(h2 ; p0 ) paths, we, addition, require p00 tree node G1 .4


4. Note since G
1 deterministic, successors (h1 ; p0 ) (h2 ; p0 ) two paths must fact
form (; p00 ).

193

fi steres, Borgida
Ku

direction obvious. proceed only-if direction assume
same-as node G1. Let p0 (uniquely determined) youngest ancestor
G1 . particular, p0 node G exists p0 xq0 G1 2
x 2 successor p0 path tree node G .
Since n same-as node reached via q0 attribute a,
must exist e1 , e2 G , e1 6= e2 , (e1 ; q0 )a(f; t); (e2 ; q0)a(f; t) 2 G1. Since G1
connected, paths (n ; n ) (e1 ; q0) (e2 ; q0). Every path n q0
must pass p0 sux label path x. Consequently, exist
nodes h1 ; h2 G (h1 ; p0 )x(e1 ; q0 )a(f; t) (h2 ; p0)x(e2 ; q0)a(f; t) paths
G1. particular, xa label path h1 f G , label xa
consists attributes contained C . h1 = h2, this, together fact G
deterministic, would imply e1 = e2 . Hence, h1 6= h2 . Let v, w labels paths
(n ; n ) (h1 ; p0 ) (h2 ; p0), respectively. G deterministic h1 6= h2,
follows v 6= w.
ut
main results section stated next theorem. direct consequence
theorem, obtain exists lcs concept descriptions C0
D0 example.
Proof.
n









C

C





C

C

C

C



Theorem 6 lcs C exists iff number same-as nodes G1 finite.

start proving only-if direction. purpose, assume G1
contains infinite number same-as nodes show (finite) lcs C
.
argued before, may assume G1 contains infinite number same-as nodes
form (f; t) (t; f ), tree node f non-tree node. precisely,
say G1 contains every 1 nodes n = (f ; ) f node G
tree node G1. According Lemma 7, every same-as node n exist nodes
h1 ; h2 ; e1 ; e2 G , p0 G , q0 G1 well 2 x 2
properties required Lemma 7.
Since G G finite description graphs, number tuples form
h1 ; h2 ; e1 ; e2 ; f ; finite. Thus, must infinite number i's yielding
tuple h1; h2 ; e1 ; e2 ; f; a. particular, h1 6= h2 e1 6= e2 nodes G
infinite number same-as nodes form n = (f; t1 ). Finally,
lemma, let v, w label paths (in G) (n ; n ) (h1 ; p0 ) (h2 ; p0 ).
Now, assume lcs E C . According Corollary 5, E C 1 .
Let G finite canonical graph E root n0. Proposition 2 Lemma 7
know E v vx # wx a. Algorithm 2 follows words v0, w0 , u
vx = v0 u wx = w0 u, paths G starting n0 labeled v0 ,
w0 lead node G .
u 6= ", u = u0a word u0. Then, Algorithm 2 ensures E v vx # wx .
However, Lemma 7 know words vx wx lead different nodes
G
1 , namely, (e1 ; q0 ) (e2 ; q0 ), which, Proposition 2, leads contradiction
E G
1 6v vx # wx . Thus, u = ".
result, every 1 exists node q G n0vx aq n0wx aq
paths G . G finite description graph, exist i; j 1, 6= j ,
Proof.









C



;i

;i

;i

;i

C

C

;i

;i





;i



;i









;i

;i





C



C

;i





G

E











E

E





;i







;i





E





E

194

E









fiWhat's Attribute?

= q . Algorithm 2, implies E v vx # wx a. hand, path
starting (n ; n ) label vx leads node n one wx leads
n . Since n 6= n , Proposition 2 implies E 6v vx # wx a, contradiction.
sum up, shown exist lcs C .
shows lcs C , completes proof only-if
direction.
prove direction Theorem 6. purpose, assume G1
finite number same-as nodes. Note every same-as node G1
finite number direct predecessors. see this, two cases distinguished: i) node
form (g1 ; g2 ) G predecessors G; ii) tree node g non-tree node,
predecessor (g; t) G1 form (g0 ; t0) t0 unique predecessor
(tree non-tree node) g0 non-tree node. Since number nodes G
G finite, cases finite number predecessors. then,
spanning tree G1 coincides G1 except finite number edges because,
contain certain edge, edge leads same-as node. result, C 1
-concept description finite conjunction same-as equalities. Finally,
Corollary 5 shows C 1 lcs C D.
ut
v # w conjunct C 1 , v w lead root G1 same-as node.
mentioned before, same-as nodes form (f; g); (f; t), (t; f ), tree
node f; g non-tree nodes. Consequently, v w must paths G G .
Thus, contain attributes occurring C D.
qi

G
1

j



C

j







j





j





j

j

C



G

G

G

C



Corollary 6 lcs two concept description C exists,
concept description containing attributes occurring C equivalent
lcs.

Therefore, asking existence lcs, w.o.l.g. assume set
attributes finite. fact used following two subsections.
5.3 Deciding Existence LCS

following corollary derive desired decision algorithm existence
lcs two concept descriptions . state corollary need introduce
language L C (q1 ; q2) := fw 2 j path node q1 q2 G labeled wg.
Since description graphs viewed finite automata, language regular.
Moreover, let aA denote set faw j w 2 Ag attribute 2 A, finite
alphabet.
G

C

Corollary 7 G1 contains infinite number same-as nodes iff either
(i) exist nodes (h1 ; p0 ), (h2 ; p0 ) G well nodes f , e1 , e2 G , attributes
a; b 2
C

1.

h1

6= h2 , e1 6= e2 ;

2.

p0

b-successor G ;

3.

(e1 ; a; f ), (e2 ; a; f ) edges G



C

;
195

fi steres, Borgida
Ku

4.

(

LGC h1 ; e1

) \ L C (h2 ; e2 ) \ bA infinite set words;
G


(ii) statement (i) r^oles C



switched.

first prove only-if direction. Assume G1 contains infinite number
same-as nodes. Then, w.l.o.g., find configuration G1 described proof
Theorem 6. configuration satisfies conditions 1. 3. stated corollary.
If, 6= j , words x x coincide, conclude n = n G1
deterministic graph. However, definition, n 6= n . Hence, x 6= x . finite,
can, w.l.o.g., assume x 's b 2 first letter fixed b. Thus,
condition 4. satisfied well. According configuration, b-successor (; p0 )
G
1 form (; p00 ) p00 tree node. Thus, p0 b-successor
G , means condition 3. satisfied.
prove direction corollary. purpose, let bx 2 L C (h1 ; e1 ) \
L C (h2 ; e2 ) \ bA . Since p0 b-successor G follows tree nodes
t; t0 G1 p0 bxtat0 2 G1 . Thus, (h1 ; p0 )bx(e1 ; t)a(f; t0 ) 2 G
1
0

(h2 ; p0 )bx(e2 ; t)a(f; ) 2 G1. Since e1 6= e2, conclude (e1 ; t) 6= (e2 ; t). means
(f; t0) same-as node. Analogously, 2 L C (h1 ; e1 ) \ L C (h2 ; e2 ) \ bA
tree nodes s; s0 G1 p0bysas0 2 G1 (f; s0) same-as node G1.
Since bx start b, b-successor p0 G1 tree node, x 6=
implies s0 6= t0. Hence, (f; t0) (f; s0) distinct same-as nodes. shows
set L C (h1 ; e1 ) \ L C (h2 ; e2 ) \ bA infinite, G1 must infinite number same-as
nodes.
ut
given nodes (h1 ; p0), (h2 ; p0 ) G, attributes a; b 2 A, nodes f; e1; e2 2 G conditions 1. 3. Corollary 7 obviously checked time polynomial size
concept descriptions C D. last condition, note automaton accepting
language L C (h1 ; e1 ) \ L C (h2 ; e2 ) \ bA constructed time polynomial
size C . Furthermore, given finite automaton decidable time polynomial
size automaton accepts infinite language (see book Hopcroft
Ullman (1979) details). Thus, condition 4. tested time polynomial size
C well. Finally, since size G G polynomial size C D,
polynomial number configurations need tested. Together Corollary 7
complexities provide us following corollary.
Proof.



j





j

j



j





G

G







G



G





G

G

C

G

G

C

Corollary 8 given concept descriptions C decidable time polynomial
size C whether lcs C exists .
5.4 Computing LCS

subsection, first show size lcs two -concept descriptions may
grow exponentially size concept descriptions. stronger result
presented partial attributes, shown lcs sequence
concept descriptions grow exponentially. Then, present exponential time lcs
algorithm -concept descriptions.
196

fiWhat's Attribute?

GC 0

:

GDk

:



c

c





b







c

c

b








k

Figure 8: canonical description graphs C 0

k

order show lcs may exponential size, consider following
example, := fa; b; c; dg.We define
0 := # b;
C

:= u=1 ac # ad u u=1 bc # bd u ac # bc a:
corresponding canonical description graphs G 0 G k depicted Figure 8.
finite graph representing lcs C 0 depicted Figure 9 k = 2.
graph easily derived G10 G1k . graph comprises two binary trees
height k, thus, contains least 2 nodes. following, show
canonical description graph G k (with root n0) representing lcs E C 0
less 2 nodes. Let x 2 fc; dg word length k fc; dg, let
v := axa, w := bxa. Using canonical description graphs G 0 G k easy see
C 0 v v # w v v # w. Thus, E v v # w. Algorithm 2, means
words v0; w0 ; u v = v0 u, w = w0 u, paths n0 labeled
v 0 w0 G k leading node G k . Suppose u 6= ". Then, Algorithm 2
implies E v ax # bx. according G , 6v ax # bx. Therefore u must empty
k

k



k









k

k





C

k



C

k

E

k

k

k

k



C





k



k

E

k

E







c



b





c

2
c





c













c







c



Figure 9: finite graph representing lcs C 0 D2
197

fi steres, Borgida
Ku

word ". proves G k path n0 labeled axa every x 2 fc; dg .
Hence, path every ax. Now, let 2 fc; dg x 6= y. paths
ax ay n0 G k lead node, implies E v ax # ay
contradiction C 0 6v ax # ay. result, ax ay lead different nodes G k . Since
fc; dg contains 2 words, shows G k least 2 nodes. Finally, taking
account size canonical description graph concept description linear
size corresponding description obtain following theorem.
k

E

k

E

k





k

E

k

k

E

Theorem 7 lcs two -concept descriptions may grow exponentially size
concepts.

following (exponential time) algorithm computes lcs two -concept descriptions
case exists.
Algorithm 3
Input: concept descriptions C , , lcs exists ;
Output: lcs C ;
1. Compute G0 := G

G

C



;

2. every combination

nodes (h1 ; p0 ), (h2 ; p0) G = G G , h1 6= h2 ;
2 A, e1 ; e2 ; f G , e1 6= e2 , (e1 ; a; f ) (e2 ; a; f ) edges G
C



C

extend G0 follows: Let G


C

h1 ;t

,G

h2 ;t

two trees representing (finite) set words

0
L := @L C (h1 ; e1 ) \ L C (h2 ; e2 ) \
G

[

G

b

62succ(

p0

)

1 (
f"g; 62 succ(p0)
bA [

;

;

otherwise

succ(p0 ) := fb j p0 b-successorg set nodes G 1 , G 2 ,
G0 assumed disjoint. Now, replace root G 1 (h1 ; p0 ), root
G 2 (h2 ; p0 ), extend G0 nodes edges two trees. Finally,
add new node n every word v L, node trees G 1
G 2 reachable root G 1 G 2 path labeled v , add edge
label n . extension illustrated Figure 10.
h ;t

h ;t

h ;t

h ;t

v

h ;t

h ;t

h ;t

h ;t

v

3. step 2, r^oles C switched.
4. Compute canonical graph G0 , called G0 again. Then, output concept
description C 0 G0 .
G

Proposition 3 translation
C D.

CG0

graph G0 computed Algorithm 3 lcs E
198

fiWhat's Attribute?

0

G

(h1 ; p0 )

(h2 ; p0 )

b



b



b

n


c




c



bc

n








bad

n

Figure 10: extension nodes (h1 ; p0), (h2 ; p0 ) G0 L = fb; bc; badg
easy see two paths G0 labeled y1 y2 leading
root (n ; n ) node, G1 contains paths well. Consequently,
(E )G1 v G0.
Now, assume E v y1 # y2, y1 6= y2. Proposition 2 know paths
G1 labeled y1 y2 leading node n. W.l.o.g, may assume n
same-as node G1. Otherwise, exist words y10; y2 0; u y1 = y10u, y2 = y20u
y10 y20 lead same-as node. show G0 contains paths labeled y10
y20 leading node, then, Algorithm 2, sucient G0 v y1 # y2.
let n same-as node. distinguish two cases:
1. n node G = G G , paths y1 y2 paths G. Since G
subgraph G0 holds G0 well. Hence, C 0 v y1 # y2.
2. Assume n node G. Then, since n same-as node, know n
form (f; t) (t; f ) f non-tree node tree node. symmetry,
may assume n = (f; t). easy see exist nodes h1 ; h2 ; e1 ; e2
G , p0 G , tree node q0 G1 well 2 x; v; w 2 specified
Lemma 7 y1 = vxa y2 = wxa. then, h1 ; h2 ; e1 ; e2 ; p0; f
preconditions Algorithm 3 satisfied x 2 L. Therefore, construction
G0 paths labeled y1 y2, respectively, leading root
node.
ut
note product G G G computed time polynomial
size C D. Furthermore, polynomial number combinations nodes
(h1 ; p0 ), (h2 ; p0) G, e1 ; e2 ; f G , 2 A. Finally, finite automaton L
computed time polynomial size C D. particular, set states
automaton polynomially bounded size C D. L contained word
longer number states, accepting path automaton contains cycle.
then, automaton would accept infinitely many words, contradiction assumption
L finite. Thus, length words L bounded polynomially
size C D. particular, means L contains exponential number
words. Trees representing words computed time exponential size
C .
Proof.

C











C



G

C





C



C

199



fi steres, Borgida
Ku

Corollary 9 lcs two -concept descriptions exists, computed time
exponential size concept descriptions.
6. Conclusion

Attributes | binary relations one value { distinguished
many knowledge representation schemes object-centered modeling languages.
done facilitate modeling and, description logics, help identify tractable
sets concept constructors (e.g., restricting same-as attributes). fact, same-as restrictions quite important practical point view, support modeling
actions components (Borgida & Devanbu, 1999).
second distinction, attributes total versus partial functions,
considered essential now. paper shown distinction sometime
significant effects.
particular, first shown approach computing subsumption
Classic concepts total attributes, presented Borgida Patel-Schneider (1994),
modified accommodate partial attributes, treating partial attributes roles
participate same-as restrictions, case \converted" total attributes. result, obtain polynomial-time algorithms subsumption
consistency checking case also.
case computing least common subsumers, introduced technique
learning non-propositional descriptions concepts, first noted several
papers literature (Cohen & Hirsh, 1994a; Frazier & Pitt, 1996) (implicitly) used
partial attributes, considering Classic. Furthermore, papers used weaker
version \concept graphs" employed (Borgida & Patel-Schneider, 1994),
make results hold case same-as restrictions generate \cycles".
Furthermore, algorithm proposed Frazier Pitt (1996) handle inconsistent
concepts, easily arise Classic concepts result con icts lower
upper bounds roles.
Therefore, provided lcs algorithm together formal proof correctness
sublanguage Classic partial attributes, allows same-as equalities
inconsistent concepts | algorithm proofs easily extended full Classic
(Kusters & Borgida, 1999). case, lcs always exists, computed
time polynomial size two initial concept descriptions. shown Cohen et al.
(1992), sequences concept descriptions lcs may grow exponentially
size sequence.
complete picture, main part paper, examined
question computing lcs case total attributes. Surprisingly, situation
different partial attribute case (unlike subsumption). First,
language lcs may even exist. (The existence lcs mentioned Cohen et al.
(1992) due inadvertent switch partial semantics attributes.) Nevertheless,
existence lcs two concept descriptions decided polynomial time.
lcs exists, may grow exponentially size concept descriptions, hence
computation lcs may take time exponential size two given concept
descriptions.
200

fiWhat's Attribute?

aside, note pointed Cohen et al. (1992) concept
descriptions correspond finitely generated right congruence. Furthermore,
context lcs two concept descriptions intersection right congruences. Thus,
results presented paper also show intersection finitely generated
right congruences always finitely generated right congruence,
polynomial algorithm deciding question. Finally, intersection finitely
generated, generating system may exponential computed
exponential time algorithm size generating systems given right
congruences.
results paper therefore lay scope effect making attributes
total partial functions description logic supports same-as constructor.
Moreover, correct problems extend results previous literature.
believe disparity results two cases serve
warning researchers knowledge representation reasoning, concerning
importance explicitly considering difference total partial attributes.
Acknowledgments

authors wish thank anonymous reviewers helpful comments.
research supported part NSF Grant IRI-9619979. carried
first author Rutgers University RWTH Aachen.
References

Artale, A., Franconi, E., Guarino, N., & Pazzi, L. (1996). Part-Whole Relations ObjectCentered Systems: Overview. Data & Knowledge Engineering, 20 (3), 347{383.
Baader, F. (1996). Formal Definition Expressive Power Terminological Knowledge Representation Languages. Journal Logic Computation, 6 (1), 33{54.
Baader, F., & Kusters, R. (1998). Computing Least Common Subsumer
Specific Concept Presence Cyclic ALN -Concept Descriptions. Herzog,
O., & Gunter, A. (Eds.), Proceedings 22nd Annual German Conference
Artificial Intelligence, KI-98, Vol. 1504 Lecture Notes Computer Science, pp.
129{140 Bremen, Germany. Springer{Verlag.
Baader, F., Kusters, R., & Molitor, R. (1999). Computing Least Common Subsumers
Description Logics Existential Restrictions. Dean, T. (Ed.), Proceedings
16th International Joint Conference Artificial Intelligence (IJCAI'99), pp. 96{101
Stockholm, Sweden. Morgan Kaufmann Publishers.
Baader, F., & Sattler, U. (2000). Tableaux Algorithms Description Logics. Proceedings International Conference Automated Reasoning Analytic Tableaux
Related Methods (TABLEAUX 2000), Vol. 1847 Lecture Notes Artifical Intelligence, pp. 1{18 University St. Andrews, Scotland.
201

fi steres, Borgida
Ku

Borgida, A. (1994). Relationship Description Logic Predicate Logic.
Proceedings Third International Conference Information Knowledge
Management (CIKM'94), pp. 219{225 Gaithersburg, Maryland. ACM Press.
Borgida, A. (1995). Description logics data management. IEEE Trans. Knowledge
Data Engineering, 7 (5), 671{682.
Borgida, A., & Devanbu, P. (1999). Adding "DL" IDL: towards knowledgeable
component inter-operability. Proceedings 1999 International Conference
Software Engineering, pp. 378{387 Los Angeles, CA USA. ACM.
Borgida, A., & Etherington, D. (1989). Hierarchical Knowledge Bases Ecient Disjunctive Reasoning. Brachman, R., & H.J. Levesque, R. R. (Eds.), Proceedings
1st International Conference Principles Knowledge Representation
Reasoning (KR'89), pp. 33{43 Toronto, Canada. Morgan Kaufmann Publishers.
Borgida, A., & Kusters, R. (2000). What's name: Properties Purely
Structural Approach Integrating Large DL Knowledge Bases. Baader, F., &
Sattler, U. (Eds.), Proceedings 2000 International Workshop Description
Logics (DL2000), No. 33 CEUR-WS Aachen, Germany. RWTH Aachen.
Borgida, A., & Patel-Schneider, P. (1994). Semantics Complete Algorithm Subsumption CLASSIC Description Logic. Journal Artificial Intelligence Research, 1, 277{308.
Brachman, R., McGuinness, D., Patel-Schneider, P., & Borgida, A. (1999). \Reducing"
CLASSIC Practice: Knowledge Representation Theory Meets Reality. Artificial
Intelligence, 114 (1{2), 203{237.
Calvanese, D., Giacomo, G. D., & Lenzerini, M. (1998). Knowledge Representation Semi-Structured Data?. Proceedings 16th National Conference
American Association Artificial Intelligence, AAAI-98, pp. 205{210. AAAI
Press/The MIT Press.
Calvanese, D., Giacomo, G. D., & Lenzerini, M. (1999a). Modeling Querying SemiStructured Data. Network Information Systems, 2 (2), 253{273.
Calvanese, D., Giacomo, G. D., & Lenzerini, M. (1999b). Reasoning Expressive Description Logics Fixpoints based Automata Infinite Trees. Dean, T. (Ed.),
Proceedings 16th International Joint Conference Artificial Intelligence (IJCAI'99), pp. 84{89 Stockholm, Sweden. Morgan Kaufmann Publishers.
Calvanese, D., Giacomo, G. D., Lenzerini, M., Nardi, D., & Rosati, R. (1998). Description
Logic Framework Information Integration. Cohn, A., Schubert, L., & Shapiro, S.
(Eds.), Proceedings 6th International Conference Principles Knowledge
Representation Reasoning (KR-98), pp. 2{13 Trento, Italy. Morgan Kaufmann
Publishers.
Calvanese, D., Lenzerini, M., & Nardi, D. (1999). Unifying Class-Based Representation
Formalisms. Journal Artificial Intelligence Research, 11, 199{240.
202

fiWhat's Attribute?

Cohen, W. W., & Hirsh, H. (1994a). Learnability description logics equality constraints. Machine Learning, 17 (2/3), 169{199.
Cohen, W. W., & Hirsh, H. (1994b). Learning CLASSIC Description Logic: Theoretical Experimental Results. Doyle, J., Sandewall, E., & Torasso, P. (Eds.),
Proceedings Fourth International Conference Principles Knowledge Representation Reasoning (KR'94), pp. 121{133 Bonn, Germany. Morgan Kaufmann
Publishers.
Cohen, W., Borgida, A., & Hirsh, H. (1992). Computing Least Common Subsumers Description Logics. Swartout, W. (Ed.), Proceedings 10th National Conference
Artificial Intelligence, pp. 754{760 San Jose, CA. MIT Press.
Devanbu, P., & Jones, M. (1997). Use Description Logics KBSE Systems. ACM
Transactions Software Engineering Methodology (TOSEM), 6 (2), 141{172.
Frazier, M., & Pitt, L. (1996). Classic learning. Machine Learning Journal, 25, 151{193.
Giacomo, G. D., & Lenzerini, M. (1996). TBox ABox reasoning expressive description logics. Aiello, L., Doyle, J., & Shapiro, S. (Eds.), Proceedings 5th
International Conference Principles Knowledge Representation Reasoning
(KR'96), pp. 316{327 Boston, USA. Morgan Kaufmann Publishers.
Hopcroft, J., & Ullman, J. (1979). Introduction Automata Theory. Addison-Wesley Publ.
Co.
Kusters, R., & Borgida, A. (1999). What's Attribute? Consequences Least
Common Subsumer. Tech. rep. DCS-TR-404, Rutgers University, USA. Available via
ftp://ftp.cs.rutgers.edu/pub/technical-reports/.
McGuinness, D., & Patel-Schneider, P. (1998). Usability Issues Knowledge Representation Systems. Proceedings 15th National Conference Artificial Intelligence
(AAAI-98) 10th Conference Innovative Applications Artificial Intelligence (IAAI-98), pp. 608{614 Menlo Park. AAAI Press.
McGuinness, D., & Wright, J. (1998). industrial strength Description Logic-based
configurator platform. IEEE Intelligent Systems, 13 (4), 66{77.
Minsky, M. (1975). framework representing knowledge. Winston, P. (Ed.),
Psychology Computer Vision McGraw-Hill, New York.
Quillian, M. (1968). Semantic memory. Minsky, M. (Ed.), Semantic Information Processing, pp. 216{270 Cambridge, Mass. MIT Press.
Schmidt-Schau, M. (1989). Subsumption KL-ONE undecidable. Brachman, R. J.
(Ed.), Proceedings 1st International Conference Principles Knowledge
Representation Reasoning (KR'89), pp. 421{431 Toronto, Ont. Morgan Kaufmann
Publishers.
203

fiJournal Artificial Intelligence Research 14 (2001) 1-28

Submitted 2/00; published 1/01

Reachability, Relevance, Resolution Planning
Satisfiability Approach
Ronen I. Brafman

brafman@cs.bgu.ac.il

Department Computer Science, Ben-Gurion University
P.O.Box 653, Beer-Sheva 84105, Israel

Abstract

recent years, growing awareness importance reachability
relevance-based pruning techniques planning, little work specifically targets
techniques. paper, compare ability two classes algorithms propagate
discover reachability relevance constraints classical planning problems. first
class algorithms operates SAT encoded planning problems obtained using linear
Graphplan encoding schemes. applies unit-propagation general resolution steps (involving larger clauses) plan encodings. second class operates
plan level contains two families pruning algorithms: Reachable-k Relevantk . Reachable-k provides coherent description number existing forward pruning
techniques used numerous algorithms, Relevant-k captures different grades backward pruning. results shed light ability different plan-encoding schemes
propagate information forward backward relative merit plan-level
SAT-level pruning methods.
1. Introduction

success planning satisfiability (PAS) approach (Kautz & Selman, 1992, 1996)
led various attempts refine initial methods used improve understanding performance. particular, various methods generating formulas
planning instances compared (Ernst, Millstein, & Weld, 1997), various systematic alternatives original stochastic method examined (e.g., Bayardo
& Schrag, 1997; Li & Anbulagan, 1997). Still, many issues surrounding approach
poorly understood. particular, little known uence encoding method
performance.
Concentrating two encoding methods proposed Kautz Selman (1996),
linear Graphplan-based encodings, examine uence ability
propagate reachability relevance information via unit propagation and, generally,
k -clause resolution. comparing pruning ability techniques
class algorithms reachability relevance analysis operate original
problem formulation: Reachable-k Relevant-k. Reachable-k simplified variant
similar algorithm state pruning Markov decision processes (Boutilier, Brafman, &
Geib, 1998), Relevant-k natural counterpart used relevance analysis.
algorithms provide coherent framework discussing different grades reachability
relevance-based pruning methods appear literature.
work motivated growing role forward backward pruning methods
play current planning algorithms important role propagation techniques

c 2001 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiBrafman

SAT solvers used planning satisfiability approach. Unit propagation plays
central role Davis-Putnam algorithm (Davis & Putman, 1960) many
offsprings (e.g., Crawford & Auton, 1993; Freeman, 1995; Gomes, Selman, & Kautz, 1998;
Li & Anbulagan, 1997) used preprocessing step stochastic methods
applied. Moreover, limited form binary propagation used Crawford's Compact
program simplifying CNF formulas utilized Blackbox planner (Kautz
& Selman, 1999). results shed light relationship pruning
techniques.
paper organized follows. Section 2 provides background material, describing
basic ideas PAS framework Graphplan algorithm. Section 3,
discuss Reachable-k , algorithm performing reachability analysis, compare
ability prune possible actions k-clause resolution. Section 4 describe
Relevant-k similar Reachable-k applied relevance analysis. Again,
compare methods based resolution. Section 5 empirically compare results
various methods k = 1; 2. conclude discussion future related work
Section 6. Proofs appear appendix, main arguments described
body paper.
2. Background

Graphplan algorithm (Blum & Furst, 1997) Satplan algorithm (Kautz
& Selman, 1996) profoundly altered direction research within planning
community. Two main concepts studied paper, reachability analysis plan
encodings, become central current planning research thanks planners.
brie discuss planners, particular, aspects pertaining topic.

2.1 Reachability Analysis Graphplan
purpose reachability analysis discover unreachable states world
infeasible actions, i.e., actions cannot performed course successful plan.
discovering actions ahead time, reduce space needs searched
find valid plan. principle, full edged reachability analysis requires forward search
space possible states. expensive operation, instead, opt
sound, incomplete methods. methods discover actions
ruled out. However, action rule infeasible need considered
searching plan.
Graphplan planner provides good example utility approximate reachability analysis. Graphplan two main stages: first stage, approximate reachability analysis conducted, yielding data-structure called planning graph
represents sound, incomplete, approximation set states reachable
initial state. second stage, Graphplan searches plan structure.
Graphplan's planning graph construction algorithm presents particularly good tradeoff
computational complexity pruning power, utility pruning search
space attested planner's good performance.
planning graph construction algorithm viewed generating list annotated sets. odd elements list contain sets propositions. even elements
2

fiReachability, Relevance, Resolution

list contain sets actions. set annotated mutual exclusion constraints members. Intuitively, action set contains list actions could
performed step concurrent action plan (i.e., plan allowing concurrent
execution actions interfere other). proposition set contains
propositions could hold 1 (sets concurrent) actions performed.
mutual exclusion constraints circumscribe sets indicating certain pairs
actions propositions cannot occur time particular stage. Hence,
propositions p; q appear proposition set, possible (or accurately
{ algorithm rule possibility) i-step plan applied initial
state could lead world p and/or q hold. However, p q marked
mutually exclusive know p q cannot hold together i-step plan
performed.
sets constructed follows: first proposition set contains propositions
hold initial state. first action set contains actions performed
initial state. general, set propositions contains effects actions
i-1 action set, action set contains actions whose preconditions appear
i-1 set propositions, provided preconditions marked mutually
exclusive. Mutual exclusion constraints added follows: Two actions marked
mutually exclusive action set preconditions marked mutually exclusive
i-1 . Clearly, preconditions actions cannot hold time
point, cannot perform actions together time point. Another reason
marking actions mutually exclusive con ict. is, one action destroys
precondition effect action. Two propositions proposition set
marked mutually exclusive pairs actions i-1 action set
effects mutually exclusive. case, way us achieve
propositions together stage.
initial construction planning graph terminated goal propositions
appear last proposition set. point, Graphplan performs form regressionbased search planning-graph structure. search fails, planning graph
extended one additional layer actions one additional layer propositions
searched again. details, see article Blum Furst (1997).
th

th

th

th

th

th

th

th

th

th

th

th

2.2 Planning Satisfiability Approach
Planning Satisfiability approach (PAS short), works follows: given planning
problem bound n size plan, plan encoder generates propositional
formula conjunctive normal form. formula following property: satisfiable
iff planning problem solution n time steps. Intuitively, formula
composed propositions describing state world throughout execution
n-step plan.
propositional language top formula defined contains proposition
possible aspect world time point. example, suppose looking
blocks' world domain states described using clear relations.
case, pair blocks x; y, time point 0 n shall introduce
proposition pon( ) corresponds x top time t. Similarly,
x;y;t

3

fiBrafman

every block x time point 0 n, shall introduce proposition pclear( )
corresponds x clear time t.
truth assignment language described viewed describing state
world execution n-step plan. instance, pon( 3) assigned
true , block top block B time 3. course, truth assignments
language would correspond anything resembling true state world
execution actual plan. example, on(A,B) on(B,A) could
assigned true . goal encoding scheme generate formula
assignment satisfying formula correspond true state world
execution actual plan achieves desired goal. axiom formula
places constraint value propositions combined effect
constraints ensure resulting formula precisely desired truth
assignments. example, one type axiom conjunction propositions
corresponding initial state. truth assignment satisfying axiom must ensure
propositions hold time 0. Another class axioms could state
action performed time world time 1 must satisfy preconditions
a. next sections discuss two central plan encodings detail.
appropriate formula generated, simplified using various well
known techniques. particular, simplifiers employ unit-resolution step (Genesereth
& Nilsson, 1987). Unit resolution (also known unit propagation ) works follows:
satisfy CNF formula, must satisfy clauses. particular, one
clauses contains single literal (such clause known unit clause ) immediately
know variable appearing clause must assigned appropriate value.
clause containing literal satisfied now, removed
formula. clause c containing negation literal resolved
unit clause, resulting clause (which smaller c) replace c. example,
suppose formula (p) ^ (:q _:p) ^ (r _ p). first disjunct, (p) unit clause.
Hence, p must assigned true . makes third clause, (r _ p), satisfied. second
clause resolved first clause, replace (:q _ :p) (:q).
new unit clause, (:q), proposition q must assigned value false .
additional clauses containing q :q, could remove them, simplify them,
appropriate.
simplification, apply favorite algorithm finding satisfying assignments,
one attained, decoder used obtain actual plan solution.
find satisfying assignment, increase value n (the size plan),
try again.
Finally, note Blackbox planner (Kautz & Selman, 1999) combines PAS
Graphplan's reachability analysis. constructs planning graph, uses
generate particular plan encoding.
x;t

A;B;

3. Reachability Resolution

Reachability relevance analysis form essential part successful modern planning
algorithms. notable example reachability analysis Graphplan's planning
graph (Blum & Furst, 1997), many recent planners employ either reachability analysis
4

fiReachability, Relevance, Resolution

(e.g., Bonet, Loerincs, & Geffner, 1997), relevance analysis (e.g., McDermoot, 1996; Nebel,
Dimopoulos, & Koehler, 1997), (Kambhampati, Parker, & Lambrecht, 1997).
importance reachability relevance analysis noted context decisiontheoretic planning well. example, Boutilier Dearden (1994) employ relevance
analysis reduce state-space, Boutilier, Brafman, Geib (1998) describe
general method reachability analysis MDPs. Below, discuss method
simplified form suitable classical planning problems described using Strips representation language (Fikes & Nilsson, 1971). Section 4, present counterpart
method performing relevance analysis relate algorithms k-clause resolution
context SAT-encoded planning problems.

3.1 Propagating Reachability Information
Reachable-k (Boutilier, Brafman, & Geib, 1998) algorithm estimating states
reachable given initial state. formulated, quite general applies domains non-deterministic actions conditional effects. Figure 1, present
simplified version algorithm, Reachable-k , deals deterministic, unconditional actions represented Strips representation language. prolog implementation
Reachable-k available www.cs.bgu.ac.il/~pdm.
important reason interest Reachable-k similarity uential planning graph construction Graphplan planner (Blum & Furst, 1997).
fact, generalizes ideas behind Graphplan's planning graph, equivalent
Reachable-2. use denote set actions feasible steps initial state,

denote corresponding set propositions, C denote constraints
propositions, fp1 ; : : : ; p g 2 C propositions cannot co-occur

steps. C denotes similar constraints actions. Here, 2 fL; P g, L used
restrict attention linear action sequences, P used allow concurrent
non-con icting actions (i.e., actions destroy others' effects preconditions
whose preconditions constrained co-occur). course, k = 1 sets


C C empty 0. (Actually, defined, C
empty even
k = 1, plays real part algorithm, ignored). Finally, note
description, set possible actions contains actions form noop[l],
l literal.
k = 2, represent propositional action levels Graphplan's
planning graph, C C hold respective mutual exclusion constraints.
stated termination condition Reachable-k, one formulated
based content index itself. PAS framework, number
time-steps fixed, one would opt second alternative. Reachable-k gives us sets
actions propositions, ; , could occur performance j actions (or
j sets concurrently non-con icting actions) initial state. easy see
Reachable-k sound following sense:














L








P






j

j

Theorem 1 set propositions actions excluded Reachable-k time j

feasible plan which, time j , propositions hold or, respectively,
actions appear.
5

fiBrafman

= literals hold initial state.



S0



C S0

= fg.

= actions whose preconditions S0 .
C AL
0 = ffai ; aj gjai ; aj 2 A0 ; 6= j; neither ai aj noops aj noop whose effect
destroyed ai g.
C AP = ffai ; aj gjai ; aj 2 A0 ; 6= j; ai deletes precondition effect aj g.


A0

0

define Si ; Ai inductively follows:
= literals appear effects Ai 1 .
C Si = l-tuples literals, l k , appearing Si subset set
actions Ai 1 literals appearing among effects, appears C Ai 1
(where 2 fL; P g appropriate).




= actions whose preconditions appear Si subset preconditions appears
C Si .
C AL
= ffal ; aj gjal ; aj 2 Ai ; l 6= j; neither al aj noops, aj noop whose effect
destroyed al g.
C APi = ffaj1 ; : : : ; ajl gjl k; aj1 ; : : : ; ajl 2 Ai ; jm 6= jn 6= n; either (1) ajm
deletes precondition effect ajn 6= n (2) subset union
preconditions aj1 ; : : : ; ajl appears C Si g.




Figure 1: Reachable-k Algorithm
Sometimes, actions executed particular time point p holds
:p effect. case, ignore noop[p] action, part
useful plan.1 However, formulated, p appear Reachable-k 's next level.
denote Reachable -k variant noop[p] appear case.
computational complexity Reachable-k O(njAjjLj E + njLjjAj ), n
number levels generate, jAj number possible actions, jLj size
propositional language used, E maximal number actions particular
shared effect. detailed explanation appears Appendix B.
Example: illustrate parallel action version Reachable-k, use following
planning domain: four propositions, p1 ; p2 ; p3 ; p4 . Intuitively, think
representing binary counter 4 bits. 4 actions,
increases counter one different states. domain single non-noop
action applicable state. a1 changes least-significant bit, a2 changes next
bit, a3 changes third bit, a4 changes significant bit. applicable
first 1 bits one. specifically actions are:
k

k

k



1. planning algorithms, e.g., PAS approach, may necessary leave noops in.

6

fiReachability, Relevance, Resolution

a1

Precondition:

:

a2

Precondition:

p1

a3

Precondition:

p

p

a4

Precondition:

p

p

p1

; effect:

p1

.

^ : 2; effect: : 1 ^ 2.
1 ^ 2 ^ : 3 ; effect: : 1 ^ : 2 ^ 3 .
1 ^ 2 ^ 3 ^ : 4 ; effect: : 1 ^ : 2 ^ : 3 ^
p

p

p

p

p

p

p

p

p

p
p

p

p4

.

compare Reachable-1 Reachable-2 using initial state: :p1 ^:p2 ^:p3 ^:p4 ,
corresponds binary representation 0. concentrate (more interesting)
parallel action version algorithm, shall mention noops explicitly obvious
mutual exclusion constraints propositions negations.
context Reachable-1, C C empty, practical purpose.
start S0 = f:p1 ; :p2 ; :p3 ; :p4 g; action affecting first bit applicable,
A0 = fa1 g (and relevant noops); S1 = fp1 ; :p1 ; :p2 ; :p3 ; :p4 g.
preconditions a1 a2 appear S1 , A1 = fa1 ; a2 g. Consequently
S2 = fp1 ; :p1 ; p2 ; :p2 ; :p3 ; :p4 g. Now, also apply a3 , A2 = fa1 ; a2 ; a3 g;
S3 = fp1 ; :p1 ; p2 ; :p2 ; p3 ; :p3 ; :p4 g. Finally, stage preconditions a4 appear
well, A3 = fa1 ; a2 ; a3 ; a4 g.
Next, consider Reachable-2. Again, S0 = f:p1 ; :p2 ; :p3 ; :p4 g, C S0 empty, A0 =
fa1 g. next step have: S1 = fp1; :p1 ; :p2; :p3; :p4g, interesting constraints
C S1 , A1 = fa1 ; a2 g. However, C contains (a1 ; a2 ), interfering
actions. S2 = fp1 ; :p1 ; p2 ; :p2 ; p3 ; :p3 ; :p4 g, case k = 1. However, C S2 contains
(p1 ; p2 ). follows fact actions A1 capable producing p1
a1 noop[p1 ], action A1 capable producing p2 a2 . a2 interferes
a1 noop[p1]. Therefore, C S2 contains (p1 ; p2 ), a3 applicable
stage. Hence, A2 = fa1 ; a2 g, one action less set A2 Reachable1. S3 = S2 = fp1 ; :p1 ; p2 ; :p2 ; p3 ; :p3 ; :p4 g. However, C S3 contain (p1 ; p2 )
(because noop[p2] used achieve p2 , con ict with, e.g., noop[p1]).
Therefore, A3 = fa1 ; a2 ; a3 g.
see k = 3 improves ability prune k = 2, suppose S0 =
fp1 ; p2; :p3; :p4 g (i.e., counter's value 0011) consider k = 2 first.
A0 = a3 S1 = f:p1; p1; :p2 ; p2 ; :p3 ; p3 ; :p4 g, (p1 ; p3 ); (p1 ; :p2 ); (:p1 ; p2 )
(p2 ; p3 ) C S1 . mutual exclusion relations stems fact a3
mutually exclusive noop[p1] noop[p2 ]. Therefore, A1 = fa1 ; a3 g.
S2 = S1 = f:p1; p1; :p2 ; p2 ; :p3 ; p3 ; :p4 g, C S2 contains (p1 ; p2 ) only,
A2 = fa1 ; a2 ; a3 g. Now, C S3 empty, A3 = fa1 ; a2 ; a3 ; a4 g. However, k = 3,
C S1 contains ternary constraint (p1 ; p2 ; p3 ). ternary constraint remains C S2
well, C S3 . C S3 k = 3, a4 62 A3 .






3.2 k-Clause Resolution Reachability
-clause resolution (or propagation) refers resolution pairs clauses one whose
length k most. k = 1 variant, i.e., unit propagation, integral part
major algorithms generating satisfying assignments.
wish compare type reachability information derived performing k-clause
resolution SAT-encoded planning problems, information obtained running
k

7

fiBrafman

Reachable-k algorithm. reachability information mean constraints set
actions possible time point constraints world states (in form of, e.g., sets
unreachable propositions k-tuples propositions). Hence, example, constraint
form a(t) _ a0 (t) implies one actions a0 must appear time
plan. constraint form :a(t) _:a0(t) implies one actions a0 must
appear plan. Similar constraints propositions holding time point also
derived. principle, constraints reduce search space could help us attain
solution quickly. However, effectiveness deduced constraints depends
precise algorithm used. Moreover, comparison large class constraints
seems quite dicult. Therefore, article concentrate concrete class
reachability information form :a(t), i.e., action cannot performed
state reachable via steps. powerful constraint utilized effectively
almost planners (perhaps exception partial-order planners). Consequently,
shall say algorithm Alg1 generates reachability information another
algorithm Alg2 whenever Alg2 able determine action cannot performed
time t, Alg1 able reach conclusion well, addition,
conclusions Alg1 reach Alg2 cannot reach. Hence, Alg1 generates
strict superset constraints actions (of type interested in) generated
algorithm. Note mean Alg1 better Alg2
every instance, always good, cases better. section
shall compare pruning ability two Reachable-k variants two encoding
methods discussed Kautz Selman (1996):2 linear encoding Graphplan
encoding.
3.2.1 Linear Plan Encoding

linear plan encoding (Kautz & Selman, 1992) simple natural method
translating planning problem formula satisfiable iff valid plan
length n (for given n). clauses linear plan encoding fall following
classes:
1. action implies preconditions prior execution;
2. action implies effects following execution;
3. action affect proposition (frame axioms);
4. least one action time point;
5. one action time point.
explicit frame axioms, noops needed linear encoding (as
opposed Graphplan encoding). addition, formula contains unary clauses
describing initial goal states. However, purpose analyzing reachability
effects, exclude description goal state (which plays role relevance analysis).
Consider mechanism resolution yield reachability information: Given
propositions hold initial state, derive negation actions whose
2. third (state-based) encoding method cannot generated automatically.

8

fiReachability, Relevance, Resolution

preconditions hold using unit propagation axioms class 1. Propagating
unit clauses appropriate instance axiom class 4, obtain disjunction
actions executed first time point. far, identical
Reachable -k provides. propagate information forward, resolve
action disjunctions axioms class 2 3. This, however, requires binary resolution
(discussed below). Hence, except unlikely case single action possible,
derive using unit propagation alone. Reachable -1,
hand, provide us list possible effects actions possibly
prune future actions whose preconditions appear list. conclude:
Lemma 1 context linear encoding, Reachable -1 yields reachability in-

formation unit propagation.

Example: Consider blocks' world domain single action schema move(object,source,

destination).3 preconditions are: on(object,source), clear(object), clear(destination)
effects are: on(object,destination), clear(source), :on(object,source), : clear
(destination) (except destination table always clear). k
stacks blocks initially, k2 actions performed initial state (i.e., moving block
top stack top another stack table). discovered
algorithms. particular, unit propagation yield disjunction actions.
know blocks 2 blocks top cannot participate
second move action. Reachable-1 find due fact
clear. Suppose one block. initially feasible move actions participate
frame axiom form move(o,s,d)^:clear(A; 0) ! :clear(A; 1), which, clausal
form :move(o,s,d)_clear(A; 0) _ :clear(A; 1). Resolving :clear(A; 0),
:move(o,s,d)_:clear(A; 1). could deduce :clear(A; 1), could rule
actions precondition. restricted unit propagation,
requires deducing move(o,s,d) initially feasible action, cannot make
deduction.
propagated information forward using axioms class 2 3 used binary
resolution (as discussed Lemma 1), set disjunctions possible
effects (including frame effects) initially allowable actions. number
disjuncts O(e ), e maximal number effects action
number actions executed initially. cases, disjunctions could
contain single literal, e.g., initially allowable actions leave proposition
unchanged. one disjunctions contains literals negations
action's precondition, deduce negation action resolving
axioms class 1.
Example: example considered would generate disjunction form
move(o1 ; s1 ; d1 ) _ move(o2 ; s2 ; d2 ) _ move(o3 ; s3 ; d3 ), containing instances move
action time 0 whose negations deduced. discussed above,
actions, obtain clause form :move(o ; ; )_:clear(A; 1). resolve
binary clauses clause above, obtain unary clause :clear(A; 1),








3. fact, since use plain Strips, need three action schemas: one moving block block, one
moving block table, one moving block table. However,
affect analysis, stick single move action following examples.

9

fiBrafman

used conjunction class 1 axioms deduce negations step 2 actions
whose preconditions include clear(A; 1).
saw, effect disjunctions discussed allow us rule certain propositions combinations propositions. analogous mutual exclusion constraints.
mutual exclusion constraints used prune actions. example, deduce :p1 _ _ :p p preconditions action a, deduce :a
using binary resolution (by resolving precondition axioms disjunction). However,
show below, binary resolution trouble propagating even binary mutual exclusion
constraints forward. believe generally true, i.e., k-clause resolution
trouble propagating k-ary constraints. show following:




Lemma 2 Reachable-2 binary resolution (in case linear encoding) incomparable.

prove providing two examples. One Reachable-2 able prune
action binary resolution cannot, one converse hold.
First, consider 4-bit counter initial value 0000 (i.e., :p1; :p2 ; :p3 ; :p4 ). four steps obtain following: S4 = f:p1 ; p1 ; :p2 ; p2 ; :p3 ; p3 ; :p4 g C S4 =
f(p1 ; p3 ); (p2 ; p3)g. Therefore, A4 = fa1 ; a2 ; a3 g. implies S5 = S4 . claim
(p2 ; p3 ) 2 C S5 well, means a4 62 A5 . see this, consider pairs
actions p2 p3 effects. are: (a2 ; a3 ); (a2 ; noop[p3]); (noop[p2 ]; a3 ),
(noop[p2]; noop[p3 ]). (a2 ; a3 ) pair real actions, always mutually exclusive
linear encoding. preconditions (a2 ; noop[p3]) mutually exclusive according
C S4 , preconditions (noop[p2]; noop[p3]). Finally, (noop[p2]; a3 )
interfering actions. conclude (p2 ; p3 ) 2 C S5 a4 62 A5 .
run binary resolution procedure linear encoding problem,
could deduce a4 62 A5 . stems fact ternary resolution needed
propagate mutual exclusion p2 p3 . Recall obtain mutual exclusion
constraints resolving disjunction actions ruled out.
case, time 4 would following disjunction: a41 _ a42 _ a43 _ noop[:p1] _
_ noop[6= p4]. goal deduce :p52 _ :p53 using :p42 _ :p43 various axioms.
this, try deduce either :p52 _:p53 actions disjunction.
easy deduce :p52 a43 :p52 a42 . However, believe impossible
deduce :p52 _ :p53 a41 noops.4 reason
deduction involves use frame axioms, ternary. know that, e.g., :p42
holds, apply unit resolution frame axioms obtain binary clause. However,
know :p42 _ :p43. resolve frame axiom remain
ternary clause. get desired result must resolve two ternary clauses.
Finally, let us see example use binary resolution derive ternary
constraint. definition, Reachable-2 cannot derive constraints. Suppose
initial state :p; :q; :r. four actions: a1 p; r effects, a2 q; r effects,

a3 p; q effects, a4 p; q; r preconditions. Using Reachable -2 deduce
a1; a2; a3 possible time 0. get possible effects p; q; r; :p; :q; :r (recall
4. fact deduction impossible verified. hypothesizing reason
it.

10

fiReachability, Relevance, Resolution

must include noop actions Reachable-k order capture frame effects).
strict subset p; q; r appear set constraints C S1 . Since deal binary
constraints only, set fp; q; rg appear C S1 . Therefore, consider a4
possible time 1, although, fact, impossible. Using binary resolution, would
obtained constraint :p _ :q _ :r (referring time 1) would enabled
us deduce a4 impossible time 1.
3.2.2 Graphplan Encoding

Graphplan encoding differs linear encoding ability consider multiple
concurrent (non-interfering) actions, allowing one obtain shorter plans which, turn,
reduce search space size. constructs following sets clauses:
1. action implies preconditions;
2. effect implies one actions effect;
3. least one action time-point;
4. Two con icting actions cannot occur together.
Besides obvious ability consider multiple parallel (non-interfering) actions, important difference Graphplan Linear encoding axiom class 2 (referred
(Ernst et al., 1997) explanatory frame axioms.) Clauses class contain
positive occurrences action literals negative occurrences state literals.
linear case, using unit propagation infer actions cannot
applied initial state. Using axioms class 2, propagate information forward, deducing negation effects cannot produced initially allowable
actions. information enables us exclude actions whose preconditions cannot produced. forward propagation essentially identical Reachable-1. informally
conclude:

Lemma 3 context

encoding, unit propagation Reachable-1
yield reachability information, ignore explicit constraints appearing
axiom class 4. use constraints, unit propagation yield reachability
information.
Graphplan

precise carefully define notion reachability constraints context
Graphplan encoding. example, Graphplan encoding derive
constraint says one group actions must appear plan. constraint
necessarily rule action Graphplan encoding permits multiple
actions time point.5 However, linear encoding constraint
immediately rule actions single action allowed time
point. mentioned earlier, paper concentrate strict exclusion constraints
5. However, actions interfere cannot occur concurrently, know action
occur deduce action interferes occur. precisely
class 4 axioms enter picture.
0

11

fiBrafman

lead immediate reduction search space ruling need certain
actions certain time points.
k > 1, mechanism remains same. now, axioms class 4 play
prominent role use exclude actions cases
before. However, problem propagating mutual exclusion constraints forward
linear encoding reappear here. Consequently, k-clause resolution
context Graphplan encoding Reachable-k incomparable.
4. Relevance Resolution

Relevance analysis complex task performed various degrees.
instance, considering last action level, one exclude actions produce
literal goal. However, actions producing goal literal also irrelevant.
example, consider blocks' world planning problem color blocks
specified part goal. observed Nebel, Dimopoulos, Koehler (1997),
paint-block action still, intuitively, irrelevant initial final colors blocks
same. However, goal literal effect.
section, formulate algorithm relevance analysis, called Relevant-k .
Relevant-k perform deeper relevance analysis needed determine
paint-block action irrelevant example. Rather, Relevant-k similar
motivation form Reachable-k , similar soundness property. Relevant-k
prunes search space excluding states goal reachable within
given number steps actions useful achieving goal state within
given number steps.
Relevant-1 similar number existing components existing planners,
McDermott's greedy regression graph (McDermoot, 1996) Nebel, Dimopoulos,
Koehler's And-Or trees (Nebel et al., 1997). Relevant-k generalizes ideas arbitrary
levels interactions, taking consideration mutual-exclusion constraints relevant
states must satisfy. Relevant-k slightly complicated Reachable-k
Strips formalism allows incomplete description goal states, propagating partial information raises diculties. Naturally, goal state partially specified,
fewer constraints available start with, fewer constraints derived.
algorithm described Figure 2. aware similar, general formulation
ideas. Therefore, worthwhile going central points algorithm,
concentrating interesting complex case parallel actions allowed. However, this, point important assumption shall make
action representation used: proposition symbol shall appear preconditions effects action. restriction dicult enforce,
Strips-based domain representation transformed description
assumptions satisfied. example, p precondition action appear
effect a, simply add effect, know must hold
action executed. p appears effect neither p :p appear
preconditions a, decompose two versions action, one p
precondition one :p precondition. Note worst case,
transformation cause exponential blow-up number actions.
12

fiReachability, Relevance, Resolution

r contains actions useful safe w.r.t. goal.
A0 contains Ar0 noops safe w.r.t. goal.


A0

contains pairs interfering actions A0 .
define Ri ; Si ; Ari ; Ai inductively follows:
Ri union preconditions actions Ari 1 .


C A0





union preconditions actions Ai 1 .

contains sets literals Si , jS j k set actions Ai 1
whose preconditions contain case 2 C Ai 1 .
Ari contains actions useful w.r.t. Ri subset effects contained
C Si .
Ai contains Ari noops useful w.r.t. Si .
C Ai contains action sets Ai either (1) contains two interfering
actions, (2) subset set effects C Si .



CS

Action descriptions must contain set propositional symbols precondition
effect lists.

Figure 2: Relevant-k Algorithm
k = 1 algorithm quite simple (and identical parallel linear cases).
case, ignore sets ; C ; C (as degenerate) consider
sets R only. Starting goal literals, stage set
literals construct next set actions. action set contains actions
effect current literal set. However, goal effects action
part preconditions, ignore action irrelevant. Next, new literal set
constructed, containing set preconditions current set actions, repeat
process new set.
k > 1, picture becomes bit complicated. start set
relevant actions, . actions achieve one desired literals.
particular, A0 contains actions one goal literals effect (but
precondition). goal partially specified, literals part could hold
previous time step. Hence, include appropriate noop actions larger set,
, contains noops destroy needed propositions. subset
actions mutually exclusive contains interfering actions actions whose
effects mutually exclusive. Given set 1 , generate set R , includes
preconditions 1 . set defined set preconditions actions .
goal completely specified state, sets R sets
identical, need distinguish them.








r




r


r

r






r


r












13



r


fiBrafman

facilitate description Relevant-k algorithm, would useful add
simple definitions. First, wish revise definition interfering actions
context Relevant-k algorithm. say actions a; a0 interfere
effect con icts precondition effect a0 (and beyond
previous definition term) preconditions inconsistent. action useful
w.r.t. (with respect to) literal l noop action preserving l l effect,
precondition, a. useful w.r.t. set literals useful w.r.t. one
set's elements. set actions safe w.r.t. set literals action
effect negates element .
Relevant-k embodies intuitions described above. Note increased index corresponds points earlier time. definition sets ; R ; ; quite intuitive:
contains preconditions actions previous , R contains preconditions actions . contains actions useful, mutually exclusive,
effects. defined much like , w.r.t. rather R . set C contains
literals mutually exclusive particular point. set L literals mutually
exclusive set relevant actions L among preconditions mutually
exclusive. set C contains mutually exclusive sets actions. set actions
mutually exclusive contains interfering actions set effects mutually
exclusive.
Example: order illustrate Relevant-k algorithm, shall use counter
example used Section 3.1, starting three bit counter using propositions,
p1 ; p2 ; p3 . actions a1 ; a2 ; a3 change value single bit 0 1,
provided values lower bits 1.
start final state f:p1 ; :p2 ; p3 g k = 1. Since final state fully
specified, distinction sets R . A0
contains action a3 three relevant noops. S1 contains fp1 ; :p1 ; p2 ; :p2 ; p3 ; :p3 g,
A1 contains a1 ; a2 ; a3 , appropriate noops, remaining sets look
same.
k = 2, A0 S1 k = 1 case. However, C S1 contains (:p1 ; p2 )
(p1 ; :p2 ), implies a2 cannot applied. Hence, A1 contains a1 a3 ,
a2 , unlike case k = 1. action a2 would introduced next step.
Next, consider partially specified goal, fp3 ; p2 g k = 2. A0 =
fa2 ; noop[p2]; noop[p3]g a2 p2 effect, a2 destroy p3; whereas
a1 , example, effect goal. A0 would contain A0 well
noops p1 :p1 . R1 = fp1 ; p2 ; :p2 ; p3 g S1 = fp1 ; :p1 ; p2 ; :p2 ; p3 g. Next, A1
contains fa1 ; a2 g, etc.
Finally, suppose four bits, goal state f:p1 ; :p2 ; p3 ; p4 g (i.e.,
counter's bit value 1100). k = 2, A0 contains a3 S1 = fp1 ; :p1 ; p2 ; :p2 ; p3 ; :p3 ; p4 g.
However, C S1 contains pairs (:p1 ; :p3 ); (:p2 ; :p3 ) others. A1 contains a1 ; a3
noops. S2 = S1 , now, C S2 contain (:p1 ; :p3 ), contain
(:p2 ; :p3 ), though, precludes action a4 A2 . next step,
S3 = S2 = S1 , C S3 longer contains (:p2 ; :p3 ). implies
add a4 A3 effects longer mutually exclusive. overall,
A0 = fa3 g; A1 = fa1 ; a3 g; A2 = fa1 ; a2 ; a3 g, A3 = fa1 ; a2 ; a3 ; a4 g. However, k = 3,










r


r




r


r
















r




r

r

r

14

fiReachability, Relevance, Resolution

would still mutual exclusion constraint (:p1 ; :p2 ; :p3 ), would
allow us add a4 . Hence, k = 3, A3 = fa1 ; a2 ; a3 g.
prove following soundness results:
C S3

Theorem 2 Let

state goal reachable using m-step plan
(where step contain number non-interfering actions). (1) set
literals satisfied subset , subset C , (2) exists
m-step plan reaching goal set actions plan
v steps last subset C .






v

v

corollary theorem is:

Corollary 1 initial state goal reachable minimal (in
number operators) plan P = A0 ; : : : A00 (where steps numbered backwards)
reaching goal s, A0 C contain subset A0 .










complexity Relevant-k O(jAj jLj + jLj
jAj), jAj number
actions, jLj number proposition language, maximal number
preconditions action. details, see Appendix B.
compare amount relevance information propagated backwards
using k-clause resolution goal literals opposed Relevant-k . Consider unit
propagation first. context linear encoding, see actions destroy
goal condition ruled out. However, actions irrelevant
produce irrelevant effects pruned.6 hand, Relevant-1 prunes
actions destroy goal literal actions simply irrelevant.
slightly degenerate case actions one destroy goal proposition.
case, using unit propagation able deduce previous state. Consequently,
have:
k

k

k
mp

p

Lemma 4 context linear encoding, unless single safe, final action,

unit propagation yields less relevance information Relevant-1.

context Graphplan encoding situation often worse, unit propagation prunes even less linear encoding. goal propositions appear
class 2 (effect) axioms. Propagating axioms, obtain disjunctions
positive action propositions explaining particular goal proposition. assume
literals one explanation, see new unit clauses emerge. Consequently, prune nothing.
Example: Consider blocks' world domain again. Suppose three
blocks A,B, C, goal on(A,B). Clearly, action moves block C
moves another block top block C irrelevant last action. consider
Graphplan encoding, unit clause on(A,B,t) (where last
time point). resolve effect axiom lists possible causes
on(A,B,t). Aside noop action, actions moving C B
6. general, proving action ruled means shown models, i.e.,
plans, action appear. cannot expect able irrelevant action
since could possibly inserted plan without affecting it.

15

fiBrafman

moving Table B. yields new ternary clause additional unit
clauses. axioms on(A,B,t) appears negated.
Notice means excluding actions destroy one goal literals.
example, goal clear(A,t), would want action move(B,C,A,t-1)
last action. However, above, deduce clear(A,t) is: move(B,A,C,t1)_move(B,A,Table,t-1)_ move(C,A,B,t-1)_move(C,A,Table,t-1)_ noop[clear(A; 1)].
could use binary resolution stage, could deduce negation action
effect :clear(A,t), action would mutually exclusive
five actions.
goal literal l single explanation must noop action (which implies
\real" operator effect). case, would able deduce
noop action must hold, using precondition axioms, would deduce
l must hold previous step. Using mutex axioms (class 4) could deduce
negation action destroys l. However, cannot deduce negation
action interact l, whether simply irrelevant destroys
goal literal.
Example: Consider domain Rocket domain, rocket fuel,
action fueling rocket. Suppose rocket fuel goal
state. Hence, fuel(t) holds. Since explanation axiom fuel binary clause (i.e.,
:fuel(t) _ noop[fuel(t 1)]. Resolving axiom fact fuel(t), derive new
unit clause noop[fuel(t 1)]. Using precondition axioms, derive fuel(t-1).
Using mutex axiom, derive action fly(t-1), one whose effects
:fuel(t 1). Notice, though, cannot deduce negation action
interact proposition fuel, whether irrelevant. example, fuel
proposition goal, action loading rocket,
affect value proposition fuel need considered final action
plan. However, before, way deducing :load(t 1).
action produce fuel reasoning would apply step,
able deduce fact fuel holds time point plan.
Using fact, able prune actions :fuel precondition.
Relevant-1 able so: :fuel precondition effect
relevant point, considered relevant action.7

Lemma 5 context

encoding, action changing value every literal, unit propagation yields less relevance information
Relevant-1.
Graphplan

actual values appears Section 5. particular, examples looked at,
Graphplan encoding could prune action. follows (quite typical)
fact domains, facts hold final state achieved
number actions. Hence, unit propagation deduce disjunctions possible
7. course, particular domain action whose precondition :fuel,
observation still valid. example, may maintenance action performed
rocket without fuel.

16

fiReachability, Relevance, Resolution

actions, none unit clause. Since way deducing negated actions,
propagation stops point.
general case similar. linear encoding, obtained disjunction
allowable actions, generate disjunction allowable preconditions. information
propagated backwards much like forward case. Yet, k = 1 case,
expect form backwards reachability analysis goal state, rather true
relevance analysis. Again, Relevant-k likely much better job here,
takes explicit relevance issues account. However, case reachability analysis,
ability k-clause resolution yield constraints order greater k,
cannot show Relevant-k always better.
context Graphplan encoding, generate disjunctions relevant
actions, disjunctions relevant preconditions deduced, etc. However,
irrelevant actions excluded explicitly (since one action allowed
step) conclude relevant action must appear.
exclude actions destroy goal proposition. Again, deduce constraints
order greater k via k-clause resolution, cannot provide general result here.
Finally, note (1) Graphplan planner incorporate relevance analysis, Mea-Graphplan, recent variant, (Kambhampati et al., 1997),
well IPP (Nebel et al., 1997). (2) Ernst, Millstein, Weld (1997) discuss enhanced
version Graphplan encoding contains effects axioms well (i.e., axioms
form action ! effect). terms ability propagate reachability relevance
information, see added ability rule actions destroy needed propositions
(as linear encoding.)
5. Empirical Evaluation

previous sections attempted understand mechanisms resolution
yields reachability relevance information compare natural class
direct reachability relevance algorithms. noted, relationship always
subsumption, interest examine actual pruning abilities
algorithms. section describe performance algorithms number
standard planning problems. limited number domains used, caution
exercised interpreting results. However, interesting results emerge.
first set experiments examined performance unary methods large blocks
world logistics domain problems. used blocks' world problems bw-dir.a/b/c/d
Satplan distribution8 involving 9/11/15/19 blocks, respectively, (minimal)
plans length 6/9/14/18. logistics' domain problems based instances described
(Brafman & Hoos, 1999) involving 8 packages 3 cities, minimal plans size
6/10/16, respectively. SAT-encodings generated using Medic program (Ernst
et al., 1997). used crse options obtain linear encoding erpe options
obtain Graphplan-like encodings. However, encoding obtained via erpe options contain explicit effect axioms, linear encoding. axiom improve
Graphplan-encoding's ability propagate relevance information.
8. instances part UCPOP distribution, maintained University Washington,
http://www.research.att.com/ kautz/blackbox/index.html, BlackBox home page.

17

fiBrafman

log.a
log.b
log.c
bw.a
bw.b
bw.c
bw.d

j j


4565
5941
8021
3888
10890
44100
116964

Reach Rel R+R U-rch(l) U-rel(l)
2922 617 3476
401
38
3517 680 3905
442
20
5051 2782 6214
600
32
1697 408 2105
639
300
3565 830 4395
1201
440
12818 2394 15212
3141
840
26963 5238 32201
6482
5114

Table 1: Pruning Effects Unary Methods. jAj number possible actions
course minimal length plan. following entries hold number
actions pruned using: Reachable-1, Relevant-1, combined, unit propagation
linear encoding using initial state, using final state. Unit propagation
Graphplan encoding using final state yielded pruning. Execution
times Reach/Relevant algorithms 0:01 seconds except bw.c (0.03
sec.), bw.d (0.07 sec.).
set experiments measured number potential actions eliminated
following algorithms: Reachable-1, Relevant-1, Reachable-1 Relevant-1 combined,
reachability analysis via unit-resolution using initial state, relevance analysis via
unit-resolution using goal state. consider Graphplan encoding
following reasons:
(1) Unit-propagation Graphplan encoding yields much information Reachable1. (2) particular experiments (and cases), unit-resolution based
final state Graphplan encoding prunes little, any, actions
fact appearing goal state number potential producing actions. (3)
version Graphplan-encoding produced Medic basically equivalent
linear-encoding terms relevance information contains explicit effect axioms.
actual numbers appear Table 1. first column provides size set
actions minimal plan length. following columns provide number actions
pruned various methods tested. evident Reachable-1 extremely effective.
Relevance analysis seems much less useful, although Relevant-1 prune non-negligible
number actions. results unit-resolution quite disappointing, although line
theoretical analysis. Recalling unit-resolution Graphplan encoding
equivalent Reachable-1, see much greater potential pruning
Graphplan encoding. Another interesting observation little overlap
reachability relevance analysis. stems fact pruning
effect algorithms often quite shallow: pruning done
first steps (in reachability) last steps (in relevance). Finally, note
k = 1 algorithms quite fast: Unit propagation important heuristic SAT
solution algorithms based David-Putnam algorithm (Davis & Putman, 1960),
extremely fast, negligible running times (i.e., < 0:01 seconds). surprisingly,
18

fiReachability, Relevance, Resolution

bw-sm.a
bw-sm.b
bw-sm.c
log-sm.a
log-sm.b
log-sm.c
hanoi-3
hanoi-4
hanoi-5

j j


18
48
100
18
42
66
38
68
110

Rch1 Rch2 Rel1/2 rch1(l) rch2(l) rch1(gp) rch2(gp) rel1/2(l/g)
21
22
8
15
22
21
22
4
68
70
44
44
74
68
70
6
199
204
184
96
210
199
204
12
39
57
8
14
49
39
44
1
111
165
18
36
141
111
126
3
196
292
26
58
244
196
220
5
94
97
21
36
117
94
118
9
224
230
34
66
281
224
280
14
450
460
50
108
558
450
551
20

Table 2: Effects Unary Binary Methods. jAj number possible actions per step . following columns hold number actions pruned
course minimal-length (or longer) plan using Reachable-1, Reachable-2,
Relevant-1 2 (which yield value), unit propagation linear
encoding using initial state, binary propagation linear encoding using initial state, unit propagation Graphplan encoding using initial state,
binary propagation Graphplan encoding using initial state. final
column correspond propagation using goal state. methods (i.e., unit
binary) encodings yielded values.
Reachable-1 Relevant-1 also extremely fast. Execution times algorithms
less 0:01 seconds, except bw.c (0.03 sec.), bw.d (0.07 sec.),
amount small fraction running times required modern SAT algorithms.9
next set experiments, shown Table 2, introduces binary pruning methods
well. Here, limited slow performance prolog implementation
Reachable-2 Medic encoder (Ernst et al., 1997). looked blocks world problems involving 3,4, 5 blocks, respectively, looked logistics domain problems
involving one package two cities, three packages two cities, three packages
three cities. addition, looked three hanoi-tower problems 3,4, 5 disks.
number points worth mentioning:



two domains (blocks' world hanoi), Reachable-2 slightly useful
Reachable-1. logistics domain, hand, Reachable-2 much
effective. However, must remember Reachable-2 yields mutual exclusion
constraints measure. constraints quite useful
important role Graphplan planner.



clear winner emerges. blocks-world domain, binary resolution linear
encoding prunes Reachable-2, whereas logistics domain, Reachable2 prunes more. Interestingly, binary resolution Graphplan-encoding less

9. experiments conducted PC PentiumII-200 processor.

19

fiBrafman

Time
Reach-1
Reach-2
U-Res(lin)
B-Res(lin)
U/B-Res(gp)

1 2 3 4 5 6 7 8 9 10
1 2 3 4 5 6 7 8 9 10
1 2 2 3 3 3 4 4 4 4
1 16 16 16 16 16 16 16 16 16
1 2 2 3 3 4 4 5 5 6
1 2 3 4 5 6 7 8 9 10

11
11
5
16
6
11

12
12
5
16
7
12

13
13
5
16
7
13

14
14
5
16
8
14

15
15
5
16
8
15

16
16
6
16
9
16

Table 3: Reachability Analysis 16-bit Counter. Shown number unpruned actions per time step. Rows correspond Reachable-1, Reachable-2, unit
resolution linear encoding, binary resolution linear encoding.
last row corresponds unit binary resolution Graphplan encoding,
identical effect.
effective linear encoding. However, Graphplan-encoding allows
shorter plans, consequently, smaller search spaces. Therefore, Graphplanencoding still likely ecient.



Relevant-2 advantage relevant-1. fact, behavior observed
using resolution well: unit binary resolution linear Graphplan
encodings pruned amount actions. Consequently, present one
column. Indeed, see sets experiments reported Tables 1 2,
relevance analysis contributes little. One obvious reason goal state
often incomplete much less constrained initial state (at least explicitly).
Therefore, algorithms diculty deriving relevance constraints. However,
one's intuition seems indicate case, least
extent observed. means providing better relevance analysis,
although may require sophisticated derivation state constraints.



predicted, relevance analysis much useful state-space level
truth-assignment level.



expected, Graphplan encoding typically better linear encoding.

Finally, ran tests 16 bit version counter domains described
text. constrained domain single action applicable
state wanted see much would discovered algorithms. results shown Tables 3 4, number permisable actions
given function time step. Table 3 presents results forward pruning
using Reachable-1, Reachable-2, unit binary propagation using Graphplan
linear encodings. Table 4 presents results backward pruning using Relevant-1,
Relevant-2, unit binary propagation using linear encodings.

20

fiReachability, Relevance, Resolution

Time
Rel1/2,U/B-Res(gp)
U-Res(l)
B-Res(l)

1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
1 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16
1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9

Table 4: Relevance Analysis 16-bit Counter. Shown number unpruned
actions per time step. (identical) results Reachable-1, Reachable-2, unitresolution Graphplan encoding, binary-resolution Graphplan
encoding appear first row. next rows correspond unit binary
resolution linear encoding, respectively.

6. Conclusion

shown connection scheme used encode planning instances
ability propagate reachability relevance information initial final steps
time points. hope results serve improve understanding
factors contributing performance different encoding methods. addition,
provided crisp general formulation class reachability relevance algorithms
appear various forms different planning algorithms. compared pruning
ability resolution-based propagation methods operate encoded plans,
Reachable-k Relevant-k algorithms operate plan level. empirical
results show complex picture, clear winner emerges. However, seems
domain constrained (making parallel actions less useful) binary methods
little advantage unary methods. addition, show relevance analysis best
conducted plan level. SAT-based planning algorithms, would suggest use
simple plan-level relevance analysis stage prior plan encoding. observation
confirmed recent results reported Do, Srivastava, Kambhampati (2000).
(Brafman, 1999), pointed binary clauses form large fraction
clauses SAT-encoded planning problems. Given results regarding utility binary
resolution, natural idea augment standard clause simplification techniques (e.g., unit
propagation) limited form binary clause preprocessing. Initial results presented
indicated utility idea: instances unit clauses could derived
form binary resolution, nice reductions running time demonstrated.
unit clauses derivable via method, small overhead incurred.
principled, systematic, ecient technique based ideas investigated
(Brafman, 2000).
work among first attempts theoretically analyze different encoding schemes.
concentrated one particular aspect encodings, i.e., ability propagate concrete state information backwards forwards. Naturally, attempt a-priori
limited scope, ability one factor uencing performance various
algorithms, uence probably significant systematic methods based
David-Putnam procedure methods based stochastic local search.
21

fiBrafman

authors considered ideas presented here, too. Kautz Selman
(1999) discuss relation Graphplan's mutex constraint restricted form
binary propagation. particular show mutex computation limited form
negative binary propagation. mutex propagation, two assertions mutual exclusion
yield new one. course, mutual exclusion statement equivalent binary
clause (e.g., either action performed action b performed), hence
view process limited form binary propagation: f:p _ :qg fp _ :rg
deduce f:q _ :rg. Graphplan performs operation, incomplete manner.
addition, tested additional limited inference methods failed literal strategy
(attempting prove particular literal inconsistent using unit propagation)
binary failed literal strategy (attempting prove binary clause inconsistent using
unit propagation). methods directly correspond methods considered
paper. closely related one options Medic system encoding
planning problems: simple inference method referred simple data- ow
analysis (Ernst et al., 1997). method basically instance Reachable-1.
Haslum Geffner (2000) present parametrized class admissible heuristics functions H . interesting important relation heuristic function
generation technique discussed paper parameterized class reachability
analysis algorithms discussed paper. heuristic function assigns 1
state means believes goal reachable s. heuristic function
admissible, fact, true. Thus, admissible heuristic functions provide sound
tool pruning { goal reachable state assign value
1. fact, derivation heuristic functions class H closely related
computation Reachable-k. cases, instead analyzing actual states, analyze
subsets states size k interactions. However, designing heuristic functions,
greater emphasis put distance current state state
set literals appears without mutual exclusion constraints (i.e., indices sets
C ).
Finally, recent paper Do, Srivastava, Khambhampati (2000) examines encoded
planning problems generated Blackbox planner. Blackbox utilizes mutual exclusion constraints derived Graphplan's planning graph. authors show
constraints useful, despite fact increase size encoding.
addition, authors examine utility adding explicit mutual-exclusion constraints
stemming (state-space based) relevance analysis. constraints appear improve
planner's performance. fact, seems constraints described Do, Srivastava, Kambhampati (2000) powerful generated Relevant-2.
believe Relevant-k strengthened, hope examine issue
closely future.
k

k





Acknowledgments

wish thank Craig Boutilier Chris Geib valuable discussions reachability analysis anonymous reviewers useful detailed comments. particularly
grateful Olga Rozenfeld implemented algorithms Prolog, suggested use
22

fiReachability, Relevance, Resolution

counter example illustrating algorithms, provided important corrections
previous drafts. work supported part Paul Ivanier Center Robotics
Research Production Management.
Appendix A. Proofs

Theorem 1 set propositions actions excluded Reachable-k time j

feasible plan which, time j , propositions hold, or, respectively,
actions appear.

Proof: immediate: Consider valid plan states world
execution plan. straightforward show appear within sets
without constrained virtue valid plan.

Ai



Lemma 1 context linear encoding, Reachable -1 yields reachability information unit propagation.

Proof: Given definitions used earlier on, formal statement lemma
follows: Let k integer denoting length plan. Let
1 set

actions pruned Reachable -1 k-th level given planning domain initial
state. Let
set actions pruned unit-resolution linear
encoding planning domain using k steps (i.e., actions deduce unit
clause containing negation corresponding variable), without goal state
supplied.
, planning instances
.
1A
1A
First let us consider unit resolution. unit clauses available initially correspond propositions hold initial state. axioms propositions denoting state time 0 appear class 1 (precondition axioms) 3
(frame axioms). However, clauses class 3 ternary contain one
proposition. ternary frame clauses yield unit clause able rule
actions one, cannot, stage. Therefore, unit clauses
derived resolving current unit clauses class 1 clauses. resolutions
yield new unit clauses containing negated actions. negated actions resolved
clauses containing positive action variables. variables appear class 4
(at-least-one-action) axioms.
two cases consider. First, suppose able rule
actions one. Using frame effect axioms, derive state time 1.
situation analogous time 0 knowledge
initial state. Since Reachable -1 puts us position, claim follows (using
simple inductive argument). Next, suppose cannot rule actions one.
case, new unit clauses, unit propagation stops. Reachable -1
able rule actions ruled unit propagation process. Moreover,
actions ruled common effect, effect deduced using
Reachable- -1, rule actions require negation precondition.
type information obtained via unit propagation.
reach

u

res

reach

u

res

reach

23

u

res

fiBrafman

Lemma 3 context

Graphplan encoding, unit propagation Reachable-1
rule sets actions, ignore explicit constraints appearing axiom
class 4. use constraints, unit propagation yield reachability information.

Proof: First, suppose ignore mutex axioms class 4. Using unit propagation,

deduce negation actions whose preconditions violated time 0. Negated
action literals resolved class 2 (effect explanation) axioms.
able rule explanations time 1 proposition, deduce negation
manner. mechanism allow us exclude variable using
Reachable-1. Similarly, negated action literals resolved class 3 (at-least-oneaction) axioms, yields information. time 1 variables deduce
used rule time 1 actions.
Notice following. deduce p time 1, one actions produce p
must hold time 0. information explicit Reachable-1 algorithm (although
appear Graphplan's planning graph form edges). However, cannot
used rule actions restricted unit resolution.
Class 4 axioms make difference case. Suppose able
conclude particular action produces p must occur (i.e., deducing p
ruling causes except a). case, actions mutually exclusive
cannot occur. actions may affect p all, negation need
necessarily derivable using Reachable-1.

Theorem 2 Let

state goal reachable using m-step plan
(where step contain number non-interfering actions). (1) set
literals satisfied subset , subset C , (2) exists
m-step plan reaching goal set actions plan
v steps last subset C .




v

v

Proof: Recall assume proposition appearing effects action

appears preconditions well. always enforce requirement converting
action satisfy set actions satisfy it.
proof proceeds induction number steps goal reachable.
Let state goal G reachable single step. Let set
actions one-step plan reaching G . definition, contain
interfering actions. addition, know G reachable performing
preconditions G n Effects-Of (A) must hold .
First, suppose contrary literal l 2 , l 62 S1 . Notice
definition A0 , S1 contains literals consistent
G. Therefore, l must inconsistent G, i.e., :l 2 G. Since l 2 , must
action 2 precondition l effect :l (otherwise, l would hold
performing A). action would A0 preconditions, l among them, would
S1 . conclude S1 .
Next, want show one-step plan reaching G whose
actions A0 . discussion see plan reaching G
r

24

fiReachability, Relevance, Resolution

contains action A0 changing value every proposition l holds
inconsistent G. Clearly, none actions effect
inconsistent G. Let A0 denote set actions. applying A0
transform literals inconsistent G value G destroy
value literal consistent G. Since A0 A, constitutes valid plan (i.e.,
actions interfere other) achieves G. definition, A0 A0 .
conclude proof base step, must show subset C S1 .
Suppose, contrary subset 0 C S1 . seen
0 , set actions A0 A0 A0 l 2 0 either
precondition action A0 l consistent G destroyed A0 .
Denote A00 set consisting A0 noop[] corresponding l 2 0
preconditions element A0 . definition A0 , A00 2 A0 .
However, 0 2 C S1 A00 2 C A0 implies A00 contains interfering actions.
claim impossible. First, effects A00 either G consistent
G, construction. addition, preconditions A00 0 therefore
. actual state world, cannot contain con icting literals. Hence,
0
62 C S1 .
Next, suppose established inductive hypothesis < let
us prove holds = m. Hence, let state exists mstep plan = A1 ; : : : ; attaining G. Let +1 denote state obtained applying
A1 . know
1 step plan achieving G +1 .
+1
inductive hypothesis, satisfies conditions Theorem. particular, know
+1 1 subset +1 C 1 . complete proof would
sucient show +1 reachable one-step plan A0 whose actions
C . proof similar base case.
r













Corollary 1 initial state goal reachable minimal (in
number operators) plan P = A0 ; : : : A00 (where steps numbered backwards)
reaching goal s, A0 C contain subset A0 .










Proof: inspection proof previous theorem shows every step

found subset set actions candidate plan satisfied
relevant conditions. particular, consider minimal plan, elements must satisfy
conditions.

Lemma 4 context linear encoding, unless single safe, final action,
unit propagation yields less relevance information Relevant-1.

Initially, unit clauses goal literals. resolve effect
axioms only. would yield negation various actions (i.e., unsafe actions).
negated action literals resolved action disjunction (axiom class 4).
However, one safe final action, obtain unit clause
disjunction, nothing farther do. information,
more, easily obtainable Relevant-1.
25

fiBrafman

Lemma 5 context

Graphplan encoding, action changing value every literal, unit propagation yields less relevance information
Relevant-1.

Proof: See text prior Lemma.
Appendix B. Complexity Reachable-k Relevant-k

computational complexity Reachable-k O(njAjjLj E + njLjjAj ), n
number levels generate, jAj number possible actions, jLj size
propositional language used, E maximal number actions particular
shared effect. explain below, complexity dominated time required
produce sets C C .
set possible effects, , produced O(jAj ) steps, maximal
number effects.
C requires examining l -tuples elements , l k ,
(jLj ) elements. tuple find set actions produce
it. done quickly, provided maintained pointers actions. number
sets actions O(E ) (since k actions needed).
set actions must check whether subset member C 1 . Given
appropriate representation C 1 , done time O(jAj). accomplish this,
use binary tree whose leafs correspond bit vectors. depth tree
jAj size O(jC 1j). Finally, need maintain C similar tree bitvectors. done O(jLj ) (or, C small, lower cost). overall cost
producing C O(jLj jE j jAj).
produce set , go actions check whether preconditions
appear . requires O(jAj ) steps (assuming bit-vector representation ),
maximal number preconditions action. also check
whether preconditions appear C . Since jA j jAj check whether
subset set preconditions appears C time O(jLj), requires O(jAjjLj)
steps.
Finally, need produce C . requires generating subsets size
k less, taking (jAj ) steps. subset must check whether preconditions contain element C . Again, provided appropriate data-structure C
maintained, done O(jLj) set preconditions. case
C , assumed C maintained tree bit-vectors, generated time
(jAj ). overall complexity step (jLjjAj ).
Note small values k data-structures likely provide better performance.
Next, address Relevant-k. analysis assumption
set variables appear preconditions effects operator. noted,
transforming set operators satisfy property set operators
satisfy may cause exponential blow-up worst case.
complexity Relevant-k O(jAj jLj + jLj jAj), jAj number
actions, jLj number proposition language, maximal number
k



k

k





e



e



k

K









k

k





k





p



p











k







k

k

k

k

k

k
p

p

26

fiReachability, Relevance, Resolution

preconditions action. analysis quite similar case Reachable-k,
ignore sets R subsets larger whose generation
contributes constant factors:
set preconditions, , produced O(jAj ) steps.
compute C , iterate O(jLj ) sets literals. set examine
sets actions preconditions, O(m ) sets.
set actions, need check C 1 . check
performed O(jAj) steps. overall complexity step O(jLj jAj).
produce set , go actions useful , require O(jLjE ) (where
before, E maximal number actions particular effect). action,
check whether effects C . Since need perform check
every action, overall complexity O(jLjE + jLjjAj).
Finally, need produce sets C . Interfering actions pre-computed
cost amortized steps. case, computation requires
2
(mjAj ) steps, maximal sum preconditions effects action.
Next, examine effects l-tuples actions, l k, see whether
effects subset C . takes O(jAj jLj) steps.
Again, small values k (and particular, k = 1; 2) tighter analysis possible.
r










p

k



k
p



k



k
p







k



References

Bayardo, R. J., & Schrag, R. C. (1997). Using CSP look-back techniques solve real-world
SAT instances. Proc. AAAI-97, pp. 203{208.
Blum, A., & Furst, M. L. (1997). Fast planning planning graph analysis. Artificial
Intelligence, 90, 281{300.
Bonet, B., Loerincs, G., & Geffner, H. (1997). robust fast action selection mechanism
planning. Proc. AAAI-97, pp. 714{719.
Boutilier, C., Brafman, R. I., & Geib, C. (1998). Structured reachability analysis markov
decision processes. Proc. 14th Conference Uncertainty AI, pp. 24{32.
Boutilier, C., & Dearden, R. (1994). Using abstractions decision theoretic planning
time constraints. Proc. AAAI'94, pp. 1016{1022.
Brafman, R. I. (1999). Reachability, relevance, resolution, planning satisfiability
approach. IJCAI'99, pp. 976{981.
Brafman, R. I., & Hoos, H. H. (1999). encode encode - i: linear planning.
IJCAI'99, pp. 988{993.
Brafman, R. I. (2000). simplifier propositional formulas many binary clauses.
Tech. rep. 00-04, Dept. Computer Science, Ben-Gurion University.
Crawford, J., & Auton, L. D. (1993). Experimental results cross-over point
satisfiability problems. Proc. AAAI'93, pp. 21{27.
27

fiBrafman

Davis, M., & Putman, H. (1960). computing procedure quantification theory. Journal
ACM, 7, 201{215.
Do, M. B., Srivastava, B., & Kambhampati, S. (2000). Investigating effect relevance
reachability constraints sat encodings planning. Proc. Fifth Intl.
Conf. AI Planning Scheduling Systems.
Ernst, M. D., Millstein, T. D., & Weld, D. S. (1997). Automatic SAT-compilation
planning problems. Proceedings International Joint Conference Artificial
Intelligence.
Fikes, R., & Nilsson, N. (1971). Strips: new approach application theorem
proving problem solving. Artificial Intelligence, 2 (3{4), 189{208.
Freeman, J. W. (1995). Improvements Propositional Satisfiability Search Algorithms.
Ph.D. thesis, U. Pennsylvania Dept. Computer Information Science.
Genesereth, M. R., & Nilsson, N. J. (1987). Logical Foundations Artificial Intelligence.
Kaufmann, Los Altos, CA.
Gomes, C. P., Selman, B., & Kautz, H. (1998). Boosting combinatorial search
randomization. Proc. 15th Nat. Conf. AI, pp. 431{437.
Haslum, P., & Geffner, H. (2000). Admissible heuristics optimal planning. Proc.
Fifth Intl. Conf. AI Planning Scheduling Systems, pp. 140{149.
Kambhampati, S., Parker, E., & Lambrecht, E. (1997). Understanding exending graphplan. Proc. 4th European Conf. Planning, pp. 260{272.
Kautz, H., & Selman, B. (1992). Planning satisfiability. Proc. 10th European
Conf. AI, pp. 359{363.
Kautz, H., & Selman, B. (1996). Pushing envelope: Planning, propositional logic,
stochastic search. Proc. 13th National Conference AI (AAAI'96), pp.
1194{1201.
Kautz, H., & Selman, B. (1999). Unifying sat-based graph-based planning. Proc.
16th Intl. Joint Conf. AI (IJCAI'99), pp. 318{325.
Li, C. M., & Anbulagan (1997). Heuristics based unit propagation satisfiability
problems. Proc. IJCAI-97.
McDermoot, D. (1996). heuristic estimator means-ends analysis planning. Proc.
3rd Int. Conf AI Planning Systems, pp. 142{149.
Nebel, B., Dimopoulos, Y., & Koehler, J. (1997). Ignoring irrelevant facts operators
plan generation. Proc. 4th European Conf. Planning.

28

fiJournal Artificial Intelligence Research 1 (2001) 231-252

Submitted 3/00; published 5/01

Technical Paper Recommendation: Study Combining
Multiple Information Sources
Chumki Basu

cbasu@cs.rutgers.edu

Haym Hirsh

hirsh@cs.rutgers.edu

Department Computer Science, Rutgers University, 110 Frelinghuysen Road,
Piscataway NJ 08854-8019
Telcordia Technologies, Inc., 445 South Street,
Morristown NJ 07960-6438
Department Computer Science, Rutgers University, 110 Frelinghuysen Road,
Piscataway NJ 08854-8019

William W. Cohen

wcohen@whizbang.com

Craig Nevill-Manning

nevill@cs.rutgers.edu

WhizBang! Labs, WhizBang Labs - East, 4616 Henry Street,
Pittsburgh PA 15213

Department Computer Science, Rutgers University, 110 Frelinghuysen Road,
Piscataway NJ 08854-8019

Abstract

growing need manage exploit proliferation online data sources opening new opportunities bringing people closer resources need. instance,
consider recommendation service researchers receive daily pointers
journal papers fields interest. survey known approaches
problem technical paper recommendation ask extended deal
multiple information sources. specifically, focus variant problem
{ recommending conference paper submissions reviewing committee members {
offers us testbed try different approaches. Using WHIRL { information integration system { able implement different recommendation algorithms derived
information retrieval principles. also use novel autonomous procedure gathering
reviewer interest information Web. evaluate approach compare
methods using preference data provided members AAAI-98 conference
reviewing committee along data actual submissions.

1. Introduction
define paper recommendation problem follows:
Given representation interests, find relevant papers.

fact, replace papers definition name artifact
choice, yet another instantiation recommendation problem.
makes paper recommendation interesting?
231

fiBasu, Hirsh, Cohen, & Nevill-Manning

ability automatically filter large set papers find
aligned one's research interests advantages. growing number
publications, many online, dicult keep latest research, even
it's within one's field. timeliness information becoming critical,
also desirable paper reach target audience minimal latency. Although
straightforward approach finding relevant papers may look close matches
person's interests paper's content, less clear represent
interests researchers contents papers.
Another feature sets paper recommendation apart variant problem
must dealt regular basis numerous conference chairs. Conferences
offer venue large number fairly specific papers must distributed smaller
number reviewers, within tight timeframe. Even scope problem
constrained degree topic, conference organizers and/or reviewers still must
expend great deal time effort begin reviewing process.
would suggest real value finding ways automating filtering process
would make less burdensome potential consumers.
consider algorithms recommending focused sets technical papers. use
conference reviewing platform explore series questions relating recommendation process. new interest AI community problem
recently since proposed \challenge" task IJCAI-97 (Geller, 1997). focus
conference reviewing turns natural choice since obtain data
set papers, i.e., conference submissions, also obtain information
preferences set reviewers submissions. following section, discuss related work addresses conference reviewing problem. also consider
work area recommender systems { e.g., recommending articles newsgroup
readers recommending Web pages Web site visitors { contribute task.
However, focus varying sources information data representations,
thereby allowing us formulate different recommendation algorithms based recombine sources computing similarity. show indeed difference
performance vary amount source data, compared baseline
using single source information data representations. also compare
recommendation algorithms other, collaborative filtering,
random assignment papers reviewers. apply methods experimental data
involving reviewer preferences conference abstracts AAAI-98 conference. 1

2. Know Paper Recommendation
already know recommending papers reviewers, generally,
arbitrary researcher, trying selective choosing papers ultimately reach consumer based relevance interests expertise. However, finding
papers conference reviewers necessarily complex task, since papers may
assigned reviewers based criteria. instance, reviewer load balancing
con ict-resolution reviewer-author aliations may two criteria. addition,
1. data obtained permission AAAI, AAAI reviewers, appropriate,
authors submitted papers.

232

fiTechnical Paper Recommendation: Study Combining Multiple Information Sources

reviewer's reviewing preferences may uenced considerations paper's
readability novelty. example, preference novelty may lead reviewer choose
paper simply relevant interests.
methods suited address latter issues number reasons. First,
confidentiality purposes, lack information related author identity aliation
submitted conference papers. Secondly, since constraint-satisfaction main
concern { primarily interested finding best papers person without
regard whether multiple people receive paper { incorporate
criteria selection procedure. also way represent \novelty"
paper respect consumer, thereby means recognizing
it. Finally, methods distinguish notion interest expertise
respect reviewers. general recommendation problem, researcher
may want retrieve papers areas outside expertise, case separate
representation would needed.
Previous work area assigning conference papers reviewers approached
problem one content-based information retrieval. Dumais Nielsen (1992) used
data provided 15 members reviewing committee HYPERTEXT '91 conference. reviewers submitted abstracts papers and/or interests, also
provided complete relevance assessments 117 papers submitted conference.
Using information retrieval method known latent semantic indexing (LSI), compared reviewer abstracts submissions, ranking submissions
least similar reviewer. results, noticed, based performance
metric evaluates number relevant articles returned Top 10,
could achieve average 48% improvement using automated methods compared
random assignment articles reviewers.
results encouraging, believe widespread availability online
resources introduces opportunities exploring new issues. reviewers
weren't asked supply interest information? process gleaning reviewer interest
data automated simple methods? well retrieving relevant papers
using \approximation" reviewer interests? automatic collection reviewer
interest information Web, effectively removes reviewer loop,
novel aspect research.
Yarowsky Florian (1999) attempted similar task ACL'99 conference. However, primary focus classification { assignment every paper exactly
one six conference committees. used 92 papers submitted ACL
conference electronic form also requested committee members provide representative papers. number papers returned members insucient,
augmented collection papers downloaded online sources. used
content-based retrieval (within context vector-space model (Salton, 1989)) one
routing strategies. main algorithm first computed centroid reviewer
based representative papers computed centroid committee
sum reviewer centroids. Then, paper classified (assigned committee)
computing cosine similarity committee centroids choosing one
highest rank. Amongst approaches, experimented Naive Bayes classifier
assessment similarity reviewing committee members authors cited
233

fiBasu, Hirsh, Cohen, & Nevill-Manning

papers. Based system performance relative human judges
task (evaluated actual assignments provided program chair conference), extrapolated automated methods could effective human judges,
especially cases judges may less experienced.
dealing large conferences several hundred papers covering variety areas, information load even greater conference organizers reviewers
alike. cases, getting evaluative relevance judgments submitted (or even accepted) papers reviewers feasible. (As example, AAAI conference,
reviewers even state preferences papers potentially
review. Instead, stop scanning list soon filled quota
\bids"{ papers expressed interest reviewing.) Therefore, focus building
extensible framework recommendation { defining process whereby systematically incorporate information formulating recommendation algorithms,
purpose generating better recommendations.
Content-based information retrieval, also known content-based filtering, popular
recommendation method: consider systems recommend Web pages Syskill &
Webert (Pazzani & Billsus, 1997). number systems WebWatcher
Fab content-based filtering, mainly part hybrid approach also
involves collaborative filtering. Whereas content-based filtering looks contents
artifact (e.g., words Web page), collaborative filtering also consider
opinions like-minded people respect artifacts. Collaborative filtering
used recommend NetNews articles (Konstan, Miller, Maltz, Herlocker, Gordon,
& Riedl, 1997), movies (Hill, Stead, Rosenstein, & Furnas, 1995; Basu, Hirsh, & Cohen,
1998), music (Cohen & Fan, 2000; Shardanand & Maes, 1995), even jokes (Gupta,
Digiovanni, Narita, & Goldberg, 1999). Since content-based collaborative methods
use data orthogonal one another, opportunities come hybrid
approaches use combinations data. work movie recommendation
provides another example design hybrid system. Hybrid systems exploit data
multiple sources expectation better compensating
limiting factor data sparseness associated single source.
current study, would like identify different sources information describe
papers reviewers, expectation individual pieces themselves, along
knowledge combine them, make difference recommendations.
Although share common goal combining data multiple sources
hybrid recommendation approaches, algorithms develop strictly contentbased. evaluative purposes, also compare algorithms results
applying collaborative filtering methods set reviewer preferences.

3. Representing Papers Reviewers
approach recommendation represent entity using variety information
sources, enumerate different combinations sources, evaluate effectiveness combinations using ranked-retrieval methods. paper recommendation
problem, two types entities | papers consumers (reviewers,
case). entity, represent salient features entity sequence
234

fiTechnical Paper Recommendation: Study Combining Multiple Information Sources

one information sources. addition, also need another type information
source relates reviewer paper, namely, reviewers' actual preferences
papers. begin discussion choice information sources |
choices based data typically used assign papers reviewers,
usually provided explicitly papers' authors, choices rely implicit
knowledge mined semi-structured data available Web.

3.1 Paper Information Sources

experiments based compilation submitted abstracts obtained
AAAI AAAI-98 conference. 466 papers submitted conference.
AAAI gave us collection 256 papers use experiments | abstracts 144
accepted papers abstracts 112 papers rejected whose authors
granted AAAI permission provide abstract work. Also excluded
papers authored authors paper.
submission obtained title, abstract, set user-assigned keywords
prespecified list. Therefore, paper associated set three information sources provided papers' authors. Although one may consider
body paper another source, information available reviewers
(nor us), use source.

3.2 Reviewer Information Sources

far, seen example entity paper represented
multiple information sources mainly composed distinct units title,
abstract, etc. However, another case may want multiply-represent
entity. Consider trying automatically compose representation reviewer's interests.
may try first go reviewer's home page. there, may decide look
around reviewer's papers. sources offer different point-of-view
reviewer's interests, therefore, considered separate unit. focus
sources { reviewer's entry-level home page papers referenced
home page { substitute asking reviewer provide interest information.
believe home pages online papers credible information sources since
likely fair number conference reviewers stated research interests
either sources. Since one paper information sources paper abstract,
decided represent reviewer \abstract interests". case home
pages, entire text reviewers's entry-level home page taken abstract
reviewer's interests. case PostScript files, define abstract first
300 words extracted paper.
extracted information Web using pre-existing utilities. find
reviewers' home pages, fed names aliations members review
committee Ahoy,2 home page finding engine (Shakes, Langheinrich, & Etzioni, 1997).
Ahoy returned least one match, supplied URL starting point
w3mir,3 HTTP service retrieves files contents Web sites. used
2. http://ahoy.cs.washington.edu:6060.
3. http://www.math.uio.no/janl/w3mir.

235

fiBasu, Hirsh, Cohen, & Nevill-Manning

w3mir download HTML files PostScript files accessible entry-level
home page residing site.4 Since person's papers may directly
available one site, additionally retrieved cross-references sites
contained PostScript files, also using w3mir. PostScript files converted
ASCII using PreScript (Nevill-Manning, Reed, & Witten, 1998).
PostScript files retrieved reviewer treated uniformly. Although would
desirable attempt future work, make attempt determine
timeliness paper, especially respect reviewer's current interests. also
distinguish journal papers, conference papers, even lecture notes.
reason attempt detailed analysis contents
files (e.g., automatically extract titles, abstracts, etc.). Instead, rely heuristics
looking first N words approximate paper's abstract. Although detailed
analysis likely valuable paper recommendation process, immediate goal
obtain gross sense usability various sources semi-structured information.

3.3 Reviewer Preferences
evaluate queries need \ground truth" | set data specifying
papers reviewer selected suitable review. information,
evaluate different approaches perform making choices. note
approximation full set abstracts reviewer might liked
| reviewing process requires reviewer find minimum quota papers,
quota reached, reviewer need look papers find more.
view optimistically yielding close approximation reviewer's full set
preferences would be, since reviewers able peruse abstracts keywords often
attempt inspect least subset papers labeled keywords areas
knowledgeable.
experiments ground truth comes actual preferences stated 122 (of
230) AAAI-98 reviewers gave AAAI permission release preference information papers considered work. point data ects
reviewers' initial preferences reviewing. data papers
reviewers actually received following AAAI reviewer assignment process.
course, one potential limitation data based portion data
may representative entire data conference. example,
preference data approximately half reviewers predicting preferences
collection papers whose distribution skewed towards accepted papers.
also issue whether AAAI researchers representative much larger community
researchers large. (We ask similar question user populations
conferences well). However, consider acceptable limitations resulting
use conference reviewing platform paper recommendation.
4. moment, focus PostScript convenience, reason limit
one file format; main constraint able extract words document.

236

fiTechnical Paper Recommendation: Study Combining Multiple Information Sources

4. Recommendation Methodology

section, examine collaborative content-based methods recommendation. methods allow us explore use different subsets data described
previous section.

4.1 Recommending Reviewer Paper Information Sources

following sections, outline content-based recommendation framework uses
data describing papers well data describing reviewers make recommendations. reviewer preference data used evaluation purposes, input
recommendation process.
order locate papers closely match reviewer interest data rely ad hoc
similarity metrics commonly used information retrieval community. describe
methods section WHIRL. brief, reviewer compare
given reviewer representation appropriate paper information source(s).
comparisons implemented query returns rank-ordered list
papers. consequently compute precision Top N , proportion papers
returned actually preferred reviewer, query. final score
query average value, computed subset 50 reviewers (from
larger set reviewers gave us permission).
recommendation algorithms take different paper reviewer information sources
inputs. Since data plotted along two dimensions, let Reviewer set
information sources describing reviewers Paper set information sources describing
papers. construct Reviewer Paper matrix entry matrix
score measuring effectiveness using respective sources, (Reviewer ; Paper ),
compute similarity reviewers papers performing ranked-retrieval.
instance, given paper reviewer representations described, construct
2 3 matrix, gives us 6 possible evaluations scores. refer matrix
recommendation sources matrix.
Conceptually, extend recommendation sources matrix along dimension,
considering combinations rows columns. refer augmented matrix
source combinations matrix. define recommendation algorithm
combination method procedure applied one rows/columns source
combinations matrix. introduces another dimension comparison { combination
method { consider looking replicates source combinations matrix.
Now, pose following questions experimental analysis:


j

recommendation algorithms incorporate information lead better performance?
so, method combining data used algorithm make difference?
4.1.1 WHIRL

queries, use WHIRL, system specifically designed informationintegration tasks (Cohen, 1998b; Cohen & Hirsh, 1998). tasks, often necessary manipulate general way information obtained many heterogeneous online
237

fiBasu, Hirsh, Cohen, & Nevill-Manning

sources, potentially data organization terminology. particular,
WHIRL makes possible integrate information decomposed represented
clean, modular way. example, would like information home pages
PostScript papers represented separately, using information integration tool
resolve sources information.
WHIRL conventional DBMS extended use ad hoc similarity metrics
developed information retrieval community. Using metrics, reason
pieces text culled heterogeneous sources based similarity values rather
strict equality. WHIRL computes similarity using \vector-space" representation
model text (Salton, 1989). text object represented vector term weights
(where terms stemmed using Porter's algorithm (Porter, 1980)) based
TFIDF weighting scheme. Similarity two vectors computed using cosine
similarity metric. answers query presented rank-ordering generated
tuples, tuples similar pairs attribute fields appearing first.
example, using WHIRL, pose following query:
SELECT Reviewer.Name, Paper.ID
Paper Reviewer
Reviewer.Descriptor SIM Paper.Abstract

query return list reviewer names paper IDs papers whose abstracts
similar reviewer's interest descriptor. Rather returning tuples
descriptor abstract fields identical, would performed traditional
database join, query returns Name ID pairs tuples whose fields contain
similar terms, ordered according decreasing value similarity. advantage
ad hoc joins without requiring textual fields identical one another important
text comes multiple sources thereby may use different terminology.
also important perspective comparing relative importance different fields
one another ecient way.
use WHIRL data must stored form WHIRL relations.
data constructed two relations, one representing different information sources.
conference submission, form Paper relation containing id, abstract, keywords,
title. every reviewer, form Reviewer relation contains single tuple
attributes representing reviewer's name representation reviewer's
interests (for example, based reviewer's home page).
far, discussed use WHIRL formulate queries involving single
information source reviewers papers. However, advantage WHIRL
approach lies simplicity extend queries incorporate multiple sources. primary advantage using WHIRL work ease
measure impact conjunctive queries incorporating data multiple sources.
form conjunctive queries adding multiple conditions clause:
SELECT Reviewer.Name, Paper.ID
Paper Reviewer
Reviewer.Descriptor SIM Paper.Abstract
Reviewer.Descriptor SIM Paper.Keywords
238

fiTechnical Paper Recommendation: Study Combining Multiple Information Sources

WHIRL clause contains multiple conditions, similarity scores
individual conjuncts combined taking product though
independent probabilities. Since similarity scores independent probabilities,
use convenient way combine scores, albeit one offers straightforward
approach combination previously studied (Cohen, 1998a).
query, WHIRL would assign score ects similarity submitted
paper's abstract reviewer's descriptor, well similarity submitted
paper's keywords reviewer's descriptor.
4.1.2 Combining Information Sources Query Expansion

mean recommendation algorithm combine data multiple information sources? means enumerating information sources used possible
inputs algorithm, defining way use sources compute similarity.
instance, suppose look 1 reviewer source 2 paper sources given collection
reviewers papers. decide whether paper likely interest reviewer,
compute similarity reviewer source paper sources
combine two similarity scores. Alternatively, compute single similarity score
first combining two paper sources single representation computing
similarity respect reviewer source.
idea combining two sources single representation implemeted
appending terms sources. information retrieval, terms relevant sources
often appended baseline representation query process query
reformulation. usually referred query expansion. Since methods bear
resemblance query expansion, make analogy. expansion methods
described following sections. course, prior knowledge
relevance sources, sense, differ information retrieval
implementation query expansion.
compare relative performance recommendation algorithms,
multiple dimensions along compare results. differentiate results
based methods used combine data compute similarity differentiate results based information sources used comparison.
words, set inputs, one method query expansion perform
better another? want compare merit single source, consider
two groups algorithms { include given source input algorithm,
exclude source. simply count number times algorithms
include source outperform algorithms exclude it, determine relative
merit source.
4.1.3 Concatenation Method

One way \add" information new data source append terms appearing
source original WHIRL query. type query, always single
WHIRL conjunct textual fields appearing conjunct \grow"
addition new terms. call method, queryConcat.
239

fiBasu, Hirsh, Cohen, & Nevill-Manning

Suppose, example, start base query previous section
compares reviewer descriptors paper abstracts. Now, suppose want compare
reviewer descriptors paper abstracts also paper keywords. One
way use queryConcat method. form new field representing
union words appearing paper abstract paper keywords fields
substitute original query. Let Paper.Descriptor = Paper.Abstract [ Paper.Keywords.
new query is:
SELECT Reviewer.Name, Paper.ID
Paper Reviewer
Reviewer.Descriptor SIM Paper.Descriptor

Similarly, replace Paper.Descriptor clause represent different
combinations fields, Paper.Abstract, Paper.Keywords Paper.Title using union
operator.
4.1.4 Conjunction Method

previously stated, important motivation using WHIRL ability execute
conjunctive queries, also use combine information sources recommendation process. type query, instead adding terms particular text field,
add conjuncts original WHERE. refer method reformulating queries
queryConjunct.
enumerate query combinations considered queryConjunct follows.
Using sources queryConcat, begin queries before,
SELECT Reviewer.Name, Paper.ID
Paper Reviewer


now, replacing body clause following:
A: Reviewer.Descriptor SIM Paper.Abstract
K: Reviewer.Descriptor SIM Paper.Keywords
T: Reviewer.Descriptor SIM Paper.Title
AK: Reviewer.Descriptor SIM Paper.Abstract
Reviewer.Descriptor SIM Paper.Keywords
AT: Reviewer.Descriptor SIM Paper.Abstract
Reviewer.Descriptor SIM Paper.Title
KT: Reviewer.Descriptor SIM Paper.Keywords
Reviewer.Descriptor SIM Paper.Title
AKT: Reviewer.Descriptor SIM Paper.Abstract
Reviewer.Descriptor SIM Paper.Keywords
Reviewer.Descriptor SIM Paper.Title

assign labels, (abstract), K (keywords), (title) queries identify
paper sources used. (We use labels comparable fashion queryConcat
method, representing information sources concatenated together.)
240

fiTechnical Paper Recommendation: Study Combining Multiple Information Sources

queries, also vary source data used represent
reviewers. first variant accounts case reviewer's descriptor contains
words reviewer's home page; second accounts case descriptor
contains union first 300 words extracted PostScript file obtained
reviewer's Web pages.
decided try yet another combination see whether using representations
reviewers would improve performance. simplicity, chose test hypothesis
expanded conjunctive query involving single extra conjunct. constructed
Reviewer table contains two attributes: Papers (consisting abstracts
reviewer's PostScript papers) Homepage (consisting reviewer's home page).
ran queries, additional conjunct appearing
clause:
Reviewer.Homepage SIM Paper.Keywords

chose use Keywords Paper.Descriptor based intuitions paper's
keywords reviewer's homepage would greater number words common.

4.2 Recommending Reviewer Preferences

Since evaluations reviewers common set papers, one approach
recommending papers would take information use collaborative
filtering. note actual conference reviewing problem, collaborative filtering
method assigning papers may practical. Although benefit
using preferences set reviewers study, information generally
available reviewers making selections, thereby making
dicult base predictions preferences others. Nevertheless, worthwhile
measure impact using reviewer preferences purpose recommending papers.
recommendation methodology collaborative filtering approaches implemented follows: reviewer presented recommended paper online
manner. paper presented reviewer tells system paper relevant. was, paper assigned rating 1 paper said rated
positively. paper relevant, assigned rating 0 said rated
negatively. Let Rating (R; P ) represent rating assigned paper P
reviewer R. paper relevant, reviewer also provides single relevant
paper positive example order condition future recommendations. Since know
papers liked reviewers, simulate process data
have. experiment two collaborative filtering algorithms: kNN (Hill et al., 1995;
Cohen & Fan, 2000) Extended Direct Bayes (Cohen & Fan, 2000). let P1 ,P2 ,...,P ,1
represent papers previously rated reviewer , 1 trials.
kNN algorithm uses following distance metric locate reviewers, R , closest
current reviewer respect papers already rated:




Dist(R; R0) = jRating (R; P1) , Rating (R0; P1)j + ::: + jRating (R; P ,1) , Rating (R0; P ,1)j




compute score arbitrary paper, P , respect ratings
k closest reviewers, R1,...,R , follows:
k

241

fiBasu, Hirsh, Cohen, & Nevill-Manning

Score(P ) = Rating (R1; P ) + ::: + Rating (R ; P )
k

According methodology, highest scoring paper presented
reviewer next recommendation.
Extended Direct Bayes viewed ad hoc extension direct Bayesian approach recommendation. define R(P ; P ) represent Laplace-corrected estimate
prior probability reviewer give P positive rating. (R(P ; P )
thought measuring \relatedness" two papers.) consider arbitrary
trial let P1 ,P2,...,P ,1 represent papers rated positively
reviewer previous trials consider arbitrary trial t.
use following scoring function rank paper P :


j

j



j



Score(P ) = 1 , ((1 , R(P; P1)) ::: (1 , R(P; P ,1)))


subtrahend expression represents probability P related
P (assuming P 's independent).




4.3 Evaluation Methodology

following sections, evaluate performance recommendation algorithms.
collaborative filtering, compute recommendations reviewer run
positive examples use feedback. reviewer's list recommendations,
measure precision Top N ; gives us proportion items returned
Top N given reviewer actually preferred reviewer. Although
possible use evaluation metrics, compute precision different levels papers
returned since well-suited conference reviewing task. Since reviewer may get
list 10 papers review, would like simulate recommending Top
10 papers returned methods. computing precision, measure percentage
papers list would matched reviewer's preferences. metric also
commonly used literature. instance, Dumais Nielsen (1992) mostly used
measure, i.e., number relevant articles Top 10, reporting results
since constituted reasonable reviewer load. additionally report results precision
Top 30. kNN algorithm, set k = 10 experiments.
recommendation algorithms seen choice query expansion method
crossed choice input data sources. methods queryConjunct
queryConcat, ran 3 7 queries detailed previous section. resulted 21
runs per reviewer, per method. run returned ordered list paper IDs. run,
measure precision Top N (for N = 10 N = 30). discussion,
refer run using abstracts based reviewer's papers p run. Similarly, h runs
based reviewer's home page. Finally, ph runs combine sources information
(using extra conjunct). results report represent precision values averaged
across reviewers. order us compare performance across different information
sources, need evaluation using population reviewers.
reviewers provided preference data home pages and/or papers available online.
Therefore, performed set runs using 50 reviewers randomly chosen set
242

fiTechnical Paper Recommendation: Study Combining Multiple Information Sources

Source(s)
p(Top10)
h(Top10)
ph(Top10)
p(Top30)
h(Top30)
ph(Top30)


0.248
0.210
0.334
0.194
0.169
0.245

K
0.260
0.284
0.304
0.201
0.217
0.219


0.234
0.232
0.332
0.177
0.183
0.233

AK
0.266
0.288
0.312
0.198
0.226
0.224


0.274
0.270
0.342
0.195
0.199
0.241

KT
0.308
0.320
0.286
0.220
0.232
0.211

AKT
0.330
0.332
0.374
0.232
0.232
0.249

Table 1: Average Precision Scores Top 10 Top 30 Papers Returned using queryConjunct.
reviewers home pages papers available online, report results averaged
across 50 reviewers.
mentioned earlier, reviewer choices may uenced variety factors
ranging person's curiosity paper's readability. Many factors dicult
model. Furthermore, human judges may assign papers reviewers according criteria
relevance paper contents reviewer interests, individual opinions
may vary. Therefore, highly unlikely proposed methods achieve 100%
precision. Unfortunately, given nature problem, able get
assessment human judges would done task. Nevertheless,
evaluate recommendation framework built content-based information retrieval
principles compare relative performance reasonable baseline approaches.

5. Results
number questions would like keep mind analyze results.
course experiments vary amount information input
algorithms method query expansion used algorithms. One questions
would like answer algorithm set algorithms suited task
hand? also ask whether choice inputs results measurable differences
performance. tabulation results provides basis analyzing contentbased algorithms presented Table 1 Table 2. baseline method
compare algorithms random assignment. method assigns reviewer random
collection papers. method, expect precision 7.0%. words,
means select papers randomly, average, reviewer would like
fewer 1 14 papers selected.
Table 1 Table 2 replicates source combinations matrix discussed
earlier. Since ran two trials Top N papers returned, table actually
concatenated representation matrices Top 10 Top 30 experiments.
first three rows Table 1 Table 2, report precision figures Top 10
papers returned queryConjunct method queryConcat method, respectively.
243

fiBasu, Hirsh, Cohen, & Nevill-Manning

Precision Top 10 Top 30
0.4
compare.dat
x

0.38
0.36
0.34
queryConjunct method

0.32
0.3
0.28
0.26
0.24
0.22
0.2
0.18
0.16
0.15

0.2

0.25
0.3
queryConcat method

0.35

0.4

Figure 1: Comparison Two Query Methods
Similarly, show results Top 30 papers returned bottom three rows
tables. Since view rows representing reviewer sources used query
columns representing paper sources, measure impact adding data
two ways. reading across row, across groups columns representing N information
sources, gauge results vary paper data included queries.
Similarly, reading column, gauge differences results
reviewer data included queries.
Given information, say performance recommendation
algorithms used different methods query expansion? compare relative
performance two methods queryConjunct queryConcat based values listed
Table 1 Table 2. Note cases performance methods exceeds
random selection, accuracies factor 2 5 times better. Figure 1,
record information data point every query uses two sources
information (since methods differ combine data two sources,
meaningless plot points refer queries using single source). figure,
x-axis represents queries expanded using queryConcat method y-axis represents
queries expanded using queryConjunct method. point falls x = line,
two methods yielded performance query using information
sources. points fall area x = line mark queries
queryConjunct higher precision queryConcat. data reveal almost
cases, queryConjunct higher precision queryConcat, thereby making queryConjunct
dominant two query expansion methods preferred method two
task hand.
expectation increase source data notice increase
precision. Specifically, note queryConjunct, query uses
information paper submission majority cases performs statistically significantly
244

fiTechnical Paper Recommendation: Study Combining Multiple Information Sources

Source(s)
p(Top10)
h(Top10)
ph(Top10)
p(Top30)
h(Top30)
ph(Top30)


0.248
0.210
0.258
0.194
0.169
0.197

K
0.260
0.284
0.272
0.201
0.217
0.212


0.234
0.232
0.242
0.177
0.183
0.180

AK
0.264
0.226
0.262
0.202
0.179
0.203


0.266
0.226
0.260
0.202
0.179
0.203

KT
0.276
0.308
0.300
0.201
0.199
0.209

AKT
0.266
0.222
0.274
0.209
0.184
0.211

Table 2: Average Precision Scores Top 10 Top 30 Papers Returned using queryConcat.
better5 queries use less information case performs statistically significantly worse.
note adding information always lead monotonically better
results. Notice queryConjunct, case Top 30 papers returned, hKT indistinguishable hAKT. also note phT performs better (though statistically
significantly better) phKT. similar cases queryConcat. explain gaps? indeed gaps, i.e., true statistical differences,
may consider explanation adding information may also increasing amount
noise representations. Consider, example, keywords fixed list
often poor match real subject matter paper. special cases, use
keywords source could lead degradation retrieval performance.
Analogous analysis paper sources, examine column
Table 1 Table 2 measure effect adding information reviewer representation. queryConjunct, majority time, find queries incorporating
information (ph entries) perform statistically significantly better single source
queries (p h entries).
far, illustrated move across groups columns blocks
rows source combinations matrix, adding sources queries
improvement. significant gains realize this? Focusing
queryConjunct, every reviewer source, consider queries contained data
single paper source lowest precision. pair queries
corresponding query row matrix made use paper sources
report resulting improvement precision Table 3. Top 10 results,
note best case, gain improvement precision 58% going
single-source multi-source query, Top 30 results, gain improvement
5. comparisons two queries Qi Qj made using two-tailed sign test. Specifically,
consider set Rij reviewers r precision(Qi ; r) 6= precision(Qj ; r) estimate
probability
pij = P rob(precision(Qi ; r ) > precision(Qj ; r ) j r 2 Rij )
consider difference statistically significant one reject confidence > 0.95 null
hypothesis pij generated j Rij j independent ips fair coin.

245

fiBasu, Hirsh, Cohen, & Nevill-Manning

Single-Source Queries Improvement Adding Two Sources
pT(Top 10)
41%
hA(Top 10)
58%
phK(Top 10)
23%
pT(Top 30)
31%
hA(Top 30)
37%
phK(Top 30)
14%

Table 3: Comparision Single-Source vs. Multi-Source Queries.
Methods(s)

Top 10 Top 30
kNN
0.294 0.154
ExtendedDirectBayes 0.300 0.129

Table 4: Average Precision Scores Top 10 Top 30 Papers Returned using Collaborative Filtering Methods.
37%. results support intuitions incorporating information
queries, quality retrieval results improves. Since different paper
source single-source queries row Table 3, also note impact
given paper source dependent reviewer representation use.
still come assessment sources significant conference reviewing task? queryConjunct, present series figures (Figure 2 Figure 6)
illustrate impact source plotting precision values queries exclude
source along x-axis precision values queries include source along
y-axis (for N = 10 N = 30). point falls x = line, queries
exactly performance | choice source irrelevant. points fall
area x = line mark queries higher precision compared
query counterparts contain source.
simply counting number times queries include source outperform
queries include source, one way ranking sources
decreasing order importance. case, queries include abstract source
papers home page source reviewers highest rates success (when
compared information sources papers reviewers, respectively).
Now, natural question ask whether trends noticed queryConjunct
also hold queryConcat. answer no, also means queryConcat
give us definitive answer question whether information really better.
noticed query performance linked reviewer paper
sources, also find linked query expansion method.
246

fiTechnical Paper Recommendation: Study Combining Multiple Information Sources

Precision Top 10 Top 30
0.4
A.dat
x

0.38
0.36
0.34

Queries Abstract

0.32
0.3
0.28
0.26
0.24
0.22
0.2
0.18
0.16
0.15

0.2

0.25
0.3
Queries without Abstract

0.35

0.4

Figure 2: Role Abstract Information Source

Precision Top 10 Top 30
0.4
K.dat
x

0.38
0.36

Queries Keywords

0.34
0.32
0.3
0.28
0.26
0.24
0.22
0.2
0.18
0.16
0.15

0.2

0.25
0.3
Queries without Keywords

0.35

0.4

Figure 3: Role Keywords Information Source

247

fiBasu, Hirsh, Cohen, & Nevill-Manning

Precision Top 10 Top 30
0.4
T.dat
x

0.38
0.36
0.34

Queries Titles

0.32
0.3
0.28
0.26
0.24
0.22
0.2
0.18
0.16
0.15

0.2

0.25
0.3
Queries without Titles

0.35

0.4

Figure 4: Role Title Information Source

Precision Top 10 Top 30
0.4
P.dat
x

0.38
0.36

Queries Reviewer Papers

0.34
0.32
0.3
0.28
0.26
0.24
0.22
0.2
0.18
0.16
0.15

0.2

0.25
0.3
Queries without Reviewer Papers

0.35

0.4

Figure 5: Role Papers Information Source

248

fiTechnical Paper Recommendation: Study Combining Multiple Information Sources

Precision Top 10 Top 30
0.4
H.dat
x

0.38

Queries Reviewer Homepages

0.36
0.34
0.32
0.3
0.28
0.26
0.24
0.22
0.2
0.18
0.16
0.15

0.2

0.25
0.3
Queries without Reviewer Homepages

0.35

0.4

Figure 6: Role Homepage Information Source
Table 4, show results collaborative filtering runs. report averages
precision values computed Top N (for N =10 N =30) papers returned
based reviewer recommendation lists. Since stop recommending
exhausted set positive examples reviewer, reviewer recommendation lists
varying lengths. cases size list less N , still compute
precision Top N , assuming remaining items incorrect predictions. methods
collaborative filtering exceed random selection significant margin.
Top 10 papers returned, collaborative recommendation methods competitive best performance queryConcat. already interesting observation,
since methods differ, method using different data make recommendations. state use queryConjunct information
sources recommend 10 papers, average almost four papers coincide reviewer's
preferences. Compared random selection, collaborative filtering, queryConcat,
method yields papers interest reviewers.
summary, learned experiments? found within
context peer reviewing papers, make recommendation process less
\people intensive". recommendation systems require users provide samples
preferences used extrapolate future behaviors. Collaborative
methods go even using preference information across multiple users predict
preferences single user. automatically collecting reviewer interest information
Web sources precomputing similarities profiles paper content,
require less input reviewers. Furthermore, content-based retrieval methods
exceed performance collaborative methods task.
also believe recommendation framework provides extensible way
formulating queries provides control information content queries.
control much information include queries also
incorporate information. new data become available, evaluate data
249

fiBasu, Hirsh, Cohen, & Nevill-Manning

sources and/or combinations effective, thereby fine-tuning query formulation
process.

6. Related Work Query Reformulation

Since work expanding queries using WHIRL viewed type query
reformulation, review related work information retrieval community
topic. Salton (1989) describes process query reformulation \moving"
given query towards relevant items away nonrelevant ones. context
vector-space model retrieval, means given query expression form
(Salton, 1997):
Q 0 = (q 1 ; q 2 ; :::; qt)

q number 0 1 representing weight assigned term , want
arrive new query expression:




Q 0 = (q 1 ; q 2 ; :::; qt)
0

0

0

0

weights adjusted new terms introduced vector
representation, terms effectively removed reducing respective
weights 0.
Harman (1992) describes operational procedure underlying process merging document query vectors. specifically, means query terms
original query appearing relevant documents added initial query
expression. expansion occurs using positive negative weights, depending
whether terms appears relevant non-relevant document.
description assumes relevance judgments documents
system return. Practically speaking, type information hard come by.
Therefore, people seeking compensate lack information expanding
queries using variety techniques use thesauri relevance feedback.
latter case, query reformulation part iterative interactive process whereby
users presented results retrieval asked supply feedback regarding
relative importance results.
Comparing approach methods query reformulation, make couple
observations. First, query reformulation driven knowledge precomputed
data colection. Given entities papers abstracts, keywords,
titles, make sense vary amount information queries?
equivalent Table 3 collection, table lookup run time determine
formulations promising.
note way construct queries queryConjunct method combines
aspects Boolean vector-space models query formulation hybrid approach. case Boolean queries, relevance feedback lead new query expressions
consisting term conjuncts (Salton, 1997):
(Term Term Term )
Notice replace Term Vector expression,
query expression formulated according queryConjunct method.


j



k



250

fiTechnical Paper Recommendation: Study Combining Multiple Information Sources

7. Conclusions

paper, shown collect information reviewers automatically
Web, use part recommendation framework route papers
reviewers. treat problem one decomposing reviewer interest paper
contents information sources, combining information sources using
different query formulations. experiments, compared two ways formulating
queries using content-based information retrieval one collaborative approach.
found recommendation algorithm using conjunctive queries outperforms
approaches. also looked using different subsets information sources
algorithms, case optimal algorithm, found using information
generally lead better performance.
practical setting, recommendation method choice likely depend
number factors ranging availability information ease use. one
hand, framework provides exible alternative simple keyword-based searches
less intrusive alternative collaborative methods. hand, methods
assume obtain data reliable, accurate, timely. Based results,
optimistic Web provide credible information sources used
successfully recommendation process.

8. Acknowledgments

extend thanks AAAI, AAAI reviewers, AAAI paper authors, members
Rutgers Machine Learning Research Group, reviewers paper
inputs work.
note following property respective companies listed:
WHIRL (AT&T Labs { Research), LSI (Telcordia Technologies, Inc.).

References

Basu, C., Hirsh, H., & Cohen, W. (1998). Recommendation classification: Using social
content-based information recommendation. Proceedings AAAI-98.
Cohen, W. (1998a). Integration heterogeneous databases without common domains using
queries based textual similarity. Proceedings ACM SIGMOD-98.
Cohen, W. (1998b). whirl approach information integration. IEEE Intelligent
Systems. IEEE Press.
Cohen, W., & Fan, W. (2000). Web-collaborative filtering: Recommending music crawling web. Proceedings WWW-2000.
Cohen, W., & Hirsh, H. (1998). Joins generalize: Text classification using whirl.
Proceedings KDD-98.
Dillon, M., & Desper, J. (1980). Automatic relevance feedback boolean retrieval systems.
Journal Documentation, 36.
251

fiBasu, Hirsh, Cohen, & Nevill-Manning

Dumais, S., & Nielsen, J. (1992). Automating assignment submitted manuscripts
reviewers. Proceedings ACM SIGIR-92.
Geller, J. (1997). Challenge: ijcai 1999 prove value ai using ai.
Proceedings IJCAI-97.
Gupta, D., Digiovanni, M., Narita, H., & Goldberg, K. (1999). Jester 2.0: new lineartime collaborative filtering algorithm applied jokes. Workshop Recommender
Systems ACM SIGIR-99.
Harman, D. (1992). Relevance feedback revisited. Proceedings ACM SIGIR-92.
Hill, W., Stead, L., Rosenstein, M., & Furnas, G. (1995). Recommending evaluating
choices virtual community use. Proceedings CHI-95.
Konstan, J., Miller, B., Maltz, D., Herlocker, L., Gordon, L., & Riedl, J. (1997). Grouplens:
Applying collaborative filtering usenet news.. Vol. 40.
Nevill-Manning, C., Reed, T., & Witten, I. (1998). Extracting text postscript. Software
Practice Experience, 28 (5).
Pazzani, M., & Billsus, D. (1997). Learning revising user profiles: identification
interesting web sites. Machine Learning, 27, 313{331.
Porter, M. (1980). algorithm sux stripping. Program, 14, 130{137.
Salton, G. (1989). Automatic Text Processing. Addison Wesley.
Salton, G. (1997). Improving retrieval performance relevance feedback. Readings
Information Retrieval.
Shakes, J., Langheinrich, M., & Etzioni, O. (1997). Dynamic reference sifting: case study
homepage domain. Proceedings WWW-97.
Shardanand, U., & Maes, P. (1995). Social information filtering: Algorithms automating
\word mouth". Proceedings CHI-95.
Yarowsky, D., & Florian, R. (1999). Taking load conference chairs: towards
digital paper-routing assistant. Proceedings 1999 Joint SIGDAT Conference
Empirical Methods NLP Very-Large Corpora.

252

fiJournal Artificial Intelligence Research 14 (2001) 53-81

Submitted 8/00; published 3/01

Con ict-Directed Backjumping Revisited
Xinguang Chen

xinguang@cs.ualberta.ca

Peter van Beek

vanbeek@uwaterloo.ca

Department Computing Science, University Alberta
Edmonton, Alberta, Canada T6G 2H1
Department Computer Science, University Waterloo
Waterloo, Ontario, Canada N2L 3G1

Abstract

recent years, many improvements backtracking algorithms solving constraint
satisfaction problems proposed. techniques improving backtracking algorithms conveniently classified look-ahead schemes look-back schemes. Unfortunately, look-ahead look-back schemes entirely orthogonal
observed empirically enhancement look-ahead techniques sometimes counterproductive effects look-back techniques. paper, focus relationship
two important look-ahead techniques|using variable ordering heuristic maintaining level local consistency backtracking search|and
look-back technique con ict-directed backjumping (CBJ). show exists
\perfect" dynamic variable ordering CBJ becomes redundant. also show
theoretically level local consistency maintained backtracking
search increased, less backjumping improvement. theoretical
results partially explain backtracking algorithm look-ahead phase
cannot benefit backjumping look-back scheme. Finally, show empirically
adding CBJ backtracking algorithm maintains generalized arc consistency
(GAC), algorithm refer GAC-CBJ, still provide orders magnitude
speedups. empirical results contrast Bessiere Regin's conclusion (1996)
CBJ useless algorithm maintains arc consistency.

1. Introduction

Constraint satisfaction problems (CSPs) generic problem solving framework. constraint satisfaction problem consists set variables, associated domain
values, set constraints. constraints expressed relation, defined
subset variables, denoting consistent value assignments satisfy
constraint. solution CSP assignment value every variable, way
every constraint satisfied.
Constraint satisfaction problems usually solved search methods, among
backtracking algorithm improvements widely used. techniques
improving backtracking algorithms conveniently classified look-ahead schemes
look-back schemes (Dechter, 1992). Look-ahead schemes invoked whenever
algorithm preparing extend current partial solution. Look-ahead schemes include
functions choose next variable instantiated, choose next value
give current variable, reduce search space maintaining certain level
local consistency search (e.g., Bacchus & van Run, 1995; Bessiere & Regin, 1996;
c 2001 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiChen & van Beek

Haralick & Elliott, 1980; McGregor, 1979; Nadel, 1989; Sabin & Freuder, 1994). Lookback schemes invoked whenever algorithm encounters dead-end prepares
backtracking step. Look-back schemes include functions decide far
backtrack analyzing reasons dead-end (backjumping) decide new
constraints record con icts arise later search (e.g.,
Bruynooghe, 1981; Dechter, 1990; Frost & Dechter, 1994; Gaschnig, 1978; Prosser, 1993b;
Schiex & Verfaillie, 1994).
backtracking algorithm hybrid look-ahead look-back schemes
(Prosser, 1993b). paper, focus relationship two important look-ahead techniques|using variable ordering heuristic maintaining level
local consistency backtracking search|and look-back technique con ictdirected backjumping (CBJ) (Prosser, 1993b). Unfortunately, look-ahead lookback schemes entirely orthogonal observed previous experimental
work level consistency maintained backtracking search increased variable ordering heuristic improved, effects CBJ diminished
(Bacchus & van Run, 1995; Bessiere & Regin, 1996; Prosser, 1993a, 1993b). example,
observed Prosser's (1993b) experiments that, given static variable ordering, increasing level local consistency maintained none level forward checking,
diminishes effects CBJ. Bacchus van Run (1995) observe experiments
adding dynamic variable ordering (an improvement static variable ordering)
forward checking algorithm diminishes effects CBJ. experiments
effects diminished almost negligible present argument
might hold general. Bessiere Regin (1996) observe experiments
simultaneously increasing level local consistency even arc consistency
improving dynamic variable ordering heuristic diminishes effects CBJ
much that, implementation, overhead maintaining data structures
backjumping actually slows algorithm. conjecture arc consistency
maintained good variable ordering heuristic used, \CBJ becomes useless".
paper, present theoretical results deepen understanding relationship look-ahead techniques CBJ look-back technique. show
exists \perfect" dynamic variable ordering chronological backtracking algorithm CBJ becomes redundant. variable ordering heuristic
consistent \perfect" heuristic, less chance CBJ reduce search effort.
also show CBJ algorithm maintains strong k-consistency backtracking search incomparable exponentially better other.
result refined introducing concept backjump level execution
backjumping algorithm showing algorithm maintains strong k-consistency
never visits nodes backjumping algorithm allowed backjump
k levels. Thus, level local consistency maintained backtracking search
increased, less backjumping improvement. Together, theoretical
results partially explain backtracking algorithm look-ahead phase
cannot benefit backjumping look-back scheme. results also extend
partial ordering backtracking algorithms presented Kondrak van Beek (1997)
include backtracking algorithms CBJ hybrids maintain levels local con54

fiConflict-Directed Backjumping Revisited

sistency beyond forward checking, including important algorithms maintain arc
consistency.
also present empirical results show that, although effects CBJ may
diminished, adding CBJ backtracking algorithm maintains generalized arc
consistency (GAC), algorithm refer GAC-CBJ, still provide orders
magnitude speedups. empirical results contrast Bessiere Regin's (1996)
conclusion CBJ useless algorithm maintains arc consistency.

2. Background

section, formally define constraint satisfaction problems, brie review local
consistency search tree explored backtracking algorithm.

2.1 Constraint Satisfaction Problems
Definition 1 (CSP) instance constraint satisfaction problem tuple P =
(V ; D; C ), where1
V = fx1; : : :; xng finite set n variables,
= fdom(x1); : : :; dom(xn)g set domains. variable x 2 V associated finite domain possible values, dom(x). maximum domain size
maxx2V jdom(x)j denoted d,

C = fC1; : : :; Cmg finite set constraints relations. constraint C 2 C
pair (vars(C ); rel(C )),

{ vars(C ) = fxi1 ; : : :; xiri g ordered subset variables, called con-

straint scope scheme, size vars(C ) known arity constraint. arity constraint equal 2, called binary constraint.
non-binary constraint constraint arity greater 2. maximum
arity constraints C , maxC 2C jvars(C )j, denoted r,
{ rel(C ) subset Cartesian product dom(xi1 ) dom(xiri ) specifies
allowed combinations values variables vars(C ). element
Cartesian product dom(xi1 ) dom(xiri ) called tuple vars(C ).
Thus, rel(C ) often regarded set tuples vars(C ).

following, assume variable x 2 V , least one constraint
C 2 C x 2 vars(C ). definition, tuple set variables X = fx1; : : :; xkg
ordered list values (a1 ; : : :; ak ) ai 2 dom(xi ), = 1; : : :; k. tuple X
also regarded set variable-value pairs fx1 a1 ; : : :; xk ak g. Furthermore,
tuple X viewed function : X ! [x2X dom(x) variable
x 2 X , t[x] 2 dom(x). subset variables X 0 X , use t[X 0] denote tuple
X 0 restricting X 0. also use vars(t) denote set variables tuple t.
1. Throughout paper, use n, d, m, r denote number variables, maximum domain
size, number constraints, maximum arity constraints CSP, respectively.

55

fiChen & van Beek

assignment set variables X tuple X . say assignment X
consistent constraint C either vars(C ) 6 X t[vars(C )] 2 rel(C ). partial
solution CSP assignment subset variables. say partial solution
consistent consistent constraints. solution CSP consistent
partial solution variables. solution exists, CSP said insoluble.
CSP empty either one variables empty domain one constraints
empty set tuples. Obviously, empty CSP insoluble. Given two CSP instances
P1 P2 , say P1 = P2 exactly set variables, set
domains set constraints; i.e., syntactically same.

Definition 2 (projection) Given constraint C subset variables vars(C ),
projection C constraint, vars(S C ) = rel(S C ) = ft[S ] j 2
rel(C )g.
Definition 3 (selection) Given constraint C assignment subset variables X vars(C ), selection tC constraint, vars(t C ) = vars(C )
rel(tC ) = fs j s[X ] = 2 rel(C )g.
2.2 Local Consistency

inconsistency consistent partial solution variables cannot
extended additional variables cannot part global solution.
using backtracking search find solution, inconsistency lead dead end
search. insight led definition properties characterize level
consistency CSP development algorithms achieving levels
consistency removing inconsistencies (e.g., Mackworth, 1977a; Montanari, 1974),
effective backtracking algorithms finding solutions CSPs maintain level
consistency search (e.g., Gaschnig, 1978; Haralick & Elliott, 1980; McGregor,
1979; Sabin & Freuder, 1994).
Mackworth (1977a) defines three properties binary CSPs characterize local consistencies: node, arc, path consistency. Mackworth (1977b) generalizes arc consistency
non-binary CSPs.

Definition 4 (arc consistency) Given constraint C variable x 2 vars(C ),
value 2 dom(x) supported C tuple 2 rel(C ), t[x] = a.
called support fx ag C . C arc consistent variables
x 2 vars(C ), values 2 dom(x), fx ag supported C . CSP arc

consistent constraints arc consistent.
Freuder (1978) generalizes node, arc, path consistency, k-consistency.

Definition 5 (k-consistency) CSP k-consistent given consistent
partial solution k , 1 distinct variables, exists instantiation kth variable
partial solution plus instantiation consistent. CSP strongly kconsistent j -consistent 1 j k.
56

fiConflict-Directed Backjumping Revisited

binary CSPs, node, arc path consistency correspond one-, two- threeconsistency, respectively. However, definition k-consistency require CSP
binary arc consistency two-consistency non-binary CSPs.
strongly n-consistent CSP property consistent partial solution
successively extended full solution CSP without backtracking.

2.3 Search Tree Backtracking Algorithms

idea backtracking algorithm extend partial solutions. stage, uninstantiated variable selected assigned value domain extend current
partial solution2 . Constraints used check whether extension may lead
possible solution CSP prune subtrees containing solutions based
current partial solution. backtracking search, variables divided
three sets: past variables (already instantiated), current variable (now instantiated),
future variables (not yet instantiated). dead-end occurs values current variable rejected leading full solution. case, instantiated
variables become uninstantiated ; i.e., removed current partial solution.
process called backtracking. recently instantiated variable becomes
uninstantiated called chronological backtracking ; otherwise, called backjumping. backtracking algorithm terminates possible assignments tested
certain number solutions found.
backtracking search may seen search tree traversal. approach
identify tuples (assignments values variables) nodes: empty tuple root
tree, first level nodes 1-tuples (representing assignment value
single variable), second level nodes 2-tuples, on. levels closer
root called shallower levels levels farther root called deeper levels.
Similarly, variables corresponding levels called shallower deeper.
say backtracking algorithm visits node search tree stage
algorithm's execution current partial solution identifies node. nodes visited
backtracking algorithm form subset nodes belonging search tree.
call subset, together connecting edges, backtrack tree generated
backtracking algorithm.
backtracking algorithm con ict-directed backjumping (CBJ) (Prosser, 1993b) maintains con ict set every variable. Every time instantiation current variable
xi con ict instantiation past variable xh , variable xh added
con ict set xi . values tried current variable xi ,
CBJ backtracks deepest variable xh con ict set xi . time,
variables con ict set xi , exception xh , added con ict set
xh , information con icts lost.
Throughout paper refer following backtracking algorithms (see Kondrak
& van Beek, 1997; Prosser, 1993b detailed explanations examples
algorithms): chronological backtracking (BT), backjumping (BJ) (Gaschnig, 1978), con ictdirected backjumping (CBJ) (Prosser, 1993b), forward checking (FC) (Haralick & Elliott,
1980; McGregor, 1979), forward checking con ict-directed backjumping (FC-CBJ)
2. Throughout paper, assume static value ordering used backtracking search.

57

fiChen & van Beek

(Prosser, 1993b), maintaining arc consistency (MAC) (Gaschnig, 1978; Sabin & Freuder,
1994), maintaining arc consistency con icted-directed backjumping (MAC-CBJ)
(Prosser, 1995).

3. Variable Ordering Heuristics Backjumping

section, present theoretical results deepen understanding relationship look-ahead technique using variable ordering heuristic
look-back technique CBJ.
previous work, Kondrak van Beek (1997) show that, given deterministic
static dynamic variable ordering heuristic, CBJ never visits nodes BT. Bacchus
van Run (1995) show BJ, restricted version CBJ, visits exactly nodes
BT fail-first dynamic variable ordering heuristic used. Previous empirical work
shows number nodes CBJ saves depends variable ordering heuristic
used (Bacchus & van Run, 1995; Bessiere & Regin, 1996; Prosser, 1993b).
show that, given CSP variable ordering CBJ, exists \perfect"
variable ordering chronological backtracking algorithm (BT) BT never
visits nodes CBJ. variable ordering heuristic consistent
\perfect" heuristic, less chance CBJ reduce search effort.
first consider case insoluble CSPs. CBJ applied insoluble CSP,
always backjumps dead-end state; i.e., terminate backjump
situation solution CSP found.

Lemma 1 Given insoluble CSP variable ordering CBJ, exists variable

ordering BT BT never visits nodes CBJ show solution
exists.

Proof backtrack tree generated CBJ variable ordering, let last

backjump terminates execution CBJ variable xj root
backtrack tree. choose xj first variable BT. value domain
xj , current node backtrack tree CBJ consistent (not leaf node),
next variable chosen instantiated assigning xj variable backjumps
xj causes assignment xj revoked. entire variable ordering
BT worked similar, recursive manner. variable ordering BT
well-defined, remains show current node backtrack tree CBJ
inconsistent (a leaf node), corresponding node backtrack tree BT also
inconsistent (and therefore next variable needs chosen). show variables
skipped variable ordering constructed BT irrelevant dead-end states
encountered CBJ. Suppose stage ordered variables instantiated
BT xj1 ; : : :; xjk , value 2 dom(xjk ) choose next variable xjk+1
variable backjumps current variable xjk CBJ backtrack tree.
prove induction con ict set xjk+1 used backjumping subsumed
fxj1 ; : : :; xjk g. k = 1 case last backjump terminates execution CBJ.
hypothesis true con ict set xj1 empty set. Suppose true
case k > 1. xjk+1 backjumps xjk , con ict set xjk+1 merged
con ict set xjk . inductive assumption, con ict set xjk subsumed
58

fiConflict-Directed Backjumping Revisited

fxj1 ; : : :; xjk,1 g, thus con ict set xjk+1 subsumed fxj1 ; : : :; xjk g. Therefore,
hypothesis holds case k + 1. CBJ finds instantiation xjk
inconsistent assignments past variables added con ict
set xjk , BT also able find inconsistency con ict set xjk
subsumed fxj1 ; : : :; xjk,1 g. Thus, variable ordering BT well-defined.
soluble CSPs, distinguish problem finding one solution
finding solutions.

Lemma 2 Given CSP variable ordering CBJ find first solution,

exists variable ordering BT BT never visits nodes CBJ find
first solution.

Proof Without loss generality, let fx1 a1; : : :; xn g first solution found.

variable ordering BT constructed following way. first variable chosen
BT x1 first variable path root solution CBJ
backtrack tree. assume static value ordering backtracking search,
values domain x1 precede value a1 must rejected CBJ BT
value a1 used instantiate x1 . Furthermore, fx1 a1 ; : : :; xn g
first solution encountered CBJ variable ordering value ordering,
instantiation x1 value preceding a1 leads insoluble subproblem
eventually CBJ backjumps deeper variable x1 revoke assignment. Note
x1 cannot skipped backjump deeper variable x1 first
level search tree solution CSP. Assigning x1
values precede a1 domain leads insoluble subproblems instantiation
order BT arranged Lemma 1. Whenever xk instantiated value ak ,
xk+1 chosen next variable, follows xk path root
solution CBJ backtrack tree. Again, values domain xk+1 precede
ak+1 value ordering must rejected CBJ BT ak+1 assigned
xk+1. instantiation xk+1 values leads insoluble subproblem
eventually CBJ backjumps deeper variable xk+1 . Similarly, xk+1 cannot
skipped backjump deeper variable otherwise least one
assignments x1 ; : : :; xk must changed fx1 a1 ; : : :; xn g
first solution encountered CBJ. insoluble subproblems, instantiation
order BT arranged Lemma 1. Finally, xn instantiated BT
finds solution.
CBJ used find solutions, special steps must taken handle con ict sets. problem con ict sets CBJ meant indicate
instantiations responsible previously discovered inconsistency. However,
solution found, con ict sets cannot always interpreted way. search
solutions, rather inconsistency, causes algorithm backtrack.
need differentiate two causes CBJ backtracks: (1) detecting inconsistency, (2) searching solutions. latter case, backtrack must
always chronological; is, immediately preceding variable. simple solution
remember number solutions found far variable chosen instantiated,
59

fiChen & van Beek

later dead-end state encountered level, compare recorded number current number solutions. difference indicates solutions
found interval search, forces algorithm backtrack chronologically.
Otherwise algorithm performs normal backjumping analyzing con ict set
current variable.

Lemma 3 Given CSP variable ordering CBJ find solutions, exists
variable ordering BT BT never visits nodes CBJ find
solutions.
Proof Let first solution found CBJ fx1

a1; : : :; xn g order
x1 ; : : :; xn. first construct variable ordering BT applied find first

solution. However, BT follows strict chronological backtracking, inevitably
visit nodes fx1 a1 ; : : :; xj ,1 aj ,1 ; xj a0j g, 1 j n a0j comes
aj domain xj . CBJ skips nodes, example, deeper
level variable xh xj ,1 , instantiations x1 ; : : :; xj changed, BT
possibly visit nodes CBJ. show cannot happen induction
distance current level j deepest level n. CBJ found
solution level n, try values xn eventually backtrack xn,1 .
nodes level n cannot skipped. Suppose true case level j + 1
consider case level j . xj aj skipped backjumping,
aj last value domain, CBJ backtrack xj ,1 number
solutions changed. true case j . Otherwise CBJ change
instantiation xj next value domain. Let current partial solution
= fx1 a1; : : :; xj,1 aj,1; xj a0j g. subtree rooted contains solutions,
inductive hypothesis, CBJ skip node level j .
subtree rooted contains solution, exists backjump deeper level
variable xh escape subtree. Could jump beyond xj skipped?
case, con ict set xh subsumed fx1 ; : : :; xj ,1 g. definition con ict
set, know current instantiations variables con ict set cannot lead
solution. However current instantiations fx1 ; : : :; xj ,1 g lead solution,
fx1 a1; : : :; xn ang. contradiction. con ict set xh must contain
xj thus node level j cannot skipped. values domain
xj tried, CBJ chronologically backtrack xj ,1 number
solutions changed. Thus, xj ,1 aj ,1 skipped. hypothesis true
case level j . construct variable ordering BT following way:
current partial solution = fx1 a1 ; : : :; xj ,1 aj ,1 ; xj a0j g cannot extended
solution, construct variable ordering insoluble subproblem.
extended solution, construct variable ordering BT case finding
first solution subproblem, recursively apply steps backjump
level xj changes instantiation xj a0j . variable ordering, BT
never visit nodes CBJ.

Theorem 4 Given CSP variable ordering CBJ, exists variable ordering

BT BT never visits nodes CBJ solving CSP.
60

fiConflict-Directed Backjumping Revisited

x1 + x2 x3
x1 + x3 > x5 + 1
x2 , x4 x5
x1 ; :: : ;x5 2 f0; 1; 2g

x1

0

CBJ backtrack tree

x2

2

x3

x3

x3
3

x4

x4

x5

x4

x5

x5
4

x5

x5

x4

x5

x4

x4
5

p

p p
x1

x2

0

p p p

BT backtrack tree
2

x3

x3

x3
3

x5

x5

x5

x5

x5

x5
4

x4

x4

x4
5

p

p p

p p p

Figure 1: illustration variable ordering constructed BT CBJ backtrack
tree (for CSP shown upper left).

Proof Follows Lemmas 1, 2, 3.
Example 1 Figure 1 shows BT backtrack tree based variable ordering constructed
execution CBJ solve CSP (hypothetical) dynamic variable ordering.
first solution found CBJ fx1 0; x2 0; x3 2; x5 0; x4 0g. Thus, BT
first instantiates x1 x2 0. node fx1 0; x2 0; x3 0g fx1 0; x2
0; x2 1g CBJ backtrack tree lead insoluble subproblems. variable ordering
BT nodes constructed case insoluble CSPs. example,
CBJ backtrack tree, last backjump revoke node fx1 0; x2 0; x3 0g
61

fiChen & van Beek

x5 x3 , next variable instantiated BT node x5 .
ordering, BT avoids instantiating x4 visits fewer nodes CBJ. BT instantiates
x3 2, x5 0, x4 0, finds first solution.
shown exists \perfect" variable ordering CBJ becomes
redundant. course, \perfect" ordering would known priori, practice,
primary goal designing variable ordering heuristics simulate execution
CBJ, reduce size overall backtrack tree. example, popular failfirst heuristic selects next variable instantiated variable minimal
remaining domain size (the size domain removing values con ict
past instantiations) shown minimize size overall tree
certain assumptions. secondary effect, however, variables con icts
past instantiations likely instantiated sooner, thus approximating \perfect"
ordering diminishing effects backjumping.

4. Maintaining Consistency Backjumping

section, present theoretical results deepen understanding relationship look-ahead technique maintaining level local consistency
backtracking search look-back technique CBJ.
previous work, Kondrak van Beek (1997) show that, given deterministic
static dynamic variable ordering heuristic, CBJ never visits nodes BT
FC-CBJ never visits nodes FC. Prosser (1993a) shows removal
inconsistent value domain variable diminish effects CBJ
CBJ visit fewer nodes algorithm combines CBJ discovery
removal inconsistent values. Previous empirical work shows number
nodes CBJ saves depends level local consistency maintained (Bacchus & van
Run, 1995; Bessiere & Regin, 1996; Prosser, 1993b).
extend partial ordering backtracking algorithms presented Kondrak
van Beek (1997) include backtracking algorithms CBJ hybrids maintain
levels local consistency beyond forward checking, including important algorithms
maintain arc consistency. show CBJ algorithm maintains strong kconsistency backtracking search incomparable exponentially
better other. result refined using concept backjump level
execution backjumping algorithm showing algorithm maintains
strong k-consistency never visits nodes backjumping algorithm allowed
backjump k levels. Thus, level local consistency maintained
backtracking search increased, less backjumping improvement.
Section 4.1, consider backjumping algorithms define series algorithms BJk . Section 4.2, consider look-ahead algorithms maintain level
local consistency define series algorithms MCk . Finally, Section 4.3, consider relationships backjumping look-ahead algorithms
hybrids. reader interested technical proofs results jump
directly section.
62

fiConflict-Directed Backjumping Revisited

x1

x1 + x2 x3
x1 + x3 > x5 + 1
x2 , x4 x5
x1 ; : : : ; x5 2 f0; 1; 2g

0

x2

1

x3

d=3
x4

x5

3

x5
d=1

x4

2

d=2
d=1

4
5

p p

Figure 2: illustration backjump levels CBJ backtrack tree (for CSP shown
upper right).

4.1 Backjump Level BJk

analyze uence level consistency backjumping, need notion
backjump level. Informally, level backjump distance, measured backjumps,
backjump destination \farthest" dead-end.

Definition 6 (backjump level, Kondrak & van Beek, 1997) definition back-

jump level recursive:
1. backjump variable xi variable xh level 1 performed directly
dead-end state every value xi fails consistency check.
2. backjump variable xi variable xh level 2, backjumps performed
variable xi level less d, least one level , 1.

Example 2 Figure 2 shows backjump levels example CBJ backtrack tree.

one-level backjump x5 x3 every value domain x5 fails consistency
check. CBJ finds two solutions problem thus chronologically backtracks
x4 x5 , later x3. backjumps level one two respectively. last
three-level backjump x3 x2 .
classifying backjumps performed backjumping algorithm different levels,
weaken CBJ series backjumping algorithms perform limited
levels backjumps. BJk backjumping algorithm allowed perform
k-level backjumps chronologically backtracks j -level backjump j > k
encountered3 . BJn equivalent CBJ, performs unlimited backjumps, BJ1
3. BJk theoretical interest since practice one would use CBJ rather artificially prevent
backjumping; i.e., one actually add code prevent backjumping.

63

fiChen & van Beek

equivalent Gaschnig's (1978) BJ, first level backjumps backjumps
dead-ends.
One may immediately conclude BJk+1 always better BJk one
level backjumps. However, precise, need justify situation
BJk may skip node visited BJk+1 exist. Similar result Kondrak
van Beek (Theorem 11, 1997), show that:

Theorem 5 BJk visits nodes BJk+1 visits.
4.2 Maintaining Strong k-consistency (MCk )

Although backtracking algorithms maintain arc consistency (or truncated form arc
consistency called forward checking) search well-studied, backtracking algorithm maintains strong k-consistency (MCk ) never fully addressed
literature. order study relationship BJk MCk , need specify
precisely MCk algorithms.
generic scheme maintain level local consistency backtracking search
perform node search tree one full cycle consistency achievement. consistency achievement algorithm applied CSP induced current partial
solution. If, result, induced CSP becomes empty applying consistency
algorithm, instantiation current variable dead-end rejected.
resulting CSP empty, instantiation current variable accepted
search continues next level.
simplest form induced CSP restrict domains instantiated
variables one value leave set constraints unchanged. idea
traced back Gaschnig's (1978) implementation MAC, referred DEEB; i.e.,
Domain Element Elimination Backtracking. However, order establish relation
BJk MCk , need restricted definition induced CSP,
constraints induced CSP selections projections constraints
original CSP respect partial solution.

Definition 7 (induced CSP) Given consistent partial solution CSP P , CSP
induced t, denoted P jt , variables P except instantiated t,
domain variable P , constraint C P
vars(C ) 6 vars(t), constraint C 0 = vars(C),vars(t) (t[vars(C )\vars(t)](C )) P jt.
Example 3 Consider graph coloring problem corresponding CSP shown
Figure 3. original CSP four variables, x1 ; : : :; x4, x1 ; x2; x3 2 fr; g; bg
x4 2 frg, five binary constraints, x1 =
6 x2, x1 =6 x3, x2 =6 x3, x2 =6 x4 x3 =6 x4.
Given partial solution = fx1 g; x2 bg, CSP induced t, P jt , two variables,
x3 x4 , unary binary constraints shown Figure 4.
maintaining strong k-consistency algorithm (MCk ) node backtrack
tree applies strong k-consistency achievement algorithm CSP induced

current partial solution. architecture, FC viewed maintaining
one-consistency, binary CSPs, MAC viewed maintaining strong twoconsistency.
64

fiConflict-Directed Backjumping Revisited

algorithm enforcing strong k-consistency CSP instance detect remove
inconsistencies = fx1 a1 ; : : :; xj aj ,1 g 1 j k consistent
cannot consistently extended j th variable xj . remove inconsistency,
make inconsistent resulting CSP removing values domains, removing
inconsistent tuples existing constraints, adding new constraints CSP.
use concept k-proof-tree characterizing tuples removed
strong k-consistency achievement algorithm.

Definition 8 (k-proof-tree) k-proof-tree partial solution k vari-

ables CSP tree node associated partial solution
k variables CSP, (1) root k-proof-tree associated t, (2)
leaf node k-proof-tree inconsistent CSP, (3) non-leaf node
k-proof-tree consistent CSP, children next level nodes
s0 [ fx a1g; : : :; s0 [ fx alg s0 s, x 62 vars(s), dom(x) = fa1 ; : : :; al g.

Example 4 Figure 3 shows three-proof-tree (more one possible) = fx1 gg

given graph coloring problem. non-leaf node, including root t, consistent,
leaf node inconsistent CSP. Since constructed three-prooftree tuple cannot part solution CSP strong 3-consistency
achievement algorithm would remove it.
general, k-proof-tree inconsistency CSP constructed, algorithm achieving strong k-consistency would deduce remove inconsistency.
applying strong k-consistency achievement algorithm CSP, children
node k-proof-tree inconsistent resulting CSP, node also inconsistent resulting CSP one subtuples cannot consistently extended
additional variable. leaf nodes k-proof-tree inconsistent
original CSP, bottom-up manner inconsistency root tree
deduced removed resulting CSP. special case, k-proof-tree
empty inconsistency CSP constructed, CSP empty enforcing
strong k-consistency since every way extend variable shown lead
inconsistency (and therefore, value would removed domain resulting
empty domain). hand, CSP made strongly k-consistent,
partial solution k variables inconsistent resulting CSP, k-proof-tree
original CSP constructed. inconsistent original CSP,
k-proof-tree contains single node t. Otherwise, subtuple t0 cannot extended
additional variable x; i.e., partial solutions t0 [ fx a1 g; : : :; t0 [ fx al g,
dom(x) = fa1; : : :; alg, inconsistent resulting CSP. construct
k-proof-tree recursively inconsistencies. special case, CSP
empty enforcing strong k-consistency, k-proof-tree empty inconsistency
original CSP constructed.
following lemmas (Lemma 6 Lemma 8) reveal basic properties induced CSPs strong k-consistency enforcement induced CSPs, used
proofs Theorem 10 Theorem 14.

65

fiChen & van Beek

x2

6=
x1

r;g; b

6=

6=

r;g; b

6=

r

x4

x1

g

x1
x2

g
g

x1 ;x2 ; x3 2 fr; g;bg; x4 2 frg
C (x1 ;x2 ) : x1 6= x2
C (x1 ;x3 ) : x1 6= x3
C (x2 ;x3 ) : x2 6= x3
C (x2 ;x4 ) : x2 6= x4
C (x3 ;x4 ) : x3 6= x4

6=

r;g; b
x3

x1
x2

g
r

x2
x4

r
r

x1
x2
x3

g
b
r

x3
x4

r
r

x1
x2

g
b

x1
x2
x3

g
b
g

x1
x2
x3

g
b
b

Figure 3: three-proof-tree fx1 g g graph coloring problem. leaf nodes
proof-tree inconsistent CSP.

Lemma 6 Given CSP P two partial solutions t0 P , t0, P jt0 =
(P jt )jt0,t .
Proof Clearly P jt0 (P jt)jt0,t set variables set domains.

vars(C ),vars(t0 ) t0 C = vars(C ),vars(t0 ) t0 ,t (vars(C ),vars(t) C ), constraint
C P , selection projection made P jt0 (P jt )jt0,t. Therefore, P jt0
(P jt )jt0,t set constraints.

Lemma 7 Given CSP P consistent partial solution P , (i) P empty
achieving strong k-consistency, (ii) exists variable x 2 vars(t) value
t[x] removed domain x achieving strong k-consistency P , P jt
empty achieving strong k-consistency,

Proof first show that, given consistent partial solution CSP P , k-proof-

tree inconsistency P , corresponding well-defined k-proof-tree Tt
inconsistency s0 = s[vars(s) , vars(t)], induced CSP P jt , provided
66

fiConflict-Directed Backjumping Revisited

x3 2 fr; g; bg; x4 2 frg
C (x3 ) : f(r); (b)g
C (x3 ) : f(r); (g)g
C (x4 ) : f(r)g
C (x3 ; x4 ) : x3 6= x4


x3

r

x3
x4

r
r

x3

g

x3

b

Figure 4: Proof-tree empty inconsistency CSP P jt induced = fx1
g; x2 bg constructed proof-tree fx1 g g CSP P shown
Figure 3.
contain assignments inconsistent assignments t. Tt constructed
three steps (see Figure 4 example): (Step 1) Remove nodes
descendants contain assignments inconsistent assignments
t. (Step 2) Replace remaining node t0 node t00 = t0 [vars(t0) , vars(t)];
i.e., remove variables occur thus occur P jt . t0
leaf node , definition t0 consistent P . possible corresponding
node t00 Tt inconsistent P jt . case, make t00 leaf node
removing descendants. t0 leaf node , definition t0 inconsistent
P ; i.e., exists constraint C P t0 satisfy C . must
case vars(C ) 6 vars(t) (since vars(C ) vars(t) contradicts fact t0
inconsistent C consistent therefore consistent C , t0 agree
assignments Step 1). Hence, corresponding constraint C 0 P jt
selection projection C P . Now, easy verify corresponding node
t00 also inconsistent C 0 therefore well-defined leaf node. (Step 3) Remove
subsumed nodes , node t2 subsumed node t1 t2 (necessarily only)
child t1 vars(t2) vars(t1). children subsumed node t2 made children
parent t2 .
Now, suppose P empty achieving strong k-consistency. k-prooftree empty inconsistency P construct k-proof-tree empty
inconsistency P jt . Therefore, P jt empty achieving strong k-consistency. Suppose
exists variable x 2 vars(t), value t[x] removed domain
x achieving strong k-consistency P . k-proof-tree fx t[x]g
P construct k-proof-tree empty inconsistency P jt. Therefore P jt
empty achieving strong k-consistency.

67

fiChen & van Beek

Lemma 8 Given CSP P assignment fx ag, 2 dom(x), induced CSP
P jfx ag empty achieving strong (k , 1)-consistency, value removed
domain x achieving strong k-consistency P .

Proof Suppose P jfx ag empty achieving strong (k , 1)-consistency. Thus,
(k , 1)-proof-tree empty inconsistency P jfx ag . convert (k , 1)proof-tree k-proof-tree fx ag P . node original (k , 1)-proof-tree
replaced [ fx ag. Thus, root tree becomes fx ag. Furthermore,
leaf node original (k , 1)-proof-tree; i.e., consistent P jfx ag ,
easy verify [ fx ag consistent P . leaf node original
(k , 1)-proof-tree; i.e., inconsistent P jfx ag, constraint C 0 P jfx ag

satisfy C 0. Let C 0 selection projection constraint C P .
Thus, [ fx ag satisfy constraint C P therefore inconsistent P .
Hence, constructed k-proof-tree fx ag P thus would removed
domain x achieving strong k-consistency P .

MCk extends current node CSP induced current partial solution
empty achieving strong k-consistency. node thus called k-consistent node.

Definition 9 (k-consistent node) node search tree k-consistent node
CSP induced empty enforcing strong k-consistency. node
k-consistent called k-inconsistent.

Lemma 9 node k-consistent, ancestors also k-consistent.
Proof Let t0 one t's ancestors. t0 t, Lemma 6, P jt = (P jt0 )jt,t0 . Thus,
P jt induced subproblem P jt0 . Lemma 7, P jt empty achieving
strong k-consistency, P jt0 empty either achieving strong k-consistency. Thus, t0
k-consistent.

following theorem applies case finding solutions.

Theorem 10 MCk visits node, parent k-consistent. node k-consistent,
MCk visits node.

Proof first part true MCk would branch node parent
found k-inconsistent. prove second part induction depth search tree.
hypothesis trivial j = 1. Suppose true j > 1 k-consistent
node level j + 1. Let current variable x. Lemma 9, t's parent t0 level
j k-consistent. Thus, MCk visit t0 . Lemma 6, P jt = (P jt0 )jfx t[x]g.
(P jt0 )jfx t[x]g empty achieving strong k-consistency, Lemma 7, value t[x]
removed domain x achieving strong k-consistency P jt0 .
consequence, MCk visit t.

necessary sucient condition MCk visit node t's parent kconsistent value assigned current variable removed
domain enforcing strong k-consistency t's parent.
68

fiConflict-Directed Backjumping Revisited

Theorem 11 Given CSP variable ordering, MCk visits nodes MCk+1

visits.

Proof Follows Theorem 10 Lemma 7.
4.3 Relationship BJk MCk

Kondrak van Beek (1997) shown binary CSPs, BJ (BJ1 ) visits
nodes FC (MC1) visits, FC-CBJ (MC1-CBJ) CBJ incomparable.
extend partial ordering backtracking algorithms include relationship
MCk , BJk , MCk -CBJ, 1 k n. results case general CSPs;
i.e., restricted binary CSPs.
begin characterizing important property CBJ algorithm.

Lemma 12 CBJ performs one-level backjump deeper variable xi shallower
variable xh , node th level xh one-inconsistent.

Proof Let Si con ict set xi used backjumping xh deepest variable. show xi experience domain wipe enforcing oneconsistency induced CSP P jth [Si ] . node ti level xi leaf node;
i.e., ti inconsistent P . Suppose ti satisfy constraint C xi 2 vars(C )
vars(C ) Si [ fxi g. selection C P jth [Si ] , constrains one variable
fxig, prohibit value ti [xi] xi. Thus, xi experience domain wipe
enforcing one-consistency P jth [Si ] . Note P jth induced subproblem P jth [Si ] .
Lemma 7, P jth empty enforcing one-consistency. Thus, th level xh
one-inconsistent.
Lemma 13 CBJ performs k-level backjump deeper variable xi shallower
variable xh , current node th level xh k-inconsistent.
Proof Let Si current con ict set xi xh deepest variable. show
k-level backjump xi xh , P jth [Si ] empty enforcing strong

k-consistency thus th k-inconsistent. proof induction k. k = 1 true
Lemma 12. Suppose hypothesis true case k , 1 true
case k; i.e., k-level backjump xi xh , induced CSP P jth [Si ]
empty enforcing strong k-consistency. least one value left
domain xi enforcing strong k-consistency P jth [Si ] . know node ti
level xi instantiating xi either incompatible th (i.e., leaf node)
l-level backjumped deeper variable xj , 1 l < k (see Figure 5).
However, ti cannot leaf node otherwise would removed domain xi
enforcing strong k-consistency. Let Sj con ict set xj . hypothesis,
induced CSP P jti [Sj ] empty achieving strong l-consistency. value
removed resulting CSP, Lemma 8, induced CSP P jth [Si ][fxi ag
empty achieving strong (k , 1)-consistency. ti [Sj ] th [Si ] [ fxi ag,
induced CSP P jti [Sj ] empty achieving strong (k , 1)-consistency. leads
contradiction. Thus P jth [Si ] empty achieving strong k-consistency th
level xh k-inconsistent.
69

fiChen & van Beek

th

xh
k-level backjumping

:::

ti

con ict set Si xi

l-level backjumping, l < k

:::

con ict set Sj xj

Figure 5: scenario CBJ backtrack tree used proof Lemma 13.

Theorem 14 Given CSP variable ordering, BJk visits nodes MCk
visits.

Proof proof induction level search tree. MCk visits node
level j search tree, BJk visits node. j = 1 trivial. Suppose true
case j > 1 node visited MCk level j + 1. know
MCk BJk visit t's parent level j . chance may skipped BJk
BJk backjumps deeper variable xi level shallower variable xh
level h, h < j + 1 < i. Thus, node level h k-inconsistent (by Lemma 13).
Since node level h ancestor know t's parent k-consistent
Lemma 9, node level h k-consistent. contradiction. Therefore, BJk
visits level j + 1.
MCk combined backjumping, namely MCk -CBJ, provided con ict sets
computed correctly achieving strong k-consistency induced CSPs.

Theorem 15 Given CSP variable ordering, MCk visits nodes MCk-CBJ

visits.

Proof MCk-CBJ behaves exactly MCk forward phase

backtracking search, easy verify MCk -CBJ visits node t's parent
k-consistent value assigned current variable removed
domain achieving strong k-consistency t's parent. Therefore, MCk -CBJ never
visits nodes MCk does.
Figure 6, present hierarchy terms size backtrack tree BJk ,
MCk , MCk -CBJ. path algorithm algorithm B figure,
know never visits nodes B does. example, MCk never visits
nodes BJj , j k. Otherwise, instances show may
exponentially better B, vice versa.
70

fiConflict-Directed Backjumping Revisited

BJn
(CBJ)

..
.

+1

BJk

BJk

MCn

MCn -CBJ

..
.

..
.

+1

MCk

+1 -CBJ

MCk

MCk

MCk -CBJ

..
.

..
.

..
.

BJ

1

MC

1

MC -CBJ

(BJ)

(FC)

(FC-CBJ)

1

Figure 6: hierarchy BJk , MCk , MCk -CBJ terms size backtrack
tree.
following example shows, fixed integer k < n, exists CSP instance
CBJ visits exponentially fewer nodes algorithm maintains strong
k-consistency backtracking search4.

Example 5 Given fixed integer k, construct binary CSP n + k +2 variables,
x1 ; : : :; xn,k+1; y1; : : :; yk+1 ; xn,k+2; : : :; xn+1, dom(xi ) = f1; : : :; ng 1 n +1
dom(yj ) = f1; : : :; kg 1 j k + 1. constraints are: xi =
6 xj , =6 j ,
yi =
6 yj , =6 j . problem consists two separate pigeon-hole subproblems, one

variables x1; : : :; xn+1 variables y1 ; : : :; yk+1 , insoluble.
see, pigeon-hole problem highly locally consistent. first subproblem strongly nconsistent second strongly k-consistent. static variable ordering,
4. Independently, Bacchus Grove (1999) present similar example show given fixed k, CBJ
may exponentially better algorithm called MIkC , essentially maintains k-consistency
backtracking search.

71

fiChen & van Beek

backtracking algorithm maintaining strong k-consistency would encounter dead-end
xn,k+1 instantiated. would find subproblem xn,k+2 ; : : :; xn+1
strongly k-consistent. Thus, algorithm backtrack reaches second
pigeon-hole subproblem. explore nk!! nodes level n , k + 1 search tree
thus take exponential number steps find problem insoluble. CBJ
encounter dead-end level xn,k+1 continues second pigeon-hole
problem. Eventually find second-pigeon hole problem insoluble backjump
root search tree. total number nodes explored bounded constant,
O((k + 1)k), fixed k. Therefore, CBJ exponentially better algorithm
maintaining strong k-consistency.
Example 5 also shows that, although MCk visits fewer nodes BJk Theorem 14,
BJk+1 exponentially better MCk . However, BJk+1 better MCk
(k + 1)-level backjump also chronological backtrack. see
true, suppose particular instance (k + 1)-level backjumps also
chronological backtracks (i.e., backjump immediately preceding variable
variable ordering single variable becomes uninstantiated removed
current partial solution). case, freedom backjump one additional level
rather chronologically backtrack make difference BJk+1 effectively
BJk thus cannot better MCk . Thus, BJk+1 better MCk
(k + 1)-level non-chronological backjump. note, however, since
number backjumps level k +1 less equal number backjumps level
k, k increases gets unlikely. Thus, level local consistency
maintained backtracking search increased, less backjumping
improvement.
Consider Example 5 again. level backtrack tree MCk , instantiation
past variables removes one distinct value domain current
variable (recall MCk never instantiates variable y1 reaches dead-end
xn,k+1 ). maintain con ict sets variables, con ict set current
variable would include past variables thus dead-end encountered
algorithm, backjump computed con ict sets would also necessarily
chronologically backtrack. Thus, example shows, MCk -CBJ MCk visit
exactly nodes consequently BJk+1 exponentially better MCk CBJ. Furthermore, MCk,1 -CBJ reach second pigeon-hole problem without
encountering dead-end, finally retreat second pigeon-hole problem
root search tree backjumps. Thus, MCk,1 -CBJ may exponentially better
MCk -CBJ. particular, shows surprising result MAC-CBJ visit
exponentially nodes FC-CBJ.
Finally, following example shows, fixed integer k < n, exists CSP
instance algorithm maintains strong k-consistency backtracking
search visits exponentially fewer nodes CBJ.

Example 6 Consider CSP defined Example 5, searched static variable
ordering y1 ; : : :; yk ; x1; : : :; xn+1 ; yk+1 .

72

fiConflict-Directed Backjumping Revisited

5. Empirical Evaluation Adding CBJ GAC

section, report experiments examined effect adding CBJ
backtracking algorithm maintains generalized arc consistency (GAC), algorithm
refer GAC-CBJ. Previous work shown importance algorithms
maintain arc consistency (e.g., Sabin & Freuder, 1994; Bessiere & Regin, 1996). show
adding CBJ backtracking algorithm maintains generalized arc consistency
speed algorithm several orders magnitude hard, structured problems.
Previous empirical studies adding CBJ backtracking algorithm maintains
level local consistency led mixed conclusions. Adding CBJ forward checking,
truncated form arc consistency, shown give improvements always
significant ones. Prosser (1993b) observes static variable ordering, FC-CBJ
three times faster FC Zebra problem. Smith Grant (1995) observe
dynamic variable ordering, adding CBJ FC led significant savings
hard random problems occur easy region. Bacchus van Run (1995)
observe dynamic variable ordering, adding CBJ FC led
5% improvement Zebra problem, n-Queens problems, random binary problems.
Bayardo Schrag (1996, 1997) show adding CBJ well-known Davis-Putnam
algorithm, SAT version forward checking, significant improvement hard
random real-world 3-SAT problems.
Adding CBJ algorithm maintains full arc consistency received less attention literature. one study aware of, Bessiere Regin (1996)
observe adding CBJ MAC (the binary version GAC) actually slows
algorithm random binary problems due overhead maintaining con ict sets.
conjecture \when MAC good variable ordering heuristic used, CBJ
becomes useless".
empirical results lead us differ Bessiere Regin's conclusion
usefulness adding CBJ algorithm maintains full arc consistency. implementation able significantly reduce overhead maintaining con ict sets
use additional data structures5. problems adding CBJ
lead many savings nodes visited, implementation CBJ also degrade performance significant factor. demonstrate improvement re-doing Bessiere
Regin's (1996) experiments random binary problems. show experiments two structured domains GAC-CBJ sometimes improve GAC several
orders magnitude hard instances.
experiments, ran GAC GAC-CBJ instance problem
recorded CPU times. Comparing CPU times appropriate underlying code
GAC GAC-CBJ identical, GAC-CBJ containing additional code
maintain con ict sets determine far jump back. Two dynamic variable
orderings used: popular dom+deg heuristic chooses next variable
minimal domain size breaks ties choosing variable maximum degree
(the number constraints constrain variable) dom/deg heuristic
proposed Bessiere Regin (1996) chooses next variable minimal
5. See online appendix source code description key data structures implementations GAC GAC-CBJ.

73

fiChen & van Beek

value domain size divided degree. experiments run 400 MHz
Pentium II's 256 Megabytes memory.

5.1 Random Problems

run time performance GAC GAC-CBJ compared sets randomly
generated binary CSPs. set random problems defined 5-tuple (n; d; r; m; t),
n number variables, uniform domain size, r uniform arity
constraints, number randomly generated constraints, uniform
tightness number tuples constraint. case, constraint tightness
chosen approximately half instances population insoluble;
i.e., instances phase transition region.
Table 1: Effect domain size average time (seconds) solve random instances
(50; d; 2; 95; t). set contained 100 random instances. GAC-CBJ
GAC used dom/deg variable ordering.

GAC-CBJ GAC
5
0:0027 0:0030
10
0:026
0:027
0:10
0:10
15
20
0:41
0:41
25
0:79
0:78
30
2:46
2:47
35
3:82
3:80
10:98
10:75
40

ratio
0:90
0:96
1:00
1:00
1:01
1:00
1:01
1:02

Bessiere Regin (1996) examine effect domain size average time
solve random instances (50; d; 2; 95; t) (see Figure 5 (right) Bessiere & Regin, 1996).
implementation CBJ, adding CBJ steadily worsens performance domain
size increases = 40 MAC-CBJ 1.7 times slower MAC alone.
implementation, difference performance GAC-CBJ GAC negligible
problems (see Table 1).
remaining sets random problems Bessiere Regin used experiments compare performance MAC-CBJ MAC simple provide
meaningful comparison solved less 0.01 seconds 400 MHz
Pentium II computer. Thus, chose harder sets random binary problems.
instance ran GAC GAC-CBJ recorded CPU times. report
average ratio CPU times (GAC GAC-CBJ). set contained 100 random
instances. first set problems, (150; 5; 2; 750; 19), average ratio dom+deg
variable ordering 0.90 average ratio dom/deg variable ordering 0.88.
second set problems, (150; 5; 2; 1500; 21), average ratios dom+deg
74

fiConflict-Directed Backjumping Revisited

dom/deg variable orderings 0.93. words, average GAC little
10% faster GAC-CBJ problems.

5.2 Planning Problems

Planning, one required find sequence actions initial state goal
state, formulated CSP. formulation used experiments,
state modeled collection variables constraints enforce assignments
variables represent consistent state valid transition states. (See Kautz &
Selman, 1992; van Beek & Chen, 1999 details formulation planning
CSP.)
Table 2: Time (seconds) solve instances grid planning problem. absence
entry indicates problem solved within 72000 seconds (20 hours)
CPU time.
dom+deg
GAC GAC-CBJ
0.66
0.68

1
2 762.47
3
.
4
.
.
5

dom/deg
GAC GAC-CBJ
1.58
0.86

33.33 3965.10
.

1753.13

.

.
.
.

321.17

.
.
.

experiments used 130 instances used First AI Planning Systems
Competition, June 6{9, 1998. instances come five different domains: gripper,
mystery, mprime, logistics, grid. experiments report, GAC GACCBJ based AC3 (Mackworth, 1977a) found give best performance.
gripper, mystery, mprime domains, instances could solved
25 seconds GAC GAC-CBJ. easy problems, increased
overhead CBJ rarely led savings, overall GAC 10-15% faster GAC-CBJ.
Table 2 shows comparison GAC GAC-CBJ solving 5 instances
grid problems. GAC-CBJ showed improvement grid problems. example,
solved problem 4 half hour, GAC failed find solution 20 hours.
Table 3 shows comparison GAC GAC-CBJ solving 30 instances
logistics problem. one third instances, GAC-CBJ improved GAC.
example, instances 18, 20 27, GAC-CBJ ran several orders magnitude faster
GAC, instance 15, GAC exhausted 20 hours time limit GAC-CBJ found
solution within 3 minutes. GAC-CBJ GAC performed similarly easier instances
sometimes GAC-CBJ 10% slower GAC.

75

fiChen & van Beek

Table 3: Time (seconds) solve instances logistics planning problem. absence
entry indicates problem solved within 72000 seconds (20
hours) CPU time.
dom+deg
GAC
GAC-CBJ
0.03
0.03
0.03
0.05

1
2
3
10.91
4
0.16
5
1.51
6
36.49
7
0.08
0.15
8
9
0.30
.
10
11
0.04
12
0.11
13
0.54
14
0.63
15
.
16
12.49
17
264.46
18 15382.82
1.29
19
20 6268.16
0.66
21
22
.
23
.
24
0.08
25
34.03
26
.
27 12239.26
28
.
29
.
30
.

0.86

dom/deg
GAC
GAC-CBJ
0.03
0.03
0.03
0.06

9.63

0.81

35.77

16.76

182.51
.
0.42
12.32
0.32 261.33
1165.54 15157.71

8540.58
0.41
0.32
1184.67

0.17
1.54

16.86

0.08
0.15
0.33
.
0.05
0.13
0.57
0.64

1.37

27.66

0.14
1.54
0.08
0.14
0.32
.
0.05
0.11
0.54
0.64

1.33

0.18
1.57
0.09
0.16
0.33
.
0.05
0.11
0.56
0.68

1.31

6125.87

28.55

47.06 12105.62

47.76

0.70
.
.
0.09
13.03
.
.
.
.

76

0.68
.
.
0.08
11.58
.
.
.
.

0.74
.
.
0.09
12.10
.
.
.
.

fiConflict-Directed Backjumping Revisited

5.3 Crossword Puzzle Problems

Crossword puzzle generation, one required fill grid words
dictionary, formulated CSP. formulation used experiments,
unknown words represented variable takes values dictionary.
Binary constraints enforce intersecting words agree intersecting letter
word dictionary appears solution. Figure 7 shows
example 5 5 crossword puzzle grid. CSP model grid 10 variables, 21 binary
\intersection" constraints, 13 \not equals" constraints.
1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

Figure 7: crossword puzzle.
experiments used 50 grids two dictionaries total 100 instances
problem ranged easy hard. grids, used 10 instances
following sizes: 55, 1515, 1919, 2121, 2323. dictionaries used
UK dictionary, collects 220,000 words largest domain
word variable contains 30,000 values, Linux dictionary, collects 45,000
words largest domain word variable 5,000 values.
experiments report, GAC GAC-CBJ based AC7 (Bessiere & Regin,
1997) found give best performance (see Sillito, 2000 discussion
integrating AC7 backtracking search).
Figure 8 shows approximate cumulative frequency curves empirical results,
plotting ratio time taken solve instance GAC time
taken solve instance GAC-CBJ. Thus, example, read curve
representing dom+deg variable ordering approximately 85% tests adding
CBJ little effect remaining 15% tests led orders magnitude
improvements. also read curves 0, 10, . . . , 100 percentiles data
sets (where value median 50th percentile value 50th test).
crossover point, GAC-CBJ starts perform well better GAC occurs
around 35th percentile. Tables 4 5 examine data closely showing
77

fiChen & van Beek

1000

ratio (GAC / GAC-CBJ)

dom+degree
dom/degree

100

10

1

0.1
10

20

30

40

50
test

60

70

80

90

100

Figure 8: Effect execution time GAC adding con ict-directed backjumping (GACCBJ). curve represents 100 tests instances crossword puzzle problem
tests ordered ratio time taken solve instance
GAC time taken solve instance GAC-CBJ.
actual times solve instances GAC performed best instances
GAC-CBJ performed best.
Table 4: GAC versus GAC-CBJ instances crossword puzzle problem. ten
best improvements time (seconds) GAC GAC-CBJ solve instance
presented.
dom+deg
rank GAC GAC-CBJ
1
1.21
1.35
2
1.10
1.20
3
6.12
6.53
4
0.78
0.81
5 110.23
114.52
68.67
71.28
6
7
47.16
48.42
8
32.69
33.63
9
25.17
26.08
21.37
10 20.73
78

dom/deg
GAC GAC-CBJ
1.11
1.23
0.95
1.02
1.16
1.24
56.66
60.36
1.30
1.37
4.86
5.11
0.22
0.23
14.23
14.76
74.38
77.52
7.43
7.67

fiConflict-Directed Backjumping Revisited

Table 5: GAC versus GAC-CBJ instances crossword puzzle problem. ten
best improvements time (seconds) GAC-CBJ GAC solve instance
presented. absence entry indicates problem solved
within 36000 seconds (10 hours) CPU time.
dom+deg
dom/deg
rank GAC GAC-CBJ GAC GAC-CBJ
1
.
37.85
.
54.60
2
.
41.43 10311.32
33.43
3
.
67.07
.
225.92
4
.
82.58
.
244.81
.
276.00
.
308.04
5
.
542.80
.
374.72
6
7
.
939.71
.
832.68
8 2716.86
115.87
.
1486.43
9
390.91
34.90
.
1890.24
10
.
3336.37
.
3411.83

summary, smaller, easier crossword puzzle instances GAC slightly
faster GAC-CBJ, many puzzles noticeable difference,
larger, harder puzzles GAC-CBJ orders magnitude faster GAC.

6. Conclusion

paper, presented three main results. First, showed choice dynamic
variable ordering heuristic weaken effects backjumping technique. Second,
showed level local consistency maintained backtracking
search increased, less backjumping improvement. Together
results partially explain backtracking algorithm look-ahead phase
cannot benefit backjumping look-back scheme extend partial
ordering backtracking algorithms presented Kondrak van Beek (1997) include
backtracking algorithms CBJ hybrids maintain levels local consistency
beyond forward checking. Third, finally, showed adding CBJ backtracking
algorithm maintains generalized arc consistency (still) speed algorithm
several orders magnitude hard, structured problems. Throughout paper,
restrict binary CSPs.

Acknowledgements
authors wish thank referees careful reading previous version
paper helpful comments. financial support Canadian Government
NSERC program gratefully acknowledged.
79

fiChen & van Beek

References

Bacchus, F., & Grove, A. (1999). Looking forward constraint satisfaction algorithms.
Unpublished manuscript.
Bacchus, F., & van Run, P. (1995). Dynamic variable ordering CSPs. Proceedings
First International Conference Principles Practice Constraint Programming,
pp. 258{275, Cassis, France. Available as: Springer Lecture Notes Computer Science
976.
Bayardo Jr., R. J., & Schrag, R. (1996). Using CSP look-back techniques solve exceptionally hard SAT instances. Proceedings Second International Conference
Principles Practice Constraint Programming, pp. 46{60, Cambridge, Mass.
Available as: Springer Lecture Notes Computer Science 1118.
Bayardo Jr, R. J., & Schrag, R. C. (1997). Using CSP look-back techniques solve realworld SAT instances. Proceedings Fourteenth National Conference Artificial Intelligence, pp. 203{208, Providence, RI.
Bessiere, C., & Regin, J.-C. (1996). MAC combined heuristics: Two reasons forsake
FC (and CBJ?) hard problems. Proceedings Second International Conference Principles Practice Constraint Programming, pp. 61{75, Cambridge,
Mass.
Bessiere, C., & Regin, J.-C. (1997). Arc consistency general constraint networks: Preliminary results. Proceedings Sixteenth International Joint Conference
Artificial Intelligence, pp. 398{404, Nagoya, Japan.
Bruynooghe, M. (1981). Solving combinatorial search problems intelligent backtracking.
Information Processing Letters, 12, 36{39.
Chen, X. (2000). Theoretical Comparison Selected CSP Solving Modeling Techniques. Ph.D. thesis, University Alberta.
Dechter, R. (1990). Enhancement schemes constraint processing: Backjumping, learning,
cutset decomposition. Artificial Intelligence, 41, 273{312.
Dechter, R. (1992). Constraint networks. Shapiro, S. C. (Ed.), Encyclopedia Artificial
Intelligence, 2nd Edition, pp. 276{285. John Wiley & Sons.
Freuder, E. C. (1978). Synthesizing constraint expressions. Comm. ACM, 21, 958{966.
Frost, D., & Dechter, R. (1994). Dead-end driven learning. Proceedings Twelfth
National Conference Artificial Intelligence, pp. 294{300, Seattle, Wash.
Gaschnig, J. (1978). Experimental case studies backtrack vs. Waltz-type vs. new algorithms satisficing assignment problems. Proceedings Second Canadian
Conference Artificial Intelligence, pp. 268{277, Toronto, Ont.
Haralick, R. M., & Elliott, G. L. (1980). Increasing tree search eciency constraint
satisfaction problems. Artificial Intelligence, 14, 263{313.
Kautz, H., & Selman, B. (1992). Planning satisfiability. Proceedings 10th
European Conference Artificial Intelligence, pp. 359{363, Vienna.
80

fiConflict-Directed Backjumping Revisited

Kondrak, G., & van Beek, P. (1997). theoretical evaluation selected backtracking
algorithms. Artificial Intelligence, 89, 365{387.
Mackworth, A. K. (1977a). Consistency networks relations. Artificial Intelligence, 8,
99{118.
Mackworth, A. K. (1977b). reading sketch maps. Proceedings Fifth International Joint Conference Artificial Intelligence, pp. 598{606, Cambridge, Mass.
McGregor, J. J. (1979). Relational consistency algorithms application finding
subgraph graph isomorphisms. Inform. Sci., 19, 229{250.
Montanari, U. (1974). Networks constraints: Fundamental properties applications
picture processing. Inform. Sci., 7, 95{132.
Nadel, B. A. (1989). Constraint satisfaction algorithms. Computational Intelligence, 5,
188{224.
Prosser, P. (1993a). Domain filtering degrade intelligent backtracking search. Proceedings Thirteenth International Joint Conference Artificial Intelligence,
pp. 262{267, Chambery, France.
Prosser, P. (1993b). Hybrid algorithms constraint satisfaction problem. Computational Intelligence, 9, 268{299.
Prosser, P. (1995). MAC-CBJ: Maintaining arc consistency con ict-directed backjumping. Research report 177, University Strathclyde.
Sabin, D., & Freuder, E. C. (1994). Contradicting conventional wisdom constraint satisfaction. Proceedings 11th European Conference Artificial Intelligence,
pp. 125{129, Amsterdam.
Schiex, T., & Verfaillie, G. (1994). Nogood recording static dynamic constraint
satisfaction problems. International Journal Artificial Intelligence Tools, 3, 1{15.
Sillito, J. (2000). Improving Estimating Cost Backtracking Algorithms CSPs..
MSc thesis, University Alberta, 2000.
Smith, B. M., & Grant, S. A. (1995). Sparse constraint graphs exceptionally hard problems. Proceedings Fourteenth International Joint Conference Artificial
Intelligence, pp. 646{651, Montreal.
van Beek, P., & Chen, X. (1999). CPlan: constraint programming approach planning.
Proceedings Sixteenth National Conference Artificial Intelligence, pp.
585{590, Orlando, Florida.

81

fiJournal Artificial Intelligence Research 14 (2001) 137-166

Submitted 9/00; published 4/01

Reasoning within Fuzzy Description Logics
Umberto Straccia

straccia@iei.pi.cnr.it

I.E.I - C.N.R., Via G. Moruzzi, 1
I-56124 Pisa (PI), ITALY

Abstract
Description Logics (DLs) suitable, well-known, logics managing structured
knowledge. allow reasoning individuals well defined concepts, i.e. set
individuals common properties. experience using DLs applications
shown many cases would like extend capabilities. particular,
use context Multimedia Information Retrieval (MIR) leads convincement
DLs allow treatment inherent imprecision multimedia object
content representation retrieval.
paper present fuzzy extension ALC, combining Zadehs fuzzy logic
classical DL. particular, concepts becomes fuzzy and, thus, reasoning
imprecise concepts supported. define syntax, semantics, describe
properties present constraint propagation calculus reasoning it.

1. Introduction
representation uncertainty imprecision received considerable attention
Artificial Intelligence community attempt extend existing knowledge representation systems deal imperfect nature real world information (which likely
rule rather exception). impressive work carried last
decades, resulting number concepts investigated, number problems
identified number solutions developed (Bacchus, 1990; Dubois & Prade, 1996;
Kruse, Schwecke, & Heinsohn, 1991; Pearl, 1988).
knowledge representation formalisms, First-Order Logic (FOL)
basis: basic units individuals, properties, relationship
naturally capture way people encode knowledge. Unfortunately,
severely limited (i) ability represent uncertainty world due
lack knowledge real world fact estimated true e.g.
probability degree; (ii) ability represent inherently imprecise knowledge
indeed, concepts, like hot, exact definition exists and, thus, fact
like 35 Celsius hot, rather true false, truth-value true
false.
last decade substantial amount work carried context
Description Logics (DLs).1 DLs logical reconstruction so-called frame-based
knowledge representation languages, aim providing simple well-established
Tarski-style declarative semantics capture meaning popular features
structured representation knowledge. main point DLs considered
1. Description Logics also referred Terminological Logics, Concept Logics, KL-ONE-like
languages. web page description logic community found address http://dl.kr.org/dl.
c
2001
AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiStraccia

attractive logics knowledge based applications good compromise
expressive power computational complexity.
Nowadays, whole family knowledge representation systems build using DLs,
differ respect expressiveness, complexity completeness
algorithms, used building variety applications (Peltason,
1991; Brachman, 1992; Baader & Hollunder, 1991a; Horrocks, 1998).
Experience using DLs applications also shown many cases would
like extend representational reasoning capabilities them. particular, use
DLs context Multimedia Information Retrieval (MIR) points necessity
extending DLs capabilities allow treatment inherent imprecision
multimedia object representation retrieval (Meghini & Straccia, 1996; Meghini, Sebastiani, & Straccia, 1997, 1998). fact, classical DLs insufficient describing real
multimedia retrieval situations, retrieval usually yes-no question: (i)
representations multimedia objects content queries system (and logic)
access inherently imperfect; (ii) relevance multimedia object
query thus established limited degree. this, need logic
which, rather deciding tout court whether multimedia object satisfies query
not, able rank retrieved objects according strongly system believes
relevance query.
end, extend DLs fuzzy capabilities. choice fuzzy set theory
way endowing DL capability deal imprecision uncommon
(da Silva, Pereira, & Netto, 1994; Tresp & Molitor, 1998; Yen, 1991) motivated
semantics point view, fuzzy logics capture notion imprecise concept,
i.e. concept clear precise definition possible. Fuzzy concepts
play key role e.g. content descriptions multimedia objects (most humans
concepts imprecise). instance, context images, (semantic) content
image region r may described means fuzzy statement like r
Ferrari establish sentence truth-value 0.8, i.e. r likely
Ferrari;
proof theoretical point view, exist well-known techniques reasoning fuzzy logics (Chen & Kundu, 1996; Lee, 1972; Xiachun, Yunfei, & Xuhua,
1995).
following present quite general fuzzy DL, sense based
DL ALC, significant expressive representative various DLs. allows
us adapt easily different DLs presented literature. Another important
point show additional expressive power impact
computational complexity point view. certainly important nice tradeoff computational complexity expressive power DLs contributes
popularity.
Note fuzzy extension management imprecise knowledge complementary DL extensions management uncertainty, e.g. probabilistic extension
(Heinsohn, 1994; Jager, 1994; Koller, Levy, & Pfeffer, 1997; Sebastiani, 1994) exceptions like shown Hollunder (1994) possibilistic DL considered. Even
138

fiReasoning within Fuzzy DLs

though probabilistic extensions enlarge applicability DLs address
issue reasoning individuals imprecise concepts, imprecise knowledge
uncertain knowledge orthogonal (Dubois & Prade, 1994). Moreover, reasoning
probabilistic framework generally harder task, computational point view,
relative non probabilistic case cases complete axiomatization missing
(Halpern, 1990; Roth, 1996). consequence, computational problems
addressed carefully (Koller et al., 1997).
proceed follows. following section first introduce ALC. Section 3
extend ALC fuzzy case discuss properties Section 4, Section 5
present constraint propagation calculus reasoning it. Section 6 concludes
presents topics research.

2. Quick Look ALC
specific DL extend fuzzy capabilities ALC, significant representative
DLs. first, introduce classical ALC, Section 3 fuzzy extension
ALC presented.
assume three alphabets symbols, called primitive concepts (denoted A), primitive roles (denoted R) individuals (denoted b).2
2.1 Concept Role
Concepts expressions collect properties, described means roles, set
individuals. FOL point view, concepts seen unary predicates, whereas
roles interpreted binary predicates.
concept (denoted C D) language ALC build primitive concepts
according following syntax rules:
C,

>|
|
A|
C u D|
C D|
C|
R.C|
R.C

(top concept)
(bottom concept)
(primitive concept)
(concept conjunction)
(concept disjunction)
(concept negation)
(universal quantification)
(existential quantification).

2.2 Interpretation
DLs clean, model-theoretic semantics, based notion interpretation.
interpretation pair = (I , ) consisting non empty set (called domain)
interpretation function mapping different individuals different elements
(called unique name assumption), primitive concepts subsets primitive
roles subsets . interpretation complex concepts defined usual:
2. work assume every metavariable optional subscript superscript.

139

fiStraccia

>I

(C u D)I
(C D)I
(C)I
(R.C)I
(R.C)I

=
=
=
=
=
=
=



C DI
C DI
\ C
{d : d0 .(d, d0 ) 6 RI d0 C }
{d : d0 .(d, d0 ) RI d0 C }.

Note concept C role R mapped equivalent open first-order
formula FC (x) FR (x, y), respectively:
F> (x) =

(1)

F (x) = F

(2)

FA (x) = A(x)

(3)

FR (x, y) = R(x, y)

(4)

FCuD (x) = FC (x) FD (x)

(5)

FCtD (x) = FC (x) FD (x)

(6)

FC (x) = FC (x)

(7)

FR.C (x) = y.FR (x, y) FC (y)

(8)

FR.C (x) = y.FR (x, y) FC (y),

(9)

F two formulae representing truth-value true false, respectively
(e.g. = p p F = p p, letter p).
Two concepts C said equivalent (denoted C D) C = DI
interpretations I. Note that, e.g. > ; C u (C D), (R.C)
(R.C).
2.3 Assertion
assertion (denoted ) expression type a:C (a C, also instance
C), expression type (a, b):R ((a, b) R, also (a, b) instance R).
instance, tom:Tall u Student asserts Tom tall student, whereas (tim, tom):Friend
asserts Tom friend Tim. primitive assertion either assertion
form a:A, primitive concept, assertion form (a, b):R.
semantics point view, interpretation satisfies a:C (resp. (a, b):R) iff aI C (resp.
(aI , bI ) RI ).
2.4 Terminological Axiom
terminological axiom (denoted ) either concept specialisation concept definition. concept specialisation expression form A<C, primitive
concept C concept. specialisation allows stating existence specialisation (more specific than) relation concepts. instance, Ferrari<SportCar u
140

fiReasoning within Fuzzy DLs

Ownedby.CarFanatic states Ferrari sport car owned car fanatic.
hand, concept definition expression form A: = C,
primitive concept C concept. concept definition allows stating
equivalence concepts. instance, Tennis: = SportKind u (HasSportTool.>) u
(HasSportTool.TennisRacket) states tennis identified kind sport
tennis racket sport tool. semantics point view, interpretation satisfies
concept specialisation A<C iff AI C . Similarly, interpretation satisfies concept
definition A: = C iff AI = C .
2.5 Knowledge Base, Entailment Subsumption
finite set K assertions terminological axioms called Knowledge Base (KB).
KA denote set assertions K, whereas KT denote set
terminological axioms K, also called terminology. KB K purely assertional
KT = . Further, assume terminology KT concept appears
left hand side terminological axiom KT cyclic
definitions present KT .3
say interpretation satisfies (is model ) KB K iff satisfies
element K. KB K entails assertion (denoted K |= ) iff every model K
also satisfies . Furthermore, let KT terminology let C, two concepts.
say subsumes C respect (w.r.t.) KT (denoted C vKT D) iff every
model KT , C DI holds.
problem determining whether K |= called entailment problem; problem determining whether C vKT called subsumption problem; problem
determining whether K satisfiable called satisfiability problem.
well known (Buchheit, Donini, & Schaerf, 1993a; Donini, Lenzerini, Nardi, &
Schaerf, 1994; Nebel, 1990) ALC
K |= (a, b):R iff (a, b):R K
K |= a:C iff K {a:C} satisfiable
C v iff a:C |= a:D, new
0

C vKT iff C v

0

(10)
(11)
(12)
(13)

C 0 D0 build C expanding terminology KT KT00
substituting every primitive concept occurring C D, defined KT00 ,
defining term KT00 . expansion KB K works follows (Nebel, 1990).
1. Elimination concept specialisation: concept specialisation A<C KT replaced concept definition A: = C u , new primitive concept.
stands absent part definition A. Let KT0 terminology,
obtained replacing concept specialisation concept definitions.
3. say directly uses primitive concept B KT , KT left
hand side B occurs right hand side . Let uses transitive closure relation
directly uses KT . KT cyclic iff uses KT .

141

fiStraccia

2. Expansion KT0 : every defined concept (i.e. first argument concept definition)
occurs defining term concept definition (i.e. second argument
concept definition) substituted defining term. process iterated
remain undefined concepts second arguments concept definitions.
yields terminology KT00 .
3. Expansion KA : every primitive concept occurring KA defined KT00
0 .
substituted defining term KT00 . yields KA
0 |= 0 , 0 obtained
transformation nice property K |= iff KA
replacing every primitive concept occurring , defined KT00 , defining
term KT00 . allows us restrict attention purely assertional KBs only,
worth noting expansion process exponential (Nebel, 1988).
(10)(13), follows problems reduced satisfiability
problem. exists well known technique based constraint propagation solving
problem (Schmidt-Schau & Smolka, 1991; Buchheit, Donini, & Schaerf, 1993b; Donini
et al., 1994).
conclude example.

Example 1 Consider following terminology KT .
SportKind
<
SportTool
<
IndividualSport <
TeamSport
<
Basketball
<
TennisRacket
<
Basket
:=

Tennis

>
>
SportKind
SportKind
SportTool
SportTool
SportKindu
(KindOfSport.>)u
(KindOfSport.TeamSport)u
(HasSportTool.>)u
(HasSportTool.Basketball)
: = SportKindu
(KindOfSport.>)u
(KindOfSport.IndividualSport)u
(HasSportTool.>)u
(HasSportTool.TennisRacket)

Suppose two video sequences v1, v2, basket tennis, respectively. may represent semantic content
Kv1 = {v1:Video u About.Basket}
Kv2 = {v2:Video u About.Tennis}.
Consider K = KT Kv1 Kv2 . interested retrieving videos sport, may
query K query concept Q = Video u About.SportKind answer
list containing v1 v2, K |= v1:Q K |= v2:Q hold.
142

fiReasoning within Fuzzy DLs

hand, looking individual sport videos, then, given query
concept Q0 = Video u About.KindOfSport.IndividualSport, follows video v2
retrieved. fact, K|=
6 v1:Q0 K |= v2:Q0 hold.
2

3. Fuzzy DL
fuzzy extension directly relates Zadehs work fuzzy sets (Zadeh, 1965). fuzzy set
respect universe U characterised membership function : U [0, 1],
assigning S-membership degree, (u), element u U . (u) gives us
estimation belonging u S. Typically, (u) = 1 u definitely belongs
S, (u) = 0.8 means u likely element S. Moreover, according
Zadeh, membership function satisfy three well known restrictions: u U
fuzzy sets S1 , S2 respect U
S1 S2 (u) = min{S1 (u), S2 (u)}
S1 S2 (u) = max{S1 (u), S2 (u)}
S1 (u)
= 1 S1 (u) ,
S1 complement S1 U . Alternative restrictions membership functions
proposed literature, aim investigate (the
interested reader may consult e.g. Dubois & Prade, 1980).
justification choice min max given Bellman Giertz
(1973), shown certain reasonable conditions min max
unique possible choice set intersection set union, respectively.
switch fuzzy logics, notion degree membership (u) element
u U w.r.t. fuzzy set U regarded truth-value statement u
S. Accordingly, fuzzy DL, (i) concept C, rather interpreted
classical set, interpreted fuzzy set and, thus, concepts become imprecise; and,
consequently, (ii) statement C, i.e. a:C, truth-value [0, 1] given
degree membership individual member fuzzy set C.
3.1 Fuzzy Interpretation
fuzzy interpretation pair = (I , ), is, crisp case,
domain, whereas interpretation function mapping
1. individuals crisp case, i.e. aI 6= bI , 6= b;
2. concept C membership function C : [0, 1];
3. role R membership function RI : [0, 1].
C concept C naturally interpreted membership degree function
fuzzy concept (set) C w.r.t. I, i.e. object domain
C (d) gives us degree object element fuzzy concept C
interpretation I. Similarly roles. Additionally, interpretation function
satisfy following equations: ,
143

fiStraccia

>I (d)
(d)
(C u D)I (d)
(C D)I (d)
(C)I (d)
(R.C)I (d)
(R.C)I (d)

=
=
=
=
=
=
=

1
0
min{C (d), DI (d)}
max{C (d), DI (d)}
1 C (d)
inf d0 {max{1 RI (d, d0 ), C (d0 )}}
supd0 {min{RI (d, d0 ), C (d0 )}}.

equations standard interpretation conjunction, disjunction, negation
quantification, respectively (see Lee, 1972; Tresp & Molitor, 1998).
Note semantics R.C
(R.C)I (d) = supd0 {min{RI (d, d0 ), C (d0 )}}

(14)

result viewing R.C open first order formula y.FR (x, y) FC (y) (see (9))
existential quantifier viewed disjunction elements domain.
Similarly,
(R.C)I (d) = inf d0 {max{1 RI (d, d0 ), C (d0 )}}

(15)

related open first order formula y.FR (x, y) FC (y) (see (8)), universal
quantifier viewed conjunction elements domain.
say two concepts C said equivalent (denoted C
= D)
C = DI interpretations I. crisp non fuzzy case, dual relationships
concepts hold: e.g. >
= , (C u D)
= (C D) (R.C)
= (R.C).
3.2 Fuzzy Assertion
fuzzy assertion (denoted ) expression one following form h ni
h mi, ALC assertion, n (0, 1] [0, 1). semantics point
view, fuzzy assertion h ni constrains truth-value less equal n
(similarly ). Consequently, e.g. hv1:Video u About.Basket 0.8i states video v1
likely basket. Formally, interpretation satisfies fuzzy assertion ha:C ni (resp.
h(a, b):R ni) iff C (aI ) n (resp. RI (aI , bI ) n). Similarly, interpretation satisfies
fuzzy assertion ha:C ni (resp. h(a, b):R ni) iff C (aI ) n (resp. RI (aI , bI ) n).
Two fuzzy assertions 1 2 said equivalent (denoted 1
= 2 ) iff
satisfied set interpretations. Notice combination ha:C mi
ha:C ni, n, restricts truth-value a:C [m, n]. Moreover,
ha:C ni
= ha:C 1 ni. primitive fuzzy assertion fuzzy assertion involving
primitive assertion.
One might wonder allow expressions form h > ni form
h < ni. reason simply relies observation quite hard imagine
situations able assert strict >, < relations. leave
ease.4
4. course, whole easily extended case would like consider two types assertions
too.

144

fiReasoning within Fuzzy DLs

Note work Straccia (1998), fuzzy assertion form h ni
allowed.
3.3 Fuzzy Terminological Axiom
Fuzzy terminological axioms consider natural extension classical terminological axioms fuzzy case. syntax point view, fuzzy terminological axiom
(denoted ) either fuzzy concept specialisation fuzzy concept definition. fuzzy
concept specialisation expression form AC, primitive concept
C concept. hand, fuzzy concept definition expression
form A: C, primitive concept C concept. semantics point
view, consider natural extension classical set inclusion fuzzy case (Zadeh,
1965). fuzzy interpretation satisfies fuzzy concept specialisation AC iff
, AI (d) C (d),

(16)

whereas satisfies fuzzy concept definition A: C iff
, AI (d) = C (d).

(17)

Note work Straccia (1998) fuzzy specialisation non-standard. Indeed, Straccia (1998) considered fuzzy specialisations form hA C ni
(A C)I = mindI {max{1 AI (d), C (d)}}. drawback formulation
clear n hA C ni comes from, i.e. defines value n
determined. prefer rely standard interpretation fuzzy subsets.
3.4 Fuzzy Knowledge Base, Fuzzy Entailment Fuzzy Subsumption
fuzzy knowledge base finite set fuzzy assertions fuzzy terminological axioms.
crisp case, denote set fuzzy assertions ,
denote set fuzzy terminological axioms (the terminology), =
purely assertional, assume terminology concept
appears left hand side fuzzy terminological axiom
cyclic definitions present .
interpretation satisfies (is model ) set fuzzy iff satisfies element
. fuzzy KB fuzzy entails fuzzy assertion (denoted |) iff every model
also satisfies .
Furthermore, let terminology let C, two concepts. say
fuzzy subsumes C w.r.t. (denoted C D) iff every model ,
, C (d) DI (d) holds.
Finally, given fuzzy KB assertion , interest compute best
lower upper truth-value bounds. end define greatest lower bound
w.r.t. (denoted glb(, )) sup{n : |h ni}. Similarly, define
least upper bound respect (denoted lub(, )) inf{n : |h ni}
(sup = 0, inf = 1). Determining lub glb called Best Truth-Value Bound
(BTVB) problem.
145

fiStraccia

4. Properties
section discuss properties fuzzy logic. Several properties described
Straccia (2000b) propositional case easily extended first order case too.
4.1 Concept Equivalence
C u>=
C, C > =
>, Cu =,
Ct =
C,
first ones straightforward: > =,




C = C, (C uD) = C tD, (C tD) = C uD, C1 u(C2 tC3 ) = (C1 uC2 )t(C1 uC3 )
C1 (C2 u C3 )
= (C1 C2 ) u (C1 C3 ). concepts involving roles, R.C
=



R.C, R.> = >, R. = (R.C) u (R.D) = R.(C u D). Please, note

C u C
6
=
=, C C
= > and, thus, (R.C) u (R.C)

(R.C) (R.C) 6
= > hold. general say (C u C) (d) 0.5,
interpretation and, similarly, (C C)I (d) 0.5, i.e. lub(, a:C u C) = 0.5
glb(, a:C C) = 0.5, respectively.
4.2 Entailment Relation
course, |h ni iff glb(, ) n, similarly |h ni iff lub(, ) n hold.
Concerning roles, note |h(a, b):R ni iff h(a, b):R mi n. Therefore,
glb(, R(a, b)) = max{n : hR(a, b) ni }

(18)

true case. h(a, b):R mi n imply
|h(a, b):R ni, converse false (e.g. {ha:R.A 1i, hb:A 0i}|h(a, b):R 0i)).
Furthermore, |ha:C ni iff |ha:C 1 ni,
1 lub(, C(a)) =
=
=
=
=

1 inf{n : |ha:C ni}
sup{1 n : |ha:C ni}
sup{n : |ha:C 1 ni}
sup{n : |ha:C ni}
glb(, a:C).

follows. Therefore,
lub(, a:C) = 1 glb(, a:C),

(19)

i.e. lub determined glb (and vice-versa). reduction glb
hold lub(, (a, b):R) (a, b):R expression language.5
Modus ponens concepts supported: > 1n {ha:C mi, ha:C ni}|
ha:D ni holds.
Modus ponens roles supported: > 1 n {h(a, b):R mi, ha:R.D ni}
|ha:D ni {ha:R.C mi, ha:R.D ni} |ha:R.(C u D) min{n, m}i hold. Moreover, {ha:R.C mi, ha:R.D ni} |ha:R.(C u D) min{n, m}i holds.
Modus ponens specialisation supported. following degree bounds propagation
taxonomy supported. C (i) {ha:C ni}|ha:D ni;
(ii) {ha:D ni}|ha:C ni hold.
5. course, lub(, (a, b):R) = 1 glb(, (a, b):R) holds, (R)I (d, d0 ) = 1 RI (d, d0 ).

146

fiReasoning within Fuzzy DLs

Note that, according Straccia (1998)
> 1 n {ha:A mi, hA C ni}|ha:C ni.
drawback property whatever degree (as long > 1 n),
ha:A mi hA C ni infer ha:C ni, n priori fixed value.
4.3 Soundness Semantics
fuzzy semantics sound w.r.t. crisp semantics. fact, let fuzzy KB
h(a, b):R ni occurs. leave fuzzy assertions out, role negation present
crisp ALC. Let us consider following transformation ]() fuzzy assertions
assertions, ]() takes crisp assertional part fuzzy assertion:
]h ni 7
]ha:C ni 7 a:C.
extend ]() fuzzy terminological axioms follows: ] = . Finally, ] = {] :
} {] : }.
quite easily verify
Proposition 1 Let fuzzy KB h(a, b):R ni occurs let fuzzy
assertion h ni. |h ni ] |= ] (i.e. cannot fuzzy entailment
without entailment ALC).

Proof: Consider classical interpretation satisfying ]. also fuzzy interpretation
C (d) {0, 1}, RI (d, d0 ) {0, 1} hold. induction structure
concept C shown (classically) satisfies a:C iff C (aI ) = 1. Similarly
roles. Therefore, fuzzy interpretation satisfying . hypothesis, satisfies h ni
n > 0. Therefore, truth-value 1, i.e. satisfies . 2
general case, satisfiable h(a, b):R ni may introduce inconsistency,
e.g. {h(a, b):R 0.3i, h(a, b):R 0.4i}|ha:A 1i, {(a, b):R} 6|= a:A}.
converse Proposition 1 hold general.
Example 2 Let set = {ha:A B 0.6i, ha:A 0.3i}. follows ] =
{a:(A B), a:A} unsatisfiable. Therefore, easily verified ] |= a:B,
|
6 ha:B ni, n > 0.
2
restrict attention normalised fuzzy assertions, converse relation follows
immediately (Lee, 1972; Straccia, 2000b).
Indeed, say fuzzy assertion KB-normalised iff
1. h ni n > 0.5;
2. h ni n < 0.5.
say fuzzy assertion query-normalised iff
147

fiStraccia

1. h ni n 0.5;
2. h ni n 0.5.
Note definitions KB-normalisation query-normalisation dual.
following proposition follows (Lee, 1972; Straccia, 2000b) relies fact
h ni h mi together inconsistent, n > 0.5 < 0.5. particular,
Straccia (2000b) shows normalised fuzzy propositional KB
query-normalised fuzzy proposition, | iff ] |= ]. proof given
showing deduction proving | deduction proving ] |= ]
build vice-versa. extension case straightforward e.g. n, > 0.5,
ha:R.C ni,h(a, b):R mi|hb:C ni iff a:R.C, (a, b):R |= b:C holds (the firstorder cases involving similar).
Proposition 2 Let fuzzy KB h(a, b):R ni occurs
KB-normalised. Let query-normalised fuzzy assertion. | iff ] |= ].
Example 3 Let set = {ha:A u B 0.4i, ha:A 0.6i}. Let ha:B 0.7i.
fuzzy assertion KB-normalised query-normalised. follows
] = {a:(A u B), a:A} ] = a:B. easily verified | ] |= ],
thereby confirming Proposition 2.
2
4.4 Subsumption
first, classical case method seen before, subsumption
two concepts C w.r.t. terminology , i.e. C D, reduced
case empty terminology, i.e. C 0 D0 .
Example 4 Suppose two images i1 i2 snapshot car traffic
major street European city. underlying image analysis tool recognizes, among
recognised objects, image i1 Ferrari, image i2
Porsche. Furthermore, semantic image indexing tool establishes that, degree n
image i1 Ferrari, whereas degree image i2 Porsche. Please
note that, weight keyword text quantitative description aboutness
text w.r.t. keyword, truth-degree gives quantitative description aboutness
images w.r.t. object, i.e. aboutness handled imprecise concept. So, let
us consider
= {hi1:About.Ferrari 0.6i, hi2:About.Porsche 0.8i,
FerrariCar, PorscheCar}.
axioms specify Ferrari Porsche car. According
expansion process, replaced
0 = {hi1:About.Ferrari 0.6i, hi2:About.Porsche 0.8i,
Ferrari: Car u Ferrari , Porsche: Car u Porsche },
simplified
148

fiReasoning within Fuzzy DLs

00 = {hi1:About.(Car u Ferrari ) 0.6i,
hi2:About.(Car u Porsche ) 0.8i}.
Now, looking images cars, may infer |
hi1:About.Car 0.6i |hi2:About.Car 0.8i. Furthermore, easily verified
00 | hi1:About.Car 0.6i 00 |hi2:About.Car 0.8i hold well. Indeed,
fuzzy assertion , | iff 00 | holds.
2
conclude section analogue Example 1 fuzzy case..
Example 5 Consider terminology KT query concept Q Example 1. Let
us define fuzzy KB derived KT terminological axiom
replaced fuzzy terminological axiom . Moreover, let us suppose
underlying semantic video indexing tool furnishes following semantic descriptions
two videos v1 v2.
v1 = {hv1:Video 1i, hv1:About.Basket 0.9i}
v2 = {hv2:Video 1i, hv2:About.Tennis 0.6i},
i.e. video v1 basket degree 0.9, whereas video v2 tennis degree
0.6. Let us consider = v1 v2 . easily verified glb(, v1:Q) = 0.9,
whereas glb(, v2:Q) = 0.6 hold. Therefore, video v1 ranked video v2
retrieval process.
2

5. Decision Algorithms Fuzzy ALC
Deciding whether |h ni |h mi requires calculus. Without loss generality
consider purely assertional fuzzy KBs only.
develop calculus style constraint propagation method,
method usually proposed context DLs (Buchheit et al., 1993a). calculus
extends fuzzy propositional calculus described Chen Kundu (1996)
Straccia (2000b) fuzzy DL case. first address entailment problem,
subsumption problem finally BTVB problem. subsumption problem
BTVB problem reduced entailment problem.
5.1 Decision Procedure Entailment Problem
Consider new alphabet ALC variables. interpretation extended variables
mapping elements interpretation domain. ALC object (denoted w)
either individual variable.6
constraint (denoted ) expression form w:C (w, w0 ):R, w, w0
objects, C ALC concept R role. fuzzy constraint (denoted )
expression one following four forms: h ni, h > ni, h ni, h < ni. Note
assertions fuzzy assertions constraints fuzzy constraints, respectively.
6. following, ambiguity, ALC variables ALC objects called variables objects,
respectively.

149

fiStraccia

definitions satisfiability constraint, fuzzy constraint, set constraints,
set fuzzy constraints, primitive constraint primitive fuzzy constraint obvious.
quite easily verified fuzzy entailment problem reduced
unsatisfiability problem set fuzzy constraints:
|h ni

iff

{h < ni} satisfiable

(20)

|h ni

iff

{h > ni} satisfiable.

(21)

calculus, determining whether finite set fuzzy constraints satisfiable not,
based set constraint propagation rules transforming set fuzzy constraints
simpler satisfiability preserving sets Si either Si contain clash (indicating
Si model build) Si completed clash-free, is,
rule applied Si Si contains clash (indicating Si
model build).
set fuzzy constraints contains clash iff contains either one constraints
Table 1 contains conjugated pair fuzzy constraints. entry Table 2 says us
hw: ni, n > 0
hw:> ni, n < 1
hw: > ni, hw:> < ni, hw:C < 0i, hw:C > 1i
Table 1: Clashes

h ni
h > ni

h < mi h mi
nm
n>m
nm
nm

Table 2: Conjugated Pairs
condition row-column pair fuzzy constraints conjugated pair. Given
fuzzy constraint , c indicate conjugate (if exists one). Notice
conjugate fuzzy constraint may unique, could infinitely many.
instance, ha:C < 0.6i ha:C 0.7i conjugates ha:C 0.8i.
Concerning rules, connective u, t, , , rule relation , >
, , <, i.e. 20 rules. rules form:


(22)

sequences fuzzy constraints condition. rule fires
condition holds, current set fuzzy constraints contains fuzzy constraints
matching precondition consequence already S. firing,
constraints added S. rules following:
150

fiReasoning within Fuzzy DLs

( )

hw:C ni hw:C 1 ni

(> )

hw:C > ni hw:C < 1 ni

( )

hw:C ni hw:C 1 ni

(< )

hw:C < ni hw:C > 1 ni

(u )

hw:C u ni hw:C ni, hw:D ni

(u> )

hw:C u > ni hw:C > ni, hw:D > ni

(t )

hw:C ni hw:C ni, hw:D ni

(t< )

hw:C < ni hw:C < ni, hw:D < ni

(t )

hw:C ni hw:C ni | hw:D ni

(t> )

hw:C > ni hw:C > ni | hw:D > ni

(u )

hw:C u ni hw:C ni | hw:D ni

(u< )

hw:C u < ni hw:C < ni | hw:D < ni

( )

hw1 :R.C ni, c hw2 :C ni
h(w1 , w2 ):R 1 ni

(> )

hw1 :R.C > ni, c hw2 :C > ni
h(w1 , w2 ):R < 1 ni

( )

hw1 :R.C ni, c hw2 :C ni
h(w1 , w2 ):R ni

(< )

hw1 :R.C < ni, c hw2 :C < ni
h(w1 , w2 ):R < ni

( )

hw:R.C ni h(w, x):R ni, hx:C ni
x new variable w0
h(w, w0 ):R ni hw0 :C ni already constraint set

(> )

hw:R.C > ni h(w, x):R > ni, hx:C > ni
x new variable w0
h(w, w0 ):R > ni hw0 :C > ni already constraint set

( )

hw:R.C ni h(w, x):R 1 ni, hx:C ni
x new variable w0
h(w, w0 ):R 1 ni hw0 :C ni already constraint set

(< )

hw:R.C < ni h(w, x):R > 1 ni, hx:C < ni
x new variable w0
h(w, w0 ):R > 1 ni hw0 :C < ni already constraint set
151

(23)

fiStraccia

Examples rule instances following:
( )

ha:R.C 0.7i, h(a, b):R 0.6i hb:C 0.7i
h(a, b):R 0.3i
c = h(a, b):R 0.6i conjugate

(< )

ha:R.C < 0.8i, h(a, b):R 0.9i hb:C < 0.8i
h(a, b):R < 0.8i
c = h(a, b):R 0.9i conjugate

( )

ha:R.C 0.8i h(w, x):R 0.8i, hx:C 0.8i
x new variable

(< )

ha:R.C < 0.8i h(w, x):R > 0.2i, hx:C < 0.8i
x new variable.

set fuzzy constraints said complete rule applicable it. complete
set fuzzy constraints S2 obtained set fuzzy constraints S1 applying
rules (23) called completion S1 . Due rules (t ), (t> ), (u ) (u< ),
one completion obtained. rules called nondeterministic rules.
rules called deterministic rules.
easily verified calculus termination property, i.e. completion finite set fuzzy constraints obtained finite number rule
applications.
Example 6 Let us consider following fuzzy KB:
= {ha:R.D 0.7i, ha:R.C 0.4i, h(a, b):R 0.5i, hb:C 0.2i, hb:D 0.3i}
Let assertion a:R.(D u C), let fuzzy assertion h 0.4i, whereas let 0
fuzzy assertion h 0.5i. easily verified |, whereas |
6 0 . show
0
|
6 , verifying clash-free completion = {ha:R.(D u C) < 0.5i}
(precisely, two them).
applying rules (23), following sequences.
(1)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
(9)
(10)

ha:R.D 0.7i
ha:R.C 0.4i
h(a, b):R 0.5i
hb:C 0.2i
hb:D 0.3i
ha:R.(D u C) < 0.5i
h(a, x):R 0.7i, hx:D 0.7i
hx:C 0.4i
hb:D u C < 0.5i
hx:D u C < 0.5i
1 | 2
152

Hypothesis:S

( ) : (1)
( ) : (2), (7)
(< ) : (3), (6)
(< ) : (6), (7)

fiReasoning within Fuzzy DLs

two sequences 1 2 defined follows: 1 two sequences
(11) hb:D < 0.5i (u< ) : (9)
(12) hx:D < 0.5i (u< ) : (10)
(13) clash
(7), (12)

(14) hx:C < 0.5i (u< ) : (10)
(15) clash-free

2 two sequences
(16) hb:C < 0.5i (u< ) : (9)
(17) hx:D < 0.5i (u< ) : (10)
(18) clash
(7), (17)

(19) hx:C < 0.5i (u< ) : (10)
(20) clash-free

2
Example 7 Consider Example 4 let us prove 00 |h(About.Car)(i1) 0.6i.
prove relation verifying completions = 00 {hi1:About.Car < 0.6i}
contain clash. fact, following sequence.
(1)
(2)
(3)
(4)
(5)
(6)
(7)

hi1:About.(Car u Ferrari ) 0.6i
Hypothesis:S
hi2:About.(Car u Porsche ) 0.8i
hi1:About.Car < 0.6i
h(i1, x):About 0.6i, hx:(Car u Ferrari ) 0.6i ( ) : (1)
hx:Car < 0.6i
(< ) : (3), (4)
(u) : (4)
hx:Car 0.6i, hx:Ferrari 0.6i,
clash
(5), (6)

2
Proposition 3 finite set fuzzy constraints satisfiable iff exists clash free
completion S.

Proof:
.) Given termination property, easily verified, case analysis,
rules sound, i.e. S1 satisfiable satisfiable completion S2
S1 and, thus, S2 contains clash. instance, let us show ( ) rule
sound. Assume interpretation satisfying hw1 :R.C ni h(w1 , w2 ):R mi,
> 1 n. Let us show satisfies hw2 :C ni. Since satisfies hw1 :R.C ni
follows max{1 RI (w1 , w2 ), C (w2 )} n. But, RI (w1 , w2 ) and, thus,
1 RI (w1 , w2 ) 1 < n. consequence, C (w2 ) n follows, i.e. satisfies
hw2 :C ni.
.) Suppose exists clash free completion 0 S. build 0
interpretation satisfying 0 and, 0 , satisfies S. called canonical model.
primitive constraint 0 , collect lower upper bound restrictions
0 follows: let
N [] = {n : h ni 0 }
N > [] = {n : h > ni 0 }
N [] = {n : h ni 0 }
N < [] = {n : h < ni 0 }.
153

fiStraccia

define constraint , satisfies constraints collected
sets N () []: given N [], truth value n
n max N [], whereas w.r.t. N > [], truth value n
n max N > [] + , > 0. Similarly, cases, instance, w.r.t. N < [],
truth value n n max N > [] , > 0.
two tables
N [] N > []
glb[, ]


0
0

6=
n +
6=

n
0
6=
6=
n > n n else n0 +
N [] N < []



6=
6=

6=
6=

lub[, ]
1
m0

< m0 else m0

define 0 > 0, lub[, ] glb[, ], lower upper bound constraints
satisfy. tables, n, n0 , m, m0 indicate max N [], max N > [],
min N [] min N < [], respectively. table distinguish four cases
sets empty (no constraints) not. instance, constraint w:A,
hw:A 0.3i, hw:A > 0.4i, hw:A 0.5i hw:A < 0.6i 0 , according first
table bellow (row 4), > 0, glb[w:A, ] = 0.4 + , whereas lub[w:A, ] = 0.5.
define AI (wI ) = glb[w:A, ]. make sure glb[w:A, ]

(wI ) lub[w:A, ], choose > 0 small enough glb[w:A, ]
lub[w:A, ], i.e. 0.4 + 0.5. existence > 0 guaranteed fact
0 clash-free. additional condition choice satisfy concerns
case constraint type (w, w0 ):R. Let us show problem example.
Suppose 0 {h(w, w0 ):R > 0.3i, hw:R.B 0.6i, hw0 :B 0.5i}. Therefore, according
tables, glb[(w, w0 ):R, 1 ] = 0.3 + 1 , lub[(w, w0 ):R, 1 ] = 1, glb[w0 :B, 2 ] = 0
lub[w0 :B, 2 ] = 0.5. So, seems sufficient choose 1 > 0
0.3 + 1 1, indeed case. fact, hw:R.B 0.6i hw0 :B 0.5i
introduces upper bound (w, w0 ):R, i.e. truth-value (w, w0 ):R
less equal 0.4 = 1 0.6. is, choose 1 > 0 0.3 + 1 0.4.
Otherwise, truth-value w0 :B greater equal 0.6, contradicting
lub[w0 :B, 2 ] = 0.5. Again, existence guaranteed 0 clash-free.
Summing up: since 0 clash-free, follows primitive constraint ,
[] > 0
glb[, []] lub[, []]
(w, w0 ):R










hw:R.C
hw:R.C
hw:R.C
hw:R.C

ni,
> ni,
ni,
< ni,






hw0 :C
hw0 :C
hw0 :C
hw0 :C

ni 6 0
> ni 6 0
ni 6 0
< ni 6 0
154






glb[, []] 1 n;
glb[, []] < 1 n;
glb[, []] n;
glb[, []] < n.

(24)

fiReasoning within Fuzzy DLs

Now, consider following interpretation
1. domain set objects appearing 0 ;
2. wI = w, w ;
3. >I (wI ) = 1 (wI ) = 0, w ;
4. AI (wI ) = glb[w:A, [w:A]], primitive concepts w ;
5. RI (wI , w0 ) = glb[(w, w0 ):R, [(w, w0 ):R]], roles R w, w0 .
show, induction structure fuzzy constraints 0 , satisfies 0 .
Case hw:A > ni: definition, AI (wI ) = glb[w:A, [w:A]] > n and, thus, satisfies
hw:A > ni. cases , < similar.
Case h(w, w0 ):R ni: definition, RI (wI , w0 ) = glb[(w, w0 ):R, [(w, w0 ):R]] n and,
thus, satisfies h(w, w0 ):R ni. cases >, < similar.
Case hw:C u ni: hw:C u ni 0 0 completed, hw:C ni 0
hw:D ni 0 follows. induction, satisfies hw:C ni hw:D ni and, thus,
satisfies hw:C u ni. cases >, < similar.
cases involving C C shown similarly.
Case hw:R.C ni: Let (w, w0 ):R consider hw0 :C ni. follows that, either (i)
hw0 :C ni 0 ; (ii) hw0 :C ni 6 0 . Case (i): induction, satisfies hw0 :C ni and,
thus, max{1 RI (w, w0 ), C (w0 )} C (w0 ) n. Case (ii): construction RI (w, w0 ) =
glb[(w, w0 ):R, [(w, w0 ):R]] RI (w, w0 ) 1n (see Equation 24). follows max{1
RI (w, w0 ), C (w0 )} 1RI (w, w0 ) n. Therefore, inf w0 max{1RI (w, w0 ), C (w0 )}
n, i.e. satisfies hw:R.C ni.
cases hw:R.C > ni, hw:R.C ni hw:R.C < ni shown similarly.
Case hw:R.C ni: Since 0 complete, h(w, w0 ):R ni hw0 :C ni
0 . induction, satisfies h(w, w0 ):R ni hw0 :C ni. consequence,
min{RI (w, w0 ), C (w0 )} n follows and, thus, supw0 min{RI (w, w0 ), C (w0 )} n, i.e.
satisfies hw:R.C ni.
cases hw:R.C > ni, hw:R.C ni hw:R.C < ni shown similarly. 2
following example shows interpretation build.
Example 8 Let us consider Example 6 fuzzy assertion 0 . shown
|
6 0 constructing two clash-free completions S. Let us consider clash-free
completion S1 branch 1 :
S1 = { ha:R.(D u C) < 0.5i, h(a, x):R 0.7i, hx:D 0.7i, hx:C 0.4i,
hb:D u C < 0.5i, hx:D u C < 0.5i, hb:D < 0.5i, hx:C < 0.5i}
show S1 satisfiable building interpretation described proof
Proposition 3. Accordingly, > 0,
155

fiStraccia

glb[(a, b):R, 1 ]
glb[b:C, 2 ]
glb[b:D, 3 ]
glb[(a, x):R, 4 ]
glb[x:D, 5 ]
glb[x:C, 6 ]

=
=
=
=
=
=

0.5
0.2
0.3
0.7
0.7
0.4

lub[(a, b):R, 1 ]
lub[b:C, 2 ]
lub[b:D, 3 ]
lub[(a, x):R, 4 ]
lub[x:D, 5 ]
lub[x:C, 6 ]

=
=
=
=
=
=

1
1
0.5 3
1
1
0.5 6 .

Therefore, freely choose 2 , 4 5 , whereas 3 6
0.3 0.5 3 0.4 0.5 6 . h(a, b):R 0.5i ha:R.C 0.4i
S1 , hb:C 0.4i 6 S1 , additional restriction choice 1 (see
Equation 24) glb[(a, b):R, 1 ] 0.6. But, glb[(a, b):R, 1 ] = 0.5 0.6, every 1 and,
thus, choice 1 also free. solution e.g. = 0.1 and, thus, let
following interpretation:
1. domain set {a, b, x};
2. wI = w, w ;
3. >I (wI ) = 1 (wI ) = 0, w ;
4. C (b) = 0.2, DI (b) = 0.3, DI (x) = 0.7 C (x) = 0.4 (in cases, AI (w) =
0);
5. RI (a, b) = 0.5 RI (a, x) = 0.7 (in cases, R0 (w, w0 ) = 0).
Now, easily verified satisfies S1 S.

2

computational complexity point view, fuzzy entailment problem proven
PSPACE-complete problem, classical entailment problem.
Proposition 4 Let fuzzy KB let fuzzy assertion. Determining whether
| PSPACE-complete problem.

Proof: seen termination algorithm guaranteed. Additionally,
crisp KB K, define K = {h 1i : K}. definition, K KBnormalised h 0.5i query-normalised. Proposition 2 follows
K |= iff K |h 0.5i. PSPACE-completeness entailment problem
crisp ALC (Schmidt-Schau & Smolka, 1991), PSPACE-hardness fuzzy entailment
problem follows. Unfortunately, algorithm, is, requires exponential space due
well know problem inherited crisp case. Indeed, easily verified completion
= {x:C}, C concept
(R.A11 ) u (R.A12 ) u R.((R.A21 ) u (R.A22 ) u . . . R.((R.An1 ) u (R.An2 )) . . .)
contains least 2n + 1 variables. order require polynomial space, Schmidt-Schau
Smolka (1991) introduced so-called trace rule (T ) operator. (T )
rule modifies () rule shown below.
156

fiReasoning within Fuzzy DLs

()

(T )

w:R.C (w, x):R, x:C
x new variable w0 (w, w0 ):R w0 :C
already actual constraint set
w:R.C (w, x):R, x:C
x new variable (w, w0 ):R0 already actual set constraints.

difference () rule (T ) latter applied
object w. thus compelled make nondeterministic choice amongst
constraints form w:R.C. Furthermore, convenient apply trace rule
none (u), (t), () () rules applicable.
say set constraints 0 trace set 0 obtained
application rules () replaced (T ). Schmidt-Schau
Smolka (1991) shown set constraints = {x:C} satisfiable iff trace 0
contains clash. size trace 0 bounded polynomially size
S, polynomial space sufficient prove satisfiability.
trace rule works start constraint set form {x:C}.
general case, rely so-called pre-completions (Baader & Hollunder, 1991b;
Donini et al., 1994). set constraints 0 said pre-completion given set
constraints S, obtained application (u), (t), () ()
rules, none rules applicable 0 (the size 0 polynomially bounded
size S). consequence pre-processing step, role relationships
(w, w0 ):R 0 ignored, i.e. removed 0 , longer carry
additional information. Now, second step apply method checking
whether trace 0 contains clash. summary, set constraints satisfiable
iff pre-completion 0 trace 00 0 contains clash.
fuzzy case, similar trace rules easily defined. instance, correspondent trace rule ( ) rule
(T )

hw:R.C ni h(w, x):R ni, hx:C ni
x new variable h(w, w0 ):R0 mi already
actual set fuzzy constraints.

trace rules correspondent rules (> ), ( ) (< ) defined similarly.
proceeding crisp case, shown (i) set fuzzy constraints
satisfiable iff pre-completion 0 trace 00 0 contains
clash; (ii) size trace 00 bounded polynomially size S.
consequence, satisfiability problem PSPACE, completes proof. 2
result establishes important property fuzzy DL. effect, says
additional computational cost paid major expressive power.
5.2 Decision Procedure Subsumption Problem
section address subsumption problem, i.e. deciding whether C D,
C two concepts fuzzy terminology. seen (see Example 4),
157

fiStraccia

C reduced case empty terminology applying KB expansion
process. So, without loss generality, limit attention case C D.
first, analogue relation (12) holds. fact, easily shown
Proposition 5 Let C two concepts. follows C iff n > 0
ha:C ni|ha:D ni, new individual.

Proof:
.) Assume C holds. Suppose contrary n > 0
ha:C ni |
6 ha:D ni. Therefore, interpretation n > 0
C (aI ) n DI (aI ) < n. But, hypothesis n C (aI ) DI (aI ) < n follows.
Absurd.
.) Assume n > 0, ha:C ni|ha:D ni holds. Suppose contrary
C 6 holds. Therefore, interpretation C (d) >
DI (d) 0. Let us extent aI = consider n = C (d) > 0. course,
satisfies ha:C ni. Therefore, hypothesis follows satisfies ha:D ni,
i.e. DI (d) n = C (d) > DI (d). Absurd. 2
check whether n > 0 ha:C ni|ha:D ni holds? solution
problem, restricted propositional case, given Straccia (2000a). Indeed,
shown
Proposition 6 (Straccia, 2000a) Let p q two propositions, 0 < n1 0.5
1 n2 > 0.5. follows n > 0, hp ni|hq ni iff {n1 , n2 },
hp mi|hq mi holds.

proposition establishes that, propositional level, order check whether
hp ni|hq ni holds n, sufficient check entailment relation respect
two values n1 , n2 . first less equal 0.5, second greater
0.5, respectively. due fact given values n, n0 0.5, proof
hp ni|hq ni converted proof hp n0 i|hq n0 vice-versa.
case n, n0 > 0.5 similar.
proposition extended fuzzy DL well.
Lemma 1 Let C two concepts, 0 < n, n0 0.5 let individual.
follows ha:C ni|ha:D ni iff ha:C n0 i|ha:D n0 i.

Proof:
enough show = {ha:C ni, ha:D < ni} satisfiable iff 0 =
{ha:C n0 i, ha:D < n0 i} satisfiable.
.) Assume satisfiable. So, clash-free completion S.
S[n/n0 ] indicate set fuzzy constraints obtained S, replacing value n
n0 value 1 n 1 n0 , respectively. show S[n/n0 ]
clash-free completion 0 and, thus, 0 satisfiable.
Let r1 , . . . , rk , k 0 sequence inference rule applications, applied
get S. Let S0 = S, let Sk = 1 k let Si set fuzzy constraints
obtained Si1 application ri rule Si1 .
induction k, show (i) sequence inference rules r1 , . . . , rk
applied 0 well; (ii) 0 0 = 0 , 0 k = 0 0 set fuzzy constraints obtained
158

fiReasoning within Fuzzy DLs

0 i1 application ri rule 0 i1 , 0 = Si [n/n0 ] and, thus,
0 = 0 k = Sk [n/n0 ] = S[n/n0 ]; (iii) Sk clash-free completion 0 k
clash-free completion 0 well.
case k = 0: rule applicable S0 = completion S. case analysis, (i) easily verified rule applicable 0 (ii) 0 = 0 0 =
S0 [n/n0 ] = S[n/n0 ]. (iii) So, 0 0 completion 0 . show 0 0 clashfree. Assume contrary 0 0 , i.e. 0 contains clash. consequence,
0 = {ha:C n0 i, ha:C < n0 i}. then, {ha:C ni, ha:C < ni}, contrary
assumption clash-free.
induction step: case analysis rule rk . limit presentation ( )
rule proof similar.
rk ( ) verified hw:R.C 0 ni h(w, w0 ):R > 1 ni
Sk1 hw0 :C 0 ni 6 Sk1 hw0 :C 0 ni Sk . induction, Sk1 [n/n0 ] =
0 k1 and, thus, hw:R.C 0 n0 h(w, w0 ):R > 1 n0 0 k1 ,
hw0 :C 0 n0 6 0 k1 . Therefore, (i) rule rk applicable 0 k1 hw0 :C 0 n0
0 k ; (ii) so, 0 k = Sk [n/n0 ]; (iii) 0 k = Sk [n/n0 ] and, Sk completion
S, case analysis, easily verified rule applicable 0 k .
Therefore, 0 k completion 0 . Let us show 0 k clash free. Assume
contrary 0 k contains clash. one cases Table 1 holds,
0 k = Sk [n/n0 ] follows easily clash Sk well, contrary
assumption Sk clash-free. hand, conjugated pair
fuzzy constraints 0 k (see Table 2), one following three pairs 0 k :
(a) h n0 h < n0 i; (b) h 1 n0 h > 1 n0 i; (c) h < n0
h > 1 n0 (note n, n0 0.5). Again, 0 k = Sk [n/n0 ], follows
conjugated pair Sk well, contrary assumption Sk clash-free.
.) proven similarly .). 2
proceeding Lemma 1 shown
Lemma 2 Let C two concepts, 1 n, n0 > 0.5 let individual.
follows ha:C ni|ha:D ni iff ha:C n0 i|ha:D n0 i.

Lemma 1 Lemma 2 follows
Proposition 7 Let C two concepts, 0 < n1 0.5, 1 n2 > 0.5 let
individual. follows n > 0 ha:C ni|ha:D ni iff {n1 , n2 },
ha:C mi|ha:D mi holds.

consequence, subsumption problem reduced entailment problem
decision algorithm.
159

fiStraccia

5.3 Decision Procedure BTVB Problem
address problem determining glb(, ) lub(, ). important,
computing, e.g. glb(, ), fact way answer query type degree
(at least) true, given (imprecise) facts ?.
Without loss generality, assume concepts NNF (Negation Normal
Form). Straccia (2000b) shown that, case fuzzy propositional logic, set
fuzzy propositions form hp ni hp ni, p proposition, possible
determine finite set N [0, 1], |N | O(||), glb(, q) N ,
i.e. greatest lower bound proposition q w.r.t. element N .
Therefore, glb(, q) determined computing greatest value n N
|hq ni. easy way search n order elements N
perform binary search among values successive entailment tests. Dually,
lub(, q) = 1 glb(, q) holds, lub either computed glb or,
lub(, q) 1 N , 1 N = {1 n : n N }, compute determining
smallest value 1 N .

Proposition 8 (Straccia, 2000b) Let set fuzzy propositions NNF let q
proposition. glb(, q) N lub(, q) 1 N ,
N

= {0, 0.5, 1}
{n : hp ni }
{1 n : hp ni }

1 N = {1 n : n N }.

Proposition 8 easily extended fuzzy description logic case. Essentially,
quantifiers change possible values glb(, F ) lub(, F ).
Proposition 9 Let set fuzzy assertions NNF let assertion.
glb(, ) N lub(, ) 1 N ,
N

= {0, 0.5, 1}
{n : h ni }
{1 n : h ni }

1 N = {1 n : n N }.

Proof: Let us show glb(, ) N . Let glb(, ). definition, = 0
= {h < ni} satisfiable n > 0 0 N . Otherwise, > 0 largest
value = {h < mi} satisfiable. Let us mark sub-expression
, trace components query assertion deduction.
160

fiReasoning within Fuzzy DLs

Consider completion 0 S. Starting h < mi, applying rules inference,
marked expressions type h0 < mi h0 > 1 mi appear 0 . Furthermore,
satisfiable, 0 contains clash, i.e. value largest value
completions 0 contain clash. Let us analyse 0 . 0 contains clash, either
(i) clash according Table 1, (ii) clash according Table 2.
(i) case, i.e. 0 clash, distinguish
two cases: (a) marked (b) marked . former case, 0
contains clash independently value and, thus, largest possible value
0 contains clash 1. latter case, > 0, either = hw: > 1 mi
= hw:> < mi clashes value m. consequence, largest
possible value 0 contains clash according Table 1 1. Assume (ii)
case, i.e. conjugated pair fuzzy constraints 0 0 . Similarly previous
case, distinguish cases 0 marked . four
cases:
(a) = h ki 0 = h0 k 0 0 , none marked k > k 0 .
Therefore, 0 contains clash value and, thus, largest choice 1;
(b) = h ki 0 = h0 < mi 0 , 0 marked k m.
Therefore, 0 contains clash value k and, thus, largest choice
k. easily verified case analysis rules 0 , k N follows;
(c) = h ki 0 = h0 > 1 mi 0 , 0 marked k 1m.
Therefore, 0 contains clash value 1 k and, thus, largest choice
1 k. easily verified case analysis rules 0 , 1 k N
follows;
(d) = h < mi 0 = h0 > 1 mi 0 , marked 1m.
Therefore, 0 contains clash value 0.5 and, thus, largest choice
0.5.
Summing up, proved largest possible value
2

N .

algorithms computing glb(, ) lub(, ) described Table 3. instance,
binary search N , value glb(, ) determined log |N |
fuzzy entailment tests.

6. Conclusions Future Work
work, presented quite general fuzzy extension DL ALC, significant
expressive representative various DLs. fuzzy DL enables us reason
presence imprecise ALC concepts, i.e. fuzzy ALC concepts. semantics point
view, fuzzy concepts interpreted fuzzy sets i.e. given concept C individual
a, C(a) interpreted truth-value sentence C. syntax point
view, allow specify lower upper bounds truth-value C(a). Complete
algorithms reasoning presented, is, devised algorithms
solving entailment problem, subsumption problem well best truth-value
bound problem.
161

fiStraccia

Algorithm ax(, )
Set := 0 ax := 2.
1. Pick n N \ {0} < n < ax. n,
set glb(, ) := exit.
2. |h ni set = n, else set ax = n. Go Step 1.
Algorithm in(, )
Set := 0 ax := 2.
1. Pick n (1 N ) \ {0} < n < ax. n,
set lub(, ) := min{M ax, 1} exit.
2. |h ni set ax = n, else set = n. Go Step 1.

Table 3: Algorithms ax(, ) in(, )

important point concerns computational complexity. complexity result shows
additional expressive power impact computational complexity point
view.
extension DLs management vagueness new (Tresp & Molitor,
1998; Yen, 1991). Yen first, best knowledge, introducing vagueness
simple DL. language two interesting points included language.
Firstly, allows definition vague concepts means explicit membership functions
domain, e.g. LowPressure: domain(AirPressure); membershipf x(p.low(p)).
domain p ranges given AirPressure. p.low(p) determines membership
degree pressure p low. Secondly, language allows concept modifiers, like
Slightly, means concepts like low pressure defined
VeryLowPressure: Very(LowPressure). last idea generalised ALC Tresp
Molitor (1998) certain type concept modifiers allowed. Strictly speaking, language defined Tresp Molitor expressive, consider
concept modifiers. semantics point view, extension Tresp Molitors
language quite straightforward. But, cost pay increasing
expressive power that, computational complexity algorithms point view,
things changes radically. Indeed, according Tresp Molitor completion
linear optimisation problem generated (set inequations form op1 (t1 )Rop2 (t2 )
op1 (t1 )Rf (op2 (t2 )), ti truth-value variable, R {, , =, opi {id, mi },
id(t) identity mi (t) modifier function truth-value variables, respectively,
f {min, max}-derived semantics connectors u, t) solved
best value. Then, minimum among computed solutions taken. solutions
computed relying methods domain linear programming, e.g.
162

fiReasoning within Fuzzy DLs

simplex method (Papadimitriou & Steiglitz, 1982). possible devise similar
approach fuzzy DL well, seen necessary.
aspects considered Tresp Molitor Yen, although interesting,
crucial w.r.t. model logic-based multimedia information retrieval, underlaying text, image video analysis tools provide us fuzzy assertions e.g. form
ha:About.C ni may infer ha:About.D mi.
work used basis extending existing DL based systems
research. latter case, several open points. instance, clear
yet reason case fuzzy specialisation general form CD
case cycles allowed fuzzy KB. Another interesting topic research concerns
semantics fuzzy connectives. course several choices semantics
connectives u, t, , , considered. huge number proposals given
literature impact semantics point view well understood, question
impact computational complexity algorithms point view remains
still open.

Acknowledgements
would like thank three anonymous reviewers helpful comments early
version paper. extension revision paper appeared AAAI-98.

References
Baader, F., & Hollunder, B. (1991a). KRIS: Knowledge representation inference system,
system description. ACM SIGART Bulletin, 2, 814.
Baader, F., & Hollunder, B. (1991b). terminological knowledge representation system
complete inference algorithm. Proc. Workshop Processing Declarative
Knowledge, PDK-91, No. 567 Lecture Notes Artificial Intelligence, pp. 6786.
Springer-Verlag.
Bacchus, F. (1990). Representing Reasoning Probabilistic Knowledge. MIT
Press.
Bellman, R., & Giertz, M. (1973). analytic formalism theory fuzzy sets.
Information Sciences, 5, 149156.
Brachman, R. J. (1992). reducing CLASSIC practice: Knowledge representation meets
reality. Proc. 3rd Int. Conf. Principles Knowledge Representation
Reasoning (KR-92), pp. 247258. Morgan Kaufmann, Los Altos.
Buchheit, M., Donini, F. M., & Schaerf, A. (1993a). Decidable reasoning terminological
knowledge representation systems. Proc. 13th Int. Joint Conf. Artificial Intelligence (IJCAI-93), pp. 704709 Chambery, France. Morgan Kaufmann, Los
Altos.
163

fiStraccia

Buchheit, M., Donini, F. M., & Schaerf, A. (1993b). Decidable reasoning terminological
knowledge representation systems. Journal Artificial Intelligence Research, 1, 109
138.
Chen, J., & Kundu, S. (1996). sound complete fuzzy logic system using Zadehs
implication operator. Ras, Z. W., & Maciek, M. (Eds.), Proc. 9th Int. Sym.
Methodologies Intelligent Systems (ISMIS-96), No. 1079 Lecture Notes
Artificial Intelligence, pp. 233242. Springer-Verlag.
da Silva, R. M., Pereira, A. E. C., & Netto, M. A. (1994). system knowledge representation based formulae predicate calculus whose variables annotated
expressions fuzzy terminological logic. Proc. 5th Int. Conf. Information Processing Managment Uncertainty Knowledge-Based Systems,
(IPMU-94), No. 945 Lecture Notes Computer Science. Springer-Verlag.
Donini, F. M., Lenzerini, M., Nardi, D., & Schaerf, A. (1994). Deduction concept languages: subsumption instance checking. Journal Logic Computation,
4 (4), 423452.
Dubois, D., & Prade, H. (1980). Fuzzy Sets Systems. Academic Press, New York, NJ.
Dubois, D., & Prade, H. (1994). enforce full compositionality uncertainty calculi?.
Proc. 11th Nat. Conf. Artificial Intelligence (AAAI-94), pp. 149154
Seattle, Washington.
Dubois, D., & Prade, H. (1996). Approximate commonsense reasoning: theory
practice. Ras, Z. W., & Maciek, M. (Eds.), Proc. 9th Int. Sym. Methodologies Intelligent Systems (ISMIS-96), No. 1079 Lecture Notes Artificial
Intelligence, pp. 1933. Springer-Verlag.
Halpern, J. Y. (1990). analysis first-order logics probability. Artificial Intelligence
Journal, 46, 311350.
Heinsohn, J. (1994). Probabilistic description logics. de Mantara, R. L., & Pool, D.
(Eds.), Proceedings 10th Conference Uncertainty Artificila Intelligence,
pp. 311318.
Hollunder, B. (1994). alternative proof method possibilistic logic application terminological logics. 10th Annual Conference Uncertainty Artificial
Intelligence Seattle, Washington. R. Lopez de Mantaras D. Pool.
Horrocks, I. (1998). Using expressive description logic: Fact fiction?. Proc.
8th Int. Conf. Principles Knowledge Representation Reasoning (KR-98).
Jager, M. (1994). Probabilistic reasoning terminological logics. Proceedings KR94, 5-th International Conference Principles Knowledge Representation
Reasoning, pp. 305316 Bonn, FRG.
164

fiReasoning within Fuzzy DLs

Koller, D., Levy, A., & Pfeffer, A. (1997). P-CLASSIC: tractable probabilistic description
logic. Proc. 14th Nat. Conf. Artificial Intelligence (AAAI-97), pp. 390
397.
Kruse, R., Schwecke, E., & Heinsohn, J. (1991). Uncertainty Vagueness Knowledge
Based Systems. Springer-Verlag, Berlin, Germany.
Lee, R. C. T. (1972). Fuzzy logic resolution principle. Journal ACM, 19 (1),
109119.
Meghini, C., Sebastiani, F., & Straccia, U. (1997). Modelling retrieval structured
documents containing texts images. Proceedings First European Conference Research Advanced Technology Digital Libraries, No. 1324 Lecture
Notes Computer Science, pp. 325344 Pisa, Italy.
Meghini, C., Sebastiani, F., & Straccia, U. (1998). Mirlog: logic multimedia information retrieval. Crestani, F., Lalmas, M., & van Rijsbergen, C. (Eds.), Logic
Uncertainty Information Retrieval: Advanced models representation
retrieval information, Vol. 4 Kluwer International Series Information
Retrieval, chap. 7, pp. 151185. Kluwer Academic Publishers, Boston, USA.
Meghini, C., & Straccia, U. (1996). relevance terminological logic information retrieval.
Proceedings 19th Annual International ACM SIGIR Conference Research
Development Information Retrieval (ACM SIGIR-96), pp. 197205 Zurich,
Switzerland.
Nebel, B. (1988). Computational complexity terminological reasoning BACK. Artificial
Intelligence, 34, 371383.
Nebel, B. (1990). Reasoning revision hybrid representation systems. Springer, Heidelberg, FRG.
Papadimitriou, C. H., & Steiglitz, K. (1982). Combinatorial Optimization: Algorithms
Complexity. Prentice-Hall, Englewood Cliffs, New Jersey.
Pearl, J. (1988). Probabilistic Reasoning Intelligent Systems: Networks Plausible
Inference. Morgan Kaufmann, Los Altos.
Peltason, C. (1991). BACK system overview. SIGART Bulletin, 2 (3), 114119.
Roth, D. (1996). hardness approximate reasoning. Artificial Intelligence Journal,
82, 273302.
Schmidt-Schau, M., & Smolka, G. (1991). Attributive concept descriptions complements. Artificial Intelligence, 48, 126.
Sebastiani, F. (1994). probabilistic terminological logic modelling information retrieval. Proceedings SIGIR-94, 17th ACM International Conference Research
Development Information Retrieval, pp. 122130 Dublin, IRL. Published
Springer Verlag, Heidelberg, FRG.
165

fiStraccia

Straccia, U. (1998). fuzzy description logic. Proc. 15th Nat. Conf. Artificial
Intelligence (AAAI-98), pp. 594599 Madison, USA.
Straccia, U. (2000a). note relationship fuzzy logic four-valued logic.
Technical report B4-22-10-2000, Istituto di Elaborazione dellInformazione, Consiglio
Nazionale delle Ricerche, Pisa, Italy.
Straccia, U. (2000b). Reasoning experimenting within Zadehs fuzzy propositional logic.
Technical report 2000-b4-011, Istituto di Elaborazione dellInformazione, Consiglio
Nazionale delle Ricerche, Pisa, Italy.
Tresp, C., & Molitor, R. (1998). description logic vague knowledge. Proc.
13th European Conf. Artificial Intelligence (ECAI-98) Brighton (England).
Xiachun, C., Yunfei, J., & Xuhua, L. (1995). rationality decidability fuzzy
implications. Proc. 14th Int. Joint Conf. Artificial Intelligence (IJCAI95), pp. 19101911 Montreal, Canada. MK.
Yen, J. (1991). Generalizing term subsumption languages fuzzy logic. Proc. 12th
Int. Joint Conf. Artificial Intelligence (IJCAI-91), pp. 472477 Sydney, Australia.
Zadeh, L. A. (1965). Fuzzy sets. Information Control, 8 (3), 338353.

166

fiJournal Artificial Intelligence Research 14 (2001) 359{389

Submitted 10/00; published 6/01

Conditional Plausibility Measures Bayesian Networks
Joseph Y. Halpern

Cornell University, Computer Science Department
Ithaca, NY 14853
http://www.cs.cornell.edu/home/halpern

halpern@cs.cornell.edu

Abstract

general notion algebraic conditional plausibility measures defined. Probability
measures, ranking functions, possibility measures, (under appropriate definitions)
sets probability measures viewed defining algebraic conditional plausibility
measures. shown algebraic conditional plausibility measures represented
using Bayesian networks.

1. Introduction
Pearl (1988) among others long argued Bayesian networks (that is, dags without conditional probability tables) represent important qualitative information
uncertainty regarding conditional dependencies independencies. extent
true, Bayesian networks make perfect sense non-probabilistic representations
uncertainty. And, indeed, Bayesian networks used rankings (Spohn,
1988) Darwiche Goldszmidt (1994). follows results Wilson (1994)
possibility measures (Dubois & Prade, 1990) represented using Bayesian networks.
question address paper \What properties representation uncertainty required able represent uncertainty using Bayesian network?"
question addressed earlier work, see (Darwiche, 1992; Darwiche & Ginsberg,
1992; Friedman & Halpern, 1995; Wilson, 1994), although characterization given
somewhat different. Shenoy Shafer (1990) consider related question|essentially,
required representation uncertainty marginals computed using
\local computations" type used Bayesian networks|and provide axioms sucient
guarantee possible.
represent uncertainty using plausibility measures, (Friedman & Halpern,
1995). answer question, must examine general properties conditional plausibility
well defining notion plausibilistic independence. Unlike earlier papers, enforce
symmetry condition definition conditional independence, that, example,
independent B iff B independent A. property holds probability,
asymmetric definition independence used earlier work necessarily hold
formalisms. also subtle important differences paper
(Friedman & Halpern, 1995) notion conditional plausibility. definitions
simpler general; particular attention paid conditions
conditional plausibility must defined.
major results general condition, simpler given (Friedman &
Halpern, 1995; Wilson, 1994), conditional plausibility measure satisfies
c 2001 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiHalpern

semi-graphoid properties (which means represented using Bayesian network).
Conditions also given suce Bayesian network able quantitatively
represent plausibility measure; precisely, conditions given plausibility
measure uniquely reconstructed given conditional plausibility tables node
Bayesian network. Conditions quantitative representation Bayesian networks
seem presented literature representations uncertainty
probability (for conditions trivial). minor additional condition also
suces guarantee d-separation network characterizes conditional independence. conditions clearly apply rankings possibility measures. Perhaps
interestingly, also apply sets probabilities novel representation
sets plausibility measure. novel representation (and associated notion
conditioning) shown natural properties shared representations.
rest paper organized follows. Section 2, discuss conditional plausibility measures. Section 3 introduces algebraic conditional plausibility measures,
ones essentially analogue + . (Putting algebraic
structure uncertainty new; also done (Darwiche, 1992; Darwiche & Ginsberg, 1992; Friedman & Halpern, 1995; Weydert, 1994).) Section 4 discusses independence
conditional independence conditional plausibility spaces, shows algebraic
conditional plausibility measures satisfy semi-graphoid properties. Finally, Section 5,
Bayesian networks based (algebraic) plausibility measures considered. Combining
fact algebraic plausibility measures satisfy semi-graphoid properties
results (Geiger, Verma, & Pearl, 1990), follows d-separation Bayesian network G implies conditional independence algebraic plausibility measures compatible
G; weak richness condition shown yield converse. paper concludes
Section 6. Longer proofs relegated appendix.

2. Conditional Plausibility

2.1 Unconditional Plausibility Measures

getting conditional plausibility measures, perhaps best consider unconditional plausibility measures. basic idea behind plausibility measures straightforward.
probability measure maps subsets set W [0; 1]. domain may consist
subsets W ; however, required algebra. (Recall algebra F
W set subsets W containing W closed union complementation,
U; V 2 F , U [ V U .) plausibility measure general;
maps elements algebra F arbitrary partially ordered set. Pl plausibility
measure, read Pl(U ) \the plausibility set U ". Pl(U ) Pl(V ), V
least plausible U . ordering partial, could plausibility
two different sets incomparable. agent may prepared say two sets
one likely another equal likelihood.
Formally, plausibility space tuple = (W; F ; Pl), W set worlds, F
algebra W , Pl maps sets F set plausibility values partially
ordered relation (so exive, transitive, anti-symmetric)
contains two special elements >D ?D ?D >D 2 D;
intended analogues 1 0 probability. usual, ordering defined
360

fiConditional Plausibility Measures Bayesian Networks

<D taking d1 <D d2 d1 d2 d1 6= d2 . omit subscript , <D , >D
?D whenever clear context.
three requirements plausibility measures. first two obvious analogues requirements hold notions uncertainty: whole space gets
maximum plausibility empty set gets minimum plausibility. third
requirement says set must least plausible subsets.
Pl1. Pl(;) = ?D .
Pl2. Pl(W ) = >D .
Pl3. U U 0 , Pl(U ) Pl(U 0 ).
(In Pl3, implicitly assuming U; U 0 2 F . Similar assumptions made throughout.)
standard representations uncertainty literature represented
plausibility measures. brie describe representations uncertainty
relevance paper.
Sets probabilities: One common way representing uncertainty set probability measures. set often assumed convex (see, example, (Campos & Moral,
1995; Cousa, Moral, & Walley, 1999; Gilboa & Schmeidler, 1993; Levi, 1985; Walley, 1991)
discussion references), however, convex sets seem appropriate representing independence assumptions, make restriction here. example,
coin unknown probability heads tossed twice, tosses known
independent, seems reasonable representation given set P0 consisting
measures ff , ff (hh) = ff2 ; ff (ht) = ff (th) = ff(1 , ff); ff (tt) = (1 , ff)2 .
Unfortunately, P0 convex. Moreover, convex hull includes many measures
coin tosses independent. argued (Cousa et al., 1999) set
probability measures behaviorally equivalent convex hull. However, even
accept argument, follow set convex hull equivalent insofar
determination independencies goes.
number ways viewing set P probability measures plausibility
measure. One uses lower probability P , defined P (U ) = inf f(U ) : 2 Pg. Clearly
P satisfies Pl1{3. corresponding upper probability P , defined P (U ) = supf : 2
Pg = 1 , P (U ), also clearly plausibility measure.
P P give way comparing likelihood two subsets U V W .
two ways incomparable; easy find set P probability measures W
subsets U V W P (U ) < P (V ) P (U ) > P (V ). Rather
choosing P P , associate different plausibility measure P
captures both. Let DP ;P = f(a; b) : 0 b 1g define (a; b) (a0 ; b0 ) iff b a0 .
puts partial order DP ;P ; clearly ?DP P = (0; 0) >DP P = (1; 1). Define
PlP ;P (U ) = (P (U ); P (U )). Thus, PlP ;P associates set U two numbers
thought defining interval terms lower upper probability U .
easy check PlP ;P (U ) PlP ;P (V ) upper probability U less
equal lower probability V . PlP ;P satisfies Pl1{3, indeed plausibility
measure, one puts partial order events.
;

361

;

fiHalpern

trouble P , P , even PlP ;P lose information. example,
hard find set P probability measures subsets U; V W
(U ) (V ) 2 P (U ) < (V ) 2 P , P (U ) = P (V )
P (U ) = P (V ). Indeed, exists infinite set P probability measures
(U ) < (V ) 2 P P (U ) = P (V ) P (U ) = P (V ). probability
measures P agree U less likely V , seems reasonable conclude U
less likely V . However, none P , P , PlP ;P necessarily draw conclusion.
Fortunately, hard associate yet another plausibility measure P
lose important information. technical convenience become clear
later, assume index set P = fi : 2 g. Thus, example,
P = f1 ; : : : ; n g, = f1; : : : ; ng. Let DI = [0; 1]I , is, functions
[0; 1], pointwise ordering, f g iff f (i) g(i) 2 .1 easy
check ?D function f : ! [0; 1] f (i) = 0 2 >D
function g g(i) = 1 2 . U W , let fU function
fU (i) = (U ) 2 . example, set P0 measures representing two
coin tosses (which indexed IR), set W taken fhh; ht; tt; thg. Then,
example, ffhhg (ff) = ff (hh) = ff2 ffht;ttg (ff) = 1 , ff.
easy see f; = ?D fW = >D . define PlP (U ) = fU . Thus,
PlP (U ) PlP (V ) iff fU (i) fV (i) 2 iff (U ) (V ) 2 P . Clearly PlP
satisfies Pl1{3. Pl1 Pl2 follow since PlP (;) = f; = ?D PlP (W ) = fW = >D ,
Pl3 follows since U V (U ) (V ) 2 P . PlP captures
information P (unlike, say, P , washes much away taking infs).
way associating plausibility measure set P probability measures
generalizes: provides way associating single plausibility measure set
plausibility measures; leave straightforward details reader.
Possibility measures: fuzzy measure (or Sugeno measure ) f W (Wang & Klir,
1992) function f : 2W 7! [0; 1], satisfies Pl1{3. (That is, less general
plausibility measure requires range [0; 1] rather arbitrary
partially ordered set.) possibility measure Poss W special case Sugeno measure;
function mapping subsets W [0; 1] Poss(W ) = 1, Poss(;) = 0,
Poss(U ) = supw2U (Poss(fwg)), Poss(U [ V ) = max(Poss(U ); Poss(V )) (Dubois &
Prade, 1990). Clearly possibility measure plausibility measure.
Ranking functions: ordinal ranking (or -ranking ranking function ) W (as
defined (Goldszmidt & Pearl, 1992), based ideas go back (Spohn, 1988))
function mapping subsets W = [ f1g (W ) = 0, (;) =
1, (U ) = minw2U ((fwg)), (U [ V ) = min((U ); (V )). Intuitively,
ranking function assigns degree surprise subset worlds W , 0 means
unsurprising higher numbers denote greater surprise. easy see
ranking function W , (W; 2W ; ) plausibility space, x
x usual ordering natural numbers. One standard view ranking












1. conference version paper (Halpern, 2000), , range plausibility measure,
taken functions [0; 1], index set [0; 1]. difference mainly cosmetic,
representation makes range independent , plausibility values
used set probability measures indexed .


P

P

362

fiConditional Plausibility Measures Bayesian Networks

function, going back Spohn, ranking k associated probability
k , fixed (possibly infinitesimal) . Note viewpoint justifies taking
(W ) = 0, (;) = 1, (U [ V ) = min((U ); (V )).

2.2 Conditional Plausibility Measures

Since Bayesian networks make heavy use conditioning, interest
plausibility measures, conditional plausibility measures (cpm's). Given set W
worlds, cpm maps pairs subsets W partially ordered set D. write Pl(U jV )
rather Pl(U; V ), keeping standard notation conditioning. case
probability measure , standard take (U jV ) undefined (V ) = 0.
general, must make precise allowable second arguments are. Thus, take
domain cpm form F F 0 where, intuitively, F 0 consists sets
F makes sense condition. example, conditional probability
measure defined usual way unconditional probability measure , F 0 consists
sets V (V ) > 0. (Note F 0 algebra|it closed
complementation.) Popper algebra W set F F 0 subsets W W satisfying
following properties:
Acc1. F algebra W .
Acc2. F 0 nonempty subset F .
Acc3. F 0 closed supersets F ; is, V 2 F 0 , V V 0 , V 0 2 F ,
V 0 2 F 0.
(Popper algebras named Karl Popper, first consider formally
conditional probability basic notion (Popper, 1968). De Finetti (1936) also
early work, apparently independently, taking conditional probabilities primitive. Indeed,
Renyi (1964) points out, idea seems go back far Keynes (1921).)
conditional plausibility space (cps ) tuple (W; F ; F 0 ; Pl), F F 0 Popper
algebra W , Pl : F F 0 ! D, partially ordered set plausibility values, Pl
conditional plausibility measure (cpm) satisfies following conditions:
CPl1. Pl(;jV ) = ?D .
CPl2. Pl(W jV ) = >D .
CPl3. U U 0 , Pl(U jV ) Pl(U 0 jV ).
CPl4 Pl(U jV ) = Pl(U \ V jV ).
CPl1{3 obvious analogues Pl1{3. CPl4 minimal property guarantees
conditioning V , everything relativized V . follows easily CPl1{4
Pl(jV ) plausibility measure V fixed V . cps acceptable satisfies
Acc4. V 2 F 0 , U 2 F , Pl(U jV ) 6= ?D , U \ V 2 F 0 .
363

fiHalpern

Acceptability generalization observation Pr(V ) 6= 0, conditioning
V defined. says Pl(U jV ) 6= ?D , conditioning V \ U
defined.
CPl1{4 rather minimal requirements. example, place constraints
relationship Pl(U jV ) Pl(U jV 0 ) V 6= V 0 . One natural additional
condition following.
CPl5. V \ V 0 2 F 0 U; U 0 2 F , Pl(U jV \ V 0 ) Pl(U 0 jV \ V 0 ) iff Pl(U \ V jV 0 )
Pl(U 0 \ V jV 0 ).
hard show CPl5 implies CPl4.
Lemma 2.1: CPl5 implies CPl4.
Proof: Since clearly Pl(U \ V jV ) = Pl(U \ V \ V jV ), CPl5 follows Pl(U jV \ V ) =
Pl(U \ V jV \ V ), hence Pl(U jV ) = Pl(U \ V jV ).
CPl5 follow CPl1{4 (indeed, shown below, standard notion
conditioning lower probabilities satisfies CPl1{4 CPl5). cps satisfies
CPl5 said coherent. Although assume CPl5 here, fact holds
plausibility measures one main results applies (see Lemma 3.5).
case, CPl5 certainly coherence might required.
example, may seem reasonable require V V 0 disjoint,
case Pl(U jV [ V 0 ) > Pl(U jV ) Pl(U jV [ V 0 ) > Pl(U jV 0 ). Similarly, may
want require case Pl(U jV [ V 0 ) < Pl(U jV ) Pl(U jV [ V 0 ) <
Pl(U jV 0 ).2 Coming reasonable set coherence conditions remains topic
future work. properties needed results paper CPl1{4.
notion cps considered closely related defined (Friedman &
Halpern, 1995). There, cps taken family fW; DV ; PlV ) : V W; V 6= ;g
plausibility spaces, plausibility measure PlV satisfies Pl1{3 domain 2W
analogue CPl5 holds: PlV \V 0 (U ) PlV \V 0 (U 0 ) iff PlV 0 (U \ V ) PlV 0 (U 0 \ V ).
distinguish definition cps given paper given (Friedman & Halpern,
1995), call latter FH-cps. analogue Acc1{4 (Friedman & Halpern,
1995); F implicitly taken 2W , F 0 implicitly taken 2W , f;g.
inessential difference definitions. significantly, note FH-cps,
(W; DV ; PlV ) plausibility space fixed V , thus satisfies Pl1{3. However,
requiring CPl1{3 priori stronger requiring Pl1{3 separate plausibility
space. Pl1 requires Pl(;jV ) = ?D , elements ?D may different
V . way contrast, CPl1 requires Pl(?jV ) must element, ?D ,
V . Similar remarks hold Pl2. Nevertheless, shown below, construction
converts FH-cps coherent cps.
consider standard ways getting cps starting unconditional
representation uncertainty.
Definition 2.2: cps (W; F ; F 0 ; Pl) extends unconditional plausibility space (W; F ; Pl0 )
Pl(U jW ) = Pl0 (U ). (W; F ; F 0 ; Pl) standard F 0 = fU : Pl(U ) 6= ?g.
constructions result standard cps's.
V

V

2. think anonymous referee paper suggesting condition.

364

fiConditional Plausibility Measures Bayesian Networks

Ranking functions: Given unconditional ranking function , well-known
way extending conditional ranking function:
(
(U \ V ) , (V ) (V ) 6= 1,
(U jV ) = undefined
(V ) = 1.

consistent view (V ) = k, (V ) = k , since (U jV ) =
(U \V ),(V ). easy check definition results coherent cps.
Possibility measures: two standard ways defining conditional possibility
measure unconditional possibility measure Poss. distinguish them, write
Poss(U jV ) first approach Poss(U jjV ) second approach. According
first approach,
8
>
< Poss(V \ U ) Poss(V \ U ) < Poss(V ),
Poss(V \ U ) = Poss(V ) > 0,
Poss(U jV ) = > 1
: undefined Poss(V ) = 0.
second approach looks like conditioning probability:
(
V \ U )=Poss(V ) Poss(V ) > 0,
Poss(U jjV ) = Poss(
undefined
Poss(V ) = 0.
easy show definitions result coherent cps. (Many notions
conditioning possibility measures defined; see, example (Fonck, 1994). focus
two ones most-often considered literature.)
Sets probabilities: set P probabilities, conditioning defined
representations P plausibility measure. case subtle choices
involving conditioning undefined. example, one definition conditional lower
probability P (U jV ) inf f(U jV ) : (V ) 6= 0g (V ) 6= 0 2 P ,
undefined otherwise (i.e., (V ) = 0 2 P ). easy check P defined
way gives coherent cpm, corresponding definition P . problem
definition may result rather small set F 0 conditioning
defined. example, set V 6= W , measure 2 P
(V ) = 0 (which certainly happen nontrivial examples), F 0 = fW g.
consequence, cps defined way acceptable (i.e., satisfy Acc4)
general.
following definition gives lower probability defined arguments:
(
inf f(U jV ) : (V ) 6= 0g (V ) 6= 0 2 P ,
P (U jV ) = undefined
(V ) = 0 2 P .
easy see definition agrees first one whenever first defined
results, general, larger set F 0 . Moreover, resulting cps acceptable. However,
second definition satisfy CPl5. example, suppose W = fa; b; cg
P = f; 0 g, (a) = (b) = 0, (c) = 1, 0(a) = 2=3, 0(b) = 1=3, 0(c) = 0.
365

fiHalpern

Taking V = fa; bg, U = fag, U 0 = fbg, easy see according second
definition, P (U \ V jW ) = P (U 0 \ V jW ) = 0, P (U jV ) > P (U 0 jV ).
PlP , two analogous definitions. first, PlP (U jV ) defined
(V ) > 0 2 P , case PlP (U jV ) fU jV , fU jV (i) = i(U jV ).
definition gives coherent cps, again, general, one acceptable.
paper, focus following definition, result acceptable cps.
First extend DI allowing functions value (intuitively, denotes undefined). precisely, let DI0 consist functions f [0; 1][fg f (i) 6=
least one 2 . idea define PlP (U jV ) = fU jV , fU jV (i) = (U jV )
(V ) > 0 otherwise. (Note agrees previous definition,
applies situation (V ) > 0 2 P .) problem though,
one already alluded. CPl1 says f;jV must ? V . Thus,
must case f;jV1 = f;jV2 V1 ; V2 W . 2 P V1 ; V2 W
(V1 ) > 0 i(V2 ) = 0, f;jV1 (i) = 0 f;jV2 (i) = , f;jV1 6= f;jV2 .
similar problem arises CPl2.
deal problem DI0 must slightly modified. Say f 2 DI0 equivalent
?D f (i) either 0 * 2 ; similarly, f equivalent >D f (i)
either 1 * 2 . (Since, definition, f (i) 6= least one 2 ,
element cannot equivalent >D ?D .) Let DI DI0 except
elements equivalent ?D identified (and viewed one element)
elements equivalent >D identified. precisely, let DI = f?D ; >D g [ ff 2 D0 :
f equivalent >D ?D g. Define ordering DI taking f g one
following three conditions holds:
f = ?D ,
g = >D ,
neither f g ?D >D 2 , either f (i) = g(i) = f (i) 6= ,
g(i) 6= , f (i) g(i).
define
8?
(V ) 6= 0 2 P
>

>
>
(V ) 6= 0 implies (U jV ) = 0 2 P ,
<
9 2 P ((V ) 6= 0) 8 2 P ((V ) 6= 0 ) (U jV ) = 1),
PlP (U jV ) = > >D
>
(V ) = 0 2 P ,
>
: undefined
fU jV
otherwise.
































easy check gives coherent cps.
Plausibility measures: construction PlP used convert FH-cps
cps. demonstrate idea showing construct conditional plausibility
measure unconditional plausibility measure. Given unconditional plausibility
space (W; F ; Pl) range D, FH-cps constructed (Friedman & Halpern, 1995)
defining Pl(U jV ) = Pl(U \ V ). Thus, DV = fd 2 : Pl(V )g >D = Pl(V ).
cps CPl2 satisfied, FH-cps, since Pl1{3 satisfied
fixed V , CPl5. observed (Friedman & Halpern, 1995), fact
V

366

fiConditional Plausibility Measures Bayesian Networks

FH-cps extending Pl makes minimal number comparisons, sense
Pl0 FH-cps extending Pl Pl(U jV ) Pl(U 0 jV ), Pl0 (U jV ) Pl0 (U 0 jV ).
get cps, let D0 = f(d; V ) : V W; Pl(V ); Pl(V ) > ?D g. Say (d; V )
equivalent ?D = ?D ; say (d; V ) equivalent >D = Pl(V ). let
= f?D ; >D g [ ff 2 D0 : f equivalent >D ?D g. define d0
d; d0 2 iff = ?D , d0 = >D , V W = (d1 ; V ),
d0 = (d2 ; V ), d1 d2 . Finally, U; V 2 F , define
8
>
(Pl(U \ V ); V ) ?D < Pl(U \ V ) < Pl(V ),
>
< >D
Pl(U \ V ) = Pl(V ) > ?D ,
Pl(U jV ) = > ?
Pl(U \ V ) = ?D , Pl(V ) > ?D ,

>
: undefined
Pl(V ) = ?D .
leave reader check Pl coherent cpm. important Pl(U jV )
undefined Pl(V ) = ?D ; tried extend construction V Pl(V ) = ?D ,
would >D = ?D . issue arise (Friedman & Halpern, 1995),
since separate plausibility spaces choice V .

3. Algebraic Conditional Plausibility Measures

able carry type reasoning used Bayesian networks, suce
conditional plausibility. need analogues addition multiplication.
precisely, needs way computing plausibility union
two disjoint sets terms plausibility individual sets way computing
Pl(U \ V jV 0 ) given Pl(U jV \ V 0 ) Pl(V jV 0 ).

Definition 3.1: cps (W; F ; F 0 ; Pl) Pl range algebraic acceptable
functions : !
: ! following

properties hold:
Alg1. U; U 0 2 F disjoint V 2 F 0 Pl(U [ U 0 jV ) = Pl(U jV ) Pl(U 0 jV ).
Alg2. U 2 F , V \ V 0 2 F 0 , Pl(U \ V jV 0 ) = Pl(U jV \ V 0 )
Pl(V jV 0 ).
Alg3.
distributes ; precisely,
(b1 bn ) = (a
b1 ) (a
bn )
(a; b1 ); : : : ; (a; bn ); (a; b1 bn ) 2 DomPl (
) (b1 ; : : : ; bn ); (a
b1 ; : : : ;

bn ) 2 DomPl(), DomPl() = f(Pl(U1 jV ); : : : ; Pl(Un jV )) : U1; : : : ; Un 2 F
pairwise disjoint V 2 F 0 g DomPl (
) = f(Pl(U jV \ V 0 ); Pl(V jV 0 )) : U 2
F ; V \ V 0 2 F 0g.3 (See discussion DomPl() DomPl(
).
sequel, omit subscript Pl clear context.)
Alg4. (a; c); (b; c) 2 Dom(
),
c b
c, c 6= ?, b.
3. conference version paper, Dom( ) taken consist pairs, tuples arbitrary
finite length, distributivity considered terms form (b b0 ). general
version considered slightly stronger. reason possible (a; b1
b)
Dom( ) even though (a; b1
b ) = Dom( ) k n. Note also left distributivity
required here.














k

2




367



n

2

fiHalpern

sometimes refer cpm Pl algebraic well.
may seem natural consider stronger version Alg4 applies pairs
D,
Alg40 .
c b
c c 6= ?, b.
However, Proposition 3.2 shows, requiring Alg3 Alg4 hold
tuples Dom() Dom(
) rather tuples D, cps's interest
become algebraic would otherwise be. Intuitively, care
mainly
extent Alg1 Alg2 holds, Alg1 Alg2 apply tuples Dom()
Dom(
), respectively. Thus, seem unreasonable Alg4 required hold
tuples.

Proposition 3.2: constructions extending unconditional probability measure,
ranking function, possibility measure (using either Poss(U jV ) Poss(U jjV )), plausibility measure PlP defined set P probability measures cps result algebraic
cps's.4
Proof: easy see case cps acceptable. also easy find
appropriate notions
case probability measures, ranking functions,
possibility measures using Poss(U jjV ). probability, clearly
essentially +
; however, since range probability [0; 1], b must defined max(1; + b),
Alg3 holds Dom() = f(a1 ; : : : ; ak ) : a1 + + ak 1g; constraint
Dom(); [0; 1] [0; 1]. ranking,
min +; constraints
Dom(min) Dom(+). Poss(U jjV ), max
; again,
constraints Dom(max) Dom(). leave reader check Alg1{4 hold

cases.
Poss(U jV ), max
min. constraints Dom(max);
however, note (a; b) 2 Dom(min) iff either < b = 1. suppose (a; b) =
(Poss(U jV \ V 0 ); Poss(V jV 0 ), U 2 F V \ V 0 2 F 0 . Poss(U \ V \ V 0 ) =
Poss(V \ V 0 ) = Poss(U jV \ V 0 ) = 1; otherwise, Poss(U \ V \ V 0 ) < Poss(V \ V 0 ),
case = Poss(U jV \ V 0 ) = Poss(U \ V \ V 0 ) < Poss(V \ V 0 ) Poss(V jV 0 ) = b.
easy check Alg1{3. min satisfy Alg40 |certainly min(a; c) = min(b; c)
general imply = b|Alg4 hold. min(a; c) min(b; c)
= 1, clearly b = 1. Alternatively, < c, min(a; c) = way
min(b; c), given b < c b = 1, b.
Finally, PlP ,
essentially pointwise addition multiplication.
subtleties. case probability, Dom() consists sequences
sum 1 index i. Care must also taken dealing ?D
>D . precisely, Dom() consists tuples (f1; : : : ; fn) either




1(a). fj 6= >D ; j = 1; : : : ; n,


1(b). fj ; fk 6= ?D 1 j; k n, fj (i) = iff fk (i) = , 2 ,


4. Essentially result proved (Friedman & Halpern, 1995) cases PlP .

368

fiConditional Plausibility Measures Bayesian Networks

1(c). Pfj :f 6=? ;f (i)6=g fj (i) 1

2. exists j fj = >D fk = ?D k 6= j ;
Dom(
) consists pairs (f; g) either one f g f?D ; >D g neither
f g f?D ; >D g g(i) 2 f0; g iff f (i) = . definition relatively
straightforward. Define f >D = >D f = >D f ?D = ?D f = f .
f; g \ f?D ; >D g = ;, f g = h, h(i) = min(1; f (i) + g(i)) (taking + =
+ = min(1; ) = ). similar spirit, define f
>D = >D
f = f
f
?D = ?D
f = ?D ; ff; gg \ f?D ; >D g = ;, f
g = h,
h(i) = f (i) g(i) (taking = = 6= 0 0 = 0 = 0). important
0 = 0 = , since otherwise Alg3 may hold. example, according
Alg3,
j





j









































((1=2; ; 1=2)
(a; 0; b))((1=2; ; 1=2))
(a; 0; b)) = ((1=2; ; 1=2)(1=2; ; 1=2))
(a; 0; b) = (a; 0; b)
(since (1=2; ; 1=2)(1=2; ; 1=2) = >D ) and, similarly, ((1=2; ; 1=2)
(a; ; b))((1=2; ; 1=2))

(a; ; b)) = (a; ; b). Since 0 = 0 = , equalities hold. leave
reader check that, definitions, Alg1{4 hold (although note restrictions
Dom() Dom(
) required Alg3 Alg4 hold).
Conditional lower probability algebraic. example, hard construct
pairwise disjoint sets U1 , V1 , U2 , V2 set P probability measures
P (Ui) = P (Vi) (and P (Ui) = P (Vi )) = 1; 2, P (U1 [ U2 ) 6= P(V1 [ V2).
means cannot function case lower probability.5
later convenience, list simple properties algebraic cpms show ?
> act like 0 1 respect addition multiplication. Let Range(Pl) = fd :
Pl(U jV ) = (U; V ) 2 F F 0 g.


Lemma 3.3: (W; F ; F 0 ; Pl) algebraic cps, ? = ? = 2

Range(Pl).

Proof: Suppose = Pl(U jV ). Alg1, follows
= Pl(U jV ) = Pl(U [ ;jV ) = Pl(U jV ) Pl(;jV ) = ?:
similar argument shows = ? d.
Lemma 3.4: (W; F ; F 0 ; Pl) algebraic cps then, 2 Range(Pl),
(a)
> = d;
5. readers familiar Dempster-Shafer belief functions (Shafer, 1976), provide another example
plausibility measure. two well-known ways defining conditioning belief functions
(see (Fagin & Halpern, 1991)), one using Dempster's rule combination treating belief
functions lower probabilities. Neither leads algebraic cps, discussed
belief functions paper.

369

fiHalpern

(b) 6= ?, >
= d;
(c) 6= ?, ?
= ?;
(d) (d; ?) 2 Dom(
), >
? =
? = ?
? = ?.

Proof: Suppose = Pl(U jV ). Alg2, CPl2, CPl4, follows
= Pl(U jV ) = Pl(U \ V jV ) = Pl(U jV )
Pl(V jV ) =
>:
Similarly, =
6 ?, U \ V 2 F 0 (by Acc4),
= Pl(U jV ) = Pl(U \ V jV ) = Pl(U \ V jU \ V )
Pl(U \ V jV ) = >
d:
=
6 ?, Alg2, CPl1, CPl4
? = Pl(?jV ) = Pl(?jU \ V )
Pl(U jV ) = ?
d:
Finally, (d; ?) 2 Dom(
), exist U; V; V 0 V \V 0 2 F 0 , Pl(U jV \V 0 ) =
Pl(V jV 0 ) = ?. Alg2, Pl(U \ V jV 0 ) = Pl(U jV \ V 0 )
Pl(V jV 0 ) =
?. CPl3,
Pl(U \ V jV 0 ) Pl(V jV 0 ) = ?, Pl(U \ V jV 0 ) = ?. Thus,
? = ?. Replacing U
V \ V 0 , argument shows >
? = ?; replacing U ;, get
?
? = ?.
conclude section showing standard algebraic cps satisfies one
minimal property must also satisfy CPl5. Say
monotonic d0 e e0

e d0
e0 . cpm (cps) monotonic
is.

Lemma 3.5: standard algebraic monotonic cps satisfies CPl5.
Proof: Suppose (W; F ; F 0 ; Pl) standard algebraic cps V \ V 0 2 F 0 .
Pl(U jV \ V 0 ) Pl(U 0 jV \ V 0 ), follows Alg2 monotonicity
Pl(U \ V jV 0 ) = Pl(U jV \ V 0 )
Pl(V jV 0 ) Pl(U 0 jV \ V 0 )
Pl(V jV 0 ) = Pl(U 0 \ V jV 0 ):
opposite implication, suppose Pl(U \ V jV 0 ) Pl(U 0 \ V jV 0 ). Then, Alg2,
Pl(U jV \ V 0 )
Pl(V jV 0 ) Pl(U 0 jV \ V 0 )
Pl(V jV 0 ):
(1)
Since V \V 0 2 F 0 cps standard, must case Pl(V \V 0 ) =
6 ?. Hence (by
0
0
0
CPl3), Pl(V ) =
6 ?; moreover, Pl(V jV ) =6 ? (otherwise Pl(V \ V ) = Pl(V jV 0)
Pl(V 0 ) =
?). Thus, applying Alg4 (1), follows Pl(U jV \ V 0) Pl(U 0jV \ V 0).

4. Independence

capture formally notion two events independent? Intuitively,
means nothing other|they totally unrelated; occurrence one uence other. None representations uncertainty
considering express notion \unrelatedness" (whatever might
370

fiConditional Plausibility Measures Bayesian Networks

mean) directly. best capture \footprint" independence
notion. example, case probability, U V unrelated, seems reasonable expect learning U affect probability V symmetrically,
learning V affect probability U . \Unrelatedness" is, all, symmetric
notion.6 fact U V probabilistically independent (with respect probability measure ) thus expressed (U jV ) = (U ) (V jU ) = (V ).
technical problem definition: happens (V ) = 0? case (U jV )
undefined. Similarly, (U ) = 0 (V jU ) undefined. conventional say that,
case, U V still independent. leads following formal definition.

Definition 4.1: U V probabilistically independent (with respect probability measure ) (V ) =
6 0 implies (U jV ) = (U ) (U ) 6= 0 implies (V jU ) = (V ).
look like standard definition independence texts, easy
calculation shows equivalent.
Proposition 4.2: following equivalent:
(a) (U ) 6= 0 implies (V jU ) = (V ),
(b) (U \ V ) = (U )(V ),
(c) (V ) 6= 0 implies (U jV ) = (U ).
Thus, case probability, would equivalent say U V independent respect (U \ V ) = (U )(V ) require (U jV ) = (U )
(V ) 6= 0 without requiring (V jU ) = (V ) (U ) 6= 0. However, equivalences necessarily hold representations uncertainty. definition
independence given seems generalize appropriately.7
definition probabilistic conditional independence analogous.
Definition 4.3: U V probabilistically independent given V 0 (with respect probability measure ) (V \ V 0 ) 6= 0 implies (U jV \ V 0 ) = (U jV 0 ) (U \ V 0 ) 6= 0 implies
(V jU \ V 0) = (V jV 0).
immediate U V (probabilistically) independent iff independent
conditional W .
generalization conditional plausibility measures (and hence representations uncertainty considering) straightforward.
Definition 4.4: Given cps (W; F ; F 0 ; Pl), U; V 2 F plausibilistically independent
given V 0 2 F (with respect cpm Pl), written IPl (U; V jV 0 ), V \ V 0 2 F 0 implies
Pl(U jV \ V 0 ) = Pl(U jV 0 ) U \ V 0 2 F 0 implies Pl(V jU \ V 0 ) = Pl(V jV 0 ).
6. Walley (1991) calls asymmetric notion irrelevance defines U independent V U
irrelevant V V irrelevant U . Although focus independence, irrelevance
interesting notion right; see (Cozman, 1998; Cozman & Walley, 1999).
7. Another property probabilistic independence U independent V U independent
V . follow representations uncertainty, Walley (1991) actually
makes part definition. Adding requirement would affect results here,
although would make proofs somewhat lengthier, made part definition.

371

fiHalpern

interested conditional independence random variables well conditional independence events. standard definitions extend plausibility
straightforward way. random variable X W function W reals. Let
R(X ) set possible values X (that is, set values X ranges).
usual, X = x event fw : X (w) = xg. X = fX1 ; : : : ; Xk g set random variables
x = (x1 ; : : : ; xk ), let X = x abbreviation event X1 = x1 \ : : : \ Xk = xk .
random variable measurable respect cps (W; F ; F 0 ; Pl) X = x 2 F
x 2 R(X ). rest paper, assume random variables X measurable R(X ) finite random variables X . Random variables X
independent respect plausibility measure Pl events X = x =
independent x 2 R(X ) 2 R(Y ). generally, given sets X, Y, Z
random variables, X plausibilistically independent given Z (with respect Pl),
denoted IPlrv (X; YjZ), IPl (X = x; = xjZ = z) x, y, z. (Note using
IPl conditional independence events IPlrv conditional independence random
variables.) Z = ;, IPlrv (X; YjZ) X unconditionally independent,
is, IPl (X = x; = xjW ) x, y; either X = ; = ;, IPlrv (X; YjZ) taken
vacuously true.
consider following four properties random variables, called semi-graphoid
properties (Pearl, 1988), X, Y, Z pairwise disjoint sets variables.
CIRV1. IPlrv (X; YjZ) IPlrv (Y; XjZ).

CIRV2. IPlrv (X; [ Y0 jZ) IPlrv (X; YjZ).

CIRV3. IPlrv (X; [ Y0 jZ) IPlrv (X; YjY0 [ Z).

CIRV4. IPlrv (X; YjZ) IPlrv (X; Y0 jY [ Z) IPlrv (X; [ Y0 jZ).
well known CIRV1{4 hold probability measures. following result
generalizes this. proof dicult, although care must taken show
result depends properties algebraic cpms.

Theorem 4.5: CIRV1{4 hold algebraic cps's.
Proof: See appendix.
Theorem 4.5, course, dependent definition conditional independence
given here. notions independence studied literature specific
representations uncertainty. Perhaps common definition tries generalize
observation U V probabilistically independent, (U \ V ) = (U ) (V ).
Zadeh (1978) considered approach context possibility measures, calling
noninteraction, clearly makes sense algebraic cpm.

Definition 4.6: U V interact given V 0 (with respect algebraic cpm Pl),
denoted NI Pl (U; V jV 0 ), V 0 2 F 0 implies Pl(U \ V jV 0 ) = Pl(U jV 0 )
Pl(V jV 0 ).8
8. Shenoy (1994) defines notion similar spirit noninteraction random variables.

372

fiConditional Plausibility Measures Bayesian Networks

Fonck (1994) shows noninteraction strictly weaker independence number notions independence possibility measures. following result shows
independence implies noninteraction algebraic cpms.

Lemma 4.7: (W; F ; F 0 ; Pl) algebraic cps, IPl(U; V jV 0) implies NI Pl(U; V jV 0 ).
Proof: Suppose V 0 2 F 0 IPl(U; V jV 0) holds. V \ V 0 2 F 0 then, Alg2,
follows

Pl(U \ V jV 0 ) = Pl(U jV \ V 0 )
Pl(V jV 0 ) = Pl(U jV 0 )
Pl(V jV 0 ):
hand, V \ V 0 2= F 0 , Acc4, Pl(V jV 0 ) = ?. CPl3, Pl(U \ V jV 0 ) = ?,
Lemma 3.3, Pl(U jV 0 )
Pl(V jV 0 ) = ?. Thus, Pl(U \ V jV 0 ) = Pl(U jV 0 )
Pl(V jV 0 ).
converse Lemma 4.7? results Fonck show hold
general|indeed, hold Poss(U jV ). required noninteraction
imply independence? following lemma provides sucient condition.

Lemma 4.8: (W; F ; F 0 ; Pl) standard algebraic cps satisfies Alg40, NI Pl(U; V jV 0)
implies IPl (U; V jV 0 ).
Proof: Suppose V \ V 0 2 F 0 NI Pl(U; V jV 0). Alg2,
Pl(U \ V jV 0 ) = Pl(U jV \ V 0 )
Pl(V jV 0 ):
(2)
Acc3, V 0 2 F 0 , NI Pl (U; V jV 0 ) implies
Pl(U \ V jV 0 ) = Pl(U jV 0 )
Pl(V jV 0 ):
(3)
Since V \ V 0 2 F 0 (W; F ; F 0 ; Pl) standard, Pl(V \ V 0 ) =
6 ?. Since Pl(V \ V 0) =
Pl(V jV 0 )
Pl(V 0 ), follows Lemma 3.4 Pl(V jV 0 ) =
6 ?. So, Alg40 , (2),
0
0
(3), follows Pl(U jV \ V ) = Pl(U jV ). identical argument shows
Pl(V jU \ V 0 ) = Pl(V jV 0 ) U \ V 0 2 F 0 . Thus, IPl(U; V jV 0 ).
Lemmas 4.7 4.8 show noninteraction independence coincide conditional
probability defined unconditional probability, ranking functions, possibility measures using Poss(U jjV ). Moreover, suggest coincide general. Since
neither Poss(U jV ) PlP satisfy Alg40 , perhaps surprising neither case
noninteraction imply conditional independence. (We shall shortly see example
case PlP ; Fonck (1994) gives examples case Poss(U jV ).) Indeed, noninteraction may even imply conditional independence arbitrary conditional probability
measure, following example shows.
Example 4.9: Suppose W = fa; bg, F = 2W , F 0 = F , f;g, (a) = 1, (b) = 0,
(bjb) = 1. easy see fbg independent itself, fbg interact
fbg, since (b) = (b) (b). Nevertheless, hard check conditional
probability measure algebraic and, fact, satisfies Alg40 . However, standard,
since fbg 2 F 0 although (b) = 0.
373

fiHalpern

easy see assumption standardness necessary Lemma 4.8.
suppose (W; F ; F 0 ; Pl) arbitrary nonstandard algebraic cps > 6= ?.
Since (W; F ; F 0 ; Pl) nonstandard, must exist U 2 F 0 Pl(U jW ) = ?.

? = Pl(;jW ) = Pl(;jU )
Pl(U jW ) = ?
?:
Thus
Pl(U jW ) = ? = ?
? = Pl(U jW )
Pl(U jW );
NI Pl(U; U jW ). Pl(U jU ) = > 6= ? = Pl(U ), IPl (U; U jW ) hold.
general, Theorem 4.5 hold use NI Pl rather IPl . is, Alg1{4
suce ensure CIRV1{4 hold NI Pl . Besides noninteraction, number
different approaches defining independence possibility measures (Campos & Huete,
1999a, 1999b; Dubois, Fari~nas del Cerro, Herzig, & Prade, 1994; Fonck, 1994) sets
probability measures (Campos & Huete, 1993; Campos & Moral, 1995; Cousa et al.,
1999) considered. general, Theorem 4.5 hold either.
beyond scope paper discuss compare approaches considered
here, instructive consider independence sets probability measures
little detail, especially representation PlP .
De Campos Moral (1995) define call type-1 independence. U V
type-1 independent conditional V 0 respect P U V independent
conditional V 0 respect every 2 P . easy check type-1 independence
equivalent noninteraction context sets probability measures. Thus,
Lemma 4.7, IPlP (U; V jV 0 ) implies U V type-1 independent conditional
V 0 (and similarly random variables). However, converse necessarily hold,
two approaches treat conditioning events probability 0 according
(but all) measures P differently. see this, consider example
discussed de Campos Moral. Suppose coin known either double-headed
double-tailed tossed twice. represented P = f0 ; 1 g, 0 (hh) =
1 0 (ht) = 0 (th) = 0 (tt) = 0, 1 (tt) = 1 1 (ht) = 1 (th) = 1 (hh) = 0.
Let X1 X2 random variables representing outcome first second
coin tosses, respectively. Clearly functional dependence X1 X2 ,
easy check X1 X2 type-1 independent respect P . Moreover,
noninteraction holds: NI Pl(X1 = i; X2 = j ) holds i; j 2 fh; tg. hand,
IPlP (X1 ; X2 ) hold. example, fX1=h(1) = 0 fX1=hjX2 =h(1) = .9
difference noninteraction (i.e., type-1 independence) definition
independence used paper context sets probability measures summarized follows. U V interact respect P U V independent
9. Peter Walley [private communication, 2000] points out, example somewhat misleading.
definition independence respect PlP produces counterintuitive behavior type-1
independence probabilities modified slightly make positive, i.e.,
\almost functional dependence" two variables. example, suppose coin
example known either land heads probability :99 :01 (rather 1 0, example).
Let 00 01 obvious modifications 0 1 required represent situation, let
0 = 00 ; 01 . easy check X1 X2 continue type-1 independent, noninteraction
continues hold, IPl (X1 ; X2 ) also holds. real problem representation
uncertainty enable learning.
P

f

g

P0

374

fiConditional Plausibility Measures Bayesian Networks

respect measures 2 P . hand, U V independent
respect P (1) U V independent measures 2 P (U ) > 0
(V ) > 0 (2) (U ) = 0 iff (V ) = 0 2 P . definition independence used
thus restrictive; ignore measures give U V probability 0
determining independence. difference two approaches illustrated
example previous paragraph.
variant example considered Footnote 9 shows though, neither definition
completely claim represent intuition U independent V , learning
U gives information V . coin example known land heads
probability either .99 .01, seeing first coin toss land heads certainly seems
give information second coin toss, even though definitions would declare
events independent. However, definition independence used
advantage leading algebraic cps, means, shown next section,
using leads representation sets probability measures represented
Bayesian network.

5. Bayesian Networks

Throughout section, assume start set W possible worlds characterized
set X = fX1 ; : : : ; Xn g n binary random variables. is, world W tuple
(x1 ; : : : ; xn ) xi 2 f0; 1g, Xi (x1 ; : : : ; xn ) = xi ; is, value Xi world
w = (x1 ; : : : ; xn ) = wi.10 goal section show many tools
Bayesian network technology applied setting. proofs main results
proceed essentially spirit well-known results probabilistic Bayesian
networks (see (Geiger & Pearl, 1988; Geiger et al., 1990; Verma, 1986)).

5.1 Qualitative Bayesian Networks

usual, (qualitative) Bayesian network (over X ) dag whose nodes labeled
variables X . standard notion Bayesian network representing probability
measure (Pearl, 1988) generalized obvious way plausibility.
Definition 5.1: Given qualitative Bayesian network G, let ParG(X ) parents
random variable X G; let DesG (X ) descendants X , is, X
nodes X ancestor ; let NDG (X ), nondescendants X , consist
X , DesG (X ). Note ancestors X nondescendants X . Bayesian
network G compatible cps (W; F ; F 0 ; Pl) (or compatible Pl,
components cps clear context) IPlrv (X; NDG (X )jPar(X )), is, X
conditionally independent nondescendants given parents, X 2 X .
standard way constructing Bayesian network represents probability measure (Pearl, 1988). brie review construction here, since works without
change algebraic cpm. Given algebraic cpm Pl, let Y1 ; : : : ; Yn permutation random variables X . Construct qualitative Bayesian network GPl;hY1 ;:::;Y
n

10. assumption random variables binary ease exposition. easy generalize
results case (X ) finite X ; need assume (X )
subset reals.
R





375

R



fiHalpern

follows: k, find minimal subset fY1 ; : : : ; Yk,1 g, call Pk ,
IPlrv (fY1 ; : : : ; Yk,1 g; Yk jPk ). add edges nodes Pk Yk . Verma
(1986) shows construction gives Bayesian network compatible Pl
case Pl probability measure; proof depends CIRV1{4. Thus,
construction works algebraic cpms.

Theorem 5.2: GPl;hY1 ;:::;Y compatible Pl.
Proof: ease notation proof, write G instead GPl;hY1 ;:::;Y . Note
Y1 ; : : : ; Yn represents topological sort G; edges always go nodes fY1 ; : : : ; Yk,1g
n

n

Yk . follows G acyclic; i.e., dag. construction guarantees
Pk = ParG(Yk ) IPlrv (fY1 ; : : : ; Yk,1g; Yk jParG(Yk )). follows results (Verma,
1986) (and hard verify directly) IPlrv (NDG (Yk ); Yk jParG (Yk )) proved
using CIRV1{4. result follows Theorem 4.5.

5.2 Quantitative Bayesian Networks

qualitative Bayesian network G gives qualitative information dependence independence, actually give values conditional plausibilities. provide
quantitative information, associate node X G conditional plausibility table (cpt) quantifies effects parents X X . cpt X gives,
setting X 's parents G, plausibility X = 0 X = 1 given
setting. example, X 's parents G Z , cpt X would
entry denoted dX =ijY =j \Z =k (i; j; k) 2 f0; 1g3 . notation meant suggest,
dX =ijY =j \Z =k = Pl(X = ijY = j \ Z = k) plausibility measure Pl represented
G.11 fixed j k, assume x0jk x1jk = >. quantitative Bayesian
network pair (G; f ) consisting qualitative Bayesian network G function f
associates node X G cpt X .

Definition 5.3: quantitative Bayesian network (G; f ) represents Pl G compatible

Pl cpts agree Pl, sense that, random variable X , entry
dX =ijY1 =j1 ;:::;Y =j cpt Pl(X = ijY1 = j1 \: : :\Yk = jk ) Y1 = j1 \: : :\Yk = jk 2 F 0 .
(It matter dX =ijY1 =j1 ;:::;Y =j Y1 = j1 \ : : : \ Yk = jk 2= F 0 .)
k

k

k

k

Given cpm Pl, easy construct quantitative Bayesian network (G; f )
represents Pl: simply construct G compatible Pl Theorem 5.2 define
f appropriately, using Pl. interesting question whether unique
algebraic cpm determined quantitative Bayesian network. stated, question
somewhat undetermined. numbers quantitative network say

ought algebraic cpm.
reasonable way make question interesting following. Recall that,
purposes section, taken W consist 2n worlds characterized
n binary random variables X . Let PLD;;
consist standard cps's form
(W; F ; F 0 ; Pl), F = 2W , subsets W measurable, range Pl
11. course, random variables binary, i; j; k range possible values
random variables.

376

fiConditional Plausibility Measures Bayesian Networks

D, Pl algebraic respect
. Thus, example, PLIN ;min;+ consists
conditional ranking functions W defined unconditional ranking functions
construction Section 2. Since cps (W; F ; F 0 ; Pl) 2 PLD;;
determined Pl,
often abuse notation write Pl 2 PLD;;
.
notation, question becomes whether quantitative Bayesian network
(G; f ) entries cpts determines unique element PLD;;
.
show, answer yes, provided (D; ;
) satisfies conditions. Characterizing
conditions (D; ;
) required result turns little subtle. Indeed,
somewhat surprising many assumptions required reproduce simple
arguments required case probability.

Definition 5.4: (D; ;
) BN-compatible domain (with respect PLD;;
)
sets D(
) D() [ D2 [ D3 [ : : : satisfying following properties:
BN1.
commutative associative.
BN2. 2 D, (>; d); (?; d) 2 D(
), (?; d) 2 D(), >
= d, ?
= ?,
? = d.
BN3.
distributes ; precisely,
(b1 bn ) = (a
b1 ) (a
bn )
(a; b1 ); : : : ; (a; bn ); (a; b1 bn) 2 D(
) (b1 ; : : : ; bn ); (a
b1 ; : : : ;
bn ) 2 D();
moreover, (a1 )
b = a1
b
b (a1 ; : : : ; ); (a1
b; : : : ;
b) 2
D() (a1 an; b); (a1 ; b); : : : ; (an ; b) 2 D(
).
BN4. (a; c); (b; c) 2 D(
),
c b
c, c =
6 ?, b.
BN5. (d1 ; : : : ; dk ) 2 D() d1 dk d, exists (d01 ; : : : ; d0k ) 2 D()
(d01 ; d); : : : ; (d0k ; d); (d01 d0k ; d) 2 D(
), di = d0i
d, = 1; : : : ; k,
d1 dk = (d01 d0k )
d.
BN6. D() closed permutations prefixes, (x1 ; : : : ; xk ) 2 D()
permutation (1; : : : ; k), (x(1) ; : : : ; x(k) ) 2 D() k0 k,
(x1 ; : : : ; xk0 ) 2 D(); moreover D() D.
BN7. (d1 ; : : : ; dk ); (d01 ; : : : ; d0m ) 2 D(), (di ; d0j ) 2 D(
) = 1; : : : ; k, j = 1; : : : ; m,
(d1
d01 ; : : : ; d1
d0m ; : : : ; dk
d01 ; : : : ; dk
d0m ) 2 D().
BN8. (d1 ; : : : ; dk ) 2 D() k0 k, d1 dk0 d1 dk .
Note representations uncertainty considered far associated
BN-compatible domains. Indeed, definitions D(), D(
), ,

case given proof Proposition 3.2. example, PL[0;1];max;min,
set conditional possibility measures determined unconditional possibility measures,
D() = [0; 1] [0; 1], D(
) consists pairs (a; b) 2 [0; 1] [0; 1] < b
= 1. leave reader check that, cases, BN1{8 hold.
Given tuple x = (x1 ; : : : ; xn ) 2 [0; 1]n , let dX ;G;x denote value dX =x jPar (X )=y ,
restriction x variables ParG (Xi ).


377





G



fiHalpern

Definition 5.5: (D; ;
) BN-compatible, quantitative Bayesian network (G; f )
(D; ;
)-representable values cpts G lie following properties
hold:
R1. every node X G every setting ParG (X ), (dX =0jPar (X )=y ; dX =1jPar (X )=y ) 2
Dom()
dX =0jPar (X )=y dX =1jPar (X )=y = >:
G

G

G

G

R2. Suppose Y1 ; : : : ; Yn topological sort nodes G. 2 f0; 1gn
1 j < k n, (dY ;G;y ; dY +1 ;G;y

dY ;G;y ) 2 D(
) (dY ;G;y


dY ,1 ;G;y ; dY ;G;y ) 2 D(
).
j

k

j

k

j

k

R1 obvious analogue requirement probabilistic case entries
cpt X , fixed setting X 's parents, add 1. R2 essentially says
certain terms (the ones required compute plausibility = = hY1 ; : : : ; Yn i)
required D(
), makes sense take product. Since D(
) =
[0; 1] [0; 1] case probability, need make requirement explicit.
However, necessary representations uncertainty.
following result shows that, name suggests, unique cpm
represents representable quantitative Bayesian network.

Theorem 5.6 : (G; f ) (D; ;
)-representable, unique cpm Pl 2
PLD;;
(G; f ) represents Pl.
5.3 D-Separation

case probability, conditional independencies read Bayesian
network using criterion d-separation (Pearl, 1988). Recall set X nodes
G = (V; E ), d-separated set nodes set Z nodes G, written
d-sep G (X; YjZ), if, every X 2 X, 2 Y, trail X (that is, sequence
(X0 ; : : : ; Xk ) nodes G X0 = X , Xk = either (Xi ; Xi+1 ) (Xi+1 ; Xi )
directed edge G) node Xi trail 0 < < k either:
(a) Xi 2 Z arrow leading Xi arrow leading (i.e., either
(Xi,1 ; Xi ); (Xi ; Xi+1 ) 2 E (Xi ; Xi,1 ); (Xi+1 ; Xi ) 2 E
(b) Xi 2 Z Xi tail-to-tail node (i.e., (Xi ; Xi,1 ); (Xi ; Xi+1 ) 2 E )
(c) Xi head head node (i.e., (Xi,1 ; Xi ); (Xi+1 ; Xi ) 2 E ), neither Xi
descendants Z.
Let G;Pl consist statements form IPlrv (X; NDG (X )jParG (X )). Let PLD;;

arbitrary collection cps's form (W; F ; F 0 ; Pl) components
Pl fixed, plausibility measures Pl range plausibility
values. Consider following three statements:
1. d-sep G (X; YjZ).
2. IPlrv (X; YjZ) provable CIRV1{4 G;Pl.
378

fiConditional Plausibility Measures Bayesian Networks

3. IPlrv (X; YjZ) holds every plausibility measure PLD;;
compatible G.
implication 1 2 proved (Geiger et al., 1990; Verma, 1986).

Theorem 5.7: (Geiger et al., 1990; Verma, 1986) d-sep G(X; YjZ), IPlrv (X; YjZ)
provable CIRV1{4 G;Pl.

immediate Theorem 4.5 implication 2 3 holds algebraic
cpms.
Corollary 5.8: IPlrv (X; YjZ) provable CIRV1{4 G;Pl, IPlrv (X; YjZ)
holds every algebraic cpm Pl compatible G.
Finally, implication 3 1 probability measures proved (Geiger & Pearl,
1988; Geiger et al., 1990). generalize proof algebraic plausibility measures.
Notice prove implication 3 1, suces show X dseparated Z G, plausibility measure Pl 2 PLD;;

IPlrv (X; jZ) hold. guarantee plausibility measure exists PLD;;
,
ensure \enough" plausibility measures PLD;;
following
technical sense.

Definition 5.9: BN-compatible domain (D; ;
) rich exist d; d0 2
(1) (d; d0 ) 2 D(), (2) d0 = > (3) x = x1
: : :
xk , xi either
d0 k < n, (d; x), (x; d), (d0 ; x), (x; d0 ) D(
) (intuitively, D(
)

contains products involving d0 length n).

domains cps's considered easily seen rich.

Theorem 5.10: Suppose plausibility measures PLD;;
take values rich BNcompatible domain. IPlrv (X; YjZ) holds every plausibility measure PLD;;

compatible G, d-sep G (X; YjZ).
remark independence d-separation various approaches representing sets
probability measures using Bayesian networks discussed Cozman (2000b, 2000a).
However, technical details quite different approach taken here.

6. Conclusion

considered general notion conditional plausibility generalizes standard notions conditioning literature, examined various requirements
could imposed conditional plausibility. One set requirements, lead
algebraic cps's, shown suce construction Bayesian networks.
assuming range plausibility measure BN-compatible domain suces
quantitative properties Bayesian networks hold d-separation
characterize independencies. also clear standard constructions like
belief propagation Bayesian networks (Pearl, 1988) also applied algebraic cps's
ranges BN-compatible, since typically use basic properties conditioning, addition, multiplication, hold BN-compatible domains (using
379

fiHalpern


). particular, results apply sets probability measures, provided

appropriately represented plausibility measures. particular representation
sets probability measures advocated paper also shown number
attractive properties.
results paper show Alg1{4 sucient conditions representing
measure uncertainty acceptable Bayesian network. may
necessary. would interesting see natural conditions also suce. Similarly,
focused acceptable cps's, is, ones satisfy Acc1{4. Acc3 Acc4
nontrivial conditions; would interest see extent could weakened
still able prove results spirit paper. leave questions
future research.

Appendix A. Proofs

section give proofs Theorems 4.5, 5.6, 5.10. repeat statement
results convenience reader.

Lemma A.1: Suppose (W; F ; F 0 ; Pl) cps, A1 ; : : : ; partition W , X; A1 ; : : : ; 2
F , 2 F 0 .
Pl(X jY ) = fi:A \Y 2F 0 g Pl(X jAi \ )
Pl(Ai jY ):12


Proof: Using easy induction argument, follows Alg1
Pl(X jY ) = ni=1 Pl(X \ Ai jY ):
Ai \ 2= F 0 , follows Acc4 Pl(Ai jY ) = ?. Thus, CPl3, Pl(X \ Ai jY ) =
?. Using Lemma 3.3, follows
Pl(X jY ) = fi:A \Y 2F 0 g Pl(X \ Ai jY ):
Ai \ 2 F 0 , follows Alg2 Pl(X \ Ai jY ) = Pl(X jAi \ )
Pl(Ai jY ).


Thus,

Pl(X jY ) = fi:A \Y 2F 0 g Pl(X jAi \ )
Pl(Ai jY );


desired.

Theorem 4.5: CIRV1{4 hold algebraic cps's.
Proof: CIRV1 immediate fact independence symmetric.
CIRV2, suppose IPlrv (X; [ Y0 jZ). must show IPlrv (X; YjZ). is,
must show IPl (X = x; = yjZ = z), x, y, z. requires showing two

things.

0 , Pl(X ) Pl(A ) = Pl(X ) Alg2. Thus, terms
12. Notice
arising right-hand side equation Lemma A.1 Dom( ). means
need put parentheses; associative terms Dom( ).
\

2 F

j

\




ij

\

ij







380

fiConditional Plausibility Measures Bayesian Networks

2(a). X = x \ Z = z 2 F 0 ,
Pl(Y = yjX = x \ Z = z) = Pl(Y = yjZ = z):
2(b). = \ Z = z 2 F 0 ,
Pl(X = xjY = \ Z = z) = Pl(X = xjZ = z):
2(a), suppose Pl(X = x \ Z = z) 2 F 0 . IPl (X; [ Y0jZ), follows
IPl (X = x; = \ Y0 = y0jZ = z) y0 . Hence
Pl(Y = \ Y0 = y0 jX = x \ Z = z) = Pl(Y = \ Y0 = y0 jZ = z)

(4)

y0 2 R(Y0 ). (4) follows

y0 Pl(Y = \ Y0 = y0 jX = x \ Z = z) = y0 Pl(Y = \ Y0 = y0 jZ = z):
Thus,
Pl([y0 = \ Y0 = y0 jX = x \ Z = z) = Pl([y0 = \ Y0 = y0 jZ = z):
Since [y0 (Y = \ Y0 = y0 ) = = y, 2(a) holds.
2(b), IPlrv (X; [ Y0 jZ), follows = \ Y0 = y0 \ Z = z 2 F 0 ,
Pl(X = xjY = \ Y0 = y0 \ Z = z) = Pl(X = xjZ = z):

(5)

(5) Lemma A.1, follows
Pl(X = xjY = \ Z = z)
= fy0 :Y=y\Y0 =y0 \Z=z2F 0 g Pl(X = xjY = \ Y0 = y0 \ Z = z)
Pl(Y0 = y0 jY = \ Z = z)
= fy0 :Y=y\Y0 =y0 \Z=z2F 0 g Pl(X = xjZ = z)
Pl(Y0 = y0 jY = \ Z = z):
(6)
0
0
0
0
0
Acc4, follows = \ = \ Z = z 2= F , Pl(Y = jY = \
Z = z) = ?. Thus, Lemma 3.3, Alg1, CPl2, CPl4,

fy0:Y=y\Y0=y0\Z=z2F 0 gPl(Y0 = y0 jY = \ Z = z)
= y0 Pl(Y0 = y0 jY = \ Z = z)
= Pl(W jY = \ Z = z)
= >:

(7)

next step apply distributivity (Alg3) last line (6). this,
must show certain tuples Dom() Dom(
), respectively. Since
(Pl(X = xjY = \ Y0 = y0 \ Z = z); Pl(Y0 = y0 jY = \ Z = z) 2 Dom(
);
(5) follows
(Pl(X = xjZ = z); Pl(Y0 = y0 jY = \ Z = z)) 2 Dom(
):
381

fiHalpern

fyi0 1 ; : : : ; yi0 g = fy0 2 R(Y0 ) : = \ Y0 = y0 \ Z = z 2 F 0 g, clearly
k

(Pl(Y0 = y0i1 jY = \ Z = z); : : : ; Pl(Y0 = y0i jY = \ Z = z) 2 Dom():
k

Moreover, using (5) Alg2, follows
Pl(X = xjZ = z)
Pl(Y0 = y0i jY = \ Z = z) = Pl(X = x \ Y0 = y0i jY = \ Z = z):
k

k

Thus, (Pl(X = xjZ = z)
Pl(Y0 = y0i1 jY = y\Z = z); : : : ; Pl(X = xjZ = z)
Pl(Y0 = y0i jY = y\
Z = z) 2 Dom(). Finally, since (7) shows fy0:Y=y\Y0=y0\Z=z2F 0g = > and,
proof Lemma 3.4, (d; >) 2 Dom(
) 2 Range(Pl), follows
k

(Pl(XjZ = z); fy0 :Y=y\Y0 =y0 \Z=z2F 0 g Pl(Y0 = y0 jY = \ Z = z)) 2 Dom(
):
follows, using Alg3, (7), Lemma 3.4,

fy0:Y=y\Y0=y0\Z=z2F 0gPl(X = xjZ = z)
Pl(Y0 = y0 jY = \ Z = z)
= Pl(X = xjZ = z)
(fy0 :Y=y\Y0 =y0 \Z=z2F 0 g Pl(Y0 = y0 jY = \ Z = z))
= Pl(X = xjZ = z)
>
= Pl(X = xjZ = z):
Thus, (6), follows Pl(X = xjY = \ Z = z) = Pl(X = xjZ = z). com-

pletes proof 2(b) CIRV2.
CIRV3, suppose IPlrv (X; [ Y0 jZ). must show IPlrv (X; YjY0 [ Z).
requires showing two things:
3(a). X = x \ Y0 = y0 \ Z = z 2 F 0 ,
Pl(Y = yjX = x \ Y0 = y0 \ Z = z) = Pl(Y = yjY0 = y0 \ Z = z):
3(b). = \ Y0 = y0 \ Z = z 2 F 0 ,
Pl(X = xjY = \ Y0 = y0 \ Z = z) = Pl(X = xjY0 = y0 \ Z = z):
3(a), suppose X = x\Y0 = y0 \Z = z 2 F 0 . Thus, Acc3, X = x\Z = z 2 F 0 .
Since IPlrv (X; [ Y0 jZ), follows
Pl(Y = y00 \ Y0 = y0 jX = x \ Z = z) = Pl(Y = y00 \ Y0 = y0 jZ = z)
y00 2 R(Y). Applying Alg2 side (8), follows
Pl(Y = yjY0 = y0 \ X = x \ Z = z)
Pl(Y0 = y0 jX = x \ Z = z)
= Pl(Y = yjY0 = y0 \ Z = z)
Pl(Y0 = y0 jZ = z):
Thus, prove 3(a), follows Alg4 suces show
Pl(Y0 = y0 jX = x \ Z = z) = Pl(Y0 = y0 jZ = z) 6= ?:
382

(8)

fiConditional Plausibility Measures Bayesian Networks

(8) Alg1, follows
Pl(Y0 = y0 jX = x \ Z = z)
= y00 2R(Y) Pl(Y = y00 \ Y0 = y0 jX = x \ Z = z)
= y00 2R(Y) Pl(Y = y00 \ Y0 = y0 jZ = z)
= Pl(Y0 = y0 jZ = z);
desired. Moreover, since X = x \ Y0 = y0 \ Z = z 2 F 0 , follows Acc4
Pl(Y0 = y0 jZ = z) 6= ?.
3(b), suppose = \ Y0 = y0 \ Z = z 2 F 0 . Since IPlrv (X; [ Y0 jZ), follows

Pl(X = xjY = \ Y0 = y0 \ Z = z) = Pl(X = xjZ = z):
Thus, prove 3(b), suces show
Pl(X = xjY0 = y0 \ Z = z) = Pl(X = xjZ = z):
(9)
Recall assuming IPlrv (X; [ Y0 jZ). CIRV2, follows IPlrv (X; Y0 jZ).
Thus, (9) immediate 2(b) (since = \ Y0 = y0 \ Z = z 2 F 0 implies Y0 = y0 \
Z = z 2 F 0).
Finally, consider CIRV4. Suppose IPlrv (X; YjZ) IPlrv (X; Y0 jY [ Z). must
show IPlrv (X; [ Y0 jZ). usual, requires showing two things:
4(a). = \ Y0 = y0 \ Z = z 2 F 0 ,
Pl(X = xjY = \ Y0 = y0 \ Z = z) = Pl(X = xjZ = z):
4(b). X = x \ Z = z 2 F 0 ,
Pl(Y = \ Y0 = y0 jX = x \ Z = z) = Pl(Y = \ Y0 = y0 jZ = z):
4(a) 4(b) straightforward. 4(a), suppose = y\Y0 = y0 \Z = z 2
F 0 . Since IPlrv (X; Y0 jY [ Z), follows
Pl(X = xjY = \ Y0 = y0 \ Z = z) = Pl(X = xjY = \ Z = z):
since IPlrv (X; YjZ), follows
Pl(X = xjY = \ Z = z) = Pl(X = xjZ = z):
Thus 4(a).
4(b), suppose X = x \ Z = z 2 F 0 . two cases consider.
Pl(Y = yjX = x \ Z = z) 6= ? then, Acc4, X = x \ = \ Z = z 2 F 0 . Moreover,
Alg2,
Pl(Y = y\Y0 = y0 jX = x\Z = z) = Pl(Y0 = y0 jX = x\Y = y\Z = z)
Pl(Y = yjX = x\Z = z):
(10)
Since IPlrv (X; Y0 jY [ Z), follows
Pl(Y0 = y0 jX = x \ = \ Z = z) = Pl(Y0 = y0 jY = \ Z = z):
383

fiHalpern

since IPlrv (X; YjZ), follows Pl(Y = yjX = x \ Z = z) = Pl(Y = yjZ = z). Plugging (10) applying Alg2 gives
Pl(Y = \ Y0 = y0 jX = x \ Z = z)
= Pl(Y0 = y0 jY = \ Z = z)
Pl(Y = yjZ = z)
= Pl(Y = \ Y0 = y0 jZ = z);
desired.
Pl(Y = yjX = x \ Z = z) = ?, CPl3, follows Pl(Y = \
Y0 = y0 jX = x\Z = z) = ?. Moreover, since IPlrv (X; YjZ), follows Pl(Y = yjZ = z) =
?. Applying CPl3, get Pl(Y = \ Y0 = y0 jZ = z) = ?. Thus, 4(b) holds.

Theorem 5.6: (G; f ) (D; ;
)-representable unique cpm Pl 2
PLD;;
(G; f ) represents Pl.
Proof: Given (G; f ), suppose without loss generality X = hX1 ; : : : ; Xn topo-

logical sort nodes G. define plausibility measure Pl determined (G; f ).
start defining Pl(G;f ) sets form X = x.
easily follows Alg2 Pl 2 PLD;;
Pl(X1 = x1 \ : : : \ Xn,1 = xn,1 ) 6=
?,
Pl(X = x) = Pl(Xn = xn jX1 = x1 \ : : : \ Xn,1 = xn,1 )

Pl(Xn,1 = xn,1 jX1 = x1 \ : : : \ Xn,2 = xn,2 )

(11)

Pl(X2 = x2jX1 = x1 )
Pl(X1 = x1):
Thus, algebraic plausibility measure satisfies analogue chain rule probability.
(Since
assumed associative, parentheses required here. However, even
without assumption, follows easily Alg2
fact associative tuples
(a; b; c) form (Pl(U1 jU2 ); Pl(U2 jU3 ); Pl(U3 jU4 )), U1 U2 U3 U4 ,
types tuples arise (11). Associativity issue below.)
Pl compatible G, fact
Pl(X = x) = Pl(Xn = xn j \X 2Par (X ) Xj = xj )

Pl(Xn,1 = xn,1 j \X 2Par (X ,1) Xj = xj )

(12)

(X1 = x1):
(If ParG (Xk ) = ;, Pl(Xk = xk j\X 2Par (X ) Xj = xj ) taken Pl(Xk = xk ).)
clear (12) Pl(G;f ) (X = x) must dX ;G;x

dX1 ;G;x.
Note every subset W written disjoint union events form
X = x. Thus, U 2 F , define
Pl(G;f ) (U ) = fx:X=xU gdX ;G;x

dX1 ;G;x:
conditional plausibilities, suppose Pl(G;f ) (V ) 6= ?, V 2 F 0 . Let
fx1 ; : : : ; xk g = fx : X = x V g. follows easily BN6, BN7, R1, R2
(Pl(G;f ) (X = x1 ); : : : ; Pl(G;f ) (X = xk )) 2 D(). Thus, BN8, X = x V ,
Pl(G;f ) (X = x) Pl(G;f ) (V ). BN5, j , exists dX=x jV
(dX=x jV ; Pl(G;f ) (V )) 2 D(
) dX=x jV
Pl(G;f ) (V ) = Pl(G;f ) (X = x);
j

n

G

j

j

G

G

n

k

n

n

j

j

j

384

fiConditional Plausibility Measures Bayesian Networks

follows BN4 dX=x jV unique element property. Moreover,
BN5, (dX=x1 jV ; : : : ; dX=x jV ) 2 D(). Define Pl(G;f ) (U jV ) = fx:X=xU \V g dX=xjV
(where Pl(G;f ) (;jV ) taken ?). Note future reference follows BN5
(Pl(G;f ) (U jV ); Pl(G;f ) (V )) 2 D(
)
Pl(G;f ) (U jV )
Pl(G;f ) (V ) = Pl(G;f ) (U \ V ):
(13)
completes definition Pl(G;f ) . remains check algebraic cpm
represented (G; f ). Thus, must check Alg1{4 CPl1{4 hold. Alg1
immediate definitions BN1 BN2 (BN2 necessary case
one disjoint sets empty); Alg3 immediate BN3 Alg4 immediate
BN4. Alg2, note Pl(G;f ) (V ) 6= ? Pl(G;f ) (V 0 ) 6= ? then, (13),
Pl(G;f ) (U \ V jV 0 )
Pl(G;f ) (V 0 ) = Pl(G;f ) (U \ V \ V 0 )
(Pl(G;f )(U jV \ V 0 )
Pl(G;f ) (V jV 0 ))
Pl(G;f ) (V 0 )
= Pl(G;f )(U jV \ V 0 )
(Pl(G;f ) (V jV 0 )
Pl(G;f ) (V 0 ))
= Pl(G;f ) (U jV \ V 0 )
Pl(G;f ) (V \ V 0 )
= Pl(G;f ) (U \ V \ V 0 ):
(Note associativity
used here.) Thus, BN4,
Pl(G;f ) (U \ V jV 0 ) = Pl(G;f )(U jV \ V 0 )
Pl(G;f ) (V jV 0 ):
CPl1 immediate definition (the empty sum taken ?). CPl2, note
(13), Pl(G;f ) (W jV )
Pl(G;f ) (V ) = Pl(G;f ) (V ). Since >
Pl(G;f ) (V ) = Pl(G;f ) (V )
BN2, follows BN4 Pl(G;f ) (W jV ) = >. CPl3 follows readily definitions
together BN1, BN6, BN7. CPl4 also follows definition.
Next must show (G; f ) represents Pl(G;f ) . first step show
Pl(G;f ) (X = xjParG (X ) = z) = dX =xjPar (X )=z . Note (13),
Pl(G;f ) (X = xjParG (X ) = z)
Pl(G;f ) (ParG (X ) = z) = Pl(G;f ) (X = x \ ParG (X ) = z):
definition,
Pl(G;f ) (X = x \ ParG (X ) = z) = fx:X=x0(X =x\Par (X )=~y)g Pl(G;f ) (X = x0 ):
term \sum" right \product" terms; indeed, sum
possible products include dX =yjPar (X )=z one terms term dY =yjPar (Y )=z0
2 ParG (X ), component z corresponding . using BN1,
BN3, R1, R2, hard show
Pl(G;f ) (X = \ ParG (X ) = z)
= f:X=x0 (X =x\Par (X )=~y) Pl(G;f ) (X = x0 )
(14)
= dX =xjPar =z
Pl(G;f ) (ParG (X ) = z):
follows BN4 Pl(G;f ) (X = xjParG (X ) = z) = dX =xjPar (X )=z .
show Pl(G;f ) (X = xjNDG (X ) = ~y \ ParG (X ) = z) = dX =xjPar (X )=z , suces
show
Pl(G;f ) (X = x \ NDG (X ) = ~y \ ParG (X ) = z)
(15)
= dX =xjPar (X )=z
Pl(G;f ) (NDG (X ) = ~y \ ParG (X ) = z);
j

k

G

G

G

G

G

G

G

G

G

385

fiHalpern

result follows BN5. (15) shown much like (14), commutativity
(BN1) essential. is, expressions Pl(G;f ) (X = x \ NDG (X ) =
~y \ ParG (X ) = z) dX =xjPar (X )=z
Pl(G;f ) (NDG (X ) = ~y \ ParG(X ) = z) involve
terms, necessarily order. commutativity,
permuted order.
Similar arguments, leave reader, show Pl(G;f ) (NDG (X ) = ~yjX =
x \ ParG (X ) = z) = Pl(G;f )(NDG(X ) = ~yjParG (X ) = z). Thus, (G; f ) represents Pl(G;f ) .
G

Theorem 5.10: Suppose (D; ;
) rich BN-compatible domain. IPlrv (X; YjZ)
holds every plausibility measure PLD;;
compatible G, d-sep G (X; YjZ).
Proof: Suppose X d-separated Z G. X 2 X
2 X d-separated Z G. construct cpm
Pl 2 PLD;;
IPlrv (X; jZ) hold, using techniques (Geiger et al.,

1990).
shown (Geiger et al., 1990, Lemma 9), X d-separated G,
exists subgraph G0 G
1. G0 includes nodes G subset edges G,
2. X d-separated Z G0 .
3. edges E 0 G0 consist specified below:
(a) trail q X ,
(b) every head-to-head node Xi trail q, directed path pi G0
node Z; moreover, paths pi share nodes node
pi shares q Xi .
Note every node G0 either 0, 1, 2 parents G0 . Let (G0 ; f ) quantitative
Bayesian network node X G0 parents G0 , cpt f (X )
dX =0 = dX =1 = d0 . node X G0 one parent, say X 0 ,
cpt f (X ) dX =ijX 0 =j > = j ? 6= j . Finally, X two parents,
say X 0 X 00 , cpt f (X ) dX =kjX 0 =i\X 00 =k > k = j ( mod2) ?
otherwise. Since d0 = > BN2 guarantees > ? = >, construction satisfies
R1. richness guarantees R2 holds. Theorem 5.6, (unique)
plausibility measure Pl 2 PLD;;
represented (G0 ; f ). easy check
Pl compatible G well. three cases consider:
Suppose X parents G0. easy see IPlrv (X; YjZ)
Z (and, particular, = NDG(X ) Z = ParG(X )).
Suppose X one parent G0, say X 0 . easy see IPlrv (X; YjZ)
holds Z X 0 2 Z. Since X 0 parent X G,
IPlrv (X; NDG(X )jParG(X )) must hold.
Finally, X two parents G0, say X 0 X 00 , easy see
IPlrv (X; YjZ) holds Z fX 0 ; X 00 g Z. Since X 0 X 00
parents X G, IPlrv (X; NDG (X )jParG (X )) must hold.
386

fiConditional Plausibility Measures Bayesian Networks

Acknowledgments
preliminary version paper appears Uncertainty Artificial Intelligence, Proceedings Sixteenth Conference, 2000. thank Serafn Moral, Fabio Cozman, Peter
Walley, anonymous referees UAI journal version paper
useful comments. work supported part NSF, grants IRI-9625901 IIS-0090145.

References

Campos, L., & Huete, J. F. (1993). Independence concepts upper lower probabilities. Bouchon-Meunier, B., Valverde, L., & Yager, R. R. (Eds.), Uncertainty
Intelligent Systems, pp. 85{96. North-Holland, Amsterdam.
Campos, L., & Huete, J. F. (1999a). Independence concepts possibility theory: Part I.
Fuzzy Sets Systems, 103 (1), 127{152.
Campos, L., & Huete, J. F. (1999b). Independence concepts possibility theory: Part II.
Fuzzy Sets Systems, 103 (3), 487{505.
Campos, L., & Moral, S. (1995). Independence concepts sets probabilities.
Proc. Eleventh Conference Uncertainty Artificial Intelligence (UAI '95), pp.
108{115.
Cousa, I., Moral, S., & Walley, P. (1999). Examples independence imprecise probabilities. Proc. First Intl. Symp. Imprecise Probabilities Applications.
Cozman, F. G. (1998). Irrelevance independence relations Quasi-Bayesian networks.
Proc. Fourteenth Conference Uncertainty Artificial Intelligence (UAI '98),
pp. 89{96.
Cozman, F. G. (2000a). Credal networks. Artificial Intelligence, 120 (2), 199{233.
Cozman, F. G. (2000b). Separation properties setes probability measures. Proc. Sixteenth Conference Uncertainty Artificial Intelligence (UAI 2000).
Cozman, F. G., & Walley, P. (1999). Graphoid properties epistemic irrelevance
independence. Unpublished manuscript.
Darwiche, A. (1992). Symbolic Generalization Probability Theory. Ph.D. thesis, Stanford University.
Darwiche, A., & Ginsberg, M. L. (1992). symbolic generalization probability theory.
Proceedings, Tenth National Conference Artificial Intelligence (AAAI '92), pp.
622{627.
Darwiche, A., & Goldszmidt, M. (1994). relation kappa calculus probabilistic reasoning. Proc. Tenth Conference Uncertainty Artificial Intelligence
(UAI '94), pp. 145{153.
387

fiHalpern

Dubois, D., Fari~nas del Cerro, L., Herzig, A., & Prade, H. (1994). ordinal view
independence applications plausible reasoning. Proc. Tenth Conference
Uncertainty Artificial Intelligence (UAI '94), pp. 195{203.
Dubois, D., & Prade, H. (1990). introduction possibilistic fuzzy logics.
Shafer, G., & Pearl, J. (Eds.), Readings Uncertain Reasoning, pp. 742{761. Morgan
Kaufmann, San Francisco, Calif.
Fagin, R., & Halpern, J. Y. (1991). new approach updating beliefs. Bonissone, P.,
Henrion, M., Kanal, L., & Lemmer, J. (Eds.), Uncertainty Artificial Intelligence 6,
pp. 347{374. Elsevier Science Publishers, Amsterdam.
Finetti, B. d. (1936). Les probabilites nulles. Bulletins des Science Mathematiques (premiere
partie), 60, 275{288.
Fonck, P. (1994). Conditional independence possibility theory. Proc. Tenth Conference
Uncertainty Artificial Intelligence (UAI '94), pp. 221{226.
Friedman, N., & Halpern, J. Y. (1995). Plausibility measures: user's guide.
Proc. Eleventh Conference Uncertainty Artificial Intelligence (UAI '95), pp.
175{184.
Geiger, D., & Pearl, J. (1988). logic causal models. Proc. Fourth Workshop
Uncertainty Artificial Intelligence (UAI '88), pp. 136{147.
Geiger, D., Verma, T., & Pearl, J. (1990). Identifying independence bayesian networks.
Networks, 20, 507{534.
Gilboa, I., & Schmeidler, D. (1993). Updating ambiguous beliefs. Journal Economic
Theory, 59, 33{49.
Goldszmidt, M., & Pearl, J. (1992). Rank-based systems: simple approach belief
revision, belief update reasoning evidence actions. Principles
Knowledge Representation Reasoning: Proc. Third International Conference (KR
'92), pp. 661{672. Morgan Kaufmann, San Francisco, Calif.
Halpern, J. Y. (2000). Conditional plausibility measures Bayesian networks.
Proc. Sixteenth Conference Uncertainty Artificial Intelligence (UAI 2000), pp.
247{255. appear, Journal A.I. Research.
Keynes, J. M. (1921). Treatise Probability. Macmillan, London.
Levi, I. (1985). Imprecision uncertainty probability judgment. Philosophy Science,
52, 390{406.
Pearl, J. (1988). Probabilistic Reasoning Intelligent Systems. Morgan Kaufmann, San
Francisco, Calif.
Popper, K. R. (1968). Logic Scientific Discovery (revised edition). Hutchison,
London. first version book appeared Logik der Forschung, 1934.
388

fiConditional Plausibility Measures Bayesian Networks

Renyi, A. (1964). Sur les espaces simples de probabilites conditionelles. Annales de l'Institut
Henri Poincare, Nouvelle serie, Section B, 1, 3{21. Reprinted paper 237 Selected
Papers Alfred Renyi, III: 1962{1970, Akademia Kiado, 1976, pp. 284{302.
Shafer, G. (1976). Mathematical Theory Evidence. Princeton University Press, Princeton, N.J.
Shenoy, P. P. (1994). Conditional independence valuation based systems. International
Journal Approximate Reasoning, 10, 203{234.
Shenoy, P. P., & Shafer, G. (1990). axiomatic framework Bayesian belief-function
propagation. Shachter, R., Levitt, T., Kanal, L., & Lemmer, J. (Eds.), Uncertainty
Artificial Intelligence 4, pp. 169{198.
Spohn, W. (1988). Ordinal conditional functions: dynamic theory epistemic states.
Harper, W., & Skyrms, B. (Eds.), Causation Decision, Belief Change,
Statistics, Vol. 2, pp. 105{134. Reidel, Dordrecht, Netherlands.
Verma, T. (1986). Causal networks: semantics expressiveness. Technical report R{103,
UCLA Cognitive Systems Laboratory.
Walley, P. (1991). Statistical Reasoning Imprecise Probabilities, Vol. 42 Monographs
Statistics Applied Probability. Chapman Hall, London.
Wang, Z., & Klir, G. J. (1992). Fuzzy Measure Theory. Plenum Press, New York.
Weydert, E. (1994). General belief measures. Proc. Tenth Conference Uncertainty
Artificial Intelligence (UAI '94), pp. 575{582.
Wilson, N. (1994). Generating graphoids generalized conditional probability.
Proc. Tenth Conference Uncertainty Artificial Intelligence (UAI '94), pp. 583{
591.
Zadeh, L. A. (1978). Fuzzy sets basis theory possibility. Fuzzy Sets Systems,
1, 3{28.

389

fiJournal Artificial Intelligence Research 14 (2001) 205-230

Submitted 12/00; published 5/01

Domain Filtering Consistencies
Romuald Debruyne

Romuald.Debruyne@emn.fr
Member Coconut group
Ecole des Mines de Nantes,
La Chantrerie, 4, Rue Alfred Kastler, 44307 Nantes Cedex 3 - France

Christian Bessiere

bessiere@lirmm.fr

Member Coconut group
LIRMM - CNRS UMR 5506, 161 rue Ada, 34392 Montpellier Cedex 5 - France

Abstract
Enforcing local consistencies one main features constraint reasoning.
level local consistency used searching solutions constraint network
basic question. Arc consistency partial forms arc consistency widely
studied, known sometime forward checking MAC
search algorithms. recently, stronger forms local consistency remained limited
change structure constraint graph, thus, could used
practice, especially large networks. paper focuses local consistencies
stronger arc consistency, without changing structure network, i.e.,
removing inconsistent values domains. last five years, several local
consistencies proposed us others. make overview them,
highlight relations them. compare theoretically
experimentally, considering pruning efficiency time required enforce them.

1. Introduction
applications artificial intelligence use constraint networks
(CNs) solve combinatorial problems, ranging design diagnosis, resource allocation
car sequencing, natural language understanding machine vision. Finding solution
constraint network involves looking set value assignments, one variable,
constraints simultaneously satisfied (Meseguer, 1989; Tsang, 1993).
task NP-hard many exponential time algorithms proposed solve
problem. algorithms, make systematic exploration search space,
backtracking basis. long unassigned variables values consistent
partial instantiation, extend assigning values variables. Otherwise,
dead-end reached previous assignments changed going
partial instantiation extension. explicit constraints network together
induce implicit constraints. Since basic search algorithms record implicit
constraints, waste time repeatedly detecting local inconsistencies caused
them. Filtering techniques essential reduce size search space
improve efficiency search algorithms. used preprocessing step
remove local inconsistencies otherwise would repeatedly
found search (Dechter & Meiri, 1994). also maintained search.
c
2001
AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiDebruyne & Bessiere

Search algorithms differ kind local consistency achieve choice
value variable. enforce partial arc consistency, going forward
checking (FC,Golomb & Baumert, 1965; Haralick & Elliott, 1980), removes
values directly arc inconsistent last assignment, really full look-ahead (RFL,
Gaschnig, 1974), achieves full arc consistency. Arc consistency (AC) partial
forms arc consistency widely used two reasons. First, low space
time complexities, path consistency higher levels k-consistency,
long time options, prohibitive change structure
network. Moreover, 1995, pruningful local consistencies seemed uninteresting
since experimental evaluations search algorithms showed limited local consistency
used forward checking best choice (Nadel, 1988; Kumar, 1992; Bacchus & van
Run, 1995). conclusion surprising since comparisons made
small easy constraint networks. problems, additional cost pruning
values could outweighed search savings.
However, harder constraint network is, useful filtering techniques are.
recent works (Bessiere & Regin, 1996; Sabin & Freuder, 1994; Grant & Smith, 1996)
testing search algorithms threshold (Cheeseman, Kanefsky, & Taylor, 1991),
hard problems expected be, show using pruningful local
consistencies worthwhile. conclusion maintaining arc consistency
search (MAC), namely achieving AC choice value variable
refutation choice, outperforms forward checking hard problems. good
behavior MAC even significant large problems, especially domains
large. conceivable difficult instances, maintaining even pruningful
local consistency may pay off. Obviously, algorithm would waste seconds easy
CNs would save many minutes (hours ?) hard problems, reducing set
pathological CNs search really prohibitive.
paper study local consistencies preprocessing filtering techniques.
preliminary work trying determine local consistency advantageous maintained search. last five years, many new local consistencies
proposed. remaining paper, focus attention
leave unchanged structure network since able used large
CNs. addition overview local consistencies remove inconsistent
values, compare, theoretically experimentally, pruning efficiency
time needed enforce them.

2. Definitions Notations
network binary constraints P = (X , D, C) defined set X = {i, j, . . . } n
variables, taking value respective finite domain Di , Dj , . . . elements D,
set C e binary constraints. size largest domain. binary constraint Cij
subset Cartesian product Di Dj denotes compatible pairs values
j. denote Cij (a, b) = true specify ((i, a), (j, b)) Cij . say
(j, b) support (i, a) Cij . Checking whether pair values allowed
constraint called constraint check . CN associate constraint graph
nodes represent variables arcs connect pairs variables constrained
206

fiDomain Filtering Consistencies

explicitly. c number 3-cliques constraint graph g maximum degree
node constraint graph. neighborhood set variables adjacent
constraint graph. domain D0 = {Di0 , Dj0 , . . .} sub-domain = {Di , Dj , . . .}
i, Di0 Di . instantiation set variables set value assignments
{Ij }jS , one variable belonging S, s.t. j S, Ij Dj . instantiation
satisfies constraint Cij {i, j} 6 Cij (Ii , Ij ) true. instantiation consistent
satisfies constraints. pair values ((i, a), (j, b)) path consistent
k X s.t. j 6= k 6= 6= j, pair values extended consistent instantiation
{i, j, k}. (j, b) path consistent support (i, a) (a, b) Cij ((i, a), (j, b))
path consistent. solution P = (X , D, C) consistent instantiation X . value
(i, a) consistent solution Ii = a, CN consistent
least one solution. denote P |Di ={a} CN obtained restricting Di {a}
P . LC local consistency, CN P LC-consistent iff LC hold P .
CN P LC-inconsistent iff cannot obtain LC-consistent constraint network
deletion local inconsistencies P . local consistency LC used detect
inconsistency instantiations longer 1, say CN P = (X , D, C)
LC-inconsistent iff sub-domain D0 LC holds (X , D0 , C).

3. Local Consistencies Studied
Filtering techniques used detect inconsistency CN,
assumptions, ensure backtrack-free search (Freuder, 1982, 1985). However,
usual purpose find solution constraint network. remove
local inconsistencies delete regions search space contain
solution. resulting CN equivalent initial one since set solutions
unchanged, substantial reductions made search becomes easier.
section review basis arc consistency, k-consistency, restricted path consistency,
inverse consistencies. Furthermore, extend idea restricted path consistency
k-restricted path consistency Max-restricted path consistency. propose new
class local consistencies called singleton consistencies. also show property path
inverse consistency used optimal worst case time complexity
path inverse consistency algorithm (Debruyne, 2000).
Arc consistency widely used local consistency arc consistency. based
notion support. value viable long least one compatible value
domain neighboring variable. AC algorithm remove values
support constraint. filtering techniques, value deletions
propagated network since lead arc inconsistency
values previously viable.
k-consistency consistent instantiation length k-1 k-consistent (i.e., (k-1, 1)consistent formalism Freuder, 1985) extended additional k th
variable. time space complexities enforcing k-consistency polynomial
exponent dependent k. k 3, constraints represented extension
store (k-1)-tuples deleted, structure network changed.
leads huge space requirements subsequently important cpu time costs. practice,
207

fiDebruyne & Bessiere

2-consistency, arc consistency binary CNs, used. Although path
consistency (PC, namely 3-consistency) cannot used large CNs, experiments
involve strong path consistency (namely enforcing arc path consistency)
PC widely studied.
Restricted path consistency aim Berlandier proposed restricted path
consistency (RPC, Berlandier, 1995) remove inconsistent values AC
avoiding drawbacks path consistency. Even efficient PC algorithms
try extend pairs values (even two variables
neighbors) third variable. basis RPC avoid prohibitive
work. RPC performs pruningful path consistency checks, namely able
directly delete value. addition AC, RPC algorithm checks path consistency
pairs values ((i, a), (j, b)) (j, b) support (i, a) Dj .
pair path inconsistent, deletion would lead arc inconsistency (i, a). Thus
(i, a) removed. additional path consistency checks allow detecting
inconsistent values AC without delete pair values, leaving
unchanged structure network.
k-restricted path consistency extend idea RPC pruningful
local consistency. RPC holds, values one support constraint
support path consistent. Checking path consistency supports
remove even values without falling traps PC. k-restricted path consistency (k-RPC, Debruyne & Bessiere, 1997a) looks path consistent support
constraint values k supports constraint. RPC 1-RPC
AC corresponds 0-RPC. k-RPC holds, achieve (k+1)-RPC
check values exactly (k+1) supports constraint propagate
possible deletion. So, possible achieve AC, RPC, 2-RPC on, time reusing
previous filtering effort. adaptive enforcement stopped soon value
least one path consistent support constraint, constraint network
d-RPC size largest domain. Indeed, achieving k-RPC
values k supports constraint, k 0 -RPC holds k 0 > k.
Max-restricted path consistency constraint network Max-restricted path consistent (Max-RPC, Debruyne & Bessiere, 1997a) values least one path
consistent support constraint, whatever number supports. pruning efficiency point view, Max-RPC upper bound k-RPC. Achieving Max-RPC
involves deleting k-restricted path inconsistent values k. However, achieving
Max-RPC less expensive enforcing high level k-RPC. opposed MaxRPC, achieve k-RPC look values k supports
constraint know values path consistent support found.
expensive k great, algorithm look k+1 supports value
constraint. Unconditionally looking path consistent support avoids costly
extra work.
k inverse consistency aim Freuder Elfe proposed inverse consistency (Freuder & Elfe, 1996) achieve high order local consistencies good space
complexity. k-consistency algorithm removes instantiation length k-1 cannot
208

fiDomain Filtering Consistencies

extended k th variable. requires O(nk1 dk1 ) space keep track deleted
instantiations. Space requirements longer problem k inverse consistency ((1,
k-1)-consistency), removes values cannot extended consistent instantiation including k-1 additional variables. linear space complexity would allow using
large CNs. However, worst case time complexity polynomial exponent
dependent k, restricts use small values k.
Path inverse consistency first level k inverse consistency removing values
AC path inverse consistency (PIC, k = 3). definition, (i, a) path inverse
consistent extended 3-tuples variables containing i. However,
said (Freuder & Elfe, 1996), 3-tuples need checked enforce PIC.
one tuples (i, j, k) (i, k, j) checked. Moreover, linked neither j
k, (i, a) deleted (i, j, k) values j k path inverse
inconsistent. case, checking (i, j, k) useless since PIC detects inconsistency
network processing j k.
Neighborhood inverse consistency Since k inverse consistency polynomial
exponent dependent k, checking k inverse consistency values prohibitive
k great. However, variables uniformly constrained, would worthwhile
adapt level k inverse consistency number constraints involving them, focusing
filtering effort constrained variables (as done adaptive consistency
Dechter & Pearl, 1988). basis neighborhood inverse consistency (NIC, Freuder
& Elfe, 1996), removes values cannot extended consistent instantiation
including neighboring variables. point behavior NIC
dependent structure constraint graph. two variables j
neighbors, add universal constraint allowing pairs values (a, b) Di Dj
j. resulting CN equivalent initial one since set
solutions. However, opposed filterings studied paper, NIC affected
change since remove values. Obviously, process increases time
complexity. complete constraint networks, NIC tries extend values whole
solution, namely deleting globally inconsistent values (named variable completability
Freuder, 1991). far difficult task looking one solution. cost
effective, NIC used sparse CNs, degree variables small.
Singleton consistencies value (i, a) consistent, constraint network obtained
restricting Di singleton {a} consistent. Singleton consistencies class
filtering techniques based remark. detect inconsistency value (i, a),
singleton consistency filtering technique checks whether given local consistency detect
possible inconsistency P |Di ={a} . example, singleton arc consistency (SAC, Debruyne & Bessiere, 1997b) deletes values (i, a) P |Di ={a} arc consistent
sub-domain.1 SAC inspired strong path consistency algorithm proposed
McGregor(McGregor, 1979). SAC algorithm obtained omitting deletions

1. AC algorithm used know whether enforcing AC P |Di ={a} leads domain wipe out,
lazy approach (such LAC7 Schiex, Regin, Gaspin, & Verfaillie, 1996) sufficient.

209

fiDebruyne & Bessiere



binary CN (i, j)-consistent iff X , Di 6= consistent instantiation variables extended consistent instantiation including
j additional variables.



value
b Dj s.t.
consistent.
non empty



pair values ((i, a), (j, b)) path consistent iff k X , exists c Dk
s.t. Cik (a, c) Cjk (b, c), otherwise path inconsistent. CN path
consistent ((2, 1)-consistent) iff path inconsistent pair values allowed.



binary CN strongly path consistent iff node consistent, arc consistent
path consistent.



binary CN path inverse consistent iff (1, 2)-consistent i.e.,
(i, a)D j, kX s.t. j 6= 6= k 6= j, (j, b)D (k, c)D s.t.
Cij (a, b) Cik (a, c) Cjk (b, c)



binary CN neighborhood inverse consistent iff (i, a)D, (i, a)
extended consistent instantiation including neighborhood i.



binary CN restricted path consistent iff
X , Di non empty arc consistent domain and,
(i, a) D, j X s.t. (i, a) unique support b Dj ,
k X linked j, c Dk s.t. Cik (a, c) Cjk (b, c).



binary CN k-restricted path consistent iff
X , Di non empty arc consistent domain and,
(i, a) D, Cij C s.t. (i, a) k supports Dj ,
b Dj s.t. Cij (a, b)
k X linked j, c Dk s.t. Cik (a, c) Cjk (b, c).



binary CN max-restricted path consistent iff
X , Di non empty arc consistent domain and,
(i, a) D, Cij C,
b Dj s.t. Cij (a, b)
k X linked j, c Dk s.t. Cik (a, c) Cjk (b, c).



binary CN P singleton arc consistent iff X , Di 6= (i, a) D,
P |Di ={a} arc consistent sub-domain.



binary CN P singleton restricted path consistent iff X , Di 6=
(i, a) D, P |Di ={a} restricted path consistent sub-domain.

Di arc consistent iff, j X s.t. Cij C, exists
Cij (a, b). domain Di arc consistent iff, Di , (i, a) arc
CN arc consistent ((1, 1)-consistent) iff Di D, Di
arc consistent domain.

Figure 1: mentioned local consistencies.
210

fiDomain Filtering Consistencies

Name
algorithm
AC7 (Bessiere, Freuder, & Regin, 1999)
RPC2 (Debruyne & Bessiere, 1997a)
Max RPC1 (Debruyne & Bessiere, 1997a)
PC5 (Singh, 1995)
PC8 (Chmeiss & Jegou, 1996)
PIC1 (Freuder & Elfe, 1996)
PIC2 (Debruyne, 2000)
NIC1 (Freuder & Elfe, 1996)
SAC1 (Debruyne & Bessiere, 1997b)
SRPC1 (Debruyne & Bessiere, 1997b)
()

Worst case
time complexity
O(ed2 )()
O(en + ed2 + cd2 )()
O(en + ed2 + cd3 )()
O(n3 d3 )()
O(n3 d4 )
O(en2 d4 )
O(en + ed2 + cd3 )()
O(g 2 (n + ed)dg+1 )
O(en2 d4 )
O(en + n2 (e + c)d4 )

Worst case
space complexity
O(ed)
O(ed + cd)
O(ed + cd)
O(n3 d2 )
O(n2 d)2
O(n)
O(ed + cd)
O(n)
O(ed)
O(ed + cd)

optimal worst case time complexity.
Table 1: efficient algorithms achieving mentioned local consistencies.3

pairs values algorithm. Many singleton consistencies considered
since local consistency used detect possible inconsistency CNs
P |Di ={a} (i, a) D. local consistency enforced polynomial time,
corresponding singleton consistency also polynomial worst case time complexity.
formal definitions local consistencies studied paper presented
Figure 1. Table 1 recalls time space complexities efficient algorithms
enforcing them. worst case time complexity SAC1, SRPC1, NIC1
proved optimal.

4. Relations PIC, RPC Max-RPC
highlight relations PIC, RPC Max-RPC, let us show property path
inverse consistency. shown (Debruyne, 2000), assume constraint network
arc consistent, enforcing PIC requires checking even less 3-tuples mentioned
(Freuder & Elfe, 1996). (i, a) arc consistent, extended 3-tuple (i, j, k)
constraint j k. Indeed, (i, a) support (j, b) Cij
support (k, c) Cik , since j linked k, ((i, a), (j, b), (k, c)) consistent.
Furthermore, (i, a) extended (i, j, k) constraint k
(resp. j). Indeed, (i, a) support b Dj (resp. c Dk ) value
arc consistent too, support c Dk (resp. b Dj ). So, ((i, a), (j, b), (k, c))
consistent. Consequently, constraint network arc consistent, 3-tuples
checked achieve PIC correspond 3-cliques constraint graph.

2. However O(n2 d2 ) data structure required constraint representation.
3. See Section 2 definition n, d, e, c, g.

211

fiDebruyne & Bessiere

0 support

1 support


k

b



(A)

j



b







b

b

AC, RPC, PIC,
Max-RPC delete (i,a)

(B) RPC, PIC, Max-RPC
delete (i,a) unique support
path consistent

2 supports

2 supports


b
c

b

k

b





j

k



b
c

b


b
c






j

j

l

b

(C) (i, a) RPC-consistent w.r.t. C ij
b u PIC Max-RPC
delete value

(D) (i, a) RPC-co nsistent w.r.t. C ij
PIC-consistent w.r.t. C ij
Max -RPC eletes th v alu e

forbidden pair values.

Figure 2: Examples showing relations PIC, RPC Max-RPC.
Furthermore, definition PIC shows constraint network involving less
three variables path inverse consistent, even though arc consistent.

Property 1 CN path inverse consistent iff
involves less three variables,
arc consistent value (i, a) D, 3-clique {i, j, k},
(i, a) extended consistent instantiation {i, j, k}.
property allows us see relations PIC, RPC Max-RPC.
value (i, a) support constraint Cij , three local consistencies delete
arc inconsistent value (see Figure 2A). (i, a) one support b Dj , PIC, RPC,
Max-RPC delete (i, a) Cij ((i, a), (j, b)) path inconsistent (see Figure
2B). difference three local consistencies appears (i, a) least two
supports Cij . case, (i, a) restricted path consistent w.r.t. Cij PIC
delete 3-clique {i, j, k} supports (i, a) Dj path
inconsistent k (see Figure 2C). So, PIC pruningful RPC.
212

fiDomain Filtering Consistencies

often deletes additional values supports value seldom path
inconsistent third variable. Max-RPC far pruningful since
deletes (i, a) Cij supports Dj path inconsistent, even
path inconsistent third variable (see Figure 2D).

5. Pruning Efficiency
5.1 Qualitative Study
compare pruning efficiency local consistencies presented above, use
transitive relation stronger introduced (Debruyne & Bessiere, 1997b). local consistency LC stronger another local consistency LC 0 CN LC holds,
LC 0 holds too. Consequently, LC stronger LC 0 , algorithm achieving LC
deletes least values removed algorithm achieving LC 0 . instance, since
definition restricted path consistency RPC stronger AC, RPC algorithm
removes least arc inconsistent values. local consistency LC strictly stronger
another local consistency LC 0 LC stronger LC 0 least one CN
LC 0 holds LC not.
Theorem 1 Restricted path consistency strictly stronger AC.
Proof definition restricted path consistency, RPC stronger arc consistency.
Figure 3a shows exists constraint network AC holds RPC
not. Therefore, RPC strictly stronger AC. 2
Theorem 2 k > k 0 0, k-RPC strictly stronger k 0 -RPC.
Proof proof k-RPC stronger k 0 -RPC k > k 0 0 trivial. Figure 3g
shows exists constraint network k 0 -RPC holds k-RPC (k > k 0 0)
not. Therefore, k-RPC strictly stronger k 0 -RPC k > k 0 0. 2
Theorem 3 Max-RPC strictly stronger k-RPC, k 0.
Proof proof Max-RPC stronger k-RPC k 0 trivial. Figure 3g shows
k 0 exists constraint network k-RPC holds Max-RPC
not. Therefore, Max-RPC strictly stronger k-RPC k 0. 2
Theorem 4 |X | 3, path inverse consistency strictly stronger restricted path
consistency.
Proof property 1, PIC stronger AC |X | 3. Now, consider value (i, a)
one support (j, b) Cij . PIC holds, third variable k, (i, a)
extended consistent instantiation including {i, j, k} since b support
(i, a) Dj , Ij = b. ((i, a), (j, b)) path consistent (i, a) restricted path consistent
w.r.t. Cij . Furthermore, Figure 3b shows exists constraint network
213

fiDebruyne & Bessiere

RPC holds PIC not. Therefore, path inverse consistency strictly stronger
restricted path consistency |X | 3. 2
Theorem 5 |X | 3, max-restricted path consistency strictly stronger path inverse
consistency.
Proof Suppose max-restricted path consistent CN P value (i, a)
path inverse consistent. Since CN max-restricted path consistent, also
arc consistent definition max-restricted path consistency. Thus, property
1 know exist two variables j k {i, j, k} clique constraint
graph (i, a) cannot extended consistent instantiation {i, j, k}. result,
none supports (i, a) Cij path consistent, contradicts assumption
CN P max-restricted path consistent. Furthermore, Figure 3i shows
exists constraint network path inverse consistency hold max-restricted path
consistency not. Therefore, |X | 3, max-RPC strictly stronger 2
Theorem 6 Singleton arc consistency strictly stronger Max-RPC.
Proof Suppose exists CN P singleton arc consistent value (i, a)
max-restricted path consistent. Let j X variable (i, a)
path consistent support Dj . support b (i, a) Dj , exists variable k
6 c Dk Cik (a, c) Cjk (b, c). Therefore, values Dj arc
inconsistent w.r.t. P |Di ={a} (i, a) singleton arc consistent. So, SAC stronger
Max-RPC. Figure 3e shows exists constraint network Max-RPC
holds SAC not. Therefore, SAC strictly stronger Max-RPC. 2
Theorem 7 Neighborhood inverse consistency strictly stronger max-restricted path
consistency.
Proof Let (i, a) value neighborhood inverse consistent CN P . exists
consistent instantiation including neighborhood s.t. Ii = a. Cij C, Ij
path consistent support (i, a). Indeed, let k third variable. k linked i,
((i, a), (j, Ij ), (k, Ik )) consistent instantiation since P neighborhood inverse consistent.
Otherwise, two cases: First, k linked j, ((i, a), (j, Ij ), (k, c)) consistent
c Dk ; Second, Cjk C, exists consistent instantiation 0 j neighborhood s.t. Ij0 = Ij ((i, a), (j, Ij0 ), (k, Ik0 )) consistent. So, (i, a) max-restricted path
consistent. Furthermore, Figure 3d shows exists constraint network
Max-RPC holds NIC not. Therefore, NIC strictly stronger Max-RPC. 2

Theorem 8 Strong path consistency strictly stronger singleton arc consistency.
Proof Consider problem strong path consistent. pair values extended third variable. Furthermore, since problem strong path consistent,
also arc consistent sub-problem obtained restricting domain Di singleton
214

fiDomain Filtering Consistencies

{(i, a)} made arc consistent. initial problem therefore singleton arc consistent.
Figure 3c shows exists constraint network SAC holds strong PC
not. Therefore, strong PC strictly stronger SAC. 2
Theorem 9 Singleton restricted path consistency strictly stronger singleton arc
consistency.
Proof Singleton restricted path consistency stronger singleton arc consistency since
RPC stronger AC. Figure 3d shows exists constraint network
SAC holds SRPC not. Therefore, SRPC strictly stronger SAC. 2
stronger relation induce total ordering. local consistencies
incomparable.
Theorem 10
1. |X | 3, path inverse consistency k-restricted path consistency incomparable.
2. Neighborhood inverse consistency singleton arc consistency incomparable.
3. Neighborhood inverse consistency strong path consistency incomparable.
4. Neighborhood inverse consistency singleton restricted path consistency incomparable.
Proof
1. cf. Figure 3h Figure 3j.
2. cf. Figure 3d Figure 3e.
3. cf. Figure 3d Figure 3e.
4. cf. Figure 3e Figure 3f.
Figure 4 summarizes relations local consistencies. arrow
LC LC 0 iff LC strictly stronger LC 0 . crossed line two local
consistencies means comparable w.r.t. stronger relation.
LC stronger LC 0 (LC 0 strictly stronger LC, LC LC 0
comparable), CN LC holds LC 0 found Figure 3. Obviously,
stronger relation transitive. Figure 4 omit transitivity arcs.

215

fiDebruyne & Bessiere

(a)

(d)

AC

(b)

RPC

SAC
Strong PC
SAC

NIC Strong PC
Max-RPC
NIC
SRPC

(c)

PIC
2-RPC

RPC
RP C

SRPC
NIC

(e)

SAC

SAC NIC
SAC NIC

NIC
Max-RPC

Strong PC

Strong PC
SRPC

k+ 1

k+ 1

k+ 1

k+ 1

(f)

SRPC

NIC

(h)

2-R PC

PIC

...



B

(g)

(i)

PIC
PIC

2-RP C
Max-RPC

domain variable.
forbidden pair values.
stronger B (B deletes value

k+1

k-RPC
k-RPC

(j)

Max-RPC
k'-RPC k'>k>0

RP C

Strong PC

consistent network)

Figure 3: CNs proving stronger relations mentioned
local consistencies.

216

fiDomain Filtering Consistencies

SRPC
Strong PC

NIC
SAC
Max-RPC
k-RPC
(k>1)

RPC

PIC
AC




B : strictly stronger B.
B : B incomparable w.r.t. stronger relation.
Figure 4: Relations mentioned local consistencies.

5.2 Experimental Evaluation
Figure 4 give quantitative information. local consistency LC remove
values another local consistency LC 0 CNs even though
incomparable LC particular CNs. comparable,
show local consistency far pruningful another performs
additional value deletions. quantitative information pruning
efficiency local consistencies, performed experimental evaluation. aim
evaluation show pruningful local consistency random CNs, fixed
number variables values, number constraints constraint tightness
217

fiDebruyne & Bessiere

.01
.01

.1

.2

.3

.4

.5

.6

.7

.8

.9

1

Tightness

.1
.2
.3

.4 e
n
.5

.6


AC

.7

Max-RPC

RPC
PIC
2-RPC

SAC
Strong PC

.8

SRPC
NIC
Variable
completability

.9

1
Figure 5: T0 bounds random CNs 40 variables 15 values domain.

changing. used random uniform CN generator (Frost, Bessiere, Dechter, &
Regin, 1996) produces instances according Model B (Prosser, 1996). involves
four parameters: n number variables, common size initial domains, p1
proportion constraints network (the density p1=1 corresponds complete
graph) p2 proportion forbidden pairs values constraint (the tightness).
generated problems 40 variables 15 values domain. local
consistency density p1, two particular values tightness determined.
one hand, T0 (p1) tightness local consistency delete
value 50% CNs generated p1 density. values tightness lower
T0 (p1), local consistency seldom deletes many values. hand, Tall (p1)
tightness local consistency finds inconsistency 50% CNs generated
density p1. constraint networks tighter constraints, local consistency
often removes values. mentioned local consistencies, values T0 (p1)
218

fiDomain Filtering Consistencies

.01
.01

.1

.2

.3

.4

.5

.6

.7

.8

.9

1

Tightness

.1
.2
.3
.4
.5
.6


e
n





AC
RPC
PIC
2-RPC
Max-RPC

.7

SAC
Strong PC

.8

SRPC
NIC
Variable
completability

.9
1

Figure 6: Tall bounds random CNs 40 variables 15 values domain.

Tall (p1) density p1 given Figure 5 Figure 6 respectively. also
show bounds variable completability filtering removes globally
inconsistent values, thus strongest filtering limit filtering
domains. determine T0 Tall bounds, 300 CNs generated
(density, tightness) pair. explains generated problems relatively small.
already proved theoretically, PIC stronger RPC. pruning efficiencies
closed. RPC deletes path inverse inconsistent values halfway
AC Max-RPC terms pruning efficiency. k-RPC k > 1 incomparable
PIC regard stronger relation. However, Figure 5 Figure 6 show
2-RPC pruningful PIC. SAC strong PC almost pruning
efficiency. T0 limits merge Tall limits show slight difference. confirms
similitude SAC strong PC pointed Section 3. Although SRPC
strong PC comparable w.r.t. stronger relation, SRPC removes pruningful
strong PC. predicted (van Beek, 1994), polynomial filterings
219

fiDebruyne & Bessiere

.0 1

.1

.2

.3

.4

.5

.6

.7

.8

.9

1

Tightness

AC
RPC
PIC
2-RPC
x - RP C
SAC
Str ong PC

SR PC
NIC
Varia ble
c ompletability

Figure 7: T0 (black points) Tall (white points) bounds random CNs 40
variables, 15 values domain, density 1.

difficulties delete inconsistent values dense problems loose constraints. sparse
CNs, polynomial local consistencies studied close variable completability, whereas
dense CNs, Figure 5 Figure 6 show large range tightnesses
variable completability. NIC behaves differently since complete constraint networks
corresponds variable completability. So, dense CNs, NIC far pruningful
local consistencies. CNs generated density lower .28 NIC
less pruningful SRPC, strong PC SAC. important propagation
network is, closer T0 Tall are. filtering (such AC) uses
local property delete inconsistent values, large set CNs removes
values. pruningful local consistencies consider important
part network know whether value consistent not. So, seldom delete
values. CNs, delete value, detect inconsistency:
propagation first value deletions often leads domain wipe out.

6. Time Efficiency
6.1 Radio Link Frequency Assignment Problems
experimental evaluation done radio link frequency assignment problems
described (Cabon, de Givry, Lobjois, Schiex, & Warners, 1999), namely instances
CELAR4 named Scen01 Scen11, GRAPH instances generated using
GRAPH generator Delft University named Graph01 Graph14. problems
assign frequencies set radio links defined pairs sites order
avoid interferences5 . problems 200 916 variables 40 values
average domain. constraints binary cost violation specified
4. thanks Centre dElectronique de lArmement (France).
5. See http://www-bia.inra.fr/T/schiex/Doc/CELARE.html detailed presentation
problems.

220

fiDomain Filtering Consistencies

Scen02
Scen03
Scen11

AC7
0.27
0.58
0.89

RPC2
0.7
1.55
2.53

PIC2
4.38
9.13
13.79

Max-RPC1
6.33
14.21
25.84

SAC1
45.5
99.49
144.3

SRPC1
434.93
946.31
1362.18

NIC1
10.45
26.58
time

Table 2: Cpu time performances RLFAP instances local consistencies studied hold.

level 0 4. level 0 corresponds hard constraints, levels 1 4
decreasing cost violation. problem ScenXX (resp. GraphXX), call
ScenXX.3, ScenXX.2, ScenXX.1 ScenXX.0 (resp. GraphXX.3, GraphXX.2, GraphXX.1
GraphXX.0) problems satisfaction obtained considering problem ScenXX
(resp. GraphXX) constraints level 0 3, 0 2, 0 1, 0 respectively.
experimental evaluation, consider cpu time performances
percentage values deleted local consistencies studied. algorithms used AC7
(Bessiere, Freuder, & Regin, 1995), RPC2 (Debruyne & Bessiere, 1997a), PIC2 (Debruyne,
2000), Max-RPC1 (Debruyne & Bessiere, 1997a), singleton arc consistency algorithm
(Debruyne & Bessiere, 1997b) (SAC1) based AC6, SRPC algorithm based RPC2
(SRPC1), NIC algorithm proposed (Freuder & Elfe, 1996) (NIC1) using FCCBJ (Prosser, 1993) (as Freuder & Elfe, 1996) dom+deg dynamic variable ordering
heuristic (minimal domain first, ties broken choosing variable
highest degree constraint graph Frost & Dechter, 1995; Bessiere & Regin, 1996).
algorithms modified stop soon domain wipe occurs.
show results strong PC section large problems requires
often 2 hours time limit. algorithms tested
ScenXX, Scen XX.X, GraphXX, GraphXX.X problem using Sun UltraSparc IIi 440
Mhz. sake clarity, show results representative problems.
6.1.1 Results problems studied local consistencies hold
(cf. Table 2)
local consistencies studied hold constraint network, corresponding
filtering algorithms useless. waste time check whether local consistencies
hold without deleting inconsistent value. problems, stronger local
consistency is, important time wasted.
see consequence exponential worst case time complexity NIC1.
problems, NIC1 requires reasonable cpu time. see
problem Scen11, combinatorial explosion lead really prohibitive cpu time NIC1.
6.1.2 Results arc inconsistent problems (cf. Table 3)
arc consistency sufficient detect inconsistency problem, stronger local
consistencies always costly. Figure 3 see Max-RPC1
often best cpu time performances Graph06 example, AC7 one
221

fiDebruyne & Bessiere

Scen07
Graph07
Scen08
Graph06

AC7
0.42
0.11
0.75
0.48

RPC2
0.43
0.14
0.48
0.27

PIC2
0.44
0.12
0.73
0.44

Max-RPC1
0.09
0.16
0.4
0.26

SAC1
0.59
0.24
0.52
0.27

SRPC1
0.47
0.14
0.47
0.27

NIC1
1.89
1.08
time
10.13

Table 3: Cpu time performances arc inconsistent RLFAP instances.

Scen06.1
Scen09.1
Graph04
Graph10
Graph06.1
Graph12.1

cpu time
% DV
cpu time
% DV
cpu time
% DV
cpu time
% DV
cpu time
% DV
cpu time
% DV

AC7
0.27
7.88
0.8
22.48
0.81
4.97
1.43
1.43
0.39
14.96
0.73
10.42

RPC2
0.48
8.33
1.52
25.79
2.07
6.67
3.32
1.62
0.81
17.69
1.35
12.23

PIC2
0.96
17.85
1.87
29.79
18.65
6.95
37.7
1.68
0.9
100
2.83
15.28

MaxRPC1
2.04
19.7
5.88
31.03
25.39
10.35
51.42
5.42
0.8
100
5.41
100

SAC1
66.32
42.47
167.85
35.86
2238.13
18.44
3984.13
9.53
6.69
100
9.47
100

SRPC1
227.13
42.57
568.08
35.86
time
?
time
?
3.21
100
32.12
100

NIC1
time
?
318.38
31.57
101.77
13.14
2033.39
7.35
8.54
100
3.97
100

Table 4: Cpu time performances percentages values deleted local consistencies
studied (% DV) RLFAP instances.

expensive local consistencies. enforcing AC requires propagation find
arc inconsistency problem, stronger local consistency wipe domain
quickly AC7.
constraint networks, algorithms used low cpu time requirements, except NIC1, expensive instances, Scen08.
6.1.3 Results problems (cf. Table 4)
many RLFAP problems local consistencies delete sets
inconsistent values. see important difference pruning efficiencies
especially problems ScenXX.1 GraphXX.1.
Obviously, problems, pruningful local consistency is,
important time required. see problems Scen06.1 Scen09.1
example. However, AC7, RPC2, PIC2, Max-RPC1 cpu time performances
order magnitude SAC1, SRPC1, NIC1 often far expensive.
222

fiDomain Filtering Consistencies

especially obvious Graph04 Graph10. However, difficult say
interesting local consistency problems since even SAC1, SRPC1
costly, see Scen06.1 Graph04 far pruningful.
problems highlight NIC1 stable. sometimes shows good performances, exponential explosion lead prohibitive cost instances.
NIC1 requires reasonable time, pruning efficiency closer one MaxRPC1 one SAC1. results confirm neighborhoods
variables small, NIC1 really prohibitive.
Graph06.1, PIC2 (and obviously algorithms enforcing stronger local consistency) finds inconsistency problem whereas AC7, RPC2 remove part
inconsistent values. see similar behavior Graph12.1 Max-RPC1
wipes domain whereas AC7, RPC2 PIC2 find inconsistency
problem. instances, Max-RPC1 best choice.
6.2 Randomly Generated Problems
random uniform CN generator section 5.2 used compare cpu time required
enforce local consistencies. point NIC designed
used uniform CNs adapt filtering effort degree variables
constraint graph. So, NIC would better performances non-uniform CNs
presented section. generated problems 200 variables 30 values
initial domain. Figure 8 shows results CNs density .02. CNs
relatively sparse since variables four neighbors average. Figure 9 presents
performances density .15 (the variables 30 neighbors average).
set parameters, flawed variables (MacIntyre, Prosser, Smith, & Walsh,
1998) generated problems.6 addition algorithms previous section,
use strong path consistency algorithm based PC8 (Chmeiss & Jegou, 1996) AC6.
algorithm stops soon domain wipe occurs soon constraint
longer allows pair values. addition percentage deleted values cpu
time performances, Figure 8 Figure 9 show cpu time number deleted values
ratio tightness local consistency removes least one value average.
tightness, 50 instances generated. Figure 8 Figure 9 show mean values
obtained Pentium II-266 Mhz 32 Mb memory Linux.
observed (Gent, MacIntyre, Prosser, Shaw, & Walsh, 1997) arc consistency,
filtering algorithms tested complexity peak. low values tightness,
easily prove values locally consistent, constraints tight,
quickly wipe domain. local consistency phase transition
hardest problems algorithm achieving local consistency tend occur.
6.3 Experiments Sparse CNs
Even sparse CNs (see Figure 8), cpu time results different algorithms (7h 48min strong PC peak AC7 requires .22 seconds
average) logarithmic scale used. Strong PC really prohibitive, even
6. Section 5.2,the tightness reaching 1, obviously flawed variables sets parameters.

223

fiDebruyne & Bessiere

low values tightness. SRPC SAC bad cpu time number deleted values
ratios, except SAC CNs tight constraints SAC algorithm used
based AC6 efficient AC7 problems. sparse
CNs, NIC often better cpu time performances SAC remove
values Max-RPC. Consequently, NIC bad cpu time number deleted values
ratio. Unlike strong PC, SRPC, SAC, NIC, cpu time requirements AC7, PIC2,
RPC2 Max-RPC order magnitude. cpu time number
deleted values ratios four last filterings also close, little advantage
PIC2. Although PIC stronger RPC, PIC2 less expensive RPC2
sparse CNs. 3-cliques constraint graph, PIC2 require far
cpu time AC7 whereas RPC2 two times expensive AC7 since
looks two supports value constraint.
6.4 Experiments Dense CNs
dense CNs (see Figure 9), complexity peaks AC7, RPC2, PIC2, MaxRPC stay close other. PIC2 less worthwhile since deletes additional values
compared RPC2 cpu time requirements close Max-RPC. MaxRPC one best cpu time number deleted values ratios. soon RPC
leads domain wipe out, cpu time performances SRPC RPC2 merge. Indeed,
SRPC algorithm used enforces RPC2 checking restricted path consistency
sub-problems P |Di ={a} (i, a) D. values domain restricted
path inconsistent, RPC preprocessing finds global inconsistency problem
SRPC algorithm stops. SRPC less expensive strong PC although
pruningful. two filterings remain expensive. NIC pruningful
local consistency CNs. Hence, large range tightnesses, NIC best
cpu time number deleted values ratio. However, instances, NIC cannot avoid
combinatorial explosion. Although NIC requires fifteen minutes average
tightness .52, two hours required instances. conceivable
instances NIC requires far cpu time exist set parameters.
Obviously, set CNs NIC prohibitive grows density increases.
results SAC lower standard deviation. SAC never requires fifty
two minutes problems generated experiments.
6.5 Discussion
conclude results? Strong PC far least interesting filtering
technique. Compared SAC, removes strong path inconsistent values,
strong PC really prohibitive.7 Achieving SAC SRPC costly long two
local consistencies delete value. Obviously, although SAC SRPC
expensive Max-RPC almost generated problems, cannot say
better use Max-RPC. Indeed, density .15 example, Max-RPC useless

7. point path consistency constraint expressed without explicitly
storing set forbidden tuples, path consistency used (e.g., temporal networks Allen, 1983,
constraint networks Smith, 1992).

224

fiDomain Filtering Consistencies

1E+5

n=200, d=30, p1=.02

cpu time (in sec.)

7h48m

1E+4

16m in15sec
Stron g PC

1E+3

2min3 6sec

1E+2
SR PC
9.33s ec
1E+1
SA C

NI C

1E+0

x-R PC

PI C2

1 E -1

R PC 2
0.36s ec
0. 37s ec

AC 7

0.22s ec
1 E- 2
0.24s ec

Tig htne ss

1 E -3

1
10 0

5

10

15

20

25

30

35

40

45

50

55

60

65

70

75

80

85

40

45

50

55

60

65

70

75

80

85

50

55

60

65

70

75

80

85

90

95

99

Percentage values deleted

Tightness
0
1
1E+2

5

10

15

20

25

30

35

90

95

99

cpu time number deleted values ratio
1 E -1

1E+1

SRPC

1E+0

Strong PC

1E -2

AC 7
SAC
P IC 2

1E -1
x-RP C
RP C2

NIC

1E -3

1 E -2

1 E -3

1E -4
1 E -4

1 E -5

1E -5

1 E -6

75

80

85

90

95

Tightness

1E -7
1

5

10
AC 7

15

20
25
R PC 2

30
35
PIC 2

40

45

Max-R PC

SA C

SRPC

Strong PC

90

95

99

N IC

Figure 8: Experimental evaluation random CNs n=200, d=30, p1=.02.
225

fiDebruyne & Bessiere

1E+5

cpu time (in sec.)

n=200, d=30, p1=.15
12h40m
3h53

1E+4

39m in43 sec

Strong PC
1E+3

15min 21sec

SRPC
1E+2
SA C
NIC
8.63 sec
1E+1
x -RP C
2. 44s ec

6.25s ec
R PC 2

1E+0

P IC 2

1. 11s ec

AC 7
1 E -1

1 E -2

Tightness

1E -3
1
100

10

5

15

20

25

30

35

40

45

50

55

60

65

70

75

80

85

90

95

99

Percentage values deleted
Tightness

0
1
1E+2

5

10

15

20

25

30

35

40

45

50

55

60

65

70

75

80

60

65

70

75

80

85

90

95

99

95

99

cpu time number deleted values ratio

R PC 2

1E+1

1 E -2

SRPC
AC7

SA C
1E+0

1 E -3

1 E- 1

P IC 2

1 E -2

1E -4
Strong PC
N IC

1 E -3

1 E -5

1 E -4

1 E -5

Max-R PC

1E -6

1 E- 6

65

70

75

80

85

Tightness

90

1 E -7

1

5

10
AC7

15

20
R PC 2

25

30

35

PIC 2

40

45

50

Max-R PC

55

SA C

SRPC

85

Strong PC

90

N IC

Figure 9: Experimental evaluation random CNs n=200, d=30, p1=.15.
226

fiDomain Filtering Consistencies

tightnesses lower .63 since delete value, SRPC limit .57
tightness. Furthermore, singleton consistencies argue algorithm used
achieve optimal. algorithm reusing part filtering performed
P |Di ={a} process sub-problems P |Dj ={b} , ((i, a) (j, b) belonging D) would
improve cpu time performances. However, cpu time number deleted values ratios
SAC SRPC algorithms often among worst ones, especially sparse CNs. SAC
SRPC expensive hardly likely enhancements algorithms
could lead worthwhile filterings. sparse uniform CNs, NIC
best choice. Compared Max-RPC, delete enough values offset
additional cpu time cost. Furthermore, NIC cannot used dense CNs since cpu
time requirements become greater search algorithm. So, NIC used
relatively dense CNs, Figure 9 NIC worthwhile average
(although instances combinatorial explosion cannot avoided). dense
CNs, worst case time complexity Max-RPC PIC2 close one best
path consistency algorithm (O(en + ed2 + cd3 ) O(n3 d3 )). However, experiments
underline achieving Max-RPC PIC2 far less expensive practice. Compared
RPC2 Max-RPC, PIC2 good solution in-between. cpu time number
deleted values ratios RPC2 Max-RPC better one PIC2 (except
sparse CNs PIC2 less expensive RPC2). Indeed, PIC2 deletes
additional values compared RPC2, cpu time performances close
Max-RPC.
Cpu time performances even essential aim maintain local consistency search. Maintaining local consistency search requires repeatedly
propagate choice value variable (namely restriction domain
singleton) refutation value. worthwhile, local consistency require
less time detect branch search tree lead solution search
algorithm explore branch. So, maintaining local consistency search
outperform MAC hard problems local consistency pruningful
AC requiring little additional cpu time. regard criterion,
discard strong PC, SAC, SRPC, NIC dense CNs expensive.
conceivable find instances maintaining consistencies
search outperforms MAC, expensive maintained local consistency is,
seldom problems MAC outperformed be. sparse CNs, NIC
prohibitive, deletes additional values compared Max-RPC
therefore bad cpu time number deleted values ratio. Finally, promising
local consistencies RPC Max-RPC. exclude arc consistency, RPC least
expensive local consistency studied. Furthermore, RPC algorithms delete
path inverse inconsistent values. Although Max-RPC far pruningful arc
consistency, experiments show practice, Max-RPC good cpu time results.
Therefore, seems likely maintaining RPC Max-RPC search could
outperform MAC hard problems.
confirm results, algorithm called Quick maintains adaptation
Max-RPC compared MAC. results experiments (Debruyne, 1999)
show Quick better cpu time performances MAC large hard randomly
generated CNs relatively sparse. interestingly, Quick impor227

fiDebruyne & Bessiere

tant stability MAC (the cpu time performances Quick low standard
deviation). would interesting propose efficient algorithms maintain
local consistencies studied paper compare algorithms. study
would allow us know whether search, advantageous local consistencies
remain RPC Max-RPC preprocessing step. First results effect
maintaining SAC search given (Prosser, Stergiou, & Walsh, 2000).

7. Conclusion
paper extended idea restricted path consistency k-RPC MaxRPC, pruningful local consistencies. proposed new class local
consistencies called singleton consistencies. studied new local consistencies
local consistencies alike used large CNs removing values
arc consistency. showed relations compared
theoretically experimentally pruning time efficiencies. pruningful
neighborhood inverse consistency singleton restricted path consistency. However,
SRPC expensive time exponential worst case time complexity NIC makes
unusable dense CNs. looking local consistency would advantageously
maintained search, RPC Max RPC seem promising local
consistencies. Indeed, relatively inexpensive far pruningful arc
consistency.

8. Acknowledgements
would like thank Toby Walsh suggestions improving presentation
figures Section 5.

References
Allen, J. (1983). Maintaining Knowledge Temporal Intervals. Communications
ACM, 26(11), 832843.
Bacchus, F., & van Run, P. (1995). Dynamic variable ordering csps. Proceedings
CP-95, Cassis, France, pp. 258275.
Berlandier, P. (1995). Improving domain filtering using restricted path consistency.
Proceedings IEEE CAIA-95.
Bessiere, C., Freuder, E., & Regin, J. (1995). Using inference reduce arc-consistency
computation. Proceedings IJCAI-95, Montreal, Canada, pp. 592598.
Bessiere, C., Freuder, E., & Regin, J. (1999). Using constraint metaknowledge reduce
arc consistency computation. Artificial Intelligence, 107(1), 125148.
Bessiere, C., & Regin, J. (1996). MAC combined heuristics: Two reasons forsake FC
(and CBJ?) hard problems. Proceedings CP-96, Cambridge MA, pp. 6175.
228

fiDomain Filtering Consistencies

Cabon, C., de Givry, S., Lobjois, L., Schiex, T., & Warners, J. (1999). Radio link frequency
assignment benchmarks. CONSTRAINTS, 4(1), 7989.
Cheeseman, P., Kanefsky, B., & Taylor, W. (1991). really hard problems are.
Proceedings IJCAI-91, Sydney, Australia, pp. 294299.
Chmeiss, A., & Jegou, P. (1996). Two new constraint propagation algorithms requiring
small space complexity. Proceedings IEEE ICTAI-96, Toulouse, France, pp.
286289.
Debruyne, R. (1999). strong local consistency constraint satisfaction. Proceedings
IEEE ICTAI-99, Chicago IL, pp. 202209.
Debruyne, R. (2000). property path inverse consistency leading optimal algorithm. Proceedings ECAI-00, Berlin, Germany, pp. 8892.
Debruyne, R., & Bessiere, C. (1997a). restricted path consistency max-restricted
path consistency. Proceedings CP-97, Linz, Austria, pp. 312326.
Debruyne, R., & Bessiere, C. (1997b). practicable filtering techniques constraint satisfaction problem. Proceedings IJCAI-97, Nagoya, Japan, pp. 412417.
Dechter, R., & Meiri, I. (1994). Experimental evaluation preprocessing algorithms
constraint satisfaction problems. Artificial Intelligence, 68, 211241.
Dechter, R., & Pearl, J. (1988). Network-based heuristics constraint-satisfaction problems. Artificial Intelligence, 34, 138.
Freuder, E. (1982). sufficient condition backtrack-free search. Journal ACM,
29(1), 2432.
Freuder, E. (1985). sufficient condition backtrack-bounded search. Journal
ACM, 32(4), 755761.
Freuder, E. (1991). Completable representations constraint satisfaction problems.
Proceedings KR-91, Cambridge MA, pp. 186195.
Freuder, E., & Elfe, C. (1996). Neighborhood inverse consistency preprocessing. Proceedings AAAI-96, Portland OR, pp. 202208.
Frost, D., Bessiere, C., Dechter, R., & Regin, J. (1996). Random uniform csp generators.
http://www.ics.uci.edu/ frost/csp/generatotr.html.
Frost, D., & Dechter, R. (1995). Look-ahead value ordering constraint satisfaction
problems. Proceedings IJCAI-95, Montreal, Canada, pp. 572578.
Gaschnig, J. (1974). constraint satisfaction method inference making. Proceedings
12th Annual Allerton Conf. Circuit System Theory, U.I.L., Urbana-Champaign
IL, pp. 866874.
229

fiDebruyne & Bessiere

Gent, I., MacIntyre, E., Prosser, P., Shaw, P., & Walsh, T. (1997). constrainedness
arc consistency. Proceedings CP-97, Linz, Austria, pp. 327340.
Golomb, S., & Baumert, I. (1965). Backtrack programming. Journal ACM, 12(4),
516524.
Grant, S., & Smith, B. (1996). phase transition behaviour maintaining arc consistency. Proceedings ECAI-96, Budapest, Hungary, pp. 175179.
Haralick, R., & Elliott, G. (1980). Increasing tree search efficiency constraint satisfaction
problems. Artificial Intelligence, 14, 263313.
Kumar, V. (1992). Algorithms constraint satisfaction problems: survey. AI Magazine,
13(1), 3244.
MacIntyre, E., Prosser, P., Smith, B., & Walsh, T. (1998). Random constraint satisfaction:
theory meets practice. Proceedings CP-98, Pisa, Italy, Vol. 19, pp. 325339.
McGregor, J. (1979). Relational consistency algorithms application finding
subgraph graph isomorphisms. Information Sciences, 19, 229250.
Meseguer, P. (1989). Constraint satisfaction problems: overview. AICOM, 2, 317.
Nadel, B. (1988). Tree search arc consistency constraint satisfaction algorithms.
L. Kanal V. Kumar, editors, Search Artificial Intelligence, Springer-Verlag,
287342.
Prosser, P. (1993). Hybrid algorithms constraint satisfaction problem. Computational
Intelligence, 9(3), 268299.
Prosser, P. (1996). empirical study phase transition binary constraint satisfaction
problems. Artificial Intelligence, 81, 81109.
Prosser, P., Stergiou, K., & Walsh, T. (2000). Singleton consistencies. Proceedings
CP-00, Singapore, pp. 353368.
Sabin, D., & Freuder, E. (1994). Contradicting conventional wisdom constraint satisfaction. Proceedings ECAI-94, Amsterdam, Netherlands.
Schiex, T., Regin, J., Gaspin, C., & Verfaillie, G. (1996). Lazy arc consistency. Proceedings AAAI-96, Portland OR, pp. 216221.
Singh, M. (1995). Path consistency revisited. Proceedings IEEE ICTAI-95, Washington
D.C.
Smith, B. (1992). Solve Zebra Problem, Path Consistency Easy Way.
Proceedings ECAI-92, pp. 3637.
Tsang, E. (1993). Foundations Constraint Satisfaction. London, Academic Press.
van Beek, P. (1994). inherent level local consistency constraint networks.
Proceedings AAAI-94, Seattle WA, pp. 368373.

230

fi
ff
fi
! #"$ %
'&)(*,+.-//!(1032465'( /4

789:; <)( ->=
??!@BA9 %&<C4>=
/!(

DFEHGJILKMKJNOEQPSR8TUILVMR8WR
XZY\[^]Q_a`MW
X_cbBEdN
efIgNXaR>ILW8WYihjVJ_]QNakgILVMW>]ml

IgNOn)Eokqpr]QsQR>_aR>EHG\etNOEus;]Q_v_]Q_

wSx#y{z|}~3xyC#|B#

v$aHZ3vO$3#3


u >
B
v
H'Z'O >C>
>36{'BS{
#~#|fz}x

v
u >
B
H'Z'O >C>
>36{'BS{
$y}z'




xZ#

3{v8.vHZ3vO$3#3

$33$3O)3$ Ov

v
g
a8>B ) >{>
Q

,O
)11BQ1
BB6.1;BO 6 81BL
1J686 !
ff
.Bfiff6fi fi 66 {16>8#B6fi)6L
B
B{188B


>8;6
6{
6Q
>
B{Q JBa6fi !
"6$
#fi
% 8
#86
&


(
'
118)

%);6o1*
>.B !+
,
ff
1 6
u1&
-/.102-,-3.4-+5,-7698+:;ff;
-/.1:<2-;>=6?
!1#681&
18B6o1;
6g 7ffBff@
>{16fi ff @
! 8>
@ ?

ff{ >
8
>;
B
B{188aB

A8{9

>


66

B>CEDGF H;I2JKLH F
MNPO!QRNPSUTVWXQZY([(\,NPV^]?Y(Q_\,`baLc2d,Y`fe1\ggh`PNfWZ\[(NbdVSd,O*\Y([(NijWZNf\,`NPV[kQ_`P`PNbl,Q_VWXQEWXdV[(\,NPVnmR\,Vo4TVhWXQZY([(\,NPVpa
[(NbQ_SZqsrtVu[(vNPS@c2d,Ywjxjc2QyS(v7d
cz[(v\[ThVWXQZY([(\,NPV[ou{YQZQ_eS|TVWXQZY[(\,NPV[oj}srtV/\~WXdV[kY(d`P`PQ_e3Sk[kdpWv\,S([(NPW
SkopSk[kQ_mc@Nb[(v~ThVWXQZY([(\,NPV[o\,SsmEdpe7Q_`bQ_e~{oR\$gh\Y([(Nf\,`P`boyd,{hSkQZY(\{h`bQ\Y(w,de7Q_WZNfS(NbdVEgYdWXQ_S(S_xOd,Y
QX7\,mEgh`bQxgj`P\,VS*WZ\,Vu{Qd,{[(\,NPVQ_euQXWZNbQ_V[(`bod,Y|c@Nb[(vuT\,`PNb[olTh\Y\,V[kQZQ_S_xh{hT7[sY\YQ_`bo{d,[(v>q
2`P\,VVNPVld,QZYuSk[kdWv\,Sk[(NPWe7dmR\,NPVhSc@Nb[(vTVhWXQZY([(\,NPV[oNPSRvh\YeNPVS(dmEQWZ\,SkQ_S&7@*;a
v\YeRd,Y9QZ,Q_V~ThVe7Q_WZNPe\{j`bQ,xSkQZQ)\gh\,ehNPmRNb[kYNPdT|S(Nb[(SNbw`fNPSZxp_,]\,e\,VhNx\,V7wS_xzsdVe7dV>x
_,,qNb,Q_V1[(v\[Nb[NPSv\Ye[kdijVhe\,Vd,gh[(NPmR\,`)gh`P\,Vd,Ygd`PNPWXo,x^NP[NfSVh\[(T7Y\,`)[kdu[kY(o[kdijVe
dV7Q[(v\[NPStl,ddeQ_V7dTlvpqrtV[(vQy{Q_Sk[d,O2\,`f`?gdS(SNb{h`bQc&d,Y`PehSZx[(vNPSc2dT`femRQ_\,V4v\_pNPV7l\,V
\,`bl,d,YNP[(vm[(vh\[NfSUlT\Y\,V[kQZQ_e[kd{QO\,Sk[\,Ve[kdgYdeThWXQ\gd`fNPWXo4[(v\[NPSUYQ_\,SkdV\{h`boWZ`bdSkQ
[kdu[(v7Qd,g[(NPm~\,`?gd`PNfWXo,qV7Od,Y([(TVh\[kQ_`bo,x>c2QRSv7d
cv7QZYQy[(vh\[STWv4\,V4\,`bl,d,YNb[(vmNPSTV`PNPw,Q_`boud,Y_x
NPVSkdmEQWZ\,SkQ_SZxNPmEgdS(SNb{h`bQ,q|v7QNfmEgh`PNPWZ\[(NPdV4O!d,Y\,`bl,d,YNP[(vme7QZ,Q_`Pd,ghmEQ_V[yNPSU[(v\[e7QZ,Q_`bd,gQZYS
S(v7dTh`PeV7d,[|cs\,Sk[kQU[(NPmRQc2d,Y(wpNPV7l[kdc&\Ye{d,[(vlT\Y\,V[kQZQ_S\[@dVWXQ,q
|vQ~gh\Y([(NfWZT`P\Y$m~\[(v7Q_mR\[(NPWZ\,`smEdpe7Q_`PS$c2QWXdVWXQ_V[kY\[kQudVNPV1[(vhNPSUgj\gQZYy\Y(Q/1X
Z! 1jt \,Vep, fi XGZb1,,1 _f jk 93 q
4QWXdVhS(NPe7QZY{d,[(vE[(vQ@Sk[kY\,Nblv[kOd,Y(c&\YeRY(QZgYQ_SkQ_V[(\[(NPdVSd,O>2S2\,VheR&9SZx\,VeRS(ThWZWZNPVWX[
Y(QZgYQ_SkQ_V[(\[(NPdVSZxpS(NPVWXQ[(v7QWXdmEgj`bQXpNP[oEd,OijVehNPV7lgd`PNPWZNbQ_S9NPS9mEQ_\,ST7Y(Q_eV7d,[2NPV~[kQZYmRS2d,O^[(v7QS(NbZQ
d,O)[(v7QSkopSk[kQ_mux{jT7[|NPV[kQZYmRS|d,O?[(v7Q$S(NbZQd,O)[(v7QE(j( XhL, 1d,O)[(v7Q$SkoS([kQ_muq
|vQZY(Q|v\,S){QZQ_VE\S(NblVhNijWZ\,V[?{dpe7oUd,Oc2d,Yw$dVEv7Q_TYNPSk[(NPWZS+Od,Y9S(TWZWZNfVWX[(`boUYQZgY(Q_SkQ_V[kQ_eE2S
SkQZQ~&dT7[(Nf`PNbQZY_x>Q_\,V>x+\,V7wpSZx9_,,];s`bo[(v7Q,x9_,,uOd,YS(T7Y,QZoSq~dmRQEd,O2[(vNfSc2d,Y(wl,Y(d
cS

-//!(O %%j!<6L
<sC>
&O
!fi:Q
99! %&% &>%3%f> <

fi 38?>v{v8.^j

$33$3

dT7[d,O[(v7Q|Q_VlNPV7QZQZYNPVl[kY\,eNb[(NbdV/SkQZQ,xOd,YQXp\,mRgh`bQ,x@S(Nb[(S(Nbwp`PNPS+\,VeE\,V|dojSt_,,\Y([(NfWZ`bQ*dV
OQ_\[(T7Y(QXaL{h\,SkQ_emEQZ[(v7dpeS?c@vhNPWvEe7QZgQ_VehS?dV~Q_mEghNbYNPWZ\,`QZNPeQ_VWXQ*[kdQZ\,`PT\[kQ@\,`bl,d,YNb[(vmRSZq+vNP`bQ
[(v7QZY(Qy\Y(Qyd,{pNbdTSe7Y\_c@{h\,W(wpS[kd[(vNfS@\ggYd\,Wv>xdT7Yc2d,Y(w/\YlT7Q_S@[(vh\[[(vNfS@mR\
o/{Q[(v7QmEdSk[
\ggYd,gYNP\[kQcs\_o3[kd~,QZYNbOou[(v7QyT\,`fNb[od,O\,V\ggY(d
pNPm~\[(NbdV3\,`bl,d,YNb[(vmuxh\[`bQ_\,Sk[NbO)dV7QUcs\,V[(S
[kd~e7dRS(d~NPVY(Q_\,SkdVh\{h`bQ[(NPmEQ,q
|vQ|S(\,mEQ|gYd,{h`bQ_mRS+[(v\[gj`P\lT7Q|\ggYd_7NPmR\[(NbdVE\,`bl,d,YNb[(vmRS)Od,Y9TVWXdmRgY(Q_S(SkQ_eYQZgY(Q_SkQ_V[(\Ga
[(NbdVS*WZ\YY(o~d,QZY@[kdR[(v7QS(ThWZWZNPVWX[*Y(QZgYQ_SkQ_V[(\[(NPdVSZx7\,Ve[(v7QWXdmEghY(Q_S(S(NbdVuNfV[kY(dpeTWXQ_Ss\,eehNb[(NbdV\,`
WXdmEgh`PQXpNb[o,q97d,YQXp\,mEgj`bQ,xNbO[(vQZY(QUNPS*V7dRWXdmRghT7[(\{h`bQ\ghgY(d_7NPmR\[(NPdVd,O+[(vQd,g[(NPmR\,`>gd`PNfWXo~NPV
[(v7QTVWXdmEghY(Q_S(SkQ_eWZ\,SkQ,x>[(v7Q_VWXdmEgY(Q_SS(NbdVc@NP`P`^Vd,[Wv\,V7l,Q[(vNPS_qd
c&QZ,QZY_xNb[NPS@Q_\,S(o3[kdijVe
[(v7Qd,g[(NPm~\,`gd`fNPWXoEO!d,Y|\,VuNfVpijVNb[kQXavd,YNbZdVROT`P`PoEd,{hSkQZY(\{h`bQ&Q_`P`PmR\,V>x>_,,xo,QZ[;a
v\YeghY(d
\{h`bov\Ye7QZY~[(v\,Vgd`bopV7dmRNP\,`&[(NPmEQ$[kd1ijVe\ggYd_7NPmR\[kQ_`bond,g[(NPmR\,`|gd`fNPWZNbQ_SuNPV
[(NPmEQmEQ_\,S(T7Y(Q_e~NPVE[(v7Q@SNbZQ|d,O[(v7Q@NPVghT7[?NbO[(v7Q@NPV7gjT7[;NPS;Y(QZgYQ_SkQ_V[kQ_eS(TWZWZNPVhWX[(`boS(QZQQ_WX[(NbdVq
d,[kQ~[(v\[$[(v7QZY(Q~\YQ~[c&dNfV[kQZY(ghY(QZ[(\[(NbdVS[kd3ijVeNfV7lu\,V\ggYd_7NPmR\[(NbdV>}ijVeNPVl\3gd`fNPWXo
c@Nb[(v\,`PT7QWZ`bdS(Q[kdE[(v\[|d,O+[(v7Qd,g[(NPmR\,`gd`PNPWXo,xpd,Y@SNPmEgh`boRWZ\,`fWZT`P\[(NPV7lE\fihU[(v\[|NPS*WZ`PdSkQ[kd
[(v7Qd,g[(NPm~\,`j\,`PT7Q,q)rOc&QWZ\,Vue7d$[(vQOd,YmEQZY*\,VeuWZ\,VQZ\,`PT\[kQgd`PNPWZNPQ_SZx[(v7Q_Vc&QWZ\,VuWXQZY([(\,NPV`Po
e7d[(v7Q$`P\[k[kQZY
q@|v7QZY(QZOd,Y(Q,xc2QySkdmEQZ[(NPmRQ_SS(vd
c[(v\[[(vQ$`P\[k[kQZYWZ\,VV7d,[{QUe7dV7Q,xd,YWZ\,VhV7d,[{Q
e7dV7QNfV[(NPmEQgd`bopV7dmRNP\,`NPV[(v7Q$S(NbZQd,O+[(v7QUNPV7gjT7[ThV`bQ_S(S*SkdmRQZ[(vNPV7lRTVh`PNbw,Q_`bo~NfS*[kYT7Qq
|vQWXdmEgh`PQXpNb[oWZ`P\,S(S&p@sWXdVhS(NPSk[(Sd,O[(v7dSkQ`P\,V7lT\l,Q_SY(Q_WXd,lVhNb_\{h`bQ{o\n+T7YNPV7l
mR\,WvNPV7Qu[(v\[TSkQ_SRdVh`bo/+?EmEQ_mEd,Y(onO!d,YSkdmEQ/gd`bopV7dmRNf\,`?x2c@vQZY(QuNPSE[(v7QS(NbZQud,O[(v7Q
NPV7gjT7[Zq/&Q_WZ\,TSkQQ_\,Wv[(NPmRQSk[kQZgTSkQ_Sy\[EmEdSk[ydV7QTVNb[d,OmEQ_mEd,Y(o,x&p@s@x+[(vdT7lv
c&QRe7duV7d,[wVd
cc@v7QZ[(vQZY[(v\[NPS\gY(d,gQZYNPVWZ`PThS(NbdV/d,Y$\,VQ_T\,`fNb[o,q&Q_WZ\,TSkQ,xlNP,Q_V4\u`PNPmRNb[
dV[(v7QE\,mEdTV[d,O2mRQ_mEd,Y(oThSkQ_e>x>[(v7QZY(QE\Y(QEdVh`bo/QXpgdVQ_V[(NP\,`f`bo/mR\,VoWXdVpijlT7Y\[(NbdVSd,O2[(v\[
mEQ_mEd,Yo3gdS(S(Nb{j`bQ$cNb[(v\iQ_eiVNb[kQ\,`bghv\{QZ[Zx^&7@*z|qyr[NPSV7d,[wVd
c@V4cv7QZ[(v7QZY
[(vNPS@NPS*\EgY(d,gQZY@NfVWZ`PTS(NPdV~d,Y\,V/Q_T\,`PNb[oQ_Nb[(vQZY_x\,`b[(v7dT7lv3Nb[@NPSswpV7d
cV/[(v\[@z

9@q2|vTSZx

\&p@sav\YeVQ_S(S9YQ_S(T`b[&S(\_opSs[(v\[s[(v7QgY(d,{h`bQ_mNPS&\ggh\Y(Q_V[(`bo~Vd,[2[kY\,WX[(\{j`bQ,x7{hT7[s\,V;a
v\YehV7Q_S(SsY(Q_S(Th`b[*S(\_opS|[(v\[@[(v7QgY(d,{j`bQ_mNPS*WXQZY([(\,NPVh`boV7d,[@[kY\,WX[(\{h`bQ,q
@Q_SkQ_\YWvQZYSs\,`PSkdWXdVS(NPe7QZY2gY(d,{h`PQ_mRS;[(v\[s\Y(Q;aWXdmEgh`PQZ[kQTVhe7QZY2`bd,lS(gh\,WXQd,Y&d,[(v7QZY*vNblvh`bo
Y(Q_Sk[kYNPWX[kQ_eEY(Q_eThWX[(NbdVSq)7d,Y9QX7\,mEgh`PQ,x[(v7Q|gd`PNPWXoUQXpNPS([kQ_VWXQ|gY(d,{j`bQ_mO!d,Y2NPVpijVNP[kQXav7d,YNbZdVy2S
NPS;aWXdmEgj`bQZ[kQ)\gh\,ehNPmRNb[kYNPdT|S(Nb[(S(NPw`PNfSZx^_,,q|vNPSNPSTSkQZOT`NPVO!d,Ym~\[(NbdV>xh{Q_WZ\,TS(QyNb[NPS
l,Q_V7QZY\,`f`bo~[(v7dTlv[*[(v\[|aWXdmEgh`bQZ[kQUgY(d,{h`bQ_m~S2\Y(Q$V7d,[*S(TS(WXQZg[(NP{h`bQ[kd~S(NblVNbijWZ\,V[sSkgQZQ_epaT7gpNP\
gh\Y\,`f`bQ_`PNb_\[(NbdV^q7d,Y\RmEd,Y(Q$[(v7d,Y(dT7lv/ehNPS(WZTS(SNbdVd,O;;aWXdmEgh`PQZ[kQ_V7Q_S(SZxSkQZQYQZQ_V`P\_cUxh@dd
,QZY
x
T7ZZd7x_,,qfi
4Q3\,`fSkd4wVd
c[(v\[R&7@*|x2S(d1
\,Vo3\Y(lTmEQ_V[d,Y{Q_`PNPQZO+[(vh\[

&p@sc&dT`PeNfmEgh`bo1
|q|vTSZx


NPmRgh`PNbQ_S*[(vh\[ sp@s|qE7d,YQ_`P\{d,Y\[(NPdVS@d,O9[(vNPS

WXdmEgh`PQXpNb[o[(vQZd,Y(ogYNPmEQZY
xSkQZQ$\,VouWXdmEgh`PQXpNb[o[(vQZd,Y(o[kQX[ZxhSTWv\,S|)\gh\,eNPmRNP[kYNbdT>x_,G7qfi
rtV[(vNPSgh\gQZY_x>c&QRS(v7dc[(v\[[(v7QZY(QRNPS\uV7Q_WXQ_SS(\Y(o[kY\,e7QXaLd{QZ[c&QZQ_V4YTVVhNPV7l~[(NfmEQlT\Yka
\,V[kQZQ_Sy\,Vhe1gQZY(Od,YmR\,VWXQElT\Y\,V[kQZQ_SyOd,Y$\,Vo4l,Q_V7QZY\,`&&z\gghY(d_7NPmR\[(NbdV\,`bl,d,YNb[(vhm
TV`PQ_S(SU

d,YE
sp@s|q?\{j`bQlNb,Q_S\,Vd
,QZY(pNbQZcd,O|dT7YyY(Q_S(Th`b[(SZqfid,[kQ[(v\[


\,S(S(ThmRNPV7l d,Y sp@s&@[(vNfS[kQ_`P`PSTS[(v\[[(v7QZYQNfSV7du\,`bl,d,YNb[(vm[(v\[YTVSNPV

[(NPmEQEgd`bopV7dmRNf\,`?NPV[(vQRS(NbZQEd,Os[(v7QEY(QZgYQ_SkQ_V[(\[(NPdV4d,Os[(v7QR&[(v\[ijVeS\ugd`PNPWXo3[(v\[
NPSWZ`bdSkQ[kdd,g[(NPm~\,`?Z3X,X

L Xq1r[Ee7dQ_SEVd,[S\_o[(vh\[yO\,Sk[E\,`bl,d,YNP[(vmRSyc@NP`P`9gY(dpeTWXQ
O\YkaLO!YdmaLd,g[(NPmR\,`9G\,`fT7Q_SOd,Yy\,`f`9&9S_][(v7QZY(Q\Y(Qm~\,Vo1NPVhSk[(\,VWXQ_Scv7QZY(Q~[(vQ\,`bl,d,YNP[(vmRS
\,`bY(Q_\,eoNPVTSkQd,Y{Q_NPV7le7QZ,Q_`bd,gQ_ec@NP`P`{Qy{d,[(vO\,Sk[\,Ve4WZ`bdSkQ,q$4QRS(NPmEgh`PoWZ\,V^[lT\Y\,V[kQZQ
[(v\[|[(vQU\,`bl,d,YNb[(vhmRSsc@NP`P`;9

ijVheu\RWZ`bdSkQXaL[kdaLd,g[(NfmR\,`^gd`PNPWXoThNPW(wp`bo,q

_

fi



Q~v'z

C

vh73Qh{.L8$>${3

y{#y{|}$}z~v

+\Y[(NP\,`>d,{hSkQZYG\{hNf`PNb[o





Sk[(\[(NbdV\Yo

_a\gg^q





[(NfmEQXae7QZgQ_Ve7Q_V[



Sk[(\[(NbdV\Yo



T`P`d,{hS(QZY(G\{jNP`PNb[o
Sk[(\[(NbdV\Yo
Sk[(\[(NbdV\Yo

a\gg^q
_
_a\gg^q
a\gg^q
_
a\gg^q
_






[(NfmEQXae7QZgQ_Ve7Q_V[

[(NfmEQXae7QZgQ_Ve7Q_V[

\{d,QXa\_l7qj\,`PT7Q




vhNPSk[kd,Y(oae7QZgQ_Ve7Q_V[

~vfiffz}8

y~ Z





Sk[(\[(NbdV\Yo

V7d,{jSkQZY(\{hNP`PNb[o




x~vy{z ~




V7d,[@ThV`bQ_S(Ss
V7d,[@ThV`bQ_S(Ss &p@s
V7d,[@ThV`bQ_S(Ss
TVhWXdmEghT7[(\{h`PQ

\,e\,VN>QZ[\,`qbx_,,




_a\gg^q


@&


a\,eeNb[(Nb,Q\ghg^q

V7d,[@ThV`bQ_S(Ss

a\,eeNb[(Nb,Q\ghg^q


V7d,[@ThV`bQ_S(Ss
V7d,[@ThV`bQ_S(Ss



;av\Ye
;av\Ye

+\{h`bQR}2\YehV7Q_S(S*Od,Y|gh\Y([(Nf\,`P`bo~\,Ve/OT`f`boRd,{hSkQZYG\{h`PQ9S





#y{~ffz}z~|

#y{z|}{z |3#

|v7QSk[(\[kQud,O|[(vQ\Y[ycNb[(vYQ_SkgQ_WX[$[kd1sgd`PNPWXoaijVehNPV7l/\,`bl,d,YNP[(vmRSyNPSy[(v\[[(v7QZY(Qu\Y(Q
[(v7Y(QZQ$[ogQ_S@d,O\,`bl,d,YNb[(vmRSNPV3TS(QUd,YTVe7QZY@NfV,Q_Sk[(NPl\[(NbdV>}sQXp\,WX[\,`bl,d,YNP[(vmRSZx\ggY(d
pNPm~\[(NbdVSZx
\,Ve

v7Q_T7YNfSk[(NPWZSZq;7\,WX[\,`bl,d,YNb[(vm~S\[k[kQ_mEgh[[kdijVeQXp\,WX[uSkd`PT[(NbdVSZqrtV[(v7Q3ijVNb[kQXavd,YNbZdV

WZ\,SkQ_SZx[(v7QZoYTVNPV

c&d,YSk[taWZ\,SkQ4[(NPmRQ\[`bQ_\,Sk[QXpgdVQ_V[(NP\,`NPV

[(v7Qv7d,YNbZdV\,S(S(Tm~NPV7l\nSk[kY\,NPlv[kOd,Y(cs\YeYQZgY(Q_SkQ_V[(\[(NbdV

[(v7QS(NbZQd,O[(v7Q&\,Ve

d,O[(v7Q&&q&rV

[(v7QNfVpijVNb[kQ

d,O

v7d,YNPZdV>x?[(vQZoe7dVd,[$V7Q_WXQ_S(S\YNP`bo4v\,`b[Zx){hT[$WZ\,V{QSk[kd,ggQ_e1cv7Q_V1[(v7Qgd`PNPWXoNPS$c@Nb[(vNPV

d,g[(NPm~\,`\Wv7Q_W(w\{h`bQ/WXdVehNb[(NbdVjq4ggY(d
pNPm~\[(NbdV\,`Pl,d,YNb[(vmRSWXdVS([kYTWX[E\ggY(d
pNfmR\[(NbdVS$[kd

c@v\[2[(v7Q@QX7\,WX[s\,`bl,d,YNb[(vm~S;ijVe^qsp\,mEgj`bQ_Sd,O>[(vNfS9NPVWZ`fTe7Q*l,YNPe7aL{h\,SkQ_eRmEQZ[(vdeS_x\,TSkwY(Q_Wv[Zx



_,]>M^d,Q tdo,x_,p]vNb[kQ,x+_,pqfiQ_T7YNPSk[(NfWZS|WXdmEQ$NfVu[c&d

\_,d,YSZ}s[(v7dS(QU[(v\[WXdVSk[kYTWX[d,Y

ijVe\,WX[(T\,`9gd`PNPWZNbQ_S[(v\[UWZ\,V4{QEQZ\,`PT\[kQ_e>x?\,Ve[(v7dSkQR[(vh\[SkgQ_WZNbO!o\umEQ_\,VSd,OsWvddS(NfV7l/\,V
\,WX[(NbdV1Od,Y|QX7\,mEgh`bQ,x;kmEdSk[|`fNbw,Q_`boRSk[(\[kQ_xjc@vNPWvedVd,[&opNbQ_`Pegd`PNPWZNbQ_S2[(v\[|WZ\,V{QQZG\,`fT\[kQ_e
TS(NfV7l[(v7QSk[(\,Ve\Ye>x`PNPV7Q_\Y|\,`Pl,QZ{Y\GaL{h\,SkQ_e3mEQZ[(v7dpeSZq

|vQ*{Q_S([WZT7Y(Y(Q_V[;QXp\,WX[&\,`bl,d,YNb[(vhmNPSNPVWXYQ_mEQ_V[(\,`pghYTVNPVlrt&?c@NP[(vgdNfV[taL{h\,S(Q_eRNPmEgYd
,QXa

"!
#!>v\,V7l7x_,,q@M?Nb[k[(mR\,V>S\,V\,`bopS(NPS*d,O;[(vQc@Nb[(V7Q_SS|\,`bl,d,YNb[(vhm MNP[k[(mR\,V>x
Q_\,V>x>%$\Q_`P{h`PNPV7l7x^_,,]s\,SS(\,Ve7Y\px&$\Q_`b{h`fNPV7l7xhMNb[k[(mR\,V^x?_,,Sk[(NP`P`>\ghgh`PNbQ_SZ}&|vNPS@\,`bl,da
mEQ_V[y vh\,V7l7xhM^QZQ,x>

YNb[(vhmY(Q_TNbY(Q_S>QXpgdV7Q_V[(NP\,`[(NPmRQ2NPV[(vQ9c&d,YSk[?WZ\,S(Q,q)@v7Q9TVeQZY`bopNPV7ls[(v7QZd,Y(od,O7[(v7Q_S(Q2\,`bl,d,YNP[(vmRS
Nb[(V7Q_S(SZx+rt?xQZ[(WqfiOd,Y$NfVpijVNb[kQXavd,YNbZdVWZ\,SkQ_Sye7QZgQ_VeSdV&Q_`P`fmR\,V>S\,VedVeNPwjSc&d,Y(wdV

\,`PT7Q2NP[kQZY\[(NbdVOd,Y)9S+\,Vey&9Ss&Q_`P`PmR\,V>xp_,]ppdVeNbwx_]7pmR\,`P`bc&ddeUdVehNbwjx

('

_ q
|vQ{Q_Sk[ywVd
c@VnO\,mRNP`bo4d,O\ggY(d
pNPm~\[(NbdV\,`bl,d,YNb[(vm~S$NPSywpV7d
cVn\,Sl,YNPemRQZ[(v7dehSZq4|v7Q
{h\,S(NfWENPe7Q_\/NPS[kdTSkQR\/ijVNb[kQEl,YNPe4d,OsgdNPV[(SUNPV[(v7Q~{Q_`PNPQZO2Skgh\,WXQ[(v7QSkgj\,WXQRd,O|\,`P`)gY(d,{j\{hNP`PNb[o
eNPS([kYNb{hT7[(NPdVSd
,QZYy[(v7QSk[(\[kQ_Syd,O*[(v7Q&

[(vNPS$NPS[(v7QTVe7QZY`PoNPVlSkgj\,WXQ~Od,YU[(v7Q\,`bl,da

YNb[(vhmRSmEQ_V[(NPdV7Q_e1\{d
,Q[kd3e7QXijV7QE\ugd`PNfWXo,qEVhWXQE[(v7QRl,YNPegdNPV[(S\Y(QRWv7dSkQ_V>x+\,`P`)d,O2[(vQ_SkQ
\,`bl,d,YNP[(vmRS|TS(QG\,`fT7QUNb[kQZY\[(NPdV/dV/[(vQUgdNPV[(S*[kd~d,{[(\,NfV3\Rgd`PNfWXoOd,Y@[(v7dS(QU{Q_`PNbQZO+Sk[(\[kQ_SZx[(v7Q_V
NPV[kQZY(gd`P\[kQ[kd[(v7QUcv7d`bQ{Q_`PNbQZO)Skgh\,WXQ,q|@v7Q$eNbQZY(Q_VhWXQUNPVu[(v7Qy\,`bl,d,YNb[(vhmRS@`PNPQ_S@NPVu[(vQ$WvdNPWXQ$d,O
l,YNPegdNPV[(SZqsVEQX7WXQ_`P`bQ_V[S(T7Y,QZoy\ggQ_\YS;NfVy\,TSkwY(Q_Wv[Zx_,qfi|v7Q_SkQ|\,`Pl,d,YNb[(vmRS;\YQ|WZ\,`P`bQ_e

*)


fi 38?>v{v8.^j

$33$3

\ggYd_7NPmR\[(NbdV\,`bl,d,YNP[(vmRS{Q_WZ\,TSkQ[(v7QZo\ggY(d
pNfmR\[kQ[(v7QEgY(dpWXQ_S(Sd,O9\,`PT7QENb[kQZY\[(NbdV>x>c@vNfWv
[(v7QQX7\,WX[@\,`bl,d,YNb[(vmRS|\,`Pl,d,YNb[(vmRS*WZ\YY(odT[|QXp\,WX[(`Po,q
Q_T7YNPS([(NPWZS9[(vh\[sedVd,[2opNbQ_`PeQ_\,S(NP`boEQZ\,`PT\[kQ_egd`PNfWZNbQ_S9\Y(QS(TY(,QZo,Q_euNPVLs\,S(S(\,VeY\px>_,,q
|v7Q_S(Q\Y(Qd,O[kQ_V,QZY(o~Q_\,S(o~[kdRNPmEgj`bQ_mEQ_V[Zx\,VeNPVWZ`fTe7Q@[kQ_WvVNPT7Q_SsS(TWv\,SEkmEdSk[*`PNbw,Q_`boRS([(\[kQ_
WvddS(NfV7l4\Sk[(\[kQucNb[(v[(vQvhNblv7Q_Sk[$gY(d,{h\{hNf`PNb[oOY(dm
SkopSk[kQ_m

c2QZY(QOT`P`bod,{hSkQZY(\{h`bQx;\,VenmRNPVhNPm$ThmQ_V[kY(d,go

[(v7Q{Q_`PNbQZO*Sk[(\[kQ,x2\,Vhen\,WX[(NfV7l4\,SyNPO|[(v7Q
Wv7ddSNPV7l3[(vQ\,WX[(NbdV[(v\[ylNb,Q_Sy[(v7Q

mEdSk[/NfV7O!d,YmR\[(NbdV\{dT7[u[(v7Q1WZT7Y(YQ_V[/Sk[(\[kQq[(v7QZYSue7QZgQ_Ve

dVt,d,[(NfV7l7xc@v7QZY(Q1S(QZ,QZY\,`

v7Q_T7YNPSk[(NPWZS&d,Y@d,gh[(NbdVS*\Y(QUWXdm${hNPVQ_e>q
|vQZY(Q\Y(QUv7Q_TYNPSk[(NPWZS&{h\,S(Q_eudVijVNP[kQvhNPSk[kd,YNbQ_Ssd,Y@d,[(v7QZYTS(Q_Ssd,O?iVNb[kQ\,mEdTV[(S|d,O)mEQ_mEd,Y(o
c@Nb[(vhNPVU[(vQ|\,`bl,d,YNb[(vmLpdVeNbwx7_]p2`P\[k_mR\,V>xj_,]p\,VSkQ_V^xh_,,\pxj_,,G{^]pMThSkQ_V\pxMNLxpNb[ta


$

$

[(NPV7l,QZY
xh4Q_`P`PS_xjd`feS(mRNb[(v^x_,,]>3Q_T`PQ_\,T>x Nfmux \Q_`b{h`fNPV7l7xh*\,S(S(\,Ve7Y\px?_,,]>3Q_Th`bQ_\,T>x

+$ ,$ \Q_`b{j`PNPV7l7x_,,];+Q_S(v7wpNPV>xQ_T`bQ_\,T^x?-$ \Q_`b{j`PNPV7l7x;_,,]\,VSkQ_VQ_V7l7x
(././.p]0$NPmuxQ_\,V>xQ_T`bQ_\,T>x1(././.q|@dVQUd,O)[(v7Q_SkQyWXdmEQ_S@cNb[(vugY(dd,OS*d,O;WZ`bdSkQ_V7Q_S(S_xhQX7WXQZg[

+Q_S(v7wpNPV>x Nfmux?

Od,Y9SkdmEQ|d,O>\,VSkQ_V>S9c2d,Ywjq;7d,Y2[(v7Q|Y(Q_Sk[Zx[(v7Q|[kY\,eQXaLduvh\,S;{QZQ_VRmR\,e7Q|{QZ[c2QZQ_V~O\,Sk[2SkQ_\YWvhNPV7l
[(v7Y(dTlvugd`PNPWXo~Skgj\,WXQU\,VeulT\Y\,V[kQZQ_SZq

3254 }yff6}{y{ ~
798Sx#z|;:H$Qy
rtVEpQ_WX[(NbdV;xc&QslNb,Q*O!d,YmR\,`pe7QXijVNb[(NPdVSd,O2S\,VeE&9S;\,Vhe$gd`PNfWZNbQ_SZ],[c&daLghv\,S(Q*[kQ_ma
gd,Y\,`ps\_o,Q_S9VQZ[(S|
|sS;\Y(Q*e7QXijV7Q_eNPVRQ_WX[(NbdVRq)rtVRQ_WX[(NbdV;' xc&Q|e7QXijV7Q<Z a\ghgY(d_7NPmR\[(NPdVS

\,Ve\,eeNb[(Nb,Q\ggY(d
pNfmR\[(NbdVSZx\,VeSv7d
c\Y(Q_`f\[(NbdVS(vNPgR{QZ[c&QZQ_V~[(v7Q[c&dy[ogQ_S2d,O^\ggYd_7NPmR\Ga

{hNP`fNb[oROd,Y9S|\,Vhe/&9SZq
4Q~S(QZgh\Y\[kQR[(v7QRWXdmRgh`bQX7Nb[oY(Q_S(T`b[(SOd,YijVNP[kQXav7d,YNbZdVgd`PNPWXo3\ghgY(d_7NPmR\[(NPdVO!Y(dm[(vdSkQ
Od,Y2NPVpiVNb[kQXav7d,YNPZdV$gd`PNfWZNbQ_SZqQ_WX[(NbdVR$WXdV[(\,NPVhS9V7dV\ghgY(d_7NPmR\{jNP`PNb[oUY(Q_S(Th`b[(S;Od,Y;ijVNb[kQXavd,YNbZdV
&gd`PNfWZNbQ_SZ]Q_WX[(NbdV3WXdV[(\,NPVS|VdV\ggY(d
pNfmR\{hNP`PNP[oO!d,YNPVpijVNP[kQXav7d,YNbZdV&gd`PNa
WZNbQ_SZq;`b[(v7dT7lvNb[NfS?YQ_`P\[(Nb,Q_`bo$Q_\,Sko$[kdijVeyd,g[(NPmR\,`pgd`PNPWZNPQ_SZxc&Q|WXdVS(Nfe7QZY\ggY(d
pNfmR\[(NPV7l


gd`PNPWZNPQ_S*NPVQ_WX[(NbdVxjS(NfVWXQ[(v7Q$STWZWZNPVWX[(`boY(QZgYQ_SkQ_V[kQ_eWZ\,SkQ,x\[`bQ_\,Sk[ZxjNPS|gYd
\{h`bov\Ye

[kd~\gghY(d_7NPmR\[kQ,q
dmRQ@d,O[(v7QmRd,Y(Q@[kQ_WvVNPWZ\,`hgY(dd,OS2\Y(Q@NPVWZ`fTe7Q_eENPVR\ghgQ_VheNPWXQ_SNPVRd,Ye7QZY9[kdymR\w,Q[(v7Q@{dpe7o
d,O&[(v7QEgh\gQZYmEd,Y(QEY(Q_\,e\{j`bQ,qE@dc2QZ,QZY_x)SkdmEQEghY(dd,OSOY(dmd,[(v7QZYgh\gQZYS\Y(QRS(w,QZ[(Wv7Q_eNPV[(v7Q
{deo4d,O|[(v7Qgh\gQZYyNfVd,YeQZYy[kd4mEd,[(NPG\[kQ{d,[(vn[(v7QYQ_S(T`b[(Sy\,Ven[(v7QgY(dd,OSyV7QZc@`Po4gY(Q_SkQ_V[kQ_e
v7QZY(Q,q

=)C;>?@&F

KKLH F

d,[kQ[(v\[2S\Y(QNPVO\,WX[SkgQ_WZNP\,`|WZ\,S(Q_Sd,Os2SZq|vQWXdmEgh`PQXpNb[od,OijVeNfV7l1\,Ve
\ggYd_7NPmR\[(NPV7ld,g[(NfmR\,`+gd`fNPWZNbQ_Se7QZgQ_VeSdV4[(v7QEd,{hS(QZY(G\{jNP`PNb[o/d,O9[(v7QRS(oSk[kQ_m/xSkdudT7YY(Q_ST`b[(S
\Y(QUS(QZl,Y(QZl\[kQ_e3{od,{hSkQZY(\{hNP`PNP[o,qd
c&QZ,QZY_xhdV7Q$SkQZ[|d,O)e7QXijVNb[(NPdVSsS(TpWXQ_SZq

21 :H$y}z3'BA; |ByDC


CFE z|z~v:y{~0|B|B|

$y{3~

gh\Y[(NP\,`P`bod,{hSkQZYG\{h`PQ\Y(w,d
e7Q_WZNPS(NPdV~gYdWXQ_S(Sss9eQ_S(WXYNb{Q_S9\yWXdV[kY(d`P`bQ_eSk[kdpWv\,S([(NPW

G

SkopSk[kQ_m{o~NP[(S9Sk[(\[kQ_S*\,Ve[(v7QWXdVSkQ_T7Q_VWXQ_S&d,O\,WX[(NbdVS2dV[(v7QS(oSk[kQ_m/q;r[&NPS9e7Q_Vd,[kQ_e\,S&\$[(T7gh`bQ


HJILK / INMOIQPOINRSIUTINVxhc@v7QZYQ
W H xM\,VeXP\Y(QijVhNb[kQSkQZ[(S*d,O


L x)

DY


\,Vhe XG, ]

fiC

vh73Qh{.L8$>${3


W K /[Z HNPSs[(v7Q L,]
W &R }\H^]_M]`Hbadc .eI_SfNPS)[(v7Q L,k p xc@v7QZY(QRZK\IUg
ILKDhb)NfS;[(v7Q*gY(d,{j\{hNP`PNb[o
[(vh\[Sk[(\[kQOK h NPSY(Q_\,Wv7Q_e4OY(dm
Sk[(\[kQOKRdV4\,WX[(NbdVignO!d,YQZ,QZYojK Z Hz\,Vejg Z M]^Q_NP[(v7QZY
kml"n3o*pqZR KrIUgqILKDbh xhNbO+\,WX[(NbdVXgWZ\,V/{Q\ggh`fNbQ_edV/Sk[(\[kQsKx7d,YkltnuovpqRZK\IUg
ILKDhb .]
W }/HwaxP NPS&[(v7Q Z, $p x7cv7QZY(Q97T K 2NPS9[(vQd,{jSkQZY(\[(NbdVmR\,e7QNPVS([(\[kQyKx (
V }qHz]^M5a|{ NPS[(v7Q(X9kyp ,x^c@v7QZYQsV KrIUpg NfS[(vQEY(QZc&\Yel\,NPV7Q_e{o3[(\wpNPV7l
W 3
\,WX[(NPdVX
g NPVuSk[(\[kQsK q
rO|Sk[(\[kQ_SE\,Ved,{hSkQZY(\[(NbdVS\Y(QNPe7Q_V[(NPWZ\,`x)NqQ,q}P
H \,Ve~3

NPSU[(v7QNfe7Q_V[(NP[o4OTVWX[(NbdVd,Y

\{hN k
Q_WX[(NbdVjxh[(vQ_V/[(v7QNPSWZ\,`P`bQ_e~pfiu XGZbZqV7d,[(v7QZYSkgQ_WZNP\,`WZ\,S(QyNPSUpj XGZb

3 xc@v7QZY(Q*[(vQ@SkQZ[d,Od,{hSkQZYG\[(NbdVhSWXdV[(\,NfVSdV`PoUdV7Q|Q_`PQ_mEQ_V[ZxNqQ,qNPVQZ,QZYoRSk[(\[kQ@[(v7QS(\,mEQ
d,{hSkQZYG\[(NbdV3NPS*mR\,e7Q,xh\,Vheu[(v7QZY(QZOd,Y(Q[(v7Qd,{jSkQZY(\[(NbdVuOTVWX[(NbdVuNPS@WXdVSk[(\,V[Zq

H]H[(\{h`PQ_SZxdVQOd,Y&Q_\,Wvu\,WX[(NbdV>q2@dc2QZ,QZY_x7c&Qc@NP`P`
\,`PSkd1ehNPS(WZTS(SymEd,Y(Q/STWZWZNPVWX[EY(QZghY(Q_SkQ_V[(\[(NbdVSZ}uNPVngh\Y([(NfWZT`P\Y_x@9,Pqp
@ 7t,< _

|sqh|v7Q_S(Qc@NP`P`j{Qe7QXijV7Q_euNfV3Q_WX[(NbdV3q
2132 H: ~v'z z|3#H: yv7 ~vy{3 |
d,YmR\,`P`Po,x9Ss\Y(QY(QZgY(Q_S(Q_V[kQ_e{o

gd`PNPWXo4e7Q_SWXYNb{Q_SUv7dc[kd\,WX[Ee7QZgQ_VehNPV7l/dVd,{hSkQZY(\[(NbdVS_q4Q/eNfSk[(NPV7lTNfS(v[(v7Y(QZQ[ogQ_S$d,O
gd`PNPWZNbQ_S_q

W

l


L, j,Rp
[kd\,V3\,WX[(NbdV>q

_GNPS\OTVWX[(NbdV^ l &} P-aMx>mR\gghNPVl~Q_\,Wvd,{jSkQZY(\[(NbdV

Od,Y

~
Xk7XjXh$p, q NPS\ OTVhWX[(NbdVq
}OP] xUmR\ggjNPV7lQ_\,Wvgh\,NbY
d,{jSkQZY(\[(NbdV>x[(NPmRQ*2[kd~\,V3\,WX[(NbdV^q
W f LGk7XjXhhp
@NPS+\@OTVWX[(NPdVyq}eP<aMx,mR\ghghNPV7l|Q_\,WvyijVNb[kQ&SkQ_T7Q_VWXQ

W



d,O)d,{hS(QZY(G\[(NPdVS*[kd~\,V/\,WX[(NPdV>q

d,[(NPWXQu[(v\[Zx2O!d,YE\,VTV7d,{jSkQZY(\{h`bQ|x\vNPS([kd,Y(oaeQZgQ_Vhe7Q_V[$gd`PNPWXo1NPSyQ_TNb\,`bQ_V[y[kd1\
[(NPmEQXaeQZgQ_Vhe7Q_V[sdV7Q,q
@Q_WXQ_V[\,`bl,d,YNb[(vm~NPWe7QZ,Q_`bd,ghmEQ_V[Rv\,SRNfVWZ`PTe7Q_eWXdVSNPe7QZY\[(NbdVd,OijVhNb[kQumEQ_mEd,Y(ongd`PNPWZNbQ_S
\,Sc2Q_`f`s\,VSkQ_V^x)_,,G{x_,,\p]?MThSkQ_V\pxMNxpNb[k[(NfV7l,QZY_xh4Q_`f`PSZx^d`PeS(m~Nb[(v>x?_,,]+3Q_Th`bQ_\,T>x

$NPm/x&$\Q_`P{h`PNPV7l7xs\,S(S(\,VeY\px;_,,]?Q_T`bQ_\,T>x>+Q_S(v7wpNPV>x0$NPm/x$\Q_`b{j`PNPV7l7x+_,,]?+Q_S(v7wpNPV>x
Q_T`bQ_\,T>x>%U
$ \Q_`b{h`PNPVl7x_,,]^\,VhSkQ_V4 7Q_Vl7x0(././p. ]+U$ NPmuxjQ_\,V>x^3Q_Th`bQ_\,T>x0(././. q@v7Q_SkQ
\Y(Q/gd`PNfWZNbQ_Sy[(v\[R\Y(Q3\,`P`Pd
c&Q_eSkdmEQuiVNb[kQu\,mEdTV[Ed,OmEQ_mEd,Y(o]|S(TpWZNPQ_V[E\,`P`bdc&\,VhWXQ_SRc&dT`Pe

Q_V\{h`PQS(ThWv\gd`fNPWXo4[kd4S(NPmyT`P\[kQ\3OT`P`&vNPSk[kd,Yoae7QZgQ_VeQ_V[gd`PNfWXo4d
,QZY~\ijVNP[kQv7d,YNPZdV>x;d,Y

kTheNPWZNbdTS`bo,qV7Q3\YNP\,V[
d,OijVNb[kQumEQ_mEd,Yogd`PNPWZNbQ_S_xc@vNPWvnc2Q/WZ\,`P`)(y ~E,/p _ L ipQ_SE[(v7Q/\,mRdTV[Ed,O
mEQ_mEd,Yoj , q
d,Y(QO!d,YmR\,`P`bo,x@\nOY(QZQijVNb[kQmEQ_mEd,Y(ogd`fNPWXoc@Nb[(v [(v7QijVNb[kQSkQZ[
d,OUmRQ_mEd,Y(o S([(\[kQ_S
Od,Y~&%G
H9INMOIQPOINRSIUTINVENPSE\OTVWX[(NbdVw&}P]
M] x2m~\gghNPV7lQ_\,Wv

SqL"0"(L&mQvQv"QL"Qv1D"S(Lv"QJ*1*Q&S*JL</N1
"qq6D"S(Lv"Q
S*"QQvNLJ/+"*"*N"}Sv++"D""v"+S*"SU"Sv
+"mQvm/SDvQL(v"Q
"+S
gQZYv\ghS\[(NfmEQXae7QZgQ_Ve7Q_V[Rgd`PNPWXo,x*d,Y[kdnThSkQ`bQ_SSmEQ_mRd,Y(omEd,Y(Q

v


fi 38?>v{v8.^j

$33$3

d,{hSkQZYG\[(NbdV^x&mEQ_mRd,Y(onS([(\[kQ*gh\,NbY~[kd\gh\,NbY \,WX[(NbdV^xsmRQ_mEd,Y(oSk[(\[kQ*q
WZ\,V/{QSkQZQ_V3\,S\yijVNb[kQ/kS(WXY\[(WvmEQ_mEd,Y(o,q

@v7Q/SkQZ[Rd,OmEQ_mEd,Y(o

Sk[(\[kQ_S

7YQZQiVNb[kQ@mEQ_mRd,Y(oRgd`PNPWZNbQ_S9WZ\,V\,`fSkd$S(Nfm$T`f\[kQSk[(\[(NbdVh\Y(oRgd`PNPWZNbQ_S_]\,`P`v\YeV7Q_SSY(Q_S(Th`b[(SOd,Y

Sk[(\[(NbdVh\Y(ogd`PNfWZNbQ_S\ggh`bo[kduO!Y(QZQRijVNb[kQmEQ_mEd,Y(ogd`PNPWZNbQ_S\,Sc&Q_`P`qE&Q_WZ\,TSkQ~dV7Q~WZ\,V1WXdVSNPe7QZY
\OY(QZQijVNb[kQmEQ_mEd,Yo



X

H#]w


gd`PNPWXo[kd{Q4\Sk[(\[(NPdV\Y(ogd`PNfWXod
,QZY[(v7Q1Sk[(\[kQSkgj\,WXQ

( U

7Z(pj
jP
~ Rup Z

b

2X



~~X k p

X,

x,!

j47 Z pZ(
L,
|v7Q/\,eG\,V[(\l,Q_S~d,OOY(QZQuijVNP[kQmRQ_mEd,Y(ongd`fNPWZNbQ_S\ggQ_\YRNPV


[(v7Q3WXdVhSk[(\,V[(Sd,O[(v7Q/\,`bl,d,YNP[(vmRSZxs\,VeNPVS(gQ_WZNf\,`x9gYd,{h\{h`bon`P\Y(l,Q,x*S(T7{>WZ`P\,S(S(Q_Sd,Os2SZx
c@v7QZYQ@\ijVhNb[kQ|\,mEdTV[9d,O^mEQ_mRd,Y(oES(TpWXQ_S2O!d,Y&\,VRd,g[(NfmR\,`gd`PNPWXo,q)|v7QmR\ZQNPVhSk[(\,VWXQ_S9STWv\,S

/'

W
s\,`P`PTm/S|mR\ZQW
s\,`P`fTmux^_, ]MNb[k[(mR\,V^x_,G|\YQ$S(TWv/QX7\,mEgh`bQ_S_}9W
*\,`P`PTmuS@mR\ZQ
Y(Q_TNbY(Q_SsdVh`bo{jNb[*d,O+mRQ_mEd,Y(o[kdEijVeu\,V3d,g[(NPmR\,`gd`PNPWXo,q

JG

HJILK / INMOIQPOINRSIUTINV*{Q\~&|q
k_ L,;4
t$bZfi ZG NfS@\~S(Q_T7Q_VhWXQUd,OSk[(\[kQ_S[ z / ( - I*I B.px
*
H
*

@
c
h
v
P
N

W

v
k

(
[
\Y([(Sc@NP[(v3[(v7QNPVNP[(NP\,`Sk[(\[kQd,O
G x^NqQ,q / K / q4QRThSkQy0pKG|[kdue7Q_V7d,[kQ[(v7Q
Z
SkQZ[|d,O)`bQ_V7l,[(v7a
[kY\*k Q_WX[kd,YNbQ_S|cvNPWvQ_Vhe/NPVuSk[(\[kQK q
|vQuQXgQ_WX[kQ_eYQZc&\Yed,{[(\,NPV7Q_eNfVSk[(\[kQ^
K \O![kQZYQXp\,WX[(`Pow
Sk[kQZghSRTVhe7QZYEgd`PNPWXo
NfSE[(v7Q
Y(QZcs\Ye/d,{h[(\,NPV7Q_e3NfVU
K {o[(\wNfV7l~[(v7Q$\,WX[(NbdVS(gQ_WZNbihQ_e{o) xjc2Q_Nblv[kQ_e{o[(v7Q$gY(d,{h\{hNf`PNb[o~[(v\[
K NPS*\,WX[(T\,`P`boY(Q_\,Wv7Q_e3\O[kQZYu S([kQZghSZx
$
NPS&\ySk[(\[(NbdV\Y(o
W V KrIL&IU V KrIU pT K kk
+S !0 o* + l 0v u ( XR q ( IU 7T q ( kQI x7NbO0
MQZ[





gd`PNfWXo,x

oD l ( ZR ( IUT7 ( QINz
QI x&NbOJNPSE\
+ !0
+ 0
[(NfmEQXae7QZgQ_Ve7Q_V[*gd`PNPWXo,x7\,Ve
W VKrIL&IU + 0 oD + l 0 VKrIUT7 /
QT7 kk ( RZ ( IUT7 /
QTp ( kQI x
NPO4NPS*\~vNPSk[kd,Y(oae7QZgQ_Ve7Q_V[sgd`PNPWXo,q
W VKrIL&IU



VKrIUTpKQILkm

sm~\_o/{Q_v\
,QyeNbQZY(Q_V[(`bo/TVhe7QZY@d,g[(NfmR\,`gd`PNfWZNbQ_S*Od,YQ_\,Wv[ogQyd,Ogd`PNPWXo,q|v7Q

Q

T\,`PNb[oud,O2\gd`fNPWXouNPSe7QZ[kQZYmRNPVQ_e/{o3Nb[(S@7XZ R Xx?NqQ,qj{o/[(v7QQXpgQ_WX[kQ_eYQZc&\YehS\,WZWXYT7Q_e
{oNP[ZqR4QeNfSk[(NPV7lTNfS(v3{QZ[c2QZQ_VeNQZY(Q_V[gQZY(Od,YmR\,VhWXQRmEQZ[kYNPWZSOd,Y$s2S[(v\[UYTVOd,Y$\
ijVNP[kQVTm${QZY*d,O)S([kQZghS|\,Veu[(vdSkQ[(v\[|YTVuNPVe7QXiVNb[kQ_`bo,q

u


G
G-

GIU

(
Fu / lUo*p 7V KrINUIUq@L[(vQZY&c&d,Y(wR\,S(STmEQ_S2[(v\[2[(vQv7d,YNbZdV~NPSp^U G,x7NPVhSk[kQ_\,e~d,O
G-fi q2@vNPSse7dQ_S|V7d,[@Wv\,V7l,Q[(v7Q$WXdmEgh`bQX7Nb[od,O;\,Vod,O)dT7Y|gYd,{h`bQ_mRSZqfi
W @v7Q3NPVpiVNb[kQXav7d,YNPZdV !X ph(3XXSR lNb,Q_SY(QZcs\YeSEd,{[(\,NfV7Q_eQ_\Y`PNPQZY~NPV
[(vQ3gY(dpWXQ_S(S\vNblvQZYRc2Q_NPlv[[(v\,V[(vdSkQ3d,{[(\,NfV7Q_e`P\[kQZY
qd,Y.-
x*[(v7Q[kd,[(\,`
^aeNPS(WXdTV[kQ_euY(QZcs\Ye/NfS|e7QXijV7Q_eu\,Ss7X1u GIU u / lNovp V K\INUIU q
W @v7QNPV7ijVNb[kQXav7d,YNbZdV/ZtD s7XX,QR Nf- S9[(v7Q`PNPmRNP[;d,O^\,`P`hYQZc&\YehSd,{( [(\,NPVQ_e~c@NP[(vNPV
S([kQZghS@eNPNPeQ_e~{o;x7O!d,Y|4l,dNfV7lE[kd~NPVpiVNb[o} 7X&L
GIU `PNfm/ 7Xh GkI IU q
qfi"v+6+vQ6D(*Nr"*/L"mQ*D(*N9L6O*
W

9

@v7Q 9 Z p ,/7Z!Z R kp Od,Y&
NPS[(v7QQXpgQ_WX[kQ_eS(Thmd,O
YQZc&\YehS>Y(Q_WXQ_Nb,Q_e$eT7YNPVl&[(vQ)ihYSk[
XSk[kQZghS{oOd`P`bd
cNPV7ls[(v7Qgd`PNPWXo )xGNLqQ,qbxZ7Z!





fiC

vh73Qh{.L8$>${3


`bQZ[
{Q\,Vogd`PNPWXon[ogQ,x*Q_NP[(v7QZY
9G,fih~G\,` ^Gd,O<G TVhe7QZY[(v7Q
mEQZ[kYNfW@WvdSkQ_Vj2NPS2[(v7Qm~\GpNPm~\,`gQZY(Od,YmR\,VWXQd,O\,Vo~gd`fNPWXo3d,O^[ogQ[4Od,Y<GxpNqQ,q\,` >G
mR\G
7Z!;GIUxc@v7QZY(Q
uNPS*[(vQSkQZ[|d,O;\,`P`0ngd`PNPWZNbQ_SZq
+d,YS(NPmEgh`fNPWZNb[o,xhc2Qy\,S(S(TmEQ$[(v\[[(v7Q$S(NPZQ G-pd,O9\&G
NfS@e7QZ[kQZYm~NPV7Q_e/{ou[(v7QyS(NbZQ
MQZ[R7Z!{Q3\,Vod,O[(v7Q_S(QgQZY(Od,YmR\,VWXQmEQZ[kYNPWZSZx|\,Vhe

Sk[(\[(NbdVh\Y(o,x[(NPmRQXae7QZgQ_Ve7Q_V[Zx>d,YUvNPSk[kd,Yoae7QZgQ_VeQ_V[Zqy|v7Q













1d,ONb[(SSk[(\[kQSkgh\,WXQ,q*4Q\,S(S(TmEQ$[(v\[@[(vQZY(Q$\Y(QyV7dmRd,Y(Q$\,WX[(NbdVhS|[(v\,VSk[(\[kQ_SZx\,Ve/[(vh\[Q_\,Wv

Sk[(\[kQy[kY\,VS(NP[(NbdVugY(d,{j\{hNP`PNb[oNPS@lNb,Q_V\,S\~{hNPV\Y(oOY\,WX[(NbdV/cNb[(vu{jNb[(S|\,Ve3Q_\,WvY(QZcs\Ye3NPS\,V
NPV[kQZl,QZYUd,O*\[$mRdSk[{hNb[(S_q|vNfSNPSV7d/Y(Q_\,`9Y(Q_Sk[kYNfWX[(NbdV>xS(NfVWXQR\,eeNPVl/TV7Y(Q_\,Wv\{h`bQ1keThmRmUop
Sk[(\[kQ_S/\,`f`bd
c@SdVQ[kdThSkQ4mEd,Y(Q4{hNb[(SOd,Yu[kY\,VS(NP[(NbdVghY(d,{h\{hNP`fNb[(NbQ_S~\,VheY(QZc&\YeSZq`PSkd7xNb[uNPS
Sk[kY\,NPlv[kOd,Y(cs\Ye[kd[kY\,VhSkO!d,Ym

GIL

Y(QZcs\YeSSTWv[(v\[9G\,`>

GILq

\,Ve/Vd,[*dV/\,`^

4QWXdVS(NPe7QZYUgY(d,{h`bQ_m

G c@Nb[(vnV7dVpaNPV[kQZl,QZYY(QZcs\YeS$[kd^Ghc@Nb[(vnNPV[kQZl,QZY
\,` ^G h IL+Od,YSkdmEQWXdVSk[(\,V[ e7QZgQ_VeNPVl@dV`boydV3GIL

\&
ff







NfVSk[(\,VWXQ_SU[(v\[U\Y(QRYQZgY(Q_SkQ_V[kQ_eNPV\/Sk[kY\,Nblv[kOd,Y(c&\Ye1cs\_o,qsa

]3[(\{h`bQ_SOd,Y[(v7Q$[kY\,VS(NP[(NbdVuOTVWX[(NbdVndV7Q

cNb[(v/S([(\[kQ_SNfS@Y(QZghY(Q_SkQ_V[kQ_e3{o/\~SkQZ[d,O;

[(\{h`bQEOd,YQ_\,Wv\,WX[(NbdVj\,Ve4\uSNPmRNP`P\Y[(\{h`bQEOd,Y[(v7QEY(QZcs\Ye4OTVWX[(NPdV\,VheO!d,Y[(v7QEd,{jSkQZY(\[(NbdV
OTVWX[(NbdV>q?4Q*\,S(S(TmEQ&[(v\[+[(v7QsVTm${QZY?d,Oj\,WX[(NbdVS)\,Ve$[(v7Q&VTm${QZYd,O{hNP[(S?V7QZQ_eQ_e$[kdSk[kd,Y(QsQ_\,Wv



[kY\,VSNb[(NbdVgY(d,{h\{hNf`PNb[od,YsY(QZcs\Yee7dQ_S*V7d,[2QX7WXQZQ_eu;xpSkdES(TWv\yY(QZghY(Q_SkQ_V[(\[(NbdVY(Q_ThNbY(Q_S fiR *
{hNb[(S_q|vhNPSWZ\,V{QmEdehNihQ_e/[kdu\,`P`Pd
c

{hNb[(Sc@Nb[(v7dT[Wvh\,V7lNPV7l[(v7QWXdmEgh`bQX7Nb[o3Y(Q_S(T`b[(S_qfi/rtV

[(v7Q|S(\,mRQ&cs\_o,xSk[(\[(NbdV\Yo$gd`PNPWZNPQ_S?WZ\,VE{Q&Q_VWXdpe7Q_eE\,S`PNPS([(S?cNb[(vyQ_V[kYNbQ_S_x\,Ve[(NPmEQXae7QZgQ_VeQ_V[

i]u4[(\{h`PQ_SZq

gd`PNPWZNbQ_S&Od,Y@v7d,YNPZdVu1\,S*

7d,Y*Q_\,Wv[ogQd,Os@xQ_\,Wv[ogQd,O^gd`PNfWXo,x\,VeQ_\,Wv[ogQd,O^gQZY(Od,YmR\,VWXQmEQZ[kYNPW[(v7Q



G,fih|jkXP NPSZx

C

z


\u&|x?\gQZYO!d,Ym~\,VWXQRmEQZ[kYNPWu!ijVhNb[kQXav7d,YNbZdV^x^[kd,[(\,`eNPSWXdTV[kQ_e^x^d,YU\_,QZY\l,QgQZYka
Od,YmR\,VhWXQxj\,Veu\Egd`PNfWXo~[ogQ~Sk[(\[(NbdV\Yo,xh[(NPmEQXaeQZgQ_Vhe7Q_V[Zx7d,YvNPSk[kd,Y(oae7QZgQ_Ve7Q_V[x

3}

[(v7QR\,`PT7QEd,O&[(v7QR{Q_Sk[gd`PNfWXo3d,Os[(v7Q~SkgQ_WZNijQ_e[ogQ~ThVe7QZY[(v7QRlNP,Q_V1gQZY(Od,YmR\,VWXQ

mRQZ[kYNPWq

U f X

|v7Q7 /



*jtXP

NPSZx

C \Rs@xh\gQZY(O!d,YmR\,VWXQmEQZ[kYNfWx\,Ve/\Egd`PNPWXo[ogQ,x
fiz c@v7QZ[(v7QZY[(v7QE\,`PT7Qyd,O2[(vQy{Q_Sk[gd`PNPWXoud,O&[(v7QESkgQ_WZNihQ_e[ogQRTVe7QZY[(v7QElNb,Q_VgQZY(Od,Yka
m~\,VWXQUmEQZ[kYNfWNPS*l,Y(Q_\[kQZYp
.q
z



)C

HK

a2KK

rtVghY(QZNPdTS&c2d,Y(w)\gh\,eNPmRNP[kYNbdT|S(Nb[(S(NPw`PNfSZxh_,,x_,]hTVehv7Q_V7wx7d`feS(mRNb[(v^x`P`bQ_Vpa

+(././.p];\,e\,VN)QZ[\,`qbx9_,,x)Nb[cs\,S

e7QZY_x_,];TVevQ_V7wjx?d`PeS(mRNP[(v>x>MTSkQ_Vh\px`f`bQ_Ve7QZY_x

S(v7dc@V[(v\[*[(v7Qgd`PNfWXoEQXpNPS([kQ_VWXQgY(d,{h`PQ_mNfS*WXdmEghT7[(\[(NbdVh\,`P`bo~NPV[kY\,WX[(\{h`PQO!d,Y|mEdS([*G\YNf\[(NbdVS
d,O&9S_xhd,Y@QZ,Q_VTVeQ_WZNPe\{h`bQOd,YSkdmRQ$NPVpiVNb[kQXav7d,YNPZdVuWZ\,SkQ_SZq|7d,YQXp\,mRgh`bQ,xhc&Q$Sv7d
c&Q_e
[(v\[[(v7QSk[(\[(NbdV\Yogd`PNPWXo4QX7NPSk[kQ_VWXQgY(d,{j`bQ_mRS$O!d,YE&9Syc@NP[(vd,YEc@NP[(v7dT7[$VQZl\[(Nb,QuY(QXa
cs\YeS\Y(QR;aWXdmEgj`bQZ[kQ,q&dmEghT[(NPV7l\,V4d,g[(NPmR\,`)gd`PNfWXo3NPS\[U`bQ_\,Sk[\,SUv\Ye4\,Se7Q_WZNfeNPV7l[(v7Q
QX7NPSk[kQ_VWXQgY(d,{h`bQ_m/qrtVSk[kQ_\,ed,O|\,SkwpNPV7lO!d,Y\,Vd,gh[(NPmR\,`gd`PNfWXo,xc&QmRNPlv[cNPS(v1[kdWXdmEghT7[kQ\
gd`PNPWXo4[(v\[ENPS$lT\Y\,V[kQZQ_e[kd4v\_,Q/\\,`PT7Q[(v\[ENPSy\[`PQ_\,Sk[E\`P\Yl,QOY\,WX[(NbdVnd,O|[(vQd,gh[(NPmR\,`
\,`PT7Q,q



fi 38?>v{v8.^j

$33$3

WXdmEghT7[(NfV7l4S(TWv\4V7Q_\Y`bod,g[(NPmR\,`sgd`PNPWXoNPSEWZ\,`P`bQ_e\,Vw_


x?c@v7QZY(QRNPVheNPWZ\[kQ_S[(v7QET\,`PNb[o3d,O&[(v7QE\ggY(d
pNPm~\[(NbdV4NPV[(v7Q
Od`P`bd
cNPV7lc&\
o,q9M^QZ[
{Qs\gd`PoV7dm~NP\,`aL[(NPmEQ&\,`bl,d,YNb[(vhmc@vNPWv$Od,YQZ,QZY(oEsG
WXdmEgjT7[kQ_S
\,V^^aLgd`PNPWXo Gq|d,[(NPWXQy[(v\[@7X)GI
G k G\,`
G |O!d,YQZ,QZY(oX
G q||v7QU\,`bl,d,YNb[(vm
NPS*WZ\,`P`PQ_e/\,Vkt R
, NbOOd,Y|QZ,QZY(ousG x
G\,`
G
X)GI
G k FO
G\,` ^
G
gd`boVdmRNP\,`aL[(NPmRQ\,`bl,d,YNP[(vm

y.

\ggYd_7NPmR\[(NbdVOd,Y







!

"

%

#

$

%

!

%
%

%
%

#

%

%

LQZQ,x?Q,ql7qbx+)\gh\,ehNPmRNb[kYNPdT>x;_,G3Od,YmEd,Y(QRe7QZ[(\,NP`PQ_e4e7QXijVNb[(NPdVSZqfi@gghY(d_7NPmR\{hNf`PNb[o/ehNPSk[(NPVpa

`Za\ggYd_7NPmR\{h`bQOd,Y@\,`P`1x7Od,Y
WXQZY([(\,NPVOxd,Y9Od,Y9V7dyTV`bQ_SS; &qd,[kQ@[(v\[9[(vNPSe7QXiVNb[(NbdVyd,O0Z
a\gghY(d_7NPmR\[(NbdVRY(Q_ThNbY(Q_S
[(v\[G\,` G9.pqrO\gd`fNPWXoc@Nb[(v/gdS(NP[(Nb,QUgQZY(Od,YmR\,VWXQUQXpNPS([(SZxj[(vh\,VQZ,QZYo3\ggY(d
pNfmR\[(NbdV
\,`bl,d,YNP[(vm
opNbQ_`PehS|S(TWv\~gd`PNPWXo,x{Q_WZ\,ThSkQ$\gd`PNPWXoc@Nb[(v3gQZYO!d,Ym~\,VWXQ
. d,YS(mR\,`P`bQZYWZ\,VV7d,[\g7a
lTNPSv7Q_SsaWXdmEgh`bQZ[kQghY(d,{h`bQ_mRS_}+|vQZY(Q\Y(QgY(d,{h`PQ_mRS&c@vNPWv\YQ
#

gY(d
pNfmR\[kQ\Ugd`fNPWXo$cNb[(vRgdS(Nb[(NP,Q|gQZY(O!d,YmR\,VWXQ,q)@Q_VWXQ,x7\,VoR\ggY(d
pNfmR\[(NbdV~S([kY\,Nblv[kO!d,Y(cs\Ye`Po
Skd`b,Q_S@[(v7Qe7Q_WZNPSNbdVgY(d,{h`PQ_muq

iZa\ghgY(d_7NPmR\[(NPdVO!d,Y\Y({jNb[kY\Y(oX .pq$rO9[(vQZY(QRNPS\
wG \,Ve dT7[kghT7[(Ss\,VZa\ghgY(d_7NPmR\[(NPdVd,O
[(v7Q\,`PT7Q,xjNPVu[(NPmEQgd`bopV7dmRNf\,`>NPV[(v7QUS(NPZQd,OG
[(vQ_V/c&QUS(\_ou[(vQgY(d,{h`PQ_mv\,S@\@G(
R sjk R,
p~
qprO[(v7Q\,`Pl,d,YNb[(vmYTVhS&NfV[(NfmEQgd`PoV7dm~NP\,`jNfV[(vQS(NbZQ
d,OG
\,Vhe ( x[(v7QUSWv7Q_mEQ$NPS*\ pfiE|j( fi
&jtD E p ~ ) q`P`
R
V4\ggY(d
pNfmR\[(NbdV4S(Wv7Q_mEQEopNbQ_`PeS\,V

gd`bopV7dmRNP\,`aL[(NfmEQ@\,`bl,d,YNP[(vm
*)

(

'&

[(vh\[&dVNPVghT7[2s

,+

( )-+

0/

.

d,O[(v7Q9+pSWXdVSk[kYThWX[kQ_e

(

1)

2+

/

( )-+

v7QZYQ\Y(Q+2?pSZ]c&QSk[(\[kQ[(v7Q3[(vQZd,Y(Q_mRSNPV[kQZYm~S~d,O2?pS

{Q_WZ\,TSkQ[(v\[*lNP,Q_S|Sk[kY(dV7l,QZY*YQ_S(T`b[(S*NPVSkdmRQWZ\,SkQ_SZxh\,Ve{Q_WZ\,TS(Qc&Qe7dRV7d,[sQXpgh`PNPWZNP[(`bo~\,V\,`boZQ
[(v7QUWXdmRgh`bQX7Nb[oNPV[kQZYmRS|d,O
.

( q

rO)[(v7QZY(Q$NfS|\Rgd`bopV7dmRNP\,`baL[(NPmEQ\,`bl,d,YNb[(vm

G \,` >Gk*c@NP[(v
R, fi
5

d,O

5

5



[(v\[@dT[kghT7[(S@\,V\ggY(d
pNfmR\[(NbdV>x43jxh[kd[(v7Q\,`PT7Q

bx[(v7Q_V3c2QUS\_ou[(v\[[(v7QgY(d,{j`bQ_mv\,S@\Ot
rtV[(vQWXdV[kQX[d,O@s2SZx)QXpNPS([kQ_VWXQd,O\
a\,eeNP[(Nb,Q\gghY(d_7NPmR\[(NbdV\,`bl,d,YNb[(vhm \,Ven\


63

5

9+\Y(QEd,O[kQ_V4Q_ThNbG\,`PQ_V[ZqE|vNfSm~Nblv[S(QZQ_m

S(T7Y(ghYNPS(NPVl~[kduY(Q_\,e7QZYSc@v7d/\Y(QRmRd,Y(QEO\,m~NP`PNP\Y

c@Nb[(vYQZc&\YeWXYNb[kQZYNP\n[(v\[v\_,QiQ_eTggQZY/\,Ve`bd
c&QZY3{dTVheSdV[(v7Q1gQZY(Od,YmR\,VWXQd,OE\
Skd`PT[(NbdV>xOd,YEQXp\,mRgh`bQ,x[(v7QughY(d,{h\{hNP`fNb[o4d,OY(Q_\,WvhNPV7l4\l,d\,`|Sk[(\[kQ,qrtV[(v7Q_SkQ/WZ\,SkQ_SZx&[(v7QipQ_e
{dTVeSdVgQZY(O!d,YmR\,VWXQuc@NP`f`slNb,QeNbQZY(Q_V[EY(Q_S(Th`b[(SZq


c&QZ,QZY_x|c&Q\YQ3\,ee7Y(Q_SS(NPV7l4[(v7QWZ\,SkQ

c@v7QZYQU[(v7QZY(QNPSV7d$ T7ggQZY@{dTVheudV3[(vQ$gQZY(Od,YmR\,VWXQ$d,O;gd`PNPWZNbQ_SZxhQZ,Q_V[(v7dT7lv[(v7QZY(Q
\Y(QUWXdmRghT7[(\{h`bQTggQZY&{dTVheS&dVu[(v7QgQZY(Od,YmR\,VWXQd,O)\Egd`PNPWXoO!d,Y@Q_\,Wv L



8 x~3y{ ^9 zjht, kZ9k j *,u(k XjL, , X

X u L,L3L,L fZ ph j X L,L !X ph(n(X9,t~~Z
ZLs ypX(L ! ;t ,Rt R, pX2 ,ZZQ p,fij( 9 ~
p_pXypX( ! p, y7Z!ZSR ,((X$p /
: y{~O~q7 |vQ[(v7QZd,Y(Q_m O!d`P`Pd
c@S@O!Y(dm [c&d~O\,WX[(SZ}t
slNb,Q_V\~sG c@Nb[(vu\,`PT7Q xjc2QyWZ\,V

WXdVSk[kYTWX[\,V7d,[(v7QZY9s\G
cNb[(vG\,`fT7Q
TSk[;{o$myT`b[(Nbgj`boNfV7l\,`P`Y(QZcs\YeS9NPVy[(v7Q*O!d,YmEQZY
(
&{o 7
]> 9ThVe7QZY&[(v7Q_SkQY(QZc&\YemRQZ[kYNPWZS2c2QWZ\,VijVe\y`Pd
c&QZY&{dTVheRdV NPO^Nb[2NPS&V7d,[<.pq
87

/

,9

;:

5

5

5

|vQ|WXdmEghT7[(\[(NbdVRd,Oj[(v7Q`bd
c&QZY{dTVe>x=<xdVR[(v7Q*G\,`fT7Q*d,O

5

eQZgQ_VheS)dVE[(v7Q*Y(QZcs\YeRmRQZ[kYNPWq

&Q_WZ\,TSkQ*[(v7QZYQs\YQ|V7dV7QZl\[(Nb,Q*Y(QZcs\YeSZxNfVUd,YeQZY;O!d,Y)[(v7QsQXpgQ_WX[kQ_eRY(QZc&\Ye$[kd{Q&gdS(Nb[(Nb,QsNPVy[(v7Q
ijVNP[kQXav7d,YNbZdVuWZ\,SkQ,x\,V/\,WX[(NbdVc@Nb[(vgdS(NP[(Nb,QY(QZcs\Ye3myTSk[*{Q[(\w,Q_Vc@Nb[(vuV7dVZQZY(dRgY(d,{j\{hNP`PNb[o

>

fi

C

vh73Qh{.L8$>${3

{o[(vQ`P\,Sk[$Sk[kQZg^q&dVSNPe7QZYdV`boY(Q_\,Wv\{h`bQSk[(\[kQ_S$d,O*[(v7Qs+x?\,Vhe`bQZ[1?{QE[(v7Q`Pd
c&Q_Sk[

7q*|vQ_V

V7dV7ZQZYd[kY\,VSNb[(NbdVgYd,{h\{hNP`PNP[on[kddV7Qd,O[(v7Q_SkQSk[(\[kQ_SZx"@

[(v7Qv7d,YNbZdV>x*\,VeffA[(v7QS(m~\,`P`bQ_Sk[

V7dV7ZQZYd~Y(QZcs\Ye>x\,Ve3SkQZ[*< ?
B?
NfS@\~`Pd
c&QZY{dTVe/dV/[(v7Q$gY(d,{h\{hNf`PNb[od,O\,WX[(T\,`P`bo
Y(Q_\,WvNPV7l3\,Vogh\Y([(NPWZTh`P\YSk[(\[kQ\O[kQZYC@Sk[kQZghSNbO&[(vNPSgY(d,{j\{hNP`PNb[o3NPSVdV7ZQZY(dx)NPV4gh\Y([(NfWZT`P\Y\
Sk[(\[kQ*c@NP[(v$YQZc&\YeDAq?rO[(v7QsY(QZcs\YeEmEQZ[kYNfW2NPS)eNfS(WXdTV[kQ_e>x[(v7Q_VE`bQZ[E<


GFH?h

NPSs[(v7Q$eNPS(WXdTV[*O\,WX[kd,Y_q

cWXdVS(NPeQZYR[(v7Q3NPV7ijVNb[kQXav7d,YNbZdVTVe7QZYR\Sk[(\[(NbdV\Yongd`PNfWXo,q
gY(dpWXQ_S(SZx\,Ve

x,c@v7QZY(Q Z .eI_Sf


F

|vNfSENPVeTWXQ_S~\1\Yw,d


[(v7Qgd`fNPWXov\,SV7dV7ZQZY(dY(QZcs\YeNbO[(v7QZYQNfS\nV7dV7ZQZYdnghY(d,{h\{hNP`fNb[ogh\[(v

[kd\

Y(QZcs\YeV7deQ,xNqQ,qbxp\ySk[(\[kQO!Y(dmc@vNfWv[(v7QZY(QNfS2\$gdS(Nb[(Nb,QXaLY(QZcs\Ye\,WX[(NbdVgdSS(Nb{h`bQ,q)|vNfS9NPS9[kYT7Q



NbO;\,VedV`bouNbO)[(v7QZY(QyNPS\~V7dV7ZQZYdaLgY(d,{h\{hNf`PNb[o jPygh\[(vNfS(Nb[(NPV7l~Q_\,WvV7dpe7QU\[mEdSk[dVWXQ
[kd~\EYQZc&\Ye3V7deQ,q2pTWv3\gh\[(v3\,WZWXYTQ_S*Y(QZcs\Ye/\[`PQ_\,Sk[I<
GFH?h J AEOd,Y@Sk[(\[(NbdV\Yogd`PNPWZNPQ_SZq

q

pNfVWXQ;Sk[(\[(NbdV\Y(ogd`PNPWZNPQ_Svh\_,Q\,`PT7Q_S>{dTVhe7Q_e{o[(v7Q[(NPmRQXae7QZgQ_Ve7Q_V[\,VhevNPSk[kd,Yoae7QZgQ_Ve7a
Q_V[U\,`PT7Q_SOd,Y$NPV7ijVNb[kQXav7d,YNbZdV4&9SZx+[(vNPSU`bd
c&QZY${dTVheO!d,Y$[(v7Q~Sk[(\[(NbdVh\Y(o4G\,`fT7QEd,O*[(v7Q
&

NPS*\,`PSkdR\R`Pd
c&QZY@{dTVeOd,Y|d,[(v7QZY@gd`PNfWZNbQ_SZq

V7dVpaV7QZl\[(Nb,QY(QZcs\YeSNPS p
. x*[(v7Q_V \
a\,eeNP[(Nb,Q\ghgY(d_7NPmR\[(NPdVnWZ\,VhV7d,[Y(QZ[(T7YVn\gdSNb[(Nb,Q~\,`PT7Q,q1?d4e7QZ[kQZYmRNfV7Q~c@vQZ[(v7QZY[(v7QZY(QuNPS
\ugd`PNPWXoc@Nb[(vY(QZcs\Ye4l,YQ_\[kQZYU[(v\,Vi/
. O!d,YU\/lNb,Q_Vs+xWXdmEgjT7[kQ \,Ve4[(v7Q_VSkQZ[yu S(TWv
G q*|v7Q
[(v\[[ 9~ p
. xNqQ,qbx& xj\,Vhe3YThVu[(v7Qs a\,eheNb[(Nb,Qy\ggY(d
pNPm~\[(NbdV3\,`bl,d,YNb[(vmdV^\
)NPV\,`f`bo,x&Vd,[kQ[(v\[NbO[(v7Q3\,`PT7Q3d,O\&c@Nb[(v

=<

K&

&

'&

0<

L

v\,S*gdS(Nb[(Nb,Q\,`PT7QNbO+\,VeudV`PoNbO+[(v7Q\ggYd_7NPmR\[(NbdVuYQZ[(T7YVS*\EgdS(NP[(Nb,QG\,`PTQ,q



d,[kQ|[(v\[;[(vNfS;e7dQ_S;Vd,[WXdV[kY\,ehNPWX[[(v7Q*TVeQ_WZNPe\{hNP`fNb[oY(Q_ST`b[+d,O\,e\,VNpQZ[9\,`Lq7t_,,q2|v7Q
gY(d,{j`bQ_m[(v\[*[(v7QZogY(d,Q_e/TVeQ_WZNPe\{h`bQNPSsc@vQZ[(v7QZY|\R&cNb[(vuV7dV7gdS(Nb[(NP,QYQZc&\YehS*v\,S

.

.

\vNPSk[kd,Yoae7QZgQ_VeQ_V[d,Y[(NfmEQXae7QZgQ_Ve7Q_V[\,`PT7Qyd,O pq4Q,YQR\,SkwNfV7l~c@vQZ[(v7QZYNb[vh\,S\,`PT7Q'&

NPV[(v7QV7dVpaV7QZl\[(Nb,QY(QZcs\YeWZ\,SkQ,]^\,VS(c2QZYNfV7l~[(vNfST7Q_Sk[(NbdVQZ,Q_V1NbO)c&QEm$T`P[(Nbgh`bo[(v7QyY(QZc&\YeS

U
*e7dQ_S@V7d,[@\,VSkc&QZY|[(v7Q_NPY|T7Q_S([(NbdV>q

{o

3 2 ^9 s2(k XjL, , j" , $(X9k L p
3fihyjtXP
pjZ9 Ztp u , X L,L,* fZ ph1(X9k f
Ejk RXP $jhfi 7X(EU ! E
yZy,;93Gh|jkXP;
w

~vy~$y67

/

-9

( )-+



'qPq
ya\,eeNb[(NP,Q@\ggY(d
pNfmR\[(NbdV

d,[kQ*[(v\[+[(v7Q*WXd,Y(d`P`P\Y(oeQZgQ_VheSdVh`bodV\,WX[(S@t
?\,Veu O!Y(dm[(v7Q&gY(dd,O7d,Oj@v7QZd,Y(Q_m
|vTSZx\,VoEd,g[(NPm~Nb_\[(NbdVEgYd,{h`bQ_mc@Nb[(vR[(v7dSkQ@ghY(d,gQZY([(NbQ_S)c@NP`f`vh\_,Q\
NbO+\,VeudV`boNbO+Nb[|v\,S|\R2?q

:

q7

G


.


dT7[kghT[(S6.pq[(v7QZY(c@NfSkQ,x
lNb,Q_VxNb[Wv7ddS(Q_S|STWvU[(v\[
x\,Ve[(vTS+ [ ztr
v7d`PehSZq;M^QZ[



r


G


@
q




,

k
[

Q
(
[

v

\
[




G
*

P
N
&

(
[
7
v

Q

\

g

g
(




p

f
N
R


\
[(NbdV[kdE[(v7Q\,`PT7Qd,OG
OdTVe{o


YTVhVNPV7lE\,`bl,d,YNP[(vm
$qfi|v7Q_V NfS|\,V_a\ggY(d
pNfmR\[(NbdV/[kd
xhS(d
NPS@\,V^Za\gghY(d_7NPmR\[(NbdV3[kd

y{~O~
M^QZ[ 5
\,` x^\,Vhe`PQZ[ {Q\gd`PoV7dm~NP\,`aL[(NPmEQ a\,eheNb[(Nb,Q\ggY(d
pNfmR\[(NbdV\,`bl,da
YNb[(vhmuq&)NbYSk[Zxh[(v7Q$9+3WXdmEghT7[kQ_S <E\,SNPV/|v7QZd,YQ_m
qP$\,Ve3Wv7Q_W(wpSc@v7QZ[(v7QZY 5 pq*rO;Skd7xNb[

'

L

D&

3



$

5

.

P

5

.ON

0&

5

Q

K3

5

q

pTggdSkQ,xNPVhSk[kQ_\,e>x[(v\[uc2Q1vh\_,Q\2?

O!d,Yud,gh[(NPmR\,`gd`PNPWZNbQ_SOd,Y/[(vNPSgY(d,{j`bQ_muqMQZ[

GIU{Q\,Vn\,`Pl,d,YNb[(vm [(v\[e7Q_mEdVSk[kY\[kQ_S$[(vhNPSZqMQZ[ G\,` ^Gx\,Ve yGIU.e jq
- qrO ./[( v7Q_V .\,Ve1 c&QWZ\,Vn
Sk[kd,g^qu2`PSkQRc&QWv7ddS(Q\,VSTWv[(v\[

tG
ix7lNbpNPV7l q&pNPVhWXQ - x7\,Ve - NPSsgd`boVdmRNP\,`S(NbZQ\,VeuNPS&gd`bopV7dmRNP\,`a
[(NPmEQWXdmEghT7[(\{h`PQRNPV G-
S(NPVhWXQ NfS[(v7QRdT7[kgjT7[d,O yGIU.e kx;c&QWZ\,VWv7ddSkQOX - x)\,Ve
YTV GIUG
q2@vNPSslNb,Q_S\; a\,eeNb[(Nb,Q\ghgY(d_7NPmR\[(NPdV>q


5

|vTS

N

5

S3

5

5



R

3

;3

5





N

N

D3







VU

fi 38?>v{v8.^j



$33$3

Za\ggYd_7NPmR\{h`bQOd,Y3SkdmEQWZ\,VVd,[3v\_,Q\9+q||v7QZY(QZOd,Y(Q,x

gY(d,{j`bQ_m

[(v\[3NPSuV7d,[

\,Vo3m$Th`b[(Nbgh`PNfWZ\[(Nb,QV7dV\gghY(d_7NPmR\{hNf`PNb[oY(Q_S(T`P[@opNbQ_`PeS|\,V\,eehNb[(Nb,QUV7dVh\ggY(d
pNPm~\{hNP`PNb[oYQ_S(T`b[Zq

c&QZ,QZY_x\,VE\,eheNb[(Nb,QsV7dV\gghY(d_7NPmR\{hNf`PNb[oY(Q_ST`b[+dV`boUS(vd
c@S)[(v\[;[(vQZY(Q*NPS;V7d9+x\,`P[(v7dT7lv

Za\ggYd_7NPmR\[(NbdVuOd,Y@SkdmRQipQ_eq

[(v7QZY(Q$mRNblv[*{Q\,V

H F[Z \oH]K^

WCYX

a&KKff_Ha`K F K

?

HKfe7H Fhg

bZdc

>

iKj

,g



|vNfSSkQ_WX[(NbdVO!dpWZTSkQ_SUdV4ijVhNb[kQXav7d,YNbZdV1gd`fNPWZNbQ_SZq&Q_WZ\,TSkQ[(v\[$NPS$WXdVS(NPS([kQ_V[$[(v7Y(dT7lv7dT[[(v7Q
SkQ_WX[(NbdV^xc&Q|e7dV7d,[QXpgh`PNPWZNP[(`bomEQ_V[(NbdVRNb[NPVQ_\,WvR[(v7QZd,YQ_muq;@dc2QZ,QZY_x7\,S2pQ_WX[(NbdV~S(vd
c@SZx[(v7QZY(Q
\Y(QUSNblVNijWZ\,V[*WXdmEghT7[(\[(NPdV\,`^eNQZY(Q_VWXQ_S|{QZ[c2QZQ_V/ijVNb[kQXa\,Ve3NPVpijVNP[kQXav7d,YNbZdVWZ\,`PWZT`f\[(NbdVSZq
|vQgd`PNPWXoQX7NPSk[kQ_VWXQgYd,{h`bQ_m

Od,Yu&9Sc@Nb[(v

V7QZl\[(Nb,Q4\,Ve

V7dVpaVQZl\[(Nb,QY(QZc&\YeS

[Za\gghY(d_7NPmR\[(NbdV^q@rO\~gd`PNPWXoc@NP[(v/gdS(Nb[(Nb,Q$gQZY(O!d,YmR\,VWXQUQX7NPSk[(S_xj[(v7Q_VQZ,QZY(o
}.
WZ\,VV7d,[R\ghgY(d_7NPmR\[kQ/\gd`PNfWXo1c@Nb[(vngdS(Nb[(Nb,QgQZY(Od,YmR\,VWXQ,qQ_VWXQ,x2[(vQ/e7Q_WZNPS(NbdVngYd,{h`bQ_m
NPS
Sk[kY\,NPlv[kOd,Y(cs\Ye`bo/Skd`P,Q_e{o\,VoX_
a\ggY(d
pNPm~\[(NbdV>q|v7QZY(QZOd,Y(Q,xc&QWXdVhWXQ_V[kY\[kQ~dVs2S
c@Nb[(vV7dV7aV7QZl\[(Nb,QRY(QZcs\YeS_qy@Q_S(T`b[(SOd,Y&9ScNb[(v4TV7Y(Q_S([kYNPWX[kQ_eY(QZcs\YeS\Y(QRSk[(\[kQ_e\,S
WXd,Y(d`P`f\YNbQ_SZq/&dVS(Nfe7QZYU\,V_
a\ggY(d
pNfmR\[(NbdV\,`Pl,d,YNb[(vm [(vh\[Zx+dVnNPV7gjT7[\3& G c@Nb[(v
V7dVpaVQZl\[(Nb,QY(QZcs\YeSZx7dT[kghT7[(S|\Egd`PNfWXoO
d,O)[ogQ`2
q9|vQ_V/Nb[|v7d`PehSs[(v\[
7XGIU
tG Z G\,`
G Q
4QihYS([2WXdVS(Nfe7QZY9[(v7QT7Q_Sk[(NbdVd,O^c@v7QZ[(vQZY&\,Vd,g[(NPmR\,`Sk[(\[(NbdVh\Y(oEgd`PNPWXoEWZ\,V{QZ
a\gghY(d_a
NPmR\[kQ_e1O!d,Yy&9ScNb[(v4V7dVpaV7QZl\[(NP,Q~Y(QZcs\YeSZqr[$NPSwpV7d
c@V MNb[k[(mR\,V^x2_,G7]9TVevQ_V7w
QZ[|\,`qbx(././
. &[(v\[s[(v7QY(Q_`f\[kQ_eue7Q_WZNPS(NbdVgY(d,{j`bQ_mNfS&;aWXdmRgh`bQZ[kQ,q4QNPVhWZ`PTe7Q\yS(w,QZ[(Wvud,O?[(v\[
NPSV7d,[STNb[kQ_eO!d,Y

\ggYd_7NPmR\[(NbdV\,`Pl,d,YNb[(vmopNbQ_`PehS>S(TWv$\*gd`PNPWXo,x{Q_WZ\,ThSkQ9\*gd`PNPWXoc@Nb[(vgQZY(Od,YmR\,VhWXQ *d,Y?S(m~\,`P`bQZY

k

gY(dd,O)v7QZY(Q,xS(NPVhWXQ`P\[kQZY|gY(dd,OS*{hTNP`fe~dV/NP[Zq9|v7QOd,YmR\,`^e7QZ[(\,Nf`PS*WZ\,V/{QOdTVeuNPVuggQ_VeNUq

8Sx~3y{ ) R
pj(pX7ZR,
p L, j,1p U f X

jkXP
Z93 /j," ,$kZ9t $! @ (jb_
: y{~O~q7 Q_m${QZYS(vNbgUNfVUNfSSk[kY\,NPlv[kOd,Y(cs\Ye>x{Q_WZ\,TSkQs\|gd`PNPWXoWZ\,V${Q2lT7Q_S(SkQ_ey\,Ve$QZG\,`fT\[kQ_e

NPVgd`bopV7dmRNf\,`[(NfmEQ,q??dS(vd
c;avh\YeV7Q_S(S_x
c&QY(Q_eTWXQ9[(v7Q9;aWXdmEgh`PQZ[kQ2S(\[(NPSkij\{hNP`PNP[o@ghY(d,{h`bQ_m
[kdNb[ZqM^QZ[ ) ( II q
{QSTWv\Od,YmyT`P\nc@Nb[(v \YNP\{h`PQ_S ( IDI
\,VeWZ`P\,ThSkQ_S
I( DI x&cv7QZY(Q3WZ`P\,ThSkQ +(N 0 +-S 0 +4S 0 EO!d,Y Z q4QS(\
o[(v\[
\YNP\{h`bQ
7 e . ( 1^ NbO Y(Q_Skgq )NPS\U`PNb[kQZY\,`NfV q) NP[(v7dT7[
`bdS(S|d,O;l,Q_V7QZY\,`PNb[o,xhc&QU\,S(S(ThmEQ[(v\[QZ,QZY(ouG\YNP\{h`bQ\ggQ_\YS\[mEdSk[@dVWXQ$NPV/Q_\,WvWZ`P\,TSkQ,q&|v7Q
NPe7Q_\NPS[kd4WXdVS([kYTWX[$\&
G Uv\
NPVl3dV7QSk[(\[kQO!d,YQ_\,Wv\ggQ_\Y\,VhWXQd,O|\G\YNP\{h`bQ
ml



Bz

v]wx4y
~

0u :=:V:

pVqVqdrts

o{

|{

~

~[

}{













~[

{

(



{



'
V{



{

|{

[{



~[

z

NPV\WZ`f\,TSkQ,q|v7QySkQZ[d,Od,{hSkQZY(\[(NbdVSNPS[(v7QESkQZ[d,OG\YNP\{h`bQ_SZq9\,Wv\,WX[(NbdV4WXd,Y(Y(Q_SkgdVehS|[kdu\,V

\,S(S(NPlVmEQ_V[d,O&\~\,`PT7Qy[kdu\\YNP\{j`bQ,q@v7Q$[kY\,VS(Nb[(NbdVOTVWX[(NbdVNPSe7QZ[kQZYmRNPVhNPSk[(NPWq|v7Q$gY(dpWXQ_S(S
Sk[(\Y([(S+c@NP[(vU[(v7Q2ihYS([\YNP\{h`bQ2NPVU[(vQ9ihYSk[?WZ`P\,ThSkQ,q?rO7[(v7Qs\,WX[(NbdVEWvdSkQ_VNPVU\WXQZY([(\,NPVySk[(\[kQ*S(\[(NPSkihQ_S
[(v7QWXd,Y(Y(Q_SkgdVeNfV7lu`PNb[kQZY\,`x?[(v7Q~ghY(dWXQ_SSgY(dpWXQZQ_eSU[kd[(v7QRihYSk[\YNP\{j`bQRd,Os[(v7QVQX[yWZ`P\,TSkQ,x+d,Y

NbO\,`P`+WZ`P\,TSkQ_Sc&QZY(QEWXdVS(NPe7QZYQ_e>qrO[(v7Q\,WX[(NbdV4e7dQ_SV7d,[

c@Nb[(vY(QZcs\Yey[kd\~ijV\,`+S(NPVw/Sk[(\[kQ

S(\[(NPS(O!o[(v7QR`PNb[kQZY\,`Lx>[(v7QEgY(dpWXQ_S(SgYdWXQZQ_eS[kd3[(v7QRV7QXp[G\YNf\{h`bQd,O2[(vQRWZ`P\,TSkQ,x^d,YUc@Nb[(vY(QZcs\Ye

.[kd/\uS(NPVwSk[(\[kQ

RqyS(NPV7wSk[(\[kQRc@NP`f`?V7QZ,QZYU{QE`bQZO[ZqE|v7Qgh\Y([(NP[(NbdVd,O2[(v7QRS([(\[kQ~Skgh\,WXQRNPV[kd

d,{hSkQZYG\[(NbdVWZ`P\,S(SkQ_SUlT\Y\,V[kQZQ_SU[(v\[U[(v7QRS(\,mEQ~\,SS(NblVmEQ_V[UNPSm~\,e7QROd,YQZ,QZY(o4\ggQ_\Y\,VWXQRd,O

mG >Q_T\,`PS~N

[(v7QS(\,mEQ~\YNP\{j`bQ,q@v7QZY(QZOd,Y(Q,x?[(vQ~\,`PT7QRd,O
Y(Q_eThWX[(NbdVuNPS|NPVuggQ_VeNb~Uq

z

6zNPSS\[(NPStij\{h`PQ,q@v7QROd,YmR\,`




fiC

vh73Qh{.L8$>${3


.pqurm~mEQ_eNP\[kQ_`boc&Q~l,QZ[y[(v7Q

d,[kQ[(vh\[y\,`P`gd`fNPWZNbQ_Sv\
,QQXpgQ_WX[kQ_eYQZc&\Yed,O*Q_Nb[(v7QZYRd,Y

*

V7dV\ghgY(d_7NPmR\{jNP`PNb[o/Y(Q_S(T`P[O!d,Yy&9SZx?QZ,Q_VNbOs\,`P`;[kY\ tQ_WX[kd,YNPQ_S$v\
,QV7dV7aV7QZl\[(Nb,Q~gQZY(Od,Yka
mR\,VWXQ,q

8Sx~3y{

32 Z
. F\ R
kt RZb Uj |

ml

(X9k $!

:y{~O~q7



n





@v7QS([(\[(NbdV\Y(o\,`PT7Qd,OU\&WZ\,V{QWZ\,`fWZT`P\[kQ_eNPV

{hNPVh\Y(oSkQ_\YWv

"

L, j,@p 9Z&93 Ej, ,


)

gd`PoV7dm~NP\,`*[(NPmEQ{o

TS(NPV7l4\,Vd,Y\,WZ`bQ3Od,YR[(v7QSk[(\[(NbdV\Yongd`PNfWXoQX7NPSk[kQ_VWXQgY(d,{h`bQ_m

\

Od,Ys2SZq

G }$

|v7QVTmU{QZYsd,O^{hNP[(S2[kd{QWZ\,`PWZT`P\[kQ_euNPS&gd`bopV7dmRNP\,`jNPV[(v7QS(NbZQd,O q V7d
cNPV7ly[(v7QG\,`PTQ,xc&Q
WZ\,V[kY(o[kd$ih\,Vu\,WX[(NbdVOd,Y|\,Vd,{jSkQZY(\[(NbdV>q;rO^[(v7QmEdpeNihQ_e&Sk[(NP`f`j\,WvNbQZ,Q_S*[(v7Q\,`PT7Q
WZ\,`PWZT`f\[kQ_e1{QZO!d,YQ,x?c&QWZ\,VWXdV[(NPVT7Qc@Nb[(v4[(v7QV7QX[$d,{hSkQZY(\[(NbdV>x)TV[(NP`;\3S([(\[(NbdV\Y(ogd`PNPWXoNPS
OdTVeRcvNPWvv\,S2[(v7Qd,g[(NPmR\,`hgQZYO!d,Ym~\,VWXQ,q|vNPS9\,`bl,d,YNb[(vmYTVhS9NPV~gd`PoV7dm~NP\,`7[(NPmEQc@Nb[(v\,V
d,Y\,WZ`bQySkd`bpNPV7lR[(vQ$Sk[(\[(NbdVh\Y(ougd`PNPWXoQXpNPS([kQ_VWXQUgYd,{h`bQ_mOd,Ys2SZqpNPVhWXQ[(v7QUd,Y\,WZ`bQ$NPSNPV
?xh{o|v7QZd,Y(Q_m7qPxh[(v7QU\,`Pl,d,YNb[(vmYThVS*NPVgd`bopV7dmRNP\,`[(NPmEQNPO?

@q
Za\gghY(d_7NPmR\[kQ_S$[(v7Q~d,gh[(NPmR\,`

[(v\[s
q4Q~S(vd
c[(v\[[(vhNPSNPmEgh`PNPQ_S@[(v\[ {o
S(v7dc@NPV7lv7dc[kd1Skd`b,Q[(v7QuaWXdmEgh`bQZ[kQughY(d,{h`bQ_m
qSENPV[(vQugY(dd,O|d,O|vQZd,Y(Q_m
7qPx
lNb,Q_V\,VRNPVSk[(\,VhWXQ d,O
xc2Q@WXdVhSk[kYTWX[9\U&
G >q|v7Q*dV`boWvh\,V7l,Q@[kd[(vQ|Y(QZcs\Ye

cx;\,S(STmEQR[(v\[CNPS\3gd`PoV7dm~NP\,`aL[(NPmEQE\,`bl,d,YNb[(vm

;Rc@NP[(v^.

Sk[(\[(NbdVh\Y(ogd`PNfWXo/O!d,YS(dmEQ

B

v]wx4y

"z

z

v]wx4y

OTVWX[(NbdV3d,O;[(v7Q$sWXdVS([kYTWX[kQ_eNPV/[(v7Q$gY(dd,O)d,O9|v7QZd,Y(Q_m
c@Nb[(vgdS(Nb[(Nb,QRgQZY(Od,YmR\,VhWXQ_SZq3d
cY(QZcs\Ye

7qPNPS|[kdmR\w,QNb[@\&

NPSUd,{[(\,NPV7Q_enNbO*Sk[(\[kQ

NfSUY(Q_\,Wv7Q_e>x\,VeY(QZcs\Ye

yNPSsY(Q_\,WvQ_e>q9Q_VWXQ NPS*S(\[(NPSkij\{h`bQNbO+\,VedV`boNbOG >sv\,Ss\,`PT7Q
q
(
S(S(TmRQ;[(v\[^gd`PNPWXoENPS[(v7QdT7[kgjT7[>d,Op[(v7Q}Z
a\gghY(d_7NPmR\[(NbdVU\,`bl,d,YNb[(vm Uq?rO yNPS^S(\[(NPSkij\{h`bQ,x
[(v7Q_V7Z!;G QIUyt~
} ( - qE&Q_WZ\,TSkQE[(vQEgQZYO!d,Ym~\,VWXQd,O9QZ,QZY(ogd`PNPWXo/Od,Y
G ENPSyQ_Nb[(v7QZY3uNbO NfSEV7d,[RS(\[(NPSti\{h`bQ,xd,Y ( - NbO NPSES\[(NPStij\{h`PQ,x9Nb[O!d`f`bd
c@S[(vh\[;v\,S
gQZY(Od,YmR\,VWXQ ~NbOs\,VedV`bo4NbO NPSS\[(NPStij\{h`PQ,q/pd7x+NPVd,Ye7QZY$[kde7Q_WZNPeQ
x+c2QWZ\,V
Z
WXdVSk[kYTWX[JG xjYTV[(v7Q$\ggY(d
pNPm~\[(NbdV/\,`bl,d,YNP[(vm
dV3Nb[Zx7[(\w,QyNb[(S|dT7[kgjT7[m4\,Ve3WZ\,`fWZT`P\[kQ
7Z!;
G >QIU qy|v\[dT7[kghT7[S(v7dc@Sc@v7QZ[(v7QZY NPSNPV
q`P`?[(v7Q_SkQESk[kQZghS\Y(Qgd`bopV7dmRNP\,`a




(

-

NPSsd,{[(\,NPV7Q_e3NbOSk[(\[kQ

.

1z

z

.

h

z

z

.

z

&

tz

K&



"z

.

Pz

z

0z

v]wx4y



z

z

[(NPmEQ{dTVhe7Q_eWXdmEghT7[(\[(NbdVhSZqr[*O!d`P`Pd
c@S*[(vh\[

v]wx4y

v]wx4y

NPS|NPVu@x\,Ve/v7Q_VWXQ



|q



OWXdT7YSkQ,x&[(v7Q/S(\,mRQ/V7dV\ggYd_7NPmR\{hNP`fNb[oY(Q_S(Th`b[Ev7d`PeSyOd,Y~&9Sc@NP[(vgdSNb[(Nb,Qu\,Ve
V7QZl\[(Nb,Q$Y(QZcs\YeSZq

w



~vy~$yl

RXP

.

_

7
n

Uju

X\


)



|




R L, jp $Zy93 !

kjk

S(NPV7l[(v7QS\,mEQghY(dd,Os[kQ_WvVNPT7Q\,Sy\{d
,Q,xc&QWZ\,VS(vd
c[(v\[$[(vQ~\,`PT7QNfSUV7dV\ghgY(d_7Na
mR\{h`PQ,x7[kdd7q

w

~vy~$yl


@




l





n

6. Fy\ p

_



(

L Gh9X93 f

kt RZb



S(NfmRNP`P\YU\YlTmEQ_V[yWZ\,V{QTSkQ_e[kdSv7d
c[(v\[\/gd`PNPWXoc@Nb[(vgQZY(O!d,YmR\,VWXQ~\[`bQ_\,Sk[y[(v7Q
\_,QZY\l,Qyd,O;\,`P`^gQZYO!d,Ym~\,VWXQ_S*Od,Y@\~s


WZ\,VV7d,[{QWXdmRghT7[kQ_e3NfVgd`PoV7dm~NP\,`[(NPmEQ,xhThV`bQ_S(S

@q)d,[kQ@[(vh\[NPV[(v7Q|gYdd,Ojd,O|vQZd,Y(Q_m7qPx[(v7Q*dV`bo$gQZYO!d,Ym~\,VWXQ*l,Y(Q_\[kQZY9[(vh\,VEd,YQ_T\,`


[kdR[(v7Q$\_,QZY\l,Qyd,O+\,`f`gQZYO!d,Ym~\,VWXQ_S|NPSs[(v\[@d,O)\,V/d,g[(NPmR\,`>gd`PNfWXo,q



fi 38?>v{v8.^j

w

p2Z!b fi/(E _ bZh"
7X(4U ! /p,fij( ~1 r p,&X ,X93%G (j7
7Z!ZSE, 9,((,Zp ZLp,Xk
L, jp X G
L

,




j





$

7

X



X

,

Q


R



R



9


G




9

~vy~$yl
p

$33$3

!

(

#

(

!

u

|vTSZxQZ,Q_VRWZ\,`PWZTh`P\[(NPV7l\gd`PNPWXoc@v7dS(Q&gQZY(Od,YmR\,VhWXQ&NPS)\{d
,Q\_,QZY\l,Q@NfS+`fNbw,Q_`bo[kd{QsNPV7OQ_\,S(Nb{h`bQ,q
4QV7dc[(T7YV[kd[(NPmEQXae7QZgQ_VeQ_V[&gd`PNPWZNbQ_SZq)|v7Q[(NPmEQXaeQZgQ_Vhe7Q_V[&gd`PNPWXoEQX7NPSk[kQ_VWXQghY(d,{h`bQ_m
Od,Y@&9SNPSswVd
c@Vu[kd~{Q;aWXdmRgh`bQZ[kQ,xh\,SNPSs[(v7QUSk[(\[(NPdV\Y(odV7Q,q

8Sx~3y{

(





ml
pj pX71Z u
pj XGXP3 ! |
@b_

/



:V:V:

(



p/ ~Zt7XXhsp nU f X

)\gh\,eNfmRNb[kYNbdT\,Ve@S(Nb[(S(Nbwp`PNPSRt_,,$ghY(d
,Q_e\[(v7QZd,Y(Q_m



$jkXP Z

S(NPmRNf`P\Y[kd|v7QZd,Y(Q_m

7q q4|v7Q_NbY

2S$vh\,edV`PoVdVpaLgdS(Nb[(Nb,QRYQZc&\YehSZx+\,Vhe1[(v7Q_NbY$O!d,Ym$T`f\[(NbdV1d,O*[(v7Qe7Q_WZNPSNbdV4gY(d,{j`bQ_m
c@v7QZ[(vQZYU[(v7QZY(QNPS\3gd`fNPWXocNb[(v4gQZY(Od,YmR\,VWXQ
[(v7Q_NbYSZx9TSkQ_S~\Y(Q_eTWX[(NbdVnOY(dm

v]wx4y

cs\,S

.pq/@v7QRgY(dd,Os{o4TVevQ_V7wQZ[y\,`qbx}(././.px`PNbw,Q

q4Q3mEdpeNbOo1[(vNPSyY(Q_ehTWX[(NbdV[kd1S(v7dc[(v\[R\,Vd,gh[(NPmR\,`

[(NPmEQXaeQZgQ_Vhe7Q_V[sgd`PNPWXoNPS|v\Ye[kd~\ggY(d
pNfmR\[kQQZ,Q_V/Od,Y@TVd,{hSkQZY(\{h`bQ2SZq

8Sx~3y{ Z. \ / R; ~Zt7XXh)p Xpj ZXPU

", ,$kZ9k y! kjk RZb U,ju @
:y{~O~q7 4Q/lNb,Q\Y(Q_eTWX[(NbdVOY(dm
c@NP[(v[(vQ/O!d`f`bd
c@NfV7lghY(d,gQZY([(NbQ_SZq7d,Y\1O!d,YmyT`P\
c@Nb[(v
WZ`P\,TS(Q_S2c&QS(v7dcv7d
c[kdRWXdVhSk[kYTWX[*\,VuTV7d,{jSkQZY(\{h`bQFG
>2c@Nb[(v\,`PT7QNbO NPS
S(\[(NPSkij\{h`bQ,x\,Vec@Nb[(vG\,`fT7QO
t9bG
NbO NPSVd,[S\[(NPStij\{h`PQ,q|vQZY(QZO!d,YQ,x\,Vj_ a\ggY(d
pNPm~\[(NbdV
ml



}

n

T)

,z

v]wx4y

.

z

z

\z

WXdT`Pe{Q~TSkQ_e[kdeNPS([(NPV7lTNPSv{QZ[c2QZQ_VS(\[(NPSkij\{h`bQ~\,VheTVS\[(NPStij\{h`PQyOd,YmyT`P\,S$NPV1gd`bopV7dmRNP\,`

[(NPmEQ,q
7d,YsOd,YmyT`P\1z?xc2QihYS([9S(v7dc

mG >;OY(dmc@vNPWv G >
sG >;S(Nfm$T`f\[kQ_S;[(v7Q

v7dc[kdyWXdVS([kYTWX[2\,VTVd,{hSkQZY(\{h`bQ

z

c@NP`f`{Q|WXdVS([kYTWX[kQ_e>q@|vQ*O!d,Ym~\,`7gY(Q_SkQ_V[(\[(NbdV\ggQ_\YSNPVEggQ_VeNyqfi
Od`P`bd
cNPV7luSk[kY\[kQZl,o,qus[[(v7QRihYSk[Sk[kQZgxdV7QRd,Os[(v7Q
c@Nb[(vghY(d,{h\{hNP`fNb[o



X

( q2s[Sk[kQZg



.

z

z

WZ`P\,TSkQ_S$NPSWv7dS(Q_VTVhNbO!d,YmR`bo/\[UY\,Ve7dm

_&NPS*e7QZ[kQZYmRNfV7Q_e>q9&Q_WZ\,TSkQ$[(v7Q

x[(v7QU\,SS(NblVmEQ_V[*d,O)G\YNP\{h`bQ

gY(dpWXQ_S(S*NPS*ThV7d,{hSkQZY(\{h`bQ,xpNb[*NPSslT\Y\,V[kQZQ_eu[(vh\[*Q_\,Wv/\YNP\{j`bQl,QZ[(S@[(v7QS(\,mEQ\,S(SNblVmEQ_V[|NPV\,`P`
WZ`P\,TS(Q_SZx;{Q_WZ\,TSkQNb[(SU\,`PT7QNPSye7QZ[kQZYmRNfV7Q_eNPV[(v7QS(\,mEQuSk[kQZg^qrO@\WZ`f\,TSkQNPS$S\[(NPStihQ_e{o[(vNPS
\,S(S(NPlVmEQ_V[Zx\ijV\,`>Sk[(\[kQ$c@NP`P`{QY(Q_\,WvQ_e>q9rO+Vd,[Zxh\,VuQZY(Y(d,YSk[(\[kQUc@Nf`P`h{QY(Q_\,Wv7Q_e>q

`G

yG ( IDIUG d,O<G xS(TWv4[(v\[[(v7QRNPVhNb[(NP\,`+Sk[(\[kQ
d,O}G
>*NPS|[(v7Q$NPVhNb[(NP\,`>Sk[(\[kQyd,OG ( xj[(v7Q$NPVhNb[(NP\,`>Sk[(\[kQ$d,O}G ( NPS@[(v7QijVh\,`^Sk[(\[kQd,OG x\,Ve
Y(QZcs\Yen$NPS@l\,NPV7Q_eNbO)[(v7QiV\,`Sk[(\[kQd,O}G
NPS|Y(Q_\,Wv7Q_e>q|v7QUQZYY(d,YS([(\[kQ_Sd,O2\,`P`^[(v7QsG S\Y(Q

NPe7Q_V[(NihQ_e\,S\RTVNPT7QS(NPV7wSk[(\[kQ Rq

cx+WXdVSk[kYThWX[
.

.

zOY(dm



-

WXd,ghNbQ_S





z





1

?dNP`f`PTSk[kY\[kQ[(vQ$WXdVSk[kYTWX[(NbdV>xNPV/)NblT7Y(Qc&QUlNb,Qy\,V3QX7\,mEgh`PQU&WXdVS(NPSk[(NfV7lRd,O\

}G

Wvh\,NPV3d,O;WXd,ghNbQ_Sd,O z|d,{[(\,NPVQ_e3Od,Y[(vQUOd,Ym$Th`P\z


|v7Qe\,S(v7Q_e\Y(Y(d
cS2NPVheNPWZ\[kQ|\[kY\,VS(Nb[(NbdV~c@Nb[(vEghY(d,{h\{hNP`fNb[o

f[{ (
{
4 { * 1o{ ( { - { * q

( q|v7Q@e7d,[k[kQ_eY(Q_SkgqSkd`PNfej+\Y(Y(dc@S

.Y(Q_S(g^q+
q|vQy\,- WX[(NbdVhSWXd,YY(Q_SkgdVe[kd\,S(SNblVmEQ_V[(S
[kdR[(v7QUG\YNf\{h`bQ_SZq
rO 4NPSS(\[(NPStij\{j`bQ,x[(v7Q_V\R[(NPmRQXae7QZgQ_Ve7Q_V[|gd`PNPWXouS(NPmyT`P\[(NPVl - Y(QZgQZ[(Nb[(NbdVS|d,O9\,Vo/S\[(NPSta
\Y(QygY(d,{h\{jNP`PNb[o$[kY\,VSNb[(NbdVSdV\,WX[(NPdV
\z

OoNPVl\,S(S(NPlVmEQ_V[vh\,SgQZY(Od,YmR\,VhWXQqrOzNPSV7d,[S\[(NPStij\{h`PQ,x[(vQ_VThVe7QZY\,Vo\,S(S(NblVmRQ_V[\[

_

fi



C

vh73Qh{.L8$>${3








[










!







1

|




1
1
1

)NblT7Y(QR}9VuQX7\,mEgh`bQThV7d,{hSkQZY(\{h`bQOd,Y"z


f{ (


{

4


{

* 4o{ (


{



{

*

WZ`P\,TS(Q_S2d,O

`bQ_\,Sk[sdV7Qd,O^[(vQ

[z3NfS2V7d,[*S(\[(NfStihQ_e>q;Q_VWXQ,x7[(v7QgY(d,{h\{jNP`PNb[oy[(vh\[sThVe7QZYs\,Vo[(NPmEQXa

yd,OG >sNPSsYQ_\,Wv7Q_eNPS*\[mEdS([ ( q2sdVSkQ_T7Q_V[(`Po,x[(v7Q
(
q;|vNPS9gY(d,{7a
gY(d,{j\{hNP`PNb[o$[(vh\[9[(v7QijV\,`jSk[(\[kQd,O+G
>9NPSYQ_\,Wv7Q_eNPS2\[&mEdS([t

t9x
\{hNP`fNb[oQ_T\,`PS[(v7Q$QXpgQ_WX[kQ_e3YQZc&\Ye^qpNPVhWXQUOd,Y`P\Yl,Q$Q_V7dTlvX
Nb[v7d`feS|[(v\[
e7QZgQ_Ve7Q_V[sgd`PNPWXo~[(vQijV\,`>Sk[(\[kQ

z

.



z



-

[(v7Q[(vQZd,Y(Q_mOd`P`bd
cSZq



d,[kQ[(vh\[2[(v7Q[(NPmEQXae7QZgQ_VeQ_V[gd`PNfWXoyQX7NPSk[kQ_VhWXQ@gY(d,{j`bQ_mOd,Y&s2S9c@NP[(v~V7dVpaVQZl\[(Nb,Q

(././.q&|vQWZ`f\,S(S*MWXdVS(NPSk[(S&d,O+[(v7dSkQ`P\,VlT\l,Q_S

Y(QZcs\YeS*NPSsM>aWXdmEgj`bQZ[kQ~ThVev7Q_V7w~QZ[|\,`qbx
Y(Q_WXd,lVNP_\{h`bQ{o

V7dVe7QZ[kQZYmRNPVNPS([(NPW3+T7YNPVlnmR\,WvNPV7Q_S[(vh\[ThSkQ4\Y(Q_\,epaLdV`bo

\,eeNP[(NbdV\,`jY(Q_\,epaLc|YNP[kQ[(\gQ_Ssc@Nb[(v

NPV7ghT[~[(\gQ1\,Ve

fiR`Pd,l9?9[(\gQWXQ_`f`PSZq)r[*NPS&wpV7d
cV[(vh\[|M\,Ve[(v\[*M

NPSgYd,gQZY`bo/WXdV[(\,NfV7Q_e1NPV4sp@s|qVh`PNbw,Q[(v7QRWZ\,SkQRd,OsSk[(\[(NbdVh\Y(ogd`PNfWZNbQ_SZx\ggY(d
pNPm~\{hNP`PNb[o
d,O)[(NPmEQXae7QZgQ_VeQ_V[sgd`PNPWZNbQ_SsNPS@v\Ye7QZY*[(v\,V/[(v7Qgd`PNPWXoRQX7NPSk[kQ_VhWXQgY(d,{h`PQ_m

TV`bQ_S(S*M sq
V7d,{hSkQZYG\{hNf`PNb[o/NfS\SkgQ_WZNP\,`+WZ\,SkQEd,O2gh\Y([(NP\,`?d,{hSkQZY(\{hNP`fNb[o,qQ_VWXQ,x>c&Qyl,QZ[[(vQS\,mEQEV7dVpa

\ggYd_7NPmR\{hNP`fNb[oRYQ_S(T`b[sOd,Y@&9SZxhQZ,Q_V/Od,Y@TV7Y(Q_S([kYNPWX[kQ_eY(QZcs\YeSZq

w

~vy~$yl

RXP
w

~vy~$yl
ju,fi


. y\ E, ~Xk7ZjZhhp &Z&93 s! kjk
|
\ p R Zt7ZjXj2yt9 ! kjk RZb
_. yz
9


n



n

_





)

$j

|



(

d,[kQu[(v\[[(v7QgY(dd,O|d,O|vQZd,Y(Q_m

7qfi3\,SS(TmEQ_e\[kd,[(\,`sQXgQ_WX[kQ_eY(QZcs\YeWXYNb[kQZYNbdV>q|v7Q

eNPSWXdTV[kQ_enY(QZcs\YeWXYNb[kQZYNbdVNfSy\,`fSkd4TSkQZOT`2NfV[(v7QijVhNb[kQv7d,YNbZdV>q1?dSv7d
c[(v7QY(Q_ST`b[UOd,YR\

*)


fi 38?>v{v8.^j

X +

$33$3

eNPSWXdTV[kQ_eRY(QZc&\Ye~WXYNb[kQZYNbdV>xc&Q@dV`PoyV7QZQ_e~[kd$Wv\,V7l,Q[(v7Q|Y(QZcs\Ye~NfVE[(v7Q|gYdd,Od,O>|v7QZd,Y(Q_m


\,SOd`P`bd
cSZ}T`b[(Nbgj`bo[(v7QyijV\,`+Y(QZcs\Ye{o



NPS[(v7QEeNPSWXdTV[O\,WX[kd,Y_x+

(10 x>c@v7QZY(Q

7qfi
[(v7Q

VTmU{QZY*d,O;WZ`P\,TS(Q_SZx\,Veu4[(v7QVTm${QZY*d,O+\YNP\{j`bQ_Ssd,O?[(vQO!d,Ym$T`f\z?q
)\gh\,eNfmRNb[kYNbdT\,Vhe|S(Nb[(SNbw`fNPS4t_,,/ghY(d
,Q_e[(v\[\ghY(d,{h`bQ_m

,QZYoSNPmRNP`P\Yu[kd

vNPSk[kd,Yoa

e7QZgQ_Ve7Q_V[sgd`PNPWXo~QX7NPSk[kQ_VhWXQUNPS*&7@*;aWXdmEgh`PQZ[kQ,q

8Sx~3y{





v

L




ml
p
( G ! pVq4s 4 pX4Z, Tu

@

7XjXhp / ! Z |tZb zZ93 ! &p@s@ jb_

U



(

:V:=:

(



p f L

d,{hS(QZY(G\[(NPdVS
9 u ( q*4Q@e7dV7d,[;\,ee7Y(Q_SS?[(vQ|WZ\,SkQ*d,OjS(ThWZWZNPVWX[(`boYQZgY(Q_SkQ_V[kQ_egd`PNPWZNbQ_S
Od,Y&9Sv7QZYQ,q+7d,Y2\,VR\,V\,`bopS(NPS+d,Oh[(vQ_NbYWXdmEgh`bQX7Nb[o,xSkQZQ|TVev7Q_Vwjx\(././.,\pqfiyrO
x[(vNPS
?de7Q_S(WXYNb{Q\1vd,YNbZdVvNPS([kd,Y(oaeQZgQ_Vhe7Q_V[gd`PNPWXoO!d,Y~\&c@Nb[(v

QXpgh`PNPWZNb[(`Po[(\w,Q_SSkgh\,WXQ










&

NPSQXgdV7Q_V[(NP\,`Skgh\,WXQ,q)|v7QZY(QZOd,Y(Q,xc2QsWZ\,VV7d,[+QXpgQ_WX[+[(v\[)\|gd`bopV7dmRNP\,`baL[(NPmEQ\,`bl,d,YNP[(vmdT7[kgjT7[(S
\|vNfSk[kd,Y(oae7QZgQ_Ve7Q_V[>gd`fNPWXo,x
\,VeUc2QYQ_Sk[kYNPWX[WXdVhS(NPe7QZY\[(NPdV[kd|gd`bopV7dmRNP\,`aL[(NfmEQ;\,`bl,d,YNb[(vm~S[(v\[
\ggYd_7NPmR\[kQ~[(vQvNPS([kd,Y(oaeQZgQ_Vhe7Q_V[E
e7QZgQ_Ve7Q_V[gd`PNPWXoU

[(v7Qd,g[(NPmR\,`9gQZY(O!d,YmR\,VWXQ~TVhe7QZYU\,VovNPSk[kd,Yoa

d,O^\$&|qpsT7Y\l,d7xpe7Q@dT7l,Q_mEdV[Zxp\,Vhep`PNfS(SkQ_V7w,d~t_,,2WXdVS(Nfe7QZY(Q_e

[(v7QWZ`P\,S(Sd,O$s2Sc@Nb[(v

\{dTVed,O1dV

[(vQVTm${QZYd,O$S([(\[kQ_SuWXd,Y(Y(Q_SkgdVeNfV7l1[kd\,V

d,{hSkQZYG\[(NbdV^xc@vQZY(Q9[(v7Q2Y(QZcs\YeSWXd,YY(Q_SkgdVe7Q_e[kd[(v7Q2gY(d,{h\{hNf`PNb[od,O7Y(Q_\,WvhNPV7l\|ipQ_eUSkQZ[?d,O7l,d\,`
Sk[(\[kQ_S@\,Vhe[(vTS)c&QZY(Qs{dTVe7Q_e${o
q;|v7QZoyS(v7d
c&Q_e[(v\[;Od,Y;\,Vo$ipQ_eCx,[(v7Q*d,gh[(NPmR\,`pvNPSk[kd,Yoa
e7QZgQ_Ve7Q_V[gd`PNPWZNPQ_SO!d,Y&9S$NPV1[(vhNPSUWZ`P\,SS$WZ\,V{Q~\ggY(d
pNfmR\[kQ_e[kdc@Nb[(vhNPV4\,V\,eheNb[(Nb,Q

q$4Q~S(v7dc2Q_e1NfV9Y(d,gdS(Nb[(NbdVj'q[(v\[szvNPSk[kd,Y(oae7QZgQ_Ve7Q_V[ehNPS(WXdTV[kQ_ed,Y

v\
,QEgd`PoV7dm~NP\,`aL[(NPmEQy\ggY(d
pNfmR\[(NbdVS(WvQ_mEQ_SRY(d,gdS(NP[(NbdV
' q x& ,fi
7 X(,k~j
j , (pj p
XU7 $eR X$k L, 7X XG, $p $kZ9k q
WXdVSk[(\,V[

[kd,[(\,`aLY(QZcs\Ye\,`PT7QgYd,{h`bQ_mRSy[(v\[RWZ\,V{Qu\ggY(d
pNfmR\[kQ_e[kd4c@Nb[(vNfV\,V\,eheNb[(Nb,QWXdVSk[(\,V[

d,[(NPWXQ,x?vd
c&QZ,QZY_x?[(vh\[|v7QZd,Y(Q_m7qP,e7dQ_SVd,[lNb,QRTSNPVO!d,Ym~\[(NbdV\{dT[[(vQRWZ`P\,S(SkQ_Sd,O

&9Ss[(vh\[|&TY\l,dEQZ[|\,`qt_,,sWXdVSNPe7QZY(Q_e>}&Q_WZ\,TS(Qd,O?[(v7QY(Q_S([kYNPWX[(NbdVSs\,S(S(dWZNP\[kQ_e/c@Nb[(v
[(v7Qgj\Y\,mEQZ[kQZYIxdT7Yv\YeV7Q_SSsY(Q_S(T`b[(S*edRV7d,[@WXdV[kY\,eNPWX[|[(vQ_NbY*Y(Q_S(T`P[Zq
)NPV\,`f`bo,xc&QSv7d
c[(v\[$[(vQvNPS([kd,Y(oaeQZgQ_Vhe7Q_V[\,`PT7Q~d,O|&9S$c@Nb[(vVdVpaV7QZl\[(Nb,QY(QXa

Za\ghgY(d_7NPmR\{j`bQnThVe7QZY[kd,[(\,`EQXpgQ_WX[kQ_ed,Y1ehNPS(WXdTV[kQ_eY(QZc&\YeSZxETV`bQ_SS
a\,eeNP[(Nb,Q\ghgY(d_7NPmR\[(NPdVnThVe7QZY[(v7Q

cs\YeS4NPSV7d,[

&7@*|qn&dVhSkQ_TQ_V[(`bo,x9[(v7QG\,`PTQvh\,SEV7d2?d,Y
S(\,mEQ$\,S(S(TmEgh[(NbdV>q

|vQvNfSk[kd,Y(oae7QZgQ_Ve7Q_V[~gd`PNPWXoQX7NPSk[kQ_VWXQgY(d,{j`bQ_m

Od,Yu&9Sc@Nb[(v

V7dVpaVQZl\[(Nb,Q4Y(QXa


(././.q*Q_VWXQ,xh{Q_WZ\,TS(QUMNPS|\EghY(d,gQZY@S(T7{>WZ`P\,S(Ssd,O

cs\YeS|NPS@M^aWXdmEgh`bQZ[kQTVhev7Q_V7wQZ[\,`qbx

&7@*|x\ggYd_7NPmR\{hNP`fNb[oEd,O?[(v7QvNPSk[kd,Yoae7QZgQ_VeQ_V[&G\,`fT7QNfS

fiv\Ye7QZY*[(v\,V[(vQgd`fNPWXo

QX7NPSk[kQ_VWXQghY(d,{h`bQ_muq

8Sx~3y{

q. y\ pm ! Lt7ZjXj?t293 Ej," ,
(X9k $! kt R
Zb Uj | &p@s
:y{~O~q7 |v7Q|vhNPSk[kd,Y(oae7QZgQ_Ve7Q_V[;G\,`fT7Q*d,O^\&~G WZ\,VR{Q|WZ\,`PWZT`P\[kQ_eTS(NPVl{hNPV\Y(oySkQ_\YWv

,QZY2[(v7Q@vNfSk[kd,Y(oae7QZgQ_Ve7Q_V[?gd`PNPWXo$QXpNfSk[kQ_VWXQ*gY(d,{j`bQ_muq)|v7Q*VThmU{QZY;d,O{hNb[(S)[kd{Q|WZ\,`PWZT`f\[kQ_eRNPS
gd`bopV7dmRNP\,`NPV[(v7Q|S(NPZQ*d,O1
G q;|v7QZY(QZOd,Y(Q,x{o|v7QZd,Y(Q_m7qPp. x[(vNPS;WZ\,`PWZTh`P\[(NbdVRWZ\,VE{QsgQZY(Od,YmEQ_e
NPVgd`bopV7dmRNP\,`?[(NPmEQETS(NfV7l\usp@sd,Y\,WZ`PQ,qyrO2
&p@s@x^Nb[O!d`f`bd
c@S[(vh\[[(v7QRvNPSk[kd,Yoa
e7QZgQ_Ve7Q_V[sG\,`fT7Qd,O;\R&FG
WZ\,V/{QU
WZ\,`PWZT`P\[kQ_e/NfVgd`PoV7dm~NP\,`[(NPmEQ,q
|vQS(QZ[
d,OU[kYT7Q4T\,V[(NihQ_e&dd`bQ_\,VOd,YmyT`P\QNPSdV7Q4d,OU[(vQS([(\,Ve\Ye&7@*
WXdmEgh`PQZ[kQ&SkQZ[(S_q+?dWXdVhWZ`PTe7Q& sp@sO!Ydmz\,VsZ
a\gghY(d_7NPmR\[(NbdV$d,O[(v7QsvNPS([kd,Y(oaeQZgQ_Vhe7Q_V[
ml

q

n

_



(

x4y

DY


fiC

vh73Qh{.L8$>${3


\,`PT7QRgYd,{h`bQ_mux?c2QTSkQ\3[kY\,VSkOd,YmR\[(NPdV1d,O|NPVS([(\,VWXQ_Sd,O*Y

.

(././.{q

[kds2SUS(NfmRNP`P\Y[kd[(v7Q

x4y

gY(dd,O+d,O+|vQZd,Y(Q_m7qP ~NfV1TVhev7Q_V7wx
|vQySkQZ[CY

x4y

WZ\,V{QNPV[kQZYgY(QZ[kQ_e\,S\[c&daLgh`P\_o,QZYUl\,mEQ,}9`P\
o,QZYR$SkQZ[(S[(vQyQX7NPSk[kQ_V[(NP\,`P`Po

ESkQZ[(S@[(v7QUTVhNb,QZYS(\,`P`Po~Th\,V[(NijQ_eG\YNf\{h`bQ_SZq2`P\_o,QZYyc@NPVS*NPO
[(v7Q\,`b[kQZYV\[(NfV7lyWv7dNPWXQ_S*e7QZ[kQZYmRNPV7Q\yS\[(NPSkOoNPVl$\,S(S(NPlVmEQ_V[2[kd[(v7QO!d,Ym$T`f\px\,Vegh`f\_o,QZYm$
c@NPVS
NbO^[(vQe7QZ[kQZYmRNPVQ_e\,SS(NblVmEQ_V[*NPSsV7d,[|S(\[(NPS(O!opNPV7l7q;Od,YmyT`P\NPSsNPV
NbO+\,VedV`boNbO^gh`P\
o,QZYU
v\,S\Rc@NPVhVNPV7lESk[kY\[kQZl,o,q|vNPS|mRQ_\,VS@gj`P\_o,QZYyUv\,S\RY(Q_S(gdVhSkQ[kdQZ,QZYo/Wv7dNPWXQyd,O)gh`P\
o,QZY[
xSkd
[(v\[@NfV[(v7QQ_Ve[(v7QUO!d,YmyT`P\yc@Nf`P`{QS\[(NPStihQ_e>q
|vQ,QZYSNbdVcv7QZY(Qgh`P\_o,QZY;
mR\w,Q_SY\,Vedm Wv7dNPWXQ_SE\,Vegh`P\
o,QZYSl,d\,`sNPS$[kdc@NPVc@Nb[(v
(
gY(d,{j\{hNP`PNb[o
WXd,YY(Q_SkgdVeS2[kd
L p
$ , ! & pxhc@vNPWvNPS&\,`PSkd&7@*WXdma
T\,V[(NbihQ_eG\YNP\{h`bQ_SZx\,Vheugh`P\
o,QZY

BD x4y

}&

w

gh`bQZ[kQ,q)|v7Q*NPVhSk[(\,VWXQ_S+d,O

w

x4y

\Y(QsOd,Ym$Th`P\,S+c@vNPWv$\Y(Q*T\,V[(NihQ_e\,`b[kQZYV\[(NfV7l`boc@Nb[(v$QX7NPSk[kQ_V[(NP\,`

x4y

T\,V[(NbihQZYS11\,Ve4Y\,VedmT\,V[(NbihQZYSY?qu|v7QRmEQ_\,VNfV7l/d,Os[(v7Q~Y\,Ve7dm
\,V\,SS(NblVmEQ_V[R[kd[(v7Q/Y(Q_SkgQ_WX[(Nb,QG\YNP\{h`bQ/NPS~Wv7dSkQ_V
Sk[kdpWv\,S([(NPW&dd`PQ_\,V/Od,Ym$Th`P\


NPS*NPV
w

{



{

(

-

{

{

4

[(v7QZY(QQX7NPSk[(S" (

Od,Y|Y\,Vhe7dm$ -

VY\,Ve7dm

rO1v\,S

QXpNPS([(SI 4

O!d,Y|Y\,Ve7dm$ *

T\,V[(NbihQZYSZx*[(v7Q_V

[(v7QSk[kY\[kQZl,o

OY(dm


.eI_



q


*

z

NbO+\,VhedV`boNbO

x4y

T\,V[(NihQZYNPS[(v\[

TVNbOd,YmR`Po\[RY\,Vhe7dm

_V/T (c ) ( IDI L&NPS*[kYT7Qf

qZqZq

z





&

-

( q


(

d,Ogh`P\
o,QZYe7QZ[kQZYm~NPV7Q_S\SkQZ[d,O



_V/T (c ) ( IDI Qp
*NPSs[kYT7Qf \,S(S(NPlVmEQ_V[(S|S(\[(NPSkOo q
7Ydm
[(v7QEgY(dd,O9d,O2r
&p@s{o4pv\,mRNPYEt_,/Nb[O!d`f`bd
c@S[(v\[UO!d,YQZ,QZY(o&7@*
SkQZ[ \,VeuWXdVSk[(\,V[
[(v7QZYQNPS*\gd`boVdmRNP\,`aL[(NPmRQ@Y(Q_eThWX[(NbdV 3OY(dm z[kd

S(TWv[(v\[
Od,Y|QZ,QZY(ouNPVSk[(\,VhWXQ \,VeOd,YmyT`P\ ; >





E
(
[
7
v

Q




P
`
b
`


@
c
P
N
7
V
E
l
7
v


f
`

e
Z

q
(
W rO Z $x[(v7Q_V ( Od,Y|Y\,Vedm - _V/T vc ( II Q7 &NfS*[kYT7Qf ztm xh\,Ve
W NPO Z Ux7[(vQ_V ( O!d,Y@Y\,Ve7dm - _V/T (c ( I*I L7 sNPSs[kYTQf+ q
\,S(S(NPlVmEQ_V[(S[kdKz?qU@v7Q$[kQZYm

d,O)[(v7Q_SkQ

|



z





\&

( mEQ_\,VS[(v\[mEd,Y(Q[(v\,V

P






-{

{



{



z





o{

{

{

B4

$



z

'H





z



x4y

w

z













]

&

]

|vNfS|mEQ_\,VS@[(v\[gj`P\_o,QZYyQ_Nb[(v7QZYv\,S\~Sk[kY\[kQZl,oTVe7QZY|cvNPWv3S(v7Qc@NfVS*c@Nb[(v/,QZY(o/vNblv3gY(d,{7a
\{hNP`fNb[o,xd,Y[(v7QygY(d,{h\{hNf`PNb[od,OcNPVVNPVlTVe7QZY\,VoSk[kY\[kQZl,oNPS,QZY(oSmR\,`P`q4QRS(v7dcvd
c[kd
[kY\,VS(O!d,Ym

\uS([kdWv\,Sk[(NPWE&dd`bQ_\,V4Od,Ym$Th`P\}NfV[kd/\uscNb[(v\u`P\Y(l,QRvNPS([kd,Y(oaeQZgQ_Vhe7Q_V[

[yc@NPVSZq

\,`PT7QNbO?gh`P\_o,QZYyv\,S@\cNPVVNPVlySk[kY\[kQZl,o,xj\,Ve/\~m$TWv/S(mR\,`f`bQZY*G\,`fT7QNbOgj`P\_o,QZY

+d,Y\,VNPVSk[(\,VWXQ
xc@vQZY(Q NPS/\Od,YmyT`P\c@NP[(vG\YNf\{h`bQ_S

(
- d,O
I( *I qhx@c2QWXdVSk[kYThWX[\n&-G |R\,SO!d`P`Pd
c@SZqz|v7Q3Yd`bQ3d,Ogh`f\_o,QZYNPS[(\w,Q_V {o
[(v7QEWXdV[kY(d`P`bQZYd,O9[(vQyghY(dWXQ_SSZqU
S([kY\[kQZl,od,O2gh`P\
o,QZYRyeQZ[kQZYmRNPV7Q_S\gd`PNPWXoud,O2[(v7QEWXdV[kY(d`f`bQZY_x
\,VeNPWXQ~,QZYS(\pq/9`f\_o,QZY/
\ggQ_\YS$\,SUgYd,{h\{hNP`PNfSk[(NPW$[kY\,VS(Nb[(NPdVSNPV4[(vQ~gY(dpWXQ_S(SZq|v7Q~gY(dpWXQ_S(S
G |&v\,S&[(v7Y(QZQSk[(\l,Q_S_q9|v7QihYS([&Sk[(\l,Q$WXdVS(NPSk[(Ssd,O?dV7QSk[kQZg^q9@v7QghY(dWXQ_SS*Wv7ddSkQ_S|TVhNbO!d,YmR`bo

\[yY\,Ve7dm
dV7Qd,O|[(v7Q~\YNP\{j`bQ_S$\,Vhe\,Vn\,S(S(NblVhmEQ_V[$[kd4Nb[Zx;\,VeS([kd,Y(Q_Sy[(v7Q~\YNP\{h`PQ\,Ve[(v7Q
\,S(S(NPlVmEQ_V[Zq2d,Y(QOd,YmR\,`P`bo,x7OY(dm[(vQUNPVNb[(Nf\,`S([(\[kQsK / xhdV7Qd,O)[(v7QUSk[(\[kQ_S ?
;x
e
.

_



P
N
$

(

_
Q
,
\

W
7
v
_
Q
^
e
9
x
_
Q
,
\

W

v
@
c
b
N
(
[

v

g
(

,

h
{

\
h
{
f
N
P
`
b
N

[



p



G
?



n
q

r

[
P
N


7
V
,


[
,

h
{
k

Z
Q


G


\
h
{
P
`

Q
@
c
h
v
P
N

W

v
G


\
YNP\{h`bQ
Z
\,S(S(NPlVmEQ_V[|c&\,SSk[kd,YQ_e/{ou[(v7QUgYdWXQ_S(S_qsd
c&QZ,QZY_xc@v7Q_VQZ,QZY[(v\[G\YNP\{h`bQU\ghgQ_\YS|`P\[kQZY_x[(v7Q


{

|{

{

{

z

x4y

w



f

f

{















gY(dpWXQ_S(SWv7Q_WwS[(v\[[(v7QNfVNb[(NP\,`P`Po4ipQ_e\,S(S(NPlVmEQ_V[~NPS~Wv7dSkQ_V

\l\,NPV>qrO[(v7Q/gd`PNPWXonlNb,Q_S\

~.pq|v7QZY(QNPS
;K ( x;d,Y`PQ_S(SUOd,YmR\,`f`bo,x;[(v7Q

eNQZY(Q_V[$\,S(SNblVmEQ_V[UeT7YNPV7lu[(v7QSkQ_WXdVeSk[(\l,Q,x;[(v7QgY(dpWXQ_S(S$vh\,`b[(Sc@NP[(v1Y(QZcs\Ye
\e7QZ[kQZYmRNfVNPSk[(NPWR[kY\,VS(Nb[(NPdV1[kd4\ijV\,`&Sk[(\[kQc@vNPWvc&QY(QZO!QZY[kd\,S



4XjSk[(\[kQ,qfirO2S(ThWv4\,V1NPVhWXdVS(NPSk[kQ_VhWXo/dWZWZTYSeT7YNfV7l~[(v7Q[(vNPYeSk[(\l,Q,x[(v7QEghY(dWXQ_SSv\,`b[(S

v


fi 38?>v{v8.^j

$33$3

l








/

9% f6







(





""
/

"




(


y}9|v7QihYSk[*Sk[(\l,QUd,OG |q

)NblT7YQ

f

X.\,Ve3Vd,[(NPWXQ_S@[(vh\[[(v7Q$gd`PNPWXo p, q|v7QZY(QUNfS@\e7QZ[kQZYmRNPVhNPSk[(NPW[kY\,VSNb[(NbdV/[kd\
S(NPVw~Sk[(\[kQc@vNfWvc2QYQZO!QZYs[kdR\,SJK x7d,Y|`bQ_S(SsOd,YmR\,`P`PoR\,Sps7Xj,/(/{Q_WZ\,TSkQ[(v7Qgh`P\
o,QZY
SkQ_V[2[(vQZY(QWZ\,VVd,[2Y(QXaLQ_V[kQZY*[(v7Ql\,mEQ`P\[kQZY_qfi$rOQZ,Q_V[(T\,`P`PoR[(v7Q@cv7d`bQ@Od,YmyT`P\NfS9gh\,SSkQ_e>xQ_NP[(v7QZY
Y(QZcs\Yed,YUY(QZc&\Yeiu
. NPSd,{[(\,NfV7Q_e4e7QZgQ_Ve7Q_V[dV4c@v7QZ[(vQZY[(v7QROd,Ym$Th`P\c&\,S$S(\[(NPStihQ_ed,Y$V7d,[Zq
|v7QihYS([ySk[(\l,Q/NfSyS(w,QZ[(Wv7Q_eNfVn)NblTY(Q
qrVn[(vNPSy\,Ve[(v7QOd`P`bdc@NPV7l3ihlT7Y(Q_SZxeh\,S(v7Q_e\Y(Y(dc@S
c@Nb[(v3Y(QZcs\Ye





Y(QZgYQ_SkQ_V[Y\,Vhe7dm

[kY\,VS(NP[(NbdVS\,`P`sd,O@Q_T\,`sgY(d,{j\{hNP`PNb[o,xNbY(Y(QZl\Ye`bQ_S(S$d,O[(vQ\,WX[(NPdVWv7dS(Q_Vjx

Skd`PNfe\YY(d
c@SY(QZgY(Q_SkQ_V[e7QZ[kQZYmRNfVNPSk[(NPW$[kY\,VSNb[(NbdVSWXd,Y(Y(Q_S(gdVheNPV7l[kdu[(v7QR\,WX[(NbdV/?YT7Qx+\,Ve

X.3\,`PSkQq

e7d,[k[kQ_e\Y(Y(d
cS*Y(QZgY(Q_S(Q_V[@eQZ[kQZYmRNPVNfSk[(NPW[kY\,VS(Nb[(NPdVS*WXd,Y(Y(Q_SkgdVehNPV7ly[kdR[(v7QU\,WX[(NbdV



|vQS(Q_WXdVeuSk[(\l,QSk[(\Y([(S@NPVQ_\,Wvud,O?[(v7QSk[(\[kQ_S~{ ^ \,Vev\,Ss4Sk[kQZgjSZx7eT7YNPVlUc@vNfWv\,V
\,S(S(NPlVmEQ_V[@[kd~[(vQU\YNP\{h`bQ_SP{ ( |{ |{ uNPS*ihQ_e>q*MQZ["
e7Q_V7d,[kQ$[(v7QUgj\Y([|d,O;[(v7Q$gY(dpWXQ_S(SZ

SkQ_WXdVeSk[(\l,QeT7YNfV7lc@vNPWv~Nb[2NPS9\,S(STmEQ_e[(v\[9\,`PT7Q*sNPS9\,S(SNblV7Q_e[kdU\YNP\{h`bQI{ q)rO^\UG\YNP\{h`bQ

I*I q



{



NPS?QXpNPS([kQ_V[(NP\,`f`boUT\,V[(NbihQ_e>x[(v7Q_Vy[(v7Q*\,S(S(NblVhmEQ_V[;NPS?[(v7Q*\,WX[(NbdVENPV

rO?\\YNP\{h`bQ*{





.eI_



Wv7dSkQ_VE{o[(v7Qsgd`PNPWXo,q

NPS&Y\,Vhe7dmR`boT\,V[(NihQ_e^x[(vQ_V[(v7Q\,S(S(NblVhmEQ_V[*NPS*Wv7dSkQ_VTVNbOd,YmR`boE\[|Y\,Ve7dm

{oE[(v7QghY(dWXQ_SSZxNfVe7QZgQ_Ve7Q_V[;d,O>[(v7Q\,WX[(NbdVd,O>[(v7Qgd`PNfWXo,q?rtV~[(vQSkQ_WXdVeSk[(\l,Q,x7Nb[&NPS2d,{hSkQZY(\{h`bQ
c@vNfWv\,S(S(NPlVmEQ_V[ycs\,SRmR\,eQu[kd1QZ,QZY(onG\YNf\{h`bQ,qnrO[(v7QuG\YNP\{h`bQu\,S(S(NPlVmEQ_V[yOY(dm

[(vQihYSk[

Sk[(\l,Qe7dQ_SsV7d,[2WXdNPVhWZNPe7Q@cNb[(v~[(vQ\,S(SNblVmEQ_V[2mR\,eQ[kdy[(v\[sG\YNP\{h`bQ@ehT7YNPV7lU[(v7QSkQ_WXdVheS([(\l,Q,x

*
V4{Q/[(v7QVTm${QZYRd,OY\,Vedm

.pq9MQZ[


[(v7Q[kY\ tQ_WX[kd,Y(odV3c@vNPWv[(v\[@v\ggQ_VS&Q_VehS|NPV[(v7Qe7Q_\,e/Q_Ve/Sk[(\[kQ$[(v\[|opNbQ_`PeS&Y(QZcs\Ye

T\,V[(NbihQZYSEd,O1q9,QZY(oSk[kY\[kQZl,od,Ogh`f\_o,QZY3e7QZ[kQZYm~NPV7Q_S

\,S(S(NPlVmEQ_V[(SZq9,QZY(o3\,S(S(NPlVmEQ_V[yo{ (





Od,Ym

(

IDI

|{

Qp@NPVeTWXQ_SG[kY\*tQ_WX[kd,YNPQ_SZ}|vh\_,Q[(v7Q







K / f DI c ( ( f"I*IDc f"I*IDc q
Lfif
Od,Y
(ILIvIk?+[(v\[9gh\,S(SSk[(\l,Q[c@Nb[(v7dT[;Y(Q_\,WvNfV7l[(v7Q@e7Q_\,eRQ_VeRSk[(\[kQ\,VeRWXdV[(NPVTQ*c@Nb[(v
[(v7QUihYSk[@S([(\[kQUd,O;[(v7Q$[(vNbYe/S([(\l,Q,x\,Ve31[(v\[e7Q_\,epaLQ_VeNPV/Sk[(\l,Q
q||v7QU`f\[k[kQZY1[kY\*t Q_WX[kd,YNPQ_S
[(v\[@edRV7d,[|Y(Q_\,Wv3Sk[(\l,QE
' \Y(Qd,O)[(v7QOd,Ym
K / P IDc ( ( f"IIDc _I f"ILK
Od,Y`
(ILIvk
?qyWZWXd,YeNPVl`bo,x+
G @v\,SX\ U[kY\*t Q_WX[kd,YNPQ_S[(v\[Y(Q_\,Wv4[(v7QE[(vNPYeS([(\l,Q,q
|v7QS([kYTWX[(T7Y(Qd,O)Sk[(\l,QE
NPS*Skw,QZ[(Wv7Q_e3Od,Y 4 E. NPV/)NblT7YQ_' q
|vQ[(vNPYe S([(\l,QWv7Q_WwS/c@v7QZ[(v7QZY zNPSS(\[(NPStihQ_e {o[(v\[[kY\*k
Q_WX[kd,Y(oS3\,S(S(NPlVmEQ_V[Zq|v7Q
|{



|{



{



{

{





{

f

{





=^



P{

z

gY(dpWXQ_S(S?gh\,S(SkQ_S)SkQ_T7Q_V[(NP\,`P`bo[(v7YdT7lvU[(vQ9c@v7d`PQ9Od,Ym$Th`P\@Wv7Q_W(wpNPV7lQ_\,WvE`PNP[kQZY\,`NPVUQ_\,WvEWZ`P\,ThSkQ9Od,Y




fi

C

vh73Qh{.L8$>${3



9%!
6










/



/






9%!
6C/



(



(


(



l

!



9!%!
6H(

y'}9|v7QSkQ_WXdVhe3Sk[(\l,Q$d,OG |} S4 /

)NblT7YQ

(























/




/









/






f

\,V\,S(SNblVmEQ_V[^[kd|[(v7Q;YQ_SkgQ_WX[(Nb,Q\YNP\{h`bQ,q 4

O!d,Y@[(v7QUT\,V[(NbihQZY*gY(QXi{ (

\

|v7Q;WZ\,SkQ9d,O7\



{

-

{

4

* q

{

fi

p(, sp Gx,NqQ,qbxdV7Q[(v\[?\,VSkc&QZYS
eT7YNPV7l[(v7Q|[(vNPYeESk[(\l,Q@cNb[(vR\,V7d,[(v7QZY&\,S(S(NblVhmEQ_V[9[(v\,VEipQ_eReTYNPV7l[(v7Q@S(Q_WXdVe~Sk[(\l,Q,x7myTSk[{Q
tghTVhNPS(v7Q_epq+v7Q_V7QZ,QZYs[(v7QG\YNf\{h`bQWXd,YY(Q_SkgdVeNPVl[kd$[(vQNPVhNb[(NP\,`xS([kd,Y(Q_e\,S(S(NblVmRQ_V[s\ggQ_\YS
[(v7QgYdWXQ_S(S*Wv7Q_W(wpS|[(vh\[|[(v7QSk[kd,Y(Q_e3\,S(S(NblVmRQ_V[*NPS*WXdVSNPSk[kQ_V[*c@Nb[(v[(v7QWZT7YY(Q_V[*\,S(SNblVmEQ_V[Zq;rO

XRd,Y@Y(QZcs\YeX.NPS*d,{[(\,NfV7Q_e>x

QZ,Q_V[(T\,`P`bo[(v7Q$c@v7d`bQOd,YmyT`P\Egh\,SSkQ_S|[(v7Q$Wv7Q_WwNPVl7xjQ_Nb[(vQZY@Y(QZcs\Ye

e7QZgQ_VeNfV7ldV1c@v7QZ[(vQZY[(v7QROd,YmyT`P\ucs\,SUS(\[(NfStihQ_e\,Vhe4[(v7QRgd`PNPWXocs\,SUV7d,[yWv7Q_\[(NPVl7x?d,YyV7d,[Zq
M^QZ[
~






{Qu[(v\[NPVhSk[(\,VWXQ/d,O[(v7Q/[(vhNbYeSk[(\l,Qc@v7QZY(Q3NP[RNPSRWvQ_W(w,Q_e

c@v7QZ[(v7QZY0{


\,`bcs\_opSl,QZ[(S

\,S(S(NPlVmEQ_V[
qr[RNPSQ_S(S(Q_V[(NP\,`f`bo[(v7QS(\,mEQ/e7QZ[kQZYm~NPVNPSk[(NfW~gYdWXQ_S(S~\,SRe7QXijV7Q_eNfV[(v7QugY(dd,Od,O
|v7QZd,YQ_m7qPx{hT7[*cv7Q_V7QZ,QZY@\,V/\,SS(NblVmEQ_V[*[kd~\E`PNP[kQZY\,`>WXdV[(\,NfVNPV7lD{

;K

V7d,[l,QZ[\,SS(NblVmEQ_V[ [(v7Q$ghY(dWXQ_SS|l,dQ_S[kdSk[(\[kQ

K



NfS*\,Skw,Q_e/Od,Y_xNbO{


e7dQ_S

=|kq[(v7QZY(c@NfSkQ,x[(v7QygY(dpWXQ_S(Sl,dQ_S[kdSk[(\[kQ

bNPSd,{[(\,NfV7Q_e>]

=q/rO*[(vQ\,S(S(NPlVmEQ_V[yWv7dSkQ_V{o1[(vQ~gd`PNPWXo4S(\[(NPSkihQ_e1[(v7QOd,Ym$Th`P\px?YQZc&\Ye

m.pq

d,[(v7QZY(cNPSkQ[(v7QY(QZcs\Ye/NfS

9G |UNPSySkw,QZ[(WvQ_eNPVn+NPlT7Y(Q~7q4d,[kQu[(v\[y[(v7Que\,S(v7Q_en\Y(Y(dc@S

|vQd,QZY\,`P`sSk[kYTWX[(TY(Qd,O
Y(QZgYQ_SkQ_V[Y\,Vhe7dm

f

[kY\,VS(NP[(NbdVS\,`P`sd,O@Q_T\,`sgY(d,{j\{hNP`PNb[o,xNbY(Y(QZl\Ye`bQ_S(S$d,O[(vQ\,WX[(NPdVWv7dS(Q_Vjx

Skd`PNfe\Y(Yd
c@SyY(QZgYQ_SkQ_V[Ee7QZ[kQZYmRNPVNPS([(NPWE[kY\,VSNb[(NbdVSyWXd,Y(Y(Q_SkgdVehNPV7l3[kd[(v7Qu\,WX[(NbdV?YT7Q,xed,[k[kQ_e
\Y(Y(dc@SY(QZgY(Q_SkQ_V[e7QZ[kQZYmRNPVhNPSk[(NPW[kY\,VhS(Nb[(NbdVS@WXd,Y(Y(Q_SkgdVeNfV7lR[kd[(v7Q$\,WX[(NbdV\,`fSkQ,x\,Vhee7d,[taeh\,S(v
\Y(Y(dc@S*Y(QZghY(Q_SkQ_V[|[kY\,VS(NP[(NbdVSs[(v\[@\YQO!d,YWXQ_e^xc@v\[kQZ,QZY[(v7QUWvdNPWXQd,O)\,WX[(NbdV>q

c@Nb[(v$G\YNP\{h`bQ_S
\,Ves|V Y\,Ve7dmTh\,V[(NijQZYSZx,\,Ve
Z
( - I*I q
WXdVS(Nfe7QZYG |q;2Q_WZ\,ThSkQ@[(v7Q@[(vNbYeESk[(\l,QNPSe7QZ[kQZYmRNPVNPS([(NPWx,[(v7Q|gYdWXQ_S(S9v\,SG` &[kY\*tQ_WX[kd,YNPQ_SZx
*
d,O)c@vhNPWvuYQ_\,WvSk[(\l,Q
' qsd
cUx\,S(STmEQ[(v\[1
NPS\Rgd`PNPWXo,xcvNPWv3NPS , ! Zh|c@NP[(vu[(v7Q
NLQJ"Uty"v"tQ"S/&`"v*"}L(_"v/SQ}L"tQ"S*"L0D"[
+v""v/Q9*""*"Q Q(J"vD"6*0"+Q""v
&dVhS(NPe7QZY)\@Od,YmyT`P\-

w

x4y

{

f

|{

|{





4



fi 38?>v{v8.^j



=








b








O^# O\


#



$33$3



^^# |








^^#
















^^#


fiff

ff


G

)NblTY(Q7}9Skw,QZ[(Wv3d,O f|q

d,{hSkQZYG\[(NbdVhS)O!Y(dm[(v7Q*uSk[kQZghSeTYNPV7l[(v7Q|SkQ_WXdVe~Sk[(\l,Q,xNqQ,qbxc@v7Q_V7QZ,QZYNP[NPSk\,Skw,Q_e[kdUlNb,Q|\,V
\,S(S(NPlVmEQ_V[@[kd\~\YNP\{h`PQeT7YNPV7lE[(v7Qy[(vNbYe3Sk[(\l,Qx^Nb[edQ_SSkd\,WZWXd,YeNPV7l[kd[(v7QUd,{hS(QZY(G\[(NPdVS
eT7YNPV7l[(v7Q~SkQ_WXdVeSk[(\l,Q\,Vhe4[(v7QZY(QZOd,Y(Q~Nb[\,SS(NblVS[(vQRS(\,mEQR\,`PT7QE[kdQZ,QZY(o4\ggQ_\Y\,VWXQRd,O*\

q&Q_WZ\,TS(Q

}

d,O[(v7Q[kY\*t
Q_WX[kd,YNPQ_Ss[(v\[
'WXd,Y(Y(Q_S(gdVhe/[kd\S(\[(NfSkO!opNPV7l\,S(S(NblVmRQ_V[\,Ve3\Y(QWXdV[(NPVTQ_eTVhe7QZY@[(vNfS|gd`PNPWXo
[kdSk[(\[kQ;K
c@v7QZY(Q$[(v7QZouY(Q_WXQ_Nb,QY(QZcs\YejqQ_VWXQ,x[(v7QyvhNPSk[kd,Y(oae7QZgQ_Ve7Q_V[|\,`PT7Qd,OG |@NPS
( tm *
~ q

7d,Y

x2\,VNPVhWXdVS(NPSk[kQ_V[/d,Y 7
(, fi gd`PNfWXo1dV
G |ymR\_ov\
,Q3gQZY(Od,YmR\,VWXQ
Z

l,Y(Q_\[kQZY[(vh\,Vn9
q|v7QZY(QZOd,Y(Q,x>c&QEv\_,QE[kdugQZY(Od,Ym\ghY(d,{h\{hNP`fNb[ou\,mEgh`fNijWZ\[(NbdV\,SNPV[(v7Q
gY(dd,Od,O|v7QZd,Y(Q_m7qfis[(v\[?ghTVNPSv7Q_S>Wv7Q_\[(NfV7l7q?4Q&WXdVSk[kYThWX[G~
|O!Y(dm WXd,ghNbQ_SG I*IUG
d,O0
G @*[(v7Q|QX7\,WX[2\,`PT7Q*d,O+ cNP`P`{Q|e7QZ[kQZYmRNPVQ_eR`P\[kQZYxS(TWvR[(v\[9[(v7QNPVNb[(NP\,`pSk[(\[kQ(d,O0Gp |
NPS[(v7QRNfVNb[(NP\,`+Sk[(\[kQ~d,O<G ( x\,Ve[(v7Q~NfVNb[(NP\,`+Sk[(\[kQRd,O<G ( NPS[(vQijV\,`;Sk[(\[kQOK
~d,O<G qErO&NPV
SkdmEQUY(QZgQZ[(Nb[(NbdVu\R[kY\*t
Q_WX[kd,Y(o/NfS*WZ\,T7lv[Wv7Q_\[(NfV7l7xh[(v7Q_V3Nb[@NPS*SkQ_V[@[kd~[(v7Q3tgQ_V\,`b[o{d
pR\,Vhe/NPS
V7d,[9WXdV[(NPVT7Q_eRNPVR[(v7Q|Od`P`bd
cNPV7lY(QZgQZ[(Nb[(NbdVS_q?Q_VWXQ,xNP[WZ\,VV7d,[2WXd`f`bQ_WX[9\,VomRd,Y(Q|Y(QZcs\YeSZq)d,Y(Q
Od,YmR\,`P`bo,x7[(vQSk[(\[kQ_SK
;d,O)\,`f`[(v7QyG S|\YQUNPe7Q_V[(NihQ_eu\,S|\~TVNPT7QS(NPV7wSk[(\[kQUd,OG~
|q

rO
)
x
(
[
7
v
_
Q

V
P
N

V
_
Q
,
\

W

v
(





h
V
e


,



(

Z
Q

g
Z
Q
(
[
b
N
(
[
b
N


j
V


)
x
X
Q
p


g
_
Q
X
W
k
[
_
Q

e


Z
Q
&
c

\


h
e


[




WZ\,V{Q
Z

WXd`P`bQ_WX[kQ_e^xh\,Ve/v7Q_VhWXQ[(v7Q\,`PT7Qd,OGp
|sNPS q
&dVhS(NPe7QZY@\~O!d,Ym$T`f\ Z
q*|v7Q_V/\V7dVpaWv7Q_\[(NPV7lgd`fNPWXoOd,Y[G
|*v\,SgQZY(Od,YmR\,VWXQ

`bQ_S(Ss[(vh\,Vy
q&*v7Q_\[(NPV7lgd`PNPWZNbQ_S&mR\
ovh\_,Q{QZ[k[kQZY|gQZY(Od,YmR\,VWXQ_SZq;4Q$WZ`P\,NPm[(v\[|Od,Y|\,`P`+
x
[(v7Q|\,`PT7Q*d,O0G~
@)NPS\[&mEdSk[< G ;q;|vQ*gY(dd,ONfS;\,V~NPVehTWX[(NbdVdV q2&dVhS(NPe7QZY}G ( |x
c@vNfWvv\,S)[(v7Q|S(\,mRQ*G\,`PTQs\,S
G |q;Q_VWXQ,x[(v7Q*\,`PT7Q&d,O1G ( |?NPS;\[mRdSk[|q;S;\,VENPVheTWX[(Nb,Q
vogd,[(v7Q_S(NfSZx`PQZ[&TSs\,S(STmEQ[(v\[Gp
|2v\,S&G\,`fT7Q\[*mEdS([`Q G ;q;rV[(v7QNPVheTWX[(Nb,QSk[kQZg^x
c&Q$WXdVS(Nfe7QZY9G~
G ||O!d`P`Pd
c&Q_e/{oG |q@S(S(TmEQU[(v\[\~gd`fNPWXo Wv7Q_\[(SdV
( @xNqQ,q
d,O[(v7Q $\,SS(NblVmEQ_V[(SZq7Y(dm[(v7Qyn[kY\*t
Q_WX[kd,YNbQ_S[(v\[WXd,Y(Y(Q_SkgdVe[kdu\,V\,SS(NblVmEQ_V[Zx>\[`bQ_\,Sk[
NPS|[kY\ggQ_euOd,Y@Wv7Q_\[(NfV7lTVhe7QZY|\RWvQ_\[(NPV7l~gd`PNfWXo,x\,Ve/\[mRdSk[|
m~\_oud,{[(\,NPV/Y(QZc&\YeX q
|v7Q_V[(vQEY(QZc&\Ye4d,{[(\,NPV7Q_eNPV[(v7QihYS([YdTVe4NPS\[UmRdSk[y
- + - (10 x?\,Ve[(vQEY(QZc&\YeS
\YNP\{h`bQNPV

~



Y(Q_\,WvS([(\l,Q

Z

]

x7\UOY\,WX[(NbdVd,OmRd,Y(Q[(vh\,V

x4y

w

V^

f

]

&



w

]

x4y

f

]

f

f

f

=^



=f|

"

w

f

x4y

]

&

f

0

w

]

*&

x4y

f

]

]

f

f

f

f

]

f



f

f





f



]

U>>





fiC

vh73Qh{.L8$>${3


- -


d,{[(\,NPVQ_eNPV/[(v7Q$Od`P`bdc@NPV7l~Y(dTVeS@\Y(QymyT`b[(NPgh`PNbQ_e{o

*

- -


x{Q_WZ\,ThSkQ$\O!Y\,WX[(NbdV3d,O

d,O

[(v7Q[kY\ kQ_WX[kd,YNbQ_S@\Y(QSkQ_V[*[kdE[(v7QgQ_V\,`b[o{d_qS(NfV7l[(v7QNPVeTWX[(NPdVvogd,[(v7Q_SNPSZxpc2Qd,{h[(\,NPV[(v7Q

G ( |sThVe7QZYm O!d,Y\,V/\Y({hNb[kY\Y(oq


j<
*
G* _\,`LG7 |k



j<

*
G* rsv wG


*
wG s*G

*
wG

Od`P`bd
cNPV7lET7ggQZYs{dTVeO!d,Y[(v7QgQZY(Od,YmR\,VWXQd,O

G

7Z! 7

QIU

( f|






r
r




]





f





]















]





f



]

]









]





Z

|vNfSWXdmEgj`bQZ[kQ_S[(v7QENPVeTWX[(NPdV3Sk[kQZg^qQ_VWXQ,x^c&Q$ghY(d
,Q_e[(v\[Zx>Od,YT

G~ |&NfS|\[@mEdSk[s* wG;q

[(v7Q\,`PT7Qd,O

]

f

9,Q_V[(T\,`f`bo,xc2Qvh\_,Q1[kdih



[(v7QWXdVhSk[(\,V[(S_q4QWvddSkQ

lT\Y\,V[kQZQ_S[(v\[




w

]

]

x

\,VeO!d,YQZ,QZY(o

x4y

X

S(TWv[(v\[





.
&

.

mGtm F.e



sS(TWvu[(v\[





-
q
|vNPS
(

&

QX[Zxc&QUWv7ddS(Q

Gsktt ~ Q
[(v\[WXdVS(NPSk[(S/d,O
YQZgQZ[(NP[(NbdVSd,OG @\,S3e7Q_S(WXYNb{Q_e
]

]

G! |{Q4[(vQ1&
\{d,Q,q
NPS|`PNPVQ_\Y|NPV[(v7QUVTm${QZY
x;x7d,O)\YNP\{h`PQ_Ssd,O \,Veuv7Q_VWXQU`fNPV7Q_\Y|NPV[(v7Q$`bQ_V7l,[(vd,O x
WZ\,V3{Q[kY\,VhSkO!d,YmEQ_eu[kd
G ! |sNPVgd`bopV7dmRNf\,`j[(NfmEQ,q|v7Q\{d
,QUQ_Sk[(NPmR\[kQ_S@lT\Y\,V[kQZQU[(v\[
\,`PT7Qd,O"
G ! |2Od,Y Z

wG Ds [
|v7QYNPlv[tav\,VheSNPe7Qd,O[(vNfS*NPV7Q_T\,`PNb[o~NPSs\E`bd
c&QZY|{dTVeOd,Y@\,VZ
a\gghY(d_7NPmR\[(NbdVd,O+[(v7Q\,`PT7Q
d,O
G ! @2O!d,Y Z
qQ_VWXQ,x
x[(v7Q_V
G ! |&v\,S*\,`PT7Q xh\,Vhe
W NPO Z
x[(v7Q_V
G ! |&v\,S*\,`PT7Q
tG *s q
W NPO Z
Q_VWXQ,x*\4gd`boVdmRNP\,`aL[(NPmRQ_
a\ggY(d
pNfmR\[(NbdVd,O[(v7Q/\,`PT7Qud,O
G ! |S(vd
c@SEcv7QZ[(v7QZY NPSENPV
M^QZ[

f

f

&Q_WZ\,TSkQ

E



\

f

f

f





w

x4y

]



]



x4y

w

E

w

x4y

f

E

w

x4y

f

]

]

f

'

q

x4y
w

&dVhWZ`PTeNPVl7x?`bQZ[C{Q\,Vo1SkQZ[NPV&p@s@q?|v7QZYQRQXpNfSk[(S$\gd`bopV7dmRNP\,`aL[(NfmEQOTVhWX[(NbdV
c@vNfWvmR\ghSQZ,QZYoNPVhSk[(\,VWXQ{d,O[kd3\{dTVhe7Q_e3QZYY(d,YSk[kdpWv\,Sk[(NfWEO!d,Ym$T`f\};o{>



QZY(Y(d,Y

]

\,Ve4YQ_eTWXQ_ST[kd

G

\ggYd_7NPmR\[kQ|\,`PT7Q*d,O ! f


w

x4y

q?Y\,VSkOd,YmkNfV[kd/[(vQ&

xdV7Q@WZ\,V\,VSkc&QZYU


Z

[(NPmEQ,q@vNPS*S(v7dc@S*[(v\["NfS*NPVu|x\,Ve3WXdVSkQ_T7Q_V[(`Po

w

x4y$#



\,VheRv7Q_VWXQP{

&7@*|q

e2

n

Z

6

(

U>VU



c@Nb[(v

fqSNPV7lu[(v7Q

Z

_a

NPVEgd`bopV7dmRNP\,`

J. ~ \ p ! Lt7ZjXj$t93
kt R Zb Uj | &p@s

~vy~$yl
(X9k $!

w

G!









iZXk



fi 38?>v{v8.^j

>

%)CYj

$33$3



2g

s\,`PWZTh`P\[(NPV7l4[(v7Q3ijVNb[kQXavd,YNbZdVgQZY(Od,YmR\,VWXQ3d,OSk[(\[(NbdV\Y(ogd`PNfWZNbQ_SRNPSRNfV

\ghMTVev7Q_Vw

(././.x7c@vNPWvNPS2\S(T7{>WZ`P\,S(S;d,O[(v7QWZ`f\,S(S&d,O>gd`PoV7dm~NP\,`7[(NPmEQWXdmEghT[(\{h`bQ@OTVWX[(NPdVSZq)|v7Q

QZ[s\,`qbx

Sk[(\[(NbdVh\Y(oEgd`PNPWXoQXpNfSk[kQ_VWXQgY(d,{h`bQ_m

O!d,Ys2S2NfS2S(vd
c@V~[kd${Qav\Ye~{o~)\gh\,ehNPmRNb[kYNPdTR\,Ve

|S(NP[(S(Nbwp`PNPSt_,,xOY(dmc@vNPWvNb[sO!d`P`Pd
c@Ss[(v\[siVeNPV7ly\,Vud,g[(NPm~\,`S([(\[(NbdV\Y(ogd`PNPWXoROd,Y|2S
NPSs;avh\Ye>q9dENb[sNPSsV7d,[*S(T7Y(gYNPS(NPV7l[(vh\[s\ghgY(d_7NPmR\[(NfV7lU[(v7Qd,g[(NfmR\,`gd`fNPWXoRNPSs\,`PSkd;av\Ye>q;4Q
NPVWZ`fTe7Qy[(v7QROd`P`bd
cNPV7l[(v7QZd,Y(Q_m

{Q_WZ\,TS(QRNb[\,`P`bdc@STS[kd/ghY(Q_SkQ_V[dV7QR\,SkgQ_WX[d,Os[(v7QEY(Q_ehTWX[(NbdV



TSkQ_e3NPV[(v7QgY(dd,O+d,O+|vQZd,Y(Q_m

q RNfVuNPSkd`P\[(NbdV^q

8Sx~3y{ 1 pjkXP tk ujtD E fip R
3 ! |
k\
(



L, jp $Z

|vQghY(dd,O?S(v7d
cSs[(vNPS&O!d,Y*[(vQWZ\,S(Qd,O?V7dVpaVQZl\[(Nb,QY(QZcs\YeSZ]7[(v7QTVY(Q_Sk[kYNPWX[kQ_eWZ\,SkQOd`P`bdc@S

'qx[(vNPS$S(v7d
cSU[(v\[yijVheNPV7l/\m$Th`b[(Nbgh`PNfWZ\[(Nb,QR\ggY(d
pNfmR\[(NbdV

NPmRmRQ_eNP\[kQ_`bo,q3&o9Y(d,gdS(Nb[(NbdV

S(Wv7Q_mEQOd,Y|[(vNPS|gY(d,{h`bQ_mNPS@\,`PSkdR;avh\Ye>q

:y{~O~q7
~

&dVS(Nfe7QZY@[(v7Qy;aWXdmEgj`bQZ[kQ$ghY(d,{h`bQ_m'&)(*>}*lNb,Q_V\&dd`bQ_\,VWZNbYWZTNb[
#

o{>



\,VeNPV7ghT[P{xNPS
~

&dd`bQ_\,V4WZNbYWZTNP[\,VeNb[(SNPV7gjT7[@WZ\,V{QyS(QZQ_V4\,S\eNPY(Q_WX[kQ_e\,WXoWZ`PNfW$l,Y\ghv>q9\,Wv


.
_.$d,Y\Y(Q[(v7QNPVghT7[l\[kQ_SZx7cvNPWvY(QZgYQ_SkQ_V[s[(v7Q{hNb[(S&d,O^[(vQ@ipQ_eNPV7ghT[ /[kd[(v7Q
WZNbYWZThNb[Zq)rV7gjT7[2l\[kQ_S@v\_,QNPVhe7QZl,Y(QZQ_p
. q`f` l\[kQ_S@vh\_,QNPVeQZl,Y(QZQyx\,Vhe\,`f`\,Vheu
l\[kQ_S|v\
,QNPVe7QZl,YQZQ[
q|vQZY(QNfS2dVQl\[kQvh\_pNPV7lydT7[(e7QZl,Y(QZQ`p. q|vhNPS9l\[kQNfS&WZ\,`f`bQ_e[(v7QdT[kghT7[
l\[kQ,xhOY(dmcvNPWv[(vQY(Q_S(T`P[&d,O)[(v7QWXdmRghT7[(\[(NbdVud,O;WZNbYWZTNb[
dV/NfV7ghT7[ WZ\,V/{QYQ_\,e>q
7Ydm
S(ThWv\3WZNbYWZTNb[
x+\,V
G WZ\,V1{Q~WXdVS([kYTWX[kQ_en\,SOd`P`bd
cSZq&Q_WZ\,TS(Q~[(v7Q{h\,S(NPW

V7dpe7QUYQZgY(Q_SkQ_V[(S\l\[kQ,x^\,Ve3QZ,QZY(o3l\[kQEv\,SdV7Qyd,O;[(v7Q$[ogQ_Syxxx d,Yyq|v7Q

l\[kQ_S*d,O^[ogQ

{

~

{

~

NPe7Q_\yd,O?[(v7QWXdVSk[kYThWX[(NbdVuNPS&,QZY(oS(NPmRNP`f\Y2[kdEdV7QS(vd
c@VuNPV4)\gh\,eNfmRNb[kYNbdT|S(NP[(S(Nbwp`PNPSZx_,,x

c&Q`bQ_\
,QdT[9[kQ_WvhVNPWZ\,`e7QZ[(\,NP`PSZq;S2\,VNPVNP[(NP\,`7S(NPmEgj`PNbOoNPVl\,S(STmEg[(NbdV^x\,S(S(TmRQ@[(v\[&[(v7QWZNPYWZTNb[
v\,SV7dzl\[kQ_S_qU9\,Wvl\[kQyd,O2[(v7QWZNbYWZTNb[{Q_WXdmEQ_S\S([(\[kQEd,O[(v7QE@q@v7QyS([(\Y([Sk[(\[kQ

G

NPS@[(v7QUdT7[kgjT7[|l\[kQ,q@QZ,QZYSkQy\,`P`^Q_e7l,Q_Sd,O)[(v7QyWZNbYWZTNb[Zq*Q_VWXQ,x\R[kY\,VSNb[(NbdV3NfV
l\[kQENPV

`bQ_\,eS@O!Y(dm\

[kddV7Qyd,ONb[(S@ghY(Q_e7Q_WXQ_S(Skd,YSZq[kY\,VhS(Nb[(NbdV3O!Y(dm\,V4l\[kQeQZgQ_VheS|dV[(v7Q\,WX[(NbdV
~

i.Nb[(S`bQZO[gY(Q_e7Q_WXQ_S(S(d,YNPSY(Q_\,Wv7Q_e^x\,VedV4\,WX[(NbdVENb[(SYNblv[

\,VeNPSe7QZ[kQZYmRNPVNPS([(NPWqUV\,WX[(NbdV
gY(Q_eQ_WXQ_S(Skd,Y9NPSY(Q_\,Wv7Q_e^q)
dV4[(v7QR\,WX[(NPdV>qE

[kY\,VhS(Nb[(NbdVyOY(dm\,VRl\[kQNPS;gYd,{h\{hNP`PNfSk[(NPW\,Ve~e7dQ_S9V7d,[9e7QZgQ_Ve

NP[(v4gY(d,{h\{jNP`PNb[o

[(v7QYNblv[*ghY(Q_e7Q_WXQ_S(Skd,YNPSsY(Q_\,WvQ_e>q

-

(

[(v7QR`bQZO[gY(Q_e7Q_WXQ_S(S(d,YUNPSY(Q_\,Wv7Q_e>x?\,Vhe4c@Nb[(vgY(d,{j\{hNP`PNb[o

-

(

&dV[(NPVT7Q/WXdVS(Nfe7QZYNPV7l\1WZNbYWZTNb[c@Nb[(v7dT[l\[kQ_S_qrO\,VNfV7ghT7[l\[kQ/c@NP[(vG\,`PTQ1/NPS

.RNPS|YQ_\,Wv7Q_e>xV7d
Y(QZcs\YeRNPSl\,NPV7Q_e>xcvNPWv~mR\w,Q_S[(v7Q@[kd,[(\,`hQXpgQ_WX[kQ_eRY(QZcs\YeRV7d,[(NfWXQ_\{h`boES(mR\,`P`PQZY;[(v\,VEd,[(v7QZY(cNPSkQ,q
rO
>
x[(vQ_VE[(v7Q|\,WX[(NbdVS9WZ\,VE{QsWv7dSkQ_VR\[;[(vQl\[kQ_S2Skd[(v\[;QZ,QZY(o[kY\*kQ_WX[kd,Y(oY(Q_\,WvQ_S
Y(Q_\,Wv7Q_e>xj\`P\Y(l,Q$gdSNb[(Nb,QY(QZcs\Ye3NfS*l\,NPV7Q_e>xj\,Ve3NbO)\,VNPV7ghT7[sl\[kQyc@Nb[(vu\,`PT7Q
~

o{

\,VNPV7ghT7[*l\[kQyc@Nb[(v3G\,`fT7Q~]NbO)[(vNPS@WXdVheNb[(NbdV/vd`PeSZx[(vQ_VNb[m$TS([@{Q[(v\[

~

[(v7QU

o{>

q@Q_VWXQ,x

vh\,S|\E`P\Y(l,QgdS(NP[(Nb,QG\,`PTQNbO?\,Ve/dV`boNbO ~ o{
q
rO9[(v7QRWZNPYWZTNb[v\,Sl\[kQ_SZx+c2QRV7QZQ_e[kduYQ_mEQ_mU{QZY[(v7QEgj\YNb[od,O2[(vQRVTm${QZYd,O2

*

l\[kQ_SdVQ_\,Wv4[kY\ kQ_WX[kd,Y(o,qrO2[(v7Qgh\YNb[oNPSQZ,Q_V>xQZ,QZY(o[(vhNPV7ll,dQ_SU\,Se7Q_S(WXYNP{Q_e\{d
,Q,qyrO2[(v7Q
gh\YNP[oRNPS2dehe>x[(v7Q_V[(v7QY(d`bQd,O\,Vhe

.

l\[kQ_S|NfS9Skc@NP[(Wv7Q_e>xp\,Ve[(v7QY(d`bQ@d,O $\,Ve|l\[kQ_S



NPSS(c@Nb[(WvQ_e>q?rO\l\[kQNPSY(Q_\,Wv7Q_e^x[(v7Q*gj\YNb[oy{hNb[NfS jNbggQ_e>q?7d,Y9QZ,QZY(oEl\[kQNPV[(v7Q@WZNPYWZTNb[Zx
c&QV7dc[(\w,Q[c&dSk[(\[kQ_SZ}9dV7QOd,YsQZ,Q_V\,VedV7QOd,YsdeheRgh\YNP[o,qQ_VWXQ,xNbO,+zNPS2[(v7QS(QZ[&d,O
l\[kQ_SNPV
~

x7[(v7Q

] .eI_

vh\,S@Sk[(\[kQ_S-+





qs|v7QSk[(\[kQ$[kY\,VS(Nb[(NPdVOTVhWX[(NbdVuNPS

U>

fi

C

vh73Qh{.L8$>${3

.//
//
//

( x

//
-

//


NbO NPS\,Vl\[kQ\,Vheu
\,Ve

//

RZkKrIQIUgqI
K h h k

K
.d,YKNPS\,Vl\[kQ

h
h





,
x



x
,
\

V

e
K
P
N
*


g
YQ_e7Q_WXQ_S(Skd,YJgd,OK]


NbOKNPS\,Vl\[kQ\,Vheu

d,YKNPS\,Vl\[kQ
\,Ve
. x, h x\,VeK h NPS*gYQ_e7Q_WXQ_S(Skd,YJ.Rd,OK]
NbO
K NPS\,Vl\[kQ\,Vheu
d,YKNPS\,Vl\[kQ
\,Ve
. x,
!h x\,VeKhNPS*gYQ_e7Q_WXQ_S(Skd,YUd,OK]
NbOy
K NPS\nl\[kQ4\,VeBK h NfS\gY(Q_e7Q_WXQ_SSkd,Yd,OsK\,Ve
qh
u
?]
NbO+
K NPS&\,VNfV7ghT7[l\[kQd,Y&[(v7QS(NPV7wESk[(\[kQ,x\,VeKDh NPS9[(vQS(NPVw

x

//

0

//
-

//
//
//

( x

x

//
//
//
//
//1

x

Sk[(\[kQ,q

2


cc&Q|v\
,Q*[kdSkgQ_WZNbO!o[(vQ*Y(QZc&\YeOTVhWX[(NbdV>qrOj\,VENfV7ghT7[?l\[kQ*c@Nb[(vyG\,`fT7Q&NfS?Q_VhWXdTV[kQZYQ_e

*



dV1\[kY\ kQ_WX[kd,Y(oc@v7QZYQy[(vQEgh\YNb[o3d,Osl\[kQ_S$NPSQZ,Q_V>x[(vQ_VY(QZc&\Ye



( NPSd,{[(\,NfV7Q_e>x

NfS;[(v7Q@S(NPZQ@d,O>WZNbYWZTNP[ q;|v7Q|S(\,mRQ@Y(QZcs\Ye~NfS;d,{[(\,NPV7Q_eNbO\,V~NPV7gjT7[)l\[kQc@NP[(vEG\,`fT7QJ.
*
l\[kQ_S|NPS&dpee>q;`f`hd,[(v7QZY*[kY\*tQ_WX[kd,YNPQ_S
d,{[(\,NPV/Y(QZc&\Yep
.q
|vTSQ_\,Wv1[kY\*t
Q_WX[kd,YoY(Q_WXQ_NP,Q_SY(QZcs\YeQ_Nb[(v7QZY_.d,Yy 2 ( q$|v7QZY(Q\Y(QR\[mEdSk[y 2 [kY\Ga
c@v7QZYQ

~

~

NPS&Q_VWXdTV[kQZY(Q_edV\y[kY\ kQ_WX[kd,Y(ocv7QZY(Q[(v7Qgh\YNb[oRd,O?





kQ_WX[kd,YNbQ_SO!d,YQ_\,Wvgd`PNPWXo,q*rO\Rgd`PNfWXoWv7ddSkQ_S[(v7Q$WXd,Y(YQ_WX[\,`PT7Q_S@O!d,Y\,`P`[(v7Q$l\[kQ_SNfVud,Ye7QZY[kd
gY(d,Q~[(v\[
>
O|\,V1d,gh[(NPmR\,`
( q[(x)v7NPQZV4Y(cd,[(NPSkv7Q,QZxYy[(v7c2Q$d,YQXeSUgQ_NbO WX[kQ_e >G \,`fT7QUNPx)S[(\v7[Q_V1`bQ_\,[(vS([9Q~ QX p2g Q_ WX[kQ_( e( G 2\,`f T7BQR/d,3
gd`PNPWXoNPS9 2

`bd
c&QZY[(v\,V


(
(
2 xjNqQ,qbxh\[@mEdS([J 2 / q
|vTSZxNPO@\,V\ggY(d
pNfmR\[(NbdV\,`bl,d,YNb[(vhm
d,O@[(vQd,gh[(NPmR\,`
( NfS$ cd,NbY[(vNPV \,2V \,e(eNb[( Nb,qQ&WXodVNPVSkSk[(g\,VQ_WX[O[(Nb
gd`PNPWXo,x
NP[^c@NP`P`Q_Nb[(v7QZYlNb,Q9\*\,`PT7Q 2
dVd,O[(v7QdT[kghT7[Zx
dV7QWZ\,VNPmRmEQ_eNf\[kQ_`boRe7QZ[kQZYmRNfV7Q@c@vQZ[(v7QZY

q2|vThSZx\,Vo
a\,eehNb[(Nb,Q\ghgY(d_7NPmR\[(NPdV~Od,Y
~





~

o{



o{

















~





o{

[(vNPSsghY(d,{h`bQ_mmyTSk[*[(\w,Qy\[@`bQ_\,Sk[|gd`bopV7dmRNf\,`j[(NfmEQ,q

rtV+NPlT7Y(Q*x\,VQXp\,mEgj`bQ&WZNPYWZTNb[+\,Vey[(v7Q*4[kdc@vNfWvyNb[+NfS?[kY\,VSkOd,YmEQ_ey\Y(QslNb,Q_V>q;,QZY(o
l\[kQd,O*[(v7QWZNPYWZTNb[UNfS[kY\,VS(O!d,YmRQ_e[kd[c&dS([(\[kQ_Sd,O*[(v7Q|}+dV7QWXd,go1Od,YZXgj\YNb[o4d,O

*

l\[kQ_S2gh\,S(SkQ_e~dVE[(v\[9[kY\ tQ_WX[kd,Y(o3NfVeNPWZ\[kQ_e{oE\[(vNPVdT7[(`fNPV7Q*d,O[(v7Q@Sk[(\[kQ\,VeEdV7QWXd,go

*

Od,Yy_gh\YNb[od,Ol\[kQ_Sgh\,S(S(Q_e/dV/[(vh\[[kY\ kQ_WX[kd,Y(oNPVheNPWZ\[kQ_e/{ou\R[(vNfW(wudT7[(`PNfV7Qd,O;[(v7Q
Sk[(\[kQqS(d`PNPe3\YY(d
cNPVehNPWZ\[kQ_S@[(vQ$dT7[(WXdmRQyd,O2\,WX[(NbdVkWv7ddSkQE[(v7Q`bQZO[@gY(Q_eQ_WXQ_S(Skd,Ypx>\,Ve\
e\,S(vQ_ey\YY(d
cNPVheNPWZ\[kQ_S?[(v7QsdT7[(WXdmEQ*d,Oj\,WX[(NPdV4kWv7ddSkQ|[(v7Q&YNblv[)gY(Q_e7Q_WXQ_SSkd,Ypq;d,[k[kQ_eR\Y(Y(dc@S
NPVehNPWZ\[kQR\/[kY\,VhS(Nb[(NbdVc@NP[(v4gY(d,{h\{jNP`PNb[o

-

(

dV\,Vo4\,WX[(NbdV>q|v7QWZNbYWZTNb[NfV1)NblT7Y(Q~3v\,S\,`PT7Q

*

q||v7QUgd`fNPWXo,xhc@vhNPWv/Wv7ddSkQ_S[(v7QUYNPlv[|ghY(Q_e7Q_WXQ_S(Skd,YNPVu[(vQ$Sk[(\Y([(NfV7l~Sk[(\[kQ,xopNbQ_`PeS*[kY\ tQ_WX[kd,YNPQ_S
c@vNfWvu\,`P`Q_VeuNfVu\,V/NPV7ghT[2l\[kQ$c@Nb[(v\,`PT7QE\,Vec@vhNPWv[(v7QZYQZO!d,Y(Qd,{h[(\,NPVS*[(v7Qd,gh[(NPmR\,`\,`PT7Q,q


|vQZY(Qv\
,Q{QZQ_VSkQZ,QZY\,`Y(Q_WXQ_V[\gghY(d_7NPmR\[(NbdV\,`bl,d,YNb[(vm~S/NPV[kY(dehTWXQ_eOd,YSk[kYThWX[(T7Y(Q_e
2SZx^mR\,Vo/d,O9cvNPWv\Y(QES(T7Y,QZo,Q_eNfV&dT7[(Nf`PNbQZYQZ[\,`Lqbx)_,,qy3d,YQyYQ_WXQ_V[c&d,Y(w3NPVhWZ`PTe7Q_S

$d`P`bQZY\,Ve/)\Y(Yy(././.@\,Vev7Q_T7YNPS([(NPWSkQ_\YWvNPVu[(v7Q$Skgh\,WXQUd,O
(././. &\,VeO$ NPmQZ[s\,`qj(././. q2 vhNP`bQ|[(v7Q_S(Q\,`bl,d,YNP[(vmRS

\E\YNP\,V[|d,O)gd`PNPWXoNb[kQZY\[(NbdVu{o

ijVNP[kQ@WXdV[kYd`P`bQZYS9{oR\,VSkQ_V\,VeQ_V7l

\Y(Qd,O![kQ_VvhNblv`boQXQ_WX[(NP,Q/NPVYQ_eTWZNPV7l3[(v7Q\,S(omEgh[kd,[(NPWWXdmEgh`bQX7Nb[o1\,Vhen\,WX[(Th\,`2YTV1[(NPmRQ_S$d,O
gd`PNPWXo~WXdVhSk[kYTWX[(NbdV^x7[(v7QZo\,`f`YTVNPV[(NPmEQQXpgdV7Q_V[(Nf\,`>NPV[(v7QS(NbZQd,O+[(v7QUSk[kYTWX[(T7Y(Q_eY(QZgYQ_SkQ_Vpa
[(\[(NbdV>xd,YdQZYdVh`bo/c&Q_\wgQZY(Od,YmR\,VWXQlT\Y\,V[kQZQ_SZq4QRS(vd
c[(v\[QXpgdV7Q_V[(Nf\,`;\,SkomRg[kd,[(NPW

S(WvQ_mEQ[(v\[$ghY(dehTWXQ_Sy_
a\ggY(d
pNPm~\[(NbdVS$O!d,Y\,`P`
q7d,Y[(vNPSZxjc2QWXdVS(Nfe7QZY9SY(QZgY(Q_S(Q_V[kQ_e{oX|sSE&dT7[(NP`PNPQZY_xjQ_\Ye7Q_V^xd`PeS(_mRNPe7[Zx
WXdmEgh`PQXpNb[o1NPSyV7Q_WXQ_S(S(\Y(oO!d,Y\,Vo\,`bl,d,YNb[(vm

_,,qV[(NP`Vd
cxjc2Qv\_,Qe7Q_S(WXYNb{Q_eu[(v7Q$S([(\[kQy[kY\,VS(Nb[(NbdV/OTVhWX[(NbdV/Od,Y9S{o/\~OThVWX[(NbdV

U>

fi 38?>v{v8.^j

3
3 3 33 3 3
33 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 33 3 3 3 3 3
3 333333333
333333 3333
3
3
3
33333333
3
3
3
3
33333 333
33333
3
3
3
3
3
3
33333 33
3
3
3
3
3
3
3
3
3
3
3
33 3 3 3 3 3 3 3 3 3 3 3
3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
3
3
3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 33 33 3 3 3 3 3 3 3
3 3 3 3 3 3 3 3 3 3 3 3 33 3 3 3 3 3 3 3 3
3333333333333333
3 33 3
3 333 3
3333333333333333
33
3
3333333333333333
333
3 3 3 3 3 3 3 3 3 3 3 3 3333 3
33 3 3 3 3 3 3 3 33 3 3 3 3 3 3 3 3 3
33 3 3 3 3 3 3 3 3 3 3 3 3 3
3 3 3 3 3 3 3 3 33 3 3 3 3 3 3 3 3 3 33 3 3 3 3 3 3 3 3
3 3 3 33 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
3 33 3 3 3 3 3 3 3 3 3 3 3 3 3
3 3 3 3 3 3 3 3 3 3 3 3 3333 3 3
3
3
3
3
33333333
3
333
3
3333
333333333 3 3333333333333
333
33333333
3

.



.

5

$33$3

5
5

7
4

4

7

7

5

5

4

7



8

6


5
6
6



6

*

)NblT7Y(QU}WZNbYWZTNP[Zx[(v7QNb[&NfS9Y(Q_ehTWXQ_e~[kd7x\,Vhe~[(v7Q[kY\ kQ_WX[kd,YNbQ_S*\,WZWXd,YeNPV7ly[kdE\,Vd,gh[(NPmR\,`
gd`fNPWXo~Od,Y|[(v7Q

RZK\IUg
ILKhf[(v\[EWXdmEghT7[kQ_Sy[(v7QgY(d,{j\{hNP`PNb[od,O|Y(Q_\,WvhNPV7lSk[(\[kQKhOY(dm Sk[(\[kQKuTVhe7QZY$\,WX[(NbdVwgjq
4Q\,S(S(TmEQ_e3[(v\[@[(vQU[kY\,VSNb[(NbdVuOTVWX[(NbdV3c&\,SY(QZgYQ_SkQ_V[kQ_eQXpgh`PNPWZNb[(`Po,q29fq Rpk
Zy |sNfS\S(ThWZWZNPVWX[Y(QZgY(Q_S(Q_V[(\[(NbdVd,O&\,V4d,Ys@q2\,Wv4Sk[(\[kQEd,O2[(v7Q

SkopSk[kQ_m
NPSeQ_S(WXYNb{Q_e{o\u,Q_WX[kd,Y$d,O&\,`PT7Q_SWZ\,`f`bQ_e 2hZh qd,[kQR[(v\[$NbO9Q_\,Wv1d,Os~j
Sk[(\[kQ_SZqfi4WX[(NbdVhS\YQeQ_S(WXYNb{Q_e/{o/[(v7QQXQ_WX[[( v7T7QZoQ_Vv[(S\
,NPQ
[c&daL\,`PT7Q_e>x>[(v7Q_V[(v7QSkopSk[kQ_m
v\,S_
dV4Q_\,Wvj
T7Q_V[{omEQ_\,VhSd,O&[c&d3e\[(\/Sk[kYTWX[(T7Y(Q_SZqR@v7QZo\YQR\/e7QZgQ_Ve7Q_VWXol,Y\ghv4\,Ve\uSkQZ[
}9

d,O|OTVWX[(NbdVhSQ_VWXdpe7Q_e\,SWXdVeNb[(NbdVh\,`gY(d,{j\{hNP`PNb[o[(\{h`bQ_SZx;e7Q_WZNPSNbdV[kYQZQ_SZx\YNb[(vmRQZ[(NPW~e7Q_WZNfS(NbdV
eNP\l,Y\,mRSZx7d,Y@NPVuS(dmEQd,[(v7QZYe\[(\RSk[kYThWX[(T7Y(Q,q

|vQUe7QZgQ_Ve7Q_VWXol,Y\ghvNPS|\eNbY(Q_WX[kQ_e\,WXoWZ`PNfWl,Y\ghv3c@Nb[(v/Vde7Q_S|gh\Y([(Nb[(NbdVQ_e/NPV[kd~[c&dSkQZ[(S

3

( IDI (
|3

\,Ve

fih( IDI fih
3

|3

Rxs[(v7Q

q@v7QuihYS([RSkQZ[~d,OV7dpe7Q_SRYQZgY(Q_SkQ_V[(SR[(v7QSk[(\[kQ\[[(NPmEQ

mR q;|v7QQ_e7l,Q_S2\YQ@OY(dm[(v7Q@ihYSk[2SkQZ[9d,O^V7dp e7 Q_S9[kdU[(v7QSkQ_WXdVe\,SkoVhWv7Y(dVdTS
j T7Q_V[+\[;[(NfmEQR /&ThVe7QZY)\,WX[(NbdV
gEe7QZgQ_VeS9gY(d,{h\{jNP`PNPSk[(NfWZ\,`P`bodV[(v7Q@\,`PT7Q_S2d,O>[(v7QgY(Q_e7Q_WXQ_SSkd,YS2d,O rh NfVR[(vNPS9l,Y\ghv>q|d,[kQ[(v\[




SkQ_WXdVe\[9[(NfmEQ







d,Y)c@Nb[(vNfV[(v7Q*SkQ_WXdVeSkQZ[|SkopVWv7Y(dV7dTSq)@v7Q9\,`PT7Q&d,Oh[(v7Q



3

[(v7QSkopVWvY(dV7dTS2Q_e7l,Q_S*myTSk[&O!d,Ym\eNbYQ_WX[kQ_e>x\,WXopWZ`PNPWl,Y\ghvNPVd,Ye7QZYsOd,Ys[(v7Qe7QZgQ_Ve7Q_VWZNbQ_S9[kd

{QQZG\,`PTh\[kQ_e>qfiy|v7QgY(d,{j\{hNP`PNb[(NPQ_S9\Y(QSkgQ_`P`PQ_eRdT7[Zx7Od,Y*Q_\,Wv\,WX[(NbdV>xNPV[(v7QWXd,Y(Y(Q_S(gdVheNPV7lye\[(\

h

Xghq4QUc@NP`P`NPVehNPWZ\[kQ[(v\[$Sk[kdpWv\,S([(NPW
sOTVWX[(NbdV{o (q
` |sSZqrtV3O\,WX[Zx>[(v7Q$ijV\,`
|sWXdVhSk[kYTWX[kQ_e/NfV~[(v7QgYdd,O^d,O+|v7QZd,Y(Q_mq vh\,Ss,QZY(o`P\Yl,QYQZc&\YehS2cvNPWv\Y(QWXdmEgjT7[kQ_e
NPmEgj`PNPWZNb[(`bo]sNPV[(NPmEQ/gd`bopV7dmRNf\,`&NfV[(v7Q3S(NPZQ/d,O[(v7Q
|s$x9dV7Q3WZ\,V QXpgh`PNPWZNb[(`PoWXdmEghT7[kQ\,Vo
NPVehNbNfeT\,`^ d,O^[(vQY(QZcs\Ye>q@vNPS9vh\,S2[(vQQXQ_WX[*d,OmR\wpNPV7l$[(v7Qgd,[kQ_V[(NP\,`+Ghd,O^[(vQ[
|s
Sk[kYThWX[(T7Y(QOd,YP3

\,Ve



4QEmR\w,QRV7d\,S(S(ThmEg[(NbdVS\{dT7[[(vQySk[kYTWX[(T7Y(Qyd,OY(QZcs\YeSO!d,Y

[kdd~`P\Y(l,Q[kd~c|YNb[kQe7dc@Vuc@Nb[(vgd`bopV7dmRNf\,`P`boRmR\,Vo{hNb[(SZq

8Sx~3y{ 132
:y{~O~q7



u

pjkZb t`t ,Rt R, fi1,/ E,
:9(k XjL, , f 9@tptr
(



33

(

@v7Ql,Q_V7QZY\,`Sk[kY\[kQZl,oNPSSNPmRNP`P\Y[kdu[(v7QEgY(dd,Od,Os|v7QZd,Y(Q_m

L, jE7 Z

qPqy4QRlNb,QE\Y(Q_ehTWX[(NbdV

|s@a

OY(dm[(v7Q;aWXdmEgh`PQZ[kQS(TWZWZNPVWX[sWZNbYWZThNb[2\,`PT7QgY(d,{j`bQ_m[kdy[(vQghY(d,{h`bQ_mOd,Ys9S*NPV

Y(QZgYQ_SkQ_V[(\[(NPdV>q;VRNfVSk[(\,VWXQsd,O[(v7Q@S(TWZWZNfVWX[;WZNbYWZTNb[)\,`PT7QsgY(d,{j`bQ_mNPS;\&dd`PQ_\,V~WZNbYWZThNb[<;[(v\[
e7Q_S(WXYNb{Q_S&\~WZNbYWZTNb[
~



\,Vheu\,V/NPV7ghT[{?xNqQ,q=;e7Q_S(WXYNb{Q_S&\,V3NPVSk[(\,VWXQd,O)[(v7Q/ j\[(~WZNbYWZTNb[&\,`PT7Q

U>_

fiC

vh73Qh{.L8$>${3


gY(d,{j`bQ_muq)4QWZ\,Vu\,S(S(TmEQ[(v\[*NPV
|v7Q_V3QZ,QZY(o3l\[kQENPV

~

xpQ_\,Wvul\[kQNPSs\ygY(Q_e7Q_WXQ_S(S(d,Y&[kdR\[*mEdS([&[c2dEd,[(vQZY*l\[kQ_SZq *

v\,S@OdT7YV7Q_Nblv{d,YSZx[c2dd,Oc@vhNPWv3dT7[kghT7[[(v7QyNfV7ghT7[*[kd
~

c@vNfWvl,QZ[|[(v7QdT7[kgjT7[sd,O

~

~

x\,Ve[c&dd,O

\,S|NfV7ghT7[NbO[(vQZY(Q\Y(QO!QZc&QZY@V7Q_NPlv{d,YSZx[(v7QmRNfS(S(NPV7lV7Q_Nblv{d,YSs\Y(Q

9.qsdVS(NPe7QZY)\l\[kQm>d,O q;7\_oU[(vh\[;[(v7QsdT7[kghT7[)d,OjVQ_Nblv{d,YS.\,VeusNPS
[(v7QNPV7ghT[[kdl\[kQxp\,Vhe~[(v7QdT7[kghT[2d,O^l\[kQ[;
NPS&NPV7ghT[[kdEV7Q_Nblv{d,YS$\,Ve'q@dcxp[(v7QWZNPYWZTNb[
; dV1NfV7ghT7[EUILdT[kghT7[(SR>/IL
K x+c@v7QZY(QEl\[kQ?/NPS[(v7Q V7Q_Nblv{d,Yd,O&l\[kQ x?\,VeiK~Q_VWXdpe7Q_S
[(v7Q[ogQ$d,O2l\[kQ
yx?xx&p. x^\,Vhen
q@v7QyNfe7Q_\NfS[kduWXdVS([kYTWX[O!Y(dm \,V
G \,S@NPV[(v7QgY(dd,Od,O?@v7QZd,Y(Q_mqPq9d
c&QZ,QZY_xhc&Qe7dENb[*S(TWZWZNfVWX[(`bo,qQ_VWXQ,x7c2QWXdVhSk[kYTWX[sOY(dm
;\s|s@aLY(QZgY(Q_S(Q_V[(\[(NbdVd,O^\,Vw
G ;q9|vQ@\,WX[(NbdVS&d,O+
G ;\YQ$. \,VexOd,Y&Wv7ddSNPV7l
V7Q_Nblv{d,Y`u
. d,Os[(v7Q~WZT7YY(Q_V[$Sk[(\[kQXaLl\[kQ,xd,YY(Q_S(gQ_WX[(NP,Q_`bo,x?V7Q_NPlv{d,Y~q|v7QRSk[(\[kQ_S$d,O
G ;\Y(Q
[(T7gh`PQ_SUI 6INRSIN
V 9c@v7QZY(Q9) NfS2\$l\[kQd,O xuNfS[(v7Qgh\YNb[oE{hNb[ \,SsNPV~[(v7QghY(dd,O>d,O^@v7QZd,Y(Q_mqPx
RNPS$[(v7Q[ogQd,O|l\[kQ( x\,Ve3
V NPS$TSkQ_eO!d,Y\3Y\,Ve7dm {hNb[Zq39,QZY(o1l\[kQuVThmU{QZYy NPS$lNb,Q_VnNPV
{hNPVh\Y(o1TS(NPVlu
S(\_o
|{hNP[(SZq1|v7Q_V>x)[(v7Q
|sv\,S z'Xj T7Q_V[(Ss ( - IIN @tI 6INRSINV q1MQZ[
I( - IDI A@I CBI vNI {Q[(v7QuSk[kdWv\,Sk[(NPWOTVWX[(NbdVhS$[(vh\[WZ\,`fWZT`P\[kQ"h( IN"h- IINth@ qhINRhINV(h q1|v7Q
S(NPmRgh`bQ_Sk[*NPS
Od,Y@[(v7Q_
T7Q_V[JV h [(v\[NPS|TSkQ_e3\,S|Y\,Vedm{hNb[|NbO+OY(dm Sk[(\[kQ ( U @?[(v7QUV7QXp[
Sk[(\[kQNPS@Wv7dSkQ_VTVNbOd,YmR`Po~\[Y\,Ve7dmOY(dmdVQUd,O;[(v7Q$[c&dgYQ_e7Q_WXQ_S(Skd,YS@d,O;l\[kQs
NPV q*|vNPS
v\ggQ_VSNbO2[(v7QE[ogQ@
R d,O&l\[kQ @ NfS\,Ve[(v7QEgh\YNP[oNPS_p. x^d,YUNbOR NfS \,VeNPSEqErtV
[(v7Q_SkQWZ\,SkQ_S_xV h e7QZ[kQZYm~NPV7Q_SsNb[(S&G\,`fT7Q_$
. d,Y{o; NbgghNPVlU\WXdNPV>q2[(v7QZYc@NPSkQ,xV h Q_T\,`PSq9d,[(NPWXQ
[(v\[mV(
h NPS|NPVhe7QZgQ_Ve7Q_V[2d,O+[(v7QU\,WX[(NbdV^q
|vQOTVWX[(NPdVS
Od,Y*[(v7Q[j
T7Q_V[(S h eQZ[kQZYmRNPV7Q[(v7Q{hNP[(S2d,O+[(v7QV7QXp[*Sk[(\[kQ_SZq9rO6&R NPSs\,Vu
\,Ve[(v7Qgh\YNP[oENPSQZ,Q_V>x>[(vQ_VtY\,Ve7dmR`Po\gY(Q_e7Q_WXQ_S(S(d,Yd,O9l\[kQ|
NPSWvdSkQ_V>q3k\,Ve7dmR`bop
mEQ_\,VSv7QZYQ~[(v\[[(v7QY\,Ve7dm{hNb[V h e7QZ[kQZYmRNPVQ_Sc@v7QZ[(vQZYyghY(Q_e7Q_WXQ_S(Skd,Y
. d,YyghY(Q_e7Q_WXQ_S(Skd,YuNPS


h NPSu[(vQ {hNb[ud,OD7xc@vQZY(Q>/ILK NPSu[(vQ4dT7[kghT7[/d,OE;dVNPV7ghT7[4UINV h q
WvdSkQ_V>qQ_VWXQ,x
WZWXd,YeNPV7l`Po,xrR h
K NPS[(v7Q@[ogQ|d,O>[(v7QWv7dSkQ_Vl\[kQ,x7\,Ve h Y(Q_mR\,NPVhSTVWv\,V7l,Q_e>q;|v7QS(\,mEQ
v\ggQ_VS*NPO6*
R NPS*\,V\,Veu[(vQgh\YNb[oUNPS*dpee>q;rOsR NPS|\~x7[(v7QZY(QUNPSsdVh`bodVQgY(Q_e7Q_WXQ_SSkd,Y
d,O0(
x\,VeR[(v\[2dV7QmyTSk[9{QWv7dSkQ_VOd,Y"h \,Ve Rh q;|v7Q|gj\YNb[o{hNP[qh NPSj NPggQ_e[kd+$ q;rO
R NfS\,V
\,VeR[(vQ@gh\YNP[oNPS9QZ,Q_V>x[(v7Q_VRdV\,WX[(NbdVOg Z
.e_I xp[(v7QgY(Q_e7Q_WXQ_SSkd,Yg d,O>l\[kQ+ NfSWv7dS(Q_V>q


Q_VWXQ,x rh NPS[(v7Q
{hNb[d,OF7x)c@vQZY(Q>/IL
K NfS[(v7QRdT[kghT7[d,OG;dVNPV7gjT7[RUIUpg q/WZWXd,YeNfV7l`bo,x
R h EK \,Ve h q@v7QyS\,mEQEv\ggQ_VSNbO}@R NPS\,V\,Ve[(v7Qygh\YNb[oR1NPSdpee>q@Q_VhWXQ,x^[(v7Q
SkQZ[)[kd\ijWX[(Nb[(NbdThS?l\[kQ

~

~

~























~



3

-3










,

[3



OTVWX[(NbdV

WZ\,Vu{QWZ\,`PWZTh`P\[kQ_e/\,S|Od`P`bdc@SZq



z'#}

7 R

UIINRQINV(hIUg

. R
}x#Z
UIUg \ILK
Z|Bz7 R
R
}x#Z
UINV h /ILK
Z|Bz7 R
}x#Z WZ\,`PWZT`f\[kQ;*UIU
. >/ILK
Z|B
{hNP[*d,O$
~}} [(v7Q
z








\,Ve



&d,Yy \,Vhe
WZ\,`PWZT`f\[kQ;*
7
> G]
\,VeE

&d,Y \,Ve
WZ\,`PWZT`f\[k
Q ;*

>

.






|vQS([(\[kQ



NPS\uS(NfV7w3Sk[(\[kQRcvNPWvNPSY(Q_\,Wv7Q_e4OY(dm[(v7QRNPVghT7[l\[kQ_Sc@Nb[(vNfV3dV7QRS([kQZg\,Ve

_R h d,O)[(v7QUVQX[|Sk[(\[kQ$d,Y|l\[kQ$NfS|WZ\,`PWZT`P\[kQ_e3\,WZWXd,YeNPV7l`Po,q
H q/"*&1vL&"*6QS*Qv:I
"*mKJDvjQ*L*Q"6QL"Q1Q<"*L"*"v1<Qv++"
mMJD*bSDL*L"Qv_<LSQN I9U"SNP OvQ I-RTS U:S rvt`mvv""D"Q_+vLK V\
"vQD*"L"S*WJ*mQqQJQeS*LQQ""v

c@vNfWvuNPS|VQZ,QZY@`bQZO[Zq9|v7Q[ogQ

*)

U>

fi 38?>v{v8.^j

$33$3

(

VQUWZ\,V3\,`PS(dRS(NPmyT`P\[kQ[(v7QUWZNPYWZTNb[G;O!d,Y|OTVWX[(NPdVK $NfV[(v7QU\{d
,Qy\,`bl,d,YNb[(vm{ou\
d,[kQ[(v\[ZxNPVl,Q_V7QZY\,`x|WZNbYWZTNP[(S~WZ\,V

v\_,Q4mEd,Y(Q[(v\,V

|s$q

dV7Q3dT7[kgjT7[Zq4QWXdVS(NPe7QZY[(vNPSmEd,Y(Q

l,Q_V7QZY\,`mEdeQ_`^v7QZY(Q,q

YX ,X_P(
/ ) ~D

wS3z'



_ ,u pb,(RZ$

~7fij

:y{~O~q7

(
u

Z9 LU



3k X ~(

0h

4Q3Skw,QZ[(Wv[(v7QuWXdVSk[kYTWX[(NbdVNPeQ_\pqnMQZ[E[{Qu\4WZNbYWZThNb[$cNb[(vnNfV7ghT7[yl\[kQ_S~\,Ve

I*I L

dT7[kghT[l\[kQ_SZqu|v7QEdT7[(WXdmRQ~d,O*[(v7Q~WZNPYWZTNb[dV\,Vo1NPV7gjT7[ (
NPSThS(T\,`P`boWZ\,`PWZT`P\[kQ_e\,S
Od`P`bd
cSZqRs[ihYS([ZxWZ\,`PWZT`P\[kQ~[(v7QEdT7[(WXdmEQd,O&\,`P`)l\[kQ_S$[(v\[l,QZ[$NPV7ghT7[dV`Po3OY(dm
NPV7gjT7[l\[kQ_S_q
QX[ZxWZ\,`PWZT`P\[kQy[(v7Q$dT7[(WXdmEQyd,O\,`P`^l\[kQ_S[(v\[l,QZ[[(vQ_NbYNPVghT7[(S*dV`PoOY(dm

[(v7dSkQyl\[kQ_Scv7dSkQ

dT7[(WXdmEQNPSE\,`bY(Q_\,e7oWZ\,`PWZT`f\[kQ_e>x2\,VeSkd4dV>q|vNPSyopNbQ_`PeS\,VQ_VTmEQZY\[(NbdVd,O[(v7Qul\[kQ_SRd,O\
WZNbYWZThNb[NPV4[kd,gd`bd,lNPWZ\,`d,Ye7QZY_x)NqQ,qbx)S(TWv1[(v\[U[(v7Q~dT7[(WXdmEQd,Os\/l\[kQWZ\,V{QWZ\,`PWZT`P\[kQ_ec@v7Q_V
\,`P`>[(vQdT7[(WXdmEQ_Sd,O)l\[kQ_S@c@NP[(v/\RS(mR\,`f`bQZY|NPVe7QXu\Y(QU\,`PY(Q_\,e7oWZ\,`PWZT`P\[kQ_e>q&4Q$\,SS(TmEQ[(v\[[(v7Q

tII l

II (

l\[kQ_S&\Y(Q*Q_VThmEQZY\[kQ_e~NfV[(vNPS)cs\_o,x\,VheE[(v\[<\ (
]\ y\Y(Q@[(v7Q|NPV7ghT[?l\[kQ_SZxp\,VeE[(vh\[^\A@
]\
\Y(Q[(v7QEd,[(v7QZYl\[kQ_S_xc@v7QZYQ$[(v7QRSmR\,`P`bQ_Sk[NPVeQX/d,O&\l\[kQRc@vhNPWvNPSV7Q_Nb[(vQZY\,VdT[kghT7[V7d,Y\,V

mR\G^k
h q
|s SNPm$Th`P\[(NPV7l_[\,SOd`P`bdc@SZq^v\,SE\jT7Q_V[$Od,YQZ,QZY(ol\[kQud,O
[xhS(\
ojT7Q_V[(S ( IDI l q&|v7Q{h\,SNPWNPe7Q_\ENPS|[(v\[mjTQ_V[(S ( II (Y(QZgYQ_SkQ_V[*[(vQ$NPV7gjT7[2l\[kQ_S
d,OQ[qrVdV7Qy[(NPmEQSk[kQZg^xG\,`fT7Q_S\Y(Q$ghY(d,gh\l\[kQ_eO!Ydm[(vQyNPVghT7[@V7dpe7Q_S
( I*I [(v7Y(dT7lv\,`P`
l\[kQUV7dpe7Q_S r@h II filh x\,Ve[(v7QdT7[kghT7[(SsWXd,ghNPQ_e[kd rh I*I r h n q@v7Qe7QZgQ_Ve7Q_VWXoEl,Y\gjvuv\,Ss[(v7Q
(
Od`P`bd
cNPV7lQ_e7l,Q_S\,WZWXd,YeNPVlu[kdu[(v7Q4tc@NbY(Q_S(d,O2[(v7QRWZNbYWZTNP[G[qUrO2\,V4NfV7ghT7[l\[kQ`\
?
dT7[kghT[(S2\,VNPV7ghT[;[kd$l\[kQa\ x[(v7Q_V~c&Q@l,QZ[*\,VQ_e7l,QO!Y(dm
k
[

fi
h
;
q

r
>

(
[
7
v

Q


7

k
[
h
g
7

2
[
,



U
\
7
V


7
V
aNPV7ghT7[

l\[kQa\ }
K ;NPS2NPV7ghT[[kdUl\[kQa\ x[(v7Q_V~c&Ql,QZ[&\,VQ_e7l,QO!Y(dm h [kd h q)NPVh\,`P`bo,x[(v7QV7dpe7Q_S
h( II h n Sk[(\,Ve3O!d,Y|[(vQG\,`fT7Q{hNb[(SZq;rO+l\[kQb\ gYdeThWXQ_Ss[(v7Q`L [(vudT [kghT7[*{hNb[Zx7[(vQ_V/[(v7QZY(QNfS|\,V
Q_e7l,QOY(dm
fih [kd rh q9&Q_WZ\,TS(QU[(v7QWZNbYWZTNb[c[v\,S|V7d`bdd,gx[(vQl,Y\ghv/NfS*`bdd,gaLO!Y(QZQ,x7[kdd7q
h( IDI lh e7QZgQ_VeudV3[(v7QUOTVWX[(NbdVhS|WZ\,`PWZT`P\[kQ_e3{o
|vQOThVWX[(NbdVS|\,SSkdWZNf\[kQ_e3[kd[(v7QUV7dpe7Q_S
h O!d,Y (ILI*kI h xpc@vNfWv
[(v7QY(Q_SkgQ_WX[(Nb,Ql\[kQ\,Vheu\Y(Q\,S*O!d`f`bd
c@S_q)2\,Wvud,O?[(v7Q\,`PT7QV7deQ_S

Sk[(\,VehS9Od,Ys[(v7QNPVghT7[{hNP[(SZxvh\,S9QX7\,WX[(`boRdV7QgY(Q_eQ_WXQ_S(Skd,Y_xpc@v7dS(Q@\,`PT7QNfS2WXd,ghNPQ_eNPV[kd rh qQ_VWXQ,x

NPS*[(v7QUdV7QXaLgh`P\,WXQyNPe7Q_V[(Nb[oOTVWX[(NbdV>x c@Nb[(vughY(d,{h\{hNP`fNb[o3xjO!d,Y9 (ILI*kI h qs@dc
c&QUWXdVS(NPeQZY|[(v7QUV7dpe7Q_S*cvNPWvuWXdmRQUOY(dmNPV[kQZYV\,`l\[kQ_Sd,O+[(v7QUWZNbYWZThNb[ZqrO\ NPS|\,V3l\[kQ,x
[(v7Q_V
6I edjx^cv7QZY(Q \,Vefd\Y(QE[(v7QEgY(Q_eQ_WXQ_S(Skd,YSd,O&l\[kQ`\ qyrOQ\ NPS\,Vl\[kQ,x
[(v7Q_V
dx\,Ve/NbO\ NPS|\El\[kQ,xj[(v7Q_V
6I
x\,`P`cNb[(vgY(d,{h\{jNP`PNb[o3q
&o[(vNfS?WXdVS([kYTWX[(NbdV>x,Nb[+Od`P`bd
cS[(v\[)[(v7Q
|sb
S(NPmyT`P\[kQ_S?[(v7Qs&dd`bQ_\,VWZNbYWZTNb[,[q)d,[(NPWXQ
[(v\[$[(v7Q~VTmU{QZYd,O<
T7Q_V[(Sd,O<
NPS\[ymEdSk[$[(v7Q~e7dT7{j`bQEd,Os[(v7QVTm${QZYUd,O&l\[kQ_Syd,Oc[q|v7Q
[kY\,VS(O!d,Ym~\[(NbdVuOY(dmg[[kdz
WZ\,V/{QgQZY(Od,YmEQ_euNfVgd`PoV7dm~NP\,`[(NPmEQ,q
VQXp\,mRgh`bQd,O?\E&dd`bQ_\,V/WZNbYWZTNb[*\,Ve[(v7Qy
|sz[kdEc@vNPWvuNb[*NPS&[kY\,VSkOd,YmEQ_eu\,S@e7Q_S(WXYNb{Q_e
NPV7gjT7[2l\[kQ$Q_Th\,`PSP

cx2c2Que7QXiV7Q\
P3



|3

3

|3

"3

3

|3

D3

|3

|3





3



3



13

3

13



|3

3

Y3

P3

|3

3

C3



]

2

o{

K

o{

{0

{

o{

{

{

K



o{

{

PM

\{d
,QyNPSslNb,Q_V/NPVu)NblTY(QUq


cx>c&QWZ\,V4WXdVSk[kYTWX[OY(dm[(v7QyWZNPYWZTNb[D;[(vh\[NPS\S(TWZWZNPVhWX[@Y(QZgYQ_SkQ_V[(\[(NPdVd,O9\WZNPYWZTNb[

jTQ_V[(SJ ( - IIN@tI6INRSINVR\,S\,`bYQ_\,e7oeQXijV7Q_e>xgj`PTS*\,eeNP[(NbdV\,`&jT7Q_V[(S*Od,Y
[(v7Q$l\[kQ_Sd,OP;sxjTS(NfV7lE[(v7QU[kQ_WvVNPT7Q$O!Y(dm
[(v7Q$\{d,QEs`f\,NPmuqs?\wpNPV7lR[(vQ$\,WX[(NbdV^h
g xj[(v7QUgj\YNb[o
xp[(v7Ql\[kQ[ogQ[R2\,Vhe[(v7QY\,Ve7dm{hNP[V h NfV[kdR\,WZWXdTV[Zxc&QWZ\,V/WXdVSk[kYThWX[<

\,WZWXd,YehNPV7l[kd
[(v7Qye7Q_S(WXYNbgh[(NbdVd,O;OThVWX[(NbdV
\{d,Q
Skd~[(v\[Jj
T7Q_V[ rWh h WXdV[(\,NPVS[(v7Q{hNb[e7Q_S(WXYNb{Q_e{ou[(v7Q
OTVWX[(NbdV
( - IDINW
@"I 6INRSINV \{d
,Q,q2@d,[(NPWXQ[(v\[s[(v7QOTVWX[(NbdV h Od,Y h h NPS&e7QZgQ_Ve7Q_V[9dV`Po
dV[(v7QgY(Q_e7Q_WXQ_SSkd,YS&d,O^[(v7Ql\[kQd,Oi;Y(QZghY(Q_SkQ_V[kQ_e{o fiWh h xp[(v7Q9j
T7Q_V[(SINRQINV(hpI \,Vhe~[(v7Q\,WX[(NbdVjg q
~

|s
\

J

c@Nb[(v

K

}

J

P3



}



Y3

DY

U>

3

fi

C

vh73Qh{.L8$>${3

dT7[kgjT7[
l\[kQ

dT7[kgjT7[
l\[kQ



3 3333 3 3
3 3333 3 3
33 3 3 3 3 3 3
3
3 3 33 3 3
3333333 333333
33333333 33333333
333 33 33 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 33 33 3
333 33 33 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 33 33 3 33
333333
3
3 3 333 3 3 3 3 333 3 3
33 33 33
333 3333
3333 3333
3 33 3 3
3 3 333
3
3
3
3
33 333 3
3
3
3
3333 3333
3
3
3
333 33
3
3
3333 3333
3 3 3 33 33 3 3 3 3 3 3
3
3
3
3
333333333333
3
3
3
333
3 3 3 3 3 3 3 3 3 33
3333 3333
33 3 3
3
3
3
3 3 3 3 3 3 3 333 33 33 33 3 3 3 3 3 3 3 3 3 3 3 33 3 3 3 3 3
3 3 3 3 3 3 3 33 3 3 3 3 3 3 3 3 3 3 3 3 33 3 3 3 3 3 3 3
3333 3333
3 3 33 3 3 3 3
3 3 3 3 3 3 3 33 3 3
3333 3333
3
3
3
3
3
3
3
3
3
333 3333
3333 33333 3
3333 3333
3 333 33 3333 333333
333333 33333 33 33
33 3 3 3 3 33 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 33 33 3 3
33 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 33 3 3 3 3 3 3
3
3333 3333
3333 33333
3333 3333
3 3 333 3 3
3 3 333 3 3
33 333
3
3
333
3333 3333
33 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 33 3 3 3 3 3 3 3 33
3
3
3333 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 333 33 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 333 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 33
333
NPV7gj3 T7[
NPV7gh3 T[

'

l\[kQ



l\[kQ

3

j

jAk


jms

jAs k

jmr

jAr k

jq

jAq k

.2

( }




jAp k

jmo

jAo k

jmn

jAn k

jml

jAl k

4 }





Sf




3







3





fith fiuh _V/T vc fi2h
. .
.
.


.

3

2 }

3

3

At}







(

3

jmp



`V(T (c 4h Sf
.


.
fih _V/T vc fith Sf
. .4
.
.
.
.

.

3


h `V(T (c h(
.



3







3



Sf




|s

)NblT7Y(QU}&dd`bQ_\,V1WZNbYWZThNb[c@vNPWvdT7[kghT7[(S[(v7QE{jNPV\Y(oS(Tmd,OsNb[(SNPV7ghT[{hNP[(SZx\,Ve4\

Y(QZgY(Q_SkQ_V[(NPV7l$[(v7QWZNPYWZTNb[ZqV`boOTVWX[(NbdVhS ( [(v7QNPe7Q_V[(Nb[oyOTVWX[(NPdVjx 4 S(NPmyT`P\[(NPV7l
\Rl\[kQ
x AtES(NPmyT`P\[(NfV7lE\,V3l\[kQx\,VeK 2 S(NPmyT`P\[(NPVl\,Vl\[kQ@\Y(Q
e7Q_S(WXYNb{Q_ejq

v

U>

fi 38?>v{v8.^j

$33$3

Q_VWXQ,xNb[v\,S\[mEdS([\YlTmEQ_V[(S\,Ve4WZ\,V{QeQ_S(WXYNb{Q_e{o\SmR\,`P`+[(\{h`bQ,qy|vNPSv7d`PeSOd,Y

1



rh q2Q_VWXQ,x
OY(dmv;c2QyWZ\,VWXdVS([kYTWX[\NPVX@&YQZgY(Q_SkQ_V[(\[(NbdV3SNPmRNP`P\Y*[kd[(v7Q$NPVu[(v7Q$gY(dd,O
NbO\,Vo
d,O9|vQZd,Y(Q_m
qPqQXp[Zxc&QESkgQ_WZNbOo[(vQ$Y(QZcs\YeSd,O[(vNfS|q>|v7Q$Y(QZc&\YeNPS[ -Cw xAw
\,WX[(NbdVRNfS)[(\w,Q_VEdVR\Sk[(\[kQ|YQZgY(Q_SkQ_V[(NPV7l\,VENPV7gjT7[?l\[kQ@c@Nb[(v\,`PT7Q*\,Vegh\YNP[op
. xd,Yc@Nb[(vy\,`PT7Q
.\,Vegh\YNb[oqy[(vQZY(c@NPSkQ,x[(v7QY(QZcs\YeQ_T\,`PS[.pqU|vNfS@ Y(QZcs\YeOTVWX[(NbdVWZ\,V{Q$YQZgY(Q_SkQ_V[kQ_e
{oR\UWZNbYWZThNb[Zxc@vhNPWvEdV{hNPVh\Y(oyNfV7ghT7[UIUg
*dT[kghT7[(S[(vQ
{hNP[d,O>[(v7Q@YQZc&\Yed,{[(\,NPVQ_e~NPVSk[(\[kQ

(
dV/\,WX[(NPdVXgjq@LpNPVWXQNb[*Y(Q_TNbYQ_Sm {hNP[(Ss[kdRY(QZgY(Q_S(Q_V[*[(v7QYQZc&\Ye^x WZ\,V3{QYQZgY(Q_SkQ_V[kQ_e
TS(NfV7ldV`boj
;J w {jNb[(SZqfi
dV
rO

x[(v7Q_VE[(vQZY(Q@NPS;\Wv7dNPWXQd,O\,WX[(NPdVS;Od,Y9Q_\,WvSk[(\[kQ@[(vh\[9lNb,Q_S9Y(QZc&\Ye - w xAw
QZ,QZY(o[kY\*k
Q_WX[kd,Y(o,xhS(NPm~NP`P\Y9[kdE[(vQghY(dd,Od,O?|v7QZd,YQ_mqPq9@dc2QZ,QZY
xjNbO p. x\,Vo~gd`PNfWXoRv\,S
\[`bQ_\,Sk[dV7Qy[kY\*t
Q_WX[kd,Yo[(v\[Y(Q_WXQ_Nb,Q_S\. Y(QZc&\Ye> q@dcx[(v7QZY(Q\Y(QE\[mEdS([_ -Cw xAw [kY\*t Q_WX[kd,YNPQ_SZx
\,Ven[(v7QZY(QZOd,Y(Qu[(v7QZYQNfS$\l\gd,O\[`PQ_\,Sk[; -Cw xzw ( -Cw xzw 5/n
{QZ[c&QZQ_VgdS(S(Nb{h`PQ~\,`PT7Q_SZq1S
\{d
,Q,xjc2QWXdVWZ`fTe7Q[(v\[@\,Vo
a\,eheNb[(Nb,Q\gghY(d_7NPmR\[(NbdV[kd~[(v7QO\,WX[kd,YQ_e3gY(d,{h`PQ_mlNb,Q_S
\,`P` T7Q_V[(S|d,O

J

q&+NfV\,`P`bo,x7[(v7QUOTVhWX[(NbdVK



kThSk[|WXd,ghNbQ_S@[(v7Q\,`PT7Qd,O rh h

Od,Y

[3

J

NPV[kdY3







J



~







]





o{

~



o{



\e7Q_WZNPS(NbdV\,`bl,d,YNb[(vhmOd,Y[(v7QyS(TWZWZNPVhWX[WZNbYWZThNb[|\,`PT7QUghY(d,{h`bQ_muq|@v7QZY(QZOd,Y(Q,xj[(vQ$`bdc2QZY{dTVeud,O
;avh\YeV7Q_S(SOd,Y[(v7QO\,WX[kd,Y(Q_e\,`PT7QgY(d,{j`bQ_mvd`PeSO!d,Y[(vNfS\ghgY(d_7NPmR\[(NPdVghY(d,{h`bQ_m
\,S|c&Q_`P`q


|vQUOd`P`bd
cNPV7lS([kYTWX[(T7Y(Q_eY(QZgYQ_SkQ_V[(\[(NPdVNfS@mEd,Y(Qyl,Q_V7QZY\,`+[(v\,V[(v7QyY(QZgYQ_SkQ_V[(\[(NPdVSmEd,Y(Q
WXdmRmEdV$[kd[(v7Q2r{gj`P\,VVNPVlsWXdm~m$TVhNb[o,q+4Q&S\_o[(v\[+\,V$v\,S?\

[(v7Q

~

j\,Ve


_ (j( XhL, x
S(TWvU[(vh\[ ~
^gY(dpeTWXQ_S

KrIUgqILKDhIN
`[(vu{hNb[*d,O)[(v7Q[kY\,VhS(Nb[(NbdVgYd,{h\{hNP`PNP[o RZKrIUgqILK h *\,Ve K\IUg
INsghY(dehTWXQ_Ss[(v7Q`L[(v/{hNb[*d,O)[(v7Q
Y(QZcs\Ye
V KrIUpg q*pNPmRNf`P\Ys[kd~[(v7QghY(dd,O+d,O|v7QZd,YQ_m qxjc&QUWZ\,V\,`PSkdRgYd
,Q$VdV\ggY(d
pNfmR\{hNP`PNP[o
d,Y)NPS?\S(TWZWZNfVWX[?|xNbOp[(v7QZY(Qs\Y(Q&&dd`bQ_\,VyWZNbYWZTNb[(S

~

~





d,O;G\,`PTQ_S*O!d,YS(TWZWZNPVWX[(`PoY(QZghY(Q_SkQ_V[kQ_e/2SZq

8Sx~3y{ 1

p2jkZb tk jk R, p R
tr
~(j( Xh~3 f 9@tp


Z

|)CYX

7

(

H F[Z \oH]K^

a&KKff_H

@

DGF &F K

?

bZdc

HKfe7H F
g

iKj

>

,g

L, j,7 *Z



|v7QeNfS(WXdTV[kQ_e\,`PT7Qd,O+\,VuNPVpijVNP[kQXav7d,YNbZdV&NPS&[(v7QmR\G7NPmyTm[kd,[(\,`^eNPS(WXdThV[kQ_egQZYka
Od,YmR\,VWXQ,q

v7Q_Vc&QyeNfS(WZTS(S*[(vQ$gd`PNPWXoQX7NPSk[kQ_VWXQygY(d,{j`bQ_md,Y[(v7Q$\
,QZY\l,QRWZ\,SkQgQZY(Od,YmR\,VWXQ

NPV[(v7QNPVpijVNP[kQ~v7d,YNbZdV^x)NP[$NPSyV7Q_WXQ_S(S(\Yo[kd4SkgQ_WZNbOo[(vQY(QZcs\YeWXYNb[kQZYNbdV>q34Qul,Q_VQZY\,`PNbZQ[(v7Q
\,`PT7QOTVWX[(NbdVu\,S@O!d`P`Pd
c@SZq

IN9fih\,` Gd,OG NPS`GSUm~\GpNPm~\,`>aLgQZY(Od,YmR\,VWXQ~ThVe7QZY\,Vogd`PNfWXo^d,O
[ogQy2xhNqQ,q7\,`
G mR\G 7Z! GIUq
d,[kQs[(v\[?\[(NPmEQXae7QZgQ_VeQ_V[^d,Y;vNfSk[kd,Y(oae7QZgQ_Ve7Q_V[^NPVpijVNP[kQXav7d,YNbZdVgd`PNPWXoOd,Y+\&NPS
|vQ







V7d,[VQ_WXQ_S(S(\YNP`PoiVNb[kQ_`boY(QZgY(Q_SkQ_V[(\{h`bQ,q+7d,Y+OT`f`boaLd,{jSkQZY(\{h`bQ;2SZx,Nb[^[(T7YVQ_edT7[2SkQZQ2Q,ql7qG2T7[ta
QZYmR\,V^xj_,G)[(vh\[9[(v7Q|eNfS(WXdTV[kQ_eEd,Y2\
,QZY\l,Q\,`PT7QNPS)[(v7Q|gQZY(Od,YmR\,VWXQ*d,O>\S([(\[(NbdV\Y(ogd`PNPWXo,q
|vNfS9mEQ_\,VS&[(v\[sV7dvNPSk[kd,Yoae7QZgQ_VeQ_V[gd`PNfWXoygQZY(Od,YmRS9{QZ[k[kQZY&[(vh\,V[(vQ{Q_Sk[&Sk[(\[(NbdV\Y(o~dV7Q,q
S$\,VnNPmEgd,Y([(\,V[UWXdVSkQ_T7Q_VWXQ,x;\,Vd,g[(NPmR\,`9gd`PNPWXoNPSijVhNb[kQ_`boY(QZgY(Q_SkQ_V[(\{h`bQ,q/d,Ys2SZx
[(vNPSe7dQ_SV7d,[v7d`fe>q$\,e\,VN)QZ[\,`q9t_,,S(v7dc2Q_e[(v\[[(vQE[(NPmEQXae7QZgQ_Ve7Q_V[NPVpijVhNb[kQXav7d,YNbZdV
gd`PNPWXoaLQXpNfSk[kQ_VWXQsgY(d,{h`PQ_mO!d,Y9s2SNPSVd,[e7Q_WZNPe\{h`PQsThVe7QZY\_,QZY\l,QgQZY(Od,YmR\,VWXQsd,Y9ThVe7QZY
[kd,[(\,`eNfS(WXdTV[kQ_e3gQZY(Od,YmR\,VWXQ,qUrVWXdV[kY\,Sk[Zx^c&QES(v7d
c[(vh\[[(vQS\,mEQgY(d,{h`bQ_mOd,YSk[(\[(NbdV\Y(o
gd`PNPWZNbQ_SsNPS@aWXdmEgh`bQZ[kQ,q

U>


fi

8Sx~3y{ 0



C

vh73Qh{.L8$>${3


Q

u

L



j Z , k ! Z ;jkXP
( p L,

L,L) !X ,j(/yZt |
7XZ R ! | jPZ



|vQ1v\YeV7Q_SSgY(dd,OyNPS/Q_S(SkQ_V[(NP\,`P`bo

(



[(v7QS(\,mEQ\,SuO!d,Y|v7QZd,Y(Q_m

X,93 X

7qPqd,[kQ[(v\[3NfV[(v\[

WXdVSk[kYTWX[(NbdV>xQZ,QZY(oSk[(\[(NbdV\Y(o3gd`fNPWXoud,{[(\,NPVSY(QZcs\YeUOd,Y\[mEdSk[dV7QSk[kQZg^x>V\,mEQ_`bo3c@v7Q_V


NPS|Y(Q_\,Wv7Q_e^xjmEQ_\,VNfV7lE[(v\[@[(vQO!d,Ym$T`f\ENPS|S(\[(NPSkihQ_e>q2`P`>d,[(vQZYSk[kQZghS@oNPQ_`PeY(QZcs\Ye
.pq;|v7QZY(QZOd,Y(Q,xO!d,Y[(vhNPSWXdVSk[kYTWX[(NbdV>x[(vQ|[kd,[(\,`heNfS(WXdTV[kQ_eEG\,`fT7Q|NPS)l,Y(Q_\[kQZY&[(v\,V;.NPOj\,VeEdVh`boyNPO
[(v7QijVhNb[kQXav7d,YNbZdV\,`PT7QNPS*S(d7q9dRm~\w,Q[(v7QWXdVSk[kYTWX[(NbdVuc&d,Y(wO!d,Y|\
,QZY\l,Q$\,`PT7Q,x7c&Qv\
,Q[kd
mEdpeNbOoENb[2S(ThWv[(v\[2dVhWXQ[(vQS(NPVwRSk[(\[kQJ
NPS9Y(Q_\,WvQ_e>xpQZ,QZY(oS(T{hSkQ_T7Q_V[&\,WX[(NbdV{YNPVlS;Y(QZcs\Ye
q*|v7QZY(QZOd,Y(Q,x[(vQ$\_,QZY\l,Q$\,`PT7QQ_T\,`PS$NbO)[(v7QOd,YmyT`P\ENPSS(\[(NPSti\{h`bQ,x\,VeNb[|Q_T\,`PSm
. NbO+NP[@NPS
S(NPVwSk[(\[kQ

TVS\[(NPStij\{h`PQ,q)Q_VWXQ,x{d,[(vu[(vQgY(d,{h`bQ_m~S*\Y(QU;av\Ye^q

&dV[(\,NPVmRQ_V[yNPVO!d,Yy[(v7Q[kd,[(\,`&ehNPS(WXdTV[kQ_egQZY(Od,YmR\,VhWXQRO!d`f`bd
c@S$OY(dm

[(v7QlT7Q_S(Ska\,Vepa

WvQ_W(w~\gghY(d\,Wv>}9TQ_S(S2\$Sk[(\[(NbdV\YoEgd`fNPWXo,xWZ\,`PWZTh`P\[kQNb[(S9gQZY(O!d,YmR\,VWXQ@\,Ve\,WZWXQZg[sNbO>\,VeRdV`Po
NbO^[(vQgQZYO!d,Ym~\,VWXQNPS&gdSNb[(Nb,Q,q|v7Q[kd,[(\,`^ehNPS(WXdTV[kQ_eu\,Ve[(v7Q\_,QZY\l,QUgQZY(Od,YmR\,VWXQWZ\,Vu{d,[(v
{QWZ\,`PWZT`P\[kQ_e3NPVgd`boVdmRNP\,`[(NPmEQ,q
rtV[(v7QES(\,mEQc&\
o,x[(v7Q[kQ_WvVNPT7Q_SgY(dNPVlV7dVh\ggY(d
pNPm~\{hNP`PNb[oY(Q_S(T`b[(SOd,Y[(v7QESk[(\[(NbdV\Y(o



gd`PNPWXo3NfV[(vQ$iVNb[kQv7d,YNbZdV4WZ\,SkQ3Lsd,Y(d`P`P\Y(o37q WZ\,V{QmRdeNbihQ_e3[kdud,{h[(\,NPV4V7dV\gghY(d_7NPmR\Ga
{hNP`fNb[oRYQ_S(T`b[(S*Od,Y@NPV7ijVNb[kQv7d,YNbZdVhSZq

8Sx~3y{ 032 p L, ,j 9 Ztp u ,3G,fihks9 pjZL,L,> fZ ph~
,Xk
|7Z!ZSR 9kjk R,( Uju @
(



|vQ|NPVpijVNP[kQXav7d,YNbZdV$[(NPmEQXae7QZgQ_VeQ_V[)gd`PNPWXoaLQXpNfSk[kQ_VWXQsgY(d,{h`PQ_mRS)\Y(Q@TVeQ_WZNPe\{h`bQ\,eh\,VN
QZ[s\,`qbx_,,q94QSv7d
c

[(v\[2Vd$WXdmEghT[(\{h`bQ@OTVWX[(NPdVRWZ\,VQZ,Q_V\ghgY(d_7NPmR\[kQd,g[(NPmR\,`hgd`PNPWZNbQ_SZq

8Sx~3y{ 0 p RZt7ZjXj Zt, u GhtUpj ZXP9
,Xk
|7Z!ZSR hj,@9tjtD E(\
7



(

X


|vQgY(dd,O?Od`P`bdc@SsO!Ydm[(v7QgYdd,O?{o\,eh\,VN>QZ[@\,`q+t_,,*S(v7dc@NPV7lE[(vQTVWXdmEghT[(\{hNP`PNb[o
d,O9[(vQE[(NPmEQXae7QZgQ_Ve7Q_V[G\,`PTQ,qUrtV\,e\,VN)QZ[\,`Lq;t_,,x+OY(dm



\lNb,Q_V1+T7YNPV7lmR\,WvhNPV7Q

\,V

.q
p
mv\,`b[(SydVQ_mEg[onNfV7ghT7[Zx)[(v7Q_V[(v7QZYQNfS$QX7\,WX[(`bodV7Qu[(NPmEQXae7QZgQ_VeQ_V[NPVpijVhNb[kQXav7d,YNbZdV
gd`PNPWXoc@Nb[(v4gQZY(Od,YmR\,VWXQ
9 x* \,`P`;d,[(vQZYU[(NPmEQXaeQZgQ_Vhe7Q_V[Ugd`fNPWZNbQ_Sv\_,QgQZY(Od,YmR\,VWXQ
x\,Vhe
' @[(v7Q\_,QZY\l,QEG\,`PTQ$NPS{QZ[c&QZQ_V. \,Venq|vNPS@Y(Q_eTWXQ_S[(v7QTVe7Q_WZNfe\{h`bQghY(d,{h`bQ_m
TV7d,{jSkQZY(\{h`bQE&zNfSWXdVSk[kYThWX[kQ_ev\
NPVl/[(v7QROd`P`bdc@NPV7lgY(d,gQZY([(NPQ_SO!d,Y$\Y({hNb[kY\Yo<K&

$rO

6<

h<

d,O9cv7QZ[(v7QZY\+T7YNfV7lmR\,WvNPV7Qv\,`b[(SdVQ_mEg[o3NPV7gjT7[@[kd[(v7Qy[(NPmEQXae7QZgQ_VeQ_V[NPVpijVhNb[kQXav7d,YNbZdV

gd`PNPWXoQXpNPS([kQ_VWXQgY(d,{h`PQ_mO!d,Y@ThV7d,{hSkQZY(\{h`bQs2S|TVe7QZY|\
,QZY\l,QygQZYO!d,Ym~\,VWXQ,qWX[(Th\,`P`bo,x

mZa\gghY(d_7NPmR\{h`PQ,x,c2Q|WXdT`feyWv7ddSkQ
v\,`P[(S^dV$Q_mEg[o$NPV7ghT7[Zq

\,S(S(ThmRNPV7l[(v\[;[(v7Qs\,`PT7Qsd,Oh[(v7Q*TVd,{hSkQZY(\{h`bQs&4c&QZY(Q

<*NPV$\|cs\_o[(vh\[?QZ,Q_Vy[(v7Q&\ggY(d
pNPm~\[(NbdVQ_V\{j`bQ_S?ThS^[kde7Q_WZNPe7Qcv7QZ[(v7QZY

Za\ggYd_7NPmR\[(NbdV/NfS*NPmEgdS(S(Nb{j`bQ,q
w ~vy~$y 0
p ~Xk7XjXh~,jb ! L,k7ZjZh Zt, u G,fih1kus
3 pjX$,Xk|XXSR
,j,| tjk R ,(\
pNPVhWXQ[(vhNPS|NPS*TVhe7Q_WZNPe\{h`PQ,x\,V
l





~} F HB

?



(

? ?hF




/' /'

.\'GMThSkQ_V\
'

|vNfS@c&d,Y(w3cs\,SS(Tggd,Y([kQ_eNfVgj\Y([{opl,Y\,V[$|s*a p_ ,G\,Ve1|s|a,p

\,Ve$d`PeS(mRNP[(vjx
\,Ve{oQ_T[(S(Wv7QZY+@w\,e7Q_mRNfS(Wv7QZY?TS([(\,TS(WvheNbQ_VSk[|^l,Y\,V[ p_~{G92Z{
lTp
a\{TVhev7Q_V7wq;|v7Q[(vNbYeu\,T7[(v7d,Y|gQZY(Od,YmEQ_egh\Y[*d,O?[(v7QUc2d,Y(w\[@\Y([(mEdT[(v&d`P`PQZl,Q,q

U>

fi 38?>v{v8.^j

^$d`P`bQZY\,Ve

4Qc&dT`Pe`PNPw,Q3[kdn[(v\,V7w\ghvV7Q

$33$3

S(QZ,QZY\,`\,V7dVopmEdTSY(QZOQZY(QZQ_SO!d,YWZ\[(WvNfV7l

QZY(Y(d,YS|NPVQ_\Y`PNPQZY*,QZYS(NbdVS|d,O?[(vNfS*gh\gQZY_q

?

\ jF I9Kfj

? H ?

H+H_H_

Cg

W9CB


(././.q2M^QZ[ ) I*I qp){Q|\,V~NPVSk[(\,VWXQ*d,O
IDI x7c@v7QZYQWZ`f(\,TSkQ +(N 0 +-S 0
7(, E e,. k 1& NPO

4Q|gYQ_SkQ_V[9[(v7Q*Y(Q_eTWX[(NPdVEO!YdmTVhev7Q_V7w$QZ[9\,`qbx

II q

+4S 0
Z
Y(Q_S(g^q sNPS|\E`fNb[kQZY\,`>NPV



z

c@Nb[(v\YNP\{h`bQ_S{ (
|{ \,VeuWZ`P\,TSkQ_S ~
(
|O!d,Y
{
{

q
4

QES(\
o3[(v\[\YNP\{h`bQ1{



v]wx4y


{

t{

q


~

o{

|{

~

~[





]





4

~[

FG > H9ILK / INMIQPOINRQIUTINVsc@NP[(v
H UI9p F I_ :
K / t(I_
QI_
QI
.e_I
P
( I*I qqI mI
NbOK
UIQI QILKh
t(I
QI
QIO I_
'I
.// (I
//
//
+ 0 \ggQ_\YS*NPV c@Nb[(vuS(NblVTm-g
\,Ve
//
// (I
h
b
N


K




U

N



Q

N



Q

L

K
w 'I
//

J_
//
+ 0 \ggQ_\YS*NPV c@Nb[(vuS(NblVTm-g
\,Ve
//
(


b
N


K




U





Q





Q

L


K
h


(I QI Q_
'I


RZKrIUgqILK h 0 //

\,Ve
\ggQ_\YS*NPV
c@Nb[(vuS(NblVTm
g
//
+ 0
// (I
NbOK
'I QI QILK h
//
//
+4S 0 \ggQ_\YS*NPV c@Nb[(vuS(NPlVTm mg
\,Ve
//
//
//1 (I
NbOK K h d,YK K h
.eI d,[(v7QZY(c@NfSkQ
./
NbOK UI
(I
NPO6RZK\IUg

(ILK
0
VK\IUg7 .eI d,[(vQZY(c@NPSkQ

GK /1 JI NbOK
7
NbOK
d,[kQ[(v\[|\,`P`[kY\,VhS(Nb[(NbdVSsNPV
G >s\Y(Qe7QZ[kQZYmRNfVNPSk[(NPWxp\,VeQZ,QZY(o[kY\*k Q_WX[kd,Y(ouv\,Ss\,`PT7Q_.d,Y
qE|v7QZY(QENPS\uWXd,Y(YQ_SkgdVe7Q_VWXQ{QZ[c&QZQ_V4gd`PNPWZNbQ_SOd,Y`
G >\,Vhe4\,S(S(NblVmRQ_V[(Sd,O&G\,`fT7Q_S[kd/[(v7Q
\YNP\{h`bQ_SUd,O ?x)STWv[(v\[$gd`PNfWZNbQ_STVeQZYc@vNPWv
G >v\,S$G\,`fT7QWXd,Y(Y(Q_SkgdVe[kdS(\[(NPS(O!opNPV7l
7Ydm

z?xc2Q$WXdVSk[kYTWX[\R&
*



\

*

z



o3















o3

o3

{

|{



!



-





~[

{



o3

-



~

{

o3

o3

{



C

~[

o3





{

~[





{





z

z

Iz

z

\,S(S(NPlVmEQ_V[(S*O!d,Y zxj\,VeupNPWXQ,QZYS(\pq

?

\ jF I9Kf

Cg

H+H_H_

? H ?


W9Cfi|

&(././.q*M^QZ[

l\,NPV>xc&QUgYQ_SkQ_V[@[(v7QY(Q_eThWX[(NbdVuOY(dmTVev7Q_VwQZ[@\,`Lqbx

IDI \,Ve WZ`P\,TS(Q_S
HJILK / INMOINRSINV&c@v7QZYQ

\YNP\{h`bQ_S{ (
z


G



~







UI I_
.eI_

H

|{



-



(

II

*T

~



*z{Q\~O!d,Ym$T`f\c@Nb[(v

q)@vNPS;[(NPmRQ,xc&Qe7QXijVQ*[(v7QTVd,{hSkQZY(\{h`bQ*

:



UU>



K*grR
-



Z


K / I9I

!


fiC

vh73Qh{.L8$>${3


.//
//
//
//
//
//
//

RXKrIUg
ILK h

0

//



//

//
//
//
//
//
//
//1

VKrIUgp
? ? h? F ?






_

((
(I
(I
(I
(I
(I
(I
.eI

.eI

K K / ILKDh t(IQI_
K UIQILK h K*grR ( INI \ggQ_\YS*NfV c@Nb[(vuSNblVThm-g
NbOK
UIQILKDh
(IQIN<I
e7dQ_S@V7d,[|\ggQ_\Y@NPV c@Nb[(vuS(NblVTm-g
\ggQ_\YS|NPV c@Nb[(vuS(NPlVTm-g
NbOK
IQILK h JI
NbOK
QILKDh qe7dQ_S|V7d,[@\ggQ_\Y@NfV
c@Nb[(vuSNblVThm-g
NbOK KDgfiR L
K h K*gfiR (
NbOK KDgfiRqL
Kh
NbOK Kh d,Y9K KDh JIUg .Ed,YJg

NbO



NbO



~[

{



H

~[

{





~

P{

~[

P{




d,[(v7QZY(cNPSkQ

K



RZK\IUg
.

NbO R z\,Ve
d,[(v7QZYc@NPSkQEq

&



/

U ( r|9YNPVWXQZ[kdVuVNb,QZYS(Nb[oYQ_S(SZq
s`bo[(v7Q,x7qt_,,qsQ_WZNPS(NbdV7aL[(v7QZd,Y(QZ[(NPWgj`P\,VVNPVl7q a@
Z Xx ? x0' G7q
&Q_`P`PmR\,V^xq@t_,,q|j

jk ,k



E)

u :

&dT7[(NP`PNPQZY_x9qbxQ_\,V>x2q)Mqbx9\,V7wpSZx2qt_,,qQ_WZNPS(NPdVpaL[(v7QZd,Y(QZ[(NPWgh`f\,VVNPV7l7}R[kYThWX[(T7Y\,`



\,SS(TmEg[(NPdVS*\,Ve/WXdmEgjT7[(\[(NbdV\,`^`PQZ,QZY\l,Q,q)7p?t )a)@ x

pVp

Q

x+ G7q

&dT7[(NP`PNPQZY_xqbx^Q_\Ye7Q_V>x^Uqbxd`PeSk_m~NPe7[Zx>qt_,,qgj`bdNb[(NPV7lSk[kYTWX[(TY(QyNfVgd`PNfWXo/WXdVpa
S([kYTWX[(NbdV>q?rV



fi p

X Xj

(

@7Z k
p
)\Y(wxs\,`fNbO!d,YVNP\pq

(

pVqVq

)") )a'+,j

7( sk &j
= ^,QR
fi h(p e gg^q'/'D ',qrRYQ_S(SZx|Q_V`bd

tI)


/



(

)

R+

sT7Y\l,d7x9yqbx9eQ@dT7l,Q_mEdV[Zx9qbx&7`PNPS(SkQ_Vw,d7x)$qt_,,qnVn[(v7QWXdmEgh`bQX7Nb[od,O|gh\Y([(NP\,`f`bo

p((Z ,Z;(j7X Z X Xx ~ x+_pQ j_/'q
,jjk R,/ , r ZpX ,! ZXPE1,

d,{jSkQZY(,Q_eu\Y(w,d
ue7Q_WZNPSNbdV~ghY(dWXQ_SSkQ_SZq
s\,S(S\,Ve7Y\px^$qt_,,q



X

*+

(

p

Z! jk sV7gjT7{h`PNPSv7Q_eedWX[kd,Y\,`eNPS(SkQZY[(\[(NbdV>x7&Y(d
c@VVhNb,QZYS(Nb[o,q

}$

s\,S(S\,Ve7Y\px;$qbx \Q_`b{h`PNfV7l7x?M9qbx;MNP[k[(mR\,V>x;q)Mqt_,,q

X$

p, U
~pX ZXP1,~ _f jk
9Y(d
pNPe7Q_VhWXQ,xh@v7dpe7QrtS(`P\,Ve>};&Y(dc@V3VNb,QZYSNb[o,q
Y(QZQ_Vh`P\_cxqbx@dd,QZY_xUqc7qbx@

(

* jPZX
\,VSkQ_V>x+|q/t_,,\q



\

@TZZd7x|zq*M9qt_,,q

p( |pO!d,YeuVNb,QZYS(Nb[oYQ_S(SZq

n)



(

U ( fi

Z Xj,G
Pjk

?Q_Wv^qh|QZg^qd7q|a,a_q





L3pk!PX

(

j7L, =



/ X R R
,ht,&tp, fi1 XGXP
V7ghT{h`PNPS(vQ_e
edWX[kd,Y\,`yeNPSSkQZY([(\[(NbdV>xQZg[Zqd,O&dmEghT[kQZYpWZNbQ_VhWXQ,xVNP,QZYS(Nb[o ,
OR\,S(S(\,WvThS(SkQZ[(S\[

mRv7QZYSk[Zq

fi

\,VSkQ_V>x|qt_,,G{qd`PNPVlR&9S{ouSkQ_\YWvNPV7lNPVugd`PNPWXoSkgh\,WXQ,q*rtV*t
;,_ZZkZ f
? XXL h K
)X Z N
hZ! X gg^q p, p_q





UUU

q Q



t$ 7

fi 38?>v{v8.^j

$33$3

!+q (././.qzopV\,mRNPW3gY(d,l,Y\,m~mRNPV7l1Od,Ys2SThS(NPV7l\O\,WX[kd,YQ_e
fi hXj, j ,_ZZkZ ,, Z

fi
fi
'(.* jXq*2YQ_W(w,Q_V7YNfe7l,Q,x|q
\,TSkwY(Q_Wv[Zx?q3t_,,qsb fi
hk L p (R 7Z!_ _Z
R,
V7ghT{h`PNPS(vQ_e~e7dpWX[kd,Y\,`ehNPS(SkQZY([(\[(NPdV>x7\,S(S\,WvTSkQZ[k[(SrVS([(Nb[(T7[kQd,O;Q_WvV7d`bd,l,o,q
$NPm/xr$Eq a|qbxpQ_\,V>xpqM9qbxQ_T`bQ_\,T^x$q9(././. q@ghgY(d_7NPmR\[kQSkd`PT7[(NPdVS;[kdUO\,WX[kd,Y(Q_e\Yw,d

eQ_WZNPS(NbdVgY(dpWXQ_S(SkQ_SNf\~l,Y(QZQ_eo3SkQ_\YWvNfV3[(v7QySkgh\,WXQd,O;ijVhNb[kQUWXdV[kY(d`P`bQZYS_qrtV*t fi
k~p
hXj, j, ,_ZZkZ / _ jX Z jb fi1
,j X 7 (p fi
ghg^qq'//'D '/'(
. q*2YQ_W(w,Q_V7YNfe7l,Q,x|q
$d`P`PQZY_x^yqbx+)\Y(Y_x?q/(././. q+d`PNPWXoNb[kQZY\[(NbdV1O!d,YO\,WX[kd,Y(Q_e9S_qyrtV*t t~7
;__X(X E+ ZL h Z NjX Z

\,VSkQ_V>x|@qbx@7Q_Vl7x

S([(\[kQ~Y(QZgYQ_SkQ_V[(\[(NPdV>qErVnsk ( t~ p
hZ! X |jb uj Z pp 1ghg^q^

K)

p

MNP[k[(mR\,V>xjqjM9qt_,Gq3Q_mRd,Y(o`PQ_S(S|gd`PNPWZNPQ_SZ}9|v7QZd,YQZ[(NPWZ\,`?`fNPmRNb[(\[(NbdVhS*\,Ve/gY\,WX[(NPWZ\,`^Y(Q_ST`b[(SZq

(

rtVuyqjs`PN)xp?q7TSk{h\,VheSZx7q a$q3QZo,QZY_xqpzq7NP`PSkdV42eSZqfix/k

)



)
E, L
ypb, tI)

R, b **t tp k?hXj, jQ;,_ZZkZ
s3rt9Y(Q_S(SZq
MNP[k[(mR\,V>xqGMqbx,Q_\,V>x,q
MqbxF
$ \Q_`b{h`PNfV7l7xM9q
+qt_,,qV[(v7Q&WXdmEgh`bQX7Nb[od,OS(d`bNfV7l|\Yw,d

eQ_WZNPS(NbdVgY(d,{j`bQ_mRSZqrtV1sk ( fi kRp
);,_ZZkZ ? XXL h
X _ ,NhX
X ghg^qq,' Gv \.\ q
M^d,Qt
do,x|qsqt_,p
q&dmEgjT7[(\[(NbdV\,`P`PoOQ_\,S(Nb{h`bQu{dTVheSyO!d,Ygh\Y([(NP\,`P`Po1d,{hSkQZY(,Q_e \Yw,d

eQ_WZNPS(NbdVgYdWXQ_S(S_q?7Xk, @
x
x+_/Dj
q
K+

(

p=p

)

)

=q

MThSkQ_V\px@qbx|MNLxsqbxpNb[k[(NPV7l,QZY
x*qbx*4Q_`f`PSZx@qbx@

fi

v7Q_VmEd,Y(QymEQ_mEd,Y(o/v7Q_`PghSZq*rtVsk (
)X
hX X ghg^q ,p
q
_ ,N





q' v '

\,e\,VNx,yqbxG\,V7wpSZxqbx

d`PeS(m~Nb[(v>xc7qt_,,qzo{Y\,NPVNPSROT`P`}



ky p

p~



;,_ZZkZ ~+ ZL h

&dVe7dV^x$qht_,,q7V[(v7Q9TVeQ_WZNPe\{hNP`fNb[o*d,OpgY(d,{j\{hNP`PNPS([(NPWgj`P\,VVNPVl

fi

\,VheNfVpijVNb[kQXavd,YNbZdVRgj\Y([(NP\,`P`bod,{hS(QZY(G\{j`bQ\Y(w,de7Q_WZNfS(NbdVgY(d,{h`bQ_m~SZq^rtVu*t
7 p 9$, ,jZ
;,_ZZkZ RK
)X Z N
hZ! X gg^qhG Gq





\$



/'





Q



W
s\,`P`PTm/xUq Eq)t_, q,QZYWXdmRNPVlNPVWXdmEgh`PQZ[kQ&gQZYWXQZgh[(NbdVc@Nb[(vT7[(NP`PQsehNPSk[(NPVWX[(NPdV$mEQ_mRd,Y(o,q

fi


( fi
gg^q+_(.*
X$
Q_T`bQ_\,T>xUqbx1$NPm/x
E
$ q a@qbx&$\Q_`P{h`PNPV7l7xjMq?qbx>s\,S(S(\,VeY\pxj$qUq$t_,,qUd`bpNPV7l~s2S
{oS(Q_\YWvNfV7l4[(v7QuSkgh\,WXQud,O@ijVNb[kQgd`PNPWZNbQ_S_q4rVsk ( fi tup
~
;__X(X 3,
+ XXL j X _ ,NhX
X ghg^q7
r, q
Q_T`bQ_\,T>x7$qbxp+Q_S(vwNPV^xM9qbxeU
$ NPmuxfiR$ q a|qbx $ \Q_`b{h`PNfV7l7xM9q+q*t_,,q)MQ_\YVNPVlijVNP[kQXaSk[(\[kQWXdVpa
[kYd`P`bQZYS@O!d,Ygh\Y([(Nf\,`P`bod,{hSkQZY(\{h`bQ$Q_VpNbY(dVmRQ_V[(SZq@rV4sk ( fi tp
~
;,_ZZkZ
,+ XXL j Z NjX
Z gg^q7r r,' q
TVev7Q_Vwjxq(././,
. \q|v7Q$WXdmEgh`bQX7Nb[od,O)d,g[(NPm~\,`S(mR\,`f`>gd`PNPWZNbQ_SZqs1,p R , Z t?7Xk
| (
x
x+,_Dj , q
rtV1sk ( ky p p : ehXj, j,G;__X(X ~,1
_,qsd,Y(l\,V \,TOmR\,VhVu9T7{h`fNPS(v7QZYS_q

n

p

)

p

)

u

UU

fiC

vh73Qh{.L8$>${3


(././.{q 7 ( jPU k&j, fi $pX !t ZXP,R _
Q_Wv>qj@QZg^qhd7qh|(././G
. a' qs\Y([(mRdT7[(v&d`f`bQZl,Q,q

TVev7Q_Vwjxpq|

(

,~t

TVev7Q_VwjxGqbxd`PehS(mRNb[(v>xA7qbx`P`bQ_Vhe7QZY_x@qjt_,,q|v7Q2WXdmEgh`bQX7Nb[od,O7[(v7Q2gd`PNPWXoQXpNPS([kQ_VWXQ
ghY(d,{h`bQ_m

O!d,Y2gh\Y([(NP\,`P`PoaLd,{hS(QZY(G\{j`bQsijVNb[kQXavd,YNbZdVR\Y(w,d
e7Q_WZNPS(NPdVEgY(dpWXQ_S(SkQ_SZq>rtV*t

/^,,
; @pZ*
+ Z X ,_ZZkZ ggq , j ,
q
u ~, p E
pgYNPV7l,QZY(aL;QZY`P\l7q

fi





/

'

(././.qE&dmEgh`PQXpNb[ouY(Q_S(T`P[(S@Od,Y

x,pQp
((p. q

TVev7Q_Vwjxqbxd`feS(mRNb[(v^x$qbxM?TSkQ_V\pxqbx^`P`bQ_Ve7QZY
xj|q~

iVNb[kQXav7d,YNPZdVU\Y(w,d
ye7Q_WZNPS(NbdVUgY(dpWXQ_S(S+gY(d,{h`PQ_mRSZq7pt* p\)`^4x

(

r

( U \seeNPS(dVpaL4Q_S(`bQZo,q

)\gh\,eNPm~Nb[kYNbdT>xq$qt_,Gq`; j7L, ,
j jP

|S(Nb[(S(NPw`PNfSZx 7q$qt_,,qurtV[kY\,WX[(\{h`bQgY(d,{h`bQ_m~SNPV4WXdV[kY(d`9[(vQZd,Y(o,q

)\gh\,eNPm~Nb[kYNbdT>x)q$qbx)

+|)7pj,+t;,ht,+j?

u , x



|SNb[(S(Nbwp`PNPSZx)q*Uq

)\gh\,eNPm~Nb[kYNbdT>xq|Uqbx



ghY(dWXQ_SSkQ_SZq&, p R, X

tR?7Xk,


/'

x> , ,G7q

ur

t_,,q

|vQWXdmRgh`bQX7Nb[o



| ( x

pu

'

Q (.

d,Oy\Y(w,d
e7Q_WZNfS(NbdV

xj, pq

$ \Q_`b{h`fNPV7l7x|Mq|+q t_,,qM^Q_\YVNfV7lgd`fNPWZNbQ_Sc@Nb[(v QX[kQZYV\,`
k~p _jXj, jD;__X(X 1 fi
$\,T7OmR\,VV>xj7\,Vu7Y\,VWZNPSWXd7xs$q
R E hk&t< jk( !
Z~

+Q_S(v7wpNPV>xMqbx3Q_T`PQ_\,T>x$qbx
mRQ_mEd,Y(o,q~rtV*t
ghg^q pXq*3d,Y(l\,V

q'(. '
9`f\[k_mR\,V>xM9q1R
$ qt_,,q

V7ghT7{h`fNPS(v7Q_ee7dpWX[kd,Y\,`9eNfS(SkQZY([(\[(NbdV^xQZgh\Y([(mEQ_V[Ud,O*9`PQ_WX[kYNPWZ\,`92V7lNPV7QZQZYNPV7lu\,Ve
0/

p

n

sdmEghT7[kQZY7WZNbQ_VWXQ,x\,S(S(\,WvTSkQZ[k[(SrtVSk[(Nb[(T[kQd,O;?Q_WvVd`bd,l,o,xs\,m${YNfe7l,Q,x$q



9T[kQZYmR\,V>xqhMq@t_,Gq|1,,~ _f ,jt c,dvhVu

/

pv\,m~NbY_x7Uq@t_, q&rt



pdVSZxQZcd,Y(wq

Nf`bQZo



sp@s|q7pj+k p-)`^x q x>,, ,q


('

pmR\,`f`bc2ddpe>xGUqGyqbxdVehNbwjx|qz7q^t_ qh@v7Q2d,gh[(NPmR\,`WXdV[kY(d`d,Ojgh\Y([(NP\,`P`Pod,{jSkQZY(,Q_e\Yw,d

ghY(dWXQ_SSkQ_S*d
,QZY[(v7QiVNb[kQv7d,YNbZdV^q?7Xk,

dVehNbwjx|q7q9t_
q







@ x



. Q .

x? j ,q



( p R hkt9pX ,! XGXP,*t )VghT7{7a
`fNPS(v7Q_ee7dpWX[kd,Y\,`ehNPS(SkQZY([(\[(NPdV>xh[(\,V7Od,Ye/VNb,QZYS(NP[o,q

|S(NP[(S(Nbwp`PNPSZx,q?$qbx\,V|dojxqt_,,q47Q_\[(TY(QXaL{h\,SkQ_emEQZ[(vdeSUO!d,Y`P\Y(l,QS(WZ\,`bQe7opV\,mRNPW



ghY(d,l,Y\,mRmRNfV7l7q21

n

fi

(, x

uVu



x, G7q

vNb[kQ,xqjqbxr(r(rq@t_,p
q*+\Y[(NP\,`P`bod,{hSkQZY(,Q_e\Y(w,d/e7Q_WZNPS(NPdVgY(dpWXQ_S(SkQ_SZ}9S(TY(,QZo,q)hj
k~?7Xk, | ( x u x p_
pq



& /'(.

!v\,Vl7xp$q7Mqbx7M^QZQ,xjqqbx7!vh\,V7l7xpzq*t_,,q9mRQZ[(v7deOd,Y|SkgQZQ_eNPV7lyT7gG\,`fT7QNP[kQZY\[(NbdVNPV
gj\Y([(NP\,`P`bod,{hSkQZY\{j`bQ\Yw,d
3e7Q_WZNfS(NbdVgY(dpWXQ_S(SkQ_S_q9rtVsk ( fi t$p
~
;,_ZZkZ
,+ XXL j X _ ,NhX
X ghg^qh,,Dp v.\' q
p

)

UU

fiJournal Artificial Intelligence Research 14 (2001) 29-51

Submitted 6/00; published 2/01

Speeding Convergence Value Iteration
Partially Observable Markov Decision Processes
Nevin L. Zhang
Weihong Zhang

Department Computer Science
Hong Kong University Science & Technology
Clear Water Bay Road, Kowloon, Hong Kong, CHINA

lzhang@cs.ust.hk
wzhang@cs.ust.hk

Abstract

Partially observable Markov decision processes (POMDPs) recently become popular among many AI researchers serve natural model planning
uncertainty. Value iteration well-known algorithm finding optimal policies
POMDPs. typically takes large number iterations converge. paper proposes
method accelerating convergence value iteration. method evaluated array benchmark problems found effective: enabled
value iteration converge iterations test problems.

1. Introduction
POMDPs model sequential decision making problems effects actions nondeterministic state world known certainty. attracted
many researchers Operations Research Artificial Intelligence potential applications wide range areas (Monahan 1982, Cassandra 1998b), one
planning uncertainty. Unfortunately, still significant gap potential actual applications, primarily due lack effective solution methods.
reason, much recent effort devoted finding ecient algorithms POMDPs
(e.g., Parr Russell 1995, Hauskrecht 1997b, Cassandra 1998a, Hansen 1998, Kaelbling
et al. 1998, Zhang et al. 1999).
Value iteration well-known algorithm POMDPs (Smallwood Sondik 1973,
Puterman 1990). starts initial value function iteratively performs dynamic
programming (DP) updates generate sequence value functions. sequence converges optimal value function. Value iteration terminates predetermined
convergence condition met.
Value iteration performs typically large number DP updates converges
DP updates notoriously expensive. paper, develop technique reducing
number DP updates.
DP update takes (the finite representation of) value function input returns (the
finite representation of) another value function. output value function closer
optimal input value function. sense, say DP update improves
input. propose approximation DP update called point-based DP update. Pointbased DP update also improves input, possibly lesser degree standard DP
update. hand, computationally much cheaper. value iteration,
c 2001 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiZhang & Zhang
perform point-based DP update number times two standard DP updates.
number standard DP updates reduced way since point-based DP update
improves input. reduction come high cost since point-based DP
update takes little time.
rest paper organized follows. next section shall give brief
review POMDPs value iteration. basic idea behind point-based DP update
explained Section 3. theoretical preparations Section 4, shall work
details point-based DP update Section 5. Empirical results reported
Section 6 possible variations evaluated Section 7. Finally, shall discuss related
work Section 8 provide concluding remarks Section 9.

2. POMDPs Value Iteration
2.1 POMDPs
partially observable Markov decision process (POMDP) sequential decision model
agent acts stochastic environment partial knowledge
state environment. set possible states environment referred
state space denoted . point time, environment one
possible states. agent directly observe state. Rather, receives
observation it. denote set possible observations Z . receiving
observation, agent chooses action set possible actions executes
action. Thereafter, agent receives immediate reward environment evolves
stochastically next state.
Mathematically, POMDP specified by: three sets , Z , A; reward function
r(s; a); transition probability function P (s0 js; a); observation probability function
P (z js0 ; a). reward function characterizes dependency immediate reward
current state current action a. transition probability characterizes
dependency next state s0 current state current action a.
observation probability characterizes dependency observation z next time
point next state s0 current action a.

2.2 Policies Value Functions
Since current observation fully reveal identity current state, agent
needs consider previous observations actions choosing action. Information current state contained current observation, previous observations,
previous actions summarized probability distribution state space
(Astrom 1965). probability distribution sometimes called belief state denoted
b. possible state s, b(s) probability current state s. set
possible belief states called belief space. denote B.
policy prescribes action possible belief state. words,
mapping B A. Associated policy value function V . belief
state b, V (b) expected total discounted reward agent receives following
30

fiSpeeding Value Iteration POMDPS
policy starting b,

1
X
r ];

V (b) = E;b[

t=0



(1)

rt reward received time
(0<1) discount factor. known
exists policy V (b)V (b) policy belief
state b (Puterman 1990). policy called optimal policy. value function
optimal policy called optimal value function. denote V . positive
number , policy -optimal

V (b) + V (b) 8b 2 B:

2.3 Value Iteration

explain value iteration, need consider belief state evolves time. Let b
current belief state. belief state next point time determined
current belief state, current action a, next observation z . denote baz .
state s0 , baz (s0 ) given

baz (s0 ) =

Ps P (z; s0js; a)b(s)

;
(2)
P (z jb; a)
P
P (z; s0 js; a)=P (z js0 ; a)P (s0 js; a) P (z jb; a)= s;s0 P (z; s0 js; a)b(s) renormal-

ization constant. notation suggests, constant also interpreted
probability observing z taking action belief state b.
Define operator takes value function V returns another value function
TV follows:
X
TV (b) = max
[r(b; a) + P (z jb; a)V (baz )] 8b 2 B
(3)

z

P
r(b; a) = r(s; a)b(s) expected immediate reward taking action belief
state b. given value function V , policy said V -improving
X P (zjb; a)V (ba)] 8b 2 B:
(b) = arg max
[
r
(
b;

)
+

z

z

(4)

Value iteration algorithm finding -optimal policies. starts initial
value function V0 iterates using following formula:
Vn = TVn,1 :
known (e.g., Puterman 1990, Theorem 6.9) Vn converges V n goes
infinity. Value iteration terminates Bellman residual maxb jVn (b) , Vn,1 (b)j falls
(1 , )=2. does, Vn -improving policy -optimal (e.g., Puterman 1990).
Since infinitely many belief states, value functions cannot explicitly represented. Fortunately, value functions one encounters process value iteration
admit implicit finite representations. explaining why, first introduce several technical concepts notations.
31

fiZhang & Zhang

1
2
3
4

(1, 0)

(0, 1)

Figure 1: Illustration Technical Concepts.

2.4 Technical Notational Considerations

convenience, view functions state space vectors size jSj. use lower
case Greek letters ff fi refer vectors script letters V U refer sets
vectors. contrast, upper case letters V U always refer value functions,
functions belief space B. Note belief state function state space
hence viewed vector.
set V vectors induces value function follows:

f (b) = max
ffb 8b 2 B;
ff2V

P

ffb inner product ff b, ffb= ff(s)b(s). convenience,
shall abuse notation use V denote set vectors value function induced
set. convention, quantity f (b) written V (b).
vector set extraneous removal affect function set
induces. useful otherwise. set vectors parsimonious contains extraneous
vectors.
Given set V vector ff V , define open witness region R(ff; V ) closed
witness region R(ff; V ) ff w.r.t V regions belief space B respectively given

R(ff; V ) = fb 2 Bjffb > ff0 b; 8ff0 2 Vnfffgg
R(ff; V ) = fb 2 Bjffb ff0 b; 8ff0 2 Vnfffgg
literature, belief state open witness region R(ff; V ) usually called witness
point ff since testifies fact ff useful. paper, shall call belief
state closed witness region R(ff; V ) witness point ff.
Figure 1 diagrammatically illustrates aforementioned concepts. line
bottom depicts belief space POMDP two states. point left end
represents probability distribution concentrates masses one states,
point right end represents one concentrates masses
state. four vectors ff1 , ff2 , ff3 , ff4 . four slanting lines represent
32

fiSpeeding Value Iteration POMDPS

V ; ):

VI(

1.
2.
3.
4.
5.
6.
7.



(1 , )=2.

f
U

DP-UPDATE(V ).
maxb jU (b) , V (b)j;
(r > ) V U .
g ( r > ).
return U .

r

Figure 2: Value Iteration POMDPs.
linear functions ffi b (i=1; 2; 3; 4) b. value function induced four vectors
represented three bold line segments top. Vector ff3 extraneous
removal affect induced function. vectors useful. first
segment line bottom witness region ff1 , second segment
ff2 , last segment ff4 .

2.5 Finite Representation Value Functions Value Iteration

value function V represented set vectors equals value function induced
set. value function representable finite set vectors,
unique parsimonious set vectors represents function (Littman et al. 1995a).
Sondik (1971) shown value function V representable finite set
vectors, value function TV . process obtaining parsimonious
representation TV parsimonious representation V usually referred
dynamic programming (DP) update. Let V parsimonious set vectors represents
V . convenience, use V denote parsimonious set vectors represents
TV .
practice, value iteration POMDPs carried directly terms value
functions themselves. Rather, carried terms sets vectors represent
value functions (Figure 2). One begins initial set vectors V . iteration,
one performs DP update previous parsimonious set V vectors obtains new
parsimonious set vectors U . One continues Bellman residual maxb jU (b) ,V (b)j,
determined solving sequence linear programs, falls threshold.

3. Point-Based DP Update: Idea
section explains intuitions behind point-based DP update. begin
so-called backup operator.

3.1 Backup Operator
Let V set vectors b belief state. backup operator constructs new

vector three steps:

33

fiZhang & Zhang
1. action observation z , find vector V maximum inner
product bza | belief state case z observed executing action
belief state b. one vector, break ties lexicographically
(Littman 1996). Denote vector found fia;z .
2. action a, construct vector fia by:
X
fia (s) = r(s; a) + P (s0 ; zjs; a)fia;z (s0); 8s 2 :
z;s0

3. Find vector, among fia 's, maximum inner product b.
one vector, break ties lexicographically. Denote vector found
backup(b; V ).
shown (Smallwood Sondik 1973, Littman 1996) backup(b; V )
member V | set vectors obtained performing DP update V . Moreover, b
witness point backup(b; V ).
fact corner stone several DP update algorithms. one-pass
algorithm (Sondik 1971), linear-support algorithm (Cheng 1988), relaxed-region
algorithm (Cheng 1988) operate following way: first systematically search
witness points vectors V obtain vectors using backup operator.
witness algorithm (Kaelbling et al. 1998) employs similar idea.

3.2 Point-Based DP Update

Systematically searching witness points vectors V computationally expensive. Point-based DP update this. Instead, uses heuristics come
collection belief points backs points. might miss witness points
vectors V hence approximation standard DP update.
Obviously, backing different belief states might result vector.
words, backup(b; V ) backup(b0 ; V ) might equal two different belief states b
b0. such, possible one gets vectors many backups. One issue
design point-based DP update avoid this. address issue using witness
points.
Point-based DP update assumes one knows witness point vector
input set. backs points.1 rationale witness points vectors
given set \scatter belief space" hence chance creating duplicate
vectors low. experiments confirmed intuition.
assumption made point-based DP update reasonable input
either output standard DP update another point-based DP update. Standard
DP update computes, by-products, witness point output vectors.
seen later, point-based DP update also shares property design.

3.3 Use Point-Based DP Update

indicated introduction, propose perform point-based DP update number
times two standard DP updates. specific, propose modify
1. seen later, point-based DP update also backs points.

34

fiSpeeding Value Iteration POMDPS

VI1(

1.
2.
3.
4.
5.
6.
7.

V ; ):



(1 , )=2.

f
U

DP-UPDATE(V ).
maxb jU (b) , V (b)j;
(r > ) V POINT-BASED-VI(U ; ).
g ( r > ).
return U .

r

U ; ):
1. f
2.
V U.
3.
U POINT-BASED-DPU(V )
4. g (STOP(U ; V ; )= false).
5. return V .
POINT-BASED-VI(

Figure 3: Modified Value Iteration POMDPs.
value iteration way shown Figure 3. Note change line
5. Instead assigning U directly V , pass subroutine POINT-BASED-VI
assign output subroutine V . subroutine functions way
value iteration, except performs point-based DP updates rather standard DP
updates. Hence call point-based value iteration.
Figure 4 illustrates basic idea behind modified value iteration contrast value
iteration. initial value function properly selected,2 sequence value functions produced value iteration converges monotonically optimal value function.
Convergence usually takes long time partially standard DP updates, indicated
fat upward arrows, computationally expensive. Modified value iteration interleaves
standard DP updates point-based DP updates, indicated thin upward
arrows. Point-based DP update improve value function much standard DP
update. However, complexity much lower. consequence, modified value iteration
hopefully converge less time.
idea interleaving standard DP updates approximate updates back
finite number belief points due Cheng (1988). work differs Cheng's
method mainly way select belief points. detailed discussion differences
given Section 8.
modified value iteration algorithm raises three issues. First, stopping criterion
use point-based value iteration? Second, guarantee stopping
criterion eventually satisfied? Third, guarantee convergence
modified value iteration algorithm itself? address issues, introduce concept
uniformly improvable value functions.
2. show Section 5.5.

35

fiZhang & Zhang

.
.
.

.
.
.

standard update

point-based update

Value iteration

Modified value iteration

Figure 4: Illustration Basic Idea behind Modified Value Iteration.

4. Uniformly Improvable Value Functions

Suppose V U two value functions. say U dominates V write V U
V (b)U (b) every belief state b. value function V said uniformly improvable
V TV . set U vectors dominates another set V vectors value function induced
U dominates induced V . set vectors unformly improvable value
function induces is.

Lemma 1 operator isotone sense two value functions V
U , V U implies TV TU . 2
lemma obvious well known MDP community (Puterman 1990).
Nonetheless, enables us explain intuition behind term \uniformly improvable".
Suppose V uniformly improvable value function suppose value iteration starts
V . sequence value functions generated monotonically increasing
converges optimal value function V . implies V TV V . is, TV (b)
closer V (b) V (b) belief states b.
following lemma used later address issues listed end
previous section.

Lemma 2 Consider two value functions V U . V uniformly improvable
V U TV , U also uniformly improvable.
Proof: Since V U , TV TU Lemma 1. also condition U TV .
Consequently, U TU . is, U uniformly improvable. 2
Corollary 1 value function V uniformly improvable, TV . 2

5. Point-Based DP Update: Algorithm

Point-based DP update approximation standard DP update. designing
point-based DP update, try strike balance quality approximation
36

fiSpeeding Value Iteration POMDPS
computational complexity. also need guarantee modified value iteration
algorithm converges.

5.1 Backing Witness Points Input Vectors
Let V set vectors going perform point-based DP update.
mentioned earlier, assume know witness point vector V . Denote

witness point vector ff w(ff). Point-based DP update first backs
points thereby obtains new set vectors. specific, begins
following subroutine:

V ):
1. U ;.
2. fi 2 V
3.
ff backup(w(fi ); V ).
4.
ff 2= U
5.
w(ff)
w(fi ).
6.
U U [ fffg.
7. return U .
backUpWitnessPoints(

subroutine, line 4 makes sure resulting set U contains duplicates
line 5 takes note fact w(fi ) also witness point ff (w.r.t V ).

5.2 Retaining Uniform Improvability

address convergence issues, assume input point-based DP update
uniformly improvable require output also uniformly improvable.
explain later assumption facilitated requirement guarantees
convergence modified value iteration algorithm. subsection, discuss
requirement fulfilled.
Point-based DP update constructs new vectors backing belief points
new vectors members V . Hence output point-based DP update trivially
dominated V . output also dominates V , must uniformly improvable
Lemma 2. question guarantee output dominates V .
Consider set U resulted backUpWitnessPoints. dominate V ,
must exist belief state b U (b)<V (b). Consequently, must exist vector
fi V U (b)<fi b. gives us following subroutine testing whether
U dominates V for, case, adding vectors U does.
subroutine called backUpLPPoints belief points found solving linear
programs.

U ; V ):
1. fi 2 V
2.
f
backUpLPPoints(

3.
4.
5.

b

b 6

dominanceCheck(
= NULL,
backup(
).

ff

fi; U ).

b; V

37

fiZhang & Zhang
6.
7.
8.

w(

ff)

b.

U U [ fffg.
g (b 6= NULL).

subroutine examines vectors V one one. fi V , calls another subroutine
try find belief point b U (b)<fi b. point found,
backs it, resulting new vector ff (line 5). property backup
operator, b witness point ff w.r.t V (line 6). cannot vector U
equals ff.3 Consequently, vector simply added U without checking duplicates
(line 7). process repeats fi dominanceCheck returns NULL,
belief points b U (b)<fi b. backUpLPPoints terminates,
U (b)fi b vector fi V belief point b. Hence U dominates V .
subroutine dominanceCheck(fi; U ) first checks whether exists vector ff U
pointwise dominates fi , ff(s)fi (s) states s. ff exists, returns
NULL right away. Otherwise, solves following linear program LP(fi; U ). returns
solution point b optimal value objective function positive returns
NULL otherwise:4
dominanceCheck

fi; U ):
1. Variables: x, b(s) state
2. Maximize: x.
3. Constraints:
Ps fi(s)b(s) x+ Ps ff(s)b(b) ff2U
4.
Ps b(s) = 1, b(s) 0 states s.
5.
LP(

5.3 Algorithm

complete description point-based DP update. first backs witness
points input vectors. Then, solves linear programs identify belief points
backs output dominates input hence uniformly improvable.
POINT-BASED-DPU(V ):
1. U backUpWitnessPoints(V )
2. backUpLPPoints(U ; V )
3. return U .
terms computational complexity, point-based DP update performs exactly jVj
backups first step jT Vj backups second step. solves linear
programs second step. number linear programs solved upper bounded
jT Vj+jVj usually much smaller bound. numbers constraints
linear programs upper bounded jT Vj + 1.
3. Since b witness ff w.r.t V , ffb=T V (b). Since V uniformly improvable, also
V (b)V (b). Together obvious fact V (b)fi b condition fi b>U (b),
ffb>U (b). Consequently, cannot vector U equals ff.
4. actual implementation, solution point b used backup even optimal value
objective function negative. case, duplication check needed.

38

fiSpeeding Value Iteration POMDPS
several algorithms standard DP update. Among them, incremental
pruning algorithm (Zhang Liu 1997) shown ecient
theoretically empirically (Cassandra et al. 1997). Empirical results (Section 6) reveal
point-based DP update much less expensive incremental pruning number
test problems. noted, however, proved always
case.

5.4 Stopping Point-Based Value Iteration

Consider do-while loop POINT-BASED-VI (Figure 2). Starting initial set
vectors, generates sequence sets. initial set uniformly improvable,
value functions represented sets monotonically increasing upper bounded
optimal value function. such, converge value function (which
necessarily optimal value function). question stop do-while loop.
straightforward method would compute distance maxb jU (b) ,V (b)j
two consecutive sets U V stop distance falls threshold. compute
distance, one needs solve jUj+jVj linear programs, time consuming. use
metric less expensive compute. specific, stop do-while loop

max
jU (w(ff)) , V (w(ff))j 1 :
ff2U
words, calculate maximum difference U V witness points
vectors U stop do-while loop quantity larger 1 .
threshold Bellman residual terminating value iteration 1 number
0 1. experiments, set 0:1.

5.5 Convergence Modified Value Iteration
Let Vn Vn0 sets vectors respectively generated VI (Figure 1) VI1 (Figure

2) line 3 iteration n. Suppose initial set uniformly improvable. Using Lemma 2
Corollary 1, one prove induction Vn Vn0 uniformly improvable
n induced value functions increase n. Moreover, Vn0 dominates Vn
dominated optimal value function. well known Vn converges optimal
value function. Therefore, Vn0 must also converge optimal value function.
question make sure initial set uniformly improvable.
following lemma answers question.

Lemma 3 Let m= mins;a r(s; a), c = m=(1 , ), ffc vector whose components
c. singleton set fffc g uniformly improvable.
Proof: Use V denote value function induced singleton set. belief

state b,

TV (b) = max
[r(b; a) +

39

X P (zjb; a)V (ba)]
z

z

fiZhang & Zhang
= max
[r(b; a) +


X P (zjb; a)c]
z

= max
[r(b; a) + m=(1 , )]

+ m=(1 , )
= m=(1 , ) = V (b):
Therefore value function, hence singleton set, uniformly improvable. 2
Experiments (Section 6) shown VI1 ecient VI number test
problems. noted, however, proved always case.
Moreover, complexity results Papadimitriou Tsitsiklis (1987) implies task
finding -optimal policies POMDPs PSPACE-complete. Hence, worst-case
complexity remain same.

5.6 Computing Bellman Residual

modified value iteration algorithm, input V standard DP update always
uniformly improvable. such, output U dominates input. fact used
simplify computation Bellman residual. matter fact, Bellman residual
maxb jU (b),V (b)j reduces maxb (U (b),V (b)).
compute latter quantity, one goes vectors U one one.
vector, one solves linear program LP(ff; V ). quantity simply maximum
optimal values objective functions linear programs. Without uniformly
improvability, would repeat process one time roles V
U exchanged.

6. Empirical Results Discussions

Experiments conducted empirically determine effectiveness point-based
DP update speeding value iteration. Eight problems used experiments.
literature, problems commonly referred 4x3CO, Cheese, 4x4, Part
Painting, Tiger, Shuttle, Network, Aircraft ID. obtained problem files
Tony Cassandra. Information sizes summarized following table.
Problem jSj jZj jAj
4x3CO 11
4 11
4x4 16
2
4
Tiger 2
2
3
Network 7
2
4

Problem jSj jZj jAj
Cheese 11
4
7
Painting 4
4
2
Shuttle 8
2
3
Aircraft ID 12
5
6

effectiveness point-based DP update determined comparing standard
value iteration algorithm VI modified value iteration algorithm VI1. implementation standard value iteration used experiments borrowed Hansen.
Modified value iteration implemented top Hansen's code.5 discount factor
set 0:95 round-off precision set 10,6 . experiments conducted
UltraSparc II machine.
5. implementation available request.

40

fiSpeeding Value Iteration POMDPS
Table 1 shows amounts time VI VI1 took compute 0.01-optimal policies
test problems. see VI1 consistently ecient VI, especially
larger problems. 1.3, 2.8, 5, 62, 141, 173, 49 times faster VI
first seven problems respectively. Aircraft ID problem, VI1 able compute
0.01-optimal policy less 8 hours, VI able produce 33-optimal
policy 40 hours.
4x3CO Cheese 4x4 Paint Tiger Shuttle Network Aircraft
VI
3.2
13.9 27.15 37.84 79.14 5,199 12,478
VI1
2.4
5.0 5.30
.61
.56
30
253 27,676
Table 1: Time Computing 0.01-Optimal Policies Seconds.
Various statistics given Table 2 highlight computational properties
VI1 explain superior performance. numbers standard DP updates carried
VI VI1 shown rows 1 3. see VI1 performed 5
standard updates test problems, VI performed 125. indicates
point-based update effective cutting number standard updates
required reach convergence. consequence, VI1 spent much less time VI
standard updates (row 2 4).6
Problem
4x3CO Cheese 4x4 Paint Tiger Shuttle Network
DPU #
125
129 130 127 163
174
214
VI
Time
2.00
7.63 17.83 33.39 70.44 3,198
8,738
DPU #
4
4
3
3
3
5
5
Time
.05
.09
.15
.21
.09
13
82
VI1 PBDPU #
377
219 173 244 515
455
670
Time
2.32
4.86 5.09
.37
.45
10
139
Quality Ratio
.33
.58
.74
.51
.31
0.31
.32
Complexity Ratio
.38
.37
.21 .0057 .002 .0012
.005
Table 2: Detailed Statistics.
Row 5 shows numbers point-based updates carried VI1. see
numbers actually larger numbers standard updates performed VI.
expected. see why, recall point-based update approximation standard
update. Let V set vectors uniformly improvable. Use 0 V denote
sets vectors resulted performing point-based update V . belief state b,
V (b)T 0 V (b)T V (b). means point-based update improves V
much standard update. Consequently, use point-based update increases total
6. Note times shown include time testing stopping condition.

41

fiZhang & Zhang
number iterations, i.e number standard updates plus number point-based
updates.
Intuitively, better point-based update approximation standard update,
less difference total number iterations VI1 VI need take. So,
ratio two numbers problem used, certain extent,
measurement quality point-based update problem. shall refer
quality ratio point-based update. Row 7 shows quality ratios seven test
problems. see quality point-based update fairly good stable across
problems.
Row 8 shows, test problem, ratio average time standard
update performed VI point-based update performed VI1. ratios
measure, certain extent, complexity point-based update relative standard update
hence referred complexity ratios point-based update. see that,
predicted analysis Section 5.3, point-based update consistently less expensive
standard update. differences 200 times last four problems.
summary, statistics suggest quality point-based update relative
standard update fairly good stable complexity much lower. Together
fact point-based update drastically reduces number standard updates,
explain superior performance VI1.
close section, let us note VI finds policies quality7 close
predetermined criterion, VI1 usually finds much better ones (Table 3).
VI checks policy quality (standard) update, VI1
point-based updates.

Problem 4x3CO Cheese 4x4 Paint Tiger Shuttle Network
VI
.0095 .0099 .0099 .01
.0098 .0097 .0098
VI1
.0008 .0008 .0009 .0007 .0007 .00015 .001
Table 3: Quality Policies Found VI VI1.

7. Variations Point-Based DP Update
studied several possible variations point-based update. based
ideas drawn existing literature. None variations able significantly
enhance effectiveness algorithm accelerating value iteration. Nonetheless brief
discussion still worthwhile. discussion provides insights
algorithm shows compares related work discussed
detail next section.
variations divide two categories: aimed improving quality
point-based update aimed reducing complexity. shall discuss one
one.
7. Quality policy estimated using Bellman residual.

42

fiSpeeding Value Iteration POMDPS

7.1 Improving Quality Point-Based DP Update
natural way improve quality point-based update back additional
belief points. explored use randomly generated points (Cassandra 1998a),
additional by-product points, projected points (Hauskrecht 2000). additional byproduct points refer points generated various stages standard update, excluding
witness points already used. Projected points points reachable
one step points given rise useful vectors.
Table 4 shows, test problem, number standard updates amount
time VI1 took without using projected points. see use
projected points reduce number standard updates one 4x3CO, Cheese,
Shuttle. However, increased time complexity test problems except Network.
two kinds points combinations three significantly improve
VI1 either. contrary, often significantly degraded performance VI1.
w/o

w/o


4x3CO Cheese 4x4 Paint Tiger Shuttle Network Aircraft
4
4
3
3
3
5
5
7
3
3
3
3
3
4
5
7
2.4
5.0 5.3
.61
.56
30
253 27,676
3.2
5.6 7.4
.69
2.3
33
140 35,791

Table 4: Number Standard DP Updates Time VI1 Took Without
Using Projected Points.
close examination experimental data reveals plausible explanation. Point-based
update, stands, already reduce number standard updates
among last two three time-consuming. such, possibility
reducing number standard updates low even reduced,
effect roughly shift time-consuming standard updates earlier. Consequently,
unlikely achieve substantial gains. hand, use additional points
always increases overheads.

7.2 Reducing Complexity Point-Based DP Update
Solving linear programs expensive operation point-based update. obvious
way speed avoid linear programs. Point-based update solves linear programs
backs belief points found guarantee uniform improvability.
linear programs skipped, must way guarantee uniform
improvability. easy solution problem. Suppose V set vectors
try update uniformly improvable. Let U set obtained V
backing witness points, done without solving linear programs.
set U might might uniformly improvable. However, union V [ U
guaranteed uniformly improvable. Therefore reprogram point-based update
43

fiZhang & Zhang
return union hope reduce complexity. resulting variation called
non-LP point-based DP update.
Another way reduce complexity simplify backup operator (Section 3.1) using
idea behind modified policy iteration (e.g., Puterman 1990). backing
set vectors V belief point, operator considers possible actions picks
one optimal according V -improving policy. speed up, one simply
use action found belief point previous standard update. resulting
operator called MPI backup operator, MPI stands modified policy
iteration. V output previous standard update, two actions often
same. However, usually different V result several point-based updates
following standard update.
Table 5 shows, test problem, number standard updates amount
time VI1 took non-LP point-based update used (together standard
backup operator). Comparing statistics point-based update (Tables 1
2), see number standard updates increased test problems
amount time also increased except first three problems. plausible
reasons. First, clear non-LP point-based update improve set vectors
much point-based update. Consequently, less effective reducing number
standard updates. Second, although solve linear programs, non-LP point-based
update produces extraneous vectors. means might need deal large
number vectors later iterations hence might ecient point-based
update all.
4x3CO Cheese 4x4 Paint Tiger Shuttle Network Aircraft
4
5
8
4
4
7
10
8
2.38
2.38 3.4
.75
.88
44
599 32,281
Table 5: Number Standard DP Updates Time VI1 Took Non-LP PointBased Update Used.
Extraneous vectors pruned. matter fact, prune vectors
pointwise-dominated others (hence extraneous) experiments. inexpensive.
Pruning extraneous vectors, however, requires solution linear programs
expensive. Zhang et al. (1999), discussed done
ecient way. Still results good Table 5. paper,
also explored combination non-LP point-based update MPI backup
operator. again, results good Table 5. reason
MPI backup operator compromises quality point-based update.
quality non-LP point-based update improved using Gauss-Seidel
asynchronous update (Denardo 1982). Suppose updating set V . idea to,
vector created backup, add copy vector set V right away.
hope increase components later vectors. tested idea preparing
Zhang et al. (1999) found costs almost always exceed benefits. reason
44

fiSpeeding Value Iteration POMDPS
asynchronous update introduces many extraneous vectors synchronous
update.
conclusion, point-based conceptually simple clean. compared
complex variations, seems effective accelerating value iteration.

8. Related Work
Work presented paper three levels: point-based DP update bottom, pointbased value iteration middle, modified value iteration top. section,
discuss previous relevant work three levels.

8.1 Point-Based DP Update Standard DP Update

mentioned Section 3.1, point-based update closely related several exact algorithms standard update, namely one-pass (Sondik 1971), linear-support (Cheng 1988),
relaxed-region (Cheng 1988). backup finite number belief points.
difference exact algorithms generate points systematically,
expensive, point-based update generate points heuristically.
several exact algorithms standard DP update. enumeration/reduction algorithms (Monahan 1982, Eagle 1984) incremental pruning (Zhang
Liu 1997, Cassandra et al. 1997) first generate set vectors parsimonious prune extraneous vectors solving linear programs. Point-based DP
update never generates extraneous vectors. might generate duplicate vectors. However,
duplicates pruned without solving linear programs. witness algorithm (Kaelbling
et al. 1998) two stages. first stage, considers actions one one.
action, constructs set vectors based finite number systematically generated
belief points using operator similar backup operator. second stage, vectors
different actions pooled together extraneous vectors pruned.
proposals carry standard update approximately dropping vectors
marginally useful (e.g., Kaelbling et al. 1998, Hansen 1998). one idea
along line empirically evaluated. Recall achieve -optimality,
stopping threshold Bellman residual = (1 , )=2. idea drop
marginally useful vectors various stages standard update keeping overall
error =2 stop Bellman residual falls =2. easy see
-optimality still guaranteed way. also tried start large error
tolerance hope prune vectors gradually decrease tolerance level =2.
Reasonable improvements observed especially one need quality
policy high. However approximate updates much expensive
point-based updates. context modified value iteration algorithm,
suitable alternatives standard updates point-based update.

8.2 Point-Based Value Iteration Value Function Approximation

Point-based value iteration starts set vectors generates sequence vector
sets repeatedly applying point-based update. last set used approximate
optimal value function.
45

fiZhang & Zhang
Various methods approximating optimal value function developed
previously.8 compare point-based value iteration along two dimensions: (1) Whether map one set vectors another, whether
interleaved standard updates, (2) do, whether guarantee convergence interleaved standard updates.
Lovejoy (1993) proposes approximate optimal value function V POMDP
using optimal value function underlying Markov decision process (MDP).
latter function state space. V approximated one vector.
Littman et al. (1995b) extend idea approximate V using jAj vectors,
corresponds Q-function underlying MDP. extension recently
introduced Zubek Dietterich (2000). idea base approximation
underlying MDP, rather so-called even-odd POMDP identical original
POMDP except state fully observable even time steps. Platzman (1980)
suggests approximating V using value functions one fixed suboptimal policies
constructed heuristically. methods start set vectors
hence map set vectors another. However, easily adapted so.
However, put predetermined limit number output vectors. Consequently,
convergence guaranteed interleaved standard updates.
Fast informed bound (Hauskrecht 1997a), Q-function curve fitting (Littman et al. 1995b),
softmax curve fitting (Parr Russell 1995) map set vectors another. However, differ drastically point-based value iteration
ways deriving next set vectors current one. Regardless size
current set, fast informed bound Q-function curve fitting always produces jAj vectors,
one action. softmax curve fitting, number vectors also determined
priori, although necessarily related number actions. methods
interleaved standard DP updates. Unlike point-based value iteration,
may converge (Hauskrecht 2000). Even cases converge themselves,
algorithms resulting interleaving standard updates necessarily
converge due priori limits number vectors.
Grid-based interpolation/extrapolation methods (Lovejoy 1991, Brafman 1997, Hauskrecht
1997b) approximate value functions discretizing belief space using fixed variable
grid maintaining values grid points. Values non-grid points estimated interpolation/extrapolation needed. methods cannot interleaved
standard DP updates work sets vectors.
grid-based methods work sets vectors. Lovejoy's method lower
bound optimal value function (Lovejoy 1991), instance, falls category.
method actually identical point-based value iteration except way derives
next set vectors current one. Instead using point-based update, backs
grid points regular grid. Convergence method guaranteed. algorithm
resulting interleaving standard updates may converge either.
8. Hauskrecht (2000) conducted extensive survey previous value function approximation methods
empirically compared terms of, among criteria, complexity quality. would
interesting also include point-based value iteration empirical comparison. done
present paper focus using point-based value iteration speed value iteration,
rather using value function approximation method.

46

fiSpeeding Value Iteration POMDPS
incremental linear-function method (Hauskrecht 2000) roughly corresponds
variation point-based value iteration uses non-LP point-based update (Section 7.2)
augmented Gauss-Seidel asynchronous update. method access
witness point. starts, purpose backup, extreme points belief space
supplement projected points. choice points appears poor
leads large number vectors consequently backup process \usually stopped
well before" convergence (Hauskrecht 2000).

8.3 Previous Work Related Modified Value Iteration
basic idea modified value iteration algorithm VI1 add, two
consecutive standard updates, operations inexpensive. hope
operations significantly improve quality vector set hence reduce number
standard updates.
Several previous algorithms work fashion. differences lie operations inserted standard updates. reward revision algorithm (White
et al. 1989) constructs, iteration, second POMDP based current set
vectors. runs value iteration second POMDP predetermined number steps.
output used modify current set vectors resulting set vectors
fed next standard update.
reward revision expected speed value iteration? Let V value function
represented current set vectors. second POMDP constructed way
shares optimal value function original POMDP V optimal.
such, one would expect two POMDPs similar optimal value functions V
close optimal. Consequently, running value iteration second POMDP
improve current value function. inexpensive second
POMDP fully observable.
Reward revision conceptually much complex VI1 seems less
ecient. According White et al. (1989), reward revision can, average, reduce
number standard updates 80% computational time 85%. Tables 1
2, see differences VI1 VI much larger.
iterative discretization procedure (IDP) proposed Cheng (1988) similar
VI1. two main differences. VI1 uses point-based update, IDP uses non-LP
point-based update. point-based update VI1 backs witness points belief
points found linear programs, non-LP point-based update IDP backs extreme
points witness regions found by-products Cheng's linear-support relaxed region
algorithms.
Cheng conducted extensive experiments determine effectiveness IDP
accelerating value iteration. found IDP cut number standard updates
much 55% amount time much 80%. much less
significant reductions presented Tables 1 2.
Hansen's policy iteration (PI) algorithm maintains policy form finite-state
controller. node controller represents vector. iteration, standard
update performed set vectors represented current policy. resulting
47

fiZhang & Zhang
set vectors used improve current policy9 improved policy evaluated
solving system linear equations. gives rise third set vectors,
fed next standard update.
compared performance Hansen's PI algorithm VI1. Table 6 shows,
test problem, number standard updates amount time algorithm took.
Comparing statistics VI1 (Table 4), see PI performed standard
updates VI1. indicates policy improvement/evaluation less effective
point-based value iteration cutting number standard updates. terms
time, PI ecient VI1 first three problems significantly less ecient
problems.
4x3CO Cheese 4x4 Paint Tiger Shuttle Network Aircraft
3
7
7
10
14
9
18
9
.14
.87 3.4
3.8
4.5
60
1,109 66,964
Table 6: Number Standard Updates Time PI Took Compute 0.01-Optimal
Policies.
might possible combine VI1 PI. specific, one probably
insert policy improvement/evaluation step two point-based updates pointbased value iteration (Figure 2). accelerate point-based value iteration
hence VI1. possibility benefits yet investigated.

9. Conclusions Future Directions
Value iteration popular algorithm finding -optimal policies POMDPs. typically performs large number DP updates convergence DP updates
notoriously expensive. paper, developed technique called point-based DP
update reducing number standard DP updates. technique conceptually
simple clean. easily incorporated existing POMDP value iteration algorithms. Empirical studies shown point-based DP update drastically
cut number standard DP updates hence significantly speeding value
iteration. Moreover, point-based DP update compares favorably complex
variations think also. also compares favorably policy iteration.
algorithm presented paper still requires standard DP updates. limits
capability solving large POMDPs. One future direction investigate properties
point-based value iteration approximation algorithm itself. Another direction
design ecient algorithms standard DP updates special models. currently
exploring latter direction.
9. Hansen's writings, policy improvement includes DP update substep. DP update
considered part policy improvement.

48

fiSpeeding Value Iteration POMDPS

Acknowledgments
Research supported Hong Kong Research Grants Council Grant HKUST6125/98E.
authors thank Tony Cassandra Eric Hansen sharing us programs.
also grateful three anonymous reviewers provided insightful comments
suggestions earlier version paper.

References

Astrom, K. J. (1965). Optimal control Markov decision processes incomplete
state estimation. Journal Computer System Sciences, 10, 174-205.
Brafman, R. I. (1997). heuristic variable grid solution POMDPs. Proceedings
Fourteenth National Conference Artificial Intelligence(AAAI-97), 727-733.
Cassandra, A. R., Littman, M. L., Zhang, N. L. (1997). Incremental pruning:
simple, fast, exact method partially observable Markov decision processes.
Proceedings Thirteenth Conference Uncertainty Artificial Intelligence, 54-61.
Cassandra, A. R. (1998a). Exact approximate algorithms partially observable
Markov decision processes, PhD thesis, Department Computer Science, Brown
University.
Cassandra, A. R. (1998b). survey POMDP applications, Working Notes AAAI
1998 Fall Symposium Planning Partially Observable Markov Decision Processes, 17-24.
Denardo, E. V. (1982). Dynamic Programming: Models Applications Prentice-Hall.
Eagle, J. N.(1984). optimal search moving target search path
constrained. Operations Research, 32(5), 1107-1115.
Cheng, H. T.(1988). Algorithms partially observable Markov decision processes. Ph
thesis, University British Columbia.
Hansen, E. A. (1998). Solving POMDPs searching policy space. Proceedings
Fourteenth Conference Uncertainty Artificial Intelligence, 211-219.
Hauskrecht, M.(1997a). Incremental methods computing bounds partially observable
Markov decision processes. Proceedings Fourteenth National Conference
Artificial Intelligence (AAAI-97), 734-749.
Hauskrecht, M.(1997b). Planning control stochastic domains imperfect information. PhD thesis, Department Electrical Engineering Computer Science,
Massachusetts Institute Technology.
Hauskrecht, M. (2000). Value function approximations partially observable Markov
decision processes, Journal Artificial Intelligence Research, 13, 33-95.
49

fiZhang & Zhang
Littman, M. L., Cassandra, A. R. Kaelbling, L. P. (1995a). Ecient dynamicprogramming updates partially observable Markov decision processes. Technical
Report CS-95-19, Brown University.
Littman, M. L., Cassandra, A. R. Kaelbling, L. P. (1995b). Learning policies partially observable environments, scaling up. Proceedings Fifteenth Conference
Machine Learning, 362-370.
Littman, M. L. (1996). Algorithms sequential decision making. Ph thesis, Department Computer Science, Brown University.
Kaelbling, L. P., Littman. M. L. Cassandra, A. R.(1998). Planning acting
partially observable stochastic domains, Artificial Intelligence, Vol 101.
Lovejoy, W. S. (1991). Computationally feasible bounds partially observed Markov
decision processes. Operations Research, 39, 192-175.
Lovejoy, W. S. (1993). Suboptimal policies bounds parameter adaptive decision
processes. Operations Research, 41, 583-599.
Monahan, G. E. (1982). survey partially observable Markov decision processes: theory, models, algorithms. Management Science, 28 (1), 1-16.
Parr, R., Russell, S. (1995). Approximating optimal policies partially observable
stochastic domains. Proceedings Fourteenth International Joint Conference
Artificial Intelligence 1088-1094.
Papadimitriou, C. H., Tsitsiklis, J. N.(1987). complexity Markov decision processes.
Mathematics Operations Research, 12(3), 441-450.
Platzman, L. K.(1980). Optimal infinite-horizon undiscounted control finite probabilistic systems. SIAM Journal Control Optimization, 18, 362-380.
Puterman, M. L. (1990), Markov decision processes, D. P. Heyman M. J. Sobel
(eds.), Handbooks & MS., Vol. 2, 331-434, Elsevier Science Publishers.
Smallwood, R. D. Sondik, E. J. (1973). optimal control partially observable
processes finite horizon. Operations Research, 21, 1071-1088.
Sondik, E. J. (1971). optimal control partially observable Markov processes. PhD
thesis, Stanford University.
Sondik, E. J. (1978). optimal control partially observable Markov processes
infinite horizon, Operations Research, 21, 1071-1088.
White, C. C. III Scherer, W. T. (1989). Solution procedures partially observed
Markov decision processes, Operations Research, 37(5), 791-797.
Zhang, N. L., Lee, S. S., Zhang, W.(1999). method speeding value iteration
partially observable Markov decision processes, Proc. 15th Conference
Uncertainties Artificial Intelligence.
50

fiSpeeding Value Iteration POMDPS
Zhang, N. L. W. Liu (1997). model approximation scheme planning stochastic
domains, Journal Artificial Intelligence Research, 7, 199-230.
Zubek, V. B. Dietterich, T. G.(2000). POMDP approximation algorithm anticipates need observe. appear Proceedings Pacific Rim Conference
Artificial Intelligence (PRICAI-2000), Lecture Notes Computer Science, New
York: Springer-Verlag.

51

fi
