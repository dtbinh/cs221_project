Journal Artificial Intelligence Research 9 (1998) 167-217Submitted 6/98; published 10/98Probabilistic Inference Arbitrary Uncertaintyusing Mixtures Factorized Generalized GaussiansAlberto RuizPedro E. Lpez-de-TeruelM. Carmen GarridoUniversidad de Murcia, Facultad de Informtica,Campus de Espinardo, 30100, Murcia, SpainARUIZ@DIF.UM.ESPEDROE@DITEC.UM.ESMGARRIDO@DIF.UM.ESAbstractpaper presents general efficient framework probabilistic inference learningarbitrary uncertain information. exploits calculation properties finite mixture models, conjugate families factorization. joint probability density variables likelihoodfunction (objective subjective) observation approximated special mixture model,way desired conditional distribution directly obtained without numerical integration. developed extended version expectation maximization (EM) algorithmestimate parameters mixture models uncertain training examples (indirect observations).consequence, piece exact uncertain information input output values consistently handled inference learning stages. ability, extremely useful certain situations, found alternative methods. proposed framework formally justifiedstandard probabilistic principles illustrative examples provided fields nonparametricpattern classification, nonlinear regression pattern completion. Finally, experiments real application comparative results standard databases provide empirical evidence utilitymethod wide range applications.1. Introductionestimation unknown magnitudes available information, form sensor measurements subjective judgments, central problem many fields science engineering.solve task, domain must accurately described model able support desiredrange inferences. satisfactory models cannot derived first principles, approximations must obtained empirical data learning stage.Consider domain Z composed collection objects z =(z1, z2, ..., zn), representedvectors n attributes. Given partial knowledge (expressed general form explainedlater) certain object z, interested computing good estimate z ( ) , closetrue z. allow heterogeneous descriptions; attribute zi may continuous, discrete, symbolic valued, including mixed types. specific subset unknown uncertain attributesestimated, attribute vector partitioned z = (x, y), z denotes targetoutput attributes. target attributes different different objects z. scenario includes several usual inference paradigms. instance, specific target symbolicattribute, task called pattern recognition classification; target attribute continuous, inference task called regression function approximation. general, interested general framework pattern completion partially known objects.Example 1: illustrate setting, assume preprocessor hypothetical computervision system obtains features segmented object. instances domain described1998 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.fiRUIZ, LPEZ-DE-TERUEL & GARRIDOfollowing n=7 attributes: AREA: z1 , COLOR: z2 {white, black, red, ...}, DISTANCE:z3 , SHAPE: z4 {circular, rectangular, triangular, ...}, TEXTURE: z5 {soft, rough, ...},OBJECTTYPE: z6 {door, window, ...} ANGLE: z7 . typical instance may z = (78,blue, 3.4, triangular, soft, window, 45). object partially occluded 3-dimensional,attributes missing uncertain. instance, available information zcould expressed (748, blue black, 3.4, triangular, ?, window 70% door 30%, ?),z1, z2, z6 uncertain, z3, z4 exact z5, z7 missing. case could interested estimates = {z5, z6, z7} even improving knowledge z1 z2.non-deterministic nature many real world domains suggests probabilistic approach,attributes considered random variables. Objects assumed drawn independently identically distributed p(z) = p(z1, ..., zn) = p(x, y), multivariate joint probabilitydensity function attributes, completely characterizes n-dimensional random variable z. simplify notation, use function symbol p() denote different p.d.f.sidentified without risk confusion.According Statistical Decision Theory (Berger 1985), optimum estimators desired attributes obtained minimization suitable expected loss function:OPT ( ) = argmin E{ L( , )| S}L(y, ) loss incurred true estimated . Estimators always features conditional posterior distribution p(y|S) target variables given availableinformation. instance, minimum squared error (MSE) estimator posterior mean,minimum linear loss estimator posterior median minimum error probability (EP, 0-1loss) estimator posterior mode.Example 2: typical problem prediction unknown attribute observed attributes x. case available information written = (x, ?). continuous,reasonable use MSE estimator: MSE ( ) = E{ | x} , general regression function.symbolic loss associated errors, EP estimator adequate:EP ( ) = argmaxy p(y|x) = argmaxy p(x|y)p(y). corresponds Maximum Posteriori ruleBayes Test, widely used Statistical Pattern Recognition.joint density p(z) = p(x, y) plays essential role inference process. implicitlyincludes complete information attribute dependences. principle, desired conditionaldistribution estimator computed joint density adequate integration. Probabilistic Inference process computing desired conditional probabilities (possiblyimplicit) joint distribution. p(z) (the prior, model domain, comprising implications)(a known event, somewhat related certain z), could obtain posterior p(z|S)desired target marginal p(y|S) (the probabilistic consequent).Example 3: observe exact value xo attribute x, i.e. = { x = xo}, have:p( y| ) p(y| xo) =p ( xo , )p( xo , )dyknow instance z certain region R attribute space, i.e. = {z R},compute marginal density joint p(z) = p(x, y) restricted region R (Fig. 1):168fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURESp( y| ) =Xp( x, y|{( x , ) R}) dx =p( x, y) dxp( x, y) dxdyRRgeneral types uncertain information z discussed later.p(y|R)Rp(x,y)xFigure 1. conditional probability density y, assuming z = (x,y) R.summary, joint density p(z) multivariate random variable, subset variables z may be, principle, estimated given available information whole z = (x,y). practical situations, two steps required solve inference problem. First, good modeltrue joint density p(z) must obtained. Second, available information must efficiently processed improve knowledge future, partially specified instances z. twocomplementary aspects, learning inference, approached many scientific fields, providing different methodologies solve practical applications.point view Computer Science, essential goal Inductive Inferencefind approximate intensional definition (properties) unknown concept (subset domain) incomplete extensional definition (finite sample). Machine Learning techniques(Michalski, Carbonell & Mitchell 1977, 1983, Hutchinson 1994) provide practical solutions (e.g.automatic construction decision trees) solve many situations explicit programmingmust avoided. Computational Learning Theory (Valiant 1993, Wolpert 1994, Vapnik 1995)studies feasibility induction terms generalization ability resource requirementsdifferent learning paradigms.general setting Statistical Decision Theory, modeling techniques operational aspects inference (based numerical integration, Monte Carlo simulation, analytic approximations, etc.) extensively studied Bayesian perspective (Berger 1985, Bernardo& Smith 1994). specific field Statistical Pattern Recognition (Duda & Hart 1973,Fukunaga 1990), standard parametric nonparametric density approximation techniques (Izenman1991) used learn training data class-conditional p.d.f.s required optimumdecision rule. instance, class-conditional densities p(x|y) Gaussian, required parameters mean vector covariance matrix feature vector class decision regions x quadratic boundaries. Among nonparametric classification techniques, Parzen method K-N Nearest Neighbors rule must mentioned. Analogously,target attribute continuous statistical dependence input output variablesp(x,y) properly modeled joint normality, get multivariate linear regression: MSE(x) =x + B, required parameters mean values covariance matrix attrib-169fiRUIZ, LPEZ-DE-TERUEL & GARRIDOutes. Nonlinear regression curves also derived nonparametric approximation techniques. Nonparametric methods present slower convergence rates, requiring significantly largersample sizes obtain satisfactory approximations; also strongly affected dimensionality data selection smoothing parameter crucial step. contrast,require kind smoothness assumption target density.Neural Networks (Hertz et. al 1991) computational models trainable empirical dataproposed solve complex situations. intrinsic parallel architectureespecially efficient inference stage. One widely used neural models Multilayer Perceptron, universal function approximator (Hornik et al. 1989) breaks limitationslinear decision functions. Backpropagation learning algorithm (Rumelhart et al. 1986) can,principle, adjust network weights implement arbitrary mappings, network outputsshow desirable probabilistic properties (Wan 1990, Rojas 1996). also unsupervised networks probability density function approximation (Kohonen 1989). However, neural modelsusually contain large number adjustable parameters, convenient generalizationand, frequently, long times required training relatively easy tasks. input / output roleattributes cannot changed runtime missing uncertain values poorly supported.Bayesian Networks, based concept conditional independence, amongrelevant probabilistic inference technologies (Pearl 1988, Heckerman & Wellman 1995). jointdensity variables modeled directed graph explicitly represents dependencestatements. wide range inferences performed framework (Chang & Fung1995, Lauritzen & Spiegelhalter 1988) significant results inductive learningnetwork structures (Bouckaert 1994, Cooper & Herskovits 1992, Valiveti & Oomen 1992).approach adequate large number variables showing explicit dependencessimple cause-effect relations. Nevertheless, solving arbitrary queries NP-Complete, automaticlearning algorithms time consuming allowed dependences variables relatively simple.attempt mitigate drawbacks, developed general efficient inference learning framework based following considerations. well known(Titterington et al. 1985, McLachlan & Basford 1988, Dalal & Hall 1983, Bernardo & Smith 1994,Xu & Jordan 1996) reasonable probability density function p(z) approximateddesired degree accuracy finite mixture simple components Ci, = 1..l:p( z ) P{Ci } p( z| Ci )(1)superposition simple densities extensively used approximate arbitrary data dependences (Fig. 2). Maximum Likelihood estimators mixture parameters efficiently obtained samples Expectation Maximization (EM) algorithm (Dempster, Laird & Rubin1977, Redner & Walker 1984) (see Section 4).170fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURES(a)(b)(c)Figure 2. Illustrative example density approximation using mixture model. (a) Samples p.d.f. p(x,y) showing nonlinear dependence. (b) Mixture model p(x,y)6 gaussian components obtained standard EM algorithm. (c) Locationcomponents.decomposition probability distributions using mixtures frequently appliedunsupervised learning tasks, especially Cluster Analysis (McLachlan & Basford 1988, Duda &Hart 1973, Fukunaga 1990): posteriori probabilities postulated category computedexamples, labeled according probable source density. However,mixture models specially useful nonparametric supervised learning situations. instance,class conditional densities required Statistical Pattern Recognition individually approximated (Priebe & Marchette 1991, Traven 1991) finite mixtures; hierarchical mixtureslinear models proposed (Jordan & Jacobs 1994, Peng et. al 1995); mixtures factor analyzers developed (Ghahramani & Hinton 1996, Hinton, Dayan, & Revow 1997)mixture models also useful feature selection (Pudil et al. 1995). Mixture modelinggrowing semiparametric probabilistic learning methodology applications many researchareas (Weiss & Adelson 1995, Fan et al. 1996, Moghaddam & Pentland 1997).paper introduces framework probabilistic inference learning arbitrary uncertain data: piece exact uncertain information input output values consistently handled inference learning stages. approximate joint density p(z)(model domain) relative likelihood function p(S|z) (describing available information) specific mixture model factorized conjugate components, way numerical integration avoided computation desired estimator, marginal conditionaldensity.advantages modeling arbitrary densities using mixtures natural conjugate components already shown (Dalal & Hall 1983), and, recently, inference procedures basedsimilar idea proposed (Ghahramani & Jordan 1994, Cohn et al. 1996, Peng et al. 1995,Palm 1994). However, method efficiently handles uncertain data using explicit likelihoodfunctions, extensively used Machine Learning, Pattern Recognitionrelated areas. follow standard probabilistic principles, providing natural statistical validation procedures.organization paper follows. Section 2 reviews elementary resultsconcepts used proposed framework. Section 3 addresses inference stage. Section 4concerned learning, extending EM algorithm manage uncertain information. Section 5discusses method relation alternative techniques presents experimental evaluation.last section summarizes conclusions future directions work.171fiRUIZ, LPEZ-DE-TERUEL & GARRIDO2. Preliminaries2.1 Calculus Generalized Normalsmany applications, instances domain represented simultaneously continuoussymbolic discrete variables (as Wilson & Martinez 1997). simplify notation,denote probability impulses Gaussian densities means common formalism.generalized normal(x,,) denotes probability density function following properties:T(x,,)> 0,( x ) 21exp2 22T(x,,) = T(x,,0) T(x,) (x)= 0,Tzero,(x,,)Gaussian density mean standard deviation 0. dispersionreducesDiracs delta function located . cases proper p.d.f.:T(x,,) > 0T(x,,) dx = 1Xproduct generalized normals elegantly expressed (Papoulis 1991 pp. 258, Berger1985) by:1+2 >0:T(x,1,1) T(x,2,2) = T(x,,) T(1,2, 12 + 22 )(2)mean dispersion new normal given by:122 + 22 1=12 + 221222= 21 + 222relation useful computing integral product two generalized normals:1+2 >0:XT(x,1,1) T(x,2,2) dx = T(1, 2, 12 + 22 )(3)And, consistency, define1 = 2 = 0:XT(x,1) T(x,2) dx = T(1,2) I{1=2}I{predicate} = 1 predicate true zero otherwise. Virtually reasonable univariateprobability distribution likelihood function accurately modeled appropriate mixturegeneralized normals. particular, p.d.f.s symbolic variables mixtures impulses.Without loss generality, symbols may arbitrarily mapped specific numbers representednumeric axes. Integrals discrete domains become sums.Example 4: Let us approximate p.d.f. p(x) mixed continuous symbolic valued random variable x mixture generalized normals. Assume x takes probability 0.4exact value 10 (with special meaning), probability 0.6 random value continuously distributed following triangular shape shown Fig. 3. density p(x) accurately approximated (see Section 4) using 4 generalized normals:T(x,10) + .21T(x,.04,.23) + .28T(x,.45,.28) + .11T(x,.99,.21)p(x) .40172fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURESFigure 3. p.d.f. mixed random variable approximated mixture generalized normals.2.2 Modeling Uncertainty: Likelihood PrincipleAssume value random variable z must inferred certain observation subjective information S. z drawn p(z) measurement judgment processcharacterized conditional p(S|z), knowledge z updated according p(z|S)=p(z) p(S|z)/ p(S), p(S) = Z p(S|z) p(z) dz (see Fig. 4).likelihood function fS(z) p(S|z) probability density ascribed possiblez. arbitrary nonnegative function z interpreted two alternative ways.objective conditional distribution p(S|z) physical measurement process (e.g.model sensor noise, specifying bias variance observable every possible truevalue z), also known error model. also subjective judgment chancedifferent z values (e.g. intervals, likely regions, etc.), based vague difficult formalizeinformation. dispersion fS(z) directly related uncertainty associated measurement process. Following likelihood principle (Berger 1985), explicitly assumeexperimental information required perform probabilistic inference contained likelihoodfunction fS(z).p(z)z1z2z3zp(s|z2)p(s|z1)p(s|z3)priormodelmeasurementp(s)fSo(z)= p(so|z)zobservablelikelihoodobservationp(z|so)posteriorzFigure 4. Illustration elementary Bayesian univariate inference process.173fiRUIZ, LPEZ-DE-TERUEL & GARRIDO2.3 Inference Using Mixtures Conjugate Densitiescomputation p(z|S) may hard, unless p(z) p(S|z) belong special (conjugate) families (Berger 1985, Bernardo & Smith 1994). case posterior density analyticallyobtained parameters prior likelihood, avoiding numeric integration.prior, likelihood posterior mathematical family. belief structureclosed inference process.Example 5: univariate case, assume z known normally distributed around rdispersion r, i.e. p(z) = (z, r, r). Assume also measurement device Gaussian noise, observed values distributed according p(s|z) =(s, z, s). Therefore,observe certain value so, property product generalized normals eq.(2), posterior knowledge z becomes another normal(z, , ). new expected location z expressed weighted average r so: = + (1-)r uncertainty reduced 2 = S2 . coefficient = 2r / ( 2r + S2 ) quantifies relative im-portance experiment respect prior.computational advantage extended general case using mixtures conjugate families (Dalal & Hall 1983) approximate desired joint probability distributionlikelihood function.Example 6: domain likelihood modeled respectivelyp(z)PiT(z, , )p(so|z)rrT(z, , )rr(where r , r r depend explicitly observed so), posterior alsowritten following mixture:p(z|so)i, rproperties (2) (3), parameters, r,rT(z,, ,r )(4),r ,r weights ,r given by:i2 r + 2r=i2 + r2,r,r,r =ri2 + r2Pi r T( , r , i2 + r2 )PklT( k , l , 2k + 2l )k ,l2.4 Role FactorizationGiven multivariate observation z partitioned two subvectors, z = (x, y), assumeinterested inferring value unknown attributes observed attributes x. Notex statistically independent, joint density factorizable: p(z) = p(x, y) = p(x)p(y) and, therefore, posterior p(y|x) equals prior marginal p(y). observed x carriespredictive information optimum estimators depend x. instance,MSE ( x ) = E{y|x} = E{y} EP ( x ) = argmax p( ) . simplest estimation task.runtime computations required optimum solution, may precalculated.174fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURESrealistic situations variables statistically dependent. general, joint density cannot factorized required marginal densities may hard compute. However, interestingconsequences arise joint density expressed finite mixture factorized (with independent variables) components C1, C2, ..., Cl :p(z) = p( z 1 ,..., z n ) = P{Ci } p( z| Ci ) = P{Ci } p( z j | Ci )(5)jstructure convenient inference purposes. particular, terms desired partition z = (x, y):p(z) = p(x, y) =P{C } p( x| C ) p( y| C )marginal densities mixtures marginal components:p( x ) = p( x , )dy = P{Ci } p( x| Ci )p( ) = P{Ci } p( y| Ci )desired conditional densities also mixtures marginal components:p( y| x ) = ( x ) p( y| Ci )(6)weights (x) probabilities observed x generated component Ci :( x) =P{Ci } p( x|Ci )P{C } p( x|C )j= P{Ci | x}jjp.d.f. approximation capabilities mixture models factorized components remainunchanged, cost possibly higher number components obtain desired degreeaccuracy, avoiding artifacts (see Fig. 5). Section 5.2 discusses implications factorizationrelation alternative model structures.(a)(b)Figure 5. (a) Density approximation data Fig. 2, using mixture 8 factorized components. (b) Location components. Note arbitrary dependencerepresented mixture components independent variables (observesomewhat smoother solution could obtained increasing number components).175fiRUIZ, LPEZ-DE-TERUEL & GARRIDO3. MFGN Frameworkprevious concepts integrated general probabilistic inference framework callMFGN (Mixtures Factorized Generalized Normals). Fig. 6 shows abstract dependence relations among attributes generic domain (upper section figure) attributesobserved information (lower section). MFGN framework, relations modeledfinite mixtures products generalized normals. key idea using factorization copemultivariate domains heterogeneous attribute vectors, conjugate densities efficiently perform inferences given arbitrary uncertain information. section, derivemain inference expressions. learning stage described Section 4.p(z)z1znz2modeldomainp(z)zjmodelmeasurementp(S|z)Figure 6. Generic dependences inference process.3.1 Modeling Attribute Dependences DomainMFGN framework attribute dependencies domain modeled joint densityform finite mixture factored components, expression (5), componentmarginals p( z j | Ci ) T( z j , ij , ij ) generalized normals:p( z ) = PiT( zj, ij , ij )i=1..l, j=1..n,(7)jdesired, terms associated pure symbolic attributes z j (with ij = 0)collected way component marginals expressed mixtures impulses:p( z j | Ci ) ti j, T( z j , )(8)ti j, P{z j = | Ci } probability z j takes -th value component Ci .manipulation reduces number l global components mixture. adjustable parametersmodel proportions Pi = P{Ci } mean value ij dispersion ij j-thjattribute i-th component (or, symbolic attributes, probabilities ti , ).structure (8) explicitly used symbolic attributes applications illustrative examples, mathematical derivations made concise expression (7).176fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURESvariables continuous, MFGN architecture reduces mixture gaussiansdiagonal covariance matrices. proposed factorized structure extends propertiesdiagonal covariance matrices heterogeneous attribute vectors. interested joint models,support inferences partial information subset variables. Noteeasy way define measure statistical depencence symbolic continuousattributes, used parameter probability density function1. required "hetereogeneous" dependence model conveniently captured superposition simple factorized(with independent variables) densities.Example 7: Figure 7 shows illustrative 3-attribute data set (x continuous zsymbolic) components MFGN approximation obtained EM algorithm(see Section 4) joint density. parameters mixture shown Table 1.Note that, overlapped structure data, components (5 6) assigned values symbolic attribute z.(a)(b)Figure 7. (a) Simple data set two continuous one symbolic attribute.(b) Location mixture components.Piixixiyiytiz,white1.14-.40.24-.27.2002.09-.76.19-.68.1803.20.55.23.66.2404.17-.71.27.76.2215.13.21.17-.14.19.746.18-.14.18.26.17.557.09.65.16-.64.191Table 1. Parameters Mixture Model Data Set Fig. 7.tiz,black1110.26.4503.2 Modeling Arbitrary Information Instancesavailable information particular instance z denoted S. Following likelihoodprinciple, concerned true nature S, whether kind physical meas1reason, pattern classification tasks separate models typically built class-conditional density.177fiRUIZ, LPEZ-DE-TERUEL & GARRIDOurement subjective judgment location z attribute space. needupdate knowledge z, form posterior p(z|S), relative likelihood functionp(S|z) observed S. general, p(S|z) nonnegative multivariable function fS(z)domain. objective case, statistical studies measurement process useddetermine likelihood function. subjective case, may obtained standard distribution elicitation techniques (Berger 1985). either case, MFGN framework, likelihood function available information used inference process approximated, desired degree accuracy, sum products generalized normals:p( S| z ) = P{S | r } p( r | z ) = P{S | r } p( srj | z j )rr=T( zrjj, srj , rj )(9)jrWithout loss generality, available knowledge structured weighted disjunction =12{1s1 2s2 ... R R } conjunctions sr = { sr sr ... srn ) elementary uncertainobservations form generalized normal likelihoods T( z j , srj , rj ) centered srjuncertainty rj . measurement process interpreted result R (objective subjective) sensors sr , providing conditionally independent information p( srj | z j ) attributes(each srj depends z j ) relative strength r . Note complex uncertain information instance z, expressed nested combination elementary uncertain beliefs srjz j using probabilistic connectives, ultimately expressed structure (9) (OR translates addition, translates product product two generalized normalsattribute becomes single, weighted normal).Example 8: Consider hypothetical computer vision domain Example 1. Assumeinformation object z following: AREA around DISTANCE around b or,likely, SHAPE surely triangular else circular AREA around c ANGLEaround equal e. structured piece information formalized as:T(z , a, ) T(z , b, )]+ .7 [ (.9T(z ,triang)+.1T(z ,circ)) T(z , c, ) (T(z , d, )+T(z ,e)) ]p(S|z) = .3 [134b417c7which, expanded, becomes mixture 5 factorized components operationally representedparameters shown Table 2.simpler situation, available information z could conjunction uncertain attributes similar {Color = red 0.8 green 0.2} {Area = 3 .5} {Shape = rectangular 0.6circular 0.3 triangular 0.1}. likelihood Shape values obtained outputsimple pattern classifier (e.g. K-N-nearest neighbors) moment invariants, attributesColor Area directly extracted image. case could interesteddistribution values attributes Texture ObjectType. Alternatively,could start {ObjectType = door 0.6 window 0.4} {Texture = rough} order determine probabilities Color Angle values selecting promising search region.178fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURESrsr1 , 1rsr3 , r3sr2 , 2rsr4 , 4rsr5 , 5rsr6 , 6rsr7 , 7r.30a,-,b, b-,-,-,.63triang, 0c, c-,-,-,-,.63triang, 0c, c-,-,-,-,.07circ, 0c, c-,-,-,-,.07circ,0c, c-,-,-,-,Table 2. Parameters Uncertain Information Model Example 8.-,d,de, 0d,de, 03.3 Joint Model-Observation Densitygeneric dependence structure Fig. 6 implemented MFGN framework shownFig. 8. upper section figure model nature, obtained previous learning stageused inference without changes. Dependences among attributes conductedintermediary hidden latent component Ci. lower section represents availableuncertain information, measurement model query structure associated particular inference operation.Cip( z 1 | Ci )1Domain:p( z) P{Ci } p( z j | Ci )2zzs21s22...zn...s2njp( s11 | z1 )s11s12...s1ns1...s1RsR2...sRnsRs2P{S|s1}Measurement:p( S| z ) P{S | r } p( srj | z j )rjFigure 8. Structure MFGN model. attributes conditionally independent.measurement process modeled collection independent virtual sensorsp( srj | z j ) .joint density relevant variables becomes:p(Ci , z , sr , ) = P{S | r } p( r | z ) p( z| Ci ) P{Ci }p(= P{Ci } P{S | r }jr| z j ) p( z j | Ci )j= Pi rT( zj, srj , rj ) T( z j , ij , ij )j179(10)fiRUIZ, LPEZ-DE-TERUEL & GARRIDOderive alternative expression eq. (10) convenient computing marginal densities desired variable. Using following relation:p( srj | z j ) p( z j | Ci ) = p( z j , srj | Ci ) = p( z j | srj , Ci ) p( srj | Ci )properties (2) (3), define dual densities model:ij,r p( srj | Ci ) =Zjp( srj | z j ) p( z j | Ci ) dz j =T( srj , ij , ij,r )(11)p( srj | z j )p( z j | Ci ) = T( z j , ij,r , ji ,r )p( srj | Ci )(12)ij,r ( z j ) p( z j | srj , Ci ) =parameters ij,r , ij,r ji ,r given by:ij,r ( ij ) 2 + ( rj ) 2( ij ) 2 srj + ( rj ) 2 ij(ij,r ) 2j,rj,rij rjj,rij,r likelihood r-th elementary observation srj j-th attribute z jcomponent Ci ij,r ( z j ) effect r-th elementary information srj j-th attribute z j marginal component p( z j | Ci ) component Ci . Using notation, MFGN model structure conveniently written as:p(Ci , z , sr , ) = Pi r ij,r ij,r ( z j )(13)j3.4 Posterior Densityinference process available information combined model domainupdate knowledge particular object. Given new piece information must compute posterior distribution p( y| ) desired target attributes z. Then, estimators( ) obtained p( y| ) minimize suitable average loss function.efficiently supported MFGN framework regardless complexity domain p(z)structure available information = { r sr } .attributes partitioned two subvectors z = (x, y), = { z } desiredtarget attributes x = { z } rest attributes. Accordingly, component sravailable information partitioned r = ( rx , ry ) . information target attributesr-th observation, independent model p(z), denoted sry (often missingpieces information) srx represents information restattributes x. Using convention write:180fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURESp( z , ) = p( x , , ) = Pi r ,r ,r ( x ) ,r ( ),r,r likelihood r-th conjunction sr component Ci :,r ij,r(14)jterms ij,r ( z j ) grouped according partition z = (x, y):,r ( x ) io,r ( z ),r ( ) id,r ( z )desired posterior p(y|S) = p(y,S) / p(S) computed joint p(z,S) marginalization: along x obtain p(y,S) along z obtain p(S). Note univariate marginalization p(z,S) along attribute z j eliminates terms ij,r ( z j ) sum (13):p( , ) = p( x , , ) dx = Pi r ,r ,r ( )X,rp( ) = p( z , ) dz = Pi r ,rZ,rTherefore, posterior density compactly written as:p( y| ) = ,r ,r ( )(15),r,r probability object z generated component Ci elementary information sr true, given total information S:,r P{Ci , sr | S} =Pi r ,rPkl k ,l(16)k ,l,r ( ) = p( y| sry , Ci ) marginal density p( y| Ci ) desired attributes i-thcomponent, modified contribution associated sry . Since p( y| sry , Ci ) =p( y| sr , Ci ) , expression (16) also follows expansion:p( y| ) = p( y| sr , Ci ) P{Ci , sr | S},rsummary, joint density likelihood function approximated mixturemodels proposed structure, computation conditional densities given events arbitrary geometry notably simplified. Factorized components reduce multidimensional integrationsimple combination univariate integrals conjugate families avoid numeric integration.property illustrated Fig. 9.181fiRUIZ, LPEZ-DE-TERUEL & GARRIDOp(y|C2)1yE{y|S}C2p(y,x1,x2)2yC1p(y|C1)p(x2|C2)p(y|S)p(x2|C1)22,1 22,21p(x |C2)21,1x2p(x1|C1)11,211,1s1s2x1Figure 9. Graphical illustration essential property MFGN framework. Consider MSE estimate y, conditioned event (y, x1, x2) cylindricalregion S. required multidimensional integrations computed analytically termsmarginal likelihoods ji,r associated attribute pair componentsCi sr models p(y, x1, x2) S, respectively. case i,r(y)=p(y|Ci)information supplied S.Example 9: Fig. 10.a shows joint density two continuous variables x y. modeledmixture 30 factorized generalized normals. Fig. 10.b shows likelihood functionevent S1 = {(x x -y) y>0}. Fig. 10.c shows posterior joint densityp(x,y|S1). Fig. 10.d shows likelihood function event S2 = {(x,y) (0,0) x3}.Fig. 10.e shows posterior joint density p(x,y|S2). Fig. 10.f 10.g show respectivelyposterior marginal density p(x|S2) p(y|S2). complex inferences analytically computed MFGN framework, without numeric integration.182fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURES(a)(b)(c)(d)(e)Figure 10. Illustrative examples probabilistic inference arbitrary uncertain information MFGN framework (see Example 9).183fiRUIZ, LPEZ-DE-TERUEL & GARRIDOp(y|S)0.40.80.30.60.20.40.1p(x|S)0.2x-4-224-4-22(f)Figure 10. (cont.).4(g)3.5 Expressions EstimatorsApproximations optimum estimators easily obtained taking advantagemathematically convenient structure posterior density. MFGN framework,conditional expected value function g(y) becomes linear combination constants:E{g ( )| S} = g ( ) p( y| ) dy ==,r,rg ( ) ,r ( ) dy =,rE ,r {g ( )}(17),rE ,r {g ( )} E{g ( )| ry , Ci } expected value g(y) i-th component2 modified3 r-th observation sry :E ,r {g ( )}g ( ) T( z , id,r , di ,r ) dyanalytically compute desired optimum estimators. instance, MSE estimator single continuous attribute = z requires mean values E ,r {z } = id,r :MSE ( ) = E{ y| S} = ,r id,r,rexplicit expression p(y|S) also compute conditional cost:{}e 2MSE ( ) = E ( MSE ( ) ) | = E{y 2 | S} 2MSE ( ) ==,r,r2[(,r) + ( )2,r22],r id,r,r2Note computing conditional expected value arbitrary function g(y) several variables may difficult.general g(y) expanded power series obtain E{g(y)|S} terms moments p(y|S).3sx (there information target attributes) constants Ei,r{g(y)} precomputedmodel nature p(z) learning stage.184fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURESTherefore, given S, Tchevichev inequality answer MSE ( ) 2e MSE ( )confidence level 75%. shape p(y|S) complex must reported explicitly (the point estimator MSE ( ) makes sense p(y|S) unimodal).Example 10: Nonlinear regression. Fig. 11 shows mixture components regressionlines (with confidence band two standard deviations) obtained simple examplenonlinear dependence two variables. case joint density adequatelyapproximated 3 4 components: MSE (1 component) = 0.532, MSE (2 comp.) = 0.449,MSE (3 comp.) = 0.382, MSE (4 comp.) = 0.381.(a)(b)Figure 11. Nonlinear regression example: (a) 2 components, (b) 4 components.target symbolic must compute posterior probability value.case di ,r = 0 id,r = id possible values taken = z . Collecting together id,r = , (8), eq. (15) written as:p ( y| ) = ,r , ( , ),r,r , coefficients impulses located . posterior probabilityvalue is:q P{ = | S} = ,r ,,rinstance, minimum error probability estimator (EP) is:EP ( ) = argmaxqdesired rejection threshold easily established. reject decision entropy posterior, H = q log q, estimated error probability, E = 1- max q,high.Example 11: Nonparametric Pattern Recognition. Fig. 12 shows bivariate data set elements two different categories, represented value additional symbolic attribute. joint density satisfactorily approximated 6-component mixture (Fig.12.a). decision regions rejection threshold set 0.9 shown Fig. 12.b.185fiRUIZ, LPEZ-DE-TERUEL & GARRIDONote Statistical Pattern Classification usually start (implicit explicit) approximation class-conditional densities. contrast, start joint density,class-conditional densities easily derived (Fig. 12.c).(a)(b)(c)Figure 12. Simple nonparametric 2feature pattern recognition task 3attributejoint mixture model: (a) Feature space mixture components. (b) Decision boundary.(c) One class-conditional densities.computation optimum estimators loss functions straightforward. Observe estimators based combination different rules, weighted degreeapplicability. typical structure used many decision methods. case, sincecomponents joint density independent variables rules reduce constants,simplest type rule.3.6 Examples Elementary Pieces Informationimportant types elementary observations srj z j shown, including corresponding likelihoods ij,r modified marginals ij,r ( z j ) (j=d) required expression (15).Exact information: srj = z j . observation modeled impulse:p( srj | z j ) =T( srj , z j ) = ( srj z j ) . Therefore:ij,r = T( srj , ij , ij )ij,r ( z j ) = T( z j , srj )contribution ij,r exact information input attribute z j standard likelihood p( z j | Ci ) observed value z j component. hand, acquireexact information target attribute z j (when one (R=1) elementary observationj = z j ) inference process trivially required: p( z j | ) = ( z j j ) .Gaussian noise bias rj standard deviation rj : observation modeled 1component mixture: p( srj | z j ) = T( srj , z j + rj , rj ) , also expressed 95% confidence interval z j srj + rj 2 rj . property (2-2):186fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURESij,r = T( srj , ij rj , ( ij ) 2 + ( rj ) 2 )effect noisy input z j srj 2 rj equivalent effect exact input z j = srjmixture components larger variance: ij ( ij ) 2 + ( rj ) 2 . Uncertainty spreadseffect observation, increasing contribution distant components.Example 12: Fig. 13.a shows simple two-attribute domain approximated 3-componentmixture. interested marginal density attribute x given different degrees uncertainty input attribute .4 2, modeledp( | ) = T( ,.4, ) . = 0sharpest density (A) Fig. 13.b, providing x.4.5. = .25 obtain density(B) x.3.7. Finally, = .5 obtain density (C) x.2.8. Obviously, uncertainty increases, uncertainty x. expected value x moves towardsdistant components, become likely probability distribution expands. situation interesting effect appears: mode marginal densitychange rate mean. Uncertainty skews p(x). effect suggestsoptimum estimators different loss functions equally robust uncertainty.BC(a)(b)Figure 13. Effect amount uncertainty (see text). (a) Data set 3-componentmodel. (b) p(x | uncertain ys around 0.4).jjoutput role, ,r ( z ) becomes original marginal, modified location disper222sion towards srj according factor = ( ij ) / [( ij ) + ( rj ) ] , quantifies relativeimportance observation:ij,r ( z j ) = T(z j , ( srj rj ) + (1 ) ij , 1/ 2 rj )Missing data. information j-th attribute, srj = {z j = ?} , observation modeled p( srj | z j ) = constant or, equivalently, p( srj | z j ) = T( srj , , b)arbitrary b . components contribute weight:ij,r = p( z j = anything| Ci ) constant 1target missing ij,r ( z j ) reduce original marginal components:187fiRUIZ, LPEZ-DE-TERUEL & GARRIDOij,r ( z j ) = T( z j , ij , ij ) = p( z j | Ci )Arbitrary uncertainty. general, unidimensional relative likelihood function approximated mixture generalized normals, shown Example 6, ij,r ij,r ( z j )given respectively eqs. (11) (12).Intervals. useful functions cannot accurately approximated small number normalcomponents. typical example indicator function interval, used model uncertainobservation values equally likely: srj = {z j (a, b)} . z j consideredinput, use shortcut ij,r = Fi j (b) Fi j (a ) , Fi j ( z j ) cumulative distribution normal marginal component p( z j | Ci ) . Unfortunately, expression ij,r ( z j ) ,required z j considered output, may useful computing certain optimum estimajjjtors. ,r ( z ) restriction p(z j|Ci) interval (a,b) normalized ,r .Disjunction conjunction events. Finally, standard probability rules used buildstructured information simple observations: subjective judgments objective evidence ascribe relative degrees credibility rj several observations srj z j , overalljj jlikelihood becomes = r r ,r . particular, j = {z j = 1 z j = 2 } twopossibilities equiprobable ij = p( 1 | Ci ) + p( 2 | Ci ) . Analogously, conjunctionsevents translate multiplication likelihood functions.3.7 Summary Inference Proceduredomain p(z) adequately modeled learning process (as explained Section4), system enters inference stage new, partially specified objects. parametersdomain p(z) ( Pi , ij ij ) parameters model observation p(S|z)( r , srj rj ), must obtain parameters ij,r , id,r di ,r desired marginal posterior densities estimators. inference procedure comprises following steps:Compute elementary likelihoods ij,r , using eq. (11).Obtain product ,r conjunction sr component Ci , using eq. (14).Normalize Pi r ,r obtain coefficients ,r posterior, using eq. (16).Choose desired target attributes = { z } compute parameters id,r ,di ,r modified component marginal densities id,r ( z ) using eq. (12).Report joint posterior density y. Show graphs posterior marginal densitiesdesired attributes z using eq. (15). Provide optimum (point, interval, etc.) estimators using eq. (17).Example 13: Iris Data. inference procedure illustrated well known Iris benchmark: 150 objects represented four numeric features (x, y, z w) one symbolic category U {U1 (setosa), U2 (versicolor), U3 (virginica)}. whole data set dividedtwo disjoints subsets training validation. joint density satisfactorily approxi-188fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURESmated (see Section 4) 6component mixture (the error rate classifying U validationset without rejection 2.67%). Fig. 14 shows two projections 150 examples location mixture components learned training subset. parameters mixture shown Table 3.(a)(b)Figure 14. Two views Iris examples components joint density mixture model. U1: white, U2: black, U3: gray. (a) Attributes x, (b) Attributes z, w.Pi1234560.150.130.210.180.150.17ixixiyiyiziz7.13 0.48 3.12 0.34 6.17 0.455.48 0.41 2.50 0.28 3.87 0.326.29 0.39 2.93 0.27 4.59 0.204.75 0.23 3.25 0.23 1.42 0.215.36 0.26 3.76 0.29 1.51 0.166.16 0.42 2.77 0.28 5.22 0.30Table 3. Parameters Iris Data Joint Density Modeliwiw2.181.201.450.190.321.940.200.210.140.050.100.23P{U1|Ci} P{U2|Ci} P{U3|Ci}00011000.931000.00Table 4 shows results inference process following illustrative situations:Case 1: Attribute z known: = {z = 5}.Case 2: Attributes x U known: = {(x = 5.5) (U=U2)}.Case 3: Attribute x uncertain: = {x 71}.Case 4: Attributes x w uncertain: = {(x 71) (w 10.5)}. Note uncertainty decreases information supplied (compare Case 3).Case 5: Structured query expressed terms logical connectives uncertain elementaryevents: = {[(z 13) (z 73)] [(U = U1) (U = U2)]}.18910.070.00001fiRUIZ, LPEZ-DE-TERUEL & GARRIDOCASE12345INPUTOUTPUTINPUTOUTPUTINPUTOUTPUTINPUTOUTPUTINPUTOUTPUTX?6.20.95.55.5716.70.9716.50.7???2.80.6?2.60.6?z5.05.0?4.00.8?w?1.80.6?1.30.4?3.00.7?5.31.8?2.90.6??1.80.810.51.30.3??5.31.23.30.94.50.8137323(approx.unimodal)(unimodal)(bimodal)0.51U?U2: 22% U3: 78%U2: 100%U2: 100%?U2: 36% U3: 63%?U2: 95% U3: 5%U1: 50% U2: 50%U1: 50% U2: 50%U1: 75% U2: 25%(bimodal)Table 4. Inference Results IRIS Domainconsistency results visually checked Fig. 14. Finally, Table 5 showselementary likelihoods123456ix,1iy,1i,j r Case 5, illustrating essence method.iz,1iw,1Ui ,1,1ix,211101.00101111.045.47 .021111.016.50 .011111.254.50 .131111.250.50 .1311101.0060Table 5. Elementary likelihoods Case 5 Table 4.iy,2111111iz,2iw,2Ui ,2,2.221.032.0743E-44E-4.1321111110.47.50.50.5000.02.04.00.0003.8 Independent MeasurementsOne key features MFGN framework ability infer arbitrary relationalknowledge attributes, form likelihood function adequately approximatedmixture model structure eq. (9). instance, could answer questions as: happens z z tends less z j ? (i.e., p(S|z) high region z z j < 0 ).However, situations observations single attribute z j statisticallyindependent: information attributes (e.g. z around z j around b)attribute relations. pay attention particular case illustrates rolemain MFGN framework elements. Furthermore, many practical applications satisfactorily solved assumption independent measurements judgments. case,likelihood available information expressed conjunction n marginal observations j z j :p ( | z ) = p( j | z j )j190(18)fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURESmeans sum products equation (9) complete, i.e., includes elementsN-fold cartesian product attributes:p( | z ) = rj T( z j , srj , rj )jrj rj = r . factored likelihood function considered also 1-componentmixture (with R=1 (9) j s1j ) marginal observation models allowedmixtures generalized normals: p( j | z j ) = r ' rj' T( z j , srj' , rj ' ) . case even think11function valued attributes z [ f ( z ),..., f n ( z n )] , f j ( z j ) p( j | z j ) modelsrange relative likelihood values z j . Loosely speaking, attributes concentratedf j ( z j ) may considered inputs, attributes high dispersion play role outputs.Since conditionally independent x given Ci , posterior obtained expansion:p( y| ) = p( y| , Ci ) P{Ci | S} = p( y| Ci , ) P{Ci | S}(19)interpretation (19) straightforward. effect sx = {zd} must computedx = {zo} components Ci . Then, simple Bayesian update p( y| x ) newprior made using (see Fig. 15).Ciz1p( z j | Ci )zdid ( z )s1......sdjzjp( j | z j )sj...Figure 15. Structure MFGN inference process independent pieces information. case, likelihood function also factorizable. data flow inference process shown dotted arrows.191fiRUIZ, LPEZ-DE-TERUEL & GARRIDO4. Learning Uncertain Informationprevious section, described inference process uncertain informationMFGN framework. develop learning algorithm model domain,training examples also uncertain. Specifically, must find parameters Pi ,ij , ij (or ti j, ) mixture structure (7) approximate true joint density p(z)training i.i.d. random sample {z(k)}, k=1..M, partially known associated likelihoodfunctions {S(k)} structure (9).4.1 Overview EM AlgorithmMaximum Likelihood estimates parameters mixture models usually computedwell-known Expectation-Maximization (EM) algorithm (Dempster, Laird Rubin 1997, RednerWalker 1984, Tanner 1996), based following idea. principle, maximizationtraining sample likelihood J = k p( z ( k ) ) mathematically complex task due productsums structure. However, note J could conveniently expressed maximization components generated example known (this called complete data EM terminology). underlying credit assignment problem disappears estimation task reduces several uncoupled simple maximizations. key idea EM following: instead maximizingcomplete data likelihood (which unknown), iteratively maximize expected valuegiven training sample current mixture parameters. shown processeventually achieves local maximum J.Instead rigorous derivation EM algorithm, found references (see especially McLachlan Krishnan, 1997), present heuristic justificationprovides insight generalizing EM algorithm accept uncertain examples. reviewfirst simplest case, missing uncertain values allowed training set.parameters mixture conditional expectations:E z |Ci {g ( z )| Ci )} = g ( z ) p( z| Ci ) dzZ(20)22particular, ij = E{z j | Ci } , ( ij ) = E{( z j ij ) | Ci } ti j, = E{I {z j = }| Ci } .mixture proportions Pi = E{ P{Ci | z} } .rewrite conditional expectation (20) using Bayes Theorem form unconditional expectation:E z |Ci {g ( z )| Ci )} = g ( z ) P{Ci | z} p( z ) / P{Ci } dz =(21)= E z {g ( z ) P{Ci | z}} / Pi(22)ZEM algorithm interpreted method iteratively update mixture parametersusing expression (22) form empirical average training data4. Startingtentative, randomly chosen set parameters, following E steps repeated4Expression (21) also used iterative approximation explicit functions indirectly knowni.i.d. sampling (e.g., subjective likelihood functions sketched human user, Example 4). case p(z) settarget function P{Ci| z} computed current mixture model.192fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTUREStotal likelihood J longer improves (the notation (expression)(k) means (expression) computed parameters example z(k)):( )( )(E) Expectation step. Compute probabilities qi k P{Ci | z k } k-th examplegenerated i-th component mixture:qi( k ) p( z ( k ) | Ci ) P{Ci } / p( z ( k ) )(M) Maximization step. Update parameters component using examples, weightedprobabilities qi( k ) . First, priori probabilities component:Pi1q (k )kThen, continuous variables, mean values standard deviations component:1MPiij( ij ) 21MPi[qz j ]( k )k[q( z j ) 2 ]( k ) ( ij ) 2(23)ksymbolic variables, probabilities value:ti j,1MPi[q{z j = }]( k )k4.2 Extension Uncertain Valuesgeneral, MFGN framework know true values z j attributestraining examples, required compute g ( z ) P{Ci | z} (empirical) expectation (22). Instead,start uncertain observations ( k ) true training examples zlikelihood functions expressed mixtures generalized normals:(k ), formp( ( k ) z ( k ) ) = P{S ( k ) sr( k ) } p( sr( k ) z ( k ) )rTherefore, must express expectation (22) p(z) unconditional expectationp(S), distribution generates available information training set.easily done expanding p( z| Ci ) terms S:E z |Ci {g ( z )| Ci )} = g ( z ) p( z| Ci ) dzZ[ p ( z | , C ) p ( | C ) dS ] dz= [ g ( z ) p( z| , C ) dz ] P{C | S} p( ) dS / P{C }=ZZg ( z)define193(24)fiRUIZ, LPEZ-DE-TERUEL & GARRIDO( ) E z |S ,Ci {g ( z )| , Ci )} = g ( z ) p( z| Ci ) p( | z ) dz / p( | Ci )Zparameters p(z) finally written5 unconditional expectation observable p(S) form similar eq. (22):E z |Ci {g ( z )| Ci )} = E {i ( ) P{Ci | S}} / Pi(25)expression justifies extended form EM algorithm iteratively update parameters p(z) averaging ( ) P{Ci | S} available training information { ( k ) }drawn p(S). considered numerical/statistical method solving p(z)integral equation:Zp ( | z ) p ( z ) dz = p ( )Note cannot approximate p(S) fixed mixture terms p( | Ci ) computing back corresponding p( z| Ci ) because, general, p( | z ) different different training examples. reason, elementary deconvolution methods directlyapplicable.kind problem addressed Vapnik (1982, 1995) perform inference resultindirect measurements. ill-posed problem, requiring regularization techniques.proposed extended EM algorithm considered method empirical regularization,solution restricted family mixtures (generalized) gaussians. EMalso proposed Kaveh (1996) regularization context image restoration.interpretation (25) straightforward. Since know exact z requiredapproximate parameters p(z) empirically averaging g ( z ) P{Ci | z} , obtainresult averaging corresponding ( ) P{Ci | S} domain, ( ) playsrole g(z) (22). z uncertain, g(z) replaced expected value componentgiven information S. particular, exact knowledge training set at( )tributes ( ( k ) = z k , i.e., R = 1 marginal likelihoods impulses) (25) reduces(22). Fig. 16. illustrates approximation process performed extended version EMalgorithm simple univariate situation.convenient develop version proposed Extended EM algorithm uncertaintraining sets, structured tables (sub)cases (uncertainly valued) variables (see Fig. 17).First, let us write eq. (24) expanding terms components sr:p( z| Ci , ) P{Ci | ) = p( z , Ci | )=p( z, C | ) P{s | S} = p( z| C , ) P{C | } P{s | S}rrrrrrrTherefore( ) P{Ci | S} = ,r ( r ) P{Ci , r | S}rresult also obtained relation Ez{w(z)} = ES{ Ez|S{w(z)| S} } w(z) g(z) P{Ci|z} Bayes Theorem.5194fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURES(a)(b)(d)(c)Figure 16. extended EM algorithm iteratively reduces (large) difference(a) true density p(z), (b) mixture model p ( z ) , indirectly (small)discrepancies (c) true observation density p(S) (d) modeled observation density p ( ) . real cases p(S) must estimated finite i.i.d. sample{S(k)}.S(1)s1(1)s2(1)s(2)s1(3)s2(3)s3(3)....4.61.2.5.3...S(2)S(3)(r k )S(r)( sr1 , 1r ) ( k )( srj , rj ) ( k )............Figure 17. Structure uncertain training information Extended EM Algorithm. coefficients(r k ) normalized easy detection rows includeduncertain example. z(k )= 1(k)(k)uncertain,reduces single row= 0.jUsing notation introduced (12),,r ( r ) E z |sr ,Ci {g ( z )| r , Ci } =Zg ( z ) p( z| r , Ci ) dz =ZP{Ci , r | S} = P{Ci | r } P{s r | S} = ,rwrite (25) as:195g ( z ) ij,r ( z j ) dzjfiRUIZ, LPEZ-DE-TERUEL & GARRIDOE z|Ci {g (z ) | Ci } = E ,r g (z ) ij,r ( z j )dz / PiZjrMFGN framework contributions ,r ( r ) P{Ci , r | S} empirical expectedvalues required Extended EM algorithm obtained without numeric integration.need consider case g(z) = z j compute means ij probabilities ti j, ,g(z) = ( z j )2 deviations ij . (12) already know explicit expression parameters ij,r ( z j ) = T( z j , ij,r , ji ,r ) . Hence:Zz j ,r ( z ) dz =(zZjZz j ij,r ( z j )dz j = ij,r) 2 ,r ( z ) dz = ( ij,r ) 2 + ( ji ,r ) 2conclusion, steps Extended EM algorithm follows:(E) Expectation step. Compute elementary likelihoods training set:(ij,r( k ) = srj , ij , ( ij ) 2 + ( rj ) 2)(k )(26)( )( )Obtain likelihood conjunction sr k example k component Ci:i(,kr) = ij,r( k )j( )Obtain total likelihood example k :( k ) p( ( k ) ) = Pi r( k ) i(,kr )r( )( )( )Compute probabilities qi ,kr P{Ci , r k | k } r-th component k-th exam-ple generated i-th component mixture:qi(,kr ) i(,kr) = Pi r ( k ) i(,kr) / ( k )(M) Maximization step. Update parameters component Ci using componentsr( k ) examples weighted probabilities qi(,kr ) . First, prior probabilitiescomponent:Pi1qk(k ),rrmean value standard deviation component:ij1MPi[qkr196,rij,r](k )fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURES( ij ) 21MPi[qk,r][( ij,r ) 2 + ( ij ,r ) 2 ]r(k )( ij ) 2(27)symbolic variables representation (8) may use:ij,r( k ) = P{srj = }( k ) ti j,(26)ti j,1MPi[qk,rP{srj = } j, / ij,rr](k )(27)Consider particular case attributes training examples contaminatedunbiased Gaussian noise. likelihood uncertain observations modeled 1( )( )( )( )( )( ) 2component mixtures: p( k | z k ) = j T( z j k , j k , j k ) , ( j k ) variancemeasurement process z j ( k ) obtains observed value j ( k ) . also ex( )( )( )pressed confidence interval z j k j k 2 j k . case, basic EM algorithm (23)( )easily modified take account effect uncertainties j k . E step, com( )pute qi k using following deviations:ij ( ij ) 2 + ( j ( k ) ) 2and, step, apply substitution:z j ( k ) j ( k ) + (1 ) ij[( z j ( k ) ) 2 j ( k ) + (1 ) ij] + [ ]2j( k ) 2( ij ) 2= j 2( ) + ( j ( k ) ) 2measures relative importance observed j k computing new ij ij .previous situation illustrates missing values must processed learning stage.( )j (k )zexact j k = 0 = 1, original algorithm (23) changed.( )extreme, z j ( k ) missing, modeled j k , get = 0 therefore( )observation j k contribute new parameters all. correct procedure dealmissing values MFGN framework simply omitting empirical averages.Note fact arises factorized structure mixture components, providing conditionally independent attributes. Alternative learning methods require careful managementmissing data avoid biased estimators (Ghahramani & Jordan 1994).( )4.3 Evaluation Extended EM Algorithmstudied improvement parameter estimations uncertainty observations, modeled likelihood functions, explicitly taken account. proposed Extended197fiRUIZ, LPEZ-DE-TERUEL & GARRIDOEM compared EM algorithm "raw" observations (Basic EM), ignoreslikelihood function typically uses average value (e.g., given x82, Basic EM usesx=8). considered synthetic 3-attribute domain following joint density:p(x,y,w) = 0.5 (x,0,2) (y,0,1) (w,white)+ 0.5 (x,2,1) (y,2,2) (w,black)TTTTTTDifferent learning experiments performed varying degrees uncertainty.cases training sample size 250. trained models structure true density (2 components), since goal experiment measure quality estimationrespect amount uncertainty, without regard sources variabilitylocal minima, alternative solutions, etc., empirically studied Section 5. Table 6 showsmixture parameters obtained learning algorithms. Fig. 18 graphically shows difference Extended Basic EM illustrative cases.Case 0: Exact Data (Fig. 18.a).Cases %: Results Extended EM learning algorithm % rate missingvalues training data.Case 1: Basic EM attribute biased +3 units probability 0.7. Case 2: Extended EMalgorithm Case 1 (see Fig. 18.b). Here, observed value sy=y+3 70% samplessy=y rest. samples, Basic EM uses observed value sy Extended EM usesexplicit likelihood function f(y) = 0.3 (ysy) + 0.7 (y(sy3)).Case 3: Basic EM attributes x Gaussian noise = 0.5 w changedprobability 0.1. Case 4: Extended EM algorithm Case 3.Case 5: Basic EM x Gaussian noise = 1 w changed probability0.2. Case 6: Extended EM algorithm Case 5 (see Fig. 18.c).Case 7: Basic EM x Gaussian noise = 2 w changed probability0.3. Case 8: Extended EM algorithm Case 7 (see Fig. 18.d).Case 9: Extended EM values y>3 missing (censoring). Case 10: Extended EM Case9 missing values assumed distributed(y, 4, 1), providing additional information data generation mechanism.Table 6 Fig. 18 confirm small amounts deterioration relation samplesize, estimates computed basic EM Algorithm raw observed data similarobtained Extended EM algorithm (e.g., Cases 3 4). However, data setsmoderately deteriorated true joint density correctly recovered Extended EM usinglikelihood functions attributes instead raw observed data (e.g., Cases 5 6, Fig.18.c). Finally, large amount uncertainty respect training samplesize true joint density cannot adequately recovered (e.g., Cases 7 8, Fig. 18.d).198fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURES(a)(b)(c)(d)Figure 18. Illustration advantages Extended EM algorithm (see text). (a)Case 0 (exact data). (b) Cases 1 2 (biased data). (c) Cases 5 6 (moderated noise).(d) Cases 7 8 (large noise). figures show true mixture components (gray ellipses), available raw observations (black white squares), components estimated Basic EM raw observations (dotted ellipses) components estimated Extended EM taking account likelihood functions uncertainvalues (black ellipses).Note ability learn uncertain information suggests method manage nonrandom missing attributes (e.g., censoring) (Ghahramani & Jordan 1994) complexmechanisms uncertain data generation. illustrated Case 9, missing data generationmechanism depends value hidden attribute, correct assign equal likelihoodcomponents. principle, statistical studies kind knowledge may help ascertainlikelihood true values function available observations. instance, Case 10replaced missing attributes Case 9 normal likelihoods 42 (i.e, high), improving estimates mixture parameters.199fiRUIZ, LPEZ-DE-TERUEL & GARRIDOCaseP11x1y1x1yt1,wwhite2x2ytrue.500211220.48 -.04 .03 2.11 1.00 1.00 2.09 1.8320%.48 .16 -.03 1.91 1.01 0.96 2.31 2.0940%.49 .14 -.16 1.78 .99 0.95 2.39 2.2960%.45 .02 -.29 2.50 .78 1.00 1.86 2.0180%.49 -.11 1.69 2.21 1.73 .50 1.91 0.311.48 .06.90 1.88 1.73 1.00 1.88 2.982.48 -.04 .05 1.90 .92 1.00 1.98 1.973.47 .02.09 1.60 1.02 .87 2.00 1.784.49 .27 -.08 1.97 .90.70 2.10 2.065.43 -.04 -.18 2.40 1.48 .82 1.85 1.526.54 -.07 -.02 1.97 1.09 .56 1.93 2.117.46 .15 -.16 2.73 2.53 .31 1.94 1.628.79 .87.08 2.09 1.52 .51 1.96 3.619.48 .32 -.02 1.77 1.10 1.00 1.92 0.6710.45 .00.03 2.20 1.01 1.00 2.13 1.55Table 6. Parameter Estimates Uncertain Information (see text)2x2yt2,wblack11.00.88.941.031.14.961.011.141.011.52.852.470.870.941.0422.082.102.141.770.682.401.902.071.942.331.692.901.211.221.7711.001.001.001.000.471.001.000.850.71.80.62.29.541.001.00Example 14: Learning examples missing attributes performed IRISdomain illustrate behavior MFGN framework. whole data set randomlydivided two subsets equal size training testing. 5-component mixture modelsobtained evaluated, combining missing data proportions 0% 50%. errorprediction attribute U (plant class) following:missing attributestraining set0%0%50%50%test set0%50%0%50%prediction error2.7%12.0%4.0%18.7%relatively simple IRIS domain, performance degradation due 50% missing attributes much greater inference learning stage. Extended EM algorithm ablecorrectly recover overall structure domain available information.4.4 CommentsConvergence EM Algorithm fast, requiring adjustable parameters learningrates. algorithm robust respect random initial mixture parameters: bad localmaxima frequent alternative solutions usually equally acceptable. examplescontribute components, never wasted unfortunate initialization. fixednumber components, algorithm progressively increases likelihood J training datamaximum reached. number components incremented maximum J alsoincreases, limit value obtained cannot improved using extra components (Fukunaga 1990). simple heuristics incorporated standard Expectation-Maximizationscheme control value certain parameters (e.g., lower bounds established variances) quality model (e.g., mixture components eliminated proportionssmall).case, factorized components specially convenient matrix inversionsrequired and, important, uncertain missing values correctly handled200fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURESsimple unified way, heterogeneous attribute sets. necessary provide modelsuncertain attribute correlations since covariance parameters must estimated. Finally,training sample size must large enough relation degree uncertainty examples complexity joint density model order obtain satisfactory approximations.hand, number mixture components required satisfactory approximation joint density must specified. pragmatic option minimization experimental estimation cost main inference task, exists. instance, regressioncould increase number components acceptable estimation error obtainedindependent data set (cross-validation). idea applies pattern classification: usenumber components minimizes error rate independent test set. However, onemain advantages proposed method independence learning stageinference stage, freely choose dynamically modify input output roleattributes. Therefore, global validity criterion desirable. typical validation methodsmixture models reviewed McLachlan & Basford (1988); standard approach basedlikelihood ratio tests number components. Unfortunately, method validatemixture itself, selects best number components (DeSoete 1993).Since MFGN framework provides explicit expression model p(z), applystatistical tests hypothesis independent sample taken true density (e.g. subset examples reserved testing) find obtained approximation compatibletest data. hypothesis H = {T comes p(z)} rejected, learning process mustcontinue, possibly increasing number components. difficult build statisticaltests, e.g. moments p(z), sample means variances directly obtained.However, data sets usually include symbolic numeric variables, also developedtest expected likelihood test sample, measures well p(z) covers examples. mean variance p(z) easily obtained using properties generalizednormals. experiments simple univariate continuous densities show testpowerful small sample sizes, i.e. incompatibility always detected, standard tests significantly evidence rejection. Nevertheless, clearly inaccurate approximationsdetected, results improve sample size increases test valid data sets uncertain values.Minimum Description Length (Li & Vitnyi 1993) principle also invoked selectoptimum number components trading-off complexity model accuracydescription data.201fiRUIZ, LPEZ-DE-TERUEL & GARRIDO5. Discussion Experimental Results5.1 Advantages Joint Modelsinductive inference methods compute direct approximation conditional densitiesinterest, even obtain empirical decision rules without explicit models underlying conditional densities. cases, model learning stage depend selected input /output role variables. contrast, presented inference learning method basedapproximation joint probability density function attributes convenientparametric family (a special mixture model). MFGN framework works pattern completionmachine operating possibly uncertain information. example, given pattern classificationproblem, learning stage suffices predicting class labels feature vectorsestimating value missing features observed information incomplete patterns.joint density approach finds regions occupied training examples whole attributespace. attribute dependences captured higher abstraction level one providedstrictly empirical rules pre-established target variables. property extremely usefulmany situations, shown following examples.Example 15: Hints provided inference multivalued relations. Given dataset model Example 10, assume interested value x = 0.obtain bimodal marginal density shown Fig. 19.a corresponding estimator x0.2 1.4 is, sense, meaningless. However, specify branch interestmodel, inferring = 0 x -11 (i.e., x small), obtain unimodalmarginal density Fig. 19.b reasonable estimator x 0.80.5.(a)(b)Figure 19. desired branch multivalued relations selected providinginformation output values. (a) Bimodal posterior density inferredy=0. (b) Unimodal posterior density inferred = 0 hint x small.Example 16: Image Processing. advantages joint model supporting inferencespartial information inputs outputs illustrated following applicationnatural data (see Fig. 20). image Fig. 20.a characterized 5-attribute density(x, y, R, G, B) describing position color pixels. random sample 5000 pixelsused build 100-component mixture model. interested location certain ob-202fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURESjects image. Figs. 20.b-f show posterior density desired attributes given following queries:"Something light green". Fig. 20.b. Two groups easily identified posteriordensity, corresponding upper faces green objects6. = C1={x, unknown;R=11050, G=24510, B=16050}."Something light green dark red". Fig. 20.c. find groupsadditional, scattered group, corresponding red object. greater dispersionarises larger size red object also fact R componentdark red disperse G component light green. =Two equiprobable components C1 C2={x, unknown; R=11010, G=B=3050}."Something light green right". Fig. 20.d. provide partial informationoutput: = C3={x=24030; unknown; R=11050, G=24510, B=16050}"Something white". Fig. 20.e. = C4={x,y unknown; R=24510, G=24510, B=24510}"Something white, lower-left region, main diagonal (y<240-x)". Fig. 20.f.provide relational information attributes modeled = 6 equiprobable components (note case posterior distribution contains 600 components, still computationally manageable) ={x=6030, y=18030, R=24510, G=24510, B=24510}+{x=6030, y=12030, R=24510, G=24510, B=24510}+{x=6030, y=6030, R=24510, G=24510, B=24510}+{x=12030, y=12030, R=24510, G=24510, B=24510}+{x=12030, y=6030, R=24510, G=24510, B=24510}+{x=18030, y=6030, R=24510, G=24510, B=24510}cases, posterior density consistent structure original image. timerequired compute posterior distribution always lower one second. Learning timeorder hours Pentium 100 system. Simpler models (25-component, obtained1000 random pixels) produced also acceptable results much lower learning time. Furthermore, EM algorithm efficiently parallelized.hand, large number irrelevant attributes, joint model strategy wastes resources capture proper probability density function along unnecessary dimensions. (This problem arise specification likelihood function, since relevant attributes explicitly appear model.) Joint modeling appropriate domainsmoderated number "meaningful" variables without fixed input / output roles.6Note sharp peak (a component small dispersion) obtained learning process, also "transmits"posterior density. kind artifacts inocuous easily removed post processing.203fiRUIZ, LPEZ-DE-TERUEL & GARRIDO(a)(b)(c)(d)(e)(f)Figure 20. Inference results image domain Example 16. (a) source image.(b) posterior density attributes x-y given "Something light green". (c)"Something light green dark red". (d) "Something light green right".(e) "Something white". (f) "Something white, lower-left region,main diagonal image (Y<240-X)"5.2 Advantages Factorizationproposed methodology supported general density approximation property mixturemodels. use components independent variables order make computations feasible204fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURESinference learning stage. Factorized components imposed mixture model without loss generality. statistical dependence variables still captured, costpossibly larger number components mixture achieve required accuracyapproximation.simplicity building block structure entirely compensated important saving computation time. High-dimensional integrals analytically computed univariateintegrals matrix inversions avoided learning stage. Additionally, high-dimensionaldomains easily modeled using small number parameters mixture component.viewpoint Computational Learning Theory (Vapnik 1995), models small number adjustable parameters (actually, low expressive power) favorable consequencesgeneralization.Mixtures factorized components also used Latent Class Analysis (DeSoete 1993),well-known unsupervised classification technique. assumed statistical dependencesattributes fully explained hidden variable specifying latent classexample. method similar Gaussian decomposition clustering algorithm mentionedSection 1, constrained component-conditional attribute independence. However, goalunsupervised classification obtaining accurate mathematically convenient expressionjoint density variables, required derive desired estimators. meaningcomponents irrelevant, long whole mixture good approximation joint density.expressive architectures, combine mixture models local dimensionality reduction, also considered: Mixtures Linear Experts (Jordan & Jacobs 1994), MixturesPrincipal Component Analyzers (Sung & Poggio 1998) Mixtures Factor Analyzers (Ghahramani & Hinton 1996, Hinton, Dayan, & Revow 1997). Unfortunately, general kind inference learning uncertain data considered work cannot directly incorporatedarchitectures computational advantages demonstrated MFGN model.restriction factorized components may produce undesirable artifacts approximations certain domains learned small training samples. Nevertheless, problem alwaysoccurs approximator structure building block match shapetarget function. case, many terms (or components, units, etc.) required goodapproximation associated parameters correctly adjusted large trainingsample. However, note complexity model measured uniquely termsnumber mixture components. number adjustable parameters probably bettermeasure complexity. instance, full covariance models show quadratic growth number free parameters respect dimension attribute vector. factorized components growth linear, amount training data need unreasonably high evennumber mixture components large.real applications, nature target function unknown, little said prioribest building block structure used universal approximator. chosensimple component structure make inference learning feasible uncertain information. Section 5.4 provides experimental evidence realistic problems proposed modelinferior popular approaches.5.3 Qualitative Comparison Alternative ApproachesInstead proposed methodology, based mixture models EM algorithm, alternative nonparametric density approximation methods could also used (either joint densityspecific conditional densities). instance, nearest neighbor rule locally approximatestarget density using certain number training samples near point interest. Symbolic205fiRUIZ, LPEZ-DE-TERUEL & GARRIDOattributes directly estimated voting scheme continuous attributes also estimatedaveraging observed values training instances near, subspace observedattributes, point interest. However, small sample sizes, estimatorssmooth show strong sensitivity random fluctuations training set, penalizesestimation cost. large sample size, time required find nearest neighbors becomeslong. example, consider regression problem Example 10, Section 3.5. Fig. 11.b showsMFGN solution 4 components MSE=0.381. Fig. 21.a shows regression line obtained 5-nearest-neighbors average, higher MSE=0.522.Parzen windows similar kernel approximation methods used smooth resultssimple nearest neighbors rule (Duda & Hart 1973, Izenman 1991). actually mixturessimple conventional densities located training samples. principle, propertiesMFGN framework could adapted kind approximation (Ruiz et al. 1998). Learningbecomes trivial, strong run time computation effort required since concise modeldomain extracted training set. kind rote learning also negative consequences generalization according Occam Razor Principle (Li & Vitnyi 1993). adequately cross-validated mixture model small number components relation training sample size reasonably guarantees probably true attribute dependencies correctlycaptured.C2C2C1C1(a)(b)(c)Figure 21. Alternative solutions regression classification (see text details).nature solutions obtained Backpropagation Multilayer Perceptrons (Rumelhart etal. 1986) pattern classification also illustrative. general, decision region geometrically expressed union intersections several halfspaces defined unitsfirst hidden layer. However, backprop networks often require long learning times, many adjustable parameters and, worse, apparently simple distributions patterns hard learn.instance, solution circle-ring classification problem Fig. 21.b, obtained network 6 hidden units requires hundreds standard backprop epochs. decision regionssatisfactory, even though network extra flexibility task (3 hidden unitssuffice separate training examples). Better solutions exist using resources network architecture, backprop learning find them. contrast, solution obtainedMFGN approach using 7 components (Fig. 21.c) requires learning time orders magnitudeshorter backprop optimization. components mixture contribute synthesizereliable decision regions acceptable solutions also obtained smaller numbercomponents.206fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURESproposed approach closely related well-known family approximation techniqueswhich, essentially, distribute (using kind clustering self-organizing algorithm) detectors relevant regions input space combine responses computingdesired outputs. case Radial Basis Functions (RBF) (Hertz et al.), classification regression trees proposed (Breiman et al. 1984) topological maps used (Cherkassky & Najafi 1992) locate knots required piecewise linear regression.relevant methodology proposed (Jordan & Jacobs 1994, Peng et al. 1995),EM algorithm used learn hierarchical mixtures experts form linear rulesway desired posterior densities explicitly obtained. properties EM algorithm also satisfactorily used (Ghahramani & Jordan 1994) obtain unbiased approximations missing data mixture-based framework similar ours. framework extendssuccessful approach exploiting conjugate properties chosen universal approximationmodel: uncertain information arbitrary complexity efficiently processed inferencelearning stages.MFGN framework appropriate moderated number variables showing relativelycomplex dependencies. contrast, Bayesian Networks satisfactorily addresses case largenumber variables clear conditional independence relations. situationscertain subset variables Bayesian Network shows explicit causal structure. subdomain could empirically modeled mixture model order considered later composite node embedded whole network. subdomain conditionally isolatedrest variables set communication nodes, MFGN framework usedperform required inferences.Finally, mixture models typically used unsupervised classification: exampleslabeled index component highest posterior probability. fact, MFGNframework explicitly finds clusters training set. Furthermore, continuous symbolic attributes allowed joint density, examples clustered using implicit probabilistic metric automatically weighs (heterogeneous) attributes, even missinguncertain values. However, method effective groups intereststructure component densities. order simplify inference mixture componentsselected constraints (Gaussian, independent variables) necessarily verifiednatural groups found real applications.tentative possibility (inspired common heuristic clustering technique) consists joining overlapping components (e.g., according Battachariya distance, well-known boundBayes error used Statistical Pattern Recognition (Fukunaga 1990)). Unfortunately, experiments indicate overlapping threshold free parameter strongly determinesquality results. universal threshold, independent application, seem exist.principle, clusters arbitrary geometry may discovered, cannot easily automated.Therefore, nonparametric cluster analysis methods (e.g. density valley seeking) suggestedlabeling complex groups.5.4 Experimental EvaluationMFGN method evaluated standard benchmarks Machine Learning database repository University California, Irvine (Merz Murphy 1996). contains inductive learning problems representative real world situations. experimentedfollowing databases: Ionosphere, Pima Indians, Monk's Problems, Horse Colic,illustrate different properties proposed methodology. cases MFGN compared alternative learning methods respect inference task considered interest207fiRUIZ, LPEZ-DE-TERUEL & GARRIDOproblem (typically, prediction specific attribute given rest them). usually giveerror rate training test set indicate amount overfitting obtainedlearning algorithms.(a) Ionosphere(b) Pima IndiansFigure 22. discriminant 2D projections two representative databases.5.4.1 IONOSPHERE DATABASETwo classes radar returns ionosphere must discriminated vectors 32 continuous attributes7. 351 examples, randomly partitioned two disjoint subsets approximately equal size training testing. prevalence minoritary class (randomprediction rate) 36%. Figure 22.a Table 7 show typical statistical pattern recognition problem, easily solvable standard methods. results suggest Bayes (optimum)error probability around 5%.error ratePE(training set)METHOD(test set)Linear MSE (pseudoinverse)1-1 Nearest Neighbor2-3 Nearest NeighborParzen ModelBackprop Multilayer Perceptron 2 hidden unitsSupport Vector Machine, RBF kernel, width 1, (105 s.v.)Support Vector Machine, RBF kernel, width 3, (35 s.v.)Support Vector Machine, polinomial kernel, order 2, (41 s.v.)Support Vector Machine, polinomial kernel, order 3, (45 s.v.)Support Vector Machine, polinomial kernel, order 4, (42 s.v.)Full covariance gaussian mixture, 1 component/classFull covariance gaussian mixture, 2 component/classFull covariance gaussian mixture, 3 component/classMFGN 4 components (average)MFGN 8 components (average)MFGN 15 components (average)MFGN, best result cross-validation (8 components)Table 7. Ionosphere Database Results7.11.05.00.03.01.005.22.15.11.06.10.05.07Originally database contains 34 attributes. Two them, meaningless ill behaved, eliminated.208.14.13.18.08.08.05.09.13.17.20.11.19.26.21.08.13.06.13.06.06fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURESproblem, plain MFGN method, without special heuristics learning stage,comparable average alternative methods. best solution training set (crossvalidation) entirely satisfactory.Ionosphere database also present exhaustive study performance given varyingproportions missing values training testing examples. value x % meanstraining test examples value attribute deleted probability x. basic experiment consists learning MFGN model prescribed number components (4, 8 15)computing error rate training test sets. Table 8 shows mean value 2 standard deviations error rates obtained 10 repetitions basic experiment configuration. Column contains error rate configuration training set. training/test partition kept fixed analyze variability solutions due random initializationEM.LEARNING0%INFERENCE10%25%50%4 COMP. - 0%8 COMP. - 0%15 COMP. - 0%22 1511 610 521 813 613 621 812 613 622 813 513 522 912 613 44 COMP. - 10%8 COMP. - 10%15 COMP. - 10%21 1411 310 323 1113 512 623 1112 512 723 1113 512 623 1113 412 34 COMP. - 25%8 COMP. - 25%15 COMP. - 25%18 712 79519 514 1012 919 514 913 1118 615 813 918 614 713 74 COMP. - 50%27 18 26 15 27 15 27 14 26 138 COMP. - 50%16 12 21 15 21 15 21 13 20 1115 COMP. - 50% 13 626 17 25 15 25 14 23 13Table 8. Evaluation MFGN Ionosphere Database givendifferent proportions missing data training testing subsets.expected, MFGN model robust respect large proportions missing valuestest patterns, moderated proportions missing data training set. compared behavior standard algorithm Decision Tree construction inspired(Quinlan 1993), also able support missing values8. Table 9 shows error ratesdecision trees experimental setting Table 8. kind Decision Tree obtainserror rates better averages obtained MFGN. However, MFGN's best solutions(selected cross-validation) better ones obtained Decision Tree. Furthermore,Decision Tree performance degrades faster MFGN, especially respect proportionmissing values inference stage.8Essentially, missing values handled follows. learning stage, attribute selected, examplesmissing values sent partitions appropriate weights. inference stage, node asks missingvalue, follows branches appropriate weights finally outputs combined.209fiRUIZ, LPEZ-DE-TERUEL & GARRIDOLEARNING0%INFERENCE10 %25 %50 %1%0%9%10 %11 %12 %5%10 %14 %15 %19 %18 %6%25 %15 %17 %17 %18 %8%50 %17 %18 %18 %19 %Table 9. Evaluation basic Decision Tree Ionosphere Database given different proportions missing data training testing subsets.5.4.2 PIMA INDIANS DATABASEproblem must discriminate two possible results diabetes test given PimaIndians. 8 continuous attributes, 768 examples, randomly partitioned two disjoint subsets equal size training testing. prevalence minority class 35%.attribute vector normalized. Table 10 presents comparative results.error ratePE(training set)METHOD(test set)Linear MSE (pseudoinverse)Oblique Decision Tree 8 decision nodes1-1 Nearest Neighbor2-3 Nearest NeighborFull covariance gaussian mixture, 1 component/classFull covariance gaussian mixture, 2 component/classFull covariance gaussian mixture, 3 component/classFull covariance gaussian mixture, 4 component/classBackprop Multilayer Perceptron 2 hidden unitsBackprop Multilayer Perceptron 4 hidden unitsBackprop Multilayer Perceptron 8 hidden unitsSupport Vector Machine, RBF kernel, width 1 (297 s.v.)Support Vector Machine, RBF kernel, width 3 (176 s.v.)Support Vector Machine, polynomial kernel, order 4 (138 s.v.)Support Vector Machine, polynomial kernel, order 5 (131 s.v.)MFGN 4 componentsMFGN 6 componentsMFGN 8 componentsTable 10. Pima Indians Database Results.22.18.24.19.17.17.17.14.05.28.25.29.23.24.30.25.26.29.30.31.25.24.29.30.35.36.34.35.32.35Despite low dimensionality large number examples, classification problemhard (see Figure 22.b). Even sophisticated learners backpropagation networks, decisiontrees support vector machines, able store reasonable proportion training set,achieve significant generalization. MFGN shows similar behavior, although slightlyless prone overfitting (the error rate training set misleading).5.4.3 HORSE COLIC DATABASEdatabase contains classification task heterogeneous attribute vector including symbolic, discrete continuous variables, 30% missing values. illustrates problem210fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURESfeature selection context joint modeling, mentioned Section 5.1. Table 11 showserror rates obtained MFGN using different attribute subsets9. take advantage generalinference properties, MFGN model must applied attribute subset interest.inference task fixed number attributes large, alternative methodsused.METHODPEPE(distribution, 10 initializations)(best)6 Selected attributesMFGN 2 componentsMFGN 3 componentsMFGN 4 componentsMFGN 5 componentsMFGN 6 componentsMFGN 7 componentsMFGN 10 componentsMFGN 12 componentsMFGN 15 components.32.00.20.05.19.02.20.02.19.03.20.04.22.04.19.03.19.04.32.18.18.18.16.18.18.16.15.22.01.21.02.21.03.23.02.21.02.21.02.21.19.18.18.18.18.28.02.29.03.34.08.34.06.25.25.25.288 Selected attributesMFGN 4 componentsMFGN 6 componentsMFGN 8 componentsMFGN 10 componentsMFGN 12 componentsMFGN 15 components23 Selected attributesMFGN 6 componentsMFGN 8 componentsMFGN 10 componentsMFGN 15 componentsTable 11. Horse Colic Database Results (random rate = .5)5.4.4 MONK'S PROBLEMSMonk's problems three concept learning tasks 6 symbolic attributes, widely usedbenchmarks inductive learning algorithms (Thrun et al. 1991). seen Table 12, MFGN failsMONK1 (where acceptable generalization obtained) MONK2 (where trainingexamples cannot even stored). contrast, MFGN correctly solves MONK3. behaviorrelated fact MONK's problems based deterministic abstract conceptsmay lack kind geometric regularities attribute space required probabilistic models10.9Features individually selected using simple discrimination index related Kolmogorov-Smirnov statistic(Ruiz 1995).10typical example parity problem: acceptable off-training-set generalization cannot achieved inductivebias learning machine biased towards "smooth" solutions.211fiRUIZ, LPEZ-DE-TERUEL & GARRIDOFig. 23 shows discriminant 2D projections datasets illustrates factMONK2 cannot easily captured statistic techniques. benchmark, MFGN performancesimilar popular probabilistic methods (Thrun et al. 1991).(a) MONK1(b) MONK2Figure 23. Discriminant 2D Projections Monk's Datasets.(c) MONK3error rate(training set)METHODPE(test set)MONK1 (random rate = .5)Linear MSE (pseudoinverse)1-1 Nearest NeighborSupport Vector Machine, RBF kernel, width 1 (78 s.v.)Cascade CorrelationMFGN 4 componentsMFGN 8 components.29.06.00.34.17.080.40.33MONK2 (random rate .4)Linear MSE (pseudoinverse)1-1 Nearest NeighborSupport Vector Machine, RBF kernel, width 1 (117 s.v.)Cascade CorrelationMFGN 4 componentsMFGN 8 componentsMFGN 15 components.40.31.26.14.37.19.200.38.44.50MONK3 (random rate .5)Linear MSE (pseudoinverse)1-1 Nearest NeighborSupport Vector Machine, RBF kernel, width 1 (69 s.v.)Cascade CorrelationMFGN 2 componentsMFGN 4 componentsMFGN 8 componentsTable 12. Monk's Problems Results212.19.07.04.03.19.18.08.03.03.03.08fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURES5.4.5 COMMENTSexperiments demonstrate MFGN model able obtain acceptable resultsmany real world applications. particular, error rates obtained standard classification taskscomparable obtained popular learners. Additionally, MFGN able performinferences attribute given uncertain partial information, possiblealternative methods. property makes MFGN attractive alternative manyinference problems one illustrated Example 16. experiments also contributed characterize kind problems MFGN model best suited. Essentially,relationship among attributes must true probabilistic nature, attribute vector mustmoderated size containing "relevant" variables. previous feature selection / accommodationstage recommended certain applications.6. Conclusionsdeveloped efficient methodology probabilistic inference learning uncertain information. proposed MFGN framework, joint probability density functionattributes likelihood function available information approximated Mixtures Factorized Generalized Normals. mathematical structure allows efficient computation,without numerical integration, posterior densities expectations desired variables givenevents arbitrary geometry. extended version EM learning algorithm developed estimate parameters required mixture models uncertain training examples.Different paradigms pattern recognition, regression pattern completion subsumedcommon framework.comprehensive collection examples illustrates methodology, criticallycompared alternative techniques. Extended EM algorithm able learn satisfactorydomain models reasonable number examples uncertain values, taking accountexplicit likelihood functions available information. Results satisfactory wheneversample size large relation amount (known) degradation training set. experiments also characterized kind situations model manages better: Domains described moderate number heterogeneous attributes complex probabilistic dependences,problems output variables necessarily known learning stage (i.e. patterncompletion), and, finally, problems explicit management uncertainty needed, either learning inference stage (or even both). MFGN framework obtainedfavorable trade-off useful features model complexity solutions different applications benchmarks.Future developments work include improving learning stage heuristicsteps combined standard E steps control adequacy acquiredmodels. Additional studies required validation tests, generalization, scalability, robustnessdata preprocessing. essential idea working explicit likelihood functionsincorporated Parzen approximation scheme also interested expressivemodel structures mixtures factor analyzers, principal component analyzers linear experts. Finally, methodology developed pure Bayesian framework subsumedDempster-Shafer Evidence Theory.213fiRUIZ, LPEZ-DE-TERUEL & GARRIDOAcknowledgmentsauthors would like thank anonymous reviewers careful reading helpful suggestions. work supported Spanish CICYT grants TIC95-1019, TIC97-1343C02-02 TIC97-0897-C04-03.ReferencesBerger, J., (1985). Statistical Decision Theory Bayesian Analysis. Springer-Verlag.Bernardo, J.M., Smith, A.F.M. (1994). Bayesian Theory. Wiley.Bouckaert, R.R. (1994). Properties Bayesian Belief Network Learning Algorithms. Proceedings Uncertainty AI, pp. 102-109.Breiman, L., Friedman, J.H., Olshen, R.A., Stone, C.J. (1984). Classification RegressionTrees. Wadsworth International Group, Belmont, CA.Chang, K. & Fung, R. (1995). Symbolic Probabilistic Inference Discrete Continuous Variables. IEEE Tran. Systems, Man, Cybernetics, Vol. 25, No. 6, june, pp. 910916.Cherkassky, V. Lari-Najafi, H. (1992). Nonparametric Regression Analyisis Using SelfOrganizing Topological Maps H. Wechsler (ed.), Neural Networks Perception. Vol.2,Computation, Learning Architectures, San Diego: Academic Press.Cohn, D.A., Ghahramani, Z. & Jordan, M.I. (1996). Active Learning Statistical Models.Journal Artificial Intelligence Research 4, pp. 129-145.Dalal, S.R. & Hall, W.J. (1983). Approximating Priors Mixtures Natural Conjugate Priors.J. R. Statist. Soc. B, Vol. 45, No. 2, pp. 278-286.De Soete, G. (1993). Using Latent Class Analysis Categorization Research I. V. Mechelen,J. Hampton, R.S. Michalski, P. Theuns (eds.), Categories Concepts: Theoretical ViewsInductive Data Analysis, San Diego: Academic Press.Dempster, A.P., Laird, N.M., Rubin, D.B., (1977). Maximum Likelihood Estimation Incomplete Data via EM Algorithm. Journal Royal Statistical Society, Series B, Vol. 39:pp. 1-38.Duda, R.O. Hart, P.E. (1973). Pattern Classification Scene Analysis. John Wiley & Sons.Fan, C.M., Namazi, N.M. Penafiel, P.B. (1996). New Image Motion Estimation AlgorithmBased EM Technique. IEEE Transactions Pattern Analisys Machine Intelligence, Vol.18, No.3, March, pp. 348-352.Fukunaga, K. (1990). Introduction Statistical Pattern Recognition. Academic Press.Ghahramani, Z. Jordan, M.I. (1994) Supervised learning Incomplete data via EMapproach Cowan, J.D., Tesauro, G., Alspector, J. (eds.). Advances Neural Information Processing Systems 6. Morgan KauffmanGhahramani, Z. Hinton, G.E. (1996) EM algorithm mixtures factor analyzers.Tech. Rep. Univ. Toronto. CRG-TR-96-1.214fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURESHeckerman, D. & Wellman, M.P. (1995). Bayesian Networks. Communications ACM, Vol.28, No.3, pp. 27-30, March.Hertz, J., Krogh, A., Palmer, R.G., (1991). Introduction Theory Neural Computation.Addison Wesley.Hinton, G.E., Dayan, P. Revow, M. (1997). Modeling manifold images handwrittendigits. IEEE T. Neural Networks 8, pp. 65-74.Hornik, K., Stinchcombe, M., White, H., (1989). Multilayer FeedForward Networks UniversalApproximators. Neural Networks, No.2.Hutchinson, A. (1994). Algorithmic Learning. New York: Oxford Univ. Press.Izenman, A.J. (1991). Recent Developments Nonparametric Density Estimation. J. Amer. Statist. Assoc. Vol. 86, No. 413, pp. 205-224.Jordan, M.I., Jacobs, R.A., (1994). Hierarchical Mixtures Experts EM Algorithm.Neural Computation, 6, pp. 181-214.Kohonen, T., (1989). Self-Organization Associative Memory. Springer-Verlag.Lauritzen, S.L. & Spiegelhalter, D. J. (1988). Local Computations Probabilities GraphicalStructures Application Expert Systems. J. R. Statist. Soc. B. 50, No. 2, pp. 157224.Li, M. Vitnyi, P. (1993). Introduction Kolmogorov Complexity Applications.New York: Springer-Verlag.McLachlan, G.J., Basford, K.E., (1988). Mixture Models. New York: Marcel Dekker.McLachlan, G.J. Krishnan, T. (1997). EM Algorithm Extensions. John WileySons.Michalski, R.S., Carbonell, J. Mitchell, T.M., eds. (1983). Machine Learning: ArtificialIntelligence approach. Palo Alto, CA: Tioga Press. Also reprinted Morgan Kaufmann(Los Altos, CA).Michalski, R.S., Carbonell, J. Mitchell, T.M., eds. (1986). Machine Learning: ArtificialIntelligence approach, Vol. II. Los Altos, CA: Morgan Kaufmann.Mohgaddam, B. Pentland, A. (1997). Probabilistic Visual Learning Object Representation. IEEE PAMI, Vol. 19, No.7, 710. pp. 696-.Merz, C.J. Murphy, P.M. (1996). UCI Repository machine learning databases.[http://www.ics.uci.edu/~mlearn/MLRepository.html]. Irvine, CA: University California,Department Information Computer Science.Palm, H.C. (1994). New method generating statistical classifiers assuming linear mixturesGaussian densities, Proceedings 12th IAPR International Conference Pattern Recognition (Jerusalem, October 9-13, 1994), vol.2, IEEE, Piscataway, NJ, USA,Papoulis, A., (1991). Probability, Random Variables Stochastic Processes. MCGraw-Hill.Pearl, J., (1988). Probabilistic reasoning intelligent systems: Networks plausible inference.Morgan Kaufmann.215fiRUIZ, LPEZ-DE-TERUEL & GARRIDOPeng, F., Jacobs, R.A., Tanner, M.A. (1995). Bayesian Inference Mixtures-of-Experts Hierchical Mixtures-of-Experts Models Application Speech Recognition. AcceptedJournal American Statistical Association.Priebe, C.E., Marchette, D.J., (1991). Adaptive mixtures: recursive nonparametric pattern recognition. Pattern Recognition, V24 N12, pp. 1197-1209.Pudil, P., Novovicova, J., Choakjarernwanit, N., Kittler, J. (1995). Feature Selection BasedApproximation Class Densities Finite Mixtures Special Type. Pattern RecognitionVol.28 No.9 pp. 1389-1398.Quinlan, J.R., (1993). C4.5: Programs Machine Learning. San Mateo, CA: Morgan Kaufmann.Redner, R.A., Walker, H.F., (1984). Mixture densities, maximum likelihood estimationEM algorithm. SIAM Review, Vol. 26, pp. 195-239.Rojas, R. (1996). Short Proof Posterior Probability Property Classifier Neural Networks. Neural Computation Vol.8 Issue 1, January.Rumelhart, D.E., Hinton, G. E. Williams, R. (1986). Learning Internal RepresentationsError Propagation Rumelhart, McClelland & PDP Group (1986), pp. 319-362.Rumelhart, D.E., McClelland, J.L. & PDP Research Group. (1986). Parallel Distributed Processing: Explorations Microstructure Cognition, vol. 1, Foundations. CambrigdeMA, Bradford Books/MIT Press.Ruiz, A. (1995). nonparametric bound Bayes Error. Pattern Recognition, Vol. 28, No.6, pp. 921-930.Ruiz, A., Lpez-de-Teruel, P.E. Garrido, M.C. (1998). Kernel Density Estimation Indirect Observations. preparation.Sung, K.-K. Poggio, T. (1998),. "Example Based Learning View-Based Human Face Detection". IEEE Trans. Pattern Analyisis Machine Intelligence. Vol.20, N.1. January, pp.39-51.Tanner, M.A. (1996). Tools statistical inference. (3rd ed.). Springer.Thrun, S. et al (1991). "The MONK's Problems. performance Comparison Different LearningAlgorithms". Technical Report CMU-CS-91-197.Titterington, D.M., A.F.M. Smith U.E. Makov (1985). Statistical Analysis Finite MixtureDistributions, Wiley, New York.Traven, H.G.C., (1991). Neural Network Approach Statistical Pattern Classification"Semiparametric" Estimation Prob. Den. Func.. IEEE Neural Networks, V2 N3.Valiant, L.G. (1993). View Computational Learning Theory Meyrowitz Chipman,eds. (1993). Foundations Knowledge Acquisition: Machine Learning. Kluwer Acad. Pub.Valiveti, R.S., Oommen, B.J., (1992). using chi-squared metric determining stochasticdependence. Pattern Recognition, V25 N11 pp. 1389-1400.Vapnik, V.N. (1982). Learning Dependencies based Empirical Data. Springer, New York.Vapnik, V.N. (1995). Nature Statistical Learning Theory. Springer, New York.216fiPROBABILISTIC INFERENCE UNCERTAIN DATA USING MIXTURESWan, E.A., (1990). Neural Networks Classification: Bayesian Interpretation. IEEE Trans.Neural Networks, V1 N4.Weiss, Y. Adelson E.H. (1995). Perceptually organized EM: framework motion segmentation combines information form motion. TR MIT MLPCS TR 315.Wilson, D.R. Martinez, T.R. (1997). Improved Heterogeneous Distance Functions. JAIR, V6,pp. 1-34.Wolpert, D.H., ed. (1994a). Mathematics Generalization. Proc. SFI/CLNS workshopFormal Approaches Supervised Learning.Xu, L. & Jordan, M.I. (1996). Convergence Properties EM Algorithm GaussianMixtures. Neural Computation Vol.8 Issue 1, January.You, Y.L. Kaveh, M. (1996). regularization approach joint blur identification imagerestoration. IEEE Image Processing, vol 5.no.3, pp. 416-428.217fifffi! #"$ %'&)(+*, ((-/.10/23540/6!,789:; <)-/=(-!>@?9 %&<A, 2/=(-BDCAEGFIH/JLKNMOQPRCTSVUXWYM/CAWYMOZM/[;J]\_^`J]S@acbIHOedfCTgAMh;ijYkmlnlno)pqo'rsntur#vwrx1yz1{}|uz$~zAyz$x1]|{1y$zuy$}T~8@ Q$ ]/8/'n}@A]YY)]I)nZQ/@m58 nTn#@Q5 ;nw58nffn/5ZQ/8/n58@5/85nn#555/585 qn@LTn58n}I/QTn5;58NA88/T!@n+/@T!//NI85n/c588@@!qcLnn5qQnn8nn5qncnn5NqN/n588#n 5#+ffn!5}5Ln5n8@nm@15L@}n;88 /nnn+nn]@nffn/@5n5@+8 5!@58@85c55A@;5/n55@/ffw5!/nAnnnLnn]n88;@5;L@q5!/@n5 !f//n5nL/nnn$L]@n@8Z]} nn@5nZ@Q8]n5#8ncn)n8u@5mQnffn@}85n5ff8@}8umQn@5+Q/8555nn}n/5n5/)n;58 5/!8Ln5!/@;588ZI} ;+QAI1ff fifffififiA1I1ff!"#fi $ %ff &231465&9:<;=;4fi@6?>Q$ 8 " @4fi'()*,+.'()/+0'()*678Afi @591B:@"@B"CED,;fififfF"GHI1?ff fi &I">G5?J4fiLK4;ff ?ffN;/;fi"fi M9N 1I1 ffOff fi P @ EfiQ HF<G5RFfifffi# 8 5S $1SF0A P P/TUfiEfi MWVX5@ OED,@ Y5fffiZfi &fi?+5P @Efi#[=F<?9 B:\ff]&, 5@ E59fi^ P 4F"_ EfiU1 cfi 1U1 ff ffffE4fiM1` ED?;"&] a5G>,bfi cED;4fifiCfiQ 5 4ff EN8 >fi$e&&8 4>ff >cfi2@5U;4"fifi9FffF01Kgff15ffffQF< : 4fi "M3h5fifffi &'((\fB7=5F.fi@EW 644= ]&,?fi!,jk ff@ 6#/fi @ ff!5?E @;4"fi8 ff$ 1R4 >l: >\,M^Vm"15!A 6iffE ]&, 4 [fi O5R5_;4"fiR1 BfiA4 >:,>\[ @F<]& 8 5ff45= iEfi5; :!fi# ff!fi4 ]Mh5n; 4[;4 4ffgC 4 C 1I$ ff?ff fic$ pI" fii5"q& '()/+rA 8 >,& '()(+Os EZ=uwvS4x& '((y+ %z& '((y+ rR4 8 >\,& '((\f+ r3 u{Tff$! &;fifi4"Fffffffgc5Y 8 @ !"_4!fffiUG ,}.ffE~ lfi!4ENbfi!i5'((/7 fifi_P/|5O;4 4"gO 4 ?fffiW5fi;< J. "e< P!"fi MSVX5@ #4!"3fi2fib5;4fffifiW!fi!ffff911U4 >[15 _fi,fi5Y?@!fi!ff"[1 &. P @ Efi# E "9;4"fifi#fi415!ffF<OF.fio5lJ4fiGF< !fiG"fffiQI?fi;< J.&<fiffO;i"fifiQ?=fiffWfi!F.fi?@]MH;< J. "enfiGFfi4fffi Gfi":, }.ffEfilF< 8 @ P!fffiO5fiOF< @ 6:fiff5=P4? 8 > Y;5,KFfi 5 4ffEk5 4"fi$g& '((\fB7 M5N @ 4x&b15 8 : 2&;4 4""fiYC?Gt< @ 6Qfi!iEfi &z o5 ?"Qfffib!fiJa = 6:fiff1,KI1ff/fi 8 "5 aFfi4E1 f^;4 4ff"fiAfi 4 4fi P!fffi M35N 5fffiQ&, ((- Q %%.!<5c<3/AZ!fi:]bQ9! %&%g n&/%u%/ <fiU".ffO_."ffb?E.YUR4YQEE#ff ERff[_EYz4ff4""4a0 B<ffG< 4ffC iff"gX P i" ,4 B"@zal2@O 43aff"_ff U "ffff. <<4ffk ff4"E4" i"_[i"4"" P"U"ffc UffB]Y[GE.""#?,3ff""ffE""RBffff?B_E< [Zixff4ff4"""4 E4""Z" 4ffU"Effk04A "U"= 4B"ffRAaEEB4o,C \B 3 kUff 2=<PAffE<4ff4"4"ff^l PffR"ff,AR39<3A"EffE4ff3E?4ffUffB]#4 #<ffW4^ "WQU""9lc ffff @I"k4ff" ORHE?ffE,"eHUffffff9,ff] , ,ffffffz , _ffz_.<_Z6ff"@ffG<ff6R3P?B.0 4E3k4ffffffi""^< gA ="44E i" =B<",ff<ff4ffff"ek< eR a"U ff"@"cffB"ciffEffUb Pff 4"YU 49ffk4Eff 94Uff^"UGPbE?"Y ".ff ?2,ff94BRU"ff Rff"z Uff,EffEQz<",ffff?_4"R0 eR =eR ff"kffRff R34ff ff""k<< B "ff##P"ff["ff"="ff?."kiffffk"Ykl Q_ff<"^<"ff]ffO4ff"UE,_4n<?"z [ffPO[ ff4"H." i"En,ffo3ff IffB. ffCAiE"[ SffE"ffEk "B Z9ff<",ff<ff. ff4"@,E4PU4ff4"" =ff[< ffz lffff"e_"i"? <Gff "[] [6 k@4E"?"C<",ffbff?@ ffff4EG=BH @H@cE4E ff"H x@ff[ffaff"a O<k0 44nff<",ffff? "6#ff=ff"?B"k4B32"A<"ff"["[Y ,"ffA ?Bok "G _"?e,ff?kYEk9?0EU^?ffQff?4E ff"= xU4@Y."AffB, ff[4ff4"gaffP4"CffH?fflff@? ff< <",ffGffffff3ff=Y"E"zl "offUR<"ff"Q"ffl", Co?EH" W<",0" 44i6H_"z]E9 c[<"?[9 ffU_3EgY"^Y<"ff" i44BEffffOffib" x <]ff4"#ff?ff@ "#"_ <Q0 44c=0ff[ff?ff?."?BiffEffYP4lffUffk "b 4"Rl94E"Q] ffb]<"ff"ffYff"gff" ib ffk z x^|,["OY4 ffc YUffffa|Qff" \B#PEQ a0O a_cEE9^O<ffffff"eE,.Eff[ "3E.ffE< gA "Gff?4ff=l"ff"[E,ff?< H a",ffG" i"3,?U"a=E.ffE?ffl"]n[H "l Q" =^=O< lE,.EA[<_<"O^k4@E.ffE3c"U_O< RzE,ffYE3AO< ZE,ffZ G<R<"6 \ W4"i""IOB9 ^ff"4[ff9E.ffE^< gA k Pffff^"]B[EUU _",R"nE,<6#BO< GYE,"? <=2ff] ffO"4kB"U 4"i""lRffff?a 4EnE?ff6offQG ffff."_Effa0l"C?lEk "B"affaGi"4""\fiA.b6.Bn.GRff.,ff2o_6aZ0ff,Z fffi " E !"" _#%$&4"4ffY' (#)*fi+R ,#.-/ff 102/#3fi4ff54"67 ff * 8fi&fi4ff9:; E+($& fiff fi4<E +($&4ff!=ff >9[ #?>A(4" 4ff9( 4@fi$&4" 4ff :A#3fi4ff4"(B3C /,fiED.FGGIHJKCLfifiNMPOU 4@41DKFGGQ RS69/T4fffi VU"fio W T+[ E EX*&!ff A!"ff"o#%!=Eff #5#3fi4ffY4"ZB3-[ff DFG\]RS^V A$4" 4 ff E 48ES!" G#_!=`4" D*&4ff. 5 fiaY. $<!b 5$4ff 4ff ff 6dcef 5*fi4fiV NE+($&4!=,ff g9k #b V " h$& U&4ff+3 #b V4"/fi4@5 NE +($"4ff!=, >9= #K#/-/ 02N#3fi4ffY4ffDKU<ZE +($&4ff# V E &i4ff4b # A$< 4ff9E + fi4. *fi**96jk ($i"4ff ff ;fi fih fi4b *4c ' #lfi&4ff D? E +$&4ff!=ff >9m! fiNU9o4ff4nD4fffi[+fi9Y*fi! fiU&4fiboN %$4 $0 4ff " fi4*fi_ 4ffO@ d*fi! fiU"4ffD#P8!=fi+($&4ff5U OU S4fib pqX>4ff *fi44fi 6 j ff Afi Uff *fi*9Ti !a$&fi @ fi4, **85 + 4@fi!*fi6j`ZU`9rfifi4ff9`:sfik$i" 4ff ff :t#lfi4f4ffu fi[@ (U&fi +($&fi4@k-/ N!=E"#fiZ#lfi4 9'U9k4ff!= E*fi$" fE +($&fi4@ wB3-U@ fi?D%FGGG RS6=/4"A$& U&4ff+ #d @ 4ffY@ &fi* fih ff A$4 U&4ff+R #d-/ 025#3fi4ffL4"fi &+x fih '$049` +[ fi4[ *fi**9w` huE 44fi$& 6 7 Z#lfi&4ff 4ff yUff zfifi4$&4" 4ff g9Y 4fiff +(/9E fi! fi44ff9T 4@ !4fi 8fi /fiff 8 fi( /E *$<$&4"4ff :k D&U& u*fi4d{ fi4K$4ff 4ff ff 5/ &!Y NE +($"4ff!=, >9= #.4"r$ U&4+6 7 $&fi fi4/$4" 4 ff T*fi! fiU 4ff >9tfi|U<Zfi*ff &4ff9xYff r!=`*+(9E fi!@V*4 !" &D" TE +($"4ff!=, >9ZU<f fi+(ffiUff Z T$&4" 4ff :Z#3fi4ffo4ffU`9yC /,fifiZU9hCLfifiofi{OU44@6}b~( &>gz>a<>&KPd%a_ Kayd%." mOE!N +VU&fi4YE !$ QWE +($& fiff fi4KE +$&4ff!=ff>96 7 fi4[E +$&4ff!=ff >9T4fi bkE Z #_ ff N$4U&4ff+fiTfi 4IfiU&4[ k$<4ff9E + fi4b@ +(AU`9kfi{*+[ @ ?KZ+fiS 6u;T@ 4@fi# ff t$ U&4+( fiAfi*W 4fffiU&4ff@ t$< 4ff9` + fi4L +(uU`9|fis &*+ =4+fiS6C/h4fi TE X>oE l #/$& U&4ff+N +($&4ff+( l #/[@ *fi c@ x;6c*fi4D? 4fi NEXeE @ Q #%$& U&4ff+; E +($&4ff+( #[ S'fi [ 4fi*V;6N$0 49` +[ fi4ff *fiS*9h%O /fioE"ffff *fi*S9= #aE +($"4ff!=, >9u4fi b D" Vfi&W/#P[fi44<8v]( fiU 5!"hU`9y4G *fi4ff94@(+fi*@ /fi5#P 44"q [6cZ o!YB3CLfi4fi:fiD`T fi:DMfiU&fi &DFGGQ RS6bK;%KEXffKb#_$&U&4ff+a fiR8!"4ff,/ [4@fi !=!$% fib*fi4Y4l*fi4ffL#bfi;$U&4+ fi* O&fil#K4[+Afi*KYffSkfiH*fi4ff6;*fi4Kih+fi*@Uff 'fiH*fi4(#Yfih$4U&4ff+fi*4ffff,G*&fi 94u+fiSY!=E!$V fiY 9k+fi19'$_*# *+ Y#P V+(+VU<* ff $H kU sE fiE 6$4U&4ff+ AESly nff/fi($ U"4ff+a]ff #d 5fi@*fi49K4f+fi*Uff {fi*fi4ffN#; fi[ 4ffo[6R/Y$ U&4+ U4T* ff U&4Q@ u$< 4ff9` + fi4_ +(9 #*fi4ff3K4[+Afi* 4mU Vfio$< 4ff9` + fi4 `+VU_S #!=E" f$&6t$& U&4ff+fg` #Vfi{E +($&4!=,ff g9k4fi ff #Lfi44.$4 U&4ff+ fi $< 4ff9` + fi4 +(Z & _!%Gff J &fiA D#Pfi4@4$ U"4ff+88" _@ 8fiV#l&!" < fifiU<oE +($"'$<4ff9E + fi4 +? k ff :[ #Aff 9 $&fii BlRYtTff #%fi&H 4ff9off #8|t 6 j fi9ffK;4fi+fiS fibLfiI1fi[ffq"Tl&! ff '.* Wl aKh[ &f*[_ff>ffaff;<ffV ouo>*fiff fffifffi! #"%$&(')ff*+l&ffYff f ( ('l*@-, ff ;L ( &T .0[/ ff2143257698S:<;#=?>9@E LBAE 9CEDFHGHI0JLKNMPO/! /aA [Q;#=?>9@E RCN@EES&TVUXW Y2K[Z[Z[Z\K]W^_\`a[ bTc.lC S9ed;9f30f37eg:N1h`.l {S9e"i@gSNfn9eg:&jWkK]lnmpo39K[Z[Z[Z\K]qrL.l tsN@gS 0f u%N>0f37evS]:Y ()SV@Th @%& < ff ff 8ff 981 'wM Tyx0s 0fBz {=? > 1BN(' hl*V&*_ < ff ff &&ff al&ff%Sff|TVU}W Y2K[Z[Z[Z~K]W^_\'` h<; Al/l *Y3!w` ff&N<i*- .1 x A[ Al*TW Y2K[Z[Z[Z2KNhWs^ <AS- {;*I&@fffifyS-I "ffVV -(<[`1 %**fi(;?_ ff ff)o5L*- &ff;hl&ff&- ff @[1[; ! 2` !55l*V&Y5?"u/ l*T [Z_S- ugy*T N ff Lbff (&' Al !f*&ff[1 ! @ ff Lu3ff FGI0JKNM?"_ @ N/W &( A<*j/A<*(\i\ y[ S!` < [b1Qo*T uffE < [b1 &&_ *bE _ @ Tr<yt(m *ffN;&-E<VT '@! (& ff"ff T[3ffV*ff[E < Y/ <*f)(3ff5N >?evSE3f 9eLNll*-7K1 h! *! s/Sx?E i/m3ffYT)*! - A3! Mb1 s& `!&ys&u! & ff /l*ff ! &ff ff@*A&2 ff vf[<y*- `1 _ ff a)[SA\ ;<A[@/<Y! *!?!/Y! *! ff u&[u( N3ff 5{<Y&ff?n(hBL(# + ? "FGI0JKNMOgdCEnf ?S Uy&;9CNfBev~SS Iz 2;7> >9eUd;9CEfe\SSzI\;9> dCEfn?S U>9eKKK/J G;9CEfe\SS Iz \;9>9; CEfBev\S z2;9>>9eG !o CNf E!S #rZnTVUXWh_~Ww'<f* ' 2Ey k&-`@a[h*_*fiTV1?<s zw|\k& < fiW ffT uu! & [ffusE ~[/Vl&ff/F [fi?E ff &[1dGhed.!o dCEf ES K >7edKN;7CNfBev\S z 2;7>9r[: Ghed.o!dCEf ES fiK >9eK\;9CEfBev\S z 2;9>r:N`1 8 & /%V_ * ff&@ff ffK_* -E [! v" !<fi" *fi{3ff N{J [f?` *ff! < { * @!{&t"*53ff[1 u ?` *ff< N* @!YA&AN !E _ @?" &ff ff 'L?` & ff Y@ - i?` //L A& < ff ffff {Awg[/mff *Ziy)*T&Aff o! 2` !'hed.:4Go~mj{X G) r &/No\TVUW(Y?K[Z[Z[Z~K]W^_\` q8K?o\TVK]W Y~K[Z[Z[Z\K]W^dK`rQVr a3ff*@5ugy/SEf-q Lb(l&ffL I0JKNML Y*K Yff Ll*V&YMZul 5{J % 3ff5@R" ffffhJ &LM t"lh~Bd #\yyRyVFGI0JLKNMPOwx*>;#=?>9@E /BAE*9CNDd9C>9eDS[=R=9CSE@ >Q/ffV.:wx*ABAESS>lff?S SRSE@?AmBA>RM PV.:bhe.0V.:]:nG4.:|>9ed;f =TR}W Y2K[Z[Z[Z~K]W^_\`mJ>9ed;Tcm4.:w>7ed;ohW Y2K[Z[Z[Z\KNW^r|jGHy;BAE[eL`pm4.:?S;==9SC E@ -> {pf/u?E u)Ff =>7edu; 9e iDwf =QV.0:G2fi4d!~7dydVvdv\%nvLff fiff!!"$#&%'(*),+*-%),#/.01243563789fi!5;:<fi!ff851==819363>!8!?938@fi1 fiBACDfi6? ff3=$E8363!FG$HJI KffLMI NPOQ@RTSUVIWCXYIZLZ[\Z]4^ff_a`cb )edgfihkjml!)n'poqo'0+*"r-stluvwl0(4xys!)zg{}|,~mjlxZ,o!l0-s)q)/'0+*69r,(and1${ l04( xo'0+9lsCsaD vdB{(a,d! !!!Y8ffY~d !!!Y 0 d{ wJ!(d#Cel0(V6)(#&'0(V'poz# oel(4x'0(sB# od{ /ffr!A (<!+pl6),#C(Zyxu&ol- st)/BA3E83563@3u52ffBE835633ffZ573A24358n!n13!!3Zff?:a!A!A/ff5e243ff58FZI WCXW/K4OQOSUVIWCXYIZLZ[\Z]ff^4_a` -6'Myz {|,~#Clxu,o!l0-st)9)/'0+l0(4xdP#Cyl(u)(*#,'('8oqz;J!)e'8o=3!03=9!A,5w'8o1d#/)/;+*%Y))'$z#Cu !!!8~;d}l0(4xVM!!! e d{4rG$HJI KffLMI NPOQ5SUVIWCXYIZLZ[\Z]4^ff_a` -6'Mdi#@1l0(;u)(*#,'('8o1lwxu&ol- st))/'0+*nz{|,~J!(md{(4! e!!!Y8Yy $,dzV$,d9z9{1830fi638 3fiq0563A!A/ff55=6fi0$%l-),#&'0- 1+lM!'0(#/(Z {B3ffj+8l0.0+lM!'0(#/(Z {B*FZI WCXW/K4OQ@b !)zk{|,~9jlxu,o!l0-st)1)/'0+l0(4xhilo'+"r-stlucJ(yz {B# o$l0(4x'0(s# oDcdo'+rl0s/s6)!(#&'0(Bd'poBzvl0(<xz {B# orl0(4x;'(sm# oDcydo'0+w'"u)(*#,'(md}'8oqz;AC6@5Y1@3=B8!?36=$83!AC!3=B8w!A/5Afi!@383ufifi1AC?!FD!A/ff5A<A/?7BBY7$!!!Y8ffY0 <fi5V(<'0+"l0s7<!!"$#/(4'0+*"l0s73<+8!+8!-#@*#/)!o*+F 8?w:<638qrM@mAC?$F! 58>AC!B!A/0A/83;883;156 ! 58 !!!8 YFw@86?!?q38$8Z3fi!!!8ffAff8t24fi!063:Zmaa,13863Fqa8?3?ff!A,5e!effBE 83ff563!7:ff'0+8xu+x!A/ff5!5Fp36?$fi!!7Jfi!563 :45?A/nmfi!DA!A,5q!5BB3Z8fi0:ff7<:4qA/B:fi!31@fi$!A,5!10w!74518fi0:ff5,8$i ?37YFp3908!8fi563ffeD3ff5Z!qBfi6? ff5E5Afi!5639 :ff5?9:a91939156!3fi63ff5563FZI WCXW/K4OQSqXMHJI LMW,XYK<[\Z]4^4`b )z {|,~jl!!"$#/(4'0+*"l0s1xu&ol0-st)n)/'+6#,)/ '0-)s5'MV'poZ!(<+8l0s#/),ylM*- "9V)/ l)Bl0s/so'+"r-stlZml0+89#/(%stl-Z!l0so!'0+*"J+8!stl6),#,'0(l0(4x l0+rxu,(<xlMo!'0s/st'ffCoqv)/!(;{ Jo!'0+!'0"9c6J'0+$l0s/s4 wcY!!!Yfi)/l)J{Mvs!) uffCo~v1)/(V{;fivb )o!'0+*"$$'po1vJl0(4xwJv+8%),#/.0s6$ &l %'ffCoqJ(l0(<x)*!Vvs!)J+!,Z-/.10*-%!l0(4x#"gj9)/!!)/9'pos#,)+8l0s V'8o)/%!s5l0- l0sfi243658719:5<;=5>@?BACEDGF,HJIKMLN:OQP,RSI(TVUXW6Y[ZJ\F)H^]_P,Ra`>Bb@AcfiWedf/U)PghP^i&jlkkkmjP<nDofqpXdofqr Ysutwv=`yxzfp{Y|L=bo}G~ sU)PHgP<Hi|kkkJP<H nyJ}YpYH tv=`z},,dS D{P H R P HI[P ii[ kkk P nG nl`z}8YyDofWW6fEN)#Zp@LqN8dZE1ZpYoW6LqZfqN8dS})fW6OfiDfp]>BL&A'CED]PLNOP]FzU Z}8YoN#]g P H UXW6Y[Z\JP R ]LNOP R hLN:O ]P H ``F`>@?BACED]_PLNOQP]FU Z}YoN#']F`>Bb@ACED]_PLNOQPJ]Ffp4]PLN:OQP]FzUyZ}8YoN#']F`z}YO,YDLWZlZ}Yfqp dGq|<[ DLN:OfNWm DG']'DofpN:fQl`q|<<*G<q[vX8|8q=^v[q=qq|8['<q<8q|6[6q <q| q8q<68q|[{q<#<<q[8q| q8q<68q6[{q[8|q<<[qG[q{=8o[6=XVa,=8'<@yGz8#J=8:^yJ^X<^ z+ yX<6q|66[#8q6*6q= [q[aq[=[w)lqq<q<4=<<8'@v[qq=q<lG@v[q/,G86|6q|6[ qV8Eq 6=<[6 V4< <q<8[8o48[=<| 8qo)[<|6=^|q<|66q q<q)|6q|66[| V|qq|8|4<*|[6=<='8<q<BG[<[8V 6=qG88q6(Qq#6=< qaQq#8[|6 q< 6=q q<#<6=<|6q|6qlGzql[qSqq8o[<6=<)*)6E8<Q[ =<| 6qq<qq<4=<<8 :=6q #<:<66=ql<[8<66=(qo)[<|6=<G8q[))m(G8=< 6=q^qo[<6=X=<4qqfiff@ q4 ,q< < [<X q[)#[[<6*<)<8Q6=8[<|6q|+#<6S8q<64B< 6=yq<q68= 6o86+q<q [(< 6=<|q6[!#"O,YDLWZ%$ P& FEd4 6qN('*),+cD-'/. gLN:O0'. gw\JPLN:O1'. ghF`R ?|YLOaYDLW ZZ}8Yfp&LqN:O!32,4651787:9;<=7>9@?ACBBED>9<GFH"IIJLKNM Y[ZPOEQLd&Zp&b ZU8Lp&ZLWfpOaYopfNQ ` YZ'V),+ ?YQL d[YZf@DXDfp&rQW6LaY[`XWQY#YXNY Dfp LWW<~ tZ)Uz}YNk''\[g'GH^]ig'4H`_baFdcbeqPcccEdL ml^T:pYD[Yop&pYOnLoFIAQ'GHf. g 'Yqp=Z+YN8dfN'f@DjOEQ. g\JP N:f[geqPFEdL=b[ZYN'GHhjiSR DLN:O#fNWmV D-'gsr Ht8[-u N:E' H o`lGfiv Q8:<6=Sa q6 [xwV[qo<[|[6S'#[<Q<6=6=,8zy|[ [qq8q#4=<<8{v 8<66=^G<fiq#<zy[ SG8=< 6=VqzQ<[ o[<=V [ )<)<S8q6yVqq|8 z[,=| qq:q8 <yo)[< <4<|q|66[|<8<|qq)y|G/=6q[l<X8<66=qfi<q| q8q<68q|6[=<6q^q<8=<|[ *q!ffz 6=[[=q<fi8X'GH<[q#q8S\'}~{fiGz0`^`zfi^G6`:6;C8^fi!^61=fiU88UN;1EASAxXG#fizfiqbANEEE#fmAd>fiA@3j1m 6E{q{*q:#g0EAS jfi60jdEEG:;1s\8HLE P fi%18,^;6EgC6k8C6 %j{E j(fiff!"#$"%'&)(*,+-"+-*.!,/0/1%&2)3"%*1+-*4+56"7+8*9":&;)=<?>?%;@:A<*+51>B0 %C-D:+5*EF;)*G+5;)"H/"JIK/%*L&/<,C-"H*M"7,<+8H6"N1+51+-"+-%/OQP+-RS/%*T"')3A"%*+5*U1/%%*T"&,+VRS/1%*9"IK<XW=Y%C-D:+5*EQ"Z;)*G+5;)"/OH Z//%&[)3"%*,+-*=<\?</"4$<C8C])3"%*,+-*6^<N&/_<C-"6"/1WO`a ,bdc$e A>#gf /"^h EAS K<=&/_<C-"!"/WZ<*& <="@+5;)"i,<\"+5<CT1&/i* kj Ifi/0l {)l : x 0l {)l 8 x% 0l {)l 80l {/l :x<*&#0l {/l : 8l {/l :qp8l {/l :8l )l : rs,1+-1+-"+5% "<\"t"<\"[IU%*u%<*,+5*Ev<\"F>N<C-s,1+-%" j +5*1>N<\"+5*w%;/+V(;x"1+5%"Q1C5&yXD/1+8&x+8*0@>N<\"+-*y;)*,;)/1*+5*Ez>?%*{+5*gE%*/1<CoO}|H"x)3:"%*+-*~m x8@0l {)l : n <*& % ~m x8 8l )l : Vn *C-W +5A//%&St<*,& A//%&SS6OK*F" 6<<&/=<*&[fiC5C5*,&/&)(*+5"+-*+-"U+5U"<+5*%&k<\8HCE IU/ #_n 6 x8@% 0l {)l 8 n <*& *f{jY<C5C O^*"+8^)3"%*,+-* "U;)*:G+5;)"^/"~I./%*7"4(,1"$"~I.Z&/_<C-"q+5i1%C-D%&7+8*<XDi"=(,1"4*O&)(*,+-"+-*<\1 *"%T,+-D<C5%*9" j <fi&%>N*"1<\"%&xW"C5C-IU+5*EN)3<>?,C5E+-D%*kTW6<<&/ <*,&MUC8C5*&/ % O2K<<&/ <*&MfiC5C5,*&/H<C5FXI"<\" >?N)3:"%*+-*,'<\//%& "*"1/0/1%&n <*,&1n OY U)3:"%*:A`a ,bdc$e A>8f /"+-* ~m @ n +5 A//%& ,"H*" A,/0/1%& O7 ?)3"%*1+-* ;/<*,*","<+5*%&xIU+-" x "? 6<<& /' <V*)&\ fi %C5C5 *&8 / %& )(S *+-"+-*]O= % ~m % n "?K<<&/<*&fiC5C5*,&/K&)(*+-"+-*21&,;)%."'/" ' 8j ' nj ' n <*& '<C5C Pj <*,&"7*+8T A//%& )3"%*1+-*M+5 /\8U' *s K/IU<: &)(A*+-"+5*I.;/<*xTW,<U"+-E/fi1+-1+5"JW#&/<,C-" WF+5*E7<7""<C$1&/1+5*ENIfi/C5C-XIfi <*&+8=IK<XWxIK?"<+5*M"N% /" j nj @ /\n jU\@: n <*, & % U U<C5C v*, %T% *;)4%C5<\"+-*,!",<\"q;)%*&"';/<"+5i%<*+8*EH+5*%+-"/%Y&/<,C-"$C5E+5;4<\&)(*%&<C5C-XIfi/O%fiU-Ti$0g-k@\%/,/@[)-__xH\SzS\kT_qS1L/[HF\S\F Z/\- 80z\S?8_%)1 9J)_\NH#fi\2 N\k\F:./\Z:- 0H0M\?8o//@S}J/@o\UFKLt5%q_[@'@?\?!9_/\:Vq:@Q')_@o%q\\9)\2x?://\'\0:v]0N8o//@wJ/@o\=_k@fi H\Q\ 60=HQ8o//@S9J)_s _[@)6%/ ~4 5=5 8 %fiff % fiff 75 5 % %, s5 fiff fi/ fi!,fi/$ fifi! %% & H( '&)% fi *+[ 5, 5fi % '.-/1032fi *+(fiff " N5" #" fi/$ fifi!,4%, 5 '_k@6 '87:9;" <S sB>#=@?$ABDC$E -_ ? 06GF@ff fi7 ? " fi " 5HI< J LK 'NM'POfiR ?Q SPTVUWXfiff fi ? 58 HI<J L K 'NY'PZ;Zfi ff[F4fiff " ? # ?Q \ "\]J]S^TVU% " ff% U_= ?$AB C$E -_ ?Q 0i5 " # fi/$ fifi!` %%J + ( '^a@\%_o\#9@:@06 b??Q 'c%N@/# S.dU%be **+! \'a@\%_$ f\N1% SgTihjb@2fi *+Rfiff $ \k:bmlGnol1pMq?$rts 4 k: ?rts3uwvxl " k zy3 k:bm" lGnol 5 " J {\Z5[ ?$rts 'g|@% }l&pk ? 'g" 7P9Lfiff 5ff9~\fiff %8Y ?$Q rtsk " Q ,yX, k:bmlGnols5 " {\87 ?$Q rts 'Zfi ff[FlpF ?Q ^fi!* " 5 fi fffiff " ' uvGl'+7P! 7 5 8 % ? lpz ? uvGl',|@% lVpz# ?Q" ? } ?Q '8^fi" P fi ?Q ? 5 *N "]J" !'Q Zfi %z%" } ~5 # }fiff " uvGl{ *+ ] %$?r?ru4 vxltJ *+ ] 9W~! " ' g '-10#O ZW~ / fi! %% _[@6 'L|@% QB>= ?AB C$X -_ ?Q 06Fff fi?Q ST>U " fi(fiff " ?8 HI<, K 'NY'O N ? ST>UqW~fiff N5 HI< J K 'NM'Z;fi ff oFW9t8fiff " ?= ?AB ? 'a@X__v9@:@06 b ? # ?Q 'c/[1%,U%be **+! " \'a@X_ f1\/3S}Thjb+2fi *+fiff " Z$ \}k:blGnoldpy ?$Q rtsk^^ uvGl "y,k^bmlxnol8 " {\5v# ?$Q rts '.|@% lp # ?Q '.7:9fiff[5 ff9~\fiff %57 ?$rtskk:blGnolg8 " {\75t ?$rts 'xfi ff oFil.pv ? #fi!* " 5 [fi ff[Ffiff " ?$rts(uvGl'" MyX,7P! " 2 ?$Q rts " uvGl^ ?$Q rts uvxl'7P9fiff N5 ff9~\fiff %5H ?rts ?$Q rts '|% k ?rtsuvGl'Dff fi/$ \fi[R ?Q B ? '^fi H ? R ?Q fi% !71J *N ]J" ] 9\'2fi *+fiff " $ \k^bmlGnolp?$rtsk:. ?rtsuvGl ;y3 k:bmlGnol8 {\F8L ?$rts '7:9fiff5 ( ff9~\fiff %54R ?$Q rts k " F y3 k:bmlGno" lz5 " {\Z5# ?$Q rts 'q" gfi!* " 5 Qfi ff [F_fiff "uvGl') fi *NvGl^',7P! fi k^bNlGnoly5 fiff N# J {\ / " ] "vGl?Q R ?$Q rts " " fififf HR Q }R ?$Q rts " $ \ "\]J] TSfi'@ff fi/$ \] fi" N"#C$E -_# ?$Q rts 06'Dff8 ] "FU fifffiff " 1fi *+JvGl " ;fiffN " ?$Q rts uvGl\W 5 !;Ffi fifffiff" " JJ ;5 ff9~\fiff %5! ',@ff fi/$ \fi+fiff " *+ 5' "\] fi \ " uvGl^'Dff " fi/$ \filp ?Q?Q '" F ? g#x 0 vyo !; #! @ XZu fiff fi%fi 1J3 fiff K \*wE / " ] oW~\fiff}fiff g7Pfi FD "" }fiff 7 "\" " 3|@ ]J]1J \1 !, / " ] ] \ / " fi@* ] $ \fiff Ufi !{\ ~ fiff g~ 9 *N ff ff9\'Dff5*+ "fiff " fiff fi " fi+~ ] 9: *N "\] J *+, " ]" W~] FP] %5 " ] " "\] 5 #" 5 D%J !/ " ] ] \ " (fiff #@ \1 !{\ 11 gx " fi " 5 N5( W~\fiffL fiff% ] \J /!'J )_ NBH /\Z\N\q9_/\:4\o)H#Y_o%!:\)_o\q\T)@ \S/\@:-9 0D:\1US-%J%6%/: Dff Pff " , %K5 W~! " IFU fiff " !*91 \1 9,fi ]J" 7Pfi FD " ] \J @5 /J %FU fiff@% !/ " ] ] \J L-^fi\~ ; #5 -7Pfi FD " ^h!\K006GF@ffJ 6ffx8 6ff " {\%5 FU fiffo[fiPE^o\E5E,: JE %J[`Ifi fiqXJ%ff\!!J\fiD\x $\Jgfi \!Jfi%$fijJfi%$fi \ fi!\ !8jfiJfi%$fi \\\\\jfififi$fififi$fi \ fi!fifi$fi jfififi$fi \ fi!8jfififi$fi \\fifi$fi \\jfififi$fi fi fi\# \\tjfi\>\G \fi%mm %mm je mme\ %%mm %mm e mme\ %%mm %mm%mm mm mmmm je%mm%mmmm je%mm%mmmmmm\>\x \fiDJL+~ g\x \fi!g\ \gfi \6!fi zfi!JfiJ;q \6\^ \fiI\fi \ ! (fi #"fij}fi z !+!#\gfifiE! J3J%$ & '"@J6!fi;J JJ!fij3fi fi! JRJ)( & * !!fijfifiE!@fi 3, + J!,\^.- fi $ fifi!0/1, +%!fi*1fi`fij3256 4 1 3 7 !fifi87z\`J3\fi\P\ :9fij;7\! j!\, +!fi%1fi6fij<2=6 4 1 \)~zJfiJ 6J8 7,\ #JL % J\~>~ g\x 7 !fi?9\@7 !gfiBJfi\A7\! jfi8 7 \fig\'1Cfi\ E DE jfi8fijF1$E DEJJBGPfiff "?HjJ I@ , DXfifi H\!I J\X~ g\ K"@JfiL\!LFMV\\ R\ fi fifi\~fijfiN DE JP;QSRUTWVXRUY[Z\^]`_0a,bdcfe^gih?j`k l3monp2 eb ( & { r } x acasrrNqffuH\fi7 !fifi!23q,rsut q,vwUx coc^yJa rs eadb'j.z0b,c e|{c~} vs fc ev xrst b -=v g t'q,rsdwJxEvfi\\Gfi fifffiJPfi \fi!>,+ Dfij@ g\fi\\ 6D !L<~Z\`TYA^R~Sd^oS#^0^.RiVX^#RiRUfiJfi!fi<"PJifi\!fi 7jfi @ ,+%J,\~fi J\fi !+ \J7J Jfifi\fiJ \J+fi!6J!L \! JPfi8%!P:!Jj!(+fi fi!!j6((fi ~jfi:~ ": !(\fiEJ\5J\fi JJJ`\ $\J# 7J"@fi \6fi!#\ \)%!J\% \~*fiJJ\J3"P\\i zfi z \fiJ"@J6;fi \Jfi!#jfiJ}\fi\^\!>": J :fi J, +%#\\%fiJS, +%!J7@fi :fi!fifij jfiJ jfifiJ\\ 6#\ \!\5\\U fi z , + `\g J8 7fi , + J!\P, +%!fiJff\ fi^fi!\fiJ8 78%\fi\Ifi!\J8 7R$\g \^fi \!"@fi $\Jfi^\fi@$\J!J$, + JJ7Lfi fi fi$fi J\fi! \"fi; %!fi fi\ jfifi#fij}jfi fi\@JJ \Jfi J0#: fifi Eqfifi !;! \ \Jff x\fi#fi 8#0ffffBi.88o 0 ff>U<,8ffF !WW88~08,8ff>8ff8ffff'FiffB8fff 8ff 8FJ,WFW;ffFffFff# ffff8ffF8ff8fff ffU ,ffE?8;:8ff,0 :ff8fff F>F 88u3C88KJ, ?W[<,i<F<ffff~8u08,:8K^)C8fff W ::J.ff ~:^ ffJ8,W %%!8U<~ ?u8u8<?8ff~[,W'#ff8ff~?W8C^8?ffiW ,^ffK8<8ff)K,W .U ~ ?u8u8<?8ff@~,ffffWF3B8?WffU ,^ff<ff8)FffB,W :f38CU< J U< ~ Ku8 W8?,W^F;8<SW@fff38:U< J 3u8 W8^?8>ffU,ffCff???off!i<Wi@< J^C8<::ffC ff8fff ffC8>ff3ffC B 8ff838fff ff i?^?ff?8ffJ8<:3ff U,JF!'8u:,F8?W ff0fiffff*38*,, *838*80 :3ffffJ W8Eff8fff ; ffi ffU 8ff:)8ff,,88i8ff^ff J B8fff ff ' F,W 8ffffC8:ff',i8W,<3*Wo ::,W f?ff8 U ?Woff8ff<BU3Wi;8fff 30 *8 Jff*8fff Cff8Co8ff^U~)8fff W ffU u ff8 ff8fff ff,:W .W! ff?ff ?ff^?ff0 .< ff8.,<W 8 !#"$!#%'&<W8,;J~,., )( ffX*8U;8:,8ff8J<B8ff^W >8ff ff,:W J * 3<8<'ff>,,ff 8,Wi, *!#%'& Wff8ff+?ffFff^ ?,0 ;W ff!8fff >F8ffFJ,ffJW8>,:W J .,ff Kffo8f,W fi,ff^ff,'>8?8ff:, 'F8ffu8? 'K?8 .-0/3ffu?~,W >8?ff' ,:0 i;8i,W .'88ff1-@8:,W<W8 2/3- ffC8F,W:<W ;U:8?,W :o88offff4-:8:,< 88!,:0 J%< , <W i)8!,:0 J)8 ffff:C8fff8ff?i !U38>U< J ffui@>>o57698:<;>=>=>?@BADC E FHGJIKAL;>:<;>MBANMBOQPLR<GSR<GUTWVX;>EY;Z:<GJ[\O]R<G^G_VXAX@`RYa@BAXFPLR<GJR<G^TVL;>EY;>:<GS[ObR<G^G_MBRcFHGJR<GUFdVXAX@`RYafe^=@BEYEYG^Eg;>AXe^=>VKFHG^E M7AX=ZaFLGSOh@BVL=Z:R<VL=GJEM`Oi:<jXGkOlM`R<?1E npoqBnpor@BAXFs'trnpoq<su6wvxG7y7jXMUz'GJ{GJRUyWe^MBAXEY;FLGSR'@`=EYM|FHGJOh@`VX=Z:9R<VL=GJEM`Oi:<jXGkOlM`R<?}m s~q<s;>A+M`RcFLGJRr:<MfjK@U{G@fe^=>M7EYGSReJMBRYR<G^EYPiMBAKFLGJAXe^Gz;Z:<j:<jXG_@`VL:<@BAKF8HG^=>?@`A+FHGJIKAL;Z:<;MBAM`O'VXAX@`RYa#e^=@`EYEYG^E^6'jX;>EecjK@BAL7G_FHMWG^EALMB: E<@BeJR<;ZIXe^GBG^AXGSRc@B=>;Z:aWy~@`E :<jLG_FLGJOl@BVX=Z:m siqcsdz'M`R<Eg=>;>G1m stdnpo7qcsNzjXGJAXG^{GSRgoFLMWG^E AXM`:MWe^eJVLRG^=>EYGJzjLGJR<G_;Afi:<jXGrFHGJOh@`VX=Z: :<jXG^M`RYaW6fi|DLilxw\wlp\H~)DwQg9\pW\ii4QWiQ\1wWi`h~.hwhcfiwWiQU\KLc\\UW`i7c\hUWBiQ\UQh~p<WY|^`Y|kDHJHkD^QQK`Y|^`Y|kDHJHkD^Q\UQh~p<Wdi`wWY|^`Y|kDHJHkD^i`wW`QQKY|^`Y|kDHJHkD^Q\UQh~p<WNwi`iY|^`Y|kDHJHkD^Y|^`Y|kDHJHkD^i`i`wi`iQQKY|^`Y|kDHJHDJ.^~QW`QhU<WY|^`Y|kDHJHkD^QW`QhU<Wdi`wWY|^`Y|kDHJHkD^WQW`QhU<WNQQKY|^`Y|kDHJHkD^QW`QhU<Wdi`wWQKY|^`Y|kDHJHkD^QW`QhU<WNwi`iY|^`Y|kDHJHkD^QW`QhU<WNwi`iQKY|^`Y|kDHJ4<QW`QhU<Wd9~`hhi#wi`ikQQKY|^`Y|kDHJ4<Khu~.hwhSiw~Qw#\Kh~ NiQ 9WW`QW\ii4QWiQ\1wWi`hi`Lc\hUWBi7c\hUW`iQ\UQh~p<WQQK`Q\UQh~p<Wdi`wWi`wW`QQKQ\UQh~p<WNwi`iwi`iQQKQW`QhU<WQW`QhU<Wdi`wWWQW`QhU<WNQQKQW`QhU<Wdi`wWQKwQW`QhU<WNwi`iwQW`QhU<WNwi`iQKi`QW`QhU<Wd9~`hhi#wi`ikQQKK\wwww|WWQfiUwWifi~w~hwhci1 #iQ #'whip\w+KKhd#h\\h~hxwQB\\wdQKwfHii`KhN~.QKh~QiQiwWh\QfiUii\hxi`QWWiUdK\w+HU\.w~.hwhSK\U`K`hi`h\ik`iU~Q\wfihh.KhUBKQBhi`hhLi|i\.~_i\pW\iUri'wWiQh4wWi`\r\xw#iwUJp\ipJu\\iQ\W`K``w+~hwhc\fiwiifw+~hwhci_\UW>wWiQhhi~NiQwhw\ii`KQ\Q`hiBhhWwWiQhhi~\dKfi\1Q\`WQU\ph~fififf"!# $&%'#(*))$)+-,fi.0/2134315647fi8:9;,.<1>=;.?A@;,15@9;,CBD9E569;,F9;,.G=;.@H9H=I6JK9;617L9H1NMC=I61>=I69;64.@'9;,CBD9E9H1>9;B>343OP1>=IQfi.<=R9;,fi.Qfi.</SB>T39;@<UWVX1>9;,Y9;,fi.[Z\B>B>Qfi.<=B>7CQ:]1343T7Qfi.<=\B>7QY9;,fi.[Z^=;.<5-_DB0Qfi.K`7C69;617a1>/*M=I.</b.<=;=I.Qa.KcW9H.7@;6417@OW6.34Q:B>7:.KdaJ<64.7 9Q.J<64@;617YM=I1eJK.QT=;.f/b1>=-9;,.[=;.@HMX.JK9;6g>.M=h61>=I69;6i<.QYQfi.</SB>T39-341>864JDjkml"neoCpqnertsu4vxw"y<z|{S}~hx0Iy0C2zy0(yS<DWz|z2WyIDND0AYzSSz^zzDD(yK0DN}FY"fiyW<Cy4;ySyK;y;Xy; zyKfiSDP *Hy<y<h;y;yIzyKhDfiy;>bz[-{S}~h-ID:Iy'ID'fizy;2NfiDD>mD|zS2GyY D2z2fiyyKIy<Ih zyKz22S-Gbz2Wy ySC2zSDEDHyfKDYWDDDDzSby[hCy<z\Ez2Wy-hfiqhSzSS>D;>H<R'736_>.R9;,.GQfi.K`769;6417N1>/M=;.</2.<=;=;.QC.KcW9H.7@;617@U9;,fi.0Qfi.K`769;6417N1>/^M=;.</2.<=;=;.QX.KcW9H.7W;@ 617C@Q1(.@7fi1>9[QC6=;.JK9;3OOW6.34QFBYMX13OW7fi1?G64B>3*9;64?0.0Qfi.J<6@;617PM=;1WJK.QTfi=;.m/21>=9H1>9;B>3M=I641>=I69;6.@B>7Q9H=IB>JK9;BDVC34.J<3B>@;@;64J<B>3*=;.B>@H1767fi8fij+-,64@64@'V.J<B>TC@H.9;,fi.R9H.@;99;,CBD99;,.;T@H9;6`J<BD9;617@1>/Qfi.</SB>T39;@'9H1VX.|BDMMC346.QmQfi1[7fi1>9VX.3178'9H19;,fi.|.KcW9H.7@;6417V.67fi8JK17@H9H=ITJK9H.Q0J<B>7C7fi1>9VX.\M.<=I/b1>=I?G.QRVX.</21>=;.\9;,fi..KcW9H.7@;617G6@/2TC343OE_W7fi157j]15.<g>.<=UW64/B[@;6?0MC3.\9H.@H9/b1>=HT@;9;6`J<BD9;617@1>/Qfi.</SB>T39;@64@B>QQfi.QU(9;,fi.B>38>1>=I649;,?9;,BD9[5^1>=;_W@[5649;,LM=;.</2.<=;=;.QC.KcW9H.7@;6417@5^1>=;_e@RB>34@H15'69;,FM=;.</2.<=;=;.QX.KcW9H.7@;6417@<j1?0MTfi9H.[@H.<9;@E B>@|/b13315@j}N~;~; |64@|B>JK9;64g>.R647:~-71a>b=@H1?0.;U E/[2/>1=H@10?.}@J,;9,B92/>1;~ [B>7Q7fi1[64@'B>JK9;6g>.0647NE U9;,fi.7N9;,.RB>38>1>=I649;,?=I.<9;Tfi=I7@KD<y<j /[ E4 * /21>= @H1?G.E|WU9;,fi.7N=I.<9;Tfi=I7^B>7QQ.K`7fi.[</21>='B>343;j*&CYC.<9V.^Bf[M=I.</b.<=;=I.Q X .KcW9H.7@;6171>/{S}N~hxhj].7CJK.\2 S-hU>5,fi.<=I.^~HBD=;.m9;,fi.R@;.<9;@67.K`769;617NfijejL.0@;,fi15VeO647QCTJK9;617:9;,BD9f x b E B>7QN9;,BD9'9;,.EgDB>34Tfi.<Dy64@7fi1>9=;.<9;Tfi=h7fi.QjhDzSD(Ifi>z2Wy jq<yhq<y ?G?0.Q64BD9H.>jhDzSb>yID<y[- L.`C=h@H9'@;,15x9;,BD9-^[ j@;@;T?0.m9;,BD9/b1>=}NUbUB>7QF7fi1jEZ^ON9;,fi.0647QCTJK9;617N,(OeM1>9;,.@;64@[264@'B>JK9;64g>.G647F 2 jE].7CJK.B>B>7Q71649=;.?G647 @[9H1N@;,fi159;,BD9m 2 j64@[B>JK9;6g>.647 b j+"1P@;,fi15B>7QLZ^.J<B>T@H.-2U"-2 jZ^OF9;,fi.G647QTCJK9;617F, OeMX1>9;,fi.@;64@Eb -2j]'.7JK.a b j+-,fi.<=;.</21>=;.B>7Q j=;1e1>/^1>/\ \M=;1WJK.<.Q@E@;6?G6434BD=I34 O>j@;@;T?0.E9;,BD9'/21>=}UE2UX[2B>7Q7fi16@B>JK9;6g>.647NE2 j'ZO1>9;,fi.@;6@-29;,fi.647QTCJK9;617,(O(MX>B7PQfi7146'@>BKJ;96>g0.4672Kj 9=;.?GB>67@9H1Y@;,fi1564@E9;,fi.[@H 9Qfi.</SB>T39RB>7CQ&9;,BD9 j e1PB>@; @;T?0. j Z^.J<B>T@H.3.B>U2 UB>7QF/STfi=;9;,fi.<=[ b /21>=EB>343Fx;jG+,fi.<=;.</21>=;.G 2 hjG+-,6@34.B>Q@f9H1.BJK17(9H=IB>Q64JK9;64 17L569;,F9;,fi.GB>@I@;T?0M9;641 7LB>7QL 9;,.G/2B>JK9R-21>V9;B>647fi.QL5'69;,F9;,fi647QCTJK9;617F, OeMX1>9;,fi.@;64@jG+-,fi.<=;.</21>=;.09;,fi.B>@I@;T?0M9;6417L64@/SB>34@H.>U"B>7Q j+,fi.<=;.</21>=;.-B>7Q jF+-,BD9m9;,fi.YB>38>1>=I69;,C? Qfi1e.@m7fi1>9R =I.<9;Tfi=I7KD<yR8>1e.@0@;64?6434BD=I3O>j@;@;TC?0.a9;,CBD9R/21>=@H1?0.}U"[B>7CQF/b1>=E@;1?0.EPIU*[B>7CQ7fi164@B>JK9;6g>.647FE jL.R,CBg>.E9H1a@;,fi159;,BD9E j+-,C64@|64@-64?GMC346.QaV(OY9;,fi.E/2B>JK9@;,fi157BDVX1g>.RVX.J<B>T@H.jG@;@;T?G.9;,BD99;,fi.\B>38>1>=I69;,C? OW6.34Q@* 2 SE hj*L.|J<34B>64?9;, BD9 64@B fMC=;.</b.<=I=;.QX.KcW9H.7@;617 1>/{S}N~hxhj Z^.J<B>T@H.:9;,.YB>348>1>=I69;,? Q64Q7fi1>9=;.<9;Tfi=h7<D<yB>7CQ 2 hUfififf ff !"ff!#"$%'&)(*,+!-.,0/1ff324"5#67 8:9<;>= ?A@B8C=ED.F GIH"D!FJLKNM,OAMQPSRTVUWP XYZK\[B]*=^_8C=`[a@B8C^ZbVced!FfTVU Khg0P [B]*=^i8C=:[a@>8C^kjmlnpoVFfTVUrqsKutvK g0w Ox[B]*=^i8C=:[a@>8C^kjmln"o,FfTVUrq Kut K g0w Ox[B]*=^i8C=:[a@>8C^kbVced!FfTVUrqsKutvKzy{q K|t K<[B]*=^_8C=:[a@>8C^ZbVced!Ff8C=:[a@>8C^Zjmln"o,F= ^a?}hH~'d!ceFqSD!F GIH"o,H'4c,GF D4d!c,Fjzc.ceHceH"b,HIF D.c,FIc,F d.H"o,H"bVFujzc,FIF\!cQlnBd..lc,b,!FIceH"FxXwYjzcln"nfiqht%kgOo,d4GeEb,.lbjzc{oV'{F{!: XY M,< XwYl.DW!)qht%H"olGb,HF:Hp< bCH"ooVbVcQlH~'bVjmc,lceDbVo,.%kb,.lba< jmcCln"nr#!a!FIc,F< lc,F\b,!F`oVFIb,oH"*F.H"b,H' .FIc,FIjzceF<H"ol\u.c,FIjmFIc,c,F D33WFbVF .oeH'jCLOAMQPS4H"ob,!FIc,F H"4D.H"GIlbVF ob,4lb H"b,l:ceF oVbVceH"Gb,H'bV`bVb,ln3.cQHceHb,HF obVF oVb,H"!~`b,!Fa{F `FIcVo,.H"A jln"HbVFIceln1H"Aln"n\u4c,FIjzFIcec,F DF#bVF .o,H"'.ojD.FIjmld.n"bb,!FIceH"F oaH")ln"nb,!FGInplo,oVF oajb,!F<ld!bV`l.DAF n"lAl.DAb,H"n"npl.HFIcelceGQH"oH"A`3mm.>" [LmALO0MQPSaXY:3pmQ#%L . e #m# |{LO0MQPSefih#P p ] EI { L V AII eyz L%C V 0OA pe ' 3`z hL`3mm.>| [3Lz{LO0MQPSCXY\zz3 L . ea#m! |*LO0MQP_eh# \P z V ] \ {L V 1I Ie yQ p Q L% V OAz L V Q 3m L %7 V ceFICvlA~'HF olAD!F3.Hb,H'jC4c,FIjzFIcec,F DF#bVF .o,H'.o`jmc`!celnD!FIjLld.nb<b,.FIceHF o`'.n.c,FIjm>FFIc, c,F DFl<# bVF .b,o,!H"'FC.4oc,FIjz!FIF ce.c,F FID{FIFcC#bVb,F !.F<o,.H'cQ.HoceH"Hb,HF b,o.H"loc,GIF<llo,FaoVbVGce'H"H"G.bGIbVHpD!Fb,lnHb,ce{D!b,FI.c F llD!FIc l.D'n"npd..D!FIc}!cad.!c,F oVbVcQH"GbVF D.ceHceH"b,HF ob,.F<GIn"lo,oj4c,FIc,F d.H"o,HbVFujmc,FIF!celnBd4.lc,D!FIjLld.nbb,!FIcQHF oH"obVcelGb,l4n"F !F\c,F lH".H"!~{GIn"loeoVF oCH"b,!F`.HFIcelceGQlc,F:HpbVcelGb,lnF4 fiff >|4 U L V K #pmI Q: { ># m# u:LOAMQPS*h! *Pz II L V e LmLO0MQPSCXY< K LO0MQPSXY\ KC e ' <m{ L7!Fln"~ceHb,. H")}hH~'d!c,FbVF oVb,oLO0MQP_`XY\ Kfil.DLOAMQPS<XY:3 K !FGc,c,F Gb,!F oeojV b,!IF l n~ceHb,4jmcXY H"o:lojm'n"no }!cAXY b,!F4c,jCHpo:o,H"H"n"l c :F l.lnIFb,!F0oVb,lbVF {F b,o<H"oVF d!F .GF : )F lGeGIloVF{ F{l%)d4oVF`b,.F.FI~'lb,H'.ojb,.Floeo,d.{.b,H"'.oj b,!F.c,FI#H'd.oGIlo,Fao,oed.{Fb,.lbP XYK KH"o\H"lnpnyu.c,FIjmFIc,c,F DF#bVF .o,H"'.o<j 3F GIld4oVF{D!F4Hb,H')P k aF .GF{Hb*HpoGc,c,F Gb\bVc,FIb,d!cQ 4 *o,o,d4{F`b,4lb K gEP F GIld.oVFPH"oaG'.o,H"oVbVF bJLlo<P XwYiKuRQln"nBF#bVF .o,H'.o*lc,FG'.o,H"oVbVF bI\l .DA!FbVF 4o,H')G'b,l H"4 oaK aF .GFHb<H"o\Gcec,F Gb<bV c,FIb,d.ce *o,o,d.F{b,.lbqKutvK<gw F GIld4oVFK<grw P l.Dln"nhF#bVF .o,H"'.olc,FG'.o,H"oVbVF bI.FbVF 4o,H'AG'b,lH".oaK aF .GF`H"bH"oCGc,ce F GbabVc,FIb,d!ce *o,o,d.F\b,.lbq Kut KgAw F GIld.o,F Kfig)w P !<F#bVF .o,H"'G'b,lH".o KNl.D!F .GF:qsKutvKBH"ol.4npHF D{H"{ln"n!F#bVF .o,H"'.oIfi!"#%$&')(%*,+.-0/-0(1')20243658793:(%/-;&(%/:<>=?3:(%@63A-7-0/@6;)BB3:@6779;CB3D7E!BF(HGJILK%MD<1Nfi<1O.//E%P37Q%'R7TSU+WVX+ZYS +WV +[<O.//E%P3\7Q]'R7^7Q!3DB3?-0/_'a`%BF3Dbc3DBBF3:*#dfeg365fi793:(]/-;&(ihj/E%@kQi7Q%'R7 +mlnh<po;q +mlnhrtsXhrcuwvxbc;)B4/9;&P3<p=?3:(%@63\+xl{z h|rZuwvm')(%*}SU+WVX+]-~/m(%;)7m')@67-)3\-0(h|rZuwv:<=3:(]@63|p+l{h|rZuwvD)qQ%-0@kQQ!;qx3D)3DB_@6;&(79BF')*%-~@67/7Q!3bZ')@67.7Q%'R7 +|lz h|rZuwv:<|=3:(]@63 +_-~(n(!;iYW`]B3Dbc3DBFB3:*#dfe,3658793:(%/-0;&(n;)b^f')(%*g de +<|=?3:(%@63-7.-0/@6;)BBF3:@67?79;}B3D7E!BF(GJILK%MD<?fi<[(A7Q%3B3:Pi')-~(%-0(!@D')/3(!;)7SU+WVX+ZYS +WV +<?bS +WV +ZYS+WVX+#7Q%3:(nfiA')('RB&E%Pi3:(7./-0Pi-02~'RB|79;7Q%3`%B3D8-;&E%/@D')/93')202wYW`%B3DbZ3DBB3:* de 3658793:(%/-;&(%/|}fiA')//E]P`%7-;&(n7Q!3DB3-0/a'R723:')/97a;&(!3@6;&(7')-0( +m')(%*Q!3:(]@63i-7-0/@6;)BBF3:@6779;AB3D7E!Bk(T6):M6<ib4(%3:-7Q!3DBS +WV +ZYS+WVX+(!;)BSU+WVX+ZYS +WV +[#7Q!3:({fin/98PiP3D79BT7Q!3DBF3-0/.')(n3658793:(%/-0;&(g(%;)7?@6;&(7')-0(%-0(!}+f')(]*nQ!3:(%@63-7.-0/?@6;)BFB3:@6779;iB3D7E%BF(6):M6<Q%3DB3Dbc;)BF37Q!3')2);)BF-7Q]PB3D7E%BF(%/?79BFE!3-0b_')(%*n;&(]2A-b_+_-0/.-0({')202YW`]B3Dbc3DBFB3:* dfe 3658793:(%/-0;&(%/;)b_< Q!3')20);)BF-7Q%P;)fifi-0;&E%/2BFE%(%/\-0(`f;&28(!;&Pi-~')2#7-~P3)<w ~#w]?:#[(79BF')@67'R#-020-7A;)b^')202B3:Pi')-0(]-0(!@D20')/F/93:/.3658@63D`%77Q!3(!;)BFP')2E%(]'RBA@D20')//-0/.*%-B3:@6720A-0P`]20-03:*T7Q!3-0(79BF')@67'R]-020-07;)b%7Q!34/')P3@D20')//93:/m-0(|3:-793DB:U/m*!3DbJ')E%27m2;)&-0@R)')//FQ!;q(fi')E!79')(%*83:20Pi')([:)8 ')(%* Q!3D;)BF3:Pi/\!< : ]!< : ')(%*!< !<fi7-~2020Pi')( [:)R ')(%')20D3:/x7Q!3?@6;&Pi`]2365!-7;)bw`%BF3DB3:E]-0/-7936WbZB3D3|*!3DbJ')E%27_7Q%3D;)BF-3:/D8')(%*@D2~')-0Pi/7Q%'R7?%BF':)3B3:')/9;&(]-0(!ibZ;)B7Q!3`%B3DB3:fiE%-0/F-7936WbcBF3D3(!;)BFPi')2@D20')//?q-7Q 20-0793DBF')2@D20')E]/93:/-0/?/9;&2R'R]23-0(}`f;&28(!;&Pi-0')2]7-0P3)<^=?;q43D)3DB:]Q!3a*!;fi3:/\(!;)7|')(%')20D37Q!3@6;&P`#23658-07;)bm@D')E!7-;&E%/BF3:')/9;&(%-0(!!<p77E!BF(]/;&E!77Q%'R7a3D)3:(q?-7Qn7Q%3BF3:/979BF-0@67-;&(g79;`%B3DBF3:E%-~/-7936WbZB3D3(%;)BFPi')2m*!3DbZ')E]27/.q-7Qg`%B;)`f;&/-7-;&(%')2X'RBF-~'R]23:/\-0(E%/97-@D'R7-;&(%/')(%*A@6;&(%@D2~E%/-;&(%/:fiBF3:')/9;&(%-0(!i-~/\-0(79Bk')@67'R]23)<fi]Xfitfi MLLGJZJnk g+?DRIZGMDI[RA+AR##I9MDI9MFDK8ckJGM6kIMFMT8XLZGJZRM#RILiRK8#RILnMJDRK8G\GZ8MRILWMLpZGZJ:MGJc)M8RI6GZiGZfi)GkR!L~6G[&JGM6I9R)Ik>:)K:MLkckRW?\fiRI9&I9:[D^3?&-)3.'P')(W;&(!3BF3:*%E%@67-;&(bcB;&P`%B;)`f;&/-7-0;&(%')2%/'R7-0/9#'R]-020-0779;7Q!3.@6;&P`]23:P3:(7^;)b7Q!3|`]B;)]23:PT<m3D74f3|'/93D7_;)bw@D20')E%/3:/_')(%*i7Q!3/93D7_;)b`%B;)`f;&/-07-;&(%')2fiX'RBk-0'R]23:/p7Q]'R7_;fi@D@DE%B^-0(<43D7. f3')({-0(X93:@67-)3bJE%(%@67-;&(7Q%'R7.Pi'R`]/\3:')@kQ@D20')E%/93 l79;'i`%B;)`f;&/-07-;&(%')2X'RBk-0'R]23z i<_3D7H /E%@kQT7Q%'R7 lnnlAfffi nlnfffi lg. H')(%*{ln fi p Alnfi Al lg. fiXAl lg. Hfi DRDM lg. H3@D2~')-0P7Q%'R7J{k.z6):M|-b')(%*;&(%20}-bp-0/\/F'R7-0/[#'R]203)<O.//E%Pi37Q%'R7 -0/./'R7-0/[#'R#23 #7Q]'R7-~/D]7Q!3DBF3-0/.'}P;fi*%3:"2 ! /FE%@FQ{7Q%'R#7 ! <3/Q!;q7Q%'R77Q!3DB3{-~/')( 3658793:(%/-0;&( ;)bJ{kj7Q%'R7*%;3:/(!;)7@6;&(7')-0(>6RDMD< 3D7}h %$m l\& ! '("fi W {lA\& ! z'))fi < ;/Q%;q7Q%'R74h-~/^')(365fi793:(%/F-;&(;)b4Jnkk8-7x/+E *@63:/79;A/Q!;q 7Q%'R7h -0/a@6;&(%/-0/793:(7')(%*bZ;)B')202-S ,w.V ,,l1{m/ ,1l1h-b4')(%*;&(%2{-b , lz h<3D07 !f3'}P;8*!3:2m/E%@FQg7Q%'R7bZ;)Ba')2012 >lC2 !3_ 46- 57! 42 !8_ 96- 57! 4w')(%:* !8p 46- 5;!z<#')(]=* ! z bc;)B')202 /FE%@FQ{7Q%'R7 bZ;)B?/;&P3 l<\7-~//979BF')-0&Q79bZ;)Bq'RBF*79;{/FQ!;q 7Q%'R7>!8 hi')(%*>h-~/7Q!3DB3DbZ;)B3}@6;&(%/-0/9793:(7D< '.?)3')(,S-,fV.,l n<TO.//E%P37Q%'R7@BADCfiEFGIHKJBL MN6OQP;FRST+NUFT+N6OVNUWDLXYLKR&Z+[1J&O\"F]NU^V_`/abc dIefgih j1kflcnmUkogpq1k&mUkrfqQrisaub=c dvk&k&j1wxf#r&y1h.r aub=c dIz|{}a~s+r&y1fq+fq1mr&mpqb7cxs(h q1:h k> `) )x3cxs"` b;c d>VmUwxmUh.{p a;~9 dz{a;~8k&j1gyr&y1h.r~u{p k&pwf0#bs1r&y+fq=fgih j1kf0~Bsr&y+fi&f0mk1mUk&j1q1gr/b7)`(>p {}0k&j1gyr&y1h.r~|s/h q17y1fq1gf +fq1mr&mUpq;b4c s}h q7h kl `b9c sI`b4c dy+fi&fi{p &fcmUk>h qfVrfq1k&mpqp {dvk&k&j1wxfr&y1h.r ~0 -ir&yh.r mUkisr&y+fi&f=mkxh qfVrfq1k&mpq4cp {xk&j1gy<r&y1h.ri.-b4cxd(firlfh=wpV+fk&jgy;r&yh.r0{p >h U(9b9s}~8um6:9b4cxdfffky+pDnr&y1h.r~s+h q1y+fq1gf0mUkk&h.r&mUkh.f d/efgih j1kf -#b=ch q1 .ib=c{p h Uk&j1gyr&y1h.r<~{p 0kpwf b9s)4b<c{p 0q1p<k&j1gyr&y1h.r<~nu{p 0kpwf b9defgih jkf"Bb={p h Ukj1gy/s1`bc{p h k&j1gy/sQoymUgywfh q1kr&y1h.r{p fi fi&giUh j1kfmUqspq+fp {"mUr&k1mUk&j1q1gr&kmUkmUqffcxdeff+fq1mUr&mpq r&ymUk1mUk&j1q1grmUkrj+f#mUqffndofq1gf#fi figiUh jkf#mUqmUkrj+fmqdv q7h rfiq1h.r&m fxhp {p 1r&h mUqmUq+r&y+f mqKrh gr&h.mUUmr=p {gih j+r&mpj1k0&fh kpq1mq+{p lh UgiUh kkfkomr&y0ho p qp Vfgr&m fh.&r)mUk)rp h.1oy+fip &fw8d-omUq h j1r4VfUwxh q2s VDr&y1h.r)&fj1gfk1hD f&fh kpqmUq+#rp0gih j+r&mUpj1k/&fh kpqmUq+#lh 1mUq+#h+fi{h j1r >h q1r&y1fomUqQrh gr&h.mUUmUr0fk&j1r{p o1hD f0&fh k&pq1mUq+xmUq=op qgiUh k&kfklr&mUUwxh q2s2 .Kdoy1mkmUkq+p roh.UmUgih.Ufrpr&y+flBmrfihgih kffgih j1k&f0mUqmr1h f&fh k&pq1mUq+xmUkrh gr&h.fl)(Q Q: ~ o..-.7il&&&Vi.x.K.V60/..+l .&.V.+i.0..#)firnfhffkfirp {IgiUh j1kfkd#fxk&y+pDr&y1h.rr&y+fifmk hff+fi{h j1rr&y+fip &'k&j1gyr&y1h.r~i.-mU{h q1pq1Ulm{2 mUk/k&h.r&mkh.f d}(firfr&y1fkfirp {1&p pk&mr&mpqh Q.h.mUh.fkr&y1h.rpVgigij+omUqd(firo f#h q=mUq.fgr&m f#{j1q1gr&mUpqffr&y1h.rowxh.kfh gygiUh j1kf0brph&p pk&mr&mpq1h.h.mUh.f~ k&j1gyr&y1h.rbdfffq+f#r&y+f>kfirp {}+fi{h jr&k h k{ppDokd~fib&}b=~fi` >i.ivk&k&j1wxf#r&y1h.rmkk&h.r&mUkh.f d(firocb~` li.i~fhxwpV+f2k&j1gyr&y1h.rob&}b=~&~d(fir~mUpj1k&7c mkgpq1k&mUkrfqQrxh q1<mUr1pQfkq+p rgpqKr&h mUq;.iidfh.'c mUkh qfVrfq1k&mpqp {" ff;b #b&/b:B~& 7bcdey+fip &fw"!d-xmUq7$#ofmrfis .Kr&y+fi&flmUkh q=fVrfq1k&mpqc p {o= k&jgyr&y1h.r c cxdefgih jkf>ubc c {p h (;~3omr&yb:s i.-b=cvk&k&j1wxf0r&y1h.rr&y+fi&fmUkoh qfVrfq1k&mpqc p { k&jgyr&y1h.r.ib:c )firf0hwpV+fk&j1gyr&y1h.r {p h U2&p pk&mr&mpq1h .h.mUh.fk})s~:m{h qpq1m{:bc defgih j1k&f i.i>bc`%.i `&i.i(b ')xcxD{p q1p3~ &b8d7+h * fh qKu=b8d ,opB~ubc h q1y+fq1gfff";.b '/xcxDo{p kpwf0}bBd fq1gf07bc h q1~ dIefgih j1kf0r&ymUky+pU1k{p oh U) b:sVq1h~d021 53 4687:9<;=:9?>A@B>B77DCED6FHGIC9I>KJ=D>A9?76;L9M;N5OQPRTSLUK1WVX;9?768Y<>AE:=DZ<>[7DC=D67$\+C]?F>^N_;ED`[a<F8Ccbed/fe=DZ?>e@BF8Ca<7DCFNg;ED`h;NZ?6@TZ/675j%k.lLlmbR$fonLnqpC9?Y=DZ?>5`r;2Y>BFtsu=DZ?C=vC776wL9<7exzyT{?|}=D;rb/C9+Y^~AL A|=D;rf1v; 3:4k lmb:cnK1; >Bq>AEmp2=DZ?>KED>5687=DZ<>7>A=3&klobtRfcnX=DZ?C=}>AJ2=D>B9?Y<7}354C9+Yc67C9>AJ2=D>B9?76;L9;NOQPRTSLUK1<?fizt<I?}XLL$$%& )r +_T B++X-2BI oqoo2LT Lm+mqoo+LqgMM+DcrT+B^m2B :Q/Dt:o2qoz)ohXzoz?o+oQBX+QQzKmWm2ooQtM$%/ /5Aum Qo2 5Q Iotm roozoQ:++Q+Q2 toQQ%Q?m2qoz$qozo++r2 QmM/.mooQozX?+Q+z$2^oo+ff$2ffq+$2/& $2+Wt^ o2t2oqzozQvg Qz2X2 mrot^o2Q+oz $$2 )& ?!I"# $2 )&?$."$ M& %#o q+ ?&$'( ? WQrzoo) * z+ Q o+[5o+oQB + zrz z z$//q 8 2 -, oo ^o+^Q5o+oQm +z/.o+WQ2o oQr t2$0o+10+ MqmmqW* m2oz2 ^$%^oo+: + 32 4r5067 ff r50ffff W50fi /% $2 ff ?504 fi /& $2 %<50448 q2 :v9 "<5; ; ? . Q-o+2 Q* m2oQI$%IzIB q2Im25.C o+ >=@; ? ?<= (;2 - ; ?<= E ; F2 .oQ)QmmQm5^G +IcH 2q$%/ + 2, oo5o+e$%/ + +. o+vQ 2o offQ}* m2z%2 $%Mo+ +82) 2J02oo+QoozoQ++Q+z2fi02z5SR zQz Ko2+ ot<G o+0 #[L 2 mq82&M2 + N ? + 82%P8 Qo+ $2 cH 2q2 IQ5o 6H 2q ot Q8 Q2 SR UcH 2qW QmWVYX[ZZZ!X ]\ff$? (O 8 Q2 SR^^ W2V o]\_ ff ? KO22^W2Vo]\_A` m/tq zoz0 ff -B` otm2q% [2 2q )tq zoz0 acH 2qffQoQQ^mtMQ0 % Qro+oQBX+zbL 2dec Qz 8 2m fehg/g/i :tjG o+:m2moQ /e Q5t z5ot z2:o+[ot 2W Qoo2cQotk ml #n 2QKn oQQz +o+26<o Tzmm2qoz)+oW[q+dp 5Tqz mUcH 2q)ot)oz2^QW o2@tq ]eho _tq ]ehr tq ]eq +oQq+dp qmhs t2ozq+dcp :Tq z maW 1eL 2tdffc Qz 8 2m ff2oz t<eGWzo2qWQQQ +ozeotMq Q* zKvotzzo] l 2 oz^ot2mMoz2fffifi &fi /&t<ujvfiwyxffzI{}|<~/ff7NxffU]xff]j~K~}5_|5[xfi]falsen1n2n1p1nmn2p1pknmpk5%ImS/5]5555fff]dm_S/S]5h/1/]!&W/NdQ76ff fi K}S%6QWh& Q m} ff / a% S@"@mh /5%57//_S5Sh mh_S_1/1157//_S5Shmh5&]& 5]]h&a_5/]$Sh__55M5/55_//S5]fff]dm15y h h7/56_5/]h& j<hj5 [5/_S/fiS5_/a/_mh /_ 56m/_5/5]5_/S]ffh5] U/ ] mh5/y_55_-Yh/S/_mff65_/_]%5/5mK[_5/55]_/!]fi ff S_SA5_[ /_S/S]5h /]"!$# & %'%'( "!6[& %' ,*'*"!+#"!$)$-*[./12* 3#**#h //# ) # -4%',* 0,*387%' * *:9%' *,*fi! #%'0ff/fiff !4%52*0ff !fiff !+# #3%5 *6 fiff !!$#; 6=< $) # $-ff>ff?a/S5h5hhm(_S/7m 5_3 A@ ]1/__NB'*8A@+C /_Am/5/@_S]/S5h/_/_mhh/_mDU /_/5h5mS] m#5mh]5_ /55hm_Am(_555hmh_5_ E 5F5h5fihmm /S]#T5S]h ffFC /5F53/_hh55S]]h]/1 /hNy ]55]ffi/ /5_/5K]mh(]#S$ /5HGIG 55J/y55JK"LMG C /_6Q/_5N O%GI.%G /U_5./P h655NQLR7G TJ/U_/_]5T UVIJ/_ * HVIJ/5/55_W /0ff / X C CYJZ[fi\=]_^a`Jb'^dc^e.fdgihkjal0mkl0nEo.mklphkjdl0qresmklptkjdou=fve.twg,e.tkjalfigiesmmkou=tfixzy;l {0|}e.~hkjdesh~t=tkeshk~}t'es,|_lp~_n5e.f,giofd|q~_nVhkjal0mkl~te+/dmkl0nEl0mkmklfig'l&h>lfif,tk~_ofo.nWhkjdeshwgao4lfit=fao.h={of4hke.~f$0sfixtktkd+lhkjdesh~t3tkeshk~t'es'|_l.'hkj,esh/~}t0,hkjal0ml ~t3eD$o&gdlfi|V td{jhkjdesh $x=y;l$tkjaoJuhkjdesh+hkjdl0mklr~t$e;/dml0nl0mkmlfig,l&h>lfif,tk~_ofo.ntkd{jhkj,esh8.fi +xKl0h5'>Ni>, 6Ni' 6Ni', 6KTifi0=v2 ; 0Fx3Nl0h3lpet>h>mF~{h=h>o.hke.|Vo.mgal0m3oftk,{jhkjdeshwAe.fdgnEo.mze.||4 2 +'2.'r~_nK ie.fdgvO'.'+ o.hkjal0mku=~tkl.e.f,gBO .5 +UVJnEo.me.|| X& fiFxWh:~t:t>h>me.~j1h>nEo.mku:esmgDh>o .l0mF~_nq$hkj,esh:~te /dml0nl0mkmlfig l&h>lfifdt~_ofDo.nV.lfifal0mesh>lfigi4qx:|_lfiesm|q0sfi +xtktkd+lzhkjdesh~te/dmkl0nEl0mkmklfig l&h>lfif,tk~_oftd{jhkjdeshK0sO0/ +xWNl0hlwe8$ogalfi|dtkd{FjhkjdeshznEo.mwe.|}| , v~n5e.fdgrofd|_q"~_n, +x:lfi{0e.dt>lwsO08 'fao+gdl0nEe.d|h2 0sO0FsO0~t/esd,|}~_lfigi~fv+2uwjal0mklX 0wnEo.mt>o$l$ $x8zjal0mkl0nEo.mkl nEo.m/e.|}|V fiwtkd{Fjhkjdesh $xzjal0mkl0nEo.mkl52 e.f,g; nEo.mpe.||Btk,{jBx=lfifd{leigd~t>df,{hT~t8~f;o.m~t/~fno.m8eg,~tEkdfd{h/nEo.ml0.l0mkq $x8fhkjdlX,mt>h/{0e.t>l$&qgal'f,~_hk~_ofo.nK xf"hkjalt>lfi{ofdgr{0e.t>l: +alfi{0e.dt>lo.hkjdl0mku=~t>l'',uod|gDl/~}fDe.tKO''.',$ ,,xWwlfifd{l'e.fdgi xTlfi{0e.dtklhkjd~tjdo|gdt:nEo.m=e.||N $'fde.||_q (Xx+=aWNN1T4N1a,A;,2=NKgdl'fd~_hk~_ofo.nNdm~o.m~_hk~_0lfiggal0nEe.,|_h|o.~{w~}t,t>lfig&qw~f4hke.falfifvfi..Fx:zjd~}tgalfd~_hk~_of~tT'e.t>lfigf6e.flfiesm|~l0mofalno.m e.ah>o4l0'~t>h>lfi+~{|_o.~{w~f4hke.falfif2:fi.4Fxzjaldm~_o.m~hq$lfi{jde.f,~tk,t>lfit|_la~{o..mes,j,~{X{o$,esm~tkofe.fdg;hkjal$,mkl0nl0mmklfig;lh>lfifdtk~_ofdt~fhkjd~tesd,mkoe.{jgaorfao.h~f.lfifdl0me.|{o~fd{0~}galuw~_hkj hkjal:dmkl0nEl0mkmklfig l&h>lfif,tk~_ofdt~f hkjal:dm~o.m~_hk~_0lfigpgal0nEe.,|_h5|o.~{0tBgd~tk{0,tkt>lfig ~f+&lfi{hk~_of axNla~{o..mes'jd~{{o+,esm~t>ofjde.t3lfiesm|~_l0mwl0lfifdtklfigi~fihkjal {of4h>lh3o.nfaofd$ofao.h>of,~{8mklfie.tkofd~fa&q+t>l0.l0me.|mklfit>lfiesm{Fjal0mt/K~_ntk{Fjd~_h>.fi..&'3lfdl0m(5lfiesm|fi. &,zqe.f2fi. Fx::o$,esm~fd8huolh>lfifdtk~_ofdtw~tz'e.t>lfigrofu=jal0hkjal0mwhkjalpgdl0nEe.d|hktzesmkl.lfifdl0meshk~faDgal0nEe.,|_hktzo.nBhkjalpl&h>lfif,tk~_ofdt0,hkjdesh~t0.uwjal0hkjal0mBhkjalfi~_mB,mkl0mkl &d~tk~_h>lfitVlfi|_ofa/h>ohkjallh>lfifdtk~_of$e.f,gXhkjalzfal0eshk~_ofdtWo.n'hkjalVkdt>hk~{0eshk~_ofdtgao$fao.hlfi|_ofa h>o$hkjal/lh>lfifdtk~_of2xBy;lptkefiqDhkjdeshze .lfifal0meshk~fd+gal0nEe.,|_ho.ne.f"lh>lfifdtk~_of~t '~f"hkjall&h>lfifdt~_of2xff fi!#"%$$&')(*,+.- 400/21436587:9 <;<;<; 7*=a?>@ es,,|~_lfig6~f7 9 <;<;<; 7 = 6E 5'XWGFIHKJML}NO 1P)1RQTS")'}U36587 9 <;<;<; 7 = ?>RBAC XXTHy;l esddmkl0~esh>l8esd,|V ze.fdgrfao.hwesd,|V &qhkjalpfao.hkeshk~_ofies,,|V 8EFxD3ff fiXWYZN[fi]\^fi][_[fi]`afi]bb0+.c <1ed f@g QXh 1/&i1j1LP0klSrs p l1UklUm?1:kn1U sPko1<kp.P iqH c1 rQ +ss1 alUPs!P3RHhJML0it /dmkl0nEl0mkmklfig*uvlh>lfifdtk~_ofvPw1L <>k % T1Ukm1x1yP1 sjPko1<k zsP /*mTL{1&L1 Rs|<P0k .#s)1 dsP a8}>P s|V ~)' }V XOx' 2 O1&L 1 <P0k TP+N kV s"'} ;/*mTLil1Uklm1j1yP1sPko 1<kOpX/o.mgal0m~}fa<P0k=Hdmz~f1.lfitkhk~_eshk~_ofof|_l~}{o..mes,jd~{3dmF~_o.m~_hk~_fieshk~ofD~}fgal0nEe.,|_h:mklfie.t>ofd~fd$ue.tz+o.hk~_esh>lfigi4qlfiesm|~l0mBuo.mXofhkjalh>o.,~{5e.fKmklfidmfi,fi.&a:e.e.gal0mAwo||,fdgal0mfidfi..FxT=jalfit>lzgal'f,~_hk~_ofdto.nT,m~_o.m~_hk~lfit=nEo.m8gal0ne.d|_h/|_o.~{XesmklXdmko{lfigdame.|e.thkjdl0qesmklX~_.lfife.t/lh>lfifdtk~ofdt3o.n/faof,gal0h>l0m>+~f,~t>hk~{=galfi{0~tk~ofdmko{lfigdamklfit/nEo.mgal0ne.d|_h|_o.~{sx+=jd~t3dmko{lfigdame.|Bf,eshkamkl$o.ndm~_o.m~hk~_fieshk~_of~t?fijipIIi?)qI*a|*#pRI**jITj*<*).I<#IhT<<N)I^jKT)|TII<U*6*)I}hI?j<4*##^T)O0*h)%<*IR]I*T I<U*I<*v*<#I.p*<]*#X<Uj<40<) **#)#Ij*##INI<U**060x)%TIT#0*}T)0#)qUM* ] j<}_ ]: T:I<xe0# ]| ): ) IITI**0}]%*MTT0*T)0#)*N<N00%?#0%)wI)N<I?}I<*0) *)pI<pI<v0)X<<0)*I*<*I<<*#XI*i<j?]K)I.IT)TK|<<I<U*#* ##pT]*#I*#^{*i<j?]%)]*{IT)|T<*T)*]ITX<<*0)q*<<*T<^j<qIT]*#)**<U*0*#|<#^}ITIT#0*T)0#X)N:0<<*I<U*:*<*0M)I*<<T*)pxII<<,*0,)I <T*) ,I]I<eX**0I*#T)*hT)RI#0)K*0*<0j*04I)IaIT]*#)*6x*IpaII<6I<I<4*<**<%j*0<<#%T*)hI<U*I<qhy*<<{T]).O*0R#I){ p .I<j#*6R*#0#*RI]XIIOT*)*}*)*RIx<x#*)IxIO)#^*0}KT<T*)6*<<}*0}46*O**]I*<<hT*)I)***|<Tx<^j<ITXT#0*}*#<I<U*j)x*I<j).*#x.I<U*)*0I*)Ix*#RI<4I<x)I0*X :<<#*RT*)*}aI<4 T*)}I<N}40*<<#*<<#T])*4*I}6}0*KIN0<0)I6*##^I<U*q:p_K:] )I<6INI<U*jI<fffi}I<.*fi! #"$$%' &(#")&($%* +",*N0)/1032x4 K5&(8&3 %K9x4 K822&(76&(6:6<;>=:< T#*IO - T*)*(? 8 *@? BIx<.CED:0})?}<*Ix**]I6y*<<*<<#T*) F X GCIH DKJMLONQP CCERSCTLUCEWSC<D:V&(V&($XCYW [ZF\I<j#*|Ip*)Ix*#h*<*]!#"$XxI0*<0|*qI*TpT)*.I<U*Y^&3+")&3Ox0**&(Nx** Y_ **)*}*#h*<*}` ?1I0*X<0*.I*TpIp*I<U*]* +",O0*:*OXx! #"$bj<O0*X<0M*OT)*TI*<*<* &(#")&(j)* *}*O|<0*% c_ *q0*<0) NI{*)*K*# I< }I*<<)#h j)*<*<U*I<X0#0R*#|<#^%*)*)I)*Xh)**qxv*##d_ IR#0UT)4*XN*<*qTT0*##0) RI|O}TT0**##< I<U*)NX}T)*xI<U*4I<}xII<U*Ye!f("fggihfijEk'lnmoVlp4lq)rsut+v'w4xzy#v'{|Xy#v}q,~zy#ssy+Kq)v}~~%ny+w)|X}y#xE}~%|Xy+|%y#9}x%'~zyK|%y+y@rnw)|q)vOsny+ q)v'~%x!Q$Fnyv}q,~z~zy+|Gsny+ q)v'~%xq)v}v'w|%y#q)xzw4r}rn8{@tw4r9~z|Xq,[w4x%'~%'w4rE'~%@~%ny]}v}t+q,~%'w4rx+4q)rs~%nyYw)|y+|snwrnw)~+M~w)~%y+|%E}xzy>~%ny+{|%y+|%y#x%y#ri~]|%y#v}q,~zy#sVq,~z~zy+|Xrx]w)O|Xy#q)xzw4r}rnn nyv'w)4}t+x]8{|%y+<,qq)rs9{aq)q)sny+|3q)rs>Ew4vv}rsny+|Mw)|sny+|y5~zy#rx%}w4rxv'yn}tw))|Xq,V}t+q)v}v'{Kw)|~%nyv}q,~z~zy+|Q8}rsaw)sny+ q)v'~~%ny+w)|X}y#x+nn~<rnw)~Ew)|<~%yTw)|Xy+|#9(QKV[}n,n+X+z+) , ]9 FX++,5' ]K,K}z++%%+%in ,>E,,^ KnQ MI y+~Y Q[y<qasy+Kq)v}~3~%ny+w)|%{Eny+|%y< z !4$8 ^(4)(%8i8Yq)rsz 4 y+~ *Qi)Q$%84iX[y@qx%~z|X}t~Vq,|%~%}q)vFw)|sny+|w4ru nysny+Kq)v'~~%ny+w)|X{q)x~wy5~zy#rx%'w4rx#5a QVz %8Q8$Yny+|%y~%nyTsny+Kq)v'~%x *Qi)Qq)rs !4$q,|%yTq,Vv}'y#sM5q)rsE QVz %8z8$Yny+|%y !4$q)rs9iq,|%yq,v}'y#s ny#xzyay5~zy#rx%}w4rx<q)rsq)v}vMxz~z|X}t~E~zw)~%q)vw)|Xsny+|xw4rx%t~%q,~q,|%ysy+}t~zy#s[y#v'wa nyw4x%~Yx%'4r Vt+q)r9~<sny+Kq)v'~%xEq,|%y~%nyv'w.y#xz~+ nyTxz{5[w4v >xX'4r y#x~%q,~<~%nyasny+ q)v'~<}xGq,v}'y#sq)r~%q,~E'~<}xGrw)~Eq,v}}y#sMfifffiff!fiff"#$yy8~zy#rxX'w4r }xq |%y+Ky+|%|%y#s y5~zy#rx%}w4r[y#t+q)xzy~%nyv}y+~%w4x%~xz~z|X}t~~zw)~%q)vGw)|sny+|}xq w)|sny+|X}rnw)|T+8i}x~%nyw4rv'{sny+ q)v'~&%x%tX ~%q,~q,v %%E)%aEq)rsq,v * *Qi)Q%a#%E<q)rs *(4)($8!i8 yay8~zy#rx%'w4rY}xErnw)~Yq |%y+Ky+|%|%y#s y5~zy#r5x%'w4r[y#t+q)xzyTrnw4rnyw)~%yY~%n|Xy+y]x%~z|X}t~~zw)~%q)v[w)|Xsny+|X'x + n$ )(Y}xq w)|Xsny+|}rn>w)|<Y3Kw)|Gq)v}v*,+ . - 0 /80 194(~%ny+|Xy}x]~%nysny+ q)v'~ *Qi)Qx%t~%q,~q,v * Qi)Q%a+%Eq)rs~%ny+|Xy}xTrnwsny+ q)v'~ %>x%t~%q,~ % 32 *Qi)Qq)rsq,v %%E4%T45687#. X9 +,5^K5%):9(5% FK<;,V}+. Xu),M,zi], =7+[5$>,T4}%,3,TX4,V5Kn%Xi4 *,.V% #zX+%in )zY?z#A@'B y>x%nw~%q,~E~%y+|%y}x<q)ry8~zy#rx%'w4r1w) x%tX~%q,~ }x<~%ny w)|sny+|X}rn@w)|E@y+~'% #ACACAC#0%ED[yG~%nyEw)|sny+|X}rn w)GFy<Vrny!2 %#ACACAC0%E2 EKw)|q)vv *+ H ACACAC$"I(4Fy<VrnyKw)|Eq)v}v *+ .- ACACAC "IKJ - 4LNSPT}xEq)ry8~zy#rx%'w4rw) 4Eq)rsL 2RQ L + L 2 q,v %E2RQ #%>X 'Qq,v %E2RQ#%>w)|Ex%w4y + L 22w)~%ny+|XE}xzy)V, ,i5)K5 nU w)|GV + H ACACAC * 4 W- 3~%nyExzy+~ LYX }x.rnw4r5y#~{) 4/ FKw)|.q)v}v + LYX q)rs[Z + L X q)rs\% + X 9q,Vv % %>O] q,v % %[Z 5q)rs 41 3w)|q)v}v + L X q)rs@[Z + LNM^ L X ~%ny+|%yX+}x'%x%tX~%q,~q,v % %% Z Fq)rs@~%ny+|Xy}xrnw!% Z + xXtX~%q,~_% Z% q)rsq,Vv % Z % Z %yT|%w8w)Kxw)([w)~%~%nyTq)x%yt+q)xzyq)rs~%ny}rst~%a)` y]t+q)xzyq,|%yxz~z|Xq)'49~zw)|Xq,|Xsyt+v}q)1w)~%ny]v'y#q}x.w)~%q)}rny#sK|%w4 ~%ny]Kq)t~%x<y#xz~%q,v}}xXny#s@}r~%nyT}rst~%'w4r@|%w8w)q)xKw4v}v'wYx+3.{ W- F~%nyExzy+~ L D}xFrnw4r5y#~{)F{ /4Oq)rs ny+w)|Xy#xfi/8cbq)rs\/8ed}r gf y#'~zy+|# -hji$Hkklfim=npoq.r sjtpuvxwynpz!{fi|)uRnp|)uv3uR}s~:s.z )r v nuR3fiY[fi<3" Rgy #[fi[8[gfifiAAA")\"g[g G''jg'jjRyAAA "Y[.fi"Y[ g"gN0'_jjR jg 0=_jjR:fi"0)Pj"fia) Yfi0< ,j <jaR<"0a3$_ < R RaA" AYj.&<3" aj [ $ )AR 0 $,$ # ! <N 8j N , )A R!! $_$ [fij )A0,fi) $ YYj$ !)A0Aj [j Y.pj Aj R_""0<_"j jj0)AaR' )[Aj" $Y fiAj"R)RjfijRpK j\jR3<" afi[)j&.R "j0)A0R[jfi )A0AjR_!0AA 0 <3" a&jG AYjx\<3" R 0& $j pj Aj0 )A R,\y $,$ j )A R)G 0 $[ Yj$pg [g ! <NR )!a AA <3" ajfffi !"$#%'&()!%+*-,./fi,01)Rj$j, $<j "fi"! )[<"32x< R$ j )ARj RAj j ajajRYR))j" K_jR54p)Kj )Y"Ajja0Y76,098;:=<?>00 $6@ YjG )<pa<3R & R "[ 3<)0[R a) # $Ra0< a\pj"K )"N<""0< BAj[)54pa R\j<3" a_CAjKR )Aj 8) E,FGB IHKJFLMONQPRJSH1TUNWVKX)JWNEYZ [YC\KXOJ]N^;_QLMONETa`;bbNWcLdN5ZfeYgHKZh ji J]N3LgXOJUZfe "0 k`;ZRVlHKZbnmEY koZg#pYe?`;ZqNWcLdN5ZfeYgH;ZqH]kpLMON=VNffk5`;XObrLsLMONWH;Jm g5t[cT3bnXV;YZ+\uLMON9LdN5eLe9HSkv N vxw NyJaeUMYzPYZ LMON{PRJ]H3TNWV;XOJWN|JXOZfejYZxPOH;b}m;ZRH v Yff`;b~LgY v NH;ZFLMONeYC$NH]kg5t)A 3<) =j )'a<)R<jj0$R0aj0a RAY)AgjaajR'Rj"#!0a\"Y )Rj)$jxRR 0R ARa_"N'RN))A"A0NRR" R'a3)NRjR )A0$ Ax3R,j{2)" Rj8Ajj"=A#R[ )\ajRAjAR ) Nj"Aj[j0#R$ j <3" jY)Aja )Aj0jR""0<\"j jj0)A&&"j0)A0)jj<" aGjR#j0#RajAjfi< 32x)<\j:"A!jj0#R$ )j)$j13 a8x|<p8-"<?8 : <p8 : <ff8-+:(>_=R_)54p j )Y Ajo2Rx )Rg 3 NW\)A # R\ Ajfi)Aja >R&"Ajj$jjoZpg!j <3" jg1$fi/Cf$RjIpG{Ej~WpUFWWxUIfE[5)]3.WCg?U'WsxG[qKy5yoOlWS35; 3W/ffy]yaxBB]WyKBC ]yj K~5y aCKpnfK/5)]3aCg?U'WKfK5O]3WC%gpUFWG[aS35oO E5|.;WgxW W ] ?G[W]35oO Ky5y) gWEG[Ky5yoOlWS35KWfyW/] W]35jIpG{E;..BC3g G yyy1 .O1 WsUK/K ' yyy$gW~KFgxU EGq{G/] [of"{G{K]jIpG{E5.;WgW7W|UCy{ WKafyaB |5 yy[ n lpfK;.BC3% WK;.C3 W Gq{G/gKB]K;RBC3 WK.QfK/;.C3 WGq{G/][{I{][ f3yBWC(.W)53 WK[W?UFWW/yWj{|]y{K~fyg CWy. "B]y/K%Ka B;K B]y{KKa B;K)B[j]]aB5[]KWKKafy?+KB~Kxg?UUWj7KayaB KoRgsUK.W?UFWaG//fyWxgxa Efffi[ "!$#%'&"(9I)=*(;*+ &,$-./0$&1132(#54;*(6-'87#9&1:-;=<(?(A@ BDC{BK BKy5y]3 ? fy]yaB]WBEC aB KUBf FK3=KWf>WO53 aQo WfGC{5)3 WB{KoWfja)53 W?FKB)fxBK C3 W GHI'J K/LMNO:P RQ;S(-32*# -T5/&U(@V&:QW2*A(+!$#%$-X(A@.&,$&1+ZY[Q &:Q ;7\@$(6S-.#]7^!$# (;+6.&"(Z76##2*_1@?$ `a_bc&,51(;Z(A@Z7 c8@$76#]&D&:Q(S40=S+ "!$#%Z&"(?xdl*(;*+ &,$-./0$&112(#e;4 *(-.87#9&1-T?<f=f=ffigh*iGjckml6n*o]p+q h*r.suto%h*to]po%v=lxwzyWlcr_{|k_p^}~h/o%uEuff$, 6_ x=1^SffS?_x ;0%_% 60 ;_/_ 6[$x % x>69?_x ;0%_% 60 ;%$U6_66 3x^ff3u_?$1_S _ x>u\WA_^S_ _;3GDW8_ ff\u\ff3u6 $G[_?$u3[ _G? %_%x_$?_\:6 6S _ ? 6_ x_?6x%?A u\+?__ x0G6 _?TV0 ;6S%W?_$ O?T+_W_$?3% _>E'~% ;60'/?366S6 V:6\_%6 .GDWO[ W_.;60 ?_?D60;$?_ x*1W61^SD6 ^%$6_6u6S Vx_V$?/_Z_?0_ x?_;60Z6 ]/?._/*1a'%%16$T6$?_%x:_/_$x_%__ x6_T66 6.GDS_V01^SS\"6 0 :6zO1:_T_?$x $x_/ __ x*SR6/_*1^.:_T_ $x_/ __ xff5u6%[_?6 ] _ x;_/ $ ?ffu_~% ;6/%6 $ _ ? 6_ ?_?T6W6_x ;%0_%_VT6%6 $ _WU? 6 W_ _'%6^$?/_ x_/3$x+_6%\66^1SS\"6 S%9x W/__6_/_$?/_9_RU6/D%D$x_6+R_%;G__ux T%%_0?_% 6>_; ?_% 6Z%$D6_6G6 T~66 % _%D$?/D? 6Z__ ?'6UX6_x%xT%6G%1^SS9_VO V6U_ /. ???__?%>Ox x;060 1SS9 * _ xZ6[ )_6?UOx x;06*_0666O 6\ mu Gx/:69_ _ x.6/_? %_ xV_6* ?%'_>x%cx;06 S+6>? 6_'u\%% ? /%W>%x ;0%_%WOx x;%6_%6_Ex0 =U0 ?;;%0;?%6ff R +DGfffiZ 6_? . U6O Ox/:6U_E _%xZ6[_? % x_6/%? % _Ox x;%6+ Sc69?_ [%[%;?/%u_>$* _ xV6/_Ox x;06+% +6R"*! $#%%%& A'[)(:$*W$6+&,-./#% fi("012!8 S_43)546$(,$fi716fi.A,3c8%1-.(8(:_79:;fi<::=> ?3$GuU=_/_? % x._6/%? %A@< ? ,6_ _ '6/_6%% mu uOx'x_ _%x%D_GOx x;%66% +6[%ff?_ %R/6?xVU_ 6_?d+<DB _?+?*ADC6C x_.%?+_]/?@< ?E ,$x;/ _6/ ?TE:6GFIH zT_ 6_? $x$ S. $0$ /% 60;M%;6O6%_ x/66+_]/?Zx ?6:6'%66Z:6__$0J$^K %6x%%=UNOMLNPORQ/m -SUT=-VXWYLZZ[]\R^!*$#%%%& ,_S1&`!Z(abc2d$e_S1&`! (\A^fhg*fi@ ?jiR_1&`!Z%)(,%k8'[ lf gfi3camG43:jfi 12]1'fi)n njofip"qrsutZrwvrxzy|{~} `|j|~y~|U} } w-~~`~$ywR4%8` 11^%+,-. h)R/7-%48 "1$ )R) Maal)1"1a URllD1 41h117a$)%2+47X-1ZjGcj1waM1e ))) R< R )>4a+4R+$M 0*D2*1e -Dj 2-8%a >%* R ] +; ";D**^] 4 >%wD%4 ])X>)D 4.D8D 1""w)A $4.Z) R)GR, $4)w : )>%wRD Dw%4D 14w4]4 4w] 1>zehaZ)`^D)~+112w2G4$$Da1U`1Ul%)1)+/D )))DR|D 2 ))) R %4<Z : l h1Z e2%7;D -%/ )a;2>7hDR %2< 1ZwchDR/7YRD`4 G 1` 414 ZD * R 2+`Dw% l %R j D2~ )))uR~w )1RDc *eY c %^~R 1 D>2YZ ))) RUff* eDR/7 >Rfi` )]0*D" 1 e"D% 44* GR 1Rb~ ))) R| ,h)fi"u* eDR/7wh %Zw 4` )8%RD Dw%* Rl4 * 1A * R`Dw%"28 GwD 1 P w4w*R 1 DRU )))DRZhDR7A c%Zw4 G~ $4.ZD> Dc21wG , " R U R$ 1$ 414 RD * R 2+8wwZ - D** RD Y4GR4 14Z 4.D,>D,2 1>R)a )+D"!lR4#" "w4$&% X 1wD) 4 DRw *;('DR))" ")a^R4#+**+>zeha ,.-"U-a2Gl21):+1`-1U) *xzy~{~}2"| j|~y~|U} } w|~`~$yY-1jU1,a1Aa2*1w1U441w)% ,:2-U$)) X%7a2-)2%Gl%17,-.0+%11:12ff /;Z4aD%7R 0 X%w+M1a)1->2-4+l%7a7MD>1$)1 /YRD 32`%wRR %8w)2 )4 5 7 6/9 8 %ZwRR;%144 +)3:6 R1 & ; %G]D| 88ww< <= 5 ! >0 ? A1 8wD%G]D:xzy~{~} `|A@|~y~|U};-} w-~~`~y >%ZDcw< * * R 2A;8414;144 GY )C B~) DUlw4]4 4wj1;1> 1 cD~ )))DR| RU ))) RZEl%Z6F )))u * RD |GD H "*R~R ~:F6NM FHJILKHPOVWYX3Z\[]WFRQHTVUU~ )))D | UU F | ))) |FQU H\IH^)^`_fia&bdc3ef`ghdikj lmbdnpoqirbdqikjirs)gGtvu1gn4wx=f4jyzb|{ffir}~#!9r49G4=+==&]3=14r+z4!ff<4=4v79G=4149r4|94!rr+9r=444rG=44rz +=4=G=9ff+(rG<Gr|4r]C<94&&4`4=+9N+=4rGN79G4=G4rff49!m4=4=94rff+d ffN1r3)CGd <v 4=ff=4<G+<+444Y+<++Y4ffrP|Y+=4<G79G=&+=]7=<4r49drG=4r+ +=p=ff +d4+=4VG=r7=<=49r4G=rff4<GNr d3+= P(4=r+z m+v3r!N<GrG=4+ +ff4=pGffr=4<Gff&+94(7=<4!&+=+r G + ) G&vP+(r P|+ 1<3 \= N44r#44rff+dv m+v=+J&N4`4=p]+ 4=]44rd+d 44Nrp\+=9<GN79GN9=94=.=ff mmk# 49=]4=m44rff+#p+ ff p+v]C!JC ff +A]CGr<G49(9<4=r+=9<G(79G&+=44+=9<GrG=4+d=ff d4+ffp r4=!<+1ff<rNffr=444+N+=4rG==ffr ff=G= 4ff4V4V=444++=4<G r4<r9d=rr<rm+=rN99=r]p \4(G==4<GV&9N47=<4 ` ) `4]9=4+p# `# # `P +V441ff mpV4]m44r4rdkv +<GG4=V=949++=4<G(79G4r(4=#+Jrm=|4+Gff9=+ r4(=<9<4<+7=<]<G]&4fiffff=Grrff=#+=4G=9=4rGrzff+G=rG+Pff9<9<7=<4ff+G]+=ffrrd<pG=<p=<)&ff9<9< v==r4=)+=ff<+ =rp4=++34G<G& ff]r ff4rrff=r&=9r9<4<+p7=<<Gr=rr+4rJ&r49&r&=<G&r4=G<Grd=<99 ]4=4<Gff4+G=rN=ff9<9<4r+7=<<G=+4r=G<+#r)&+!"$#%'&)(+*-,/.021'354/6798:8<;=1 ,/.?>@1BADC 7?EGF AB8H.B>HIJ8K8@,L8@4M7,/.N021O.GAV F 8<;=1fiWR.X,2YO71OTZ,N3[8\1BAB8H><P)]^C _ V >`AfiCa bMc\;4/.N0LdF 4MPR0S35,M.BTU6=79421,MP Qe X. ,,N3Of r=9ff<+vr C_a b 4G<Gr4r] G4+==<d<hgji-kl`monm$pLqr n-i-stulwv=l`xyhv=z-{-mon-|)iPffr9 P+vrG<Gr4r] G4+==<d<]Gff4ff<+Nz+4rpzr#4 99#rPr C_a b =9 4=r 7z#ff+GG]d4r4ff=r!=444++=4<G=N#ff+49r=r4=44+=4<G]=rpG4==r4r=dr<+pr=ff<4<Gp4G47=<4ffr9]&=)<4+=G<+(} "j"~#%H&)+*,M.8<;=1WR.X,IB1 0M6=. 1>`P*>]/6=.X1 F 8<;=1I?4M7<7fi1G/>`AB8<AM ?E . 1O8H6=.BPA8H.B6 1> 34MPu0,MP7> 38<;=1O.X1[>`A[4MP1 L8\1OPA?>',MP ,N3 7?E AB6IO;8<;=4/8S4?WLWR7 ' 4 3O,M.[4M7<7 Q dU;1fiWR.N,JI?1 0/6. 1.B6PA>`PPR,MPR0)1O8\15.BTU>`P >wA58H>HIW=,M7!Pu,MTU>H4M7:8H><T1]L>`/15P4MPQ e ,M.X4LI71D3O,M.-[de .X,,N3Of C<94z4=9+==4G=+4+!CdG==4<G= 4=CG44<d<V44G=r=4rG=P4+94Vff<4Cff4G44rff<+=4<G P Er!+=9<G ?E4pJMfiRL-Qfi5X HQ_?Lfi XOo+/:5L L /OH QX/fi5=XLH? hfio-fi</wX/S^-OOOXJ+XH :jh/[H?:</XL^OOOXhfio-fi</wXfio-fiX: L h =5G MfiXX o`/fi _5= X5/:5XL-QfijO2H?X/fi5X JH?GLofi[oX /OOOG /GO?SoDX5X JH? !oJLXhfio-fiX=o-fiH/XL fiff)+OGL =5</fiX/ /- G/GXX [wOO/X-o5= =5Xfi<fi+M wR@ +?/ GX K/ LK wSO/XDX [ 5X) oLOXO? ? /?/u [ =5?UX Q/Lw^L X LXR@++/5XGLOGUOG/ w5 "!$#&%(')%5H? _ ?X ^/ L Q/5=XLQ/SHQ?+ G MM @'J S`//-[Q*fi 5U L, +\OXOGwX L L/ ^/^/.-/G/O<//L L/ 0 /u 1 25 _XL 3/fiS5476 89:Z;=<?>@BA9>CEDGFIHD K JL*MNOQPSR,T'U')V,"JSLW#XW%ZY H ?+\[,OQJSLW]^RTPN?[UPS_M^%('L`#Iab'U'XJ'XPST?JSLcMN(L`%fidJ5[U')V,fe_LcJNg(Th(]iJ0O'j(%W'#)lkmYn pq#&%#)rY 6 s$tLcJbJ0OQvxw 3/^LG5o</fi _MS OXOGX wL=L/u^/ X/ /G/O</L UXy4 6 8 z^^L XXGMXwwY 6 *fiU =5GrMN\aQ#IMN 3/w: L mff/ {4 6 8 /?/OU =5"!$#&%(')% 3/U: L o/U 5/5GK MX^fi(|}fi5/5GK/R=5GMN\aQ#IMN:/`Lw bOHQ?+ S~/RXOH : O/"LL_ XG5X/ //GOLQ/</G , ^^ MHQ?+/[5=XL Q N O/X~/ G MX^2fiw 5MN"ab#MNS G X G5/ G5XQX? 3w/LX/w5=XL/H?+`_o ^ MUH?+fi/M_/XL5XL ~fifix_UN_l_^}h_},h$~N"}" Bh,(""b("b"^"fh"h=Qcr",(Qb*hB("$$mNSQQQc7$fSh}f"}"`SS\hSBS)cQ."X"cQ\S"$&Z}b}cb5l.1uKQbQQQb\WrG"}\Q\h}bQBc hu^cc\&(xc"K\}Qu$5}?b{{{m"}Q"hx(}("$} \QQ"\b(,cb"$5```_}N`,),(`` Z&{NSQQQcc$_SBBXIc"^$2c5.1~9b^\9b 7 U .ZmNSQQQ9ccU.b(fi"}NG"}b"h&c\}`_}`9Q{B Qm"=Sh}9.l*"Q"}\}b 5(}hc" `" ffQcbQfi."\m"Sc\Zb(fiZK. W $xr"}(""b("}b\"",(b}"$&() "}Q\^&.(,cb"$"`"SSBII"Z&.W $fi."\m="Shm}"B\z (cb\$z.b(5S_XIW " "=`yhB("$qllG"}b"&mSBXIc"^c . =h?NSQQQcff 9$ GbQcSBBXIb"^&mBhbS_XIb"~=h"}Q"S"} "\y"BS{SBXI ""`yZb( ($hq}^G "Q)Q""bBKr"}fi""mB"$"SZ}fS_XIW "^xuff"$}fffi."\m"Shcfi~"}Q\h}(,cb"$7"`"SSBXI"Zh2$KSBXI"=.)h}fS_XIW1"^` .?Z Qr"}&("$llG"}b"&x&u) _hbfh_&"}bx"}hB("$"1hm" cQ ~bQ\S"h}Q)h"{"}5B l "Q)Q""bBz(,cb"$z``2f(bQ}"h${G"}"` ($N"&l}bS"}Z&cc"ScbmblUG"}fB"(bB}"7f}Q\b ! X# "$ % ' &)( " .9`.b(* $# "$ % + &)( ".,$ *./ 0324065 5 78249;:=<?>A@CB ED.N?F(SHG?),\EDWI( `KJ WLDW?XXEGED0lMD`ffN OJ _ F(EDQP^HGN1*)J ),f3DcSR#G#P TFfijWW)UI $ V * &IXW Y[Zc\EP.3GhQj\]^cD bTF#_^` "b("fQ"b{Zha5hb.b ."}\Bb2mbfiQ`"r\=hSfihG"Q)Q""br(,cb"$B2{}Q"}Q"Z"$}u"}"bcc\&("$rc{c"KB\\"hbQl"mb*GQ\\rh IXW fxbhGZ"dc W S\B}b""b{&rbK:=<feg/106hjik5 lSm)noQ9pn qsr=9)q6o78tuo4n tv735 59pwxlyao2[n tuo4lz{/178yalAyfi~2h,,| b("$=}'} NxuBQ u"}u($mBh(,1*_"}x($Bcal b("bhS"$="uh(,h(`SBh\h\"Q br}Q$h*}Qc,N"("&"bcc`h("$Q~3f3LC3))f}\b""2${"}fG$S\*GQjxQb{c\("S_hh1^B{hlc\("SBhhhj*)$ V ."{cc\&(2c"\}Q` N S\ "{S\Q b&S_}0 QcbfiZ}Q" "}($m_(,hju"} h(,h(`SBh\h\"Q b{Q)h$h~G Q\U"$fbhcQa u}Q)B$&Sl"}($mBh(,1hxcQuh{G$h}(SBmhBhQScb.Z}Q"="}=").U"}^($mBh(,1"b"B".QG=$B.f=h{B(.\h\"b*$"($m_(,hj."}bQh"$"Bhb{fi&ficc\$}bcmh"} B"Q"ah"c )"Q}\ZQh""bQ bz"}}Q{\Bb{hz"}bc Q&"cbS"5c"hhq\}Q"b" fl}"Q)Q""b(cbB"$xQ.b"hm)$l SB,h}"}}Q\bh{"}~$b\}Qk fim".($mBhhQScb{$h}$h"hmf}bQh\$^",(b}"(}hc"U.\ }Q)B"7Z" &cQ\H cb("("f}Q"b ' }u}$` b ="hQ&"Q"}(}hccb( (,cb"$"SfiSBBhb$bcQ}Q"Q{QcQ\{h}bhG$${h"hm"hcQ"QfiZh""}4fi438v#uuk8# u8d#uKa#uMvMxa#fu8aEuK4#Ku Q#KuLSLSLSLSLSLS dpLS )kLSLSLSLSdp dp dpdp dp )kdp dp )k8L8MvH #88EK8L8MvH #uK#auK#KaO88E8L8MvH #XuKuuKuKu88E8#Ka8fM #8#Ka8fM #uK#a8#Ka8fM #X88E8#Ka8fM #uK#aO8E8#Ka8fM #XuKu8#Ka8fM #XuKu8E8#Ka8fM #6vKuuKu88EE vMxuMv8aAa8MaEv XOuu)8Kua##Ka8MuK 4#uE E11E EuuuuuuE EH H#uuk8# u8d#uKa#u8L8MvH #88EK8L8MvH #uK#auK#KaO88E8L8MvH #XuKuuKuKu88E8#Ka8fM #8#Ka8fM #uK#a8#Ka8fM #X88E8#Ka8fM #uK#aO8E8#Ka8fM #XuKu8#Ka8fM #XuKu8E8#Ka8fM #6vKuuKu88EQ#KuEuuuuEHE3 # #a8Ma#uKadv1MvMxu Ouu8uKa#AxMv8KMvu8# #ajMAa8Kv81vuau188KAMa88kv HaLua#Kv8HMa8[afi3S4u33, 3HvS8fiff fiff "!# $%$&fi$('*)+,.-0/ 213)4/)5)fi$6879;:9=< >?>79A@CB9&D*EGFHB9#IFCEJ9&KL@M:*BN9&KPOPQ=>RS@M:PE?T+BN@MDUR: >JBNFCQ=>FHIVS9#WPB@CIV9&DXEY@CTIPBZF&[C9;B9&FCEJ@M:PR:P\(R:] 9&R>J9AB&^_E8K9AT4FCOPVS>8VS@C\MRQ`>J@XWPBNRS@CBZRS>RSaA9&KbK9AT4FCOPVS>8VS@C\MRQ`c#RS>7b>J@C>FCVWPBZRS@CBNRS>RS9&E&degfhjiklhjmonqpsrtvuw&xzy|{Zw*}~AS}lN*3AHjS}w}HfiX}2~&}HN*3YP4xwLw4A}H x#x5 wCZw~Ax5j}Cx24Zvgx5w=4 qNMZb wAJwbyo}HX+}fiJZ l5x4sHfi}C}H4}{ASwx5j}CxM%w0fiCx3&~N~& +H`G}CfiwN}M~=*wAX{Zw=0J3j}l0}Mx?w}l=x3Hwwxw=4Cfiw?{ASwA`xwx45 `zXAH3}CfibyY HlH4}Hx45*w;X}HPHJHw`wC~&s{ASwx x5w;fiJ{ASwAxw=x4+ L? ` . wAJwg}gfiJZ l5x4sHfi}C }HZs}{ASw=#}HfiX}x4s~&xxCx}HCwAC w4A}H x55J&A9A>42Z2Iq9#FK9AT4FCOPVS>?>7P9A@CBCPyFgT5@CBND0OVF jFC:KLFgWPB@CWq@MERS>RS@M:FCV[lFHBZRFHIVS9>7PFH>*KP@ 9&E:@C>*@jQAQAOBXR:42Z0@CBLd9A>*I9FC: EJ>JBNRQ=>WFHBN>RFCV@CBNK9AB@M:PHfiEOPQZ7>7FH>gPH"RE(>79L`VS9&FCEJ>g9&VS9&D9&: >Ad9bQAVFCRD>7FH>b4Z* `RTFC:K@M:PVRT4PHfiMZL d687REREgKPRSB9&Q=>VIq9&QAFCOPE9*>79b7PRS\M79&E>WPBNRS@CBZRS>K9AT4FCOPVS>(RE0FHWPWfiVRS9&K"R:FCVVWPB9AT59ABB9&K9=< >J9&:PER@M:PE#RTR>;REWq@MEERSIV9>J@FHWWVSRS>AFC:PKIq9&VS@M:\ME#>J@L>7P@MEJ99=<j>J9&:PENRS@M:PE;RSTYFC:PK@M:PVSRSTz2Iq9&VS@M:P\ME3>J@X>79&DdEFgQ=@CBN@MVVFHBC >J@C\C9A>79AB3cR>7LFg>79A@CB9&D>7FH>EN7@%cEG>79R: >JBNFCQ=>FHIRVRS>@CTIBNF&[C9B9&FCE@M:PR:\@CTq>79QAVFCENE?R: ] 9&RS>J9AB&^_EGK9AT5FCOVS>YVS@C\MRQ(4(FCO>Ja;j9&VDXFC:fi&C %Zjc98@CIP>FCR:X>798T5@MVVS@cR:\BN9&EOPVS>Adifiki55Pknqpsrjw=x4+ 242ZAH=x4Zs~&xxCx}CHJwAN`G5xwA}C }HfiH++ fi~&x4sHPJwZw0fiH}Cws=}Cjxx5 wHwg4Z wAJw( (}*Aw&xJ4xw=J}HN# j}HJMegfhjiklhjmonqpsr uw&x{ZwX}~&}HNXG?P5xwXw4A}H xx5 wHwgZP~=x5 }Cx8x5 w*~NHfi~&j4HXw}M~Aws=}H xY+`}X4xw=J}H}HLw}~=bXwA*{Nw=j}l(}CxYSwN}lxHwgwMxwAZsHfiXwfiJ{ASwAxw=x4+j` AH}Hfi4xw=J}H +` HlH4}H3x45*wL}CPHHqwJwNHP~A{=wxx5 wfiJ{=w=xw=x4+j ` w=w;0}*x4s~&xxCx}HCwAgH w4A}H x55J&A;9A>42Z8Iq90FK9AT5FCOVS>>79A@CBN2R:d;9gBN9&KPOPQ=9(>J9&E>R:\ ` >J@b FCE5T @MVVS@%c#EAdz9A>3 Iq9#>79`EJ9A>@CTKP9AT5FCOPV>EGc#RS>7 FCE>79`Q=@M:PQAVOPER@M:dz9A>3Iq9;FEJ>JBZRQ=>G>J@C>FCVq@CBZK9AB@M:EOPQZ7>7PFH>L4blL.Xd?90QAVFCRD>7FH># ` RSTFC:PK@M:PVSRSTz `EEOPDX9g>7FH>0 dG9&QAFCOEJ9XIjFCEENOPDWP>RS@M:>79ABN9XREFH>(VS9&FCEJ>@M:P99=<j>J9&:PENRS@M:@CTI9&D*DXF jd>7P9AB9gRE9=<FCQ=>VS2@M:P9WPB9AT59ABB9&K 9=< >J9&:PER@M: @CTbVS9&FHBNVS*d6879AB9AT5@CB9`EEOPDX9>7PFH>( ` d6879&:>79ABN9XREFC:9=< >J9&:PERS@M: @CTENOPQN7>7FH>Xfiff T3>79&:QAVS9&FHBNVS2 EEOD9(>7PFH>@cFHWWV & T+@CBEJ@MDfi9 X ENEOPD90>7PFH>RE`FC:9=<j>J9&:ERS@M:@CTEOQN7>7PFH>*#@%cFHWPWV % X (5ZdE &z*T+@CBFCVV %SLFC:PK:@C>`FHWPWV T+@CB`FCVV " q>79AB9RE;:@ fiEOPQZ7>7FH>`FHWWVs Z9&:PQ=9 RE;:@C>(WPB9AT59ABB9&KPdG6879AB9AT5@CB9 Iq9&VS@M:\ME>J@*FCVVWPB9AT59ABB9&K9=< >J9&:PERS@M:PE8@CTFC:K2 `687P9T+@MVV@%cR:P\gQ=@CB@MVVFHBbRE@CIP>FCR:9&Kbc#RS>7b>79R: >JBNFCQ=>FHIRVRS>LB9&EOPVS>E@CTIPBNF%[C9B9&FCEJ@M:R:\IFCO>Ja0FC:PK2j9&VDXFC:&C %8FC:PK2 >RVVDXFC:&C8T+@CB>79QAVFCEEJ9&E#D9&: >RS@M:9&Kdfi!#"%$'&)(*$,+-$./*0)/213134,0)57698;:=<?>2@BADCFEHGJILKFMONQPSRT UWXZVADC E`aCbC Cdce @ AWhicG f ejEFCk@ _ cejA EHGc G,l ]g[ C3m'@`^e%cAQA^@BA ]n[f @ [ copeqCrC3m'@ ]_ E@DAfist@^e ] u EHAvxwbY\ykmp[^c ]_g_ f{z _ ] ] _gf _PG ] _Q| ce\o}G2c _ l~ ]_ G`^e%co}A^@BAG ] _Q| ce\o}G2c _ l{yeE3Ck@ _ c e`^e%co}A^@DA@@p*Gcl]_nf@ @_ aopf E;ABE3Ck@^y _ @Q@ @ @ o}G2c l eeEFEFCkCk@@ _ cceeAA_ _[B_ ]_nf _ f __*;*%2{*{ZxJ\a*xD}r- annQDnant D=%^ r =t% t%^a'^F ,%'^ t%ar3 rx,t',,;J'hW ,^3^a=VD}na=%-,^ 9D-='na},;' h 'W t,^;x,t',*^%-'^F ,%rnna,na', ,n xnatQra -'a9a^ ,x'^t'fi'^anfi^nt'a^t%-nfi,=%'^F ,%^'x'^ a- a; a'^t *H t3 Jnt D=Wt'=n^^ t^ ,t 2-t%%-, % -;*% # t^ ,a^2 n^t ^ =na^= fi %n^Q ^ ,a^b''^ ,' t%,t= '3-%p% W '-,-' n-=Wa n-,;''/=0 } 698;:@aC*st@c`aeqcAtA ]g[\[D] _Q| opeqcJ@AQo,`^mC3mpc CADc CFEHAHrc{sDE3ejEFCFlfiCk@BABCFE3GJI [^]_b Cdc @DA] elG ]| EceCFE | @LEHGC3mp@OABE%)@ ]n[bz @aCbsQ@Lc`aeqcAQA ]g[Lf @ [ c o}eqCC3mp@ ]_ Ed@BALKFMLNQPRAQo,`^mC3mpc CMUJjT [^]_ ]| @G,EFCk@xA^@aC cG f P EHAG,EFCk@ z >mp@DG [D]_b 9cG f ABC _ EF`CbC ] Cdce ]_gf @ _ Ah ] GC3m'@ f @ [ copeqC3AE3G rC3m'@ _n] sDe@ |i]g[ Ck@BADCFEHG}I UXV E;AA ] ec{s^e%@E3G ] ejlG ] | EceCFE | @ ] G C3mp@ABE%)@ ]g[ MPL zw _n]a]g[ a}'^W--' hW ,^3^a,VD}na,t%-H Qa9^,fi9a^ ,n'b'^F ,%fia9^t ' '^b%a n-'bDpna,-fiH Qa9^ }'^ a}LF#a%n^a9a {Q'^t^H x'^D' D%-, hW ,^3^a VDpna,%-fi3 ta2^ 'a^-fi,pDa,'rH 'b^ 9'^F ,%'^ t%anafi'b,^ a-% a%-'}',t}Da,,bD-='na^ ,D-,n P ,'D-,^;,%-,W r' a'^Q'O'^F ,%W r'Dpna,-G KFMLNQPSR \ ,^,t,C _ o,@ % ,-,%% U^BafiN fffifffiff)N p 9'O t'^t, h W,^3 ,P ,D-=nnaJ'U '-,%WD}na=%- KFMLNQPSR #=t t^a,pDa,'t^'t, C _ o=@ g,\^ n G P#%,nnaaJ r'%ap W'^#Dpna,-,W KFMONQPSR D-=nnaJ^ *'U fiN fffifffiffN k k ,U ) fiN fffifffiffNt H fiN fffifffiff)N'D aD'atU,} J,=,D%--= , ' hW =^H^ta,'a V ! G b '^ n" #$ G o'`CFE GmJl C3mp@BABE;A H & % fiN fffifffiffN J% P D-,na{^' (bWp; pD-,nnaJh * +M ,t^H^ta,VD}na,t%-'*n^#f )] ( OP ] t,t, P ( ,G ##KFM NQPSR,=,,D%-,} nt %-JnH t#,,,t}Da,,t=,;9-%p'--' %^ KFMLNQPSR ; Z }}-,^}, {72-}'- ,=n^ ^ t^, 9-%-, 9% -W,t},=Dabnt D=%^ b '^F ,%b'^ ta^,-%'-'\,t% Q%%a9a n-='#x%,^taJ,;%n 3^' {'^F ,%Q,%a ,x t^ =na/ . D-=^n1 0}; *a {Qr' x, 9'^F ,%^pnt D=;%k^ 9 = 'a nfi3'^F ,%#,^a},t%na%\=%=%WannQD%-,b9-na-',^a},na^}D-=^%-=^* ,O' 3 2gaD =t# 'fi'^F ,%,^ t%a^#xDpr=anaJ=tO^ x,W'a%,^'==aJ' #'*,ar'nt D*%,^taJ,;%n 3^^; na^#''afi9a,,46587fi9:;<>=@?&ABDCFEG:HIKJLBM:JLBDC3BMN8?'OQP/?>HSRLTU=SCWV:YXZBM[3\]K^`_!abKcedf^gbihUjlkfimMhLj>noWprqsp tupwvfxb"z|{}v~v ~lpfi{}vY8vYpfififi8pfi{}v3vjSLj!&whLjfirmMLt'oW/{q_^#K{Wz_c_| ~Q vZ`mMk'USmM jlF"njlUm&jlFS&Ug ~v1xzf/bg{ ~W vb/c`{| vzfbK^gb"zdf^ wUj"byLb^gb"zdf^g& jbKcmM'LSj!{KhLjlkfimMSmM'US3kjlhULSj&kfiM&Sg&ZSjfiSjlUmMSm j1SjfijL&w&fhLjfi&ZSLjfi&wmjlSLjSjlwUmMSLjw&ujg&SLj'UjgU jlhmMSLjUS&Z&gLjfi&SjlMl)&S'MMw"Ml!mMZhUmMkfi jlSUgSUj!SjlSUM)kfi&ZL&gj&jlLjfiw&MmMfijlhn&SSUmMLu /xK &>&SLj!kfiM&SSjlUm'UjfigmMSLj!&L "&UhejlM&eUmjfiwwkr>&Z6Z l#r"3fi6w" /`&rs>fi3DK3woeprq!3Sq `U!lfig }u>3DguoS3&r ~F"fifi 3fi " f ~ pfififi8p36r6&r>M&|fi ffg >'S`fifi!vff/lg1&1&K >r!t3">fi3ff3>M !vi/ 6FM!L &"QLr 8 go q W v] l gLj3hLW&SUjhLjlkfimMwm'sUS3kjlhULwjmM!'mM&jl|mMmM'LSj&UhmMS`k&SSjlkSUjlSUS&)mM!mUkfiMUhLjlhsmsSLjUwF&&ggLjfi&Sjl MljfiSj!KjU jSUjSLUZSkjlhZLSje#"'msmM'LSj$ GgLjUS3kjlhULwj # "'`wUZ"mM|'3L'mM&SmMuj'|SUjSmMfij&o q &% jlkfi&U jSLjU`jfi&m jfiwSmM'UgmMSLj`SjfijlU>Sm&emM' !' ( &Zh&'mMkfi&k'Z jlFUjlUkjjl S)mSZS&'SmSm'U&* &wkfiM&U jlkfi&jjfiS&rujlhm'3L'm&USmMuj&,j +3)KjUS@&jSUSLj!US3kjlhULwj# "&kfi&Mjlh mSw'UujlFS"noWprqsp % xwjfiSLwU!ZgmM&Uh'U mSLjfiSjmMg&,j + jlUwm'e &. oWprq)SUkrSU %0/2143 n5p xr)gLj!k&wSjlkSLjlSUS&&Zh SLj&&&wmMSU SjuZ& jlh ' SLjumMhUjlSZ hLjfiwm&jSLjuUSjfiwjlFUmSm jl&KhLjfi&USmM % hLjfi&USmM6 % mS Ljfi'SmM&j`k'UkfiMUwm' Sj`L&gUjfijlhLjlhfmwS7KjSL8 SU5 "&SjfiSLrU wLjm&Zhs'UsmSLjfiSjm!&G,j +3 jlUSm'|7'&9:'!'prquwUkwSU %;/13 n7'5p :'xrLjfiSje!' % 8 < { w=Gqp'{&<>uq 8 @ < { @ @ % mM mMUk'ZSmM jlF&Zh % BASLjlSLjfiwjGSjGL% pQmM 'mk'?j,+3 jlUSm'UKSU)UZ % 3&UhUjlUkj/mMKmMk&SSjlk) SjfiSLw"&}lK&SSUjq 8 @ < { @ @C q s8 @ < { @ @ |o ' um/k'ZSmM jlFFQhL,j EUmMSm'&)o '% mMk'USmM jlFfi"8 SLju jfiD/>,j + jlUwm' 7'&F :'YSSmMG EZjl' / aYHn CxrU&Zhjlkfi&USj&YhUjfi&UMSm!'Sj!U&w&3LLjfi'Sm'Q&7Z SJm EkfiSm'e&hLjfi&ZmMQK'mmM#aHn Cxr/gLjfiSjfi&Sj,j +3&kSMSL' jhLjfi&USSj!UMmjlhmM,j + jlZSm'U)&L ' &)ZmMkwSLjUwjfiSjlFZmMSm jmMhLjfiwmM6ZMj&F >mM w&mM'> &# )whSLM SUSLjUS3kjlhULSjk'uZL jlSLjuUZm'W &q &UhQSLju jfi&k'UkfiMUSmM'U&KSLjUUmFLjuSZkwSjfi`&hLjfi&USfi&UhLjlZkj|anx!mM!SUjUUmMLj,j +3 jlUSm'&)' mMU&M&SLjUS3kjlhULwjSjfiSLwUg&MSj`m&Uh'ZmM < Q&/ 'uj < { @ @ % gUmMmMjlFZm6&Mjl>g SLj&kgSUON 143 n5p ' x& 'uj N % U&UhUjlUkj % /P143 n5p ' xrQSRUTfiVXWZY\[M]^Y`_aYbdce7fhgdi-jkc9gml,n\oprq#pMsut-vxwyv#z4{|r}mz~ ` wB8 dS&-z:k gc9g jhc9 prltK* z-8d 5-t^y~ w&v#fi^^y~ zvuop qraoawc9gbdg}9ecgdf dS&t i!e|r}m7 k g2 28FgdOijk |r 7|r}m~ XpralS&z k gc9g jhc9 prlggc9g jkc9qr5\lgdOioZa\#ldp#```#,l \#l lUop#o `#,l \#l9 l K lp q qq l#l4op l,nqrl p#oZ 7fi:p# q q)zPsu7uv5:{.oZ `Zo Lq l5lDop l,nqrl p5oZ ?p5` q q4z4suKv5K{x 9 lG Z oZ# oZ#lU,q#oZ oZ#lU,qpd#a 9 l5lU?:o suXlUoZqrlUhU{lU `prl4t ` top 5 LOp#p5`lq qq l#l:op l,nqrl p#o ?dp#` q q4z4suv5K{x4qOopprqr qr qrp q qop l,nqrl p#o 74suv5!{xvxw0xOl,nq l!#lUMl l q#p oZq l q#oZl, p#oZ pq q 5lo t\q q-o z ` `,q#o # oZq 2X l#lU ` q lyo `,q#oZq lUp#op. fF^su sH8 dS&zkr 54suv5K{xvu&op qraokDw{r{p pq qD fF^sH8 dSz4rP 5Pt-vuop qrao&w{7op l,nqrl p5oZ4suKv5K{ t!vxw0 z=:su v84suv5K{ t!vxwr{x 9 l#lUsu9lUoqrlUU{x*q l#l7op l,nqrl p5oZ L p#` q qXzP4su v5 {x9 l#l5lq l`#,l \5lD5lq#\ pu7oZ ` ` oZdq l#lKop l,nqrl p#oZ 7ut-vxwp#` q qXzP4suKv5K{x9 lqr ,q oZq #lUp# qop#l qrl qr:q lqr ,q oZq fi` l#l pr Dq l7p l4 p#pp Xp X lU !o su `qrl kU8{x^^J7*h kfiff ^9 l`5loZapp#lU,q#oZ #lUprqrxo,q#pqrq lyprlUo prl l#l&`5o5oZq#oZlUp #l prqr5o,qqrqX ll89!o prq ,lo #l`#lUp#l q#o yo l5oq ,l lq p)ql5o q l l q#pl q#p)pralq#olUp qr l !l sXo ,a lM{L`xoZ5oZq " Ol ,l7q lap#p5oZo oq9qr ,q lo l5l ,l oq lUp#p#lUprqrxo,qrl 5oZ5oZq#olUpopXo qrl#lUprq 9 l!,a l,n\oZq #lUp5 q#pX #lUp#qr5o,qrl `5o5oZq#oZlUp #lp5` 5ol l #o lo l oZl9p#lU,q#oZ p`5ll#l ,lUp)qrq l#lUKp 5laol %l $ 9 l#lUp# q#pdo q l4`#loZa`pdprlU,q#oZ p p l * p#lUp# q#pd q l,a l,noZq `q#oZa`p95l pr su \qrD l hU8{ oZ#lU,q Z q lo qr ,q ^o oZqp5prlUp)F#l pr oZq #oqr 5oZ5oZq#olUplU `p#lq l75l)q 5l prlUoprl)q l qrqrlU'& p#prlUp7 l q7q l5oZlUp q lKqr ,q ^o oZq \lUp#q#oZ #lU pl - #lq l7`5l#!l op#oZqr(l #ll x p#p#lUp ` q l x p#p oq oZqrl pd``#l5!l `op#oZqr(l #ll x ` q l5olUp oZq ) oZqrl `prlUp#l p# op!qr ,q l\qq l5lU p#prlUp 5lp#+ *oZl q l,n`#lUp#p#olqrl , l#ap#oZq#oZ ` p q#o-p , oZq q.0/1.fi24357698;:=<>@?AB3CEDGFH>I3FH>@?+>IJ:LK'MN:9COHPQ8?SRT3U>IV+WX1YIZ=[[\=]"^Q_1]Z=`QYIabacH_1\=dfe#_![zxz1z z=z!xzzX(\LgihY#_(jHe#alknmocH_!pqX1YrZ=`Q[_![eIptsuZvd_w \=dfpx;ylYIeIa_1dfZ=Yz)ylYIe#a_1d{Z=Y!7fi!-f!7}9}G}9!-!7fi!-f!7}9}G}9!-!7fi!-f!7}9}G}9!-!7fi!-f!7}9}G}9!-!7fi!-f!7}9}G}9!-!7fi!-f!7}9}G}9!-!7fi!-f!7}99i4-L(!7fi!-f!7}9}G}9!-!7fi!-f!7}9}G}9!-!7fi!-f!7}9}G}9!-!7fi!-f!7}9}G}9!-!7fi!-f!7}9}G}9!-!7fi!-f!7}9"~!7fi!-f!7}9"~^QeI[}|`QpX(ae#\Lp+y~]d_1_`QpQZvdfk^QeI[}|`QpX(ae#\Lp+y~]d_1_\=df^H_1d_!^\=df^H_1df_!^`QpQZvdk^QeI[}|`QpX(ae#\Lp+y~]d_1_pH\=dfgZ=Yw \=dfppH\=dfgZ=Yfi`QpQZvdkhQd_1df_!`Qer[e#a_(y~]d_1_hQd_1df_!`Qer[e#a_(y~]d_1_\=df^H_1d_!^hQd_1df_!`Qer[e#a_(y~]d_1_`QpQZvdkhQd_1df_!`Qer[e#a_(y~]d_1_\=df^H_1d_!^`pQZvdkhQd_1df_!`Qer[e#a_(y~]d_1_pH\=dfgZ=YhQd_1df_!`Qer[e#a_(y~]d_1_pH\=dfgZ=Yfi`pQZvdkhQd_1df_!`Qer[e#a_(y~]d_1_h\L[fe#ae#=_%pH\=dfgZ=Y`QpQZvdkZvY#_ 4 \LgihY#_(jHe#alkn\=]acH_X(\LpQ[_!`H_!pQX(_d_!YIZvae#\Lp moe#acqZvdfe#adfZvdkhQdfe#\=d{e#ae#_![d_1]_1df_!pQX(_w \=dfpx;ylYIe#a_1d{Z=Yzzzzzzzzzzzzzzz!xz!xX1YIZ=[[\=]"^Q_1]Z=`QYIabacH_1\=dfe#_![zxz1z z=z!xzz^QeI[}|`QpX(ae#\Lp+y~]d_1_`QpQZvdfk^QeI[}|`QpX(ae#\Lp+y~]d_1_\=df^H_1d_!^\=df^H_1df_!^`QpQZvdk^QeI[}|`QpX(ae#\Lp+y~]d_1_pH\=dfgZ=Yw \=dfppH\=dfgZ=Yfi`QpQZvdkhQd_1df_!`Qer[e#a_(y~]d_1_hQd_1df_!`Qer[e#a_(y~]d_1_\=df^H_1d_!^hQd_1df_!`Qer[e#a_(y~]d_1_`QpQZvdkhQd_1df_!`Qer[e#a_(y~]d_1_\=df^H_1d_!^`pQZvdkhQd_1df_!`Qer[e#a_(y~]d_1_pH\=dfgZ=YhQd_1df_!`Qer[e#a_(y~]d_1_pH\=dfgZ=Yfi`pQZvdkhQd_1df_!`Qer[e#a_(y~]d_1_h\L[fe#ae#=_%pH\=dfgZ=Y`QpQZvdk)z ylYIe#a_1dfZ=Yxz=zz=zz=zzzxzZvY#_ 7 _1]_1d_!pQX(_![oa\acH_1\=df_!g[b\LpqacH_X(\LgihY#_(jHe#alkn\=]o me#acqZvde#ad{ZvdkhQd{e#\=dfe#ae#_![a`Hdfp[\L`QaNacZvaacH_EadfZ=X(aZveIYIeIalk\=]4Y#_(jHeIX(\==dfZvhcQerXhQd{e#\=dfe#ae#1_!^'^H_1]}Z=`QY#aY#\=LeIXEX(\LeIpQX1er^H_![Nmoe#ac'acH_adfZ=X(aZverYIe#alk\=] _!e#a_1d![^Q_1]Z=`QYIaY#\=LerXt]\=dZ=YIY`HaE\LpH_X1YIZ=[[ cH_1df_tgZ!k[aeIYIY4_q^Qe@_1d_!pQX(_![eIp'acH_iX(\LgihYI_(j+e#ak\=]GacH_ieIp9ad{Z=X(aZvY#_X1YIZ=[[_![1]\=d_(jHZ=gihYI_ _!e#a_1d![%^H_1]}Z=`QY#aY#\=LeIXEX(\L`QYr^S_EeIpX(\vylNZ=p^Y#_(jHeIX(\==dfZvhcQerXhQdfe#\=dfeIae#1_!^q^H_1]}Z=`QY#aY#\=LeIXX(\L`YI^q_ {ylcQZvdf^ s_cZ!=_pQ\=aoZ=pQZ=Y#k1_!^acH_erp9adfZ=X(aZvY#_%X1YIZ=[[_![oeIpqgi\=d_^Q_1aZ=eIY0fio#H;QL0rQ!b{HS!@vfS-9(=@Hv)(}S{q"+(qB1!-l1-vvf=H{)-q9}1v+q-t+1v)"+(n }l(v !f')})}v(}vv9(=v1{%}l(vfiff()}{vBf%9v%vv=v}%=+);E-o vv!-1!"!#!$&%'(*)+%-,fi./%"10*$(324'5765'(6}S{8=B#1-#DC46 9E F!,*!GIHJ'(n LKL65'(M'57)N7,O'(6P%-,Q657RI07,*;<:9 *4;<#!$($(7;<'(,*76(6#!=>'(?!"!#!$&%'(*)@%-6A!6#!=/'(W!6(6&0*)YX*'(%#1,Z6#!=/'(WX*$(J[\%#10*6];J!6576 998S ,T7!;UV;J!653CF)N7GQ0*65W'(*3,J"1M'(%-#1,*6.#!$?'(P^Z$&6('A=B#10$86('(M'57)Y7,O'(6?'(PXZ$(##!=/%-6_%`!P'(X*$(#I#!=a#!=a*J#!$(7)cb 9 2!24!6d,#PX*$U%#!$&%'(%76/M$(4%-,O[!#1-[!7e 9gfI9/h=B#!$3!-A65'5$&%_;<'W'5#!'(!A#!$&eJ$&6t5K#!$&e*J$&%-,"wI[I%-#10*6(G!ot9uE6(0*;Uq'(ZM'sr#mCni pofI9 2 9%-6P%_,'(*M'<z\'57,*6(%#1,!,*e};<#1,*6(7R07,'(G%-,V!-/KX*$&J=J$($&7e*q<z\'57,*6(%-#1,*6 9N})Q9WI9PS ,{'(3$(7)N!%_,*%-,"v;J!65Y,#!'Fi Yi 9P'5#!'(!>#!$UeJ$&%-,"F#1,6(0*;U'(*M'r!,ZeVi Boj9dh!,*eT'(J$(J=B#!$(e#I76,#!'8;<#1,'(!%-,7,*;<7,*;<F'(J$(Y%-6?v6('5$&%-;<',uM$("10*)Y7,'86(%-)fi%--M$'5#N'(P#1,%-,y'(<z\'57,*6(%#1,QC8%'(Q'(t5K#!$&eJ$U%-,"X*$(J[\%#10*6?;J!65Y6(#mC86?'(*M'?'(J$(Y%-6?tKXZ$(J=J$&$(7ev#!w*'(!%-,x'(y0*,*%-RI0N<z\'57,*6(%#1,xC8%'(q'(wG{'(N!"!#!$&%-'(*)|"1%[!7,}%-,V./%"10*$(fi~y!,*eX*$(#m[!7,q;<#!$($&7;<'W%-,J#!$(7)%'%-6?;<#!$($(7;<'P'5#y$(J'(0$&,;<#1,'(!%-,*66(6(0Z)Y]'(*M'i Yi j9lk'(*M'7,*;<%-'%_6;<#!$($(7;<''5#fi$(J'(0$&,i1v1 9j9g*J$(J=#!$&P'(!"!#!$&%'(Z)$(J'(0$&,*6A'5$&0*%=!,*ey#1,ZGt%= %_6]%-,!-KX*$(J=BJ$($(7eZ<zI'57,Z6(%#1,*6]#!=9E-7M$&G!'(W!-"!#!$&%'(*)$&0Z,*6]%-,yX#1G\,#1)N%-!'(%-)Y 9%'(#10'X*$&%#!$U%'(%76JO;J!0*'(%#10*6d!,Zefiw*$U7[!?$(7!65#1,*%-,*"=#!$,#!$&)fi!Z0*,*M$&G3'(*J#!$&%76A!,*eQ2KL_%'5J$&!;J-!0*6(76?%_68'5$&!;<'(MwypW!0'5HN\7-)N!,27!\2D 9EY6(#DC'(*M'X*$U%#!$&%'(%768%-,*;<$(7!653'(3<zIXZ$(76K6(%[\%':Gt6(0\v;J%7,O'(-Gt'5#fi)fiM`!'(*%-6];J-!6&6%-,'5$&!;<'(MwZ90rff+ 91#1 -l))} '"+!+(tS}l(v f(#v =~ vY }!() (!l(Q{vH-y"+( v)i=+vn9(=@+=Uqv r)})} v)}v"v-(=9(v+@tvf!v1!-1xTX*$&##!=%-6fiwG$(7eZ0*;<'(%#1,=B$(#1)X*$(#!X#16(%'(%-#1,*!]6(M'(%-6^aMwZ%--%':Gx'5#x'(;<#1)YXZ7)Y7,'fi#!='({X*$(#!wZ-7) 9 J'TDm!J JJ( Ww{x65J'y#!=XZ$(#!X#16(%'(%#1,*!8;J-!0*6576y!,*es'({6(J'v#!=X*$(#!X#16(%-'(%#1,*!][MM$&%-MwZ-76Y#I;J;J0*$($&%-,"x%-,9 J'ywa{!,%_,7;<'(%-[!u=p0*,*;<'(%#1,'(ZM'v)NMX6fi7!;U;J-!0*6(vu'5#VQX*$(#!X#16(%'(%-#1,*!g[MM$&%-MwZ-fi'(J#!$(G}&L!,*eX*$&%-#!$&%'(%76W#1,p7W6&0*;&'(*M'F!6F%-,q'(*vXZ$(##!=8#!=8J#!$(7)b9V<^,v'(eJ=p!0*'9 2 fI9qET;J-!%-)'(*M''(W6(J'8#!=l;J-!0*6576c%_66(M'(%-6^aMwZ%=/!,*e#1,*-Gy%-=" (= !J'(*M'8%-6JZ'(J$(W%-64YKX*$(J=BJ$($(7eZ<z\'57,*6(%#1,#!= '(*M'te#I76fi,*#!'fi;<#1,O'(!%_B, 1v ! 9S ,'(uX*$&##!=?Cu$(J=J$t'5#q'(Q;<#1,*6(%-65'57,Z;<G#!=<z\'57,*6(%#1,*6#!=G}S{lC8Z%-;&t%-6gwIGN'(?;<#1,*6(%-65'57,Z;<GN#!=!,*efi'(?=B!;<''(*M'eJ=p!0*'(6d%_,*D[!(0*65'(%^;JM'(%-#1,*6h#!$(#1-_M$(GI9wGy7%'5J$327!~MO5 96(6&0*)Y'(*M't'(J$(T%-6Nq)Y#Ie*7]KX*$(J=BJ$($(7eZu<z\'57,*6(%#1,Q#!=6(0*;&u'(*M'6&0*;&'(ZM'fi1v1WQxb(9Eu6&#DC'(*M'N'(J$(Q%-6N:5Qv>5Z {b(>]}/ qb(>V>8V7 YN5pJ&?V FN5+p7& 9NS '%-6P65'5$&!%-"1O'5=B#!$(CM$&eV'5#[!J$&%=BG{'(*M'%-6P!,}<zI'57,*6&%#1,V#!=}&L 9fi J' w!,Gu65'5$&%-;<'4'5#!'(!/#!$&eJ$?#1, 6(0*;&Q'(*M'?r!,*eQ=#!$P!-gm!&DYr v?!,*e{!-dm!& DYr%-=gMX*XZ(3!,*e,#!'MX*XZ (3 9WE F6&#DC'(*M'%_64}S&L{5 K#!$&eJ$&%-,*"=#!$P 9 J'wF!,Gu<z\'57,*6(%-#1,Q#!=}&L?6&0*;&'(*M''(J$&F%_6v6(0*;U'(*M'PMX*XZ( ( F 9WE N6(#mC'(*M''(*J$(W%-6 6&0*;&'(ZM'8MX*XZ (( 9h 6(6(0*)N'(*M'?3 9k #mC=#!$?65#1)Y3-%'5J$&! !,Ze QW>!,*e Q 9] 7;J!0*653%-6];<#1,*6&%-65'57,'J9d 7,*;<WMX*Xji (( 9d Ge<^,*%-'(%#1,{i :979A J'4fiAdOm!}F-\-D1{?O(*(QaZ-\fffi fi fi "! #!fi $ %'&"&(*)+,+-. -. 0/ %2134 65 7% ! 85 fi #! :9ff-. <="5 '&"&(*)+>+-. -. / % / % 13; %4? "! #!fi @,+-.A-B+C .0E>+-..A-.B0fi fi F GH4 65 G%<J9 '&"&(*)K L / %<M134 65 Nfi '&&(*)+>+-. -. 0/ %21<O "! #!fi P Q5 Nfi '&"&(S)K L / %13UT "5; %R9-. V%'&"&(*)KA-.L-. / %1374 65 P%W! 85 fi #! :9X-. V'&"&(*)K+-BL-. / % / %<M13; %4? "! #!fi G+-BL-.CF>+-B -.8Y>[Z,\Z]_^F( '3(D@ `; %a9 '&&(*)K+-.L-. / % / % 1 b+-.c-..dI,[Z,\Z]?eX#fifi0fi E0[Z,\Zb! #! R!( '6fg[Z \Z ]T "5 '&&(*)0Z]+-hZ -iZ / % / % 13]4? "! #!Dfi @Z]+-hZ -iZ dRjZ \ZeH fifihfi f=Z]+-hZcA-hZcc! ! a!( 'f=Zc k:l'm+n:op3k l'm+n:o6]T 5 '&"&.(*)KjZcA\Zc / %< / %1 '&"&(*)Kq-iZcA-hZc / % / %@ 13H4ff! #!Dfi r+-hZ -hZ d@Z] k lmsn6o33k:l'm+n:o6((U : :0fi `dv! =w / xzy3/ Cf{*fi : ! "|}0fi7% ~%! Cf{! u&" ::# u #!Dfi 7fi_w / xzy)*18%! GCf{*&" ::# u #!Dfi fi"5k l'm+n:o ~; %aU Nfi\: ! fi 6(? "52 `fi 6( !D =%a9]0fi((. @ <@S /:::6/ `5:( ! Nfi < \8 fZ}Y)J6134 65 8k l'm+n:o; %a9 Nfi '&&(*)0Z k:l'm+n:op3k lmsn6o / %13P4 65 $-Bk:l'm+n:o@! Nfi @! 5 fi "5:( #!Dfi fi:"( ! G9LZc ; %a<4 65 Nfi '&"&.(*)K[ZcD\Zc / %2139h-iZc %R<T 5 '&&(*)0Z]+-hZc-hZc / %13"5 Z b%Rf4 65 %! 5 fi ! :9 '&&(S)JsZ,\Z / %21_fi fi / 2 : _ b@fi-. \KFP>9 7%aa <%; % 65 fi0fiz((Dfi\! N|Nh )J%Vr)J$-.i $X$* UX7-.* $1Jff-..M13H _! fi Nfi\% ! u #!Dfi Pfi?w / xzy ff4? :fi Os! `)J 6! :96'1 : E! u !Dfi%<.fi?w / xzy "5 _E)J%< / w PL / xzy 1F~fa)J%@ / w / xzy 13?fi\ '&"&(*)+>+-..D-.. / %@ / %1: @! Nfi"5'&"&(*) / % / % 1 \d>+-. -.0fi fi !M5 fi (>fi :"5 _CVda ! I5 fi "!5 <Cf{*&" ::##$fi]%R95 <! _5_; %a7T "5 RO "! #!Dfi ,KI7 9 5:( ' (D V%aT "5! #!Dfi P -.> : :fi E =H4 65"! Nfiz( ?0fi P5:( < r9" _?((*Nv(ZMfi}nYy!*N 1NJ!*5-1n!*!*7 <y1?((*N?(ZM4u!*u8 1YJ!*5y !n1Z -557}!Zq1J!Z5u-J!*5u*/!Zx7 <t !31* -(57O47 <!Zq1?((*N(*M?47- -!*-?((*NA(ZMd87 <?-] -31-?((*N8(*M87 <?g!*t1-N *!*5(v( B(7 I57Z 1-3Q>Jx47 <_{-!*5!*_t-VN&1* -557J!*5up( &y(ZMp-47 <15(}J-A7! v N((*M-!v I57*1(7**7(4 1N5< !(Z!*T7 <Z5(7J!*5( -g( (]!*u( B_* 14 (-V - 1&F?((*YY(ZMp<((*187 <Fj(71O U!_}!-N-4 tF|( UT(*M?@( &T(*M>J- !QNYVy((*MP 1Y(I* d!_u-!y \57* 1-& &x(*M? v(yJ!*5N !PJ!*(J!5t(*M&J!*5>(7!*u( (p\57* 1( Uq(ZMxp(7-fi/ !W( B_W\F!J!*5p!(pW?((*Yt(*M(*M3( ((-*-78!-!Z5UP(87 <?i`.>z>g*Sz*N"cXSGrL>ffX' :65 : !P)6z1! fi 5 V&" !Dfi ! #!D :"( r(Dfi|z!5 ! #! a!( ' fi4? :_ a)61f(Dfi|z!5' u! "5 fiX&" ::# u #!Dfi ! "fi | ' ! G| : (S920fi Nfi ( :"( ! ! : $ 6(! :fi "fi ( :"( :fi ! :9 75 fi &( uO{! fi' :65 : !X(Dfi|z!55 fiz! "5:! <! P5 fi a&( uN! `fi_4? :_ (Dfi|z!5'6(D|85 N)6z1&"#( #!Dfi ffi &" !fi ! #!D :"( :fi3! fi N&" !A{fi ! #! :"( :fi ! :9 #fiu #!Dfi Xfi"( #! "| :fi ! ?fi : &" !fi ! #! :6! #( #!fi b5 & :#0fi b! `&Bfiz( Nfi R! ( #! P4 5:5 'N ! (*r)6z1@&"P "fi( "| 2 :&"#!Dfi ( N| '|u E(fi|z!52&"#fi| ! U&"3!Dfi ! #! 69B5:( #!5 (:| #!Dfi 9 "! 0 "5 #!fi c :5:( !6 E #fi "! N|0fi 6!DI( N| '| <! ?! | : (7! Nfi "! J 5 #!Dfi $5:( #!M5 ( :| #!Dfi $! _! I&Lfiz(D Nfi a! ( #!{5 fi &(4? :_ UX! :2)6z1&"Nfi #!Dfi Ufih.oSk:o:3#o#Gl npffo 8n:o:0nF0fi uG(Dfi|z!5&"#fi| : 6!D "! #!Dfi "!D :#| 20#fi '3(! :2fffi#b!: }! fi (?fi : ! N|fi "( : 6` afi fi R&" ::#: :9 &" ::#:( !*(Z&**N3&N p!(( q!*U*](?&!**d!*J7t p!A(P &!* -M7 !1&1-J5W!*(Mfi!ZU!N1V(( B- J7n p!(7{ \57* 1Z!v(*M*-N-*7(7(7O8 &!* _M 1-7 3(ZM( \57* 1ZJ!(757(M 11M 1 *!* - (* <I* <xVU*!--O-(57 <&Y7_11*- -@(*M&7(- (- / -Y-5& !-!(J B&!N(7! 1 -J > 1M 1](--(7F!!7(Y(*!11717> 8ZN(7(757-(7-! 1* !\ 1_-!&_J!7* &- -Y4 \57*7_q(*M3 !7( B(7!* W5J !*\_!7* &lJ(757(3 ! 1*1q_7 (J7 p!(-! 1Z !3(ZM? \57**-( 1 - 5* < 1t!ZU7( (Nfi(}(-{ -1Z &!O5J7&N p!3(1(1x(*M_? !(u !(( B&*-(7V!Z 5J(fiDN\."zNU"@DF6< N#E087z6b"#3:6?"#ff:@#:#8NNP?#:_'$"ffD:@N\"'6#MNN76B:3"D}MD: FY?"#:0:##6Y"?:R:#a`"#3vfiff "' YN6YN7"6'#7#D} N:#6"6D#D''#Dz0R#O:NG"#:0:##6"?:8#:#@f"'86' D:< #8F" #D6fbDz# a<bbN:J"D<zNNff".O?@"3:D6hMN6#6O2"67 ff M:DD]HDz'6N" D3D#:6N:J"DDz:ff"'I'#fi6zPN#6a z"! #D""."D#DzR 6"#Dz"$#JFN:&%('z)""N:+*,+--.0/ ?#:_'1* ,+--324/65 '#:7%8>9+":&: O;* ,+--<= *6NFN>RN<D N '")_" D#:6N:J"DfDz2"#6UM@?O+ #z . ff :DA:@L2' '" 6r0zD\:CB:CDELGF$*" : :# 6 O6#DzYIHKJML!N8O2"QPSRUTWVYX=N:J"Da'P[\Z DRQN6]DFC^_*"#:0:##6P 6"#DzP`HKJba7cYPSRUTWVYXedL!N8Off IfFC^BP"'gFC^3hM#KJjiJ =lk FX?#:_'"mX:$N'P"r D#:6VN:J"DDz`6#Dz'6 Mn?+ #Dz . ODzM'6"" M:DDo'\ff::Y* ff 3:D&?INIDz'67OP:Dz#6DR#6M'67" D3D#:6PN:0DIDz"'#: 6'":'#zD$Nz4N: 6'p#Kq#N6r* ,+---= ":0"PSRUTWVYXMutwvKx+vyz vt7{|DSD~}k PWTH&N:#:0#DEENEr6N: ]"I:"'<D N 'N"."D#z""#:0:##6N6#?ffOz' ff :DD34'?::+*?AL6D:"'?#:"ffD:I?"N::#"6D6#g."IN".D#DzPi"#:0:##6 6"#Dz"& ":3D#Dfio B>:7J k cYR_"V LR4V36LR_W4VWdb"N k c3YdzB:L`}# P#N:8zJ !b"'R_"V RU1V3RU4V3RW4VW"RN:J"DEN:#QHKJL!N8O$"8?6"#Dz"+*DC k |6#cY6L!Yd = "D& k |6#c3W6L!Yd = g&NE O6#DzMDAN:06'#6RV E"RW4VW6*"D ": 6'#uRU1V3.X?+:"D N:06'#_NADN6I"3D DRN:J"D6R"V fDNO6_N*"zDD _u*"#:0:##6 6"#Dz7HKJL!N8O3L6D:`"'$MV aD*fff :_nXD:$?"~FD ]Lr"z"Du"#:0:##6$ O6" DzL+:"<"@z"D7 z1.) >L:?:6R1V3"RW1V*7N@fiRU1V3rC"D":6uKE:6aE"'E"IN6##Dz'A""Naa6"N?" #D6M:#6&N: _N:0D#]"'X' D6#HD#+ #D2N: D' D>"A"N:]H+0"""3D DoB> 3'"z'3z<z6>zN?6""4*:#@"'N3zNFEN,"Dz*YN,ff :_"uffD:i:6aFRDzN#E"u"DN:I DK67i"N#6# N?#:_'a"ffD:+j> z :N:#"N:N".D#Dz">"#:0:##62 6"#Dz*zDW "L?""#6#6O@N"#"" D#D6"'E" p"6"N6G#6"D#6Kff#6# #DzrUN:J"D#D: h"#: +"M#D6f"z:#Dz"FIa"*""> "M7BENz"<#I#+0"D "8"'RVrFA^RU^Vr^.&"6N::k ^ ff D3D#D6>"6U7 " '#NaN: D# EN:ff OR"3D D#:6N:J"DDzfK"."F +"#66u#Kq#N6r* ,+---=S4 ` ;e`"P#666}rN NY"D#8N7 zD NDbN :: Dz"2_" D#:6N:J"D>z *\zO"I#6"D#"'>M XN6?Dz:,ENffBzONzR "D: '!*"8"D06NN0N6#DzL # MD8: "]3 # D@0X# #):D2#6 6:#6]LN:J"DN: 6:"fR#6"#ff. fNE"#Lz#D#z"'' #FhN#:E6N: L0 aM6'#Dz"F,"D#:6N:0Df#6z""4*NRDz):$`?#:_'# ,+--32= "?":@"'z"N:p# ,+--.="'_'#u6z7N<#6a z"! #DEN"."#DzP, 6"#Dz*N"$0 a6'#z'6z7 3'"$ z'3zr*zNED\ff::6F,"LzDNzaM6": 'lsIN#,ffE0 a6'#Dz"o:Dz6D< 66u.Dff6!N:+*DhM,N]"#" NI"'iLzDNza#3+fi6Sw66p`4641Yfiw4f19 `+4&4+p+I4+9`!I+ W"1W&4& 914Io9 C9G~+9+Uu4KA I@I)+ r9+"4" "6 99G9++"4+"19+4p+69+9+U``I14I)4pK4`49 ""4 ;4)4+1o4A""4o4C4++Ig791w")+99"9++Y4$+ S`p0A49&0+IM+1YS1I+ w!4+w6+W4 +"+gM4u +9" ) w9!" )4u+ 9>W4u4+6+I m+` &974u4K&M4+4A `9" `"4&& &!9+S 9!69++94)ff1Up)ffg4Ifi&)4YUAf04W 44I+ 7!+4Kg+94p &+>"1)" $"6 9r14g1+79!" A+44u + M>4+&&44 9"r`+Ie&4 )9+r 4+ 9 M+$ )Y+r)GW4C+94C9!"&4+Q4I fiM$9! C]M4!+ 99!"!$#&%(')*,+.-/*102*(#4365)r+9+ !uge$ +A4 47 +419 8fi: $4e+!4u$64+C4;8<fi=8fib&WK4+AC4>1 >ff?9A@0CBfi+4!4; 04++!G! 9)G14Y&+44+44Cg4o)ffD>44E W +ul1+"A F99& &4+f+"I4p)g`fGA44C4>40I>G1g>449ICg7&H 1"$+99!"44 I@4+"+C9+ 9+`@0+"ffI0J +>"0+ 3 C"u7;+4KML=NOL=PAL/QCR1L/Sg4+ CTU4+7fi+9?! J !+Q4Kp 09+S4+A9+ 4f+6 Cu9Iwe WV1XZY1[]\W^Z_=XO`7abYHcXZd^9cfehgej^kGXZ\=l\,mnAooY!W pr q(I9s0gu+ +> v4u Fl$ Bwxt $ yz T|{$ / 4t z v4S+9 ?! }Wc[]Y=~cY1[O^9_XZdW_:eh9lc!09 4)r+1f S)A>TBfi+9+lA+9 I! BfiA+9)4S ab[]cl C~l^Z_r\Wcfe__l:m,eG\W~rezg !o 6q6 ? 11.{S+9 s! J +G44!+G @"19+4+o!`A4Kfi+344C [OX6~rehehgZl\,mZkXO`c1ewnn9cr\/cfeG[r\W^AclXZ\4^Z_>V1XZl\/cXZ\`e[je\W~]eXZ\ab[cl C~Gl^Z_4r\/cfeG__l:m,e\4~re"rZp6q6Z psBfi9/ Mu4 J 464!1{1+ p! >+9+6fi9$4Ke G )rA Dfi J + !"B/J +11 Fl S+!= zXjm9l~El\ a[]cl C~Gl^Z_/r\/cfeG__lm(e\W~]e[X~rerejgZl\,m9kXO`c1e/cfi:H"W=A1Or=jZZr6h1rA7& GHH(99<zjHj9;<jjWG<91O,<<:9=9,=$,(9Z 9j4/CHA<9=u/(/h<H9GGr<ZH;jGZ1 w:CU7<GCO99ArjGGjj9/CGGj91=H:9A/j99h9GOA=uEbw:1h(HGjG:1/Z/:jH4 E7/GrE]W 4ff,fiWj]ZZfijZZ=; O]h ZZ 1W rf]WZW ZffjW]fi!#"/=zH 6 &jH/j9% $9&9jA99H9= CH/<<hHGhG=GGZHjh(';:;$GAH9;E:*)=<<H>.O99Ar,+<.-j==j%/9 9hHGhfi<9A<0 j9jG9=1=jhj% /9Hj A=$Wu :z1r,=4GhG47W:u H=Z/:jHu4 .7/Grz]W1W2 ff(3fi WGGZ Z4fih9=O6rh ZZ 5 15/%6 r fGr4 9W9ffGGGWr4. fi 6!#""=/$ &j,H/ j9% $9&9jA9E9H9= 7HW<<jHGrGh=9=$C(8O9 r A/<<Hh9A=<HM<j9=ZAHw=jGG1/<,w=G9=<;:9AZ&Orr2ZZ 1:9; r f]W ZW 19 ZffjW]9< =CG r f . %,GWrGH=$$ " Z9>$A1?7Z/9u@&9jA9E9H9= 7HW<<jHGrG+b:9h9==97=&:;+b6<HHA';:19<<<G7H8EO9 rzz<=Zj<9:99r:j=97jj<HEj=jZj<O4Z/<<:B$9>=h94Ah:j:A=9C89h 9h/<Z9 19(]W b$9E29DEDw9F9&Ar 9A(j=Gh<H9Au+A >O9 rG'H9h9<%H<H=A=AH9A=j9A=H$1Gb# =;G r f JI%,4rK9&O6r (L C7jhZjM/9A<=3KWArW/Z9 9L((/9$w4:j9 E:wH=9:EwO Zj<GjZW:29= =:jrON jH A/<1:B$ 9A(/:P$RQ/6 =j9/<GS1T HZ1]W DWUAV;. r 1 1 (b#WuHGX8E:1 .ZhU7HO9 r A/=:j:A=91,j9<<Y0>=hHA<Hf;wZ==jA9rH7wHG9=:h9A=<HHC< =CG r f . %,GWrGZ;K. Ar Z (9b9j:9zb O9 r A/:H:P$ jj/:j9D4X 6 Z/\Ar9 L(=A=AH9A=:9A<G19(]W z2989jP$9?7H['C>O9 rb(A=:jj=G9h:9=A=AH9A=<=HGr:j9=97OZ=/ff$9C+Z[&2:8999G ?7H:u])9/=Au7=47=GrZ^Z_h$2A< =CG r f .(W]9$29DEDa`Z@DZW 9=bfijGZ=Z[dc&W]# Z4fih9=94A/(/$$99 <Zj==A 7jjGNb(9hu9HH9a8E: 1<9u bO916re8bZhrf . %,GWrG//.O]Ar (A (=j9/:9j</:HG9=:jHG9h:Gj,[&ffA >O9 rbHGr9<%HZj:A=9fNb=D4XfG4GWrG&Uh r.9 9(b< =Cj=EA%$1HA<9u=<GhZhh$95gz1j9ff rz<jr=:H91 zO9LAr A/=j<HwG:hG=hh:=j:A$$7AAj=1z7urW O]h ZZ H6rf]W ZW 1Z ZffjW]Z< =CG r f %,4r;=$ $A=9:G&9jA99H9= 7=/<<j=GhG&ZjGW4A: zh/ H# HY$G/j (&ff>O99Ark`Z@DZW6 Z= z29lGZ=9(=h<=9GGh<ZH=;Gh<up>qlrZ f 6 InmH[ ofijfisStuovw>xyz{|}t~EfUztUz{Xzlx6x~2U@w2{t[zXl22Uff] Y@32#%@2%6i O:U6UP6U6@2ff6UU< fffP#.J%YY<B6C6ff2(ff6Rff32YF#6@ UY 2%6a6U6@6U6E%6Ek< fYZPYii#<#llU%ffffPX[%?X6YVFff6:FRYffkffff226(2U1Sffn.6@@Uff@22%3Uffff52Yff}UYffoGoJSff2.M.U6U.aPY[ffYYYbaX<iXR 2EEi6X@l61S6@?Y3U(2ffffYff@ff%6k.GUY@%2ff6UUf# SY[PYi#<#6V<B6?XffG2UffVUoff4o % %2YffUYff363}Y2F%VVff #Fb%F%VY2ff% XX(f@YJU26k.R# SYXPYi%#[ffSff2..X@.X<U2> <fZ ffUaU[3ff#2U :Gffa22[YCffff@#@@l(fU6@@ @YFY UG2UffUff6VU# @ %%2%ffFUY@%f%6< fffUP#.#<#[6Z6X6Zoff6RY@2ff2ff2@M@Y.@2k%G26UYfiffffff@#ffG2 ff@@#ffkf@YJa ff<@ %PbaYCff%.XPY6[ffYYY.Y <5 b 2lB[#Y#n2Y@.V@?l: U22Y2YC26U3@4fU UY23?UffRURbUY@%2U#63%U%P,ff2.3E.X.bffff#2#<52ff26@UdUY@%R%6< fff?P#.#<#[@[66S6622 @Y2ff[26:U.5@4oU2UYYV?E:%(*2ffUfff@ff6S6 @#2!4UY@%E%6M@d2U#626UYiff %%ff6@UU4aff@3?Vo?Jf ff< iMR.X4.k< fY[P#.J%YYU@l6"%ff@X6@#ff$&%('XU6YlYYY4fiJournal Artificial Intelligence Research 9 (1998) 367-421Submitted 7/98; published 12/98Automatic Inference State Invariants TIMMaria FoxDerek Longmaria.fox@dur.ac.ukd.p.long@dur.ac.ukDepartment Computer ScienceUniversity Durham, UKAbstractplanning applied larger richer domains effort involved constructingdomain descriptions increases becomes significant burden human applicationdesigner. general planners applied successfully large complex domainsnecessary provide domain designer assistance building correctlyencoded domains. One way provide domain-independent techniquesextracting, domain description, knowledge implicit descriptionassist domain designers debugging domain descriptions. knowledgealso exploited improve performance planners: several researchers exploredpotential state invariants speeding performance domain-independentplanners. paper describe process state invariants extractedautomatically inferred type structure domain. techniquesdeveloped exploitation stan, Graphplan based planner employs state analysistechniques enhance performance.1. IntroductionStan (Long & Fox, press) domain-independent planner based constraintsatisfaction technology Graphplan (Blum & Furst, 1995). name derivedfact performs variety pre-processing analyses (STate ANalyses) domaindescription applied, assist planning eciently domain. Stantook part aips-98 planning competition, first international competitiondomain-independent planners compared terms performance well-knownbenchmark domains. four planners competed strips track, threebased Graphplan (Blum & Furst, 1995) architecture. important difference stan Graphplan-based planners use state analysistechniques. Although techniques not, stage, fully integratedplanning algorithm stan gave impressive performance determined examination competition results. description competition, objectivesresults, aips-98 planning competition FTP site (see Appendix A).One important analyses performed stan automatic inferencestate invariants. described paper, state invariants inferredtype structure domain automatically inferred, enriched, stan.techniques used completely independent planning architecture, isolatedpre-processing module call tim (Type Inference Module). Tim usedplanner, regardless whether based Graphplan underlyingc 1998 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.fiFox & Longarchitecture. Tim implemented c++ executables examples outputavailable web site (see Appendix A) Online Appendix 1.Tim takes domain description type information need supplied infersrich type structure functional relationships objects domain. typeinformation supplied tim exploit foundation type structureoften infer enriched type structure basis. State invariants extractedway inferred types partitioned. consequence domaindesigner relieved considerable overhead description domain. Whilsteasy hand-code types state invariants simple domains containing objectsrelations, becomes progressively dicult ensure cross-consistency handcoded invariants domains become increasingly complex. Similarly, exploitable typestructure domain may much richer easily provided hand.observed tim often infers unexpected type partitions increase discriminationtype structure provide corresponding benefits stan's performance. thereforesee tim domain engineering tool, helping shift burden domain designhuman automatic system.usefulness types state invariants well-documented. Typesprovided hand since first observed reduce number operator instantiations considered traversal planner's search space.elimination meaningless instantiations particularly helpful system Graphplan, structure traversed explicitly constructed prior search.believe benefits obtained type inference planning similarobtained programing language design: type inference powerful type checkingassist identification semantic errors specification relationalstructure domain. Indeed, found tim useful domain debuggingtool, allowing us identify aws published benchmark domains. also usedtim reveal underlying structure Mystery domain, disguised transportationproblem domain, used planning competition. Mystery domain describedAppendix C.2.use domain knowledge significantly improve performance planners,shown number researchers. Gerevini Schubert (1996a, 1996b) considered automatic inference state constraints demonstrated significantempirical advantage obtained use. Kautz Selman (1998) handcoded invariants provided part domain description used Blackbox.demonstrate performance advantages obtained acknowledge importanceinferring invariants automatically. McCluskey Porteous (1997) also demonstrated important role hand-coded state invariants play domain compilationecient planning. Earlier work Kelleher Cohn (1992) Morris Feldman(1989) explores automatic generation restricted invariant forms. discussthese, other, related approaches section 5.paper describe type inference process employed tim explainfour different forms state invariant extracted inferred type structure.argue tim correct since never infers sentences state invariants.provide experimental results demonstrating performance advantagesobtained use types.368fiAutomatic Inference State Invariantsdriveunfuelled 1fuelled1drive1load11unloadFigure 1: simple transportation domain seen collection FSMs.2. Type Inference ModuleOne way viewing strips (Fikes & Nilsson, 1971) domains collection finite-statemachines (FSMs) domain constants traversing states within them. example,simple transportation domain rockets packages, rockets capablelocations moving, driving, one locationanother, fuelled unfuelled, moving two states.seen forming one-node FSM, fuelled unfuelled forming two-node FSM.view depicted Figure 1.369fiFox & LongPackages locations rockets, move statesresulting two-node FSM. example, rockets states involveone FSM, since fuelled, unfuelled. STRIPS domainsseen way earlier work (McCluskey & Porteous, 1997; Grant, 1996),discussed Section 5.2.1 Types TIMtwo objects participate identical FSMs functionally equivalentseen type. notion type similar sorts workMcCluskey Porteous (1997). primary objective tim module automaticallyidentify equivalence classes form primitive types domain descriptioninfer hierarchical type structure domain basis primitive types.way done discussed Section 2.3. primitive types functional equivalenceclasses, objects domain partitioned classes. identifiedtypes domain objects tim infers types parameters operators.State invariants inferred final stage.early parts process rely three key abstract data types, property space,attribute space transition rule. Formal definitions componentsprovided Section 2.3, provide informal descriptions support followingdefinitions. Transition rules represent state transformations comprise FSMstraversed objects domain. Property spaces FSMs, together objectsparticipate them, properties objects transition rulesacquire properties. Attribute spaces contain collections objectshave, acquire, associated attributes. Attributes differ propertiesacquired, lost, without associated loss, acquisition (respectively),another attribute. Attribute spaces also contain transition rules enableacquisition (or loss) attributes. state attribute spacesconstructed assign types domain objects according membershipproperty attribute spaces. two objects belong identical propertyattribute spaces assigned type. therefore important ensureproperty attribute spaces adequately discriminating, otherwise importanttype distinctions lost. Much subtlety algorithm described Section 2.2concerned maintaining adequate discrimination construction spaces.present following definitions support informal characterisationroles types strips tim. definitions used Sections 2.4 2.6,discuss types assigned objects operator parameters.Definition 1 type vector bit vector bit corresponds membership,otherwise, unique state attribute space. number bits vector alwaysequal number distinct state attribute spaces.Definition 2 type set domain objects associated type vector.Definition 3 type vector, V1, two distinct bits, si sj , set correspondssub-type type associated vector, V2, si set (all settings370fiAutomatic Inference State Invariantsequal). type associated V2 seen super-type typeassociated V1 .Definition 4 type structure hierarchy types organised sub-type relationshipscomponent types.Definition 5 type structure adequately discriminating objects assignedstate (and attribute) spaces characterize state transitions (and attributes).Definition 6 type structure under-discriminating fails distinguish typesfunctionally distinct.Definition 7 type structure over-discriminating functionally identical objectsassigned different types.two distinct ways types play role specification domain.restrict set possible operator instances eliminatemeaningless domain hence improve eciency reducing size searchspace, eliminate unsound plans could constructedprovided. following examples clarify difference two roles.untyped schema:drive(X,Y,Z)Pre:Add:Del:at(X,Y), fuelled(X), location(Z)at(X,Z), unfuelled(X)at(X,Y), fuelled(X)permits instances typed schema:drive(X,Y,Z)params:Pre:Add:Del:X:rocket,Y:package,Z:locationat(X,Y), fuelled(X), location(Z)at(X,Z), unfuelled(X)at(X,Y), fuelled(X)meaningless instances eliminated search preconditionssatisfiable. hand, typed schema:y(X,Y,Z)params:Pre:Add:Del:X:aircraft,Y,Z:locationat(X,Y)at(X,Z)at(X,Y)ensures aircraft own, whilst untyped schema:371fiFox & Longy(X,Y,Z)Pre:Add:Del:at(X,Y)at(X,Z)at(X,Y)allows ying means travel object location, including packages,objects, well aircraft. Tim capable automatically inferring typesplaying restrictive role indicated typed drive operator. However, tim cannot infertype information implicit domain description. Thus, given untyped flyschema, grounds tim infer type restrictions. Tim draw attentionunintended under-discrimination making packages aircraft indistinguishabletype level, unless distinguishing information provided schemas.least tim make explicit fact packages amongst objectsy. assists domain designer tracking errors omissions domaindescription, unstated intended distinctions cannot enforced tim.2.2 Overview TIM AlgorithmFigure 2 gives broad outline tim algorithm. detailed description givenAppendix B. role component algorithm described, togethercommentary discussing related issues justifications, Sections 2.3, 2.4 2.7.Broadly, tim begins analysis domain operators, extracting transition rulesform foundations property attribute spaces described previously.rules used separate properties equivalence classes propertyattribute spaces constructed. Tim analyses initial state order assigndomain objects appropriate spaces. analysis also identifies initial propertiesindividual objects uses form states objects property spaces.initial states property space extended application transition rulesspace form complete sets states accounting states objectsproperty space possibly inhabit. described Section 2.4, attribute spacesbehave like FSMs, property spaces do, extension carrieddifferent procedure: one add new objects spaces, rather new states.Tim assigns types objects using pattern membership spacesconstructed. Finally, tim uses spaces determine invariants govern behaviourdomain objects it.2.3 Constructing Transition Rulesbegin describing process transition rules constructed.following definitions required.Definition 8 property predicate subscripted number 1 aritypredicate. Every predicate arity n defines n properties.Definition 9 transition rule expression form:property ) property ! property372fiAutomatic Inference State InvariantsConstruct base PRSs (Section 2.3)Split PRSs (Section 2.3)Construct transition rules (Section 2.3)Seed property attribute spaces (Section 2.3)Assign transition rules (Section 2.4)Analyse initial state (Section 2.4)Extend property spaces (Section 2.4)Extend attribute spaces (Section 2.4)Identify types (Section 2.6)Construct invariants (Section 2.7)Figure 2: Outline tim algorithm.three components bags zero properties called enablers, startfinish, respectively.double arrow, ), read enables single arrow, !, read transitionfrom. So:E)S!Fread: E enables transition F. properties given resulttransition. properties F acquired result transition. propertiesE given up.enablers empty write:start ! finishstart empty write:Transition rule 1enablers ) null ! finishfinish empty write:Transition rule 2enablers ) start ! nullbag null empty bag properties. role emphasise that, transitionrule 1, nothing given result transition and, transition rule 2, nothingacquired. Rules null start null finish discarded describenull transitions.property bags contain one element separated commas.collection:pk ; qm ; ::: rn373fiFox & Longinterpreted mean properties collection satisfiedmany times appear collection. comma therefore used separateelements bag. use denote bag union, denote bag difference,denotebag intersection v denote bag inclusion.Definition 10 Property Relating Structure (PRS) triple bags properties.first stage algorithm constructs set transition rules set operatorschemas. operator schema analysed respect parameter turn and,parameter, PRS built. first bag properties formed preconditionsschema, number used form property argument positionparameter considered. example, precondition on(X; ),parameter considered X , property formed on1 . bag, called precs,contains enablers used formation transition rules. secondbag, called deleted precs, properties formed preconditions appeardelete list schema (with respect parameter). third bag, calledadd elements, contains properties formed add list schema.PRS contains deleted elements component { assumed every elementdelete list strips operator appears precondition list. reasonablerestriction given strips operators allow use conditional effects.assumed every pair atoms delete list schema distinctlegal instantiations schema. constitute significant restriction sinceoperator schemas always easily rephrased whenever condition violated.consider process PRSs constructed. Given schema:drive(X,Y,Z)Pre:Add:Del:at(X,Y), fuelled(X), location(Z)at(X,Z), unfuelled(X)at(X,Y), fuelled(X)considering parameter X , following PRS built:PRS 1precs :at1 ; fuelled1deleted precs : at1 ; fuelled1add elements : at1 ; unfuelled1considering parameter obtain:PRS 2precs :at2deleted precs : at2add elements :considering parameter Z obtain:374fiAutomatic Inference State InvariantsPRS 3precs :location1deleted precs :add elements : at2constructing structures identifying state transformationsobjects, instantiating operator parameters, progress. Note objects instantiate X go fuelled somewhere unfuelled somewhere; objectsinstantiate lose property anything gain nothing result application operator, objects instantiate Z continue locationsgain property something them. convert structurestransition rules order correctly capture state transformations.standard formula construction rules PRSs is:precs deleted precs ) deleted precs ! add elementsThus, using PRS 1 above, could build rule:at1 ; fuelled1 ! at1 ; unfuelled1potential problem rule causes at1 fuelled1 linked statetransformations, at1 fuelled1 become associated property spaceand, consequence, objects places, cannot fuelled, mayindistinguishable objects require fuelling moved. fact,wish transition rules express fact fuelled enables things goone place another place, whilst excluding possibilitymay enablers transition.therefore begin second phase PRS construction identifying, special treatment, PRSs property appears deleted precs add elements.property exchanged application operator. is, relationcontinues hold identified argument object objects (notnecessarily object objects application operator). example, PRS 1, vehicle new location application operator,longer old location. observe vehicle must fuelled make transition. separate transition condition split PRS. Splitting identifiesexchanged properties PRS creates one new PRS exchange oneunexchanged properties. Therefore, splitting PRS always results k + 1(and least k) new PRSs, k number exchanges PRS represents.splitting PRS 1 construct two new PRSs: one characterizing exchangeproperty, one characterising fuelled unfuelled transition.first new PRSs is:PRS 4precs :at1 ; fuelled1deleted precs : at1add elements : at1375fiFox & Longrulefuelled1 ) at1 ! at1constructed. noted property fuelled longer seenpart state transformation enabler, appeardeleted precs bag resulting PRS.second new PRS captures fact at1 seen enablertransition fuelled1 unfuelled1:PRS 5precs :at1 ; fuelled1deleted precs : fuelled1add elements : unfuelled1PRS splits required since properties exchangedit. general example follows:PRS 6precs :p1; p2 pndeleted precs : p1 pi pi+k pmadd elements : p1 pi q1 qkPRSs would constructed deal exchanged pairsfinal PRS, PRS 7, would constructed describe remainder transition making+ 1 PRSs total.PRS 7precs :p1 ; p2 pndeleted precs : pi+k pmadd elements : q1 qkneed consider additional pairings add delete-list elements, sincewould correspond exchanges properties. splitting process justified Section 3.1. standard rule construction formula applied PRS 5, yieldingruleat1 ) fuelled1 ! unfuelled1observed that, even add elements bag contains multiple properties,single rule always built standard construction formula applied.considering remaining PRSs, 2 3, observed containempty field: 2 add elements field empty 3 deleted precs field empty.PRS empty field special treatment required. PRS 2 buildruleat2 ! nullrepresent fact object instantiates gives propertysomething it, gains nothing return. 3 build rulelocation1 ) null ! at2376fiAutomatic Inference State Invariantsrepresent fact object instantiates Z gains property something virtue location, gives nothing return. rulessomewhat different status ones characterize exchange properties.cases properties lost gained, without exchange, seen resourcesaccumulated spent domain objects rather statesdomain objects pass. example, location acquire property something it, without relinquishing anything return, whereas object requires fuelbecome fuelled relinquishing property unfuelled, vice versa.Increasing decreasing resources identified attributes distinguishedstates. distinction later prove important, since generation truestate invariants depends upon made correctly. Properties increasedecrease without exchange invariant, false assertions would proposedinvariants treated way state-valued properties.rule form constructed PRS 3 must constructed separately everyproperty add elements bag properties must individually characterized increasing resources. Rules constructed using null distinguished attributetransition rules. null left side ! rule increasing attributetransition rule. null right hand side rule decreasing attributetransition rule.final case consider rule construction case PRS emptyprecs field. happens parameter, respect PRS constructed,appear preconditions operator schema. case setrules constructed, one property, a, add elements bag, formnull !ecting fact increasing resource (the deleted precs field necessarilyalso empty case).Definition 11 state bag properties.necessary distinguish bag set, square brackets used denotebag.Definition 12 property space tuple four components: set properties, settransition rules, set states set domain constants.Definition 13 attribute space tuple three components: set properties, settransition rules set domain constants.helpful observe state attribute spaces represent disjoint collections properties, disjoint collections formed transitionrules putting start finish properties rule collection.example, given two rules:E1 ) [p1; p2; p3] ! [q1 ; q2]E2 ) [r1; r2] ! [s1 ]377fiFox & Longcollections [p1; p2; p3; q1; q2] [r1; r2; s1] would formed. property appearsstart finish rules single collection formed two rules.last stage rule construction phase identify basis constructionproperty attribute spaces. done uniting left right hand sidesrules. Uniting forms collections properties seed unique property attributespace. yet possible decide seeds form attribute spaces,treatment kinds space identical stage. enablers rulesignored process. wish make enablers automatically fallproperty spaces states transformations enable. could resultincorrect assignment properties property attribute spaces since enablersfacilitate, participate in, state transformations. output phasecollection rules, properties marked attributes, property space seedsformed uniting process. properties remain unassigned stageused seed separate attribute spaces, one property.role played second phase PRS construction postpone commitmentuniting collections properties possibility objects,properties, associated different property spaces left open longpossible. may consideration schemas provides enough informationpossibility eliminated, following abstract example, supportmuch type discrimination possible earlier phases analysis. considersimple example illustrate problem.2.3.1 Postponing Property Space AmalgamationGiven domain description containing following operator schema:op1(X,Y,Z)Pre:Add:Del:p(X,Y), q(X,Y)p(X,Z), q(X,Z)p(X,Y), q(X,Y)PRS:precs :p1 ; q1deleted precs : p1 ; q1add elements : p1; q1constructed, first phase, X . properties p1 q1 boundtogether PRS, resulting rule would be:p1; q1 ! p1 ; q1forces objects property p1 occupy property space objectsproperty q1 . Since PRS models exchange p1 split it,replace two new PRSs:precs :p1 ; q1deleted precs : p1add elements : p1378fiAutomatic Inference State Invariantsprecs :p1 ; q1deleted precs : q1add elements : q1consider pairings p1 q1 , since found PRSsoperator schemas domain allows them. two PRSs generated leadgeneration rules:q1 ) p1 ! p1p1 ) q1 ! q1two rules indicate p1 q1 used form different property spaces sincecould, principle, independent one another. objects assigned twospaces turn distinct types. However, add following two schemas:op2(X,Y)Pre:Add:Del:op3(X,Y,Z)q(X,Y)p(X,Y)q(X,Y)Pre:Add:Del:p(X,Y)q(X,Y)p(X,Y)generate, X , PRSs:precs :q1deleted precs : q1add elements : p1precs :p1deleted precs : p1add elements : q1rules:q1 ! p1p1 ! q1indicating p1 q1 united set hence form single propertyspace, objects properties really type.uniting overrides potential separate property spaces formed but, absencetwo schemas, would insucient information available determinenature relationship two properties.379fiFox & Long2.4 Constructing Property Spaces Synthesising Typesobjective stage construct type structure domain identifyingdomain objects distinct property spaces. Objects appear one propertyspace, giving us basis deriving hierarchical type structure.first part process involves completing seeded property spaces. firsttask associate transition rules appropriate property space seeds.easily done picking arbitrary property start finish component ruleidentifying property space seed property belongs. neverambiguity every property belongs one seed uniting ensuresproperties referred rule belong seed. point distinctionstates attributes becomes important. property space seedattribute transition rule associated becomes attribute space dealtdifferently property spaces certain respects explained below.next step identify domain objects associated property spaceattribute space.object referred initial state construct type vector bitset corresponding space inhabited object. object inhabitone space. Habitation checked identifying properties hold,initial state, object considered allocating states, ratherproperties, appropriate state attribute spaces. every domain objectconsidered unique type identifier associated different bit patterns.next task populate property spaces states. following definitionsrequired support explanation process.Definition 14 world-state collection propositions characterising configurationobjects given planning domain description.Definition 15 Given world-state, W , property space, P = (Ps; TRs; Ss; Os),attribute space, P = (Ps; TRs; Os), object 2 Os, P -projection Stbag properties, possessed W , belongs Ps.collection properties object, o, initial state divided setbags properties, bag corresponding P -projection initial state o,property attribute space P . bag added state set correspondingproperty space, discarded corresponding space attribute space. needextend spaces by, property space, adding states inferredreachable objects within space along transitions within space. doneevery state space, including states newly added process,new states reachable. ordering properties within states irrelevant,two states considered equal contain properties, regardless ordering(they considered order-equivalent). Since, come use informationparts process invariant generation, require knowledge inclusionrelations pairs states, convenient mark stage. additionreachable states important inference state invariants, usediscussed Section 2.7. attribute spaces receive different treatment point.380fiAutomatic Inference State Invariantsimportant difference observe that, since property spaces characterize exchangeproperties, objects property space must start initial state membersproperty space. However, since attributes acquired without exchange,possible objects particular attributes initial state acquireattributes later. possible attribute space increasing attributetransition rule associated it. now, therefore, consider attribute space seewhether objects added application corresponding increasing rule.object added attribute space potentiates enablersincreasing rule attribute space. object potentiates enabling propertymember state attribute space property belongs. Membershipspaces indicates object could enter state satisfiesenabling properties, would justify application increasing rule.enabling property associated state attribute space static condition,initial state checked confirm property true objectconsidered.complication arises enabling property used seed attribute space(in case attribute), necessary identifyobjects attribute space consider addition current attribute space.course could, principle, initiate loop process avoid markingattribute spaces considered ensuring, iterating convergence,attribute spaces loop completely assigned. correctness partprocedure discussed Section 3.done state attribute spaces complete typesdomain objects extracted. completeness construction phase discussedSection 3.1.2.5 Worked Examplefully worked example stages process help clarify involved.Consider simplified version Rocket domain two operator schemas:drive(X,Y,Z)Pre:Add:Del:load(X,Y,Z)at(X,Y), fuelled(X), location(Z)at(X,Z), unfuelled(X)at(X,Y), fuelled(X)Pre:at(X,Y), at(Z,Y)Add:in(X,Z)Del:at(X,Y)initial state containing four constants: rocket, package, London Paris,relations: at(rocket,Paris), fuelled(rocket) at(package,London). observedsimplified Rocket domain rather odd feature load schemarestricted loading packages rockets. oddity highlighted analysisconstructed, showing analysis performed tim help understanding(and debugging) behaviour domain. drive operator schema followingPRSs constructed variables X , Z respectively:381fiFox & Longprecs:at1 , fuelled1deleted precs: at1 , fuelled1add elements: at1 , unfuelled1precs:at2deleted precs: at2add elements:precs:location1deleted precs:add elements: at2load operator schema following PRSs constructed variables X ,Z respectively:precs:at1deleted precs: at1add elements: in1precs:at2 , at2deleted precs: at2add elements:precs:at1deleted precs:add elements: in2following rules built. first PRS generates first two rules subsequentPRSs generate one rule.fuelled1 ) at1 ! at1at1 ) fuelled1 ! unfuelled1at2 ! nulllocation1 ) null ! at2at1 ! in1at2 ) at2 ! nullat1 ) null ! in2construct following united sets properties:fat1; in1gffuelled1; unfuelled1gfat2gfin2g382fiAutomatic Inference State Invariantsused seed property spaces. first associate rules propertyspace seeds, resulting following assignment:fat1; in1gat1 ! in1 ; fuelled1 ) at1 ! at1ffuelled1; unfuelled1g at1 ) fuelled1 ! unfuelled1fat2glocation1 ) null ! at2 ; at2 ) at2 ! null;at2 ! nullfin2gat1 ) null ! in2last two spaces converted attribute spaces associationattribute transition rules. resulting spaces supplemented domainconstants legal states. first identify subset legal statesdomain objects identifiable initial state. use goal stateprovide information properties objects. goal state mightunachievable objects cannot obtain required properties. would invalidatetim's analysis domain. initial state rocket properties at1 fuelled1,package property at1 , London property at2 Paris property at2 . Usinginformation associate domain constants developing state attributespaces obtain:fat1; in1gat1 ! in1; fuelled1 ) at1 ! at1frocket; packagegffuelled1; unfuelled1g at1 ) fuelled1 ! unfuelled1frocketgfat2glocation1 ) null ! at2 ; at2 ) at2 ! null; fLondon; Parisgat2 ! nullfin2gat1 ) null ! in2next step add legal states objects, identifiable far,property spaces. results following structures, first twoextended inference (as explained) completed property spaces. lasttwo extended completed attribute spaces addition objectspotentially acquire associated attributes (also described below).fat1; in1gat1 ! in1; fuelled1 ) at1 ! at1ffuelled1; unfuelled1g at1 ) fuelled1 ! unfuelled1fat2gfin2gfrocket; packageg[at1 ]frocketg[fuelled1]location1 ) null ! at2 ; at2 ) at2 ! null; fLondon; Parisgat2 ! nullat1 ) null ! in2last stage construction two property spaces add statesinferred reachable, via transition rules, objects property spaces.example, packages go at1 in1, application rule at1 ! in1,since rule available property space package belongs, at1one legal states property space, add in1 legal state.general, construct extension by, state space, identifying applicablerules and, rule, creating new state removing properties start383fiFox & Longrule adding properties finish rule. done statesorder-equivalent already generated. enablers rules ignored,consequence new states generated might unreachable.process completed current example finished property spaces follows:Property space 1fat1; in1g at1 ! in1; fuelled1 ) at1 ! at1 frocket; packageg[at1]; [in1]Property space 2ffuelled1; unfuelled1g at1 ) fuelled1 ! unfuelled1 frocketg[fuelled1 ]; [unfuelled1 ]consider attribute space turn add domain objects (not alreadymembers) potentiate increasing rules. new domain objects addedfirst attribute space since London Paris potentiate increasing rule,already present. However, second attribute space consideredobserved rocket package potentiate increasing rule thereforeadded new members. resulting attribute spaces are:fat2g location1 ) null ! at2; at2 ) at2 ! null; fLondon; Parisgat2 ! nullfin2g at1 ) null ! in2frocket; packagegoddity load operator revealed stage, since package rocketassigned members in2 attribute space (meaningattribute things them).number distinct bit patterns constructed, indicating object membershipstate attribute spaces, determines number distinct types existdomain. Hence, simplified encoding Rocket domain, three distincttypes. rocket type [1101], package type [1001] Paris Londontype [0010]. types given abstract identifiers, T0; T1 T2, mightmeaningfully interpreted types of: movable object requiring fuel, movable objectlocation respectively. expected, London Paris type location, whilstpackage type movable object rocket type movable object requiring fuel,sub-type movable object.distinction made state attribute spaces exploitedprocess inferring state invariants, discussed Section 2.7.2.6 Assignment Types Operator ParametersTypes assigned parameters operators following way. Givenoperator schema collection property spaces attribute spaces allocate typevector variables schema. membership state attributespaces properties given variable recorded setting appropriate bitsvector variable. properties appear preconditions384fiAutomatic Inference State Invariantsschema considered, object satisfy preconditions operatorproperties represented postconditions therefore right typeinstantiation operator. type associated vector unionsub-types taken. union type assigned variable. domainobject, type sub-type type associated variable,used instantiate variable. see process works, consider variable Xdrive schema above. precondition properties X are: at1 , fuelled1.members two property spaces 1 2. Therefore, type vector associated X[1100]. observed type vector associated rocket [1101],type rocket sub-type type X . sub-type, unionsub-types contains T0, type rocket. means X instantiatedrocket, domain constant, since domain constant typeappropriate sub-type relation. type operator parameters introduce new typevariables, Tk ::Tn unused values k n, k number existing typesn k plus number variables schema considered. type vectorvariable [0010] Z type vector location staticrelation Z appear argument predicate preconditions.Z therefore acquires type London Paris, two objectslocation true initial state. T4 super-type T2. taking unionssub-types specify drive schema following way:drive(X,Y,Z)Params:X:T0 Y:T2 Z:T2Pre:at(X,Y), fuelled(X), location(Z)Add:at(X,Z), unfuelled(X)Del:at(X,Y), fuelled(X)stan exploits sub-typing relations inferred constructing instances drive operator. variable appears schema appearpreconditions instantiated objects type. domaindescription contains basis inferring type restrictions case. variableappear delete list without appearing precondition list, since assumedelete list elements appear preconditions. variable would occuradd list. would mean that, regardless properties holding object usedinstantiate variable, initial state, acquire add list property freely.Since acquisition would occur irrespective type object, variablesessentially polymorphic.2.7 Inference State Invariantsfinal phase computation tim inference state invariantsproperty spaces. attribute spaces used inference invariants:incorrect invariants would proposed tim attribute spaces inadvertantly used.explains importance identifying attribute spaces earlier stagesalgorithm.current version tim capable inferring four kinds invariant, threeinferred property spaces (identity invariants, state membership invariants385fiFox & Longinvariants characterizing uniqueness state membership) one inferredoperator schemas initial state directly (fixed resource invariants). simplifiedRocket domain, considered above, example identity invariant is:8x : Tk :8y:8z:(at(x; y) ^ at(x; z) ! x = z)state membership invariant is:8x : Tk:(9y : Tn:at(x; y) _ 9y : Tm:in(x; y))uniqueness invariant is:8x : Tk ::(9y : Tn:at(x; y) ^ 9y : Tm:in(x; y))infer identity invariants property space considered turn, respectproperties states. property, example Pk P arity n > 1, occursstate invariant following form, z vectorscontaining n , 1 values, constructed:8x:8y:8z:(P (y1::k,1; x; yk::n,1) ^ P (z1::k,1; x; zk::n,1) ! = z)form invariant generalised deal case> 1 occurrences Pk state space. case build followingexpression, assumed k = 1, simplicity.8x:8y1:::ym:(P (x; y1) ^ ::: ^ P (x; ym) ! (y1 = y2 _ y1 = y3 _ ::: _ ym,1 = ym ))state membership invariants form:8x:(Disjunct1 _ :: _ Disjunctn)disjunct constructed single state. Thus, property space contains kstates k disjuncts invariant constructed property space.one state membership invariant constructed property space.Given collection states property space first identify supersetsstates collection. supersets discarded, since invariants wouldbuilt would logically equivalent built subset states.remaining state used build single disjunct. state considered containssingle property, Pk P arity n, expression9y:P (y1::k,1; x; yk::n,1)constructed. course, n = 1 existential quantifier disjunctP (x). state contains one property, say denoted P 1 ::P ,build (again, assuming k = 1 simplicity):9y1 :::ym:(P 1(x; y1) ^ P 2(x; y2) ^ ::: ^ P (x; ym))uniqueness invariants constructed similar way. property spacebegin analysing superset states identify non-exclusive pairs subset states.386fiAutomatic Inference State Invariantsexample, given subset states fat1 g fin1g superset state fat1 ; in1g,observed two subset states mutually exclusive since at1 in1simultaneously held. done analysis identified mutually exclusive pairsstates mark subset states unusable generation invariants. remainingstates considered possible pairings. every pair states, P; Q, generateinvariant following form assuming, simplicity, x first positionP 1 ::P n Q1 ::Qm. form invariant easily generalised, before.8x::(9y1:::yn:(P 1(x; y1) ^ P 2(x; y2) ^ ::: ^ P n (x; yn))^(9y1:::ym:(Q1(x; y1) ^ Q2(x; y2) ^ ::: ^ Qm (x; ym))))fourth kind invariant inferred structure operator schemaswithout reference property spaces domain type structure. call invariantsfixed resource invariants since capture physical limitations domain. Fixedresource invariants cannot inferred state attribute spaces describe properties domain rather objects within it. following schemaGripper domain provides example fixed resource invariants distinguishedthree kinds:move(X,Y)Pre:Add:Del:robot(X), room(Y)robot(Y)robot(X)PRSs would built operator are:precs :robot1deleted precs : robot1add elements :precs :room1deleted precs :add elements : robot1rules constructed are:robot1 ! nullroom1 ) null ! robot1observed rules attribute transition rules robot1attribute rather state-valued. means invariants first three kindsdiscussed would constructed.reason lack invariants first three forms encodingrobot embedded predicate, robot cannot participate directly state transitions.obvious invariant robot, would naturally true domain,387fiFox & Longrobot always exactly one room cannot inferred using techniques fardescribed. fact, axiom world, domain, rather specific objectswithin it, obtained information state transformationsobjects.seen operator schemas Gripper domain robot1 balanced. is, always deleted whenever added added whenever deleted.means number occurrences robot initial state determinesnumber occurrences possible subsequent state. leads construction, domain, invariantjfx : robot(x)gj = 1since one robot relation initial state. form fixed resourceinvariants always equational. invariant states size set combinations objects satisfying certain predicate equal (or, cases, less equal)certain positive integer. integer large convenientwrite equation would write logical expression. information encodedfixed resource invariants useful identifying unsolvable goal sets without attempting plan them. example, ICPARC version three-blocks Blocksworld (Liatsos & Richards, 1997), three table positions, mustalways exactly three clear surfaces. goal specifying three clear relationships identified unachievable fixed-resource invariants domain.fixed-resource uniqueness invariants produced tim seen providingform multi-mutex relations, contrast binary mutex relations inferredconstruction plan graph Graphplan-based planners (Blum & Furst, 1995). Binarymutex relations indicate two actions facts mutually incompatible, whilst multimutex relations indicate larger groups actions facts collectively incompatible.Binary mutex relations, preventing fact true one object holdingtwo different objects simultaneously, extracted identity invariantstim infers. Multi-mutex relations powerful binary ones. Stan detectunsolvable goal-sets using fixed-resource uniqueness invariants evenbinary mutex relations corresponding level indicate problem exists.infer invariants examine predicates language see whetherexchanged add delete lists operator schemas. predicateexchanged equally schemas (it always appears number times addlist delete list schema) predicate corresponds fixed resource.single schema upsets balance predicate treated fixed. Givenfixed resource predicate, inferred never combinationsobjects satisfying predicate initial state. slightlyodd encoding rocket world considered paper, location fixed resource.fixed equally exchanged load schema. Examples fixedresource invariants inferred various standard domains provided Appendix C.certain circumstances necessary infer weaker invariantjfx : P (x)gj k388fiAutomatic Inference State Invariantspositive integer k. P holds multiple objects initial statepossible subsequent state transformations, attribute acquisitions, result statestwo instances P collapse one. P holds multiply often initialstate (or reachable state) necessary build invariant usinginstead =. P state-valued, multiple instances never occur stateproperty space, safe assert equality construction invariant.Automatic inference first three kinds invariants relies constructionproperty spaces discussed Section 2.4. discussed, distinctionstate attribute spaces critical inference correct invariants. However,using techniques described far, tim would lose information couldconstruct useful invariants. give example could occur considerfollowing simple encoding standard Blocks world:move(X,Y,Z)Pre:Add:Del:on(X,Y), clear(X), clear(Z)on(X,Z), clear(Y), clear(table)on(X,Y), clear(Z)operator, used Bundy et al. (1980), add list element clear(table) makesreference constant. operator schema submitted analysiscurrent form PRS would built constant, rules would constructed,hence state attribute spaces constructed, would fail record fact everyapplication move results state table clear. resulting analysiswould result incorrect invariants types. Grant (1996) identifies versionmove operator awed, need maintain state correctness additioninvariant clear(table) add list. However, analyse schema correctlyfirst abstract remove constant, yielding following new schema:move(X,Y,Z,T)Pre:Add:Del:on(X,Y), clear(X), clear(Z), table(T)on(X,Z), clear(Y), clear(T)on(X,Y), clear(Z)Now, given initial state blockC blockA blockB table,add proposition table(table) (so new precondition satisfied)property attribute spaces constructed follows:fon1gclear1 ) on1 ! on1fblockA; blockB; blockC g[on1 ]fon2; clear1g on2 ! clear1; clear1 ! on2; fblockA; blockB; blockC; tablegtable1 ) null ! clear1second attribute space, invariant extraction algorithmapplied it. Consequently, invariants infer characterizepositions blocks (every block exactly one surface). pity,information available attribute space could yield useful extra invariants.particular, would like infer invariant every block either clear389fiFox & Longsomething it, cannot clear something it. reasoncannot infer invariant would asserted hold every objectattribute space, including table, even though actually true table (thetable things still clear).2.7.1 Sub-space Analysis Property Attribute Spacessolution problem loss invariants decompose property attributespace contains k > 1 object types k sub-spaces. property sub-space structurally identical property space. Attribute sub-spaces identified used,invariants obtained them. Property sub-spaces obtained analysis attribute spaces, following example show. reason distinguishingsub-spaces property attribute spaces properties partitionedsub-spaces property attribute spaces. original propertyattribute space discarded sub-spaces used determining typesobjects. role sub-space analysis enable construction additionalinvariants.consider Blocks domain described previous section examplebenefits sub-space analysis. point invariant construction typesdomain objects identified property attribute space membership,table already known different type blocks. tablemember property space on1 . Therefore, two sub-spaces constructedattribute space, one type [11], blocks, one type [01],tables. sub-spaces constructed property space containsone type object. rules associated sub-spaces rulesoriginal attribute space enabled objects appropriate type. secondtwo sub-spaces attribute sub-space inclusion increasingattribute transition rule. stage two sub-spaces follows:fon2; clear1g on2 ! clear1; clear1 ! on2fblockA; blockB; blockC gfon2; clear1g table1 ) null ! clear1; on2 ! clear1; ftablegclear1 ! on2attribute sub-space used invariant construction containsattribute transition rule would result incorrect invariants (as case attributespaces), nothing gained developing further. However, statesub-space completed addition states associated objectsspace, initial state extension. resulting sub-spaces are:fon2; clear1g on2 ! clear1; clear1 ! on2fblockA; blockB; blockC g[on2 ]; [clear1]fon2; clear1g table1 ) null ! clear1; on2 ! clear1; ftablegclear1 ! on2new state sub-space infer following invariants, using type nameBlock stand type vector [11]. infer identity invariant:8x : Block (8y 8z (on(y; x) ^ on(z; x) ! = z))390fiAutomatic Inference State Invariantsstate membership invariant:8x : Block (9y : Block on(y; x) _ clear(x))unique state invariant:8x : Block :(9y : Block (on(y; x) ^ clear(x)))Although additional invariant, table always clear, cannot inferpresent.2.8 Problem Mixed Spaceshappen encoding domain conceals presence attributes withinschemas point property space extension occurs. preventproperty space extension process terminating. example, simple lightswitch domain contains following two schemas:switchon(X)Pre:Add:Del:switchoff(X)Pre:Add:Del:off(X)on(X), touched(X)off(X)on(X)off(X), touched(X)on(X)initial state switchA on. Two PRSs constructed:precs :off1deleted precs : off1add elements : on1 ; touched1precs :on1deleted precs : on1add elements : off1 ; touched1giving rise two rules:off1 ! on1 ; touched1on1 ! off1; touched1Uniting seeds one property space containing three properties. additionrules property space follows:fon1; off1; touched1g off1 ! on1; touched1; fswitchAgon1 ! off1 ; touched1 [on1 ]391fiFox & Longpoint extension space problem arises. following statesadded: [off1; touched1], [on1; touched1; touched1 ], [off1; touched1; touched1; touched1 ]on. cannot simply avoid adding properties already state extended two, apparently identical, properties might general refer differentarguments.problem due fact touched1 actually increasing attributebecome apparent PRSs. consequence mixed spacesconstructed. mixed space property space containing hidden attributes. Tim detectshidden attributes checking, extension, new state contains state alreadygenerated initial state starting point. Thus, extension mixed spaceabove, tim would detect hidden attribute state [on1 ; touched1; touched1]constructed, state contains state [on1 ] initiated extension.detected hidden attribute two possibilities: either tim convertmixed space attribute space, case invariants constructed,attempt identify attribute split mixed space attribute spaceproperty space containing state-valued components mixed space. takeoption split state. allows us infer invariants concerning state-valuedproperties.tim takes difference including included states and, distinctproperty difference, processes rules cutting rule containing propertytwo rules, least one attribute rule. following methodused cut rules. following, attr+ indicates one occurrencesattribute-valued property comma overloaded mean bag conjunctionbag union. rule form:enablers ) start ! adds; attr+two new rules forms:enablers; start ) null ! attr+rule form:enablers ) start ! addsenablers ) attr+ ; precs ! addstwo new rules forms:enablers; precs ) attr ! nullenablers; attr ) precs ! addsrule cutting separates attribute-valued properties state-valued properties.pure attribute property spaces constructed. However discardoriginal mixed space used determining type structure392fiAutomatic Inference State Invariantsdomain. additional type information could extracted stateattribute spaces built following analysis currently exploited.analysis applied lightswitch domain, following new propertyspace attribute space built:fon1; off1g off1 ! on1; on1 ! off1fswitchAg[on1 ]; [off1]ftouched1g off1 ) null ! touched1; on1 ) null ! touched1 fswitchAgUsing Lightswitch stand type [11], following state membership invariantconstructed property space:8x : Lightswitch (on(x) _ off(x))tim also constructs uniqueness invariant:8x : Lightswitch :(on(x) ^ off(x))3. Properties TIMcorrectness tim relies constructing necessarily true invariants. demonstration true invariants constructed guarantees construction adequately discriminating type structure. cannot guarantee under-discriminationargue over-discrimination occur type structures generatedtim. properties defined Section 2.1.Over-discrimination would result distinguishing functionally identical objectstype level. would occur tim placed objects participate identicalstate transitions different property spaces but, underlying partitioningproperties property spaces, cannot happen. Further, membership differentproperty spaces requires distinguishing state transformations,functionally identical objects. Flawed assignment (assigning objectproperty space without corresponding state transformations), simply seenerroneous, rather over-discrimination. possibility occurringexcluded property attribute space construction extension showncorrect Section 3.1.failure detect type differences (under-discrimination) domain resultweak invariants, over-discrimination, could occur, would lead over-targetedinvariants would still true, subset objects oughtcover. Flawed assignment would clearly lead construction false invariants. Underdiscrimination, arise, therefore affects completeness state-invariantinference procedure. also lead over-generalisation operators since typesassigned operator parameters equally under-discriminating. enable meaningless instances formed, needlessly increasing size search spacemust explored planner. clearly raises eciency issuesundermine formal properties planner exploits tim.observed, consequence under-discrimination construction weak (butvalid) invariants. following example illustrates under-discrimination occur.Given schema:393fiFox & Longop(X,Y)Pre:Add:Del:initial statep(X,Y)q(X,Y)p(X,Y)p(a; c); p(b; c); q(b; d)hold, following two property spaces constructed:fp1; q1g p1 ! q1 fa; bg[p1]; [q1]; [p1; q1 ]; [q1; q1 ]fp2; q2g p2 ! q2 fc; dg[q2 ]; [p2; p2 ]; [q2; p2 ]; [q2; q2 ]Given property spaces impossible distinguish b c d, eventhough analysis operator schema initial state reveal functionally distinctb c d. seen that, although must always exchange p1 q1 ,b p1 q1 simultaneously. similar observation made cd. However, process invariants constructed cannot gain accessinformation. identity invariant constructed first property space is:8x : 8y 8z 8u (q(x; y) ^ q(x; z) ^ q(x; u) ! = z _ = u _ z = u)invariant weaker ideal, participate one q relation (bparticipate two simultaneously). state membership invariant property spaceis:8x : ((9y : T1 p(x; y)) _ 9y : T1 q(x; y))understates case b, p1 q1 simultaneously. uniquestate invariant constructed property space, p1 q1 mutuallyexclusive.3.1 Correctness Completeness Transition Rule Construction Phasecorrectness algorithm used tim depends two elements. Firstly, propertyspaces identified algorithm must correctly populated. is, objectsassigned property spaces belong every achievable state mustincluded appropriate property space. Secondly, property spaces mustsupport generation correct invariants. second element examined Section 3.2.interesting relationship exists states property space invariants generated space. Incorrect invariants contructed property spacemissing achievable states. state membership invariants assertobject property space must one states property space. statesmissing invariant false. prove achievable statesappropriate property space.Theorem 1 Given initial state, , collection operator schemas, O, property space,P = (Ps; TRs; Ss; Os), generated tim applied O, state, St,394fiAutomatic Inference State Invariantsreachable application valid linearised plan formed ground instancesoperator schemas O, 2 Os, P -projection St o, StoP , Ss.Proof:proof induction length plan yields state St. basecase plan contains operator instances St = . P -projectionSs, definition first phase property space construction process describedSection 2.4.Suppose St generated plan length k + 1, last step penultimatestate pre-St. Let P -projection pre-St pre-StoP . inductive hypothesis,state Ss. affect state o, P -projection Stpre-StoP , therefore Ss trivially. Otherwise, consider operator schema,Op 2 O, formed. described Section 2.7, constants appear Opvariables body Op parameters Op. Let initial collection PRSsconstructed Op, parameters instantiated creation a,set PRS1 :::PRSn every PRSi form:precs :Pideleted precs : Diadd elements : Aiinitial collection collection formed prior splitting.value ith PRS lead construction k + 1 transition rules,k size bag intersection, Xi , Di Ai . k rulesfollowing form:8c 2 Xi (Pi fcg ) c ! c)remaining rule form:Pi (Di Xi ) ) (Di Xi) ! (Ai Xi )refer latter rule PRSi ith complex rule. subset n complexrules contain property Ps either start finish will, therefore,relevant transition pre-St St. observed complexrules (PRS1 :::PRSm without loss generality) must P uniting processdescribed 2.3.define pres(a)oP P -projection preconditions o. Similarly,adds(a)oP dels(a)oP defined P -projections add delete listsrespectively. construction PRSs, defined Section 3.1,= PiMmadds(a)oP = AiMmdels(a)oP = Dipres(a)oP111395fiFox & Longrestriction delete lists must subset preconditions,fact applicable pre-St, follows dels(a)oP v pres(a)oP v pre-StoP . Sincev represents bag inclusion seen separate bags Di includedpre-StoP without overlap.extension process involves iterated application rules explainedSection 2.4 indicated pseudo-code algorithm presented Appendix B.rule applicable state start must included state. Thereforecomplex rules applicable, regardless sequence application, pre-StoP .follows state(pre-StoPMm (Di Xi)) Mm (Ai Xi)11generated extension process. definition Xi , fact Di v pre-StoP ,state written as:(pre-StoPMm Di) Ai1which, observed above, just:(pre-StoP dels(a)oP ) adds(a)oPequals StoP standard semantics operator application strips.2proof demonstrates splitting, discussed 2.3, result generationinvalid invariants. However, splitting compromise completeness invariantgeneration process. result inclusion unreachable states property spaces,consequence identity state membership invariants generatedweaker would otherwise case. discussed Section 3.2.explain role splitting PRS construction phases. domainobject strips domain associated finite automaton states consistproperties (for example, at1 ) have, either initially result applicationarbitrary length sequence operators. Objects observedtype identical automata property level. PRSs capture waysoperator applications modify configurations individual objects henceprovide encoding automata.PRSs built two phases. first phase, parametersschemas considered, possible object state transitions captured. However,transitions conceal functional distinctions inherent domain descriptionwould lead premature amalgamation property spaces, observeddiscussion Rocket domain Section 2.5. example observed usestandard formula construction rules PRSs alone would resultfailure detect type distinction rockets packages.second phase assists type inference processes avoiding under-discriminationdistinguishing enablers state transformation properties exchanged396fiAutomatic Inference State Invariantstransformation. PRS characterizing exchange k properties splitform k + 1 new PRSs. PRSs 4 5, given Section 2.3, show twoPRSs constructed single PRS containing single exchanged property.simple example, one split required remove exchanges. general mightnecessary split repeatedly exchanges removed, shown example givenPRS 6 Section 2.3. non-exchange combinations properties deleted precsadd elements considered splitting. resulting PRSs leadconstruction transition rules allow generic state transformations, movementone location another, separated specific nature objectsmake transformations.observed rules result splitting process generalrules would obtained PRS prior splitting.distinguish precisely properties take part state transitionsproperties simply enable transitions, allowing finer type distinctionsinferred basis functionalities objects domain. Finer distinctionsmade process seeding property attribute spaces uniting.uniting merges, single equivalence classes, properties appearstart finish rule.argue state transformations accounted end secondphase. result second phase automata formed first phaseseparated collections simpler automata possible, transitionslost finer grained encoding possible transitions madeobjects appropriate properties. PRSs constructed phase supportconstruction rules allow objects making transitions occupy different propertyspaces. second phase PRSs may under-constraining, senseanalysis subsequent schemas might eliminate possibilities keeping open,example 2.3.1, set PRSs obtained end second phase cannotover-constraining first phase PRSs considered splitting.subtlety concerns consequence, type level, assigning two functionallydistinct objects state attribute space. example, example 2.5, rocketpackage assigned property space fin1; at1 g attribute spacefin2g. However, rocket fuelled unfuelled, package cannot,distinction emerges property attribute membership vectorsassociated rocket package objects. Membership additional property spaceffuelled1; unfuelled1g means rocket assigned type sub-type typepackage functional distinctness rocket package recognised. discussed,oddity encoding results package assigned membershipfin2g attribute space. Furthermore, at1 in1 united, effectrockets make at1 ! in1 transition used instantiate variables typemovable object, even variables type intended instantiatedpackage. nothing domain description prevent interpretation.conventional encoding load schema would prevent rocket loadedobject, would cause refinement type structure wouldidentify loadable objects, would prohibit use rocket forming instancesoperators restricted operating objects.397fiFox & Longconstruction transition rules follows simple rule whereby undeleted preconditions used enable transformation state deleted preconditionsPRS hold one added elements PRS hold. Given assumptiondeleted atoms operator schema must appear preconditions schema,rules correctly characterize strips-style state transformations. possible transformations captured second phase PRS construction. complete setcorrect transition rules therefore constructed.Given correctness completeness transition rule construction phase, correctinitial allocation objects spaces depends simply correctly checking membershipinitial properties object property sets, formed uniting rules,used seed spaces. Extension property spaces done straightforwardapplication transition rules, configurations properties occupiedobjects property space added end extension phase.Extension attribute spaces unproblematic cases potential enablerattribute. one is, process attribute space enablercompleted could, appears, initiate loop attribute space extension process.fact, happen tim able detect loop occurred avoidrepeatedly iterating it.following example illustrates problem way solved tim. Supposethree attribute spaces:Attribute space 1fq1g p1 ) null ! q1 fa; bgAttribute space 2fr1g q1 ) null ! r1 fcgAttribute space 3fp1g r1 ) null ! p1 fdgspaces extended addition objects potentiate increasing rules,discussed Section 2.4. problem arises enablers rules states,attributes, extension attribute space 1 enabler, p1 , attribute.attribute space p1 yet extended, necessary completespace using complete 1. Extension 3 requires extension 2,reason, requires extension 1 requires extension 3, on.way tim avoids re-entering loop marking space, considered,seen iteration. marked space encountered extendedused already complete. second iteration required extendspaces still require completion. Subsequent iterations requiredprocess converges. experiments suggest unusualtwo iterations required. worst case upper bound As, numberdomain constants number attribute spaces (which limited numberproperties), hence quadratic size domain description.398fiAutomatic Inference State Invariantsextension process starts attribute space 1, example, attributespace 1 marked seen first iteration. Tim goesextend space 3 extension space 1 depends upon space 3 complete.Space 3 marked seen iteration space 2 considered. Space 2marked space 1 revisited. space 1 marked tim infers loopentered. objects added space 2 without extension objects space 2added space 3. Finally, objects space 3 added space 1first iteration complete.fq1g p1 ) null ! q1 fa; bg [ fc; dgfr1g q1 ) null ! r1 fcg [ fa; bgfp1g r1 ) null ! p1 fdg [ fc; a; bgHowever, space 2 yet complete, second iteration required. iterationstarts place first process repeated, exceptiterations required example.3.2 Correctness State Invariantsargue correctness invariant inference procedure consideringfour kinds invariant turn. following arguments rely upon correctly distinguishing property spaces attribute spaces, since invariant analysis cannotperformed attribute spaces. scope confusing distinction extension mixed spaces, extract attributes mixed spaces checking inclusionexisting states new states generated extension. process discussedSection 2.8.Definition 16 Given property space P = (Ps; TRs; Ss; Os), Ss partitionedthree disjoint sets: Sssubs Sssups contain states Ss included(as bags) include (as bags), respectively, least one state Ss Ssindcontains independent states Ss neither Sssubs Sssups .Theorem 2 Given property space P = (Ps; TRs; Ss; Os), set states Ssunion three disjoint sets states Ssind , Sssubs Sssups , object, o,Os following families invariants hold:1. identity invariants;2. state membership invariants;3. unique state invariants.defined Section 3.2.Proof:address kind invariant turn. Theorem 1 every object Os muststate Ss. Furthermore, states object Os, respect propertyPs, Ss. follows properties partitioned spaces399fiFox & Longseeding process. Therefore, maximum number occurrences propertyp Ps, possessed object Os state world, boundedmaximum number instances property state Ss (these maximum valuesmight equal since Ss contain inaccessible states). identity invariants simplyexpress bound properties objects Os.Every object Os must state Ssind [Sssubs . follows definitionsets Definition 16 Theorem 1. state membership invariants assertevery object Os must least one states, disjunct invariantcorresponding assertion membership one states.argue correctness unique state invariants, observe proposedinvariants would false paired states mutually exclusive.case, either state extension process would put properties could simultaneously held bag, properties would simultaneously heldinitial state hence would appear bag initial construction propertyspace. either case, state exist property space supersetnon-exclusive states. However, uniqueness invariants generated pairs statesdrawn Ssind [ Sssups non-exclusive pairs states leadgeneration incorrect invariants.2fixed resource invariants always associated particular predicate. atomsbuilt predicate balanced add delete lists operatorschemas number occurrences atoms initial state fixedsubsequent states. invariant expresses. invariant constructedevery predicate forms balanced atoms.Since new techniques required infer invariants sub-spaces,argument required support correctness invariants formed following sub-spaceanalysis.Although Theorem 2 demonstrates correctness invariants inferred timpossible weak invariants inferred presence unreachable states Ss.Weak identity invariants inferred unreachable state generated, extension,containing instances property contained reachable state.happens identity invariant generated weaker would ideal,still valid. Further, property space contains unreachable states causeinclusion additional false disjuncts state membership invariants, sincefalse disjuncts exclude satisfying assignments presence invalidateinvariants. Unreachable states cause additional tautologous uniqueness invariantsgenerated affect strength invariants refer reachable states.Clearly cannot hope identify unreachable states, analysis wouldhard planning itself.invariants generated attribute spaces tim cannot claimedcomplete. Sub-space analysis rectifies extent identifying property spacesexist within attribute spaces allowing invariants generated.analysis could refined.400fiAutomatic Inference State Invariants3.3 Effects TIM Properties PlannerTim sound, planner uses tim danger losing soundness result.Tim certainly complete domain axioms invariant propertieskinds cannot extracted current version. example, Kautz Selman(1998) identify optimality conditions simplifying assumptions amongst differentkinds axioms might inferred domain. optimality conditionLogistics domain might be: package returned locationremoved from. simplifying assumption domain might be: truckloaded immediately move (assuming necessary loads done parallel).constraints require deeper analysis domain currently performedtim, intend characterise infer future work.cannot guarantee type structure inferred tim always fully discriminating, although guarantee over-discriminating. However, failuretim's part infer structure inferred impactcompleteness planner using tim because, cases, tim return unstructureddomain planner therefore default reasoning unstructured domainnecessary.4. Experimental Resultsexamination tim's performance carried several dimensions. considerthree specific dimensions here: viability analysis typical benchmark domains;scalability analysis utility performing analysis prior planning.general performance standard benchmark problems provides indication scaleoverhead involved using tim preprocessing tool. experiments performedLinux 300MHz PC 128 Mb RAM. Figure 3 shows that, even largeproblem instances, overhead entirely acceptable. Mystery problems listedtable large (involving initial states containing hundreds facts) couldsolved stan, ipp (Koehler, Nebel, & Dimopoulos, 1997) Blackbox (Kautz &Selman, 1998) aips-98 competition. nature Mystery domain describedAppendix C. emphasises relative costs preprocessing planning efforts.selection problems used construct table 3 justified follows. Blocksworld used representative example three encodings suppliedpddl release. are: simple encoding (prob12), att encoding (prob18)snlp encoding (prob23). Hanoi set contains collection reasonably sized problems.representative group relatively large Mystery instances chosen pddlrelease. two Tyre world instances two strips instances availablerelease. three Logistics problems three largest simple strips encodingincluded pddl release.second dimension scalability analysis. analytic examinationalgorithm determine upper bound performance polynomialkey domain problem components, including number operator schemas, numberliterals operators, numbers objects facts initial state numberarities predicates language. Figure 4 shows performance tim roughlyquadratic size problem specification. graph, size crudely equated401fiFox & LongDomain problemBlocksprob12.pddlprob18.pddlprob23.pddlHanoi3-disc4-disc5-disc6-disc7-discMysteryprob060.pddlprob061.pddlprob062.pddlprob063.pddlprob064.pddlTyre-World prob01.pddlprob02.pddlLogisticsprob04.pddlprob05.pddlprob06.pddlParse time23222334174826112156444Analysis time0111111215823772122222Output time Total25271547474849411943291601074827105228362837512612613Figure 3: Table showing tim's performance milliseconds standard domains problems. timings elapsed times minor discrepancies totals ariserounding.402fiAutomatic Inference State InvariantsTim Analysis Mystery Domain12000100008000Millisecs 6000400020000010000 20000 30000 40000 50000 60000 70000 80000Size fileFigure 4: Graph showing tim's performance Mystery problems, plotting timesize (in characters) problem file. solid line plot quadratic function.number characters specification file. graph constructed runningtim strips Mystery domain problems pddl release. increasingsizes problem specifications ect increases various categoriesobjects domain corresponding facts describe initial states.Figure 5 shows effect tim's performance number operator schemasincreases. graph constructed using artificial domain new operatorcauses two new state transitions described two new literals. Thus, numberoperators number properties increasing whilst number objects stays constant.domain described detail Appendix E. graph indicates linear growthcost analysis.final dimension evaluating tim effect exploitation outputplanner. Gerevini Schubert (1998) Kautz Selman (1998) provide convincingevidence supporting powerful role state invariants enhancing performanceSAT-based planning. Figure 6 demonstrate power inferred types showingadvantage stan tim obtains stan without tim untyped Rocket domainproblems. Figure 6 shows effect performance increasing number packagestransported. time taken stan tim grows linearly, whilst stan withouttim follows cubic curve. p packages problem instance stan timconstructs 4(p +1) operator instances stan without tim constructs (p +3)2(p +5)+2pinstances. demonstrates type information significant factoradvantage depicted graph. Figure 7 demonstrates similar improvementobtained Logistics domain. graph series sub-problems considered403fiFox & Long7065605550Millisecs 454035302520Tim Performance Increasing Number Operators303233433333336810Number operators33312331416Figure 5: Graph showing consequences increasing number schemas inferrable property spaces.Effect Tim Performance Stan120003STAN without TIM 3STAN TIM +1000080003Millisecs6000400033333333333333+ + ++ + + + ++ + + + ++ ++ 3+++ 30 320000510152025Number packages303540Figure 6: Graph showing comparison stan stan without tim Rocketdomain problems generated Rocket domain provided Appendix D.404fiAutomatic Inference State InvariantsEffect Tim Performance Stan1200010000STAN without TIMSTAN TIM8000Millisecs600040002000011.522.533.5Number sub-problems44.55Figure 7: Graph showing comparison stan stan without tim Logisticsdomain problems.sub-problem involves independent transportation single packagetwo cities.simple domains, overhead carrying analysis outweighadvantages offered. example, Movie domain used competition stan gainedbenefits using tim paid overhead detriment performanceinstances domain. However, general observe benefits analysisincrease increasing complexity domains.5. Related WorkAlthough importance state invariants ecient planning observedrelatively little work automatic inference invariants. published workclosely resembles research described paper state constraint inferencesystem discoplan, Gerevini Schubert (1998). Discoplan enables inferencesv-constraints correspond subset identity invariants. reasondiscoplan restricted subset generates sv-constraints pairs literals(one addlist schema delete list) argumentsvary one place. Tim infer identity invariants vectors arguments vary,shown Section 2.7. Discoplan cannot currently infer singly varying constraints(although techniques described Gerevini Schubert (1996a) yet fullyimplemented discoplan). example, discoplan cannot infer blocks405fiFox & Longone surface, analysis Blocks world domain cited paper. Timinfer invariants sub-space analysis.Gerevini Schubert (1996a, 1996b) also examined potential inferringparameter domains similar operator parameter types inferred tim.domains inferred iterative process accretion similar attributespace extension process tim. However, accretion process describe synthetic,parameter domains synthesised directly operator descriptionsinitial state. Tim analytic system constructs types analysis functional properties domain objects. analytic approach provides rich informationsource structures, including domain invariants, derived.implicative constraints inferred discoplan correspond implicittype assignment would arise type structure built tim. implicativeconstraint generated discoplan refers separation functional roles objects.particular, irre exivity on, in:8x 8y (on(x; y) ! :(x = y))captured using kind constraint. Tim cannot currently infer invariants.tim uses analysis based state view objects domain ablegenerate broader collection invariants, including state membership unique stateinvariants currently produced discoplan.Although discoplan deal negative preconditions tim cannot yet managethem, invariants produce overall currently less powerful inferredtim.Apart work Gerevini Schubert, older work inferenceinvariants also relies generation candidate invariantsconfirmed inductive process domain operators. Two exampleswork Kelleher Cohn (1992) Morris Feldman (1989). former workconcentrates identifying directed mutual persistence relations, hold pairsfacts domain when, established, second continues holdfirst does. use relations leads inference collection constraintsfall uniqueness invariants inferred tim. work described (Morris& Feldman, 1989) authors build invariants using truth counts countsnumber propositions particular identified sets must true statedomain. Sets count 1 used build invariantssubset state membership uniqueness invariants. authors describe methodsattempting identify sets facts work. work, commonKelleher Cohn Gerevini Schubert, builds invariants first hypothesisingpossible seed invariants determining validity analysing effectsoperators seeds. contrast generate-and-test strategy, tim producescorrect invariants infers deep, structural analysis domain.inference invariants exhaust possibilities analysis. example,type structure inferred automatically analysis, showndramatic potential eciency planning. relationship enablers,state transitions enable, determines ordering satisfaction goals,also significance eciency. Further, state-based view behaviour406fiAutomatic Inference State Invariantsdomain objects would allow techniques described McCluskey Porteous (1997)automated.McCluskey Porteous (1997) proposed explored object-centred approachplanning. approach based provision, domain engineer, richcollection state invariants object sorts participating functional relationshipsdomain. invariants exploited domain compilation phase facilitateecient planning application domain. Tim infers precisely sorts collectionsstate invariants McCluskey Porteous provide hand.Grant (1996) generates state invariants state descriptions, provided hand,uses invariants build operator schemas. approach clearly related eventhough objectives analysis different. Grant concerned automaticsynthesis domain descriptions rich requirements specification providedexpert user. concern reverse-engineering domain description obtain information help increase eciency planners applied domain. Althoughprimary objectives use tim enhance performance planning withindomain, tim also provides valuable tool construction domain descriptionsrevealing underlying behaviours domain engineer implicitly imposed,helping debugging domain descriptions.6. ConclusionTim planner-independent set techniques identifying underlying structuredomain, revealing type structure collection four different kinds invariant conditions. One important application techniques domain debugging aidconstruction large complex domains. Using tim revealed many anomaliesdomains encoded us others, greatly assisted us understandingstan's performance many domains problems. Another important applicationincreasing eciency planners making explicit planner informationdomain would otherwise infer, domain representation,planning.Tim generates rich collection invariants containing many inferrablerelated systems, discussed previous section. results presented GereviniSchubert (1998) suggest marked improvement obtained useinvariants performance planners based SAT-solving techniques. analysisyet done determine advantages might obtainable using invariantsplanners based architectures. Stan yet exploit invariants produced tim planning. uses type structure fixed resource invariantscurrently developing extension stan fully exploit kindsinvariant. expect able use uniqueness identity invariants shortcuteffort involved deducing significant subset necessary mutex relationsgraph construction.analysis performed tim ecient, growing slowly quadratic functionsize initial state analysed. empirical analysis considereffect tim's performance increasing numbers operator schemas. However,argument presented Section 4 shows tim's analysis grows linearly number407fiFox & Longoperator schemas, linearly number domain constants linearlysize initial state. factors take account, confirmspolynomial performance size (and related structure) domain increases.type analysis performed tim differs, important respects, variousforms type analysis performed compilation programs written stronglytyped languages. latter context type-correctness program judgedrespect imposed context basic types. Tim infers basic types domaindescription impossible domain specification well-typed. Consequentlyattempt type-check domain descriptions using tim. directionhope move near future, type-checking enable unsolvableproblems detected unsolvable statically rather planning time. currentlyfocus type inference exploitation inferred type structuremanagement search space planner.7. Acknowledgementswould like thank Alfonso Gerevini, Gerry Kelleher anonymous refereesuseful discussions helpful comments earlier drafts paper.Appendix A. FTP Web Sitesaips-98 Planning Competition FTP site at:http://ftp.cs.yale.edu/pub/mcdermott/aipscomp-results.html.web site, stan tim executables found, at:http://www.dur.ac.uk/ dcs0www/research/stanstuff/planpage.htmlAppendix B. TIM Algorithmfollowing pseudo-code description tim algorithm.fConstruct base PRSs (Section 2.3)gPs := fg;operator schema, O,variable O, x,construct PRS x add Ps;fSplit PRSsgPRS Ps, P,property, p, appears P adds deleted precs fieldssplit P p, P' Q replace P P' Q Ps,split P p:construct PRS Q precs P, deleted precs adds set fpg;construct PRS P' P removing p deleted precs adds P;fConstruct transition rules (Section 2.3)gTs := fg;PRS Ps, P,construct transition rule P add Ts;fSeed property attribute spaces (Section 2.3)glet property initially assigned separate equivalence class;rule, r, Tsmerge together (unite) equivalence classes properties start finish r;408fiAutomatic Inference State Invariantsconstruct separate space equivalence class properties;fAssign transition rules (Section 2.4)grule, r, Tsplace r space associated equivalence class containing propertiesstart (and finish) r, s;r increasing decreasing rulemark attribute space;fAnalyse initial state (Section 2.4)gobject, o, domainidentify bag initial properties o, I(o);space, s,construct bag properties I(o) belong equivalence classassociated s, b;b non-emptyadd space s;attribute spaceadd b state s;fExtend property spaces (Section 2.4)gproperty space, p,unextended state p, s,mark extended;newgen := fg;rule p, r,start r includedadd state snew = (s ominus start oplus end) newgen;snewis superset state newgenmark p attribute space exit analysis p;add newgen states p;fExtend attribute spaces (Section 2.4)gchanges := TRUE;changes,changes := FALSE;unmarked attribute space, a,extend extend a:mark a;rule a, r,property enablers r, p,p's equivalence class associated unmarked attribute space, a',extend a';add objects appear every space associated enabling property r a;objects addedchanges := TRUE;fIdentify types (Section 2.6)gobject domain, o,identify pattern membership spaces o, tt;associate type pattern, tt, o;operator schema, O,argument O, x,identify pattern membership spaces x implied properties xpreconditions O, tt;associate type pattern, tt, x O;fConstruct invariants (Section 2.7)gproperty space, P,property P, p,construct identity invariant p;construct state membership invariant P;construct uniqueness invariant P;409fiFox & LongAppendix C. Example Outputfollowing output produced tim found, along examples,stan webpage. examples show details analysis performedthree domains: Flat-tyre domain, Mystery domain Logistics domain.analysis done respect initial state set operator schemas. operatorschemas used three domains provided pddl strips releasesdomains. initial states taken pddl release. pddl releasefound http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/mcdermott.html.C.1 Tyre WorldTIM: Type Inference Mechanism - support STAN: State Analysis PlannerD. Long M. Fox, University DurhamReading domain file: domain01.pddlReading problem file: prob01.pddlTIM: Domain analysis complete flat-tire-stripsTIM: TYPES:TypeTypeTypeTypeTypeTypeTypeTypeT0T1T2T3T4T5T6T7========{wrench}{wheel2}{wheel1}{trunk}{the-hub}{pump}{nuts}{jack}noticed two wheels separated different types.one wheel intact intact, operator repairing wheelsintact. tools given different types.appear constants different operators therefore functionally distinct.TIM: STATE INVARIANTS:FORALL x:T4. (on-ground(x) lifted(x))FORALL x:T4. (on-ground(x) lifted(x))FORALL x:T3. (closed(x) open(x))FORALL x:T3. (closed(x) open(x))410fiAutomatic Inference State InvariantsFORALL x:T1 U T2. (deflated(x) inflated(x))FORALL x:T1 U T2. (deflated(x) inflated(x))invariants hubs (below) suggest almost anything could hub. Sincecase type structure under-discriminating. However, additionalinvariants drawn sub-space analysis provide enough information, principle,discriminate fully types. information yet fully exploited.FORALL x:T4. FORALL y1. FORALL z1. on(y1,x) on(z1,x) => y1 = z1FORALL x:T4. (Exists y1:T0 U T1 U T2 U T5 U T6 U T7. on(y1,x)free(x))FORALL x:T4. (Exists y1:T0 U T1 U T2 U T5 U T6 U T7. on(y1,x)free(x))FORALL x:T4. FORALL y1. FORALL z1. tight(y1,x) tight(z1,x) => y1 = z1FORALL x:T4. FORALL y1. FORALL z1. loose(y1,x) loose(z1,x) => y1 = z1FORALL x:T4. ((Exists y1:T0 U T1 U T2 U T5 U T6 U T7. tight(y1,x)fastened(x))(Exists y1:T0 U T1 U T2 U T5 U T6 U T7. loose(y1,x)fastened(x)) unfastened(x))FORALL x:T4. ((Exists y1:T0 U T1 U T2 U T5 U T6 U T7. tight(y1,x)fastened(x))(Exists y1:T0 U T1 U T2 U T5 U T6 U T7. loose(y1,x)fastened(x)))FORALL x:T4. ((Exists y1:T0 U T1 U T2 U T5 U T6 U T7. tight(y1,x)fastened(x)) unfastened(x))FORALL x:T4. ((Exists y1:T0 U T1 U T2 U T5 U T6 U T7. loose(y1,x)fastened(x)) unfastened(x))TIM: DOMAIN INVARIANTS:|{x0:|{x0:|{x0:|{x0:|{x0:|{x0:|{x0:|{x0:|{x0:container(x0)}| = 1hub(x0)}| = 1intact(x0)}| = 1jack(x0)}| = 1nut(x0)}| = 1pump(x0)}| = 1unlocked(x0)}| = 1wheel(x0)}| = 2wrench(x0)}| = 1TIM: ATTRIBUTE SPACES:411fiFox & Longattribute space properties first groups subjected muchrigorous analysis sub-space invariants below.Objects, x, T0 U T1 U T2 U T5 U T6 U T7 property:Exists y1:T3. in(x,y1);Exists y1:T4. on(x,y1);Exists y1:T4. tight(x,y1);Exists y1:T4. loose(x,y1);have(x);Objects, x, T3 property:Exists y1:T0 U T1 U T2 U T5 U T6 U T7. in(y1,x);Objects, x, T3 property: container(x);Objects, x, T4 property: hub(x);Objects, x, T1 property: intact(x);Objects, x, T7 property: jack(x);Objects, x, T6 property: nut(x);Objects, x, T5 property: pump(x);Objects, x, T3 property: unlocked(x);Objects, x, T1 U T2 property: wheel(x);Objects, x, T0 property: wrench(x);TIM: OPERATOR PARAMETER RESTRICTIONS:inflate(x1:T1)put-on-wheel(x1:T1 U T2,x2:T4)remove-wheel(x1:T1 U T2,x2:T4)put-on-nuts(x1:T6,x2:T4)remove-nuts(x1:T6,x2:T4)jack-down(x1:T4)jack-up(x1:T4)tighten(x1:T6,x2:T4)loosen(x1:T6,x2:T4)put-away(x1:T0 U T1 U T2 U T5 U T6 U T7,x2:T3)fetch(x1:T0 U T1 U T2 U T5 U T6 U T7,x2:T3)close-container(x1:T3)open-container(x1:T3)cuss()TIM: ADDITIONAL STATE INVARIANTS, USING SUB-SPACE ANALYSIS:report additional state invariants add information invariantsalready listed. TIM currently reports invariants subsumed earlier collection.observed first wheel intact second not, givesrise following new invariant wheels second type.412fiAutomatic Inference State InvariantsFORALL x:T2. (deflated(x))first attribute space, contains objects except trunk hub,subjected sub-space analysis yielding rich new collection invariants.FORALL x:T0. FORALL y1. FORALL z1. in(x,y1) in(x,z1) => y1 = z1FORALL x:T0. (Exists y1:T3. in(x,y1) have(x))FORALL x:T0. (Exists y1:T3. in(x,y1) have(x))FORALL x:T1. FORALL y1. FORALL z1. in(x,y1) in(x,z1) => y1 = z1FORALL x:T1. FORALL y1. FORALL z1. on(x,y1) on(x,z1) => y1 = z1FORALL x:T1. (Exists y1:T3. in(x,y1) have(x)Exists y1:T4. on(x,y1))FORALL x:T1. (Exists y1:T3. in(x,y1) have(x))FORALL x:T1. (Exists y1:T3. in(x,y1) Exists y1:T4. on(x,y1))FORALL x:T1. (have(x) Exists y1:T4. on(x,y1))FORALL x:T2. FORALL y1. FORALL z1. in(x,y1) in(x,z1) => y1 = z1FORALL x:T2. FORALL y1. FORALL z1. on(x,y1) on(x,z1) => y1 = z1FORALL x:T2. (Exists y1:T4. on(x,y1) have(x)Exists y1:T3. in(x,y1))FORALL x:T2. (Exists y1:T4. on(x,y1) have(x))FORALL x:T2. (Exists y1:T4. on(x,y1) Exists y1:T3. in(x,y1))FORALL x:T2. (have(x) Exists y1:T3. in(x,y1))FORALL x:T5. FORALL y1. FORALL z1. in(x,y1) in(x,z1) => y1 = z1FORALL x:T5. (Exists y1:T3. in(x,y1) have(x))FORALL x:T5. (Exists y1:T3. in(x,y1) have(x))FORALL x:T6. FORALL y1. FORALL z1. in(x,y1) in(x,z1) => y1 = z1FORALL x:T6. FORALL y1. FORALL z1. tight(x,y1)tight(x,z1) => y1 = z1FORALL x:T6. FORALL y1. FORALL z1. loose(x,y1)loose(x,z1) => y1 = z1FORALL x:T6. (Exists y1:T4. tight(x,y1)Exists y1:T4. loose(x,y1)have(x) Exists y1:T3. in(x,y1))FORALL x:T6. (Exists y1:T4. tight(x,y1)Exists y1:T4. loose(x,y1))FORALL x:T6. (Exists y1:T4. tight(x,y1) have(x))FORALL x:T6. (Exists y1:T4. tight(x,y1)Exists y1:T3. in(x,y1))FORALL x:T6. (Exists y1:T4. loose(x,y1) have(x))FORALL x:T6. (Exists y1:T4. loose(x,y1)Exists y1:T3. in(x,y1))FORALL x:T6. (have(x) Exists y1:T3. in(x,y1))413fiFox & LongC.2 Mystery DomainMystery domain devised Drew McDermott aips-98 planning competition.intention conceal structure problem domain employing obscureencoding transportation domain. code replaces locations names foodsroutes eats relations. transports pleasures cargospains. Cargos transports locations, relation encoded craves.cargo either location transport encoded fears relation. Transportsrestricted capacity encoded planets consume fuel travelling locations.Fuel exists limited quantities locations measured provinces. Using TIMable decode domain identify roles played componentsencoding.TIM: Domain analysis complete mystery-strips (prob048.pddl)TIM: TYPES:noted provinces (types T6, T7 T8) divided three separatetypes form sequence, defined attacks relation, firstlast slightly different functional role others. true planets(types T1, T2 T3).Type T0 = {beef,cantelope,chocolate,flounder,guava,mutton,onion,pepper,rice,shrimp,sweetroll,tuna,yogurt}Type T1 = {saturn}Type T2 = {pluto}Type T3 = {neptune}Type T4 = {achievement,lubricity}Type T5 = {abrasion,anger,angina,boils,depression,grief,hangover,laceration}Type T6 = {alsace,bosnia,guanabara,kentucky}Type T7 = {goias}Type T8 = {arizona}TIM: STATE INVARIANTS:FORALL x:T4. FORALL y1. FORALL z1. harmony(x,y1)harmony(x,z1) => y1 = z1FORALL x:T4. (Exists y1:T1 U T2 U T3. harmony(x,y1))FORALL x:T0. FORALL y1. FORALL z1. locale(x,y1)locale(x,z1) => y1 = z1FORALL x:T0. (Exists y1:T6 U T7 U T8. locale(x,y1))FORALL x:T4 U T5. FORALL y1. FORALL z1. fears(x,y1)414fiAutomatic Inference State Invariantsfears(x,z1) => y1 = z1FORALL x:T4 U T5. FORALL y1. FORALL z1. craves(x,y1)craves(x,z1) => y1 = z1FORALL x:T4 U T5. (Exists y1:T0. craves(x,y1)Exists y1:T4. fears(x,y1))FORALL x:T4 U T5. (Exists y1:T0. craves(x,y1)Exists y1:T4. fears(x,y1))TIM: DOMAIN INVARIANTS:|{(x0,x1): attacks(x0,x1)}| = 5|{(x0,x1): eats(x0,x1)}| = 36|{x0: food(x0)}| = 13|{(x0,x1): harmony(x0,x1)}| = 2|{(x0,x1): locale(x0,x1)}| = 13|{(x0,x1): orbits(x0,x1)}| = 2|{x0: pain(x0)}| = 8|{x0: planet(x0)}| = 3|{x0: pleasure(x0)}| = 2|{x0: province(x0)}| = 6TIM: ATTRIBUTE SPACES:Objects, x, T1 U T2 U T3 property:Exists y1:T4. harmony(y1,x);Objects, x, T6 U T7 U T8 property:Exists y1:T0. locale(y1,x);Objects, x, T4 property:Exists y1:T4. fears(y1,x);Objects, x, T0 property:Exists y1:T4 U T5. craves(y1,x);Objects, x, T6 U T7 property:Exists y1:T6 U T8. attacks(x,y1);Objects, x, T6 U T8 property:Exists y1:T6 U T7. attacks(y1,x);Objects, x, T0 property:Exists y1:T0. eats(x,y1);Objects, x, T0 property:Exists y1:T0. eats(y1,x);Objects, x, T0 property: food(x);Objects, x, T2 U T3 property:Exists y1:T1 U T2. orbits(x,y1);415fiFox & LongObjects, x,Exists y1:T2 UObjects, x,Objects, x,Objects, x,Objects, x,T1 U T2 property:T3. orbits(y1,x);T5 property: pain(x);T1 U T2 U T3 property: planet(x);T4 property: pleasure(x);T6 U T7 U T8 property: province(x);TIM: OPERATOR PARAMETER RESTRICTIONS:succumb(x1:T5,x2:T4)feast(x1:T4,x2:T0,x3:T0)overcome(x1:T5,x2:T4)TIM: ADDITIONAL STATE INVARIANTS, USING SUB-STATE ANALYSIS:additional invariants show transports always location neverloaded transports.FORALL x:T4. FORALL y1. FORALL z1. craves(x,y1)craves(x,z1) => y1 = z1FORALL x:T4. (Exists y1:T0. craves(x,y1))C.3 Logistics DomainTIM: Domain analysis complete logistics-strips (prob05.pddl)TIM: TYPES:Type T0 = {bos-truck,la-truck,pgh-truck}Type T1 = {bos-po,la-po,pgh-po}Type T2 = {bos-airport,la-airport,pgh-airport}Type T3 = {bos,la,pgh}Type T4 = {package1,package2,package3,package4,package5,package6,package7,package8}Type T5 = {airplane1,airplane2}TIM: STATE INVARIANTS:FORALL x:T0 U T4 Uat(x,z1) => y1FORALL x:T0 U T4 Uin(x,z1) => y1FORALL x:T0 U T4 UT5. FORALL y1. FORALL z1. at(x,y1)= z1T5. FORALL y1. FORALL z1. in(x,y1)= z1T5. (Exists y1:T1 U T2. at(x,y1)416fiAutomatic Inference State InvariantsExists y1:T0 U T5. in(x,y1))FORALL x:T0 U T4 U T5. (Exists y1:T1 U T2. at(x,y1)Exists y1:T0 U T5. in(x,y1))TIM: DOMAIN INVARIANTS:|{x0: airplane(x0)}| = 2|{x0: airport(x0)}| = 3|{x0: city(x0)}| = 3|{(x0,x1): in-city(x0,x1)}| = 6|{x0: location(x0)}| = 6|{x0: obj(x0)}| = 8|{x0: truck(x0)}| = 3TIM: ATTRIBUTE SPACES:Objects, x,Exists y1:T0 UObjects, x,Exists y1:T0 UObjects, x,Objects, x,Objects, x,Objects, x,Objects, x,Objects, x,Objects, x,Objects, x,T1T4T0T4T5T2T3T1T3T1T4T0U T2 property:U T5. at(y1,x);U T5 property:U T5. in(y1,x);property: airplane(x);property: airport(x);property: city(x);U T2 property: Exists y1:T3. in-city(x,y1);property: Exists y1:T1 U T2. in-city(y1,x);U T2 property: location(x);property: obj(x);property: truck(x);TIM: OPERATOR PARAMETER RESTRICTIONS:drive(x1:T0,x2:T1 U T2,x3:T1fly(x1:T5,x2:T2,x3:T2)unload(x1:T0 U T4 U T5,x2:T0load-plane(x1:T4,x2:T5,x3:T1load-truck(x1:T4,x2:T0,x3:T1U T2,x4:T3)U T5,x3:T1 U T2)U T2)U T2)TIM: ADDITIONAL STATE INVARIANTS, USING SUB-STATE ANALYSIS:417fiFox & Longfollowing invariants add constraints trucks airplanes must alwayslocation never loaded one another.FORALL x:T0. FORALL y1. FORALL z1. at(x,y1) at(x,z1) => y1 = z1FORALL x:T0. (Exists y1:T1 U T2. at(x,y1))FORALL x:T5. FORALL y1. FORALL z1. at(x,y1) at(x,z1) => y1 = z1FORALL x:T5. (Exists y1:T1 U T2. at(x,y1))Appendix D. Rocket DomainRocket domain used construction Figure 6 follows:(define (domain rocket)(:predicates(at ?x ?y)(in ?x ?y)(fuelled ?x)(unfuelled ?x)(loc ?x)(obj ?x)(container ?x))(:action fly:parameters (?x ?y ?z):precondition (and (at ?x ?y) (loc ?z) (fuelled ?x)):effect (and (not (at ?x ?y)) (at ?x ?z) (unfuelled ?x)(not (fuelled ?x))))(:action load:parameters (?x ?y ?z):precondition (and (obj ?x) (container ?y) (at ?x ?z)(at ?y ?z)):effect (and (in ?x ?y) (not (at ?x ?z))))(:action unload:parameters (?x ?y ?z):precondition (and (at ?y ?z) (in ?x ?y)):effect (and (at ?x ?z) (not (in ?x ?y)))))Appendix E. Operator Test Domaindomain artificial domain used test effects increasing operators literalsdomain encoding performance TIM. example third instance -variation achieved adding operator schemas pattern includedhere.418fiAutomatic Inference State Invariants(define (domain od)(:predicates(p1 ?x ?y) (q1 ?x ?y)(p2 ?x ?y) (q2 ?x ?y)(p3 ?x ?y) (q3 ?x ?y)(p4 ?x ?y) (q4 ?x ?y)(p5 ?x ?y) (q5 ?x ?y)(p6 ?x ?y) (q6 ?x ?y)(p7 ?x ?y) (q7 ?x ?y)(p8 ?x ?y) (q8 ?x ?y)(p9 ?x ?y) (q9 ?x ?y)(p10 ?x ?y) (q10 ?x ?y)(p11 ?x ?y) (q11 ?x ?y)(p12 ?x ?y) (q12 ?x ?y)(p13 ?x ?y) (q13 ?x ?y)(p14 ?x ?y) (q14 ?x ?y)(p15 ?x ?y) (q15 ?x ?y)(p16 ?x ?y) (q16 ?x ?y)(p17 ?x ?y) (q17 ?x ?y)(p18 ?x ?y) (q18 ?x ?y)(p19 ?x ?y) (q19 ?x ?y)(p20 ?x ?y) (q20 ?x ?y))(:action o1:parameters (?x ?y ?z):precondition (and (p1 ?x ?y) (q1 ?x ?z)):effect (and (not (p1 ?x ?y)) (not (q1 ?x ?z))(p1 ?x ?z) (q1 ?x ?y)))(:action o2:parameters (?x ?y ?z):precondition (and (p2 ?x ?y) (q2 ?x ?z)):effect (and (not (p2 ?x ?y)) (not (q2 ?x ?z))(p2 ?x ?z) (q2 ?x ?y)))(:action o3:parameters (?x ?y ?z):precondition (and (p3 ?x ?y) (q3 ?x ?z)):effect (and (not (p3 ?x ?y)) (not (q3 ?x ?z))(p3 ?x ?z) (q3 ?x ?y))))problem instance fixed follows:(define (problem op)(:domain od)(:objects b c)419fiFox & Long(:init(p1 b)(q1 c)(p2 b)(q2 c)(p3 b)(q3 c)(p4 b)(q4 c)(p5 b)(q5 c)(p6 b)(q6 c)(p7 b)(q7 c)(p8 b)(q8 c)(p9 b)(q9 c)(p10 b)(q10 c)(p11 b)(q11 c)(p12 b)(q12 c)(p13 b)(q13 c)(p14 b)(q14 c)(p15 b)(q15 c)(p16 b)(q16 c)(p17 b)(q17 c)(p18 b)(q18 c)(p19 b)(q19 c)(p20 b)(q20 c))(:goal (and (p1 c) (q1 b))))ReferencesBlum, A., & Furst, M. (1995). Fast Planning Plan-graph Analysis. IJCAI.Bundy, A., Burstall, R., Weir, S., & Young, R. (1980). Artificial Intelligence: Introductory Course. Edinburgh University Press.Fikes, R., & Nilsson, N. (1971). STRIPS: New Approach Application TheoremProving Problem-Solving. Artificial Intelligence, 2 (3).Gerevini, A., & Schubert, L. (1996a). Accelerating Partial Order Planners: Techniques Effective Search Control Pruning. JAIR, 5, 95{137.Gerevini, A., & Schubert, L. (1996b). Computing Parameter Domains Aid Planning.AIPS-96.Gerevini, A., & Schubert, L. (1998). Inferring State Constraints Domain-IndependentPlanning. AAAI.Grant, T. J. (1996). Inductive Learning Knowledge-based Planning Operators. Ph.D.thesis, Rijksuniversiteit Limburg de Maastricht.Kautz, H., & Selman, B. (1998). Role Domain Specific Knowledge PlanningSatisfiability Framework. Fourth International Conference ArtificialIntelligence Planning Systems.420fiAutomatic Inference State InvariantsKelleher, G., & Cohn, A. (1992). Automatically Synthesising Domain ConstraintsOperator Descriptions. Proceedings ECAI92.Koehler, J., Nebel, B., & Dimopoulos, Y. (1997). Extending Planning Graphs ADLSubset. Proceedings 4th European Conference Planning.Liatsos, V., & Richards, B. (1997). Least Commitment: Optimal Planning Strategy.Proceedings 16th Workshop UK Planning Scheduling Special InterestGroup.Long, D., & Fox, M. (in press). Ecient Implementation Plangraph stan.JAIR.McCluskey, T. L., & Porteous, J. (1997). Engineering Compiling Planning DomainModels Promote Validity Eciency. Artificial Intelligence, 95 (1).Morris, P., & Feldman, R. (1989). Automatically Derived Heuristics Planning Search.Proceedings 2nd Irish Conference Artificial Intelligence CognitiveScience, School Computer Applications, Dublin City University.421fiJournal Artificial Intelligence Research 9 (1998) 1{36Submitted 1/98; published 8/98Computational Complexity Probabilistic PlanningMichael L. Littmanmlittman@cs.duke.eduDepartment Computer Science, Duke UniversityDurham, NC 27708-0129 USAJudy Goldsmithgoldsmit@cs.engr.uky.eduMartin Mundhenkmundhenk@ti.uni-trier.deDepartment Computer Science, University KentuckyLexington, KY 40506-0046 USAFB4 - Theoretische Informatik, Universitat TrierD-54286 Trier, GERMANYAbstractexamine computational complexity testing finding small plans probabilistic planning domains propositional representations. complexityplan evaluation existence varies plan type sought; examine totallyordered plans, acyclic plans, looping plans, partially ordered plans threenatural definitions plan value. show problems interest completevariety complexity classes: PL, P, NP, co-NP, PP, NPPP, co-NPPP, PSPACE.process proving certain planning problems complete NPPP, introducenew basic NPPP-complete problem, E-Majsat, generalizes standard Booleansatisfiability problem computations involving probabilistic quantities; results suggestdevelopment good heuristics E-Majsat could important creationecient algorithms wide variety problems.1. IntroductionRecent work artificial-intelligence planning addressed problem finding effective plans domains operators probabilistic effects (Drummond & Bresina,1990; Mansell, 1993; Draper, Hanks, & Weld, 1994; Koenig & Simmons, 1994; Goldman &Boddy, 1994; Kushmerick, Hanks, & Weld, 1995; Boutilier, Dearden, & Goldszmidt, 1995;Dearden & Boutilier, 1997; Kaelbling, Littman, & Cassandra, 1998; Boutilier, Dean, &Hanks, 1998). Here, \effective" \successful" plan one reaches goal statesucient probability. probabilistic propositional planning , operators specifiedBayes network extended STRIPS-like notation, planner seeks recipechoosing operators achieve goal configuration user-specified probability.problem closely related solving Markov decision process (Puterman,1994) expressed compact representation.previous work (Goldsmith, Lusena, & Mundhenk, 1996; Littman, 1997a), examined complexity determining whether effective plan exists completely observabledomains; problem EXP-complete general form PSPACE-complete limited polynomial-depth plans. (A polynomial-depth, polynomial-horizon, plan onetakes polynomial number actions terminating.) results,c 1998 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.fiLittman, Goldsmith & Mundhenkplans permitted arbitrarily large objects|there restriction valid planneed sort compact (polynomial-size) representation.place restrictions size valid plans, earlier resultsdirectly applicable problem finding valid plans. possible, example,given planning domain, valid plans require exponential space (and exponentialtime) write down. Knowing whether plans exist simply importantintractable express.present paper, consider complexity practical realisticproblem|that determining whether plan exists given restricted formgiven restricted size. plans consider take several possible forms usedprevious planning work: totally ordered plans, partially ordered plans, (totally ordered)conditional plans, (totally order) looping plans. cases, limit attentionplans expressed size bounded polynomial size specificationproblem. way, determine plan exists, use informationtry write reasonable amount time space.deterministic planning literature, several authors addressed computational complexity determining whether valid plan exists, determining whether planexists given cost, finding valid plans variety assumptions (Chapman, 1987; Bylander, 1994; Erol, Nau, & Subrahmanian, 1995; Backstrom,1995; Backstrom & Nebel, 1995). results provide lower bounds (hardness results)analogous probabilistic planning problems since deterministic planning special case.deterministic planning, optimal plans represented simple sequence operators(a totally ordered plan). probabilistic planning, good conditional plan often perform better totally ordered (unconditional) plan; therefore, need considercomplexity planning process richer set plan structures.ease discussion, explicitly describe case planning completelyobservable domains. means state world known timesplan execution, spite uncertainty state transitions. know statesystem sucient information choosing actions optimally (Puterman, 1994), however,representing universal plan often impractical propositional domainssize state space exponential size domain representation.reason, consider types plan structures based simple finite-state machines.type plans consider necessarily use full state systemmake every decision, results carry partially observable domains, althoughexplore fact detail present work.computational problems look complete variety complexity classesranging PL (probabilistic logspace) PSPACE. Two results deserving specialmention concern problems closely related ones actively addressedartificial-intelligence researchers; first, problem evaluating totally ordered plancompactly represented planning domain PP-complete.1 compactly represented1. class PP closely related somewhat familiar #P; Toda (1991) showed P#P = PPP .Roughly speaking, means #P PP equally powerful used oracles. countingclass #P already recognized artificial-intelligence community important complexityclass computations involving probabilistic quantities, belief-network inference (Roth, 1996).2fiComplexity Probabilistic Planningplanning domain one described two-stage temporal Bayes network (Boutilieret al., 1998) similar notation.Second, problem determining whether valid totally ordered plan existscompactly represented planning domain NPPP -complete. Whereas class NPthought set problems solvable guessing answer checking polynomial time, class NPPP thought set problems solvable guessinganswer checking using probabilistic polynomial-time (PP) computation. likelyNPPP characterizes many problems interest area uncertainty artificialintelligence; paper earlier work (Goldsmith et al., 1996; Mundhenk, Goldsmith, &Allender, 1997a; Mundhenk, Goldsmith, Lusena, & Allender, 1997b) give initial evidencethis.1.1 Planning-Domain Representationsprobabilistic planning domain = hS ; s0 ; A; t; Gi characterized finite set states, initial state s0 2 , finite set operators actions A, set goal statesG . application action state results probabilistic transitionnew state s0 according probability transition function t, t(s; a; s0 )probability state s0 reached state action taken. objectivechoose actions, one another, move initial state s0 one goal statesprobability threshold .2 state system known times(fully observable) used choose action apply.concerned two main representations planning domains: representations, enumerate states explicitly, propositional representations (sometimescalled compact, structured, factored representations), view states assignmentsset Boolean state variables propositions. Propositional representations represent many domains exponentially compactly representations.representation, transition function represented collectionjSj jSj matrices,3 one action. propositional representation, typejSj jSj matrix would huge, transition function must expressed another way.probabilistic planning literature, two popular representations propositional planning domains probabilistic state-space operators (PSOs) (Kushmerick et al., 1995)two-stage temporal Bayes networks (2TBNs) (Boutilier et al., 1995). Although representations differ type planning domains express naturally (Boutilier et al.,1998), computationally equivalent; planning domain expressed one representation converted polynomial time equivalent planning domain expressedpolynomial increase representation size (Littman, 1997a).work, focus propositional representation called sequential-effectstree representation (ST) (Littman, 1997a), syntactic variant 2TBNsconditional probability tables represented trees (Boutilier et al., 1995, 1998). representation equivalent 2TBNs PSOs simplifies presentation results.2. also possible formulate objective one maximizing expected total discounted reward (Boutilier et al., 1995), two formulations essentially polynomially equivalent (Condon, 1992). diculty compactly represented domains may require discount factorsexponentially close one equivalence hold. discussed Section 5.3. assume number bits used represent individual probability values isn't large.3fiLittman, Goldsmith & MundhenkST, effect action proposition represented separate decisiontree. given action a, set decision trees different propositions ordered,decision tree one proposition refer new old values previous propositions; allows ST represent probability distribution. leavesdecision tree describe associated proposition changes function stateaction, perhaps probabilistically. Section 1.2 gives simple example representation.propositional representations, states set goal states Gexplicitly enumerated ST. Instead, define goal set , set propositionsstate goal-set propositions true considered goal state.set actions explicitly enumerated ST, representation.ST representation planning domain = hS ; s0 ; A; t; Gi definedformally = hP; I; A; T; G (we use blackboard-bold font stand ST representation domain). Here, P finite set distinct propositions. set statespower set P; propositions 2 said \true" s. set Pinitial state. set G goal set, set goal states G set statesG s.transition function represented function T, maps actionordered sequence jPj binary decision trees. decision treesdistinct label proposition, decision propositions nodes (optionally labeledsux \:new"), probabilities leaves. ith decision tree T(a)i actiondefines transition probabilities t(s; a; s0 ) follows. ith decision tree, let pilabel proposition. Define value leaf node found traversing decisiontree T(a)i , taking left branch decision proposition (or s0 decisionproposition \:new" sux) right branch otherwise. Finally, leti;pi 2 s0 ,0t(s; a; ) =(1)1 , ; otherwise.definition constitutes well-defined probability distribution s0s.insure validity representation, allow \p:new" appeardecision proposition T(a)i p label proposition decision tree T(a)jj < i. reason, order decision trees T(a) significant. putanother way, proposition new value new value defineddecision tree.complexity results derive ST apply also PSOs, 2TBNs, computationally equivalent representations. also hold \succinct representation,"propositional representation popular complexity-theory literature, capturesset transition matrices function, commonly represented Boolean circuitcomputes function. ST straightforwardly represented Boolean circuit,and, proof Theorem 6, show represent particular Boolean circuitsST. Thus, although shown succinct representation formally equivalent ST, two representations closely related; proofs give ST needchanged slightly work succinct representation (Goldsmith, Littman, &Mundhenk, 1997a, 1997b; Mundhenk et al., 1997b). results require restrictsuccinct representation generate transition probabilities polynomial4fiComplexity Probabilistic Planningnumber bits; results may different circuit-based representationsrepresent probabilities exponential number bits (Mundhenk et al., 1997a).1.2 Example Domainhelp make domain-representation ideas concrete, present followingsimple probabilistic planning domain based problem building sand castlebeach. total four states domain, described combinations twoBoolean propositions, moat castle (propositions appear boldface). propositionmoat signifies moat dug sand, proposition castle signifiescastle built. initial state, moat castle false,goal set fcastleg.two actions: dig-moat erect-castle (actions appear sans serif). Figure 1illustrates actions ST. Executing dig-moat moat false causes moatbecome true probability 1=2; moat already true, dig-moat leaves unchanged.castle proposition affected. dig-moat action depicted left halfFigure 1.second action erect-castle, appears right half Figure 1. decisiontrees numbered allow sequential dependencies effects expressed.first decision tree castle, change value already trueerect-castle executed. Otherwise, probability becomes true dependentwhether moat true; castle built probability 1=2 moat trueprobability 1=4 not. idea building moat first protects castledestroyed prematurely ocean waves.second decision tree proposition moat. erect-castle cannot makemoat become true, effect moat false. hand, moatexists, may collapse result trying erect castle. label castle:newdiagram refers value castle proposition first decision tree evaluated.castle already built erect-castle selected, moat remains builtprobability 3=4. castle built, erect-castle successfully builds it, moatremains true. Finally, erect-castle fails make castle true, moat becomes falseprobability 1=2 everything destroyed.Note given ST representation domain, perform number usefuloperations eciently. First, given state action a, generate next state s0proper probabilities. accomplished calculating value propositionss0 one time order given representation a, ipping coinsprobabilities given leaves decision trees. Second, given state s, action a,state s0 , compute t(s; a; s0 ), probability state s0 reached stateaction taken, via Equation 1.1.3 Plan Types Representationsconsider four classes plans probabilistic domains. Totally ordered plansbasic type, finite sequence actions must executed order;type plan ignores state system. Acyclic plans generalize totally ordered plansinclude conditional execution actions. Partially ordered plans different way5fiLittman, Goldsmith & Mundhenkdig-moat1: moat2: castlemoat1Terect-castle1: castlecastleF1/21T2: moatcastleF0T1TmoatFmoatFcastleF1/21/43/40TFcastle: newF1T1/2Figure 1: Sequential-effects-tree (ST) representation sand-castle domaingeneralizing totally ordered plans precise sequence left exible (McAllester& Rosenblitt, 1991). Looping plans generalize acyclic plans case plan stepsrepeated (Smith & Williamson, 1995; Lin & Dean, 1995). type plan alsoreferred plan graph policy graph (Kaelbling et al., 1998).following sections, prove computational complexity results concerningplan types. remainder section provides formal definitions plantypes, illustrated Figure 2 examples sand-castle domain.general form, plan (or policy, controller transducer) programoutputs actions takes input information outcome actions.work, consider particularly restricted finite-state-controller-based plan representation.plan P planning domain = hS ; s0 ; A; t; Gi represented structure(V; v0 ; E; ; ) consisting directed (multi) graph (V; E ) initial node v0 2 V ,labeling : V ! plan nodes|called plan steps |to domain actions, labelingedges state sets : E ! P (S ) every v 2 V outgoing edges,0v 2V :(v;v )2E (v; v ) = (v; v1 ) \ (v; v2 ) = ; v1 ; v2 2 V , v1 6= v2 . plansteps outgoing edges all|these terminal steps . Actions terminalsteps executed. Note function represented direct mannerdomains, propositional domains, compact representation needed.assume propositional domains, edge labels given conjunctions literals.behavior plan P domain follows. initial time step = 0. timestep 0, domain state st plan step vt (s0 defined planningdomain, v0 plan). Action (vt ) executed, resulting transition domain statest+1 probability t(st ; (vt ); st+1 ). Plan step vt+1 chosen st+1 2 (vt ; vt+1 );function tells plan \go" next. point, time-step indexincremented process repeats. continues terminal step reachedplan.One understand behavior domain plan P several different ways.possible sequences states viewed tree: node treedepth state reachable initial state time step t. Alternatively, one viewstate time step plan P probability distribution . time006fiComplexity Probabilistic Planningstep 0, probability 1 process state s0 . probability state s0time step + 1, Pr(s0 ; + 1), sum probabilities length + 1 pathss0 s0, i.e.,Xs0 ;s1 ;s2 ;:::;st;st+1=s j =1t(sj ; aj ; sj+1 );0aj action selected plan P time j given observed sequence statetransitions s0 ; : : : ; sj . view useful later proofs.Next, formalize probability domain reaches goal state plan P .need introduce several notions. \legal" sequence states steps appliedcalled trajectory , i.e., P sequence ff = h(si ; vi )iki=0 pairst(si; (vi ); si+1 ) > 0 0 k , 1,si+1 2 (vi ; vi+1 ) 0 k , 1,v0 ; : : : ; vk,1 terminal steps.goal trajectory trajectory ends goal state , sk 2 G . Notegoal trajectory finite.Q Thus, calculate probability goal trajectory,1 t(s ; (v ); ), given 2 G . probabilityff = h(si ; vi )iki=0 Pr(ff) = ki=0i+1kreaches goal state plan P sum probabilities goal trajectoriesM,XPr(M reaches goal state P ) :=Pr(ff);ff goal trajectorycall value plan.characterize plan P = (V; v0 ; E; ; ) basis size structureunderlying graph (V; E ). graph (V; E ) contains cycles, call acyclic plan ,otherwise looping plan . follows acyclic plan terminal step,terminal step reached jV j actions taken; plansused finite-horizon control. totally ordered plan (sometimes called \linearplan" \straight line" plan) acyclic plan one outgoing edgenode V . plan simple path.work, also consider partially ordered plans (sometimes called \nonlinear"plans) express entire family totally ordered plans. representation, stepsplan given partial order (specified, example, directed acyclic graph).partial order represents set totally ordered plans: totally ordered sequencesplan steps consistent partial order consist steps partially orderedplan. totally ordered plans value, values needsame. such, choice defining value partially ordered plan.work, consider optimistic, pessimistic, average interpretations. Let(P )set totally ordered sequences consistent partial order plan P . optimisticinterpretation,value P := max Pr(M reaches goal state p):p2(P )7fiLittman, Goldsmith & Mundhenkpessimistic interpretation,value P := min Pr(M reaches goal state p):p2(P )average interpretation,XPr(M reaches goal state p):value P := j(1P )jp2(P )illustrate notions, Figure 2 gives plans type sand-castle domaindescribed earlier. Initial nodes marked incoming arrow, terminal stepsrepresented filled circles. 3-step totally ordered plan Figure 2(a) successfullybuilds sand castle probability 0:4375. acyclic plan given Figure 2(b),succeeds probability 0:46875 executes dig-moat average 1:75 times. Notesucceeds often fewer actions average totally ordered planFigure 2(a).Figure 2(c) illustrates partially ordered plan sand-castle domain.plan bears superficial resemblance acyclic plan Figure 2(b), differentinterpretation. particular, plan Figure 2(c) represents set totally ordered plansfive (non-terminal) plan steps (3 dig-moat steps 2 erect-castle steps). contrastsolid arrows Figure 2(b), indicate ow control, dashed arrowsFigure 2(c) represent ordering constraints: erect-castle step must precededleast two dig-moat steps,for example.Although 52 = 10 distinct ways arranging five plan steps Figure 2(c) totally ordered plan, two distinct totally ordered plans consistentordering constraints:dig-moat ! dig-moat ! dig-moat ! erect-castle ! erect-castle !(success probability 0:65625)dig-moat ! dig-moat ! erect-castle ! dig-moat ! erect-castle !(success probability 0:671875). Thus, optimistic success probability partiallyordered plan 0:671875, pessimistic 0:65625. Note pessimistic interpretation closely related standard interpretation deterministic partial order planning (McAllester & Rosenblitt, 1991), partially ordered plan considered successful consistent totally ordered plans successful. average successprobability 0:6614583, here, 4 orderings yield poorer plandescribed above, 2 yield better one.looping plan Figure 2(d) terminate succeeds building sandcastle, probability 1:0 eventually. course, looping planssucceed probability 1; totally ordered plan Figure 2(a) acyclic planFigure 2(b) special cases looping plans, instance.define jP j size plan P number steps contains. define jM jsize domain sum number actions states domainsum sizes ST decision trees propositional domain.8fiComplexity Probabilistic Planningdig-moatdig-moaterect-castledig-moaterect-castledig-moaterect-castledig-moat(a) totally ordered plan.(c) partially ordered plan.not(moat)dig-moatnot(moat)dig-moatmoatdig-moaterect-castlenot(moat)moat not(castle)moatmoatdig-moatcastleerect-castle(b) acyclic (conditional) plan.not(moat) not(castle)(d) looping plan.Figure 2: Example plans sand-castle domainconsider following decision problems. plan-evaluation problem asks, givendomain , plan P size jP j jM j, threshold , whether value greater, i.e., whetherPr(M reaches goal state P ) > :Note condition jP j jM j technical one|we simply want use jM jrepresent size problem. Given instance jP j larger jM j,simply imagine \padding out" jM j make larger. important thingconsidering plans roughly size description domain,size number states (which might considerably larger).plan-existence problem asks, given domain , threshold , size bound z jM j,whether exists plan P size z value greater . Notebound size target plan, complexity plan generationplan existence; technique self-reduction used construct valid plan usingpolynomially many calls oracle decision problem.decision problems different version type domain (propositional) type plan category (looping, acyclic, totally ordered,partially ordered three interpretations). address problemssucceeding sections.1.4 Complexity Classesdefinitions complexity classes, reductions, standard results complexitytheory, refer reader Papadimitriou (1994).Brie y, looking complexity decision problems (those yes/noanswers). class P consists problems decided polynomial time; is,given instance problem, program deciding whether answer yesruns polynomial time. class NP contains problems polynomialtime checkable polynomial-size certificates: given instance certificate,checked time polynomial size instance whether certificate provesinstance NP set. means that, answer instance \yes,"9fiLittman, Goldsmith & Mundhenkshown polynomial time given right key. class co-NP opposite|ifanswer \no," shown polynomial time given right key.problem X C -hard complexity class C every problem C reducedit; put another way, fast algorithm X used subroutine solveproblem C quickly. problem C -complete C -hard C ;hardest problems class.interest complete, next give detailed descriptions lessfamiliar probabilistic counting complexity classes use work.class #L (A lvarez & Jenner, 1993) class functions f that,nondeterministic logarithmically space-bounded machine N , number accepting pathsN x equals f (x). class #P defined analogously class functions fthat, nondeterministic polynomial-time -bounded machine N , numberaccepting paths N x equals f (x). Typical complete problems computingdeterminant #L computing permanent #P.function f defined GapL difference f = g , h #L functions gh. #L functions nonnegative integer values definition, GapL functionsmay negative integer values (for example, g always returns zero).Probabilistic logspace (Gill, 1977), PL, class sets existsnondeterministic logarithmically space-bounded machine N x 2number accepting paths N x greater number rejecting paths.original definition PL, time bound computations; Borodin, Cook,Pippenger (1983) later showed PL P. Jung (1985) proved set computableprobabilistic logspace computable probabilistic logspace PL machinesimultaneous polynomial-time bound. apparent contrast P-complete sets, sets PLdecidable using fast parallel computations (Borodin et al., 1983).Probabilistic polynomial time, PP, defined analogously. classic PP-complete problem Majsat: given Boolean formula conjunctive normal form (CNF),majority assignments satisfy it? According Balcazar, Daz, Gabarro (1990),PP-completeness Majsat shown combination results Gill (1977)Simon (1975).polynomial-space-bounded computations, PSPACE equals probabilistic PSPACE,#PSPACE class polynomial-space-computable functions (Ladner,1989).Note L, NL, #L, PL GapL logarithmic space P, NP, #P, PP,GapP polynomial time. Also, notion completeness use paper reliesmany-one reductions. case PL, reduction functions logarithmic space;case NP above, polynomial time.complexity classes C C 0 class C C consists sets C -Turingreducible sets C 0 , i.e., sets accepted resource bounds specified C ,using problem C 0 subroutine (oracle) instantaneous output. classC PSPACE, case NPC PSPACE, therefore NPPSPACE = PSPACE.primary oracle-defined class consider NPPP . equals \NP" closurePP (Toran, 1991), seen closure PP polynomial-time disjunctive reducibility exponential number queries (each queries computablepolynomial time index list queries). simplify completeness results010fiComplexity Probabilistic Planningclass, introduce decision problem call E-Majsat (\exists" Majsat),generalizes standard NP-complete satisfiability problem PP-complete Majsat.E-Majsat instance defined CNF Boolean formula n Boolean variablesx1 ; : : : ; xn number k 1 n. task decide whetherinitial partial assignment variables x1 ; : : : ; xk majority assignmentsextend partial assignment satisfies . prove problem NPPP -completeAppendix.complexity classes consider satisfy following containment propertiesrelations well-known classes:NP PP NPPP PSPACE EXP:L NL PL P co-NPco-NPPPP properly contained EXP, EXP-complete problems provably intractable;classes may equal P, although generally believed case.Several observations worth making here. also known PH NPPP ,PH represents polynomial hierarchy. crude sense, PH close PSPACE,and, thus, NPPP {completeness results place important problems close PSPACE.However, early empirical results (Littman, 1997b) show random problem instances PP similar properties random problem instances NP, suggestingPP might close enough NP NP-type heuristics effective.1.5 Results SummaryTables 1 2 summarize results, explained detail later sections.general avor main results techniques conveyed follows.show plan-evaluation problem particular complexity class C , takecross product steps plan states domain lookcomplexity evaluating absorption probability resulting Markov chain (i.e.,directed graph probability-labeled edges). complexity corresponding planexistence problem bounded NPC , problem solved guessingcorrect plan non-deterministically evaluating it; many cases, NPC complete. appropriate complexity class C depends primarily representationcross-product Markov chain.Exceptions basic pattern results partially ordered plans Section 4.appear require distinct set techniques.also worth noting that, although propositional domains exponentiallycompact domains, computational complexity solving problems propositional domains always exponentially greater; one instance, evaluating partiallyordered plans average interpretation, complexity actuallypropositional domains!also prove results concerning plan evaluation existence compactly representedplans (PP-complete NPPP -complete, Corollary 5), plan existence \large enough"looping plans domains (P-complete, Theorem 7), plan evaluation existencelooping plans deterministic propositional domains (PSPACE-complete, Theorems 89), plan existence polynomial-size looping plans partially observable domains(NP-complete, Section 5.1).11fiLittman, Goldsmith & MundhenkPlan TypePlan Evaluation Plan Existenceunrestricted|P-completepolynomial-depth|P-completeloopingPL-completeNP-completeacyclicPL-completeNP-completetotally orderedPL-completeNP-completepartially ordered, optimisticNP-completeNP-completepartially ordered, averagePP-completeNP-completepartially ordered, pessimistic co-NP-completeNP-completeReferenceP & (1987)P & (1987)Section 3Section 2Section 2Section 4Section 4Section 4Table 1: Complexity results representations (P & (1987) PapadimitriouTsitsiklis (1987))Plan TypePlan Evaluation Plan Existence Referenceunrestricted|EXP-complete Littman (1997a)polynomial-depth|PSPACE-complete Littman (1997a)loopingPSPACE-complete PSPACE-complete Section 3acyclicPP-completeNPPP -complete Section 2totally orderedPP-completeNPPP -complete Section 2PPpartially ordered, optimisticNP -completeNPPP -complete Section 4partially ordered, averagePP-completeNPPP -complete Section 4PPpartially ordered, pessimistic co-NP -complete NPPP -complete Section 4Table 2: Complexity results propositional representations12fiComplexity Probabilistic Planning2. Acyclic Planssection, treat complexity generating evaluating acyclic totallyordered plans.Theorem 1 plan-evaluation problem acyclic totally ordered plans domains PL-complete.Proof: First, show PL-hardness totally ordered plans. Jung (1985) provedset PL exists logarithmically space-bounded polynomiallytime-bounded nondeterministic Turing machine N following property: everyinput x, machine N must least half computations input x acceptingx A. machine N transformed probabilistic Turingmachine R input x, probability R(x) accepts x equalsfraction computations N (x) accepted. Given R, planning domaindescribed follows. state set set configurations R input x. Noteconfiguration consists contents logarithmically space-bounded tape,state, location read/write heads, one symbol input outputtapes. Thus, configuration represented logarithmically many bits,polynomially many configurations. state-transition probabilitiesunique action configuration transition probabilities R. statesobtained accepting configurations goal states. totally ordered plan consists\step counter" R input x, plan steps takes action a.probability planning domain plan reaches goal state exactlyprobability R(x) reaches accepting configuration. Thus, evaluating totallyordered plan PL-hard.Since totally ordered plans acyclic plans, also proves PL-hardness planevaluation problem acyclic plans.Next, show plan-evaluation problem PL acyclic plans. Let =hS ; s0 ; A; t; Gi planning domain, let P = hV; v0 ; E; ; acyclic plan, letthreshold given. show question, whether probability Preaches goal state probability greater , equivalently transformedquestion whether GapL function greater 0. transformation donelogarithmic space. shown Allender Ogihara (1996), follows questionPL.first, construct Markov chain C P , simulates execution\evaluation" P . Note Markov chain seen probabilisticdomain one action set actions. Since choice actions,mention construction. state space C V , initial state(s0 ; v0 ), set goal states G V , transition probabilities tC C8t(s; (v); s0 ); s0 2 (v; v0 );<tC ((s; v); (s0 ; v0 )) = : 1;v terminal step node, (s; v) = (s0 ; v0 );0;otherwise.Let number plan steps P (i.e., jV j, number nodes graphrepresenting P ). Since states C contain terminal step P sinks C , follows13fiLittman, Goldsmith & MundhenkPr(M reaches goal state P ) = Pr(C reaches goal state exactly steps):LetpC (s; m) := Pr(C reaches goal state exactly steps initial state s):Then, pC ((s0 ; v0 ); m) probability want calculate. standard inductive definition pC used evaluate plans dynamic programminggoal state C ,pC (s; 0) = 10;; ifotherwise,XpC (s; k + 1) =tC (s; s0) pC (s0 ; k); 0 k , 1:2SV0Let h maximum length representation state-transition probability tC .Then,goal state C ,ph (s; 0) = 10;; otherwise,X hph(s; k + 1) =2 tC (s; s0 ) ph (s0 ; k); 0 k , 1;2SV0follows pC ((s0 ; v0 ); m) = ph((s0 ; v0 ); m) 2,hm . Note ph((s0 ; v0 ); m) integervalue. Therefore, pC ((s0 ; v0 ); m) > ph ((s0 ; v0 ); m) , b2hm c > 0. ordershow pC ((s0 ; v0 ); m) > decidable PL, suces show ph((s0 ; v0 ); m)GapL. Therefore, \unwind" inductive definition ph. Let integermatrix obtained tC T(s;s ) = tC (s; s0 ) 2h . introduce integer-valuedshow ph composed GapL functions using compositions GapLclosed; tC integer valued, cannot used show this. write0ph(s; m) =X2SV(T )(s;s ) ph(s0 ; 0):00argue ph GapL. entry T(s;s ) logspace computable domain plan P . Therefore, powers matrix GapL, shownVinay (1991). GapL closed multiplication summation polynomiallymany summands, follows ph 2 GapL. Finally, use closure properties GapLAllender Ogihara (1996); since GapL closed subtraction, followsplan-evaluation acyclic plans PL.totally ordered plans acyclic plans, plan-evaluation problem totallyordered plans also PL.0technique forming Markov chain taking cross product domainplan useful later. Plan-existence problems require different set techniques.Theorem 2 plan-existence problem acyclic totally ordered plans domains NP-complete.14fiComplexity Probabilistic PlanningProof: First, show containment NP. Given planning domain , threshold ,size bound z jM j, guess plan correct form size z acceptreaches goal state probability greater plan. Notechecking whether plan correct form done polynomial time.plan-evaluation problem PL (Theorem 1), follows plan-existence problemNP (i.e., NPPL = NP).show NP-hardness plan-existence problem, give reductionNP-complete satisfiability problem Boolean formulae conjunctive normal form.construct planning domain evaluates Boolean formula n variables,(n + 2)-step plan describes assignment values variables. first step,clause chosen randomly. step + 1, planning domain \checks" whether plansatisfies appearance variable clause. so, clause marked satisfied.n + 1 steps, literal satisfied clause, goal state reachedclause, otherwise, transition made goal state. Therefore, goalstate reached probability 1 (greater 1 , 1=m) clausessatisfied|the plan describes satisfying assignment.formally define reduction, similar one presented PapadimitriouTsitsiklis (1987). Let CNF formula n variables x1 ; : : : ; xn clausesC1 ; : : : ; Cm . Let sign appearance variable clause ,1 variablenegated, 1 otherwise. Define planning domain () = hS ; s0 ; A; t; GiG= fsat(i; j ); unsat(i; j ) j 1 n + 1; 1 j mg [ fs0 ; sacc ; srejg;= fassign(i; b) j 1 n; b 2 f,1; 1gg [ fstart; endg;= fsacc g;8 10>; = s0 ; = start; s0 = unsat(1; j ); 1 j m;>>>1; = s0 ; 6= start; = srej;>>>>>1; = unsat(i; j ); = assign(i; b); s0 = sat(i + 1; j ); n;>>>>xi appears Cj sign b;>>>>1;= unsat(i; j ); = assign(i; b); s0 = unsat(i + 1; j ); n;>>>>xi appear Cj sign b;>>>>1;= unsat(i; j ); = assign(i0 ; b) = start = end;>><0srej; i0 6= n; b 2 f,1; 1g;t(s; a; s0) = > 1; ss == unsat(n + 1; j ); s0 = srej;>>>>1; = sat(i; j ); = assign(i; b); s0 = sat(i + 1; j ); n;>>>>1; = sat(i; j ); = assign(i0 ; b) = start = end;>>>>s0 = srej; i0 6= n;>>>>1; = sat(n + 1; j ); = end; s0 = sacc ;>>>>1; = sat(n + 1; j ); 6= end; s0 = srej;>>>>= s0 = srej = s0 = sacc ;>>: 10;; ifotherwise.meaning states domain follows. domain statesat(i; j ) 1 n, 1 j m, means formula satisfied,currently checking variable clause j . State sat(n + 1; j ) 1 j meanswe've finished verifying clause j satisfied. meanings similar15fiLittman, Goldsmith & Mundhenks0start1=2unsat(1; 1)assign(1; 1)assign(1;sat(2; 1)assign(2; x)1=2,1)startassign(1;,1)sat(3; 1)assign(2; 1)sat(3; 2)assign(3; x)sat(4; 1)unsat(4; 1)endendsaccunsat(2; 2)assign(2; x)unsat(3; 1)assign(3; x)assign(1; 1)sat(2; 2)unsat(2; 1)assign(2;unsat(1; 2),1)unsat(3; 2)assign(3; 1)sat(4; 2)endassign(3;,1)unsat(4; 2)endsrejFigure 3: domain generated Boolean formula (x1 _ :x2 ) ^ (:x1 _ x3 )\unsat" states. course, s0 initial state sacc srej acceptingrejecting states, respectively.actions domain start end, mark beginning endassignment, assign(i; b) 1 n, b 2 f,1; 1g, assign truth value bvariable i. Figure 3 gives domain generated reduction simple Booleanformula. description reduction, () computed timepolynomial jj.construction, () z = (n + 2)-step plan P reach goal state saccP formstart ! assign(1; b1 ) ! assign(2; b2 ) ! ! assign(n; bn ) ! end ! :P reaches sacc probability 1 b1 ; : : : ; bn satisfying assignmentn variables . shows Boolean satisfiability polynomial-time reducesplan-existence problem totally ordered acyclic plans, showing NP-hard.Note bound plan depth (horizon) instead plan size, planexistence problem acyclic plans domains P-complete (Goldsmith et al., 1997a;Papadimitriou & Tsitsiklis, 1987). Limiting plan size makes problem dicultpossible force planner take action different states;figuring without sacrificing plan quality challenging.propositional domains, plan evaluation harder large number states.Theorem 3 plan-evaluation problem acyclic totally ordered plans propositional domains PP-complete.Proof: show PP-hardness totally ordered plans, give reductionPP-complete problem Majsat: given CNF Boolean formula , majorityassignments satisfy it?16fiComplexity Probabilistic Planningevaluate1: xi1/22: xi1/2n+1: clause1xa1:newFxb1:new1T1011Txbm:newclause1:newxcm:new1T0FF1T1Tn+m+2: donedoneFFn+m+1: satisfiedxam:new...xc1:newxd1:new1/2n+m: clausemFn: xi...F0Fclause2:new...0TF0clausem:newF1T1F0TFigure 4: Sequential-effects-tree representation evaluateGiven , construct planning domain () 1-step plan planachieves goal probability greater = 1=2 majorityassignments satisfies . planning domain () consists single action evaluate,also 1-step plan evaluated. n + + 2 propositions ();x1 xn, correspond n variables ; clause1 clausem ,correspond clauses ; satisfied, also sole element goal set;done, insures evaluate executed (this importantdomain used later Theorem 4 show complexity plan existence). initialstate, propositions false.evaluate action generates random assignment variables , evaluatesclauses (clausei true literals ith clause true), evaluates entireformula (satisfied true clauses true). Figure 4 gives ST representationevaluate, xa ; xb ; : : : represent variables clause i.construction, Majsat () reaches goal state probabilitygreater = 1=2 plan consisting single action evaluate.next show membership PP acyclic plans. showingplanning domain acyclic plan P induce computation tree consistingpaths P . Evaluating computation tree accomplished PPmachine.Let b bound number bits used specify probabilities leavesdecision trees representing .4 Consider computation tree defined follows. rootlabeled hs0 ; v0 i. If, planning domain , probability reaching state s04. represent numbers polynomial-precision binary representation. principle, could introduceround-off errors planning problems specified form.17fiLittman, Goldsmith & Mundhenkgiven action (v) equal , hs; (v)i 2b children labeled hs0 ; (v; s0 )i.identically labeled child nodes independent defined identicallyothers. Thus, number paths given set labels corresponds probabilitytrajectory domain plan multiplied (2b )h , h depthplan.number accepting computations is, therefore, (2b )hprobability achieving goal . Note b inherent planningdomain, rather h. PP machine accepts half final statesaccepting, 6= 1=2, necessary pad computation tree introducing\dummy" branches accept reject right proportions.plan-existence problem essentially equivalent guessing evaluating validplan.Theorem 4 plan-existence problem acyclic totally ordered plans propositional domains NPPP -complete.Proof: Containment NPPP totally ordered acyclic plans followsfact polynomial-size plan guessed polynomial time checked PP(Theorem 3).Hardness NPPP totally ordered acyclic plans shown usingreduction E-Majsat, shown NPPP -hard Appendix. reduction echoesone used PP-hardness argument proof Theorem 3.Given CNF Boolean formula variables x1 ; : : : ; xn , number k, constructplanning domain (; k) plan exists reach goal probabilitygreater = 1=2 assignment variables x1 ; : : : ; xkmajority assignments remaining variables satisfies . planning domain(; k ) consists action evaluate Theorem 3 one action, set-xi ,first k variables. proof Theorem 3, n + + 2 propositions(; k ), initially false: x1 xn , correspond n variables ; clause1clausem , correspond clauses ; satisfied; done,insures evaluate executed once. goal set contains satisfied done.1 k, action set-xi makes proposition xi true. Analogously Theorem 3,evaluate action generates random assignment remaining variables , evaluatesclauses (clausei true literals clause true), evaluatesentire formula (satisfied true clauses true), sets done true. donetrue, action make satisfied true.pair ; k E-Majsat, exists assignment b1 : : : bk first kvariables majority assignments rest variables satisfies .Therefore, plan applying steps set-xi bi = 1 followed evaluate actionreaches goal state probability greater = 1=2.Conversely, assume (; k) totally ordered plan P reaches goal stateprobability greater 1=2. Since evaluate action action setting donetrue, since action reaches goal done set true, assume withoutloss generality P consists sequence steps set-xi ends evaluate.construction, assignment x1 ; : : : ; xk assigning 1 exactly variables set P18fiComplexity Probabilistic Planningassignment majority assignments rest variablessatisfies , therefore ; k E-Majsat.Since every totally ordered plan acyclic, hardness holds acyclic plans.results, consider compactly represented (propositional)planning domains plans. Compactly represented plans also quite useful.compact acyclic plan acyclic plan names plan stepsencoded set propositional variables step-transition functionplan steps represented set decision trees, ST.require plan depth polynomial size representation,even though total number steps plan might exponential duelogarithmic succinctness encodings.plan-domain cross-product technique used proof Theorem 3 generalizes compact acyclic plans, complexity results apply. also holds trueprobabilistic acyclic plan , acyclic plan make random transitionsplan steps (i.e., step-transition function stochastic). insightscombined yield following corollary Theorems 3 4.Corollary 5 plan-evaluation problem compact probabilistic acyclic plans propositional domains PP-complete plan-existence problem compact probabilisticacyclic plans propositional domains NPPP -complete.mention probabilistic plans two reasons. First, behavior planning structures (such partially ordered plan evaluation average interpretation,discussed Section 4) thought generating probabilistic plans. Second,many instances simple probabilistic plans perform nearly well much largercomplicated deterministic plans; notion often exploited field randomized algorithms. Work Platzman (1981) (described Lovejoy, 1991) showsidea randomized plans come handy planning partially observable domains.3. Looping PlansLooping plans applied infinite-horizon control. complexity plan existenceplan evaluation domains (Theorems 1 2) depend presenceabsence loops plan.Theorem 6 plan-evaluation problem looping plans domains PL-complete.Proof: Given domain looping plan P , construct product Markovchain C proof Theorem 1. proof Theorem 6 AllenderOgihara (1996), chain constructed exactly one acceptingexactly one rejecting state; states absorbing. probabilityreaches goal state P equals probability C reaches accepting statestarted initial state, product initial states P .19fiLittman, Goldsmith & Mundhenkproof Theorem 6 Allender Ogihara (1996), shown constructionMarkov chain computation whether reaches final state probabilitygreater performed PL.PL-hardness implied Theorem 1, since acyclic plans special case loopingplans.Theorem 7 plan-existence problem looping plans domains NP-completegeneral, P-complete size desired plan least size stateaction space (i.e., z min(jSj; jAj)).Proof sketch: NP-completeness follows proof Theorem 2; containmenthardness still hold plans permitted looping.However, true forced specify plan whose size smallrespect size domain. looping plan allowed number statesleast large number states actions domain, problemsolved polynomial time.known Markov decision processes maximum probabilityreaching goal state equals maximum probability reaching goal stateinfinite-horizon stationary policy , stationary policy mapping statesactions used repeatedly choose actions time step. knownoptimal stationary policy computed polynomial time via linear programming (Condon, 1992). stationary policy domain = hS ; s0 ; A; G ; tiwritten looping plan, although, course, looping plans correspond stationarypolicies.show fixed stationary policy p : ! A, two simple wayslooping plan P = (V; v0 ; E; ; ) represented. First, let V = A, v0 = p(s0 ), (v) = v,(v; v0 ) = fs 2 j p(s) = v0 g. follows whenever reaches state s,action applied according looping plan according P .Second, let V = , v0 = s0 , (v) = p(v), (v; v0 ) = fv0 g. follows wheneverreaches state s, plan node corresponding state and, therefore,appropriate action state applied looping plan. Therefore,maximum probability reaching goal state obtained either loopingplans.Since best stationary policy computed polynomial time, best loopingplan computed polynomial time, too. P-hardness follows theoremPapadimitriou Tsitsiklis (1987).propositional domains, complexity plan existence plan evaluation loopingplans quite different acyclic case. Looping plan evaluation hard.Theorem 8 plan-evaluation problem looping plans deterministic stochastic propositional domains PSPACE-complete.Proof: Recall plan-evaluation problem domains PL (Theorem 1).planning domain cn states representation size n, looping plan20fiComplexity Probabilistic Planningevaluated probabilistic space O(log(cn )) (Theorem 6), say probabilisticspace polynomial size input. follows ST representationdomain used compute entries transition function polynomial space.Since probabilistic PSPACE equals PSPACE, shows plan-evaluation problemlooping plans stochastic propositional domains PSPACE.remains show PSPACE-hardness deterministic propositional domains. Let Ndeterministic polynomial-space-bounded Turing machine. moment-to-momentcomputation state (configuration) N expressed polynomial-length bit stringencodes contents Turing machine's tape, location read/write head,state N 's finite-state controller, whether machine acceptingstate.input x, describe construct polynomial time deterministic planning domain (x) single-action looping plan reaches goal state (x)x accepted Turing machine N .Given description N x, one can, time polynomial size descriptionsN x, produce description Turing machine computes transitionfunction N . words, input c, configuration N , outputs nextconfiguration N . (In fact, even check whether c valid configurationcomputation N (x) simulating computation.) argument similarused Cook's theorem, modeled polynomial-size circuit. circuit takesinput bit string describing current configuration N outputs nextconfiguration.Next, argue computation circuit expressed action compute ST representation. one proposition (x) bit configuration,plus one gate circuit. three standard gates, \and," \or," \not"easily represented decision trees. ordering decision trees compute according topological sort gates circuit, single compute action computeprecisely output circuit. Figure 5 illustrates conversion simplecircuit, gives form \not" (i1 ), \and" (i2 ), \or" (i3 ) gates.describe complete reduction. planning domain (x) consistssingle action compute set propositions described previous paragraph.initial state initial configuration Turing machine N , goal setproposition corresponding whether configuration accepting state N .transitions deterministic one action chosen, followsgoal state reached probability 1 (greater 1=2, example)plan repeatedly chooses compute accepting state reachedpolynomial-space machine N input x accepts.similar argument shows looping plan existence actually harderlooping plan evaluation.Theorem 9 plan-existence problem looping plans deterministic stochastic propositional domains PSPACE-complete.21fiLittman, Goldsmith & Mundhenkcompute1: i12: i2c2c1c2i1i3c3i2c2Fc31T1T0TFc21TF0TF1T0T4: c1c1c1i1:newF0T3: i35: c2i2:newc1c3Fi2:new1T6: c30T0TF1Ti3:newFi2:new1TF0T1TF0TFigure 5: circuit representation sequential-effects treeProof: Hardness PSPACE follows construction proofTheorem 8: either one-step looping plan successful, not. plan yieldsbetter result.Recall interested determining whether plan size z ,z bounded size domain, reaches goal given probability.problem PSPACE plan guessed polynomial time checkedPSPACE (Theorem 8). NPPSPACE = PSPACE, result follows.mentioned earlier, unrestricted infinite-horizon plan-existence problemEXP-complete (Littman, 1997a); shows problem determining unrestricted planexistence EXP-hard domains require plans larger polynomialsize looping plans.Theorem 9 shows PSPACE-completeness determining plan existence deterministic domains, closely related PSPACE-completeness result Bylander (1994). main difference two results theorem appliescompact plans (polynomial instead exponential) complex operator descriptions (conditional effects instead preconditions add delete lists)include loops. Also, proofs show, PSPACE-hardness retained even planning domains one action, looping makes looping plans hardwork with.4. Partially Ordered PlansPartially ordered plans popular representation allow planning algorithmsdefer precise commitment ordering plan steps becomes necessary22fiComplexity Probabilistic Planningplanning process. k-step partially ordered plan corresponds set k-step totallyordered plans|all consistent given partial order. evaluationpartially ordered plan defined evaluation best, worst, averagemember set consistent totally ordered plans; optimistic, pessimistic,average interpretations, respectively.plan-evaluation problem partially ordered plans different totallyordered plans. single partial order encode totally ordered plans.Hence, evaluating partially ordered plan involves figuring best (in case optimisticinterpretation) worst (for pessimistic interpretation) member, average (foraverage interpretation) combinatorial set.Theorem 10 plan-evaluation problem partially ordered plans domainsNP-complete optimistic interpretation.Proof sketch: Membership NP follows fact guess totallyordered plan consistent given partial order accept domainreaches goal state probability . Remember evaluationperformed PL (Theorem 1), therefore deterministically polynomial time.hardness proof variation construction used Theorem 2. partiallyordered plan evaluate form given Figure 6; consistent total ordersformstart ! assign(1; b1 ) ! assign(1; ,b1 ) ! assign(2; b2 ) ! assign(2; ,b2 ) !! assign(n; bn) ! assign(n; ,bn) ! end ! ;bi either 1 ,1. possible plans interpreted assignmentn Boolean variables ignoring every second assignment action. constructionTheorem 2 shows turn CNF formula planning domain (),easily modified ignore every second action. Thus, best totally ordered planconsistent given partially ordered plan reaches goal probability 1reaches goal probability greater 1 , 2,m satisfiesclauses satisfiable.Theorem 11 plan-evaluation problem partially ordered plans domainsco-NP-complete pessimistic interpretation.Proof sketch: proof membership co-NP proof hardnesssimilar proof Theorem 10. show reduction co-NP-complete setunsatisfiable formulae CNF. plan evaluate form given Figure 6interpreted above. proof Theorem 2, construct planning domain0(), take G = fsrejg goal states, state srej reached probabilitygreater 0 assignment satisfy one clauses formula .formula unsatisfiable every assignment least one clausessatisfied. Therefore, probability 0 () reaches goal state giventotally ordered plan greater 0 plan corresponds unsatisfyingSat23fiLittman, Goldsmith & Mundhenkstartassign(1,1)assign(1,-1)assign(2,1)assign(2,-1)assign(3,1)assign(3,-1)...assign(n,1)assign(n,-1)endFigure 6: partially ordered plan hard evaluateassignment. Finally, minimum probability consistent partially orderedplans greater 0 unsatisfiable.Theorem 12 plan-evaluation problem partially ordered plans domainsPP-complete average interpretation.Proof: average interpretation, must decide whether average evaluationconsistent totally ordered plans greater threshold . decidedPP guessing uniformly totally ordered plan checking consistency givenpartially ordered plan polynomial time. guessed totally ordered plan consistent,evaluated polynomial time (Theorem 1) accepted rejected appropriate.guessed plan inconsistent, computation accepts probability rejectsprobability 1 , , leaving average consistent orderings unchangedrespect threshold .PP-hardness shown reduction PP-complete Majsat. Letformula CNF. show construct domain () partially ordered planP () 2 Majsat average performance () totallyordered plan consistent P () greater 1=2.Let consist clauses C1 ; : : : ; Cm , contain n variables x1 ; : : : ; xn . Domain() = hS ; s0 ; A; t; Gi actions= fassign(i; b) j 2 f1; : : : ; ng; b 2 f,1; 1gg [ fstart; check; endg:Action assign(i; b) interpreted \assign sign b xi ." partially ordered planP () plan stepsV = f(i; b; h) j 2 f1; : : : ; ng; b 2 f,1; 1g; h 2 f1; : : : ; mgg [ fstart; check; endgmapping : V !() = 2 fstart; check; endg, ((i; b; h)) = assign(i; b):24fiComplexity Probabilistic Planningorder E requires consistent plan start first end last step.steps arbitrarily ordered. formally,E = f(start; q) j q 2 V , fstart; endgg [ f(q; end) j q 2 V , fstart; endgg:Now, define domain () acts given totally ordered plan P consistentP (). Domain () consists cross product following polynomial-sizedeterministic domains Ms , final probabilistic transition added.describe Ms precisely, intuitive definitions. domainMs satisfied plans form assignment n Boolean variablesrestriction assignment repeated times (for easy checking). domainsatisfied plans correspond satisfying assignments. compositetwo domains satisfied plans correspond satisfying assignments.define domains formally.First, Ms checks whether totally ordered plan matches regular expressionstart (assign(1; 0)m jassign(1; 1)m )(assign(n; 0)m jassign(n; 1)m )check ((assign(1; 0)jassign(1; 1)) (assign(n; 0)jassign(n; 1)))m :Note constant. Let \good" state reached Ms planmatches expression. Otherwise, state reached \bad". clarify, actions check simply \use up" extra steps used specifying assignmentpartially ordered plan.Next, checks whether sequence actions following check action satisfiesclauses following sense. Let a1 ak sequence. interpretssubsequence a1+(j ,1)n an+(j ,1)n al+(j ,1)m = assign(x; bl ) assignment b1 ; : : : ; bnvariables x1 ; : : : ; xn , checks whether assignment satisfies clause Cj .single clauses satisfied way, reaches state \satisfied".Note Ms defined deal final end action.() consists product domain Ms transitions action endfollows. state (bad; q) state q , action end lets goprobabilistically state \accept" state \reject", probability 1=2 each;state (good; satisfied), action end goes state \accept" (with probability1); otherwise, action end goes state reject (with probability 1). set goalstates consists state \accept".analyze behavior () plan P consistent P (). MsP reaches state \bad", () P reaches goal state probability 1=2. Now,consider plan P Ms reaches state \good"|called good plan.P matches regular expression. Therefore, every 2 f1; : : : ; mg existsbi 2 f,1; 1g steps s(i; bi ; h) start check. Thus, stepscheck ends(1; 1 , i1 ; 1) s(n; 1 , ; 1)s(1; 1 , i1 ; 2) s(n; 1 , in; m)Consequently, sequence actions defined labeling plan steps(assign(1; i1 )assign(2; i2 ) assign(n; ))m :25fiLittman, Goldsmith & Mundhenkmeans, checks whether clauses satisfied assignment i1 ,i.e., checks whether i1 satisfies . Therefore, () accepts plan Pprobability 1, plan represents satisfying assignment, probability 0 otherwise.Note assignment corresponds exactly one good plan. Therefore, averagegood plans () accepts equals fraction satisfying assignments .Since () accepts \bad" plans probability 1=2, yields averageplans consistent P () acceptance probabilities () greater1=2 2 Majsat.complexity plan-existence problem partially ordered plans identicaltotally ordered plans.Theorem 13 plan-existence problem partially ordered plans domains NPcomplete pessimistic, optimistic average interpretations. plan-existenceproblem partially ordered plans propositional domains NPPP -completepessimistic, optimistic average interpretations.Proof: First, note totally ordered plan special type partially ordered planevaluation unchanged pessimistic, optimistic, average interpretation.particular, one ordering consistent given totally orderedplan, best, worst, average orderings same. Therefore, existstotally ordered plan value greater , partially ordered planvalue greater (the plan), three interpretations.Conversely, partially ordered plan value greaterthree interpretations, totally ordered plan value greater .value best, worst, average ordering partially orderedplan always lower bound value best consistent totally ordered plan.Given strong equivalence, complexity plan existence partially orderedplans direct corollary Theorems 2 4.pattern partially ordered plan evaluation domains averageinterpretation easier decide either optimistic pessimistic interpretations.propositional domains, pattern opposite: average interpretation harderdecide either optimistic pessimistic interpretations.Theorem 14 plan-evaluation problem partially ordered plans propositional do-mains NPPP -complete optimistic interpretation, co-NPPP -completepessimistic interpretation, PP-complete average interpretation.Proof sketch: optimistic interpretation, membership NPPP followsfact guess single suciently good consistent total order evaluatePP (Theorem 3). Hardness NPPP shown using straightforward reductionE-Majsat (as proof Theorem 4).pessimistic interpretation, membership co-NPPP follows factguess worst consistent total order evaluate PP (Theorem 3). Hardness26fiComplexity Probabilistic Planningco-NPPP shown reducing co-NPPP version E-Majsat (E-Majsat);proof simple adaptation techniques used, example, Theorem 4 above.average interpretation, problem shown PP combiningargument proof Theorem 12 showing average consistent totallyordered plans argument proof Theorem 3 showing evaluateplan propositional domain PP. Alternatively, could express evaluationpartially ordered plan average interpretation compact probabilistic acyclicplan; Corollary 5 states plans evaluated PP. PP-hardness follows directlyTheorem 3, totally ordered plans special case partially ordered plansevaluating totally ordered plans PP-hard.5. Applicationshelp illustrate utility results, section cites several plannersliterature analyzes computational complexity problems attack.give detailed explanations planners themselves; this, refer readeroriginal papers. focus three planning systems: witness (Brown University),buridan (University Washington), treeplan (University British Columbia).process making connections planners, also describe work relatesdiscounted-reward criterion, partial observability, domain representations, partialorder conditional planning, policy-based planning, approximate planning.5.1 Witnesswitness algorithm (Cassandra, Kaelbling, & Littman, 1994; Kaelbling et al., 1998)solves partially observable Markov decision processes using dynamic-programming approach. basic algorithm finds optimal unrestricted solutions finite-horizon problems.Papadimitriou Tsitsiklis (1987) showed plan-existence problem polynomialhorizon partially observable Markov decision processes PSPACE-complete.extension finite-horizon algorithm, Kaelbling et al. (1998) sketch methodfinding optimal looping plans domains. Although presentedformal algorithm, unreasonable say pure form problemextended version witness attacks one finding valid polynomial-size looping planpartially observable domain. similarities problem describedSection 3 domains plans identical form.apparent differences witness optimizes reward function instead probabilitygoal satisfaction witness works partially observable domains whereasresults defined terms completely observable domains. apparentdifferences insignificant, however, computational complexity point view.First, witness attempts maximize expected total discounted rewardinfinite horizon (sometimes called optimizing time-separable value function). arguedCondon (1992), problem defined terms sum discounted rewardsrecast one goal satisfaction. argument proceeds roughly follows. Let 0 < < 1discount factor R(s; a) immediate reward received taking actionstate s.27fiLittman, Goldsmith & MundhenkDefine;a R(s0 ; a0 )R0(s; a) = max R(s;Ra()s0,; amin0 ) , min R(s0 ; a0 ) :0;a00;a000this, 0 R0 (s; a) 1 value planrespect revised reward function simple linear transformation true value.Now, introduce auxiliary state g goal state create new transitionfunction t0 t0 (s; a; g) = (1 , )R0 (s; a) t0 (s; a; s0 ) = (1 , (1 , )R0 (s; a))t(s; a; s0 )s0 6= g; t0 well-defined transition function probability goal satisfactionplan transition function t0 precisely expected total discountedreward reward function R0 transition function t. Thus, problem statedone optimizing expected total discounted immediate rewards turnedequivalent problem optimizing goal satisfaction slight change transitionfunction one additional state. means fundamental computationalcomplexity difference two different types planning objectives.second apparent difference problem solved extended witnessalgorithm described Section 3 partial versus complete observability.fact, results address partial observability, albeit indirectly. formulationplan-existence problem, plans constrained make conditional branches (intotally ordered partially ordered cases), branch distinctions madestep-transition function (in acyclic looping cases); two choices correspondunobservable partially observable domains, respectively. partially observabledomain, plan-existence problem becomes one finding valid polynomial-size finitestate controller subject given observability constraints. Nothing complexityproofs depends presence absence additional observability constraints. Therefore,direct corollary Theorem 2 plan-existence problem polynomial-horizonplans unobservable domains NP-complete (Papadimitriou & Tsitsiklis, 1987)Theorem 7 plan-existence problem polynomial-size looping plans partiallyobservable domains NP-complete (this new result).interesting note computational complexity searching size-boundedplans partially observable domains generally substantially less solvingcorresponding unconstrained partially observable Markov decision process. example,found plan-existence problem acyclic plans propositional domainsNPPP -complete (Theorem 4). corresponding unconstrained problem determining existence history-dependent policy polynomial-horizon, compactlyrepresented partially observable Markov decision process, EXPSPACE-complete(Theorem 4.15 Goldsmith et al., 1996, Theorem 6.8 Mundhenk et al., 1997b).gap enormous: EXPSPACE EXP PSPACE P, EXP alreadyprovably intractable worst case. contrast EXPSPACE-complete problems,conceivable good heuristics NPPP -complete problems created extensionsrecent advances heuristics NP-complete problems. Therefore, hopedevising effective planning algorithms building observations papersearching optimal size-bounded plans instead optimal unrestricted plans; fact, recent planners propositional domains (Majercik & Littman, 1998a, 1998b)domains (Hansen, 1998) motivated results.28fiComplexity Probabilistic PlanningDomain TypepropositionalpropositionalHorizon TypepolynomialpolynomialinfiniteinfiniteSize-Bounded Plan Unrestricted PlanNP-completeNPPP -completeNP-completePSPACE-completePSPACE-completeEXPSPACE-completeundecidableundecidableTable 3: Complexity results plan existence partially observable domainsTable 3 summarizes complexity results planning partially observable domains.results size-bounded plans corollaries Theorems 2, 4, 7, 9 paper. results unrestricted plans due Papadimitriou Tsitsiklis (1987)( at, polynomial), Goldsmith et al. (1996) (propositional, polynomial), Hanks (1996)(infinite-horizon). last result derived noting isomorphism infinitehorizon problem emptiness problem probabilistic finite-state automata,undecidable (Rabin, 1963).5.2 Buridanburidan planner (Kushmerick et al., 1995) finds partially ordered plans propositional domains PSO representation. two identifiable differencesproblem solved buridan problem analyzed Section 4: representationplanning problems fact buridan restricted find polynomial-sizeplans. address differences below.Although, surface, PSO different ST, either convertedpolynomial time polynomial increase domain size. particular,effect action PSO represented single decision tree consisting propositionnodes (like ST) random nodes (easily simulated ST using auxiliary propositions).leaves list propositions become true another list propositionsbecome false leaf reached. type correlated effect also easilyrepresented ST using chain rule probability theory decompose probabilitydistribution separate probabilities proposition careful use \:new"sux. Thus, PSO domain converted similar size ST domain quickly.Similarly, domain ST converted PSO polynomial expansion.conversion complex sketch here, follows proof equivalence ST simplified representation called (Littman, 1997a). Given polynomialequivalence ST PSO, complexity results ST carry PSO.5results described paper concern planning problems bound givensize plan sought. Although Kushmerick et al. (1995) explicitly describeplanner one prefers small plans large plans, design plannerone searches space plans makes notion plan size centralalgorithm. Indeed, public-domain buridan implementation uses plan size partbest-first search procedure identifying suciently successful plan. means that,things equal, shorter plans found larger plans. Furthermore,assure termination, planner considers fixed number plans halting, thus5. precise, true complexity classes closed log-space reductions.29fiLittman, Goldsmith & Mundhenkputting limit indirectly maximum allowable plan size. So, although buridanattempt solve precisely problem considered, fair sayproblem consider idealization problem attacked buridan. Regardless,lower bounds complexity apply buridan.Kushmerick et al. (1995) looked generating suciently successful plansoptimistic interpretation pessimistic interpretation. also explicitly examined plan-evaluation problem partially ordered plans interpretations.Therefore, Theorems 13 14 apply buridan.sophisticated c-buridan planner (Draper et al., 1994) extends buridanplan partially observable domains produce plans conditional execution.results work also shed light computational complexity problem addressedc-buridan. Draper et al. (1994) devised representation partially ordered acyclic(conditional) plans. representation, plan step generates observation labelfunction probabilistic outcome step. step also associated setcontext labels dictating circumstances step must executed. planstep executed context labels consistent observation labels producedearlier steps. totally ordered form, type plan expressed compactacyclic plan; Corollary 5 used show plan-evaluation plan-existenceproblems totally ordered version c-buridan's conditional plan representationpropositional domains PP-complete NPPP -complete, respectively.results above, consider evaluating searching plans partiallyordered plans conditional execution, once. Nonetheless,sorts techniques presented paper applied analyzing problemsattacked c-buridan. example, consider plan-existence problem c-buridan'spartially ordered conditional plans optimistic interpretation. problem askswhether partially ordered conditional plan total order reachesgoal sucient probability. equivalent asking whether totallyordered conditional plan reaches goal sucient probability. Therefore,problem NPPP -complete, argument previous paragraph.spite many superficial differences problems analyzed paperstudied creators buridan planners, results quite relevantunderstanding work.5.3 Treeplanfamily planners designed generate decision-tree-based representationstationary policies (mappings state action) (Boutilier et al., 1995; Boutilier &Poole, 1996; Boutilier & Dearden, 1996) probabilistic propositional domains; referplanners collectively treeplan planners. again, planners solveproblems identical problems addressed paper closelyrelated.planner described Boutilier et al. (1995) finds solutions maximize expectedtotal discounted reward compactly represented Markov decision processes (the domainrepresentation used expressively equivalent ST). mentioned earlier, differencemaximizing goal satisfaction maximizing expected total discounted reward30fiComplexity Probabilistic Planningsuperficial one, problem addressed planner EXP-complete (Littman, 1997a).Although policies used Boutilier et al. (1995) appears quite dissimilar finitestate controllers described work, policies converted type similarlysized compact looping plan (an extension type plan described Corollary 5).conversion stationary policies looping plans described proofTheorem 7, except resulting plans represented compactly.later work, Boutilier Dearden (1996) show possible limit sizerepresentation policy treeplan still obtain approximately optimalperformance. necessary because, general, size decision trees neededrepresent optimal policies exponentially large. keeping decision treesgetting large, resulting planner becomes subject extension Theorem 9and, therefore, attacks PSPACE-complete problem.One emphasis Boutilier Dearden (1996) finding approximately optimalsolutions, hope easier finding optimal solutions.explore worst-case complexity approximation paper, although Lusena,Goldsmith, Mundhenk (1998) produced strong negative results area.related issue one using simulation (random sampling) find approximately optimalsolutions probabilistic planning problems. empirical successes obtainedrelated approach reinforcement learning (Tesauro, 1994; Crites & Barto, 1996),but, again, worst-case complexity probabilistic planning knownlower approximation simulation.6. Conclusionspaper, explored computational complexity plan evaluation plan existence probabilistic domains. found that, compactly represented propositionaldomains, restricting size form policies consideration reducedcomputational complexity plan existence EXP-complete unrestricted plansPSPACE-complete polynomial-size looping plans NPPP -complete polynomialsize acyclic plans. contrast, domains, restricting form policiesconsideration increased computational complexity plan existence P-completeunrestricted plans NP-complete totally ordered plans; plansmaller domain operates often unable exploit important Markovproperties domain. able characterize precisely complexityproblems examined regard current state knowledge complexity theory.Several problems studied turned NPPP -complete. class NPPP promisesuseful researchers uncertainty artificial intelligence capturestype problems resulting choosing (\guessing") solution evaluatingprobabilistic behavior. precisely type problem faced planning algorithmsprobabilistic domains, captures important problems domains well,constructing explanations belief networks designing robust communication networks.provide new conceptually simple NPPP -complete problem, E-Majsat, mayuseful explorations direction.basic structure results plan evaluation complete class C ,plan existence typically NPC -complete. basic structure holds determin31fiLittman, Goldsmith & Mundhenkistic domains: evaluating totally ordered plan propositional domain P-complete (forsuciently powerful domain representations) determining existence polynomialsize totally ordered plan NPP = NP-complete.pragmatic standpoint, intuition searching small plans efficient searching arbitrary size plans suggests exact dynamic-programmingalgorithms, successful domains, may effective propositionaldomains; focus efforts set small plans. Algorithm-developmentenergy, therefore, might fruitfully spent devising heuristics problems class NPPPclass captures essence searching small plans probabilistic domains|someearly results direction appearing (Majercik & Littman, 1998a, 1998b). Complexity theorists recently begun explore classes NPPP liepolynomial hierarchy PSPACE algorithm designers come classes evenrecently. paper marks beginning exploration class problems, much work still done probing algorithmic implications, hopeheuristics NPPP could lead powerful methods solving range importantuncertainty-sensitive combinatorial problems.Acknowledgementswork supported part grants NSF-IRI-97-02576-CAREER (Littman),NSF CCR-9315354 (Goldsmith). gratefully acknowledge Andrew Klapper, Anne Condon, Matthew Levy, Steve Majercik, Chris Lusena, Mark Peot, reviewers helpfulfeedback conversations topic.Appendix A. Complexity E-MajsatE-Majsat problem is: given pair (; k) consisting Boolean formula nvariables x1 ; : : : ; xn number 1 k n, assignment first k variablesx1 ; : : : ; xk majority assignments remaining n,k variables xk+1 ; : : : ; xnsatisfies ?k = n, precisely Boolean satisfiability, classic NP-complete problem.asking whether exists assignment variables makestrue. k = 0, E-Majsat precisely Majsat, well-known PP-complete problem.asking whether majority total assignments makes true.Deciding instance E-Majsat intermediate values k different character.involves NP-type calculation pick good setting first k variablesPP-type calculation see majority assignments remaining variables makestrue. akin searching good answer (plan, schedule, coloring, belief networkexplanation, etc.) combinatorial space \good" determined computationprobabilistic quantities. type computation described classNPPP , show next E-Majsat NPPP -complete.Theorem 15E-MajsatNPPP -complete.32fiComplexity Probabilistic PlanningProof: Membership NPPP follows directly definitions. show completenessE-Majsat, first observe (Toran, 1991) NPPP NP-closure PP-completeset Majsat. Thus, NPPP computation modeled nondeterministic machineN that, possible computation, first guesses sequence bits controlsnondeterministic moves, deterministically performs computation input x s,writes formula qx;s variables z1 ; : : : ; zl query Majsat.Finally, N (x) oracle Majsat accepts s, qx;s 2 Majsat.Given input x, like Cook's Theorem, construct formula x variablesy1; : : : ; yk z1; : : : ; zl every assignment a1; : : : ; ak ; b1 ; : : : ; bl holdsx (a1 ; : : : ; ak ; b1 ; : : : ; bl ) = qx;a1a (b1 ; : : : ; bl ). Thus, (x ; k) 2 E-Majsatassignment y1 ; : : : ; yk , qx;s 2 Majsat N (x) accepts.kReferencesAllender, E., & Ogihara, M. (1996). Relationships among PL, #L, determinant.Theoretical Informatics Applications, 30 (1), 1{21.lvarez, C., & Jenner, B. (1993). hard log-space counting class. Theoretical ComputerScience, 107, 3{30.Backstrom, C. (1995). Expressive equivalence planning formalisms. Artificial Intelligence,76 (1{2), 17{34.Backstrom, C., & Nebel, B. (1995). Complexity results SAS+ planning. ComputationalIntelligence, 11 (4), 625{655.Balcazar, J., Daz, J., & Gabarro, J. (1988/1990). Structural Complexity I/II. EATCSMonographs Theoretical Computer Science. Springer Verlag.Borodin, A., Cook, S., & Pippenger, N. (1983). Parallel computation well-endowedrings space-bounded probabilistic machines. Information Control, 58 (1{3),113{136.Boutilier, C., Dean, T., & Hanks, S. (1998). Decision theoretic planning: Structural assumptions computational leverage. preparation.Boutilier, C., & Dearden, R. (1996). Approximating value trees structured dynamic programming. Saitta, L. (Ed.), Proceedings Thirteenth International ConferenceMachine Learning.Boutilier, C., Dearden, R., & Goldszmidt, M. (1995). Exploiting structure policy construction. Proceedings Fourteenth International Joint Conference ArtificialIntelligence, pp. 1104{1113.Boutilier, C., & Poole, D. (1996). Computing optimal policies partially observabledecision processes using compact representations. Proceedings ThirteenthNational Conference Artificial Intelligence, pp. 1168{1175. AAAI Press/The MITPress.33fiLittman, Goldsmith & MundhenkBylander, T. (1994). computational complexity propositional STRIPS planning.Artificial Intelligence, 69, 161{204.Cassandra, A. R., Kaelbling, L. P., & Littman, M. L. (1994). Acting optimally partiallyobservable stochastic domains. Proceedings Twelfth National ConferenceArtificial Intelligence, pp. 1023{1028 Seattle, WA.Chapman, D. (1987). Planning conjunctive goals. Artificial Intelligence, 32, 333{379.Condon, A. (1992). complexity stochastic games. Information Computation,96 (2), 203{224.Crites, R. H., & Barto, A. G. (1996). Improving elevator performance using reinforcementlearning. Touretzky, D. S., Mozer, M. C., & Hasselmo, M. E. (Eds.), AdvancesNeural Information Processing Systems 8 Cambridge, MA. MIT Press.Dearden, R., & Boutilier, C. (1997). Abstraction approximate decision-theoretic planning. Artificial Intelligence, 89 (1{2), 219{283.Draper, D., Hanks, S., & Weld, D. (1994). Probabilistic planning information gatheringcontingent execution. Proceedings AAAI Spring Symposium DecisionTheoretic Planning, pp. 76{82.Drummond, M., & Bresina, J. (1990). Anytime synthetic projection: Maximizingprobability goal satisfaction. Proceedings Eighth National ConferenceArtificial Intelligence, pp. 138{144. Morgan Kaufmann.Erol, K., Nau, D. S., & Subrahmanian, V. S. (1995). Complexity, decidability undecidability results domain-independent planning. Artificial Intelligence, 76, 75{88.Gill, J. (1977). Computational complexity probabilistic Turing machines. SIAM JournalComputing, 6 (4), 675{695.Goldman, R. P., & Boddy, M. S. (1994). Epsilon-safe planning. Proceedings 10thConference Uncertainty Artificial Intelligence (UAI94), pp. 253{261 Seattle,WA.Goldsmith, J., Littman, M., & Mundhenk, M. (1997a). complexity plan existenceevaluation probabilistic domains. Tech. rep. CS-1997-07, Department ComputerScience, Duke University.Goldsmith, J., Littman, M. L., & Mundhenk, M. (1997b). complexity plan existenceevaluation probabilistic domains. Proceedings Thirteenth Annual Conference Uncertainty Artificial Intelligence (UAI{97), pp. 182{189 San Francisco,CA. Morgan Kaufmann Publishers.Goldsmith, J., Lusena, C., & Mundhenk, M. (1996). complexity deterministicallyobservable finite-horizon Markov decision processes. Tech. rep. 268-96, DepartmentComputer Science, University Kentucky.34fiComplexity Probabilistic PlanningHanks, S. (1996). Decision-theoretic planning unobservable domains undecidable.Personal communication.Hansen, E. A. (1998). Finite-Memory Control Partially Observable Systems. Ph.D. thesis,University Massachusetts.Jung, H. (1985). probabilistic time space. Proceedings 12th ICALP, pp. 281{291.Lecture Notes Computer Science, Springer-Verlag.Kaelbling, L. P., Littman, M. L., & Cassandra, A. R. (1998). Planning actingpartially observable stochastic domains. Artificial Intelligence, 101 (1{2), 99{134.Koenig, S., & Simmons, R. G. (1994). Risk-sensitive planning probabilistic decisiongraphs. Proceedings 4th International Conference Principles KnowledgeRepresentation Reasoning, pp. 363{373.Kushmerick, N., Hanks, S., & Weld, D. S. (1995). algorithm probabilistic planning.Artificial Intelligence, 76 (1-2), 239{286.Ladner, R. (1989). Polynomial space counting problems. SIAM Journal Computing, 18,1087{1097.Lin, S.-H., & Dean, T. (1995). Generating optimal policies high-level plans conditional branches loops. Proceedings Third European WorkshopPlanning, pp. 205{218.Littman, M. L. (1997a). Probabilistic propositional planning: Representations complexity. Proceedings Fourteenth National Conference Artificial Intelligence,pp. 748{754. AAAI Press/The MIT Press.Littman, M. L. (1997b). Solving large POMDPs: Lessons complexity theory. Talkpresented DARPA AI Workshop Providence, RI. Slides available URLhttp://www.cs.duke.edu/mlittman/talks/darpa97-pomdp.ps.Lovejoy, W. S. (1991). survey algorithmic methods partially observable Markovdecision processes. Annals Operations Research, 28 (1), 47{65.Lusena, C., Goldsmith, J., & Mundhenk, M. (1998). Nonapproximability results Markovdecision processes. Tech. rep. UK CS Dept TR 275-98, University Kentucky.Majercik, S. M., & Littman, M. L. (1998a). MAXPLAN: new approach probabilisticplanning. Simmons, R., Veloso, M., & Smith, S. (Eds.), Proceedings FourthInternational Conference Artificial Intelligence Planning, pp. 86{93. AAAI Press.Majercik, S. M., & Littman, M. L. (1998b). Using caching solve larger probabilisticplanning problems. Proceedings Fifteenth National Conference ArtificialIntelligence, pp. 954{959. AAAI Press/The MIT Press.Mansell, T. M. (1993). method planning given uncertain incomplete information.Proceedings 9th Conference Uncertainty Artificial Intelligence, pp.350{358. Morgan Kaufmann Publishers.35fiLittman, Goldsmith & MundhenkMcAllester, D., & Rosenblitt, D. (1991). Systematic nonlinear planning. Proceedings9th National Conference Artificial Intelligence, pp. 634{639.Mundhenk, M., Goldsmith, J., & Allender, E. (1997a). complexity policy-evaluationfinite-horizon partially-observable Markov decision processes. Proceedings22nd Symposium Mathematical Foundations Computer Science (publishedLecture Notes Computer Science). Springer-Verlag.Mundhenk, M., Goldsmith, J., Lusena, C., & Allender, E. (1997b). Encyclopaedia complexity results finite-horizon Markov decision process problems. Tech. rep. UK CSDept TR 273-97, University Kentucky.Papadimitriou, C. H. (1994). Computational Complexity. Addison-Wesley, Reading, MA.Papadimitriou, C. H., & Tsitsiklis, J. N. (1987). complexity Markov decision processes. Mathematics Operations Research, 12 (3), 441{450.Platzman, L. K. (1981). feasible computational approach infinite-horizon partiallyobserved Markov decision problems. Tech. rep. J-81-2, Georgia Institute Technology,Atlanta, GA.Puterman, M. L. (1994). Markov Decision Processes|Discrete Stochastic Dynamic Programming. John Wiley & Sons, Inc., New York, NY.Rabin, M. O. (1963). Probabilistic automata. Information Control, 6 (3), 230{245.Roth, D. (1996). hardness approximate reasoning. Artificial Intelligence, 82 (1{2),273{302.Simon, J. (1975). central problems computational complexity. Ph.D. thesis,Cornell University. Also Cornell Department Computer Science Technical ReportTR75-224.Smith, D. E., & Williamson, M. (1995). Representation evaluation plans loops.Working notes 1995 Stanford Spring Symposium Extended TheoriesAction.Tesauro, G. (1994). TD-Gammon, self-teaching backgammon program, achieves masterlevel play. Neural Computation, 6 (2), 215{219.Toda, S. (1991). PP hard polynomial-time hierarchy. SIAM Journal Computing, 20, 865{877.Toran, J. (1991). Complexity classes defined counting quantifiers. Journal ACM,38 (3), 753{774.Vinay, V. (1991). Counting auxiliary pushdown automata semi-unbounded arithmeticcircuits. Proc. 6th Structure Complexity Theory Conference, pp. 270{284. IEEE.36fiJournal Artificial Intelligence Research 9 (1998) 317-365Submitted 5/98; published 12/98AntNet: Distributed Stigmergetic ControlCommunications NetworksGianni Di CaroMarco DorigoIRIDIA, Universite Libre de Bruxelles50, av. F. Roosevelt, CP 194/6, 1050 - Brussels, Belgiumgdicaro@iridia.ulb.ac.bemdorigo@ulb.ac.beAbstractpaper introduces AntNet, novel approach adaptive learning routingtables communications networks. AntNet distributed, mobile agents based MonteCarlo system inspired recent work ant colony metaphor solvingoptimization problems. AntNet's agents concurrently explore network exchangecollected information. communication among agents indirect asynchronous,mediated network itself. form communication typical social insectscalled stigmergy. compare algorithm six state-of-the-art routing algorithms coming telecommunications machine learning fields. algorithms'performance evaluated set realistic testbeds. run many experimentsreal artificial IP datagram networks increasing number nodes several paradigmatic spatial temporal trac distributions. Results encouraging.AntNet showed superior performance experimental conditions respectcompetitors. analyze main characteristics algorithm try explainreasons superiority.1. IntroductionWorldwide demand supply communications networks services growing exponentially. Techniques network control (i.e., online off-line monitoring managementnetwork resources) play fundamental role best exploiting new transmissionswitching technologies meet user's requests.Routing core whole network control system. Routing, conjunctionadmission, ow, congestion control components, determines overall networkperformance terms quality quantity delivered service (Walrand & Varaiya,1996). Routing refers distributed activity building using routing tables, onenode network, tell incoming data packets outgoing link usecontinue travel towards destination node.Routing protocols policies accommodate con icting objectives constraints imposed technologies user requirements rapidly evolving commercialscientific pressures. Novel routing approaches required eciently manage distributed multimedia services, mobile users networks, heterogeneous inter-networking,service guarantees, point-to-multipoint communications, etc. (Sandick & Crawley, 1997;ATM Forum, 1996).adaptive distributed routing algorithm propose paper mobileagent-based, online Monte Carlo technique inspired previous work artificial antc 1998 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.fiDi Caro & Dorigocolonies and, generally, notion stigmergy (Grasse, 1959), is, indirect communication taking place among individuals modifications inducedenvironment.Algorithms take inspiration real ants' behavior finding shortest paths (Goss,Aron, Deneubourg, & Pasteels, 1989; Beckers, Deneubourg, & Goss, 1992) using information trail chemical substance (called pheromone) deposited ants,recently successfully applied several discrete optimization problems (Dorigo,Maniezzo, & Colorni, 1991; Dorigo, 1992; Dorigo, Maniezzo, & Colorni, 1996; Dorigo &Gambardella, 1997; Schoonderwoerd, Holland, Bruten, & Rothkrantz, 1996; Schoonderwoerd, Holland, & Bruten, 1997; Costa & Hertz, 1997). algorithms set artificialants collectively solve problem consideration cooperative effort.effort mediated indirect communication information problem structureants concurrently collect building solutions using stochastic policy. Similarly,AntNet, algorithm propose paper, set concurrent distributed agentscollectively solve adaptive routing problem. Agents adaptively build routing tableslocal models network status using indirect non-coordinated communicationinformation collect exploring network.ensure meaningful validation algorithm performance devised realisticsimulation environment terms network characteristics, communications protocoltrac patterns. focus IP (Internet Protocol) datagram networks irregulartopology consider three real artificial topologies increasing numbernodes several paradigmatic temporal spatial trac distributions. reportbehavior AntNet compared effective static adaptive state-of-the-artrouting algorithms (vector-distance link-state shortest paths algorithms (Steenstrup,1995), recently introduced algorithms based machine learning techniques).AntNet shows best performance stable behavior consideredsituations. many experiments superiority striking. discuss resultsmain properties algorithm, compared competitors.paper organized follows. Section 2 definition, taxonomy characteristics routing problem reported. Section 3 describe communicationnetwork model used. Section 4 describes detail AntNet, novel routing algorithm,Section 5 brie describe algorithms compared AntNet.Section 6, experimental settings reported terms trac, networks algorithmparameters. Section 7 reports several experimental results. Section 8 discussresults try explain AntNet's superior performance. Finally, Section 9, discussrelated work, Section 10, draw conclusions outline directions futureresearch.2. Routing: Definition CharacteristicsRouting distributed systems characterized follows. Let G = (V; E ) directedweighted graph, node set V represents processing/queuing and/or forwarding unit edge transmission system. main task routing algorithmdirect data ow source destination nodes maximizing network performance.318fiAntNet: Distributed Stigmergetic Control Communications Networksproblems interested in, data ow statically assigned followsstochastic profile hard model.specific case communications networks (Steenstrup, 1995; Bertsekas & Gallager,1992), routing algorithm manage set basic functionalities tightlyinteracts congestion admission control algorithms, links' queuingpolicy, user-generated trac. core routing functions (i)acquisition, organization distribution information user-generated tracnetwork states, (ii) use information generate feasible routes maximizingperformance objectives, (iii) forwarding user trac along selected routes.way three functionalities implemented strongly depends underlying network switching transmission technology, featuresinteracting software layers. Concerning point (iii), two main forwarding paradigmsuse: circuit packet-switching (also indicated terms connection-orientedconnection-less). circuit-switching approach, setup phase looks reservesresources assigned incoming session. case, data packetsbelonging session follow path. Routers required keep stateinformation active sessions. packet-switching approach, reservationphase, state information maintained routers data packets follow differentpaths. intermediate node autonomous decision taken concerning node'soutgoing link used forward data packet toward destination.work described paper, focus packet-switching paradigm,technique developed used also manage circuit-switching expectqualitatively similar results.2.1 Broad Taxonomycommon feature routing algorithms presence every network nodedata structure, called routing table, holding information used algorithmmake local forwarding decisions. routing table local database localmodel global network status. type information contains wayinformation used updated strongly depends algorithm's characteristics.broad classification routing algorithms following:centralized versus distributed;static versus adaptive.centralized algorithms, main controller responsible updating node'srouting tables and/or make every routing decision. Centralized algorithms usedparticular cases small networks. general, delays necessary gatherinformation network status broadcast decisions/updates makeinfeasible practice. Moreover, centralized systems fault-tolerant. work,consider exclusively distributed routing.distributed routing systems, computation routes shared among networknodes, exchange necessary information. distributed paradigm currentlyused majority network systems.static (or oblivious) routing systems, path taken packet determinedbasis source destination, without regard current network state.319fiDi Caro & Dorigopath usually chosen shortest one according cost criterion,changed account faulty links nodes.Adaptive routers are, principle, attractive, adapt routing policy time spatially varying trac conditions. drawback, causeoscillations selected paths. fact cause circular paths, well large uctuations measured performance. addition, adaptive routing lead easilyinconsistent situations, associated node link failures local topological changes.stability inconsistency problems evident connection-lessconnection-oriented networks (Bertsekas & Gallager, 1992).Another interesting way looking routing algorithms optimization perspective. case main paradigms are:minimal routing versus non-minimal routing;optimal routing versus shortest path routing.Minimal routers allow packets choose minimal cost paths, non-minimalalgorithms allow choices among available paths following heuristic strategies(Bolding, Fulgham, & Snyder, 1994).Optimal routing network-wide perspective objective optimize function individual link ows (usually function sum link costs assignedbasis average packet delays) (Bertsekas & Gallager, 1992).Shortest path routing source-destination pair perspective: global costfunction optimize. objective determine shortest path (minimum cost)two nodes, link costs computed (statically adaptively) followingstatistical description link states. strategy based individual rathergroup rationality (Wang & Crowcroft, 1992). Considering different content storedrouting table, shortest path algorithms subdivided two classescalled distance-vector link-state (Steenstrup, 1995).Optimal routing static (it seen solution multicommodity ow problem) requires knowledge trac characteristics. Shortest paths algorithmsexible, don't require priori knowledge trac patternswidely used routing algorithms.appendix A, detailed description properties optimal shortestpath routing algorithms reported.Section 4, introduce novel distributed adaptive method, AntNet, sharesoptimization perspective (minimal non-minimal) shortest path algorithmsusual implementation paradigms (as depicted appendix A).2.2 Main Characteristics Routing Problemmain characteristics routing problem communications networks summarized following way:Intrinsically distributed strong real-time constraints: fact, databasedecision system completely distributed network nodes, failuresstatus information propagation delays negligible respect user's320fiAntNet: Distributed Stigmergetic Control Communications Networkstrac patterns. impossible get complete up-to-date knowledge distributed state, remains hidden. decision node, routing algorithmmake use local, up-to-date information, non-local, delayed informationcoming nodes.Stochastic time-varying: session arrival data generation process is,general case, non-stationary stochastic. Moreover, stochastic processinteracts recursively routing decisions making infeasible build working model whole system (to used example dynamic programmingframework).Multi-objective: several con icting performance measures usually taken account. common throughput (bit/sec) average packet delay (sec).former measures quantity service network able offercertain amount time (amount correctly delivered bits per time unit),latter defines quality service produced time. Citing BertsekasGallager (1992), page 367: \the effect good routing increase throughputvalue average delay per packet high offered load conditionsdecrease average delay per packet low moderate offered load conditions".performance measures consider impact routing algorithm network resources terms memory, bandwidth computation, algorithmsimplicity, exibility, etc.Multi-constraint: constraints imposed underlying network technology,network services provided user services requested. general, users asklow-cost, high-quality, reliable, distributed multimedia services available across heterogeneous static mobile networks. Evaluating technological commercial factors,network builders service providers try accommodate requests maximizing profit criteria. Moreover, high level fault-tolerance reliabilityrequested modern high-speed networks, user sessions formulate preciserequests network resources. case, session accepted,system able guarantee session gets resources needs,recoverable fault event.interesting note characteristics make problem routing belongclass reinforcement learning problems hidden state (Bertsekas & Tsitsiklis,1996; Kaelbling, Littman, & Moore, 1996; McCallum, 1995). distributed system agents,components routing algorithm node, determine continual onlinelearning best routing table values respect network's performance criteria.exact measure evaluation scores forwarding decisions available, neither onlineform training set. Moreover, distributed nature problemconstraints, complete state network hidden agent.3. Communication Network Modelpaper, focus irregular topology connection-less networks IP-like network layer (in ISO-OSI terminology) simple transport layer. particular,focus wide-area networks (WAN). cases, hierarchical organization schemes321fiDi Caro & Dorigoadopted.1 Roughly speaking, sub-networks seen single host nodes connectedinterface nodes called gateways. Gateways perform fairly sophisticated network layer tasks,including routing. Groups gateways, connected arbitrary topology, define logicalareas. Inside area, gateways hierarchical level \ at" routingperformed among them. Areas communicate means area border gateways.way, computational complexity routing problem, seen gateway,much reduced (e.g., Internet, OSPF areas typically group 10 300 gateways),complexity design management routing protocol much increased.instance communication network mapped directed weighted graphN processing/forwarding nodes. links viewed bit pipes characterizedbandwidth (bit/sec) transmission delay (sec), accessed followingstatistical multiplexing scheme. purpose, every node, type store-and-forward,holds buffer space incoming outgoing packets stored. buffershared resource among queues attached every incoming outgoing linknode. traveling packets subdivided two classes: data routing packets.packets class priority, queued servedbasis first-in-first-out policy, routing packets greater priority datapackets. workload defined terms applications whose arrival rate dictatedselected probabilistic model. application (or session, connection following),mean process sending data packets origin node destination node.number packets send, sizes intervals assigned accordingdefined stochastic process. didn't make distinction among nodes, acttime hosts (session end-points) gateways/routers (forwarding elements).adopted workload model incorporates simple ow control mechanism implementedusing fixed production window session's packets generation. windowdetermines maximum number data packets waiting sent. sent, packetconsidered acknowledged. means transport layer neither manages errorcontrol, packet sequencing, acknowledgements retransmissions.2incoming packet, node's routing component uses information storedlocal routing table assign outgoing link used forward packet towardtarget node. link resources available, reserved transferset up. time takes move packet one node neighboring one dependspacket size link transmission characteristics. If, packet's arrival,enough buffer space hold it, packet discarded. Otherwise, servicetime stochastically generated newly arrived packet. time represents delaypacket arrival time time put buffer queueoutgoing link local routing component selected it.Situations causing temporary steady alteration network topologyphysical characteristics taken account (link node failure, adding deletingnetwork components, etc.).1. hierarchical structure adopted Internet, organized hierarchical Autonomous Systemsmultiple routing areas inside Autonomous System (Moy, 1998).2. choice \Simple Trac" model MaRS network simulator (Alaettinoglu,Shankar, Dussa-Zieger, & Matta, 1992). seen basic form File Transfer Protocol(FTP).322fiAntNet: Distributed Stigmergetic Control Communications Networksdeveloped complete network simulator C++. discrete event simulatorusing main data structure event list, holds next future events.simulation time continuous variable set currently scheduled event. aimsimulator closely mirror essential features concurrent distributedbehavior generic communication network without sacrificing eciency exibilitycode development.end section remarks concerning two features model.First, chose implement \real" transport layer proper managementerror, ow, congestion control. fact, additional control componentconsiderable impact network performance,3 making dicult evaluatestudy properties control algorithm without taking consideration complexway interacts control components. Therefore, chose testbehavior algorithm competitors conditions numberinteracting components minimal routing component evaluated isolation,allowing better understanding properties. study routing conjunction error,ow congestion control, components designed time,allow good match among characteristics produce synergetic effect.Second, chose work connection-less connection-oriented networks connection-oriented schemes mainly used networks able deliverQuality Service (QoS) (Crawley, Nair, Rajagopalan, & Sandick, 1996).4 case,suitable admission control algorithms introduced, taking account manyeconomic technological factors (Sandick & Crawley, 1997). But, again, first stepthink reasonable try check validity routing algorithmreducing number components heavily uencing network behavior.4. AntNet: Adaptive Agent-based Routing Algorithmcharacteristics routing problem (discussed Section 2.2) make well suitedsolved mobile multi-agent approach (Stone & Veloso, 1996; Gray, Kotz, Nog,Rus, & Cybenko, 1997). processing paradigm good match distributednon-stationary (in topology trac patterns) nature problem, presents highlevel redundancy fault-tolerance, handle multiple objectives constraintsexible way.AntNet, routing algorithm propose paper, mobile agents system showing essential features parallel replicated Monte Carlo systems (Streltsov & Vakili,1996). AntNet takes inspiration previous work artificial ant colonies techniquessolve combinatorial optimization problems (Dorigo et al., 1991; Dorigo, 1992; Dorigo et al.,1996; Dorigo & Gambardella, 1997) telephone network routing (Schoonderwoerd et al.,3. example, authors reported improvement ranging 2 30% various performancemeasures real Internet trac (Danzig, Liu, & Yan, 1994) changing Reno versionVegas version TCP (Peterson & Davie, 1996) (the current Internet Transport Control Protocol),authors even claimed improvements ranging 40 70% (Brakmo, O'Malley, & Peterson,1994).4. case current Internet, IP bearer service \best-effort" type, meaningbest guarantees service quality terms delay bandwidthjitter, etc., assured.323fiDi Caro & Dorigo1996, 1997). core ideas techniques (for review see Dorigo, Di Caro,Gambardella, 1998) (i) use repeated concurrent simulations carriedpopulation artificial agents called \ants" generate new solutions problem, (ii)use agents stochastic local search build solutions incremental way,(iii) use information collected past simulations direct future searchbetter solutions.artificial ant colony approach, following iterative process, ant buildssolution using two types information locally accessible: problem-specific information(for example, distance among cities traveling salesman problem), information addedants previous iterations algorithm. fact, building solution,ant collects information problem characteristics performance,uses information modify representation problem, seen locallyants. representation problem modified way informationcontained past good solutions exploited build new better solutions. formindirect communication mediated environment called stigmergy, typicalsocial insects (Grasse, 1959).AntNet, retain core ideas artificial ant colony paradigm, applysolve adaptive way routing problem datagram networks.Informally, AntNet algorithm main characteristics summarizedfollows.regular intervals, concurrently data trac, network nodemobile agents asynchronously launched towards randomly selected destinationnodes.Agents act concurrently independently, communicate indirect way,information read write locally nodes.agent searches minimum cost path joining source destination nodes.agent moves step-by-step towards destination node. intermediatenode greedy stochastic policy applied choose next node move to.policy makes use (i) local agent-generated maintained information, (ii) localproblem-dependent heuristic information, (iii) agent-private information.moving, agents collect information time length, congestionstatus node identifiers followed path.arrived destination, agents go back source nodesmoving along path opposite direction.backward travel, local models network status local routingtable visited node modified agents function pathfollowed goodness.returned source node, agents die.following subsections scheme explained, components explicated discussed, detailed description algorithm given.324fiAntNet: Distributed Stigmergetic Control Communications Networks4.1 Algorithm Description CharacteristicsAntNet conveniently described terms two sets homogeneous mobile agents (Stone& Veloso, 1996), called following forward backward ants. Agents5 setpossess structure, differently situated environment; is,sense different inputs produce different, independent outputs.broadly classified deliberative agents, behave reactively retrievingpre-compiled set behaviors, time maintain complete internal statedescription. Agents communicate indirect way, according stigmergy paradigm,information concurrently read write two data structures storednetwork node k (see Figure 1):Outgoing LinksNetwork NodesRouting TableNetworkNodeLocalP1 1P1 2........P1 NP2 1P2 2........P2 NPL 1PL 2........PL NTrafficStatisticsNetwork NodesStat (1)Stat (2)Stat(N)Figure 1: Node structures used mobile agents AntNet case nodeL neighbors network N nodes. routing table organizedvector-distance algorithms, entries probabilistic values. structurecontaining statistics local trac plays role local adaptive modeltrac toward possible destination.i) routing table Tk , organized vector-distance algorithms (see Appendix A),probabilistic entries. Tk defines probabilistic routing policy currentlyadopted node k: possible destination neighbor node n, Tkstores probability value Pnd expressing goodness (desirability), currentnetwork-wide routing policy, choosing n next node destination noded:XPnd = 1; 2 [1; N ]; Nk = fneighbors(k)g:ii)n2Nkarray Mk (d ; 2 ; Wd ), data structures defining simple parametric statisticalmodel trac distribution network seen local node k.model adaptive described sample means variances computedtrip times experienced mobile agents, moving observation window Wdused store best value Wbestd agents' trip time.5. following, use interchangeably terms ant agent.325fiDi Caro & Dorigodestination network, estimated mean variance, 2 ,give representation expected time go stability. used arithmetic, exponential windowed strategies compute statistics. Changing strategy affect performance much, observed best results usingexponential model:6+ (ok!d , );22 + ((ok!d , )2 , 2 );(1)ok!d new observed agent's trip time node k destination d.7moving observation window Wd used compute value Wbestd bestagents' trip time towards destination observed last w samples.new sample, w incremented modulus jWjmax , jWjmax maximum allowedsize observation window. value Wbestd represents short-term memoryexpressing moving empirical lower bound estimate time go nodecurrent node.seen memories local nodes capturing different aspectsnetwork dynamics. model maintains absolute distance/time estimatesnodes, routing table gives relative probabilistic goodness measures linkdestination pair current routing policy implemented network.AntNet algorithm described follows.1. regular intervals every network node s, mobile agent (forward ant) Fs!dlaunched toward destination node discover feasible, low-cost pathnode investigate load status network. Forward ants sharequeues data packets, experience trac loads. Destinationslocally selected according data trac patterns generated local workload:fsd measure (in bits number packets) data ow ! d,probability creating node forward ant node destinationfpd = N sd :Xfsd0(2)d0 =1way, ants adapt exploration activity varying data trac distribution.2. traveling toward destination nodes, agents keep memory pathstrac conditions found. identifier every visited node k timeelapsed since launching time arrive k-th node pushed onto memorystack Ss!d (k).6. model used Jacobson/Karels algorithm estimate retransmission timeoutsInternet TCP(Peterson & Davie, 1996).7. factor weights number recent samples really affect average. weightti -th sample used estimate value j samplings, j > i, is: (1 , )j,i .way, example, = 0:1, approximately latest 50 observations really uenceestimate, = 0:05, latest 100, on. Therefore, number effective observations5(1=).326fiAntNet: Distributed Stigmergetic Control Communications Networks3. node k, traveling agent headed towards destination selects noden move choosing among neighbors already visit,neighbors case previously visited. neighbor n selected0 computed normalized sum probabilisticprobability (goodness) Pndentry Pnd routing table heuristic correction factor ln taking accountstate (the length) n-th link queue current node k:0 =PndPnd + ffln1 + ff(jNk j , 1) :(3)heuristic correction ln [0,1] normalized value proportional length qn(in bits waiting sent) queue link connecting node kneighbor n:qln = 1 , jN jn :kXqn0(4)n0 =1value ff weights importance heuristic correction respectprobability values stored routing table. ln ects instantaneous statenode's queues, assuming queue's consuming process almost stationaryslowly varying, ln gives quantitative measure associated queue waitingtime. routing tables values, hand, outcome continuallearning process capture current past status whole networkseen local node. Correcting values values l allowssystem \reactive", time avoiding following networkuctuations. Agent's decisions taken basis combination long-termlearning process instantaneous heuristic prediction.experiments ran, observed introduced correctioneffective mechanism. Depending characteristics problem, best valueassign weight ff vary, ff ranges 0.2 0.5, performancedoesn't change appreciably. lower values, effect l vanishing,higher values resulting routing tables oscillate and, cases, performancedegrades.4. cycle detected, is, ant forced return already visited node,cycle's nodes popped ant's stack memorydestroyed. cycle lasted longer lifetime ant enteringcycle, (that is, cycle greater half ant's age) ant destroyed.fact, case agent wasted lot time probably wrong sequencedecisions congestion states. Therefore, agent carryingold misleading memory network state counterproductive useupdate routing tables (see below).5. destination node reached, agent Fs!d generates another agent(backward ant) Bd!s , transfers memory, dies.327fiDi Caro & Dorigo6. backward ant takes path corresponding forward ant,opposite direction.8 node k along path pops stack Ss!d(k)know next hop node. Backward ants share link queues datapackets; use higher priority queues, task quickly propagaterouting tables information accumulated forward ants.7. Arriving node k coming neighbor node f , backward ant updatestwo main data structures node, local model trac Mk routing table Tk , entries corresponding (forward ant) destination noded. precautions, updates performed also entries correspondingevery node k0 2 Sk!d; k0 6= \sub-paths" followed ant Fs!d visiting current node k. fact, elapsed trip time sub-path statistically\good" (i.e., less + (; ), estimate confidence interval), time value used update corresponding statisticsrouting table. contrary, trip times sub-paths deemed good,statistical sense defined above, used don't give correct ideatime go toward sub-destination node. fact, forward ant routingdecisions made function destination node. perspective,sub-paths side effects, intrinsically sub-optimal localvariations trac load (we can't reason perspective dynamicprogramming, non-stationarity problem representation). Obviously, case good sub-path use it: ant discovered, zero cost,additional good route. following two items way updateddescribed respect generic \destination" node d0 2 Sk!d.i) Mk updated values stored stack memory Ss!d(k). timeelapsed arrive (for forward ant) destination node d0 startingcurrent node used update mean variance estimates, d0 d0 2 ,best value observation window Wd0 . way, parametricmodel traveling time destination d0 maintained. mean valuetime dispersion vary strongly, depending trac conditions:poor time (path) low trac load good one heavytrac load. statistical model able capture variabilityfollow robust way uctuations trac. model playscritical role routing table updating process (see item (ii) below). Therefore,investigated several ways build effective computationally inexpensivemodels, described following Section 4.2.ii) routing table Tk changed incrementing probability Pfd0 (i.e.,probability choosing neighbor f destination d0 ) decrementing,normalization, probabilities Pnd0 . amount variationprobabilities depends measure goodness associate trip timeTk!d0 experienced forward ant, given below. time representsavailable explicit feedback signal score paths. gives clear indication goodness r followed route proportional8. assumption requires links network bi-directional. modern networksreasonable assumption.328fiAntNet: Distributed Stigmergetic Control Communications Networkslength physical point view (number hops, transmission capacityused links, processing speed crossed nodes) trac congestionpoint view (the forward ants share queues data packets).time measure , composed sub-paths elapsed times, cannotassociated exact error measure, given don't know \optimal"trip times, depend whole network load status.9 Therefore,used reinforcement signal. gives rise credit assignmentproblem typical reinforcement learning field (Bertsekas & Tsitsiklis, 1996;Kaelbling et al., 1996). define reinforcement r r(T; Mk )function goodness observed trip time estimated basislocal trac model. r dimensionless value, r 2 (0; 1], used currentnode k positive reinforcement node f backward ant Bd!s comesfrom. r takes account average far observed valuesdispersion score goodness trip time , smalleris, higher r (the exact definition r discussed next subsection).probability Pfd0 increased reinforcement value follows:Pfd0Pfd0 + r(1 , Pfd0 ):(5)way, probability Pfd0 increased value proportionalreinforcement received previous value node probability (that is,given reinforcement, small probability values increased proportionallybig probability values, favoring way quick exploitation new,good, discovered paths).Probabilities Pnd0 destination d0 neighboring nodes n implicitlyreceive negative reinforcement normalization. is, valuesreduced sum probabilities still 1:Pnd0Pnd0 , rPnd0 ; n 2 Nk ; n 6= f:(6)important remark every discovered path receives positive reinforcement selection probability, reinforcement (in general) non-linearfunction goodness path, estimated using associated trip time.way, (explicit) assigned value r plays role, also(implicit) ant's arrival rate. strategy based trusting paths receiveeither high reinforcements, independent frequency, low frequentreinforcements. fact, trac load condition, path receives onehigh reinforcements much better previously explored paths.hand, transient phase sudden increase network loadpaths likely high traversing times respect learnedmodel preceding, low congestion, situation. Therefore, casegood paths differentiated frequency ants' arrivals.9. network congested state, trip times score poorly respect timesobserved low load situations. Nevertheless, path high trip time scored goodpath trip time significantly lower trip times observed congestedsituation.329fiDi Caro & DorigoAssigning always positive, low, reinforcement value case pathshigh traversal time allows implementation mechanism basedfrequency reinforcements, while, time, avoids givingexcessive credit paths high traversal time due poor quality.use probabilistic entries specific AntNet observedeffective, improving performance, cases, even 30%-40%.Routing tables used probabilistic way ants alsodata packets. observed improve AntNet performance,means way routing tables built AntNet well matchedprobabilistic distribution data packets good paths.Data packets prevented choosing links low probability remapping 's entries means power function f (p) = pff ; ff > 1,emphasizes high probability values reduces lower ones (in experimentsset ff 1.2).Figure 2 gives high-level description algorithm pseudo-code, Figure3 illustrates simple example algorithm behavior. detailed discussioncharacteristics algorithm postponed Section 8, performancealgorithm analyzed respect set competitor algorithms. way,characteristics AntNet meaningfully evaluated comparedstate-of-the-art algorithms.4.2 Score Goodness Ant's Trip Timereinforcement r critical quantity assigned considering three mainaspects: (i) paths receive increment selection probability proportionalgoodness, (ii) goodness relative measure, depends tracconditions, estimated means model M, (iii) importantfollow trac uctuations. last aspect particularly important. Uncontrolledoscillations routing tables one main problems shortest paths routing(Wang & Crowcroft, 1992). important able set best trade-offstability adaptivity.investigated several ways assign r values trying take accountthree requirements:simplest way set r = constant: independently ant's \experimentoutcomes", discovered paths rewarded way. simplemeaningful case, work implicit reinforcement mechanism duedifferentiation ant arrival rates. Ants traveling along faster paths arrivehigher rate ants, hence paths receive higher cumulativereward.10 obvious problem approach lies fact that, although antsfollowing longer paths arrive delayed, nevertheless effectrouting tables ants followed shorter paths.10. case, core algorithm based capability \real" ants discover shortest pathscommunicating means pheromone trails (Goss et al., 1989; Beckers et al., 1992).330fiAntNet: Distributed Stigmergetic Control Communications Networks:= Current time;tend := Time length simulation;:= Time interval ants generation;foreach (Node) = Concurrent activity network == Local trac model;= Node routing table;( tend )parallel = Concurrent activity node =( mod = 0)destination node := SelectDestinationNode(data trac distribution);LaunchForwardAnt(destination node, source node);endforeach (ActiveForwardAnt [source node, current(current node 6= destination node)node, destination node])next hop node := SelectLink(current node, destination node,T ; link queues);PutAntOnLinkQueue(current node, next hop node);WaitOnDataLinkQueue(current node, next hop node);CrossTheLink(current node, next hop node);PushOnTheStack(next hop node, elapsed time);current node := next hop node;endLaunchBackwardAnt(destination node, source node, stack data);Die();end foreachforeach (ActiveBackwardAnt [source node, current(current node 6= destination node)node, destination node])next hop node := PopTheStack();WaitOnHighPriorityLinkQueue(current node, next hop node);CrossTheLink(current node, next hop node);UpdateLocalTracModel(M, current node, source node, stack data);reinforcement := GetReinforcement(current node, source node, stack data, M);UpdateLocalRoutingTable(T , current node, source node, reinforcement);endend foreachend parallelendend foreachFigure 2: AntNet's top-level description pseudo-code. described actions take placecompletely distributed concurrent way network nodes (while,text, AntNet described individual ant's perspective).constructs level indentation inside context statementparallel executed concurrently. processes data generationforwarding described, thought acting concurrentlyants.331fiDi Caro & DorigoForward Ant (14)123(144) Backward AntFigure 3: Example AntNet behavior. forward ant, F1!4 , moves along path1 ! 2 ! 3 ! 4 and, arrived node 4, launches backward ant B4!1travel opposite direction. node k; k = 3; : : : ; 1, backwardant use stack contents S1!4 (k) update values Mk (4 ; 4 2 ; W4 ),and, case good sub-paths, update also values Mk (i ; 2 ; Wi ); =k + 1; : : : ; 3. time routing table updated incrementinggoodness Pj 4 , j = k + 1, last node k + 1 ant B4!1 came from,case node = k + 1; : : : ; 4 destination node, decrementingvalues P neighbors (here shown). incrementfunction trip time experienced forward ant going node kdestination node i. M, routing table always updated casenode 4 destination, nodes i0 = k + 1; : : : ; 3 sub-pathstaken consideration destination nodes trip time associatedcorresponding sub-path forward ant statistically good.experiments ran strategy, algorithm showed moderately goodperformance. results suggest \implicit" component algorithm,based ant arrival rate, plays important role. course, competestate-of-the-art algorithms, available information path costs used.elaborate approaches define r function ant's trip time ,parameters local statistical model M. tested several alternatives, usingdifferent linear, quadratic hyperbolic combinations values.following limit discussion functional form gave best results,used reported experiments:r = c1Wbest+ c2 (I , IIsup ),+Iinf(T , Iinf ) :sup inf(7)Equation 7, Wbest best trip time experienced ants traveling towarddestination d, last observation window W . maximum size window(the maximum number considered samples resetting Wbest value) assignedbasis coecient Equation 1. said, weights numbersamples effectively giving contribution value estimate, defining sortmoving exponential window. Following expression number effective samplesreported footnote 7, set jWjmax = 5(c=), c < 1. way, longterm exponential mean short-term windowing referring comparable setobservations, short-term mean evaluated fraction c samples used332fiAntNet: Distributed Stigmergetic Control Communications Networkslong-term one. Isup Iinf convenient estimates limitsp approximatejWj), z =confidenceinterval.setW,=+z(=supinfbestp111= (1 , ) gives selected confidence level. level arbitrarinesscomputation confidence interval, set asymmetric wayarithmetic estimates. Anyway, need quick, raw estimatemean value dispersion values (for example, local bootstrap procedurecould applied extract meaningful confidence interval, choicereasonable CPU time-consuming perspective).first term Equation 7 simply evaluates ratio current trip timebest trip time observed current observation window. term correctedsecond one, evaluates far value Iinf relationextension confidence interval, is, considering stability latest triptimes. coecients c1 c2 weight importance term. first termimportant one, second term plays role correction. currentimplementation algorithm set c1 = 0:7 c2 = 0:3. observed c2 shouldn'tbig (0.35 upper limit), otherwise performance starts degrade appreciably.behavior algorithm quite stable c2 values range 0.15 0.35setting c2 0.15 slightly degrades performance. algorithm robust changes, defines confidence level: varying confidence level range 75%95% changes performance little. best results obtained values around75%80%. observed algorithm robust internal parameter settingsdidn't try \adapt" set parameters problem instance. differentexperiments carried \reasonable" settings. could surely improveperformance means finer tuning parameters, didn'tinterested implementing robust system, considering world networksincredibly varied terms trac, topologies, switch transmission characteristics, etc.value r obtained Equation 7 finally transformed means squashfunction s(x):!,1;s(x) = 1 + expxjN jkrs(r):s(1)x 2 (0; 1]; 2 R+ ;(8)(9)Squashing r values allows system sensitive rewarding good (high)values r, tendency saturate rewards bad (near zero) rvalues: scale compressed lower values expanded upper part.way emphasis put good results, bad results play minor role.11. expression obtained using Tchebycheff inequality allows definition confidenceinterval random variable following distribution (Papoulis, 1991) Usually, specific probabilitydensities Tchebycheff bound high, conveniently use (i) wantavoid make assumptions distribution and, (ii) need raw estimateconfidence interval.333fiDi Caro & Dorigo10.85 neighbors4 neighbors3 neighbors2 neighbors0.6s(r)/s(1)coecient a=jNk j determinesparametric dependence squashedreinforcement value numberjNk j neighbors reinforced nodek: greater number neighbors,higher reinforcement (see Figure 4). reasonwant similar, strong, effectgood results probabilistic routing tables, independent numberneighbor nodes.0.40.2000.20.40.60.81rFigure 4: Examples squash functionsvariable number node neighbors.5. Routing Algorithms Used Comparisonevaluate performance AntNet, compared state-of-the-art routing algorithms telecommunications machine learning fields. following algorithms,belonging various possible combinations static adaptive, distance-vectorlink-state classes (see Appendix A), implemented used run comparisons.OSPF (static, link state): implementation current Interior Gateway Pro-tocol (IGP) Internet (Moy, 1998). interested studying routingassumptions described Section 3, routing protocol implementedmirror real OSPF protocol details. retains basic featuresOSPF. Link costs statically assigned basis physical characteristicsrouting tables set result shortest (minimum time) path computation sample data packet size 512 bytes. worth remarkingchoice penalizes version OSPF respect real one. fact, realInternet link costs set network administrators use additional heuristicon-field knowledge trac workloads.SPF (adaptive, link-state): prototype link-state algorithms dynamic met-ric link costs evaluations. similar algorithm implemented secondversion ARPANET (McQuillan, Richer, & Rosen, 1980) successive revisions (Khanna & Zinky, 1989). implementation uses ooding algorithm,link costs assigned discrete scale 20 values using ARPANEThop-normalized-delay metric12 (Khanna & Zinky, 1989) statistical window average method described (Shankar, Alaettinoglu, Dussa-Zieger, & Matta,1992a). Link costs computed weighted averages short long-termreal-valued statistics ecting delay (e.g., utilization, queueing and/or transmis-12. transmitting node monitors average packet delay (queuing transmission) averagepacket transmission time fix observation windows. measures, assuming M/M/1queueing model (Bertsekas & Gallager, 1992), link utilization cost measure calculated 1 , t=d.334fiAntNet: Distributed Stigmergetic Control Communications Networkssion delay, etc.) fixed time intervals. Obtained values rescaled saturatedlinear function. tried several additional discrete real-valued metricsdiscretized hop-normalized-delay gave best results terms performancestability. Using discretized scale reduces sensitivity algorithmtime reduces also undesirable oscillations.BF (adaptive, distance-vector): implementation asynchronous distributedBellman-Ford algorithm dynamic metrics (Bertsekas & Gallager, 1992; Shankaret al., 1992a). algorithm implemented following guidelines Appendix A, link costs assigned way described SPF above.Vector-distance Bellman-Ford-like algorithms today use mainly intra-domainrouting, used Routing Information Protocol (RIP) (Malkin& Steenstrup, 1995) supplied BSD version Unix. Several enhanced versions basic adaptive Bellman-Ford algorithm found literature (forexample Merlin-Segall (Merlin & Segall, 1979) Extended Bellman-Ford(Cheng, Riley, Kumar, & Garcia-Luna-Aceves, 1989) algorithms). focus mainlyreducing information dissemination time case link failures. linkfailures major issue, paper, behavior general equivalentbasic adaptive Bellman-Ford.Q-R (adaptive, distance-vector): Q-Routing algorithm proposed BoyanLittman (1994). online asynchronous version Bellman-Fordalgorithm. Q-R learns online values Qk (d; n), estimates timereach node node k via neighbor node n. Upon sending packet Pk neighbor node n destination d, back packet Pback immediatelygenerated n k. Pback carries information current time estimatetn!d = minn0 2Nn Qn (d; n0 ) held node n time go destination d,sum tPk!n queuing transmission time experienced P since arrivalnode k. sum Qnew (d; n) = tn!d + tPk!n used compute variationQk (d; n) = (Qnew (d; n) , Qk (d; n)) Q-learning-like value Qk (d; n).PQ-R (adaptive, distance-vector): Predictive Q-Routing algorithm (Choi & Ye-ung, 1996), extension Q-Routing. Q-routing best link (i.e., onelowest Qk (d; n)) deterministically chosen packets. Therefore, linkhappens high expected Qk (d; n), example temporary loadcondition, never used links exiting nodeworse, higher, Qk (d; n). PQ-R learns model rate variationlinks' queues, called recovery rate, uses probe links that, althoughlowest Qk (d; n), high recovery rate.Daemon (adaptive, optimal routing): approximation ideal algorithm.defines empirical bound achievable performance. gives information much improvement still possible. absence prioriassumption trac statistics, empirical bound defined algorithmpossessing \daemon" able read every instant state queuesnetwork calculating instantaneous \real" costs links assigning335fiDi Caro & Dorigopaths basis network-wide shortest paths re-calculation every packethop. Links costs used shortest paths calculations following:Cl = dl + p + (1 , ff) Q(l) + ff Q(l) ;bbbllldl transmission delay link l, bl bandwidth, Sp size (inbits) data packet hop, SQ(l) size (in bits) queue linkl, SQ(l) exponential mean size links queue correctionactual size link queue basis observed moment.correction weighted ff value set 0.4. course, given arbitrarinessintroduced calculating Cl , could possible define even better Daemonalgorithm.6. Experimental Settingsfunctioning communication network governed many components, mayinteract nonlinear unpredictable ways. Therefore, choice meaningful testbedcompare competing algorithms easy task.limited set classes tunable components defined class choicesexplained.6.1 Topology physical properties netTopology defined basis real net instance defined hand,better analyze uence important topological features (like diameter, connectivity,etc.).Nodes mainly characterized buffering processing capacity, whereas linkscharacterized propagation delay, bandwidth streams multiplexing scheme.both, fault probability distributions defined.experiments, used three significant net instances increasing numbersnodes. describe main characteristics summarizetopological properties means triple numbers (, , N ) indicating respectivelymean shortest path distance, terms hops, pairs nodes, varianceaverage, total number nodes. three numbers get ideadegree connectivity balancing network. diculty routingproblem roughly increases value numbers.SimpleNet (1.9, 0.7, 8) small network specifically designed study aspectsbehavior algorithms compare. Experiments SimpleNetdesigned closely study different algorithms manage distribute loaddifferent possible paths. SimpleNet composed 8 nodes 9 bi-directionallinks bandwidth 10 Mbit/s propagation delay 1 msec. topologyshown Figure 5.NSFNET (2.2, 0.8, 14) old USA T1 backbone (1987). NSFNET WANcomposed 14 nodes 21 bi-directional links bandwidth 1.5 Mbit/s.336fiAntNet: Distributed Stigmergetic Control Communications Networks21438567Figure 5: SimpleNet. Numbers within circles node identifiers. Shaded nodesspecial interpretation experiments, described later. edge graphrepresents pair directed links. Link bandwidth 10 Mbit/sec, propagationdelay 1 msec.topology shown Figure 6. Propagation delays range 4 20 msec. NSFNETwell balanced network.Figure 6: NSFNET. edge graph represents pair directed links. Link bandwidth 1.5 Mbit/sec, propagation delays range 4 20 msec.NTTnet (6.5, 3.8, 57) major Japanese backbone. NTTnet NTT (NipponTelephone Telegraph company) fiber-optic corporate backbone. NTTnet57 nodes, 162 bi-directional links network. Link bandwidth 6 Mbit/sec,propagation delays range around 1 5 msec. topology shown Figure 7.NTTnet well balanced network.Figure 7: NTTnet. edge graph represents pair directed links. Link bandwidth 6 Mbit/sec, propagation delays range 1 5 msec.337fiDi Caro & Dorigonetworks simulated zero link-fault node-fault probabilities, localnode buffers 1 Gbit capacity, data packets maximum time live (TTL) set 15sec.6.2 Trac patternsTrac defined terms open sessions pairs different nodes. Trac patternsshow huge variety forms, depending characteristics sessiondistribution geographical temporal points view.single session characterized number transmitted packets,size inter-arrival time distributions. generally, priority, costs requested qualityservice used completely characterize session.Sessions network characterized inter-arrival time distributiongeographical distribution. latter controlled probability assignednode selected session start end-point.considered three basic patterns temporal distribution sessions,three spatial distribution.Temporal distributions:Poisson (P): node Poisson process defined regulates arrivalnew sessions, i.e., sessions inter-arrival times negative exponentially distributed.Fixed (F): beginning simulation, node, fixed number oneto-all sessions set left constant remainder simulation.Temporary (TMPHS): temporary, heavy load, trac condition generated turningnodes act like hot spots (see below).Spatial distributions:Uniform (U): assigned temporal characteristics session arrivals set identically network nodes.Random (R): case, assigned temporal characteristics session arrivalsset random way network nodes.Hot Spots (HS): nodes behave hot spots, concentrating high rate input/output trac. fixed number sessions opened hot spotsnodes.General trac patterns obtained combining temporal spatialcharacteristics. Therefore, example, trac means that, node, identicalPoisson process regulating arrival new sessions, RP case processdifferent node, UP-HS means Hot Spots trac model superimposedtrac.Concerning shape bit stream generated session, consider two basictypes:Constant Bit Rate (CBR): per-session bit rate maintained fixed. Examplesapplications CBR streams voice signal telephone network,converted stream bits constant rate 64 Kbit/sec, MPEG1compression standard, converts video signal stream 1.5 Mbit/sec.338fiAntNet: Distributed Stigmergetic Control Communications NetworksGeneric Variable Bit Rate (GVBR): per-session generated bit rate time varying.term GVBR broad generalization VBR term normally used designatebit stream variable bit rate known average characteristicsexpected/admitted uctuations.13 Here, GVBR session generates packets whosesizes inter-arrival times variable follow negative exponential distribution.information characteristics never directly used routingalgorithms, like IP-based networks.values used experiments shape trac patterns \reasonable" valuessession generations data packet production taking consideration current networkusage computing power. mean packet size distribution set 4096bits experiments. Basic temporal spatial distributions chosenrepresentative wide class possible situations arbitrarily composedgenerate meaningful subset real trac patterns.6.3 Metrics performance evaluationDepending type services delivered network associated costs,many performance metrics could defined. focused standard metrics performance evaluation, considering sessions equal costs, benefits prioritywithout possibility requests special services like real-time. framework,measures interested are: throughput (correctly delivered bits/sec), delay distribution data packets (sec), network capacity usage (for data routing packets),expressed sum used link capacities divided total available link capacity.6.4 Routing algorithms parametersalgorithms used collection parameters set. Common parametersrouting packet size elaboration time. Settings parameters showntable 1. parameters assigned values used previous simulationPacket size (byte)Packet elaboration time (msec)AntNet OSPF & SPFBFQ-R & PQ-R24 + 8Nh 64 + 8jNn j 24 + 12N123623Table 1: Routing packets characteristics implemented algorithms (exceptDaemon algorithm, generate routing packets). Nh incremental number hops made forward ant, jNn j number neighborsnode n, N number network nodes.works (Alaettinoglu et al., 1992) and/or basis heuristic evaluations taking13. knowledge characteristics incoming CBR VBR bit streams fundamentalimportance networks able deliver Quality Service. basis knowledgenetwork accept/refuse session requests, and, case acceptance, allocate/reserve necessaryresources.339fiDi Caro & Dorigoconsideration information encoding schemes currently available computing power (e.g.,size forward ants determined size BF packet plus 8 byteshop store information node address elapsed time). Concerningmain parameters, specific algorithm, AntNet competitors usedbest settings could find literature and/or tried tune parametersmuch possible obtain better results. OSPF, SPF, BF, lengthtime interval consecutive routing information broadcasts length timewindow average link costs same, set 0.8 3 seconds, dependingexperiment SPF BF, 30 seconds OSPF. Link costs inside windowassigned weighted sum arithmetic average windowexponential average decay factor equal 0.9. obtained values discretizedlinear scale saturated 1 20, slope set 20 maximum admittedvariation equal 1. Q-R PQ-R transmission routing information totallydata-driven. learning adaptation rate used usedalgorithm's authors (Boyan & Littman, 1994; Choi & Yeung, 1996).Concerning AntNet, observed algorithm robust internal parameterstuning. finely tune parameter set, used set valuesdifferent experiments ran. settings used previously giventext moment parameter discussed reportedsection. ant generation interval node set 0.3 seconds. Section 7.4shown robustness AntNet respect parameter. Regardingparameters statistical model, value , weighting number samplesconsidered model (Equation 1), set 0.005, c factor expressionjWjmax (sect. 4.2) put equal 0.3, confidence level factor z (sect. 4.2)equal 1.70, meaning confidence level approximately 0.95.7. ResultsExperiments reported section compare AntNet competing routing algorithms described Section 5. studied performance algorithms increasingtrac load, examining evolution network status toward saturation condition,temporary saturation conditions.low load conditions, algorithms tested similar performance.case, also considering huge variability possible trac patterns,hard assess whether algorithm significantly better another not.high, near saturation, loads, tested algorithms able deliveroffered throughput quite similar way, is, cases generated trac routed without big losses. contrary, study packet delaydistributions shows remarkable differences among different algorithms. presentsimulation results regarding packet delays decided either report whole empirical distribution use 90-th percentile statistic, allows one comparealgorithms basis upper value delay able keep 90%correctly delivered packets. fact, packet delays spread widerange values. intrinsic characteristics data networks: packet delaysrange low values sessions open adjacent nodes connected340fiAntNet: Distributed Stigmergetic Control Communications Networksfast links, much higher values case sessions involving nodes far apartconnected many slow links. this, often empirical distributionpacket delays cannot meaningfully parametrized terms mean variance,90-th percentile statistic, still better whole empirical distribution,much meaningful.saturation packet losses and/or packet delays become big,cause network operations slow down. Therefore, saturationtemporary situation. not, structural changes network characteristics,like adding new faster connection lines, rather improvements routingalgorithm, order. reasons, studied responsivenessalgorithms trac loads causing temporary saturation.reported data averaged 10 trials lasting 1000 virtual seconds simulationtime. One thousand seconds represents time interval long enough expire transientsget enough statistical data evaluate behavior routing algorithm.fed data trac, algorithms given 500 preliminary simulation secondsdata trac build initial routing tables. way, algorithm builds routingtables according \vision" minimum cost paths. Results throughputreported average values without associated measure variance. inter-trialvariability fact always low, percent average value.Parameter values trac characteristics given Figure captionsfollowing meaning (see also previous section): MSIA mean sessions inter-arrivaltime distribution Poisson (P) case, MPIA stands mean packet interarrival time distribution. CBR case, MPIA indicates fixed packet productionrate. HS number hot-spots nodes MPIA-HS equivalent MPIAhot-spot sessions. following, otherwise explicitly stated, shapesession bit streams assumed GVBR type.Results throughput packet delays considered network topologiesdescribed three following subsections. Results concerning network resourcesutilization reported Section 7.4.7.1 SimpleNetExperiments SimpleNet designed study different algorithms managedistribute load different possible paths. experiments, trac,F-CBR type, directed node 1 node 6 (see Figure 5), trac loadset value higher capacity single link, cannot routedeciently single path.Results regarding throughput (Figure 8a) case strongly discriminate amongalgorithms. type trac workload small number nodes determinedsignificant differences throughput. AntNet algorithm able deliver almostgenerated data trac: throughput short transient phase approachesclosely level delivered Daemon algorithm. PQ-R attains steady valueapproximately 15% inferior obtained AntNet. algorithms behavepoorly, stabilizing values 30% inferior provided AntNet.341fiDi Caro & Dorigocase, rather clear AntNet algorithm able exploit best threeavailable paths (1-8-7-6, 1-3-5-6, 1-2-4-5-6) distribute data trac without inducingcounterproductive oscillations. utilization routing tables probabilistic wayalso data packets case plays fundamental role achieving higher quality results. Results throughput confirmed packet delays, reportedgraph Figure 8b. differences empirical distributions packet delays ectapproximatively proportions evidenced throughput case.14.01.013.5Throughput (106 bit/sec)12.512.00.8Empirical DistributionOSPFSPFBFQ-RPQ-RAntNetDaemon13.011.511.010.50.60.4OSPFSPFBFQ-RPQ-RAntNetDaemon0.210.09.50.001002003004005006007008009001000Simulation Time (sec)00.050.10.150.2Packet Delay (sec)(a)(b)Figure 8: SimpleNet: Comparison algorithms F-CBR trac directed node 1 node 6(MPIA = 0.0003 sec). (a) Throughput, (b) packet delays empirical distribution.7.2 NSFNETcarried wide range experiments NSFNET using UP, RP, UP-HS TMPHSUP trac patterns. cases considered, differences throughput minorimportance respect shown packet delays. one UP, RPUP-HS cases ran five distinct groups ten trial experiments, gradually increasinggenerated workload (in terms reducing session inter-arrival time). explainedabove, studied behavior algorithms moving trac load towardssaturation region.case, differences throughput (Figure 9a) small: best performingalgorithms BF SPF, attain performance 10% inferiorDaemon amount better AntNet, Q-R PQ-R,14OSPF behaves slightly better last ones. Concerning delays (Figure 9b)14. worth remarking experiments presented following, PQ-R'sperformance slightly worse Q-R. seems contrast results presentedPQ-R's authors article introduced PQ-R (Choi & Yeung, 1996). thinkbehavior due fact (i) link recovery rate matches discrete-time systemsimulator time continuous variable, (ii) experimental simulation conditionsrather different (in article specified way produced trac patternsimplement realistic network simulator).342fiAntNet: Distributed Stigmergetic Control Communications NetworksAntNet2.4OSPF2.3SPF2.2BF2.1Q-R2PQ-RDaemon4.54.03.53.02.52.01.51.00.50.0AntNetOSPF2.4SPF2.3(b)2.2BF2.1Q-R2PQ-RDaemonsituation rather different, seen fact algorithms AntNetable produce slightly higher throughput expenses much worseresults packet delays. trend packet delays confirmed experimentsran. OSPF, Q-R PQ-R show really poor results (delays order 2 secondshigh values, even considering 90-th percentile distribution),BF SPF behave similar way performance order 50% worseobtained AntNet order 65% worse Daemon.181614128106420(a)90-th percentile packet delays (sec)343RP case (Figure 10a), throughputs generated AntNet, SPF BFsimilar, although AntNet slightly better performance. OSPF PQ-R behaveslightly worse Q-R worst algorithm. Daemon able obtain slightlybetter results AntNet. Again, looking packet delays results (Figure 10b) OSPF,Q-R PQ-R perform badly, SPF shows results bit better BForder 40% worse AntNet. Daemon case far better,indicates testbed dicult.case UP-HS load, throughputs (Figure 11a) AntNet, SPF, BF, Q-RDaemon similar, OSPF PQ-R clearly show much worse results.(Figure 11b), packet delays results OSPF, Q-R PQ-R much worsealgorithms (they much worse fit scale chosenmake clear differences among algorithms). AntNet still best performingalgorithm. case, differences SPF order 20% 40% respectBF. Daemon performs 50% better AntNet scales much better AntNet,which, again, indicates testbed rather dicult.last graph NSFNET shows algorithms behave case TMPHSUP situation (Figure 12). time = 400 four hot spots turned superimposedexisting light trac. transient kept 120 seconds. case,one, typical, situation reported detail show answer curves. Reported valuesFigure 9: NSFNET: Comparison algorithms increasing load trac. loadincreased reducing MSIA value 2.4 2 seconds (MPIA = 0.005 sec). (a)Throughput, (b) 90-th percentile packet delays empirical distribution.Throughput (106 bit/sec)fi121086420AntNet2.8OSPF2.7SPF(a)2.6BF2.5Q-R2.4Daemon4.03.53.02.52.01.51.00.50.0AntNetDi Caro & DorigoPQ-R90-th percentile packet delays (sec)181614121086420AntNetOSPF2.4SPF2.3BF2.2Q-R2.1PQ-R2(a)Daemon3440.50.40.30.20.10.0AntNetOSPF2.8SPF2.7OSPF2.4SPF2.3BF2.6(b)(b)2.2BF2.5Q-R2.1Q-R2.42PQ-RPQ-RDaemonDaemon\instantaneous" values throughput packet delays computed average5 seconds moving windows. algorithms similar good performancefar throughput concerned, except OSPF PQ-R, lose percentpackets transitory period. graph packet delays confirms previousresults: SPF BF similar behavior, 20% worse AntNet 45%worse Daemon. three algorithms show big out-of-scale jump,able properly dump sudden load increase.Figure 11: NSFNET: Comparison algorithms increasing load UP-HS trac. loadincreased reducing MSIA value 2.4 2.0 seconds (MPIA = 0.3 sec, HS = 4,MPIA-HS = 0.04 sec). (a) Throughput, (b) 90-th percentile packet delaysempirical distribution.90-th percentile packet delays (sec)Figure 10: NSFNET: Comparison algorithms increasing load RP trac. loadincreased reducing MSIA value 2.8 2.4 seconds (MPIA = 0.005 sec). (a)Throughput, (b) 90-th percentile packet delays empirical distribution.Throughput (106 bit/sec)Throughput (106 bit/sec)fiThroughput (106 bit/sec)AntNet: Distributed Stigmergetic Control Communications Networks16.014.012.010.08.06.0Packet Delay (sec)0.06OSPFSPFBFQ-RPQ-RAntNetDaemon0.050.040.032003004005006007008009001000Simulation Time (sec)Figure 12: NSFNET: Comparison algorithms transient saturation conditionsTMPHS-UP trac (MSIA = 3.0 sec, MPIA = 0.3 sec, HS = 4, MPIA-HS =0.04). (a) Throughput, (b) packet delays averaged 5 seconds movingwindows.7.3 NTTnetset experiments run NSFNET repeated NTTnet.case results even sharper obtained NSFNET: AntNet performancemuch better competitors.UP, RP UP-HS cases, differences throughput significant (Figures13a, 14a 15a). algorithms, OSPF exception, practically behaveway Daemon algorithm. Concerning delays (Figures 13b, 14b 15b),differences AntNet competitors one order magnitude.AntNet keeps delays low values, close obtained Daemon, SPF,BF, Q-R PQ-R perform poorly OSPF completely collapses.RP cases (Figures 13b 14b) SPF BF performs similarly, even SPFshows slightly better results, 50% better Q-R PQ-R.UP-HS case, again, SPF BF show similar results, Q-R performs comparably much irregular way PQ-R keep delays 30% lower. OSPF,worse algorithm case, shows interesting behavior. increasegenerated data throughput determines decrease slow increase deliveredthroughput delays decrease (Figure 15a 15b). case load highalgorithm balance two, con icting, objectives, throughput345fi454035302520151050AntNet3.1OSPF3SPFBF2.9(a)2.8Q-R2.7Daemon0.01.02.03.04.05.06.07.08.09.010.0Di Caro & DorigoPQ-R90-th percentile packet delays (sec)454035302520151050AntNetOSPF3.1SPF3BF2.9(a)2.8Q-R2.7PQ-RDaemon34610.09.08.07.06.05.04.03.02.01.00.0AntNetAntNetOSPF3.1SPF32.9(b)OSPF3.1SPF32.9(b)BFBF2.82.8Q-RQ-R2.72.7PQ-RPQ-RDaemonDaemonpacket delays, showed inverse dynamics: lot packet losses made possiblesurviving packets obtain lower trip delays.TMPHS-UP experiment (Figure 16), concerning sudden load variation, confirmsprevious results. OSPF able follow properly variation throughputdelays. algorithms able follow sudden increase offeredthroughput, AntNet (and Daemon) show regular behavior. Differencespacket delays striking. AntNet performance close obtained Daemon(the curves practically superimposed scale used Figure). Amongalgorithms, SPF BF best ones, although response rather irregular and,case, much worse AntNet's. OSPF Q-R out-of-scale showdelayed recovering curve. PQ-R, huge jump, takes graph out-of-scaleFigure 14: NTTnet: Comparison algorithms increasing load RP trac. loadincreased reducing MSIA value 3.1 2.7 seconds (MPIA = 0.005 sec). (a)Throughput, (b) 90-th percentile packet delays empirical distribution.90-th percentile packet delays (sec)Figure 13: NTTnet: Comparison algorithms increasing load trac. loadincreased reducing MSIA value 3.1 2.7 seconds (MPIA = 0.005 sec). (a)Throughput, (b) 90-th percentile packet delays empirical distribution.Throughput (106 bit/sec)Throughput (106 bit/sec)fiAntNet: Distributed Stigmergetic Control Communications Networks43.93.83.790-th percentile packet delays (sec)4.150Throughput (106 bit/sec)454035302520151050AntNetOSPFSPFBFQ-RPQ-RDaemon4.143.93.83.77.06.05.04.03.02.01.00.0AntNetOSPF(a)SPFBFQ-RPQ-RDaemon(b)Figure 15: NTTnet: Comparison algorithms increasing load UP-HS trac. loadincreased reducing MSIA value 4.1 3.7 seconds (MPIA = 0.3 sec, HS = 4,MPIA-HS = 0.05 sec). (a) Throughput, (b) 90-th percentile packet delaysempirical distribution.Throughput (106 bit/sec)first 40 seconds hot spots turned on, shows trend approaching BFSPF.55.045.035.025.015.0Packet Delay (sec)0.8OSPFSPFBFQ-RPQ-RAntNetDaemon0.60.40.20.02003004005006007008009001000Simulation Time (sec)Figure 16: NTTnet: Comparison algorithms transient saturation conditionsTMPHS-UP trac (MSIA = 4.0 sec, MPIA = 0.3 sec, HS = 4, MPIA-HS =0.05). (a) Throughput, (b) packet delays averaged 5 seconds movingwindows.347fiDi Caro & Dorigo7.4 Routing OverheadTable 2 reports results concerning overhead generated routing packets.algorithm network load generated routing packets reported ratiobandwidth occupied routing packets total available network bandwidth.row table refers previously discussed experiment (Figs. 8 11 1315). Routing overhead computed experiment heaviest loadincreasing load series.SimpleNet - F-CBRNSFNET -NSFNET - RPNSFNET - UP-HSNTTnet -NTTnet - RPNTTnet - UP-HSAntNet OSPF SPF BF Q-R PQ-R0.330.01 0.10 0.07 1.49 2.012.390.15 0.86 1.17 6.96 9.932.600.15 1.07 1.17 5.26 7.741.630.15 1.14 1.17 7.66 8.462.850.14 3.68 1.39 3.72 6.774.410.14 3.02 1.18 3.36 6.373.810.14 4.56 1.39 3.09 4.81Table 2: Routing Overhead: ratio bandwidth occupied routing packetstotal available network bandwidth. data scaled factor 10,3 .data scaled factor 10,3 . data table show routingoverhead negligible algorithms respect available bandwidth. Amongadaptive algorithms, BF shows lowest overhead, closely followed SPF. AntNetgenerates slightly bigger consumption network resources, widely compensatedmuch higher performance provides. Q-R PQ-R produce overhead bithigher AntNet. routing load caused different algorithms functionmany factors, specific algorithm. Q-R PQ-R data-driven algorithms:number data packets and/or length followed paths (because topologybad routing) grows, number generated routing packets. BF, SPFOSPF predictable behavior: generated overhead mainly functiontopological properties network generation rate routing informationpackets. AntNet produces routing overhead depending ants generation ratelength paths travel.ant trac roughly characterized collection additional trac sources,one network node, producing small packets (and related acknowledgementpackets) constant bit rate destinations matching offered data trac. averageants travel rather \short" paths size grow 8 bytes hop.Therefore, \ant routing trac source" represents light additional trac sourcerespect network resources ant launching rate excessively high.Figure 17, sensitivity AntNet respect ant launching rate reported.sample case data trac model NSFNET (previously studied Figure9) interval g two consecutive ant generations progressively decreased (gnodes). g values sampled constant intervals logarithmicscale ranging 0.006 25 seconds. lower, dashed, curve interpolates348fiAntNet: Distributed Stigmergetic Control Communications NetworksAntNet Normalized Power Vs. Routing Overhead1.00.8Normalized PowerRouting Overhead0.60.40.20.00.0010.010.1110100Interval g Two Consecutive Ants Generations (sec)Figure 17: AntNet normalized power vs. routing overhead. Power defined ratiodelivered throughput packet delay.generated routing overhead expressed, before, fraction available networkbandwidth used routing packets. upper, solid, curve plots data obtainedpower normalized highest value, power defined ratiodelivered throughput packet delay. value used delivered throughputthroughput value time 1000 averaged ten trials, packet delay used90-th percentile empirical distribution.figure, see excessively small g causes excessive growthrouting overhead, consequent reduction algorithm power. Similarly, gbig, power slowly diminishes tends toward plateau numberants enough generate maintain up-to-date statistics network status.middle two extreme regions wide range g intervals gives raise similar,good power values, while, time, routing overhead quickly fallstoward negligible values. figure strongly confirms previous assertionrobustness AntNet's internal parameter settings.8. DiscussionAntNet, continual on-line construction routing tables emergent resultcollective learning process. fact, forward-backward agent pair complexenough find good route adapt routing tables single source-destinationpath, cannot solve global routing optimization problem. interactionagents determines emergence global effective behaviornetwork performance point view. Ants cooperate problem-solving activitycommunicating indirect non-coordinated way. agent acts independently.Good routes discovered applying policy function information349fiDi Caro & Dorigoaccessed network nodes visited, information collected routeeventually released nodes. Therefore, inter-agent communicationmediated explicit implicit way \environment", is, node's datastructures trac patterns recursively generated data packets' utilizationrouting tables. communication paradigm, called stigmergy, matches wellintrinsically distributed nature routing problem. Cooperation among agents goestwo levels: (a) modifications routing tables, (b) modificationslocal models determine way ants' performance evaluated. Modificationsrouting tables directly affect routing decisions following ants towardsdestination, well routing data, which, turn, uences rate arrivalants towards destination. interesting remark used stigmergyparadigm makes AntNet's mobile agents exible software engineering pointview. perspective, interface node's data structure defined,internal policy agents transparently updated. Also, agents couldexploited carry multiple concurrent tasks (e.g., collecting information distributednetwork management using SNMP-like protocol Web data-mining tasks).shown previous section, results obtained stigmergeticmodel computation excellent. terms throughput average delay, AntNetperforms better classical recently proposed routing algorithms widerange experimental conditions. Although interesting per se, followingtry justify AntNet superior performance highlighting characteristicscomparing competing algorithms. focus followingmain aspects:AntNet seen particular instance parallel Monte Carlo simulationsystem biased exploration. algorithms either explorenet exploration local tightly connected ux data packets.information AntNet maintains node complete organizedless critical way managed algorithms.AntNet propagate local estimates nodes, competitorsdo. mechanism makes algorithm robust locally wrong estimates.AntNet uses probabilistic routing tables, triple positive effect better redistributing data trac alternative routes, providing ants built-inexploration mechanism allowing exploitation ants' arrival rateassign cumulative reinforcements.experimentally observed AntNet much robust competitorsfrequency routing tables updated.structure AntNet allows one draw parallels well-knownreinforcement learning (RL) algorithms. characteristics routing problem,seen distributed time-varying RL problem (see sect. 2.2), determinesdeparture AntNet structure classical RL algorithms.aspects AntNet discussed detail following.350fiAntNet: Distributed Stigmergetic Control Communications Networks8.1 AntNet on-line Monte Carlo system biased explorationAntNet routing system seen collection mobile agents collecting datanetwork status concurrently performing on-line Monte Carlo simulations (Rubistein, 1981; Streltsov & Vakili, 1996). Monte Carlo methods, repeated experimentsstochastic transition components run collect data statistics interest. Similarly, AntNet ants explore network performing random experiments(i.e., building paths source destination nodes using stochastic policy dependentpast current network states), collect on-line information networkstatus. built-in variance reduction effect determined (i) way ants' destinationsassigned, biased frequently observed data's destinations, (ii) wayants' policy makes use current past trac information (that is, inspectionlocal queues' status probabilistic routing tables). way, explored paths matchinteresting paths data trac point view, results ecientvariance reduction effect stochastic sampling paths. Differently usualoff-line Monte Carlo systems, AntNet state space sampling performed on-line,is, sampling statistics controlling non-stationary trac processperformed concurrently.way exploring network concurrently data trac differenthappens algorithms where, either exploration (OSPF,SPF BF), exploration tightly coupled data trac local nature(Q-R PQ-R). Conveniently, shown Section 7.4, extra trac generatedexploring ants negligible wide range values, allowing good performance.8.2 Information management network nodeKey characteristics routing algorithms type information used build/updaterouting tables way information propagated. algorithms (exceptstatic OSPF) make use node two main components: local modelcost measures routing table . SPF BF use estimate smoothed averageslocal link costs, is, distances neighbor nodes. case,local model maintaining estimates local components. Q-R local modelfictitious raw transition time directly used value update . PQ-Ruses slightly sophisticated model respect Q-R, storing also measurelink utilization. algorithms propagate part local informationnodes, which, turn, make use update routing tables build globalview network. SPF BF content updated, regular intervals,\memoryless strategy": new entries depend old values,discarded. Therefore, whole adaptive component routing system representedmodel M. Otherwise, Q-R PQ-R adaptive content almostnegligible adaptive component algorithm represented smoothedaverage carried Q-learning-like rule. AntNet shows characteristics rather differentcompetitors: model contains memory-based local perspective globalstatus network. content allow reinforcements weightedbasis rich statistical description network dynamics seen local node.reinforcements used update routing table, adaptive component351fiDi Caro & Dorigomaintained node. updates carried asynchronous wayfunction previous values. Moreover, used straightforward probabilisticway data packets, traveling ants select next node using , is,adaptive representation past policy, model current local link queues,is, instantaneous representation node status. evident AntNet buildsuses information competitors: two different memory-based componentsinstantaneous predictor used combined different levels. Moreover,way AntNet robustly redistributes among completely local components criticalityestimates decisions.8.3 AntNet's robustness wrong estimatesremarked above, AntNet, differently competitors, propagate localestimates nodes. node routing table updated independently, usinglocal information ants' experienced trip time. Moreover, (i) ant experimentaffects one entry routing table visited nodes, one relative ant'sdestination, and, (ii) local information built \global" information collectedtraveling ants, implicitly reducing way variance estimates.characteristics make AntNet particularly robust wrong estimates. contrary,algorithms locally wrong estimate propagated nodesused compute estimates many different destinations. badalgorithm performance depends long wrong estimate effect lasts. particular,function time window estimates computed SPFBF, learning parameters Q-R PQ-R.8.4 AntNet's probabilistic use routing tables route data packetstested algorithms AntNet use deterministic routing tables.15 algorithms,entries routing tables contain distance/time estimates destinations.estimates provide misleading information algorithm fast enough followtrac uctuations, case heavy load conditions. Instead, AntNetrouting tables probabilistic entries that, although ecting goodness particularpath choice respect others available, force data packets chooseperceived best path. positive effect allowing better balancingtrac load different paths, resulting better utilization resources (asshown particular experiments SimpleNet). remarkedend Section 4.1, intrinsic probabilistic structure routing tables wayupdated allow AntNet exploit ant's arrival rate way assign implicit(cumulative) reinforcements discovered paths. obvious effectcould obtained using routing tables containing distance/time estimates usingestimates probabilistic way. fact, case new trip time sample would15. Singh, Jaakkola, Jordan (1994) showed stochastic policies yield higher performancedeterministic policies case incomplete access state information environment.(Jaakkola, Singh, & Jordan, 1995), authors developed Monte-Carlo-based stochastic policyevaluation algorithm, confirming usefulness Monte-Carlo approach, used AntNet too,deal incomplete information problems.352fiAntNet: Distributed Stigmergetic Control Communications Networksmodify statistical estimate would simply oscillate around expected value withoutinducing arrival-dependent cumulative effect.Probabilistic routing tables provide remarkable additional benefits: (a) giveants built-in exploration method discovering new, possibly better, paths, (b)since ants data routing independent AntNet, exploration new routescontinue while, time, data packets exploit previously learned, reliableinformation. interesting note use probabilistic routing tables whose entrieslearned adaptive way changing positive feedback ignoring negativefeedback, reminiscent older automata approaches routing telecommunicationsnetworks. approaches, learning automaton usually placed networknode. automaton defined set possible actions vector associatedprobabilities, continuous set inputs learning algorithm learn input-outputassociations. Automata connected feedback configuration environment(the whole network), set penalty signals environment actionsdefined. Routing choices modifications learning strategy carriedprobabilistic way according network conditions (see example (Nedzelnitsky& Narendra, 1987; Narendra & Thathachar, 1980)). main difference lies factAntNet ants part environment itself, actively directlearning process towards interesting regions search space. is,whole environment plays key, active role learning good state-action pairs.8.5 AntNet robustness routing table update frequencyBF SPF broadcast frequency routing information plays critical role, particularly BF, local representation network status. frequencyunfortunately problem dependent, easy way make adaptive, while,time, avoiding large oscillations. Q-R PQ-R, routing tables updatingdata driven: Q-values belonging pairs (i; j ) neighbor nodes visitedpackets updated. Although reasonable strategy given explorationnew routes could cause undesired delays data packets, causes delays discovering newgood routes, great handicap domain good routes could changetime. OSPF, routing tables updated, set static link costsbasis physical characteristics. lack adaptive metric main reasonpoor performance OSPF (as remarked Section 5, slightly penalized OSPFrespect real implementations, additional heuristic knowledge tracpatterns used network administrators set link costs). AntNet, experimentallyobserved robustness changes ants' generation rate: wide range generation rates, rather independent network size, algorithm performance goodrouting overhead negligible (see Section 7.4).8.6 AntNet reinforcement learningcharacteristics routing problem allow one interpret distributed, stochastic time-varying RL problem. fact, well structure AntNet, make naturaldraw parallels AntNet classical RL approaches. worth remarkingRL problems studied, algorithms de353fiDi Caro & Dorigoveloped, problems where, unlike routing, assumptions like Markovianity stationarityprocess considered satisfied. characteristics adaptive routing problemmake dicult well suited solved usual RL algorithms. fact,explain below, determines departure AntNet classical RL algorithms.first way relate structure AntNet (general) RL algorithmconnected way outcomes experiments, trip times Tk!d , processed.transformation raw values Tk!d refined reinforcements rreminiscent happens Actor-Critic systems (Barto, Sutton, & Anderson, 1983):raw reinforcement signal processed critic module, learning model (thenode's component M) underlying process, fed learning system (therouting table ) transformed evaluation policy followed ants.case, critic adaptive, take account variability trac process,rather simple, meet computational requirements.Another way seeing AntNet classical RL system related interpretationparallel replicated Monte Carlo (MC) system. shown Singh Sutton (1996),first-visit MC (only first visit state used estimate value trial)simulation system equivalent batch temporal difference (TD) method replacingtraces decay parameter =1. Although AntNet first-visit MC simulation system,important differences type MC used Singh Sutton (andRL works), mainly due differences considered class problems.AntNet, outcomes experiments used update local models able capturevariability whole network status (only partially observable) generatesequence stochastic policies. contrary, MC system considered SinghSutton, outcomes experiments used compute (reduced) maximum-likelihoodestimates expected mean variance states' returns (i.e., total rewardfollowing visit state) Markov chain. spite differences, weak parallelTD() methods rather interesting, allows highlight important differenceAntNet competitors (and general TD methods): AntNet, followinggeneration stochastic transition chain forward ant, back-chaininginformation one state (i.e., triple fcurrent node, destination node, next hopnodeg) predecessors. state rewarded basis ant's trip timeinformation strictly relevant it. approach completely different followed(TD methods) Q-R, PQ-R, BF and, different perspective, SPF. fact,algorithms build distance estimates node using predictions madenodes. particular, Q-R PQ-R, propagate estimation information onestep back, precisely distributed versions TD(0) class algorithms. couldtransformed generic TD(), 0 < 1, transmitting backward previouslyvisited nodes information collected routing packet generated data hop.course, would greatly increase routing trac generated,done hop data packet, making approach least costly, feasibleall.general, using temporal differences methods context routing presents important problem: key condition method, self-consistency estimatessuccessive states16 may strictly satisfied general case. due16. instance, prediction made node k time to-go destination node354fiAntNet: Distributed Stigmergetic Control Communications Networksfact (i) dynamics node related highly non-linear way dynamics neighbors, (ii) trac process evolves concurrently nodes,(iii) recursive interaction trac patterns control actions(that is, modifications routing tables). aspect explain part poorperformance pure TD(0) algorithms Q-R PQ-R.9. Related WorkAlgorithms based ant colony metaphor inspired ant colony foragingbehavior (Beckers et al., 1992). first proposed Dorigo (1992), Colorni etal. (1991) Dorigo et al. (1991, 1996) applied traveling salesmanproblem (TSP). Apart natural metaphor, idea behind first applicationsimilar one presented paper: set agents repeatedly run MonteCarlo experiments whose outcomes used change estimates variables usedsubsequent ants build solutions. ant-cycle, one first ant-based algorithms,value called \pheromone trail" associated edge graph representingTSP. ant builds tour exploiting pheromone trail information follows.node ant chooses next node j move among visited yetprobability Pij function amount pheromone trail edgeconnecting j (as well local heuristic function; interested reader finddetailed description ant-cycle elsewhere (Dorigo, 1992; Dorigo et al., 1996)). valuepheromone trails updated ants built tours. ant addsvisited edges quantity pheromone trail proportional quality tourgenerated (the shorter tour, higher quantity pheromone trail added).effect similar AntNet's increase routing tables probabilities, since higherpheromone trail particular edge increase probability chosenfuture. obviously many differences ant-cycle AntNet, mostly duedifferent types problems applied, combinatorialoptimization problem versus distributed, stochastic, time varying, real-time problem.Though majority previous applications ant colony inspired algorithms concern combinatorial optimization problems, recent applications routing.Schoonderwoerd et al. (1996, 1997) first consider routing possible application domain ant colony algorithms. ant-based control (ABC) approach,applied routing telephone networks, differs AntNet many respects. maindifferences direct consequence different network model considered,following characteristics (see Figure 18): (i) connection links potentially carryinfinite number full-duplex, fixed bandwidth channels, (ii) transmission nodescrossbar switches limited connectivity (that is, necessity queue management nodes). model, bottlenecks put nodes, congestiondegree network expressed terms connections still available switch.result, network cost-symmetric: congestion status available pathscompletely bi-directional. path n0 ; n1 ; n2 ; : : : ; nk connecting n0 nk exhibitadditively related prediction destination one k's neighbors,neighbor one ways go d.355fiDi Caro & Dorigolevel congestion directions congestion depends statenodes path. Moreover, dealing telephone networks, call occupiesexactly one physical channel across path.Therefore, \calls" multiplexedLink 1links, accepted refused, depending possibility reserving physicalN bidirectional channelscircuit connecting caller receiver.Link 2modeling assumptions make probLink 4lem Schoonderwoerd et al. differentcost-asymmetric routing problem datanetworks presented paper. difn << N possible connectionsference ected many algorithmic differences ABC AntNet, imFigure 18: Network node portant ABC ants updatetelecommunications network pheromone trails step, without waitingmodel Schoonderwoerd et completion experiment doneAntNet. choice, reminiscental. (1996).pheromone trail updating strategy implementedant-density, another first ant colony based algorithms (Dorigo et al., 1991; Dorigo,1992; Colorni et al., 1991), makes ABC behavior closer real ants', made possiblecost-symmetry assumption made authors.differences ABC use local models score ants trip times,local heuristic information ant-private memory improve ants decision policies.Also, recover cycles use information containedant sub-paths.different network model used many implementation detailstightly bound network model, impossible us re-implement compareABC algorithm AntNet.Subramanian, Druschel, Chen (1997) proposed ant-based algorithmpacket-switched nets. algorithm straightforward extension Schoonderwoerdet al. system adding so-called uniform ants, additional exploration mechanismavoid rapid sub-optimal convergence algorithm. limitation Subramanianet al. work that, although algorithm propose based cost-symmetryhypothesis ABC, apply packet-switched networks requirementoften met.Link 310. Conclusions Future Workpaper, introduced AntNet, novel distributed approach routing packetswitched communications networks. compared AntNet 6 state-of-the-art routingalgorithms variety realistic testbeds. AntNet showed superior performancerobustness internal parameter settings almost experiments. AntNet'sinnovative aspect use stigmergetic communication coordinate actionsset agents cooperate build adaptive routing tables. Althoughfirst application stigmergy-related concepts optimization problems (e.g., Dorigo et al.,356fiAntNet: Distributed Stigmergetic Control Communications Networks1991; Dorigo, 1992; Dorigo et al., 1996; Bonabeau, Dorigo, & Theraulaz, 1999), application presented unique many respects. First, AntNet, stigmergy-based controlcoupled model-building activity: information collected ants usedmodify routing tables, also build local models network status usedbetter direct routing table modifications. Second, first attempt evaluatestigmergy-based control realistic simulator communications networks: used simulator retains many basic components real routing system. interesting stepforward, direction testing applicability idea presented real networks,would rerun experiments presented using complete Internet simulator.Third, also first attempt evaluate stigmergy-based control comparingstigmergetic algorithm state-of-the-art algorithms realistic set benchmark problems. promising AntNet turned best performingtested conditions.obviously number directions current work could extended,listed below.1) first, natural, extension current work would consider inclusionsimulator ow congestion control components (with re-transmissions error management). inclusion require paired tuning routing ow-congestioncomponents, select best matching dynamics.2) AntNet, forward ant makes random experiment: builds pathsource node destination node d. path built exploiting information containedprobabilistic routing tables status queues visited nodes.building path, ant collects information status network. donesharing link queues data packets, measuring waiting times queuestraversal times used raw reinforcements backward ants. Since forwardants share queues data packets, time required run experiment dependsnetwork load, approximately time Ts!d required packetgo source node destination node d. delays momentinformation collected forward ants distributed backward ants, makesless up-to-date could be. possible improvement schema wouldadd model link-queue depletion nodes, let forward ants use high priorityqueues reach destinations without storing crossing times (for first stepdirection see Di Caro & Dorigo, 1998). Backward ants would make path,opposite direction, forward ants, use queue local models findway estimate local \virtual" queueing crossing times. Raw reinforcements, usedupdate routing tables, computed using estimates. Clearly,trade-off delayed real information recent estimated information.interesting see scheme works better, although confidentlocal queue models allow backward ants build estimates accurate enoughmake improved system effective current AntNet, cost littleincrease computational complexity nodes.3) discussed Section 8, AntNet missing one main components classicalRL/TD algorithms: back-chaining information state previous ones,node policy learned using complete local perspective. obvious extensionwork would therefore study versions AntNet closer TD() algorithms.357fiDi Caro & Dorigocase node maintain Q-values expressing estimate distancedestination via neighbor. estimates updated usingant trip time outcome estimates coming successive nodes (closerdestination node) could also carried backward ant.4) paper applied AntNet routing datagram communications networks.reasonable think AntNet could easily adapted used generationreal-time car route guidance Dynamic Trac Assignment (DTA) systems (see exampleYang, 1997). DTA systems exploit currently available emerging computer, communication, vehicle sensing technologies monitor, manage control transportationsystem (the attention focused mainly highway systems) provide variouslevels information advice system users make timely informedtravel decisions. Therefore, adaptive routing vehicle trac presents similar featuresrouting data packets communications networks. Moreover, vehicle trac controlsystems interesting property simplified \transport" layer. fact, manyactivities interfere routing implemented transport layercommunications networks exist, exist limited extent, vehicles traccontrol algorithms. example, typical transport layer activities like data acknowledgement retransmission cannot implemented real vehicles. activities, likeow control, strong constraints (e.g., people would happy forbiddenleave oces for, say, one hour grounds already many carsstreets!). makes AntNet still interesting since express full potentialrouting algorithm.5) AntNet, whenever ant uses link desirability (probability) incremented.Although strategy, finds roots ant colony biological metaphorinspired work, allowed us obtain excellent results, would interesting investigateuse negative reinforcements, even potentially lead stability problems,observed people working older automata systems. discussed before, AntNet differsautomata systems active role played ants. Therefore, usenegative reinforcements could show effective, example, reducingprobability choosing given link ant used performed badly.Acknowledgementswork supported Madame Curie Fellowship awarded Gianni Di Caro (CECTMR Contract N. ERBFMBICT 961153). Marco Dorigo Research AssociateFNRS. gratefully acknowledge help received Tony Bagnall, Nick BradshawGeorge Smith, proofread commented earlier draft paper, wellmany useful comments provided three anonymous referees Craig Boutilier,associate editor managed review process.Appendix A. Optimal Shortest Path Routingappendix, characteristics two used routing paradigms, optimalshortest path routing (introduced Section 2.1) summarized:358fiAntNet: Distributed Stigmergetic Control Communications NetworksA.1 Optimal routingOptimal routing (Bertsekas & Gallager, 1992) network-wide perspective objective optimize function individual link ows.Optimal routing models also called ow models try optimize totalmean ow network. characterized multicommodity ow problems,commodities trac ows sources destinations,cost optimized function ows, subject constraints ow conservation node positive ow every link. worth observing owconservation constraint explicitly stated trac arrival rate known.routing policy consists splitting source-target trac pair strategic points,shifting trac gradually among alternative routes. often results usemultiple paths trac ow origin-destination pair.Implicit optimal routing assumption main statistical characteristicstrac known time-varying. Therefore, optimal routing used staticcentralized/decentralized routing. evident kind solution suffersproblems static routers.A.2 Shortest path routingShortest path routing (Wang & Crowcroft, 1992) source-destination pair perspective.opposed optimal routing, global cost function optimized. Instead,route node pair considered priori knowledgetrac process required (although course knowledge could fruitfully used).costs assigned dynamic way, based statistical measures link congestionstate, strong feedback effect introduced routing policies tracpatterns. lead undesirable oscillations, theoretically predictedobserved practice (Bertsekas & Gallager, 1992; Wang & Crowcroft, 1992).popular cost metrics take account queuing transmission delays, link usage, linkcapacity various combination measures. way costs updated usuallyinvolves attempting reduce big variations considering long-term short-termstatistics link congestion states (Khanna & Zinky, 1989; Shankar, Alaettinoglu, DussaZieger, & Matta, 1992b).hand, costs static, ect measureexpected/wished trac load links transmission capacity. course,serious loss eciency could arise case non-stationary conditions prioriassumptions trac patterns strongly violated practice.Considering different content stored routing table, shortest path algorithmssubdivided two classes called distance-vector link-state (Steenstrup, 1995;Shankar et al., 1992b). common behavior shortest path algorithmsdepicted follows.1. node assigns cost outgoing links. cost staticdynamic. latter case, updated presence link failure basisobserved link-trac statistics averaged defined time-window.359fiDi Caro & Dorigo2. Periodically without required inter-node synchronization, node sendsneighbors packet information describing current estimatesquantities (link costs, distance nodes, etc.).3. node, upon receiving information packet, updates local routing tableexecutes class-specific actions.4. Routing decisions made deterministic way, choosing best path indicatedinformation stored routing table, adopting exible strategyuses information stored table choose randomizedalternative path.following, main features specific class described.A.2.1 Distance-vectorDistance-vector algorithms make use routing tables consisting set triplesform (Destination, Estimated Distance, Next Hop), defined destinationsnetwork neighbor nodes considered switch.17 case, requiredtopological information represented list reachable nodes identifiers.average per node memory occupation order O(Nn), N number nodesnetwork n average connectivity degree (i.e., average number neighbornodes considered nodes).algorithm works iterative, asynchronous distributed way. informationevery node sends neighbors list last estimates distancesnodes network. receiving information neighbornode j , receiving node updates table distance estimates overwriting entrycorresponding node j received values.Routing decisions node made choosing next hop node one satisfyingrelationship:arg min fdij + Dj gj 2Ndij assigned cost link connecting node neighbor j Djestimated shortest distance node j destination.shown process converges finite time shortest pathsrespect used metric link cost changes given time (Bertsekas & Gallager,1992).brie described algorithm known literature distributedBellman-Ford (Bellman, 1958; Ford & Fulkerson, 1962; Bertsekas & Gallager, 1992)based principles dynamic programming (Bellman, 1957; Bertsekas, 1995).prototype ancestor wider class distance-vector algorithms (Malkin& Steenstrup, 1995) developed aim reducing risk circular loopsaccelerating convergence case rapid changes link costs.17. cases, best estimates kept nodes. Therefore, triples defineddestinations only.360fiAntNet: Distributed Stigmergetic Control Communications NetworksA.2.2 Link-stateLink-state algorithms make use routing tables containing much informationused vector-distance algorithms. fact, core link-state algorithmsdistributed replicated database. database essentially dynamic map wholenetwork, describing details components current interconnections.Using database input, node calculates best paths using appropriatealgorithm like Dijkstra's (1959) algorithm (a wide variety alternative ecient algorithmsavailable, described example Cherkassky, Goldberg, & Radzik, 1994).memory requirements node case O(N 2 ).common form link-state algorithm, node acts autonomously, broadcasting information link costs states computing shortest pathsdestinations basis local link costs estimates estimatesreceived nodes. routing information packet broadcast neighbornodes turn send packet neighbors on. distributed oodingmechanism (Bertsekas & Gallager, 1992) supervises information transmission tryingminimize number re-transmissions.case vector-distance, described algorithm general templatevariety different versions implemented make algorithm behaviorrobust ecient (Moy, 1998).ReferencesAlaettinoglu, C., Shankar, A. U., Dussa-Zieger, K., & Matta, I. (1992). Design implementation MaRS: routing testbed. Tech. rep. UMIACS-TR-92-103, CS-TR-2964,Institute Advanced Computer Studies Department Computer Science, University Maryland, College Park (MD).Barto, A. G., Sutton, R. S., & Anderson, C. W. (1983). Neuronlike adaptive elementssolve dicult learning control problems. IEEE Transaction Systems, ManCybernetics, SMC-13, 834{846.Beckers, R., Deneubourg, J. L., & Goss, S. (1992). Trails U-turns selectionshortest path ant Lasius Niger. Journal Theoretical Biology, 159, 397{415.Bellman, R. (1957). Dynamic Programming. Princeton University Press.Bellman, R. (1958). routing problem. Quarterly Applied Mathematics, 16 (1), 87{90.Bertsekas, D. (1995). Dynamic Programming Optimal Control. Athena Scientific.Bertsekas, D., & Gallager, R. (1992). Data Networks. Prentice-Hall.Bertsekas, D., & Tsitsiklis, J. (1996). Neuro-Dynamic Programming. Athena Scientific.Bolding, K., Fulgham, M. L., & Snyder, L. (1994). case chaotic adaptive routing.Tech. rep. CSE-94-02-04, Department Computer Science, University Washington,Seattle.361fiDi Caro & DorigoBonabeau, E., Dorigo, M., & Theraulaz, G. (1999). Natural Artificial SwarmIntelligence. Oxford University Press.Boyan, J., & Littman, M. (1994). Packet routing dinamically changing networks: reinforcement learning approach. Advances Neural Information Processing Systems6 (NIPS6), pp. 671{678. San Francisco, CA:Morgan Kaufmann.Brakmo, L. S., O'Malley, S. W., & Peterson, L. L. (1994). TCP vegas: New techniquescongestion detection avoidance. ACM Computer Communication Review (SIGCOMM'94), 24 (4).Cheng, C., Riley, R., Kumar, S. P. R., & Garcia-Luna-Aceves, J. J. (1989). loop-freeextended bellman-ford routing protocol without bouncing effect. ACM ComputerCommunication Review (SIGCOMM '89), 18 (4), 224{236.Cherkassky, B. V., Goldberg, A. V., & Radzik, T. (1994). Shortest paths algorithms: Theoryexperimental evaluation. Sleator, D. D. (Ed.), Proceedings 5th AnnualACM-SIAM Symposium Discrete Algorithms (SODA 94), pp. 516{525 Arlington,VA. ACM Press.Choi, S., & Yeung, D.-Y. (1996). Predictive Q-routing: memory-based reinforcementlearning approach adaptive trac control. Advances Neural InformationProcessing Systems 8 (NIPS8), pp. 945{951. MIT Press.Colorni, A., Dorigo, M., & Maniezzo, V. (1991). Distributed optimization ant colonies.Proceedings European Conference Artificial Life (ECAL 91), pp. 134{142.Elsevier.Costa, D., & Hertz, A. (1997). Ants colour graphs. Journal Operational ResearchSociety, 48, 295{305.Crawley, E., Nair, R., Rajagopalan, B., & Sandick, H. (1996). framework QoS-basedrouting internet. Internet Draft (expired September, 1997) draft-ietf-qosrframework-00, Internet Engineering Task Force (IEFT).Danzig, P. B., Liu, Z., & Yan, L. (1994). evaluation TCP Vegas live emulation.Tech. rep. UCS-CS-94-588, Computer Science Department, University SouthernCalifornia, Los Angeles.Di Caro, G., & Dorigo, M. (1998). Two ant colony algorithms best-effort routingdatagram networks. Proceedings Tenth IASTED International Conference Parallel Distributed Computing Systems (PDCS'98), pp. 541{546.IASTED/ACTA Press.Dijkstra, E. W. (1959). note two problems connection graphs. Numer. Math.,1, 269{271.Dorigo, M. (1992). Optimization, Learning Natural Algorithms (in Italian). Ph.D.thesis, Dipartimento di Elettronica e Informazione, Politecnico di Milano, IT.362fiAntNet: Distributed Stigmergetic Control Communications NetworksDorigo, M., Di Caro, G., & Gambardella, L. M. (1998). Ant algorithms distributeddiscrete optimization. Tech. rep. 98-10, IRIDIA, Universite Libre de Bruxelles. Submitted Artificial Life.Dorigo, M., & Gambardella, L. M. (1997). Ant colony system: cooperative learningapproach traveling salesman problem. IEEE Transactions EvolutionaryComputation, 1 (1), 53{66.Dorigo, M., Maniezzo, V., & Colorni, A. (1991). Positive feedback search strategy.Tech. rep. 91-016, Dipartimento di Elettronica, Politecnico di Milano, IT.Dorigo, M., Maniezzo, V., & Colorni, A. (1996). ant system: Optimization colonycooperating agents. IEEE Transactions Systems, Man, Cybernetics{PartB, 26 (1), 29{41.Ford, L., & Fulkerson, D. (1962). Flows Networks. Prentice-Hall.Goss, S., Aron, S., Deneubourg, J. L., & Pasteels, J. M. (1989). Self-organized shortcutsArgentine ant. Naturwissenschaften, 76, 579{581.Grasse, P. P. (1959). La reconstruction du nid et les coordinations interindividuelleschez bellicositermes natalensis et cubitermes sp. La theorie de la stigmergie: essaid'interpretation du comportement des termites constructeurs. Insectes Sociaux, 6,41{81.Gray, R., Kotz, D., Nog, S., Rus, D., & Cybenko, G. (1997). Mobile agents: nextgeneration distributed computing. Proceedings Second Aizu InternationalSymposium Parallel Algorithms/Architectures Synthesis (pAs '97), pp. 8{24. IEEEComputer Society Press.Jaakkola, T., Singh, S. P., & Jordan, M. I. (1995). Reinforcement learning algorithmpartially observable Markov decision problems. Advances Neural InformationProcessing Systems 7, pp. 345{352. MIT Press.Kaelbling, L. P., Littman, M. L., & Moore, A. W. (1996). Reinforcement learning: survey.Journal Artificial Intelligence Research, 4, 237{285.Khanna, A., & Zinky, J. (1989). revised ARPANET routing metric. ACM SIGCOMMComputer Communication Review, 19 (4), 45{56.Malkin, G. S., & Steenstrup, M. E. (1995). Distance-vector routing. Steenstrup, M. E.(Ed.), Routing Communications Networks, chap. 3, pp. 83{98. Prentice-Hall.McCallum, A. K. (1995). Reinforcement learning selective perception hidden state.Ph.D. thesis, Department Computer Science, University Rochester, Rochester(NY).McQuillan, J. M., Richer, I., & Rosen, E. C. (1980). new routing algorithmARPANET. IEEE Transactions Communications, 28, 711{719.363fiDi Caro & DorigoMerlin, P., & Segall, A. (1979). failsafe distributed routing protocol. IEEE TransactionsCommunications, COM-27 (9), 1280{1287.Moy, J. T. (1998). OSPF Anatomy Internet Routing Protocol. Addison-Wesley.Narendra, K. S., & Thathachar, M. A. (1980). behavior learning automaton changing environment application telephone trac routing. IEEETransactions Systems, Man, Cybernetics, SMC-10 (5), 262{269.Nedzelnitsky, O. V., & Narendra, K. S. (1987). Nonstationary models learning automatarouting data communication networks. IEEE Transactions Systems, Man,Cybernetics, SMC-17, 1004{1015.Papoulis, A. (1991). Probability, Random Variables Stochastic Process (Third edition).McGraw-Hill.Peterson, L. L., & Davie, B. (1996). Computer Networks: System Approach. MorganKaufmann.Rubistein, R. Y. (1981). Simulation Monte Carlo Method. John Wiley & Sons.Sandick, H., & Crawley, E. (1997). QoS routing (qosr) working group report. InternetDraft, Internet Engineering Task Force (IEFT).Schoonderwoerd, R., Holland, O., & Bruten, J. (1997). Ant-like agents load balancingtelecommunications networks. Proceedings First International ConferenceAutonomous Agents, pp. 209{216. ACM Press.Schoonderwoerd, R., Holland, O., Bruten, J., & Rothkrantz, L. (1996). Ant-based loadbalancing telecommunications networks. Adaptive Behavior, 5 (2), 169{207.Shankar, A. U., Alaettinoglu, C., Dussa-Zieger, K., & Matta, I. (1992a). Performancecomparison routing protocols dynamic static file transfer connections.ACM Computer Communication Review, 22 (5), 39{52.Shankar, A. U., Alaettinoglu, C., Dussa-Zieger, K., & Matta, I. (1992b). Transientsteady-state performance routing protocols: Distance-vector versus link-state. Tech.rep. UMIACS-TR-92-87, CS-TR-2940, Institute Advanced Computer StudiesDepartment Computer Science, University Maryland, College Park (MD).Singh, S. P., & Sutton, R. S. (1996). Reinforcement learning replacing eligibility traces.Machine Learning, 22, 123{158.Singh, S. P., Jaakkola, T., & Jordan, M. I. (1994). Learning without state estimationpartially observable Markovian decision processes. Proceedings EleventhMachine Learning Conference, pp. 284{292. New Brunswick, NJ: Morgan Kaufmann.Steenstrup, M. E. (Ed.). (1995). Routing Communications Networks. Prentice-Hall.Stone, P., & Veloso, M. M. (1996). Multiagent systems: survey machine learningpersective. Tech. rep. CMU-CS-97-193, Carnegie Mellon University, Pittsburgh, PA.364fiAntNet: Distributed Stigmergetic Control Communications NetworksStreltsov, S., & Vakili, P. (1996). Variance reduction algorithms parallel replicatedsimulation uniformized Markov chains. Discrete Event Dynamic Systems: TheoryApplications, 6, 159{180.Subramanian, D., Druschel, P., & Chen, J. (1997). Ants reinforcement learning:case study routing dynamic networks. Proceedings IJCAI-97, InternationalJoint Conference Artificial Intelligence, pp. 832{838. Morgan Kaufmann.ATM Forum (1996). Private Network-Network Interface Specification: Version 1.0.Walrand, J., & Varaiya, P. (1996). High-performance Communication Networks. MorganKaufmann.Wang, Z., & Crowcroft, J. (1992). Analysis shortest-path routing algorithms dynamicnetwork environment. ACM Computer Communication Review, 22 (2).Yang, Q. (1997). Simulation Laboratory Evaluation Dynamic Trac Management Systems. Ph.D. thesis, Department Civil Environmental Engineering,Massachusetts Institute Technology (MIT).365fiJournal Artificial Intelligence Research 9 (1998) 99{137Submitted 10/97; published 9/98Computational Aspects Reordering PlansChrister BackstromDepartment Computer Information ScienceLinkopings universitet, S-581 83 Linkoping, Swedencba@ida.liu.seAbstractarticle studies problem modifying action ordering plan orderoptimise plan according various criteria. One criteria make planless constrained minimize parallel execution time. Three candidatedefinitions proposed first criteria, constituting sequence increasingoptimality guarantees. Two based deordering plans, means ordering relations may removed, added, third one uses reordering,arbitrary modifications ordering allowed. shown weakest onethree criteria tractable achieve, two NP-hard even dicultapproximate. Similarly, optimising parallel execution time plan studieddeordering reordering plans. general case, computationsNP-hard. However, shown optimal deorderings computed polynomialtime class planning languages based notions producers, consumersthreats, includes commonly used planning languages. Computing optimal reorderings potentially lead even faster parallel executions, problemremains NP-hard dicult approximate even quite severe restrictions.1. Introductionmany applications plans, made man computer, executed, important find plans optimal respect cost measure, typically executiontime. Examples applications manufacturing error-recovery industrialprocesses, production planning, logistics robotics. Many different kinds computations made improve cost plan|only extensivelystudied literature. well-known frequently used scheduling. plan tells actions (or tasks) order them,schedule assigns exact release times actions. schedule must obey actionorder prescribed plan must often also satisfy metric constraintsdeadlines earliest release times certain actions. schedule feasible satisfiesmetric constraints. usually interesting find schedule optimalrespect, eg feasible schedule shortest total execution time, schedulemissing deadlines actions possible.principle, planning scheduling follow sequence schedulingviewed post-processing step planning|where planning concerned causalrelations qualitative temporal relations actions, scheduling concernedmetric constraints actions. planning systems, eg O-Plan (Currie & Tate,1991) Sipe (Wilkins, 1988), planning scheduling integrated onesingle system. Similarly, temporal planners, eg Deviser (Vere, 1983) IxTeT (Ghallab& Laruelle, 1994), often reason also metric constraints. makec 1998 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.fiBackstroirrelevant study planning scheduling separate problems, though, seenvast literature topics. two problems quite different characterstudying separately gives important insight also integrated systemsdiscussed. instance, Drabble1 says often dicult seeO-Plan plans schedules; easy see O-Plan works, dicultsee why.complication understanding difference planning scheduling,integrated systems systems separated planning scheduling,certain types computations fall grey zone planning scheduling.Planners good reasoning effects actions causal relationshipsactions, usually poor reasoning time temporal relationshipsactions. Schedulers, hand, primarily designed reasontime resource con icts, capabilities reasoning causal dependenciesactions. problems grey zone require reasoning kinds, neitherplanners schedulers handle problems properly. problemssolved, scheduler get sucient information plannerbest situation|the planner scheduler may fail cooperation findplan feasible schedule, even plan exists.article focusses one grey-zone problems, namely problem optimising action order plan allow better schedules. Whenever two actions con ictcannot allowed execute parallel, planner must orderactions. However, usually enough information reasoning capabilitiesdecide two possible orders best one, makes arbitrary choice.One choices typically allows better schedule one, plannermakes wrong choice may prevent scheduler finding good, even feasible,schedule. situation arises also plans made human expert, since difficult see choice ordering best one large complex plan. Planningsystems today usually cannot anything better asking planner new planscheduler fails find feasible schedule. expensive unsatisfactorysolution, especially feedback scheduler help planner makingintelligent choice next time. Another solution appears literatureuse filter planner scheduler attempts modify plan orderput scheduler better position. filters could remove certain over-commitmentsordering, referred deordering plan, even change ordercertain actions, referred reordering plan.article intended provide first formal foundation studying typeproblems. defines number different optimality criteria plan order modifications,respect degree over-committment ordering respectparallel execution time, also provides computational results computingmodifications. article also analyses filtering algorithms suggested literatureorder modifications.remainder article structured follows. Section 2 introduces conceptscomputations studied article means example. Section 3 starts1. Brian Drabble, personal communication, Aug. 1997.100fiComputational Aspects Reordering Planstheoretical content article, defining two planning formalisms used followingsections. problems making plan least-constrained studied Section 4candidate definitions concept introduced computational properties investigated. Section 5 defines concepts parallel plans parallel executionsplans. followed Section 6 optimal deorderings reorderings parallelplans introduced complexity achieving optimality analysed. Section 7studies complexity problems affected restricting language.includes positive result algorithm literature finds optimal deorderings class plans common planning languages. filteringalgorithms literature well planners incorporating ordering optimisation discussed Section 8. Finally, Section 9 discusses aspects articlerelated work, Section 10 concludes brief recapitulation results.2. Exampleorder illustrate concepts operations studied article simple exampleassembling toy car used. example variation example usedBackstrom Klein (1991), much simplified version existing assembly linetoy cars used undergraduate laborations digital control Linkoping University(for description assembly line, see eg. Klein, Jonsson, & Backstrom, 1995, 1998;Stromberg, 1991). problem assemble LEGO2 car pre-assembled partsshown Figure 1. chassis, top set wheels, two latter mountedonto chassis.TopChassisCarWheelsFigure 1: Schematic assembly process toy carworkpiece ow factory shown Figure 2. three storages, onetype preassembled part, two workstations, number 1 mounting topnumber 2 mounting wheels, car storage assembled cars. Topsmoved top storage workstation 1 sets wheels moved2. LEGO trade mark LEGO company101fiBackstrowheels storage workstation 2. Chassis moved chassis storage eitherworkstation also, possibly parts mounted, two workstationseither workstation car storage. Furthermore, mounting wheelschassis, tyres must ated, workstation 2 incorporates compressed-air containermust pressurized ating tyres (this shown figure).TopStorageWorkstation 1ChassisStorageWheelsStorageCarStorageWorkstation 2Figure 2: Schematic lay-out toy-car factoryarticle concerned modifying order actions given plan,consider modifying also set actions. Hence, example assumeplan assembling toy car given|whether plan produced handplanning algorithm important. also assumed assembly plancontains exactly actions listed Table 1, order. Since resultsarticle independent particular planning language used, assumptionsplanning language made example either. make things simple,obvious common-sense constraints plans valid used. instance,part must moved workstation mounted there, wheels must atedmounted air container must pressurized ating tyres.Furthermore, since chassis one single place time, top cannotmounted parallel mounting wheels, neither mounting operationsdone parallel moving either chassis part mounted.purpose modifying action order given plan usually optimizeplan aspect, instance, make plan least constrained. Consider totallyordered plan Figure 3a, producing chassis wheels, subplanplan assembling car. Note since plan totally ordered, pairs actionsordered, implicit transitive arcs shown figure. plan clearlyover-constrained. instance, necessary move set wheels workstation2 pressurizing air container, removing ordering constraint resultsplan Figure 3b. Note orderings removed|the arc MvW2existed already original plan, implicit transitivity. planorderings removed referred deordering original plan.102fiComputational Aspects Reordering PlansActionMvT1MvW2MvC1MvC2MvSMtTMtWPACDescriptionMove top workstation 1Move wheels workstation 2Move chassis workstation 1Move chassis workstation 2Move chassis car storageMount top chassisMount wheels chassisPressurize air containerate tyresDuration112237454Table 1: Actions assembly plannew plan less constrained original plan, since possible movewheels pressurize air container either order or, perhaps, even parallel.However, orderings removed; necessary ate wheelsmoving chassis workstation. Removing also ordering results planFigure 3c, least constrained deordering original plan sensepossible remove ordering constraints still valid plan.is, removing ordering constraint, possible sequenceactions way plan longer intended result. additiondeorderings, one may also consider arbitrary modifications ordering relation, is,removing adding relations. modifications referred reorderings.Three differents least-constrainment criteria plans based deorderings reorderingsstudied Section 4, plan Figure 3c happens optimal accordingthree criteria.MvW2 - PAC-- MvC2 -MtWa) total order planMvW2PPPPq1PAC- MvC2 -MtWb) less constrained versionMvW2PPPPq1IT PPPPqPAC*MtWMvC2c) least constrainedversionFigure 3: Three plans mounting wheels103fiBackstroMaking plan least constrained clearly useful certain actions executedparallel. However, even case parallel execution possible, may stillworth making plan least constrained. Although partial order least constrainedplan must strengthened total order execution purposes, needtotal order original plan. Suppose actions temporal constaintslike deadlines earliest release times scheduler post-process plantry finding feasible schedule. may case original plan feasibleschedule, less constrained version sequenced feasible schedule.idea least constrained plan scheduler many alternative executionsequences possible choose from.important reason modifying action ordering plan, however,execute plan faster executing actions parallel whenever possible. purposebetter use length optimal schedule plan measure, rathermeasure ordering itself. Suppose following car-assembly plan givenhMvW 2; PAC; IT; MvC 2; MtW; MvT 1; MvC 1; MtT; MvS i:actions executed sequentially given order, minimum execution timesum durations actions, 29 time units. However,previous example plan over-constrained, since several actions could executedeither order, parallel.possible remove orderings far shown Figure 4a, further,still valid plan (the implicit transitive orderings shown figure).deordered version original assembly plan scheduled execute 25 time unitsexploiting parallelism whenever possible. example schedule shownFigure 3b. However, faster execution possible, since plan contains subsequenceactions cannot parallelized total execution time 25 timeunits.obvious schedule Figure 4b many actions executedparallel, gain deordering plan quite small. much better performancepossible arbitrary modifications action ordering allowed, is, alsoreorderings considered. instance, assembly plan particular reasonwheels mounted top mounted, seen shortlymuch time saved reversing order two operations. deorderingcannot this, however, since removing ordering wheel-mounting action(MtW) top-mounting action (MtT) would make unordered. wouldinterpreted two actions could executed parallel, possible.also reason actions must ordered original plan. However,allowing arbitrary modifications, order two actions reversed,Figure 5a shows reordering original plan. plan scheduledexecute 16 time units, considerable improvement originalplan optimal deordered version it. example optimal schedule shownFigure 5b. fact, plan optimal reordering sense orderingactions results valid plan scheduled execute faster. problemsfinding optimal deorderings reorderings plan respect parallel executionmain topic article, studied Sections 5 7.104fiComputational Aspects Reordering PlansPACMvW2MvT1MtWMvC2MtTMvC1MvSa) deordering assembly plan admitting shortestparallel execution timePACMvW2MtWMvC1MtTMvSMvC2MvT10510152025b) optimal schedule planFigure 4: optimal deordering assembly planobvious reordering powerful operation deordering, sincereordered plan Figure 5a allows shorter schedule optimal deorderingFigure 4a. hand, original planhMvT 1; MvC 1; MtT; MvS; MvW 2; PAC; IT; MvC 2; MtW i;deordering would sucient arriving optimal plan Figure 5a.3. Planning Formalismssection defines actions, plans related concepts, basically appear twodifferent guises article. Definitions tractability results mostly castgeneral, axiomatic framework order general independent formalismpossible. Hardness results, hand, mostly cast specific formalism,Ground Tweak, often subject restrictions, order strengthenresults. formalisms defined below. addition these, third formalismused, definition deferred used, Section 7.105fiBackstroPACMvW2MvT1MtTMvC1MvC2MvSMtWa) reordering assembly plan admitting shortestparallel execution timePACMvC1MvW2MvT1 MtT05MtWMvSMvC21015b) optimal schedule planFigure 5: optimal reordering assembly plan3.1 Axiomatic Planning Frameworkaxiomatic framework makes minimum assumptions underlying formalism. may instantiated planning formalism defines conceptplanning problem domain entities called actions validity test. planningproblem assumed consist planning problem instances (ppis),3 assumptions inner structure these. validity test truth-valued functiontaking ppi sequence actions arguments. validity test true ppiaction sequence ha1 ; : : : ; i, action sequence ha1 ; : : : ; said solve. inner structure ppis exact definition validity test crucial specific planning formalism, many results article proven withoutmaking assumptions. Results computational complexity certainproblems make assumption complexity validity test, though. Basedconcepts, notion plans defined usual way.Definition 3.1 total-order plan (t.o. plan) sequence P = ha1 ; : : : ; ani actions,alternatively denoted tuple hfa1 ; : : : ; g; 1 k; l n,ak al iff k < l. Given ppi , P said -valid iff validity test trueP .3. complexity-theoretic terminology problems. Planning problem instances sensearticle sometimes referred planning problems planning literature.106fiComputational Aspects Reordering Planspartial-order plan (p.o. plan) tuple P = hA; set actionsstrict ( ie. irre exive) partial order A. validity test extended p.o. planss.t. given ppi , P -valid iff hA; 0 valid every topological sorting 0 .actions t.o. plan must executed specified order, unorderedactions p.o. plan may executed either order. is, p.o. plan viewedcompact representation set t.o. plans. implicit assumptionunordered actions executed parallel; parallel plans defined Section 5.p.o. plans viewed directed acyclic graphs figures transitive arcs oftentacitly omitted enhance readability. Furthermore, proofs algorithms articlebased definition, ie assuming order plan transitively closed,many practical planners bother transitive closures. differenceaffect results presented here.3.2 Ground TWEAK FormalismGround TWEAK (GT) formalism TWEAK language (Chapman, 1987) restrictedground actions. formalism variation propositional STRIPS knownequivalent polynomial transformation common variants propositional STRIPS (Backstrom, 1995). brief, action precondition postcondition, sets ground literals.order define GT formalism, following two definitions required. Givenset , notion Seqs (S ) denotes set sequences formed members ,allowing repetition elements including empty sequence. symbol `;'used denote sequence concatenation operator. Further, given set P propositionalatoms, set LP literals P defined LP = P [ f:p j p 2 Pg. Sinceformulae allowed atoms negated atoms, double negation ::ptreated identical unnegated atom p. Finally, given set literals L, negationNeg(L) L defined Neg(L) = f:p j p 2 Lg[fp j :p 2 Lg L said consistentiff atom p s.t. p 2 L :p 2 L.Definition 3.2 instance GT planning problem quadruple = hP ; O; I; GiP finite set atoms;finite set operators form hpre; posti pre; post LP consistentdenote pre post condition respectively;I; G LP consistent denote initial goal state respectively.= hpre; posti O, write pre(o) post(o) denote pre post respectively.sequence ho1 ; : : : ; 2 Seqs (O) operators called GT plan (or simply plan) .Definition 3.3 ternary relation valid Seqs (O) 2L 2L defined s.t. arbitrary ho1 ; : : : ; 2 Seqs (O) S; LP , valid(ho1 ; : : : ; i; S; ) holds iff either1. n = 0P107PfiBackstro2. n > 0, pre(o1 )valid(ho2 ; : : : ; i; (S , Neg(post(o1 )) [ post(o1 ); ).t.o. plan ho1 ; : : : ; 2 Seqs (O) solves iff valid(ho1 ; : : : ; i; I; G).action unique instance operator, ie set actions may contain severalinstances operator, inherits pre- post-conditions operatorinstantiates. Since problems article consider fixed set actions,atom operator sets frequently tacitly omitted GT ppis. figures,GT actions shown boxes, precondition literals left postconditionliterals right.4. Least Constrained Plansseems generally assumed planning community difference t.o. plans p.o. plans sense t.o. plan easily convertedp.o. plan vice versa. However, p.o. plan trivially convertedt.o. plan low-order polynomial time topological sorting, less obvious alsoconverse holds. least three algorithms converting t.o. plans p.o. planspresented literature (Pednault, 1986; Regnier & Fade, 1991a; Veloso, Perez, &Carbonell, 1990) (all algorithms analyzed later article). claimt.o. plan easily converted p.o. plan vacuously true since t.o. planalready p.o. plan, definition. Hence, computation needs done.hardly algorithms intended compute, however. order useful,algorithm must output p.o. plan satisfying interesting criterion, ideallyoptimality criterion. fact, two algorithms mentioned claimed produceoptimal plans according certain criteria. instance, Veloso et al. (1990, p. 207) claimalgorithm produce least constrained plans. define meanterm, however, hardly paper literature using termwithout definition.Unfortunately, means obvious constitutes intuitive good criterionp.o. plan least constrained and, extent, also dependspurpose achieving least-constrainment. major motivation producing p.o. plansinstead t.o. plans (see instance Tate, 1975) p.o. plan post-processedscheduler according criteria, release times deadlines resourcelimits. Either actions ordered (ideally) optimal sequence or, given criteriaparallel execution, parallel plan executed faster actionsexecuted sequence. cases, less constrained original plan is, greaterchance arriving optimal schedule optimal parallel execution respectively.algorithms mentioned motivated goal exploiting possibleparallelism decrease execution time.interesting make t.o. plans partially ordered, also make partiallyordered plans partially ordered, is, generalise ordering. algorithmtask presented literature context case-based planning(Kambhampati & Kedar, 1994). Since t.o. plan special case p.o. plans,section study general problem making partially ordered plans less constrained.108fiComputational Aspects Reordering Plans4.1 Least-constrainment Criteriais, naturally, infinitude possible definitions least-constrainment. seemreasonable others, however. Three intuitively reasonable candidates definedanalyzed below. Although definitions possible, questionable whetherconsiderably better natural definitions, respect purposes mentionedabove, defined without using information usually present t.o.p.o. plan.Definition 4.1 Let P = hA; Q = hA; 0i two p.o. plans ppi. Then,1. Q reordering P wrt. iff P Q -valid.2. Q deordering P wrt. iff Q reordering P 03. Q proper deordering P wrt. iff Q reordering P 0Definition 4.2 Given ppi two p.o. plans P = hA; Q = hA; 0i,1. Q minimal-constrained deordering P wrt. iff(a) Q deordering P wrt.(b) proper deordering Q wrt. ;2. Q minimum-constrained deordering P wrt. iff(a) Q deordering P wrt.(b) deordering hA; 00 iof Q wrt. s.t. j 00 j < j j;3. Q minimum-constrained reordering P wrt. iff(a) Q reordering P wrt.(b) reordering hA; 00 iof Q wrt. s.t. j 00 j < j j;Note previous publication (Backstrom, 1993) used terms LC1-minimalityminimal-constrained deordering LC2-minimality minimum-constrained reordering.change terminology done hope gained claritylost confusion.easy see minimum-constrainment stronger criterion minimalconstrainment|any minimum-constrained deordering plan P minimal-constraineddeordering P , opposite true. example, consider plan Figure 6a.removing ordering constraints action C, result plan Figure 6b,still valid. plan order size 3 (there one implicit transitive order)minimal-constrained deordering since deordering made.minimum-constrained deordering, however, since instead breaking ordering constraintssubsequences AB CB, result plan Figure 6c, also valid.plan ordering size 2 easily seen minimum-constraineddeordering, happens coincide minimum-constrained reorderingcase. coincidence always case, however, since reordering allowed109fiBackstromodifications deordering; minimum deordering obviously neversmaller ordering relation minimum reordering. Examples differenceshown already Section 2, Figure 4a shows minimum-constrained deorderingFigure 4b shows minimum-constrained reordering.-ppB-qCq-qa) total-order planCp-pBq-qqCb) minimal deorderingq-qp-pBqb) minimum deorderingFigure 6: difference minimal minimum constrained deorderings.alternative definitions least-constrainment could be, instance, maximizeunorderdness minimize length longest chain modified plan. However, find de-/reordering many pairs unordered actions possibledual computing minimum de-/reordering is, thus, already covered. Minimizinglength longest chain condition may relevant actionsexecuted parallel overall execution time minimized. However, sincenumber ordering constraints quadratic length chain (because transitivearcs), minimizing size relation often reasonable approximation minimizing chain length. Furthermore, minimizing longest chain still rather weakcondition purpose, better study directly problem finding shortestparallel executions plans, done later article.Another issue whether minimize size ordering relation given,reduce transitive reductive closure it. Since plans may super uous orderingsparticular purpose, reasonable standardize matters either add possibletransitive arcs, getting transitive closure, remove transitive arcs, gettingreductive closure. choice two important resultsproven. However, minimizing transitive closure give preference plansmany unordered short chains actions plans long chains, seemscoincide better term 'least constrained'.4.2 Computing Least-constrained PlansMinimal deordering weaker two least-constrainment criteria considered,least costly achieve|it one three criteriasatisfied polynomial-time modification plan.110fiComputational Aspects Reordering PlansDefinition 4.3 search problemMinimal-Constrained Deordering (MlCD)defined follows:Given: ppi -valid plan P .Output: minimal-constrained deordering P wrt. .Theorem 4.4MlCD solved polynomial time validity p.o. planstested polynomial time.Proof: Consider algorithm MLD Figure 7 let Q = hA; 0 plan outputalgorithm input P = hA; i. plan Q obviously valid deordering P wrt.. obvious termination condition loopordering 00 0 s.t. hA; 00 -valid. follows Q minimal-constraineddeordering. Since algorithm obviously runs polynomial time, theorem follows.2Furthermore, validity testing expensive, dominating cost MLDalgorithm.Corollary 4.5 validity testing p.o. plans solved time O(f (n))function f (n), MlCD solved O(maxfn7=2 ; n2 f (n)g) time.1 procedure MLD2Input: valid p.o. plan P = hA; ppi3Output: minimal deordering P4 e 2 s.t. hA; ( ,feg)+i -valid5remove e6 return hA; + i;Figure 7: minimal-deordering algorithm MLDparticular, note plan validation polynomial usual variant propositional STRIPS without conditional actions (Nebel & Backstrom, 1994, Theorem 5.9).precisely, proof pertains Common Propositional STRIPS formalism (CPS)and, thus, holds also common variants propositional STRIPS, like GroundTWEAK (Backstrom, 1995). Furthermore, note practice may necessarycompute transitive closure either output plan validating planalgorithm.minimum de-/reordering stronger criteria minimal deordering,also costly achieve.Definition 4.6 decision problemMinimum-Constrained Deordering (MmCD)defined follows:Given: ppi , -valid plan P integer k 0.Question: deordering hA; P s.t. j j k?111fiBackstroDefinition 4.7 decision problemMinimum-Constrained Reordering (MmCR)defined follows:Given: ppi , -valid plan P integer k 0.Question: reordering hA; P s.t. j j k?Theorem 4.8Minimum-Constrained Deordering NP-hard.Proof: Proof reduction Minimum Cover (Garey & Johnson, 1979, p. 222),NP-complete. Let = fp1 ; : : : ; pn g set atoms, C = fC1 ; : : : ; Cm g setsubsets k jC j positive integer. cover size k subset C 0 C s.t.jC 0j k [T 2C . Construct, polynomial time, GT ppi = h;; frgi-valid t.o. plan P = ha1 ; : : : ; ; pre(ai ) = ; post(ai ) = Ci 1 m,pre(aS ) = post(aS ) = frg. Obviously, minimum cover size kiff exists -valid p.o. plan Q = hfa1 ; : : : ; ; g; s.t. j j k, since0actions contributing cover need remain ordered wrt.Corollary 4.92Minimum-Constrained Reordering NP-hard.Corollary 4.10Minimum-Constrained Deordering Minimum-ConstrainedReordering remain NP-hard even restricted GT plans actionspositive pre- post-conditions.Theorem 4.11 validity p.o. plans complexity class C,MinimumConstrained Deordering Minimum-Constrained Reordering NP C.Proof: Guess solution, verify de-/reordering validate using2oracle C.common planning formalisms without conditional actions context-dependenteffects, minimal de-/reordering NP-complete.Theorem 4.12 validity p.o. plans tested polynomial time, Minimum-Constrained Deordering Minimum-Constrained Reordering NP-complete.Proof: Immediate Theorems 4.8 4.11 Corollary 4.9.2follows immediately corresponding search problems, is, problemsgenerating minimum-constrained de-/reordering also NP-hard (and even NP-equivalentvalidity testing tractable).Furthermore, MmCD MmCR hard solve optimally, evenapproximate. Neither problems approximation class APX (Crescenzi& Panconesi, 1991), ie neither problem approximated within constant factor.(Both elsewhere article term approximation used constructivesense, results refer existence/non-existence algorithms producingapproximate solution polynomial time).112fiComputational Aspects Reordering PlansTheorem 4.13Minimum-Constrained Deordering Minimum- ConstrainedReordering cannot approximated within constant unless NP 2 DTIME (npoly log n ).Proof: Suppose polynomial-time algorithm approximating MmCD withinconstant. Since reduction proof Theorem 4.8 preserves solutions exactly,also approximations preserved. Hence, Minimum Cover could approximated withinconstant, impossible unless NP 2 DTIME (npoly log n ) (Lund & Yannakakis,1994), contradicts assumption. case MmCR trivial consequence. 2using number propositional atoms plan measure size,bound strengthened (1 , ") ln jPj arbitrary " unless NP 2 DTIME (nlog log n )substituting result Minimum Cover (Feige, 1996) proof above.5. Parallel Plansorder study problem finding shortest parallel execution plan, formalisms used far quite sucient. Since lack capability modellingactions executed parallel not, impossible say reasonable precision certain action ordering affect parallel execution time. Partial-orderplans sometimes referred parallel plans literature. misleading, however.two actions left unordered plan means executedeither order, without affecting validity plan, general caseguarantee plan remain valid also executions actions overlaptemporally. cases, unorderedness means parallel overlapping executionallowed, cases mean that, depending action modellingunderlying domain assumptions. first case, plan must stronger orderingcommittment, two actions must overlapping executions must ordered,thus making plan over-committed.order distinguish two cases, concept parallel plans introduced below.parallel plan partial-order plan extra relation, non-concurrency relation,tells actions must executed parallel. article two actionsconsidered parallel executions temporal overlap all. Plansunordered actions executed parallel constitute special case definite parallelplans.Definition 5.1 parallel plan triple P = hA; ; #i, hA; p.o. plan# irre exive, symmetric relation A. definite parallel p.o plan parallel planP = hA; ; #i s.t. # ( [ ,1 ).Intuitively, parallel plan p.o. plan extended extra relation, # (a nonconcurrency relation), expressing actions must executed parallel.relation primarily intended convey information actions unorderedrelation, although allowed relate also actions. is, #relation intended capture information whether two actions executedparallel not, general. two actions ordered plan forbids executingparallel particular plan, necessarily mean actions could113fiBackstroexecuted parallel different circumstances. Planning algorithms frequently produce overcommitted orderings plans, whole purpose article studyproblem optimizing plans finding removing overcommitted orderings. Hence,restrictions general relation # addition Definition 5.1.instance, b imply a#b. However, non-concurrency relationfrequently constrained satisfy post-exclusion principle.Definition 5.2 parallel GT plan P = hA; ; #i satisfies post-exclusion principleiff actions a; b 2 A, a#b whenever atom p s.t. p 2 post(a):p 2 post(b).definition plan validity directly inherited p.o. plans.Definition 5.3 Given ppi , parallel plan hA; ; #i -valid iff p.o. plan hA;-valid.non-concurrency relation is, thus, relevant deciding whether plan validnot. Instead, used constraining parallel plans may executedcore concept behind definition parallel executions.Consider, instance, GT plan hfA; B; C g; fhA; B ig; fhB; C igi shownFigure 8 (arrows denote ordering relations dashed lines denote nonconcurrency relations). plan valid wrt. ppi = h;; fr; sgi, final value atom qmatter. Since B #C holds actions B C constrained executedparallel, may executed either order, is, plan definite. couldpost-exclusion principle employed, reason. AlthoughA#B hold actions B clearly cannot executed parallel, since Bholds. four ways execute plan, either three sequences A,B,C;A,C,B C,A,B, executing C parallel, followed B (unit length assumed). Also note plan would longer valid goal contained either q:q, since final truth value q depends actual execution order. Furthermore,reordering plan would keep ordering constraint B satisfyvalidity criterion, necessary constraint A#B . would harminclude restriction, complex plans may over-constrainment,several producers atom p choose between, instance. sum up,non-concurrency relation primarily used mark actions mustparallel addition already forbidden parallel validity.framework parallel plans admits expressing possible parallelism only; necessaryparallelism scope article requires planner accessable make use additional information, perhaps temporal algebra.Furthermore, set non-concurrent actions easily expressed making actionsset pairwise non-concurrent, formalism sucient say kactions, more, set may executed parallel. Similarly, possibleexpress action must executed interval, two setsactions must non-overlapping executions.Definition 5.4 Let P = hA; ; #i parallel plan let function : 7! N denoteduration action. parallel execution P function r : 7! N , denotingrelease times actions A, satisfying a; b 2 A,114fiComputational Aspects Reordering PlanspqrB#C :s qFigure 8: parallel plan1. b, r(a) + d(a) r(b)2. a#b, either(a) r(a) + d(a) r(b)(b) r(b) + d(b) r(a).length parallel execution defined maxa2A fr(a) + d(a)g, ie, latest finishing time action. minimum parallel execution plan parallel executionminimum length among parallel executions plan. length parallel plan P ,denoted length(P ), length minimum parallel execution(s) P .PObviously, every parallel plan parallel execution length a2A d(a) (whichtrivial case sequential execution). Furthermore, certain cases, hardness resultsstrengthened restricting duration function.Definition 5.5 special case d(a) = 1 2 referred unittime assumption.Deciding whether release-time function parallel execution tractable.Theorem 5.6 Given parallel plan P = hA; ; #i, duration function : 7! Nrelease-time function r : 7! N , decided polynomial time whether r parallelexecution P and, case is, length execution is.Proof: Trivial.2Consider plan Figure 8 three release-time functions r1 , r2 r3 , definedfollowsr1(A) = 1 r1 (B ) = 2 r1 (C ) = 3r2(A) = 1 r2 (B ) = 2 r2 (C ) = 1r3(A) = 1 r3 (B ) = 2 r3 (C ) = 2:r1 r2 parallel executions plan, r3 not. Furthermore, r2minimum parallel execution plan, length 2. However, computingminimum parallel execution parallel plan dicult general case.115fiBackstroDefinition 5.7 decision problem Parallel Plan Length (PPL) defined follows:Given: parallel plan P = hA; ; #i, duration function integer k.Question: P parallel execution length k shorter?Theorem 5.8Parallel Plan Length NP-hard.Proof: Hardness proven transformation Graph K-Colourability (Garey& Johnson, 1979, p. 191), NP-complete. Let G = hV; E arbitrary undirected graph, V = fv1 ; : : : ; vn g. Construct, polynomial time, GT ppi follows. Define ppi = h;; fp1 ; : : : ; pn gi. Also define parallel plan P = hA; ;; #i,contains one action ai vertex vi 2 V , s.t. pre(ai ) = ; post(ai ) =fpi; qi g [ f:qj j fvi; vj g 2 E g. Finally, let ai#aj iff fvi ; vj g 2 E , satisfies post-exclusion principle. plan P constructed obviously -valid. easy seeG k-colourable iff P parallel execution length k wrt. since colour Gcorrespond unique release time parallel execution P .2Corollary 5.9Parallel Plan Length remains NP-hard even restricted GT ac-Theorem 5.10Parallel Plan Length NP.tions empty preconditions assumption unit time post-exclusionprinciple.Proof: Guess parallel execution. verify it, done polynomial time2according Theorem 5.6.Computing minimum parallel execution plan tractable special case definiteplans, however.Theorem 5.11parallel plans.Parallel Plan Length solved polynomial time definiteProof: Use algorithm DPPL (Figure 9), straightforward stratification2algorithm directed DAGs.6. Reordering Parallel Plansdefined concept parallel plan, possible define concepts similarprevious least-constrainment criteria appropriate minimizingexecution time parallel plans.Definition 6.1 Let P = hA; ; #i Q = hA; 0 ; #i two parallel plans ppi.Then,1. Q parallel reordering P wrt. iff P Q -valid;116fiComputational Aspects Reordering Plans123456789101112procedure DPPLInput: definite parallel plan P = hA; ; #iOutput: minimum parallel execution r PConstruct directed graph G = hA;2r(a) 06= ;Select node 2 without predecessorsb 2 s.t. br(b) max(r(b); r(a) + d(a))return r, fagFigure 9: Algorithm computing minimum parallel execution definite parallel plans.2. Q parallel deordering P wrt. iff Q parallel reordering P 0 ;3. Q minimum parallel reordering P wrt. iff(a) Q parallel reordering P wrt.(b) parallel reordering P wrt. shorter length Q;4. Q minimum parallel deordering P wrt. iff(a) Q parallel deordering P wrt.(b) parallel deordering P wrt. shorter length Q.Modifying plans satisfy either latter two criteria dicult general case,however.Definition 6.2 decision problem Minimum Parallel Deordering (MmPD) defined follows.Given: ppi , parallel plan P , duration function integer k.Question: P deordering parallel execution length k wrt. ?Definition 6.3 decision problem Minimum Parallel Reordering (MmPR) defined follows.Given: ppi , parallel plan P , duration function integer k.Question: P reordering parallel execution length k wrt. ?Theorem 6.4 Minimum Parallel Deordering NP-hard.Proof: Similar proof Theorem 6.4. Given graph G integer k, constructppi plan P = hA; ; #i way proof Theorem 5.8,let arbitrary total order A. Obviously, P -valid Q = hA; ;; #ideordering P s.t. deordering P shorter Q. Hence, Q, thus P ,deordering parallel execution length k iff G k-colourable.2117fiBackstroCorollary 6.5Corollary 6.6Minimum Parallel Reordering NP-hard.Minimum Parallel Deordering Minimum Parallel Reordering remain NP-hard even restricted totally ordered GT plans as-sumptions unit time simple concurrency.Note restriction definite input plans covered corollary. outputplans also required definite, reordering case remains NP-hard.Theorem 6.7Minimum Parallel Reordering remains NP-hard also outputplan restricted definite.Proof: Reuse proof Theorem 6.4 follows. Let r shortest parallel executionplan Q assume execution length n. Construct order 0 s.t.actions a; b 2 A, 0 b iff r(a) < r(b). Obviously plan hA; 0 ; #i definiteminimum parallel reordering P . follows P definite parallel reorderinglength k iff G k-colourable.2open question whether minimum deordering remains NP-hard also outputplans must definite, important special case polynomial, provennext section.Theorem 6.8Minimum Parallel Deordering Minimum Parallel Reorder-ing NP C validation p.o. plans complexity classC.Proof:Given plan hA; ; #i, duration function parameter k, guessde/reordering 0 release-time function r. verify, using oracle C ,hA; 0 ; #i valid. Finally, verify r parallel execution length k,polynomial according Theorem 5.6.2Theorem 6.9 Minimum parallel de-/reordering NP-complete p.o. plans vali-dated polynomial time.Proof: Immediate Theorems 6.4 6.8 Corollary 6.5.2problems MmPD MmPR hard solve optimally, alsoapproximate.Theorem 6.10Minimum Parallel Deordering Minimum Parallel Reordering cannot approximated within jAj1=7," " > 0, unless P=NP.Proof:Suppose polynomial-time algorithm approximating MmCD withinjAj1=7," " > 0. immediate proof Theorem 6.4 alsoGraph K-Colourability could approximated within jAj1=7," , impossibleunless P=NP (Bellare, Goldreich, & Sudan, 1995).2reasoning, bound strengthened jAj1," , assumptionco-RP6=NP (Feige & Kilian, 1996).118fiComputational Aspects Reordering Plans7. Restricted CasesSince problems computing minimum de-/reorderings dicult, evendicult approximate, alternative way tackling could study restrictedcases. One special case already considered restriction definite plans only.problem MmPR still NP-complete restriction, open question whetheralso MmPD NP-complete. positive result proven, though, effectMmPD polynomial definite plans large class planning languages, includingcommonly used ones. result proven generalising algorithmliterature deordering total-order plans.Based (not necessarily true) argument easier generate t.o. planp.o. plan using complex action representations, Regnier Fade (1991a, 1991b)presented algorithm converting t.o. plan p.o. plan. resulting planproperty unordered actions executed parallel, is, plandefinite. authors algorithm claim algorithm finds pairsactions executed parallel and, hence, plan post-processedfind optimal parallel execution. define mean criterion,however.Incidentally, algorithm proposed Regnier Fade special case algorithm earlier proposed problem Pednault (1986), makeclaims optimality. removing Regnier Fade's algorithm details relevantparticular implementation planning language, two algorithms coincidethus presented one single algorithm, PRF algorithm4 (Figure 10).PRF slightly modified original algorithms. First, assume input plan totally ordered, since turns sucient definite partial-orderplan. Second, PRF returns parallel plan, rather p.o. plan|a harmless modification since additional piece information non-concurrency relation,already given input, either explicitly implicitly. Third, PRF returns transitiveclosure ordering relation. means necessary, motivated, usual,conforming definitions article.1 procedure PRF;2Input: ppi , -valid definite p.o. plan hA; non-concurrencyrelation #3Output: -valid parallel plan4 a; b 2 s.t. b5a#b6Order 0 b;7 return hA; 0+ ; #i;Figure 10: PRF algorithmObviously, PRF computes deordering input, unclear whether possible compute minimal definite deordering polynomial time. However, algorithm4. afterwards, algorithms literature referred acronyms consistinginitials authors, case Pednault, Regnier Fade.119fiBackstroabstracted general formalism, analysis restricted formalisms reveals performance. language used Regnier Fadeunnecessarily restricted algorithm shown work considerablygeneral formalism, based generalising abstracting concepts producers, consumers threats used common planners planning languages, eg STRIPSTWEAK. formalism referred Producer-Consumer-Threat formalism(PCT).Let prod(a; ) denote produces condition , cons(a; ) consumesthreat(a; ) threat . simplify definitions, standard transformationused simulating initial goal states actions. is, every PCT plancontains action ordered actions consumes nothing producesinitial state. Similarly, action ordered actions consumesgoal state produces nothing. means ppi contained within planitself, references ppis omitted following. Validity plansdefined follows.Definition 7.1 t.o. PCT plan ha1 ; : : : ; valid iff i, 1 nconditions s.t. cons(ai ; ), j , 1 j < s.t. prod(aj ; ) k,j k s.t. threat(ak ; ). p.o. PCT plan valid iff topological sortingsvalid.Chapman's Modal-truth Criterion (MTC) (Chapman, 1987) abstractedPCT formalism analogously used validating p.o. plans.Definition 7.2 modal truth criterion (MTC) PCT plan hA; is:8aC 8(cons(aC ; ) !9aP (prod(aP ; ) ^ aP aC ^8aT (threat(aT ; ) !aC _9aW (prod(aW ; ) ^ aW ^ aW aC ))))Theorem 7.3 MTC holds PCT plan P iff valid.Proof: Trivial generalization proofs leading Theorem 5.9 Nebel Backstrom2(1994).minimum constraints two actions may executed parallelrequired. constraints obeyed planners AI literature.Definition 7.4 Simple concurrency holds actions a, b s.t. 6= b, nonconcurrency relation satisfies following three conditions1. prod(a; ) ^ cons(b; ) ! a#b2. prod(a; ) ^ threat(b; ) ! a#b3. cons(a; ) ^ threat(b; ) ! a#b120fiComputational Aspects Reordering PlansNote required two producers, two consumers two threatscondition non-concurrent, thus allowing, instance, plans multiple producers, egNebel Backstrom (1994, Fig. 4) Kambhampati (1994). axioms preventadding restrictions, though. Furthermore, note definition states necessary condition non-concurrency|it perfectly legal add non-concurrencyconstraints actions plan. may also worth noting MTC requiresproducers threats ordered correpsonding consumer,definite plan satisfying simple concurrency criterion always require ordered.following observation PRF immediate algorithm usedproofs below.Observation 7.5 hA; ; #i input PRF hA; 0 ; #i correspondingoutput, holds 0 b iff b a#b.Based lemma, proven PRF preserves validity.Lemma 7.6 plan input PRF valid PCT plan # satisfies simpleconcurrency criterion, output plan valid.Proof: Let P = hA; ; #i input plan Q = hA; 0 ; #i output plan. SinceP valid, follows Theorem 7.3 MTC holds P . Adding impliedsimple-concurrency constraints MTC yields following condition:8aC 8(cons(aC ; ) !9aP (prod(aP ; ) ^ aP aC ^ aP #aC ^8aT (threat(aT ; ) !(aC ^ aC #aT )_9aW (prod(aW ; )^aT aW ^ #aW ^aW aC ^ aW #aC )))).applying Observation 7.5 simplified to:8aC 8(cons(aC ; ) !9aP (prod(aP ; ) ^ aP 0 aC ^8aT (threat(aT ; ) !aC 0 _9aW (prod(aW ; ) ^ 0 aW ^ aW 0 aC )))),MTC plan Q. using Theorem 7.3, follows Q valid.2allows proving PRF produces definite minimum deorderings definite PCTplans simple concurrency.Theorem 7.7 using PCT formalism simple concurrency, PRF producesminimum-deordered definite version input.121fiBackstroProof: Let P = hA; ; #i input plan, assumed valid definite,Q = hA; 0 ; #i output plan. obvious 0 follows Lemma 7.6Q valid, Q deordering P . remains prove Q minimum deorderingP .Suppose P deordering R = hA; 00 ; #i s.t. j 00 j < j 0 j. Then, musta; b 2 s.t. 0 b, 00 b. assumed 0 btransitive arc 0 , since transitive closure anyway computed endalgorithm. Since order 0 produced PRF, follows Observation 7.5b a#b. latter constraint, necessary either, 00 bb 00 holds, former possible since b R deordering P .contradicts assumption, Q must minimum deordering P .2Since PRF polynomial algorithm, follows definite minimum deorderingsdefinite PCT plans computed polynomial time simple concurrency. Furthermore, since PRF produces definite plans possible actually compute shortestparallel execution eciently.Theorem 7.8 plan input PRF valid definite PCT plan satisfyingsimple concurrency criterion, PRF outputs definite minimum deordering plan.Proof: PRF runs polynomial time obviously produces definite parallel plans.Hence, follows Theorem 5.11 minimum parallel execution output planfound polynomial time, proves theorem.2seems likely Regnier Fade meant optimality claim, although special instance PCT formalism. result says nothingdiculty finding minimum reordering plan, since PRF considers deorderings.Since minimum deorderings approximate minimum reorderings well, suspected dicult compute latter. following theorem confirmssuspicion, showing latter problem remains NP-hard quite severe restrictions,including following two.Definition 7.9 GT action toggling iff literals l 2 post(a), also case:l 2 pre(a). GT action unary iff jpost(a)j = 1.Theorem 7.10 Minimum Parallel Reordering remains NP-hard even restrictedtotal-order GT plans toggling unary actions assumption unittime, simple concurrency actions redundant.proof theorem appears Appendix A.minimum reorderings dicult compute minimum deorderings,also produce arbitrarily better results.Theorem 7.11Minimum Parallel Deordering cannot approximate Minimum Parallel Reordering within jAjk constant k 0.proof theorem appears Appendix A.122fiComputational Aspects Reordering PlansCorollary 7.12 Minimum Parallel Deordering cannot approximate Minimum Parallel Reordering within jAjk constant k 0 even problems restricted GT plans positive preconditions assumption simpleconcurrency.may, thus, appear though minimum reordering preferable, albeit costly,operation minimum deordering. However, plan modification followedscheduling, longer obvious reordering prefer. Since scheduling maytake information constraints account, eg upper lower boundsrelease time limited resources, feasible schedule original plan may longerfeasible schedule reordering plan. is, feasible solutionsmay lost reordering plan. contrast this, deordering plan harmlesssince previously feasible schedules preserved deordering. course, de/reordered plan may new better schedules old plan,problems studied article interesting all. However, minimum deorderingsafe and, usually cheap, operation, minimum reordering neither must thusapplied care. find reordering plan optimum schedule wouldrequire combining minimum reordering scheduling one single computation,scope article study combinations. Suce observecomputation never cheaper either constituent computations.8. Related worksection analyses discusses algorithms suggested literature generalising ordering plan, addition PRF algorithm already analysedpreceeding section. Also planners generate plans optimality avourordering discussed.algorithms analysed use common trick simulating initialstate goal planning instance two extra operators, following way. LetP = hA; plan = hI; Gi ppi, GT language. Introduce two extraactions aI , pre(aI ) = ; post(aI ) = , aG , pre(aG ) = G post(aG ) = ;.Define plan Q = hA [ faI ; aG g; 0 0 = [faI a; aG j 2 Ag[faI aG g,aI ordered actions aG ordered actions.plan Q representation plan P ppi . combined representationreferred self-contained plan. self-contained plan valid iff valid wrt.ppi h;; ;i. trivial convert plan ppi corresponding self-containedplan vice versa. Hence, ways representing plan used alternatelywithout notice.8.1 VPC AlgorithmVeloso et al. (1990) presented algorithm (here referred VPC5 ) convertingt.o. plans `least-constrained' p.o. plans. use algorithm following context.First total-order planner (NoLimit) used produce t.o. plan. VPC converts plan5. original publication algorithm named Build Partial Order.123fiBackstro1 procedure VPC;2Input: valid self-contained t.o. plan ha1 ; : : : ;a1 = aI = aG3Output: self-contained valid p.o. plan4 1 n5p 2 pre(ai )6Find max k < s.t. p 2 post(ak );7k exists8Order ak ai9:p 2 post(ai )101 k < s.t. p 2 pre(ak )11Order ak ai12primary effect p 2 post(ai )131 k s.t. :p 2 post(ak )14Order ai ak151 < < n16Order aI ai ai aG17return hfa1; : : : ; ang; +i;Figure 11: VPC algorithmp.o. plan post-processed determine actions executedparallel. action language used STRIPS-style language allowing quantifierscontext-dependent effects. However, plans produced planner, thus inputVPC, ground without context-dependent effects. is, ordinarypropositional STRIPS plans. VPC algorithm presented Figure 11, minordifferences presentation compared original appearance: First, algorithmpresented GT formalism, order minimize number formalisms article,preconditions assumed positive, thus coinciding original algorithm.Second, original algorithm returns transitive reduction computed orderinstead returns transitive closure here, unimportant difference order coincidedefinition plans article. Furthermore, Veloso6 pointedpublished version VPC algorithm incorrect corrected version exists.version presented Figure 11 corrected version. proposition primaryeffect appears either goal subgoaling chain goal proposition.VPC greedy algorithm constructs entirely new partial order analysingaction conditions, using original total order guide greedy strategy.algorithm claimed (Veloso et al., 1990, p. 207) produce `least-constrained' p.o. plan,although definition given means. Veloso7 confirmed term `leastconstrained plan' used `loose sense' optimality claim intended. However,term defined, impossible know problem algorithmintended solve judge whether makes improvement using algorithmall. absence definition authors, algorithm analysedrespect least-constrainment criteria defined Section 4. admittedly6. Personal communication, oct. 1993.7. Veloso, ibid.124fiComputational Aspects Reordering Planspq1b rpPqPPPPPqcP1pqq-p b qr-q cP2Figure 12: p.o. plans failure example VPC.somewhat unfair analysis, reveals interesting facts algorithm,problems solve. immediate Theorem 4.8 Corollary 4.9VPC cannot expected produce minimum-constrained de-/reorderings. Perhapssurprisingly, VPC even guarantee output minimal -constraineddeordering input, problem already proven trivially polynomial (Theorem 4.4).illustrated following example.Suppose total-order planner given ppi = h;; fr; sgi input. mayreturn either -valid t.o. plans ha; b; ci ha; c; bi, action conditions shownFigure 12. used input VPC, two t.o. plans give quite different results|the plan ha; c; bi converted p.o. plan P1 Figure 12,plan ha; b; ci converted p.o. plan P2 Figure 12. is, firstcase VPC produces plan minimal-constrained deordering evenminimum-constrained deordering, second case even produceminimal-constrained deordering.8reason VPC may fail produce minimal-constrained deorderinguses non-admissible greedy strategy. Whenever needs find operator achievingeffect required precondition another operator b, chooses last actionordered b input t.o. plan. However, may actions earlierplan effect better choice.8.2 KK algorithmKambhampati Kedar (1994) presented algorithm generalising ordering p.o. plan, using explanation-based generalisation. algorithm based firstconstructing validation structure plan use guide generalisation phase. original paper, computations divided two separatealgorithms (EXP-MTC EXP-ORD-GEN), compacted one single algorithm, KK (Figure 13). Furthermore, version presented restricted groundGT plans, original algorithm also handle partially instantiated plans.restriction results shown below.first part KK algorithm constructs validation structure V plan,is, explanation precondition every action plan. validity criterionunderlying phase simplified version Chapmans modal-truth criterion (Chapman,8. Note transitive arcs omitted figures, P2 really ordering relation size three.Although example would work plans defined equally reasonable wayordering relations intransitive, possible construe similar examples also case.125fiBackstro1234567891011121314151617181920procedure KKInput: valid self-contained p.o. plan hA;Output: deordering input plancomment Build validation structure V planV;Let ha1 ; : : : ; topologically sorted version hA;1 np 2 pre(ai )Find min k < s.t.1. p 2 post(ak )2. j s.t. k < j < :p 2 post(aj )Add hak ; p; ai Vcomment Construct generalised ordering 0 planha; bi 2Add ha; bi 0 either following holds1. = aI = aG2. ha; p; bi 2 V p3. hc; p; ai 2 V :p 2 post(b)4. hb; p; ci 2 V :p 2 post(a)return hA; 0iFigure 13: KK algorithm1987) without white knights. Since algorithm simplified handle ground planshere, explanation causal link haP ; p; aC i, meaning action aP producescondition p consumed action aC . algorithm constructs exactly onecausal link precondition, chooses earliest producer p preceeding aCintervening action producing :p producer aC . second phasealgorithm builds generalised ordering 0 plan based validationstructure. put things simply, orderings original plan kepteither correspond causal link validation structure required preventthreatening action unordered wrt. actions causal link.turns also KK algorithm fails generating plans guaranteed even minimal-constrained deorderings. Consider t.o. plan hA; B; C; Diaction conditions indicated Figure 14. t.o. plan valid ppih;; fr; s; t; ugi. Since KK algorithm always chooses earliest possible producerprecondition validation structure, build validation structurefhA; p; Di; hA; s; aG i; hB; q; Di; hB; t; aG i; hC; r; aG i; hD; u; aG ig. Hence, final orderingproduced KK shown Figure 14a. However, plan minimalconstrained deordering original plan, since deordered shownFigure 14b remain valid. example, input plan totally ordered.case partially ordered input plans, behaviour algorithm depends particular topological order choosen. algorithm may may find minimal-constraineddeordering, impossible guarantee succeed plans. Similarly,authors mention one may consider different ways constructing validation struc126fiComputational Aspects Reordering Plansture. would clearly also modify behaviour remains open question whetherpossible generate, polynomial time, validation structure guaranteesminimal-constrained deordering constructed second phase algorithm. Finding validation structure guarantees minimum-constrained deordering obviouslyNP-hard problem since second phase algorithm polynomial.pspsZZB qtZZ~-pqpruC qa) Plan produced KKquB qtC pqr-pb) Minimal deordered versionFigure 14: Failure example KK algorithm8.3 Planners Optimality Guaranteesplanning algorithm Graphplan (Blum & Furst, 1997) notion time stepstries pack many non-interacting actions possible one single time step. Furthermore, Graphplan finds shortest plan, using number time steps measure.assuming unit time actions considered non-interacting Graphplanexecuted parallel, plan shorter parallel executionplan produced Graphplan. is, Graphplan produces minimum reorderedparallel plans assumptions. second assumption limitation practice,since non-concurrency relation encoded introducing new atom lettingone interacting actions add one deletes it. unit time assumption serious, however, especially since assumption likely holdapplications. car-assembly scenario Section 2, instance, Graphplan wouldproduce plan corresponds plan Figure 5. Hence, plan producedunit-time assumption happens coincide optimal plan taking actualexecution times account. fortunate coincidence, however, dependingparticular durations actions example. Suppose instead durationsactions slightly different PAC duration 2 MvT1 duration 8.plan produced Graphplan, corresponds plan Figure 5,faster schedule 19 time units. optimal since plan Figure 4scheduled execute 17 time units particular duration times. Furthermore, must remembered Graphplan anyway restricted casesGT-equivalent planning language sucient, although recent improvements extend127fiBackstrosomewhat expressive languages (Gazen & Knoblock, 1997; Kohler, Nebel, Hoffman,& Dimopoulos, 1997).Knoblock (1994) modified UCPOP planner resource concept makesavoid unordered interacting actions. means resulting planner producesdefinite parallel plans. Knoblock modified evaluation heuristic searchtake parallel execution time account. thus seems planner might ableproduce minimum reordered parallel plans, paper provide sucient detailsdetermine whether case. also unclear whether heuristic handleactions different duration times.Yet another example polynomial-time planner SAS+-IAO planning language (Jonsson & Backstrom, 1998) produces plans minimum-constrainedreordered. is, restricted formalism clearly possible optimise orderingpolynomial time.9. Discussionprevious section listed planning algorithms literature produceattempt produce plans least constrained minimum parallel reordered.certain restrictions, though. Furthermore, plans always generated`from scratch', also generated modifying already existing plan, referredcase-based planning, repairing plan failed execution phase.cases, old plan may contain many ordering relations obsoletemodified/repaired plan. fact, KK algorithm (Kambhampati & Kedar, 1994)motivated context case-based planning. also important remembertoday, probably long time future, plans generated entirelycomputer programs. vast majority plans various applications designedhumans, possibly computer support. Already quite small plans, diculthuman see whether ordering constraints optimal not, computer supportanalyses vital designing optimal plans. reason, also hierarchicaltask-network planners, eg O-Plan (Currie & Tate, 1991) Sipe (Wilkins, 1988), produceplans reordering actions could lead better schedules. planner often commitsone two possible orderings pair actions based expert-knowledge rules.However, hardly possible human expert design rules situationsguarantee optimal ordering choice made.coarseness level complexity analysis matter whether tasksplanning, plan optimization scheduling integrated separated since totalresulting complexity cases|the latter two computationsNP-complete will, thus, dominated planning, PSPACE-completeworse. However, good reasons prevented research communitystudying planning scheduling separate problems, since understanding problemisolation also helps understanding overall process. reason, importantalso study separately problems discussed analysed article. Furthermore,fine-grained, practical level might considerable differences eciencyintegrating three computations separately. instance, eventhree computations take exponential time, problems considered isolation128fiComputational Aspects Reordering Plansmay fewer parameters, case may much ecient solveisolation. hand, solving whole problem may make easierglobal optimisation. better depend methods usedvarious properties actual application, seems unlikely onemethods always better.shown article, minimum reordering much better optimalitycriterion minimum deordering, considering overall parallel execution time.However, necessarily true also considering metric constraints subsequent scheduling. Deordering plan add number feasible schedules,reordering may also remove or, worst case, feasible schedules.hand, reordering may also lead new better schedules reachable via deordering.Deordering thus viewed safe and, sometimes, cheap way allow betterschedules, reordering expensive method potential generatingconsiderably better plans, may also make things worse. using reorderingpractice cases also metric scheduling constraints involved, seems necessaryuse feedback scheduler control reordering process, try reorderings. One could imagine reordering algorithm uses either heuristic searchrandomized local-search methods la GSAT (Selman, Levesque, & Mitchell, 1992) findreorderings use scheduler evaluation function proposed reorderings.plan modifications studied article may add considerably optimizations possible traditional scheduling only, still potentialoptimization left study|modifying action order, also set actions. modification already done plan adaptation, generatingnew plan old cases, optimizations sense article considered.preliminary studies action-set modifications appear literature, though. FinkYang (1992) study problem removing redundant actions total-order plans,defining spectrum redundancy criteria analysing complexity achieving these.less clear interesting study action addition; adding actions plan couldobviously improve execution time executed sequentially. However,case parallel execution plans shown adding actions plansometimes allow faster execution (Backstrom, 1994). Finally, allowing removaladdition actions, even greater potential optimising plans seems available,problems seems yet studied literature.10. Conclusionsarticle studies problem modifying action ordering plan orderoptimise plan according various criteria. One criteria make planless constrained minimize parallel execution time. Three candidatedefinitions proposed first criteria, constituting spectrum increasingoptimality guarantees. Two based deordering plans, means ordering relations may removed, added, last one builds reordering,arbitrary modifications ordering allowed. first three candidates,subset-minimal deordering, tractable achieve, two, deordering re129fiBackstroordering plan minimize size ordering, NP-hard even dicultapproximate.Similarly, optimising parallel execution time plan studied deorderingreordering plans. general case, computations NP-harddicult approximate. However, based algorithm literature shownoptimal deorderings computed polynomial time definite plans classplanning languages based notions producers, consumers threats,includes commonly used planning languages. Computing optimal reorderingspotentially lead even faster parallel executions, problem remains NP-harddicult approximate even quite severe restrictions. Furthermore, deorderingplan safe respect subsequent scheduling, reordering plan may removefeasible schedules, making deordering good, often suboptimal, approach practice.AcknowledgementsTom Bylander, Thomas Drakengren, Mark Drummond, Alexander Horz, Peter Jonsson,Bernhard Nebel, Erik Sandewall, Sylvie Thibeaux anonymous referees providedhelpful comments article previous versions it. research supportedSwedish Research Council Engineering Sciences (TFR) grants Dnr. 92-14395-731.AppendixTheorem 7.10 Minimum Parallel Reordering remains NP-hard even restrictedtotal-order GT plans toggling unary actions assumption unittime, simple concurrency actions redundant.Proof: Proof reduction 3SAT (Garey & Johnson, 1979, p. 259). Let P =fp1 ; : : : ; png set atoms C = fC1 ; : : : ; Cm g set clauses P s.t.1 m, Ci = fli;1 ; li;2 ; li;3 g set three literals P .First define set atomsQ = fpFi ; pTi ; qi j 1 ng [ fci;j ; ri;j j 1 n; 1 j 3g:define GT ppi = hI; Gi initial goal states defined= Neg(Q)G = fpFi ; pTi ; :qi j 1 ng [ fci;j ; :ri;j j 1 n; 1 j 3gAlso, atom pi 2 P , define four actions according Table 2.Further, clause Ci 2 C , define nine actions according Table 3( Fl = pk li;j = :pki;jpTkli;j = pk :Let set 4n + 9m actions thus defined. Clearly total orders.t. plan P = hA; -valid. also obvious none actions redundant.130fiComputational Aspects Reordering Planstrivial observation parallel execution r -valid reordering Pmust satisfy i, 1 n, eitherr(AFi ) < r(A+i ) < r(ATi ) < r(A,i )i, 1 m,r (C +i;k1r(A+i ) < r(ATi ) < r(A,i ) < r(AFi );( , ), ))r(Ci;kr(Ci;k2 )++,1i;k1 ) < r(C + ) < r(Bi;k2 ) < r(C + ) < r(Bi;k3 ) < r(Ci;k3 );i;k2i;k3) < r(B +(k1 ; k2 ; k3 permutation numbers 1; 2; 3. (This interpreted s.t., C + released either order, simultaneously, analogouslyactions Ci;ki;k21,+ ).actions Ci;kCi;k23remainder proof shall show P reordered parallelexecution length 8 iff set C clauses satisfiable.if: Suppose C satisfiable. Let truth assignment atoms P satisfiesC . Wlg. assume (pi ) = i. Further, clause Cj , let lj literal Cjsatisfied . Disregarding action order moment, choose release-timefunction r actions follows. 1 n, letr(A+i ) = 0; r(ATi ) = 1; r(A,i ) = 2; r(AFi ) = 3:Further, j , 1 j m, choose k1 s.t. lj;k1 2 Cj satisfied (at least onechoice must exist assumption). Let lj;k2 lj;k3 remaining two literals Cj .Assign release times s.t. 1 h 3,+ ) = 2h , 1; r (B + ) = 2h ; r (C , ) = 2h + 1:r(Cj;kj;khj;khhdefine partial order 0 s.t. actions a; b 2 A, 0 b iff r(a) < r(b).Clearly, plan hA; 0 -valid reordering P r parallel execution length8 hA; 0 i. (Note choice could force longer execution,execution length 7 case C satisfied setting atoms false.)operator precond. postcond.AFiATiA+iA,i:pFi ; :qi pFi:pTi ; qi pTi:qiqiqi:qiTable 2: Generic actions atom pi proof Theorem 7.10.131fiBackstrooperator precond.Bi;+1Bi;+2Bi;+3Ci;+1Ci;,1Ci;+2Ci;,2Ci;+3Ci;,3li; 1; ri;1 ; :ri;2 ; :r1;3 ; :ci;1li; 2; :ri;1; ri;2 ; :r1;3 ; :ci;2li; 3; :ri;1; :ri;2; r1;3 ; :ci;3:ri;1ri;1:ri;2ri;2:ri;3ri;3postcond.ci;1ci;2ci;3ri;1:ri;1ri;2:ri;2ri;3:ri;3Table 3: Generic atoms clause Ci proof Theorem 7.10.if: Suppose C satisfiable. suppose Q minimum reorderingP r parallel execution length 8 shorter Q. Wlg. assume everyaction released early possible r. Then, according observationmust hold i, 1 n, eitherr(AFi ) = 0; r(A+i ) = 1; r(ATi ) = 2; r(A,i ) = 3r(A+i ) = 0; r(ATi ) = 1; r(A,i ) = 2; r(AFi ) = 3:Hence, exactly one atoms pFi pTi true time 2. Let pi denote atom. Since+)2r length 8, follows earlier observation j , 1 j m, r(Bj;kk, 1 k 3. Hence, lj;k = pi i, since Q -valid r parallelexecution Q. Define interpretation s.t. i, 1 n,(pi = pFi(pi ) = F;T; otherwise :However, interpretation obviously model C , contradicts assumption.follows r must length 9 longer.concludes proof shows C satisfiable iff P reorderingparallel execution length 8 not.2Theorem 7.11Minimum Parallel Deordering cannot approximate MinimumParallel Reordering within jAjk constant k 0.Proof: proof assumes GT plans simple concurrency. First, define genericactions aki (m), bki cki (m) according Table 10. Further, define recursively genericplans( 1ha(1); b0; c1(1); : : : ; a1im (1); b0im ; c1im (1)i;k = 1kPi (m) = ha(ki,1)m+1 (m); P(i,k1),1m+1 ((mi,);1)cmk+1k,1kk1 (m); : : : ; aim (m); Pim (m); cim (m)i; k > 1:(i,1)m+1(i,1)m+1132fiComputational Aspects Reordering PlansFurthermore, arbitrary k; n > 0 define ppi kn = hfpk1 ; : : : ; pkn g; fq1k ; : : : ; qnk gi.Now, prove claim arbitrary k; n > 0, plan P1k (n)1. kn -valid,P ,1 2ni2. deordering length less 3nk + ki=13. reordering length 2k + 1.Proof induction k.Base case (k=1): Choose arbitrary n > 0. plan P11 (n) obviously kn -validdeordering itself, length 3n. Consider reordering Q11 (n)P11 (n) actions ordering relation defined s.t. i, 1 n,a1i (1) b0i c1i (1) i, 1 < n, a1i (1) b0i,1 . reordering k (n)-validparallel execution r11 (n) length 3, defined s.t. i, 1 n, r11 (n)(a1i (1)) = 1,r11(n)(b0i ) = 2 r11 (n)(c1i (1)) = 3. (This plan shown Figure 15.) claim thussatisfied base case.Induction: Suppose claim satisfied l < k, k 1 proveclaim holds also l = k. Choose arbitrary n > 0. follows inductionhypothesis none subplans P1k,1 (n) : : : ; Pnk,1 (n) deordered,remain totally ordered. Furthermore, i, 1 n, necessary actionaki (n) ordered subplan Pik,1(n) action cki (n) ordered it.also clear i, 1 n order cki (n) aki+1 (n) removed withoutmaking plan invalid. Hence, P1k (n) deordering itself,lengthnXi=1(2 + length(Pik,1 (n)) = n(2 + length(P1k,1 (n)))= 2n + n(3nk,1 +kX,2i=12ni ) = 3nk +kX,1i=12ni ;proves deordering case claim.reordering case, define reordering Qk1 (n) P1k (n) actionsordering relation defined follows. subplan Pik,1 (n) P1k (n), reorderactions length 2(k , 1)+1, possible according induction hypothesis.Further, i, 1 n, j , (i , 1)n + 1 j order aki (n) akj ,1 (n)ckj ,1 (n) cki (n) (or aki+1 (n) akj ,1 (1) ckj ,1 (1) cki (n) case k = 2). Hence,action pre-conditionpost-conditionaki (m) fpki gfpk(i,,11)m+1 ; : : : ; pkim,1; :q(ki,,11)m gbkifpki gfqik gk,1 g post(ck (m)) = fqk g:cki (m) fq(ki,,11)m+1 ; : : : ; qimTable 4: Generic actions proof Theorem 7.11.133fiBackstroP11 (n)a11 (1)a21 (n),@,,1,p1, : a1(1)1,2p2@p1n@@....:. q0p01:q10p02:q20(n,1)@@R a1n(1)p0nb01-b02-b0n.....q10- c11(1)@@@q11q20 - 1c2 (1) XXXq21@X@XXz@R c21(n)...,,,.,qn1,0qn - 1 ,1 cn(1):qn1..:.2.a2 (n) XXXX..zX:..........1:q(1n,1):.Xa2n (n)XXX...XzP21 (n)Pn1 (n)X..XXXXz 2..: c2(n).....X..XXXXz 2..: cn(n)Figure 15: reordering Q21 (n) plan P12 (n) example induction caseproof Theorem 7.11 (solid arrows denote orderings required producerconsumer relationships labelled atom produced/consumed,dashed arrows denote ordering constraints avoid threats labelled possibly con icting atom).segment type aki (n); Pik,1 (n); cki (n) reordered length 2k + 1. Finally,i, 1 n, order aki (n) ak(i,,11)n (n) (or aki (n) ak(i,,11)n (1) case k = 2).plan Qk1 (n) k (n)-valid since subplans P1k,1 (n); : : : ; Pnk,1 (n) atomscommon and, thus, # relation hold two actions belongingdifferent subplans. reordered plan executed parallel executionrik (n) defined s.t. rik (n)(aki (n)) = 1, rik (n)(cki (n)) = 2k + 1 i, 1 nactions a0 2 Qki ,1 (n), rik (n)(a0 ) = rik,1(n)(a0 ) + 1. Since parallel executionlength 2k + 1 reordered plan, claim holds also k.concludes induction, claim holds k > 0. SinceP ,1 2ni3nk + ki=11k2k + 1(2k + 1)3k,1 jAjk > 0, theorem holds.2134fiComputational Aspects Reordering PlansReferencesBackstrom, C. (1993). Finding least constrained plans optimal parallel executionsharder thought. Backstrom, C., & Sandewall, E. (Eds.), Current TrendsAI Planning: EWSP'93|2nd European Workshop Planning, pp. 46{59 Vadstena,Sweden. IOS Press.Backstrom, C. (1994). Executing parallel plans faster adding actions. Cohn,A. G. (Ed.), Proceedings 11th European Conference Artificial Intelligence(ECAI'94), pp. 615{619 Amsterdam, Netherlands. Wiley.Backstrom, C. (1995). Expressive equivalence planning formalisms. Artificial Intelligence,76 (1{2), 17{34.Backstrom, C., & Klein, I. (1991). Parallel non-binary planning polynomial time.Reiter, R., & Mylopoulos, J. (Eds.), Proceedings 12th International Joint Conference Artificial Intelligence (IJCAI'91), pp. 268{273 Sydney, Australia. MorganKaufmann.Bellare, M., Goldreich, O., & Sudan, M. (1995). Free bits, PCPs non-approximability|towards tighter results. Proceedings 36th Annual IEEE SymposiumFoundations Computer Science (FOCS'95), pp. 422{431 Milwaukee, WI, USA.IEEE Computer Society.Blum, A. L., & Furst, M. L. (1997). Fast planning planning graph analysis. ArtificialIntelligence, 90 (1{2), 281{300.Chapman, D. (1987). Planning conjunctive goals. Artificial Intelligence, 32 (3), 333{377.Crescenzi, P., & Panconesi, A. (1991). Completeness approximation classes. InformationComputation, 93 (2), 241{262.Currie, K., & Tate, A. (1991). O-Plan: open planning architecture. Artificial Intelligence, 52 (1), 49{86.Feige, U., & Kilian, J. (1996). Zero knowledge chromatic number. 11th AnnualIEEE Conference Computational Compelxity (CCC'96) Philadelphia, PA, USA.IEEE Computer Society.Feige, U. (1996). threshold ln n approximating set cover (preliminary version).Proceedings 28th Annual ACM Symposium Theory Computing (STOC'96),pp. 314{318 Philadelphia, PA, USA. ACM.Fink, E., & Yang, Q. (1992). Formalizing plan justifications. Proceedings 9th Conference Canadian Society Computational Studies Intelligence (CSCSI'92),pp. 9{14 Vancouver, BC, Canada.Garey, M., & Johnson, D. (1979). Computers Intractability: Guide TheoryNP-Completeness. Freeman, New York.135fiBackstroGazen, C., & Knoblock, C. (1997). Combining expressivity UCPOP eciencyGraphplan. Steel, & Alami (1997), pp. 221{233.Ghallab, M., & Laruelle, H. (1994). Representation control IxTeT, temporalplanner. Hammond (1994), pp. 61{67.Hammond, K. (Ed.). (1994). Proceedings 2nd International Conference ArtificialIntelligence Planning Systems (AIPS'94), Chicago, IL, USA. AAAI Press.Jonsson, P., & Backstrom, C. (1998). State-variable planning structural restrictions:Algorithms complexity. Artificial Intelligence, 100 (1{2), 125{176.Kambhampati, S. (1994). Multi-contributor causal structures planning: formalizationevaluation. Artificial Intelligence, 69 (1{2), 235{278.Kambhampati, S., & Kedar, S. (1994). unified framework explanation-based generalization partially ordered partially instantiated plans. Artificial Intelligence,67 (1), 29{70.Klein, I., Jonsson, P., & Backstrom, C. (1995). Tractable planning assembly line.Ghallab, M., & Milani, A. (Eds.), New Directions AI Planning: EWSP'95|3rd European Workshop Planning, Frontiers AI Applications, pp. 313{324Assisi, Italy. IOS Press.Klein, I., Jonsson, P., & Backstrom, C. (1998). Ecient planning miniature assemblyline. Artificial Intelligence Engineering, 13 (1), 69{81.Knoblock, C. (1994). Generating parallel execution plans partial-order planner.Hammond (1994).Kohler, J., Nebel, B., Hoffman, J., & Dimopoulos, Y. (1997). Extending planning graphsADL subset. Steel, & Alami (1997), pp. 273{285.Lund, C., & Yannakakis, M. (1994). hardness approximating minimization problems. Journal ACM, 41 (5), 960{981.Nebel, B., & Backstrom, C. (1994). computational complexity temporal projection, planning plan validation. Artificial Intelligence, 66 (1), 125{160.Pednault, E. P. D. (1986). Formulating multiagent, dynamic-world problems classicalplanning framework. Georgeff, M., & Lansky, A. L. (Eds.), Reasoning Actions Plans, Proceedings 1986 Workshop, pp. 47{82 Timberline, OR, USA.Morgan Kaufmann.Regnier, P., & Fade, B. (1991a). Complete determination parallel actions temporaloptimization linear plans action. Hertzberg, J. (Ed.), European WorkshopPlanning, Vol. 522 Lecture Notes Artificial Intelligence, pp. 100{111 SanktAugustin, Germany. Springer.136fiComputational Aspects Reordering PlansRegnier, P., & Fade, B. (1991b). Determination du parallelisme maximal et optimisationtemporelle dans les plans d'actions lineaires. Revue d'intelligence artificielle, 5 (2),67{88.Selman, B., Levesque, H., & Mitchell, D. (1992). new method solving hard satisfiability problems. Proceedings 10th (US) National Conference ArtificialIntelligence (AAAI'92), pp. 440{446 San Jose, CA, USA. American AssociationArtificial Intelligence.Steel, S., & Alami, R. (Eds.). (1997). 4th European Conference Planning, ECP'97, Vol.1348 Lecture Notes Artificial Intelligence, Toulouse, France. Springer.Stromberg, J.-E. (1991). Styrning av LEGO-bilfabrik. Andra omarbetade upplagan. Department Electrical Engineering, Linkoping University.Tate, A. (1975). Interacting goals use. Proceedings 4th InternationalJoint Conference Artificial Intelligence (IJCAI'75), pp. 215{218 Tbilisi, USSR.IJCAI, William Kaufmann.Veloso, M. M., Perez, M. A., & Carbonell, J. G. (1990). Nonlinear planning parallelresource allocation. Sycara, K. P. (Ed.), Workshop Innovative ApproachesPlanning, Scheduling Control, pp. 207{212 San Diego, CA, USA. MorganKaufmann.Vere, S. A. (1983). Planning time: Windows durations activities goals. IEEETransactions Pattern Analysis Machine Intelligence, PAMI-5 (3), 246{267.Wilkins, D. E. (1988). Practical Planning. Morgan Kaufmann, San Mateo, CA.137fiJournal Artificial Intelligence Research 9 (1998) 219-245Submitted 3/98; published 11/98Gn;m Phase Transition Hard HamiltonianCycle ProblemBasil VandegriendJoseph CulbersonDepartment Computing Science, University Alberta,Edmonton, Alberta, Canada, T6G 2H1basil@cs.ualberta.cajoe@cs.ualberta.caAbstractUsing improved backtrack algorithm sophisticated pruning techniques, revise previous observations correlating high frequency hard solve Hamiltonian cycleinstances Gn;m phase transition Hamiltonicity non-Hamiltonicity.Instead tested graphs 100 1500 vertices easily solved.artificially restrict degree sequence bounded maximum degree,although increase diculty, frequency hard graphs still low.consider regular graphs based generalization knight's tours, observefrequent instances really hard graphs, average degree boundedconstant. design set graphs feature algorithm unable detecthard algorithm, vary average degree O(1)O(n). far found class graphs correlated Gn;m phase transitionasymptotically produces high frequency hard instances.1. IntroductionGiven graph G = (V; E ); jV j = n; jE j = m, Hamiltonian cycle problem findcycle C = (v1 ; v2 ; : : : ; vn ) vi 6= vj 6= j , (vi ; vi+1 ) 2 E (vn ; v1 ) 2 E .NP-C problem, expect solving require exponential time worst casearbitrary graphs (assuming P 6= NP). However, recent years researchers examiningvarious NP-C problems SAT graph coloring discovered majoritygraphs easy algorithms solve. graphs specific characteristicsgraphs lie within narrow band (according parameter) seem hardsolve problems.known (Posa, 1976; Komlos & Szemeredi, 1983) random graph model(Gn;m ) edge density increases sharp threshold (the phase transition)edge density probability Hamiltonian cycle 0,probability 1. Previous research (Section 2.1) suggested high correlationdicult problems instances generated edge density near phase transition.Using improved Hamiltonian cycle backtrack algorithm (Section 3) employs variouspruning operators iterated restart technique, observe hard instancestransition large n. Section 4 describes results Gn;m related random graphs.attempt find higher frequency hard graphs, Section 5 examine lowdegree random graph class call Degreebound graphs. However, graphs alsousually easy backtrack algorithm, although find hard graphs. Analysisgraphs indicates test non-Hamiltonian instances discussed Section 5.3.c 1998 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.fiVandegriend & CulbersonSection 6 examine graph class based generalization knight's tour problem.graphs significantly harder algorithm general. Section 7 presentconstructed graph class produces exponential behavior backtrack algorithm.experimental results provide evidence average degree graphsucient indicator hard graphs Hamiltonian cycle problem. backtrackalgorithm, phase transition regions Gn;m Degreebound graph modelsgenerally asymptotically easy.2. Discussion Hardness Previous Workconcept hardness instances hard regions within graph classes, consideredempirical basis, easy define. order clarify mean, sectionpresent notions hardness, relating previous work.2.1 Hardness?problem size n set n instances. Hamiltonian cycle problem, nset undirected graphs n vertices. discussion hardness particularinstance problem always respect algorithm (or set algorithms).general, different algorithms perform differently instance. Furthermore,particular instance Hamiltonian cycle associated algorithm either correctly answers outputs cycle O(n) time. meaningfully talk hardnessinstance, must assume fixed algorithm (or finite class algorithms)appropriate large (infinite) class instances, consider algorithmperforms instance. Hardness instance always measure performancerelative algorithm.left question much work algorithm must considerinstance hard it. Note single instance distinction polynomialexponential time moot. Ideally, would like require algorithm takeexponential (i.e. > 1) number steps size n increases. Note empiricalcorroboration practically impossible sets large instances. practice,must content evidence failure complete within reasonable timelarger instances.would also like instance exhibit robustness consider hardgiven algorithm. Ideally, graph problems would minimum require instanceremain hard high probability random relabeling vertices. Relabelingvertices produces isomorphic copy graph, preserving structural propertiesdegree, connectivity, Hamiltonicity, cut sets, etc. design algorithms typicallybased identifying using properties, far possible eciencyindependent arbitrary assignment labels.Let us refer (probabilistic) problem class pair (n ; Pn ), Pn (x)probability instance x given selecting n . Problem classessometimes called ensembles Artificial Intelligence literature (Hogg, 1998). usualclasses graph problems Gn;p, generate n vertex graph, pairvertices included edge probability p, Gn;m distinct edges220fiThe Gn;m Phase Transition Hard Hamiltonian Cycle Problemselected random placed graph. two models related (Palmer 1985).paper use Gn;m model.consider mean average run times definitions. primary reasonexponentially small sets exponentially hard instances, impracticaldetermine average reasonable assurance. example, 1=2n instancesrequire (n2 2n ) time remainder solved O(n2 ) time average timequadratic, frequency increases 1=20:9n average time exponential. Evenn = 100 would utterly impractical distinguish two frequenciesempirical studies.Furthermore, similar reasons, want promote class benchmark classtesting comparing algorithms, low frequencies hard instances generallysucient. say problem class maximally hard (with respect algorithmset algorithms) instances generated according distribution hardprobability going one n goes infinity.example maximally hard classes, empirical evidence suggests varietyhidden coloring graph generators based Gn;p model maximally hard largevariety graph coloring algorithms (Culberson Luo, 1993). hard classesclosely related coloring phase transition random graphs. general, phasetransition defined parameterized probability distribution set instances.parameter varied past certain threshold value, asymptotic probabilityexistence solution switches sharply zero one.Phase transitions commonly considered identified hard subsets particular problem (Cheeseman, Kanefsky, & Taylor, 1991). Many NP-C problemscharacterized `constraint' parameter measures constrained instance is.Evaluation problem using constraint parameter typically divides instancestwo classes: solvable, unsolvable, sharp transitionoccurring them. problem highly constrained, easily determinedsolution exists. constraints removed, solution easily found.Different researchers (Cheeseman et al., 1991; Frank & Martel, 1995; Frank, Gent, &Walsh, 1998) examined phase transitions random graphs Hamiltonian cycleproblem. obvious constraint parameter average degree (or average connectivity)graph. degree increases, graph becomes less constrained: becomes easierHamiltonian cycle exist algorithm find one. researchersexamined Hamiltonicity changes respect average degree. Frank etal. (1998) Frank Martel (1995) experimentally verified using Gn;mmodel phase transition Hamiltonicity close phase transition biconnectivity, occurs average degree approximately ln n (or = n ln n=2) 1 .Cheeseman et al. (1991) experimentally confirmed theoretical predictions KomlosSzemeredi (1983) phase transition (for Hamiltonian cycle problem) occursaverage degree ln n + ln ln n. papers also provided empirical evidencetime required backtrack algorithms increased region phase transitionnoted existence hard instances appeared associatedtransition.1. Note average degree equals 2m=n.221fiVandegriend & Culbersonmentioned above, k-colorable Gn;p class appears maximally hard knownalgorithms respect phase transition defined n; p k, k n= logb nb = 1=(1 , p). Hamiltonian cycle Gn;m class hand appearmaximally hard value m. fact, large n algorithm almost never takesO(n) backtrack nodes O(nm) running time.use much weaker requirement say instance quadratically hardrequires least n2 search nodes backtrack algorithm described section 3. Note(n2 ) search nodes would take algorithm(n3 ) time. practical reasons,also use weaker definition robustness, say instance robustly quadraticallyhard algorithm uses least n2 search nodes iterated restart feature usedmultiplying factor 2. (See section 3 program details). say classminimally hard constant > 0 probability hard instanceleast n ! 1.Section 4 examine Gn;m random graphs using backtrack algorithm graphs1500 vertices. empirical evidence collect suggests contrastgraph coloring situation, Hamiltonian cycle Gn;m class minimally quadraticallyhard, even near phase transition, even drop minimal robustnessrequirement.Note dispute claim hard instances likely phasetransition values m, rather claim even transitionprobability generating hard instance rapidly goes zero increasing n.2.2 Random Graph Theory Phase Transitionresults unexpected one reviews theoretical work graph class.Since asymptotically graph becomes Hamiltonian edge added lastdegree 1 vertex (Bollobas, 1984), algorithm checks minimum degree 2detect almost non-Hamiltonian graphs. graph Hamiltonian, variousresearchers (Angluin & Valiant, 1979; Bollobas, Fenner, & Frieze, 1987) provenexistence randomized heuristic algorithms almost always find Hamiltoniancycle low-order polynomial time. particular, shown (Bollobas et al., 1987)polynomial time algorithm HAM8><0cn ! ,1,e,2c cn ! climPr(HAMfindsHamiltoncycle)=en!1>:1cn ! 1= n=2(ln n + ln ln n + cn ).Furthermore, authors point out, best possible result sensealso asymptotic probability Gn;m graph Hamiltonian,probability minimum degree 2. words, probability findingcycle probability one existing. Given trivial checkminimum vertex degree graph, leave much room existence hardinstances (for HAM similar algorithms).Another relevant theoretical result polynomial time algorithmprobability going one, finds Hamiltonian cycle graph hidden222fiThe Gn;m Phase Transition Hard Hamiltonian Cycle ProblemHamiltonian cycle together extra randomly added edges(Broder, Frieze, & Shamir,1994). algorithm work, average degree vertex needs constant.claim result easily extended case average degree growingfunction n. another indication Hamiltonian graphs near phase transitioneasy solve algorithm.non-Hamiltonian graph hard algorithm must contain featurepreventing formation Hamiltonian cycle algorithm cannot easily detect.Suppose backtrack algorithm check vertices degree one. algorithm mayrequire exponential backtrack determining non-Hamiltonicity graph,since way detect trying possible paths failing. However,degree one vertices easily detectable, good indicators hard instances.also disappear phase transition.Similarly, algorithm might check articulation points, result wasteexponential time easy instances. n ! 1, probabilityarticulation point existing (in Gn;m ) goes zero fast probability existencevertex degree less two. features lead non-Hamiltonicity course,k-cuts leave k +1 components (Bondy & Murty, 1976), couldrequire time proportional nk detect. assumption NP6=CO-NPmust also exist set non-Hamiltonian instances polynomial proofstatus.However, seems phase transition larger feature less likelyoccur. fact, theoretical results summarized indicate must happen.Although know hard graphs exist, may expect localized types hardgraphs frequent near phase transition elsewhere using Gn;mgenerate instances, also expect probability instances go zero nincreases.3. Overview Backtrack Algorithmbacktrack algorithm comes Vandegriend (1998), based upon prior workbacktrack Hamiltonian cycle algorithms (Kocay, 1992; Martello, 1983; Shufelt & Berliner,1994). three significant features discuss. First, employs varietypruning techniques search delete edges cannot Hamiltoniancycle. pruning usually based upon local degree information. Second,start search algorithm performs initial pruning identifies easily detectablenon-Hamiltonian graphs. third feature use iterated restart technique.Additionally, program provides opportunity order selection next vertexpath extension using either low degree first ordering, high degree first ordering,random ordering. normally use low degree first ordering.level search, adding new vertex current path, search pruningused. pruning identifies edges cannot Hamiltonian cycle removesgraph. (Note algorithm backtracks, adds edges deletedcurrent level search back graph.) first graph configurationpruning looks vertex x 2 neighbours a; b degree 2. Since edgesincident b must used Hamiltonian cycle, edges incident223fiVandegriend & Culbersonx deleted. second graph configuration pruning looks pathP = (v1 ; : : : ; vk ) forced edges (so v2 : : : vk,1 degree 2). k < n edge v1 ; vkcannot Hamiltonian cycle deleted. result pruning, degreevertex drops 2, Hamiltonian cycle possible algorithm mustbacktrack. use operators may yield new vertices degree 2 thereforepruning iterated changes occur.pruning iteration takes O(n) time scan vertices check vertices twodegree 2 neighbors, O(n) time extend forced degree two paths. Since iterationsterminate unless new vertex degree two created, n iterations occur.O(m) edges deleted. backing descendant, edges replaced(O(m)) next branch taken. Thus, easy upper bound pruning timenode searching vertex degree O(d(n2 + m)), overly pessimistic.Note along branch root search tree leaf, n verticesconverted degree 2. Also note along branch edge deletedonce. degree high seldom take branches success.implementation several vertices two neighbors degree twobeginning iteration, redundant edges removed single pass taking timeproportional n plus number edges removed checked. practice, Gn;mgraphs typically takes O(n + m) time per search node easy Hamiltonian instancesevidenced CPU measurements, harder instances taking twice longper search node.start recursive search, algorithm prunes graph describedabove. algorithm checks see graph minimum degree 2, connected,cut-points. conditions true, graph nonHamiltonian algorithm finished.non-Hamiltonian instances may easy hard detect, dependingvertex algorithm chooses starting point. cases local featuresexist could detected algorithm starts near them, otherwise algorithmmay backtrack many times feature without recognizing featurematters. seemingly hard instance Gn n = 100 discussed Section 4.2case. one type \thrashing," common problem backtracking algorithms.example, Hogg Williams (1994) noticed sparse set hard 3-coloring problemsphase transition. Baker (1995) showed instancesoften hard result thrashing, could made easy backjumpingdependency-directed backtracking.improve algorithm's average performance use iterated restart technique.idea maximum limit number nodes searched.maximum reached, search terminated new one started maximumincreased multiple k (so Mi+1 = kMi ). Initially, = kn. experiments,used k = 2. incrementing search interval way, algorithm eventuallyobtain search size large enough exhaustive search thus guarantee eventualcompletion. total search never double largest size allocated.Although random restarts sometimes effective non-Hamiltonian graphs,frequently effective Hamiltonian instances. search, edges addedset Hamiltonian edges, net effect prune edges graph.224fiThe Gn;m Phase Transition Hard Hamiltonian Cycle ProblemHamiltonian graph hard, algorithm must select set edges causesreduced graph become non-Hamiltonian, non-Hamiltonian subgraph musthard solve. iterated restart, instance remain hard algorithm mustmake mistakes high probability. result, expect fewer hard Hamiltonianinstances.Random restarts integral part randomized algorithms (Motwani & Raghavan,1995) used frequently local search techniques escape localoptima (Johnson, Aragon, McGeoch, & Schevon, 1991; Langley, 1992; Selman, Levesque,& Mitchell, 1992; Gomes, Selman, & Kautz, 1998). discussion impactrestarts found analysis experiments Gn;m graphs Section 4.algorithm also provides possibility checking components cutvertices recursive search pruning completed search node.overhead extra work O(n + m) per search node rarely seems pay off. Exceptnoted checks used study.experimental results reported remaining sections run varietymachines, fastest 300 MHZ Pentium II. CPU times reportedeither machine, adjusted using observed speed ratios similar tests.algorithm terminated execution 30 minutes2. Experimental results frequentlyreported ratio number search nodes number vertices. noderatio used feel provides better basis comparing results across differentgraph sizes, since many results O(n). Note number search nodescalculated number recursive calls performed.used several different methods verifying correctness algorithmexperimental results. algorithm independently implemented twice, performsautomatic verification Hamiltonian cycles found. performed multiple sets experiments generalized knight's circuit graphs compared results (graph Hamiltoniannot) theoretical predictions. Initial sets experiments Gn;m graphs Degreebound graphs executed using two different pseudo-random number generators,repeated multiple times. source code available appendix.4. Gn;m Random Graphsconsider random graphs 16 1500 vertices = dn=2. previous work(Cheeseman et al., 1991; Komlos & Szemeredi, 1983) expect phase transition occurln n + ln ln n. Thus specify constraint parameter (or degree parameter)k = =(ln n + ln ln n).4.1 Gn;m Using Restartpremiere experiment, generate Gn;m graphs number vertices n = 16 : : : 96steps 4, n = 100 : : : 500 steps 100, n = 1000 n = 1500. size n,degree parameter k ranges 0:5 : : : 2:0 (step size 0.01 k = 1:00 : : : 1:20, step size2. Since time limit 30 minutes least two orders magnitude greater typical runningtime, limit rarely used. slower machines limit increased. Knight's tour graphsreported Section 6 run slower machine 30 minute time limit, although instancesrun much longer.225fiVandegriend & Culberson10010020030040050010001500% Hamiltonian8060402000.60.811.21.4Degree Parameter k1.61.82Figure 1: % Hamiltonian graphs function graph size degree parameterGn;m graphs.0.10 ranges k). generate 5000 graphs data point executebacktrack algorithm graph. grand total 4.76 million graphs,1.19 million 100 vertices.use pruning described section 3, check components articulation pointsinitial pruning, use iterated restart multiplicative factor 2.check components articulation points recursive search.expect phase transition biconnectivity similar phase transition Hamiltonicity (Cheeseman et al., 1991) expect phase transitionminimum degree greater 1 almost identical phase transition Hamiltonicity (Bollobas, 1984; Komlos & Szemeredi, 1983). experimental results matchedexpectations closely. larger graphs 100 1500 vertices, percentageHamiltonian graphs plotted degree parameter Figure 1. found50% point half graphs Hamiltonian occurs degree parameterk 1:08 , 1:10. interestingly, curves pass close fixed point near k = 1,seems approaching vertical line point. is, appearconverging k 1 phase transition, precisely theory predicts.226fiThe Gn;m Phase Transition Hard Hamiltonian Cycle Problemn100 200 300 400 500 1000 1500Nodes 7:5n 7:0n 3:3n 7:0n 3:4n 3:3n 7:0nTable 1: Maximum Search Nodes Gn;m Large ngraphs solved, either determined non-Hamiltonian,Hamiltonian cycle found. primarily interested asymptotic behavior, sincetheories concerning relation phase transition hard regions necessarilyasymptotic nature. graphs 100 vertices more, longest running time11 seconds, graph 1500 vertices using 10,500 (or 7:0n) search nodes findHamiltonian cycle.549,873 non-Hamiltonian graphs range detected initialpruning graph, thus search nodes expanded. 640,127 HamiltonianGn;m graphs, vast majority ( 629,806 98:3%) used n search nodes, meansalgorithm need backtrack all3. quadratically hard graphsfound range. Table 4.1 lists maximum number search nodes expressedfactor n illustrate linearity search tree.results appear differ Frank et al. (1998), found graphstook orders magnitude search nodes solve. (Their hardest graph took1 million nodes.) believe due two factors. Firstly, algorithm usedgenerate results paper initial check biconnectivityuse pruning techniques used algorithm. Secondly importantly,small random graphs used ( 30 vertices) probability obtaining certain hardconfigurations (such biconnected non-Hamiltonian non-biconnected minimumdegree 2) much higher n larger, discussed section 2.2.experiments small Gn;m graphs (between 16 96 vertices) confirm conjecture. case find small number quadratically hard graphs,hard graphs. consider purposes paper, hard graph less100 vertices takes least 100,000 search nodes solve. hardgraphs set runs given Table 4.1.Note hardest took less two minutes solve, making designation\very hard" questionable. Also, note smallest graph set 36 vertices,somewhat larger 30 vertex examples found Frank et al. (1998). likelyarticulation point checking initially better pruning. Finally,hard graphs non-Hamiltonian, occur classes produce less 50%Hamiltonian graphs. hardest Hamiltonian graph contrast required 19,318 searchnodes, graph 68 vertices degree parameter 0.9.Figure 2 plot number graphs quadratically hard smallgraphs. n 68 92, non-Hamiltonian graphs detected initialpruning. One non-Hamiltonian graph n = 96 required search (254:1n nodes). Noticenumber quadratically hard Hamiltonian graphs far less numberquadratically hard non-Hamiltonian graphs, peaks larger n. accordancediscussion random restarts Section 3.3. 5% error measurement, means algorithm might backtrackedmaximum 0:05n search nodes.227fiVandegriend & CulbersonVertices Degree Parameter Seconds Search Nodes Ratio361.1194.71179579 32766.1401.0036.5638946 15973.6401.0718.7327603 8190.1441.0012.3156694 3561.2441.0420.0293664 6674.2481.0291.21280135 26669.5481.09107.01243647 25909.3Table 2: Hardest Small Graphs60non-HamHamNumber Hard Instances50403020100203040506070Number Vertices8090Figure 2: Number Quadratically Hard Graphs Small n.228fiThe Gn;m Phase Transition Hard Hamiltonian Cycle Problemran additional tests n 32 54 steps 2, degree parameterranging 0.96 1.16 step size 0.01, generating 5000 graphs point.case, invoked articulation point checking search node. graphssolved without timing out, hard graphs found, nonHamiltonian. One 50 vertex graph required 9,844,402 search nodes, required close20 minutes solve. unclear whether extra checking helped; smallest graphrequiring least 100,000 nodes 32 vertices, smallest requiring million40 vertices. Overall, results similar first set experimentssmall graphs.4.2 Gn Using RestartClearly, edges add graph, likely Hamiltonian.also seems graph Hamiltonian, adding edges makes less likelyhard. attempt find hard graphs larger n, modified Gn;m generatorinstead adding fixed number edges, instead added edges every vertexdegree least two, stops. sense produces graphs exactlyGn;m phase transition, since minimum degree two condition asymptoticallydistinguishes Hamiltonian non-Hamiltonian graphs high probability. referdistribution Gn model.Initially ran 1000 graphs generator n 100 500, hardinstances found. increased search 10,000 graphs n, includedsearch n = 1000. graphs, found one hard graph 100 vertices.Even second attempt using 26 million search nodes, still unsolved.post-mortem analysis, checked cut sets size 2 3 would leave 34 (or more) components found none. also checked pruned graph usingodd degree test mentioned Section 5.3, failed show non-Hamiltonian.Finally, set fast machine unlimited time restarts. Three search nodesless 0.1 seconds later proven non-Hamiltonian.Detailed analysis (see appendix) shows graph small featureeasily detected one starting points selected. use exponentiallygrowing sequence searches, use restarts. test 100 random starts3 second time limit 7 trials succeeded, using 2 5 search nodes provegraph non-Hamiltonian.also ran 10,000 Gn graphs even value n 16 98. smallestinstances requiring least 100,000 search nodes n = 50. 5 graphs requiringmillion nodes found n < 100, two n = 62, one n = 70 twon = 98. Two (one 62, one 98) initially timed out, solved secondattempts 1/2 hour. Neither susceptible attack 100 restarts100 vertex graph.Table 4.2 shows number non-Hamiltonian graphs n 100.except one mentioned detected initial pruning. remaining graphseasily shown Hamiltonian, maximum search ratio 7.0.Clearly probability non-Hamiltonian graphs drawn Gn decreasingn. seems likely probability hard instances also going zero.229fiVandegriend & Culbersonn100 200 300 400 500 1000Non-Ham 154 56 29 20 153Table 3: Number Non-Hamiltonian Graphs Gnn k = 1:00 k = 1:50 k = 2:00500100015000.200.430.680.200.500.800.210.600.87Table 4: CPU Seconds per 1000 Search Nodes Gn;m Graphs4.3 Gn;m Without Using Restartwanted know important restart feature asymptotically. ran 1000 Gn;mgraphs n 100 1500, parameter settings premiere experiment,time using backtrack algorithm without iterated restart feature. before,non-Hamiltonian instances detected initial pruning. One quadratically hardHamiltonian graph found n = 300, degree parameter 1.20, required163,888, 1:82n2 search nodes took 28.5 seconds. graphs nearlyquadratic, example n = 1500 4 graphs required 0:15n2 , 0:19n2 ,0:36n2 0:47n2 search nodes. seems asymptotically, even absenceiterated restarts, Gn;m class provide hard instances high probability.4.4 Gn;m SummaryBased set timing runs, present Table 4.4 indication running time persearch node increases number vertices n degree parameter k.times usually short, cannot get reliable numbers n < 500. times shownevaluation 1000 search nodes, averaged (total CPU divided totalnodes searched) graphs solved less 1:1n search nodes. instancesrequire significantly search nodes, time per 1000 nodes seems increasesomewhat, examples large n unable provide exactestimates. n = 15004 , average time per 1000 nodes instances requiring2n search nodes 0.89 seconds k = 1:00, 1.04 k = 1:50 1.31 k = 2:00.Note includes least one instance took 7n search nodes. table indicatesgrowth approximately linear n + m.experimental evidence clearly indicates Gn;m random graphs asymptoticallyextremely easy everywhere, despite existence phase transition. results temperfindings various researchers (Cheeseman et al., 1991; Frank et al., 1998; Frank& Martel, 1995) studying phase transitions Hamiltonian cycle problem. Cheeseman et al.'s explanation observed increase diculty near phase transition\on border [between regions low high connectivity] many4. n = 1500 value n least one instance requiring 2n search nodesthree values k. times 1000 1500 come separate runs 1000 graphs persample point.230fiThe Gn;m Phase Transition Hard Hamiltonian Cycle Problemalmost Hamiltonian cycles quite different . . . numerouslocal minima make hard find Hamiltonian cycle (if one). search procedure based local information diculty." (Cheeseman et al., 1991).Unfortunately, observations accurate, observed hardness duealgorithms limited size graphs tested, intrinsic propertiesHamiltonian cycle problem respect phase transition Gn;m graphs.shown ecient backtrack algorithm finds phase transition region Gn;m graphseasy general.5. Degreebound GraphsIntuitively, reason hard generate hard instance Gn;mtime add enough edges make minimum degree two, rest graphdense finding Hamiltonian cycle easy. Alternatively, see createnon-Hamiltonian property feature, must regions low degree,time meeting minimal requirements make instance hard solve. problemcharacterized one high variance vertex degrees. regionget even hard graphs Gn;m n small enough average degreealso low.avoid consequences degree variation, section use differentrandom graph model Gn(d2 = p2 ; d3 = p3 ; : : :) n number verticesdi = pi percentage vertices degree i. example G100 (d2 = 50%; d3 = 50%)represents set graphs 100 vertices 50 degree 2 50 degree3. refer graph generated model Degreebound graph. paperconsider graphs whose vertices degree 2 3.quite dicult generate graphs given degree sequence equal probability (Wormald, 1984). Instead, adopt two variations generate graphs selectingavailable edges. case vertex assigned free valence equal desired finaldegree. version 1 pairs vertices selected random order, added edgestwo vertices least one free valence each. continues either freevalences filled (a successful generation) vertex pairs exhausted (a failure).failure occurs, process repeated scratch. Initial tests indicate 1/3attempts fail general. eciency reasons, implementation array verticesholds vertex once. Pairs vertices, v; w selected random arrayv 6= w, (v; w) already edge, (v; w) added edge, freevalence v w reduced one. free valence vertex zero,vertex deleted array. step repeated small number (twicemaximum degree) vertices remains, possible pairs remaining verticesgenerated tested random order.version 2 array initially holds vertex v deg[v] times. Pairs verticesrandomly selected, equal edge exist, edge added,copies two vertices deleted array. repeated arrayempty, 100 successive attempts failed add edge. latter case takenfailure, process repeated scratch. method seldom fails.231fiVandegriend & CulbersonNeither two methods guarantees uniform distribution graphsgiven degree sequence. example, given degree sequence five vertices f1; 1; 2; 2; 2g,seven possible (labeled) graphs. One consists two components, edgetriangle. six four paths; thus six isomorphic one another.10! permutations pairs vertices, 564,480 generate graph two components,four path 322,560 distinct permutations. remaining permutations (31.2 %) yield legal graph. Thus, first graph 1.75 times likelysix. course, four path (counting isomorphic graphs) 3.428 timeslikely two-component graph.hand, version 2 test program (not generator prohibits degreeone vertices) consistently generated first graph 8%{10% oftenothers, based several million random trials.5.1 Experimental Results Degreebound Graphstest graphs 100 : : : 500 vertices (step size 100) 1000 1500 vertices meandegree varying 2:6 : : : 3:0 (step size 0.01 2.75 2.95, step size 0.05 elsewhere).generate 1000 graphs data point, execute algorithm graph,collect results. test repeated two versions.Figure 3 shows percentage graphs Hamiltonian mean degreegraph size varies5 . clear transition mean degree 2.6 (near 0% chanceHamiltonian cycle) mean degree 3 (for Robinson Wormald, 1994 predictalmost 100% chance Hamiltonian cycle uniformly distributed graphs).phase transition, would expect slope grow steeper graph size increases.Figure 3 shows increase steepness.Note double points curve n = 100 due unavoidable discretization. Since total degree graph must even, generators detecttotal degree specified odd, one minimum degree vertices selected degreeincremented. Thus, example, whether fraction degree 3 vertices specified 0.810.82, number degree three vertices 82. Discretization effects also occur n = 300,500 1500, lessened impact.Table 5.1 summarize observed hard instances graphs. noteseveral instances exceeded time bounds, although certainly leastquadratically hard, included quadratically hard instances. frequencyhard instances appears decreasing n graphs. particularquadratically hard non-Hamiltonian instances 1000 vertices, excepthard solve program.Interestingly, turns O(n + m) time test showsunresolved instances non-Hamiltonian. test described brie Section 5.3.implemented test separate program tested unresolved graphs,results indicated last column Table 5.1. remaining five graphsremain unresolved. test included initial pruning program,instances enumerated last column Table 5.1 would solved (proven nonHamiltonian) without search.5. graphs, mean degree 2.0 plus fraction degree 3 vertices.232fiThe Gn;m Phase Transition Hard Hamiltonian Cycle Problem100Version 1n = 10020030040050010001500% Hamiltonian806040200606570758085% Vertices Degree 39095100100Version 2n = 10020030040050010001500% Hamiltonian806040200606570758085% Vertices Degree 39095Figure 3: % Hamiltonian graphs Degreebound Graphs.233100fiVandegriend & CulbersonVersion 1Number Quadratically Hard TimedVertices HCHCTotal HC1005000200180333008011104001014145000014141000007715000166Version 2Number Quadratically Hard TimedVertices HCHCTotal HC100500020090653001001313400301111500111091000016415000066Table 5: Number Hard Graphs Degreebound GraphsThus, although classes may provide small rate hard instances currentprogram, clear even minimally hard. Furthermore, appears existsimple improvements program would eliminate hard instances.Figure 4 illustrate distribution graphs timed out.quadratically hard graphs similar distributions. concludedhard instances seem distributed mean degree range 2.78 2.94.backtrack program little faster Degreebound graphs Gn;m graphs,would expect given fewer total edges. 1500 vertices, times per 1000 searchnodes ranged 0.27 seconds easiest (no backtrack) instances 0.56 secondsharder ones.5.2 Analysis Degreebound Graphsanalysis Degreebound graph class led us conjecture prime factordetermining Hamiltonicity graph whether graph degree 3vertex 3 neighbours degree 2. label 3D2 configuration (or 3D2 event).graph 3D2 configuration non-Hamiltonian. following informal analysisprovides evidence conjecture.Let E (n; ) represent expected number 3D2 configurations graph nvertices. Let D2 = n number degree 2 vertices D3 = (1 , )n numberD3 = 2n+3n(1,) = 3 , . Assumingdegree 3 vertices. Note mean degree = 2D2 +3nnequal probability combinations,234fiThe Gn;m Phase Transition Hard Hamiltonian Cycle ProblemNumber FailedVersion 154329519020085 % Degree 35001000Number Vertices801500Number FailedVersion 254329519020085 % Degree 35001000Number Vertices801500Figure 4: Distribution Timed Instances Degreebound graphs235fiVandegriend & Culberson# Mean Degree 50% HC PointVertices ExperimentalTheoretical1002.782.782002.812.823002.832.854002.842.865002.852.8710002.882.9015002.902.91Table 6: Experimental approximate theoretical values location 50%Hamiltonian point Degreebound graphs various sizes.E (n; ) = D3,D2,n,133,n(1 , ) n)(n)(n , 1)(n , 2)= ,n,1 3 = n(1(,n ,1)(n , 2)(n , 3)3restrict asymptotic case (n ! 1) gives usE (n; ) n(1 ,n3)(n) n(1 , )33E (n; ) ! 0, probability configuration 3D2 approaches 0.want find n(1 , )3 ! 0 n ! 1. occurs = o(n,1=3 ).Since Hamiltonian cycle cannot exist E (3D2) > 0, tells us phase transitionasymptotically occurs mean degree equals 3. Asymptotically, Degreebound graphs< 3 expected non-Hamiltonian Degreebound graphs > 3expected Hamiltonian (ignoring conditions). agrees resultsRobinson Wormald (1994) proved almost 3-regular graphs Hamiltonian.let = n,1=3 gives us E (n; ) 1. Substituting equation expressionmean degree gives us = 3 , n,1=3 . Table 5.2 lists mean degrees different values nusing formula along experimentally determined values point 50%graphs Hamiltonian. remarkably similar. suggests 3D2configuration major determinator whether Degreebound graph Hamiltonian not. Minor effects (which ignored) come propagation deleted edgespruning less probable cases mentioned Section 5.3. Since3D2 configuration detected algorithm search started, alsoimplies phase transition easy algorithm, since non-Hamiltoniangraphs instantly detected. matches experimental observations.5.3 Non-Hamiltonicity Test Sparse Graphspreparing final version paper, observed 3D2 configurationcould replace vertex degree three component several vertices. general,236fiThe Gn;m Phase Transition Hard Hamiltonian Cycle Problemthree vertices degree two form minimal cut graph nonHamiltonian. fact, replace three vertices minimal cut odd numberc degree 2 vertices, claim non-Hamiltonicity remains true.Checking possible subsets size c would expensive, fortunatelyeven general condition includes special cases testedlinear (i.e O(n + m)) time. Let F set edges forced Hamiltoniancycle one exists. example, edges incident vertex degree two forced. LetG0 = G , F graph formed deleting forced edges G. Let C1 : : : Chcomponents G0, define forced degree component Ci number endpoints forced edges (from F ) Ci . component odd forced degree, Gnon-Hamiltonian.proof correctness test simple. Observe Hamiltoniancycle G traversing cycle time enter component, mustcorresponding exit. Since forced edges act cut set (that separates components),edges available act entries exits component. forced edgesmust used. Therefore, Hamiltonian cycle must even numberforced edges connecting component components, contributing oneforced degree component. forced edge internal (with end points in)component contributes two forced degree, Hamiltonian cycle totalforced degree component must even.obtain results last column Table 5.1, first initial pruning,applied test pruned graphs, using forced edges incident degreetwo vertices.6. Generalized Knight's Circuit Graphssection examine graph class based upon generalized knight's circuit problemsize knight's move allowed vary along size (rectangular) board. instance generalized knight's circuit problem graph defined4-tuple (A; B ) , n A; B size knight's move n; sizeboard. vertices graph correspond cells, thus jV j = nm. Twovertices connected edge possible move one vertexmoving steps along one axis B along other. (See Vandegriend, 1998information problem.)graph class easy way define phase transitions sinceclear parameter separates Hamiltonian graphs non-Hamiltoniangraphs (although Vandegriend, 1998 shows ways identifying groupsnon-Hamiltonian graphs). Thus find hard graphs, look graphs take significant amount time solve relative size. perform 1 trial per graph (probleminstance) report ratio search nodes number vertices.examined total 300 generalized knight's circuit graphs ranges A; B; n;(Specific A; B; n triplets allowed vary, + B 9, n 13, 60.)ranged size 80 390 vertices. 300 instances examined, 121 graphs (40 %)found Hamiltonian 141 graphs (47 %) found non-Hamiltonian.237fiVandegriend & Culbersonsearch nodes # trials % trials2n10.85n4335.510n3730.620n119.150n86.6100n86.6200n21.7500n54.11000n21.72000n10.85000n10.810000n10.820000n00.050000n10.8Table 7: Histogram search node ratio backtrack algorithm 121 Hamiltoniangeneralized knight's circuit instances.remaining 38 graphs (13 %) backtrack algorithm failed (reached 30 minutetime limit), implies graphs hard backtrack algorithm.majority (91%) non-Hamiltonian graphs solved without search. However, significant number remaining graphs took many search nodes solve. 9graphs (6.4%) took 10n nodes 7 graphs (5.0%) took 100n nodes.hardest graph took 11276n search nodes (n = 324). majoritynon-Hamiltonian graphs easy, significant percentage generalized knight'scircuit graphs quite hard algorithm.larger variance hardness observed Hamiltonian graphs. Table 6 showsdistribution respect number search nodes required. Unlike Gn;mDegreebound graphs, graphs could solved n search nodes. Almostgraphs required least 2n search nodes. 33% graphs required least 10nnodes, 11% required least 100n nodes hardest graph required 34208n nodes(n = 198).7. Hard Constructed Graph Classworthwhile designing algorithm determine conditionsfrequently might fail perform badly might do. measureterms bad approximation is, long exact algorithm may takeworst case. long tradition designing instance sets foil specific combinatorial algorithms (Johnson, 1974; Mitchem, 1976; Olariu & Randall, 1989; Spinrad & Vijayan,1985). special classes intended general, frequently basedcertain features constructs together randomization hide features (Culberson & Luo, 1996; Brockington & Culberson, 1996; Kask & Dechter, 1995; Bayardo Jr. &238fiThe Gn;m Phase Transition Hard Hamiltonian Cycle ProblemSchrag, 1996). Gn;m class frequently used study graph algorithms possiblegraphs.section consider special construction Hamiltonian graphextremely hard (exponential increase diculty size) backtrack algorithm.consists mostly special constructs tied together randomly chosen edges.bears resemblance graphs Meredith graph (Bondy & Murty, 1976) useddisprove certain theoretical conjectures. graph remains dicult varyneighbour selection heuristic pruning techniques used backtrack algorithm.graph construct refer Interconnected-Cutset (ICCS ) graph.class intended merely show exponentially hard classes clearly existalgorithm, many backtrack algorithms using similar approaches.claim graphs intrinsically hard, polynomial time algorithmsolve particular class.basic concept use constructing graphs non-Hamiltonian edge,define edge cannot possible Hamiltonian cycle. Notesince graphs Hamiltonian, vertex must incident least two edgesnon-Hamiltonian. goal force algorithm choose non-Hamiltonianedge point. key observation edge chosen, algorithmmust backtrack fix choice. multiples bad choices, backtrackingfix recent bad choice, algorithm must eventually backtrack earlierpoint fix less recent bad choice, means recent choice must redone,algorithm making bad choice again. amount work performedalgorithm least exponential number bad choices. See Vandegriend (1998)details.ICCS graph composed k identical subgraphs ICCSS arranged circle.force desired cycle degree 2 vertex subgraph. Sincesubgraph Hamiltonian path connecting vertices, ICCS graphHamiltonian. Due construction ICCS subgraph, extra non-Hamiltonian edgesadded different subgraphs. edges help prevent componentsforming search, greatly reduces effectiveness component checkingsearch pruning. See Figure 5. Heavy lines forced edges must Hamiltoniancycle.Figure 6 contains sample ICCS subgraph. Non-Hamiltonian edges denoteddashed lines, forced edges denoted heavy lines.see dashed lines cannot part Hamiltonian cycle observepath ICCSS must enter exit SC vertex, twoSC vertices sequence path visit one SI vertex. Thus, pathuses least one vertex SC SI . Since initially jSC j = jSI j + 1,Hamiltonian cycle enter exit ICCSS once, must alternateSC SI vertices. Since ST vertices one edge leading SI vertex,edges forced. also allows us interconnect subgraphs without adding newHamiltonian cycles connecting vertices SC two different subgraphs (sinceadditional edges non-Hamiltonian edges). interconnecting subgraphsfashion, strongly reduce effectiveness checking components cut-pointssearch. current implementation, vertex SC randomly choose239fiVandegriend & CulbersonICCSSICCSSICCSSICCSSFigure 5: sample ICCS graph.SISDSCSTSTSC verticessubgraphsconnecting edges adjacent subgraphsFigure 6: sample ICCS subgraph ICCSS .240fiThe Gn;m Phase Transition Hard Hamiltonian Cycle Problemvertex another SC add edge. Thus, average number edges per vertexlittle less two, since edges may repeated.One additional design element added handle various degree selection heuristicsalgorithm could use. stage search, neighbours currentendpoint partial path arranged list determine orderchosen backtrack algorithm. 3 main heuristics: sorting list visitlower degree neighbours first, sorting visit higher degree neighbours first, visitingrandom order. (Our backtrack algorithm normally uses lower degree first heuristic.)SD vertex ICCS subgraph used fool low degree first heuristic.SD vertex incident two ST vertices two vertices SI , makesdegree 4. algorithm enters subgraph degree 2 connecting vertex,reaches one ST vertices. ST vertex, choices SD vertex (degree4) one SI vertex (degree jSC j , 2, connected SD vertexST vertex). jSC j > 6 SD vertex lower degree thuschosen first.high degree first heuristic avoids following edge ST vertex SDvertex, instead goes SI vertex. chooses one SC vertices (notincluding SD ST vertex, adjacent). point, choiceone SI vertices (maximum degree = jSC j , 2) one SC vertices differentsubgraph (degree jSC j subgraph yet visited). Since SC vertexnormally higher degree, algorithm follow non-Hamiltonian edgevertex.next neighbour chosen random, ST vertex, algorithm50% chance making wrong choice. Similarly, SC vertex algorithmsmall chance following non-Hamiltonian edge. number subgraphs increased,probability algorithm making right choices rapidly approaches 0.Another reason ICCS subgraph expected hard backtrack algorithmmany possible paths two ST vertices. non-Hamiltonianedge previously chosen, backtrack algorithm try differentcombinations paths (and fail form Hamiltonian cycle) backtracksbad choice.performed experiments various ICCS graphs. varied number subgraphs1 4, varied independent set size (jSI j) 6 8. used backtrackalgorithm specified Section 3 addition checking components cutpoints search. executed algorithm 5 times per graph. resultslisted Table 7 low degree first heuristic. experiments using degreeselection heuristics exhibited similar results.also performed similar experiments using randomized heuristic algorithm(Frieze, 1988; Posa, 1976). Due significant difference operationalgorithm backtrack algorithms, easily solved small ICCS graphs. Howeverperformance rapidly decreased graphs increased size.average degree ICCS graphs one subgraph lies within following range:jSI j , 2:5 + jS 9j:5+ 1 jSI j , 2 + jS j8+ 1241fiVandegriend & Culbersonn #S jSI j1428425616324818365412341231236666777888MinMedianMax14142106066163,77710,46747,328112,7956,538,842 32,578,160 36,300,827164811213,05621,79770,9491,350,084 5,247,287 8,027,5201854270283,164430,620750,211> 1:2 108Table 8: Search nodes required backtrack algorithm ICCS graphs.formula see size independent set increased, meandegree increases linearly. However, number subgraphs increased, meandegree remains constant. ICCS graphs remain hard wide range meandegrees (from O(1) O(n)). Therefore average degree case relevantparameter determining hardness.8. Conclusions Future Workbacktrack Hamiltonian cycle algorithm found Gn;m graphs easy solve, alongmajority Degreebound graphs. also performed similar experiments (Vandegriend, 1998) using randomized heuristic algorithm (Frieze, 1988; Posa, 1976)high success rate Gn;m graphs, less Degreebound graphs. interestingly,existence phase transition problems clearly correspond high frequency dicult instances. suspect properties play important roleaverage degree. supported results generalized knight's circuitgraphs, highly regular (with many symmetries), majorityaverage degrees 4 8, compared mean degree 3 Degreeboundgraphs.results surprising, since shown asymptoticallyrandomly generated graphs, edge added makes last vertex degree 2,high probability graph Hamiltonian (Bollobas, 1984). addition, ecientalgorithms shown solve instances polynomial time high probability (Bollobas et al., 1987). Since vertices degree less 2 trivially detectablecounter-indicator, hardly surprising asymptotically determining Hamiltonicitygraphs Gn;m easy.also observe performance backtrack algorithm widely varysingle graph due selection initial vertex. Multiple restarts backtrackalgorithm time limit reached often resulted superior performance. suggestlittle randomization algorithm used empirically identifying intrinsicallyhard random instances problem.242fiThe Gn;m Phase Transition Hard Hamiltonian Cycle ProblemAcknowledgementsresearch supported Natural Sciences Engineering Research Council GrantNo. OGP8053.ReferencesAngluin, D., & Valiant, L. G. (1979). Fast probabilistic algorithms Hamiltonian circuitsmatchings. J. Comput. System Sci., 18 (2), 155{193.Baker, A. (1995). Intelligent Backtracking Constraint Satisfaction Problems. Ph.D.thesis, University Oregon.Bayardo Jr., R. J., & Schrag, R. (1996). Using csp look-back techniques solve exceptionally hard sat instances. Proc. Second Int'l Conf. Principles PracticeConstraint Programming, Vol. 1118 Lecture Notes Computer Science, pp. 46{60.Bollobas, B., Fenner, T. I., & Frieze, A. M. (1987). algorithm finding Hamiltonpaths cycles random graphs. Combinatorica, 7 (4), 327{341.Bollobas, B. (1984). evolution sparse graphs. Bollobas, B. (Ed.), Graph TheoryCombinatorics, pp. 35{57. Academic Press, Toronto.Bondy, J. A., & Murty, U. S. R. (1976). Graph Theory Applications. Elsevier, Amsterdam.Brockington, M., & Culberson, J. C. (1996). Camou aging independent sets quasirandom graphs.. Johnson, & Trick (Johnson & Trick, 1996), pp. 75{88.Broder, A. Z., Frieze, A. M., & Shamir, E. (1994). Finding hidden Hamiltonian cycles.Random Structures Algorithms, 5 (3), 395{410.Cheeseman, P., Kanefsky, B., & Taylor, W. M. (1991). really hard problems are.Mylopoulos, J., & Reiter, R. (Eds.), IJCAI-91: Proceedings Twelfth International Conference Artificial Intelligence, pp. 331{337 San Mateo, CA. MorganKaufmann.Culberson, J. C., & Luo, F. (1996). Exploring k{colorable landscape iteratedgreedy.. Johnson, & Trick (Johnson & Trick, 1996), pp. 245{284.Frank, J., Gent, I. P., & Walsh, T. (1998). Asymptotic finite size parameters phasetransitions: Hamiltonian circuit case study. Information Processing Letters,press.Frank, J., & Martel, C. (1995). Phase transitions properties random graphs.CP'95 Workshop: Studying Solving Really Hard Problems, pp. 62{69.Frieze, A. M. (1988). Finding Hamilton cycles sparse random graphs. Journal Combinational Theory, Series B, 44, 230{250.243fiVandegriend & CulbersonGomes, C. P., Selman, B., & Kautz, H. (1998). Boosting combinatorial searchrandomization. Proceedings Fifteenth National Conference Artificial Intelligence (AAAI-98), pp. 431{437. AAAI Press/ MIT Press.Hogg, T. (1998). search problems random?. Proceedings FifteenthNational Conference Artificial Intelligence (AAAI-98), pp. 438{443. AAAI Press/MIT Press.Hogg, T., & Williams, C. P. (1994). hardest constraint problems: double phasetransition. Artificial Intelligence, 69, 359{377.Johnson, D. S. (1974). Approximation algorithms combinatorial problems. JournalComputer System Sciences, 9, 256{278.Johnson, D. S., Aragon, C. R., McGeoch, L. A., & Schevon, C. (1991). Optimizationsimulated annealing: experimental evaluation; part II, graph coloring numberpartitioning. Operations Research, 39 (3), 378{406.Johnson, D. S., & Trick, M. A. (Eds.). (1996). Cliques, Coloring, Satisfiability: SecondDIMACS Implementation Challenge (1993), Vol. 26. American Mathematical Society.Kask, K., & Dechter, R. (1995). GSAT local consistency. Mellish, C. S. (Ed.),IJCAI-95 : Proceedings Fourteenth International Joint Conference ArtificialIntelligence, pp. 616{622 San Mateo, CA. Morgan Kaufmann.Kocay, W. (1992). extension multi-path algorithm finding Hamilton cycles.Discrete Mathematics, 101, 171{188.Komlos, M., & Szemeredi, E. (1983). Limit distribution existence Hamiltoncycle random graph. Discrete Mathematics, 43, 55{63.Langley, P. (1992). Systematic nonsystematic search strategies. Artificial IntelligentPlanning Systems: Proceedings First International Conference, pp. 145{152.Martello, S. (1983). Algorithm 595: enumerative algorithm finding Hamiltoniancircuits directed graph. ACM Transactions Mathematical Software, 9 (1),131{138.Mitchem, J. (1976). various algorithms estimating chromatic number graph.Computer Journal, 19, 182{183.Motwani, R., & Raghavan, P. (1995). Randomized Algorithms. Cambridge University Press,New York.Olariu, S., & Randall, J. (1989). Welsh-Powell opposition graphs. Information ProcessingLetters, 31 (1), 43{46.Palmer, E. M. (1985). Graphical Evolution: introduction theory random graphs.John Wiley & Sons, Toronto.Posa, L. (1976). Hamiltonian circuits random graphs. Discrete Mathematics, 14, 359{364.244fiThe Gn;m Phase Transition Hard Hamiltonian Cycle ProblemRobinson, R. W., & Wormald, N. C. (1994). Almost regular graphs Hamiltonian.Random Structures Algorithms, 5 (2), 363{374.Selman, B., Levesque, H., & Mitchell, D. (1992). new method solving hard satisfiabilityproblems. Proceedings Tenth National Conference Artificial Intelligence(AAAI-92), San Jose, CA, pp. 440{446.Shufelt, J. A., & Berliner, H. J. (1994). Generating Hamiltonian circuits without backtracking errors. Theoretical Computer Science, 132, 347{375.Spinrad, J. P., & Vijayan, G. (1985). Worst case analysis graph coloring algorithm.Discrete Applied Mathematics, 12 (1), 89{92.Vandegriend, B. (1998). Finding Hamiltonian cycles: Algorithms, graphs performance.Master's thesis, Department Computing Science, University Alberta. Online\http://www.cs.ualberta.ca/~basil/".Wormald, N. C. (1984). Generating random regular graphs. Journal Algorithms, 5,247{280.245fiJournal Artificial Intelligence Research 9 (1998) 463-506Submitted 4/98; published 12/98Temporal Description LogicReasoning Actions PlansAlessandro Artaleartale@irst.itc.itITC-IRST, Cognitive Communication Technologies DivisionI-38050 Povo TN, ItalyEnrico FranconiDepartment Computer Science, University ManchesterManchester M13 9PL, UKfranconi@cs.man.ac.ukAbstractclass interval-based temporal languages uniformly representing reasoningactions plans presented. Actions represented describing trueaction occurring, plans constructed temporally relating actionsworld states. temporal languages members family Description Logics,characterized high expressivity combined good computational properties.subsumption problem class temporal Description Logics investigatedsound complete decision procedures given. basic language TL-F consideredfirst: composition temporal logic TL { able express interval temporalnetworks { together non-temporal logic F { Feature Description Logic.proven subsumption language NP-complete problem. shownreason expressive languages TLU -FU TL-ALCF . formeradds disjunction temporal non-temporal sides language, latterextends non-temporal side set-valued features (i.e., roles) propositionallycomplete language.1. Introductionrepresentation temporal knowledge received considerable attention Artificial Intelligence community attempt extend existing knowledge representationsystems deal actions change. time, many logic-based formalismsdeveloped analyzed logicians philosophers purposes.class logical formalisms, properties expressive power computabilitystudied regards typical problems involving events actions.paper analyzes theoretical point view logical computationalproperties knowledge representation system allows us deal time, actionsplans uniform way. common approaches model actions basednotion state change { e.g., formal models based original situationcalculus (McCarthy & Hayes, 1969; Sandewall & Shoham, 1994) Strips-like planningsystems (Fikes & Nilsson, 1971; Lifschitz, 1987) { actions generally consideredinstantaneous defined functions one state another means pre-post-conditions. Here, explicit notion time introduced modeling languageactions defined occurring time intervals, following Allen proposal (Allen,c 1998 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.fiArtale & Franconi1991). formalism action represented describing time courseworld action occurs. Concurrent overlapping actions allowed: effectsoverlapping actions different sum individual effects; effects maydirectly follow action complex temporal relations may hold. instance,consider motion pointer screen driven mouse: pointer movesmovement device pad { cause-effect relation { twoevents contemporary, common-sense notion word.class interval temporal logics studied based Description Logics inspiredworks Schmiedel (1990) Weida Litman (1992). class formalismsstate describes collection properties world holding certain time. Actionsrepresented temporal constraints world states, pertain action itself.Plans built temporally relating actions states. represent temporal dimension classical Description Logics extended temporal constructors; thus uniformrepresentation states, actions plans provided. Furthermore, distinction madeDescription Logics terminological assertional aspects knowledgeallows us describe actions plans abstract level (action/plan types)instance level (individual actions plans). environment, subsumptioncalculus main inference tool managing collections action plan types. Actionplan types organized subsumption-based taxonomy, plays roleaction/plan library used tasks known literature plan retrievalindividual plan recognition (Kautz, 1991). refinement plan recognition notion proposed, splitting different tasks plan description classification {involving plan type { specific plan recognition respect plan description {involving individual plan. According latter reasoning task, system ablerecognize type action/plan taken place certain time interval, given setobservations world.Advantages using Description Logics high expressivity combined desirable computational properties { decidability, soundness completeness deduction procedures (Buchheit, Donini, & Schaerf, 1993; Schaerf, 1994; Donini, Lenzerini,Nardi, & Schaerf, 1994; Donini, Lenzerini, Nardi, & Nutt, 1995). main purposework investigate class decidable temporal Description Logics, provide complete algorithms computing subsumption. aim, start TL-F , languagecomposition temporal logic TL { able express interval temporal networks {together non-temporal Description Logic F { Feature Description Logic (Smolka,1992). turns subsumption TL-F NP-complete problem. Then, showreason expressive languages: TLU -FU , adds disjunctiontemporal non-temporal sides language, TL-ALCF , extendsnon-temporal side set-valued features (i.e., roles) propositionally complete Description Logic (Hollunder & Nutt, 1990). cases show reasoning decidablesupply sound complete procedures computing subsumption.paper organized follows. introducing main features DescriptionLogics Section 2, Section 3 organizes intuitions underlying proposal. technicalbases introduced brie overviewing temporal extensions Description Logicsrelevant approach { together inter-relationships interval temporalmodal logic { specifically intended time action representation reasoning.464fiA Temporal Description Logic Reasoning Actions Plansbasic feature temporal language (TL-F ) introduced Section 4. language syntaxfirst described Section 4.1, together worked example illustrating informalmeaning temporal expressions. Section 4.2 reveals model theoretic semantics TL-F ,together formal definition subsumption instance recognition problems.Section 5 shows temporal language suitable action plan representationreasoning: well known cooking domain blocks world domain takenconsideration. sound complete calculus feature temporal language TL-Fpresented details Section 6. proof subsumption TL-F NP-completeproblem included. calculus TL-F forms basic reasoning procedureadapted deal logics extended propositional part. algorithmchecking subsumption presence disjunction (TLU -FU ) devised Section 7.1;Section 7.2 non-temporal part language extended rolesfull propositional calculus (TL-ALCF ). cases, subsumption problem stilldecidable. Operators homogeneity persistence presented Section 8adequate representation world states. particular, possible solution frameproblem, i.e., problem compute remains unchanged action, suggested.Section 9 surveys whole spectrum extensions Description Logics representingreasoning time action. Section concluded comparison StateChange based approaches brie illustrating effort made situation calculusarea temporally extend class formalisms. Section 10 concludes paper.2. Description LogicsDescription Logics1 formalisms designed logical reconstruction representation tools frames, semantic networks, object-oriented semantic data models{ see (Calvanese, Lenzerini, & Nardi, 1994) survey. Nowadays, Description Logicsalso considered important unifying formalism many object-centeredrepresentation languages used areas Knowledge Representation. Importantcharacteristics Description Logics high expressivity together decidability,guarantee existence reasoning algorithms always terminate correctanswers.Section gives brief introduction basic Description Logic, servebasic representation language proposal. formal apparatus, formalism introduced (Schmidt-Schau & Smolka, 1991) elaborated (Donini,Hollunder, Lenzerini, Spaccamela, Nardi, & Nutt, 1992; Donini et al., 1994, 1995; Buchheitet al., 1993; De Giacomo & Lenzerini, 1995, 1996) followed: way, DescriptionLogics considered structured fragment predicate logic. ALC (Schmidt-Schau &Smolka, 1991) minimal Description Logic including full negation disjunction {i.e., propositional calculus, notational variant propositional modal logicK(m) (Halpern & Moses, 1985; Schild, 1991).basic types Description Logic concepts, roles, features, individuals.concept description gathering common properties among collection individuals;logical point view unary predicate ranging domain individu1. Description Logics also called Frame-Based Description Languages, Term Subsumption Languages, Terminological Logics, Taxonomic Logics, Concept Languages KL-One-like languages.465fiArtale & FranconiC; ! j>j?j:C jC uD jC tD j8P .C j9P .C jp:Cjp#qjp"qjp"p; q ! f jpq(atomic concept)(top)(bottom)(complement)(conjunction)(disjunction)(universal quantifier)(existential quantifier)(selection)(agreement)(disagreement)(undefinedness)(atomic feature)(path)Figure 1: Syntax rules ALCF Description Logic.als. Properties represented either means roles { interpreted binaryrelations associating individuals given class values property { meansfeatures { interpreted functions associating individuals given classsingle value property. language ALCF , extending ALC features (i.e.,functional roles) considered. syntax rules Figure 1, ALCF concepts (denotedletters C D) built atomic concepts (denoted letter A), atomic roles(denoted letter P ), atomic features (denoted letter f ). syntax rulesexpressed following tradition Description Logics (Baader, Burckert, Heinsohn,Hollunder, Muller, Nebel, Nutt, & Profitlich, 1990).meaning concept expressions defined sets individuals, unary predicates, meaning roles sets pairs individuals, binary predicates.Formally, interpretation pair = (I ; ) consisting set individuals (thedomain ) function (the interpretation function ) mapping every conceptsubset , every role subset , every feature partial function, every individual different element { i.e., aI 6= bI 6= b(Unique Name Assumption) { equations left column Figure 2satisfied.ALCF semantics identifies concept expressions fragments first-order predicatelogic. Since interpretation assigns every atomic concept, role feature unarybinary (functional) relation , respectively, one think atomic concepts, rolesfeatures unary binary (functional) predicates. seen follows:atomic concept A, atomic role P , atomic feature f , mapped respectivelyopen formulas FA ( ), P (ff; fi ), Ff (ff; fi ) Ff satisfying functionality axiom8y; z.Ff (x; y) ^ Ff (x; z) ! = z { i.e., Ff functional relation.rightmost column Figure 2 gives transformational semantics ALCF expressions terms FOL well-formed formul, left column gives standardextensional semantics. far transformational semantics concerned, concept C ,role P path p correspond FOL open formulae FC ( ), FP (ff; fi ), Fp (ff; fi ),466fiA Temporal Description Logic Reasoning Actions Plans>I =?I = ;(:C )I =(C u D)I =(C D)I =(9P .C )I =(8P .C )I =(p : C )I =p # qI =p " qI =truefalsen CC \ DIC [ DIfa 2 j 9b.(a; b) 2 P ^ b 2 C gfa 2 j 8b.(a; b) 2 P ) b 2 C gfa 2 dom pI j pI (a) 2 C gfa 2 dom pI \ dom qI j pI (a) = qI (a)gfa 2 dom pI \ dom qI j pI (a) 6= qI (a)g(p ")I = n dom pI(p q)I = pI qI:FC ( )FC ( ) ^ FD ( )FC ( ) _ FD ( )9x.FP ( ; x) ^ FC (x)8x.FP ( ; x) ) FC (x)9x.Fp ( ; x) ^ FC (x)(9x.Fp ( ; x) ^ Fq ( ; x))(9x; .Fp ( ; x) ^ Fq ( ; ))^(8x; .Fp ( ; x) ^ Fq ( ; ) ! x 6= ):9x.Fp ( ; x)9x.Fp (ff; x) ^ Fq (x; fi )Figure 2: extensional transformational semantics ALCF .respectively. worth noting extensional semantics left column gives alsointerpretation formulas right column following propositionholds.Proposition 2.1 (Concepts vs. fol formul) Let C ALCF concept expression.transformational semantics Figure 2 maps C logically equivalent firstorder formula.terminology TBox finite set terminological axioms. atomic concept A,called definedconcept, (possibly complex) concept C , terminological axiom:form = C . atomic concept appearing left-hand side terminologicalaxiom called primitive concept. Acyclic simple TBoxes considered: definedconcept may appear left-hand side axiom, terminologicalcycles allowed, i.e., defined concept may occur { neither directly indirectly {within definition (Nebel, 1991). interpretation satisfies =: CAI = C .example, consider unary relation (i.e., concept) denoting class happyfathers, defined using atomic predicates Man, Doctor, Rich, Famous (concepts)CHILD, FRIEND (roles)::HappyFather = Man u (9CHILD.>) u 8CHILD.(Doctor u 9FRIEND.(Rich Famous))i.e., men whose children doctors rich famous friend.ABox finite set assertional axioms, i.e. predications individual objects. Letalphabet symbols denoting individuals; assertion axiom formC (a), R(a; b) p(a; b), b denote individuals O. C (a) satisfiedinterpretation iff aI 2 C , P (a; b) satisfied iff (aI ; bI ) 2 P , p(a; b) satisfiediff pI (aI ) = bI .467fiArtale & Franconiknowledge base finite set terminological assertional axioms. interpretation model knowledge base iff every axiom satisfied . logicallyimplies v C (written j= v C ) AI C every model : saysubsumed C . reasoning problem checking whether subsumed Ccalled subsumption checking. logically implies C (a) (written j= C (a)) aI 2 Cevery model : say instance C . reasoning problemchecking whether instance C called instance recognition.acyclic simple TBox transformed expanded TBoxmodels, defined concept makes use definition defined concept.way, interpretation defined concept expanded TBox dependdefined concept. easy see subsumed C acyclic simpleTBox expansion respect subsumed expansionC respect empty TBox. expansion procedure recursively substitutesevery defined concept occurring definition defining expression; proceduremay generate TBox exponential size, proved (Nebel, 1990) workspolynomial time reasonable restrictions. following interchangeably refers eitherreasoning respect TBox reasoning involving expanded conceptsempty TBox. particular, devising subsumption calculus logics consideredhere, always assumed defined concepts expanded.3. Towards Temporal Description LogicsSchmiedel (1990) proposed extend Description Logics interval{based temporallogic. temporal variant Description Logic equipped model-theoreticsemantics. underlying Description Logic FLENR, (Donini et al., 1995): differsALCF contain > ? concepts, neithernegation disjunction, cardinality restrictions conjunction roles.new temporal term-forming operators temporal qualifier at, existentialuniversal temporal quantifiers sometime alltime. qualifier operator specifiestime concept holds. temporal quantifiers introduce temporal variablesconstrained means temporal relationships based Allen's interval algebra extendedmetric constraints deal durations, absolute times, granularities intervals.give example temporal Description Logic, concept Mortal definedby::Mortal = LivingBeing u (sometime(x) (after x NOW) (at x (:LivingBeing)))meaning LivingBeing reference interval NOW, aliveinterval x sometime reference interval NOW. Schmiedel proposealgorithm computing subsumption, gives preliminary hints. Actually,Schmiedel's logic argued undecidable (Bettini, 1997), sacrificing main benefitDescription Logics: possibility decidable inference techniques.Schmiedel's temporal Description Logic, closed complementation, containsproper fragment temporal logic HS proposed Halpern Shoham (1991).logic HS propositional modal logic extends propositional logic modalformul kind hRi. [R]. { R basic Allen's temporal relation hi468fiA Temporal Description Logic Reasoning Actions Plans[] possibility necessity modal operators. example, modal formulaLivingBeing ^ hafteri.:LivingBeing corresponds abovementioned Mortal concept.Unfortunately, HS logic shown undecidable, least interesting classestemporal structures: \One gets decidability restricted cases,set temporal models considered finite collection structures, consistingfinite set natural numbers." (Halpern & Shoham, 1991)Weida Litman (1992, 1994) propose T-Rex, loose hybrid integrationDescription Logics constraint networks. Plans defined collections steps togethertemporal constraints duration. step associated actiontype, represented generic concept K-Rep { non-temporal Description Logic. Thusplan seen plan network, temporal constraint network whose nodes, correspondingtime intervals, labeled action types associated steps planitself. example plan T-Rex show plan preparing spaghetti marinara:(defplan Assemble-Spaghetti-Marinara((step1 Boil-Spaghetti)(step2 Make-Marinara)(step3 Put-Together-SM))((step1 (before meets) step3)(step2 (before meets) step3)))plan composed three actions, i.e., boiling spaghetti, preparing marinara sauce,assembling things end. Temporal constraints steps establishtemporal order corresponding actions. structural plan subsumptionalgorithm defined, characterized terms graph matching, based two separatenotions subsumption: pure terminological subsumption action types labelingnodes, pure temporal subsumption interval relationships labeling arcs.plan library used guide plan recognition (Weida, 1996) way similarproposed Kautz (1991). Even work strong motivations, formal semanticsprovided language reasoning problems.Starting assumption action duration time, proposal considers interval-based modal temporal logic { spirit Halpern Shoham (1991){ reduces expressivity (Schmiedel, 1990) direction (Weida & Litman,1992). Schmiedel's work lacks computational machinery, Halpern Shoham'slogic undecidable, expressive decidable logic obtained, providing soundcomplete reasoning algorithms. Differently T-Rex uses two different languagesrepresent actions plans { non temporal Description Logic describing actionssecond language compose plans adding temporal information { extension Description Logic chosen time operators available directly termconstructors. view implies integration temporal domain semantic structure terms interpreted, giving formal way well-foundednotion subsumption proving soundness completeness correspondingprocedure. example formalism, plan preparing spaghetti marinaraintroduced represented follows:469fiArtale & Franconi: 3(y z w) (y (before; meets) w)(z (before; meets) w).(Boil-Spaghetti@y uMake-Marinara@z uPut-Together-SM@w)Assemble-Spaghetti-Marinara =Moreover, possible build temporal structured actions { opposed atomicactions proposed T-Rex { describing world state changes occurrence action: fact, language allows feature representation order relateactions states world (see Section 5.2). kind expressivity capturedT-Rex, since uses non-temporal Description Logic represent actions. mainapplication T-Rex plan recognition; according ideas Kautz (1991) ClosedWorld Assumption (CWA) (Weida, 1996) made, assuming plan library complete observed plan fully accounted single plan. CWA reliedhere, following Open World Semantics characterizing Description Logics. Weaker,monotonic, deductions allowed plan recognition process. However, procedures recognizing necessary, optional impossible individual plan respectplan description still applicable, plan library given closed world semantics.4. Feature Temporal Language TL-Ffeature temporal language TL-F basic logic considered here. languagecomposed temporal Logic TL { able express interval temporal networks {non-temporal Feature Description Logic F . Note that, logic family TemporalDescription Logics introduced paper identified composed stringfirst part refers temporal part language one refersnon-temporal part.4.1 SyntaxBasic types language concepts , individuals, temporal variables intervals.Concepts describe entities world, states events. Temporal variables denoteintervals bound temporal constraints, means abstract temporal patternsform constraint networks expressed. Concepts (resp. individuals) specifiedhold certain temporal variable (resp. interval). way, action types (resp.individual actions) represented uniform way temporally related concepts(resp. individuals).basic temporal interval relations Allen notation (Allen, 1991) (Figure 3)used: (b), meets (m), (d), overlaps (o), starts (s), finishes (f), equal (=),(a), met-by (mi), contains (di), overlapped-by (oi), started-by (si), finished-by (fi). Conceptexpressions (denoted C; D) syntactically built atomic concepts (denoted A),atomic features (denoted f ), atomic parametric features (denoted ?g) temporalvariables (denoted X; ). Temporal concepts (C; D) distinguished non-temporalconcepts (E; F ), following syntax rules Figure 4. Names atomic featuresatomic parametric features alphabet symbols; ? symbolintended operator, differentiating two syntactic types.470fiA Temporal Description Logic Reasoning Actions PlansRelationAbbr.Inversebefore(i; j )bmeets(i; j )mioverlaps(i; j )oistarts(i; j )siduring(i; j )difinishes(i; j )ffijFigure 3: Allen's interval relationships.Temporal variables introduced temporal existential quantifier \3" { excludingspecial temporal variable ], usually called NOW, intended reference interval.Variables appearing temporal constraints (Tc) must declared within temporalquantifier, exception special variable ]. Temporal variables appearingright hand side \@" operator called bindable. Concepts must include unbound(a.k.a. free) bindable variables. Informally, bindable variable said boundconcept declared nearest temporal quantifier body occurs;avoid usual formal inductive definition bound variable. Moreover, chainedconstructs form ((C [Y1 ]@X1 )[Y2 ]@X2 : : :) non bindable variables { i.e., onesleft hand side \@" operator { cannot appear once. Note that, sinceDescription Logics fragment FOL one free variable, mentionedrestrictions force temporal side language one free temporal variable,i.e., reference time ].usual, terminological axioms building simple acyclic TL-F TBoxes allowed.using concept expression name referring defined concept, possibleuse substitutive qualifier construct, impose coreference variable appearingdefinition associated defined concept. statement C [Y ]@X constrainsvariable , appear definition defined concept C , corefer X(see Section 5.2 example). drawback use operator requirementknow internal syntactical form defined concept, namely, namestemporal variables.Let OT two alphabets symbols denoting individuals temporal intervals,respectively. assertion { i.e., predication temporally qualified individual entities {statement one forms C (i; a); p(i; a; b); ?g(a; b); R(i; j ), C concept, pfeature, ?g parametric feature, R temporal relation, b denote individualsO, j denote temporal intervals OT .471fiArtale & FranconiTLFC; ! E jCuD jC @X jC [Y ]@X j3(X ) Tc.CTc ! (X (R) ) j(X (R) ]) j(] (R) )Tc ! Tc j Tc TcR; ! R , jj mi j f j : : :X; ! x j j z j : : :X ! XjX XE; F ! j>jEuF jp#qjp:Ep; q ! f j?g jpq(non-temporal concept)(conjunction)(qualifier)(substitutive qualifier)(existential quantifier)(temporal constraint)(disjunction)(Allen's relations)(temporal variables)(atomic concept)(top)(conjunction)(agreement)(selection)(atomic feature)(atomic parametric feature)(path)Figure 4: Syntax rules interval Description Logic TL-F4.1.1 clarifying ExampleLet us informally see intended meaning terms language TL-F (forformal details see Section 4.2). Concept expressions interpreted pairs temporalintervals individuals hi; ai, meaning individual extension concept interval i. concept intended describe action, interpretationseen set individual actions type occurring interval.Within concept expression, special \]" variable denotes current intervalevaluation; case actions, thought refers temporal intervalaction occurs. temporal existential quantifier introduces intervalvariables, related possibly ] variable way defined settemporal constraints. evaluate concept interval X , different current one,necessary temporally qualify X { written C @X ; way, every occurrence472fiA Temporal Description Logic Reasoning Actions Plans]-Basic-Stack(BLOCK)x-OnTable(BLOCK)OnBlock(BLOCK)-Figure 5: Temporal dependencies definition Basic-Stack action.] embedded within concept expression C interpreted X variable2. informalmeaning concept temporal existential quantification understoodfollowing examples action domain.:Basic-Stack = 3(x ) (x ])(] ). ((?BLOCK : OnTable)@x u (?BLOCK : OnBlock)@y )Figure 5 shows temporal dependencies intervals concept Basic-Stackholds. Basic-Stack denotes, according definition (a terminological axiom),action occurring interval involving ?BLOCK OnTableOnBlock. ] interval could understood occurring time action typedefined: referring within definition explicit way temporally relate statesactions occurring world respect occurrence action itself.temporal constraints (x ]) (] y) state interval denoted x meetinterval denoted ] { occurrence interval action type Basic-Stack {] meet y. parametric feature ?BLOCK plays role formal parameteraction, mapping individual action type Basic-Stack block stacked,independently time. Please note that, whereas existence identity ?BLOCKaction time invariant, qualified differently different intervals time,e.g., ?BLOCK necessarily OnTable interval denoted x.Let us comment introduction explicit temporal variables. absenceexplicit temporal variables would weaken temporal structure concept since arbitraryrelationships two intervals could represented anymore.example, implicit intervals possible describe situationtwo concept expressions, say C D, hold two meeting intervals (say x, y) firstinterval starting second finishing reference interval (i.e., temporal pattern(x meets y)(x starts ])(y finishes ]) cannot represented). precisely, possiblerepresent temporal relations two intervals derivabletemporal propagation constraints imposed pairs variables. explicitvariables go general thrust Description Logics, gained expressive powertogether observation variables limited temporal partlanguage main motivations using them. However, easy droplimiting temporal expressiveness proposed Bettini (1997) (see also Section 9).assertion type Basic-Stack(i; a) states individual actiontype Basic-Stack occurred interval i. Moreover, assertion impliesrelated ?BLOCK , say b, type OnTable interval j , meeting i,type OnBlock another interval l, met i.2. Since concept implicitly temporally qualified special ] variable, necessaryexplicitly qualify concepts ].473fiArtale & Franconi(s)E = fh[u; v]; [u1 ; v1 ]i 2 T<? T<? j u = u1 ^ v < v1 g(f )E = fh[u; v]; [u1 ; v1 ]i 2 T<? T<? j v = v1 ^ u1 < ug(mi)E = fh[u; v]; [u1 ; v1 ]i 2 T<? T<? j u = v1 g: : : (meaning Allen temporal relations)E(R , ) = R E [ EhX; TciE = fV : X 7! T<? j 8(X (R) ) 2 Tc. hV (X ); V (Y )i 2 g:Figure 6: temporal interpretation function.i; a) =) 9b. ?BLOCK(a; b) ^ 9j; l. (OnTable(j; b) ^ OnBlock(l; b) ^m(j; i) ^ m(i; l))Basic-Stack(individual action object conceptual domain associated relevantproperties { states { world affected individual action via bunchfeatures; moreover, temporal relations constrain time intervals imposing orderingchange states world.4.2 SemanticsSection, Tarski-style extensional semantics TL-F language given,formal definition subsumption recognition reasoning tasks devised.Assume linear, unbounded, dense temporal structure = (P ; <), Pset time points < strict partial order P . structure, giveninterval X temporal relation R, always possible find interval(X (R) ). assumption linear time { means two points t1t2 t1 t2 set points ft j t1 t2 g totally ordered { fits intuitionnature time, pair [t1 ; t2 ] thought closed intervalpoints t1 and: t2 . interval set structure defined set T<?closed intervals [u; v] = fx 2 P j u x v; u 6= vg .primitive interpretation =: hT<? ; ; consists set T<? (the interval setselected temporal structure ), set (the domain ), function (theprimitive interpretation function ) gives meaning atomic concepts, featuresparametric features:AI T<? ;f : (T<? ) partial7,! ;?gI : partial7,!Atomic parametric features interpreted partial functions; differ atomicfeatures independent time.order give meaning temporal expressions present generic concept expressions, Figure 6 defines temporal interpretation function. temporal interpretationfunction E depends temporal structure . labeled directed graph hX; Tci{ X set variables representing nodes, Tc set temporal constraints representing arcs { called temporal constraint network. interpretation474fiA Temporal Description Logic Reasoning Actions PlansAIV ;t;H = fa 2 j ht; ai 2 AI g = AIt>IV ;t;H = = >I(C u D)IV ;t;H = CVI ;t;H \ DVI ;t;H(p # q)IV ;t;H = fa 2 dom pIt \ dom qtI j pIt (a) = qtI (a)g = (p # q)It(p : C )IV ;t;H = fa 2 dom pIt j pIt (a) 2 CVI ;t;Hg(C @X )IV ;t;H = CVI ;V (X );H(C [Y ]@X )IV ;t;H = CVI ;t;H[fY 7!V (X )g(3(X ) Tc. C )IV ;t;H = fa 2 j 9W . W 2 hX; TciEH[f]7!tg ^ 2 CWI ;t;; gftI = f^t : partial7,! j 8a. (a 2 dom f^t $ ht; ai 2 dom f ) ^f^t (a) = f (t; a)(p q)It = pIt qtI?gtI = ?gIFigure 7: interpretation function.temporal constraint network set variable assignments satisfy temporalconstraints. variable assignment function V : X 7! T<? associating interval valuetemporal variable. temporal constraint network consistent admits non emptyinterpretation. notation, hX; TciEfx1 7!t1 ;x2 7!t2 ;:::g , used interpret concept expressions,denotes subset hX; TciE variable xi mapped interval value ti .possible interpret generic concept expressions. Consider equationsintroduced Figure 7. interpretation function IV ;t;H, based variable assignmentV , interval set constraints H = fx1 7! t1; : : :g assignments innervariables, extends primitive interpretation function way equationsFigure 7 satisfied. Intuitively, interpretation concept CVI ;t;H setentities domain type C time interval t, assignmentfree temporal variables C given V { see (C @X )IV ;t;H { constraintsassignment variables scope outermost temporal quantifiers given H.Note that, H interprets variable renaming due temporal substitutive qualifier {see (C [Y ]@X )IV ;t;H { takes effect choice variable assignment,equation (3(X ) Tc. C )IV ;t;H shows.absence free variables concept expression { exception ]{notational simplification natural interpretation function CtI ; equivalentinterpretation function CVI ;t;H V V (]) = H = ; introduced.set interpretations fCVI ;t;Hg obtained varying ; V ; fixed H maximal wrt setinclusion H = ;, i.e., set natural interpretations includes set interpretationsfixed H. fact, since H represents constraint assignment variables,unconstrained set larger one. Note that, feature interpretation naturalone used since admitted temporally qualify them.475fiArtale & Franconi]]Boil-SpaghettixMake-Spaghetti-Boil-Figure 8: Temporal dependencies definition Boil-Spaghetti plan.interpretation satisfies terminological axiom =: C iff AIt = CtI , every t.concept C subsumed concept (C v D) CtI DtI every interpretationevery interval t. interpretation model concept C CtI 6= ; t.concept model, satisfiable, otherwise unsatisfiable.TL-F concept expression always satisfiable, proviso temporalconstraints introduced existential quantifiers consistent. latter conditioneasily checked reduction concept normal formminimal temporal network (see Section 11, definition 6.5) computed.interesting note relations s, f, mi really necessary,possible express temporal relationship two distinct intervals usingthree relations transpositions si, fi, (Halpern & Shoham, 1991). followingequivalences hold:3x (x ]). C @x 3xy (y mi ])(x mi y). C @x3x (x ]). C @x 3xy (y ])(x f y). C @x3x (x ]). C @x 3xy (y ])(x fi y). C @xassign meaning ABox axioms, temporal interpretation function E extendedtemporal intervals iE element T<? 2 OT . semanticsassertions following: C (i; a) satisfied interpretation iff aI 2 CiIE ; p(i; a; b)satisfied iff pIiE (aI ) = bI ; ?g(a; b) satisfied iff ?gI (aI ) = bI ; R(i; j )satisfied iff hiE ; j E 2 . Given knowledge base , individual saidinstance concept C interval j= C (i; a).able give semantic definition reasoning task already calledspecific plan recognition respect plan description. inference servicecomputes individual action/plan instance action/plan type certaininterval, i.e., task known instance recognition Description Logic community.Given knowledge base , interval i, individual concept C , instancerecognition problem test whether j= C (i; a).5. Action plan representation: two examplesaction description represents world state may evolve relation possibleoccurrence action itself. plan complex action: described meanstemporally related world states simpler actions. following introduces examplesaction plan representations two well known domains, cooking domain (Kautz,476fiA Temporal Description Logic Reasoning Actions PlanszMake-Marinarax-Make-Spaghetti--Boil-SpaghettiBoilw-Put-Together-SMFigure 9: Temporal dependencies definition Assemble-Spaghetti-Marinara.1991; Weida & Litman, 1992) block world (Allen, 1991), aim showingapplicability framework.5.1 Cooking DomainLet us introduce plan Boil-Spaghetti::Boil-Spaghetti = 3x (x b ]). (Make-Spaghetti@x u Boil)Figure 8 shows temporal dependencies intervals concept Boil-Spaghetti holds. definition employs ] interval denote occurrence timeplan itself; way, possible describe different actions states worldconcurring definition plan related it. variable ]explicitly present definition Boil-Spaghetti, instead generic variable:Boil action take place time plan itself, Make-Spaghettioccurs it.definition plan reused within definition plans exploitingfull compositionality language. plan defined Boil-Spaghetti useddefinition Assemble-Spaghetti-Marinara::Assemble-Spaghetti-Marinara = 3(y z w) (y b w)(z b w).(Boil-Spaghetti@y uMake-Marinara@z uPut-Together-SM@w)case, precise temporal relations nodes two corresponding temporalconstraint networks asserted: e.g., action Put-Together-SM takes place strictlyBoil action (Figure 9). Observe occurrence interval plan Assemble-Spaghetti-Marinara appear Figure temporally relatedinterval.plan subsuming Assemble-Spaghetti-Marinara general plan defined below, Prepare-Spaghetti, supposing action Make-Sauce subsumes Make-Marinara.means among individual actions type Prepare-Spaghettiindividual actions type Assemble-Spaghetti-Marinara::Prepare-Spaghetti = 3 (y z ) (). (Boil-Spaghetti@y u Make-Sauce@z )477fiArtale & Franconi]- wStack(OBJ1, OBJ2)Clear-Block(OBJ1)v- z-Holding-Block(OBJ1) Clear-Block(OBJ1)Clear-Block(OBJ2)ON(OBJ1, OBJ2)xFigure 10: Temporal dependencies definition Stack action.However, note Boil-Spaghetti subsume Prepare-Spaghetti, evenconjunct definition latter. could better explained observingdefinition Prepare-Spaghetti plan expanded::Prepare-Spaghetti = 3 (x z ) (x b ). (Make-Spaghetti@x u Boil@y uMake-Sauce@z )Then, Boil action occurs interval { different occurringtime Prepare-Spaghetti { effect binding Boil-Spaghetti temporal variable y. contrary, definition Boil-Spaghetti Boil action takes place necessarily time. Subsumption Prepare-Spaghetti Boil-Spaghettifails since different temporal relations actions describing two plansplans specified. particular, observe Boil-Spaghetti plan denotesnarrower class plan expression3(x y) (x b y). (Make-Spaghetti@x u Boil@y)subsumes Prepare-Spaghetti Boil-Spaghetti itself.5.2 Blocks World Domainexample expressive power temporal language, shownrepresent Stack action blocks world, detailed wayprevious simple Basic-Stack action used clarifying example. Thus stacking actioninvolves two blocks, clear beginning; central partaction consists grasping one block; end, blocks one top another,bottom one longer clear (Figure 10).representation borrows Rat Description Logic (Heinsohn, Kudenko, Nebel,& Profitlich, 1992) intuition representing action parameters means partialfunctions mapping action involved action parameter (see Section 9).language, functions called parametric features. example, action Stackparameters ?OBJECT1 ?OBJECT2, representing sense objectsinvolved action independently time. So, assertion \?OBJECT1(a; block-a)",block-a denotes first object involved action interval. hand,assertion involving (non-parametric) feature, e.g., \ON(i; block-a; block-b)",imply anything truth value intervals i.concept expression, defines Stack action, makes use temporal qualifiedconcept expressions, including feature selections agreements: expression (?OBJECT2 :Clear-Block)@x means second parameter action Clear-Block478fiA Temporal Description Logic Reasoning Actions Plansinterval denoted x; (?OBJECT1 # ?OBJECT2)@y indicatesinterval object ?OBJECT1 placed ?OBJECT2. formal definitionaction Stack is::Stack = 3(x z v w) (x fi ])(y mi ])(z mi ])(v ])(w f ])(w mi v ).((?OBJECT2 : Clear-Block)@x u (?OBJECT1 # ?OBJECT2)@y u(?OBJECT1 : Clear-Block)@v u (?OBJECT1 : Holding-Block)@w u(?OBJECT1 : Clear-Block)@z )defined concept state properties prerequisitesstacking action properties must true whenever action succeeds.action intuitively states ?OBJECT1 ?OBJECT2 situationobjects clear start action. Note world states describedintervals denoted v; w; z result action grasping previously clear block::Grasp = 3(x w z ) (x ])(w f ])(w mi x)(z mi ]).((?OBJECT1 : Clear-Block)@x u (?OBJECT1 : Holding-Block)@w u(?OBJECT1 : Clear-Block)@z )Stack action redefined making use Grasp action::Stack = 3(x u v ) (x fi ])(y mi ])(u f ])(v ]).((?OBJECT2 : Clear-Block)@x u (?OBJECT1 # ?OBJECT2)@y u(Grasp[x]@v)@u)temporal substitutive qualifier (Grasp[x]@v) renames within defined Grasp actionvariable x v way making coreference two temporal variables,temporal constraints peculiar renamed variable x inheritedsubstituting interval v. Furthermore, effect temporally qualifying grasping actionu ] variable associated grasping action { referring occurrencetime action { bound interval denoted u. bindingoccurrence time grasping action, ] variable grasping action ]variable stacking action denote different time intervals, grasping actionoccurs interval finishing occurrence time stacking action.shown series outside observations action recognitionperformed { i.e., task called specific plan recognition respect plan description.following ABox describes situation blocks clear, grasped and/orother, generic individual action taking place time interval iablocks block-a block-b parameters:?OBJECT1(a; block-a); ?OBJECT2(a; block-b);o(i1 ; ia ); Clear-Block(i1 ; block-a); fi(i2 ; ia ); Clear-Block(i2 ; block-b);mi(i3 ; i1 ); f (i3 ; ia ); Holding-Block(i3 ; block-a);mi(i4 ; ia ); Clear-Block(i4 ; block-a); mi(i5 ; ia ); ON(i5 ; block-a; block-b)system deduces that, context knowledge base composedABox definition Stack concept TBox, individual actiontype Stack time interval ia , i.e., j= Stack(ia ; a).479fiArtale & FranconiC @X u D@X(C @X1 )@X2(C @X1 u D)@X2C u 3(X ) Tc.!!!!(C u D)@XC @X1C @X1 u D@X23(X ) Tc. (C u D)C doesn't contain free variables3(X )Tc1 .(C u3(Y ) Tc2 . [Y1 ]@X1 : : : [Yp ]@Xq @X ) ! 3(X ][Y1 =X1 ]:::[Yp=Xq ] )Tc1 [ Tc2+[]=X] .(C u D+ @X )doesn't contain existential temporal quantifiersp : (q : C ) ! (p q) : Cp : (C u ) ! p : C u p :p : (q1 # q2 ) ! p q1 # p q2,Prescriptions: X ][Y1 =X1 ]:::[Yp=Xq ] returns union two sets variables X ,occurrence Y1 ; : : : ; Yp substituted X1 ; : : : ; Xq , respectively, elements occurringX renamed fresh new identifiers. Z+ intended expression Zsubstitution renaming taken place. condition last rule forces application startlast nested existential temporal qualified concept.Figure 11: Rewrite rules transform arbitrary concept existential concept.6. Calculus TL-FSection presents calculus deciding subsumption temporal conceptsDescription Logic TL-F . calculus based idea separating inferencetemporal part inference Description Logic part. achieved firstlooking normal form concepts. Concept subsumption temporal languagereduced concept subsumption non-temporal concepts subsumptiontemporal constraint networks.6.1 Normal FormEvery TL-F concept expression reduced equivalent existential conceptform: 3(X ) Tc. (Q0 u Q1 @X1 u : : : u Qn@Xn ), Q non-temporal concept, i.e.,element language F . concept existential form seen conceptualtemporal constraint network, i.e., labeled directed graph hX; Tc; Q@X arcslabeled set arbitrary temporal relationships { representing disjunction {nodes labeled non-temporal concepts and, node X , temporal relation(X = X ) implicitly true. Moreover, since normalized concepts contain freevariables substitutive qualifiers, following natural interpretation function (seeSection 4.2) used.Proposition 6.1 (Equivalence EF) Every concept C reduced linear timeequivalent existential concept (ef C ), exhaustively applying set rewriterules Figure 11.480fiA Temporal Description Logic Reasoning Actions PlansProcedurehX; Tci; y):Covering(, ;;, ;;Z = fz 2 X j (z (=; : : :) y) 2 Tcg;8s 2 }(Z )j j 2 graph hX; Tc obtained deleting \=" temporal relationmidresultnode nodes inconsistentmid, mid [ fsg;8s 2 mid:9t 2 mid.result, result [ fsg;returnresult.Figure 12: Procedure computes covering.Note (ef C ) makes explicit possible chains features reducing nontemporal concept Q conjunction atomic concepts, feature selections restrictedatomic concepts feature agreements { i.e., Q feature term expression (Smolka,1992).normalization proceeds discovering possibles interactions nodesintention making explicit implicit information. crucial temporal interaction occurs node always coincident set nodes every possibleinterpretation temporal network.Definition 6.2 (Covering) Given temporal constraint network hX; Tci, let 2 XZ = fz1 ; z2 ; : : : ; zp g X , p 1, 62 Z . Z Covering 8V 2 hX; TciE ,V (y) 2 fV (z1 ); V (z2 ); : : : ; V (zp)g W Z , W covering y. Z = ;,called uncovered, otherwise said covered Z .Proposition 6.3 (Covering procedure) Given temporal constraint network hX; Tciminimal form (see, e.g., (van Beek & Manchak, 1996)) node 2 X proceduredescribed Figure 12 returns possible coverings size 2.idea behind covering whenever set nodes fz1 ; z2 ; : : : ; zp g coveringdisjunctive concept expression (Qz1 : : : Qzp ) conjunctively addedconcept expression Qy . Actually, since TL-F concept disjunction allowedsucient add node Least Commom Subsumer (lcs) (Qz1 : : : Qzp )defined below.Definition 6.4 (lcs) Let Q1; : : : ; Qn; Q; C F concept expressions. Then, conceptQ = lcsfQ1 ; : : : ; Qn g that: Q1 v Q ^ : : : ^ Qn v Q CQ1 v C ^ : : : ^ Qn v C ^ C < Q.Given concept existential form, temporal completion constraint networkcomputed described below.Definition 6.5 (Completed existential form) temporal completion conceptexistential form { Completed Existential Form, CEF { obtained sequentially applying following steps:481fiArtale & Franconi(closure) transitive closure Allen temporal relations conceptualtemporal constraint network computed, obtaining minimal temporal network (see,e.g., (van Beek & Manchak, 1996)).(= collapsing) equality temporal constraint, collapse equal nodesapplying following rewrite(rule:3(X n fxj g) Tc[xj =xi]. Q[xj =xi ] xi 6= xj xj 6= ].3(X ) Tc (xi = xj ). Q ! 3(X n fxi g) Tc[xi=]] . Q[xi =]] xi 6= xj xj = ].apply exhaustively first rule Figure 11.(covering) 2 X let compute covering = fZ 1; : : : ; Z ng followingprocedure showed proposition 6.3. Whenever covering empty, translateQy applying following rewrite rule: Qy ! Qy ui=1:::n lcsfQi1 ; : : : ; Qim g Z =fzi1 ; : : : ; zim g, Qij @zij 2 hX; Tc; Q@X i.(parameter introduction) New information added node pres-ence parameters, following rules show. ; symbol intended that,time concept expression left hand side appears nodetemporal constraint network, possibly conjoined concepts, righthand side represents concept expression must conjunctively addednodes; square brackets point optional parts; letters f (?f ) g (?g),possibly subscripts, denote atomic (parametric) features p q standgeneric features.?g1 : : : ?gn [ f [ p]] : C?g1 : : : ?gn [ f [ p]] # g [ q]?g1 : : : ?gn # ?f1 : : : ?fm?g1 : : : ?gn g [ p] # ?f1 : : : ?fm [ f [ q]];;;;?g1 : : : ?gn : >.?g1 : : : ?gn : >.?g1 : : : ?gn # ?f1 : : : ?fm .?g1 : : : ?gn : > u?f1 : : : ?fm : >.Proposition 6.6 (Equivalence CEF) Every concept existential form reduced equivalent completed existential concept.covering parameter introduction steps computed independently=-collapsing step conjoining resulting concept expressions. Observethat, obtain completed existential concept, steps normalization procedurerequire linear time exception computation transitive closuretemporal relations, covering step. steps involve NP-complete temporalconstraint problems (van Beek & Cohen, 1990). However, possible devise reasonablesubsets Allen's algebra problem polynomial (Renz & Nebel, 1997).relevant properties concept CEF admissible interval temporalrelations explicit concept expression node refinable withoutchanging overall concept meaning; stated following proposition.Proposition 6.7 (Node independence CEF) Let hX; Tc; Q@X conceptual temporal constraint network completed form (CEF); then, Q 2 Q482fiA Temporal Description Logic Reasoning Actions PlansF concept expressions C C 6w Q, exists interpretationhX; Tc; (Q u C )@X iIt 6= hX; Tc; Q@X iIt , interval t.Proof. proposition states information node CEF independentinformation nodes. fact, hX; Tc; (Q u C )@X iIt = hX; Tc; Q@X iItconcept expression one node implies new information node. Two casesdistinguished.i) Covered Nodes. (= collapsing) rule (covering) rule provide restrictcovered node specific F concept expression. Indeed, (= collapsing) ruleprovides collapsing two contemporary nodes conjoining concept expressionsthem. hand, (covering) rule adds covered node specificF concept expression subsumes disjunctive concept expression implicitlytrue covered node. Note that, thanks (Closure) rule, possible equaltemporal relations made explicit. two normalization rules cover possiblecases temporal interactions nodes.ii) coincident nodes. Every time-invariant information spread nodes.parametric features > concept time-invariant semantics: timeinvariant concept expressions >, ?g1 : : : ?gn : >, ?g1 : : : ?gn # ?f1 : : : ?fm ,n; 1, arbitrary conjunction terms. (parameter introduction) rulecaptures possible syntactical cases completion concerning time-invariant conceptexpressions. induction syntax, proven adding nodeconcept expression changes overall interpretation.2last normalization procedure eliminates nodes redundant information.final normalization step ends concept essential graph form,normal form used checking concept subsumption.Definition 6.8 (Essential graph) subgraph CEF conceptual temporal constraint network = hX; Tc; Q@X obtained deleting nodes labeled timeinvariant concept expressions { exception ] node { called essential graph: (ess ).Proposition 6.9 (Equivalence essential graph) Every concept completed existential form reduced linear time equivalent essential graph form.Theorem 6.10 (Equivalence normal form) Every concept expression reducedequivalent essential graph form. polynomial fragment Allen's algebraadopted, reduction takes polynomial time.example, normal form shown { i.e., essential graph { previouslyintroduced Stack action (see Section 5.2)::Stack = 3(x v w z )(x fi ])(y mi ])(z mi ])(w f ])(v ])(y mi x)(z mi x)(w f x)(v (o; d; s) x)(z (=; s; si) y)(w y)(v b y)(w z )(v b z )(w mi v).((?OBJECT2 : Clear-Block u ?OBJECT1 : >)@x u(?OBJECT1 # ?OBJECT2)@y u(?OBJECT1 : Clear-Block u ?OBJECT2 : >)@v u(?OBJECT1 : Hold-Block u ?OBJECT2 : >)@w u(?OBJECT1 : Clear-Block u ?OBJECT2 : >)@z )483fiArtale & Franconiexample, essential graph also CEF Stack since redundantnodes.6.2 Computing Subsumptionconcept subsumes another one case every possible instance second alsoinstance first, every time interval. Thanks normal form, concept subsumption temporal language reduced concept subsumption non-temporalconcepts subsumption temporal constraint networks. similar general procedure first presented (Weida & Litman, 1992), language non-temporalconcepts less expressive { include features parametric features.compute subsumption non-temporal concepts { may possibly includelcs concepts { refer (Cohen, Borgida, & Hirsh, 1992). following, write\wF " subsumption non-temporal F concepts taking account lcs concepts.Definition 6.11 (Variable mapping) variable mapping total function :X 1 7! X 2 M(]) = ]. write M(X ) intend fM(X ) j X 2 X g, M(Tc)intend f(M(X ) (R) M(Y )) j (X (R) ) 2 Tcg.Definition 6.12 (Temporal constraint subsumption) temporal constraint (X1 (R1 )Y1)said subsume temporal constraint (X2 (R2 )Y2 ) generic variable mapping M,written (X1 (R1 )Y1 ) wM (X2 (R2 ) Y2 ), M(X1 ) = X2 , M(Y1 ) = Y2 (R1 )E (R2 )Eevery temporal interpretation E .Proposition 6.13 (TC subsumption algorithm) (X1 (R1 )Y1) wM (X2 (R2 )Y2)M(X1 ) = X2 , M(Y1 ) = Y2 disjuncts R1 superset disjunctsR2 .Proof. Follows observation 13 temporal relations mutually disjointunion covers whole interval pairs space.2Definition 6.14 (Temporal constraint network subsumption) temporal constraintnetwork hX 1 ; Tc1 subsumes temporal constraint network hX 2 ; Tc2 variable mapping : X 1 7! X 2 , written hX 1 ; Tc1 wM hX 2 ; Tc2 i, hM(X 1 ); M(Tc1 )iE hX 2 ; Tc2 iEevery temporal interpretation E .Proposition 6.15 (TCN subsumption algorithm) hX 1; Tc1 wM hX 2 ; Tc2i iff,computing temporal transitive closure, exists variable mapping : X 1 7! X 2X1i ; Y1j 2 X 1 exist X2m ; Y2n 2 X 2 satisfy (X1i (R1i;j ) Y1j ) wM(X2m (R2m;n ) Y2n ).Proof. \( " Since definition 6.12 (X1i (R1i;j ) Y1j ) wM (X2m (R2m;n ) Y2n ) implies(R1i;j )E (R2m;n )E every E , then, definition interpretation temporalconstraint network, easy see assignment variables V interpretationhX 2 ; Tc2 also assignment interpretation hM(X 1 ); M(Tc1 )i.\) " Suppose one able find mapping; then, hypothesis,possible variable mapping exists i; j R1i;j superset R2m;n .484fiA Temporal Description Logic Reasoning Actions PlansSince, assumption, temporal constraint networks minimal, temporal relationR2m;n cannot restricted. So, variable mapping temporal interpretation E , build assignment V hV (X2m ); V (X2n )i 2 (R2m;n )EhV (X1i ); V (X1j )i 62 (R1i;j )E . Now, extend assignment V wayV 2 (hX 2; Tc2 i)E V 62 (hM(X 1 ); M(Tc1)i)E . contradicts assumption2hX 1; Tc1 wM hX 2; Tc2 i.Definition 6.16 (S-mapping) s-mapping conceptual temporal constraint network hX 1 ; Tc1 ; Q@X 1 conceptual temporal constraint network hX 2 ; Tc2 ; Q@X 2variable mapping : X 1 7! X 2 non-temporal concept labeling nodeX 1 subsumes non-temporal concept labeling corresponding node (X 1 ),hX 1; Tc1 wS hX 2; Tc2i.algorithm checking subsumption temporal concept expressions reducessubsumer subsumee essential graph form, looks s-mapping essential graphs exhaustive search. prove completeness overallsubsumption procedure showed introduction lcs's preserves subsumption. model-theoretic characterization lcs given showingproperty. Let's start build Herbrand model F concept. Let C 0(x) denotefirst order formula corresponding concept C (see proposition 2.1), functionality features expressed set formul F . syntax induction easyshow C 0 (x) existentially quantified formula one free variable. Moreover,matrices formula conjunction positive predicates. F [ fC 0 (x)g logicallyequivalentF [ fC 00 (x)g functionality axioms allow map every subformulaV009y.Ff (x; y) 9!y.Ff (x; y). C (x) existential quantifiersC 0 (x) (which come first order conversion features) replaced 9! quantifiers.Now, F [ fC 000 (a)g { constant substituting free variable x C 000 (a)obtained skolemizing 9! quantified variables { set definite Horn clauses.Definition 6.17 (Herbrand model) Let C F concept expression. defineMinimal Herbrand Model HC Minimal Herbrand Model mentionedset definite Horn clauses F [ fC 000 (a)g.Lemma 6.18 (F concept subsumption) Let C; F concept expressions, HC ; HDminimal Herbrand models obtained skolemizing first order set F [fC 000 (a); D000 (a)g.Then, C v iff HD HC .Proof. C v iff F [ fC 0 (x)g j= D0 (x), iff F [ fC 00 (x)g j= D00 (x), C 00 D00obtained applying functionality axioms set fC 0 (x); D0 (x)g (i.e., uni-fying variables functional predicates) replacing existentialquantifiers 9! quantifiers. Now, C 000 (x) D000 (x) obtained skolemizing9! quantified variables following way: let C 00(x) = 9!y1; : : : ; yn(x; y1 ; : : : ; yn) letD00 (x) = 9!y1 ; : : : ; yk ; z1 ; : : : ; zm (x; y1 ; : : : ; yk ; z1 ; : : : ; zm ), 0 k n, skolemizeformula: = 9!y1 ; : : : ; yn ; z1 ; : : : ; zm (x; y1 ; : : : ; yn ) ^ (x; y1 ; : : : ; yk ; z1 ; : : : ; zm ),let 0 (x) indicate skolemized form. Then, C 000 (x) = 0 (x) D000 (x) = 0 (x). Now,since every existential quantification C 00 (x); D00 (x) type 89! thesis true485fiArtale & Franconiiff F [ fC 000 (a)g j= D000 (a), constant substituting free variable x (see (vanDalen, 1994)). Now, showed lemma 6.17, C 000 (a) D000 (a) minimal Herbrand models HC ; HD verify lemma hypothesis. Then, F [ fC 000 (a)g j= D000 (a) iffHD HC .2able give model-theoretic characterization lcs crucialprove subsumption-preserving property.Lemma 6.19 (lcs model property) Let Q1; : : : ; Qn F concept expressions, HQ1 ;: : : ; HQn minimal Herbrand models obtained skolemizing first order set F [fQ0001 (a); : : : ; Q000n (a)g. Then, Q = lcsfQ1 ; : : : ; Qn g iff HQ = HQ1 \ : : : \ HQn .Proof. First all, let show HQ minimal Herbrand model concept Qlanguage F . Every HQi seen rooted directed acyclic graph nodeslabelled (possible empty) set atomic concepts arcs atomic featuresequality constraints nodes correspond features agreement. Whithout lossgenerality let us consider case HQ = HQ1 \ HQ2 . sucient showHQ rooted directed acyclic graph. Let root HQ1 ; HQ2 ,proved induction Fi (ai,1 ; ai ) 2 HQ (where Fi first order translationfeature, ai,1 ; ai obtained result skolemization process, a0 = a)fF1 (a; a1 ); : : : ; Fi (ai,1; ai )g HQ. case = 1 trivial. Let > 1. Now, Fi (ai,1 ; ai) 2HQ iff Fi(ai,1 ; ai ) 2 HQ1 \ HQ2 . ai,1 uniquely defined skolem functionfFi,1 (where, function symbols fFi newly generated feature Fiskolemization process). Then, Fi (ai,1 ; ai ) 2 HQ1 \ HQ2 iff Fi (ai,1 ; fFi,1 (ai )) 2 HQ1 \ HQ2iff Fi,1 (ai,2 ; fFi,1 (ai )) 2 HQ1 \ HQ2 . thesis true induction.Let us prove \(" direction. Suppose absurd F concept Cthat: Q1 v C ^ Q2 v C ^ C < Q. Then, Q1 v C iff HC HQ1 , Q2 v C , iffHC HQ2 . HC HQ1 \ HQ2 , i.e., HC HQ. Q v C contradictshypothesis.\)" direction proved analogous considerations.2Proposition 6.20 (lcs subsumption-preserving property) Let A; B; C; F concepts, u (B C ) v iff u lcsfB; C g v D.Proof. u (B C ) v iff u B v u C v D. Now, u B v iff F [fA000 (a); B 000 (a)g j= D000(a) iff HA [ HB j= D000 (a) iff HD HA [ HB . reasons,u C v iff HD HA [ HC . then, HD HA [ HB HD HA [ HC , i.e.,HD HA [ (HB \ HC ), i.e., HD HA [ HlcsfB;C g . But, HD HA [ HlcsfB;C g iffu lcsfB; C g v D.2following theorem provides sound complete procedure compute subsumption. completeness proof takes account temporal structure denseunbounded. allows us introduce new node conceptual temporal constraintnetwork without changing meaning. Remember that, redundant nodes,time-invariant information holds.Theorem 6.21 (TL-F concept subsumption) concept C1 subsumes concept C2 iffexists s-mapping essential graph C1 essential graph C2 .486fiA Temporal Description Logic Reasoning Actions PlansProof. Let T1 = hX 1 ; Tc1 ; Q@X 1 essential graph C1 , T2 = hX 2 ; Tc2 ; Q@X 2essential graph C2 .\( " (Soundness). Follows fact essential graph form logically equivalent starting concept, soundness procedures computingTCN subsumption (proposition 6.15) subsumption non-temporalconcepts (Cohen et al., 1992).\) " (Completeness). Suppose s-mapping exist. Two main casesdistinguished.i) mapping hX 1 ; Tc1 wM hX 2 ; Tc2 i. adding redundantnodes T2 , equivalent conceptual temporal constraint network T2 = hX 2 ; Tc2 ; Q@X 2may obtained. Let us consider extended networkway existsvariable mapping hX 1 ; Tc1 wM hX 2 ; Tc2 i. Now, possible ,node X1i 2 X 1 (X1i ) = X2j X2j 62 X 2 . Now, Q1i 6wF Q2j , since X2jcannot coincide nodes X 2 neither covering otherwise hypothesismapping exist would contradicted. proposition 6.7 Q2jtime-invariant node, whereas Q1i since T1 essential graph. Then, althoughconstruction allows existence unique V 3 networks (followsproposition 6.15), possible build instance T2 instance T1 .ii) possible mapping hX 1 ; Tc1 wM hX 2 ; Tc2 alwaystwo nodes X1i X2j M(X1i ) = X2j Q1i 6wF Q2j . Now, concept expression Q2j cannot refined (looking subsumption relationship Q1i ) addingF concept since proposition 6.7 would change overall interpretation.hand, lcs introduction { would substitute specific concept disjunction implicitly presents node covering { subsumption-invariantconcept substitution, showed lemma 6.20.cases contradict assumption T1 subsumes T2 .26.2.1 Complexity Subsumptionshown checking subsumption TL-F concept expressions essential graph form NP-complete problem. Therefore, polynomial reductionNP-complete problem deciding whether graph contains isomorphic subgraph presented. shown subsumption computation, proposed theorem 6.21,done non-deterministic algorithm takes polynomial time sizeconcepts involved. First let us consider complexity computing subsumptionnon-temporal concepts.Lemma 6.22 (F subsumpion complexity) Let C; F concept expressionscontain lcs's. Then, checking whether C vF takes polynomial time.Proof. See (Cohen et al., 1992).2problem subgraph isomorphism brie recalled. Given two graphs, G1 =(V1 ; E1 ) G2 = (V2 ; E2 ), G1 contains subgraph isomorphic G2 exists3. Since subsumption computed respect fixed evaluation time, V maps different occurrences] interval; justifies choice M(]) = ].487fiArtale & Franconisubset vertices V 0 V1 subset edges E 0 E1 j V 0 j=j V2 j,j E 0 j=j E2 j, exists one-to-one function f : V2 7! V 0 satisfying fu; vg 2 E2 iffff (u); f (v)g 2 E 0.Givengraph G = (V; E ), V = fv1 ; : : : ; vn g associate temporal concept expression::C = 3(v1 ; : : : ; vn ) : : : (vi (b; a) vj ) : : : . (A@v1 u : : : u A@vn), atomic conceptfvi ; vj g 2 E . transformation allows us prove problem subgraphisomorphism reduced subsumption temporal concepts.Proposition 6.23 Given two graphs G1 G2, G1 contains subgraph isomorphic G2iff C2 w C1 , C1 C2 corresponding temporal concepts expressions.Proof. temporal network edges labeled (before _ after) relation alwaysconsistent, minimal non-directed4 (Gerevini & Schubert, 1994). Then, temporalconcept essential graph form. proof easily follows since, every time G2isomorphic subgraph G1 one-to-one function f also s-mapping C2C1 , true C2 w C1 . hand, s-mapping gives risesubsumption also one-to-one isomorphism G2 G1 .2Theorem 6.24 (NP-hardness) Concept subsumption TL-F concept expressionsnormal form NP-hard problem.Proof. Follows proposition 6.23 reduction clearly polynomial.NP-completeness proven.2Theorem 6.25 (NP-completeness) Concept subsumption TL-F concept expressions normal form NP-complete problem.Proof. prove NP-completeness necessary show proposed calculussolved nondeterministic algorithm takes polynomial time. Now, given twotemporal concepts, T1 T2 , essential graph form, let j X 1 j= N1 j X 2 j= N2 .Then, check whether T1 w T2 , algorithm guesses one N2N1 variable mappingT1 T2 verifies whether s-mapping, too. last step donedeterministic polynomial time since, given mapping M, possible determine whetherhX 1; Tc1 wM hX 2; Tc2i checking N1(N1 , 1)=2 edges looking subsumptioncorresponding temporal relations (solved set inclusion procedure);N1 non-temporal concept subsumptions computed polynomial time.27. Extending Propositional Part Languagepropositional part temporal language extended powerful,still decidable, Description Logic. possible either add full disjunction,temporal non-temporal levels (TLU -FU ), propositionally completelanguage non-temporal level (TL-ALCF ).Please note languages possible express full negation,particular negation existential temporal quantifier. crucial,4. (vi (b; a) vj ) (vj (b; a) vi ), too.488fiA Temporal Description Logic Reasoning Actions Plans(C D)@Xp : (C )(C1 C2 ) u3(X ) Tc. (C D)!!!!C @X D@Xp:Ctp:D(C1 u D) (C2 u D)3(X ) Tc. C 3(X ) Tc.Figure 13: Rewrite rules computing disjunctive form.makes difference logic-based approaches (Schmiedel, 1990; Bettini, 1997;Halpern & Shoham, 1991). dual 3 (i.e., universal temporal quantifier 2) makessatisfiability problem { subsumption { propositionally complete languagesundecidable interesting temporal structures (Halpern & Shoham, 1991; Venema,1990; Bettini, 1993). representation actions plans context planrecognition, universal temporal quantifier strictly necessary. limitation makeslanguages decidable, nice computational properties, capable supportingkinds useful extensions. examples shown throughout paper may servepartial validation claim. Section 8.1 proposes introduction limited universaltemporal quantification maintains decidability subsumption.7.1 Disjunctive Concepts: TLU -FUlanguage TLU -FU adds basic language TL-F disjunction operator {usual semantics { temporal non-temporal levels:C; ! TL j CE; F ! F j E F(TLU )(FU )showing modify calculus check subsumption, let us beginclarifying example. gain expressivity allows us describe alternative realizationsgiven plan may have. Let us consider scenario robot moving emptyroom move either horizontally vertically. Let's call Rect-Moveinvolves simple sequence two basic moving actions. Then, describe Rect-Moveplan make use disjunction operator::Rect-Move = 3(x ) (] x)(x ). (Hor-Move@x u Ver-Move@y )3(x y) (] x)(x y). (Ver-Move@x u Hor-Move@y)7.1.1 Calculus TLU -FUNormal Formcomputing subsumption, normal form concepts needed. normalization procedure similar reported Section 6.1. Let us start reducing conceptexpression equivalent disjunctive concept form:3(X 1 ) Tc1 . G1) (3(X n) Tcn. Gn) Q1 Qm(489fiArtale & FranconiGi conjunctions concepts form Qik @Xik , Q containneither temporal information, disjunctions, i.e., element language F .Proposition 7.1 (Equivalence disjunctive form) Every concept C reducedequivalent disjunctive form (df C ), exhaustively applying set rewrite rulesFigure 13 addition rules introduced Figure 11.possible compute completed disjunctive normal form (cdnf C ). disjunct normal form interesting properties, crucial prooftheorem 7.4 concept subsumption: temporal constraints always explicit, i.e.,two intervals related basic temporal relation; disjunction, eitherimplicit explicit, neither conceptual part temporal part, i.e.,TL-F concept; information node independent informationnodes contain time-invariant (i.e., redundant) nodes.Definition 7.2 (Completed disjunctive normal form) Given concept disjunctiveform, completed disjunctive normal form obtained applying following rewriterules disjunct:(Temporal completion) rules definition 6.5 applied disjunctexclusion covering step, replaced t-introduction step.disjunct unsatisfiable { i.e., temporal constraint network associatedinconsistent { eliminate it.(Essential form) rules definition 6.8 applied disjunct.(t introduction) Reduce concepts containing basic temporal relationships:3(X ) (X1 (R,S ) X2 ) Tc.C ! 3(X )(X1 R X2 )Tc.C 3(X )(X1 X2 )Tc.CProposition 7.3 (Equivalence CDNF) Every concept expression reducedequivalent completed disjunctive normal concept.Subsumptiontheorem 7.4 reduces subsumption CDNF concepts subsumption disjunction-free concepts, results theorem 6.21 applied. followingtheorem gives terminating, sound, complete subsumption calculus TLU -FU .Theorem 7.4 (TLU -FU concept subsumption) Let C = C1 Cm = D1Dn TLU -FU concepts CDNF. Then, C v 8i9j . Ci v Dj .Proof. Since easy show C1 : : : Cn v iff 8i.Ci v need proverestricted thesis: Ci v D1 Dn iff Ci v D1 _ : : : _ Ci v Dn . Every concept expressionCDNF corresponds existential quantified formula two free variables. Moreover,matrices formul conjunctions positive predicates. Let us denoteformula corresponding concept C C 0 (t; x). Now, restricted thesis holds ifftrue F [ fCi000 (a; b)g j= D1000 (a; b) _ D2000 (a; b). Now, let HB minimal Herbrand modelF [fCi000 (a; b)g. Then, F [fCi000 (a; b)g j= D1000 (a; b) _ D2000 (a; b) iff HB j= D1000 (a; b) _ D2000 (a; b).Since talking single model, D1000 (a; b) _ D2000 (a; b) valid HB eitherD1000 (a; b) D2000 (a; b) valid HB . proves theorem.525. proof theorem comes idea Werner Nutt.490fiA Temporal Description Logic Reasoning Actions Plansconsequence theorems 6.25, 7.4 following complexity result holds.Theorem 7.5 (TLU -FU subsumption complexity) Concept subsumption TLU -FUconcept expressions normal form NP-complete problem.7.2 Propositionally Complete Language: TL-ALCFTL-ALCF uses propositionally complete Description Logic ALCF (Hollunder & Nutt,1990) non-temporal concepts changing syntax rules TL-F followingway:E; F ! FU j ? j :E j p " q j p "j 8P .E j 9P .E (ALCF )interpretation functions extended take account roles:P T<?PtI = P^t j 8a; b. ha; bi 2 P^t $ ht; a; bi 2 Pseen Section 2, ALCF adds F full negation { thus introducing disagreement (p " q)undefinedness (p ") features, role quantification (8P .E; 9P .E ).example expressive power gained, let us refine description worldstates involved Stack action (see Section 5.2). Suppose block describedsaying LATERAL-SIDEs (role) BOTTOM- TOP-SIDEs (features). Then,property clear could represented follows::Clear-Block = Block u 8LATERAL-SIDE.Clear u TOP-SIDE : HAS-ABOVE "says that, order clear, LATERAL-SIDE clear nothingTOP-SIDE. Now, situation block involved Stack actiontop another one reformulated following concept expression:(?OBJECT1 TOP-SIDE HAS-ABOVE # ?OBJECT2)Furthermore, given definition Clear-Blocks, derived that:(?OBJECT1 TOP-SIDE HAS-ABOVE # ?OBJECT2) v (?OBJECT1 : :Clear-Block)i.e., object, another object top it, clear object.TL-ALCF possible describe states form incomplete knowledgeexploiting disjunction among non-temporal concepts. example, let us sayagent action either human machine: ?AGENT:(Person Robot).7.2.1 Calculus TL-ALCFSection presents calculus deciding subsumption temporal conceptsDescription Logic TL-ALCF . Again, calculus based idea separatinginference temporal part inference Description Logic part (\vALCF "),adopting standard procedures developed two areas.Normal Formmore, subsumption calculus based normalization procedure. firststep reduces concept expression equivalent existential form { 3(X ) Tc. (Q0 uQ1 @X1 u : : : u Qn@Xn) { applying rewrite rules Figure 11 augmented491fiArtale & Franconi:>:?:(C u D):(C D): :C:8P .C:9P .C:f : C:p : C:p # q:p " q(f p) "!!!!!!!!!!!!?>:C :D:C u :DC9P .:C8P .:Cf " f : :Cf " f : (:q : C ) p = f qp"tq"tp"qp"tq"tp#qf " f : (p ")Note: f denote atomic feature atomic parametric feature.Figure 14: Rewrite rules transform arbitrary concept simple concept.rule: p : (q1 " q2 ) ! p q1 " p q2 . Q non-temporal concept, i.e., elementlanguage ALCF .following normalization step need verify concept satisfiabilitynon-temporal concept expressions. ALCF concept E unsatisfiable iff E vALCF ?.Algorithms checking satisfiability subsumption concepts terms ALCF wellknown (Hollunder & Nutt, 1990).Definition 7.6 (Completed existential form) temporal completion conceptexistential form { Completed Existential Form, CEF { obtained sequentiallyapplying following steps:(closure, collapsing, covering) reported definition 6.5. covering,translate concept expression Qy applying rewrite rule: Qy ! Qy ui=1:::n (Qi1: : : Qim ).(parameter introduction) requires two phases.1. Q translated disjunctive normal form. First simple form6 obtained transforming Q following rewrite rules reported Figure 14.disjunctive normal form obtained rewriting Q {simple form { using following rules, correspond first orderrules computing disjunctive normal form logical formul:(C1 C2 ) u ! (C1 u D) (C2 u D)p : (C D) ! p : C p :6. simple concept contains complements form :A, primitive concept,sub-concepts form p ", p atomic (parametric) feature { corresponds firstorder logical formula negation normal form.492fiA Temporal Description Logic Reasoning Actions Plans?g1 : : : ?gn [ f [ p]] : C?g1 : : : ?gn [ f [ p]] # g [ q]?g1 : : : ?gn # ?f1 : : : ?fm?g1 : : : ?gn g [ p] # ?f1 : : : ?fm [ f [ q]]!!!!?g1 : : : ?gn " ?f1 : : : ?fm?g "?g1 : : : ?gn : (?gn+1 ")?g1 : : : ?gn [ f [ p]] " g [ q]?g1 : : : ?gn g [ p] " ?f1 : : : ?fm [ f [ q]]!!!!!?g1 : : : ?gn : >.?g1 : : : ?gn : >.?g1 : : : ?gn # ?f1 : : : ?fm .?g1 : : : ?gn : > u?f1 : : : ?fm : >.?g1 : : : ?gn " ?f1 : : : ?fm .?g " .?g1 : : : ?gn : (?gn+1 ").?g1 : : : ?gn : >.?g1 : : : ?gn : > u?f1 : : : ?fm : >.Figure 15: Rewrite rules compute parameter introduction step.2. Qj = Ej1 : : : Ejn , compute time-invariant part (let us indicateparticular concept expression Q~ j ). gives Q~ j computingdisjunct Eji Qj time-invariant information E~ji . Eji vALCF ?,E~ji = ?. Otherwise, rewrite every conjunct Eji showed Figure 15,conjuncts considered rewrote >. Now, unlessE~ji = >, Q~ j = E~j1 : : : E~jn must conjunctively added nodes.Proposition 7.7 (Equivalence CEF) Every concept existential form reduced equivalent completed existential concept.TL-F case, covering parameter introduction computed independently. consequence normalization phase, proposition 6.7 (nodeindependence) true TL-ALCF concepts CEF. Observe that, obtain CEFconcept, steps normalization procedure require computation transitiveclosure temporal relations { NP-complete problem (van Beek & Cohen, 1990) { computation ALCF subsumption { PSPACE-completeproblem (Hollunder & Nutt, 1990).presentation last normalization phase, eliminate redundantnodes, possible check whether concept expression satisfiable.Proposition 7.8 (Concept satisfiability) TL-ALCF concept CEF, hX; Tc; Q@X i,satisfiable (with proviso temporal constraints satisfiable)non-temporal concepts labeling node X satisfiable. Checking satisfiabilityTL-ALCF concept CEF PSPACE-complete problem.Proof. direct consequence node independence established proposition 6.7,true also TL-ALCF concepts CEF.2normalization procedure goes rewriting unsatisfiable concepts ?computing essential graph form satisfiable concepts. last phase493fiArtale & Franconicomplex temporal languages considered paper essentiallyALCF express > concept means concept expression (e.g., > = :A).consideration follows TL-ALCF redundant node derivedcomplex concept expression (e.g., t:A, ?g : ?g : :A redundant nodes).key idea time-invariant information present ] node thanksCEF. Thus needed extract information ] node computingdisjunctive normal form Q] , applying ~ translation, testing whetherQ~ ] vALCF Qi, given node xi .Definition 7.9 (Essential graph) subgraph CEF TL-ALCF conceptualtemporal constraint network = hX; Tc; Q@X obtained deleting nodes xiQ~ ] vALCF Qi { exception ] node { called essential graph : (ess ).Proposition 7.10 (Equivalence essential graph) Every CEF concept reducedequivalent essential graph form (and, obviously, every concept reducedequivalent essential graph form).Subsumptionoverall normalization procedure reduces subsumption problem TL-ALCFsubsumption ALCF concepts.Theorem 7.11 (TL-ALCF concept subsumption) concept C1 subsumes conceptC2 exists s-mapping essential graph C1 essentialgraph C2 .theorem gives sound complete algorithm computing subsumption TL-ALCF concepts (the proof one theorem 6.21). subsumption problem PSPACE-hard, since satisfiability subsumption ALCFconcepts proven PSPACE-complete (Hollunder & Nutt, 1990).8. Extending Expressivity Statesfollowing suggests extend basic language cope important issuesrepresentation states. (i) Homogeneity allows us consider properties world {peculiar states { remain true subinterval interval hold.(ii) Persistence guarantees state holding effect action continues holdunless evidence falsity time. approach frame problempresented, showing possible solution one (in)famous problems AIliterature. following subsections shall interested semantically characterizingactions states computational properties. extensions proposedtemporal languages full edged Description Logic time action.8.1 Homogeneitytemporal literature homogeneity characterizes temporal behavior world states:state holds interval time t, also holds subintervals t. Thus,494fiA Temporal Description Logic Reasoning Actions Plans]-Simple-Stack(BLOCK)rOnTable(BLOCK)-rOnBlock(BLOCK)x-Figure 16: Temporal dependencies definition Simple-Stack action.block table whole day, one conclude also tablemorning. hand, actions necessarily homogeneous. linguisticliterature difference made activity performance verbs. distinctioncomes fact activity verbs sub-events denotedverb, whereas performance verbs not. Generally, activity verbs represent ongoing events,example eat run, described homogeneous predicates; whereasperformance verbs represent events well defined granularity time, preparespaghetti. Performance verbs example anti-homogeneous events: occurinterval time t, occur subinterval t, would yetcompleted.language extended introducing Homogeneity operator:C; ! rC(homogeneous concept)semantics homogeneous concepts easily given terms semanticstemporal universal quantifier: rC 2x (x (=; s; d; f ) ]). C @x. means rChomogeneous concept holds interval remains truesubinterval. particular, 2x universally qualifies temporal variable x,temporal constraint (x (=; s; d; f ) ]) imposes x generic interval contained ].Moreover, always true rC v C , i.e., rC specific concept C .Let us consider example accurate definition Basic-Stack action(see Section 4.1.1)::Simple-Stack = 3(x )(x ])(] ). ((?BLOCK : rOnTable)@x u(?BLOCK : rOnBlock)@y)Figure 16 shows temporal dependencies intervals Simple-Stackholds. difference Basic-Stack action use homogeneity operator.fact, since predicates OnTable OnBlock denote states, homogeneityexplicitly declared. assertion Simple-Stack(i; a) says individual actiontype Simple-Stack occurred interval i. Moreover, assertion impliesrelated ?BLOCK, say b, type OnTable interval j { meeting {intervals included j , type OnBlock another interval l { met {intervals included l:Simple-Stack(i; a) =) 9b. ?BLOCK(a; b) ^9 j; l. m(j; i) ^ m(i; l) ^8 ^; ^l. (=; s; d; f )(^; j ) ^ (=; s; d; f )(^l; l) !OnTable(^; b) ^ OnBlock(^l; b):495fiArtale & Franconi]-rInstant-Stack(BLOCK)rOnTable(BLOCK)zOnBlock(BLOCK)-Figure 17: Temporal dependencies definition Instant-Stack action.Note Simple-Stack action subsumes Instant-Stack action, whose temporaldependencies depicted Figure 17::Instant-Stack = 3(z )(] f z )(] ). ((?BLOCK : rOnTable)@z u(?BLOCK : rOnBlock)@y)Subsumption holds class intervals { obtained homogeneity stateOnTable defined Simple-Stack action { including x subintervalssubset class intervals block known table, accordingdefinition Instant-Stack { latter class includes subintervals z .Instant-Stack action defined without r operator, wouldspecialize Simple-Stack action. fact, according weaker definitionInstant-Stack, specifying object table z implyobject table subintervals z ; particular, possible deduceobject table x subintervals, specified definitionSimple-Stack action. Moreover, weak Instant-Stack action type would specializeweak Simple-Stack action type { i.e., Basic-Stack { too. Thus, homogeneity helpsus define states actions accurate way, important inferencescaptured.seen above, definition homogeneity makes use universal temporal quantification. Remember subsumption propositionally complete Description Logicexistential universal temporal quantification undecidable stillopen problem becomes decidable absence negation (Bettini, 1993). homogeneity operator restricted form universal quantification. even restrictedform interests us here, concept C rC contain temporaloperator (called simple homogeneous concept). expressiveness resulting logicenough, example, correctly represent homogeneous nature states. (Artale,Bettini, & Franconi, 1994) algorithm compute subsumption TL-F augmentedhomogeneity operator proposed. Even formal proof still available, goodarguments discussed conjecture completeness. would also prove decidabilitylogic corresponding modal logics.8.2 PersistenceSection shows framework successfully extended general waycope inertial properties. basic temporal language, property holding, say,post-condition action certain interval, guaranteed hold anymoreincluded subsequent intervals. reason propose extended496fiA Temporal Description Logic Reasoning Actions Plans]- xLoad(GUN)Loaded(GUN)]-:-Fire(GUN,TARGET):= Loaded(GUN)xLoaded(GUN)zDead(TARGET)Figure 18: Definitions actions Load Fire.formalism, states represented homogeneous persistent concepts.motivation introducing possibility representing persistent propertieslanguage, Section considers solve frame problem, particularfamous example Yale Turkey Shooting Scenario (Sandewall, 1994; Allen & Ferguson,1994), formerly known Yale Shooting Problem.inertia operator \= " introduced here. Intuitively, = C currently truetrue preceding interval { say { evidence falsity Cinterval current one i. Thus, property individual typeC persists time, unless contradiction arises.formalization inertia operator makes use epistemic operator K (Donini,Lenzerini, Nardi, Schaerf, & Nutt, 1992), KC denotes set individuals knowninstances concept C 7 .Definition 8.1 (Inertia) = C (j; a) iff9i. start(i) start(j ) ^ C (i; a) ^8h. start(h) end(i) ^ end(h) end(j ) ! :K:C (h; a).start end two functions giving respectively starting ending pointinterval { conditions endpoints simpler readable equivalentsinterval relations; :K:C (h; a) means known type Cinterval h. Furthermore, following relation holds: 8a; j . C (j; a) ! = C (j; a); i.e., = Csubsumes C . definition captured temporal language equippedepistemic operator { K { homogeneity operator { r:= C C 3(x y) (x (b; m; o; fi; di) ])(x (s; si) y)(y fi ]).(C @x u r(:K:C )@y)Two action types defined, Load { parameter ?GUN { Fire {parameters ?GUN ?TARGET (Figure 18):=: 3x (] x). ?GUN : Loaded@x:Fire = 3(x z ) (] f x)(] )(] z ).(?GUN : := Loaded@x ?TARGET : Dead@y) u ?GUN : :Loaded@zaction Load describes loading gun. action Fire describes firing guntarget: effects firing gun becomes unloaded either target deadLoad7. epistemic interpretationpair (I ,W ) interpretation W set interpretations (KC )I;W = J 2W (C J ;W ).497fiArtale & Franconi- i1gun)Load(fred :gun- j1jgun -j0j2gun)Loaded(Fire(= Loaded(,))gun)Loaded(fred)Dead(Figure 19: Actions instances Yale Shooting Problem.gun loaded { possibly inertia { firing. Yale Shooting Problemconsiders situation described following set assertions (ABox):Load(i; load-action ); ?GUN(load-action ; gun ); a(j; i); Fire(j; fire-action );?GUN(fire-action ; gun ); ?TARGET(fire-action ; fred ):i.e., beginning gun loaded; then, action firing gun targetfred performed. According semantics language, logical consequencesknowledge base are:j= 9i1 . m(i; i1 ) ^ Loaded(i1 ; gun )j= 9j1 . m(j; j1 ) ^ :Loaded(j1 ; gun )j= 9j0 . f (j; j0 ) ^ = Loaded(j0 ; gun )j= 9j2 . m(j; j2 ) ^ Dead(j1 ; fred ):i.e., (see also Figure 19) (i) Load action makes gun loaded; (ii) Fire actionmakes gun unloaded end; (iii) since evidence contrary, gunstill loaded j0 inertia; (iv) since gun unloaded j0 , target fred mustdead.Since inertia operator useful describe behavior properties,characterized homogeneous concepts, simple way representing persistencecontext homogeneous concepts proposed.Proposition 8.2 Let P property { i.e., P =: rP 0 homogeneous concept {knowledge base 6j= P (j; a). = P (j; a) true { i.e., j= = P (j; a) {two intervals i; k exist that: j= (start(i) start(j ) ^ P (i; a))[ fs(i; k); f (j; k); P (k; a)g satisfiable.Proof. entailment test verifies first part definition inertia,satisfiability test verifies that, interval system knowsindividual belongs P { { interval P (a) deduced inertia { j{ exist interval h system knows P (a) false. Indeed,interval h would related interval k relation since supposedP homogeneous, knowledge base :P (h; a) ^ P (k; a) ^ in(h; k) wouldinconsistent.2deduction P (j; a) ! = P (j; a) obtained particular case statedproposition.498fiA Temporal Description Logic Reasoning Actions Plans9. Related Worksoriginal formalism devised Allen (1991) forms, basis, foundationwork. predicate logic interval temporal networks introduced,properties asserted hold intervals, events said occur intervals. approach general, suffers problems related semanticformalization predicates hold occur (Blackburn, 1992). Moreover, computational properties formalism analyzed. study latter aspect was,contrary, main concern.Description Logic literature, approaches representing reasoningtime action proposed. beginning approaches based explicit notiontime surveyed, Strips-like approaches considered. Section endsillustrating approaches devoted temporally extend situation calculus.Bettini (1997) suggests variable-free extension existential universaltemporal quantification. gives undecidability results class temporal languages{ resorting undecidability results Halpern Shoham's temporal logic { investigates approximated reasoning algorithms. Basically, extends ALCN descriptionlogics existential universal temporal quantifiers, but, unlike formalism,explicit interval variables allowed. temporal quantification makes use settemporal constraints two implicit intervals: reference interval current one.framework, concept Mortal defined as::Mortal = LivingBeing u 3(after). (not LivingBeing)Schild (1993) proposes embedding point-based tense operators propositionallyclosed Description Logic. proved satisfiability ALCT , point-based temporalextension ALC , interpreted linear, unbounded discrete temporal structure,PSPACE-complete. ideas applied (Fischer, 1992; Neuwirth, 1993) Backsystem. Note point-based temporal ontology unable express varietyrelations intervals.Baader Laux (1995) integrate modal operators time belief terminologicalsystem looking adequate semantics resulting combined language. majorpoint paper possibility using modal operators inside conceptexpressions also front concept definitions assertions. following exampleshows notion Happy-father, different modalities interact:[BEL-JOHN](Happy-father =: 9MARRIED-TO.(Woman u [BEL-JOHN]Pretty) uhfuturei8CHILD.Graduate)case, John's belief Happy-father someone married woman believedpretty John, whose children graduates sometime future.semantics Kripke-style: modal operator interpreted accessibility relationset possible worlds, domain objects split (possible) differentdomain objects, one depending given world. latter:choice captures case of:different definitions concept { [BEL-JOHN](A = B ) [BEL-PETER](A =C ) { since two formul evaluated different worlds. main restrictionmodal operators satisfy specific axioms belief time.hand, language provided complete terminating algorithm499fiArtale & Franconiserve, authors propose, \...as basis satisfiability algorithms complexlanguages".Description Logics intended represent reasoning actions followingStrips tradition. Heinsohn, Kudenko, Nebel Profitlich (1992) describe Ratsystem, used Wip project German Research Center AI (DFKI). useDescription Logic represent world states atomic actions. second formalismadded compose actions plans reason simple temporal relationships.explicit temporal constraints expressed language. Rat actions definedchange world state cause, instantaneous Strips-likesystems, plans linear sequences actions. important service offeredRat simulated execution part plan, checking given plan feasibleand, so, computing global pre- post-conditions. feasibility test similarusual consistency check concept description: temporally project preand post-conditions individual actions composing plan, respectively backwardforward. lead inconsistent initial, final intermediate state, planfeasible global pre- post-conditions determined side effect.Devanbu Litman (1991, 1996) describe Clasp system, plan-based knowledgerepresentation system extending notion subsumption classification plans,build ecient information retrieval system. particular, Clasp used represent plan-like knowledge domain telephone switching software extendinguse software information system lassie (Devanbu, Brachman, Selfridge, & Ballard,1991). Clasp designed representing reasoning large collections plandescriptions, using language able express temporal, conditional looping operators.Following Strips tradition, plan descriptions built starting states actions,represented using Classic (Brachman, McGuiness, Patel-Schneider, Resnick,& Borgida, 1991) terminological language. Since plans constructing operators correspondregular expressions, algorithms subsumption integrate work automata theorywork concept subsumption. temporal expressive power system capturesequences, disjunction iterations actions action instantaneous. Furthermore, state descriptions restricted simple conjunction primitive Classicconcepts. Like Rat, Clasp checks instantiated plan well formed, i.e., specifiedsequence individual actions able transform given initial state goal stateusing Strips rules.end reporting efforts made researchers situation calculusfield overcome strict sequential perspective inherent framework. Recent worksenrich original framework represent properties actions different truthvalues depending situation also time. work Reiter (1996),moving results showed Pinto (1994) Ternovskaia (1994), providesnew axiomatization situation calculus able capture concurrent actions, propertiescontinuous changes, natural exogenous actions { nature's control.notion uent { models properties world { situation maintained.action instantaneous responsible changing actual situation subsequentone. Concurrent actions simply sets instantaneous actions must coherent,i.e., action's collection must non empty actions occur time.Pinto (1994) Reiter (1996) introduce time dimension essentially capture500fiA Temporal Description Logic Reasoning Actions Plansoccurrence natural actions, due known laws physics { i.e., ball bouncingtimes prescribed motion's equations { dynamic behavior physical objects{ i.e., position falling ball. realized introducing time argumentaction function, properties world divided two different classes:classical uents hold hold throughout situations, continuous parametersmay change value time spanned given situation.devoted situation calculus time interval ontology workTernovskaia (1994). order describe processes { i.e., actions extended time {introduces durationless actions initiate terminate processes. matterfact, processes become uents, instantaneous events { Start(Fluent) Finish(Fluent){ respectively make true false corresponding uent, persistenceassumptions make uent true interval. example, blocks worldpicking-up process treated uent Start(picking-up(x)) Finish(pickingup(x)) instantaneous actions enable falsify picking-up uent.10. Conclusionsmain objective paper design class logical formalisms uniformly representing time, actions plans. According framework, actionduration time, parameters, ties temporal evolutionworld, possibly associated time actions. model-theoreticsemantics including temporal object domain developed, givingmeaning language formul well founded definition various reasoningservices, allowing us prove soundness completeness corresponding algorithms.peculiar computational properties logic make effective representationreasoning tool plan recognition purposes. action taxonomy based subsumptionset up, play role plan library plan retrieval tasks.paper contributes exploration decidable realm interval-based temporalextensions Description Logics. presented complete procedures subsumption reasoning TL-F , TLU -FU TL-ALCF . addition, subsumption problemTL-F proven NP-complete problem. subsumption procedures basedinterpretation preserving transformation operates separation temporal non-temporal parts formalism. Thus, calculus adopt distinctstandard procedures developed Description Logics community temporalconstraints community. obtain decidable languages key idea restrict temporal expressivity eliminating universal quantification temporal variables.propositionally complete Description Logic existential universal temporalquantification undecidable, still open problem becomes decidable absencenegation. introduction homogeneity operator investigation impactrestricted form temporal universal quantification language TL-F begun.Several extensions proposed basic temporal language. possibilityspecify homogeneous predicates temporal behavior world states describednatural way, introduction non-monotonic inertial operator givesrise forms temporal prediction. Another extension { considered paper{ deals possibility relating action elementary actions, decomposing501fiArtale & Franconipartially ordered steps (Artale & Franconi, 1995). kind reasoning foundhierarchical planners like Nonlin (Tate, 1977), Sipe (Wilkins, 1988) Forbin (Dean,Firby, & Miller, 1990).Acknowledgementspaper substantial extension revision (Artale & Franconi, 1994). workpartially supported Italian National Research Council (CNR) project \OntologicLinguistic Tools Conceptual Modeling", \Foundations Data WarehouseQuality" (DWQ ) European ESPRIT IV Long Term Research (LTR) Project 22469.first author wishes acknowledge also LADSEB-CNR Padova UniversityFirenze supported part work. work carried paperdone second author working ITC-irst, Trento. work owes lotcolleagues Claudio Bettini Alfonso Gerevini, introduced us many yearsago temporal maze. Special thanks Achille C. Varzi, taking time reviewtechnical details paper insightful comments philosophy events,Fausto Giunchiglia, useful discussions feedback. Thanks Paolo Bresciani,Nicola Guarino, Eugenia Ternovskaia Andrea Schaerf enlightening commentsearlier drafts paper. Werner Nutt Luciano Serafini helped us deeperinsight logic. would also like thank Carsten Lutz helpful discussionstemporal representations. Many anonymous referees checked manyerrors previous versions paper. errors paper are, course, own.ReferencesAllen, J. F. (1991). Temporal reasoning planning. Allen, J. F., Kautz, H. A., Pelavin,R. N., & Tenenberg, J. D. (Eds.), Reasoning Plans, chap. 1, pp. 2{68. MorganKaufmann.Allen, J. F., & Ferguson, G. (1994). Actions events interval temporal logic. JournalLogic Computation, 4 (5). Special Issue Actions Processes.Artale, A., Bettini, C., & Franconi, E. (1994). Homogeneous concepts temporal description logic. F.Baader, M.Lenzerini, W.Nutt, & P.F.Patel-Schneider (Eds.),Workshop Notes Int. Workshop Description Logics, DL-94, pp. 36{41 Bonn,Germany. DFKI, Saarbrucken. Tech. Rep. DFKI-D-94-10.Artale, A., & Franconi, E. (1994). computational account description logictime action. J.Doyle, E.Sandewall, & P.Torasso (Eds.), Proc. 4 thInternational Conference Principles Knowledge Representation Reasoning,pp. 3{14 Bonn, Germany. Morgan Kaufmann.Artale, A., & Franconi, E. (1995). Hierarchical plans description logic timeaction. A.Borgida, M.Lenzerini, D.Nardi, & B.Nebel (Eds.), Workshop NotesInt. Workshop Description Logics. DL-95, pp. 1{5 Roma, Italy. Tech. Rep. 07.95.Also Workshop Notes IJCAI-95 Workshop \The Next Generation502fiA Temporal Description Logic Reasoning Actions PlansPlan Recognition Systems: Challanges Insight Related Areas AI",Montreal, 1995.Baader, F., Burckert, H.-J., Heinsohn, J., Hollunder, B., Muller, J., Nebel, B., Nutt, W.,& Profitlich, H.-J. (1990). Terminological knowledge representation: proposalterminological logic. Technical memo TM-90-04, DFKI, Saarbrucken, Germany.Baader, F., & Laux, A. (1995). Terminological logics modal operator. Proc.13 th IJCAI, pp. 808{814 Montreal, Canada.Bettini, C. (1993). Temporal Extensions Terminological Languages. Ph.D. thesis, Computer Science Department, University Milan, Italy.Bettini, C. (1997). Time dependent concepts: Representation reasoning using temporaldescription logics. Data & Knowledge Engineering, 22 (1), 1{38.Blackburn, P. (1992). Fine grained theories time. Working Papers 4th Intl.Workshop Semantics Time, Space, Movement, Spatio-Temporal Reasoning,pp. 299{320.Brachman, R. J., McGuiness, D. L., Patel-Schneider, P. F., Resnick, L. A., & Borgida, A.(1991). Living classic: use kl-one-like language. Sowa,J. (Ed.), Principles Semantic Networks. Morgan Kaufmann.Buchheit, M., Donini, F. M., & Schaerf, A. (1993). Decidable reasoning terminologicalknowledge representation systems. Information Systems, 1, 109{138.Calvanese, D., Lenzerini, M., & Nardi, D. (1994). unified framework class-basedrepresentation formalisms. Proc. 4 th International Conference PrinciplesKnowledge Representation Reasoning Bonn, Germany.Cohen, W., Borgida, A., & Hirsh, H. (1992). Computing least common subsumersdescription logics.. pp. 754{760 San Jose, CA.De Giacomo, G., & Lenzerini, M. (1996). Tbox abox reasoning expressive descriptionlogics. Proc. 5 th International Conference Principles KnowledgeRepresentation Reasoning, pp. 316{327 Boston, MA. Morgan Kaufmann.De Giacomo, G., & Lenzerini, M. (1995). What's aggregate: Foundations description logics tuples sets. Proc. 13 th IJCAI Montreal, Canada.Dean, T., Firby, J., & Miller, D. (1990). Hierarchical planning involving deadlines, traveltime resources. Computational Intelligence, 6 (1).Devanbu, P. T., & Litman, D. J. (1991). Plan-based terminological reasoning. Proc.2 nd International Conference Principles Knowledge RepresentationReasoning, pp. 128{138 Cambridge, MA.Devanbu, P. T., & Litman, D. J. (1996). Taxonomic plan reasoning. Artificial Intelligence,84, 1{35.503fiArtale & FranconiDevanbu, P., Brachman, R., Selfridge, P., & Ballard, B. (1991). LASSIE { knowledgebased software information system. Communication ACM, 34 (5).Donini, F. M., Hollunder, B., Lenzerini, M., Spaccamela, A. M., Nardi, D., & Nutt, W.(1992). complexity existential quantification concept languages. ArtificialIntelligence, 53, 309{327.Donini, F. M., Lenzerini, M., Nardi, D., & Nutt, W. (1995). complexity conceptlanguages. Tech. rep. RR-95-07, DFKI, Germany. preliminary version appearsProc. 2nd International Conference Principles Knowledge RepresentationReasoning (KR-91).Donini, F. M., Lenzerini, M., Nardi, D., & Schaerf, A. (1994). Deduction conceptlanguages: subsumption instance checking. Journal Logic Computation,4 (4), 423{452.Donini, F. M., Lenzerini, M., Nardi, D., Schaerf, A., & Nutt, W. (1992). Adding epistemicoperators concept languages. Proc. 3 rd International ConferencePrinciples Knowledge Representation Reasoning, pp. 342{353 Cambridge, MA.Fikes, R. E., & Nilsson, N. (1971). STRIPS: new approach application theoremproving problem solving. Artificial Intelligence, 2, 198{208.Fischer, M. (1992). integration temporal operators terminological representation system. Kit-report 99, Technische Universtitat Berlin, Germany.Gerevini, A., & Schubert, L. (1994). point-based temporal disjointness. ArtificialIntelligence, 70, 347{361.Halpern, J. Y., & Moses, Y. (1985). guide modal logic knowledge belief:Preliminary draft. Proc. 9 th IJCAI, pp. 480{490 Los Angeles, CA.Halpern, J. Y., & Shoham, Y. (1991). propositional modal logic time intervals. JournalACM, 38 (4), 935{962.Heinsohn, J., Kudenko, D., Nebel, B., & Profitlich, H. (1992). RAT: representationactions using terminological logics. Tech. rep., DFKI, Saarbrucken, Germany.Hollunder, B., & Nutt, W. (1990). Subsumption algorithms concept languages. Tech.rep. RR-90-04, DFKI, Germany.Kautz, H. A. (1991). formal theory plan recognition implementation. Allen,J. F., Kautz, H. A., Pelavin, R. N., & Tenenberg, J. D. (Eds.), Reasoning Plans,chap. 2, pp. 69{126. Morgan Kaufmann.Lifschitz, V. (1987). semantics strips. 1986 Workshop ReasoningActions Plans, pp. 1{10. Morgan Kaufman.McCarthy, J., & Hayes, P. J. (1969). philosophical problems standpointArtificial Intelligence. Meltzer, B., & Michie, D. (Eds.), Machine Intelligence,Vol. 4, pp. 463{502 Edinburgh, UK. Edinburgh University Press.504fiA Temporal Description Logic Reasoning Actions PlansNebel, B. (1990). Terminological reasoning inherently intractable. Artificial Intelligence,43, 235{249.Nebel, B. (1991). Terminological cycles: Semantics computational properties. Sowa,J. F. (Ed.), Principles Semantic Networks, chap. 11, pp. 331{362. Morgan Kaufmann.Neuwirth, A. (1993). Inferences temporal object descriptions terminological representation system: Design implementation. Kit-report 107, Technische UniverstitatBerlin, Germany.Pinto, J. A. (1994). Temporal Reasoning Situation Calculus. Ph.D. thesis, DepartmentComputer Science, University Toronto.Reiter, R. (1996). Natural actions, concurrency continuous time situation calculs.Proc. 5 th International Conference Principles Knowledge Representation Reasoning Boston, MA.Renz, J., & Nebel, B. (1997). complexity qualitative spatial reasoning: maximaltractable fragment region connection calculus. Proc. 14 th IJCAI, pp.522{527 Nagoya, Japan.Sandewall, E. (1994). Features Fluents. Representation Knowledge Dynamical Systems, Vol. I. Oxford University Press.Sandewall, E., & Shoham, Y. (1994). Non-monotonic temporal reasoning. Gabbay, D.(Ed.), Handbook Artificial Intelligence Logic programming. Oxford UniversityPress.Schaerf, A. (1994). Reasoning individuals concept languages. Data & KnowledgeEngineering, 13 (2), 141{176.Schild, K. D. (1991). correspondence theory terminological logics: Preliminary report.Proc. 12 th IJCAI, pp. 466{471 Sidney, Australia.Schild, K. D. (1993). Combining terminological logics tense logic. Proceedings6th Portuguese Conference Artificial Intelligence, EPIA'93.Schmidt-Schau, M., & Smolka, G. (1991). Attributive concept descriptions complements. Artificial Intelligence, 48 (1), 1{26.Schmiedel, A. (1990). temporal terminological logic. Proc. AAAI-90, pp. 640{645Boston, MA.Smolka, G. (1992). Feature constraint logics unification grammar. Journal LogicProgramming, 12, 51{87.Tate, A. (1977). Generating project networks. Proc. 5 th IJCAI, pp. 888{893Cambridge, MA.505fiArtale & FranconiTernovskaia, E. (1994). Interval situation calculus. Workshop Notes ECAI-94Workshop \Logic Change", pp. 153{164 Amsterdam.van Beek, P., & Cohen, R. (1990). Exact approximate reasoning temporalrelations. Computational Intelligence, 6, 132{144.van Beek, P., & Manchak, D. W. (1996). design experimental analysis algorithmstemporal reasoning. Journal Artificial Intelligence Research, 4, 1{18.van Dalen, D. (1994). Logic Structure. Springer-Verlag.Venema, Y. (1990). Expressiveness completeness interval tense logic. Notre DameJournal Formal Logic, 31 (4), 529{547.Weida, R. (1996). Closed Terminologies Temporal reasoning Descriptions PlanRecognition. Ph.D. thesis, Department Computer Science, Columbia University,New York, NY.Weida, R., & Litman, D. (1992). Terminological reasoning constraint networksapplication plan recognition. Proc. 3 rd International ConferencePrinciples Knowledge Representation Reasoning, pp. 282{293 Cambridge, MA.Weida, R., & Litman, D. (1994). Subsumption recognition heterogeneous constraintnetworks. Proceedings CAIA-94.Wilkins, D. (1988). Practical planning. Morgan Kaufmann, San Mateo CA.506fifffi! #"$ % '&)(+*', ((-/.10(/24365!, 789:;< =)(/>(/?9@BA:%&=C,,4>(-DFEHGJILKNM/OQPSRHGCTUWVFXG<YIWX/Z\[]KNM^NE`_acbdbde1fNg#hjilkme$nhpoqlrlr<s1t1u$vwjxzy{s|Bv}~C6r+s#xzff}4B'B4\jl+4Bcl/\) <4c BBp$4Bjgefkme1fNg#hjiNg#e$n'f/r<sw~]r+s1wxu$1ws1$xr<]j')l//`j'cNBj'BBjB\llc!/1B!/S9hpoohhjBhpohv}}v$xzv!v}vj~C6r<s$#xzff}4B'B414#l$]l//z4j/14Bj)Nj4949)9 `44$9B!S44 )/B 4cCC9494 {B4{ C!4B 4/! 94 4 4<4 c4! 99 B B ]c9 ff4C!49Q+94!)c S] <l )94 /] !)#H'4c9B!9vs1}vw }v ff9cc 949 !Cc99 v1w 1}v# !49494\9/!44 Q)+ 9vs1}ff ff 649 Q49H ] !B44 !]9 S94 S49Bc9]9B )SB 4J {4 694! 99 ` ]C! 4]9+! 9Q4 99) 494 49 CC ff94C!4Bj ! #4#CB 6Q !/ <4 +'4/!44fffi%fffifi*)+',"!('+&fffi$#$'-"./ 0 21435j2671 08:9<;>=*? @A9B=DCE?FDF<GHF<I=DJ,KLDCH;MNGHO&K PQMR?SAKJTGHF@A;JU;OV@WPXKJYGHF<Z<[DOV@VJ,GE?C\JUKL]K@AGE^O_Y`aL*?OAGH^>b2;J,OAGEK FBK P@A9<GHOQ=<J,KLDCH;Mc^K F<OAGHOV@AOK PedDF<Z<GHFDI&?fOA;g[<;F<^;:K P\MhK@AGEK F<OiPXKJj?&JUKL]K@PEJ,K Mk?TOV@,? J,@^K FldDI [<JU? @AGHK F@AKY?mI GHb2;FnI K2?Cl^K F<dDI [lJU? @AGHK Fnom9DGHCH;i?ffb2K GHZ<GHF<IW^K CHCHGEOAGHK F<O\oGp@A9n?FqfKLDOA@,?^CH;O4GHF>@A9<;;FbGpJ,K F<Mh;F@_`kOAGHM=*CH;fb2;JUOAGHK FrK P@A9<;n=<J,KLDCH;Mts\@A9D? @TK Pi=*CE?F<F<GHFDIh@A9<;MhK@AGEK FrK Pj?u=\K GHF@&J,KL\K@Y?MRK F<IvwxZ<GHMR;F<OAGHK FD?CW=\K Cpq9<;ZlJU?CWKLDOV@,?^CE;OsY9D?OyL\;;Fz=<J,Kb2;Z{@AK|L\;r}"~wx^K M=DCE;@A;|x?F<Fq 2U_;F<;J?CHCpqYOV=\;ff? GEF<Is@A9D;^K M=*CH;GH@xqTK P@A9<;i=<J,KLDCH;MGHO+;=\K F<;F@AGE?CGHFf@A9<;jF[<M>L\;JK PlZ<;IJU;;OfiK PPJ,;;Z<K M74K P]@A9<;:J,KL\K@sl?F<Zh=\K CpqF<K MhG?ClGHF@A9<;F[<M>L\;JK P]KLDOV@,?^CE;OjGEF@A9<;m;FbGpJ,K F<Mh;F@_K F<O,;g[<;F@ACpq s2d*F<Z<GHF<IW?&=*? @A9PXKJ?WJ,KL\K@ omGp@A9MR?FqRMhKJU;@A9D?Fd<b2;fiGHFh?F;FbGpJ,K F<Mh;F@omGp@A9OA;b2;J?CKLDOV@,?^CH;OhGEOsQGHF<Z<;;Z"si?b2;J,qZ<GHR^[<Cp@>=<J,KLDCH;Mt_F<PXKJA@A[<F*? @A;Cpq siMR?FqJ,;ff?CEGHOV@AGH^GHF<ZD[<OV@VJ,GE?C+=<J,KLDCE;MhO&Z<;ff?C omGp@A9J,KL\K@AOYK P? @fCH;ff?OV@YOAGpB?F<Zr9[DF<ZlJ,;Z<O&K PjKLDOV@,?^CH;Off_ib2;FoKJ,OA;slK PE@A;F@A9D;;FbGHJ,K F<Mh;F@GHOjZlqFD?MhGH^GHF@A9<;O,;F<OA;@A9D? @jO,K Mh;&K P\@A9<;WKLDOV@,?^CH;OMR?ffqRMhKb2;s@A9<;J,;LqyP[<JA@A9<;JJ,;g[<GpJ,GEF<IT@A9D? @F<;o=*? @A9<O:L];YPXK [<F<ZyGEFb2;JAqyOA9<KJA@:^K M=*[l@AGHF<In@AGHMh;Off_ejxE, ((- j %% != = / N !fi;+ :!%&%&/%1% / =fiy\DW$us<|t"]s|Bv}v99 v}vFt@A9<GEO:=*? =\;Jffs*oj;f=<J,;OA;F@W?RF<;o? =<=DJ,K2?^,9B@AKh=e? @A9=DC?F<F<GHF<Is<^ff?CECH;Zt@A9<;A`mJUGE?Z<F<;O^CH;o?CHI KJ,GH@A9<M ,V _8:9<;? =<=<J,K2?^U9GHO^K M=DCE;@A;CpqI ;F<;JU?C:?FDZ? =D=DCHGH;On@AKr?L<J,K2?ZJU?F<I ;K Pm=*? @A9=DCE?FDF<GHF<IY=DJ,KLDCH;MhOff_ WKffo;b2;JffsDGH@jGHOj=*? J,@AGH^[<CE? J,CHqZD;OAGHI F<;Zu@AKndDF<Z=*? @A9<OPXKJJ,KL\K@AOoGp@A9MR?FquGHFyZlqFD?MhGH^&;FbGHJ,K F<Mh;F@AO_8:9D;T[<Cp@AGHM? @A;fI K2?CfiK PQ?=DCE?FDF<;JmGHOm@AKRdDFDZ?=*? @A9BPJ,K M@A9<;>GHF<Gp@AG?C\=\K OAGp@AGHK F@AK@A9<;T@,? JUI ;@_WKffo;b2;Jffs"om9<GECH;TOA;ff? J,^U9<GHF<IuPXKJW@A9DGHOm=e? @A9\s]@A9<;n?CEI KJ,Gp@A9<MMR?qB^K F<OAGHZD;JW^K CHCE;^@AGHF<IuGHF<PXKJ,MR? @AGHK F? L\K [l@T@A9<;RPEJ,;;ROV=*?^;?FDZ? L\K [l@T@A9<;hO,;@fK Pj=]K O,OAGpLDCH;n=*? @A9DOT@A9D? @fCEGH;GHFr@A9D? @>PEJ,;;ROV=*?^;_8:9<;`J,GE?Z<F<;Ofi^CH;o?CHI KJ,GH@A9<M@VJUGH;O+@AK&Z<KL\K@A9? @@A9<;O,?MR;i@AGHMR;fi?OA[lLlw?CHI KJUGp@A9<M^ff?CHCH;Zl+~<+\^K CHCH;^@AOGHF<PXKJ,MR? @AGHK Fh? L\K [l@4@A9D;:PEJU;;:OV=*?^;oGp@A9GHF<^J,;ff?O,GHF<I Cpq>dDF<;J,;OAK CE[l@AGHK F\s om9DGHCH;s2GHF=e? JU?CHCH;Cs?F?CHI KJUGp@A9<M^ff?CHCE;Zffl+]eK=<=\KJA@A[<F<GEOV@AGH^ff?CHCpqh^U9<;^AO:o9<;@A9<;J:@A9<;T@,? J,I ;@^ff?FyL\;&J,;ff?^U9<;Z\_8:9D;l+~D\?CHI KJ,Gp@A9DMoKJAOfLqr=DCE?^GHFDItCE?F<Z<M? JAO>GHF@A9D;OA;ff? JU^,9<;ZOV=*?^;GHFOA[<^,9?o?qB@A9D? @f?u=*? @A9rPJ,K M@A9<;GHF<Gp@AG?C+=\K OAGp@AGEK F@AKt?FqBC?F<Z<MR? JAGHOWF<KomF\_ FKJ,Z<;JY@AKyCE;ff? J,F?OMn[<^,9h?Ofi=\K OAOAGpL*CH;i? L\K [l@fi@A9<;PEJ,;;OV=e?^;s @A9<;l+~<+\n?CHI KJ,Gp@A9DM@VJ,GE;O@AK&OV=DJ,;ff?Zn@A9<;CE?F<Z<MR? J,O[<F<GEPKJ,MRCpqn?CHCeKffb2;J@A9D;mOV=*?^;_8KnZ<KT@A9DGHOsGH@i=DCE?^;O@A9<;WCE?F<Z<M? JAOj?OPX? J?Oj=]K O,OAGpLDCH;PJ,K MkK F<;?F<K@A9<;J_DKJ>;ff?^,9F<;oCE?F<ZDMR? JA=DJ,KZD[<^;ZBLqB@A9<;hl+~D\B?CEI KJ,Gp@A9<Mys\@A9D;Rffl+]e?CHI K wJ,Gp@A9DMc^,9D;^AOYomGp@A9?>CHK^ff?C*MR;@A9<KZe om9<;@A9D;J@A9<;@,? J,I ;@^ff?FL];mJ,;ff?^,9D;ZuPJ,K M@A9D? @CE?F<Z<MR? J,*_K@A9t@A9<;>l+~<+\?F<Zl+]eB?CEI KJ,Gp@A9<MhO? J,;&=\K OA;Z?OmK=D@AGHMhGHff? @AGHK F=DJ,KLDCH;MhOff_8:9D;Y`mJ,G?Z<F<;O^CH;o?CEI KJ,Gp@A9<MGEOf7*"?F<ZeV $_m8m9<;T?CHI KJ,Gp@A9DMGHO;R^GH;F@mGHF@ojKOA;F<OA;Off7?2Q=\;J,GEMh;F@AOfiOA9<Ko@A9D? @@A9D;?CEI KJ,Gp@A9<MGHO ? LDCH;@AKOAK CHb2;=e? @A9>=*CE?F<F<GHFDI=<J,KLDCH;MROP?OV@;FDK [<I 9@AKBMRKffb2;y?O,G%? J,MGHF?tJU;ff?CHGHOV@AGH^u?F<ZZlqF*?MhGH^R;FbGpJ,K F<Mh;F@fo9<;J,;?FDK@A9<;JOAGpJ,KL\K@:GHO[<OA;Z?O?MhKbGHFDIhKLDOV@,?^CH;_Le @GEOQo;CHC<OA[<GH@A;ZRPXKJi=*? JU?CECH;C<GHM=*CH;Mh;F@,? @AGHK F?F<ZOA9<KomOiOAGEI F<GpdD^ff?F@iOV=\;;Zwx[l=Rom9<;F@A9D;TF[DMfL\;J:K P=<J,K^;OAOAKJ,O:GEF<^J,;ff?OA;O__m8m9<;T?CHI KJ,Gp@A9DMGHOI ;F<;JU?C+GHF@xoKROA;FDOA;O7?2 @:MR?ffqL\;W[<OA;ZyPXKJm?nomGHZ<;JU?F<I ;YK Pfi? =<=DCHGH^ff? @AGEK F<OGHFuJ,KL\K@AGH^OomGp@A9CHGp@V@ACE;W?Z<ZDGp@AGHK FD?C;]KJA@:@AKu?ZD? =<@:Gp@_Leu GHF*?CHCpq se@A9<;?CHI KJ,Gp@A9<MGHOWI ;F<;JU?C4GEF@A9D? @YGp@&MR?ffqL\;n?Z*? =<@A;ZrPKJT?uCE? J,I ;nJU?FDI ;nK PO,;ff? J,^,9B=<J,KL*CH;MhOmGEF^K F@AGHF[DK [<OmOV=e?^;O@A9*? @&? J,GEOA;fGHFdD;CHZ<O:@A9D? @&? JU;>F<K@J,;CE? @A;Z@AKJUKL]K@AGE^O_8:9D;=*? =\;JfGHOTKJ,I2?FDGH;Z?O>PK CHCEKffomO_;^@AGHK F=<J,;OA;F@AOT@A9<;h=*? @A9r=DCE?FDF<GHF<I=<J,KLDCE;M?F<ZZ<GHO,^[<OAOA;OfJ,;CE? @A;ZojKJ,*_;^@AGHK Fvt=DJ,;OA;F@AO>@A9D;R=<JUGHF<^Gp=DCE;nK P:@A9<;`J,GE?ZDF<;Of^CH;o?CHI KJUGp@A9<My_;^@AGHK FyZ<;OA^J,GpL\;OW@A9<;h? =<=*CHGH^ff? @AGHK FK P@A9<;h?CHI KJ,Gp@A9DM@AKt?OAG%fi+B? J,MGEF?Z<qFD?MRGH^;FbG%wJ,K F<MR;F@_ GHFD?CHCHq s"l;^@AGHK Fu^K F<^CH[<ZD;O&@A9<;=*? =\;JYomGp@A9r?Z<GHO,^[<OAOAGHK FBK P@A9<;^K F@VJUGpLD[l@AGHK FDOWK PK [lJ? =D=<J,K2?^,9"s<@A9<;YMR?GHFZ<GpR^[<CH@AGH;OGEFb2K Cpb2;Z"s*?F<Zy=\K OAOAGHLDCH;mGEM=<J,Kb2;Mh;F@AOK P K [lJ:Mh;@A9<KZ\_*fi7ff$f7fi(]$ *7 W U7,4W( \ ( n,Qe7U\ ( VR] +7W( ,xU j X7\$( $7 4,(7ff U :U4 + UV,(e] 4:A$&:(:pV:] *]e7 :$e\7 U 7fi,(7l$ fi($UmU(:7fi U(ffU($(|i7 VU p"x$ \7 ," Q$W\$ :(&U7\7 :$\A7WUxfffifi.$vu]}s11t$v WwvLswe1}%l1r0i0 6 0 2 1?Fqb2;J,OAGHK F<OK Pm@A9<;u=*? @A9=DCE?F<F<GEF<Iy=<J,KL*CH;M;GHOA@_`F;l9D?[<OV@AGpb2;^CE?O,OAGpdD^ff? @AGHK FK P@A9D;OA;=<J,KL*CH;MhO:?F<ZtK Pfi@A9<;fMh;@A9<KZ<O:Z<;b2;CHK=\;Zy@AKOAK Cpb2;Y@A9D;M ^ff?FtL\;YPXK [<F<ZyGHF?OA[lJAb2;qLquo?F<I?F<Z`W9[ S,?B 2 U"_ !;^,9<KK OA;@AKGHCHCH[DOV@VJU? @A;fK [<JTZ<GHOA^[<O,OAGHK FtoGp@A9B?u=e? JA@AGH^[<CE? J&^ff?OA;_n`J,KL\K@? J,M GHO&=*CE?^;Zr?MhK F<It?OA;@TK PjKLDOV@,?^CH;Off_ GHb2;F?FrGHF<Gp@AGE?C ?F<Z?dDFD?C =\K OAGH@AGHK FK P@A9<;nJ,KL\K@? J,Myse@A9<;>=<J,KLDCE;M GHO@AKRd*F<ZB?OA;@&K PQMhK@AGHK FDOm@A9D? @WomGHCEC"CH;ff?Z@A9<;fJUKL]K@W@AKuMhKffb2;nL\;@xo;;F@A9<;@xoKh=\K OAGH@AGHK F<OjomGp@A9<K [<@^K CECHGHZ<GHFDIfomGH@A9@A9<;TKLDOV@,?^CE;O_8fiK>Z<J,Gpb2;@A9<;mJ,KL\K@j?MhGEZ<OV@Q@A9<;KLDOV@,?^CH;Offs;ff? JUCpqhMh;@A9<KZ<Om J,KKOs] v2iZDGpJ,;^@ACpq[<OA;Z@A9<;v *+MhKZD;CHOK P]@A9D;mJ,KL\K@?F<ZK P"@A9<;mKLDOA@,?^CH;Oj@AK>d*F<Z?fOAK CH[l@AGHK F"sG_;_ps@A9<;qh^K F<O,GHZ<;J,;Z@A9<;AK=\;JU? @AGHK FD?Cjv OV=*?^; _ F@A9<GEOfOV=*?^;s @A9<;R=*? @A9=DCE?F<F<GEF<Iu=<J,KLDCH;M^K F<OAGHOV@AO>K PdDF<Z<GEF<I@A9<;MhKb2;Mh;F@AOWK P4?^K M=DCH;v OV@VJ,[<^@A[lJU;@A9<;YJ,KL\K@UjGHF?^CE[l@V@A;J,;Zv OV=*?^;_`|MR?SAKJfi?Z<b?F<^;o?O+@AK;=<JU;OAO"@A9<;i=<J,KLDCE;MGHFf?F<K@A9D;JfiOV=e?^;QF<KffomFn?O+@A9D;i^K FldDI [<JU? @AGHK FOV=*?^;sQZD;F<K@A;ZL$q #& %K ff?F<K (w '";) J,;sW + * U_ F@A9<GEOfOV=*?^;si@A9<;h=\K OAGp@AGEK FKJ^K FldDI [lJ? @AGHK F*K P&?J,KL\K@hGHO^K M=DCE;@A;CpqZD;@A;J,MhGHF<;ZLq?OAGHF<I CH;=\K GHF@h9D?bGHF<I ,GHF<ZD;=];FDZ<;F@n=*? JU?MR;@A;J,O?Oy^KKJ,Z<GHFD? @A;Off_8:9<;=]K O,Gp@AGHK F<O@A9D? @t? J,;F<K@=D9qOAGE^ff?CHCpqCH;I2?CL\;^ff?[<OA;K P>?^K CHCEGHOAGHK F*R? J,;J,;=<JU;OA;F@A;Z Lq|=*? JA@AGH^[DCE? JRJ,;I GEK F<OK P.#fis?FDZ ? J,;B^ff?CHCH;Z/#1032547672%76_ F@A9<;B^K FldDI [<JU? @AGHK FOV=*?^;s@A9<;t=*? @A9|=DCE?FDF<GHF<I=<J,KLDCE;M ^K F<OAGHOA@AOhK PWdDF<Z<GHFDIB?r^K F@AGHF[<K [<Oh^[<JAb2;J,;=<JU;OA;F@AGEF<I?=*? @A9uPKJ:?>OAGHF<I CE;:I ;K Mh;@VJ,GH^ff?Ce=\K GHF@U @A9D? @&Gi^K F<F<;^@AOj@A9<;=\K GHF@AOiJ,;=<J,;O,;F@AGHFDIT@A9<;WGHF<Gp@AG?CD?F<Z@A9<;dDF*?C^K F<dDI [lJU? @AGHK FK P*@A9<;jJ,KL\K@s?F<ZyGHGX"Z<K;O4F<K@QGHF@A;J,OA;^@i?F8q #109254:672ffp: 6_48:9<GHOfiMh;@A9<KZ@VJU?Z<;OW?hOAGEM=DCHGpd*^ff? @AGHK FK P@A9D;T=*? @A9=DCE?F<F<GEF<If=DJ,KLDCH;MGH@mOA;ff? J,^U9<;OW?h=*? @A9PXKJW?ROAGHF<I CE;&=]K GEF@U?I2?GHF<OA@?9<GHI 9<;JAwxZ<GHMh;F<O,GHK FD?C4OA;ff? J,^U9OV=*?^;B@A9<;Z<GHMh;F<O,GHK FK P # GHO>@A9<;uF[DMfL\;Jnfi+K P@A9<;J,KL\K@UW?F<Z?I2?GHF<OA@TMhKJ,;^K M=DCH;OA9D? =\;O&K PKL*OV@,?^CH;Ob2;JAqOAGHM=*CH;f=*9qOAGH^ff?C KLDOV@,?^CE;OYMR?qJ,;OA[DCp@GHFb2;JAqy^K M=DCH;#1032547672%7 6AU_<KJQ;<?M=DCE;s2CH;@fi[DO^K F<O,GHZ<;J @A9<;=DCE?FD? J4? J,M K P< GHI [lJ,; _ @AOfi=\K OAGp@AGEK F>?MhK F<IW@A9<;jKLDOV@,?^CE;OGHO4@AK@,?CECpq>F<KomFRK F<^;:@A9<;b ?CH[<;OQK Pe@A9<;m?FDI CH;O4L\;@xo;;FRGp@AOiCHGHFlO ;=<?>@; , 4? J,;:F<KomF\_ 8:9[<OsPXKJ;ff?^,9=*?GpJ ;=<?>@; , Us+GH@&GEO&=]K O,OAGpLDCH;f@AKyZ<;^GHZ<;nom9D;@A9<;JY@A9<;J,KL\K@Y^K CHCHGHZD;OoGp@A9B@A9<;OA[lJAJUK [<F<Z<GHFDIKLDOV@,?^CE;O_8:9DGHOmGHOmom9D? @Woj;>Z<GHZGHF GHI [lJU;nh@AKRJ,;=DJ,;OA;F@m@A9<;nMR? =<=DGEF<IL\;@xo;;FB@A9<;T=D9qOAGH^ff?CKLDOV@,?^CE;OWGEF@A9<;nK=\;JU? @AGHK FD?CfiOV=*?^;?F<Z@A9<A; #1032547672%7 6U._ BWKffoTs\LqMhKbGHFDI?=\K GHF@&?CHK F<I@A9<;^[lJAb2;"SAK GHF<GHF<DC; E?FDFZ C; GmK F<;omGHCHC?CEOAKmZ<;d*F<;?^K CHCHGHO,GHK FwxPJ,;;QMhK@AGHK FnPXKJ@A9<;=DCE?F*? Jfi? J,ML\;@xo;;F@A9<;^KJAJ,;OV=\K F<Z<GEF<Iu=]K O,Gp@AGHK F<8O HR? =C; ET?FDFZ Hh C; G2TGHFr@A9<;K=\;JU? @AGHK FD?CQOA=*?^;_t8:9<GHOY^[<JAb2;RGHO>K F<;OAK CH[<@AGHK F@AK@A9<GHO=e? JA@AGH^[<CE? J=e? @A9y=DCE?F<FDGHF<I>=<J,KLDCH;Mt_`aJU;^;F@&@VJ,;F<ZBGHF@A9<;fd*;CHZGHO@AKu^K F<OAGHZ<;JW@A9<;V@VJU?SA;^@AKJAqOV=e?^; D;JAL*?^,9"s4 J I2:o9<;J,;?o9<K CH;&=*? @A9GHOJ,;=<JU;OA;F@A;ZLq?hOAGHF<I CH;&=\K GHF@_8m9<;T^KKJ,Z<GHFD? @A;OK Pfi@A9<GHO=\K GHF@? J,;Y@A9D;Tb ?CH[<;OK Pfi@A9<;T=e? JU?Mh;@A;J,OZ<;dDF<GHFDI@A9<;TOA[<^^;O,OAGpb2;TMhKb2;Mh;F@AOWK P @A9D;YJ,KL\K@_jDKJWGHFDOV@,?F<^;sD@A9D;TCHGHOV@:K POA[<^^;O,OAGpb2;:^K MhM?F<Z<OiO,;F@Q@AKf@A9<;J,KL\K@i^K F@VJ,K CHCE;JiGHF<Z<;;ZR;F<^KZD;m?Fh;F@AGpJ,;=*? @A9K Pe@A9<;J,KL\K@_Ft@A9<GHOOV=*?^;se@A9<;T=e? @A9=DC?F<F<GHF<In=<JUKLDCH;M GEO:J,;Z<[D^;Zt@AKh@A9D;fOA;ff? J,^U9PKJY?hOAGEF<I CH;Y=\K GHF@L_ K&F<^;?I2?GHF\soj;@VJU?ZD;:?&OAGHM=DCEGpdD^ff? @AGHK F>K PD@A9<;=e? @A9=DCE?F<F<GEF<I:=<JUKLDCH;M OA;ff? J,^U9<GHF<IYPXKJ?W=\K GHF@U?I2?GEF<OV@?T9DGHI 9<;JiZ<GEMh;F<OAGHK FK P]@A9<;mOA;ff? J,^,9uOV=*?^;>@A9<;mZDGHMh;F<OAGEK FK P*@A9D;:@VJU?SA;^@AKJAqROV=e?^;:GHOQ@A9D;:F[DMfL\;JK P=*? JU?Mh;@A;J,OfF<;;Z<;Z@AKtOV=\;^GHPq^K M=*CH;@A;Cpqr?uom9<K CH;n=*? @A9*U_<KJn;l?Mh=DCH;s"GHFr GHI [lJU;s@A9<;=*? @A9yL\;@oj;;MF =C; N:?F<OZ ;=C PY^ff?FL\;&J,;=<J,;OA;F@A;ZyLq?=]K GEF@:GHFt?hOA;b2;FwxZ<GHMR;F<OAGHK FD?C]OV=e?^;TOAGHM=*CpqLqu^K F<O,GHZ<;J,GHFDI>@A9D;YCH;F<I@A9tK P Gp@AOOA;b2;FOA;I Mh;F@AO_?Qfiy\DW$us<|t"]s|Bv}XY[\&Z ab_v99 v}vRJSRJW\SXY[\^Z ]`_R+VXY[\Z c9_\TRUTGHI [lJ,; i`@xoKfi+u? J,M =DCE?^;Zt?MhK F<IRKLDOV@,?^CH;OGHF@A9<;TK=\;JU? @AGHK F*?C\OV=*?^;dfe^gih ki jmlei)Dnon#opj1e1#hHC KLe?CD? =<=<J,K2?^U9<;O? J,;:^CE?OAO,GH^ff?CHCpqZ<GpbGHZ<;ZGHF@AKY@xoKfM?GHFh^CE?OAO,;OGfiJ,;@VJU?^@AGEK FRMh;@A9<KZ<Os?F<ZGHGZ<;^K Mh=]K O,Gp@AGHK FMh;@A9<KZ<O_ F@A9<;J,;@VJU?^@AGEK FRMh;@A9<KZ<OsK F<;@VJ,GH;O4@AKTJ,;Z<[<^;@A9<;ZDGHMh;F<OAGEK FnK P@A9<;>GHF<Gp@AGE?C]=DJ,KLDCH;M LqyJ,;^[<J,OAGpb2;Cpq^K F<OAGEZ<;J,GHF<IO,[lLlwxMR?F<GEPK CHZDOK P @A9<;f^K Fld*I [lJU? @AGHK FBOV=*?^;_ F@A9<;&Z<;^K M=\K OAGH@AGHK FMR;@A9<KZDOslK F<;W@VJ,GH;Oj@AK^,9D? JU?^@A;JUGH;Y@A9<;J,;I GHK F<OK P"@A9<;&^K FldDI [lJU? @AGEK FuOA=*?^;@A9D? @? JU;PEJ,;;K PeKLDOV@,?^CE;O_ K@A9Mh;@A9<KZ<O4;F<Zh[<=omGp@A9?Y^CE?OAO,GH^ff?ClIJU? =D9OA;ff? JU^,9RKb2;Jj?&Z<GEOA^J,;@A;OV=*?^;_ F=<J,GEF<^Gp=DCH;s@A9<;O,;>Mh;@A9DKZ<OW? J,;@2qsr*pxWL\;^ff?[<O,;T@A9<;qyomGECHC\dDF<ZB?=*? @A9BGHP4K F<;>;GEOV@AO?F<ZomGHCHC\OV@AGECHC\@A;J,MhGEFD? @A;fGHF?hdDFDGp@A;&@AGHMh;>GHP4?=*? @A9Z<K;OWF<K@W;GHOA@_:F<PXKJA@A[<F*? @A;Cpq s*^K M=*[l@AGHF<I@A9<;RJ,;@VJU?^@AGHK FKJf@A9<;Z<;^K M=\K OAGp@AGEK FIJU? =D9GHOf?F}"~wx^K M=DCE;@A;=<J,KLDCE;Myf@A9<;^K M=DCH;lGp@qK P@A9<GHOi@,?OVhIJ,KomO;=\K F<;F@AGE?CHCpq?Oi@A9D;mF[<MfL\;JjK P"GHF<^J,;ff?OA;Ox?F<Fq s* 2U_K F<OA;g[<;F@ACpq@A9<;OA;T=DCE?F<F<;JUO? JU;Y[<OA;ZyK F<CpqPXKJ:J,KL\K@AO9D?bGHF<Ih?hCHGHMhGp@A;ZuF[<MfL\;JT@A9lJU;;TKJmPXK [lJjK P D_ F?Z<Z<GH@AGHK F\sl@A9<;q? J,;>OACHKo?F<Z^ff?FK F<CHqL\;T[<O,;ZK*wxCHGHF<;@A9<;T=DC?F<F<;J:GHOGHFb2K2;ZomGp@A9?hMhKZ<;CK P\@A9<;;FbGpJ,K FDMh;F@sGp@=<J,KZ<[<^;O?f=DCE?FR@A9D? @GHOQ=e?OAOA;Z@AKf@A9<;J,KL\K@^K F@VJ,K CHCE;Jjo9<GH^,9"sGHFR@A[lJ,F\s;l;^[l@A;O&Gp@_ FtI ;F<;J?CsD@A9<;f@AGHMh;TFD;^;OAO,? JAqy@AKu?^,9<GH;b2;f@A9<GHOGHO:F<K@WOA9<KJA@m;FDK [<I 9t@AKu?CHCHKffo@A9<;J,KL\K@@AKhMhKb2;fGHFt?hZlqF*?MhGH^&;FbGpJ,K FDMh;F@_dfebdetFuvwjNe1iie1f f#'fie1f#f#hpoK&F<;Wo?q@AK^K M>L*? @:@A9<;Y^K M=*CH;GH@xqK P+@A9<;&=DJ,KLDCH;M GHO@AK@VJU?ZD;Y^K M=DCH;@A;F<;O,Om?I2?GHF<OV@=\;J,PXKJVw?F<^;_Q8fiKZ<KT@A9DGHOs@A9<;CEK^ff?C*=DCE?F<FD;J,O? J,;WI [<GHZD;ZhLqh@A9<;WIJU?Z<GH;F@K P+?n^K OV@PX[<F<^@AGHK FB[<OA[D?CECpqR@A9<;i[<^CHGEZ<;ff?FhZ<GHOA@,?F<^;:@AK>@A9<;mI K2?CXi?F<ZR@,? 2;&GHF@AKn?^^K [<F@@A9<;^K F<OV@VJU?GEF@AOjGHF@VJ,KZD[<^;ZhLq@A9<;KLDOV@,?^CE;O@AK?ffb2K GHZ@A9<;M D?ffb2;JSAK Fyx8K [<J,FD?OAOAK [DZ\s* +* U_GHF<^;@A9<;=*? @A9=DCE?FDF<GHF<IY=DJ,KLDCH;MGHOm}+~wx^K M=DCH;@A;sDF<KomGHF<Ih@A9<;T^K OV@WP[<FD^@AGHK F\s<Gp@:GHO?Cpo?ffqOm=\K OAOAGpLDCE;@AKRZ<;OAGHI F?RZ<;^;=<@AGpb2;f;FbG%wJ,K F<MR;F@om9<;J,;Y@A9D;>Mh;@A9DKZomGHCHC\I ;@&@VJU? =<=\;ZtGEF?hCEK^ff?CfiMhGHF<GEM>[<Mt_WKffo;b2;Jffs\@A9<;OA;nMh;@A9<KZ<O? J,;n[<OA;PX[<C+GEFMR?FqGHF<ZD[<OV@VJ,GE?C"? =D=DCHGH^ff? @AGHK FDOL\;^ff?[<OA;>@A9<;q^ff?FZ<;ff?ComGp@A9^K Mh=DCH;tJ,KL\K@AOY?F<Zffzfifi$vu]}s11t$v WwvLswe1}%l1r{ ^| }b~~^&|({:|^}b~~`&({ffU[{ffU{ff5GHI [lJ,;f8:9<;h^K Fld*I [lJU? @AGHK FOV=*?^;h^KJAJU;OV=\K F<Z<GHF<I@AK GHI [lJ,; _BWK@A;.#GHOf?t@AKJ,[<OsxGp@hGHOhZ<GHbGHZD;ZGEF@AK@ojKJ,;I GHK F<#G79`p ?F<Z #G79`p @A9D? @R^ff?FDF<K@RL\;y^K F<F<;^@A;ZLq?y^K F@AGEF[<K [DOY=*? @A9\s ?F<Z7v2&@A9D;J,;hGHOY F<K@n? #*wxKL*OV^@, ?^CH;RPXKJ , L\;^ff?[<OA;GH@TZ<K;O>F<K@GHF@A;JUP;J,;&oGp@A9@A9<;f? J,Mt_;FbGpJUK F<Mh;F@ MRKZ<;CEOfi9*?bGHF<IW@A9<K [<O,?FDZ<O K PDP?^;Os@A9D? @Q? J,;K P@A;F@AKK&@AGHMh;wx^K F<O,[<MhGHF<IWPXKJQI CHKL*?CMh;@A9<KZ<O_U)hff f#g#he1fvle1fbde1op8:9<;4OA@AK^U9D?OV@AGH^QKJ+JU?F<Z<K M? =D=<J,K2?^,9To?O+d<J,OV@\GHF@VJ,KZ<[<^;Z&Lq ? JAJU?g[D?F<Z>?F<Z8%? @AK M>L\; J2Us?F<ZBCE? @A;JY[<OA;ZLq$KWb2;J,MR? J,On 2 Us?F<ZMhKJU;fJ,;^;F@ACpqtLqf ?ffbJU? G J2I U_T8:9<;nMR?GHFGHZ<;ff?dfeetFuie1f f#'fojbefnhL\;9<GHF<ZB@A9<;O,;R?CHI KJ,Gp@A9DMhOTGHOY@AKLD[<GHCEZ?tIJU? =D9GHF@A9<;h^K FldDI [<JU? @AGHK FOV=e?^;_u8:9D;IJU? =D9GEOTKLlw@,?GHF<;ZGHF<^JU;Mh;F@,?CECpq?O>PXK CHCHKomOh?tCHK^ff?C=DCE?F<F<;JnGHOf[DOA;Z@AK@VJAq@AKJ,;ff?^,9@A9<;I K2?C_l9<K [<CHZ@A9<;hMRK@AGHK FOV@AK=? @n?yCHK^ff?CQMhGEF<GHMn[<Mys+?yF<;oF<KZD;yKJnCE?FDZ<MR? JA<GHOT^J,;ff? @A;ZLqrI ;F<;J? @AGHF<I?RJU?F<Z<K MNMhK@AGHK FOV@,? JA@AGHFDIRPJ,K @A9*? @WCHK^ff?C+MRGHF<GHMn[<My_:8:9D;TMh;@A9<KZGH@A;JU? @A;OW@A9<;OA;>@xoKuOA@A;=DO[<F@AGHC@A9<;I K2?CQ^K FldDI [lJ? @AGHK F9D?O&L\;;FJU;ff?^,9<;ZPJ,K MK F<;K PQ@A9D;OA;GHF@A;J,Mh;Z<GE? J,qy=]K O,Gp@AGHK F<OLq?IJU?ZDGH;F@WZ<;OA^;F@mMhK@AGHK F"_j8:9D;OA;f?CHI KJ,GH@A9<MhOoKJAomGp@A9?hZ<GHOA^J,;@AGE;ZyJ,;=<J,;O,;F@,? @AGHK FK P @A9<;^K FldDI [<JU? @AGHK FnOV=*?^;_48:9<;q>? JU;iF<KffoF>@AKL\; r*3 254,5 4$b 6U @ 2qsr*pxfiL\;^ff?[<O,;i@A9<;=<J,KLe? LDGHCHGp@qK P @A;J,MhGEFD? @AGHF<IoGp@A9?OAK CH[l@AGEK F7?h=e? @A99D?OL\;;FPXK [<F<ZKJ&FDKh=*? @A9;GHOA@AOU:^K Fb2;J,I ;O&@AKuK F<;?O:@A9D;>?CHCHKoj;Z@AGHMh;TGEF<^J,;ff?OA;Y@AKo? JUZ<OmGHF<dDF<Gp@q _`WOmGHFy@A9D;Y=<J,;bGHK [<O:O,;^@AGHK F\sDGp@GHOm?CHOAKh=]K O,OAGpLDCH;@AKRZD;OAGHI FtOAGEM=DCH;&Z<;^;=<@AGHb2;T;FbGpJ,K FDMh;F@AOm@A9D? @:omGECHC\MR? 2;T@A9DGHOGHF<ZyK P4?CHI KJ,Gp@A9DMOACHKoj;J@A9D?F?B=D[lJU;JU?F<Z<K ? =<=DJ,K2?^,9\_WKffo;b2;Jffs@A9<;q9D?ffb2;yL\;;F|@A;OV@A;ZPXKJhJ,KL\K@AOomGH@A9?r9<GHI 9F[<MwL\;JfK P:r?F<Z@A9<;qr9D?b2;L\;;FOA9<KomF@AKojKJ,g[<GE^ACpqBGEFrJ,;CE? @AGpb2;CHq^K Mh=DCH;?F<ZF*? @A[lJU?C;FbGpJUK F<Mh;F@AO_KW@A9D;JMR;@A9<KZDOj[DOAGHF<ITC?F<Z<MR? JAOj9D?b2;WL\;;FZ<;bGEOA;Z\_4<KJ:;<?M=DCH;sD}"+] sGHF@VJ,KZ<[<^;ZLqr9D;F?F<Zo?FDIl 2 UsQMR? 2;O>[DOA;K PCE?F<Z<MR? J,OW@AK? =D=<J,KlGHMR? @A;@A9D;hPEJU;;hOV=*?^;_u8:9<GHO? =<=<JUK2?^,9GEOOAGHMhGHC? J@AK@A9D;yA9<GH;JU? JU^,9<GH^ff?C]=*CE?F<F<GHFDI ? =<=DJ,K2?^,9[<OA;ZyGHFyxiOA9<K [DCHZu@A9<;YMh;@A9<KZfffiy\DW$us<|t"]s|Bv}v99 v}vP?GHCj@AKrJ,;ff?^,9 ?I K2?CsjFD;oOA[lLDI K2?CHOh? JU;yI ;F<;JU? @A;Z[<F@AGHCj@A9<;=<JUKLDCH;MGHO;ff?OVq;F<K [<I 9@AKrL\;OAK Cpb2;Z"_ F@A9<;GHJ? =<=<J,K2?^U9\sdDJ,OV@i?YCHK^ff?Cl=DC?F<F<;JQGHOQ[DOA;Z@AKTJ,;ff?^U9h@A9<;:dDFD?Cl=\K OAGp@AGEK F\+OA9<K [DCHZ@A9<;CHK^ff?Ce=DCE?F<F<;JP?GHCs@A9<;&^K FldDI [lJ? @AGHK FOV=*?^;YGHOZ<GpbGHZ<;ZuGHF@AKn@xoKOA[lLDOV=e?^;OslK F<;&^K F@,?GHFDGHF<In@A9<;K2?C*?FDZ@A9<;:K@A9<;J?YF<;oO,[lLlwxI K2?C_48:9<;:=<J,KLDCH;MaGEO @A9<;J,;PXKJ,;:Z<GpbGHZ<;ZGEF@AK&@ojK>OA[lLlw7=<JUKLDCH;MhOGfI K GHF<IBPEJUK M@A9<;uGHF<GH@AGE?C4=\K OAGp@AGHK F@AK@A9D;OA[<LDI K2?Csi?F<Z GHGTI K GHF<IBPEJ,K @A9<;uOA[lLDI K2?C@AKB@A9<;dDFD?Cfi=\K OAGp@AGEK F\_>+}++]>9D?O&L\;;FrOA9<KomFB@AKL\;>=e? JA@AGH^[<CE? JUCpqoj;CHCQ?Z*? =<@A;Z@AKdDF<Z=*? @A9<OYPXKJMR?F<GH=D[<CE? @AKJ,Off_ @j9*?OiL\;;FGHM=DCE;Mh;F@A;Zu?F<Z@A;OV@A;ZyPKJ=DC?F<F<GHF<I&=e? @A9<OPKJ'i[<M?>?F<Zu`WZ<;=<@J,KL\K@AO_dfeeie1f f#'f-oeBhjffjoffne$h'fh8:9<;=DJ,;bGEK [<O4Mh;@A9<KZ<O4o;J,;:;OAO,;F@AGE?CECpq>Le?OA;ZhK Fh@A9D;:^K FldDI [lJ? @AGHK FhOV=*?^; @A9<;:J,;@VJU?^@AGHK F\s@A9<;Z<;^K M=\K OAGH@AGHK F\slKJ:@A9<;YK=<@AGEMhGHff? @AGHK FyGHOM?Z<;YGHF@A9<GHOOA=*?^;_i`WF?Cp@A;J,FD? @AGHb2;YGHO@AKh^K F<OAGEZ<;J@A9<;V@VJU?SA;^@AKJAqOV=e?^; _:<KJW;<?M=DCE;sDGHFt9<GEO:Mh;@A9<KZ ~]sD<;J,L*?^,9 J I2OV@,? JA@AOLqy^K F<OAGEZ<;J,GHF<I@A9<;OV@VJ?GHI 9@TCEGHF<;nOA;I Mh;F@jSVK GHFDGHF<I@A9<;GHF<Gp@AG?Cfi?F<Z@A9D;dDFD?C ^K FldDI [lJ? @AGHK FrGHyF #fi_8:9DGHOW=*? @A9rGHO=<J,K IJU;OAOAGpb2;CpqtMRKZ<GHdD;ZtGHFOA[<^,9r?MR?F<F<;J@A9D? @W@A9<;>PXKJALDGEZ<Z<;FyJ,;I GEK F<OGH@^J,K OAO,;O&? JU;fJ,;ZD[<^;Z\_`@Y;ff?^,9Gp@A;JU? @AGEK F\s]?OA[lL<wxMR?F<GHPXK CHZtK 1P #^K F@,?GHF<GEF<Ih@A9<;n^[lJAJU;F@W=*? @A9BGHOmJ?F<Z<K MhCpqyI ;F<;J? @A;Z\_@hGHO@A9<;F|Z<GHO,^J,;@AGH;Z?F<Z|;=DCHKJ,;Z|[DOAGHF<I?ZlqFD?MhGH^=<J,K IJU?MRMhGHF<IMh;@A9<KZ@A9D? @h[<O,;O@A9<;CH;F<I@A9?^J,K OAOf@A9<;RPXKJALDGHZDZ<;FBJ,;I GHK F?O>@A9<;h^K OA@>PX[<F<^@AGHK FGEFKJ,Z<;J>@AKMhGHFDGHMhGH;_R8m9<;OA;ff? J,^U9J,;OA[DCp@AOQGHFh?fF<;o@VJU?SA;^@AKJAqom9<K O,;:GHF@A;J,OA;^@AGHK FRomGp@A9@A9<;mPKJAL*GHZ<Z<;FnJ,;I GHK FDOiGHOQO,MR?CHCH;J4@A9D?FR@A9<;KJ,GHI GEFD?C+@VJ?SV;^@AKJAq _n8:9<;>=<J,K^;OAO&GHOWJ,;=\;ff? @A;Z[<F@AGECfi?F?Z<MRGHOAOAGpL*CH;&@VJU?SA;^@AKJAqBGEOWPXK [<F<Z"_&`WO&GHF@A9<;n=<J,;bGHK [<OWOA;^@AGHK FDOs\Gp@WGEO&?CEOAKR=\K OAO,GpLDCH;Y@AKyZD;OAGHI FBOAGHM=DCE;TZ<;^;=<@AGpb2;;FbGpJ,K F<Mh;F@AO@A9D? @YomGHCHCMR? 2;Y@A9DGHOGHF<ZK P4?CHI KJ,Gp@A9<M O,CHKffo;Jm@A9D?F?n=D[lJ,;&JU?FDZ<K M? =<=<J,K2?^U9\_8:9D;ioKJA>K P %+GHF\s &GE?Ks?F<Z GH^,9D?CE;omGH^W GHO OAGHMhGECE? J+@AK&K [lJQ? =<=<JUK2?^,9\_ `O4GEFn?F;ff? J,Cpqb2;J,OAGEK FnK P*K [lJi?CHI KJ,GH@A9<M `9[D?^@AGHF\s ?;Jffs ;O,OA^G ; J,;Us xz8 ?CpLDGs 2 UsI ;F<;@AGH^:?CHI KJ,GH@A9<MhO4? J,;[<OA;Z@AKf^ff? JAJAq>K [<@QK=<@AGHMhGHff? @AGEK FGHFn@A9<;@VJU?SA;^@AKJAqhOV=*?^;_48JU?SV;^@AKJUGH;Oi? J,;=e? JU?Mh;@A;J,GH;Z[DOAGHF<I@A9<;n^KKJUZ<GHFD? @A;OWK PQGHF@A;J,Mh;Z<G? JAqbGE?w7=\K GHF@AO_m`WFB;b2K CH[l@AGHK FD? J,q?CHI KJ,Gp@A9<MGHOW[<OA;Z@AKuK=D@AGHMhGH;?^K OA@uPX[<F<^@AGHK FL*?OA;Z K F@A9<;CH;F<I@A9 K P&@A9<;t@VJU?SA;^@AKJAq ?FDZ@A9<;PKJAL*GHZ<Z<;FJ,;I GEK F ^J,K O,OA;Z\_8:9<;ROV@,?F<ZD? J,ZK=];J? @AKJ,O>K Pj@A9<;I ;F<;@AGH^u?CHI KJ,Gp@A9<MROT9D?b2;L\;;FMhKZ<Gpd*;Z?F<ZCE? @A;Jn;@A;FDZ<;Z@AKt=DJ,KZD[<^;R?tC? J,I ;b ? J,GH;@xqK P=e? @A9<OR^ &GE?Ks GE^,9D?CH;oGH^1s x]9D?F<Isj J I2U_8:9D;RF[<MfL\;JfK PGHF@A;J,Mh;Z<G? JAqhbGE?w7=\K GHF@AOGEOdl;Zt?FDZy^,9<K OA;F[<OAGHFDIn?Ft9D;[lJ,GHOV@AGE^_ Gpb2;F@A9<GHOF[<M>L];JsFDK@A9<GHF<I=<J,;b2;F@AOfi@AKZD;OAGHI F?mZ<;^;=D@AGpb2;i=DJ,KLDCH;Mom9<GH^U9>OAK CE[l@AGHK FToGHCHC J,;g[<GpJU;QMhKJ,;jGHF@A;J,Mh;Z<GE? J,qW=\K GHF@AOsCH;ff?Z<GEF<In@A9<;f?CHI KJ,GH@A9<M @AKhP?GHC]om9<GHCE;WK FD;YOAK CH[l@AGHK Fy;lGHOV@AOff_6 0 l6 ( 1 w 6 \3 0 $ ( ( 16 w`WO:o;T9D?b2;nOA;;FGHFy@A9<;Y=DJ,;bGEK [<OOA;^@AGHK F\s*@A9<;T^K M=*[l@,? @AGHK FK Pfi@A9<;f^K FldDI [lJU? @AGEK FOV=*?^;.#rGEO?b2;JAqy@AGHMR;wx^K F<OA[<MhGEF<I@,?OVe_8m9<;TMR?GHFGHZ<;ff?L\;9<GHFDZ@A9D;f`J,GE?Z<F<;Om^CH;o?CHI KJUGp@A9<MGHO:@AK?b2K GEZ@A9<GHO^K M=*[l@,? @AGHK F\_ FKJ,Z<;J@AKhZDK>@A9DGHOs@A9<;T?CHI KJ,GH@A9<M OA;ff? J,^,9D;O:Z<GpJ,;^@ACHqPXKJm?P;ff?OAGHLDCH;=*? @A9yGHF@A9<;Y@VJ?SV;^@AKJAqyOV=e?^;_8:9<;&^K Fld*I [lJU? @AGHK FtOA=*?^; #GHOF<;b2;JW;=DCEGH^Gp@ACpqR^K Mh=D[l@A;Z\_`WOQomGECHCL];O,9<KffomF"sGHF@A9<;@VJ?SV;^@AKJAqhOA=*?^;s=*? @A9R=DCE?F<FDGHF<IWMR?qL\;OA;;F?O?FRK=<@AGHMRGHff? @AGHK F=<J,KL*CH;M ?F<Z OAK Cpb2;Zz?OOA[<^U9 Lq?F{?CHI KJ,Gp@A9DM ^ff?CHCH;Z{ff<+ee _ @uGHOR=\K OAO,GpLDCH;@AKLD[<GHCEZ?F? =<=<JUKlGHMR? @AGHK FK P&PJ,;;tOV=e?^;yLq?F<K@A9D;Ju?CHI KJ,GH@A9<M ^ff?CHCH;Z l+~<+\@A9D? @GHOR?CHOAK=]K O,;Z?O?FK=D@AGHMhGHff? @AGHK F=<J,KLDCH;Mt_ 8:9<;`mJ,G?Z<F<;Oh^CH;o?CHI KJ,Gp@A9DM GHO@A9D;yJ,;OA[<CH@RK PW@A9<;tGHF@A;J,CH;ff?ffb2;Z;l;^[l@AGHK FK P4ff<+eer?F<Zt<+~<\]_.fffffifi$vu]}s11t$v WwvLswe1}%l1rROBOT\ ZWW VV\ Z\ Z c c9_GHI [lJ,;Tv`=e? JU?Mh;@A;J,GH;Z@VJU?SA;^@AKJAq , >@ , >@ 0 >@ 0 >=J>@5:?F<Z?OV@,? JA@AGHFDI=\K GHF@D=C; <YGEM=DCHGH^wGp@ACpqZD;dDF<;T?=*? @A9GHF@A9<;TK=\;JU? @AGHK F*?C\OV=*?^;PXKJW?9<K CEK F<K MhGH^YMhKL*GHCH;WJ,KL\K@_n'bdnekjf opjl ihjb/>ff<+eeGpb2;F|?J,KL\K@>oGp@A9*si?t@VJU?SA;^@AKJAqK P:CH;F<I@A9MR?ffqL\;h=e? JU?Mh;@A;J,GH;Z|?O?BOA;g[<;F<^;K P,O8OA[<^^;OAOAGHb2;MhKb2;Mh;F@AO_` OV@,? J,@AGHF<It=\K GHF@$ C; h?CEK F<ItomGH@A9OA[<^U9?t=*? JU?Mh;@A;JUGH;Z@VJU?SA;^@AKJAqGHM=*CHGH^Gp@ACpqyZ<;d*F<;h?=*? @A9?FDZ?dDFD?C4^K Fld*I [lJU? @AGHK FC; GHF@A9<;^K Fld*I [lJU? @AGHK FOA=*?^;_<KJ;<?M=DCE;s&PXKJ?9<K CHK FDK MhGH^MhKLDGHCE;J,KL\K@@A9<;@VJU?SA;^@AKJAqa , >@ , >@ 0 >@ 0 >=J&>@5X u^ff?F{L\;GHF@A;JA=<J,;@A;Zr?OTM? GHFDIu? , Z<;IJ,;;n@A[lJUF\s"MhKffbGHF<IOV@VJ?GHI 9@8 , s"MR? GEF<Iu? 0 Z<;IJU;;>@A[<J,F?F<ZOAKnK F\_ Gpb2;F@A9<;WOV@,? JA@AGHFDI>^K Fld*I [lJU? @AGHK F; C s@A9DGHOi@VJ?SV;^@AKJAquCH;ff?Z<O@AKf@A9D;mdDF*?CD^K FldDI [<JU? @AGHK F/C;e^geie1f f#'f de$`efOA;;T GHI [<J,;Tv2U_GHb2;F?>Z<GHOA@,?F<^;mPX[<F<^@AGHK FK Fu@A9<;m^K Fld*I [lJU? @AGHK FuOV=*?^;slGHP]o;md*F<Z?f@VJU?SA;^@AKJAqOA[D^,9@A9D? @Gp@jZ<K;OjF<K@^K CHCHGHZD;omGp@A9?FqKLDOV@,?^CH;O?F<ZuOA[<^U9R@A9D? @j@A9<;WZ<GHOV@,?FD^;mL\;@xo;;F C; ?F<ZR@A9D;I K2?C C;GHO4;J,Ks@A9<;Fo;9D?b2;?&OAK CH[l@AGHK F@AKYK [<JQ=*? @A9=DCE?FDF<GHF<I=<J,KLDCE;My_8:9D;J,;PKJU;s2@A9<;=*? @A9=*CE?F<F<GHFDI=<J,KL*CH;M MR?qL\;&OA;;F?OW?MhGHF<GEMhGHff? @AGHK Fu=<J,KL*CH;M om9<;J,;_m8m9<;QOA;ff? J,^U9>OA=*?^;iGHO?:OV=*?^;K POA[<Gp@,? LDCHqm=*? JU?MR;@A;J,GH;Z>@VJU?SV;^@AKJUGH;Os@A9<;4@VJU?SA;^@AKJAqfOA=*?^;__m8m9<;P[<FD^@AGHK Fn@AKYMhGHF<GHMRGH;iGHO D? C; >C; GHPD@A9<;j=*? @A9GHO4^K CHCHGEOAGHK FwxPJ,;;s ?F<Z < 7C; 3>C; fiK@A9<;J,omGHOA;C; L\;GHFDI>@A9D;&d<J,OV@:^K CHCEGHOAGHK Fu=\K GHF@UU_ 0ff*U7l X((+7 U$\e$ ]7 ,(\7 {A$]7 7 \ff$XxU""4,($X(:ff 7 fiVe7$4$Q(VQ$%U:,(7,7 :7 % (h V,7 7Xj UiUTU$( ,7hU$fffXxUfi7A]U7Y7 i,*U >$Y ,4 $U7V U7Q7Afi7 jXfi% (f U((Um(:,X7$7&U\7fi( ,7&Ul7fi77 XV7U&U"74UU \,< ,mV2ff+fiy\DW$us<|t"]s|Bv}v99 v}v:8 9D;?CEI KJ,Gp@A9<Mff<+ee sL*?O,;ZK F@A9<GHOfib2;JAq>O,GHM=DCH;i@A;^,9<FDGHg[D;?FDZh?mJ?F<Z<K MhGH;ZK=<@AGEMhGHff?w@AGHK FMh;@A9<KZ\sGHOj?CpJ,;ff?Zlq? LDCH;@AK>OAK Cpb2;:g[<Gp@A;m^K M=DCH;=<J,KL*CH;MhO4K P]J,KL\K@iMhK@AGEK F=DCE?F<FDGHF<I_DKJ;<?M=DCH;s GHI [lJ,;tJ,;=<JU;OA;F@AOf@A9<;h@ojK=*? @A9<OnPXK [<F<ZPXKJ>@A9D;R9<K CHK FDK MhGH^MhKLDGECH;J,KL\K@_y?^U9=*? @A9o?OY^K M=D[l@A;ZK F?uOV@,?F<Z*? J,ZBojKJAOV@,? @AGHK Fxff~+]/WGHFBCH;OAOW@A9D?F _$uOA;^K F<ZoGp@A9<K [l@[<OAGEF<I>?Fq=DJ,;wx^K M=D[l@,? @AGEK FuK P+@A9<;&^K FldDI [lJ? @AGHK FyOV=*?^;_Q8:9[<OslGp@GHOj=\K OAOAGpL*CH;s?CpL\;Gp@jOACHKomCpq s@AK;@W?=DCE?F<F<;J@A9D? @^ff?FtL\;Y[<OA;ZtGEFt?ZlqFD?MhGH^&;FbGpJUK F<Mh;F@Tom9<;J,;&@A9<;fKLDOV@,?^CH;OMR?qyMhKb2;LqBAZ<J,K=<=DGHFDI ?YF<;ooKJ,CHZhGEF@AKY@A9D;mOVqOV@A;Mc;b2;J,q_$fOA;^K F<Z"_Ql+]eGHO4b2;JAqh;R^GE;F@QL*[l@QGp@GHOF<K@^K M=DCH;@A;sDO,GHF<^;YGp@:MR?ffqyPX?GHC]@AKhdDF<Zt?n=*? @A9;b2;FGHPK F<;T;lGHOV@AO:PXKJ:@xoKRZDGpe;JU;F@J,;ff?OAK FDOL_ &[<;W@AKn@A9<;WK=<@AGHMhGEff? @AGHK Fw7L*?OA;ZuPXKJ,M>[DCE? @AGHK F\s<ffleet^ff?FyI ;@@VJU? =D=];ZLqCHK^ff?C*MRGHF<GHMR?K Pi@A9<;nKLSV;^@AGHb2;P[<FD^@AGHK F\seom9<GH^U9GHF@A[lJ,FBMR?ffq=DCE?^;n@A9<;>J,KL\K@&PX? Jf?ffo?ffqBPJ,K M@A9<;nI K2?CO,;;f GHI [lJ,;T U__m8m9<;:CH;F<I@A9 ]K Pe@A9<;:@VJU?SA;^@AKJ,GH;Oj^K F<OAGEZ<;J,;ZhMR?ffqL\;@AKK>OA9<KJA@i@AKTJ,;ff?^U9u?CHC<@A9<;m?^^;OAOAGHLDCH;JU;I GHK F<O:K Pfi@A9<;Y^K Fld*I [lJU? @AGHK FtOA=*?^;_fiGEI [lJ,;Yw;ff?^@AGpb2;TJ,;=*CE?F<F<GHFDI>GHFt?h^,9D?F<I GEF<I;FbGpJ,K FDMh;F@n ki jo'ftebde$n'bdne$jfe1fffjml#ihpbfl~<\FnKJUZ<;J @AK&LD[<GHCHZ>?^K Mh=DCH;@A;=DCE?FDF<;Jffs oj;j=<J,K=\K OA;?WOA;^K F<Zh?CHI KJUGp@A9<M ^ff?CHCH;Zl+~D\]_!z9<GHCH;@A9<;j=D[lJ,=]K O,;QK Pel+]*Ro?O@AK&CHKKfZ<GHJ,;^@ACpqfPXKJQ?:=*? @A9PJ,K M; C @AKyffC; @A9D;=*[lJA=\K OA;QK Pel+~<+\GHOj@AK^K M=D[<@A;&?Fy? =<=DJ,KlGHMR? @AGHK FK P+@A9<;WJ,;I GHK FyK P"@A9D;W^K F<dDI [lJU? @AGHK FOV=e?^;T?^^;OAOAGpLDCE;PJ,K M; C _8:9D;l+~D\?CHI KJ,GH@A9<M L*[<GHCHZ<O?Fz? =D=<J,KlGHMR? @AGEK FK PY@A9<;?^^;OAOAGHLDCH;BOV=*?^;Lq=*CE?^GHF<ICE?F<ZDMR? JAOGHFy@A9<;T^K F<dDI [lJU? @AGHK FOV=*?^; #GEFyOA[<^,9B?o?qy@A9D? @W?=*? @A9PEJ,K M@A9<;fGHFDGp@AGE?Ce=\K OAGp@AGHK FC; @AKT?FqnCE?FDZ<MR? JAfGEO F<KomF\_ FKJUZ<;J4@AKTCH;ff? J,F?OQMn[<^U9R?O4=\K OAOAGpL*CH;? L\K [l@4@A9<;PJ,;;OV=*?^;s@A9<;l+~D\y?CHI KJ,Gp@A9<M @VJUGH;O@AKhOV=DJ,;ff?Zy@A9<;TC?F<Z<MR? JAO[<F<GEPKJ,MRCpqRKffb2;J@A9<;TOV=e?^;hOA;;f GHI [<J,8; I2U_8fiKnZDKf@A9<GEOsGH@i@VJ,GH;Oj@AKn=D[l@@A9<;&CE?F<Z<M? JAOj?OPX? J:?Oj=\K OAOAGpL*CH;:PJ,K K F<;W?FDK@A9<;JLqMR?GEMhGHGHF<I@A9<;TZDGHOV@,?F<^;OL\;@xo;;Ft@A9D;My_8:9D;J,;PKJU;s*l+~<+\uMR?ffqL];YO,;;F?O?MR?lGHMhGEff? @AGHK Fy=<J,KL*CH;Mkom9<;J,;ffpfifi$vu]}s11t$v WwvLswe1}%l1rC;C;GHI [lJ,;f` =<J,KLDCH;M CH;ff?Z<GHF<Ih@AK?hCEK^ff?CfiMhGHF<GEM>[<Mt_ FOA[<^U9?^ff?OA;s\?hOAK CH[<@AGHK Ft=*? @A99D?Od<J,OV@@AKRMhKb2;n?ffo?ffqPEJUK M@A9<;>I K2?C_8:9<;TI K2?CO,? @V@VJU?^@AGHK F L*?O,;ZK Ft@A9D;fMhGHFDGHMhGHff? @AGHK FK P@A9D;Yi[<^CHGEZ<;ff?FyZ<GHOV@,?FD^;&=<J,;b2;F@AOffleePJ,K dDF<ZDGHF<InOA[<^,9?=*? @A9\_GHI [lJ,;8I8:9<;&d<J,OA@=DGH^@A[lJ,;&JU;=<J,;OA;F@AO@A9<;TGEF<Gp@AGE?Ce=\K OAGp@AGHK Fy?F<Zt@A9<;Yd<J,OA@:CE?F<Z<MR? J,*_Q8:9D;YOA[lLlwOA;g[D;F@CE?F<Z<M? JAO? J,;@A9D;F [<FDGHPKJUMhCpqOA=<J,;ff?ZKb2;Jy@A9<;O,;ff? J,^,9zOV=*?^;om9<GECH;@A9<;Mh;@A9<KZ2;;=DO@VJU?^, K PT?CHCm=*? @A9<OTSVK GHFDGHF<I@A9<;CE?F<Z<MR? J,OR@AK@A9<;GHF<Gp@AG?C=\K OAGp@AGHK F\_8:9<;?CHI KJ,Gp@A9DMGEOWF*?Mh;Z?PE@A;J>`mJ,G?Z<F<;>L];^ff?[DOA;nLq=DCE?^GHF<IuCE?F<ZDMR? JAOs"l+~<+\[<FoGHF<Z<O?O:GHPfiGp@o;J,;T[<OAGEF<I?@A9lJ,;ff?Z?O8:9<;OA;[DOZ<GHZ\__m8m9<;OA;ff? J,^,9OV=*?^;GHOn@A9<;yOA;@K P&?CHCj=*? @A9<OOV@,? JA@AGHFDIBPJ,K K F<;K Pm@A9<;=<J,;bGHK [<OACHqB=*CE?^;ZC?F<Z<MR? JAO__m8m9<;&P[<FD^@AGHK Fu@AKMR?GEMhGH;&GHO < C; >Us<o9<;J,; GHO@A9D;WO,;@:K PCE?FDZ<MR? JAOj?CHJ,;ff?ZlqR=*CE?^;Z\_ff l+]eFnKJUZ<;J4@AK&9D?b2;m?=DC?F<F<;Jfi@A9D? @QGHOL]K@A9^K Mh=DCH;@A;?F<Z;R^GH;F@s2o;^K MfLDGEF<;Zn@A9<;j@xoK&=<J,;bGHK [<O?CHI KJ,GH@A9<MhOmff<+eer?F<Zl+~<+\@AKhKL<@,?GEFy@A9<;T`J,GE?Z<FD;O^CH;o?CHI KJ,GH@A9<My_8:9D;&=<J,GHF<^GH=DCH;mK Pfi@A9<;Y`J,GE?ZDF<;O^CH;o?CHI KJUGp@A9<MGHOb2;J,qO,GHM=DCH;_mWOA;&@A9<;fl+]eB?CEI KJ,Gp@A9<Mk@AKdDF<Zuom9D;@A9<;Jm?BAOAGHM=*CH; =*? @A9y;GEOV@AOL\;@xo;;F C; ?F<Z ; C _e hoefhihUutjo#b/fl+~<+\Ffffffiy\DW$us<|t"]s|Bv}v99 v}vbcGHI [lJ,;* K [DF<^GHF<It?I2?GHFDOV@#*wxKL*OV@,?^CH;O_ufiGEI [lJ,;y7?2W=<JU;OA;F@AOf@A9<;KJ,GHI GEFD?C =*? @A9GHF@A9D;^K FwdDI [lJU? @AGHK FOV=*?^;_r GHI [lJU;LefOA9<KomO>@A9<;O,?Mh;=*? @A9|?PE@A;J@xoKL\K [<F<^;O?CHK F<I@A9<;OA;^K F<ZOA;I Mh;F@K FKLDOA@,?^CH;Tf?F<ZuK FKLDOV@,?^CH;> _Q GHI [lJ,;>^GHOi@A9D;mJ,;O,[<Cp@KLD@,?GHF<;Z?PE@A;JR?L\K [<F<^;uK PmOA;I MR;F@Rv?I2?GHF<OA@hKLDOV@,?^CH;t_ GHFD?CECpq sQ GHI [lJ,;BZ*f=<J,;OA;F@AOh?b?CHGEZ=*? @A9tKL<@,?GHFD;Z?PE@A;JW?dDFD?C]L\K [<F<^;YK PfiOA;I Mh;F@?I2?GHF<OV@:KLDOA@,?^CH;>__ PfiF<KAOAGHM=*CH; =*? @A9tGHOPXK [<F<ZLqyOV@A;= s<@A9D;Ft^K F@AGEF[<;f[<F@AGEC]?=*? @A9tGHO:PXK [<F<Z"_7 ?2WOA;f<+~<\@AKRI ;F<;J? @A;f?F<;oC?F<Z<MR? JAe_LeuWOA;>l+]eB@AKhCHKKuPXKJ?AOAGEM=DCH; =*? @A9tPJ,K @A9*? @mCE?F<Z<M? JAR@AKffC; _8:9D;m`J,GE?Z<F<;O^CH;o{?CHI KJ,Gp@A9<McomGHCHCd*F<Z?T=*? @A9GEPeK FD;m;lGHOV@AO_ F?FuKffb2;JAo9<;CHMhGHFDITF[DMfL\;JK P4^ff?OA;OsSA[<OV@&?RPX;oC?F<Z<MR? JAOm? J,;nF<;^;OAOU? JAqPXKJ@A9<;>`mJUGE?Z<F<;O^CH;o ?CEI KJ,Gp@A9<MN@AKRJU;ff?^,9B@A9<;@,? J,I ;@&?F<ZtOV@AK="_eUffjoBbn ffo jhjbdhjf5jg#f#'ftjf#m=l#e1ihkme` @ q=DGE^ff?CZ<GHR^[<Cp@qPXKJ?t=*? @A9=DCE?FDF<GHF<It?CHI KJUGp@A9<M GHOT@AKBdDF<Z?^K CECHGHOAGHK FlwxPEJ,;;=e? @A9@A9<J,K [<I 9?tO,MR?CHCQ^KJAJUGHZ<KJ>GEFr@A9<;R^K F<dDI [lJU? @AGHK FOV=*?^;_8m9<GHOTGHOn?CHOAKy@A9D;R^ff?OA;uPKJ>@A9<;hLe?OAGH^hb2;JUOAGHK FK P@A9<;`J,GE?Z<F<;O&^CH;oc?CEI KJ,Gp@A9<Mys]=<JU;OA;F@A;Z? L]Kb2;_n8m9<;f=DJ,KLDCH;MGHOW@A9D? @Yb2;JAqBP;oa@VJ?SV;^@AKJ,GE;O;F<^KZ<;jOA[<^,9n=*? @A9DOfi?F<Zn@A9<;JU;PKJ,;@A9<;q? J,;ib2;J,qfZ<GpR^[DCp@"@AKWdDF<Z\_ K OA@fi@VJ?SV;^@AKJ,GE;O4^K CHCHGHZ<;QomGp@A9@A9<;:KL*OV@,?^CH;O_ !;m=<J,K=\K OA;:?&b2;JAqOAGEM=DCH;GHZ<;ff?W@AK>Z<;ff?ClomGH@A9@A9<GHO =<JUKLDCH;MyfiI K GHF<IYL*?^,o? J,Z<Oj? @;ff?^,9^K CHCHGHO,GHK Fn=]K GEF@_ Ps2PXKJ?YI Gpb2;F@VJ?SV;^@AKJAq sl?&^K CHCHGEOAGHK FGHO4Z<;@A;^@A;Zu?CHK F<I&@A9<;^KJAJU;OV=\K F<Z<GHF<I=*? @A9\sD@A9<;Fto;fOAGEM=DCpqR^K FDOAGHZ<;J:@VJ?F<OAPXKJ,MhGHF<I@A9*? @m@VJU?SA;^@AKJAqtOAK@A9*? @Gp@m;FD^KZ<;OW?F<;o=*? @A9\sK F<;@A9D? @TGEOYPK [<FDZLqL]K [DF<^GHF<IuK@A9D;KLDOV@,?^CH;R? @Y@A9D;^K CHCHGHOAGEK F=\K GHF@OA;;h GHI [lJ,; * U_ BWK@A;@A9D? @@A9<GHOR^K FDOV@VJ,[<^@AGHK F GHO? =D=DCHGH;ZJ,;^[<J,OAGpb2;Cpq|[<F@AGHC@A9<;;F@AGHJ,;t@VJU?SA;^@AKJAq^KJ,J,;OV=\K F<Z<O@AK?^K CHCHGEOAGHK FwxPJ,;;=*? @A9\_fffifi$vu]}s11t$v WwvLswe1}%l1rW OAGHF<Iu@A9<GEO@A;^U9<F<GHg[<;s?CEC@VJ?SV;^@AKJ,GE;O>? J,;OAK@VJU?FDOAPKJUMh;Z@A9D? @Y@A9<;q;F<^KZ<;nb?CHGEZ=e? @A9<O_8:9<GEO\GHM=<J,Kb2;ZTb2;J,O,GHK FfK P@A9<;Q`J,GE?ZDF<;O+^CH;o?CHI KJ,Gp@A9<MF<K:CHK FDI ;J+^ff? J,;O ? L]K [<@+KLDOV@,?^CH;Off_filJUK@A9<;=\K GHF@YK PjbGH;oK P?yO,;ff? J,^,9GHF@A9<;@VJU?SA;^@AKJAqOV=e?^;sGp@TGHO>?OfGHPi@A9<;hKLDOV@,?^CE;Of9D?ffb2;hOAGHM=*Cpqb ?F<GHOA9<;Z"_8:9<GEO4Mh;@A9<KZGHOQ;OV=\;^GE?CHCHqf;R^GH;F@iPXKJiFD? JAJ,Ko^KJAJ,GHZDKJ,O4GHF@A9<;:^K F<dDI [lJU? @AGHK FOA=*?^;_!zGp@A9<K [l@&L\K [<F<^GHFDIsD@A9<;MR? =<=*GHF<IuK Pi?^KJAJ,GHZDKJWGHFB@A9<;^K Fld*I [lJU? @AGHK FOV=*?^;n@AK@A9<;n@VJU?SA;^@AKJAqOV=*?^;GEOT?O,;@TK Pib2;JAqPX;oa=]K GEF@AOA_ ! GH@A9L]K [DF<^GHF<Is\;b2;JAqOAGHF<I CE;f@VJU?SA;^@AKJAqrI K GHF<I@A9<J,K [<I 9?=*? JA@K P@A9D;u^KJ,J,GHZ<KJGHOAPK CEZ<;Z GHF@AK@A9<;^KJAJUGHZ<KJyOA;; GHI [lJ,;* U_8:9D;RJ,;O,[<Cp@,?F@M? =<=DGHF<IK P&@A9<;t^KJ,J,GHZ<KJuGHF|@A9<;y@VJ?SV;^@AKJAq OV=*?^;GEOR^K F<OA;g[<;F@ACpq?Mn[<^,9 CE? J,I ;JOA;@K PW=\K GHF@AOs:?F<Z@A9<;J,;PXKJ,;hGH@TGHOYM>[D^,9;ff?O,GH;JT@AKydDFDZ?yMh;M>L];JTK Pj@A9<GEOYOA;@_8:9DGHO&;M=DGpJ,GE^ff?CfiGEM=<J,Kb2;Mh;F@>9D?O?MR?SAKJm=DJU?^@AGH^ff?C+GEM=*?^@:L\;^ff?[<OA;fGp@:MR? 2;O@A9<;Y=<J,K=\K OA;Z?CHI KJ,Gp@A9<M PX?OV@A;JndDP@A;;Ft@AGHMh;OGHF@A9<;Y=DJ,KLDCH;M ^K F<OAGEZ<;J,;ZyL\;CHKoT_eb hiktjo#b!;R^ff?FF<KoI Gpb2;R?tdDFD?C b2;J,O,GHK FK Pj@A9<;h`J,GE?ZDF<;OT^CH;o ?CHI KJ,Gp@A9<Mt_ @f9D?OT@A9<J,;;hGHFl=*[l@AO$C;@A9<;uGHF<Gp@AG?C4=\K OAGp@AGHK F*UsA C;@A9<;I K2?Cj=\K OAGp@AGEK F*Us ?FDZ|@A9<;uMR?lGHMn[<M ?CHCEKffo;ZZDGHOV@,?F<^;PKJh?=*? @A9u@AKn@A9<;L#o09254:6 72ffp:,6 U_ @JU;@A[lJ,F<O?nCH;I2?Ce=*? @A9KJj@A;JUMhGHFD? @A;OGHP\F<Kn=*? @A9;lGHOV@AO? @@A9<;&I Gpb2;FJ,;OAK CE[l@AGHK F\_fiff?C; > C; ?>L];I GEFC , C;F<GH@AGE?CHGH;@A9<;TOA;@K PCE?FDZ<MR? JAOomGp@A9@A9<;YGEF<Gp@AGE?Ce=\K OAGp@AGHK F, C , "! , $#&%'ZDKom9<GHCH;n( ! *) +JU[<FffleeiCHKKuPXKJ:@A9<;fI K2?C"omGp@A9t?CEK^ff?C"MR;@A9<KZGHPMhGHF -,/. 021 < ffC; ff>C; V 2J,;@A[lJU3F `=*? @A9t9D?OL\;;FtPXK [<F<Z 4;CHO,;JU[<Ftl+~<+\Q=*CE?^;T?F<;oC?F<Z<MR? JA56#C >C; O,[l= 7,8. 091 <& ;: , >C; V+<: ,>= C! MD& <: , > C +;F<ZDGHP;FDZ<Z<K!?! @;F<ZJU;@A[lJ,F"(!+ BWK=*? @A9A4GHI [<J,;Ti8:9<;Y`J,GE?ZDF<;OmCH;o`WCHI KJ,Gp@A9DMff/Bfiy\DW$us<|t"]s|Bv}v99 v}v8:9D;T?CHI KJ,Gp@A9<M GEOL*?OA;ZtK Ft@A9<;TPXK CHCHKffoGHF<IK=<@AGHMhGEff? @AGHK F=<J,KLDCE;MhOC H 3D ,O> [lE = < &F <: , > C; VGHF<C; > C; ffG H MR> E FC; nZ<;F<K@A;OR@A9<;y;@VJU;MhGp@xqK P&?CH;I2?C=*? @A9|=e? JU?Mh;@A;J,GH;ZomGp@AJ9 IuJU;ff?C=*? JU?Mh;@A;J,Ou?F<ZVO @,? JA@AGEF<I;Gp@A9<;J:PJ,K M;ff?^U9K P@A9<;&=<J,;bGHK [<OACHqh=DCE?^;ZyCE?FDZ<MR? JAO&7l+~<+\DKJmPJ,K @A9<;YC? @A;OV@=DCE?^;ZCE?F<Z<MR? J,xff<+ee+U_8:9D;T?CHI KJ,Gp@A9<M GEOJ,;OAK CH[<@AGHK Fwx^K M=DCE;@A;Y[<F<Z<;J@A9<;TPXK CHCHKomGHF<I?OAO,[<M=<@AGHK FDOK U=*?^;dDCHCHGEF<Ir^K M=DCH;@A;FD;OAO 8:9<;BI CHKL*?C&MR?lGHM>[DM ZDGHOV@,?F<^;B^ff?FzL\;PXK [<F<Z Lq @A9<;K=D@AGHMhGHff? @AGHK F?CHI KJ,Gp@A9<M [DOA;ZtGHFtl~<\L @A9<;T^K FldDI [<JU? @AGHK FtOV=e?^;YGHOm?^K M=e?^@mOA;@_K f^K M=DCH;@A;F<;O,O fi8m9<;K=D@AGHMhGHff? @AGHK F>=<J,K^;Z<[lJU;i[<OA;ZGHFff<+eeu?Cpo?qO dDF<Z?m^K M=*CH;@A;=e? @A9rKJJ,;@A[lJ,F<O2om9<;Fu@A9<;&OV@,? J,@AGHF<I?F<Zu@A9<;&I K2?C]=]K O,Gp@AGHK F<O? J,;&CHK^ff? @A;ZomGp@A9<GHFu?nL*?CHCK PfiJU?ZDGH[<O K P@A9<;TPJ,;;YOV=e?^;_F=<JU?^@AGE^;s@A9<;dDJ,OV@4^K F<Z<Gp@AGEK F^ff?F<F<K@QL\;Mh;@QoGp@A9h?&JU?F<ZDK MhGH;ZhK=<@AGEMhGHff? @AGHK Fh?CHI KJUGp@A9<MGHF ?L\K [<FDZ<;Z|@AGHMh;sW?F<Z K FDCpqCHK^ff?CMR?lGHMR?? J,;BPK [DF<Z\_WKffo;b2;JffsW@A9<;C?F<Z<MR? JAOh=*CE?^;Z?^^KJ,Z<GEF<IR@AK@A9D;>F<;o?CHI KJUGp@A9<M ? J,;nL\;@V@A;JTZ<GHOV@VJ,GHLD[l@A;ZtKb2;JT@A9<;PEJU;;>OV=e?^;>@A9*?FrCE?F<Z<MR? J,O=DCE?^;ZtJU?F<Z<K MhCHq s<CH;ff?Z<GHF<I@AKhL];@V@A;J=\;J,PKJUMR?F<^;O_i8m9<;YI K2?CK P@A9<;TFD;@mO,;^@AGHK FGHO:@AKWSV[DOV@AGHPq@A9<GHO^C?GHMys<;=];JUGHMh;F@,?CHCpq _i0 0 6 0w 1 ON4(6 PRQTSTU 6 0 WVYX 0 46 YZ 0\[ 6 21 0wOD0FKJ,ZD;J>@AKZ<;MhK FDOV@VJU? @A;@A9<;PX;ff?OAGpL*GHCHGp@q?F<Zg[D?CHGp@AGH;O>K P@A9<;u`mJUGE?Z<F<;O>^CH;o?CHI KJ,Gp@A9<Mtso;9D?ffb2;RZ<;b2;CHK=\;Z?tJ,;ff?CHGHOA@AGH^? =<=DCHGH^ff? @AGEK FK Pj@A9<;R?CHI KJ,GH@A9<My_ !;OA;CH;^@A;Z?t=<J,KLDCE;Mom9<;J,;o;o?F@h@AK9D?b2;?r=*? @A9|=DCE?FDF<;JPKJ?OAG%fi+J,KL\K@R? J,M GEF?rZlqFD?MhGH^;FbGpJUK F<Mh;F@no9<;J,;?F<K@A9<;JY? J,MGHOm[DOA;Z?O&?hMhKL*GHCH;YKLDOV@,?^CE;_m8:9<;YJUKL]K@nJ,KL\K@`YGHO[<F<Z<;Jm@A9<;f^K F@VJ,K C K P @A9<;`J,GE?Z<F<;On^CH;o ?CHI KJ,Gp@A9DMy_ @nOA9*? J,;O>GH@AO>oKJAOV=*?^;omGp@A9?OA;^K FDZJUKL]K@uJ,KL\K@ f@A9D? @GHOMhKbGHFDIB[DF<Z<;Jn@A9<;^K F@VJ,K CmK P?JU?F<Z<K MMhK@AGEK F|I ;F<;JU? @AKJff_8:9<;u`mJUGE?Z<F<;O^CH;o ?CHI KJUGp@A9<MMn[<OV@mL\;f? L*CH;Y@AKu^K M=D[l@A;f=*? @A9<OmPXKJ`aGEFVJ,;ff?C@AGHMh; 9<;J,;sDJU;ff?C"@AGHMh;>Mh;ff?F<OWPX?OA@;F<K [<I 9@AK;F<OA[<J,;&@A9D? @:J,KL\K@:`omGHCHC]F<;b2;JW^K CHCHGHZD;momGH@A9yJ,KL\K@ U_FKJ,Z<;J@AKJ,;ff?^U9 O,[<^,9 ?rCH;b2;CmK PW=\;J,PXKJ,MR?F<^;sjo;^,9DK OA;t@AKGHM=DCH;MR;F@@A9<;`mJ,G?Z<F<;O^CH;o?CHI KJ,GH@A9<M K F|?MR?OAOAGHb2;Cpqr=*? JU?CHCE;CMR?^U9<GHF<; ;I2?FDKZ<;oGp@A98mJ JB8JU?F<OV=*[l@A;J,OUU_<[lJ,@A9<;J,MhKJ,;s\o;OA;CH;^@A;Z?I ;F<;@AGH^h?CHI KJ,GH@A9<M ?OTK [lJTK=<@AGHMRGHff? @AGHK FB@A;^,9<FDGHg[D;_>8:9<;nJ,;ff?O,K F<OPXKJ:@A9<GHO^U9<K GH^;>? JU;_ ;F<;@AGH^?CEI KJ,Gp@A9<MhO>? J,;o;CHCiOA[DGp@A;ZrPKJ>=<J,KLDCE;MhOYom9<;JU;@A9<;ROA;ff? JU^,9OA=*?^;RGHOf9[<I ;RLD[l@o9<;J,;@A9<;JU;h? J,;RMR?Fqr?^^;=<@,? LDCH;OAK CH[l@AGHK FDO_h8:9<GHOYGEOT;l?^@ACHqr@A9<;h^ff?OA;h9D;J,;_8:9D;@VJU?wSA;^@AKJAqOV=e?^;RGHO>9[<I ;hLD[l@T@A9<;JU;R? J,;s L*? JAJ,GEF<I;^;=<@AGEK FD?C^ff?O,;Os4F[<MR;J,K [<Of?^^;=<@,? L*CH;=e? @A9<O:I K GHF<IRPEJ,K ; C @AK C; omGp@A9<K [<@:^K CHCHGHOAGEK F\_MQ.fffffifi$vu]}s11t$v WwvLswe1}%l1r_ ;F<;@AGH^h?CHI KJ,GH@A9<MhOs\[<F<CEGp2;>?F[<M>L];J&K PQ@A9D;K@A9<;JTK=<@AGHMhGEff? @AGHK FB@A;^,9<F<GEg[<;O ;OAOAG&; JU;s8 ?CpLDG7s`W9[D?^@AGEF\s1x ?;Jsj JI2Usi? JU;hb2;JAq;ff?OVqr@AKGHM=DCE;Mh;F@TK F=*? JU?CHCE;Ci? J,^,9DGp@A;^w@A[<J,;O_!;f9D?ffb2;T=<J,;bGHK [<O,CpqZ<;b2;CEK=];Z?=*? JU?CECH;C\I ;F<;@AGH^f?CEI KJ,Gp@A9<M7~^]"m?F<Zyo;f9D?ffb2;?CHJ,;ff?Zlq9D?ZtOAGHI FDGpdD^ff?F@;=\;J,GH;F<^;Y[DOAGHF<IGp@T8 ?CpLDGs] v2U_v_^~ ]"4sW[<F<CHGH2;MhK OV@=*? J?CHCH;C=<J,K IJU?MhOffsOA9<KomOyCHGHFD;ff? JuOV=\;;Zwx[<=om9D;F q2K [{ZDK [lLDCH;@A9<;F[<M>L\;JiK P]=<J,K^;OAOAKJ,OQq2K [RJ,;ZD[<^;@A9<;:^K Mh=D[l@,? @AGHK F@AGHMh;Lqh9D?CHP, ?F<Z;b2;FO,[l=\;JVwxCHGHF<;ff? JOA=];;Zlwx[l=t[<F<Z<;J:^;J,@,?GHFt^GpJ,^[DMhOV@,?F<^;OT8 ?CpLDGx ;O,OAG^; J,;s+ JI2U_e^ge1oe1i'ihpihhpfhtjob;F<;@AGE^?CHI KJ,Gp@A9DMhOR? J,;tOA@AK^U9D?OV@AGH^K=<@AGHMhGHff? @AGEK F|@A;^,9<FDGHg[D;OhGHF@VJ,KZD[<^;ZLq|WK CHCE?F<Z{+*@xo;F@xqq2;ff? J,Oj?I K_Q8:9<;qn? JU;:[<OA;ZGHF?YC? J,I ;b? JUGH;@xqK P*ZDK MR?GHF<O4GHFD^CH[<Z<GHFDIJ,KL\K@AGH^O:`W9[*?^@AGHF;@fi?C7_ps 2 %?omJ,;F<^;s D?Cp2;F*?[<;1J x K [leK [DG%es *?Cp2;FD?[<;J x&;CH^U9D?MfLDJ,;s 2;qIJ,;@ x%+;bGHF<;s\ 2 L\;^ff?[<OA;Y@A9<;qy? J,;T;ff?OAqu@AKRGHM=DCH;MR;F@:?F<ZtZDKF<K@:J,;g[<GpJ,;Y?CHI ;LDJU?GH^;=<J,;OAOAGEK FyPKJ:@A9D;TP[DF<^@AGHK F@AKL\;YK=<@AGHMRGH;Z\__3`ba2`ba$c f X}+ ~<+Ad<}+9 emXJfng ]f ;e]i h8:9<;fI K2?CK P @A9<;>?CHI KJ,Gp@A9<MNGHO@AKdDF<Z?h=\K GHF@JU;ff?^,9<GHFDI?AI KKZ b ?CH[<;TK P4?RI Gpb2;FPX[<F<^@AGEK FkjKffb2;J?YOA;ff? J,^U9ROV=e?^; G _4fiGHJ,OV@s?&g[D?F@AGHff? @AGHK FhOV@A;=GHO4Z<;dDF<;ZPXKJj?F<Zh@A9<;OA;ff? J,^U9RGHO4^K F<ZD[<^@A;ZKffb2;JY?Z<GEOA^J,;@A;TOA[<LDOA;@s G PTK P G _ G PT^K F@,?GHF<O&ml;CH;MR;F@AO_ Ft=<JU?^@AGH^;s*@A9<;T^ff? J,Z<GEFD?CHGp@qK P G P^ff?FL];uo n2A7 qRff nCE? J,I ;_m<KJ&;<?M=DCH;seGHFK [lJWGHM=DCE;Mh;F@,? @AGEK FK PQl+~D\]s ff I_8:9[<Os?^K F@AGHF[<K [<O:Z<K M?GHFyGHOZ<GHO,^J,;@AGH;ZyomGH@A9t?I Gpb2;FyJ,;O,K CH[l@AGHK F\_&[lJ,GEF<IR?FGEF<Gp@AGE?CHGEff? @AGHK F=D9D?OA;n?hOAM?CHC"OA[lL*OA;@K P G P>GHOmZ<JU?omFB? @mJU?FDZ<K My_:8:9<GEO:OA[lLDO,;@mGHO^ff?CHCH;ZA? r2:r"pl% ^ 2 <_?^,9;CH;Mh;F@mK P@A9<GHO=\K=D[<C? @AGHK FGHO^KZD;ZyLqy?OV@VJUGHF<IK P LDGH@AO_8:9D;YI ;F<;@AGH^f?CHI KJUGp@A9<M Gp@A;JU? @A;Om@A9<;TPXK CHCHKomGHF<IPXK [lJmOV@A;=DOm[<F@AGEC]?hOAK CH[l@AGHK FyGEO:PK [DF<Z\_C_ ae1i'g#ejfi ?Fl@A9<;=\K=D[DCE? @AGHK Fh?^^KJ,Z<GEF<IY@AKT@A9D;:b ?CH[<;K 3P jPXKJ;ff?^U9;CE;Mh;F@jK P G P_&;^GHZD;TGHP"@A9D;YL\;OV@:;CH;Mh;F@m^ff?FtOA;J,b2;f?O?F?^^;=D@,? LDCH;fO,K CH[l@AGHK 3F lGHP+q2;Os*;lGp@_._ NhpihjjfQfiOA;i@A9<;QPX[<F<^@AGHK F j@AKmZD;dDF<;i?=DJ,KL*? LDGHCEGp@xqWZ<GHOV@VJ,GHLD[l@AGHK F&Kffb2;J @A9<;Q=]K=*[<CE? @AGHK F\_l;CH;^@?=*?GHJ:K P;CH;MR;F@AOmJU?F<Z<K MhCHqu?^^KJ,Z<GEF<I@AK@A9<GHO:=<J,KL*? LDGECHGp@xqhZDGHOV@VJ,GpL*[l@AGHK F\_v_ h n#opj g#jfQ 'QJ,KZ<[<^;T?FD;o;CH;Mh;F@mPEJUK M;ff?^,9=*?GpJ:[<O,GHF<IBAI ;F<;@AGH^ K=];J? @AKJ,O__ h n#ie$hpbdhjf2" m;=*CE?^;@A9<;;CH;Mh;F@AO>K P@A9<;ROV@,? JA@AGHF<I=\K=D[<CE? @AGHK FLqL\;@V@A;JnF<;ok;CH;wMR;F@AOm=<J,KZ<[<^;ZyGHFyOV@A;=Bv_?FqI ;F<;@AGH^uK=\;JU? @AKJ,O& Y?bGHZ<KJffs: 2? JU;u?ffb?GHC? LDCH;_Koj;b2;Jffs@A9<;uMhKJ,;u^K MhMhK F<Cpq[<OA;Z ? J,;y@A9<; qqpl7 & 2?F<Z|@A9<;9 2?6@6:032mr hK=\;JU? @AKJ,Off_ 8:9<;yMn[l@,? @AGHK F K=\;JU? @AKJ^K F<O,GHOV@AORK PJU?F<ZDK MhCptq sDGH=<=DGHF<IOAK Mh;LDGH@AOuK P?F;CH;MR;F@tK P>@A9<;=\K=D[<CE? @AGEK F\_c8:9<;^J,K O,OwxKffb2;JK=\;JU? @AKJ^K F<OAGEOV@AOTK Pd<J,OV@&JU?F<ZDK MhCpq^U9<KK OAGHF<It?u=DC?^;om9<;J,;@AKt^[<@Y@A9<;@xoKtOV@VJUGHF<I OYK PLDGp@AOs?FDZ@A9<;FLD[<GECHZ<GHF<Ih@xoKtF<;oc;CH;MR;F@AOTPJ,K M@A9<GEO&=*?GpJYLqOAGHMh=DCpqI CH[DGHF<I@A9<;J,GHI 9@T?F<Zr@A9<;CH;P@&=*? JA@AOTK P@A9<;TGEF<Gp@AGE?C*=*?GpJ:K P OV@VJ,GEF<I OYOA;;T GHI [lJU;T2U_!;[<OA;TL]K@A9BK=\;JU? @AKJ,O@AKR=DJ,KZD[<^;TF<;o ;CH;Mh;F@AO_m GpJ,OA@s*o;f[<O,;T@A9<;n^J,K OAOwxKb2;JTK=\;JU? @AKJ@AKBI ;@?FGHF@A;J,Mh;ZDGE? @A;ROV@VJUGHF<I_8m9<;F\s @A9<;uM>[l@,? @AGEK FK=\;JU? @AKJGHOn[<OA;ZK F@A9<GHOfGEF@A;J,MR;Z<GE? @A;OV@VJ,GEF<In@AKhI ;@m@A9<;TdDFD?C\OV@VJ,GEF<I_ff?Qfiy\DW$us<|t"]s|Bv}PARENTSv99 v}vNEW ELEMENTSCrossoverkfiGEI [lJ,;Y8:9D;W^JUK OAOwxKffb2;JYK=\;JU? @AGHK F"__3`ba2`vuc fX}+~<+we]" c ]+<d<}+9emXJfng]f;e]ihyx~"]+{z8:9<;JU;Q? J,;4MR?FqW=e? JU?CHCH;C b2;J,OAGEK F<O"K PI ;F<;@AGH^i?CHI KJUGp@A9<MhO\@A9D;4OV@,?F<ZD? J,ZT=*? JU?CHCH;C b2;J,O,GHK Fh&mKL\;JA@wOAK F\s + * Us @A9<;4Z<;^K M=\K OAGH@AGHK F&b2;J,OAGHK FR8fi?F<;O,;s + * +?F<ZY@A9<;4M?OAOAGpb2;CpqW=*? JU?CECH;C b2;J,OAGHK Fh8 ?CpLDG7sv2U_ !;T^,9<K O,;Y@A9<GHOCE?OA@:Mh;@A9<KZ\_Q8:9<;YMR?GEFyGHZ<;ff?GHO@AKR?CECHK^ff? @A;fK F<;Y;CH;Mh;F@mK P@A9<;&=\K=D[<CE?w@AGHK FPKJ&;ff?^,9B=<J,K^;OAOAKJWOAKh@A9*? @WOV@A;=*OT s\vs]?F<ZR^ff?FL\;f;l;^[l@A;ZGEFt=*? JU?CECH;C_<[lJA@A9<;JUMhKJ,;s@A9<;tO,;CH;^@AGHK FOV@A;=OV@A;=z GEOh^ff? JAJ,GH;Z|K [<@RCHK^ff?CHCpq sGEF@A9D? @R;ff?^,9 GHF<ZDGpbGEZ<[D?CQMR?ffqMR? @A;tK F<CHqomGp@A9@A9D;YGHF<Z<GpbGHZ<[*?CHO4=DCE?^;ZK Fy=<J,K^;OAOAKJ,O:=D9qOAGH^ff?CECpqR^K F<F<;^@A;Z@AKGp@_i8:9DGHO;F<OA[lJ,;O@A9*? @:@A9<;^K MhMn[<F<GH^ff? @AGEK FrKffb2;J,9<;ff?ZZ<K;OYFDK@&GEF<^J,;ff?OA;?OY@A9<;F[<M>L];JYK Pi=<J,K^;OAOAKJ,OYGHFD^J,;ff?OA;O_n8:9<GHOWGHO@A9<;YJU;ff?OAK Fyom9q^~ ]"O,9<KffomOmCHGHF<;ff? J:OV=\;;Zwx[<="_8:9D;m=*? J?CHCH;CDI ;FD;@AGH^W?CEI KJ,Gp@A9<MkGp@A;JU? @A;O@A9<;WPXK CHCHKffoGHF<ITPXK [lJOV@A;=DO[<F@AGHC*?nOAK CH[<@AGHK FRGHOjPXK [<F<Z\_C_ ae1i'g#ejfiiQb ?CH[D? @A;XrV X%ffD?CHC]@A9<;TGEF<Z<GpbGHZ<[D?CEO_._ NhpihjjfQQ;CH;^@X8 rV X%ff(sl?MhK F<IW@A9<;jF<;GHI 9L\KJ,Os@A9<;MR? @A;jomGp@A9>@A9<;jL\;OV@ ;b?CH[*? @AGHK F\_v_ h n#opj g#jfQ m;=<J,KZ<[<^;XrV p<omGp@A9@A9<;T^U9<K OA;FMR? @A;__ h n#ie$hpbdhjf2 ;=DCE?^;XrV X%ffl@A9<;&=*? J,;F@AO:Lqu@A9<;YKeOA=<J,GHF<I_K&FB@A9<; ;I2?F<KZ<;s\oj;GHMh=DCH;Mh;F@A;ZB@A9<;n^~ ]"|K Fr?@AKJ,[<O&K PQ=DJ,K^;O,OAKJ,OWom9<;J,;n;ff?^,9GHF<Z<G%wbGHZ<[D?C]9D?O:PXK [lJmFD;GHI 9L\KJ,OYO,;;T GHI [lJ,;ff 2ebdj /j^|#h Aj~}#g#f#jfe1oe1i'ihpia peig#e f:8 9<;j;b ?CH[D? @AGHK FPX[<F<^@AGHK F<Ofi[<OA;ZnGHFffleeu?F<Zl+~<+\>? J,;jb2;JAq>OAGEMhGHCE? Jff]@A9<;q>L\K@A9n^K Mh=D[l@A;@A9<;4d*FD?C =\K OAGp@AGHK FYK P@A9D;i? J,MI GHb2;F>? ?F<9D? @V@,?F>=*? @A9>K P?dl;Z>KJ,Z<;Jff_ FfK [lJGHMh=DCH;Mh;F@,? @AGHK F\sL*?OA;ZK F{;=\;J,GH;FD^;so;^,9DK OA;r@AK|[<OA; ?F<9D? @V@,?F=*? @A9<OtK PnKJ,Z<;J_ KWJUZ<;J|? =<=\;ff? J,;Z@AKL\;?I KKZ^K Mh=<J,K MhGHO,;yL\;@xo;;F@A9<;F[DMfL\;JRK P&CE?F<ZDMR? JAOhF<;;Z<;ZGHF<^J,;ff?OA;O?ORKJUZ<;JZ<;^J,;ff?O,;OUT?F<Z@A9<;h^K M=*[l@AGHF<I@AGHMR;hF<;^;OAO,? J,qPXKJf@A9D;hK=<@AGHMhGEff? @AGHK FPX[<F<^@AGHK F<ORGHF<^J,;ff?OA;On?OKJ,Z<;JfiGHF<^J,;ff?O,;OUU_4lGHF<^;QK [lJfiJ,KL\K@+9D?OfiOAG%ffi+*s @A9<;? J,I [DMh;F@fiK Pl@A9<;^K OV@fiPX[<F<^@AGEK FTGHFnl+]eGHO?Wb2;^@AKJGHF ,40 ,, > 0, >=> 7, >===ff> 0, >=== > 70 ?F<Z@A9<;:? J,I [<MR;F@QK P*@A9<;^K OV@iPX[<F<^@AGEK F[<OA;ZPXKJl+~<+\GEOm?b2;^@AKJ&GHF ,40 b > ,, > 0, >=> 7, >=== > 0, >===ff> 70 om9<;J,; j^KZ<;Om@A9<;CE?F<ZDMR? JA[<OA;ZR?O?TOV@,? J,@AGHF<IY=\K GHF@iPXKJi@A9<;=e? @A9\_ FhL]K@A9^ff?OA;O@A9<;mPX[<F<^@AGHK FDOi? J,;mZD;dDF<;ZhK F<CHqK F?L\K [<FDZ<;ZyOA[lLDO,;@:K P ,40 ?F<Z ,40 sDom9<K OA;YCHGEMhGp@AO:? J,;Yd<;ZLq@A9<;TMh;^U9D?F<GH^ff?C"OA@AK=DOK Pj@A9<;J,KL\K@>?F<Z@A9D;hMR?lGHM>[DM F[<M>L\;JTK PCE?F<Z<MR? J,O_` Z<GHO,^J,;@AGHff? @AGHK FrOV@A;=GHOY^,9DK OA;FPXKJ@A9<;OA;m@xoK>O,[lLDOA;@AO4LqhZ<;dDFDGHF<IW@A9<;:JU;OAK CH[l@AGHK F? @iom9<GE^,9h;ff?^U9u;CE;Mh;F@,? J,qhMhK@AGHK FRGEOiZ<GHO,^J,;@AGH;Z\_ffffzfi$vu]}s11t$v WwvLswe1}%l1rfi"HOST""ROOT"INDIVIDUALSGHI [lJ,;ff` A@ KJ,[DOomGp@A9OAG%@A;;F=<J,K^;OAOAKJUO_/K&F<;GHF<Z<GHbGHZD[D?CQGHO=DC?^;Z|K F|;ff?^,9=DJ,K^;O,OAKJff_?^,9GHF<Z<GHbGHZD[D?CD9D?OmPK [lJF<;GHI 9L]KJUO_FrK [lJY^ff?OA;s;ff?^U9& GHO&Z<GEOA^J,;@AGH;ZBomGp@A9ruLDGH@AO&?FDZ@A9<;F[<M>L\;JYK PiCE?F<ZDMR? JAOWGEOWCEGHMhGp@A;Z@AKI_f8:9[<Os\I Gpb2;Fr?LDGHF*? JAqtOV@VJ,GHFDIRK P: ffIa# LDGp@AOffs*o;^ff?Fr^K Fb2;JA@TGH@WGHF@AK?Rb2;^@AKJ7?O?F? J,I [<Mh;F@UPXKJm@A9<;Y^K OV@P[<FD^@AGHK FtK P4ffl+]e slKJl+~D\]sJ,;OV=\;^@AGpb2;Cpq _?F<9D? @V@,?Fr=e? @A9<OT? J,;;b?CE[D? @A;ZGHFr?uOAGHM=*CHGpdD;ZtMRKZ<;C K P@A9<;;FbGpJ,K FDMh;F@_n8:9<GHOWMhKZ<;CGHOKL<@,?GEF<;ZyLqu;F<^CEK OAGHF<I;ff?^U9;CH;Mh;F@mK Pfi@A9<;YOA^;FD;TGHF@AKR?nL\K [<F<Z<GHFDIfJ,;^@,?FDI [<CE? J:L\K]_8:9D;Y;b?CH[*? @AGHK FtK P ?b2;^@AKJWGEO=\;J,PKJUMh;Zy?OmPXK CHCHKffoO<KJW;ff?^,9 & GHFr ,, > 0, >=> 7, >===ff> 0, >===p> 70K M=D[<@A;&@A9<;YCHGHMhGH@AOjK F@A9<;YMhK@AGHK FPKJQSVK GHF@ A_K M=D[<@A&; &o LquL\K [<F<^GHFDI>K F@A9<;OA;TCHGEMhGp@AO&OA;;>;^@AGEK Fv_U_m=\ZD? @A;&@A9D;Y=\K OAGp@AGHK FK Pfi@A9<;&J,KL\K@_8:9D;TCHGHMhGH@AOK Ft@A9<;>MhK@AGHK FK P*SAK GHF@ ? J,;TKL<@,?GHFD;ZtLqMR;J,I GHF<I@A9D;fCH;I2?C+JU?F<I ;OWK PfiMRK@AGHK FK P+?CHC*@A9<;WCHGHFlOQ@A9*? @jMhKb2;&om9<;FYSVK GHF@ MRKffb2;OsD?F<Zy?CHCD@A9<;WKLDOV@,?^CH;O_8KnKL<@,?GHFy?>CH;I2?CeJU?F<I ;K P]MhK@AGHK FL\;@oj;;Fu?YCHGHFl?F<Zh?FRKL*OV@,?^CH;so;:^K F<O,GHZ<;JQ@A9<;@ojK>;F<^CHK OAGEF<I&=*? JU?CHCE;CH;=DGp=\;Z<O ?F<Z;=<J,;OAOW@A9<;GpJY^KKJ,Z<GHF*? @A;OYGHFB@A9<;mSVK GHF@YPEJ?Mh;_f8:9<;F"seo;[<OA;?u^CE?OAOAGE^ff?C4Mh;@A9<KZ@AKy^K Mh=D[l@A;@A9<;YJ?F<I ;& %+K ff?F<K (w '";) J,;s + * U_FtK [lJ:=e? JU?CHCH;C\GHMh=DCH;Mh;F@,? @AGHK F\so;TZ<GHOV@VJUGpLD[l@A;Zu@A9<;YI ;K Mh;@VJUGH^f^K M=*[l@,? @AGHK F<Om?MRK F<IhOA;bw;JU?C]=<JUK^;OAO,KJ,O_Q?^U9y=<J,K^;OAOAKJGHOZ<;Z<GH^ff? @A;Zy@AK@A9D;Y^K M=D[l@,? @AGHK FK P?OAGHFDI CH;W@xq=];&K PfiGHF@A;JU?^w@AGHK F\_ene1oe1i'ihpi Bbjihjbdhpfe fj^|#hoefhDih5utjobHG FD?CHCHq sl@A9<;f`J,GE?Z<FD;Om^CH;o ?CHI KJ,Gp@A9<M GHOmGHMh=DCH;Mh;F@A;ZtGHFy=e? JU?CHCH;C\oGp@A9y@A9lJ,;;>CH;b2;CHOK P=e? JU?C%wCH;CHGEOAMy_s_ K&LbGHK [<OACHq s?d<J,OA@RCH;b2;C&K P&=*? JU?CHCE;CHGHff? @AGHK F^ff?F L\;tKL<@,?GEF<;ZLq|J,[<FDF<GHF<Il+]*?F<Z<+~<\? @@A9<;O,?MR;@AGHMR;K F @xoKOA;@AOyK PY=<JUK^;OAO,KJ,O_! 9DGHCH;Bl+]eGHOu^,9<;^,GEF<Ifffffiy\DW$us<|t"]s|Bv}v99 v}vo9<;@A9<;Jh?=*? @A9;GHOA@AO>L\;@oj;;F@A9<;CE?OA@>=DC?^;ZC?F<Z<MR? JA?FDZ@A9D;I K2?Csjl+~<+\GHO;FD;JU? @AGHF<I@A9D;TF<;@:CE?F<Z<MR? J,*__m8m9<;>O,;^K F<ZCE;b2;CfiK PQ=*? JU?CHCH;CEGHOAM^KJAJU;OV=\K F<Z<O:@AK?=*? JU?CHCE;C"GHM=DCE;Mh;F@,? @AGEK FK P4L\K@A9BI ;wFD;@AGH^y?CHI KJ,Gp@A9<MROn;Mh=DCHKffq2;ZLq|ffl+]e ?FDZl+~<+\@AK@VJ,;ff? @h@A9<;GHJnJU;OV=\;^@AGpb2;K=<@AG%wMRGHff? @AGHK Fy=<JUKLDCH;MhO_v_m8m9<;&@A9<GpJ,ZCH;b2;C+^KJAJ,;OV=\K F<Z<O@AKh?=*? JU?CHCH;CEGHff? @AGHK FK P+@A9D;Y^K CHCHGHOAGEK Fu^U9<;^AGHF<IRP[<FD^@AGHK Ft?F<ZJ?F<I ;T^K M=D[<@,? @AGHK F\_!;Y^K M=*CH;@A;Zy?>PX[<CHC*GHM=DCE;Mh;F@,? @AGEK FK P\@A9D;OA;W@A9lJ,;;&CH;b2;CHOK Fy? ;I2?F<KZ<;WomGp@A9e]J J@VJU?F<OA=D[l@A;J,O_>fiGEI [lJ,;u J,;=<J,;O,;F@AOTK [<JY=*? JU?CHCH;CfiGHM=*CH;Mh;F@,? @AGHK FK PQ@A9<;`J,GE?Z<FD;OW^CE;oc?CHI K wJ,Gp@A9DM?F<Zt GHI [lJ,;nhOA9<KffoO:9<Kffooj;T9*?b2;T;M>L\;Z<Z<;Zy@A9<GEO:? J,^,9<GH@A;^@A[lJ,;TGHF@AKK [lJm;=\;J,GHMh;F@,?COA;@A[l=+_` *+|OVqOV@A;x"6 e\z&GEOY[<OA;Z@AKtMhKZ<;C @A9<;O,^;F<;omGp@A9@A9<;@ojKtJ,KL\K@AO_8:9<;nJ,KL\K@AO? J,;Y[<FDZ<;J@A9<;Y^K F@VJUK C"K >P +5 i&?qo? J,Z"s Y?F<;OA9<Mh;FDZ\s xaW?ffq? @AGs" 2U_ GpJ,OV@sD?OAGEM=DCHGpd*;Z;K Mh;@VJ,GE^MhKZD;CK Pi@A9<;>O,^;F<;GHO&Z<KffomFDCHK2?Z<;ZGHF@AKR@A9<;Mh;MRKJAqK PQ@A9D;>@VJ?F<OV=D[l@A;JUO_Y8:9<;F\s"?GHCEGH^K F JU? =D9<GE^O ojKJAOV@,? @AGHK FRojKJ,Oi?Oj?YI CHKL*?Cl^K F@VJ,K CHCE;J?F<ZhCHKK=DOQKb2;Ji@A9<;mPK CHCEKffomGHFDIWOA@A;=DO_ ;F<;JU? @A;>?FDZt;;^[<@A;>?CH;I2?C\J?F<Z<K MMhK@AGEK FtPKJmJ,KL\K@ __Wl;F<Z@A9<;F<;o^K Fld*I [lJU? @AGHK FrK PJ,KL\K@ @AKy@A9<;^K F<dDI [lJU? @AGHK FPKJ:JUKL]K@:`>_v_ ;@m@A9<;&=DC?F<F<;Z=*? @A9tPXKJ:J,KL\K@:` PJ,K @A9<;;I2?FDKZ<;?OYoj;CECQ?OY@A9<;Z<;OAGHJ,;ZBdDFD?C;I2?F<KZ<;f?F<Zt;l;^[l@A;>Gp@__ !?GH@mPKJ&?nJU?F<Z<K M@AGHMh;T?F<ZtOA@AK=tJ,KL\K@:`f__ K@AKy _8:9DGHOYOA;g[<;F<^;R?CHCEKffomOT[DOY@AKt@A;OV@nK [lJ>?CHI KJUGp@A9<M;@A;F<OAGpb2;CHqBGHFJ,;ff?CQOAGp@A[*? @AGHK F<OYLqB9*?bGHF<I@AKBZ<;ff?CioGp@A9MR?FqZ<GHe;J,;F@f;FbGHJ,K F<Mh;F@AO_$KYPj^K [<J,OA;s4@A9<;uMhK OV@nGHF@A;JU;OV@AGHF<IdDI [lJ,;Roj;u^ff?FKL<@,?GHFPEJUK @A9<GEOm;=];JUGHMh;F@mGHO:@A9D;fMh;ff?F@AGHMh;>F<;^;OAO,? JAqy@AKu^K M=D[<@A;fK F<;f=*? @A9I GHb2;FB?RF<;o;FbGpJUK F<Mh;F@_Q<KJ:@A9<GHO;=\;J,GHMh;F@,?C]OA;@A[l=@A9<GHOMh;ff?Fy@AGEMh;GEO& _fOA;^K F<Z<Off_QOAGEF<If@A9D;YO,?Mh;? J,^U9<Gp@A;^@A[lJ,;WomGH@A9MhKJU;W[<=lw7@AK wxZD? @A;W=<J,K^;OAOAKJ,O& e]J JJ2joK [<CHZJ,;Z<[<^;@A9<GHO@AGHMh;Lqu?>PX?^@AKJmK P@A;F\_i8m9<;&O,?Mh;T^K M=*[l@,? @AGHK FtK F?O,GHF<I CH;W=<J,K^;OAOAKJ>xff~+]joK [<CHZ@,? 2;Y@A9<J,;;Y@AGHMh;OCEK F<I ;J@A9D?Fy@A9D;T^[lJAJ,;F@:GHM=*CH;Mh;F@,? @AGHK F\_6+p q"qh: r 2 7 r D2mp8 qhX5 2ff2o 478rD3 2rXy< jik 6Y6 , Ar2?6@6& 4ff%4<<W e9 6Y% 5 2< 5qh 2r*%r@ 2 X(k 6U& 2 0VU r < +6*72 YhV, \9 25422 4< qh ffi+X* qV, $b 6R9 rX9 2 qRD_. 1 0 5l671 0 1 0 6j5<2671 0 g V6Fl5 26 g + 0 3 ? j26 [`WOMh;F@AGEK F<;Z|GHF@A9<; F@VJ,KZ<[<^@AGEK F\s4@A9<;y`J,GE?Z<F<;O^CH;o ?CEI KJ,Gp@A9<M9D?O@ojKrM?GHFg[D?CEGp@AGH;Off*= sD?F<Z]V (^_ %;@m[<OslGHFt^K FD^CH[<OAGHK F"s;=DCE?GEF?FDZtZ<GHOA^[DOAO@A9<;OA;Y@ojKRg[D?CEGp@AGH;O_+fifi$vu]}s11t$v WwvLswe1}%l1r+ 7;v- 6 7- ;L<7+(vv<<7v-v ;v7 v7v7-;v7 -;g8;gg8((vvGHI [lJU; i`=*? JU?CHCH;C]GHMh=DCH;Mh;F@,? @AGHK FyK Pfi@A9<;T`J,GE?Z<FD;O^CH;o?CHI KJ,GH@A9<M+fffiy\DW$us<|t"]v99 v}vRobot IIRobot6803068030KALIs|Bv}Bus VMEKALIBus VME(VxWorks)(VxWorks)Sun 4(Unix)(SEARCH)EthernetserverVxWorksGENETIC ALGORITHMSun 3(Unix)GENETIC ALGORITHM(EXPLORE)serverMegaNodeMegaNode128 TransputersACTCAD SYSTEMSilicon Graphics(Unix)GHI [<J,;i8:9<;Y;=\;J,GHMh;F@,?C\OA;@A[l=fe^g/|(jobde1f#hhjoK M=e? J,GHF<I@A9D;Q=\;J,PXKJ,MR?F<^;K Pl@A9<GHO+GHFDZTK PD?CHI KJ,GH@A9<MGHO ?b2;J,qfZ<;CHGH^ff? @A;OA[lLSA;^@_1'fi;JUPKJ,M?F<^;MR?ffqBL\;h?yM? @V@A;JnK P^K M=D[<@AGHF<I@AGHMh;sfi;eKJ,@AOfF<;;Z<;Z@AKt=<J,K IJ?MysKJn;ff?OA;hK P? =<=DCHGE^ff? @AGHK F@AKZ<Gp];J,;F@=<J,KLDCH;MROOA;;B;^@AGHK F_$ U_|Qb ?CH[D? @AGHFDI@A9<;u=\;J,PXKJ,MR?F<^;GHF@A;J,MROK P^K M=*[l@AGHF<I@AGHMh;YGEOb2;JAqyZ<GpR^[<CH@PXKJmK F<;YPX[<F<Z*?Mh;F@,?C?F<Z@A9lJ,;;Y=DJU?^@AGH^ff?C\J,;ff?O,K F<O+:fifi$vu]}s11t$v WwvLswe1}%l1r_m8m9<;tPX[<F<ZD?Mh;F@,?C:JU;ff?OAK F GEOsK F<^;?I2?GHF"s@A9<;}"~wx^K M=DCH;@A;F<;O,ORK P&@A9<;=*? @A9=*CE?F<F<GHFDI=DJ,KLDCH;My_`WOfZ<;^;=<@AGHb2;R^ff?OA;OnMR?q?CHo?ffqO>L\;hZ<;OAGHI FD;Z\s+@A9<;K F<CpqB=\;J,PKJUMR?F<^;J,;O,[<Cp@AOK FD;TMR?qJ,;ff?O,K FD? LDCpqu=<J,;OA;F@m? J,;f?CHo?ffqOOV=\;^GpdD^__m8m9<;&@A9lJ,;;Y=DJU?^@AGH^ff?C\J,;ff?O,K F<Om? J,;7?2K&LbGHK [<OACHq s@A9<;id<J,OV@+J,;g[DGpJ,;Mh;F@+PXKJfiOA[D^,9?:^K M=*? JUGHOAK FnGHO"@A9D? @ Z<Gp];J,;F@?CHI KJ,GH@A9<MhOJU[<FYK FT@A9<;iO,?Mh;4MR?^U9<GHF<;O+omGp@A9&@A9<;QOU?Mh;i?b ?GHCE? L*CH; Mh;MhKJAq _ 8:9<GHO\M?qYOA;;MO,GHM=DCH;L*[l@YGp@WGEOT?M?GHFZ<GpR^[<CH@xqGHFK [lJY^ff?OA;hL];^ff?[DOA;K [lJf?CHI KJ,Gp@A9DM9*?O&L];;FZ<;O,GHI F<;Z@AKJU[<FK FBJU? @A9D;JTOV=\;^GpdD^TGHF<ZDOK PMR?^,9<GEF<;Os\FD?Mh;Cpq s"M?OAOAGpb2;Cpqy=e? JU?CHCH;CfiK F<;O_ @^K [DCHZr?CHOAKL];nGHM=*CH;Mh;F@A;ZK FF<K Fw7=e? JU?CHCH;CMR?^,9<GEF<;Os]LD[l@W@A9<;FGp@&MR?qBCHK OA;>=*? JA@K PjGp@AO&GHF@A;J,;OV@_n`cP?GpJY^K M=*? J,GHO,K FojK [<CEZL\;>@AKy^K M=*? J,;n@A9<;h?CEI KJ,Gp@A9<MhO&K FL\K@A9@q=\;OK PMR?^U9<GHF<;Off_i8:9<GHOjoK [<CHZyGHMh=DCpqh=<JUK IJU?MhMhGHFDIK@A9<;J?CHI KJ,GH@A9<MhOGHFy=e? JU?CHCH;Cso9<GH^,9yGEOb2;JAqyZ<GpR^[DCp@jGEF=<JU?^@AGH^;_Le ?FqF<KffomF =*? @A9 =DC?F<F<GHF<I?CHI KJ,Gp@A9<MROdDJ,OV@^K Mh=D[l@A;B@A9<;^K FldDI [lJ? @AGHK F OA=*?^;KJY?F? =D=<J,KlGHMR? @AGEK FtK P Gp@UK*wxCHGHF<;s*?FDZt@A9<;F;R^GH;F@ACpqyOAK Cpb2;Y@A9<;f=*? @A9t=*CE?F<F<GHFDI=DJ,KLDCH;MK FwxCHGHFD;_&`WOWoj;O,?ffoTs"GHFBKJ,Z<;J&@AKZ<;ff?CfiomGp@A9?uZlqF*?MhGH^f;FbGpJ,K F<Mh;F@s]@A9<;`J,GE?ZDF<;O:^CH;o?CEI KJ,Gp@A9<M?Z<K=D@AOm?^K M=DCE;@A;CpquZDGpe;JU;F@m? =<=DJ,K2?^,9\_^DKJT=<JU?^@AGH^ff?C JU;ff?OAK F<Os"MR?Fq@A;OA@Y=<J,KLDCH;MROW? J,;n@AKqB=DJ,KLDCH;MhOnx4s"PX;oKLDOV@,?^CE;OsPX;o P?^;OsOAGHMn[<CE? @A;ZJ,KL\K@AOU?F<Z@A9D;=];JUPKJ,M?F<^;uJ,;OA[<Cp@AO[DOAGHF<IB@A9<;OA;GHF<ZDOnK P=DJ,KLDCH;MhO? J,;mb2;J,qhZ<GpR^[<CH@4@AK>I ;F<;J?CHGH;:@AKfJ,;ff?CHGHOA@AGH^:GHF<ZD[<OV@VJ,GE?C=<JUKLDCH;MhO7v 4s@A;F<OK P KLDOA@,?^CH;OsD9[<F<ZlJU;Z<OK PfiP?^;Os<JU;ff?C\J,KL\K@AOUU_K FDOAGHZ<;J,GEF<Ij?CEC @A9<;OA;4JU;ff?OAK F<Os oj;Q@A;OV@A;Z>K [<J?CHI KJ,Gp@A9DM{Lq&GHM=*CH;Mh;F@AGHF<I?J,;ff?CHGEOV@AGH^fiJ,KL\K@AGH^? =<=DCEGH^ff? @AGHK F@AK@A9<;Rb2;JAq;F<Z\_8KB?^,9<GH;b2;u@A9<GEOfI K2?Cs4o;u?O,OA;MfL*CH;Z?^K M=DCH;;=\;J,GHMh;F@,?COA;@A[l=zGHF<^CE[<Z<GHF<IBOAG%Z<GHe;J,;F@RMR?^U9<GHF<;OBYh" ]++}++\sJ Jv s& "}s?F<Zr= X+ X]}]]+~< eUsm@ojK|Mh;^U9D?F<GH^ff?CY? J,MROsW?F<ZzJU[<F<F<GHFDIOA;b2;F{Z<Gp];J,;F@u^KK=\;JU? @AGpb2;=<JUK IJU?MhOx++ xs\f"^ es*3 R+3 se>~+]4sD?FDZf`mJUGE?Z<F<;O:^CE;o?CHI KJ,Gp@A9DMU_K&[<J^U9D?CHCH;FDI ;o?O@AKL\;W? L*CH;m@AKO,K Cpb2;W@A9<;&=*? @A9u=DCE?F<FDGHF<IY=<JUKLDCH;M PX?OA@;FDK [<I 9@AKZlJ,Gpb2;Y?J,;ff?CeOAG%Rh? J,MkGHFu?fZlqFD?MhGE^:;FbGpJ,K FDMh;F@_48:9D;m`J,GE?Z<F<;O^CH;o{?CHI KJ,Gp@A9<MGHF<Z<;;Zu?^,9<GE;b2;Z@A9<GHOI K2?C"GEFK [lJ:;=\;J,GHMh;F@AOjom9<;J,;W@A9<;&;FbGHJ,K F<Mh;F@GHO^K M=\K OA;ZyK P"d<b2;&d<;ZKLDOV@,?^CE;Om?F<Z?OAGp? J,MMhKbGEF<IGHF<Z<;=\;F<ZD;F@ACpq _!;&? J,;:F<K@?o? J,;WK P]?FqhK@A9<;JMh;@A9<KZ<OQ^ff? =*? L*CH;:K P\OA[<^U9h=\;J,PXKJ,MR?F<^;_48fiKY@A9<;mL];OA@iK P]K [lJF<KffomCE;Z<I ;s^[lJAJU;F@ACpqnGHM=DCE;Mh;F@A;Zn=DC?F<F<;J,OojK [DCHZ@,? 2;m?&F[<MfL\;J4K PeOA;^K F<Z<O@A;F* @AK&=DCE?^;:?OA;@K P+C?F<Z<MR? JAOjK Ft?;l?M=*CH;&PKJ:?nJ,KL\K@jomGp@A9ud<b2;Yt& f?ffbJ? G\;@:?C_ps] J I2U_ W;OA=DGp@A;@A9<;YP?^@:@A9D? @dDFDZ<GHF<I?I ;F<;JU?C\=*[lJA=\K OA;=DCE?F<F<GEF<If@A;^U9<F<GHg[<;&PXKJ:J,;ff?C\GHF<ZD[<OV@VJ,GE?C]? =<=DCEGH^ff? @AGHK FGHO?nb2;JAqyZ<Gp^[<Cp@i=DJ,KLDCH;Myso;YL\;CHGH;b2;W@A9D? @@A9<;Y`J,GE?ZDF<;O^CH;o?CHI KJUGp@A9<M =<J,KbGEZ<;O?Ft;e;^@AGHb2;? =<=<JUK2?^,9t@AKROA[<^,9t=<J,KLDCH;MRO_8:9D;F[<M>L];JK PmJU?F<I ;^K M=D[l@,? @AGEK F<OPKJh? ?F<9D? @V@,?F|MhK@AGEK F|K PmKJ,Z<;JyGHO H@L s,om9<;JU.; ,GHOm@A9<;TF[<MfL\;JWK PfiP?^;Os @A9<;>F[DMfL\;JmK PQfi+*s*?F<Z H ?R^K F<OV@,?F@P?^@AKJffs]Z<;=\0;F<Z<GHF<IK F@A9<;F[<M>L\;JK P\=*? J,@AO[<O,;Zh@AKMhKZ<;C<@A9<;mJ,KL\K@_ KWLbGHK [DOACpq sO,[<^,9?fF[<M>L\;JK P\P?^;OMR?qhL\;?OA;b2;JU;TZ<GpR^[DCp@xquPKJ:@A9D;TGHM=DCE;Mh;F@,? @AGEK FyK P+@A9<;f`mJ,G?Z<F<;O^CH;o ?CHI KJ,Gp@A9<M ZD;OA^J,GpL\;ZOAKhP? Jff_8fiKOV=\;;Zu[<=y@A9<;Y^K M=D[l@,? @AGEK Foj;Y[<O,;&?F[<M>L\;JK PfiI ;K Mh;@VJ,GE^&dDCp@A;J,Oj@A9D? @J,;ZD[<^;&@A9<;&F[DMfL\;JK Pfi=*?GpJ,OK Pfi;F@AGp@AGH;O@AKL\;T?FD?CHq;Z\_WKffo;b2;Jffs+Gp@Wo?O=\K OAO,GpLDCH;Y@AKPXK CHCHKo@ojKuJ,;OA;ff? JU^,9@VJU?^,OYGHFB^K M>LDGHFD? @AGHK F"_W GpJ,OA@s*o;^K [<CHZ[<OA;R^K CHCHGHOAGEK Fr^,9<;^,GHFDIMh;@A9<KZ<Of@A9D? @n?CHCEKffo?^^;OAOn@AK@A9<;h=*?GHJ,OTGHF^K CECHGHOAGHK FrGEF?yCHK I2? J,GH@A9<MhGH^+fiy\DW$us<|t"]s|Bv}v99 v}v@AGHMh; *?b2;JSAK F/x8K [<J,FD?OAOAK [DZ\s +* U_;^K F<Z\s o;u^K [DCHZ=DJ,;OA;JAb2;=*? JA@nK P@A9<;uCE?F<Z<MR? J,IJU? =D9tom9<;F@A9<;T;FbGpJ,K F<Mh;F@:GHO^U9D?F<I GHF<I ^=%;ff?Fyx ?K F\s+ JI2U_febd hhjf#hjoe1i':8 9<;W`J,GE?Z<F<;O^CH;o?CHI KJUGp@A9<M GHOI ;F<;JU?C\GHF@A9<;&OA;F<O,;@A9*? @GH@M?qRL\;W[<OA;ZPXKJ:F[<MR;J,K [<O?F<Zb2;JAqtZ<GHe;J,;F@W? =D=DCHGH^ff? @AGHK FDO:GHFyJ,KL\K@AGH^Off_ ?O,GH^ff?CHCpq s*@A9<;fMR?GEFt@A9<GHFDI@A9D? @FD;;Z<O:@AKL\;T^,9D?FDI ;ZGHFy@A9D;f?CHI KJ,Gp@A9DM GHO@A9D;TZ<GHOV@,?FD^; u[<OA;ZtGHFt@A9<;T;b ?CH[D? @AGHK FP[<FD^@AGHK F<O:K Pfi@A9<;Y@ojKuK=<@AGHMRGHff? @AGHK F=<J,KL*CH;MhO_;b2;J?C<=DCE?FDF<;J,O 9D?b2;mL\;;FhGHM=DCE;Mh;F@A;ZGEF@A9<GHO o?qei?&dDF<;MRK@AGHK F=DCE?FDF<;J:& &;mCE? K O,?s%?[DI GH;Jffs x B&?SV;J?s J I2UsQ@xoKMhK@AGHK F=DCE?F<F<;JUOTPKJ9<K CHK FDK MhGH^R?F<ZF<K Fwx9<K CEK F<K MhGH^hMRKLDGHCH;J,KL\K@AOmxl^,9<;[<;JxlJU?GH^U9D? J,Z\s* +* UsD?YJ,;KJ,GE;F@,? @AGHK F=DCE?FDF<;JiPXKJj?F? JA@AGH^[<CE? @A;Z9D?F<Z" [l=<@,?s2 Usj?=DCE?FDF<;JfPXKJIJ?OV=DGHF<I?F<ZJU;IJU?OV=DGHFDI`W9[D?^@AGEF\s [l=<@,?ws x ?;Js: 2Usj?F<Z?=DCE?FDF<;JhPKJ?rJ,KL\K@AGH^? J,M =DCE?^;Z GHF|@A9<;OV@A;ff?M ;FD;JU? @AKJyK P&?F[D^CH;ff? Jh=DCE?F@ =^ %+;ff?F x?K F\s: J I2U_`WZD? =<@AGHFDIt@A9<;y?CHI KJ,GH@A9<M@AK?BF<;o ? =<=DCHGH^ff? @AGEK FGHOffsfi@A9D;J,;PKJU;si^CH;ff? J,Cpq?b2;JAq;ff?OVq@,?OV*_<KJmGHF<OA@,?F<^;s@A9D;&? =D=DCHGH^ff? @AGHK F@AK=*? @A9u=DCE?FDF<GHF<ITPXKJ@A9<;&F<K Fwx9DK CHK F<K MhGH^m@VJU?GHCH;Jo?OZ<;b2;CHK=\;ZtGEF@A9lJ,;;YZD?ffqO_8:9D;i`J,GE?Z<F<;O^CH;o|?CHI KJ,Gp@A9<MGHOfi?CHOAKmI ;FD;JU?CGHFT@A9<;OA;F<OA;@A9D? @ Gp@M?qTL\;Q[<O,;Z>PXKJ ?FqTGHF<ZK P =*? @A9=DCE?F<F<GEF<In=<J,KLDCH;M GHF?h^K F@AGHF[<K [<OOV=*?^;s]GHFydD;CHZDO:K@A9<;JW@A9D?FtJ,KL\K@AGH^Off_`WCp@A9<K [DI 9tGp@MR?ffqfL\;iOA[<R^GH;F@@AK&^,9*?F<I ;j@A9<;Z<GHOV@,?F<^;P[DF<^@AGHK "F ls2K F<;MR?ffqn?CHOAKW^K F<OAGEZ<;Jfi^U9D?F<I GHFDIm@A9<;jPXKJ,MK PQ@A9D;P[<FD^@AGHK F ls"KJf;b2;F@A9<;F*? @A[lJ,;K PQ@A9<;O,;ff? J,^,9<;ZrOA=*?^;O_<KJfGHF<OA@,?F<^;s\@A9<;^K F<^;=<@TK PKLDOV@,?^CE;O4MR?qTL\;J,;^K F<OAGEZ<;J,;Z\_ F<OA@A;ff?ZnK PQA9D? J,Z KLDOV@,?^CH;Offs2K F<;^K [DCHZfJU;=DCE?^;@A9<;MLqfK FD;OK PQ^K F<OA@VJU?GHF@AO_ F@A9D? @Y^ff?OA;s\@A9<;>=*? @A9B=DCE?F<F<GEF<I=<J,KLDCE;M Z<K;O&F<K@W^K FDOAGHOV@WK P4dDF<Z<GEF<IR?R=*? @A9omGp@A9DK [l@^K CHCEGHOAGHK F<OmLD[l@WJU? @A9<;J&dDF<ZDGHF<IR?=*? @A9BL\;OV@&O,? @AGHOAPqGEF<Ih@A9<;Z<GHe;J,;F@&^K F<OV@VJU?GHF@AO_>[D^,9?>=DCE?F<FD;Jj9D?OL\;;FZ<;b2;CHK=\;ZyPXKJ:?FD?b ?C\? =<=DCHGH^ff? @AGEK Fo9<;J,;@A9<;W=<J,KLDCH;Mko?O@AKdDF<Z?>=*? @A9PXKJ?L\K2? @omGp@A9b ? J,GHK [<O^K FDOV@VJU?GHF@AO:K Ft@A9D;&@VJU?SV;^@AKJ,q _8:9<GEOK=];FDOF[<MR;J,K [<O=\;J,OV=\;^@AGpb2;OK P? =<=DCEGH^ff? @AGHK F<O PXKJ? =<=DCpqGHF<I@A9<;`J,GE?Z<FD;O4^CH;o ?CHI KJ,GH@A9<MaGHF?&L<J,K2?ZD;J4dD;CHZ@A9D?F=D[<J,;jJ,KL\K@AGH^O_? juihUotbdhpfNf8:9<;n?[l@A9<KJ,O&? J,;>IJ,;ff? @ACpqGHFDZ<;L<@A;Zy@AKWJff_f?M?C [l=D@,?RPJ,K MlGHMhK F<JU?OA;JYFDGpb2;J,OAGp@qom9<K^ff? J,;PX[<CHCpqfJ,;ff?Z@A9<;=*? =\;Ji?F<ZO,[<I ;OV@A;Zb ?CH[D? LDCE;j^KJ,J,;^@AGHK F<O4@A9*? @QIJ,;ff? @ACpqGHM=<J,Kb2;@A9<;g[D?CHGp@qK Pfi@A9<;&dDFD?C]=e? =];J_8:9DGHOojKJ,9*?OL\;;FtMR?Z<;Y=\K OAO,GpLDCH;Lqew %;>;F@VJ,8; B&? @AGHK FD?C+ZD;YCE"? m;^U9<;J,^,9D;n^GH;F@AGpdDg[<;lJU?FD^;Us]K F<O,;SVK B&?^GHK FD?C+Z<;fGH;F<^G?nqu8fi;^F<K CHK GE?t ;lGH^K:?FDZtDff~<f <ers 'j 7<D]U_0`W9[D?^@AGEF\s<_ps [l=D@,?ss_psx? ;JffsYm_& 2U_ ?FDGp=D[<CE? @AGEK F'CE?F<F<GHFDIPKJ;Z<[<F<Z*?F@KL\K@AO ` 'QJ?^@AGH^ff?Cf`=<=<J,K2?^U9\_\l *x* &2* 2mp* 225422=6w::6ffAVs9*(* Us*v * 5*_`W9[D?^@AGEF\s{<_ps ?;Jffs4:_ps ;O,OAG^; J,;s'fi_ps1x 8 ?CpLDG7s:_Q 2 U_tWOAGHFDI ;F<;@AGH^`CHI KJUGp@A9<MhOYPXKJKL\K@ K@AGHK F'CE?F<F<GEF<I_ F92ff,o J6s2@:<8p92:rA J2 ffA*s2W ff*xX(p*Us<=<="_ I+* I+* _+@fifi$vu]}s11t$v WwvLswe1}%l1r? JAJU?g[D?F<Z\sLl_psx %fi? @AK MfL\;sil_fi J2U_Y` K F@A;h? J,CHK`CHI KJUGp@A9<M PXKJ' ? @A9$'CE?F<F<GHFDIomGp@A9?Fq W;IJU;;OjK P]lJU;;Z<K My_ F~92ffUUoXJ6.2@W<fifi Dx* &2*2{2 V*U2 k2542 7 6^pl2qh &2<s*=<="_\p* Dp*p*_;OAOA&G ; J,;8s 'fi_psT8 ?CpLDGs&:_psY`W9[*?^@AGHF\s l_p8s x ?;JffsTm_f JI2U_NWF`WCHI KJ,Gp@A9<MR; ;) F ;) @AGHg[D;'4? JU?CE^C ; CHCH;W=\K [lJjC7 KW=<@AGHMhGEO,? @AGHK F\_ eA <( pDn* *ff*U =2: q2b p<s 72Us+ ff2 vJ_J,KKOs T_ v2U_|lK CpbGEF<It@A9<; GHF<Zl(w ' ? @A9 'iJ,KLDCH;M Lq KKZ ;=<J,;OA;F@,? @AGHK F|K P:@A9D;u<J,;;=*?^;_ lV 62ff& 2 62?6x7 q ^ o54,Ueff= 6Us UsfiJ D+ *_?F<Fq ^s <_" 2U_ \2Jqre% n ^ D2@25422 2 & 2%<<X2_8 'iJ,;OAO_Y?bGHZ<KJffs _fi 2U_>`FD?CEK K [<OTjJ,K OAOAKb2;Jff_F 9 2ff,o J 62@< \X DxUe ^ 2 * 2 0ffAeU"2:]& & U 2X< 5q6s<=<="_D Dff v_&;mCE8? mK O,?s_ps %?[DI GH;Jffs&_ps xMB&?SA;JU?s <_D J I2U_ KLD[<OV@ '4? @A9 'iCE?F<FDGHF<I&GHF@A9<L; 'iCE?F<;_<V 6ff& 2 6"225422= 6n^ pl 2qh & 2<{s mfi7v2Us\v5 * v2 _D?Cp2;F*?[<;JffsDm_ps x K [leK [DG%es*]_" U_j` ;F<;@AGH^f`CHI KJUGp@A9<M PXKJ 2KL9DK="_F 3 2U, X 62:<fi DxUe ^ 2 * \ 2 V*U 2 254@2 = 6^ pl 2qh & 2<s2=D="_2 / 2_D?Cp2;F*?[<;Jffs\:_ps x &;CH^U9D?M>L<J,;s\`f_ 2 U_Y` ;F<;@AGE^>`WCHI KJ,Gp@A9DM PXKJ GHF '4?^AGHF<I?F<yZ %GHF<;?CE?FD^GHF<I_ WF 3 2ff, 6y2@t<fim Dx* & 2* 2 ffA* 2 2U42 7 6^ pl 2qh & 2<sD=D="_] J ID 2_D?ffb2;JSVK F"s _ps x8K [lJUFD?OAOAK [<Z"s '_ + * U_` %+K^ff?C ?OA;Z|`m=D=<J,K2?^,9|PXKJ '4? @A9 'iCE?F<FDGHF<IK P?F<Gp=*[<CE? @AKJ,OomGp@A9u?fWGHI9 B[DMfL\;JK P &;IJ,;;OK P"lJ,;;ZDK My_F 3 2U, X 6A2@&< fi 9DxU*2^ 2e 2 V*U"2 k2542 7 6^ pl 2qh & 2<s*=<="_\ _<;JALe?^,9\fs 'fi_+ J I2U_K F@VJ,GpLD[l@AGEK FF ?h CE? 'CE?F<Gpd*^ff? @AGHK FyZ<;T8JU?SA;^@AK GpJ,;O_ ? =<=\KJA@Z<.; m;^U9<;J,^,9D;&+(w & '4w J 2 &GpJU;^@AGHK FtZ<;O i) @A[<Z<;O:;@ m;^,9D;J,^,9<;Ow &j_[l=D@,?s h_] 2 U_ K@AGHKF 'CE?F<F<GHFDIfPXKJ ;`w KWJ,GH;F@,? @AGHK FyWOAGHF<In GHF<I ;J8JU?^AGHF<I %fi?F<Z<MR? JAOGEF G 7v2 ff_ kF 9 2ffUUo X 6A2&< l fifi Dx* & 2*2 2 ffA* 22U42 7 6^ pl 2qh & 2<sD=D="_l + _&?qo? J,Z" fi>_ps Y?F<;OA9<MR;F<Z\s %Q_ps x&?q? @AGs]_m 2U_`F KWb2;JAbGH;o K P Ts` % i`qOV@A;M@AK 'iJ,K IJU?M ?F<ZK F@VJ,K CTKK=];J? @AGpb2; ?F<GH=D[<CE? @AKJ,Off_ F 9 2ffUUo X 62@<2mp<*x* & 2* 2 ffA*2 mr eUo 2542 7 6sD=<=+_*Jv + _WK CHCE?F<Z\is <_ + * U~_ 2: re7 ^ 2 |f b pV i6 W > ?6x= qA6_nWF<Gpb2;JUOAGp@xqBK P GH^,9DGHI2?F'iJ,;OAO_o?F<Is _ps x `W9[ SA?s B>_m 2 U_ J,K O,O K@AGHK /F 'CE?F<F<GHFDI`[<JAb2;q*O_ 2qsr"pl"p r= ?6Uis j7v2U_f?ffbJU? Gw%i_psjb2;OV@V ?s 'fi_ps %? @AK M>L];s l_ps x K&b2;J,MR? J,Os _ J I2U_ 'QJ,KL*? L*GHCHGHOV@AGE^ mK2?Z<M? =DOPXKJ '4? @A9 'iC?F<F<GHF<IfGHFGHI 9l(w WGEMh;F<OAGHK F*?C]K F<dDI [lJU? @AGHK Ft=e?^;O_ lV 62ff& 2 6A22542 7 6^ pl 2qh & 2<{s Us" IJIJ _%?ffo:J,;F<^;s >_iZ\_$U_+ U_ >^ 54@2 2D2:eff & 5 2 U< 5q6U_ fii?F BWK OV@VJU?F<Z ;GHF<9<K CEZ\_+Bfiy\DW$us<|t"]s|Bv}v99 v}v%+GEF\s>_ps&GE?Ks2l_psx GH^U9D?CH;omGH^sfi_* U_ Qb2K CE[l@AGHK FD? JAqB&?bGHI2? @AKJ:PXKJ? KLDGECH; mKL\K@_ F32 U,X62@Y<fi Dx* &2*22 ffA*2 254@2 76T^qpl2qh ^2 <s=D="_* J _%+K ff?FDK w(';) J,;s]8Y_" +* U_j`aGHMh=DCH; K@AGHK Flw('iCE?F<FDGHF<I`CEI KJ,Gp@A9<M PXKJ ;F<;JU?CmKL\K@[DCE? @AKJ,O_ lV6 2ff&2 62 254@2 =6n^p2Jq2^2Dsfi7v2Us] /v _?F<Gp=lw^=%+;ff?F\sj`f_psx ?K F"s8Y_ JI2U_ F<^J,;MR;F@,?CK2?Z<MR? =DO?F<Z CHKLe?C'4? @A9'CE?F<F<GHFDItGHFib2K CpbGHF<I F<Z<[<OA@VJ,GE?CiFbGHJ,K F<Mh;F@AO_ F'32ff,6$2<fi DxUe ^2 *2 V*U2 25422=6n^pl2qh &2<sD=<="_\ffDffJI_;qIJ,;@s`f_ps x %;bGHFD;s _& 2 U_4@VJU?^@AGHK F Z<; 'iJ,GHMhGH@AGpb2;O ;) K M;) @VJ,GHg[<;Om@AGHCEGHO,? @AGHK FZ"[<Fh`WCHI KJ,Gp@A9<MR; ;) F ;) @AGHg[D;_ ? =<=\KJA@Q`WF<F[<;Cs;F@A;JPXKJ F@A;CECHGHI ;F@ ?^U9<GHF<;Os ^ GHCHCWF<Gpb2;JUOAGp@xq K F@VJ ;ff) ?C_KWb2;J,M? J,Os _4 2 U_T` ?FDZ<K M`m=<=DJ,K2?^,9@AK K@AGHK $F 'CE?F<F<GHFDI_:8;^U9<F<GH^ff?1C m;=\KJAs@ mwmw2wv2s &;=*? JA@AMR;F@WK P4K M=D[l@A;J^GE;F<^;s<m@VJU;^,9@WWF<Gpb2;J,O,Gp@xqe_mKL\;JA@AO,K F\s _ + * U_ '4? JU?CECH;C M=DCH;MR;F@,? @AGHK FnK P ;F<;@AGE^`WCHI KJ,Gp@A9DMhO+GHFn?WCE?OAOAGpd*;JfiqOV@A;My_F Y?ffbGHOffs %Q_+Z\_$Us :e& & 5 2< 5q6n^ Dk qqpl2xo W<]A $ _ KJ,I2?yF f?[<PXMR?F<F'[lLDCHGEOA9<;J,O_^U9<;[<;Jffsj`f_pws xlJ?GH^,9D? JUZ\s8Y_ + * U_ K F@AGHF[<K [<Ow[lJAb ? @A[lJ,; ' ? @A/9 'iCE?F<FDGHF<IPXKJ? JV(w %Gp2;fiQ;9DGH^CH;O_ F 9 2ffUUo X 6 2@< T!9 DxUe ^ 2 * 2 V*U2 DxX(pD2542 6^ ?6x7 q6Us<=D="_D + * Dff J v_8 ?CpLDGs :_ v2U_ &X 2, & 2'~9 2ffU7 6@6pU66+p%7 6qWV xAb pV7 6: X " p: 6# " %= $ q2 '&fb 6:04p ,$ w_ 'i9\_ n_l@A9<;O,GHOs F<OV@AGp@A[l@ B&? @AGHK FD?C 'fiK CHq@A;^U9<F<GHg[<;YZ<; JU;F<KLDCH;WwilJ?F<^;_8 ?CpLDGsQm_ps x ;OAO,^G ; J,;s 'fi_: J I2U_` '4? JU?CHCH;C ;FD;@AGH^y`CEI KJ,Gp@A9<M`=<=DCHGH;Z@AK@A9<; ? =D=DGHF<I'iJ,KLDCH;Mt_ F|`WOV@APX?CH*s _:iZ"_$Ur+r*$U & 2 6-2tmr eUo YWV Xx,ffb pV 2qsr"plx@ 6_` _8 ?F<;OA;+s T_ + * U_ '4? JU?CHCH;C ;F<;@AGE^`WCHI KJ,Gp@A9DMPXKJ4?q=\;J,^[lL\;_ F 9 2ffUUo X 62< l e,@ 26*x* & 2* 2 ffA*2:]U 2U< 5q6Us*=<="_\p *J* v_&GE?K6s <_ps GE^,9D?CH;oGH^ms fi_ps x ]9D?F<Is %i_+ J I2U_:Qb2K CE[l@AGHK FD? JADq 'iC?F<F<;J B&?bGHI2? @AKJff KW=\;JU? @AKJ' ;J,PXKJ,MR?FD^;&?FDZyl;CHPHwx8fi[<F<GEF<I_ kF 3 2ff, 6A2@&fi *x* & 2* 2 V*U2 kr?2 pl^ 2 *: 2qsr"pl7 & 2<se=<="_Dv Jv I+v * _+fifffi! #"$ %'&)(+*, ((-/.0, 1(32', 4456789 :+;<(-!=?>7 %&:@, A/<(-BDCFEHGJILKMONQPRETSLEHU6U/NVUXWYI0NZSLE)I0K/M@N\[]NVNVG^NV_FK_a`cbdNZETSLegfhjikml#nporq)sJtLtmuO'r{?Zx'x/x@?Y@rY/ffJff?0+ff?+a?L+ff?)Ypvxwwmy{zOvx|}m~g~}mq+skmik$l#nxvmm}zO|6/|6{~}mO'r{?Zx'x/xa$+ffFa/+a??0@!/3HY!)LY?ff?$3) 3Y/?Y6/+6!#6!3@?)6J3)6?3F?3@ /!VV3YO @?L36@6+?a3/336/@33?/x@36/d??Z?39d?Y!3J?6ff@6H?r??{?^ 3!?36+3 !??6Y3?)m3H !?d3/!6#?#3@6J?d3!3Z?r? 6!3#3Y !?33?/!T?{Y3?/?9 !?6^3?YT!Z336339!?66@3V m}ym 3a9/6LZY/{??ffx336Z??63 63mr63?0?F3/36?0?6@#3?@!!Z3J363j?Y!@F?V?3 !?3^936O@Z6?3!6036gZ?3x6?6Or@d aH66?r@3aY $}y 6Z6336)63/3O !?a/a@6?36/3T?O6/g3+33?Z636 $}y #636 !dF3L/!!m 3!/?r 3?6mF@3336 9!+63?!F3 3^63Y?T?3?3360 3Y/?g63/!0?3T?3O $}y Y3O?3Z36 !33?66{ ! / 3/!##VH!336/)H63dr6H?36fiff V!"$#%'&()$*)+,-!*)-!.0/12&"3(4-!5768)fi*)9fi#-!&":3;&"$)+,#-<(!):357"&5=>";:3?(@ACB#:357&(!9D:";:?3():3E.#-F&57-F4A7ACGH"IJ9fi#:3>.KL5C-F&M9&()#8*4N#%O";:3?(!57-)BP&():#)B(J&()LA=;:BQ+4..:;&"*HR8GS&()"fiACB#:35C&(49TM/'*)U;-!.V57-S+4;:3A=ACAW-!*X*!57"&":357R4)&"*S.#9fi+4)&57-!BL#;Y,:N+,#&"-[Z&57A7A7GNA7;:B\57-!.:]5=-M+,:%^#:39-4.&"#V!?(_.#9fi+4)&".Z`57-F&"-!57U&I8TW1a-E:"+,#-!"Db-F492R,:#%W+4;:3A7A7Ac;+4+!:#3(!d(!eU2R,-$*)UAC#+,*$&"#>5=9fi+!:#fUNU;:?5C#!\";:3?(gACB#:?5C&(!9\57-4A7!*!57-!B*)+!&()Zih4:3"&N";:?3(kjml2!9;:Mnpod;#)Drqss;tvu?DR!:3-!?([Z`-!*[ZR,#!-!*X";:?3(wjm/dB:3exADyv-!;I[5C:39$Dn{zg(!:#&":3[Dqs||u?D4/2}jm~U&"&D4-!*!AC:D8zP(4-v&5iD!n{'qss84zP(4;+4;&":3fin{'!&"&Dqssu?D1aO/N}XjmzP(!-F&5nb-!57A7Dqss8]#exdACGD]):B!#-D]nlV#:3%Dqss8]#exdA7GHnlN#:%Dqss[qeu?D-!*SB9fifi&":fi";:?3(jm)A=*!9-!-zPG83A75Cxd5C&"DnzP#-!5C-DqssFu?DbxA7AWb&"#$579fi+!:3#eU_&():3!-P&579fiE#%+c5Ch2;+!+A757;&5C#-!'!?(Xb&()Eh4%&"-S+4!ACM+4:#R4AC9jmlN!9;:Nnod;#)Dqss;tvu-!*:#R,#&0;:39+4;&(+4A7-!-457-)Bkjr(4A7AC#D'V57-!5iDdnlN!9>;:D2qssu?T1-w*!*!57&5C#-&"#zP1zSr`= f, ((- %% !:3H: /L!fi8ZY7! %&% &/%m% / :fiP#$}wwyXm$!* 57&":35CR4)&"*)Z`9fi9fi#:G>A7B#:35C&(!9D)+4;:3A7ACA;:33(SACB#:35C&(49\(!UMR,-*)UAC#+,*$%^#:zP1zS(!;:3*[Z`9fi9fi#:G<"G["&"9gjmlNA7gn[AC&"#:Dbqss;t[l2!9;:>nod;#)DVqss;tvu-!*81azP;:3?(!5Z&".&):Sj#8#InG#-!Dbqss8b~U&"&>&LAiTCD'qss8'lN;:G8+457nl2!9;:D'qss8'zS(!-F&5dnb-!5CA7Dqss8!]#exdA7Gfi&AiTCDcqssu?Tw(!57AC\.)57"&57-!B2;+!+!:#?()&"#2+4;:3A=ACA!";:3?(L(4Ub9-vG.#-F&":35CR4)&57#-!N&"#X#;Y,:D.#9fi+4;:35=-)Bg&()0;+4+!:#3(!E-4**)&":?957-!57-!B&()QRc&M!"Q#%O?(.#-F&":35CR4)&57#-fi57*!5KQ!AC&WR,!"\#%,&()d*!57U:3"O";:3?(LA7B#:35C&(!9D579fi+4AC9-v&;&5C#-+4A7;&"%^#:39D-!*;+4+4A757;&5C#-4:3+c#:3&"*57-0&()2A=5C&":3;&):T1a-:"+,#-!"S&"#&(!57L+!:#R4A79$DOxX(4U*)UAC#+,*&()J\!{+4;:?A7ACA'";:33(w-!B57-)&(!;&.#9MR457-)fi9>-vG<#%d&();+!+!:#?()&"#H+4;:?A7ACA()):357&57L;:33(!]jr#F#In;:3-)A=AiD\qssu_57Eg+4;:?A7ACA1aO/2}g";:3?(;:33(!57&".&):Q&(!;&fi9fi:Bfi9E!AC&5C+4A7>;+!+!:#?()E&"#&"I<*!57"&":357R4)&5C#-D]AC#*R4A7-!57-!B)D-!*J&":3Q#:?*):357-)B)D-!*-<R,L:?!-J#-XzP1zS3(!;:*9fi9fi#:3GS#:E*!57"&":?5CR4)&"*X9fi9fi#:3GP+4;:?A7ACAW+!:#[."#:eD]*457"&":35CR)&"*X-)&`x#:IX#%rx#:I["&;&5C#-4D#:0J57-!BAC93(457-)gx5C&(@9E!AC&5C&():3*!57-)B)Tw357-)B#):Q.#A7AC.&5C#-#%N";:3?(A7B#:35C&(!9Dx+,:%^#:39&(!#:&57Ab-!*k9fi+45C:35=Ad.#9fi+4;:?57"#-!Q-!*k#R4":UX&(!;&0+,:%^#:39-!.P&":-!*!Q*)#.)57"&fifi";:3?(@"+4.$%^;&):;:3QU;;:35C*TJ#;+5C&A75C0#-&()"$&":3-!*!DO!]!"fi9?(!57-)2A7;:3-!57-)BG8"&"9p&"#>+!:3*!57.&\&()M#+!&579A&d#%W+4;:3A7A7A";:33(S"&":3;&"B57d%^#:>B5CU+!:#RAC9$D[xd(!57?($;:N&()-g!"*$&"#>.#9+4AC&"N&()N;:33(g&"ITXV { LFmW fi 0``4bW$ 0v/-8!92R,:#%:";:3?():3r(!U'.[+4AC#:*L9fi&()#[*!%^#:5=9fi+!:#fU857-!BV&()d.KL57-!.G#%";:3?(L457-)B+4;:3A=ACA(!;:?*)x;:3TgH0xd57A7A%#[!E57-&(!5=2+4;+,:M#-+;:3A7ACA";:33(<&"?(!-!5768)M&(!;&fi-R,;+!+4A=5C*&"#1aO/2}J";:33(T1aO/N}+,:%^#:390":357L#%E57-!.:9-v&A7A7GvZ`*)+,-!5=-)BJ*)+!&()Zih4:3"&";:3?()M&():#)B(H&(!L";:3?(+4.TL1a-?(57&":3;&5C#-&(!:#)B(H&()L"+4.DW&()>*)+4&(H#%\&()";:3?(57M.#-F&":#A7A7*JR8G-/2}$.#"&_&():()#A=*T$1%OPB#Ar-)#[*)L57M-)#&E%#!-4*J*!):?57-)BPB5CU5C&":3;&57#-D];:33(<R,B57-!M;&2&()Q:#8#&M-)#[*)xd57&(Jg.#&M&():3()#A7*"&2&"#S&()L9>57-!579E!9j^uU;A7)r57-2&(!";:?3(fi"+4.r&(!;&].).*)*_&()r+!:U[5C#!&():(!#A7*T1aO/2}d57-_*!9>575CRAC";:3?(ACB#:357&(!9xd(!57?(0:68!5C:\-P9fi#!-F&\#%W99fi#:G0A757-);:O57-0&(!2*)+!&(0#%W&()N"#A=)&5C#-1a-fi&(!57.&5C#-xOxd57A=Av:U[5Cx@.)57"&5=-)BV9fi&()#[*!%^#:+4;:3A7A7A75C57-)B'1aO/N}'";:33(T1-fi+;:&57[ZA7;:D)xVxd57A=A.#-!357*):OAC&":3-4;&5CUV&"3(!-4576F!\%#:d&"IQ*457"&":35CR)&5C#-DF%#:d*!G8-!9>57A7ACGfiR4A=-!57-)Bx#:ILR,&x-g+!:#[."#:3D-!*0%#:3(!-)B5=-)B&()NAC%^&aZ&"#;Z:35CB(F&d#:?*):\#%W&()N";:3?(g&":Tqi)k!?u hji^ i^W itl/";:3?(PA7B#:35C&(!9579fi+4AC9-v&"*$#-S+;:3A7ACAG8"&"9:68!5C:dR4A7-4.*g*!5CU[5757#-0#%x#:IR,&`x-w.#-v&":357R4)&57-)BJ+!:#[."#:3L&"#:*!!.S57*!AC&5=9fiP-!*957-45795C$:*4!-!*!-F&>#:Qx&"*.Y,#:&Tb-)X9fi&()#[*#%2*45CU85=*!57-)BH)+&()Sx#:Ik57-1aO/2}";:33(5=>xd57&(+4;:3A7ACAdxd57-!*!#ex";:3?(jm!u?D)57-F&":#8*4!.*>R8G>]#exACGL-!*0lV#:3%jaqss[qeu?T'57-!BMcD[3(0+4:#8.3"#:\57B5CUX.#+FG<#%d&(!Q-F&5C:$";:?3(&":$-!*H!-4576F!L.#"&fi&():3()#A7*THO(!Q+4:#8.3"#:3_";:3?(&()9fiH&":3&"#*!5Y,:-F&0&():()#A=*!$579E!AC&-)#4ACGT1%E+!:#[."#:g.#9fi+AC&"-5C&":?;&5C#xd5C&(!#)&dhc-!*!57-)BQ$"#A7)&57#-5C&V57bB5CU-H$-)x!-4576F!2&():3()#A7*jm*)+,:V&(!-H-FGP&():3()#A7*G&L;:33()*cufi-!*RcB5=-!fiJ-)x";:33(k+4>xd5C&(&(!g-)xp&(!:()#A7*T@(!--@#+4&579A"#A7!&5C#-57N*!5C:*D+!:#[."#:32&(!;&Nhc-!*B#A-)#[*)>9E!"&N:9>57-J57*4AC!-F&57AA7A+!:3#8.#:3xd5C&(_AC#fx:.#&&():()#A=*!(4Ud.#9fi+AC&"*_&()5C:)::3-v&5C&":3;&57#-T]/&`G8+457A)*!57U85735C#-N#%x#:I!5=-)Bfi057\57A7A=!"&":3;&"*$57-$W5CB!:fiq;T3ffi x4)}>Lmxm}E3}x)}L}}v}!4<Y}mxv8INITIALGOAL= expanded processors 1, 2, 3= expanded processors 2 3= expanded processor 3W5CB!:q;b5CU[575C#-0#%]x#:3I05=-0+4;:3A7ACAcxd5=-!*)#ex;:33(b-!*)U;-v&;Br#%)+4;:3A=ACAxd57-4*)#exJ;:33(E57&(4;&&():*!!-!*4-v&;:33(E57-!():3-v&57-21d/N}\57-)#&+c:3%#:39*":357A=ACGT]b):?57-)BV3(0-)#-)Z`57-!5C&57A[5C&":?;&5C#-#%1aO/2}D[A=A!#%,&()-!#8*).8+-!*)*57-b&()+!:U[5C#!5C&":?;&5C#-N;:.[+4-!*!*N;B57-TW357-)BO9E!AC&5C+4A7+!:3#8.#:3D&(!57,:*!4-!*!-F&x#:I57'+,:%^#:39fi*X.#-!)::3-v&ACGTM/".#-!*H*!U-F&;B#%+;:3A7ACAxd57-!*!#ex";:3?(H57'&()579fi+!:3#eU*&579fiE57-0h-4*!57-)Bh4:3"&d#A7)&5C#-Tr1%>";:?3(S"+4._()#A7*!O9>-vG$B#AW-)#[*)D!1aO/2}9G0h-4*g*)+>#A7)&5C#-fi9E!3(>9fi#:d68!573I8ACGM&(!--fi#+4&579A)"#A7!&5C#-TW];:?A7ACA[xd57-4*)#ex@";:?3(>-&;I*)U;-v&;B>#%&(!5=&GF+,fi#%r";:3?("+4.T_:#[."#:?b&(!;&N;:";:3?(!57-)B$R,G#-!*S&()fi#+4&579A&():3()#A7*9Ghc-!*k"#A=)&5C#-*!#exd-&()Sh4:3&>R!:3-43(&()G@.[+4AC#:D-!*w-k:3&):3-k&(!;&"#A7!&5C#-PA7#-)B0Rc%^#:E#&():V+!:#[."#:?'h-!57(g&()5C:V5C&":3;&57#-TNO(!57'9eGP:3!AC&b57-P3)+,:3A757-);:"+,*!)+>Rc4"d&()'":357AACB#:35C&(49.#-!":3U;&5CUA7G>57-!.:9-v&&().#"&&():3()#A7*>-4*>*)#8-)#&dA7#F#IQR,G#-!*0&()2):3:-v&\&(!:()#A7*Tb-&(!#&():>(!-4*D+4;:?A7ACAxd57-!*!#ex";:3?(-%m.g*!A757-)$57-<.KL5C-4.G<x()-&()-8!92R,:\#%]+!:#[."#:3d57\5CB-!5Ch-v&A7G>B:;&":&(!-$&()2-8!9MR,:\#%]5C&":?;&5C#-!\:68!5C:3*L&"#h-!*-#+4&579Aj^#:'fih4:?"&?ur"#A7!&5C#-D!!5=-)B>A7A:3957-!57-!Bfi+!:#[."#:3d&"#L5C&O5=*!ACTd(!57O57&!;&5C#xd57A=A,#8):'xd()-P9-FG$+!:#[."#:3';:MeU5=A7;R4ACDcG&%^x5C&":3;&5C#-!;:2:36F!57:*R,!"M&()()):?57"&57"&579;&"E57r%m5C:3ACGQ):3;&"T/'-AC&":3-4;&5CU+4;:3A=ACAW";:33(;+!+!:#?(:A=5Cb#-*!57&":35CR4)&5=-)B&()&":3>9fi#-)B&(!fi+!:#;Z."#:?'jmlN49;:nod;#)D,qss;t[!od;#)D[lN!9;:D[no9fi(Dcqs|u?Tw5C&(&(!5=;+!+!:#?(D8&()d:#8#&-)#[*)#%r&()Q";:33(<"+4.Q57VB5CU-J&"#P&(!fih4:3"&2+!:#[."#:M-4*H#&():E+!:#[."#:3M;:L35CB-)*)R4&":E#%O&(!;&E:#F#&fi-)#[*)Q_&()G:68)"&Ex#:3ITH/'E-AC&":?-!;&5CUD&()0*!57&":35CR4)&"*&":";:3?(A7B#:35C&(!9jm''!ub9fi+AC#eG[NR!:3*)&([Zih4:3&V.8+4-45C#-!-F&57A&(!:L;:Q;&MAC&ME9-vG.[+4-!*)*SAC;%-)#[*)'eU57A=;R4AC2+4:#8.3"#:3T':#[."#:3:.5CU_!-!5=6F)M-)#8*!d%^:#9&()2.8Z+4-!*457-)BH+!:#[.Q-!*;:3g:"+,#-!35CR4AC0%^#:L&()P-v&57:P!R!&":g:3#F#&"*;&L&(!g:.5CU*-)#[*)T#99E!-!5=;&5C#-[Z%^:dU:335C#-!#%&(!57*!57"&":?5CR4)&5C#-fi33()9fiV(!eUVA7"#2R,-Q:+,#:&"*XjmzP(4;+4Z&":3_nb)&"&D,qss84od57-)%^A7*>n[3(!-!IDqssFu?T1a->A=A!#%&()&":'*!57"&":?5CR4)&5C#-fi;+4+!:#3(!D&()O+4:#8.3"#:3+,:%^#:391aO/2}#-&(!5C:!-!5=6F)\!R!&":3579M4AC&-)#!A7GT/'A7A)+!:#[."#:?";:3?(&"#N&()O39fi\&():(!#A7*TW/d%^&":A7A[+!:3#8.#:3(!UOh-!57(!*EV357-)BAC\5C&":3;&57#-D&()G_R,B57-_V-)x";:3?(fi+4&():#)B(E&()O9O"&#%3)R!&":!357-)BVVA7;:B:&():3()#A7*T]/k39fi+4AC\*!57&":35CR4)&57##%W&()N";:3?(g"+.257\()#fxd-57-$W5CB!:28T3vfiP#$}wwyXm$INITIALProcessor 1Processor 2Processor 3= expanded three iterationsGOAL= expanded last two iterations= expanded last iterationW5CB):328b5CU85=5C#-Q#%Wx#:I057-$*!5="&":35CR4!&"*>&":E";:3?(b -!0*!U-F&;Bg#%&(!57fi*!57&":35CR4)&57#-J?()9fi57_&(!;&-!#S+4:#8.3"#:57_+,:%^#:3957-)BPx&"*x#:IgR,G#-!*P&()_B#A*)+!&(TV!"fi&(!EACB#:?5C&(!9";:3?()b&()_"+4.fi.#9fi+4AC&"A7G&"#$#-)&():3()#A7*kRc%^#:H"&;:&5=-)B&(!X;:33(&"#@-)x&():3()#A7*D-)#-)X#%2&()X+!:3#8.#:3057QU:";:3?(!57-)BS;&EPACUARcG#-4*&()QACUA#%\&(!L#+!&5=9A"#A=)&5C#-T01&M572+c#35CR4ACD]()#exU:D%^#:b&"#<+,:%^#:39xr"&"*x#:I;&Q&()gB#A'*)+!&(Tw!#:Q.)9fi+4A7Dr5=-W5CB):SH+!:#[."#:$";:3?()-)#[*)_;&fi&()0B#AOACUAr&(4;&fix#!A=*<-!#&ER,0";:3?()*@57-X":357Ar";:?3(@ACB#:?5C&(!99fi#fU857-!BAC%&aZ&"#;Z:?5CB(v&d&():#)B($&(!N&":T/*457*)U;-v&;BQ#%\&(!57E;+!+!:3#3(<572&(!>%m.&E&(4;&M+!:3#8.#:3M;:3L#%^&"-57*!ACT#P-4):#+!&579>A75C&`GD\+!:#[."#:&(!;&68!57I[ACGdh-!57(!#-!5C&":3;&5C#-29M!&x5C&%^#:A7A#&():+!:#[."#:?&"#h-!5=(_R,%#:"&;:&57-)BM&()-!.8&57&":3;&5C#-TO(!5=57*!AC\&5=9fi-L9;I&(!"G["&"9U:G57-).KL57-v&-!*P:*!!.M&()2+,:%^#:39-4.2#%&()E";:3?(S;+4+4A757;&5C#-TOO()2.KQ5C-!.G$#%&(!5=d;+!+!:3#3(XR,N579fi+!:3#eU*R8GQ+c:3%#:39>57-)BfiAC#*$R4A=-!57-)BfiR,&`x-S-)5CB(FRc#:?57-)BE+!:#[."#:3dx#:I[57-)Bfi#-g&()9fiM5C&":3;&5C#-O(!"$*).:35CR,*<;+!+!:#?()_#;Y,:!-!5768)>R,-).h&TJW;:3A7ACAxd57-4*)#ex";:3?(57E.Yc.&57Uxd()-P9-FG057&":3;&5C#-!d#%1O/2}fi;:2:68!5C:3*D)xd()-g&()2&":E57d#L579MR4A7-!.*&(!;&bxd57A7A:68!5C:_.).5CULAC#*HR4A7-457-)B)D#:Nx()-H*)+D]-)#-[Z#+!&5=9A"#A7)&57#-H57V.+!&;R4ACT$b&()$#&():L(!-!*D*45CU85=*!57-)B&(!";:33(k"+4.9fi#-!BH+!:#[."#:3-@Rc$9fi#:3$.Yc.&5CUgxd()&()QR!:3-!?(!57-)BP%^.&"#:5=MU:3GJA7;:B$-!*&()$-F492R,:E#%O1d/N}g5C&":?;&5C#-!E57E:A7;&5CUACG39A7AiT/.#9fi+4:#957"MR,&`x-P&(!"E;+4+!:#3(!'*45CU85=*)\&()_"&'#%+!:#[."#:3'57-F&"#S8`3Mjr#F#IcDqssu?T~?(fiA7!"&":57B5CU-fi'!-!5768).#"&W&():()#A=*D-4*M&(!r;:33(_"+4.\57W*!57U857*!*VR,&`x+!:#[."#:?rxd5C&(!57-L3(gA7!"&":D!\3()#exd-$5=-QW5CB!:N8T8&"&57-)B_&()N-8!9MR,:#%WA7!&":3&"##-)579E!A7;&"$*457"&":35CR)&"*@&":;:33(DV-!*&"&57-)B&()-8!92R,:0#%MA=!"&":30&"#&()-8!9MR,:Q#%U;57A7;RACV+!:#[."#:3d579E!A7;&"r+4;:3A=ACA,xd57-!*!#ex";:3?(3fi x4)}>Lmxm}E3}x)}L}}v}!4<Y}mxv8Cluster 2Cluster 1INITIALINITIALProcessor 1Processor 2Processor 3Processor 4Processor 5Processor 6W5CB!:288+4.N;:33()*gRFG0&x#>A=!"&":3D)?(gx5C&(_+!:#[."#:?q tmk!a kmkml i'lgw()-PL+!:#RAC957dR!:#I-S57-v&"#0*!57ma#57-F&O)R4&"I8&()Mx#:I[AC#*Pxd57A7AA75CIACGQU;:3G9fi#-)BQ+!:#;Z."#:?T!"d#-!d+!:#[."#:9Gfi:?!-fi#)&#%cx#:IfiR,%^#:O#&():3DFAC#*>R4A7-!57-!BN57!*fi&"#.&5CU;;&"2&()M57*!ACb+!:#[."#:eTO()bh:3"&\+4(!N#%AC#*$R4A7-457-)B57-FU#ACUdAC.&57-)Bfi+4:#8.3"#:%^:#9xd(4573(J&"#P:68)"&Mx#:3ITPb-!>.)9fi+4AC>5=N&()Q-);:"&_-)5CB(FR,#:2;+!+!:#?(jmzP(!;+;&":3nb)&"&Ddqssu?OAC&":3-4;&5CU$;+!+!:#?()fi57-!A74*)>"AC.&5=-)BP:?-!*)#9+!:#[."#:3E#:fiA7AC#fxd57-)BX9"&":+!:#[."#:O&"#LI+g&":33I$#%W+!:#[."#:dAC#*4O-!*"-4*$&()N1a#%()U[57ACG0AC#*)*+!:#;Z."#:&"#V#-)\&(!;&57W57*!A7Tb):357-!B&()O.#-!*_+4(!"r#%,AC#*ER4A7-!5=-)B)D&()O*)#-!;&5=-)B+4:#8.3"#:*)57*!x(!573(Sx#:IcD5C%-FGD&"#0B5CUTM/";:33(JACB#:35C&(!9&GF+45=A7ACGg"&"#:3V-)#8*!x(!573(X(!eU-)#&VR,-X%m!A7ACG.[+4-!*!*X#--'+,-XA757"&TEw()-HB5CU[57-)B0x#:IP&"#P-)#&():N+!:3#8.#:D-)#[*)-$R,'B5CU-$%^:#9&()N()*0#%]&()VA757"&Vjm*)+57-Q&()V&":fu?D4&()b&57Ajm-);:\&()V:#8#&?u?D)#:O%^:#99fi+A757-)BE#%A7AACUA72jml2!9;:no;#)Dqss;tvu?T/-8!92R,:O#%;+4+!:#3(!d(!eUMR,-57-F&":#[*!!.*$%^#:d:3*!!57-)Bfi+4:#8.3"#:d57*!A7V&579fi2!357-)BAC#*>R4A7-!57-!BN#+,:3;&5C#-T'57-)BN&(!68!A75C&GE68!A75757-)BN"&":3;&"BGSjmzP(!;+;&":3Enb)&"&Dqssu?D+!:#[."#:?fi-v&5757+4;&"57*!ACQ&579fi0R8G"-4*!57-)BS#)&Xx#:I:36F)&Ex()-&()5C:fiAC#*57fiA=9fi#"&9fi+!&GD"#>&(!;&d&()G$-P.#-v&57-8)N+4:#8.357-)Bfi:9>57-!57-)Bfi-)#[*)\x(!57ACbxr5C&57-)B%^#:d>:"+,#-!"T/'AC&":3-!;&5CU;+4+!:#3(!g;:J-!#&$:.5CU:gR"*DbR4)&$A7AC#fx-#fU:3ACGFZ`AC#*)*+!:3#8.#:&"#57-!57&57;&"dEAC#*>RA7-!.d#+,:3;&57#-Sjm!!:3!57?(!5iDF];I[5iD[n1a3(FG#(!5iD,qss;t[4odf"+4A,nl2!9;:Dcqssu#:\A7AC#fxwA=A4+!:3#8.#:3&"#_+,:35C#[*!57A=ACGM(45C%&x#:3I&"#_I+$&()'eU:3;B2AC#*Lxd5C&(457->.+!&;RACR,#!-!*!Vjm/'-!*):3#-gnr()-D,qs|F[AC&"#:3Dqss;tvu?Tq7)nnJfnffi'lg:3#R4AC9"#A7)&5C#-4-0.)57"&\-FGFxd(!:'5=-L&(!b;:33($"+.T357-)B21aO/2}2";:3?(D)&()V3(!5=A7*):;:S.8+-!*)*5=-<*)+!&([Zih4:?"&>9-!-!:>%^:#9A7%&L&"#:357B(v&D\R,#!-!*!*@57-*!+!&(@R8G&()X.#"&&():3()#A7*TM1%&()fi"#A7)&5C#-HA=5C'#-X&()fi:35CB(F&V57*)_#%&(!fi&":D0%m;:VB:;&":M-8!9MR,:'#%r-)#[*)3ffiP#$}wwyXm$0 1 230 12 30 12 3...0Original Ordering: 01231 2031 2 30New Ordering: 13201 2 3promising node**]57B):b)r'+,:3;&"#:d#:3*):357-!BE.)9fi+4A79E!"&bR,M.[+4-!*)*X&(4-S57%&()"#A7!&5C#-PA=5C'#-X&()fiAC%&V5=*)M#%&()_&":TE1%5=-)%#:?9;&5C#-XR,>%^#!-!*J&"#P:.Z#:?*):M&(!>#+,:3;&"#:3E57-&(!L&":Q%^:#9#-!L";:3?(5C&":3;&5C#-&"#P&(!L-).[&D&()+,:%^#:39-!.V#%]1d/N}_-R,bB:;&ACG$579fi+!:3#eU*]#exACGV-!*2lV#:3%8!BB"&&`x#b9fi&()#[*!#%[#:3*):35=-)Br&()";:3?(2"+.'jaqss[qeu?TW5C:3"&D3(!5=A7*):#%W3(P-)#8*!N-R,V#:3*):*g-!*0.8+-!*)*$R8GQ5=-!.:57-!B()):357&57*457"&-!.V&"#>B#A-)#[*)T/'AC&":3-!;&5CUA7GD&()>";:?3(ACB#:?5C&(!9-H.[+4-!*X&(!&":$%^xACUA72-!*H"#:&V&() ?4 .j^&()Q"&E#%O-)#8*!2;&2&(4;&EACUA57-&(!>&":fuNRFGH57-4.:57-)B JU;A7)Tg8;:?3(<R,B57-!V?(5C&":3;&57#-J%^:#9 &()>%^:#-F&5C:E&M-!*&(!572%:#-F&5C:_"&M5=M)+*!;&"*J3(5C&":3;&57#-T1a-R,#&(J#%&()"L"DAC&()#)B(J&()>-)#[*)N9>G(!eU>&()>39fiLU;A7)D]-)#8*!Vxd5C&(39A7AC: U;A7)B-):3A=ACGL:3ff4.&dfi9fi#:M):3;&"2&579;&"**!5="&-!.N-!*;:3N+!:%^::*1a-!"&"*H#%r#:3*!:357-)B$57-!*45CU85=*!!A-!#8*)D]#8#IP&2ATPjaqssuV#:?*):N&()"&2#%#+,:3;&"#:?V&"#B!57*!>&()0-).[&M1aO/2}$57&":3;&5C#-<&"#P&(!fi. fi= F.TO()Q9fi#"&E+!:#95=57-)Bg-!#8*)Q57&()Q-)#8*!>%^:#9&()0)&aZ#;Yk&QjmS3(!57A=*J-)#[*)>-)#&M.8+-!*)*<57-H&()Q+!:U[5C#!N57&":3;&5C#-uVxd5C&(&()9>A7AC"&U;A7)T/'-.[9+4ACDW5CB!:0()#exH";:3?(&":.[+4-!*)*!357-)BX#-)5C&":3;&57#-H#%1aO/2}>xd5C&(X#+,:3;&"#:M#:3*):35=-)BQt[Dq;D]8DW8TO()fi+4;&(H&"#g&()9fi#"&V+!:3#95757-!BQAC;%-)#[*)Pjm57-4*!57;&"*x5C&(JS"&;:uN57>q0gSt[Tgd()L-)x#+,:3;&"#:_#:3*):357-!B57M.#9+4)&"*J457-)B&()Q#:3*):_#%O#+,:3;&"#:3__&()G;+!+,;:E57-&(!57M+4;&(;%^&":E:39fi#eU[57-)BX*!)+4A=57;&"T'+,:3;&"#:3-)#&\;+!+,;:357-!BE57-Q&()b+4;&($;:3b*4*)*Q&"#fi&()V-!*Q#%&()b#+,:3;&"#:dA=57"&D8:&57-!57-!BM&()57:#:?5CB57-!A:A7;&57UV#:3*):357-!B)TWd(F!&()V#:?*):357-)BE#%]#+c:?;&"#:3\%^#:\&()V.[9+4ACV57-0W5CB):b3(4-)B\%^:#9t[DOq;D8Dj^&":3G#+,:3;&"#:Etgh4:3&D]#+,:3;&"#:0qQ-).8&D#+,:3;&"#:fiP-).8&D-4*#+,:3;&"#:gA="&2%^#:U:G$-)#[*)N57-0&()V&":3fur&"#gq;D8Dc8D4t[T3efi x4)}>Lmxm}E3}x)}L}}v}!4<Y}mxv8O(457r".&5C#-*)3.:35CR,rfi-F!9MR,:r#%]AC&":?-!;&5CUN;+!+!:3#3()\&"#>+4;:3A7ACAc";:3?(TrV):r&()#;Z:&57A9fi+457:357A-!A7G8"'57-g&()2%^#A7AC#fxd57-)B>.&5C#-!b*)9fi#-!&":3;&"2&(!;&b9-FG#%&()E:+,#:&"*;+!+!:3#3()M#;Yc:_"#9fiLR,-).h4&257-.:&57-.#-!*!5C&5C#-4DR4!&2-)#P357-)BAC;+!+4:#3(<572A7xeG8M&()9fi#"&d.Yc.&5CUE;&dA75=-)Bfi/d1\ACB#:357&(!9TW k+0v dH$ "!RX+{Lvm,4V]$0Fb-)09fi&()#[*#%*!&":3957-!5=-)B&().#9fi+;:3;&5CU0R,-).h4&E#%d+4;:?A7ACA";:33(;+!+!:#?()fi57ERFG*)&":39>57-!57-)B<&()&(!#:&57ANR,#!-4*!Q#-+,#5CR4A7S"+,*!!+#R4&57-)*!357-)B3( ;+!+!:#?(/".#-!*k9fi&()#[*57fi&"#J+c:3%#:39 9fi+45C:35=A\.#9fi+4;:357#-!fiR,&`x-@&()S;+!+!:#?()T1-@&(!57".&5C#-0xbxd57A7A4*):3x#-Q&()#:3&57A-!ACG["r-!*Q9fi+45C:?57A4.#9fi+;:357"#-!&"#fi*)&":39>57-)dx():+,:%^#:39-!.L&":-!*!2.[57&M-!*J&"#S57A=A7!"&":3;&"L.#-!*!5C&5C#-4N!-!*):Mxd(!57?(JAC&":?-!;&5CUL;+4+!:#3(!-+,:%^#:39R,"&Tqi$#gnYtmnFi^km&%lgkm'i^L1a-X&()>A75C&":?;&):_x_hc-!*X&()#:&57A-!ACG["V%^#:N&()AC&":3-4;&5CU>;+!+!:3#3()V&"#g#-)"+,.&#%O+4;:?A7ACA";:33(D-!9fiACGJ&"IJ*!57&":35CR4)&57#-TglN!9>;:E-!*o;#jaqss;tvu_+!:#eU[57*)Q--!ACG[57#%&()2+c*4)+#%*!57&":35CR4)&"*Q&":_";:3?(D-4*g]#exdA7G-!*glV#:3%\jaqss[qeud+!:3#eU[57*)2-P-!ACG[57#%b+4;:3A7A7Ax57-!*)#fx";:33(T1a-&(!57".&57#-xP!99;:?5C$&()"g-4ACG8fixd5C&(4-!5C%^G857-!B:+!:3"-v&;&57#-D-!*N9fi+5C:357A7A7G.#9fi+4;:3&()+c:3%#:39>-!.#%)&()&"3(!-!5=6F)]!5=-)B\&()*!:35CU*68!;&5C#-!TO(!"O-!ACG["3!9fi\&(!;&&(!OU:3;B'R!:3-!?(!57-)Bb%m.&"#: (:95=-!.#-!"&-F&&():#!B()#)&&()'";:33(Q"+4.'-!*L&(!;&&()'AC"&aZ`.#"&B#Ac57AC#[;&"*Q;&2*!+!&*( )4TH'A7#MAC+& (\:+!:"-F&&()b()):35="&57\R!:?-!3(!5=-)B2%m.&"#:D[#:r&()b:3;&5C#E#%-)#[*)B-!:3;&"*$*!):35=-)BN#-)b5C&":3;&5C#-L#%1aO/2}&"#@&()-8!9MR,:Q#%fi-)#[*)0B-):?;&"**!):?57-)BJ&(!+!:U[5C#!05C&":3;&57#-#%M1aO/2}T)#:357-!B@&()()):?57"&57ER!:3-43(!57-!B$%^.&"#:_&"#gR,68!A&"#g&()>eU:3;B0R!:3-!?(!57-)BA=AC#exd2&()L-4ACG8357b&"#PR,&()239fiNO%^#:d57-!.:39fi-v&ACZ`*)+,-!57-)Bfi*)+!&()Zih4:3"&\";:3?()#:&(!r*457"&":35CR)&"*V&":\";:3?(fi-!ACG[57D;x\!9fi&(!;&'R!:*)&()Zih4:3"&.8+4-45C#-E57W!"*&"#_B-):3;&"V-)#!B(Q-!#8*)DFD[&"#fi*!57"&":?5CR4)&"O#-!b-!#8*)&"#_3($#-% , +4:#8.3"#:3T[57-4./.0(21-!* 3 ,fiDxg-3!9fi$&(!;&&(!&":g57.8+4-4*)*&"#*)+4&5( 4kxd(!:64 387:9<;>=,fiTH$xd57A=A49fiQS&579L#%b> ( 1@? ,&"#X+,:%#:?9 &(!Q-)#[*)0*!57"&":?5CR4)&5C#-J-!*<&"#.#A7AC.&_&()"#A7!&5C#-:4AC&%^:#9 ?(+!:#[."#:TO()P"+,*!)+#%N*!57&":35CR4)&"*&":3P";:3?(Dd9fi3):*V&()>:3!-S&579fifi#%&()":35=AACB#:35C&(!9*45CU85=*)*SRFGP&():3!-S&579fi#%&()fi+;:3A7ACAACB#:?5C&(!9$D-PRcM.#9fi+4)&"*S():Ed&()E-F492R,:O#%":?57A-)#[*)dB-):3;&"*jm!9>57-)B>.#-4"&-v&V-)#[*).[+4-!5C#-L&579fifu*!5CU[57*)*>RFG>&()'-8!9MR,:#%:357Ac-)#8*!d.[+4-!5C#-4+,:%^#:39fi*LRFG>&()+;:3A7ACAACB#:357&(!9$TO(!5=5=O*):35CU*$5=-0&()2A75C&":?;&):jmlN!9;:'nod;#)Dqss;t[c;:3-)A=AiDqssuO,.B,DC (2( EE FGFG(( EffEffH H , FGFG(( EffEffHJHJIKI FMFBLNLNLNLNLOLOFGFG(( IKFG,S( R F > q(jaqeu1QP1UT/'S)H5=-!.:"DW&()QAC%^&9fi#"&2%^:3.&5C#-4A+4;:3&2#%\&(!5726F4;&5C#-;+4+!:#3(!QqQ-!*-R,5CB-)#:3*TOO()QQq V;> (W1L&":39.#-v&":357R4)&"'L95=-!579A9fi#4-v&'&"#L&(!Nh-!AUA=)2-!*S-PA="#LR,5CB-)#:3*T1-0&(457O"D4+c*4)+;+!+!:#?()X,D)xd(!57?($:+!:-v&OA=57-);:O"+,*!)+TW5CB):3bE()#fxdr&()b+,:%^#:39-!.'#%&()b*!57&":35CR4)&"*>&":N";:3?($ACB#:35C&(49R"*Q#-L&(!"68!;&5C#-!r#-$E+,:%^.&ACGR4A7-4.*0&":V-!*0#-$_()U[57ACG>5=92R4A=-!.*Q&":V%#Y: ,Z.qt[D ([.{8D3O\fiP#$}wwyXm$8e+07Perfect BalanceImbalancedSingle processorNodes Generated7e+076e+075e+074e+073e+072e+071e+07000.20.40.6Goal Position0.81W5CB):28b57&":35CR4)&"*0:E8;:?3(P#-F&":3"&5=-)B>:NrA7-!.-!*])^.qt[TN1a-g&()fi579MR4A7-4.*P"D&(!_35CM#%&()_+!:#[."#:3N_,";:3?(H"+4.bU;;:35C'V.[+c#-!-v&57AW%m!-!.&57#-Xxd():fi&()_h:3"&V+!:#[."#:N5=N5CB-!*H9f"#:35C&`GS#%&()x#:IS-4*H&()AC#**!.:"2N&()fi+!:#[."#:2-8!9MR,:N57-!.:"Tfi1-X&(!5=bB:3;+4(D&(!B#A+,#5C&5C#-X:?-)B%^:#9&()N%m;:A7%&O5=*)V#%W&()N&":Lj^+,#57&5C#- .tvu\&"#&()N%m;:d:357B(v&O5=*)V#%W&()N&":Lj^+,#57&5C#^- .qeu?TO]:%^#:39-!.M#%&()M";:?3(SACB#:35C&(!9ACxrG[d+,;I[Oxd()-g&()NB#A]57O#-P&()N%m;:bAC%&57*)#%r$+!:#[."#: _ b+,#:&57#-X#%&();:33("+4.T)#:M&()"#%r-579MR4A7-!.*X&":3D9E!3(H#%&()_";:3?(H"+4._5735CB-)*P&"#Q05=-)BACN+!:3#8.#:Dx(!573(S57-!.:3"'&()M:3!AC&57-!B9fi#!-F&'#%":35=A,.Yc#:&d:6F45C:*H_-).[&.#-!5=*):d&()M&()#:&57A+,:%^#:39-!.M#%&()2+4;:?A7ACAxd5=-!*)#ex ";:33(XACB#:?5C&(!9$ToOA=AF&(4;&+4;:3A7ACAFxd57-4*)#ex";:3?(fi#+,:3;&"WRFGE*!57"&":?5CR4)&57-!B\&()rxd57-!*)#fx5CD#:.#"&W&():3([Z#A7*!D&"#g?(eU57A=;R4ACfi+!:#[."#:M"#3(+!:#[."#:2+c:3%#:39>b#-)>5C&":3;&57#-H#%r1O/2}T[57-!.&():3()#A7*!O;:3E-)#&.8+AC#:*g6F)-F&57A7A7GD4&()2h4:3"&d#A7)&5C#-g%#!-4*g9eG-)#&:3+!:"-F&-P#+)Z&579A+4;&(T#-4):S-k#+4&579A'"#A7)&5C#-DdA7A+!:#[."#:3Lxd5C&(A7#ex:$&():()#A=*9E!"&.#9fi+4A7&"&()57:r!::-F&5C&":3;&57#-L#%1O/2}T1a-Q&()x#:3"&r"D)&(!5=-09;Ib&()b+,:%^#:39-!.#%W+4;:3A7A7Ax57-!*)#fx";:33(g6F4A&"#&(!;&O#%W":?57A,U:35C#-#%]1aO/2}T1a-E&(!57W-!ACG[57&()\!9+!&5C#-E57W9*)&(!;&V[KL5C-F&W-F!9MR,:#%+!:#[."#:3].)57"&W!?(&(!;&'&()EB#A]57&":3;&5C#-x57A7A"&;:3&xd57&()#)&*!A7GTV8+,*!)+#%+;:3A7ACAx57-!*)#fx ";:3?(X-PR,A7!A=;&"*L&()O:3;&57#2#%&()'-F!9MR,:#%-)#-[ZB#A+4A74B#A57&":3;&5C#->-!#8*)&"#M&(!d-F492R,:#%-)#[*)rB-):3;&"*PR8GL&()2+!:#[."#:\+,:%^#:3957-)B_&()VB#A5C&":3;&5C#-T#fxdACG$-!*lN#:%B-):?;&"&(!57r:?;&5C#fi!57-)BE&()N-)#&57#-0#%&()NA7%&aZ&"#;Z:357B(v&\B#A+c#35C&5C#- `4D!*).hc-)*$\&()V%^:3.&5C#-0#%]&()&"#&A-8!92R,:#%-)#[*)r57-L&()B#A57&":3;&5C#-Q&(!;&\9M4"&R,'.8+-!*)*LRc%^#:':3(457-)BE&()'h4:3"&B#A-!#8*)>jaqss[qeu?TO8+,*!)+0#%]+4;:3A7A7A,xd57-!*)#fx";:3?(g-$&(8!\R,V.[+!:"*g( ENH ,a = H = ,Qb.`d( EGF `c( E = H = ,Qbq.eqF=`cj"(fkqeu= ,QbHjiub 57U-&(!5=%^#:39M4A7[DrxS-k9+45C:357A=ACGJ.#9fi+4;:3P&()P+,:%#:?9-!.#%N*!5="&":35CR4!&"*&":";:3?(-!*@+4;:3A7ACAxd5=-!*)#ex;:33(%#:,g.qt[DY(h.ji8Dr-!*k)G.qt[Tk):3#9 &()$B:3;+(@57W5CB):YibxO-"d&(!;&+4;:3A7A7AFx57-!*)#fx;:33(>xd57A7AF#)&"+,:%^#:39*!57"&":?5CR4)&"*M&":O";:3?(#-!A7G5C%]&()2B#A57OAC#[;&"*P#-&()N%m;:A7%&O#%&(!2";:3?(P"+.THEA7"##R":U2&(4;&d+,:%^#:39-!.3<lfi x4)}>Lmxm}E3}x)}L}}v}!4<Y}mxv8% Performance Improvement30Parallel Window SearchDistributed Tree Search252015105000.20.40.6Goal Position0.81W5CB):3i8b57"&":35CR)&"*0:_8;:33(gU8T];:?A7ACA,w57-!*)#fx{8;:3?(#%*457"&":35CR)&"*&":$";:?3(+,;I[Mx()-)U:fi&()0B#A\-)#[*)057_AC#8;&"*#-&(!Q%m;:fiAC%^&E#%&())R"+4.N57B-)*0&"#L_+4;:3&57!A7;:\+!:3#8.#:T[5=957A7;:N-!A7G8"E(!eUQR,-J+!:#eU[57*)*J&"#S.#9+4;:0-)#8*!#:3*):35=-)B&"3(4-!5768)M-4*J&"#X*).Z&":395=-)M&(!E#+4&579A]-F!9MR,:b#%A7!&":3Ejr#F#IP&NAiTCDqss8]]#exACGSnlV#:%Dqss[q;;:?-)A7AiDqssu?Td()"b-!ACG["\*)#_57-!*!57;&"'&":-!*457-Q&()'+,:%^#:39-!.'#%AC&":?-!;&5CUV"&":3;&"B5CrR"*#-0%^;&):\#%&()b+!:#R4AC9"+.D!-!*$-$A7"#fiR,b!"*0&"#fi*)&":395=-)b&()b&()#:&57A+,:%^#:"Z9-!.\#%cb+4;:&574A7;:&"?(!-!5768)r%^#:bB5CU-_+!:#R4A79$T#exU:D8&()r&":39!"*_&"#V+4:*!57.&]&()+,:%^#:39-!._57-X9-FGg#%&(!"fi-!ACG["V;:fi-)#&VACxrG[V9fi):3;RACE-4*H9-vGS!9+!&5C#-!9*)N;:3N&"#F#L.#-!"&":357-457-)B_%#:d:AZx#:3A7*$+!:3#R4AC9Tq onqpsr iffikm+%l#km'i^L/".#-4*S9&()#8*P#%*)&":?957-!57-!Bfi&()E.#9+4;:3;&5CU_R,-).h4&#%+4;:3A7A7A";:3?(H;+!+!:#?()b57U[57V9fi+457:357A[-!ACG["TWH(4Ub579fi+4AC9-v&"*fiN-8!9MR,:#%,&()d;+!+!:3#3()&"#N+4;:3A=ACA)";:3?(*).:?5CR,*2;:3A=5C:57-2&(457]+4;+,:W5=-M&(!OO!]0"G8&"9$TWHO(!UOA7#b.#-4"&":3!.&"*-_;:&5Ch57A";:3?(L+4.dB-):?;&"#:&"#M+!:#fU857*!ON&""&"R,*%^#:&()"d.[+,:3579fi-F&T8;:3?(L"+.d+4;:39&":3-R,b"&;R4A=57()*0R8GL&(!2!":D!5=-!A7!*!5=-)B)&(!2.#"&O#%W&()V#+!&5=9A"#A7!&5C#-&(!2AC%^&aZ&"#;Z:35CB(F&O+,#5C&5C#-Q#%W&()NB#A-!#8*)N5=-0&()2"+4.D&(!NR!:3-!?(!57-)B_%m.&"#:D&(!N&":2579MR4A7-4.D&(!0#A7)&5C#-*)-!5C&Gkj^%^:3.&5C#-<#%-)#[*)E;&_#:ER,G#-!*<&()Q#+!&579>A"#A=)&5C#-<.#"&_&(!;&:3+!:"-F&OB#A-!#8*)u?D!-!*&(!()):357&57::3#:gj^&()*!5Y,:-!.QR,&`x-&()$"&579>;&"*-!*&":3)$*!57&-!._&"#H&()-!;:"&OB#A-)#8*!fu?T3ufiP#$}wwyXm$54#Clustersv321022.533.54Branching Factor4.55W5CB):2F:3-43(!57-!B_4.&"#:b-4*P'+!&579>Ac'!9MR,:\#%\A7!"&":3108#Clustersv642000.20.40.6Imbalance0.81W5CB):2|8:N1a9MR4A7-!.N-!*S'+!&579A'!9MR,:\#%rA=!"&":3/'A7A4#%&()'.8+,:3579-v&*).:357Rc*Q():'x:b:3!-L#-Q-0-\r~119;B.Z+4357-)Bfi9M4AC&5C+!:#;Z."#:'!57-!Bfifi+!:#[."#:3T1a->#!:h:3"&.[+,:3579fi-F&xb.#-!57*):r()#fx&(!#+!&5=9A-8!9MR,:#%A=!"&":39G>Rc'Yc.&"*R8Gg%^;&):V#%&()fi+!:#R4A79+4.fi57-!A7!*457-)BR!:?-!3(!5=-)BL%m.&"#:D&":579MR4A7-!.D-!*X"#A=)&5C#+,#5C&5C#-T]57B):FD,|8D4-!*Ps*)9fi#-!"&":?;&"N&(!;&d&(!N#+!&579A-F!9MR,:\#%A7!"&":3d57-!.:"&()fiR!:?-!3(!5=-)B0%^.&"#:2*!.:"Lj^x5C&(H0R4A7-!.*&":D-H#+!&5=9A.#"&N#%bq i8D-!*X&(!fiB#A#-P&()2%m;:d:357B(v&d357*)N#%&()M&":fu?D,d&()E579MR4A7-!.25=-!.:"_j^xd5C&(>R!:3-!?(!57-)B>%^.&"#:'#%8D-H#+!&5=9AW.#"&N#%q8D]-!*X&()fiB#A5=-X&()fi957*!*!A7M#%&()fi&":fu?D#:MV&()_B#A-)#[*)fi9fi#fU&"#>&(!N:35CB(F&d57*!V#%&()N&":0j^xd5C&(>R4A7-!.*$&":3DR4:3-!3(457-)Bfi%m.&"#:#%8D-4*g-#+4&579A.#"&O#%\qu?T1-$-)#L"2*!57*0#-!N57-)BACV-8!9MRc:\#%A74"&":3OACxrG[\+,:%^#:39R,"&T1a-Q&()V-).8&.[+c:?579fi-F&xb%#[!#-Q&()b.Yc.&\#%#+,:3;&"#:r#:3*):357-!B)TWW5CB!:Eqtfi*!9fi#-[Z"&":3;&"O&(!;&\9fi+4AC#fG85=-)BM#+,:3;&"#:d#:3*):357-!BE!O-$57-!.:b5=-L&(!V#+!&579A,-8!92R,:r#%WA7!aZ&":3D'-!*]57B):qt;R()#exL&(4;&Q#+,:3;&"#:0#:3*!:357-)Bwjm!57-)B+,:%.&Q#:3*):?57-)B5=-)%#:?9;&5C#-u:4AC&_57-H9fi#:57B-!5h-F&E5=9fi+!:#fU9fi-v&fi#fU:L-)#H#:?*):357-)BXfi&()#A7)&5C#--)#[*)$57_+,#5Z&5C#-)*%^;:&(!:&"#2&(!O:35CB(F&57-fi&()d&":T1-&(!57.[+,:3579fi-F&&()d";:?3(L&":;:3OR4A7-!.*xd5C&(3<wfi x4)}>Lmxm}E3}x)}L}}v}!4<Y}mxv8108#Clustersv642000.20.40.60.8Solution Position11.820SpeedupChange Optimal #Clusters]57B):2s8'#A]#5C&5C#--4*P'+!&579>Ac'!9MR,:O#%\A7!"&":3101.61.41.21.000.00.80.40.0Solution Position0.40.8Solution Positiona) Ordering effect optimal #clustersb) Solution position effect speedup]57B):qt[rb:3*):357-!BM.Y,.&MR!:3-!?(!57-)BN%m.&"#:\#%_-!*Q->#+!&5=9A.#&#%q8TO()*45C+L57->&()'+4AC#&#[):3xd()-L&()B#A57r+,#5C&57#-)*0#-$&()N%m;:dAC%^&\#%Wfi+4;:&574A7;:\+!:#[."#: _ d)R4"+.Tx ez|{~}]z- 9JO()E9fi+457:357A-4*g&()#:3&57A.#9fi+4;:35="#-!+!:"-F&"*X57-g&(!M+!:3U85C#4".&57#-S5=-!*!57;&"M&(!;&AC&":3-4;&5CUN+4;:3A=ACA";:3?(g"&":3;&"B57O+,:%^#:39xA7A!-!*):O*45Yc:3-v&O.#-!*45C&5C#-!D!-4*0&(!;&d+,:"Z%^#:39-!.r&":-!*4]*!#.)57"&]xd(!57?(_-MR,r!"*E&"#V)&"#9;&57A=ACGM"A7.&W&":3;&"B5C-!*M+4;:39&":"&"&57-!B\%#:-)x+!:#R4A79Td#fxU:eD&()V:3!AC&r#%]&()"N"&4*!5C\;:N-)#&[KL5C-F&r%#:)&"#;Z9;&57A=ACGQ*!&":3957-!5=-)BM&(!2;+!+!:#+4:357;&"N"&O#%"&":?;&"B5CTrV-)NA757957&;&5C#-$57r&(!;&'57-)%^#:39;&5C#!"*&"#B-):3;&"M&()N%^#:39M4A7O-!*$&"#Q.#-v&":3#A&()V.[+,:3579fi-F&D!!?(gdB#A+,#5C&5C#-D[5=O-)#&I[-)#exd-g57-$*)U;-!.T/'-)#&():dA=5795C&;&5C#-$5=r&(!;&d"#9fi2#%]&(!2!9+!&5C#-!D)43(.#-!"&-F&R!:3-43(!57-!B$%^.&"#:D;:Q-)#&2:3A757"&57_%^#:_9-vGH;+!+A757;&5C#-!TQ/'2g:!AC&DxQ-)*<9fi&()#[*3<fiP#$}wwyXm$&"#)&"#9;&5=A7ACGLAC.&r#+!&579A,"&":3;&"B57\%#:\:3AZx#:?A7*Q+!:#R4AC9>B5CU-$5=-)%#:?9;&5C#-L&(!;&O57U;57A7;RACT1a-J:3"+,#-!">&"#X&(!5=2-)*Dx0*!*P9?(!57-)QAC;:3-!5=-)Bg.#9fi+,#-)-F&_&"#P&()\!"G[aZ&"9$TO!]9fi:B9>-vG#%'&();+!+!:#?()&"#J+4;:3A7ACAr";:?3(*457!*&(!$+!:U[5C#!".&5C#-TW;:39fi&":3O-RcV"&\&(4;&O.#-v&":#A,&(!V&"IQ*457"&":35CR)&5C#->&":3;&"BGD4&()VAC#*0RA7-!Z57-)BV"&":?;&"B5CDv-!*_&(!\#:3*):357-!B&"?(!-!5768)T]1-_+;:&57!A7;:eD&(!O"&":3;&"B5C&(4;&-fiR,"A7.&"*57-!A=!*)G lN!9;:O-4*od;#)D4:*!&([Zih4:3"&b57&":35CR4)&57#-Q&":3;&"B'!9MR,:O#%]A=!"&":3q TNTNT +!:#[."#:?B b-D'Y#*R4A=-!57-)h- 5CB(FRc#:eD!od-!*)#|9:#[."#:AC.&5C#]:3.-F&;BE#%W&I*!57&":35CR4)&"*Q)+,#-0:68)"& TNTNT qttG *'%m5="&D!5=A'%m57"&'#-!;&5=-)B>"&":3;&"B: t[TCT "&3I 57ff/'-F&575C+4;&"#:G0AC#*$RA7-!57-)B_&":357BB$B W5[*D!#8AiD!''1dY/b:3*):357-!6O(!b4":\57rA7AC#ex*0&"#*)&":39>57-)'&()V&`G8+,r#%"&":3;&"B57\&"#fiR,'!*0%#:OEB5CU-0+!:3#R4AC9$T#exU:D!R,!"V!?($_*)575C#-Q57r*!5KQ!AC&&"#9;IVx5C&()#)&5CB-!5hc-v&r57-)%^#:39;&5C#-Q;R,#)&&()r";:3?(E+4.DF\4QA7"#b(!&();+;R457A75C&Gb#%49;I[57-)BA=AF-).3;:G2"&":?;&"BGM"AC.&57#-!Tr"*#-&()3(!;:?.&":357"&572#%\$";:33("+4.D\4)&"#9>;&57A7ACGX.#-[h4B):3N5C&"AC%&"##+!&579>5C+,:%^#:39-!.P#-+4;:&57!A=;:>;+!+4A75=;&5C#-T[9fi+4A7$+!:#R4AC9>>;:P%*kL&":?57-!57-)B.)9fi+4AC&"#MN93(457-)OAC;:3-457-)BV"G["&"9$Dvx(!573(fi5=-_&):3-fiAC;:3-4&()\#+!&579>A!"&":3;&"B5C&"#2;+!+4A7G&"#+4;:&5=!A7;:$A7"0#%E";:3?("+4.T/+!+4ACG[57-)B<93(!5=-)HAC;:3-!57-!B&"##+!&5=95CX"#%&x;:3;+!+4A=57;&5C#-!Q(!QR,-k+):3)*57-k#&():;:$#%M:";:3?(T)#:g.[9fi+ACDzS57-F&"#-jaqs>s iu(!0;+!+4A=5C*k5=957A7;:L&"3(!-!5=6F)X&"#)&"#9;&5=A7ACGkG8-F&()5CS+!:#RAC9_Z`"+,5hgU:35C#-4L#%.#-!"&":?57-v&aZ`3;&57"%m.&5C#-ACB#:357&(!9Tod";:33(g57-0#&():d;:O#%].#9fi+)&":d5C-4.N(!\G[5CA7*)*579>57A7;:b57*)b#%r!"&"#95C;RAC_-vU[5C:#-!9-v&N;+4+4A75C*P&"#g.#9fi+4!&":N-)&`x#:I[Ljmr(!;&"&3(4;:maDrACU:3&Drn ,B):3[DbqssFV8&"-!I857&"DW57(!:Dn(!-)B)Dqssu-!*&"#J5=-v&":3.&57Ug(F49-[Z.#9fi+4!&":Q57-F&":%m.Sjm!:3-)IcD'[)I;U[5C:35 [D\n)#A7GDMqss8V5CR,:39>-DVqss|u?T{O(457fix#:I@57!-!5=6F)V57-$A=AC#exd5=-)BfiR,#&($+!:#R4A79_Z`"+,5h'-!*;:3?(!5C&".&):3.Z`"+,5hV%^;&):d&"#L57d-c)-!.b&()3(!#57.#%"&":3;&"B5CW-!*M57-2;+!+ACG85=-)Bd*!;+!&57U"#%^&`xr;:r&"3(!-4576F!&"#'+4;:3A7A7A";:3?(T\!]A7"#S#;Y,:3fiS%:39x#:I&(!;&fi-<+c#&"-F&57A7A7G)&"#9;&"R,#&(<"&;&570-!**)G[-!957L"#%&x;:3!"&"#9>5C;&5C#-#+,:%^#:39+4;:3A7A7Ac;:33(\4X.[)&"&()V%#A=AC#exd5=-)Bfi"&"+4q;Tdd57957-)B%:#9 9fi+4A7+!:#R4A7957-!"&-4.;:;+!&):*DfU;;:G[57-)BO?(E&":3;&"BGN+4;:39&":5=-!*)+,-!*)-F&ACGT1a-L#:3*):&"#E68!5C:-L.Y,.&5CUb9fi+4A7"&D8+!:#R4A79;:b"AC.&"*L%^:#9U;:357&`G0#%]*!#957-!\-!*+4;:3A7ACA;:?3(!5C&".&!:T8Td!#:'?(S+!:#R4AC9p57-!"&-!.D\4;+!&):%;&!:d#%&(!2+!:#RAC9p"+.2&(!;&b;:I[-)#fxd-$&"#>Y,.&d&()2#+!&579A?()#57.N#%"&":3;&"BGTO()"2%;&):3O57-!A74*)\fi x4)}>Lmxm}E3}x)}L}}v}!4<Y}mxv8akmlO#i'lgegk!tm~(QQbO()NeU:3;BMR4:3-!3(457-)B_%^.&"#:'#%]&()2";:3?(&":Tn8# ffi i^ n tm]J9OcQVO()L*!5Y,:-!.D]#-eU:3;BDR,&`x-<&()>&579;&"*<*!57aZ&-4.g&"#B#A-)#[*)-!*@&()g&":3!*!57"&-!.g&"#J&()gA7#""&B#A'-)#[*)TkO(457fi57&579;&"*X%^:#9&()fi(!A7AC#fx";:33(XR8GP.#9+4)&57-)BL&()fi*!5Y,:-!.ER,&`x-H&()EaZ&5=9;&"*k*457"&-!.&"#<&()PB#A;&Q&()gR,B57-4-!57-)BX#%b&()P;:33(w-!*&()P9>A7AC"&&579;&"*$*!57&-!.b&"#fi&()bB#A,%#:OA7A,AC;%-)#8*!r#%&()V(!A=AC#exw";:3?(D4957-8!&().&4A*!57&-!.V%:3#9&()N:#8#&O-)#[*)V&"#&()MAC;%]-!#8*)Tp kmkml ns^(QQVO()2*)B:3M&"#Lxd(!57?(-)#[*)d;:E!-)U-!A7G0*457"&":35CR)&"*$9fi#-)BQ)R)Z&":3d57-0&()M";:33(P"+4.Ttmkmk) itl7:9<QVO()QAC%^&aZ&"#;Z:35CB(F&E+,#57&5C#-J#%d&()>h:3"&E#+!&579A"#A7)&57#-J-)#[*)Td(!5757"&579;&"*>%:#9&()d(4A7AC#exk";:33(LR8G_*!&":3957-!5=-)Bbxd(!57?()R!&":3d.#-v&5=-!-!#8*)Oxd5C&(0&()NAC#fx&d"&579>;&"**!57"&-4.\&"#&()NB#ATn8# ffi i^akml ##i'l#e#k! WJ(. QbO()r:3;&5C#b#%,-)#8*!.[+4-!*!*_Rc&x-&()\):"Z:3-v&d-4*$+!:U[5C#!r1aO/2}M5C&":3;&5C#-4T!;&):M%:#9&(!-)#-[ZB#A5C&":?;&5C#-!V:+4:"-F&N;&"&":35CR4)&"b%^#:N&()fi&"&2"D-4*H&()&":3;&"BG2&(!;&W:3!AC&5=-2&()R,"&+,:%^#:39-4.'jm()#:3&""&W:3!-N&5=9fifu:3+!:"-F&]&().#:3:.&A=5h;&57#-$#%&(!N+!:#R4A795=-!"&-!.N%^#:d_B5CU-P"&":3;&"BG?()#57.T8Td:#R4AC9;&"&":35CR4)&";:.#9MR457-)*2xd5C&(V&(!.#::"+,#-!*457-)B\A7"-!*2;:3%*M&":?57-!57-)B.)9fi+4A7M&"#X9?(!57-)0AC;:3-457-)BPG8"&"9TH$!"g)T j b!57-4A7-DrqssuE&"#H57-!*!!.0*!575C#-P&":_%:3#9p&()E+!:.Z`A=5h4*P"TN/:?!AC2R"E5=dB-):?;&"*X%#:b3(H.#-4.+!&&"#QR,MAC;:?-)*D.#:3:"+,#-!*!57-!Bfi&"#>3(X#%&(!M"&":3;&"BGS*)5757#-!OA757&"*g;R,#eUE&(!;&b-)*&"#>RcN9>*)T)Td#0"#ACUMQ-)x +!:#R4AC9Dc\4J+c:3%#:39>d>3(!A7AC#fx ";:3?(S&():#)B(g&()M"+.E!-F&57A:3#)B(!ACG;tt[D ttt-)#[*);:.[+4-!*!*TW1%MB#A,57-)#&%^#!-!*>*4):357-)BV&(!'(4A7AC#ex";:3?(&(!$%;&):3_#%&()0&":;:3A7!A7;&"*;&fi&(!5=M+,#57-F&fi-!*!"*&"#57-4*).;+!+!:3#+!:357;&":?!ACr%^:#9&()Er)T fi*!;&;R4"T8Tdd()NAC;:3-)*:3!ACr:.#9>9fi-!*"&":?;&"BG3()#57.dB5CU-$&()2%;&):3\#%W&()2-)x+4:#R4AC9+4.T\!X&(!-57-!5C&5=;&"_+;:3A7ACA,";:3?($%^:#9&()b:#8#&\#%&(!N"+4.D!9fi+AC#eG[57-)B&(!M"AC.&"*P"&":3;&"B5CTO)#:'9>-vG$;+!+4A=57;&5C#-!D)&(!257-!5C&5=A,.8+4-45C#-$&;I#-!ACG$fi%^x.#-!*!d-4*$*)#Fd-)#&OB:;&ACG$Y,.&d&()V:?!-v&5=9fib#%]&(!2";:3?(gACB#:357&(!9$TO(!E*)3.:35CR,*P&'#%%;&!:V-!*S&()_9fi#!-F&'#%&579fiE&"#"+,-!*P#-P&(!_5=-!5C&57AW\!]5C&":3;&57#-P;:E3()#-PR"*g#-P#):'.8+,:35=9fi-v&A*!;&L&"#LG[5CA7*$&(!E9fi#&()AC+4%^!A57-)%^#:39;&5C#57-0&()N3()#:&""&\&579T8;:3?(!57-)B_-)#)B(g5C&":3;&5C#-!r#%]&()N+4:#R4AC9"+4.M!-v&5=A,;tt[D tttQ-)#[*);:PB-):3;&"*&;I0AC&(4- qt<".#-!*!>#-&(!g+!:#RAC9 *)#95=-!xg&""&"*T{8+,-!*!57-!BAC&579fi$&(!-&(457fi9GG[5CA7*<::#-!#!57-)%^#:39;&57#-Rc4"$%;&!:#%'&()&":P*)#-)#&"&;R45=A75C$!-F&57Ar"U:3AOACUA=*)#ex-57-&()$&":Tk8;:?3(!57-!B*!*!5C&5C#-4A57&":3;&5C#-!fi57-B-!:3A*)#8V-)#&N5CB-45h-F&ACGg579fi+4:#eUfi&()68!A757&`G#%r57-)%^#:39;&5C#-X-!*X&(!fi&579fifi:68!5C:9-v&'B:#fx.[+c#-!-v&57A=ACGT@1a9fi+!:#fU*;+!+!:3#3()Q9G@5=-!A7!*)Q+,:%^#:3957-)BX&()P57-!5C&57A\;:33(k!-v&5=A\&()"&;R45=A75C&`G$#%&()fi"+4.fi:?()NQ+!:3.:35CR,*gACUAD#:V+c:?5C#8*457A7ACG0)+*!;&57-)BL&()>)T Q3()#5=.-!**;"!&57-)B_&()V+4;:3A=ACA";:3?(g;+!+!:3#3()*)G8-4957A7ACGL*!):357-!BM.[)&5C#-\fiP#$}wwyXm$'U[57;&5C#-g5C&(457-0:#R4A79 'U[57;&5C#-&x-X:3#R4AC9#9>57- 8&;&% ::#: 19MR R!%% ::#: 19MR R!%q+4)AC 8&*gUt[T ttt q;Tfv| t[T tt)q 8T |s t[T tt 8T t[T tt| )T ||s/UFB>A7) q;T ;ts 8T ts t[T >| i8T s| q;T ;ts 8T ts t[T |>i i8T s|odzS8&*gUt[T t;t s8T [q t[T tt)q t[T tt t[T ;t v8T tt t[T tt t[T7q|/UFB>A7) 8T iv qq;T > t[T7q.v| q;T7qt 8Tiv qq;T >i t[T7q.v| q;T7qt];R4ACq;:#R4AC9);&!:2A7!2'U857;&57#-!] :%^#:3957-!B2->57-45C&57A[(!A7A7#exk;:33(Q(!A="#NR,->(!#exd-fi&"#MR,O.Yc.&57U'57-#&():+;:3A7ACA";:3?(0:";:3?(T)#:\.)9fi+4A7D!))&"&-):Vjaqssu+,:%#:?9+;:3A7ACAc";:3?(0#%&()'h4:3"&%x1aO/2}5C&":3;&57#-!&`xd57.V*!!:357-)BN+;:3A7ACA";:33(g57->#:?*):r&"#_*!&":3957-)&()V-F492R,:#%57-!*45CU85=*!!A8&"I[&(!;&_()#!A=*R,L*!5="&":35CR4!&"*X&"#P?(+!:#[."#:TH#F#IJ&EAiTjaqssuEA7"#P+c:3%#:39 -57-!5C&57A(!A=AC#ex";:3?(57-<#:3*):_&"#H#R!&57-9fi#:30!:3;&"#+,:3;&"#:fi#:3*):?57-)BX57-)%^#:39;&5C#-&"#!"057:#:3*!:357-)BV&()'";:3?(L"+.T1-3(0"D[&()9#!-v&#%&579fiO:36F!57:*fi&"#2+,:%^#:39&(!d.[&":357-!57&57A,";:33(P57\957-4579AcG&OB:;&ACG$579+!:#eUO&()N+,:%^#:39-!.b#%W&()V#eU:?A7A";:?3(&ITO(!g"AC.&"*%;&):3>?(k*)9#-!"&":3;&"g5CB-!5Ch-v&5=d-)-!.0#-&()#+!&579>AO";:3?("&":3;&"BGTE/A7&()#)B(S%;&!:_UA7!'-H?(!-)Bfi*):39>;&57A7ACG%^:#9#-)E+!:#R4A79p&"#$&()fi-).[&D3(E%^;&)::957-4%m5C:3ACGV"&;R4A7R,&`x-_ACUA7#%)&()39fi&":T/'WO:4AC&D.#9+4)&57-)B&()U;A7)#%&()"'%;&):3;&rMA7#exwACUA5=-&()&":+4:#eU[57*)NB#8#8*Q57-!*457;&5C#-#%&(!"&":34.&):#%W&()N-F&5C:N&":3TO(!h"U[57;&5C#-Pw5C&(!57-$:#R4AC9W_-v&":357d57-$];R4AC>q2()#ex &()2"&-4*!;:3**)U[57;&5C#-<#%O?(%;&!:0UA7!>#eU:LA7Ar";:33(&":30A7UA7THO()Q:!A7&M;:$eU:3;B*@#fU:s|L+!:#R4A79p57-!&-!.b57-g&(!2h4%^&"-S+4)ACE*)#957- , -!*X;tQ+!:#R4AC957-!&-!.5=-g&()E:#R,#&;:399fi#&5C#->+4A7-!-!5=-)BN*)#957-T]#&(Q#%&()"&""&*!#957-!;:*)3.:35CR,*57-fi&(!-).[&.&5C#-O()MAC#ex UA7!O57-$&()2.#A7!9-4O57-!*!5=;&"V&(!;&d&()2%;&):3d+!:3#eU[57*)NB#8#[*g57-!*457;&"#:\#%&()"&":34.&):d#%&(!d+!:#RAC9"+4.b;&rA7A4ACUA=57->&()d&":T1-L.#-v&":3&D8&(!"'U85=;&5C#-0&x:3#R4AC92&;R4AC'-v&":?5C3()#exw&()b"&-!*!;:?*L*)U[57;&5C#-L#%&()bU:?;BV%;&):3U;A7)_jmU:3;B*#eU:LA7ArACUA7_57-3(&":fuM#fU:>A7A+!:#R4A79 "+.TJO()0A7;:B:fiU;A7)_57-&()"$.#A749-!57-!*457;&"b&(!;&O&()N%^;&):-$.Y,.&5CUACG*!57&57-)B!573(R,&`x-g*!5CYc:-F&\+!:#RAC9"+4.T!]S5=xd:35C&"&"-057-$-!*057r)::-F&ACG>579+4AC9fi-F&"*>#-$-0-\r~8D)#-05=-F[Lx#:IFZ"&;&5C#-4L!357-)BX&()PW;:3A=ACAOb5C:&!AdzP?(!57-)jm'zHu>.#99M4-!57;&5C#-k"#%&x;:3DO#-'~r/'AC+4(!P!57-)BP-<5=9fi+4AC9fi-F&;&5C#-#%d]#5J&(!:*!D#-<w57-!*)#fxdM':3!-!-457-)BgyeUS&():3*!-!*$r57ACI_&():3*!D[-!*LE*!57"&":357R4)&"*>yvU;M"G["&"9!5=-)B2odzP1TFHV;:bA7"#E)::-F&ACG57-FUaZ&5CB;&57-!Bb9-!]#%*)G[-!957A=ACGV"xd5C&?(!57-)BRc&x-fi&":3;&"B5C*!!:357-)BO.[)&5C#-fiW&(!+4:#R4AC9"&":34.&):V#:O-FU857:#-!9fi-F&O3(!-!BTOW2-<q<OQOkOWO+<2OQ[QOU&OKWON2UN<2OWOO+W<"<2O\efi x4)}>Lmxm}E3}x)}L}}v}!4<Y}mxv8W z$\$vkY}Xm;1a-&(!572".&5C#-x>x57A7AW+!:-v&N.[+,:3579fi-F&A:3!AC&V&(4;&M.#9fi+4;:3>&()+,:%^#:39-4.#%r#):*!;+!&57UE+;:3A7ACAW";:3?("&":3;&"BGSxd5C&(S?(Xh![*H"&":3;&"BGX!"*X.)A7!5CUA7G%#:VA7AW+4:#R4AC957-!&-!.T1a-$+4;:&574A7;:D[x2xd57A7AU:35C%^GL&(!N%#A=AC#exd5=-)Bfi(vG8+,#&()"O57-0&(457\".&5C#-!] _ b*!;+!&5CU_";:3?(X&"3(!-4576F!-XR,M4"*g&"#$?(!5CUfi"+,*!)+S#eU:NQU;;:35C&`G#%;+!+A757;&5C#-!D[-4*$-g*)9fi#-4"&":3;&"2579+!:#eU*0:3!AC&\#fU:!357-)Bfi_h![*$"&":3;&"BG$%^#:A=A+!:#R4A795=-!"&-!.Td()E*4;+!&5CUfi";:3?(H&"3(!-4576F!E-X9fi+AC#eG&":?57-!57-)BL.[9+4AC'%:3#99M!A7&5C+4AC2;+4+4A757Z&57#-!&"#J5=9fi+!:#fU#eU:3A=AO+,:%^#:39-!.TkHgxd57A=A*!9fi#-!"&":3;&"g&(!57!357-)BH&""&57-!BJ-!*&":?57-!57-)B_.)9fi+4ACd.#92R45=-)*0%:3#9&`x#L;+!+A757;&5C#-$*)#9>57-!Td()AC;:3-!5=-)BH.#9fi+,#-)-v&fi#%2O!]57;R4AC$&"#5CB-!5hc-v&ACGJ#)&"+,:%#:?9 -vG<#%b&()&"&"*h![*<&":3;&"B5Cfi57-<&":39E#%+!:*!57.&5=-)Bg&()0R,"&_"&":3;&"BG<%#:SB5CU-+4:#R4AC95=-!"&-!.T1a-X*!*!5C&57#-g&"#0.Y,.&5CUACGP9>;I857-!BL#-)fi"&":?;&"BGS?()#57._%#:V0-)x+!:#RAC9$D\!]579#"&fi.Yc.&57Ug#%bA7A&""&"*;+!+4:#3()>;&9;I85=-)BHA7A\"&":3;&"BG*)5735C#-!E%#:LXB5CU+4:#R4AC957-4"&-!.T/U;:?5C&`GP#%AC;:3-457-)B>&"?(!-!5768)b-XR,E4"*g&"#357"&b57-S"&":3;&"BGX"AC.&5C#-H-!*S#;Y,:+c*4)+>#fU:d":357Ac";:3?(D[&()#)B(Q+,:%^#:39-!.xd57A7A4U;:G>%:#9#-)VAC;:3-457-)BN&"?(!-!5768)&"#L-)#&():Tiq )n8ht pb-)#%!#):W&""&*)#9>57-!]57]&()xA7AZI[-)#fxd-Nh%&"-_+4!AC+!:3#R4AC9$T]O(!57+!:#R4A79.#-!5="&]#%PdB:?57*N.#-F&57-!57-)B&57AC-8!9MR,:*N#-)&"#Oh4%^&"-D-!*Md57-!BAC9fi+!&GV&57AC+,#57&5C#-NA7AC*2&()'&57ACT/ &57ACb-$R,'9fi#fU*g57-F&"#_&()bR4A7-)I>+c#35C&5C#-L%:#9-$*;".-F&O+,#5C&5C#-DF:3!AC&57-)B57-X&()fi%^#):V#+,:3;&"#:32)+D*)#fxd-DAC%^&D-!*X:357B(v&T>b5CU-&()57-!5C&5=A-!*XB#A.#-[h4B):3;&57#-!D&()M+!:#R4AC957O&"#>h-!*P>"68)-!.E#%9fi#eU'&"#Q:3(P&()EB#AiTd/9+4ACNB#AW.#-[h4B!:3;&5C#57O3()#exd-g57-W5CB):qq;TrO()NzS-!(!;&"&-Sb57"&-!.M!!-!.&5C#-g+!:#fU857*!\-g*!95=5CR4A7'()!:357"&57%^#:&(!5=+!:#RAC9$Dv-!*>xb!"d&()EqttM+!:#RAC957-!&-!.+4:#eU[57*)*5=->lV#:N% _ &""&r*!;&Ljaqss[qeu?Tb!:r.#-!*;+!+4A=57;&5C#-0*)#957-$5=&(!V:#R,#&r;:?99fi#&5C#-0+4A=-!-!57-)BM+!:#R4A79$T:3*45C&5C#-!A9fi#&5C#-N+4A7-!-!5=-)B9&()#8*4;:U:GV.#"&A7G'x()-V;+!+4A757*b&"#d\:#R,#&;:39$DR,!"?(\"#57-F&(!-g5=-[h-!5C&"b-8!92R,:O#%-)BA7O&"#xd(4573(57&O-g9fi#fUM%^:#9fiB57U-g.#-[h4B!:3;&5C#-D4-4*$R,!".#A7A75=5C#-?()I[57-)B@9E!"&0R,S+c:3%#:39*%^#:03(;:39 B9fi-v&T:35CB<+!:#fU85=*)0<*!&57AC**).:?5C+!&5C#-#%d&()$A74A7;&5C#-!_-).3;:GJ&"#H*)&":39>57-)Q&()0+c#35C&5C#-#%d&()0-!*<.Y,.&"#:>57&()>;x#:I["+4.fiB5CU-H&(!)::-F&a#5=-v&N-)BA7>jaqs|su?T>)#:M#):V.8+,:35=9fi-v&Dx4"fi&()+4;:39&":3$*).h-)*%^#:$&()H!9>> i;t:3#Rc#&$;:39x5C&(k35k*)B:#%2%^:*)#9 ()#fxd-w57W5CB):q8TO(!g5Cg-4*@A7G#!&>#%b&()g:3#F#957fi&()g39fi%^#:>3(#%b#):&"&>+!:#RAC9DR4)&\xNU;;:GQ&()257-!57&57A,-!*$B#A;:?9p.#-[h4B!:3;&5C#-!\&"#>B-):3;&"E;t+!:#R4AC95=-!"&-!.TO()kmi'l2O"WO"W<YWO"WcOXU2OUW2<[O<<<OWO<"<OQ<>-2N<SOQ&QWO"<2<"<2OO<O"O$2" KW>2OX<U2OQQ2<"ff2ff OU<ff-<2OGOWO\fiP#$}wwyXm$123456789 101112 13 1415W5CB):3qq;W5C%&"-g+4)ACV+4:#R4AC957-!&-!.W5CB!:q8oO#R,#&d;:?99fi#&5C#-$+A7-!-!57-!BM+!:3#R4AC957-!"&-4.:#R,#&;:39+4;&(fi+4A7-4-!57-)B'+!:#R4A7957W+4;:&574A7;:3ACG2*45KL!AC&WR,!"O.#-457*):35=-)BbU:G_+c#35CR4AC;:399fi#eU9-v&V:3!AC&d5=-PQ";:3?(S+4.Mx5C&(g-X57-[hc-!5C&"VR!:3-43(!57-!B>%m.&"#:TH_-!.#[*)E#-)+,#5CRAC9fi#fUN5Cb%^#:\3(E"#57-F&D8:3!AC&57-!BE57-Q_R!:3-43(!57-!B2%m.&"#:O#U% i8Td()b:"#A7)&57#-L#%&()9fi#fU'-gR,2*)&":395=-)*$R8GQ&(!M!":eD4-!*%^#:d&(!"2.[+,:3579fi-F&\xM3(!#F#"E:#A7)&5C#-$#%qN*)B:3Tb!:fi&(!5C:3*<&""&>*!#957-!"&();:&5h5=A;:33(k"+4.g57-<xd(4573(+4;:?9fi&":357-4A7!*!57-!BR!:3-43(!57-!B\%^.&"#:D&":3579MR4A7-!.D;"#A7!&5C#-N.#"&D()):?57"&57W::3#:D-4*2AC%^&aZ&"#;Z:35CB(F&B#AF+,#5C&5C#-$R,b"+,5h4*QRFGL&()N!":eT]H2B-):3;&"M;t_+!:3#R4AC957-!"&-!.r%^#:O!"V57-Q&()V.[+,:3579fi-F&T)#:#):W%#):3&(M&"&*)#957-Dx\57-F&"B:3;&"\#):#ex->ZR4"*EU:357#-_#%4&()d['H-)#-4A757-);:+4A7-4-):Njm;:3:&"&'n{HA7*Dqssu\57-F&"#L\!T#.#-)%^#:39x5C&(0&()M\!H;:?3(!5C&".&!:D&()$57-F&"B:3;&"*+4A7-4-):E!&57A75CM1d/N}g";:?3(57-!&"*#%&()$"&aZ`W5C:3"&fi";:3?(9fi&()#[*9_Z+4AC#fG*XRFGH[']T~3(+4A7-S:+45C:V"&"+jhcA7A757-)BL-X#+c-H.#-4*!5C&5C#-S#:N(!-!*4A757-)B>0&(!:;&?u'57&":;&"*Wb"+4;:?;&"O-)#8*!57-M&()\";:3?(fi"+4.r&"#bR,.[+4AC#:*TH\.#9fi+4!&"&(!r.#&#%4'+4A7"#A7!&5C#-Xb&()fi-F!9MR,:b#%#+,:3;&5C#-!b-!*H.#-4"&":357-F&V57-S&()_+4A7--!*S&()fi*!5="&-!._&"#$&()B#A]57\"&579>;&"*g!5=-)B_&()2-8!92R,:O#%W:9>57-!57-)$BexdTHM"A7.&;t+!:3#R4AC957-4"&-!.\%^#:#):].8+,:35=9fi-v&%:3#9&()R4AC#[I[aZx#:?A7*D;#fx:3]#%!'-)#5iD-!*M9fi#-)IGFZ`-!*[ZR4-!-4+A7-!-!57-!B*)#95=-!T#M.:;&"'&""&"D8x:3!-fi?(L+4:#R4AC957-4"&-!.d9E!AC&5C+ACr&579fiDF#-!.d%^#:?(L+;:3A7ACA";:3?(g"&":?;&"BG57-$57"#A7;&57#-TO()N";:3?(g"&":?;&"BG$&(!;&O+!:#[*!!.r&(!NR,"&O"+,*!)+$57O.#-457*[Z:*&"#PR,L&()e".#:3:.& XA75hc;&5C#-#%O&(!Q.#::3"+,#-!*!57-)B;:33(<&":Q%#:)T g&"#HAC;:3-"&"r;::3!-fi#- iE+!:#[."#:3#%->-r'r~N-!*>#-Q|2*!57"&":357R4)&"*Ex#:3I8"&;&57#-!457-)B\fi x4)}>Lmxm}E3}x)}L}}v}!4<Y}mxv8/d+!+4:#3(q;!AC W57AZ3q; odzS W57AZ`ozPlN!9;:O-!*god;# 8Ti8T |s i8T7qtFT:3;&([Zih4:3"&i8T | s8T8T s;tLq4)T8T [qLqi J{qi $qJ#92R57-)*[Z)Ti[q;T ;t];R4AC28b57&":35CR4)&"*$:E[;:33(P[+c*4)+$oO!A7&bzT1a-E&()h4:3"&W"&W#%4.[+,:3579fi-F&xh!MA7A8"&":3;&"BG_3(!#57.WR4)&]#-)\-!*EU;:3GN&()\"&":3;&"BG3(!#57.2!-!*!:O.#-!57*):?;&5C#-TO()N*!%^!A7&+;:39fi&":?()#57.;:G .b57"&":357R4)&"*0:3E8;:3?(b57&":35CR4)&57#-Q&":3;&"B'!9MR,:O#%]A=!"&":3.qB .bt #*R4A=-!57-)*- .5CB(FR,#::#[."#:AC.&5C#]:3.-F&;BE#%W&I*!57&":35CR4)&"*Q)+,#-0:68)"&.;tG .57A^'%^57"&'#-!;&5=-)B>"&":3;&"B/'-F&575C+4;&"#:G0AC#*$RA7-!57-)B_&":357BB[: .tB .]5C8*b:3*):357-!HH.#9fi+4;:3P&()P:!A7&>#%M)T fZ`AC.&"*"&":3;&"B5C0&"#<3(&":3;&"BGk!*@.)A7!5CUA7G%^#:A7A'+!:#R4AC957-!&-!.T8+,*!!+k:3!AC&Q%#:$U;;:35C#4Q&":3;&"BG*!575C#-!QU:?;B*#fU:A7A\+4:#R4AC957-4"&-!.>;:3P()#fxd-@57-@&()%^#A7AC#ex57-)B".&5C#-4Td()$R,"&>U:?;BX+c*4)+@57(!5CB(4A75CB(F&"*@57-@?(w"TO()H)T J:!AC&>;:S;+4&):*@R8G+,:%^#:3957-)BJ&"-[Z%^#A7*k.:3#U;A757*!;&5C#-#-@&()$h4%^&"-+4)A7*!;&-!*@&():.Z%^#A7*@.:#UA75=*!;&5C#-#-&()g:#R,#&;:399fi#&5C#-J+4A7-!-457-)B)D;:&5h5=AiD-!*-!#-!A757-);:V+A7-!-!57-!BQ*!;&P"&T$8+,5hA7ACGD*)5757#-X&":57V.:;&"*%:#9&(!fi&":357-!57-!BQ"M-!*H!"*X&"#AC.&V&()"&":3;&"BGX%^#:V&()fi&""&2T>)T"+,*!)+057rU:?;B*g#fU:dA7Ac&""&O"\%^#:\#-)N5C&":?;&5C#-Q#%&(!5=+4:#8.3D)-!*Q&()bh-!AcU;A7);:2eU:3;B*P#eU:b.:#aZU;A757*!;&57#-$5C&":3;&5C#-!T^ ^]itl ^nFee"&:!A7&];:3#R4&57-)*_%^#:&()r&`x#NAC&":3-!;&5CUO*457"&":35CR)&5C#-N;+!+4:#3()TO()h4%&"-_+)ACD&():3#Rc#&M;:399fi#&57#-+4A7-4-!57-)BQ+!:#R4A79$D-!*&()>;:&5hc57A";:3?(+4.>":UQ2+4:#R4AC9*)#95=-!T~[+,:3579fi-F&A):4AC&;:3'(!#exd-Q57->];R4ACb8T)#:r3($*)#9>57-Dv&(!'.#-F&":#AcU;:?57;R4AC57\57-4*!57;&"*$!-!*!:\&()^"/+!+!:#?( .#A7!9>-O(!MR!:3*)&([Zih4:3&'*!5="&":35CR4!&5C#-$+,:%^#:39bA75CB(F&ACG$R,&"&":V&(!-)T Q%^#:V&()Eh4%^&"-X+4)AC*!;&N&F()#fxU:D8&()'r)T ':.#99fi-!*4;&5C#-!#)&"+,:%^#:39&()\R4:*)&([Zih4:?"&;+!+!:#?(%^#:&():#R,#&29fi#&57#-J+!:3#R4AC9*)#9>57-T0O():#fxA=;RcA7* fi :c >ffJ:@5=V&()>:3!AC&N#%O9:B57-)Bqhji ffi\Q\fiP#$}wwyXm$[&;&)9A7A zg*457!9 ;:B/U8BQ#8%;: q;T|8T |s8T/U8BQ8+,*!)+ FT8T )T ts];R4AC28/U:3;Bfi8+,*!)+P8&-!*4;:3*$'U857;&57#&()'h4%^&"-Q+4)AC:!AC&xd57&(>&()':#R,#&r9fi#&5C#-Q+4A7-!-457-)BN:3!AC&-!*Q:3!-!-!5=-)BV&()V.#92R57-)**!;&&V&():#)B(r)T 8TO()fi+,:%^#:39-!.fi57bR,&"&":N&(!-%#:N&(!_h4%&"-+4)AC_R4)&N3A75CB(F&ACGx#:3"N&(!-%#:O&(!N:#R,#&O9fi#&5C#-$+A7-!-!57-!BE*)#9>57-#&"$&(!;&fi!57-!Bg&()QhAC&":3*kqP+4)A7Q*!;&[Dr\!]w3(!57UP+c*4)+#%V;s8T7qeSAZ&()#)B(&()g-8!9MRc:>#%V+!:#[."#:34"*57#-!ACGG i)Twd()"+4;:?A7ACAO";:?3(ACB#:35C&(!9>+!:#[*!!.N3)+,:3A757-);:r"+,*!)+Jjm+c*4)+$B:;&":'&(!-$&()2-8!9MR,:O#%W+!:#[."#:3?uR,!N&()+4;:3A=ACA,ACB#:35C&(!9>O*)#-)#&O.#9fi+AC&"ACG05795C&;&"N&(!N":357AACB#:?5C&(!9$T)#:.[9+4ACD!!5=-)Bfi*!57aZ&":35CR)&"*0&":M;:33(P57-!*!5CU[57*!4A!R!&":O;:M5CB-)*&"#L"+4;:?;&"2+!:#[."#:?T1%]B#A-)#[*)57MAC#8;&"*#-&()>%m;:EA7%&E57*)#%\&(!>:35CB(F&9fi#"&E)R!&":3>57-&(!L";:3?("+4.DW&()>+4:#8.3"#:";:3?(!57-)BP&(!57M)R!&":Lxd57A7A6F!5=I[ACGSh-!*H&()QB#Ar-)#[*)D&(8!M&":3957-4;&57-)Bg";:?3(;%&":_#-!A7GL%x-)#[*)2.[+4-!57#-!TO1a-P.#-F&":3"&D&(!E":?57AACB#:?5C&(!9p5=-PQAC%^&aZ&"#;Z:35CB(F&'";:?3(Sxd57A7A.#9_Z+4AC&"A7GL";:3?(A7Ac#&():d3)R!&":&"#&()V.#"&d&():()#A=*LR,%^#:V";:3?(!57-)Bfi-!*Qh-4*!57-)BM&()bB#A-)#[*)57-X&()>:35CB(F&9fi#"&2!R!&":TO(8!V&()L":357AACB#:?5C&(!9xd5=A7A]+c:3%#:39*457"+!:#+,#:&57#-!;&"ACG9fi#:fi";:?3(H&(!-XA7A]+!:3#8.#:3V.#92R57-)*X!57-!B>&()fi+4;:?A7ACA]ACB#:35C&(!9TN~3(&`G8+c_#%+4;:"ZA7ACA;:33(;+!+!:#?(J*).:?5CR,*H57-X&(!57V+;+c:N-JG857A7*H)+,:3A75=-);:'+c*4)+!-!*):N.:3&57.#-!*!57&5C#-!TL8#9>ACB#:35C&(49N9fi#:LAC#"ACGX5795C&;&"L":357A";:?3(DWR4)&N;&M$+,#&"-v&57AAC#V#%#eU:?A7A+,:%^#:39-!.jmlNA7Mn[AC&"#:3Dqss;tvu?T!] _ b"AC.&5C#-S#%"&":?;&"B5CV57-P&()2h%&"-X+4!ACM*)#9>57-P*!#Fb-)#&b+,:%^#:39p.#-!357aZ&"-F&ACGVR,&"&":]&(4-M!357-)BO"#9fi#%)&()"&":3;&"B5C57-257"#A7;&5C#-TWb-):"#-M%#:]&(!57*!57;+4+c#5=-v&57-!B+,:%^#:39-!.b57&()V-!;&):'#%&(!'&":?57-!57-)BE*!;&[T/'AC&()#)B(QxV!"'&()V"&":3;&"BGQ&(!;&O3(!57U&()LRc&N:3!-H&5=9fi>M&()L.#::3.& "A735h;&5C#- g%#:EB5CU-+!:#RAC957-!&-!.D&(!:>*)#8-)#&OACxrG[O.)57"&\A7;:Oxd57-!-!:%^#:\3(P+!:#RAC957-!"&-!.TV-$"#9fiN+!:3#R4AC957-!"&-4.\#-)"&":3;&"BG@*!:39;&57A7A7GJ#)&"+,:%^#:39_&()g#&():3TV-#&():>+!:3#R4AC957-!&-!.fi&`x##:Q9fi#:"&":3;&"BGAC.&5C#-!\+,:%^#:39A79#"&\6F4A7ACG>xA7AiTO(457+4:#R4AC9{57].[.:3R4;&"*R8GN&()r%m.&&(!;&&():\57W"#9fi\-)#5="5=-!():-F&]5=-M&(!r.#A=AC.&"*:3!-&579fiT#E*)9#-!"&":3;&"&()9fi#4-v&#%::#:&(4;&-LR,O+!:"-F&5=-fi&()d&5=957-)BxAC.&&`xACUX57-!"&-4.>#%V&()gh4%^&"-+4!AC+!:#RAC9 j^%^#):Q39A7AiD%#!:L9fi*!5=!9$Dr-!*%^#):QA7;:B57-!&-!.?u?D-!*&5=9fiQh4U0:3!-!E#%d?(@57-!&-!.0xd5C&(57*)-F&57Ar"&":3;&"BG+4;:39&":3_#--r'r~8TfiH>.#9fi+)&"fi&()"&-!*4;:3*H*)U[57;&5C#-X#%&()"+,*!)+4'%^#:Vh4Ufi:34-!'#%&()L9fi+!:#RAC957-!&-!.D8-4*&()-Q*!5CU[57*)\&():!A7&RFGfi&(!9fi+ACd9fi-Q&"#2-4):O&(!:3!AC&57-)#&Y,.&"*LR8Gfi&()'9;B-!5C&!*!O#%&()+c*4)+U;A7)TO(!5=.#F.KQ5C-v&#%U;;:357;&5C#-LU:3;B*0#fU:A7A+4:#R4AC957-4"&-!.N57-&()>;&"B#:GJ5=VA757"&"*5=-H;R4A7L$AC#-)Bgxd5C&(X&()>eU:3;B$"+,*!)+%^#:2&()Q57-!"&-!.M57-H&()L+!:#R4A79;&"B#:GTg/'M3()#exd-D&()L9fi#!-F&2#%\::#:M+!:"-F&M5=-H&()&5795=-)B-fiR,O6F45C&"OA7;:BD8-!*fixd()-_&x#E"&":3;&"B5C+,:%#:?9A79fi#"&68!A7A7G2xA7AiD&()Ox57-!-):%^#:d-vG0B5CU-:3!-$-R,NA79#"&O;:R45C&":?;:GT#.#!-F&d%^#:O!3($9>57AC*!5=-)BE*4;&[D!xN#:&OA7Ac+!:#R4A795=-!"&-!.O5=-L&(!bh4%&"-+4)AC*)#95=-0RFGQ&()N9fi#!-F&O#%]U;:?57-!.V#%W&()N"&":3;&"BG$&5=957-)BE:!A7&TO()#"V+4:#R4AC957-!&-!.\lfi x4)}>Lmxm}E3}x)}L}}v}!4<Y}mxv8/d+4+!:#3(q;!AC W57AZ3q;odzSW57ACZ`odzSlN!9;:dnod;# Ti;tSjT tvu |;tsPjT ttvu ;tv;sPjT Fu ;tttSjT tu:*)&([Zih4:?"& s>iPjT7q.Fu !qs;tSjT t)qeu vs[qQjT7qqeu |;tttSjT t)qeu)TvT7qi[qsTivsti>i];R4ACV)b57&":35CR4)&"*$:M8;:?3(S\A75hc;&5C#-$oO4AC&&(!;&G85CA=*$>AC;:'"&":3;&"BG$xd57-4-):O;:2+A7.*;&d&(!N&"#+P#%W&()MA757"&TH2&()-hAC&":O&()M*!;&"&M&"#gI+#-!ACGS&()>&"#+<&(!5C:?*H#%r&()L"#:3&"*J+!:3#R4AC957-4"&-!.T$O()L57-!"&-!.M57-H&()L&"#+&(!5C:?*P#%&(!57'hA7&":*H*!;&$"&N;:*4)+4A757;&"*X57-S&()fi&":?57-!57-)B0"&TfiO()_:3!AC&'#%\O!] _+,:%^#:39-!.#-E&(!57hAC&":*M&":357-!5=-)Bd"&57]()#fxd-E%#:W3(_.[+,:3579fi-F&W57-N&()\W57AZ3q;H.#A=!9-H2+,:%^#:39fi5=957A7;:hAC&":?57-)Bfi"&"+&"#&(!N:#R,#&O;:399fi#&57#-$+4A7-!-457-)B_*)#957-$*!;&[TO(457V;+!+!:#?(-R,!*H57-X3(<*)#957-H5=-Xxd(!57?(X+!:#R4AC95=-!"&-!.N*!#-)#&NACxrG[G[5CA7*<HAC;:"&":3;&"BG<xd57-!-!:T)#:.)9fi+4ACD+!:#R4AC957-!&-!.fi*):3exd-<%:#9&()$+A7-!-!57-!B*)#95=-<-4*;:&5h57Ar*)#9>57-A7Ar*)9fi#-!&":3;&"(!5CB(<U;;:357-!.$#%b"&":3;&"BG<&57957-!BD&(8!fiA7A+!:#RAC957-!"&-4.V;:>)&57A=5C*T_)#:M-FGPB57U-*)#957-D&()-8!92R,:N-!*X&GF+,#%&""&2&"#!"br&":357-457-)BM*4;&fi-0Rcb"AC.&"*0R"*Q#-0&()V9fi#!-F&#%U;:?57-!.b#%"&":?;&"BGL:3!AC&TO()$*!5=*)U;-v&;B$#%&()0hAC&":*)Z`*!;&X9fi&()#[*57E&(!;&">5=-x(!573(<&x#"&":?;&"B5CG[5CA7*579>57A7;:r&57957-!BO9G$R,N*!5=;:3*)*D)U-Pxd()-&()2&x#Q"&":3;&"B5C+,:%#:?99M43(R,&"&":&(!#&():+c#35CR4ACb"&":3;&"B57TO(!S:3!AC&$57-w];R4ACU:357%Gk&(!;&P\4-!&"#9;&57A7ACG"AC.&$+4;:?A7ACAb";:3?("&":3;&"B57&(!;&WG857A7*2B:3;&":"+,*!)+M&(!-fi!57-!B-FGM57-!BAC"&":?;&"BGM%^#:A7AF+!:#R4AC9{57-!&-!.+4!A=AC*@%^:#9&()ShAC&":3**4;&"&T#exU:Db&(!57Q&;R4A7X*!#F$-)#&$57-4*!57;&"X()#exxA7A'&()9?(!57-)NAC;:?-!57-)B.#9fi+,#-)-F&d57r+,:%^#:395=-)Bfi;&d&()NA735h;&5C#-&"ITOb-)N*4-)B:57-$A=57"&57-)B#-!ACG$"+,*!!+:!A7&d57\&(4;&&()E-F492R,:3O9>GR,NR45="*R8G$&()M9>;B-!5C&!*)2#%"U:3A]A7;:B+!:#RAC957-!"&-4.O57-0xd(!5=3(g\!H.#:3:.&ACG0+4573I8\&(!VRc&O"&":3;&"BGT1a-];R4AC\Nxd9fi!:d()#fxxA7A[&()d"G["&"9A75hW3(Q-)x@&""&+!:#R4AC9TWb-!.;B57x2+,:%^#:39&"-[Z%^#A7*g.:3#OU;A757*!;&57#--!*g3()#ex{9fi-gA735h;&5C#-g::#:%#:3(S;+!+!:#?(O()Mh![*X"&":3;&"B5CjmlN49;:V-!*Xod;#)D:*)&([Zih:3"&?uACxrG[b+457Ig&()E.#:3:.&NA75Ch;&5C##%M+!:#R4A7957-!"&-4.'&()5C:#exd-D8-!^* !"5C&*)575C#->&":'&"#M+45=Ifi&()bA75Ch;&5C##%N&()S+!:#RAC957-4"&-!.T[5CB-!5hc-!.gU;A7)Q;:SB;&():*!5=-)BJ+45C:*"&!*)-F&>&aZ&"&-!*;:3L()#fxd-57-X+;:-v&(!"N%^#A7AC#fxd57-)B$&()L9fi-::3#:T>1a-H3(#%r&()fihA7&":**!;&&D)T L5CB-!5Ch-v&A7GQ#!&"+c:3%#:39>O5C&():h![*P;+4+!:#3(j^+ t[T tuOx()-+!:3*!57.&57-)B>&()E.#:3:.&A735h;&5C#-0#%!-!-0+!:#R4AC95=-!"&-!.T7qmnYi'l#^nFf#e1a-0&(!57r.[+c:?579fi-F&\O!]H"AC.&\&()V#+4&579A-8!92R,:r#%WA7!"&":3r&"#L!"b%#:d3(+4:#R4AC957-!&-!.TG$.#92R45=-!57-)B_&()N%^;&):d#%*!57"&":357R4)&"*Q&":2";:?3(g-4*$+4;:3A7A7A,xd57-!*)#fx";:3?(5C&O57r+,#35CR4AC'&"#>3(45CU2R,&"&":O+,:%^#:39-!.V&(4-$xd()-$?(g;+!+4:#3(P57\!"*5=-$57"#A7;&5C#-TO(!PA7!&":357-)BACB#:?5C&(!95=&""&"*w!5=-)Bq;Dd8Dd-!*A74"&":3L#M- i+!:#[."#:3L#%N-r'r~ Q%^#:N&()_h4%^&"-H+4!ACD:#R,#&V9fi#&5C#-H+A7-!-!57-!B)D,-4*J[*)#9>57-!D-!*H457-)BHq-!*0EA7!"&":3%^#:&(!dh4%^&"-Q+4)ACb*)#95=->#-0E*!57"&":357R4)&"*-)&x#:3I>#%]|M\T"&r:3!AC&%^#:O&()2A74"&":357-)BfiACB#:?5C&(!9;:N+4:"-F&"*57-$];R4AC28T\<ufiP#$}wwyXm$/+!+!:#?(q ;)A7 W57AZ3q; odzS W57AZ`ozPqM\A7!"&":8Ti8T [qi;t[T t)qi8T;>\A7!"&":3FT t;i)T|;t[T ts;s8T s|Q\A7!"&":3> i8T |vs8T c q q8T7qe)T fZ`-crr~Lq:d q>i8T cgq{ qJ#9MR457-!*[Z)T;8T s;t];R4AC28\A7!"&":35=-)Bfi[+c*4)+oO4AC&/+!+!:3#3(qErA7!"&":LrA7!"&":?0rA7!"&":?r)TA7-!-457-)B bzZ3q;qt|8TF Tisq.v8TFqs8T7qqiq:q;)AC W57AZ3q;odzSW57AZ`odzS>iPjT t;Fu vsPjT ttvu T;tPjT7qqeu T;|gjT t)qeuTis> iPjT u Ti;|PjT ttvu s;t;v|gjT t;Fu T;|gjT tuTfv|sPjT7q|u |>i>igjT ttvu !qgjT7qqeu SjT t)qeuTi;>vs[qT7q.v|[q];R4AC i8\A7!"&":35=-)Bfi\A75hc;&5C#-$oO4AC&];R4ACL*)9fi#-!"&":?;&"N&(!;&fi\!] _ N!&"#9;&57"&":?;&"BGJ"AC.&5C#-J!57-)BPr)T 0#)&"+,:"Z%^#:39r-vGLh![*0"&":3;&"BG$57-QA79fi#"&\A7A,*)#95=-!D)-!*0ACxrG[\+,:%#:?9R,"&rxd(!-L&(!hcAC&":**!;&_"&\;:V!*TO()'&;R4ACbA7"#fi57-!*!5=;&"&(!;&r&()'#+!&579>Ac-8!9MR,:#%A=!"&":3#-0U:3;BU;;:35C%:#9#-)b*)#957->&"#E-!#&():D[&(F4:5=-)%#:?57-)BN&()'-)*L%#:\)&"#9;&5="A7.&5C#->#%&(!57+4;:39&":T1a-L&(!''z.8+,:3579-v&D[R,!"'#-!ACG>5CB(v&r+!:3#8.#:3r;:VU;57A7;R4AC'x'.[+,:"Z579fi-F&"*<xd5C&(kqL#:fiSA7!"&":?2%^#:_3(+!:#RAC957-4"&-!.TXO()0.#92R45=-)*J:3!AC&E;:0;B57.#A7AC.&"*Q%^:#9&(!&""&r"%^#:&()dh4%^&"->+4!AC-!*L:#R,#&;:?99fi#&5C#-L+4A7-4-!57-)BN*)#9>57-!TO(!NA75hc;&5C#-$:4AC&r%#:3()#57.2#%W-8!9MR,:\#%WA=!"&":3O;:3N()#ex-57-];R4AC i8TV-$&()hAC&":3*$*!;&"&D)T _#)&"+,:%^#:39\A7Ach48*&":3;&"B5Cd;&5CB-!5Ch-!.VACUA#%W+ dt[T t8Tq #nYi'l#^nFf#e1a-0&(!57.8+,:35=9fi-v&xN*)9fi#-!"&":?;&"M\!]_ r;R457A=5C&`G&"#fi+57IQfi9fi&()#[*L#%]#:3*):?57-)BE&()b&":%^#:fi.8+4-45C#-T];R4ACgP()#fxd_&()0:!A7&M#%&(!57E.[+c:?579fi-F&TJ)#:&()Qh4%^&"-+4)A7D&()&`x#$&""&"*Sh![*S#:3*):35=-)B;:3$jm+D%&Do5CB(v&D'#ex-u'-!*jm'#exd-D%&Do5CB(F&Dd+cu?TN!#:&()0:#R,#&;:399fi#&57#-+4A7-!-!5=-)Bg*)#95=-D&`x#Hh![*<#:3*):35=-)B_;:$&""&"*@.#::3"+,#-!*!57-)BP&"##:3*):?57-)B\"#57-F&9#eUr%^:#9&(!'R"#%&()';:?9&"#_&()'-!*L.Yc.&"#:eD4-!*L#:3*):357-!B\"#57-v&r9fi#fU%^:#9&()M-!*.Y,.&"#:'h4:3"&*)#exd-g&"#L&(!NR4"M#%&()M;:39A7"&Tdb-!A7GL#-)M#:3*):35=-)B>57O4"*%^#:&()2;:3&5h57A,*)#95=-1a-<&(!57E.8+,:35=9fi-v&Dr)T PG85CA=*!2&(!QR,"&fi"+,*!!+:3!AC&E%#:fiA7Ar*!;&;R"DhcAC&":*<#:!-[hcAC&":*T$1a-J&(!Q;:&5Ch57A*!#957-D]R,!"Q+c:3%.&M#:3*):357-!Bg57-)%^#:39;&5C#-57EU;57A7;R4ACL&()'1aO/&":3;&"BGA7#PG[5CA7*!N&()LR,"&E+,#5CRAC"+,*!)+:!AC&TgO()Q.#92R45=-)*J:3!AC&E;:B-):3;&"*P!57-!BE&(!Vh4%^&"-$+4)ACN-4*$:#R,#&O;:399fi#&57#-$+4A7-!-457-)BE+!:#R4AC95=-!"&-!.T];R4ACN|fi(!#exdr&()V:3!AC&r#%]A75C%^G[57-)BE#:3*):357-!BE+4:#R4AC9#-0&()bhcAC&":*$-!*$!-)hAC&":**!;&X"&THw(!57A70)T SACxrG[_G857A7*!N&(!LR,"&_U:3;BP"+,*!)+DW&()0AC;:3-!5=-)BP"G["&"9*)#8\wfi x4)}>Lmxm}E3}x)}L}}v}!4<Y}mxv8/+!+!:3#3(q ;!AC W57AZ3q; odzS W57AZ3q;b:3*):357-!BQqv s8T |vs8T | i)T;s |8T vb:3*):357-!B_8Ti8T !q i8T !q |;t[T''1d/; t[Ti>i8T7q ;8T ;t ;s8T ;t#8A; t[T;i|8T ;8T |8Tr)TL q Lq: Lq 4 qr#92R45=-)*[Z)T8T |;RACMF':3*!:357-)B>8+,*!)+$od!AC&/+!+!:#?(W5[*'1aO/#[A)Tq;)A7 ]5=AZ3q;ozPTis;gjT Fu Ti>ijT ttvu q;T tttSjT t)qeuTi[qsSjT tvu T8qijT ttvu ;t)qiPjT [qeuTi|gjT Fu [qijT ttvu Tis|XjT tuTtT7q.vs;RAC2|8':3*!:357-)BrA735h;&5C#-$od!AC&/:&5hc57As8Tqi;t[TqW57AZ`ozPq;T tttSjT ttvu;tttSjT tuTtttSjT ttvutttt)- #&G85CA=*fi&()dR,"&A75hc;&5C#->):?.G#-L4-[hAC&":*>*!;&[DF&(!#)B(L57&*)#83(45CU&(!dR,"&:4AC&#-L&()OhcAC&":*>*4;&2"&TV-&()dhAC&":*L*!;&M&D)r)T N#)&"+,:%^#:39h![*>"&":3;&"B57;&d35CB-!5h-4.'U;A7)V#%W+ t[T t_#:OR,&"&":Tqtmk!akmkmli'lg8ee#*R4A7-457-)Bg57B-!5h-F&ACGHYc.&_&(!>+,:%^#:39-!.L#%OP9f"#:35C&GH#%\+4;:3A7A7AACB#:357&(!9Tw()-Xx#:3IS57b*!57U857*!*gU-!A7GP9fi#-)B$+4:#8.3"#:3D-)#$AC#*XRA7-!57-)B057V-).3;:GT_d):?57"&57";:3?(@%^:68)-v&A7G<.:;&"0(!57B(!ACGJ5C:3:B!A7;:";:?3("+4.Drxd(!5=3(:4AC&57-AC#*k579MR4A7-!.R,&`x-$+!:#[."#:?T\4X+,:3957&AC#*0RA7-!57-)B_#+,:3;&5C#-4*4):357-)B_5C&":3;&57#-!r#%1aO/2}T/+!:#[."#:Nx5C&(H-)#[*)VU;57A7;R4A7fi#-5C&V#+,-A75="&V9GH*)#-!;&"L"#9fi#:2A=AW#%&(!>-)#[*)b&"#fi:68)"&5=-)B_+!:#[."#:T'5735C#-!\&(!;&Yc.&'"G8&"9+,:%#:?9-!.N57-!A=!*)b*)57*!57-!BEx()-0&"#R4A7-4.Q&(!AC#*D5=*)-v&57%G[57-)BSP+4:#8.3"#:%^:#9xd(!57?(<&"#H:6F!"&_x#:IcD-4**)57*!57-!BS()#fx9E!3($x#:I0&"#>*)#-4;&"T1a-_&()h4:3"&WAC#*_R4A=-!57-)B'.8+,:35=9fi-v&]x\&""&\4 _ W;R45=A75C&`G2&"#N"AC.&&()\;+!+!:3#+!:357;&"+!:#[."#:E+,#A7A757-!B"&":3;&"BGTHH$(!U$579+4AC9fi-F&"*&()0"G[-!3(!:#-)#!M:#!-!*:#R45=-J-!*&():3-!*!#9 +,#A7A=57-)Bg;+!+4:#3()Tb-<&()$-r'r~8DS+!:#[."#Q: _ $-)5CB(FR,#:3M;:3Q+,#A7A7*J%^#:x#:Ijm!57-)BH&(!g-r'rY~ _ (FGF+,:3!Rc0&"#+,#AC#BGD .#::"+,#-!*4_&"s# 79<; ,Mu_xd():5=-&()bz -FU857:#-!9fi-F&Dg+!:3#8.#: _ E:35CB(F&M-!*<AC%^&M-)5CB(FR,#:32;:3L+,#A7AC*j .pgR,!"Q&()x#:I8&;&5C#-!\;:N.#-!-!.&"*$xd5C&(0E:357-)BE&"#+,#AC#BG!u?TO()b:4AC&#%]&(!57.[+,:3579fi-F&;:3bA=57"&"*57-$];R4AC2s8T];R4ACs0()#fxdb&(!;&V#-!.;B5=-)T QG[5CA7*!&()fiR,"&V"+,*!)+X57-H9fi#"&V"M-!*XACxrG[G[5CA7*!d&()MR,"&'"+,*!)+P#-ghcAC&":*S*!;&L&TV/9fi#-!BL&()Mh![*g:3!AC&Dc-)#057-)BACE;+!+!:#?(#)&"+,:%^#:39r&()2#&():3\#-A=A*!;&"&Tn\fiP#$}wwyXm$/+!+!:3#3(q;)AC W57AZ3q; ozP W57AZ`ozP5CB(FR,#:8Ti8T [q |8T |[qFTio-!*)#9t[T; |8T7qe>i8Tq7r)T;t[Tq $q7 Lqr#92R45=-)*[Z)T>i8T8q];R4AC2s8#*rA7-!57-!BL8+,*!)+$oO4AC&/+!+!:#?( q;)A7 ]5=AZ3q;ozPW57AZ`ozP5CB(vR,#: ;tigjT t|u igjT ttvu sgjT [qeu ;tttSjT t;Fuod-4*)#9isSjT tu v|gjT ttvu TtiPjT tu |;tttSjT ttvu)T|;tiT7q.vst;v|tttt;R4A7qt[#*PA=-!57-)BLrA=5h;&57#-Qod!AC&] ;R4ACbqtV!99>;:35C&()\A75hc;&5C#-2:3!AC&#%4&()h![*_"&":3;&"B5C5=-M.#9fi+;:357"#-E&"#b&())T fiA=5h;&57#-!T)#:'3(P#%&(!VhAC&":*g*!;&"&D,)T _#)&"+,:%^#:39O-FGQh![*"&":3;&"BGxd5C&($>5CB-!5hc-!.b#%]+dt[T t;#:OR,&"&":TO(!X.#-!*wAC#*wR4A7-!5=-)BJ.[+,:3579fi-F&Q*!9fi#-!"&":3;&"S\!] _ 0;R457A=5C&`G&"#@*)&":?957-)&()#+4&579AO9fi#4-v&#%bx#:I&"#*)#-4;&"g)+,#-:68)"&Tk1%b&"#8#JA75C&"&AC$x#:I57*!#-!;&"*Dr&():68)"&57-!BH+!:#[."#:>x57A7Ar"#8#-@:&):?-%#:Q9fi#:x#:IcTk1%b&"#F#9M!?(@x#:I@57*!#-!;&"*Dr&()B:3-F&57-)BS+!:#[."#:_xd57A=A"#8#-<Rc057-<*!-)B:_#%dR,.#95=-)BP57*4ACTS];R4ACXqq0A757"&M&()0:4AC&2#%&(!57.8+,:3579-v&D8*)9fi#-!"&":?;&57-)BN#-!.';B57-&(4;&&()'AC;:3-!57-!BbG8"&"957;+;R4ACd#%,.Y,.&5CUACG"AC.&5=-)BPAC#*R4A7-457-)Bg"&":?;&"B5CD.).+!&Mx()-&()0!-[hcAC&":*H&""&_"E%^:#9&(!h4%^&"+4)A7g;:P4"* j^#-k&()P-crr~-!*@#-k&()S*!57"&":357R4)&"*-)&x#:I#%Vx#:I["&;&5C#-!u?TO().#9MR457-)*g:!AC&';:MB-):3;&"*H!5=-)Bfi&":357-!5=-)B>"'%^:#9p&(!Nh4%^&"-S+4)AC2-4*g:#R,#&';:399fi#&5C#-+4A7-!-!5=-)BE-crr~.[9fi+ACT];R4ACHqXA757&2&()A=5h;&57#-<!:3.G:3!AC&Tr)T X*)#Ffi-!#&E+,:%^#:395CB-45h-F&ACGR,&"&":&(!-&()rh![*"&":3;&"B5C%^#:&()O!-[hcAC&":*fi*!;&[DFR4)&*)#8+,:%^#:395CB-!5Ch-v&A7G2R,&"&":j^+ dt[T t;Fu\&(!-$&()Nh!8*$&":3;&"B5C%#:O&(!bhAC&":**4;&[T/d+4+!:#3(q;)AC W57ACZ3q; odzS W57ACZ`odzS bzZ3q;;t MZ`-r'r~8Ti8T [q i8T7qt8T vsqJ;t MZ`-r'r~i[q;T i[q;T >ii;t[T7qFT vsLq)T fZ`-r'r~[q;T |d{qC 4{q qm8FT ;t#9MR457-)*[Zr)T8T;RACqq;b57"&":?5CR4)&5C#-0/'9fi#!-F&8+,*!)+$oO3!AC&2lefi x4)}>Lmxm}E3}x)}L}}v}!4<Y}mxv8/+!+!:#?( q;)A7 ]5=AZ3q;ozPW57AZ`ozP;t>isgjT >iu gjT ttvu T7qs|XjT ttvu ;tttSjT t;Fu;tv>i[qLjT7qeu i>ijT ttvu |;t)qiPjT t)qeu TtttSjT t)qeu)T;t>iT7q.vsT7qs|ti>i;RACq8b57"&":?5CR4)&5C#-Q/'9fi#!-F&'rA735h;&5C#-$od!AC&/+!+!:#?(8+,*!)+n gnYuYkf)Tod-4*)#9:3#8.#:t[T;#[A]b:3*):357-!Bi|8T:3-!"%^#:39;&5C#-S':3*):35=-)Bi>i8T7qlN!9>;:d-!*o;#i8T |sb57"&":357R4)&"*$:i8T |W5[*~U;A7!;&5C#-Jqi8T !qqMrA=!"&":i8T [q5CB(vR,#:di8T [q;t b57&":35CR4)&57#i8T [q>rA=!"&":3i)T;t b57&":35CR4)&57#i[q;TW5[*~U;A7!;&5C#-Pvs8T |QrA=!"&":3vs8T%{{qdt@i{n8, k) nYin8 i8T v];R4ACq8rr#92R45=-!;&5C#-0#%)T od.#99fi-!*!;&57#-!F pep nxlk)itl+&"#&(457Q+c#5=-v&DdA=A.[+,:3579fi-F&Q(!U(!#exd-&()X:4AC&Q#%_\!"A7.&57-)B<357-)BAC"&":3;&"BGD\A7A#&():L"&":3;&"BG:!A7&_Rc5=-)Bgh48*T1-&(457_.8+,:35=9fi-v&ExA7AC#ex\!]&"#"AC.&'A7A"&":3;&"BGP3()#57.;&d#-!.M%#:B5CU-g+!:#R4AC9-4*$.8!&"M&()2+4;:3A7ACA;:33(gxd5C&(&()b:.#99-!*)*$"&":3;&"B57THN&()-$.#9+4;:b&()V:4AC&&"#fi3(0h![*0"&":3;&"BGj^&()bh![*"&":3;&"BG?()#57.57$eU:3;B*#fU:PA7Ab+!:3#R4AC957-!"&-4.$-!*wA7Ab+,#5CR4A7P3(!#57.$#%E#&():"&":3;&"BGQ*)5757#-!?u?TW/:3-!*)#9"&#%;tE+!:#R4AC9>%^:#9&(!Oh4%^&"-Q+4)AC'*)#957-L57"A7.&"*-!*:?!-#- iJ+!:#[."#:3>#%'&(!g-r'r~8Tw;R4A7q!9>9;:35Cfi&(!g"+,*!)+%^#:>?(;+!+!:3#3(O(!":4AC&N57-!*457;&"fi&(!;&_O!]@-.Y,.&5CUACG9>;ILA7A&":3;&"BG3()#5=.M;&M#-!.TO()A7;:3-)*V:34AC3(!57UR,&"&":+,:%^#:39-!.&(4-V&(!;&#R4&57-)*VR8G'-FGV#-)#%8&()""&":3;&"BG3(!#57.TO()O:3!ACA7"#N#)&"+,:%^#:39-FG57-!BACh!8*L"&":3;&"BG>?()#57.'U:3;B*Q#eU:\A7A!#&():+4;:39&":d#+!&5C#-4TqsJt{qp i'li'lg $^n2lfiP#$}wwyXm$zP&()#8*~::#:1abt[T7qtirbt[T7qq)Tt[T7qirG5=- t[T F8qzSfa#:357&`G t[T F8q.rI8+!:#+ t[Ti];R4ACq.)zP?(!57-)N;:3-!57-!Br#9fi+4;:357# :q !k ##i'l#nnYk$li'lg^1a-&()E)::-F&OU:357#-#%&()EO!]J"G["&"9$DxE!"Er)T &"#Q57-!*!!.NL*)5757#-$&":2R"*#-&(!2&":357-457-)Bfi*!;&[T)T >(!O+!:3#eU-P&"#>R,V.Yc.&57UE57-+!:*!57.&5=-)Bfi&()2"&":?;&"BGg3()#5=.d%^#:&()"L&""&M*!#957-!TL1-J*!*!5C&5C#-D&()>#!&"+4)&N#%r&()>G8"&"957NeU5=A7;R4AC>Mg"G[9MRc#A=57E:3!ACR4"Dxd(!57?(H9GXA7AC#fx&()"G["&"9 *)UAC#+,:V&"#g*)&":39>57-)fi&()fi%m.&"#:3N&(4;&2Yc.&E"&":3;&"BG"AC.&57#-$%#:fiB5CU-;+!+A757;&5C#-$*)#9>57-'&(!:_9>3(!57-!LAC;:3-457-)BP;+4+!:#3(!E-A7#PR,0!"*&"#S+,:%^#:39 "&":3;&"BGAC.&5C#-57&()\4"G["&"9$TX#S&""&_&()Q:!AC&M#%OU;;:35C#!M.)57"&57-)BP;+!+!:#?()DxQ3)+!+4A757*H&()*!;&Q%^:#9A7A]#%&()0q0)A7EA735h;&5C#-S.[+,:3579fi-F&*!.:35CR,*S57-g&(!E+4:U857#!.&5C#r57-)+4!&&"#EU:?5C#-!#%)T 8D[&()'1VM*)575C#->&":V57-!*!4.&5C#-ACB#:357&(!9j b457-!A7-Dqs>| iu?D!&()rb>6F)-F&57AW.#eU:?57-)B$ACB#:35C&(49jrA=;:IPn57R4AC&"&DWqs|su?DQR4I8+!:#+4;B;&57#-H-)):3A]-)&jmod49fiA7(!;:&nwzSerACA7A=-!*D)qs>| iu?D8brG357->A735h4:Oj"&-45CID!qss;tvu?D[-!*fiV9f"#:35C&GvZx57-!A735h4:T/'Oxd5C&(0&(!V#&():d.[+,:3579fi-F&D[:!A7&O;:VR4"*#-&"-[Z%^#A7*.:#3aZUA=57*!;&5C#-];R4AC_q.E3()#exd&(!;&&()b*)5757#->&":bACB#:357&(!9+c:3%#:39*R,"&#->&(!5=+4;:3&57!A7;:*!;&"&TN'AC&579;&"A7GDc&(!MR,"&b93(457-)_AC;:3-!57-!BLACB#:357&(!95=-g&(!5=.#-F&".8&N5=&(!EACB#:?5C&(!9&(!;&.#-!5="&"-v&A7G@G857A7*!L&()PR,"&0"+,*!)+T{1%NxS.#-457*):$-)#:39>A75C*k+!:#R4AC9"+,*!)+D\&()ACB#:357&(!9&(!;&_+!:#[*!!.E&()0R,"&EA=5h;&57#-#-eU:3;Bgxd5=A7AA7#S+4:#8*4!.>&()0B:;&"&"+,*!)+T'H>xd57A7A.#-v&57-8)_&"#$.[+4AC#:EU;:?5C#!b93(457-)fiAC;:3-!5=-)BL9fi&(!#8*!'&"#*)&":?957-)E&();+!+!:3#3(&(4;&Oxd57A7Ax#:I0Rc&\%#:O&(457r&`G8+,N#%];+4+4A757;&5C#-TW ) `+;sJtpsrk$i ?tlZVs{O(!5=W+4;+,::+,#:&#->x#:I_+,:%^#:39fi*_&"#E.#92R45=-)\&()OR,-).h4&#%c+;:3A7ACA)";:?3(>;+4+!:#3(!57-<&()g\!G8"&"9T<~8+,:3579-v&;&5C#-:UA7&(!;&"&":3;&"B5C>*)UAC#+,*#eU:L&()$A7"&%^xG;:?r#;Yc:O*!5="&57-!.&Rc-!.h4&&"#5=9fi+!:#fU857-!BN&()b+,:%#:?9-!.d#%]/d1;+!+4A757;&57#-!Td#fxU:eDxd(!5=ACQ-FG+4;:&574A7;:ACB#:35C&(49-@+!:#fU85=*)$5CB-!5hc-v&"+,*!!+<%^#:#-)g&`G8+cg#%+!:3#R4AC9$D#-S#&():b+!:#R4A79O&()EACB#:?5C&(!9'-X.&!A7ACG$+!:3#8*!4.2x#:3"E:!AC&d&(!-X!57-!B>L:357AU:357#-#%\&()Q";:33(<ACB#:357&(!9$T$/M:3!AC&D]&()"L&":3;&"B5CE-)*J&"#PR,>;:%m!A7ACGX3()#R4"*#-$&()2?(!;:3.&":357&57O#%Wfi+4;:&5=!A7;:\+!:#RAC9$T1a-&(!570+;+c:$x*)9fi#-4"&":3;&"&();R57A75C&G#%\!]&"#!&"#9;&57A7ACGw"AC.&$+;:3AZACA";:?3(J&":3;&"B5CE-!*"&2;+4+!:#+!:35=;&"E+;:39fi&":3T$\49fi+AC#eG[V&()Qr)T $93(457-)AC;:3-457-)BLG8"&"9&"#$9;I-X57-F&"A7A75CB-F&?()#57._#%&":3;&"B5Cb%^#:'?(H-)x+!:#R4A7957-4"&-!.T~[+,:3579fi-F&%:#9{&()r*)#95=-!#%&()h4%^&"-M+)AC+!:#R4AC9Df:#R,#&W;:399fi#&5C#-E+4A=-!-!57-)B)D2lffi x4)}>Lmxm}E3}x)}L}}v}!4<Y}mxv8;:&5hc57A";:3?(P"+.D-!*g+4A7-!-!5=-)BM+4:#R4AC9\5=-!*!57;&"V&(!;&V\4HG[5CA7*4rRc#&(P579fi+!:3#eU*"+,*!)+M:!A7&-!*E5CB-45h-F&ACGV579fi+!:#fU*MA=5h;&57#-M):?5CW#eU:-FG2"&":3;&"BGE!"*E5757"#A=;&5C#-gx()-g(!57B([ZU;:?57-!.2&":?57-!57-)BL"V;:_!"*T'O()"E.8+,:35=9fi-v&'A7"#Q*)9fi#-!&":3;&"\! _ ;R457A757&`GJ&"#"AC.&LA=Ar+4;:39fi&":3L;&#-!.S-!*&"##)&"+,:%^#:39 -FG<h![*@"&":3;&"BG#eU:VL"&d#%+!:3#R4AC957-4"&-!.Tr1a-g*!*!57&5C#-D)xM*)9fi#-4"&":3;&"2&(4;&VO!]-gR,-).h&ORFG)&57A=5C57-)BP&":357-!57-!BP"L*):3x-%^:#9XU;;:35C&G#%'&""&*)#95=-!D&(8!_x$x#!A=*.[+,.&fi&()+,:%^#:39-!.#%&()b"G8&"9&"#fi579+!:#eU'U-09fi#:bxV57-!.#:3+c#:?;&"*!;&E%^:#9-!x+4:#R4AC9*)#95=-!\-!*;:3?(!5C&".&):3T\x#Q#%&()E?(!A7AC-!B57-F&":#[*!!.*gRFG$#):':";:?3(X;:E&()E;R57A75C&GL&"#$*)&":39>57-)2*!5=.:3579_Z57-!;&5=-)BP%^;&):fi-4*&()$;R457A75C&GH&"#H+!:#fU857*!QAC;:A=5h;&57#-!E%#:fi&":35=-!57-)BP.[9fi+ACTJ1a#):O.[+,:3579fi-F&rxNU:35h4*0&(4;&O&()V%^;&):OxN3(!#"2.#!A7*RcV9fi3):*$;:3A7GQ*!!:357-)BE&()";:3?(+!:3#8.V-4*"&57A7AR,fi:+!:-v&;&5CU>#%&()fi+4:#R4AC9"+4.LA7;&":N#-*!!:357-)BL.8)&57#-/'Ox2;+!+4ACGQ#):d;+4+!:#3(g&"#LfiB:3;&":U;;:35C&G$#%]+4:#R4AC9rxNxd5=A7A,-)*&"#Q*)UAC#+P>9fi#:%^#:39A9fi&(!#8*)#A7#BGH%#:E"AC.&57-)B$:3+!:"-F&;&5CU0-!**!573.:357957-4;&57-)BQ%;&):3TL1a-*!*45C&5C#-x\#R4":U**!:39;&57r+,:%^#:39-!.\579+!:#eU9-v&x()-_&""&"x:O*!:3xd-_%^:#9+4:#R4AC957-!&-!.'xd5C&(XAC;:VA75Ch;&5C#-!TVHfix#!A7*SA75CIE&"#$+4):?)M9&()#8*4#%AC;:3-!5=-)B>%^:#957-[Z"&-!.W&(4;&].)(!5CR5C&AC#fxU;:35=;&5C#-_57-2+,:%^#:39-4.#%4A7&":3-!;&5CU\"&":3;&"B57-!*_(!5CB(MU;:?57;&5C#57-0+!:3#R4AC95CTO(!_!::-F&'579+4AC9fi-F&;&5C#-S#%rO!]%^#[!"b#-X-X1d/N}>;+!+4:#3(H&"#$";:?3(Tfib-):"#-L%^#:&(457?()#57.'#%";:33(09fi&(!#8*Q57&(!'A75=-);:9fi9fi#:3Gfi:6F45C:9fi-F&#%&(!'ACB#:?5C&(!9$T/p.#-!*@*)U;-v&;Bg#%d&(!57_";:?3(@9fi&(!#8*57_&(!;&fi-5C&":?;&5CU*)+,-!57-)BX";:3?(9fi&()#[*+!:#fU85=*)%^*)R43I57-@?(5C&":3;&5C#-k&(!;&0-R,S!"*k&"#<*!"&>+4;:39fi&":3Q%^#:L&(!S-).[&";:3?(5C&":3;&57#-T/'\fi:!A7&D!O!]H-$+,#&"-v&5=A7ACG>*!"&\&(!N"&":3;&"BG$3()#5=.\%:3#9#-)5C&":3;&57#-fi#%,&()d";:3?(>ACB#:?5C&(!9&"#2&(!O-).8&%^;&):#%c&()d+4.OU;;:GTd#fxU:eD857->"#9fi+!:#RAC9*)#95=-!O-)#-[Z`57&":3;&5CU2";:?3(SACB#:35C&(!9>d9eG$RcV+4:%:3:*Tr/ %m)&):323(!A=AC-)BN%^#:#):b:";:?3(X57&"#Q:3.h-)2&(!_*4;+!&5CUE+4;:3A7ACA";:3?(HACB#:35C&(!9%^#:'!E57-SLB:;&":NU;;:35C&`G#%5C&":3;&5CUN-4*-)#-[Z`5C&":?;&5CU2";:3?(gACB#:?5C&(!9T!]P579+4AC9fi-F&;&5C#-!;:3'):3:-v&A7GU;57A7;R4ACd#-Q2U;:?5C&`G#%;:33(!57&".&):3A+4A7;&"%^#:3957-!A=!*!57-)BSzg1azS*!57"&":357R4)&"*9fi9fi#:G-!*@3(!;:*@9fi9#:G9M!A7&5C+!:#[."#:3D*!57&":35CR4)&"*-)&x#:I<#%b93(!5=-)_:3!-!-457-)BP'zD]#59M4AC&5C&():*457-)BP9>3(!57-!D-!*9?(!57-)fi457-)ByeU&():*!\-!*g\57ACI&():3*!T:3#R4AC9*)#957-4\)::-F&ACG>!-4*):O57-FU"&5CB;&5C#-$57-4A7!*)b*[Z*!5C&57#-!AF.#9MR457-4;&"#:357A8#+!&57957;&5C#-E+!:#R4AC9>]3!3(fiW&()O-)Z b)-!]+!:#RAC9 -4*fi57-v&"B:?;&5C##%9>3(!57-!bA7;:3-!57-)B)D8&()#:9+!:#eU[57-)B)D[-!*$-!;&!:3A,A7-)B!;BNACB#:?5C&(!9r57-F&"#_&(!57r";:3?(;:"Z3(45C&".&):TH'()#+,\&"#2*)9fi#-!&":3;&"d&(!;&+4;:3A7ACA)(!):357"&5=;:33(LACB#:35C&(!9>-G[5CA7*_R,#&(#+!&579>A MA7;R4ACV;+!+4:#3()d&"#+4A7-4-!57-)B)D[93(457-)NAC;:3-457-)B)D)-!;&):3AA7-)B!;BD!&(!#:9+!:#fU85=-)B)D!-!*9-FGQ#&():.#9fi+)&;&5C#-[Z`57-F&"-!57UN;:O#%W/d1TJP`4J(!5=Wx#:IExr)+4+c#:3&"*_RFG_;&57#-!A[5C-4.d)#!-!*4;&5C#-fiB:3-F&1aoO1Zs;t|;t|8D)1od1`Zs;t>i;t[D-!*bzP1`Zs!qs8Td()$)&()#:3_x#!A7*A75CI0&"#H&(!-!Ib-@r):3-!_-!*zS;&"&(!5719(!#%d;&&()HzP1~;:&(woO"#):?.$;R%^#:$+!:#eU[57*!5=-)BJ.g&"#<&(!5C:$-r'~J&"#.#9fi+AC&"H&().[+c:?579fi-F&r:+,#:&"*57-0&(!5=r+4;+,:T2lefiP#$}wwyXm$}Xa$ [/B:3xrAiDETCDyv-!;I857:39$DWMTCDnzP():#&":?[DoNT\jaqs||u?TJ/:3-4*)#95C*+4;:3A7A7AR!:3-43(-!*R,#!-4*>ACB#:357&(!9$T1a- \ 3W c; V:[ 2`. ";+ >"N ?S X; ;7. \ e??2:D!+!+T [;8T,O()N]-!-!"G[ACU;-!578&;&"2'-!5CU:?5C&`GT/'-!*):3"#-DccTCDnr()-D4zT,bT]jaqs|u?TdW;:3A7A7AR!:3-!?([Z`-!*[ZR,#!-4*$ACB#:35C&(!9>O#-&(!M(FGF+,:"Z!RcT1a- \ 3W c;$ M:[.ff | W!." H8 e??ff ;??Dc+!+T4;ts 8[qeFTr;::&"&D)/MTCD8nHA=*DFETjaqssu?TW;:&57A!#:?*):+4A=-!-!57-)B)UA=!;&57-)BN+,#35CR4ACr.KL5C-4.GEB5=-!T3(T4:+Td[~@Oo{sfZ`tfZ3q;Dc'-!5CU:335C&`GQ#%W(!57-)B&"#-Tr(!;&"&3(4;:maD,TCD8rACU:&D[lfiTCD[n cB):3[D8~OT{Tcjaqssu?T/-;:?3(!5C&".&!:d%^#:.&5CU'-)&`x#:IFZ5=-)B)T1-$]-F&xOGD,/2T!MTjm~*Tu?q.: ff; fi ffM fiK;W OcD!+!+T4> 8;s8Tr(4;+49nA7AT"&-45CIDTjaqss;tvu?TL~&579;&57-)B$+4:#R4;R457A=5C&5C'.:3!57AW&IS57-H9>3(!57-!AC;:3-!57-!B)TE1as- \3W c;$ M:[ ffq:4: r[ 2) >.ff | '. N ";24`.^ 8ff .D!+!+T,qef qe;s8Tr(!A=AC#DETCDb57-!5DzJTCDnplN!9;:DMTrjaqssu?TW;:3A7ACA";:33(<ACB#:357&(!9V%^#:2:#R,#&29#&5C#+A7-!-!57-!B)T1a-bA7AC:Ddy!T'jm~*Tu?D r ?? :;@S:[fid fi 2O ;& iW ")|@;32 ;[ X; 7. = fi_D4+!+T)t vFFTrA7;:3IDd]TCDOn57R4AC&"&Do2Tbjaqs|su?TO()rbJ5=-!*!!.&5C#-ACB#:357&(!9$@N ,W ; c!D> i["q 8|)T#8#IDOETry)TCDn;:3-)A7ADro2T'Tbjaqssu?TzP)5795757-)BH&()PRc-!.h4&#%b+4;:3A=ACAO";:3?(k457-)B9>3(!57-!OAC;:3-!57-!B)T81a*- r 3 > d:)# ff " .ff q $'. % 24`.^ 8ff .D+4+T4s 8> i)T//'/d1r:3T#8#ID)ET4y)Tjaqssu?T/(FG8R!:357*Q;+!+!:#?(0&"#fi579fi+!:#fU85=-)B2&()b+,:%^#:39-!.'#%+4;:?A7ACAc";:33(T]1aX; ;7. r ?.3 qff;& ' ;' 24`.^ FN ?(D4+!+Tq;t q.v8T~A7U85C:eT#8#ID!ET4y!TCD!A7AD[TCD4nO()#9D) Tjaqssu?T];:?A7ACA,";:3?(!57-!BE&":?-!"%^#:39;&5C#-[Z#:?*):357-)B57&":3;&5CU.Z`*)+,-!57-!B>/N})[ 2`. ";+ *;[2 U &24`.^ FN 4, `N fiM.D -Wji|u?D||;8T#8#IDETy)TCDnG#-!Dr_Tjaqssu?TzS5CUACG+4;:3A7A7A1aO/2}P";:3?(/*d8 ;X 0' ;2`.^ FN ?1);?3D 2Wjiu?DWq q|;t[T:357B)D4y)T4y)T]jaqs|su?#T 24m ;!e > m?T/*!*457"#-[ZHA7GT~U&"&DzJTCD!-!*!AC:eD)y!TCD!zP(4-v&5iD!/MTCD4n'D!ETjaqssu?To/N}9>5CUACG>+4;:3A7ACA,()!:357"&57;:33(*d8 ;- ;^7.- >$4=.m2 )` ]fi) :5D 2;Dq q.v8T)A7*49-!-D4o2TCDczPG[A75Cxd57&"D4]TCD,nzg#-!57-D'TjaqssFu?Tb8&!*!G857-!Bfi#eU:3()*4'5=-957UACG0+4;:"ZA=ACA9>57- 698Z&":_UA=!;&5C#-T'1@- \ 3W c;*fi:[7 J98v: 1J! ;: ;<fid2 ^d fi>Y; ;^C= ' ; m: fiE '"ff m`em[".?D8+!+Ts qt8T8/'"#[57;&5C#-%#:#9+4)&57-)BVzSZ?(!57-):3GT2lfi x4)}>Lmxm}E3}x)}L}}v}!4<Y}mxv8):3-!ID'zJTCDN[)I;U[5C:35 [DO]TCDbn)#A7GDby!TET2jaqssu?T1a-)%^:-!.SR,;:J*)57B-!57-)B<57-v&":?.&5CU5=-v&":%m.&():#)B(>R,%#:-!*L;%^&":r-!;+4(!#&T1- r ?? :q b:[ |;>fid2 ^d fi>!4_ c24`. e ?@ .`ff fiE?D+!+Tvq iA qe;8Tv/'"#[57;&5C#-M%#:#9fi+4!&57-)BOzS3(!57-!:GT!):?!573(45iDzTCD\;I[5iD\lfiTCDdn1?(vG#(45iD\2Tbjaqss;tvu?T/9M!A7&5Z`ACUAOAC#*R4A7-!5=-)B3(!9fig%^#:#:Z+4;:3A7ACAc.)(!!"&57Ub;:33($+4:#B:39r#-$&(!b9E!AC&5CZ+45iT1a^- r 3 >$ V:[B ,3W;>=CKD3ffEOfid;2 ^c fi >r cC.\ v i? &Y ;^7. r fifiD)+!+Tqtt qt i8T/'"#[57;&5C#-$%^#:'#9+4)&57-)BfizS3(!5=-):GTlNACDT,MTCDn[AC&"#:3DMT/MTjaqss;tvu?T_W;:3A=ACAW"&;&".Z`"+4.Q";:33(X%^#:NLh4:3"&V"#A=)&5C#-Pxd5C&(.#-457"&"-F&LA75=-);:L"+,*!!+4T/2`. ";& *;[2 X; ;7.Y r fifi:!D FHGj^Fu?D["q 8s8TlN;:G8+457D,ETCDnlN!9;:DcETWjaqssu?T2'-!"&":?!.&):*g&":fi";:33(S#-81azP+4;:3A7A7A.#9fi+4!&":3T1a- \ 3W c; &4< )."W fi) :GI2D4+!+T8v v i8T,1a~~~#9fi+)&":8#[5C&`GTlN!9>;:DETCDno;#)DET2Tjaqss;tvu?T)A7;R4ACfi+4;:?A7ACA]%#:?9M!A=;&5C#-!V#%r*)+!&([Zih:3"&N";:3?(T>1al2!9;:D8lN-!AiD)n '#+A7;IF:?57(!-Sjm~*!Tu?D ;^7. ' ; ^: fiMU N;# ff c 24`.^ 8ff>KJ 2 "!D)+4+T"q v!q;T,8+4:357-)BL: v:?A7;B)T57Rc:?9-D!MTjaqss|u?T\1-F&"B:3;&57-!BL!":'57-F&":%^.M;B-v&'xd5C&(g.#-vU-F&5C#-!A];+!+4A75=;&5C#-!T1a\ e?3W :;fi:[M |; >"N ?N24`.^ 8ff 4! 2`.: ffD+!+Tv i8T/3"#;Z5=;&5C#-$%^#:'#9fi+4!&57-)BfizP?(!57-):3GTzS(!-v&5D,/MTCDn'-45CA7D'Tjaqssu?TE81azP+4;:3A7A7A()):?57"&57N;:33((T b N ";; 24`.^ 8ff .DPRQ jiu?Dv 8|[q;TzS(!;+4;&":3[DvMToNTCDn'!&"&D8cT)jaqssu?T4dx@-F&575C+;&"#:G2AC#*ER4A7-457-)B&":3;&"B5CW%^#:]+;:3A7ACA/2}>ACB#:357&(!9TM1@- r 3 >fi:[! 4&S|3T,. i.| >N4.`M @: [ff fi i.)) ; iW ; fi)`.BcN ff c?.D4+!+TqsA 88T/9fi:?57-zS;&()9;&57AW8#857&`GTzS57-v&"#-D,T8jaqs>s iu?T!/')&"#9;&57A7A7GN.#-[h4B):35=-)BO.#-!"&":35=-v&W;&57"%m.&5C#-M+!:#B:39>'"&!*)GT>)m :4^?UD Fjaqeu?DA vv8T]#exdA7GD'TCD):B!#-D'TCDnlV#:%DWo2T]~dTjaqssu?T'+!&([Zih:3"&M(!):357"&5=";:3?(#-H81azP9>3(!57-!VT '.24`.^ FN ?D PHQ jiu?D]qss 8v8T]#exdA7GDc'TCD4nlV#:%D!oNT!~dTjaqss[qeu?Tr[57-!BAC.Z`;B-v&\+;:3A7ACAcxd57-4*)#ex";:3?(,T SD,W)! )ff v ")>hXi`. XY 27ff :c 24` Fff c?.5D FH]jiu?Dc i>ivFFTb!5=-!A7-D)y)T!o2Tjaqssu?|HZKc >fiM& N; fiff c_CW ;2 JTzP#:B-Pl2)%^9>-!-b!5=-!A7-D)y)Tjaqs>| iu?T1-4*!!.&5C#-0#%W*)5757#-0&":TVff :c ; :F;3D F]jaqeu?Dc|["q qt i8Todf"+4AiD!cT[]TCD)n{lN49;:D!cT,jaqssu?TW;:3A=ACA(!):357"&5=d";:3?(0ACB#:35C&(!9>%^#:\9fi;Bb+4357-)B9E!AC&57+!:#[."#:O"G["&"9T>fiXc[` c ? >72ff2 fi i.3D 2RWj^Fu?DA q|8Tod;#)D\ETMTCDOlN!9>;:DrMTCDdnod9fi(DOlfiTjaqs|u?T /+4;:?A7ACAO579+4AC9fi-F&;&5C#-#%N5C&":?;&5CU.Z*!+c-457-)B;Z`/2}Tg1a5- \ 3W c;hQ:)ffS >;q .ff ^[b N ";\ 24`.^ 8ff .D+4+Tqe;| q|8Tzg#:B-PlN)%m9-!-2l<\fiP#$}wwyXm$oO5=-)%A=*DF/MTCD!n)3(!-)3ID)MTjaqssFu?T/1d/N}bZ"G[-!3():3#-)#!+4;:3A7A7A!1aO/N}T]1a-6\e?3W:;:[])N 4: G>" .ffNb N ";3 24` Fff c?.D+!+T8;t8Tr-4*!571a-)%^#:39;&5C#-g:#[.57-!B[#85C&GTod49fiA7(!;:&DcET~OTCDnzPerA7A7A7-!*Dcy)TT]jaqs>| iu?T ;^7. =.m2 )`W $ ?.3 ^Z_ 8ff ":H: [Sfim ;m)em["| MWm a`!J-;d fi>( F2TzP1:D\92R!:?57*)BD)zP/MT[AC&"#:3D\MT/2Tbjaqss;tvu?T/*!57"&":?5CR4)&"*-!*k*!;+!&5CUS*)G8-4957$AC#*kR4A7-!5=-)B3(!9fig%^#:+;:3A7ACAd+!:#[.57-)B#%29fi*!5=!9_ZB:357-@&"I8T 1aB- \ e?3W :;@P:)bK .:c4=.m2 )`Wff fi;d fi) :@Q"N ?D4+!+T!["q 88T8&"-)I[57"&"D]TCDW57(!:D$/2TCDgn ,(4-)B)D$2Tjaqssu?T ';:3xd57-:3"#):3.9-!;B9-v&%^#:;+4+4A757;&5C#-)Z`xr;:N-)&`x#:I[T?(T!:+T)rzSdZOFZseZ3qs8Dr;:3-)B5CVzPA7AC#-0'-!5CU:357&`GT[)&"&-!:D,'TWjaqssu?TV[&;&57N+4;:3&5C&5C#-!57-!Bfixd5C&(g3A7I[-)T\1a- X; ;7. \ ?2 :qN; ' ;2`.^ FN ?MD4+!+Tqt iq;t[T~A7"U[5C:T;:3-)A=AiDoNTbTdjaqssu?eMaN ^`3m[S ff;6:fi Q:<: [| ).: N;2 fic?~Sd ;^7.O ;"ff FT(ET!&()5=D!-45CU:35C&G>#%.[;&d/d:?A757-)B&"#-2lQlfiJournal Artificial Intelligence Research 9 (1998) 37-97Submitted 2/98; published 9/98Divide-and-Conquer Subgoal-Ordering AlgorithmSpeeding Logic InferenceOleg LedeniovShaul Markovitcholleg@cs.technion.ac.ilshaulm@cs.technion.ac.ilComputer Science DepartmentTechnion { Israel Institute TechnologyHaifa 32000, IsraelAbstractcommon view programs combination logic control: logic partdefines program must do, control part { it. Logic Programming paradigm developed intention separating logic control.Recently, extensive research conducted automatic generation controllogic programs. works considered issue automatic generationcontrol improving eciency logic programs. paper present novel algorithm automatic finding lowest-cost subgoal orderings. algorithm works usingdivide-and-conquer strategy. given set subgoals partitioned smaller sets,based co-occurrence free variables. subsets ordered recursively merged,yielding provably optimal order. experimentally demonstrate utility algorithm testing several domains, discuss possibilities cooperationexisting methods.1. Introductioncommon view programs combination logic control (Kowalski, 1979).logic part defines program must do, control part { it. Traditionalprogramming languages require programmers supply components. LogicProgramming paradigm developed intention separating logiccontrol (Lloyd, 1987). goal paradigm programmer specifies logicwithout bothering control, supplied interpreter.Initially, practical logic programming languages, Prolog (Clocksin & Mellish, 1987; Sterling & Shapiro, 1994), include means automatic generationcontrol. result, Prolog programmer implicitly define control orderclauses subgoals within clauses. Recently, extensive research conductedautomatic generation control logic programs. major part research concerned control affects correctness termination logic programs (De Schreye& Decorte, 1994; Somogyi, Henderson, & Conway, 1996b; Cortesi, Le Charlier, & Rossi,1997). works consider issue automatic generation controlimproving eciency logic programs. Finding good ordering leads ecientexecution requires deep understanding logic inference mechanism. Hence, manycases, expert programmers able generate ecient programs. problem intensifies recent development field inductive logic programming (Muggletonc 1998 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.fiLedeniov & Markovitch& De Raedt, 1994). There, logic programs automatically induced learning.learning algorithms commonly built aim speeding induction processwithout considering eciency resulting programs.goal research described paper design algorithms automatically find ecient orderings subgoal sequences. Several researchers exploredproblem automatic reordering subgoals logic programs (Warren, 1981; Naish, 1985b;Smith & Genesereth, 1985; Natarajan, 1987; Markovitch & Scott, 1989). general subgoal ordering problem known NP-hard (Ullman, 1982; Ullman & Vardi, 1988).Smith Genesereth (1985) Markovitch Scott (1989) present search algorithmsfinding optimal orderings. algorithms general carry exponential costsnon-trivial sets subgoals. Natarajan (1987) describes ecient algorithm specialcase subgoals set share free variables.paper present novel algorithm subgoal ordering. call two subgoalsshare free variable dependent. Unlike Natarajan's approach, handlesubgoal sets completely independent, algorithm deal subgoalset, making maximal use existing dependencies acceleration orderingprocess. worst case algorithm { like Smith Genesereth { exponential.Still, practical cases, algorithm exploits subgoal dependencies finds optimalorderings polynomial time.start analysis ordering problem demonstrate importanceexamples. show compute cost given ordering basedcost number solutions individual subgoals. describe algorithmNatarajan algorithm Smith Genesereth show twocombined algorithm ecient general two.show drawbacks combined algorithm introduce new algorithm, avoidsdrawbacks. call Divide-and-Conquer algorithm (dac algorithm). provecorrectness algorithm, discuss complexity compare combinedalgorithm. dac algorithm assumes knowledge cost number solutionssubgoals. knowledge obtained machine learning techniquesemployed Markovitch Scott (1989). Finally, test utility algorithmrunning set experiments artificial real domains.dac algorithm subgoal ordering combined many existing methodslogic programming, program transformation, compilation, termination control,correctness verification, others. discuss possibilities combinationsconcluding section.Section 2 states ordering problem. Section 3 describes existing ordering algorithmscombination. Section 4 presents new algorithm. Section 5 discussesacquisition control knowledge. Section 6 contains experimental results. Section 7contains discussion practical issues, comparison works conclusions.2. Background: Automatic Ordering Subgoalsstart describing conventions assumptions accepted paper.demonstrate importance subgoal ordering discuss validity. Finally, presentclassification ordering methods discuss related work.38fiThe Divide-and-Conquer Subgoal-Ordering Algorithm2.1 Conventions Assumptionsconstant, function predicate symbols programs begin lower case letters,capital letters reserved variables. Braces used denote unordered sets(e.g., fa; b; cg), angle brackets used ordered sequences (e.g., ha; b; ci). Parallellines (k) denote concatenations ordered sequences subgoals. speakingabstract subgoals (and named predicates concrete programs), denote separatesubgoals capital letters (A; B : : :), ordered sequences subgoals capitalized vectors~ O~ : : :), sets subgoals calligraphic capitals (B; : : :). (S ) denotes set(B;permutations .assume programs work written pure Prolog, i.e., without cutoperators, meta-logical extra-logical predicates. Alternatively, assumepure Prolog sub-sequences subgoals subject ordering. example, given ruleformB1 ; B2; B3; !; B4; B5; B6:final part fB4 ; B5; B6g ordered (without affecting solution set).work focus upon task finding solutions set subgoals.2.2 Ordering Subgoals Logic Programslogic program set clauses:B1 ; B2 ; : : :; Bn :(n 0)A; B1 ; : : :; Bn literals (predicates arguments). use clauseproving goal matches A, must prove B -s hold simultaneously,consistent bindings free variables. solution set variable bindings.solution set goal bag solutions created program.computation rule defines subgoal proved next. Prolog, computation rule always selects leftmost subgoal goal. subgoal fails, backtrackingperformed { proof previous subgoal re-entered generate another solution.detailed definition logic inference process, see Lloyd (1987).Theorem 1 solution set set subgoals depend orderexecution.Proof: looking solutions, solution set dependcomputation rule chosen (Theorems 9.2 10.3 Lloyd, 1987). Since transpositionsubgoals ordered sequence regarded change computation rule (thesubgoals selected different order), transposition change solutionset.2theorem implies may reorder subgoals proof derivation. Yeteciency derivation strongly depends chosen order subgoals. followingexample illustrates two different orders lead large difference executioneciency.39fiLedeniov & Markovitchparent(abraham,isaac).parent(sarah,isaac).parent(abraham,ishmael).parent(isaac,esav).parent(isaac,jakov).... parent clauses ...male(abraham).male(isaac).male(ishmael).male(jakov).male(esav).... male clauses ...brother(X,Y)male(X), parent(W,X), parent(W,Y), X=/=Y.father(X,Y)male(X), parent(X,Y).uncle(X,Y)parent(Z,Y), brother(X,Z).... rules relations ...Figure 1: small fragment Biblical database describing family relationships.Example 1Consider Biblical family database one listed Figure 1 (a similar databaseappears book Sterling & Shapiro, 1994). body rule defininguncle-nephew (or uncle-niece) relation ordered two ways:1. uncle(X,Y) brother(X,Z), parent(Z,Y).2. uncle(X,Y) parent(Z,Y), brother(X,Z).prove goal uncle(ishmael,Y) using first version rule, interpreterfirst look Ishmael's siblings (and find Isaac) siblings' children (EsavJacov). left part Figure 2 shows associated proof tree total 10nodes. use second version rule, interpreter create parentchild pairs available database, test parent whether (or she)Ishmael's sibling. right part Figure 2 shows associated proof tree total4(N , 2) + 6 2 + 2 = 4N + 6 nodes, N number parent-child pairsdatabase. tree contains two success branches N , 2 failure branches; figureshow one example each. two versions rule yield identical solutionsets, first version leads much smaller tree faster execution.Note result true given mode (bound,free) head literal;mode (free,bound), uncle(X,jacov), outcome contrary: secondversion rule yields smaller tree.2.3 Categories Subgoal Ordering MethodsAssume current conjunctive goal (the current resolvent) fA1; A2g. Assumeuse rule \A1 A11; A12:" reduce A1 . According Theorem 1, producedresolvent, fA11 ; A12; A2g, executed order. call ordering methodsallow permutation resolvent interleaving ordering methods, since permit40fiThe Divide-and-Conquer Subgoal-Ordering Algorithmuncle(X,Y)brother(X,Z), parent(Z,Y). uncle(X,Y)uncle(ishmael,Y)uncle(ishmael,Y)parent(Z,Y), brother(ishmael,Z)brother(ishmael,Z), parent(Z,Y)Z=adam,Y=cainmale(ishmael), parent(W,ishmael), parent(W,Z),ishmael =/= Z, parent(Z,Y)brother(ishmael,adam)parent(W,ishmael), parent(W,Z),ishmael =/= Z, parent(Z,Y)W=abrahamparent(abraham,Z), ishmael=/=Z, parent(Z,Y)Z=ishmaelZ=isaacishmael =/= ishmael,parent(ishmael,Y)isaac =/= ishmael,parent(isaac,Y)parent(Z,Y), brother(X,Z).Z=isaac,Y=jacovparent-childpairsmale(ishmael), parent(W,ishmael),parent(W,adam), ishmael =/= adamparent(W,ishmael), parent(W,adam),ishmael =/= adamW=abrahamparent(abraham,adam), ishmael =/=adamparent(isaac,Y)Y=esavY=jacovbrother(ishmael,isaac)male(ishmael), parent(W,ishmael),parent(W,isaac), ishmael=/=isaacparent(W,ishmael), parent(W,isaac),ishmael =/= isaacW=abrahamparent(abraham,isaac), ishmael=/=isaacishmael =/= isaacFigure 2: Two proof trees obtained different orderings single rule Example 1.interleaving subgoals different rule bodies. ordering performedrule bodies using reduction, method non-interleaving.example, interleaving methods consider 6 permutations resolvent, noninterleaving methods consider two orderings: hA11 ; A12; A2i hA12; A11; A2i.Interleaving ordering methods deal significantly possible orderings noninterleaving methods. means find ecient orderings.hand, space possible orderings may become prohibitively large, requiringmany computational resources.Subgoal ordering take place various stages proof process. dividesubgoal ordering methods static, semi-dynamic dynamic.Static ordering: rule bodies ordered execution starts. ordering takes place execution.Semi-dynamic ordering: Whenever rule selected reduction, bodyordered. order subgoals change reduction takes place.Dynamic ordering: ordering decision made inference step.Static methods add overhead execution time. However, optimal orderingrule often depends particular binding variable, knownrun-time. instance, Example 1 saw first ordering rule betterproving goal uncle(ishmael,Y). yet, goal uncle(X,jacov),second ordering yields ecient execution. handle cases statically,must compute optimal ordering possible binding.41fiLedeniov & MarkovitchObviously, static ordering non-interleaving. dynamic methodexible, since use updated knowledge variable bindings, also carrieslargest runtime overhead, since invoked several times use rule body.semi-dynamic method compromise two: powerfulstatic method, dynamically propose different orderings different instancesrule; also carries less overhead dynamic method, invokeduse rule body.total time proving goal sum ordering time inference time.Interleaving dynamic methods best potential reducing inference time,may significantly augment ordering time. Static methods devote timeordering (it done off-line), limited potential reducing inference time.algorithms described paper used categories ordering methods,although experiments described Section 6 implemented semi-dynamic,non-interleaving ordering methods: reduction, rule body ordered addedleft end resolvent, leftmost literal resolvent selectednext reduction step.2.4 Related Workproblem computational ineciency logic inference subject extensiveresearch. obvious aspect ineciency possible non-terminationproof. Several researchers developed compile-time run-time techniques detectavoid infinite computations (De Schreye & Decorte, 1994). certain successachieved providing advanced control employment co-routining interpredicate synchronization purposes (Clark & McCabe, 1979; Porto, 1984; Naish, 1984).Also, infinite computations avoided pruning infinite branches containsolutions (Vasak & Potter, 1985; Smith, Genesereth, & Ginsberg, 1986; Bol, Apt, & Klop,1991). NAIL! system (Morris, 1988) subgoals automatically reordered avoidnontermination.Still, even proof finite, desirable make ecient. Severalresearchers studied problem clause ordering (Smith, 1989; Cohen, 1990; Etzioni,1991; Laird, 1992; Mooney & Zelle, 1993; Greiner & Orponen, 1996). lookingsolutions goal, eciency depend clause order (assumingcuts). Indeed, predicate clauses, argument bindingsclauses produce solutions times t1 ; t2 : : :tm , solutions predicatebindings obtained time t1 + t2 + : : : + tm , regardless orderclauses applied. Different clause orderings correspond different ordersbranches selected proof tree; traverse entire tree, numbertraversal steps depend order branch selection, though ordersolutions found depend it.Subgoal ordering, demonstrated Example 1, significantly affect eciency proving goal. two major approaches subgoal ordering. firstapproach uses various heuristics order subgoals, example:Choose subgoal whose predicate smallest number matching clauses (Minker,1978).42fiThe Divide-and-Conquer Subgoal-Ordering AlgorithmPrefer subgoal constants (Minker, 1978).Choose subgoal largest size, size defined numberoccurrences predicate symbols, function symbols, variables (Nie & Plaisted,1990).Choose subgoal largest mass, mass subgoal dependsfrequency arguments sub-arguments entire goal (Nie & Plaisted,1990).Choose subgoal least number solutions (Warren, 1981; Nie & Plaisted,1990).Apply \tests" \generators" (Naish, 1985a).Prefer calls fail quickly (Naish, 1985b).heuristic methods usually execute quickly, may yield suboptimal orderings.second approach, adopted paper, aims finding optimal orderings (Smith & Genesereth, 1985; Natarajan, 1987; Markovitch & Scott, 1989). Natarajanproposed ecient way order special sort subgoal set (where subgoals independent), Smith Genesereth proposed general, inecient algorithm.following section build unifying framework dealing subgoal orderingdescribe variations Natarajan's Smith Genesereth's algorithms. also showtwo combined increased eciency.3. Algorithms Subgoal Ordering Logic Programsgoal work presented order subgoals speeding logic programs.section starts analysis cost executing sequence subgoals. resultingformula basis subsequent ordering algorithms. discuss dependencesubgoals present existing ordering algorithms independent dependent setssubgoals. Finally, combine algorithms general ecient one.3.1 Cost Executing Sequence Subgoalssubsection analyze cost executing sequence subgoals. analysisbuilds mainly work Smith Genesereth (1985).Let = fA1; A2; : : :Ak g set subgoals b binding. denote Sols(S )solution set , define Sols(;) = f;g. denote Ai jb Ai whose variablesbound according b (Ai j; = Ai ). Finally, denote Cost(Ai jb ) amountresources needed proving Ai jb . Cost(Ai jb ) ect time complexity provingAi binding b. example, number unification steps natural measurecomplexity logic programs (Itai & Makowsky, 1987).obtain cost finding solutions ordered sequence subgoalsS~ = hA1; A2; A3; : : :Ani;43(1)fiLedeniov & Markovitchnote proof-tree A1 traversed once, tree A2 traversedsolution generated A1 , tree A3 { solution fA1; A2g, etc.Consequently, total cost proving Equation 1Cost(hA1; : : :An i) = Cost(A1) +=XCost(A2jb) + : : : +b2Sols(fA1 g)nXXCost(An jb ) =b2Sols(fA1 ;:::An,1 g)XCost(Aijb):i=1 b2Sols(fA1 ;:::Ai,1 g)(2)compute Equation 2 one must know cost solution set subgoalbinding. reduce amount information needed, derive equivalentformula, uses average cost average number solutions.Definition: Let B set subgoals, subgoal. Define cost(A)jB averagecost solutions B nsols(A)jB average number solutionssolutions B:8>P (A); Cost(Ajb) B = ;< CostBcost(A)jB = > b2Sols; B=6 ;; Sols(B) =6 ;jSols(B)j: undefined;B 6= ;; Sols(B) = ;( )8>j;B=;< jPSols(fAgj)Sols(fjg)jbBnsols(A)jB = > b2SolsjSols; B=6 ;; Sols(B) 6= ;: undefined; (B)jB 6= ;; Sols(B) = ;( )first definition, follows that:XCost(Aijb ) = jSols(fA1; : : :Ai,1 g)j cost(Ai)jfA ;:::Ai, g :1b2Sols(fA1 ;:::Ai,1 g)1(3)apply second definition recursively, obtainjSols(fA1; : : :Aig)j ===XjSols(fAijbg)jb2Sols(fA1 ;:::Ai,1 g)jSols(fA1; : : :Ai,1 g)j nsols(Ai)jfA1;:::Ai,1gYi: : : = nsols(Aj )jfA1:::Aj,1 g:j =1(4)Note defined Sols(;) = f;g; thus, equations hold also = 1. IncorporationEquations 3 4 Equation 2 yieldsCost(hA1; A2; : : :An i) =20i,1nX4@i=1j =113nsols(Aj )jfA :::Aj, gA cost(Ai )jfA :::Ai, g5 :144111(5)fiThe Divide-and-Conquer Subgoal-Ordering Algorithmsubgoal Ai , average cost multiplied total number solutionspreceding subgoals. define average cost number solutions everycontinuous sub-sequence Equation 1: 8k1 ; k2; 1 k1 k2 n,cost(hA1; : : :Ak i)j; , cost(hA1; : : :Ak ,1 i)j;(6)cost(hAk ; : : :Ak i)jfA ;:::Ak , g =20 nsols(hA1; : : :Ak ,1 i)1j;31221111=ki,1X4@2i=k1j =k11nsols(Aj )jfA ;:::Aj, g cost(Ai )jfA ;:::Ai, g 51111knsols(hA1; : : :Ak i)j;nsols(hAk ; : : :Ak i)jfA ;:::Ak , g ==nsols(Ai)jfA ;:::Ai, gnsols(hA1; : : :Ak ,1 i)j; i=k1221111211(7)1values cost(Ai ) nsols(Ai ) depend position Ai ordered sequence. example, assume want find Abraham's sons, using domainExample 1. unordered conjunctive goal fmale(Y),parent(abraham,Y)g. LetN males database (two them, Isaac Ishmael, Abraham's sons):nsols(male(Y))j; = Nnsols(parent(abraham,Y))j; = 2nsols(male(Y))jfparent(abraham,Y)g = 1 nsols(parent(abraham,Y))jfmale(Y)g = 2=NNote nsols(hmale(Y),parent(abraham,Y)i) = 2 = nsols(hparent(abraham,Y),male(Y)i),exactly Theorem 1 predicts.defined cost sequence subgoals, define objectiveordering algorithms:Definition: Let set subgoals. Define (S ) set permutations. O~ 2 (S ) minimal ordering (denoted Min(O~ ; )), cost accordingEquation 5 minimal possible permutations :Min(O~ ; ) () 8OS0 2 (S ) : Cost(O~ ) Cost(OS0 ):total execution time sum time spent ordering,inference time spent interpreter ordered sequence. paper focusupon developing algorithms minimizing inference time. Elsewhere (Ledeniov &Markovitch, 1998a, 1998b) present algorithms attempt reduce total executiontime.values cost number solutions obtained various ways: exactcomputation, estimation bounds, learning. Let us assume momentexists mechanism returns average cost number solutionssubgoal time . Section 5 show control knowledge obtainedinductive learning.3.2 Ordering Independent Sets Subgoalsgeneral subgoal ordering problem NP-hard (Ullman & Vardi, 1988). However,special case ordering performed eciently: subgoals45fiLedeniov & Markovitchgiven set independent, i.e. share free variables. section beginsdefinition subgoal dependence related concepts. show ordering algorithmindependent sets prove correctness.3.2.1 Dependence SubgoalsDefinition: Let B sets subgoals (B called binding set ). pairsubgoals directly dependent B, share free variable boundsubgoal B.pair subgoals indirectly dependent respect B exists thirdsubgoal directly dependent one B, dependent (directlyindirectly) one B. pair subgoals independent Bdependent B (either directly indirectly). subgoal independentB independent members B.Two subsets S1 S2 mutually independent binding set Bevery pair subgoals (A1; A2), A1 2 S1 A2 2 S2, independent B.entire set called independent binding set B subgoal pairsindependent B, called dependent otherwise. dependent set subgoalscalled indivisible subgoal pairs dependent B, divisible otherwise.divisibility partition B, DPart(S ; B), partition subsetsmutually independent indivisible B, except one subset containssubgoals independent B. easy show DPart(S ; B) unique.example, let S0 = fa; b(X ); c(Y ); d(X; ); e(Z ); f (Z; V ); h(W )g. respectS0 empty binding set, pair fb(X ); d(X; )g directly dependent, fb(X ); c(Y )gindirectly dependent fb(X ); e(Z )g independent. represent set subgoalsgraph, subgoals vertices directly dependent subgoals connectededges, dependence equivalent connectivity indivisible subsets equivalentconnected components size greater 1. divisibility partition partitiongraph connected components, \lonely" vertices collected together,special component. Figure 3 shows example graph set S0empty binding set. whole set divisible four mutually independent subsets.subsets fe(Z ); f (Z; V )g fb(X ); c(Y ); d(X; )g indivisible. Elementsdivisibility partition DPart(S0 ; ;) shown dotted lines.subgoal independent set, average cost number solutionsdepend position within ordered sequence:PCost(Ajb) jSols(B)j Cost(A)== Cost(A);cost(A)jB = b2Sols(B)jSols(B)jjSols(B)jPb2Sols(B) jSols(fAjbg)j= jSols(B)j jSols(fAg)j = jSols(fAg)j:jSols(B)jcase omit binding information write cost(Ai ) instead cost(Ai)jfA :::Ai, g ,nsols(Ai ) instead nsols(Ai )jfA :::Ai, g.practice, program rule bodies rarely feature independent sets literals. examplefollowing clause, states children like candy:nsols(A)jB =jSols(B)j111461fiThe Divide-and-Conquer Subgoal-Ordering Algorithmfa,b(X), c(Y), d(X,Y), e(Z), f(Z,V), h(W)h(W)b(X)e(Z)f(Z,V)g)c(Y)d(X,Y)Figure 3: example graph representing set subgoals. Directly dependent subgoalsconnected edges. Independent subgoals indivisible subsets equivalentconnected components (surrounded dashed lines). divisibility partition (underempty binding set) shown dotted lines.likes(X,Y)child(X), candy(Y).often, independent rule bodies appear writtenprogram text, variables bound (initially dependent) rule bodies,result clause head unification. example, rulefather(X,Y)male(X), parent(X,Y).used reduce father(abraham,W), X bound abraham, rule bodybecomes independent. Rule bodies often become independent substitutions performed course inference process.3.2.2 Algorithm Ordering Independent Sets SortingLet S~ ordered sub-sequence subgoals, B set subgoals. denote~cn(S~ )jB = nsols(S)~jB , 1 :cost(S )jBname \cn" ects participation cost nsols definition. subsequence S~ independent subgoals, binding information (jB ) omitted.Together, average cost, average number solutions, cn value subgoalcalled control values subgoal.independent sets, exists ecient ordering algorithm, listed Figure 4.complexity algorithm O(n( + log n)): O(n ) obtain control values nsubgoals, O(n log n) perform sorting (Knuth, 1973). enable division,must define cost cost(Ai ) always positive. define cost numberunifications performed, always cost(Ai ) 1, reasonable assumptionpredicates rule body subgoals defined program. (In case, least oneunification performed subgoal). Similar algorithms proposed SimonKadane (1975) Natarajan (1987).Example 2 Let set independent subgoals fp; q; rg, following control values:47fiLedeniov & MarkovitchAlgorithm 1Let = fA1; A2; : : :An g set subgoals.(Ai ),1Sort using cn(Ai ) = nsolscost(Ai ) key Ai , return result.Figure 4: algorithm ordering subgoals sorting.p qrcost 10 205nsols 1 50:1cn0 0:2 ,0:18compute costs possible orderings, using Equation 5:Cost(hp; q; ri) = 10 + 1 20 + 1 5 5 = 55Cost(hp; r; q i) = 10 + 1 5 + 1 0:1 20 = 17Cost(hq; p; ri) = 20 + 5 10 + 5 1 5 = 95Cost(hq; r; pi) = 20 + 5 5 + 5 0:1 10 = 50Cost(hr; p; q i) = 5 + 0:1 10 + 0:1 1 20 = 8Cost(hr; q; pi) = 5 + 0:1 20 + 0:1 5 10 = 12minimal ordering hr; p; q i, exactly ordering found muchquickly Algorithm 1 set fp; q; rg: r smallest cn value, ,0:18,goes p cn(p) = 0, finally q cn(q ) = 0:2.Note sorting algorithm ects well-known principle: best implementations generate-and-test programs obtained tests placed early possiblerule body generations late possible (Naish, 1985a). course,cheap tests come first, expensive ones come last. one lookscn measure, one quickly realizes tests put front (because nsols < 1,cn < 0), generator subgoals move towards end (nsols > 1, cn > 0).weakness \test-first" principle fact every subgoal easilytagged test generator. one subgoal nsols < 1 another one nsols > 1,order obvious even without looking costs (because cn valuesdifferent signs). subgoals nsols < 1, nsols > 1,decision simple. Sorting cn correctly handle possible cases.3.2.3 Correctness Proof Sorting Algorithm Independent Setssaw Algorithm 1 found minimal ordering Example 2. goingprove Algorithm 1 always finds minimal ordering independent sets. Firstshow important lemma also used discussion. lemma states48fiThe Divide-and-Conquer Subgoal-Ordering Algorithmsubstitution sub-sequence cheaper permutation makes entire sequencecheaper.Lemma 1Let S~ = A~ kB~ kC~ , S~ 0 = A~ kB~ 0 kC~ , B~ B~ 0 permutations one another, A~either empty nsols(A~ ) > 0.Cost(S~ ) < Cost(S~ 0 ) () cost(B~ )jA~ < cost(B~ 0 )jA~ ;Cost(S~ ) = Cost(S~ 0 ) () cost(B~ )jA~ = cost(B~ 0 )jA~ :Proof: A~ C~ empty,Cost(S~ ) , Cost(S~ 0 ) = Cost(A~ kB~ kC~ ) , Cost(A~ kB~ 0 kC~ ) =(5)= cost(A~ )j; + nsols(A~ )j; cost(B~ )jA~ + nsols(A~ kB~ )j; cost(C~ )jA~ kB~ ,~cost(A)j; + nsols(A~ )j; cost(B~ 0 )jA~ + nsols(A~ kB~ 0 )j; cost(C~ )jA~ kB~ 0 :Theorem 1, B~ B~ 0 produce solution sets. Hence, third termsparentheses equal,Cost(S~ ) , Cost(S~ 0) = nsols(A~ )j; cost(B~ )jA~ , cost(B~ 0 )jA~ :Since nsols(A~ ) > 0, sign Cost(S~ ) , Cost(S~ 0 ) coincides sign cost(B~ )jA~ ,cost(B~ 0 )jA~ .A~ C~ empty, proof similar.2Definition: Let S~ = A~ kB~ 1kC~ kB~ 2kD~ ordered sequence subgoals (A~, C~ D~ mayempty sequences). respect S~ , pair hB~ 1 ; B~ 2icn-ordered, cn(B~ 1)jA~ cn(B~ 2)jA~[B~ [C~1cn-inverted, cn(B~ 1)jA~ > cn(B~ 2)jA~[B~ [C~1show two adjacent mutually independent sequences subgoals minimalordering must cn-ordered.Lemma 2Let S~ = A~ kB~ 1 kB~ 2 kC~ , S~ 0 = A~ kB~ 2 kB~ 1 kC~ , B~ 1 , B~ 2 mutually independent A~ .Let A~ either empty nsols(A~ ) > 0.Cost(S~ ) < Cost(S~ 0) () cn(B~ 1)jA~ < cn(B~ 2)jA~ ;Cost(S~ ) = Cost(S~ 0) () cn(B~ 1)jA~ = cn(B~ 2)jA~ :49fiLedeniov & MarkovitchProof:Cost(S~ ) < Cost(S~ 0) Lemma() 1 cost(B~ 1kB~ 2)jA~ < cost(B~ 2kB~ 1)jA~() cost(B~ 1)jA~ + nsols(B~ 1)jA~ cost(B~ 2)jA~[B~ <cost(B~ 2 )jA~ + nsols(B~ 2 )jA~ cost(B~ 1 )jA~[B~indep.fB~ 1 ; B~ 2g()cost(B~ 1 )jA~ + nsols(B~ 1 )jA~ cost(B~ 2 )jA~ <cost(B~ 2 )jA~ + nsols(B~ 2 )jA~ cost(B~ 1 )jA~() nsols(B~ 1)jA~ cost(B~ 2)jA~ , cost(B~ 2)jA~ <nsols(B~ 2 )jA~ cost(B~ 1 )jA~ , cost(B~ 1 )jA~cost(B~ )jA~ >0 nsols(B~ 1 )jA~ , 1 nsols(B~ 2 )jA~ , 1()<cost(B~ 1 )jA~cost(B~ 2 )jA~() cn(B~ 1)jA~ < cn(B~ 2)jA~12Cost(S~ ) = Cost(S~ 0)()cn(B~ 1 )jA~ = cn(B~ 2)jA~ | similar.2independent set, subgoal pairs independent, particular adjacent pairs.So, minimal ordering independent set, adjacent subgoal pairs must cnordered; otherwise, cost sequence reduced transposition pair.conclusion expressed following theorem.Theorem 2Let independent set. Let S~ ordering . S~ minimal iff subgoalsS~ sorted non-decreasing order cn values.Proof:1. Let S~ minimal ordering . S~ contains cn-inverted adjacent pair subgoals,transposition pair reduces cost S~ (Lemma 2), contradictingminimality S~ .2. Let S~ ordering , whose subgoals sorted non-decreasing ordercn. Let S~ 0 minimal ordering . According item 1, S~ 0 also sortedcn. possible difference two sequences internal orderingsub-sequences equal cn values. ordering sub-sequenceS~ transformed ordering counterpart sub-sequence S~ 0finite number transpositions adjacent subgoals. Lemma 2, transpositionsadjacent independent subgoals equal cn values cannot change costsequence. Therefore, Cost(S~ ) = Cost(S~ 0), S~ minimal ordering (since S~ 0minimal).2Corollary 1 Algorithm 1 finds minimal ordering independent set subgoals.50fiThe Divide-and-Conquer Subgoal-Ordering Algorithm3.3 Ordering Dependent Sets SubgoalsAlgorithm 1 guarantee finding minimal ordering given set subgoalsdependent, following proposition shows.Proposition 1 given set subgoals dependent, then:1. result Algorithm 1 always defined.2. Even result defined, always minimal ordering set.Proof: claims proved counter-examples.1. show set subgoals cannot ordered sorting.program:Control values:a(X )j; a(X )jfb(X )g b(X )j; b(X )jfa(X )ga(c1).b(c1).cost2222a(c2).b(c2).nsols212111cn0022set fa(X), b(X)g two possible orderings, ha(X ); b(X )i hb(X ); a(X )i.orderings minimal cost, though neither one sorted cn: orderingcn = 12 first subgoal, cn = 0 second one. Sorting cnimpossible here: transpose subgoals, cn values changed,pair becomes cn-inverted again.2. show set subgoals ordered sorting, sorted orderingminimal.program:Control values:a(X )j; a(X )jfb(X )g b(X )j; b(X )jfa(X )ga(c1).cost2282a(c1).2211nsolsb(c1).11cn00b(c2)a(c1), a(c2).22Let unordered set subgoals fa(X), b(X)g. ordering hb(X ); a(X )i sortedcn, ha(X ); b(X )i not. ha(X ); b(X )i cheaper hb(X ); a(X )i:cost(ha(X ); b(X )i) = 2 + 2 2 = 6cost(hb(X ); a(X )i) = 8 + 1 2 = 102Since sorting cannot guarantee minimal ordering dependent subgoals, consider alternative ordering algorithms. simplest algorithm checks every possible permutation set returns one minimal cost. listing algorithmshown Figure 5.algorithm runs O( n!) time, time takes compute controlvalues one subgoal, n number subgoals.following observation help reduce ordering time expense additional space. Ordered sequences constructed incrementally, adding subgoals51fiLedeniov & MarkovitchAlgorithm 2permutation subgoals, find cost according Equation 5.Store currently cheapest permutation update cheaperone found.Finally, return cheapest permutation.Figure 5: algorithm subgoal ordering exhaustive check permutations.Algorithm 3Order(S )let P0 f;g; n jSjloop kn= 1 tofi nPk0 nP~ kB fifi P~fi 2 Pk,1; B h2 n P~io~ P~ 0 ) ) Cost(P~ ) Cost(P~ 0 )Pk P~ 2 Pk0 fifi 8P~ 0 2 Pk0 ; permutation(P;Return single member Pn .Figure 6: ordering algorithm checks permutations ordered prefixes.right ends ordered prefixes. Lemma 1, cheaper permutation prefix exists,prefix cannot belong minimal ordering. ordering algorithm buildprefixes increasing lengths, step adding right end prefix onesubgoals appear already, subset keeping cheapestpermutation (if several permutations equal cost, one chosen).listing algorithm shown Figure 6. step k, Pk0 stores set prefixesstep k , 1 extended every subgoal appearing already. Pk Pk0 ,Pk subset subgoals represented cheapest permutation. Obviously,jPk j = (nk) (one prefix kept every subset size k). prefix length k , 1,n , (k , 1) possible continuations length k. size Pk0 follows:!kn!njPk0 j = (k,n1)(n,(k,1)) = (n , (k ,n1))!(k , 1)! (n,(k,1)) = k (n , k)!(k , 1)! = k (k ):prefix, compute cost time. permutation test completedO(n) time, using, example, trie structure (Aho et al., 1987), subgoalsprefixes sorted lexicographically. step k takes O((n + ) k (nk )) time,52fiThe Divide-and-Conquer Subgoal-Ordering Algorithmwhole algorithm runsnXk=1O((n + ) k (nk )) = O(n (n + )nXnk=1(k )) = O(n (n + ) 2n ):= O(n), makes O(n2 2n ).Smith Genesereth (1985) Natarajan (1987) point minimal orderedsequence every adjacent pair subgoals must satisfy adjacency restriction.general form restriction notation says two adjacent subgoals AkAk+1 minimal ordering hA1; A2 : : :Ani must satisfycost(hAk ; Ak+1i)jfA :::Ak, g cost(hAk+1 ; Ak i)jfA :::Ak, g:1111(8)restriction follows immediately Lemma 1. However, help findlocally minimal ordering, i.e., ordering cannot improved transpositionsadjacent subgoals. possible adjacent subgoal pairs satisfy Equation 8,ordering still minimal. following example illustrates statement.Example 3 Let unordered set fp(X ); q(X ); r(X )g, predicates definedfollowing program:p(c1):q (c1):r(c1):p(c2) f: q (c2):r(c1):q (c3) f:f fails 50 unifications.ordering hp(X ); q (X ); r(X )i satisfies adjacency restriction (Equation 8):cost(q (X ); r(X ))jp(X ) = 5cost(p(X ); q (X ))j; = 55cost(q (X ); p(X ))j; = 107cost(r(X ); q (X ))jp(X ) = 8minimal:cost(hp(X ); q(X ); r(X )i) = 57cost(hr(X ); p(X ); q (X )i) = 12find globally minimal ordering, seems beneficial combine prefix algorithmadjacency restriction: prefix satisfy adjacency restriction,cheaper permutation prefix. adjacency test performed fasterpermutation test, since must consider two last subgoals prefix. Nevertheless, number prefixes remaining step Algorithm 3reduced: prefix rejected due violation adjacency restriction, wouldalso rejected permutation test. Furthermore, adjacency restriction testfail, still perform permutation test avoid local minima (asExample 3). adjacency test succeeds least half cases: examineprefix hA1 ; : : :Ak ; B1; B2 i, shall also examine hA1; : : :Ak ; B2 ; B1i, adjacency testcannot fail both. Consequently, addition adjacency test halve totalrunning time ordering algorithm, leaving O(n2 2n ) worst case.53fiLedeniov & MarkovitchSmith Genesereth propose performing best-first search space orderedprefixes, preferring prefixes lower cost. best-first search combinedpermutation test adjacency restriction. addition, subgoalsprefix independent binding, sorted, sorted resultconcatenated prefix. Lemma 1 Corollary 1, produces cheapestcompletion prefix. perform completion, need performadjacency permutation test: complete sequence minimal, never chosencheapest prefix; even added list prefixes, never extractedtherefrom. resulting algorithm shown Figure 7.Algorithm 4Order(S )let prefix-list ;, prefix ;, restloop empty(rest)Independent(restjprefix)let completion prefixkSort-by-cn(restjprefix)Insert-By-Cost(completion, prefix-list)elseloop subgoal 2 restlet extension prefixksubgoalAdjacency-Restriction-Test(extension)Permutation-Test(extension)Insert-By-Cost(extension, prefix-list)prefix Cheapest(prefix-list)Remove-from-list(prefix, prefix-list)rest SnprefixReturn prefixFigure 7: algorithm subgoal ordering, incorporating ideas earlier researchers.advantage using best-first search avoids expanding prefixes whose costhigher cost minimal ordering. policy used algorithm may,however, suboptimal even harmful. often happens best completioncheaper prefix much expensive best completion expensive prefix.number solutions large, better place subgoals high costs closerbeginning ordering reduce number times cost multiplied.example, let set fa(X ); b(X )g, cost(a(X )) = 10, cost(b(X )) = nsols(a(X ))= nsols(b(X )) = 2. minimal ordering starts expensive prefix:Cost(ha(X ); b(X )i) = 10 + 2 2 = 1454fiThe Divide-and-Conquer Subgoal-Ordering AlgorithmCost(hb(X ); a(X )i) = 2 + 2 10 = 22many prefixes whose cost higher cost minimal ordering,best-first search saves time. number prefixes small, using best-firstsearch increase total time, due need perform insertion prefixpriority queue, according cost.sample run Algorithm 4 shown later (in Section 4.7).4. Divide-and-Conquer Subgoal Ordering AlgorithmAlgorithm 1 presented Section 3.2 ecient, applicable entireset subgoals independent. Algorithm 3 handle dependent set subgoalsinecient. Algorithm 4, combination two, exploit independence subgoals better eciency. However, obtained benefit quite limited. section,present Divide-and-Conquer (dac) algorithm, able exploit subgoal independence elaborate way. algorithm divides set subgoals smallersubsets, orders subsets recursively combines results.4.1 Divisibility Trees Subgoal Setssubsection define structure represents ways breaking subgoalset independent parts. algorithm work traversing structure.Definition: Let B sets subgoals. divisibility tree B, DTree(S ; B),AND-OR tree defined follows:8 leaf(S ; B), independent B>>><DTree(S ; B) = > OR(S ; B; fDTree(S n fBi g; B [ fBi g) j Bi 2 Sg) , indivisible B>: AND(S ; B; fDTree(Si; B) j Si 2 DPart(S ; B)g) , divisible Bnode N tree DTree(S0; B0) associated set subgoals (N ) S0associated binding set B(N ) B0. root node, (N ) = S0, B(N ) = B0 .binding set root specified explicitly, assume empty. AND-nodesOR-nodes also define sets children.(N ) independent B(N ), N leaf.(N ) indivisible B(N ), N OR-node. subgoal Bi (N )defines child node whose set subgoals (N ) n fBi g binding setB(N ) [ fBi g. call Bi binder generated child. Note bindingset every node divisibility tree union binders indivisibleancestors root's binding set.(N ) divisible B(N ), N AND-node. subset Sidivisibility partition DPart(S (N ); B(N )) defines child node associated setsubgoals Si binding set B(N ). Divisibility partition defined Section 3.2.1.55fiLedeniov & Markovitch= {a, b, c(X), d(X), e(X)}n1 S(n1)B(n1) =S(n2) = {a, b}B(n2) =n2S(n3) = {c(X), d(X), e(X)}n3 B(n3) =S(n4) = {d(X), e(X)}S(n6) = {c(X), d(X)}n5n6 B(n6) = {e(X)}B(n4) = {c(X)} n4S(n5) = {c(X), e(X)}B(n5) = {d(X)}Figure 8: divisibility tree fa; b; c(X ); d(X ); e(X )g empty initial binding set. setassociated node n1 divisible, represented AND-node. childrencorrespond divisibility subsets { one independent, (n2) = fa; bg, one indivisible, (n3) = fc(X ); d(X ); e(X )g. n3 OR-node, whose children correspondthree subgoals (each subgoal serves binder one children). sets (n2),(n4), (n5) (n6) independent respective binding sets,nodes leaves. assumed subgoals c(X ), d(X ) e(X ) bind Xresult proof.easy show divisibility tree set subgoals unique orderchildren node. Figure 8 shows divisibility tree set fa; b; c(X ); d(X ); e(X )gempty initial binding set. associated sets binding sets written nextnodes.following lemma expresses important property divisibility trees: subgoalsnode independent rest subgoals binding set node.Lemma 3 Let S0 set subgoals. every node N DTree(S0; ;), everysubgoal 2 (N ), every subgoal 2 S0 n (S (N ) [B(N )), independentB(N ).Proof: induction depth N divisibility tree.Inductive base: N root node, S0 n (N ) empty, exists.Inductive hypothesis: lemma holds , parent node N .Inductive step: Let 2 (N ), 2 S0 n (S (N ) [ B(N )). 2 (M ),lemma holds, thus either independent B(M ), 2 (M ).independent B(M ), also independent B(N ),since B(M ) B(N ). Otherwise, dependent B(M ), 2 (M ).56fiThe Divide-and-Conquer Subgoal-Ordering AlgorithmAND-node, dependent B(M ),belong element DPart(S (M ); B(M )), 2 (N ) {contradiction.OR-node 2 (M ) n (N ), must binder N .B(N ) = B(M ) [ fY g 2 B(N ) { contradiction again.2lemma relates subgoal independence inside divisibility trees. shall sometimesneed argue independence inside ordered sequences subgoals. followingcorollary provides necessary connecting link.Corollary 2 Let S0 set subgoals, N node divisibility tree S0, S~ordering S0, S~ = S~1 kS~2, B(N ) S~1 (N ) S~2 . (N ) mutuallyindependent S~2 n (N ) S~1.Proof: Let 2 (N ), 2 S~2 n (N ). independent B(N ),preceding lemma. Since B(N ) S~1 , independent S~1. Every subgoal(N ) independent every subgoal S~2 nS (N ) S~1; therefore, (N ) S~2 nS (N )mutually independent S~1 .24.2 Valid Orderings Divisibility Treesaim ordering algorithm find minimal ordering given set subgoals.construct orderings following divide-and-conquer policy: larger sets splitsmaller ones, orderings smaller sets combined produce orderinglarger set. implement policy, perform post-order traversal divisibilitytree corresponding given set subgoals empty initial binding set.orderings child nodes combined produce ordering parent node, innerorder subgoals changed: smaller orderings consistent larger orderings.Definition: Let G sets subgoals. ordering O~ G G orderingO~ consistent (denoted Cons(O~ G; O~ )), order subgoals G O~ GO~ same.divide-and-conquer process described seems analogous Merge Sort (Knuth,1973). There, set numbers split two (or more) subsets, subset independently ordered sequence consistent global order, sequencesmerged. possible use similar method subgoal ordering? Assume setsubgoals partitioned two mutually independent subsets, B. buildalgorithm that, given A, produces ordering consistent minimal ordering[ B, independently B? Unfortunately, answer negative. ordering mayconsistent minimal ordering [ B1 time consistentminimal ordering [ B2 B1 6= B2.example, let = fa1(X ); a2(X )g, B1 = fbg, B2 = fdg control valuesspecified Figure 9. single minimal ordering [ B1 ha2(X ); b; a1(X )i,single minimal ordering A[B2 hd; a1(X ); a2(X )i. ordering consistentminimal global orderings.57fiLedeniov & Markovitchprogram:a1(c1).a1(c1).a2(c1).a2(c1).a2(c2)bbd.a1(X).d.a1(c2).control values:a1(X )j; a1(X )jfa2(X )g a2(X )j; a2(X )jfa1(X )g bcost22535 1nsols22223 1Cost(b; a1(X ); a2(X )) = 5 + 3 2 + 3 2 3 = 29Cost(b; a2(X ); a1(X )) = 5 + 3 5 + 3 2 2 = 32Cost(a1(X ); b; a2(X )) = 2 + 2 5 + 2 3 3 = 30Cost(a1(X ); a2(X ); b) = 2 + 2 3 + 2 2 5 = 28Cost(a2(X ); b; a1(X )) = 5 + 2 5 + 2 3 2 = 27Cost(a2(X ); a1(X ); b) = 5 + 2 2 + 2 2 5 = 29Cost(d; a1(X ); a2(X )) = 1 + 1 2 + 1 2 3 = 9Cost(d; a2(X ); a1(X )) = 1 + 1 5 + 1 2 2 = 10Cost(a1(X ); d; a2(X )) = 2 + 2 1 + 2 1 3 = 10Cost(a1(X ); a2(X ); d) = 2 + 2 3 + 2 2 1 = 12Cost(a2(X ); d; a1(X )) = 5 + 2 1 + 2 1 2 = 11Cost(a2(X ); a1(X ); d) = 5 + 2 2 + 2 2 1 = 13Figure 9: show small program control values defines. compute costspermutations sets fb; a1(X ); a2(X )g fd; a1(X ); a2(X )g. Different orderingsfa1(X ); a2(X )g consistent minimal orderings sets.Since, unlike case Merge Sort, cannot always identify single orderingsubset consistent minimal ordering whole set, algorithm dealsets candidate orderings. requirement set contain leastone local ordering consistent global minimal ordering, local ordering exists(\local" ordering ordering set node, \global" ordering orderingset root). set called valid. following definition defines validsets formally, together several concepts.Definition: Let S0 set subgoals N node divisibility tree S0.Recall (S ) denotes set permutations .1. O~ 2 (S0) binder-consistent O~ N 2 (S (N )) (denoted BCN (O~ N ; O~ )),consistent, subgoals B(N ) appear O~ subgoals O~ N :BCN (O~ N ; O~ ) () 9O~ B 2 (B(N )) : Cons(O~ B kO~ N ; O~ ):O~ 2 (S0) binder-consistent node N (denoted BCN (O~ )), binderconsistent ordering (N ):BCN (O~ ) () 9O~ N 2 (S (N )) : BCN (O~ N ; O~ ):2. O~ N 2 (S (N )) min-consistent O~ 2 (S0) (denoted MCN;S (O~ N ; O~ )),binder-consistent, O~ minimal:MCN;S (O~ N ; O~ ) () BCN (O~ N ; O~ ) ^ Min(O~ ; S0):O~ N 2 (S (N )) min-consistent (denoted MCN;S (O~ N )), min-consistentordering S0:MCN;S (O~ N ) () 9O~ 2 (S0) : MCN;S (O~ N ; O~ ):0000058fiThe Divide-and-Conquer Subgoal-Ordering Algorithm3. ordering O~ N 2 (S (N )) MC-contradicting, min-consistent:MCCN;S (O~ N ) () :MCN;S (O~ N ):004. Two orderings O~ 1; O~ 2 2 (S (N )) MC-equivalent, one min-consistentiff one is:MCEN;S (O~ 1; O~ 2) () [MCN;S (O~ 1) () MCN;S (O~ 2)]:0005. set orderings CN (S (N )) valid, CN contains min-consistent ordering(when least one min-consistent ordering (N ) exists):V alidN;S (CN ) () [9O~ N0 2 (S (N )) : MCN;S (O~ N0 )] ! [9O~ N 2 CN : MCN;S (O~ N )]:000important property valid sets valid set orderings rootDTree(S0; ;) must contain minimal ordering S0. Indeed, root (N ) = S0,consistency becomes identity. Also, B(N ) = ;, binder-consistency becomesconsistency, min-consistency becomes minimality. Since always exists minimalordering S0 , valid set orderings root must contain minimal ordering S0.4.3 Outline Divide-and-Conquer Algorithmpropose algorithm based producing valid sets orderings. nodedivisibility tree produces valid set associated set subgoals, passesparent node. valid set root node found, compare costsmembers, return cheapest one.set orderings produced algorithm node N called candidate setN . members called candidate orderings N , simply candidates. findcandidate set N , first consider set possible orderings (N )consistent candidates N 's children. set called consistency set N .Given candidate sets N 's children, consistency set N defined uniquely.candidate set N usually unique.Definition: Let N node divisibility tree S0. consistency set N , denotedConsSet(N ), candidate set N , denoted CandSet(N ), defined recursively:N leaf, consistency set contains permutations (N ):ConsSet(N ) = (S (N )):N AND-node, child nodes N1; N2; : : :Nk , define consistencyset N set possible orderings (N ) consistent candidatesN1; N2; : : :Nk :finConsSet(N ) = O~ N 2 (S (N )) fifi 8i (1 k); 9O~ 2 CandSet(Ni) : Cons(O~ ; O~ N ) :59fiLedeniov & MarkovitchN OR-node, child node corresponding every binder 2 (N )NA , consistency set N obtained adding binders first elementscandidates children:finConsSet(N ) = AkO~ fifi 2 (N ); O~ 2 CandSet(NA) :candidate set N set orderings produced removing MC-contradictingMC-equivalent orderings consistency set N , keeping leastone representative group MC-equivalent orderings:CandSet(N ) ConsSet(N );~ON 2 (ConsSet(N ) n CandSet(N )) ) MCCN;S (O~ N ) _h 09O~ N 2 CandSet(N ) : MCEN;S (O~ N ; O~ N0 ) :00(In words, ordering rejected, either MC-contradicting, MCequivalent ordering, rejected.)two kinds orderings removed ConsSet(N ) retaining validity: MC-contradicting MC-equivalent orderings. Removal MCcontradicting ordering cannot change number min-consistent orderings set;remove MC-equivalent ordering, even min-consistent, minconsistent ordering retained set. exists min-consistent ordering setnode, candidate set must contain min-consistent ordering, thereforecandidate set valid.Note algorithm treats OR-node, binder child alwaysplaced first subgoal produced ordering node. higher levels innerorder subgoals ordering change (consistency preserved). Therefore,algorithm produce binder-consistent orderings. explains choicenames \binder" \binding set": subgoals B(N ) bind common variables(N ), since stand left global ordering algorithmproduces. particular, (N ) independent B(N ), subgoals B(N )bind shared free variables (N ).implement DPart function, use Union-Find data structure (Cormen,Leiserson, & Rivest, 1991, Chapter 22), subgoals elements, indivisible setsgroups. beginning, every subgoal constitutes group itself. Wheneverdiscover two subgoals share free variable bound subgoals binding set,unite groups one. complete procedure, need way determinevariables bound given binding set. Section 7.1 contains discussionproblem proposes practical solutions. Finally, collect indivisiblesubgoals separate group. operations implemented O(nff(n; n)) amortized time, ff(n; n) inverse Ackermann function, considered O(1)values n appear realistic logic programs. Thus, whole processfinding divisibility partition n subgoals performed O(n) average time.formal listing ordering algorithm discussed shown Figure 10.algorithm specify explicitly candidate sets created consistency sets. complete algorithm, must provide three filtering procedures60fiThe Divide-and-Conquer Subgoal-Ordering AlgorithmAlgorithm 5Order(S0)RootCandSetCandidateSet(S0 ; ;)Return cheapest member RootCandSetCandidateSet(S ; B)case (S B)independent:let ConsSetN (S )let CandSetN ValidLeafFilter(ConsSetN )divisible:let fS1; S2; : : : Sk g DPart(S ; B)loop = 1 klet Ci CandidateSet(Si ; B)n~let ConsSetN2 (S (N )) j 8i = 1 : : :k; 9O~ 2 Ci : Cons(O~ i; O~ N )let CandSetN ValidANDFilter(ConsSetN ; fS1; : : : Sk g; fC1; : : : Ck g)indivisible:loop 2let C (A) CandidateSetn ~ ~ (S n foAg; B [ fAg)0let C (A)ASkOA j OA 2 C (A)0let ConsSetNA2S C (A)let CandSetN ValidORFilter(ConsSetN )Return CandSetNFigure 10: skeleton dac ordering algorithm. type node divisibility tree,consistency set created refined validity filters. produced candidateset root valid; hence, cheapest member minimal ordering givenset.{ ValidLeafFilter , ValidANDFilter ValidORFilter . Trivially, definenull filters return sets receive unchanged. case candidateset every node contain permutations subgoals, surely valid.will, however, greatly increase ordering time. intention reduce sizescandidate sets far possible, keeping valid.following two subsections discuss filtering procedures. Section 4.4 discusses detection MC-contradicting orderings, Section 4.5 discusses detection MCequivalent orderings. Finally, Section 4.6 present complete ordering algorithm,incorporating filters skeleton Algorithm 5.61fiLedeniov & Markovitch4.4 Detection MC-Contradicting Orderingssubsection show sucient conditions ordering MC-contradicting.orderings safely discarded, leaving set orderings valid, reducingsize. subsection divided three parts, one type node divisibilitytree.4.4.1 Detection MC-Contradicting Orderings Leavesfollowing lemma shows subgoals min-consistent ordering leaf node mustsorted cn.Lemma 4Let S0 set subgoals, N leaf divisibility tree S0. Let O~ N ordering(N ). subgoals O~ N sorted cn B(N ), O~ N MC-contradicting.Proof: Let O~ ordering S0, binder-consistent O~ N . show O~ cannotminimal ordering S0, thus O~ N min-consistent.O~ N sorted cn, i.e., contains adjacent cn-inverted pair subgoals hA1; A2i.(Recall pair cn-inverted first element larger cn value secondone { Section 3.2.3). Since O~ consistent O~ N , write O~ = X~ kA1 kY~ kA2kZ~ ,X~ , Y~ Z~ (possibly empty) sequences subgoals. Since O~ binder-consistentO~ N , B(N ) X~ .Y~ empty, A1 A2 adjacent O~ . Since B(N ) X~ , A1 A2independent X~ . Therefore, cost whole ordered sequence reducedtransposing A1 A2 , according Lemma 2 (they adjacent, independentcn-inverted).Y~ empty, subgoal Y~ belongs (N ), since otherwise would appearO~ N A1 A2 . Corollary 2, Y~ mutually independent A1 A2X~ .cn(Y~ )jX~ < cn(A1)jX~ then, Lemma 2, transposition Y~ A1 producesordering lower cost.Otherwise, cn(Y~ )jX~ cn(A1)jX~ . Since pair hA1; A2i cn-inverted, cn(A1)jX~ >cn(A2)jX~ . Hence, cn(Y~ )jX~ > cn(A2)jX~ , transposition Y~ A2 reducescost, Lemma 2.either case, way reduce cost O~ . Therefore, O~ cannot minimal,O~ N MC-contradicting.24.4.2 Detection MC-Contradicting Orderings AND-nodesEvery member consistency set AND-node consistent combinationcandidates child nodes. k child nodes, child Ni sizessubgoal candidate sets jS (Ni)j = ni jCandSet(Ni)j = ci , totalnumber possible consistent orderings c1 c2 : : :ck (nn+!nn +!::::::+nnk !k )! . Fortunately,orderings MC-contradicting discarded candidate set.121622fiThe Divide-and-Conquer Subgoal-Ordering Algorithmfollowing lemma states forbidden insert subgoals two cn-invertedsub-sequences. insertion takes place, ordering MC-contradictingsafely discarded.Lemma 5Let S0 set subgoals, N node divisibility tree S0 , O~ orderingS0, binder-consistent ordering O~ N (N ).O~ N contains adjacent cn-inverted pair sub-sequences hA~ 1 ; A~ 2i, A~ 1 A~ 2 appearO~ mixed subgoals, A~ 1 A~ 2 adjacent O~ , O~minimal.Proof: Let O~ ordering S0, binder-consistent O~ N :O~ = X~ kA~ 1kY~ kA~ 2kZ~ ;Y~ empty. subgoal Y~ belongs (N ), since otherwise would standO~ N A~ 1 A~ 2 . O~ binder-consistent O~ N ; therefore, B(N ) X~ .Corollary 2, Y~ must mutually independent A~ 1 A~ 2 X~ , Lemma 2transposition Y~ either A~ 1 A~ 2 reduces cost { exactly proofLemma 4.2pair adjacent subgoals hAi ; Ai+1i cn-inverted, previous lemmaattempt insert subgoals inside results non-minimal global ordering. Thereuponmay join Ai Ai+1 block Ai;i+1 , participate larger block.formal recursive definition block follows. convenience, consider separatesubgoals blocks length 1.Definition:1. sub-sequence A~ ordered sequence subgoals block either singlesubgoal, A~ = A~ 1 kA~ 2, hA~ 1; A~ 2i cn-inverted pair blocks.2. block maximal (max-block) sub-sequence larger block.3. Let N node divisibility tree, descendant N , O~ N 2 (S (N ))O~ 2 (S (M )) two consistent orderings nodes. block A~ O~violated O~ N two adjacent subgoals A~ adjacent O~ N (inwords, alien subgoals inserted subgoals block).4. Let N node, descendant, O~ N 2 (S (N )) O~ 2 (S (M )) twoconsistent orderings nodes. O~ called projection O~ N .shall usually speak projection ordering child node.concept max-block similar maximal indivisible block introduced SimonKadane (1975) context satisficing search. following corollary presentsresult Lemma 5 convenient way.Corollary 3 Let N node divisibility tree, one children, O~ Nordering N , O~ projection O~ N . O~ contains blockviolated O~ N , O~ N MC-contradicting.63fiLedeniov & MarkovitchProof: Let A~ smallest block O~ violated O~ N . According definitionblock, A~ = A~ 1 kA~ 2 , A~ 1 A~ 2 violated O~ N , pair hA~ 1; A~ 2icn-inverted. Let O~ ordering root node binder-consistent O~ N . O~violates A~ , since O~ N violates A~ . show O~ N MC-contradicting, must proveO~ minimal.A~1 A~ 2 violated O~ , adjacent O~ , O~minimal, Lemma 5.Otherwise, A~ 1 A~2 violated O~ . Without loss generality, let A~1. Let A~0smallest sub-block A~ 1 violated O~ . According definition block,A~ 0 = A~01 kA~ 02 , pair hA~ 01; A~ 02i cn-inverted, A~ 1 A~ 2 violatedadjacent O~ . Lemma 5, O~ minimal.2example, control values subgoals shown Figure 9, ha1(X ); a2(X )iblock, since cn(a1(X ))j; = 2,2 1 = 12 , cn(a2(X ))jfa1(X )g = 2,3 1 = 13 . one seefigure, insertion b inside block results non-minimal ordering.already noted above, consistency set AND-node large.many orderings, however, blocks projections violated, discardorderings MC-contradicting. remaining orderings, block projectionviolated, ordering represented sequence max-blocksprojections. projection, max-blocks stand cn-ascending order (otherwise,adjacent cn-inverted pair blocks, larger block formed, contradictsmaximality). following lemma states, parent AND-node blocksmust also ordered cn values; otherwise, ordering MC-contradicting.Lemma 6 ordering AND-node contains adjacent cn-inverted pair maxblocks projections children, ordering MC-contradicting.Proof: blocks violated binder-consistent global ordering, globalordering minimal Corollary 3. blocks violated, proof similarproof Lemma 4.2two sucient conditions detection MC-contradicting orderings expressedCorollary 3 Lemma 6 allow us reduce size candidate set significantly.Assume, example, set current node N split two mutually independent subsets whose candidates ha1; a2i hb1; b2i (one candidate child).six possible orderings (N ), shown Figure 11. Assume ha1; a2ihb1; b2i blocks, cn(ha1; a2i)jB(N ) < cn(hb1; b2i)jB(N ). six consistent orderings,four (2{5) rejected due block violation, one remaining two (number 6)puts blocks wrong order. So, one ordering (number 1) left candidate set N . Even neither ha1; a2i hb1; b2i blocks, Lemma 6 dictates uniqueinterleaving elements (max-blocks), assuming cn(a1 )jB(N ) 6= cn(a2 )jB(N )[fa g6= cn(b1)jB(N ) 6= cn(b2)jB(N )[fb g.114.4.3 Detection MC-Contradicting Orderings OR-nodesfollowing lemma states block cheaper permutation, orderingMC-contradicting (and discarded candidate set).64fiThe Divide-and-Conquer Subgoal-Ordering Algorithm1.a1 a2b1 b22.a1 a2b1 b23.a1 a24.b1 b2a1 a2b1 b25.a1 a2b1 b26.a1 a2b1 b2Figure 11: possible ways combine ha1, a2 hb1, b2iLemma 7 Let N node divisibility tree S~0, O~ N 2 (S~(N )). Let A~ leadingblock O~ N : O~ N = A~ kR~ . permutation A~ , A~ 0 , cost(A~ 0 )jB(N ) <cost(A~ )jB(N ), O~ N MC-contradicting.Proof: Let O~ 2 (S~0) binder-consistent O~ N . A~ violated O~ , O~ cannotminimal (Corollary 3). Otherwise, A~ occupies continuous segment O~ ,replacement cheaper permutation reduces cost global ordering (Lemma 1).Thus, O~ cannot minimal.2check done leading blocks OR-nodes:Every ordering leaf node rejected due Lemma 4 mustsorted cn. Consequently, contains cn-inverted adjacent pair subgoals,block size 2 formed.Every ordering AND-node rejected due Corollary 3Lemma 6 must blocks unbroken cn-ascending order. Consequently,new blocks cannot formed either.OR-nodes, new blocks formed add binder first elementordering, cn value binder greater subsequent block.new blocks start binder, must perform permutation testleading max-block ordering.4.5 Detection MC-Equivalent Orderingsprevious subsection presented sucient conditions detecting MC-contradictingorderings. subsection specify sucient conditions identifying MC-equivalentorderings. Recall two orderings node MC-equivalent minimal consistencyone implies minimal consistency other. Finding sucient conditionsallow us eliminate orderings without loss validity candidate set. startdefining specialization MC-equivalence relation: blockwise equivalence.show orderings whose max-blocks sorted cn blockwise-equivalent,therefore MC-equivalent.65fiLedeniov & MarkovitchDefinition: Let S0 set subgoals N node divisibility tree S0. LetO~ 1 O~ 2 two orderings (N ) equal number max-blocks. Let O~ordering S0 , binder-consistent O~ 1, blocks O~ 1 violated.O~ jOO~~ ordering obtained replacing O~ every max-block O~ 1 max2block O~ 2, preserving order max-blocks (the i-th max-block O~ 1 replacedi-th max-block O~ 2).O~ 1 O~ 2 blockwise-equivalent following condition holds: O~ 1 min-consistentO~ iff O~ 2 min-consistent O~ jOO~~ .easily seen, two orderings blockwise-equivalent, MCequivalent. show transposition adjacent, mutually independent cn-equalmax-blocks ordering node produces blockwise-equivalent ordering. prooffollowing lemma found Appendix A.121Lemma 8Let S0 set subgoals, N node divisibility tree S0, O~ N = Q~ kA~ 1 kA~ 2kR~ordering (N ), A~ 1 A~ 2 max-blocks, mutually independent cn-equalbindings B(N ) [ Q~ . O~ N blockwise-equivalent O~ N0 = Q~ kA~ 2 kA~ 1kR~ .Corollary 4 sorted cn orderings leaf node blockwise-equivalent.example, (N ) = fA; B; C; Dg, cn(A)jB(N ) = 0:1, cn(B )jB(N ) = cn(C )jB(N ) = 0:3,cn(D)jB(N ) = 0:5, orderings hA; B; C; Di hA; C; B; Di blockwise-equivalent,remove candidate set one (but both).Corollary 5 orderings AND-node, blocks projections violatedadjacent max-blocks different children projections cn-ordered, blockwiseequivalent.~ B;~ C~ ; D~example, candidates children A~ kB~ C~ kD~ , A;max-blocks, cn(A~ )jB(N ) = 0:1, cn(B~ )jB(N )[A~ = cn(C~ )jB(N ) = 0:3 cn(D~ )jB(N )[C~ = 0:5,orderings A~ kB~ kC~ kD~ A~ kC~ kB~ kD~ blockwise-equivalent, removecandidate set one (but both).prove Corollaries 4 5, note case one mentionedorderings obtained finite number transpositions adjacent,mutually independent cn-equal max-blocks. According Lemma 8, transposition yields blockwise-equivalent ordering. easy show blockwise equivalencetransitive.following corollary states subgoals within block permuted, providedcost block changed.Corollary 6 orderings node, identical cost-preserving permutations subgoals inside blocks, blockwise-equivalent.proof corollary follows immediately Lemma 1. example, setfa(X ); b(X )g, control values first counter-example Proposition 1,66fiThe Divide-and-Conquer Subgoal-Ordering AlgorithmNode SetMC-contradictingLeaf Independent Subgoals sorted cn| Lemma 4Contains violated blocksDivisible| Corollary 3Max-blocks sorted cn| Lemma 6leading max-blockIndivisible cheaper permutation| Lemma 7blockwise-equivalentSubgoals sorted cn| Corollary 4Max-blocks violated,sorted cn| Corollary 5Cost-preserving permutationsblocks| Corollary 6Table 1: Summary sucient conditions detection MC-contradicting blockwiseequivalent orderings.i.e. cn(a(X )j;) = cn(b(X )j;) = 12 , cn(a(X )jfb(X )g) = cn(b(X )jfa(X )g) = 0,possible orderings, ha(X ); b(X )i hb(X ); a(X )i, two subgoals united block,blocks equal cost. global ordering containing block ha(X ); b(X )i,replace block hb(X ); a(X )i without changing total cost. Thereforeha(X ); b(X )i blockwise-equivalent hb(X ); a(X )i.sucient condition expressed Corollary 6 checked OR-nodes,since leaves AND-nodes new blocks created, argued Section 4.4.3.4.6 Revised Ordering Algorithmtwo preceding subsections saw several sucient conditions MC-contradictionMC-equivalence, summarized Table 1. results permit us close gapsAlgorithm 5 providing necessary validity filters. filter tests sucientconditions MC-contradiction MC-equivalence every ordering consistencyset. sucient conditions hold, ordering rejected. formal listingprocedures shown Figure 12.generate-and-test approach described served us well methodologicalpurposes, obviously practical computational limitations. example,independent set size n, algorithm creates n! orderings, rejects n! , 1keeps one. process takes O(n! n) time produces orderingsorted cn. result could obtained O(n log n) time, singlesorting. So, instead uncontrolled creation orderings selective rejection, wantperform selective creation orderings. words, want revise algorithmdeal directly candidate sets, instead generating large consistency sets. revisedalgorithm produces candidate set node N follows:N leaf, subgoals (N ) sorted cn bindings B(N ),produced ordering sole candidate N .N AND-node, combination children's candidates candidate N created, max-blocks children's candidates ordered67fiLedeniov & MarkovitchValidLeafFilter(ConsSetN )let CandSetN ;loop O~ N 2 ConsSetNO~ N sorted cnO~ N0 2 CandSetN sorted cnCandSetN CandSetN [ fO~ N gReturn CandSetNValidANDFilter(ConsSetN ; fS1; : : : Sk g; fC1; : : : Ck g)let CandSetN ;loop O~ N 2 ConsSetNloop = 1 klet O~ projection O~ N Si8i O~ 2 Cimax-blocks O~ -s violated O~ N ,max-blocks O~ -s ordered cn O~ N ,O~ N0 2 CandSetN consistent O~ i-s,CandSetN CandSetN [ fO~ N gReturn CandSetNValidORFilter(ConsSetN )let CandSetN ;loop O~ N 2 ConsSetNO~ N start block cheaper permutation,O~ N0 2 CandSetN , identical O~ Ncost-preserving permutations blocks,CandSetN CandSetN [ fO~ N gReturn CandSetNFigure 12: three filter procedures convert consistency set candidate set. TogetherAlgorithm 5, form complete ordering algorithm. eciencyalgorithm improved, shall see Algorithm 6.cn. candidate produced merging: moving parallel candidateschildren extracting max-blocks minimal cn.N OR-node, candidate child ordering N createdadding binder left end child candidate. results creationblock cheaper permutation, ordering rejected; otherwise,added candidate set. suces check leading max-block.68fiThe Divide-and-Conquer Subgoal-Ordering AlgorithmNote revised algorithm include test cost-preserving permutationsblocks different orderings (expressed Corollary 6), high expensetest.revised algorithm described contains manipulations blocks. purpose, need easy ecient way detect blocks orderings. Sincepermit block violation (by Corollary 3), unite subgoals max-blockone entity, treat ordinary subgoal. procedure joining subgoalsblocks called folding, resulting sequence max-blocks { folded sequence.subgoals folded block, need unfold block back separatesubgoals: upper levels tree, subgoals joined block, unlessblock violated. unfolding operation carried returningcheapest ordering set (of root node). candidate sets nodesdefined sets folded orderings.already stated, new blocks created candidates OR-nodes,binder added first element ordering, cn value bindergreater cn value first max-block child projection. Therefore,revised algorithm build new blocks start binder: max-blocksrest ordering remain child's candidate. First try make blockbinder first max-block child's candidate. cn-ordered,stop folding. cn-inverted, unite larger block, tryunite second max-block child's candidate, on. producedfolded ordering contains maximal blocks: first block maximal, since couldexpand right, blocks maximal, since maximalchild's candidate.Lemma 7 states ordering whose leading max-block cheaper permutationMC-contradicting. One way detect block exhaustively test permutations, computing comparing costs. procedure expensive. Instead,revised algorithm employ adjacency restriction test (Equation 8). testapplied every pair adjacent subgoals block, adjacent pair cheapertransposition, whole block cheaper permutation, Lemma 1. Since blockscreated concatenation smaller blocks, suces test adjacency restrictionpoints blocks joined (for adjacent pairs subgoals, testsperformed lower levels, smaller blocks formed). adjacency restriction test guarantee detection not-cheapest permutations (as shownExample 3), detects blocks many cases, works linear time.final version dac subgoal ordering algorithm presented Figure 13.complete correctness proof Algorithm 6 found Appendix B.4.7 Sample Run Comparison Ordering Algorithmsillustrate work dac algorithm, using subgoal set shown Figure 8,S0 = fa; b; c(X ); d(X ); e(X )g. proving c(X ), d(X ) e(X ), assume Xbound. Let control values subgoals shown Table 2. column c(free)contains control values subgoal c(X ) X yet bound precedingsubgoals (i.e., binding set contain d(X ) e(X )). column c(bound)69fiLedeniov & MarkovitchAlgorithm 6 : Divide-and-Conquer AlgorithmOrder(S0)let RootCandSet CandidateSet(S0 ; ;)Return Unfold(the cheapest element RootCandSet)CandidateSet(S ; B)let fS1; S2; : : : Sk g DPart(S ; B)casek = 1, shared-vars(S1) = ; (S independent B):Return fSort-by-cn(S ; B)gk = 1, shared-vars(S1) =6 ; (S indivisible B):loop 2let C (A) CandidateSet(S fin fAg; B [ fAog)n0~let C (A)Fold(AkOA ; B) fifi O~ 2 C (A)Return A2S C 0(A)k > 1 (S divisible B):loop = 1 klet Cin CandidateSet(Si ; B)Return Merge(fO~ 1; O~ 2; : : : O~ k g; B)fififi O~ 1 2 C1; O~ 2 2 C2; : : : O~ k 2 CkMerge(fO~ 1; O~ 2; : : : O~ k g; B)let min-cn-candidate O~ minimizes cn(first-max-block(O~ ))jB , 1 klet min-cn-block first-max-block(min-cn-candidate)remove-first-max-block(min-cn-candidate)Return min-cn-blockkMerge(fO~ 1; O~ 2; : : : O~ k g; B [ min-cn-block)Fold(hA1; A2 : : :Ak i; B)k 1 cn(A1)jB cn(A2)jBkAReturn hA1; A2 : : :Ak1elselast subgoal A1 first subgoal A2 satisfy adjacency restrictionlet A0 block(A1 ; A2)Return Fold(hA0 ; A3 : : :Ak i; B)else Return ;Figure 13: revised version dac algorithm. candidate sets built selectively,without explicit creation consistency sets. Candidate sets contain folded orderings,unfolding performed returned global ordering. codeUnfold Sort-by-cn procedures listed, due straightforwardness.merging procedure recursively extracts given folded orderings max-blocksminimal cn. folding procedure joins two leading blocks larger one,long cn-inverted.70fiThe Divide-and-Conquer Subgoal-Ordering Algorithmb c(free) c(bound) d(free) d(bound) e(free) e(bound)cost10 5551052010nsols 0.8 220.5410.40.1cn-0.02 0.2 0.2-0.10.30-0.03-0.09Table 2: Control values sample runs ordering algorithms.contains cost values c(X ) d(X ) e(X ) already bound X . example,cost(c(X ))jfa;d(X )g = cost(c(bound)) = 5. dac algorithm traverses divisibility treeS0 follows. (The names nodes Figure 8.)1. root divisibility tree, n1, empty binding set B(n1) = ;,associated subgoal set (n1) = fa; b; c(X ); d(X ); e(X )g. set (n1) partitioned two subsets B(n1): one independent { fa; bg, one indivisible {fc(X ); d(X ); e(X )g. two subsets correspond two child nodes ANDnode n1: n2 n3, empty binding sets.2. (n2) independent B(n2). Therefore, n2 leaf, sole candidateordering obtained sorting subgoals cn B(n2). cn(a)j; = ,0:02,cn(b)j; = 0:2, thus CandSet(n2) = fha; big.3. (n3) indivisible B(n3). Therefore, n3 OR-node, three childrencreated { one subgoal (n3) serving binder.Binder c(X ) yields child node n4 associated set (n4) = fd(X ); e(X )gbinding set B(n4) = fc(X )g. (n4) independent B(n4). There-fore, n4 leaf, sole candidate obtained sorting subgoalscn:cn(d(X ))jfc(X)g = 0; cn(e(X ))jfc(X )g = ,0:09;thus, candidate n4 he(X ); d(X )i.Binder d(X ) yields child node n5 associated set (n5) = fc(X ); e(X )gbinding set B(n5) = fd(X )g. (n5) independent B(n5),sorting cn produces candidate hc(X ); e(X )i.Binder e(X ) yields child node n6 associated set (n6) = fc(X ); d(X )gbinding set B(n6) = fe(X )g. (n6) independent B(n6),sorting cn produces candidate hc(X ); d(X )i.4. add binder corresponding child's candidate obtain three orderings OR-node n3: hc(X ); e(X ); d(X )i, hd(X ); c(X ); e(X )i, he(X ); c(X ); d(X )i.5. perform folding orderings check violations adjacencyrestriction, order determine whether block cheaper permutation.71fiLedeniov & MarkovitchFirst, perform folding hc(X ); e(X ); d(X )i. pair hc(X ); e(X )icn-inverted: cn(c(X ))j; = 0:2, cn(e(X ))jfc(X )g = ,0:09. thus uniteblock. block pass adjacency restriction test (Equation 8):cost(hc(X ); e(X )i)j; = 5 + 2 10 = 25;cost(he(X ); c(X )i)j; = 20 + 0:4 5 = 22:Therefore, ordering MC-contradicting discarded.perform folding hd(X ); c(X ); e(X )i. cn(d(X ))j; = 0:3, cn(c(X ))jfd(X )g =,0:1, pair cn-inverted, unite block. blockpass adjacency restriction test:cost(hd(X ); c(X )i)j; = 10 + 4 5 = 30;cost(hc(X ); d(X )i)j; = 5 + 2 5 = 15:ordering rejected too, even folding finished. continuefolding process, shall see subgoal e(X ) must also addedblock, since cn(hd(X ); c(X )i)j; = 4030:5,1 = 0:0333, cn(e(X ))jhd(X );c(X )i =,0:09.perform folding he(X ); c(X ); d(X )i. cn(e(X ))j; = ,0:03, cn(c(X ))jfe(X)g= ,0:1, pair cn-inverted, form block ec(X ) = he(X ); c(X )i,passes adjacency restriction test:cost(he(X ); c(X )i)j; = 20 + 0:4 5 = 22;cost(hc(X ); e(X )i)j; = 5 + 2 10 = 25:compute control values new block:cost(ec(X ))j; = 20 + 0:4 5 = 22nsols(ec(X ))j; = 0:4 0:5 = 0:2cn(ec(X ))j; = 0:222, 1 = ,0:0363636cn(d(X ))jfec(X )g = 0, thus pair hec(X ); d(X )i cn-ordered, foldingneeded, add folded candidate hec(X ); d(X )i candidate setn3.6. perform merging candidate set n2, fha; big, candidate setn3, fhec(X ); d(X )ig. resulting sequence max-blocks must sorted cn.cn(a) = ,0:02; cn(b) = 0:2; cn(ec(X ))j; = ,0:0363636; cn(d(X ))jfec(X )g = 0:merged ordering, hec(X ); a; d(X ); bi, added candidate set n1.7. compare costs candidates n1, output cheapest one. case,one candidate, hec(X ); a; d(X ); bi. algorithm returns candidateunfolded, he(X ); c(X ); a; d(X ); bi.72fiThe Divide-and-Conquer Subgoal-Ordering AlgorithmExtension/CompletionCosth ai10hbi5hc(X )i5hd(X )i10he(X )i20hbihb; aiadjacency restriction test failshb; c(X )i5 + 2 5 = 15hb; d(X )i5 + 2 10 = 25hb; e(X )iadjacency restriction test failshc(X )ihc(X ); e(X ); a; d(X ); bi5 + 2(10 + 0:1(10 + 0:8(5 + 1 5))) = 28:6haiha; bi10 + 0:8 5 = 14ha; c(X )i10 + 0:8 5 = 14ha; d(X )i10 + 0:8 10 = 18ha; e(X )iadjacency restriction test failshd(X )ihd(X ); c(X ); e(X ); a; bi 10 + 4(5 + 0:5(10 + 0:1(10 + 0:8 5))) = 52:8ha; biha; b; c(X )i14 + 0:8 2 5 = 22ha; b; d(X )i14 + 0:8 2 10 = 30ha; b; e(X )iadjacency restriction test failsha; c(X )iha; c(X ); e(X ); d(X ); bi14 + 0:8 2(10 + 0:1(5 + 1 5)) = 31:6hb; c(X )ihb; c(X ); e(X ); a; d(X )i15 + 2 2(10 + 0:1(10 + 0:8 5)) = 60:6ha; d(X )iha; d(X ); c(X ); e(X ); bi18 + 0:8 4(5 + 0:5(10 + 0:1 5)) = 50:8he(X )ihe(X ); c(X ); a; d(X ); bi 20 + 0:4(5 + 0:5(10 + 0:8(5 + 1 5))) = 25:6ha; b; c(X )iha; b; c(X ); e(X ); d(X )i22 + 0:8 2 2(10 + 0:1 5) = 55:6hb; d(X )ihb; d(X ); c(X ); e(X ); ai25 + 2 4(5 + 0:5(10 + 0:1 10)) = 109he(X ); c(X ); a; d(X ); bi complete ordering;Cheapest prefixTable 3: trace sample run Algorithm 4 set Figure 8. left column showscheapest prefix extracted list step, middle column { extensionscompletions added list, right column { associated costs.comparison, show task performed Algorithm 4.algorithm maintains list prefixes, sorted cost values, initially containsempty sequence. step algorithm extracts list cheapest element,adds list extensions completions prefix. Extensions createdset remaining subgoals dependent, appending remaining subgoalsend prefix. Completions created set remaining subgoalsindependent, sorting appending entire resulting sequence prefix.extension added list adjacency restriction test succeeds twolast subgoals. make list operations faster, implement heap structure(Cormen et al., 1991).trace Algorithm 4 set S0 shown Table 3. left column showscheapest prefix extracted list step, middle column { extensionscompletions added list, right column { associated costs.looks dac algorithm orders given set S0 eciently Algorithm 4.compare several discrete measurements show this. example, Algorithm 673fiLedeniov & Markovitchp2(X2,X5,X7,X9)p1(X1,X2,X3,X4)p5(X4,X8,X9,X10)p3(X1,X5,X6,X8)p4(X6,X3,X7,X10)Figure 14: example worst case ordering. variables initially free, everysubset subgoals indivisible binding rest subgoals, overallcomplexity ordering Algorithm 6 O(n!).performs 4 sorting sessions, one 2 elements, Algorithm 4 performs 5 sortings2 elements, 3 sortings 3 elements. adjacency restriction tested 3times Algorithm 6, 11 times Algorithm 4. Algorithm 6 creates totally 8 differentordered sub-sequences, total length 22, Algorithm 4 creates 24 ordered prefixes,total length 55.4.8 Complexity AnalysisAlgorithm 4 Algorithm 6 find minimal ordering, sort independentsubsets subgoals whenever possible. Algorithm 6, however, offers several advantages duedivide-and-conquer strategy.Let n number subgoals initial set. convenience, assumetime computing control values one subgoal O(1); otherwise, time, complexities must multiplied . worst case complexityAlgorithm 6 O(n!). Figure 14 shows example case n = 5. setevery two subgoals share variable appear subgoals. Thus,subgoals cannot bind it. set root indivisible, matter binderchosen, sets children indivisible. So, child root, must selectevery remaining subgoal binder, on. overall complexity executionO(n!). indeed worst-case complexity: presence AND-nodes treereduce it.Note even n small, complex rule body (n2 ) free variablesimprobable practical programs. Also, worst-case complexity reducedO(n2 2n ), move divisibility trees divisibility graphs (DAGs),identical nodes divisibility tree (same subgoal set, binding set) representedsingle vertex. equivalence test tree nodes performed ecientlyhelp trie structures (Aho et al., 1987), subgoals sorted lexicographically.Let n subgoals, v shared variables appearing subgoals.already noted Section 4.3, partition subgoals subsets performed74fiThe Divide-and-Conquer Subgoal-Ordering AlgorithmO(n) average time, using Union-Find data structure (Cormen et al., 1991, Chapter 22).worst possible case, AND-nodes divisibility tree, apartroot node (whose set divisible dependent set size independent setsize n , m). overall complexity dac algorithm case(n; m; v ) = O(n)| divisibility partition+ O((nQ, m) log(n , m))| ordering independent subgoalsk+ O(( i=0ordering dependent subgoalsQ (,m1(,mi)), i))log(m , k)) |+ O(m Q ki=0| folding,1 (m , i))+ O(n ki=0| mergingk maximal possible number bindings performed remaining subsetindependent. assume every subgoal binds free variables (which happensfrequently practical logic programs), k = minfv; , 1g; otherwise k = , 1.k equal maximal number OR-nodes path root leafdivisibility tree. Therefore, height divisibility tree limited k + 1. Actually,tree shallower, since binders bind one shared variable each.means number shared variables decrease 1 ORnode. simplify formula several common cases, k smallabovementioned assumption holds (every subgoal binds free variablesproof terminates).v < n: (n; m; v) = O(n mv + n log n)v n: (n; m; v) = O(n mm,1 + n log n)v ' n: (n; m; v) = O(nv+1 log n)v ' n: (n; m; v) = O(n m! + n log n)Generally, small number v shared variables, complexity algorithmroughly bounded O(nv+1 log n). particular, subgoals independent (v = 0),complexity O(n log n). practical cases, number shared free variablesrule body relatively small, every subgoal binds free variables; therefore,algorithm polynomial complexity. Note even rule body programtext contains many free variables, usually become bound rule headunification performed (i.e., start ordering instantiated body).5. Learning Control Knowledge Orderingordering algorithms described previous sections assume availability correctvalues average cost number solutions various predicates various argumentbindings. section discuss control knowledge obtained learning.Instead static exploration program text (Debray & Lin, 1993; Etzioni, 1993),adopt approach Markovitch Scott (1989) learn control knowledgecollecting statistics literals proved past. learningperformed on-line off-line. latter case, ordering system first workstraining set queries, collecting statistics. training set built75fiLedeniov & Markovitchdistribution user queries seen past. assume distribution queriesreceived system change significantly time; hence, past distributiondirects system learn relevant knowledge future queries.proving queries, learning component accumulates information control values (average cost number solutions) various literals. Storing separatevalue literal practical, two reasons. first large space requiredapproach. second lack generalization: ordering algorithm quitelikely encounter literals seen before, whose control valuesunknown. Recall transformed Equation 2 Equation 5, movedcontrol values single literals average control values sets literals. obtainprecise averages sets, still needed control values individual literals. Here,take different approach, learning using control values generalclasses literals. estimated cost (nsols) value class defined averagereal cost (nsols) value examples class proved past.refined classes, smaller variance real control values insideclass, precise cost nsols estimations classes assign members, better orderings obtain. One easy way define classes modesbinding patterns (Debray & Warren, 1988; Ullman & Vardi, 1988): argument denote whether free bound. example, predicate fatherpossible classes father(free,free), father(bound,free), father(free,bound)father(bound,bound). Now, receive literal (for example, father(abraham,X)),easily determine binding pattern (in case, father(bound,free)) retrieve control information stored class. course, find binding patternsubgoal given binding set, need method determine variablesbound subgoals binding set. problem arose DPart computation(Section 4.3). shall discuss practical ways solve problem Section 7.1.purpose class definition also use regression trees { type decision treeclassifies continuous numeric values discrete classes (Breiman et al., 1984;Quinlan, 1986). Two separate regression trees stored every program predicate,one cost values, one nsols. tests tree nodes definedvarious ways. use test \is argument bound?", classes literalsdefined regression trees coincide classes defined binding patterns.also apply sophisticated tests, syntactic (e.g., \is third argument termfunctor f?") semantic (e.g., \is third argument female?"), leadsrefined classes better estimations. possible regression tree estimatingnumber solutions predicate father shown Figure 15.Semantic tests arguments require logic inference (in example Figure 15{ invoking predicate female first argument literal). Therefore, mustecient possible. Otherwise retrieval control values take much time.problem ecient learning control values considered elsewhere (Ledeniov& Markovitch, 1998a).Several researchers applied machine learning techniques accelerating logic inference(Cohen, 1990; Dejong & Mooney, 1986; Langley, 1985; Markovitch & Scott, 1993; Minton,1988; Mitchell, Keller, & Kedar-Cabelli, 1986; Mooney & Zelle, 1993; Prieditis & Mostow,1987). works used explanation-based learning generalized caching tech76fiThe Divide-and-Conquer Subgoal-Ordering AlgorithmAverage: 3.1416Test: bound(arg1)?yesAverage: 0.3Test: female(arg1)?yesAverage: 0.0Average: 5Test: bound(arg2)?yesAverage: 0.5Test: bound(arg2)?Average: 0.98yesAverage: 0.0001Average: 1.0Average: 50Figure 15: regression tree estimates number solutions father(arg1,arg2).niques avoid repeated computation. Others utilized acquired knowledge problem clause selection. None works, however, dealt problem subgoalreordering.6. Experimentationtest effectiveness ordering algorithm, experimented variousdomains, compared performance ordering algorithms. experimentsperformed randomly created artificial domains. also tested performancesystem several real domains.6.1 Experimental Methodologyexperiments described consist training session, followed testing session.Training testing sets queries randomly drawn fixed distribution.training session collect control knowledge literal classes. testing sessionprove queries testing set using different ordering algorithms, compareperformance using various measurements.goal ordering reduce time spent Prolog interpreterproves queries testing set. time sum time spent orderingprocedure (ordering time) time spent interpreter (inference time). SinceCPU time known sensitive irrelevant factors hardware, softwareprogramming quality, also show two alternative discrete measurements: totalnumber clause unifications, total number clause reductions performed.number reductions ects size proof tree.experimentation used new version lassy system (Markovitch & Scott,1989), using regression trees learning, ordering algorithms discussedpaper.77fiLedeniov & Markovitch6.2 Experiments Artificial Domainsorder ensure statistical significance results comparing different orderingalgorithms, experimented many different domains. purpose, createdset 100 artificial domains, small fixed set predicates, randomnumber clauses predicate, random rule lengths. Predicatesrule bodies, arguments rule heads bodies randomly drawn fixeddistributions. domain training testing sets (these two setsintersect).training examples fed system learning phase, betterestimations control values produces. hand, learning time must limited, seeing certain number training examples, new examples bringmuch new information, additional learning becomes wasteful. experimentallybuilt learning curve shows dependence quality control knowledgeamount training. curve suggests control values learnedapproximately 400 literals, significant improvement quality orderingnew training examples. Therefore, subsequent experiments stopped training600 cost values learned. training time always small: one learned costvalue corresponds complete proof literal. Thus, every predicate programfour clauses define it, 600 cost values learned 2400 unifications,small time.control values learned means regression trees (Section 5), simplesyntactic tests checked whether argument bound whether argument term certain functor (the list functors created automaticallydomain loaded). However, shall see, even simple tests succeededmaking good estimations control values.tested following ordering methods:Random: subgoals permuted randomly control knowledgeused.Algorithm 3: Building ordered prefixes. prefixes permutationone another, cheapest one retained.Algorithm 3a: Algorithm 3, best-first search method used definenext processed prefix. similar algorithm used lassy system MarkovitchScott (1989).Algorithm 3b: Algorithm 3a, adjacency restriction test added.similar algorithm described Smith Genesereth (1985).Algorithm 4: Algorithm 3b, whenever subgoalsprefix independent (under binding prefix), sorted resultappended prefix one unit.Algorithm 6: dac algorithm.experiments always used Bubble-Sort algorithm sort literals independent sets. algorithm easy implement, known ecient small78fiThe Divide-and-Conquer Subgoal-Ordering AlgorithmOrderingMethodRandomAlgorithm 3Algorithm 3.aAlgorithm 3.bAlgorithm 4Algorithm 6Unifications Reductions Ordering Inference Total Ord.TimeTimeTime Time Reductions86052.0627741.528.191027.385 35.576 0.000292600.32911.04 504.6481.208 505.856 0.552829.00978.59 347.3131.178 348.491 0.352525.34881.12 203.4971.137 204.634 0.232822.27976.0240.2841.191 41.475 0.042623.82914.672.36201.102 3.464 0.0025Table 4: effect ordering tree sizes CPU time (mean results 100 artificialdomains).sets, elements already ordered, nearly ordered. practice, programmersorder program rules optimally, sorting stops early.Since non-deterministic nature random method introduces additional noise,performed artificial domain 20 experiments method, tablepresents average values measurements.Table 4 shows obtained results 100 domains: rows correspond orderingmethods used, columns measurements taken. rightmost column showsratio ordering time number reductions performed, ectsaverage ordering time one rule body. inference time measured separately,set difference total time ordering time.Several observations made:1. Using dac ordering algorithm helps reduce total time proving testingset queries factor 10, compared random ordering. inference timereduced factor 25.2. deterministic ordering methods similar number unifications reductions,similar inference time, predictable, since find minimal orderings.Small uctuations values explained fact rulesseveral minimal orderings existing control knowledge, different orderingalgorithms select different minimal orderings. Since control knowledgeabsolutely precise, real execution costs orderings may different,leads differences. random ordering method builds much larger trees,larger inference time.3. compare performance deterministic algorithms (3 { 6), seedac algorithm performs much better algorithms build orderedprefixes. latter ones, ordering expensive, smaller inference timecannot compensate increase ordering time. Algorithm 4, combinationseveral ideas previous researchers, total time comparable timerandom method (though still greater).79fiLedeniov & Markovitch4. may seem strange simple random ordering method larger ordering timesophisticated Algorithm 6. explain this, note random methodcreates much larger proof trees (on average), therefore number ordered rulesincreases, even cheap operations, like random ordering rule, sumconsiderable time. average time spent ordering one rule shownlast column Table 4; value small random method.6.3 Experiments Real Domainstested ordering algorithm also real domains obtained various sources.domains allow us compare orderings performed algorithm orderings performed human programmers.following domains used:Moral-reasoner: Taken Machine Learning Repository UniversityCalifornia, Irvine1 . domain qualitatively simulates moral reasoning: whetherperson considered guilty, given various aspects charactercrime performed.Depth-first planner: Program 14.11 book \The Art Prolog" (Sterling& Shapiro, 1994). program implements simple planner blocks world.Biblical Family Database: database similar described Example 1.Appletalk: domain describing physical layout local computer network(Markovitch, 1989).Benchmark: Prolog benchmark taken CMU Artificial Intelligence Repository2. predicate names informative: example programmanual ordering dicult.Slow reverse: Another benchmark program source.Geography: Also benchmark program CMU Repository. domaincontains many geographical facts countries.Table 5 shows results obtained. ordering used dac algorithm, literalclasses defined binding patterns. seen dac algorithm able speedlogic inference real domains well. Note Slow Reverse domainprogrammer's ordering already optimal; thus, applying ordering algorithmreduce tree sizes. Still, overhead ordering significant.7. Discussionconcluding section discuss several issues concerning practical implementationdac algorithm several ways increase eciency. surveyrelated areas logic programming propose use dac algorithm there.1. URL: http://www.ics.uci.edu/~mlearn/MLRepository.html2. URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/air.html80fiThe Divide-and-Conquer Subgoal-Ordering AlgorithmDomainWithout orderingorderingGain ratiounifications seconds unifications seconds (time/time)Moral-reasoner352180 98.3987020 23.534.2Depth-first planner10225 19.019927 18.161.05Biblical Family347827 112.68120701 46.082.5Appletalk5036167 1246.30640092 221.735.6Benchmark62012 554.3146012 395.041.4Slow reverse6291 10.336291 11.920.9Geography428480 141.47226628 82.761.7Table 5: Experiments real domains.7.1 Practical Issuessubsection would like address several issues related implementationapplications dac algorithm.computation DPart function (Section 3.2.1) requires procedure computing set variables bound given binding set subgoals. procedureneeded computing control values (Section 5). several possible waysimplement procedure. example:1. easiest way assume every subgoal binds variables appearingarguments. simplistic assumption sucient many domains, especiallydatabase-oriented ones. However, appropriate logic programs usedmanipulate complex data structures containing free variables (such differencelists). assumption used experiments described Section 6.2. dialects Prolog logic languages support mode declarations provideduser (Somogyi et al., 1996b). declarations available, easyinfer binding status variable upon exiting subgoal.3. Even user supply enough mode declarations, ofteninferred structure program means static analysis (Debray &Warren, 1988). Note, however, pointed Somogyi et al. (1996b),no-one yet demonstrated mode inference algorithm guaranteed findaccurate mode information every predicate program.4. learn sets variables bound classes subgoals using methods similardescribed Section 5 learning control values.Several researchers advocate user declarations available (permitted) modes.declarations elegantly incorporated algorithm prune branches violateavailable modes. fix binder OR-node, compute set variablesbecome bound it. results violation available mode onesubgoals corresponding child, whole subtree child pruned. Notedetect violations even mode subgoal partially unknown81fiLedeniov & MarkovitchCandidateSet(S ; B)let fS1; S2; : : : Sk g DPart(S ; B)case:::k = 1, shared-vars(S1) 6= ; (S indivisible B):loop 2B [ fAg violate available modessubgoal n fAglet C (A) CandidateSet(S fin fAg; B [ fAog)n0let C (A)Fold(AkO~ A; B) fifi O~ 2 C (A)else letC 0(A) ; (don't enter branch)Return A2S C 0 (A)Figure 16: Changes Algorithm 6 make use available mode declarations.rest algorithm remains unchanged.moment. example, available modes require first argumentunbound, binding argument OR-node binder trigger pruning,even binding status arguments yet known. Figure 16 showsAlgorithm 6 changed order incorporate declarations available modes.correctness requirement treated similar manner: candidate orderingrejected whenever see violates requirement.experiments described Section 6 performed Prolog interpreter.possible combine dac algorithm Prolog compiler? several waysachieve goal. One way allow compiler insert code on-line learning.compiled code contain procedures accumulating control values dacalgorithm. Alternatively, off-line learning implemented, training partcompilation process.Another method combining algorithm existing Prolog compilers useprogram transformation, process transformed program standardcompiler. Elsewhere (Ledeniov & Markovitch, 1998a) describe method classifyingorderings produced dac algorithm. rule build classification tree,classes different orderings rule body, tests appliedrule head arguments. type tests described Section 5 learningcontrol values. Figure 17 shows two examples trees.Given classification tree, write set Prolog rules, rulehead original rule, body built tests pathtree root leaf node followed ordering leaf. example, secondtree Figure 17 yields following set rules:82fiThe Divide-and-Conquer Subgoal-Ordering Algorithmclassification tree ruleuncle(X,Y) Example 1.nonvar(Y) ?yes[parent(Z,Y),brother(Z,X)][brother(Z,X),parent(Z,Y)]nonvar(X) ?yespossible classification tree rulehead(X,Y)male(X) ?p1(X), p2(Y), p3(X,Y).yes[p1(X),p3(X,Y),p2(Y)]nonvar(Y) ?yes[p2(Y),p3(X,Y),p1(X)][p1(X),p2(Y),p3(X,Y)][p3(X,Y),p1(X),p2(Y)]Figure 17: Examples classification trees learn rule body orderings.head(X,Y)head(X,Y)head(X,Y)head(X,Y)nonvar(X), male(X), p1(X), p3(X,Y), p2(Y).nonvar(X), not(male(X)), p1(X), p2(Y), p3(X,Y).var(X), nonvar(Y), p2(Y), p3(X,Y), p1(X).var(X), var(Y), p3(X,Y), p1(X), p2(Y).Table 4 see dac algorithm helped reduce inferencetime factor 25, total time reduced factor 10. differencecaused additional computation ordering procedure. dangerbenefit obtained ordering outweighed cost ordering process.manifestation so-called utility problem (Minton, 1988; Markovitch & Scott,1993). systems strongly-moded (such Mercury { Somogyi et al., 1996b)employ dac algorithm statically compilation time one available modes,thus reducing run-time ordering time zero. mode-based approach performssyntactic tests subgoal arguments. classification tree method, described above,generalization mode-based approach, allowing semantic tests well.Due insucient learning experience lack meaningful semantic tests, quitepossible classification trees contain leaves large degrees error. casesstill need perform ordering dynamically. reduce harmfulness utilityproblem case dynamic ordering, use cost-sensitive variation dacalgorithm (Ledeniov & Markovitch, 1998a, 1998b). modified algorithm dealsproblem explicit reasoning economy control process. algorithmanytime, is, stopped moment return currently best ordering(Boddy & Dean, 1989). learn resource-investment function compute expectedreturn speedup time additional control time. function used determinestopping condition anytime procedure. implemented frameworkfound indeed succeeded reducing ordering time, without significant increaseinference time.83fiLedeniov & Markovitch7.2 Relationship Workswork described paper continuation line research initiated SmithGenesereth (1985) continued Natarajan (1987) Markovitch Scott (1989).line research aims finding ecient ordering set subgoals.search minimal-cost ordering based cost analysis utilizes available informationcost number-of-solutions individual subgoals.Smith Genesereth (1985) performed exhaustive search spacepermutations given set subgoals, using adjacency restriction reducesize search space (Equation 8). restriction applied pairs adjacentsubgoals global ordering entire set. applied independent setsubgoals, adjacency restriction easily transformed sorting restriction:subgoals minimal ordering must sorted cn values. Natarajan (1987) arrivedconclusion presented ecient ordering algorithm independent sets.dac algorithm uses subgoal dependence break set smaller subsets. Independent subsets sorted. Dependent subsets recursively ordered, resultingorderings merged using generalization adjacency restriction manipulatesblocks subgoals. Therefore dac algorithm generalization algorithms.last decade, significant research effort went static analysis (SA)logic programs. three types SA exploited dac algorithmreduce ordering time.major part SA research deals program termination (De Schreye & Decorte,1994). dac algorithm solves termination problem, special case eciencyproblem (it always finds terminating ordering, orderings exist). learning,set limits computation resources available subgoal execution. subgoalnon-terminating (in certain mode), learning module associate high costparticular mode. Consequently, dac algorithm allow orderingsmode subgoal. Nevertheless, use static termination analysismandatory proper operation dac algorithm, exploit analysisincrease eciency learning process ordering process.learning, limit set computation resources devoted executionsubgoal must high, increase reliability cost estimation. However,high limit lead significant increase learning time many subgoalsnon-terminating. termination information obtained SA available, useavoid entering infinite branches proof trees. ordering, termination informationserve reduce size space orderings searched algorithm. terminationinformation comes form allowed modes (Somogyi et al., 1996b), orderingsviolate modes filtered out, modified algorithm shown Figure 16.termination information comes form partial order subgoals, orderingsviolate partial order filtered similar manner.second type SA research combined dac algorithm correctness analysis, program tested specifications given user.folon environment (Henrard & Le Charlier, 1992) designed supportmethodology logic program construction aims reconciling declarative semantics ecient implementation (Deville, 1990). construction process starts84fiThe Divide-and-Conquer Subgoal-Ordering Algorithmspecification, converts logic description finally, Prolog program.rules program correct respect initial specification, system performs transformations reordering literals clause, adding type checkingliterals on. De Boeck Le Charlier (1990) mention reordering,specify ordering algorithm different simple generate-and-test method. Cortesi,Le Charlier, Rossi (1997) present analyzer verifying correctness Prologprogram relative specification provides list input/output annotationsarguments parameters used establish program termination. Again,ordering algorithm given explicitly. purpose dac algorithm complementarypurpose folon, could serve auxiliary aid make resulting Prologprogram ecient.Recently, Mercury language developed University Melbourne (Somogyiet al., 1996a, 1996b). Mercury strongly typed strongly moded language. Typemode declarations supplied programmer (though recent releasesMercury system already support partial inference types modes { Somogyi et al.,1996a). compiler checks mode declarations predicates satisfied;necessary, reorders subgoals rule body ensure mode correctness (and rejectsprogram neither ordering satisfies mode declaration constraints). compilerperforms reordering, consider eciency issue. often happensseveral orderings rule body satisfy mode declaration constraints: casesMercury compiler could call static version dac algorithm selectecient ordering. Another alternative augment dac algorithm mode declarationchecks, shown Figure 16.Note Mercury purely declarative logic programming language, thereforesuitable subgoal reordering Prolog. non-logical constructscould destroy declarative semantics give logic programs power; Mercuryeven I/O declarative.third type relevant SA cost analysis logic programs (Debray & Lin,1993; Braem et al., 1994; Debray et al., 1997). Cortesi et al. (1997) describe cost formulasimilar Equation 5 select lowest-cost ordering. However, used generate-andtest approach sometimes prohibitively expensive. Static analysis costnumber solutions used obtain control values, instead learning them.eciency logic programs also increased methods program transformation (Pettorossi & Proietti, 1994, 1996). One popular approaches\rules+strategies" approach, consists starting initial programapplying one elementary transformation rules. Transformation strategies metarules prescribe suitable sequences applications transformation rules.One possible transformation rules goal rearrangement rule transformsprogram transposing two adjacent subgoals rule body. Obviously, orderingrule body transformed ordering finite numbertranspositions. Thus, static subgoal ordering considered special case programtransformation goal rearrangement rule used. hand, dynamicsemi-dynamic ordering methods cannot represented simple transformation rules,since make use run-time information (expressed bindings rule body subgoals85fiLedeniov & Markovitchobtain unifications rule heads), may order rule body differentlydifferent circumstances.program transformation technique called compiling control (Bruynooghe, De Schreye,& Krekels, 1989; Pettorossi & Proietti, 1994) follows approach differenttrying improve control strategy logic programs. Instead enhancing naiveProlog evaluator using better (and often complex) computation rule, programtransformed derived program behaves naive evaluator exactlyinitial program would behave enhanced evaluator. forms compiling controlfirst translate initial program standard representation (for example,unfolding tree), complex computation rule used, new programconstructed representation, naive computation rule mind.Reordering rule body subgoals regarded moving complex computationrule selects subgoals order dictated ordering algorithm. casedac algorithm, computation rule may complex simple use compilingcontrol methods. Nevertheless, easily incorporated special compiling controlmethod. Section 7.1 described method program rewriting first buildsclassification trees based orderings performed past, usesclassification trees constructing clauses derived program. derived programeciently executed naive computation rule Prolog. techniquefact kind compiling control. important property use knowledge collectedexperience (the orderings made past).One transformation method significantly benefit dac algorithmunfolding (Tamaki & Sato, 1984). unfolding process subgoals replacedassociated rule bodies. Even initial rules ordered optimally humanprogrammer static ordering procedure, resulting combined sequence may faroptimal. Therefore could advantageous use dac algorithm reorderingunfolded rule. rules become longer, potential benefit ordering grows.danger high complexity ordering procedure overcome usingcost-sensitive version dac algorithm (Section 7.1).7.3 Conclusionswork study problem subgoal ordering logic programs. presenttheoretical base practical implementation ideas, show empirical resultsconfirm theoretical predictions. combine ideas Smith Genesereth (1985),Simon Kadane (1975) Natarajan (1987) novel algorithm orderingconjunctive goals. algorithm aimed minimizing time logic interpreterspends proof given conjunctive goal.main algorithm described paper dac algorithm (Algorithm 6, Section 4.6). works dividing sets subgoals smaller sets, producing candidatesets orderings smaller sets, combining candidate sets obtain orderingslarger sets. prove algorithm finds minimal ordering given setsubgoals, show eciency practical assumptions. algorithmemployed statically (to reorder rule bodies program text execution86fiThe Divide-and-Conquer Subgoal-Ordering Algorithmstarts), semi-dynamically (to reorder rule body reduction performed)dynamically (to reorder resolvent every reduction subgoal rule body).Several researchers (Minker, 1978; Warren, 1981; Naish, 1985a, 1985b; Nie & Plaisted,1990) proposed various heuristics subgoal ordering. Though fast, methodsguarantee finding minimal-cost orderings. algorithm provably finds minimal-costordering, though ordering may take time heuristic methods.future seems promising incorporate heuristics dac algorithm. example,heuristics used grade binders OR-nodes: rather exhaustively tryingsubgoals binders, could try one, several binders, thus reducing orderingtime. Also, current version ordering algorithm suitable findingsolutions conjunctive goal. would like extend problem finding onesolution, fixed number solutions.Another interesting issue research adaptation dac algorithminterleaving ordering methods (Section 2.3). There, subgoals rule body addedordered resolvent, seems wasteful start complete ordering process;use information stored existing ordering resolvent. Perhaps wholedivisibility tree resolvent stored, nodes updated subgoalsrule body added resolvent.ordering algorithm needs control knowledge work. control knowledgeaverage cost number solutions literals, learned trainingcollecting statistics. make assumption distribution queries receivedsystem change time; thus, training set based distributionseen past, system learns relevant knowledge future queries. considerissue learning control values thoroughly another paper (Ledeniov & Markovitch,1998a), together issues concerning dac algorithm (such minimizingtotal time, instead minimizing inference time only).Ullman Vardi (1988) showed problem ordering subgoals obtain termination inherently exponential time. problem work substantiallyharder: must find order whose execution terminates finite time, oneterminates minimal finite time. impossible find ecient algorithmcases. dac algorithm, however, ecient practical cases, graphrepresenting subgoal dependence (Figure 3) sparsely connected.implemented dac algorithm tested artificial real domains.experiments show speedup factor 10 compared random ordering,13 compared alternative ordering algorithms.dac algorithm useful many practical applications. Formal hardwareverification become extremely important semiconductor industry. modelchecking currently widely used technique, generally agreed copingincreasing complexity VLSI design requires methods based theorem proving.main obstacle preventing use automatic theorem proving high computationaldemands. dac algorithm may used speeding logic inference, making useautomatic theorem provers practical.Logic gained increasing popularity representation common-sense knowledge.several advantages, including exibility well-understood semantics. Indeed,CYC project (Lenat, 1995) recently moved frame-based representation logic87fiLedeniov & Markovitchbased representation. However, large scale knowledge bases likely presentsignificant eciency problems inference engines. Using automatic subgoal orderingtechniques, described here, may help solve problems.issue subgoal ordering obtains new significance development Inductive Logic Programming (Lavrac & Dzeroski, 1994; Muggleton & De Raedt, 1994). Systemsusing approach, FOIL (Quinlan & Cameron-Jones, 1995), try build correctprograms fast possible, without considering eciency produced programs.Combining dac algorithm Inductive Logic Programming techniquessynthesis logic programs (such deductive constructive approaches)looks like promising direction.Appendix A. Proof Lemma 8appendix present proof lemma omitted main textpaper reasons compactness. prove show two auxiliary lemmas.Lemma 9Let A~ 1 A~ 2 two ordered sequences subgoals, B set subgoals. valuecn(A~ 1kA~2)jB lies values cn(A~ 1)jB cn(A~ 2)jB[A~ .1Proof:Denote c1 = cost(A~1 )jBn1 = nsols(A~1)jBcn1 = cn(A~1)jBc2 = cost(A~2 )jB[A~ n2 = nsols(A~2)jB[A~ cn2 = cn(A~2)jB;[A~c1;2 = cost(A~1 kA~ 2)jB n1;2 = nsols(A~ 1kA~ 2 )jB cn1;2 = cn(A~ 1 kA~ 2)jBcn = n1;2 , 1 = n1 n2 , 1 = (n1 , 1) + n1 (n2 , 1) =11;211c1;2c1;2c1;2nn1 ,12 ,1c+n c= 1 c1 c 1 2 c2 = c1 cn1 +c n1 c2cn2 = cc1 cn1 + nc1 c2 cn21;21;21;21;2nc1 c21So, cn1;2 always lies cn1 cn2 (because c1;2 c1;2 positive1). exactly, point cn1;2 divides segment [cn1; cn2] ratiosum(cn1;2 , cn1 ) : (cn2 , cn1;2 ) = n1 c2 : c1:words, cn1;2 weighted average cn1 cn2 . Note c1 amountresources spent proof-tree B~ 1 , n1 c2 { resources spent tree B~ 2 ,c1;2 sum. So, time (relatively) dedicate proof B~ 1 , closercn1;2 cn1. conclusion generalized larger number componentsconcatenation (the proof induction):cost(A~ 1 )jBcn(A~ 1 kA~ 2 k : : : A~ k )jB =cn(A~ 1 )jB +cost(A~ 1 kA~ 2 k : : : A~ k )jBnsols(A~ 1 )jB cost(A~ 2 )jB[A~ 1+cn(A~ 2 )jB[A~ 1 + : : : +cost(A~ 1 kA~ 2k : : : A~ k )jBnsols(A~ 1 kA~ 2 k : : : A~ k,1)jB cost(A~ k )jB[A~ 1 [:::A~ k,1+cn(A~ k )jB[A~ 1 [:::A~ k,1cost(A~ 1kA~ 2 k : : : A~ k )jB88fiThe Divide-and-Conquer Subgoal-Ordering Algorithm2Lemma 10Let S0 set subgoals N node divisibility tree S0. Let O~ N =Q~ kA~ 1kA~2 kR~ ordering (N ), A~ 1 A~ 2 cn-equal max-blocks: cn(A~ 1 )jB(N )[Q~ =cn(A~ 2)jB(N )[Q~ [A~ .Let ancestor N O~ ordering (M ) consistent O~ N ,1A~ 1 A~ 2 violated. either A~ 1 A~ 2 max-blocks O~max-blocks stand cn-equal them, A~ 1 A~ 2 belongmax-block O~ , O~ MC-contradicting.Proof: induction distance N . = N , A~1 A~2max-blocks, lemma holds. Let 6= N , let 0 child whose0descendant N . inductive hypothesis, lemma holds N 0 . Let O~00~~~~projection OM . A1 A2 violated OM , since violatedO~ .A~ 1 A~2 max-blocks O~ M0 , inductive hypothesis maxblocks stand cn-equal them. OR-node, newsubgoals enter A~ 1 A~ 2 . AND-node, insertion newsubgoals possible, violates blocks, places max-blocks ordered cn,O~ MC-contradicting, Corollary 3 Lemma 6. So, O~ MCcontradicting, new max-blocks inserted A~ 1 A~ 2 must cn-equalboth.Assume A~ 1 A~ 2 max-blocks O~ . Without loss generality,let A~ 1 member larger max-block O~ . show A~ 2 must also participatemax-block.Since A~ 1 joined larger block, must exist another block, B~ , adjacent A~ 1,pair cn-inverted. Let B~ stand left A~ 1 (in opposite case,~ A~ 1i cn-inverted, i.e.,proof similar): O~ = X~ kB~ kA~ 1kY~ kA~ 2 kZ~ . pair hB;~~~~cn(B )jB(M )[X~ > cn(A1)jB(M )[X~ [B~ . Lemma 9, cn(B kA1)jB(M )[X~ > cn(A~ 1)jB(M )[X~ [B~ ,must add block B~ kA~ 1 blocks Y~ , cn-equalA~ 1 . Also, cn(A~ 1)jB(M )[X~ [B~ = cn(A~ 2 )jB(M )[X~ [B~ [A~ , A~ 2 must also addedblock. Thus, A~ 1 A~ 2 belong max-block O~ .A~1 A~ 2 belong max-block O~ M0 , block either violatedO~ , not. former case, O~ MC-contradicting, Corollary 3.latter case, A~ 1 A~ 2 belong max-block O~ .O~ M0 MC-contradicting, O~ MC-contradicting (the proof easy). 21prove Lemma 8:Lemma 8Let S0 set subgoals, N node divisibility tree S0 O~ N = Q~ kA~ 1 kA~ 2kR~89fiLedeniov & Markovitchordering (N ), A~ 1 A~ 2 max-blocks, mutually independentcn-equal bindings B(N ) [ Q~ . O~ N blockwise-equivalent O~ N0 =Q~ kA~ 2kA~1 kR~ .Proof:Let S~ minimal ordering S0 binder-consistent O~ N . Corollary 3, S~~0violate blocks O~ N , particular A~ 1 A~ 2 : S~ = X~ kA~ 1kY~ kA~ 2 kZ~ . Let S~ 0 = S~ jOO~ NN =X~ kA~ 2 kY~ kA~ 1 kZ~ . must show S~ 0 minimal, implies blockwise equivalenceO~ N O~ N0 .Y~ empty, Cost(S~ ) = Cost(S~ 0 ) Lemma 2 (A~ 1 A~ 2 adjacent, mutuallyindependent cn-equal; thus, transposition change cost).Y~ empty, Corollary 2 Y~ mutually independent A~ 1 A~ 2(S~ binder-consistent O~ N , therefore B(N ) X~ , consequently Y~ \ B(N ) = ;).Y~ divided several blocks, one cn-equal A~ 1 A~ 2: since S~minimal, O~ N cannot MC-contradicting, claim follows Lemma 10.Lemma 9, cn(Y~ )jX~ = cn(A~ 1 )jX~ = cn(A~ 2)jX~ . Lemma 2:Cost(S~ ) = Cost(X~ kA~ 1kY~ kA~ 2kZ~ )= Cost(X~ kA~ 1kA~ 2 kY~ kZ~ )= Cost(X~ kA~ 2kA~ 1 kY~ kZ~ )= Cost(X~ kA~ 2kY~ kA~ 1kZ~ )====== swap(Y; A2)== swap(A1; A2 )== swap(A1; )Cost(S~ 0 )Minimality S~ 0 implies blockwise equivalence O~ N O~ N0 .2Appendix B. Correctness dac Algorithmsection show dac algorithm correct, i.e., given set subgoals S0,returns minimal ordering. suces show candidate set root nodeDTree(S0; ;) valid. case, follows definition valid sets, mustcontain minimal ordering. algorithm returns one cheapest candidatesroot. Therefore, candidate set root valid, dac algorithm must returnminimal ordering S0.start defining strong validity sets orderings. prove strongvalidity implies validity. Finally, use induction prove theorem, showingcandidate set produced node divisibility tree strongly valid.Definition: Let S0 set subgoals, N node divisibility tree S0. setCN (S (N )) strongly valid, every ordering (S (N )) nCN either MC-contradictingblockwise-equivalent member CN , unless ordering (N ) min-consistent.StronglyV alidN;S (CN ) ()[9O~ N0 2 (S (N )) : MCN;S (O~ N0 )] ! [O~ N 2 (S (N )) n CN ! MCCN;S (O~ N )_(9O~ N00 2 CN ^ MCEN;S (O~ N ; O~ N00 ))]0000Lemma 11 strongly valid set orderings valid.90fiThe Divide-and-Conquer Subgoal-Ordering AlgorithmProof: Let S0 set subgoals, N node divisibility tree S0, C (N )strongly valid set orderings N .min-consistent ordering N , C (N ) valid, definitionvalid set (Section 4.2).Otherwise, exists least one minimal ordering S0, binder-consistent N .Every ordering (S (N )) n C (N ) either MC-contradicting blockwise-equivalentmember C (N ). prove C (N ) valid, must show containsordering O~ N , binder-consistent minimal ordering S~ S0 .Let S~ 0 minimal ordering S0, binder-consistent N . Let O~ N0 projectionS~ 0 N . O~ N0 2 C (N ), done (O~ N = O~ N0 , S~ = S~ 0). Otherwise, O~ N0 2 (S (N )) nC (N ). O~ N0 cannot MC-contradicting (it min-consistent S~ 0), therefore mustblockwise-equivalent O~ N00 2 C (N ). Blocks O~ N0 violated S~ 0, since S~ 0~ 00minimal (Corollary 3). Therefore substitution S~ 00 = S~ 0jOO~ N0 well defined. S~ 00 minimal,Nsince S~ 0 minimal O~ N0 O~ N00 blockwise-equivalent. S~ 00 binder-consistentO~ N00 , since S~ 0 binder-consistent O~ N0 . Thereupon S~ 00 O~ N00 satisfy requirementsvalidity (O~ N = O~ N00 , S~ = S~ 00).2Theorem 3Let S0 set subgoals. node N divisibility tree S0, Algorithm 6creates strongly valid candidate set orderings.Proof: induction height N 's subtree.Inductive base: N leaf node, means (N ) independent B(N ).candidate set N contains one element, whose subgoals sorted cn.orderings belong (S (N )) n CandSet(N ) either sorted cn,hence MC-contradicting (Lemma 4), sorted cn, hence blockwiseequivalent candidate (Corollary 4). Consequently, CandSet(N ) stronglyvalid.Inductive hypothesis: children N , Algorithm 6 produces strongly valid candidate sets.Inductive step: internal node divisibility tree either AND-node ORnode.1. N AND-node. Let N1; N2; : : :Nk children N . First showConsSet(N ) strongly valid.Let O~ N 2 (S (N )) n ConsSet(N ). 1 k, let O~ projectionO~ N Ni. set projections fO~ 1; O~ 2; : : : O~ k g belong one threefollowing types, regard O~ N .(a) sets first type contain least one MC-contradicting projection.case O~ N MC-contradicting too. Assume contrary: existsminimal ordering S~ S0, binder-consistent O~ N . Let O~ MCcontradicting projection. Since O~ consistent O~ N , also consistent91fiLedeniov & MarkovitchS~ . Since B(Ni ) = B(N ), subgoals B(Ni) appear S~subgoals (Ni ). Therefore, O~ binder-consistent S~ , since S~minimal, O~ min-consistent MC-contradicting { contradiction.(b) sets second type contain MC-contradicting projections,O~ N block projection violated, max-blocks differentprojections ordered cn. case, O~ N MC-contradicting,Corollary 3 Lemma 6.(c) sets third type contain MC-contradicting projections,max-blocks projections violated O~ N sorted cn.Every projection O~ either belongs CandSet(Ni), not. O~ 62 CandSet(Ni),exists O~ i0 2 CandSet(Ni) O~ blockwise-equivalentO~ i0 (because CandSet(Ni) strongly valid inductive hypothesis,O~ MC-contradicting). O~ 2 CandSet(Ni), set O~ i0 = O~ i.~0~0 ~0Let O~ N0 = O~ N jOO~ jOO~ : : : jOO~ kk . substitution well defined, since O~number max-blocks O~ i0 , max-blocks projectionsviolated O~ N . Let S~ minimal ordering S0, binder-consistentO~ N . Since S~ minimal, blocks O~ 1 violated S~ . Since O~ 1~0blockwise-equivalent O~ 10 , ordering S~1 = S~ jOO~ well-definedminimal. S~1 positions subgoals B(N ) change;thus, O~ 2 min-consistent S~1, blockwise equivalence O~ 2 O~ 20~0~0 ~0entails minimality ordering S~2 = S~1 jOO~ = S~ jOO~ jOO~ . continue~0~0 ~0O~ -s, finally obtain S~ 0 = S~ jOO~ jOO~ : : : jOO~ kk minimal.~0definition O~ N0 , S~ 0 = S~ jOO~ NN (note introduced blockwise equivalencestrong validity able perform transition). S~ 0 minimal,therefore O~ N blockwise-equivalent O~ N0 . O~ N0 2 ConsSet(N ), sinceprojections candidates child nodes. Thereupon, O~ N blockwiseequivalent member ConsSet(N ).So, ConsSet(N ) strongly valid. prove CandSet(N ) strongly valid,suces show members ConsSet(N ) includedCandSet(N ) Algorithm 6, either MC-contradicting blockwise-equivalentmembers CandSet(N ). orderings three types:(a) Orderings violate blocks children projections. MCcontradicting Corollary 3.(b) Orderings violate blocks, max-blocks children projections ordered cn. MC-contradicting Lemma 6.(c) Orderings violate blocks sorted cn.combination projections, one consistent ordering N retainedcandidate set, rejected. Corollary 5, rejectedorderings blockwise-equivalent retained candidate.Consequently, CandSet(N ) strongly valid.121211922122121212fiThe Divide-and-Conquer Subgoal-Ordering Algorithm2. N OR-node. Again, start showing ConsSet(N ) stronglyvalid.Let O~ N 2 (S (N )) n ConsSet(N ). O~ N constructed binder H\tail" sequence T~ : O~ N = H kT~ . Let NH child N correspondsbinder H . inductive hypothesis, CandSet(NH ) strongly valid.T~ 62 CandSet(NH ), since otherwise O~ N 2 ConsSet(N ). Therefore, T~ either MC-contradicting, blockwise-equivalent T~ 0 2 CandSet(NH ).T~ MC-contradicting, O~ N MC-contradicting (proof contradiction, AND-nodes). T~ blockwise-equivalent T~ 0 , O~ N = H kT~blockwise-equivalent H kT~ 0 2 ConsSet(N ) (the proof easy). Hence,ConsSet(N ) strongly valid. orderings ConsSet(N ) included CandSet(N ) dac algorithm cheaper permutationsleading max-blocks, therefore MC-contradicting, Lemma 7. Hence,CandSet(N ) strongly valid.2Corollary 7 candidate set found Algorithm 6 root node valid.Corollary 8 Algorithm 6 finds minimal ordering given set subgoals.ReferencesAho, A. V., Hopcroft, J. E., & Ullman, J. D. (1987). Data Structures Algorithms.Addison-Wesley.Boddy, M., & Dean, T. (1989). Solving time-dependent planning problems. Sridharan, N. S. (Ed.), Proceedings 11th International Joint Conference ArtificialIntelligence, pp. 979{984, Detroit, MI, USA. Morgan Kaufmann.Bol, R. N., Apt, K. R., & Klop, J. W. (1991). analysis loop checking mechanismslogic programs. Theoretical Computer Science, 86 (1), 35{79.Braem, C., Le Charlier, B., Modar, S., & Van Hentenryck, P. (1994). Cardinality AnalysisProlog. Bruynooghe, M. (Ed.), Logic Programming - Proceedings 1994International Symposium, pp. 457{471, Massachusetts Institute Technology.MIT Press.Breiman, L., Friedman, J. H., Olshen, R. A., & Stone, C. J. (1984). ClassificationRegression Trees. Wadsworth International Group, Belmont, CA.Bruynooghe, M., De Schreye, D., & Krekels, B. (1989). Compiling control. JournalLogic Programming, 6, 135{162.Clark, K. L., & McCabe, F. (1979). control facilities IC-Prolog. Michie, D. (Ed.),Expert Systems Microelectronic Age., pp. 122{149. University Edinburgh,Scotland.Clocksin, W. F., & Mellish, C. S. (1987). Programming Prolog (Third edition). SpringerVerlag, New York.93fiLedeniov & MarkovitchCohen, W. W. (1990). Learning approximate control rules high utility. ProceedingsSeventh International Machine Learning Workshop, pp. 268{276, Austin, Texas.Morgan Kaufmann.Cormen, T. H., Leiserson, C. E., & Rivest, R. L. (1991). Introduction Algorithms. MITPress, Cambridge, Mass.Cortesi, A., Le Charlier, B., & Rossi, S. (1997). Specification-based automatic verificationProlog programs. Gallagher, J. (Ed.), Proceedings 6th International Workshop Logic Program Synthesis Transformation, Vol. 1207 LNCS, pp. 38{57,Stockholm, Sweden. Springer-Verlag.De Boeck, P., & Le Charlier, B. (1990). Static type analysis Prolog procedures ensuringcorrectness. Deransart, P., & Maluszynski, J. (Eds.), Programming LanguagesImplementation Logic Programming, Vol. 456 LNCS, pp. 222{237, Linkoping,Sweden. Springer-Verlag.De Schreye, D., & Decorte, S. (1994). Termination logic programs: never-endingstory. Journal Logic Programming, 19 & 20, 199{260.Debray, S., Lopez-Garca, P., Hermenegildo, M., & Lin, N.-W. (1997). Lower bound costestimation logic programs. Maluszynski, J. (Ed.), Proceedings International Symposium Logic Programming (ILPS-97), pp. 291{306, Cambridge. MITPress.Debray, S. K., & Lin, N.-W. (1993). Cost analysis logic programs. ACM TransactionsProgramming Languages Systems, 15 (5), 826{875.Debray, S. K., & Warren, D. S. (1988). Automatic mode inference logic programs.Journal Logic Programming, 5, 207{229.Dejong, G., & Mooney, R. (1986). Explanation-based learning: alternative view. Machine Learning, 1, 145{176.Deville, Y. (1990). Logic Programming: Systematic Program Development. InternationalSeries Logic Programming, Addison-Wesley.Etzioni, O. (1991). STATIC: problem-space compiler PRODIGY. Dean, ThomasL.; McKeown, K. (Ed.), Proceedings 9th National Conference ArtificialIntelligence, pp. 533{540, Anaheim, California. MIT Press.Etzioni, O. (1993). Acquiring search-control knowledge via static analysis. Artificial Intelligence, 62, 255{301.Greiner, R., & Orponen, P. (1996). Probably approximately optimal satisficing strategies.Artificial Intelligence, 82 (1-2), 21{44.Henrard, J., & Le Charlier, B. (1992). FOLON: environment declarative constructionlogic programs. Bruynooghe, M., & Wirsing, M. (Eds.), Proceedings FourthInternational Symposium Programming Language Implementation Logic Programming, Vol. 631 LNCS, pp. 217{231, Leuven, Belgium. Springer-Verlag.94fiThe Divide-and-Conquer Subgoal-Ordering AlgorithmItai, A., & Makowsky, J. A. (1987). Unification complexity measure logic programming. Journal Logic Programming, 4, 105{117.Knuth, D. E. (1973). Art Computer Programming, Vol. 3. Addison-Wesley, Reading,Mass.Kowalski, R. A. (1979). Algorithm = Logic + Control. Communications ACM, 22(7),424{436.Laird, P. D. (1992). Ecient dynamic optimization logic programs. ProceedingsML92 Workshop Knowledge Compilation Speedup Learning Aberdeen,Scotland.Langley, P. (1985). Learning search: weak methods domain-specific heuristics.Cognitive Science, 9, 217{260.Lavrac, N., & Dzeroski, S. (1994). Inductive Logic Programming: Techniques Applications. Artificial Intelligence. Ellis Harwood, New York.Ledeniov, O., & Markovitch, S. (1998a). Controlled utilization control knowledgespeeding logic inference. Tech. rep. CIS9812, Technion, Haifa, Israel.Ledeniov, O., & Markovitch, S. (1998b). Learning investment functions controllingutility control knowledge. Proceedings Fifteenth National ConferenceArtificial Intelligence, pp. 463{468, Madison, Wisconsin. Morgan Kaufmann.Lenat, D. B. (1995). CYC: large-scale investment knowledge infrastructure. Communications ACM, 38 (11), 33{38.Lloyd, J. W. (1987). Foundations Logic Programming (Second edition). Springer-Verlag,Berlin.Markovitch, S., & Scott, P. D. (1989). Automatic ordering subgoals | machine learningapproach. Lusk, E. L., & Overbeek, R. A. (Eds.), Proceedings North AmericanConference Logic Programming, pp. 224{242, Cleveland, Ohio. MIT Press.Markovitch, S. (1989). Information Filtering: Selection Mechanisms Learning Systems.Ph.D. thesis, EECS Department, University Michigan.Markovitch, S., & Scott, P. D. (1993). Information filtering: Selection mechanismslearning systems. Machine Learning, 10, 113{151.Minker, J. (1978). Search strategy selection function inferential relational system.ACM Transactions Database Systems, Vol. 3, pp. 1{31.Minton, S. (1988). Learning Search Control Knowledge: Explanation-Based Approach.Kluwer, Boston, MA.Mitchell, T. M., Keller, R. M., & Kedar-Cabelli, S. T. (1986). Explanation-based generalization: unifying view. Machine Learning, 1, 47{80.95fiLedeniov & MarkovitchMooney, R. J., & Zelle, J. M. (1993). Combining FOIL EBG speed-up logic programs.Bajcsy, R. (Ed.), Proceedings Thirteenth International Joint ConferenceArtificial Intelligence, pp. 1106{1111, Chambery, France. Morgan Kaufmann.Morris, K. A. (1988). algorithm ordering subgoals NAIL!. ProceedingsSeventh ACM SIGACT-SIGMOD Symposium Principles Database Systems, pp.82{88, Austin, TX. ACM Press, New York.Muggleton, S., & De Raedt, L. (1994). Inductive logic programming: Theory methods.Journal Logic Programming, 19 & 20, 629{680.Naish, L. (1984). MU-Prolog 3.1db Reference Manual. Dept. Computer Science, Univ.Melbourne.Naish, L. (1985a). Automatic control logic programs. Journal Logic Programming,3, 167{183.Naish, L. (1985b). Prolog control rules. Joshi, A. (Ed.), Proceedings 9th International Joint Conference Artificial Intelligence, pp. 720{723, Los Angeles, CA.Morgan Kaufmann.Natarajan, K. S. (1987). Optimizing backtrack search solutions conjunctive problems. McDermott, J. (Ed.), Proceedings 10th International Joint ConferenceArtificial Intelligence, pp. 955{958, Milan, Italy. Morgan Kaufmann.Nie, X., & Plaisted, D. A. (1990). Experimental results subgoal ordering. IEEETransactions Computers, Vol. 39, pp. 845{848.Pettorossi, A., & Proietti, M. (1994). Transformation logic programs: Foundationstechniques. Journal Logic Programming, 19 & 20, 261{320.Pettorossi, A., & Proietti, M. (1996). Rules strategies transforming functionallogic programs. ACM Computing Surveys, 28 (2), 360{414.Porto, A. (1984). Epilog: language extended programming. Campbell, J. (Ed.),Implementations Prolog. Ellis Harwood.Prieditis, A. E., & Mostow, J. (1987). PROLEARN: Towards prolog interpreterlearns. Forbus, Kenneth; Shrobe, H. (Ed.), Proceedings 6th National Conference Artificial Intelligence, pp. 494{498, Seattle, WA. Morgan Kaufmann.Quinlan, J. R. (1986). Induction decision trees. Machine Learning, 1, 81{106.Quinlan, J. R., & Cameron-Jones, R. M. (1995). Induction logic programs: FOILrelated systems. New Generation Computing, Special Issue Inductive Logic Programming, 13 (3-4), 287{312.Simon, H. A., & Kadane, J. B. (1975). Optimal problem-solving search: All-or-none solutions. Artificial Intelligence, 6, 235{247.Smith, D. E. (1989). Controlling backward inference. Artificial Intelligence, 39 (1), 145{208.96fiThe Divide-and-Conquer Subgoal-Ordering AlgorithmSmith, D. E., & Genesereth, M. R. (1985). Ordering conjunctive queries. Artificial Intelligence, 26, 171{215.Smith, D. E., Genesereth, M. R., & Ginsberg, M. L. (1986). Controlling recursive inference.Artificial Intelligence, 30 (3), 343{389.Somogyi, Z., Henderson, F., Conway, T., Bromage, A., Dowd, T., Jeffery, D., & al. (1996a).Status Mercury system. Proc. JICSLP '96 Workshop ParallelismImplementation Technology (Constraint) Logic Programming Languages, pp.207{218, Bonn, Germany.Somogyi, Z., Henderson, F., & Conway, T. (1996b). execution algorithm Mercury,ecient purely declarative logic programming language. Journal Logic Programming, 29 (1{3), 17{64.Sterling, L., & Shapiro, E. (1994). Art Prolog (Second edition). MIT Press, Cambridge, MA.Tamaki, H., & Sato, T. (1984). Unfold/fold transformation logic programs. Tarnlund,S.-A. (Ed.), Proceedings Second International Conference Logic Programming, pp. 127{138, Uppsala, Sweden.Ullman, J. D., & Vardi, M. Y. (1988). complexity ordering subgoals. ProceedingsSeventh ACM SIGACT-SIGMOD Symposium Principles Database Systems,pp. 74{81, Austin, TX. ACM Press, New York.Ullman, J. D. (1982). Principles Database Systems. Computer Science Press, Rockville,MD.Vasak, T., & Potter, J. (1985). Metalogical control logic programs. Journal LogicProgramming, 2 (3), 203{220.Warren, D. H. D. (1981). Ecient processing interactive relational database queriesexpressed logic. Zaniola, & Delobel (Eds.), Proceedings 7th InternationalConference Large Data Bases, pp. 272{281, Cannes, France. IEEE ComputerSociety Press.97fi