	
 	


	"!$#%'&)(***,+-#.0/1((2

3,456782,9//:;4
!7<#*9*0*

=?>A@B@DCFEHGJILK$MONBPRQSTK$UVIWGYX[Z\XGYPHPHQP^]`_aYUcbedHP^f6ghUiaePHQj<K$Mlkm]YKJPonVI
QPlpqarPsC-@mK<nVK$UutvQPHQInuQf?@maetwGYQPhI

xzy8{W|~}VW|{V|{

F--o-<8 

}AW{VyW|}us|-L

'<Wo-<8 

V ¢¡F£¤¥£$¦§¨ª©« o,¥¬'V© ¥­¯®«¤)'°±0²)²³«¥[´L¥­¤)µ, ¶¤)·
¸ ¤)¶º¹, ®,»¬ ¸-¼¾½¿À½,ÁÂ"Á«ÃÄ½ ¬Y´¡ ¼

Å[Æ'Ç«ÈÉÊWËÈ
Ì6ÍÎÍ0ÏÐÑÓÒÕÔsÖ×ÍÑuÎØÍÎÙÚ³Ï­ÛÝÜÍÞÜÍ0ßÍÏÐáàÐÚÓÖÏâàÏ×ãßÍàÜÎØ[ÐÍÎØÏÚÓäåÍßeæuÍÜÍhßØÖæ6ÏçÐÖÝèÍ^Íé)ê
ë 0
Î Ú³Í0ÏÐÑÓÒçàÞÞÑÓÚÓÎàèÑÓÍeÐÖHÞÑ)àÏÏÚÓÏÛFìÚÓÏçÞFàÜÐÚ³Î0åÑ)àÜ§ÐÖÝÏÖ«Ïê"×ÍÐÍ0ÜÔsÚÓÏÚÓßÐÚÓÎeÞÑ)àÏÏ­Ú³Ï­ÛFíÝîªåÎØçÞÑ)àÏªê
ÏÚÓÏÛçàÞÞÜÖàÎØÍ0ßsåßÍÝï<Ü×ÍÜÍ×ñðuÚ³ÏàÜÒ[ò<ÍÎÚÓßÚÓÖÏ~ò<Ú)àÛ«ÜáàÔóßsôõ÷ö  ßøsÐÖÕÍÏÎÖ×ÍÕà±ÞÑ)àÏ­ÏÚÓÏÛ
×Ö«ÔhàÚ³Ï§àß8à<ÏÖÏê"×ÍÐÍÜÔóÚÓÏÚÓßÐÚÓÎ ë ÏÚÓÐÍ'àåÐÖ«ÔhàÐÖÏ§àÏ×eÐØÍ0ÏsàÞÞÑÓÒ$é"àßÐVàÑ³Û«ÖÜÚ³ÐØÔsß÷éÜÖ«ÔñÔsÖ×ÍÑ
ÎØÍÎÙÚÓÏÛçÐÖÕßÍàÜÎØùéÖÜsàzßÖÑÓåÐÚÓÖÏíâõ-ö  ßóÎàÏùÍúÍ0ÎÐÚÓûÍ0Ñ³Ò[ßÎàÑÓÍÝàÏ×~ÎàÏ~ÞÜÖûÚÓ×Í^åÏÚÓû«ÍÜ"ê
ßàÑWÞÑ)àÏßéÖÜ<ÎÖÔóÞÑÓÍüsÞ­ÑýàÏÏÚÓÏÛe×Ö«ÔhàÚ³Ï­ßíuþÕÍoàÜÍoÞàÜÐÚÓÎåÑ)àÜÑ³Ò^ÚÓÏÐÍÜÍßÐÍ×ÕÚÓÏHà××ÜÍßßÚÓÏÛ^ÐØÍ
ÎÖ«ÔsÞÑÓÍüÚÓÐÚÓÍß6àÜÚÓßÚÓÏÛeÚÓÏ^ÏÖÏê"×ÍÐÍÜÔóÚÓÏÚÓßÐÚÓÎì­ÔeåÑÓÐÚÿêàÛÍ0ÏÐi×ÖÔ^àÚÓÏß
í "ÏRÐØÚÓß'àÜÐÚÓÎÑÓÍìæuÍ Þ­ÜÍßÍÏÐ
- 
õ ìà$Ï­Íæ~åÏÚÓû«ÍÜßàÑ-õ-ö  ê"èFàßÍ×^ÞÑ)àÏ­ÏÚÓÏÛ<éÜáàÔsÍæuÖÜÙ$éÖÜiÏÖÏê"×ÍÐÍÜÔóÚÓÏÚÓßÐÚÓÎìÔeåÑÓÐÚÿê¨àÛÍÏÐ
¦  ìVÐÖÝßÞFÍÎ0Ú éÒ
×Ö«ÔhàÚ³Ï­ßíHþÕÍóÚÓÏÐÜÖ×åÎ0Í àRÏÍæAÞÑ)àÏ­ÏÚÓÏÛH×Ö«ÔhàÚÓÏ±×ÍßÎÜÚÓÞÐÚ³Ö«ÏçÑ)àÏ­ÛåFàÛÍ
ì ¼ 
ÏÖ«Ïê"×ÍÐÍ0ÜÔsÚÓÏÚÓßÐÚÓÎì-ÔeåÑÓÐÚ êàÛ«ÍÏÐ6×ÖÔ^àÚÓÏß,	
í 6ØÍóÑýàÏÛåàÛÍJÎÖÏÐÜÚÓèåÐÍ0ßoÐØÍeÍüÞÑÓÚÓÎÚÓÐ ×­Í ë ÏÚÓÐÚÓÖ«Ï
ÖéLÎÖ«ÏÐÜÖ«Ñ³Ñ)àèÑÓÍ'àÛÍ0ÏÐß'àÏ×óåÏÎÖ«ÏÐÜÖ«ÑÓÑýàèÑÓÍ'ÍÏûÚÓÜÖ«ÏÔsÍÏÐ8àÛÍÏÐßíVþÕÍ<×ÍßÎÜÚÓèÍ§ÐØÍ$ßÒÏÐàüsàÏ­×
¦  àÏ×ÕßØ­Öæ ØÖæ\ÐÖ±èåÚÓÑÓ×çàÏã
ßÍÔhàÏÐÚÓÎß§Ö	
é F¼ 

Í sÎÚÓÍÏÐTõ÷ö  ê"èFàßÍ×[ÜÍÞ­ÜÍßÍÏÐáàÐÚÓÖÏ[Öé àÏ
¦  àÏ×±×ÚÿúÍ0ÜÍÏÐ§õ-ö  ê¯èFàßÍ×±åÏÚÿê
¼ ¦  ×ÍßÎÜÚÓÞÐÚ³Ö«Ï	
í 6Ø­Í - 
õ ±ÞÑ)àÏÏÚÓÏÛeßÒßÐÍ0Ômå­ßÍ	
ß ¼ 

û«ÍÜßàÑVÞÑ)àÏÏÚÓÏÛsàÑÓÛ«ÖÜÚÓÐØÔsß,
í "Ð'ÚÓÏÎÑÓå×­Íß$ÐØÍYÞÜÍ0ûÚÓÖ«åßÑÓÒH×Í0ûÍÑÓÖÞÍ×±ßÐÜÖÏ­Û àÏ×HßÐÜÖ«ÏÛ^ÎÒÎÑÓÚÓÎ
ÞÑ)àÏÏÚÓÏÛÕàÑÓÛÖ«ÜÚÓÐØÔóß
í "Ïà××ÚÓÐÚÓÖ«ÏìVæuÍHÚÓÏÐÜÖ×å­ÎÍHÖå­ÜsÏÍæ Ö«ÞÐÚÓÔóÚ³ßÐÚÓÎeÞÑ)àÏ­ÏÚÓÏÛçàÑÓÛÖ«ÜÚÓÐØ­Ô
ÐØFàÐVÜÍÑ)àüÍßVÖ«ÞÐÚÓÔ^àÑÓÚÓÐ"Ò'ÛåàÜáàÏÐÍÍßuàÏ×eÛ«ÍÏÍÜàÐÍ0ß8ÞÑ)àåßÚÓèÑÓÍuåÏÚÓûÍÜßáàÑÞÑ)àÏßiÚ³ÏYßÖ«ÔsÍu×ÖÔ^àÚÓÏß
æ6ØÍ0ÜÍsÏ­ÖHßÐÜÖÏ­ÛHÏÖÜJßÐÜÖÏÛRÎÒÎÑÓÚ³ÎeßÖÑÓåÐÚ³Ö«ÏÝÍ0üÚÓßÐßí^þÕÍeÞ­ÜÍßÍÏÐoÍÔóÞÚÓÜÚÓÎàÑLÜÍßå­Ñ³ÐßTàÞÞÑÓÒÚÓÏÛ
- 
õ sÐÖ$×ÖÔ^àÚÓÏßÜàÏÛ«ÚÓÏÛ<éÜÖ«Ô ×ÍÐÍÜÔóÚÓÏÚÓßÐÚÓÎ6àÏ×YßÚÓÏÛ«ÑÓÍê¨àÛÍÏÐVæ6ÚÓÐØoÏÖ$ÍÏûÚÓÜÖ«ÏÔsÍÏÐVàÎ0ÐÚÓÖÏß
ÐÖsÏÖ«Ïê¯×­ÍÐÍÜÔsÚÓÏÚÓßÐÚÓÎoàÏ×RÔeåÑÓÐÚÿê¨àÛÍÏÐVæ6ÚÓÐØHÎÖÔóÞÑÓÍüsÍ0ÏûÚÓÜÖ«ÏÔsÍ0ÏÐ'àÎÐÚÓÖ«Ïß
í   
õ ±ÚÓß'ßØ­Öæ6Ï
ÐÖeèFÍ§àYÜÚÓÎØHàÏ×^Í sÎ0Ú³Í0ÏÐ6Þ­ÑýàÏÏÚÓÏÛYßÒßÐÍÔÝí

 ÈÉ'ËÈ 
 " !$#%#'&)(*!+-,."!//.&"/.01&2/4356378#9;:.7<!=.9%5?>@!$9%&6(A047*/.7*B%!$9%&65?/C5$DE!$(89%&65?/.#9%5F9;B%!37*B#%7G!H#%9;!$9'7A#;,!+(87<9%5
!$(8:.&67837F#;,78(8&JI(C05?!$#'9;!$9%78#*KMLE!BN&)5.=.#<!$605?B&69;:>F#<:!37FO787*/P783478)5.,78PQ9%51!$PPB78#'#G9;:.7F#%9;!$9%7SR
!$(89%&65?/TB7*,B78#%7*/49;!$9'&)5./U!/.PT9;:.7<#%7*!4B(V:WDX5.B	!$(89%&65?/.#*K	YZB%!$P&69%&65?/!+)6[T9;:.78#%7!$605?B&69;:>\#A:!37]O^787*/
(8"!$#%#%&JI78P!$(8(85?BP&"/.0F9%5<9S:.78&2B_#%7*!B(8:#S,!$(87`BN7*,B78#%7*/49;!$9%&65?/C!$#E78&69;:.7*B_#%9;!$9%7SR#S,!$(87`,."!//.7*BN#]ab7Kc0Ked
fghZijbkl d	L7865#%5m7891!$nK"dGo*pp4qrF5?BC,."!/4R#;,!$(87Q,."!//.7*B#mab7Kc0K"d st fhZf dAuZ7*/.O7*B9;:4[wvyxz78)Pd
o*pp4{r8K
|}/.78~B78#%7*!BN(V:@9;B7*/.P1:!$#AO^787*/C9%5FP7837865?,1/.78~7*/.(85.P&2/.04#A5$D,.2!4//.&2/.01,B5?O.67*>F#&2/C5.BP7*B
9%5!$P5?,.97S(8&67*/9A!+)045?B&69;:>F# DB5?>59S:.7*B	B78#%7*!BN(V:C!B7*!$#d?67*!$P&"/.0C9%5#%&60?/.&JI(*!/49	P7837865?,>\7*/9%#
&"/,.2!4//.&2/.0w!+)045?B&69;:>F#*d	!+##;=BN378[78PO4[mxQ786Pao*pp4pr8KwY	:.&6#1(8"!$#%#C5$D<,."!//.&"/.0!$605?BN&)9S:>F#
&"/.(8"=.P78# k-g
-ff$- an"=>v=BN#%9*dEoppr9;:!$9F=.#%78#]!W5~_R0?B%!,:7*/.(85.P&"/.09%5U(85?/.#'9;B%!$&"/
9;:.7H#%7*!B(8:!/.P f+- aG!=.9%]v.78">!/doppr 9S:!$9A7*/.(85.P78#G9;:.7F,.2!4//.&2/.0,B5?O.67*>y!$#G!
#;!$9'&)#NI!O.&6)&69[,BN5?O.67*>!/.P=.#'78# D!+#%9A>F5.P78#;!$9'&)#ND!$(89'&)5./1!$605?B&69;:>F#9%5FI/.P!H#%542=.9'&)5./K
e (**0*8- 7	V	7¡$0	¢W	,³56	£4
!¤

!,Fb¥7$¤

¦

0¨§ª©J« õ  õ

¬ 78(87*/9%6[d!/.59S:.7*B/.78~w,.2!4//.7*B®­M¯ f an &">!$9%9'&?789E!$nK"doppr~	!$#&"/9;BN5?P=.(878P9S:!$97*/.(85?P78# !
,."!//.&"/.0P5?>!+&2/@!$#®!H/.5?/4RP789%7*B%>F&"/.&6#%9%&6(MI/.&69%7G!=.9%5?>@!$9%5?/1an°|`rBN7*,B78#%7*/49%78PWO4[!/±GBP7*BN78P
&"/!B[Q²G78(8&6#%&65?/¨²G&"!$0?B'!>³a h ¯ ii dE B[?!/49*d o*p´4r8K1µ/z(85?/49;B%!$#%9H9%5U9S:.7W,B783.&65?=.#!$605?B&69;:>\#*d
­M¯ f 7S¶78(89%&63786[U78·.9%7*/.P#H9%5W/.5./4RP789%7*B%>F&"/.&6#%9%&6(CP5?>!$&"/.#],BN5?P=.(8&"/.0=/.&637*BN#;!$E,."!/.#]!+#`B5.O=.#%9
#%5"=.9%&65?/.#K²<=.7 9%5A9S:.7	#%(*!$"!O.&66&69¸[F5$D9;:.7	=/.P7*B6[?&"/.0>\5?P78(8:.78(V¹4&"/.0]B7*,BN78#%7*/9S!$9%&65?/F!/.PF#%7*!B(8:
9%78(8:/.&6º»=.78#*d^&)9(*!/O^7G#;:.5$~A/@9%5O7<!H37*B[7SC(8&)7*/49A/.5?/4RP789'7*B%>F&"/.&6#%9%&6(],."!//.7*B<a &">!$9%9%&
789	!$nK"d
o*pp4´!dopp´Or8K
±G/.75$D5?=B>!$&"/B78#'7*!B(8:F5?O.¼78(89%&6378#&6# 9%5GP7837865?,,."!//.&"/.0#%[.#%9%7*>\##;=.&69;!O.67	Dn5?B,."!//.&"/.0
&"/=/.(87*B9;!+&2/d.#%&"/.067d.5?B>F=.69%&JR¸!$07*/49E7*/43?&"B5./>F7*/9'#Aan½A!+&)0.:vL7865#%5d
o*pp´^¾$L78)54#%5<789E!$nK"dopp´¾
.9%5?/.7vL7865#'5dEo*p4p´r8K<Y:.7\=/.&637*BN#;!$®,."!//.&"/.0Q!,,B5.!$(V:d!+#G5?B&60&"/!$66[QP7837865?,78Pan.(8:.5?,4R
,7*BN#*do*p´4r8d&6#<!,,^7*!$6&"/.0UDn5?B9;:.&6#<9[,7F5$DE7*/43?&"B5?/>\7*/9%#K<|=/.&)347*B#;!$E,."!/T&6#]!@#%789G5$D #%9;!$9%7SR
!$(89%&65?/B%=.678#H9;:!$9G!$&">y!$9G(85$37*B&"/.019;:.7,5#'#%&"O.)71>F=.69%&",.)7@#%&69;=!$9%&65?/.#H&2/¿9;:.7/.5?/4RP789%7*B%>F&"/.&6#%9%&6(
7*/43?&"B5?/>\7*/9*K|=/.&637*B#;!+-,."!/1&6#M78·?78(*=.9%78PQO4[&"/49%7*B67*!3?&"/.019;:.7H#%78678(89%&65?/15+DÀ!/T!$(89%&65?/Á&2/Á9;:.7
,."!/w!4/.Pw5?O.#%7*BN3?&"/.0¨9;:.7B78#S=.)9'&2/.0¨7S¶78(89%#&"/Â9;:.71~ 5?B6PKÃA/.&637*B#S!$A,."!//.&"/.0B78#'7*>]O.678#C9;:.7
5?=.9%(85.>F7<5$D®BN78&2/4Dn5?B(87*>\7*/9G67*!B%/.&"/.0Äan=.9'9%5?/Uv !B9'5do*pp4´r8d&"/T9;:!$9M9;:.7<#'9;!$9%7SR¸!$(89'&)5./U>F5.P78
(*!,.9;=BN78#-9;:.7 =/.(87*B9;!$&"/49[A5$D9S:.7E~ 5?B6PK-ÃM/.&637*B#;!+»,."!//.&"/.0G&6#Å!M,B78(*=B#'5?B!,,B5.!$(V:d # ~A:.7*B7 !$6
,."!//.&"/.0&6#	P5?/.7G,B&65?B9%5<78·.78(*=.9%&65?/dO=.&66P&"/.0W=,^5?/@9;:.7`!+#%#;=>,.9%&65?/@9;:!$9 !F/.5?/4RP789%7*B%>F&"/.&6#%9%&6(
>F5.P785$D-9S:.7G78·?78(*=.9%&65?/Á7*/3.&"B5?/>F7*/49	(*!/1O^7]!$(8º=.&"B78Pd!/.P167*!$P&"/.0C9;:.7*B7SDn5?B7G9%5!F#'5?=/.PU!/.P
(85?>,.6789%7F,."!//.&"/.0U!,,B5?!$(8:K
½5$~ 7837*B8d=/.&637*B#;!$,."!//.&"/.0:!$#MO787*/T(*B&69%&6(8&6878Pab7Kc0KedÆG&"/.#;O^7*B0dZo*p´prÇd?P=.7F9%5C!,59'7*/4R
9%&"!$78·,5./.7*/9%&"!$Z0?B5$~	9S:5$DZ9;:.7]=/.&637*B#S!$-,."!/1#'&)87H~	&69;:19S:.7</?=>FO7*B5$DÅ,BN5?,5#'&)9'&)5./.#AP7SI/.&"/.0
!CP5?>!+&2/¿#%9;!$9%7KÈ|`/T&">,5.B9;!/49G(85?/49;B&"O=.9%&65?/5$D	­A¯ f &6#G9;:.=.#<9;:.7=.#%7F5$D h ¯ ii #<9'5UB7*,B78#%7*/49
=/.&637*B#;!+,."!/.#*KEµÉ/F9;:.7	~ 5?BN#%9(*!$#%7d49;:.&6#®B7*,B78#'7*/9;!+9%&65?/>![]!+)#'5<0?B5$~m78·,5?/.7*/49%&"!$66[~&)9S:F9;:.7
/.=>]O^7*BF5$D	P5?>!+&2/m,BN5?,5#'&)9'&)5./.#*d®O=.9O^78(*!=.#%7 h ¯ ii #C!B7C37*B[Q(85?>@,!$(89B7*,B78#%7*/49;!$9%&65?/.#F5$D
O5.567*!/ÁD=/.(89%&65?/.#*d
9;:.&6#A&6#M5$DX9'7*/1/.59A9S:.7G(*!$#%7GDn5?B P5.>!$&"/.#A~&)9S:U!B780.=.2!4B	#%9SB%=.(89;=B7an_&2>@!$9%9%&
789<!$nK"dZo*pp´4!r8KAY:.7*B7SDX5.B7d h ¯ ii R¸O!$#'78PÄ,."!//.&"/.0U#%787*>F#G9'5WO^7\!1,BN5?>F&6#%&"/.0U!,,B5?!+(V:T9%51=/.&JR
37*B#S!$,.2!4//.&2/.0
K
Ê ¯ f #;,^78(8&ËI78#C!U,."!//.&"/.0QP5?>!+&2/¿&2/z9;:.7!+(89%&65?/P78#%(*B&",.9%&65?/¨"!/.0.=!$07ÌHÍÎaÆG&"=/.(V:.&606&"!
789!$nK"dMo*pp4rF!/.Pm9;B%!/.#'2!+9%78#&699%5Ä!¿(85?B%B78#;,^5?/.P&"/.0Ï°|FdÅ:.7*/.(87T6&2>\&)9'78P9'5Ä,."!//.&"/.0w,B5?O4R
67*>F#F~	&69;:¿I/.&)9'71#%9;!$9%7@#;,!$(878#*KUY:.79;B'!/.#%&69%&65?/¨B78"!$9%&65?/z5$DA9;:.7!4=.9%5?>!$9'5?/&6#F7*/.(85?P78Pw!$#F!/
h ¯ ii 9;:!$9E!+)65$~	#ÀDX5?BZ9S:.7A=.#%7	5$D7S(8&67*/9	OB7*!+P9;:4RnIB#%9#%7*!B(8:H9%78(V:/.&6º=.78# P7837865?,78PCDn5?B>F5.P78
(8:.78(V¹4&"/.0abÐ(8Ð&66"!/doppÑr8K Ê ¯ f &2/.(8"=.P78# 9~ 5A!$605?B&69;:>\#Dn5?BZ=/.&)347*B#;!$,."!//.&"/.0KEY	:.7MÒ8ÓnÔ¸Õ4Ö×
ØÙ6Ú Ö
ÖÛbÖ×G!$605?B&69;:>9SB&678#	9%507*/.7*B'!$9%7G!,."!/19;:!+9®&6#	0.=!B%!/49%7878P19%5!$(8:.&67837<9;:.7G045?!$Dn5?B	!+)5$D
9;:.7,^5#%#%&"O.6715?=.9%(85.>F78#<5$D	9;:.7C/.5?/4RP789%7*B%>F&"/.&6#%9%&6(!$(89%&65?/.#*K1µbDA/.5T#;=.(V:z#%9;BN5?/.01#%5"=.9%&65?/z78·?&6#%9'#*d
9;:.7!$605?BN&)9S:>D!$&66#*K<Y:.7Ò8ÓnÔÕÖ×TÜ*Ý$Ü Ù ÛbÜ ØÙ6Ú Ö
ÖÛbÖ×F!$605?B&69;:>yB789S=B%/.#`!C#'9;B5?/.0C#%5"=.9%&65?/d&ËD 5?/.7
78·.&)#'9%#*dZ5?BG549;:.7*B~	&6#%79SB&678#]9'5U07*/.7*B%!+9%7!U,."!/z9;:!$9F>![U(85?/49;!$&"/z65?5?,.#FO=.9F&)#F0?=!4B%!/49%7878PQ9%5
!$(8:.&678379S:.705.!$nd-04&)347*/Q9;:!+9]!$6E(8[.(86&6(178·?78(*=.9%&65?/.#@7837*/9S=!$6)[¨9%7*B%>\&2/!+9%7KUµbDA/.5#;=.(8:Q#'9;B5?/.0
(8[.(8)&6(F#%5"=.9%&65?/Á78·?&6#%9'#*d9;:.7G#%9SB5?/.0(8[.(86&)(,."!//.&"/.0U!$605?BN&)9S:>D!+&)6#*K
µÉ/m9;:.&6#1!B9%&6(867U~ 7U,B78#'7*/9C5?=B h ¯ ii R¸O!$#%78P,."!//.&"/.0m#%[?#'9%7*>1d s­ hZf aÃA/.&637*B#S!$	ÐQ=.69%&JR
!$07*/49UÞ<¯ ii R¸O!$#'78PßuÀ"!//.7*B%r8d 9;:!+9\=.#'78#W!Q/.78~ h ¯ ii R¸O!$#%78P7*/.(85.P&"/.0d	07*/.7*B'!$9%78#=/.&637*B#S!$
,."!/.#G&"/>]=.69%&JR¸!$047*/9G/.5?/4RP789%7*B%>\&2/.&6#%9'&)(@P5?>!$&"/.#*d!/.PU&"/.(8"=.P78#!/.78~yà%5?,.9'&2>\&)#'9%&6(8áW,."!//.&"/.0
!$605?BN&)9S:>1K
âSãäåæ çnæÉèémê?ëbìí'î*ënïð8ëñ'ènòËó'òcôõSçnæ¸öòcôF÷-æõ'ô\æçZõ%ø"ã
ùnâ¸úSú8û;üòcôFý¸ñ'ô*çbèõSönççnñ]ëbìí%îëëbì%þ$ÿõèñ;õSýnå$æ¸öçbåõSçZèæ*øËõ'ô\çnñ
èæý¸ñ;æÉè)èñSé¨æ8æý	çbòËñ'ô
"õ'òcø	*èæöã


 ö 0



)-  
« -«  -)

±G=BÈ5$37*B%!$6E!,,B5.!$(V:DX5?BMP78#'&)0./.&2/.0¨!/ h ¯ ii R¸O!+#%78Pw,."!//.7*BH&)#H#%&">F&6"!BF9%519;:.7C!,,B5?!$(8:
P7837865?,^78PFDX5.B­A¯ f K±G=B>!$&"/G(85?/49;B&"O=.9%&65?/H&6#E!/È7S(8&67*/9Z7*/.(85?P&"/.0H5$D!	/.78~¨DB5?/497*/.PFP5?>!$&"/
P78#%(*B&",.9%&65?/C"!/.0.=!$07d"!#ßan°5?/4RP789%7*B'>F&"/.&)#'9%&6(G|A07*/49E²G5.>!$&"/%$!/.0?=!$07*rÇK&"!'#m:!$#®>\5?B7
B78#%7*>FO."!/.(87T~	&69;:w,B783.&65?=.#1,.2!4//.&2/.0¨"!/.0?=!$0478#9;:!4/¨9;:.7U!$(89%&65?/¨P78#%(*BN&2,.9'&)5./w"!/.0.=!$071Ì<Í
(*=B%B7*/49%6[m=.#%78PwO[¨­A¯ f KÏµ9:!$#,5$~ 7*BÉD=.®!$(89'&)5./¨P78#%(*B&",.9%&65?/.#C9;:!$9F(*!/¨,7*BÉDn5?B%> !B&69;:>\789%&6(
5?,^7*B%!$9%&65?/.#M5?/1/.=>F7*B&6(*!$ZP5?>!$&"/13$!B&"!O.678#*K ²G5?>@!$&"/.#A(85?>@,B&6#%78PU5$D#%[/.(V:BN5?/.&6878P¿!+07*/9'#	(*!/
O7G>F5.P786)78PUO4[F&"/9;BN5?P=.(8&"/.0F(85?/.(*=B%B7*/49®!+(89%&65?/.#®O!$#'78P5?/@!<>F=.69%&JR¸!$07*/49EP78(85?>,^5#%&69%&65?/@5$D9;:.7
P5?>!+&2/K
µÉ/Q!$PP&69%&65?/
d "!#Q&"/9;BN5?P=.(878#!1#'7*,!B%!$9%7!/.Pz78·»,.6&6(8&697*/3.&"B5?/>F7*/49>F5.P78P7SI/.78Pw!$#<!
#%789H5$)
D (.ÖÜSÕÖÓnÔÕ ÙbÙ6+Ú *8-Ù , !$047*/9%#d&nKc7K"dE!+07*/9'#G~A:.5#%71!$(89%&65?/.#F(*!//.59FO7U!T,!B9<5+D_9S:.707*/.7*B'!$9%78P
,."!/.
K /"!#Ï:!+#AO787*/T(*!B7SD=.66[1P78#%&60?/.78P9%5!$665$~DX5.B 7S(8&67*/9 h ¯ ii R7*/.(85.P&"/.0KAY:?=.#*d
s­ hZf
(85?/49;B&"O=.9%78#G!F,!B9%&69%&65?/.78P9;B%!4/.#%&69%&65?/1B78"!$9%&65?/TB7*,B78#%7*/49;!$9%&65?/C5+DÅ9;:.7<°|}9;:!$9	&6#G¹?/.5$~A/@DB5?>
>F5.P78E(8:.78(V¹4&"/.09%5U#%(*!+)71=,z~®786Gan =B(V:¿789]!$nK"d o*pp^o¾ ¬ !4/¼N!/z789]!+XKed®oppqr8K±G=BH7*>,.&"B&6(*!$
78·,7*B&">F7*/49%#M#;=.0078#%99;:!$9 9;:.&6#A&6#G!$6#%59;:.7G(*!+#%7MDX5.B	s­ h-f K
0 ­ h-f &2/.(8"=.P78#M9;:.7A,B783.&65?=.#%6[CP7837865?,78PU!$605.B&69;:>F#Dn5?B h ¯ ii R¸O!$#%78PU=/.&637*B#;!+,."!//.&"/.0K
µ/m!+PP&)9'&)5./dE~ 7C&2/49;B5.P=.(87U!/.78~ à%5?,.9%&">F&6#%9%&6(8áÄ,."!//.&"/.0m!$605?B&69;:> 9;:!+9\BN782!+·?78#F5?,.9%&">!+)&69[
0?=!B'!/9'7878#A!/.P07*/.7*B%!$9'78#`,."!=.#%&"O.671=/.&)347*B#;!$,."!/.#G&"/UP5.>!$&"/.#G~A:.7*B7F/.51#%9;B5?/.0C/.5?B	#'9;B5?/.0
(8[.(8)&6(F#%5"=.9%&65?/Á78·?&6#%9'#*K
Y:.7<!B9%&6(867G&6#	5?B0?!4/.&)878PU!+# DX54)65$~	#*K.78(89%&65?/T{HP&)#'(*=.#%#%78#G,B783?&65?=.#G!,,B5.!$(V:.78# 9%5,."!//.&"/.0
&"/Q/.5?/4RP789%7*B'>F&"/.&)#'9%&6(P5?>@!$&"/.#*K].78(89'&)5./QÑ04&)3478#<!1OB&67SD_5$37*BN3?&678~ 5$D h ¯ ii #]!/.PQ°|7*/.(85.P.R
&"/.0#*K µn9A>@!*[1O7H#;¹4&2,,^78PQO[UB7*!+P7*B#A!$"B7*!$P[CD!>F&66&"!B~	&69;:19;:.7G#S=O.¼¸78(89K®.78(89%&65?2
/ 1&"/9SB5?P=.(878#
"!'#d#;:.5$~	#:.5$~9'57*/.(85.P7U!,."!//.&"/.0Ä,B5?O.67*>1d !/.PzDX5?B'>!$66[QP78#%(*B&"O78#C9;:.7C#%[/9;!+·Ä!/.P
#%7*>!4/9%&6(8#5$D9;:.&6# P78#%(*B&",.9%&65?/@"!/.0?=!$047	&"/9%7*B'>F#5$D-!/°|]K$xz7A!$6#%5<P&6#%(*=.#'#®9S:.7A,B5?,^7*B9%&678#E5$D
9;:.7G"!/.0?=!+07<O!$#%78P15?/C!/C78·!>,.67<!/.PU!BN0?=.7MDX5.BE5.=BEP78#'&)0./1(8:.5&6(878#*KE.78(89%&65?/Tq],BN78#%7*/9'#	9;:.7
D "!#QP5?>!$&"/TP78#%(*B&",.9%&65?/.#K].78(89%&65?/zP78#%(*BN&2O^78#<9;:.7FP&J¶7*B7*/49<!$605$R
h ¯ ii B7*,B78#%7*/49;!$9%&65?/Á5$
B&69;:>F#9S:!$9Å:!37 O787*/=.#'78P<Dn5?B h ¯ ii R¸O!$#'78P,."!//.&"/.0\!4/.P<&"/9SB5?P=.(878#5?=B5?,.9%&">F&6#%9%&6(A,."!//.&"/.0
!$605?BN&)9S:>1K<.78(89%&65?/QC,B78#%7*/49%#G7*>,.&"B&6(*!$ B78#;=.69%#G&"/#%78347*B%!$,.2!4//.&2/.0TP5?>!$&"/.#*dZB%!/.0&"/.0CDB5?>
#%&"/.067SR¸!$07*/49<!/.P1P789%7*B'>F&"/.&)#'9%&6(5?/.78#M9%5>F=.69%&JR¸!$07*/49`!/.P/.5?/4RP789%7*B%>\&2/.&6#%9'&)(@5?/.78#*K xQ7H78·»,^7*B&JR
>F7*/49E~	&69;:C,B783.&65?=.#%6[W=.#'78PP5?>@!$&"/.#_!4/.P&"/49;B5.P=.(87G9¸~ 5</.78~5?/.78#*d./!>F786[1!<,5$~ 7*BE,."!/49	!/.P
!1#'5?(8(87*BÈP5?>!$&"/d!$#</.5?/4RP789%7*B'>F&"/.&)#'9%&6(d®>F=.69%&JR¸!$07*/49],."!//.&"/.0Ä,B5.O.)7*>\#*K&"/!$66[dE.78(89%&65?/¨´
PB%!~	# (85?/.(8"=.#%&65?/.#<!/.PTP&6#%(*=.#%#%78#MP&"B78(89%&65?/.#MDn5?BÀD=.9;=BN7G~®5.B%¹K
 9
3-54768 ÊÈ 6 :

VÉ<;

¬ 87 (*=B%BN7*/9!4,,B5?!$(8:.78#],^7*BÉDX5.B%>F&"/.0Ä,."!//.&"/.0Q&"/9'7*B67*!*3478Pm5?BH&2/¨,!B%!+)678	~&)9S:Q78·.78(*=.9%&65?/m:!37
O787*/@~	&6P786[W=.#'78P&"/C/.5?/4RP789%7*B%>F&"/.&6#%9%&6(FB5?O549%&6(	P5?>!$&"/.#<ab7Kc0
K"dÆG785?BN07S¶Áv=$!/.#;¹4[do*p´¾ÆH!$9*d
o*pp4{¾*x&6"¹&"/.# 789E!$nK"do*p4>p 1¾$½A!$&60?:@vwL7865#'5do*pp´4r8K|Â0?B5?=,È5$D,."!//.7*B##;=.&69;!O.67 Dn5?BZB78(*=B%B7*/49
,."!//.&"/.0G&6#E!$(89%&65?/G#'78)78(89'5?B#O!$#%78P<5./G:.7*=B&6#%9%&6(	#%7*!BN(V:anM5.7*/.&60<vw.&">>F5./.#*d?oppq¾$5?/.789-789Z!$nK"d
o*pp4r8K-Y:.7`>F&"/4R¸>!+· g4?&? !$605?B&69;:>yanM5.7*/.&60v.&">>F5./.#*do*ppq¾>\&2B'/.53@789®!$nK"do*pp4rZ(*!/
07*/.7*B%!+9%7#S=O5?,.9%&">!+A,."!/.#&"/m/.5?/4RP789'7*B%>F&"/.&6#%9%&6(P5?>!$&"/.#9;:BN5?=.0?:¨!#%7*!B(8:¨!/.Pm78·?78(*=.9'&)5./
&69%7*B%!$9'&)5./KAY	:.7H#%7*!B(8:1&6#GO!$#%78PU5./U!C:.7*=B&6#%9%&6(F05?!$P&6#%9S!/.(87HD=/.(89%&65?/T9;:!+9A>F=.#%9AO7,B5$3.&6P78P
Dn5?B!#;,^78(8&JI(¿,BN5?O.67*>1KwY	:.7   f !$605.B&69;:> an5?/.7897891!$nK"dMo*pp4r<=.#%78#1!#%&">F&6"!BC!,,B5?!$(8:
!/.P¨D=B9;:.7*BFP7SI/.78#1!Q:.7*=B&6#%9'&)(ÁD=/.(89'&)5./¨Dn5?A
B @CB)DFEHGI@»R)&"¹$7mab&"¹$78#vy°&6)#'#%5?/dGo*p^o*rF!$(89%&65?/
B7*,B78#'7*/9;!+9%&65?/.#*K<µÉ/(85?/49;B%!$#%9M9%51>F&"/4R¸>!$· g4?J
 ? d   f P5.78#</.59<!$#%#S=>F7!1/.5?/4RP789%7*B%>F&"/.&6#%9%&6(
K

¦

0¨§ª©J« õ  õ

7*/43?&"B5?/>\7*/9*dO=.9H&)#FB5?O=.#%9H9%5/.5./4RP789%7*B%>F&"/.&6#;> (*!=.#%78PmO[Q!$(89'&)5./Q,7*B9S=B%O!$9%&65?/.#Uab&nKc7K"d9;:!$9
!/.59S:.7*B	!$(89%&65?/C9;:!4/C9;:.7],."!//.78P!$(89%&65?/1&6#	(8:.5#%7*/Á~	&69;:C#%5?>\7<,B5?O!O.&66&69¸[r8K
µÉ/T07*/.7*B%!$nd-BN78(*=B%B7*/49<!,,B5?!$(8:.78#<!B7H&"/.(85?>,.6789%71O78(*!=.#%7C!$(89%&"/.015?/!/T&"/.(85?>,.6789%71,.2!4/
(*!/C>!¹$7 9;:.7M05?!+=/!$(V:.&6783$!O.67K	uEB78(*=B#'5?BE!,,BN5?!$(8:.78#®,7*B¸DX5?B'>!$6P78(8&6#%&65?/T>!¹4&"/.0],B&65?B9%5
78·.78(*=.9%&65?/U!/.P19S:?=.#	>![O^7<!O.67<9%5F07*/.7*B%!+9%7A(85.>,.6789%7<,."!/.#`O4[9;!4¹&"/.0!$6-,^5#%#%&"O.67<7S¶78(89%# 5$D
!$(89%&65?/.#&2/49%5!+(8(85?=/9KE½	5$~ 7837*B8d.9;:.78[1B786[15?/1!F(85.>,.6789%7]>F5.P785$D9;:.7G~ 5?B6M
P Lc#M=/.(87*B9;!$&"/49¸[K
Y:.7A,B78(*=B#%5.B®!4,,B5?!$(8:.78#E&"/.(8"=.P7<(85?/.P&69%&65?/!+®Oa N9'8&)5./.&789®!+XKedopp{¾uZ7859 v>\&)9S:dopp{¾
6[?9;:.7¨v L7865#%5dFo*pp4r8d	,B5?O!4O.&)6&6#%9%&6(ab²<B'=>>F5?/.Pv  B78#%&"/!dFo*pKp P^¾G²G7*!/Â789U!$nK"d<oppq¾
6[?9;:.7do*pp´4rA!/.P¨=/.&)347*B#;!$E,."!//.&"/.0wan.(8:.5?,,7*B#dEo*p´4¾ &">!$9%9'&-789<!$nK"dopp´!dZo*pp4´O¾G!R
O!/.*!F789M!$nK"do*pp4r8K
5?B 78·!>,.67d9;:.7Ft f ,!B9'&2!+5?BP7*B8d.(85?/.P&69%&65?/!+Å,."!//.7*BM:!/.P678#</.5?/4R
P789%7*B%>\&2/.&6#;> O[Q(85./.#%9;B%=.(89%&"/.0Q!T(85?/.P&69%&65?/!$	,."!/¨9;:!$9F!$(8(85?=/49%#HDX5.BG7*!$(8:Ä,^5#%#%&"O.67U#'&)9S=!$9%&65?/
5?B(85?/49%&"/.07*/.(8[U9;:!+9A(85?=.6PQ!B&6#%7UanuZ78549`v>F&69;:do*pp{4r8K	|	9M78·.78(*=.9%&65?/T9%&">F7F&)9G&6#GP789%7*B'>F&"/.78P
~A:.&6(8:Ä,!BN9G5$D	9;:.7,."!/z9%5178·?78(*=.9'7WO4[Q,7*BÉDn5?B%>F&"/.0T#%7*/.#%&"/.0Q!$(89%&65?/.#<9S:!$9]!BN7]&"/.(8"=.P78Pw&"/z9;:.7
,."!/19'59%78#%9Dn5?B 9;:.7<!,,BN5?,B&"!$9%7G(85?/.P&69%&65?/.#K
uB5?O!O.&66&6#%9%&6(],."!//.7*BN#A9;BN[9%5>!+·?&">F&687<9S:.7<,B5?O!O.&66&69¸[15+DÅ05.!$#;!$9%&6#D!$(89%&65?/d.0&637*/Á(85?/.P&JR
9%&65?/!$Z!$(89%&65?/.#M~	&69;:U,B5.O!O.&6)&6#%9'&)(@7S¶78(89'#*KE²<B'=>>F5?/.PU!/.P B78#%&"/!aNo*pKp Pr B7*,BN78#%7*/9G,."!/.#G!$#
!@#%789	5$D®.&69;=!$9'78P¿_5?/9SB5 ¬ =.678#an ¬ #Sr]ab²<B'=>>F5?/.Pdop´pr	>@!,,.&"/.01#%&69;=!$9%&65?/.#M9%5!$(89'&)5./.#*K
Y	:.7,."!//.&"/.0Ä!+)045?B&69;:>yO7804&2/.#O4[Q!$PP&"/.0¿ ¬ #<(85?B'B78#;,5./.P&2/.09%519S:.7>F5#%9<,BN5?O!O.6778·.7SR
(*=.9%&65?/,!$9;:Á9;:!$9A!+(V:.&678378#G9;:.7H05?!$nK	µ9A9;:.7*/Á(85?/49%&"/?=.78#<!$PP&"/.0U ¬ #	Dn5?B)78#'#`,B5.O!O.67\,!+9;:.#
!/.PU>![C7*/.PU~	&69;:1!\(85?>,.6789%7],."!/Á9;!¹4&"/.0!$6-,54#%#%&"O.67\,!+9;:.#	&"/9'5!$(8(85?=/49*K
ÃM/.&637*B#;!+,.2!4/.#®P&J¶7*BZDB5?> (85?/.P&69%&65?/!$!/.P,B5?O!4O.&)6&6#%9%&6(F,.2!4/.#®O4[]#S,78(8&JDX[.&"/.0!,,B5.,B&"!$9%7
!$(89%&65?/.#\DX5?BH7837*BN[Ï,^5#%#%&"O.67U#%9S!$9%7C&2/ 9;:.71P5?>!+&2/Q
K $&"¹$71(85./.P&)9'&)5./!$`!4/.Pw,B5?O!O.&66&6#%9%&6(Q,.2!4/.#*d
=/.&637*B#;!+-,."!/.#`BN78º»=.&"B7H9;:.7<~ 5?B6P19%5O^7]!$(8(878#%#'&2O.67F&"/15?BNP7*B 9%578·.78(*=.9%7<9S:.7<,.2!4/K
ÃM/.&637*B#;!+,."!//.&"/.0C~	!$# &2/49;B5.P=.(878PO4[.(8:.5?,,7*BN#\aop´rÀ~A:.5=.#%78P1P78(8&6#%&65?/19;BN7878#	9%5B7*,4R
B78#%7*/49<,."!/.#*K ¬ 78(87*/9F!,,B5?!$(8:.78#M&2/.(8"=.P71G!O!/.*!C789<!$nKEaoppr	!4/.P¿_&2>@!$9%9%&Z789`!+XKEaNo*pp´!^d
o*pp4´Or8KAG!4O!/.*!789<!+XKao*p4pr	B7*,BN78#%7*/9'#`=/.&637*B#S!$E,."!/.#<!$6#%5U!$#G!#'789A5$D®.&69;=!+9%78PÄ 5?/49;B54
¬ =.678#*K Y	:.78&"BA!+)045?B&69;:>&"/.(*B7*>F7*/49;!$66[!+PP#A ¬ #M9%5!HI/!$-,."!/Á&"/U!H~	!*[@#%&">F&62!4BM9%5F²<B%=>HR
>F5?/.PQ!/.P B78#%&"/!ÄaopKp Pr8K	Y:.7<05?!+-&6#<!\DX5?B'>]=."!@&"/9%7*>,^5?B%!$6504&)(@9;:!$9A>F=.#%9G:.56PQ5?/T!/[
3!+)&6P#%78º=.7*/.(87<5$DE!$(89%&65?/.#K
9 $7*!B%/.&"/.0a ¬ $r`a=.9%9%5?/Cv !BN9%5dopp´rÀ(*!/!+)#'5\O^7<B780?!BNP78PW!$#	=/.&637*B#S!$
¬ 78&2/4Dn5?B(87*>\7*/
,."!//.&"/.0K µ/ ¬ $9S:.7A05.!$&6#	B7*,B78#%7*/49%78PUO4[!<BN78~_!4BPD=/.(89%&65?/C&"/1!GÐQ!B'¹$5$3]²G78(8&6#%&65?/1uB5.(878#%#
abÐ²<uErM>F5.P785$D®9S:.7]P5.>!$&"/K]µÉ/9;:.7,B78(*=B#'5?BM37*B#%&65?/¿5$D ¬ $d9;:.7FÐ²<uß&)#<!+#%#;=>F78PQ9'5WO^7
¹./.5~M/Q!/.Pm!C(85?/9SB5E,54)&6(8[m>!$·.&">F&68&2/.0z9;:.778·,78(89'78PÏB78~	!BNPQ&6#<Dn5?=/.PÄ,BN&)5.B<9'5178·?78(*=.9%&65?/K
Y	:.7,54)&6(8[(*!/Á78&)9S:.7*B<O7B7*,BN78#%7*/9'78P78·,.6&6(8&)9')[z&2/!@9;!O.67F5?B&2>@,.)&6(8&69%6[mO[U!\D=/.(89'&)5./wab7Kc0Ked
!/.7*=B%!$	/.789~ 5?B%¹.r8K78(*!=.#'7 ¬ $&6#!,B5?O!O.&66&6#%9%&6(!4,,B5?!$(8:d&69%#FP5?>!$&"/mB7*,BN78#%7*/9S!$9%&65?/z&)#
>F5?BN7G(85?>,.678·19;:!/Á9;:.7GP5?>!$&"/TB7*,B78#%7*/49;!$9%&65?/T=.#%78PO4[1!/.5?/4RP789'7*B%>F&"/.&6#%9%&6(,.2!4//.7*B8K	Y	:.=.#*d
~ 7`>@!*[F78·,78(89A/.5./4RP789%7*B%>F&"/.&6#%9%&6(,."!//.7*B#	9%5FO7<!O.67G9%5:!/.P67GP5?>@!$&"/.#®~&)9S:1!<"!BN07*B#%9;!$9%7
#;,!$(87F9;:!4/ ¬ $K- =.9 ¬ $Â>![U,B5?P=.(87C,56&6(8&678#~	&69;:!1:.&60?:.7*BGº=!$6&69¸[T9;:!/!1=/.&637*B#;!+E,.2!4/
07*/.7*B%!+9%78PO4[Ï!z/.5?/4R¸,B5?O!O.&66&6#%9%&6(d</.5?/4RP789'7*B%>F&"/.&6#%9%&6(Ä,."!//.7*B8KÐ5?B785$37*BÇd&"/m9;:.7B78(*=B%B7*/49
37*B#'&)5./d ¬ $z)7*!4B%/.#A9S:.7G~®5.B6PU>F5?P78P=B&"/.078·.78(*=.9%&65?/U!4/.P19;:?=.#P5?78#G/.59	B78º=.&2BN7]!F(85?>@,.)789'7
~ 5?B6P>\5?P78,B&65?B9%578·.78(*=.9%&65?/KAY	:.5.=.0?:d&"/T9;:.785?BN[&69G/.7878P#G&2/4I/.&69%7@78·?78(*=.9%&65?/T78·!>,.678#G9%5
(85?/437*B07G9'5]9S:.7<5?,.9%&">!+=/.&637*BN#;!$,.2!4/K
|M6,B783.&65?=.#A!,,BN5?!$(8:.78#E9%5F=/.&)347*B#;!$,.2!4//.&2/.0
d78·.(87*,.9	 &">!$9%9%&789 !$nKao*pp´4!d?opp´Or8d.=.#%7
!/Á78·»,.6&6(8&69]B7*,B78#'7*/9;!+9%&65?/C5$DE9;:.7F=/.&)347*B#;!$,."!/Äab7K 0K"d ¬ #;rÇK	Y	:?=.#d&"/19S:.7<07*/.7*B%!+(*!$#%7d!/
R

 ö 0



)-  
« -«  -)

78·,5?/.7*/49%&"!$#%&687H5$D-9;:.7<,."!/C&"/19S:.7`/.=>FO7*B 5$D,B5?,54#%&69%&65?/.#AP7SI/.&"/.01!HP5?>!$&"/C#%9;!+9%7`>F=.#%9	O^7
78·,78(89%78Pd!$#A!BN0?=.78PUO[1ÆG&"/.#;O^7*B0Qao*p´p4r8K
Y:.7<(85?>,!+(89<!/.P&2>@,.)&6(8&69B7*,B78#%7*/49;!$9'&)5./15$D	=/.&)347*B#;!$,."!/.#<5?O.9S!$&"/.78P~&)9S: h ¯ ii #<P5.78#
/.59F/.78(878#%#;!B&66[Q0?BN5~ 78·,5./.7*/9%&"!$66[zDX5?BGBN780?=."!B6[Q#%9;B'=.(89;=B78PQP5?>@!$&"/.#\!+#G#;:.5$~A/QO4[¿_&2>@!$9%9%&
789<!$nKao*pp´4!r8K =BN9;:.7*B8d9;:.7 h ¯ ii R¸O!+#%78PÄB7*,B78#'7*/9;!+9%&65?/T5$DE9;:.7°	| 5+D®!1/.5?/4RP789%7*B%>F&"/.&6#%9%&6(
P5?>!+&2/Á7*/!O.678#G9;:.7!,,.6&6(*!$9%&65?/T5$DE7S(8&67*/49A#%7*!4B(V:T!$605?B&69;:>\#	DB5?>>\5?P78Z(V:.78(8¹4&2/.01(*!4,!O.67
5$DE:!/.P6&"/.0137*B[C2!4B07G#%9;!+9%7A#S,!$(878#*K
S ÈÉ'ËÈ

 È UTVWXW'Ç

|G/w±GBP7*B78P&"/!B[m²G78(8&6#%&65?/²G&"!$0.B%!> an B[.!/9d	o*p´4rF&6#W!z(*!/.5?/.&6(*!$GB7*,B78#%7*/49;!$9'&)5./m5$D<!
O5.567*!/WD=/.(89%&65?/Á~	&69;Z
: YT6&"/.7*!BM5?BP7*BN78PU!B0?=>F7*/49%#\[ #] [ (^]_`_a_`] [/b?K
|G/ h ¯ ii &)#E!MB5.59%78PdP&"B78(89%78P!$(8[.(8)&6(	0.B%!,:G~&)9S:<5./.7E5?B9~ 5	9%7*B'>F&"/!$»/.5.P78#5$D5?=.9NRP780?B787
87*B5H2!4O78678PQo	5?"
B Pd?!4/.P!G#%7895$D3!BN&2!4O.)7</.5.P78d
# c@5$D5?=.9RP780.B787A9~ 5KY	:.7M9~ 5G5?=.9%05&"/.0H78P078#
!B7C0&637*/ÂO[Q9S:.7CD=/.(89%&65?/.f
# e?ÛJK× eOa crF!/.P Ù KÕ g<Oa c
r8h
K N!$(8:¨3!B&"!O.67/.5?P71&6#!$#'#%5?(8&"!$9'78Pm~	&69;:m!
,B5?,^5#%&69%&65?/!$3$!B&"!O.67&"/9;:.7O^5?567*!/ÁD=/.(89%&65?/9;:.7 h ¯ ii BN7*,B78#%7*/49%#*K<Y	:.7F0?B'!,:1&6#<5.BP7*B78P
&"/19;:.7G#'7*/.#%7<9;:!+9_!+),!$9;:.#&2/Á9;:.7G0?B%!4,:1B78#;,78(899;:.7<5?BNP7*B&"/.05$D9;:.7G3!BN&2!4O.)78#K
|G/ h ¯ ii B7*,BN78#%7*/9'&2/.0C9;:.7ÈD=/.(89%&65?f
/ iOa [ #] [ ( X
r jU[ #lk [ ( &6#G#;:.5$~A/C&"/Á&)0.=B7oK ÆG&637*/T!/
!$#%#'&)0./>F7*/95$DÅ9S:.7<!B0?=>F7*/49%
# [ # !/.Z
P [ ( d^9;:.7G3!$"=.7F5$X
D iT&)#MP789%7*B%>\&2/.78PQO4[W!@,!$9;:C#%9;!4B9%&"/.0!$9
9;:.7GB5.59	/.5?P7<!/.P1&69%7*B'!$9%&63786[Dn5665$~	&"/.09;:.7G:.&)0.:178P07d.&JDÅ9S:.7`!$#'#%5?(8&"!$9'78P13!B&"!O.67H&)#9;B%=.7d!/.P
9;:.7G65$~78P07d&JDE9;:.7<!+#%#%5.(8&2!+9%78P13!BN&2!4O.)7F&6#D!$6#%7KY	:.7G3!$"=.7H5$J
D iT&6
# mÔ ( , 5.o
B n ÚÙ Ò , &JD9;:.7G"!O78
5$D9;:.7<B7*!$(8:.78PU9'7*B%>F&"/!$-/.5.P7G&6#]oG5.\
B PdB78#;,^78(89%&63786[K
x1
x2
0

1

&60?=B7oKp|`/ h ¯ ii B7*,B78#'7*/9%&"/.0C9;:.7GD=/.(89%&65?/7iaO[ # ] [ ( rjq[
PB%!~A/C!$#	#%56&6P!4/.PUP59%9'78P1)&"/.78#*dB78#;,^78(89%&63786[K

# k

[ (

K	½&)0.:U!/.PT)5$~}78P078#G!B7

| / h ¯¯ i 0?B%!,:\&)#	B78P=.(878PC#%5H9;:!$9®/.5H9~®5GP&6#%9'&2/.(89M/.5?P78#\cC!/.PsrF:!37	9S:.7	#;!>F7M3!4B&"!O.67
G
/!>F7C!/.PÄ65$~ !4/.PÏ:.&60?:z#;=.(8(878#%#%5.B#Uab&60?=B7{!4r8d-!/.Pm/.5U3$!B&"!O.67U/.5.P7sc¨:!$#F&6P7*/9%&6(*!$ 65$~
!/.PU:.&60?:Á#;=.(8(878#%#%5?BN#\ab&60?=BN7<{Or8K
Y:.7 h ¯ ii B7*,B78#%7*/49;!$9'&)5./Q:!$#G9~ 5U>!$¼5?BM!$P3!/49;!$0478# pG&"B#%9*d&69<&6#!/7S(8&67*/49]B7*,B78#'7*/4R
9;!$9'&)5./5$D`O^5?567*!/¿D=/.(89%&65?/.#O78(*!4=.#%719;:.71/?=>FO7*BH5$DA/.5.P78#F5$DX9'7*/Q&6#>F=.(V:z#;>!$667*BH9;:!/z9;:.7
/.=>]O^7*BM5$D9;B%=.9;:T!$#%#%&60?/>F7*/49%#M5$DE9;:.7H3!B&"!O.678#*KHY	:.7]/.=>FO7*BM5$DE/.5?P78#G(*!4/10?B5$~78·,5./.7*/9%&"!$
~	&69;:@9;:.7</.=>]O^7*B5$D-3!4B&"!O.678#*dO=.9	>F5#%9(85?>>F5./.)[C7*/.(85?=/49%7*B78P@D=/.(89'&)5./.#A:!37`!FB7*!+#%5?/!O.67
B7*,B78#'7*/9;!+9%&65?/K.78(85?/.Pd!/[F5?,^7*B%!$9%&65?/\5?/F9~ 5 h ¯ ii #*d.(85?B%BN78#;,5?/.P&"/.0F9%5F!<O5.567*!/@5?,7*B'!$9%&65?/
5?/F9S:.7 D=/.(89'&)5./.#®9S:.78[\BN7*,B78#%7*/49*d?:!$#E!È65~Â(85?>,.678·.&)9[O^5?=/.P78P1O[F9;:.7A,BN5?P=.(895$D9;:.78&"BE/.5.P7
(85?=/49%#]an B[.!/9dop´r8K
t

¦

0¨§ª©J« õ  õ

u

v

u

x

x

x

(b)

(a)

&60?=B7<{p ¬ 87 P=.(89%&65?/.#H5$D h ¯ ii #*K1an!r/.5?P78#F!$#%#%5.(8&"!$9%78P9%5C9;:.7F#;!>F7H3!B&"!O.67~&)9S:78º»=!+-65$~
!/.PU:.&60?:1#S=.(8(878#%#%5?B#~	&6)O7H(85?/437*B9%78P19%5C!<#'&2/.04)7/.5.P7K`aOr®/.5.P78#M(*!=.#%&"/.0WBN78P=/4R
P!/49®9'78#%9%#	5?/1!\3!B&"!O.67F!B7G786&">F&"/!$9%78PK
| P &)#S!$P3!/49;!$047A5$D h ¯ ii #	&6# 9;:!$9 9;:.7M#%&687G5$D-!/ h ¯ ii B7*,B78#'7*/9%&"/.0#'5?>F7D=/.(89%&65?/C&6# 37*B[
P7*,7*/.P7*/49F5?/9;:.7@5?BP7*B&"/.0U5+D®9;:.73$!B&"!O.678#*K1Y51I/.PÄ!/¿5?,.9%&">!$3$!B&"!O.675.BP7*B&"/.0U&6#]!Á(85$R
°MuZR(85?>,.6789%7,B5.O.)7*> &"/Á&)9'#%78JDNdO=.9G!$#M&)6"=.#%9;B'!$9%78P&"/U&60?=BN7]ÑC!05.5.P:.7*=B&6#%9%&6(HDn5?B	(8:.5.5#%&"/.0
!/C5?BNP7*B&"/.0&6#	9%5@)5.(*!$9%7FB78"!$9%78P13$!B&"!O.678#</.7*!B 7*!$(8:C59;:.7*BHan "!B%¹$7G789M!$nK"do*ppprÇK
x1

x1

y1

x2

x2
x3

x2

x3

x3

y1

y2
y2

x3

y3

y1

y1

y1

y2

y3
1

0

x3

1

0

(a)

(b)

&60?=B7<ÑpMY	:.&6#<&60?=B7C#;:.5$~	#G9;:.7C7S¶78(89<5$D	3$!B&"!O.675.BP7*B&"/.0TDX5?BM9S:.778·,B78#%#%&65?/aO[ #lkvu­# r&w
Oa [ ( k7u ( &
r wmOa [ % k7u % r8KY:.7 h ¯ ii &"/an!4rM5?/.6[0.B5$~	#G6&2/.7*!4B6[Ä~	&69;:¿9;:.7/.=>]O^7*BG5$D
3!BN&2!4O.)78#C&"/¨9;:.7178·,B78#%#%&65?/d~A:.&6679S:.7 h ¯ ii &"/anOrF:!$#C!/Q78·,5./.7*/9%&"!$M0?B5$~	9S:K
Y	:.7F78·»!4>,.67&66"=.#%9;B%!$9'78#<9;:!$9<,."!$(8&"/.0QB78"!$9%78Pz3!B&"!O.678#/.7*!BM9%517*!+(V:T59;:.7*BÈ&"/9;:.7
5?BP7*B&"/.05+DX9%7*/C&6#G!F05.5?PU:.7*=BN&)#'9%&6(K
h ¯ ii #E:!37EO787*/F#S=.(8(878#%#D=.)6[!,,.6&678P9%5G>F5.P78?(8:.78(V¹4&"/.0Kµ/F>F5.P78?(8:.78(8¹&"/.0G9;:.7 O7*:!3?&65?B
5$D-!H#%[.#%9%7*> &6#	>F5.P786)78PO[C!MI/.&69%7G#%9;!+9%7A!=.9%5.>!$9%5?/H~	&69;:@9;:.7M9;B%!/.#'&)9'&)5./B78"!$9'&)5./B7*,BN78#%7*/9'78P
!$#	!/ h ¯ ii KE²G78#%&"B%!4O.)7<,BN5?,7*B9'&)78#G!B7M(8:.78(V¹$78PUO4[1=.#%&"/.0 h ¯ ii >!/.&",=."!$9%&65?/.#M9%5!/!$6[?87H9;:.7
#%9;!+9%7A#S,!$(87<5$D9;:.7G#%[.#%9%7*> an "!B%¹$7M789A!$nK"do*p´¾.Ð(8Ð&6)"!/dZo*pp4Ñr8K
yx

 ö 0



)-  
« -«  -)

µÉ/9'7*B78#%9%&"/.06[dG!¨#%&">F&6"!BU!,,BN5?!$(8:m(*!/O7¨=.#%78PÂDX5?B@#%563.&"/.0/.5?/4RP789%7*B'>F&"/.&)#'9%&6(Ï,."!//.&"/.0
, B5?O.67*>F#K|A# !/@78·»!>@,.)7d.(85?/.#'&)P7*B_9;:.7A°|B7*,B78#%7*/49;!$9'&)5./F5$D-!</.5?/4RP789'7*B%>F&"/.&6#%9%&6(],."!//.&"/.0
P5?>!+&2/C#S:.5~M/&"/1&60?=BN71?!Kµ/C9;:.&6#	P5.>!$&"/C9;:.7*B7<!BN7	Dn5?=B #%9S!$9%78#E04&)347*/UO4[9;:.7MDn5?=B ,5#%#'&2O.67
3!+2=.7!$#'#%&60?/>F7*/49%#	5$D9;:.7G9~ 5\O^5?54)7*!4/1#%9;!+9%7G3!BN&2!4O.)78
# [ # !4/.Pz[ ( K µ/,=.9%#M9%5F9;:.7]°|}P7*/.59%7
!$(89%&65?/.#G&"/9S:.7P5?>!$&"/!/.PQ!B7FP7SI/.78PmO[T9;:.7O5.567*!/3$!B&"!O.6s
7 {
KFY	:.7 h ¯ ii B7*,BN78#%7*/9'&2/.0
9;:.7G9;B'!/.#%&69%&65?/1B78"!$9%&65?2
/ |]Oa { ] [ #] [ (] [} # ] [}( r 5$DZ9;:.7<°	|}&6#	#;:.5$~A/C&"/1&60?=BN
7 1?OKEY	:.7GP7SI/.&69%&65?/
5$&
D |&6#M#%9;B%!+&)0.:9Dn5?B~	!BNM
P pDn5?B #%5?>\7<!$#%#%&60?/>F7*/49M5$DÅ&69%#G!B0.=>F7*/9'#*d |&6#A9;B'=.7<&J¶Ä!$(89%&65?Z
/ {C(*!4=.#%78#
!F9;B'!/.#%&69%&65?/CDB5?> 9;:.7<(*=B%BN7*/9M#%9;!$9'7G0&637*/UO4[9S:.7<3!+2=.7F5$X
D [ # !/.z
P [ ( 9%59;:.7F/.78·?9M#%9;!+9%7A04&)347*/
O4[19;:.7<3$!$"=.7]5+J
D [ } # !/.7
P [ }( K ( °	59'7<9;:!$99;:.7 h ¯ ii BN7*,B78#%7*/49%&"/.%
0 | DX5.B 9;:.7<78·!>,.67F9;=B%/.#5?=.9
/.59	9'5]P7*,^7*/.P5?
/ [ }( K
a

0

00
1

10

0

01

1

11

1

x1

x1

x’1

x’1

x2

x2

1

0

(a)

(b)

a

P1
00

1

G
0

x1

01

x1
x2

1

10

0

1

(d)

(c)

&60?=B71p|,.2!4//.&2/.0zP5?>!$&"/¨B7*,B78#%7*/49%78Pm!$#!/Q°| &6##S:.5~M/&"/an!4r8K1.9;!$9%78#F!B7CP7SI/.78P
O[O5.567*!/#%9S!$9%7<3$!B&"!O.678)
# [ # !/.v
P [ ( d!/.P9;:.7!$(89%&65?/T&"/,=.9F9%5C9;:.7°	|&)#G04&)347*/
O[@9;:.7`O^5?54)7*!4/13!4B&"!O.6)
7 {
KÅY:.7G#%[»>FO^56&)(FB7*,B78#%7*/49;!$9'&)5./5$DZ9;:.7G9;B%!/.#'&)9'&)5./B78"!$9'&)5./
5$D9;:.7°	| &6#G#;:.5$~A/Á&2/manOrÇKAµ/mab(*rÇd ~ # &6#G9;:.7H#%789A5+DE#%9;!$9%7F!$(89%&65?/T,!$&"B#MDX5.B ~A:.&6(V:d
78·?78(*=.9'&)5./U5+D®9;:.7F!$(89%&65?/T(*!/T67*!$P9%59S:.7]045?!$nKGY	:.7F#%[»>FO^56&)(CB7*,B78#%7*/49;!$9%&65?/T5$Dd~ #
&6#®#S:.5~M/F&"/QabPr8Kµn9&)#5?O.9;!$&"/.78P@DB5.> 9;:.7M9;B%!/.#'&)9'&)5./B78"!$9'&)5./O4[B78#%9SB&6(89%&"/.0]9S:.7`/.78·.9
#%9;!$9'7A9%5
5 Po4K
|M#%#;=>\7®9S:!$9-9S:.7®#'9;!$9%
7 PoE&6#E!M05.!$?#'9;!$9%"
7 K|¹$78[<5.,7*B%!$9'&)5./d$~A:.7*/H07*/.7*B%!$9%&"/.0<!G=/.&637*B#S!$
., "!/ÁDX5.B	!$(8:.&)783.&"/.0d&6#M9%5FI/.PQ!$69;:.7H#%9;!$9'7<!$(89%&65?/U,!+&2BN#\aO ] {.r #;=.(8:19;:!+9\(*!/TO7B7*!$(8:.78P
DB5?><O4[78·.78(*=.9%&"/.0{KEY:.&)##%789	&6#	"!O78678Pv~ # &2/Á&60?=B71(KY5FI/.Pz~ # DB5?>|~ 7G(85?/.#'9;B%!$&"/
[ } 9%
5 n ÚÙ Ò , !/.
P [ }( 9%
5 mÔ ( , &"7
/ |HKY	:.&6#B78P=.(878

# |9%519;:.7 h ¯ ii #S:.5~M/U&"/z&60?=B751PKCY	:.7
#
B78#;=.69%&"/.0 h ¯ ii B7*,B78#%7*/49%5
# ~ # ~&)9S:¨9;:.71#%9;!$9'78#]P78#'(*B&"O78P&"/m9;:.7C(*=B%B7*/49#%9;!+9%73$!B&"!O.678
# [ #
Çãô$ñ;çbå$æÉèôñSçnõ;çbòËñ'ô<øcò8æ\Kõ'ôK--ýñ	*øHåõHSæ&ææÉô
	$önæF"ñ%èý	*ènèæÉô*ç-õ'ôÈôæ8çönçnõSçnæX%õ'ènòËõHøËæöãX<æÀåõHSæ
ýnå$ñ;önæÉô<çbåæ&$	 ñ;çnæÀôñSçnõ;çbòËñ'ô æý¸õ	 önæòËçòËöZçbåæýñSé é®ñ'ôMôñSçnõ;çbòËñ'ô<òcô<é ñy* æÉøýnå$æ¸ý8 òcôóã


¦

0¨§ª©J« õ  õ

!/.PQ[ ( KZ$504&)(*!+)6[¨~ 7,7*BÉDn5?B%>\78PÄ9;:.7@5?,7*B%!+9%&65?/h[
B7*,B78#'7*/9%&"/.0~ # K

} ] [ } _ [ } k
#
(
#

[ } k
(

|9%5T5?O.9;!$&"/9S:.7

h ¯ ii

 Ê ¥'6
5AX6' ¡U¢v6 ÇË-É£6È q
 ¤ Ê J
 ¥ '
µ/¿9;:.&6#<#%78(89%&65?/d~ 7<IBN#%9AP&6#%(*=.#'#]9S:.7\,BN5?,7*B9'&)78#H5$
D "!#ÏO!$#'78P5./!4/&"/4DX5?B'>!$ZP7SI/.&)9'&)5./Q5$D
9;:.7C"!/.0?=!$07U!4/.PÏ!TP5?>!+&2/¨7*/.(85.P&"/.0Q78·!>,.67KQxQ719S:.7*/QP78#%(*BN&2O^7U9;:.7@Dn5?B%>!$#%[/9;!+·Ä!/.P
#%7*>!4/9%&6(8#	5+d
D "!#ÅK
|G2
/ /"!#QP5?>!+&2/@P78#%(*B&",.9%&65?/Á(85?/.#%&6#%9%# 5$HD p-!HP7SI/.&69%&65?/C5$DÒVÓ Ú Ó ,§¦*Ú ÔSÛ +Ú *8-Ù , Ò8d?!ÈP78#%(*B&",.9%&65?/C5$D
Ò8Ý*Ò8Ó ,¨ !/.P , Ö ¦ Û ÔÕÖ ¨), ÖÓ Ú × , Ö
ÓbÒVd!/.PU!F#S,78(8&JI(*!$9%&65?/T5$DE!/ÛbÖÛbÓnÛ ÚÙ !/.P1×.Õ ÚÙ Ü;ÕªÖ ©ÛbÓnÛ ÕÖ
K
Y:.7G#%789	5$D-#'9;!$9%7M3!BN&2!4O.)7!$#'#%&60?/>F7*/49%# P7SI/.78#A9;:.7H#%9;!$9'7A#;,!+(87G5$DÅ9S:.7GP5?>!$&"/K|G/1!$07*/49 Lc#
P78#%(*B&",.9%&65?/H&6#-! #'7895$D Ú Ü*ÓnÛbÕÖÒ8K-Y:.7E!$07*/49%#(8:!/.079;:.7#%9S!$9%75$D9;:.7~ 5?B6P<O4[`,^7*BÉDX5.B%>F&"/.0`!+(89%&65?/.#
9;:!$9 !B7G!$#%#;=>\78P19%5]O^7G78·?78(*=.9%78P1#'[»/.(8:B5?/.5?=.#')[1!/.PC9%5:!37`!ÈI·.78PW!4/.P178º»=!$P=B%!+9%&65?/KZ|	9
7*!$(8:Q#'9%7*,d!$6®5+DA9;:.71!$07*/49%#],^7*BÉDX5.B%> 78·»!$(89')[z5?/.7W!+(89%&65?/d!/.Pm9;:.71B78#;=.69%&"/.0Ä!$(89%&65?/z9;=,.67C&)#
! «VÕ4Û Ö
Ó Ú ÜÓnÛ ÕÖ
KÄY	:.71#'[?#%9'7*> !+07*/9'#\>\5?P78	9S:.7UO7*:!3?&65?B\5$DA9;:.7U!$047*/9%#F(85?/49;B54)"!O.67O[¨9;:.7
¬
,."!//.7*B8d ~A:.&6679;:.717*/43?&"B5?/>\7*/9!+07*/9'#>F5.P78	9;:.7U=/.(85?/49;B56"!O.67~ 5?B6PKm| 3!$6&6PP5?>!$&"/
P78#%(*B&",.9%&65?/ B78º»=.&"B78#19S:!$99S:.7U#%[.#%9%7*> !/.P7*/3.&"B5?/>F7*/491!$07*/49%#(85./.#%9;B%!$&"/Â!QP&6#n¼5&"/91#'7895$D
3!4B&"!O.678#*K
|G/!$(89%&65?/:!$#19;:BN787Ä,!B9%^# pÄ!z#%78915$DÒ8Ó Ú Ó ,¦*Ú ÔSÛ +Ú *8-Ù , Ò8dA! Ø Ô , Ü;ÕªÖ ©ÛbÓnÛ ÕÖÏDX5?B'>]=."!dM!/.P!/
,O­o, ÜÓDn5?B%>F=."!K]µÉ/9S=.&)9'&)3478)[z9;:.7!$(89%&65?/T9;!¹$78#GB78#;,^5?/.#%&"O.&66&"9[Q5$D®(85./.#%9;B%!$&"/.&"/.0U9S:.7]3$!$"=.78#<5$D 9;:.7
#%9;!+9%7F3!B&"!O.678#F&"/9;:.7/.78·.9<#'9;!$9%7KFµn9ÈD=B9S:.7*BG:!$#<78·.(8"=.#%&637W!+(8(878#%#<9%519S:.78#%73!4B&"!O.678#]P=BN&2/.0
78·.78(*=.9%&65?/Kµ/5.BP7*B@DX5.B9;:.7¨!$(89%&65?/Â9%5wO7¨!,,.6&)(*!4O.)7dH9;:.7Q,B78(85?/.P&69%&65?/ßDn5?B%>F=."!m>]=.#'9WO^7
#;!$9'&)#NI78PU&"/T9;:.7<(*=B%BN7*/9M#%9;!$9'7K®Y	:.7F7S¶78(89	5$DE9S:.7]!$(89%&65?/Á&6#AP7SI/.78PÄO4[C9;:.7<7S¶78(89DX5?B'>]=."!@9;:!$9
>F=.#%9<O7@#;!$9%&6#I78P&"/9;:.7/.78·.9G#%9;!+9%7K<Y5U!$6)5$~(85?/.P&69%&65?/!$7S¶78(89%#*d9;:.7@7S¶78(89G78·,B78#%#'&)5./(*!/
B7SDn7*B	9'5O59S:1(*=B%B7*/49G!/.P/.78·.9A#'9;!$9%7H3!B&"!O.678#*d~M:.7*B7<9;:.7F/.78·?9M#%9;!+9%7G3!BN&2!4O.)78#</.7878P9%51O7F!
,!B9Z5$D9;:.7 #%789Z5$D(85?/.#'9;B%!$&"/.78PF3!BN&2!4O.)78#5$D9S:.7®!$(89%&65?/KZ|M6/.78·?9#%9S!$9%73!4B&"!O.678#®/.59Z(85?/.#%9;B'!$&"/.78P
O4[W!/4[1!$(89%&65?/C&"/U!M¼5&"/49A!$(89%&65?/T>!$&"/9S!$&"/C9;:.78&"B	3$!$"=.7K
Y:.7	&"/.&)9'&2!+!4/.P05?!$.(85?/.P&69%&65?/1!BN7EDn5?B%>F=."!$#9;:!$9E>F=.#%9EO7M#;!$9'&)#NI78P&"/9;:.7&2/.&69%&"!$#%9S!$9%7	!/.P
9;:.7MI/!$#%9;!$9%7dB78#S,78(89%&63786[K
Y:.7*B7!B7F9~ 51(*!=.#%78#ÈDX5?BG/.5./4RP789%7*B%>F&"/.&6#;> &"Q
/ "!#QP5?>!$&"/.# p1ao*rG!$(89'&)5./.#]/.59<B78#'9;B&6(89R
&"/.0Ä!$6 9;:.78&"BF(85?/.#%9SB%!$&"/.78Pm3!BN&2!4O.)78#@9%5Q!U#S,78(8&JI(U3$!$"=.7U&"/¨9;:.71/.78·?9F#%9;!+9%7d!/.Pan{rÈ9;:.7U/.5?/4R
P789%7*B%>\&2/.&6#%9'&)(F#%78678(89%&65?/T5$DZ7*/3.&"B5?/>F7*/49`!+(89%&65?/.#*K
|#%&">,.67C78·»!4>,.675$DA!®
/ /"!#ÄP5.>!$&"/P78#%(*B&",.9%&65?/¨&6#F#;:.5$~A/T&"/Q&60?=BN7WqKCY	:.7CP5?>!$&"/
P78#%(*B&"O^78#\!T,."!//.&"/.0¿,BN5?O.67*> Dn5?BG.(V:.5.,,7*B# L ao*p´4rABN5?O59NR¸O!O[TP5?>!$&"/KCY	:.7P5?>!+&2/z:!$#
9~ 5G#%9;!$9%7 3$!B&"!O.678# pE!H/?=>F7*BN&)(*!+5?/.7d,54#%&69%&65?/ Ø Õ$Ò	~	&69;:CB%!/.0F
7 ¯P ] o ] { ] Ñ ° !/.P!<,BN5?,5#'&)9'&)5./!$
# #Û ²8´Ó ³¶µ Ù Õ*·Ü ±A!/.P
5?/.7dÔÕ * ÕÓ gÕÔ ±*Ò.KEY	:.7GB5?O549®&6#	9S:.7A5?/.6[C#%[.#%9%7*>!$07*/49®!/.P1&69	:!$# 9~ 5]!$(89%&65?/.o
#K
Õ g , Ô ³¶µ Ù Õ*·Ü ±KUY:.7
7 #ÅÛ ²V´Ó ³µ Ù ÕyÜ ±Uan!/.Q
P #KÕ g , HÔ ³µ Ù ÕyÜ ±8r<!$(89%&65?/¨:!$#!T(85?/.P&69%&65?/!$ 7S¶78(89FP78#%(*B&"O78P
O4[!/T&JD R9S:.7*/4R78)#'75?,^7*B%!$9%5.BOa ¸myr p	&JD<ÔÕ * ÕÓ gÕÔ ±*Ò&6#G9;B'=.7]9S:.7*
/ #ÅÛ ²8´Ó ³¶µ Ù Õ*yÜ ±G&"/.(*B7*!$#'78#<9;:.7O.65?(8¹
,54#%&69%&65?/mO[z5?/.7786#%7C9;:.71O.65?(8¹Ä,^5#%&69%&65?/¨&6#=/.(V:!4/.078PKQY	:.71O!O[z&)#F9;:.7C5?/.6[¨7*/3.&"B5?/>F7*/49
!$07*/49®!4/.P&69_:!+#E5?/.7G!$(89%&65?A
/ ¹GÛb´Ó ³¶º®Õ * ÕÓnK78(*!=.#%7M7*!$(8:!+07*/9 >F=.#%9E,7*BÉDn5?B%>78·!$(89%6[F5?/.7G!$(89%&65?/
!$9Z7*!$(8:<#'9%7*,d$9;:.7*B7	!B79~®5¼5&"/9!$(89%&65?/.#Aa #Û ²V´Ó ³µ Ù ÕyÜ ±»d ¹`Ûb´Ó ³¶º Õ * Õ4Ó"r!/.PUa #KÕ g , Ô ³¶µ Ù Õ*·Ü ±-d ¹GÛb´Ó ³¶º®Õ * ÕÓ"rÇK
µ/.&69%&"!$66
[ ¼½>¾y½^¿ À½>¼>Á &6#®!+#%#;=>F78P9'5<O7	9;B'=.7d9;:.7	B5?O^59&6#®!$#'#;=>F78PF9%5<:.56P1!GO.)5.(8¹]!+9EuZ5#%&69%&65?/
Pd!4/.P1&)9'#	9;!$#;¹@&6#	9%56&JDn9A&69A=,Á9%5uZ5#%&69%&65?/1Ñ^K
Y:.7®3$!B&"!O.6
7 ¼½>¾y½^¿ Ào½>¼Á_(*!/O7M>!$P7 D!$6#%7AO4[<9;:.7MO!O[KY	:.7MO!OC[ Lc#E!$(89'&)5.A
/ ¹`Ûb´Ó ³¶º Õ * ÕÓ.&)#
/.5?/4RP789%7*B'>F&"/.&)#'9%&6(d»!+#&69-5?/.6[H(85?/.#%9;B%!+&2/.# ÔÕ * ÕÓ gÕÔ ±*Ò	O4[A9;:.77S¶78(89-78·,B78#%#%&65?/  ÔÕ * ÕÓ gÕ4HÔ ±I
Ò Â
Ã

 ö 0



)-  
« -«  -)

Ä>ÅKÆyÇ´ÅKÈCÉËÊKÌ
ÍÅ<ÎÏ xKÐ ª¶

ÈMÑÑ+É  ¹ Òi ¶Ó¶
ÌÔÌHÎÊ>Õ
ÅKÖ+Î^× ÌÖèÖÐ
Ø÷Ú éÐ"ê"ð8ÑÓÖÎÙ
 ¶
Ù ÑÍ× 
y
 ¶XÛ t
ÚCÆyÊ+× 
Ò  Ó¶&Ý?ª¶Þ+ß
Ê^ÜX×   ¹« V

¶'à

^á ¶HÞß[¶

¶&ã

^á ¶HÞß[¶

Ø÷Öæ8ÍÜ¨ê¯ðuÑÓÖÎáÙ

Ù ÑÍ× ¶
y
ÚCÆyÊ+× ¶Xâ 
Ò  Ó¶&Ý?ª¶Þ+ß
Ê^ÜX×  ¹« V
Ê>ÍÄÇ´ÆyÑ+ÍCÕÊ>ÍÎ
ÅKÖ+Î^× ð6àèÒ
ä Ú³Ð¨ê¨ÌÖèÖÐ
<
Ò  
Ó ¶
ÙyÑÍ×  «¹ V

ÚCÆyÊ+×  
Ò « ¶Ó¶&æ
Ê^ÜX×
å  «¹á« V
Ç´ÍÇ´ÎÇËÅKÉaÉËÔ
ª¶Jß &ç  «¹á« ÒV«
  ¶Ó¶
ÖÑ+ÅKÉ

ª¶Jß

å  ¹ ÒV« ¶Ó¶ Þ

t

&60?=B7<qp|G/f"!'#¨P5?>!$&"/CP78#%(*BN&2,.9'&)5./K
 ÔÕ * ÕÓ gÕÔ±*Ò } KCY	:.=.#*d~A:.7*/ Ô¸Õ * ÕÓ gÕÔ±*Ò&6#H9;B%=.7&"/z9;:.7F(*=B%B7*/49<#%9;!+9%7d9;:.7F7S¶78(89<78·,B78#%#'&)5./
5$D\¹GÛ Ó´³º®Õ * ÕÓP5?78#</.59G!,,.6[d!/.P¨Ô¸Õ * ÕÓ gÕÔ±*ÒF(*!/T78&)9S:.7*BGO7F9;B%=.7H5?B D!$6#%7H&2/T9;:.7/.78·.9A#'9;!$9%7K
±G/9;:.7F59S:.7*BG:!/.Pd&JD<ÔÕ * Õ4Ó gÕÔ±*Ò&6#GD!$6#%7&"/9S:.7(*=B%B7*/49G#%9;!$9'7d¹`ÛbÓ´³¶º Õ * Õ4ÓÅ¹+787*,.#<&69MD!+)#'7&"/
9;:.7/.78·.9<#%9;!+9%7K<Y	:.A
7 ¹GÛ ´Ó ³º®Õ * ÕÓE!$(89'&)5./>\5?P786#]!4/!+#;,78(89H5$DE9;:.77*/43?&"B5./>F7*/9</.549G(85?/9SB56678P
O4[m9;:.7QB5?O549!$07*/49*d &"/Â9;:.&6#1(*!$#%7!¨O!O4[dAO4[m&69%#17S¶78(89%#5./ÔÕ * ÕÓ gÕÔ ±*Ò.Kµ/Â9;:.7T78·»!4>,.67
!O^5347dEÔÕ * ÕÓ gÕÔ ±*ÒC#%9;![.#MD!$6#%7@~A:.7*/Q&69F:!$#]O^78(85?>F7@D!$6#%7dB7S78(89'&2/.09;:!+9G9;:.7WBN5?O59G(*!4//.59
#;,^5?/9S!/.785?=.#%6[UO7ÈI·?78PUO4[U!F:.&69A5$D9;:.7<O!O4[d5?B!/[C59;:.7*B !$(89'&)5./1&"/19;:.7G7*/43.&2BN5?/>F7*/49*K
|G/m°| B7*,B78#%7*/49%&"/.0¨9;:.71P5?>!$&"/¨&6##;:.5$~A/¨&"/¨&60?=B7KÄY:.71(*!$6(*=.2!+9%&65?/Â5$DA9;:.7U/.78·.9
#%9;!+9%7<3$!$"=.75$D Ø Õ$Ò&"/9;:.A
7 #Û ²8´Ó ³¶µ Ù Õ*·Ü ±È!+(89%&65?/T#;:.5$~	#G9;:!$9G/?=>\7*B&6(*!$E3$!B&"!O.678#<(*!/O^7=,P!$9'78P
O4[!/Q!4B&69;:>F789%&6(78·,B78#%#%&65?/¿5?/9;:.7F(*=B%B7*/49<#'9;!$9%7H3!B&"!O.678#*KCY	:.7=,^P!$9%778·,B78#%#%&65?/¿5$D Ø Õ$Ò
!/.PC9;:.7<=.#%7M5$D-9;:.7G&JDbR9;:.7*/4R786#%7<5.,7*B%!$9'5?BZD=B9;:.7*BP7*>F5?/.#'9;B%!$9%7M9;:.7G!$P3!4/9;!+07A5+DÅ=.#%&"/.078·,.)&6(8&69
B7SDn7*B7*/.(878#F9%5U(*=B'B7*/9F#%9S!$9%7!/.P¨/.78·?9F#%9;!+9%73!4B&"!O.678#&"/Q7S¶78(89F78·»,BN78#%#%&65?/.#*
K "!'#QP5.78#/.59
B78#%9SB&6(89	9;:.7<B7*,B78#'7*/9;!+9%&65?/1O[C7*/4Dn5?B(8&"/.0W!\#%9;B%=.(89;=BN7G#%7*,!B%!$9'&2/.0@(*=B%B7*/49	#%9;!$9'7`!/.P/.78·?9#%9;!$9%7
78·,B78#%#%&65?/.#*KY	:.7&JD R9;:.7*/4R786#%75?,7*B%!+9%5?B:!$#O787*/F!$PP78PF9%5#;=,,5?BN9-(85?>@,.)78·H(85?/.P&69%&65?/!$.7S¶78(89%#
9;:!$9 5$Dn9%7*/C!B7M7S(8&67*/9')[U!4/.PU/!$9;=B%!$66[1B7*,B78#%7*/49%78PU!$#A!H#%789 5$D/.78#%9%78PU&JDbR9;:.7*/4R786#%7<5.,7*B%!$9'5?B#*K
Y:.7A78·,.6&)(8&69<B7*,BN78#%7*/9S!$9%&65?/@5$D-(85?/.#%9SB%!$&"/.78P1#%9;!$9'7	3!BN&2!4O.)78#M7*/!O.678#G!/[C/.5?/4RP789%7*B%>F&"/.&6#%9%&6(
5?BMP789%7*B'>F&"/.&)#'9%&6(7S¶78(89<5+D_!/!$(89%&65?/¿9%5UO7BN7*,B78#%7*/49%78Pd-!$#G9S:.7(85?/.#%9;B'!$&"/.78PQ3!BN&2!4O.)78#F(*!/O^7
!$#%#'&)0./.78P19%5]!/4[F3!$"=.7H&2/@9;:.7G/.78·?9 #%9S!$9%7M9;:!$9E#S!$9%&6#I78# 9;:.7M7S¶78(89Dn5?B%>F=."!Kµn9D=B9;:.7*B9;=B%/.#5?=.9
9%5:!37<!\(8)7*!4B &"/9;=.&69%&637>F7*!4/.&2/.0
d!$#9;:.7<!$(89%&65?/Á9;!¹$78# 9;:.71à;BN78#;,5?/.#'&2O.&66&69[?áT5$DÅ#S,78(8&JDX[.&"/.019;:.7
3!+2=.78#M5$D9;:.7G(85?/.#%9SB%!$&"/.78PU3$!B&"!O.678#G&"/19;:.7</.78·.9	#%9;!+9%7K
è

¦

0¨§ª©J« õ  õ

robot_works
false

true

G

I

0

G

1

2

3

pos

&60?=B7<pMY	:.7°|5$D	9;:.7WBN5?O59NR¸O!O[TP5?>!$&"/ab#%787C&60?=B7qrÇKWY:.7*B7&6#F5?/.7W,BN5?,5#'&)9'&)5./!$
!/.P5?/.7Q/?=>\7*B&6(*!$<#%9S!$9%7U3$!B&"!O.6K7 p}Ô¸Õ * ÕÓ gÕÔ ±*ÒÄ!/.P Ø Õ+Ò?K Y:.7a #Û ²8´Ó ³¶µ Ù Õ*·Ü ±-d ¹GÛ ´Ó ³
º®Õ * ÕÓ"rZ!/.PWa #<
Õ g , Ô ³¶µ Ù Õ*yÜ ±$-d ¹GÛ ´Ó ³º®Õ * ÕÓ"r.¼5&"/9!$(89%&65?/.#E!4B7EPB%!~A/È~	&69;:G#'56&)PC!/.P<P!$#S:.78P
!B%B5$~	#d?B78#;,^78(89%&63786[K®.9S!$9%78#A>!4B%¹$78PC~	&69;:¨à;µnáC!/.Pmà;ÆGá!BN7G&2/.&69%&"!$!/.P105.!$#%9S!$9%78#*K

_5?>,!B78P9%5C9;:.7!+(89%&65?/TP78#%(*B&",.9%&65?/z2!4/.0?=!$07Ì anÆÈ78ËDn5?/.PQvé$&JDn9%#%(8:.&69%d o*ppÑrM!/.PÌ<Í
9;:!$9F!B7C9;:.7C5?/.6[Ï,B&65?BH"!/.0?=!+078#=.#%78P¨DX5.B h ¯ ii R¸O!+#%78P,."!//.&"/.0ab²G&ÐQ!/.85789\!+XKed®opp´¾
 &">!$9'9%&	789U!$nK"dGo*p4p´!d	opp´Od	oppr8.
d "!'#¨&"/9;BN5?P=.(878#U!/ 78·»,.6&6(8&697*/3.&"B5?/>F7*/49U>F5.P78XdM!
>F=.69%&JR¸!$07*/49P78(85?>,^5#%&69%&65?/d	!/.Pw/.=>F7*B&6(*!$	#'9;!$9%7C3!BN&2!4O.)78#Kµ9(*!/zD=B9;:.7*BO^71#;:.5$~A/¨9;:!$9
"!'#¨(*!/1O7F=.#%78PU9'5\>\5?P78-!4/[CP5?>!$&"/Á9;:!$9 (*!/UO^7<>F5.P78)678PÄO4[CÌ<Í
ab#%787G|G,,7*/.P&6·U|Gr8K
Y:.7	(85?/.(*=B%B7*/49	!$(89%&65?/.#&22
/ "!'#m!B7A!+#%#;=>F78PC9%5]O^7A#'[»/.(8:B5?/.5?=.#')[@78·?78(*=.9%78P1!/.PC9%5<:!37
I·.78PÏ!/.Pz78º»=!$P=B'!$9%&65?/K|07*/.7*B'!$®B7*,BN78#%7*/9S!$9%&65?/Q!$665$~	&"/.0,!BN9%&"!$6)[z5347*B"!,,.&"/.0¿!+(89%&65?/.#
!/.P!+(89%&65?/.#~	&69;:FP&J¶7*B7*/49P=B%!$9%&65?/.# :!$#EO787*/!354&)P78Pd.!$#&69®B78º=.&"B78#®>\5?B7 (85?>,.678·F9%7*>,^5?B%!$
,."!//.&"/.0wab#%787F7Kc0K"d ë
h êNf+- 5?B f-g t f$Z dw	=B%BN&)7vYZ!$9%7do*pp^o¾ $7837*B<v ¬ &6(8:!BP#*do*p>p 1?rÇK
±G=B¼5&"/49®!$(89%&65?/@B7*,B78#%7*/49;!$9%&65?/F:!$# >F5?B7	B78#'7*>]O."!/.(87M~	&69;:FF
Ì ìÁan !B'!$»v ÆG78JDX5./.Pdo*pp4r!/.P
íÏanÆÈ&2=/.(8:.&606&"!q
v $&JDX#'(V:.&69%dopp´r8d4~A:.7*B7M#%789%#5$D-!$(89%&65?/.#	!B7G,7*BÉDn5?B%>\78PW!$97*!$(8:9%&">F7M#%9%7*,KµÉ/
(85?/49;B%!$#'9®9'5]9S:.78#%7]!,,BN5?!$(8:.78#*d.9;:.5?=.0?:d~ 7<>F5.P78->F=.69%&JR¸!$07*/49AP5.>!$&"/.#*K
|G/@&2>@,5?B9S!/9 &6#%#;=.7G9'5\!+PPB78#%# ~A:.7*/C&"/9SB5?P=.(8&"/.0(85./.(*=B%B7*/49_!+(89%&65?/.#	&6# #%[»/.7*BN0789%&6(G7S¶78(89%#
O789~ 787*/@#%&">]=.69;!4/.785?=.#%6[78·.78(*=.9%&"/.0!$(89%&65?/.#GOa $&"/.0?!BP1v ¬ &6(V:!BNP#*do*pp´rÇK|(85?>>F5./F78·»!4>,.67
5$DP78#%9;B'=.(89%&637	#%[/.7*B0789%&6(M7S¶78(89%#&6#®~M:.7*/F9~®5G5.B>F5?B7A!+(89%&65?/.#®B78º=.&"B7M78·?(8"=.#%&637G=.#%7	5$D-!È#%&"/.067
B78#%5.=B(87G5?B ~A:.7*/Á9~®5!$(89'&)5./.#A:!37G&"/.(85?/.#%&6#%9%7*/49A7S¶78(89%#)&"¹$7 Ø Õ$Ò } jÑ@!/.P Ø Õ$Ò } j{^K
µÉ7
/ "!#Ï!$(89%&65?/.#M(*!//.59GO7,^7*BÉDX5.B%>F78PU(85./.(*=B%B7*/49%6[U&"/T9;:.7GDn5665~&2/.019~ 5(85?/.P&69%&65?/.^# p<o*r
9;:.78[F:!*347E&"/.(85?/.#%&6#%9%7*/49E7S¶78(89%#d$5?B{r9;:.78[<(85?/.#'9;B%!$&"/F!/H5$37*B"!,,.&"/.0G#%7895$D#%9;!$9%73!BN&2!4O.)78#KEY	:.7
IB#%9(85?/.P&69%&65?/C&6#EP=.7M9%5<9S:.7 D!+(89E9;:!$9#%9;!$9'7_¹./.5$~	678P07M&)# 78·,B78#%#%78PC&"/!H>F5?/.59'5?/.&6(	650&6(G9;:!$9
(*!//.59FB7*,B78#%7*/49<&"/.(85?/.#'&)#'9%7*/9C¹?/.5$~	678P07K1Y	:.7#'78(85?/.PÄ(85./.P&)9'&)5./m!$PPB78#%#%78#H9;:.7,B5.O.)7*> 5$D
#;:!BN&2/.0B78#'5?=B(878#*K 5?/.#'&)P7*BÀDn5?B78·!>,.67M9~®5F!$07*/49%#9;B[.&"/.0F9%5<PB&"/¹F9S:.7A#;!4>F7	0"!$#%#5$D~	!$9%7*B8K
µbDF5?/.6[9;:.7TIB#%91(85?/.P&69%&65?/P7SI/.78P}&"/9'7*BÉDX7*BN&2/.0w!+(89%&65?/.#*dGO59S:!+07*/9'#(85?=.6P}#%&">F=.)9S!/.785?=.#%6[
7*>,.9[9;:.7M0"!$#%#d?!$# 9;:.7M7S¶78(89E× Ù6Ú ÒSÒ ,¨Ø ÓnÝF5$D-9S:.7A9~ 5<!$(89%&65?/.# ~ 5?=.6PUO7M(85?/.#%&6#%9%7*/49*Kx&69;:@9;:.7
#%78(85?/.P@(85?/.P&69%&65?/!$PP78Pd49;:.78#%7A!$(89'&)5./.#E!B7 &"/9%7*B¸DX7*B&"/.0F!/.PF(*!//.59EO7M,7*BÉDn5?B%>F78PF(85?/.(*=B'B7*/9')[K
Y:.7U(*=B%B7*/49137*B#'&)5./w5+5
D /"!#Q5?/.6[!35&6P#P78#'9;B%=.(89%&637#%[/.7*B0789%&6(7S¶78(89%#*K µn9CP5.78#U/.59
&"/.(8"=.P7Q~	!*[.#5$D<B7*,B78#'7*/9%&"/.0¨(85?/.#%9;B'=.(89%&637U#%[/.7*B0789'&)(T7S¶78(89%#O789~ 787*/m#'&2>F=.69;!/.785.=.#U!$(89%&"/.0
!$07*/49%#*KH|(85?/.#%9;B'=.(89%&637#%[/.7*B0789%&6(7S¶78(89G&6#F&6)"=.#%9SB%!$9%78P¨&"/Q !B%!$E!/.PQÆÈ78ËDn5?/.Pao*pp4r8d
~A:.7*B7
!/¨!$07*/49<#;,.&666##'5?=,DB5?> !UO^5~®~M:.7*/Q9;BN[?&"/.09%5U6&JDn9&69\=,z~	&69;:z5?/.71:!/.PdEO=.9/.59<~M:.7*/
6&JDX9%&"/.0&69 =,~	&69;:CO549;::!/.P#*Kµî
/ í!/.P
Ì ìF9;:.&6#	¹&"/.PC5$D#%[»/.7*BN0789%&6(A7S¶78(89%#(*!/O^7`B7*,BN78#%7*/9'78P
ï



 ö 0

)-  
« -«  -)

O4[78·,.6&)(8&69%6[Q#'9;!$9%&"/.09;:.7H7S¶78(89	5$DE!F(85?>,^5?=/.PQ!$(89%&65?/K|#%&">F&6"!BG!,,BN5?!$(8:C(85?=.6P¿O^7]=.#%78PT&"/
"!'#mO=.9	&6#A(*=B'B7*/9')[1/.59	#S=,,5?B9'78PK
ð ´ñòCó6{ôõ

5.B%>!$66[d!/f"!#ÄP78#%(*B&",.9%&65?/T&6#A!R9;=,.675!öja÷ø

]ùJ]úA]

Ü*Ó ]û]ü] ]
 r8d~A:.7*B7Kp

ý

Ú Ô  ø Ú Ô&6#!zI/.&)9'7Q#%78915$D<#%9S!$9%73!BN&2!4O.)78#T(85?>,B&6#%78P 5$D\!¿I/.&69%7Ä#'7895$D
,B5?,54#%&69%&65?/!$3$!B&"!O.678#*dëÿ)ø Ú Ô?d!/.P!HI/.&69%7<#%7895$DÅ/.=>F7*B&6(*!$Z3!B&"!O.678#*dëø Ú ÔK
ý
ù

&)#G!HI/.&69%7d/.5?/.7*>,.9[C#%789	5$D#%[.#%9%7*>!$07*/49%#*K

ý
ú

&6#`!]I/.&)9'7<#%789	5+D-7*/3.&"B5?/>F7*/49G!$07*/49%#*K

÷døþj

ÿ)ø

AÜÓM&)#!T#%789H5$DA!$(89%&65?/zP78#%(*B&",.9%&65?/.#a ]M] r	~M:.7*B7\&)#F9;:.7C#%789F5$D	#%9;!+9%73!4B&"!O.678#(85?/4R
#%9;B%!$&"/.78PUO4[9;:.7<!$(89'&)5./d  &6#A!F,B78(85?/.P&69%&65?/T#%9S!$9%7 Dn5?B%>F=."!H&2/Á9;:.7M#%789o÷nÕÔ ¨ !/.P  &6#A!/
7S¶78(89ÀDX5.B%>F=.2!H&"/C9;:.7M#%789\nÕÔ ¨ KY	:.=.#<a ]	ë] r
ZMÜ*ÓÂ{÷nÕÔ ¨ nÕÔ ¨ KY	:.7A#'789%#
÷nÕÔ ¨ !/.7
P nÕÔ ¨ !4B7GP7SI/.78PQO7865$~<K
ý

p+×.'
Ó ¸ { &)#G!HD=/.(89%&65?/U>@!,,.&"/.0W!$047*/9%#FaO×?Ó'j ù  ú r 9%5F9;:.78&"BM!$(89%&65?/.#*KE78(*!=.#'7
!/1!$(89%&65?/1O^78)5./.0#A9'578·»!+(89%6[5?/.7F!$07*/49*d û >F=.#%9 #;!+9%&6#DX[C9;:.7MDn5665~&2/.0C(85?/.P&69%&65?/.#p
ý
û

û a Zr&jUMÜ*Ó


 
 

Õ4Ô


7÷ªn

ý
ü

¨

ý

'
7÷nÕÔ ¨


#]  ( 
Z×?Ó _  #"j#
!
( Â

r $
û a # %

r j#&
û a ( &

&6#	9;:.7H&"/.&)9'&2!+-(85?/.P&69%&65?/K
&6#A9S:.7G05?!$(85?/.P&69%&65?/K

5.BE!G3$!$6&6PUP5?>!+&2/@P78#%(*B&",.9%&65?/d^~®7MB78º»=.&"B7M9;:!$9 !$(89%&65?/.# 5$D#%[.#%9%7*>!$07*/49%#®!BN7	&"/.P7*,7*/.P7*/49A5$D
!$(89%&65?/.#5$DÅ7*/43.&2BN5?/>F7*/49`!$047*/9%#^p
a{?r)$



{(





ú
û

a r

aO{.r&j#&




*

{+




]

ù
û aO*r

~A:.7*B7*a{?r &6#	9S:.7<#%789	5+D-(85?/.#%9;B'!$&"/.78PU3!4B&"!O.678#G5$DÅ!$(89%&65?/f{K
Y:.7G#%789	5$DZDX5.B%>F=.2!+#nÕÔ ¨ &6#M(85?/.#%9;B'=.(89%78PCDBN5?>9;:.7GDn5665~&2/.01!$",:!O^789A5$DZ#%[»>FO^56#p
ý

|I/.&69%7H#%789	5$D(*=B%B7*/49	#%9;!+9%7IrC!/.PU/.78·.9A#'9;!$9%7rK}3$!B&"!O.678#*d
~A:.7*B7
r
ý

Y	:.7</!$9;=B%!+/.=>FO7*B#.-QK
ý

Y	:.7<!B&69;:>F789'&)(H5?,7*B'!$9%5?B#0/Fd21Gd3d54]!/.P
ý

Y	:.7<B78"!$9%&65?/Á5?,7*B%!+9%5?B#.6Gd27Gd28Gd:9Gdj !/.P F
j! K
ý

Y	:.7<O5.567*!/15.,7*B%!$9'5?B#

 d w

d k dÂd<;

¨

!/.PZ¸K


Õ^©K

] r<},
7÷døFK

¦

ý

0¨§ª©J« õ  õ

Y	:.7G#;,78(8&"!$Z#%[>FO56#FÓnÔ( , ^d ² Ú Ù Ò , d
,!B7*/49;:.78#%78#A!/.P1(85.>>!K

Y	:.7G#%7895$DÀ!4B&69;:>F789%&6(<78·,B78#%#'&)5./.#A&6#M(85?/.#%9;B%=.(89'78PCDB5.>9S:.7GDn56)5$~	&"/.01B%=.678#p
o4K\N37*B[C/?=>F7*BN&)(*!+-#%9S!$9%7M3!B&"!O.675r(


Ú Ô<&6#A!4/1!B&69;:>F789%&6(H78·»,B78#'#%&65?/K
^{ K |ª/!$9S=B%!$/?=>FO^7*B	&6#A!/1!4B&69;:>F789%&6(<78·,B78#%#'&)5./K
sø

Ñ^K	µbD # !4/.P ( !B7F!B&69;:>F789'&)(H78·»,BN78#%#%&65?/.#G!/.P>= &6#G!/1!B&69;:>F789'&)(H5?,7*B'!$9%5?B8d^9;:.7*/
&)#M!/1!B&69;:>F789'&)(H78·»,BN78#%#%&65?/K
&"/!$66[d9;:.7G#%789	5$DZDn5?B%>F=."!$#onÕ4Ô
o4KGÓnÔ(

=

(

&)#07*/.7*B%!$9%78PO[C9;:.7<B%=.678#p

Ú Ù Ò , !B7MDn5?B%>F=."!$#*K
{^K	uEB5?,^5#%&69%&65?/!$#%9;!$9%7M3!4B&"!O.678#
r(
7ÿ
,

!/.P

¨

#

²

Ñ^K	µbD # !/.P (
!HDX5.B%>F=.2!^K

Ú Ô<!4B7MDX5.B%>F=.2!+#*K
!B7]!4B&69;:>F789%&6(F78·»,BN78#%#%&65?/.#<!/.PÍ &)#<!CB78"!$9%&65?/T5?,^7*B%!$9%5.B8d9S:.7*/

1
K	µbDdi # di ( !/.Pvi %
!/.PÄaOi # ¸þi (>] i %

ø

!B7ÈDX5?B'>]=."!$#d#%51!B7a 
r8K

i #

rÇdÅaOi

# wZi (

r8daOi

# k

i (

r8daOi

# Â

i (

#

r8d-ai

Í
# ;

&)#

(

i (

r

u!B7*/49;:.78#%78#M:!*347<9;:.78&"BM=.#;=!$>F7*!/.&"/.0U!/.PU5.,7*B%!$9'5?B#A:!37G9;:.78&"BG=.#;=!+-,B&65?B&69[!/.P!$#%#%5.(8&"!R
9%&63.&)9[C~	&69;:19S:.7G&ËDbR9;:.7*/4R786#%75.,7*B%!$9'5?BHà¸¨á0&637*/Á)5$~ 78#%9	,B&65?B&69[K
÷ªnÕÔ ¨

nÕÔ ¨
&6#W!#S=O.#%7895+DA9;:.71Dn5?B%>F=."!$#F5?/.6[wB7SDn7*B%B&"/.0¨9%5(*=B%B7*/49#%9S!$9%7C3!B&"!O.678#*K
Y	:.78#%7ÈDX5.B%>F=.2!+#_!4B7G(*!$6678PÄÒ8Ó Ú Ó , ²8ÕÔ ¨ ( Ù6Ú ÒVK
ð @?

òW|,A[W{ôCBED

|M)5+D9;:.7 #%[>FO56#E&"/F9S:.7_!+2,:!4O789E5+DDn5?B%>F=."!$#Å:!37 9;:.78&"B=.#;=!$>F7*!/.&"/.0<~	&69;:\9;:.7 &ËDbR9;:.7*/4R786#%7
5?,^7*B%!$9%5?
B i # ¸þi (>] i % O78&"/.01!/1!OOB783.&"!$9%&65?/WDX5?BGaOi #Mk i ( rwQa  i #'k i % r8KXN!$(V:1/.=>F7*B&6(*!$#%9;!$9%7
3!4B&"!O.6î
7 r+
7ø Ú Ô<:!+#A!HI/.&69%7]B'!/.07ÔSÖ×-aOr.r&jq¯P ] o ]CFGFHF] ¿	I>°.d?~M:.7*B7
¿I*6PK
Y:.7Dn5?B%>!+E#%7*>!4/9%&6(8#F5$DA!TP5?>!$&"/zP78#%(*B&",.9%&65?/ ! j a ùJ]ùJ]ú5] Ü*Ó ]ûª]üª] <r&6#0&637*/z&"/
9%7*B%>\#	5$DÅ!/T°	L
| Köp
M±|ON

{2B`ôCBV{=ñQP -R ST7

ge , Ô , X
²y?
( Ö
Ü*ÓnÛbÕÖ b

Û"Ò Ú Ò , Ó Õ²FÒVÓ Ú Ó , Ò

`ÕÖ/³© , Ó ,
W
Y

Ô ¨ Û Ö
Û"Ò8ÓnÛ Ü§nEÛbÖÛbÓ , (.ÓnÕ F
¨ Ú ÓnÕÖ¨ÛeÒ ÚVU ¸³ ÓO( 
Ø Ù-,GW K jaEX ]Y][Z r W
Û"Ò Ú Ò , Ó Õ ²ÛbÖ Ø (.Ó ¦*Ú4Ù ( , Ò W	Ú Ö© Z p\X] Y ¸ _{ ^ eÛ Ò Ú Ö ,a` 
Ó ÒVÓ Ú Ó ,

µ/ß9;:.7TDX5665$~	&"/.0(85?/.#%9;B%=.(89'&)5./w5+DcKdA~ 778·,B78#%#U9S:.7¿/.78·.9U#'9;!$9%7ÁD=/.(89%&65?/}!$#U!¨9;B'!/.#%&69%&65?/
B78"!$9%&65?/&
K $78:
9 dP7*/.59%79;:.7E#%7895$D^O^5?54)7*!4/<3$!$"=.78#¯mÔ( , ] n ÚÙ Ò , °.K=BN9;:.7*B8d)789Z9;:.7MÜye Ú Ô Ú ÜÓ , ÔSÛ"Ò8ÓnÛbÜ
²y(?Ö
Ü*ÓnÛbÕ>
Ö e§p"fé¸gd!$#%#%5.(8&"!$9%78P9%51!C#%78*
9 e]hifO7P7SI/.78PmO>
[ eFOa [

r j Oa [j
keAr8K % ÆG&637*/!/
°l
| K ~ 7	P7SI/.7	&69%#AÓnÔ Ú Ö^ÒVÛbÓnÛbÕÖÔ ,Ù)Ú ÓnÛ ÕF
Ö |ihmXn Y .Xª!+#®!M#%7895$D9;BN&2,.678# ~	&69;:F(8:!B%!+(89%7*B&6#%9%&6(
D=/.(89%&65?
/ |]a  ]o]  } &
r jOa  } 
 Z Oa  ]o r'r8K
Y:.7E#%789Z5$D#%9;!+9%782
# X5$D K 78º=!$6#9;:.7 #%789-5+D^!$6,^5#%#%&"O.67	3!4B&"!O.67_!+#%#%&60?/>F7*/49%:
# X ja ÿ)ø Ú 
Ô ¸
d®%
r Wa  ¦Ú 
Ô ¸p-Tr8K-Y:.7A&"/,=.9 Y 5$q
D K &)#9;:.7	#%7895$D?¼5&"/49®!$(89%&65?/.#5$D#%[.#%9%7*> !$07*/49%#EB7*,BN78#%7*/9'78P
r,
ã s-ñSçn[æ tçbåæýåõ'èõ;ýçnæÉènòËönçbòË"
ý -	*ôýçbòËñ'ô<å$õ;öçbå$æönõ;é æZô$õ;é æEõSöçbå$æönæ¸çã
R

)-  
« -«  -)



 ö 0

!$#G#%789'#*KY	:!$9H&)#d&¯{ # ] { ( ]CFHFCFH] {,u vwu°>
 Y &JDA!/.PQ5?/.6[&JD]aO{ # ] { ( ]CFHFCF] {u v\ucrx
Qy
z z P7*/.549%78#	9;:.7F/?=>FO7*B_5$DÅ7867*>F7*/49%#M&"/
ù
ù K
xz7GP7SI/.7<9;:.7G9;B'!/.#%&69%&65?/UBN782!+9%&65?
/ |Up_X) Y VX ¸{dw5+DK O[Cp
|]a ]o]  } r&jU_|}
~



v

û a -rÇd~A:.7*B7

¿VaO ] | ]  } r ]

_[o hj| k

~A:.7*B7 ¿opX]~m>X¸d&6#G9;:.7<9SB%!/.#%&69%&65?/B78"!$9%&65?/ÁDn5?BÀ¼¸5&"/49`!+(89%&65?/.#*~m5$D®O^59;:T#%[.#%9%7*> !/.P
7*/43?&"B5?/>\7*/9 !$07*/49%#*K-Y:.7	78·?&6#%9'7*/9%&"!$º=!/49%&JI(*!$9%&65?/>@!¹$78#9;:.7A!+(89%&65?/.#5$D7*/43.&2BN5?/>F7*/49®!$07*/49%#
=/.(85?/49;B56"!O.67d#'&2/.(87.|]aO ][oH]  } r&)#9SB%=.7d$&JD9;:.7*B778·?&6#%9'##%5?>F7¼¸5&"/49Å!+(89%&65?/H5$D7*/3.&"B5?/>F7*/49E!$07*/49%#
#;=.(V:Á9;:!$9 9;:.7H(85?>FO.&2/.78P@¼¸54&2/49A!$(89'&)5.
/ |)j o  o	 >!¹$78
# ¿8Oa  ] | ] y})r_9;B%=.7K
o	
Y:.719;B%!/.#%&69%&65?/ÂB78"!$9%&65?
/ ¿F&6#W!¿(85?/¼N=/.(89'&)5./m5$DG9;:B787UB78"!$9'&)5./.
# eH
d  !/.P ü &
d ¿8Oa  ] | ]  } A
r j
eFOa  | y}Ër
Oa  | y}Ër
a |r8KÆÈ&)347*/U!/1!$(89'&)5.Z
/
{

j
a


8
r
?
d
F
!
*
(

=
'
B

B
*
7

/

9
%
#
;
9
$
!
%
9
7


F


!
.
/
U
P
.
/
8
7
.
·
M
9
%
#
;
9
!$9%7
] ]
k
] ]
kfü
]M]
 } d.678\
9 ~q.Oa *r !/.P ú Oa  ]  } rEP7*/.549%7A9S:.7A3$!$"=.7<5$D-9S:.7`,B78(85./.P&)9'&)5./@DX5?B'>]=."!  !/.PC7S¶78(89Dn5?B%>F=."!
+
5
D
J


{
dB78#;,^78(89%&63786[K

e=pX)>~kVX
¸{dÂ&6#A9;:.7*/CP7SI/.78PQO4
[ p
FaO

r j
] | ]  }&

e

~:?aOr kú aO ]  } r _




H

P7SI/.78#9S:.7(85?/.#'9;B%!$&"/49%#<5?/z9;:.7C(*=B%B7*/49<#%9S!$9%7!/.Pm/.78·.9]#'9;!$9%75+DE¼¸54&2/49]!+(89%&65?/.#*KeD=BN9;:.7*B
7*/.#;=B78#Z9;:!$9Z!$(89%&65?/.#Z~	&69;:M&"/.(85?/.#%&6#%9%7*/497S¶78(89%#(*!//.59ZO7	,7*BÉDn5?B%>\78PG(85?/.(*=B%B7*/49%6[d!$#eÄB78P=.(878#
9%5FD!$6#%7H&ËD	!/4[W,!$&"BM5$DE!$(89%&65?/.#M&"/!M¼¸54&2/49G!$(89%&65?/U:!+#A&"/.(85?/.#%&6#%9'7*/9G7S¶78(89%#*K Y	:.=.#*5d e !$6#%5#'9;!$9%78#
9;:.7MIB#'9	(85?/.P&69%&65?/mab#%787<.78(89%&65?/ 1.rDX5.B	!35&6P&"/.0&"/9%7*B¸DX7*B7*/.(87O^789¸~ 787*/C(85?/.(*=B'B7*/9M!$(89%&65?/.#*K

pX)~kX ¸dÂ&)#<!]DB%!4>F7<B78"!$9%&65?/T7*/.#;=B&"/.019;:!+9A=/.(85?/.#%9;B'!$&"/.78PU3!4B&"!O.678#<>!$&"/9S!$&"/
9;:.78&"B3!$"=.7
K $78"
9 Oa {.rP7*/.59%7<9S:.7G#%789	5$D(85?/.#%9;B'!$&"/.78PU3!4B&"!O.678#A5$DE!$(89%&65?
/ {
KxQ7H9;:.7*/1:!3K7 p
e

aO

r j
] | ]  }&



~A:.7*B7.
ü

j# 

H

aOr
j=r } r


I

]

 2

aO{.r8K


p~¸d7*/.#;=B78#G9;:!+9	(85?/.(*=B%B7*/49<!$(89%&65?/.#M(85?/.#%9SB%!$&"/U!C/.5?/T5$37*B"!,,.&"/.01#%789M5$DE3!BN&2!4O.)78#

!/.P19;:.=.#	#%9S!$9%78#	9;:.7G#'78(85?/.PU(85?/.P&69%&65?/WDX5.B	!35&6P&"/.0&"/9%7*B¸DX7*B7*/.(87O^789¸~ 787*/C(85?/.(*=B'B7*/9M!$(89%&65?/.#p
ü a |rj

~A:.7*B70|
-


(

TVWXW

P7*/.59'78#	9;:.7G#%789¯aO{

#y] { (

476 £<É 6 Ç 6 ÈÊÈ+É

 






& 

r z a {



+ H



aO{ # r%$VaO{ ( rXj&_


r 
(|(|
#] { ( 
k

' ¡U¢v6 ÇË-É£6È

]

{ #.jU
{ ( °?K
!


Ç

Y5O=.&6)PQ!/ h ¯ i
i |
 B7*,B78#%7*/49%&"/.0C9;:.7G9;B%!/.#'&)9'&)5./UB78"!$9%&65?/2|]aO ]oH]  } r 5$D9;:.7]°|}5$DÀ!\P5?>!$&"/
P78#%(*B&",.9%&65?/!öja ù J]ù&]ú5] MÜ8Ó ]ûª]üª] <r8d$~ 7<>F=.#%9	P7SI/.7!F#'789	5$DEO5.567*!/T3!B&"!O.678#G9%5CB7*,B7SR
#%7*/49G9;:.7F(*=B%B7*/49G#%9;!$9')
7 d9;:.7M¼¸54&2/49<!$(89%&65?/T&"/,=.9 o d!/.PQ9;:.7/.78·.9G#%9;!$9'7) } KH|A#G&"/Q.78(89'&)5./71KË{
~ 7HIB#%9GO=.&)6Pm!C9;B%!/.#'&)9'&)5./BN782!+9%&65?/T~	&69;:9;:.7M¼5&"/9G!$(89%&65?/.#H5$D®O59S:U#'[?#%9'7*>y!/.P7*/3.&"B5?/>F7*/49
!$07*/49%# !$# &2/,=.9M!/.P9S:.7*/1B78P=.(87G&69®9'5\!È9;B%!/.#'&)9'&)5./1B78"!$9%&65?/@~	&69;:C5?/.6[<¼5&"/49_!+(89%&65?/.# 5$D#%[?#'9%7*>
!$07*/49%#	!$#	&"/,=.9*K
[ pA!+#%#;=>F7!$(89%&65?7
/ {Á&)#H&6P7*/9%&JI78P
¡ 5&"/9<!$(89'&)5./U&"/,=.9%#F!B7B7*,B78#'7*/9%78Pz&2/T9;:.7\DX5665$~	&"/.01~	!*C
O4[!¨/?=>FO7*B  !/.P(*!/O7Q,7*B¸DX5?B'>F78PO4[w!$07*/4>
9 Eö
K { &6#19;:.7*/P7SI/.78P9%5mO7z9;:.7Q!$(89%&65?/
RK

0¨§ª©J« õ  õ

¦

5$D`!+07*/9Ed&JDA9;:.7U/.=>FO7*BH78·»,BN78#%#%78Pm&"/mO.&"/!B[mO[Ä!T#%789F5$DGO5.567*!/¨3!BN&2!4O.)78#Ve  dE=.#%78Pm9%5
B7*,B78#'7*/9	9S:.7]!$(89%&65?/.#5$
D d&6#M78º»=!$9%5  KEuB5?,^5#%&69%&65?/!$#'9;!$9%7G3$!B&"!O.678#`!4B7<B7*,B78#%7*/49%78PO[1!
#%&"/.067O^5?567*!/¿3!B&"!O.67dZ~A:.&667/.=>F7*B&6(*!$E#'9;!$9%7H3!B&"!O.678#F!B7B7*,B78#%7*/49%78P&"/QO.&"/!B[QO4[!@#%789
5$DEO5.567*!/13$!B&"!O.678#*K
$78¢
9 e ]^___] e £ ¤£ !/.j
P e"¥ ]_^__] e¦¥ £ §C£ P7*/.59%7F#%789%#M5$D®O^5?567*!/T3$!B&"!O.678#<=.#%78P9%51B7*,B78#%7*/49
9;:.7¼¸54&2/49A!$(89'&)5./5$DZ7*/3.&"B5?/>F7*/49A!/.PC#%[.#%9%7*>!$07*/49%#*KZ=BN9;:.7*B8d.678
9 [,I¨ © !/.
P [ } I¨ © P7*/.59'7A9;:.7 ±$´Ó e
O5.567*!/¨3$!B&"!O.67U=.#%78P¨9%5B7*,BN78#%7*/9H#%9;!$9'73!BN&2!4O.)Z
7 r  
U÷ø&2/¨9S:.7(*=B%B7*/49!/.PÏ/.78·.9<#'9;!$9%7K
Y	:.7GO5.567*!/@3!B&"!O.678#A!4B7	5?BP7*BN78P~	&69;:\9;:.7A&"/,=.9 3!4B&"!O.678# IB#%9*d+DX54)65$~ 78PWO4[!/@&2/49%7*B67*!3.&2/.0
5$D9;:.7<O5.567*!/Á3!B&"!O.678#G5$D(*=B%B7*/49	#%9S!$9%7G!/.PU/.78·?9M#%9;!+9%7A3$!B&"!O.678# p
e

e

 «
 ªFCFCFª

[ I#
ª

[ I# ­
ª

 £ ¤£ ª

[ } I#

 ª

0ª#FHFCFª

e¦¥

[wI¬  ª


[ }

 ªFCFCFª

[ } I# ­
ª

e¦¥

ªFCFCFOª

[ I¬ ­

£ §C£
¬I





FHFCF
­

­
ª

[ } I¬ ­

]

~A:.7*B7V®¯ &6#]9S:.7/?=>FO^7*B<5+DO^5?54)7*!4/Q3$!B&"!O.678#=.#%78P¨9%5UB7*,B78#'7*/9F#%9;!+9%7F3!B&"!O.67ZrH¯	!/.PQY¨&)#
78º=!$9%5 z ù J z KY	:.7	(85./.#%9;B%=.(89%&65?/\5$D |m
 &6# º»=.&69%7#%&">F&62!4BE9'5G9;:.7	(85?/.#%9SB%=.(89%&65?/H5$DM|m&"/.78(89%&65?/î1KË{K
|G/ h ¯ ii B7*,BN78#%7*/9'&2/.0m!650&6(*!$M78·,B78#%#%&65?/ &)#1O=.&6691&2/Â9;:.7T#%9;!/.P!4BPm~	!*[an B[?!/49*dMo*p´rÇK
|GB&69;:>F789%&6(<78·,B78#%#'&)5./.#`!BN7`B7*,BN78#%7*/9'78P!$#	6&6#%9%#5$D h ¯ ii #AP7SI/.&"/.0C9;:.7G(85?B%BN78#;,5?/.P&"/.01O.&"/!B[
/.=>]O^7*B8KEY	:.78[1(854)"!,.#'7<9%5#'&2/.04)7 h ¯ ii #M~A:.7*/UBN782!+9%78PO4[W!4B&69;:>F789%&6(]BN782!+9%&65?/.#*K
Y5UO=.&66P!/ h ¯ ii e
 P7SI/.&"/.0Q9;:.7@(85?/.#%9;B%!+&2/49%#H5$D®9;:.7H¼5&"/9F!$(89%&65?/.#*d~®7C/.7878PÄ9%5B7SDn7*BG9%5
9;:.7H3!$"=.78#G5$DE9;:.7FO5.567*!/T3!BN&2!4O.)78#<BN7*,B78#%7*/49%&"/.019;:.7]!$(89'&)5./.#*
K $789 o °a -r	O^7F9;:.7GD=/.(89%&65?/T9;:!$9
>!,.#G!/!$07*/4.
9 m9%5C9;:.7<3$!$"=.75$DE9;:.7O^5?567*!/¿3!B&"!O.678#<B7*,BN78#%7*/9'&2/.0T&69%#`!+(89%&65?/!/.P)78

9 ¾a {?r
O7G9S:.7G&)P7*/49%&JI7*B3!$"=.7<5+DÀ!$(89'&)5.%
/ {
K=BN9;:.7*B 6789 ~ Oa {.r !/.P ú  Oa {.rP7*/.59%7 h ¯ ii B7*,B78#'7*/9;!+9%&65?/.#
5$D9;:.7<,B78(85?/.P&69%&65?/!/.P17S¶78(89 Dn5?B%>F=."!F5$DE!/1!$(89'&)5.
/ {K e  &6#A9S:.7*/10&637*/1O4[ p


e:
 j


×?Ó
û °a -r

o

a-r&j=¾aO{?r&Â

~
 aO{?r k

ú  Oa {.r± _

j
Z

{+


°59%7G9;:!$9 6 50&6(*!$Z5?,^7*B%!$9%5?BN#_/.5$~P7*/.549%7G9;:.7G(85?B%BN78#;,5?/.P&"/.0 h ¯ ii 5?,^7*B%!$9%5?BN#*K
|G/ h ¯ ii B7*,B78#%7*/49%&"/.0C9;:.7MDB'!>F7<B78"!$9%&65?/ }
 (V:!4/.078#A&"/T!F#%&">F&6"!B	~	![Cp
U
 j




I


v²

a


×?Ó
û °a -r

a o aZr'j=¾aO{?r&Â

r>
>
3 aO{.r%r%rÂþ }I jUaIC
]

k
Z

{+


~A:.7*B7>a{?rÈ&)#@9;:.71#%789F5$DA(85?/.#'9;B%!$&"/.78Pm3!4B&"!O.678#5$DG!$(89%&65?/Q{Q!/.PaIZj y}I 78·,B78#%#%78#@9;:!$9!$6
(*=B%B7*/49A!/.PU/.78·.9	#%9S!$9%7<O5.567*!/Á3!B&"!O.678#GB7*,B78#%7*/49%&"/.
0 r!B7<,!$&"B~&)#'7<78º=!$nK®Y	:.7G78·,B78#%#'&)5./
r>

3 Oa {?r783$!$"=!$9%78#	9%v
5 mÔ ( , 5?.
B n ÚÙ Ò , !/.P1&6#ABN7*,B78#%7*/49%78PO4[9;:.7 h ¯ ii DX5?B mÔ ( , 5?.
B n ÚÙ Ò , KEY	:.7
!$(89%&65?/C&"/49%7*BÉDn7*B7*/.(87F(85?/.#%9;B'!$&"/9 ü  &)#M0&637*/1O4[p
ü

j




a{

a

# ]  ( r
 ù

{
# ] ( r
>a # ]  (

o

a # &
r jU¾aO{ # &
r Â

(

r
RR

o

a ( r

jU
¾aO{ ( ±r  k
!



 ö 0




a{

a

r 

# ]  ( 

o

)-  
« -«  -)

a # r&jU¾aO{ # r&Â

a ( r
o

(

ú

r 
>a # ]  (
#] { ( 

jU
¾aO{ ( r± ]
!

r

~A:.7*B7*a° #]  ( r&jq¯»aO{ #y] { ( r z aO{ #] { ( r
 û a° # r û a ( r k aO{ # r2$VaO{ ( r j#
&°?K
!
&"/!$66[U9S:.7 h ¯ ii B7*,B78#%7*/49%&"/.0C9;:.7G9;B%!/.#'&)9'&)5./UB78"!$9%&65?/ |
6
&
A
#
S
9
.
:
<
7
8
(
?
5

/
%
¼
=/.(89%&65?/15+D <
e  d 
  !/.P

	
~
6
&
;
9
1
:
$
!
8
(
%
9
6
&
?
5
Á
/

3

!

B
"
&

!
.
O
6

8
7
M
#
$
5

D
;
9
.
:
G
7
*
7

/
.
3
"
&

B
?
5

/
F
>
*
7
4
/
G
9
$
!

0
*
7
4
/
%
9
#
8
7
?
·
6
&
%
#
%
9
*
7
4
/
%
9
"
&
$
!
6

6

U
[

º

=

!
4
/
%
9
J
&

I
8
7
M
P
p
ü
|  jU\e ]HFCFCF] e £ ¤£>_ e  k
³ ´ñ'´Y,µ^ôCBaôCB)i{¶B¨{ ·Qô_¸W|j¹µW{VCBaôCBV{

 

k

ü _

xH|-ôCB)i{

Y	:.7<!$605.B&69;:>F#	~ 7<=.#%7MDn5?B07*/.7*B%!$9'&2/.01=/.&637*B#;!+-,."!/.#A!$6(85?/.#'&)#'9A5$D!O!$(8¹~	!BPC#%7*!BN(V:@DB5?>
9;:.7M#%9;!$9'78#E#;!$9'&)#NDX[.&"/.0]9S:.7A05.!$(85?/.P&69%&65?/C9'5<9;:.7M#%9;!$9'78#E#;!$9'&)#NDX[.&"/.09;:.7M&2/.&69%&"!$(85?/.P&69%&65?/KXNE>@,.&2B¸R
&6(*!$E#'9;=.P&678#<&"/Ä>\5?P78(V:.78(8¹&"/.0:!*347#;:.5$~A/T9;:!$9G9;:.7C>F5#%9G(85?>@,.)78·z5?,7*B%!+9%&65?/TDn5?BM9;:.&6#]¹4&"/.P
5$D	!$605?B&69;:>F#F/.5?B%>!+)6[&6#<9%5CI/.Pz9;:.7 Ø Ô , Û ¨FÚ × , 5$D	!C#%789<5$D 3?&6#%&69%78P¨#%9;!+9%78# J a ¬ !4/¼N!/¿789<!$nK"d
o*pp4qr8K
M±|ON

\·| T»¼	Û ¦, Ö Ú Ön+]K
Ò , ÓEÕ²GÒ8Ó Ú Ó , Ò¯> z .
VX k

{2B`ôCBV{º?»P´xµ|\B°A

Ø Ô , Û ¨FÚ ×

,

Õ²

J

ÛeÒ<Ó´e

,

jyaEX
 o 


]Y][Z r Ú Ö©
 } 
 Z aO [
Y]
] o

r

Ú Ò , Ó Õ²@ÒVÓ Ú Ó , Ò
_  } 


J

°b

J

hX
W

Ó´e
,

|w,BN78&2>@!$07E&6#Z#;!$&6PF9%5	78·.&6#%9*d$&JD&69Z&)#/.5?/.7*>,.9[K°59%7E9S:!$9#%9;!+9%78#-!$"B7*!$P[<O^7865?/.0&"/.0<9%5 J (*!/
!$6#%5FO7A!G,!BN95$D9;:.7	,B78&">!$07M5$D J KZ|A#%#S=>F7	9;:!$99S:.7	#%789E5+D3.&)#'&)9'78P#%9S!$9%78#!B7AB7*,BN78#%7*/9'78PO[
!/ h ¯ ii 78·,B78#%#%&65?/ J  5./1/.78·?9M#%9;!$9'7A3$!B&"!O.678#<!/.P19;:!$9dDn5?B &69%7*B'!$9%&65?/1,=B%,^5#%78#*d
~ 7A~	!/49	9%5
07*/.7*B%!+9%7A9S:.7<,B78&">!$07 ~  !$6#%578·,B78#%#%78P1&"/1/.78·.9 #%9;!$9%7M3!4B&"!O.678#*KE
5?B !F>F5?/.56&69;:.&6(<9;B'!/.#%&69%&65?/
B78"!$9%&65?/ |
7 p
 ~ 7G9;:.7*/C(*!$6(*=."!$9%K
½

j

aO [ ¾

~

j

 ¾o } _ ½ 

} _ | k

r

G¿±[\
¾ 3:[ ¾ <} À
J

~A:.7*B7 ¾o d"[
¾ !4/.PÁ[/
¾ }-P7*/.549%7F&2/,=.9d(*=B%B7*/49M#%9;!$9%7F!/.PQ/.78·?9G#'9;!$9%7H3!B&"!O.678#*dZ!/.Pm¿±[,
¾ 3:[
¾ } À P7*/.549%78#
9;:.7F#;=O.#%9'&)9S=.9%&65?/T5$DE(*=B%B7*/49A#'9;!$9%7H3!B&"!O.678#H~	&69;:/.78·?9M#%9;!$9'7<3!4B&"!O.678#*K<Y	:.7F#%789M78·»,BN78#%#%78PQO[
7 AO^7865?/.0#	9%5H9;:.7G,B78&">!$07	5+D J !/.P
½  (85?/.#%&6#%9'#E5$D#%9;!+9%7	&"/,=.9A,!$&"B#<Oa  ]o rÇdDX5?BÀ~A:.&6(V:@9;:.7M#%9;!$9'
9;:.7	&"/,=.9 o >![H(*!=.#%7A!M9;B'!/.#%&69%&65?/HDB5?> 9%5<!M#%9;!+9%7 &2/ J KY	:.7&2/,=.9 5$D!/°|B7*,BN78#%7*/9'&2/.0
!Q,."!//.&"/.0wP5.>!$&"/m&6#1!#%7895$D<!$(89%&65?/.#KY	:?=.#dDn5?B!Q,."!//.&"/.0ÂP5?>!$&"/m9S:.7178)7*>\7*/9%#1&"/ ½ 
!B7H#%9;!$9'7SR¸!$(89%&65?/U,!+&2BN#*KGY	:.7F07*/.7*B%!$9%78P=/.&637*B#;!$E,."!/.#G5+DE9;:.7]=/.&637*B#S!$E,."!//.&"/.0!$605?BN&)9S:>F#
,B78#%7*/49%78PF&"/F9;:.7	/.78·.9#%78(89%&65?/F!B7 #%789%#Z5$D9;:.78#'7®#'9;!$9%7SR¸!$(89'&)5./],!+&2BN#*KZxQ7	B7SDX7*B9%5G9;:.7#%9;!$9'7SR¸!$(89%&65?/
,!$&"B#<!$#HÒ8Ó Ú Ó , ³ Ú Ü*ÓnÛbÕÖQÔ ( -Ù , ÒVdO78(*!=.#'79;:.78[U!$#%#'5?(8&"!$9%7F#%9S!$9%78#	9%51!$(89%&65?/.#M9;:!$9M(*!/O7,^7*BÉDX5.B%>F78P
&"/19;:.78#'7G#%9;!$9%78#K
Y:.7 h ¯ ii B7*,B78#'7*/9%&"/.0T9;:.79;B%!4/.#%&69%&65?/B78"!$9%&65?/ |
 !/.Pz9;:.7F#%789G5$D®3.&6#%&69%78PQ#%9S!$9%78# J  9%7*/.P#
9%5FO7M2!4B07d!/.P!F>F5?BN7	7S(8&67*/9 (85?>@,=.9;!$9%&65?/@(*!/O^7A5?O.9S!$&"/.78PUO[,7*B¸DX5?B'>F&"/.0]9S:.7A78·.&6#%9%7*/49%&"!$
º=!/9'&ËI(*!+9%&65?/Q5+D/.78·.9<#'9;!$9%7F3!4B&"!O.678#7*!B6[&"/Q9;:.7C(*!$6(*=."!$9%&65?/an =B(8:789F!$nK"dEo*p4po¾ ¬ !/¼%!/
789-!$nK"d.o*pp4qr8KY5AP5	9S:.&)#d$9;:.79;B%!/.#'&)9'&)5./<B78"!$9%&65?/H:!$#Z9%5	O7 #;,.6&69-&"/49%5`!_(85?/¼N=/.(89'&)5./<5+D^,!BN9%&69%&65?/.#
|  j |  #'kFCFHFk | bC!$6)5$~	&"/.0C9;:.7<>F5.P&JI78P(*!+)(*=."!$9'&)5.C
/ p
½

j

aO [ ¾

}b _ C
|  b kFHFCF Oa [ ¾ } _ |  (k
(

~

j

 ¾o } _ ½ 

Rt

aO [ ¾

} _ |  #Mk
#

J

r%r

FHFCF

rG¿±[\¾ 3q[ ¾

}À

¦

0¨§ª©J« õ  õ

Y	:!$9 &6#*d |  # (*!/1BN7SDX7*B9%5!+)3!B&"!O.678#*d |  ( (*!4/1B7SDX7*B_9%5!$63!BN&2!4O.)78#M78·.(87*,.9>[ ¾ } # d |  % (*!/1B7SDn7*B 9%5
!$63$!B&"!O.678#G78·?(87*,.9[ ¾ } # !/.P#[ ¾ }( !/.PU#%5@5?/K
|M#Z#;:.5$~A/<O4[ ¬ !4/¼N!/H789!$nKao*pp4qr9;:.7(85?>,=.9;!$9'&)5./<9'&2>\7_=.#'78P]9'5A(*!$6(*=."!$9%79;:.7®,B78&">!+07 &)#
!G(85./378·\D=/.(89%&65?/C5+D9S:.7`/.=>FO7*B5$D-,!B9%&69%&65?/.#KEY	:.7GB7*!$#%5?/]DX5?B9;:.&6# &6# 9;:!$9*d+DX5?BÀ#%5?>F7G/.=>]O^7*B
5$DA,!B9'&)9'&)5./.#*d!@D=B9S:.7*BG#;=O^P&)3.&6#%&65?/m5+D_9S:.7,!B9%&69%&65?/.#F~	&66	/.59<B78P=.(87C9;:.7C9%59;!$Z(85?>,.678·.&69¸[d
O78(*!4=.#%7G9;:.7M(85?>,.678·?&69[C&2/49;B5.P=.(878PUO4[9;:.7M2!4B07*BE/.=>FO7*B 5+D h ¯ ii 5?,7*B'!$9%&65?/.# &6#_:.&60?:.7*B_9;:!/
9;:.7<B78P=.(89'&)5./15$D9;:.7G(85?>,.678·.&69¸[T5$D-7*!$(8: h ¯ ii 5?,^7*B%!$9%&65?/K
Y:.7`B7*,BN78#%7*/9S!$9%&65?/@5$D-9;:.7M650&6(*!$78·,B78#%#%&65?/@Dn5?BÀ7*!$(V:1BN782!+9%&65?V
/ e<\d }!/.P ü :!$#AO^787*/C(*!B7SR
D=.)6[F(8:.5#%7*/H#;=.(8:<9S:!$9-&69Z(85?/.#%&6#%9%#5+D!M(85?/¼N=/.(89'&)5./<5+D#;=O78·,B78#%#%&65?/.# 9;:!+95?/.6[B7SDX7*B9%5G!	#S>!$6
#;=O.#%7895$DÀ/.78·.9	#%9S!$9%7M3!B&"!O.678#*K Y	:.&6#AB7*,BN78#%7*/9S!$9%&65?/1!$665$~	#A=.#M9%5F#%5?B9 5?=.9 9;:.7G#;=O^78·»,BN78#%#%&65?/.#
&"/1(85?/¼%=/.(89%&637F,!B9%&69%&65?/.#M~	&69;:1/.7*!B 5.,.9%&">!$#%&6878#M9;:!$9	#S!$9%&6#Dn[9;:.7]!4O5$37GB78º»=.&"B7*>\7*/9%#K
TVWXWÃÆ'ÊWÇ 6 Å
 Ä


Â

 Æ

6 ÉÇÊ 80Ç58 Ê

  &¥
Å

 É4"È È
8O¥ V
Ç

xQ7 IBN#%9P78#%(*B&"O7G9~ 5G,B&65?BE!$605.B&69;:>F#Dn5?B h ¯ ii R¸O!$#%78PU=/.&637*B#;!+,."!//.&"/.0!/.PP&6#%(*=.#%# ~A:.&6(8:
¹4&2/.Pz5$D®P5?>@!$&"/.#G9;:.78[!BN7]#S=.&)9S!O.67FDX5.B8KGxQ7F9;:.7*/,B78#%7*/49<!1/.78~!$605?BN&)9S:> (*!$6)78PÕ Ø ÓnÛ ¨ Û"Ò8ÓnÛbÜ
ØÙ6Ú Ö
ÖÛbÖ×G9;:!$9 &6#M#;=.&69;!O.67GDn5?B #%5.>F7GP5?>!$&"/.#A/.549	(85$37*B78PUO4[9;:.7F,B&65?B	!$605.B&69;:>F#*K
Y:.7®9S:B787	=/.&)347*B#;!$,.2!4//.&2/.0F!$605?B&69;:>\#P&)#'(*=.#%#%78P1!B7	!$6O!$#%78P5./]!4/<&69%7*B'!$9%&65?/H5$D,BN78&2>]R
!$07(*!$6(*=."!$9%&65?/.#*KEY:.7E&69%7*B%!$9'&)5./G(85?B%BN78#;,5?/.P#9'5A!A,!4B%!$6678O!$(V¹4~	!BP<OB7*!+P9;:4RnIB#%9Z#%7*!B(8:G#'9;!B9R
&"/.0!$9H9;:.705.!$-#'9;!$9%78#<!/.Pz7*/.P&2/.0z~A:.7*/Q!$6E&"/.&69%&"!$ #%9;!+9%78#<!B7F&"/.(8"=.P78Pw&"/Q9S:.7#%789G5$D	3.&)#'&)9'78P
#%9;!+9%78#<ab#%787G&60?=B7Fr8KY	:.7<>!$&"/ÁP&Ë¶7*B7*/.(87FO789~ 787*/19;:.7<!+)045?B&69;:>F#	&6#M9;:.7G~	![9;:.7],BN78&2>@!$07
&6#AP7SI/.78PK

Pre3
Pre2
Pre1

Init

Goal

&60?=B7<p|`/@&662=.#'9;B%!$9%&65?/Á5$D9;:.7<,!B%!+)678O!$(8¹~	!BNPWOB7*!+P9;:4RnIB#%9 #%7*!BN(V:C=.#%78P1O[ h ¯ ii R¸O!$#%78P
=/.&637*B#;!$Z,.2!4//.&2/.0U!+)045?B&69;:>F#*d.(85?>@,=.9%&"/.0W,B78&">!+078#`uB7oduEBN7*{!/.PUuEBN7*ÑK

É ´ñòCôCµ«V{5·W{2ÊmË

|,Ì»´xµ|\B°A

\·|

 "& >!$9'9%&789]!$nKEaopp´!r&"/9SB5?P=.(878#F9~ 51P&J¶7*BN7*/9F¹&"/.P#F5$D_,BN78&2>@!$078#<(*!+)678PÒ8ÓnÔÕÖ×!4/.Pg ;, Ú
Ø Ô , Û ¨FÚ × , ÒVKÀ|#%9SB5?/.0,B78&">!$07H&6#	P7SI/.78PQO[Cp
M±|ON

\·| Tm¼	Û ¦,

Ö Ú Öfon+ÅK jaEX
Ò , ÓEÕ²GÒ8Ó Ú Ó , Ò¯ z .
VX k

][Y]Z

r Ú Öª© Ú Ò , ÓÕ²GÒVÓ Ú Ó , Ò
aO ][o 
r h J °\b
Y_Z

J

h

ÒVÓnÔÕÖ4× Ø Ô , Û ¨FÚ × , Õ² J ÛeÒ<Ó´e ,
 o 

Y	:.=.#*d$Dn5?BZ!G#%9S!$9%7dMO7865?/.04&2/.0F9%5G9S:.7®#'9;B5?/.0<,B78&">!+07	5$D!M#%7895$D#'9;!$9%78# J d9;:.7*B7 78·.&6#%9%#®!+9)7*!+#%9
5?/.7!+(89%&65?/ o ~A:.7*BN7!$6E9;:.7@9;B%!/.#%&69%&65?/.#ÈDBN5?> !+#%#%5.(8&2!+9%78PQ~	&69;: o )7*!+PÄ&"/49%5 J K 5?/.#'&)P7*BÈ9;:.7
X

W

Ó´e

{2B`ôCBV{ºÍ»PòCôCµ«V{5·Q´xµ|\B°A

±

,

Ryx

 ö 0



)-  
« -«  -)

78·!>,.67	#;:.5$~A/F&"/F&60?=BN7A´KY	:.7	P59'#E!/.P!B%BN5~#-&"/F9;:.&6#ÀI0?=B7	P7*/.59'7	#%9;!$9'78#E!/.P9;B%!4/.#%&69%&65?/.#
Dn5?BA!4/°|~&)9S:Q!#'&2/.04)71/.5?/4RP789%7*B'>F&"/.&)#'9%&6(W!$(89'&)5./K<
5?B	9S:.7#%789M5$D®#%9S!$9%78#GÆ<T#;:.5$~A/T&"/9;:.7
I0?=B7d49;:.7	9;:BN787®#'9;!$9%78#E:!3.&2/.0F!M9;B%!/.#'&)9'&)5./F&"/9%5FÆ<F!B7 9;:.7#%9;B5?/.0<,BN78&2>@!$07	5$DÆ<UaX&2/.P&6(*!$9'78P
O4[W!F#'56&)PT786)&",.#%7C!/.P1"!O786678PÄ,B7o*rÇd!$#A!$69SB%!/.#%&69%&65?/.# DB5?>9;:.78#'7<#%9;!+9%78# )7*!+PU&"/9'5Æ<K
| Î |,Ì»Ï:µ«|B°A \·| &6#G78º»=!$Z9%51!/15.BP&"/!B[,BN78&2>@!$07!$#MP7SI/.78P&"/²G7SI/.&69%&65?/{KMY	:.=.#*d
Å
&"/1&60?=B7F´!+)9;:.7<#%9SB5?/.0,B78&">!+078#`!4B7<!$6#%5C~®7*!4¹,B78&">!+078#*dO=.9M9;:.7],BN78&2>@!$078#M#;:.5$~A/1O[
P!$#;:.78PC7866&2,.#'78#`!BN7A5?/.6[~ 7*!¹F,B78&">!+078#*d!$# 9;:.7	P!$#S:.78P19;B%!/.#%&69%&65?/.# P5F/.59 #;!$9%&6#Dn[F9;:.7A#'9;B5?/.0
,B78&">!$047<P7SI/.&69%&65?/K

Pre4
Pre3
Pre2
Pre1
GS

&60?=B7<´pM.9;B5?/.0!/.PT~ 7*!¹,BN78&2>@!$07<(*!+)(*=."!$9'&)5./.#*K	.56&6P7866&",.#%78#<P7*/.549%7],B78&">!+078#	9;:!$9M!B7
O59S:<#'9;B5?/.0<!/.PF~ 7*!¹
d$~A:.&667AP!$#S:.78P7866&",.#%78# P7*/.59%7A,B78&">!+078#E9;:!+9E!B7 5?/.6[F~®7*!4¹K
±G/.6[5./.7\!+(89%&65?/&6#]!$#'#;=>F78P9%5178·.&)#'9<&"/9;:.7FP5?>!+&2/KYZB%!/.#'&)9'&)5./.#<(*!=.#%&"/.0!C#%9;!$9%7
9%51O7865?/.019%51!~ 7*!¹T,B78&">!$07B%!+9;:.7*B	9S:!/U!@#%9;B5./.0W,B78&">!+07!B7FPB%!~A/1P!+#;:.78PK
Y	:.7G#%789	5+DÅ05.!$#%9;!$9%78# &6#G>!B%¹$78P¨à;ÆH.áK

É @?

òCôCµ«V{5·W{2Ê:òCôCµ«V{5·»Ð
ó:DÑBED>´ó)W{u{2B"{5·

|w#'9;B5?/.0	5.B#%9SB5?/.0M(8[?(86&6(A,."!/F&6#9;:.7 =/.&)5./F5$D9;:.7 #%9;!+9%7SR¸!$(89%&65?/HB%=.678# ½ Dn5?=/.PF~A:.7*/H(*!$6(*=."!$9%&"/.0
9;:.7<,B78&">!+078#`/.78(878#'#;!B[@DX5.B (85$37*B&"/.09;:.7G#%7895$DÅ&"/.&69%&"!$Z#%9;!$9'78#]a ½ &6#AP7SI/.78P&"/U.78(89'&)5./Uqr8K
.9SB5?/.0Ä,."!//.&"/.0m5?/.6[m(85?/.#%&6P7*B#1#'9;B5?/.0Ä,BN78&2>@!$078#*KµbD]!z#%78º=.7*/.(875+D`#%9SB5?/.0Ä,B78&">!+078#
#%9;!4B9%&"/.0Q!$99;:.71#%789@5$DA05?!+®#'9;!$9%78#F(*!/mO^7U(*!$6(*=."!$9%78Pd #;=.(8:¨9;:!$9@9;:.71#%7895$DM&2/.&69%&"!$M#%9;!+9%78#F&)#
(85$37*B78PdZ#%9;BN5?/.0Q,.2!4//.&2/.0z#;=.(8(87878P#W!4/.PÏB789S=B%/.#F9;:.7W=/.&637*BN#;!$	,."!/¨(85?/.#%&6#%9%&"/.0Q5+DA9;:.71=/.&)5./
5$DE!$6-9S:.7<#%9;!+9%7SR¸!$(89%&65?/1B%=.678#G5$D9;:.7H(*!$6(*=.2!+9%78P#%9;B5?/.0C,B78&">!$078#*K	±M9S:.7*B~	&6#%7F&69	D!$&66#\an_&2>@!$9%9%&
789A!$nK"do*pp´OrÇK
_5?/.#%&6P7*BF9;:.7C78·»!4>,.67U&"/¨&60?=B7U´Kz|A#P7*,.&6(89%78PÂ&"/m9;:.7@I0?=B7d !T#%9;B5?/.0Q,B78&">!+071(*!/
O7\DX5?=/.P&"/9;:.7HIB#'9<,B78&">!$07F(*!$6(*=."!$9%&65?/dO=.9G5?/.6[Q!C~ 7*!¹1,B78&">!$07@(*!/O7FDn5?=/.P&"/9;:.7
#%78(85?/.PC(*!$6(*=."!$9%&65?/K Y	:.=.#*d#%9SB5?/.0],."!//.&"/.05./.)[@#;=.(8(87878P#	&"/9S:.&)# 78·!>,.67d&JD-9;:.7#%789 5$D&2/.&69%&"!$
#%9;!+9%78# &)#M(85$37*B78PUO4[9S:.7MIB#%9A,B78&">!+07]!/.P19S:.7G#%789	5$D05?!$#%9S!$9%78
# ¼÷	K
.9SB5?/.0,."!//.&"/.0&6#	(85?>@,.)789'7<~	&69;:1B78#S,78(89	9%5F#%9SB5?/.0F#%5"=.9%&65?/.#*KµbDE!<#'9;B5?/.0,."!/178·.&6#%9%# Dn5?B
#%5?>\7\,."!//.&"/.0Q,B5?O.67*> 9;:.7F#%9;B5?/.01,."!//.&"/.0Q!$605?B&69;:> ~	&66®BN789;=B%/T&69*d59S:.7*B~	&6#%7d&69<B789S=B%/.#
R

¦

0¨§ª©J« õ  õ

9;:!$9/.5Q#'5"=.9%&65?/¨78·?&6#%9'#*Km.9;B5?/.0Q,."!//.&"/.0Ä&6#1!$6#%55?,.9%&">!$P=.719%59;:.7UOB7*!$P9;:4RnIBN#%9#%7*!BN(V:K
Y	:.=.#*d!F#'9;B5?/.0,."!/1~&)9S:C9;:.7GDn78~ 78#%9	/?=>FO7*B5$D#%9%7*,.#	&"/Á9;:.7G~ 5?B#%9 (*!$#%7G&6#GB789;=B%/.78PK
.9SB5?/.0F(8[?(86&6(,."!//.&"/.01&)#G!B78"!$·.78P137*B#'&)5./15$D#%9;B5./.0\,."!//.&"/.0dO78(*!4=.#%7<&69G!$6#%5(85?/.#%&6P7*B#
~ 7*!¹U,BN78&2>@!$078#*KF.9;B5?/.01(8[.(86&6(W,."!//.&"/.0TI/.P#]!C#%9SB5?/.01,.2!4/d&JD	&)9H78·?&6#%9'#*K]±M9S:.7*B~	&6#%7d~M:.7*/
=/!O.67M9%5	I/.PC!M#%9;B5?/.0<,BN78&2>@!$07	9;:.7	!$605.B&69;:> !$PP#®!M~ 7*!¹H,B78&">!$07Kµ99;:.7*/F9;B&678#9%5`,B'=/.7
9;:.&6#G,B78&">!$07<O4[WBN7*>F5$3?&"/.01!$6#%9;!$9'78#®9S:!$9	:!*347G9;B%!/.#%&69%&65?/.#M67*!$P&"/.05.=.9	5$D9;:.7<,B78&">!$07F!/.P
9;:.7F#%789M5$D®3.&6#%&69%78PQ#%9S!$9%78# J K<µXD®&69G#;=.(8(87878P#*d9;:.7B7*>!$&"/.&"/.01#%9;!$9'78#A&"/9;:.7,B78&">!+07!B7]!+PP78P
9%5 J !4/.P&69<!$0.!$&"/U9SB&678#G9%5W!+PPQ#%9;B5./.0W,B78&">!+078#*K<µXD®&69MD!+&)6#*d&69<!$PP#<!1/.78~<d~ 7*!¹U,BN78&2>@!$07
!/.PUB7*,^7*!$9%#M9;:.7<,B%=/.&"/.01,B5?(878#'#\an_&2>@!$9%9%&789A!$nK"do*p4p´!r8K
_5?/.#%&6P7*BA!+0?!$&"/19;:.7H78·»!4>,.67]&"/T&60?=B7F´K	Y	:.7F#;:.5$~A/C#%78º=.7*/.(87F5$D®,B78&">!$07H(*!$6(*=."!$9%&65?/.#
(85?=.6PQ:!37<O787*/T(85?>,=.9'78PO4[9;:.7H#%9;B5./.0(8[?(86&6(,."!//.&"/.0U!$605?B&69;:>1K Y	:.7F!$605?B&69;:> ,B7SDn7*B#
#%9;BN5?/.0Q,B78&">!$078#*d&JD`9S:.78[Q78·?&6#%9dE#%5z9;:.7IBN#%9!$PP78Pw,B78&">!+07ÄanuEBN7o*rH&)#@#%9;B5?/.0
KQ°	5Q#'9;B5?/.0
#%78(85?/.Pw,BN78&2>@!$07C78·?&6#%9%#!/.Pm9S:.7~ 7*!¹,B78&">!$047ÄanuEB7*{4rG(*!//.59O^7U,B%=/.78Pm9%5U5./.)[¨(85?/49;!$&"/
#%9;!+9%78#E/.59E:!3?&"/.0H9;B%!/.#%&69%&65?/.#67*!$P&"/.0F5?=.95$D9;:.7A,B78&">!+07A!/.P9S:.7®#'7895$D3?&6#%&69%78P#'9;!$9%78#*KZY	:.=.#*d
9;:.7G#%9SB5?/.0(8[.(86&)(!$605.B&69;:>65?5.¹#DX5.B	!/.59;:.7*B~ 7*!¹C,B78&">!$07K Y	:.&6#G,B78&">!$071anuEB7*Ñ4r®:!+#A/.5
5?=.9%045&"/.09;B%!/.#'&)9'&)5./.#*d~A:.&6(8:U>F7*!/.#9;:!$9	9;:.7G#'78º»=.7*/.(87H5$DÅ~ 7*!¹C,B78&">!$0478#	(*!/UO^7<9%7*B'>F&"/!$9%78P
!/.PC9;:.7G!$605?B&69;:> (*!/BN789;=B%/@9%5<65.5?¹HDn5?B#%9SB5?/.0<,B78&">!$0478#ÈauEBy7 1?rÇKÅµXD-9;:.7	#'789®5+D&"/.&69%&"!$#'9;!$9%78#
!Dn9%7*BE!+PP&2/.0,B78&">!+07`uBy7 1<(85$37*BN#9;:.7A#'789E5$D&"/.&69%&"!$#%9;!+9%78#9;:.7G!$605?B&69;:> #;=.(8(87878P#*d59S:.7*B~	&6#%7
&69<(85?/49%&"/.=.78#\=/49%&6E78&69;:.7*BF/.5T#%9;B5?/.015.B<,B%=/.78P¨~ 7*!¹U,B78&">!+07(*!4/QO7@DX5.=/.Pab&"/Q~M:.&)(8:z(*!$#%7
9;:.7<!$605.B&69;:> D!$&66#;r5?B9;:.7G#%789 5$D-3.&6#%&69%78PU#'9;!$9%78# (85$37*B# 9;:.7G#%789 5$D&"/.&69%&"!$#%9;!+9%78#<ab&"/C~A:.&6(V:Á(*!$#%7
9;:.7<!$605.B&69;:>#;=.(8(87878P#;rÇK
| #'9;B5?/.0C(8[?(86&6(,."!/T5?/.6[U0.=!B%!/49%7878#G,B50?B78#'#A9%5$~	!BP#9;:.7<05.!$-&"/T9;:.7F#%9;BN5?/.0,!B9'#*KAµÉ/
9;:.7G~ 7*!¹C,!B9%#d(8[?(8678#M(*!/15.(8(*=B8K Y5@7*/.#;=B7<9S:!$9 9;:.7],."!/Á)7*/.049;:1&6#I/.&)9'7d~ 7<>F=.#%9A!$#'#;=>F7
9;:!$9G9SB%!/.#%&69%&65?/.#H)7*!+P&2/.05?=.9G5+D_9S:.7~ 7*!¹U,!BN9%#G7837*/49;=!$66[Q~	&66®O7C9;!¹+7*/KY	:.7!$605?BN&)9S:> &)#
(85?>,.6789%7G~&)9S:1B78#;,78(899%5F#%9;B5?/.0F#%542=.9'&)5./.#*d!$#	!F#%9SB5?/.0<#'5"=.9%&65?/1~	&66-O^7<B789;=B%/.78Pd&JD&69	78·?&6#%9'#*K
É @Í

òCôCµ«|{5·ô_¸V^W{2ÊlÒ BAjBaôôCB)i{ z,Ó§òôCµ«V{5·~W{2Ê=òôCµ«V{5·nÐ
óqDEBÑD´sW{8{2B¨{ ·

|G/1&">,5.B9;!/49	B7*!$#%5?/@Dn5?B #'9;=.P[?&"/.01=/.&637*B#;!$Z,.2!4//.&2/.01&6#M9;:!$9A=/.&637*BN#;!$-,."!//.&"/.0U!$605?BN&)9S:>F#
(*!/,BN53.&6P7	#%9;!+9%7SR¸!$(89%&65?/FB%=.678# 9%5G(85?>,.6789%786[:!4/.P)7G!G/.5?/4RP789%7*B'>F&"/.&)#'9%&6(G7*/3.&"B5?/>F7*/49*KY	:.=.#*d
&JD!w,."!/78·.&6#%9%#1Dn5?B1,!$&"/49%&"/.09;:.7T5?5?BÇd`!4/!$07*/49178·?78(*=.9'&2/.0!m=/.&637*B#S!$],."!/~&)6!$6~	![?#
!35&6Pw,!$&"/49%&"/.0Ä&69%#%78JD<&"/49%5Ä9S:.71(85?B%/.7*BF5?B@B7*!$(8:m!/[¨59;:.7*B@=/B78(85$37*B%!O.67UP7*!+P.R7*/.PK.9;B5?/.0
,."!//.&"/.0Ï!4/.Pm#%9;B5?/.0(8[.(86&)(Q,."!//.&"/.0m!$605?B&69;:>F#@(85?/9SB&"O=.9%7UO[m,B5$3.&)P&"/.0Q(85.>,.6789%7 h ¯ ii R
O!$#%78P!$605?B&69;:>\# DX5.B®=/.&637*BN#;!$,.2!4//.&2/.0
K
ÃM/4Dn5?B9;=/!$9'78)[dB7*!+ËR~ 5?BN)P¨P5?>!+&2/.#F(*!/z:!*347P7*!$P.R7*/.P#9;:!+9]!B7C/.59]!$6~	![?#F!35&6P!O.67K
 5?/.#'&)P7*BÇdDn5?B78·»!>@,.)7d.(8:.5?,,^7*B# LB5?O549R¸O!O4[1P5?>!$&"/1P78#'(*B&"O78PQ&"/.78(89%&65?f
/ 1K |M#AP7*,.&6(89%78P
&"/T&)0.=B7d/.5U=/.&637*BN#;!$,.2!4/BN7*,B78#%7*/49%78PQO[!#%789M5$DE#%9S!$9%7SR¸!$(89%&65?/TB%=.678#<(*!/Á0?=!B%!4/9%787H9;:.7
05?!+9%5FO7<B7*!$(8:.78PC&2/1!ÈI/.&69%7G5?B&"/4I/.&69%7]/.=>FO7*B5$D-#'9%7*,.#*d!$#®!+)B786783$!/9M!$(89%&65?/.#	>![67*!$P19%5
!/1=/B78(85$37*B'!O.67<P7*!$P.R7*/.PK
|>F5?B7F&"/49%7*B78#%9%&"/.0T78·»!>@,.)7@&)#<:.5$~ 9%51047*/.7*B%!$9%7!1=/.&637*B#;!+E,.2!4/TDX5.BG!#%[.#%9%7*> 9S:!$9G(*!/
O71&"/Â!O!+Pm#%9;!$9%7dÀ05?5.Pm#%9;!+9%75?B!4/Ä=/B78(85$37*B'!O.671D!$&6)78PÂ#%9;!$9'7¿abP7*!+P.R7*/.Pr8K¨|A#%#S=>F719;:!$9
!$(89%&65?/.#(*!/1O7G78·.78(*=.9%78PU9S:!$9 (*!/1OB&"/.09;:.7G#%[.#%9%7*> DB5.> !4/[O!+P1#%9;!$9%7M9%5!H05.5?P1#%9S!$9%7dO=.9
7*/43?&"B5?/>\7*/9!$(89%&65?/.#F=/4DX5.B9;=/!$9%786[Q(*!4/Ä!$6#%5>!¹$7@9;:.7#'[?#%9'7*>y#%9;![T&2/¨!UO!+PÄ#%9S!$9%75?BÈ7837*/
(8:!/.07M9%5!/1=/B78(85$37*B%!O.67MD!$&6678P1#%9;!$9%7ab#%787M&60?=B7<prÇKÅ°5F#%9;B5./.0]/.5?B #'9;B5?/.0H(8[?(86&6(<#%542=.9'&)5./
RÃ



 ö 0

)-  
« -«  -)

(*!/¨O7CDn5?=/.PdEO^78(*!=.#%7U!/Q=/BN78(85347*B%!O.671#%9;!$9'7(*!/¨O7UB7*!$(8:.78PzDB5.> !4/[&"/.&69%&"!$	#%9;!+9%7KU|G/
78·!>,.67<5$D#;=.(8:1!FP5?>!+&2/¨an!F,5$~ 7*B	,."!/49;r &6#A#'9;=.P&678PU&"/U.78(89%&65?/TK"oKJ{K
Bad States

Good States

Unrecoverable
Failed
States
(Dead-Ends)

&60?=B7]p/p-|GO.#%9;B'!$(89	P78#%(*B&",.9%&65?/Á5$D9;:.7<°	|}5$DE!F#%[.#%9%7*>~&)9S:1=/B78(85$37*B%!O.67<#'9;!$9%78#*K
|G/.59;:.7*BH6&">F&69;!$9%&65?/Â5$DM#%9;B5?/.0Q!/.Pm#'9;B5?/.0(8[.(8)&6(,.2!4//.&2/.0m&6#9S:.71&2/:.7*BN7*/91,78#%#'&2>\&)#S> 5$D
9;:.78#%71!$605?BN&)9S:>F#*KU 5./.#%&6P7*BGDn5?BÈ78·»!>@,.)7C9;:.7CP5?>!$&"/ab²G5?>!+&2/ o*rG&66"=.#%9;B%!$9'78Pm&2/z&60?=B7oPK
Y	:.7GP5?>@!$&"/1(85?/.#%&6#%9'#	5$DXY(/oG#%9;!+9%78#	!/.PU9~ 5<P&J¶7*B7*/49`!$(89'&)5./.#]abP!$#;:.78P!/.P1#%56&6Pr8K
...

IS
0

GS
n

1

&60?=B7oP/p ²G5?>!$&"/Qo4K®Y	:.7°|5+D®!FP5?>!$&"/Á~	&69;:19~ 5!$(89%&65?/.#abPB%!~A/1!+#	#%56&6PQ!/.PUP!$#S:.78P
!B%B5$~	#;r&662=.#'9;B%!$9%&"/.0H9;:.7	,5#%#'&2O.67M65#%#E5+D#;:.5?B9E,."!/F67*/.09S:.#E~A:.7*/F,B7SDn7*B%B&"/.0<#'9;B5?/.0
#%5"=.9%&65?/.#*K µT!/.PUÆ<1!BN7G9;:.7G&"/.&)9'&2!+E!/.P105?!$#%9S!$9%7dB78#;,^78(89%&63786[K
Y:.7#%9;B5?/.0 (8[.(86&)(M!$605?B&69;:>BN789;=B%/.#-! #'9;B5?/.0	,."!/ ¯aOP ] ^½_Ô o¶û r ] aÉo ] ^½ÕÔ oû r ]GFGFHF] aOY:1Go ] ^½_Ô o¶û r°?K
Y	:.&6#,.2!4/G~ 5?=.6P<:!37E!	O78#'9-!/.P<~ 5?BN#%9R(*!$#%7Z67*/.09;:M5$DYZK®=.9Z! #%9;B5./.0®(8[.(86&6(_,."!/î¯»aOP ]û {CÖ û r ]
Oa YV1Âo ] ^½_Ô o¶û r°<!$6#%5178·?&6#%9'#<!/.PU(85?=.6PÄO^7,B7SDX7*B'!O.67O78(*!=.#'7]9S:.7\O^78#%9R(*!$#'7]67*/.09S:U5+DAoF5$DE9;:.7
(8[.(8)&6(Q#'5"=.9%&65?/>![m:!*347!m>F=.(V:Â:.&60?:.7*B1,B5?O!O.&66&69[9S:!/m9;:.7&"/4I/.&69%7Q~ 5?B#'9R(*!$#%7T)7*/.049;:K
.9;B5./.0](8[.(86&6(],."!//.&"/.0~&)6-!+)~	![.#_,BN7SDX7*B 9'5\BN789;=B%/C!<#'9;B5?/.0,."!/d&JD&)978·?&6#%9%#d?78347*/C9;:.5?=.0?:C!
#%9;BN5?/.0F(8[?(86&6(,.2!4/U>![C78·?&6#%9	~&)9S:U!F#;:.5.B9%7*B8dO78#'9R(*!$#%7F,.2!4/167*/.09;:K
[Q!$PP&"/.0Q!/Q=/B78(85$37*B'!O.67P7*!$P.R7*/.P¨Dn5?BM9;:.7P!$#S:.78PÏ!$(89'&)5./Q!/.PÄ>!4¹&"/.0#%56&6PÏ!+(89%&65?/.#
/.5?/4RP789%7*B'>F&"/.&)#'9%&6(Wab#%787M²G5?>!+&2/C{d.&60?=B7Foo*r8d4#%9;B5./.0<(8[.(8)&6(F,.2!4//.&2/.0C/.5~B789S=B%/.# 9;:.7A#'9;B5?/.0
(8[.(8)&6(,."!7
/ ¯Oa P ] ^½_Ô o¶û r ] aÉo ] ^½ÕÔ oû r ]GFHFGF] Oa Y(1Âo ] ^½_Ô o¶û r °?K- =.9	~ 7F>F&60?:9#%9%&66ÅO^7<&"/9'7*B78#%9%78PT&2/Á9;:.7
,."!7
/ ¯Oa P ]û {CÖ ^û r ] Oa Yx1wo ] ½_Ô o¶û r °	7837*/Á9;:.5?=.0?:C9S:.7G05?!$&6#`/.549	0?=!B%!4/9%7878PC9%5O^7]!$(8:.&678378PK
É  Ø
ð ×

ÏMôCB°AjB·ôCBÑD´sW{u{¶B¨{ ·

Y :.7	!/!$6[.#%&6#&"/<9S:.7®,B783.&65?=.##%78(89%&65?/H#;:.5$~	#Z9;:!$9Z9;:.7*B7 !B7EP5.>!$&"/.#E!/.P,."!//.&"/.0],B5?O.67*>F#ZDn5?B
	
~A:.&6(8:~ 7G>![]~	!/499%5F=.#%7`!ÈD=.6)[1B78"!$·.78PW!+)045?B&69;:>9;:!$9E!$6~	![?#&"/.(82=.P78#M9;:.7GO78#%9NR(*!$#%7G,.2!4/
!/.PB789;=B'/.#Å!#%5"=.9%&65?/H7837*/H&JD&69&"/.(8"=.P78#EP7*!$P.R7*/.P#9;:!$9Z(*!//.59O7 0?=!B%!4/9%7878PH9%5GO7	!35&6P78PK
xQ7G&"/49;B5.P=.(87]!/1!$605.B&69;:>#%&">F&6"!B9%5F9;:.7G#%9;B5./.0\,."!//.&"/.0U!$605.B&69;:>9;:!$9	!$PP#M!/C5?BP&"/!B[
,B78&">!$047G&2/C7*!+(V:@&69%7*B%!$9%&65?/1:!+#®9S:.78#%7<,B5?,^7*B9%&678#*KE78(*!=.#%7G#'9;!$9%7SR¸!$(89'&)5./B%=.678#	67*!$P&"/.0C9%5]=/BN7SR
(85$37*B%!O.67HP7*!$P.R7*/.P#]>![1O7!$PP78P9%5C9;:.7]=/.&637*BN#;!$E,."!/d~ 7G(*!$69;:.&6#<!$605?B&69;:> Õ Ø ÓnÛ ¨ Û"Ò8ÓnÛbÜ
Rè

¦

0¨§ª©J« õ  õ

0

...

IS
0

GS
n

1

&60?=B7oo<p ²G5?>!$&"/U{^K®Y	:.7°|5+D®!FP5?>!$&"/Á~	&69;:19~ 5!$(89%&65?/.#abPB%!~A/1!+#	#%56&6PQ!/.PUP!$#S:.78P
!B%B5$~	#;r_&)6"=.#%9;B'!$9%&"/.09;:.7,5#%#'&2O.67C65#%#G#;:.5?BN9`,."!/67*/.09S:.#<~A:.7*/,B7SDn7*B%B&"/.0U#'9;B5?/.0
(8[?(86&6(F#%5"=.9%&65?/.#*K µT!/.PUÆ<1!BN7G9;:.7G&"/.&)9'&2!+E!/.P105?!$#%9S!$9%7dB78#;,^78(89%&63786[K
ØÙ6Ú Ö
ÖÛbÖ×?KY:.7¿!+)045?B&69;:> &)#1#S:.5~M/m&"/&60?=B7¨o*{KY:.7UD=/.(89%&65?/uEBN78&2>@!$07?a>øZÛ"Ò8ÛbÓ , ©>÷Ó Ú Ó , Ò8r
B789;=B'/.#<9;:.7#'789<5$D #%9;!$9%7SR¸!+(89%&65?/QB%=.678# ½ !$#%#'5?(8&"!$9%78P¨~	&69;:9S:.7,B78&">!$07@5$D	9;:.73.&)#'&)9'78PÄ#%9S!$9%78#*K
uEB'=/.7?a ÷Ó Ú Ó , MÜ*ÓnÛbÕÖÒHd øZÛ"Ò8ÛbÓ , ©>÷Ó Ú Ó , Ò8rGB7*>F5$378#M9;:.7#%9S!$9%7SR¸!$(89%&65?/B%=.678#*d~A:.7*B79S:.7]#'9;!$9%7!$"B7*!$P[
&6# &2/.(8"=.P78P&"/C9;:.7M#%789 5$D3?&6#%&69%78P1#%9S!$9%78#*d.!/.PU.9;!$9%78#S±D'a ÿ Ô (.Ö , ©>÷Ó Ú Ó , MÜ*ÓnÛbÕÖ^Ò;r®BN789;=B%/.# 9;:.7M#%789E5$D
#%9;!+9%78#	5$DE9;:.7,B%=/.78P#%9S!$9%7SR¸!$(89%&65?/TB%=.678#*K 0 ­ hZf &2/.(8"=.P78#H9;:.7F5?,.9%&">F&6#%9%&6(,."!//.&"/.0!$605?BN&)9S:>1K
Y	:.7	5.,.9%&">F&6#%9%&6(`,."!//.&"/.0!$605?BN&)9S:> &6#E&"/.(85?>,.6789%7M~	&69;:BN78#;,78(899%5G#%9;B5./.0G#%5"=.9%&65?/.#*d.O78(*!=.#%7M&69
ÚCÆyÑÙyÊÙÚCÆyÊ ï<ÞÐÚÓÔsÚÓßÐÚ³Î[ÛWÑ)àÏÏÚÓÏÛôÜ ¥¤) ìEÝ ,©² ø
Þ ¤Ó¶¤)ß¡F©¶0àß
Ý ©²
´W¥¤)µ, º¶º©² ¸ ²Ó©¥(àj
ß á
â¦ãCÇËÉ´Ê

ô Ü ¥­¤)å ä
Þ ¤Ó¶¤)ß¡F©¶ ø
¡F©« ¼ £¤)¥ª¶«àß ÛWÜÍÚÓÔ^àÛÍ«ôCÞ ¤ý¶º¤±ß¡©«0¶ ø
¸  ¥±ß¡F© ¼ £,¤¥¶"àß ÛWÜåÏÍô ¡F© ¼ £¤)«¥¶ ìÞ ¤Ó¶¤)ß¡F©¶ ø
ä á Î[ãCÊ>Í
Ç@æ ¸  ¥± ß¡F© ¼ £,¤)«¥¶*ßj
´L¥¤µ, ¶©² ¸ ²³©«(
¥ àßA´L¥¤µ, ¶©² ¸ ²³©«¥0ç ¸  ¥±ß¡F© ¼ £,¤)«¥¶
 ß¡F©0«
¶ àß Þ ¤Ó¶¤) ß¡F©,
¶ ç îÐáàÐÍßïéáô¸  0¥­ß¡F© ¼ £¤)«¥¶ ø
Þ ¤Ó¶¤)±

ÊÉOÌÊ
ÆyÊ>Î[ÚCÆyÍ

ÆyÊ>ÎÚCÆyÍkè	é ÖeÖ«ÞÐÚÓÔóÚ³ßÐÚÓÎ6ÞÑ)àÏóÍüÚÓßÐßê

´W¥¤)µ, ¶©² ¸ ²Ó©¥

&60?=B7Co*{pY	:.7<5.,.9%&">F&6#%9%&6(],."!//.&"/.0U!$605?BN&)9S:>1K
P5.78#`/.59M/.78(878#%#;!B&66[BN789;=B%/U!\#%9;B5?/.0@#%5"=.9%&65?/d
&ËD 5?/.7G78·.&)#'9%#*K	µ/49;=.&69%&63786[d5?,.9%&">F&6#%9'&)(,."!//.&"/.0
5?/.6[¨0?=!B%!/49%7878#H9;:!$9<9S:.7*B778·.&6#%9%#F#%5?>\77S¶78(89F5$DA!,.2!4/m!$(89%&65?/z)7*!+P&2/.0z9%5U9;:.7C05?!+XdÀ~A:.7*B7
#%9;BN5?/.0,.2!4//.&2/.010.=!B%!/49%7878#	9;:!+9_!+)7S¶78(89'#	5$DE,.2!4/U!$(89%&65?/.#)7*!+PU9%59S:.7G05?!$nK
Y:.7A,=B%,54#%7A5+D5.,.9%&">F&6#%9%&6(<,."!//.&"/.0&6#®/.599%5<#;=O.#'9%&69;=.9%7M#%9;B5?/.0G5.B#%9;BN5?/.0<(8[.(86&)(<,."!//.&"/.0K
Y	:.78#%7U!+)045?B&69;:>F#F#;:.5?=.6PO7U=.#%78Pm&"/mP5.>!$&"/.#~A:.7*B71#'9;B5?/.0T5?BH#%9;B5?/.0(8[.(86&)(,."!/.#(*!4/ÄO^7
Dn5?=/.Pw!/.Pw045?!$	!$(8:.&)78347*>F7*/9C:!$#9;:.7U:.&60?:.78#%91,B&65?B&69[Kw±G,.9%&">F&6#%9'&)(Q,."!//.&"/.0w>F&60?:49O7T9;:.7
O789'9%7*B(8:.5&6(87G&"/P5?>@!$&"/.#E~A:.7*B7M05?!+!$(V:.&67837*>\7*/9 (*!//.59 O7M0?=!B%!4/9%7878P@5?BZ9;:.7M#;:.5?B9%78#'9E,.2!4/
#;:.5?=.6PO7<&"/.(8"=.P78PQ&"/19S:.7<=/.&)347*B#;!$-,."!/K
_5?/.#%&6P7*B	!$0?!+&2/d
!$#A!/C78·!>,.67d9;:.7<BN5?O59NR¸O!O[CP5?>!+&2/ÁP78#%(*B&"O78P&"/U.78(89'&)5.
/ 1KZ5.B 9;:.&6#
,B5?O.67*> 9;:.7H5?,.9%&">F&6#%9%&6(#'5"=.9%&65?/>!¹$78#	9S:.7\BN5?O599;B[19%5C6&ËDn9G9;:.7FO.)5.(8¹1~A:.7*/T9;:.7F,5#%&69%&65?/T5$D
9;:.71O.65?(8¹&6#678#%#F9;:!/¨ÑU!/.P¨9;:.71B5?O^59<&6#F~ 5?B%¹4&2/.0
KY	:.&6#F#%787*>F#F9%5O7C9;:.7C5?/.6[ÏB7*!+#%5?/!O.67
#%9;B'!$9%780[dZ7837*/¨9;:.5.=.0?:m/.5Q0?=!B'!/9'787Dn5?BH05?!$ !$(8:.&)78347*>F7*/9@(*!/mO7T0&637*/Kmµn9F&6#~ 5?B9S:~A:.&667
Rï



 ö 0

÷Zñ;é õ'òcô

8çbèñ'ôó
ï ñ'èönç



ë

â

æ¸önç
ð

8çbèñ'ôó"ì¶í8ýøcòËý
ïñ'èönç
â
ñ
ë

æ¸önç

ð

ò

)-  
« -«  -)

ò

ð

ñ

î $çbòËéòËönçbòËý
ë
+æönç
ïñ'èönç

â

â

ñ

ñó

YZ!O.67oKp	Y	:.7	O^78#%9Å!4/.P]~ 5?BN#%9R(*!$#%7E,."!/H67*/.09;:H5$D,^5#%#%&"O.67	#%9SB5?/.0d#%9;B5./.0	(8[?(86&6(A!/.PF5?,.9'&2>\&)#'9%&6(
,."!/.#&2/\²G5?>!$&"/.#	o !/.P{Fab#%787	&60?=B78#	o^PA!/.P1oor8K aeR¸rZ>F7*!/.#9;:!+9Å/.5G#%542=.9'&)5./F78·?&6#%9'#*K
a ôkõ	r&"/.P&)(*!+9%78#G9;:!$9	9S:.7],."!/167*/.09S:U&6#M&"/4I/.&)9'7d!/.P!/T=/B78(85$37*B%!O.67HP7*!$P.R7*/.P&)#
B7*!+(V:.78PK
(85?/.#%9SB%=.(89%&"/.0W!4/C5?,.9%&">F&6#%9%&6(,."!/CDn5?B 9;:.&6#G¹&"/.PT5$DÅP5.>!$&"/.#A#'&2/.(87F9;:.7<!+)9'7*B%/!$9%&637H&)#G/.5,."!/!$9
!$6nK
|#%&">F&6"!BH5?,.9%&">F&6#%9'&)(1,."!/z&)#H07*/.7*B%!$9'78PDX5.BM9;:.7P5.>!$&"/#;:.5$~A/&"/&60?=BN7WpK@5?BG!+) O!$P
#%9;!+9%78#*d9;:.75.,.9%&">F&6#%9%&6(W,."!/¨!$#%#'5?(8&"!$9%78#<!4/Q!$(89%&65?/9S:!$9<OB&"/.0#F9;:.7F#%[.#%9%7*>y9'5U!C05?5.PQ#%9S!$9%7F&"/
5?/.7#%9%7*,K Y	:.&6#T(85?/9'&2/.=.78#U!$#C65?/.0w!$#C9;:.77*/3.&"B5?/>F7*/49U¹$787*,.#19;:.7#%[.#%9%7*> &"/!ÄO!+P#'9;!$9%7K
78(*!=.#%7/.5C#%9;B'!$9%780[1(*!/O^7\=.#'78PQ9%51,B7837*/49G9;:.7F7*/3.&"B5?/>F7*/49MDBN5?> OBN&2/.04&2/.0T9;:.7F#%[.#%9%7*> 9%5
!/1=/B78(85$37*B'!O.67<P7*!$P.R7*/.Pd
9;:.7G5?,.9%&">F&6#%9'&)(F#%542=.9'&)5./1&6#	º=.&)9'7<#%7*/.#%&"O.67K

5?B²G5?>!$&"/.# o	!/.P{	#;:.5$~A/È&"/F&60?=B78#	o PM!/.P1ood5?,.9%&">F&6#%9%&6(A,."!//.&"/.0B789;=B'/.#Å!G=/.&637*B#S!$
,."!2
/ ¯»Oa P ] ©ÕÓnÓ , ©»r ] Oa Y.1To ] Ò8Õ Ù ´Û ©r °?KZ5?BO^59;:@P5?>!$&"/.#9;:.&6#®&6#	!<=/.&637*BN#;!$,."!/@~	&69;:@9;:.7	#;:.5.B9%78#%9
O78#'9R(*!$#%7M67*/.09;:KE 5.>,!B78P9'5G9;:.7	#%9;BN5?/.0<(8[.(86&)(G#'5"=.9%&65?/9S:.7	(85#%9&2/@9;:.7 IBN#%9EP5?>@!$&"/&6# 9;:!$9
9;:.7A,."!/@>![]:!37	!/F&"/4I/.&69%7M)7*/.049;:d.~A:.&6)7M9;:.7	(854#%9&"/F9;:.7	#%78(85./.PP5?>!$&"/F&6#9;:!$9E!GP7*!+P.R7*/.P
>![O7<B7*!+(V:.78PKEY:.7`B78#S=.)9'#	5$D#%9;B5./.0d#%9SB5?/.0<(8[.(86&6(d!/.PC5?,.9%&">F&6#%9'&)(F,."!//.&"/.0&"/C²G5?>!$&"/.#Go
!/.PU{!4B7G#;=>>!4B&6878PU&"/UYZ!O.67oK


ö (÷È

£ÉË-Ê 8476 Ç$ 8 ÈÇ

Y :.7 &"/,=.9E9%5<s­ hZf &)# !/¬"!'#QP78#%(*BN&2,.9'&)5./ø`!/.P!M#;,^78(8&JI(*!$9%&65?/@5$D~A:.&6(V:@,.2!4//.&2/.0!$605.B&69;:>
	
9%5U=.#%7KCY	:.&6#<P78#%(*BN&2,.9'&)5./Q&6#F9;:.7*/(85?/437*B9'78P9'5U!1#%789G5$D h ¯ ii #B7*,B78#'7*/9%&"/.0T9;:.7,!B9'&)9'&)5./.78P
9;B%!4/.#%&69%&65?/mB78"!$9%&65?/Â!$#FP78#%(*B&"O78P&"/w.78(89%&65?/ÂqKmY	:.7 h ¯ ii B7*,B78#%7*/49;!$9'&)5./¨&)#1=.#%78PO[m!T#%789
5$D],."!//.&"/.0w!$605?BN&)9S:>F#9'5Ä07*/.7*B'!$9%7U!¨,.2!4/KY	:.75?=.9;,=.9C5$D<s­ h-f &)#U!z=/.&)347*B#;!$<,."!/ 5?B
#%78º=.7*/9'&2!+,."!/@P7*,7*/.P&"/.05?/@9;:.7A,."!//.&"/.0!$605?B&69;:>ÁK|=/.&)347*B#;!$,.2!4/&6#®BN7*,B78#%7*/49%78PWO4[!/
h ¯ ii KHµn9GP7SI/.78#MDn5?B	7*!+(V:TP5?>!+&2/T#%9S!$9%7]!@#%789G5$D¼5&"/49`!$(89'&)5./.#G9;:!$9M9;:.7F#%[?#'9%7*> !+07*/9'#`>F=.#%9
78·.78(*=.9%7<#%[/.(8:B5?/.5?=.#%6[T&2/Á5?BP7*B 9'5!$(8:.&)78347]9S:.7G05?!$nK Y	:.7<&">,.67*>F7*/49%78PÄ,."!//.&"/.0U!$605?BN&)9S:>F#
!B7Kp
o4K	.9;B5?/.0,."!//.&"/.0K
{^K	.9;B5?/.0F(8[.(8)&6(,."!//.&"/.0K
Ñ^K	±G,.9%&">F&6#%9%&6(,.2!4//.&2/.0
K
1
K	

"!$#%#%&6(*!$P789'7*B%>F&"/.&6#%9%&6(,.2!4//.&2/.0
K

ãäåæúaûüý
æ¸önýÉènò$çbòËñ%ôGõ;ýýæçnæCíçbåæý	*ènèæÉô*ç
òËéXøËæé®æÉô*çnõSçbòËñ%ôGòcô$ýÉø	*æöõ'øcø$øËñ;ó'òËýõ%ø.ñHæÉèõ;çnñ'èöª	$çñ'ô*øþí çbåæ
õ%ènòËçbå$é æ¸çbòËý ñ æèõSçnñ'èö ÿõ'ô   ªã ôMòË"
é *øËæé æô*çnõSçbòËñ'ô\ñ çbåæZèæé õ'òcô*òcôóMñ +æÉèõSçnñ%èöòËöZönçbèõ%òËó'å*´ç "ñ%	è ïõ'¶è Gõ%ô>MòËö
õ'èç-ñ Hñ 	èÅý 	*ènèæÉô*2
ç ïñ'Oè ã
ù

R

¦

0¨§ª©J« õ  õ

²G789%7*B%>\&2/.&6#%9'&)(1,."!//.&"/.0Q(*!/QO^73.&678~ 78PÏ!$#<!Á#;,78(8&"!$ (*!$#'75$D_/.5./4RP789%7*B%>F&"/.&6#%9%&6(U,."!//.&"/.0KUµÉ/
s­ h-f d~ 7=.#%78PQ9S:.7]5.,.9%&">F&6#%9%&6(,."!//.&"/.0Q!$605?B&69;:>Dn5?B9;:.7O!$(V¹4~	!BPT#%7*!B(8:T5$D®(8"!$#%#'&)(*!+P7SR
9%7*B%>\&2/.&6#%9'&)(,."!//.&"/.0KFanY	:.7<#'9;B5?/.05.B #%9;B5./.0(8[?(86&6(!$605.B&69;:>(85?=.6PQ!$6#%51:!*347<O787*/=.#%78Pd!$#
!$69;:.7HP78#%(*B&"O78Pm/.5?/4RP789%7*B%>\&2/.&6#%9'&)(1!$605?BN&)9S:>F#`O^7*:!37F#%&">F&62!4B6[&"/P789'7*B%>F&"/.&6#%9%&6(P5?>!+&2/.#KËr
Y	:.7F5?/.6[/.78~ Dn7*!$9;=B7H5$DE9;:.7FP789%7*B%>F&"/.&6#%9%&6(!+)045?B&69;:> &6#A9S:!$9`!@#%78º=.7*/9'&2!+E,.2!4/U&6#G07*/.7*B'!$9%78P
DB5?>9;:.7=/.&)347*B#;!$E,."!/O4[U(8:.5?5#'&2/.0U!4/U&"/.&69%&"!$#%9;!$9%7F!/.P&69%7*B%!$9%&63786[!$PP&"/.0!/!$(89%&65?/ÁDB5?>
9;:.7=/.&637*B#;!+Å,."!/Q=/49%&6!C05?!$#'9;!$9%7H&)#<BN7*!$(V:.78PKGY	:.7FP789%7*B'>F&"/.&)#'9%&6(,."!//.&"/.0¿!+)045?B&69;:> :!$#
O787*/C&">,.67*>F7*/49%78PT9%5<37*BN&ËDn[9;:.7G,7*B¸DX5?B'>!/.(87M5$D-s­ hZf (85?>,!B78PC9%5H59;:.7*B(8"!$#%#%&6(*!$,."!//.7*B#*K
µn9G:!$#</.59GO787*/T5?=B&"/9'7*/9%&65?/T&"/9;:.&6#M~ 5?B%¹
d9;:.5.=.0?:d9'5P7837865?,!\D!+#%9 h ¯ ii R¸O!$#%78P(8"!$#%#%&6(*!$
,."!//.&"/.0Ï!+)045?B&69;:> 6&"¹$7U²G& ÐQ!/.85789!$nKAao*p4p´r8K±G=B>!$&"/¨&"/49%7*B78#%9&6#/.5./4RP789%7*B%>F&"/.&6#%9%&6(d
>F=.69%&JR¸!$07*/49A=/.&637*B#;!$,."!//.&"/.0K
Y:.7Us­ hZf ,.2!4//.&2/.0m#'[?#%9'7*>&6#&">,.67*>F7*/49%78P&"/w
 40
 /./ !4/.Pw=.#%78#9;:.7U¯
s ii
l ,!+(V¹!$07
Oa $&"/.P.R¸°&678)#'7*/d<o*pp4prDX5.B h ¯ ii >@!/.&",=.2!+9%&65?/.#*KQ²<=BN&2/.0Q,."!//.&"/.0¨9;:.7P[/!>F&6(13$!B&"!O.67UB7SR
5?BP7*BN&2/.0D!$(8&6)&69[<5+D»9;:.7E¯
s ii
l ,!$(8¹*!$047&)#=.#%78PF9%5 I/.PF!	O789'9%7*B5.BP7*B&"/.0A5+D»9;:.7 h ¯ ii 3!B&"!O.678#*K
µÉ/9;:.7HDn56)5$~	&"/.0TDn5?=BM#;=O.#%78(89%&65?/.#H~ 7,B78#%7*/49<B78#;=.69%#H5?O.9;!$&"/.78PQ~	&69;:¿9;:.7s­ h-f ,."!//.&"/.0
#%[.#%9%7*>&"/U/.&"/.7<P&J¶7*B7*/49	P5?>!+&2/.#MB%!/.0&"/.0HDBN5?>P789%7*B%>F&"/.&6#%9%&6(!/.P1#%&"/.067SR¸!$07*/49	~	&69;:1/.5@7*/3.&JR
B5?/>\7*/9<!$(89'&)5./.#<9%5U/.5?/4RP789'7*B%>F&"/.&6#%9%&6(U!/.PÄ>F=.69%&JR¸!$07*/49<~	&69;:¿(85?>,.678·7*/3.&"B5?/>F7*/49]!$(89'&)5./.#*K
|M)Z78·,7*B&">F7*/49%#G~ 7*B7<(*!4B%B&678P5?=.9	5?/T5
! 1?<q PFÐQ½	FuZ7*/9%&"=> uE ~	&69;:QoFÆ<[.9%7 ¬ |AÐ³B'=//.&2/.0
9 $&"/?=.
· 1
KË{KZ|ª>\5?B7MP789;!$&6678PUP78#%(*B&",.9%&65?/Á5$D-9;:.7G78·,7*BN&2>\7*/9%#&2/.(8"=.P&"/.0U9S:.7A(85?>@,.)789'7
¬ 78PU½M!$\
P78#%(*B&",.9%&65?/T5$DZ9;:.5
7 "!#QP5?>!$&"/.#M(*!/1O7ÈDX5?=/.PT&"/ ¡ 7*/.#%7*/¨ao*pp4pr8K



´ñ
-



V{ M±|ô|\µAjB¨{¶ByôCBEDM±2A[,B"{V

xQ7 IBN#%99%78#%9Es­ hZf Lc#E,7*BÉDn5?B%>@!/.(87DX5?BZ#'5?>F7 5$D9S:.7A/.5?/4RP789%7*B%>\&2/.&6#%9'&)(GP5.>!$&"/.##%56378PO4[­A¯ f K
°78·?9*d~ 7®,B78#'7*/9-!M,5$~ 7*B,."!/49-P5.>!$&"/<!/.PÈI/!$66[d~ 7#;:.5$~ÄB78#;=.69%#DB5?>!M>F=.)9'&ËR¸!+07*/9Z#%5.(8(87*B
P5?>!+&2/K

	

 h ­ Z j  ¬B   i ¯ l Ê ¯ f
±G/.75$D<9;:.7P5?>!+&2/.#1#'56378PO[w­M¯ f &6#U!¨/.5?/4RP789%7*B%>\&2/.&6#%9'&)(¨9;B%!4/.#;,5?BN9;!$9%&65?/¨P5?>@!$&"/KY	:.7
P 5?>!+&2/¿(85?/.#%&6#%9%#H5$D_!Á#%789G5$D®65.(*!$9%&65?/.#!/.PQ!1#'789G5$D_!$(89'&)5./.#<6&"¹$7PBN&)347SR9;B%=.(8¹dPB&637SR9;B%!$&"/¨!/.P
[9%5F>F5$37AO^789¸~ 787*/C9;:.7M65?(*!+9%&65?/.#*KE°5?/4RP789%7*B%>\&2/.&6#;> &)# (*!=.#'78PUO[/.5./4RP789%7*B%>F&"/.&6#%9%&6(]!+(89%&65?/.#
ab7Kc0
K"d!Dn9%7*BE!ÈPB&637`!+(89%&65?/!È9;B%=.(8¹F>![]5.BE>![/.59®:!37_D=.7867SDX9SrE!/.PC7*/3.&"B5?/>F7*/49;!$
(V:!4/.078#
ab7Kc0
K"d8Dn50<!$9!$&"B%,^5?B9%#*dH &">!$9%9%&789E!+XKedo*pp´!4r8KxQ7 P7SI/.78P9S:.7®9~ 5MP5?>!$&"/F78·!>,.678#E9'78#%9%78PO[
­M¯ f Dn5?B #%9;BN5?/.0!/.P1#%9;B5./.0<(8[.(8)&6(,."!//.&"/.01&"f
/ /"!#Ï!4/.PUB%!/1s­ h-f =.#%&"/.0C#%9;B5?/.0!/.P1#'9;B5?/.0
(8[.(8)&6(,."!//.&"/.0KA59S:178·!>,.678#A~ 7*B7H#%56378PT&2/Á678#%#A9S:!Z
/ PK PqH#%78(85?/.P#*K	.&">F&6"!BGB78#;=.69%#M~ 7*B7
5?O.9;!+&2/.78PT~	&69;:1­M¯ f K|}07*/.7*B%!$37*B#%&65?/C5$D9;:.7<:.=/9'7*B	!/.PU,B78[C5?BHà;uE=BN#;=.&69%áP5?>!+&2/¨an7*/.P!
789]!+XKedo*p´rG!4/.PÄ!1O7*!> ~	!$"¹UP5.>!$&"/Q:!37!$6#%5O^787*/9%78#%9'78PÄO[Q­M¯ f KCY	:.707*/.7*B%!+)&6*!$9'&)5./
5$DE9;:.7F:?=/49%7*BG!/.P,B78[UP5.>!$&"/1&6#</.59MP78#%(*B&"O78P¨&"/TP789;!$&6-&"/man &">!+9%9%&789<!$nK"dZo*pp4´!r8K Y	:.=.#*d
~ 7:!*347]/.59GO787*/Q!4O.)7@9%5W>@!¹$7]!4v
/ "!#Ä&">,.67*>F7*/49;!$9%&65?/¿5$DE9;:.&6#<P5?>@!$&"/1Dn5?BM!1>F7*!/.&"/.0$D=.
(85?>,!4B&6#%5?/K
Y:.7<,B5?O.67*>&"/Á9;:.7]O^7*!>~	!$"¹P5.>!$&"/1&6#DX5?B !/T!$07*/49 9%5~	!$"¹FDB5?>5?/.7H7*/.PU5$DE!O^7*!>
9%5C9;:.7<549;:.7*B	~&)9S:.5?=.9	D!$66&"/.01P5~M/KAµbDE9S:.7]!$07*/49D!$66#*d&69G:!$#A9'5~	!$"¹1O!$(8¹C9%59;:.7H7*/.P5$DE9;:.7
O7*!4>!/.PQ9SB[!$0.!$&"/KY	:.7FI/.&69%7#%9S!$9%7>!$(8:.&"/.75$D 9;:.7FP5?>!$&"/&6#F#;:.5$~A/T&"/&60?=B7UoÑKY	:.7
78P078#P7*/.59%7	9;:.75?=.9%(85?>F7 5$D-!M~	!$"¹F!$(89%&65?/KZx:.7*/F9;:.7A!+07*/9&6#5?/F9;:.7AO^7*!>1d49;:.7	~	!$"¹F!$(89%&65?/
RK

 ö 0



)-  
« -«  -)

(*!/z78&69;:.7*B>F5$37C&69]5./.71#%9%7*,¿D=B9S:.7*B<5./Q9;:.7UO^7*!>
O7*!4>1K

5?BF>!¹$7C&69HD!$6 9%5Q!T65?(*!$9'&)5./m=/.P7*BF9;:.7

up
true

...

false I
0

...
1

2

G

n-2

n-1

pos

&60?=B7o*Ñ/p	Y	:.7<O7*!>~	!$"¹FP5?>@!$&"/KEY	:.7 "!'#¨7*/.(85?P&"/.05+D-9;:.7GO7*!>~	!$"¹FP5.>!$&"/1:!$# 5?/.7
,B5?,54#%&69%&65?/!$#%9S!$9%7	3$!B&"!O.67%( Ø 9;:!$9 &6#	9;B%=.7M&JDÅ9S:.7`!$047*/9&)#5?/9S:.7<O7*!>!/.PCD!$6#%7
59;:.7*B~	&6#%7d!/.P¨!1/?=>F7*BN&)(*!+E#%9;!+9%73!4B&"!O.67 Ø Õ$Ò9;:!$9GP7*/.59'78#<9;:.7,^5#%&69%&65?/z5$D	9;:.7
!$07*/49<78&69;:.7*BG5./9;:.7O^7*!> 5?BM5?/9;:.7@0?B5?=/.PK¨à;µáU!/.PàSÆGáU!B7@9;:.7&"/.&69%&"!$ #%9;!$9%7
!/.PU05.!$#%9;!$9%7GB78#;,^78(89%&63786[K
xz7	&">,.67*>F7*/9'78PW!È07*/.7*B%!$9%5.B,B50?B%!4> DX5?B""!#ÄP78#%(*BN&2,.9'&)5./.#®5+DO7*!4>~	!$"¹ÈP5?>!$&"/.#	!/.P
, B5.P=.(878PÄP5.>!$&"/.#<~	&69;: 119%51+PpC,54#%&69%&65?/.#*K178(*!=.#%79;:.7@P5?>!$&"/5?/.6[(85?/49;!$&"/.#<9~ 5C#%9;!$9%7
3!4B&"!O.678#*ds­ h-f (*!//.59 78·,.65&69A!<,!BN9%&69%&65?/.78P19;B%!/.#'&)9'&)5./B78"!$9'&)5./@DX5?BÀ9;:.&6#	P5?>!+&2/dO=.9	:!$# 9%5
=.#%7F!]>\5?/.56&69;:.&6(\BN7*,B78#%7*/49;!$9%&65?/K
Y:.7],7*B¸DX5?B'>!/.(87F5$D®s­ h-f !/.PQ­M¯ f &6#G#;:.5$~A/1&"/&60?=BN7W·o 1K	²G&6#%(85?=/49%&"/.0U9S:!$9`­M¯ f ~	!$#
B%=/H5?/F!#%65~ 7*B>!+(V:.&"/.7d 9;:.7	,7*B¸DX5?B'>!/.(87 5$Ds­ hZf !/.P­A¯ f &6#º=.&69%7	#%&">F&6"!B&"/F9S:.&)#P5.>!$&"/K
5.BMP5?>!$&"/.#<~M:.7*B7s­ hZf (*!/¿78·»,.65&69]!1,!4B9%&69%&65?/.78PmB7*,B78#%7*/49;!$9%&65?/d~ 7~ 5?=.6PQ78·,78(89H&69<9%5
O7!O.67F9%5C#%5637H2!4B07*BM,B5?O.67*>F#G9;:!/T­A¯ f d#%&"/.(87­A¯ f (*=B'B7*/9')[T(*!/15./.)[=.#%7]!C>F5?/.54)&69;:.&6(
B7*,B78#'7*/9;!+9%&65?/K=BN9;:.7*B (85?>,!4B&6#%5?/.#AO^789¸~ 787*/Ts­ hZf !/.PU­M¯ f !B7G5?/C5?=BB78#%7*!B(8:1!$07*/.P!^K
 vG h  g G $-  h ­ -jb
Y	:.7	,=B%,^5#%7 5$D9;:.7 B7*>!$&"/.&"/.0G78·»,^7*B&">F7*/49%#E&"/F/.5?/4RP789%7*B%>\&2/.&6#%9'&)(MP5?>!+&2/.#Z&6#9%5M#;:.5$~Ï=/.&637*B#S!$
,."!//.&"/.0UB78#;=.69%#DX5.BEP5.>!$&"/.#A~M:.7*B7<9;:.7<>F=.69%&JR¸!$07*/49G!/.P17*/3.&"B5?/>F7*/49G>F5?P7866&"/.0CDX7*!+9;=B78#	5$D
"!'#m:!37`O^787*/=.#%78PK
Y:.7®,5$~ 7*BZ,.2!4/9ZP5?>!$&"/HP7*>F5?/.#'9;B%!$9%78#Z!A>F=.69%&JR¸!$07*/49-P5.>!$&"/H~	&69;:<!/H7*/43?&"B5./>F7*/9>F5.P78
!/.PMD=B9;:.7*B78·?7*>@,.)&JI78#5?,.9'&2>\&)#'9%&6(®,."!//.&"/.0KEµ9-(85?/.#'&)#'9%#5$DB7*!$(89%5.B#*d*:.7*!$978·?(8:!/.07*B#d*9;=B'O.&2/.78#
!/.P13$!$6378#*K|P5?>@!$&"/178·!>,.67<&6#	#;:.5$~A/C&"/Á&)0.=B7o*q^K
µÉ/C9;:.7],^5$~®7*B,.2!4/9	P5.>!$&"/17*!$(8:C(85?/49;B56"!O.67]=/.&69M&6#`!$#'#%5?(8&"!$9'78PU~	&69;:1!/T!$07*/49 #;=.(V:Á9;:!$9
!$6(85?/49;B5Z!$(89%&65?/.#G(*!/O7,^7*BÉDX5.B%>F78P#%&">F=.)9S!/.785?=.#%6[KFY	:.7F7*/3.&"B5?/>F7*/49G(85?/.#%&6#%9%#G5+D®!C#%&"/.067
!$07*/49	9;:!+9`!$9M!/[19'&2>\7](*!4/CD!$&6Å!C/?=>FO^7*B	5$D®:.7*!+9A78·.(V:!4/.078#`!4/.P9S=B%O.&"/.78#<!/.P!$6#%5C7*/.#;=B78#
9;:!$9!$"B7*!$P[ÈD!+&)678P=/.&69%#EBN7*>!$&"/ÈD!$&6678PK|¨D!$&6678P:.7*!$978·.(V:!/.047*B67*!¹4#~	!$9%7*BDB5.>9;:.7 &"/9%7*B'/!$
9%59S:.7G78·?9%7*B'/!$~	!$9%7*B 65.5?,U!4/.PU>]=.#'9AO7H(8)54#%78PO4[U!O.65?(8¹1!$(89%&65?f
/ ¾$KEY	:.7G7*/.7*B04[U,B5?P=.(89'&)5./
DB5?> 9;:.71B7*!$(89%5.BM(*!/QO7C(85?/49;B56678PmO[  9'51I9<9S:.7P7*>!/.Q
P iZdÅO=.9H9;:.71B7*!$(89%5?BM~&)6	!$6~	![?#
,B5.P=.(87<5?/.7G7*/.7*BN0[W=/.&69*KY59SB%!/.#;,^5?B9 9;:.7G7*/.7*B0[@DB5?>9;:.7<B7*!$(89'5?B !*~	![HDBN5?>9;:.7G,."!/9G!$9
67*!$#%9H5?/.7:.7*!$9H78·?(8:!/.07*BG!/.Pz5?/.79;=B%O.&"/.71>F=.#%9<O7C~ 5?B%¹4&2/.0
K±M9;:.7*B~	&6#%7C9;:.7,."!/49<&6#<&"/¨!/
=/B78(85$37*B%!4O.)7ÈD!+&)678PT#%9;!$9%7d.~A:.7*BN7<9;:.7<B7*!+(89%5?B~	&66-5$37*B%:.7*!+9*K

	


B

ûÇãvæÉô*çbò	é!,ïòËçbå`ú"5í8çnæö$#M#ïõ;öC	$önæGçnñ®óSæÉôæÉèõSçnæçbåæèæö´	øËçnöM"ñ'è&%('*)4ã
RK

¦

0¨§ª©J« õ  õ

10000

1000

Time / Sec

100

10

1

0.1

0.01

UMOP
MBP

0.001
0

500

1000

1500
2000
2500
3000
Number of Beam Locations

3500

4000

4500

&60?=B7oy1ªp	u"!//.&"/.019%&">F7<5+DÀs­ hZf !/.P­M¯ f &2/T9;:.7<O^7*!>~_!+2¹@P5?>!+&2/K Y	:.7F­A¯ f P!$9;!@:!$#
O787*/T78·?9SB%!$(89%78PC~	&69;:U,^5#%#%&"O.67F65#%#	5$DE!$(8(*=B%!+(8[DB5?>a &">!$9%9%&789A!+XKedopp´!rÇK
Y:.7#%9;!$9'7]#S,!$(875$D 9;:.7,5$~ 7*B<,."!/49<(*!4/QO7P&63.&6P78Pm&2/49%5T9;:B787P&6#n¼5&"/9F#%789'# pG05.5?PdZO!$P
! /.PzD!+&)678PÂ#%9;!$9%78#KµÉ/¨9;:.7045?5.PÄ#'9;!$9%78#*dZ9;:.7*BN7SDX5?BN79;:.7C05?!+E#%9;!+9%78#*dZ9;:.7U,5$~ 7*B<,."!/49#;!+9%&6#I78#
&69%#F#;!Dn789[!/.PÄ!+(89%&63?&69[ÄB78º=.&"B7*>F7*/49%#*KUµÉ/Q5?=BÈ78·»!4>,.679;:.7@#;!Dn789¸[QB78º=.&"B7*>F7*/49%#F7*/.#;=B7C9;:!$9
7*/.7*B0[C(*!/TO7<9SB%!/.#;,^5?B9%78P1!~_![FDB5?>9;:.7F,."!/9d!/.P19;:!$9_D!$&6678P=/.&69%#G!B7G#S:?=.9	P5$~AC/ p

+-,/.0,/132*46587/.:90,<;3107/.>=@?0A/13;0,CB:7/D07/4:E31FA8G-;3H0,<?0I37/.*;
JA8K0HMLON3PQARK0H0S:N3P:A8K0H0T:N3P:A8KFH3U	VWP3N
JA8K0;MLON3PQARK0;0S:N3P:A8K0;0T:N3P:A8KF;3U	VWP3N
+:H0,37/;-,/X>5@H07/.320,C1>=W90I3A05KY,/B[ZEQE07>Z@I3,/B
JR\RA8KFH	L^]0_:9	L3VWP3N
JR\RA8KFH0S`]0_:90SVWP3N
JR\RA8KFH0T`]0_:90TVWP3N
JR\RA8KFH3U<]0_:93U	VWP3N
+:;3a3139Z.0,b=<=R;FA/?3?0,/BcZE:E07YZRI3,/B
JR\RA8KF;	L^]0_[=YL3VWP3N
JR\RA8KF;0S`]0_[=CSVWP3N
JR\RA8KF;0T`]0_[=CTVWP3N
JR\RA8KF;3U<]0_[=RU	V
Y :.7A!$(89%&63.&)9[B78º=.&"B7*>F7*/49%# #%9;!$9%7 9;:!+9E9;:.7	7*/.7*BN0[,B5?P=.(89'&)5./C78º»=!$6#9;:.7AP7*>@!/.P!/.PC9;:!$9

!$63$!$6378#A9'5~ 5?B%¹4&2/.0F9;=B'O.&2/.78#<!4B7A5.,7*/Cp

RKR

 ö 0



)-  
« -«  -)

+:?0A/D0,/1:?31FA/B3a>5R;dZRA/.:,/e*a073Ib=WBF,8GY7/.3B
?:]QE-P3N
+:;3a3139Z.0,<f073I/f0,-Z/=:A/?F,/.cZE:;3a3139Z.0,QZ/=gA8K
JA8K0;ML^]0_hfML3VWP3N
JA8K0;FS`]0_hfFSVWP3N
JA8K0;FT`]0_hfFTVWP3N
JA8K0;*U<]0_hf*U	V
Éµ /!HO!$PC#%9;!$9%7d$9S:.7`,."!/49 P5?78#	/.59#;!$9%&6#Dn[F9;:.7A#S!DX789[F!/.PW!+(89%&63?&69[B78º=.&"B7*>F7*/49%#	O=.9E&6#	/.59
=/B78(85$37*B%!4O.)[CD!$&6678PK®µÉ/U!HD!$&6678PU#%9S!$9%7G!$6-:.7*!$9	78·.(V:!4/.07*B#M5?B9;=B%O.&"/.78#`!4B7MD!+&)678PK
Y:.7\=/.&637*BN#;!$®,."!//.&"/.09;!$#S¹1&6#<9%51047*/.7*B%!$9%7!1=/.&637*BN#;!$E,."!/z9%510789MDB5?>y!/4[O!$Pz#%9;!$9%7
9%5T#%5?>F7045?5.PÄ#'9;!$9%7~&)9S:.5?=.9F7*/.P&2/.0z&2/¨!ÁD!+&)678Pm#%9S!$9%7KC|A#'#;=>F&"/.0Q9;:!$9F/.5=/.&69%#FD!$&6EP=BN&2/.0
78·.78(*=.9%&65?/d&69E&6#5?O43.&)5.=.#9;:!$95?/.6[<5./.7-¼5&"/49E!$(89%&65?/H&6#®/.7878P78PKEÃM/4DX5.B9;=/!$9%786[d49;:.7 7*/3.&"B5?/>F7*/49
(*!/HD!$&6!4/[/.=>]O^7*B5$D-=/.&69%#P=B&"/.0]78·.78(*=.9%&65?/d.9;:.=.#*d?!+#EP78#%(*B&"O^78P1&2/C.78(89%&65?/CKË{dDn5?B!/4[O!$P
#%9;!+9%7A9S:.7<B78#;=.69%&"/.0<¼5&"/49A!$(89%&65?/1>![65.5?,1O!$(8¹9'5\!FO!$P1#'9;!$9%7M5?B (*!=.#'7G9;:.7<,."!/99%5F7*/.PU&"/1!
D!$&6)78PT#%9;!$9'7ab#%787G&60?=B7<prÇK5?B9;:.&6#GB7*!$#%5./1/.5#%9;B5./.0]5.B #%9;B5./.0](8[.(86&6(]#'5"=.9%&65?/178·.&6#%9*K
okh1 b1

okh2

b2
v1 okt1

T1

H2

H1

s1

v2 okt2

s2

T2

R

p
okp

v3 okt3

T3
v4 okt4

H3
okh3

s3

f

T4

H4
b3 okh4

s4

b4

ijlkYmnporqCsMtvuxwy3zvoCnWw>{}|0~bWyYr|3j}~oRd|brw>{lo0>o:npoC|3RyYnOjlmnnpyYm~>oRb[yYmnO>oC|3
oRYR|0~>k0oCnpOq0v<|0~>	[>o>oC|3^oRYR|0~>k0oCnpOwnpyY	m>Ro<>jlkYcwnpoRmnpo
oC|0yyYmnoR{oRRnpjlRjp`k0oC~>oCn|3j}~>kOmn>j}~>oRq0 |b~>¡v	vu¢£|3jl{loR:>oC|3
oRYR|0~>k0oCn¤j¥m>orR{ly0oR[b¡|>{ly>@¦<|3Rjy>~:§R¨iyYn|^©|Fj{loRQmn>j}~>oWvj>o
yYw:|FRjlyY~<ªC¨«m>oOC|0nnpjloR:yYm>/r>oroC~>oCnpk0:wnpy>	m>RjlyY~hy3>o npoC|3Ry>nj¬
|0~>C|0~`o¤RyY~0npy0{l{loR¡y­	®>ooCr|0~>:¯°±|3@²mn>j}~>orvj$C|0~`o¤R{yboR:0W|
³ |3{ ³ o´Y¨µ>o ¶3· ³ |0npj}|0>{loRC|0w>mnpo>ozvyYn¦bj}~>kr|3m>yFµ>om~>jl/
u~^yYw>j}jljly0{}m>jlyY~Oj}rw>{lWjlkY~>yYnpoR|3$¸py0j}~0|3RjlyY~>vC|0~O{lyYy>wW|3@¦¹yr|«|FW|3oyYn
{loC|3Qy¡|º©|3jl{loRQ|3oO|0~><­»~>r|Wyb{¼m>jy>~:y`>o wnpy>>{oC½|/oCn¾yY~>o wnpoRj}r|3kbo C|3{lCm>{}|3jlyY~
¿£~bm>jlj ³ oR{l0>oyYw>j¼¹jjl«w>{}|0~|FmoR|3®~>y m~>jlzj{l{(©|Fj{(	mnpj}~>k oR>oRCm>jlyY~|b~>¡|3{lz|/Y
R>yYy0oR¸py0j}~0|3RjlyY~>|3{loC|3-j}npoRR{g©npy>À|W|3Q|3o«y|Wk0y>yYh|3o0O>oryYw>j¼¹jjl
w>{}|0~<jl|0~²yYw>j}r|3{RyY~bnpyb{$n|FoRk00oRC|0m>o^j|F{z|/>®R>yYyboR®>o«>yYnpoRw>{}|0~<yW|^k0yYy>
Á0ÂÃ

Ä0Å0Æ	ÇÅ0ÆQÈÊÉÅ0Ë3Ì	ÇÌ
|Fo«|0~>Q~>yWy0>oCnn|3oRk0WoR>jl|3®C|b~:| ³ y0jl<{y>yYw>j}~>k¡|F@¦`yW|W|3:|3oy>noC~>:j}~:|
£|3jl{oR`|3o0
>ojlÍRo:y3>o|Fow|FRoy3>o:|0My ³ o¡wMy*zvoCnOw>{}|0~0Wy>r|3j}~[jl0ÎpÏ3¢uÐ~yYw>j¼¹jjl
y0{}m>jlyY~`z|3kboC~>oCn|3oR<0Ñ$ÒÓÔWj}~<ÕÖ0oRRyY~>|0~>Ry>~0|Fj¼~>oR:0×bØqCÖrÓÙ	Ú$Ú[~>y>oRCu®|0~
oR|0rw>{lo0	|¸py0j}~0|3Rjy>~OzÛ|FoR>n|FRoRO©nÜyYÝ>ow>{}|0~^Þy>n||3W|3o®z®>oCnÜo®r|b~>zvoCnpo
£|3jl{oRc|b~>:oC~>oCnpk0:oC^|0~>ß¯Qz|3WoC~>oCnpkb-m~>jlCz®>jl{loW>o oC~>oCnÜk0:wnpyY	m>Rjy>~<¬:z|3yY~>{l
q m~>jlC<>oOoRYn|3RjlyY~<j¼¹o z|3ÕÕqCOoRRyY~>r|0~>$¥|3¤oRdwMoRRoR$>oOoRyFµ¸py0j}~b¹|FRjlyY~>
j}~>R{}m>oR-|j}~>k0{lo¸py0j}~b®|3RjlyY~²@|0~>kbj¼~>kO§Rr|0~>§yrnm>o|0~>WoRj}~>k¬Wyr
	à áâáãåäÐæ(ç-è Óêéé çë[ì ÓêÒíêîðï
>owmnwMy0o`y3®>oWy>RRoCnyY^|3j}~QjOy<oCyY~>n|3oW|<m>{jñò|Fk0oC~0^yYr|3j}~[zj[|¡¹yYnpo
oR{}|0y>n|3oWoC~ ³ j}npy>~oC~0OyYoR{|0~h>owy3zvoCnrw>{}|0~bryYr|3j}~[¿RyY~>jry3pzy`oC|0y3
w>{}|/0oCnp|3C|0~:¹y ³ oj}~:|OkYnpjl<zvyYnp{l:|0~>:w|3|W|3{l{yWoC|F@`y0>oCn8uoC|3R`j}ooCw<|
w>{}|/0oCnoRjl>oCn¹y ³ oR®j}~`yY~>oy3¥>o¾ÞyYmnr|F¸òyYnÛj¼nÜoRRjlyY~>yYnw|3oR>o|3{l{yW|0~>y0>oCnoC|0
w>{}|/0oCnR¥>o|3¦jly«kboC~>oCn|3o|m~>j ³ oCnp|3{$w>{}|0~OyYnóyY~>oy3$>ooC|0¹¥|3vC|0~Oo|bww>{jloR<y
RyYnÜo|k0yY|3{z®>oC~>o ³ oCnv>ooC|0ôwy0oRoR>o|3{l{
uôj}rw>{lo "!'# oRCnpj}w>jlyY~hy3>ory>RRoCnyY^|3j}~-y>oR{l>oOoC|0õwMy0oRj}~>k¡>o |3{l{
|3O>oCö|3kboC~0O|3^C|0~cy ³ o|b~>÷w|Fr>o:|3{l{j¼~>oCwMoC~>oC~0`y3oC|3R[y0>oCnRø>m>C|
w>{}|/0oCnwy0oRj}~>k<>or|3{l{¥C|0~<|3{lz|/Yw|Fy|0~by0>oCnoC|0õw>{}|/0oCnR>oryYwwMyY~>oC~0¤oC|0
jlÐ¹yYoR{l{loR-|3®|^oRyF¥oC~ ³ j}npyY~oC~bÐ|Fk0oC~0|3C|b~y ³ oj}~W>oyYmn®^|3¸pyYn±j¼nÜoRRjlyY~>m>
| ³ o ~>y<|3RjlyY~>¤Þy>n|0~>{lj¼~>kQ>o |F{{<>ork0y>|3{y3>oWm~>j ³ oCnp|3{vw>{¼|b~:jly¡| ³ oO|w>{}|/0oCn
zjlO>o|3{l{$j}~O£npyY~bvy3ê>o¤yYwwyY~>oC~bk0y>|3{zjl>yYm>®| ³ j¼~>kO|0~0OyYwwMyY~>oC~0j}~W>ok0y>|3{$|0npoC|
¿©rjl j}rwMy0j}>{lo:yhk0oC~>oCn|3o|gnpyY~>kQw>{¼|b~[|3^Ry ³ oCnpr|3{l{ÐwMy0j}>{lo<j¼~>jlj}|3{|3oRC6i	yYn
j}~>|0~>Ror|0~²j}~>jj¼|F{|3o¤zjl|b~WyYwwMyY~>oC~0{ly>C|3oR`j¼~`>ok0y>|3{ê|0npoC|^|3Ð~>yOnÜyY~>k y0{}m>jlyY~
ùvm>|npyY~>kw>{}|0~^Ry ³ oCnpj}~>k|3r|b~0¤j¼~>jlj}|3{|3oR¥|3¥wMy0j}>{lojl¥jl{l{»m>o©m>{oRC|0m>o®jl¥o­»~>oR
|3{l{>o[úRyYnpj}~>k0û<|FoRy3Ð>oWkY|0oW|0~>Q£mnp>oCnrwnpy ³ jloR |<w>{¼|b~QyYn¤RyYnpj}~>k:>oWkbyY|3{~>y
r|3oCn±>o|3RjlyY~>CM>oyYwwMyY~>oC~b®w>{}|CboCnpR>yYy0o0
üho j}rw>{loCoC~boRc|0~ "!'# k0oC~>oCn|3y>nyYny>RRoCnyY^|3j}~>«zj:jþý$oCnpoC~b­	oR{l[jlÍRoR |0~>
~>m«MoCnpy3¥|3k0oC~bC>om>{ljþñò|3k0oC~bkYn|0w^j}~WijlkYmnpoOqCØ¤>y3zÑ$Ò®ÓÔÿ ®w>{}|0~~>j}~>kWj}om>j¼~>k
>onÜyY~>kw>{}|0~~>j}~>kg|F{kbyYnpjlj}~<y>RRoCnyY^|3j}~>zjl:ØF {ly>C|3jlyY~>«|b~>:yY~>oyWjl:w>{}|CboCnp
yY~OoC|3ROoC|0²µ>ow>{¼|b~~>j¼~>kOj}ooRoC¹ykYnpy3z!oRdwMyY~>oC~bj}|3{l{`zjlO>o~>moCnvy3w>{¼|/0oCnÜC
>jlWjl~>y0rmnwnpjlj}~>k|3W~>y0ryY~>{l>o<|3oWw|3Ro:m>º|3{lyQ>o<~YmoCnOyF¸òy0j}~bº|FRjlyY~>
kYnpy3z[oRwyY~>oC~bj}|3{l{l zj>o®~>moCnyF(|Fk0oC~0Cê(yj}~ ³ oRjlkY|3o>oRyY^w>{oR>jlprj}~0nÜyY	m>RoRW0
¸py0j}~0|3RjlyY~>zvoRy>~>nm>RoR<| ³ oCnpjlyY~WyF¥>oyYRRoCnyYr|Fj¼~`zjl`yY~>{l|^j}~>k0{lor>oC|0~>
oC~ ³ j}npyY~¹oC~0r|3k0oC~b«|b~>ßn|b~-Ñ$ÒÓÔ-|3k>|3j}~>oWj}~>k0{loñò|3k0oC~bkYn|0whj}~:ijlkYmnÜo¡qCØ`>y3z¤>o
	n|0^|3jloRCnpoC|3oj}~<RyYrwm>|3jlyY~`j}o0¿©j~>ybyY ³ jlyYm>>yYm>k>|3m>j}~>kyYnpor|3k0oC~b
j}~>CnpoC|3oRO>oWRyY^wm>|3jlyY~|3{v{lyY|3$v|3>jl ~>yYnr|3{l{lc|3{ly:npoR	m>RoR >o~YmoCn¹y3¾wnÜoRj¼^|3k0o
C|3{lCm>{}|3jlyY~>C±oRC|0m>o|²{}|0npk0oCn¤~YmoCn¤y3|3oRjlrnpoC|3R>oR-j}~hoC|3@hjloCn|3jy>~¿£~>oRoR$j}~Q|
³ oCnpjy>~yF»>owy3zvoCnw>{}|0~byYr|3j}~¤zjloRoCnj}~>jjlÐ|3Rjy>~>C3zvo¥yYm~>>ow>{}|0~~>j}~>kj}oy
oRCnpoC|3o  oRo¤>o«wMy3zoCnw>{}|0~b®kYn|0wWj}~WijlkYmnÜo qCØ 8z®>oC~<yYnpo|Fk0oC~0zvoCnpo«|3oR  oC~>oC~
qCÖ0ÖbÖ R<ukY|3j}~[zvoWoC|3mnpoR[>oWj}oOÞy>noR>n|FRj}~>k-|3RjlyY~>£npyY >oWkboC~>oCn|3oRcm~>j ³ oCnp|3{
w>{}|0~>CWiyYn>oºm>{ljþñò|3k0oC~b ³ oCnÜjlyY~:yFÛ>o­ ³ oWw>{¼|/0oCn¾y>RRoCny>r|3j}~:>orpzy^¸òybj¼~b«|FRjlyY~>
|3R>jlo ³ j}~>k>ok0yY|F{$>y3z®~`j}~ijlkYmnÜoºq/×zvoCnpooRYn|3RoRW£npyY >orm~>j ³ oCnp|3{w>{}|0~<j}~`{oR|0~
ÕÕbÕqoRRyY~>C
Á0Â


	 ÇÅvÆÅ	Ç  
Ë êË 

ÆÆ}Æ

10000
Multi-Agent
Single-Agent
Power Plant
1000

Time / Sec

100

10

1

0.1

0.01
0

2

4

6
Number of Players

8

10

12

ijlkYmnporqCØMt {}|0~~>j}~>kWj}oyFµÑ$ÒÓêÔºÞyYn±k0oC~>oCn|3j}~>k npyY~>krm~>j ³ oCnp|F{µw>{}|0~>j}~Wy>RRoCny>r|3j}~>
zjl¤yY~>o¥yjl«w>{}|/0oCnpyY~¤oC|3RoC|bW$iyYn$>om>{ljþñò|3k0oC~boRdwMoCnpj}oC~0oC|F@w>{}|/0oCn
zÛ|F|3yYRj}|3oROzjlr|b~ |3kboC~0C3z>j{loyY~>{l |¤j}~>k0{lo>oC |b~> oC~ ³ j}npy>~oC~0|3kboC~0
zÛ|F¥m>oR j}~>oj}~>k0{loñò|3k0oC~bvoRdwMoCnpj}oC~0/¥>o®wMy*zvoCnw>{}|0~bvkYn|0w¤>y3z¥w>{}|0~~>j}~>k
j}oÞy>n¥|¤oRoCnj}~>jljl ³ oCnpjy>~ry3>oÐwMy3zoCnvw>{}|0~bvyYr|3j}~Wm>j}~>kqyWqC¾YoC
|3k0oC~bC

2

2

1

2

5

3
2

4

2

1

5

3

5

4

3
4
5

4

5
1

1
2

4

4

5
1

1

3

3

3

(a)

(b)

(c)

ijlkYmnporqC×Mt {}|0~OoR>oRCm>jlyY~Wo"!m>oC~>Ro0v>onpoRo|3oRv>y3zø|r0wyb>oRjlC|3{$|3|F@¦r|FoRWyY~
|m~>j ³ oCnp|3{	w>{}|0~¥>o|3o  |(jl¥|OúRyYnÜj¼~>kbû|3o03oRC|bm>o>o®|F|3R¦3oCnp  >{¼|F@¦
C|0~`oRYn|3RÐ|W~>y>~>oCrw>poRy3ê¸py0j}~b|3RjlyY~>£npyY>orm~>j ³ oCnp|3{¥w>{}|0~$
 #>y>y0j}~>k
yYo±¸òybj¼~b|3RjlyY~>±£npyYÝ>ow>{¼|b~>o|3|3R¦3oCnp±C|0~^oC~0oCn±>ok0yY|F{»|0npoC|  |3oR 
zjlW>o|F{{zjl>j}~Wpzvyj}ooCw>  |3o   |0~>  % v~>y r|3oCn±z®|3®|3Rjy>~>C
>oyYwwMyY~>oC~b®w>{}|CboCnpR>yYy0o0
&(')+*-,.",0/214365738".%39:*-;<1:=3>578

uå~YmoCn±y3oRdwMoCnpj}oC~0Ð| ³ ooRoC~²C|0nnpjloRWyYm>vj}~OoRoCnj}~>jljlyYr|Fj¼~>vj}~Wy>npoCn±y ³ oCnpjþÞ
Ñ$ÒÓêÔÿ ºwMoCn Þy>nr|0~>Ro<|0~>!j{l{}m>n|3o<>o<k0oC~>oCn|3{ljlp[y3«m~>j ³ oCnp|F{w>{¼|b~> ³ oCnpm>OR{}|3jlC|3{oñ
Á0Â@?

Ä0Å0Æ	ÇÅ0ÆQÈÊÉÅ0Ë3Ì	ÇÌ
!m>oC~0j}|3{w>{}|0~>Cü:oRyYrw|0nponm~j¼¹o«npoRm>{ly>>|3j}~>oRzjl<Ñ$ÒÓÔWj}~`yYoy3¥>ou¿BAÿþÖC
RyYrwMoRjljlyY~QyYr|Fj¼~>y`>oWnpoRm>{ly3>oORyYrwoRjjy>~[w>{¼|b~~>oCnp D "
E oCny0/¥qCÖ0ÖbÖR Oü:o

>oC~²>y3zø|3®|Om~>j ³ oCnp|F{µw>{}|0~²j¼~<|oRoCnj}~>jljlryYr|Fj¼~²jlyYnpok0oC~>oCn|3{$|0~`|R{}|3jlC|3{
"o !m>oC~0j¼|F{w>{}|0~oRC|0m>oº|O{}|0npkbo ~YmMoCnyFR{}|3jlC|3{±o"!m>oC~0j}|3{vw>{}|0~>r|0nporRyY~b|3j}~>oR:j}~h>o
m~>j ³ oCnp|F{êw>{}|0~
	à áGF»áâIHKJLèNMGOP:Q ÓêÒÔ çR î R îðÓêï ì ÓÒíêî ï<S
i	y>mnw>{¼|b~~>j¼~>k¤>oC¥ÙUT3í$é(VÙ	ÓXW 6Y |0m>Í[Z\A>oR{}r|0~qCÖ0Ö0Ö2R*îðÔÔ 6Y y>oC>{oCn±oR|3{}	q/Ö0Ö0×R]S R íêï
6^ y>~>_
k Zi	y3	qCÖbÖ C¥|b~> æ S/Ô  ®|3{¼m+Za`oýê~>oCnR>0Õ0Õ0ÕcbRyYrwMoRoR j}~O>onpoRoyYr|Fj¼~>vzvo
| ³ orm>joR$`Ù T3í$dé VêÙdÓ W!jl¹|FoR:yYe
~ SRí R Ô T3íêïó$z®>jl{loî ÔÔQ|0~>f
 S R íïc|0npo^kYn|0ww>{}|0~bñò|3oR
w>{}|0~~>oCnpC æ SCÔQm>oRr|<>oCmnpjljloC|0npR-|0wwnÜyY|3R:|3oR[yY~Q|<wnpoCwnpy>RoRj}~>k:y3>o y>r|3j}~
>ou¿ gAÿÖ Cw>{}|0~~>oCnpzvoCnponm~OyY~O00 D Í  yYn±YÕbÕ D %Í hoC~bj}mi
 B#Ûzj<qC C D ù±>oR
vu D "o !dm>j}wwoRhzjl ^ j}~Ym>
 >oWkYnpj}wwoCnOyY^|3j}~[RyY~>jlry3òzvy:npy>yYruÀ|b~>cù®±|-npy>y0
ø
zjl<|^{o|0~>:npjlkYb®k>npj}wwoCn|0~>:|O~YmoCnyF|3{l{¤|3C|0~Mory ³ oR¡b>onpyYMy0C>o
|3¦jlvyy ³ o®|3{l{>o®|3{l{l±©npy> npy>yY¢u!y«nÜyYyYåù6zjl>onpyYyb¥j}~>jlj}|3{l{Wj}~rnÜyYyY u«>>o
|Fo ³ |0npj}|0>{loRy3v>o "!# oC~>Ry>j}~>ky3v>oyYr|3j}~<|0npo>owy0jljlyY~gy3>ornpy>y0|0~><>o
wybjljlyY~ryF»>o|3{l{lC¥>owy0jljlyY~^y3>onpyYybj±oRjl>oCn¥Õ  nÜyYyY¢

u yYnvq  nÜyYyYåù R3z>j{lo>o
wybjljlyY~Wy3|«|F{{(C|0~WoÕ  npy>yYÝ

u Rq  npyYy> ù R  j}~W{lokYnpj}wwMoCn vyYnv  j}~WnpjlkYbkYnpj}wwoCqn R
i	y>n>o¤uÐr¿ BAÿ2Ö COkYnpj}wwoCnwnpy>>{oC¹>or~YmoCny3w>{}|0~<oCw>®j}~:|b~WyYw>j}r|F{µw>{}|0~`kYnpy3z{j}~bñ
oC|0np{lOzjl^>ownpyY>{loC~>moCnRs ¥nÜyY>{loCõqRyY~0|3j}~>r|3{l{lC|0~>O>oÐ~>moCnvyFµ|3{l{lkYnpy3z
bpzvyÞy>noC|3@<wnpy>>{oC²>o npoRm>{yF¥>ooRdwMoCnpj}oC~0¤jl>y3z®~²j¼~hê|0>{lo ^y0kboR>oCnzjl
>ornpoRm>{lyF>orw>{}|0~~>oCnp¤j¼~g>ouÐr¿ BAÿÖ C^RyYrwMoRjljlyY~u k>n|0w>jlC|3{npoCwnpoRoC~b|3jlyY~`y3v>o
w>{}|0~~>j}~>kj}oj}~`>o|0>{lojl>y3z®~Wj}~<ijlkYmnpoO%q C$
 tÒ®ÓÔWkboC~>oCn|3oRj}~>j}m¤ñ£{loC~>k0:w>{}|0~>
	m>ory`jl«w|0n|3{l{oR{vnpoC|3bñ­»nÜoC|bnp@<|3{lk0y>npjlWruoCw>jlRoRQj}~:ijlkYmnÜo%q Cjl«| ³ ybj¤>o
oRwyY~>oC~bj}|3{kYnpy3z^y3>o«w>{}|0~~>j}~>kWj}o¤|3R|0n|3RoCnpjlÍRoR®|3{l{êyFµ>oRy>rwoRjljlyY~<w>{}|0~~>oCnp
oR>RoCw> æ SCÔüø>oC~Om>j}~>k |w|0nÜjljlyY~>oRWn|0~>jjy>~ npoR{}|3jy>~ Ñ$ÒÓÔrjl>oyY~>{l w>{}|0~~>oCnvC|bw|0>{lo
y3k0oC~>oCn|Fj}~>kyYw>j}r|F{w>{}|0~>¤Þy>n|3{l{¥>oºwnpy>>{oC¹CWi	y>n>jly>r|3j}~:>o n|0~>jljlyY~:npoR{}|3jy>~
y3|0~ "!'# oRCnpj}w>jlyY~<C|0~<Mo«j ³ jloR-j}~bv
y uKwq|3jlrw|0npjjy>~>Cz®>oCnp$
o u:jl>or~>m«MoCn
y3¥|3{l{lCu®jlCm>oR<j¼x
~ A>oRRjlyY~<sM>oyYw>j¼^|3{ê~>m«MoCnyFw|0npjljlyY~>jlÐ~>y0~>oRRoR|bnpjl{`>o
{}|0npk0oRµ~>moCny3»w|0nÜjljlyY~>Ci	yYn(>ovnpoRm>{lj}~ê|0>{looC|3@w|0nÜjljlyY~¤RyY~>jloRy3»|RyY~/¸m~>ñ
jlyY~`y3®qCÕW|Fjl¹w|bnpjljlyY~>Cy
 #ÛyYrw|0npoR`yO>oryY~>y0{ljl>jl n|0~>jljlyY~<npoR{}|3jlyY~<npoCwnÜoRoC~0|3jlyY~
>onpoRm>{lvyY>|Fj¼~>oROzjl^>o®w|0nÜjljlyY~>oRWn|0~>jjy>~rnpoR{}|3jlyY~^zvoCnpo®jk>~>j­	C|b~0{lWoRoCnyY~^>o
{}|0npk0oCn¤wnpyY>{loCCW>oOoCyYnp:m>|Fk0ory3®wnpyY>{loC 0ÕWzjlh|w|0npjjy>~>oR-n|0~>jljlyY~:npoR{}|3jy>~
z|3[ Cb× D ù±YoR/0z®>jl{lojloR>RoRoRoRW>o{lj¼¹jvy3vqC C D ù±YoR|3vwnpyY>{loCqC×yYnó>o®yY~>yb{jl>jl
n|b~>jljlyY~WnpoR{}|3jlyY~
j$kd,ml/n3opop,0/*-;<1:=3>5

 ¿£~>o¹y ³ jloyY^|3j}~[>o`|3¦hjl yhk0oR R>j}w>Cvj}w®wMyYwv@>oRoRo
ø
|0~>:Cn|3@¦FoCnpC$npoRzj}~>-|`y ³ jlor|0~>:oR>orRyYm~boCnyWÍRoCnpyr>oryY~>{l<j}~0oCnòÞoCnpoC~>RoWoRpzvoRoC~
j$kd,{za;|N3G,\*-;71x=365

}~7~ sq6sn6%gg 6@d](@qn" n¡d¢n¢£ rr%p nd@g¤~
¥ ~¦7n¢6¢Un
§"¢¨©¨q$]@© r$ª«r¤][q¬n ¢6n]¬nrg6@ ­6@®q¨r% q ]
nrNr"6ª¯°±¢]]@~U²N­n®6B³<¡µ´
³pr[¢6]¡dns>nq¨
]7@g¤n¡ds¶q·@·g´
¸N¹
º r%n" %]³prª»qn®¼¾½r¿"ÀÁÂ] rÃ@7]@Uns¡dd¢¢6¢@s´
¸p¹ º %]%@½r¿"ÀÁÄ¤r6q[
¡d6sqy·@¢´
¸N¹ º r%nÅnqy]s@g¤~

Á0Â@Æ


	 ÇÅvÆÅ	Ç  
Ë êË 

º  q %
Ð
¶
·

Ñ
}
Ò

¥
Ó

Ð
¢Ð Ð
Ð¶
Ð·
Ð
ÐÑ
Ð}
Ð¥
ÐÒ
ÐÓ
¶q

ÇÈN2É º ~
¶q
¢Ð Ð
ÐÑ
Ð¥
¥ Ð¨
¶q·
Ð¨¢Ó@
¶qÓ
·@}¢@
·"Ñ
¥ ¶q}@
Ð
Ð· ¥ Ñ
 ¥
¶q·@Ò¢@
Ñq·
·¢}«¶¢¶
ÑqÓ
Ñq}«¶q@
}"Ñ
¥ Ð
Ò¢@Ó¢·@
¥¢¥
Ð¶ ¥ Ò ¥ 
ÐÓ ¥ Ð ¥ 
Ò¢·
¶qÓ¢@}"¶
Ò¢Ó
Ð¢Ð ¥ ¶
Ó"Ñ
Ñq¢Ó@}Ð¨
ÐÐ
¥ ¢}@Ó"¶
Ð ¥
Ó ¥ Ð¨"¶
Ð¢Ð·
Ð¨·¢}ÐcÑqÒ@
Ð¢ÐÓ
Ð¨Ò¢·¢Ò%Ð¢Ð¨
Ð¶¢Ñ

Ð
Ð
Ð
¶
¶
¶
¶

¶

·
·
·
·
·





Ñ

Ñ

ÇÈN2É 

´ qn~
¶
Ð¢Ð
Ð·@
Ð¥
¥ @
¶q·
¶¢¶q·@
¶qÓ
}¢¢@
·"Ñ
Ð¢ÐÒ@¢
Ð
¶q¢·@Ò¢
 ¥
·¢Ò¢@¢
Ñq·
}¢Ò ¥ Ñq
ÑqÓ
Ó"Ñ­Ð¨¢
}"Ñ
¥ Ð
Ð¨"Ñ ¥@¥ 
¥¢¥
¶"Ð}Ð@Ð
·%ÐÑ­ÐcÑq
Ò¢·
 ¥ "Ñ}¢
Ò¢Ó
}@}¢Ò¢Ó«¶q
Ó"Ñ
Ó ¥ }¢}@Ó¢
Ð¨Ð
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô

½r¿"ÀÁ
¢}
Ð¨ ¥ Ñ
Ñq@}¢Ó¢·
·¢@·¢Ò@·¢ÒÐ
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô

Ð@Ð
Ð¥
¶·
¶Ó

Ô

Ô

Ô

Ô

Ô

Ô

Ô

Ô

Ô

Ô

Ô

Ô

Ô

Ô

Ô

Ô

ÆÆ}Æ
Ê½rÉ
¶q¢ ¥
¶­ÐÑ
¶q¢Ò«Ñ
·¢¢}@
·¢·"¶
· ¥¢¥ Ó
 ¥Ó ¥
Ñ¢Ñq}«Ñ
}¢} ¥ Ñ
¥ ÑqÒ@·
Ó¢¢}@
Ð¨¢}Ð ¥
Ðc¶q¢Ó@Ó
ÐcÑq"Ñ
Ð¨}¢Ò¢Ò@}
¶¢¢Ò@
¶·¢}Ð¨·
¶}¢Ó ¥ ·
¶Ó¢Ò"Ñ"Ð
·@·"¶­Ð¨

¨Ð ·
¶"Ð
·%Ð
· ¥
 ¥
Ñ·
}@·
¥ Ð
¥Ó
Ò«Ñ
Ó@·
Ð%Ð
Ð@Ó
Ð¢Ð¨Ó
Ð¶@Ñ
Ð·«Ñ
Ð@·
ÐÑ"Ð
ÐÑ ¥
Ð}«Ñ

ÉÉ
Ñ
·¢Ò@
·«¶ ¥ 
¶}¢}@Ò¢
¶¢¶}¢@}¢
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô

Ð Ñ
¶q·
· Ð
·¢Ó
 ¥

Ô

Ô

Ô

Ô

Ô

Ô

Ô

Ô

Ô

Ô

Ô

Ô

Ô

Ô

Ô

ËÌ"ÀÍÎË]Ï
Ð¢Ð¨·
Ð¢Ð
¥ Ò«¶q
Ð¥
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô
Ô

|0>{lo«t `¤npj}wwoCnyYr|3j}~WnpoRm>{l/B#vy0{}mr~OyY~>o|b~>Wòzvy¾ÞyYn±oC|3RWw>{}|0~~>oCnv>y3zø>oÐw>{}|0~~>j}~>k
j}oj}~ ¹j{l{ljloRRyY~>|0~>^>oÐw>{}|0~^{loC~>k0 tÒÓêÔ-|0np/ê|0~>WÑ$ÒÓêÔ D yY~>yê>y*z>o
w>{}|0~~>j}~>kj¼¹oyYnÑ(Ò®ÓÔm>j}~>k|Ow|0npjljlyY~>oR:|0~>:|r¹yY~>y0{ljl>jlrn|0~>jjy>~¡nÜoR{¼|FjlyY~
npoRwoRRj ³ oR{l0±i	yYn$Ñ(Ò®ÓÔzjlw|0nÜjljlyY~>oRn|0~>jljlyY~¤npoR{}|3jlyY~¤>ov>j}np¤Ry0{}mr~>y3z
>ov~YmMoCn$y3	w|0npjjy>~>C  ¨ñ (oC|0~>|3$>o¥w>{}|0~~>oCnm>oR«yYnÜo|0~rq/ C D ù±>oR$y3
oC¹yYnpy>n$z|3oCnj}~|3oRroyYnpo®nÜoRmn~>j}~>k«|yb{¼m>jy>~Ö Õ~>{l nÜoRm>{lÞy>noRYoRCm>jlyY~>
m>j}~>kO{loR®|0~<qC C D ù±YoR|0npo>y3z®~^yYnvÑ$ÒÓêÔ
>om>k0yY|F{±jl|3¥>oy ³ jom>MoÐnÜoRzy>m~>$YoyYnpo>oRyYm~boCnC|0~OooRvyÍRoCnpy¥>o
wnpyY>{loC¤j}~:>oOy ³ jloryY^|3j}~<yY~>{l<jý$oCnb>o ~>moCn¾y3yY>¸poRRy3oC|F@<pworyF¥yYy>$
>o~>moCny3µy>>¸òoRRj}~>CnpoC|FoR®{lj}~>oC|0np{l²©npy>s¤yYn ¥npyY>{loC qyr3yYn ¥nÜyY>{loC 0ÕM
Õmn "!# oRCnpj}w>jlyY~²y3ê>oy ³ joy>r|3j}~ nÜoCwnpoRoC~boC|3Rrpwoy3$yYy>|3|~Ym¹oCnpjlC|3{
|Fo ³ |0npj}|0>{loWzjlh|n|0~>kbo«"o !m|3{±y>oO~YmoCn¾y3yY>¸poRRy3|3pworyFy>yY$Oê|0>{loW
>y3z>ow>{}|0~~>j}~>k«j¼¹o¥yYnÑ$ÒÓêÔ|0~>>ovRyYrwMoRjljlyY~rw>{}|0~~>oCnpyYn>oy ³ jloy>r|3j}~wnpyYbñ
{loCC¥¿ ~r>j±oRdwMoCnpj}oC~b®|0~>r>onpoCr|3j}~>j}~>kroRwoCnpj}oC~bÑ$ÒÓêÔrm>oR jl±o©|0m>{lw|0npjjy>~>j¼~>k
y3®>oWn|0~>jljlyY~npoR{}|3jlyY~Qi	y>no ³ oCnpßwnÜyY>{loC |3{l{>ow>{¼|b~~>oCnpr­»~>[>oWyYw>j}r|3{y0{}m>jlyY~
^ j}¦3oyby3ê>oRyYrwoRjjy>~Ww>{¼|b~~>oCnp®Ñ$ÒÓêÔ^|3|{ly3zcRyYrwm>|3jlyY~^j}o0m>jlvjlv>oyY~>{l
w>{}|0~~>oCn~>y0>y*zj¼~>k<|0~b¡j}~>CnpoC|Fo j}~hRyYrwm>|FjlyY~<j}oro ³ oC~:>y>m>kY$>o^jlÍRo y3>o^|3o
w|3RoyFµjloC~>RyYj}~>kOj}~>CnpoC|3oR©nÜyY0ÎpÏy  ×Ø*
 >oW{ly0k0jljlRry>r|3j}~ Û oR{ly0y	qCÖ0ÖFRyY~>jry3®RjljloRCvnm>@¦bC
[
|3j}nw>{}|0~>oRv|0~>rw|3@¦/|3k0oRCnm>R¦0C|0~¤yY~>{lry ³ ovoRpzvoRoC~{lyYC|3jy>~>j¼~¹>ov|0ovRjlp0êuj}nw>{}|0~>oR
C|0~^yY~>{l y ³ o®MoRpzoRoC~^|3j}nwyYnÜ{ly>C|3jlyY~>vj}~rjþý$oCnpoC~bvRjjoR/>o|3¦jlvy«y ³ ow|3@¦/|3k0oRvy
wMoRRj­	^{y>C|3jlyY~>/¥nÜyY>{loCjþý&oCnbW>o«~>moCny3¥w|3R¦C|3k0oR/	RjljloRC$|3j}nw>{}|0~>oR|0~>nm>@¦bC
>oW{ly0k0jljROyYr|Fj¼~Qjl |bnp$|b~>[yY~>{lÜ
 ±npyY>{loC q0Ms×W|0~>øqbqWy3®>obÕ¡wnÜyY>{loCrzvoCnpo
y0{ ³ oRcb-|0~b-w>{}|0~~>oCnj}~Q>oOu¿ BAÿþÖ C`RyYrwoRjjy>~  oRoWê|0>{loW 8¡>o "!# oRCnpj}w>jlyY~
j$kd,\Ùs;UÚ(38".%398*-;71x=365

Á0Âè

Ä0Å0Æ	ÇÅ0ÆQÈÊÉÅ0Ë3Ì	ÇÌ

10000

1000

Ý

Time (Sec.)

100

10
UMOP Part.
UMOP Mono.
STAN
HSP
IPP
BLACKBOX

1

0.1

0.01
0

2

4

6

8
10
12
Problem Number

14

16

18

20

ijlkYmnporq%CMt {}|0~~>j}~>kj}o¾Þy>nÑ$ÒÓêÔ`|0~>>o¤uÐ¿rBAÿÖ2CrRyY^woRjljlyY~<w>{}|0~~>oCnpyYnv>o¤kYnpj}wwoCn
yYr|3j}~:wnpy>>{oC¹CÞtÒÓêÔx|0np/«|0~>QÑ$Ò®ÓÔ D yY~>y	¤>y3zå>orw>{}|0~~>j}~>k:j}oyYn
Ñ$Ò®ÓÔWm>j}~>kW|rw|0npjljlyY~>oR<|0~>¡|^yY~>y0{ljl>jln|0~>jljlyY~nÜoR{¼|FjlyY~	npoRwMoRRj ³ oR{l0
y3®>oW{ybk0jljlRryYr|Fj¼~[m>oR ~Ym¹oCnpjlC|3{|Fo ³ |0npj}|0>{loROy¡npoCwnÜoRoC~0^{y>C|3jlyY~>^y3Ðw|3R¦C|3kboRC
z®>oCnponm>@¦b|0~>W|3j}nw>{}|0~>oRÐ|bnpo®npoC|3oRW|3vwoRRj}|3{({y>C|3jlyY~>/° ³ oC~r>yYm>kY^>o|3o®w|FRo®y3
>o^|3{l{êwnpyY>{loCjlÐy>oCn|3o0dÑ(Ò®ÓÔO£|3jl{l®yyb{ ³ o|0~0Oy3>ownpyY>{loCj}~W>o¤yYr|3j}~¥¿©
m>RRoRoRyrk0oC~>oCn|3o>on|0~>jljlyY~nÜoR{¼|FjlyY~Wm>£|3jl{l®y­»~>jl`>ownÜoRj¼^|3k0oC|F{Cm>{}|3jy>~>C
üho| ³ om>jloR<>o¤{ybk0jljlRyYr|3j}~²oRYoC~>j ³ oR{0$nÜoRRoC~0{l²Þy>Cm>j}~>k y>~ÓÙ	Ú$Úñò|FoR<oñ
oCn¹j¼~>jlj:w>{}|0~~>j}~>k	å>o`{ybk0jljlRWyYr|3j}~6oRoCOy-o<|0np!m>j}~>kc|:w>{}|3j}~ÓÙ	Ú(Úñò|3oR
|0wwnpy>|3@|3>ojlÍRoRy3>ownpoRj}r|3k0oRkYnpy3z!y>y£|3C(y |3	npoR>jlRyY^w>{oR>jlp0	zvo| ³ o
o ³ oR{lyYwMoRß|0~`|0>n|3RjlyY~`oRR~>°j !m>oyYnÓêÙÚ$Úñò|3oRQoRoCn¹j¼~>jljOw>{¼|b~~>j¼~>kr¿£~<|W~Ym>>oR{l{Þ
|WwnpyY>{loCjl­»nÜy0{ ³ oR:m>j}~>k¡|b~¡|b>n|3Rn|b~>jljlyY~`YoCWz®>oCnpooC|3R`n|0~>jjy>~Ry>nnpoñ
wMyY~>y|WoR¤y3oCnpj}|3{ljlÍC|0>{lo|3RjlyY~>CW>oC~h>oroCw>j}~h>o |0>n|3Rw>{}|0~Q|0nporoCnÜj¼|F{jlÍRoR
m>j}~>k|0~²yYnpj}~|0npWn|0~>jljlyY~WYoCWvü!jW>jl~>oRz |3{lk0yYnpjlWMzo| ³ o«MoRoC~¡|b>{o¤yOy0{ ³ o
o ³ oCn|3{y3µ>oRyYrw>{loRWuÐr¿ BAÿ2Ö CRyYrwMoRjljlyY~`{ybk0jljlRÐwnÜyY>{loC ß oC~>oC~WoR|3{}0Õ0Õ0Õ 8
	à áGF»áGFåäÐæ(çfà Ù S R í$dé T çQì ÓÒíî ï
>oy>>|3R{loyY^|3j}~ |3¥MoRoC~rRy>~>nm>RoR^yoCy>~>n|3o>ok0oC~>oCn|3{ljlpy3êm~>j ³ oCnp|3{w>{¼|b~>C
¿¤RyY~>jly3|WkYnÜjQzvyYnp{l:zjlh áRoR{l{lCB u[y>>|3R{loR«|b~>-|npy>y0|3k0oC~bC >oOwy0jljlyY~>y3
>ory>>|3R{loR«|bnpor~>y0o­»~>oR$ >o^k0yY|3{¥wMy0jljlyY~<y3v>o npy>y0jl>o mwwoCn¤npjlkY0¤RyYn~>oCny3
>ork>npjl$µ|b~>:>oO|3¦ºÞyYn>oºnpy>y0jlyy ³ o£npyYõ|b~0:wybjljlyY~:j}~h>orkYnÜjQyW>o^k0yY|3{
wybjljlyY~Wù¥oRC|bm>o >orj}~>jj¼|F{{ly>C|3jlyY~>¤y3yY>|3R{loR|0nporm~¦Y~>y3z®~>oOm~>j ³ oCnp|3{vw>{¼|b~-m>
|0¦Fo®|0~b wy0j}>{owy0jjy>~Wy3$yY>|3R{loRj}~0yr|3RRy>m~0C>z®>jlROk0j ³ oR á¢âãnä<å¨æç  áã j}~>jlj}|3{$|3oRC
i	y>n|wMoRRj­	j}~>jlj}|3{|Fo|"o !dm>oC~bj}|3{w>{¼|b~rC|0~^ok0oC~>oCn|3oR£npyY >om~>j ³ oCnp|3{w>{¼|b~¥>m>C
 á¢âãnä<å¨æ ç  áãW"o !dm>oC~bj}|3{w>{}|0~>|0nporRy>rwnpjloR:j}~<yY~>oOm~>j ³ oCnp|3{vw>{¼|b~µ
 èy0o|3|Wm~>j ³ oCnp|3{
Á0Â@é


	 ÇÅvÆÅ	Ç  
Ë êË 

º   ¨
Ð
¶
·

Ñ
}
¥
Ò
Ó

Ð
¢Ð Ð
Ð¶
Ð·
Ð
ÐÑ
Ð}
Ð¥
ÐÒ
ÐÓ
¶q
­¶ Ð
¶¢¶
¶q·
¶q
¶¢Ñ
¶q}
¶ ¥
¶qÒ
¶qÓ
·¢

|0>{lo«t

ÇÈN2É
Ð
Ð¶
Ð

Ð
Ð}
Ð
Ð¶
Ð
Ð
Ð

Ð}
Ð
Ð}
Ð
Ð}
Ð
Ð}
Ð¶
Ð}
Ð
Ð}
Ð
Ð}
Ð}
Ð}

ÐÒ
Ð}

½¿"À2Á
ÐÓ
ÐÒ
ÐÓ
¶q
¶­Ð
¶¢¶
¶¢¶
¶q·
¶¢Ñ
¶q}
¶ ¥
¶qÒ
¶qÓ
·Ð
·"¶
·¢
·"Ñ
· ¥
·¢Ó
¢
"¶
"Ñ
¢Ò
Ñq
Ñ¢¶
Ñq
Ñ ¥
}"¶
}¢
} ¥

Ê½rÉ
¶"Ð¶­Ð
¶"Ð¢
¶"Ð¢
¶"ÐÒ¢Ò
¶@¶q¢Ò
¶}Ð ¥
¶·Ð}
¶·ÐÑ
¶·"Ñ ¥
¶@Ñ­Ð¢Ð
¶"¶ ¥
¶"Ñq}
·@ ¥ 
¶@Ñ ¥ ·
¶@Ñ ¥¢¥
¶}¢Ó¢Ó
¶}¢"Ñ
¶}¢Ò¢}
¶ ¥ ¶ ¥
¶ ¥Ò ¥
¶Ò¢·¢
¶Ò¢·¢
¶Ò¢}¢}
·@·¢Ð
¶Ó¢Ó ¥
·@Ð·
·«¶¢Ñq·
·@¢¢Ó
·@·¢Ò¢
·%Ð¶ ¥

êÉ%É
Ð
Ð
Ð
Ð
Ð
Ð
¶q
¶q
Ð 
·¢
¢· 
¶q
¢· 
¢· 
Ð
¢· 
Ð
¢· 
¶q
¶q
¶q
¶q
¶q
¢· 
¢ 
Ñq
¢ 
Ñq
¢ 

Ô

ÆÆ}Æ
ËÌ"ÀÍ%ÎË]Ï
Ð@Ð
Ðc¶
Ð¨
Ð¨}
Ð¨Ò
¶
¶@¶
¶
¶}
¶Ó
·@
·«¶
·@}
·«Ñ
·@Ò
·@Ó
%Ð
@·
«Ñ
 ¥
@Ó
Ñ"Ð
Ñ·
Ñ@Ñ
Ñ ¥
ÑÒ
}@
}@·
}@
}@}

y ³ jlo<yYr|Fj¼~!npoRm>{C >o<|0>{lo<>y3zO>o:nm~j}o<j}~øjl{l{jloRRy>~><Þy>nroC|3R
>w {}|0~~>oCnR  ñ¨oC|b~>|3>oºw>{}|0~~>oCnm>oR[yYnpo^|0~[qC2C D ù±>oRyF¹oCyYnp`yYn
z|3voCn¹j¼~|FoR¡MoÞyYnÜonpoRmn~>j}~>kW|y0{}m>jlyY~¥u{l{êw>{}|0~~>oCnpk0oC~>oCn|3oRWyYw>j}r|F{&w>{}|0~>
y3{oC~>kb ×M[ tÒÓêÔOm>oRO£|0n{loR|0~`qC C D ù±>oRyYnv|0~b¹wnÜyY>{loCôj}~O>jly>r|3j}~
D

w>{}|0~Ozjlu²yY>|3R{loRvj}~>R{}m>oR|0~0Om~>j ³ oCnp|3{$w>{}|0~Ozjl<qy¬uWyY>|3R{loRC	|3vyY>|3R{loRC|b~ Mo
w>{}|3RoR¡|F>o|0o{ly>C|3jlyY~B èy0oy>npoRy ³ oCnR0|3v>om~>j ³ oCnp|3{w>{¼|b~>Ð~>o ³ oCnÛRy ³ oCn|F{{(j¼~>jlj}|3{
|FoRCêMoRC|0m>oWyY>|3R{loRC|0~QoWw>{}|3RoRc|3¤>ork0yY|F{wybjljlyY~¥|0~>:y>>|3R{loRC|0~Q>{y>R¦<>o
npyYMy0C
uõm~>j ³ oCnp|F{Ðw>{}|0~ßÞyYn^|0~[yY>|3R{loyY^|3j}~[zjls<yY>|FR{oROz|3k0oC~>oCn|3oRczjlÑ$Ò®ÓÔ
j}~QY0Õ²oRRyY~>r|0~>QRyY~0|3j}~>oR[ CC00ÖbØWÓêÙÚ$Úø~>y>oR  qC D ù±>oR@ Rë
 A>"o !dm>oC~bj}|3{®w>{}|0~>zvoCnpo
oR>n|3RoR²©nÜyY>o¹m~>j ³ oCnÜ|3{w>{¼|b~`Þy>n®|^woRRjþ­	 wMy0jljlyY~<yF¥>oyY>|3R{loRCijlkYmnpoWqCÖ^>y3z
>ooR>n|3Rjy>~rj}oyFµ"o !m>oC~bj}|3{êw>{}|0~>vyYnv|0~Oj}~>CnpoC|3j}~>kW~YmMoCnvy3êoCw>j}~W>ow>{}|0~° ³ oC~
>yYm>k><>o ÓÙ	Ú$Ú!npoCwnÜoRoC~0j¼~>k<>oOm~>j ³ oCnp|3{w>{}|0~hj¤{}|0npk0o0>oroR>n|FRjlyY~<jl ³ oCnpW£|3|0~>
yY~>{lWkYnpy3zv{lj}~>oC|0np{lzjO>ow>{}|0~W{loC~>k0
>ooRy3|FRjlyY~>|3y>Rj}|3oR<zjl<|^|3oªj}~:|Om~>j ³ oCnp|3{¥w>{}|0~O¬<jloRYn|3RoR<0`RyY¤ñ
wm>j}~>k>o«Ry>~/¸Üm~>RjlyY~gy3¥>orÓêÙÚ$ÚcnÜoCwnpoRoC~b|3jlyY~`y3ªr|b~>¬$u®oRCnpj}oRQj¼ì
~ A>oRRjlyY~:
>jly>woCn|3jy>~:|3«|b~:mwwoCny>m~>:RyYrw>{loR>jp:yFÄ í î ª îî ¬ î 8i	yYn¾>o m~>j ³ oCnp|3{w>{}|0~<j}~h>o
Á0Â@ï

Ä0Å0Æ	ÇÅ0ÆQÈÊÉÅ0Ë3Ì	ÇÌ
º   ¨
Ð
¶
Ñ
¥
Ð¢Ð

ÇÈN2É
Ô

½r¿"ÀÁ
¥} ¥
¶ ¥
¢·%ÐÓ
"· ¶
·¢}@¢Ó@·"¶
q¶ Ó
Ô
Ô
Ðc¶qÒ@¢}
·¢

Ô

Ô
Ô

Ô

Ô
Ô
Ô

Ô
Ô

Ê½rÉ
¥ Ó¢}¢Ò«¶
Ó ¥ Ð¢Ð¨
Ð@¢Ð¨·
¥ Ò@Ò¢ÓÐ¨
Ò@}ÐÓ«Ñ

@·
@ 
¶}
Ð¢Ðc¶
·@

ÉÉ
Ó¢@
¶ }
Ô
Ô
¶q@¢
¶
Ô
Ô
}¢Ó@¢
·@·

ËÌ«ÀÍÎËÏ
¶q@}"¶
¶ ¥
}¢@·¢}
·"¶
Ô
Ô
Ô
Ô
}"Ñ¢
·"¶

|0>{lo	t ^ by k0jljlRvyYr|3j}~OnpoRm>{lCiyYnoC|3R w>{}|0~~>oCn±Ry0{}mr~Oy>~>o®|0~>Oòzvy>y3z>o®nm~^j}o
j}~:jl{l{ljloRRyY~> |0~>h>orw>{¼|b~:{loC~>k0  ñ¨®oC|b~>|3>o w>{}|0~~>oCn¤m>oR-y>npo|0~
qC2 C D ù±>oRy3¥oCyYnÜ yYn±z|3oCnj}~|3oRMoÞyYnÜo«npoRmn~>j¼~>kO|y0{}m>jlyY~
0.008

0.007

Ý

Time (Sec.)

0.006

0.005

0.004

0.003

0.002

0.001
0

2

4

6
8
10
Number of Plan Steps

12

14

16

ijlkYmnporqCÖMtvj}o¤ÞyYnoR>n|3Rj}~>kWo"!m>oC~bj}|3{µw>{}|0~>¾©nÜyY|Wm~>j ³ oCnp|F{µw>{}|0~`yYnv>o«y>>|3R{loy3ñ
r|3j}~WzjlWs¹yY>|3R{loRC
yY>|3R{lo«y>r|3j}~`zjlO­ ³ oyY>|3R{loRC>jlRyYrwm>|3jy>~z|3Û©|3  {loR|0~WyY~>ojl{l{jloRRy>~>
|0~>WzvyYm>{l¡|F{{ly3z|0~²oRYoRCm>j¼~>kWnpyYMy0vy oRoR{y3znÜoC|3RjlyY~Wj¼¹oRyY~>n|Fj¼~bC

 ó7þ

ðsñ-òµó7ôgõö÷gønùró7ômúdôBûmüs÷©ý÷gþÿ

£¿ ~`>jl|0nÜjlR{o^zo| ³ orwnpoRoC~boR:| ~>oRz ÓÙ	Ú$Ú»ñò|3oR-w>{}|0~~>j}~>kYoCW$Ñ$ÒÓêÔMÞy>n®w>{}|0~~>j}~>k
j}~!~>yY~bñ£oRoCnj}~>jljl0m>{ljþñò|3k0oC~bWyYr|Fj¼~>/u~[oRwnpoRj ³ o¡y>r|3j}~oRCnpj}w>jlyY~!{}|0~>kYm|Fk0o0

	!	|3®MoRoC~Wo ³ oR{lyYwMoR:|0~>¡|0~Oo ORjoC~bÓêÙÚ$Ú[npoCwnpoRoC~b|3jy>~Oy3µjl èiuåoC^|0~0jR|3
oRoC~goRCnpj}oR$üho¹| ³ o|0~|3{l>ÍRoRgwnÜo ³ jlyYm>w>{}|0~~>j}~>k¡|F{kbyYnpjlyYnÓÙ	Ú$Ú»ñò|3oR-w>{}|0~~>j}~>k
|0~>¤oRoCwoC~>oR>om~>oCnÜ|0~>j}~>ky3dz>oC~>oRovw>{}|0~~>j}~>k|3{lk0yYnpjl|0npo¥|0wwnpy>wnpj}|3o0ij}~|3{l{0
zvo | ³ o wnpy>wy0oRQ|0~<yYw>j}jljWw>{}|0~~>j}~>k-|3{lk0yYnÜjyYn­»~>j}~>k<oC~>j}>{loWy0{}m>jlyY~>j}~:yYo
yYr|Fj¼~>z®>oCnpo~>y npyY~>kyYnvnpyY~>krR>R{ljlry0{}m>jlyY~²oRYjl/>o«npoRm>{®yY>|3j}~>oRzjl`Ñ$Ò®ÓÔ
|0npooC~>RyYmn|3k0j}~>k	|3¥Ñ(Ò®ÓÔr|3v|k0y>yYOwoCn yYnr|b~>Ro®RyY^w|0npoRryyYoy3$>oÛ©|3oRR{}|3jlC|3{
w>{}|0~~>oCnp¦Y~>y3z®~OyY	|/0
ÁCÁ


	 ÇÅvÆÅ	Ç  
Ë êË 

ÆÆ}Æ

Õmn^npoRoC|0npRQ|3r	n|/z®~hyYmn|3oC~bjlyY~hy:|:~>m«MoCny3®y>woCe
~ !m>oRjlyY~>r|F«zvoWzvyYm>{l
{lj}¦3o y|3	npoRj}~h>o£m>mnpo0r¿£~hw|0npjlCm>{}|0nzvorzvyY~>oCn>y3zåzvoR{l{¥yYmnoC~>Ry>j}~>k<y3Ûw>{}|0~~>j}~>k
wnpyY>{loC±C|3{loR¥Ry>rw|0npoRy>ovoC~>Ry>j}~>k¹m>oR 0Ò®ÙÔs #mnnpoC~b{lrÒ®ÙÔÿ oC~>RyYj}~>ky>oR¥~>y0
mwwMyYnp|rw|0npjljlyY~>oR<npoCwnpoRoC~b|3jy>~Wy3>on|0~>jljlyY~WnpoR{}|3jy>~»m>>ooC~>Ry>j}~>kr|/ | ³ o
y0>oCnwnpyYwMoCnpjloR|3CoRw>jlor>oryY~>yb{jl>jl nÜoCwnpoRoC~b|3jlyY~$r|/<r|0¦3o¤j|WMoRoCn@>ybjRo0
>oOpzyWYoC«r|/:|3{ly<| ³ o |0~<"o !m|3{woCn yYn^|0~>Rorz®>oC~Qy0-|0nÜo m>j}~>k:|yY~>yb{jl>jl
npoCwnpoRoC~0|FjlyY~  |3j}~h>oºMoC|0 z|3{}¦<oRd|brw>{l%o Rz®>jl@Q>y>m>{[kbj ³ oºÑ$ÒÓÔ:|0~Q|3 ³ |0~b|3kborj}~
yYr|Fj¼~>z®>oCnpo|^w|0npjljlyY~>j}~>kOy3µ>on|0~>jljlyY~WnÜoR{¼|FjlyY~WC|0~`oo­»~>oR$
u~>y0>oCnj}~boCnpoRj¼~>k !dm>oRjlyY~rjl±yj}~ ³ oRjlkY|3ovz®>jlR ¦bj}~>ry3&w>{}|0~~>j}~>kry>r|3j}~>¥jl¥m>j|0>{lo
yYnÓêÙÚ$Úñò|3oR w>{}|0~~>j}~>k	¿©z|3êmnwnpjlj}~>k¤ÞyYnm>¥|3ê>o{ly0kbjjlRy>r|3j}~¤mn~>oRryYm>yÐMo
yr|0npOyYnvÑ$ÒÓêÔvoRRoC~b{lWzvoÐ| ³ om>jloR`>jlyYr|3j}~O>y>npyYm>kY>{l0 j}~>k |0~O|0>n|3RjlyY~
oRR~>j !dm>orzvo| ³ o«~>y3zoRoC~h|0>{lo«yry0{ ³ oo ³ oCn|3{$y3¥>o{ly0k0jljRwnÜyY>{loCj}~>ou¿ BAÿþÖ C
RyYrwMoRjljlyY~ ß oC~>oC~WoR|3{}	0Õ0ÕbÕ R
>oCmnnpoC~bêo­»~>jljlyY~¤y3 
	:jlwy3zvoCn ©m>{>m>ê>y>m>{o±oRYoC~>oR¤yoC~|0>{loy>oR{l{j}~>ky3
RyY~>nm>Rj ³ ov~>oCnpk0oRjlvoý$oRRµ|FêoRCnÜj¼MoR j}$
~ A>oRRjlyY~¤	u{y	3zvo¥oC~ ³ jljlyY~r¹yYnpo¥oRwoCnÜj¼¹oC~0
RyYrw|bnpj}~>k¡m>{ljþñò|3k0oC~b¹|b~>:j}~>k0{loñò|3k0oC~byYr|3j}~>yj}~ ³ oRjlkY|3o^>orRyYrw>{loR>jlòhy3
 	ÿ 
npoCwnpoRoC~0|FjlyY~Oy3RyY~>CmnnpoC~b®|3RjlyY~>/
A>o ³ oCn|3{êw>{}|0~~>oCnp/	j}~<w|0npjlCm>{}|0nÔ ë ÓêÚ$î  Û oR{ly0y oR|3{}$qCÖbÖ0s R| ³ o>y*z~O|3yYr|3j}~
¦>~>y*z{oRkbo®>y>m>{Wom>oRºbr|w>{}|0~~>j}~>kr>oC¢j}~^yYnpoCnóyC|3{lomwrynÜoC|3{þñ£zy>np{lºwnpy>>{oC¹C
u{y  ùv|3R@>m>y
 Z Y |0|b~>ÍC|qCÖ0Ö02Ø >y3zå>y3zå>ooC|0npR`npoRoyFÛ|^yYnpz|0npWR|3j}~>j}~>kgw>{}|0~~>oCn
C|0~Ooo  RjloC~b{lºwnm~>oR0r|3j}~>k>o®k0y>|3{»|3v|¾ÞyYn«m>{}|¾j¼~OoCrwyYn|3{	{ly0k0jlyY~^>o"o !m>oC~>Ro
y3$|3RjlyY~>¥{loC|3j}~>kry>ok0yY|F{Þ¿£~^>jl¥z|/>ok0yY|3{>C|0~j}~>R{}m>o«¦>~>y3z{loRk0o®|0MyYm>¥>oyYr|3j}~
 o0 k}C|3êy*zvoCnpj}~¤>o>{y>R¦0±zy>np{l¹m>om>j{ló©npy>My0yYyyY
w R(ucj}jl{}|0n±|0wwnpyY|3R
yYnnpoR	m>Rj}~>k:>orRyYrw>{loR>jpQy3®ÓêÙÚ$Úñò|3oRcw>{¼|b~~>j¼~>khoRoCrwnpyYjlj}~>k	óoRwoRRj}|3{l{lcoRC|0m>o
oRR~>j !dm>oRÞy>nvoRj}~>kroCrwyYn|3{yYnm>{}|3|3{}npoC|3| ³ ooRoC~²o ³ oR{lyYwoR<j}~¹yYoR{$R>oRR¦0j}~>k	
Õ>oCn¤©m>mnpoW@|F{{loC~>k0oRWj}~>R{}m>o:j}~bnpy>	m>Rj¼~>k[|0>n|3RjlyY~Qj}~cÓÙ	Ú(Úñò|3oRøw>{}|0~~>j}~>kc|0~>
o­»~>j}~>kwoRRj}|3{ljlÍRoR¡w>{}|0~~>j}~>k |3{lk0y>npjlyYnm>{ljþñò|3k0oC~b¥yY^|3j}~>  o0 k	}3|3{lk0yYnpjl¹m>j}~>k>o
{loC|3®~>moCny3¥|3k0oC~b±ÞyYnÛy0{ ³ j}~>kW|wnpyY>{loC¬
 R

 õ sôBóÞöÿUû
\ÿUô7ýø
AwoRRj}|3{|0~¦bvy¬|3y0{ly«n|

³ oCnpy	 D |0npRyrvy ³ oCnÜj&|b~> >oyb>oCnvoCoCnpvy3ê>o¿£ A!k>npyYmw
yYnj}~0npyY	m>Rj}~>k[m> ygÒÙ	Ô|0~>[yYnr|0~b[npoRz|0npj}~>k:jlCm>jlyY~>Wy>~cÓÙ	Ú$Úñò|FoRw>{}|0~~>j}~>k
|0~>[y>oR{R>oRR¦0j}~>k	hü:oº|F{y:zjlhy<|0~¦:|b~>	|3{°ùvnpY|0~bC°	m~>
 #v{}|0n¦3o0¥oC~npj}¦
(uÐ~>oCnpoC~   n~ ^ j}~>>¨ñ èjloR{}oC~|0~> ^ |0npù¥j}n¦FoR	|3{yYn|F ³ jlRoOyY~:ÓÙ	Ú$Ú!jlm>oR¹|b~><Þy>nr|3{
npoCwnpoRoC~0|FjlyY~ij¼~|F{{l0zvo|0~¦¤>o|0~>yY~bd¹yYm>npo ³ jloRzvoCnp±ÞyYn>oRj¼n±RyY^oC~0¥|3±kYnpoC|3{
j}rwnpy ³ oRW>ownpoRoC~b|3jlyY~OyFµ>jl®|bnpjlR{lo0
>jWzvyYn¦:z|3OC|0nnpjloR!yYm>Oz®>jl{lo:>o`­»npW|0m>>yYn^z|3 ³ jljlj}~>k #|0n~>oRk0jlo D oR{l{lyY!
~ ~>jþñ
{ ®~>j ³ oCnpjp:yFÄ EoC~^|0n¦>oWnpoRoC|0npRhjwMyY~>yYnÜoR-j}~[w|0np0
³ oCnpjp`£npyYõ>oº(oR@~>jlC|3"
D  Y j}~>oRf
 Z+#vyYrw|b~007 A>oR{}oC$
n Zn|0~>o0ÿ i	y>~>$$>¬
o EooC~>ou ³ |0~>RoR[voRoC|0nÜ@4
 ±npy0¸poRR

^

^
uk0oC~>R EuÐ 

u ê|b~>>o±u®j}ni	y>npRo¥voRoC|0nÜ@ |0MyYn|3yYnp u®i¥ êm~>oCn|3kYnÜoRoCoC~0~>m«MoCn
i¥0Õ0ØbÕ0/ñòÖ0×/ñò*ñòÕ00s0Õ>o ³ jloRz|b~>rRyY~>R{}m>jlyY~>vRyY~b|3j}~>oRº>oCnÜoRj¼~O|0npov>yboy3>o®|0m>>y>np¥|0~>
>yYm>{l-~>yborj}~boCnwnpoRoRQ|3Ð~>oRRoR|0npjl{l-npoCwnpoRoC~0j}~>k`>o#y  Rj}|3{¥wyb{jlRjloRryYnoC~>yYnpoCoC~0C
ÁCÁ0Â

Ä0Å0Æ	ÇÅ0ÆQÈÊÉÅ0Ë3Ì	ÇÌ
oRjl>oCnvoRwnpoRoRWy>nj}rw>{ljloR$	y3>oEooC~>ou® ³ |0~>RoR¡ÛoRoC|0npRµ±npy0¸poRR±u®k0oC~>R  EuÐ¯	u
R
>ouj}niyYnpRovoRoC|bnp@ ^ |0MyYn|3y>np  ui¥ ^ vy>nv>o$¤A`y ³ oCn~oC~0/

&%%

('  ñ*)
+-,-.{ùôgõö÷BûgÿøKý/Bÿ1032 üsú\ùö54
j$kd,;(/,17698;: =<?>A@CB0¶DC@<E3BFG>GHI<KJL(< ¶E3<EM>R¶DCFNPORQS@ET UV@GTVFGW
LX FYEZLXVFI[F\F^]_<;>`L>-@CB0¶DC@<E
BF^>`HYIa<bJcL(ð< ¶Ede<fEd
	hg<LXiLX FC>G@DCFP>`FYDC@EL(<HG>@#>\Pj
klpI ¶/¶ : t ^ oRmn\o qpZrastrau oC~>y0o>o èiu  oRo[Eo­»~>jljlyY~`q%(RyYnnpoRwyY~>j}~>ky>ovoCr|0~bjlR
y3v[
 |3o­»~>oRºb `¾j}m~>@>jlk0{lj}|¤oR¥|3{  qCÖ0Ö0×2RuÐ~w-	 yYr|Fj¼~¤oRCnÜj¼w>jy>~xø
 zjl¹oCr|0~bjlR
o"!m|3{y$m n C|0~Mo®RyY~>nm>RoRj}~r>o¥y0{l{ly3zj}~>k«z|/t ^ oRAå
 o®|j}~>k0{loñò|3kboC~0vyYr|Fj¼~¹z®>oCnpo
|3{l{»y m>oC~b|0npooC~>Ry>oR¡|3®~>moCnpjlC|3{|Fo ³ |0npj}|0>{loR|0~>W>oCnÜojlÐ|b~W|3RjlyY~^yYnvoC|3ROoR{loCoC~0
j}~<>or|3{}w|0MoR s y3zm n y#ÛyY~>jloCn>or|3RjlyY~&
{ |Fy>Rj¼|FoR<yWj}~wm>«¨A| s  ^ oR>o«oR®y3
RyY~>n|3j}~>oR<|3o ³ |0nÜj¼|b>{oRy3l²
{ o"!dm|F{>ooR®yF|Fo ³ |0npj}|0>{loRj}~}  >orwnpoRRyY~>jljlyY~<y3
{ jl|0~`oRdwnpoRjlyY~<|3o­»~>oR¤>ooRy3v|3oR| ³ j}~>k<|0~`yYm>k0y0j}~>kOn|0~>jjy>~`Þy>nj¼~wm>¨
W
>oroý$oRR¤RyY~>jljlyY~:yF*`
{ jlr|ORyY~/¸m~>RjlyY~:yFÛRy>~>jjy>~|3{voý&oRR (~ C RO>oCnporjlyY~>o
RyY~>jljlyY~|3{oý$oRR^Þy>nroC|3R|3oW|3W|3|0~[y>m>k0y0j}~>kQn|0~>jljlyY~6yYn^j¼~wm>¨ ~
 j}~>o
RyY~>jljlyY~|3{oý$oRR|3yYRj}|3oR¡zj|3oªjl¤>oR|0n|3RoCnpjljloRdwnpoRjlyY~`yYn®ª^|0~>  jl|
R|0n|3RoCnÜjjloRwnpoRjlyY~ºÞyYn±>ooRy3¥~>oRY|3oR u  ª r ¨rR
 ÿV@ ÿþ2ÿôBõÿUø
ùv|3RRYm>Ci}pZ Y |b|0~>ÍC|i  q/Ö0Ö0ØR3 j¼~>k<oC^wyYn|F{¥{ly0k0jlOyRyY~bnpyb{oC|0npR:j}~Q|OyYnpz|0np
@|3j}~>j}~>krw>{}|0~~>oCnR$¿£~K`|3{l{}|0 D }Z D jl{¼|b~>jÞ>u  °óCRVFgB<I[FaHYL(< ¶E>A<fEC 8 JcQ@EE<E>T 
ww$qR	q qCs0>¿AÕ ±npoRC
ùv|0n|3{#%ZI`oR{þÞy>~>$ D   qCÖbÖ0×R0voC|FyY~>j}~>k«|0MyYm>oý&oRRêy3	Ry>~>CmnnpoC~b¥|3RjlyY~>CX F*d ¶UVIE@Q
¶ : $	 ¶T <Hk-pI ¶T I[@DCDC<EYT C0s_» q0qC×
ÿUôBûgù

ù±oC~>	| D   |3kY|0~~|3|0~ Û }UZmEy>	>j¼|/z|3{}|	¾  qCÖCbØRNÕ~²yYw>j}r|3{(RyYyYwMoCn|3jlyY~²y3¥¦Y~>y3z{þñ
oRk0o¥y>mnpRoR$ñ$|0~oC^w>j¼nÜjC|F{j¼~ ³ oRjk>|3jlyY~Y(oRR0npoCwCù# A0`¤0ÕqCÕYCCù±y>oRj¼~>ku ³ |b~>RoR
$oRR~>y0{ly0k0
 #voC~boCnR	ù±y>oRj¼~>
k #vyY^wm>j}~>kµA>oCn ³ jRoR/
ù±{}mWu} Zi»mnpC D  ^   qCÖ0Öb× Ri»|3vw>{}|0~~>j}~>k nÜyYm>kYOw>{¼|b~~>j¼~>kOkYn|bwr|0~|3{l>jlCIaL(< lHY<f@Q
8 EL(FYQfQ<T FEHaF/ #0	2 Cq d0ÕbÕ
ù±{lY>o0    qCÖbÖ CRV k-QS@EE<ETPU EBFI-UVEHFIL(@<fEL(<fEwB#E@DC<HB0¶ DC@<E>R0 ± Er/>oRjlC #vyY^wm>oCn
A>RjoC~>R$
o EoCw|0nÜoC~bC #|0n~>oRk0jlo D oR{l{lyYi
~ ~>j ³ oCnpjlp0[ # D Û¨ñ # AbñòÖ C*ñqRY×
ù±{lY>o0  } Z Û oR{ly0y D  D   qCÖbÖ0× R(uÐ~|3{ly0kbjC|F{ênpoCw>{}|/ryYn±o  RjloC~0RyY~>jljlyY~|3{w>{¼|b~~>j¼~>k¿ ~
klIp¶ HFaFB<ET>¶ : LX F^LXZ@L(<ð¶ E@Qv¥¶ E : FYI[FEHF¶ EZIL(< lH<@Q 8 EL(FYQfQ<T FEHaFPf"\ 8 00ww
Ø0Ø CYdØb×00uuuÐg¿ ¥npoR/
ù±yY~>oRC0ù} ^ yYoCnÜj¼~>R/0 `^}] Z\`oýê~>oCnR0¤  qCÖ0Öb× R0u!npyYm>¥|b~>©|Fµ|FRjlyY~oR{loRRjlyY~r¹oR@|0~>jl
ÞyYnw>{}|0~~>j}~>k	¿ 3
~ klIp¶ HFFaB<ET>¶ : LX FCGLXM@L(<ð¶ E@Q¥¶ E : FYIFYEHF®¶ EMIaL(< lHY<f@Q 8 EL(FQQS<T FYEHF
f"\ 8 0Yww	×MqR# d×q/Ö0uu®u¿ ¥npoRC
ùvnpY|0~bC$°  qCÖ C02Ø R¬
 `n|bwbñò|3oR-|3{lk0y>npjlyYnMyYy0{loC|0~g£m~>RjlyY~-^|0~>j}wm>{¼|FjlyY~ 8
I@E>G@HL(<ð¶ E>¶ E¥¶ D*JcUVL(FI>@v b	Ø0×0Y× Ø0Öq0
ÁCÁCÁ


	 ÇÅvÆÅ	Ç  
Ë êË 

ùvmnpR  }#v{}|0n¦3o0>°}Z
jlyY~npoR{}|3jy>~>C	¿£~
èyYnÜbñòyb{{}|0~>$

^

ÆÆ}Æ

y>~>k	Er  Cq ÖbÖq%RA>y0{ljly>oR{@>oRR¦0j}~>kzjlOw|0npjljlyY~>oRWn|0~>jþñ

8 EL(FIE@L(<ð¶E@Q±¶E : FI[FEHaFv¶E}FI"	v@IT F- Ha@QSF 8 E L(FT I[@L(<ð¶E	/ww3YÖYdsCM

#vj}r|3j$u}N`¾j¼m~>R>jlk0{lj}|°}N`¾j}m~>@>jlk0{lj}|±i}7Z

n| ³ oCnpy	7   qCÖbÖ0×R${}|0~~>j}~>k ³ j}|y>oR{
@>oRR¦0j}~>k	t(u[oRRjljlyY~rwnpy>RoR	mnpo±Þy>nN$O<Y¿ ~Mk-Ip¶HFaFB<ET>¶ : LX FlLX  UVIp¶JF@Ex±¶E : FI[FEHaF
¶ EMk-Q@EE<fETZ  k  0 ^ oRRmnpo èy0oRj}~unpjþ­	Rj}|3{¿£~boR{l{jlk0oC~>Ro0wwqC0ÕY»q8Y%Awnpj}~>k0oCnòñ
Û oCnp{}|3k	

#vj}r|3ju«µÛy

 ÕBù E
Eñò|FoR[k0oC~>oCn|3jy>~:y3
³ oCnpj D }B Zên| ³ oCnÜy	s   qCÖ0Ö C02| ROuÐm>y>r|3jl
m~>j ³ oCnp|3{®w>{}|0~>Wj}~~>yY~bñ£oRoCnj}~>jljl:y>r|3j}~>Cø¿£~¡klIp¶HFFaB<ET> ¶ : LX F¢£#LX1@L(< ¶E@Q
¥¶ E : FI[FYEHF¶ExIaL(< lHY<f@Q 8 EL(FQQ<¤TVFEHaFM\" 8 ¥F>wwC0×0s_0CCq0bu®uu¿[±npoRC

#vj}r|3jvu«}Ûy

 A>npyY~>k[w>{}|0~~>j}~>kcj}~!~>yY~bñ£oRoCnj}~>jljl
³ oCnpj D } Zxn| ³ oCnpy	[   qCÖ02Ö C0 RI
yYr|3j}~> ³ }j |Wy>oR{¥R>oR@¦bj}~>k	 ¿ ~klIp¶HFFaB<ET>¶ : LX FMLX 8 EL(FIE@L(< ¶E@Q¥¶E : FI[FYEHF«¶E
IaL(< lHY<f@Q 8 EL(FQQ<¤TVFEHaF"k-QS@EE<ETC Y>`L(FYDef 8 k   #0Yww	0_Ø YY>uu®uB¿ ±npoRC

#v{}|0n¦Fo0	°}`¤nmoCnpk	Õ}UZ

oR{loR$Er 

q/Ö0Ö0ÖR§¦¡¶YBFQ§X FaH8·_<ET>

D

¿£\±npoRC

#v{}|0n¦Fo0¥° D

}¥°±oCnpyY~±°u«B Z A>jl{}|vuÖ   qC2Ö C0Ø R<um>yYr|Fjl ³ oCnÜj­	C|FjlyY~[y3­»~>joñ
|3o¤RyY~>CmnnpoC~bYoCm>j}~>k<oCrwy>n|3{{ybk0jl wMoRRjþ­	C|3jlyY~>CxC¦¨I@E>G@HL(<ð¶E>¶E
klIp¶ TVI@DDC<ETw	©@ET UV@GTVFG>@EB3 >GL(FDP>R    R30# dbØ0
}7Z|3o0u  /q Ö0Öq%R 
Õ ñòw>{¼|b~t>oyYwMoC~:w>{}|0~~>j}~>k-|0npR>jloRRmnpo0MtIaL(< lHY<f@Q
FEHaF/c £#«b	Y_Ö 0C0Ø

#mnnÜjo0 Y

T

8 EL(FQQS<;ª

EoC|0~} Y

|3oR{}>{lj}~>k	 ^  ê Y j}nr|0~  } Z èjl@>yb{yY~u  q/Ö0Ö0sRa{}|0~~>j}~>km~>oCn²j}o
RyY~>n|Fj¼~bvj}~WyYR|3jlyY^|3j}~>CltIaL(< lHY<f@Q 8 EL(FQQ<¤TVFEHFCvY¬3	0sY×3	

Ej D

|0~>ÍRy D }`¾j}m~>@>jlk0{lj}|°}ZmW~>y	A  qCÖ0ÖC8(ó{¼|b~~>j¼~>k ³ j}|y>oR{»R>oRR¦0j}~>kj}~OoRoCn ñ
j}~>jjl®yY^|3j}~>Cts¥npoR{lj}j}~|0npWnpoCwy>npC¿£~3k-Iò¶YHaFFB<fET>v¶ : LX FPLX 8 EL(FIE@L(<ð¶E@Q¥¶E : FIª
FEHF¶ EiIL(< lH<@Q 8 EL(FQQ<¤TVFEHaF#­-¦&FLXYY¶ B0¶ Ql¶ TVW- >GL(FDP>$@EBM-JJcQ<fH@L(<ð¶E>Z 8 ¦i   #0
ww	0q 00Ö Awnpj}~>k0oCn ñ Û oCnp{}|3k	
  Cq ÖC0Ö8ÜA>jlm|FoRcRyY~bnpyb{®nm>{loRC!¿£~=klIp¶HFFaB<ET>r¶ : LX F¢  >GL 8 EL(FIE@L(<ð¶E@Q
¥¶E : FI[FYEHF«¶ E¢k-Ia<EHY<KJcQF^>«¶ :C® E	¶glQFBGT Fw¯lF°JcI[FG>GFEL(@L(< ¶E¢@EB±¯lF@#>R¶E<ET² ® ¯   0$ww
qCÕ0Y»qbqC D yYnÜkY|0~ Y |0mb©^|0~~

Enmr¹yY~>$ D

Enmr¹yY~>$ D

  ZöùvnpoRj}~|    qCÖ0Ö0Õ8 u~0>j}o:d~b>oRjl-wnpyb¸òoRRjy>~t D |3Yj}jlÍRj}~>k!>o
wnpyY|0>jl{ljlò[yFk0yY|3{v|3jÜ©|3Rjy>~c¿£~=klIp¶YHaFFaB<fET>r¶ : LXVF³LX!¥¶E : FI[FYEHFW¶E1IaL(< lHY<f@Q
8 EL(FYQfQ<T FEHaF/0ww$qC C_»qR0	bu®uu[¿ ±npoRC

°ÍRjy>~>jÞ Õ}|0~¦0/ A}¥ühoR{$¯Er}En|0wMoCnRgEr} ^ oRè¤} Zõü!jl{l{lj¼|byY~ D   qCÖbÖ0R[u~
|0wwnpyY|3R¹ÞyYnw>{¼|b~~>j¼~>kWzjWj}~>RyYrw>{loRo¤j¼~byYn^|3jlyY~¥¿ ~&klIp¶YHaFFaB<fET>®¶ : LXVFM´  IB 8 EL(FIª
E@L(<ð¶ E@Q
±¶ E : FI[FEHaF¤¶ EdklI<fEH<bJcQFG>¶ :® E	¶ glQFBGT FP¯-F[JcI[FG>GFEL(@L(<ð¶ Ei@EBM¯-Fa@¥>@¶E<fETY
ij}¦3oRC°}BZ èj{lyY~
è    qCÖ0×qR A¿gAtvux~>oRzõ|0wwnpyY|3R[y->o<|0ww>{ljlC|3jlyY~!y3
>oRyYnpoCwnÜy ³ j}~>kryrwnpyY>{loCy0{ ³ j¼~>klIL(< lH<@Q 8 EL(FQQS<T FYEHFC«0(q%C0ÖYdbÕC
ÁCÁCÃ

Ä0Å0Æ	ÇÅ0ÆQÈÊÉÅ0Ë3Ì	ÇÌ
`|FC	° 

qCÖbÖ0 R¿ ~0oRk>n|3j}~>kWw>{¼|b~~>j¼~>k<|0~>:npoC|3Rj}~>kOj}~:| >oRoCnpy0k0oC~>oRyYm>|3~>RnpyY~>yYm>|0nÜ@>jþñ
oRRmnpo¾ÞyYnRyY~bnpy0{l{lj}~>k¡npoC|F{ñ£zvyYnÜ{:y>>j{lo nÜyYy0C¿£~}klIp¶HFFaB<ET>Ð¶ : LXVFµ#LXi@L(< ¶E@Q
¥¶ E : FI[FYEHF¶ ExIaL(< lHY<f@Q 8 EL(FQQ<¤TVFEHaFM\" 8 ¥«F>ww C0Õ0_Ö 0CqCsbu®uu¿[±npoRC
`oR{þyY~>$ D }(
 Z ^ jþÞ@>jlÍ0 Û   qCÖbÖ0 RÛoCwnpoRoC~bj}~>kg|FRjlyY~:|0~>:R|0~>k0orb<{ybk0jlºwnpybkYn|0/
X FPd¶ U IE@Q(¶ : 	$¶ T <Hk-Ip¶ T I[@DCDC<ETY R	0ÕMq d00M
`oRy>npk0oý¥ D d
 } Z ^ |0~>¦b0	u ^   qCÖ C0× 8¥voC|3Rj ³ onpoC|3y>~>j¼~>kW|0~><w>{¼|b~~>j¼~>kÐ¿ &
~ k-IòY¶ HaFFB<fET>
¶ : LX F1¬#LX¶·@L(<ð¶ E@Q$±¶ E : FI[FEHaF<¶ E¶IaL(< lHY<f@Q 8 EL(FQQ<¤TVFEHF²"\ 8 0wwØ0×bY× dØ C0M
D y>npkY|0~ Y |0mb£r|0~~
`j}~>MoCnpk	 D  ^   qCÖ C02
Ö Rc ~>j ³ oCnp|F{&w>{}|0~~>j}~>k	t±u~  |F{¼¹y0@ ±m~>j ³ oCnp|3{$|3OjloC|  8 ¦³@^T @#¸G<fEFC
#   R>YYÕ Yb	
`j}m~>R>jlk0{lj¼|M»°} Y |0np|
 `r è} Z ^ jþÞ@>jlÍ0 ¹«  qCÖ0Öb× R$voCwnpoRoC~0j}~>k |FRjlyY~t¥¿£~>oRoCnj}~|3R
|0~>n|0jþ­	C|3jy>~>C IL(< -H<@Q 8 EL(FQQ<¤TVFEHFC £3YÕ0_Ö YY C
`j}m~>R>jlk0{lj¼|M¥°}7
 Z ^ jþÞR>jlÍ0 Û   qCÖ02Ö CR¤uÐ~:|FRjlyY~<{}|0~>kYm|3kbo |3oR:y>~<C|0m>|3{oRw>{}|0~|3jlyY~t
¥npoR{lj}j}~|0np<npoCwyYnÜC®¿ ¢
~ k-Ip¶ HFaFB<ET>¶ : LX Fµ£#LXi@L(<ð¶ E@Q¥¶ E : FYI[FEHF¶ EiIL(< -H<@Q 8 Eª
L(FQQS<T FYEHFMf"" 8 #0ww	Ø00_ dØ00Õbu®uu[¿ ±npoRC
|3jlkY Y  ºó} Z Û oR{ly0y D  D   q/Ö0Ö CRd {}|0~~>j}~>k	MoRYoRCm>jlyY~`|0~>O{oC|bn~>j}~>krj}~W|«nÜyYy0j|3k0oC~bC
¿£d
~ klIpY¶ HaFFaB<fET>¶ : LX FLX 8 EL(FIE@L(< ¶ E@Qv±¶ E : FI[FEHaF¶ EZIL(< -H<@Q 8 EL(FYQfQ<T FYEHFAk-QS@EE<ET
 cY>`L(FYDP>» 8 k   #0Yww(qC0YÕ »q/0×0uuuÐ¿ ¥nÜoRC
|3{}mWd ê( Z `oýê~>oCnR  0Õ0Õ0Õ 8¥u	jlj}>{lo >oCmnpjljlR¾ÞyYnÛyYw>j}r|3{w>{}|0~~>j}~>k	¿£&
~ k-Ip¶ HFaFB#ª
<fET> ¶ : LXVF³£#LX 8 EL(FYIaE@L(<ð¶ E@Q*¥¶ E : FYIFYEHFW¶ E²tIaL(< lHY<f@Q 8 EL(FYQfQ<T FYEHFMk-QS@EE<ET& Y>`L(FYD
f 8 k   F>ww$qRY_Õ »qRYÖbu®uu[¿ ±npoRC
 oC~>oC~> D   qCÖbÖ0Ö R] Õg
ù E
Eñò|3oRrm~>j ³ oCnp|3{w>{}|0~~>j}~>kj}~m>{jñò|Fk0oC~0/0~>yY~bñ£oRoCnj}~>jljly3ñ
r|3j}~>C D |3oCnRÿ >oRjlC$oRR~>jlC|3c{ ~>j ³ oCnpjlpy3( EoC~^|0n¦] EoCw|0npoC~by3uÐm>y>r|3jlyY~
¿\
u Ö0Ö3i¥Õ0M
 oC~>oC~ D } Û oR{ly0y	 D } Z!ùnÜY|0~bC00°  0ÕbÕ0Õ R>u>n|3Rjy>~oR@~>j !m>oRyYN
n Õgù E
Eñò|3oR
w>{¼|b~~>j¼~>k¥iyYnp>RyY¹j¼~>k
Y |0|0~>ÍC|M3i}*ùv|0noC|0m D }] ZIA>pñ EoC~>jlC0  qCÖbÖ0× R ó{¼|b~~>j¼~>k¤RyY~bnpy0{Ynm>{oRyYnnpoC|3Rj ³ ov|3k0oC~bC
IaL(< lHY<f@Q 8 EL(FQQ<¤TVFEHaF/ £3	Ø0_× »q0qC
Y |0m>Í0¤} Z A>oR{}r|0~¤ù®  qCÖ0ÖbØ R ±m>>j}~>kc>o:oC~ ³ oR{lyYwMo0t ó{¼|b~~>j¼~>kwnpyYwMy0jljlyY~|3{¤{ybk0jl
|0~>:y>R|3jlOoC|0npRW¿£¼
~ klIp¶ HFaFB<ET>«¶ : LXVF³#´LX}·@L(<ð¶ E@QA¥¶ E : FI[FEHaFr¶ E¢IaL(< lHY<f@Q
Û
8 EL(FYQfQ<T FEHaFC\" 8 ¬aF y0{	ww$q0qCÖ3¥ »qC0Õqb3u®uuÐ¿ ±npoRC
Y |0m>Í00¤}] Z A>oR{}r|0~>ù  q/Ö0Ö0Ö R ~>jþÞ>j}~>k A>u¥±ñò|FoRr|0~>kYn|0wbñò|3oRrw>{}|0~~>j}~>k		¿ M
~ k-Ip¶ HFaFB#ª
<fET>®¶ : LXVF»¬#LX 8 EL(FYIaE@L(<ð¶ E@Qd¶ <fELA¥¶ E : FYI[FEHF¶ E3IaL(< lHY<f@Q 8 EL(FQQ<¤TVFEHaFC 8 c
 8 ª0
Û y0{$q0	ww	M%q CYd0bs D yYnpk>|0~ Y |bmb©r|b~~
Y y>oC>{oCn8  }
 èoCMoR{Þù®Yy3ýêr|0~~  } ZIEj}yYwy>m>{ybC ¹  qCÖbÖ0× R	°óYoC~>j¼~>krw>{}|0~~>j}~>krkYn|0w>
y|0~÷
u E ^ m>oR/x¿ ½
~ k-IòY¶ HaFFB<fET><¶ : LX F¢LX  UVIò`¶ JF@E¾¥¶ E : FYIFYEHF:¶ E¿k-QS@EE<ET
  k  0Yww	b×0Y d Cbs Awnpj}~>k0oCnòñ Û oCnp{}|3k	
ÁCÁ"


	 ÇÅvÆÅ	Ç  
Ë êË 

y>oC~>jk A[Z A>j}ryY~>/Ð¾[`^  q/Ö0Ö0sR¢voC|3{þñ£j}o:oC|0npR[j}~ø~>yY~bñ£oRoCnj}~>jjl-yY^|3j}~>C
¿£~¶klIp¶YHaFFaB<fET> ¶ : LX F¢GLX 8 EL(FIE@L(< ¶E@Q¶<ELw¥¶E : FI[FYEHF ¶E1IL(< lH<@Q 8 EL(FQQS<T FYEHF
 8 
 8 ª°£F>ww$qCØ0ØbÕY»qCØ0Øb× D yYnpkY|0~ Y |0mb£r|0~~

Y

o ³ Co n8  } 7Zvjl@|0nÜCù®  qCÖ0Ö38Ckl@I[Hw>{¼|b~t|w>{}|0~~>j}~>k:|0npR>jloRRmnporzj:w|0n|3{l{loR{|FRjlyY~>
|0~>-Ry>~>n|3j}~bC¿ ~1	vFHL(UVI[FM¶L(FG>x<E¢IaL(< lHY<f@Q 8 EL(FYQfQ<T FEHaF/$wwqCYdb0¿A D ¿AÿÖF	
Awnpj}~>k0oCn ñ Û oCnp{}|3k	
^

j}~>>ñ¨èjoR{loC~(    qCÖbÖ0ÖRQùmE
Ehñuõù¥j}~|0nÜEoRRjjy>~ Ej}|3k>n|0 |3R¦C|3k0o0[(oR@vnpoCw¥¿ ±ñ
t	q/Ö0Ö0Ö/ñòÕ02C0¿£~>jm>o®yFµ¿£~byYnr|FjlyY~r(oR@~>y0{ly0kb0	$oRR~>jlC|3{v®~>j ³ oCnÜjlòOy37EoC~r|0n¦	
ÀÁVÁÂAÃÄ ÄVÅ ÆÇÈÁ-ÇÉÁÊzÇ[ÉËÄYÌ ÊÉÉÍ 
^

^

j}~>kY|0nÜ$u«}Zåvjl@|bnpC°ù  Cq Ö0Ö2CR7{}|0~~>j}~>kWw|0n|3{l{loR{|3RjlyY~>CIL(< -H<@Q
3	0ØMq d03

8 EL(FYQfQ<T FYEHFC

qCÖ0Ö0Ö8Ð>oqCÖ0ÖC^u¿®w>{}|0~~>j}~>k<>oCRyYrwMoRjljlyY~MIL(< -H<@Q
mjloR 8

8 EL(FQQS<T FYEHF

yY~>kEr}Z 	i y3 D   qCÖbÖCRdEyY^|3j}~Oj¼~>oCwMoC~>oC~0w>{}|0~~>oCnRyYrw>jl{}|3jlyY~±¿£~i 8 k   #¢ÎW¶I·ª
>aXY`¶ J©­ ® E¶g-QSFBGTVF  ETV<fEFaFYIa<ET@EB¢"HÏUV<?>G<fL(<ð¶E : ¶Idk-QS@EE<ET­&ÐAI<fB^T <ET!X F¶I²@EB
klI[@HL(<HFC>u®uu¿¥oR@~>jlC|3{êÛoCwyYnpü\AbñòÖC/ñòÕ0M
^

D " EoCny0CEr 

¦³@GTV@#¸`<EF/

D

ÆÆ}Æ



 D j {l{}|0~ Y  ^   Cq Ö0Ö08 #D»Ñ¶Q<H¦¡¶YBFQ§X FHR·_<ET> Y }{ mbzoCnuC|3oCjl ± m>{Þ

qCÖ0ÖbR # BÕ
tRu[yYm~>$/RyYrw>{loRo00w|bnpj}|3{3yYnpoCn$w>{}|0~~>oCn(yYn
±klI YHaFFaB<fET> : LX F´  I[B 8 EL(FIE@L(<ð¶E@Q¥¶E : FYIFYEHF®¶E3klI<fEH<bJcQFG>¶ :A® E¶g-QSFBGTVF
¯lF[JIF^>`FYEL(@L(<ð¶Ed@EBw¯lF@#>R¶E<ET>YwwqCÕ0Y»qbqR	 D yYnpkY|b~ Y |0mb©^|0~~
oRy0C D }dZ A¹j7Er  qCÖ0Ö02R
#vyY~>jljlyY~|3{¥~>yY~>{lj}~>oC|0n¤w>{¼|b~~>j¼~>kr¿£~k-òI ¶YHaFFB<fET
> ¶ : LX Fx  >GL
8 EL(FYIaE@L(< ¶E@Q± ¶E : FI[FEHaF ¶EdIaL(< lHY<f@Q 8 EL(FQQ<¤TVFEHFk-Q@EE<fETZ Y>`L(FYD$>xf 8 k   #«0 	ww
q%C0ÖY» q/Ö0× D yYnÜkY|0~ Y |0mb©^|0~~
|0~/¸|0~$ Y 	uÍRjlÍ0$u}»ùvn|/>yY~ Y }7{loRjloCnRù}(Z+ój>{loR0N#  qCÖbÖ0sR°Ò 
 RjloC~0ùgE
E
|3{lk0yYnpjl^yYnOiBA D ~0>oRjl¡|0~> ³ oCnpjþ­	C|3jy>~ ¿£~ 8Ó C¦7klpI ¶HFFaB<ETº
> ¶ : LXVF
8 EL(FYIaE@L(< ¶E@Q-WÎ ¶I ·>YX ¶-J ¶Ed$	 ¶TV<fHt c#ELXVFG>G<?R> 
A>R>yYwwoCnp/ D     q/ÖC0×R®
 ~>j ³ oCnp|3{»w>{}|0~>±yYn¥npoC|FRj ³ o®npyYMy0j}~Wm~wnpoRjlR|0>{looC~ ³ j}npy>~oC~0C
¿£~¶klpI ¶YHaFFaB<fET 
> ¶ : LX F¢#LX 8 EL(FIE@L(< ¶E@Q ¶<ELw¥ ¶E : FI[FYEH F ¶E1IL(< lH<@Q 8 EL(FQQS<T FYEHF
 8 
 8 ªF >ww$qCÕ0bÖY» qCÕ3>Ø D yYnpkY|0~ Y |0mb£r|0~~
Aj}n~>y ³ 
¹ } Y yYoC~>jlk	7A} Û oR{ly0y	 D }UZ A>j}r¹yY~>C$  qCÖ0ÖbØRv°  RjloC~bk0yY|3{þñ£j}npoRRoR<oRw>{yFñ
n|3jlyY~¥¿ ~&k-òI ¶YHaFFB<fET>AWLXVFiX <IaL(FFELXM@L(< ¶E@Q¥ ¶E : FYIFYEH
F ¶ExIL(< -H<@Q 8 EL(FQQS<T FYEHF
f"\ 8 ¬0 Yww	bÖ0Yd 0Öb×0uu®u¿¥npoRC
oC~>oCnpb0  %A}%Z6ü:oR{l$]Er"A 
uE ^ ¿£~ p¶
¶

A>yY~>o0Uê0Z

Û oR{ly0y	 D  D   qCÖbÖCR$y3z|0npvRy0{l{}|0y>n|3j ³ o|0~>|3 ³ oCnp|0npj}|3{${loC|0n~>j}~>k	t±u¢C|3o
m>rj}~WnpyYMy0jlyYRRoCn8 8 EL(FIE@L(<ð¶E@Q¶U IE@Q»¶ :Ô UVDC@Eª¥¶D*JcUVL(FI" cL(UVB<FG>M 8  Ô  0

Am>y>~d¾A}Z¢ù|bnpy	bu«`r 

qCÖ0ÖC8v¯-F<E : ¶ I[HaFYDFYELQFa@IE<ET­-@Ed<fEL(Iò¶YBUVHL(<ð¶E	
ÁCÁ%?

D

¿£I±npoRC

Ä0Å0Æ	ÇÅ0ÆQÈÊÉÅ0Ë3Ì	ÇÌ
oR{ly0y	 D }#|0nMyY~>oR{l{Þ  }CoCÕ npoRÍ0bu«Yù±yYnn|F¸òy]Er}0ij}~¦d°}Zù±{l>>o0    qCÖ0Ö0s2R	¿£~boRkYn|3j}~>k
w>{¼|b~~>j¼~>k[|0~>[{loC|0n~>j}~>k	t`>oÞ¥Õ E¿`t¹ |bnp@>jloRRmnpo01¶UVIaE@Q¶ :3 ]JFI<DFYEL(@Q-@EB
X F¶ I[FL(<Ha@QIL(< lH<@Q 8 EL(FQQS<T FYEHFCv  q%RUCq»qCbÕ
Û oR{ly0y	 D  D   q/Ö0Ö3
 R§ klQ@EE<ETZ@EB3QSF@IE<ETxÑGM@E@Ql¶ TV<fH@QI[Fa@#>R¶ E<fETYN AwnÜj¼~>kboCn ñ Û oCnp{}|3k	
Û oR{ly0y	 D  D }
 yb{{}|3R¦ D °}

 Z #Ûy* D   qCÖ0Ö C8 |3jlyY~|F{oñò|FoRÊ¹yY~>jlyYnpj}~>k[yYn
w>{¼|b~~>j¼~>k¤j}~d~|bjloC~ ³ j¼nÜyY~oC~bC	¿ M
~ k-Ip¶ HFaFB<ET>¥¶ : LXVFALX 8 EL(FIE@L(<ð¶ E@Q±¶ E : FI[FEHaF
¶ ExIaL(< lHY<f@Q 8 EL(FQQ<¤TVFEHaF"k-QS@EE<ETC Y>`L(FYD$>M 8 k   #0ww$qC×q qC×0Öbu®uuÐg¿ ¥npoRC
ü:oR{l$ Er  qCÖ0Ö02Ö R»ÛoRRoC~0®|F ³ |0~>RoRj}~Ou¿w>{}|0~~>j}~>k	 IL(< -H<@Q 8 EL(FQQ<¤TVFEHaF*¦³@GTV@#¸G<fEFCYÖbY »qC0M
ü!jl{¼¦bj}~>C Er3° D 0oCnp/ Y  ^  ^ y3z®n|0~>Ro0   Er}n Zü:oR{oR0 ^ ] ê  qCÖbÖ3 R ó{¼|b~~>j¼~>k|b~>¹nÜoC|3Rj}~>k
j¼~m~>RoCnp|3j}~!|0~>d~|0¹j`oC~ ³ j}npyY~oC~bC¿
 ¶ UVIaE@Q¶ :d ]JFI<DFYEL(@Q*@EBÖX F¶ I[FL(<Ha@Q
IaL(< lHY<f@Q 8 EL(FQQ<¤TVFEHaF/ ¬3$qCÖ0_× d00×
Û

ÁCÁ%Æ

Journal of Articial Intelligence Research 13 (2000) 305-338

Submitted 6/00; published 12/00

Conformant Planning via Symbolic Model Checking
cimatti@irst.itc.it

Alessandro Cimatti

ITC-irst

, Via Sommarive 18, 38055 Povo, Trento, Italy

roveri@irst.itc.it

Marco Roveri

ITC-irst

, Via Sommarive 18, 38055 Povo, Trento, Italy

DSI, University of Milano, Via Comelico 39, 20135 Milano, Italy

Abstract

We tackle the problem of planning in nondeterministic domains, by presenting a new
approach to conformant planning. Conformant planning is the problem of nding a sequence of actions that is guaranteed to achieve the goal despite the nondeterminism of the
domain. Our approach is based on the representation of the planning domain as a nite
state automaton. We use Symbolic Model Checking techniques, in particular Binary Decision Diagrams, to compactly represent and eÆciently search the automaton. In this paper
we make the following contributions. First, we present a general planning algorithm for
conformant planning, which applies to fully nondeterministic domains, with uncertainty in
the initial condition and in action eects. The algorithm is based on a breadth-rst, backward search, and returns conformant plans of minimal length, if a solution to the planning
problem exists, otherwise it terminates concluding that the problem admits no conformant
solution. Second, we provide a symbolic representation of the search space based on Binary
Decision Diagrams (Bdds), which is the basis for search techniques derived from symbolic
model checking. The symbolic representation makes it possible to analyze potentially large
sets of states and transitions in a single computation step, thus providing for an eÆcient
implementation. Third, we present Cmbp (Conformant Model Based Planner), an eÆcient
implementation of the data structures and algorithm described above, directly based on
Bdd manipulations, which allows for a compact representation of the search layers and an
eÆcient implementation of the search steps. Finally, we present an experimental comparison of our approach with the state-of-the-art conformant planners Cgp, Qbfplan and
Gpt. Our analysis includes all the planning problems from the distribution packages of
these systems, plus other problems dened to stress a number of specic factors. Our approach appears to be the most eective: Cmbp is strictly more expressive than Qbfplan
and Cgp and, in all the problems where a comparison is possible, Cmbp outperforms its
competitors, sometimes by orders of magnitude.
1. Introduction

In recent years, there has been a growing interest in planning in nondeterministic domains.
Rejecting some fundamental (and often unrealistic) assumptions of classical planning, domains are considered where actions can have uncertain eects, exogenous events are possible,
and the initial state can be only partly specied. The challenge is to nd a strong plan,
that is guaranteed to achieve the goal despite the nondeterminism of the domain, regardless
of the uncertainty on the initial condition and on the eect of actions. Conditional planning (Cassandra, Kaelbling, & Littman, 1994; Weld, Anderson, & Smith, 1998; Cimatti,
Roveri, & Traverso, 1998b) tackles this problem by searching for a conditional course of
c 2000 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Cimatti & Roveri
actions, that depends on information that can be gathered at run-time. In certain domains,
however, run-time information gathering may be too expensive or simply impossible. Conformant planning (Goldman & Boddy, 1996) is the problem of nding an unconditioned
course of actions, i.e. a classical plan, that does not depend on run-time information gathering to guarantee the achievement of the goal. Conformant planning has been recognized
as a signicant problem in Articial Intelligence since the work by Michie (1974): the Blind
Robot problem requires to program the activity for a sensorless agent, which can be positioned in any location of a given room, so that it will be guaranteed to achieve a given
goal. Conformant planning can be also seen as a problem of control for a system with
an unobservable and unknown state, such as a microprocessor at power-up, or a software
system under black-box testing.
Because of uncertainty, a plan is associated to potentially many dierent executions,
which must be all taken into account in order to guarantee goal achievement. This makes
conformant planning signicantly harder than classical planning (Rintanen, 1999a; De Giacomo & Vardi, 1999). Despite this increased complexity, several approaches to conformant
planning have been recently proposed, based on (extensions of) the main planning techniques for classical planning. The most interesting are Cgp (Smith & Weld, 1998) based
on Graphplan, Qbfplan (Rintanen, 1999a) which extends the SAT-plan approach to
QBF, and Gpt (Bonet & Gener, 2000) which encodes conformant planning as heuristic
search. In this paper, we propose a new approach to conformant planning, based on Symbolic Model Checking (McMillan, 1993). Symbolic Model Checking is a formal verication
technique, which allows one to analyze nite state automata of high complexity, relying on
symbolic techniques, Binary Decision Diagrams (Bdds) (Bryant, 1986) in particular, for
the compact representation and eÆcient search of the automaton. Our approach builds on
the planning via model checking paradigm presented by Cimatti and his colleagues (1997,
1998b, 1998a), where nite state automata are used to represent complex, nondeterministic
planning domains, and planning is based on (extensions of) the basic model checking steps.
We make the following contributions.

 First, we present a general algorithm for conformant planning, which applies to any

nondeterministic domain with uncertain action eects and initial condition, expressed
as a nondeterministic nite-state automaton. The algorithm performs a breadth-rst
search, exploring plans of increasing length, until a plan is found or no more candidate
plans are available. The algorithm is complete, i.e. it returns with failure if and only
if the problem admits no conformant solution. If the problem admits a solution, the
algorithm returns a conformant plan of minimal length.

 Second, we provide a symbolic representation of the search space based on Binary

Decision Diagrams, which allows for the application of search techniques derived from
symbolic model checking. The symbolic representation makes it possible to analyze
sets of transitions in a single computation step. These sets can be compactly represented and eÆciently manipulated despite their potentially large cardinality. This
way it is possible to overcome the enumerative nature of the other approaches to
conformant planning, for which the degree of nondeterminism tends to be a limiting
factor.
306

Conformant Planning via Symbolic Model Checking

 Third, we developed Cmbp (Conformant Model Based Planner), which is an eÆcient

implementation of the data structures and algorithm described above. Cmbp is developed on top of Mbp, the planner based on symbolic model checking techniques
developed by Cimatti, Roveri and Traveso (1998b, 1998a). Cmbp implements several
new techniques, directly based on Bdd manipulations, to compact the search layers
and optimize termination checking.
 Finally, we provide an experimental evaluation of the state-of-the-art conformant planners, comparing Cmbp with Cgp, Qbfplan and Gpt. Because of the dierence in
expressivity, not all the problems which can be tackled by Cmbp can also be represented in the other planners. However, for the problems where a direct comparison
was possible, Cmbp outperforms its competitors. In particular, it features a better
qualitative behavior, not directly related to the number of initial states and uncertain
action eects, and more stable with respect to the use of heuristics.
The paper is structured as follows. In Section 2 we review the representation of (nondeterministic) planning domains as nite state automata. In Section 3 we provide the
intuitions and a formal denition of conformant planning in this setting. In Section 4 we
present the planning algorithm, and in Section 5 we discuss the symbolic representation
of the search space, which allows for an eÆcient implementation. In Section 6 we present
the Cmbp planner, and in Section 7 we present the experimental results. In Section 8 we
discuss some further related work. In Section 9 we draw the conclusions and discuss future
research directions.
2. Planning Domains as Finite State Automata

We are interested in complex, nondeterministic planning domains, where actions can have
preconditions, conditional eects, and uncertain eects, and the initial state can be only
partly specied. In the rest of this paper, we use a very simple though paradigmatic domain
for explanatory purposes, a variation of Moore's bomb in the toilet domain (McDermott,
1987) (from now on called BTUC | BT with Uncertain Clogging). There are two packages,
and one of them contains an armed bomb. It is possible to dunk either package in the
toilet (actions Dunk1 and Dunk2 ), provided that the toilet is not clogged. Dunking either
package has the uncertain eect of clogging the toilet. Furthermore, dunking the package
containing the bomb has the eect of disarming the bomb. The action F lush has the eect
of unclogging the toilet.
We represent such domains as nite state automata. Figure 1 depicts the automaton for
the BTUC domain. Each state is given a number, and contains all the propositions holding
in that state. For instance, state 1 represents the state where the bomb is in package 1, is
not defused, and the toilet is not clogged. Given that there is only one bomb, we write In2
as an abbreviation for the negation of In1 . Arrows between states depict the transitions of
the automaton, representing the possible behavior of actions. The transition from state 2
to state 1 labeled by F lush represents the fact that the action F lush, if executed in state
2, only has the eect of removing the clogging. The execution of Dunk1 in state 1, which
has the uncertain eect of clogging the toilet, is represented by the multiple transitions to
states 5 and 6. Since there is no transition outgoing from state 2 and labelled by Dunk1 ,
307

Cimatti & Roveri
Flush
Flush

Dunk_1
In_1 5
Defused
!Clogged

In_1 1
!Defused
!Clogged

Dunk_1,
Dunk_2

Dunk_2
Flush

Flush
In_1 2
!Defused
Clogged

In_1 6
Defused
Clogged

Flush
Flush

Dunk_2
In_2 7
Defused
!Clogged

3

In_2
!Defused
!Clogged

Dunk_1,
Dunk_2

Dunk_1
Flush

Flush
In_2 8
Defused
Clogged

In_2 4
!Defused
Clogged

Figure 1: The automaton for the BTUC domain
state 2 does not satisfy the preconditions of action Dunk1 , i.e. Dunk1 is not applicable in
state 2.
We formally dene nondeterministic planning domains as follows.
Denition 1 (Planning Domain) A Planning Domain is a 4-tuple D = (P ; S ; A; R),

where P is the (nite) set of atomic propositions, S  2P is the set of states,
(nite) set of actions, and R  S  A  S is the transition relation.

A is the

Intuitively, a proposition is in a state if and only if it holds in that state. In the following
we assume that a planning domain D is given. We use s, s0 and s00 to denote states of D,
and  to denote actions. R(s; ; s0 ) holds i when executing the action  in the state s the
state s0 is a possible outcome. We say that an action  is applicable in s i there is at least
one state s0 such that R(s; ; s0 ) holds. We say that an action  is deterministic in s i
there is a unique state s0 such that R(s; ; s0 ) holds. An action  has an uncertain outcome
in s if there are at least two distinct states s0 and s00 such that R(s; ; s0 ) and R(s; ; s00 )
hold. As described by Cimatti and his colleagues (1997), the automaton for a given domain
can be eÆciently built starting from a compact description given in an expressive high level
action language, for instance AR (Giunchiglia, Kartha, & Lifschitz, 1997).
3. Conformant Planning

Conformant planning (Goldman & Boddy, 1996) can be described as the problem of nding
a sequence of actions that is guaranteed to achieve the goal regardless of the nondeterminism
of the domain. That is, for all possible initial states, and for all uncertain action eects,
the execution of the plan results in a goal state.
Consider the following problem for the BTUC domain. Initially, the bomb is armed but
its position and the status of the toilet are uncertain, i.e. the initial state can be any of the
states in f1; 2; 3; 4g . The goal is to reach a state where the bomb is defused, and the toilet
308

Conformant Planning via Symbolic Model Checking

In_1 1
!Defused
!Clogged

In_1 2
!Defused
Clogged

In_2 3
!Defused
!Clogged

In_2 4
!Defused
Clogged

In_1 5
Defused
!Clogged

Flush

Flush

Flush

Flush

In_1 5
Defused
!Clogged

Flush

Flush
In_1 1
!Defused
!Clogged

Dunk_1

In_1 6
Defused
Clogged

In_1 5
Defused
!Clogged

Dunk_2

In_1 6
Defused
Clogged

In_2 3
!Defused
!Clogged

Dunk_2

In_2 7
Defused
!Clogged

Flush
In_2 3
!Defused
!Clogged

Dunk_1

In_2 3
!Defused
!Clogged

In_2 4
!Defused
Clogged

Flush

In_2 8
Defused
Clogged

Flush

Flush

Flush

In_1 5
Defused
!Clogged

In_2 7
Defused
!Clogged

Flush

Figure 2: A conformant solution for the BTUC problem
is not clogged, i.e. the set of goal states is f5; 7g. A conformant plan solving this problem
is
F lush; Dunk1 ; F lush ; Dunk2 ; F lush
(1)
Figure 2 outlines the possible executions of the plan, for all possible initial states and
uncertain action eects. The initial uncertainty lies in the fact that the domain might be
in any of the states in f1; 2; 3; 4g . The possible initial states of the planning domain are
collected into a set by a dashed line. We call such a set a belief state. Intuitively, a belief
state expresses a condition of uncertainty about the domain, by collecting together all the
states which are indistinguishable from the point of view of an agent reasoning about the
domain. The rst action, F lush, is used to remove the possible clogging. This reduces the
uncertainty to the belief state f1; 3g. Despite the remaining uncertainty (i.e. it is still not
known in which package the bomb is), action Dunk1 is now guaranteed to be applicable
because its precondition is met in both states. Dunk1 has the eect of defusing the bomb if
it is contained in package 1, and has the uncertain eect of clogging the toilet. The resulting
belief state is f3; 4; 5; 6g . The following action, F lush, removes the clogging, reducing the
uncertainty to the belief state f3; 5g, and guarantees the applicability of Dunk2 . After
Dunk2 , the bomb is guaranteed to be defused, but the toilet might be clogged again (states
6 and 8 in the belief state f5; 6; 7; 8g ). The nal F lush reduces the uncertainty to the belief
state f5; 7g, and guarantees the achievement of the goal.
In general, in order for a plan to be a conformant solution, no action must be executed
in states which do not satisfy the preconditions, and any state that can result from the
execution of the plan (for all the initial states and for all the uncertain action eects) is
a goal state. The main diÆculty in achieving these conditions is that no information is
(assumed to be) available at run-time. Therefore, at planning time we face the problem of
reasoning about action execution in a belief state, i.e. under a condition of uncertainty.
Denition 2 (Action Applicability) Let Bs  S be a Belief State. The action  is
applicable in Bs i Bs 6= ; and  is applicable in every state s 2 Bs.
309

Cimatti & Roveri
In order for an action to be applicable in a belief state, we require that its preconditions
must be guaranteed notwithstanding the uncertainty. In other words, we reject \reckless"
plans, which take the chance of applying an action without the guarantee of its applicability.
This choice is strongly motivated in practical domains, where possibly fatal consequences
can follow from the attempt to apply an action when its preconditions might not be satised
(e.g. starting to x an electrical device without being sure that it is not powered). The eect
of action execution from an uncertain condition is dened as follows.
Denition 3 (Action Image) Let Bs  S be a belief state, and let  be an action applicable in Bs. The image (also called execution) of  in Bs, written Image [](Bs), is dened

as follows.

Image [](Bs) =_

fs0 j there exists s 2 Bs such that R(s; ; s0 )g

Notice that the image of an action combines the uncertainty in the belief state with the uncertainty on the action eects. (Consider for instance that Image [Dunk1 ](f1; 3g)=f3; 4; 5; 6g .)
In the following, we write Image [](s) instead of Image [](fsg).
Plans are elements of A , i.e. nite sequences of actions. We use  for the 0-length
plan,  and  to denote generic plans, and ;  for plan concatenation. The notions of
applicability and image generalize to plans as follows.
Denition 4 (Plan Applicability and Image) Let  2 A , and let Bs  S .  is applicable in Bs i one of the following holds:
1.  =  and Bs 6= ;;
2.  = ; ,  is applicable in Bs, and  is applicable in Image [](Bs).
The image (also called execution) of  in Bs, written Image [](Bs), is dened as:
1. Image [](Bs) =_ Bs;
2. Image [;  ](Bs) =_ Image [](Image [](Bs));

A planning problem is formally characterized by the set of initial and goal states. The
following denition captures the intuitive meaning of conformant plan given above.
Denition 5 (Conformant Planning) Let D = (P ; S ; A; R) be a planning domain. A
Planning Problem for D is a triple (D; I ; G ), where ; 6= I  S and ; 6= G  S .
The plan  is a conformant plan for (that is, a conformant solution to) the planning
problem (D; I ; G ) i the following conditions hold:

(i)  is applicable in I ;
(ii) Image [](I )  G .
In the following, when clear from the context, we omit the domain from the planning
problem, and we simply write (I ; G ).
310

Conformant Planning via Symbolic Model Checking
4. The Conformant Planning Algorithm

Our conformant planning algorithm is based on the exploration of the space of plans, limiting
the exploration to plans which are conformant by construction. The algorithm builds Belief
state-Plan (BsP) pairs of the form hBs : i, where Bs is a non-empty belief state and 
is a plan. The idea is to use a BsP pair to associate each explored plan with the maximal
belief state where it is applicable, and from which it is guaranteed to result in goal states.
The exploration is based on the basic function SPreImage [](Bs), that, given a belief state
Bs and an action , returns the belief state containing all the states where  is applicable,
and whose image under  is contained in Bs.
Denition 6 (Strong Pre-Image) Let ; 6= Bs  S be a belief state and let  be an
action. The strong pre-image of Bs under , written SPreImage [](Bs), is dened as
follows.

SPreImage [](Bs) =_ fs j  is applicable in s; and Image [](s)

 Bsg

If SPreImage [](Bs) is not empty, then  is applicable in it, and it is a conformant solution to the problem (SPreImage [](Bs); Bs). Therefore, if the plan  is a conformant
solution for the problem (Bs; G ), then the plan ;  is a conformant solution to the problem
(SPreImage [](Bs); G ).
Figure 3 depicts the space of BsP pairs built by the algorithm while solving the BTUC
problem. The levels are built from the goal, on the right, towards the initial states, on the
left. At level 0, the only BsP pair is hf5; 7g : i, composed by the set of goal states indexed
by the 0-length plan . (Notice that  is a conformant solution to every problem with goal set
f5; 7g and initial states contained in f5; 7g.) The dashed arrows represent the application
of SPreImage . At level 1, only the BsP pair hf5; 6; 7; 8g : F lushi is built, since the strong
pre-image of the belief state 0 for the actions Dunk1 and Dunk2 is empty. At level 2, there
are three BsP pairs, with (overlapping) belief states Bs2 , Bs3 and Bs4 , indexed, respectively,
by the length 2 plans Dunk1 ; F lush, F lush; F lush and Dunk2 ; F lush. (A plan associated
with a belief state Bsi is a sequence of actions labeling the path from Bsi to Bs0 .) Notice
that Bs3 is equal to Bs1 , and therefore deserves no further expansion. The expansion of
belief states 2 and 4 gives the belief states 5 and 6, both obtained by the strong pre-image
under F lush, while the strong pre-image under actions Dunk1 and Dunk2 returns empty
belief states. The further expansion of Bs5 results in three belief states. The one resulting
from the strong pre-image under F lush is not reported, since it is equal to Bs5 . Belief state
7 is also equal to Bs2 , and deserves no further expansion. Belief state 8 can be obtained by
expanding both Bs5 and Bs6 . At level 5, the expansion produces Bs10 , which contains all
the initial states. Therefore, both of the corresponding plans are conformant solutions to
the problem.
The conformant planning algorithm ConformantPlan is presented in Figure 4. It
takes as input the planning problem in the form of the set of states I and G (the domain
D is assumed to be globally available). The algorithm performs a backwards breadth-rst
search, exploring BsP pairs corresponding to plans of increasing length at each step. The
status of the search (each level in Figure 3) is represented by a BsP table, i.e. a set of BsP
pairs
BsPT = fhBs1 : 1 i; : : : ; hBsn : n ig
311

Cimatti & Roveri
Level

5

4

3

2

1

0

In_1 1
!Defused
!Clogged

In_1 1
!Defused
!Clogged
Dunk_1

In_1 1
!Defused
!Clogged

In_1 5
Defused
!Clogged

In_1 2
!Defused
Clogged

In_2 7
Defused
!Clogged

In_1 5
Defused
!Clogged

In_1 1
!Defused
!Clogged
Flush

In_1 5
Defused
!Clogged

Dunk_1

Bs 7

In_1 6
Defused
Clogged

In_1 2
!Defused
Clogged

In_2 7
Defused
!Clogged
Bs 2

In_2 3
!Defused
!Clogged

In_1 1
!Defused
!Clogged

In_2 4
!Defused
Clogged

In_2 3
!Defused
!Clogged

Flush

In_1 5
Defused
!Clogged

In_1 5
Defused
!Clogged

In_1 6
Defused
Clogged

In_2 7
Defused
!Clogged

In_2 7
Defused
!Clogged

In_1 5
Defused
!Clogged

Dunk_2
In_2 8
Defused
Clogged

In_1 6
Defused
Clogged

Bs 5

In_2 3
!Defused
!Clogged

Flush

In_1 6
Defused
Clogged

In_2 7
Defused
!Clogged

In_2 7
Defused
!Clogged

In_2 8
Defused
Clogged

In_2 8
Defused
Clogged

Flush

In_1 5
Defused
!Clogged

In_2 7
Defused
!Clogged
Bs 0

Dunk_1

Bs 8

In_1 5
Defused
!Clogged

In_2 4
!Defused
Clogged

Bs 3

Bs 1

7

In_2
Defused
!Clogged

In_1 5
Defused
!Clogged

In_2 3
!Defused
!Clogged

8

In_2
Defused
Clogged

Bs 10

In_2 3
!Defused
!Clogged

In_1 5
Defused
!Clogged

Flush

In_1 6
Defused
Clogged
Dunk_2

In_1 5
Defused
!Clogged

Dunk_2

In_2 7
Defused
!Clogged

In_2 7
Defused
!Clogged

Bs 4

In_2 7
Defused
!Clogged

In_2 8
Defused
Clogged
Bs 9

Bs 6

Figure 3: The BsP tables for the BTUC problem
where the i are plans of the same length, such that i 6= j for all 1  j 6=i  n. We
call Bsi the belief set indexed by i . When no ambiguity arises, we write BsPT(i ) for
Bsi. The array BsPTables is used to store the BsP tables representing the levels of the
search. The algorithm rst checks (line 4) if there are plans of length 0, i.e. if  is a
solution. If no conformant plan of such length exists ((P lans = ;) in line 4), then the
while loop is entered. At each iteration, conformant plans of increasing length are explored
(lines 5 to 8). The step at line 6 expands the BsP table in BsPTables[i 1] and stores the
resulting BsP table in BsPTables[i]. BsP pairs which are redundant with respect to the
current search are eliminated from BsPTables[i] (line 7). The possible solutions contained
in BsPTables[i] are extracted and stored in P lans (line 8). The loop terminates if either a
plan is found (P lans 6= ;), or the space of conformant plans has been completely explored
(BsPTables[i] = ;).
The denitions of the basic functions used in the algorithm are reported in Figure 5.
The function ExpandBsPTable expands the BsP table provided as argument, containing
conformant plans of length i 1, and returns a BsP table with conformant plans of length
i. Each BsP in the input BsP table is expanded by ExpandBsPPair. For each possible
312

Conformant Planning via Symbolic Model Checking

0
1
2
3
4
5
6
7
8
9
10
11
12
13

function ConformantPlan(I ,G )
begin

i = 0;
BsPTables[0] := f hG : i g;
Plans := ExtractSolution(I ; BsPTables[0]);
while ((BsPTables[i] 6= ;) ^ (P lans = ;)) do
i := i + 1;
BsPTables[i] := ExpandBsPTable(BsPTables[i-1]);
BsPTables[i] := PruneBsPTable(BsPTables[i]; BsPTables; i);
Plans := ExtractSolution(I ; BsPTables[i]);

done
if (BsPTables[i] = ;) then
return Fail;
else return Plans;
end

Figure 4: The conformant planning algorithm.
action , the strong pre-image of Bs is computed, and if the resulting belief state Bs0 is
not empty, i.e. there is a belief state from which  guarantees the achievement of Bs, then
the plan  is extended with  and hBs0 : ;  i is returned. The expansion of a BsP table
is the union of the expansions of each BsP pair. The function ExtractSolution takes as
input a BsP table and returns the (possibly empty) set of plans which index a belief states
containing I . PruneBsPTable takes as input the BsP table to be pruned, an array of
previously constructed BsP tables BsPTables, and an index of the current step. It removes
from the BsP table in the input the plans which are not worth being explored because the
corresponding belief states have already been visited.
The algorithm has the following properties. First, it always terminates. This follows
from the fact that the set of explored belief sets (stored in BsPTables) is monotonically
increasing | at each step we proceed only if at least one new belief state is generated.
Because of its niteness (the set of accumulated belief states is contained in 2S which is
nite), a x point is eventually reached. Second, it is correct, i.e. when a plan is returned
it is a conformant solution to the given problem. The correctness of the algorithm follows
from the properties of SPreImage : each plan is associated with a belief state for which it
is conformant, i.e. where it is guaranteed to be applicable and from which it results in a
belief state contained in the goal. Third, the algorithm is optimal, i.e. it returns plans of
minimal length. This property follows from the breadth-rst style of the search. Finally,
the algorithm is able to decide whether a problem admits no solution, returning Fail in such
cases. Indeed, a conformant solution is always associated with a belief state containing the
initial states. SPreImage generates the maximal belief state associated with a conformant
plan, each new belief state generated in the exploration is compared with the initial states
to check if it is a solution, and a plan is pruned only if an equivalent plan has already been
explored.
313

Cimatti & Roveri

(BsPT) =_

ExpandBsPTable

[
hBs : i2BsPT

(hBs : i)

ExpandBsPPair

(hBs : i) =_ fhBs0 : ;  ij such that Bs0 = SPreImage [](Bs) 6= ;g

ExpandBsPPair

(BsPT; BsPTables; i) =_
fhBs : i 2 BsPT j for all j < i; there is no hBs : 0 i 2 BsPTables[j ] such that (Bs0 = Bs)g
PruneBsPTable

(I ; BsPT) =_ f j there exists hBs : i 2 BsPT such that I  Bsg

ExtractSolution

Figure 5: The primitives used by the conformant planning algorithm.
5. Conformant Planning via Symbolic Model Checking

Model checking is a formal verication technique based on the exploration of nite state
automata (Clarke, Emerson, & Sistla, 1986). Symbolic model checking (McMillan, 1993) is
a particular form of model checking using Binary Decision Diagrams to compactly represent
and eÆciently analyze nite state automata. The introduction of symbolic techniques into
model checking led to a breakthrough in the size of model which could be analyzed (Burch
et al., 1992), and made it possible for model checking to be routinely applied in industry,
especially in logic circuits design (for a survey see Clarke & Wing, 1996).
In the rest of this section, we will provide an overview of Binary Decision Diagrams,
and we will describe the representation of planning domains, based on the Bdd-based
representation of nite state automata used in model checking. Then, we will discuss the
extension which allows to symbolically represent BsP tables and their transformations, thus
allowing for an eÆcient implementation of the algorithm described in the previous section.
5.1 Binary Decision Diagrams

A Reduced Ordered Binary Decision Diagram (Bryant, 1992, 1986) (improperly called Bdd)
is a directed acyclic graph (DAG). The terminal nodes are either T rue or F alse. Each nonterminal node is associated with a boolean variable, and two Bdds, called left and right
branches. Figure 6 (a) depicts a Bdd for (a1 $ b1 ) ^ (a2 $ b2 ) ^ (a3 $ b3 ). At each
non-terminal node, the right [left, respectively] branch is depicted as a solid [dashed, resp.]
line, and represents the assignment of the value T rue [F alse, resp.] to the corresponding
variable. A Bdd represents a boolean function. For a given truth assignment to the variables
in the Bdd, the value of the function is determined by traversing the graph from the root
to the leaves, following each branch indicated by the value assigned to the variables1. The
1. A path from the root to a leaf can visit nodes associated with a subset of all the variables of the Bdd.
See for instance the path associated with a1 ; :b1 in Figure 6(a).

314

Conformant Planning via Symbolic Model Checking

a1

a1

b1

a2

b1

a3

a2

b2

b2

b1

b1

a3

b1

b2

a3

a2

a3

b1

b1

b2

a3

b1

b2

b1

b2

b3

b3

b3

b3

True

False

True

False

(a)

b1

(b)

Figure 6: Two Bdds for the formula (a1 $ b1 ) ^ (a2 $ b2 ) ^ (a3 $ b3 ).
reached leaf node is labeled with the resulting truth value. If v is a Bdd, its size jvj is the
number of its nodes. If n is a node, var(n) indicates the variable indexing node n.
Bdds are a canonical representation of Boolean functions. The canonicity follows by
imposing a total order < over the set of variables used to label nodes, such that for any
node n and respective non-terminal child m, their variables must be ordered, i.e. var(n) <
var(m), and requiring that the Bdd contains no isomorphic subgraphs.
Bdds can be combined with the usual boolean transformations (e.g. negation, conjunction, disjunction). Given two Bdds, for instance, the conjunction operator builds and
returns the Bdd corresponding to the conjunction of its arguments. Substitution can also
be represented as Bdd transformations. In the following, if v is a variable, and  and are
Bdds, we indicate with [v= ] the Bdd resulting from the substitution of v with in . If
v1 and v2 are vectors of (the same number of) distinct variables, we indicate with [v1 =v2 ]
the parallel substitution in  of the variables in vector v1 with the (corresponding) variables
in v2 .
Bdds also allow for transformations described as quantications, in the style of Quantied Boolean Formulae (QBF). QBF is a denitional extension to propositional logic, where
propositional variables can be universally and existentially quantied. In terms of Bdd
computations, a quantication corresponds to a tranformation mapping the Bdd of  and
the variable vi being quantied into the Bdd of the resulting (propositional) formula. If 
is a formula, and vi is one of its variables, the existential quantication of vi in , written
9vi:(v1 ; : : : ; vn ), is equivalent to (v1; : : : ; vn )[vi=F alse] _ (v1; : : : ; vn )[vi=T rue]. Analogously, the universal quantication 8vi :(v1 ; : : : ; vn ) is equivalent to (v1 ; : : : ; vn )[vi =F alse]^
315

Cimatti & Roveri
(v1 ; : : : ; vn )[vi =T rue]. In QBF, quantiers can be arbitrarily applied and nested. In general, a QBF formula has an equivalent propositional formula, but the conversion is subject
to an exponential blow-up.
The time complexity of the algorithm for computing a truth-functional boolean transformation f1 <op> f2 is O(jf1 j  jf2 j). As far as quantications are concerned, the time
complexity is quadratic in the size of the Bdd being quantied, and linear in the number
of variables being quantied, i.e. O(jvj  jf j2 ) (Bryant, 1992, 1986).
Bdd packages are eÆcient implementations of such data structures and algorithms (Brace
et al., 1990; Somenzi, 1997; Yang et al., 1998; Coudert et al., 1993). Basically, a Bdd package deals with a single multi-rooted DAG, where each node represents a boolean function.
Memory eÆciency is obtained by using a \unique table", and by sharing common subgraphs
between Bdds. The unique table is used to guarantee that at each time there are no isomorphic subgraphs and no redundant nodes in the multi-rooted DAG. Before creating a
new node, the unique table is checked to see if the node is already present, and only if this
is not the case a new node is created and stored in the unique table. The unique table
allows to perform the equivalence check between two Bdds in constant time (since two
equivalent functions always share the same subgraph) (Brace et al., 1990; Somenzi, 1997).
Time eÆciency is obtained by maintaining a \computed table", which keeps track of the
results of recently computed transformations, thus avoiding the recomputation.
A critical computational factor with Bdds is the order of the variables used. (Figure 6
shows an example of the impact of a change in the variable ordering on the size of a Bdd.)
For a certain class of boolean functions, the size of the corresponding Bdd is exponential in
the number of variables for any possible variable ordering (Bryant, 1991). In many practical
cases, however, nding a good variable ordering is rather easy. Beside aecting the memory
used to represent a Boolean function, nding a good variable ordering can have a big impact
on computation times, since the complexity of the transformation algorithms depends on
the size of the operands. Most Bdd packages provide heuristic algorithms for nding good
variable orderings, which can be called to try to reduce the overall size of the stored Bdds.
The reordering algorithms can also be activated dynamically by the package, during a Bdd
computation, when the total number of nodes in the package reaches a predened threshold
(dynamic reoredering).
5.2 Symbolic Representation of Planning Domains
A planning domain (P ; S ; A; R) can be represented symbolically using Bdds, as follows. A

set of (distinct) Bdd variables, called state variables, is devoted to the representation of the
states S of the domain. Each of these variables has a direct association with a proposition
of the domain in P used in the description of the domain. For instance, for the BTUC
domain, each of In1 , Defused and Clogged is associated with a unique Bdd variable. In
the following we write x for the vector of state variables. Because the particular order is
irrelevant but for performance issues, in the rest of this section we will not distinguish a
proposition and the corresponding Bdd variable.
A state is a set of propositions of P (specically, the propositions which are intended
to hold in it). For each state s, there is a corresponding assignment to the state variables
x , i.e. the assignment where each variable corresponding to a proposition p 2 s is assigned
316

Conformant Planning via Symbolic Model Checking
to T rue, and each other variable is assigned to F alse. We represent s with the Bdd  (s),
having such an assignment as its unique satisfying assignment. For instance,  (6) =_ (In1 ^
Defused ^ Clogged) is the Bdd representing state 6, while  (4) =_ :In1 ^ :Defused ^
Clogged represents state 4, and so on. (Without loss of generality, in the following we do
not distinguish a propositional formula from the corresponding Bdd.) This representation
naturally extends to any set of states Q  S as follows:
 (Q) =_

_ (s)

s2Q

In other words, we associate a set of states with the generalized disjunction of the Bdds
representing each of the states. Notice that the satisfying assignments of the  (Q) are
exactly the assignment representations of the states in Q. This representation mechanism
is very natural. For instance, the Bdd  (I ) representing the the set of initial states of
the BTUC I =_ f1; 2; 3; 4g is :Defused, while for the set of goal states G =_ f5; 7g the
corresponding Bdd is Defused ^ :Clogged. A Bdd is also used to represent the set S of
all the states of the domain automaton. In the BTUC,  (S ) = T rue because S = 2P . In a
dierent formulation, where two independent propositions In1 and In2 are used to represent
the position of a bomb,  (S ) would be the Bdd In1 $ :In2 .
In general, a Bdd represents the set of (states which correspond to) its models. As
a consequence, set theoretic transformations are naturally represented by propositional
operations, as follows.
 (SnQ)
=_  (S ) ^ : (Q)
 (Q1 [ Q2 ) =_  (Q1 ) _  (Q2 )
 (Q1 \ Q2 ) =_  (Q1 ) ^  (Q2 )

The main eÆciency of this symbolic representation lies in the fact that the cardinality
of the represented set is not directly related to the size of the Bdd. For instance,  (G ) uses
two (non-terminal) nodes to represent two states, while  (I ) uses one node to represent four
states. As limit cases,  (S ) and  (fg) are (the leaf Bdds) T rue and F alse, respectively. As
a further advantage, symbolic representation is extremely eÆcient in dealing with irrelevant
information. Notice, for instance, that only the variable Defused occurs in  (f5; 6; 7; 8g ).
For this reason, a symbolic representation can have a dramatic improvement over an explicit,
enumerative representation. This is what allows symbolic, Bdd-based model checkers to
handle nite state automata with a very large number of states (see for instance Burch
et al., 1992). In the following, we will collapse a set of states and the Bdd representing it.
Another set of Bdd variables, called action variables, written  , is used to represent
actions. We use one action variable for each possible action in A. Intuitively, a Bdd action
variable is true if and only if the corresponding action is being executed. If we assume that
a sequential encoding is used, i.e. no concurrent actions are allowed, we also use a Bdd,
Seq( ), to express that exactly one of the action variables must be true at each time2 . For
2. In the specic case of sequential encoding, an alternative approach using only dlog jAje is possible: an
assignment to the action variables denotes a specic action to be executed. Two assignments being
mutually exclusive, the constraint Seq( ) needs not to be represented. When the cardinality of the
set of actions is not a power of two, the standard solution is to associate more than one assignment to
certain values. This optimized solution, which is actually used in the implementation, is not described
here for the sake of simplicity.

317

Cimatti & Roveri
the BTUC problem, where A contains three actions, we use the three Bdd variables Dunk1 ,
Dunk2 and F lush, while we express the serial encoding constraint with the following Bdd:

Seq() =_ (Dunk1 _ Dunk2 _ F lush) ^:(Dunk1 ^ Dunk2 ) ^:(Dunk1 ^ F lush) ^:(Dunk2 ^ F lush)

As for state variables, we are referring to Bdd action variables with symbolic names for
the sake of simplicity. In practice, they will be internally represented as integers, but their
position in the ordering of the Bdd package is totally irrelevant in logical terms.
A Bdd in the variables x and  represents a set of state-action pairs, i.e. a relation
between states and actions. For instance, the applicability relation in the BTUC (i.e., all
actions are possible in all states, except for dunking actions which require the toilet not
to be clogged) is represented by the Bdd :(Clogged ^ (Dunk1 _ Dunk2 )). Notice that it
represents a set of 16 state-action pairs, each associating a state with an applicable action.
A transition is a 3-tuple composed of a state (the initial state of the transition), an
action (the action being executed), and a state (the resulting state of the transition). To
represent transitions, another vector x 0 of Bdd variables, called next state variables, is
allocated in the Bdd package. We write  0 (s) for the representation of the state s in the
next state variables. With  0 (Q) we denote the construction of the Bdd corresponding to
the set of states Q, using each variable in the next state vector x 0 instead of each current
state variables x . We require that jx j = jx 0 j, and assume that the i-th variable in x and the
i-th variable in x 0 correspond. We dene the representation of a set of states in the next
variables as follows.
 0 (s) =_  (s)[x =xx0 ]
We call the operation [x =xx0 ] \forward shifting", because it transforms the representation of
a set of \current" states in the representation of a set of \next" states. The dual operation
[x 0 =xx] is called backward shifting. In the following, we call x current state variables to
distinguish them from next state variables. A transition is represented as an assignment
to x ,  and x 0 . For the BTUC, the transition corresponding to the application of action
Dunk1 in state 1 resulting in state 5 is represented by the following Bdd
 (h1; Dunk1 ; 5i) =_  (1) ^ Dunk1 ^  0 (5)
The transition relation R of the automaton corresponding to a planning domain is
simply a set of transitions, and is thus represented by a Bdd in the Bdd variables x ,  and
x0 , where each satisfying assignment represents a possible transition.
_
 (R) =_ Seq( ) ^  (t)
t2R

In the rest of this paper, we assume that the Bdd representation of a planning domain
is given. In particular, we assume as given the vectors of variables x ;xx0 ;, the encoding
functions  and  0 , and we simply call S , R, I and G the Bdd representing the states of the
domain, the transition relation, the initial states and the goal states, respectively. We write
(v) to stress that the Bdd  depends on the variables in v. With this representation, it
is possible to reason about plans, simulating symbolically the execution of sets of actions in
sets of states, by means of QBF transformations. The Bdd representing the applicability
relation can be directly obtained with the following computation.
) =_ 9x 0 :R(x ;;xx0 )
Applicable(x ;
318

Conformant Planning via Symbolic Model Checking
The resulting Bdd, Applicable(x ;), represents the set of state-action pairs such that
the action is applicable in the state. The Bdd representing the states reachable from Q in
one step is obtained with the following computation.

9x:9:(R(x ;;xx0 )^Q(x))[x 0=xx]
Notice that, with this single operation, we symbolically simulate the eect of the application
of any applicable action in A to any of the states in Q. Similarly, the following transformation allows to symbolically compute the SPreImage of a set of states Q under all possible
actions in one single computation:

8x0:(R(x ;;xx0 ) ! Q(x )[x=xx0 ]) ^

(x ;)

Applicable

The resulting Bdd represents all the state-action pairs hx : i such that  is applicable in
x and the execution of  in x results in states in Q.
5.3 Symbolic Search in the Space of Belief States

The main strength of the symbolic approach is that it allows to perform a symbolic breadthrst search, and it provides a way for compactly representing and eÆciently expanding the
frontier. For instance, plans can be constructed by symbolic breadth-rst search in the
space of states, repeatedly applying the strong pre-image to the goal states (Cimatti et al.,
1998b). However, the machinery presented in the previous section cannot be directly applied
to tackle conformant planning. The basic dierence is that with conformant planning we are
searching in the space of belief states3 , and therefore the frontier of the search is basically
a set of sets of states. We introduce a way to symbolically represent BsP tables. Basically,
this can be seen as a construction on demand, based on the algorithm steps, of increasingly
large portions of the space of belief states. The key intuition is that a BsP table

fhfs11 ; : : : ; s1n1 g : 1i; : : : ; hfsk1 ; : : : ; skn g : k ig
k

is represented as a relation between plans (of the same length) and states, by associating
the plan directly with each state in the belief state indexed by the plan, as follows:

fhs11 : 1i; : : : ; hs1n1 : 1i; : : : ; hsk1 : k i; : : : ; hskn : k ig
k

(2)

We use additional variables to represent the plans in the BsP tables. In order to represent
plans of increasing length, at each step of the algorithm, a vector of new Bdd variables,
called plan variables, is introduced. The vector of plan variables introduced at the i-th step
of the algorithm is written  [i], with j [i]j = j j, and is used to encode the i-th to last action
in the plan4. At step one of the algorithm, we introduce the vector of plan variables  [1]
to represent the action corresponding to each 1-length possible conformant plan. The BsP
3. In principle, the machinery for symbolic search could be used to do conformant planning if applied to
the determinization of the domain automaton, i.e. an automaton having 2S as its state space. However,
this would require the introduction of an exponential number of state variables, which is impractical
even for very small domains.
4. The search being performed backwards, plans need to be reversed once found.

319

Cimatti & Roveri
table BsPT1 at level 1 is built by ExpandBsPTable by performing the following Bdd
computation starting from the BsP table at level 0, i.e. G (x ):
(8x 0 :(R(x ;;xx0 ) ! G (x )[x =xx0 ]) ^ Applicable(x ;))[ = [1]]
The computation collects those state-action pairs hx :  i such that (the action represented
by)  is applicable in (the state represented by) x , and such that all the resulting (states
represented by) x 0 are goal states. Then we replace the vector of action variables  with
the rst vector of plan variables  [1]. The resulting Bdd, BsPT(x ; [1]), represents a BsP
table containing plans of length one in the form of a relation between states and plans as
in (2). In the general case, after step i 1, the BsP table BsPTi 1 , associating belief states
to plans of length i 1, is represented by a Bdd in the state variables x and in the plan
variables  [i 1] ; : : : ; [1]. The computation performed by ExpandBsPTable at step i is
implemented as the following Bdd transformation on BsPTi 1
(8x 0 :(R(x ;;xx0 ) ! BsPTi 1 (x ; [i 1]; : : : ; [1] )[x =xx0 ]) ^ Applicable(x ;))[ = [i]](3)
The next state variables in R and in BsPTi 1 (resulting from the forward shifting) disappear
because of the universal quantication. The action variables  are renamed to the newly
introduced plan variables  [i], so that in the next step of the algorithm the construction can
be repeated.
ExtractSolution extracts the assignments to plan variables such that the corresponding set contains the initial states. In terms of Bdd transformations, ExtractSolution is
implemented as follows:
8x:(I (x) ! BsPTi(x; [i]; : : : ; [1]))
(4)
The result is a Bdd in the plan variables  [i]; : : : ; [1]. If the Bdd is F alse, then there are
no solutions of length i. Otherwise, each of the satisfying assignments to the resulting Bdd
represents a conformant solution to the problem.
To guarantee the termination of the algorithm, at each step the BsP table returned
by ExpandBsPTable is simplied by PruneBsPTable by removing all the belief states
which do not deserve further expansion. This requires the comparison of the belief states
contained in the BsP table with the belief states contained in each of the BsP tables built at
previous levels. This is one of the crucial steps in terms of eÆciency. An earlier implementation of this step with logical Bdd transformations, following directly from the set-theoretical
denition of PruneBsPTable, was extremely ineÆcient (Cimatti & Roveri, 1999). Furthermore, we noticed that the serial encoding could yield BsP tables containing a large
number of equivalent plans, all indexing exactly the same belief state. Often these equivalent plans only dier in the order of some independent actions, and this is a potential source
of combinatorial explosion. This occurs even in the simple version of the BTUC (in Figure 3,
two equivalent conformant plans are associated with Bs8 ). Therefore, we developed a new
implementation which could tackle these two problems by operating directly on the BsP
table. The idea is depicted in Figure 7. Initially, the cache contains Bs1 , Bs2 and Bs3 . The
simplication performs a traversal of the Bdd, by accumulating the subtrees representing
belief states, comparing them with the ones built at previous levels, and inserting the new
ones in the cache (in Figure 7, Bs4 , Bs5 and Bs6 ). Each time a path is identied which
320

Conformant Planning via Symbolic Model Checking
BsP Table

Bs4

Bs2

Bs5

Pruned BsP Table

Bs6

Bs4

Bs5

Cached Belief States
Bs1

Bs2

Bs6

Cached Belief States

Bs3

Bs1

Bs2

Bs3

Bs4

Bs5

Bs6

Figure 7: An example of pruning of a BsP table
represents a plan indexing an already cached belief state, the plan is redundant and the
corresponding path is pruned5. The cost of the simplication is linear in the size of the BsP
being simplied and is highly eective in pruning.
6. CMBP: a BDD-based Conformant Planner

Cmbp (Conformant Model Based Planner) is a conformant planner implementing the data
structures and algorithms for conformant planning described in the previous sections. Cmbp
inherits the features of Mbp (Cimatti et al., 1997, 1998b, 1998a), a planner based on
symbolic model checking techniques. Mbp is built on top of NuSMV, a symbolic model
checker jointly developed by ITC-IRST and CMU (Cimatti et al., 2000), and uses the
CUDD (Somenzi, 1997) state-of-the-art Bdd package. Mbp is a two-stage system. In
the rst stage, an internal Bdd-based representation of the domain is built, while in the
second stage planning problems can be solved. Currently, planning domains are described
by means of the high-level action language AR (Giunchiglia et al., 1997). AR allows to
specify (conditional and uncertain) eects of actions by means of high level assertions. For
instance, Figure 8 shows the AR description of the BTUC problem6. The semantics of
AR yields a serial encoding, i.e. exactly one action is assumed to be executed at each

5. This pruning mechanism is actually weaker than the earlier one (Cimatti & Roveri, 1999). Here we
require that the same belief state must not be expanded twice during the search, while in the earlier
version we prune belief states contained in previously explored ones. This may increase the number of
explored belief states. However, it allows for a much more eÆcient implementation, without impacting
on the properties of the algorithm.
6. ! and & stand for negation and conjunction, respectively. The description is slightly edited for the sake of
readability. In particular, Mbp currently does not accept parameterized AR descriptions. In practice we
use a script language to generate ground instances of dierent complexity from a parameterized problem
description.

321

Cimatti & Roveri

DOMAIN BTUC
ACTIONS Dunk_1, Dunk_2, Flush;
FLUENTS In_1, In_2, Defused, Clogged : boolean;
INERTIAL Clogged, Defused, In_1, In_2;
ALWAYS In_1 <-> !In_2;
Flush CAUSES !Clogged;
for i in [1, 2] {
Dunk_<i> HAS PRECONDITIONS !Clogged;
Dunk_<i> CAUSES Defused IF In_<i>;
Dunk_<i> POSSIBLY CHANGES Clogged;
}
INITIALLY !Defused;
CONFORMANT Defused & !Clogged;

Figure 8: An AR description for the BTUC problem
time. The automaton corresponding to an AR description is obtained by means of the
minimization procedure by Giunchiglia (1996). This procedure solves the frame problem
and the ramication problem, and is eÆciently implemented in Mbp (Cimatti et al., 1997).
Because of the separation between the domain construction and the planning phases, Mbp
is not bound to AR. Standard deterministic domains specied in Pddl (Ghallab et al.,
1998) can also be given to Mbp by means of a (prototype) compiler. We are also starting
to investigate the potential use of the C action language (Giunchiglia & Lifschitz, 1998),
which allows to represent domains with parallel actions.
Dierent planning algorithms can be applied to the specied planning problems. They
operate solely on the automaton representation, and are completely independent of the
particular language used to specify the domain. Mbp allows for automatic construction of
conditional plans under total observability, by implementing the algorithms for strong planning (Cimatti et al., 1998b), and for strong cyclic plannig (Cimatti et al., 1998a; Daniele,
Traverso, & Vardi, 1999). In Cmbp, we implemented the ideas described in the previous
sections. The primitives to construct and prune BsP tables required a lot of tuning, in
particular with the ordering of Bdd variables. We found a general ordering strategy which
works reasonably well: action variables are positioned at the top of the ordering, followed by
plan variables, followed by state variables, with current state and next state variables interleaved. The specic ordering within action variables, plan variables, and state variables is
determined by the standard mechanism implemented in NuSMV. Cmbp implements several
algorithms for conformant planning. In addition to the backward algorithm presented in
322

Conformant Planning via Symbolic Model Checking
Section 4, Cmbp implements an algorithm based on forward search, which allows to exploit
the initial knowledge of the problem, sometimes resulting in signicant speed ups (Cimatti
& Roveri, 2000). Backward and forward search can also be combined, to tackle the exponential growth of the search time with the depth of search. For all these algorithms,
dierent options enable and disable dierent versions of the termination check.
7. Experimental Evaluation

In this section we present an experimental evaluation of our approach, which was carried
out by comparing Cmbp with state-of-the-art conformant planners. We rst describe the
other conformant planners considered in the analysis, and then we present the experimental
comparison that was carried out.
7.1 Other Conformant Planners

Cgp (Smith & Weld, 1998) extends the ideas of Graphplan (Blum & Furst, 1995, 1997) to
deal with uncertainty. Basically, a planning graph is built of every possible sequence of possible worlds, and constraints among planning graphs are propagated to ensure conformance.
The Cgp system takes as input domains described in an extension of Pddl (Ghallab et al.,
1998), where it is possible to specify uncertainty in the initial state. Cgp inherits from
Graphplan the ability to deal with parallel actions. Cgp was the rst eÆcient conformant planner: it was shown to outperform several other planners such as Buridan (Peot,
1998) and UDTPOP (Kushmerick, Hanks, & Weld, 1995). The detailed comparison reported by Smith and Weld (1998) leaves no doubt on the superiority of Cgp with respect
to these systems. Therefore, we compared Cmbp with Cgp and did not consider the other
systems analyzed by Smith and Weld (1998). Cmbp is more expressive than Cgp in two
respects. First, Cgp can only handle uncertainty in the initial state. For instance, Cgp
cannot analyze the BTUC domain presented in Section 3. Smith and Weld (1998) describe
how the approach can be extended to actions with uncertain eects. Second, Cgp cannot
conclude that a planning problem has no conformant solutions.
Qbfplan is (our name for) the planning system by Rintanen (1999a). Qbfplan generalizes the idea of SAT-based planning (Kautz, McAllester, & Selman, 1996; Kautz & Selman,
1996, 1998) to nondeterministic domains, by encoding problems in QBF. The Qbfplan
approach is not limited to conformant planning, but can be used to do conditional planning
under uncertainty, also under partial observability: dierent encodings, corresponding to
dierent structures in the resulting plan, can be synthesized. In this paper, we are only
considering encodings which enforce the resulting plan to be a sequence. Given a bound on
the length of the plan, rst a QBF encoding of the problem is generated, and then a QBF
solver (Rintanen, 1999b) is called. If no solution is found, a new encoding for a longer plan
must be generated and solved. Qbfplan is able to handle actions with uncertain eects.
This is done by introducing auxiliary (choice) variables, the assignments to which the different possible outcomes of actions correspond. These variables are universally quantied
to ensure conformance of the solution. Dierently from e.g. Blackbox (Kautz & Selman,
1998), Qbfplan does not have a heuristic to guess the \right" length of the plan. Given
a limit in the length of the plan, it generates all the encodings up to the specied length,
and repeatedly calls the QBF solver on encodings of increasing length until a plan is found.

323

Cimatti & Roveri
As Cgp, Qbfplan cannot conclude that a planning problem has no conformant solutions.
Similarly to Cmbp, Qbfplan relies on a symbolic representation of the problem, although
QBF transformations are performed by a theorem prover rather than with Bdds.
Gpt (Bonet & Gener, 2000) is a general planning framework, where the conformant
planning problem is seen as deterministic search problem in the space of belief states. Gpt
uses an explicit representation of the search space, where each belief state is represented
as a separate data structure. The search is based on the A algorithm (Nilsson, 1980),
driven by domain dependent heuristics which are automatically generated from the problem
description. Gpt accepts problem descriptions in a syntax based on Pddl, extended to deal
with probabilities and uncertainty. It is possible to represent domains with uncertain action
eects (although the representation of actions resulting in a large number of dierent states
is rather awkward). As for the planning algorithm, Gpt is able to conclude that a given
planning problem has no conformant solution by exhaustively exploring the space of belief
states.
7.2 Experiments and Results

The evaluation was performed by running the systems on a number of parameterized problem domains. We considered all the problems from the Cgp and Gpt distributions, plus
other problems which were dened to test specic features of the planners. We considered
domains with uncertainty limited to the initial state, and domains with uncertain action
eects. Besides problems admitting a solution, we also considered problems not admitting
a solution, in which case we measured the eectiveness of the plannner in returning with
failure.
Given their dierent expressivity, it was not possible to run all the systems on all the
examples. Cmbp was run on all the classes of examples, while Gpt was run on all but one.
Cgp was run only on the problems which admit a solution, and with uncertainty limited
to the initial condition. Qbfplan was run on all the examples for which an encoding was
already available from the Qbfplan distribution. This is only a subset of the problems
expressible in Cgp. The main limiting factor was the low level of the input format of
Qbfplan: problem descriptions must be specied as ML code which generates the QBF
encodings. Writing new encodings turned out to be a very diÆcult task, especially due to
the lack of documentation.
We ran Cgp, Qbfplan and Cmbp on an Intel 300MHz Pentium-II, 512MB RAM,
running Linux. The comparison between Cmbp and Gpt was run on a Sun Ultra Sparc
270MHz, 128Mb RAM running Solaris (Gpt was available as a binary). However, the
performance of the two machines is comparable | the run times for Cmbp were almost
identical. CPU time was limited to 7200 sec (two hours) for each test. To avoid swapping,
the memory limit was xed to the physical memory of the machine. In the following, we
write \|" or \===" for a test that did not complete within the above time and memory
limits, respectively. The performance of the systems are reported in tables listing only the
search time. This excludes the time needed by Qbfplan to generate the encodings, the
time spent by Cmbp to construct the automaton representation into Bdd, and the time
needed by Gpt to generate the source code of its internal representation, and to compile
it. Overall, the most signicant time ignored is the automaton construction of Cmbp.
324

Conformant Planning via Symbolic Model Checking
Currently, the automaton construction is not fully optimized. Even in the most complex
examples, however, the construction never required more than a couple of minutes7.
7.2.1 Bomb in the Toilet

Bomb in the Toilet. The rst domain we tackled is the classical bomb in the toilet,
where there is no notion of clogging. We call the problem BT(p), where the parameter p

is the number of packages. The only uncertainty is in the initial condition, where it is not
known which package contains the bomb. The goal is to defuse the bomb. The results for
the BT problem are shown in Table 1. The columns relative to Cmbp are the length of the
plan (jPj), the number of cached belief states and the number of hits in the cache (#BS and
#NBS respectively), the time (expressed in seconds) needed for searching the automaton
under Pentium/Linux (Time(L)) and under Sparc/Solaris (Time(S)). In the following, when
clear from the context, the execution platform is omitted. The columns relative to Cgp are
the number of levels in the planning graphs (jLj) and the search time. The column relative
to Gpt is the search time.
BT(2)
BT(3)
BT(4)
BT(5)
BT(6)
BT(7)
BT(8)
BT(9)
BT(10)

jPj

2
3
4
5
6
7
8
9
10

Cmbp

#BS/#BSH
2/2
6 / 11
14 / 36
30 / 103
62 / 266
126 / 641
254 / 1496
510 / 3463
1022 / 7862

Time(L)
0.000
0.000
0.000
0.000
0.010
0.010
0.030
0.070
0.150

Time(S)
0.000
0.000
0.000
0.000
0.010
0.030
0.030
0.070
0.140

jLj
1
1
1
1
1
1
1
1
1

Cgp

Time
0.000
0.000
0.000
0.000
0.010
0.010
0.020
0.020
0.020

Gpt

Time
0.074
0.077
0.080
0.087
0.102
0.139
0.230
0.481
1.018

Table 1: Results for the BT problems.
The BT problem is intrinsically parallel, i.e. the depth of the planning graph is always
one, because all the packages can be dunked at the same time. Cgp inherits from Graphplan the ability to deal with parallel actions eÆciently, and therefore it is almost insensitive
to the problem size. For this problem Cgp outperforms both Cmbp and Gpt. Notice that
the number of levels explored by Cgp is always 1, while the length of the plan produced by
Cmbp and Cgp grows linearly. Cmbp performs slightly better than Gpt.
Bomb in the Toilet with Clogging. We call BTC(p) the extension of the BT(p) where
dunking a package (always) clogs the toilet, ushing can remove the clogging, and no clogging is a precondition for dunking a package. Again, p is the number of packages. The toilet
is initially not clogged. With this modication, the problem no longer allows for a parallel
solution. The results for this problem are listed in Table 2. The impact of the depth of
the plan length becomes signicant for all systems. Both Cmbp and Gpt outperform Cgp.
In this case Cmbp performs better than Gpt, especially on large instances (see BTC(16)).
7. More precisely, the maximum time in building the automaton was required for the BMTC(10,6) examples
(88 secs.), the RING(10) example (77 secs.), the BMTC(9,6) examples (40 secs.), and the BMTC(10,5)
examples (41 secs.). For most of the other examples, the time required for the automaton construction
was less than 10 seconds.

325

Cimatti & Roveri
Qbfplan

BTC(2)
BTC(3)
BTC(4)
BTC(5)
BTC(6)
BTC(7)
BTC(8)
BTC(9)
BTC(10)

jPj

3
5
7
9
11
13
15
17
19

Cmbp

Cgp

#BS/#BSH Time(L) Time(S) jLj Time
6/8
0.000
0.010 3
0.000
14 / 23
0.000
0.000 5
0.010
30 / 61
0.010
0.010 7
0.030
62 / 150
0.020
0.020 9
0.130
126 / 347
0.020
0.020 11
0.860
254 / 796
0.070
0.080 13
2.980
510 / 1844
0.150
0.160 15 13.690
1022 / 4149
0.320
0.330 17 41.010
2046 / 9190
0.710
0.700 19 157.590

BTC(16) 31 131070 / 921355

99.200

99.800

Gpt

Time
0.074
0.077
0.082
0.094
0.113
0.166
0.288
0.607
1.309
351.457

BTC(6)
jPj Time
1
0.00
2
0.01
3
0.26
4
0.63
5
1.53
6
2.82
7
6.80
8
14.06
9
35.59
10
93.34
11 (+) 2.48

BTC(10)
Time
1
0.02
2
0.03
3
0.78
4
2.30
5
4.87
6
8.90
7
22.61
8
52.72
9
156.12
10
410.86
11 1280.88
13 3924.96
14
|

jPj

:::
:::
18
|
19 (+) 16.84

Table 2: Results for the BTC problems.
The comparison with Qbfplan is limited to the 6 and 10 package instances (the ones available from the distribution package). The performance of Qbfplan is reported in the left
table in Table 2. Each line reports the time needed to decide whether there is a plan of
length i. The performance of Qbfplan is rather good when tackling an encoding admitting a solution (in Table 2 these entries are labeled by (+)). For instance, in the BTC(10)
Qbfplan nds the solution solving the encodings at depth 19 reasonably fast. However,
when a solution cannot be found, i.e. the QBF formula admits no model, the performance
of Qbfplan degrades signicantly (for the depth 18 encoding, we let the solver run for 10
CPU hours and it did not complete the search). Because of the dierence in performance,
and the diÆculty in writing new domains, in the rest of the comparison we will not consider
Qbfplan.
Bomb in Multiple Toilets. The next domain, called BMTC(p,t), is the generalization
of the BTC problem to the case of multiple toilets (p is the number of packages, while t
is the number of toilets). The problem becomes more parallelizable when the number of
toilets increases. Furthermore, we considered three versions of the problem with increasing
uncertainty in the initial states. In the rst class of tests (\Low Uncertainty" columns), the
only uncertainty is the position of the bomb which is unknown, while toilets are known to
be not clogged. The \Mid Uncertainty" and \High Uncertainty" columns show the results
in presence of more uncertainty in the initial state. In the second [third, respectively] class
of tests, the status of every odd [every, resp.] toilet can be either clogged or not clogged.
This increases the number of possible initial states.
The results are reported in Table 3 (for the comparison with Cgp) and in Table 4
(for the comparison with Gpt). The IS column represents the number of initial states of
the corresponding problem. Cgp is able to fully exploit the parallelism of the problem.
However, Cgp is never able to explore more than 9 levels in the planning graph, with depth
decreasing with the number of initial states. The results also show that Cmbp and Gpt
are much less sensitive to the number of initial states than Cgp. With increasing initial
326

(p,t)
(2,2)
(3,2)
(4,2)
(5,2)
(6,2)
(7,2)
(8,2)
(9,2)
(10,2)
(2,3)
(3,3)
(4,3)
(5,3)
(6,3)
(7,3)
(8,3)
(9,3)
(10,3)
(2,4)
(3,4)
(4,4)
(5,4)
(6,4)
(7,4)
(8,4)
(9,4)
(10,4)
(2,5)
(3,5)
(4,5)
(5,5)
(6,5)
(7,5)
(8,5)
(9,5)
(10,5)
(2,6)
(3,6)
(4,6)
(5,6)
(6,6)
(7,6)
(8,6)
(9,6)
(10,6)

bmtc

IS
2
3
4
5
6
7
8
9
10
2
3
4
5
6
7
8
9
10
2
3
4
5
6
7
8
9
10
2
3
4
5
6
7
8
9
10
2
3
4
5
6
7
8
9
10

2
4
6
8
10
12
14
16
18
2
3
5
7
9
11
13
15
17
2
3
4
6
8
10
12
14
16
2
3
4
5
7
9
11
13
15
2
3
4
5
6
8
10
12
14

jPj

Low Uncertainty
Cmbp
#BS/#BSH Time
10 / 18 0.000
26 / 84 0.000
58 / 250 0.020
122 / 652 0.030
250 / 1552 0.070
506 / 3586 0.180
1018 / 8262 0.400
2042 / 18484 0.940
4090 / 40676 1.820
18 / 42 0.000
47 / 202 0.010
110 / 736 0.030
237 / 2034 0.080
492 / 5106 0.230
1003 / 12128 0.560
2026 / 27836 1.300
4073 / 62470 3.330
8168 / 138046 7.280
29 / 75 0.010
92 / 492 0.020
206 / 1686 0.060
457 / 4987 0.190
964 / 12456 0.410
1983 / 29453 1.040
4026 / 68466 2.740
8117 / 153895 6.690
16304 / 339160 14.420
43 / 117 0.010
164 / 1031 0.040
416 / 4304 0.150
872 / 11763 0.490
1875 / 31695 1.300
3901 / 78009 3.990
7974 / 183036 9.670
16142 / 416333 24.250
32501 / 927329 54.910
60 / 168 0.010
270 / 1848 0.070
786 / 9294 0.300
1777 / 29075 1.160
3613 / 71123 3.290
7625 / 180127 9.060
15726 / 429198 20.710
32012 / 986188 50.610
64675 / 2.21106e+06 111.830
Time
0.000
0.020
0.030
1.390
3.490
508.510
918.960
|
0.010
0.010
0.110
0.170
0.340
6248.010
|

Cgp

327

Mid Uncertainty
Cmbp
IS
#BS/#BSH Time
4
12 / 34 0.000
6
28 / 106 0.000
8
60 / 286 0.020
10
124 / 702 0.030
12
252 / 1614 0.080
14
508 / 3662 0.190
16
1020 / 8362 0.430
18
2044 / 18602 0.960
20
4092 / 40810 1.990
8
24 / 99 0.000
12
56 / 349 0.020
16
120 / 942 0.040
20
248 / 2335 0.110
24
504 / 5520 0.250
28
101 / 12673 0.590
32
204 / 28530 1.350
36
408 / 63331 3.370
40
818 / 139092 7.460
8
29 / 75 0.000
12
108 / 808 0.030
16
236 / 2356 0.080
20
492 / 5888 0.230
24
1004 / 13648 0.470
28
2028 / 31004 1.120
32
4076 / 70584 2.870
36
8172 / 15654 6.900
40
16364 / 34234 14.630
16
43 / 117 0.010
24
212 / 2008 0.080
32
475 / 6375 0.260
40
987 / 15928 0.700
48
2011 / 37759 1.890
56
4059 / 86716 4.480
64
8155 / 195055 10.590
72
16347 / 432408 25.600
80
32731 / 948279 56.420
16
60 / 168 0.010
24
270 / 1848 0.070
32
920 / 13810 0.500
40
1958 / 37636 1.940
48
4005 / 90111 4.080
56
8100 / 208050 10.130
64
16291 / 469277 22.620
72 32674 / 1.04173e+06 53.510
80 65441 / 2.28585e+06 116.440
0.020
0.290
0.730
|

1 0.200
1 0.830
2 30.630
2 30.140
2 57.300
2
|

1 0.130
2 3.540
2 6.320
2 37,959
2
|

1
2
2
2

0.090
0.200
0.990
|

2
2
3
3

2
3
4
5
5

Time
0.010
0.040
0.460
13,180
|

Cgp

jLj

Table 3: Results for the BMTC problems.

1
0.000
1
0.010
1
0.010
3
0.500
3
1.160
3
2.410
3
8.540
4
|
1
0.010
1
0.020
1
0.020
1
0.050
3
5.920
3 18.410
3 62.040
3 194.640
3 289,680
1
0.010
1
0.010
1
0.040
1
0.060
1
0.100
3 211.720
3 1015.160
3 3051.990
2
|

1
3
3
5
5
7
7
7
1
1
3
3
3
5
4

jLj

High Uncertainty
Cmbp
IS
#BS/#BSH Time
8
12 / 40 0.000
12
28 / 112 0.010
16
60 / 294 0.010
20
124 / 710 0.040
24
252 / 1622 0.080
28
508 / 3670 0.190
32
1020 / 8372 0.450
36
2044 / 18612 0.950
40
4092 / 40820 2.030
16
24 / 126 0.010
24
56 / 373 0.020
32
120 / 972 0.040
40
248 / 2371 0.120
48
504 / 5562 0.240
56
1016 / 12721 0.640
64
2040 / 28584 1.330
72
4088 / 63391 3.390
80
8184 / 139158 7.430
32
48 / 332 0.020
48
112 / 960 0.040
64
240 / 2532 0.090
80
496 / 6092 0.240
96
1008 / 13876 0.470
112
2032 / 31260 1.160
128
4080 / 70912 2.910
144
8176 / 156904 6.970
160
16368 / 342736 14.770
64
93 / 751 0.030
96
224 / 2591 0.120
128
480 / 6740 0.260
160
992 / 16393 0.730
192
2016 / 38334 1.980
224
4064 / 87411 4.540
256
8160 / 195880 10.640
288
16352 / 433373 25.370
320
32736 / 949394 56.290
128
171 / 1533 0.040
192
448 / 6248 0.310
256
960 / 16344 0.690
320
1984 / 39710 2.120
384
4032 / 92772 4.600
448
8128 / 211370 10.400
512
16320 / 473328 23.000
576 32704 / 1.04658e+06 54.010
640 65472 / 2.29158e+06 116.240
1.610
8.690
32.190
|

0.170
0.690
|

Time
0.030
13.560
145.830
|

Cgp

2 337.604
2 1459.110
2 5643.450
2
|

2 21.120
2 138.430
2 551.210
2 1523.840
2
|

2
2
2
3

2
2
3

2
4
4
4

jLj

Conformant Planning via Symbolic Model Checking

Cimatti & Roveri
bmtc

(p,t)
(2,2)
(3,2)
(4,2)
(5,2)
(6,2)
(7,2)
(8,2)
(9,2)
(10,2)
(2,4)
(3,4)
(4,4)
(5,4)
(6,4)
(7,4)
(8,4)
(9,4)
(10,4)
(2,6)
(3,6)
(4,6)
(5,6)
(6,6)
(7,6)
(8,6)
(9,6)
(10,6)

Low Unc.

Cmbp

Time
0.000
0.010
0.000
0.040
0.080
0.190
0.390
0.910
1.850
0.000
0.010
0.050
0.180
0.370
1.080
2.700
8.970
14.210
0.010
0.050
0.310
1.110
3.400
8.910
21.240
49.880
113.680

Gpt

Time
0.079
0.087
0.105
0.146
0.227
0.441
0.922
2.211
5.169
0.109
0.156
0.270
0.616
1.435
3.484
8.767
23.858
59.966
0.303
0.562
1.354
3.257
8.691
25.677
68.427
289.000
486.969

High Unc.

Cmbp

Time
0.010
0.010
0.020
0.040
0.070
0.200
0.400
0.950
1.900
0.010
0.040
0.100
0.240
0.460
1.190
2.830
6.920
114.690
0.060
0.260
0.620
2.060
4.660
10.430
23.860
54.190
118.590

Gpt

Time
0.079
0.091
0.121
0.198
0.376
0.850
1.966
4.743
10.620
0.121
0.284
1.016
3.282
9.374
27.348
72.344
180.039
440.308
0.482
2.471
17.406
74.623
243.113
701.431
===

Table 4: Results for the BMTC problems.
uncertainty, Cgp is almost unable to solve what were trivial problems. Gpt performs better
than Cgp, but it suers from the explicit representation of the search space.
Bomb in the Toilet with Uncertain Clogging. The BTUC(p) domain is the domain
described in Section 2, where clogging is an uncertain outcome of dunking a package. This
kind of problem cannot be expressed in Cgp. The results for Cmbp and Gpt are reported
in Table 5. Although Cmbp performs better than Gpt (by a factor of two to three), there
is no signicant dierence in the behavior. It is interesting to compare the results of Cmbp
for the BTC and BTUC problems. For Gpt a slight dierence is noticeable, resulting from
the increased branching factor in the search space due to the uncertainties in the eects of
action executions. In the performance of Cmbp, the number of uncertainties is not a direct
factor | for example, in the BTC(16) and BTUC(16), the performance is almost the same.
7.2.2 Ring of Rooms

Simple Ring of Room. We considered another domain, where a robot can move in a
ring of rooms. Each room has a window, which can be either open, closed or locked. The
robot can move (either clockwise or counterclockwise), close the window of the room where
it is, and lock it if closed. The goal is to have all windows locked.
328

Conformant Planning via Symbolic Model Checking
Cmbp

jPj

BTUC(2)
BTUC(3)
BTUC(4)
BTUC(5)
BTUC(6)
BTUC(7)
BTUC(8)
BTUC(9)
BTUC(10)
BTUC(16)

#BS/#BSH
6/8
14 / 23
30 / 61
62 / 150
126 / 347
254 / 796
510 / 1844
1022 / 4149
2046 / 9190
131070 / 921355

3
5
7
9
11
13
15
17
19
31

Time
0.000
0.000
0.010
0.010
0.030
0.050
0.170
0.310
0.720
98.270

Gpt

Time
0.076
0.078
0.085
0.098
0.128
0.205
0.380
0.812
1.828
486.252

Table 5: Results for the BTUC problems.
N-1

N

1

2

In the problem RING(r), where r is the number of rooms, the uncertainty is only in the
initial condition: both the position of the robot and the status of the windows can be
uncertain. These problems do not have a parallel solution, and have a large number of initial
states (r  3r ), corresponding to full uncertainty on the position of the robot and on the
status of each window. The results8 are reported on the left in Table 6. Cmbp outperforms
RING(2)
RING(3)
RING(4)
RING(5)
RING(6)
RING(7)
RING(8)
RING(9)
RING(10)

jPj

5
8
11
14
17
20
23
26
29

Cmbp

#BS/#BSH
8 / 24
26 / 78
80 / 240
242 / 726
728 / 2184
2186 / 6558
6560 / 19680
19682 / 59046
59048 / 177144

Time
0.000
0.020
0.040
0.120
0.370
1.420
4.950
27.330
106.870

jLj
3
4

Cgp

Time
0.070
|

Gpt

Time
0.085
0.087
0.392
1.150
6.620
23.636
105.158
===

IS
1
2
4
8
16

Cgp on RING(5)

jLj
5
5
5
5
5

Time
0.010
0.060
0.420
6.150
|

jLj
9
9
9
9
9

Time
0.020
0.140
1.950
359.680
|

Table 6: The results for the RING problems.
both Cgp and Gpt, although Gpt performs much better than Cgp. Both Cgp and Gpt
suer from the increasing complexity of the problem. On the right in Table 6, we plot (for
the RING(5) problem) the dependency of Cgp on the number of initial states combined
with the number of levels to be explored (dierent goals were provided which require the
exploration of dierent levels). It is clear that the number of initial states and the depth of
the search are both critical factors for Cgp.
8. The times reported for Cgp refer to a scaled-down version of the problem, where locking is not taken
into account, and thus the maximum number of initial states is r  2r .

329

Cimatti & Roveri
Ring of Rooms with Uncertain Action Eects. We considered a variation of the

RING domain, called URING, rst introduced by Cimatti and Roveri (1999), which is not
expressible in Cgp. If a window is not locked and the robot is not performing an action
which will determine its status (e.g. closing it), then the window can open or close nondeterministically. For instance, while the robot is moving from room 1 to room 2, the windows in
room 3 and 4 could be open or closed by the wind. This domain is clearly designed to stress
the ability of a planner to deal with actions having a large number of resulting states. In the
worst case (e.g. a move action performed when no window is locked), there are 2r possible
resulting states. Although seemingly articial, this captures the fact that environments can
be in practice highly nondeterministic. We tried to compare Cmbp and Gpt on the URING
problem. In principle Gpt is able to deal with uncertainty in the action eects. However,
we failed to codify the URING in the Gpt language, because it requires a conditional description of uncertain eects. Therefore, we experimented with a variation of the RING
domain featuring a higher degree of nondeterminism, called NDRING in the following. The
NDRING domain contains an increasing number of additional propositions, called in the
following noninertial propositions, which are initially unknown and are nondeterministically
altered by each action. If i is the number of noninertial propositions, each action has 2i
NDRING(2)
NDRING(3)
NDRING(4)
NDRING(5)
NDRING(6)
NDRING(7)
NDRING(8)
NDRING(9)
NDRING(10)

jPj

5
8
11
14
17
20
23
26
29

Cmbp

#BS/#BSH
8 / 24
26 / 78
80 / 240
242 / 726
728 / 2184
2186 / 6558
6560 / 19680
19682 / 59046
59048 / 177144

Time (5)
0.000
0.020
0.040
0.110
0.350
1.350
4.990
27.060
103.760

Time (2)
0.140
0.256
1.046
4.550
18.758
108.854
===

Gpt

Time (3)
0.384
0.679
3.025
12.960
57.300
===

Time (4)
0.948
2.574
12.548
48.426
===

Time (5)
4.544
13.960
67.714
===

Table 7: The results for the NDRING problems.
possible outcomes. The results are listed in Table 7, with columns labeled with Time(i).
The growing branching factor during the search has a major impact on the performance of
Gpt, while Cmbp is insensitive to this kind of uncertainty. (The performance of Cmbp for
a lower number of noninertial propositions are not reported because they are basically the
same.)
The URING problem was run only on Cmbp. The results are listed in Table 8. It can
be noticed that the performances of Cmbp improve signicantly with respect to the RING
problem. This can be explained considering that, despite the larger number of transitions,
the number of explored belief states is signicantly smaller (see the Bs cache statistics in
Tables 6 and 8).
7.2.3 Square and Cube

The following domains are the SQUARE(n) and CUBE(n) from the Gpt distribution (Bonet
& Gener, 2000). These problems consist of a robot navigating in a square or cube of side
n. In both domains there are actions for moving the robot in all the possible directions.
Moving the robot against a boundary leaves the robot in the same position. The original
330

Conformant Planning via Symbolic Model Checking

URING(2)
URING(3)
URING(4)
URING(5)
URING(6)
URING(7)
URING(8)
URING(9)
URING(10)

jPj
5
8
11
14
17
20
23
26
29

Cmbp

#BS/#BSH
5 / 16
11 / 34
23 / 70
47 / 142
95 / 286
191 / 574
383 / 1150
767 / 2302
1535 / 4606

Time
0.000
0.010
0.020
0.040
0.080
0.190
0.410
0.980
2.2300

Table 8: Results for the URING problems.
problems, called CORNER in the following, require the robot to reach a corner, starting
from a completely unspecied position. We introduced two variations. In the rst, called
FACE, the initial position is any position of a given side [face] of the square [cube], while
the goal is to reach the central position of the opposite side [face]. In the second, called
CENTER, the initial position is completely unspecied, and the goal is the center of the
square [cube]. For the corner problem, a simple heuristic is to perform only steps towards
the corner, thus pruning half of the actions. The variations are designed not to allow for a
simple heuristic | for instance, in the CENTER problem, no action can be eliminated.
SQUARE(i)
SQUARE(2)
SQUARE(4)
SQUARE(6)
SQUARE(8)
SQUARE(10)
SQUARE(12)
SQUARE(14)
SQUARE(16)
SQUARE(18)
SQUARE(20)
CUBE(i)
CUBE(2)
CUBE(3)
CUBE(4)
CUBE(5)
CUBE(6)
CUBE(7)
CUBE(8)
CUBE(9)
CUBE(10)
CUBE(15)

jPj

3
6
9
12
15
18
21
24
27
42

jPj

2
6
10
14
18
22
26
30
34
38

CORNER
Cmbp
#BS/#BSH Time
2 / 4 0.000
15 / 37 0.000
35 / 93 0.000
63 / 173 0.020
99 / 277 0.030
143 / 405 0.050
195 / 557 0.070
255 / 733 0.080
323 / 933 0.120
399 / 1157 0.160

CORNER
Cmbp
#BS/#BSH Time
6 / 19 0.000
26 / 99 0.010
63 / 261 0.020
124 / 537 0.040
215 / 957 0.050
342 / 1551 0.100
511 / 2349 0.160
728 / 3381 0.330
999 / 4677 0.440
3374 / 16167 1.940

Gpt

Time
0.332
0.168
0.430
0.276
0.500
0.567
1.082
1.765
2.068
9.207

Gpt

Time
0.074
0.080
0.092
0.115
0.149
0.196
0.261
0.357
0.503
0.638

jPj

3
6
11
14
19
22
27
30
35
54

jPj

2
7
12
17
22
27
32
37
42
47

FACE
Cmbp
#BS/#BSH Time
2 / 4 0.000
33 / 83 0.000
86 / 232 0.020
163 / 453 0.040
264 / 746 0.090
389 / 1111 0.150
538 / 1548 0.230
711 / 2057 0.320
908 / 2638 0.540
1129 / 3291 0.650

Gpt

Time
0.058
0.065
0.089
0.139
0.228
0.371
0.582
0.908
1.343
1.883

jPj

2
8
14
20
26
32
38
44
50
56

CENTER
Cmbp
#BS/#BSH Time
2 / 4 0.000
76 / 190 0.010
218 / 592 0.040
432 / 1210 0.090
718 / 2044 0.190
1076 / 3094 0.360
1506 / 4360 0.560
2008 / 5842 0.820
2582 / 7540 1.330
3228 / 9454 1.790

Gpt

Time
0.060
0.083
0.216
0.695
2.135
5.340
12.284
26.241
52.091
94.204

FACE
CENTER
Cmbp
Gpt
Cmbp
Gpt
#BS/#BSH Time Time jPj #BS/#BSH Time Time
6 / 19 0.000 0.061 3
6 / 19 0.010 0.061
26 / 99 0.000 0.069 6
26 / 99 0.010 0.144
319 / 1360 0.050 0.193 12
722 / 3091 0.130 0.569
709 / 3095 0.220 0.412 15
1696 / 7402 0.430 2.010
1343 / 6116 0.430 1.479 21 3365 / 15432 0.910 10.717
2255 / 10377 0.840 3.323 24 5797 / 26814 1.860 34.074
3519 / 16464 1.400 8.161 30 9248 / 43541 3.520 109.852
5169 / 24331 2.810 16.272 33 13786 / 65237 7.260 701.910
7279 / 34564 4.550 32.226 39 19667 / 93898 9.990
===
26439 / 127825 28.560
=== 60 74041 / 359354 58.930

Table 9: Results for the SQUARE and CUBE problems.
The results for these problems are reported in Table 9. The tests were run only with
Cmbp and Gpt. The experiments highlight that the eÆciency of Gpt strongly depends on
the quality of the heuristic function. If, as in the rst set of experiments, the heuristics are
331

Cimatti & Roveri
eective, then Gpt is almost as good as Cmbp. Otherwise, Gpt degrades signicantly. In
general, nding heuristics which are eective in the belief space appears to be a nontrivial
problem. Cmbp appears to be more stable9 , as it performs a blind, breadth-rst search,
and relies on the cleverness of the symbolic representation to achieve eÆciency.
7.2.4 Omelette

Finally, we considered the OMELETTE(i) problem (Levesque, 1996). The goal is to have i
good eggs and no bad ones in one of two bowls of capacity i. There is an unlimited number of
eggs, each of which can be unpredictably good or bad. The eggs can be grabbed and broken
into a bowl. The content of a bowl can be discarded, or poured to the other bowl. Breaking
a rotten egg in a bowl has the eect of spoiling the bowl. A bowl can always be cleaned
by discarding its content. The problem is originally presented as a partial observability
problem, with a sensing action allowing to test if a bowl is spoiled or not. We considered
the variation of the problem without sensing action: in this case no conformant solution
exists. We used the OMELETTE problems to test the ability of Cmbp and Gpt to discover
that the problem admits no conformant solution. The results are reported in Table 10. The
table shows that Cmbp is very eective in checking the absence of a conformant solution,
and outperforms Gpt by several orders of magnitude.
OMELETTE(3)
OMELETTE(4)
OMELETTE(5)
OMELETTE(6)
OMELETTE(7)
OMELETTE(8)
OMELETTE(9)
OMELETTE(10)
OMELETTE(15)
OMELETTE(20)
OMELETTE(30)

# steps
9
11
13
15
17
19
21
23
33
43
63

CMBP
#BS/#BSH
15 / 34
19 / 42
23 / 50
27 / 58
31 / 66
35 / 74
39 / 82
43 / 90
63 / 130
83 / 170
123 / 250

Time
0.020
0.030
0.040
0.050
0.060
0.090
0.110
0.120
0.210
0.440
0.890

GPT
Time
0.237
0.582
1.418
2.904
5.189
10.307
18.744
32.623
225.530
===

Table 10: Results for the OMELETTE problems.
7.3 Summarizing Remarks

Overall, Cmbp appears to implement the most eective approach to conformant planning,
both in terms of expressivity and performance. Cgp is only able to deal with uncertainties
in the initial states, and cannot conclude that the problem does not admit a conformant
solution. The main problem in Cgp seems to be its enumerative approach to uncertainties,
and the increased number of initial states severely aects the performance (see Table 3 and
Table 6).
Qbfplan is in principle able to deal with uncertain action eects, but cannot conclude
that the problem does not admit a conformant solution. From the small number of ex9. Consider also that the problems are increasingly more diÆcult (see for instance the plan length).

332

Conformant Planning via Symbolic Model Checking
periments that we could perform, the approach implemented by Qbfplan is limited by
the Satplan style of search: the intermediate results obtained while solving an encoding
at depth k are not reused while solving encodings of increasing depth. Furthermore, the
solver appears to be specialized in nding a model, rather than in proving unsatisability.
However, the latter ability is needed in all encodings but the nal one.
Gpt is a very expressive system, which allows eÆciently dealing with a wide class of
planning problems. As far as conformant planning is concerned, it is as expressive as
Cmbp. It allows dealing with uncertain action eects, and can conclude that a problem
does not have a conformant solution. However, Cmbp appears to outperform Gpt in
several respects. First, the behaviour of Gpt appears to be directly related to the number
of possible outcomes in an action. Furthermore, the eÆciency of Gpt depends on the
eectiveness of the heuristic functions, which can be sometimes diÆcult to devise, and
cannot help when the problem does not admit a solution.
The main strength of Cmbp is its independence on the number of uncertainties, which
is achieved with the use of symbolic techniques. Being fully symbolic, Cmbp does not
exhibit the enumerative behaviour of its competitors. Compared to the original approach
described by Cimatti and Roveri (1999), a substantial improvement of the performance
has been obtained by the new implementation of the pruning step. A disclaimer is in
order. It is well known that Bdd based computations are subject to a blow-up in memory
requirements when computing certain classes of boolean functions, e.g. multipliers (Bryant,
1986). It would be trivial to make up an example where the performance of Cmbp degrades
exponentially. However, in none of the examples we considered, which included all the
examples in the distribution of Cgp and Gpt, this phenomenon occurred.
8. Other Related Work

The term conformant planning was rst introduced by Goldman (1996), while presenting a
formalism for constructing conformant plans based on an extension of dynamic logic. Recently, Ferraris and Giunchiglia (2000) presented another conformant planner based on SAT
techniques. The system is not available for a direct comparison with Cmbp. The eectiveness of the approach is diÆcult to evaluate, as only a limited testing is described (Ferraris &
Giunchiglia, 2000). The performance is claimed to be comparable with Cgp. However, the
results are reported only for the enconding corresponding to the solution, and the behaviour
of Qbfplan reported in Table 2 suggests that this kind of analysis might be limited.
Several works share the idea of planning based on automata theory. The most closely
related are the works in the lines of planning via model checking (Cimatti et al., 1997), upon
which our work is based. This approach allows, for instance, to automatically construct
universal plans which are guaranteed to achieve the goal in a nite number of steps (Cimatti
et al., 1998b), or which implement trial-and-error strategies (Cimatti et al., 1998a; Daniele
et al., 1999). These results are obtained under the hypothesis of total observability, while
here run-time observation is not available. The main dierence is that a substantial extension is required to lift symbolic techniques to search in the space of belief states. De
Giacomo and Vardi (1999) analyze several forms of planning in the automata theoretic
framework. Goldman, Musliner and Pelican (2000) present a method where model checking
in timed automata is interleaved with the plan formation activity, to make sure that the
333

Cimatti & Roveri
timing constraints are met. Finally, Hoey and his colleagues (1999) use algebraic decision
diagrams to tackle the problem of stochastic planning.
9. Conclusions and Future Work

In this paper we presented a new approach to conformant planning, based on the use
of Symbolic Model Checking techniques. The algorithm is very general, and applies to
complex planning domains, with uncertainty in the initial condition and in action eects,
which can be described as nite state automata. The algorithm is based on a breadthrst, backward search, and returns conformant plans of minimal length, if a solution to the
planning problem exists. Otherwise, it terminates with failure. The algorithm is designed
to take full advantage of the symbolic representation based on Bdds. The implementation
of the approach in the Cmbp system has been highly optimized, in particular in the crucial
step of termination checking. We performed an experimental comparison of our approach
with the state of the art conformant planners Cgp, Qbfplan and Gpt. Cmbp is strictly
more expressive than Qbfplan and Cgp. On all the problems for which a comparison
was possible, Cmbp outperformed its competitors in terms of run times, sometimes by
orders of magnitude. Thanks to the use of symbolic data structures, Cmbp is able to deal
eÆciently with problems with large numbers of initial states and action outcomes. On
the other hand, the qualitative behavior of Cgp and Gpt seems to depend heavily on the
enumerative nature of their algorithms. Dierently from Gpt, Cmbp is independent of the
eectiveness of the heuristic used to drive the search.
The research presented in this paper will be extended in the following directions. First,
we are investigating an alternative approach to conformant planning, where the breadthrst style of the search is given up. These techniques appear to be extremely promising |
preliminary experiments have led to speed ups of up to two orders of magnitude over the
results presented in this paper for problems which admit a solution. Second, we will tackle
the problem of conditional planning under partial observability, under the hypothesis that
a limited amount of information can be acquired at run time. As conformant planning, this
problem can be seen as search in the belief space. However, it appears to be signicantly
complicated by the need for dealing with run-time observation and conditional plans. Finally, we are considering the extension of the domain construction of the planner with more
expressive input language, such as C , and invariant detection techniques.
Acknowledgements

Fausto Giunchiglia provided continuous encouragement and feedback on this work. We
thank Piergiorgio Bertoli, Blai Bonet, Marco Daniele, Hector Gener, Enrico Giunchiglia,
Jussi Rintanen, David Smith, Paolo Traverso, Dan Weld for valuable discussions on conformant planning and various comments on this paper. David Smith provided the code of
Cgp, a large number of examples, and the time-out mechanism used in the experimental
evaluation. Jussi Rintanen made Qbfplan available under Linux.
334

Conformant Planning via Symbolic Model Checking
References

Blum, A. L., & Furst, M. L. (1995). Fast planning through planning graph analysis. In
Proc. Ijcai.
Blum, A. L., & Furst, M. L. (1997). Fast planning through planning graph analysis. Articial Intelligence 1{2, 90, 279{298.
Bonet, B., & Gener, H. (2000). Planning with Incomplete Information as Heuristic Se
arch in Belief Space. In Chien, S., Kambhampati, S., & Knoblock, C. (Eds.), 5th
International Conference on Articial Intelligence Planning and Scheduling, pp. 52{
61. AAAI-Press.
Brace, K., Rudell, R., & Bryant, R. (1990). EÆcient Implementation of a BDD Package. In 27th ACM/IEEE Design Automation Conference, pp. 40{45 Orlando, Florida.
ACM/IEEE, IEEE Computer Society Press.
Bryant, R. E. (1986). Graph-Based Algorithms for Boolean Function Manipulation. IEEE
Transactions on Computers, C-35 (8), 677{691.
Bryant, R. E. (1991). On the complexity of VLSI implementations and graph representations
of Boolean functions with application to integer multiplication. IEEE Transactions
on Computers, 40 (2), 205{213.
Bryant, R. E. (1992). Symbolic Boolean manipulation with ordered binary-decision diagrams. ACM Computing Surveys, 24 (3), 293{318.
Burch, J. R., Clarke, E. M., McMillan, K. L., Dill, D. L., & Hwang, L. J. (1992). Symbolic
Model Checking: 1020 States and Beyond. Information and Computation, 98 (2),
142{170.
Cassandra, A., Kaelbling, L., & Littman, M. (1994). Acting optimally in partially observable
stochastic domains. In Proc. of AAAI-94. AAAI-Press.
Cimatti, A., Clarke, E., Giunchiglia, F., & Roveri, M. (2000). NuSMV : a new symbolic
model checker. International Journal on Software Tools for Technology Transfer
(STTT), 2 (4).
Cimatti, A., Giunchiglia, E., Giunchiglia, F., & Traverso, P. (1997). Planning via Model
Checking: A Decision Procedure for AR. In Steel, S., & Alami, R. (Eds.), Proceeding
of the Fourth European Conference on Planning, No. 1348 in Lecture Notes in Articial
Intelligence, pp. 130{142 Toulouse, France. Springer-Verlag. Also ITC-IRST Technical
Report 9705-02, ITC-IRST Trento, Italy.
Cimatti, A., & Roveri, M. (1999). Conformant Planning via Model Checking. In Biundo,
S. (Ed.), Proceeding of the Fifth European Conference on Planning, Lecture Notes
in Articial Intelligence Durham, United Kingdom. Springer-Verlag. Also ITC-IRST
Technical Report 9908-01, ITC-IRST Trento, Italy.
335

Cimatti & Roveri
Cimatti, A., & Roveri, M. (2000). Forward Conformant Planning via Symbolic Model
Checking. In Proceeding of the AIPS2k Workshop on Model-Theoretic Approaches to
Planning Breckenridge, Colorado.
Cimatti, A., Roveri, M., & Traverso, P. (1998a). Automatic OBDD-based Generation of
Universal Plans in Non-Deterministic Domains. In Proceeding of the Fifteenth National
Conference on Articial Intelligence (AAAI-98) Madison, Wisconsin. AAAI-Press.
Also IRST-Technical Report 9801-10, Trento, Italy.
Cimatti, A., Roveri, M., & Traverso, P. (1998b). Strong Planning in Non-Deterministic
Domains via Model Checking. In Proceeding of the Fourth International Conference
on Articial Intelligence Planning Systems (AIPS-98) Carnegie Mellon University,
Pittsburgh, USA. AAAI-Press.
Clarke, E. M., & Wing, J. M. (1996). Formal methods: State of the art and future directions.
ACM Computing Surveys, 28 (4), 626{643.
Clarke, E., Emerson, E., & Sistla, A. (1986). Automatic verication of nite-state concurrent systems using temporal logic specications. ACM Transactions on Programming
Languages and Systems, 8 (2), 244{263.
Coudert, O., Madre, J. C., & Touati, H. (1993). TiGeR Version 1.0 User Guide. Digital
Paris Research Lab.
Daniele, M., Traverso, P., & Vardi, M. Y. (1999). Strong Cyclic Planning Revisited. In
Biundo, S. (Ed.), Proceeding of the Fifth European Conference on Planning, Lecture
Notes in Articial Intelligence Durham, United Kingdom. Springer-Verlag.
De Giacomo, G., & Vardi, M. (1999). Automata-Theoretic Approach to Planning for Temporally Extended Goals. In Biundo, S. (Ed.), Proceeding of the Fifth European Conference on Planning, Lecture Notes in Articial Intelligence Durham, United Kingdom.
Springer-Verlag.
Ferraris, P., & Giunchiglia, E. (2000). Planning as satisability in nondeterministic domains. In Proceedings of Seventeenth National Conference on Articial Intelligence
(AAAI'00) Austin, Texas. AAAI Press.
Ghallab, M., Howe, A., Knoblock, C., McDermott, D., Ram, A., Weld, D., & Wilkins,
D. (1998). PDDL | The Planning Domain Denition Language. Tech. rep. CVC
TR-98-003/DCS TR-1165, Yale Center for Computational Vision and Control.
Giunchiglia, E. (1996). Determining Ramications in the Situation Calculus. In In Fifth
International Conference on Principles of Knowledge Representation and Reasoning
(KR'96) Cambridge, Massachusetts. Morgan Kaufmann Publishers.

Giunchiglia, E., Kartha, G. N., & Lifschitz, V. (1997). Representing action: Indeterminacy
and ramications. Articial Intelligence, 95 (2), 409{438.
336

Conformant Planning via Symbolic Model Checking
Giunchiglia, E., & Lifschitz, V. (1998). An action language based on causal explanation:
Preliminary report. In Proceedings of the 15th National Conference on Articial Intelligence (AAAI-98) and of the 10th Conference on Innovative Applications of Articial
Intelligence (IAAI-98), pp. 623{630 Menlo Park. AAAI Press.

Goldman, R. P., Musliner, D. J., & Pelican, M. J. (2000). Using Model Checking to
Plan Hard Real-Time Controllers. In Proceeding of the AIPS2k Workshop on ModelTheoretic Approaches to Planning Breckenridge, Colorado.
Goldman, R., & Boddy, M. (1996). Expressive Planning and Explicit Knowledge. In
Proceedings of the 3rd International Conference on Articial Intelligence Planning
Systems (AIPS-96), pp. 110{117. AAAI Press.

Hoey, J., St-Aubin, R., Hu, A., & Boutilier, C. (1999). Spudd: Stochastic planning using decision diagrams. In Proceedings of the Fifteenth Conference on Uncertainty in
Articial Intelligence (1999), pp. 279{288. AAAI Press.
Kautz, H., & Selman, B. (1998). BLACKBOX: A New Approach to the Application of
Theorem Proving to Problem Solving. In Working notes of the Workshop on Planning
as Combinatorial Search Pittsburgh, PA, USA.
Kautz, H. A., McAllester, D., & Selman, B. (1996). Encoding Plans in Propositional Logic.
In Proc. KR-96.
Kautz, H. A., & Selman, B. (1996). Pushing the Envelope: Planning, Propositional Logic,
and Stochastic Search. In Proc. AAAI-96.
Kushmerick, N., Hanks, S., & Weld, D. S. (1995). An algorithm for probabilistic planning.
Articial Intelligence, 76 (1-2), 239{286.
Levesque, H. J. (1996). What is planning in the presence of sensing?. In Proceedings of the
Thirteenth National Conference on Articial Intelligence and the Eighth Innovative
Applications of Articial Intelligence Conference, pp. 1139{1146 Menlo Park. AAAI

Press / MIT Press.
McDermott, D. (1987). A critique of pure reason. Computational Intelligence, 3 (3), 151{
237.
McMillan, K. (1993). Symbolic Model Checking. Kluwer Academic Publ.
Michie, D. (1974). Machine Intelligence at Edinburgh. In On Machine Intelligence, pp.
143{155. Edinburgh University Press.
Nilsson, N. (1980). Principles of Articial Intelligence. Morgan Kaufmann Publishers, Inc.,
Los Altos, CA.
Peot, M. (1998). Decision-Theoretic Planning. Ph.D. thesis, Dept. Engineering-Economic
Systems | Stanford University.
Rintanen, J. (1999a). Constructing conditional plans by a theorem-prover. Journal of
Articial Intellegence Research, 10, 323{352.
337

Cimatti & Roveri
Rintanen, J. (1999b). Improvements to the Evaluation of Quantied Boolean Formulae.
In Dean, T. (Ed.), 16th Iinternational Joint Conference on Articial Intelligence, pp.
1192{1197. Morgan Kaufmann Publishers.
Smith, D. E., & Weld, D. S. (1998). Conformant graphplan. In Proceedings of the 15th
National Conference on Articial Intelligence (AAAI-98) and of the 10th Conference
on Innovative Applications of Articial Intelligence (IAAI-98), pp. 889{896 Menlo

Park. AAAI Press.
Somenzi, F. (1997). CUDD: CU Decision Diagram package | release 2.1.2. Department of
Electrical and Computer Engineering | University of Colorado at Boulder.
Weld, D. S., Anderson, C. R., & Smith, D. E. (1998). Extending graphplan to handle
uncertainty and sensing actions. In Proceedings of the 15th National Conference on
Articial Intelligence (AAAI-98) and of the 10th Conference on Innovative Applications of Articial Intelligence (IAAI-98), pp. 897{904 Menlo Park. AAAI Press.

Yang, B., Bryant, R. E., O'Hallaron, D. R., Biere, A., Coudert, O., Janssen, G., Ranjan,
R. K., & Somenzi, F. (1998). A performance study of BDD-based model checking. In
Proceedings of the Formal Methods on Computer-Aided Design, pp. 255{289.

338

Journal of Artificial Intelligence Research 13 (2000) 1-31

Submitted 8/99; published 8/00

Space Efficiency of Propositional Knowledge Representation
Formalisms
Marco Cadoli

cadoli@dis.uniroma1.it

Dipartimento di Informatica e Sistemistica
Università di Roma “La Sapienza”
Via Salaria 113, I-00198, Roma, Italy

Francesco M. Donini

donini@dis.uniroma1.it

Politecnico di Bari
Dipartimento di di Elettrotecnica ed Elettronica
Via Orabona 4, I-70125, Bari, Italy

Paolo Liberatore
Marco Schaerf

liberato@dis.uniroma1.it
schaerf@dis.uniroma1.it

Dipartimento di Informatica e Sistemistica
Università di Roma “La Sapienza”
Via Salaria 113, I-00198, Roma, Italy

Abstract
We investigate the space efficiency of a Propositional Knowledge Representation (PKR)
formalism. Intuitively, the space efficiency of a formalism F in representing a certain piece
of knowledge α, is the size of the shortest formula of F that represents α. In this paper we
assume that knowledge is either a set of propositional interpretations (models) or a set of
propositional formulae (theorems). We provide a formal way of talking about the relative
ability of PKR formalisms to compactly represent a set of models or a set of theorems. We
introduce two new compactness measures, the corresponding classes, and show that the
relative space efficiency of a PKR formalism in representing models/theorems is directly
related to such classes. In particular, we consider formalisms for nonmonotonic reasoning,
such as circumscription and default logic, as well as belief revision operators and the stable
model semantics for logic programs with negation. One interesting result is that formalisms
with the same time complexity do not necessarily belong to the same space efficiency class.

1. Introduction
During the last years a large number of formalisms for knowledge representation (KR) have
been proposed in the literature. Such formalisms have been studied from several perspectives, including semantical properties, and computational complexity. Here we investigate
space efficiency, a property that has to do with the minimal size needed to represent a certain piece of knowledge in a given formalism. This study is motivated by the fact that the
same piece of knowledge can be represented by two formalisms using a different amount of
space. Therefore, all else remaining the same, a formalism could be preferred over another
one because it needs less space to store information.
The definition of space efficiency, however, is not simple. Indeed, a formalism may allow
several different ways to represent the same piece of knowledge. For example, let us assume
that we want to represent the piece of knowledge “today is Monday”. In Propositional

c
2000
AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Cadoli, Donini, Liberatore, & Schaerf

Logic we may decide to use a single propositional variable monday. The fact that today is
Monday can be represented by the formula monday, but also by the formula ¬¬monday,
as well as monday ∧ (rain ∨ ¬rain), because all formulae of the Propositional Logic that
are logically equivalent to monday represent exactly the same information.
In Propositional Logic, we should consider the shortest of the equivalent formulae used
to represent the information we have. The same principle can be applied to a generic
formalism: if it allows several formulae to represent the same information, then we only take
into account the shortest one. Therefore, we say that the space efficiency of a formalism F
in representing a certain piece of knowledge α is the size of the shortest formula of F that
represents α. Space efficiency —also called succinctness or compactness— of a formalism
is a measure of its ability in representing knowledge in a small amount of space.
In this paper we focus on propositional KR (PKR) formalisms. We do not give a
formal definition of which formalisms are propositional and which one are not: intuitively,
in a propositional formalism, quantifications are not allowed, and thus the formulae are
syntactically bounded to be formed only using propositional connectives, plus some other
kind of nonclassical connectives (for instance, negation in logic programs, etc.).
So far, we have not discussed what knowledge represents. A possible way to think of a
piece of knowledge is that it represents all facts that can be inferred from it. In other words,
knowing something is the same as knowing everything that can be logically implied. The
second way — which is in some cases more natural — is to think of a piece of knowledge
as the set of states of the world that we consider possible.
In a more formal way, we say that knowledge is represented either by a set of propositional interpretations (those describing states of the world we consider plausible) or a set
of formulae (those implied from what we know). Consequently, we focus on both reasoning
problems of model checking and theorem proving. The following example shows that we
can really think of knowledge in both ways.
Example 1 We want to eat in a fast food, and want to have either a sandwich or a salad
(but not both), and either water or coke (but not both).
In Propositional Logic, each choice can be represented as a model, and the following
models represent all possible choices (models are represented by writing down only the letters
mapped to true).
A = {{sandwich, water}, {sandwich, coke}, {salad, water}, {salad, coke}}
For representing the set of choices we can use formulae instead of models. In this case,
we write down a set of formulae whose models represent exactly the allowed choices, as
follows.
C = (sandwich ∨ salad) ∧ (¬sandwich ∨ ¬salad) ∧ (sandwich → ¬salad) ∧
(water ∨ coke) ∧ (¬water ∨ ¬coke) ∧ (¬coke → water)

Actually, we can get rid of redundancies, and end up with the following formula.
F = (sandwich ∨ salad) ∧ (¬sandwich ∨ ¬salad) ∧ (water ∨ coke) ∧ (¬water ∨ ¬coke)
2

Space Efficiency of Propositional Knowledge Representation Formalisms

More formally, F represents the set of models A, because for each interpretation I, I ∈ A
holds if and only if I |= F . The formula F also represents the set of formulae C, because
Cn(F ) = Cn(C), where Cn(.) is the function that gives the set of all conclusions that can
be drawn from a propositional formula.
1.1 State of the Art
A question that has been deeply investigated, and is related to space efficiency, is the
possibility of translating a formula expressed in one formalism into a formula expressed in
another formalism (under the assumption, of course, that these formulae represent the same
knowledge).
In most cases, the analysis is about the possibility of translating formulae from different
formalisms to Propositional Logic (PL). For example, Ben-Eliyahu and Dechter (1991, 1994)
proposed a translation from default logic to PL, and a translation from disjunctive logic
programs to PL, while Winslett (1989) introduced a translation from revised knowledge
bases to PL, and Gelfond, Przymusinska, and Przymusinskyi (1989) defined a translation
from circumscription to PL.
All the above translations, as well as many other ones in the literature, lead to an
exponential increase of the size of the formula, in the worst case. When the best known
translation yields a formula in the target formalism which has exponential size w.r.t. the
formula in the source formalism, a natural question arising is whether such exponential
blow up is due to the specific translation, or is intrinsic of the problem. For example,
although all proposed translations from default logic to PL lead to the exponential blow
up, we cannot conclude that all possible translations suffer from this problem: it could be
that a polynomial translation exists, but it has not discovered so far.
Some works have focussed on the question of whether this kind of exponential increase
in the size is intrinsic or not. Cadoli, Donini, and Schaerf (1996) have shown that many interesting fragments of default logic and circumscription cannot be expressed by polynomialtime fragments of PL without super-polynomially increasing the size of formulae. It has
been proved that such a super-polynomial increase of size is necessary when translating
unrestricted propositional circumscription (Cadoli, Donini, Schaerf, & Silvestri, 1997) and
most operators for belief revision into PL (Cadoli, Donini, Liberatore, & Schaerf, 1999;
Liberatore, 1995).
Gogic and collegues (1995) analyzed the relative succinctness of several PKR formalisms
in representing sets of models. Among other results, they showed that skeptical default logic
can represent sets of models more succinctly than circumscription.
Kautz, Kearns, and Selman (1995) and Khardon and Roth (1996, 1997) considered
representations of knowledge bases based on the notion of characteristic model, comparing
them to other representations, e.g., based on clauses. They showed that the representation of
knowledge bases with their characteristic models is sometimes exponentially more compact
than other ones, and that the converse is true in other cases.
However, all the above results are based on specific proofs, tailored to a specific reduction, and do not help us to define equivalence classes for the space efficiency of KR
formalisms. In a recent paper (Cadoli, Donini, Liberatore, & Schaerf, 1996b), a new complexity measure for decision problems, called compilability, has been introduced. In the

3

Cadoli, Donini, Liberatore, & Schaerf

present paper we show how this new measure can be directly used to characterize the space
efficiency of PKR formalisms. We emphasize methodological aspects, expressing in a more
general context many of the results presented before.
1.2 Goal
The notion of polynomial time complexity has a great importance in KR (as well as many
other fields of computer science), as problems that can be solved in polynomial time are to
be considered easy, from a computational point of view.
The notion of polynomial many-one reducibility also has a very intuitive meaning when
applied to KR: if there exists a polynomial many-one reduction from one formalism to
another one, then the time complexity of reasoning in the two formalisms is comparable.
This allows to say, e.g., that inference in PL is coNP-complete, i.e. it is one of the hardest
problems among those in the complexity class coNP.
As a result, we have a formal tool for comparing the difficulty of reasoning in two
formalisms. What is missing is a way for saying that one formalism is able to represent the
same information in less space.
Example 2 We consider again the lunch scenario of the previous example. We show that
we can reduce the size of the representation using circumscription instead of Propositional
Logic. In PL, the knowledge of the previous example was represented by the formula F :
F = (sandwich ∨ salad) ∧ (¬sandwich ∨ ¬salad) ∧ (water ∨ coke) ∧ (¬water ∨ ¬coke)
The set of models of this formula is A, and the models of A are exactly the minimal
models of the formula Fc defined as follows.
Fc = (sandwich ∨ salad) ∧ (water ∨ coke)
By the definition of circumscription (McCarthy, 1980) it holds that F is equivalent to
CIRC(Fc ; {sandwich, salad, water, coke}, ∅, ∅). Note that Fc is shorter than F . If this result
can be proved to hold for arbitrary sets of models, we may conclude that circumscription is
more space efficient than Propositional Logic in representing knowledge expressed as sets of
models.
Our goal is to provide a formal way of talking about the relative ability of PKR formalisms to compactly represent information, where the information is either a set of models
or a set of theorems. In particular, we would like to be able to say that a specific PKR
formalism provides “one of the most compact ways to represent models/theorems” among
the PKR formalisms of a specific class.
1.3 Results
We introduce two new compactness measures (model and theorem compactness) and the
corresponding classes (model-C and thm-C, where C is a complexity class like P, NP, coNP,
etc.). Such classes form two hierarchies that are isomorphic to the polynomial-time hierarchy
(Stockmeyer, 1976). We show that the relative space efficiency of a PKR formalism is
4

Space Efficiency of Propositional Knowledge Representation Formalisms

directly related to such classes. In particular, the ability of a PKR formalism to compactly
represent sets of models/theorems is directly related to the class of the model/theorem
hierarchy it belongs to. Problems higher up in the model/theorem hierarchy can represent
sets of models/theorems more compactly than formalisms that are in lower classes.
This classification is obtained through a general framework and not by making direct
comparisons and specific translations between the various PKR formalisms. Furthermore,
our approach also allows for a simple and intuitive notion of completeness for both model
and theorem hierarchies. This notion precisely characterizes both the relation between
formalisms at different levels, and the relations between formalisms at the same level. An
interesting result is that two PKR formalisms in which model checking or inference belong
to the same time complexity class may belong to different compactness classes. This may
suggest a criterion for choosing between two PKR formalisms in which reasoning has the
same time complexity—namely, choose the more compact one. Also, two PKR formalisms
may belong to the same theorem compactness class, yet to different model compactness
classes. This stresses the importance of clarifying whether one wants to represent models
or theorems when choosing a PKR formalism.
1.4 Outline
In the next section we introduce the notation and the assumptions that we adopt in this
work. In Section 3 (Compilability) we briefly recall some notions on non-uniform computation that are important for what follows and we recall the basic definitions of compilability
classes (Cadoli et al., 1996b). In Section 4 (Reductions) we describe the constraints we
impose on reductions, while in Section 5 (Space Efficiency) we introduce our compactness
classes. In Section 6 (Applications) we actually compare many known PKR formalisms
using our framework. Finally, in Section 7 (Related Work and Conclusions) we compare
our work with other proposals presented in the literature and draw some conclusions.

2. Notations and Assumptions
In this section we define what knowledge bases and formalisms are. Since we want to
consider formalisms that are very different both in syntax and in semantics, we need very
general definitions. Let us consider, as a base case, the formalism of propositional calculus.
Formally, we can assume that it is composed of three parts:
1. a syntax, which is used to define the well-formed formulae;
2. a proof theory, which allows for saying when a formula follows from another one; and
3. a model-theoretic semantics, which establishes when a model satisfies a formula.
The syntax is defined from a finite alphabet of propositional symbols L = {a, b, c, . . .},
possibly with subscripts, and the usual set of propositional connectives ∧, ∨, ¬.
In terms of knowledge representation, the proof theory can be seen as a way for extracting knowledge from a knowledge base. For example, if our knowledge base is a ∧ c, then the
fact a ∨ b holds. We can thus say that the formula a ∨ b is part of the knowledge represented
by a ∧ c.
5

Cadoli, Donini, Liberatore, & Schaerf

In some cases, we want knowledge bases to represent models rather than sets of formulas.
An interpretation for an alphabet of propositional variables L is a mapping from L in
{true, false}. The model-theoretic semantics of the propositional calculus is the usual way
of extending an interpretation for L to well-formed formulas.
Let us now extend such definition to generic formalisms: a formalism is composed of a
syntax, a proof theory, and a model-theoretic semantics.
We remark that each formalism has its own syntax: for instance, default logic includes
a ternary connective : for denoting default rules, while logic programming has a special
unary connective not(), and so on. A knowledge base of a formalism F is simply a wellformed formula, according to the syntax of the formalism.
Each formalism has its own proof theory as well. The proof theory of a formalism F is a
binary relation `F on the set of knowledge bases and formulae. Intuitively, F B `F φ means
that φ is a consequence of the knowledge base KB, according to the rules of the formalism
F . As a result, the set of formulae φ that are implied by a knowledge base KB is exactly
the knowledge represented by KB.
The base of a comparison between two different formalisms is a concept of equivalence,
allowing for saying that two knowledge bases (of two different formalisms) represent the
same piece of knowledge. Since the knowledge represented by a knowledge base is the set
of formulas it implies, we have to assume that the syntax of these formulae is the same
for all formalisms. Namely, we always assume that the formulae implied by a knowledge
base are well-formed formulae of the propositional calculus. In other words, each formalism
has a syntax for the knowledge bases: however, we assume that the proof theory relates
knowledge bases (formulae in the syntax of the formalism) with propositional formulae. So,
while writing KB `F φ, we assume that KB is a knowledge base in the syntax of F , while
φ is a propositional formula.
This allows for saying that two knowledge bases KB1 and KB2 , expressed in two different formalisms F1 and F2 , represent the same piece of knowledge: this is true when, for
any propositional formula φ it holds KB1 `F1 φ if and only if KB2 `F2 φ.
The model-theoreric semantics of a formalism is a relation |=F between propositional
models and knowledge bases. In this case, we assume a fixed alphabet L, thus the set of
all interpretations is common to all formalisms. When a model M and a knowledge base
KB are in the relation, we write M |=F KB. Intuitively, this means that the model M
supports the piece of knowledge represented by KB.
We remark that some formalisms, e.g. credolous default logic (Reiter, 1980), have a
proof theory, but do not have a model-theoretic semantics. It is also possible to conceive
formalisms with a model-theoretic semantics but no proof theory. When both of them are
defined, we assume that they are related by the following formula:
KB `F φ

iff

∀I . I |= KB implies I |= φ

Regarding the proof theory of formalisms, we only consider formulae that are shorter
than the knowledge base, that is, we assume that the knowledge represented by a knowlegde
base KB is the set of formulae φ such that KB `F φ, and the size of φ is at most the size
of KB. This is done for two reasons: first, formulas that are larger than KB are likely to

6

Space Efficiency of Propositional Knowledge Representation Formalisms

contain large parts that are actually independent from KB; second, we can give technicals
result in a very simple way by using the compilability classes introduced in the next section.
Assumption 1 We consider only formulae whose size is less than or equal to that of the
knowledge base.
All formalisms we consider satisfy the right-hand side distruibutivity of conjunction,
that is, KB `F φ ∧ µ if and only if KB `F φ and KB `F µ. The assumption on the size
of φ is not restrictive in this case, if φ is a CNF formula.

3. Compilability Classes
We assume the reader is familiar with basic complexity classes, such as P, NP and (uniform)
classes of the polynomial hierarchy (Stockmeyer, 1976; Garey & Johnson, 1979). Here we
just briefly introduce non-uniform classes (Johnson, 1990). In the sequel, C, C0 , etc. denote
arbitrary classes of the polynomial hierarchy.
We assume that the input instances of problems are strings built over an alphabet Σ.
We denote with  the empty string and assume that the alphabet Σ contains a special
symbol # to denote blanks. The length of a string x ∈ Σ∗ is denoted by |x|.
Definition 1 An advice A is a function that takes an integer and returns a string.
Advices are important in complexity theory because definitions and results are often
based on special Turing machines that can determine the result of an oracle “for free”, that
is, in constant time.
Definition 2 An advice-taking Turing machine is a Turing machine enhanced with the
possibility to determine A(|x|) in constant time, where x is the input string.
Of course, the fact that A(|x|) can be determined in constant time (while A can be
an intractable or even undecidable function) makes all definitions based on advice-taking
Turing machine different from the same ones based on regular Turing machine. For example,
an advice-taking Turing machine can calculate in polynomial time many functions that a
regular Turing machine cannot (including some untractable ones).
Note that the advice is only a function of the size of the input, not of the input itself.
Hence, advice-taking Turing machines are closely related to non-uniform families of circuits
(Boppana & Sipser, 1990). Clearly, if the advice were allowed to access the whole instance,
it would be able to determine the solution of any problem in constant time.
Definition 3 An advice-taking Turing machine uses polynomial advice if there exists a
polynomial p such that the advice oracle A satisfies |A(n)| ≤ p(n) for any nonnegative
integers n.
The non-uniform complexity classes are based on advice-taking Turing machines. In
this paper we consider a simplified definition, based on classes of the polynomial hierarchy.

7

Cadoli, Donini, Liberatore, & Schaerf

Definition 4 If C is a class of the polynomial hierarchy, then C/poly is the class of languages defined by Turing machines with the same time bounds as C, augmented by polynomial advice.
Any class C/poly is also known as non-uniform C, where non-uniformity is due to the
presence of the advice. Non-uniform and uniform complexity classes are related: Karp and
Lipton (1980) proved that if NP ⊆ P/poly then Πp2 = Σp2 = PH, i.e., the polynomial hierarchy collapses at the second level, while Yap (1983) generalized their results, in particular
by showing that if NP ⊆ coNP/poly then Πp3 = Σp3 = PH, i.e., the polynomial hierarchy
collapses at the third level. An inprovement of this results has been given by Köbler and
Watanabe (1998): they proved that Πkp ⊆ Σpk /poly implies that the polynomial hierarchy collapses to ZPP(Σpk+1 ). The collapse of the polynomial hierarchy is considered very
unlikely by most researchers in structural complexity.
We now summarize some definitions and results proposed to formalize the compilability
of problems (Cadoli et al., 1996b), adapting them to the context and terminology of PKR
formalisms. We remark that it is not the aim of this paper to give a formalization of
compilability of problems, or to analyze problems from this point of view. Rather, we show
how to use the compilability classes as a technical tool for proving results on the relative
efficiency of formalisms in representing knowledge in little space.
Several papers in the literature focus on the problem of reducing the complexity of
problems via a preprocessing phase (Kautz & Selman, 1992; Kautz et al., 1995; Khardon
& Roth, 1997). This motivates the introduction of a measure of complexity of problems
assuming that such preprocessing is allowed. Following the intuition that a knowledge base
is known well before questions are posed to it, we divide a reasoning problem into two parts:
one part is fixed or accessible off-line (the knowledge base), and the second one is varying, or
accessible on-line (the interpretation/formula). Compilability aims at capturing the on-line
complexity of solving a problem composed of such inputs, i.e., complexity with respect to
the second input when the first one can be preprocessed in an arbitrary way. In the next
section we show the close connection between compilability and the space efficiency of PKR
formalisms.
A function f is called poly-size if there exists a polynomial p such that for all strings
x it holds |f (x)| ≤ p(|x|). An exception to this definition is when x represents a number:
in this case, we impose |f (x)| ≤ p(x). As a result, we can say that the function A used in
advice-taking turing machine is a polysize function.
A function g is called poly-time if there exists a polynomial q such that for all x, g(x)
can be computed in time less than or equal to q(|x|). These definitions easily extend to
binary functions as usual.
We define a language of pairs S as a subset of Σ∗ × Σ∗ . This is necessary to represent
the two inputs to a PKR reasoning problem, i.e., the knowledge base (KB), and the formula
or interpretation. As an example, the problem of Inference in Propositional Logic (pli) is
defined as follows.
pli = {hx, yi | x is a set of propositional formulae (the KB), y is a formula, and x ` y}
It is well known that pli is coNP-complete, i.e., it is one of the “hardest” problems
among those belonging to coNP. Our goal is to prove that pli is the “hardest” theorem8

Space Efficiency of Propositional Knowledge Representation Formalisms

proving problem among those in coNP that can be solved by preprocessing the first input
in an arbitrary way, i.e., the KB. To this end, we introduce a new hierarchy of classes, the
non-uniform compilability classes, denoted as k;C, where C is a generic uniform complexity
class, such as P, NP, coNP, or Σp2 .
Definition 5 (k;C classes) A language of pairs S ⊆ Σ∗ × Σ∗ belongs to k;C iff there
exists a binary poly-size function f and a language of pairs S 0 ∈ C such that for all hx, yi ∈ S
it holds:
hf (x, |y|), yi ∈ S 0 iff hx, yi ∈ S
Notice that the poly-size function f takes as input both x (the KB) and the size of y
(either the formula or the interpretation). This is done for technical reason, that is, such
assumption allows obtaining results that are impossible to prove if the function f only
takes x as input (Cadoli et al., 1996b). Such assuption is useful for proving negative results,
that is, theorems of impossibility of compilation: indeed, if it is impossible to reduce the
complexity of a problem using a function that takes both x and |y| as input, then such
reduction is also impossible using a function taking x only as its argument.
Theorem 1 (Cadoli, Donini, Liberatore, & Schaerf, 1997, Theorem 6) Let C be
a class in the polynomial hierarchy and S ⊆ Σ∗ × Σ∗ . A problem S belongs to k;C if
and only if there exists a poly-size function f and a language of pairs S 0 , such that for all
hx, yi ∈ Σ∗ × Σ∗ it holds that:
1. for all y such that |y| ≤ k, hf (x, k), yi ∈ S 0 if and only if hx, yi ∈ S;
2. S 0 ∈ C.
Clearly, any problem whose time complexity is in C is also in k;C: just take f (x, |y|) = x
and S 0 = S. What is interesting is that some problem in C may belong to k;C0 with
C0 ⊂ C, e.g.,, some problems in NP are in k;P. This is true for example for some problems
in belief revision (Cadoli et al., 1999). In the rest of this paper, however, we mainly focus
on “complete” problems, defined below. A pictorial representation of the class k;C is in
Figure 1, where we assume that S 0 ∈ C.
For the problem pli no method proving that it belongs to k;P is known. In order
to show that it (probably) does not belong to k;P, we define a notion of reduction and
completeness.
Definition 6 (Non-uniform comp-reducibility) Given two problems A and B, A is
non-uniformly comp-reducible to B (denoted as A ≤nu−comp B) iff there exist two poly-size
binary functions f1 and f2 , and a polynomial-time binary function g such that for every
pair hx, yi it holds that hx, yi ∈ A if and only if hf1 (x, |y|), g(f2 (x, |y|), y)i ∈ B.
The ≤nu−comp reductions can be represented as depicted in Figure 2. Such reductions
satisfy all important properties of a reduction.
Theorem 2 (Cadoli et al., 1996b, Theorem 5) The reductions ≤nu−comp satisfy transitivity and are compatible (Johnson, 1990) with the class k;C for every complexity class C.
9

Cadoli, Donini, Liberatore, & Schaerf

f
!
!1

x

| | ! |y|
y

6

hx, yi ∈ S
-

S0

-

Figure 1: A representation of k;C.
x
|y|
||
y

- f1
- f2

6

-x

?

g
-

-y

0

0

Figure 2: The nu-comp-C reductions.

Therefore, it is possible to define the notions of hardness and completeness for k;C for
every complexity class C.
Definition 7 (k;C-completeness) Let S be a language of pairs and C a complexity class.
S is k;C-hard iff for all problems A ∈ k;C we have that A ≤nu−comp S. Moreover, S is
k;C-complete if S is in k;C and is k;C-hard.
We now have the right complexity class to completely characterize the problem pli. In
fact pli is k;coNP-complete (Cadoli et al., 1996b, Theorem 7). Furthermore, the hierarchy
formed by the compilability classes is proper if and only if the polynomial hierarchy is
proper (Cadoli et al., 1996b; Karp & Lipton, 1980; Yap, 1983) — a fact widely conjectured
to be true.
Informally, we may say that k;NP-hard problems are “not compilable to P”, as from
the above considerations we know that if there exists a preprocessing of their fixed part that
makes them on-line solvable in polynomial time, then the polynomial hierarchy collapses.
The same holds for k;coNP-hard problems. In general, a problem which is k;C-complete
for a class C can be regarded as the “toughest” problem in C, even after arbitrary preprocessing of the fixed part. On the other hand, a problem in k;C is a problem that, after
preprocessing of the fixed part, becomes a problem in C (i.e., it is “compilable to C”).
We close the section by giving another example of use of the compilability classes through
the well-known formalism of Circumscription (McCarthy, 1980). Let x be any propositional
formula. The minimal models of x are the truth assignments satisfying x having as few
positive values as possible (w.r.t. set containment). The problem we consider is: check
whether a given model is a minimal model of a propositional formula. This problem, called
Minimal Model checking (mmc), can be reformulated as the problem of model checking in
Circumscription, which is known to be co-NP-complete (Cadoli, 1992).
10

Space Efficiency of Propositional Knowledge Representation Formalisms

If we consider the knowledge base x as given off-line, and the truth assignment y as
given on-line, we obtain the following definition:
mmc = {hx, yi | y is a minimal model of x }
This problem can be shown to be k;coNP-complete (Cadoli et al., 1996b, Theorem 13).
Hence, it is very unlikely that it can be in k;P; that is, it is very unlikely that there exists
some off-line processing of the knowledge base, yielding (say) some data structure x0 , such
that given y, it can now checked in polynomial time whether y is a minimal model of x.
This, of course, unless x0 has exponential size. This observation applies also when x0 is a
knowledge base in Propositional Logic, and led to the interpretation that Circumscription
is more compact, or succint, than PL (Cadoli, Donini, & Schaerf, 1995; Gogic et al., 1995).
Our framework allows to generalize these results for all PKR formalisms, as shown in the
sequel.

4. Reductions among KR Formalisms
We now define the forms of reduction between PKR formalisms that we analyze in the
following sections. A formula can always be represented as a string over an alphabet Σ,
hence from now on we consider translations as functions transforming strings.
Let F1 and F2 be two PKR formalisms. There exists a poly-size reduction from F1 to
F2 , denoted as f : F1 7→ F2 , if f is a poly-size function such that for any given knowledge
base KB in F1 , f (KB) is a knowledge base in F2 . Clearly, reductions should be restricted
to produce a meaningful output. In particular, we now discuss reductions that preserve the
models of the original theory.
The semantic approach by Gogic and collegues (1995) is that the models of the two
knowledge bases must be exactly the same. In other words, if a knowledge base KB of the
formalism F1 is translated into a knowledge base KB 0 of the formalism F2 , then M |=F1 KB
if and only if M |=F2 KB 0 . This approach can be summarized by: a reduction between
formalisms F1 and F2 is a way to translate knowledge bases of F1 into knowledge bases of F2 ,
preserving their sets of models. While this semantics is intuitively grounded, it is very easy
to show examples in which two formalisms that we consider equally space-efficient cannot be
translated to each other. Let us consider for instance a variant of the propositional calculus
in which the syntax is that formulas must be of the form x1 ∧ F , where F is a regular
formula over the variables x2 , . . .. Clearly, this formalism is able to represent knowledge
in the same space than the propositional calculus (apart a polynomial factor). However,
according to the definition, this formalism cannot be translated to propositional calculus:
there is no knowledge base that is equivalent to KB = ¬x1 . Indeed, the only model of
KB is ∅, while any model of any consistent knowledge base of the modified propositional
calculus contains x1 .
We propose a more general approach that can deal also with functions f that change
the language of the KB. To this end, we allow for a translation gKB from models of KB to
models of f (KB). We stress that, to be as general as possible, the translation may depend
on KB — i.e., different knowledge bases may have different translations of their models.
We want this translation easy to compute, since otherwise the computation of gKB could
hide the complexity of reasoning in the formalism. However, observe that to this end, it is
11

Cadoli, Donini, Liberatore, & Schaerf

not sufficient to impose that gKB is computable in polynomial time. In fact, once KB is
fixed, its models could be trivially translated to models of f (KB) in constant time, using
a lookup table. This table would be exponentially large, though; and this is what we want
to forbid. Hence, we impose that gKB is a circuit of polynomial-size wrt KB. We still use
a functional notation gKB (M ) to denote the result of applying a model M to the circuit
gKB . A formal definition follows.
Definition 8 (Model Preservation) A poly-size reduction f : F1 7→ F2 satisfies modelpreservation if there exists a polynomial p such that, for each knowledge base KB in F1 there
exists a circuit gKB whose size is bounded by p(|KB|), and such that for every interpretation
M of the variables of KB it holds that M |=F1 KB iff gKB (M ) |=F2 f (KB).
The rationale of model-preserving reduction is that the knowledge base KB of the first
formalism F1 can be converted into a knowledge base f (KB) in the second one F2 , and this
reduction should be such that each model M in F1 can be easily translated into a model
gKB (M ) in F2 .
We require g to depend on KB, because the transformation f , in general, could take
the actual form of KB into account. This happens in the following example of a modelpreserving translation.
Example 3 We reduce a fragment of skeptical default logic (Kautz & Selman, 1991) to
circumscription with varying letters, using the transformation introduced by Etherington
(1987). Let hD, W i be a prerequisite-free normal (PFN) default theory, i.e., all defaults
are of the form γ:γ , where γ is a generic formula. Let Z be the set of letters occurring in
hD, W i. Define PD as the set of letters {aγ | γ:γ ∈ D}. The function f can be defined in
the following way: f (hD, W i) = CIRC(T ; PD ; Z), where T = W ∪ {aγ ≡ ¬γ|aγ ∈ PD },
PD are the letters to be minimized, and Z (the set of letters occurring in hD, W i) are
varying letters. We show that f is a model-preserving poly-size reduction. In fact, given
a set of PFN defaults D let gD be a function such that for each interpretation M for Z,
gD (M ) = M ∪ {aγ ∈ PD |M |= ¬γ}. Clearly, f is poly-size, gD can be realized by a circuit
whose size is polynomial in |D|, and M is a model of at least one extension of hD, W i iff
gD (M ) |= CIRC(T ; PD ; Z). The dependence of g only on D stresses the fact that, in this
case, the circuit g does not depend on the whole knowledge base hD, W i, but just on D.
Clearly, when models are preserved, theorems are preserved as well. A weaker form of
reduction is the following one, where only theorems are preserved. Also in this case we
allow theorems of KB to be translated by a “simple” circuit gKB to theorems of KB.
Definition 9 (Theorem Preservation) A poly-size reduction f : F1 7→ F2 satisfies theorempreservation if there exists a polynomial p such that, for each knowledge base KB in F1 ,
there exists a circuit gKB whose size is bounded by p(|KB|), and such that for every formula
ϕ on the variables of KB, it holds that KB `F1 ϕ iff f (KB) `F2 gKB (ϕ).
The theorem-preserving reduction has a property similar to that of the model-preserving
reduction, when the knowledge bases are used to represent theorems rather than models.
Namely, a knowledge base KB is translated into another knowledge base f (KB) which can
12

Space Efficiency of Propositional Knowledge Representation Formalisms

be used to represent the same set of theorems. More precisely, we have that each theorem
ϕ of KB is represented by a theorem gKB (ϕ) of f (KB).
Winslett (1989) has shown an example of a reduction from updated knowledge bases to
PL that is theorem-preserving but not model-preserving. Using Winslett’s reduction, one
could use the same machinery for propositional reasoning in the KB, both before and after
the update (plus the reduction). Also the reduction shown in the previous Example 3 is
theorem-preserving, this time g being the identity circuit.
We remark that our definitions of reduction are more general than those proposed by
Gogic and collegues (1995). In fact, these authors consider only a notion analogous to
Definition 8. and only for the case when g is the identity — i.e., models in the two formalisms
should be identical. By allowing a simple translation g between models Definition 8 covers
more general forms of reductions preserving models, like the one of Example 3.

5. Comparing the Space Efficiency of PKR Formalisms
In this section we show how to use the compilability classes defined in Section 3 to compare
the succinctness of PKR formalisms.
Let F1 and F2 be two formalisms representing sets of models. We prove that any
knowledge base α in F1 can be reduced, via a poly-size reduction, to a knowledge base β
in F2 satisfying model-preservation if and only if the compilability class of the problem of
model checking (first input: KB, second input: interpretation) in F2 is higher than or equal
to the compilability class of the problem of model checking in F1 .
Similarly, we prove that theorem-preserving poly-size reductions exist if and only if the
compilability class of the problem of inference (first input: KB, second input: formula, cf.
definition of the problem pli) in F1 is higher than or equal to the compilability class of the
problem of inference in F2 .
In order to simplify the presentation and proof of the theorems we introduce some
definitions.
Definition 10 (Model hardness/completeness) Let F be a PKR formalism and C be
a complexity class. If the problem of model checking for F belongs to the compilability class
k;C, where the model is the varying part of the instances, we say that F is in model-C.
Similarly, if model checking is k;C-complete (hard), we say that F is model-C-complete
(hard).
Definition 11 (Theorem hardness/completeness) Let F be a PKR formalism and
C be a complexity class. If the problem of inference for the formalism F belongs to the
compilability class k;C, whenever the formula is the varying part of the instance, we say
that F is in thm-C. Similarly, if inference is k;C-complete (hard), we say that F is thmC-complete (hard).
These definitions implicitly define two hierarchies, which parallel the polynomial hierarchy (Stockmeyer, 1976): the model hierarchy (model-P,model-NP,model-Σp2 ,etc.) and the
theorem hierarchy (thm-P,thm-NP,thm-Σ2p ,etc.). The higher a formalism is in the model
hierarchy, the more its efficiency in representing models is — and analogously for theorems.
As an example (Cadoli et al., 1996, Thm. 6), we characterize model and theorem classes of
Propositional Logic.
13

Cadoli, Donini, Liberatore, & Schaerf

Theorem 3 PL is in model-P and it is thm-coNP-complete.
We can now formally establish the connection between succinctness of representations
and compilability classes. In the following theorems, the complexity classes C, C1 , C2 belong
to the polynomial hierarchy (Stockmeyer, 1976). In Theorems 5 and 7 we assume that the
polynomial hierarchy does not collapse.
We start by showing that the existence of model-preserving reductions from a formalism
to another one can be easily obtained if their levels in the model hierarchy satisfy a simple
condition.
Theorem 4 Let F1 and F2 be two PKR formalisms. If F1 is in model-C and F2 is modelC-hard, then there exists a poly-size reduction f : F1 7→ F2 satisfying model preservation.
Proof. Recall that since F1 is in model-C, model checking in F1 is in k;C, and since F2 is
model-C-hard, model checking in F1 is non-uniformly comp-reducible to model checking in
F2 . That is, (adapting Def. 6) there exist two poly-size binary functions f1 and f2 , and a
polynomial-time binary function g such that for every pair hKB, M i it holds that
M |=F1 KB if and only if g(f2 (KB, |M |), M ) |=F2 f1 (KB, |M |)
(note that g is the poly-time function appearing in Def. 6, different from gKB which is the
poly-size circuit appearing in Def. 8).
Now observe that |M | can be computed from KB by simply counting the letters appearing in KB; let f3 be such a counting function, i.e., |M | = f3 (KB). Clearly, f3 is poly-size.
Define the reduction f as f (KB) = f1 (KB, f3 (KB)). Since poly-size functions are closed
under composition, f is poly-size. Now we show that f is a model-preserving reduction. By
Definition 8, we need to prove that there exists a polynomial p such that for each knowledge
base KB in F1 , there exists a poly-size circuit gKB such that for every interpretation M of
the variables of KB it holds that M |=F1 KB iff gKB (M ) |=F2 f (KB).
We proceed as follows: Given a KB in F1 , we compute z = f2 (KB, |M |) = f2 (KB, f3 (KB)).
Since f2 and f3 are poly-size, z has size polynomial with respect to |KB|. Define the circuit
gKB (M ) as the one computing g(z, M ) = g(f2 (KB, f3 (KB)), M ). Since g is a poly-time
function over both inputs, and z is poly-size in KB, there exists a representation of g(z, M )
as a circuit gKB whose size is polynomial wrt KB. From this construction, M |=F1 KB iff
gKB (M ) |=F2 f (KB). Hence, the thesis follows.
The following theorem, instead, gives a simple method to prove that there is no modelpreserving reduction from one formalism to another one.

Theorem 5 Let F1 and F2 be two PKR formalisms. If the polynomial hierarchy does not
collapse, F1 is model-C1 -hard, F2 is in model-C2 , and C2 ⊂ C1 , then there is no poly-size
reduction f : F1 7→ F2 satisfying model preservation.
Proof. We show that if such a reduction exists, then C1 /poly ⊆ C2 /poly which implies that
the polynomial hierarchy collapses at some level (Yap, 1983). Let A be a complete problem
for class C1 — e.g., if C1 is Σp3 then A may be validity of ∃∀∃-quantified boolean formulae
(Stockmeyer, 1976). Define the problem A as follows.
A = {hx, yi | x =  (the empty string) and y ∈ A}
14

Space Efficiency of Propositional Knowledge Representation Formalisms

We already proved (Cadoli et al., 1996b, Thm. 6) that A is k;C1 -complete. Since model
checking in F1 is model-C1 -hard, A is non-uniformly comp-reducible to model checking in
F1 . That is, (adapting Def. 6) there exist two poly-size binary functions f1 and f2 , and
a polynomial-time binary function g such that for every pair h, yi, it holds h, yi ∈ A if
and only if g(f2 (, |y|), y) |=F1 f1 (, |y|). Let |y| = n. Clearly, the knowledge base f1 (, |y|)
depends only on n, i.e., there is exactly one knowledge base for each integer. Call it KBn .
Moreover, f2 (, |y|) = f2 (, n) also depends on n only: call it On (for Oracle). Observe that
both KBn and On have polynomial size with respect to n.
If there exists a poly-size reduction f : F1 7→ F2 satisfying model preservation, then given
the knowledge base KBn there exists a poly-size circuit hn such that g(On , y) |=F1 KBn if
and only if hn (g(On , y)) |=F2 f (KBn ).
Therefore, the k;C1 -complete problem A can be non-uniformly reduced to a problem
in k;C2 as follows: Given y, from its size |y| = n one obtains (with a preprocessing)
f (KBn ) and On . Then one checks whether the interpretation hn (g(On , y)) (computable in
polynomial time given n, y and On ) is a model in F2 for f (KBn ). From the fact that model
checking in F2 is in k;C2 , we have that k;C1 ⊆ k;C2 . We proved in a previous paper
that such result implies that C1 /poly ⊆ C2 /poly (Cadoli et al., 1996b, Thm. 9), which in
turns implies that the polynomial hierarchy collapses (Yap, 1983).
The above theorems show that the hierarchy of classes model-C exactly characterizes
the space efficiency of a formalism in representing sets of models. In fact, two formalisms
at the same level in the model hierarchy can be reduced into each other via a poly-size
reduction (Theorem 4), while there is no poly-size reduction from a formalism (F1 ) higher
up in the hierarchy into one (F2 ) in a lower class (Theorem 5). In the latter case we say
that F1 is more space-efficient than F2 .
Analogous results (with similar proofs) hold for poly-size reductions preserving theorems.
Namely, the next theorem shows how to infer the existence of theorem-preserving reductions,
while the other one gives a way to prove that there is no theorem-preserving reduction from
one formalism to another one.
Theorem 6 Let F1 and F2 be two PKR formalisms. If F1 is in thm-C and F2 is thm-Chard, then there exists a poly-size reduction f : F1 7→ F2 satisfying theorem preservation.
Proof. Recall that since F1 is in thm-C, inference in F1 is in k;C, and since F2 is thm-Chard, inference in F1 is non-uniformly comp-reducible to inference in F2 . That is, (adapting
Def. 6) there exist two poly-size binary functions f1 and f2 , and a polynomial-time binary
function g1 such that for every pair hKB, ϕi it holds that
KB `F1 ϕ if and only if f1 (KB, |ϕ|) `F2 g(f2 (KB, |ϕ|), ϕ)
(here we distinguish the poly-time function g appearing in Def. 6 and the poly-size circuit
gKB appearing in Def. 9).
Using Theorem 1 we can replace |ϕ| with an upper bound in the above formula. From
Assumption 1, we know that the size of ϕ is less than or equal to the size of KB; therefore
we replace |ϕ| with |KB|. The above formula now becomes
KB `F1 ϕ if and only if f1 (KB, |KB|) `F2 g(f2 (KB, |KB|), ϕ)
15

Cadoli, Donini, Liberatore, & Schaerf

Define the reduction f as f (KB) = f1 (KB, f3 (KB)), where f3 is the poly-size function
that computes the size of its input. Since poly-size functions are closed under composition,
f is poly-size.
Now, we show that f is a theorem-preserving reduction, i.e.,f satisfies Def. 9. This
amounts to proving that for each knowledge base KB in F1 there exists a circuit gKB ,
whose size is poynomial wrt KB, such that for every formula ϕ on the variables of KB it
holds that KB `F1 ϕ iff f (KB) `F2 gKB (ϕ).
We proceed as in the proof of Theorem 4: Given a KB in F1 , let z = f2 (KB, f3 (KB)).
Since f2 and f3 are poly-size, z has polynomial size with respect to |KB|. Define gKB (ϕ) =
g(z, ϕ) = g(f2 (KB, f3 (KB)), ϕ). Clearly, gKB can be represented by a circuit of polynomial
size wrt KB. From this construction, KB `F1 ϕ iff f (KB) `F2 gKB (ϕ). Hence, the claim
follows.
Theorem 7 Let F1 and F2 be two PKR formalisms. If the polynomial hierarchy does not
collapse, F1 is thm-C1 -hard, F2 is in thm-C2 , and C2 ⊂ C1 , then there is no poly-size
reduction f : F1 7→ F2 satisfying theorem preservation.
Proof. We show that if such a reduction exists, then C1 /poly ⊆ C2 /poly and the polynomial
hierarchy collapses at some level (Yap, 1983). Let A be a complete problem for class C1 .
Define the problem A as in the proof of Theorem 5: this problem is k;C1 -complete (Cadoli
et al., 1996b, Thm. 6). Since inference in F1 is thm-C1 -hard, A is non-uniformly compreducible to inference in F1 . That is, (adapting Def. 6) there exist two poly-size binary
functions f1 and f2 , and a polynomial-time binary function g such that for every pair h, yi,
h, yi ∈ A if and only if f1 (, |y|) `F1 g(f2 (, |y|), y). Let |y| = n. Clearly, the knowledge
base f1 (, |y|) depends just on n, i.e., there is one knowledge base for each integer. Call
it KBn . Moreover, also f2 (, |y|) = f2 (, n) depends just on n: call it On (for Oracle).
Observe that both KBn and On have polynomial size with respect to n.
If there exists a poly-size reduction f : F1 7→ F2 satisfying theorem preservation, then
given the knowledge base KBn there exists a poly-time function hn such that KBn `F1
g(On , y) if and only if f (KBn ) `F2 hn (g(On , y)).
Therefore, the k;C1 -complete problem A can be non-uniformly reduced to a problem in
k;C2 as follows: Given y, from its size |y| = n one obtains (with an arbitrary preprocessing)
f (KBn ) and On . Then one checks whether the formula hn (g(On , y)) (computable in polytime given y and On ) is a theorem in F2 of f (KBn ). From the fact that inference in F2 is
in k;C2 , we have that k;C1 ⊆ k;C2 . It follows that C1 /poly ⊆ C2 /poly (Cadoli et al.,
1996b, Thm. 9), which implies that the polynomial hierarchy collapses (Yap, 1983).
Theorems 4-7 show that compilability classes characterize very precisely the relative
capability of PKR formalisms to represent sets of models or sets of theorems. For example,
as a consequence of Theorems 3 and 7 there is no poly-size reduction from PL to the
syntactic restriction of PL allowing only Horn clauses that preserves the theorems, unless
the polynomial hierarchy collapses. Kautz and Selman (1992) proved non-existence of such
a reduction for a problem strictly related to pli using a specific proof.

16

Space Efficiency of Propositional Knowledge Representation Formalisms

6. Applications
This section is devoted to the application of the theorems presented in the previous section.
Using Theorems 4-7 and results previously known from the literature, we are able to asses
model- and theorem-compactness of some PKR formalisms.
We assume that definitions of Propositional Logic, default logic (Reiter, 1980), and
circumscription (McCarthy, 1980) are known. Definitions of WIDTIO, SBR, GCWA, and
stable model semantics are in the appropriate subsections.
In the following proofs we refer to the problem ∃∀3QBF, that is, the problem of verifying
whether a quantified Boolean formula ∃X∀Y.¬F is valid, where X and Y are disjoint sets of
variables, and F is a set of clauses on the alphabet X ∪ Y , each composed of three literals.
As an example, a simple formula belonging to this class is: ∃x1 , x2 ∀y1 , y2 ¬((x1 ∨ y2 ) ∧
(¬x1 ∨ ¬x2 ∨ ¬y1 ) ∧ (¬y1 ∨ ¬x2 ∨ ¬y2 ) ∧ (¬x1 ∨ ¬x2 )).
The problem of deciding validity of a ∃∀3QBF is complete for the class Σp2 . As a consequence, the corresponding problem ∗∃∀3QBF, that is deciding whether an input composed
of any string (∗) as the fixed part and a quantified Boolean formula ∃X∀Y.¬F as the varying
one, is complete for the class k;Σ2p (Liberatore, 1998). Notice that in most of the hardness
proofs we show in the sequel we use problems without any meaningful fixed part.
6.1 Stable Model Semantics
Stable model semantics (SM) was introduced by Gelfond and Lifschitz (1988) as a tool to
provide a semantics for logic programs with negation. their original proposal is now one
of the standard semantics for logic programs. We now recall the definition of propositional
stable model.
Let P be a propositional, general logic program. Let M be a subset (i.e., an interpretation) of the atoms of P . Let P M be the program obtained from P in the following way: if a
clause C of P contains in its body a negated atom ¬A such that A ∈ M then C is deleted;
if a body of a clause contains a negated atom ¬A such that A 6∈ M then ¬A is deleted from
the body of the clause. If M is a least Herbrand model of P M then M is a stable model of
P.
For the formalism sm, we consider the program P as the knowledge base. We write
P |=sm Q to denote that query Q is implied by a logic program P under Stable Model
semantics.
In order to prove our result, we need to define the kernel of a graph.
Definition 12 (Kernel) Let G = (V, E) be a graph. A kernel of G is a set K ⊆ V such
that, denoting H = V − K, it holds:
1. H is a vertex cover of G
2. for all j ∈ H, there exists an i ∈ K such that (i, j) ∈ E.
We can now state the theorem on the compilability class of inference in the stable model
semantics, and the corresponding theorem compactness class.
Theorem 8 The problem of inference for the Stable Model semantics is k;coNP-complete,
thus Stable Model Semantics is thm-coNPcomplete.
17

Cadoli, Donini, Liberatore, & Schaerf

Proof. Membership in the class follows from the fact that the problem is coNP-complete
(Marek & Truszczyński, 1991). For the hardness, we adapt the proof of Marek and
Truszczyński (1991) showing that deciding whether a query is true in all stable models
is coNP-hard.
Let kernel be the language {, G} such that G is a graph with at least one kernel.
Let |G| = n, and observe that G cannot have more vertices than its size n.
We show that for each n, there exists a logic program Pn such that for every graph G
with at most n vertices, there exists a query QG such that G has a kernel iff Pn 6|=sm QG .
Let the alphabet of Pn be composed by the following 2n2 + n propositional letters:
{ai |i ∈ {1..n} } ∪ {rij , sij |i, j ∈ {1..n} }.
The program Pn is defined as:
aj
sij
rij

:−
:−
:−



¬ai , rij 

¬rij
for i, j ∈ {1..n}


¬sij

Given a graph G = (V, E), the query QG is defined as
QG = (

_

(i,j)∈E

¬rij ) ∨ (

_

rij )

(i,j)6∈E

The reduction from kernel to sm is defined as: f1 (x, n) = Pn , i.e., f1 depends only on
its second argument, f2 (x, n) = , i.e., f2 is a constant function, and g = Qy , i.e., given a
graph G, the circuit g computes the query QG .
As a result, this is a k; reduction. We now show that this reduction is correct, i.e.,
h, Gi ∈ kernel (G has a kernel) iff Pn 6|=SM QG .
If-part. Suppose Pn 6|=SM QG . Then, there exists a stable model M of Pn such that
M |= ¬QG . Observe that ¬QG is equivalent to the conjunction of all rij such that (i, j) ∈ E,
and all ¬rij such that (i, j) 6∈ E. Simplifying Pn with ¬QG we obtain the clauses:
aj :− ¬ai , for (i, j) ∈ E

(1)

Observe that M contains all sij such that (i, j) 6∈ E, and in order to be stable, — i.e., to
support atoms rij such that (i, j) ∈ E — M contains no atom sij such that (i, j) ∈ E.
Let H = {j|aj ∈ M }, K = {i|ai 6∈ M }. Now H is a vertex cover of G, since for each
edge (i, j) ∈ E, M should satisfy the corresponding clause (1) aj : − ¬ai , hence either
ai ∈ M , or aj ∈ M . Moreover, for each j in H, the atom aj is in M , and since M is a
stable model, there exists a clause aj :− ¬ai such that ai 6∈ M , that is, i ∈ K. Therefore,
K is a kernel of G.
Only-if part. Suppose G = (V, E) has a kernel K, and let H = V − K. Let M be the
interpretation
M = {rij |(i, j) ∈ E} ∪ {sij |(i, j) 6∈ E} ∪ {aj |j ∈ H}

Obviously, M 6|= QG . We now show that M is a stable model of Pn , i.e., M is a least
Herbrand model of PnM . In fact, PnM contains the following clauses:
sij
rij
aj

:− rij

for (i, j) 6∈ E

(2)

for i ∈ K

(4)

for (i, j) ∈ E

18

(3)

Space Efficiency of Propositional Knowledge Representation Formalisms

Clauses in the last line are obtained from clauses in Pn of the form aj :− ¬ai , rij , where the
clauses such that i ∈ H (hence ai ∈ M ) are deleted, while in the other clauses the negated
atom ¬ai is deleted, since i ∈ K, hence ai 6∈ M . Now for each aj ∈ M , the vertex j is in H,
hence there is an edge (i, j) ∈ E, and i ∈ K. Hence clauses (4) and (3) are in PnM , hence in
the least Herbrand model of PnM there are exactly all aj such that j ∈ H.
6.2 Minimal Model Reasoning
One of the most successful form of non-monotonic reasoning is based on the selection of
minimal models. Among the various formalisms based on minimal model semantics we consider here Circumscription (McCarthy, 1980) and the Generalized Closed World Assumption
(GCWA) (Minker, 1982), which is a formalism to represent knowledge in a closed world.
We assume that the reader is familiar with Circumscription, we briefly present the
definition of GCWA. The model semantics for GCWA is defined as (a is a letter):
M |=GCW A KB iff M |= KB∪{¬a | for any positive clause γ, if KB 6` γ then KB 6` γ ∨ a}
We can now present the results for these two formalisms.
Theorem 9 The problem of model checking for Circumscription is k;coNP-complete, thus
Circumscription is model-coNP-complete.
This result is a trivial corollary of a theorem already proved (Cadoli et al., 1997, Theorem 6). In fact, that proof implicitly shows that model checking for circumscription is
k;coNP-complete.
Theorem 10 The problem of model checking for GCWA is in k;P, thus GCWA is in
model-P.
Proof. As already pointed out (Cadoli et al., 1997), it is possible to rewrite GCW A(T )
into a propositional formula F such that, for any given model M , M |= GCW A(T ) if and
only if M |= F . Moreover, the size of F is polynomially bounded by the size of T . As a
consequence, the model compactness for GCWA is in the same class of PL. By Theorem 3
the thesis follows.
Theorem 11 The problem of inference for Circumscription is k;Πp2 -complete, thus Circumscription is thm-Πp2 -complete.
This result is a trivial corollary of a theorem published in a previous paper (Cadoli
et al., 1997, Theorem 7) which implicitly shows that inference for circumscription is k;Π2p complete.
Theorem 12 The problem of inference for GCWA is k;coNP-complete, thus GCWA is
thm-coNP-complete.
Proof. As already pointed out in the proof of Theorem 10, it is possible to rewrite
GCW A(T ) into a formula F that is equivalent to it. As a consequence, a formula α is
a theorem of GCW A(T ) if and only if it is a theorem of F . Thus, GCWA has at most the
theorem compexity of PL. Since GCWA is a generalization of PL, it follows that GCWA is
in the same theorem compactness class of PL. Hence, GCWA is thm-coNP-complete.
19

Cadoli, Donini, Liberatore, & Schaerf

6.3 Default Logic
In this subsection we present the results for default logic, in its two variants (credulous
and skeptical). For more details on these two main variants of default logic, we refer the
reader to the paper by Kautz and Selman (1991). Notice that model-compactness is only
applicable to skeptical default logic.
Theorem 13 The problem of model checking for skeptical default logic is k;Σp2 complete,
thus skeptical default logic is model-Σp2 complete.
Proof. The proof of membership is straightforward: since model checking for skeptical
default logic is in Σp2 (Liberatore & Schaerf, 1998), it follows that it is also in k;Σp2 .
The proof of k;Σp2 -hardness is similar to the proof of Σp2 -hardness (Liberatore & Schaerf,
1998). The reduction is from the problem ∗∃∀3QBF. Let hα, βi be an instance of ∗∃∀3QBF,
where β = ∃X∀Y.¬F represents a valid ∃∀3QBF formula, and α is any string.
Let n be the size of the formula F . This implies that the variables in the formula are at
most n. Let Γ = {γ1 , . . . , γk } be the set of all the clauses of three literals over this alphabet.
The number of clauses of three literals over an alphabet of n variables is less than O(n3 ),
thus bounded by a polynomial in n.
We prove that ∃X∀Y.¬F is valid if and only if M is a model of some extension of hW, Di,
where
= ∅

W

D =

[  : ci

γi ∈Γ

ci

: ¬ci
,
¬ci

= {ci | γi ∈ F }

M



∪

[  : w ∧ (w → xi ) : w ∧ (w → ¬xi ) 

,

w → xi

xi ∈X

w → ¬xi

∪

(

:w∧

V

γi ∈Γ ci

w

→ γi

The set {ci | 1 ≤ i ≤ k} is a set of new variables, one-to-one with the elements of Γ.
Note that W and D only depends on the size n of F , while M depends on F . As a result,
this is a ≤nu−comp reduction.
We now prove that the formula is valid if and only if M is a model of some extension
of the default theory hW, Di. This is similar to an already published proof (Liberatore &
Schaerf, 1998). Consider an evaluation C1 of the variables {ci } and an evaluation X1 of the
variables X. Let D0 be the following set of defaults.
0

D =

[  : ci  [  : ¬ci 

ci ∈C1

ci

ci 6∈C1

¬ci

∪

[  : w ∧ (w → xi ) 

w → xi

xi ∈X1

[

xi ¬∈X1



: w ∧ (w → ¬xi )
w → ¬xi



This set of defaults has been chosen so that the set R of its consequences corresponds
to the sets C1 and X1 . Namely, we have:
ci ∈ C1 iff R |= ci

ci 6∈ C1 iff R |= ¬ci

xi ∈ X1 iff R |= w → xi

xi 6∈ X1 iff R |= w → ¬xi
20

)

Space Efficiency of Propositional Knowledge Representation Formalisms

Now, we prove that the consequences of this set of defaults are an extension of the
default theory if and only if the QBF formula is valid. Since all defaults are semi-normal,
we have to prove that:
1. the set of consequences of D0 is consistent; and
2. no other default is applicable, that is, there is no other default whose precondition is
consistent with R.
Consistency of R follows by construction: assigning ci to true for each ci ∈ C1 , etc., we
obtain a model of R.
:¬ci
We have then to prove that no other default is applicable. If ci ∈ C1 , the default ¬c
i
:ci
is not applicable, and vice versa, if ¬ci ∈ C1 , then ci is not applicable. Moreover, none

i)
, is applicable if xi 6∈ X1 , because in this case w → ¬xi ∈ R, thus
of the defaults :w∧(w→x
w→xi
¬w would follow (while w is a justification of the default). A similar statement holds for
:w∧(w→¬xi )
if xi ∈ X1 .
w→¬xi

V

:w∧

ci →γi

γi ∈Γ
As a result, the only applicable default may be the last one,
(recall that
w
F is negated). This default is applicable if and only if, for the given evaluation of the ci ’s
and xi ’s, the set of clauses is satisfiable. This amount to say: “there is an extension in
which the last default is not applicable if and only if the QBF formula is valid”. Now,
if the last default is applicable, then M is not a model of the extension because w is the
consequence of the last default while w 6|= M . The converse also holds: if the last default is
not applicable then M is a model of the default theory.
As a result, the QBF is valid if and only if M is a model of the given default theory.

Theorem 14 The inference problem for skeptical default logic is k;Πp2 complete, thus skeptical default logic is thm-Π2p complete.
Proof. Since inference in skeptical default logic is in Πp2 , it is also in k;Πp2 . k;Πp2 -hardness
comes from a simple reduction from circumscription. Indeed, the circumscription of a
formula T is equivalent to the conjunction of the extensions of the default theory hT, Di,
where (Etherington, 1987):
D=

[  : ¬xi 

¬xi

As a result, CIRC(T ) |= Q if and only if Q is implied by hT, Di under skeptical semantics. Since hT, Di only depends on T (and not on Q) this is a ≤nu−comp reduction. Since
inference for circumscription is k;Π2p -complete (see Theorem 11), it follows that skeptical
default logic is k;Π2p -hard.
Theorem 15 The inference problem for credulous default logic is k;Σp2 complete, thus
credulous default logic is thm-Σp2 complete.

21

Cadoli, Donini, Liberatore, & Schaerf

Proof. The proof is very similar to the proof for model checking of skeptical default logic.
Indeed, both problems are k;Σp2 complete. Since the problem is in Σp2 , as proved by Gottlob
(1992), it is also in k;Σp2 . Thus, what we have to prove is that is hard for that class.
We prove that the ∗∃∀3QBF problem can be reduced to the problem of verifying whether
a formula is implied by some extensions of a default theory (that is, inference in credulous
default logic).
Namely, a formula ∀X∃Y.¬F is valid if and only if Q is derived by some extension of
the default theory hD, W i, where W and D are defined as follows (Γ is the set of all the
clauses of three literals over the alphabet of F , and C is a set of new variables, one-to-one
with Γ).
W

= ∅

D =

[  : ci

ci

ci ∈C

Q =

^

γi ∈F

ci ∧

: ¬ci
,
¬ci

^

γi 6∈F



∪

[  : xi

xi ∈X

xi

: ¬xi
,
¬xi



∪

(

V

¬(

ci ∈C ci

w

→ γi ) :

)

¬ci ∧ w

Informally, the proof goes as follows: for each truth evaluation of the variables in C
and X there is a set of defaults which are both justified and consistent. A simple necessary
and sufficient condition for the consequences of this set of defaults to be an extension is the
following. If, in this evaluation, the formula
¬

^

γi

ci =true

is valid, then the last default is applicable, thus the extension also contains w. The converse
also holds: if the formula is not valid in the evaluation, then the variable w is not in the
extension.
As a result, there exists an extension in which Q holds if and only if there exists an
extension in which each ci is true if and only if γi ∈ F , and such that w also holds. When
the variables ci have the given value, the above formula is equivalent to ¬F . As a result,
such an extension exists if and only if there exists a truth evaluation of the variables X in
which ¬F is valid.
6.4 Belief Revision
Many formalisms for belief revision have been proposed in the literature, here we focus on
two of them: WIDTIO (When In Doubt Throw it Out) and SBR (Skeptical Belief Revision).
Let K be a set of propositional formulae, representing an agent’s knowledge about the world.
When a new formula A is added to K, the problem of the possible inconsistency between K
and A arises. The first step is to define the set of sets of formulae W (K, A) in the following
way:
W (K, A) = {K 0 K 0 is a maximal consistent subset of K ∪ {A} containing A }
22

Space Efficiency of Propositional Knowledge Representation Formalisms

Any set of formulae K 0 ∈ W (K, A) is a maximal choice of formulae in K that are
consistent with A and, therefore, we may retain when incorporating A. The definition of
this set leads to two different revision operators: SBR and WIDTIO.
SBR Skeptical Belief Revision (Fagin, Ullman, & Vardi, 1983; Ginsberg, 1986). The revised
.
theory is defined as a set of theories: K ∗ A = {K 0 | K 0 ∈ W (K, A)}. Inference in the
revised theory is defined as inference in each of the theories:
K ∗ A `SBR Q iff

for all K 0 ∈ W (K, A) , we have that K 0 ` Q

The model semantics is defined as:
M |=SBR K ∗ A iff

there exists a K 0 ∈ W (K, A) such that M |= K 0

WIDTIO When In Doubt Throw It Out (Winslett, 1990). A simpler (but somewhat
drastical) approach is the so-called WIDTIO, where we retain only the formulae of K
that belong to all sets of W (K, A). Thus, inference is defined as:
K ∗ A `W IDT IO Q iff

T

W (K, A) ` Q

The model semantics of this formalism is defined as:
M |=W IDT IO K ∗ A

iff

M |=

\

W (K, A)

The results on model compactness have been shown by Liberatore and Schaerf (2000).
Here we recall them.
Theorem 16 (Liberatore & Schaerf, 2000, Theorem 11) The problem of model checking for WIDTIO is in k;P, thus WIDTIO is in model-P.
Theorem 17 (Liberatore & Schaerf, 2000, Theorem 5) The problem of model checking for Skeptical Belief Revision is k;coNP-complete, thus Skeptical Belief Revision is
model-coNP-complete.
The results on theorem compactness are quite simple and we provide here the proofs.
Theorem 18 The problem of inference for WIDTIO is k;coNP-complete, thus WIDTIO
is thm-coNP-complete.
Proof. Membership in the class thm-coNP immediately follows from the definition. In fact,
we can rewrite K ∗ A into a propositional formula by computing the set W (K, A) and then
constructing their intersection. By construction their intersection has size less than or equal
to the size of K ∪ A. As a consequence, after preprocessing, deciding whether a formula Q
follows from K ∗ A is a problem in coNP. Hardness follows from the obvious fact that PL
can be reduced to WIDTIO and PL is thm-coNP-complete (see Theorem 3).
Theorem 19 The problem of inference for Skeptical Belief Revision is k;Πp2 -complete,
thus Skeptical Belief Revision is thm-Πp2 -complete.
23

Cadoli, Donini, Liberatore, & Schaerf

Propositional
Logic
WIDTIO
Skeptical
Belief Revision
Circumscription
GCWA

Skeptical
Default Reasoning
Credulous
Default Reasoning
Stable Model
Semantics

Time Complexity
P
–
Σp2 -complete
(Liberatore & Schaerf, 1996)
coNP-complete
(Liberatore & Schaerf, 1996)
coNP-complete
(Cadoli, 1992)
coNP-hard,
in ∆p2 [log n]
(Eiter & Gottlob, 1993)
Σp2 -complete
(Liberatore & Schaerf, 1998)
N/A

Space Efficiency
model-P
–
model-P
Th. 16
model-coNP-complete
Th. 17
model-coNP-complete
Th. 9
model-P
Th. 10

P
–

model-P
–

model-Σp2 -complete
Th. 13
N/A

Table 1: Complexity of model checking and Space Efficiency of Model Representations
Proof. Membership follows from the complexity results of Eiter and Gottlob (1992), where
they show that deciding whether K ∗ A `SBR Q is a Πp2 -complete problem. Hardness
follows easily from Theorem 17. In fact, M |=SBR K ∗ A iff K ∗ A 6`SBR ¬f orm(M ), where
f orm(M ) is the formula that represents the model M . As a consequence, model checking
can be reduced to the complement of inference. Thus inference is k;Πp2 -complete.
6.5 Discussion
Tables 1 and 2 summarize the results on space efficiency of PKR formalisms and where they
were proved (a dash “–” denotes a folklore result).
First of all, notice that space efficiency is not always related to time complexity. As an
example, we compare in detail WIDTIO and circumscription. From the table it follows that
model checking is harder for WIDTIO than for circumscription, and that inference has the
same complexity in both cases. Nevertheless, since circumscription is thm-Σp2 -complete and
WIDTIO is thm-coNP-complete (and thus in thm-Σp2 ), there exists a poly-size reduction
from WIDTIO to circumscription satisfying theorem preservation. The converse does not
hold: since circumscription is thm-Σ2p -complete and WIDTIO is thm-coNP, unless the Polynomial Hierarchy does not collapse there is no theorem-preserving poly-size reduction from
the former formalism to the latter. Hence, circumscription is a more compact formalism
than WIDTIO to represent theorems. Analogous considerations can be done for models.
Intuitively, this is due to the fact that for WIDTIO both model checking and inference
require a lot of work on the revised knowledge base alone—computing the intersection of

24

Space Efficiency of Propositional Knowledge Representation Formalisms

Propositional
Logic
WIDTIO
Skeptical
Belief Revision
Circumscription
GCWA
Skeptical
Default Reasoning
Credulous
Default Reasoning
Stable Model
Semantics

Time Complexity
coNP-complete
(Cook, 1971)
Πp2 -complete
(Eiter & Gottlob, 1992) & (Nebel, 1998)
Πp2 -complete
(Eiter & Gottlob, 1992)
Πp2 -complete
(Eiter & Gottlob, 1993)
Πp2 -complete
(Eiter & Gottlob, 1993) & (Nebel, 1998)
Πp2 -complete
(Gottlob, 1992)
Σp2 -complete
(Gottlob, 1992)
coNP-complete
(Marek & Truszczyński, 1991)

Space Efficiency
thm-coNP-complete
(Cadoli et al., 1996)
thm-coNP-complete
Th. 18
thm-Πp2 -complete
Th. 19
thm-Πp2 -complete
Th. 11
thm-coNP-complete
Th. 12
thm-Πp2 -complete
Th. 14
thm-Σp2 -complete
Th. 15
thm-coNP-complete
Th. 8

Table 2: Complexity of inference and Space Efficiency of Theorem Representations
all elements of W (K, A). Once this is done, one is left with model checking and inference in
PL. Hence, WIDTIO has the same space efficiency as PL, which is below circumscription.
Figures 3 and 4 contain the same information of Tables 1 and 2, but highlight existing reductions. Each figure contains two diagrams, the left one showing the existence of
polynomial-time reductions among formalisms, the right one showing the existence of polysize reductions. An arrow from a formalism to another denotes that the former can be
reduced to the latter one. We use a bidirectional arrow to denote arrows in both directions
and a dashed box to enclose formalisms that can be reduced one into another. Note that
some formalisms are more appropriate in representing sets of models, while others perform
better on sets of formulae. An interesting relation exists between skeptical default reasoning
and circumscription. While there is no model-preserving poly-size reduction from circumscription to skeptical default reasoning (Gogic et al., 1995), a theorem-preserving poly-size
reduction exists, as shown by Theorem 14.

7. Related Work and Conclusions
The idea of comparing the compactness of KR formalisms in representing information is not
novel in AI. It is well known that first-order circumscription can be represented in secondorder logic (Schlipf, 1987). Kolaitis and Papadimitriou (1990) discuss several computational
aspects of circumscription. Among many interesting results they show a reduction from a
restricted form of first-order circumscription into first-order logic. The proposed reduction
will increase the size of the original formula by an exponential factor. It is left as an open
problem to show whether this increase is intrinsic, because of the different compactness
properties of the two formalisms, or there exists a more space-efficient reduction. When a

25

Cadoli, Donini, Liberatore, & Schaerf

- Skeptical

WIDTIO 

Default

Skeptical Default

6

6

GCWA
6

SBR  - Circumscription

SBR  - Circumscription

.

6

6

PL  - Stable Model

PL  - WIDTIO 

a. Time Complexity

- GCWA  - Stable
Model

b. Space Efficiency

Figure 3: Complexity of Model Checking vs. Space Efficiency of Model Representation

WIDTIO - GCWA

6

?
Skeptical
SBR  - Circum  - Default
S
o
S
PL -

Credulous
Default



SBR - Circum-



Skeptical
Default

AK
A

Stable
Model

Credulous
Default






Stable
PL- WIDTIO - GCWA - Model

a. Time complexity

b. Space efficiency

Figure 4: Complexity of Inference vs. Space Efficiency of Theorem Representation

26

Space Efficiency of Propositional Knowledge Representation Formalisms

first-order language is used, more results on compactness and existence of reductions are
reported by Schlipf (1995).
Khardon and Roth (1996, 1997), and Kautz, Kearns and Selman (1995) propose modelbased representations of a KB in Propositional Logic, and compare it with formula-based
representations. Although their results are significant for comparing representations within
PL, they refer only to this formalism, hence they are not applicable to our comparison between different PKR formalisms. The same comment applies also to the idea of representing
a KB with an efficient basis by Moses and Tennenholz (1996), since it refers only to one
PKR formalism, namely, PL.
An active area of research studies the connections of the various non-monotonic logics.
In particular, there are several papers discussing the existence of translations that are polynomial in time and satisfy other intuitive requirements such as modularity and faithfulness.
Janhunen (1998), improving on results of Imielinski (1987) and Gottlob (1995), shows that
default logic is the most expressive, among the non-monotonic logics examined, since both
circumscription and autoepistemic logic can be modularly and faithfully embedded in default logic, but not the other way around. While these results are of interest and help to
fully understand the relation among many knowledge representation formalisms, they are
not directly related to ours. In fact, we allow for translations that are more general than
polynomial time, while in all of the above papers they only consider translations that use
polynomial time and also satisfy additional requirements.
The first result on compactness of representations for a propositional language is presented, to the best of our knowledge, by Kautz and Selman (1992). They show that, unless
there is a collapse in the polynomial hierarchy, the size of the smallest representation of
the least Horn upper bound of a propositional theory is superpolynomial in the size of the
original theory. These results are also presented in a different form in the more comprehensive paper (Selman & Kautz, 1996). The technique used in the proof has been then
used by us and other researchers to prove several other results on the relative complexity of
propositional knowledge representation formalisms (Cadoli et al., 1996, 1997, 1999; Gogic
et al., 1995).
In a recent paper (Cadoli et al., 1996b) we introduced a new complexity measure, i.e.,
compilability. In this paper we have shown how this measure is inherently related to the
succinctness of PKR formalisms. We analyzed PKR formalisms with respect to two succinctness measures: succinctness in representing sets of models and succinctness in representing
sets of theorems.
The main advantage of our framework is the machinery necessary for a formal way of
talking about the relative ability of PKR formalisms to compactly represent information. In
particular, we were able to formalize the intuition that a specific PKR formalism provides
“one of the most compact ways to represent models/theorems” among the PKR formalisms
of a specific class.
In our opinion, the proposed framework improves over the state of the art in two different
aspects:
1. All the proofs presented in the previous papers only compare pairs of PKR formalisms, for example propositional circumscription and Propositional Logic (Cadoli
et al., 1997). These results do not allow for a precise classification of the level of
27

Cadoli, Donini, Liberatore, & Schaerf

compactness of the considered formalisms. Rephrasing and adapting these results
in our framework allows us to infer that circumscription is model-coNP-complete and
thm-Πp2 -complete. As a consequence, we also have that it is more space-efficient of the
WIDTIO belief revision formalism in representing sets of models or sets of theorems.
2. Using the proposed framework it is now possible to find criteria for adapting existent
polynomial reductions showing C-hardness into reductions that show model-C or thmC-hardness, where C is a class in the polynomial hierarchy (Liberatore, 1998).

Acknowledgments
This paper is an extended and revised version of a paper by the same authors appeared
in the proceedings of the fifth international conference on the principles of knowledge representation and reasoning (KR’96) (Cadoli, Donini, Liberatore, & Schaerf, 1996a). Partial
supported has been given by ASI (Italian Space Agency) and CNR (National Research
Council of Italy).

References
Ben-Eliyahu, R., & Dechter, R. (1991). Default logic, propositional logic and constraints.
In Proceedings of the Ninth National Conference on Artificial Intelligence (AAAI’91),
pp. 379–385.
Ben-Eliyahu, R., & Dechter, R. (1994). Propositional semantics for disjunctive logic programs. Annals of Mathematics and Artificial Intelligence, 12, 53–87.
Boppana, R., & Sipser, M. (1990). The complexity of finite functions. In van Leeuwen, J.
(Ed.), Handbook of Theoretical Computer Science, Vol. A, chap. 14. Elsevier Science
Publishers (North-Holland), Amsterdam.
Cadoli, M. (1992). The complexity of model checking for circumscriptive formulae. Information Processing Letters, 44, 113–118.
Cadoli, M., Donini, F., Liberatore, P., & Schaerf, M. (1996a). Comparing space efficiency
of propositional knowledge representation formalisms. In Proceedings of the Fifth International Conference on the Principles of Knowledge Representation and Reasoning
(KR’96), pp. 364–373.
Cadoli, M., Donini, F. M., Liberatore, P., & Schaerf, M. (1996b). Feasibility and unfeasibility of off-line processing. In Proceedings of the Fourth Israeli Symposium on Theory
of Computing and Systems (ISTCS’96), pp. 100–109. IEEE Computer Society Press.
url = ftp://ftp.dis.uniroma1.it/PUB/AI/papers/cado-etal-96.ps.gz.
Cadoli, M., Donini, F. M., Liberatore, P., & Schaerf, M. (1997).
Preprocessing of intractable problems.
Tech. rep. DIS 24-97, Dipartimento di
url =
Informatica e Sistemistica, Università di Roma “La Sapienza”.
http://ftp.dis.uniroma1.it/PUB/AI/papers/cado-etal-97-d-REVISED.ps.gz.
28

Space Efficiency of Propositional Knowledge Representation Formalisms

Cadoli, M., Donini, F. M., Liberatore, P., & Schaerf, M. (1999). The size of a revised
knowledge base. Artificial Intelligence, 115 (1), 25–64.
Cadoli, M., Donini, F. M., & Schaerf, M. (1995). On compact representations of propositional circumscription. In Proceedings of the Twelfth Symposium on Theoretical Aspects of Computer Science (STACS’95), pp. 205–216. Extended version as RAP.14.95
DIS, Univ. of Roma “La Sapienza”, July 1995.
Cadoli, M., Donini, F. M., & Schaerf, M. (1996). Is intractability of non-monotonic reasoning
a real drawback?. Artificial Intelligence, 88 (1–2), 215–251.
Cadoli, M., Donini, F. M., Schaerf, M., & Silvestri, R. (1997). On compact representations
of propositional circumscription. Theoretical Computer Science, 182, 183–202.
Cook, S. A. (1971). The complexity of theorem-proving procedures. In Proceedings of the
Third ACM Symposium on Theory of Computing (STOC’71), pp. 151–158.
Eiter, T., & Gottlob, G. (1992). On the complexity of propositional knowledge base revision,
updates and counterfactuals. Artificial Intelligence, 57, 227–270.
Eiter, T., & Gottlob, G. (1993). Propositional circumscription and extended closed world
reasoning are Π2p -complete. Theoretical Computer Science, 114, 231–245.
Etherington, D. V. (1987). Reasoning with incomplete information. Morgan Kaufmann,
Los Altos, Los Altos, CA.
Fagin, R., Ullman, J. D., & Vardi, M. Y. (1983). On the semantics of updates in databases.
In Proceedings of the Second ACM SIGACT SIGMOD Symposium on Principles of
Database Systems (PODS’83), pp. 352–365.
Garey, M. R., & Johnson, D. S. (1979). Computers and Intractability: A Guide to the
Theory of NP-Completeness. W.H. Freeman and Company, San Francisco, Ca.
Gelfond, M., & Lifschitz, V. (1988). The stable model semantics for logic programming.
In Proceedings of the Fifth Logic Programming Symposium, pp. 1070–1080. The MIT
Press.
Gelfond, M., Przymusinska, H., & Przymusinsky, T. (1989). On the relationship between
circumscription and negation as failure. Artificial Intelligence, 38, 49–73.
Ginsberg, M. L. (1986). Conterfactuals. Artificial Intelligence, 30, 35–79.
Gogic, G., Kautz, H. A., Papadimitriou, C., & Selman, B. (1995). The comparative linguistics of knowledge representation. In Proceedings of the Fourteenth International
Joint Conference on Artificial Intelligence (IJCAI’95), pp. 862–869.
Gottlob, G. (1992). Complexity results for nonmonotonic logics. Journal of Logic and
Computation, 2, 397–425.
Gottlob, G. (1995). Translating default logic into standard autoepistemic logic. Journal of
the ACM, 42, 711–740.
29

Cadoli, Donini, Liberatore, & Schaerf

Imielinski, T. (1987). Results on translating defaults to circumscription. Artificial Intelligence, 32, 131–146.
Janhunen, T. (1998). On the intertranslatability of autoepistemic, default and priority
logics, and parallel circumscription. In Proceedings of the Sixth European Workshop
on Logics in Artificial Intelligence (JELIA’98), No. 1489 in Lecture Notes in Artificial
Intelligence, pp. 216–232. Springer-Verlag.
Johnson, D. S. (1990). A catalog of complexity classes. In van Leeuwen, J. (Ed.), Handbook
of Theoretical Computer Science, Vol. A, chap. 2. Elsevier Science Publishers (NorthHolland), Amsterdam.
Karp, R. M., & Lipton, R. J. (1980). Some connections between non-uniform and uniform
complexity classes. In Proceedings of the Twelfth ACM Symposium on Theory of
Computing (STOC’80), pp. 302–309.
Kautz, H. A., Kearns, M. J., & Selman, B. (1995). Horn approximations of empirical data.
Artificial Intelligence, 74, 129–145.
Kautz, H. A., & Selman, B. (1991). Hard problems for simple default logics. Artificial
Intelligence, 49, 243–279.
Kautz, H. A., & Selman, B. (1992). Forming concepts for fast inference. In Proceedings of
the Tenth National Conference on Artificial Intelligence (AAAI’92), pp. 786–793.
Khardon, R., & Roth, D. (1996). Reasoning with models. Artificial Intelligence, 87, 187–
213.
Khardon, R., & Roth, D. (1997). Defaults and relevance in model-based reasoning. Artificial
Intelligence, 97, 169–193.
Köbler, J., & Watanabe, O. (1998). New collapse consequences of NP having small circuits.
SIAM Journal on Computing, 28 (1), 311–324.
Kolaitis, P. G., & Papadimitriou, C. H. (1990). Some computational aspects of circumscription. Journal of the ACM, 37 (1), 1–14.
Liberatore, P. (1995). Compact representation of revision of Horn clauses. In Yao, X. (Ed.),
Proceedings of the Eighth Australian Joint Artificial Intelligence Conference (AI’95),
pp. 347–354. World Scientific.
Liberatore, P. (1998). Compilation of intractable problems and its application to artificial
intelligence.
Ph.D.
thesis,
Dipartimento di Informatica e Sistemistica, Università di Roma “La Sapienza”. URL =
ftp://ftp.dis.uniroma1.it/pub/AI/papers/libe-98-c.ps.gz.
Liberatore, P., & Schaerf, M. (1996). The complexity of model checking for belief revision and update. In Proceedings of the Thirteenth National Conference on Artificial
Intelligence (AAAI’96), pp. 556–561.

30

Space Efficiency of Propositional Knowledge Representation Formalisms

Liberatore, P., & Schaerf, M. (1998). The complexity of model checking for propositional
default logics. In Proceedings of the Thirteenth European Conference on Artificial
Intelligence (ECAI’98), pp. 18–22.
Liberatore, P., & Schaerf, M. (2000). The compactness of belief revision and update operators. Tech. rep., Dipartimento di Informatica e Sistemistica, Università di Roma “La
Sapienza”.
Marek, W., & Truszczyński, M. (1991). Autoepistemic logic. Journal of the ACM, 38 (3),
588–619.
McCarthy, J. (1980). Circumscription - A form of non-monotonic reasoning. Artificial
Intelligence, 13, 27–39.
Minker, J. (1982). On indefinite databases and the closed world assumption. In Proceedings
of the Sixth International Conference on Automated Deduction (CADE’82), pp. 292–
308.
Moses, Y., & Tennenholtz, M. (1996). Off-line reasoning for on-line efficiency: knowledge
bases. Artificial Intelligence, 83, 229–239.
Nebel, B. (1998). How hard is it to revise a belief base?. In Dubois, D., & Prade, H. (Eds.),
Belief Change - Handbook of Defeasible Reasoning and Uncertainty Management Systems, Vol. 3. Kluwer Academic.
Reiter, R. (1980). A logic for default reasoning. Artificial Intelligence, 13, 81–132.
Schlipf, J. S. (1987). Decidability and definability with circumscription. Annals of Pure
and Applied Logic, 35, 173–191.
Schlipf, J. S. (1995). A survey of complexity and undecidability results for logic programming. Annals of Mathematics and Artificial Intelligence, 15, 257–288.
Selman, B., & Kautz, H. A. (1996). Knowledge compilation and theory approximation.
Journal of the ACM, 43, 193–224.
Stockmeyer, L. J. (1976). The polynomial-time hierarchy. Theoretical Computer Science,
3, 1–22.
Winslett, M. (1989). Sometimes updates are circumscription. In Proceedings of the Eleventh
International Joint Conference on Artificial Intelligence (IJCAI’89), pp. 859–863.
Winslett, M. (1990). Updating Logical Databases. Cambridge University Press.
Yap, C. K. (1983). Some consequences of non-uniform conditions on uniform classes. Theoretical Computer Science, 26, 287–300.

31

	
 	


 ! #"$ % 	'&)(+*-,/.0001324+5(+4*

6789: ;)(<00!=>8
%&;?2@<00

ACBD7EGF-HID@JLKMACNOJLPIQRD@HTSUACVWSXKYQB

Z\[]$^_]a`cb-dfe$gihjek^

lkmknpokmkqrWs$tvuwxq3npyzwxqpsi{3|_wx}Xty

~L7Oz'@@_Y@+-@ _z'
~LXk¡ '¢X!¡Y£¡£¤¡£
¥O¡'¦¢R§W¨¨R©ª«¦¬!£­ £¡«¡«¦¬¯®$°±

²´³µ¡¶±·¸º¹¶
»½¼¦¾c¿¡ÀÁ¡ÂºÀÃjÄ¼Å/ÆLÇ+¾7Æ¾7Á¡Ç+È¼ÉÅÊÆ)ÄÀÌË±¾7Í¡¾ÂÊÀ¡Î¯Á¿¾ÏiÄ+ÆÄ+¼¦ÁÄÐÁÇ+¾YÁËÁÎÄÅÊÍ¡¾ÌfÎÇ¾!Ë±Å/ÈÄ+Á¡ÑÂÊ¾O
Ä+ÅxÒY¾ÂÊÓ¡ÔÕjÄ)Ö¦ÇÆÄTÑÂx×zÆ ¼3ØkÄ¼¦¾7Æ¾YÄ¼Ç+¾¾cÇ+¾7Ùi×ÅÊÇ¾7ÒY¾ÏiÄ+Æ)Æ¾¾7ÒÚÈÀ¡ÏiÄÇÁ¡Ë±Å/ÈÄ+À¡Ç+Ó¡ÔÜÛ¦À¡ÇL¾Ý±Á¡ÒYÎÂx¾ØkÁËÁÎ±Þ
ÄÁÄÅÊÀ¡ÏßÇ+ÅÊÆà±Æ½ÅxÏiÄÇ+À±Ë±×¦ÈÅxÏ¿Y×ÏzË±¾7ÆÅxÇÁÑ¦Âx¾)ÆÅÊË±¾?¾á¾!ÈÄ+Æ7Ø±Ä+¼¾Ç+¾ÑÓÜÒcÁàÅÊÏ¿cÁ¿¾ÏiÄ+Æ7âÑz¾7¼¦ÁÍÅxÀÇ:Âx¾!ÆÆ½ÎÇ+¾@Þ
Ë±Å/ÈÄÁÑÂÊ¾¡ÔÛ×ÇÄ¼¦¾Ç+ÒÐÀÇ¾ØÁ¡ÂÄ+¼À¡×¦¿¡¼ÃvÀ¡Ç+ÒcÁÂÍ¡¾7ÇÅxÖzÈÁÄÅÊÀ¡ÏOÈÁ¡ÏãÁ¡Æ+ÆÅÊÆ ÄXÅÊÏÌ¾Ï¦Æ×Ç+ÅxÏ¦¿ÜÑz¾7¼¦ÁÍÅxÀÇ+Á¡Â$ÎÇ+¾@Þ
Ë±Å/ÈÄÁÑÅÊÂÊÅÄÓØÅÄÅ/Æ½àÏÀä:ÏIÄÀcÑ¾?ÄÅÊÒÐ¾Þ'ÈÀ¡Ï¦Æ×ÒYÅÊÏ¿¦Ô
å ×¦ÇkÆÀ¡ÂÊ×±ÄÅÊÀ¡ÏÄÀÄ¼¾#È¼zÁÂÊÂx¾7Ï¿¡¾ºÀ¡Ã±Æ+ÁÄ+ÅÊÆ ÃvÓÅxÏ¦¿XÁÂÊÂÄ¼¦Ç¾7¾Ç¾!Ùi×ÅxÇ+¾ÒY¾7ÏÄÆpÅ/ÆpÄ¼¦¾ºÃvÀ¡ÂÊÂxÀä:ÅÊÏ¿zÔ$Õ¿¾ÏiÄ+Æ
¼¦ÁÍ¾jÖ¦ÏÅxÄ¾@ÞæÆ Ä+ÁÄ+¾Á×±Ä+À¡ÒcÁÄ+À¡ÏÐÎÂ/ÁÏ¦Æ7Ø¡ä:¼Å/È¼cÁÇ+¾:Á¡ËÁ¡Î±Ä¾!ËTÀÏÂÊÅxÏ¾:ÍÅ/Á?¾ÍÀ¡ÂÊ×±ÄÅÊÀ¡Ï¦Á¡ÇÓ)ÂÊ¾7Á¡ÇÏ¦ÅxÏ¿cçÎz¾7Ç Þ
Ä+×ÇÑzÁÄÅÊÀ¡ÏèÀ¡Î¾ÇÁÄ+À¡ÇÆÔO»kÀÌ¾Ï¦Æ×Ç+¾cÄ¼zÁÄÐÈÇÅxÄÅ/ÈÁ¡Â#Ñ¾¼¦ÁÍÅÊÀ¡ÇÁÂÈÀ¡Ï¦Æ ÄÇÁÅÊÏiÄ+ÆLÁ¡Ç¾Á¡Âxä½ÁÓ±Æ)ÆÁÄÅ/ÆÖz¾7ËpØ
Á¡¿¡¾ÏiÄÆâÎÂ/ÁÏ¦ÆWÁÇ+¾WÖ¦ÇÆ ÄÃvÀÇÒcÁ¡ÂxÂÊÓÌÍ¡¾7ÇÅxÖ¦¾!ËpÔc»½¼¾ÓãÁ¡Ç¾TÄ¼¦¾Ï¯éê7Í¾Ç+ÅÖz¾7Ë¯ÁÃÄ+¾Ç)¾Í¾Ç+ÓÌÁ¡ËÁ¡Î±Ä+ÁÄÅÊÀ¡Ï3Ô
ë'ÃÇ+¾Í¾Ç+ÅÖzÈ7ÁÄ+ÅxÀÏßÈÀ¡Ï¦ÈÂx×¦Ë¾7Æ:Ä+¼¦ÁÄ?È@ÀÏ¦ÆÄ+Ç+Á¡ÅxÏiÄÆÁÇ+¾LÍÅxÀÂÊÁÄ¾!ËpØÄ+¼¾WÎÂ/ÁÏzÆXÁÇ+¾)Ç+¾Î¦Á¡ÅxÇ+¾7ËpÔ»½¼¦¾LÒcÁÅÊÏ
ÀÑ±ì¾7È@ÄÅÊÍ¡¾WÀ¡ÃºÄ¼Å/ÆÎ¦ÁÎ¾Ç-ÅÊÆ-Ä+ÀÅÊÒÐÎ¦ÇÀÍ¾)Ä¼¾T¾@íÜÈ@ÅÊ¾ÏzÈ@ÓOÀÃÇ+¾Í¾Ç+ÅÖÈÁÄ+ÅxÀÏOÁÃÄ¾7Ç-ÂÊ¾7Á¡ÇÏ¦ÅxÏ¿zØÆÀÜÄ+¼¦ÁÄ
Á¡¿¡¾ÏiÄÆÜ¼¦ÁÍ¾ãÁîÆ×±íÜÈ@ÅÊ¾ÏiÄÂÊÓ´Ç+Á¡ÎÅ/ËïÇ¾!Æ ÎÀ¡ÏzÆ ¾OÄ+ÅxÒY¾Ôñðf¾ÉÎ¦Ç¾!Æ ¾7ÏÄÄä_ÀòÆ ÀÂx×±Ä+ÅxÀÏ¦Æ7ófÎÀÆÅxÄÅÊÍ¡¾ãÇ+¾@Þ
Æ×ÂxÄ+Æ?Ä+¼¦ÁÄTÈ¾ÇÄ+Á¡ÅxÏ¯ÂÊ¾7ÁÇ+ÏÅÊÏ¿À¡Î¾ÇÁÄ+À¡ÇÆÁ¡Ç¾ÜÁÎ¦ÇÅÊÀ¡Ç+Åº¿¡×¦Á¡Ç+Á¡ÏiÄ¾¾!ËÌÄ+ÀOÎÇ+¾7Æ¾Ç+Í¡¾Ð×¦Æ ¾Ãv×Â_ÈÂÊÁÆÆ¾7Æ?À¡Ã
Ñ¾¼¦ÁÍÅÊÀ¡ÇÁÂRÁ¡Æ+Æ ×¦Ç+Á¡Ï¦È@¾ÐÈ@À¡ÏzÆÄ+Ç+Á¡ÅxÏiÄ+ÆYçä:¼ÅÊÈ¼fÅÊÒÐÎ¦ÂxÅÊ¾7ÆÄ+¼¦ÁÄLÏÀßÇ+¾Í¡¾7ÇÅxÖzÈ7ÁÄÅÊÀ¡ÏãÅÊÆ?Ï¾7¾7Ë±¾!ËÉÃvÀ¡ÇÄ¼¾!Æ ¾
ÀÎz¾7Ç+ÁÄÀ¡ÇÆèØ¦Á¡Ï¦Ë¾@íÜÈ@ÅÊ¾ÏiÄXÅÊÏ¦ÈÇ¾7ÒÐ¾7ÏiÄ+ÁÂkÇ¾7Í¡¾7ÇÅxÖzÈÁÄÅÊÀ¡ÏÁÂÊ¿¡ÀÇÅxÄ¼ÒcÆ½ÃvÀÇ:Ä¼¦ÀÆ¾LÂx¾!ÁÇ+ÏÅÊÏ¿cÀ¡Î¾ÇÁÄ+À¡ÇÆ
Ä+¼¦ÁÄ¼¦ÁÍ¾-Ï¦¾¿ÁÄÅÊÍ¡¾)ÁÐÎÇ+ÅxÀÇÅÇ+¾7Æ×ÂÄÆÔ
ôõOöi÷ ¶±·ø:ù-úX¹¶ûø ÷
üTý±þÿ@þ	þ
vÿpývÿ
@þvÿpýþþÿ±ÿ

þRþ
±þ!#"$%±ÿ&'()'%*,+-./vÿpý

v ÿ0123456vÿ7
ÿ
þ*
±ÿ8@þ4vþ±þ,Rþ0þ9(Wý@þ6pþ(04%':;ÿþÿ±þ<þ430=vÿ>?pþ
@  099+þ40Avÿ?pþ90:B':;C4±þ!6DÐþýÿpþE9
±ÿ()3ÿ4?ý±þÿA+F?04±ÿ<'7Rþ()
 þ4@þG'.1!IHTþ±þ?pþvþ*JKpþýÿpþL
±ÿ3ÿMN%0	()@þþþ4O
E
3P'±ÿ
þQ?0L+F44
p
 þþÿ
3
R
3 ÿþ@ þR1S?3þP ý±þÿ!CT$p
? þ@ þ()@ þ*Jv ÿ0 ÿG'U30/v ÿpýC± ÿR ý±þÿ7+F?G04± ÿ0*V
4c
 þ þÿ26'S4 þÿ0 þP?3þ ý±þÿ7'U þ ÿW± ÿR/()SL04± ÿN'SL'G3
3 ÿM()@ þ þþÿ


30P'±ÿ
 þ!XT$p
? þY ÿ'/3
4 ÿZ([ þ ÿ ÿpýM*,?M\+ þ± þ*A()þÿ#P±. þ?pþK ý±þÿ]^R
 þ?/
 ýÿ0`_a
± ÿ[?0p
 þV'[@ þ2
! ( T$p
? þý(M?4J@ þ þ
E?72V'F± þE(bQ?pþ9R
 þ?/J(0± þ
 ý±þÿ!,c ÿa4
34d*3MA @ þ
± þL4-'p

 þ± þ¯
 þe
v þÿ$Oþ?1-()5p
 þþPv ÿ0v ÿpý>+fp
? þ?pþ
?pþAR
 þ?/O(av þ ÿv ÿpý[ ý±þÿ<@ þPv ÿg+F4?v ÿL?3þ-%3
3 ÿ0J(a@ þ'R
 þ
`k
_ þ7
 ÿ'v ÿAhi
2 þ
 þvþkl6()þ$ þ ÿ ÿpýM!gTF?4, ÿ
43p
 þ<± þ()1v ÿ3ý>?-R
 þþ9@ þ[@ þ þ± þC()-v ÿpý þ
j R
4± þm ý±þÿYC
+ þ4Q± þE(b/v ÿpýZ?¯ý0[R
 þvþ@ þm þ þ± þn(bK834 ý±þÿ
'/'þP$ ÿ	+F?4
E?K ÿpþNfP@ þL ý±þÿ[Pd	0!
üÐÿ þo/P0 þG(7XR
 þpq4¯
 ü[4\a]^KrOCst+u'h ü[4\a*IvwxylE!zT$?4C4+>*F+F?2
?
?74'YR
 þþÿW3 þm1ï
{ þ4W± ÿ0R|<'} ÿ0fh~vwwlE*<'þ8?8±ÿW ý±þÿ8Pdï
 ÿM7?E

a~IEd\LQ^5^M~^~E9~B^\>5pE^\p9;\d^\[^d9'EI\i;B7B'\\~
idiB~XdB'\^;^^^b8 2tdB¡)~t5~-pB~BE~59^'B^¢;
£

.000j %%a¤!;	+L	;A¥?@	9¦	!x9	,§8!
%&%;¨¦

¡&@%$%2©@ ;\¨

ª

mknpokmkq

?13P±ÿYQ4\+«?30P±ÿY'	
Oþ8'C?EK!5T$?pþ7vÿU
ÿ'03ÿK(<{ïþ4S±ÿG|<'}ÿt4
 j8¬ 
4<'UP­]>
 þ()@ þ
+ þP@ þ þ@ þP3M'ÿM37 ý±þÿ8v ÿ'K@ þ`:B+-4´
 þÿ14 ÿO
 þÿ*V
+ þ
ÿpþþ®'O
 þ	
@ þa þ± ÿZ
03M ÿ04'
0v þCO
 þ± ÿ0>(F.1v ÿ3ýY?pþ¯R
 þa
 üf2d°]^
rO'7sJ+>!!!^?Md+±MY
+ þ''Z3M7()
>(b
3 ÿpýU3L?0v ÿm?3þ/
 þ>(-R
 þ/v ÿpý
3MQp
 þEE²k´³[(9
3M þ*µ?2f4d+¶4['¯
 ý±þÿpþg()L@ þ
[40v þO
 þÿ4 ÿG± ÿ0 ÿpþþ0f'KR
 þ
R
 þ ÿ2} þ	v ÿ''R
 þ
`_°
F
 þþ-þ'0 þN ÿKI'/'þK*30
?K j T
H þ± þFp
 þ þþL30 þ]^
_a þ!^kGT$?2V0R
 þt0M@ þ þtï
{ þ4I± ÿ8|<'} ÿ0]^t
2'QPOv ÿ>?pþ-
 ÿþo/g(a± þA ý±þÿ!
Tt7@ þ° ÿ0'7?3þf
40'8*
+ þf þf+-./v ÿpýL'\+- j ü[4\12± ÿk>0± þ[ ý±þÿ*/+F?2
?
+ þI3

 þk
_ ÿpþ>'	R
 þI± þ ý±þÿQ?N
± ÿm± þ()*% ÿSC@ þ' ÿ00 þe
 þÿNP± ÿ3ÿpþd*°+fp
? þ?pþ
¸
.
·
3 þ:;p
 þk
_ ÿpþm
 þþL@ þP0@ þ þ± þR()þI ÿµ!
3
E?R ý±þÿ7+F42_
 þ4?pþ7
 ÿ'v ÿ
?pþO4 ÿ8Ì
 þ?M10*g þ0g?pþP þ± þOv ÿ73
E?8f+A7g'Q@ þ@ þ± þ9?3þ þ90R
 þþ!
T$3
? þ± þ`_a
 ÿ=O
 þ?M/3O
 þ=p
? þ@ þ*I¹Iºd»¼½7¾¿/¼¾ÀÁ)ÂÃ*N
 ÿ4'K(80342v ÿpýW&k
_ ÿþ
/p
 þV(9'/'þÄ± ÿG
p
? þ
.1v ÿ3ý+F3
? þ?pþf?3þ7p
 þ4@ þY
 þ;Y?M40Fv ÿU?[P1p
 þB!5+c ÿS?pþ

 ÿþo1Q(6?4F0R
 þ*0/p
 þt
p
? þ
.1v ÿ3ýCp
 þþEPv ÿpþF+Fp
? þ?pþNÅnÆ Ç=ÈÉ(b[04± ÿSÅq± ÿSR
 þp
È*M! þ!*/+Fp
? þ?3þ-a4± ÿ	Å j P1p
 þ2kChi4~$
_ þEl<R
 þpÈ!<T$3
? þf3M'a3M-2 þ4?pþ j ± þkI j ÿMk
 ÿµ*a( j ÿM*^kP ÿpþ7f@ þ7
3
±
3 ÿþ þo/a þF@ þ7\143
 þµ!,ÊS1p
 þt
p
? þ
.1 ÿpý?$d± þÿS'R
 þ
 þ\
±
 þRþ
± þ()N( þp:;
E4
O042
 ÿk
* þ! ýM!*VCP1p
 þt
p
? þ
±. þ>3
3 ÿ
\± þ@ þ°þÿ444
4''3c
 þ7v ÿWU'/'þ¯p
 þ ýÿpþR'SP±. þC0342v ÿpý[@ þÉþ?Ë13±. þ þ4'±ÿ!KT$?4
þA+-34	?d±
 þQ$
3 ÿ þp
? þCI''3
3°(b
 þQ'I+- þÿ¯þ?Ë13±. þQ/ ÿ0*E?pþA?± ÿ
R
 þÿ	?pþÌhi|,4 þ2MÉ
 þf!*VvwwlE!
|9 þÿ44*/p
 þ1
p
? þ
.1 ÿpýL4g3MþA()
 þ5 þ
E??Mp
3 ý?8?pþ5 þ6(°41@ þ
?00 þ$'þ6(
?pþ502± ÿ7'L
Ep
? þ
.(0?pþ5R
 þp7?M40!Jc(0?pþ5a4± ÿI?6[k
_ ÿþ?ÿ13>R
 þO(%'þ*?04g/
 þ
þP ÿþ!6ÊU/p
 þM
Ep
? þ
./v ÿpýÜý40MR
 þvþO(°N834 ý±þÿ<02± ÿ?64O
 þ5
a þo/4;8?
4Y
 þo/% ÿpþÿ2<v ÿm?pþÌÿ137
 þN(5 ý±þÿ! * {Í?RY2@ ý±þÌÿ30>R
 þN(A ý±þÿ*O?2N4N
34R
 þ
U@ þ3N00 þK!+c ÿW()
*jþ± þÿZP1p
 þ,
p
? þ
.1v ÿ3ýSUv ÿpý þP ý±þÿ7a4± ÿm+F?RS?3
3 ý±þãÿ30>R
 þ
($'þI
± ÿZ
 þ
03M ÿ04m?40± þ¯
! ü ý@ þIpþ<(5@ þ@ þ
?Xv ÿ?3þ± þ`_°
 ÿ

P83
3 ÿp82<
3M@ þÿ7(b/
3 þ ÿ@ þ3
4 ÿIþ
3
? ÿ2Ëp
3 þ<(b,?0± ÿ4v ÿ3ýf± þ4 ý±þF'þf0
 þ
hBÎA4±. þGÏÐ{Ív ÿpýM*NvwwÑlE!¶Y
³ ÿpþY(N?pþS4@ ý±þ'C'1þPP1p
 þF
p
? þ
±. þÍ'ZþG3v ÿpý?3þ þ
@ þ30

 ÿGþ
3
? ÿ2Ëp
3 þQ?Xvy (+.0 'þhiÒA3ME
´
? þN!*<vwwlE!7T
H þ± þ?pþv þ*µ?pþ024
0444;
(IP± ÿÓ(>?pþ@ þ@ þ3
 ÿÍþ
E3
? ÿ4Ë1p
3 þ	4	@ þ'4
þ± ÿÍ( þ+Ô@ þ
0 þþ4n3M'þµ!
r3M?pþ@ þp
* ÿM ÿ3þ[(J?pþz@ þQ4@ þC()?
 þe
 þÿAÕÖ± þ`_a
 ÿ	()þF þ ÿ0v ÿpý7?0-4þ@ þ
?pþ1'þY! · O
 þÌ
 þ?M10Lv ÿm?pþ2þ3M@ þ@ þp
 þ ýÿpþR(b>(bp+-@ þ?>
E?± ÿpý±þ!KY
³ ÿpþ
·
·
?Iþ0?4} þÜ
 þe
 þÿ0
*<>3ME>M
 þ*O4 .2'.R± ÿ0 4./]^Ch~vwwlE!S×fd
+ þ± þÌ
 ÿM ÿpþ
(O?pþK*v ÿ0
43v ÿ3ý · .4.K± ÿ · ./]^5O
 þ?M/µ*0@ þ>0044
0v þf'832 ý±þÿF1'þ$v ÿ
+F?2
?>v ÿpý þ5 ý±þÿ9
34*?3þ@ þþEv ÿpýN?pþLý40MR
 þ?/<(%?pþFd± þ4a'/'þK!
c ÿY

 ÿ'E'*03Mf
E?YM@ þ þ5?pþL2O
 þ4v ÿpþ9(O4± þ>7304 ý±þÿ$'1þP!
Î- ÿ04p
 þC?Md+Ä@ þ± þ_a
 ÿq_0	v ÿ'®3MCd± þ2[0± þm ý±þÿK()O
 þ+-.°!Øc ÿÓ?4
()O
 þ+-.Shi þþNrO ý3M@ þ8vdlE*/?pþ@ þN@ þ[ ÿpþf5 þ[ ý±þÿA+F? j ± ÿ14O
 þk802± ÿfhBÙ[ þ( þÿþ'þ
ÏÚ"F þ*PvwwÛlE*L! þ!*Q04± ÿC?Y þR
 ÿvÿ1344 þ
o þ
3Mþ=v ÿn@ þ° ÿ0 þm'#v ÿþ7 ÿN± ÿ
þo/þ
 ÿ?
 þÿ1 ÿO
 þÿ-
 ÿ0 ÿ!m|9
?& ý±þÿ]^P02± ÿZ4I3O
 þ®'m
 þ	v ÿ®?pþC(bEÚ(f
_kÿ4þ:;'þ3M'P'ÿÜhir · üNlE!$r · üfK?0± þR
 þþÿÍ?MdT
+ ÿÓ'XR
 þ´þþ
4± þ@ þ@ þ þÿ ÿ	(
ÝaÞ%p[B<E^5'^'>ßVà<áâ'ãäpåæ`ç<~'OBp[B<\E\B^EdB'\^;^<EFB^5~
èdaÞ%<i;B~O^L5-BEE~g\ELB<é`B5'Q[;d^\$B\9ê%B~E>\BdtEé0i;B~g^NB<^d\E
EE~VE\< ~9d~B^EQè¢;
ëdì

í[î

öp÷øIù
öBÿ
ø 
ö "
ø !
ö%
ø &

³QrOrgsJcH[|$­
òó

*
ôõ

04±ÿ

t}-m{t/s$q

í

os0ïðptÊ{añ

l ñqMð î
í a

¼ú¼½ºEûRÁbÂ0ÁbüÁiý½gýdÃ¼Â0üµûa½ýÂ öBþ;ø
Å  (	
 º fÅ  

  º¹ ¹ 1½`üÁ)ýÃ1¼ÂüVûa½ýÂ
¼Á $#Yö 
¹ 1½`üÁ ø ýÃ¼ÂüJûa½`ýÂ
¼pû/ý	Á Aû°½`ýÂ öþ;ø Á  '
û ºEû¼ üÁi¼ þ Â0ºü þ ýü Á þ	( ¼»

³QHfsJcH[|$­
òó ý±þÿ]) ^Fa4±ÿ ôõ

/

)

ö,+ø.- ¼ýÂÁ)ÂÃK¹º»Á ( ¼ þö ¹1½ üÁ ø ýdÃ¼Â0üVû°½`ýÂ
òó

)

ÿpþ+´04±ÿ

ôõ

*

ö10Eø Å'2 

3 ~¼4  º¹ ¹1½ üÁiýÃ1¼ÂüJûa½ýÂ
ö5~
ø & ýEû°Ái»/½ # '¼ú¼EÁ $#Uö ¹1½`üÁ ø ýÃ¼ÂüJûa½`ýÂ
ö 68
ø 7 ¿/ºº þ ¼PýÂ0ºü)¿/¼L½4¼ýÂÁ)ÂÃYºEû¼~ýüBºº9'¼pû/ýÁ
ûa½ýÂ öBþ;ø Á  û~ºEûM¼EüÁ¼ þ Â0ºü þ ýüÁ þ( ¼»

rOý3@þPv­;::þ`_°0þN±þ7ý±þÿ!

@þ
±þGý±þÿC04±ÿ0=<''þýþGhiÒA3M./?µ*Qvww>@?BAL0±ÿM}/*Nvwwx@?>ÎAOþfÏÔÊG.d/
?V*
vww C@?ar± ý±þ*tvww ClE!
s þF35R
#
 þýv ÿ	+F4?K'þZvL ÿKrgv ý3M@ þPv!,T$3
? þ@ þL@ þ>[þ'$P
3Ma þN(O+-d1F?$?pþ>r · ü
04± ÿ0f
32UR
 þ8(bÌ
 þG ÿ444!FrML ÿpþ*µ	?13P± ÿG04± ÿGp
 þ ýÿ3þ[
32î
 þÿpý ÿpþþQ?pþv ÿ4
04± ÿ0!-TF?4$PdK@ þË13@ þ>
 ÿ04p
 þa þcþ°f±ÿU
. ÿM\+F þp
 ý±þL
! üÐÿU0
 þ2v ÿpýPþ ÿ0± þ74F'
þ±
 þhi! þ!*O þ ÿR3v ÿpý þ43M4 ÿ ý?0PElf?pþCv ÿ4g02± ÿLv ÿRS4834þï
 þÿ/ ÿ/:
·
 þÿ!,rM± ý±þ,h~vww ClA3M4v ÿpþA8/
 þ3M þF())
O
 þ1 ÿpýr üf-?$4
 þRþ
± þN()$ß
 ÿ137R
 þ-(
a þP*Mv ÿ
23v ÿpý8± ÿYþþU± þ ÿY(t?pþED<4 ÿpþ]^5DQ4 þP/!
×[3P± ÿn04± ÿ þÿpý ÿpþþC¯
 þ43M ÿÓ ý4?PC
± ÿ´p
 þ± þÍ04± ÿ0?Y4'()q± ÿ
 ý±þÿ]^O

 ý4I'Rm? ý?®p
 þý@ þþ!W×fd
+ þ± þ*-'md/4p
 þ	''2
7Rþ?d1EX
 ý3E± ÿþþ*-()P
±þ`_°
 ÿq44'R@ þË13 þµ!ÓT$3
? þ@ þ(b þY+ þG3Ì
 þY?0'Rk
_ þ4v ÿpý?3þU ý±þÿ*$?pþ
hi83bl ý±þÿta4± ÿL?tR
 þþÿL± þ`k
_ þL3 Fv ÿ3þ,'f3
 þþPv ÿpþ,+Fp
? þ?pþOJ2~$
_ þg
4
R
 þþ
hi'þ0LÛ	± ÿ0G
 >lE!8c( ÿM*µ?pþa4± ÿS2Q@ þ0@ þXhi'þRlE
! D,2± ÿS þ0N4Y
 ÿMNM@ þ þmv ÿG?4
0R
 þ*4?Mp
3 ý?P94<± ÿP4P°±ÿ6'02
5(b9()33M@ þ5@ þ þE
?µ! · þa,ÛQ?M3
3 ý?PL@ þË13 þ$'O
 þ

4_a
 ÿµ!c($?pþ@ þK4Imv ÿ3ý þ ý±þÿ*9?3þÿ®48?I ÿ3þ	r · ü 04± ÿX± ÿ®?4I4-?4
±þ`k
_ þW± ÿW@ þ0@ þV*t?
( ÿpþþp
 þµ!Kï
{ þC
4<?048
Å  (1H=I,J !RhiT$?2
 ÿM ÿV*g7+ þ2,7?pþ
ÿM
 ÿC3 þv ÿ?pþf0R
 þ*49v ÿ
430p
 þv ÿ?pþTý8
( üfR
 þÿß
o ü7! lOc(°?3þ@ þf@ þ[7300 þ
 ý±þÿ9?0-
1R

 þþ*/+ þ[
 ÿ4p
 þ9;+-7%0444þ!µc ÿ	
Å  (	K
 z
* þ± þP ý±þÿ53 þ,?pþQO
 þ
834 ý±þÿF02± ÿµ*+F?2
?Y4f j 130
k(6?pþ7 ÿ/43° ý±þÿf02± ÿ!5T$?45832 ý±þÿf04± ÿ
4Q()O
 þR± ÿ0m± þ`$
_ þm'U@ þþ(94Q4~$
_ þc
 ý4067304 ý±þÿL
0v ÿ ÿm
 þþ!IT$p
? þ
834 ý±þÿ7a4± ÿZ2>@ þa@ þ®(5± þ`_a
4 ÿW130
 þ7± ÿ þ*6! þ!*<(i443M þP($?pþC04± ÿZ'
4(bKP0R
 þ;!-+c ÿm
Å '2 

 $
* þ
E?m ý±þÿQvÿp
 þR
 þÿ3
 þÿ3 þF4$dT
+ ÿUv ÿ0123a04± ÿµ!
Tt8± þE(bã
 ý0°R
 þþ* ÿpþQ(J?3þQ ý±þÿ5±. þ5?3þf130
9(V?3þ þNv ÿ/430/04± ÿ9'
() C834 ý±þÿF02± ÿµ!FT$?2$7304 ý±þÿf02± ÿU4F+F?Q4$± þ$
_ þµ!FrM>
Å  
K
 *° ÿpþ8
@ þ7v ÿ/430M04± ÿ5 þL@ þ0 þK(J?pþ>R
 þ;	4)
 ÿMf4~$
_ þV!
üf(bþN?3þI ÿ4µa4±
 ÿJhiElF?± þR
 þþÿS± þ`$
_ þm± ÿG@ þa@ þµ*°?pþ ý±þÿ>@ þ8$
_ þ4p
 þµ![{Í?4 þ
_$þ43
 þ´h) ÿ4v ÿpþ\lE*9?pþU ý±þÿ00Zv þ ÿv ÿpý#h þ! ýM!)
* þ43 ÿXR
 þ'ElI'R?pþPa4± ÿJhiEl
ã
 ÿ3þþp
 þØhi'þxlE!
s þ ÿ0v ÿpýRPd&
 þK þË34@ þX'Z0?pþYa4± ÿ&'Z?0± ÿ þY3
3 ÿ3þo1R
 þ
þ
ëML

ª

mknpokmkq

30ÿQ>'U_kÿpþ:B33ÿ3þ?pþP04±ÿV!cp($Å (1NHOI M IÅ (	
 *J?3þvÿpývþUhi734blý±þÿ>04±ÿ
4K0þµ!±cp(P
Å '2 

 *N± ÿ´ ý±þÿUY4	d+Wÿ´r · ü7*F()þY+F?2
?Í?pþR834ý±þÿ
h)/3
Elfa4± ÿ4NÕÖ:B()O
 þµ!Pr74643 ÿ*J ÿpþ ý±þÿ>?pþÿE04YÕÖ±þ`_$þN?3þÌÿpþ+
hi83bl ý±þÿ04± ÿZ'´þÿ3M@ þ	'42,4'$
_ þI?pþC@ þË30@ þZR
 þþKhi'þ0P
 CG± ÿ#ÑlE!WW
" þ:
()P ÿ(8?pþR834 ý±þÿK04± ÿ± ÿ0Í@ þ± þ`_a
4 ÿ´@ þR@ þË13 þÓ'q
 þK2O
 þ: þe
 þÿ
Q%a þ>R
 þ
3 þ8?pþG@ þR
 þ(bEO
 þU ÿ04v ÿpþ*°R
 þ?0[v ÿm	? ý?K2O
 þ:;
4
O43 ÿµ!
{Íp
? þÿpþ± þ$h)@ þ\lp± þ`_°
 ÿ>(i44*J/3
 þJ[
3
3 ÿþ@ þoM0 þ9?g2J3 þ7'Ðý34p
 þ<?3þ9
?4
 þ
(O± ÿUþ ÿ0± þL þ ÿ ÿpýI
 þE'F$?pþf04± ÿ	@ þa$L
 ÿpþþp
 þZhi'þ8
 QlE!,TF?4A/
 þ5(
þ
o þ
3MvÿpýM*00vÿpýM*M± ÿK þ± þ()1v ÿ3ý702± ÿ5
1
v þ$v ÿp
 þ
_ ÿþPL
 ÿ3þþp
 þµ!,T$3
? þQv ÿ	(b/
35(
?4Aa
 þf45'þ0R
 CP± ÿSÑ!
"f04N@ þ± þE`_a
 ÿ7(bþO þ ÿ ÿpý$4JF±. þN'f
E? þ/v ÿpý$4Ì
 þN ý±þÿg@þ'% ÿ þ!O³Q3Mt ÿpý:
þU
 ýt2$'ãþoMPv ÿ3þ74Vv þ ÿv ÿpýPÌ
 þ?M10F± ÿG4%±ÿ$R
 þpK
4 þF'Cp
 þþEPv ÿpþ
?pþË134
±. þ'L@þ± þE`_a
 ÿRÌ
 þ?M1m()Ü
 þ
E?Z
70v ÿ4 ÿ(-v þ ÿv ÿpýKO
 þ?1R± ÿ0R
 þp

4!qc ÿ#?4Ia
 þ+ þS@ þ þÿãÿpþ+  þ3?0
þv ÿq3 þ(i3$ þ ÿ0v ÿpýmR
 þ' þS
4
 ý3± ÿþþ&'RR
 þ j ( þkW+F?®@ þ'R
 þ
'W2%±ÿ
4 þ([R
 þþ!®c ÿX?pþ
+-*,4($?pþ	R
 þpZ?M40>()?pþK04± ÿZ48'Rv þ ÿv ÿpýM*O?pþÿ&4I2I
 ý30± ÿþþ#'R'44
?M4&()þv þ ÿv ÿpýMT! S c([± ÿ# ý±þÿ30 þI?pþ þUv þ ÿv ÿpýmR
 þ'*-+f449
 þ ý30± ÿþþq'
@ þ@ þ± þI?pþR
 þþf+F?GUWVÕÖ± þ`_a
4 ÿm@ þË30@ þµ*%! þ!*J'þa9
 C?p
3 ýX
? QCv ÿmrO ý3M@ þKv
ÿpþþÌ
 ÿ<Rþ)þ
o þ
3MþV!<T$?464<?pþ$R
 þ'6ÿpþF
304P?MR
 þ5(),v ÿ± ÿP ÿ04v ÿpþ530 ÿ+Fp
? þ þ504
@þ'% ÿ@ þC2O
 þU4
44
!#rM?pþ þ ÿ0v ÿpýmR
 þ'± ÿ0&R
 þpZ
4@ þP3Mm0
@þ30f þÿ3þý± þ!L×F\+ þ± þd*V(bQ?pþ
 þN ÿU+F?04
?S+ þI?d± þÌÿpþý± þI@ þ34*a
+ þI@ þ þÿ
ÿM\±
 þZ
 Y UW[ÕKÖ \YÖ U']_^a`5 þ± þ`_a
 ÿ® ý4?P!YT$3
? þ þO
 þ?18/
4} þ?pþ@ þ± þE`_a
 ÿ®v ÿ
p
 þ,'7d± þF4O
 þFd± þ-'0@ þ± þE`_a
 ÿ()É

?V! 4 ï
{ þQ4'N0@ þ þÿ,ÿM\± þ0 ýE?
()T
 þe
v þÿK þ:B(bv ÿpý7344 ý±þÿ[04± ÿV*(b[?pþ83 ÿ®hB
Å '2 

 l$v ÿY+F?04
?U?pþ@ þ
@ þ>8340 þQ ý±þÿk
* þ
?S þ ÿv ÿ3ýI ÿp
 þR
 þÿp
 þÿ!
T$3
? þTÿM\± þ;P(J3M90
?	4 ÿM-ÿP
E?v ÿpþFv þ ÿv ÿpý>9± þ_a
 ÿ
 þ- þ*/03M<E?pþ
?pþW
 ÿ?pþ4	(8?pþRp+9M! T$p
? þ@ þR þ ÿ30O
 þ3K4P°±ÿK%þÿ4N042
 ÿ	(83M

?µ!<rM?
 þoM0 þ*/(V± ÿ/3 þX
 þ± þN@ þTþþ
± þQR
 þ?d1E,'I
>a-/30 þ*
+ þ
ÿpþþC'Oþÿ3@ þF?5?3þMO
 ÿM?þ± þL3
3 ÿ3
 þ0v þ51E3~:;4±. þfR
 þ?/:
! üÐÿM?pþ)
 þoM0 þQ4
8Pv ÿ ÿpýN ý±þÿA?-
± ÿPbkþo/a80,?pþ4,04± ÿ0<'IM
 ÿ0P4
5
03vÿpýÜþÿ14 ÿO
 þÿ
03M8+F?M@ þCR
 þ?d14I2p
 þË30þZ
 ÿ'v ÿpþ®()
 þE ÿ®+F?v ÿ® þ
3M þC0 þ
MP ÿ! ü ? þo/a þ4704± ÿ3þd± þEI?807'3
3 ÿ(b@ þ@ þþÿZ
 ÿ0 ÿ>+F?4 þ
@þP ÿv ÿpýP+f?v ÿY
E4
J4 ÿY0O
 þþR
! cþQ±ÿM?pþY
 þoM0 þ84f3'PþG()
'v þ
?CP' þË340O
 þÿP()243M@ þI03
 ÿÿp
3 þU
 þE ÿ#+F4?v ÿ þ þÿ4F' þ± ÿ
 þC± ÿ
?pþ$'R
 þ
`_°
 ÿ:
! ü[4'M*/?pþ@ þL@ þQ ÿpý ÿpý4
3 ÿ95?pþBdTÿ4± þþ · a
 þQW
" þ þ
E?
ü['/
4
 ÿ#%3M23
3 ÿ
?0v ÿpým0ÿpý3
3 ÿP± ÿ3ÿ3þX± þ?4
 þ'Z3
3 ÿ&4%' þo/R
 þ4O
 þÿ!
T$p
? þfþo/
 þE4O
 þÿ>+-34ZR
 þC þ43M'Pþµ*9± ÿ®+932W?138@ þË13@ þ°?X0 ÿ&± ÿ
Rþ?/µ3M± ÿ
 þ!
T$3
? þY4'4P°±ÿPa44
 ÿX?+-þY+f44AO
 þÿ ÿ#4P ÿX?pþUMP ÿ&(f%\+ þÉ
 ý4
 ÿ	þ þ
73
±
3 ÿ04
 ÿ)
 ÿpþp+9.1!9T$p
? þ[(b44d+Fv ÿ3ý84A± ÿ¯þ± þÿ$?5/

3M@ þh eJ¿/B
¼ f8¼ gih0º À
egÁ)¹¼ þ * · þþ>R þFÛ/v*gvww/v*aÒA3v ÿ3þ · þ
 ÿalE!,+c ÿvww/v7v ÿKWH þj
+ c<.°*0/
R
 þ þ
'4
L344þ
?®S3
 þP± ÿZd± þV!Gc ÿ®'þvÿpýG'm4'8vÿ®'/v ÿpýY?pþC@ þý ÿ09?'()2j
* ü6TfÏNT
03ML4QdW
+ ÿ ý±þÿpþ'> ÿR?pþP/
6%d
+ þÜ
 ý2µ!PT$?4[+A>Y± ÿ360 ÿµ*g03MN3
E?

k aÞ%^V\'9EéMdBbKl2dB~B^-^'B^A;ié EB$B^EnmµEWo\Bit^B\\~'Fqpg;\8 iNrOr=s¢;
t v)u \B~5~;5BdVB6Eé B~Q\'[^[~E5dBV~^~Oé`Et^5\B^<BOB^512l 15
w ~^~\$Eéé µm BE
ëKx

í[î

t}-m{t/s$q

í

os0ïðptÊ{añ

l ñqMð î
í a

4ÿ>@þãþo1Rþ
þR'Uþ
Ìþvÿ
@þvÿpýG3M'Pþ®vÿm?pþP(i3M3M@þ!ÉüfLY@þ3N(
ü6TFÏNTL]^8
4
 ÿ*6?pþ@ þC+A8G/
-°\+ þI\± þX± ÿ ü6TFÏNT 'I7dW
+ ÿ®%d
+ þ*6+F?2
?
@þ30þ ÿC7@ þ./M\W
+ ÿC(J?pþcü6TFÏNTn@ þý4 ÿ%
P7$
3 ÿ4
 ÿ?
 ÿpþp+9.a!,TFp
? þf þý ÿ
 ÿpþ~:
+-.@ þ./MdT
+ ÿW0 ýþW'm
@ þþKî
 ÿ0 ÿ<0@ þ.1dW
+ ÿ®v ÿR
P83
3 ÿ2
 ÿ8'1þP!
T$?2$@ þ./M\W
+ ÿS2''v ý±ý±þ@ þG()423M@ þ$(<± ÿY?3þQ
 ÿ'½
 ÿpþp+9./Q
[?pþI
3
3 ÿ'*
3
E?	A?pþNA'e
N
 ÿ'º
 ÿpþ;+-.°X
! ü[9'E± þ
 ÿ4 ÿ+F2p
 þf+A5?13MAMdW
+ ÿV!6+c ÿC?pþQ(i3M3M@ þ*
<4<@ þ' ÿ0v þ5'Üþo1R
 þ
<?09'O
 þTÿpþ;+-.
 ÿ'4 þ6+f441R
 þ$40 þÌ
 þÿþ3v ÿpýN7300 þ*
4'03MþS
R
 þÿpýK'(bp+- þ ý±þÿ!ITF?4T
 þo/a þMP4
2U4423''þ[?pþI%þÿ/:
4,13 ÿpþ042;Y(53I
 ÿ ÿ06@ þ'3ME
 þ73
3 ÿ0 þN?pþ@ þ ý±þÿ84'()G
 ^@`y`A(5?pþP()4\+Fv ÿpý

þE4/­6
 ÿvÿ13M3
 þ
o þ
3M ÿz<P ÿ'v ÿ3ýMa
* bkþo/a þF4 ÿ	'8(i443@ þ*/( þp{<\ þ44042;*
 ÿK2O
±
 þ þ'% ÿ þ!9³Q3$
E? þÿ3M þ5?Fý±þÿf4'()C4%(g?pþ þ!
T$?04V0R
 þg4V@ ý± ÿ0} þIJ()4\+F! · þ
 ÿIÛ5\12p
 þt± ÿ84423''± þ:þoM0v þ,?O4g3 þ
?M3
3 ý?M3Mg?pþ9a
 þd! · þ
 ÿ|>f?g?pþ?ÿpþ
 þ70

. ý3
3 ÿ07p
 þ
_ ÿ ÿJ(0r · ü[*R
 þp
;1R
 þ*F()Pf± þ`_°
 ÿµ*F± ÿÍP
E?v ÿpþm þ ÿ0v ÿpýWR
 þ'E! üÐE$@ þ30()K'R
 þ
`_a

P
E?v ÿpþ- þ ÿv ÿ3ý5
 þE'O@ þ9v ÿ · þ
 ÿ7M!gTFp
? þ þ9v þ ÿv ÿpýF
 þE't4þg3M''ÿIþ3
 ý±þ
 ÿ®?pþm}ü ýÂ þ Á)üÁ)ºÂn¾EºÂ0»Á)üÁ)ºÂ þ '/
4þX+F? þp
±
 ý±þa
! ü '± ÿ4 ÿZ
 ÿ0 ÿ®'R
 þ
`$
_ þ7?pþ

 ÿ4 ÿ3
3 ÿp
 þO+F?04
?N'þ:B':;þN'± ÿ4 ÿ8IR
 þAp
 þ!Oï
{ þF@ þ@ þÿ6%4± þAQ0
@þ30V()6'O
 þ-(?pþ þ-R
 þ'*+F3
? þ@ þ9 j %± þ-FE þ3kfO
 þ± ÿt?O?pþ-v þ ÿv ÿpý
R
 þ'[@ þ þ± þf'R
 þ
`k
_ þK
4$(60R
 þþ!5Y
³ ÿK?pþ7?pþf?± ÿ0µ*0
3
3 ÿþ@ þoM0 þ[@ þ
@ þ@ þÿþ&'R?Md+ ?0P'O
 þK([?pþY þ ÿ ÿpýSR
 þ'EPMa
 ÿMÌÿpþ
 þ4Z@ þ þ± þC?3þ þ
R
 þvþ! · þ
 ÿU
x þo/þÿ$?pþ>E°@ þ34A(b$?3þ>7304 ý±þÿ$3 ÿU
Å '2 

3 !
·
rM74O
 þN+Fp
? þ þ8
+ þIv ÿïÿpþý4± þP0t@ þ34* þ
 ÿXCC\12p
 þQv ÿ
@ þO
 þÿ
 ý4?PL()> þ:B(bv ÿpýY?pþC7304 ý±þÿ>04± ÿZ± ÿR þ± þ()1v ÿ3ýY*6 ÿpýY+F4?WY+-'~:;
@ þ

0v þo/pÓ± ÿ412C± ÿ0ñ
 þP04
f4O
 þ
a þo/4;q þ3!ÉT$p
? þ´þ0E4
F þ3	?M\+
83
?& ( :B0244 ÿ/:B()4R
 þþ03MZ() ÿpþ	(F?3þ	 ÿ
@ þO
 þÿ5 ý?0P>\± þ'±ÿ0
.
±þ`_°
 ÿµ!RT$p
? þ0R
 þ
 ÿ
43p
 þ8+F4?Zm4
3 ÿR(F@ þ4þ®+-.Z± ÿ0®2p
 þ8(bI(i3M3M@ þ
@þ þE
?µ!

~½õOöM  ú-µ¶·¦¸k¶û.½¸W  

{ïþ,RþývÿL+F?Lf7344ý±þÿ#þo/aþ<()OÅ (	
 OÅ'2 

3 ?t2V3þ>?M3pý?M3V?pþ
0R
 þA'P44430''þF?3þQ3
 þk
_ ÿ ÿ09± ÿ	43
 þ!<T$?pþQþ
ÿYACM@þvÿpýÅ'2 

3 *
+Fp
? þ þI8340 þ7 ý±þÿL?d± þP?pþQ\W
+ ÿv ÿp
 þR
 þÿ3
 þÿf04± ÿ!7sJþ>v ÿS?pþP þ
4 ÿm+ þP@þ
Å  (	
 *+Fp? þ@ þcþ
E?U ý±þÿf3@ þ$ @ v ÿ$832 ý±þÿ$a4± ÿµ!
c~P ýv ÿpþ$>
 þÿ>+Fp
? þ@ þ$N± þ?04
 þ$?<2± ÿp
 þ ÿPL04± ÿpþ6()<?pþ$a3M% þAR
( þo104 ÿ
 ÿL0 þ<
4v þ
 ÿµ*(b
±
 þoM0v þ<Jv ÿN?3þ2DO?/k
_ ÿp
 þV4 ÿQ'fÊS!gst±. þ<?pþ2DO?/
_ ÿp
 þ*
?pþ@ þP2[K2± ÿp
 þhi
4 þ ý±þÿ j stkl[(bÄ+F?4
E?GKP04 þ8d± þI
 þO
 þ@ ý±þ!×fd
+ þ± þ*Ov ÿG?4

 þN?pþ þL@ þN;+-d± þE­<?pþN(i>h j rOkl-d± þF(b$2'±ÿ?þo/04 ÿµ*M± ÿ	?pþNv ÿþO
 þ4
h j c~klA\± þF()$'± ÿ'( þ ÿpýP± ÿY0 þA() rX's,!
{ þU3O
ï
 þY± ÿ# ý±þÿ3þ ýÿpþP?3
 þ± þR
 þ&?pþYv ÿ44,a4± ÿI()r-*6cE*<± ÿqs<*<?M\W
+ ÿ
v ÿrO ý3M
 þLÛ	± ÿX
 >1!PT$p
? þ þP þP402`$
_ þµ*°?pþN?± ÿR@ þ44'2
*µ04± ÿ
 U()N?pþP03% þ7(
4423'' ÿV!JÒA4
4*d± þ,rG4j
 þ?pþ6
4 þ
ÿpýN0 þO <hiv ÿI'þfÎ$³QstsJ|-Î5T5cHNÙLlV
,2,p
 þ44± þv ÿpýN?pþÜ'7d± þ-cFh)+Fp
? þÿrW4<v ÿ,'þQDQ|,sJ,c :Q|,"FcHNÙLlE!"Fd± þAc6
± ÿãþ4?pþ9R
 þ
@þ
 þ/v ÿpýP0 þ= <0P()z\± þQr´h)+fp
? þÿYcA4F ÿY$"f|-ÎA|,,c :[cHNÙ¶þ\l5[F
± ÿU3
 þ4± þ
?pþ '4± ÿp
 þfsnh)+F3
? þÿY$4$ ÿY$DQ|,sJ,c :Q|,"FcHNÙ¶þ\lE!-c(OsZ4Fv ÿY$"f|-ÎA|,,c :[c~HQÙ¸þ*
ëdë

ª

K bl ^^~'  { 
bl \^p1

RR 

mknpokmkq

rJ:;
2þ
q®cp:;pþ4±þ

Î$³QsJst|-ÎAT$cHNÙ



/

þ4þ

þ4þ

RR  þ2þ
 {  "F|AÎA|<c1:fc~HNÙ   ul4B~~~^
/ rt:;pþ2±þ
cp:;pþ44±þ
cp:B@þ
þ±þ
 sµ:B'±ÿP
sV:B'±ÿ
)
 DQ|,sJc,Q: |,"FcHN Ù  ubl \~^^1
RR  þ2þ

)
K lb\^p1  DQ|,sJc,:Q|,"FcHN Ù
RR  rJ:;3þ4±þq®cp:B@þ
þ±þ
rOý3Mþ>Û1­2,
D 4±ÿ0A(bfd±þfrhiþ(bEl5±ÿKcNh)ý?ElE!
RR  þ2þ

K 4l ;E5{'  T$"Wü[H · ÊUc~T$T5c~HNÙ   
c;:B@þ
þ4±þ.
l2E

sV:B03þ


þ
4

@

þ
  
/

 {
 ¡¢ ¡ K  l2E\
c;:Bþ
þ±þ   
þ2þ
D
R
ü£d · c~HQÙ
sµ:B'±ÿ0P
¤ ¤
)
K l4B~~^ {   "f|-ÎA|,c,:[c~HQ Ù ¤¥ ¤ ¤ ¤ ¤ c;sµ:B:B0þ
þ30±þ þ.
c;:;3þ4±þ R
R 
sµ:B@þ
þ4±þ

rOý3Mþ¦>1­2D,4±ÿY(b$?3þL4±ÿpþFs,!

?pþÿK5
±ÿKþ
þ±þL?pþLP0þ=<8()±c!a³[?pþ+F2þ*MsR
34	RþQ03''±ÿP4'vÿpýI
'|9?WhivÿYþ>T$"Wü[H · ÊUc~T$T5c~HNÙLl9F030vÿpý8Rþ;+þþÿU
ÿ8hivÿK'þ.Dü£d · c~HQÙ>lE!
ü[6O
 þÿ ÿpþI%d± þ*a4± ÿg@ þ5@ þ@ þ@ þÿþI3 ÿpý[r · ü[½
! üTÿr · üÓ?Ofk
_ ÿþA þ6(aþ
hi! þ!*°?pþ>± þ4
 þElF± ÿU44d+A0 þ7þ:B':;'þP'± ÿ ÿ>hiB! þ!*a?pþI þ
þ\
 þp
 ý±þfR
 þ;+þþÿ
±þ4
 þlE!>T$p
? þ803M% þ7(,?d1v ÿ3ýC'þ>4F'K4143
 þ>?pþI ý±þÿ]^Ld± þ4O.Sv ÿ'C3M'./!
ü´'þN+f?±
 ÿ	v ÿ0
Pv ÿpý>d+ ÿM-()±± ÿP?3þ$'þN4A± ÿGÁ)ÂÁ)üÁ)ý½ þ üBýü;¼
! D,4± ÿÉþ
o þ
3 ÿ
Rþýv ÿ5v ÿK± ÿUv ÿ4%'þ!
D94± ÿOþo þ
3M ÿ/

3M<,?pþF ý±þÿ,±. þ9
 ÿ*13
?, ý±þÿ9rm./v ÿpýL
 ÿrJ:;
2 þ

Prt:;p
 þ4± þd!®|9
?# ý±þÿ?m@ þR
 þ'4@ þ([%a þ
 ÿ0*930 þI(F+F?04
?&PdZR
 þ
±. þÿ() þ
?R(9Q'þ
! ü a4± ÿmp
 þ ýÿpþN
± ÿ'R
 þ
()K?4Q30 þQ(bY
 þ
E?W'þ!8T$p
? þ

?4
 þP(A	04
32L
 ÿ()Ä?4N30 þL4N/p
 þ þmv ÿm?3þPr · üÉÜ
 ÿ ÿp
 þþP ÿ4'4
!
c[4[30O
 þG?Q()3M?pþf
4þ4/º
* ÿMQ'R
 þ
`$
_ þU3
? þ@ þ*µ@ þ3 þS'	±. þ8?3þ7
_ ÿV$
3 ÿ/:B4O
 þ

?4
 þL(6v ÿpýv þL
 ÿK() P'þ!
s þ[3['R
#
 þ
()	?pþ7 þ[(<
 ÿ[()T
 þ
E?m(6?pþI ý±þÿhir-*%cE*°sgl5 ÿY3MÐ
 þo/P0 þ!frq?
;+-L%40 þA
 ÿ­Ort:;
4 þ
,±ÿrt:;p
 þ2± þ!OT$p
? þA_0O
4 ÿPO
 þ± ÿ6?0,rm
4 þ
<P0 þ
 ÿz
±
 <\/*<± ÿ0W?pþ	 þ
 ÿ®
 ÿXO
 þ± ÿ8?I8pþ4± þ7?pþ þ	þP7'GcE!O"$\± þcL4'
?Ip+9W
4 ÿ­Kcp:B@ þ
 þ± þY± ÿXcp:;p
 þ4± þd!®T$3
? þ_a'
 ÿ#O
 þ± ÿ0Ic>@ þ
 þ± þ0v þ= <
()Ìr-*6± ÿZ?pþ	 þ
 ÿXO
 þ± ÿ8?8pþ4± þ7?pþ þ	þP8'ms<!Os?8?M@ þþ	
 ÿ­sµ:
'± ÿP*tsV:B03 þ*O± ÿZsµ:B@ þ
 þ± þ!YTFp
? þ_0>
 ÿ®O
 þ± ÿ>sÓ'± ÿPLS'S|9?µ*g?pþ
 þ

 ÿ	?0$9a3 þAR
 þ;+þþÿ	R
 þ ÿ*M± ÿC?pþQ?4?0$A@þ
 þ± þ5a þ= <8()
c!/rL
 þ
?Sr · ü>*/?pþN þ5(g4d+A0 þN
 ÿ05(b þ
E?U'þL2-
 þ
$
_ þ	v ÿ	rgv ý3M@ þ5ÛI± ÿ§
 >

¨=©K©

í[î

t}-m{t/s$q

í

os0ïðptÊ{añ

l ñqMð î
í a

vÿmP2t()ÿÜÿpþo1Q'K?pþ'þ!rMþo/aþ*µd±þ8rÓ
±ÿRÿY.±þ
4ÿRrt:;pþ4±þQ()
$DQ|9sV1c :[|9"$c~HQÙ¸þ!
T$3
? þ[}ü ~ýÂ þ ÁbüÁiºÂK¾ºÂa»ÁbüÁiºÂ þ hiB! þ!*?pþ-4± ý4

 þo1 þ ÿg4R
 þ4v ÿ3ý$?pþþp
 ý±þEltv ÿ8± ÿ8r · ü#04± ÿ
pþ
ER
 þ[?3þ> þ$(6
 ÿF?Lþÿa þLP'þ:B':;'þ'E± ÿ ÿ	'1

3!,T$p
? þNR
 þ'B
 
Oþ± ÿ j üfH[D8*^«
k ªXO
 þ± ÿ j ³N"L*^kP± ÿ  Ì
 þ± ÿ j HN³QTN!^kPT$3
? þQ
 ÿ0 ÿ j þ4 þkP+F44aR
 þQ3
 þk
_ ÿpþ
?M!6T$p
? þ$'± ÿ0 ÿP
 ÿ0 ÿ,(µ ÿpþf ý±þÿA
± ÿ@ þ( þ-'>?pþ[
 ÿ9(µ ÿpþFA@ þf?pþ
ý±þÿ!9T$?04A45R
 þ
3 þcþ
E?U ý±þÿf453O
 þ	'PR
 þN@ þ
± þ>'P+F?$$?0A0 þ± þU?pþ
ý±þÿfM ÿpýM!6cp½
( ÿM5/4a þ*1 ý±þÿ[
P7$
3 ÿ4
þL?pþ4$
 ÿU
E?M4
 þ!
³ ÿ0
 þP± ÿR ý±þÿ]^8
 ÿW@ þR
Y
 þ'@ þ± ÿ>4d+A0 þ
 ÿ0L() þ
?Z'þ?d± þR
 þþÿ
pþk
_ ÿ3þµ* j þ4 þkS
± ÿRR
 þPp
 þk
_ ÿ3þµ!T$p
? þ'E± ÿ ÿW
 ÿ ÿ j þ2 þkU4R
 þ4 ÿpýC± ÿW3Mýv ÿpýîþp
 ý±þ
()±8þL4A± ÿC0@ þ/4 ÿCp
 þÿMvÿpý8?pþN þA(t20@ þv ÿv ÿpý8
 ÿA?5PdR
 þ[±. þÿ
()Ô?pþ'þ?8@ þãÿM8@ þMm
d± þ þZ1m?pþ>'E± ÿ ÿW
 ÿ ÿ0!rMß
 þo/P0 þ*
v ÿrO ý3M þ¬>1*ts<]^L?M@ þþ'±
 ÿ ÿ
 ÿ4 ÿQ()Ð'þTFW
" ü[H · ÊSc~T$T5c~HQÙ @ þGh)c;:B@ þ
 þ4± þ­
sµ:B'E± ÿPElE*Vh)cp:B@ þ
 þ± þ¦Zsµ:B030 þ\lE*M± ÿ j þ4 þ!^kRs
± ÿ	 ÿ4±. þLsµ:B'± ÿP-AsV:B03 þ[()
?4A'þ!-×F\+ þ± þd*0\± þ$c9
32±. þ>c;:;p
 þ2± þ$v ÿ'þC(gc;:B þ
 þ± þ!,T$p
? þ þ(b@ þ* ÿ?04A
 þ
 þË13 þÿA'Sh'h)cp:;p
 þ44± þq
 Xsµ:B'E± ÿPEl£ª´h)c;:;p
 þ2± þq
 XsV:B03 þ\l'lE!
j þ4 þk4)
üÐÿKr · ü´02±
 ÿ þ@ þ þÿA þ5(t44d+A0 þQ
 ÿY þË1p
3 þÿ
 þ!6c ÿ	02
34*/804± ÿ	4-?pþ
 þ5(O4%

 ÿY þË1p
3 þÿ
 þ$?5Rþýv ÿ	v ÿK± ÿKv ÿ2a'þ7± ÿ	R
 þ?pþN'± ÿ0 ÿ	
 ÿ4 ÿ!
üÐÿ þo/P0 þY

 ÿÓ þË3
3 þÿ
 þY4\+ þqXr-]^P04± ÿ&2Yh'hirJ:;
2 þ
®«cp:;p
 þ44± þlE*Qhirt:;
4v þ
­
cp:B@ þ
 þ± þ\lE*<hirt:;p
 þ4± þB
 &cp:B@ þ
 þ± þ\lE*O!!! lC+F3
? þ@ þ>r&±. þQ[
 ÿ[± ÿYa þ± þfcE]^[
 ÿ[
þ
?G'þU ÿ	?pþ> þË1p
3 þÿ
 þ!
üA93
3 ÿ/:B4Ì
 þ*?pþ þfr · üÓ04± ÿ0<@ þFv ÿþ þþPv ÿI?pþ$()4\+Fv ÿpýL± ÿ3ÿpþ½
! üAXþ± þ2
@ þþ
4O
 þPþV#
* þ± þ ý±þÿhir-*Vc*Jsgl[4N>ÿpþP(-?pþP'þ8v ÿQ04± ÿV*V± ÿRLþv þ
N?pþãÿpþo/

 ÿ'L±. þX
! üTý±þÿ-
?M1 þ$?3þ,
 ÿ,v ÿp
 þR
 þÿp
 þÿ!gT$p
? þIMÜ
 ÿMXÿpþþP'7'
 ÿ
? ÿ} þ
ÿ	
 ÿ	
?M2
 þ!,T$p
? þQ
?M2
 þ[(t
 ÿKP ý?,Rþ[0 þµ*1(b?
 þoM0 þ*/ ÿ	 þÿPv ÿM03<()
?pþÌþÿ/ ÿO
 þÿ!Ìü[?Mp
3 ý?Y
P0 þþP02± ÿm+932v ÿ
433
 þ7?pþa4Q()>
 ÿW
E?M4
 þ*O
 þÿ ÿpþZ°\± þ*6p
O
? þ@ þP
+ þ þd± þC733ÿ'R
 þ
`$
_ þmv ÿR?pþr · ü±04± ÿ0!C³Q3M> ÿ þ(b8Mv ÿpý
?474L?0>?7?pþ()1
30>(5?2N0R
 þ74> ÿW?3þ± þ`_°
 ÿR(5
 þþL%3M7
@ þ


 ÿS þË3
3 þÿ
 þ!,T$3
? þN04A()F
 ÿS
?M4
 þ745@ þv þ± ÿ5'P?pþ þ>R
 þþ!
³ ÿ0
 þÉþ
E?& ý±þÿ?I
? þÿX± ÿ®
4 ÿµ*<4- ý±þÿ@ þK3O
Y
 þZ'S0@ þ± þ	?pþC
4 ÿ
(<?pþ8?pþN ý±þÿQ?N@ þ8Ì
 þÿ ÿ3þSv ÿG[r · ü¶'± ÿ ÿU
 ÿ0 ÿ!frMY
 þoM0 þ*µr-]^
'± ÿ ÿ
 ÿ4 ÿNO
 þÿ ÿc]^L
 ÿ*t'Yr ÿpþþ0N'Y0 þ± þP+F?NcQ4µ!ÒA þ ÿZ
dT
+ ÿ
 ÿC± ÿP? þF(%?pþf?pþ,@ þv þ± ÿ9ý±þÿdhiElE*M± ÿ ý±þÿ9.ÿM\+F<?pþÐÿpþo/,'þ['>+F?2
?
Q+F42V'± ÿ ÿµ!LT$3
? þ@ þ4[ ÿY ÿpþ%0 þÿ3þo1L'þR
 þ
3@ þ8?3þIr · ü[N@ þP3O
 þG'
Rþp
 þþEPv ÿ44
!SrM
 þoM0 þ*<4($r=48v ÿ®IÎF³QsJst|-ÎAT5c~HNÙ 'þ*9± ÿZ48
E?M@ þ
 ÿ
rt:;
4 þ
*g± ÿRQ0 þ± þLcF./v ÿpýY
4 ÿRcp:;p
 þ4± þ*µ?3þÿRQ+F44g'dm ÿ>Î$³QstsJ|-Î5T5cHNÙ
'þ!TFp
? þ/
 þN(-R
 þv ÿpýKv ÿmY'þ*O
?M1v ÿ3ýY± ÿR
 ÿµ*t0 þ/v ÿpý	?pþP
 ÿ0N(A?pþ
 ý±þÿ*0?pþÿUd/v ÿpý'ã

 ÿpþo1f'þ*a4A þ
 þþSv ÿp
 þ
_ ÿþ!
· m(i*<
+ þK?± þKR
 þþÿX3v ÿpým
Å '2 

3 +fp
? þ@ þ¯þ
?# ý±þÿP?8\W
+ ÿ&v ÿ41403
04± ÿV![c(<
+ þ3O
 þP
Å  (	
 *µ?pþÿòþ
?R ý±þÿL3 þ[?pþO
 þ834 ý±þÿ[04± ÿS'Yp
 þ
4p
 þI
·

 ÿ! ü 832 ý±þÿI04± ÿ®48()O
 þX1R.1 ÿpý j /3
kXhip
 þk
_ ÿpþXv ÿ
3Ma þ
 ÿ¯>1!4vdl
(<?pþ804± ÿ0$()[r-*°cE*%± ÿGs<!aTF?4$0103
F/p
 þ4f?pþ7
 ÿ
E?M ÿM30FR
 þ?d1[(6?pþI ý±þÿ*
+Fp
? þ þ j '
 ÿ0
?M ÿ3kKO
 þ± ÿ>?>Üþ
E?W2O
 þP'þa
 þ± þR ý±þÿ>±. þ8± ÿR
 ÿV*J0 þ± þ

 ÿ[(<?3þ[ ý±þÿ*V± ÿS?pþÿS'± ÿ4 ÿ$'Kf
 ÿpþo1['þ!NT$p
? þ7/3
$02± ÿS4F(bEO
 þµ*
þ þÿ444*11C.1v ÿ3ý8?3þ7ÎAþ4±
 ÿ	0103
9(g?pþNv ÿ01233M''ÿU'þ$± ÿ0	?pþLv ÿ/:

¨=©¨

ª

mknpokmkq

þþ
4ÿU(O?pþL'E±ÿÿK
ÿ0ÿ!,ÊS304ý±þÿf
ÿWþÿ0þLþ:B':;'þP'±ÿÿ

vÿW?pþ0103
L04±ÿV!UrMþo/P0þ*<(A?pþ	ý±þÿ @ vÿm.±þ	?pþC
4ÿIrJ:;3þ4±þI±ÿWcp:
@þ
 þ± þQ± ÿsµ:B'± ÿP*?3þÿ4a ý±þÿ-+F24M'± ÿÿ()É?pþ @ vÿ9'þhBÎ$³QstsJ|-Î5T5cHNÙ8*
"F|AÎA|<1c :[cHNÙ8*%T$W
" ü[H · ÊUc~T$T5c~HQÙ>lA'	?pþ @ v ÿQ'þUhiDQ|,sV1c :Q|,"$c~HNÙ8*°DQ|9sVc1:[|9"$c~HQÙ8*µ"f|6:
ÎA|,,c :[cHNÙLl5@ þ@ þ þÿþY1K'a þ5(6'þQv ÿY?3þ>r · üff()fr-*0c*a± ÿSs<
! ü«832 ý±þÿf04± ÿ

 ÿ2'[(,?pþ þQ(92t
 ÿ@ þËp
3 þÿ0
 þQ?NRþýv ÿS ÿS @ v ÿNvÿ04V'þ(9?pþI/3

04± ÿK± ÿ0KR
 þ?pþ>'± ÿ4 ÿC
 ÿ0 ÿ!
{Íp
? þ?pþ6?pþ543 ÿI4<
Å 2 

3 9
Å  (	
 *[832 ý±þÿO04± ÿÿpþþ0O'[R
 þ-(bEO
 þ
'±þE(b¯ýaV7304ý±þÿF
EvÿÿYRþþ>hi@þþ7'þmÛ(6rOý3M@þvdlE!°::þ_a
ÿY(
ý0Q0Rþþ	
ÿ4K(8.1vÿ3ý®+f?pþ?pþWý½)½9(8?pþR
ÿ=þË33þÿ
þY4\+-þ´n?pþ
/3
A02± ÿK4'()?3þLR
 þp!

³ ÿ3þ-
4t(ghý0blJRþvþV(0a4
34g4%±ÿ
þ*+f?4
?84gM@þþ7?3þ@þ*4t?
Y
(g(ba4pþÿC7304ý±þÿA
4ÿ5?5+þN+-±ÿ53M$ý±þÿ$'4+-d1$d4µ*
4vþ Âú\ýÁiýÂ0¾E¼
R
 þvþ! üTÿ þo/P0 þY40R
 þ;¯DFv­  h)c;:;3
 þ4± þ­
 ¸sV:B'± ÿElE*9+f?4
?q'þ?0
?M304Y+A/[
 þ>?pþ7
 þI?fc$M
 þT
 ÿM[pþ4± þ[f?3þ7O
 þ84O
 þ>?[sX4F'± ÿ'vÿpýM!
T$?2f0R
 þ;Y0@ þ± þÿL0 þf?0LPm4 þI()Ä?pþ4± ÿ3
 þL483±ÿpþ3K@ þ
 þ/v ÿpý
ÿpþ+Ü0	(bÔcf+F?04 þ8'±
 ÿP4'vÿpý	4p
 þLY'Y|,?µ!PTFp
? þP þ
 ÿR2%±ÿN
4L/:
M@ þ þUp
? þ þ74 & ¼ þ û/ºÂ þ ¼[R
 þvþ!5T$p
? þ þ7R
 þþf'þI?f(<04
304f834 ý±þÿ

 ÿ&h)?pþ j ' ý±ý±þklf?f/

3M@ þµ*°?pþÿ þ± þÿ304U± ÿM?3þ[834 ý±þÿQ
 ÿ&h)?pþßÿ3þ
 þ~:
 j  þ'% ÿ þklQ+f446/

3M\
! üÐÿ þoM0v þ4L0R
 þ;XD-Û1­8c($rt:;p
 þ4± þ8?71

3M@ þµ*g?pþÿ
þ±
 þÿ34	sR+F24
 þ
o þ
3Mþ8sµ:B@ þ
 þ4± þ!
c(%?pþF02± ÿ,v ÿrgv ý3M@ þ9Û>± ÿ®
 >L@ þ[
>0 ÿpþv ÿ'777304 ý±þÿ,04± ÿV*+F44/?04,834 ý±þÿ
04±ÿU4'()	Rþþ£Dfv>±ÿ±D9Û²´üÐÿ'+þvÿpý?04$Ë13pþ'ÿS45a0	`e
34-[4%~:
a þ>()N'[@þp
 þN(6?3þ8p
 þþEPv ÿ ÿG4[0 þG ÿG/43gv ÿ'R
 þ
 ÿU(,?pþIr · ü[²
! cþ
?pþ@ þ@ þ ÿ4mU
3M0 þP(A± þRP4*g40v þIr · ü[> ÿ?4c
 þoM0v þ³CT$?04L4423''þN?M\+
þ±
 þÿGP( þ+«20 þL ý±þÿ*°+Fp
? þÿU ÿþ
ÿpýM*a
± ÿ þo/?00$
a þ\
o ý0J
 þ?0/*?3þ@ þ
P./v ÿpý¯ý06 ý±þÿLRþ?d1L0`e
3f'K@ þ2
!ÎAv þY?pþ þI2N ÿpþþm(b> ý3[R
 þ:
?d1E
 ý3± ÿþþ½
* þ'R
 þ
444G>?pþÉÿ137
 þ7± ÿR
0v þo/pm($ ý±þÿ8v ÿ
@ þ@ þ!KÊU/p
 þ

3
? þ
./v ÿpýY(i34S3M'Pþ7?4Q/
 þÌ
! ü[

 ÿpý	'Y3M>/p
 þ6
Ep
? þ
±. þ*O?pþ0103
Q04± ÿ
()Fr-*cE*± ÿ0YsW2~$
_ þ5
 þþ£
 DFvL± ÿ0´
 D9Û1!
"fý3fý3±ÿþþY@þm4' ÿpþþ3þn()þYþÿ0vÿpýM! · 3M%þU2±ÿpþ	s<]^C'±ÿ'þ
ý±þP
 ý±þµ!ZT$3
? þÿZ ÿ3þ	v þ ÿv ÿpýSR
 þ'?P
34®R
 þ	04 þ®48'Rp
 þ þþKs,]^
 ÿ
sµ:B'E± ÿP*5+f?4
?q?pþ@ þ()þ	@ þ± þÿ?04
 ÿn() R
 þv ÿ3ýR±. þÿÍ(b 'þmT$T
" üfH · :
ÊScT$T$cHNÙ8
! üf(bþC0/v ÿpým þ ÿ ÿpým
 þE'*9 þ± þ`_a
 ÿqPXR
 þK@ þË13@ þµ!XrM?4
02
345R
 þ'7hip
 þv þvÿpýP± ÿY
 ÿ°lEk
* ÿM@ þ± þE`_a
 ÿY2)
 ÿpþþp
 þWhi þþ · þ
 ÿKlE!

c ÿU7344ý±þÿ[34ÿµ*+F?Tý±þfP1_$þK1	vþÿvÿpý²m{n?M(bEPF±ÿU±þ`_$þF?pþ
/3
7r · üQ²¯üÐÿZ+F?MSþ(bL@þ04>(A±þ_a
ÿ®()24*O±ÿW+f?747@þ04@þa²ÜT$?pþ
±ÿ'
+ þQ'Y?3þ þËp
3 þ ÿNp
 þR
 þÿG ÿm+Fp
? þ?3þLN4>
Å  (	
 7
Å '2 

3 !7c(A
Å  (	K
 *
?pþ> ý±þÿF+f?K?pþÜý þþ'f
a3M ÿJ°\+ þd3
* þ! ýM!*°2± ÿp
 þ$s®v ÿ	3ML
 þoM0 þ*aPv ÿv ÿ
?pþ130
f02± ÿmG0/v ÿpý	 þ ÿ ÿpý'Y4*V± þ()1 ÿpýC4*V@ þ0Ev ÿpý4Lc
 ÿpþþp
 þµ*J± ÿ0m?pþÿ
 þÿ0v ÿpý7I
1(g9'P20(t?pþN
 ý±þÿ5'3@ þ!6cp(g
Å '2 

3 *M± ÿC ý±þÿ$02 þ9v þ ÿv ÿpý7'
6\W
+ ÿPv ÿ0/4304± ÿµ!OT$p
? þ$v ÿ0/4304± ÿO@ þ$?3þÿP þÿ<'L?pþF
P03M ÿ2>%d
+ þ(i3
 ý±þÿ*+F?Mf(bEPg?pþA/3
t±ÿ07± þE`$

_ þt?OR
 þþg@ þ54~k
_ þµ!Jc(@ þ04t þ?ÿ3þþp
 þµ*
ÿpþLf@ þ> ý±þÿ$@ þa5?pþ$\W
+ ÿYv ÿ0/43004± ÿ!

¨=©Jµ

í[î

t}-m{t/s$q

í

os0ïðptÊ{añ

l ñqMð î
í a

c$4$3O
 þKp
? þ@ þN?0FP
?0v ÿpþLþÿ0vÿpýIRþ'$@þ704þCÿpþ:;~:;:B2Oþ>Rþ$ý±þÿ
?pþO?±ÿIvÿ70
E?±ÿµ*(aÅ 
K
 *?3þAý±þÿ6
:þ±þ$a4±ÿtL./vÿpý[3Mÿ0gvþÿvÿpý
yh Dg'þ*VvwwÑlE!,Ò þ ÿC?pþ þ[3Pÿ*?46aþ-Mþ-ÿM9(b/
3,ÿ?pþ[þÿÿpýLRþ:
'OR
 þ< þLh)?pþ<?0± ÿI'Lp
 þk
_ ÿpþA?pþlE!OcO(b/
3 þ6v ÿ0'þ8 ÿ?pþA3M
O
 þ$ þ3vÿ3ýF()¸?pþ
024
 ÿG(-Kv þ ÿv ÿpýCR
 þ'!Ic ÿm04
32*µ+ þP0M@ þQ?pþ þ± þ`_a
 ÿ2p
3 þ!8T$p
? þ
ÿpþo/Fþ

 ÿ\ý± þF3@ þ()3°0
z
. ý3
3 ÿU3
 þk
_ ÿ ÿ0 ÿpþþ3
 þK(b[3
3 ÿp
 þE'±ÿv ÿ3ý>@ þ± þ_a
 ÿµ!

¶½õ|· ·   û,

¸º¹{»

û ÷ ¸R·

÷ û¶±û ø ÷ µ

T$?2 þ
 ÿÓd/4p
 þp
 þk
_ ÿ4 ÿI(Nr · üf*A
 þþ*-± þ`_a
 ÿV*A± ÿ0qP
E?v ÿpþUv þ ÿv ÿpý
Rþ'!Yr8S
þ*O33ÿ70ý3M3>33ÿpþ±ÿvÿpý	(5?pþ@þ34Lvÿ?2L0Rþ*gP±ÿ(
?pþ þ7p
 þk
_ ÿ4 ÿA@ þN(bEP!

¼ }b ½¿¾®ÀÁ¡ezÂ {] Á¡]GÃ ekg­¾­ÄzÅ^ÁKÆÇÈEÉ]k^Æ

r · ü[L?±þLþ'N()3MLM±ÿý±þ7d±þ8
44
g02±ÿPhiHf24'ÿµ*6vwQyÊ?6DÐþ±ÿZÏ {ïþ42P±ÿµ*
vww/vdlE!YrM8ÿpþ*O33ÿ4.±þP
24
6a4±ÿ*t?pþP;1RþP(A_kÿ4þ:;'þ3M''ÿW02±ÿL3þW?pþ@þ
4\+F[%þÿ42Yv ÿ/k
_ ÿ0þChiv ÿ0p
 þþPv ÿ0þ\l$ þÿ3ý?G
4 ÿ þË3
3 þÿ
 þ! Ë&T$?2Fd/4p
 þQf
 ý/
/p
 þAW
( þ7R
 þp
 þ& ý±þÿP?P þY
 ÿvÿ1344W@ þ'% ÿ± þ'W?pþO
 þÿ1 ÿO
 þÿ8+f?M3M
±ÿU`_a
2VþP ÿ ÿY'C?pþ[R
 þ?/!f|6
o þ
3M ÿG± ÿSv þ ÿv ÿpýPUR
 þ> ÿþv þ± þmv ÿ
ßÿ3M°P± ÿ3ÿpþd
! üTÿM?3þA± ÿý±þN4,?0Ar · ü´04± ÿ-?± þN'þ*± ÿ?3þf02± ÿp
 þ ýÿpþ

± ÿ	3 þ[?pþ þN'þA'I@ þ þ þÿA3M0'.19(V?pþQ\± þ4°'.°!,T$?493Mµ/4p
 þO?3þf02± ÿv ÿ'
P2 þ-$
3 ÿ*?pþ@ þ1%þÿ24Pv ÿ
 þv ÿpý7?pþ[
P@ þp
? þÿ0444;8(J?pþ[04± ÿ! · þ54'
þÿ0v þI0`þ
 þÿL
 ÿW
?M4
 þ>>`Rþ@ þÿ[2O
 þ
* þ± þÿR4(,?pþP þÿ0'S ÿM03MQ@ þ?pþPO
 þ!
ü ?±
 ÿý±þ(5r · üÉ04± ÿ>4Q?>?3þm þP04
304Y
+ þ4`:;3þm'SP1p
 þ2v ÿpý	?pþ

 ÿ
3M@ þÿ[Rþ?/[(,830v þL ý±þÿÜ
! üÐÿG0'¯
 ÿ137R
 þf(,v ÿpý þ:; ý±þÿfa4± ÿF
± ÿmR
 þ
 þ± þR
p
 þP ÿp
 þR
 þÿp
 þÿ>± ÿ?pþÿP
% þv ÿ'>L'
 ÿ
? ÿM3<832 ý±þÿ904± ÿYh)(),+F?2
?
ý0O0R
 þþ[PGR
 þ8þþalQv ÿmK''v ý?'()+AP± ÿ3ÿpþd!7rOv ÿ44*%r · üÜ04± ÿQ
± ÿR
 þ
±þ`k
_ þR3v ÿ3ýC?3þP± þm%034N± ÿï
 þRþ
± þmý /üBº¹ýüBý 4ü)¿/¼º '¼üÁi¾YP1p
 þ6
Ep
? þ
./v ÿpýSO
 þ?M/*
þ! ýM!*a@ þþ¦AL3M?±
 ÿh~vwwlE!
ü¶2M±
 ÿý±þ8(<r · ü¸04± ÿFf0°@ þY'
24
t04± ÿF4$?[?pþ@ þ84Fã
 ý@ þQpþ
(J þ þ
?Y?$?AR
 þþÿ	M ÿpþQ ÿK3M'P4
2()Pv ÿ3ý8
44
%04± ÿ0z
* þ! ýM!*a þþLÐ
D þ± ÿY± ÿ
·
{ïþ44± ÿ=h~vww/vdlE!cp4P3
3 ÿ
v þ?Md+ 730
?#(Q?2PP ý?PRþY042
0 þ	'Wr ü[!c
³ ÿ&?pþ
?pþC?± ÿµ* þ43M ÿ® ýE?PP
± ÿqR
 þY3 þX' þ4± þSr · ü 04± ÿYhirM± ý±þB*Lvww ClE! ü
4M± ÿý±þ[(Jr · ü04± ÿ0,-% þ'702± ÿ,
% þC(VE3 þF þA49?-?pþQ4'þ5P
þo/@ þ6[04±
 ÿI þA3

v ÿ
!OT
H þ± þ?pþ þO()604± ÿ0J?6þË34@ þ9()P1± þ_a
 ÿµ*r · ü[
@ þP0@ þ( þE0 þR
 þ
3 þP?3þ
0 þoRv ÿþ
 ÿ0N?7
± ÿW1

3>R
 þ;+þþÿWE3 þNP±. þ?pþ
·
±þY?EY'± þE(b!5rMEPJ± þE`_a
 ÿU(bQr üff4FË13þ7'0?44
þU± ÿU+F4p
 þ43 þSv ÿ
( þ;:;
4
tv ÿ30''4°042
 ÿ!
T$?04<3Ma þ
 ÿµ*+F?4
E?46a þ ÿ­AL3ME?± ÿUh~vwwlE*ME þ$b0I3PPE} þ<?pþf04
,(µ?pþ
r · ü[830 þ®'R13
 þ9 ý±þÿ04± ÿ!mrO ý3@ þÛS± ÿ0¯
 >G4243''þ?pþKp
 þk
_ ÿ4 ÿ!mT$?470R
 þ
·
()1
3@ þL ÿ®r üf>?7/p
 þ9 ý±þÿ8+F?WY%þÿ24v ÿ/k
_ ÿ0þ4( þ4O
 þ*J þ@ þ þÿþW8± ÿ
v ÿ/
_ ÿþ:; þÿpý? j ''Ev ÿpýkYhi! þ!*0 þË3
3 þÿ
 þL(O
 ÿElE!

ÌdvÍJ~B%é`O~BWmVBqo\BO^^é B^5~J$'$Oé \f^9pg;\EI iNr=rOsdNr=rOr¢;
¨=©KÎ

ª

mknpokmkq

Òþ()@þ	þýÿ3ÿvÿpýU3M804
3ÿR(F3'P/*,+þ0þ$b0ýþ>'pþ_ÿpþCÒ-1þ±ÿX`:

ý±þ/!X|6oM0vþI?M3pý?M38?0480RþI?0±þU3M''ÿ#'±ÿÿX
ÿ4ÿþo/@þþ

v ÿ	Ò-vþ±ÿYý±þ/*MRþ
3@þLÒ91þ±ÿYvý±þ3

ÿ
30PP}þ-?pþ@þN'±ÿ4ÿK
ÿ`:
ÿ!<Ò91þ±ÿSý±þ452'P3þ(i3°(bf3

vÿ
4ãþo/@þÿpýI?pþLRþvþ!6r3M?pþE@þ*
C4ÌþvþC()	3'Xpþ
ERþY;+-X(N?pþGÿ
@þOþÿFþ±þ`_a
ÿný4?P4([+þm3þ
Ò-v þ± ÿU ý±þEO
 ÿM ÿµ!,TFp
? þ@ þ()@ þ*
+ þN þ$b0C3P} þQ?pþL04
A(6Ò91 þ± ÿS ý±þ/!
ü±Ò-v þ±
 ÿZ ý±þ0§
 Ï 4>Y þ>?
( þ þÌ
 þÿ>+F?R2'vÿpý32p
? þ þ þO
 þÿ>yU± ÿ0#v*g
4 þ
3 ÿ3
3
 þ<?pþFÒ-1 þ± ÿ®AÊ
* ª-*1± ÿ  
 þE ÿ*± ÿ04(b/v ÿpýN?pþ['±ÿER
 þþfh · .'./*
vw CwlE!9r
 þv þO
 þÿÐK± ÿ­
 Ñ7Ò
( ÏIa
* Ðq.ÑI49
4 þ?pþ7¹P¼E¼ü
( Ð	± ÿ0¬
 Ñaa
* Ðqª.ÑI49
4 þ?pþÓºÁ)Â
'
( Ð± ÿ¬
 Ñ0*1± ÿ  ÐC46
4 þ?3þ7¾º¹Fûa½4¼¹P¼Âü'
( ÐJ!6rM9?M þ$ þp
 þ<+f?ML@ þF3
3 ÿ()P244g+F?
Ò-v þ± ÿCv ý±þA± ÿ+F?M>+A± ÿ-'Ì
 þ[v ÿ34 ÿP()9?pþ@ þfR
 þ ÿ0*149Pdp
? þC'82P ýv ÿpþ
?ßþ
? þ þO
 þÿ>
( Ï 47þ(5U@ þ*:þ! ýM!*<U þ8($
 ÿ!Sî
Ê þþ* @ v ÿµ*O± ÿ®
0 þO
 þÿ
+-34Z?pþÿXR
 þC þvÿþ þ
4 ÿµ*<3
3 ÿ ÿV*<± ÿX
0 þO
 þÿ*<@ þ
 þ
4± þ!R|, þÌ
 þÿIym± ÿÍv*
v ÿW?4>
@ þ*6+932RR
 þ?pþfþpR þKh}ÔlL± ÿZ?pþC þ7(f4
 þ þÌ
 þÿ8v ÿR?3þC3
3 ÿ0± þ þS,h ÕLlE*
@þ'R
 þ
± þ4!
T$3
? þUÒ- þ± ÿÓ ý±þ@ þU3O
 þ&'Z
 þ	
_ ÿþ!qT$3
? þ@ þU4PR045Ep
 þ ÿpýZ?pþ
þ þO
 þÿ'
* ÖL*1+F?4
E?49p
 þk
_ ÿpþCZ
 Ð×ÖØÑ4(%± ÿ0 ÿ4P'
( Ðq.ÑP
Ç ÐJ!6c9Pdp
? þC'8?v ÿM.I;
( ÖÍ
 ÿ± ý30f'±ÙØ()Q þ!fTFp
±
? þþ þÌ
 þÿ[y± ÿ0Wv8@ þ83
 þk
_ ÿpþUÛ
 ÚzÐÜÏI*%«
y ÖÝÐt*°± ÿ´
 ÚzÐÜÏI*
Ð8ÖØv!AT$p? þ¦^a]1V3\§ÞChi± ÿ± ý3F' ÿpý þ: þ þO
 þÿFþl-;
( ÏIv
* ß9yh Ï>lE*%@ þL?3þÿM ÿM} þÉ
 þ þO
 þÿ

( Ï Pv ÿ04P°+F?K þ'R
 þ
$'§ÖL!9+c ÿK?3þLd± þEW
 þoM0 þ*a ý±þÿ[r-*cE*a± ÿYs þ
?G?± þ7?pþ
dT
+ ÿqÒ-v þ± ÿq ý±þER+F?&4'P!ÍT$p
? þS'P(Nr-]^Ò-1 þ± ÿn ý±þR þU
4 ÿ
rt:;
4 þ
A±ÿCrJ:;3
 þ4± þ ?1?pþf'9(µc]^- ý±þ8@ þFcp:B@ þ
 þ± þQ± ÿc;:;3
 þ4± þ ??pþ['9(Vs,]^
 ý±þE@ þ8sµ:B'± ÿP*asV:B03 þ*°± ÿUsV:B@ þ
 þ± þ!FTFp
? þþ þÌ
 þÿIhirJ:;
2 þ
Bªqrt:;p
 þ4± þlA(<r-]^
Ò-v þ± ÿU ý±þEp
 þ
R
 þA?pþL@ þ$(6
 ÿ  rt:;
4 þ
*%rt:;p
 þ4± þ à!
üÍÒ-v þ±
 ÿ ý±þ09
 ÏqáV4<.
 ÞKâã=^@`ä1KÖ ã3Õ ^8W
( Ï='
( ÏqáV4<Ü
 ÿM ÿ3þ;30 þ<W
( Ï´?094<
4 þ
3 ÿ3
3
 þf?pþIR
 þ ÿ0B
 An
* ªA*V± ÿ  *µ± ÿm4'K?[?pþ4'ÿpý343
? þ þ þO
 þÿNy	± ÿXv.
! åæÏ á
4>?pþ
û ~º» M¾dü>ý½ÃK¼ çý($3M0 ý±þ09
 Ïqá~\
! üTÿZ'Ì(5?3þ/3
Lv ý±þU2L?pþCO
 þþ7(
?pþQ'PA(V?pþQ3Ma ý±þ!6rM?
 þoM0 þ*Mn
( ^ (Kèéééè ^  @ þN'P-(t3Ma ý±þ
 Ï (Jèéééè Ï  *
@þ'R
 þ
± þ4*M?pþÿ§^ (  ééé ®^  45± ÿS' ( å áê ( Ïqá~!
T$3
? þLÒ91 þ± ÿS ý±þP
 Ï²ë®()F ý±þÿ[r-]^F
 ÿf4A?pþ>P4 þ'5ÿ3þL
 ÿv ÿ0v ÿpý?pþ>'
(,r-]^Q ý±þ/!fcpQ
 ÿv ÿQ4JÒ-1 þ± ÿòþ þO
 þÿ[(bÌ
 þU() r9]^Q'PN30v ÿpýP?3þ8Ò-1 þ± ÿ
R
 þ'G
 -¦
* ª-*N± ÿ  *Nv ÿ
23v ÿpý®y#± ÿ v! T$p
? þ þRO
 þWp
 þk
_ ÿ0 ÿ	?M4Í()Uc	± ÿ´s,]^
 ý±þE¬
 Ï²ìK± ÿí
 Ï²îtØ
! Ï²ëïÏ²ìÏ²în4?pþY0103
 ý±þR30 þX(bC4A'± ÿ ÿ&
 ÿ4 ÿ
v ÿÍ?pþR832
 ý±þÿK02± ÿ¸hiB! þ!*N?pþ/3
C(7?3þWr-*5cE*$± ÿsÉr · üflE! c
³ ÿpþR' (8?pþ
/3
[ ý±þ­
 Ï²ëÏqìÏ²îR28hirt:;
4 þ
Eqcp:B@ þ
 þ± þ¬Ósµ:B030 þ\lE!NT$?4[4f?pþI(b (9
4 ÿ
±. þÿY2734±ÿpþ3I1?pþ[?M@ þþN ý±þÿ! ü[ ý±þEZ
 Ï ë {
* Ï ì *± ÿ®
 Ï î @ þN3M0 ý±þ0,(t?pþ
/3
5 ý±þ0P
 Ï²ëÒÏ²ìÏ²îJ!
s þ3@ þ3 ÿ ÿM\+ 'Z3M'/!nrMEP4*A± ÿqr · ü (Q?pþY;1R
#
 þU
 ÿ2p
 þ@ þ&p
? þ@ þS4P
?M@ þþ:B30 þUÅ ÇÚh ðChBÅ<l èñóò hBÅ<l è ahBÅ<l'lI+Fp
? þ@ þ×ðChBÅ<l84I?pþY@ þ(f± þ2
 þUhi'þEl(NÅ-Z
* Ï
47?pþÒ-1 þ± ÿX ý±þG
@ þ° ÿ0v ÿpýK'WÅ-* ñóò hBÅ<lP;
­ ðhBÅ<B
l ôõðhBÅ,¦
l ö Ï 2L?pþ	P'`oR(
'± ÿ ÿ8
 ÿ ÿ0t+f?4
?8@ þ?þ þO
 þÿ6
( ÏI*± ÿ
 ahBÅ<°
l ÙðhBÅ,lJ þ5?pþ5v ÿ4'þ! ÷fü[4'M*
Ö ÜæðhBÅ,R
l ôõðhBÅ<lÆ ñóò hÖ­
l Ç±
ù @y àC2N?pþ@ þ>(5@ þ
þ þp ý±þ>
 ÿ$ÿpþ
vÿpýS0N(
ø hBÅ,lLÇ  ×
±þ4
 þF(6ÅA! ñõò hÖ\lE*a+F?4
E?K45± ÿU0@ þ/4 ÿC(b ñõò hBÅ<lhÖlE*a45?3þN'± ÿ4 ÿK
 ÿ ÿ	(

úaÞ%pBt\$E^9gEûü\æ ýMü\æçüJþ;â=ÿ ãä_þâEE%^6\BEL iNr=r k ¢;°Þ%\^m%E5~^F\^iB^E^[FE 
NV
m NEpBEµé BE&B6éMEB\tEE~B~tN%m ~pV^J^J5B'$BOé EJ;B^E1^5\^~b
¨=©	

í[î

t}-m{t/s$q

í

os0ïðptÊ{añ

l ñqMð î
í a

 {




Î$³NsJsJ|AÎAT5c~HQÙI*/"f|-ÎA|,c,:[c~HQÙ8*TF"Wü[H · ÊSc~T$T5c~HQÙ



rt:;pþ4±þqXc;:B@þ
þ4±þ.Xsµ:B'E±ÿP



)

DQ|9sVc1:[|9"$c~HQÙ8*aD[|9sVc1:[|9"$c~HQÙI*0"F|AÎA|<c1:fc~HNÙ



rOý3M@þNM­Dg$(O?pþN/3
502±ÿ	(bFý±þÿ[r9*Mc*0±ÿUs<!

ñóò

hBÅ<l[
@ þ'% ÿv ÿ3ýP' þp
 ý±þPÖ!>Hfþ?Q+þ8Yþpý±þN4Rþþ j y/!^k=Ò-U3MNpþ_ÿÿµ*
±ÿ þpý±þ>+F?MþN'±ÿ0ÿ	
ÿ4ÿK45yPMþLÿM)þoM4'!6{ïþ8
±ÿYþÿ0±þ	pþÿMþ ñ ò hÖl
  ñõò hMá è l6()-?pþf'E±ÿÿC
ÿ4ÿ
þ'%ÿvÿpý>'7?pþÐþpý±þÐývÿpý8(bÜ±þþoMáV'
±þþo!rþoM0þ*Jÿrgvý3M@þ¬>1* ñóò h'hiT$"Wü[H · ÊUc~T$T5c~HNÙ8*nDRü£d · c~HNÙLl'lN4h)c;:B@þ
þ4±þ­
sµ:Ba3 þ\lE!
rO ý3M þFÛI± ÿ×
 >2443''Eþf?pþ@ þ>r · üØ3
 þk
_ ÿ ÿ0!gTFp
? þ@ þL@ þ>r · üØ04± ÿ0A(b$?@ þþL ý±þÿ*
r-*ac*%± ÿSsX+f?U± þ4
 þR
* þp
 ý±þ*µ± ÿG'± ÿ ÿU
 ÿ0 ÿT
! üÐÿSv ÿ0
Pv ÿpýd+¸'Kþ*
ÿM$() ±
 ÿC?pþf'þ*° ýÿ$
_ þ-?$?452$± ÿYv ÿ44%'þ!
ü¸834
 ý±þÿ$04± ÿU45()O
 þK() v ÿpý þN ý±þÿf02± ÿA	./v ÿpýP?3þü;¼Â þ º A'
û º» /¾dü5hi4'
·

4 þG?pþ j '
 ÿ
E?M ÿM3[130
kN20 j 130
kl$(9?pþr üfQ
 þ'% ÿv ÿpý'K?pþ
v ÿ0123a4±
 ÿ!6rM4*?pþNþÿ0'F130
A25p
 þk
_ ÿpþK­

á ê ( Å áRÇ

è  á ñ hBÅá;l è ô×ahBÅáBl'l
+F?pþþ×ôÓ2$?pþÎAþ4±ÿS/3
*a±ÿU?3þ>þÿ'[/3
 ñ hBÅBá l  ééé  ñ hBÅ  lA(;UW'±ÿ/:
4ÿ&P'4
þP2Ppþ_kÿpþ& ñ hBÅ ( l  ééé  ñ hBÅ  lh'h (Jè  ( l èéééè h 'è   l'lPÇ ñ hBÅ ( lh (Jè  ( l
 ééé  ñ hBÅ  lh zè    lQ()Ch (Jè  (  l.Ü ø hBÅ ( lE* éééè h è    lEÜ ø hBÅ  lE!	c+ÿR+90*t?3þP/3



h$ôðhBÅá;l

r · ü 4f()OþGK./vÿpýC?pþÎAþ4±ÿU0103
F(<?3þ7±þ2
þN±ÿG?pþ8ÿþ@þ
ÿG(<?pþ
'±ÿÿG
ÿÿ0!Qc+ÿ44J'þL(<?pþI/3
[r · üÜ@þI3M0vþF()OþG() ?pþvÿ4
'þf(t?3þ>vÿ41403r · ü[!
T$3
? þf130
-r · ü´P1p
 þ2-I þA(g'
 ÿ0
?M ÿ3Ar · üf!<TF?pþ[Ò-1þ±ÿKý±þE8
@þ'%ÿ/:
·
v ÿpýI'P?3þN/3
5r
üØ2A?pþN/3
5 ý±þE/!<rMfrO ý3M þFÛI±
 ÿ§
 >1*'P()834þN?pþLr · ü
· /p
 þ4v ÿ3ý?pþOþÿ@ þ834 ý±þÿN04± ÿµ*%
+ þ±. þP?pþþÿL/3
 · Ç r  c  s&(-?pþ
?M@ þþYr · ü[!qr?4Iþÿ0'P/3
*Zah · lÇ  hBÎ$³QsJst|-ÎAT$cHNÙ8*<"F|AÎA|<1c :[cHNÙ8*<T$T
" üfH · :
·
ÊScT$T$cHNÙLlE*5hBÎ$³QsJst|-ÎAT$cHNÙ8*J"f|-ÎA|,,c :[cHNÙ8ï
* Dü£d c~HQÙ>lE*5hBÎF³QsJst|-ÎAT5c~HNÙ8*J"F|AÎA|<1c :[cHNÙ8*
"F|AÎA|<1c :[cHNÙLl à2
! DO$(O?pþNþÿ0'F130
Ar · ü«4$?MdW
+ ÿK ÿYrO ý3M@ þQM!
·
H þo1g+þ9p
T
 þk
_ ÿ3þ,?pþZ`	^@Uäaâz^ä1Ö-(± ÿ8r ü7*d+F?2
?>2V?pþ- þt(2
 ÿ8 þË1p
3 þÿ
 þt
 þEP'þ
1>?pþ5r · ü#a4± ÿµ!tTtLMQ?4*
+ þ-_0'6pþ
_ ÿpþ-B
 ÞK]3Õ YUäa*+F?4
E?82gQ þË1p
3 þÿ
 þ5(°
 ÿ$hi'PlE!
rM4*VK'' ÿpý#2[± ÿWv ÿ/k
_ ÿ4þ:;4O
 þÿ ÿ%± þ
'*A	h Ð 0 èééé 9
l Ü"ß-yh Ï>l V*J! þ!*J	''Ev ÿpýK4Q± ÿ
v ÿ/
_ ÿþRh -l þÿ3ý?# þË1p
3 þÿ
 þU(N
 ÿ0Gh)+F3
? þ@ þ×Ï2?pþSÒ-1 þ± ÿqv ý±þW30 þ&1#Å,lE! ü
O1Â Üº Cþ }ü ÁbÂ!
Ã 4Im þË1p
3 þÿ
 þWh  0 èééé l7(F± þ4
 þ3
E?X?EÚY'* Ð á  ñ ò h  á è  á#" ( ±
l Ç ù y/*
! þ!Ò
* ÐváRÖ ñóò h Já è Má#" ( l[R
 þ
3 þ?pþPÐzá- þ'P!+c ÿ?3þL+9E*t	E3
3 ÿm(5Y''v ÿ3ý	2N?pþ
 þË1p
3 þÿ
 þC($± þ4
 þ8/4þ®v ÿZ± ÿ®r · ü +Fp
? þÿR?3þC''Ev ÿpýS4~$
_ þ7?pþC'± ÿ4 ÿW
 ÿ4 ÿ
 ÿpý?3þÜþp
 ý±þ!

¨=©%$

ª

T$?3þL4±ÿpý3ý±þL(Or ·
&

hBÅ<lqÇ

ü

mknpokmkq

ÅX45pþ_ÿpþK­

  Ü ß-hyÏ>l 

ÆW?0$33ÿ'GÇ

h
0

èééé l$vÿUÅ®+F4?( 0 Ü±ahBÅ<là

· 
3 
E?K33ÿ2N
4þ±ÿqý¾E¾E¼û°üÁbÂÃG=/ÂM*g±ÿWÅÍ4L4m'×^@[O[Ö)v]['vÿpý<!ÌüÐÿG@þË13@þÌþÿ
ÿY

þÿpýP33ÿ0A(O±ÿUr · üØ@þ>+F?$45
4vþK?pþ>r · ü±ý¾¾¼pû°üBýÂ0¾E¼¾KEÁ)ü;¼ÁiºÂM!,cÿ	?4F
þ*
?pþI

 þ±ÿ
 þ
Eþ ÿG
 ÿ4F(< ÿ3þI
 ÿ0 ÿµ­$

 þ0vÿpý	3
3 ÿf730'fRþýv ÿGv ÿG± ÿmv ÿ4
'þ! T$p
? þG± þ`_a
 ÿÍ44þ3M@ þm
44C?pþ þr · ü[*F+f?4
?Í

 þYÿ/k
_ ÿþ:;v þÿpý?q''Ev ÿpý*
6: ^@â ]_VM\´^a]_^Gyh AL3?±
 ÿµ*µvwwlE!
üz( þ+±@ þ	p
 þk
_ ÿ4 ÿL@ þ¯ÿpþþp
 þµò
! üTÿ®r · üz4.
 [$VM\*)`iÖ ]~Ö	4(p*g(b
 þ
E?&'þ'¯Ü ðhBÅ<lE*
· üq2t
a þþ5(O'R
h 
6
l
Ø
Ç

v
O
!
c
+
8
ÿ


?
p

þ
O

+









*

±
I
ÿ
r


þ



`$
_ þt+F?6'þ:B':;'þ
+,.-0/
è43
,211 ñóò
'± ÿ ÿC?pþL ý±þÿF?M32C±. þN(bF2a%0 þ[
 ÿ5±. þÿU?pþN?pþF ý±þÿ!9TF?4A4
C± þG@ þ' ÿ0v þ83 ÿG'KP±. þR
 þ
3 þI?pþ+F4 þI?pþ ý±þÿN+932ò
 ÿ[.ÿM\+¶+F?
'YMYv ÿm'Ì
 þP

3P±ÿ
 þO
! üTÿr · üÉ46
 5Ö ]~Öd3Õ \´YUWY ÞK]1Y[I>þ7U( 3 Ç ù 38:9 ñõò h  è43 l
 ñ ò h  è43 l<Çy/!tc ÿ>?3þg+-*?pþ-
E?M4
 þA(0
 ÿI33 ÿ04Ë33 þ[3 þþPv ÿpþt+F?2
I? þp ý±þ9+f44R þ
±. þÿ()¶Q'þ
! üÐÿr · üq4Op
 þþv ÿ4'2
,(04g463
 þþPv ÿ2'4
<:þ
E?(°4gþ;
! dTÿ0 þ
?pþ+f4 þK'þµ*-4I3O
 þ&3
? þ@ þ	?45r · üf þ	
P0 þþY± ÿXp
 þþv ÿ4'2
!RT$p
? þ
·
@ þ''E4

 ÿI'>p
 þþEPv ÿ44
9r ü[<4:
 ÿ<LP @ <0v þ¸
 þ
30 þ5(bX
 þ± þO
 ÿM ÿp
 þþv ÿ4'2

r · üØ?pþ@ þ>45p
 þþPv ÿ04'4
f ÿpþ>

 þÿpýP?pþ>O
 þL4± ÿpý3 ý±þCyh AL3M?0± ÿµ*µvwwlE!
{ þ4'¯
ï
 ÿpþþS?pþp
 þk
_ ÿ4 ÿK(,­
 [$Ña[$`Öv ÿSã
 ýa?µ![ÊS/p
 þt
Ep
? þ
./v ÿpý	p02
4K
 ÿ4f(
1.1 ÿpý()L
/
 þ*JL3
 þ
R
 þGv ÿ · þ
 ÿX>1! >1O
! ü;)^ ]<v ÿmr · ü Å4QK þË3
3 þÿ
 þ(,± þ2
 þ
"

(
ÍÇÄh 
l ÜíðChBÅ<l
*t(bE
 U>=zv3
E??hMá è Já#" ( 9
l Ü ø hBÅ<l[()¦
 Y$ÇÉy èéééè U@?Ív*g! þ!*
03èéééè   B
h Má MáA" ±
l
Ç
ù
/
y
Z
!
p
c
(
B

Ç
C
 *9?pþÿD=4Im
1
v þ!Z|,
E?&
1
v þYv ÿZ±

&
ÿ
r · ü 04± ÿ®4\+FI?pþ
ñóò è (

0
%a44pC?0N?pþP ý±þÿ7
± ÿRv ÿ/k
_ ÿ0þK()þÿµ*VLL ÿ3ý	>p
 þ@ þV*µ@ þ12[?pþ± þ4
 þN(
?pþ>
/
 þ!<c$4'P204 þ-?fP3M0'v ÿpýI
± ÿYR
 þQ@ þR
 þþUv ÿ0p
 þk
_ ÿþ4!
{ þÿ3þo154423''þQ'O
ï
 þN(t?pþ þLp
 þk
_ ÿ0 ÿ½
! üÐÿ¯þo/a þN''v ÿpýv ÿC?pþL2± ÿpý3 ý±þQ(gr · ü
· *M?pþ77344 ý±þÿ$r · ü«?$25?pþN/3
5(Or-*c*± ÿYs<*a4
h'hirt:;
4 þ
B®cp:B@ þ
 þ± þ&sµ:B'± ÿPElE*
hirt:;p
 þ44± þq
 ®cp:B@ þ
 þ± þ&sµ:B@ þ
 þ± þ\lE*
hirt:;p
 þ44± þq
 ®cp:B@ þ
 þ± þ&sµ:B'± ÿPElE*
hirt:;p
 þ44± þq
 ®cp:;p
 þ4± þq
 ®sV:B@ þ
 þ± þ\lE*t!!! lE!
T$?2545P þË1p
3 þÿ
 þL(O'PF( · 3
! ü=$
3 ÿ	(g?045''v ÿ3ýI2
h'hBÎ$³NsJsJ|AÎAT5c~HQÙI*"F|-Î5|<1c :fc~HQÙI*T$W
" ü[H · ÊUc~T$T5c~HQÙ>lE*
hiDQ|,sJ,c :Q|,"FcHNÙ8*0"f|-ÎA|,,c :[c~HQÙ8*a"F|-Î5|<1c :fc~HQÙ>lE*
hiDQ|,sJ,c :Q|,"FcHNÙ8*0"f|-ÎA|,,c :[c~HQÙ8*aT$W
" ü[H · ÊUc~T$T5c~HQÙ>lE*
hiDQ|,sJ,c :Q|,"FcHNÙ8*0DQ|9sV1c :[|9"$c~HQÙ8*a"F|-Î5|<1c :fc~HQÙ>lE*
hBÎ$³NsJsJ|AÎAT5c~HQÙI*"F|-Î5|<1c :fc~HQÙI*"F|-Î5|<1c :fc~HQÙ>lE*µ!!! lE!
ü[4Vr · ü[$v ÿYrO ý3@ þFÛ±
 ÿ±
 >@ þ>
a þþ>± ÿSp
 þþPv ÿ04'4
!6rMÐ
 þo/P0 þ*0v ÿKrO ý3@ þ>Û1*
\± þ5c9
± ÿC ÿP±. þL
4 ÿ	c;:;p
 þ2± þ9()±ADQ|,sJ,c :Q|,"FcHNÙØ'þ!9×fd
+ þ± þL
 þ± þ°0 þ

 ÿm
?4
 þ7(9s®3
 þþPv ÿpþ[C3
3 ÿ4Ë1p
3 þÜÿpþo/[þ8()[c$(b DQ|,sJ,c :Q|,"FcHNÙ8!%rMY
 þo/P0 þ*
(6s®±. þNsµ:B'± ÿ0Pf?pþÿUc$83'['Sv ÿU'þDQ|,sJ,c :Q|,"FcHNÙ8*%± ÿG(6sZ±. þNsV:B@ þ
 þ± þ8
sµ:Ba3 þN?pþÿKcA83'LýP''þ7"f|-ÎA|,,c :[cHNÙ8!

¨=©dì

í[î

¼

bFE

t}-m{t/s$q

í

os0ïðptÊ{añ

l ñqMð î
í a

ÈÜgieHG2ÅzgJÁ[	ÅaÆ

Hfd+¶?N+þ?±þþþÿþm?3þIr · ü (b44 3þG()Lý±þÿN02±ÿ*%+-þ
±ÿ@þ[?pþ
Ë1p
3 þ' ÿ	(O?Md+'(b4} þQR
 þþ!Or$±þ`_a
4ÿµ*MRþþA@þNpa4
4Ìþo/@þþ
·
þ?pþffr
ü[7h)()f3M':B?pþ@ þ4
7±
 þ`_a
4 ÿal-f ÿKþ%V± ý2
!-T
× þ@ þ*0
+ þ>3O
 þ
`yYUVÖ ^1Õ[þ%± ý2
!gc ÿ?pþ,+90*+ þF30O
 þ5?<4Ì
 þ5/
 þþ<4v ÿ3þ>± ÿP+ þF
 ÿM

 ÿ2p
 þ>483±ÿ3þ3Q%0v þ7(i3M3M@ þ¬
! dfv ÿpýK?pþv ý?Ð°
( :<0<± ÿ{R
 þh~vw QClE*
ÿpþ
± ÿ®
 ÿ± þ7±ÿR4v ÿpþNþP°E<± ý4
()834Y ÿ'U± ÿZ3M'P'ÿÍh)R
 þ
3 þ3M'
@ þC@ þfþo1 þ± þP?0± ÿZ4 ÿpþ>þ%9± ý4
dlE!UÒ-?Z@ þ@ þ@ þÿ ÿ07@ þ	3 þZp
? þ@ þ!YTt
·
4P04()L3M91()9v ÿ þ
 ÿM*1R
 þþ< þWþo/@ þ þv ÿþ%a± ý4
!6rM5'O
 þf(µ?pþ
v ÿ

 þO
 þÿO þ± þ`_a
 ÿWO
 þ?M/Nv ÿ · þ
 ÿXC1*t+ þ3 þ3M'P:B?pþ þ4
Ì
 þ?M10Q+F?
 ÿYr · ü«@ þ þ þÿ4 ÿK(bF?pþLR
±
 þp!
s þ93,
#
 þý ÿp
 þ
_ ÿv ÿpýQþ%a± ý4
5
 þþ!OÊS± ÿ(µ?pþFp
 þ
_ ÿ ÿ6 þF0 þ ÿ
ÊG± ÿ3ÿC± ÿ±
 D-ÿ3
3 þ49h~vww/vdlE!>TtC4p
 ý±þ7?pþßýGR
 þp+-þþÿm3M'PRh)()Q04± ÿlA± ÿGþ%
± ý4
Ph)()$
 þþElE*M
+ þÜÿpþþK'p
 þ
_ ÿpþLU¾º¹$'
û 1üBýüÁ)ºÂaý½ þ üBýü;¼zyh [E,: ÞK]1^a]~ÖlEX
! ü¸
03M4 ÿY4
 ÿv ÿ/
±
_ ÿþ7@ þËp
3 þÿ0
 þ(,þ%44:B3
 þ@ þm'P*J! þ!*tK''v ÿpýMI
! üÜ
:;'þC4Q± ÿ'v ÿm

03 ÿµ!Pc ÿ?pþ7+90*JL4>Whiv ÿpýv þ887304 ý±þÿElQ
 ÿR?0L1

3L>Yv ÿpý þ
4O
 þ5'þP ÿ8N
P03M ÿµ!gï
{ þF
 ÿvÿ1p
3 þA'N@ þ( þ6'L± ÿ3'P'ÿP'þF640L j 'þ!^k
È 4LUR
 þ;m?84N'3
3 þGh)(i4 þ\lQ()7± ÿZr · ü Å-!UÅ Æ ÇzÈ¯hBÅ ÆùÇ±È8lE*O4(-± ÿW ÿ(AÈ
4F'p
3 þL()T
 þ± þU''v ÿ3ýPv ÿY?pþ84± ÿpý3 ý±þ & hBÅ,lLh)(i4 þ>()fO
 þ8'v ÿpýPv ÿ & hBÅ,l'lE!$T$p
? þIÿ ÿ
=Æ Ç
ÈÌIh  ÆùÇ È7lQÌ
 þ± ÿ>''Ev ÿpý(q2~$
_ þhiM
 þ
 ÿ>4'()lfR
 þ;mÈ*g! þ!*t?3þPR
 þp
?M40Ihiz
 þc
 ÿMN?M2al5()6
 6!7
Ò þ()@ þPp
 þk
_ ÿ0v ÿpýC+F?NQOþ± ÿQ()NR
 þþ['KR
 þ7'Ep
3 þYhi! þ!*
?M4°l9(b['' ÿpýM*M+ þ>_0'$3þk
_ ÿpþL+F?0F$Oþ± ÿF(b[P()834I?[4$Ò-1 þ± ÿ\þo/@ þ ÿ
'	R
 þ>'p
3 þIN	
:;'þ
! ü K¾ 4 þ üBýü;¼  º .
¹ 1½J
ý )R4f'p
3 þKh)()4@ þ\lFQ
:;'þPÐzáp*µ! þ!'
* Ðzá5Æ K
Ç )q	h Ðzá9ÆùÇ
)%lf(-±
 ÿG ÿS4;
( Ð á ÖK)Ó	h Ð á Ö ù )%lE*J! þ!n
* Ð á L) Ç ù yRhBÇ ylf
 þ
30 þJ)W4N	Ò91 þ± ÿïþo/@ þ ÿ
+F?òÿM20 þf ÿU?pþIO
 þÒ-1 þ± ÿm ý±þC3 þSYr · ü Å-*µ± ÿ×
 Ðzá,4[± ÿm' (,?
 ý±þE/!8rM
 þo/a þ*Vrt:;
4 þ
Æ ÇÄhirt:;
4 þ
.ªnrt:;p
 þ2± þlF(bL
:;þrt:;
4 þ
L±ÿ
:;þ
()7304Whirt:;
4 þ
¬ª=rJ:;3
 þ4± þlE!SY
³ ÿ3þ
± ÿ®4'U4.W%3M>G
:;'þ	(b834Y
 þ ÿpýY'p
3 þ
(i4 þN()F± ÿY'K*°v ÿ
 þLP
:;þ745± ÿS'K!
üÄ
:;'þS(b834'
 )Í4I'p
3 þUP()2 þYv ÿ&04
34P
:;'þ(NR'' ÿpýMí
! D<R
 þp®ÈÌ4
 þk
p
_ ÿ3þv ÿþP9M
( )J*/± ÿC4<'3
3 þf-()2 þF(J± ÿÉþÿ@ þQ''v ÿpýM!Oc ÿP04
34
* ZÆ ÇÈØN
  ÆùÇÍÈ
()$?pþ>''Ev ÿpýO6!
{ þL()/
35 ÿKp+9P0R
ï
 þ;C
4 þ5?0F@ þL ÿpý?M þL'F(b@ þË1p
3 þÿã
 þÿ0
3
3 ÿþ þYv ÿ
?pþ± þ`_a
 ÿ®4þE3M@ þ­8+c ÿE4± ÿ
 þ± ÿ0ZW
" þ'% ÿ þP
 þþ!	+c ÿ4± ÿ
 þC± ÿZW
" þ'% ÿ þ
R
 þvþ$@ þ72±. þ	'R
 þ>3@ þ()3V(bQ ý±þÿ!FrMQ?pþ7
@ þ>(<v ÿpý þ> ý±þÿhB
Å  (1NH=I,M lE*0c ÿ/:
4± ÿ
 þAR
 þvþg
± ÿÌþo1 þO?pþA@ þË13@ þO
 þÿO?<Q02
34O
 ÿÌÿpþ± þ<R
 þþ
o þ
3þµQ! P
" þ° ÿ0 þR
L
 þþN þ4'Y3@ þ()3O()>Yv ÿpý þ ý±þÿ!T$p
? þm
± ÿRR
 þP3@ þm'U± þ()U?07
0(Q?pþS ý±þÿ]^C
 ÿ+F44-/

3Mv ÿX?3þU
@ þ
PEp
 þGhi! þ!*A j @ þ° ÿ0 þkR+A/P()`:
\+Ff j ' ý±ý±þEklF ÿY?pþ804± ÿµ!5c ÿS?pþ8
 ÿþo/[(97340 þL ý±þÿPhB
Å  (	
 L
Å '2 

3 l
c ÿ4±
 ÿ
 þI
 þþW
 þo/@ þf?3þÿ3þþS()N02 þt832 ý±þÿN
1v ÿ4 ÿµ!Q+c ÿG02
34*
?pþ
 þo/@ þ,?983a þ5 ý±þÿA?M304O
 ÿM94730±ÿpþ34>R
 þ() 'O
 þ[
 ÿÊba4
ÿpýL þ,(

sdaÞ%^a~\ $^BpBB^^AJ^5\5~B'AE°OBJl4B^5µ;~;daB\~ABBWm°5J,Ed;EJB
B,¦V
m BE\6B\-B^8^<$8Eé E<R\E5\^LBB5tEé%\NmG%m ~^B<B~^'7\ 7BB^yo ~
B9EE~ OE^5 Bt'EdB\B'N^>7So Bgé`\B^%T¢;VUJBBB~B9EB^ 4BEf¢V~EN
5B'Fé B#B<tEéaB^:Wa AX,¢;ZY°dg^NE~;/\<$'fÒV
m ^NB5B^<dOB^~^N',B\
BBENE\[EJ\BEB^~V5EVpEE

¨=©ML

ª

mknpokmkq


ÿ!f"Lþ°ÿ0þ>þþLþo/@þf?pþÿpþþS(bQþË13pþÿ2t834ý±þÿQ
0vÿÿµ!$r
þo/@ þ$?pþN@ þË13@ þO
 þÿA?$ÿpþL ý±þÿ]^[
 ÿY83'5()4d+´ ÿ	@ þ'% ÿ þ
'a4
34 j 'E ý±ý±þv ÿpýk
4 ÿY(O± ÿM?pþf ý±þÿ!
× þ@ þ*M
T
+ þf ÿ4@ þ þÿ5vÿM()P03
 þk
_ ÿ ÿ0<(V?pþ@ þ[0R
 þþ ??pþf()P%p
 þ
_ ÿ ÿ9@ þ
v ÿ üFR
 þÿ0`omÒ[½
! üTÿZc ÿ4± ÿ
 þR
 þpRÈÄ^
Ç ]  )h j c ÿ4± ÿÿM8)°klL4>'p
3 þC($S'v ÿpý
_
( )Ó4 j ÿpþ± þEkR'p
3 þ*A! þ!*5`
( )Ó4Ì
 ÿM'p
3 þYv ÿ#± ÿX
:;'þS(Q?pþS''v ÿpýM!#È¯a
Ç ][bh ) ö cedl
48SW
" þ'% ÿ þCR
 þp*6+Fp
? þ@ þ(c O
 þ± ÿ j þ± þÿ304!^kÄï
{ þK
4.
 )X?3þ j 'v ý±ý±þkm± ÿf
 dU?pþ
" þ'% ÿ þS(b834Z'þ	?¯þ± þÓ' ý±ý±þ	4ã
 þ± þÿ344Øhiv ÿqk
_ ÿþS4O
 þ\l
j @ þ'% ÿ@ þ!^k üÔW
()4d
+ þK1CP@ þ'% ÿ þ!
TtW4423''þ	?pþ þUR
 þ;®;1R
 þ*A+ þS
 ÿvÿ1p
3 þY?3þYd± þE± ÿq4± ÿp
 þO
 þoM0 þ!ÓT$p
? þ
R
 þp"Dfv	(b · þ
 ÿnÛ1*9+F?04
?&'þ?4P?M34X+A/PR
 þK?pþS
 þY?PcIM
 þ
ÿMF3þ4±
 þfF?pþ7Ì
 þ>4O
 þN?0fs®4$'± ÿ0P'vÿ3ýM*45()P4f
 þo/@ þ þSF± ÿU+c ÿE4± ÿ
 þ
R
 þp´DFv8p
 þk
_ ÿpþYÛ
­ DFv8g
Ç ] h  h)cp:;p
 þ4± þB
 &sV:B'± ÿP4El'lER
! D<R
 þp§D9ÛP(b · þ
 ÿmÛ1*
+F?2
?m'þL?0L(9rt:;p
 þ44± þL?Q1

3@ þm?pþÿïþ± þÿ344Ss#+f44
 þ
o þ
3MþsV:B@ þ
 þ± þ*g4N± ÿ
þoM0 þL(<L
" þ'% ÿ@ þNR
 þ;!5T$?04$4)
 þo/@ þ þUv ÿYþ%J± ý2
L
 D-Ûh
Ç ]¸hirt:;p
 þ2± þ
öic sµ:B@ þ
 þ± þ\lE!
H þo1-
 ÿ43
T
 þ<?pþFr · üÓ@ þ@ þ@ þÿ ÿ(b9R
 þþ_
! ü[<+F42R
 þLþo/04 ÿpþv ÿ · þ
 ÿ­>1! >
ÿX± þ`_°
 ÿµ*,+f?I+-þK@ þ2 ÿpþþX'ïþo/@ þI(b3'P:B?pþ@ þ4
U± þ`_a
4 ÿ&4I?pþ
ÿpþý
 ÿS(6?pþ7R
 þ;*°! þ!*  È! · 'v ÿ3ýFv ÿK?3þ74± ÿpý30 ý±þ7(<r · ü  ÈÉ144þ>
 þ;KÈ!
cÿ>?2J0R
 þ*
+ þ-3O
 þ-?  ÈÓ4_
 þo/@ þ þ83 ÿpý$?pþ-%034gk
Ò 30j 
?l
 6:;3M'P'ÿYhi*
Ò 3j 
E?*
vw CÛlE!6ï
{ þAp
 þ
4p
 þ>'[3@ þ,?pþ-k
Ò 30j 
?1r · üXR
 þ
3 þ, ÿ3þ,(M?pþA4a þ'V±ÿ7'jþ þý± ÿO/p
 þ

3
? þ
./v ÿpýI ý?,v ÿ?pþ[2þ3M@ þf3O
 þ9?49;1R
 þF(Jr · üÍ()-?pþf0R
 þ;*/± ÿP
+ þQ3 þ
?N ý4? hi þþ · 3M0 þ
4 ÿq
 >1! >	± ÿ0G
 C1!4vdlEI
! üÜk
Ò 3j 
?0g3'P'ÿR4[p
 þk
_ ÿpþS'KR
 þ7C()3M':
3M0v þCÅØÇh ðChBÅ<l èñõò hBÅ<l è ahBÅ,l è:m hBÅ<l'lE*O+Fp
? þ þ m hBÅ<.
l Ù ðhBÅ<l>47U þ8( j 0kS'þ!UTt
 þk
p
_ ÿ3þL?pþ>4± ÿ3ý3 ý±þ>(6*
Ò 3j 
E?J3'P'ÿµ*°+ þ7@ þË30@ þN?pþL()4\+Fv ÿpý0@ þ44P ÿp
 þ
_ ÿ ÿµ!
rMIY$
3 ÿ#($r · ü Å-:
* n,Ih glLÇ  óÜÝðhBÅ<lo
Æ MáFp
Ç G()7v ÿ/
_ ÿþGP± ÿq
 Má>v ÿR3
3 ÿà!Kc ÿ
?pþ5+-r
* n,Ih tl þË134-?pþN þ5(g40± þ4
 þ5(OÅZ?0-/

3M$v ÿMk
_ ÿþI()þÿKv ÿC?pþQ3
3 ÿ'6!
T$p
? þÿC()$Ik
Ò 30j 
?µ3M''ÿSÅ-* & hBÅ<lXÇ   Ü ß9h sRl  l
Æ m?057E3
3 ÿ'SÇ¶h  03èééé lAv ÿKÅZ+F?

Ü0 GahBÅ<l$± ÿt
 n,Ih t.
l u m hBÅ<²
l Ç ù Ôaà!5c ÿY?pþ[+9E*?pþ8k
Ò 3j 
?t3M'P'ÿm?f± ÿS

 þ±ÿ0
 þ

þE ÿ?7@þË30@ þN/4ÿpýK'O
 þaW'þ	v ÿ/k
_ ÿ0þY()þÿµ*6L
+ þ4,>R
 þýv ÿ3ÿv ÿ3ý	 ÿR± ÿ
v ÿ44%'þ!
üÐÿ\þoM0 þ7p
 þþPv ÿ04'4
Qk
Ò 3j 
?0Vr · ü«(b  DFv*a+Fp
? þ@ þNc ÿ4± ÿ0
 þLR
 þp®Dfv7p
Ç ]  h)cp:
 þ44± þ
p
 Xsµ:B'± ÿ0PElE*4Fv ÿKrO ý3M@ þ>xKh) ÿU?pþ> þ()El9+F? m h  Dfvdl<Ç  a
Û à!9HfþL?F14vÿpý
'þv ÿ m h  DFvdl5 ÿ/k
_ ÿþ4()þÿS204 þFk
Ò 30j 
?g

 þ±ÿ
 þ*V± ÿSR
 þ
3 þ7?pþ8r · ü þo/@ þ þ
?pþ)ÿpþý ÿI(°?pþAR
 þp*12vÿpý[ j 0kQ'þFv ÿ m h  DFvdltv ÿMk
_ ÿþQ()þÿP4g3
3 ÿp
 þ0 þ!
rMrgv ý3M@ þPxC+ þP
± ÿW þþ?L±ÿG''Ev ÿpýC?Lvÿ
430p
 þh)c;:;p
 þ2± þ¦
 nsµ:B'± ÿPElF+F44t/4
'þSÛRv ÿ/k
_ ÿ4þ(bþÿV*-± ÿ m h  DFvdlPÇ  a
Û à!qT$?13± ÿ®''Ev ÿpým?'v ÿ&'þZvY± ÿ
v ÿ
23p
 þNh)c;:;3
 þ4± þq
 XsV:B'± ÿEl94$v ÿ & h  DFvdl5± ÿ	?pþ@ þ()@ þL/4þFR
 þ;­DFv!
H þo1
 ÿ4p
T
 þ7W
" þ'% ÿ þR
 þþ>($?pþC(bv
 ]Qbh )íö cedlE!GrMI?4La
 þd*g?3þ ÿ4
·
;1R
 þF(Jr üÍ?0,+þÐÿpþþ()9± þ4(b/v ÿpýLW
" þ'% ÿ þF0R
 þþ<4,?pþ[± þP4a þ$p
 þþP ÿ4'4

Ò 3j 
?06r · üÜ()N?pþÌÿpþý ÿR(- j rO~:;L
k
" þ'% ÿ þk	0R
 þ;! 2 hiÐ
D þþPv ÿ2Ä4c
 ÿpþþp
 þm()
3M
 þeC
 þÿ-vÿþ ÿ/@ þ þ þÿ4 ÿµ! · þþ · 30 þ
 ÿ¬C1!4v! ß
l üÍrO~:;L
" þ'% ÿ þ50R
 þ;I
p
? þ
.1
þoM0þ*M?pþ	
±ÿ

rdURi;E^é`}mµ;I\\B^AB5ONmVOB<^<^6\E<^\ABf~\iB,f\BpB5\^iBNYVw ;
EdB$BV
m BBo B$-p9égi;B~9é EAB\$~B^EéVB$é`\^'tÍ F\BE)xJ zy{}|Z~¢
 FQE\~ty%
m EB\BE~59^'B^¢;
¨=©Kx

í[î

RR 

 { 

þ4þ

v


Û

)

RR 

t}-m{t/s$q

os0ïðptÊ{añ

l ñqMð î
í a



c;:;3þ4±þXsV:B'±ÿP4



í

 { 

£R 



v

>
RR 
v


*

sV:B@þ
þ±þ

þ4@þ



v

Û

)

£R 



rt:;pþ44±þ


þ4@þ

rOý3M@þ>x1­Fc+ÿE4±ÿ
þPþ;  DFvYhiþ()ElN±ÿ0?pþrO~:;"Lþ'%ÿþ±þEÿ(ARþp
h) ý?ElA$k
Ò 3j 
?0Vr · üf*+F?pþ@þ m hBÅ<l<Ç  Ûaà7()$%?K3M'P/!

 D9Û

+F?pþ?3þt?pþN'YBÕÞ]%'vý±ý±þH)vÿÜþ±þ>''vÿ3ýF4V()4\+-þ71LF@þ°ÿ0þ`d1!grOý3@þ-x7h)ÿ7?3þ,ý?El
?M\+F5Ik
Ò 3j 
?µr · ü=(b5?3þQrOE'~:;L
" þ'% ÿ@ þf
 þ;
@ þ'% ÿv ÿ3ý>'  D-Û1*1+fp
? þ@ þQR
 þp
·
D9Û&
Ç ]Ìhirt:;p
 þ2± þ×
 ö cÚsV:B@ þ
 þ± þ\lE!ÜrY?4Cr ü>* m h  D-ÛlCÇ  a
Û àÚ
! üTÿÓ''Ev ÿpýW+f?M þ


 þvÿ3ýL3
3 ÿI/4,'þ[ÛN ÿ/k
_ ÿþ4N(bþÿ+F44/v ÿ
23p
 þA?pþ5_0E'O' ý±ý±þ9± ÿ0Ì
 ÿM<?pþF@ þ'% ÿ þ
·
?>?M34m()4\+Ü!ãü[>2
3 þ ÿ 3M0 þ
4 ÿõC1!x1*t± þE(b/v ÿpýYrOE'~:;L
" þ'% ÿ@ þR
 þþ

± ÿYv ÿ	'Ì
 þQ
4
3P'±ÿ0
 þLhiv ÿ
430v ÿpý>4%(t3M)
 þo/
 þE4O
 þÿEl6R
 þYþË13 þÿA'± þ4(b/v ÿpý8?pþ
(i34JW
" þ'% ÿ þ7R
 þ;]Qbh )8öcdlE![W
× þÿ0
 þ(b?V*µ+Fp
? þÿY
+ þ3 þ7?pþ7þE j W
" þ'% ÿ þk?4[4
30O
 þK'v ÿ0
43p
 þ[%?K?pþN(i34%L
" þ'% ÿ@ þL± ÿK?pþLrO~:;L
" þ'% ÿ þN± þE ÿ!

¼ bp
¼ 

ïÅ@É8*ÒÅ['^Ä"Ã ekg79Åg[F]{Ái[e^

eºh

Hfd+±?8+-þC?±þ	3M7@þ@þþÿÿ7()702±ÿ>±ÿZRþvþ*t84L%0þ'mpþ
4þ
/p
 þ1
p
? þ
.1v ÿ3ýM*! þ!*(bg04± ÿÅU± ÿ>0R
 þ;LÈÍp
 þþv ÿv ÿpýF+Fp
? þ?pþ<Å#Æ ÇÍÈ!OrO'*?M\+ þ± þd*
+þÌÿpþþ'KR
 þýv ÿG+F?mp+9\
 þ þÿ26p
 þk
_ ÿ4 ÿ[(9

 þ4044pa­N

 þ0444;Y(- ÿpþ± þþo
() ± ÿM?pþd*0± ÿY

 þ0444;(O± ÿY' (b I± þþo%!

´Å½^j[Á[ek^ ½ ::þþo  47ý¾¾¼ þþ Áyç½¼  ~º¹ ±þþo 0 (O±ÿKÿ4	4(t?pþþÜþo/2'Fa?Y()

0 '7  !
Z´
Å ½^j[Á [ek^E üA' ^ l( Ü ß9hyÏ>lQ2Iý¾¾E¼ þþ Áyç½¼  º¹Ô±þþo@ 0 (,±ÿ0mÿU(,?pþ@þOþoM4'N
0?K()h 0 '7  ±ÿ§^ l( Ö ñóò h (Kè   lE!
Z

ü[


 þa44pL(b¶vÿ41'þ<26
þÿ''L13þ1
E?pþ
./vÿpýM!<TF?pþ9þ'ÿP4O?pþA()4\+FvÿpýM!
"Lþ
2() · þ
ÿ­>1!ÛN?9Rþp8ÈØ46'3pþ8h)()4@þ\lg(b-±ÿr · ü´Å-*%hi!þ!*/Å#Æ ÇÈÉhBÅÝÆùÇÈ7l'lE*
(L± ÿÓ ÿ#4(LÈ¯2'33þS()¯þ±þÓ''EvÿpýZÿ#?pþm4±ÿpý3ý±þ & hBÅ<lSh)()4@þS()K'Oþm''vÿpý®vÿ
 þk
_ ÿ ÿVº
* þ± þR''v ÿ3ýYv ÿ?pþC4± ÿpý3 ý±þ?0>± ÿ®

 þvÿpýS3
3 ÿµ!TFp
? þ@ þ()@ þ*g4>4
& hBÅ<l'lE!KÒ9R3
ÿf
 ÿpþ
 þ'± þ4(bC?pþNR
 þp()$''v ÿ3ýA?$?± þ7± ÿY

 þvÿpýE3
3 ÿµ!6Ò-Cp
 þ
_ ÿ ÿµ*
þ±
 þ	

 þvÿpýI$
3 ÿR
 þýv ÿ0,+F4?C± ÿ	v ÿ04°'þ!,T$p
? þ þ(b@ þ
* þ± þ	'þLv ÿ	± ÿK

 þÿpýI3
3 ÿ
4L

 þ0 þ(bÌ± ÿWv ÿ04O'þ*6± ÿa
 þ± þR' hi
:;'þ\l>v ÿRS''v ÿ3ýK(-?3þ4± ÿpý3 ý±þC4


 þ40 þ[(b ± ÿ	v ÿ2'þ!-ÎAv þ*1?pþf ÿ0P'þ5± ÿC'PA?)ÿpþþ'I
 þ[v ÿ± þ
v ÿ	±
 þ_a
 ÿY@ þ>?M þ>

 þ0 þN() v ÿ04°'þ!
c ÿ4±
 ÿ0
 þ>R
 þvþ$
± ÿG
 þ>@ þ: þo10@ þ þGv ÿKþF(<

 þ0444;!5c ÿ4± ÿ
 þ7R
 þp
]  )R
34GR
 þ7@ þþRN/v ÿpý	?N?3þ@ þMz
 þc
 ÿÐþoM4'N±ÿS' ^a*µ+Fp
? þ þ.^GÖ )J*%?
4f

 þ0v þL(b ± ÿU ÿ4µ'þ!Fcp[4$83
?G@ þ8`e
34-'Éþo10@ þ[L
" þ'% ÿ þ>R
 þþ

¨=©dë

ª

mknpokmkq

3

 ÿ
Z30v ÿpý

 þ4044p!qT
H þ±þ?pþþ*A

þ042;Z04/P.±þXvþUvÿX±þ()/vÿpý4
Rþvþ*M$+F420RþLþþÿS?M!
T$3
? þ@ þU@ þm ÿ137
 þ(N+-d1C'WRþ() P1pþf
?pþ
.1ÿpýM*$03M?pþ@þY+þU()1
30ÿq;+-M!
T$p
? þf_09Oþ?M/C49
 þ
_a
4I4 þ()A ÿpþ[
2-(VR
 þþ ??pþQ þ
 ÿ	4-3/eC
 þÿ4
ý±þÿpþ°()53 þQv ÿ±
 þE(b/v ÿpý8P± ÿ
4 þ-(tR
 þþ!OT$p
? þ[ ÿ0 þf()5
?M1v ÿ3ý88'R
 þ
`_a

 ÿc
±
 ý±þÿ3þ ý4?¶4O?<?04O4d+f6(b9N
04 ÿI'>p
 þþP ÿpþA?pþ$
03M4 ÿ
þe
 þÿ0
Ì
 ýv ÿpþC1R
 þp:;
 þ
_a
$44v ÿpýhi@ þþ · 3M0 þ
4 ÿ­C1!xlE!<c ÿC?4- þ
 ÿµ*M
+ þÐý± þ
? ý?M:; þ± þf±. þ
p
? þU(L?pþ þm;+-#/p
 þQ
p
? þ
.1 ÿpý& ý?!¶T$p
? þG()32f ýE?PC@ þv ÿ
· þ
 ÿ±C1!
T$3
? þO_0'µ ý4?´4µ5± þ[20 þ6± ÿY
 þe
v þÿJÌþ?M1L4@ þQ()Vc ÿ4± ÿ
 þ,R
 þþ
á
á
È
Ç ]  )J!WrMã
 þ± þ® ÿ49'þ *9?4IO
 þ?M/®R
 þýv ÿI ± ÿX/4Iþ± þX' ^ 


 þ40 þK()i
 Máp!&c([?4'u?0Ì
 ÿM þMZR
 þþÿ&
Ep
? þ
±. þµ*$4P
p
? þ
.1'W þþY+fp
? þ?pþ
^\×Ö)J!GcR( ^±Ö)J*6?pþÿZ?4848
 ÿ43 þ@ þZS± þ`_°
 ÿ®()423M@ þ!Uc(5?pþ@ þ	@ þ ÿMG()243M@ þ*
±þ`_°
 ÿY3

 þþ0!
T$3
? þ þ
 ÿXO
 þ?1µ*<3'P:B?pþ@ þ4
R'h ü6T[l>P1p
 þ-
3
? þ
./v ÿpýM*,4>± þW%0304>v ÿZ?pþ
±þ`_°
 ÿ44þ3M@ þ>h þ! ýM*/ þþR:<E± ÿ{R
 þ*0vw QCl9± ÿP
± ÿ
 þf3 þ'7± þ().
 ^@UWÑ8M:
þpîþo/@ þ40 þ>Nk
_ ÿþ:;þI3'P'ÿµ!Lc[2f3@ þG3
? þ@ þ7()NrO'~:;W
" þ'% ÿ þ>0R
 þþ!
cÿãü6TÍ/p
 þ0
Ep
? þ
./v ÿpýM*/'./v ÿpý>+fp
? þ?pþAÅÓÆ ÇÍÈ«4
 þË13 þÿ<'8.1v ÿ3ý>+Fp
? þ?3þ & hBÅ<Z
l Ù & hiÈ7l
()LR
 þpSÈ!T$?2[2Y
 þË34 þÿQ' & hBÅ<Z
l u & hiÈ7lNÇ Ôh)+F3
? þ@ þ & hiÈ7lNp
 þÿMþN?pþP
P0 þ:
 þÿ( & hiÈ7l'lE*-+F?4
E?X4 ý?0P4
4þþ#1R_08./v ÿpý?3þKþÿ'/3
I([?pþ
O
04± ÿSr · ü Å#± ÿS?pþ8r · ü¶
@ þ'% ÿ ÿpýI'  ÈÄhi! þ!*VÅ   È7lE!$T$p
? þ7r · ü¶
@ þ'% ÿ ÿpý'
 þÿL4± ÿpý3 ý±þCv ÿþ þ
 ÿµ!YTFp
? þ ýE?
 È 

 þ & hiÈ8lE!YT$p? þþÿ0'70103
>4a þO
l Ç ù ÔmhBÅ ÆùÇ¶È8lE!LT$?4
?pþÿmp
 þþv ÿpþ[+Fp
? þ?pþ & hBÅ   È7P
l Ç ù Ô1*µ+F?4
E?S204 þ & hBÅ,.
l u & hiÈ7¬
 þþv ÿ ÿ4,4P0 þO
p
 þÿþA>
Ep
? þ
.(bA
/
 þAv ÿP?pþf/3
,r · ü«Å   È´?A@ þQ
:

 þ40 þ5()Ü'Ì

 þfv ÿ44M'þQ± ÿP?-4'()± ÿ?3þ9
 ÿ4 ÿ<v ÿ?pþFr · ü

 þ±ÿ0
 þ

þE ÿµ!6L
" þ
4a?A7
/
 þN497 þË1p
3 þÿ
 þQ(V± þ4
 þNh  03èéééè   l<3
?C?N  
Ç  0 
! ü´
/
 þ
45

 þ0 þL() ± ÿUv ÿ4%'þ7(t ÿ3þN(O45± þ4
 þf45

 þa þN(bz?pþ>v ÿ04%'þ! ü

/
 þN?545

 þ40 þ[(bz± ÿK ÿ4°'þL± ÿ	?$4~$
_ þ-?pþLr · üØ

 þ±ÿ
 þ>
4þ ÿ
4a4 þAO
 ÿM ÿpþ0;K4± ÿpý3 ý±þ!9T$?454AR
 þ
3@ þ>P'' ÿpý45v ÿK?pþL2± ÿpý3 ý±þL(6± ÿYr · ü«(O$4
 ÿ ÿ/k
±
_ ÿþ:;v þÿpý?P þË1p
3 þÿ
 þf(%
4 ÿ94'()1v ÿ3ýN?pþfr · ü

 þ±ÿ0
 þQ
Eþ ÿµ*+F?4
E?P+A/
v ÿ
23p
 þ$?3þ7@ þË13 þO
 þÿf?NQ

 þvÿpýC3
3 ÿG83'[þý ÿSv ÿG± ÿmv ÿ2V'þÜ
! ü[4t ÿ/k
_ ÿþ
Rþ?/)
 þ± þÿ34¯
 þÿ053MUv ÿKP
/
 þNR
 þ
3 þ>?pþLr · ü¸?$8k
_ ÿ4þÜÿ37R
 þ5(gþ!
T$3
? þ@ þ(b þ*,'RR
 þK
 þv ÿ&?0?pþY4± ÿpý3 ý±þY2O
 ÿM ÿpþp*-4I2O
 ÿpþ
 þ®'Wp
 þþEPv ÿpþ
+Fp
? þ?3þf± ÿY

 þ0v þ>
1
v þ74'$
_ þ$?pþ8r · ü¸

 þ±ÿ
 þ
þ4 ÿµ!-TFp
? þ>
þE ÿK(<v ÿþ':
þ'I4L?3þC*
Ò 3j 
E?,
4þ ÿµ*O()7?pþ(b2d+F ÿpýY@ þ' ÿV!Uc7473O
 þ®p
? þ@ þ?8?pþfÿ3þý ÿ
(A?pþP
 þ;&h  È7lQ4Ü
 þo1 þ þW7Yk
Ò 3j 
?0<3M'P'ÿµ!KT$?04N402 þ[?L?pþr · ü R
 þ:
v ÿpýK þE
p
? þµ*O! þ!*gÅ   ÈP*J4L4YKk
Ò 30j 
?<3'P'ÿµ*g
 þ
30 þ.1 ÿpýK?pþPþÿL/3

@ þ@ þ± þF?04F
4þ ÿµ!$T$3
? þNk
_ ÿt
p
? þ
.Y(<?4f ý?0 4F+Fp
? þ?pþ[± ÿS

 þ0 þ8
1
 þ8v ÿ
Å   È 2~$
_ þN?pþk
Ò 30j 
?<

 þ0±ÿ
 þC
Eþ ÿµ*J
 þ
30 þv ÿm?7
 þ?pþ4± ÿpý3 ý±þ2Ü
 ÿM
þpI
! ü¶0103
[þ¬Þ4Qv ÿ m hBÅ   È7l$+Fp
? þÿpþ± þL4[?QK
% ÿpþÿQ'þv ÿ m h  È7lE*
þ! ýM!*[hBÎF³QsJst|-ÎAT5c~HNÙ8*t"f|-ÎA|,,c :[cHNÙ8*O"F|AÎA|<1c :fc~HNÙ8*OÛl748v ÿ m hBÅ   D-ÛlN()IR
 þ;óD9Û
Rþ
3 þY8()3M?&
% ÿpþÿP4'þUÛG( m h  D9ÛlE! ü[

v ÿpý'?3þYk
Ò 30j 
?5

 þ±ÿ0
 þ

þE ÿµ*</4ÿpýGþØÜ m hBÅ   È7l8v ÿ/k
_ ÿ0þm(bþÿØhi3P ÿpýqW4

 þ0 þ	()
 ÿq ÿ4A'þ\l402 þ & hBÅ   È78
±
l Ç ù Ô1!ÍT$?2I+F445?0
 þÿ&4J
( ®40P(N± ÿq

 þ40 þ

/
 þ!$c ÿU?Q
 þ*Jj
Å ÆùÇØÈÉ± ÿS± þ`_°
 ÿY(i44!f³Q?pþ+F4@ þ*a:
( ÿMC

 þ0v þ>/3
f'þ

¨K¨=©

í[î

t}-m{t/s$q

í

os0ïðptÊ{añ

l ñqMð î
í a

óÜ

hBÅ   È7lQ4>12þRvÿM_kÿþU(bþÿÍhi!þ!*6>4ÿM7vÿWU
/
þ\lE*O?pþÿ & hBÅ   È7lLÇ Ô
m
±ÿ®?pþ@þ()@þ & hBÅ<l¬Ù & hiÈ7lE*,B!þ!*9ÅzÆ Ç ÈÐ±ÿ0W±þ_a
ÿX3

þþ!aü @þ44±þïþe
þÿ
 ý4?±(bÐ
 ü6T±þ`_°
ÿK()z?pþ>2þ3M@þN4A0@þþÿþUvÿ · þ
4ÿ×C1!


¼

bA


ÒÅ ZÅ

ÄõÁ¡eó¾fhj]GÒÁ¬È¦É]$^ÒÆ

]\_['^  ]3gi^j['^

Ù ±þÿ802±ÿIÅS±ÿ8Rþp>È*/pþ/
?pþ
.1ÿpýNpþþPvÿ3þJ+F?3þ?pþ,Å#Æ ÇÍÈ!OHWþo/O+-þ5
ÿ4pþ
Q
?pþI
þI(,þÿ0vÿpýM*0+f?4
?S4[
E?±ÿpý±þI'UÅ-!fT$?04F30þ
ÿGM@þþF?3þ843pþ>(9?Md+¶
 þ
 ÿ0v ÿpýIR
 þ'F
± ÿURþ
fP04± ÿUÅ®'Ìý±þÿ3þþ7Ì
 ÿ3þ+´04± ÿUÅ  !
{ þKR
ï
 þýv ÿZW@ þ þÿvÿpýmGo1 ÿM7®(Fr · ü  þ7 ÿv ÿpýYR
 þ'E!cp4I44±. þ?±ÿ
 þ
 ÿ0v ÿpý7Ì
 þ?M1	()5
0 þþL3
 þþPv ÿ2'4
$r · ü[A+F440R
 þQ
P°@ þ(t ÿpþQ$@ þQ(J?3þ þ
R
 þ'!PHf?v ÿ3ýY°3[3>
E?@ þË13@ þY
 þ23M ÿm þ ÿ0v ÿpýC
 þL@ þ?g?M\+ þ± þ7'
P±. þS?pþU4
3 ÿX
 ÿ
 þþ*5?44?3þY(bE (N þ ÿv ÿ3ýG?04P3O
 þ#p
? þ þ!qc ÿ&?pþ

 ÿþo1Q
( þ43 ÿUv ý?P*0?pþIr · ü¶ þ ÿ ÿpýPR
 þ'Q@ þ8R
 þ3M04 ÿ*030
?m
83M ÿ*a04 þC'P?3þLr · üf!
0 ¡l¢%2e£\¤
¥o¦ l§¨ª©«­¬ª« ®« ¯°%±  ¬ ª ¯²®«  ¬B©ª¨
«­¬ª« ®« ¯° « ³  ´	l´%¢ ° ¯²®«  ¬\µ ¥·¶ ¸
 ¹ ¯° ¢ ¯²®  º ®¬  »» µ ¥·¶ ¸
¢ ¬®«­°%® 	I¼ «­¬¯²®«  ¬²½ 	 « ® ª «  ¬ ¡%
¥¾¦!¥M¿ %§¨ª©6¬ 4À ®±  ¬ ª ¯²®«  ¬J©ª¨
»Á °  ® ´ ¯  ¬® » µ ¥·¶4¸
´		 ® ¢%IÂ µ ¥·¶4¸
4¹ ¯° ¢ ¯²®  º ®¬ »Á» µ ¥·¶4¸
 ¬ ¡l¢ ¬²®«­°
 ¬ ¡O´ª04²¡Ã¢2

©

¨

rOý3M@þ¦C1­9T$?pþN3M4ÿpþQ(g±ÿîþ43MÿCýE?K!
{ þ3OþI?Lþ7ÿvÿpý1

3MENvÿG;+-Y0?þ­f?pþ3FCvÿpþI±ÿmÿ4vÿ3þ70?0þhiþþrOý:
ï
3M@þ7vdlE!<D[3vÿpýN?pþF3Fvÿpþ50?0þ*¦þ
E?Cý±þÿ9,+f?PN±ÿ0MPIvÿ24}þ8%034ÿI(

±ÿ2þfr · üa4± ÿ!OT$?4,%034 ÿ4
 þ± þK30v ÿpýL?3þWþ43M4 ÿP ý4?Ü34v ÿpþ
vÿZrgv ý3M@ þ«C1!GT$p
? þP ÿW1Z(5?04> ýE?
 ÿ04'7($ þ þ
vÿ3ýU0@ þÿ>a4± ÿL()Ì?pþ
%0344 ÿµ*µ0/v ÿpý	R
 þ3Ma ÿG
 þE'N'Y?pþ0@ þÿN'Y/3
 þIµ' ÿpýMº
* þ23~:
v ÿpý	?pþ8_0@ÿ3þQ(9?3þ8µ'Ev ÿpýM*µ±
 ÿm?pþÿm@ þ3 ÿv ÿpýC?pþµ' ÿpý'K?3þ8%0304 ÿG(,?pþ
@ þ3/e
 þÿY_a!ãüF()þ>?04c
 þ43M4 ÿµ*V± þ`_°
 ÿR± ÿ þ0>@ þM ÿpþ'Y?pþ@ þv ÿ24
ý±þÿpþþU04±
 ÿ!
üA5?pþL5(J?pþN
 ÿ04v ÿpþf0? þp
* þ
E?Y ý±þÿfþ þ
5 ÿpþ j R
 þ'kYhi

Ev ÿpýI'P j _0@ÿ3þ
(i3
3 ÿ
 ÿklL04± ÿZ()Ì47%0304 ÿR()
 þ
o þ
3 ÿµ!RT$p
? þ	 ý±þÿ@ þ	?pþÿZ$
_ þ4p
 þ®± ÿZ04± ÿ
þ
o þ
3M ÿ84Jv ÿþ þd± þ>+f?L þ ÿ0v ÿpý>hi4 ÿalE*@ þ± þ`_°
 ÿµ*± ÿL02± ÿL@ þ04J_
 ÿ3þþp
 þµ!
T$p
? þ03M% þ($v þ ÿv ÿpýS3Mv ÿ3ýK?pþ ÿ2v ÿpþ0?@ þ4>'Uk
_ ÿ3þ:B33ÿpþ?3þ04± ÿZ± ÿW084L'
.±þþX0
 þ+f?Wî
 ý344G?0(bÿpý þÿ/ ÿ0O
 þÿ*Ov ÿ0
 þÉÿM4G@ þ`:B+-4ï
 þÿ14 ÿO
 þÿ
@ þ)ÿM6'4
!6T$3
? þXþ43M4 ÿ> ýE?«(arO ý3M þZC[4O4'Q3 þI3MEv ÿpý$?2J0?0 þ*03Mg?pþ
30 ÿC4-7%0304 ÿ} þQ(V ÿpþN± ÿ	v ÿ
@ þÌ
 þÿ% þ ÿ0v ÿpýChiB! þ!*1 ÿ3þQv þ ÿv ÿpý7R
 þ'

¨K¨K¨

ª

mknpokmkq

02þCþ$r · üØRþ)ý±þÿpþÿ°lE!,T$?452A
4
µ()F43ÿAvÿ	+F?04
?	?pþcþÿ/ÿOþÿ

?0± ÿpý±þL
 ý034*M?3þ$?±ÿK04
4!
rMEP4*,mP
E?v ÿpþK þ7 ÿv ÿpýS
 þE'PVW­9Å ö Å  
?±ÿ3ý±þP&h)/3
8Pvÿ/430bl
r · ü´Å'7%'~:; þ ÿ ÿpýNr · ü=Å  :
! üP00v ÿpýQR
 þ;+þþÿp+9I3M'PÅ± ÿ0CÅ  4,p
 þk
_ ÿpþP-
Pav ÿpýR
 þ;+þþÿG?pþW
 þv þO
 þÿIhiÒA± þ*6vw Q>lEY
! üAf?3þ7? ý3
? þ'Fþ± þ*a+ þ8
± ÿm3Mµ/4p
 þ[?pþ
þ ÿ0v ÿpýIR
 þ'$

0v ÿpýP'P?3þcþ þO
 þÿ$(O?pþLr · üØ?$?pþKþ­
³ ÿpþ
47(FþE'70*6pþþþ*6\±þþpý±þC'±ÿ4ÿW
ÿ4ÿ!YcÿZ?pþ
c
+-* VI­ ñõò hBÅ<l;ö ñõò hBÅ  lE!
Ä

üÐÿM?pþ[
45(gRþ'f*pþvþþ*Mf\±þLþpý±þ*a!þ!*
Ä

VI­ ø

hBÅ<l;ö

ø

hBÅ  lE!

TF?pþm?n
4	(7þE'YCYpþvþþ	±þ4
þ*NÿpýX+F4?Ó?3þ¯þpý±þ*N!þ!*
VIa­ ðhBÅ<;l ö ðhBÅ  lA± ÿ0§
 V8­ ø hBÅ<2
l ö ø hBÅ  lE!
Ä

Ä

TF?pþ(b3?
4K(8Rþ'Y
E?±ÿpý±þU?pþRÒ-þ±ÿ=ý±þ&3@þ´vÿn?pþ'±ÿÿ

 ÿ0 ÿ*/B! þ!v
* V8­ Ï ö Ï  !

× þ@ þ*µ
T
+ þPMf
 ÿQ3þk
_ ÿpþ8
 þE'Q?NGLp
 þ þþ'þ!7+c ÿG?pþN+-*°+þM ÿM
Mþ[?pþI?G
4Q(9þE'!>T$?3þ7@þÿ4[?N+F?S?pþI;1Rþ8(-r · üfN30þm?pþ@þ*
 ÿpý7p
 þ þvÿpýKK'þMz
 þ
 ÿM*Jv ÿ@þ(p*VRþ
L
 þþ!8cpL4Q+f?Q+-þC+f?m?pþ
þp
 ý±þ'a<\(b R'þG± ÿ&?pþ'E± ÿ ÿq
 ÿ ÿ07?0
± ÿ#þ+Fp
? þ?pþR
 þp
4'p
3 þU	(i4 þS(b	R02± ÿµ!´T$?44PR
 þ
3@ þS
 þþP@ þG'p
3 þS(i4 þS(b	
M:;'þ
hi'PElfE?pþf?0± ÿS()Nr · ü 'þ!Lr03M?pþP@ þ*%?4f0R
 þ[M
 þY
 ÿMQM@ þ[
?0± ÿpý±þQ'
?pþ8Ò91 þ± ÿm ý±þE/*a+F?04
?S4$?pþ7(b3?S
2F(6R
 þ'E!FT$?2F
4f(6R
 þ'*°+F?2
?
v ÿ
23p
 þA0''
4 ÿ*0450M@ þ þK ÿUÙ[M ÿ®h~vww QlE!
T$3
? þ@ þ(b þ<+ þ-@ þ,()/
3v ÿpý5 ÿ>?pþ<_a'V±ÿ7 þ
 ÿ8
4 þJ(M
 þE'!Jï
{ þAp
 þk
_ ÿ3þ<R
 þ'

Ep
? þP*1?pþ-?± ÿPR
 þ'E
! üÍP
? ÿpþF þ ÿ0v ÿpýNR
 þ'A
p
? þ7a4 þO'I3
3 ÿ'R
 þ
`$
_ þ
h)40 þ\l± þ4
 þW
* þp
 ý±þ*f± ÿ0q'± ÿ0 ÿÓ
 ÿ ÿ0!{n3
? þÿÓv ÿ0'±ÿ2þq+F4?q04
34
±þ4
 þ
* þ3
 ý±þ*M± ÿ'E± ÿ ÿ
 ÿ4 ÿ*4,Rþ
O
 þA>P
E?v ÿpþQ þ ÿ0v ÿpýLR
 þ'!6c ÿPEp
 þ
'R2&þ43Y*<?pþ	R
 þ'
Ep
? þPp
 þk
_ ÿ0 ÿ8
 ÿ43
 þ8 ÿ0W?pþ	@ þv þ± ÿ0I([?pþ
r · ü7z
* þ! ýM!*/?M þ[09?ý±þ5þ@ þµ!6T$p
? þ þf4-± ÿ2044
4O34 ÿP?A4°3
3 ÿ'R
 þ
`$
_ þ
·
0F(O?pþ>r ü«@ þPv ÿY?pþ>O
 þ8(bþfR
 þ'[0044
 ÿV!,T$p
? þ@ þL2F4'± ÿY3P ÿ
?A?pþQ þ ÿpþ
 þÿ3@ þ,?0A20R
 þ'-±. þþK?pþQ3M'P'ÿU
0 þþQ± ÿ	p
 þþP ÿ4'4
!
T$3
? þ7R
 þ'Q
± ÿmR
 þ7@ þþÿv ÿU?3þ7o/ ÿM7Xh)0 ÿal5(9rO ý3M@ þPÑ!Qï
{ þPp
 þk
_ ÿpþIþ
?(
?pþQ
@ þ'% ÿ0v ÿpýLR
 þ'5
Ep
? þPA-(b44d+F*1R
 þýv ÿ3ÿ ÿpýN+F??pþ[P'-ý±þÿ3þ° ÿpþ*M
4 þ
V\Å·Æ KH=I *+F?4
E?K
?± ÿ3ý±þL þp ý±þ7'± ÿ4 ÿC
 ÿ0 ÿ­
Å çE¼Qý
Â ÒÔÓMÕ g6Ábü)*
¿ Ö[ºº½¼ýÂUý½Ã¼Jç~ýBÏ  ýÂa»8½¼üzV\Å·Æ KHOI ­
Ç G;Åg]{Áe$g(Èo\ÅÊÂ ]Ø½fÉeÊÌËÍªÎÏªÐ0Ñ - ¼ü%Ý
ÅXö Å Ø× eJ¿/¼Â«g,¼F»¼ ( Âa¼V\Å·Æ KHOI ­ ñ ò hBÅ<lö ñ ò hBÅ  l × ÂQû/ýEüÁi¾1½ý  þ dûûMº þ ¼_ÙPÖ ñ ò h ( è  . l 
Ù§Çn
ù y   º 5h (Jè  . lÜ ø hBÅ<l$ýÂ0»Ù×Ö ù ñõò h (Jè  * l  ºAh (Kè  * lZÜ ø hBÅ<l × eJ¿M¼Â9V\Å·Æ KHOI h ñóò h (Kè  . l'l
öBþ ü;¼û ÷ø ýÂ0»²Û%ºV\Å·Æ JH=I h ñ ò h ( è  * l'l Ú ñ ò h ( è  * lZª!Ù öBþ ü;¼pû ÿø × Â	ºü)¿/¼
Ú ñ ò h  ( è  . lZ  Ù
g<º ~» þ  V\Å·Æ KHOI ¹Iý # ¾EºÂ þ Á þ ü$º  ü}g<º þ ü;¼pû þÜ ü)¿M¼ (  þ üAüBº´'¼¹ºú¼P¾ºÂ0»ÁbüÁiºÂÙ  ~º¹Ô¼»Ã1¼h (Jè  . l 
ýÂ0»mü)¿M¼ þ ¼¾EºÂ0»müBºmý»» ö ü)¿/¼ þ ý¹¼ ø ¾ºÂa»ÁbüÁiºÂÙ®üBº¼»Ã1¼	h (Jè  * l × ÕQ½ ü;¼EÂ0ýüÁbú¼½ #  V\Å·Æ JH=I ¹ý #
¾ºÂ þ Á þ ü5º  ºÂM½ # ºÂa¼Iº  ü)¿/¼ þ ¼8}ü g<º þ ü;¼pû þ ×

¨K¨Oµ

í[î

þZh~vdl£^@Uo5'þ®hÛl


þ~:;
ä ÿ ä
äå

ä

V   ì



( Ç * à
àá
äå ä

V\è I1
I, I " HOI 

êæ ë

à
ê
æç

ê

ê


V _âã I àá à
Þ

Þ
Þ

ù

( ÇÝ *

Þ

Þ

à
à

à

à

à

os0ïðptÊ{añ

í

t}-m{t/s$q

à

à

Þ

l ñqMð î
í a

V\Å·Æ JH=I
Þ
Þ



þ':;
ÿ
Þ

Þ

ä å Þ äÞMß æ
æç

V\è I,
I  I "  è è

V I Å "  è è

Þ
Þ

Þ

'þ®h~vdl°VÕI'þXhÛlAÿpþ
Þ
Þ
Þ
Þ
Þ

Þ

Þ

'þZh~vdl äå

Vè I,
I  IÌé I Å
äå ä
V\è I1
I, I

æ æç

V KI Å

ä
ÞMß æ

æç

'þXhÛl

V  è4è é3HOI 

äå ä

V  è4è

æ æç

V H=I,

V KI Å " HOI 
rOý3M@þ7Ñ­,Tgo/ÿM>Rh)0ÿal9(6þÿ0vÿpý8þE'!

ü[4V(O?pþ7@þPvÿ0vÿpýRþ'[@þþþf'	pþ
ERþLvÿKþPf(<@þF(6()3MFE4P±þ

Rþ'!RTF?pþ@þ()@þ*6+-þ ÿpþo/pþ_kÿpþ?pþþ	()3MI4P4±þ*g+F?4
E?Z@þ	ÿpþ:;þ&þE'
?-@ þf'R
 þ
40
 þ,n
( V\Å·Æ JH=I ±ÿ0Rþ99?pþF%''Üý?,9vþ±þAvÿ?pþ[?þE
?8(
rO ý3M@ þ>Ñ!,TFp
? þ[_0'A;+-PE4P±þfRþ'$pþvþþhyVè I,
I  I l-±ÿKRhyV  è4èl-þpý±þ!<{ïþ7pþ_kÿpþ
V\è I1
I, I 'p þv þþÜþp ý±þh  (Jè  . l-+F?	?3þN þE'f
Ep? þP/­

;Å {Á
ÅÊÂ ]DE>Éeí\Ð²î­Ð4ïÐÃÑ - ¼ü,Å ç ¼ýÂÒVÓrÕ g6Ábü)¿(Öfºdº½¼ýÂZý½ Ã1¼Kç~ýPÏ  ýÂ0»	½4¼üV\è I1
I, I ­
Å ö Å  ç ¼S»¼ ( Âa¼»õg6Ábü)¿GVè I,
I  I ­ ø hBÅ<lPö ø hBÅ<lVð  h (Jè  . là  ºK»¼½4¼ü;¼»Z¼»Ã¼Uh (Jè  . lKº  Å ×
& ¼¾ý½)½µü)¿1ýü,ýÂaºÂa¼4ñÁ þ ü;¼Âü,¼»Ã¼Q¿1ý þ ü}ýÂ þ Á)üÁ)ºÂm¾ºÂ0»Á)üÁ)ºÂ@ò ×*ó ûM¼~ýüBº£V\è I1
I, I ¾Eº1½`»ü)¿/¼'¼  º'¼EçE¼
¾ºÂ þ Ái»¼'¼»ý þ ûM¼¾dÁ)ý½°¾ý þ ¼Nº  VÅÁÆ JH=I ü)¿1ýü6¾ºÂ þ Á þ ü þ ºÂM½ # º 5þ ü;¼pû öp÷ø ýÂ0»ýÂKý»»ÁbüÁiºÂ0ý½µ¾ºÂ0»Á)üÁ)ºÂ
ü)¿1ýüA¹ þ ü£ç ¼7¹P¼ü  Âaý¹P¼½ #  ü)¿1ýü\V è I1
I, I h ñ ò h ( è  . l'l Ú ö ñ ò h ( è  . lq  Ù ø Ú ò ×
{ïþ8pþ_kÿpþBV  è4è>' þ3ý±þh (Jè  * l9+f?	?pþLRþ'[
?pþ/­
Ç G;
Å g]{Á e$g(Èo\ÅÊÂ ] ¼ ÉeHÍ	í0íHÑ - ¼üJÅjç ¼NýÂÒVÓrÕ¿6g Á)ü)¿OÖ[ºº½4¼ýÂGý½Ã¼Jç~ý9Ï  ýÂ0»P½¼üWV  è4èN­/ÅXö
Å  ç ¼f»¼ ( Âa¼»¦6
g Ábü)¿BV  è4è>­ ø hBÅ<lö ø hBÅ,lô  h (3è  * là  º$ ý»»¼»8¼»Ã¼fh (Jè  * l5º  Å ×kó ûM¼~ ýüBº;V  è4è
¾º
 ½»«Eç ¼L¾EºÂ þ Ái»¼~ ¼»ý þ ûM¼¾dÁ)ý½J¾ý þ ¼Lº  \V Å·Æ JH=I ü)¿1ýü,¾EºÂ þ Á þ ü þ ºÂM½ # º f þ ü;¼û öBÿø ýÂ0»ü)¿/¼Lý»»Á)üÁ)ºÂaý½
¾ºÂ0»Á)üÁ)ºÂü)¿/ýü ñõò h (Kè  * l Ú òNû Áiº>
 üBºKýEûûa½ # Á)ÂÃ|V  è è ×
T$?3þP?pþ8;+-SE4P±þIRþ'8@þC'Rþ
44}ÿ#hyV I Å lL±ÿaý±þÿ3þ4}ÿnhyV H=I  lE!
G g] e$g(Èo\

Ç

· Rþ
444}ÿ7±ÿ0ý±þÿpþ4}4ÿ@þ5Rþ'6
Pÿ0>()33ÿIvÿ8?pþ$P
E?vÿpþ5þ7ÿvÿpýQ4~:
Q>lE!-+c ÿ?pþQ
 ÿþo/5(J± ÿ	r · ü7*/ þ
24} ÿd+ þ-?pþQ þ± þ
(A	04
32Qþ:B':;'þ	'± ÿ4 ÿG
 ÿ0 ÿmv ÿm?pþa4gp
 þ|
 ÖL*J+Fp
? þ@ þc
 ý±þÿ3þ`:
} ÿC2 þ94*1Av ÿCÊS4
p
? þ4B]^2
 ::þ ÿ · 0
 þNhiÊS4
p
? þ4B*°vw3Ñ QlE!9+c ÿ04
304*7'± ÿ ÿ

 ÿ4 ÿÍ
± ÿÍ
 þm'R
 þ
444} þq+F4?nXO
 þþY±ÿ0n
± ÿ´
 þòý±þÿpþ2} þÍ+F?n @  ÿµ*$+F?2
?Í4
 ÿ± ý30>'Gv ÿpýYS
 ÿ @ 3
±
3 ÿ
>'G'R
 þ
44} þP± ÿ0WU04 @ 3
3 ÿ
N'îý±þÿ3þ4} þC7v ÿWÊS4
E?4'./
h~vw Q>lE!
rMEP4*
+ þLp
 þk
_ ÿ3þL'R
 þ
44} ÿK± ÿ0 ý±þÿpþ44} ÿµ*M@ þ'R
 þ
± þ4*$()4d+f­
þ3Mþ*þ!ýM!*@þþQÊG4
E?4'./th~vw

Å

Ç

;Å {Á
ÅÊÂ ]!KÉeõÁö Ð²Ê Ñ - ¼üaÅæç¼$ýÂ*ÒVÓrÕ 6g Ábü)¿Ö[ºº½4¼ýÂ	ý½Ã¼Jç~ýRÏ  ýÂ0»L½4¼ü{V I Å ­/ÅXö
e
J
/
¿

¼
X
Â
,
g
P
¼
E
¾
ýÂZ»¼ ( Âa¼9V I Å ­ ñóò hBÅ<l£ö ñóò hBÅ  l  g
g ¿/¼~¼¦V I Å h ñõò h (Jè  . l'l5Ç ñõò h (Jè  . lÒ
 ×
G g] e$g(Èo\

¨K¨=Î

ª

mknpokmkq

ù y ×Oó ûM¼ýüBºRV I Å ¾Eº1½`»®ç¼8¾EºÂ þ Ái»¼~¼»Ký þ û¼¾Áiý½t¾Eý þ ¼8º  V\Å·Æ JH=I ü)¿/ýü
 Ù   º þ º¹¼BÙ¬Ü×Ï  Ù´ÇÍ
¾ºÂ þ Á þ ü þ ºÂ½ # º [þ ü;¼pû ö÷ø ýÂ0»Cü)¿/¼8ý»»Á)üÁiºÂ0ý½gü}g<ºC¾EºÂ0»Á)üÁiºÂ þ V KI Å h ñóò h (Jè  . l'l Ú ö ñóò h (Jè  . l
  ÙlqÇC
ù ò ö Á × ¼ ×  V I Å ÇÝ
ù V\è I,
I  I ø  ýÂa» ñóò h (Jè  . l|Ç ù  Ù öþ ÁbÂ0¾¼8ºü)¿/¼Og6Á þ ¼qV KI Å ¿/ý þ Â0º	¼÷[¼¾ü ø ×
Ç G;
Å g]{Á e$g(Èo\ÅÊÂ ]Dø>Ée Ï	Ð²Î Ñ - ¼ütÅ çE¼LýÂÒVÓrÕ¿g6Á)ü)¿LÖ[ºº½¼ýÂý½ Ã1¼Kçý¦Ï  ýÂ0»½4¼üWV H=I, ­/ÅXö
Å Ø× J
e ¿/¼Â8,g ¼8¾ýÂ»¼ ( Âa¼V H=I, ­ ñóò hBÅ,l;ö ñóò hBÅ  l  gg¿/¼~¼qV H=I, h ñóò h (è  * l'l<Ç ñõò h (Jè  * lWªÙ 
 º þ º¹P¼Ù¯ÜºÏ  ÙÝÇ ù y ×;ó û¼~ ýüBº|V H=I, ¾º1 ½»óEç ¼Y¾ºÂ þ Ái»¼' ¼»®ý þ ûM¼¾dÁ)ý½5¾Eý þ ¼Uº  VÅÁÆ JH=I ü)¿/ýü
 þ ü;¼pû öBÿø ýÂ0»Sü)¿/¼ü}<g ºSý»»Á)üÁ)ºÂaý½-¾EºÂ0»Á)üÁ)ºÂ þ ü)¿1ýü ñõò h (Jè  * l´Çù
¾ºÂ þ Á þ ü þ ºÂM½ # º I
ù ò ö Á × ¼ ×  V H=I,
Çi
ù V  è4è ø ýÂa» ö ñóò h (Jè  * lÔ Ù ø Ú ò ö Eç ¼¾Eý þ ¼Iºü)¿/¼=6g Á þ ¼6Ùmý»» þ ' ¼»/ Â0»ýÂ0¾ E# ø ûE Áiº7 üBºEV H=I,ú×
HTþo1*QvyRþ7ÿvÿpýGRþ'P@þY3þ_kÿpþ®(bÚ?pþþY()3M2P±þ!ZÒ-þ4d+ \V Å·Æ KHOI vÿ

?pþLRþ'[?þE
?C(6rOý3Mþ7ÑI@þLp+9C3M'@þþ!9T$?pþNEý?f3M'@þþL
ÿ04'5(Oÿpþ:;þ
Rþ'*µ±ÿG?pþþ()Q3M'@þþ8
ÿ4f(9;+-:;'þRRþ'![{ïþP3þ_kÿpþ>?3þ8p+9	ÿpþ:;þ
R
 þ' @ 3'ORþdí
+ V\Å·Æ JH=I _0'$hi ÿ
 þA+ þ @ 3'6pþk
_ ÿpþ8?pþAE4P± þ-R
 þ'OR
 þ\+®?3þlE­

ÅÊÂ ]fû Éeí\Ð²î­Ð4ïÐ é õö ÐÊ0Ñ eJ¿Á þ ºEû¼~ýüBº>¾EºÂ þ Á þ ü þ º  ýEûûa½ # ÁbÂÃ	¼Ábü)¿M¼Qº  ü)¿M¼9ûÁb¹4
V è I1
I, I ºÛV I Å ×
\
Ç G;Åg]{Áe$g(Èo\ÅÊÂ ]ýüþÉeHÍ	í0í é Ï	ÐÎÑ eJ¿Á þ ºEû¼~ýüBºQ¾ºÂ þ Á þ ü þ º  ýEûû°½ # Á)ÂÃP¼Á)ü)¿/¼$º  ü)¿/¼6ûEÁ)¹IÁbüÁ)ú¼
ºEûM¼ýüBº þ V  è4èKºRV HOI ¾
×
;Å {Á

G g] e$g(Èo\

Ç

Á)üÁbú¼7ºûM¼~ýüBº þ

c94,@ þ þ±ÿ-9?046%vÿ<'8ÿ'/3
þ5p+9I@þfRþ'9?-þTÿM-vÿ?pþ[?þ
E?
(7rOý3@þÑ! TF?pþq@þïÿM	vÿÓ?pþ?þ
E?qþ
30þS?3þÓ@þOþ@þ4qPvÿMC4±ÿ(
V\è I1
I, IéaI ÅN± ÿXV  è4è é3HOI  ±ÿ?3þRMîÿMLRþÿ3ýY''4
GRþd+É3M>ý±þÿpþ,Rþ'
V\Å·Æ KH=I !,T$p? þ þ[R þ'5@ þNv ÿ'/3
 þCp? þ@ þ[R þ
3 þQ?pþ þ[± þ3 þ(i3a± ÿ	4'IR þ
3 þ
?pþÍ@ þïý3± ÿþþ´'q@ þ þ± þR
P0 þþÿpþ	(Ir · ü[!±+c ÿÍ?pþU+90*[4(>?pþRr · ü¯4

0v þþ4>'S00/v ÿpýK?pþ þR
 þ'8?pþÿW4>+F42O
 þ
0 þþ	(bþI041v ÿ3ýK?pþK!
" þ
2a() · þ
 ÿKÛ7?þ
?Kr · ü´'þL291
4þC+F4?I þ-(J4\+-a þ[
4 ÿ-?
L
PdZR
 þC±. þÿ#()Ú?'þ!&T$p
? þ þ	R
 þ'p
 þ þþ	P&± ÿ&
 ÿ&()Ú?pþK þ(
4\+-a þL
 ÿF(bz'þ­
Ç

G g] e$g(Èo\

;Å {Á

ÅÊÂ

]fÿ

Ç

;Å {Á

ÅÊÂ

]

º5¹º'¼QýEûûa½`Ái¾ýüÁiºÂ þ º
¼»dÃ¼  º¹  (×
G g] e$g(Èo\

¹º'¼ýEûûa½`Ái¾ýüÁiºÂ þ º
¼»dÃ¼  º¹  (×





Éeí\Ð²î­Ð4ïÐ  Í	ÊÌï%ÎÑ
ºEûM¼ ýüBº \è
é

ù ¼½4¼ü;¼	ýÂ#ý½b½ºg<ý ç½¼Uý¾üÁiºÂ  º¹ ý þ üBýü;¼L ( ç # ºÂ°¼
ý¾¿PýEûû°½ Ái¾ýüÁiºÂY¹ý # ç¼füBº7ý8»Á ÷[¼'¼Â0ütº/ü4ÃºÁbÂÃ

 V 1I 
I, I aKI Å ×

ÉeHÍ	í0í  Í	ÊÌï%ÎrÑ
è4è
é

ºEûM¼ýüBº­V

 3HOI 

g<aý ç½4¼Rý¾düÁ)ºÂ
ý¾¿&ýEûûa½ Ái¾ýüÁ)ºÂ=¹Iý

ÕF»»&ýÂ´ý½)½`º
×

 ~º¹ ý þ üBýü;¼ ( ç # ºÂa¼mº
# Eç ¼UüBºXý®»Á ÷[¼'¼ÂüIº/ü4ÃºÁbÂÃ

Ttq3
3 ÿ3
 þ'±ÿn+F?æ
 V\è I1
I, I4v Å  á â  
 ÿ4'	(8 ÿpþRU þR044
4 ÿC.
( V\è I1
I, IéaKI Å*

ÿ2pþ$?pþL()4\+FvÿpýþoM0þ!9c+ÿUrgvý3M@þ>Û1*a3þþvÿpýPrt:;
4þ
[F±ÿS4d+A0þL
4ÿY()
r-]^<Î$³QsJst|-ÎAT$cHNÙ#þ- þ3gv ÿ8rJ:;3
 þ4± þOR
 þv ÿpý$?pþA ÿ4L4d+A0 þA
 ÿ8()«?gþ!
r3M?pþ@ þ*°?4F@ þ34Fv ÿU?pþþp
 ý±þKhBÎ$³QstsJ|AÎAT5c~HQÙ8*µÎ$³QstsJ|-Î5T5cHNÙLl-R
 þv ÿ3ýp
 þ þþG± ÿ
?pþOþp
 ý±þUhBÎF³QsJst|-ÎAT5c~HNÙ8*µD[|9sV1c :[|9"$c~HQÙ>lf
 þ ÿpýC
 þ
24} þµ!8T$p
? þI@ þ' ÿ ÿpýK4Q4P42f()
+F?­
 V  è4è v Å  á â  4A ÿpþ>F@ þ>0044
 ÿ09
( V  è è é3H=I, !
T$3
? þ[ þPv ÿv ÿ3ý>R
 þ'*M+f?4
?C@ þL4°(t?pþQ
 þE'A ÿ	?pþN þ()A3M'@þþQÒ
( V\Å·Æ JH=I v ÿ
rO ý3M@ þÑ*J
 ÿ04'N(9;+-U'þ0­Q?pþI_a'Q'K@ þ\± þ
 ÿ4 ÿqÙ	(bG
 þp
 ý±þUh  (Jè  . lE*t± ÿm?pþ

¨K¨ 

í[î



t}-m{t/s$q

í

os0ïðptÊ{añ



· Tjü6T$|Fv



¬ª®
)
· Tjü6T$|9Û

l ñqMð î
í a



æ

æ æ
 ç







· Tjü6T$|>


)

· Tjü6T$|<



rOý3M@þ¦Q1­,ÊSd/vÿpý'±ÿ4ÿC
ÿ0ÿARþp+-þþÿîþpý±þ!
 þ

 ÿR'U#h)?pþO
 þ\lQ
 ÿ4 ÿqÙK'\þp
 ý±þUh  (Jè  * lE!PT$p
? þI_a'N'þW
 ÿ4'N(A0/v ÿpý
ÿpþ$04P4±þ,Rþ'*1±ÿ?pþ$þ
ÿ0'þ
ÿ04'6(%041vÿ3ý[±ÿM?3þ<4±þ-þE'!
|<± þ ÿpþN(g?pþN()4\+Fv ÿpý8R
 þ'A@ þ@ þ± þ$p
 þþv ÿ4 ± ÿK
a þþÿpþ5(g?pþLr · ü[!
cÿ?pþ5+-*1(µ?3þQr · ü=493
 þþPv ÿ2'4
$± ÿC
0v þþ[0,'IR
 þ'$a44
 ÿ?pþÿ
5+F24°
 þNp
 þþEPv ÿ44
Q± ÿK
0 þþ7(bþ+A!

e ¿Á þ ºEûM¼ ýüBº þ ¾¿/¼¹ýYÁ þ Ái»¼Â0üÁ)¾Eý½güBºYü)¿1ýüFº  V\Å·Æ JH=I g6Á)ü)¿
ÅÊÂ Ø
] ½
	 É@e 	Ð Ñ J
ºÂa¼G¼4ñ¾E¼û°üÁ)ºÂ × & ¼pûa½ý¾¼ýÂ0»²Û%º×g6Á)ü)¿ýÂ0»KÁ)Âqü)¿/¼U»¼ ( Â0ÁbüÁiºÂ × Ânºü)¿/¼®g<º~» þ  g,¼	¿1ýú¼
V _âã I h ñõò h (Jè  . l'l Ú ñóò h (Kè  . l  ÙG^@oU 5V _ âã I h ñõò h (Jè  * l'l Ú ñõò h (Kè  * l.ª Ù  º þ º¹¼
h (Jè  . l è h (Jè  * lZÜ ø hBÅ<l × J
e ¿/¼~ ¼  º~ ¼9V  âã I ¹ºú¼ þ Ù  ~ º¹ ºÂa¼¼»Ã1¼8üBº	ýÂ0ºü)¿/¼ ×
ü[4(0?pþ9þPvÿvÿ3ý$Rþ'O@þA'Rþ
4
þO( V  âã I !g{ïþARþývÿL+F4?L?pþ-ý?t3'@þþ
 âã I ­
(V _
Ç G;
Å g]{Á e$g(Èo\ÅÊÂ ]Ø½vf
½ É@eHí\Ð²î­Ð4ïÐ " Í	í0íÑ ÕAûûa½ # \V è I,
I  I üBºU¼»dÃ¼Ph (Jè  . lIýÂ0»Uü)¿/¼Â®ýEûûa½ # V  è4èUüBº
¼»dÃ¼Ih (Jè  * l ×
üÐÿaþoM0þ(Û
V è I,
I  I "  è4è*g3vÿpýYrOý3M@þ­1Q *O2N'G3þþþÌþpý±þh · Tjü6T$|Fv* · Tjü6T$|> lhi!þ!*
P.±þ ñ ò h · Tjü6T$|fv* · T_ü6T$|Z> lJÇ#ylµ±ÿL0>Wÿ3þ+ þpý±þQh · T_ü6TF|Fv* · Tjü6T$|Fvdl°+f?N'±ÿÿ

ÿ4ÿ ñõò h · Tjü6T$|fv* · Tjü6T$|Fvdl$Ç¶
!
Ç G;
Å g]{Á e$g(Èo\ÅÊÂ ]Ø½ E>É@e õÁö ÐÊ " Í	í0íúÑ Õ-ûû°½ # V I Å üBºI¼»Ã1¼$h (Jè  . l5ýÂ0»>ü)¿/¼Â	ýEûû°½ # V  è4è>üBº8¼»Ã1¼
h ( è  * l ×
rMfþoM0þ*53ÿpýRrOý3M@þ±1
Q *5+þS
±ÿÓd±þ j 0kW(b þpý±þ®h · T_ü6T$|fv* · Tjü6T$|9Ûl8'X
·
·
ÿpþ+F4U
@þþïþpý±þYh Tjü6T$|fv* Tjü6T$|FvdlF'YP.±þ ñóò h · Tjü6T$|fv* · Tjü6T$|9ÛlQÇ §  ±ÿ
ñó
ò h · Tjü6T$|Fv* · Tjü6T$|fvdl7Ç V!UT$?04L48'Rþ
44}4ÿR(5?pþ	
ÿ4ÿRÿ þpý±þmh · T_ü6T$|fv*
· Tjü6T$|9ÛlA(b44d+þK	4ÿ	(_þ3ý±þh · Tjü6T$|Fv* · T_ü6T$|fvdlE!
 âã I ! üA?4I%vÿ*9P4P@þþ±ÿ' þo/PÿpþK?pþ
HTþo1
ÿ4pþ?pþYþ()3M'þþK(qV _
 âã I !Ðü[4t(<?pþ8þE'fÿU?pþIþ()f3'@þþ
@þ'ÿG()Q?pþ7'a4Fvÿ'C?pþ7p+9K3'@þþf(2V _
Ç

;Å {Á

G g] e$g(Èo\

4(bY
 ÿ0 ÿ?84L
4v þ?pþ j 

 þ042;m
ÿ4ÿµ!^kÜT$?04N
ÿ4ÿR'þ7?
4$'CvþÿvÿpýGhi±ÿS2'()þ[vþÿvÿpýlE*°(O±þþo ( 2F

þ40þ>() 'Oþ8vÿ4J'þ
?pþÿW± þþf
o  * 4
 ý3± ÿþþW'm4'YR
 þ

 þ0 þ(bÌ?8vÿ46þ!YT$?pþP@þÿW()
·
?4Aa ÿ	+F24°
 þ
Ì
 þ>
 þFv ÿ 3M0 þ
4 ÿ	M!Û1*+Fp
? þ@ þN
+ þ>?d+=?0FI?pþ@ þ ?M4A()
?pþ[;+-:;'þYR
 þ'A(V± ÿ0 ÿ4P(µ?pþQ

 þ024;P
 ÿ0 ÿ4,'Ep
3 þ!<T$p
? þf@ þ' ÿC?A?pþ

¨K¨²$

ª

mknpokmkq

;+-	Rþ'QvÿS?pþ7Eý?[3M'þþ7(2V  âã I ()2J'	4'()Y?pþI

þ4044pK
ÿÿG4[3pþ
'P?pþ4$?/vÿpýPV  è è>$?3þ$þ
ÿYþV!,T$?pþL3þ_kÿÿC(V  è4è>'þF?0 ñõò h (Jè  * l$Ç¸y
4<'7R
 þ'A024
 ÿµ*± ÿ0P?pþ@ þ()@ þf+ þQ?± þYÿMÜ
 ý30±ÿþþQ(  * ]^9

þ042;*zý±þÿ
?  ( 2-

 þ0 þ[()±± ÿKv ÿ4a'þ!,T$3
? þf()4\+Fv ÿpý8@ þQ?pþNp
 þk
_ ÿ4 ÿ<(t?pþQ
 þE'
()$+F?4
E?	?pþ>

 þ0444;
 ÿ0 ÿK4A'Ep
3 þ­
Ç

;Å {Á

ÅÊÂ Ø
] ½ ¼

G g] e$g(Èo\

¼»dÃ¼Ih

Jè
(



*

l

É@eHí\Ð²î­Ð4ïÐ " Ï	ÐÎHÑ

×

Õ-ûûa½

# V è ,I 
I  I

üBºS¼»dÃ¼h

Jè  . lýÂ0»Yü)¿/¼ÂZýEûûa½ # V HOI 
(

üBº

PQ1*V+-þP
±ÿWd±þP?3þP
ÿÿ j ×ªÓ0k	() þpý±þUh · T_ü6T$|fv*
· Tjü6T$|9Ûl9'ãþpý±þh · Tjü6T$|Fv* · T_ü6TF|> l9'P.±þ
ñ ò h · Tjü6T$|Fv* · · T_ü6T$|-Ûl$· Ç«yP±ÿ	'P.±þ
·h T_ü6T$|fv* · Tjü6T$|>l,ÇÍ
Rm
ª ES
ª V!6T$?04O46pþþÿP(kþpý±þ8h T_ü6TF|Fv* T_ü6T$|-Ûlt(b2d+þ
ñóò
1Éý±þÿpþE4}ÿK(O?pþN'E±ÿÿK
ÿ0ÿ	ÿîþpý±þh · Tjü6T$|Fv* · T_ü6TF|> lE!
Ç G;Åg]{Áe$g(Èo\ÅÊÂ ]Øl
½ KÉ@e õÁö ÐÊ " ÏªÐ²Î Ñ ÕAûûa½ # V KI Å üBº8¼»Ã1¼fh ( è  . l$ýÂa»>ü)¿/¼ÂCýûûa½ # V H=I  üBºI¼»Ã1¼
h (Jè  * l ×
ü[t±ÿIþoM0þ*vÿ7rgvý3M@þ1
Q *+þ-
±ÿ8d±þA?pþ-4 @ 33ÿ
 j akF() þ3ý±þQh · Tjü6T$|fv* · T_ü6T$|-Ûl
·
·
'cþpý±þ>h Tjü6T$|fv* Tjü6T$|> lt'NP.±þ ñóò h · T_ü6T$|fv* · Tjü6T$|9Ûl6Çn9  ±ÿ ñóò h · T_ü6T$|fv*
· Tjü6T$|> lNÇÉ
¬Ó
ª V!7T$?4Q4QK'Rþ
444}ÿU(9?pþ'±ÿÿG
ÿÿGÿ´þpý±þUh · T_ü6T$|fv*
· Tjü6T$|9Ûl%(b44d+þNQ?ý±þÿpþ2}ÿN(/?pþ6'±ÿ0ÿN
ÿ0ÿQÿcþpý±þ[h · T_ü6TF|Fv* · T_ü6TF|> lE!
Ç G;
Å g]{Á e$g(Èo\ÅÊÂ ]Ø½ ø>É@eHõ ïÍ Ñ Je ¿/¼	»¼ ( ÂÁ)üÁ)ºÂ&Á þ ü)¿/¼ þ ý¹P¼	ý þ ü)¿1ýüNº  V  âã I  6g Ábü)¿ZºÂa¼	¼4ñ4
¾E¼û°üÁiºÂ × & ¼ûa½ý¾E¼Iú¼ ü;¼4ñ* * 6
g Á)ü)¿Yú¼ ü;¼4ñ* ( ¼ú¼ # gg ¿/¼~ ¼ × ÂGºü)¿/¼E<g º » þ  ü)¿M¼IºEûM¼~ ýüBº
 ¾EºÂ þ Á þ ü þ
º ¹ºú\ÁbÂÃKýC¾EºÂ0»Á)üÁiºÂ  ~ º¹Ð¼»Ã1¼Ih ( è  . lLüBºY¼»Ã1¼8h ( è  ( l ×
Hfþ$?:þ
E?Rþ'FÁ)Â þ üBýÂ0üÁ)ýüÁiºÂC(°?pþ5
?pþQ(b;V   4 ì +f44Rþ5N'Rþ
4/
þ5(°ÿpþ
(6?pþL()4\+FvÿpýM­Z\V è I,
I  I "  è è*zV I Å "  è4è*z\V è I1
I, I " H=I  *0qV I Å " H=I, !Acp[4$
ÿ2pþ@þ×V   4 ì (6±ÿ
ÿP4(°ÿ?pþQþ
ÿC'þ	(µ?pþ[þE'-?3þF'±ÿÿ
ÿ0ÿ49Pd±þC'þpý±þIh (Kè  ( lE!
rMßþo/P0þ*O3vÿpýYrOý3@þ«1
Q *O+F?pþÿ+þ004þmRþ'V I Å "  è4èUhivÿW?pþÌþoM0þ%\±þ\l
ü[L±ÿ´þoM0þ*JÿGrOý3@þ

'SPd±þ?3þ4 @ 33ÿ0
 j akK(bGþpý±þSh · T_ü6T$|fv* · T_ü6TF|9Ûl[' þpý±þGh · Tjü6T$|fv* · Tjü6T$|fvdl['
P.±þ ñóò h · T_ü6TF|Fv* · T_ü6T$|-ÛlÇ õ  #±ÿ ñóò h · T_ü6T$|fv* · T_ü6T$|fvdlÇ V*<?2
34
RþS
 ÿ4p
 þ@ þn± ÿÓ ÿ'±ÿ4ÿÓ(¦V   ì *FC+þ4f®V I Å "  è4è!«sJ.±þ+F2þU+F?3þÿq+þG004þ
V\è I1
I, I "  è4èL'	p þ þþÜþ3 ý±þCh · jT ü6T$|Fv* · Tjü6T$|>l$±ÿYîþpý±þCh · T_ü6T$|fv* · T_ü6T$|fvdlA+F4? j 
k
$?3þN'± ÿ4 ÿK
 ÿ ÿV*1?04$
34K2'R
 þL
 ÿ4p
 þ þK± ÿUv ÿ±ÿ44ÿ	(ïV   4ì !
³[R
 þ'
 V   4ì 46± ÿãþ'R
 þ
44>30 þ()30/
 þE'!Ocp,±. þ<?pþ$ þ' ÿ0 þ$34 ÿI?
+Fp
? þÿ&± ÿq ý±þÿãÿR ÿpý±þ+A± ÿ'R'± ÿ4 ÿ®'W± ÿM?pþþZh þ! ýM!*5± ÿ þp
 ý±þU43
 þ þþalE*
?pþI ý±þÿ @ 3'f/Nv ÿUf
3M@ þÿQ'þ!fc ÿY?3þ[+-*0?pþI
 ÿ4 ÿY()f'± ÿ0 ÿ ÿpý'
 ÿM?pþPþY48'± ÿ'( þ@ þZ'?pþ¯þp
±
 ý±þK þv ÿ3ýU0
.Z'm?pþK
3M þÿ'þ!®rMO
 þo/P0 þ*
3M0°@ þ\± þcLR
 þ
O
 þ'3
.ZI?pþK4± ÿp
 þI± ÿ®
± ÿ3ÿMI@þÿ3
 þ}3I+F?®r=()± ÿXv ÿp
 þ:
þP ÿþ	
 þE1Z(F2O
 þ!Wc
34 ý±þÿpþþYmþ%W04± ÿÍhi þþYrO ý3M þKÛl7?08.±þþa
cf ÿG4[DQ|9sV1c :[|9"$c~HQÙ 'þU3
 þ þvÿpý¯þp
 ý±þYhiDQ|,sJ,c :Q|,"FcHNÙ8*V"F|AÎA|<1c :[cHNÙLlf± ÿP./v ÿpý
i
h
Q
D
,
|
J
s
c
,
Q
:
,
|
F
"

c
N
H
8
Ù
*
[
D
9
|
V
s
c
1
[
:
9
|
$
"
~
c
Q
H
>
Ù

l
Ú
Ç
W
v
hi± ÿ#DQ|9sV1c :[|9"$c~HQÙÐ+932&?± þY'W
 þ
Ì
 þU± ÿ
ñ ò
v ÿ44%'þ\lE!
" þ
4<?7

 þ024;G4LU±. þm2p
W
3 þ()L± þ`_°
 ÿµ!Hfd+É?>+þ?d± þY@ þ>(AM:
þ'>
p
? þP*t þN3N
 ÿ4p
 þN?Md+Ü?pþ þR
 þ'NRþ
7

 þ0444;Y()Ðv ÿ44J'þ!

¨K¨Eì

í[î

t}-m{t/s$q

í

os0ïðptÊ{añ

l ñqMð î
í a

ÎA4E(b/v ÿpý?4[+F42JR
 þI@ þ þ± ÿQ()>3
3 ÿ3
 þ'±ÿ ÿpýP%?m?pþP	4J0(iQ%3MNR
 þp
@þ@þ4ÿµ*t±ÿR?pþÿ()>?3þvÿ
@þÌþÿ6þ±þ`_a
ÿWý?!T$?pþþ@þ
;+-®()3
3 ÿ0O
 þÿ$+A/?C3MC þ ÿv ÿ3ý
 þE'#Rþ
	

 þ042;°±
­ `yV3[$^a`y`yÑhiM:
@ þ/4þ j sJklE*9B! þ!*5& þ
®4þv ÿpýR?3þU

 þa44p®(N'P	'þ*5«
 äa`yV3ãO^@`y`	Ñ
hi þ14þ j ÙNklE*,! þ!*<1ZþEv ÿpý

 þa44p(['þPP'P?P
32ZR
 þC12þ
ý  ü;¼ ?3þ70F(<?pþ8r · ü /`$
_ þYK?pþI þ ÿ0v ÿpýPR
 þ'!f+c ÿS02
34*°± ÿU
E?± ÿpý±þ8'
?pþ8

 þ024;CÔ
(  ( H
*  . 
*  * ['fv ÿ ñõò h  (Jè  . l5 ñóò h  (Jè  * lE*0 þ( þ@ þÿ0
 þSv ÿY?pþLR
 þ':
'f3
 þk
_ ÿ ÿV*/2$
 ÿ43
 þ@ þK/
!-ÎA?± ÿ3ý±þ5'

 þ4044p(O± ÿC?3þf'þfF'P[4

 ÿ2p
 þ@ þ¯
 ý0B!
ü[A±
 ÿ¯þo/a þf(t± ÿKs#hi1
)l<
E?± ÿpý±þN'

 þa44p*13v ÿpý7rO ý3@ þqQ1*3% þF?pþQ ý±þÿ
4
d± þfÌ
 ÿpþ+Ø
4 ÿ j k?0f$
± ÿU±. þ!-cF0 j k'C$
 ÿU@ þR
 þ'@ þ*0F+ þ2V
'Y?pþ þL(54\+-0v þP
 ÿN()Ð ÿpþ(-?3þP'þ7 ÿLr · ü7!V+c ÿma4
34d*V?pþP ý±þÿ
 þ
43
p
 þ<'I4d+ j k7(b · j
T ü6T$|Fvf± ÿ3
 þ
4p
 þ<'I04.
 V H=I, '7?pþf'± ÿ4 ÿ
 ÿ0 ÿ()
h· j
T ü6T$|Fv* · j
T ü6T$
| >lg'ý±þ9
 ÿ4 ÿ j 

 ªV!^kGTFp
? þÿ' j kL+- ÿM<@ þ/3>

 þ40 þ
()±± ÿCv ÿ4a'þ*M03MA(V
+ þN3Ì
 þ · j
T ü6T$|fv[29

 þ0 þ[(b ± ÿK ÿ4a'þN?pþÿC?pþ
024
 ÿCï
( V H=I, P3
 þN?pþN' j k

 þ0 þ;
! d[v ÿpýrO ý3M þBQ8'P2443''Eþ[Ùzh ý40bl

?0± ÿpý±þ'G

 þ024;*g3M% þ
+ þ3
 þ þþÌþp
 ý±þmh · _
T ü6TF|Fv* · j
T ü6T$
| >lQ ÿ?L_ký3M@ þ!	T$p
? þÿ
· j
·
T ü6T$|<M*0+F?4
E?K+-F@ þ/34

 þ40 þh)R
 þ
3 þL
+ þ73O
 þ j
T ü6T$|fvL4$

 þ0 þ\lA2L
 ÿM
 ÿpý±þ9

 þ0v þ!<c
³ ÿ?pþ5?pþ-?± ÿµ*?pþF()
9? · j
T ü6T$
| >Q2
 ÿML ÿpý±þ9

 þ0v þ$4<L/


?0± ÿpý±þ!
Hfd+ + þY@ þK þMZ'R3PP4} þC+f?I?pþY þ ÿ ÿpým
 þE'
± ÿ#M'W

 þ042;!
rO'*6
+ þ	v ÿ'130
 þ ÿpþ	@ þ¯ÿM ÿA
 ÿ± þÿ þÿ
 þ!RTFp
? þC17%4
 R± ÿ
 Rp
 þÿMþ j 
± ÿ
v ÿ

 þ þk>± ÿ j 
± ÿ	p
 þ
@ þ þ*^k8@ þ
 þ
4± þ*1± ÿ0X
 
ù ± ÿX
 I
ù p þÿMþ j 
± ÿ3ÿMAvÿ
@ þ þk7± ÿ j 
± ÿ/:
ÿM>3þ
@ þ þ*^kG@ þ'R
 þ
± þ!Cï
{ þ30 þ?pþ þC'17%4Q+F?®Ùz± ÿZs<
* þ! ýM!
* mÙ O
 þ± ÿL?07
 þ
 ÿ0v ÿpýQR
 þ'9
± ÿmh)03M<M
 þX
 ÿXÿpþ
 þE4lgv ÿ
@ þ þWý0

 þ0444;*± ÿX
 7
ù sSÌ
 þ± ÿ
?F±ÿY
 þE'f
± ÿ3ÿMfpþ
@ þ þ>41
V

 þ042;!
T$3
? þN@ þ3A()$?pþ>4P4± þfR
 þ'EF@ þLv ÿ34± þ1143­
Ä
Ä
Ä
Ä

V\è I1
I, I ­	Ùsj	ù Ù ù s
V I Å ­¦Cù Ùsj	ù Ù ù s
V  è4è­B	ù Ù ù sCÙ s
V H=I, ­¦Cù Ù ù sj	ù Ùs

T ?3þK4P4±þRþ'EP\12pþK±ÿ'+þ%3MP
E?±ÿpý±þÿ&

þ024;®()4A(Q?pþ
$
ÿpþ:;'þKRþ'E!,rM5?pþQp+9:;'þSRþ'Lhi!þ!*{V _âã I ±ÿK4aþE'ARþd+AvÿC?pþ
?þE
?(OrO ý3M@ þ7ÑlE*0+ þÿ3þþK'P
 ÿ43
 þ$?pþ9UVÖ ]þRþ
!9rMf?pþN@ þ345v ÿ	?4A0R
 þ*/
+ þ
ÿ ÿpþþG'K(b/
3[ ÿm ÿpþ4'ÿ
 ÿ®Y?pþþ@ þÿ0
 þ8v ÿG?pþOÿpþYþRþ
N(bN? þI
 þE'
?64(b7?pþ-

 þ042;>
 ÿ0 ÿ	hi! þ!*?pþ5 þ()O3M'@þþAv
( V  âã I lJ± þ3g?pþ)ÿpþ½þþ
6()
?M þNR
 þ'EA?$MO
 ÿM$4(b?4A
 ÿ4 ÿmhiB! þ!*M?pþQ ý?A3M'@þþ\lE!,TFp
? þÐÿ3þ)þþ
$(
?M þ5R
 þ'E6?,2'(b7?pþ$

 þ4044p>
 ÿ4 ÿ4O?<

 þ0444;Ch ý40M± ÿ/
bl
+F42p
 ÿpþ± þ9R
 þF ÿ
@ þ þµ*1! þ!ï
* 
ù Ù=± ÿX
 I
ù s<!T$3? þ$@ þ' ÿC4,9()4d+f!6Ò91./v ÿpý>9?pþF@ þ3
()9?pþf4± þAR
 þ'*/92,0 þÿ9?,?pþF_0'9'þC ÿP?pþ þf;+-:;'þKR
 þ'-
± ÿ
ÿpþ±
 þIv ÿ
@ þ@ þ

 þ4044p*tR
 þ
3@ þ?pþ_0'7'þ®2>+A/
 Vè I,
I  I 
 V I Å !YT$p
? þ@ þ()@ þ*O'
3 ÿ3
3
 þ'±ÿK?3þ7v ÿ3 ÿY
 þ?0v ÿK?2$@ þ30$+þIÿpþþS'ÉþoMPv ÿ3þL?pþI þ
 ÿG'þV![Î- ÿ04p
 þ

¨K¨$L

ª

mknpokmkq

V\è I1
I, I " H=I,

 ÿX
±
 V KI Å " HOI  !KHfþ?.V HOI  M
 þ
 ÿM8vÿ
@ þ þãý0,

 þ042;XOh 
ù ÙLlE*g03M
N
±ÿvÿ
þþ1
6

þ042;Wh!UsOlE!µc"Us#¯ÿpþcþRþ
L3pþI'K?pþý±þÿpþ2}ÿ'þ°²
Òþ
3 þ'PQ@ þ7
 þ ÿpýP'± ÿ( þ þU()  ÿ3þ73Mý ÿpýÉþ3
 ý±þ>(,'Ì
 þ7± þþo  ( 'C± ÿ?pþ
3Mýv ÿ3ýfþ3
 ý±þ_
(  ( +f?U?3þ þ;+-KR
 þ'*µ1Up
 þk
_ ÿ0 ÿS?pþ1
O

 þ0444;K(,? þ
'PF(b ± ÿUv ÿ44aþ>+F42
 ÿ$RþLv ÿ
@ þ þU$Ì
 ÿpþLþRþ
!-+c ÿ	?pþf+9E*M?pþ>'
@ þK

 þ40 þ	(b¯± ÿXv ÿ04,þU($± ÿ® ÿZ8
(  ( 2*<± ÿ®?pþ þKp+9R þ7 ÿv ÿpýS
 þE'
M¯
 ÿMQvÿ
@ þ þ8?pþI

 þa44pK`
(  ( ![r3?pþ þ*°1Up
 þ
_ ÿ ÿ ñõò h  (Jè  * P
l Ç«
ù yCf'
 þ
 ÿ0v ÿpýM*M'P?pþL

 þ042;
(  * 4)
 ÿFvÿ
@ þ@ þµ!6ï
{ þ>
 ÿ
430p
 þN?PùsZ45Ì
 ÿpþ)þRþ
!
üX444V4v ÿ3þg(M
 þ' ÿv ÿpý)þo/04 ÿ%+F?[R
 þ'ï
 V   ì +f44 ÿMJvÿ0
@ þ þ,/


 þ042;!
³[R
 þ'°
 V   ì 
± ÿ3ÿ-vÿ0
@ þ þWý400

 þ0444;¦
* þ± þÿ	(µ9,± ÿÉþp
 ý±þ*/R
 þ
3 þf?pþF ÿ4
þp
 ý±þ7?$?4$
 þE'f
34UY4>h  ( è  ( lE!9c ÿY
 ÿ
23 ÿµ*M4V?M@ þþLR
 þ'F?F2'(b
?pþ[

 þ024;I
 ÿ4 ÿP?d± þf
 ÿ3þXþRþ
,n
( UWVM]6v ÿ
@ þ ÿpýL

 þa44p	Oh P
ù Ù´± ÿX
 8
ù sglE!MY³ ÿ
?pþ8?pþN?± ÿµ*aR
 þ
3 þ>R
 þ'Eq
 V\è I1
I, I "  è4èI± ÿ8
 V I Å "  è4è>?d± þ|V  è4èIF?3þ[@ þ
 ÿm'þV*
?pþK
± ÿYv ÿ0
@ þ þL

 þ4044p!
" þ35() 4d
W
+ þfv ÿ	?pþ7? þ
E?C(6rO ý3M@ þ7ÑI þ>v ÿp
? þEþK3MK?pþL'þþ!-rMT
 þo/P0 þ*
Rþ
3 þ¬V\è I1
I, I "  è4èC
± ÿWv ÿ0
@ þ þÌýa,

 þ4044pÒ
* V _âã I 
± ÿZ>
+ þ4!	T$p
? þ()4\+Fv ÿpýY2>
3P	(6?pþ8@ þ þ± ÿf@þ3F+ þ8?± þ'()Q%3Mf?d+«?pþ>p+9:;'þRv þ ÿv ÿpý
 þE'

± ÿ
?0± ÿpý±þP

 þa44p!>TJKd4md± þ+fp
? þ4Pv ÿ3ý?pþI@ þ3
 þ*µ+ þ0@ þ þÿ[ÿ0Y?M þI@ þ3
ÿpþ

 þ	(bF$
3 ÿp
 þ'±ÿ0v ÿpý8?4A0R
 þ!

V   4ì *vV\è I,
I  I " H=I, *vV I Å " H=I  ­¦Cù Ù ù s
Ä V\è I1
I, I "  è4è*zV I Å "  è è* V  âã I *zVÅÁÆ JH=I ­#KÙ
Òþ()@þ
ÿ
430vÿpýC?4Qþ
ÿV*V+-þþ$0
b S
ÿ4pþNKþ@þÿQ04ÿm(9?pþPvþÿvÿpý
Rþ'-?±ÿ?-@þ$$
b þ
þKvÿ?pþfo/ÿM7(JrOý3@þQÑ!<T$?04,þ@þÿ,aÿ4-ÿ3þ
þ~:
Ä

I()933ÿ0pþ'±ÿ0vÿpý[?pþFL011(i,%3M6?pþf@þþÿ(µ"Wþ'%ÿþ5RþvþFhivÿ
· þ
 ÿ	lE!9rMF?29a ÿµ*/
+ þN+F4?'2'vÿpý32??M þNR
 þ'E5?$
± ÿYv ÿ'/3
 þQ
þ'Aÿpþcÿpþ+Í'' ÿpý7+f?± ÿ	v ÿMk
_ ÿþI@ þR
 þvÿ3ý830''v ÿ3ýh þ! ýM!*thi/*V*^
*^µ* þ*^V* þ*^µ* þ*!!! l+fp
? þ@ þ
?pþOþ4204F@ þ@ þ@ þÿNv ÿMk
_ ÿþ7@ þR
 þ ÿG(-m()4\+ þm1î
 þ\l[ ÿ'	?pþPr · üÉ4± ÿpý3 ý±þ± þ3
?M þf?,
± ÿ3ÿ!üTÿI
 þE'9?9
± ÿ'P,'7?pþ$'± ÿ0 ÿP
 ÿ0 ÿI()9± ÿãþp
 ý±þ
v ÿG
/
 þ*µm±
 ÿ þp
 ý±þI'	± ÿòþoM4'vÿ3ý
/
 þ*%Q0S± ÿòþp
 ý±þI'	
@ þþPÉ
 ÿ3þ+¸
/
 þ8R
 þ ÿpý
'?pþQ_0E'5
4>h)?pþL
25?$
± ÿY0K3
?U3M0''Ev ÿpýElE!OT$?13A?4-_0E'5
45v ÿ
23p
 þ93M
R
 þ'5?0$
± ÿY
@ þþÿpþ+´
/
 þ>h þ! ýM!
* V   ì R
 þ
3 þN$
± ÿY0KO
 ÿpþ+ þp
 ý±þh  (Jè  ( l'lE*0
+þ4<3,R
 þ',?9
± ÿãý±þÿpþ4} þF?pþ$'± ÿ ÿP
 ÿ0 ÿP ÿ3ý>'O
 þLþ3
 ý±þF(µ>
/
 þ
h þ! ýM!n
* V\è I1
I, I " H=I, 
 þ
30 þ7[
± ÿòý±þÿpþ4} þ ñ ò h  ( è  ( l'lE!fT$p
? þ7R
 þ'[@ þ8012p
 þ	R
 þ;+þþÿ
?pþ þ>;+-
4@ þ$$()4\+F­

 è4è*MV HOI  J* V  è4è é3H=I, *3V  è4è v Å  á â  *3V   ì *MVè I,
I  I " H=I, *JV I Å " H=I, *MV\è I1
I, I "  è4è*MV I Å "  è è*MV _âã I *
V\Å·Æ JH=I
Û1!R\V è I1
I, I *zV I Å * Vè I,
I  IÌé I ÅE* V\è I1
I, I v Å  á â 
c$4$4%±ÿA'ÉÿMþ>?R^@`	`g(g?pþLp+9:;'þGRþ'f@þLvÿ	?pþN_a'$
4!
v!RV

üA-?4,°ÿ<+þf?0±þNpþ_kÿpþ7þ9(J3þ(i3MRþ'E[h)/4L?3þ,Rþ'A
?3þPEl<?

ÿpþY
32®00W'R±ÿ&r · ü 04±ÿ®()4ÿµ!Z{Í?X?pþ@þKþE'*94I2I°0þ'
40d± þ5?pþWþþ
± þÿ3þ,(%N02±ÿµ*±ÿ'7,6'7?±ÿþAþ130>33ÿ(b@þ@þþÿOþo1þ7ÿ

¨K¨=x

í[î

t}-m{t/s$q

í

os0ïðptÊ{añ

l ñqMð î
í a

±ÿRÿþÿ0<
ÿ4ÿ!PTt\þÿ3Mþ?pþ3þ(i3vÿ3þQ(A?pþþþ7ÿvÿpý	Rþ'*g?pþvþÿpþ
ÿpþþP'W
p
? þ
.&?P?0Ì
 ÿMÌý±þÿpþEþqR3@ þ þI04± ÿ´hiB! þ!* & hBÅ<
l Ç ù ÔlE! ü[?M3
3 ý? ÿM
M þ þPv ÿI?0460R
 þ*
+ þF@ þ[
3M@ þÿ8p
 þ± þ0v ÿ3ýcþe
 þÿ9Oþ?M/6(),P./v ÿpý>?46
3
? þ
.
3 ÿpýI?pþN
. ÿd+F þ3
 ý±þL(t?3þ> þ ÿ ÿpýI?$+A$M ÿpþ!
T$3
? þ904
34g
?M4
 þA(° þ ÿv ÿ3ý$R
 þ'O@ þ@ þÿþIp
? þ@ þ-+A6þ71L()3MO()
'E!
rO'*°?pþ þ8R
 þ'['± ÿ4þ8 ÿ'fþ':B':;40 þÌ
 þÿQRþ3Ma ÿ5
( þÿ' þQv ÿG0 þ*
·
·
+F?2
?4N?3þ@ þ@ þ þÿ ÿW(-r ü[L3 þWv ÿm3M>4P0 þO
 þÿ ÿ#hi þþ þ
 ÿõClE! · þ
 ÿµ*
?pþ þCR
 þ'8
+ þ@ þC ÿ'0 þm?pþ	4þE3M@ þ!UrMO
 þoM0v þj
* ý±þÿ3þ4} ÿ®± ÿ®'R
 þ
4`:
} ÿR
 þ'A@ þN
 ÿ2p
 þ@ þP(i3
3 ÿ0O
 þÿa()A ÿ3
± þfv ÿM( þ@ þÿ
 þ8hiÊG4
E?4'./*%vw Q>lE*0± ÿ
 þ þÿpýa<v ÿ3ýQr · üñþp
p
 ý±þ9@ þLþRþ
± þF()X
 þ/v ÿpýLr · ü[FhirM± ý±þB*%vww ClE!9T$?V*?3þ þ$R
 þ':
'$p
 þN
4
µ@ þÿ þNv ÿC?pþL
 ÿþo1$(O024
 ÿ9?$+þ@ þN
 ÿ43
 þ@ þµ!<rM3M?µ*M?pþ
02
348o1 ÿM þI@ þ þÿþXp
? þ@ þ	(i
44þC%d
+ þ()30,?pþ þ4
5± ÿ þ0E4
<@ þ3
()5@ þ3
v ÿ3ý>?pþQ4O
 þN
a þo/4;(t@ þ± þ`_°
 ÿµ*M5?M\W
+ ÿKv ÿ?pþQ@ þPv ÿ3
 þ-(t?4-0R
 þ!
$õ

²

G$µú  ¶µ¯¸R³)ø#ú:¶ ¶('2*)½¸,+13¶¸

·

·¦û ø·¦û&%

ø-+/.

 R

¸º¹0'-û ÷ 21 3¸R· ÷ û ÷34

£3·¸¶±ø·¦µ

· M
3 aþ
ÿ«>1!pþ_ÿpþþ±þE°30þ()300þÿ0vÿpýLRþ'5
E?pþP-'10(b3M''ÿÉþ3ý±þ
yh VI­ ø hBÅ<l;ö ø hBÅ  l'lA±ÿK?3þL'±ÿ4ÿK
ÿ4ÿ5ÿpýOþpý±þIhyVI­ ñ ò hBÅ,l;ö ñ ò hBÅ  l'lE!9T$?pþ
@þ30<v ÿ?04< þ
 ÿãþ'042?I+F?4
E?(µ?pþ þF
 þE'9
Ep
? þPZ
 VN@ þfN0
 ý3E± ÿþþ'
@ þ@ þ± þ7p+9	
 þ;U
4 þ[(,v ÿþ@ þ'h)+c ÿE4± ÿ
 þI± ÿSW
" þ'% ÿ þ\lE!QT$?4f þ
 ÿm30O
 þ
?P4A þ7 ÿv ÿpýS
 þE'P@ þK02 þW'Rv ÿpý þ	r · ü 02± ÿµ*<! þ!*A
Å  (1NH=I,J 
Å  (	K
 !
· þ
 ÿ	x7M@ þ@ þ,?pþf'± ÿ2 ÿP(V?3þFR
 þ'A02 þ'I7 ÿpý þ$02± ÿv ÿ'>?pþ4X
 þRþ

ÿ>/3
602± ÿUh)(b5
Å '2 

 lE*/± ÿ?M\+q?2<þ
-?pþF@ þ3!tï
{ þ[R
 þýv ÿII()P44
 þk
p
_ ÿ0v ÿpý8+F?$+þ>O
 þ± ÿK1 j ( þ7P
? ÿpþ> þ ÿ0v ÿpý8
 þE'!^k

}½

b 65MÈº]

Ã Å87
Ç

ÒÉ Å
^ '['^



ÒÅ ZÅ

Ä

]\_['^  z]$gi^j['^

³ 3M6 @ þ
±þf46'>\+-þ9?pþ54Oþ$
P0þoM;8(%@þ±þ`_a
4ÿµ!6T$?pþ54pþ43Mÿ4O'74pþÿ/:
Q
() þ ý  ¼>¹ý¾¿Á)Âa¼>½4¼ýÂÁ)ÂÃLOþ?1Nh · ÊGsJlE*1+f?4
?	@þNP
E?vÿpþQþÿ0vÿpý>Rþ'EA?$@þ
CEý3±ÿþþm'	@þþ±þ80RþþIhi4'K
4þ j 
@þ
@ÿpþN@þþ1vÿ3ýPavÿpýkl
 ÿG@ þË13@ þßÿMC3
±
3 ÿ/:B4Ì
 þ>@ þ± þ_a
 ÿµ!LrMLC02± ÿmÅÓ±ÿGRþpUÈ*µ3M0°@þ>±þ`_°
ÿ
?N30

 þþp
 þ4f'Y þ7 ÿv ÿpýM*µ! þ!'
* Úúgý
* æÜ & hBÅ<l[4a4 þB
 nÆ Ç ÈÔhiB! þ!*gÅØÆ ÇÜÈ7lE!8T$p
? þÿ
P
E?v ÿpþ5 þ ÿ0v ÿpýFR
 þ';
 VMhBÅ<lg2t± ÿ · ÊGsY(a± ÿ8 ÿ>(0± þ`_a
 ÿI4j
 ý3E± ÿþþ'L3

 þþ
()þf þ ÿ0v ÿpýM!O+c ÿY?pþ$+-*(<Å  Ý
Ç VMhBÅ<lE*?pþÿmÅ#Æ ÇÍÈ 204 þ$Å  Æ ÇÍÈ!
· 30 þ
 ÿ	M!ÛPd/4p
 þ$@ þ35%3M5?3þ>4%( þpK(g
?v ÿ3þ> þ ÿ ÿpýI
 þE'!
· O
·
 þ7(6?pþ> þ3fv ÿ 30 þ
 ÿKM!Û@ þÿpþý± þ![W
H þ± þ?3þ þ*%?Mp
3 ý?U+ þIMã
 ÿ[?d± þ
 ÿ&GE
±
 ý3± ÿþþK()?pþ þK þ ÿ ÿpýUR
 þ'* · þ
 ÿ Cm?M\+F8?I+-þK
± ÿXR
 þ()
@þ± þ_a
 ÿY þcþe
 þÿ	?± ÿK'V þ± þ`_a
 ÿY(b 

?V!

Å MÅaÁ[I]vÉ;«Å@ÆKÀïÉÁKÆ

bFE:9* e$g

sþ$309RþývÿC1C
ÿ04pþÿpý>?pþN04P4±þFRþ'!<TF?pþQ@þ3-()$4%2P±þfþE'
@ þI
44E þF(9;+-	()3
3 ÿ0O
 þÿJ?pþ þP*µT$p
? þ@ þ8v8± ÿÛ1*%+F?4
E?S ÿfRþI4PO
 þ:
4þ4Wv ÿ3± þ!WrÌ
 þo/P0 þ*,þþ@ þ' ÿa þ	'R3'R
 þ
8?P(F± ÿ þp
 ý±þY283
 þ þþ
'O
 þ+fp
? þ@ þ ÿpýK?pþI0?R(bÐC'v ý±ý±þL'Y	@ þ'% ÿ þ*µ?3þÿm?4Q
34m
3 þ(i443@ þ7(A
"Lþ° ÿ0 þNR
 þp'?4	R
 þ
3 þN?pþL þ'% ÿ þL4)
 ÿM ÿpý±þF

 þ0 þ!6c ÿK(i
*0?452L
 ÿM

¨K¨Eë

ª

mknpokmkq

'3pþ!O{Í?,
32?RþÿO46?9pþþÿ<@þ3
þ5?pþTÿ37Rþ<(µ''vÿ3ý6vÿI?pþF4±ÿ3ý3ý±þ!
c(a?pþ5Eývÿ/4±ÿpý30ý±þ$4~_$þ<?pþ5Rþp>?pþÿPLMzþ,4O?pþ$P2þ<4±ÿpý3ý±þ!6T$?3þ@þ
vN()P44} þA?4!

Å MÅ@Â ½ -

¼ü,Å  ç¼ýÂ ÒVÓrÕ
ý»»ÁbüÁiºÂ0ý½F¼»Ã¼ þ  Á × ¼ ×  Vm­OÅ  ö
eJ¿/¼Â & hBÅ  lZÙ & hBÅ<l ×

9* e$g

g6Á)ü)¿(Ö[ºº½4¼ýÂXý½Ã¼Jç~ýPÏ × - ¼ü-Å¿ç¼PÁ)»¼ÂüÁi¾ý½6üBºÅ   ç/ü£g6Á)ü)¿
ÅÉÁ þ »¼ ( Âa¼»Rý þ m
V ­ ø hBÅ  lEö ø hBÅ<l  gg¿/¼'¼ ø hBÅ  lÙ ø hBÅ<l ×

ÈÜgieºevÃb

T$?3þ-4±ÿ3ý3ý±þ->Rþþÿ4@ý±þ71L?pþ54ÿL($ÿpþ+ þpý±þO?0O?0±þ)ÿpþ+FLvþÿpþ
'±ÿÿI
 ÿ4 ÿ!Oc
³ ÿ7?3þ-?3þ,?± ÿµ*R
 þ
3 þ?þ± þI

 þvÿ3ýN33ÿ7@þPvÿO±ÿ

þÿpý
33ÿR@þý þN)
( ÿpþC
+ þp
 ý±þZ
* ºÜ & hBÅ  lQ4a4 þJ
 ºÜ & hBÅ,lE*g± ÿW+ þ@ þÉÿpþ± þ7@ þ3
 ÿpýK?pþ
}þN(O?pþL2± ÿpý3 ý±þ!,T$3
? þ@ þ(b þ* & hBÅ  q
l Ù & hBÅ<lEB
! ]
T$?pþþ3Q%3MN?pþ
?vÿ3þIvþÿvÿpý	Rþ'>
?pþPEV\è
4v þ­

I,
I  I

±ÿV

 è4è(b2d+

7
`:

É	É]3g=< ½ V è I,
I  I Á þ ýÂÓ?> - g6Á)ü)¿×~¼ þ ûM¼¾üAüBº	ýÂ # û'ºEû¼ü # È ×
ÈÜgieºevÃ b ü[3ÌþÅ«Æ Ç ÈP!8T$?3þÿ±ÚO*ýØÜ & hBÅ<l[204þ8Æ ÇÜÈ!8DTþ_ÿpþPV\è I,
I  I hBÅ<l[ÇÉÅ  !IÒ9
T$?pþþuv* & hBÅ  lEÙ & hBÅ<lE!CTF?pþ@þ()@þ*WÚ6*ÝÜ & hBÅ  lQ402þJØÆ Ç È!{ïþC
ÿ
433þ?
Å  Æ ÇÍÈ*B!þ!*v\V è I,
I  I hBÅ<l$Æ ÇÍÈP!8]
Iekge

Tt8Rþ[
ÿ4'þÿA+F?T$?pþ@þÄv*vÿ	Î-44Û>ÿ0Uh)03M?ÿMAvÿ?3þf@þ-(J?pþfaþlE*+þ
3 þ7Å  ()$?pþN0@ þ: V  è4è7r · üØ± ÿGÅ®(bF?pþL%'~: V  è4è7r · ü>*B! þ!v
* V  è4èhBÅ  l6Ç=Å-!

É	É]3g=<KE V  è4èWÁ þ
& ¼ þ û/ºÂ þ ¼fû' ºEû¼üÁi¼ þ ×
ÈÜgieºevÃ b ü[3Oþ	Å  Æ Ç
Iekge

Â0ºüLÂa¼¾E¼ þþ ýEÁb½ # ýÂýÓ@>

-¯ ºYýÂ # û ºûM¼ü # 

Á)Â0¾½ M»Á)ÂÃ

Âú\ýÁiýÂ0¾E¼GýÂa»

È !CT$?3þÿ8Ú6* ºÜ & hBÅ  lQ204þ=Æ Ç±ÈP!CÒ-T$?pþ@þ v* & hBÅ  lEÙ
P
& hBÅ<lE!´T$?pþÿq+-þm
±ÿ3ÿMþS
þvÿÓ?KÅÐÆ Ç¯ÈP*$!þ!*5?«V è4èhBÅ  lÆ Ç¯È!´rMKvÿ0'±ÿ
þ*


33ÿþ@þoM0þY()c ÿ4± ÿ
 þK0R
 þ; ]  )Ó1

3ME(F
+ þU&±ÿ#

þ0þ þ3ý±þK+F?
'±ÿÿK
ÿ4ÿ*)J
! ]
H d+z+þK
ÿ4pþIS,@þ34>()|V
f
?pþ@þ (bFþE'f
E?pþPPV1!

I Å

±ÿ"V

H=I,

!ïüWýÿµ*6+-þ	RþývÿW+F?®Sþþ±ÿ

Å MÅ@Â E - ¼ü5Å  ç ¼	ýÂqÒVÓrÕ 6g Ábü)¿Ö[ºº½4¼ýÂÓý½ Ã1¼Kçý®Ï  ýÂ0»G½4¼üZVU­tÅ  ö Å ç¼	»¼ ( Âa¼»mý þ
VG­ ñóò hBÅ  lBö ñóò hBÅ<l¬gg¿/¼'¼BArÙÜæÏ  Ù Çz
ù y  h (Jè  * lEÜ ø hBÅ  l  þ M¾¿Wü)¿/ýü°V/h ñóò h (Jè  * l'l Ú

h
 lnªÙ
J
e
M
¿

¼
Â
B
h
Å

l
Ù
B
h
<
Å
l
&
&
ñóò (Jè *
×
×

ÈÜgieºevÃ b · 4P42-'?pþN1(t(6T$?3þ@þÔv!8]
 ýÂ # û~ ºEûM¼ü # ×
IekgeÉ	É ]3g=< ¼ V I Å Á þ ýÂÓ?> -× º>
ÈÜgieºevÃ b · 4P42-'?pþN1(t(,Î-44GvQ(OTF?pþ@þÔv!8]
 Áb½ # ýÂ>Ó?> -  ºK
 ýÂ # û~ ºEûM¼ü #  Á)Â0¾½ M»Á)ÂÃ Âú\ýÁiýÂ0¾E¼GýÂa»
IekgeÉ	É ]3g=<> V HOI  Á þ Â0ºüLÂ°¼¾E¼ þþ ýE
& ¼ þ û/ºÂ þ ¼fû' ºEû¼ üÁi¼ þ ×
9* e$g

¨Oµ©

í[î

ÈÜgieºevÃb

t}-m{t/s$q

í

os0ïðptÊ{añ

l ñqMð î
í a

· 4P42-'?pþN1(t(,Î-44	Û8(OTF?pþ@þÔv!8]

{ïþ[
±ÿMd+#?pþ$()4\+FvÿpýL
ÿ0
43ÿ0O(b

?pþ$?pþ@þ,±ÿP
44þ @ 36@þþÿþµ­

³ (f?pþKÿ3þ:;'þqþÿ0vÿpýGþE'*-?MþK?þ ý3±ÿþþ#'Rþ · ÊGsJI()±ÿ
Q
0Rþ;Uþ.V\è I1
I, I *WV KI Å *µ±ÿGVè I,
I  IÌé I Å>h)+F?4
E?S204þ$?BVè I,
I  I v Å  á â  4[4'	±ÿ
· ÊSsW(bF± ÿ	R
 þpMlE!
Ä

Ä

{ïþ)ÿpþþÿpþ±þ6Rþ-
ÿ
þÿpþ8+F?7?pþ9_0'g'þvÿ8Fp+9:;'þþE'!OcpO4_ý3±ÿþþ
'
 þL± ÿ · ÊSsnh)R
 þ
3 þ¦V\è I1
I, I q
 V I Å 45+A/$?pþN_a'5'þ°lE!

H þo19
ÿ4pþ6?3þ@þP<?0,@þLÿpþþpþP'>M@þ6?pþ5;+-:;'þCRþ'!:ü[?M3pý?I+þ
T
()33ÿC@þ34A(b5?pþNÿ3þ:;'þYRþ'5?05+-þ@þcý±þÿ3þºþÿM3pý?	'P0M@þ£^@UWÑPþ;*
+þ7
+ þ@ þ7$
3 ÿ0 þL'	MC4±. þ+F4@ þL(b[?pþ8;+-:;'þR
 þ'!Q³Q3MF þ3F(b[?pþ8;+-:;'þM:
þ'Ap
 þþEPv ÿpþf+Fp
? þ?pþ-?pþ þ[R
 þ'A@ þYÿpþ
 þ2 · ÊSst,()A+c ÿ4± ÿ
 þfAW
" þ'% ÿ þ
R
 þvþLv ÿ04
34!r3M3M@ þ+9.+f44O
 ÿ43
 þ>?pþ7R
 þ;
4 þ!	T$p
? þP?pþ þP
@ þFË13þ$ ÿ34± þ!gTFp
? þA_0'6?3þ@ þÜ2'vÿpý32p
? þt?M þF þ7 ÿv ÿpýQR
 þ'6?0,+F422'(b
cÿ4± ÿ
 þN0R
 þþA()z?M þ>?$+F42k
 ÿM­

Å MÅ@Â ¼ Õz¹Iý¾¿Á)Âa¼I½4¼ýEÂÁ)ÂÃGºEûM¼ýüBºÁ þ Ã MýýÂü;¼¼»UüBº×çE¼ýÂ@Ó@> - g6Á)ü)¿8'¼ þ û¼¾ü5üBºUýÂ #
Â úýEÁiýÂ0¾¼7û~ºEûM¼Eü # È Á  ýÂ0»RºÂ½ # Á  

ù CzýÂ0»¯ ù - ý~¼±çºü)¿®ü}=¼ ö gg¿Ái¾¿   ºCº@Cü}g<º4 þ ü;¼û
ºEûM¼ýüBº þ  Áb¹Fûa½`Ái¼ þ ü)¿1ýüAü)¿/¼IºEû¼~ýüBº þ ýüÁ þ( ¼ þ ü)¿/¼Iý¾E¾E¼ þþ Á}çÁb½`Ábü # ¾ºÂa»ÁbüÁiºÂ ø ×

9* e$g

· 3M%þP
ù ÙØ±ÿõPù sm@þ[%?'33þ!<sþ-c+ÿE4±ÿ
þF0Rþ;PÈ Ç ]  )J!:ü[3Oþ[È
·
4,'3pþF(Vr ü=ÅR4,'Iþÿvÿ3ýM!gT$?3þÿP()-þ±þ''vÿpý < Ü & hBÅ<lE*M973,RþF?pþ[
þ[?
 ù
 )W4Q'Ep3 þv ÿòþ± þ
:;'þP( < !Icp(-

 þa44pY(-'>4Y ÿMLvÿ0
@ þ þ#hi! þ!* Gù Ù±± ÿÝ
sglE*0?pþÿY583'$RþQ?pþ>
 þ>?Lþ± þK
:;'þ7j
( þ± þ	'v ÿpýLíÜ & hBÅ  lE*+F3
? þ@ þ7Å  Ç VMhBÅ<lE*
4Q4'	K
:;'þ(-'O
 þ''v ÿ3ýCv ÿ & hBÅ<lE!7T$3
? þ@ þ(b þ*°()c
 þ± þG''v ÿpýÝÜ & hBÅ  lE*VQ73[Rþ
?pþL
 þN?0  )Y4A'p
3 þNv ÿ¯þ± þC
:;'þ7N
( 6!<+c ÿ	?3þ$+9E*Md/v ÿpýI'± ÿ0 ÿ	
 ÿ4 ÿ
·
3
3 ÿ0Yv ÿY± ÿSr üØ+f?M3M$vÿ0
@ þv ÿpýP

 þ042;+F44º
 ÿMfþF?pþ7'3M?K(6± ÿU+c ÿE4± ÿ
 þ
R
 þp*M+F?4
E?K?M45 ÿ¯þ± þY
:;'þ>½
( þ± þK''Ev ÿpýv ÿ	?pþ>2± ÿpý3 ý±þN(O?pþ>r · ü7!
· 3% þQÙX fs<!c ÿ
@ þ ÿpý$

 þa44pF(M'Pg404v þ0?pþ,°042;5(Mv ÿ'/3
v ÿpý
K
:;'þCv ÿ'O
 þP''Ev ÿpý(ºÜ & hBÅ  lE*V+fp
? þ@ þÅ  Ç VMhBÅ<lE*J?N+A
 ÿLvÿm± ÿ'' ÿpý( & hBÅ<lE!
T$?2f
± ÿR
30 þ144 ÿG(9± ÿmc ÿ4± ÿ0
 þ80R
 þ;*VL ÿU?pþP
$
3 ÿþ@ þoM0v þI ÿS?3þ1(
(gÎ-44Û1;
! AÜÿd+Fv ÿ3ý>?  )K4,'Ep
3 þ[ ÿãþ± þ
:;'þN
( þ± þC''v ÿpý7( & hBÅ<l60d/4p
 þ
 ÿM
ý3±
 ÿþþ>?0  )S4A'Ep
3 þLv ÿ¯þ± þK
:;'þ8_
( þ± þ	'v ÿpý( & hBÅ  lEB
! ]

ÈÜgieºevÃb

· vÿ0
þP+-þC@þMR?0±þC@þ3>'S
\±þ?pþÿpþ:;þ®Rþ'E*O+-þfÿpþþWÿ0
ÿ4pþ7?pþ
;+-:;'þGRþ'!

É	É]3g=<Kø Je ¿/¼C¹ý¾¿Á)Âa¼½4¼ýÂÁ)ÂÃRºEû¼~ýüBº þ ¾¿/¼¹ý þ V\è I1
I, I " H=I   V KI Å " HOI   ýÂ0»­V   ì ý~¼
ÃMý~ýÂü;¼E¼»üBºXçE¼7Ó?> -Oþ g6Ábü)¿õ'¼ þ ûM¼¾düNüBºýÂ #´ Âú\ýEÁiýÂ0¾¼>û~ºEûM¼ü # È ç¼¾ý þ ¼  ºCý½)½-º  ü)¿/¼ þ ¼
ºEûM¼ ýüBº þ 2
ù C«ýÂa»× ù - ×
e ¿/¼X¹ý¾¿1ÁbÂa¼&½¼ý ÂÁbÂÃ=ºEûM¼ ýüBº þ ¾¿/¼¹ý þ \V è I,
I  I "  è è  V KI Å "  è4è  V _âã I  ýÂa»
J
IekgeÉ	É]3g=< û
V\Å·Æ KH=I ý~ ¼RÂ0ºüÂa¼¾E¼ þþ ýE Áb½ # Ó@> g- þ 6g Ábü)¿Ý~ ¼ þ ûM¼¾üPüBº#ýÂ #X Âú\ý ÁiýÂ0¾E¼	û~ºEûM¼Eü # È çE¼¾Eý þ ¼  º
ý½)½tº  ü)¿M¼ þ ¼IºûM¼~ýüBº þ 2C ×
Iekge

¨Oµ¨

ª

 { 

· Tjü6T$|Fv 

/






·




·

mknpokmkq

 { 



· Tjü6T$|fv 

)  R 
Tjü6T$|9Û R
 
/   
) 
Tjü6T$|>

/






·

þ




·



)  R 
Tjü6T$|-Û R
  .þ ªX
 
/

Tjü6T$|Z>

rOý3M@þ>w1­,TF?pþL3M'P · vPhiþ()ElA±ÿ · v


h)ý?ElE!

T$?3þIÿpþo/F?pþþ 
E?
þ}þQ?þ8vþÿvÿpýRþ'EF?Q
±ÿ3ÿM[RþÜý3±ÿþþG'
Rþ · G
Ê sJ5+F4?	@þ'Rþ
5'"Lþ°ÿ0þNRþþ!

Å MÅ@Â  ÕNÂ # ¹Iý¾¿Á)Âa¼½4¼ýÂÁ)ÂÃmºEûM¼~ýüBº þ ¾¿/¼¹ýSü)¿1ýüQ¾ýÂ®Á)Âü}ºd»M¾E¼	ýSÂa¼g þ ü}EÁ)ÂÃ8g6Á)ü)¿
ýÂmÁ)Â ( 
Â Á)ü;¼½ # '¼pûM¼ýüÁbÂÃ þ  ç þ ü}ÁbÂÃCÁ)ÂüBºCü)¿/¼ÒVÓrÕ ½ýÂÃMýÃ1¼8¾ýÂÂaºüÛç¼[ÃMý~ýÂü;¼E¼»KüBº®ç¼IýÂÓ?>  º  & ¼ þ /û ºÂ þ ¼fû'ºEû¼üÁi¼ þ ×
9* e$g

ÈÜgieºevÃb

ü[3Ì
 þr · ü ÅØ4'$
_ þ7GL
" þ° ÿ0 þ
 þ;47'm þ ÿ ÿpýM!ST$3
? þ@ þ(b þãþ± þ
' 'ÿpýS

þþ#&Å=4~_$þ8?pþ	Rþp!RrMOþ
?q

þþ&''vÿ3ýM*:þ±þZvÿ0'±ÿ
þRh)
?pþ	_0E'vÿ'±ÿ
þY4(f4rO~:;"Lþ'%ÿþ	þ;l7(f?pþK'Eý±ý±þ4ßþ±þÿ34®(b2d+þ
1® þ'% ÿ þ! · 3M% þC?pþYP
E?v ÿpþYv þ ÿv ÿpýmR
 þ' ÿ'/3
 þï
 ÿ3þ+ ''v ÿ3ýG+f?&± ÿ
v ÿ/
_ ÿþC@ þR
 þvÿpý	3M0'v ÿpý ÿ'C?pþI4± ÿpý3 ý±þ!LT$3
? þÿSQ4f%0v þL?Q?pþ8@ þ_oU(,?4
'' ÿpýPR
 þ(b þL?pþ7 ÿ/k
_ ÿþ4P@ þR
 þvÿpý3M0'' ÿpýPv ÿ
430p
 þ5P'v ý±ý±þ[± ÿ ÿMP@ þ° ÿ0 þ*a± ÿU?pþ
v ÿ/
_ ÿþ@ þR
 þvÿ3ýP3M0''Ev ÿpýIMz
 þW
 ÿMFvÿ
23p
 þQ@ þ'% ÿ þ
! ]

· vÿ0
þP+-þC@þMR?0±þC@þ3>'S
\±þ?pþÿpþ:;þ®Rþ'E*O+-þfÿpþþWÿ0
ÿ4pþ7?pþ
;+-:;'þGRþ'!

É	É ]3g=<ü Õ[½b½Oº  ü)¿/¼ü}<g º4 þ ü;¼û®½4¼ýÂÁ)ÂÃUºûM¼~ýüBº þ ¾ýÂ0Â0ºüçE¼LÃMý~ýÂü;¼E¼»SüBº×ç¼OÓ?> -Oþ g6Á)ü)¿
'¼ þ û¼¾üfüBº & ¼ þ û/ºÂ þ ¼Lû~ºEûM¼EüÁ¼ þ çE¼¾Eý þ ¼ü)¿/¼ # ý'¼ÁbÂZü)¿/¼ (  þ ü[¾½ý þþ Á)ÂRü)¿/¼Qû/ýüÁbüÁiºÂ¯~¼½`ýü;¼»SüBº
ü)¿Á þ ü)¿/¼º~¼¹  Á × ¼ ×  ü)¿/¼ # ¹ý # ÁbÂü}~º»M¾¼ þ ü}Á)ÂÃ þ g6Á)ü)¿YÁbÂ ( ÂÁbü;¼½ # ~¼ûM¼ýüÁbÂÃ þ  ç þ ü}EÁ)ÂÃ þ ×

Iekge

Î ÿ04pþON
3M0þ-(%4443'±þXþoM0vþt(%T$?pþþØL±ÿ0846
44*30vÿpýQrOý3M@þ5w1!
D<EI'Rþÿvÿ3ýXh)?pþYr · ü ÿX?pþYþ()I([rOý3@þYwlE*Ú6*9+F?pþ@þ Ü & h · vdlE*`ÉÆ Ç DZ>1*,()
"Lþ° ÿ0 þ	R
 þ;¯D>RÇ ] hió
 ö cÔalE! ü[3O
 þKR
 þ'«
 V   4ì ­ · ×
v ö · v  p
 þ þþÌ
 þp
 ý±þ
h· j
T ü6T$|9Û1* · j
T ü6T$
| >l$± ÿ\
 ý±þÿ3þ4} þF?pþ>'± ÿ0 ÿY
 ÿ0 ÿK ÿ þp
 ý±þ	h · _
T ü6TF|9Û1* · _
T ü6T$|-Ûl
' j þBªZk	hi þþNrO ý3M@ þNwL ÿC?pþ[ ý?ElE!<T$p
? þÿ?pþQ''v ÿ3ý7
 ÿ2'vÿpýL(JC()4\+ þ1v ÿ/k
_ ÿ0þ
P± ÿY/]^8h)J*^/*^/*^/*!!! G
l Ü & h · v  l-a3MPùÆ i
Ç D>1!5T$?4Fp
? þ0$30$'	 þþ>+F?´
 V   ì 2L
 ÿMTÿ3þ
 þ44
 ÿ · ÊGsX(bLW
±
" þ'% ÿ þIR
 þvþ!NT$p
? þO
 þþoM0 þ4423''þf+F?±
 V\è I1
I, I " H=I, 
± ÿ3ÿMNRþ
ý3±
 ÿþþK'IR
 þ[± ÿ · ÊGs()5L
" þ'% ÿ þ[R
 þvþ!grR
 V I Å " H=I, *M3M% þf?pþN
 ÿ4 ÿ()
h· j
T ü6T$|9Û1* · _
T ü6T$Z
| >l$2 j £
( ª#k	v ÿ · v*µ± ÿ j Z
(   k	v ÿ · v  03MTþ± þ1?v ÿpýfþ4 þI4f?pþO
 þ
F ÿKrgv ý3M@ þ>w1X
! üTýv ÿµ*M
+ þ>
± ÿU@ þþL?pþNa þ±(bfL
" þ'% ÿ þN0R
 þþ!

Ä

{ïþ8
ÿ
43pþQ1K3PPE}vÿpý8?pþN%±þLPa@þ30­

V\è I1
I, I *V KI Å *ÒV\è I1
I, IÌé I ÅN±ÿ0õV\è I1
I, I4v Å  á â 

þP°EV±ý4
dlE!

¨OµKµ

@þ · ÊSstN()7±ÿG0Rþ;#hþo/@þ40þvÿ

í[î

V\è I1
I, I " H=I  * V  I Å " H=I,
Ä

±ÿ´V

t}-m{t/s$q

  4ì

í

os0ïðptÊ{añ

l ñqMð î
í a

@þ · ÊGsJA()Fcÿ2±ÿ
þNRþþ!

±ÿK?3þÜÿpþý±þ7P°@þ3­
Ä

V  è4è*{V H=I, *{V  è4è éH=I, *{V  è4è v Å  á â  *ÊV  I Å "  è4è* \V è 1I 
I, I "  è4è*{V _âã I
·
Ä

V\è I1
I, I " H=I  * V  I Å " H=I,

4

ÊSst5()$c+ÿ4±ÿ
þNF"Wþ'%ÿþNþþ!
±ÿ´V

  4ì

±ÿ®V\Å·Æ

JH=I

þYÿ?ÿ3þ
þ~:

@þÿMLÿ3þ
þ44 · ÊGsJA()F"Wþ'%ÿþNRþvþ!

T ?3þY()
?4$?M@þþUþ7ÿvÿpýmRþ'?2'(b®?pþU

þ042;X
ÿ4ÿ#@þ
$
ý3±ÿþþI'[þ · ÊGsJt(bOcÿ4±ÿ
þ9Rþþt4gýÿ`_°
±ÿ*Rþ
3þ-c+ÿE4±ÿ
þ-Rþþ
@þOþo/'@þO
 þm3 þ(i3O± ÿ
PP ÿ(b>± þ()1v ÿ3ýC'/'þP>± ÿP± ÿG4P°±ÿN024
 ÿ
ÿpþþK
 ÿ0þ$R
 þþA(g?45
27hiT
× þOþ± þT
 þF!*Jvww QlE!
rOv ÿ2*,()uTFp
? þ@ þPSvY± ÿqÛR+ þUv þ ÿpþ&??pþUp
? þP(Q?pþU0 þÚ()45(
?pþOÿpþý± þ@ þ3Q4Ð
 þ?3þL± ÿV HOI  þL± ÿV  è4èP'þJ!7sJþ7v ÿG?4[0R
 þQ+ þP@ þ
?pþ þQ'30 þ'O
 þQ'þ0A1k
_ ÿ0v ÿpý8@ þYþe
 þÿ5Oþ?M/-(b5p
 þ4 ÿpý7+f??3þ±?± ÿC'
@þ± þ_a
 ÿ(bÉ

E?µ!,×fd
+ þ± þ*/_0'*1v ÿP?3þÐÿpþo/9@þ
 ÿµ*1+ þQ
 ÿ43
 þ9?M\+Ó3MAL0
@þ305@ þL'± ÿ04þK() Pv ÿpý þQ'0103
5r · ü=()[
Å  

 !

£ 3·¸¶±ø·¦µ\¶ø ¸ · ·ø:ùXú-¹¶î²ïú:¶±ø ¸¶ø ÷
cÿW?28@þ
ÿ®+-þ	M@þÅ'2 

3 +F?3þ@þÉþ
E?&ý±þÿPvÿÿ7±ÿ0Z3@þ847\+WÿXvÿ/:
·¸ ÷ µ

D½õBE

 ¸k¶û ÷3 R1 3¸R·

÷ û ÷34

/430tr · ü7*V03MN()L±þ_a
ÿ?pþ/3
Nr · ü ÿ3þþN'YRþ()OþR±ÿR±þ`_$þµ!Pr
Å 

 *[þÿvÿ3ý$Rþ'g2ta4þN'Q±ÿ7ÿ/43ý±þÿ6r · ü&±ÿ>?3þÿ>?pþ9/3

4Q()O
 þµ!T$?3þ@þ(bþ*JN4cÿpþ
þm'Y
ÿ4pþN?3þ'±ÿ44ÿm(-þ
E?Wþÿ0vÿpý	Rþ'
()Ðv ÿ41403µ'Y130
[r · ü7*V± ÿ?M\+ ?>Rþ
L?pþP	0 · ÊGs&@ þ34Q@ þ þÿþ
%d± þ!
rM,
 þE'
 V I Å " H=I, * V\è I1
I, I " H=I, * V I Å "  è4è*± ÿ0.
 V\è I1
I, I " H=I  *+ þ5
 ÿ4p
 þO ÿL?3þ-'E± ÿ~:
4 ÿ0Q(9?pþ4P4± þ7R
 þ'E!PT$?4Q4QR
 þ
3@ þ?pþP'± ÿ4 ÿ[(A?pþ þR
 þ'7@ þ
4P0P'± ÿ04 ÿA(O?pþ454P4± þ[
P° ÿ3þÿ!9T$p
? þN@ þP ÿv ÿpý8'± ÿ2 ÿ$@ þ­
Ä
Ä
Ä
Ä
Ä
Ä
Ä

V I Å 'E±ÿ4þF'¬V I Å ±ÿz<\RV\è I1
I, I !
V\è I1
I, I '±ÿ4þ$'¬V I Å ±ÿz<\RV\è I1
I, I !
V H=I, 'E±ÿ4þF'¬V H=I  ±ÿz<\RV  è4è!
V  è4èL'±ÿ04þ5'¬V H=I, ±ÿ0z<\V  è è!
V   4 ì '±ÿ2þ5'¬V    ì ±ÿ0z\< RV _ âã I !
V  âã I 'E±ÿ4þ5'«V  âã I !
V\Å·Æ JH=I '±ÿ04þ5'­V ÅÁÆ JH=I !

cNPò
 ÿMNRþ8v ÿ34± þ>'K?pþI@ þp
 þL?d+ V H=I  
± ÿm'± ÿ4þI'§V  è è!>Tt	2443''Eþ*a+þ
3þIrOý3M@þCvy/*µ+F?pþ@þ8?pþ8'±ÿ4ÿU
ÿ0ÿ*%3
E?SPhi´ªÓ
dlE*VpþÿMþIþQ(2\´âz`]_Y^ ä1ÖU']

 ÿ! · 3M% þ.V H=I  4f004 þS'¯þp
 ý±þUh~v*JÛl[v ÿS?pþ þ(bP'Nr · üÜ'	?Q?pþI'± ÿÿ

 ÿ4 ÿ72_
 ÿM\+´hi|
 ªU°lE!OT$p
? þÿ8Ð
 ÿpþ+ þp
 ý±þLh~vv  *Û/v  lt4gp
 þ7'Q?pþA/3
Jr · ü«h) ý?'

¨OµÎ

ª

­ª®


ÛR 

 { 

/
þ

FG



v

Û

ÛR 

 { 

mknpokmkq

£Û 
v

ÈJ;

8ª®





 { 

Ç

ZLK

M9

ÛÛ 





Û/v




vv



)

HI

FG

ÛR 



HI




rgvý3M@þPvy/­AÙYþÿpþ4}4ÿY
±ÿKRþ
Oþ>0ÿKvÿ	130
!
v ÿrgvý3M@þ7vyl<+F??pþ['±ÿ4ÿ
ÿ4ÿPV!6"Wþ
40?09'8(bEÜ?pþf/3
,r · ü´+-þf.±þ
?pþZÎAþ4±ÿ130
C(8?pþ±þ2
þU±ÿ?3þRvÿþEþ
ÿ(8?pþR'±ÿ0ÿÍ
ÿ4ÿ!
sJ4±. þ+F4þ* V I Å '±ÿ04þ5'Ìþ4?pþRV KI Å RV\è I1
I, I ÿ	?pþN/3
5r · ü7!
TtW4423''þC+F?ó
 V   ì 
± ÿq
 þ
Ì
 þ§V  âã I  ÿX?pþK/3
*<
+ þU3@ þ	rO ý3@ þ×>1! · 3M% þ
+þp
 þ þþ?pþãþ3
 ý±þGhiT$T
" üfH · ÊScT$T$cHNÙ8*t"f|-ÎA|,,c :[c~HQÙLlN± ÿW\± þ?3þ'± ÿ ÿR
 ÿ0 ÿ
' þ3
 ý±þ®hiT$T
" üfH · ÊScT$T$cHNÙ8*,T$T
" üfH · ÊScTFT5cHNÙLlE!,TFp
? þÿ&?pþ\ý40F'þXhiDQ|,sV1c :Q|,"$c~HNÙ8*
·
DQ|,sJ,c :Q|,"FcHNÙ8*0T$T
" üfH ÊScTFT5cHNÙLl9R
 þ
O
 þf

 þ0v þN(b v ÿ4%'þ	hBÎ$³QstsJ|-Î5T5cHNÙ8*
"F|AÎA|<1c :[cHNÙ8*%T$W
" ü[H · ÊUc~T$T5c~HQÙ>l51Y./v ÿpý	7344 ý±þÿQ
 ÿ#hirt:;p
 þ44± þB
 qcp:B@ þ
 þ± þ¬Ósµ:
'± ÿPElE
! D<@ þ/3*?A834 ý±þÿ-
4 ÿ()
 þ?pþ[/3
,r · ü'ßý8'	hiDQ|,sJ,c :Q|,"$:
c~HQÙ8*aD[|9sV1c :[|9"$c~HQÙI*0"F|AÎA|<1c :fc~HNÙLlE!
{Í?4024
 ÿLS?pþ@ þ'± ÿ04 ÿ8?d± þC()I?pþ	( þpW($?3þC þ7 ÿv ÿpýS
 þE'
()>?pþ/3
Lr · üN²TFp
? þP%± þPUEO@ þ3L(b.
 Vè I,
I  I " H=I, ï
* V I Å " H=I, *g± ÿó
 V   ì ()
@ þ@ þ1 ÿpýQ+c ÿE4± ÿ
 þ$
 þþOR
 þ
O
 þWÿpþý± þf(b9?pþ$130
!gT$?04646R
 þ
3 þV HOI  P
Rþ
O
 þEV  è4è7± ÿ0×
 V   ì YR
 þ
O
 þ.V  âã I !FY
³ ÿU?pþ>?3þ[?± ÿ0µ*?pþL%4± þ>P0%@ þ3
().
 V\è I1
I, I 
* V I Å 
* Vè I,
I  IÌé I ÅN± ÿõ
 V\è I1
I, I4v Å  á â  0@ þ þ/v ÿpýU26R
 þþ>@ þPv ÿR°± þP()
?pþI/3
!7rM¦
 V\è I1
I, I n
* V KI Å n
* V\è I1
I, IéaI Å*V± ÿ
 V\è I1
I, I4v Å  á â  *V?4Q4P04 þF?N?pþI/3

r · üCÿ3þ± þ
 ÿpþþQ'KR
 þI(bEO
 þµ*µ@ þ± þ_a
 ÿmM
 þc
 ÿML?± þ'K
 þIM ÿpþ*t± ÿG?3Q?3þ@ þP4
Â0ºmE3
3 ÿ/:B4O
 þC
'*Xþ± þÿX()7300 þ ý±þÿPv þ ÿv ÿpýG3M'ÿM30a
! ü[8Ì
 þÿ ÿ3þ®%\± þ*
?pþY'3M0 þ'Ì
 þY0(L45R
 þ'@ þS3
3 þK'W?pþ­
 V H=I  «
 V  è4èS
P° ÿ3þÿ!n+c ÿq?pþ
ÿpþo/þ

 ÿ&
+ þKp
 þ± þ#O
 þ?M/I()@ þ3
 ÿpýU?pþY
P0 þoM;Z(F@ þ± þ_a
 ÿXd± þ'
@þ± þ_a
 ÿK() 
E
?Y+fp
? þÿK?pþ þNR
 þ'EF?d± þ>R
 þþÿK04v þµ!

v

 %G{Ò3·¦û}»?¹¸¶±û ø ÷
"Lþ
2<?7þE'¦V I Å ±ÿ0õV\è I1
I, I 
±ÿ3ÿ7
3þ0vþPN+F?R?pþ(þ;R(5þ7ÿvÿpýM*
+F?pþþ;V H=I  ±ÿPV  è èF@þ52'.	hi!þ!*þWÿM,N0ý3±ÿþþP'>þ · ÊSstElE!6r3M?pþE@þ*
V H=I, ±ÿ0õV  è4è	
±ÿ®
3þC0vþPN+F?pþÿW?pþW@þ?pþ	þ
ÿ®'þ®ÿWYp+9:;þ&þE'!
N½õOöi÷ ¹·

÷ ¶±¸

r 3$ÿþ*A+-þY?0±þS3þ±þRþ&vÿ
@þOþÿ5@þ±þE`_a
ÿ&ýE?PI()P?pþþUþE'
M
?F
±ÿSýÿ_a
±ÿ4pþ
@þþ7?pþN4OþL
P0þoM;Cd±þ['V@þ±þE`_a
ÿK() 

?µ!
" þ
4,?08?3þ@ þC þp+9m+A/7?08R
W
 þ'E7
± ÿXþ

 þ4044pa
­ ýa4#hBÙLl>
/
4&hisglE!gr3M?pþE@ þ*O@ þ
46?0.V  è è
± ÿ®v ÿ
@ þ þC

 þa44p þ?3þ>+Aq!h W:
Ù msglE*
+Fp
? þ þ¦
 V H=I, 
± ÿW ÿv ÿ
 þ þ

 þ4044pG41
44XOh W
ù :
Ù GsglE!Jï
{ þ	d?EV H=I, ?L ÿ4

¨Oµ

í[î

t}-m{t/s$q

í

os0ïðptÊ{añ

l ñqMð î
í a

 j 1
2} þ\
k þRþ
IÿZ

þ042;*O+F?pþþ>?pþÉþþ
I(V  è4èCPRE0þ?3pý?®P±ÿ
0Q(9?pþr · ü>!µT$?3þ84P044
ÿS4[?Q+-þP
±ÿ?0±þ±þ þe
þÿQÿ
@þOþÿ6Oþ?M/
(),@ þ± þ_a
ÿP2@þP()V H=I, *+F?pþ@þ,+-þ[
±ÿ3ÿM-M744.±þ+F4þA()ZV  è è!Oc+ÿ?pþ9+-*
@ þf1
2} þO
 þRþ
,ÿ

 þ042;I402 þg?,,2:
 þ þ<'8/
4} þ5@þ±þ_a
ÿP'ývÿ
'R
 þþµ!6T$?264,4L'p
3 þf(b9°?;+-:;'þ	R
 þ'9?9?d± þqV H=I, ,?pþ4, þ
 ÿC'þV*/! þ!*
V\è I1
I, I " H=I, ± ÿí
 V KI Å " HOI  @ þUO
 þÿa þY'Z ÿ
@ þO
 þÿ7hi/
4} þ°l8@ þ± þ`_°
 ÿµ!ÍÒ þ
30 þ
ÿMM±
 ÿý±þG4
 ýv ÿpþX1Z
 ÿ04p
 þ ÿpý8V  è4èKR
 þ þ*9
+ þYp
 þ± þ# ÿ
@ þO
 þÿA@ þ± þ`_°
 ÿ
 ý4?PN()L?pþP'Üý±þÿpþ,R
 þ'E
 V\Å·Æ KHOI !TFp
? þ þP ý4?PLaU'8V  è4è± ÿ0R4
?pþ['R
 þ
4µ
 þ$
( V\Å·Æ KH=I !
{ þQ?± þQp
ï
 þ± þR
 þ;+-7pR
 þ9(Vv ÿ
@ þÌ
 þÿ0@ þ± þ`_a
4 ÿ ýE?P­g?M þf?-(b44d+
?pþC044
4 ÿR
( V H=I, *6± ÿW? þ?8()4d+É?pþ0044
 ÿRÛ
( VÅÁÆ JH=I !Yrß
 þ
E?®(53M
 þ
 ÿ0v ÿpýG
 þE'*, ÿ3þCPP@ þK(F?pþ@ þY ý?82044
a þ!R
Ò þ(b@ þK0@ þ þÿvÿpým?pþ
v ÿ

 þO
 þÿ° ý4?P* · 3M0 þ
4 ÿ¬C1!4v[@ þ þÿ,p+9I ý4?P9(b-'°@ þ± þ`_a
4 ÿP()


E?µp
* ÿO
 þ* ÿpþF()-+c ÿE4± ÿ
 þF0R
 þþ<± ÿ?pþF?3þ9()-2R
 þvþ:
 þo10@ þa þ$
r · ü[*M9
+ þ4°5± ÿ	 ý?É()-./v ÿpý8?pþ[þÿ'5130
,(V?pþQr · ü[!<T$p
? þ þQ ý4?P
04'Y
Å  (1NHOI M *%
Å  (	K
 *0L
Å '2 

 ! · 3M0@ þ
 ÿ×C1!ã
Û ý± þf ÿ
@ þO
 þÿV± þ ÿ$(
4-?pþK ý4?P8v ÿ · 3M0 þ
4 ÿ"C1!4v!®T$p
? þ þ	 ý?0PI@ þK044
a þ+F3
? þÿZ?3þ	v þ ÿv ÿpý
R
 þ'$4°
 V\Å·Æ KH=I $± ÿ(t5'R
 þ
4°
 þ!,r3?pþ þ*1?3þ04'P± ÿ(O
Å  (1H=I M *
Å  (	
 *$KÅ '2 

3 ! · 3M0@ þ
 ÿæC1! >®?Cv ÿ
@ þÌ
 þÿf ý?P()K
Å  (1H=I,J ± ÿ
Å  (	
 */v þ ÿv ÿpý7R þ'Û V H=I  */± ÿ0c ÿ2± ÿ
 þ[± ÿ0(i34aL" þ'% ÿ@ þf þþ,v ÿ02
34!
T$p
? þ$@ þ
 ÿP
 ÿ
430p
 þO+F?I?pþ þ4
0± ÿ
 þP04
1@ þ36
0Ev ÿpýN?pþ54Ì
 þ$
0 þoM;
(<?pþ8v ÿ
@ þÌ
 þÿg ý?0P$+F4?Y?pþ84O
 þ8
0 þoM;K(6?3þ8
 þ'% ÿv ÿpý'g± þ ÿ
hi$
+ þ4µF+F?¯þ
?S?pþlE!
T$3
? þIý< ÿSp
 þ± þ40v ÿpý	4t(,?pþv ÿ
 þO
 þÿg@ þ± þE`_a
 ÿ ýE?P[4QPoM4Pj
 þeP:

 þÿ
!9T$p
? þ þ>v ý?P5±. þ>?pþL3 ÿ	?0[ÅqÆ ÇÍÈÜA'C þ ÿv ÿ3ýM*1+f?4
?KÌ
 þ± ÿ
?-±ÿ
 þE<()3
3 ÿ ÿ@ þ/3O± þ`_°
 ÿJhiEl<?± þ[@ þMIR
 þþÿI_
o þµ!6T$p
? þÿPv þ ÿv ÿpýQ/
:

3M7yh V/hBÅ,l,Ç´Å  lE*()4\+ þY	?pþ> ÿ
@ þO
 þÿµ@ þ± þ_a
 ÿY ýE?hi þþ7rgv ý3M@ þvdlE!-W
H þo/
þ

þ
þ

þ
þ
 þ-3,

 ÿ4p
 þ-?pþ º /Â0»Âa¼
 ÿS¾Eº¹Fûa½¼ü;¼Âa¼
±
(V?pþ[ ý?*+F3
? þ@ þF
+ þf3O
 þTÿP
þP ÿ
 ÿµ:
! ü[4(V?3þQ ÿ
@ þO
 þÿ0 þ± þ`_a
 ÿ	 ýE?P,@ þ þÿþ	p
? þ@ þQ@ þ[3
3 ÿmhi! þ!*
+Fp
? þÿ3þ± þ?pþ&
 ÿ
430p
 þK?P@þ± þE`_a
 ÿ#3

 þþ*5P4v ÿ&(i
P'p
3 þY?0CÅ  Æ ÇÈ7l8()
+ ÿ''@þk0R
 þþ[± ÿ j 0@ þ
 ÿv þkP0R
 þþf(bQ+F?2
?S?pþßÿ3þý ÿ4T
 þo1 þ~:
j M\W
0v þL[k
Ò 3j 
?gr · ü7!aD[dW
+ ÿ0''@þ R
 þþ7h)+F?4
E?Uv ÿ
23p
 þLL
" þ° ÿ0 þ\l5
Ep
? þ
.U@ þËp
3 þÿ0
 þf(
þ±
 þÿfv ÿYþ%µp
 þdp
* þ! ýM!*a+F3
? þ?pþL
 þ± þ*
 )G2A(b44d
+ þY1C
 d!,+c ÿY
 ÿ''* j 3M0'@þPk
R
 þvþF
3
? þ
.U()Ð
 þ± þÿNv ÿU@ þ± þ þIþ%Jp
 þ
* þ! ýM!*µ+Fp
? þ?3þT
 þ± þ
 dP4f@ þ
 þp
 þS
 )J! (+0 DQ þ
 ÿ þfR

 þvþ*a30
?m[+c ÿE4± ÿ
 þ*%4% þIÿ3
 þf()N
p
? þ
.1v ÿ3ýM! · O
 þ7(
?pþ8v ÿ
@ þO
 þÿg ý?F@ þI4'C
0 þþ*%! þ!*%+Fp
? þÿpþ± þ[?pþY
 ÿ
23p
 þ>?0f@þ± þE`_a
:
 ÿ®(i44*6I4Iv ÿZ()
I'p
3 þ	?Å  ÆùÇ È!qhiT$p
? þC@ þp
 þ?34®4&
 ÿM(i3 ÿpý j 
a þþ
 ý4?PkI+F? j 
P0 þþ>r · ü7!^kl
{Íp
? þÿX@ þ± þ_a
 ÿ®()24*<IM
 þ'm
 þ
30 þ	(F ÿpþ	P@ þ¯þ*6+Fp
? þ þ	± ÿ j þk
4a4 þ5?pþ þ84[R
 þ;K/44 ÿZhBÅ  ÆùÇ«È7lE!QT$p
? þ@ þI@ þ8;+-C+A/['	@ þ'± þI3
Eî
? þ!
·
|,4?pþ5@ þ3M ÿ	'?3þL@ þ þ7 ÿv ÿpýIr ü8hil-± ÿK
?M1 þ>± ÿ?pþf þ7 ÿv ÿpý8R
 þ'F± ÿK þ± þ()
 ýv ÿµ*t>±. þþ®?pþP@ þ3Q(5 þ ÿ ÿpý	03MN@þ04L?pþr · üIhiElQv ÿO

 þP?pþ7+-d'Y_om?pþ
þd!Ø{Í?n
 ÿpþòþo/
 þ4 ÿµ*$?pþ
0v þþG ýE?PCv ÿ#?04@ þ
 ÿÓk
_ ÿ
 ^a`y`L'Ep
3 þîþ

POdRQK^^^ qd'B< BE~59^'B^¢ d~BTo'$BO\iB'8[E\NmV\iB'E&d^iB\B^NV~^-B~Tl
~EE%B-B\6E\^^'E\^bQEé1B6^B5~;EE^BB5J\~pB~[BE

¨Oµª$

ª

T
"

D



"
y
y



y
T
y



"

D

y


M
T
y
y


M
y
"
y

mknpokmkq



T
y
T

M
"
y
y

M
y
T
y

M
"

D

y


T
y
y

0M
y
"
y

M
T
y
T

Tg0þPv­FT$?3þ'±ÿÿR(i33ÿ
4ÿR()8ý±þÿs<]^8r · üz04±ÿµ!YTF?pþ\+F8
@þ'%ÿZ'Gþ
 ÿY?pþL
43Ì
±
 ÿ0$
@ þ'% ÿ	'7344 ý±þÿ$
4ÿ!

vÿ'/3
þm1mvþÿvÿpýM!T$?pþPý4?PN?8@þãÿM7
0þþCP4'Y_kÿ(i4þOþ!
üÐÿI ý?0Ø?0O_kÿO4/±
 ÿI ÿ4>'p
3 þ?þ6
± ÿ@ þ'4± þ5?pþ þ)þE6v ÿßþ?pþ6(°?pþ5;+-
+A/X
! üÐÿCv ý?É?5M
 þ
 ÿ,_kÿ04k
 þE9-k
_ ÿ0,(i4 þ[ ÿpþ-@ þË13@ þ-@ þ[@ þ''E4
þ
þ6
 þ'43M ÿV!tc ÿ804
32*6
± ÿ ÿ>
 þ53@ þI+F?8?pþA_0OÌþ?M1I()6@ þ'41v ÿ3ýTþ*
+F?2
?>
 ÿ04't(
?M1v ÿ3ý[± ÿM?3þg þ7 ÿv ÿpý$R
 þ'd!gT$3
? þ9 ý4?PV?0g@ þA'3
3 ÿ0L03MjÿM

0v þþChi
± ÿSk
_ ÿU()4@ þÜþl5@ þ8d± þ4Y
3M3!F+c ÿU?pþf+-*0?pþUK@ þ
PÌ
 þÿ
2v ÿpýPPv þ ÿv ÿpýIR
 þ'$+fp
? þÿYv ÿ	(i
$?pþLR
 þ'fP	R
 þL( þL'04!
Ò þ()@þ$@þ@þÿvÿ3ý[?3þ$vÿ
@þOþÿMý4?P*+þA_0'Oþþÿ<vý?PO()<'Mþ±þ':

`_a
4ÿ7()¸

E?µ!6T$?pþþ5ýE?PgMcÿM63Ìþ9?<vþÿvÿpý[?g1

3@þµ*±ÿ8?pþ
04P'4%30 ÿ!6T$p
? þ	@ þL þÐý±þÿ3þ,'h ÿM544@ þ	(bf þ ÿv ÿ3ýlE*03Avþ?
 þe
 þÿ*
?± ÿK3Fv ÿ
@ þÌ
 þÿVv ý?P!

}½ ÈÜgieºhÀ.Áf]$^_hS9e Á]vÉBÉT;«ÅHÑ  Åg[F]{Ái[e^æ¾®É	Ä$ekgi[Á%ïÂóÆPÃ ekg­¾®ÉyÉ8Èº[ÁJÀ_]{Á[ek^ÒÆ

ûºb

rM-40þÌþÿÿþeC
þÿ
*2/(a3M9ý?63Oþ5?0,r · üf,@þ5@þ@þ@þÿþP30vÿpý
70 þF(J?pþF'± ÿ0 ÿ()3
3 ÿ0
 ÿVU1h  (Mè ^/l,
Ç  . *+F?04
?O
 þ± ÿ9?9()5'þ ( *1./vÿpýI
ÿ
^X þ' ÿpþo1'þ . *5P?M\W+ ÿ#v ÿ#Tg0 þRv!n"$\+F
 þ'% ÿX'W'þC±ÿ#
430Ìÿ

@ þ° ÿ0W'834 ý±þÿ
 ÿ!T$?2>@ þ0@ þ þÿ ÿX4ß
 þË34 þÿ>'m?pþK þ/432
vÿ3± þQ@ þ0@ þ þÿ ÿY(OrO ý3M@ þFÛP± ÿ×
 >1!<c ÿK02
34*MTg0 þPvL4?
 þË13 þÿ5'P?pþ>r · ü
vÿGrO ý3M@ þP>(bQ?pþ4± ÿ0p
 þN ý±þÿLs,!°c ÿmTta þCv*t'þL@ þ þ14þG1U?pþ4F_0E'[vþ'þ*
±ÿC?pþL834 ý±þÿ5
 ÿ5@ þL0@ þ/4þC?pþ-_0'Aþ'þ!,rML
 þoM0 þ* j 
kÌ
 þ± ÿ
ý±þÿ7rn±. þ7
4 ÿÓhirt:  4 þ
ElE*gc[±. þCh)cp: g þ
 þ4± þ\lE*O± ÿ0Rs#±. þ	hisµ: Á E± ÿPElE!T$3
? þ0 þ

 ÿ2'<º
( þÿ' þ9(b9?pþTÿ3þo1-'þ*M! þ!*14,
@ þ'% ÿ06'7?3þF'± ÿ ÿ(i3
3 ÿ
 ÿVj
! ü j yk8v ÿ
?pþf0 þQO
 þ± ÿ9?9?3þ@ þf4 ÿM8°0 þA'± ÿ0 ÿ(b-?49'þ:;
 ÿK04!6c
³ ÿpþf43 ÿ
v ÿm+F?04
?m?2N1

3L4Q+F3
? þÿR± ÿR
 ÿZ4c
 ÿM>44d
+ þ(bÔY'þ!KÎ- ÿ43
 þL± ÿïþo/P0 þ
3 þ(9?pþ0 þP()PL()L
_ ÿþ:;'þ3'P/! üf

0v ÿpýY'Y?3þ_0'hi3R
 þL þ(bP'El
þÿ'v ÿTta þYv*g4(9sq2Lv ÿ'þCT$W
" ü[H · ÊUc~T$T5c~HQÙÔh j T$klQ± ÿRrÍ±. þ8
 ÿZrJ:;
2 þ
*tc
±. þIcp:B@ þ
 þ± þ*<± ÿZsÓ±. þsV:B'± ÿh)+F?2
?R'±ý±þ?3þP4>834 ý±þÿ7
4 ÿ j 
klE*6?pþÿ
s´+f449'± ÿ4 ÿX'RP"F|AÎA|<1c :[cHNÙÚh j "FklP'þ*5! þ!
* U1hiTN*,
ElÇ "L!<{Í?X?4Ia34
@þ þ þÿ4 ÿµv
* V\Å·Æ KH=I 4$4a þO
 þÿþK$R
 þ3Ma ÿhi73M4 ÿal-R
 þ'F?0F
?± ÿ3ý±þ
Z0 þîþÿ'#'X± ÿM?pþ	± ÿ0MPX
?M@ þÿÓ4p
3 þS(b	?pþòÿpþo/C'þ! ³[R
 þ'®
 V H=I  4C
Rþ3Ma ÿR
 þ'-?-
E?± ÿpý±þ-7
y þÿ''8I
 ÿpþo1-'þQ@ þMPR
 þ ÿpýLv ÿP?09\+L!
rMI
 þo/a þ_
* ý±þÿ3þ4}v ÿ3ýC?3þP'± ÿ4 ÿ
 ÿ4 ÿR ÿpý þp
 ý±þmhiTN*^"[lN
± ÿRR
 þP

042p
? þ
1
?± ÿ3ýv ÿpý8 ÿpþf(J?pþ[yA'I± ÿ	"v ÿ?pþF_a',d+Í(JTg0 þIv!<T$?494,R
 þ
3@ þf?pþ['± ÿ ÿ

 ÿ4 ÿI'/
4þ+F?ßþp
 ý±þ>hiTL*^"[lg4g?pþ$ þ6(°4/7304 ý±þÿ<
 ÿ6?6'E± ÿ ÿ7()

¨Oµì

í[î

t}-m{t/s$q

í

os0ïðptÊ{añ

l ñqMð î
í a

¨

W ¢%´´	ª» P
» [ ¯¬ ¡ Z\L]_^"\!®PX  ¬ %
¢ ¼Â	ªHa`¾» ®Á¯²® 
 » ­« ¬ ®PX b W ¤c`#\ 
® X ª ¯ ZY ¯±  ¬²® 
¯ ±  ¬²®edgf
h X  ¬N®PX  
» ´	 « ºÃ» ®PX  «  ®  ¯¬ » « ®«  ¬ »_s
¯ ° ± \ « P
® X ¼`#\I¼`» 
¯ °z° ´	0¡l¢ ® » ®Á¯²®  »ei ¦ ç i_jkalnmomplqi_jr è ¯¬ ¡ 
04²¡Ã¢2´	0¡l¢ ®
`#\H ¯  X ´	20¡Ã¢ ® » ®Á¯²® ti ¦
« ` ¯°z° i j ^ l t\vd/\ Yw[
 ¬ ¡ «`
`#\ ¯  X ¼¢ ° ®« ¯±  ¬²®Z¯
« ` µ!| ç i j ^ l x{z è ¦
 ° » |\µ i?[ x{z ¶
 ¬ ¡a`#\
 ¬ ¡`#\
 ¬ ¡*´	204¡l¢

¨

k lnmomplqi j r è ¡ª
çi j u
«­¬ª« ®« ¯° » ®Á¯²® »[ ®PX  ¬ i

¯ 

«» ¯

´	20¡Ã¢ ®V«­¬	« ®« ¯° » ®Á¯²® 

 ®«  ¬yx{z ¡ª
® X  ¬y| ç i
l x{z è ¦
¦
¶ `#\H»Ã¼` d [ Z\}d~\ Yw[ P
a
j
k
_
j
r
i
[
[
[
i
[

µ!|\µ
x{z ¶ fpfof \
| µ
x{z ¶Á¶4¸ ¬ ¡ « `

©

¨

©

rOý3MþPvv­;VM]_^a` u âÌèQ/3
$ý4?K!
T´'	"L*°!þ!*  
*%$à7vÿSTt0vþv!FT$?2$þf2Lþo/@þþSvÿUÒ-1þ±ÿGý±þ8h)cp:B@þ
þ±þP
sµ:B'E± ÿPElQhi@þþ>rOý3M@þ¦>lE!
rM,
Å  (	K
 6
Å '2 

3 *V'[±þ`_°
ÿL?pþ-7304ý±þÿJ/3
tr · ü&ÅîÿpþþJ'
Rþ$()O
 þ(bÉ?pþ[v ÿ/430 ý±þÿ5r · üfQhi þþQrgv ý3M@ þ7vdlE!6ï
{ þQ
± ÿ	40v þO
 þÿ,?pþf ýE?
VM]_^a` u âÌèL()T ý±þÿ3þvÿpýC?pþ8/3
Fr · ü 30v ÿpýP?3þ7	''30
3M@ þ>(<Tg0 þ	v8f?dW+ ÿGv ÿ
rO ý3M@ þSvv!K+c ÿW?pþ130
>r · ü>*t± ÿ þoM0 þ/3
>'þ	± ÿW'± ÿ4 ÿR4~
 U1hBÎA"OTN*gMEl
ÇÉDQD["¸R
 þ
3@ þU1hBÎ[*µMEl[Ç D8w
* U1hi"L*µMEl[Ç D8*µ± ÿ}
 UhiTL*%ElfÇÜ"¸()Q ý±þÿNr-*%cE*%± ÿGs<*
@ þ'R
 þ
± þ4!mTFp
? þC ÿ4<þ($?pþ	/3
8r · ü @ þC(bEO
 þ®Rþvÿpým+Fp
? þ?pþß
 þ± þ
v ÿ0123V'þ(-?pþI/3
Q4N±
 ÿv ÿ04Jþ!IrÜ
 þo/P0 þ*V(,D8*VD8*V± ÿ"  þPv ÿ4
'þ[()[r-*0c*a± ÿ0Ss,*0@ þ'R
 þ
± þ4*0?pþÿGDQD["¸+f44%R
 þ>± ÿGv ÿ4µþ8()fr  c  s<
! üF()þ
()Pv ÿpýW?pþU130
'þK± ÿÓ'R
 þ
(b/v ÿpý+f?4
?Ó@ þmv ÿ4B*,?pþm ý?0 (LrO ý3M@ þ®vv
'R
 þ
`$
_ þA?3þ~U7'± ÿ4 ÿ	(bL
 þ± þC0103
5'þ7± ÿU7344 ý±þÿ$
4 ÿµ!
HfþP?L?3þP ý?Ð ÿrgv ý3M@ þKvv()PN?pþ0103
[r · üzÅn()Lþ'vÿ3ýK+c ÿE4± ÿ
 þ
R
 þvþ!CTtUþ8rO~:;L
" þ'% ÿ þ0R
 þþ>30v ÿpý\ü6TÉ± þ`_a
4 ÿµ*t
+ þÉÿ3þþR'G(b?pþ
·
/3
-r ü«Å   È!<TtM8?4-4048 þË34@ þ9
 ÿ04p
 þ ÿpý  È«'IR
 þf?3þIyh U&vdl'5ý±þÿ!
T$p
? þG ý?0 v ÿÓrO ý3M@ þXvvS2/`k
_ þ#1#
?± ÿpý ÿpý"U=' U}Év þ± þ+fp
? þ@ þ!«cp	4C4'
4%±ÿ$'¯ÿMþ>?0[vÿ×^a`y`<43 ÿ8hiv ÿ
430v ÿpý
Å  (1NHOI M lEv
* qVJ]_^@` u âÌè>83'fRþÜþ
o þ
3þ
'U()?pþP/3
7Å   È ?
( ü6T ± þ_a
 ÿW2L'YR
 þM ÿ3þ!c ÿ®
Å  (1H=I,J *<Å4 @ 3L?pþ
v ÿ3ý þP ý±þÿ8r · ü±± ÿX
 U#4v!rMP
Å  (	
 
* U#Ç vP4'M!Cc ÿ?pþ>+-*J()I
Å  (	
 ?pþ
834 ý±þÿ504± ÿµ*1 ÿ
 þN()O
 þµ*2
 ÿ3þ± þF3Mµ/4p
 þ± ÿ	?pþ@ þ()@ þL5
34	R
 þQ
 ÿ43
 þ@ þK4±. þ
Cv ÿpý þ8 ý±þÿQ02± ÿµ!$c ÿU%?S(<?pþ þ
 þ*µ
( ü6T«± þ_a
 ÿG4f ÿpþ7?3þ>/3
[4f±. þÿ
(O?pþLv ÿ3ý þQ04± ÿKr · ü«± ÿK?pþL0R
 þ;	r · ü>!
ÙQ4± þÿ?<?pþF/3
6r · üÓ?06R
 þþÿI(bÌ
 þPk
( ÿ3þþp
 þµ*?3þÿI?pþ5k
_ ÿVhi83)l ý±þÿ,r · ü

± ÿRR
 þ± þ$
_ þµ!ï
{ þP_a'L
 ÿ2p
 þ>K± þ20 þI/p
 þ<
3
? þ
./v ÿpýU ýE?K*J
2 þG
 VM]_^a`yì*
4 þ&'R
 þ
`_a
4()± þ()/v ÿpýG+c ÿE4± ÿ
 þ	R
 þþ8(f?pþK(bE
 ]  )t!ZT$p
? þK ýE?K*
?M\W
+ ÿ ÿPrO ý3M@ þ>vÛ1*M
 ÿ4'<(V>p
 þ?/:_0E',þ
E?(tÅR
 þýv ÿ3ÿv ÿ3ýQ ÿOþ
?	v ÿ44M'þX
! üÐÿ


 þ40 þF' ^ á%?-4606(µ>'± ÿ4 ÿ
 ÿ ÿV*+Fp
? þ@ þÛ^aáïÖq)J*/4þ,?pþ$
 þ;!
h)ï
{ þ7'@ þL?pþL þF(O2µ'PR
 ^aáÖq)U()$04K

 þ! l

¨OµJL

ª

mknpokmkq

H204¡l¢ 
¹ 	 « `
`#\H ¯  X » ®Á¯²® ti~ ç!#è ¡%
¹ « » « ® ¡ µ i ¶2
 ¬ ¡`#\
`#\H ¯  XJ«­¬ª« ®« ¯° » ®Á¯²® tiJ ç!#è ¡%
« ` µ ¹ « » « ® ¡ µ i ¶Z2%¶ ®PX  ¬ ¡`#» µ i ¶ ¸  ¬ ¡
 ¬ ¡`#\
 ¬ ¡*´	0 ¡l¢%2
H204¡l¢ ¡`#» µ i ¶
¹ « » « ® ¡ µ i ¶¸
`#\H ¯  X8¯²® Ã¼ x{z  çWè [ x{zV [0¡ª
« ` | ç i
l x z è¦  8®PX  ¬ ´ª «­¬²® ª « ºl ¯²®« 
 ¬ ¡`#\
`#\H ¯  X8¯²® Ã¼ x z  çWè » ®e ¦ | ç i8l x z è
« ` µ! ¦ 
¶ ¯¬ ¡ µ ¹ « » « ® ²¡ µ! ¶Z*%¶ ®PX
 ¬ ¡`#\
 ¬ ¡*´	0 ¡l¢%2

©

©

«`

¬ 	I\ ¸  ¬ ¡ « `
¡ ¡%
¯¬ 6
 ¬ 
¡ `#» µ ¶4¸  ¬ ¡ « `

rOý3M@þPvÛ1­qVJ]_^@`	ìQ±þE`_a
ÿYvý?K!
H þo15+þL
ÿ2pþ5±ÿKý? ()5±þ()1ÿpý.^@UWÑP0Rþ;P+f?MþcÿpþýÿY2-þo/@þ0þ
T
N	Òk3j 
?Or · ü7*µvÿ
430vÿpýPrO'~:;"Wþ'%ÿþ8Rþþ!QTF?pþI@þpþNPS+F4?S'K@þ/þ+¸?pþ
? ý?M:; þ± þp
 þ
4ÿ[(/?4ºü6TWP1pþ
E?pþ
./vÿpýfý?Í0@þþÿþ>vÿ · 30þ
ÿ9>1!>ARþ()@þ

 ÿvÿ30v ÿpýM!Orgv ý3M@ þQv >Ðý± þ6[04
-± þ4 ÿ7(a?4O ý4?«(b Î-3
3MR
 þ4j
 þ6!Ah~vwwÛl
±ÿP×f}P± ÿ$ÿOþ,!$h~vww ClE! (( ï
{ þ[
4M?46v ý? qVJ]_^@`!RYR
 þ
3 þF<26'03M':
?pþ@ þ2
L± þ`_°
 ÿµ!9W
" þ
4V?0Fvÿ\ü6TØ13
 þV
p
? þ
.1 ÿpýM*0?pþ>R
 þ;K4$@ þ@ þ þÿþUf± ÿ
r · ü7*1± ÿ	'./v ÿpý7+Fp
? þ?pþ$ÅqÆ ÇÈ«2X
 þË13 þÿ,''./v ÿpý>+fp
? þ?pþ & hBÅ,
l Ù & hiÈ8l<()AR
 þp
È!YT$?04L4
 þË34 þÿL' & hBÅ<Ô
l u & hiÈ7l8Ç Ô1*O+F?2
?W2L ý?0P4
4Gþ'þZ./v ÿpýS?pþ
þÿ'50103
,(t?pþQ04±
 ÿ	r · ü´± ÿ	?pþQr · ü=
@ þ'% ÿv ÿ3ý>'  È!6c( & hBÅ   È7lAÇ Ô7?pþÿ
l Ù & hiÈ7lE*/! þ!*MÅqÆ ÇÍÈ=± ÿ± þ`_°
 ÿ30

 þþ ?1?pþ+F4@ þ*M
Å ÆùÇÈØ± ÿ± þ`_a
4 ÿP(i44!
& hBÅ<Z
T$p
? þQ ý4?Ü(grO ý3M@ þIv >83O
 þ-?A?pþYÿpþý ÿ	(t?pþ[R
 þ;Gh  È7l,4
 þo1 þ þ	
P*
Ò 3j 
E?V3M'P'ÿS± ÿK?pþ7r · ü=R
 þv ÿpý þE
p
? þS4FÅ   ÈP!
ü[ ý?0 qVJ]_^@`!R<*Vv ÿGrgv ý3M@ þ	
v >1*J
34S
p
? þ
.1N+fp
? þ?pþ>Å ÆùÇ¶È ()L± ÿSR
 þpUÈ!
TtP
p
? þ
.C(O
Å ÆùÇÍÈ*M
+ þN
± ÿYp
 þþP ÿpþf+fp
? þ?pþ & hBÅ   È7¦
l º
Ç ù Ô1!,TF?4-4-'p
3 þN(V?pþ þQ25'O
 þ
j 0km'þKv ÿ m hBÅ   È7lN þ
?0v þC()Ú± ÿXv ÿ2,'þY± ÿZ@ þ
E?0 þ	()Úþ(*<! þ!*
09(J± ÿC

 þ0v þf
/
 þ[± ÿ0P?pþ@ þ()@ þ[12þ ÿ/k
_ ÿþ4>()þÿµ!,T$p
? þf ý?É(VrO ý3M@ þ8v >
Rþ()P6?2<
p
? þ
.3v ÿpýL
 ÿ3þ'þp
 þ0?/:_0'9þ
? ÿP?3þF/3
<r · ü=Å   È!6T$p
? þ$_0'
 þ?M:_0'F@þ
?GR
p
 þýv ÿffvÿ44V'þQ± ÿS12F2J

 þ40 þ7þ!F{Íp
? þÿpþ± þNC'þ
Þ¦Ü m hBÅ   È7l-254
\± þ@ þµ*0$25
4 þY j  þþV*^k± ÿYO
 ÿ3þ'þU þE
?YR
 þýv ÿ09'C1.()f

/
 þ7?0f@þ3 ÿ$'C?pþI þþµ!fcp(6?pþ þ84[C
1
 þ*°?4[4a4 þA?pþ m hBÅ   È7lLhi@ þþalf'þ

± ÿmR
 þ>/4þGv ÿ/
_ ÿþ	()þÿµ*V± ÿS?pþ@ þ()@ þI?pþ4± ÿpý3 ý±þ4Ð
 ÿM ÿpþ0;®hiB! þ!*°?3þ@ þ4Q'O
 þ

 ÿS þË3
3 þÿ
 þLv ÿK?pþNa4± ÿ	?FM
 þL
 ÿMf4'()?3þNR
 þ;l-± ÿK± þE`_a
 ÿK(i44!
°Þ%^6^EBB\n^O~L^LB;m%~^Tl2NmV7d^LidiB~= Ag ~$MNrOr¢;`U5\To'B^Bm%EO$E\<B
Bt\^^'FE^BB&é`JB~^^)\EW
 m%E%é EJ1 w5é`VBO'
 mVBg^V^J\^;^OB-E
é BVBï
 o\BiJBT o'B^QB'aÞ%^V5\T o'B^Q$~%Bg~iB'F'E^ oBiJ^[\B'\dB<dé`~

¨Oµx

í[î

t}-m{t/s$q

í

os0ïðptÊ{añ

l ñqMð î
í a

H204¡l¢ 
¹ 	 « `
`#\H ¯  X » ®Á¯²® ti~ ç!¡c¢,£Wè ¡ª
¹ « » « ® ¡ µ i ¶2
 ¬ ¡`#\
`#\H ¯  XJ«­¬ª« ®« ¯° » ®Á¯²® tiJ ç!¡¤¢,£Wè ª
¡ 
`« µ ¹ « » « ® ¡ µ i ¶Z2%¶ ®PX  ¬ ¡`#» µ i  
¶ ¸  ¬ ¡ «`
 ¬ ¡`#\
 ¬ ¡*´	0 ¡l¢%2
H204¡l¢ ¡`#» µ i ¶
¹ « » « ® ¡ µ i ¶¸
« `,iBM¥ ç!B¡¤¢,£Wè ®PX  ¬
»Á ²¡  i ¸
`#\ ¯  X » ®Á¯²® tiJB ç!B¡¤¢,£Wè ¡%
¹ « » « ® ¡§¦ µ i ¶*
 ¬ ¡a`#\
¬ ¡`#» µ i ¶
 ¬ ¡ «`
`#\H ¯  X »4¢   »»Á\ µ«of  f [ ¬ À ® » ®Á¯²®  ¶  a`i¡ª
« ` µ ¹ « » « ® ¡ µ ¶Z*%¶ ®PX  ¬ ¡`#» µ ¶4¸  ¬ ¡ « `
 ¬ ¡`#\
 ¬ ¡*´	0 ¡l¢%2
H204¡l¢ ¬ ¡a`#» µ i ¶ ¨ª©®PX  ¬  » ® ¡» ¯ 2 XJ©ª¨
¹ « » « ® ¡§¦ µ i ¶%¸
`#\H ¯  X »4¢   »»Á\ µ«of  f [ ¬ À ® » ®Á¯²®  ¶  a`i¡ª
  « ºl ¯²®«  ¬ 	I2\© ¸
« ` µ! Z »Á¡ ¶ ®PX  ¬ ´	 «­¬²®P¨¯ ¡eP °  f ª
Â	 ¯§ª
 ° »Á « ` µ ¹ « » « ® ²¡=¦ µ ¶Z*%¶ ®PX  ¬e¬ ¡a`#» µ ¶ ¸  ¬ ¡ « `
 ¬ ¡ «`
 ¬ ¡`#\
 ¬ ¡*´	0 ¡l¢%2

rOý3M@þPv>1­;VM]1^@`gR±þ_a
ÿYýE?K!

¨Oµë

ª

mknpokmkq

¨

W %
¢ ´´	ª» ®PX ª ¯ ZY ¯±  ¬²® »[ ¯¬ ¡ ¯±  ¬®«w¬.¯ »_¼`0¡ « ºÃ²¡
[ t\­«-\ Y f
® ´		 ¯²® \R¯u°²±_³ ru´Pµ ¼`0¡ « ºÃ²¡ |\µ i z [ x ³n¶P³¸·T¹ ¶ ® *Â	  z»º #` \H» ®Á¯²® ti z ¯¬ ¡*
¼ ¢ ° ®« ¯±  ¬®Z¯  ®«  ¬yx ³T¶P³¸·T¹ f
\L]^"\®PX  ¬ ¢¼Â		`ú» ®Á¯²®  » «­¬ ®PX b W ¤¤`#\ ¯±  ¬#
® d@f
h X  ¬N®PX  ¯° ± \ « ®PX ¼ « »_s

¨

04²¡Ã¢2´	0¡l¢ ®
`#\H ¯  X ´	20¡Ã¢ ® » ®Á¯²® ti ¦ ç i juk lnmompmol¼i z lnmompmol¼i jr è `#\I¼`²¡½`Øl¼D»
« ` µ»| ç i j ^ l x ³n¶P³¸·T¹ è ¦ ¦
¶ `#\H»Ã¼` d [ Z\}d~\ Yw[ ®PX  ¬"|
 ° »Á |\µ i8[ x ³T¶P³·P¹ ¶ µ!|\µ i j k [ x ³T¶P³¸·T¹ ¶ [ fofpf [ #z!º [ fofpf [ |\µ i j r [ x
 ¬ ¡`#\
 ¬ ¡*´	204¡l¢

©

rOý3M@þPvM­Z

¨

®Á¯²® Zi z ¡ª
ç i
l x ³T¶P³¸·T¹ è ¦
³T¶P³¸·T¹ ¶Á¶ ¸  ¬ ¡ « `

©

UW[ u âÌèQ/3
5ý4?K!

VM]_^a`yì<± ÿ0B VM]_^a`R@þ933ÿ>±ÿ0>
0vþþ[h)()ï^@UWÑ[Rþ;Q+F?þXÿpþýÿ84#þo1þ~:
0vþQ[PÒ*3j 
E?Jr · üNlE*0±ÿU?pþC_kÿK4µ±þE`_a
ÿîþ!-Òþ(b@þIþ4%vÿpýÿU?4*_0'
ÿMþN?5?3þNþ
j ±þ`_a
4ÿ þkI?50`þþÿ5
ÿ3ÿM4ÿK(b°qVJ]_^@`	ìQ±ÿ­qVJ]_^@`»R<!
rM¦
 VM]1^@`yì± ÿïþ>2L± ÿR

 þ40 þ0R' hi! þ!*t± ÿZ' ^Ö)Z+Fp
? þ@ þ?pþ0R
 þ;m4
]  )%lE!$rM
 VM]1^@` g F4f± ÿU

 þ0 þ70U'þ8?Q4$a$(<C
1
 þ!$TFp
? þL@ þ' ÿ×VM]_^a` ì
4A'3
3 ÿ0C29?0$Zba ý5)
 þE9 ÿ0P?M þL'Û
 ^¬Ö)J!6cp$2-
P0 þþN± ÿCk
_ ÿ094
 þ
Rþ
3 þ[9M
 þ
 þo/?03'± þ[ þ
?	± ÿþ'vÿ3ý7(V4°

 þ40 þf'
! VM]1^@`gm4-4'73
3 ÿ
 ÿK
a þþ*()F± ÿ± ý3$@ þ' ÿ!9±
Ò þ
30 þBVM]_^a`yìN± ÿ­
 VM]_^a`Rmk
_ ÿK4R
 þ*/?pþK
± ÿ
Rþ-30 þ>+f?þ4?pþ6O
 þ?M/7$
( þO@ þ'43 ÿChiB! þ!*
?M1 þ$± ÿM?pþOR
 þ'6g_o>?3þ-r · üNlE!
MÅ@ÂóÅ^Á]vÉ¾®É	Ä$ekgi[Á%ïÂóÆ|Ã e$g \V Å·Æ  KH=I

ûºbFE¾^Zg

¾®ÉyÉ È[ÁJÀ_]{Á[ek^ÒÆ

]$^_h

ü[4µ(6?pþ8ý?FvÿK?3þ>@þ/3F3M0þ
4ÿU
±ÿSþ7''@þP4ÿpþ ý±þÿS?f4f45.ÿM\+Wÿ
?N	þÿÿpýRþ'hivÿS?4[
þ*V\Å·Æ JH=I lf?[RþþÿG004þµ!QrML2044
4;*a2t(,3M
 ý4?P83Oþ®V\Å·Æ KH=I 4802þR'GvÿpýþC' hi7304ý±þÿI
4ÿalE!rMOþo/P0þ*
+þI3O
 þ8?N
( U1h Já è ^  è , l$Ç 3 áp*%?pþÿGV\Å·Æ KH=I ¿h Uh Má è ^  è , l'l$Ç 3 á  +fp
? þ@ þ 3 á,± ÿ 3 á  @ þ
'þCh)7y/*t20/v ÿpýfÿM\
 ÿpþo/L'þ\lE*g± ÿ0X
 ^  è   4NY834 ý±þÿL
 ÿµ! ·  ÿ
 þI+ þ30 þ?pþ
0325@ þ@ þ þÿ ÿµ*0?4A'± ÿ4þ$'
E?± ÿpýv ÿ3ý ÿpþL0 þcþÿ'!
rO ý3M þ>v7?d+F9± ÿv ÿ
 þO
 þÿ± þ ÿz
( qVJ]_^@` a âÌè*1
4 þP
 aUW[ a âÌè*1+F?4
E?P462@ þ()
@þ:B()Pv ÿ3ý?pþ7/3
Fr · ü ()þB
 V\Å·Æ JH=I ?fR
 þþÿSa4 þµ!$T$3
? þ> ý?0 (,rO ý3@ þv	4
(),c ÿ4± ÿ
 þFR
 þþ ?(b
 ü6T#± þ_a
 ÿ
E?± ÿpý±þ²UK'EU½RvFv ÿ?pþ[ ý?Ü± ÿ3O
 þ
?  UW[ u âÌèN45024
0 þQv ÿK4µ43 ÿA+F3
? þÿK.1 ÿpý?pþ
 È 2A?pþyh UÀÍvdl'Fý±þÿ!-ü[·?M33 ý§
/3
5+f?	?pþL
 þ;	r ü>*?3þL44 ÿU(bfp
 þ± þ0v ÿ3ý?4$ ýE?z+A
?pþN834 ý±þÿFÅR 
K
 !<W
" þ
4°?5vÿC?4-34 ÿµz
* þ± þ4Ì
 þ[ þ7 ÿv ÿpý84A04 þ'
·
 ÿmv ÿ41403µ ý±þÿ7r ü>*°?pþI/3
Q730'fRþIÕÖ:B()O
±
 þG'K± þ()\
 ý0g
 þþ!QT$p
? þ
+A'þU
'F(Ov ÿpýI?4$PþY?pþ>p
 þ± þaO
 þÿF(t?2$ ý?0K!
ü[ ý?0
 UW[ u âÌèU3O
 þ??3þS130
P+-()O
 þÓ ýv ÿ2nh)R
 þ()@ þS þ7 ÿv ÿpýl
3 ÿpý´VM]_^a` u âÌè±
!  UW[ u âÌèC
04} þ> ÿ®?pþ
. ÿMd+f þp
 ý±þC(5+F?Khiv ÿ/430tI834 ý±þÿEl
'þqh MáBl± ÿ0n832 ý±þÿK
 ÿ yh ^  è , l'± ÿ ÿÓ'X ÿpþ+ ÿpþo/K'þK'R
 þ
`$
_ þÓ
·
R
 þ'2
 V\Å·Æ KHOI !OT$?46 ýE?¶30O
 þO?<?pþ50@ þ þ ÿ ÿpýF130
Or ün46'' þµ!6T$p
? þÿ
?pþ ÿ4S130
Qr · ü 'þ>+F?M þÌÿpþo/L'þfÿpþþQ'YR
 þP/`$
_ þm@ þ? þ'þ>?

¨=ÎK©

í[î

t}-m{t/s$q

í

os0ïðptÊ{añ

l ñqMð î
í a

04²¡Ã¢2´	0¡l¢ ®
 ç!#è ÂÁÃ¸
#` \H ¯  X ´	20¡Ã¢ ® » ®Á¯²® ti ¦ ç i_jukulnmompmol¼i z lnmompmol¼i_jr è `#\I¼`²¡½`Øl¼D» ®Á¯²® Zi z ¡ª
« `¹ « » « ® ²¡ µ i ¶ ®PX  ¬  !ç #è   ç»#èeÃÄ i
Å ¸  ¬ ¡ « `
« ` µ»| ç i j ^ l x ³n¶P³¸·T¹ è ¦ ¦
¶ `#\H»Ã¼` d [ Z\}d~\ Yw[ ®PX  ¬"| ç i
l x ³T¶P³¸·T¹ è ¦
T
³
P
¶

³
P
·
¹
 ° »Á |\µ i8[ x
¶ !µ |\µ i j ku[ x ³T¶P³¸·T¹ ¶ [ fofpf [ #z º [ fpfof [ |\µ i j r@[ x ³T¶P³·P¹ ¶¶4¸  ¬ ¡ « `
 ¬ ¡`#\
 ¬ ¡*´	204¡l¢

©

rOý3M@þPvx1­

UW[ u âÌè Æ ì

¨

130
tý4?K­J[4ÿ8(zaUW[

©

u âè9?½ý±þÿpþ+&vÿ04'þ!

v ÿ
23pþ8MáJ±ÿ'±ÿÿPÿ	
ÿ®^  è , !<T$?3þfOþ?M/(bA@þ±þ_a
ÿC?A493Oþ'
()4d+  UW[ u âÌèN4A'V@þ±þE`_a
ÿµ*a!þ!*ÊVM]1^@`yìQÛVM]_^a`»R<!
H þo1*9
 ÿ4p
T
 þ8± ÿM?pþI08(5/3
8±ÿZ@ þ± þ`_a
4 ÿZýE?P7?I4þo/Rþ
þ
'R
 þ*M\± þ4*a°þÿ444É
 þ± þÿS@ þÜþe
v þÿ!AT$p
? þÜýt45'C''@þP4 ÿpþN@ þ± þ`_°
 ÿY()þ
V\Å·Æ KH=I !ST$?2N@ þË13@ þ7U( þ+ 40 þP
E?± ÿpý±þI'G?pþv ý?P!UT$p? þP4 ÿW()7?3þ þ

?0± ÿpý±þ92<?9+Fp
? þÿP/p
 þ
Ep
? þ
./v ÿpý8MdT
+ ÿ''@þÜR
 þþa
* VÅÁÆ JH=I ?< ÿ4 j dW
+ ÿ'@þ
þRþ
*^kI! þ!*6ÿ48Rþ
,?3þ$


 þ024;8(°± þ4
 þ,± ÿ0P'P,4þ@ þP1.
 V\Å·Æ JH=I <? þ
?$+-34	R
 þN/4þ	1C± þ`_a
 ÿZý  ü;¼ 8?M þ>þ þK®
 V\Å·Æ KH=I !
Î- ÿ04p
 þ[?pþP
?0± ÿpý±þ!8ï
{ þP'N1U0324v ÿpýP	 þN(9?pþÎAþ4± ÿG/3
Q'þe
 YÇ
h 
Má
 l7?@

K
þ
)
(





O

þ
X

)
(




Ú

?
p
Y
þ
'



þ
Já[?+APRþ
þq1Z þ7


ÿ

v
p
ÿ
M
ý
®
!
T$p
? þ
èéééè 
( èéééè
_09+A?A+-þN
± ÿ	?MþÿC@ þ± þE`_a
 ÿ	4-13v ÿ3ý>?pþ þN'þ5A?3þÐÿpþ+v ÿ040þ
()>@ þ± þ_a
 ÿµ!Pc ÿR(i
*g+ þãÿ3þþR ÿm þ þ
>?M þ?0L+-þ þ/4þ3v ÿpý	?pþPE ýv ÿ
 þ`_°
 ÿhi! þ!*9@ þK

 þ0 þC(bÌ?3þCE ýv ÿ-v ÿ2,'þElE!Z+c ÿ®?pþ+-*<3M% þ
±
()F ý±þÿqY'v
* V\Å·Æ KHOI /`$
_ þL
 U1h Já è ^  è   lE!9T$p
? þÿ	
+ þN@ þv ÿ24} þ[?pþL þ$(6v ÿ44aþF'PR
 þ
ÔY± ÿ0WZ4<130
>'þ8(bEO
 þR()^
 Má5?8+þ@ þP±. þ j /4þ0kY3M ÿpý	@ þ/3
 þ`_°
 ÿµ!6T$?46
± ÿR
±
 þ$M ÿpþ$1/()1v ÿ3ý[?3þ$/3
< ýE?¶(VrO ý3M þLv7-?MdT
+ ÿPv ÿ
·
rO ý3M@ þPvx1!9T$p
? þL ý4?z(Orgv ý3M@ þPvx4$'P(bEz?pþN/3
$r üØ()$± þ()1 ÿpýI+c ÿE4± ÿ
 þ
R
 þvþ!TJm()¯?pþ	/3
>()O
 ü6T±± þ`_a
4 ÿµ*,3Ma'3Mþ­ahBÅ   È7l>(b|
 °hBÅ<l8± ÿ
yh UÇ´vdlF(b² UWv ÿGrO ý3M@ þCvx1!fï
{ þ
4t?4[v ÿ
 þO
 þÿt/3
[ ý?0  UW[ u âÌè Æ ì *a+fp
? þ@ þ
 þÿMþ$?pþ>()
$?0$+-þ7@ þcý±þ'vÿpýfÿpþ+´v ÿ2°þ!
j HfckP3
T$3
? þP þ
 ÿR+A'G''@þP2v ÿpþI@ þ± þ`_°
 ÿW4Lm ÿG
 ÿ43
 þv ÿpýKY'E± ÿ ÿm ÿZ
:
 ÿ ^  è   *Q?pþR
 ÿ=+F?M þUZ4p
3 þm+AU/`$
_ þn1nv þ ÿv ÿpýM*f(b ?pþ þaÿpþ+Ìv ÿ4
'þ!´TFp
? þ@ þ()þ*$v ÿ
@ þÌ
 þÿF@ þ± þ`_a
4 ÿ#/
 þþã
 þo/
#2±. þY'Ih)@ þ\lp± þ`_a
4 ÿµ!
{Í?W?3þ þC
E?± ÿpý±þ
* qVJ]_^@` ì R
 þ
O
 þ
  UW[ ì Æ ì *<?MdW
+ ÿZv ÿWrO ý3@ þSv C1!msJ±. þ+f4 þ*g+F?R?3þ þ

?0± ÿpý±þZ
 VM]1^@`gmR
 þ
O
 þ°
  UW[R Æ ì*MA?M\W
+ ÿ	v ÿCrgv ý3M@ þIvdÑ!,rO ý3M@ þ8vdÑ8?Md+f9 ÿ0P
?± ÿ3ý±þ
'8/
 þ3M@ þ<()9± ÿP± þ4(b
 ?ÿ0M()946?pþQO
 þ[9 ÿPrO ý3M@ þ8v >1!9Y
³ ÿpþ$
_ ÿ''@þ4v ÿv ÿ3ýLp
 þ
'B UW[$ì Æ ì*03MjÿM UW[g Æ ì*4t?OÿL?3þÿpþ+&v ÿ04'þ,?± þ j /4þkf@ þv ÿ044} þ
'Ky/!NT$?4f
± ÿm
 þ8M ÿpþ8(bQc ÿ4± ÿ0
 þ7
 þþ$R
 þ
3 þI?pþS@ þßÿQ
 ÿ0
 þ ÿpþG+F?S?pþ
+
(
.
p
 þF(g'P[v ÿK''Ev ÿpý!

Ý%d\EyÈnÉ¿ÊËPÌnÍ¸Î$E\-N1mZ'\E7 ÏaÐPÑ¿ÏÒ¢;¦ubé-Ï_ÒÛmµ-^^B~PEP\B~^\9pBo'B^EéO|u)EBE\~
\BE)P `é Bfi;BAB6BEM
 ÏaÐ¢;B~7E^aB5OB6~E8-d^B'7é BpÓ
 ÏÒZm%E8B'8
~~LB~iB'Lé`,B\-dBbZ
 ÔgLBAB<E mV~>B~iB^  Bi} lÍJ~\A\BEB^~6B-;\<é

¨=Î¨

ª

mknpokmkq

04²¡Ã¢2N¹²ª « `
`#\ ¯  X Y ê >«­¬ª« ®« ¯° » ®Á¯²® ti~M ç!#è ¡%
¹ « » « ® ¡ µ i ¶2
 ¬ ¡a`#\
`#\ ¯  X Y ê >«­¬ª« ®« ¯° » ®Á¯²® ti~M ç!#è ¡%
« ` µ ¹ « » « ® ¡ µ i ¶Z2¶ ®PX  ¬ ¡a`#» µ i ¶4¸  ¬ ¡ « `
 ¬ ¡a`#\
 ¬ ¡*´	204¡l¢
04²¡Ã¢2¡a`#» µ i ¶
¹ « » « ® ¡ µ i ¶%¸
[ ¬X 	2  ¦ | ç i
l x ³n¶P³¸·T¹ è [ ®PX  ¬
« `iJ ç!#è ¯¬ ¡  ¦ 
« ` µ!x ³T¶P³¸·T¹ Ç ¶ ®PX  ¬ ´ª «­¬²® ª « ºl ¯²®«  ¬ 	I\ ¸  ¬ ¡ « `
« ` µ ¹ « » « ® ¡ µ ¶Z2¶ ®PX  ¬ ¡`#» µ! ¶4¸  ¬ ¡ « `
 ° »Á
`#\H ¯  X8¯²® Ã¼ x z  çW
 è [ x z V [0¡ª
« ` | ç i
l x z è¦  8®PX  ¬ ´ª «­¬²® ª « ºl ¯²®«  ¬ 	I\ ¸  ¬ ¡ « `
 ¬ ¡`#\
`#\H ¯  X8¯²® Ã¼ x{z  çW
 è » ®e ¦ | ç i8l x{z è ¯¬ ¡6¡%
¡
¹
« ` µ! ¦ 

¯
¬
µ
« » « ® ²¡ µ! ¶Z*%¶ ®PX  ¬ ¡`#» µ ¶4¸  ¬ ¡ « `
¶
 ¬ ¡`#\
 ¬ ¡ «`
 ¬ ¡*´	204¡l¢

©

©

©

rgvý3M@þPvC1­aUW[$ì

Æ

ìQþ±þ`_a
ÿUý?Y!

aUW[Oì Æ ì$2,'33 ÿ0P(),c ÿ4± ÿ
 þfR þþ*± ÿ¬
 aUW[g Æ ì$49'3
3 ÿP(bA±ÿPd+Wÿ'@þ
4@þ
ÿþIRþ;Z+F?Mþ\ÿ3þýÿq4þo/@þ0þ	Ò*3j 
E?$r · ü7*<vÿ
430vÿpýGrg4'~:
" þ° ÿ0 þ± ÿc ÿ4± ÿ
 þO
L
! ü[3v ÿpýYÅ«Æ ÇÉÈz0Q'U041v ÿ3ý«V\Å·Æ KH=I 'Y()Å  *t(<?3þþ
v ÿ

 þO
 þÿ% þ± þ`_a
 ÿKv ý?P5
 ÿ0
43p
 þQ?fÅ  Æ ÇÍÈ*M?3þÿK'µ@ þ± þ_a
 ÿ	+-34
4'K
 ÿ
23p
 þI?7Å  Æ ÇÜÈ!IL
" þ
4O?N'<@ þ± þ`_a
4 ÿ4N'3
3 ÿV!>T$p
? þ@ þ()@ þ*V?3þPO
 þ
4['p
3 þ8()N?pþ þv ÿ
@ þÌ
 þÿO ý4?P!Lr3?pþ þ*°?3þ þPv ÿ
@ þÌ
 þÿg@ þ± þ_a
 ÿm`:
ý?0PP+F24-k
_ ÿ&4F(N?pþîÿpþ+ 144 ÿ(N?3þUR
 þp&v ÿ'130
 þ& V\Å·Æ KHOI !T$p
? þ
@þ' ÿZ?pþC ý?>@ þC'3
3 ÿZ± ÿk
_ ÿ0R4X
 ÿ3þC
+ þEh)()8M\W
+ ÿ''þI@ þ
4 ÿ þ
R
 þvþEl<29?05?pþ@ þN@ þN ÿ;+-+-d15?0$

 þ024;
± ÿ	
 þN/`k
_ þ1± ÿ(t3M
 þ
 ÿ0v ÿpýLR
 þ'*1v ÿ0
43v ÿ3ý²V\Å·Æ JH=I ­6/
4I ý404!6L
" þ
20?A/
0
E?± ÿpý±þNþ9?pþ


 þ4044pY(9' ^  è   N?pþPþÀUh Má è ^  è   lE*J± ÿm¯
 ý0O
E?± ÿpý±þPþQ?3þI

 þ':
a44pU($'þII'P8?>+-34WR
 þP12þÓý  ü;¼ ÕUh Má è ^  è , lE!Yc ÿ ÿpþ4?pþ7
 þhi/

Y
 ý0bl$+F42µ?pþI þ ÿv ÿ3ýR
 þ'N/()	

 þ042;K(,'QQþQ14þUR
 þ()@ þ*
03MÜÿL(bþ
* ^  è , !C³Q3M7 ý?Q@ þ± þ() þoM?3± þ&hi! þ!*J?pþm@ þ± þE(bG>83
?Z
'-@ þ± þ`_°
 ÿW+-34°l[(bI49'PI± ÿZþ7/44þW88()þ|
 ^  è   ! · v ÿ
 þP?3þ þ
v ÿ

 þO
 þÿg ý4?P$R
 þ() @ þ± þ`_°
 ÿîþoM
Y?3þ8Ì
 þ7+AGf?3þF'O± þ ÿ
BE5O^OB~^~EE'907é,Ï Ò m%E6\Bd^E>d^B'^\~A<5^O\E6-~~>^^B~>é BEÏ Ð B\
\\B^FEéa  ÏÐPÑÏ_Ò¢M~\ F\f<,mKiB^;mV^Bf<1mYBZE;\p%Bµ5^°^BgB  Bi}lÍJ~E
\BE)ZÞ%\Bé`B#
 ÏÒ>\~'dfBP>Bd^B'	é`  Bi} lÍt~E7\BpB~Od[\Efé`Equ)EBE\~
\BEB^~~

¨=ÎJµ

í[î

t}-m{t/s$q

í

os0ïðptÊ{añ

l ñqMð î
í a

H204¡l¢ 
¹ 	 « `
`#\H ¯  X » ®Á¯²® ti~ ç!¡c¢,£Wè ¡ª
¹ « » « ® ¡ µ i ¶2
 ¬ ¡`#\
`#\H ¯  X Y ê  «­¬	« ®« ¯° » ®Á¯²® tiJ ç»¡c¢,£Wè
« ` µ ¹ « » « ® ¡ µ i ¶Z2%¶ ®PX  ¬ ¡`#» µ i ¶ ¸  ¬
 ¬ ¡`#\
 ¬ ¡*´	0 ¡l¢%2
H204¡l¢ ¡`#» µ i ¶
¹ « » « ® ¡ µ i ¶¸
« `,iBM¥ ç!B¡¤¢,£Wè ®PX  ¬
»Á ²¡  i ¸
`#\ ¯  X » ®Á¯²® tiJB ç!B¡¤¢,£Wè ¡%
¹ « » « ® ¡§¦ µ i ¶*
 ¬ ¡a`#\
¬ ¡`#» µ i ¶
 ¬ ¡ «`
£ è ¯¬ ¡  ¦  ¯¬ ¡ µ ¹ « » « ® ²¡
« `,iJ ç»¡¤¢,W
¬X 	2  ¦ | ç i
l x ³T¶P³¸·T¹ è [ ®PX  ¬ ¡`#» µ! ¶
 ° »
`#\ ¯  X »4¢ 4»Á»\ µØ«of  f [ ¬ 4À ® » ®Á¯²®  ¶
« ` µ ¹ « » « ® ¡ µ ¶Z2¶ ®PX  ¬ ¡a`#»
 ¬ ¡a`#\
 ¬ ¡ «`
 ¬ ¡*´	0 ¡l¢%2

©

rOý3@þPvdÑ­D,1
þ03M@þA±þ()	±ÿYM(iA(O?pþ9

UW[ R

¡%
¡ «`

µ! ¶Z2¶ [

 `i¡%
µ  
¶ ¸  ¬ ¡ «`

Æ

ì

þ±þ`_a
ÿUý?Y!

MU()þ>?3þP0L(A?pþr · üÜ?7+-7/`_$þm1GvþÿvÿpýM*J?pþm+F44t_kÿ2ÿpþ+ þ
vÿ'/3
 þ	1C þ7 ÿv ÿpýM!
aUW[Oì Æ ìY2P
0 þþS(bc+ÿ4±ÿ
þKþþRþ
3þU4|baýÌþ30vÿpým?pþGOþ
Oþ?M/#P
 VM]1^@` ì *-± ÿ#
 þ
30 þYc ÿ4± ÿ
 þK0R
 þþ@ þG@ þ
 ÿ0 þI± ÿ#@ þU?pþ@ þ()@ þ
4R
 þ/3P'®?3þG/
 ÿn(>'PK ÿÓX'' ÿpýM!¸Y
³ ÿn?pþG?pþK?± ÿVR
*  UW[R Æ ìG4f
 ÿM

0v þþS()C2FM\W
+ ÿ''@þ R
 þvþ!´rM þoM0 þ*$C4ã
 ÿC
a þþU()	R
 þþ
?5
3
? þ
.C(bA?pþ6'YBÕ Þ]6/

3M þÿ
 þQ(J80'þ ÿ	v ÿC8'v ÿpýM
* þ! ýM!*rO'~:;W
" þ'% ÿ þF0R
 þþ!
Ò þ
3 þ| UW[R Æ ì>M

 þT
 ÿ[43
 þÿ()	+Fp
? þ?pþ[?pþÿpþ+¸v ÿ4J'þN@ þ8
 þ()@ þ7Q()þQ?pþ
_0µ1

3M@ þÿ
 þ*?pþ@ þ<4
 ÿ5+-d['f
. ÿd+W(?pþ6_0E'µ1

3@ þÿ
 þ<4V
 þ ÿpý5
p
? þ
±. þ7()þt þ7 ÿv ÿpýM!
H þ± þ?pþ þ*°?04F4
.Y(,
a þþÿpþf(bQrO'~:;W
T
" þ'% ÿ þ7R
 þþ$
304K3M ÿ0F3Mf'
 þLI± þK3 þ(i3%'*FR
+ þ>+F44%4
d± þFv ÿ · 3M0 þ
 ÿ§C1!x1!
ûºb

¼

MÅ@ÂóÅ^Á]vÉ¾®É	Ä$ekgi[Á%ïÂóÆ|Ã e$g V H=I,

¾^Zg

]$^_h

Å

1H=I MÖ@(	

(

{ïþÉÿ3þo1L0@þþÿL3MN_kÿ06;+-Svÿ0
@þOþÿ6@þ±þ`_°
ÿWýE?P*J+F?4
E?R@þa44
0þ
ÿ®v ÿq
Å  (1H=I M ± ÿq
Å  (	
 *-+Fp
? þÿX?pþ þY4 ÿpþYr · ü 'R@ þ± þ4(b!qTFp
? þ þY@ þK%d
+ þ(i3
 ý4?PAv ÿCþPA(t?pþ5
0042;P' þ3
 þQ?pþL
0v þo/pP(g@ þ± þ`_a
4 ÿµ!<×F\+ þ± þd*
?pþ$3
3 ÿ3
 ÿpþ9 þ4 þA ÿ	?pþL3 ÿC?F?pþL þ ÿ ÿpý7R
 þ'd]^)
 þþ
fÿK

 þa44p

¨=ÎKÎ

ª

mknpokmkq

H204¡l¢  X  ª4½Á«­¬ ¹ ¯  « ¯¬ 4 ½ ´	2Ã´	ª ® 
« `i k .
¬ ¯ » ¬  ® ´ª ¹ « l¢²» °  ¹ « » « ® ¡8[ ®PX  ¬ Ã¢ ® ´%¢ ® ª « ºl ¯²®«  ¬ »4¢   ¡%» f 
 ° »Á
« ` µ!×/Ø ¦ ¢  ¶ ®PX  ¬ Ã¢ ® ´¢ ®J» 	 « ºl ¯²®«  ¬ » ¢4 ²¡ª» f 
 ° »NÃ¢ ® ´%¢ ® ¤¾¹² « ¡ ®PX	« » «­¬ » ®Á¯¬ 4Na`¯ ´Pµ²r f  ¸  ¬ ¡ « `
 ¬ ¡ «`
 ¬ ¡*´	0 ¡l¢%2

rOý3@þPvQ1­2

UW[ H=I, ìQ@þ±þ`_a
4ÿYý?0K!

41
2}þµ*5!þ!*5?C4«V HOI  +F?nÅ (1NH=I,M YÅ (	
 03MãÿMKÅ'2 

 h)+f?pþ@þ
V H=I, P ý?NRþ
O
 þPV  è4è\lEO
! üÐÿR4%±ÿQM±ÿý±þ(-?pþþPvý?PN2f?0L?pþ´ÿpþ±þ
@þË13@ þ(bEPv ÿpýGS0103
7r · ü7:
* ÿMIþ± þÿnÅ   È*,@ þý þ>(f+Fp
? þ?pþI?pþCR
 þpW4
;1R
 þLL
" þ'% ÿ@ þ!OTFp
? þN ý??
 ýv ÿ¯þe
 þÿ
R
 þv ÿpý|ã=VM]<K44@ þC'I'R
 þ
`_a
[R
 þp
;1R
 þ¦^@Uo5P''R
 þ
`_a
N þ ÿ0v ÿpýIR
 þ'!9TFp
? þN @ þ
± þ7v ÿK3
 þ± þ0v ÿpý?3þ þ> ý4?P5+A
PoM4P½
 þe
v þÿ
S± ÿm?3þ@ þ(b þP?pþS
`_a
 þP
a þþÿpþL± ÿ0z
 <\N?pþP042;Y'Yk
_ ÿm4
þE!
T$3
? þ þ;+-qv ÿ
 þO
 þÿNv ý?PK þ4@ þÍ()K@ þ± þ`_°
 ÿ´()þYR
 þ'×
 V H=I, !
ü[3O
 þ>?f0R
 þ;KÈ ?M45()QÅ#4$'Cv þ ÿv ÿpýM*a! þ!*%ÅÍÆ Ç=È!$HF\+¸+ þIý±þÿpþ4} þ7?pþ
'± ÿ ÿU
 ÿ0 ÿ ñõò h  (Kè  * l5Ç ÑK'	(bÐÅ  14«
 V H=I  h ñóò h  (è  * l'lQÇ Ñ9ªtÙM*%+F3
? þ@ þEÑ¦Ù
Ç¸y/!<ï
{ þ7+-± ÿ$'P± þE(bC?[Å  Æ ÇÍÈP!
³ ÿ3þY ÿ0-3
Y
 þk
_ ÿ ÿX4ã
 ÿpþþp
 þ&R
 þ()@ þK@ þ þÿvÿpým3M ý?!&ï
{ þY@ þ/3
 þk
p
_ ÿ3þÍ+F?KYOþ± ÿ	()U&
:;'þZ(bE732
 )´'q
 þm'3
3 þmS&
:;'þ*L03M	'#204()
?pþL ýE?P-
+ þL4'p
 þk
_ ÿpþQ+F?0$5Oþ± ÿA()$
:;'þ>()8347'PR
 þ['Ep
3 þQ(g8'± ÿ ÿ

 ÿ4 ÿµ½
! üÓ
:;'þf(bE732 )46p
 þk
_ ÿ3þI'LR
 þ-'Ep
3 þ5(µQ'± ÿ4 ÿ
 ÿ ÿ|Ña*! þ!* j Ñ	Æ þ
Ç )J*^k
(<± ÿG ÿ4Y;
( Ñ×Ö>)&h)+F?04
?m
± ÿGR
 þ84P0 þO
 þÿþY1Yþ'vÿ3ýC+fp
? þ?pþ[(bY
 þ± þG' ^×ÖjÑa*
^«Öq)J! l
s þ	30R
#
 þýv ÿÓ+F?n?pþm ý4?  UW[ H=I,l ìXh)+F?4
E?Í
 ÿ4'C(Lp+9&± þÓ4P0 þUþEl
4 þ()£
 V H=I  ± ÿC+c ÿE4± ÿ
 þ[R
 þþ*/?M\W
+ ÿ	v ÿCrgv ý3M@ þIv Q1!,L
" þ
4°? ñóò h  (Jè  * l6Ý
Ç Ñ
 ÿ±
±
 V HOI  h ñõò h  (Jè  * l'l-j
Ç Ñ²ªtÙM£
!  UW[ H=I,l ì*0+f?4
?Yþ' j ÙYÆ Ç  )J*^k1
2} þ5@ þ± þ_a
 ÿY'	
@þ''E4
þ% ÿ(A?pþr · ü>!9hir
 þe
 þÿ0
:
* ÙZÆ Ç  )Z4N4a þO
 þÿþR>KþL(b*
 ÙGÖ)
?pþf?± ÿÙ­Ö  )SR
 þ
3 þ)G4F;104
4f
 þo/
 þ
þS'R
 þL þ73

 ÿ
$?± ÿ  )J! ã
l üf3O
 þ
?pþ	c ÿ4± ÿ
 þ	
 þ;W4IÈÇ ]  )q± ÿ#ÅzÆ ÇÄÈ!WTFp
? þÿ þ± þ®'v ÿpý v ÿ & hBÅ<l74'$
_ þ
cÿ4± ÿ
 þ7R
 þpYÈ*°()T
 þ
E@
? 6*  )m4f'p
3 þ7
( þ± þU'Äv ÿ6!fTF?4$4P04 þÛ
 ÑmÆ Ç  )J!
T$?26'þO
 þÿ-4,0 þ ÿ3M934 ÿ?` ( 4,

 þ0v þ$(bÜ± ÿ ÿ4/'þ!<cR
( ÿM*
@þ± þ_a
 ÿP4X
 ÿMXÿpþþp
 þV!OTFp
? þ)ý±þÿpþ44} ÿ+F42p
 ÿM6144þFÈ!6T$p
? þ þ(b@ þ*?pþF ýE?
Rþýv ÿ1Xþ'vÿpýZ+Fp
? þ?pþ
  ( +-12þ& ÿq@ þ/3± þ_a
 ÿµ!ÍcY
( ÿ*-?3þU3M'034
 þW
 ÿMFþ$?3þ>

 þa44p
(  ( !l
j 3

 þ!^kÓhiHfþ>?V HOI  Mz
aUW[ HOI  ì 4A'33 ÿK± ÿK
P0 þþQ(bF+c ÿE4± ÿ
 þQR þþ!<YÙ þÿpþ4}4 ÿ	( ñ ò h  ( è  * l
4t044
4 ÿNv
( V H=I, h ñóò h  (Jè  * l'lgÇ Ñ'ª Ù$'[(b¶Å  !gTF?4µR
 þ'
 V H=I   þ þ± þt+c ÿE4± ÿ
 þ
R
 þpYÈÉ4(O± ÿ0Y ÿY4(<Å  Æ Ç«È*0+f?4
?S4f'p
3 þ74(O± ÿ0Y ÿY4
( ÙYÆ Ç  )J!fT$p
? þ> þ' ÿU()[?4
4A?F+-þL
. ÿM\+«ÅX4'$
_ þ$È¶()z3MF ýv ÿ°± þ_a
 ÿµ*0± ÿ0	?pþ@ þ()@ þ  )S2A'p
3 þN()F4
'PIv ÿR2,'' ÿpýLv ÿ & hBÅ<lE!YTFp
? þP ÿm%40 þOÿpþ+±'P7 ÿ & hBÅ  lN03Mÿ7vÿ & hBÅ<l>@ þ
v ÿ ÙM!Nc`
( ÙSÆ Ç  )t*°?3þÿ  )2F'3
3 þ7()L4g'PNv ÿ & hBÅ  lE*µ+F?2
?G404v þ$?Yþ± þG''v ÿpýCv ÿ

¨=Î	

í[î

t}-m{t/s$q

H204¡l¢  X  ª4½ »4´	 ¬ »Á
Ø ¦Ú ®PX  ¬
« ` µ!×/Ø ¦Ú ¯¬ ¡ ×JØ ¦ ¢
 ° »NÃ¢ ® ´%¢ ® ¤¾¹² « ¡
 ° »Á
« ` µ!×/Ø ¦ ¢  ¶ ®PX  ¬ Ã¢
 ° »NÃ¢ ® ´%¢ ® ¤¾¹² « ¡
 ¬ ¡ «`
 ¬ ¡*´	0 ¡l¢%2

í

os0ïðptÊ{añ

l ñqMð î
í a

½ ´ªl´		 ® 

« `Ù

rgvý3M@þPvw1­2aUW[

 ¶ P
® X  ¬ Ã¢ ® ´%¢ ® ª « ºl ²
¯ ®«  ¬ »4¢   ¡%» f 
®PX	« » ­« ¬ » ®Á¯¬ 4Na`¯ ´Pµ²r  ¸  ¬ ¡ « `
  « ºl ¯²®«  ¬ » ¢4 ²¡ª» f 
® ´¢ J
® » 	
 Na`¯ ´Pµ²r  ¸  ¬ ¡ « `
®PX	« » ­« ¬ » ®Á¯¬ 4

HOI Û

þ±þ`_a
ÿUý?Y!

Bh Å  lL4~_kþ>È!	cÿR?pþ8+9E*OÅ  Æ ÇzÈ!YT$?pþ@þ()@þ* UW[ H=I,l ì2>'33ÿ0µ!{ïþC4'S.ÿM\+
?I4I
0þþ	Rþ
3þ	("AÊ^a*2^ ÖhÙ*2^ Ö
ù )J*<?3þÿ®4883'8Rþ?pþK
þ	?Å  ÆùÇ È!
cÿG
 ÿ0
43 ÿV'
* aUW[ H=I  ì*µ+F?2
?m
 ÿ4f(-?pþIþ' j ÙÆ Ç  )J*^kK4Q'33ÿm±ÿ
P0þþ!7r
PoM4P½
 þe
v þÿ
*J3ML20 þO
 þÿ ÿm°
(  UW[ H=I,l ìI?4L(bþ>?pþ_0Ðþ*J?3pý?
4$40 þQ'C10(b	5'k
_ ÿY4
 þ>hi± ÿ0Y?4FMz
 þT
 ÿMf ýÿ`_a
± ÿCþ
[?pþÜþa4

4O
 þA
0v þo/p>@ þ3t( · 3Ma þ
 ÿC1!x1z
* ÿM6M
 þO6þ
6?pþA+-'~:;
 þ52O
 þ5
0 þoM;lE!
 UW[ H=I, ìN4$v ÿ
 þO
 þÿV
 þ
30 þ>F2$/
4} þ	' @ 3'$
Ep
? þ
./v ÿpý+Fp
? þ?pþF?pþLR
 þpC?4
(J?3þYÿ3þ+F3
 þC'$v ÿÙM*/?pþ5?± ÿK2°'$v ÿ & hBÅ  lE!<rOv ÿ2*?04A ý?  ÿ4
ÿpþþf'C
 þIþ
o þ
3þm(b²
 V H=I  *aa3MTÿM[()q
 V I Å " H=I  ²
 Vè I,
I  I " H=I, *°
 þ
30 þEV H=I, 4$?3þ7 ÿ4
±þ4 ÿP?-
± ÿ«
 UVÖ 3 'P914Ü
 ý±þÿpþ4}4 ÿµ!6L
" þ
40?V I Å " H=I  ± ÿ¬
 V\è I1
I, I " HOI  @ þ
· ÊGsJ5()$c ÿ4± ÿ0
 þNR
 þþ!
ü[P±
 ÿ þoM0v þKq
( aUW[ HOI  ì *-3% þK/*-J*9
*5µ*9± ÿ0 þU@ þY'P*A± ÿ0&?pþK'± ÿ ÿ

 ÿ4 ÿØÑXR
 þ;+þþÿ · _
T ü6TF|FvG± ÿ · j
T ü6T$|-ï
Û þË134C/!=
s þhi/*$V*5V*5µ*$V*!!! lE*$+Fp
? þ@ þS?pþ
·
þ444048v ÿ2
þv ÿ/k
_ ÿ4þ@ þR
 þ4 ÿZ(Qµ*-R
 þ	W''v ÿpýv ÿ & hBÅ<l8?vÿ
433
 þ j
T ü6T$|fvY± ÿ
· j
T ü6T$|9ÛP$?pþN_a'5;+-± þ4
 þFv ÿU$

 þvÿ3ýP3
3 ÿµ!9T$p
? þNR
 þpC2$È Ç ]  þ
! üf3O
 þ
?pþI(i
[?0[?04f'v ÿpý	4~k
_ þ  þ8+-Q0d± þv ÿS?pþI ý ÿV± þ_a
 ÿµ! · 3% þ¦V H=I,
ý±þÿpþ2
} þ ñõò h · j
T ü6T$|Fv* · j
T ü6T$|9ÛlF() 'Rhi´
 ªq
dl7hi! þ!*µQ[É
 ÿ3þ+«44d+A0 þI
 ÿ

7(b · j
T ü6T$|FvdlE*%+F?04
?Gf?pþI''v ÿpýmhi
*%V*aJ*°µ*%µ*!!! lY' & hBÅ  lE!QT$p
? þÿS?pþQ?± ÿSþ'
+Fp
? þ?3þF4µ(6?pþþ þO
 þÿ$(  /*aV*0
*a
 à8@ þPÖ  þ*a+ þ7@ þ4C ÿ¯
 ÿpþþY'þ'F+fp
? þ?pþ

 Ö  þ*R
|
 þ
3 þL
L4A?3þL ÿf
 ÿpþ+FCp
 þY'K!
T$3
? þTÿpþo/9 ýE?K@
*  UW[ H=I,lÛ *4,(b
 ý±þÿpþ44} ÿ± ÿ0P(i34W
" þ'% ÿ þ$
 þþFhi± ÿC4
ÿM? ÿpý7
 þ[?0± ÿCO
 þ[40 þfþ'ElE!,st±. þ² UW[ H=I,l ì{
*  UW[ H=I,lÛ 41
44} þ9 þ± þ`_a
 ÿC'
@þ''E4
þY% ÿY(g?3þ7r · ü7k
! ü[3O
 þN?3þ7L
" þ° ÿ0 þLR
 þpC2FÈ h
Ç ][bh )×ö cdlE*+Fp
? þ þ )
45?3þL' ý±ý±þF± ÿ0t
 d45?pþN þ'% ÿ þN()f
:;'þ7(b834 þ)S± ÿt
 d1! ü[30O
 þNR
 þpCÈ ?4
()[Å®4-' þ ÿv ÿ3ý	hBÅÓÆ ÇÍÈ7lE!,Hfd+Ø+ þcý±þÿpþE4} þ ñóò h  (Kè  * l<Ý
Ç Ñ'(bE Å  	0/v ÿpý
V H=I, h ñóò h  (Jè  * l'l$Ç ÑBª'ÙM*+fp? þ@ þ9ÑBÙCÇ¸y/!,ï
{ þÿpþþK'P± þE(bC?[Å  Æ ÇÈ!
aUW[ HOI Û ()R V H=I, ± ÿ	(i34%W" þ'% ÿ þNR þvþ545v ÿKrO ý3M@ þPvw1![yh  UW[ H=I,lÛ 454'04`:

0 þQ()£
 Vè I,
I  I " H=I, ± ÿ´
 V I Å " H=I, ! l8T$p
? þN ýE?Ü_0'A
p
? þ
.1F+Fp
? þ?pþ58@ þ'% ÿ@ þ[
32R
 þ
@þË13@ þS(,?3þ8'E± ÿ ÿm
 ÿ0 ÿ ñ ò h  ( è  * lEß
! ü @ þ° ÿ0 þ82f þË34@ þS4(p*%()LQvþ'Nÿpþ
'' ÿpýSv ÿ & hBÅ,lN+F? þ$
3 ÿWv ÿ
23p
 þh  (Jè  * lE*6?pþC@ þ_o($?27''Ev ÿpýYR
 þ()@ þ/4ÿpýY± þþo

 þA?pþL'v ý±ý±þV
 ) ÿMF(b44d
+ þY1C þ'% ÿ þ6d1*0± ÿY?3þ>''v ÿ3ýP3/ePo	(bþ
  * Mz
 þT
 ÿM
( v ÿ
430p
v ÿ
23p
 þOdÉþ4?pþ! · 30
?Y''Ev ÿpýY4'$
_ þQ?pþP
 þ;m(9± ÿR ÿm
( ÑZÆ Ç d1!PT$?13L4
( Ñ®Æ Ç d
&

¨=Î%$

ª

mknpokmkq

 ÿK?3þNR
±
 þ;	4A'3
3 þN5'v þÿvÿpýKhi!þ!*()[Å<lE*0?pþÿY$4A%0þ[?Fþ'%ÿþN4
@þË13@þV!5c+ÿU?4[3ÿ®hi!þ!*'ÑGÆ Ç dlE*a?pþ8ÿ	+AS'Rþ73M@þL+þ8þ8(þChBÅ  Æ ÇØÈ7lF4F4(
?pþßÿpþ+FKp
 þS
 ÿ4 ÿÙC4'?0$?pþ7@þ'%ÿþ*°!þ!*úÙYÆ Ç d1!$cp(:ÿM*°?pþÿU?pþ@þI
34YRþ
ÿpþ+«''v ÿpýFv ÿ & hBÅ  l-+F?M þ7


 þvÿpý3
3 ÿ$ ÿ
43p
 þPh  (Jè  * lA03FMã
 ÿMf4'()	?pþ>
 þ;!
rMÉ
 þo/a þ*-3M% þK/*9J*-
*A± ÿ## þY'P*5± ÿ&?pþK'E± ÿ ÿ&
 ÿ0 ÿ ÑZR
 þ;+þþÿ
· j
T ü6T$|<C± ÿ · j
T ü6T$|-O
x þË134FV!-#
s þ8XÇ hi/*aJ*V*aV*V!!! lR
 þ>''Ev ÿpýPv ÿ & hBÅ<l5?fvÿ0
43p
 þ
· j
T ü6T$|<± ÿ · j
T ü6T$|-x7-?pþQ()3M?	± ÿ_0()?C± þ4
 þ5v ÿ	A

 þvÿ3ý8E3
3 ÿµ!6T$p
? þ[R
 þp4
È Ç ]Øhi
 öic«°lE*1± ÿ?pþ@ þ()@ þBÑKÆ 
Ç dL± ÿ
 ®Æ ÇÍÈ! · 3M% þRV H=I, ý±þÿpþ4} þ ñóò h · _
T ü6T$|,M*
· j
T ü6T$|9xlN(bÔR'Xhió
 ª
dlE*O+Fp
? þ þÙU47
*t+F?04
?R0N?pþ'v ÿpý(  ÇÐhi/*OV*tV*t
*A!!! l#'
? þÿ ÙõÆùÇ d!>cp(<?3þI'v ÿpý	3/ePoG(bþhi/*VJ*°J*V
dlFz
 þc
 ÿMNvÿ0
43p
 þ>V*°?3þÿm?pþ@ þ4
& hBÅ  lE!8T$p
ÿM\+ K''v ÿpýC?Lvÿ0
43p
 þf?pþ' ý±ý±þNa3MNMz
 þc
 ÿLvÿ
433
 þ>?pþI@ þ'% ÿ@ þ!>c ÿm?pþN+9E*

ÆùÇÈ!ArOv ÿ44*/4ï
( ÑYÆ Ý
Ç d± ÿ0t
 Ù	Æ Ý
Ç d*°± ÿ þo/'
Ep
? þ
.Y4FPp
 þL'
 þL3M@ þÙ	Æ Ç  )UR
 þ
3@ þ>± ÿ

' 
304KR
 þQ°?U@ þ'% ÿ þN± ÿU' ý±ý±þ!9W
H þ+´'E ý±ý±þ$?34	R
 þL43
 þµ!
T$3
? þ$ þ
 ÿ06(a?pþ$v ý?¶'þ,?,
( Ñ×ÆùÝ
Ç df± ÿã
 ÿMÜ
 ÿpþ+&' ý±ý±þE<@ þFv ÿ'/3
 þ
1î
 ý±þÿpþ2} ÿµ*µ?pþÿG?pþIR
 þ'>2 j ( þkK'KMM!7cpN4Ð
 ý3± ÿþþ'	R
 þ( þYhBÅ  Æ Ç È7l
v ÿW?48
 þ	
 þ
30 þC4°
( Ñ Æùh
Ç d1*6?pþÿ®U þ'% ÿ þ«[$^@UWUWVM]N
 þ@ þË13@ þZp
? þ@ þ!G+c ÿZ?pþI+9E*
Rþ
3 þCÅÉÆ Ç±È*g(bI
 þ± þR'' ÿpýYv ÿ & hBÅ<lQ+f?M þ

 þÿpýU$
3 ÿRv ÿ
430p
 þPh  (Jè  * lEj
* þ?pþß
 ÿM
' ý±ý±þ8/

3M@ þWL'S12vÿpýt ( *gI
 þ± þ' ý±ý±þ8+-7(b2d
+ þW1Y@ þ° ÿ0 þP4L'
/4vÿ3ý* ( *MfI þ'% ÿ þN/

3M@ þY()þ$/4ÿpýL * !
aUW[ HOI Û 4,33 ÿPa3M-ÿM-
0 þþ[()9(i34W" þ'% ÿ þfR þþ!gc9'$3 ÿ3 ÿpþ94<a þ
ÿS?pþ7(i
[?qV H=I, M
 þT
 ÿM[vÿ
@ þ@ þ7

 þ4044p	(<± þ4
 þ[Q'P[14þU()þN'þ

i
h


!


þ

!
*


ý




a



4





6
l

±

ÿ


?
p

þ

@
þ()@ þ[@ þ±
 þ`_a
4 ÿ
± ÿCR
 þ[41
44} þP'I ÿ ñóò h  (Jè  * lE;
!  UW[ H=I,Û
*
4É
 ÿMC
P0 þþUR
 þ
3@ þGP#3'03M j üf4Ó?4v ÿ'±ÿ
 þS¦
( V H=I, kW+fp
? þÿqv ÿq()
®V H=I,
4( þY'RMM!#rã
 þoM0 þ*-
( Ñ´Æ }
Ç dG03OÙ Æù}
Ç d1*-?pþY ý4?Ú+F4493M'03 j üF4#?4
v ÿ±ÿ

 þfï
( V H=I  !^8
k cþ$APCR
 þf?pþQ
 þN?FÅ  Æ ÇÍÈ¸_
( ÿMI' ý±ý±þ:
 )Y@ þ
 þp
 þ-@ þ° ÿ0 þJd7v ÿ


þ
'

%




ÿ


7
þ
2

F



)
(
þ



 !f{np
?

þ
8
ÿ

W
U
[



3
'
0
M
3

f

±

þ


`

a
_









S
ÿ
i
(


443M@ þ*°fz
 þÐ
 ÿM
& hBÅ lE*%Q(<P
*
H=I,Û

3M003/e
 þÿ$vÿM()P ÿY(b[r · üØ þ0!-|<E$730'$RþL@ þ'4± þY1	@ þ þ
vÿpý± ÿ?pþ
 þ
 ÿ0v ÿpýIR
 þ'!AHFþ8? j þk?fP`Rþ@ þÿF
 ÿ3ÿM4 ÿY()
  UW[ H=I,Û ?± ÿU(bf?pþ
ü6T´±
 þE`_a
 ÿYv ý?P½
! üÐÿ j üf4µ!!!^kR3M'03M$4F
 ÿ4p
 þ þK± ÿ þ!
üÐÿM?pþC4M±
 ÿý±þYq
( aUW[ H=I Û 4I?Pz
 þÉ
 ÿMP4\+ ý±þÿpþ44} ÿ?C
' ý±ý±þE!tc(MJ4tp
 þE0 þO'[0
 ÿpþ+Z' ý±ý±þt3Mv ÿ3ý)ý±þÿpþ4}4 ÿµ*\?3þÿL ÿpþÿpþþV'Q/()
 UW[ H=I,Û 'Q
4 aUW[ R +fp? þÿN@ þ± þ_a
 ÿL+f?9 UW[ H=I,Û (i44*\v ÿþN(M3M'03M'ÿpý j üf4
?4N ÿ'±ÿ
 þ°
( V H=I  !^k¶T$?4NP1_a
 ÿm4'	_
o þN?pþ(i4 þOþLa þKn
* ^@Uo5Y@ þ@ þ± þ
·
?pþÜþÿ3A4Ì
 þL/v ÿpý8hi þþ þ
 ÿ±C1!xlA+Fp
? þÿ	 þ± þ`_a
 ÿU3

 þþ!

Å MÅaÁ[I]vÉÓÝ

ûºbAÜ9* e$g

MÆÁuÞI] ÆKÅ¤9ß[	ÂóÅqßezÂfGïÉ	Å  [Á_<í¾¯^#]vÉ!<nÆ¡[	Æ

e$g

" þ
2%?$ÿpþN(g3M52PP @ þ
±þ$2A4OþCý±þÿ$þ'%ÿþ!<T$?04Aþ
ÿY
a@þ
L
?pþ+-'~:;
þ4Oþ
0þoMpS(-?pþý?0P!IsþL3QRþývÿG+F?G?pþ2Oþ
0þoM;
(ZVM]1^@` u âè!T$?4N4/ßh'h å áê ( ÆTðhBÅ á lÆ^là7Æ ß9hyÏ>lÆàÛUJlf'U()Ä?pþP0103
Q(-?3þvÿ41403
 ý±þÿfr · ü[5(b5c ÿ2± ÿ
 þNR

 þp± þ_a
 ÿµ*± ÿc
 ßh'h å áê ( TÆ ðhB
Å áBlÆ^l à[Æ ÈÆ à[Æ ß-yh Ï>lÆ à2UJl9'
() ?pþf/3
6() ü6TÓ± þ`_a
4 ÿµ!6W
× þ@ þqUY46?3þTÿ13>R
 þ<(µ ý±þÿ*JTÆ ðChBÅ á lÆ4<?3þWÿ30>R
 þ
(A'þLv ÿ ÿpý þI ý±þÿ>r · üz
Å á*9Æ ÈÆ°4Q?pþÌÿ137R
 þ[(A'þL ÿm?pþIR
 þ;Gr · üÉÈP*J± ÿ
Æ ß9yh Ï>lÆµ4Q?pþ'
 ÿ137
 þN(A'Phi832 ý±þÿ>
4 ÿElE!T$p
? þI@ þ' ÿR(bL?04Q
0 þoM;
@þ30,49?-?pþ@ þf þ å á ê ( TÆ ðhB
Å áBlÆ/3
,'þA()-+c ÿE4± ÿ
 þF0R
 þ;± þ_a
 ÿµ*/± ÿ

¨=Îdì

í[î

í

t}-m{t/s$q

os0ïðptÊ{añ

l ñqMð î
í a

h å á ê ( ÆTðChBÅáBlÆ^làfÆ ÈÆ/3
A'þ5()Lü6T±þ`_°
ÿµ!<T$?pþQ3Mþ$4K(ÒVM]1^@` u âèQþEþ
?M33ý?G2J130
f'þ!LTF?pþ8ÿ3ÿpþf4m(VM]_^a` u âÌè8þþ[?M3pý?m45Æ ß9hyÏ>ldÆ0'!
Hfþ5?Fhå áê ( TÆ ðChB
Å áBlÆ^(l àVÆ ß-yh Ï>lÆ\± ÿKh å á ê ( TÆ ðhB
Å áBlÆ^{l àJÆ ÈÆ¿àVÆ ß-hyÏ>lÆ\@þ5?pþ5}þO(a?pþA/3

r · üÉ'± ÿ4 ÿS(i3
3 ÿ
4 ÿm0 þQ032f()B
 VM]_^a`	ì± ÿ8
 VM]_^a`R<*V@ þ'R
 þ
± þ4E
! qVJ]_^@` a âÌèIM
 þ
FRU1.13MaA(bL
 þ
E?Y0v þÜþÿ'!
Ò-K
02' ÿµ*3Mfv ÿ
@ þO
 þÿV ýE? aUW[ a âÌèQ()W
 ý±þÿpþEvÿpýP?pþ>/3
5r · ü¸?
l



(




(
4O
 þ[
0 þoMpVßPh'h å ( ê ( TÆ ðhB
Å áBlÆ^g
l ànUJl<&
 ßPh'h å á ê ( TÆ ðhB'
Å álÆ^g
l à9Æ ÈTÆ ànUJl-'I10(b8?pþ[/3

r · ü&()6+c ÿ4± ÿ
 þ-R
 þpL@ þ± þ`_°
 ÿ8½
 ü6TX þ± þ`_a
 ÿV*@ þ'R
 þ
± þ!OT$?4t4gR
 þ
3 þ
l



(




(
?pþ'
 ÿ137R
 þ>(5@ þ/4 þW/3
>'þI4Ch å áê ( TÆ ðhB
Å á;lÆlNKh å á ê ( TÆ ðhB
Å á;lÆ
l à8Æ ÈÆ *<± ÿ
ÿ ÿpþL' 45
 ÿ04p
 þ@ þh)R
 þ
3 þN
+ þL30O
 þ9V\Å·Æ JH=I 
E?± ÿpý±þ5?3þÜÿpþo1$þL(b$v ÿpý þ
' ^  è   lE!9T$p
? þN4O
 þL
P0 þoM;Cï
( aUW[ u âè Æ ì 4$?pþLO
 þ>F?$
(  UW[ u âÌè!
H þo1f
 ÿ4p
T
 þ5?3þL+9E'~:;
 þ>2O
 þL
0 þoMp(g'9h)@ þ\lp± þE`_a
 ÿS(bþf?pþN/3

?KR
 þþÿ()O
 þV! cpY2¤
 ßPh'h å á ê ( TÆ ðhBÅ á lÆ^y
l àKÆ ß9yh Ï>ldÆl	(b´
 qVJ]_^@` ì ! T$?4	4KR
 þ
3@ þ*Lv ÿÍ?pþ
+-'f
@ þ$
* þ± þK130
F'þ72$

 þa þ>± ÿU?pþ@ þ()@ þþ± þ þÿ'Kv ÿK?3þ>/3
$r · ü
'± ÿ ÿN(i3
3 ÿ
 ÿQa þ,4µ/44þµ_
! ü[3v ÿpý>Æ m Æ4µ?pþ-ÿ37R
 þV( j 0k8hiv ÿN?pþ,*
Ò 3j 
E?@ þÿ þ\l
'þ5v ÿ?pþ[/3
-r · ü>*1?pþÿC?pþ[+9~:;
 þN4O
 þQ
0 þoMpPW
( VM]_^a`Rm4Z
 ßPh'hÆ m TÆ &vd
l à

h å á ê ( TÆ ðChBÅ áBlÆ^l à5Æ ÈÆ à5Æ ß-yh Ï>lÆlE!<T$?2949R þ
3 þ*Mv ÿ?pþ[+9A
@ þp* þ± þÌ
 þÿ'v ÿ?pþ[/3

r · üz'± ÿ0 ÿW()3
3 ÿ0
 ÿWa þC2>/4þW ÿ
 þ	 ÿ®?pþC3
 þ?/:_07þ
E?X± ÿµ*6()I
 þ
E?&0
'þ*/ ýv ÿ ÿ?3þLÿpþ'þPp
 þ0?/:_0'6þE
?µ
! dÐÿM(b33ÿþ*?3þ$+9E'~:;
 þ$4Ì
 þ$
0 þoM;
;
(  UW[$ì Æ ìL± ÿ8
  UW[R Æ ìL@ þ>?3þ7O
 þ8F?0f
( VM]_^a`	ì>± ÿ0´
 VM]_^a`R<*0@ þ'R
 þ
± þ4!$T$?4
4R
 þ
3 þ*$v ÿq?pþS+-'	
 þT
* þ± þ#/3
'þ444$

 þ0 þ!«T$p
? þU þ''4
 ÿq'
'± ÿ ÿ	 ÿ ÿ×^  è , $_a'5M
 þL
 ÿM$@þ03
 þN?pþ j 0v ý³Qk
0 þoMp!
rOv ÿ2*9
+ þS
 ÿ04p
 þP?3þY+9E'~:;
 þm
0 þoM;X9
( aUW[ HOI  ìY± ÿí
 aUW[ H=I Û !rO*9
+ þ
 þk
p
_ ÿ3þF()-± ÿÒ-v þ± ÿãþo/@ þ ÿ¬Ðt*µÆ Ð6Æ2<?pþYÿ30>R
 þ,º
( þv þO
 þÿAv ÿ  ^SÆ ^¬Ü×ß-yh Ï>l<± ÿ0«
 ^«Ö
Ðnà!6rM,+c ÿE4± ÿ
 þ-R þþOÈÍ(0?3þ-()p
 ]  )J*0Æ ÈÆ þË134$Æ )OÆ\v ÿ0
 þ-
+ þAþ'6():
 þ
?P'¿
 ^
+Fp
? þ?3þZ
 ^KÆ f
Ç )	?pþ-?± ÿ«^KÆ Ç  )t*R
 þ
3 þf+ þÐþo/
 þ
NÆ )Og
Æ á«Æ  )OÆv ÿÌý±þÿpþE!6T$p
? þÿ­ UW[ H=I,l ì
@þË13@ þF4O
 þßPhÆ Ùa(Æ àNÆ )OÆl$'	p
 þþPv ÿ3þ>+Fp
? þ?3þJ
 ÙUÆ Ç  )t!7hBÎAp
? þ
.1v ÿ3ý+F3
? þ?pþJ
  ( +A[12þ
@þË13@ þ[
 ÿ'±ÿQ4O
 þ! ò
l ü[3v ÿpýmÆ )6
Æ á å á ê ( TÆ ðhB
Å á;lÆgh)+F?4
E?S?34YR
 þ8'p
3 þßþo/
 þ0Q3$ÿp
 þ
0}@ þP

3'±ÿ
 þElE*g± ÿv ÿ
 þSÆ Ù°
Æ â¿ß9yh Ï>lE
*  UW[ H=I,l ì ± þ74O
 þd± þ¦
 VM]1^@` ì ¬
!  UW[ H=I,Û
@þË13@ þ74O
 þÕßPh'hÆ Ñµ

Æ àIÆ dÆM
l ¯hÆ Ùa8
Æ à8hÆ )6Æ  Æ dÆl'l'l>'m3
 þþPv ÿpþ+Fp
? þ?pþ|
 ÑÓÆ Ç d1*<± ÿZ?pþÿ®'
+
(
*
 þþv ÿpþ,+fp
p
? þ?pþZ
 Ù	Æ 
Ç d$± ÿ*
 ÙÆ Ç  )J! Î5 þPhÆ ÑµoÆ KÆ Ù°Æ
l â´Æ ß9yh Ï>ldÆR
 þ
3 þ9>?pþ9p
 þ
_ ÿ ÿ
Ò
( V H=I, {
* ÑR7ÙÇØy/!,T$p
? þ@ þ()@ þ*M30Pv ÿpýKhÆ )OnÆ nÆ dÆ"
l á h'hÆ m _Æ qvd,
l àFTÆ å á ê ( TÆ ðhB
Å á;l_Æ àFÆ ÈÆlQh)+F?2
?µ*
 ýv ÿµ*t?M34GR

 þI'p
3 þþoM
 þ>vÿG0}@ þ

3P±ÿ
 þElE*V?pþ+-'~:;
@ þP4O
 þ
0v þo/pS(
 UW[ H=I,Û 4$4d+ þ$?± ÿY?0$( qVJ]_^@`»R<!

BÂfGj[g[¦]vÉÓ9ß[yÂõÅIezÂfGÉÅ  [Á<

ûºbFøã

Â

	Æ ÒÆ

Ie !Gj]3g[ ek^

{'~:;
@þP4OþI
0þoMpS4ÐÿMN+A/NC30þ()30tOþ3M@þ!LT$?pþþ(b@þI+þ3M0vþOþÿf?pþ
+-'~:;
 þm± ÿ/ þ+F4? þ02
A@ þ3P ÿ#
03&4Ì
 þ!Í³Q3M04PZ @ þ
± þSv ÿX?3þ þ
þo/
 þE4O
 þÿN4['U
0@ þ?3þPv ÿ
@ þO
 þÿ6 ý4?PQ+F?G'6 þ± þ`_a
 ÿV*JN
+ þ46
+F?îþ
?G?pþ*%()f?3þ7
 ÿþo1Q:
( þ/v ÿpý
 þ?0/4K
 þ
[r · ü[!FT$3
? þ>4O
 þ7@ þË13@ þ
'èdäOBpB5\^9mVB\"å¤æ ç è\y	'ECL\\Q\BB5^\\EmV\B"åLéDy UJ^\µé`"êë0ì Í¸Î»Ìíî J
\\B^EB5e
 ïA²  æ W0A  X,¢ æð ²æ ñ0æ¸òcæ å{æ ¢¢°^J\~'d'fBA\Bé "ñÛmV[^\-BOB~dB~~;B^EQEé0Þ/^A
Þ%^J\J\Etn óJ\V5^ Rd)F~E5BEVEJ~E~^\E~

¨=ÎML

ª

mknpokmkq

()$@þ±þ`_°
ÿY45výÿ`_a
±ÿA'M@þ$(J+þL+A±ÿF4OþCý±þÿf@þ'%ÿþ*/Rþ
3þNþ±þ':
`_a
4 ÿ	1

3MEF()þ8¼ú¼  #  þ7 ÿv ÿpý8R
 þ'fa44
 ÿµ!
Ò þ()@ þp

 þ
av ÿpýP?pþßþo/
 þE4O
 þÿJ@ þ3*° þ[30[
 ÿ04p
 þ[?pþßþo1R
 þ4Ì
 þÿtO
 þ?M/M`:
·
±ýX
! ü[40
/p
 þf+--+$4'þÿv ÿ	Î#± ÿ3
3 ÿ ÿ 3
3 ÿPd['vy8+9./' ÿV!6+c ÿ3M þo/R
 þ4O
 þÿ*
r · ü[9
+ þ@ þN± ÿ0MPPv ÿ044} þV*3M @ þ
-'I
 þv ÿ	@ þ''2
 ÿ!6T$p
? þ[@ þ' ÿ	()A± ÿMã
 ÿpþ
4I??44mp02
5+-dX'Wv ÿ24} þ ÿ/432>v ÿX%032 ÿ®(bP± ÿ þ23M ÿ
 ý4?K!9TFp
? þ@ þ>@ þ7;+- þ''4
 ÿ05 ÿY?pþ7r · üf!5rO*0?Mp
3 ý?Sp
 þþP ÿ4±± ÿS
I:
0 þþÿ3þ(Lr · ü[C@ þîþ
o þ
3M ÿµ*F?pþC?± ÿq± þE`_a
 ÿµ*$2p
3 þ± ÿ#?pþ þ(b@ þ´ÿpþþ ÿM
RþÉþÿ(b
 þ®()I?pþ þ¯þo1R
 þ2O
 þÿ*g3I
E?M4
 þ	($0304I@ þ@ þ þÿ ÿ®($?pþKr · ü[Khi þþ
·
Tg0 þ	vdl$ þ''4
f?pþr üf['	R
 þv ÿpý3
 þþPv ÿ2'4
! · þ
 ÿµ*%R
 þ
3 þ8?pþv ÿ
@ þO
 þÿg ý:
?0Pf3O
 þÅ=Æ Ç È Q'K þ ÿ ÿpýM*a
+ þ@ þ''E4
f?3þIr · ü[Q'Y
04Y+F?S?4!LTFp
? þ@ þ
·
@ þ$p+9Iþ ÿ0± þFO
 þ?M/,(b þÿM(bE
v ÿpýN?4,v ÿ?pþLþo/R
 þ4O
 þÿ­5h~vdl63@ þF'0@ þ$r üf[hi! þ!*
+F?K± ÿKyElA± ÿ0K±. þþî
 ý±þÿpþEvÿpýãÿpþ+Ør · üff3
3 ÿ2a't± þ`_°
 ÿY3

 þþ07h)+F?2
?KM
 þ
ÿM[±
. þ ÿpý+f?S0 þ8r · üfElE*%hÛlf3 þ73
 þÿ þIr · üfT
 þÿpýv ÿpþþ þU'fý3± ÿþþR
 þp
4()
 ÿV!>c ÿSa4
34d*%3
 þÿ þIr · üfN@ þ()
 þm'Y2'(bU+c ÿE4± ÿ
 þIR
 þþO
 ]  )
v ÿ@ þvÿpýIy$v ÿfþ±
 þK
43ã
 ÿ(g?pþN'± ÿ0 ÿ	(i3
3 ÿ
 ÿC0v þhi3
?KFTt0v þPvdl-4R
 þ þC+F?
 ÿG' ^´Öþ)J!fÐ
±
D þÿ@ þ8r · ü[f þ7()
 þS'C2'(bYrOE'~:;L
" þ'% ÿ@ þ>R
 þvþ$+F?U' ý±ý±þ_
 )
 ÿ@ þ'% ÿ þdQ1v ÿ þÿpýNy9v ÿÌþ± þP
43Ì
±
 ÿ4R
 þ þI+F?P± ÿC' ^¬Öq)t!OTF?4:
 þ42Pv ÿþ
' ý±ý±þE<v ÿ24!JHfþF?Xþ?pþ<(%?pþ þfO
 þ?M/<46N/40v þ5+-d8'7v ÿ42} þ-L°a34 ÿ
·
(µr üf<(b þ43M ÿR
 þ
3@ þF:þÿ3@ þ:
 þI3

 þ,v ÿP4'()1v ÿ3ý[?3þ$R
 þp!OTF?4O0R
 þ
@ þ@ þÿQ ÿ4Y?pþI@ þ34f+f?mp
 þÿ þr · ü[! · þþÙ[ ÿ#h~vwwwlQ()N?pþI@ þ3[+F4?S'a þ
r · ü[! ( S
üÐÿM?pþ þo/R
 þ4O
 þÿf3
 þ ýÿÍp
 þ
44 ÿq+A	'#?M\+Ä
 þ3Mv ÿn?pþ} þG(>?pþr · ü[!
T$?Mp
3 ý?M3M9?pþWþo/R
 þ4O
 þÿ,?3þ@ þf
+ þ@ þQ3Ì
 þ'8R
 þF?M@ þþQ ý±þÿp
* þ
?	+F4?P?pþQO
 þIvÛ
834 ý±þÿN
 ÿ!L|9
?v ÿ0123µ ý±þÿLr · ü ?ÛxNxþ! (+4 {Í?GxþN?pþ
'± ÿ ÿ	0 þL
 ÿv ÿFx * àfv
Û þÿ' þ!
ü¶30þN(O_0±
 þLc ÿ4± ÿ0
 þ7± ÿ	_a± þ7L
" þ° ÿ0 þLR
 þvþA+-[3 þµ*0+F?4
E?Y4F ÿ\üF0
 þÿ0`o
Î[!°+c ÿ4± ÿ
 þ7R
 þþf+ þ þIþo/@ þ@ þU1U'' ÿpý?3þ8 þ[(,4g'PB
 ^×Öþ)m()QR
 þp
]  )J!´T$?23/eC

 þP()C4F(L3MC ý?P4 þq()c ÿ2± ÿ
 þYR
 þvþ!´rM ü6T
±þ`_°
 ÿµ*%L
" þ'% ÿ þ7R
 þþF+ þ þIþo/@ þ@ þU+F4?UCrg4'~:;L
" þ° ÿ0 þ7*
Ò 3j 
E?tr · ü¸()Q?pþ
ÿpþý
 ÿ®(5?pþR
 þpî
! üTÿ þo/04± ÿ ÿW($+F?m?484>p
 þË13þC(b83Mß
 þo1R
 þ2O
 þÿ74
Rþd+>!grM
  UW[ H=I,lÛ *' ý±ý±þ¾
 )J*± ÿ07 þ'% ÿ þNd*4/'P;
 ^aáÒÖq)± ÿ0.
 ^\BÖKdF
+ þ@ þ$''@ þV! · o
v ÿ3
 þ
 þÿ0p
 þÿWþo1R
 þ4Ì
 þÿF+ þ@ þ8R
 þ()O
 þS'± þ4(b þ
E?m(<?pþ8R
 þþ!F+c ÿS?pþQ+9E*
þ±
 þC@ þ± þ`_°
 ÿK ý?0±+-5þþK+F?´>y$
3 ÿ
 `o$
3 ÿ-(b)
 þ
E?Y(V_a± þN+c ÿE4± ÿ
 þ
$_a± þ>L
" þ'% ÿ@ þNR
 þþ!9rMW
 þ± þK ÿ3þL(O?pþ þL$
3 ÿ*Pþ@ þÿ$± ÿ0M  þþU+-f3 þ
()
 ý±þÿpþÿpýY?pþP?@ þþr · ü[!C×fd
+ þ± þ*6>2L4%±ÿN'U%v ÿQ3M>?74< ý4?P
Rþv ÿpý
0 þ	+F?¯þ
?U?pþFd+=?pþ¦ÞJ^@\YÖNr · üf!,rMW
 þoM0v þ*v ÿ	Tt0v þ>Û8+ þL
a@ þ
 UW[ u âÌèh)\+ÉvdlE*  UW[ u âÌè Æ ì h)d+=lE*°± ÿ®
 VM]_^a` u âÌèPh)\+¸ÑlE!AT$p
? þ	4Vv ÿMa3MA?pþ>O
 þ>?M@ þþ
·
r ü[!r3M?pþ@ þ*t?pþ þ7 ÿv ÿpý	R
 þ'hi'R
 þ
`_°
v ÿ'±ÿ4 ÿ(-?pþPR
 þ'8
3
? þPl
+A$?pþLÌ
 þL(bf4µ ý?0P5R
 þv ÿpý
0 þµ!
k %
 dB  %Utµ'OQ\\B^E\EE;\E\5^9B\5B~$$B~B^^FB<é BV~E^\B^°Þ%\
d;E,^gB^g~\Bgé`<1w5~^~OR\~\B^EO^L-\^B^~B)[5\~^9 4Þ1~\~\²Óôþ[~
N r=sOr¢;
t°Þ%6B  ª UtµENOÝ t k tÒ
 Ì$t9i;B~~%ÞAt~~\;B6B5^\9B~\^BW
 mVB[B\<\~\  % UJ~\B\E
Ì$t,i;B~µBP õB'[-~Fé B~6é0EF^Bpé`B^-\B~~Jé EgE[\\B'Ef^AB^5

¨=ÎKx

í[î

t}-m{t/s$q

í

os0ïðptÊ{añ

l ñqMð î
í a

s þQ30[
 ÿ04p
#
 þQ?pþI@ þ30f ÿGTg0 þNÛC± ÿ
 >1!Lc ÿG°?G(9?pþ þI0 þº
* þ
E?md+ 
@ þ:
'%ÿQ'G±ÿWýE?K!"Fd+F7@þãÿ137þþ(b84þ>þ(þ@þÿ0
þ!T$?pþãþÿ'vþcý±þRþ()':
P± ÿ
 þ@ þ3*V'YR
 þPp
 þ
4
 þ?M!Tg0 þÛY
0@ þ>?pþPR
 þ()P± ÿ
 þ(A'< þ± þ':
`_a
4 ÿ#+F?#?pþS ýE?P( · 3M0 þ
 ÿæC1!Û1*5+F?4
E?#
+ þ@ þSp
 þ ýÿpþ&()«
 V\Å·Æ KHOI ± ÿæ
 ^a`y`
30 ÿ!XT$p
? þK30 ÿ&3Ì
 þX(b?pþ@ þ þo1R
 þ4Ì
 þÿI+A
Å  

 !&T$?M þþ	3
 þÿ þ
± ÿÚhi3M @ þ
['	?pþ%d± þ:;Ì
 þÿ ÿ3þ@ þ''2
 ÿElFr · üf[
+ þ@ þý±þÿpþþµ*t± ÿG?pþÿm?pþ
/3
+A(bÌ
 þµ!T$p
? þY@ þ3P+AW/3
Pr · üÐ2'(b/v ÿpý?3þUR
 þp!=³[R
 þ'
V\Å·Æ KH=I +AF?3þÿSa4 þµ*+f?4
?S
 ÿ4þU(<± ÿM¯h)03Mf° ÿF'CC'þIv ÿ'þS(<yl

?0± ÿpý±þ'KE± ÿMPY
E?M þÿm0v þßþÿ'Gv ÿU?3þIr · ü '± ÿ4 ÿU0v þ8()NC± ÿMÄ
?4
 þ
(V ÿpþ[(V?pþ[?M@ þþQ ý±þÿ!,rOv ÿ44*?pþ[/3
-r · ü+--@ þ:B()O
 þC± ÿ@ þ± þ`_°
 ÿ	M ÿpþ!
T$3
? þO
 þ?M/M± ý()ß
 ý±þÿpþvÿpýmTg0 þ­>Y+-I2P44L'G?8(bITg0 þÛ1:
* þoM
 þ8?
V H=I, +A?pþY þ ÿ0v ÿpýG þE'± ÿX?pþY43 ÿX+AP3Ì
 þX'RR
 þY
Å  (	
 !Xc ÿX?pþ
+-*?pþ$/3
<r · üÍ+A<()O
 þV*± ÿ?pþÿ¬V H=I, 004 þI'7?pþÔ)a3Õ V\5 âz[=]<r · ün(%?pþf?M@ þþ
 ý±þÿ*<?pþC/3
7+-8±. þÿX+F?W?pþCR

 þ;Rr · ü )
( ÿpþþp
 þ®(b
 ü6T ± þ`_a
4 ÿµ*<± ÿ
?pþÿm@ þ± þE`_a
 ÿmR
 þ()O
 þµ!7³Q
 þE'9
 V HOI  
 ÿ4'þm(9
E?M1v ÿpýK	± ÿ þ«Þá-± ÿ
G± ÿM¯
 ÿ¯^aáF()8+f?4
ö
? U}h ÞKá è ^ á;l8Ç Þ÷*<± ÿ®
?M1v ÿpýmG± ÿM¯
 ÿ ^\(bI+F?2
?
U1}h Þá è ^\\l$Ç¸y/*a±
 ÿ	?pþÿY þ'ÿpýVU1}h Þá è ^\\l$Ç Þ=÷!
üÐÿY
23Ì
 ÿYv ÿSTta þfÛP²
 >4R
 þ þ j  þ
É
k ý± þ[O
 þ± ÿµ*ad± þ9
 >y3
3 ÿ*M(6?3þ7
03U4O
 þ
(6?pþ8 ý?Y!fÎ-43Ì
 ÿ054R
 þ þ j 'µÌ
k ý± þ>?pþ8'R
 þþ3MY\± þN'*%! þ!*a?3þ7
03U4O
 þ>(
?pþv ÿ
 þO
 þÿO ýE? v ÿG?Qd+ 4143
 þKS?pþ
03G4O
 þ8(,?pþ
 þ'% ÿv ÿpý'
 ý4?K!UrM
 þoM0 þ*O?pþ j 'µk þÿ'R()
  UW[ u âÌèv ÿWd+ÄÉ
v ý± þI7
a3R4O
 þ	/4p
 þ
1?pþC
a3W4Ì
 þ°
( VM]_^a` u âèv ÿZd+ Ñ!mÎ-23Ì
 ÿ74R
 þ þ j þkG?M\+±?pþd± þ ý±þ\ÿ30>R
 þ
(6± þ`_°
 ÿ\þ$\± þB
 >y3
3 ÿ0!-TF?4$4f4%±ÿ$'P ÿ'FR
 þ
3@ þ*0()T
 þoM0 þ*a?pþ

03W4O
 þ47'8'' ÿpým
@ þ2þW+F4?R?pþãÿ137R
 þL($'þ j 12þkY03Mv ÿpýKM(i*O± ÿ
? þÿãü6TÓ± þ`_a
 ÿC493 þµ!6|<± þR
 þ;Oþ9
3@ þ
 ÿ0M(),'7R
 þ
j /4þ0Ûk73M ÿpýÜÿM(i<+F3

4 þG+F4?Sf
 ÿpþ'þ þE
?µ*µ+F?04
?GPSR
 þ7Ë13þ84O
 þ:;
 ÿ30Pv ÿpýMY
! üf2'M*µ[2[2%±ÿf'
ÿMþN?F+-þL2f
 ÿ5(b
 þL± ÿ	± þ`_a
4 ÿ¯þA'P/

3M!6c5+A53M5 @ þ
± þL'P ÿ'

03&2O
 þU3
3 ÿ3
 þÌ
 ÿ3M$
4
3P'±ÿ0
 þP()Ì
 þ/v ÿpýWr · ü[!q{Íp
? þÿ þ þY?pþX
+ þ@ þ
?pþ\ÿ3-@ þ3I([0/v ÿpýG þ ÿv ÿ3ýSR
 þ'!XT$p
? þ j þEk
43Ì
 ÿI@ þY4v ÿ3ýU()
Tg0 þ>Û8R
 þ
3 þL?3þN43
3 þ$@ þL4µy/*0B! þ!$
* ÿMO
 þE51

3@ þK3MEv ÿpý8?pþcþo1R
 þ2O
 þÿFp
3 þQ'
041v ÿ3ýPVÅÁÆ JH=I *%?Mp
3 ý?S
+ þ7?d± þ70@ þ± þò
 þF'/

3M[+F?Y?045R
 þ'c
 ÿMf03Mv ÿpý
?pþTþo1R
 þ4Ì
 þÿ!OT$p
? þf4
.PR
( þ,v ÿ?pþWþo/R
 þ4O
 þÿ6@ þ3þP()Ü?pþF04
34<E± ÿM
r · ü[7?0P?R
 þÿpþR'R
 þÉý±þÿpþþ#3v ÿpýY?3þfþo/R
 þ4O
 þÿ!|<I@ þKË30þC
 ÿ
+F?U?pþI'R
 þ
`_a9

 V H=I, ± þ ÿS;
( V\Å·Æ JH=I *°[
± ÿG
 þ8 þþÿGv ÿUTg0 þ>1!fHfþ8?0 j B
H <iüfk	4fv ÿ
?pþ j þkY
43ã
 ÿm(b8± ÿ1?v ÿpýK?3þ>?± ÿRY± þ`_a
 ÿZ ý?0Ä
 þ
30 þ j þkY@ þ( þEN'
±þ`_°
 ÿ þE!
T$3
? þ ý?0Ph)\+FElN?M34mR
 þ
 ÿ4p
 þ@ þR ÿ'0v þ j V*^k j a*^km± ÿ j J*^kSI
 þ4 þ8
v ÿ3ý þ$þ j g
 [V!^ï
k ü j 0I
k ÿpþo/,'7± ÿ ý?0C
 ÿO
 þfv ÿTg0 þfÛLZ
 >>p
 þÿMþ-,4<>/3

 ý4?K* j /k?F$25I± þ`_a
 ÿU ý?Y*± ÿK j 0kI?f$4A?pþ>3±(t?3þ j 0k
 ÿ j 1
±
k þÿ'v þ*! þ!*1?pþ$2O
 þ$()Z
 ãOVM]Ì<@ þ:B()Pv ÿ3ýN?pþF130
<±ÿP@ þ± þE(b/v ÿpýM!OrM
 þo/P0 þ*
 UW[$ìh)%lA4$
 ÿ4p þ@ þK'R þ>± ÿY ý4? 04$
 ÿ4'ÿpý;(  UW[ u âÌèh)°l-()4\-+ þY­
 VM]_^a`yì
h)lfhi@ þþ[d+FQv,: >7(tTg0 þNÛlE!6cp_
( ÿM70103
-ÿpþþ09'IR
 þ[(bÌ
 þµ*?3þÿ?3þ j 0k8± þ ÿ(t?pþ
 ý4? 494p
 þÿ4
M'>?3þ j /kL± þ4 ÿµ*v ÿP+F?4
E?P
 þ[?pþ@ þf26 ÿI ÿpþ$d+Í4R
 þ þ j g
 [V!^k
Tg0 þFM*°x1*a± ÿ0±
 CÕÖ:B0@ þ þÿfP30 þ7hi
03U4O
 þL ÿ0MlA(g?3þ7(b Tt0v þfÛP± ÿ0±
 >
v ÿmC(bEPN?N(i
44þQ'O
 þP
P04' ÿ0!Lc ÿS?3þL+9E*µTta þQM*Jx1*J± ÿ
 C	
 ÿv ÿ

¨=Îdë

ª

mknpokmkq

×>1!<c ÿKTg0 þ5M*ax1*± ÿ0×
 C1*@ þ305@ þ
j V*^k j a*^k j V!^k
s#þt3ºþ2°Eþ<ÿLÿpþ9@þ,vÿþ@þ'ÿpýF43pþOþ()@þ,24'vÿpýA3M#þo1Rþ4Ìþÿ?1°?3þþ!
"Lþ
2M?<+þ$@ þF3v ÿpýNNrO'~:;W
" þ'% ÿ þ5R
 þp7r · ün± ÿ?,?46r · ün
p
? þ
.19 ÿ7?
?pþL'YBÕÞ]5'E ý±ý±þNv ÿ\þ± þG''v ÿ3ý4f(b2d
+ þGYC@ þ'% ÿ@ þ!frMN3MÐ
 þ43M4 ÿY0E ý
h)+F?	p
 þÿ0 þNr · üØv ÿ044}4 ÿalO+F3
? þÿC30v ÿpý UW[ R Æ ì */± þ4(b/v ÿpýIrO'~:;W
" þ'% ÿ þQR
 þp
4T
 þË30v þÿ['	± þ()1v ÿ3ý?pþ8()304JW
" þ'% ÿ þ8R
 þ;!NT$3
? þ7(i4 þßþf()3
3 ÿS×
 aUW[g Æ ì
p
3 þ8'KQv ÿ
a þþÿpþ[@ þv ÿS()
Q/4 ÿf(,?3þ7(i34tL
" þ'% ÿ þ8R
 þp! ( Ë T$p
? þ@ þ()@ þ
()
  UW[R Æ ì*rO'~:;W
" þ'% ÿ þ$r · ü[,@ þTþÿ4@ þIp
 þË30þF(),@ þ± þ_a
 ÿP(µ(i34MW
" þ'% ÿ þ
R
 þvþ!,
Ò þ
3 þ7+ þ83 þK?pþþ43M ÿCa ý  ÿK?pþ þÜþo/R
 þ4O
 þÿ*0± ÿ0KR
 þ
3 þ
 UW[ R Æ ì ()33 ÿÓ?pþmO
 þïÿ30>R
 þCÜ
( þ	«
 VM]_^a` g hi! þ!
* aUW[ g Æ ì (b3
3 ÿ0ñ
 ÿM®(i4 þ
þEElE*()A?pþfr · ü[Av ÿP?3þ þTþo/R
 þ4O
 þÿ9þ'vÿpýIrO'~:;W
" þ'% ÿ þ$
 þþ<+A
 þË34 þÿ
'Pþ'ÿpýP(i34%L
" þ'% ÿ@ þ[0R
 þþ!
rMf3ML
 þo/R
 þ4O
 þÿ*/_0± þL?%?pþ@ þ$
+ þ@ þNþ'þµ­
ÿMÌÿpþ+Ø/*ÿ@þ()P'þU0(bzTt0vþFÛI±ÿ

ý3MRþ	1

×7v­Wü[ý4?PC4@þþ
_a
4&()Kc+ÿ4±ÿ
þþþþ()'þU?±ÿÍ?Mþ()
ü6T ±
 þ`_a
 ÿV*VR
 þ
3 þI?pþP4'þ> þOý±þÿpþ`:B03% þ	hi± ÿ0?pþ/3
Q ý4?P
 ÿ
43p
 þQ± ÿU0 ÿ%r · üNlE!
×[Û1­FTF?pþfvÿ0
@þOþÿaýE?P9@þF(i'þA?±ÿ?pþf'%ýE?P,(b-%?P/3
-±ÿ
 þ± þ`_a
 ÿV!,T$?4A4L

 þo1R
 þ
þK'PR
 þN'3
3 þN
 þ
30 þL?pþC+ þ þL4@ þY(bFv þ ÿv ÿpýM!
×q>1­FTF?pþ j HfckK±þEÿN(A?pþvÿ
@þOþÿ,vý?PNþ(i'þ>?±ÿR?pþ>
33ÿþ0*
+f?4
?nM ÿMC_kÿñÿpþ+Ðvÿ4f'þ! T$?044fþo/Rþ
þÓRþ
3@þS(7?pþGÿ
@þþmvÿ
'@þP4v ÿ0vÿpýM!
×FM­RaUW[ H=I  ì[±ÿ«aUW[ H=I Û @þQ?pþ[()þ'A(J4a?pþ[vý?P*Rþ
3þ[?pþþ[2@þ
()QPþWý±þÿpþ4
7þÿvÿ3ýþE'8hi!þ!*'V H=I  ?pþ[?±ÿ±VÅÁÆ JH=I lE*)z`yâzÞ>?pþY@þ84'
2@ þK()$ ÿpþ>
 þ
_a
[R
 þ;C;1R
 þ*± ÿK?pþK
E`_a
þQ_kÿ0vÿpýI4Rþ!
×[x1­RaUW[ H=I  ì$±ÿ¬ UW[ H=I,lÛ +F44/?d±þF?pþfRþ'<
þ3MRþþ!tT$?pþI+F24ÿM<.±þQ@þ
2OþPNr · üÉ}þvÿ
@þþ!8T$?04Q4'þÜþo/þ
4ÿR
OþN()Ä?pþ+-'~:;
þ4Oþ

P0 þoM;	±ÿ/4!
· 3Ma44	23pþ[+þOþo/Pÿpþ@þ?pþRþ
þÿý±þP(,+$ÿpý	@þ4
4ÿh)(b9aUW[ R Æ ì ±ÿ
 UW[ H=I,Û *+F?04
?K@ þIÿM$
0 þþ7 ý?ElE*± ÿK?pþLo/483±0@ þ± þU'R þþ3V!
T$3
? þN@ þ35 þL?pþN()4d+fv ÿpýYhi3
3 ÿ þ5'þU?3þ+F4 þ*4.	$?pþ j  þ
k
43Ì
 ÿ0ElE­
×7v­FTtXþþm?pþSþ3*5vÿnTg0þGÛZ1.#	d+FGvS?M3pý?Íw®±ÿÓ
P0@þòþ
?Í\+ Õ
 ÿR?47 þ8+F?Rd+±(
Õ Lw1!Y+c ÿZ?pþ8+9E*6
0@ þC\+ v+F?Wd+Ävy/*6d+ ÛY+F?
d+ vv*O± ÿRY ÿµ!"Fd+Fv?Mp
3 ý?ZwY@ þv ý?PQ()>c ÿ2± ÿ
 þR
 þþ*J± ÿ

NÌd°Þ%µB'$^0B\µé`^^NmV^\äO~\  %UC^BE^ 'BE[B~B~  %Ut{mVB$OB^EB~HU	^'B\^<;BE
^%B~[E\^^'
 UJé BV^'B\^\{ êëìøù íúRû ~^µB~BTo'BENýüPÏaüPþñ5i;BOé BE¯mV^p[-,mUB^E
~E5'J~~F\\'5A^'B^d°Þ%\,üPÏaüPþñ,BEV^5B  %U®mV^^g;~;'-B,~t^é%^°é ^^m°'
AgBEH
 Uµa~p-E~;B^$Eéd°^\B^EA~B^\,;E\^Q°5Ei°EV^'B\^<;BE
^6E\^^'L  ª U,EQB^O^O^55'\B~[é`E^N m°'8[B~BT o'BEINBEgB~^\B^EC é°\~'d'¢;
Þ%pBé`Bg~p51 mB^p'
 mV^J'E\%t
 êë0ì¸øù íúRû Eé1\Eaé`^^N m%'F$OB~\BJ\B\^~
mV^^1O^55'd B~$B~^'

¨ J©

í[î

í

t}-m{t/s$q

os0ïðptÊ{añ

l ñqMð î
í a

ÆÁ¡] ÁKÅ `6ÈW¾­Æ
ÆKÅ
Æ Gh
	

Eø8Þ

ÆÁ¡] ÁKÅ `6ÈW¾­Æ
ÆKÅ
Æ Gh
	

¾ø8Þ

 UW[ u âÌè G
!^yyyMvxÑ
!^yywÑ
!^yyywÛ
!^yyÛxx
VM]_^a`	ìO
!^yÛ>ÑwQ
!wxCC>
!ÛyCyC
!wÑ\ >y
E
ì

ÿ

W
U
[
^
!

y

Û

>

w

x
x
^
!

y

Ñ

y

Û
>

!

Û

y

C

Q

w
Q
!x/vv>>
¼
 UW[ u  âÌè Æ ì G !^yyyÛyC !^yyCxÛ !^yyyC/vdÑ !^yy>Ûy

 UW[$ì Æ *ì 
!^yyyMvCw
!^yyCQy
!^yyyxÛQ
!^yy>Ûy
ø
 UW[$ì Æ ì ÿ
!^yyy>Ñx
!^yyMvvy
!^yyMvdÑ3CÛ
!^yy >x
û
VM]_^a` u  âÌè G
!^y>/vxw
v!^y
!4vwÛÑÑ\
v!^y
ü
VM]_^a`	O
ì 
!^yÛ QÑÑ
v!^y
!Û/vvQx/v
v!^y
ÿ
VM]_^a`	ì ÿ
!>yQ/vdÑ
v!^y
!y CÛx
v!^y

!^yyyw>
!^yyxyÑ
!^yyMvxÛ/v
!^yyÛxw
½
	  UW[ u  âÌè G
!^yÛ/vvy>
!wQwy>
!4vdÑÑ3CCx
!wCQCw
½v½ VM]_^a»` g>
!^yÛÑwQ
!ÛyyÛÛ
!4vQyÑyÑ
!Û>v
½ E  UW[ R ÿ
½ ¼  UW[ u  âÌè Æ ì G !^yyyxÑ\ !^yyxwy !^yyMvdÑ3QC !^yy>y
½l  UW[ R Æ kì  !^yywyMvv !>Ñ\xy !^ywyQÛ !wxÛy
½ ø  UW[ R Æ ì ÿ !^yywxQx !^yÑwyy !^ywÛQÛ !4vÛyMv>
!^ywÑÛCÛ
v!^y
!xQÑ\wC
v!^y
½û VM]_^a` u  âÌè G
!^yÛyCÛ
v!^y
!4vQ>yw
v!^y
½Mü VM]_^a»` g>
!4vÛ/v>Û
v!^y
! ÑÑywyx
v!^y
½ÿ VM]_^a` gÂÿ
Tg0þ>Û1­Wüf±þý±þ$Rþ()P±ÿ
þ9d±þ>y[3$ÿ-hxfþþ*Cf33ÿ_þ
?alt+f?>Rþ';V\Å·Æ JH=I
½

±ÿSpþÿþ7r · üf!$"Fd+F8vL?3pý?Sw@þ>()Fþ±þ`_a
ÿU(6c+ÿ4±ÿ
þ7Rþþ
±ÿYd+F>vy?M3pý?WvQ@þL()Wü6T´þ±þ`_a
ÿY(g"Wþ'%ÿþNRþvþ!

ÆÁ¡]{ÁKÅ `ÈW¾­Æ
Æ	Gh
Åzgig

ÆÁ¡]{ÁKÅò`Èn¾­Æ
ÆKÅ
ÆÅ 
ÆªGh
Å gg

!^yyyyyMv
M!Ûxiþ:px
!Ûy
!^yyyyyÛ
w1! Ñxiþ:,C
!^yÑ
½ aUW[ HOI  ìO ÿ
aUW[Oì Æ ìO ÿ
!^yyyyyÛ
Q1!x/vþ:px
!Ûy
!^yyyyy>
v! iC þ:px
!^yÑ
E
!^yÛ>xyy
v!^y
!Ûy
!ÛyxyQ Û
v!^y
!^yÑ
¼ VM]_^a`yìO ÿ
aUW[ HOI Û  ÿ !^yyyyyÑ Ñ!Û>iþ:,Q
! Ñ3>
!^yyyyyC
Û1!^ywiþ:pw
! Ñ3>

aUW[ a âÌè Æ ì G
!^yyyyyC
x1!ÛÛiþ:px
HB<iü
!^yyyyyC
Q !x/vþ:,C
1
HBi< ü
ø
aUW[_R Æ ìO
wM!CCyÑyy
!wQyww
>xCw1!>> ÛÛ1> !xxyyyy !Q Û vÛxx1> !y
û
aUW[ R Æ ìÿ
wM!CCyÑyC
!wÑwQÛ
HB<iü
ÛÛ1
> !xxyyyC !Q Û/v
HBi< ü
ü
VM]_^a` u âÌè G
!4vv QÛx
v!^y
HB<iü
! Ñyw> 
v!^y
HBi< ü
ÿ
VM]_^a`R>
wC1!wxyy
v!^y
>xCw1!>> ÛQ Ñy/!^yQ yyyy
v!^y
vÛxx1
> !y

wC1!C/vyÛÛx
v!^y
HB<iü
ÛQ Ñy/! Ñ3Q w> 
v!^y
HBi< ü
½8	 VM]_^a`R ÿ
Tg0þ¦>1­Wüf±þý±þRþ()P±ÿ
þ7d±þ9>yC33ÿ8hxPþþ*
C 33ÿ0Lþ
?°l$+f?YRþ'BV H=I,
·
±ÿSpþÿþ7r üf!$"Fd+F8vL?3pý?±
> @þ>()Fþ±þ`_a
ÿU(6c+ÿ4±ÿ
þ7Rþþ
EHø8Þ

úø?Þ

±ÿYd+F$P?M3pý?WvyP@þL()$@þ±þ_a
ÿK(O"Lþ'%ÿ@þNRþþ!

¨  ¨

ª

E

¼

ÆÁ¡]{ÁJÅ

EHø?Þ

 WU [ u  âÌè G
 UW[ u âÌè Æ ì
VM]1^@` u âÌè G
VM]1^@`yO
ì 
 UW[ ì Æ ì 
VM]1^@`yO
ì 
 UW[$ì ÿ
 UW[ ì Æ ìÿ
VM]1^@`yì ÿ
½


ø
û
ü
ÿ



mknpokmkq

G

n¾­Æ

`È

ÆÁ¡]{ÁJÅî`Èn¾­Æ

úø?Þ

!^yyyMvxÑ
!^yyyÛy C
!^y >/vxw
!^yÛ >Ñw Q
!^yyyMv Cw
!^yÛ QÑÑ
!^yÛ >wxx
!^yyy >Ñx
!>y Q/vdÑ

!^yyywÛ
!^yyy C/vdÑ
!4vwÛÑÑ\
!Ûy Cy C
!^yyyxÛ Q
!Û/vv Qx/v
!Ûy CQw Q
!^yyMvd3Ñ CÛ
!y CÛx

Tg0þNM­Wüf±þý±þI
03K4OþhiÿKþ
ÿElAd±þB>yP33ÿ0A+F?	Rþ'V\Å·Æ JH=I ±ÿK_0±þLcÿ`:
 ÿ
 þ>R
±
 þþ!6T$?04A0 þL4F3M042
 ÿC(OO
 þN(O?pþ>Pþ2µvÿKTtaþ>Û1!

 WU [ u  âÌè G
 UW[ u âÌè Æ ì G
VM]1^@` u âÌè G
VM]1^@` g 
 UW[ R Æ ìO
VM]1^@` g>
 UW[R ÿ
 UW[ R Æ ì ÿ
VM]1^@` g ÿ
½

E

¼

ø
û

ü
ÿ



ÆÁ¡]{ÁJÅ

EHø?Þ

n¾­Æ
!^yyyw>
`È

ÆÁ¡]{ÁJÅî`Èn¾­Æ

úø?Þ

!^yyMvxÛ/v
!^yyMvd3Ñ QC
!x QÑ\w C
!4vdÑ3Ñ CCx
!^ywy QÛ
!4v Q>yw
!4v QyÑyÑ
!^ywÛ QÛ
! ÑÑywyx

!^yyyxÑ\
!^ywÑÛ CÛ
!^yÛ/vvy >
!^yywyMvv
!^yÛy CÛ
!^yÛÑw Q
!^yywx Qx
!4vÛ/v >Û

Tg0þ>x1­Wüf±þý±þ5
0374Oþ[hiÿ>þ
ÿ0Elµ\±þ;>yF3$ÿV+F4?LRþ'V\Å·Æ JH=I ±ÿ>_0±þ-"Wþ'%ÿþ

 þþ!6T$?4Aa þL4$3044
 ÿC(6'O
 þN(O?pþLþ4VvÿKTg0þ>Û1!

½
E

¼

ø
û

ü
ÿ



aUW[ HOI Û G
aUW[ a  âÌè G
VM]_^a` u  âÌè G
aUW[ HOI Û 
aUW[_R>
VM]_^a` R 
aUW[ HOI  Û ÿ
aUW_[ R ÿ
VM]_^a` R*ÿ

ÆÁ¡]{ÁKÅ

EHø?Þ

n¾«Æ

`È

!^yyyyyC
!4vv QÛx
!^yyyyyÑ
wM!CCyÑyy
wC1!wxyy
!^yyyyyÑ
wM! CCyÑy C
wC1! C/vyÛÛx

y

ÆÁ¡]{ÁKÅ

úø8Þ

W¾­Æ

`È

!^yyyyyC
! Ñyw >
!^yyyyy C
ÛÛ>1!xxyyyy
ÛQÑy/!^y Qyyyy
!^yyyyy C
ÛÛ >1!xxyyy C
ÛQÑy/! 3Ñ Qw >

y

Tg0þ¦C1­Wüf±þý±þI
03K4OþhiÿYþ
ÿl-d±þB>y33ÿ0A+F?	Rþ'V H=I, ±ÿ	_0±þ>"Wþ'%ÿþ

 þþ!6T$?4Aa þL4$3044
 ÿC(6'O
 þN(O?pþLþ4VvÿKTg0þ¦>1!

¨ Mµ

í[î

t}-m{t/s$q

í

os0ïðptÊ{añ

l ñqMð î
í a

d+FCvyU?3pý?nvQU@þCý?0PL()ßü6TÉ±þ`_°
ÿµ!YcÿWTg0þ®>1*gd+FCv?3pý?
>@ þI ý?0P$()fc ÿ2± ÿ
 þ70R þþ*0± ÿ0U\+FQxP?Mp3 ý?ZvyC@ þI ý?0P$()
ü6T ±
 þ_a
 ÿµ!RÎ-0 þ\+zÛS+F4?®Ñ*<± ÿ >U+F?qvy/!#hi"Fd+FKvC± ÿZG
± ÿ3ÿ8Rþ

P0@ þXR
 þ
3 þ	\+zm?0± ÿ®v ý?¯4 þZ()PL
" þ° ÿ0 þ0R
 þþ! l«Hfþ
·
?0[?3þ þ8
P04' ÿ0f@ þIR
 þ;+þþÿm j @
 [ak± ÿG j V!^k
v ÿ

 þ j@
 [akO
 þ± ÿ0 j /kC
j J*^kS?04L4LS
@ þ
8
04 ÿµ! 9*ÒÅaÆÅ gMÅaÆJÀÒÉÁKÆ8Æª_e Á%_]{Áó½ [	ÆGÂ ezÆÁJÉ!< ÿ ÀÁ
 ÿM_0O
 þC()-4a@ þ309 ÿTg0 þB>1!9Y
³ ÿ?pþQ?pþ
^_e ÁLeÂ!GÉ	Å ÁJÅ@É!<.¦ek^.jg3ÂõÅh-b cA49

?0± ÿµ*M?pþN@ þ3$@ þL`
o þ	()fTg0 þ>Û1!
×[Û1­FTF?pþ¯þþ'+A®'R
0@þK4I'ïþoMPvÿ3þ	Tg0þ8M*Éx1*-±ÿíC1!®c+ÿ®?pþþY
@þ?pþ

P04' ÿ	4-R
 þ;+þþÿK?pþ[_0E'9p+9d+F52
 þv þ j 0kKh) j /k8 j 0kl9± þ30A?pþQ?
d+z(F?0IO
 þK4R
 þ!T$p
? þ	@ þ' ÿ®()PP.1 ÿpýS?3þ þK
04 ÿI48?I?pþC_0'
p+9d+F9(tI
 ý± þÿ	4R
 þ0
 þ'% ÿ'I± ÿ	v ÿ
@ þÌ
 þÿ° ý?0 h þoM
 þ5()9\+Í8(
Tg0 þ[	± ÿmxlF± ÿ0U?pþ8?EY\+«(9ã
 ý± þÿm4R
 þt
@ þ'% ÿF'K'6 ýE?K!
ü[þ
 ÿ0± þ*/ ÿpþN
34f
 þoMPv ÿpþNTg0 þ5Û8± ÿ´
 >1!6+c ÿ	Tg0 þLÛ1*/d+FNv[?Mp
3 ý´
? CCh)?3þ
?0± ÿÛlO± ÿKvyN?p
3 ý?KvxPh)?pþ,?± ÿYvvdlO@ þfv ÿ
@ þO
 þÿM ý4?P*± ÿId+F,Û1*°vv*
Ñ?Mp
3 ý?w1*%± ÿ0®v C?Mp
3 ý?Xv Q þ8'O þ± þ`_a
 ÿm ýE?P!QT$p
? þI4þ

P04' ÿ0- þ[R
 þp+-þþÿ	\+FQvQ± ÿYÑ*1± ÿYÑ*x8± ÿ´
 Q1* >7± ÿ0	w1v
* C7± ÿKw1*VvyI± ÿmv C1*
v >I± ÿ0Gv C1*Vv± ÿmvdÑ*VvÛ8± ÿmv Q1*± ÿmvxI± ÿmv Q1!<c ÿTg0 þ9>1*/\+FNv*Û1*± ÿC8?p3 ý?
ÑL@ þFv ÿ0
@ þO
 þÿ0 ý4?P*± ÿ0P\+F
 >>± ÿ¬
 QN?p
3 ý?Yvy7@ þF'!<TFp
? þF4þ

P04' ÿ0L@ þPR
 þ;+þþÿRd+FPv± ÿõ
 >1*gÛY± ÿõ
 >1*JS± ÿ#vy/*6x	± ÿõ
 Q1
* CK± ÿRw1*O± ÿZÑ
 ÿ0Wvy/! ¾®É	É?gMÅ@ÆKÀÒÉÁKÆek^.½gMÂ Eºb T$3
±
? þL'4'4
t ýÿ_a
± ÿ
 þN(6?pþ>
P04' ÿ0$v ÿ
Tg0 þfÛP± ÿ×
 >+ þ@ þ>þ'þµ
! d[v ÿ3ýP± ÿ\þoM
F{Í44
o/ ÿYE± ÿM.:;3±þ'*a2V
02' ÿ
 þ þ± ÿP'R?%?pþ4×[Ûm ÿ&Tt0v þUÛm@ þY'4'2
4Z ýÿ`_a
± ÿYhb)á y é yMvY± ÿµ*-v ÿ

P'F
 þ
* )cány é yyyMvdlE!5+c ÿYTg0 þ¦>1*°?Md
+ þ± þ*°?pþ>þ@ þÿ0
 þ5R
 þ;+þþÿ× UW[R Æ ìL± ÿ
qVJ]_^@`»RWh)%?I?pþLh)Mlg± ÿYh)%lV± þE ÿElt@ þLÿO4'4
447 ýÿ0`_a
± ÿg6?pþ:)cáÓy é yMv
v þ±
 þX
! ü[4%?pþF
a4' ÿFv ÿKTta þ¦>@ þLv ýÿ`_a
± ÿ$$?pþN)cáÓy é yMv> þ± þ!
×q>1­FTF?4?%?pþ2PMþÌÿMaZ'W?pþUý4?P()@þ:B()Pÿpým?pþY/3
Pr · ü
 þ
3@ þ*f1143*F4C+f44$ þË34@ þS þG2O
R
 þm' ý±þK?pþïÿpþ+Ðv ÿ4f'þK()K?pþ
{ þ+F4?S'Kþ'N?pþ|V\ÖdMÕ ^@`y`<4Ì
 þI/v ÿpýQ(,?3þ j Hfc~k± þE ÿ*µ'	
+ þ
j Hfc~k	± þ ÿ!Nï

 ÿ0
 þÿ'þK ÿZ?pþCd+f74R
 þ þ j V!^k TFp
? þ@ þv þ± ÿ8
P04' ÿ0>@ þCd+ ÑY± þ3
 Q
 ÿRTta þS±
 ÿRd+zÑC± þ3.
 QKv ÿTg0 þx1!m'h üf4þ ÿ± þ*g ÿpþ
304R
0 þ\+ >
 þE3
±
 C1*°± ÿK\+ÉvÛP± þ3Lvxv ÿYTg0 þ>Û1! l|,
E?U(O?pþ þ7
04 ÿ$45R
 þp+-þþÿG± ÿ
3 ÿþ0-±þE ÿ	(J?3þQv ý? ?$4-?pþNÌ
 þLA?pþ j HFc~k
j Hfc~kI± þ ÿK± ÿ	
3
 þE ÿÉþo/
 þA?A-Mz
±
 þ?
 ÿM9_kÿÉ
 ÿpþ+Ív ÿ40'þ!,Tg0 þ°
 >>± ÿ0­
 C7@ þYÿM9þ þ± ÿ
 þ
3@ þ8?3þU ÿS?± þP?3þ j Hfc~k± þE ÿQ03ÐÿMQ?pþ4Q
$
R
3 ÿþa!Ch)ï
{ þ ÿ0Sd+
?3þÌÿpþþm'YP±. þ ÿpþ
0E4' ÿmR
 þ;+þþÿR4 j Hfck	± þ ÿQ± ÿm?pþN
3
3 ÿþ0*
+f?4
?G4f@ þ$b$þ
þmv ÿGTta þ8Û1! l ¾®ÉyÉLgMÅaÆKÀïÉÁKÆek^.½gMÂ < GevÁ%ÒÅaÆ¡[	Æ	 ¼ b üf()þ[þvÿpý
?3þ>'4'2
V ýÿ_a
± ÿ
 þ*545()3
3 ÿ	?0$?pþN@ þ30$@ þLv ýÿ`_a
± ÿ>hb)cáqy é yMvdlE!

×FM­FTtNpþþPÿpþ-×fQ@þË13@þt
ÿ4pþEvÿpýfTg0þ£>f03MjÿM6Tt0vþAÛ1!6T$?2J4gRþ
3þ-+-þAÿ4
ÿ3þþ'>
0
 þF ý?0PO(b,+F?4
E|
? V HOI  ?6R
 þþÿP02 þµ!gÎ-P0@ þ5\+ØvA± þ30,Û1*
v9± þ30ï
 >1*f± þ36Ñ*± ÿL[± þ309vyf'[@ þþ9?pþ-@ þ30_
! ü[4@ þ3t?M\"
+ aUW[ HOI  ìFh)\+
vdl6± ÿP
  UW[ H=I,Û h)\+#lg'LR
 þ5,þ'96()<<?pþ5?pþ9 ý?! 9*ÒÅzgMÅaÃe$gMÅ

 ÿ« UW[ H=I,l ìLh)\+«vdl6± þ3
  UW[$ì Æ ìLh)d+ÛlE*1?pþ@ þ
[	Æe¦ek^.jg3ÂõÅh-b c ÿP40
 þ,?3þ,?±

¨ JÎ

ª

mknpokmkq

2$ÌÿM4
þaþL'Rþþ3MV!6cÿK'f
þ*0?3þ>'Rþþ3MK4$Ë13þLP4
!Xü[4ºÿM2
þ0þ

 þþ03M05@ þL'2'4
4	 ýÿ0`_a
± ÿNhb)¤áqy é yyyMvdlE!
×[x1­FTt&þ'Y×Qx1*[
P0@þm?pþm_0 j 'µk®
43ãÿ¸h)()UÛx\:;'þ®r · üfEl+F4?Ó?3þm@þ
ÿ

23Ì
 ÿG+F?S?4Q4R
 þ9h)()Nx\:;'þr · ü[ElE!üÉ@þpþ40þ>
þ3M?M\+FN	d+þ
4p
3 þ7(b j 'µkP[?pþ8} þ7(6?pþ8r · ü¶ÿ
@þþ!Fcp[404vþA?f?3þ74(6?pþI
03
2O
 þ(F?pþv ÿ0
@ þO
 þÿ9 ýE?Ì'G?3þC
03Z4O
 þ($?pþC'A ý?¯p
 þ
@ þ@ þ
P@ þh)Fv ÿ0
@ þ þ$ þEl-5?pþLr · ü«} þLv ÿ0
@ þ þ!-c
³ ÿpþN?M34	P±. þ>?4A;+-:;
43ã
 ÿ

P04' ÿ7()gd+FAv9?Mp
3 ý
? CIh)03M_ÿOÛlt± ÿCvy[?Mp
3 ý?CvxIh)03M_ÿAvvdlJ(0Tg0 þAÛ1*
 ÿ0md+FvI± ÿRÛ1*t± ÿGK?Mp
±
3 ý?RÑ(9Tg0 þP>R
 þ
3 þI?pþ þP þI2t?3þPv ÿ
@ þO
 þÿ
v ý?P!Ah)ï
{ þ[M ÿµ]<
@ þF%3M6?3þ$'0 ýE?POR
 þ
3 þ j %0k[2*18p
 þ
_ ÿ ÿµ*
4+-d1Pv!^y	()L?pþY! l ( ÷&c(, ÿpþP
 ÿ4p
 þ[?pþI@ þ30[(- ýE?PQR
 þv ÿ3ýCv ÿG%?
a þfh þ! ýM!{
*  UW[ ì Æ ì ?d+F<0`þ þÿ,
 þ3MP
 þþ<v ÿ?3þ$;+->0v þ*03<+-þTÿpþþ
'N
 ÿ4p
 þO%?7 þO(a@ þ34ElE*?pþÿI
 þ9
 aUW[ H=I  ìfh)d+´vdlt± ÿ
  UW[ H=I,lÛ h)d+&ltv ÿ
Tg0 þÛ>Q?d+#?pþAR
 þ'<
v þ3MI(°41?pþ$ ÿ
@ þO
 þÿM ý?0P!  ø¯[	Æek^.jg3ÂóÅzh-b c
250@ þÿA(b±?3þ j @ þ
kP
43Ì
 ÿ09?05?pþQ4O
 þN
0 þoMp(g?pþ þQ;+- ý4?P
z
 þ?
 ÿM5vÿ
 þ þIh)?3þ5?± ÿ	Pv ÿM2
 ba3
3 ÿ0El<5r · ü=} þQv ÿ
@ þ þNhi þþNTg0 þB>lE!

3M0þ(f3Ma44G43pþ8@þfÿd+ Mþþµ!mrMÿpþ*<þ
4-?| UW[ g Æ ì ±ÿ
 UW[ H=I,Û @ þcÿM5
0 þþ!<TFp? þ@ þ()@ þ*M54,þþ±ÿA'P
ÿ43þ9?pþQRþ
þÿý±þN(tvÿ0
@þ

@þ04
 ÿQhi! þ!*M(i4 þYþl6?pþ	Pp
 þ;
! aUW[g Æ ì[Pp
 þcÿM ÿpþ!<rMF?pþQ@ þ3Av ÿ	Tg0 þB>1*
>> (  UW[ H=I,lÛ ]^A@ þ2
 ÿ--+ þ þN+$ ÿpýYhi! þ!*M(i4 þYþEEl,(b$?3þQ} þ>ÛxIr · üf*/± ÿ0Yxy 
+þ@ þL+$ ÿ3ý(b$?3þ>} þNxr · ü[!
Â 4  º½»
rOv ÿ2*-
 ÿ04p
 þ?pþSPoM483 0@ þa þU'R
 þþ3MJ
! aUW[ HOI Û ?Md+FC ( O: çÁ2½)½`Á)ºv
.
·
þ û¼¼» û\± þï
 VM]1^@`g ÿ7} þ<xfr ü®0v þP,hi± þE ý±þId± þ
 >yF$
3 ÿE=l ³JT$?04V4 þ/4þt73
E?
(%?pþF
 ÿ
 þ7 ÿ%3M;aUW[ HOI Û ]^,()2 þ)þ9þ!<rM
 þo/a þ¦
* ý± þÿ?pþ$a4I@ þ± þ`_°
 ÿ
4O
 þÛ
(  UW[ H=I,lÛ *g± ÿ® ý±þÿI
34W3 þ>'S@ þ± þE(bmU4 ÿpýU þË1p
3 þÿ
 þ($ þ ÿv ÿ3ýK
 þE'

34v ÿvÿpýfv ÿ> ÿ3þ9?62~$
_ þg?pþ-R
 þ;7v ÿ>
 ÿ4p
 þ04L þt4O
 þ-?± ÿIt±. þï
 qVJ]_^@`»R
'P@ þ± þE(bC ÿpþ>v þ ÿv ÿpý8R
 þ'!
{ þ
 ÿ0
43p
ï
 þ?2[@ þ
 ÿ1G30PP} ÿpýM*µv ÿTta þÑ*J?pþ(i'þ'>v ý? h)0@ þ ÿ
3MP þ3El>()ã
 þ± þXR
 þ'*A30 ÿµ*9± ÿ0&R
 þpZpR
 þ!#c ÿ#Tg0 þSÑ*AP4P3O
 þ
·
?Grg4'~:;L
" þ° ÿ0 þr ü 273@ þW()O
 ü6TÉ± þE`_a
 ÿ®(FW
" þ'% ÿ þ0R
 þþ!³[R
 þ'
V  è4è v Å  á â  4fP'þG() ?4f0 þ8R þ
3 þI[2T ÿMN
 þNQ?4f4O
 þ8+Fp
? þ?3þ[[+-34
Rþ()þ>'UaU'9@ þ± þ`_°
 ÿLR
 þ()Ð830v þI0044
 ÿ0f(A?pþv ÿ
@ þO
 þÿ
·
 ý4?h) ÿpþ7(bT
 þ
?S4P4± þQ
 þE'f024
 ÿalE! þ
 ÿ±Q
 ÿ4p
 þE$± ÿUþ7 ÿ± þ
'43 ÿR7()3M3@ þP+-.a!	c ÿWTg0 þCÑ* j Hf ÿpþkGO
 þ± ÿ
 ÿU@ þ± þ_a
 ÿW2L@ þË13@ þV*J! þ!*O?pþ
 þ
 ÿ0v ÿpý>R
 þ'54-8E3
 ý3± ÿþþ	'IR
 þ[± ÿ · ÊGsm(b-?4A43 ÿC± ÿ0R
 þ;
2!
ü


õ

G  ¸k¶$ùUø#·
%

T$?pþþG?CRþþÿn ýþ	3þf(>@þ
þÿKþþ
?ÍÿÍ/pþ[
?pþ
.1ÿpýM*f±ÿ þ±þÿÍÿÍ/pþ

3
? þ
./v ÿpýC(,4''E03MþK'/'þPhi×f}P±ÿ3ÿV*gvww/vdlE!NHTþ±þ?pþþ*a?pþþ84f±þY44'þ7vÿU?pþ
4þE3M@ þ%3M>/p
 þ6
3
? þ
./v ÿpýUa4 þG'U'/'þPN?0>
?± ÿ3ý±þ!T5+-î
 ÿM0v þOþo/
 þ4 ÿ
·
·
@ þ?pþP@ þ þE
?Z( .4'.1m± ÿ0 .Wh~vwwlL ÿWv ÿ0
@ þO
 þÿ<@ þ± þ_a
 ÿW± ÿ0?>(
úzubé:S)ªTç®
  O-é`g,BE;EE^EEBBQ\B^VJdgB-B\Oi;B^iB^'/BB^Q^[B\fB^5

¨ ª

í[î

t}-m{t/s$q

Å NH=I,JÖ  K

±ÿ0Kc+ÿ4±ÿ
þ

VÅÁÆ JH=I
aUW[$ì Æ ì
Vè I,
I  I
 V3UVÖ
V I Å
 V3UVÖ
V  è4è
aUW[$ì Æ ì
V HOI 
a UW[ =H I  ìQRaUW[Oì Æ ì
Vè I,
I  ÌI é I Å
 V3UVÖ
Vè I,
I   I v Å  á â 
 V3UVÖ
V  è4è éH=I 
a UW[$ì Æ ì
V  âã I
a UW[$ì Æ ì
Vè I,
I  I "  è4è
a UW[$ì Æ ì
V I Å "  è è
a UW[$ì Æ ì
Vè I,
I  I " H=I,
 3V UVÖ
Å
V I " H=I,
 3V UVÖ
V   4 ì
 3V UVÖ

í

os0ïðptÊ{añ

l ñqMð î
í a

Å H=I MÖ  

 ÿK"Wþ'%ÿþ
±

aUW[_R Æ ì
 VMUVÖ
 VMUVÖ
aUW_[ R Æ ì
 UW[ H=I,Û
 VMVU Ö
 VMVU Ö
aUW_[ R Æ ì
aUW_[ R Æ ì
aUW_[ R Æ ì
aUW_[ R Æ ì
 UW[ H=I,Û
 UW[ H=I, Û
aUW_[ R Æ ì

Å'2 

3
±ÿKcÿ4±ÿ
þ

 UW[$ì Æ
 V3UVÖ
 V3UVÖ
 UW[$ì Æ
 UW[$ì Æ
 V3UVÖ
 V3UVÖ
 UW[$ì Æ
 UW[$ì Æ
 UW[$ì Æ
 UW[$ì Æ
 UW[ ì Æ
 UW[$ì Æ
 UW[$ì Æ

ì

ì

ì

ì

ì

ì

ì

ì

ì

ì

Å 
K

±ÿ0K"Lþ'%ÿþ

 UW[g Æ
 V3UVÖ
 V3UVÖ
 UW[ g Æ
 UW[ g Æ
 V3UVÖ
 V3UVÖ
 UW[ g Æ
 UW[ g Æ
 UW[ g Æ
 UW[ g Æ
 UW[ g Æ
 UW[ g Æ
 UW[ g Æ

ì
ì
ì
ì
ì
ì
ì
ì
ì
ì

Tg0þ7Ñ­9sþÿÿpýRþ'5+F4?	?pþL(i'þ'$@þ±þE`_a
ÿYÌþ?M1V!

· þ.þIB!qh~vwwlE!ZÒ-?X(F?pþ@þCaþE7@þK%3M8@þ±þ`_°
ÿ®(f'();+A@þY()þP3þ
þf?pþQ?±ÿm0±þ8ý±þÿ!>HTþ±þ?pþvþ[?pþ7+-.G4Fþ4þµ! · .4'.1U±ÿ · 4.
3 þ?3þP10Ô
 n%:;
4
3430Q'\þo10@ þQc ÿ4± ÿ
 þ± ÿsJ± þÿ3þNR
 þvþ!T$p
? þG@ þ þÿL±ÿ
v ÿ

 þO
 þÿ± þ ÿ>(F/p
 þ
p
? þ
±. þg?0gM
 þVa1
.:B1:B0/
Y
. ý0
03M ÿ0J(/_
o þ
%v ÿ*\E?pþO?± ÿü6TZO
 þ;:;'R
 þ
`_a
</p
 þ1
p
? þ
.1 ÿpýNt
+ þAMM!gTFp
? þ-v þ ÿv ÿpýF
 þE'
30O
 þ>1L?pþ4g ýE?«@ þ-þ3
 ý±þ-p
 þv þ ÿ= <0 ÿJ ÿ7f@ þ@ þ@ þÿ ÿI2P44t'[r · ü[

4 þXs/T · h)03833ÿ04±. þC3M7344 ý±þÿI+-.°*,?pþ®3O
 þKmv ÿ3ý þCs/T · lE!OTFp
? þ+-'~:;
@ þ
4O
 þm
0v þo/p#(L?pþ4	v ý? 4?pþO
 þm	?	(L'Q@ þ± þ`_°
 ÿµ*f4?Mp
3 ý?
?pþ þP04
[@ þ3	@ þaý11V!±HfþR?K+þW?d± þWX4[@ þ3C()\
 þp
 ý±þW3
 þ þ ÿµ!
×fd
+ þ± þ9
+ þ$Mc
 ÿM<?d± þF± ÿPv ÿ
 þO
 þÿMv ý?¶'R
 þ
`_°
4N4 þI(b:
 þp
 ý±þf ÿKh)()
830v þI ý±þÿI± ÿ ü6TÜ70R
 þ;:;'R
 þ
`_a
/p
 þ<
Ep
? þ
./v ÿpý=l ?,?3>?4LR
 þY()34'()3
 þ
 ÿ#()(i3M3M@ þU@ þ þ
E?µ! · þ.É
 þC!]^C
E?Ó
 ÿ4'(L
 ÿ± þÿpýW30 þU þ'
r · ü[*6?pþÿ ý±þÿpþvÿpým± ÿZþ'vÿpýG(i3
3 ÿ
 ÿ7?IPX(b?pþC%'~:Q'S?pþC@ þv þ ÿv ÿpý
r · ü#± ÿ7R
 þp!tc(?pþAp
 þ4@ þL(i3
3 ÿ
 ÿ8
± ÿ8R
 þ,()3
3 ÿµ*?pþ>aLF?3þ@ þ«(b AL3?± ÿ
h~vwwlE*6+F?2
ï
? ý3E± ÿþþ7?L?pþC þ ÿ ÿpýK4 j ( þ!^k ü[?M3
3 ýa
? ÿMU
a þo/4;m@ þ34L@ þ
\12p
 þµ*?pþÐý±þÿpþþ:;± ÿ0/:Bþ'5
E??09?pþP3
 þ
R
 þ$R
 þ,'7R
 þF
a3M ÿ44
þo/
 þÿ0± þ!´c ÿq
 ÿ''	' · þ.f
 þ	!*5+ þm?d± þS(i± ÿ0 þ044
L
 þ/4p
 þÿ0
 þU?3M
 þ?M/@ þ¯þe
v þÿP±ÿV*9v ÿX'O
O
 þK
 þ*9??3þ®@ þK30'±ÿ44WP@ þ¯þe
 þÿ?± ÿ
'V þ± þ`_a
 ÿY(b 

?V!
T$3
? þ@ þL4$4P@ þ4þU@ þ þ
E?Uv ÿK?3þN$
_ þ4K(6
44
µ02± ÿ3ÿv ÿpýM!Oc ÿK02
34*Mï
{ þ4S± ÿ
|<'}4ÿFh~vwwl7?±þCYOþ?M/R'Gvÿ
@þÌþÿ44Uþ'8±ÿWý±þÿ]^7a4±ÿ'Upþ
2pþP+F?pþ?3þL'
 ÿpþ+É
 ÿ0>'S?pþ02± ÿµ! üf
 ÿ0>@ þCp
 þR ÿ0m+Fp
? þÿR?3þÜ
 þRþ
8 ÿM712þ

þv ÿU;1R
 þL(O+c ÿE4± ÿ
 þNR
 þp!9T$3
? þ$O
 þ?M/U?F'O
 þ>2P444þ-+F?	3Mq
  UW[ H=I,l ì
 ý4?K!Ic
³ ÿpþ`Rþ@ þÿ
 þ4[?N3MLO
 þ?14Q()N@ þ
± þ?pþN?± ÿm @ þ
± þa4± ÿ!

¨ $

ª

mknpokmkq

üÐÿM?pþI4L?83M8±þ`_a
4ÿWOþ?M/®4Üþo/@þ@þZ3vÿpýK?pþC(bEP<()33ÿ4ÿ>vÿW?pþ

/pþµ
?3þ
./vÿpý44þ3M@þ!

· üfQ?d±þIþþÿm?d+WÿS'	þIþþ
4±þ
@þþþÿ4ÿA(V@þ
±þLý±þÿ504±ÿ0=<''þýþLhiÒA3M.1?Eµ*°vww>@?zAL0±ÿM}/*Vvwwx@?°Î5Oþ
Ï«ÊS.d/
?µ*tvwwC@?0rM±ý±þ*VvwwClE!-r · ü´04±ÿ09?d±þQþþÿ	3@ þ%?(b5834 ý±þÿ5
R
 þ`:
·
ÿ	±ÿ	
1vÿ4ÿµ!6rMLþoM0þ*MrM±ý±þ]^7h~vwwClA
: þ/v ÿpýPr ü´ ý±þÿ5()$
R
 þ± þ
ýOþS04/vÿpý+þ@þUÌþÿÿ3þq%d±þ! üÄ4P42;Z+F?X3M+9.X2?rM±
 ý±þ[30O
 þ
ý±þÿ]002±ÿ5@þcþo/@þþU 6:;3M'P/!-W
H þ± þ?pþ þ*arM± ý±þ_
 ÿ3þ± þf4
3 þ-± þ`_°
 ÿ
(<?pþ@þ702±ÿ!QÙQ4P±ÿG±ÿG"$þÿ
p
? þv ÿXh~vwwl[ þ þÿ[	O
 þ?M/U()N7344 ý±þÿ[
E`:
ÿÿS?N30Oþfr · ü 04±
 ÿ![ÊS300 þL ý±þÿL
1R
 þþ71Y./v ÿpý	
 ÿ['	()d0
þA?pþ?þÿ14 ÿO
 þÿ!6T$p
? þQ
R
 þ ÿ	''EþýC4-4a þO
 þÿþ1804± ÿCp
 þ± þR
 þ-+F?M
P± ÿ134 þ4?pþmr · ü[!ØT$3
? þU@ þ44 ÿ?q'Z?pþG+-.#p
? þ@ þm4P?0C?3þ&@ þ þÿCr · ü
'± ÿ(b ÿ8?Oþÿ3@ þC832 ý±þÿ
1v ÿ4 ÿµ!RsJ±. þ+f4 þ*<v ÿ®3MI@ þ þE
?µ*-Gv þ ÿ/:
v ÿpýCR
 þ'N?N4QCE#
 ý3E± ÿþþ j ( þkK()N'O
 þ7304 ý±þÿQ
1 ÿ ÿGR
 þp
'± ÿ(b7?3þ	r · ü +F?4 þÉþÿ3MEv ÿpýS
1 ÿ ÿµï
! ü[?Mp
3 ý?®%?®?pþIO
 þ?M/&± ÿ®3M
ý3±
 ÿþþ>?045
Ev ÿ ÿV*1?3þF'43 ÿK45P± ÿ13µ+F3
? þ@ þ53MF4?
 þÿ4@ þ	3M'Pþµ!
ü[QOþÿ4ÿpþmvÿU?3þ8vÿ'/3
ÿU(<?4f0Rþ*%r

· Ì
 þ-(0?pþ5@ þ-@ þ
 þÿ6þ þ
?I ÿI ý±þÿ<
Ev ÿ ÿ802 þV()P1± þ`_°
 ÿIO
 þ?/:
/!LrMÜþoM0vþ*%s#þþP±ÿmDQ3M(þþKh~vwwÑlN13þt?3þNý±þÿ]V@þP±ÿ2
Q+F?mC(b44
444-'¬Djþ'
 ÿpþ>h)E?pþF?± ÿUr · üfElE!<TFp
? þ± þE(b	'
 ÿ
? ÿ} ÿRh)c ÿ2± ÿ
 þ\l9R
 þ':
þ*°+F?2
?Y0@ þ± þÿNpþ01
.a*%3 ÿpý/p
 þJ
Ep
? þ
./v ÿpýM!Qr3M?pþ@ þ*%
s þþ± ÿSDQ3M( þþ83
3 ý±ý±þ'
@þ
\± þ()É()4v þP± þ`_°
 ÿ30v ÿpýLp+9O
 þ?1­g
 ÿ
 þ0Avþ ÿv ÿpýM*± ÿ8O
 þ?M/C± ÿ:
ý3-'I?A3 þ"fPp
 ý±þN± ÿ{ ÿ?Ôh~vw QwlE!-Ò-3.1?0Sh~vww >lA± ÿ0«
 ALa± ÿM}Ch~vwwxl
30O
 þF ý±þÿ-a4± ÿ<@ þf@ þ@ þ@ þÿþCV
 6:;3'P/*M± ÿP?pþP0M@ þ94p
3 þ,(µ13
 þ0
3
? þ
.:
v ÿpýXþ%Q±
 ý2
S0R
 þþC(7?3þ @ v ÿRhi7344 ý±þÿEl	04± ÿ!ÉT$?30?3þ@ þR4	 ýd+fv ÿpý
@ þ
 þ3
 þÿ7(b8M@ þv ÿpýY834 ý±þÿ7
1v ÿ0 ÿ1ò
 þo/@ þv ÿpýK02± ÿL
 6:;3M'Pm± ÿ
±þ()/v ÿpýP?pþ +F4?S/p
 þt
p
? þ
.1v ÿ3ýM!L³N3MF+-.Y030445 ÿS?4f@ þ
 þ3
 þÿ*µ± ÿG4'f
 þo1þÿ0
*VR
 þ
3@ þÌÿM ÿpþ(-?4Q@ þ/3[@ þ@ þ
?ZM@ þ@ þY
 þe
 þÿ>ÕÖ± þ`_°
 ÿm(b7 ý±þÿ>?
 þ
 ÿV!
r vÿ2*6?pþ@þY@þY4þÿ±þYOþ?18()P
ÿ''ÿvÿpýG?pþKRþ?/I(Qý±þÿ*-+F?2
?
O
@þ[
0þOþÿI'>þ±þ`_a
ÿ±ÿ@þ(2:Bþ0!grM?þo/aþ* · ?? ±ÿT#þÿ3ÿ3þÿ?M'}
h~vwwxlgp
 þv ýÿ7 ý±þÿO?OR
 þL'1
24d+F* þ! ýM!*( þ;8
 ÿ± þÿ ÿ*N þ''4
vÿ3ýF?pþA ý±þÿ]

 ÿ!<W
H þ± þ?3þ þ*1?pþFa4± ÿp
 þ ýÿpþ9ã
 ÿM9RþF0 þf'7± ÿ4
0þQ± ÿÌ
 þÿ3ýv ÿpþþ9204d+F
vÿ'K?pþ ý±þÿ7R
 þ(b þ?± ÿµR
* þ'R
 þ
444U(,?3þP ý±þÿ7?± þ'U0!Y
³ ÿpþ'43M4 ÿG2Q'Y3 þ
4d+F-?54d+PoM483i
 b$þo/4044pYhirg4'3%Ï«#
T þÿ3ÿ3þÿ?M'}*µvww QlE!9×fd
+ þ± þ$?29'23M ÿ
M
 þT
 ÿ[44d+«(bN
 þv ÿG
?0± ÿpý±þNv ÿY?3þ702± ÿµ*a30
?Gf?3þ80 ÿKNp
 þ þ4 ÿU(<
 ÿ0!
üÐÿKR
 þ4v ÿpýIþ ÿ4± þL+9304C
 þQ'
30 þNv ÿ2$
 þÿpý ÿpþþv ÿpýI(O'/
4µ4+fA+F?fþe
 þÿ
@þ± þ_a
 ÿY()þf þ7 ÿv ÿpýM!
üÌO
 þ?M/Í(b þÿ3Mv ÿpýZ0?12
4&%3
3 ÿp
 þÓR
 þ?/	(I ý±þÿY2 j `_a
4[0?/4
k
h · RþKÏ Ù[ÿµ*7vwwwlE!±{Í?Í`_a
4[0?/4
*F832ý±þÿ	Rþ?/K4C@þ''E4
þÍ
`_°
4V()
þ[Rþ;+þþÿS?3þ8ý±þÿ!NHWþ±þ?pþþ*%+F?3þÿîþÿ
3$ÿþÿpýþ±þþI3$ÿ±ÿ2
0þ


30P'±ÿ
 þ*`_°
40?12

 ÿpþþJ'FR
 þ<
0 þÌ
 þÿþ>+F?N@ þ± þE`_a
 ÿ7± ÿ j 'þþ ÿpýk
()F þ(b:B@ þ0>hBÙQM ÿ þFB!*JvwwwlE!

¨ \ì

í[î

½õ

2Ý ¸·¸

):ú

t}-m{t/s$q

í

os0ïðptÊ{añ

l ñqMð î
í a

 !#"

¸ ÷ ù

$&%')(*+*,')-/.(10230%465879%:;0=<>58(%	:;?A@B58C284D58(E@F0@HG28?A:;53*I4JKL0D.?(CB23'M:;')?2ONP<Q0:/28C6C10RS?58(B7T?(C658(UN
*,'V:;?-W*X530(B7><>58*X.Y@F'V0@H23'ZB?A%')(*X7&RG7,*\[]'^?CB?A@*X?A[B23'Z@B:X')C58-W*X?A[B28'Z_`o5a:;?A@B58CB234
:X')7X@F0(B7X53b'J $c(
?A@@:;0?-;.D*,0a:X')7,023bU58(1%d*X.1')7X'^@]0*,')(*X5e?28234a-W0(1fH58-W*X58(1%g:;')hG58:X')Rg')(*X7\587i@:;')7,')(*,')Cj.1'V:X'JQkl(j7XGRdN
RS?A:X4Z<Q'&.?)b'c7X.10=<&(d*X.?A* -W'V:X*X?58(aRS?-;.B58(1'\23')?A:;(B58(1%90@]'V:;?A*,0:;7 ?A:;'\?T@:;530:/5]mn<&53*X.S(10T:;GB(UNP*X58Rg'
:X'Vb'V:;53oH-V?A*X530(Hp 7X?Aqn'>*,0d@]'V:Xqr0:/R	JLks(a0*X.1'V:t<Q0:;CB7VZ<&.1')(
-W'V:X*X?5e(uC')7X53:;?A[B28'i@:X0@]'V:X*X53')7Q.1028Ca@:;530:
*,0+23')?A:;(B58(1%1ZA*X.1'V4d?A:X'i%G?A:;?(*,'V')Cg*,0+.1028Cd@]07,*sNv28')?A:;(58(1%1JwK\.1't@:X0@]'V:X*I4^-V28?7X7X')7-W0(7X58C'V:X')Cd.1'V:X'
?A:X'ckl(bA?A:;58?(-W'c?(Cax>')7,@]0(7,'Jy')?A:;(58(1%^0@F'V:/?A*,0:;7tz è;{I|}{v~8{=ZUzr { Å Z1\z èX{l|{I~8{ é e { Å/ZU?(BCa\z èX{l|{I~8{ B Å~3A âl
<'V:X'aqn0G(C*,0@:X')7,'V:Xb'a@:X0@]'V:X*X53')7M58(')53*X.1'V:0qi*X.1')7,'Y-V28?7X7,')7VJ10:
  X {v~ ?(BC   |  FZ
<>.1'V:;'>*X.1'V:X'9587Q?M7X5e(1%23'MmRG23*X5rpl?A%')(*iU$@B28?(Z\z èX{I|}{v~8{s  {IBZUz e { Åv  {I ?(C
z  ~ 4 ì <'V:X'&qn0G(C
*,0
@:X')7X'V:Xb'Tkl(bA?A:;58?(-W'T@:;0@F'V:;*X53')7VJ$&2e2H0q*X.1'+?d@B:;530:;5F:X')7XGB23*X7t?A:X'^58(C'V@F')(BC1')(*0qw*X.1'+7X53V'T0qw*X.1'
U$?(CD?A:X'+*X.'V:X'Vqr0:;'^?A@@B285e-V?A[B23'c*,0
?(4	U$*X.?A*>.?7\[F'V')(Rg0C')2-;.1')-;')C0:;58%58(?28234J
 't*X.1')(dC587;-VG7X7,')C^*,:;?(7,qn0:;RS?A*X530(B70qB28')?A:;(58(1%>0@F'V:/?A*,0:;7?(C^*X.')53:w-W0:;:X')7,@]0(C58(%>?>@B:;530:;5
:X')7XGB23*X7*,09?\@:X0UCG-W*@H28?(JLK>.587?CC:X')7X7,')7] =|~  |    ZA<>.1'V:X' RG23*X58@B23'?A%')(*X7w')?-/..B?)b'*X.1')53:
0=<&(@B28?(j[BG1*c*X.1'gRMG28*X58?A%')(*9@B2e?(jRG7,*c[]'M:X'WNPqn0:;Rg')C6?(BCj:;'Vb'V:;5OoB')Cj*,0DC1'V*,'V:;RS5e(1'M<&.1'V*X.1'V:
RG23*X58?A%')(*T@:X0@]'V:X*X53')7T?A:;'g@:X')7,'V:Xb')CJgkI*T<t?7+C587;-W0=b'V:X')C*X.?A*T0(234zAX{I|}{v~8{=Zze {I  ZzAX{l|{I~8{l¡ e {I ¢Z
?(CDzAX{l|{I~8{;£   ~33¤la@B:X')7,'V:Xb'T*X.1')58:\?g@:;530:/5H:;')7XG23*X7tqn0:>*X.5e7i7X53*XG?A*X530(J
58(?2e234Z)<'@:X')7,')(*,')C+(10¥b')258(B-W:X')Rg')(*X?2A:X'Vb'V:;5OoH-V?A*X580(+?23%0:;53*X.BRS7]qr0:L?282-V?7,')7L58(9<>.58-/.9*X.1'
?i@:/530:;5:X')7XG28*X7?A:X' (1'V%?A*X53b'Jkl*<?7L7X.10¥<>(+58(9[]0*X.T*X.1'V0:;'V*X58-V?2?(C+')Rg@B53:;5e-V?2-W0RS@B?A:;587,0(B7]*X.?A*
*X.1')7,'?23%0:;53*X.BRS7\-V?(E7XG1[B7,*X?(*X58?28284a58Rg@B:X0=b'+*X.'^*X58Rg'M-W0Rg@B23'W¦153*v4Y0q:X'V b'V:;53oH-V?A*X530(D0¥b'V:9*,0*X?2
:X'Vb'V:;53oH-V?A*X530(Eqr:;0R§7X-W:;?A*X-;.J^¨ Rg@H53:;58-V?2:X')7XG23*X797X.0=<')C6?7TRMG-/.6?79? © NP[B582828580(UNPqr02eCD7,@]'V')CG1@J
K\.1')7X'>?A:X'&5e(53*X58?2U:X')7;G23*X7VZ[HG1* -W0(*X58(G')CS:X')7,')?A:/-;.Y?230(1%+*X.')7,'&285e(1')7<>582e212853')234[]'>?A@@B285e-V?A[B23't*,0
?a<>58C1'+:/?(1%'M0qQ58Rg@]0:X*X?(*>@:X0[H23')RS7VZB5e(-V28GC5e(1%g?
bA?A:;53'V*I4D0q ?A%')(*9C0RS?58(7c?7><')282w?79Rg0:X'
%')(1'V:;?27,0qr*I<?A:;'M?A@@B2e58-V?A*X530(7VJ
 .1')(23')?A:;(5e(1%587a:X')hG53:X')CZt<'67XG1%%')7,*Y*X.?A*u*X.1'?@:/530:;5\:;')7XG23*X7u7X.10G2eCª[]'E-W0(7;G23*,')C
oB:;7X*VJMklqQ(10	@]07X58*X53b'd:X')7XG23*X7gm5J«'J3Z*X.1'S23')?A:;(5e(1%a0@]'V:;?A*,0:M587T?(U¬Eywp>'W¦1587,*VZ*X.1')(58(-W:X')Rg')(*X?2
:X'Vb'V:;53oH-V?A*X530(	@:;0-W'V')C7)J
KL0	*,')7,*+0G1:T0¥b'V:;?282qn:;?Rg'V<0:XFZ<'S.?)b'
5eRg@B23')Rg')(*,')CE*X.1'g:X0¥b'V:;7T'W¦1?Rg@B23'g0qQ*X.5879@B?A@]'V:
?7^-W0ANP'Vb028b58(%?A%')(*X7?7X7XGBRS58(1%FQ=|­~  |    Zw5J«'J3ZLRG23*X58@B23'd?A%')(*X7M')?-;.<>53*X.653*X7+0=<>(@B28?(J
® 4uGB7X58(1%*X.1'+?d@:;580:;5B:;')7XG23*X7t?(C	58(B-W:X')Rg')(*X?2?23%0:;53*X.R
7VZU<Q'+?-/.53'Vb')CD7X58%(5OoH-V?(*i7,@]'V')CG1@B7VJ
 'j.B?)b'j?2e7,0C1'Vb')230@]')C¯?°Rg0:X'7X0@B.587,*X5e-V?A*,')C±?A@@B285e-V?A*X530(*X.?A*aGB7,')7S:X'Vb'V:/5OoH-V?A*X530(±CBG1:;58(1%
'Vb028G1*X580(JLKi<0&?A%')(*X7-W0Rg@]'V*,'5e(+?\[]0?A:;CT%?RS'Z?(C+0(1'Q0q1*X.1' ?A%')(*X7w'Vb023b')753*X77,*,:/?A*,'V%4+*,0
58Rg@B:X0=b'>58*VJK>.1'i'V4S23')7X7,0(S*X.?A*Q.?7 []'V')(S23')?A:;(1')CSqr:X0R²*X.5875eRg@B23')Rg')(*X?A*X530(S5e7*X.?A*Q?28*X.10G1%.
*X.1'9*v4@]')7i0qLU$c7i?(C	23')?A:/(58(1%0@]'V:;?A*,0:;7i?A:X'+7X2e53%.*X284SC5O³]'V:X')(*tqn:X0R´*X.107,'T@B:X')7,')(*,')C	58(u*X.587
@B?A@]'V:)Z1?(Cu*X.1'9@:X0@]'V:X*I4a587thG53*,'9C5O³]'V:X')(*Tm58*t5e7?g-/.1')-Xuqn0:\?g-W'V:X*X?58(Y*v4@]'90qL-W4U-V2858-c[]').?)bU530:
0(E*X.1'^[]0?A:;CFp/ZF58(B53*X58?2'W¦U@]'V:;53')(-W')7c7X.10¥<*X.B?A*&*X.1'dRg'V*X.10UC10230%4j?(C[H?7X58-+:;')7XG23*X7&.1'V:X'd-W0G28C
@]0*,')(*X5e?28234
[]'T')?7X5e234
'W¦U*,')(C1')C*,0
?gbA?A:;53'V*v4u0qRMGB23*X58?A%')(*\?A@@B2858-V?A*X580(7VJ
G*XG1:X'E<Q0:Xµ<>58282iqn0U-VG7
@B:;58RS?A:;5e2340(¶'W¦U*,')(C58(1%*X.1'?@:/530:;5\:;')7XG23*X7
*,0!0*X.'V:Y28')?A:;(58(1%
0@]'V:;?A*,0:;7/·RS'V*X.10CB7+?(C@:X0@]'V:X*I4j-V28?7;7,')7VZC1'Vb')230@H58(1%Y0*X.1'V:^58(B-W:X')Rg')(*X?2:X'Vb'V:;5OoH-V?A*X580(6?23%0AN
:;53*X.BRS7VZ1?(C	'W¦U@B230:;5e(1%M@H28?(	:X'V@B?58:i*,0S:X')-W0=b'V:cqn:X0R¸:X'Vb'V:;53oH-V?A*X530(	q?5828G1:;')7VJ ¹9(1'T<t?)4	58(Y<>.5e-;.
*X.1'^?S@:;530:;5]:;')7XG23*X7\R
53%.*i[]'T'W¦U*,')(C1')Cj587i[4YCB587X-W0=b'V:/58(1%g<>.1')(23')?A:;(58(%g0@F'V:/?A*,0:;7\<>5e282]RS?A'
?g@:;0@F'V:;*v4
*,:/G1'Z'Vb')(58qL53*i<t?7>(10*>*,:;G1'T[]'Vqr0:;'+23')?A:;(58(%1J
$hG1')7,*X530(d*X.?A* <?7Q(10* ?CC1:;')7X7,')CS.1'V:;'\587<>.1'V*X.1'V: *X.1'>58(-W:;')Rg')(*X?2BRg'V*X.10UC7?A:X'>G7X'VqnG2158q
RG23*X53@B28'RS?-/.58(1'\28')?A:;(58(1%c0@]'V:;?A*,0:;7Q?A:X'\?A@@B2858')C5e(d[B?A*X-;.Emn'J«%1J3Z?70('>RS53%.*<>587X.*,0^C0T<>53*X.
º;»A¼

½9¾H¿1ÀH¾HÁ
0@]'V:;?A*,0:^z  ;W£   ~33¤lBp/Jdkl(*X.1'gqG1*XG1:;'<'S<0G28C2853'd*,0D'W¦U@B230:;'d.0=<Â*,0.B?(C23'*X.587T7X58*XG?A*X530(
Ã 587a58*aRg0:X'E'WÄa-V53')(*u*,0!*,:;')?A*u*X.'0@]'V:;?A*,0:;7Y?7Y.?)bU58(1%![]'V')(¯C0(1'0(1'WNv?A*sNv?NP*X5eRg'°?(C¶G7,'
58(-W:;')Rg')(*X?2L:X'Vb'V:;53oH-V?A*X530(Eqr0:9')?-/.HÅ¯¹9:c587&*,0*X?2:X'Vb'V:;53oH-V?A*X530(jqr:X0RÆ7X-W:/?A*X-;.@:X'Vqn'V:;?A[B28'¥Åª¹c:)Z
[]'V*,*,'V:\4'V*VZH-V?(<Q'MC1'Vb')230@D'WÄa-V58')(*>5e(-W:X')Rg')(*X?2?23%0:;58*X.RS7tqn0:&Ç¥È)ÉsÇ^0q23')?A:;(58(%0@]'V:;?A*,0:/7/Å
Ê 28?(:;'V@B?53:c<?7T(10*TC5e7X-VG7X7,')Cj58(j*X.587&@B?A@]'V:c?(C587c?(658Rg@]0:X*X?(*>qG1*XG1:;'MC53:;')-W*X530(J9K\.1'
:X')7,')?A:/-;.±0q9Ëc'x>?A')C*
?(C ® :;G14U(100%.1'msÌ)ÍÍÎp/Zi<>.5e-;.ªG7,')7
-W0G(*,'V:;'W¦U?Rg@H23')7g*,0°%G5eC1'	*X.1'
:X'VbU587X530(0qT*X.'V0:;53')7
7;G1[UÏ,')-W*g*,0¯ÐnÑÒvÓPÔÕ/ÐnÒÖ×/ØÑUÙ¢ÒÕsÚÐnÑÒnÙ/ZcRS?)4ª@B:X0=bU58C1'D7,0RS'j58C1')?7)J¯K\.1'V:;'?A:X'
?287,0u@B28?(:X'V@B?53:9Rg'V*X.10UC7c58(D*X.'-V28?7;7X58-V?2L@B28?((5e(1%S2853*,'V:;?A*XG:X'^*X.?A*9RS53%.*c[F'M:X')23'VbA?(*c*,0u0G1:
?A@@:;0?-;.	mÛ07X2e58(^Ü Ê 02e28?-XFZÌ)ÍÍÎ1Ý  ')28CdÜ¯¨*,)530(5PZÌ)ÍÍÎp/Jkl*<0G28C^[F'58(*,'V:X')7,*X58(1%>*,0c-W0Rg@H?A:X'
*X.1'+*X5eRg'T*,0S:X'V@B?58:i@B28?(7tb'V:;7;G7i*,:X4U58(1%g?(10*X.1'V:c23')?A:;(5e(1%d0@F'V:/?A*,0:>?(C	:X'Vb'V:/53qr4U58(1%1J
$´2858R
53*X?A*X530(0qt0G1:M?A@B@:X0?-;.587T*X.?A*M53*^C10')7^(10*M.?(C23'g7,*,0U-;.B?7,*X58-S@H28?(7T0:M@:X0@]'V:X*X53')7
<>53*X.*X5eRg'D2858RS58*X7VZ'J«%1J3Z\?°x>')7,@]0(7,'	@:X0@]'V:X*I4qn0:S<>.B58-;.*X.1':X')7,@]0(7,'DRG7,*g0U-V-VG1:
<&53*X.58(?
7,@]')-V5OoB')Cj*X58Rg'g?Aqn*,'V:T*X.1'd*,:;53%%'V:)J  'g<Q0GB28C2853'*,0u'W¦U*,')(C*X.5e7&:;')7,')?A:;-;.°*,0Y7X*,0-/.?7,*X58-gU$c7
mKiV')(1%1ZÌ)ÍÍÞpu?(C¶*X58Rg')C¶U$&7¢·¥@:X0@]'V:X*X53')7m$&2eG1:YÜßË958282Z+Ì)ÍÍÎ1ÝMà+?A[B?(1)?UZÌ)ÍÍáp/Z9?7u<')282
?7M0*X.1'V:-W0R
Rg0(?A%')(*d:X'V@:X')7X')(*X?A*X530(B7+[]')7X58C1')7^1$&7VJD$c(10*X.1'V:dC53:;')-W*X530(6qn0:MqG1*XG1:X'
<Q0:X
<0G28C±[]'D*,0'W¦*,')(BCµ0G1:u:X')7XGB23*X7g*,07,4RM[]02858-	Rg0UC1')2&-;.1')-;58(%1Zi<>.58-/.µG7,')7
[B58(?A:;4!C1')-V5e7X530(
C58?A%:/?RS7+m ® ËcË97/p\7,0g*X.?A*\*X.'TqnG2e2F7X*X?A*,'^7,@B?-W'^('V')C	(10*i[]'T'W¦@B2e58-V53*X234g'W¦U@B230:X')C	CBG1:;58(1%dRg0UC1')2
-;.')-XU58(1%Sm ® G1:;-;.'V*?2J3ZÌ)ÍÍÎp/Jks(d7,0Rg't-V?7,')7VZ7,4URM[F02e58- Rg0UC1')2-;.1')-;5e(1%T-V?(M@B:X0CBG-W'QC1:/?RS?A*X587,@]'V')CG1@Jâ>0¥<Q'Vb'V:=Z9(0(1'j0q^*X.1'E-VG:X:X')(*
:X')7,')?A:/-;.0(7,4UR^[]02858-Rg0C')2&-/.1')-XU58(1%ª?CC1:;')7X7,')7
?C?A@*X58b'^7,4U7,*,')RS7VJ
$cCC53*X580(?28234ZQ*X.1'58C1')?7
.1'V:X'?A:X'E?A@@B285e-V?A[B23'Y*,07,0RS'D0qT*X.1'U$>NP[B?7,')C¯-W0(*,:X02&*X.1'V0:X4
<0:XHJ10:'W¦1?Rg@B28'ZAx&?RS?C1%'i?(C  0(.?RãmsÌ)ÍäÍp?7X7XGRg'tU$ª:X'V@B:X')7,')(*X?A*X530(7wqr0:[]0*X.*X.1'
@B28?(*Mmn<>.B58-;.j587\?7X7XGBRg')CD*,0u[]'^?
C5e7X-W:X'V*,'WNP'Vb')(*c7,4U7,*,')Rap\?(CD*X.'M7XG1@]'V:XbU587,0:^mn<&.58-;.j-W0(*,:;0287
*X.1'?-W*X530(7a0q+*X.1'E@B28?(*/p/J  '6?A:X'-VG1:X:X')(*X234ª?A@@B234U58(1%7,0Rg'E0qT*X.1'j@B:;58(-V53@H23')7d0qT'WÄa-V53')(*
:X'Vb'V:;53oH-V?A*X530(a*,0-/.?(1%'c*X.1'c7;G1@]'V:Xb5e7,0: 58(
:X')7,@]0(7,'\*,0d-;.B?(1%')7i58(S*X.'>@B28?(*Q5e(
?RS?((1'V:Q*X.?A*
@:X')7X'V:Xb')7i@:X0@]'V:X*X58')7+mPåc0:;C10(EÜà+53:;5e?A58CB587VZÞAæææp/J
58(?2e234Z1qnG*XG1:X'T<0:X	7X.10G28CYqn0U-VG7\0(j7,*XGC14U58(1%g.10¥<*,0
0@]'V:;?A*X580(?2853V'+$c7X58Rg0¥bHç­7&y?=<>7\qn0:
58(*,')282853%')(*g?A%')(*X7)J  .?A*a7X0:X*X7g0q9@:X0@]'V:X*X53')7d[]')7,*g'W¦U@:X')7;7S*X.1')7,'j28?)<>7¢Å  ')28C¯?(C±¨ *,)530(5
msÌ)ÍÍÎp\@:X0=bU58C1'T7,0RS'^58(53*X5e?2F7;G1%%')7,*X530(7)Z1[BG1*\RG-;.DRS0:X'+:X')RS?5e(7t*,0S[]'+C10(1'J
è6éêë "BìjívîBïðLñ¯îHëò
K\.5e7+:X')7,')?A:/-;.ª5877XG1@@]0:X*,')C[4*X.1'	¹cÄa-W'a0q&ó&?=b?2ix>')7,')?A:;-;.ômócæææ1ÌWÎÍÍ  x&ÞAææ1ÌVæpu58(-W0(UN
ÏXG(-W*X530(Y<>58*X.a*X.'Dõ;')RS?(*X58-Mö0(7;587,*,')(-W4U÷d¬jøcx\k¢J1k?Rã%:;?A*,'VqnGB2*,0  5e282858?Rã@]')?A:;7VZÛ07,'V@B.
åc0:;C0(ZU*X?(!U?C5e(Zwöt.58*,00:U:;58(53bA?7X?(ZLx>?Rg')7X. ® .?A:;?C1<t?¥ÏWZË9?(â&0'V4Z?(BC°*X.1'
?(0(4N
Rg0G7>:X'VbU53'V<Q'V:/7>qn0:&G7X'VqnG27XG1%%')7,*X530(B7&?(Cj?C1bU58-W'J\K\.1'+@B:X')7,')(*X?A*X530(0q*X.'MRS?A*,'V:;5e?2L58(D*X.587
@B?A@]'V:i<t?7\')(10:;RS0G7X234u58Rg@:X0¥b')C	*X.?(1U7i*,0  58282e58?Rã@]')?A:;7Vç17XG1%%')7,*X580(7VJ

º;»¥ù

úcû/ü3ý ¾þ üOÿ Á ú À ÿ1ü þ ú Á û
è	
iîHë ï
è6ív"òAòF""FP"ë


 ØÓw×!1ÓX×!"AÐrÑÔ
$K
 # X {v~
 #  |  
FQ=|­~  |   
 %
$ &
' mPp
( mP p
ÒÕsÚÑUÙ¢ÐnÒÐØÑ×;ØÑÐnÒÐnØÑ
)

*
2 3 Pm p
4
2 3 6m 5 87 59¥p
4

HmP p
_Él;z :DÇ
Ù¢ÒÕ¢ÐnÑÔ
< mPp
= Nv?G1*,0RS?A*,0(
?Õ >Ñ
Ú×/×/AÓ @]ÒÐrÑÔDBÕ >UÑ
Ú×/×/AÓ @]ÒPÚÑB×/ÓS×)Õ¢ÐrÒvÓ)Õ/ÐØÑ
C

×;Ø  @D3Ó)ÒvÓFEHGJI
 Ó)ÒvÓVÕ  ÐnÑÐeÙ¢ÒÐ×FEHGJI
@UÚKÒ
×)Ö× 3Ó
L NIÇ)És_ÉsÈ
Ú×/×/Ó¢Ù/Ù¢NÐ M!8P
Ó O¢ÕsØ 
R

Q

S ÑUTÚÕ/ÐÚÑB×¢Ó@FÕsØB@1Ó)Õ/ÒÖ
@ ÕlØB@ ÓVÕ¢ÒÖ
Y ÓWÙU@ ØÑ1ÙVÓZ]
EQÐrÕ;Ù¢ÒN_ Y ÓWÙU@ ØÑ1ÙVÓZ]
@ ÕlØB@ÓVÕ¢ÒÖ

a

` mPp
ba
c

i

bc

 e
2 d
ÙWØ >Ñ	Ú; ÔØÕ¢ÐrÒK 
×;Ø  @D3Ó)ÒvÓg;Ú «ÔØÕ¢ÐrÒK 

¬j0C')287^m7X?A*X587,oB')7/p
$b'V:;5OoF-V?A*X530(DRg'V*X.10UC	')(*X?582858(%[B:;G1*,'WNPqn0:;-W'+7,')?A:;-/.
$cG1*,0RS?A*X?NP*X.1'V0:;'V*X58-MRS0C1')2-/.1')-XU58(1%
U5e(1%23'T?A%')(*c7X53*XG?A*X580(
¬EG23*X58?A%')(*>7X58*XG?A*X530(Y<>.1'V:;'T')?-;.E?A%')(*cG7,')7\?gRG23*X58?A%')(*\@B2e?(
¬EG23*X58?A%')(*>7X58*XG?A*X530(Y<>.1'V:;'T')?-;.E?A%')(*cG7,')7\?(D5e(C53bU58CG?2B@B28?(
58(58*,'WNv7,*X?A*,'M?G1*,0R
?A*,0(
K\.'+7,'V*\0q7,*X?A*,')7Mmnb'V:;*X58-W')7/pt0qU$
K\.'+7,'V*\0q7,*X?A*,'WNP*,0ANv7,*X?A*,'d*,:;?(7;53*X530(7+mn')C1%')7¢pt0q1$
y0%58-V?2C1')7;-W:;53@*X530(u0q*X.1'+7,'V*>0q?-W*X580(7i')(?A[B2e58(1%g?g*,:;?(7;53*X530(
$ ® 0028')?(?23%'V[:/?
³ +10 -  +
® 0023')?(?23%'V[B:;?g@B?A:X*X5e?2]0:;C1'V:),Ý + *.- 53/
K\.'+RS?A*,:;5O¦Y0qL*,:/?(7X53*X530(	-W0(BC53*X530(7t0qU$
KL:;?(7X58*X530(	-W0(C53*X580(	?7X7,0U-V58?A*,')CD<>58*X.Y')C1%'a6m 5 8 7 5!9p
K\.'+7,'V*\0q58(53*X5e?2H7,*X?A*,')7&0q1$
Ê :;58RS53*X58b'c')28')Rg')(*X7>0qw? ® 0023')?(j?23%'V[:;?UÝ?A*,0RS7&?A:X'^?-W*X530(B7
')hG1')(-W'^0qw?-W*X530(B7Mm?A*,0RS7/p
K\.'+28?(1%G?A%'+0q\m7,'V*>0qw7,*,:/58(1%7\?-V-W'V@*,')C[4ptU$
$c(DU$*X.?A*>?-V-W'V@*X7&58(UoH(B53*,'WNv23')(1%*X.Y7,*,:;5e(1%7
K\.'+7,')hG')(-W'+0qU$b'V:;*X58-W')7\bU587X53*,')CY[4Y?S7,*,:;58(%
K\.'T:;G(Y0q?g7,*,:;58(%S58(Y*X.1'+U$ 28?(1%G?A%'
$:X')hG53:X')RS')(*t0q?-V-W'V@*X58(1%
:;G(7t0q?(U$
K\.'T*,')(7,0:m7X4(-/.1:X0(10GB7/pQ@:X0UCG-W*t0qU$&7
@]')-V5OoH')7i?g*,:;?(7X58*X530(Yqr0:>'Vb'V:X4Y@F07;7X53[B23'9?-W*X530(
K\.'+-;.1058-W'^0q?-W*X580(G(5ehG1')284SC1'V*,'V:;RS58(')7i*X.1'+(1'W¦U*>7,*X?A*,'
')hG1')(-W'^0qLb'V:X*X5e-W')7>-W0((1')-W*,')Cj[4a')C1%')7
$@B?A*X.	<&53*X.	7,*X?A:X*>?(BC	')(CYb'V:X*X58-W')7&58C1')(*X58-V?2
ö0RS@BG1*X?A*X530(?27,*X?A*,'ÝH?(D?-W*X580(D0U-V-VG1:X:;58(%d5e(	?g-W0Rg@BG1*X?A*X530(
K\.'V:X'T'W¦U5e7,*X7\?g@B?A*X.Dqr:X0R
KL')Rg@]0:;?2230%5e-	õ,58(bA?A:;58?(*X÷
KL')Rg@]0:;?2230%5e-	õs'Vb')(*XG?2e234÷
QWVX Z5J«'J3ZQõskl(b?A:/58?(*&(10* X ÷
Q m X\[ R^] p/Z5J«'J3Zõ,¨b'V:;4 X 587i'Vb')(*XG?28234uqr02e230=<')C	[4 ] ÷
K\.'9oB:;7,* X mn*,:/53%%'V:¢pt587tqn028230¥<Q')CD[4	? ] mn:X')7,@]0(7X'¥p
K\.'+7,'V*\0qTõs[B?C÷Dmn*,0a[F'+?=b058C1')CHpi7,*X?A*,')7\0qU$
öt?(58(-W:X')?7,'+?-V-W')7;7X53[B582e53*v4
öt?(B(10*>58(-W:;')?7,'+?-V-W')7X7X53[H582853*I4
öt?(C1')-W:X')?7,'?-V-W')7X7X53[B5e2853*v4
öt?(B(10*>C1')-W:X')?7X'^?-V-W')7X7X53[H582853*I4
U?Aqn'^RS?-/.58(1'+28')?A:;(58(1%d0@]'V:;?A*,0:)ZH5J«'J3Z1@:X')7,'V:;b')7\@:X0@]'V:X*X58')7
¹9('T*X.?A*>587\-W0:;:X')-W*\<>.1')(53*i7,*X?A*,')7>*X.B?A*c  gf
¹9('T*X.?A*>587\-W0:;:X')-W*\<>.1')(53*i7,*X?A*,')7>*X.B?A*chbgf
K\.'+1$*,:/?(7X53*X530(uqG(-W*X530(
º;»kj

½9¾H¿1ÀH¾HÁ

è	
iîHë ï
el	nmcîBñhi"í&ív"ðoIép "oiîPîBò
K\.5e7w?A@B@F')(BC5O¦]Z<&.58-;.d587[H?7,')Cd0(S¬E?((?T?(C Ê (G1')2e5]msÌ)ÍÍUÌ=p/ZUqn0:;RS?28284^C1'WoH(1')7ks(b?A:;5e?(-W'\?(C
x\')7X@F0(B7,'\@:X0@]'V:X*X58')7 58(g*,')RS@F0:/?2H230%5e-AJ  'c[]'V%58(S[4SC1'WoH(B58(1%T*X.1'&[B?7X58->*,')Rg@]0:;?20@]'V:;?A*,0:&q
møc(*X582np/J  '9?7X7XGBRg'&?M7,*,:;58(1%uKm +r 7ststs p0q-¢Nv7,*X?A*,')7t0qU$ôZ<&.1'V:X'>1
æ uwv 7yx7{z J K>.1')(Sqn0:-¢Nv7X*X?A*,'


qn0:;RMGB28?A' X ?(C ] Z1<'^C1'WoH('+ø&(*X582?|
7 +J9 X q ]~} qn0:>7,0Rg' z\4x UZ +D   ] Z?(BC	qr0:>'Vb'V:X
4 v
7XG-/.	*X.?A* x u.v z UZ +    X J
ks(bA?A:;58?(B-W'^@:X0@]'V:X*X58')7\?A:X'dC1'WoH(1')Cj58(	*,'V:;RS7&0q ¨ b')(*XG?2e234Y@:X0@]'V:X*X53')7VZH7,0a<'MC'WoH(1'^¨ b')(UN
*XG?28284doB:;7,*VJ10:\-¢Nv7,*X?A*,'Tqn0:;RG28? X ?(CaU$ Z<Q'TC1'WoH('&@:;0@F'V:;*v4 f R X mWõ,¨b')(*XG?28234 X ÷p
?7T?a@:X0@]'V:X*v4*X.?A*T587>*,:/G1'Ymnq?287,'¥p>qn0:T?u7X*,:;58(1%u53q53*9587c*,:;G1'	mnqn?287X'¥p>?A*9*X.1'd58(58*X58?2-¢Nv7,*X?A*,1
' + r 0q
*X.1'd7,*,:;58(%1J&10:;R
?28234Z]53
q   Km +r 7ststs p&587&?a7X*,:;58(1%a0q U$ ZF*X.1')/
(    R X } +Dr   8É ;H
È q X Z
5J«'J3Z9õs'Vb')(*XGB?28234 X J­÷´$´@:;0@F'V:;*v4 f QnVX mWõskl(bA?A:;58?(*M(10* X ÷pT587MC1'WoH(1')C?^
7    QnVX }
   V R X ZH5J«'J3Ziõ,(1'Vb'V: X J­÷¶58(?28284ZH?ux\')7,@]0(7,'Mqr0:/RMG2e?
587&0q*X.1'qr0:/R Q m X/[ RF] p/ZF<>.1'V:X' X
587&-V?2823')C	*X.1'Eõs*,:;53%%'V:;÷u?(C ] *X.1'jõs:X')7X@F0(B7,'J­÷$x\')7,@]0(7,'^qr0:;RG28?
7,*X?A*,')7>*X.B?A*&'Vb'V:X4	*,:/53%%'V:
587t'Vb')(*XG?28234Yqn028230¥<Q')C	[4Y?g:X')7,@]0(7,'J
è	
iîHë ï

"iîPîHòl"/iîIñ¶îBëLò
K\.1'Tqn028230¥<>58(1%oBb'Tks(b?A:;5e?(-W'T@:X0@]'V:X*X53')7t<'V:X'^GB7,')CD58(Y*X.1'T*,')7X*&7XG58*,'
: 0yNP*,:;?(7XR
53*/p,p
Q m V mnkvNvC')2853b'V
: 0yNP@B?G7,'¥p,p
Q m V mnkvNvC')2853b'V
* 0kvNvC1')2e53b'V:¢p,p
Q m V mLNv-W02823')-W
* 0kvNvC1')2e53b'VZ
: 0yNP:;')-W')53b'¥p,p
Q m V mLNv-W02823')-W
: 0kvNP:X')-W')58b
' 0yNP@B?G7,'¥p,p
Q m V mLNvC1')2853b'V
K\.1'Tqn028230¥<>58(1%oBb'+x>')7,@]0(7,'T@:;0@F'V:;*X53')7t<Q'V:;'^G7,')C	58(Y*X.'+*,')7,*>7XGB53*,' 
Q mNvC')2853b'V: [ R yNP:;')-W')53b'¥p
Q mNvC')2853b'V: [ R kINP:X')-W')53b'¥p
Q mNv-W02e23')-W* [ R yNP*,:/?(7XRS53*/p
* 0!kINvC1')2858b'V:¢p [ R yNP:X')-W')53b'¥p
Q m,mNv-W02e23')-W

m


v
N

C
)
'
8
2
3
5

b
V
'
:
' 0ªyNP:X')-W')53b'¥p,p
Q
[ R mnkINP:X')-W')53b
 îUsîîBëQéUîBò

$c28G1:)Zx+J3ZÜ´Ë9582e2ZËJ msÌ)ÍÍÎp/JS$²*X.1'V0:;4j0q*X58Rg')C?G1*,0RS?A*X?UJ4o1ÓXØÕ,ÓVÒÐ×;Ú;Ø  @D>UÒvÓVÕG]×)ÐÓVÑB×¢ÓWZ
 ZLÌ)ä  Ã Þ áJ
$c7X58Rg0¥bHZk¢JmsÌ)ÍáAæp/J S{Y ØMXØÒJiåc:;'V')(<>5e-;.ZFöiK~1?)<t-W'V*,* Ê G1[B2e58-V?A*X530(7VZks(-AJ
® ?)b')2Z wJmsÌ)Íäp/J S ÑÒÕlØ¡>1×)ÒÐØÑ°ÒPØuÒKUÓ\oUÓ;ØÕ/Ö	Ø8OI>UÒPØ  ÚÒPÚAJ x>')7,*,0(ZU¢$^ Ê :X')(*X58-W'WNvâc?282J
®G£ -;.B5ZAÛJmsÌ)Í¤Þp/J1¹T(+?>C1')-V5e7X530(TRg'V*X.10UC+58(+:X')7,*,:;58-W*,')CM7,')-W0(CUNP0:/C1'V:L?A:;58*X.Rg'V*X58-AJAks(¥Ó)ÒKØØ;3ØXÔÖ
ÚÑ ^¦Ð§3ØÙW?Ø @ÖS8Ø OGF×)ÐÓVÑB×¢Ó  ¦iÕsØ)×/Ó/¨Ó ÐnÑÔAÙ+8Ø OcKÒ UÓZGHÒPÚÑ OWØ8Õ  S ÑBÒvÓVÕ¢ÑBÚÒÐØÑB;Ú HØÑÔÕsÓWÙ;Ù¢Z@B@JÌ Ã
ÌÌAJ*X?(1qn0:;CZBöt
$ F*X?(1qn0:;C	øc(53b'V:;7;53*v4 Ê :X')7;7VJ
º?©ª

úcû/ü3ý ¾þ üOÿ Á ú À ÿ1ü þ ú Á û
® G1:;-/.ZBÛ1J3ZHöt2e?A:X'Z1¨\J3Zy0(%1ZBËJ3Z¬j-V¬E582828?(ZUàSJ3ZBÜ Ëc5e282ZUËMJmsÌ)ÍÍÎp/Ji4UR^[]02858-cRg0UC1')2]-;.1')-;5e(1%
qn0:+7,')hG1')(*X58?2-V53:;-VG58*&b'V:;53oH-V?A*X530(J S¬«
«P« BÕlÚÑ1ÙWÚ×=ÒÐnØÑ1ÙuØÑgØ  @D>UÒvÓVÕ?_6I9Ð6Ó{®­dÓ¢ÙWÐ ÔÑØ8O
S ÑBÒvÓPÔÕsÚÒv{Ó ¯ÐrÕs× >UÐnÒnÙMÚÑ °GHÖ¥ÙWÒvÓ  Ù/Z ±U²´³µ ZHÎæ1Ì Ã ÎÞÎ1J
( ¦\ÕlØ=×/Ó;{Ó ÐnÑÔAÙ
® G1:XU.?A:;CZâ^J1msÌ)ÍÍ p/J1y53b')(')7X7L?(BC+q?53:;(1')7X7@:X0@]'V:X*X53')758(^RG23*X5ONv?A%')(*7,47X*,')RS7VJks
¬Ø OuKÒ UÓ4oÐnÕ/ÒvÓ/ÓVÑKÒ S ÑÒvÓVÕ¢ÑBÚÒÐØÑB;Ú n¶1ØÐnÑ·
Ò ØÑ O)ÓVÕ,ÓVÑB×¢ÓDØ¸
Ñ I9Õ/ÒÐ ¹Q×=Ðn;Ú  S ÑÒvÓ ´OÐ ÔÓVÑB×¢Ó ² S ¶ I S µ Z
@B@J Þá Ã AæUJöt.?RM[F'V:;4ZU:;?(-W'J
öt?A:;RS')2ZËJ3ZBÜ¬E?A:X0=bU53*X-;.ZFFJmsÌ)ÍÍ ¤p/Jy')?A:;(B58(1%dRg0C')287 0qw58(*,')282853%')(*?A%')(*X7VJks\
( ¦\ÕlØ=×/Ó;{Ó ÐnÑÔAÙ
¬Ø O
KÒ UÓpoÐnÕ/ÒvÓ/ÓVÑKÒ /ºMÚÒÐØÑB;Ú ØÑ O)ÓVÕ,ÓVÑB×¢ÓYØ¯
Ñ I9Õ¢ÒÐ ¹Q×=ÐnÚ  S ÑÒv!Ó KOÐ ÔÓVÑB×¢Ó ² IZII S µ Z@@ J ¤Þ Ã ¤»J
Ê 0:X*X2e?(CZH¹9x^J
öt28?A:;'Z¨\J3ZÜ  58(%1Z Û1JimsÌ)ÍÍ »p/J10:;R
?2iRg'V*X.10UC7 u*X?A*,'Y0q&*X.1'u?A:;*d?(BCqG1*XG1:;'aC53:;')-W*X530(7VJ
I·¥¼Ø  @½>ÒÐnÑ°
Ô G>U?Õ TÓ)Ö=Ù¢Z ¾U²K³µ ½Z ¤Þ ¤ Ã ¤Î J
ö0G1:/-W0G1[]'V*X587VZHöcJ3UZ ¢?A:/C5ZB¬J3Z  023@]'V:)Z Ê J3Z]À
Ü ¿ ?((B?A?AU587VZF¬JLmsÌ)ÍÍÞp/J&¬')Rg0:;4NP'WÄa-V58')(*c?23%0AN
:/53*X.RS7Qqr0:t*X.1'9b'V:;53oH-V?A*X530(a0q*,')Rg@]0:;?2F@:X0@]'V:X*X58')7VÁJ EØÕ  ;Ú D¥ÓVKÒ ØAÙTÐn\
Ñ GFÖ=ÙWÒvÓ  ­dÓ¢ÙWÐ ÔÑ1Z
 ZHÞá » Ã ÞääJ
Ëc'x>?A')C*VZy J3Z Ü ® :;G14U(100%.'ZQ¬J>msÌ)ÍÍÎp/Jµks(*,'V:;?-W*X58b'D*X.1'V0:X4:X'VbU587X530(Jks(ª¬j58-/.?287,U5Zx+J3Z
Ü K')-VG-V5PZtåJ&m¨QC7VJ}p/W
Z ¥°Ú× ÐrÑF®
Ó ÂLÓXÚÕ¢ÑÐnÑÔ SJÃ Z@B@JÞ Í Ã Þ ¤Î1JiU?(µ¬j?A*,'V01Z>öt
$ ¬0:;%?(
à^?G1qnR
?((J
Ëc')?(ZLK+J3ZÜ  ')2e28RS?(Z¬J msÌ)ÍÍUÌ=p/®
J ¦n3ÚÑÑBÐrÑÔÚÑ 4ØÑBÒÕl;Ø  JaU?(6¬E?A*,'V01Zöi^
$ ¬j0:X%?(°à+?G1qrN
R
?((J
¨ 2e7,')?58C14Z  J3ZBöt28')?)b')28?(CZx^J3Z1Ü ® ?G1%.ZÛJ]msÌ)ÍÍÎp/&
J ¢'V:;53qn4U58(1%^?(Y58(*,')282853%')(*Q7X*,:;G-W*XG1:X'c-W0(*,:;02
7X47,*,')
R $ß-V?7,'°7,*XGC4JÂklÄ
( ¦\ÕlØ=×/Ó;{Ó ÐnÑÔAÙ8Ø O6KÒ UÓ Y ÓX;Ú Å_wÐ  ¯
Ó GHÖ¥Ù¢ÒvÓ  /
Ù GHÖ  @UØÙW´Ð >  ZT@@J
Þ »Ì Ã Þ »AáJU?(jÛG?(Z Ê G1'V:X*,0Sx&58-W01J
53*,0G7X7;5ZËJ3ZÜK')(B(1')(.1023*,Z¬JBmsÌ)ÍÍäp/J¬E58(58RS?2U7,0U-V58?2U28?=<>7VJBksÆ
( ¦iÕsØ)×¢Ó;¨Ó ÐrÑÔÙc8Ø O>KÒ 1ÓWE Ð OWÒvÓ;ÓVÑBKÒ
ºMÚÒÐØÑB;Ú nØÑ O)ÓVÕ,ÓVÑB×¢ÓgØ
Ñ I9Õ¢ÒÐ ¹×)Ð;Ú  S ÑÒv!Ó KOÐ ÔÓVÑB×¢ÓWZ@@J1Þ ¤ Ã UÌAJ]¬E?C587,0(Z  k¢J
10%')2ZËJmsÌ)ÍÍ ¤p/JT¹9(*X.1'^:;')28?A*X530(7X.B53@D[]'V*v<'V')(jCBG1:;?A*X530(0q?(')(-W0GB(*,'V:T?(C*X.1'^'Vb028G*X530(
0qi-W00@]'V:;?A*X530(°58(°*X.1'S53*,'V:;?A*,')C@:;587,0('V:)ç­7TC5823')R
RS?UJ « T¥Ø Ç>UÒÐØÑBÚÕ¢¸
Ö Ø  @½>ÒPÚÒÐnØÑZ ±²y±!µ Z
ÎÍ Ã ¤J
åc028CBRS?(ZwFJ3ZwÜ¸x\07,')(B7X-;.1')5e(ZwÛJ msÌ)ÍÍÎp/JY¨QRg'V:X%')(*^-W00:;C58(?A*X580(6*X.1:X0G1%.*X.'
G7,'S0qt-W00@1N
'V:/?A*X53b'D7,*X?A*,'WNv-;.B?(1%58(1%6:;GB23')7VJEklÈ
( ¦iÕsØ)×¢Ó;¨Ó ÐrÑÔÙ8Ø OuKÒ 1ÓÉÊ !Ó  OWKÒ pºMÚÒÐnØÑB;Ú ^ØÑ O)ÓVÕ,ÓVÑH×/ÓDØÑ
ITÕ/ÒÐ ¹Q×)Ð;Ú  S ÑBÒv!Ó K ÐOÔÓ)ÑB×/ÓVZ1@@J1Îæä Ã ÎÌ J')?A*,*X23'Z  $MJ
åc0:;C0(ZËJ msÌ)ÍÍäp/J  ')282ONP[]').?)b')C°[F0:;%7VZ[]02307VZ?(C[]'V:;7,'V:X'V:/7VJ+ksÉ
( ¦iÕsØ)×/Ó/¨Ó ÐnÑÔAÙa¬Ø OSKÒ UÓEQÐ O?_
ÒvÓ/ÓVÑKÒ S ÑÒvÓ)Õ/ÑBÚÒÐnØÑH;Ú ØÑ OVÓ)ÕsÓ)ÑB×/ÓcØ1
Ñ ¥°Ú× ÐnÑHP
Ó ÂLÓXÚÕ¢ÑÐnÑÔ ² S ¥Â µ Z@B@JÞÞÎ Ã Þ ÞJ¬j?C5e7,0(Z
 k¢J
åc0:;C0(ZËMJ msÌ)ÍÍÍp/Jx\'WNPb'V:;53oH-V?A*X530(0q ?C?A@B*X53b'g?A%')(*X7Vç@H28?(7VJTKL')-;.J:X'V@J3Z]óc?)b4öt')(*,'V:Tqn0:
$&@@B2e53')CYx\')7,')?A:;-/.j5e(	$>:X*X53oH-V58?2Fkl(*,')282858%')(-W'J
åc0:;C0(ZËMJ3ZÜ¯à+53:;58?AU58C5e7VZ=àgJUmÞAæææp/J$&C?A@B*X53b'Q7XG@F'V:;b587X0:X4c-W0(*,:X020q58(*,'V:;-W0((1')-W*,')CdC5e7X-W:X'V*,'
'Vb')(* 7,4U7,*,')RS7)JksÆ
( ¦iÕsØ)×¢Ó;¨Ó ÐrÑÔÙ&8Ø O\KÒ UÓ S ÑÒvÓ)Õ/ÑBÚÒÐnØÑH;Ú ØÑ OVÓ)ÕsÓ)ÑB×/ÓcØ	
Ñ ØÑÒÕs;Ø JIn@@OÐ×;ÚÒÐØÑUÙ
² S WI µ Z@@JáAæ Ã á ¤J]$&(B-;.10:;?A%'ZF$&àSJ
º?©º

½9¾H¿1ÀH¾HÁ
åc0:;C0(ZBËJ3ZU@F')?A:/7VZ  J3Z00287X4Z¹J3ZHÜÂy'V'ZBk¢JLmsÌ)ÍÍÍp/J>Ë9587,*,:/53[BG1*,')C	7,@H?A*X58?2-W0(*,:X02ZH%230[B?2
RS0(53*,0:;58(%?(C7,*,'V'V:;58(1%d0qRg0[B5828'&@B.4U7X58-V?2]?A%')(*X7)Jkl(Ë¦\ÕlØ=×/Ó;Ó{ÐnÑÔAÙØ¬O^ÒKUÓ S¬«
«P«wS ÑÒvÓ)ÕB_
ÑHÚÒÐnØÑB;Ú ØÑ OVÓ)ÕsÓ)ÑB×/ÓdØÑ S Ñ OVØÕ  ÚÒÐnØÑ S ÑÒvÓ ´OÐOÔÓVÑH×/Ó  ÚÑ ÆGHÖ¥Ù¢ÒvÓ  Ù ² S  S¬S G µ Z@@J,¤äUÌ Ã ¤ääJ
 ?7;.58(1%*,0(ZHËMJ}ö9J
åc:X'Vqn')(7,*,'V*,*,'ZTÛ1J3ZtÜ >
x ?RS7,'V4Z9öcJ9msÌ)ÍÍÞp/JÂ$c(¶?A@@:X0?-/.¯*,0?(4*X58RS'E23')?A:/(58(1%1J ks(g¦\ÕlØ=×/Ó;Ó{_
ÐnÑÔÙM8Ø Oº^ÐrÑBKÒ S BÑ ÒvÓVÕ¢ÑBÚÒÐØÑBÚ;~ÌDØÕ{"=ÙBØB@ØÑË¥Ú×!ÐrÑHÓ~ÂLÓXÚÕ¢ÑÐnÑÔZH@@JÌ)äÍ Ã Ì)ÍáJ$&[]'V:;C1'V')(Z
1-W0*X28?(CJ
â&')53*XRg'V4'V:)ZöcJ3Zà+58:X[4ZÛ1J3ZyL?A[B?)<^Z ® J3Z$&:;-;.'V:)Z¬J3ZÜ ® .?A:;?C1<t?¥ÏVZAx^JUmsÌ)ÍÍäp/Jøc7X58(%&?A[B7,*,:/?-W*X530(
?(BC6Rg0C')2w-/.1')-XU58(1%	*,0DC'V*,')-W*^7X?Aqn'V*v4Eb5302e?A*X530(7958(E:X')hG53:X')Rg')(*X797,@]')-V5OoH-V?A*X530(B7VJ S¬«
«P«
BÕsÚÑUÙWÚ×)ÒÐØÑUÙdØ/
Ñ GF8Ø OWNÒ ÊÚÕsÓ « ÑÔÐrÑHÓ/ÓVÕ¢ÐrÑÔZ k³ ²Í?µ Z]ÍÞ » Ã ÍÎäJ
â&023)RS?((ZTåJ3Z Ê ')28')CZ&ËJ3ZTÎ
Ü ¿ ?(B(?A?AU587VZ9¬JTmsÌ)ÍÍ ¤p/Jã¹9((1')7,*,')C C'V@*X.UNoB:;7X*a7,')?A:;-/.J²ks(
¦\ÕlØ=×/Ó;{Ó ÐnÑÔAÙg8Ø O^KÒ UÓ^G]Ó;×;Ø
Ñ °G@FÐng
Ñ ÌØ¨Õ "¥{Ù Ø?@HZB@@JBäUÌ Ã äÍJFx&G1*,%'V:;7VZBó9Û1J
â&023)RS?((ZHådJHÛ1JmsÌ)ÍÍUÌ=p/|
J ­dÓ¢Ù¢ÐOÔÑÚÑ  Ã ;Ú  6Ð ÚÒÐØÑ°8Ø O®Ø  @D>UÒvÓV
Õ ¦\ÕlØÒPØ)×;;Ø }Ù/Jtó9,Û  Ê :X')(*X5e-W'WNvâ&?282PJ
Û07;2858(ZËJ3Z Ü Ê 02e28?-XFZQ¬J\msÌ)ÍÍÎp/J!y')?7,*sNv-W07,*gfH?=<´:X'V@B?53:a$ã@B28?(!:X'WoF(1')Rg')(*7,*,:/?A*,'V%4qn0:
@H?A:X*X58?2ONP0:;C'V:a@B2e?((58(1%1Jks(g¦\ÕlØ=×/Ó;Ó{ÐnÑÔAÙ°Ø8OjÒK1ÓÈÊ Ó! O¢ÒK S ÑÒvÓVÕ¢ÑBÚÒÐØÑBÚ;·ØÑOVÓ)ÕsÓ)ÑB×/Ó6ØÑ
ITÕ/ÒÐ ¹Q×)Ð;Ú  S ÑBÒv!Ó K ÐOÔÓ)ÑB×/ÓVZ1@@JÌVææAÎ Ã ÌVææÍJL')?A*,*X23'Z  $MJ
à+?A[B?()?UZUJmsÌ)ÍÍáp/J 4U(-;.1:;0(53)58(1%MRMG28*X58?A%')(*t@B2e?(7 G7;58(1%^*,')RS@F0:/?2H230%5e-&7,@]')-V5OoF-V?A*X530(7VJks(
¦\ÕlØ=×/Ó;{Ó ÐnÑÔAÙ	8Ø O
KÒ UÓ·EQÐnÕXÙWÒ S ÑBÒvÓVÕ¢ÑBÚÒÐØÑB;Ú ~ØÑ O)ÓVÕ,ÓVÑB×¢Ó	ØÉ
Ñ ¥¯>ÏOÒÐÚ)ÔÓ)ÑW
Ò GHÖ¥ÙWÒvÓ  Ù ² S ¥IG µ Z
@B@JBÞU¡Ì » Ã ÞÞÎ1JU?(	1:;?(-V5e7X-W01Z]öt$MJ
à+G1:/7X.?(Zx+JimsÌ)ÍÍÎp/Ð
J Ø  @D>UÒvÓVÆ
Õ ITKÐ {Ó  Ã ÓVÕ¢Ð ¹Q×;ÚÒÐØÑ¶8Ø O	Ø=ØÍÕ ÐrÑBÚÒÐrÑp
Ô ¦\ÕlØ)×¢Ó¢Ù/ÙVÓ¢Ù¢J Ê :;5e(-W'V*,0(Z
ó9,Û  Ê :;58(B-W'V*,0(	ø&(58b'V:;7X53*I4 Ê :X')7X7VJ
y'V'ZÛJ3ZÜ Ë9G1:Xqn'V'Z¨\JmsÌ)ÍÍ»p/J¹9(j'W¦@B2e58-V53*>@H28?(28?(%G?A%')79qr0:9-W00:;C58(?A*X5e(1%aRG23*X58?A%')(*c@B28?(
'W¦U')-VG1*X530(J^ks(p¦\ÕlØ=×/Ó;Ó{ÐnÑÔAÙaØ8OgÒKUÓEØ>UÕ/ÒK S ÑÒvÓVÕ¢ÑBÚÒÐØÑBÚÌDØÕ{"=ÙBØB@¯ØÑ	I ÔÓVÑÒo1ÓXØÕ¢ÐÓWÙ 
ITÕl× ÐrÒvÓ;×)NÒ >UÕ,Ó¢Ù  ÚÑ 1ÂÚÑÔ >1Ú)ÔÓ¢Ù ² IFÏIÂ µ Z1@@JÌÌ Ã Ì)Þ¤J Ê :X0¥b5eC1')(-W'Zx\k¢J
¬E?((?UZÁwJ3ZÜ Ê (G1')285Z]$^JmsÌ)ÍÍUÌ=p/Jgö0Rg@B23'V*X5e(1%
*X.1'*,')Rg@]0:;?2w@B58-W*XG:X'JËoUÓXØÕ,ÓVÒÐ×;ÚZØ  @D>UÒvÓVÕ
G]×)ÐÓVÑB×¢ÓWZ ¾±²A?µ ZFÍ» Ã ÌAæUJ

¬E58-;.?2e7,5PZx+JQmsÌ)Íäp/JY$²*X.'V0:X46?(C6Rg'V*X.10UC10230%40qt58(CG-W*X58b'd28')?A:;(58(1%1Jdks(6¬j5e-;.?287X5ZLx+J3Z
öi?A:X[]0(1')282ZUÛ1J3ZBÜ¬j58*X-;.1')282PZUK+Jm¨QC7VJ}p/Z ¥Ú!× ÐnÑH
Ó ÂÓ;ÚÕ/ÑBÐrÑÔ S Z1@@JUä  Ã Ì Î1J Ê ?280d$c23*,01ZHöt
$ 
K>530%?UJ
¬E53*X-;.1')2e2ZcK+JTmsÌ)Í»Aäp/J Ã ÓVÕ;Ù¢ÐØÑÑG@UÚ×/Ó¡ÒwI9ÑhI@@]ÕlØ)Ú×!ôÒPØÄØÑH×/ÓA@]ÒÂÓ;ÚÕ¢ÑÐrÑÔJ Ê .J­ËMJi*X.')7X587VZ
U*X?(1qr0:/CDø&(B53b'V:;7X53*I4J
óc58287X7,0(ZUóMJLmsÌ)ÍäAæp/J|¦iÕ¢ÐrÑH×)ÐÓ@3ÓWÙMØ8OI9Õ¢ÒÐ ¹Q×)ÐÚ; S ÑÒvÓ´OÐ ÔÓVÑB×¢ÓWJ Ê ?230S$c23*,01ZFöi$^BK>530%?UJ
Ê 0*,*,'V:)Z9¬J+msÌ)ÍÍ»p/JÔoUÓ­dÓ¢Ù¢ÐOÔÑ ÚÑ4I9ÑBÚ Ö¥Ù¢ÐeÙEØ8O6ÚÕØ  @D>UÒPÚÒÐØÑBÚZ¥°ØÓ+Ø8O¸Ø)Ø?@1ÓVÕsÚÒÐKTÓ
Ø¥Ó T¥Ø Ç>UÒÐØÑ1J Ê .J­ËJ*X.1')7X5e7VZHåc'V0:X%'¬j?7,0(jø&(B53b'V:;7X53*I4J
x>?R
?C1%'Z Ê J3Z1Ü  0 (.?R	Z  J]msÌ)ÍäÍp/JK\.1'c-W0(*,:X02F0qCB587X-W:X'V*,'&'Vb')(*i7,4U7,*,')RS7VJ&¦iÕsØ)×/Ó/Ó¨ÐnÑÔAÙ^Ø8O
KÒ 1Ó S¬«
«
« Z  ZHUä Ì Ã ÍäJ
º?©¡Ö

úcû/ü3ý ¾þ üOÿ Á ú À ÿ1ü þ ú Á û
'VA?A:)Zx+J3Zy58(Zo¿J NIÛJ3ZÜ x>?RS?A:;587;.(?(Zwö9JQmsÌ)ÍÍÎp/J¬j0C1')2e58(1%	*,')-;.B(58hG1')7+qn0:^'Vb023bU58(1%jC587sN
*,:/53[BG1*,')Cª?A@@H2858-V?A*X530(7)Jks(.¦iÕsØ)×/Ó/Ó¨ÐnÑÔAÙjØ¬O°EØÕ  Ú;­dÓ¢ÙV×)Õ¢Ð×@FÒÐØÑØHÓ;×!ÑBÐKÙ¡>1ÓWÙ ² EWÚ Y  « µ Z
@B@JBÞÞ Ã ÞÍJ ® 'V:;('ZF<>53*,V'V:/28?(CJ
U.10.B?R	Z ¿dJ3ZBÜK')(B(1')(.1023ZU¬JmsÌ)ÍÍáp/JQ¹9(Y7,0-V5e?2F2e?)<>7qn0:t?A:;*X5OoH-V58?2]?A%')(*\7,0-V58'V*X53')7 Q¹&³FNv2858(1'
C')7X53%(P
J I9Õ¢ÒÐ ¹Q×)Ð;Ú  S ÑÒvÓ ´OÐOÔÓVÑH×/ÓWH
Z Û ±U²A _ µ ZFÞ UÌ Ã ÞáÞJ
U530:/7,5PZUx^JmsÌ)Í ¤Íp/W
J ÜcØ)Ø 3Ó;Ú
Ñ I«ÔkÓ MVÕsÚÙ/J ó&'VÕ
< ¿0:;HZB
ó ¿F@:;5e(1%'V:,N ¢'V:;28?A%1J
00287X4Z¹J3ZFÜ´URg028?UZFJLmsÌ)ÍÍÎp/Jckl(-W:;')Rg')(*X?2wRg0UC1')2-/.1')-XU58(1%u58(D*X.'MRg0UC?2RGUNv-V?28-VGB28G7VJ
ks
( ¦\ÕlØ)×¢Ó;{Ó ÐrÑÔAÙd¬Ø OÆØ  @D>UÒvÓV?Õ _6I96Ð {Ó  Ã ÓVÕ¢Ð ¹×;ÚÒÐØÑ ² I Ã µ Z1@@,J áUÌ Ã ¤J*X?(qr0:;CZHöt$^J
@]')?A:;7VZ  J3ZBÜÂåc0:;C10(ZËJmsÌ)ÍÍÍp/J øc7X58(1%g?A:X*X53oH-V58?2H@B.4U7X58-V7*,0S-W0(*,:X02?A%')(*X7VJklË
( ¦\ÕlØ=×/Ó;{Ó ÐnÑÔAÙ
¬Ø O+KÒ UÓ S¬«
«
«wS ÑÒvÓVÕ¢ÑBÚÒÐØÑBÚ ØÑ O)ÓVÕ,ÓVÑH×/ÓØÑ S Ñ OWØÕ  ÚÒÐØÑ HS ÑÒv!Ó K ÐOÔÓ)ÑB×/Ó  ÚÑ ·GHÖ¥Ù¢ÒvÓ  Ù¢Z@@J
ÞäUÌ Ã ÞääJ  ?7X.B58(1%*,0(ZBËJ}öcJ
KL')((1')(.1028*,Z¬J3ZÜ ¬07,')7)&Z ¿J\msÌ)ÍäÍp/J¹9(!-W00@]'V:;?A*X580(!5e(?ERMGB23*X5ONP')(*X53*v4RS0C1')2PJDklÈ
( ¦\ÕlØ _
×¢Ó;{Ó ÐrÑÔAÙM8Ø O+KÒ UÓ « 3Ó TÓVÑBKÒ S ÑÒvÓ)Õ/ÑBÚÒÐnØÑH;Ú o¶1ØÐnÑZ
Ò ØÑ OVÓ)ÕsÓ)ÑB×/ÓØ
Ñ I9Õ¢ÒÐ ¹×)Ð;Ú  S ÑÒv!Ó K ÐOÔÓ)ÑB×/ÓVZ1@@J
ÍUÌ)ä Ã ÍÞ J
KiV')(1%1Z  JmsÌ)ÍÍÞp/J]y')?A:;(5e(1%>@:;0[B?A[B58285e7,*X58-?G1*,0R
?A*X?T?(CdRS?A:X0=bd-;.B?58(7bU58?&hG1'V:;58')7VJ ¥°Ú× ÐrÑFÓ
ÂLÓXÚÕ¢ÑÐnÑÔZ ¾ ZÌ)áUÌ Ã Ì ¤¤J
¢?A:;C5PZw¬J3ZÜ  023@]'V:)Z Ê JtmsÌ)Íä ¤p/J$&(?G1*,0RS?A*X?NP*X.1'V0:;'V*X58-	?A@@:X0?-/.*,0?G1*,0RS?A*X5e-
@:;0%:;?R
b'V:/5OoH-V?A*X530(Jks.
( ¦iÕsØ)×/Ó/¨Ó ÐnÑÔÙj8Ø ODKÒ UÓEQÐrÕ;Ù¢
Ò I9ÑUÑ >1;Ú GHÖ  @UØÙW´Ð >  Ø
Ñ ÂØXÔÐ×EÐrÀ
Ñ Ø  @D>UÒvÓVÕ
G]×)ÐÓVÑB×¢Ó ² Â S ÁG µ Z@@,J Þ Ã ÎáJöt?RM[:;5eC1%'Z¬j$MJ
( ¦iÕsØ)×/Ó/¨Ó ÐnÑÔAÙD8Ø OuKÒ UÓ¯Ê !Ó  OWKÒ
 ')28CZËJ3ZÜ ¨ *,)530(5Z¹JmsÌ)ÍÍÎp/J6K\.'goB:;7,*28?)< 0qi:X0[]0*X58-V7VJ	ksÝ
ºMÚÒÐØÑB;Ú nØÑ O)ÓVÕ,ÓVÑB×¢ÓgØ
Ñ I9Õ¢ÒÐ ¹×)Ð;Ú  S ÑÒv!Ó KOÐ ÔÓVÑB×¢ÓWZ@@J]ÌVæAÎÞ Ã ÌVæAÏÎ »JLU')?A*,*X23'Z  $^J

º?©Þ

Journal of Articial Intelligence Research 13 (2000) 227-303

Submitted 11/99; published 11/00

Hierarchical Reinforcement Learning with the MAXQ Value
Function Decomposition
Thomas G. Dietterich

Department of Computer Science, Oregon State University
Corvallis, OR 97331

Abstract

tgd@cs.orst.edu

This paper presents a new approach to hierarchical reinforcement learning based on decomposing the target Markov decision process (MDP) into a hierarchy of smaller MDPs
and decomposing the value function of the target MDP into an additive combination of the
value functions of the smaller MDPs. The decomposition, known as the MAXQ decomposition, has both a procedural semantics|as a subroutine hierarchy|and a declarative
semantics|as a representation of the value function of a hierarchical policy. MAXQ unies
and extends previous work on hierarchical reinforcement learning by Singh, Kaelbling, and
Dayan and Hinton. It is based on the assumption that the programmer can identify useful
subgoals and dene subtasks that achieve these subgoals. By dening such subgoals, the
programmer constrains the set of policies that need to be considered during reinforcement
learning. The MAXQ value function decomposition can represent the value function of any
policy that is consistent with the given hierarchy. The decomposition also creates opportunities to exploit state abstractions, so that individual MDPs within the hierarchy can
ignore large parts of the state space. This is important for the practical application of the
method. This paper denes the MAXQ hierarchy, proves formal results on its representational power, and establishes ve conditions for the safe use of state abstractions. The paper
presents an online model-free learning algorithm, MAXQ-Q, and proves that it converges
with probability 1 to a kind of locally-optimal policy known as a recursively optimal policy,
even in the presence of the ve kinds of state abstraction. The paper evaluates the MAXQ
representation and MAXQ-Q through a series of experiments in three domains and shows
experimentally that MAXQ-Q (with state abstractions) converges to a recursively optimal
policy much faster than at Q learning. The fact that MAXQ learns a representation of
the value function has an important benet: it makes it possible to compute and execute
an improved, non-hierarchical policy via a procedure similar to the policy improvement
step of policy iteration. The paper demonstrates the eectiveness of this non-hierarchical
execution experimentally. Finally, the paper concludes with a comparison to related work
and a discussion of the design tradeos in hierarchical reinforcement learning.

c 2000 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Dietterich

1. Introduction
The area of Reinforcement Learning (Bertsekas & Tsitsiklis, 1996; Sutton & Barto, 1998)
studies methods by which an agent can learn optimal or near-optimal plans by interacting
directly with the external environment. The basic methods in reinforcement learning are
based on the classical dynamic programming algorithms that were developed in the late
1950s (Bellman, 1957; Howard, 1960). However, reinforcement learning methods oer two
important advantages over classical dynamic programming. First, the methods are online.
This permits them to focus their attention on the parts of the state space that are important
and to ignore the rest of the space. Second, the methods can employ function approximation algorithms (e.g., neural networks) to represent their knowledge. This allows them to
generalize across the state space so that the learning time scales much better.
Despite recent advances in reinforcement learning, there are still many shortcomings.
The biggest of these is the lack of a fully satisfactory method for incorporating hierarchies
into reinforcement learning algorithms. Research in classical planning has shown that hierarchical methods such as hierarchical task networks (Currie & Tate, 1991), macro actions
(Fikes, Hart, & Nilsson, 1972; Korf, 1985), and state abstraction methods (Sacerdoti, 1974;
Knoblock, 1990) can provide exponential reductions in the computational cost of nding
good plans. However, all of the basic algorithms for probabilistic planning and reinforcement learning are \at" methods|they treat the state space as one huge at search space.
This means that the paths from the start state to the goal state are very long, and the
length of these paths determines the cost of learning and planning, because information
about future rewards must be propagated backward along these paths.
Many researchers (Singh, 1992; Lin, 1993; Kaelbling, 1993; Dayan & Hinton, 1993;
Hauskrecht, et al., 1998; Parr & Russell, 1998; Sutton, Precup, & Singh, 1998) have experimented with dierent methods of hierarchical reinforcement learning and hierarchical
probabilistic planning. This research has explored many dierent points in the design space
of hierarchical methods, but several of these systems were designed for specic situations.
We lack crisp denitions of the main approaches and a clear understanding of the relative
merits of the dierent methods.
This paper formalizes and claries one approach and attempts to understand how it
compares with the other techniques. The approach, called the MAXQ method, provides a
hierarchical decomposition of the given reinforcement learning problem into a set of subproblems. It simultaneously provides a decomposition of the value function for the given
problem into a set of value functions for the subproblems. Hence, it has both a declarative
semantics (as a value function decomposition) and a procedural semantics (as a subroutine
hierarchy).
The decomposition into subproblems has many advantages. First, policies learned in
subproblems can be shared (reused) for multiple parent tasks. Second, the value functions
learned in subproblems can be shared, so when the subproblem is reused in a new task,
learning of the overall value function for the new task is accelerated. Third, if state abstractions can be applied, then the overall value function can be represented compactly as
the sum of separate terms that each depends on only a subset of the state variables. This
more compact representation of the value function will require less data to learn, and hence,
learning will be faster.
228

MAXQ Hierarchical Reinforcement Learning

Previous research shows that there are several important design decisions that must
be made when constructing a hierarchical reinforcement learning system. To provide an
overview of the results in this paper, let us review these issues and see how the MAXQ
method approaches each of them.
The rst issue is how to specify subtasks. Hierarchical reinforcement learning involves
breaking the target Markov decision problem into a hierarchy of subproblems or subtasks.
There are three general approaches to dening these subtasks. One approach is to dene
each subtask in terms of a xed policy that is provided by the programmer (or that has
been learned in some separate process). The \option" method of Sutton, Precup, and Singh
(1998) takes this approach. The second approach is to dene each subtask in terms of a nondeterministic nite-state controller. The Hierarchy of Abstract Machines (HAM) method
of Parr and Russell (1998) takes this approach. This method permits the programmer to
provide a \partial policy" that constrains the set of permitted actions at each point, but
does not specify a complete policy for each subtask. The third approach is to dene each
subtask in terms of a termination predicate and a local reward function. These dene what
it means for the subtask to be completed and what the nal reward should be for completing
the subtask. The MAXQ method described in this paper follows this approach, building
upon previous work by Singh (1992), Kaelbling (1993), Dayan and Hinton (1993), and Dean
and Lin (1995).
An advantage of the \option" and partial policy approaches is that the subtask can
be dened in terms of an amount of eort or a course of action rather than in terms of
achieving a particular goal condition. However, the \option" approach (at least in the
simple form described in this paper), requires the programmer to provide complete policies
for the subtasks, which can be a dicult programming task in real-world problems. On the
other hand, the termination predicate method requires the programmer to guess the relative
desirability of the dierent states in which the subtask might terminate. This can also be
dicult, although Dean and Lin show how these guesses can be revised automatically by
the learning algorithm.
A potential drawback of all hierarchical methods is that the learned policy may be
suboptimal. The hierarchy constrains the set of possible policies that can be considered. If
these constraints are poorly chosen, the resulting policy will be suboptimal. Nonetheless, the
learning algorithms that have been developed for the \option" and partial policy approaches
guarantee that the learned policy will be the best possible policy consistent with these
constraints.
The termination predicate method suers from an additional source of suboptimality.
The learning algorithm described in this paper converges to a form of local optimality that
we call recursive optimality. This means that the policy of each subtask is locally optimal
given the policies of its children. But there might exist better hierarchical policies where
the policy for a subtask must be locally suboptimal so that the overall policy is optimal.
For example, a subtask of buying milk might be performed suboptimally (at a more distant
store) because the larger problem also involves buying lm (at the same store). This problem
can be avoided by careful denition of termination predicates and local reward functions,
but this is an added burden on the programmer. (It is interesting to note that this problem
of recursive optimality has not been noticed previously. This is because previous work
229

Dietterich

focused on subtasks with a single terminal state, and in such cases, the problem does not
arise.)
The second design issue is whether to employ state abstractions within subtasks. A
subtask employs state abstraction if it ignores some aspects of the state of the environment.
For example, in many robot navigation problems, choices about what route to take to
reach a goal location are independent of what the robot is currently carrying. With few
exceptions, state abstraction has not been explored previously. We will see that the MAXQ
method creates many opportunities to exploit state abstraction, and that these abstractions
can have a huge impact in accelerating learning. We will also see that there is an important
design tradeo: the successful use of state abstraction requires that subtasks be dened
in terms of termination predicates rather than using the option or partial policy methods.
This is why the MAXQ method must employ termination predicates, despite the problems
that this can create.
The third design issue concerns the non-hierarchical \execution" of a learned hierarchical policy. Kaelbling (1993) was the rst to point out that a value function learned
from a hierarchical policy could be evaluated incrementally to yield a potentially much
better non-hierarchical policy. Dietterich (1998) and Sutton, et al. (1999) generalized this
to show how arbitrary subroutines could be executed non-hierarchically to yield improved
policies. However, in order to support this non-hierarchical execution, extra learning is
required. Ordinarily, in hierarchical reinforcement learning, the only states where learning
is required at the higher levels of the hierarchy are states where one or more of the subroutines could terminate (plus all possible initial states). But to support non-hierarchical
execution, learning is required in all states (and at all levels of the hierarchy). In general,
this requires additional exploration as well as additional computation and memory. As a
consequence of the hierarchical decomposition of the value function, the MAXQ method
is able to support either form of execution, and we will see that there are many problems
where the improvement from non-hierarchical execution is worth the added cost.
The fourth and nal issue is what form of learning algorithm to employ. An important advantage of reinforcement learning algorithms is that they typically operate online.
However, nding online algorithms that work for general hierarchical reinforcement learning
has been dicult, particularly within the termination predicate family of methods. Singh's
method relied on each subtask having a unique terminal state; Kaelbling employed a mix of
online and batch algorithms to train her hierarchy; and work within the \options" framework usually assumes that the policies for the subproblems are given and do not need to be
learned at all. The best previous online algorithms are the HAMQ Q learning algorithm of
Parr and Russell (for the partial policy method) and the Feudal Q algorithm of Dayan and
Hinton. Unfortunately, the HAMQ method requires \attening" the hierarchy, and this has
several undesirable consequences. The Feudal Q algorithm is tailored to a specic kind of
problem, and it does not converge to any well-dened optimal policy.
In this paper, we present a general algorithm, called MAXQ-Q, for fully-online learning
of a hierarchical value function. This algorithm enables all subtasks within the hierarchy to
be learned simultaneously and online. We show experimentally and theoretically that the
algorithm converges to a recursively optimal policy. We also show that it is substantially
faster than \at" (i.e., non-hierarchical) Q learning when state abstractions are employed.
230

MAXQ Hierarchical Reinforcement Learning

The remainder of this paper is organized as follows. After introducing our notation in
Section 2, we dene the MAXQ value function decomposition in Section 3 and illustrate
it with a simple example Markov decision problem. Section 4 presents an analytically
tractable version of the MAXQ-Q learning algorithm called the MAXQ-0 algorithm and
proves its convergence to a recursively optimal policy. It then shows how to extend MAXQ0 to produce the MAXQ-Q algorithm, and shows how to extend the theorem similarly.
Section 5 takes up the issue of state abstraction and formalizes a series of ve conditions
under which state abstractions can be safely incorporated into the MAXQ representation.
State abstraction can give rise to a hierarchical credit assignment problem, and the paper
briey discusses one solution to this problem. Finally, Section 7 presents experiments with
three example domains. These experiments give some idea of the generality of the MAXQ
representation. They also provide results on the relative importance of temporal and state
abstractions and on the importance of non-hierarchical execution. The paper concludes with
further discussion of the design issues that were briey described above, and in particular, it
addresses the tradeo between the method of dening subtasks (via termination predicates)
and the ability to exploit state abstractions.
Some readers may be disappointed that MAXQ provides no way of learning the structure of the hierarchy. Our philosophy in developing MAXQ (which we share with other
reinforcement learning researchers, notably Parr and Russell) has been to draw inspiration
from the development of Belief Networks (Pearl, 1988). Belief networks were rst introduced
as a formalism in which the knowledge engineer would describe the structure of the networks and domain experts would provide the necessary probability estimates. Subsequently,
methods were developed for learning the probability values directly from observational data.
Most recently, several methods have been developed for learning the structure of the belief
networks from data, so that the dependence on the knowledge engineer is reduced.
In this paper, we will likewise require that the programmer provide the structure of the
hierarchy. The programmer will also need to make several important design decisions. We
will see below that a MAXQ representation is very much like a computer program, and
we will rely on the programmer to design each of the modules and indicate the permissible
ways in which the modules can invoke each other. Our learning algorithms will ll in
\implementations" of each module in such a way that the overall program will work well.
We believe that this approach will provide a practical tool for solving large real-world
MDPs. We also believe that it will help us understand the structure of hierarchical learning
algorithms. It is our hope that subsequent research will be able to automate most of the
work that we are currently requiring the programmer to do.

2. Formal Denitions
We begin by introducing denitions for Markov Decision Problems and Semi-Markov Decision Problems.

2.1 Markov Decision Problems
We employ the standard denition for Markov Decision Problems (also known as Markov
decision processes). In this paper, we restrict our attention to situations in which an agent
231

Dietterich

is interacting with a fully-observable stochastic environment. This situation can be modeled
as a Markov Decision Problem (MDP) hS; A; P; R; P0 i dened as follows:
 S : the nite set of states of the environment. At each point in time, the agent can
observe the complete state of the environment.
 A: a nite set of actions. Technically, the set of available actions depends on the
current state s, but we will suppress this dependence in our notation.
 P : When an action a 2 A is performed, the environment makes a probabilistic transition from its current state s to a resulting state s0 according to the probability
distribution P (s0 js; a).
 R: Similarly, when action a is performed and the environment makes its transition
from s to s0 , the agent receives a real-valued (possibly stochastic) reward r whose
expected value is R(s0 js; a). To simplify the notation, it is customary to treat this
reward as being given at the time that action a is initiated, even though it may in
general depend on s0 as well as on s and a.
 P0 : The starting state distribution. When the MDP is initialized, it is in state s with
probability P0 (s).
A policy, , is a mapping from states to actions that tells what action a = (s) to perform
when the environment is in state s.
We will consider two settings: episodic and innite-horizon.
In the episodic setting, all rewards are nite and there is at least one zero-cost absorbing
terminal state. An absorbing terminal state is a state in which all actions lead back to the
same state with probability 1 and zero reward. For technical reasons, we will only consider
problems where all deterministic policies are \proper"|that is, all deterministic policies
have a non-zero probability of reaching a terminal state when started in an arbitrary state.
(We believe this condition can be relaxed, but we have not veried this formally.) In the
episodic setting, the goal of the agent is to nd a policy that maximizes the expected
cumulative reward. In the special case where all rewards are non-positive, these problems
are referred to as stochastic shortest path problems, because the rewards can be viewed as
costs (i.e., lengths), and the policy attempts to move the agent along the path of minimum
expected cost.
In the innite horizon setting, all rewards are also nite. In addition, there is a discount
factor  , and the agent's goal is to nd a policy that minimizes the innite discounted sum
of future rewards.
The value function V  for policy  is a function that tells, for each state s, what the
expected cumulative reward will be of executing policy  starting in state s. Let rt be a
random variable that tells the reward that the agent receives at time step t while following
policy . We can dene the value function in the episodic setting as
V  (s) = E frt + rt+1 + rt+2 +    jst = s; g :
In the discounted setting, the value function is


n

o

V  (s) = E rt + rt+1 +  2 rt+2 +    st = s;  :
232

MAXQ Hierarchical Reinforcement Learning

We can see that this equation reduces to the previous one when  = 1. However, in innitehorizon MDPs this sum may not converge when  = 1.
The value function satises the Bellman equation for a xed policy:

V  (s) =

X

s0

P (s0 js; (s)) R(s0 js; (s)) + V  (s0 ) :




The quantity on the right-hand side is called the backed-up value of performing action a in
state s. For each possible successor state s0 , it computes the reward that would be received
and the value of the resulting state and then weights those according to the probability of
ending up in s0 .
The optimal value function V  is the value function that simultaneously maximizes the
expected cumulative reward in all states s 2 S . Bellman (1957) proved that it is the unique
solution to what is now known as the Bellman equation:

V  (s) = max
a

X

s0

P (s0 js; a) R(s0 js; a) + V  (s0 ) :




(1)

There may be many optimal policies that achieve this value. Any policy that chooses a
in s to achieve the maximum on the right-hand side of this equation is an optimal policy.
We will denote an optimal policy by  . Note that all optimal policies are \greedy" with
respect to the backed-up value of the available actions.
Closely related to the value function is the so-called action-value function, or Q function
(Watkins, 1989). This function, Q (s; a), gives the expected cumulative reward of performing action a in state s and then following policy  thereafter. The Q function also satises
a Bellman equation:

Q (s; a) =

X

s0

P (s0 js; a) R(s0 js; a) + Q (s0 ; (s0 )) :




The optimal action-value function is written Q (s; a), and it satises the equation
X
Q (s; a) = P (s0 js; a)

s0





R(s0 js; a) +  max Q(s0 ; a0 )
a0

:

(2)

Note that any policy that is greedy with respect to Q is an optimal policy. There may be
many such optimal policies|they dier only in how they break ties between actions with
identical Q values.
An action order, denoted !, is a total order over the actions within an MDP. That is, !
is an anti-symmetric, transitive relation such that !(a1 ; a2 ) is true i a1 is strictly preferred
to a2 . An ordered greedy policy, ! is a greedy policy that breaks ties using !. For example,
suppose that the two best actions at state s are a1 and a2 , that Q(s; a1 ) = Q(s; a2 ), and
that !(a1 ; a2 ). Then the ordered greedy policy ! will choose a1 : ! (s) = a1 . Note that
although there may be many optimal policies for a given MDP, the ordered greedy policy,
! , is unique.
233

Dietterich

2.2 Semi-Markov Decision Processes

In order to introduce and prove some of the properties of the MAXQ decomposition, we
need to consider a simple generalization of MDPs|the semi-Markov decision process.
A discrete-time semi-Markov Decision Process (SMDP) is a generalization of the Markov
Decision Process in which the actions can take a variable amount of time to complete. In
particular, let the random variable N denote the number of time steps that action a takes
when it is executed in state s. We can extend the state transition probability function to
be the joint distribution of the result states s0 and the number of time steps N when action
a is performed in state s: P (s0 ; N js; a). Similarly, the expected reward can be changed to
be R(s0 ; N js; a).1
It is straightforward to modify the Bellman equation to dene the value function for a
xed policy  as
h
i
X
V  (s) = P (s0; N js; (s)) R(s0 ; N js; (s)) +  N V  (s0 ) :
s0 ;N

The only change is that the expected value on the right-hand side is taken with respect to
both s0 and N , and  is raised to the power N to reect the variable amount of time that
may elapse while executing action a.
Note that because expectation is a linear operator, we can write each of these Bellman
equations as the sum of the expected reward for performing action a and the expected value
of the resulting state s0 . For example, we can rewrite the equation above as
X
(3)
V  (s) = R(s; (s)) + P (s0 ; N js; (s)) N V  (s0 ):
s0 ;N

where R(s; (s)) is the expected reward of performing action (s) in state s, and the expectation is taken with respect to s0 and N .
All of the results given in this paper can be generalized to apply to discrete-time semiMarkov Decision Processes. A consequence of this is that whenever this paper talks of
executing a primitive action, it could just as easily talk of executing a hand-coded openloop \subroutine". These subroutines would not be learned, and nor could their execution
be interrupted as discussed below in Section 6. But in many applications (e.g., robot
control with limited sensors), open-loop controllers can be very useful (e.g., to hide partialobservability). For an example, see Kalmar, Szepesvari, and A. Lorincz (1998).
Note that for the episodic case, there is no dierence between a MDP and a Semi-Markov
Decision Process, because the discount factor  is 1, and therefore neither the optimal policy
nor the optimal value function depend on the amount of time each action takes.

2.3 Reinforcement Learning Algorithms

A reinforcement learning algorithm is an algorithm that tries to construct an optimal policy
for an unknown MDP. The algorithm is given access to the unknown MDP via the following
1. This formalization is slightly dierent from the standard formulation of SMDPs, which separates
P (s0js; a) and F (tjs; a), where F is the cumulative distribution function for the probability that a will
terminate in t time units, and t is real-valued rather than integer-valued. In our case, it is important
to consider the joint distribution of s0 and N , but we do not need to consider actions with arbitrary
real-valued durations.

234

MAXQ Hierarchical Reinforcement Learning

reinforcement learning protocol. At each time step t, the algorithm is told the current state
s of the MDP and the set of actions A(s)  A that are executable in that state. The
algorithm chooses an action a 2 A(s), and the MDP executes this action (which causes it to
move to state s') and returns a real-valued reward r. If s is an absorbing terminal state, the
set of actions A(s) contains only the special action reset, which causes the MDP to move
to one of its initial states, drawn according to P0 .
In this paper, we will make use of two well-known learning algorithms: Q learning
(Watkins, 1989; Watkins & Dayan, 1992) and SARSA(0) (Rummery & Niranjan, 1994). We
will apply these algorithms to the case where the action value function Q(s; a) is represented
as a table with one entry for each pair of state and action. Every entry of the table is
initialized arbitrarily.
In Q learning, after the algorithm has observed s, chosen a, received r, and observed s0 ,
it performs the following update:

Qt (s; a) := (1 , t )Qt,1 (s; a) + t [r +  max
Q (s0 ; a0 )];
a0 t,1
where t is a learning rate parameter.
Jaakkola, Jordan and Singh (1994) and Bertsekas and Tsitsiklis (1996) prove that if the
agent follows an \exploration policy" that tries every action in every state innitely often
and if
T
T
X
X
lim

=
1
and
lim
2t < 1
(4)
t
T !1
T!1
t=1

t=1

then Qt converges to the optimal action-value function Q with probability 1. Their proof
holds in both settings discussed in this paper (episodic and innite-horizon).
The SARSA(0) algorithm is very similar. After observing s, choosing a, observing r,
observing s0 , and choosing a0 , the algorithm performs the following update:

Qt (s; a) := (1 , t )Qt,1 (s; a) + t [r + Qt,1 (s0 ; a0 )];
where t is a learning rate parameter. The key dierence is that the Q value of the chosen
action a0 , Q(s0 ; a0 ), appears on the right-hand side in the place where Q learning uses the
Q value of the best action. Singh, et al. (1998) provide two important convergence results:
First, if a xed policy  is employed to choose actions, SARSA(0) will converge to the
value function of that policy provided t decreases according to Equations (4). Second, if a
so-called GLIE policy is employed to choose actions, SARSA(0) will converge to the value
function of the optimal policy, provided again that t decreases according to Equations (4).
A GLIE policy is dened as follows:

Denition 1 A GLIE (Greedy in the Limit with Innite Exploration) policy is any policy

satisfying

1. Each action is executed innitely often in every state that is visited innitely often.
2. In the limit, the policy is greedy with respect to the Q-value function with probability
1.
235

Dietterich

4

R

G

3
2
1
0 Y
0

B
1

2

3

4

Figure 1: The Taxi Domain.

3. The MAXQ Value Function Decomposition
At the center of the MAXQ method for hierarchical reinforcement learning is the MAXQ
value function decomposition. MAXQ describes how to decompose the overall value function
for a policy into a collection of value functions for individual subtasks (and subsubtasks,
recursively).

3.1 A Motivating Example

To make the discussion concrete, let us consider the following simple example. Figure 1
shows a 5-by-5 grid world inhabited by a taxi agent. There are four specially-designated
locations in this world, marked as R(ed), B(lue), G(reen), and Y(ellow). The taxi problem
is episodic. In each episode, the taxi starts in a randomly-chosen square. There is a
passenger at one of the four locations (chosen randomly), and that passenger wishes to be
transported to one of the four locations (also chosen randomly). The taxi must go to the
passenger's location (the \source"), pick up the passenger, go to the destination location
(the \destination"), and put down the passenger there. (To keep things uniform, the taxi
must pick up and drop o the passenger even if he/she is already located at the destination!)
The episode ends when the passenger is deposited at the destination location.
There are six primitive actions in this domain: (a) four navigation actions that move the
taxi one square North, South, East, or West, (b) a Pickup action, and (c) a Putdown action.
There is a reward of ,1 for each action and an additional reward of +20 for successfully
delivering the passenger. There is a reward of ,10 if the taxi attempts to execute the
Putdown or Pickup actions illegally. If a navigation action would cause the taxi to hit a
wall, the action is a no-op, and there is only the usual reward of ,1.
To simplify the examples throughout this section, we will make the six primitive actions deterministic. Later, we will make the actions stochastic in order to create a greater
challenge for our learning algorithms.
We seek a policy that maximizes the total reward per episode. There are 500 possible
states: 25 squares, 5 locations for the passenger (counting the four starting locations and
the taxi), and 4 destinations.
This task has a simple hierarchical structure in which there are two main sub-tasks:
Get the passenger and Deliver the passenger. Each of these subtasks in turn involves the
236

MAXQ Hierarchical Reinforcement Learning

subtask of navigating to one of the four locations and then performing a Pickup or Putdown
action.
This task illustrates the need to support temporal abstraction, state abstraction, and
subtask sharing. The temporal abstraction is obvious|for example, the process of navigating to the passenger's location and picking up the passenger is a temporally extended
action that can take dierent numbers of steps to complete depending on the distance to
the target. The top level policy (get passenger; deliver passenger) can be expressed very
simply if these temporal abstractions can be employed.
The need for state abstraction is perhaps less obvious. Consider the subtask of getting
the passenger. While this subtask is being solved, the destination of the passenger is
completely irrelevant|it cannot aect any of the nagivation or pickup decisions. Perhaps
more importantly, when navigating to a target location (either the source or destination
location of the passenger), only the target location is important. The fact that in some
cases the taxi is carrying the passenger and in other cases it is not is irrelevant.
Finally, support for subtask sharing is critical. If the system could learn how to solve the
navigation subtask once, then the solution could be shared by both the \Get the passenger"
and \Deliver the passenger" subtasks. We will show below that the MAXQ method provides
a value function representation and learning algorithm that supports temporal abstraction,
state abstraction, and subtask sharing.
To construct a MAXQ decomposition for the taxi problem, we must identify a set of
individual subtasks that we believe will be important for solving the overall task. In this
case, let us dene the following four tasks:
 Navigate(t). In this subtask, the goal is to move the taxi from its current location to
one of the four target locations, which will be indicated by the formal parameter t.
 Get. In this subtask, the goal is to move the taxi from its current location to the
passenger's current location and pick up the passenger.
 Put. The goal of this subtask is to move the taxi from the current location to the
passenger's destination location and drop o the passenger.
 Root. This is the whole taxi task.
Each of these subtasks is dened by a subgoal, and each subtask terminates when the
subgoal is achieved.
After dening these subtasks, we must indicate for each subtask which other subtasks or
primitive actions it should employ to reach its goal. For example, the Navigate(t) subtask
should use the four primitive actions North, South, East, and West. The Get subtask should
use the Navigate subtask and the Pickup primitive action, and so on.
All of this information can be summarized by a directed acyclic graph called the task
graph, which is shown in Figure 2. In this graph, each node corresponds to a subtask or a
primitive action, and each edge corresponds to a potential way in which one subtask can
\call" one of its child tasks. The notation formal=actual (e.g., t=source) tells how a formal
parameter is to be bound to an actual parameter.
Now suppose that for each of these subtasks, we write a policy (e.g., as a computer
program) to achieve the subtask. We will refer to the policy for a subtask as a \subroutine", and we can view the parent subroutine as invoking the child subroutine via ordinary
237

Dietterich

Root

Get

Put
t/source

Pickup

t/destination

Navigate(t)

North

South

East

Putdown

West

Figure 2: A task graph for the Taxi problem.
subroutine-call-and-return semantics. If we have a policy for each subtask, then this gives
us an overall policy for the Taxi MDP. The Root subtask executes its policy by calling
subroutines that are policies for the Get and Put subtasks. The Get policy calls subroutines
for the Navigate(t) subtask and the Pickup primitive action. And so on. We will call this
collection of policies a hierarchical policy. In a hierarchical policy, each subroutine executes
until it enters a terminal state for its subtask.

3.2 Denitions

Let us formalize the discussion so far.
The MAXQ decomposition takes a given MDP M and decomposes it into a nite set of
subtasks fM0 ; M1 ; : : : ; Mn g with the convention that M0 is the root subtask (i.e., solving
M0 solves the entire original MDP M ).
Denition 2 An unparameterized subtask is a three-tuple, hTi; Ai ; R~i i, dened as follows:
1. Ti is a termination predicate that partitions S into a set of active states, Si , and a set
of terminal states, Ti : The policy for subtask Mi can only be executed if the current
state s is in Si . If, at any time that subtask Mi is being executed, the MDP enters a
state in Ti , then Mi terminates immediately (even if it is still executing a subtask, see
below).
2. Ai is a set of actions that can be performed to achieve subtask Mi . These actions can
either be primitive actions from A, the set of primitive actions for the MDP, or they
can be other subtasks, which we will denote by their indexes i. We will refer to these
actions as the \children" of subtask i. The sets Ai dene a directed graph over the
subtasks M0 ; : : : ; Mn , and this graph may not contain any cycles. Stated another way,
no subtask can invoke itself recursively either directly or indirectly.
If a child subtask Mj has formal parameters, then this is interpreted as if the subtask
occurred multiple times in Ai , with one occurrence for each possible tuple of actual
238

MAXQ Hierarchical Reinforcement Learning

values that could be bound to the formal parameters. The set of actions Ai may dier
from one state to another and from one set of actual parameter values to another, so
technically, Ai is a function of s and the actual parameters. However, we will suppress
this dependence in our notation.
3. R~ i (s0 ) is the pseudo-reward function, which species a (deterministic) pseudo-reward
for each transition to a terminal state s0 2 Ti . This pseudo-reward tells how desirable
each of the terminal states is for this subtask. It is typically employed to give goal
terminal states a pseudo-reward of 0 and any non-goal terminal states a negative
reward. By denition, the pseudo-reward R~ i (s) is also zero for all non-terminal states
s. The pseudo-reward is only used during learning, so it will not be mentioned further
until Section 4.
Each primitive action a from M is a primitive subtask in the MAXQ decomposition
such that a is always executable, it always terminates immediately after execution, and its
pseudo-reward function is uniformly zero.

If a subtask has formal parameters, then each possible binding of actual values to the
formal parameters species a distinct subtask. We can think of the values of the formal
parameters as being part of the \name" of the subtask. In practice, of course, we implement
a parameterized subtask by parameterizing the various components of the task. If b species
the actual parameter values for task Mi , then we can dene a parameterized termination
predicate Ti (s; b) and a parameterized pseudo-reward function R~ i (s0 ; b). To simplify notation
in the rest of the paper, we will usually omit these parameter bindings. However, it should
be noted that if a parameter of a subtask takes on a large number of possible values, this
is equivalent to creating a large number of dierent subtasks, each of which will need to be
learned. It will also create a large number of candidate actions for the parent task, which
will make the learning problem more dicult for the parent task as well.

Denition 3 A hierarchical policy, , is a set containing a policy for each of the subtasks
in the problem:  = f0 ; : : : ; n g:
Each subtask policy i takes a state and returns the name of a primitive action to
execute or the name of a subroutine (and bindings for its formal parameters) to invoke. In
the terminology of Sutton, Precup, and Singh (1998), a subtask policy is a deterministic
\option", and its probability of terminating in state s (which they denote by  (s)) is 0 if
s 2 Si , and 1 if s 2 Ti .
In a parameterized task, the policy must be parameterized as well so that  takes a
state and the bindings of formal parameters and returns a chosen action and the bindings
(if any) of its formal parameters.
Table 1 gives a pseudo-code description of the procedure for executing a hierarchical
policy. The hierarchical policy is executed using a stack discipline, similar to ordinary
programming languages. Let Kt denote the contents of the pushdown stack at time t.
When a subroutine is invoked, its name and actual parameters are pushed onto the stack.
When a subroutine terminates, its name and actual parameters are popped o the stack.
Notice (line 16) that if any subroutine on the stack terminates, then all subroutines below
239

Dietterich

Table 1: Pseudo-Code for Execution of a Hierarchical Policy.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21

Procedure ExecuteHierarchicalPolicy()

st is the state of the world at time t
Kt is the state of the execution stack at time t
Let t = 0; Kt = empty stack; observe st
push (0; nil) onto stack Kt (invoke the root task with no parameters)

repeat
while top(Kt ) is not a primitive action

Let (i; fi ) := top(Kt), where
i is the name of the \current" subroutine, and
fi gives the parameter bindings for i
Let (a; fa ) := i (s; fi ), where
a is the action and fa gives the parameter bindings chosen by policy i
push (a; fa ) onto the stack Kt
end // while
Let (a; nil) := pop(Kt) be the primitive action on the top of the stack.
Execute primitive action a, observe st+1, and receive reward R(st+1jst ; a)
If any subtask on Kt is terminated in st+1 then
Let M 0 be the terminated subtask that is highest (closest to the root) on the stack.
while top(Kt) 6= M 0 do pop(Kt)
pop(Kt)
Kt+1 := Kt is the resulting execution stack.
until Kt+1 is empty
end ExecuteHierarchicalPolicy

it are immediately aborted, and control returns to the subroutine that had invoked the
terminated subroutine.
It is sometimes useful to think of the contents of the stack as being an additional part of
the state space for the problem. Hence, a hierarchical policy implicitly denes a mapping
from the current state st and current stack contents Kt to a primitive action a. This action is
executed, and this yields a resulting state st+1 and a resulting stack contents Kt+1 . Because
of the added state information in the stack, the hierarchical policy is non-Markovian with
respect to the original MDP.
Because a hierarchical policy maps from states s and stack contents K to actions, the
value function for a hierarchical policy must assign values to combinations of states s and
stack contents K .

Denition 4 A hierarchical value function, denoted V  (hs; K i), gives the expected cumu-

lative reward of following the hierarchical policy  starting in state s with stack contents
K.

This hierarchical value function is exactly what is learned by Ron Parr's (1998b) HAMQ
algorithm, which we will discuss below. However, in this paper, we will focus on learning
only the projected value functions of each of the subtasks M0 ; : : : ; Mn in the hierarchy.
240

MAXQ Hierarchical Reinforcement Learning

Denition 5 The projected value function of hierarchical policy  on subtask Mi, denoted
V  (i; s), is the expected cumulative reward of executing i (and the policies of all descendents
of Mi ) starting in state s until Mi terminates.
The purpose of the MAXQ value function decomposition is to decompose V (0; s) (the
projected value function of the root task) in terms of the projected value functions V (i; s)
of all of the subtasks in the MAXQ decomposition.

3.3 Decomposition of the Projected Value Function

Now that we have dened a hierarchical policy and its projected value function, we can show
how that value function can be decomposed hierarchically. The decomposition is based on
the following theorem:

Theorem 1 Given a task graph over tasks M0 ; : : : ; Mn and a hierarchical policy , each
subtask Mi denes a semi-Markov decision process with states Si , actions Ai , probability
transition function Pi (s0 ; N js; a), and expected reward function R(s; a) = V  (a; s), where
V  (a; s) is the projected value function for child task Ma in state s. If a is a primitive
action,
V  (a; s) is dened as the expected immediate reward of executing a in s: V  (a; s) =
P
0
0
s0 P (s js; a)R(s js; a).
Proof: Consider all of the subroutines that are descendents of task Mi in the task graph.

Because all of these subroutines are executing xed policies (specied by hierarchical policy
), the probability transition function Pi (s0 ; N js; a) is a well dened, stationary distribution
for each child subroutine a. The set of states Si and the set of actions Ai are obvious. The
interesting part of this theorem is the fact that the expected reward function R(s; a) of the
SMDP is the projected value function of the child task Ma .
To see this, let us write out the value of V  (i; s):

V  (i; s) = E frt + rt+1 +  2 rt+2 +    jst = s; g
(5)
This sum continues until the subroutine for task Mi enters a state in Ti .
Now let us suppose that the rst action chosen by i is a subroutine a. This subroutine
is invoked, and it executes for a number of steps N and terminates in state s0 according to
Pi (s0 ; N js; a). We can rewrite Equation (5) as
V  (i; s) = E

(

NX
,1
u=0

 u rt+u

+

1
X

u=N




t+u 

ur

st = s; 

)

(6)

The rst summation on the right-hand side of Equation (6) is the discounted sum of rewards
for executing subroutine a starting in state s until it terminates, in other words, it is V  (a; s),
the projected value function for the child task Ma . The second term on the right-hand side
of the equation is the value of s0 for the current task i, V  (i; s0 ), discounted by  N , where
s0 is the current state when subroutine a terminates. We can write this in the form of a
Bellman equation:
X
(7)
V  (i; s) = V  (i (s); s) + Pi (s0 ; N js; i (s)) N V  (i; s0 )
s0 ;N

241

Dietterich

This has the same form as Equation (3), which is the Bellman equation for an SMDP, where
the rst term is the expected reward R(s; (s)). Q.E.D.
To obtain a hierarchical decomposition of the projected value function, let us switch
to the action-value (or Q) representation. First, we need to extend the Q notation to
handle the task hierarchy. Let Q (i; s; a) be the expected cumulative reward for subtask
Mi of performing action a in state s and then following hierarchical policy  until subtask
Mi terminates. Action a may be either a primitive action or a child subtask. With this
notation, we can re-state Equation (7) as follows:

Q (i; s; a) = V  (a; s) +

X

s0 ;N

Pi (s0 ; N js; a) N Q (i; s0 ; (s0 ));

(8)

The right-most term in this equation is the expected discounted reward of completing task

Mi after executing action a in state s. This term only depends on i, s, and a, because the
summation marginalizes away the dependence on s0 and N . Let us dene C  (i; s; a) to be
equal to this term:

Denition 6 The completion function, C  (i; s; a), is the expected discounted cumulative

reward of completing subtask Mi after invoking the subroutine for subtask Ma in state s.
The reward is discounted back to the point in time where a begins execution.

C  (i; s; a) =

X

s0 ;N

Pi (s0; N js; a) N Q (i; s0 ; (s0 ))

(9)

With this denition, we can express the Q function recursively as

Q (i; s; a) = V  (a; s) + C  (i; s; a):

(10)

Finally, we can re-express the denition for V  (i; s) as

V  (i; s) =

(

 (i; s; i (s))
Q
if i is composite
P
0
0
s0 P (s js; i)R(s js; i) if i is primitive

(11)

We will refer to equations (9), (10), and (11) as the decomposition equations for the
MAXQ hierarchy under a xed hierarchical policy . These equations recursively decompose
the projected value function for the root, V  (0; s) into the projected value functions for
the individual subtasks, M1 ; : : : ; Mn and the individual completion functions C  (j; s; a)
for j = 1; : : : ; n. The fundamental quantities that must be stored to represent the value
function decomposition are just the C values for all non-primitive subtasks and the V values
for all primitive actions.
To make it easier for programmers to design and debug MAXQ decompositions, we have
developed a graphical representation that we call the MAXQ graph. A MAXQ graph for the
Taxi domain is shown in Figure 3. The graph contains two kinds of nodes, Max nodes and
Q nodes. The Max nodes correspond to the subtasks in the task decomposition|there is
one Max node for each primitive action and one Max node for each subtask (including the
Root) task. Each primitive Max node i stores the value of V  (i; s). The Q nodes correspond
to the actions that are available for each subtask. Each Q node for parent task i, state s
242

MAXQ Hierarchical Reinforcement Learning

MaxRoot

QPickup

QGet

QPut

MaxGet

MaxPut

QNavigateForPut

QNavigateForGet

t/source

QPutdown

t/destination

Pickup

Putdown

MaxNavigate(t)

QNorth(t)

QEast(t)

QSouth(t)

QWest(t)

North

East

South

West

Figure 3: A MAXQ graph for the Taxi Domain.
and subtask a stores the value of C  (i; s; a). The children of any node are unordered|that
is, the order in which they are drawn in Figure 3 does not imply anything about the order in
which they will be executed. Indeed, a child action may be executed multiple times before
its parent subtask is completed.
In addition to storing information, the Max nodes and Q nodes can be viewed as performing parts of the computation described by the decomposition equations. Specically,
each Max node i can be viewed as computing the projected value function V  (i; s) for its
subtask. For primitive Max nodes, this information is stored in the node. For composite
Max nodes, this information is obtained by \asking" the Q node corresponding to i (s).
Each Q node with parent task i and child task a can be viewed as computing the value of
Q (i; s; a). It does this by \asking" its child task a for its projected value function V  (a; s)
and then adding its completion function C  (i; s; a).
243

Dietterich

As an example, consider the situation shown in Figure 1, which we will denote by s1 .
Suppose that the passenger is at R and wishes to go to B. Let the hierarchical policy we
are evaluating be an optimal policy denoted by  (we will omit the superscript * to reduce
the clutter of the notation). The value of this state under  is 10, because it will cost 1
unit to move the taxi to R, 1 unit to pickup the passenger, 7 units to move the taxi to B,
and 1 unit to putdown the passenger, for a total of 10 units (a reward of ,10). When the
passenger is delivered, the agent gets a reward of +20, so the net value is +10.
Figure 4 shows how the MAXQ hierarchy computes this value. To compute the value
V  (Root; s1 ), MaxRoot consults its policy and nds that Root (s1) is Get. Hence, it \asks"
the Q node, QGet to compute Q (Root; s1 ; Get). The completion cost for the Root task
after performing a Get, C  (Root; s1 ; Get), is 12, because it will cost 8 units to deliver the
customer (for a net reward of 20 , 8 = 12) after completing the Get subtask. However, this
is just the reward after completing the Get, so it must ask MaxGet to estimate the expected
reward of performing the Get itself.
The policy for MaxGet dictates that in s1 , the Navigate subroutine should be invoked with
t bound to R, so MaxGet consults the Q node, QNavigateForGet to compute the expected
reward. QNavigateForGet knows that after completing the Navigate(R) task, one more action
(the Pickup) will be required to complete the Get, so C  (MaxGet; s1 ; Navigate(R)) = ,1.
It then asks MaxNavigate(R) to compute the expected reward of performing a Navigate to
location R.
The policy for MaxNavigate chooses the North action, so MaxNavigate asks QNorth to
compute the value. QNorth looks up its completion cost, and nds that C  (Navigate; s1 ; North)
is 0 (i.e., the Navigate task will be completed after performing the North action). It consults
MaxNorth to determine the expected cost of performing the North action itself. Because
MaxNorth is a primitive action, it looks up its expected reward, which is ,1.
Now this series of recursive computations can conclude as follows:

 Q (Navigate(R); s1 ; North) = ,1 + 0
 V  (Navigate(R); s1 ) = ,1
 Q (Get; s1 ; Navigate(R)) = ,1 + ,1
(,1 to perform the Navigate plus ,1 to complete the Get.
 V  (Get; s1) = ,2
 Q (Root; s1; Get) = ,2 + 12
(,2 to perform the Get plus 12 to complete the Root task and collect the nal reward).
The end result of all of this is that the value of V  (Root; s1 ) is decomposed into a sum
of C terms plus the expected reward of the chosen primitive action:

V  (Root; s1 ) = V  (North; s1 ) + C  (Navigate(R); s1 ; North) +
C  (Get; s1 ; Navigate(R)) + C  (Root; s1; Get)
= ,1 + 0 + ,1 + 12
= 10
244

MAXQ Hierarchical Reinforcement Learning

10
MaxRoot
10
12

QGet

QPut

-2
MaxGet

MaxPut
-2

QPickup

QNavigateForPut

QNavigateForGet

QPutdown

-1
-1
Pickup

Putdown

MaxNavigate(t)
-1
0

QNorth(t)

QEast(t)

QSouth(t)

QWest(t)

East

South

West

-1
North

Figure 4: Computing the value of a state using the MAXQ hierarchy. The C value of each
Q node is shown to the left of the node. All other numbers show the values being
returned up the graph.
In general, the MAXQ value function decomposition has the form

V  (0; s) = V  (am ; s) + C  (am,1 ; s; am ) + : : : + C  (a1 ; s; a2 ) + C  (0; s; a1 ); (12)
where a0 ; a1 ; : : : ; am is the \path" of Max nodes chosen by the hierarchical policy going
from the Root down to a primitive leaf node. This is summarized graphically in Figure 5.
We can summarize the presentation of this section by the following theorem:

Theorem 2 Let  = fi; i = 0; : : : ; ng be a hierarchical policy dened for a given MAXQ
graph with subtasks M0 ; : : : ; Mn ; and let i = 0 be the root node of the graph. Then there
exist values for C  (i; s; a) (for internal Max nodes) and V  (i; s) (for primitive, leaf Max
245

Dietterich



V (0X; s)

XXXXX




X
V  (a ; s)
P
 PPPP
1

.
V  (am,1 ; s)

. .

ZZ

ZZ


V  (am ; s) C  (am,1 ; s; am )
r1

r2

r3

r4

r5

C  (a1 ; s; a2 )
. . .

r8

r9

C  (0; s; a1 )

r10 r11 r12 r13 r14

Figure 5: The MAXQ decomposition; r1 ; : : : ; r14 denote the sequence of rewards received
from primitive actions at times 1; : : : ; 14.
nodes) such that V  (0; s) (as computed by the decomposition equations (9), (10), and (11))
is the expected discounted cumulative reward of following policy  starting in state s.

Proof: The proof is by induction on the number of levels in the task graph. At each

level i, we compute values for C  (i; s; (s)) (or V  (i; s); if i is primitive) according to the
decomposition equations. We can apply the decomposition equations again to compute
Q (i; s; (s)) and apply Equation (8) and Theorem 1 to conclude that Q (i; s; (s)) gives
the value function for level i. When i = 0, we obtain the value function for the entire
hierarchical policy. Q. E. D.
It is important to note that this representation theorem does not mention the pseudoreward function, because the pseudo-reward is used only during learning. This theorem
captures the representational power of the MAXQ decomposition, but it does not address
the question of whether there is a learning algorithm that can nd a given policy. That is
the subject of the next section.

4. A Learning Algorithm for the MAXQ Decomposition
This section presents the central contributions of the paper. First, we discuss what optimality criteria should be employed in hierarchical reinforcement learning. Then we introduce
the MAXQ-0 learning algorithm, which can learn value functions (and policies) for MAXQ
hierarchies in which there are no pseudo-rewards (i.e., the pseudo-rewards are zero). The
central theoretical result of the paper is that MAXQ-0 converges to a recursively optimal
policy for the given MAXQ hierarchy. This is followed by a brief discussion of ways of
accelerating MAXQ-0 learning. The section concludes with a description of the MAXQ-Q
learning algorithm, which handles non-zero pseudo-reward functions.
246

MAXQ Hierarchical Reinforcement Learning

4.1 Two Kinds of Optimality

In order to develop a learning algorithm for the MAXQ decomposition, we must consider
exactly what we are hoping to achieve. Of course, for any MDP M , we would like to nd
an optimal policy  . However, in the MAXQ method (and in hierarchical reinforcement
learning in general), the programmer imposes a hierarchy on the problem. This hierarchy
constrains the space of possible policies so that it may not be possible to represent the
optimal policy or its value function.
In the MAXQ method, the constraints take two forms. First, within a subtask, only
some of the possible primitive actions may be permitted. For example, in the taxi task,
during a Navigate(t), only the North, South, East, and West actions are available|the Pickup
and Putdown actions are not allowed. Second, consider a Max node Mj with child nodes
fMj ; : : : ; Mjk g. The policy learned for Mj must involve executing the learned policies of
these child nodes. When the policy for child node Mji is executed, it will run until it enters
a state in Tji . Hence, any policy learned for Mj must pass through some subset of these
terminal state sets fTj ; : : : ; Tjk g.
The HAM method shares these same two constraints and in addition, it imposes a
partial policy on each node, so that the policy for any subtask Mi must be a deterministic
renement of the given non-deterministic initial policy for node i.
In the \option" approach, the policy is even further constrained. In this approach, there
are only two non-primitive levels in the hierarchy, and the subtasks at the lower level (i.e.,
whose children are all primitive actions) are given complete policies by the programmer.
Hence, any learned policy at the upper level must be constructed by \concatenating" the
given lower level policies in some order.
The purpose of imposing these constraints on the policy is to incorporate prior knowledge
and thereby reduce the size of the space that must be searched to nd a good policy.
However, these constraints may make it impossible to learn the optimal policy.
If we can't learn the optimal policy, the next best target would be to learn the best
policy that is consistent with (i.e., can be represented by) the given hierarchy.
1

1

Denition 7 A hierarchically optimal policy for MDP M is a policy that achieves the
highest cumulative reward among all policies consistent with the given hierarchy.

Parr (1998b) proves that his HAMQ learning algorithm converges with probability 1
to a hierarchically optimal policy. Similarly, given a xed set of options, Sutton, Precup,
and Singh (1998) prove that their SMDP learning algorithm converges to a hierarchically
optimal value function. Incidentally, they also show that if the primitive actions are also
made available as \trivial" options, then their SMDP method converges to the optimal
policy. However, in this case, it is hard to say anything formal about how the options speed
the learning process. They may in fact hinder it (Hauskrecht et al., 1998).
Because the MAXQ decomposition can represent the value function of any hierarchical
policy, we could easily construct a modied version of the HAMQ algorithm and apply it
to learn hierarchically optimal policies for the MAXQ hierarchy. However, we decided to
pursue an even weaker form of optimality, for reasons that will become clear as we proceed.
This form of optimality is called recursive optimality.
247

Dietterich

MaxRoot

G

QExit

QGotoGoal

MaxExit

MaxGotoGoal

*

*

QExitNorth

QExitSouth

QExitEast

North

QNorthG

South

QSouthG

QEastG

East

Figure 6: A simple MDP (left) and its associated MAXQ graph (right). The policy shown in
the left diagram is recursively optimal but not hierarchically optimal. The shaded
cells indicate points where the locally-optimal policy is not globally optimal.

Denition 8 A recursively optimal policy for Markov decision process M with MAXQ
decomposition fM0 ; : : : ; Mk g is a hierarchical policy  = f0 ; : : : ; k g such that for each

subtask Mi , the corresponding policy i is optimal for the SMDP dened by the set of states
Si , the set of actions Ai , the state transition probability function P  (s0 ; N js; a), and the
reward function given by the sum of the original reward function R(s0 js; a) and the pseudoreward function R~ i (s0 ).

Note that the state transition probability distribution, P  (s0 ; N js; a) for subtask Mi is
dened by the locally optimal policies fj g of all subtasks that are descendents of Mi in
the MAXQ graph. Hence, recursive optimality is a kind of local optimality in which the
policy at each node is optimal given the policies of its children.
The reason to seek recursive optimality rather than hierarchical optimality is that recursive optimality makes it possible to solve each subtask without reference to the context
in which it is executed. This context-free property makes it easier to share and re-use
subtasks. It will also turn out to be essential for the successful use of state abstraction.
Before we proceed to describe our learning algorithm for recursive optimality, let us see
how recursive optimality diers from hierarchical optimality.
It is easy to construct examples of policies that are recursively optimal but not hierarchically optimal (and vice versa). Consider the simple maze problem and its associated
MAXQ graph shown in Figures 6. Suppose a robot starts somewhere in the left room, and
it must reach the goal G in the right room. The robot has three actions, North, South, and
East, and these actions are deterministic. The robot receives a reward of ,1 for each move.
Let us dene two subtasks:
248

MAXQ Hierarchical Reinforcement Learning

 Exit. This task terminates when the robot exits the left room. We can set the pseudo-

reward function R~ to be 0 for the two terminal states (i.e., the two states indicated
by *'s).
 GotoGoal. This task terminates when the robot reaches the goal G.
The arrows in Figure 6 show the locally optimal policy within each room. The arrows
on the left seek to exit the left room by the shortest path, because this is what we specied
when we set the pseudo-reward function to 0. The arrows on the right follow the shortest
path to the goal, which is ne. However, the resulting policy is neither hierarchically optimal
nor optimal.
There exists a hierarchical policy that would always exit the left room by the upper
door. The MAXQ value function decomposition can represent the value function of this
policy, but such a policy would not be locally optimal (because, for example, the states
in the \shaded" region would not follow the shortest path to a doorway). Hence, this
example illustrates both a recursively optimal policy that is not hierarchically optimal and
a hierarchically optimal policy that is not recursively optimal.
If we consider for a moment, we can see a way to x this problem. The value of the
upper starred state under the optimal hierarchical policy is ,2 and the value of the lower
starred state is ,6. Hence, if we changed R~ to have these values (instead of being zero),
then the recursively-optimal policy would be hierarchically optimal (and globally optimal).
In other words, if the programmer can guess the right values for the terminal states of a
subtask, then the recursively optimal policy will be hierarchically optimal.
This basic idea was rst pointed out by Dean and Lin (1995). They describe an algorithm
that makes initial guesses for the values of these starred states and then updates those
guesses based on the computed values of the starred states under the resulting recursivelyoptimal policy. They proved that this will converge to a hierarchically optimal policy. The
drawback of their method is that it requires repeated solution of the resulting hierarchical
learning problem, and this does not always yield a speedup over just solving the original,
at problem.
Parr (1998a) proposed an interesting approach that constructs a set of dierent R~ functions and computes the recursively optimal policy under each of them for each subtask. His
method chooses the R~ functions in such a way that the hierarchically optimal policy can be
approximated to any desired degree. Unfortunately, the method is quite expensive, because
it relies on solving a series of linear programming problems each of which requires time
polynomial in several parameters, including the number of states jSi j within the subtask.
This discussion suggests that while, in principle, it is possible to learn good values for
the pseudo-reward function, in practice, we must rely on the programmer to specify a single
pseudo-reward function, R~ , for each subtask. If the programmer wishes to consider a small
number of alternative pseudo-reward functions, they can be handled by dening a small
number of subtasks that are identical except for their R~ functions, and permitting the
learning algorithm to choose the one that gives the best recursively-optimal policy.
In our experiments, we have employed the following simplied approach to dening
R~ . For each subtask Mi, we dene two predicates: the termination predicate, Ti , and a
goal predicate, Gi . The goal predicate denes a subset of the terminal states that are \goal
states", and these have a pseudo-reward of 0. All other terminal states have a xed constant
249

Dietterich

pseudo-reward (e.g., ,100) that is set so that it is always better to terminate in a goal state
than in a non-goal state. For the problems on which we have tested the MAXQ method,
this worked very well.
In our experiments with MAXQ, we have found that it is easy to make mistakes in
dening Ti and Gi . If the goal is not dened carefully, it is easy to create a set of subtasks
that lead to innite looping. For example, consider again the problem in Figure 6. Suppose
we permit a fourth action, West, in the MDP and let us dene the termination and goal
predicates for the right hand room to be satised i either the robot reaches the goal or it
exits the room. This is a very natural denition, since it is quite similar to the denition
for the left-hand room. However, the resulting locally-optimal policy for this room will
attempt to move to the nearest of these three locations: the goal, the upper door, or the
lower door. We can easily see that for all but a few states near the goal, the only policies
that can be constructed by MaxRoot will loop forever, rst trying to leave the left room by
entering the right room, and then trying to leave the right room by entering the left room.
This problem is easily xed by dening the goal predicate Gi for the right room to be true
if and only if the robot reaches the goal G. But avoiding such \undesired termination" bugs
can be hard in more complex domains.
In the worst case, it is possible for the programmer to specify pseudo-rewards such that
the recursively optimal policy can be made arbitrarily worse than the hierarchically optimal
policy. For example, suppose that we change the original MDP in Figure 6 so that the state
immediately to the left of the upper doorway gives a large negative reward ,L whenever
the robot visits that square. Because rewards everywhere else are ,1, the hierarchicallyoptimal policy exits the room by the lower door. But suppose the programmer has chosen
instead to force the robot to exit by the upper door (e.g., by assigning a pseudo-reward of
,10L for leaving via the lower door). In this case, the recursively-optimal policy will leave
by the upper door and suer the large ,L penalty. By making L arbitrarily large, we can
make the dierence between the hierarchically-optimal policy and the recursively-optimal
policy arbitrarily large.

4.2 The MAXQ-0 Learning Algorithm
Now that we have an understanding of recursively optimal policies, we present two learning
algorithms. The rst one, called MAXQ-0, applies only in the case when the pseudo-reward
function R~ is always zero. We will rst prove its convergence properties and then show
how it can be extended to give the second algorithm, MAXQ-Q, which works with general
pseudo-reward functions.
Table 2 gives pseudo-code for MAXQ-0. MAXQ-0 is a recursive function that executes
the current exploration policy starting at Max node i in state s. It performs actions until it
reaches a terminal state, at which point it returns a count of the total number of primitive
actions that have been executed. To execute an action, MAXQ-0 calls itself recursively
(line 9). When the recursive call returns, it updates the value of the completion function
for node i. It uses the count of the number of primitive actions to appropriately discount
the value of the resulting state s0 . At leaf nodes, MAXQ-0 updates the estimated one-step
expected reward, V (i; s). The value t (i) is a \learning rate" parameter that should be
gradually decreased to zero in the limit.
250

MAXQ Hierarchical Reinforcement Learning

Table 2: The MAXQ-0 learning algorithm.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18

function MAXQ-0(MaxNode i, State s)
if i is a primitive MaxNode
execute i, receive r, and observe result state s0
Vt (i; s) := (1 , t (i))  Vt (i; s) + t (i)  rt
return 1
else
let count = 0
while Ti (s) is false do
choose an action a according to the current exploration policy x(i; s)
let N = MAXQ-0(a; 0s) (recursive call)
observe result state s
Ct (i; s; a) := (1 , t (i))  Ct (i; s; a) + t (i)   N Vt (i; s0 )
+1

+1

count := count + N
s := s0

end
return count

end MAXQ-0

// Main program
initialize V (i; s) and C (i; s; j ) arbitrarily
MAXQ-0(root node 0, starting state s0 )

There are three things that must be specied in order to make this algorithm description
complete.
First, to keep the pseudo-code readable, Table 2 does not show how \ancestor termination" is handled. Recall that after each action, the termination predicates of all of the
subroutines on the calling stack are checked. If the termination predicate of any one of
these is satised, then the calling stack is unwound up to the highest terminated subroutine. In such cases, no C values are updated in any of the subroutines that were interrupted
except as follows. If subroutine i had invoked subroutine j , and j 's termination condition
is satised, then subroutine i can update the value of C (i; s; j ).
Second, we must specify how to compute Vt (i; s0 ) in line 11, since it is not stored in
the Max node. It is computed by the following modied versions of the decomposition
equations:
(

maxa Qt (i; s; a) if i is composite
(13)
Vt (i; s)
if i is primitive
Qt(i; s; a) = Vt(a; s) + Ct (i; s; a):
(14)
These equations reect two important changes compared with Equations (10) and (11).
First, in Equation (13), Vt (i; s) is dened in terms of the Q value of the best action a, rather
than of the action chosen by a xed hierarchical policy. Second, there are no  superscripts,
because the current value function, Vt (i; s), is not based on a xed hierarchical policy .
To compute Vt (i; s) using these equations, we must perform a complete search of all
paths through the MAXQ graph starting at node i and ending at the leaf nodes. Table 3

Vt (i; s) =

251

Dietterich

Table 3: Pseudo-code for Greedy Execution of the MAXQ Graph.
function EvaluateMaxNode(i; s)
1
2
3
4
5
6
7

if i is a primitive Max node
return hVt (i; s); ii
else
for each j 2 Ai ,
let hVt (j; s); aj i = EvaluateMaxNode(j; s)
let j hg = argmaxj Vt(j; s) + Ct (i; s; j )
return hVt (j hg ; s); ajhg i
end // EvaluateMaxNode

gives pseudo-code for a recursive function, EvaluateMaxNode, that implements a depthrst search. In addition to returning Vt (i; s), EvaluateMaxNode also returns the action
at the leaf node that achieves this value. This information is not needed for MAXQ-0, but it
will be useful later when we consider non-hierarchical execution of the learned recursivelyoptimal policy.
This search can be computationally expensive, and a problem for future research is
to develop more ecient methods for computing the best path through the graph. One
approach is to perform a best-rst search and use bounds on the values within subtrees to
prune useless paths through the MAXQ graph. A better approach would be to make the
computation incremental, so that when the state of the environment changes, only those
nodes whose values have changed as a result of the state change are re-considered. It should
be possible to develop an ecient bottom-up method similar to the RETE algorithm (and
its successors) that is used in the SOAR architecture (Forgy, 1982; Tambe & Rosenbloom,
1994).
The third thing that must be specied to complete our denition of MAXQ-0 is the
exploration policy, x . We require that x be an ordered GLIE policy.

Denition 9 An ordered GLIE policy is a GLIE policy (Greedy in the Limit with Innite

Exploration) that converges in the limit to an ordered greedy policy, which is a greedy policy
that imposes an arbitrary xed order ! on the available actions and breaks ties in favor of
the action a that appears earliest in that order.

We need this property in order to ensure that MAXQ-0 converges to a uniquely-dened
recursively optimal policy. A fundamental problem with recursive optimality is that in
general, each Max node i will have a choice of many dierent locally optimal policies given
the policies adopted by its descendent nodes. These dierent locally optimal policies will
all achieve the same locally optimal value function, but they can give rise to dierent probability transition functions P (s0 ; N js; i). The result will be that the Semi-Markov Decision
Problems dened at the next level above node i in the MAXQ graph will dier depending
on which of these various locally optimal policies is chosen by node i. These dierences may
lead to better or worse policies at higher levels of the MAXQ graph, even though they make
no dierence inside subtask i. In practice, the designer of the MAXQ graph will need to
design the pseudo-reward function for subtask i to ensure that all locally optimal policies
252

MAXQ Hierarchical Reinforcement Learning

are equally valuable for the parent subroutine. But to carry out our formal analysis, we will
just rely on an arbitrary tie-breaking mechanism.2 If we establish a xed ordering over the
Max nodes in the MAXQ graph (e.g., a left-to-right depth-rst numbering), and break ties
in favor of the lowest-numbered action, then this denes a unique policy at each Max node.
And consequently, by induction, it denes a unique policy for the entire MAXQ graph. Let
us call this policy r . We will use the r subscript to denote recursively optimal quantities
under an ordered greedy policy. Hence, the corresponding value function is Vr , and Cr and
Qr denote the corresponding completion function and action-value function. We now prove
that the MAXQ-0 algorithm converges to r .

Theorem 3 Let M = hS; A; P; R; P0 i be either an episodic MDP for which all deterministic

policies are proper or a discounted innite horizon MDP with discount factor  . Let H be
a MAXQ graph dened over subtasks fM0 ; : : : ; Mk g such that the pseudo-reward function
R~ i (s0 ) is zero for all i and s0. Let t (i) > 0 be a sequence of constants for each Max node i
such that
T
T
X
X
lim

(
i
)
=
1
and
lim
2t (i) < 1
(15)
t
T !1
T !1
t=1

t=1

Let x (i; s) be an ordered GLIE policy at each node i and state s and assume that the
immediate rewards are bounded. Then with probability 1, algorithm MAXQ-0 converges to
r , the unique recursively optimal policy for M consistent with H and x.

Proof: The proof follows an argument similar to those introduced to prove the convergence

of Q learning and SARSA(0) (Bertsekas & Tsitsiklis, 1996; Jaakkola et al., 1994). We will
employ the following result from stochastic approximation theory, which we state without
proof:

Lemma 1 (Proposition 4.5 from Bertsekas and Tsitsiklis, 1996) Consider the iteration
rt+1 (i) := (1 , t (i))rt (i) + t (i)((Urt )(i) + wt (i) + ut(i)):
Let Ft = fr0 (i); : : : ; rt (i); w0 (i); : : : ; wt,1 (i); 0 (i); : : : ; t (i); 8ig be the entire history of the
iteration.
If

(a) The t (i)  0 satisfy conditions (15)
(b) For every i and t, the noise terms wt (i) satisfy E [wt (i)jFt ] = 0
(c) Given any norm jj  jj on Rn , there exist constants A and B such that E [wt2 (i)jFt ] 
A + B jjrtjj2 .
(d) There exists a vector r , a positive vector  , and a scalar  2 [0; 1), such that for all
t,

jjUrt , rjj   jjrt , rjj

2. Alternatively, we could break ties by using a stochastic policy that chose randomly among the tied
actions.

253

Dietterich

(e) There exists a nonnegative random sequence t that converges to zero with probability
1 and is such that for all t
jut (i)j  t(jjrt jj + 1)
then rt converges to r with probability 1. The notation jj  jj denotes a weighted maximum
norm
jA(i)j :
jjAjj = max
i  (i)

The structure of the proof of Theorem 3 will be inductive, starting at the leaves of the
MAXQ graph and working toward the root. We will employ a dierent time clock at each
node i to count the number of update steps performed by MAXQ-0 at that node. The
variable t will always refer to the time clock of the current node i.
To prove the base case for any primitive Max node, we note that line 3 of MAXQ-0 is
just the standard stochastic approximation algorithm for computing the expected reward
for performing action a in state s, and therefore it converges under the conditions given
above.
To prove the recursive case, consider any composite Max node i with child node j . Let
Pt (s0; N js; j ) be the transition probability distribution for performing child action j in state
s at time t (i.e., while following the exploration policy in all descendent nodes of node j ).
By the inductive assumption, MAXQ-0 applied to j will converge to the (unique) recursively optimal value function Vr (j; s) with probability 1. Furthermore, because MAXQ-0
is following an ordered GLIE policy for j and its descendents, they will all converge to executing a greedy policy with respect to their value functions, so Pt (s0 ; N js; j ) will converge
to Pr (s0 ; N js; j ), the unique transition probability function for executing child j under the
locally optimal policy r . What remains to be shown is that the update assignment for C
(line 11 of the MAXQ-0 algorithm) converges to the optimal Cr function with probability
1.
To prove this, we will apply Lemma 1. We will identify the x in the lemma with a
state-action pair (s; a). The vector rt will be the completion-cost table Ct (i; s; a) for all
s; a and xed i after t update steps. The vector r will be the optimal completion-cost
Cr (i; s; a) (again, for xed i). Dene the mapping U to be
(UC )(i; s; a) =

X

s0





0 0
 0 0
Pr (s0 ; N js; a) N max
0 [C (i; s ; a ) + Vr (a ; s )]
a

This is a C update under the MDP Mi assuming that all descendent value functions,
Vr (a; s), and transition probabilities, Pr(s0 ; N js; a), have converged.
To apply the lemma, we must rst express the C update formula in the form of the
update rule in the lemma. Let s be the state that results from performing a in state s. Line
11 can be written

Ct+1 (i; s; a) :=

(1 , t (i))  Ct (i; s; a) + t (i)   N





max[Ct (i; s; a0 ) + Vt (a0 ; s)]
a0

:= (1 , t (i))  Ct (i; s; a) + t (i)  [(UCt )(i; s; a) + wt (i; s; a) + ut (i; s; a)]
254

MAXQ Hierarchical Reinforcement Learning

where





wt (i; s; a) =  N max
[C (i; s; a0 ) + Vt (a0 ; s)] ,
a0 t
X

s0 ;N

ut (i; s; a) =

X

s0 ;N
X

s0 ;N









Pt (s0 ; N js; a) N max
[C (i; s0 ; a0 ) + Vt (a0 ; s0 )]
a0 t

0 0
0 0
Pt (s0 ; N js; a) N max
0 [Ct (i; s ; a ) + Vt (a ; s )]


a

,



Pr (s0; N js; a) N max
[C (i; s0 ; a0 ) + Vr (a0 ; s0 )]
a0 t

Here wt (i; s; a) is the dierence between doing an update at node i using the single sample
point s drawn according to Pt (s0 ; N js; a) and doing an update using the full distribution
Pt (s0; N js; a). The value of ut (i; s; a) captures the dierence between doing an update using
the current probability transitions Pt (s0 ; N js; a) and current value functions of the children
Vt (a0; s0 ) and doing an update using the optimal probability transitions Pr (s0 ; N js; a) and
the optimal values of the children Vr (a0 ; s0 ).
We now verify the conditions of Lemma 1.
Condition (a) is assumed in the conditions of the theorem with t (s; a) = t (i).
Condition (b) is satised because s is sampled from Pt (s0 ; N js; a), so the expected value
of the dierence is zero.
Condition (c) follows directly from the fact that jCt (i; s; a)j and jVt (i; s)j are bounded.
We can show that these are bounded for both the episodic case and the discounted case as
follows. In the episodic case, we have assumed all policies are proper. Hence, all trajectories
terminate in nite time with a nite total reward. In the discounted case, the innite sum
of future rewards is bounded if the one-step rewards are bounded. The values of C and V
are computed as temporal averages of the cumulative rewards received over a nite number
of (bounded) updates, and hence, their means, variances, and maximum values are all
bounded.
Condition (d) is the condition that U is a weighted max norm pseudo-contraction. We
can derive this by starting with the weighted max norm for Q learning. It is well known
that Q is a weighted max norm pseudo-contraction (Bertsekas & Tsitsiklis, 1996) in both
the episodic case where all deterministic policies are proper (and the discount factor  = 1)
and in the innite horizon discounted case (with  < 1). That is, there exists a positive
vector  and a scalar  2 [0; 1), such that for all t,

jjTQt , Qjj   jjQt , Qjj ;

(16)

where T is the operator
(TQ)(s; a) =

X

s0 ;N

P (s0; N js; a) N [R(s0 js; a) + max
Q(s0 ; a0 )]:
a0

Now we will show how to derive the pseudo-contraction for the C update operator U . Our
plan is to show rst how to express the U operator for learning C in terms of the T operator
for updating Q values. Then we will replace TQ in the pseudo-contraction equation for Q
255

Dietterich

learning with UC , and show that U is a weighted max-norm pseudo-contraction under the
same weights  and the same  .
Recall from Eqn. (10) that Q(i; s; a) = C (i; s; a) + V (a; s). Furthermore, the U operator
performs its updates using the optimal value functions of the child nodes, so we can write
this as Qt (i; s; a) = Ct (i; s; a) + V  (a; s). Now once the children of node i have converged,
the Q-function version of the Bellman equation for MDP Mi can be written as

Q(i; s; a) =

X

s0 ;N

Pr(s0 ; N js; a) N [Vr (a; s) + max
Q(i; s0 ; a0 )]:
a0

As we have noted before, Vr (a; s) plays the role of the immediate reward function for Mi .
Therefore, for node i, the T operator can be rewritten as
(TQ)(i; s; a) =

X

s0 ;N

Pr (s0 js; a) N [Vr(a; s) + max
Q(i; s0 ; a0 )]:
a0

Now we replace Q(i; s; a) by C (i; s; a) + Vr (a; s), and obtain
(TQ)(i; s; a) =

X

s0 ;N

Pr (s0; N js; a) N (Vr (a; s) + max
[C (i; s0 ; a0 ) + Vr (a0 ; s0 )]):
a0

Note that Vr (a; s) does not depend on s0 or N , so we can move it outside the expectation
and obtain
(TQ)(i; s; a) = Vr (a; s) +

X

s0 ;N

Pr (s0 ; N js; a) N (max
[C (i; s0 ; a0 ) + Vr (a0 ; s0 )])
a0

= Vr (a; s) + (UC )(i; s; a)

Abusing notation slightly, we will express this in vector form as TQ(i) = Vr + UC (i).
Similarly, we can write Qt (i; s; a) = Ct (i; s; a)+ Vr (a; s) in vector form as Qt (i) = Ct (i)+ Vr .
Now we can substitute these two formulas into the max norm pseudo-contraction formula
for T , Eqn. (16) to obtain

jjVr + UCt (i) , (Cr(i) + Vr)jj   jjVr + Ct (i) , (Cr(i) + Vr)jj :
Thus, U is a weighted max-norm pseudo-contraction,

jjUCt (i) , Cr(i)jj   jjCt (i) , Cr(i)jj ;
and condition (d) is satised.
Finally, it is easy to verify (e), the most important condition. By assumption, the
ordered GLIE policies in the child nodes converge with probability 1 to locally optimal
policies for the children. Therefore Pt (s0 ; N js; a) converges to Pr (s0 ; N js; a) for all s0; N; s;
and a with probability 1 and Vt (a; s) converges with probability 1 to Vr (a; s) for all child
actions a. Therefore, jut j converges to zero with probability 1. We can trivially construct a
sequence t = jut j that bounds this convergence, so

jut (s; a)j  t  t (jjCt (s; a)jj + 1):
256

MAXQ Hierarchical Reinforcement Learning

We have veried all of the conditions of Lemma 1, so we can conclude that Ct (i) converges
to Cr(i) with probability 1. By induction, we can conclude that this holds for all nodes in
the MAXQ including the root node, so the value function represented by the MAXQ graph
converges to the unique value function of the recursively optimal policy r . Q.E.D.
The most important aspect of this theorem is that it proves that Q learning can take
place at all levels of the MAXQ hierarchy simultaneously|the higher levels do not need to
wait until the lower levels have converged before they begin learning. All that is necessary
is that the lower levels eventually converge to their (locally) optimal policies.

4.3 Techniques for Speeding Up MAXQ-0

Algorithm MAXQ-0 can be extended to accelerate learning in the higher nodes of the graph
by a technique that we call \all-states updating". When an action a is chosen for Max node
i in state s, the execution of a will move the environment through a sequence of states
s = s1; : : : ; sN ; sN +1 = s0. Because all of our subroutines are Markovian, the same resulting
state s0 would have been reached if we had started executing action a in state s2 , or s3 , or
any state up to and including sN . Hence, we can execute a version of line 11 in MAXQ-0
for each of these intermediate states as shown in this replacement pseudo-code:
11a
for j from 1 to N do
11b
Ct (i; sj ; a) := (1 , t (i))  Ct(i; sj ; a) + t (i)   N ,j maxa Qt (i; s0 ; a0 )
11c
end // for
In our implementation, as each composite action is executed by MAXQ-0, it constructs
a linked list of the sequence of primitive states that were visited. This list is returned when
the composite action terminates. The parent Max node can then process each state in this
list as shown above. The parent Max node concatenates the state lists that it receives from
its children and passes them to its parent when it terminates. All experiments in this paper
employ all-states updating.
Kaelbling (1993) introduced a related, but more powerful, method for accelerating hierarchical reinforcement learning that she calls \all-goals updating." To understand this
method, suppose that for each primitive action, there are several composite tasks that could
have invoked that primitive action. In all-goals updating, whenever a primitive action is
executed, the equivalent of line 11 of MAXQ-0 is applied in every composite task that could
have invoked that primitive action. Sutton, Precup, and Singh (1998) prove that each of
the composite tasks will converge to the optimal Q values under all-goals updating. Furthermore, they point out that the exploration policy employed for choosing the primitive
actions can be dierent from the policies of any of the subtasks being learned.
It is straightforward to implement a simple form of all-goals updating within the MAXQ
hierarchy for the case where composite tasks invoke primitive actions. Whenever one of the
primitive actions a is executed in state s, we can update the C (i; s; a) value for all parent
tasks i that can invoke a.
However, additional care is required to implement all-goals updating for non-primitive
actions. Suppose that by executing the exploration policy, the following sequence of world
states and actions has been obtained: s0 ; a0 ; s1 ; : : : ; ak,1 ; sk,1 ; ak ; sk+1 . Let j be a composite task that is terminated in state sk+1 , and let sk,n; ak,n ; : : : ; ak,1 ; ak be a sequence of
actions that could have been executed by subtask j and its children. In other words, suppose
(

+1

257

+1

)

0

Dietterich

it is possible to \parse" this state-action sequence in terms of a series of subroutine calls and
returns for one invocation of subtask j . Then for each possible parent task i that invokes j ,
we can update the value of C (i; sk,n ; j ). Of course, in order for these updates to be useful,
the exploration policy must be an ordered GLIE policy that will converge to the recursively
optimal policy for subtask j and its descendents. We cannot follow an arbitrary exploration
policy, because this would not produce accurate samples of result states drawn according to
P  (s0 ; N js; j ). Hence, unlike the simple case described by Sutton, Precup, and Singh, the
exploration policy cannot be dierent from the policies of the subtasks being learned.
Although this considerably reduces the usefulness of all-goals updating, it does not
completely eliminate it. A simple way of implementing non-primitive all-goals updating
would be to perform MAXQ-Q learning as usual, but whenever a subtask j was invoked in
state s and returned, we could update the value of C (i; s; j ) for all potential calling subtasks
i. We have not implemented this, however, because of the complexity involved in identifying
the possible actual parameters of the potential calling subroutines.

4.4 The MAXQ-Q Learning Algorithm
Now that we have shown the convergence of MAXQ-0, let us design a learning algorithm that
can work with arbitrary pseudo-reward functions, R~ i (s0 ). We could just add the pseudoreward into MAXQ-0, but this would have the eect of changing the MDP M to have
a dierent reward function. The pseudo-rewards \contaminate" the values of all of the
completion functions computed in the hierarchy. The resulting learned policy will not be
recursively optimal for the original MDP.
This problem can be solved by learning one completion function for use \inside" each
Max node and a separate completion function for use \outside" the Max node. The quantities used \inside" a node will be written with a tilde: R~ , C~ , and Q~ . The quantities used
\outside" a node will be written without the tilde.
The \outside" completion function, C (i; s; a) is the completion function that we have
been discussing so far in this paper. It computes the expected reward for completing task
Mi after performing action a in state s and then following the learned policy for Mi . It is
computed without any reference to R~ i . This completion function will be used by parent
tasks to compute V (i; s), the expected reward for performing action i starting in state s.
The second completion function C~ (i; s; a) is a completion function that we will use only
\inside" node i in order to discover the locally optimal policy for task Mi . This function
will incorporate rewards both from the \real" reward function, R(s0 js; a), and from the
pseudo-reward function, R~ i (s0 ). It will also be used by EvaluateMaxNode in line 6 to
choose the best action j hg to execute. Note, however, that EvaluateMaxNode will still
return the \external" value Vt (j hg ; s) of this chosen action.
We will employ two dierent update rules to learn these two completion functions. The
C~ function will be learned using an update rule similar to the Q learning rule in line 11 of
MAXQ-0. But the C function will be learned using an update rule similar to SARSA(0)|
its purpose is to learn the value function for the policy that is discovered by optimizing C~ .
Pseudo-code for the resulting algorithm, MAXQ-Q is shown in Table 4.
The key step is at lines 15 and 16. In line 15, MAXQ-Q rst updates C~ using the value
of the greedy action, a , in the resulting state. This update includes the pseudo-reward R~ i .
258

MAXQ Hierarchical Reinforcement Learning

Table 4: The MAXQ-Q learning algorithm.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23

function MAXQ-Q(MaxNode i, State s)
let seq = () be the sequence of states visited while executing i
if i is a primitive MaxNode
execute i, receive r, and observe result state s0
Vt (i; s) := (1 , t (i))  Vt (i; s) + t (i)  rt
push s onto the beginning of seq
else
let count = 0
while Ti (s) is false do
choose an action a according to the current exploration policy x(i; s)
let childSeq = MAXQ-Q(a;s), where childSeq is the sequence of states visited
+1

while executing action a. (in reverse order)
observe result state s0
let a = argmaxa [C~t (i; s0 ; a0 ) + Vt (a0 ; s0 )]
let N = 1
for each s in childSeq do
C~t+1 (i; s; a) := (1 , t (i))  C~t (i; s; a) + t (i)   N [R~ i (s0 ) + C~t (i; s0 ; a ) + Vt(a ; s)]
Ct+1 (i; s; a) := (1 , t (i))  Ct (i; s; a) + t (i)   N [Ct (i; s0 ; a ) + Vt(a ; s0 )]
N := N + 1
end // for
append
childSeq onto the front of seq
s := s0
end // while
end // else
return seq
end MAXQ-Q
0

Then in line 16, MAXQ-Q updates C using this same greedy action a , even if this would
not be the greedy action according to the \uncontaminated" value function. This update,
of course, does not include the pseudo-reward function.
It is important to note that whereever Vt (a; s) appears in this pseudo-code, it refers to
the \uncontaminated" value function of state s when executing the Max node a. This is
computed recursively in exactly the same way as in MAXQ-0.
Finally, note that the pseudo-code also incorporates all-states updating, so each call
to MAXQ-Q returns a list of all of the states that were visited during its execution, and
the updates of lines 15 and 16 are performed for each of those states. The list of states is
ordered most-recent-rst, so the states are updated starting with the last state visited and
working backward to the starting state, which helps speed up the algorithm.
When MAXQ-Q has converged, the resulting recursively optimal policy is computed at
each node by choosing the action a that maximizes Q~ (i; s; a) = C~ (i; s; a)+ V (a; s) (breaking
ties according to the xed ordering established by the ordered GLIE policy). It is for this
reason that we gave the name \Max nodes" to the nodes that represent subtasks (and
learned policies) within the MAXQ graph. Each Q node j with parent node i stores both
C~ (i; s; j ) and C (i; s; j ), and it computes both Q~ (i; s; j ) and Q(i; s; j ) by invoking its child
Max node j . Each Max node i takes the maximum of these Q values and computes either
V (i; s) or computes the best action, a using Q~ .
259

Dietterich

Corollary 1 Under the same conditions as Theorem 3, MAXQ-Q converges to the unique

recursively optimal policy for MDP M dened by MAXQ graph H , pseudo-reward functions
R~ , and ordered GLIE exploration policy x.
Proof: The argument is identical to, but more tedious than, the proof of Theorem 3. The
proof of convergence of the C~ values is identical to the original proof for the C values, but
it relies on proving convergence of the \new" C values as well, which follows from the same
weighted max norm pseudo-contraction argument. Q.E.D.

5. State Abstraction

There are many reasons to introduce hierarchical reinforcement learning, but perhaps the
most important reason is to create opportunities for state abstraction. When we introduced
the simple taxi problem in Figure 1, we pointed out that within each subtask, we can ignore
certain aspects of the state space. For example, while performing a MaxNavigate(t), the
taxi should make the same navigation decisions regardless of whether the passenger is in
the taxi. The purpose of this section is to formalize the conditions under which it is safe
to introduce such state abstractions and to show how the convergence proofs for MAXQ-Q
can be extended to prove convergence in the presence of state abstraction. Specically, we
will identify ve conditions that permit the \safe" introduction of state abstractions.
Throughout this section, we will use the taxi problem as a running example, and we will
see how each of the ve conditions will permit us to reduce the number of distinct values
that must be stored in order to represent the MAXQ value function decomposition. To
establish a starting point, let us compute the number of values that must be stored for the
taxi problem without any state abstraction.
The MAXQ representation must have tables for each of the C functions at the internal
nodes and the V functions at the leaves. First, at the six leaf nodes, to store V (i; s), we
must store 500 values at each node, because there are 500 states; 25 locations, 4 possible
destinations for the passenger, and 5 possible current locations for the passenger (the four
special locations and inside the taxi itself). Second, at the root node, there are two children,
which requires 2  500 = 1000 values. Third, at the MaxGet and MaxPut nodes, we have 2
actions each, so each one requires 1000 values, for a total of 2000. Finally, at MaxNavigate(t),
we have four actions, but now we must also consider the target parameter t, which can take
four possible values. Hence, there are eectively 2000 combinations of states and t values for
each action, or 8000 total values that must be represented. In total, therefore, the MAXQ
representation requires 14,000 separate quantities to represent the value function.
To place this number in perspective, consider that a at Q learning representation must
store a separate value for each of the six primitive actions in each of the 500 possible states,
for a total of 3,000 values. Hence, we can see that without state abstraction, the MAXQ
representation requires more than four times the memory of a at Q table!

5.1 Five Conditions that Permit State Abstraction

We now introduce ve conditions that permit the introduction of state abstractions. For
each condition, we give a denition and then prove a lemma which states that if the condition is satised, then the value function for some corresponding class of policies can be
260

MAXQ Hierarchical Reinforcement Learning

represented abstractly (i.e., by abstract versions of the V and C functions). For each condition, we then provide some rules for identifying when that condition can be satised and
give examples from the taxi domain.
We begin by introducing some denitions and notation.

Denition 10 Let M be a MDP and H be a MAXQ graph dened over M . Suppose that

each state s can be written as a vector of values of a set of state variables. At each Max
node i, suppose the state variables are partitioned into two sets Xi and Yi , and let i be a
function that projects a state s onto only the values of the variables in Xi . Then H combined
with i is called a state-abstracted MAXQ graph.

In cases where the state variables can be partitioned, we will often write s = (x; y)
to mean that a state s is represented by a vector of values for the state variables in X
and a vector of values for the state variables in Y . Similarly, we will sometimes write
P (x0 ; y0; N jx; y; a), V (a; x; y), and R~ a (x0 ; y0 ) in place of P (s0; N js; a), V (a; s), and R~ a (s0 ),
respectively.

Denition 11 (Abstract Policy) An abstract hierarchical policy for MDP M with state-

abstracted MAXQ graph H and associated abstraction functions i , is a hierarchical policy
in which each policy i (corresponding to subtask Mi ) satises the condition that for any two
states s1 and s2 such that i (s1 ) = i (s2 ), i (s1 ) = i (s2 ). (When i is a stochastic policy,
such as an exploration policy, this is interpreted to mean that the probability distributions
for choosing actions are the same in both states.)

In order for MAXQ-Q to converge in the presence of state abstractions, we will require
that at all times t its (instantaneous) exploration policy is an abstract hierarchical policy.
One way to achieve this is to construct the exploration policy so that it only uses information from the relevant state variables in deciding what action to perform. Boltzmann exploration based on the (state-abstracted) Q values, -greedy exploration, and counter-based
exploration based on abstracted states are all abstract exploration policies. Counter-based
exploration based on the full state space is not an abstract exploration policy.
Now that we have introduced our notation, let us describe and analyze the ve abstraction conditions. We have identied three dierent kinds of conditions under which
abstractions can be introduced. The rst kind involves eliminating irrelevant variables
within a subtask of the MAXQ graph. Under this form of abstraction, nodes toward the
leaves of the MAXQ graph tend to have very few relevant variables, and nodes higher in
the graph have more relevant variables. Hence, this kind of abstraction is most useful at
the lower levels of the MAXQ graph.
The second kind of abstraction arises from \funnel" actions. These are macro actions
that move the environment from some large number of initial states to a small number of
resulting states. The completion cost of such subtasks can be represented using a number of
values proportional to the number of resulting states. Funnel actions tend to appear higher
in the MAXQ graph, so this form of abstraction is most useful near the root of the graph.
The third kind of abstraction arises from the structure of the MAXQ graph itself. It
exploits the fact that large parts of the state space for a subtask may not be reachable
because of the termination conditions of its ancestors in the MAXQ graph.
261

Dietterich

We begin by describing two abstraction conditions of the rst type. Then we will present
two conditions of the second type. And nally, we describe one condition of the third type.
5.1.1 Condition 1: Max Node Irrelevance

The rst condition arises when a set of state variables is irrelevant to a Max node.

Denition 12 (Max Node Irrelevance) Let Mi be a Max node in a MAXQ graph H

for MDP M . A set of state variables Y is irrelevant for node i if the state variables of M
can be partitioned into two sets X and Y such that for any stationary abstract hierarchical
policy  executed by the descendents of i, the following two properties hold:

 the state transition probability distribution P  (s0; N js; a) at node i can be factored into
the product of two distributions:

P  (x0 ; y0 ; N jx; y; a) = P  (y0jx; y; a)  P  (x0 ; N jx; a);

(17)

where y and y0 give values for the variables in Y , and x and x0 give values for the
variables in X .

 for any pair of states s1 = (x; y1 ) and s2 = (x; y2 ) such that (s1) = (s2) = x, and
any child action a, V  (a; s1 ) = V  (a; s2 ) and R~ i (s1 ) = R~ i (s2 ).

Note that the two conditions must hold for all stationary abstract policies  executed
by all of the descendents of the subtask i. We will discuss below how these rather strong
requirements can be satised in practice. First, however, we prove that these conditions are
sucient to permit the C and V tables to be represented using state abstractions.

Lemma 2 Let M be an MDP with full-state MAXQ graph H , and suppose that state vari-

ables Yi are irrelevant for Max node i. Let i (s) = x be the associated abstraction function
that projects s onto the remaining relevant variables Xi . Let  be any abstract hierarchical
policy. Then the action-value function Q at node i can be represented compactly, with only
one value of the completion function C  (i; s; j ) for each equivalence class of states s that
share the same values on the relevant variables.
Specically Q (i; s; j ) can be computed as follows:

Q (i; s; j ) = V  (j; i (s)) + C  (i; i (s); j )
where

C  (i; x; j ) =

X

x0 ;N

P  (x0 ; N jx; j )   N [V  ((x0 ); x0 ) + R~ i (x0 ) + C  (i; x0 ; (x0 ))];

where V  (j 0 ; x0 ) = V  (j 0 ; x0 ; y0 ), R~ i (x0 ) = R~ i (x0 ; y0 ), and (x) = (x; y0 ) for some arbitrary
value y0 for the irrelevant state variables Yi .
262

MAXQ Hierarchical Reinforcement Learning

Proof: Dene a new MDP i(Mi ) at node i as follows:
 States: X = fx j i(s) = x; for some s 2 S g.
 Actions: A.
 Transition probabilities: P  (x0 ; N jx; a)
 Reward function: V  (a; x) + R~ i(x0)

Because  is an abstract policy, its decisions are the same for all states s such that i (s) = x
for some x. Therefore, it is also a well-dened policy over i (Mi ). The action-value function
for  over i (Mi ) is the unique solution to the following Bellman equation:
X
Q (i; x; j ) = V  (j; x) + P  (x0 ; N jx; j )   N [R~ i(x0 ) + Q (i; x0 ; (x0 ))]
(18)
x0 ;N

Compare this to the Bellman equation over Mi :
X
Q (i; s; j ) = V  (j; s) + P  (s0; N js; j )   N [R~i (s0) + Q (i; s0 ; (s0 ))]
s0 ;N

(19)

and note that V  (j; s) = V  (j; (s)) = V  (j; x) and R~ i (s0 ) = R~ i ((s0 )) = R~ i (x0 ). Furthermore, we know that the distribution P  can be factored into separate distributions for Yi
and Xi . Hence, we can rewrite (19) as
X
X
Q (i; s; j ) = V  (j; x) + P (y0 jx; y; j ) P  (x0 ; N jx; j )   N [R~ i (x0 ) + Q (i; s0 ; (s0 ))]
y0

x0 ;N

The right-most sum does not depend on y or y0 , so the sum over y0 evaluates to 1, and can
be eliminated to give
X
Q (i; s; j ) = V  (j; x) + P  (x0 ; N jx; j )   N [R~ i(x0 ) + Q (i; s0 ; (s0 ))]:
(20)
x0 ;N

Finally, note that equations (18) and (20) are identical except for the expressions for
the Q values. Since the solution to the Bellman equation is unique, we must conclude that
Q (i; s; j ) = Q (i; (s); j ):
We can rewrite the right-hand side to obtain
Q (i; s; j ) = V  (j; (s)) + C  (i; (s); j );
where
X
C  (i; x; j ) = P (x0; N jx; j )   N [V  ((x0 ); x0 ) + R~ i (x0 ) + C  (i; x0 ; (x0 ))]:

Q.E.D.

x0 ;N

Of course we are primarily interested in being able to discover and represent the optimal
policy at each node i. The following corollary shows that the optimal policy is an abstract
policy, and hence, that it can be represented abstractly.
263

Dietterich

Corollary 2 Consider the same conditions as Lemma 2, but with the change that the ab-

stract hierarchical policy  is executed only by the descendents of node i, but not by node
i. Let ! be an ordering over actions. Then the optimal ordered policy ! at node i is an
abstract policy, and its action-value function can be represented abstractly.

Proof: Dene the policy ! to be the optimal ordered policy over the abstract MDP

(M ), and let Q (i; x; j ) be the corresponding optimal action-value function. Then by the
same argument given above, Q is also a solution to the optimal Bellman equation for the
original MDP. This means that the policy ! dened by ! (s) =  ((s)) is an optimal

ordered policy, and by construction, it is an abstract policy. Q.E.D.
As stated, the Max node irrelevance condition appears quite dicult to satisfy, since it
requires that the state transition probability distribution factor into X and Y components
for all possible abstract hierarchical policies. However, in practice, this condition is often
satised.
For example, let us consider the Navigate(t) subtask. The source and destination of
the passenger are irrelevant to the achievement of this subtask. Any policy that successfully completes this subtask will have the same value function regardless of the source and
destination locations of the passenger. By abstracting away the passenger source and destination, we obtain a huge savings in space. Instead of requiring 8000 values to represent
the C functions for this task, we require only 400 values (4 actions, 25 locations, 4 possible
values for t).
The advantages of this form of abstraction are similar to those obtained by Boutilier,
Dearden and Goldszmidt (1995) in which belief network models of actions are exploited
to simplify value iteration in stochastic planning. Indeed, one way of understanding the
conditions of Denition 12 is to express them in the form of a decision diagram, as shown
in Figure 7. The diagram shows that the irrelevant variables Y do not aect the rewards
either directly or indirectly, and therefore, they do not aect either the value function or
the optimal policy.
One rule for noticing cases where this abstraction condition holds is to examine the
subgraph rooted at the given Max node i. If a set of state variables is irrelevant to the leaf
state transition probabilities and reward functions and also to all pseudo-reward functions
and termination conditions in the subgraph, then those variables satisfy the Max Node
Irrelevance condition:

Lemma 3 Let M be an MDP with associated MAXQ graph H , and let i be a Max node in

H . Let Xi and Yi be a partition of the state variables for M . A set of state variables Yi is
irrelevant to node i if
 For each primitive leaf node a that is a descendent of i,
P (x0 ; y0 jx; y; a) = P (y0 jx; y; a)P (x0 jx; a) and
R(x0; y0 jx; y; a) = R(x0 jx; a),

 For each internal node j that is equal to node i or is a descendent of i , R~ j (x0 ; y0) =
R~j (x0) and the termination predicate Tj (x0 ; y0 ) is true i Tj (x0).
264

MAXQ Hierarchical Reinforcement Learning

j

V

X

X’

Y

Y’

Figure 7: A dynamic decision diagram that represents the conditions of Denition 12. The
probabilistic nodes X and Y represent the state variables at time t, and the nodes
X 0 and Y 0 represent the state variables at a later time t + N . The square action
node j is the chosen child subroutine, and the utility node V represents the value
function V (j; x) of that child action. Note that while X may inuence Y 0 , Y
cannot aect X 0 , and therefore, it cannot aect V .

Proof: We must show that any abstract hierarchical policy will give rise to an SMDP at

node i whose transition probability distribution factors and whose reward function depends
only on Xi . By denition, any abstract hierarchical policy will choose actions based only
upon information in Xi . Because the primitive probability transition functions factor into
an independent component for Xi and since the termination conditions at all nodes below i
are based only on the variables in Xi , the probability transition function Pi (x0 ; y0 ; N jx; y; a)
must also factor into Pi (y0 jx; y; a) and Pi (x0 ; N jx; a). Similarly, all of the reward functions
V (j; x; y) must be equal to V (j; x), because all rewards received within the subtree (either
at the leaves or through pseudo-rewards) depend only on the variables in Xi . Therefore,
the variables in Yi are irrelevant for Max node i. Q.E.D.
In the Taxi task, the primitive navigation actions, North, South, East, and West only
depend on the location of the taxi and not on the location of the passenger. The pseudoreward function and termination condition for the MaxNavigate(t) node only depend on the
location of the taxi (and the parameter t). Hence, this lemma applies, and the passenger
source and destination are irrelevant for the MaxNavigate node.
5.1.2 Condition 2: Leaf Irrelevance

The second abstraction condition describes situations under which we can apply state abstractions to leaf nodes of the MAXQ graph. For leaf nodes, we can obtain a stronger result
than Lemma 2 by using a slightly weaker denition of irrelevance.
265

Dietterich

Denition 13 (Leaf Irrelevance) A set of state variables Y is irrelevant for a primitive
action a of a MAXQ graph if for all states s the expected value of the reward function,
X
V (a; s) = P (s0 js; a)R(s0 js; a)
s0

does not depend on any of the values of the state variables in Y . In other words, for any
pair of states s1 and s2 that dier only in their values for the variables in Y ,
X

s01

P (s01 js1 ; a)R(s01 js1 ; a) =

X

s02

P (s02 js2 ; a)R(s02 js2 ; a):

If this condition is satised at leaf a, then the following lemma shows that we can
represent its value function V (a; s) compactly.

Lemma 4 Let M be an MDP with full-state MAXQ graph H , and suppose that state vari-

ables Y are irrelevant for leaf node a. Let (s) = x be the associated abstraction function
that projects s onto the remaining relevant variables X . Then we can represent V (a; s) for
any state s by an abstracted value function V (a; (s)) = V (a; x).

Proof: According to the denition of Leaf Irrelevance, any two states that dier only on

the irrelevant state variables have the same value for V (a; s). Hence, we can represent this
unique value by V (a; x). Q.E.D.
Here are two rules for nding cases where Leaf Irrelevance applies. The rst rule shows
that if the probability distribution factors, then we have Leaf Irrelevance.

Lemma 5 Suppose the probability transition function for primitive action a, P (s0js; a), factors as P (x0 ; y0 jx; y; a) = P (y0 jx; y; a)P (x0 jx; a) and the reward function satises R(s0 js; a) =
R(x0jx; a). Then the variables in Y are irrelevant to the leaf node a.
Proof: Plug in to the denition of V (a; s) and simplify.
X
V (a; s) =
P (s0 js; a)R(s0 js; a)
=
=
=

s0

X

x0 ;y0
X

y0

X

x0

P (y0 jx; y; a)P (x0 jx; a)R(x0 jx; a)

P (y0 jx; y; a)

X

x0

P (x0 jx; a)R(x0 jx; a)

P (x0 jx; a)R(x0 jx; a)

Hence, the expected reward for the action a depends only on the variables in X and not on
the variables in Y . Q.E.D.
The second rule shows that if the reward function for a primitive action is constant,
then we can apply state abstractions even if P (s0 js; a) does not factor.

Lemma 6 Suppose R(s0js; a) (the reward function for action a in MDP M ) is always equal

to a constant ra . Then the entire state s is irrelevant to the primitive action a.
266

MAXQ Hierarchical Reinforcement Learning

Proof:
V (a; s) =

X

s0

P (s0 js; a)R(s0 js; a)

X

=
P (s0 js; a)ra
0
s
= ra :
This does not depend on s, so the entire state is irrelevant to the primitive action a. Q.E.D.
This lemma is satised by the four leaf nodes North, South, East, and West in the taxi
task, because their one-step reward is a constant (,1). Hence, instead of requiring 2000
values to store the V functions, we only need 4 values|one for each action. Similarly, the
expected rewards of the Pickup and Putdown actions each require only 2 values, depending
on whether the corresponding actions are legal or illegal. Hence, together, they require 4
values, instead of 1000 values.
5.1.3 Condition 3: Result Distribution Irrelevance

Now we consider a condition that results from \funnel" actions.

Denition 14 (Result Distribution Irrelevance). A set of state variables Yj is irrelevant for the result distribution of action j if, for all abstract policies  executed by node j
and its descendents in the MAXQ hierarchy, the following holds: for all pairs of states s1
and s2 that dier only in their values for the state variables in Yj ,

P  (s0 ; N js1 ; j ) = P  (s0 ; N js2 ; j )
for all s0 and N .

If this condition is satised for subtask j , then the C value of its parent task i can be
represented compactly:

Lemma 7 Let M be an MDP with full-state MAXQ graph H , and suppose that the set of

state variables Yj is irrelevant to the result distribution of action j , which is a child of Max
node i. Let ij be the associated abstraction function: ij (s) = x. Then we can dene an
abstract completion cost function C  (i; ij (s); j ) such that for all states s,

C  (i; s; j ) = C  (i; ij (s); j ):

Proof: The completion function for xed policy  is dened as follows:
X
C  (i; s; j ) = P (s0 ; N js; j )   N Q (i; s0 ):
s0 ;N

(21)

Consider any two states s1 and s2 , such that ij (s1 ) = ij (s2 ) = x. Under Result Distribution Irrelevance, their transition probability distributions are the same. Hence, the
right-hand sides of (21) have the same value, and we can conclude that

C  (i; s1 ; j ) = C  (i; s2 ; j ):
267

Dietterich

Therefore, we can dene an abstract completion function, C  (i; x; j ) to represent this quantity. Q.E.D.
In undiscounted cumulative reward problems, the denition of result distribution irrelevance can be weakened to eliminate N , the number of steps. All that is needed is
that for all pairs of states s1 and s2 that dier only in the irrelevant state variables,
P  (s0 js1 ; j ) = P  (s0 js2; j ) (for all s0 ). In the undiscounted case, Lemma 7 still holds under
this revised denition.
It might appear that the result distribution irrelevance condition would rarely be satised, but we often nd cases where the condition is true. Consider, for example, the Get
subroutine for the taxi task. No matter what location the taxi has in state s, the taxi
will be at the passenger's starting location when the Get nishes executing (i.e., because
the taxi will have just completed picking up the passenger). Hence, the starting location
is irrelevant to the resulting location of the taxi, and P (s0 js1 ; Get) = P (s0 js2 ; Get) for all
states s1 and s2 that dier only in the taxi's location.
Note, however, that if we were maximizing discounted reward, the taxi's location would
not be irrelevant, because the probability that Get will terminate in exactly N steps would
depend on the location of the taxi, which could dier in states s1 and s2 . Dierent values
of N will produce dierent amounts of discounting in (21), and hence, we cannot ignore the
taxi location when representing the completion function for Get.
But in the undiscounted case, by applying Lemma 7, we can represent C (Root; s; Get)
using 16 distinct values, because there are 16 equivalence classes of states (4 source locations
times 4 destination locations). This is much less than the 500 quantities in the unabstracted
representation.
Note that although state variables Y may be irrelevant to the result distribution of a
subtask j , they may be important within subtask j . In the Taxi task, the location of the
taxi is critical for representing the value of V (Get; s), but it is irrelevant to the result state
distribution for Get, and therefore it is irrelevant for representing C (Root; s; Get). Hence, the
MAXQ decomposition is essential for obtaining the benets of result distribution irrelevance.
\Funnel" actions arise in many hierarchical reinforcement learning problems. For example, abstract actions that move a robot to a doorway or that move a car onto the entrance
ramp of a freeway have this property. The Result Distribution Irrelevance condition is
applicable in all such situations as long as we are in the undiscounted setting.
5.1.4 Condition 4: Termination

The fourth condition is closely related to the \funnel" property. It applies when a subtask
is guaranteed to cause its parent task to terminate in a goal state. In a sense, the subtask
is funneling the environment into the set of states described by the goal predicate of the
parent task.

Lemma 8 (Termination). Let Mi be a task in a MAXQ graph such that for all states s
where the goal predicate Gi (s) is true, the pseudo-reward function R~ i (s) = 0. Suppose there
is a child task a and state s such that for all hierarchical policies ,

8 s0 Pi (s0; N js; a) > 0 ) Gi(s0 ):
268

MAXQ Hierarchical Reinforcement Learning

(i.e., every possible state s0 that results from applying a in s will make the goal predicate,
Gi , true.)
Then for any policy executed at node i, the completion cost C (i; s; a) is zero and does
not need to be explicitly represented.

Proof: When action a is executed in state s, it is guaranteed to result in a state s0 such

that Gi (s) is true. By denition, goal states also satisfy the termination predicate Ti (s), so
task i will terminate. Because Gi(s) is true, the terminal pseudo-reward will be zero, and
hence, the completion function will always be zero. Q.E.D.
For example, in the Taxi task, in all states where the taxi is holding the passenger, the
Put subroutine will succeed and result in a goal terminal state for Root. This is because the
termination predicate for Put (i.e., that the passenger is at his or her destination location)
implies the goal condition for Root (which is the same). This means that C (Root; s; Put) is
uniformly zero, for all states s where Put is not terminated.
It is easy to detect cases where the Termination condition is satised. We only need to
compare the termination predicate Ta of a subtask with the goal predicate Gi of the parent
task. If the rst implies the second, then the termination lemma is satised.
5.1.5 Condition 5: Shielding

The shielding condition arises from the structure of the MAXQ graph.
Lemma 9 (Shielding). Let Mi be a task in a MAXQ graph and s be a state such that in
all paths from the root of the graph down to node Mi there is a subtask j (possibly equal to i)
whose termination predicate Tj (s) is true, then the Q nodes of Mi do not need to represent
C values for state s.
Proof: In order for task i to be executed in state s, there must exist some path of ancestors
of task i leading up to the root of the graph such that all of those ancestor tasks are not
terminated. The condition of the lemma guarantees that this is false, and hence that task
i cannot be executed in state s. Therefore, no C values need to be represented. Q.E.D.
As with the Termination condition, the Shielding condition can be veried by analyzing
the structure of the MAXQ graph and identifying nodes whose ancestor tasks are terminated.
In the Taxi domain, a simple example of this arises in the Put task, which is terminated
in all states where the passenger is not in the taxi. This means that we do not need
to represent C (Root; s; Put) in these states. The result is that, when combined with the
Termination condition above, we do not need to explicitly represent the completion function
for Put at all!
5.1.6 Dicussion

By applying these ve abstraction conditions, we obtain the following \safe" state abstractions for the Taxi task:
 North, South, East, and West. These terminal nodes require one quantity each, for a
total of four values. (Leaf Irrelevance).
269

Dietterich

 Pickup and Putdown each require 2 values (legal and illegal states), for a total of four.
(Leaf Irrelevance.)

 QNorth(t), QSouth(t), QEast(t), and QWest(t) each require 100 values (four values for
t and 25 locations). (Max Node Irrelevance.)

 QNavigateForGet requires 4 values (for the four possible source locations). (The passenger destination is Max Node Irrelevant for MaxGet, and the taxi starting location
is Result Distribution Irrelevant for the Navigate action.)

 QPickup requires 100 possible values, 4 possible source locations and 25 possible taxi
locations. (Passenger destination is Max Node Irrelevant to MaxGet.)

 QGet requires 16 possible values (4 source locations, 4 destination locations). (Result
Distribution Irrelevance.)

 QNavigateForPut requires only 4 values (for the four possible destination locations).

(The passenger source and destination are Max Node Irrelevant to MaxPut; the taxi
location is Result Distribution Irrelevant for the Navigate action.)

 QPutdown requires 100 possible values (25 taxi locations, 4 possible destination locations). (Passenger source is Max Node Irrelevant for MaxPut.)

 QPut requires 0 values. (Termination and Shielding.)
This gives a total of 632 distinct values, which is much less than the 3000 values required
by at Q learning. Hence, we can see that by applying state abstractions, the MAXQ
representation can give a much more compact representation of the value function.
A key thing to note is that with these state abstractions, the value function is decomposed into a sum of terms such that no single term depends on the entire state of the MDP,
even though the value function as a whole does depend on the entire state of the MDP. For
example, consider again the state described in Figures 1 and 4. There, we showed that the
value of a state s1 with the passenger at R, the destination at B, and the taxi at (0,3) can
be decomposed as

V (Root; s1 ) = V (North; s1 ) + C (Navigate(R); s1 ; North) +
C (Get; s1 ; Navigate(R)) + C (Root; s1 ; Get)
With state abstractions, we can see that each term on the right-hand side only depends on
a subset of the features:

 V (North; s1) is a constant
 C (Navigate(R); s1 ; North) depends only on the taxi location and the passenger's source
location.

 C (Get; s1; Navigate(R)) depends only on the source location.
 C (Root; s1 ; Get) depends only on the passenger's source and destination.
270

MAXQ Hierarchical Reinforcement Learning

Without the MAXQ decomposition, no features are irrelevant, and the value function depends on the entire state.
What prior knowledge is required on the part of a programmer in order to identify
these state abstractions? It suces to know some qualitative constraints on the one-step
reward functions, the one-step transition probabilities, and termination predicates, goal
predicates, and pseudo-reward functions within the MAXQ graph. Specically, the Max
Node Irrelevance and Leaf Irrelevance conditions require simple analysis of the one-step
transition function and the reward and pseudo-reward functions. Opportunities to apply
the Result Distribution Irrelevance condition can be found by identifying \funnel" eects
that result from the denitions of the termination conditions for operators. Similarly, the
Shielding and Termination conditions only require analysis of the termination predicates of
the various subtasks. Hence, applying these ve conditions to introduce state abstractions is
a straightforward process, and once a model of the one-step transition and reward functions
has been learned, the abstraction conditions can be checked to see if they are satised.

5.2 Convergence of MAXQ-Q with State Abstraction

We have shown that state abstractions can be safely introduced into the MAXQ value
function decomposition under the ve conditions described above. However, these conditions only guarantee that the value function of any xed abstract hierarchical policy can be
represented|they do not show that recursively optimal policies can be represented, nor do
they show that the MAXQ-Q learning algorithm will nd a recursively optimal policy when
it is forced to use these state abstractions. The goal of this section is to prove these two
results: (a) that the ordered recursively-optimal policy is an abstract policy (and, hence,
can be represented using state abstractions) and (b) that MAXQ-Q will converge to this
policy when applied to a MAXQ graph with safe state abstractions.

Lemma 10 Let M be an MDP with full-state MAXQ graph H and abstract-state MAXQ
graph (H ) where the abstractions satisfy the ve conditions given above. Let ! be an
ordering over all actions in the MAXQ graph. Then the following statements are true:
 The unique ordered recursively-optimal policy r dened by M , H , and ! is an abstract policy (i.e., it depends only on the relevant state variables at each node; see
Denition 11),
 The C and V functions in (H ) can represent the projected value function of r.

Proof: The ve abstraction lemmas tell us that if the ordered recursively-optimal policy
is abstract, then the C and V functions of (H ) can represent its value function. Hence,
the heart of this lemma is the rst claim. The last two forms of abstraction (Shielding and
Termination) do not place any restrictions on abstract policies, so we ignore them in this
proof.
The proof is by induction on the levels of the MAXQ graph, starting at the leaves. As
a base case, let us consider a Max node i all of whose children are primitive actions. In this
case, there are no policies executed within the children of the Max node. Hence if variables
Yi are irrelevant for node i, then we can apply our abstraction lemmas to represent the
value function of any policy at node i|not just abstract policies. Consequently, the value
271

Dietterich

function of any optimal policy for node i can be represented, and it will have the property
that
Q(i; s1 ; a) = Q (i; s2 ; a)
(22)
for any states s1 and s2 such that i (s1 ) = i (s2 ).
Now let us impose the action ordering ! to compute the optimal ordered policy. Consider
two actions a1 and a2 such that !(a1 ; a2 ) (i.e., ! prefers a1 ), and suppose that there is a
\tie" in the Q function at state s1 such that the values

Q (i; s1 ; a1 ) = Q (i; s1 ; a2 )
and they are the only two actions that maximize Q in this state. Then the optimal ordered
policy must choose a1 . Now in all other states s2 such that i (s1 ) = i (s2 ), we have just
established in (22) that the Q values will be the same. Hence, the same tie will exist
between a1 and a2 , and hence, the optimal ordered policy must make the same choice in all
such states. Hence, the optimal ordered policy for node i is an abstract policy.
Now let us turn to the recursive case at Max node i. Make the inductive assumption that
the ordered recursively-optimal policy is abstract within all descendent nodes and consider
the locally optimal policy at node i. If Y is a set of state variables that are irrelevant to
node i, Corollary 2 tells us that Q (i; s1 ; j ) = Q (i; s2 ; j ) for all states s1 and s2 such that
i(s1) = i (s2 ). Similarly, if Y is a set of variables irrelevant to the result distribution of
a particular action j , then Lemma 7 tells us the same thing. Hence, by the same ordering
argument given above, the ordered optimal policy at node i must be abstract. By induction,
this proves the lemma. Q.E.D.
With this lemma, we have established that the combination of an MDP M , an abstract
MAXQ graph H , and an action ordering denes a unique recursively-optimal ordered abstract policy. We are now ready to prove that MAXQ-Q will converge to this policy.

Theorem 4 Let M = hS; A; P; R; P0 i be either an episodic MDP for which all deterministic

policies are proper or a discounted innite horizon MDP with discount factor  < 1. Let H
be an unabstracted MAXQ graph dened over subtasks fM0 ; : : : ; Mk g with pseudo-reward
functions R~ i (s0 ). Let (H ) be a state-abstracted MAXQ graph dened by applying state
abstractions i to each node i of H under the ve conditions given above. Let x (i; i (s))
be an abstract ordered GLIE exploration policy at each node i and state s whose decisions
depend only on the \relevant" state variables at each node i. Let r be the unique recursivelyoptimal hierarchical policy dened by x , M , and R~ . Then with probability 1, algorithm
MAXQ-Q applied to (H ) converges to r provided that the learning rates t (i) satisfy
Equation (15) and the one-step rewards are bounded.

Proof: Rather than repeating the entire proof for MAXQ-Q, we will only describe what

must change under state abstraction. The last two forms of state abstraction refer to states
whose values can be inferred from the structure of the MAXQ graph, and therefore do not
need to be represented at all. Since these values are not updated by MAXQ-Q, we can
ignore them. We will now consider the rst three forms of state abstraction in turn.
We begin by considering primitive leaf nodes. Let a be a leaf node and let Y be a set of
state variables that are Leaf Irrelevant for a. Let s1 = (x; y1 ) and s2 = (x; y2 ) be two states
272

MAXQ Hierarchical Reinforcement Learning

that dier only in their values for Y . Under Leaf Irrelevance, the probability transitions
P (s01 js1 ; a) and P (s02 js2 ; a) need not be the same, but the expected reward of performing a
in both states must be the same. When MAXQ-Q visits an abstract state x, it does not
\know" the value of y, the part of the state that has been abstracted away. Nonetheless,
it draws a sample according to P (s0 jx; y; a), receives a reward R(s0 jx; y; a), and updates
its estimate of V (a; x) (line 4 of MAXQ-Q). Let Pt (y) be the probability that MAXQ-Q is
visiting (x; y) given that the unabstracted part of the state is x. Then Line 4 of MAXQ-Q
is computing a stochastic approximation to
X

s0 ;N;y

We can write this as

X

y

Pt (y)Pt (s0 ; N jx; y; a)R(s0 jx; y; a):

Pt (y)

X

s0 ;N

Pt (s0 ; N jx; y; a)R(s0 jx; y; a):

According to Leaf Irrelevance, the inner sum has the same value for all states s such that
(s) = x. Call this value r0 (x). This gives
X

y

Pt (y)r0 (x);

which is equal to r0 (x) for any distribution Pt (y). Hence, MAXQ-Q converges under Leaf
Irrelevance abstractions.
Now let us turn to the two forms of abstraction that apply to internal nodes: Max Node
Irrelevance and Result Distribution Irrelevance. Consider the SMDP dened at each node i
of the abstracted MAXQ graph at time t during MAXQ-Q. This would be an ordinary SMDP
with transition probability function Pt (x0 ; N jx; a) and reward function Vt (a; x) + R~ i (x0 )
except that when MAXQ-Q draws samples of state transitions, they are drawn according to
the distribution Pt (s0 ; N js; a) over the original state space. To prove the theorem, we must
show that drawing (s0 ; N ) according to this second distribution is equivalent to drawing
(x0 ; N ) according to the rst distribution.
For Max Node Irrelevance, we know that for all abstract policies applied to node i and
its descendents, the transition probability distribution factors as

P (s0 ; N js; a) = P (y0 jx; y; a)P (x0 ; N jx; a):
Because the exploration policy is an abstract policy, Pt (s0 ; N js; a) factors in this way. This
means that the Yi components of the state cannot aect the Xi components, and hence,
sampling from Pt (s0 ; N js; a) and discarding the Yi values gives samples for Pt (x0 ; N jx; a).
Therefore, MAXQ-Q will converge under Max Node Irrelevance abstractions.
Finally, consider Result Distribution Irrelevance. Let j be a child of node i, and suppose
Yj is a set of state variables that are irrelevant to the result distribution of j . When
the SMDP at node i wishes to draw a sample from Pt (x0 ; N jx; j ), it does not \know"
the current value of y, the irrelevant part of the current state. However, this does not
matter, because Result Distribution Irrelevance means that for all possible values of y,
Pt (x0 ; y0; N jx; y; j ) is the same. Hence, MAXQ-Q will converge under Result Distribution
Irrelevance abstractions.
273

Dietterich

In each of these three cases, MAXQ-Q will converge to a locally-optimal ordered policy
at node i in the MAXQ graph. By Lemma 10, this produces a locally-optimal ordered
policy for the unabstracted SMDP at node i. Hence, by induction, MAXQ-Q will converge
to the unique ordered recursively optimal policy r dened by MAXQ-Q H , MDP M , and
ordered exploration policy x . Q.E.D.

5.3 The Hierarchical Credit Assignment Problem

There are still some situations where we would like to introduce state abstractions but
where the ve properties described above do not permit them. Consider the following
modication of the taxi problem. Suppose that the taxi has a fuel tank and that each time
the taxi moves one square, it costs one unit of fuel. If the taxi runs out of fuel before
delivering the passenger to his or her destination, it receives a reward of ,20, and the trial
ends. Fortunately, there is a lling station where the taxi can execute a Fillup action to ll
the fuel tank.
To solve this modied problem using the MAXQ hierarchy, we can introduce another
subtask, Refuel, which has the goal of moving the taxi to the lling station and lling the
tank. MaxRefuel is a child of MaxRoot, and it invokes Navigate(t) (with t bound to the
location of the lling station) to move the taxi to the lling station.
The introduction of fuel and the possibility that we might run out of fuel means that
we must include the current amount of fuel as a feature in representing every C value
(for internal nodes) and V value (for leaf nodes) throughout the MAXQ graph. This is
unfortunate, because our intuition tells us that the amount of fuel should have no inuence
on our decisions inside the Navigate(t) subtask. That is, either the taxi will have enough
fuel to reach the target t (in which case, the chosen navigation actions do not depend on the
fuel), or else the taxi will not have enough fuel, and hence, it will fail to reach t regardless
of what navigation actions are taken. In other words, the Navigate(t) subtask should not
need to worry about the amount of fuel, because even if there is not enough fuel, there is
no action that Navigate(t) can take to get more fuel. Instead, it is the top-level subtasks
that should be monitoring the amount of fuel and deciding whether to go refuel, to go pick
up the passenger, or to go deliver the passenger.
Given this intuition, it is natural to try abstracting away the \amount of remaining
fuel" within the Navigate(t) subtask. However, this doesn't work, because when the taxi
runs out of fuel and a ,20 reward is given, the QNorth, QSouth, QEast, and QWest nodes
cannot \explain" why this reward was received|that is, they have no consistent way of
setting their C tables to predict when this negative reward will occur, because their C
values ignore the amount of fuel in the tank. Stated more formally, the diculty is that
the Max Node Irrelevance condition is not satised because the one-step reward function
R(s0js; a) for these actions depends on the amount of fuel.
We call this the hierarchical credit assignment problem. The fundamental issue here is
that in the MAXQ decomposition all information about rewards is stored in the leaf nodes
of the hierarchy. We would like to separate out the basic rewards received for navigation
(i.e., ,1 for each action) from the reward received for exhausting fuel (,20). If we make the
reward at the leaves only depend on the location of the taxi, then the Max Node Irrelevance
condition will be satised.
274

MAXQ Hierarchical Reinforcement Learning

One way to do this is to have the programmer manually decompose the reward function
and
indicate which nodes in the hierarchy will \receive" each reward. Let R(s0 js; a) =
P
0
0
i R(i; s js; a) be a decomposition of the reward function, such that R(i; s js; a) species
that part of the reward that must be handled by Max node i. In the modied taxi problem,
for example, we can decompose the reward so that the leaf nodes receive all of the original
penalties, but the out-of-fuel rewards must be handled by MaxRoot. Lines 15 and 16 of the
MAXQ-Q algorithm are easily modied to include R(i; s0 js; a).
In most domains, we believe it will be easy for the designer of the hierarchy to decompose
the reward function. It has been straightforward in all of the problems we have studied.
However, an interesting problem for future research is to develop an algorithm that can
solve the hierarchical credit assignment problem autonomously.

6. Non-Hierarchical Execution of the MAXQ Hierarchy

Up to this point in the paper, we have focused exclusively on representing and learning
hierarchical policies. However, often the optimal policy for a MDP is not strictly hierarchical. Kaelbling (1993) rst introduced the idea of deriving a non-hierarchical policy from the
value function of a hierarchical policy. In this section, we exploit the MAXQ decomposition
to generalize her ideas and apply them recursively at all levels of the hierarchy. We will
describe two methods for non-hierarchical execution.
The rst method is based on the dynamic programming algorithm known as policy
iteration. The policy iteration algorithm starts with an initial policy 0 . It then repeats
the following two steps until the policy converges. In the policy evaluation step, it computes
the value function V k of the current policy k . Then, in the policy improvement step, it
computes a new policy, k+1 according to the rule

k+1(s) := argmax
a

X

s0

P (s0 js; a)[R(s0 js; a) + V k (s0 )]:

(23)

Howard (1960) proved that if k is not an optimal policy, then k+1 is guaranteed to be
an improvement. Note that in order to apply this method, we need to know the transition
probability distribution P (s0 js; a) and the reward function R(s0 js; a).
If we know P (s0 js; a) and R(s0 js; a), we can use the MAXQ representation of the value
function to perform one step of policy iteration. We start with a hierarchical policy  and
represent its value function using the MAXQ hierarchy (e.g.,  could have been learned via
MAXQ-Q). Then, we can perform one step of policy improvement by applying Equation (23)
using V  (0; s0 ) (computed by the MAXQ hierarchy) to compute V  (s0 ).

Corollary 3 Let g (s) = argmaxa Ps0 P (s0js; a)[R(s0 js; a) + V  (0; s)], where V  (0; s) is
the value function computed by the MAXQ hierarchy and a is a primitive action. Then, if
 was not an optimal policy, g is strictly better for at least one state in S .

Proof: This is a direct consequence of Howard's policy improvement theorem. Q.E.D.
Unfortunately, we can't iterate this policy improvement process, because the new policy,

g is very unlikely to be a hierarchical policy (i.e., it is unlikely to be representable in
275

Dietterich

Table 5: The procedure for executing the one-step greedy policy.
procedure ExecuteHGPolicy(s)
1
repeat
2
Let hV (0; s); ai := EvaluateMaxNode(0; s)
3
4

execute primitive action a
Let s be the resulting state
end // ExecuteHGPolicy

terms of local policies for each node of the MAXQ graph). Nonetheless, one step of policy
improvement can give very signicant improvements.
This approach to non-hierarchical execution ignores the internal structure of the MAXQ
graph. In eect, the MAXQ hierarchy is just viewed as a way to represent V  |any other
representation would give the same one-step improved policy g .
The second approach to non-hierarchical execution borrows an idea from Q learning.
One of the great beauties of the Q representation for value functions is that we can compute
one step of policy improvement without knowing P (s0 js; a), simply by taking the new policy
to be g (s) := argmaxa Q(s; a). This gives us the same one-step greedy policy as we
computed above using one-step lookahead. With the MAXQ decomposition, we can perform
these policy improvement steps at all levels of the hierarchy.
We have already dened the function that we need. In Table 3 we presented the function
EvaluateMaxNode, which, given the current state s, conducts a search along all paths
from a given Max node i to the leaves of the MAXQ graph and nds the path with the
best value (i.e., with the maximum sum of C values along the path, plus the V value at
the leaf). This is equivalent to computing the best action greedily at each level of the
MAXQ graph. In addition, EvaluateMaxNode returns the primitive action a at the end
of this best path. This action a would be the rst primitive action to be executed if the
learned hierarchical policy were executed starting in the current state s. Our second method
for non-hierarchical execution of the MAXQ graph is to call EvaluateMaxNode in each
state, and execute the primitive action a that is returned. The pseudo-code is shown in
Table 5.
We will call the policy computed by ExecuteHGPolicy the hierarchical greedy policy,
and denote it hg , where the superscript * indicates that we are computing the greedy
action at each time step. The following theorem shows that this can give a better policy
than the original, hierarchical policy.

Theorem 5 Let G be a MAXQ graph representing the value function of hierarchical policy

 (i.e., in terms of C  (i; s; j ), computed for all i; s, and j ). Let V hg (0; s) be the value
computed by ExecuteHGPolicy (line 2), and let hg be the resulting policy. Dene
V hg to be the value function of hg. Then for all states s, it is the case that
V  (s)  V hg (0; s)  V hg (s):
(24)

Proof: (sketch) The left inequality in Equation (24) is satised by construction by line 6
of EvaluateMaxNode. To see this, consider that the original hierarchical policy, , can
276

MAXQ Hierarchical Reinforcement Learning

be viewed as choosing a \path" through the MAXQ graph running from the root to one of
the leaf nodes, and V  (0; s) is the sum of the C  values along this chosen path (plus the
V  value at the leaf node). In contrast, EvaluateMaxNode performs a traversal of all
paths through the MAXQ graph and nds the best path, that is, the path with the largest
sum of C  (and leaf V  ) values. Hence, V hg (0; s) must be at least as large as V  (0; s).
To establish the right inequality, note that by construction V hg (0; s) is the value function
of a policy, call it hg , that chooses one action greedily at each level of the MAXQ graph
(recursively), and then follows  thereafter. This is a consequence of the fact that line
6 of EvaluateMaxNode has C  on its right-hand side, and C  represents the cost of
\completing" each subroutine by following , not by following some other, greedier, policy.
(In Table 3, C  is written as Ct .) However, when we execute ExecuteHGPolicy (and
hence, execute hg ), we have an opportunity to improve upon  and hg at each time step.
Hence, V hg (0; s) is an underestimate of the actual value of hg . Q.E.D.
Note that this theorem only works in one direction. It says that if we can nd a state
where V hg (0; s) > V  (s), then the greedy policy, hg , will be strictly better than .
However, it could be that  is not an optimal policy and yet the structure of the MAXQ
graph prevents us from considering an action (either primitive or composite) that would
improve . Hence, unlike the policy improvement theorem of Howard (where all primitive
actions are always eligible to be chosen), we do not have a guarantee that if  is suboptimal,
then the hierarchically greedy policy is a strict improvement.
In contrast, if we perform one-step policy improvement as discussed at the start of this
section, Corollary 3 guarantees that we will improve the policy. So we can see that in
general, neither of these two methods for non-hierarchical execution is always better than
the other. Nonetheless, the rst method only operates at the level of individual primitive
actions, so it is not able to produce very large improvements in the policy. In contrast, the
hierarchical greedy method can obtain very large improvements in the policy by changing
which actions (i.e., subroutines) are chosen near the root of the hierarchy. Hence, in general,
hierarchical greedy execution is probably the better method. (Of course, the value functions
of both methods could be computed, and the one with the better estimated value could be
executed.)
Sutton, et al. (1999) have simultaneously developed a closely-related method for nonhierarchical execution of macros. Their method is equivalent to ExecuteHGPolicy for
the special case where the MAXQ hierarchy has only one level of subtasks. The interesting
aspect of ExecuteHGPolicy is that it permits greedy improvements at all levels of the
tree to inuence which action is chosen.
Some care must be taken in applying Theorem 5 to a MAXQ hierarchy whose C values
have been learned via MAXQ-Q. Being an online algorithm, MAXQ-Q will not have correctly learned the values of all states at all nodes of the MAXQ graph. For example, in the
taxi problem, the value of C (Put; s; QPutdown) will not have been learned very well except
at the four special locations R, G, B, and Y. This is because the Put subtask cannot be
executed until the passenger is in the taxi, and this usually means that a Get has just been
completed, so the taxi is at the passenger's source location. During exploration, both children of Put will be tried in such states. The PutDown will usually fail (and receive a negative
reward), whereas the Navigate will eventually succeed (perhaps after lengthy exploration)
277

Dietterich

and take the taxi to the destination location. Now because of all-states updating, the values
for C (Put; s; Navigate(t)) will have been learned at all of the states along the path to the
passenger's destination, but the C values for the Putdown action will only be learned for
the passenger's source and destination locations. Hence, if we train the MAXQ representation using hierarchical execution (as in MAXQ-Q), and then switch to hierarchically-greedy
execution, the results will be quite bad. In particular, we need to introduce hierarchicallygreedy execution early enough so that the exploration policy is still actively exploring. (In
theory, a GLIE exploration policy never ceases to explore, but in practice, we want to nd
a good policy quickly, not just asymptotically).
Of course an alternative would be to use hierarchically-greedy execution from the very
beginning of learning. However, remember that the higher nodes in the MAXQ hierarchy
need to obtain samples of P (s0 ; N js; a) for each child action a. If the hierarchical greedy
execution interrupts child a before it has reached a terminal state (i.e., because at some state
along the way, another subtask appears better to EvaluateMaxNode), then these samples
cannot be obtained. Hence, it is important to begin with purely hierarchical execution
during training, and make a transition to greedy execution at some point.
The approach we have taken is to implement MAXQ-Q in such a way that we can
specify a number of primitive actions L that can be taken hierarchically before the hierarchical execution is \interrupted" and control returns to the top level (where a new action
can be chosen greedily). We start with L set very large, so that execution is completely
hierarchical|when a child action is invoked, we are committed to execute that action until
it terminates. However, gradually, we reduce L until it becomes 1, at which point we have
hierarchical greedy execution. We time this so that it reaches 1 at about the same time our
Boltzmann exploration cools to a temperature of 0.1 (which is where exploration eectively
has halted). As the experimental results will show, this generally gives excellent results
with very little added exploration cost.

7. Experimental Evaluation of the MAXQ Method
We have performed a series of experiments with the MAXQ method with three goals in
mind: (a) to understand the expressive power of the value function decomposition, (b) to
characterize the behavior of the MAXQ-Q learning algorithm, and (c) to assess the relative
importance of temporal abstraction, state abstraction, and non-hierarchical execution. In
this section, we describe these experiments and present the results.

7.1 The Fickle Taxi Task
Our rst experiments were performed on a modied version of the taxi task. This version
incorporates two changes to the task described in Section 3.1. First, each of the four
navigation actions is noisy, so that with probability 0.8 it moves in the intended direction,
but with probability 0.1 it instead moves to the right (of the intended direction) and with
probability 0.1 it moves to the left. The purpose of this change is to create a more realistic
and more dicult challenge for the learning algorithms. The second change is that after the
taxi has picked up the passenger and moved one square away from the passenger's source
location, the passenger changes his or her destination location with probability 0.3. The
278

MAXQ Hierarchical Reinforcement Learning

purpose of this change is to create a situation where the optimal policy is not a hierarchical
policy so that the eectiveness of non-hierarchical execution can be measured.
We compared four dierent congurations of the learning algorithm: (a) at Q learning,
(b) MAXQ-Q learning without any form of state abstraction, (c) MAXQ-Q learning with
state abstraction, and (d) MAXQ-Q learning with state abstraction and greedy execution.
These congurations are controlled by many parameters. These include the following: (a)
the initial values of the Q and C functions, (b) the learning rate (we employed a xed
learning rate), (c) the cooling schedule for Boltzmann exploration (the GLIE policy that we
employed), and (d) for non-hierarchical execution, the schedule for decreasing L, the number
of steps of consecutive hierarchical execution. We optimized these settings separately for
each conguration with the goal of matching or exceeding (with as few primitive training
actions as possible) the best policy that we could code by hand. For Boltzmann exploration,
we established an initial temperature and then a cooling rate. A separate temperature is
maintained for each Max node in the MAXQ graph, and its temperature is reduced by
multiplying by the cooling rate each time that subtask terminates in a goal state.
The process of optimizing the parameter settings for each algorithm is time-consuming,
both for at Q learning and for MAXQ-Q. The most critical parameter is the schedule
for cooling the temperature of Boltzmann exploration: if this is cooled too rapidly, then
the algorithms will converge to a suboptimal policy. In each case, we tested nine dierent
cooling rates. To choose the dierent cooling rates for the various subtasks, we started by
using xed policies (e.g., either random or hand-coded) for all subtasks except the subtasks
closest to the leaves. Then, once we had chosen schedules for those subtasks, we allowed
their parent tasks to learn their policies while we tuned their cooling rates, and so on. One
nice eect of our method of cooling the temperature only when a subtask terminates is that
it naturally causes the subtasks higher in the MAXQ graph to cool more slowly. This meant
that good results could often be obtained just by using the same cooling rate for all Max
nodes.
The choice of learning rate is easier, since it is determined primarily by the degree
of stochasticity in the environment. We only tested three or four dierent rates for each
conguration. The initial values for the Q and C functions were set based on our knowledge
of the problems|no experiments were required.
We took more care in tuning these parameters for these experiments than one would
normally take in a real application, because we wanted to ensure that each method was
compared under the best possible conditions. The general form of the results (particularly
the speed of learning) is the same for wide ranges of the cooling rate and learning rate
parameter settings.
The following parameters were selected based on the tuning experiments. For at Q
learning: initial Q values of 0.123 in all states, learning rate 0.25, and Boltzmann exploration
with an initial temperature of 50 and a cooling rate of 0.9879. (We use initial values that
end in .123 as a \signature" during debugging to detect when a weight has been modied.)
For MAXQ-Q learning without state abstraction, we used initial values of 0.123, a learning rate of 0.50, and Boltzmann exploration with an initial temperature of 50 and cooling
rates of 0.9996 at MaxRoot and MaxPut, 0.9939 at MaxGet, and 0.9879 at MaxNavigate.
279

Dietterich

200
MAXQ Abstract

Mean Cumulative Reward

0
MAXQ
Abstract+
Greedy

-200

MAXQ
No Abstract

-400

Flat Q

-600

-800

-1000
0

20000

40000

60000
80000
100000
Primitive Actions

120000

140000

Figure 8: Comparison of performance of hierarchical MAXQ-Q learning (without state abstractions, with state abstractions, and with state abstractions combined with
hierarchical greedy evaluation) to at Q learning.
For MAXQ-Q learning with state abstraction, we used initial values of 0.123, a learning
rate of 0.25, and Boltzmann exploration with an initial temperature of 50 and cooling rates
of 0.9074 at MaxRoot, 0.9526 at MaxPut, 0.9526 at MaxGet, and 0.9879 at MaxNavigate.
For MAXQ-Q learning with non-hierarchical execution, we used the same settings as
with state abstraction. In addition, we initialized L to 500 and decreased it by 10 with each
trial until it reached 1. So after 50 trials, execution was completely greedy.
Figure 8 shows the averaged results of 100 training runs. Each training run involves
performing repeated trials until convergence. Because the dierent trials execute dierent
numbers of primitive actions, we have just plotted the number of primitive actions on the
horizontal axis rather than the number of trials.
The rst thing to note is that all forms of MAXQ learning have better initial performance
than at Q learning. This is because of the constraints introduced by the MAXQ hierarchy.
For example, while the agent is executing a Navigate subtask, it will never attempt to pickup
or putdown the passenger, because those actions are not available to Navigate. Similarly, the
agent will never attempt to putdown the passenger until it has rst picked up the passenger
(and vice versa) because of the termination conditions of the Get and Put subtasks.
The second thing to notice is that without state abstractions, MAXQ-Q learning actually takes longer to converge, so that the Flat Q curve crosses the MAXQ/no abstraction
280

MAXQ Hierarchical Reinforcement Learning

curve. This shows that without state abstraction, the cost of learning the huge number
of parameters in the MAXQ representation is not really worth the benets. We suspect
this is a consequence of the model-free nature of the MAXQ-Q algorithm. The MAXQ decomposition represents some information redundantly. For example, the cost of performing
a Put subtask is computed both as C (Root; s; Get) and also as V (Put; s). A model-based
algorithm could compute both of these from a learned model, but MAXQ-Q must learn
each of them separately from experience.
The third thing to notice is that with state abstractions, MAXQ-Q converges very
quickly to a hierarchically optimal policy. This can be seen more clearly in Figure 9, which
focuses on the range of reward values in the neighborhood of the optimal policy. Here
we can see that MAXQ with abstractions attains the hierarchically optimal policy after
approximately 40,000 steps, whereas at Q learning requires roughly twice as long to reach
the same level. However, at Q learning, of course, can continue onward and reach optimal
performance, whereas with the MAXQ hierarchy, the best hierarchical policy is slow to
respond to the \ckle" behavior of the passenger when he/she changes the destination.
The last thing to notice is that with greedy execution, the MAXQ policy is also able
to attain optimal performance. But as the execution becomes \more greedy", there is a
temporary drop in performance, because MAXQ-Q must learn C values in new regions
of the state space that were not visited by the recursively optimal policy. Despite this
drop in performance, greedy MAXQ-Q recovers rapidly and reaches hierarchically optimal
performance faster than purely-hierarchical MAXQ-Q learning. Hence, there is no added
cost|in terms of exploration|for introducing greedy execution.
This experiment presents evidence in favor of three claims: rst, that hierarchical reinforcement learning can be much faster than at Q learning; second, that state abstraction
is required by MAXQ-Q learning for good performance; and third, that non-hierarchical
execution can produce signicant improvements in performance with little or no added
exploration cost.

7.2 Kaelbling's HDG Method
The second task that we will consider is a simple maze task introduced by Leslie Kaelbling
(1993) and shown in Figure 11. In each trial of this task, the agent starts in a randomlychosen state and must move to a randomly-chosen goal state using the usual North, South,
East, and West operators (we employed deterministic operators). There is a small cost for
each move, and the agent must minimize the undiscounted sum of these costs.
Because the goal state can be in any of 100 dierent locations, there are actually 100
dierent MDPs. Kaelbling's HDG method starts by choosing an arbitrary set of landmark
states and dening a Voronoi partition of the state space based on the Manhattan distances
to these landmarks (i.e., two states belong to the same Voronoi cell i they have the same
nearest landmark). The method then denes one subtask for each landmark l. The subtask
is to move from any state in the current Voronoi cell or in any neighboring Voronoi cell to
the landmark l. Optimal policies for these subtasks are then computed.
Once HDG has the policies for these subtasks, it can solve the abstract Markov Decision
Problem of moving from each landmark state to any other landmark state using the subtask
solutions as macro actions (subroutines). So it computes a value function for this MDP.
281

Dietterich

10

MAXQ Abstract+Greedy

Mean Cumulative Reward

5

Optimal Policy
Flat Q
Hier-Optimal Policy

0
MAXQ Abstract

MAXQ No Abstract

-5

-10

-15
0

50000

100000

150000
200000
Primitive Actions

250000

300000

Figure 9: Close-up view of the previous gure. This gure also shows two horizontal lines
indicating optimal performance and hierarchically optimal performance in this
domain. To make this gure more readable, we have applied a 100-step moving
average to the data points (which are themselves the average of 100 runs).
Finally, for each possible destination location g within a Voronoi cell for landmark l, the
HDG method computes the optimal policy of getting from l to g.
By combining these subtasks, the HDG method can construct a good approximation
to the optimal policy as follows. In addition to the value functions discussed above, the
agent maintains two other functions: NL(s), the name of the landmark nearest to state s,
and N (l), a list of the landmarks of the cells that are immediate neighbors of cell l. By
combining these, the agent can build a list for each state s of the current landmark and the
landmarks of the neighboring cells. For each such landmark, the agent computes the sum
of three terms:
(t1) the expected cost of reaching that landmark,
(t2) the expected cost of moving from that landmark to the landmark in the goal cell, and
(t3) the expected cost of moving from the goal-cell landmark to the goal state.
Note that while terms (t1) and (t3) can be exact estimates, term (t2) is computed using
the landmark subtasks as subroutines. This means that the corresponding path must pass
through the intermediate landmark states rather than going directly to the goal landmark.
282

MAXQ Hierarchical Reinforcement Learning

10
9
8
7
6
5
4
3
2
1
1

2

3

4

5

6

7

8

9

10

Figure 10: Kaelbling's 10-by-10 navigation task. Each circled state is a landmark state,
and the heavy lines show the boundaries of the Voronoi cells. In each episode, a
start state and a goal state are chosen at random. In this gure, the start state
is shown by the black square, and the goal state is shown by the black hexagon.

Hence, term (t2) is typically an overestimate of the required distance. (Also note that (t3)
is the same for all choices of the intermediate landmarks, so it does not need to be explicitly
included in the computation of the best action until the agent enters the cell containing the
goal.)
Given this information, the agent then chooses to move toward the best of the landmarks
(unless the agent is already in the goal Voronoi cell, in which case the agent moves toward
the goal state). For example, in Figure 10, term (t1) is the cost of reaching the landmark
in row 6, column 6, which is 4. Term (t2) is the cost of getting from row 6, column 6 to
the landmark at row 1 column 4 (by going from one landmark to another). In this case,
the best landmark-to-landmark path is to go directly from row 6 column 6 to row 1 column
4. Hence, term (t2) is 6. Term (t3) is the cost of getting from row 1 column 4 to the goal,
which is 1. The sum of these is 4 + 6 + 1 = 11. For comparison, the optimal path has
length 9.
In Kaelbling's experiments, she employed a variation of Q learning to learn terms (t1)
and (t3), and she computed (t2) at regular intervals via the Floyd-Warshall all-sources
shortest paths algorithm.
Figure 11 shows a MAXQ approach to solving this problem. The overall task Root,
takes one argument g, which species the goal cell. There are three subtasks:
283

Dietterich

MaxRoot(g)
gl/NL(g)

QGotoGoalLmk(gl)

QGotoGoal(g)

MaxGotoGoalLmk(gl)

QGotoLmk(l,gl)

MaxGotoLmk(l)

QNorthLmk(l)

QSouthLmk(l)

MaxGotoGoal(g)

QEastLmk(l)

North

QWestLmk(l)

South

QNorthG(g)

East

QSouthG(g)

QEastG(g)

QWestG(g)

West

Figure 11: A MAXQ graph for the HDG navigation task.

 GotoGoalLmk, go to the landmark nearest to the goal location. The termination
predicate for this subtask is true if the agent reaches the landmark nearest to the
goal. The goal predicate is the same as the termination predicate.

 GotoLmk(l), go to landmark l. The termination predicate for this is true if either (a)

the agent reaches landmark l or (b) the agent is outside of the region dened by the
Voronoi cell for l and the neighboring Voronoi cells, N (l). The goal predicate for this
subtask is true only for condition (a).

 GotoGoal(g), go to the goal location g. The termination predicate for this subtask is

true if either the agent is in the goal location or the agent is outside of the Voronoi
cell NL(g) that contains g. The goal predicate for this subtask is true if the agent is
in the goal location.
284

MAXQ Hierarchical Reinforcement Learning

The MAXQ decomposition is essentially the same as Kaelbling's method, but somewhat
redundant. Consider a state where the agent is not inside the same Voronoi cell as the goal
g. In such states, HDG decomposes the value function into three terms (t1), (t2), and (t3).
Similarly, MAXQ also decomposes it into these same three terms:
 V (GotoLmk(l); s; a) the cost of getting to landmark l. This is represented as the sum
of V (a; s) and C (GotoLmk(l); s; a).
 C (GotoGoalLmk(gl); s; MaxGotoLmk(l)) the cost of getting from landmark l to the
landmark gl nearest the goal.
 C (Root; s; GotoGoalLmk(gl)) the cost of getting to the goal location after reaching gl
(i.e., the cost of completing the Root task after reaching gl).
When the agent is inside the goal Voronoi cell, then again HDG and MAXQ store
essentially the same information. HDG stores Q(GotoGoal(g); s; a), while MAXQ breaks
this into two terms: C (GotoGoal(g); s; a) and V (a; s) and then sums these two quantities to
compute the Q value.
Note that this MAXQ decomposition stores some information twice|specically, the
cost of getting from the goal landmark gl to the goal is stored both as C (Root; s; GotoGoalLmk(gl))
and as C (GotoGoal(g); s; a) + V (a; s).
Let us compare the amount of memory required by at Q learning, HDG, and MAXQ.
There are 100 locations, 4 possible actions, and 100 possible goal states, so at Q learning
must store 40,000 values.
To compute quantity (t1), HDG must store 4 Q values (for the four actions) for each
state s with respect to its own landmark and the landmarks in N (NL(s)). This gives a
total of 2,028 values that must be stored.
To compute quantity (t2), HDG must store, for each landmark, information on the
shortest path to every other landmark. There are 12 landmarks. Consider the landmark at
row 6, column 1. It has 5 neighboring landmarks which constitute the ve macro actions
that the agent can perform to move to another landmark. The nearest landmark to the
goal cell could be any of the other 11 landmarks, so this gives a total of 55 Q values that
must be stored. Similar computations for all 12 landmarks give a total of 506 values that
must be stored.
Finally, to compute quantity (t3), HDG must store information, for each square inside
each Voronoi cell, about how to get to each of the other squares inside the same Voronoi
cell. This requires 3,536 values.
Hence, the grand total for HDG is 6,070, which is a huge savings over at Q learning.
Now let's consider the MAXQ hierarchy with and without state abstractions.
 V (a; s): This is the expected reward of each primitive action in each state. There are
100 states and 4 primitive actions, so this requires 400 values. However, because the
reward is constant (,1), we can apply Leaf Irrelevance to store only a single value.
 C (GotoLmk(l); s; a), where a is one of the four primitive actions. This requires the
same amount of space as (t1) in Kaelbling's representation|indeed, combined with
V (a; s), this represents exactly the same information as (t1). It requires 2,028 values.
No state abstractions can be applied.
285

Dietterich

 C (GotoGoalLmk(gl); s; GotoLmk(l)): This is the cost of completing the GotoGoalLmk

task after going to landmark l. If the primitive actions are deterministic, then
GotoLmk(l) will always terminate at location l, and hence, we only need to store
this for each pair of l and gl. This is exactly the same as Kaelbling's quantity (t2),
which requires 506 values. However, if the primitive actions are stochastic|as they
were in Kaelbling's original paper|then we must store this value for each possible
terminal state of each GotoLmk action. Each of these actions could terminate at its
target landmark l or in one of the states bordering the set of Voronoi cells that are
the neighbors of the cell for l. This requires 6,600 values. When Kaelbling stores
values only for (t2), she is eectively making the assumption that GotoLmk(l) will
never fail to reach landmark l. This is an approximation which we can introduce into
the MAXQ representation by our choice of state abstraction at this node.

 C (GotoGoal; s; a): This is the cost of completing the GotoGoal task after executing one
of the primitive actions a. This is the same as quantity (t3) in the HDG representation,
and it requires the same amount of space: 3,536 values.

 C (Root; s; GotoGoalLmk): This is the cost of reaching the goal once we have reached

the landmark nearest the goal. MAXQ must represent this for all combinations of
goal landmarks and goals. This requires 100 values. Note that these values are the
same as the values of C (GotoGoal(g); s; a) + V (a; s) for each of the primitive actions.
This means that the MAXQ representation stores this information twice, whereas the
HDG representation only stores it once (as term (t3)).

 C (Root; s; GotoGoal). This is the cost of completing the Root task after we have exe-

cuted the GotoGoal task. If the primitive action are deterministic, this is always zero,
because GotoGoal will have reached the goal. Hence, we can apply the Termination
condition and not store any values at all. However, if the primitive actions are stochastic, then we must store this value for each possible state that borders the Voronoi cell
that contains the goal. This requires 96 dierent values. Again, in Kaelbling's HDG
representation of the value function, she is ignoring the probability that GotoGoal will
terminate in a non-goal state. Because MAXQ is an exact representation of the value
function, it does not ignore this possibility. If we (incorrectly) apply the Termination
condition in this case, the MAXQ representation becomes a function approximation.

In the stochastic case, without state abstractions, the MAXQ representation requires
12,760 values. With safe state abstractions, it requires 12,361 values. With the approximations employed by Kaelbling (or equivalently, if the primitive actions are deterministic),
the MAXQ representation with state abstractions requires 6,171 values. These numbers are
summarized in Table 6. We can see that, with the unsafe state abstractions, the MAXQ
representation requires only slightly more space than the HDG representation (because of
the redundancy in storing C (Root; s; GotoGoalLmk).
This example shows that for the HDG task, we can start with the fully-general formulation provided by MAXQ and impose assumptions to obtain a method that is similar
to HDG. The MAXQ formulation guarantees that the value function of the hierarchical
policy will be represented exactly. The assumptions will introduce approximations into the
286

MAXQ Hierarchical Reinforcement Learning

Table 6: Comparison of the number of values that must be stored to represent the value
function using the HDG and MAXQ methods.
HDG MAXQ
HDG MAXQ MAXQ MAXQ
item item
values no abs safe abs unsafe abs
V (a; s)
0
400
1
1
(t1) C (GotoLmk(l); s; a)
2,028 2,028
2,028
2,028
(t2) C (GotoGoalLmk; s; GotoLmk(l))
506 6,600
6,600
506
(t3) C (GotoGoal(g); s; a)
3,536 3,536
3,536
3,536
C (Root; s; GotoGoalLmk)
0
100
100
100
C (Root; s; GotoGoal)
0
96
96
0
Total Number of Values Required
6,070 12,760 12,361
6,171
value function representation. This might be useful as a general design methodology for
building application-specic hierarchical representations. Our long-term goal is to develop
such methods so that each new application does not require inventing a new set of techniques. Instead, o-the-shelf tools (e.g., based on MAXQ) could be specialized by imposing
assumptions and state abstractions to produce more ecient special-purpose systems.
One of the most important contributions of the HDG method was that it introduced
a form of non-hierarchical execution. As soon as the agent crosses from one Voronoi cell
into another, the current subtask of reaching the landmark in that cell is \interrupted",
and the agent recomputes the \current target landmark". The eect of this is that (until
it reaches the goal Voronoi cell), the agent is always aiming for a landmark outside of its
current Voronoi cell. Hence, although the agent \aims for" a sequence of landmark states, it
typically does not visit many of these states on its way to the goal. The states just provide
a convenient set of intermediate targets. By taking these \shortcuts", HDG compensates
for the fact that, in general, it has overestimated the cost of getting to the goal, because its
computed value function is based on a policy where the agent goes from one landmark to
another.
The same eect is obtained by hierarchical greedy execution of the MAXQ graph (which
was directly inspired by the HDG method). Note that by storing the NL (nearest landmark)
function, Kaelbing's HDG method can detect very eciently when the current subtask
should be interrupted. This technique only works for navigation problems in a space with
a distance metric. In contrast, ExecuteHGPolicy performs a kind of \polling", because
it checks after each primitive action whether it should interrupt the current subroutine and
invoke a new one. An important goal for future research on MAXQ is to nd a general
purpose mechanism for avoiding unnecessary \polling"|that is, a mechanism that can
discover eciently-evaluable interrupt conditions.
Figure 12 shows the results of our experiments with HDG using the MAXQ-Q learning algorithm. We employed the following parameters: for Flat Q learning, initial values
of 0.123, a learning rate of 1.0, initial temperature of 50, and cooling rate of 0.9074; for
MAXQ-Q without state abstractions: initial values of ,25:123, learning rate of 1.0, initial
287

Dietterich

0
Flat Q

MAXQ +
Abstract

-20

Mean Cumulative Reward

-40

MAXQ No Abstract

-60
-80
-100
-120
-140
0

200000

400000

600000
800000
Primitive Actions

1e+06

1.2e+06

1.4e+06

Figure 12: Comparison of Flat Q learning with MAXQ-Q learning with and without state
abstraction. (Average of 100 runs.)
temperature of 50, and cooling rates of 0.9074 for MaxRoot, 0.9999 for MaxGotoGoalLmk,
0.9074 for MaxGotoGoal, and 0.9526 for MaxGotoLmk; for MAXQ-Q with state abstractions:
initial values of ,20:123, learning rate of 1.0, initial temperature of 50, and cooling rates of
0.9760 for MaxRoot, 0.9969 for MaxGotoGoal, 0.9984 for MaxGotoGoalLmk, and 0.9969 for
MaxGotoLmk. Hierarchical greedy execution was introduced by starting with 3000 primitive actions per trial, and reducing this every trial by 2 actions, so that after 1500 trials,
execution is completely greedy.
The gure conrms the observations made in our experiments with the Fickle Taxi task.
Without state abstractions, MAXQ-Q converges much more slowly than at Q learning.
With state abstractions, it converges roughly three times as fast. Figure 13 shows a close-up
view of Figure 12 that allows us to compare the dierences in the nal levels of performance
of the methods. Here, we can see that MAXQ-Q with no state abstractions was not able to
reach the quality of our hand-coded hierarchical policy|presumably even more exploration
would be required to achieve this, whereas with state abstractions, MAXQ-Q is able to do
slightly better than our hand-coded policy. With hierarchical greedy execution, MAXQ-Q
is able to reach the goal using one fewer action, on the average|so that it approaches the
performance of the best hierarchical greedy policy (as computed by value iteration). Notice
however, that the best performance that can be obtained by hierarchical greedy execution
of the best recursively-optimal policy cannot match optimal performance. Hence, Flat Q
288

MAXQ Hierarchical Reinforcement Learning

-6
Optimal Policy

Mean Cumulative Reward

Hierarchical Greedy Optimal Policy
MAXQ Abstract + Greedy
MAXQ + Abstract

-8

-10

Flat Q

Hierarchical Hand-coded Policy

MAXQ No Abstract

-12

-14

0

200000

400000

600000
800000
Primitive Actions

1e+06

1.2e+06

1.4e+06

Figure 13: Expanded view comparing Flat Q learning with MAXQ-Q learning with and
without state abstraction and with and without hierarchical greedy execution.
(Average of 100 runs.)
learning achieves a policy that reaches the goal state, on the average, with about one fewer
primitive action. Finally notice that as in the taxi domain, there was no added exploration
cost for shifting to greedy execution.
Kaelbling's HDG work has recently been extended and generalized by Moore, Baird
and Kaelbling (1999) to any sparse MDP where the overall task is to get from any given
start state to any desired goal state. The key to the success of their approach is that each
landmark subtask is guaranteed to terminate in a single resulting state. This makes it
possible to identify a sequence of good intermediate landmark states and then assemble a
policy that visits them in sequence. Moore, Baird and Kaelbling show how to construct a
hierarchy of landmarks (the \airport" hierarchy) that makes this planning process ecient.
Note that if each subtask did not terminate in a single state (as in general MDPs), then
the airport method would not work, because there would be a combinatorial explosion of
potential intermediate states that would need to be considered.

7.3 Parr and Russell: Hierarchies of Abstract Machines

In his (1998b) dissertation work, Ron Parr considered an approach to hierarchical reinforcement learning in which the programmer encodes prior knowledge in the form of a hierarchy
of nite-state controllers called a HAM (Hierarchy of Abstract Machines). The hierarchy
289

Dietterich

Intersection
Vertical Hallway
Horizontal Hallway
Goal

Figure 14: Parr's maze problem (on left). The start state is in the upper left corner, and
all states in the lower right-hand room are terminal states. The smaller diagram
on the right shows the hallway and intersection structure of the maze.
is executed using a procedure-call-and-return discipline, and it provides a partial policy for
the task. The policy is partial because each machine can include non-deterministic \choice"
machine states, in which the machine lists several options for action but does not specify
which one should be chosen. The programmer puts \choice" states at any point where
he/she does not know what action should be performed. Given this partial policy, Parr's
goal is to nd the best policy for making choices in the choice states. In other words, his
goal is to learn a hierarchical value function V (hs; mi), where s is a state (of the external
environment) and m contains all of the internal state of the hierarchy (i.e., the contents
of the procedure call stack and the values of the current machine states for all machines
appearing in the stack). A key observation is that it is only necessary to learn this value
function at choice states hs; mi. Parr's algorithm does not learn a decomposition of the value
function. Instead, it \attens" the hierarchy to create a new Markov decision problem over
the choice states hs; mi. Hence, it is hierarchical primarily in the sense that the programmer
structures the prior knowledge hierarchically. An advantage of this is that Parr's method
can nd the optimal hierarchical policy subject to constraints provided by the programmer.
A disadvantage is that the method cannot be executed \non-hierarchically" to produce a
better policy.
Parr illustrated his work using the maze shown in Figure 14. This maze has a large-scale
structure (as a series of hallways and intersections), and a small-scale structure (a series of
obstacles that must be avoided in order to move through the hallways and intersections).
290

MAXQ Hierarchical Reinforcement Learning

In each trial, the agent starts in the top left corner, and it must move to any state in the
bottom right corner room. The agent has the usual four primitive actions, North, South,
East, and West. The actions are stochastic: with probability 0.8, they succeed, but with
probability 0.1 the action will move to the \left" and with probability 0.1 the action will
move to the \right" instead (e.g., a North action will move east with probability 0.1 and
west with probability 0.1). If an action would collide with a wall or an obstacle, it has no
eect.
The maze is structured as a series of \rooms", each containing a 12-by-12 block of states
(and various obstacles). Some rooms are parts of \hallways", because they are connected
to two other rooms on opposite sides. Other rooms are \intersections", where two or more
hallways meet.
To test the representational power of the MAXQ hierarchy, we want to see how well it
can represent the prior knowledge that Parr is able to represent using the HAM. We begin
by describing Parr's HAM for his maze task, and then we will present a MAXQ hierarchy
that captures much of the same prior knowledge.3
Parr's top level machine, MRoot, consists of a loop with a single choice state that
chooses among four possible child machines: MGo(East), MGo(South), MGo(West), and
MGo(North). The loop terminates when the agent reaches a goal state. MRoot will only
invoke a particular machine if there is a hallway in the specied direction. Hence, in the
start state, it will only consider MGo(South) and MGo(East).
The MGo(d) machine begins executing when the agent is in an intersection. So the rst
thing it tries to do is to exit the intersection into a hallway in the specied direction d. Then
it attempts to traverse the hallway until it reaches another intersection. It does this by rst
invoking an MExitIntersection(d) machine. When that machine returns, it then invokes an
MExitHallway(d) machine. When that machine returns, MGo also returns.
The MExitIntersection and MExitHallway machines are identical except for their termination conditions. Both machines consist of a loop with one choice state that chooses among
four possible subroutines. To simplify their description, suppose that MGo(East) has chosen MExitIntersection(East). Then the four possible subroutines are MSni (East; North),
MSni (East; South), MBack(East; North), and MBack(East; South).
The MSni (d; p) machine always moves in direction d until it encounters a wall (either
part of an obstacle or part of the walls of the maze). Then it moves in perpendicular
direction p until it reaches the end of the wall. A wall can \end" in two ways: either the
agent is now trapped in a corner with walls in both directions d and p or else there is no
longer a wall in direction d. In the rst case, the MSni machine terminates; in the second
case, it resumes moving in direction d.
The MBack(d; p) machine moves one step backwards (in the direction opposite from d)
and then moves ve steps in direction p. These moves may or may not succeed, because the
actions are stochastic and there may be walls blocking the way. But the actions are carried
out in any case, and then the MBack machine returns.
The MSni and MBack machines also terminate if they reach the end of a hall or the
end of an intersection.
3. The author thanks Ron Parr for providing the details of the HAM for this task.

291

Dietterich

These nite-state controllers dene a highly constrained partial policy. The MBack,
MSni, and MGo machines contain no choice states at all. The only choice points are
in MRoot, which must choose the direction in which to move, and in MExitIntersection
and MExitHall, which must decide when to call MSni, when to call MBack, and which
\perpendicular" direction to tell these machines to try when they cannot move forward.

MaxRoot

Go(d)
r/ROOM
MaxGo(d,r)

QExitInter(d,r)

QExitHall(d,r)

MaxExitInter(d,r)

MaxExitHall(d,r)

QSniffEI(d,p)

QBackEI(d,p)

QSniffEH(d,p)
x/X

QBackEH(d,p)
x/X
y/Y

y/Y
MaxSniff(d,p)

MaxBack(d,p,x,y)

QFollowWall(d,p)

QToWall(d)

QBackOne(d)

QPerpThree(p)

MaxFollowWall(d,p)

MaxToWall(d)

MaxBackOne(d)

MaxPerpThree(p)

d/p

d/d

QMoveFW(d)

d/Inv(d)

QMoveTW(d)

QMoveBO(d)

d/p
QMoveP3(d)

MaxMove(d)

Figure 15: MAXQ graph for Parr's maze task.
Figure 15 shows a MAXQ graph that encodes a similar set of constraints on the policy.
The subtasks are dened as follows:
292

MAXQ Hierarchical Reinforcement Learning

 Root. This is exactly the same as the MRoot machine. It must choose a direction d

and invoke Go. It terminates when the agent enters a terminal state. This is also its
goal condition (of course).

 Go(d; r). (Go in direction d leaving room r.) The parameter r is bound to an identi-

cation number corresponding to the current 12-by-12 \room" in which the agent is
located. Go terminates when the agent enters the room at the end of the hallway in
direction d or when it leaves the desired hallway (e.g., in the wrong direction). The
goal condition for Go is satised only if the agent reaches the desired intersection.

 ExitInter(d; r). This terminates when the agent has exited room r. The goal condition
is that the agent exit room r in direction d.

 ExitHall(d; r). This terminates when the agent has exited the current hall (into some

intersection). The goal condition is that the agent has entered the desired intersection
in direction d.

 Sni (d; r). This encodes a subtask that is equivalent to the MSni machine. However,

Sni must have two child subtasks, ToWall and FollowWall, that were simply internal
states of MSni. This is necessary, because a subtask in the MAXQ framework cannot

contain any internal state, whereas a nite-state controller in the HAM representation
can contain as many internal states as necessary. In particular, it can have one state
for when it is moving forward and another state for when it is following a wall sideways.

 ToWall(d). This is equivalent to one part of MSni. It terminates when there is a

wall in \front" of the agent in direction d. The goal condition is the same as the
termination condition.

 FollowWall(d; p). This is equivalent to the other part of MSni. It moves in direction

p until the wall in direction d ends (or until it is stuck in a corner with walls in both
directions d and p). The goal condition is the same as the termination condition.

 Back(d; p; x; y). This attempts to encode the same information as the MBack machine,

but this is a case where the MAXQ hierarchy cannot capture the same information.

MBack simply executes a sequence of 6 primitive actions (one step back, ve steps in
direction p). But to do this, MBack must have 6 internal states, which MAXQ does
not allow. Instead, the Back subtask has the subgoal of moving the agent at least

one square backwards and at least 3 squares in the direction p. In order to determine
whether it has achieved this subgoal, it must remember the x and y position where
it started to execute, so these are bound as parameters to Back. Back terminates if
it achieves the desired change in position or if it runs into walls that prevent it from
achieving the subgoal. The goal condition is the same as the termination condition.

 BackOne(d; x; y). This moves the agent one step backwards (in the direction opposite

to d. It needs the starting x and y position in order to tell when it has succeeded. It
terminates if it has moved at least one unit in direction d or if there is a wall in this
direction. Its goal condition is the same as its termination condition.
293

Dietterich

 PerpThree(p; x; y). This moves the agent three steps in the direction p. It needs the

starting x and y positions in order to tell when it has succeeded. It terminates when it
has moved at least three units in the direction p or if there is a wall in that direction.
The goal condition is the same as the termination condition.

 Move(d). This is a \parameterized primitive" action. It executes one primitive move
in direction d and terminates immediately.

From this, we can see that there are three major dierences between the MAXQ representation and the HAM representation. First, a HAM nite-state controller can contain
internal states. To convert them into a MAXQ subtask graph, we must make a separate
subtask for each internal state in the HAM. Second, a HAM can terminate based on an
\amount of eort" (e.g., performing 5 actions), whereas a MAXQ subtask must terminate
based on some change in the state of the world. It is impossible to dene a MAXQ subtask that performs k steps and then terminate regardless of the eects of those steps (i.e.,
without adding some kind of \counter" to the state of the MDP). Third, it is more dicult
to formulate the termination conditions for MAXQ subtasks than for HAM machines. For
example, in the HAM, it was not necessary to specify that the MExitHallway machine terminates when it has entered a dierent intersection than the one where the MGo was executed.
However, this is important for the MAXQ method, because in MAXQ, each subtask learns
its own value function and policy|independent of its parent tasks. For example, without
the requirement to enter a dierent intersection, the learning algorithms for MAXQ will
always prefer to have MaxExitHall take one step backward and return to the room in which
the Go action was started (because that is a much easier terminal state to reach). This
problem does not arise in the HAM approach, because the policy learned for a subtask
depends on the whole \attened" hierarchy of machines, and returning to the state where
the Go action was started does not help solve the overall problem of reaching the goal state
in the lower right corner.
To construct the MAXQ graph for this problem, we have introduced three programming
tricks: (a) binding parameters to aspects of the current state (in order to serve as a kind
of \local memory" for where the subtask began executing), (b) having a parameterized
primitive action (in order to be able to pass a parameter value that species which primitive
action to perform), and (c) employing \inheritance of termination conditions"|that is, each
subtask in this MAXQ graph (but not the others in this paper) inherits the termination
conditions of all its ancestor tasks. Hence, if the agent is in the middle of executing a ToWall
action when it leaves an intersection, the ToWall subroutine terminates because the ExitInter
termination condition is satised. This behavior is very similar to the standard behavior of
MAXQ. Ordinarily, when an ancestor task terminates, all of its descendent tasks are forced
to return without updating their C values. With inheritance of termination conditions, on
the other hand, the descendent tasks are forced to terminate, but after updating their C
values. In other words, the termination condition of each child task is the logical disjuntion
of all of the termination conditions of its ancestors (plus its own termination condition).
This inheritance made it easier to write the MAXQ graph, because the parents did not need
to pass down to their children all of the information necessary for the children to dene the
complete termination and goal predicates.
294

MAXQ Hierarchical Reinforcement Learning

There are essentially no opportunities for state abstraction in this task, because there
are no irrelevant features of the state. There are some opportunities to apply the Shielding
and Termination properties, however. In particular, ExitHall(d) is guaranteed to cause its
parent task, MaxGo(d), to terminate, so it does not require any stored C values. There are
many states where some subtasks are terminated (e.g., Go(East) in any state where there
is a wall on the east side of the room), and so no C values need to be stored.
Nonetheless, even after applying the state elimination conditions, the MAXQ representation for this task requires much more space than a at representation. An exact
computation is dicult, but after applying MAXQ-Q learning, the MAXQ representation
required 52,043 values, whereas at Q learning requires fewer than 16,704 values. Parr
states that his method requires only 4,300 values.
To test the relative eectiveness of the MAXQ representation, we compare MAXQ-Q
learning with at Q learning. Because of the very large negative values that some states
acquire (particularly during the early phases of learning), we were unable to get Boltzmann
exploration to work well|one very bad experience would cause an action to receive such
a low Q value, that it would never be tried again. Hence, we experimented with both
-greedy exploration and counter-based exploration. The -greedy exploration policy is an
ordered, abstract GLIE policy in which a random action is chosen with probability , and 
is gradually decreased over time. The counter-based exploration policy keeps track of how
many times each action a has been executed in each state s. To choose an action in state
s, it selects the action that has been executed the fewest times until all actions have been
executed T times. Then it switches to greedy execution. Hence, it is not a genuine GLIE
policy. Parr employed counter-based exploration policies in his experiments with this task.
As in the other domains, we conducted several experimental runs (e.g., testing Boltzmann, -greedy, and counter-based exploration) to determine the best parameters for each
algorithm. For Flat Q learning, we chose the following parameters: learning rate 0.50, greedy exploration with initial value for  of 1.0,  decreased by 0.001 after each successful
execution of a Max node, and initial Q values of ,200:123. For MAXQ-Q learning, we chose
the following parameters: counter-based exploration with T = 10, learning rate equal to the
reciprocal of the number of times an action had been performed, and initial values for the C
values selected carefully to provide underestimates of the true C values. For example, the
initial values for QExitInter were ,40:123, because in the worst case, after completing an
ExitInter task, it takes about 40 steps to complete the subsequent ExitHall task and hence,
complete the Go parent task. Performance was quite sensitive to these initial C values,
which is a potential drawback of the MAXQ approach.
Figure 16 plots the results. We can see that MAXQ-Q learning converges about 10
times faster than Flat Q learning. We do not know whether MAXQ-Q has converged to a
recursively optimal policy. For comparison, we also show the performance of a hierarchical
policy that we coded by hand, but in our hand-coded policy, we used knowledge of contextual
information to choose operators, so this policy is surely better than the best recursively
optimal policy. HAMQ learning should converge to a policy equal to or slightly better than
our hand-coded policy.
This experiment demonstrates that the MAXQ representation can capture most|but
not all|of the prior knowledge that can be represented by the HAMQ hierarchy. It also
295

Dietterich

-100
-150

Mean Reward Per Trial

-200

Hand-coded hierarchical policy

-250
-300
-350

MAXQ Q Learning

Flat Q Learning

-400
-450
-500
0

1e+06

2e+06

3e+06
Primitive Steps

4e+06

5e+06

6e+06

Figure 16: Comparison of Flat Q learning and MAXQ-Q learning in the Parr maze task.
shows that the MAXQ representation requires much more care in the design of the goal
conditions for the subtasks.

7.4 Other Domains
In addition to the three domains discussed above, we have developed MAXQ graphs for
Singh's (1992) \ag task", the treasure hunter task described by Tadepalli and Dietterich
(1997), and Dayan and Hinton's (1993) Feudal-Q learning task. All of these tasks can be
easily and naturally placed into the MAXQ framework|indeed, all of them t more easily
than the Parr and Russell maze task.
MAXQ is able to exactly duplicate Singh's work and his decomposition of the value
function|while using exactly the same amount of space to represent the value function.
MAXQ can also duplicate the results from Tadepalli and Dietterich|however, because
MAXQ is not an explanation-based method, it is considerably slower and requires substantially more space to represent the value function.
In the Feudal-Q task, MAXQ is able to give better performance than Feudal-Q learning.
The reason is that in Feudal-Q learning, each subroutine makes decisions using only a Q
function learned at its own level of the hierarchy|that is, without information about the
estimated costs of the actions of its descendents. In contrast, the MAXQ value function
decomposition permits each Max node to make decisions based on the sum of its completion
function, C (i; s; j ), and the costs estimated by its descendents, V (j; s). Of course, MAXQ
296

MAXQ Hierarchical Reinforcement Learning

also supports non-hierarchical execution, which is not possible for Feudal-Q, because it does
not learn a value function decomposition.

8. Discussion

Before concluding this paper, we wish to discuss two issues: (a) design tradeos in hierarchical reinforcement learning and (b) methods for automatically learning (or at least
improving) MAXQ hierarchies.

8.1 Design Tradeos in Hierarchical Reinforcement Learning

In the introduction to this paper, we discussed four issues concerning the design of hierarchical reinforcement learning architectures: (a) the method for dening subtasks, (b) the
use of state abstraction, (c) non-hierarchical execution, and (d) the design of learning algorithms. In this subsection, we want to highlight a tradeo between the rst two of these
issues.
MAXQ denes subtasks using a termination predicate Ti and a pseudo-reward function
R~ . There are at least two drawbacks of this method. First, it can be hard for the programmer to dene Ti and R~ correctly, since this essentially requires guessing the value function
of the optimal policy for the MDP at all states where the subtask terminates. Second, it
leads us to seek a recursively optimal policy rather than a hierarchically optimal policy.
Recursively optimal policies may be much worse than hierarchically optimal ones, so we
may be giving up substantial performance.
However, in return for these two drawbacks, MAXQ obtains a very important benet:
the policies and value functions for subtasks become context-free. In other words, they
do not depend on their parent tasks or the larger context in which they are invoked. To
understand this point, consider again the MDP shown in Figure 6. It is clear that the
optimal policy for exiting the left-hand room (the Exit subtask) depends on the location
of the goal. If it is at the top of the right-hand room, then the agent should prefer to
exit via the upper door, whereas if it is at the bottom of the right-hand room, the agent
should prefer to exit by the lower door. However, if we dene the subtask of exiting the
left-hand room using a pseudo-reward of zero for both doors, then we obtain a policy that
is not optimal in either case, but a policy that we can re-use in both cases. Furthermore,
this policy does not depend on the location of the goal. Hence, we can apply Max node
irrelevance to solve the Exit subtask using only the location of the robot and ignore the
location of the goal.
This example shows that we obtain the benets of subtask reuse and state abstraction because we dene the subtask using a termination predicate and a pseudo-reward
function. The termination predicate and pseudo-reward function provide a barrier that
prevents \communication" of value information between the Exit subtask and its context.
Compare this to Parr's HAM method. The HAMQ algorithm nds the best policy
consistent with the hierarchy. To achieve this, it must permit information to propagate
\into" the Exit subtask (i.e., the Exit nite-state controller) from its environment. But
this means that if any state that is reached after leaving the Exit subtask has dierent
values depending on the location of the goal, then these dierent values will propagate
back into the Exit subtask. To represent these dierent values, the Exit subtask must know
297

Dietterich

the location of the goal. In short, to achieve a hierarchically optimal policy within the Exit
subtask, we must (in general) represent its value function using the entire state space. State
abstractions cannot be employed without losing hierarchical optimality.
We can see, therefore, that there is a direct tradeo between achieving hierarchical
optimality and employing state abstractions. Methods for hierarchical optimality have more
freedom in dening subtasks (e.g., using partial policies, as in the HAM approach). But
they cannot (safely) employ state abstractions within subtasks, and in general, they cannot
reuse the solution of one subtask in multiple contexts. Methods for recursive optimality, on
the other hand, must dene subtasks using some method (such as pseudo-reward functions
for MAXQ or xed policies for the options framework) that isolates the subtask from its
context. But in return, they can apply state abstraction and the learned policy can be
reused in many contexts (where it will be more or less optimal).
It is interesting that the iterative method described by Dean and Lin (1995) can be
viewed as a method for moving along this tradeo. In the Dean and Lin method, the
programmer makes an initial guess for the values of the terminal states of each subtask
(i.e., the doorways in Figure 6). Based on this initial guess, the locally optimal policies
for the subtasks are computed. Then the locally optimal policy for the parent task is
computed|while holding the subtask policies xed (i.e., treating them as options). At
this point, their algorithm has computed the recursively optimal solution to the original
problem, given the initial guesses. Instead of solving the various subproblems sequentially
via an oine algorithm as Dean and Lin suggested, we could use the MAXQ-Q learning
algorithm.
But the method of Dean and Lin does not stop here. Instead, it computes new values
of the terminal states of each subtask based on the learned value function for the entire
problem. This allows it to update its \guesses" for the values of the terminal states. The
entire solution process can now be repeated to obtain a new recursively optimal solution,
based on the new guesses. They prove that if this process is iterated indenitely, it will
converge to the hierarchically optimal policy (provided, of course, that no state abstractions
are used within the subtasks).
This suggests an extension to MAXQ-Q learning that adapts the R~ values online. Each
time a subtask terminates, we could update the R~ function based on the computed value
of the terminated state. To be precise, if j is a subtask of i, then when j terminates in
state s0 , we should update R~ j (s0 ) to be equal to V~ (i; s0 ) = maxa0 Q~ (i; s0 ; a0 ). However, this
will only work if R~ j (s0 ) is represented using the full state s0. If subtask j is employing state
abstractions, x = (s), then R~ j (x0 ) will need to be the average value of V~ (i; s0 ), where
the average is taken over all states s0 such that x0 = (s0 ) (weighted by the probability of
visiting those states). This is easily accomplished by performing a stochastic approximation
update of the form
R~j (x0 ) = (1 , t )R~ j (x0 ) + tV~ (i; s0 )
each time subtask j terminates. Such an algorithm could be expected to converge to the
best hierarchical policy consistent with the given state abstractions.
This also suggests that in some problems, it may be worthwhile to rst learn a recursively
optimal policy using very aggressive state abstractions and then use the learned value
function to initialize a MAXQ representation with a more detailed representation of the
states. These progressive renements of the state space could be guided by monitoring the
298

MAXQ Hierarchical Reinforcement Learning

degree to which the values of V~ (i; x0 ) vary for each abstract state x0 . If they have a large
variance, this means that the state abstractions are failing to make important distinctions
in the values of the states, and they should be rened.
Both of these kinds of adaptive algorithms will take longer to converge than the basic
MAXQ method described in this paper. But for tasks that an agent must solve many times
in its lifetime, it is worthwhile to have learning algorithms that provide an initial useful
solution but then gradually improve that solution until it is optimal. An important goal for
future research is to nd methods for diagnosing and repairing errors (or sub-optimalities)
in the initial hierarchy so that ultimately the optimal policy will be discovered.

8.2 Automated Discovery of Abstractions

The approach taken in this paper has been to rely upon the programmer to design the
MAXQ hierarchy including the termination conditions, pseudo-reward functions, and state
abstractions. But the results of this paper, particularly concerning state abstraction, suggest
ways in which we might be able to automate the construction of the hierarchy.
The main purpose of the hierarchy is to create opportunities for subtask sharing and
state abstraction. These are actually very closely related. In order for a subtask to be shared
in two dierent regions of the state space, it must be the case that the value function in those
two dierent regions is identical except for an additive oset. In the MAXQ framework,
that additive oset would be the dierence in the C values of the parent task. So one way to
nd reusable subtasks would be to look for regions of state space where the value function
exhibits these additive osets.
A second way would be to search for structure in the one-step probability transition
function P (s0 js; a). A subtask will be useful if it enables state abstractions such as Max
Node Irrelevance. We can formulate this as the problem of identifying some region of
state space such that, conditioned on being in that region, P (s0 js; a) factors according to
Equation 17. A top-down divide-and-conquer algorithm similar to decision-tree algorithms
might be able to do this.
A third way would be to search for funnel actions by looking for bottlenecks in the state
space through which all policies must travel. This would be useful for discovering cases of
Result Distribution Irrelevance.
In some ways, the most dicult kinds of state abstractions to discover are those in
which arbitrary subgoals are introduced to constrain the policy (and sacrice optimality).
For example, how could an algorithm automatically decide to impose landmarks onto the
HDG task? Perhaps by detecting a large region of state space without bottlenecks or
variations in the reward function?
The problem of discovering hierarchies is an important challenge for the future, but at
least this paper has provided some guidelines for what constitute good state abstractions,
and these can serve as objective functions for guiding the automated search for abstractions.

9. Concluding Remarks

This paper has introduced a new representation for the value function in hierarchical reinforcement learning|the MAXQ value function decomposition. We have proved that the
MAXQ decomposition can represent the value function of any hierarchical policy under
299

Dietterich

both the nite-horizon undiscounted, cumulative reward criterion and the innite-horizon
discounted reward criterion. This representation supports subtask sharing and re-use, because the overall value function is decomposed into value functions for individual subtasks.
The paper introduced a learning algorithm, MAXQ-Q learning, and proved that it
converges with probability 1 to a recursively optimal policy. The paper argued that although
recursive optimality is weaker than either hierarchical optimality or global optimality, it is
an important form of optimality because it permits each subtask to learn a locally optimal
policy while ignoring the behavior of its ancestors in the MAXQ graph. This increases the
opportunities for subtask sharing and state abstraction.
We have shown that the MAXQ decomposition creates opportunities for state abstraction, and we identied a set of ve properties (Max Node Irrelevance, Leaf Irrelevance,
Result Distribution Irrelevance, Shielding, and Termination) that allow us to ignore large
parts of the state space within subtasks. We proved that MAXQ-Q still converges in the
presence of these forms of state abstraction, and we showed experimentally that state abstraction is important in practice for the successful application of MAXQ-Q learning|at
least in the Taxi and HDG tasks.
The paper presented two dierent methods for deriving improved non-hierarchical policies from the MAXQ value function representation, and it has formalized the conditions
under which these methods can improve over the hierarchical policy. The paper veried
experimentally that non-hierarchical execution gives improved performance in the Fickle
Taxi Task (where it achieves optimal performance) and in the HDG task (where it gives a
substantial improvement).
Finally, the paper has argued that there is a tradeo governing the design of hierarchical
reinforcement learning methods. At one end of the design spectrum are \context free"
methods such as MAXQ-Q learning. They provide good support for state abstraction and
subtask sharing but they can only learn recursively optimal policies. At the other end
of the spectrum are \context-sensitive" methods such as HAMQ, the options framework,
and the early work of Dean and Lin. These methods can discover hierarchically optimal
policies (or, in some cases, globally optimal policies), but their drawback is that they cannot
easily exploit state abstractions or share subtasks. Because of the great speedups that are
enabled by state abstraction, this paper has argued that the context-free approach is to be
preferred|and that it can be relaxed as needed to obtain improved policies.

Acknowledgements
The author gratefully acknowledges the support of the National Science Foundation under
grant number IRI-9626584, the Oce of Naval Research under grant number N00014-95-10557, the Air Force Oce of Scientic Research under grant number F49620-98-1-0375, and
the Spanish government under their program of Estancias de Investigadores Extranjeros en
Regimen de A~no Sabatico en Espa~na. In addition, the author is indebted to many colleagues
for helping develop and clarify the ideas in this paper including Valentina Zubek, Leslie
Kaelbling, Bill Langford, Wes Pinchot, Rich Sutton, Prasad Tadepalli, and Sebastian Thrun.
I particularly want to thank Eric Chown for encouraging me to study Feudal reinforcement
learning, Ron Parr for providing the details of his HAM machines, and Sebastian Thrun
for encouraging me to write a single comprehensive paper. I also thank Andrew Moore
300

MAXQ Hierarchical Reinforcement Learning

(the action editor), Valentina Zubek, and the two sets of anonymous reviewers of previous
drafts of this paper for their suggestions and careful reading, which have improved the paper
immeasurably.

References

Bellman, R. E. (1957). Dynamic Programming. Princeton University Press.
Bertsekas, D. P., & Tsitsiklis, J. N. (1996). Neuro-Dynamic Programming. Athena Scientic,
Belmont, MA.
Boutilier, C., Dearden, R., & Goldszmidt, M. (1995). Exploiting structure in policy construction. In Proceedings of the Fourteenth International Joint Conference on Articial
Intelligence, pp. 1104{1111.
Currie, K., & Tate, A. (1991). O-plan: The open planning architecture. Articial Intelligence, 52 (1), 49{86.
Dayan, P., & Hinton, G. (1993). Feudal reinforcement learning. In Advances in Neural
Information Processing Systems, 5, pp. 271{278. Morgan Kaufmann, San Francisco,
CA.
Dean, T., & Lin, S.-H. (1995). Decomposition techniques for planning in stochastic domains.
Tech. rep. CS-95-10, Department of Computer Science, Brown University, Providence,
Rhode Island.
Dietterich, T. G. (1998). The MAXQ method for hierarchical reinforcement learning. In
Fifteenth International Conference on Machine Learning, pp. 118{126. Morgan Kaufmann.
Fikes, R. E., Hart, P. E., & Nilsson, N. J. (1972). Learning and executing generalized robot
plans. Articial Intelligence, 3, 251{288.
Forgy, C. L. (1982). Rete: A fast algorithm for the many pattern/many object pattern
match problem. Articial Intelligence, 19 (1), 17{37.
Hauskrecht, M., Meuleau, N., Kaelbling, L. P., Dean, T., & Boutilier, C. (1998). Hierarchical
solution of Markov decision processes using macro-actions. In Proceedings of the
Fourteenth Annual Conference on Uncertainty in Articial Intelligence (UAI{98), pp.
220{229 San Francisco, CA. Morgan Kaufmann Publishers.
Howard, R. A. (1960). Dynamic Programming and Markov Processes. MIT Press, Cambridge, MA.
Jaakkola, T., Jordan, M. I., & Singh, S. P. (1994). On the convergence of stochastic iterative
dynamic programming algorithms. Neural Computation, 6 (6), 1185{1201.
Kaelbling, L. P. (1993). Hierarchical reinforcement learning: Preliminary results. In Proceedings of the Tenth International Conference on Machine Learning, pp. 167{173 San
Francisco, CA. Morgan Kaufmann.
301

Dietterich

Kalmar, Z., Szepesvari, C., & Lorincz, A. (1998). Module based reinforcement learning for
a real robot. Machine Learning, 31, 55{85.
Knoblock, C. A. (1990). Learning abstraction hierarchies for problem solving. In Proceedings
of the Eighth National Conference on Articial Intelligence, pp. 923{928 Boston, MA.
AAAI Press.
Korf, R. E. (1985). Macro-operators: A weak method for learning. Articial Intelligence,
26 (1), 35{77.
Lin, L.-J. (1993). Reinforcement learning for robots using neural networks. Ph.D. thesis,
Carnegie Mellon University, Department of Computer Science, Pittsburgh, PA.
Moore, A. W., Baird, L., & Kaelbling, L. P. (1999). Multi-value-functions: Ecient automatic action hierarchies for multiple goal MDPs. In Proceedings of the International Joint Conference on Articial Intelligence, pp. 1316{1323 San Francisco. Morgan Kaufmann.
Parr, R. (1998a). Flexible decomposition algorithms for weakly coupled Markov decision
problems. In Proceedings of the Fourteenth Annual Conference on Uncertainty in
Articial Intelligence (UAI{98), pp. 422{430 San Francisco, CA. Morgan Kaufmann
Publishers.
Parr, R. (1998b). Hierarchical control and learning for Markov decision processes. Ph.D.
thesis, University of California, Berkeley, California.
Parr, R., & Russell, S. (1998). Reinforcement learning with hierarchies of machines. In Advances in Neural Information Processing Systems, Vol. 10, pp. 1043{1049 Cambridge,
MA. MIT Press.
Pearl, J. (1988). Probabilistic Inference in Intelligent Systems. Networks of Plausible Inference. Morgan Kaufmann, San Mateo, CA.
Rummery, G. A., & Niranjan, M. (1994). Online Q-learning using connectionist systems.
Tech. rep. CUED/FINFENG/TR 166, Cambridge University Engineering Department, Cambridge, England.
Sacerdoti, E. D. (1974). Planning in a hierarchy of abstraction spaces. Articial Intelligence,
5 (2), 115{135.
Singh, S., Jaakkola, T., Littman, M. L., & Szepesvari, C. (1998). Convergence results
for single-step on-policy reinforcement-learning algorithms. Tech. rep., University of
Colorado, Department of Computer Science, Boulder, CO. To appear in Machine
Learning.
Singh, S. P. (1992). Transfer of learning by composing solutions of elemental sequential
tasks. Machine Learning, 8, 323{339.
Sutton, R. S., Singh, S., Precup, D., & Ravindran, B. (1999). Improved switching among
temporally abstract actions. In Advances in Neural Information Processing Systems,
Vol. 11, pp. 1066{1072. MIT Press.
302

MAXQ Hierarchical Reinforcement Learning

Sutton, R., & Barto, A. G. (1998). Introduction to Reinforcement Learning. MIT Press,
Cambridge, MA.
Sutton, R. S., Precup, D., & Singh, S. (1998). Between MDPs and Semi-MDPs: Learning,
planning, and representing knowledge at multiple temporal scales. Tech. rep., University of Massachusetts, Department of Computer and Information Sciences, Amherst,
MA. To appear in Articial Intelligence.
Tadepalli, P., & Dietterich, T. G. (1997). Hierarchical explanation-based reinforcement
learning. In Proceedings of the Fourteenth International Conference on Machine
Learning, pp. 358{366 San Francisco, CA. Morgan Kaufmann.
Tambe, M., & Rosenbloom, P. S. (1994). Investigating production system representations
for non-combinatorial match. Articial Intelligence, 68 (1), 155{199.
Watkins, C. J. C. H. (1989). Learning from Delayed Rewards. Ph.D. thesis, King's College,
Oxford. (To be reprinted by MIT Press.).
Watkins, C. J., & Dayan, P. (1992). Technical note Q-Learning. Machine Learning, 8, 279.

303

Journal of Artificial Intelligence Research 13 (2000) 155-188

Submitted 6/00; published 10/00

AIS-BN: An Adaptive Importance Sampling Algorithm for
Evidential Reasoning in Large Bayesian Networks
Jian Cheng
Marek J. Druzdzel

jcheng@sis.pitt.edu
marek@sis.pitt.edu

Decision Systems Laboratory
School of Information Sciences and Intelligent Systems Program
University of Pittsburgh, Pittsburgh, PA 15260 USA

Abstract
Stochastic sampling algorithms, while an attractive alternative to exact algorithms in
very large Bayesian network models, have been observed to perform poorly in evidential
reasoning with extremely unlikely evidence. To address this problem, we propose an adaptive importance sampling algorithm, AIS-BN, that shows promising convergence rates
even under extreme conditions and seems to outperform the existing sampling algorithms
consistently. Three sources of this performance improvement are (1) two heuristics for
initialization of the importance function that are based on the theoretical properties of importance sampling in finite-dimensional integrals and the structural advantages of Bayesian
networks, (2) a smooth learning method for the importance function, and (3) a dynamic
weighting function for combining samples from different stages of the algorithm.
We tested the performance of the AIS-BN algorithm along with two state of the art
general purpose sampling algorithms, likelihood weighting (Fung & Chang, 1989; Shachter
& Peot, 1989) and self-importance sampling (Shachter & Peot, 1989). We used in our
tests three large real Bayesian network models available to the scientific community: the
CPCS network (Pradhan et al., 1994), the PathFinder network (Heckerman, Horvitz,
& Nathwani, 1990), and the ANDES network (Conati, Gertner, VanLehn, & Druzdzel,
1997), with evidence as unlikely as 10−41 . While the AIS-BN algorithm always performed
better than the other two algorithms, in the majority of the test cases it achieved orders of
magnitude improvement in precision of the results. Improvement in speed given a desired
precision is even more dramatic, although we are unable to report numerical results here,
as the other algorithms almost never achieved the precision reached even by the first few
iterations of the AIS-BN algorithm.

1. Introduction
Bayesian networks (Pearl, 1988) are increasingly popular tools for modeling uncertainty in
intelligent systems. With practical models reaching the size of several hundreds of variables
(e.g., Pradhan et al., 1994; Conati et al., 1997), it becomes increasingly important to address the problem of feasibility of probabilistic inference. Even though several ingenious
exact algorithms have been proposed, in very large models they all stumble on the theoretically demonstrated NP-hardness of inference (Cooper, 1990). The significance of this
result can be observed in practice — exact algorithms applied to large, densely connected
practical networks require either a prohibitive amount of memory or a prohibitive amount
of computation and are unable to complete. While approximating inference to any desired
precision has been shown to be NP-hard as well (Dagum & Luby, 1993), it is for very comc
2000
AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Cheng & Druzdzel

plex networks the only alternative that will produce any result at all. Furthermore, while
obtaining the result is crucial in all applications, precision guarantees may not be critical
for some types of problems and can be traded off against the speed of computation.
A prominent subclass of approximate algorithms is the family of stochastic sampling
algorithms (also called stochastic simulation or Monte Carlo algorithms). The precision
obtained by stochastic sampling generally increases with the number of samples generated
and is fairly unaffected by the network size. Execution time is fairly independent of the
topology of the network and is linear in the number of samples. Computation can be
interrupted at any time, yielding an anytime property of the algorithms, important in timecritical applications.
While stochastic sampling performs very well in predictive inference, diagnostic reasoning, i.e., reasoning from observed evidence nodes to their ancestors in the network often
exhibits poor convergence. When the number of observations increases, especially if these
observations are unlikely a-priori, stochastic sampling often fails to converge to reasonable estimates of the posterior probabilities. Although this problem has been known since
the very first sampling algorithm was proposed by Henrion (1988), little has been done
to address it effectively. Furthermore, various sampling algorithms proposed were tested
on simple and small networks, or networks with special topology, without the presence of
extremely unlikely evidence and the practical significance of this problem has been underestimated. Given a typical number of samples used in real-time that are feasible on
today’s hardware, say 106 samples, the behavior of a stochastic sampling algorithm will be
drastically different for different size networks. While in a network consisting of 10 nodes
and a few observations, it may be possible to converge to exact probabilities, in very large
networks only a negligibly small fraction of the total sample space will be probed. One of
the practical Bayesian network models that we used in our tests, a subset of the CPCS
network (Pradhan et al., 1994), consists of 179 nodes. Its total sample space is larger than
1061 . With 106 samples, we can sample only 10−55 fraction of the sample space.
We believe that it is crucial (1) to study the feasibility and convergence properties of
sampling algorithms on very large practical networks, and (2) to develop sampling algorithms that will show good convergence under extreme, yet practical conditions, such as
evidential reasoning given extremely unlikely evidence. After all, small networks can be
updated using any of the existing exact algorithms — it is precisely the very large networks
where stochastic sampling can be most useful. As to the likelihood of evidence, we know
that stochastic sampling will generally perform well when it is high (Henrion, 1988). So, it
is important to look at those cases in which evidence is very unlikely. In this paper, we test
two existing state of the art stochastic sampling algorithms for Bayesian networks, likelihood weighting (Fung & Chang, 1989; Shachter & Peot, 1989) and self-importance sampling
(Shachter & Peot, 1989), on a subset of the CPCS network with extremely unlikely evidence. We show that they both exhibit similarly poor convergence rates. We propose a new
sampling algorithm, that we call the adaptive importance sampling for Bayesian networks
(AIS-BN), which is suitable for evidential reasoning in large multiply-connected Bayesian
networks. The AIS-BN algorithm is based on importance sampling, which is a widely
applied method for variance reduction in simulation that has also been applied in Bayesian networks (e.g., Shachter & Peot, 1989). We demonstrate empirically on three large
practical Bayesian network models that the AIS-BN algorithm consistently outperforms
156

Adaptive Importance Sampling in Bayesian Networks

the other two algorithms. In the majority of the test cases, it achieved over two orders of
magnitude improvement in convergence. Improvement in speed given a desired precision
is even more dramatic, although we are unable to report numerical results here, as the
other algorithms never achieved the precision reached even by the first few iterations of
the AIS-BN algorithm. The main sources of improvement are: (1) two heuristics for the
initialization of the importance function that are based on the theoretical properties of importance sampling in finite-dimensional integrals and the structural advantages of Bayesian
networks, (2) a smooth learning method for updating the importance function, and (3) a
dynamic weighting function for combining samples from different stages of the algorithm.
We study the value of the two heuristics used in the AIS-BN algorithm: (1) initialization
of the probability distributions of parents of evidence nodes to uniform distribution and
(2) adjusting very small probabilities in the conditional probability tables, and show that
they both play an important role in the AIS-BN algorithm but only a moderate role in the
existing algorithms.
The remainder of this paper is structured as follows. Section 2 first gives a general
introduction to importance sampling in the domain of finite-dimensional integrals, where it
was originally proposed. We show how importance sampling can be used to compute probabilities in Bayesian networks and how it can draw additional benefits from the graphical
structure of the network. Then we develop a generalized sampling scheme that will aid us
in reviewing the previously proposed sampling algorithms and in describing the AIS-BN
algorithm. Section 3 describes the AIS-BN algorithm. We propose two heuristics for initialization of the importance function and discuss their theoretical foundations. We describe
a smooth learning method for the importance function and a dynamic weighting function
for combining samples from different stages of the algorithm. Section 4 describes the empirical evaluation of the AIS-BN algorithm. Finally, Section 5 suggests several possible
improvements to the AIS-BN algorithm, possible applications of our learning scheme, and
directions for future work.

2. Importance Sampling Algorithms for Bayesian Networks
We feel that it is useful to go back to the theoretical roots of importance sampling in order
to be able to understand the source of speedup of the AIS-BN algorithm relative to the
existing state of the art importance sampling algorithms for Bayesian networks. We first
review the general idea of importance sampling in finite-dimensional integrals and how it
can reduce the sampling variance. We then discuss the application of importance sampling
to Bayesian networks. Readers interested in more details are directed to literature on
Monte Carlo methods in computation of finite integrals, such as the excellent exposition by
Rubinstein (1981) that we are essentially following in the first section.
2.1 Mathematical Foundations
Let g(X) be a function of m variables X = (X1 , ..., Xm ) over a domain Ω ⊂ Rm , such that
computing g(X) for any X is feasible. Consider the problem of approximate computation
of the integral
Z
I=

g(X) dX .
Ω

157

(1)

Cheng & Druzdzel

Importance sampling approaches this problem by writing the integral (1) as
Z

I=
Ω

g(X)
f (X) dX ,
f (X)

where f (X), often referred to as the importance function, is a probability density function
over Ω. f (X) can be used in importance sampling if there exists an algorithm for generating
samples from f (X) and if the importance function is zero only when the original function
is zero, i.e., g(X) 6= 0 =⇒ f (X) 6= 0.
After we have independently sampled n points s1 , s2 , . . . , sn , si ∈ Ω, according to the
probability density function f (X), we can estimate the integral I by
n
1X
g(si )
Iˆn =
n i=1 f (si )

(2)

and estimate the variance of Iˆn by
b (Iˆn ) =
σ
2

n
X
1
g(si ) ˆ
− In
n · (n − 1) i=1 f (si )



2

.

(3)

It is straightforward to show that this estimator has the following properties:
1. E(Iˆn ) = I
2. limn→∞ Iˆn = I
√
n→∞
3. n · (Iˆn − I) −→ Normal(0, σf2(X) ), where
σf2(X)


Z 

=
Ω

g(X)
−I
f (X)

2

f (X) dX

(4)



b 2 (Iˆn ) = σ 2 (Iˆn ) = σf2 (X) /n
4. E σ

The variance of Iˆn is proportional to σf2(X) and inversely proportional to the number of
samples. To minimize the variance of Iˆn , we can either increase the number of samples or
try to decrease σf2(X) . With respect to the latter, Rubinstein (1981) reports the following
useful theorem and corollary.
Theorem 1 The minimum of σf2(X) is equal to
σf2(X)

2

Z

|g(X)| dX

=

− I2

Ω

and occurs when X is distributed according to the following probability density function
f (X) = R

|g(X)|
.
Ω |g(X)| dX

158

Adaptive Importance Sampling in Bayesian Networks

Corollary 1 If g(X) >0, then the optimal probability density function is
f (X) =

g(X)
I

and σf2(X) = 0.
Although in practice sampling from precisely f (X) = g(X)/I will occur rarely, we expect
that functions that are close enough to it can still reduce the variance effectively. Usually,
the closer the shape of the function f (X) is to the shape of the function g(X), the smaller
is σf2(X) . In high-dimensional integrals, selection of the importance function, f (X), is far
more critical than increasing the number of samples, since the former can dramatically
affect σf2(X) . It seems prudent to put more energy in choosing an importance function
whose shape is as close as possible to that of g(X) than to apply the brute force method of
increasing the number of samples.
It is worth noting here that if f (X) is uniform, importance sampling becomes a general
Monte Carlo sampling. Another noteworthy property of importance sampling that can be
derived from Equation 4 is that we should avoid f (X)  |g(X) − I · f (X)| in any part
of the domain of sampling, even if f (X) matches well g(X)/I in important regions. If
f (X)  |g(X) − I · f (X)|, the variance can become very large or even infinite. We can
avoid this by adjusting f (X) to be larger in unimportant regions of the domain of X.
While in this section we discussed importance sampling for continuous variables, the
results stated are valid for discrete variables as well, in which case integration should be
substituted by summation.
2.2 A Generic Importance Sampling Algorithm for Bayesian Networks
In the following discussion, all random variables used are multiple-valued, discrete variables.
Capital letters, such as A, B, or C, denote random variables. Bold capital letters, such as
A, B, or C, denote sets of variables. Bold capital letter E will usually be used to denote
the set of evidence variables. Lower case letters a, b, c denote particular instantiations
of variables A, B, and C respectively. Bold lower case letters, such as a, b, c, denote
particular instantiations of sets A, B, and C respectively. Bold lower case letter e, in
particular, will be used to denote the observations, i.e., instantiations of the set of evidence
variables E. Anc(A) denotes the set of ancestors of node A. Pa(A) denotes the set of
parents (direct ancestors) of node A. pa(A) denotes a particular instantiation of Pa(A). \
denotes set difference. Pa(A)|E=e denotes that we use the extended vertical bar to indicate
substitution of e for E in A.
We know that the joint probability distribution over all variables of a Bayesian network model, Pr(X), is the product of the probability distributions over each of the nodes
conditional on their parents, i.e.,
Pr(X) =

n
Y

Pr(Xi |Pa(Xi )) .

(5)

i=1

In order to calculate Pr(E = e), we need to sum over all Pr(X\E, E = e).
Pr(E = e) =

X

Pr(X\E, E = e)

X\E

159

(6)

Cheng & Druzdzel

We can see that Equation 6 is almost identical to Equation 1 except that integration is
replaced by summation and the domain Ω is replaced by X\E. The theoretical results
derived for the importance sampling that we reviewed in the previous section can thus be
directly applied to computing probabilities in Bayesian networks.
While there has been previous work on importance sampling-based algorithms for Bayesian networks, we will postpone the discussion of this work until the next section. Here
we will present a generic stochastic sampling algorithm that will help us in both reviewing
the prior work and in presenting our algorithm.
The posterior probability Pr(a|e) can be obtained by first computing Pr(a, e) and Pr(e)
and then combining these based on the definition of conditional probability
Pr(a|e) =

Pr(a, e)
.
Pr(e)

(7)

In order to increase the accuracy of results of importance sampling in computing the posterior probabilities over different network variables given evidence, we should in general use
different importance functions for Pr(a, e) and for Pr(e). Doing so increases the computation time only linearly while the gain in accuracy may be significant given that obtaining
a desired accuracy is exponential in nature. Very often, it is a common practice to use the
same importance function (usually for Pr(e)) to sample both probabilities. If the difference
1. Order the nodes according to their topological order.
2. Initialize importance function Pr0 (X\E), the desired number of samples
m, the updating interval l, and the score arrays for every node.
3. k ← 0, T ← ∅
4. for i ← 1 to m do
5.

if (i mod l == 0) then

6.

k ←k+1

7.

Update importance function Prk (X\E) based on T .
end if

8.

si ← generate a sample according to Prk (X\E)

9.

T ← T ∪ {si }

10.

Calculate Score(si , Pr(X\E, e), Prk (X\E)) and add it to the corresponding entry of every score array according to the instantiated states.
end for

11. Normalize the score arrays for every node.
Figure 1: A generic importance sampling algorithm.
160

Adaptive Importance Sampling in Bayesian Networks

between the optimal importance functions for these two quantities is large, the perforc
c
mance may deteriorate significantly. Although Pr(a,
e) and Pr(e)
are unbiased estimators
c
according to Property 1 (Section 2.1), Pr(a|e)
obtained by means of Equation 7 is not an
unbiased estimator. However, as the number of samples increases, the bias decreases and
can be ignored altogether when the sample size is large enough (Fishman, 1995).
Figure 1 presents a generic stochastic sampling algorithm that captures most of the
existing sampling algorithms. Without the loss of generality, we restrict ourselves in our
description to so-called forward sampling, i.e., generation of samples in the topological
order of the nodes in the network. The forward sampling order is accomplished by the
initialization performed in Step 1, where parents of each node are placed before the node
itself. In forward sampling, Step 8 of the algorithm, the actual generation of samples, works
as follows. (i) each evidence node is instantiated to its observed state and is further omitted
from sample generation; (ii) each root node is randomly instantiated to one of its possible
states, according to the importance prior probability of this node, which can be derived
from Prk (X\E); (iii) each node whose parents are instantiated is randomly instantiated to
one of its possible states, according to the importance conditional probability distribution
of this node given the values of the parents, which can also be derived from Prk (X\E); (iv)
this procedure is followed until all nodes are instantiated. A complete instantiation si of the
network based on this method is one sample of the joint importance probability distribution
Prk (X\E) over all variables of the network. The scoring of Step 10 amounts to calculating
Pr(si , e)/Prk (si ), as required by Equation 2. The ratio between the total score sum and the
number of samples is an unbiased estimator of Pr(e). In Step 10, if we also count the score
sum under the condition A = a, i.e., that some unobserved variables A have the values a,
the ratio between this score sum and the number of samples is an unbiased estimator of
Pr(a, e).
Most existing algorithms focus on the posterior probability distributions of individual
nodes. As we mentioned above, for the sake of efficiency they count the score sum corresponding to Pr(A = a, e), A ∈ X\E, and record it in an score array for node A. Each
entry of this array corresponds to a specified state of A. This method introduces additional
variance, as opposed to using the importance function derived from Prk (X\E) to sample
Pr(A = a, e), A ∈ X\E, directly.
2.3 Existing Importance Sampling Algorithms for Bayesian Networks
The main difference between various stochastic sampling algorithms is in how they process
Steps 2, 7, and 8 in the generic importance sampling algorithm of Figure 1.
Probabilistic logic sampling (Henrion, 1988) is the simplest and the first proposed sampling algorithm for Bayesian networks. The importance function is initialized in Step 2 to
Pr(X) and never updated (Step 7 is null). Without evidence, Pr(X) is the optimal importance function for the evidence set, which is empty anyway. It escapes most authors
that Pr(X) may be not the optimal importance function for Pr(A = a), A ∈ X, when A
is not a root node. A mismatch between the optimal and the actually used importance
function may result in a large variance. The sampling process with evidence is the same
as without evidence except that in Step 10 we do not count the scores for those samples
that are inconsistent with the observed evidence, which amounts to discarding them. When
161

Cheng & Druzdzel

the evidence is very unlikely, there is a large difference between Pr(X) and the optimal
importance function. Effectively, most samples are discarded and the performance of logic
sampling deteriorates badly.
Likelihood weighting (LW) (Fung & Chang, 1989; Shachter & Peot, 1989) enhances the
logic sampling in that it never discards samples. In likelihood weighting, the importance
function in Step 2 is



Pr(X\E) =
Pr(xi |Pa(Xi ))

xi ∈e
/
Y

.
E=e

Likelihood weighting does not update the importance function in Step 7. Although likelihood weighting is an improvement on logic sampling, its convergence rate can be still very
slow when there is large difference between the optimal importance function and Pr(X\E),
again especially in situations when evidence is very unlikely. Because of its simplicity, the
likelihood weighting algorithm has been the most commonly used simulation method for
Bayesian network inference. It often matches the performance of other, more sophisticated
schemes because it is simple and able to increase its precision by generating more samples
than other algorithms in the same amount of time.
Backward sampling (Fung & del Favero, 1994) changes Step 1 of our generic algorithm
and allows for generating samples from evidence nodes in the direction that is opposite to
the topological order of nodes in the network. In Step 2, backward sampling uses the likelihood of some of the observed evidence and some instantiated nodes to calculate Pr0 (X\E).
Although Fung and del Favero mentioned the possibility of dynamic node ordering, they
did not propose any scheme for updating the importance function in Step 7. Backward
sampling suffers from problems that are similar to those of likelihood weighting, i.e., a possible mismatch between its importance function and the optimal importance function can
lead to poor convergence.
Importance sampling (Shachter & Peot, 1989) is the same as our generic sampling algorithm. Shachter and Peot introduced two variants of importance sampling: self-importance
(SIS) and heuristic importance. The importance function used in the first step of the
self-importance algorithm is



0
Pr (X\E) =
Pr(xi |Pa(Xi ))

xi ∈e
/
Y

.
E=e

This function is updated in Step 7. The algorithm tries to revise the conditional probability
tables (CPTs) periodically in order to make the sampling distribution gradually approach
the posterior distribution. Since the same data are used to update the importance function
and to compute the estimator, this process introduces bias in the estimator. Heuristic
importance first removes edges from the network until it becomes a polytree, and then
uses a modified version of the polytree algorithm (Pearl, 1986) to compute the likelihood
functions for each of the unobserved nodes. Pr0 (X\E) is a combination of these likelihood
functions with Pr(X\E, e). In Step 7 heuristic importance does not update Prk (X\E). As
Shachter and Peot (1989) point out, this heuristic importance function can still lead to a
bad approximation of the optimal importance function. There exist also other algorithms
such as a combination of self-importance and heuristic importance (Shachter & Peot, 1989;
162

Adaptive Importance Sampling in Bayesian Networks

Shwe & Cooper, 1991). Although some researchers suggested that this may be a promising
direction for the work on sampling algorithms, we have not seen any results that would
follow up on this.
A separate group of stochastic sampling methods is formed by so-called Markov Chain
Monte Carlo (MCMC) methods that are divided into Gibbs sampling, Metropolis sampling,
and Hybrid Monte Carlo sampling (Geman & Geman, 1984; Gilks, Richardson, & Spiegelhalter, 1996; MacKay, 1998). Roughly speaking, these methods draw random samples from
an unknown target distribution f (X) by biasing the search for this distribution towards
higher probability regions. When applied to Bayesian networks (Pearl, 1987; Chavez &
Cooper, 1990) this approach determines the sampling distribution of a variable from its
previous sample given its Markov blanket (Pearl, 1988). This corresponds to updating
Prk (X\E) when sampling every node. Prk (X\E) will converge to the optimal importance
function for Pr(e) if Pr0 (X\E) satisfies some ergodic properties (York, 1992). Since the
convergence to the limiting distribution is very slow and calculating updates of the sampling distribution is costly, these algorithms are not used in practice as often as the simple
likelihood weighting scheme.
There are also some other simulation algorithms, such as bounded variance algorithm
(Dagum & Luby, 1997) and the AA algorithm (Dagum et al., 1995), which are essentially
based on the LW algorithm and the Stopping-Rule Theorem (Dagum et al., 1995). Cano
et al. (1996) proposed another importance sampling algorithm that performed somewhat
better than LW in cases with extreme probability distributions, but, as the authors state, in
general cases it “produced similar results to the likelihood weighting algorithm.” Hernandez
et al. (1998) also applied importance sampling and reported a moderate improvement on
likelihood weighting.
2.4 Practical Performance of the Existing Sampling Algorithms
The largest network that has been tested using sampling algorithms is QMR-DT (Quick
Medical Reference — Decision Theoretic) (Shwe et al., 1991; Shwe & Cooper, 1991), which
contains 534 adult diseases and 4,040 findings, with 40,740 arcs depicting disease-to-finding
dependencies. The QMR-DT network belongs to a class of special bipartite networks
and its structure is often referred to as BN2O (Henrion, 1991), because of its two-layer
composition: disease nodes in the top layer and finding nodes in the bottom layer. Shwe
and colleagues used an algorithm combining self-importance and heuristic importance and
tested its convergence properties on the QMR-DT network. But since the heuristic method
iterative tabular Bayes (ITB) that makes use of a version of Bayes’ rule is designed for
the BN2O networks, it cannot be generalized to arbitrary networks. Although Shwe and
colleagues concluded that Markov blanket scoring and self-importance sampling significantly
improve the convergence rate in their model, we cannot extend this conclusion to general
networks. The computation of Markov blanket scoring is more complex in a general multiconnected network than in a BN2O network. Also, the experiments conducted lacked a
gold-standard posterior probability distribution that could serve to judge the convergence
rate.
Pradhan and Dagum (1996) tested an efficient version of the LW algorithm — bounded
variance algorithm (Dagum & Luby, 1997) and the AA algorithm (Dagum et al., 1995) on
163

Cheng & Druzdzel

a 146 node, multiply connected medical diagnostic Bayesian network. One limitation in
their tests is that the probability of evidence in the cases selected for testing was rather
high. Although over 10% of the cases had the probability of evidence on the order of
10−8 or smaller, a simple calculation based on the reported mean µ = 34.5 number of
evidence nodes, shows that the average probability of an observed state of an evidence node
conditional on its direct predecessors was on the order of (10−8 )1/34.5 ≈ 0.59. Given that
their algorithm is essentially based on the LW algorithm, based on our tests we suspect
that the performance will deteriorate on cases where the evidence is very unlikely. Both
algorithms focus on the marginal probability of one hypothesis node. If there are many
queried nodes, the efficiency may deteriorate.
We have tested the algorithms discussed in Section 2.3 on several large networks. Our
experimental results show that in cases with very unlikely evidence, none of these algorithms
converges to reasonable estimates of the posterior probabilities within a reasonable amount
of time. The convergence becomes worse as the number of evidence nodes increases. Thus,
when using these algorithms in very large networks, we simply cannot trust the results. We
will present results of tests of the LW and SIS algorithms in more detail in Section 4.

3. AIS-BN: Adaptive Importance Sampling for Bayesian Networks
The main reason why the existing stochastic sampling algorithms converge so slowly is that
they fail to learn a good importance function during the sampling process and, effectively,
fail to reduce the sampling variance. When the importance function is optimal, such as
in probabilistic logic sampling without any evidence, each of the algorithms is capable
of converging to fairly good estimates of the posterior probabilities within relatively few
samples. For example, assuming that the posterior probabilities are not extreme (i.e., larger
than say 0.01), as few as 1,000 samples may be sufficient to obtain good estimates. In this
section, we present the adaptive importance sampling algorithm for Bayesian networks
(AIS-BN) that, as we will demonstrate in the next section, performs very well on most
tests. We will first describe the details of the algorithm and prove two theorems that are
useful in learning the optimal importance sampling function.
3.1 Basic Algorithm — AIS-BN
Compared with importance sampling used in normal finite-dimensional integrals, importance sampling used in Bayesian networks has several significant advantages. First, the
network joint probability distribution Pr(X) is decomposable and can be factored into
component parts. Second, the network has a clear structure, which represents many conditional independence relationships. These properties are very helpful in estimating the
optimal importance function.
The basic AIS-BN algorithm is presented in Figure 2. The main differences between
the AIS-BN algorithm and the basic importance sampling algorithm in Figure 1 is that
we introduce a monotonically increasing weight function wk and two effective heuristic
initialization methods in Step 2. We also introduce a special learning component in Step 7
to let the updating process run more smoothly, avoiding oscillation of the parameters. The
164

Adaptive Importance Sampling in Bayesian Networks

1. Order the nodes according to their topological order.
2. Initialize importance function Pr0 (X\E) using some heuristic methods, initialize weight w0 , set the desired number of samples m and the updating
interval l, initialize the score arrays for every node.
3. k ← 0, T ← ∅, wT Score ← 0, wsum ← 0
4. for i ← 1 to m do
5.

if (i mod l == 0) then

6.

k ←k+1

7.

Update the importance function Prk (X\E) and wk based on T .
end if

8.

si ← generate a sample according to Prk (X\E)

9.

T ← T ∪ {si }

10.

wiScore ← Score (si , Pr(X\E, e), Prk (X\E), wk )

11.

wT Score ← wT Score + wiScore
(Optional: add wiScore to the corresponding entry of every score array)

12.

wsum ← wsum + wk
end for

13. Output estimate of Pr(E) as wT Score /wsum
(Optional: Normalize the score arrays for every node)

Figure 2: The adaptive importance sampling for Bayesian Networks (AIS-BN) algorithm.
score processing in Step 10 is
Pr(si , e)
wiScore = wk k
.
Pr (si )
Note that in this respect the algorithm in Figure 1 becomes a special case of AIS-BN
when wk = 1. The reason why we use wk is that we want to give different weights to
the sampling results obtained at different stages of the algorithm. As each stage updates
the importance function, they will all have different distance from the optimal importance
b k , where σ
b k is the standard deviation estimated in
function. We recommend that wk ∝ 1/σ
1
k
stage k using Equation 3. In order to keep w monotonically increasing, if wk is smaller
than wk−1 , we adjust its value to wk−1 . This weighting scheme may introduce bias into
1. A similar weighting scheme based on variance was apparently developed independently by Ortiz and
Kaelbling (2000), who recommend the weight wk ∝ 1/(σ
bk )2 .

165

Cheng & Druzdzel

the final result. Since the initial importance sampling functions are often inefficient and
introduce big variance into the results, we also recommend that wk = 0 in the first few
stages of the algorithm. We have designed this weighting scheme to reflect the fact that in
practice estimates with very small estimated variance are usually good estimates.
3.2 Modifying the Sampling Distribution in AIS-BN
Based on the theoretical considerations of Section 2.1, we know that the crucial element of
the algorithm is converging on a good approximation of the optimal importance function.
In what follows, we first give the optimal importance function for calculating Pr(E = e)
and then discuss how to use the structural advantages of Bayesian networks to approximate
this function. In the sequel, we will use the symbol ρ to denote the importance sampling
function and ρ∗ to denote the optimal importance sampling function.
Since Pr(X\E, E = e) > 0, from Corollary 1 we have
ρ(X\E) =

Pr(X\E, E = e)
= Pr(X|E = e) .
Pr(E = e)

The following corollary captures this result.
Corollary 2 The optimal importance sampling function ρ∗ (X\E) for calculating Pr(E = e)
in Equation 6 is Pr(X|E = e).
Although we know the mathematical expression for the optimal importance sampling
function, it is difficult to obtain this function exactly. In our algorithm, we use the following
importance sampling function
ρ(X\E) =

n
Y

Pr(Xi |Pa(Xi ), E) .

(8)

i=1

This function partially considers the effect of all the evidence on every node during the
sampling process. When the network structure is the same as that of the network which
has absorbed the evidence, this function is the optimal importance sampling function. It
is easy to learn and, as our experimental results show, it is a good approximation to the
optimal importance sampling function. Theoretically, when the posterior structure of the
model changes drastically as the result of observed evidence, this importance sampling
function may perform poorly. We have tried to find practical networks where this would
happen, but to the day have not encountered a drastic example of this effect.
From Section 2.2, we know that the score sums corresponding to {xi , pa(Xi ), e} can
yield an unbiased estimator of Pr(xi , pa(Xi ), e). According to the definition of conditional
probability, we can get an estimator of Pr0 (xi |pa(Xi ), e). This can be achieved by maintaining an updating table for every node, the structure of which mimicks the structure of
the CPT. Such tables allow us to decompose the above importance function into components that can be learned individually. We will call these tables the importance conditional
probability tables (ICPT).
Definition 1 An importance conditional probability table (ICPT) of a node X is a table
of posterior probabilities Pr(X|Pa(X), E = e) conditional on the evidence and indexed by
its immediate predecessors, Pa(X).
166

Adaptive Importance Sampling in Bayesian Networks

The ICPT tables will be modified during the process of learning the importance function.
Now we will prove a useful theorem that will lead to considerable savings in the learning
process.
Theorem 2
Xi ∈ X, Xi ∈
/ Anc(E) ⇒ Pr(Xi |Pa(Xi ), E) = Pr(Xi |Pa(Xi )) .

(9)

Proof: Suppose we have set the values of all the parents of node Xi to pa(Xi ). Node Xi is
dependent on evidence E given pa(Xi ) only when Xi is d-connecting with E given pa(Xi )
(Pearl, 1988). According to the definition of d-connectivity, this happens only when there
exists a member of Xi ’s descendants that belongs to the set of evidence nodes E. In other
words Xi ∈
/ Anc(E).
2
Theorem 2 is very important for the AIS-BN algorithm. It states essentially that
the ICPT tables of those nodes that are not ancestors of the evidence nodes are equal to
the CPT tables throughout the learning process. We only need to learn the ICPT tables
for the ancestors of the evidence nodes. Very often this can lead to significant savings in
computation. If, for example, all evidence nodes are root nodes, we have our ICPT tables for
every node already and the AIS-BN algorithm becomes identical to the likelihood weighting
algorithm. Without evidence, the AIS-BN algorithm becomes identical to the probabilistic
logic sampling algorithm.
It is worth pointing out that for some Xi , Pr(Xi |Pa (Xi ), E) (i.e., the ICPT table for
Xi ), can be easily calculated using exact methods. For example, when Xi is the only parent
of an evidence node Ej and Ej is the only child of Xi , the posterior probability distribution
of Xi is straightforward to compute exactly. Since the focus of the current paper is on
Input: Initialized importance function Pr0 (X\E), learning rate η(k).
Output: An estimated importance function PrS (X\E).
for stage k ← 0 to S do
1. Sample l points sk1 , sk2 , . . . , skl independently according to the current importance function Prk (X\E).
2. For every node Xi such that Xi ∈ X\E and Xi ∈
/ Anc(E) count score sums
corresponding to {xi , pa(Xi ), e} and estimate Pr0 (xi |pa(Xi ), e) based on sk1 ,
sk2 , . . . , skl .
3. Update Prk (X\E) according to the following formula:
Prk+1 (xi |pa(Xi ), e) =




Prk (xi |pa(Xi ), e) + η(k) · Pr0 (xi |pa(Xi ), e) − Prk (xi |pa(Xi ), e)
end for

Figure 3: The AIS-BN algorithm for learning the optimal importance function.
167

Cheng & Druzdzel

sampling, the test results reported in this paper do not include this improvement of the
AIS-BN algorithm.
Figure 3 lists an algorithm that implements Step 7 of the basic AIS-BN algorithm listed
in Figure 2. When we estimate Pr0 (xi |pa(Xi ), e), we only use the samples obtained at the
current stage. One reason for this is that the information obtained in previous stages has
been absorbed by Prk (X\E). The other reason is that in principle, each successive iteration
is more accurate than the previous one and the importance function is closer to the optimal
importance function. Thus, the samples generated by Prk+1 (X\E) are better than those
generated by Prk (X\E). Pr0 (Xi |pa(Xi ), e) − Prk (Xi |pa(Xi ), e) corresponds to the vector
of first partial derivatives in the direction of the maximum decrease in the error. η(k) is
a positive function that determines the learning rate. When η(k) = 0 (lower bound), we
do not update our importance function. When η(k) = 1 (upper bound), at each stage we
discard the old function. The convergence speed is directly related to η(k). If it is small,
the convergence will be very slow due to the large number of updating steps needed to
reach a local minimum. On the other hand, if it is large, convergence rate will be initially
very fast, but the algorithm will eventually start to oscillate and thus may not reach a
minimum. There are many papers in the field of neural network learning that discuss how
to choose the learning rate and let estimated importance function converge quickly to the
destination function. Any method that can improve learning rate should be applicable to
this algorithm. Currently, we use the following function proposed by Ritter et al. (1991)
 k/kmax

η(k) = a

b
a

,

(10)

where a is the initial learning rate and b is the learning rate in the last step. This function
has been reported to perform well in neural network learning (Ritter et al., 1991).
3.3 Heuristic Initialization in AIS-BN
The dimensionality of the problem of Bayesian network inference is equal to the number of
variables in a network, which in the networks considered in this paper can be very high.
As a result, the learning space of the optimal importance function is very large. Choice of
the initial importance function Pr0 (X\E) is an important factor affecting the learning —
an initial value of the importance function that is close to the optimal importance function
can greatly affect the speed of convergence. In this section, we present two heuristics that
help to achieve this goal.
Due to their explicit encoding of the structure of a decomposable joint probability distribution, Bayesian networks offer computational advantages compared to finite-dimensional
integrals. A possible first approximation of the optimal importance function is the prior
probability distribution over the network variables, Pr(X). We propose an improvement on
this initialization. We know that the effect of evidence nodes on a node will be attenuated
as the path length of that node to evidence nodes is increased (Henrion, 1989) and the
most affected nodes are the direct ancestors of the evidence nodes. Initializing the ICPT
tables of the parents of the evidence nodes to uniform distributions in our experience improves the convergence rate. Furthermore, the CPT tables of the parents of an evidence
node E may be not favorable to the observed state e if the probability of E = e without
168

Adaptive Importance Sampling in Bayesian Networks

any condition is less than a small value, such as Pr(E = e) < 1/(2 · nE ), where nE is the
number of outcomes of node E. Based on this observation, we change the CPT tables of
the parents of an evidence node E to uniform distributions in our experiment only when
Pr(E = e) < 1/(2 · nE ), otherwise we leave them unchanged. This kind of initialization
involves the knowledge of Pr(E = e), the marginal probability without evidence. Probabilistic logic sampling (Henrion, 1988) enhanced by Latin hypercube sampling (Cheng &
Druzdzel, 2000b) or quasi-Monte Carlo methods (Cheng & Druzdzel, 2000a) will produce a
very good estimate of Pr(E = e). This is an one-time effort that can be made at the model
building stage and is worth pursuing to any desired precision.
Another serious problem related to sampling are extremely small probabilities. Suppose
there exists a root node with a state s that has the prior probability Pr(s) = 0.0001. Let
the posterior probability of this state given evidence be Pr(s|E) = 0.8. A simple calculation
shows that if we update the importance function every 1, 000 samples, we can expect to
hit s only once every 10 updates. Thus s’s convergence rate will be very slow. We can
overcome this problem by setting a threshold θ and replacing every probability p < θ in the
network by θ.2 At the same time, we subtract (θ − p) from the largest probability in the
same conditional probability distribution. For example, the value of θ = 10/l, where l is
the updating interval, will allow us to sample 10 times more often in the first stage of the
algorithm. If this state turns out to be more likely (having a large weight), we can increase
its probability even more in order to converge to the correct answer faster. Considering
that we should avoid f (X)  |g(X) − I · f (X)| in an unimportant region as discussed in
Section 2.1, we need to make this threshold larger. We have found that the convergence
rate is quite sensitive to this threshold. Based on our empirical tests, we suggest to use
θ = 0.04 in networks whose maximum number of outcomes per node does not exceed five.
A smaller threshold might lead to fast convergence in some cases but slow convergence in
others. If one threshold does not work, changing it in a specific network will usually improve
convergence rate.
3.4 Selection of Parameters
There are several tunable parameters in the AIS-BN algorithm. We base the choice of
these parameters on the Central Limit Theorem (CLT). According to CLT, if Z1 , Z2 , . . . ,
Zn are independent and identically distributed random variables with E(Zi ) = µZ and
Var(Zi ) = σZ2 , i = 1, ..., n, then Z = (Z1 +...+Zn )/n is approximately normally distributed
when n is sufficiently large. Thus,
lim P (

n→∞





Z − µz 

µz

√
Z ∞
2
σZ / n
2
e−x /2 dx .
· t) = √
≥
µz
2π t

(11)

Although this approximation holds when n approaches infinity, CLT is known to be very
robust and lead to excellent approximations even for small n. The formula of Equation 11
is an (εr , δ) Relative Approximation, which is an estimate µ of µ that satisfies
P(

|µ − µ|
≥ εr ) ≤ δ .
µ

2. This initialization heuristic was apparently developed independently by Ortiz and Kaelbling (2000).

169

Cheng & Druzdzel

If δ has been fixed,

√
σZ / n
δ
εr =
· Φ−1
Z ( ),
µz
2

where ΦZ (z) = √12π z∞ e−x /2 dx. Since in our sampling problem, µz (corresponding to
√
Pr(E) in Figure 2) has been fixed, setting εr to a smaller value amounts to letting σZ / n
√
be smaller. So, we can adjust the parameters based on σZ / n, which can be estimated
bk
using Equation 3. It is also the theoretical intuition behind our recommendation wk ∝ 1/σ
in Section 3.1. While we expect that this should work well in most networks, no guarantees
can be given here — there exist always some extreme cases in sampling algorithms in which
no good estimate of variance can be obtained.
R

2

3.5 A Generalization of AIS-BN: The Problem of Estimating Pr(a|e)
A typical focus of systems based on Bayesian networks is the posterior probability of various
outcomes of individual variables given evidence, Pr(a|e). This can be generalized to the
computation of the posterior probability of a particular instantiation of a set of variables
given evidence, i.e., Pr(A = a|e). There are two methods that are capable of performing
this computation. The first method is very efficient at the expense of precision. The second
method is less efficient, but offers in general better convergence rates. Both methods are
based on Equation 7.
The first method reuses the samples generated to estimate Pr(e) in estimating Pr(a, e).
Estimation of Pr(a, e) amounts to counting the scored sum under the condition A = a.
The main advantage of this method is its efficiency — we can use the same set of samples
to estimate the posterior probability of any state of a subset of the network given evidence.
Its main disadvantage is that the variance of the estimated Pr(a, e) can be large, especially
when the numerical value of Pr(a|e) is extreme. This method is the most widely used
approach in the existing stochastic sampling algorithms.
The second method, used much more rarely (e.g., Cano et al., 1996; Pradhan & Dagum,
1996; Dagum & Luby, 1997), calls for estimating Pr(e) and Pr(a, e) separately. After
estimating Pr(e), an additional call to the algorithm is made for each instantiation a of
the set of variables of interest A. Pr(a, e) is estimated by sampling the network with the
set of observations e extended by A = a. The main advantage of this method is that it
is much better at reducing variance than the first method. Its main disadvantage is the
computational cost associated with sampling for possibly many combinations of states of
nodes of interest.
Cano et al. (1996) suggested a modified version of the second method. Suppose that we
are interested in the posterior distribution Pr(ai |e) for all possible values ai of A, i = 1,
2, . . . , k. We can estimate Pr(ai , e) for each i = 1, . . . , k separately, and use the value
Pk
i=1 Pr(ai , e) as an estimate for Pr(e). The assumption behind this approach is that the
estimate of Pr(e) will be very accurate because of the large sample from which it is drawn.
However, even if we can guarantee small variance in every Pr(ai , e), we cannot guarantee
that their sum will also have a small variance. So, in the AIS-BN algorithm we only use
the pure form of each of the methods. The algorithm listed in Figure 2 is based on the first
method when the optional computations in Steps 12 and 13 are performed. An algorithm
170

Adaptive Importance Sampling in Bayesian Networks

corresponding to the second method skips the optional steps and calls the basic AIS-BN
algorithm twice to estimate Pr(e) and Pr(a, e) separately.
The first method is very attractive because of its simplicity and possible computational
efficiency. However, as we have shown in Section 2.2, the performance of a sampling algorithm that uses just one set of samples (as in the first method above) to estimate Pr(a|e)
will deteriorate if the difference between the optimal importance functions for Pr(a,e) and
Pr(e) is large. If the main focus of the computation is high accuracy of the posterior probability distribution of a small number of nodes, we strongly recommend to use the algorithm
based on the second method. Also, this algorithm can be easily used to estimate confidence
intervals of the solution.

4. Experimental Results
In this section, we first describe the experimental method used in our tests. Our tests focus
on the CPCS network, which is one of the largest and most realistic networks available
and for which we know precisely which nodes are observable. We were, therefore, able
to generate very realistic test cases. Since the AIS-BN algorithm uses two initialization
heuristics, we designed an experiment that studies the contribution of each of these two
heuristics to the performance of the algorithm. To probe the extent of AIS-BN algorithm’s
excellent performance, we test it on several real and large networks.
4.1 Experimental Method
We performed empirical tests comparing the AIS-BN algorithm to the likelihood weighting
(LW) and the self-importance sampling (SIS) algorithms. The two algorithms are basically
the state of the art general purpose belief updating algorithms. The AA (Dagum et al.,
1995) and the bounded variance (Dagum & Luby, 1997) algorithms, which were suggested
by a reviewer, are essentially enhanced special purpose versions of the basic LW algorithm.
Our implementation of the three algorithms relied on essentially the same code with separate
functions only when the algorithms differed. It is fair to assume, therefore, that the observed
differences are purely due to the theoretical differences among the algorithms and not due to
the efficiency of implementation. In order to make the comparison of the AIS-BN algorithm
to LW and SIS fair, we used the first method of computation (Section 3.5), i.e., one that
relies on single sampling rather than calling the basic AIS-BN algorithm twice.
We measured the accuracy of approximation achieved by the simulation in terms of the
Mean Square Error (MSE), i.e., square root of the sum of square differences between Pr0 (xij )
and Pr(xij ), the sampled and the exact marginal probabilities of state j (j = 1, 2, . . . , ni )
of node i, such that Xi ∈
/ E. More precisely,
v
u
u
MSE = t P

1

Xi ∈N\E ni

X

ni
X

(Pr0 (xij ) − Pr(xij ))2 ,

Xi ∈N\E j=1

where N is the set of all nodes, E is the set of evidence nodes, and ni is the number of
outcomes of node i. In all diagrams, the reported MSE is averaged over 10 runs. We used
the clustering algorithm (Lauritzen & Spiegelhalter, 1988) to compute the gold standard
171

Cheng & Druzdzel

results for our comparisons of the mean square error. We performed all experiments on a
Pentium II, 333 MHz Windows computer.
While MSE is not perfect, it is the simplest way of capturing error that lends itself to
further theoretical analysis. For example, it is possible to derive analytically the idealized
convergence rate in terms of MSE, which, in turn, can be used to judge the quality of the
algorithm. MSE has been used in virtually all previous tests of sampling algorithms, which
allows interested readers to tie the current results to the past studies. A reviewer offered
an interesting suggestion of using cross-entropy or some other technique that weights small
changes near zero much more strongly than the equivalent size change in the middle of
the [0, 1] interval. Such measure would penalize the algorithm for imprecisions of possibly
several orders of magnitude in very small probabilities. While this idea is interesting, we
are not aware of any theoretical reasons as to why this measure would make a difference in
comparisons between AIS-BN, LW and SIS algorithms. The MSE, as we mentioned above,
will allow us to compare the empirically determined convergence rate to the theoretically
derived ideal convergence rate. Theoretically, the MSE is inversely proportional to the
square root of the sample size.
Since there are several tunable parameters used in the AIS-BN algorithm, we list the
values of the parameters used in our test: l = 2, 500; wk = 0 for k ≤ 9 and wk = 1
otherwise. We stopped the updating process in Step 7 of Figure 2 after k ≥ 10. In other
words, we used only the samples collected in the last step of the algorithm. The learning
parameters used in our algorithm are kmax = 10, a = 0.4, and b = 0.14 (see Equation 10).
We used an empirically determined value of the threshold θ = 0.04 (Section 3.3). We only
change the CPT tables of the parents of a special evidence node A to uniform distributions
when Pr(A = a) < 1/(2 · nA ). Some of the parameters are a matter of design decision
(e.g., the number of samples in our tests), others were chosen empirically. Although we
have found that these parameters may have different optimal values for different Bayesian
networks, we used the above values in all our tests of the AIS-BN algorithm described in
this paper. Since the same set of parameters led to spectacular improvement in accuracy
in all tested networks, it is fair to say that the superiority of the AIS-BN algorithm to the
other algorithms is not too sensitive to the values of the parameters.
For the SIS algorithm, wk = 1 by the design of the algorithm. We used l = 2, 500. The
updating function in Step 7 of Figure 1 is that of (Shwe et al., 1991; Cousins, Chen, &
Frisse, 1993):
Prknew (xi |pa(Xi ), e) =

c
Pr(xi |pa(Xi )) + k · Pr
current (xi |pa(Xi ), e) ,
1+k

c
where Pr(xi |pa(Xi )) is the original sampling distribution, Pr
current (xi |pa(Xi ), e) is an
equivalent of our ICPT tables estimator based on all currently available information, and
k is the updating step.

4.2 Results for the CPCS Network
The main network used in our tests is a subset of the CPCS (Computer-based Patient Case
Study) model (Pradhan et al., 1994), a large multiply-connected multi-layer network consisting of 422 multi-valued nodes and covering a subset of the domain of internal medicine.
172

Adaptive Importance Sampling in Bayesian Networks

Among the 422 nodes, 14 nodes describe diseases, 33 nodes describe history and risk factors, and the remaining 375 nodes describe various findings related to the diseases. The
CPCS network is among the largest real networks available to the research community at
the present time. The CPCS network contains many extreme probabilities, typically on
the order of 10−4 . Our analysis is based on a subset of 179 nodes of the CPCS network,
created by Max Henrion and Malcolm Pradhan. We used this smaller version in order to
be able to compute the exact solution for the purpose of measuring approximation error in
the sampling algorithms.
The AIS-BN algorithm has some learning overhead. The following comparison of execution time vs. number of samples may give the reader an idea of this overhead. Updating
the CPCS network with 20 evidence nodes on our system takes the AIS-BN algorithm a
total of 8.4 seconds to learn. It generates subsequently 3,640 samples per second, while the
SIS algorithm generates 2,631 samples per second, and the LW algorithm generates 4,167
samples per second. In order to remain conservative towards the AIS-BN algorithm, in all
our experiments we fixed the execution time of the algorithms (our limit was 60 seconds)
rather than the number of samples. In the CPCS network with 20 evidence nodes, in 60
seconds, AIS-BN generates about 188,000 samples, SIS generates about 158,000 samples
and LW generates about 250,000 samples.

12
100%
90%

10

80%

Frequency

8

70%
60%

6

50%
40%

4
30%
20%

2

10%
0

0%
1E-40

1E-34

1E-28

1E-22

1E-16

1E-10

Probability of evidence

Figure 4: The probability distribution of evidence Pr(E = e) in our experiments.
We generated a total of 75 test cases consisting of five sequences of 15 test cases each. We
ran each test case 10 times, each time with a different setting of the random number seed.
Each sequence had a progressively higher number of evidence nodes: 15, 20, 25, 30, and
35 evidence nodes respectively. The evidence nodes were chosen randomly (equiprobable
sampling without replacement) from those nodes that described various plausible medical
173

Cheng & Druzdzel

findings. Almost all of these nodes were leaf nodes in the network. We believe that this
constituted very realistic test cases for the algorithms. The distribution of the prior probability of evidence, Pr(E = e), across all test runs of our experiments is shown in Figure 4.
The least likely evidence was 5.54 × 10−42 , the most likely evidence was 1.37 × 10−9 , and
the median was 7 × 10−24 .

0.30

AIS-BN

SIS

LW

Mean Square Error

0.25

0.20

0.15

0.10

0.05

0.00
15

30

45

60

75

90

105

120

135

150

Sample time (seconds)

Figure 5: A typical plot of convergence of the tested sampling algorithms in our experiments
— Mean Square Error as a function of the execution time for a subset of the
CPCS network with 20 evidence nodes chosen randomly among plausible medical
observations (Pr(E = e) = 3.33 × 10−26 in this particular case) for the AIS-BN,
the SIS, and the LW algorithms. The curve for the AIS-BN algorithm is very
close to the horizontal axis.

Figures 5 and 6 show a typical plot of convergence of the tested sampling algorithms in
our experiments. The case illustrated involves updating the CPCS network with 20 evidence
nodes. We plot the MSE after the initial 15 seconds during which the algorithms start
converging. In particular, the learning step of the AIS-BN algorithm is usually completed
within the first 9 seconds. We ran the three algorithms in this case for 150 seconds rather
than the 60 seconds in the actual experiment in order to be able to observe a wider range of
convergence. The plot of the MSE for the AIS-BN algorithm almost touches the X axis in
Figure 5. Figure 6 shows the same plot in a finer scale in order to show more detail in the
AIS-BN convergence curve. It is clear that the AIS-BN algorithm dramatically improves
the convergence rate. We can also see that the results of AIS-BN converge to exact results
very fast as the sampling time increases. In the case captured in Figures 5 and 6, a tenfold
increase in the sampling time (after subtracting the overhead for the AIS-BN algorithm, it
174

Adaptive Importance Sampling in Bayesian Networks

0.0025

AIS-BN

Mean Square Error

0.0020

0.0015

0.0010

0.0005

0.0000
15

30

45

60

75

90

105

120

135

150

Sample time (seconds)

Figure 6: The lower part of the plot of Figure 5 showing the convergence of the AIS-BN
algorithm to correct posterior probabilities.

corresponds to a 21.5-fold increase in the number of samples) results in a 4.55-fold decrease
of the MSE (to MSE≤ 0.00048). The observed convergence of both SIS and LW algorithms
was poor. A tenfold increase in sampling time had practically no effect on accuracy. Please
note that this is a very typical case observed in our experiments.

“Absent”
“Mild”
“Moderate”
“Severe”

Original CPT
0.99631
0.00183
0.00093
0.00093

Exact ICPT
0.0037
0.1560
0.1190
0.7213

Learned ICPT
0.015
0.164
0.131
0.690

Table 1: A fragment of the conditional probability table of a node of the CPCS network
(node gasAcute, parents hepAcute=Mild and wbcTotTho=False) in Figure 6.

Figure 7 illustrates the ICPT learning process of the AIS-BN algorithm for the sample
case shown in Figure 6. The displayed conditional probabilities belong to the node gasAcute
which is a parent of two evidence nodes, difInfGasMuc and abdPaiExaMea. The node
gasAcute has four states: “absent,” “mild,” “moderate,” and “severe”, and two parents.
We randomly chose a combination of its parents’ states as our displayed configuration. The
original CPT for this configuration without evidence, the exact ICPT with evidence and
the learned ICPT with evidence are summarized numerically in Table 1. Figure 7 illustrates
175

Cheng & Druzdzel

0.8

Absent

Mild

Moderate

Severe

0.7

Probability

0.6
0.5
0.4
0.3
0.2
0.1
0
0

1

2

3

4

5

6

7

8

9

10

Updating step

Figure 7: Convergence of the conditional probabilities during the example run of the AISBN algorithm captured in Figure 6. The displayed fragment of the conditional
probability table belongs to node gasAcute which is a parent of one of the evidence
nodes.

that the learned importance conditional probabilities begin to converge to the exact results
stably after three updating steps. The learned probabilities in Step 10 are close to the
exact results. In this example, the difference between Pr(xi |pa(Xi ), e) and Pr(xi |pa(Xi )) is
very large. Sampling from Pr(xi |pa(Xi )) instead of Pr(xi |pa(Xi ), e) would introduce large
variance into our results.

µ
σ
min
median
max

AIS-BN
0.00082
0.00022
0.00049
0.00078
0.00184

SIS
0.110
0.076
0.0016
0.105
0.316

LW
0.148
0.093
0.0031
0.154
0.343

Table 2: Summary of the simulation results for all of the 75 simulation cases on the CPCS
network. Figure 8 shows each of the 75 cases graphically.

Figure 8 shows the MSE for all 75 test cases in our experiments with the summary
statistics in Table 2. A paired one-tailed t-test resulted in statistically highly significant
differences between the AIS-BN and SIS algorithms (p < 3.1 × 10−20 ), and also between
176

Adaptive Importance Sampling in Bayesian Networks

1

AIS-BN

SIS

LW

Mean Square Error

0.1

0.01

0.001

0.0001
1.4E-09 2.1E-14 3.1E-18 5.7E-22 6.7E-24 1.4E-27 1.3E-32 3.8E-39

Probability of evidence

Figure 8: Performance of the AIS-BN, SIS, and LW algorithms: Mean Square Error for
each of the 75 individual test cases plotted against the probability of evidence.
The sampling time is 60 seconds.

the SIS and LW algorithms (p < 1.7 × 10−8 ). As far as the magnitude of difference is
concerned, AIS-BN was significantly better than SIS. SIS was better than LW, but the
difference was small. The mean MSEs of SIS and LW algorithms were both greater than
0.1, which suggests that neither of these algorithms is suitable for large Bayesian networks.
The graph in Figure 9 shows the MSE ratio between the AIS-BN and SIS algorithms.
We can see that the percentage of the cases whose ratio was greater than 100 (two orders
of magnitude improvement!) is 60%. In other words, we obtained two orders of magnitude
improvement in MSE in more than half of the cases. In 80% cases, the ratio was greater
than 50. The smallest ratio in our experiments was 2.67, which happened when posterior
probabilities were dominated by the prior probabilities. In that case, even though the LW
and SIS algorithms converged very fast, their MSE was still far larger than that of AIS-BN.
Our next experiment aimed at showing how close the AIS-BN algorithm can approach
the best possible sampling results. If we know the optimal importance sampling function,
the convergence of the AIS-BN algorithm should be the same as that of forward sampling
without evidence. In other words, the results of the probabilistic logic sampling algorithm
without evidence approach the limit of how well stochastic sampling can perform. We ran
the logic sampling algorithm on the CPCS network without evidence mimicking the test
runs of the AIS-BN algorithm, i.e., 5 blocks of 15 runs, each repeated 10 times with a
different random number seed. The number of samples generated was equal to the average
number of samples generated by the AIS-BN algorithm for each series of 15 test runs.
177

Cheng & Druzdzel

18

100%

16

90%
80%

14

70%

Frequency

12

60%
10
50%
8
40%
6

30%

4

20%

2
0

10%
 

	
     

0%

The ratio of MSE between SIS and AIS-BN

Figure 9: The ratio of MSE between SIS and AIS-BN versus percentage.

We obtained the average MSE µ = 0.00057, with σ = 0.000025, min = 0.00052, and
max = 0.00065. The best results should be around this range. From Table 2, we can
see that the minimum MSE for the AIS-BN algorithm was 0.00049, within the range of
the optimal result. The mean MSE in AIS-BN is 0.00082, not too far from the optimal
results. The standard deviation, σ, is significantly larger in the AIS-BN algorithm, but
this is understandable given that the process of learning the optimal importance function is
heuristic in nature. It is not difficult to understand that there exist a difference between the
AIS-BN results and the optimal results. First, the AIS-BN algorithm in our tests updated
the sampling distribution only 10 times, which may be too few times to let it converge
to the optimal importance distribution. Second, even if the algorithm has converged to
the optimal importance distribution, the sampling algorithm will still let the parameter
oscillate around this distribution and there will be always small differences between the two
distributions.
Figure 10 shows the convergence rate for all tested cases for a four-fold increase in
sampling time (between 15 and 60 seconds). We adjusted the convergence ratio of the
AIS-BN algorithm by dividing it by a constant. According to Equation 3, the theoretically
expected convergence ratio for a four-fold increase in the number of samples should be
around two. There are about 96% cases among the AIS-BN runs whose ratio lays in
the interval (1.75, 2.25], in a sharp contrast to 11% and 13% cases in the SIS and LW
algorithms. The ratios of the remaining 4% cases in AIS-BN lay in the interval [2.25, 2.5].
In the SIS and LW algorithms, the percentage of cases whose ratio were smaller than 1.5
was 71% and 77% respectively. Less than 1.5 means that the number of samples was too
small to estimate variance and the results cannot be trusted. The ratio greater than 2.25
178

Adaptive Importance Sampling in Bayesian Networks

70%

AIS-BN

SIS

LW
59%

60%

Frequency

50%

40%

37%

36%
35%

30%
20%

20%

20%
19%

11%

9%9%

10%
5%

8%
5%

5%5%

3%
0%

0%

4%

3%

3%

4%

0%

0%
0.5 - 0.75 0.75 - 1.0 1.0 - 1.25 1.25 - 1.5 1.5 - 1.75 1.75 - 2.0 2.0 - 2.25 2.25 - 2.5 2.5 - 2.75 2.75 - 3.0

more

Convergence rate

Figure 10: The distribution of the convergence ratio of the AIS-BN, SIS, and LW algorithms when the number of samples increases four times.

means possibly that 60 seconds was long enough to estimate the variance, but 15 seconds
was too short.
4.3 The Role of AIS-BN Heuristics in Performance Improvement
From the above experimental results we can see that the AIS-BN algorithm can improve
the sampling performance significantly. Our next series of tests focused on studying the role
of the two AIS-BN initialization heuristics. The first is initializing the ICPT tables of the
parents of evidence to uniform distributions, denoted by U. The second is adjusting small
probabilities, denoted by S. We denote AIS-BN without any heuristic initialization method
to be the AIS algorithm. AIS+U+S equals AIS-BN. We compared the following versions
of the algorithms: SIS, AIS, SIS+U, AIS+U, SIS+S, AIS+S, SIS+U+S, AIS+U+S. All
algorithms with SIS used the same number of samples as SIS. All algorithms with AIS used
the same number of samples as AIS-BN. We tested these algorithms on the same 75 test
cases used in the previous experiment. Figure 11 shows the MSE for each of the sampling
algorithms with the summary statistics in Table 3. Even though the AIS algorithm is better
than the SIS algorithm, the difference is not as large as in case of the AIS+U, AIS+S, and
AIS-BN algorithms. It seems that heuristic initialization methods help much. The results
for the SIS+S, SIS+U, SIS+U+S algorithms suggest that although heuristic initialization
methods can improve performance, they alone cannot improve too much. It is fair to say
that significant performance improvement in the AIS-BN algorithm is coming from the
combination of AIS with heuristic methods, not any method alone. It is not difficult to
179

Cheng & Druzdzel

understand that, as only with good heuristic initialization methods is it possible to let the
learning process quickly exit oscillation areas. Although both S and U methods alone can
improve the performance, the improvement is moderate compared to the combination of
the two.

0.12

0.110

Mean Square Error

0.10

0.075

0.08

0.060
0.06

0.050

0.050

0.04

0.02

0.008
0.00151
0.00

   

  
	      
	 

       

0.00082
  	          

Different Algorithms

Figure 11: A comparison of different algorithms in the CPCS network. Each bar is based
on 75 test cases. The dotted bar shows the MSE for the SIS algorithm while
the gray bar shows the MSE for the AIS algorithm.

µ
σ
min
median
max

SIS
0.110
0.076
0.0016
0.105
0.316

AIS
0.060
0.049
0.00074
0.045
0.207

SIS+U
0.050
0.052
0.0011
0.031
0.212

AIS+U
0.0084
0.025
0.00058
0.0014
0.208

SIS+S
0.075
0.074
0.00072
0.052
0.279

AIS+S
0.0015
0.0016
0.00056
0.00087
0.0085

SIS+U+S
0.050
0.059
0.00086
0.028
0.265

AIS-BN
0.00082
0.00022
0.00049
0.00078
0.0018

Table 3: Summary of the simulation results for different algorithms in the CPCS network.

4.4 Results for Other Networks
In order to make sure that the AIS-BN algorithm performs well in general, we tested it on
two other large networks.
The first network that we used in our tests is the PathFinder network (Heckerman
et al., 1990), which is the core element of an expert system that assists surgical pathologists
180

Adaptive Importance Sampling in Bayesian Networks

with the diagnosis of lymph-node diseases. There are two versions of this network. We used
the larger version, consisting of 135 nodes. In contrast to the CPCS network, PathFinder
contains many conditional probabilities that are equal to 1, which reflects deterministic
relationships in certain settings. To make the sampling challenging, we randomly selected
20 evidence nodes from among the leaf nodes. Each of these was an observable node (David
Heckerman, personal communication). We verified in each case that the probability of so
selected evidence was not equal to zero.
We fixed the execution time of the algorithms to be 60 seconds. The learning overhead
for the AIS-BN algorithm in the PathFinder network was about 3.5 seconds. In 60
seconds, AIS-BN generated about 366,000 samples, SIS generated about 250,000 samples
and LW generated about 2,700,000 samples. The reason why LW could generate more than
10 times as many samples as SIS within the same amount of time is that the LW algorithm
terminates sample generation at a very early stage in many samples, when the weight of a
sample becomes zero. This is a result of determinism in the probability tables, mentioned
above. We will see that LW benefits greatly from generating more samples. The other
parameters used in AIS-BN were the same as those used in the CPCS network.
We tested 20 cases, each with randomly selected 20 evidence nodes. The reported MSE
for each case was averaged over 10 runs. Some of the runs of the SIS and LW algorithms did
not manage to generate any effective samples (the weight score sum was equal to zero). SIS
had only 75% effective runs and LW had only 89% effective runs, which means that in some
runs SIS and LW were unable to yield any information about the posterior distributions.
In all those cases, we discarded the run and only averaged over the effective runs. All
runs in the AIS-BN algorithm were effective. We report our experimental results with the
summary statistics in Table 4. From these data, we can see that the AIS-BN algorithm
is still significantly better than the SIS and LW algorithms. Since the LW algorithm can
generate more than ten times the number of samples than the SIS algorithm, its performance
is better than that of the SIS algorithm.

µ
σ
min
median
max
effective runs

AIS-BN
0.00050
0.00037
0.00025
0.00037
0.0017
200

SIS
0.166
0.107
0.00116
0.184
0.467
150

LW
0.089
0.0707
0.00080
0.0866
0.294
178

Table 4: Summary of the simulation results for all of the 20 simulation cases on the
PathFinder network.

The second network that we tested was one of the ANDES networks (Conati et al.,
1997). ANDES is an intelligent tutoring system for classical Newtonian physics that is
being developed by a team of researchers at the Learning Research and Development Center
at the University of Pittsburgh and researchers at the United States Naval Academy. The
student model in ANDES uses a Bayesian network to do long–term knowledge assessment,
181

Cheng & Druzdzel

plan recognition, and prediction of students’ actions during problem solving. We selected
the largest ANDES network that was available to us, consisting of 223 nodes.
In contrast to the previous two networks, the depth of the ANDES network was significantly larger and so was its connectivity. There were only 22 leaf nodes. It is quite
predictable that this kind of networks will pose difficulties to learning. We selected 20
evidence nodes randomly from the potential evidence nodes and tested 20 cases. All parameters were the same as those used in the CPCS network. We fixed the execution time
of the algorithms to be 60 seconds. The learning overhead for the AIS-BN algorithm in
the ANDES network was 13.4 seconds. In 60 seconds, AIS-BN generated about 114,000
samples, SIS generated about 98,000 samples and LW generated about 180,000 samples.
In this network, LW still can generate almost two times the number of samples generated
by the SIS algorithm.
We report our experimental results with the summary statistics in Table 5. The results
show that also in the ANDES network the AIS-BN algorithm was significantly better than
the SIS and LW algorithms. Since LW generated almost two times the number of samples
that were generated by the SIS algorithm, its performance was better than that of the SIS
algorithm.

µ
σ
min
median
max

AIS-BN
0.0059
0.0049
0.0023
0.0045
0.0237

SIS
0.0628
0.102
0.0028
0.0190
0.321

LW
0.0404
0.0539
0.0028
0.0198
0.221

Table 5: Summary of the simulation results for all of the 20 simulation cases on the ANDES
network.

While the AIS-BN algorithm is on the average an order of magnitude more precise
than the other two algorithms, the performance improvement is smaller than in the other
two networks. The reason why the performance improvement of the AIS-BN algorithm
over the SIS and LW algorithms in the ANDES network is smaller compared to that in
the CPCS and PathFinder networks is that: (1) The ANDES network used in our tests
was apparently not challenging enough for sampling algorithms in general. In the ANDES
network, SIS and LW also can perform well in some cases. The minimum MSE of SIS and
LW in our tested cases is almost the same as that of AIS-BN. (2) The number of samples
generated by AIS-BN in this network is significantly smaller than that in the previous
two networks and AIS-BN needs more time to learn. Although increasing the number of
samples will improve the performance of all three algorithms, it improves the performance
of AIS-BN more since the convergence ratio of the AIS-BN algorithm is usually larger than
that of SIS and LW (see Figure 10). (3) The parameters that we used in this network were
tuned for the CPCS network. (4) The large depth and fewer leaf nodes of the ANDES
network pose some difficulties to learning.
182

Adaptive Importance Sampling in Bayesian Networks

5. Discussion
There is a fundamental trade-off in the AIS-BN algorithm between the time spent on
learning the importance function and the time spent on sampling. Our current approach,
which we believe to be reasonable, is to stop learning at the point when the importance
function is good enough. In our experiments we stopped learning after 10 iterations.
There are several ways of improving the initialization of the conditional probability
tables at the outset of the AIS-BN algorithm. In the current version of the algorithm, we
initialize the ICPT table of every parent N of an evidence node E (N ∈ Pa(E), E ∈ E)
to the uniform distribution when Pr(E = e) < 1/(2 · nE ). This can be improved further.
We can extend the initialization to those nodes that are severely affected by the evidence.
They can be identified by examining the network structure and local CPTs.
We can view the learning process of the AIS-BN algorithm as a network rebuilding
process. The algorithm constructs a new network whose structure is the same as the original
network (except that we delete the evidence nodes and corresponding arcs). The constructed
network models the joint probability distribution ρ(X\E) in Equation 8, which approaches
the optimal importance function. We use the learned ρ0 to approximate this distribution.
If ρ0 approximates Pr(X|E) accurately enough, we can use this new network to solve other
approximate tasks, such as the problem of computing the Maximum A-Posterior assignment
(MAP) (Pearl, 1988), finding k most likely scenarios (Seroussi & Golmard, 1994), etc. A
large advantage of this approach is that we can solve each of these problems as if the network
had no evidence nodes.
We know that Markov blanket scoring can improve convergence rates in some sampling
algorithms (Shwe & Cooper, 1991). It may also be applied to the AIS-BN algorithm to
improve its convergence rate. According to Property 4 (Section 2.1), any technique that can
2
c
reduce the variance σPr
will reduce the variance of Pr(e)
and correspondingly improve
(e)
the sampling performance. Since the variance of stratified sampling (Rubinstein, 1981) is
never much worse than that of random sampling, and can be much better, it can improve the
convergence rate. We expect some other variance reduction methods in statistics, such as:
(i) the expected value of a random variable; (ii) antithetic variants correlations (stratified
sampling, Latin hypercube sampling, etc.); and (iii) systematic sampling, will also improve
the sampling performance.
Current learning algorithm used a simple approach. Some heuristic learning methods,
such as adjusting learning rates according to changes of the error (Jacobs, 1988), should
also be applicable to our algorithm. There are several tunable parameters in the AIS-BN
algorithm. Finding the optimal values of these parameters for any given network is another
interesting research topic.
It is worth observing that the plots presented in Figure 8 are fairly flat. In other words,
in our tests the convergence of the sampling algorithms did not depend too strongly on the
probability of evidence. This seems to contradict the common belief that forward sampling
schemes suffer from unlikely evidence. AIS-BN for one shows a fairly flat plot. The
convergence of the SIS and LW algorithms seems to decrease slightly with unlikely evidence.
It is possible that all three algorithms will perform much worse when the probability of
evidence drops below some threshold value, which our tests failed to approach. Until this
183

Cheng & Druzdzel

relationship has been studied carefully, we conjecture that the probability of evidence is not
a good measure of difficulty of approximate inference.
Given that the problem of approximating probabilistic inference is NP-hard, there exist
networks that will be challenging for any algorithm and we have no doubt that even the
AIS-BN algorithm will perform poorly on them. To the day, we have not found such
networks. There is one characteristic of networks that may be challenging to the AIS-BN
algorithm. In general, when the number of parameters that need to be learned by the AISBN algorithm increases, its performance will deteriorate. Nodes with many parents, for
example, are challenging to the AIS-BN learning algorithm, as it has to update the ICPT
tables under all combinations of the parent nodes. It is possible that conditional probability
distributions with causal independence properties, such as Noisy-OR distributions (Pearl,
1988; Henrion, 1989; Diez, 1993; Srinivas, 1993; Heckerman & Breese, 1994), common in
very large practical networks, can be treated differently and lead to considerable savings in
the learning time.
One direction of testing approximate algorithms, suggested to us by a reviewer, is to use
very large networks for which exact solution cannot be computed at all. In this case, one
can try to infer from the difference in variance at various stages of the algorithm whether
it is converging or not. This is a very interesting idea that is worth exploring, especially
when combined with theoretical work on stopping criteria in the line of the work of Dagum
and Luby (1997).

6. Conclusion
Computational complexity remains a major problem in application of probability theory
and decision theory in knowledge-based systems. It is important to develop schemes that
improve the performance of updating algorithms — even though the theoretically demonstrated worst case will remain NP–hard, many practical cases may become tractable.
In this paper, we studied importance sampling in Bayesian networks. After reviewing
the most important theoretical results related to importance sampling in finite-dimensional
integrals, we proposed a new algorithm for importance sampling in Bayesian networks that
we call adaptive importance sampling (AIS-BN). While the process of learning the optimal
importance function for the AIS-BN algorithm is computationally intractable, based on the
theory of importance sampling in finite-dimensional integrals we proposed several heuristics
that seem to work very well in practice. We proposed heuristic methods for initializing the
importance function that we have shown to accelerate the learning process, a smooth learning method for updating importance function using the structural advantages of Bayesian
networks, and a dynamic weighting function for combining samples from different stages
of the algorithm. All these methods help the AIS-BN algorithm to get fairly accurate
estimates of the posterior probabilities in a limited time. Of the two applied heuristics,
adjustment of small probabilities, seems to lead to the largest improvement in performance,
although the largest decrease in MSE is achieved by a combination of the two heuristics
with the AIS-BN algorithm.
The AIS-BN algorithm can lead to a dramatic improvement in the convergence rates in
large Bayesian networks with evidence compared to the existing state of the art algorithms.
We compared the performance of the AIS-BN algorithm to the performance of likelihood
184

Adaptive Importance Sampling in Bayesian Networks

weighting and self-importance sampling on a large practical model, the CPCS network,
with evidence as unlikely as 5.54 × 10−42 and typically 7 × 1.0−24 . In our experiments, we
observed that the AIS-BN algorithm was always better than likelihood weighting and selfimportance sampling and in over 60% of the cases it reached over two orders of magnitude
improvement in accuracy. Tests performed on the other two networks, PathFinder and
ANDES, yielded similar results.
Although there may exist other approximate algorithms that will prove superior to AISBN in networks with special structure or distribution, the AIS-BN algorithm is simple
and robust for general evidential reasoning problems in large multiply-connected Bayesian
networks.

Acknowledgments
We thank anonymous referees for several insightful comments that led to a substantial
improvement of the paper. This research was supported by the National Science Foundation
under Faculty Early Career Development (CAREER) Program, grant IRI–9624629, and by
the Air Force Office of Scientific Research grants F49620–97–1–0225 and F49620–00–1–
0112. An earlier version of this paper has received the 2000 School of Information Sciences
Robert R. Korfhage Award, University of Pittsburgh. Malcolm Pradhan and Max Henrion
of the Institute for Decision Systems Research shared with us the CPCS network with a kind
permission from the developers of the Internist system at the University of Pittsburgh. We
thank David Heckerman for the PathFinder network and Abigail Gerner for the ANDES
network used in our tests. All experimental data have been obtained using SMILE, a
Bayesian inference engine developed at the Decision Systems Laboratory and available at
http://www2.sis.pitt.edu/∼genie.

References
Cano, J. E., Hernandez, L. D., & Moral, S. (1996). Importance sampling algorithms for the
propagation of probabilities in belief networks. International Journal of Approximate
Reasoning, 15, 77–92.
Chavez, M. R., & Cooper, G. F. (1990). A randomized approximation algorithm for probabilistic inference on Bayesian belief networks. Networks, 20 (5), 661–685.
Cheng, J., & Druzdzel, M. J. (2000a). Computational investigations of low-discrepancy
sequences in simulation algorithms for Bayesian networks. In Proceedings of the Sixteenth Annual Conference on Uncertainty in Artificial Intelligence (UAI–2000), pp.
72–81 San Francisco, CA. Morgan Kaufmann Publishers.
Cheng, J., & Druzdzel, M. J. (2000b). Latin hypercube sampling in Bayesian networks. In
Proceedings of the 13th International Florida Artificial Intelligence Research Symposium Conference (FLAIRS-2000), pp. 287–292 Orlando, Florida.
Conati, C., Gertner, A. S., VanLehn, K., & Druzdzel, M. J. (1997). On-line student modeling
for coached problem solving using Bayesian networks. In Proceedings of the Sixth
185

Cheng & Druzdzel

International Conference on User Modeling (UM–96), pp. 231–242 Vienna, New York.
Springer Verlag.
Cooper, G. F. (1990). The computational complexity of probabilistic inference using Bayesian belief networks. Artificial Intelligence, 42 (2–3), 393–405.
Cousins, S. B., Chen, W., & Frisse, M. E. (1993). A tutorial introduction to stochastic
simulation algorithm for belief networks. In Artificial Intelligence in Medicine, chap. 5,
pp. 315–340. Elsevier Science Publishers B.V.
Dagum, P., Karp, R., Luby, M., & Ross, S. (1995). An optimal algorithm for Monte
Carlo estimation (extended abstract). In Proceedings of the 36th IEEE Symposium
on Foundations of Computer Science, pp. 142–149 Portland, Oregon.
Dagum, P., & Luby, M. (1993). Approximating probabilistic inference in Bayesian belief
networks is NP-hard. Artificial Intelligence, 60 (1), 141–153.
Dagum, P., & Luby, M. (1997). An optimal approximation algorithm for Bayesian inference.
Artificial Intelligence, 93, 1–27.
Diez, F. J. (1993). Parameter adjustment in Bayes networks. The generalized noisy ORgate. In Proceedings of the Ninth Annual Conference on Uncertainty in Artificial
Intelligence (UAI–93), pp. 99–105 San Francisco, CA. Morgan Kaufmann Publishers.
Fishman, G. S. (1995). Monte Carlo: concepts, algorithms, and applications. SpringerVerlag.
Fung, R., & Chang, K.-C. (1989). Weighing and integrating evidence for stochastic simulation in Bayesian networks. In Uncertainty in Artificial Intelligence 5, pp. 209–219
New York, N. Y. Elsevier Science Publishing Company, Inc.
Fung, R., & del Favero, B. (1994). Backward simulation in Bayesian networks. In Proceedings
of the Tenth Annual Conference on Uncertainty in Artificial Intelligence (UAI–94),
pp. 227–234 San Francisco, CA. Morgan Kaufmann Publishers.
Geman, S., & Geman, D. (1984). Stochastic relaxations, Gibbs distributions and the Bayesian restoration of images. IEEE Transactions on Pattern Analysis and Machine
Intelligence, 6 (6), 721–742.
Gilks, W., Richardson, S., & Spiegelhalter, D. (1996). Markov chain Monte Carlo in practice. Chapman and Hall.
Heckerman, D., & Breese, J. S. (1994). A new look at causal independence. In Proceedings
of the Tenth Annual Conference on Uncertainty in Artificial Intelligence (UAI–94),
pp. 286–292 San Mateo, CA. Morgan Kaufmann Publishers, Inc.
Heckerman, D. E., Horvitz, E. J., & Nathwani, B. N. (1990). Toward normative expert
systems: The Pathfinder project. Tech. rep. KSL–90–08, Medical Computer Science
Group, Section on Medical Informatics, Stanford University, Stanford, CA.
186

Adaptive Importance Sampling in Bayesian Networks

Henrion, M. (1988). Propagating uncertainty in Bayesian networks by probabilistic logic
sampling. In Uncertainty in Artificial Intellgience 2, pp. 149–163 New York, N. Y.
Elsevier Science Publishing Company, Inc.
Henrion, M. (1989). Some practical issues in constructing belief networks. In Kanal, L.,
Levitt, T., & Lemmer, J. (Eds.), Uncertainty in Artificial Intelligence 3, pp. 161–173.
Elsevier Science Publishers B.V., North Holland.
Henrion, M. (1991). Search-based methods to bound diagnostic probabilities in very large
belief nets. In Proceedings of the Seventh Annual Conference on Uncertainty in Artificial Intelligence (UAI–91), pp. 142–150 San Mateo, California. Morgan Kaufmann
Publishers.
Hernandez, L. D., Moral, S., & Antonio, S. (1998). A Monte Carlo algorithm for probabilistic
propagation in belief networks based on importance sampling and stratified simulation
techniques. International Journal of Approximate Reasoning, 18, 53–91.
Jacobs, R. A. (1988). Increased rates of convergence through learning rate adaptation.
Neural Networks, 1, 295–307.
Lauritzen, S. L., & Spiegelhalter, D. J. (1988). Local computations with probabilities on
graphical structures and their application to expert systems. Journal of the Royal
Statistical Society, Series B (Methodological), 50 (2), 157–224.
MacKay, D. (1998). Intro to Monte Carlo methods. In Jordan, M. I. (Ed.), Learning in
Graphical Models. The MIT Press, Cambridge, Massachusetts.
Ortiz, L. E., & Kaelbling, L. P. (2000). Adaptive importance sampling for estimation in
structured domains. In Proceedings of the Sixteenth Annual Conference on Uncertainty in Artificial Intelligence (UAI–2000), pp. 446–454 San Francisco, CA. Morgan
Kaufmann Publishers.
Pearl, J. (1986). Fusion, propagation, and structuring in belief networks. Artificial Intelligence, 29 (3), 241–288.
Pearl, J. (1987). Evidential reasoning using stochastic simulation of causal models. Artifical
Intelligence, 32, 245–257.
Pearl, J. (1988). Probabilistic Reasoning in Intelligent Systems: Networks of Plausible
Inference. Morgan Kaufmann Publishers, Inc., San Mateo, CA.
Pradhan, M., & Dagum, P. (1996). Optimal Monte Carlo inference. In Proceedings of the
Twelfth Annual Conference on Uncertainty in Artificial Intelligence (UAI–96), pp.
446–453 San Francisco, CA. Morgan Kaufmann Publishers.
Pradhan, M., Provan, G., Middleton, B., & Henrion, M. (1994). Knowledge engineering
for large belief networks. In Proceedings of the Tenth Annual Conference on Uncertainty in Artificial Intelligence (UAI–94), pp. 484–490 San Francisco, CA. Morgan
Kaufmann Publishers.
187

Cheng & Druzdzel

Ritter, H., Martinetz, T., & Schulten, K. (1991). Neuronale Netze. Addison-Wesley,
München.
Rubinstein, R. Y. (1981). Simulation and the Monte Carlo Method. John Wiley & Sons.
Seroussi, B., & Golmard, J. L. (1994). An algorithm directly finding the K most probable
configurations in Bayesian networks. International Journal of Approximate Reasoning,
11, 205–233.
Shachter, R. D., & Peot, M. A. (1989). Simulation approaches to general probabilistic
inference on belief networks. In Uncertainty in Artificial Intelligence 5, pp. 221–231
New York, N. Y. Elsevier Science Publishing Company, Inc.
Shwe, M. A., & Cooper, G. F. (1991). An empirical analysis of likelihood-weighting simulation on a large, multiply-connected medical belief network. Computers and Biomedical
Research, 24 (5), 453–475.
Shwe, M., Middleton, B., Heckerman, D., Henrion, M., Horvitz, E., & Lehmann, H. (1991).
Probabilistic diagnosis using a reformulation of the INTERNIST–1/QMR knowledge
base: I. The probabilistic model and inference algorithms. Methods of Information in
Medicine, 30 (4), 241–255.
Srinivas, S. (1993). A generalization of the noisy-OR model. In Proceedings of the Ninth
Annual Conference on Uncertainty in Artificial Intelligence (UAI–93), pp. 208–215
San Francisco, CA. Morgan Kaufmann Publishers.
York, J. (1992). Use of the Gibbs sampler in expert systems. Artificial Intelligence, 56,
115–130.

188

Journal of Articial Intelligence Research 13 (2000) 33{94

Submitted 9/99; published 8/00

Value-Function Approximations for Partially Observable
Markov Decision Processes

Milos Hauskrecht

milos@cs.brown.edu

Computer Science Department, Brown University
Box 1910, Brown University, Providence, RI 02912, USA

Abstract

Partially observable Markov decision processes (POMDPs) provide an elegant mathematical framework for modeling complex decision and planning problems in stochastic
domains in which states of the system are observable only indirectly, via a set of imperfect
or noisy observations. The modeling advantage of POMDPs, however, comes at a price |
exact methods for solving them are computationally very expensive and thus applicable
in practice only to very simple problems. We focus on eÆcient approximation (heuristic)
methods that attempt to alleviate the computational problem and trade o accuracy for
speed. We have two objectives here. First, we survey various approximation methods,
analyze their properties and relations and provide some new insights into their dierences.
Second, we present a number of new approximation methods and novel renements of existing techniques. The theoretical results are supported by experiments on a problem from
the agent navigation domain.
1. Introduction

Making decisions in dynamic environments requires careful evaluation of the cost and benets not only of the immediate action but also of choices we may have in the future. This
evaluation becomes harder when the eects of actions are stochastic, so that we must pursue and evaluate many possible outcomes in parallel. Typically, the problem becomes more
complex the further we look into the future. The situation becomes even worse when the
outcomes we can observe are imperfect or unreliable indicators of the underlying process
and special actions are needed to obtain more reliable information. Unfortunately, many
real-world decision problems fall into this category.
Consider, for example, a problem of patient management. The patient comes to the
hospital with an initial set of complaints. Only rarely do these allow the physician (decisionmaker) to diagnose the underlying disease with certainty, so that a number of disease options
generally remain open after the initial evaluation. The physician has multiple choices in
managing the patient. He/she can choose to do nothing (wait and see), order additional tests
and learn more about the patient state and disease, or proceed to a more radical treatment
(e.g. surgery). Making the right decision is not an easy task. The disease the patient suers
can progress over time and may become worse if the window of opportunity for a particular
eective treatment is missed. On the other hand, selection of the wrong treatment may
make the patient's condition worse, or may prevent applying the correct treatment later.
The result of the treatment is typically non-deterministic and more outcomes are possible.
In addition, both treatment and investigative choices come with dierent costs. Thus, in
c 2000 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Hauskrecht

a course of patient management, the decision-maker must carefully evaluate the costs and
benets of both current and future choices, as well as their interaction and ordering. Other
decision problems with similar characteristics | complex temporal cost-benet tradeos,
stochasticity, and partial observability of the underlying controlled process | include robot
navigation, target tracking, machine mantainance and replacement, and the like.
Sequential decision problems can be modeled as Markov decision processes (MDPs)
(Bellman, 1957; Howard, 1960; Puterman, 1994; Boutilier, Dean, & Hanks, 1999) and their
extensions. The model of choice for problems similar to patient management is the partially
observable Markov decision process (POMDP) (Drake, 1962; Astrom, 1965; Sondik, 1971;
Lovejoy, 1991b). The POMDP represents two sources of uncertainty: stochasticity of the
underlying controlled process (e.g. disease dynamics in the patient management problem),
and imperfect observability of its states via a set of noisy observations (e.g. symptoms,
ndings, results of tests). In addition, it lets us model in a uniform way both control and
information-gathering (investigative) actions, as well as their eects and cost-benet tradeos. Partial observability and the ability to model and reason with information-gathering
actions are the main features that distinguish the POMDP from the widely known fully
observable Markov decision process (Bellman, 1957; Howard, 1960).
Although useful from the modeling perspective, POMDPs have the disadvantage of being hard to solve (Papadimitriou & Tsitsiklis, 1987; Littman, 1996; Mundhenk, Goldsmith,
Lusena, & Allender, 1997; Madani, Hanks, & Condon, 1999), and optimal or -optimal solutions can be obtained in practice only for problems of low complexity. A challenging goal in
this research area is to exploit additional structural properties of the domain and/or suitable
approximations (heuristics) that can be used to obtain good solutions more eÆciently.
We focus here on heuristic approximation methods, in particular approximations based
on value functions. Important research issues in this area are the design of new and eÆcient
algorithms, as well as a better understanding of the existing techniques and their relations,
advantages and disadvantages. In this paper we address both of these issues. First, we
survey various value-function approximations, analyze their properties and relations and
provide some insights into their dierences. Second, we present a number of new methods
and novel renements of existing techniques. The theoretical results and ndings are also
supported empirically on a problem from the agent navigation domain.
2. Partially Observable Markov Decision Processes

A partially observable Markov decision process (POMDP) describes a stochastic control
process with partially observable (hidden) states. Formally, it corresponds to a tuple
(S; A; ; T; O; R) where S is a set of states, A is a set of actions,  is a set of observations,
T : S  A  S ! [0; 1] is a set of transition probabilities that describe the dynamic behavior
of the modeled environment, O : S  A   ! [0; 1] is a set of observation probabilities that
describe the relationships among observations, states and actions, and R : S  A  S ! IR
denotes a reward model that assigns rewards to state transitions and models payos associated with such transitions. In some instances the denition of a POMDP also includes an
a priori probability distribution over the set of initial states S .

34

Value-Function Approximations for POMDPs

o0

o t−2

o

ot

t−1

o t+1

st

a0

a t−2

s t+1

at

a t−1

r

t

Figure 1: Part of the inuence diagram describing a POMDP model. Rectangles correspond
to decision nodes (actions), circles to random variables (states) and diamonds to
reward nodes. Links represent the dependencies among the components. st ; at ; ot
and rt denote state, action, observation and reward at time t. Note that an action
at time t depends only on past observations and actions, not on states.

2.1 Objective Function
Given a POMDP, the goal is to construct a control policy that maximizes an objective (value)
function. The objective function combines partial (stepwise) rewards over multiple steps
using various kinds of decision models. Typically, the models are cumulative and based on
expectations. Two models are frequently used in practice:

 a nite-horizon model in which we maximize E (PTt=0 rt ), where rt is a reward obtained
at time t.

 an innite-horizon discounted model in which we maximize E (P1t=0  t rt ), where 0 <
 < 1 is a discount factor.

Note that POMDPs and cumulative decision models provide a rich language for modeling
various control objectives. For example, one can easily model goal-achievement tasks (a
specic goal must be reached) by giving a large reward for a transition to that state and
zero or smaller rewards for other transitions.
In this paper we focus primarily on discounted innite-horizon model. However, the
results can be easily applied also to the nite-horizon case.

2.2 Information State
In a POMDP the process states are hidden and we cannot observe them while making a
decision about the next action. Thus, our action choices are based only on the information available to us or on quantities derived from that information. This is illustrated in
the inuence diagram in Figure 1, where the action at time t depends only on previous
observations and actions, not on states. Quantities summarizing all information are called
information states. Complete information states represent a trivial case.
35

Hauskrecht

I t+1

It

st

I t+1

It

o t+1

s t+1

at

at

rt

rt

Figure 2: Inuence diagram for a POMDP with information states and corresponding
information-state MDP. Information states (It and It+1 ) are represented by
double-circled nodes. An action choice (rectangle) depends only on the current
information state.

Denition 1 (Complete information state). The complete information state at time t (denoted ItC ) consists of:




a prior belief b0 on states in S at time 0;
a complete history of actions and observations fo0 ; a0 ; o1 ; a1 ;    ; ot 1 ; at 1 ; ot g starting from time t = 0.

A sequence of information states denes a controlled Markov process that we call an
information-state Markov decision process or information-state MDP. The policy for the
information-state MDP is dened in terms of a control function  : I ! A mapping
information state space to actions. The new information state (It ) is a deterministic function
of the previous state (It 1 ), the last action (at 1 ) and the new observation (ot ):

It =  (It 1 ; ot ; at 1 ):
 : I    A ! I is the update function mapping the information state space, observations
and actions back to the information space.1 It is easy to see that one can always convert
the original POMDP into the information-state MDP by using complete information states.
The relation between the components of the two models and a sketch of a reduction of a
POMDP to an information-state MDP, are shown in Figure 2.
2.3 Bellman Equations for POMDPs
An information-state MDP for the innite-horizon discounted case is like a fully-observable
MDP and satises the standard xed-point (Bellman) equation:
(

)

X
V  (I ) = max (I; a) +  P (I 0 jI; a)V  (I 0 ) :
a2A
I0

(1)

1. In this paper,  denotes the generic update function. Thus we use the same symbol even if the information
state space is dierent.
36

Value-Function Approximations for POMDPs

P
t
Here, V  (I ) denotes the optimal value function maximizing E ( 1
t=0  rt ) for state I . (I; a)
is the expected one-step reward and equals
X
XX
(I; a) = (s; a)P (sjI ) =
R(s; a; s0 )P (s0 js; a)P (sjI ):
s2S
s2 S s0 2 S

(s; a) denotes an expected one-step reward for state s and action a.
Since the next information state I 0 =  (I; o; a) is a deterministic function of the previous
information state I , action a, and the observation o, the Equation 1 can be rewritten more
compactly by summing over all possible observations :
V  (I ) = max
a2A

(

X
s2S

(s; a)P (sjI ) + 

X
o2

)

P (ojI; a)V  ( (I; o; a)) :

(2)

The optimal policy (control function)  : I ! A selects the value-maximizing action
(

)

X
X
 (I ) = arg max
(s; a)P (sjI ) +  P (ojI; a)V  ( (I; o; a)) :
a2A s2S
o2

(3)

The value and control functions can be also expressed in terms of action-value functions
(Q-functions)
V  (I ) = max Q (I; a)
 (I ) = arg max Q (I; a);
a2A
a2A
X
X

Q (I; a) = (s; a)P (sjI ) +  P (ojI; a)V  ( (I; o; a)):
(4)
s2S
o2
A Q-function corresponds to the expected reward for chosing a xed action (a) in the rst
step and acting optimally afterwards.
2.3.1 Sufficient Statistics

To derive Equations 1|3 we implicitly used complete information states. However, as
remarked earlier, the information available to the decision-maker can be also summarized
by other quantities. We call them suÆcient information states. Such states must preserve
the necessary information content and also the Markov property of the information-state
decision process.

Denition 2 (SuÆcient information state process). Let I be an information state space
and  : I  A   ! I be an update function dening an information process It =
 (It 1 ; at 1 ; ot ). The process is suÆcient with regard to the optimal control when, for any
time step t, it satises
P (st jIt ) = P (st jItC )
P (ot jIt 1 ; at 1 ) = P (ot jItC 1 ; at 1 );
where ItC and ItC 1 are complete information states.
It is easy to see that Equations 1 | 3 for complete information states must hold also for
suÆcient information states. The key benet of suÆcient statistics is that they are often
37

Hauskrecht

easier to manipulate and store, since unlike complete histories, they may not expand with
time. For example, in the standard POMDP model it is suÆcient to work with belief states
that assign probabilities to every possible process state (Astrom, 1965).2 In this case the
Bellman equation reduces to:
(

V (b) = max
a2A

X
s2S

(s; a)b(s) + 

XX
o2 s2S

)

P (ojs; a)b(s)V ( (b; o; a)) ;

(5)

where the next-step belief state b0 is
X
b0 (s) =  (b; o; a)(s) = P (ojs; a)
P (sja; s0 )b(s0 ):
0
s 2S

 = 1=P (ojb; a) is a normalizing constant. This denes a belief-state MDP which is a
special case of a continuous-state MDP. Belief-state MDPs are also the primary focus of
our investigation in this paper.
2.3.2 Value-Function Mappings and their Properties

The Bellman equation 2 for the belief-state MDP can be also rewritten in the value-function
mapping form. Let V be a space of real-valued bounded functions V : I ! IR dened on
the belief information space I , and let h : I  A  B ! IR be dened as

h(b; a; V ) =

X

s2S

(s; a)b(s) + 

XX

o2 s2S

P (ojs; a)b(s)V ( (b; o; a)):

Now by dening the value function mapping H : V ! V as (HV )(b) = maxa2A h(b; a; V ),
the Bellman equation 2 for all information states can be written as V  = HV  : It is well
known that H (for MDPs) is an isotone mapping and that it is a contraction under the
supremum norm (see (Heyman & Sobel, 1984; Puterman, 1994)).

Denition 3 The mapping H is isotone, if V; U

2 V and V  U implies HV  HU .

Denition 4 Let k:k be a supremum norm. The mapping H is a contraction under the
supremum norm, if for all V; U 2 V , kHV HU k   kV U k holds for some 0   < 1.
2.4 Value Iteration
The optimal value function (Equation 2) or its approximation can be computed using dynamic programming techniques. The simplest approach is the value iteration (Bellman,
1957) shown in Figure 3. In this case, the optimal value function V  can be determined
in the limit by performing a sequence of value-iteration steps Vi = HVi 1 , where Vi is the
ith approximation of the value function (ith value function).3 The sequence of estimates
2. Models in which belief states are not suÆcient include POMDPs with observation and action channel
lags (see Hauskrecht (1997)).
3. We note that the same update V = HV 1 can be applied to solve the nite-horizon problem in a
standard way. The dierence is that V now stands for the i-steps-to-go value function and V0 represents
the value function (rewards) for end states.
i

i

i

38

Value-Function Approximations for POMDPs

Value iteration (P OMDP , )
initialize V for all b 2 I ;
repeat
V0 V;
update V HV 0 for all b 2 I ;
until supb j V (b) V 0 (b) j 
return V;
Figure 3: Value iteration procedure.
converges to the unique xed-point solution which is the direct consequence of Banach's
theorem for contraction mappings (see, for example, Puterman (1994)).
In practice, we stop the iteration well before it reaches the limit solution. The stopping
criterion we use in our algorithm (Figure 3) examines the maximum dierence between value
functions obtained in two consecutive steps | the so-called Bellman error (Puterman, 1994;
Littman, 1996). The algorithm stops when this quantity falls below the threshold . The
accuracy of the approximate solution (ith value function) with regard to V  can be expressed
in terms of the Bellman error .

Theorem 1 Let  = supb jVi (b) Vi 1 (b)j = kVi Vi 1 k be the magnitude of the Bellman
error. Then kVi V  k  1 and kVi 1 V  k  1   hold.
Then, to obtain the approximation of V  with precision Æ the Bellman error should fall
below Æ(1  ) .
2.4.1 Piecewise Linear and Convex Approximations of the Value Function

The major diÆculty in applying the value iteration (or dynamic programming) to beliefstate MDPs is that the belief space is innite and we need to compute an update Vi = HVi 1
for all of it. This poses the following threats: the value function for the ith step may not
be representable by nite means and/or computable in a nite number of steps.
To address this problem Sondik (Sondik, 1971; Smallwood & Sondik, 1973) showed that
one can guarantee the computability of the ith value function as well as its nite description
for a belief-state MDP by considering only piecewise linear and convex representations of
value function estimates (see Figure 4). In particular, Sondik showed that for a piecewise
linear and convex representation of Vi 1 , Vi = HVi 1 is computable and remains piecewise
linear and convex.

Theorem 2 (Piecewise linear and convex functions). Let V0 be an initial value function
that is piecewise linear and convex. Then the ith value function obtained after a nite
number of update steps for a belief-state MDP is also nite, piecewise linear and convex,
and is equal to:
X
Vi (b) = max b(s)i (s);
i 2 i s2S

where b and i are vectors of size jS j and i is a nite set of vectors (linear functions) i .
39

Hauskrecht

Vi (b)

0

1

b(s1 )

Figure 4: A piecewise linear and convex function for a POMDP with two process states
fs1 ; s2g. Note that b(s1) = 1 b(s2 ) holds for any belief state.

The key part of the proof is that we can express the update for the ith value function
in terms of linear functions i 1 dening Vi 1 :
8
<X

Vi (b) = max :
a2A

s2S

(s; a)b(s) + 

X

max

o2 i 1 2

i

"
X X
1 s0 2S s2S

#

9
=

P (s0 ; ojs; a)b(s) i 1 (s0 ); :

(6)

This leads to a piecewise linear and convex value function Vi that can be represented by
a nite set of linear functions i , one linear function for every combination of actions and
j
permutations of i 1 vectors of size jj. Let W = (a; fo1 ; ji 1 1 g; fo2 ; ji 2 1 g;    fojj ; i j1j g)
be such a combination. Then the linear function corresponding to it is dened as
XX
W
P (s0 ; ojs; a)ji 1 (s0 ):
(7)
i (s) = (s; a) + 
o2 s0 2S
o

Theorem 2 is the basis of the dynamic programming algorithm for nding the optimal
solution for the nite-horizon models and the value-iteration algorithm for nding nearoptimal approximations of V  for the discounted, innite-horizon model. Note, however,
that this result does not imply piecewise linearity of the optimal (xed-point) solution V  .
2.4.2 Algorithms for Computing Value-Function Updates

The key part of the value-iteration algorithm is the computation of value-function updates
Vi = HVi 1 . Assume an ith value function Vi that is represented by a nite number of linear
segments ( vectors). The total number of all its possible linear functions is jAjj i 1 jjj (one
for every combination of actions and permutations of i 1 vectors of size jj) and they can
be enumerated in O(jAjjS j2 j i 1 jjj ) time. However, the complete set of linear functions
is rarely needed: some of the linear functions are dominated by others and their omission
does not change the resulting piecewise linear and convex function. This is illustrated in
Figure 5.

40

Value-Function Approximations for POMDPs

Vi (b)

redundant linear
function
0

1

b(s1 )

Figure 5: Redundant linear function. The function does not dominate in any of the regions
of the belief space and can be excluded.

A linear function that can be eliminated without changing the resulting value function
solution is called redundant. Conversely, a linear function that singlehandedly achieves the
optimal value for at least one point of the belief space is called useful.4
For the sake of computational eÆciency it is important to make the size of the linear
function set as small as possible (keep only useful linear functions) over value-iteration steps.
There are two main approaches for computing useful linear functions. The rst approach is
based on a generate-and-test paradigm and is due to Sondik (1971) and Monahan (1982).
The idea here is to enumerate all possible linear functions rst, then test the usefulness
of linear functions in the set and prune all redundant vectors. Recent extensions of the
method interleave the generate and test stages and do early pruning on a set of partially
constructed linear functions (Zhang & Liu, 1997a; Cassandra, Littman, & Zhang, 1997;
Zhang & Lee, 1998).
The second approach builds on Sondik's idea of computing a useful linear function for a
single belief state (Sondik, 1971; Smallwood & Sondik, 1973), which can be done eÆciently.
The key problem here is to locate all belief points that seed useful linear functions and
dierent methods address this problem dierently. Methods that implement this idea are
Sondik's one- and two-pass algorithms (Sondik, 1971), Cheng's methods (Cheng, 1988), and
the Witness algorithm (Kaelbling, Littman, & Cassandra, 1999; Littman, 1996; Cassandra,
1998).
2.4.3 Limitations and Complexity

The major diÆculty in solving a belief-state MDP is that the complexity of a piecewise
linear and convex function can grow extremely fast with the number of update steps. More
specically, the size of a linear function set dening the function can grow exponentially (in
the number of observations) during a single update step. Then, assuming that the initial
value function
is linear, the number of linear functions dening the ith value function is
O(jAjjj 1 ).
i

4. In dening redundant and useful linear functions we assume that there are no linear function duplicates,
i.e. only one copy of the same linear function is kept in the set .
i

41

Hauskrecht

The potential growth of the size of the linear function set is not the only bad news. As
remarked earlier, a piecewise linear convex value function is usually less complex than the
worst case because many linear functions can be pruned away during updates. However,
it turned out that the task of identifying all useful linear functions is computationally
intractable as well (Littman, 1996). This means that one faces not only the potential
super-exponential growth of the number of useful linear functions, but also ineÆciencies
related to the identication of such vectors. This is a signicant drawback that makes the
exact methods applicable only to relatively simple problems.
The above analysis suggests that solving a POMDP problem is an intrinsically hard
task. Indeed, nding the optimal solution for the nite-horizon problem is PSPACE-hard
(Papadimitriou & Tsitsiklis, 1987). Finding the optimal solution for the discounted innitehorizon criterion is even harder. The corresponding decision problem has been shown to be
undecidable (Madani et al., 1999), and thus the optimal solution may not be computable.
2.4.4 Structural Refinements of the Basic Algorithm

The standard POMDP model uses a at state space and full transition and reward matrices.
However, in practice, problems often exhibit more structure and can be represented more
compactly, for example, using graphical models (Pearl, 1988; Lauritzen, 1996), most often
dynamic belief networks (Dean & Kanazawa, 1989; Kjaerul, 1992) or dynamic inuence
diagrams (Howard & Matheson, 1984; Tatman & Schachter, 1990).5 There are many ways
to take advantage of the problem structure to modify and improve exact algorithms. For
example, a renement of the basic Monahan algorithm to compact transition and reward
models has been studied by Boutilier and Poole (1996). A hybrid framework that combines
MDP-POMDP problem-solving techniques to take advantage of perfectly and partially observable components of the model and the subsequent value function decomposition was
proposed by Hauskrecht (1997, 1998, 2000). A similar approach with perfect information
about a region (subset of states) containing the actual underlying state was discussed by
Zhang and Liu (1997b, 1997a). Finally, Casta~non (1997) and Yost (1998) explore techniques
for solving large POMDPs that consist of a set of smaller, resource-coupled but otherwise
independent POMDPs.

2.5 Extracting Control Strategy
Value iteration allow us to compute an ith approximation of the value function Vi . However,
our ulimate goal is to nd the optimal control strategy  : I ! A or its close approximation.
Thus our focus here is on the problem of extraction of control strategies from the results of
value iteration.
2.5.1 Lookahead Design

The simplest way to dene the control function  : I ! A from the value function Vi is via
greedy one-step lookahead:
(

(b) = arg max
a2A

X
s2S

(s; a)b(s) + 

X
o2

)

P (ojb; a)Vi ( (b; o; a)) :

5. See the survey by Boutilier, Dean and Hanks (1999) for dierent ways to represent structured MDPs.
42

Value-Function Approximations for POMDPs

Vi (b)
a1
a3

a2
a1

0

b

1

b(s1 )

Figure 6: Direct control design. Every linear function dening Vi is associated with an
action. The action is selected if its linear function (or Q-function) is maximal.
As Vi represents only the ith approximation of the optimal value function, the question
arises how good the resulting controller really is.6 The following theorem (Puterman, 1994;
Williams & Baird, 1994; Littman, 1996) relates the accuracy of the (lookahead) controller
and the Bellman error.

Theorem 3 Let  = kVi Vi 1 k be the magnitude of the Bellman error. Let ViLA be the
expected reward for the lookahead controller designed for Vi . Then kViLA V  k  12 .
The bound can be used to construct the value-iteration routine that yields a lookahead
strategy with a minimum required precision. The result can be also extended to the kstep lookahead design in a straightforward way; with k steps, the error bound becomes
kViLA(k) V  k  (12) .
k

2.5.2 Direct Design

To extract the control action via lookahead essentially requires computing one full update.
Obviously, this can lead to unwanted delays in reaction times. In general, we can speed up
the response by remembering and using additional information. In particular, every linear
function dening Vi is associated with the choice of action (see Equation 7). The action is a
byproduct of methods for computing linear functions and no extra computation is required
to nd it. Then the action corresponding to the best linear function can be selected directly
for any belief state. The idea is illustrated in Figure 6.
The bound on the accuracy of the direct controller for the innite-horizon case can be
once again derived in terms of the magnitude of the Bellman error.

Theorem 4 Let  = kVi Vi 1 k be the magnitude of the Bellman error. Let ViDR be an
expected reward for the direct controller designed for Vi . Then kViDR V  k  12 .
The direct action choice is closely related to the notion of action-value function (or
Q-function). Analogously to Equation 4, the ith Q-function satises
Vi (b) = max Qi (b; a);
a2A

6. Note that the control action extracted via lookahead from V is optimal for (i + 1) steps-to-go and the
nite-horizon model. The main dierence here is that V is the optimal value function for i steps to go.
i

i

43

Hauskrecht

a1

o2
o1

a2

o1 , o

2

o2

o1 , o

a2

o1 , o2

2

o2
a2

a1

o1

o1

a2

o1 , o2
a1

Figure 7: A policy graph (nite-state machine) obtained after two value iteration steps.
Nodes correspond to linear functions (or states of the nite-state machine) and
links to dependencies between linear functions (transitions between states). Every
linear function (node) is associated with an action. To ensure that the policy can
be also applied to the innite-horizon problem, we add a cycle to the last state
(dashed line).

Qi (b; a) = R(b; a) + 

X
o2

P (ojb; a)Vi 1 ( (b; a; o)):

From this perspective, the direct strategy selects the action with the best (maximum) Qfunction for a given belief state.7
2.5.3 Finite-State Machine Design

A more complex renement of the above technique is to remember, for every linear function
in Vi , not only the action choice but also the choice of a linear function for the previous
step and to do this for all observations (see Equation 7). As the same idea can be applied
recursively to the linear functions for all previous steps, we can obtain a relatively complex
dependency structure relating linear functions in Vi ; Vi 1 ;    V0 , observations and actions
that itself represents a control strategy (Kaelbling et al., 1999).
To see this, we model the structure in graphical terms (Figure 7). Here dierent nodes
represent linear functions, actions associated with nodes correspond to optimizing actions,
links emanating from nodes correspond to dierent observations, and successor nodes correspond to linear functions paired with observations. Such graphs are also called policy graphs
(Kaelbling et al., 1999; Littman, 1996; Cassandra, 1998). One interpretation of the dependency structure is that it represents a collection of nite-state machines (FSMs) with many
possible initial states that implement a POMDP controller: nodes correspond to states of
the controller, actions to controls (outputs), and links to transitions conditioned on inputs
7. Williams and Baird (1994) also give results relating the accuracy of the direct Q-function controller to
the Bellman error of Q-functions.

44

Value-Function Approximations for POMDPs

(observations). The start state of the FSM controller is chosen greedily by selecting the
linear function (controller state) optimizing the value of an initial belief state.
The advantage of the nite-state machine representation of the strategy is that for the
rst i steps it works with observations directly; belief-state updates are not needed. This
contrasts with the other two policy models (lookahead and direct models), which must keep
track of the current belief state and update it over time in order to extract appropriate
control. The drawback of the approach is that the FSM controller is limited to i steps
that correspond to the number of value iteration steps performed. However, in the innitehorizon model the controller is expected to run for an innite number of steps. One way
to remedy this deciency is to extend the FSM structure and to create cycles that let us
visit controller states repeatedly. For example, adding a cycle transition to the end state of
the FSM controller in Figure 7 (dashed line) ensures that the controller is also applicable
to the innite-horizon problem.

2.6 Policy Iteration
An alternative method for nding the solution for the discounted innite-horizon problem
is policy iteration (Howard, 1960; Sondik, 1978). Policy iteration searches the policy space
and gradually improves the current control policy for one or more belief states. The method
consists of two steps performed iteratively:




policy evaluation: computes expected value for the current policy;
policy improvement: improves the current policy.

As we saw in Section 2.5, there are many ways to represent a control policy for a
POMDP. Here we restrict attention to a nite-state machine model in which observations
correspond to inputs and actions to outputs (Platzman, 1980; Hansen, 1998b; Kaelbling
et al., 1999).8
2.6.1 Finite-State Machine Controller

A nite-state machine (FSM) controller C = (M; ; A; ; ; ) for a POMDP is described
by a set of memory states M of the controller, a set of observations (inputs) , a set of
actions (outputs) A, a transition function  : M   ! M mapping states of the FSM to
next memory states given the observation, and an output function  : M ! A mapping
memory states to actions. A function : I0 ! M selects the initial memory state given
the initial information state. The initial information state corresponds either to a prior or
a posterior belief state at time t0 depending on the availability of an initial observation.
2.6.2 Policy Evaluation

The rst step of the policy iteration is policy evaluation. The most important property
of the FSM model is that the value function for a specic FSM strategy can be computed
eÆciently in the number of controller states M . The key to eÆcient computability is the
8. A policy-iteration algorithm in which policies are dened over the regions of the belief space was described
rst by Sondik (1978).
45

Hauskrecht

x2
o1
o2

a2

a1

x1

o2
o

o1
a1

o2

o1

x3

2

a2

o1

x4

Figure 8: An example of a four-state FSM policy. Nodes represent states, links transitions between states (conditioned on observations). Every memory state has an
associated control action (output).

fact that the value function for executing an FSM strategy from some memory state x is
linear (Platzman, 1980).9

Theorem 5 Let C be a nite-state machine controller with a set of memory states M .
The value function for applying C from a memory state x 2 M , V C (x; b), is linear. Value
functions for all x 2 M can be found by solving a system of linear equations with jS jjM j
variables.
We illustrate the main idea by an example. Assume an FSM controller with four memory
states fx1 ; x2 ; x3 ; x4 g, as in Figure 8, and a stochastic process with two hidden states S =
fs1 ; s2g. The value of the policy for an augmented state space S  M satises a system of
linear equations
V (x1 ; s1 ) = (s1 ; (x1 )) + 
V (x1 ; s2 ) = (s2 ; (x1 )) + 
V (x2 ; s1 ) = (s1 ; (x2 )) + 



V (x4 ; s2 ) = (s2 ; (x4 )) + 

XX

o2 s2S

XX

o2 s2S

XX

o2 s2S

XX
o2 s2S

P (o; sjs1 ; (x1 ))V ((x1 ; o); s)
P (o; sjs2 ; (x1 ))V ((x1 ; o); s)
P (o; sjs1 ; (x2 ))V ((x2 ; o); s)
P (o; sjs2 ; (x4 ))V ((x4 ; o); s);

where (x) is the action executed in x and (x; o) is the state to which one transits after
seeing an input (observation) o. Assuming we start the policy from the memory state x1 ,
the value of the policy is:
X
V C (x1 ; b) = V (x1 ; s)b(s):
s2S
9. The idea of linearity and eÆcient computability of the value functions for a xed FSM-based strategy
has been addressed recently in dierent contexts by a number of researchers (Littman, 1996; Cassandra,
1998; Hauskrecht, 1997; Hansen, 1998b; Kaelbling et al., 1999). However, the origins of the idea can be
traced to the earlier work by Platzman (1980).
46

Value-Function Approximations for POMDPs

Thus the value function is linear and can be computed eÆciently by solving a system of
linear equations.
Since in general the FSM controller can start from any memory state, we can always
choose the initial memory state greedily, maximizing the expected value of the result. In
such a case the optimal choice function is dened as:
(b) = arg max V C (x; b);
x2M
and the value for the FSM policy C and belief state b is:

V C (b) = max V C (x; b) = V C ( (b); b):
x2M

Note that the resulting value function for the strategy C is piecewise linear and convex and
represents expected rewards for following C . Since no strategy can perform better that the
optimal strategy, V C  V  must hold.
2.6.3 Policy Improvement

The policy-iteration method, searching the space of controllers, starts from an arbitrary initial policy and improves it gradually by rening its nite-state machine (FSM) description.
In particular, one keeps modifying the structure of the controller by adding or removing controller states (memory) and transitions. Let C and C 0 be an old and a new FSM controller.
In the improvement step we must satisfy
0

V C (b)  V C (b) for all b 2 I ;

9b 2 I such that V C 0 (b) > V C (b):
To guarantee the improvement, Hansen (1998a, 1998b) proposed a policy-iteration algorithm that relies on exact value function updates to obtain a new improved policy structure.10 The basic idea of the improvement is based on the observation that one can switch
back and forth between the FSM policy description and the piecewise-linear and convex
representation of a value function. In particular:

 the value function for an FSM policy is piecewise-linear and convex and every linear
function describing it corresponds to a memory state of a controller;

 individual linear functions comprising the new value function after an update can be
viewed as new memory states of an FSM policy, as described in Section 2.5.3.

This allows us to improve the policy by adding new memory states corresponding to linear
functions of the new value function obtained after the exact update. The technique can be
rened by removing some of the linear functions (memory states) whenever they are fully
dominated by one of the other linear functions.
10. A policy-iteration algorithm that exploits exact value function updates but works with policies dened
over the belief space was used earlier by Sondik (1978).

47

Hauskrecht

b 1,1

o1

o2

a1

b

a2

b 1,2

Figure 9: A two-step decision tree. Rectangles correspond to the decision nodes (moves
of the decision-maker) and circles to chance nodes (moves of the environment).
Black rectangles represent leaves of the tree. The reward for a specic path
is associated with every leaf of the tree. Decision nodes are associated with
information states obtained by following action and observation choices along the
path from the root of the tree. For example, b1;1 is a belief state obtained by
performing action a1 from the initial belief state b and observing observation o1 .

2.7 Forward (Decision Tree) Methods
The methods discussed so far assume no prior knowledge of the initial belief state and treat
all belief states as equally likely. However, if the initial state is known and xed, methods
can often be modied to take advantage of this fact. For example, for the nite-horizon
problem, only a nite number of belief states can be reached from a given initial state. In
this case it is very often easier to enumerate all possible histories (sequences of actions and
observations) and represent the problem using stochastic decision trees (Raia, 1970). An
example of a two-step decision tree is shown in Figure 9.
The algorithm for solving the stochastic decision tree basically mimics value-function
updates, but is restricted only to situations that can be reached from the initial belief state.
The key diÆculty here is that the number of all possible trajectories grows exponentially
with the horizon of interest.
2.7.1 Combining Dynamic-Programming and Decision-Tree Techniques

To solve a POMDP for a xed initial belief state, we can apply two strategies: one constructs the decision tree rst and then solves it, the other solves the problem in a backward
fashion via dynamic programming. Unfortunately, both these techniques are ineÆcient, one
suering from exponential growth in the decision tree size, the other from super-exponential
growth in the value function complexity. However, the two techniques can be combined in
48

Value-Function Approximations for POMDPs

a way that at least partially eliminates their disadvantages. The idea is based on the fact
that the two techniques work on the solution from two dierent sides (one forward and the
other backward) and the complexity for each of them worsens gradually. Then the solution
is to compute the complete kth value function using dynamic programming (value iteration)
and cover the remaining steps by forward decision-tree expansion.
Various modications of the above idea are possible. For example, one can often replace
exact dynamic programming with two more eÆcient approximations providing upper and
lower bounds of the value function. Then the decision tree must be expanded only when
the bounds are not suÆcient to determine the optimal action choice. A number of search
techniques developed in the AI literature (Korf, 1985) combined with branch-and-bound
pruning (Satia & Lave, 1973) can be applied to this type of problem. Several researchers
have experimented with them to solve POMDPs (Washington, 1996; Hauskrecht, 1997;
Hansen, 1998b). Other methods applicable to this problem are based on Monte-Carlo
sampling (Kearns, Mansour, & Ng, 1999; McAllester & Singh, 1999) and real-time dynamic
programming (Barto, Bradtke, & Singh, 1995; Dearden & Boutilier, 1997; Bonet & Gener,
1998).
2.7.2 Classical Planning Framework

POMDP problems with xed initial belief states and their solutions are closely related to
work in classical planning and its extensions to handle stochastic and partially observable
domains, particularly the work on BURIDAN and C-BURIDAN planners (Kushmerick,
Hanks, & Weld, 1995; Draper, Hanks, & Weld, 1994). The objective of these planners is
to maximize the probability of reaching some goal state. However, this task is similar to
the discounted reward task in terms of complexity, since a discounted reward model can
be converted into a goal-achievement model by introducing an absorbing state (Condon,
1992).
3. Heuristic Approximations

The key obstacle to wider application of the POMDP framework is the computational
complexity of POMDP problems. In particular, nding the optimal solution for the nitehorizon case is PSPACE-hard (Papadimitriou & Tsitsiklis, 1987) and the discounted innitehorizon case may not even be computable (Madani et al., 1999). One approach to such
problems is to approximate the solution to some -precision. Unfortunately, even this
remains intractable and in general POMDPs cannot be approximated eÆciently (Burago,
Rougemont, & Slissenko, 1996; Lusena, Goldsmith, & Mundhenk, 1998; Madani et al.,
1999). This is also the reason why only very simple problems can be solved optimally or
near-optimally in practice.
To alleviate the complexity problem, research in the POMDP area has focused on various
heuristic methods (or approximations without the error parameter) that are more eÆcient.11
Heuristic methods are also our focus here. Thus, when referring to approximations, we mean
heuristics, unless specically stated otherwise.
11. The quality of a heuristic approximation can be tested using the Bellman error, which requires one exact
update step. However, heuristic methods per se do not contain a precision parameter.

49

Hauskrecht

The many approximation methods and their combinations can be divided into two often
very closely related classes: value-function approximations and policy approximations.

3.1 Value-Function Approximations
The main idea of the value-function approximation approach is to approximate the optimal
value function V : I ! IR with a function Vb : I ! IR dened over the same information
space. Typically, the new function is of lower complexity (recall that the optimal or nearoptimal value function may consist of a large set of linear functions) and is easier to compute
than the exact solution. Approximations can be often formulated as dynamic programming
problems and can be expressed in terms of approximate value-function updates Hb . Thus,
to understand the dierences and advantages of various approximations and exact methods,
it is often suÆcient to analyze and compare their update rules.
3.1.1 Value-Function Bounds

Although heuristic approximations have no guaranteed precision, in many cases we are
able to say whether they overestimate or underestimate the optimal value function. The
information on bounds can be used in multiple ways. For example, upper- and lowerbounds can help in narrowing the range of the optimal value function, elimination of some
of the suboptimal actions and subsequent speed-ups of exact methods. Alternatively, one
can use knowledge of both value-function bounds to determine the accuracy of a controller
generated based on one of the bounds (see Section 3.1.3). Also, in some instances, a lower
bound alone is suÆcient to guarantee the control choice that always achieves an expected
reward at least as high as the one given by that bound (Section 4.7.2).
The bound property of dierent methods can be determined by examining the updates
and their bound relations.

Denition 5 (Upper bound). Let H be the exact value-function mapping and Hb its apb )(b)  (HV )(b) holds
proximation. We say that Hb upper-bounds H for some V when (HV
for every b 2 I .
An analogous denition can be constructed for the lower bound.
3.1.2 Convergence of Approximate Value Iteration

Let Hb be a value-function mapping representing an approximate update. Then the approximate value iteration computes the ith value function as Vbi = Hb Vbi 1 . The xed-point
solution Vc = Hb Vb  or its close approximation would then represent the intended output of
the approximation routine. The main problem with the iteration method is that in general
it can converge to unique or multiple solutions, diverge, or oscillate, depending on Hb and
the initial function Vb0 . Therefore, unique convergence cannot be guaranteed for an arbitrary
mapping Hb and the convergence of a specic approximation method must be proved.

Denition 6 (Convergence of Hb ). The value iteration with Hb converges for a value function V0 when limn!1(Hb n V0 ) exists.

50

Value-Function Approximations for POMDPs

Denition 7 (Unique convergence of Hb ). The value iteration converges uniquely for V
when for every V 2 V , limn!1(Hb n V ) exists and for all pairs V; U 2 V , limn!1(Hb n V ) =
limn!1(Hb n U ).
A suÆcient condition for the unique convergence is to show that Hb be a contraction. The
contraction and the bound properties of Hb can be combined, under additional conditions, to
show the convergence of the iterative approximation method to the bound. To address this
issue we present a theorem comparing xed-point solutions of two value-function mappings.
Theorem 6 Let H1 and H2 be two value-function mappings dened on V1 and V2 such that
1. H1 , H2 are contractions with xed points V1 , V2 ;
2. V1 2 V2 and H2 V1  H1 V1 = V1 ;

3. H2 is an isotone mapping.
Then V2  V1 holds.

Note that this theorem does not require that V1 and V2 cover the same space of value
functions. For example, V2 can cover all possible value functions of a belief-state MDP,
while V1 can be restricted to a space of piecewise linear and convex value functions. This
gives us some exibility in the design of iterative approximation algorithms for computing
value-function bounds. An analogous theorem also holds for the lower bound.
3.1.3 Control

Once the approximation of the value-function is available, it can be used to generate a
control strategy. In general, control solutions correspond to options presented in Section
2.5 and include lookahead, direct (Q-function) and nite-state machine designs.
A drawback of control strategies based on heuristic approximations is that they have
no precision guarantee. One way to nd the accuracy of such strategies is to do one exact
update of the value function approximation and adopt the result of Theorems 1 and 3 for
the Bellman error. An alternative solution to this problem is to bound the accuracy of
such controllers using the upper- and the lower-bound approximations of the optimal value
function. To illustrate this approach, we present and prove (in the Appendix) the following
theorem that relates the quality of bounds to the quality of a lookahead controller.

Theorem 7 Let VbU and VbL be upper and lower bounds of the optimal value function for
the discounted innite-horizon problem. Let  = supb jVbU (b) VbL (b)j = kVbU VbL k be
the maximum bound dierence. Then the expected reward for a lookahead controller Vb LA ,
constructed for either VbU or VbL , satises kVb LA V  k  (1(2 )) .
3.2 Policy Approximation
An alternative to value-function approximation is policy approximation. As shown earlier,
a strategy (controller) for a POMDP can be represented using a nite-state machine (FSM)
model. The policy iteration searches the space of all possible policies (FSMs) for the optimal or near-optimal solution. This space is usually enormous, which is the bottleneck of the
51

Hauskrecht

method. Thus, instead of searching the complete policy space, we can restrict our attention
only to its subspace that we believe to contain the optimal solution or a good approximation. Memoryless policies (Platzman, 1977; White & Scherer, 1994; Littman, 1994; Singh,
Jaakkola, & Jordan, 1994), policies based on truncated histories (Platzman, 1977; White &
Scherer, 1994; McCallum, 1995), or nite-state controllers with a xed number of memory
states (Platzman, 1980; Hauskrecht, 1997; Hansen, 1998a, 1998b) are all examples of a
policy-space restriction. In the following we consider only the nite-state machine model
(see Section 2.6.1), which is quite general; other models can be viewed as its special cases.
States of an FSM policy model represent the memory of the controller and, in general,
summarize information about past activities and observations. Thus, they are best viewed
as approximations of the information states, or as feature states. The transition model of
the controller () then approximates the update function of the information-state MDP
( ) and the output function of an FSM () approximates the control function () mapping
information states to actions. The important property of the model, as shown Section
2.6.2, is that the value function for a xed controller and xed initial memory state can be
obtained eÆciently by solving a system of linear equations (Platzman, 1980).
To apply the policy approximation approach we rst need to decide (1) how to restrict
a space of policies and (2) how to judge the policy quality.
A restriction frequently used is to consider only controllers with a xed number of
states, say k. Other structural restrictions further narrowing the space of policies can
restrict either the output function (choice of actions at dierent controller states), or the
transitions between the current and next states. In general, any heuristic or domain-related
insight may help in selecting the right biases.
Two dierent policies can yield value functions that are better in dierent regions of
the belief space. Thus, in order to decide which policy is the best, we need to dene the
importance of dierent regions and their combinations. There are multiple solutions to this.
For example, Platzman (1980) considers the worst-case measure and optimizes the worst
(minimal) value for all initial belief states. Let C be a space of FSM controllers satisfying
given restrictions. Then the quality of a policy under the worst case measure is:
max min max V C (x; b):
C 2C b2I x2M
C

Another option is to consider a distribution over all initial belief states and maximize the
expectation of their value function values. However, the most common objective is to choose
the policy that leads to the best value for a single initial belief state b0 :
max max V C (x; b0 ):
C 2C x2M
C

Finding the optimal policy for this case reduces to a combinatorial optimization problem.
Unfortunately, for all but trivial cases, even this problem is computationally intractable.
For example, the problem of nding the optimal policy for a memoryless case (only current observations are considered) is NP-hard (Littman, 1994). Thus, various heuristics are
typically applied to alleviate this diÆculty (Littman, 1994).

52

Value-Function Approximations for POMDPs

Value−function
approximations

Grid−based linear
function methods
Section 4.7

Fully observable MDP
approximations
Section 4.1

Fast informed bound
approximations
Section 4.2

Fixed strategy
approximations
Section 4.4

Curve−fitting
approximations
Section 4.6

Grid−based value interpolation−
extrapolation methods
Section 4.5

Unobservable MDP
approximations
Section 4.3

Figure 10: Value-function approximation methods.
3.2.1 Randomized Policies

By restricting the space of policies we simplify the policy optimization problem. On the
other hand, we simultaneously give up an opportunity to nd the best optimal policy, replacing it with the best restricted policy. Up to this point, we have considered only deterministic
policies with a xed number of internal controller states, that is, policies with deterministic
output and transition functions. However, nding the best deterministic policy is not always the best option: randomized policies, with randomized output and transition functions,
usually lead to the far better performance. The application of randomized (or stochastic)
policies to POMDPs was introduced by Platzman (1980). Essentially, any deterministic
policy can be represented as a randomized policy with a single action and transition, so
that the best randomized policy is no worse than the best deterministic policy. The dierence in control performance of two policies shows up most often in cases when the number
of states of the controller is relatively small compared to that in the optimal strategy.
The advantage of stochastic policies is that their space is larger and parameters of
the policy are continuous. Therefore the problem of nding the optimal stochastic policy
becomes a non-linear optimization problem and a variety of optimization methods can be
applied to solve it. An example is the gradient-based approach (see Meuleau et al., 1999).
4. Value-Function Approximation Methods

In this section we discuss in more depth value-function approximation methods. We focus on approximations with belief information space.12 We survey known techniques, but
also include a number of new methods and modications of existing methods. Figure 10
summarizes the methods covered. We describe the methods by means of update rules they
12. Alternative value-function approximations may work with complete histories of past actions and observations. Approximation methods used by White and Scherer (1994) are an example.

53

Hauskrecht

15

16

17

18

19

10

11

12

13

14

5

6

7

8

9

0

1

2

3

4

Moves

Sensors

Figure 11: Test example. The maze navigation problem: Maze20.
implement, which simplies their analysis and theoretical comparison. We focus on the following properties: the complexity of the dynamic-programming (value-iteration) updates;
the complexity of value functions each method uses; the ability of methods to bound the
exact update; the convergence of value iteration with approximate update rules; and the
control performance of related controllers. The results of the theoretical analysis are illustrated empirically on a problem from the agent-navigation domain. In addition, we use the
agent navigation problem to illustrate and give some intuitions on other characteristics of
methods with no theoretical underpinning. Thus, these results should not be generalized
to other problems or used to rank dierent methods.
Agent-Navigation Problem

Maze20 is a maze-navigation problem with 20 states, six actions and eight observations.
The maze (Figure 11) consists of 20 partially connected rooms (states) in which a robot
operates and collects rewards. The robot can move in four directions (north, south, east
and west) and can check for the presence of walls using its sensors. But, neither \move"
actions nor sensor inputs are perfect, so that the robot can end up moving in unintended
directions. The robot moves in an unintended direction with probability of 0.3 (0.15 for
each of the neighboring directions). A move into the wall keeps the robot in the same
position. Investigative actions help the robot to navigate by activating sensor inputs. Two
such investigative actions allow the robot to check inputs (presence of a wall) in the northsouth and east-west directions. Sensor accuracy in detecting walls is 0.75 for a two-wall
case (e.g. both north and south wall), 0.8 for a one-wall case (north or south) and 0.89 for
a no-wall case, with smaller probabilities for wrong perceptions.
The control objective is to maximize the expected discounted rewards with a discount
factor of 0.9. A small reward is given for every action not leading to bumping into the wall
(4 points for a move and 2 points for an investigative action), and one large reward (150
points) is given for achieving the special target room (indicated by the circle in the gure)
and recognizing it by performing one of the move actions. After doing that and collecting
the reward, the robot is placed at random in a new start position.
Although the Maze20 problem is of only moderate complexity with regard to the size
of state, action and observation spaces, its exact solution is beyond the reach of current
exact methods. The exact methods tried on the problem include the Witness algorithm
(Kaelbling et al., 1999), the incremental pruning algorithm (Cassandra et al., 1997)13 and
13. Many thanks to Anthony Cassandra for running these algorithms.
54

Value-Function Approximations for POMDPs

VMDP

*
VMDP
(s 1 )

*
VMDP
(s 2 )

VQMDP

Q *MDP(s 2 ,a 1 )

Q *MDP(s 1 ,a 1)

Q *MDP(s 2 ,a 2)

Q *MDP(s 1 ,a 2)

*
VPOMDP
0

*
VPOMDP
1

b(s1 )

0

(a)

1

b(s1 )

(b)

Figure 12: Approximations based on the fully observable version of a two state POMDP
(with states s1 ; s2 ): (a) the MDP approximation; (b) the QMDP approximation.
Values at extreme points of the belief space are solutions of the fully observable
MDP.
policy iteration with an FSM model (Hansen, 1998b). The main obstacle preventing these
algorithms from obtaining the optimal or close-to-optimal solution was the complexity of
the value function (the number of linear functions needed to describe it) and subsequent
running times and memory problems.

4.1 Approximations with Fully Observable MDP
Perhaps the simplest way to approximate the value function for a POMDP is to assume
that states of the process are fully observable (Astrom, 1965; Lovejoy, 1993). In that case
the optimal value function V  for a POMDP can be approximated as:
Vb (b) =

X

s2S

 (s);
b(s)VMDP

(8)

 (s) is the optimal value function for state s for the fully observable version of
where VMDP
the process. We refer to this approximation as to the MDP approximation. The idea of
the approximation is illustrated in Figure 12a. The resulting value function is linear and
is fully dened by values at extreme points of the belief simplex. These correspond to the
optimal values for the fully observable case. The main advantage of the approximation
is that the fully observable MDP (FOMDP) can be solved eÆciently for both the nitehorizon problem and discounted innite-horizon problems.14 The update step for the (fully
observable) MDP is:
8
<

ViMDP
(s; a) + 
+1 (s) = max
a :

X
s0 2S

9
=

P (s0 js; a)ViMDP (s0 ); :

14. The solution for the nite-state fully observable MDP and discounted innite-horizon criterion can be
found eÆciently by formulating an equivalent linear programming task (Bertsekas, 1995)

55

Hauskrecht

4.1.1 MDP Approximation

The MDP-approximation approach (Equation 8) can be also described in terms of valuefunction updates for the belief-space MDP. Although this step is strictly speaking redundant
here, it simplies the analysis and comparison of this approach to other approximations.
Let Vbi be a linear value function described by a vector MDP
corresponding to values
i
of ViMDP (s0 ) for all states s0 2 S . Then the (i + 1)th value function Vbi+1 is

Vbi+1 (b) =

X
s2S

2

b(s) max 4(s; a) + 
a2A

= (HMDP Vbi )(b):

X
s0 2S

3

P (s0 js; a)MDP
(s0 )5
i

Vbi+1 is described by a linear function with components
MDP
MDP
i+1 (s) = Vi+1 (s) = max
a

(

(s; a) + 

X
s2S

)

P (s0 js; a)MDP
(s0 ) :
i

The MDP-based rule HMDP can be also rewritten in a more general form that starts from
an arbitrary piecewise linear and convex value function Vi , represented by a set of linear
functions i :

Vbi+1 (b) =

X
s2S

8
<

b(s) max :(s; a) + 
a2A

X
s0 2S

9
=

P (s0 js; a) max i (s0 ); :
i 2

i

The application of the HMDP mapping always leads to a linear value function. The
update is easy to compute and takes O(jAjjS j2 + j i jjS j) time. This reduces to O(jAjjS j2 )
time when only MDP-based updates are strung together. As remarked earlier, the optimal
solution for the innite-horizon, discounted problem can be solved eÆciently via linear
programming.
The update for the MDP approximation upper-bounds the exact update, that is, H Vbi 
HMDP Vbi . We show this property later in Theorem 9, which covers more cases. The intuition
is that we cannot get a better solution with less information, and thus the fully observable
MDP must upper-bound the partially observable case.
4.1.2 Approximation with Q-Functions (QMDP)

A variant of the approximation based on the fully observable MDP uses Q-functions (Littman,
Cassandra, & Kaelbling, 1995):
X
Vb (b) = max b(s)QMDP (s; a);
a2A s2S
where
X
 (s0 )
QMDP (s; a) = (s; a) + 
P (s0 js; a)VMDP
s0 2S
is the optimal action-value function (Q-function) for the fully observable MDP. The QMDP
approximation Vb is piecewise linear and convex with jAj linear functions, each corresponding
56

Value-Function Approximations for POMDPs

to one action (Figure 12b). The QMDP update rule (for the belief state MDP) for Vbi with
linear functions ki 2 i is:

Vbi+1 (b) = max

X

a2A s2S

2

b(s) 4(s; a) + 

= (HQMDP Vbi )(b):

X
s0 2S

3

P (s0 js; a) max i (s0 )5
i 2

i

HQMDP generates a value function with jAj linear functions. The time complexity of the
update is the same as for the MDP-approximation case { O(jAjjS j2 + j i jjS j), which reduces
to O(jAjjS j2 ) time when only QMDP updates are used. HQMDP is a contraction mapping
and its xed-point solution can be found by solving the corresponding fully observable MDP.
The QMDP update upper-bounds the exact update. The bound is tighter than the
MDP update; that is, H Vbi  HQMDP Vbi  HMDP Vbi , as we prove later in Theorem 9. The
same inequalities hold for both xed-point solutions (through Theorem 6).
To illustrate the dierence in the quality of bounds for the MDP approximation and
the QMDP method, we use our Maze20 navigation problem. To measure the quality of a
bound we use the mean of value-function values. Since all belief states are equally important
we assume that they are uniformly distributed. We approximate this measure using the
average of values for a xed set of N = 2000 belief points. The points in the set were
selected uniformly at random at the beginning. Once the set was chosen, it was xed
and remained the same for all tests (here and later). Figure 13 shows the results of the
experiment; we include also results for the fast informed bound method that is presented in
the next section.15 Figure 13 also shows the running times of the methods. The methods
were implemented in Common Lisp and run on Sun Ultra 1 workstation.
4.1.3 Control

The MDP and the QMDP value-function approximations can be used to construct controllers based on one-step lookahead. In addition, the QMDP approximation is also suitable
for the direct control strategy, which selects an action corresponding to the best (highest
value) Q-function. Thus, the method is a special case of the Q-function approach discussed
in Section 3.1.3.16 The advantage of the direct QMDP method is that it is faster than both
lookahead designs. On other the hand, lookahead tends to improve the control performance.
This is shown in Figure 14, which compares the control performance of dierent controllers
on the Maze20 problem.
The quality of a policy b , with no preference towards a particular initial belief state, can
be measured by the mean of value-function values for b and uniformly distributed initial
belief states. We approximate this measure using the average of discounted rewards for

15. The condence interval limits for probability level 0.95 range in (0:45; 0:62) from their respective
average scores and this holds for all bound experiments in the paper. As these are relatively small we
do not include them in our graphs.
16. As pointed out by Littman et al. (1995), in some instances, the direct QMDP controller never selects
investigative actions, that is, actions that try to gain more information about the underlying process
state. Note, however, that this observation is not true in general and the QMDP-based controller with
direct action selection may select investigative actions, even though in the fully observable version of the
problem investigative actions are never chosen.
57

Hauskrecht

bound quality
MDP
approximation

QMDP
approximation

running times

fast informed
bound

60

140

50
time [sec]

score

120
100

40
30
20

80
10

60

0
MDP
approximation

40

QMDP
approximation

fast informed
bound

Figure 13: Comparison of the MDP, QMDP and fast informed bound approximations:
bound quality (left); running times (right). The bound-quality score is the
average value of the approximation for the set of 2000 belief points (chosen uniformly at random). As the methods upper-bound the optimal value function, we
ip the bound-quality graph so that longer bars indicate better approximations.
2000 control trajectories obtained for the xed set of N = 2000 initial belief states (selected
uniformly at random at the beginning). The trajectories were obtained through simulation
and were 60 steps long.17
To validate the comparison along the averaged performance scores, we must show that
these scores are not the result of randomness and that methods are indeed statistically
signicantly dierent. To do this we rely on pairwise signicance tests.18 To summarize the
obtained results, the score dierences of 1.54, 2.09 and 2.86 between any two methods (here
and also later in the paper) are suÆcient to reject the method with a lower score being
the better performer at signicance levels 0.05, 0.01 and 0.001 respectively.19 Error-bars in
Figure 14 reect the critical score dierence for the signicance level 0.05.
Figure 14 also shows the average reaction times for dierent controllers during these
experiments. The results show the clear dominance of the direct QMDP controller, which
need not do a lookahead in order to extract an action, compared to the other two MDPbased controllers.

4.2 Fast Informed Bound Method
Both the MDP and the QMDP approaches ignore partial observability and use the fully
observable MDP as a surrogate. To improve these approximations and account (at least to
17. The length of the trajectories (60 steps) for the Maze20 problem was chosen to ensure that our estimates
of (discounted) cumulative rewards are not far from the actual rewards for an innite number of steps.
18. An alternative way to compare two methods is to compute condence limits for their scores and inspect
their overlaps. However, in this case, the ability to distinguish two methods can be reduced due to
uctuations of scores for dierent initializations. For Maze20, condence interval limits for probability
level 0.95 range in (1:8; 2:3) from their respective average scores. This covers all control experiments
here and later. Pairwise tests eliminate the dependency by examining the dierences of individual values
and thus improve the discriminative power.
19. The critical score dierences listed cover the worst case combination. Thus, there may be some pairs for
which the smaller dierence would suÆce.
58

Value-Function Approximations for POMDPs

reaction times

control performance
0.025

70

lookahead
0.02

lookahead

lookahead

time [sec]

score

60
50

direct
40

lookahead

direct

0.015
0.01

30

0.005

20

0
MDP
approximation

direct

fast informed
bound

QMDP
approximation

lookahead

lookahead

MDP
approximation

direct

QMDP
approximation

fast informed
bound

Figure 14: Comparison of control performance of the MDP, QMDP and fast informed bound
methods: quality of control (left); reaction times (right). The quality-of-control
score is the average of discounted rewards for 2000 control trajectories obtained
for the xed set of 2000 initial belief states (selected uniformly at random).
Error-bars show the critical score dierence value (1.54) at which any two methods become statistically dierent at signicance level 0.05.
some degree) for partial observability we propose a new method { the fast informed bound
method. Let Vbi be a piecewise linear and convex value function represented by a set of linear
functions i . The new update is dened as
8
<X

XX

9
=

X

Vbi+1 (b) = max : (s; a)b(s) + 
max
P (s0 ; ojs; a)b(s)i (s0 );
a2A s2S

2
0
o2 s2S
s 2S
8
9
i

2

<X

i

X

X

= max : b(s) 4(s; a) + 
max
a2A s2S
o2  2 s0 2S
= (HF IB Vbi )(b):
i

i

3
=
P (s0 ; ojs; a)i (s0 )5;

The fast informed bound update can be obtained from the exact update by the following
derivation:
8
<X

X

XX

9
=

X

9
=

(H Vbi )(b) = max : (s; a)b(s) + 
max
P (s0 ; ojs; a)b(s)i (s0 );
a2A s2S

2
o2
s0 2S s2S
i

8
<X

 max
(s; a)b(s) + 
a2A :
s2S

X

2

XX

i

max

o2 s2S i 2 i s0 2S

X

X

P (s0 ; ojs; a)b(s)i (s0 );
3

= max b(s) 4(s; a) + 
max
P (s0 ; ojs; a)i (s0 )5
a2A s2S

2
o2
s0 2S
i

X

i

= max b(s)ai+1 (s)
a2A s2S
= (HF IB Vbi )(b):

The value function Vbi+1 = HF IB Vbi one obtains after an update is piecewise linear and
convex and consists of at most jAj dierent linear functions, each corresponding to one
59

Hauskrecht

action

ai+1 (s) = (s; a) + 

X

X
max
P (s0 ; ojs; a)i (s0 ):

2
o2
s0 2S
i

i

The HF IB update is eÆcient and can be computed in O(jAjjS j2 jjj i j) time. As the method
always outputs jAj linear functions, the computation can be done in O(jAj2 jS j2 jj) time,
when many HF IB updates are strung together. This is a signicant complexity reduction
compared to the exact approach: the latter can lead to a function consisting of jAjj i jjj
linear functions, which is exponential in the number of observations and in the worst case
takes O(jAjjS j2 j i jjj) time.
As HF IB updates are of polynomial complexity one can nd the approximation for the
nite-horizon case eÆciently. The open issue remains the problem of nding the solution
for the innite-horizon discounted case and its complexity. To address it we establish the
following theorem.

Theorem 8 A solution for the fast informed bound approximation can be found by solving
an MDP with jS jjAjjj states, jAj actions and the same discount factor  .
The full proof of the theorem is deferred to the Appendix. The key part of the proof
is the construction of an equivalent MDP with jS jjAjjj states representing HF IB updates.
Since a nite-state MDP can be solved through linear program conversion, the xed-point
solution for the fast informed bound update is computable eÆciently.
4.2.1 Fast Informed Bound versus Fully-Observable MDP Approximations

The fast informed update upper-bounds the exact update and is tighter than both the MDP
and the QMDP approximation updates.

Theorem 9 Let Vbi corresponds to a piecewise linear convex value function dened by i
linear functions. Then H Vbi  HF IB Vbi  HQMDP Vbi  HMDP Vbi :
The key trick in deriving the above result is to swap max and sum operators (the
proof is in the Appendix) and thus obtain both to the upper-bound inequalities and the
subsequent reduction in the complexity of update rules compared to the exact update.
This is also shown in Figure 15. The UMDP approximation, also included in Figure 15,
is discussed later in Section 4.3. Thus, the dierence among the methods boils down to
simple mathematical manipulations. Note that the same inequality relations as derived for
updates hold also for their xed-point solutions (through Theorem 6).
Figure 13a illustrates the improvement of the bound over MDP-based approximations
on the Maze20 problem. Note, however, that this improvement is paid for by the increased
running-time complexity (Figure 13b).
4.2.2 Control

The fast informed bound always outputs a piecewise linear and convex function, with one
linear function per action. This allows us to build a POMDP controller that selects an action
associated with the best (highest value) linear function directly. Figure 14 compares the
control performance of the direct and the lookahead controllers to the MDP and the QMDP
controllers. We see that the fast informed bound leads not only to tighter bounds but also
60

Value-Function Approximations for POMDPs

UMDP update:


V i + 1 ( b ) = m ax  ∑ b ( s ) ρ ( s , a ) + γ m ax ∑
a∈A
α i ∈Γ i s S
∈
 s ∈S

≤

exact update:


V i + 1 ( b ) = m ax  ∑ b ( s ) ρ ( s , a ) + γ
a∈A
 s ∈S

∑ P ( s ' | s , a )b ( s )α

s ' ∈S

∑ m ax ∑ ∑

o ∈Θ α i ∈Γ i s ∈ S s ' ∈S

≤

fast informed bound update:



V i + 1 ( b ) = m ax  ∑ b ( s )  ρ ( s , a ) + γ
a∈A

 s ∈S

∑ m ax ∑

∑


P ( s ' | s , a ) m ax α i ( s ' )  
α i ∈Γ i


≤

≤

MDP approx. update:


V i + 1 ( b ) = ∑ b ( s ) m ax  ρ ( s , a ) + γ
a∈A
s ∈S



P ( s ' , o | s , a )α i ( s ' )  


α i ∈Γ i s S
'∈

s ' ∈S


( s' ) 



P ( s ' , o | s , a )b ( s )α i ( s ' ) 


o ∈Θ

QMDP approx. update:


V i + 1 ( b ) = m ax  ∑ b ( s )  ρ ( s , a ) + γ
a ∈A
s
S

∈


i

∑

s '∈S


P ( s ' | s , a ) m ax α i ( s ' ) 
α i ∈Γ i


Figure 15: Relations between the exact update and the UMDP, the fast informed bound,
the QMDP and the MDP updates.
to improved control on average. However, we stress that currently there is no theoretical
underpinning for this observation and thus it may not be true for all belief states and any
problem.
4.2.3 Extensions of the Fast Informed Bound Method

The main idea of the fast informed bound method is to select the best linear function for
every observation and every current state separately. This diers from the exact update
where we seek a linear function that gives the best result for every observation and the
combination of all states. However, we observe that there is a great deal of middle ground
between these two extremes. Indeed, one can design an update rule that chooses optimal
(maximal) linear functions for disjoint sets of states separately. To illustrate this idea,
assume a partitioning S = fS1 ; S2 ;    ; Sm g of the state space S . The new update for S is:

Vbi+1 (b) = max
a2A

(

X
s2S

(s; a)b(s) + 

X

2
4 max

X X

o2 i 2 i s2S1 s0 2S

P (s0 ; ojs; a)b(s)i (s0 )+

X X
max
P (s0 ; ojs; a)b(s)i (s0 ) +    +
 2 s2S s0 2S
2
i

i

max

X X

i 2 i s2S s0 2S
m

39
=
P (s0 ; ojs; a)b(s)i (s0 )5;

It is easy to see that the update upper-bounds the exact update. Exploration of this
approach and various partitioning heuristics remains an interesting open research issue.
61

Hauskrecht

4.3 Approximation with Unobservable MDP
The MDP-approximation assumes full observability of POMDP states to obtain simpler
and more eÆcient updates. The other extreme is to discard all observations available to
the decision maker. An MDP with no observations is called unobservable MDP (UMDP)
and one may choose its value-function solution as an alternative approximation.
To nd the solution for the unobservable MDP, we derive the corresponding update
rule, HUMDP , similarly to the update for the partially observable case. HUMDP preserves
piecewise linearity and convexity of the value function and is a contraction. The update
equals:
8
<X

9
=

XX

Vbi+1 (b) = max : (s; a)b(s) +  max
P (s0 js; a)b(s)i (s0 );
a2A s2S
 2 s2S s0 2S
= (HUMDP Vbi )(b);
i

i

where i is a set of linear functions describing Vbi . Vbi+1 remains piecewise linear and convex
and it consists of at most j i jjAj linear functions. This is in contrast to the exact update,
where the number of possible vectors in the next step can grow exponentially in the number
of observations and leads to jAjj i jjj possible vectors. The time complexity of the update is
O(jAjjS j2 j i j). Thus, starting from Vb0 with one linear function, the running-time complexity
for k updates is bounded by O(jAjk jS j2 ). The problem of nding the optimal solution for the
unobservable MDP remains intractable: the nite-horizon case is NP-hard(Burago et al.,
1996), and the discounted innite-horizon case is undecidable (Madani et al., 1999). Thus,
it is usually not very useful approximation.
The update HUMDP lower-bounds the exact update, an intuitive result reecting the
fact that one cannot do better with less information. To provide some insight into how
the two updates are related, we do the following derivation, which also proves the bound
property in an elegant way:
8
<X

X

9
=

XX

(H Vbi )(b) = max : (s; a)b(s) + 
max
P (s0 ; ojs; a)b(s)i (s0 );
a2A s2S

2
o2
s0 2S s2S
8
9
i

<X

(s; a)b(s) +  max
 max
a2A :
2
s2S

8
<X

i

i

i

XXX

o2 s2S s0 2S

XX

=

P (s0 ; ojs; a)b(s)i (s0 );
9
=

= max : (s; a)b(s) +  max
P (s0 js; a)b(s)i (s0 );
a2A s2S
 2 s2S s0 2S
= (HUMDP Vbi )(b):
i

i

We see that the dierence between the exact and UMDP updates is that the max and
the sum over next-step observations are exchanged. This causes the choice of  vectors in
HUMDP to become independent of the observations. Once the sum and max operations are
exchanged, the observations can be marginalized out. Recall that the idea of swaps leads
to a number of approximation updates; see Figure 15 for their summary.
62

Value-Function Approximations for POMDPs

4.4 Fixed-Strategy Approximations
A nite-state machine (FSM) model is used primarily to dene a control strategy. Such a
strategy does not require belief state updates since it directly maps sequences of observations
to sequences of actions. The value function of an FSM strategy is piecewise linear and convex
and can be found eÆciently in the number of memory states (Section 2.6.1). While in the
policy iteration and policy approximation contexts the value function for a specic strategy
is used to quantify the goodness of the policy in the rst place, the value function alone can
be also used as a substitute for the optimal value function. In this case, the value function
(dened over the belief space) equals
V C (b) = max V C (x; b);
x2M

P

where V C (x; b) = s2S V C (x; s)b(s) is obtained by solving a set of jS jjM j linear equations
(Section 2.6.2). As remarked earlier, the value for the xed strategy lower-bounds the
optimal value function, that is V C  V  .
To simplify the comparison of the xed-strategy approximation to other approximations,
we can rewrite its solution also in terms of xed-strategy updates
8
<X

9
=

XXX

Vbi+1 (b) = max : (s; (x))b(s) + 
P (o; s0 js; (x))b(s)i ((x; o); s0 ); ;
x2M s2S
o2 s2S s0 2S
8
9
<X

2

XX

3

=

= max : b(s) 4(s; (x)) + 
P (o; s0 js; (x))i ((x; o); s0 )5;
x2M s2S
o2 s0 2S
= (HF SM Vbi )(b):

The value function Vbi is piecewise linear and convex and consists of jM j linear functions
i (x; :). For the innite-horizon discounted case i (x; s) represents the ith approximation of
V C (x; s). Note that the update can be applied to the nite-horizon case in a straightforward
way.
4.4.1 Quality of Control

Assume we have an FSM strategy and would like to use it as a substitute for the optimal
control policy. There are three dierent ways in which we can use it to extract the control.
The rst is to simply execute the strategy represented by the FSM. There is no need
to update belief states in this case. The second possibility is to choose linear functions
corresponding to dierent memory states and their associated actions repeatedly in every
step. We refer to such a controller as a direct (DR) controller. This approach requires
updating of belief states in every step. On the other hand its control performance is no
worse than that of the FSM control. The nal strategy discards all the information about
actions and extracts the policy by using the value function Vb (b) and one-step lookahead.
This method (LA) requires both belief state updates and lookaheads and leads to the worst
reactive time. Like DR, however, this strategy is guaranteed to be no worse than the FSM
controller. The following theorem relates the performances of the three controllers.
63

Hauskrecht

control performance

reaction times

70

0.025
60

50

time [sec]

score

0.02

40

0.015
0.01

30

0.005

20

0

0.0001
DR controller

FSM controller

FSM controller

LA controller

DR controller

LA controller

Figure 16: Comparison of three dierent controllers (FSM, DR and LA) for the Maze20
problem and a collection of one-action policies: control quality (left) and response time (right). Error-bars in the control performance graph indicate the
critical score dierence at which any two methods become statistically dierent
at signicance level 0.05.

Theorem 10 Let CF SM be an FSM controller. Let CDR and CLA be the direct and the
one-step-lookahead controllers constructed based on CF SM . Then V C (b)  V C (b) and
V C (b)  V C (b) hold for all belief states b 2 I .
Though we can prove that both the direct controller and the lookahead controller are
always better than the underlying FSM controller (see Appendix for the full proof of the
theorem), we cannot show the similar property between the rst two controllers for all initial
belief states. However, the lookahead approach typically tends to dominate, reecting the
usual trade-o between control quality and response time. We illustrate this trade-o on
our running Maze20 example and a collection of jAj one-action policies, each generating a
sequence of the same action. Control quality and response time results are shown in Figure
16. We see that the controller based on the FSM is the fastest of the three, but it is also the
worst in terms of control quality. On the other hand, the direct controller is slower (it needs
to update belief states in every step) but delivers better control. Finally, the lookahead
controller is the slowest and has the best control performance.
F SM

F SM

DR

LA

4.4.2 Selecting the FSM Model

The quality of a xed-strategy approximation depends strongly on the FSM model used.
The model can be provided a priori or constructed automatically. Techniques for automatic
construction of FSM policies correspond to a search problem in which either the complete or
a restricted space of policies is examined to nd the optimal or the near-optimal policy for
such a space. The search process is equivalent to policy approximations or policy-iteration
techniques discussed earlier in Sections 2.6 and 3.2.

64

Value-Function Approximations for POMDPs

4.5 Grid-Based Approximations with Value Interpolation-Extrapolation
A value function over a continuous belief space can be approximated by a nite set of grid
points G and an interpolation-extrapolation rule that estimates the value of an arbitrary
point of the belief space by relying only on the points of the grid and their associated values.
Denition 8 (Interpolation-extrapolation rule) Let f : I ! IR be a real-valued function
dened over the information space I , G = fbG1 ; bG2 ;    bGk g be a set of grid points and 	G =
f(bG1 ; f (bG1 )); (bG2 ; f (bG2 ));    ; (bGk ; f (bGk))g be a set of point-value pairs. A function RG :
I  (I  IR)jGj ! IR that estimates f at any point of the information space I using only
values associated with grid points is called an interpolation-extrapolation rule.
The main advantage of an interpolation-extrapolation model in estimating the true value
function is that it requires us to compute value updates only for a nite set of grid points
G. Let Vbi be the approximation of the ith value function. Then the approximation for the
(i + 1)th value function Vbi+1 can be obtained as
Vbi+1 (b) = RG (b; 	Gi+1 );
where values associated with every grid point bGj 2 G (and included in 	Gi+1 ) are:

'i+1 (bGj ) = (H Vbi )(bGj ) = max
a2A

(

(b; a) + 

X
o 2

P (ojb; a)Vbi ( (bGj ; o; a))

)

:

(9)

The grid-based update can also be described in terms of a value-function mapping HG :
Vbi+1 = HG Vbi . The complexity of such an update is O(jGjjAjjS j2 jjCEval (RG ; jGj)) where
CEval (RG ; jGj) is the computational cost of evaluating the interpolation-extrapolation rule
RG for jGj grid points. We show later (Section 4.5.3), that in some instances, the need to
evaluate the interpolation-extrapolation rule in every step can be eliminated.
4.5.1 A Family of Convex Rules

The number of all possible interpolation-extrapolation rules is enormous. We focus on a
set of convex rules that is a relatively small but very important subset of interpolationextrapolation rules.20

Denition 9 (Convex rule) Let f be some function dened over the space I , G = fbG1 ; bG2 ;    bGk g
be a set of grid points, and 	G = f(bG1 ; f (bG1 )); (bG2 ; f (bG2 ));    ; (bGk ; f (bGk ))g be a set of pointvalue pairs. The rule RG for estimating f using 	G is called convex when for every b 2 I ,
the value fb(b) is:
fb(b) = RG (b; 	G ) =
such that 0  bj  1 for every j = 1;    ; jGj, and

jGj
X
bj f (bj );

j =1

PjGj

b
j =1 j

= 1.

20. We note that convex rules used in our work are a special case of averagers introduced by Gordon (1995).
The dierence is minor; the denition of an averager includes a constant (independent of grid points and
their values) that is added to the convex combination.
65

Hauskrecht

The key property of convex rules is that their corresponding grid-based update HG is a
contraction in the max norm (Gordon, 1995). Thus, the approximate value iteration based
on HG converges to the unique xed-point solution. In addition, HG based on convex rules
is isotone.
4.5.2 Examples of Convex Rules

The family of convex rules includes approaches that are very commonly used in practice,
like nearest neighbor, kernel regression, linear point interpolations and many others.
Take, for example, the nearest-neighbor approach. The function for a belief point b is
estimated using the value at the grid point closest to it in terms of some distance metric M
dened over the belief space. Then, for any point b, there is exactly one nonzero parameter
bj = 1 such that k b bGj kM k b bGi kM holds for all i = 1; 2;    ; k. All other s are
zero. Assuming the Euclidean distance metric, the nearest-neighbor approach leads to a
piecewise constant approximation, in which regions with equal values correspond to regions
with a common nearest grid point.
The nearest neighbor estimates the function value by taking into an account only one
grid point and its value. Kernel regression expands upon this by using more grid points. It
adds up and weights their contributions (values) according to their distance from the target
point. For example, assuming Gaussian kernels, the weight for a grid point bGj is

bj =  exp kb

bG
k2M =22 ;
j

P
where  is a normalizing constant ensuring that jjG=1j bj = 1 and  is a parameter that
attens or narrows weight functions. For the Euclidean metric, the above kernel-regression
rule leads to a smooth approximation of the function.
Linear point interpolations are a subclass of convex rules that in addition to constraints
in Denition 9 satisfy
jGj
X
b = bj bGj :
j =1

That is, a belief point b is a convex combination of grid points and the s are the corresponding coeÆcients. Because the optimal value function for the POMDP is convex, the
new constraint is suÆcient to prove the upper-bound property of the approximation. In
general, there can be many dierent linear point-interpolations for a given grid. A challenging problem here is to nd the rule with the best approximation. We discuss these issues
in Section 4.5.7.
4.5.3 Conversion to a Grid-Based MDP

Assume that we would like to nd the approximation of the value function using our gridbased convex rule and grid-based update (Equation 9). We can view this process also as
a process of nding a sequence of values '1 (bGj ); '2 (bGj );    ; 'i (bGj );    for all grid-points
bGj 2 G. We show that in some instances the sequence of values can be computed without
applying an interpolation-extrapolation rule in every step. In such cases, the problem can
66

Value-Function Approximations for POMDPs

be converted into a fully observable MDP with states corresponding to grid-points G.21 We
call this MDP a grid-based MDP.

Theorem 11 Let G be a nite set of grid points and RG be a convex rule such that parameters bj are xed. Then the values of '(bGj ) for all bGj 2 G can be found by solving a fully
observable MDP with jGj states and the same discount factor  .
Proof For any grid point bGj we can write:
(

'i+1 (bGj ) = max (bGj ; a) + 
a2A

8
<

X
o2

X

P (ojbGj ; a)VbiG ( (bGj ; a; o))

)

39
jGj
=
X
G )5
P (ojbGj ; a) 4 o;a
'
(
b
j;k i k ;
2

= max :(bGj ; a) + 
a2A
o2
k=1
8
"
#9
jGj
<h
=
i
X
X
= max : (bGj ; a) +  'Gi (bGk )
P (ojbGj ; a)o;a
j;k ;
a2A
k=1
o2
P

G G
Now denoting [ o2 P (ojbj ; a)G o;a
j;k ] as P (bk jbj ; a), we can construct a fully observable
MDP problem with states corresponding to grid points G and the same discount factor  .
The update step equals:

8
<

'i+1 (bGj ) = max :(bGj ; a) + 
a2A

jGj
X
k=1

9
=

P (bGk jbGj ; a)'Gi (bGk ); :

P
The prerequisite 0  bj  1 for every j = 1;    ; jGj and jjG=1j bj = 1 guarantees that
P (bGk jbGj ; a) can be interpreted as true probabilities. Thus, one can compute values '(bGj )
by solving the equivalent fully-observable MDP. 2
4.5.4 Solving Grid-Based Approximations

The idea of converting a grid-based approximation into a grid-based MDP is a basis of
our simple but very powerful approximation algorithm. Briey, the key here is to nd
the parameters (transition probabilities and rewards) of a new MDP model and then solve
it. This process is relatively easy if the parameters  used to interpolate-extrapolate the
value of a non-grid point are xed (the assumption of Theorem 11). In such a case, we
can determine parameters of the new MDP eÆciently in one step, for any grid set G. The
nearest neighbor or the kernel regression are examples of rules with this property. Note that
this leads to polynomial-time algorithms for nding values for all grid points (recall that an
MDP can be solved eÆciently for both nite and discounted, innite-horizon criteria).
The problem in solving grid-based approximation arises only when the parameters 
used in the interpolation-extrapolation are not xed and are subject to the optimization
itself. This happens, for example, when there are multiple ways of interpolating a value
21. We note that a similar result has been also proved independently by Gordon (1995).
67

Hauskrecht

at some point of the belief space and we would like to nd the best interpolation (leading
to the best values) for all grid points in G. In such a case, the corresponding \optimal"
grid-based MDP cannot be found in a single step and iterative approximation, solving a
sequence of grid-based MDPs, is usually needed. The worst-case complexity of this problem
remains an open question.
4.5.5 Constructing Grids

An issue we have not touched on so far is the selection of grids. There are multiple ways to
select grids. We divide them into two classes { regular and non-regular grids.
Regular grids (Lovejoy, 1991a) partition the belief space evenly into equal-size regions.22
The main advantage of regular grids is the simplicity with which we can locate grid points
in the neighborhood of any belief point. The disadvantage of regular grids is that they
are restricted to a specic number of points, and any increase in grid resolution is paid for
in an exponential increase in the grid size. For example, a sequence of regular grids for a
20-dimensional belief space (corresponds to a POMDP with 20 states) consists of 20, 210,
1540, 8855, 42504,    grid points.23 This prevents one from using the method with higher
grid resolutions for problems with larger state spaces.
Non-regular grids are unrestricted and thus provide for more exibility when grid resolution must be increased adaptively. On the other hand, due to irregularities, methods for
locating grid points adjacent to an arbitrary belief point are usually more complex when
compared to regular grids.
4.5.6 Linear Point Interpolation

The fact that the optimal value function V  is convex for a belief-state MDPs can be used
to show that the approximation based on linear point interpolation always upper-bounds
the exact solution (Lovejoy, 1991a, 1993). Neither kernel regression nor nearest neighbor
can guarantee us any bound.

Theorem 12 (Upper bound property of a grid-based point interpolation update). Let Vbi be
a convex value function. Then H Vbi  HG Vbi .
The upper-bound property of HG update for convex value functions follows directly
from Jensen's inequality. The convergence to an upper-bound follows from Theorem 6.
Note that the point-interpolation update imposes an additional constraint on the choice
of grid points. In particular, it is easy to see that any valid grid must also include extreme points of the belief simplex (extreme points correspond to (1; 0; 0;    ); (0; 1; 0;    ),
22. Regular grids used by Lovejoy (1991a) are based on Freudenthal triangulation (Eaves, 1984). Essentially, this is the same idea as used to partition evenly the n-dimensional subspace of IR . In fact, an
aÆne transform allows us to map isomorphically grid points in the belief space to grid points in the
n-dimensional space (Lovejoy, 1991a).
23. The number of points in the regular grid sequence is given by (Lovejoy, 1991a):
n

+ jS j 1)!
;
jGj = (M
M !(jS j 1)!

where M = 1; 2;    is a grid renement parameter.

68

Value-Function Approximations for POMDPs

etc.). Without extreme points one would be unable to cover the whole belief space via
interpolation. Nearest neighbor and kernel regression impose no restrictions on the grid.
4.5.7 Finding the best interpolation

In a general, there are multiple ways to interpolate a point of a belief space. Our objective
is to nd the best interpolation, that is, the one that leads to the tightest upper bound of
the optimal value function.
Let b be a belief point and f(bj ; f (bj ))jbj 2 Gg a set of grid-value pairs. Then the best
interpolation for point b is:
jGj
X
fb(b) = min j f (bj )
 j =1
P
= 1;    ; jGj, jjG=1j j

P
subject to 0  j  1 for all j
= 1, and b = jjG=1j j bGj .
This is a linear optimization problem. Although it can be solved in polynomial time
(using linear programming techniques), the computational cost of doing this is still relatively
large, especially considering the fact that the optimization must be repeated many times.
To alleviate this problem we seek more eÆcient ways of nding the interpolation, sacricing
the optimality.
One way to nd a (suboptimal) interpolation quickly is to apply regular grids proposed
by Lovejoy (1991a). In this case the value at a belief point is approximated using the
convex combination of grid points closest to it. The approximation leads to piecewise linear
and convex value functions. As all interpolations are xed here, the problem of nding
the approximation can be converted into an equivalent grid-based MDP and solved as a
nite-state MDP. However, as pointed in the previous section, the regular grids must use a
specic number of grid points and any increase in the resolution of a grid is paid for by an
exponential increase in the grid size. This feature makes the method less attractive when
we have a problem with a large state space and we need to achieve high grid resolution.24
In the present work we focus on non-regular (or arbitrary) grids. We propose an interpolation approach that searches a limited space of interpolations and is guaranteed to run
in time linear in the size of the grid. The idea of the approach is to interpolate a point
b of a belief space of dimension jS j with a set of grid points that consists of an arbitrary
grid point b0 2 G and jS j 1 extreme points of the belief simplex. The coeÆcients of this
interpolation can be found eÆciently and we search for the best such interpolation. Let
b0 2 G be a grid point dening one such interpolation. Then the value at point b satises
0

bb
Vbi (b) = min
0 Vi (b);
b 2G

where Vbib0 is the value of the interpolation for the grid point b0 . Figure 17 illustrates the
resulting approximation. The function is characterized by its \sawtooth" shape, which is
inuenced by the choice of the interpolating set.
To nd the best value-function solution or its close approximation we can apply a value
iteration procedure in which we search for the best interpolation after every update step.
24. One solution to this problem may be to use adaptive regular grids in which grid resolution is increased
only in some parts of the belief space. We leave this idea for future work.
69

Hauskrecht

V(b)

V(b)
*

V(b)

0 b
0

b1

b2

b3

b 4 1 b(s )
1

Figure 17: Value-function approximation based on the linear-time interpolation approach
(a two-dimensional case). Interpolating sets are restricted to a single internal
point of the belief space.
The drawback of this approach is that interpolations may remain unchanged for many
update steps, thus slowing down the solution process. An alternative approach is to solve
a sequence of grid-based MDPs instead. In particular, at every stage we nd the best
(minimum value) interpolations for all belief points reachable from grid points in one step, x
coeÆcients of these interpolations (s), construct a grid-based MDP and solve it (exactly or
approximately). This process is repeated until no further improvement (or no improvement
larger than some threshold) is seen in values at dierent grid points.
4.5.8 Improving Grids Adaptively

The quality of an approximation (bound) depends strongly on the points used in the grid.
Our objective is to provide a good approximation with the smallest possible set of grid
points. However, this task is impossible to achieve, since it cannot be known in advance
(before solving) what belief points to pick. A way to address this problem is to build grids
incrementally, starting from a small set of grid points and adding others adaptively, but
only in places with a greater chance of improvement. The key part of this approach is a
heuristic for choosing grid points to be added next.
One heuristic method we have developed attempts to maximize improvements in bound
values via stochastic simulations. The method builds on the fact that every interpolation
grid must also include extreme points (otherwise we cannot cover the entire belief space).
As extreme points and their values aect the other grid points, we try to improve their
values in the rst place. In general, a value at any grid point b improves more the more
precise values are used for its successor belief points, that is, belief states that correspond
to  (b; a ; o) for a choice of observation o. a is the current optimal action choice for b.
Incorporating such points into the grid then makes a larger improvement in the value at
the initial grid point b more likely. Assuming that our initial point is an extreme point, we
have a heuristic that tends to improve a value for that point. Naturally, one can proceed
further with this selection by incorporating the successor points for the rst-level successors
into the grid as well, and so forth.
70

Value-Function Approximations for POMDPs

generate new grid points (G; Vb G )
set Gnew = fg
for all extreme points b do
repeat until b 2= G [ Gnew
n
o
P
set a = arg maxa (b; a) +  o2 P (ojb; a)Vb G ( (b; a; o))
select observation o according to P (ojb; a )
update b =  (b; a ; o)
add b into Gnew
return Gnew
Figure 18: Procedure for generating additional grid points based on our bound improvement heuristic.

bound quality
MDP

fast interpolation
QMDP
informed regular grid

interpolation
adaptive grid

interpolation
random grid

140
40 80 120 160 200 240 280 320 360 400

120

score

40
100

80

80

120 160 200

240 280 320 360 400

60

40

Figure 19: Improvement in the upper bound quality for grid-based point-interpolations
based on the adaptive-grid method. The method is compared to randomly
rened grid and the regular grid with 210 points. Other upper-bound approximations (the MDP, QMDP and fast informed bound methods) are included for
comparison.
To capture this idea, we generate new grid points via simulation, starting from one
of the extremes of the belief simplex and continuing until a belief point not currently in
the grid is reached. An algorithm that implements the bound improvement heuristic and
expands the current grid G with a set of jS j new grid points while relying on the current
value-function approximation Vb G is shown in Figure 18.
Figure 19 illustrates the performance (bound quality) of our adaptive grid method on
the Maze20 problem. Here we use the combination of adaptive grids with our linear-time
interpolation approach. The method gradually expands the grid in 40 point increments up to
400 grid points. Figure 19 also shows the performance of the random-grid method in which
71

Hauskrecht

running times
5000
4500
4000
400

time [sec]

3500
3000

360

2500
320

400

2000
360

280

1500

280 320

240

1000

240

200

500
1.26

1.26

50.02

40 80

120

200

160
120
40 80

160

0
MDP QMDP fast
informed

interpolation
regular grid

interpolation
adaptive grid

interpolation
random grid

Figure 20: Running times of grid-based point-interpolation methods. Methods tested include the adaptive grid, the random grid, and the regular grid with 210 grid
points. Running times for the adaptive-grid are cumulative, reecting the dependencies of higher grid resolutions on the lower-level resolutions. The running
time results for the MDP, QMDP, and fast informed bound approximations are
shown for comparison.
new points of the grid are selected iniformly at random (results for 40 grid point increments
are shown). In addition, the gure gives results for the regular grid interpolation (based
on Lovejoy (1991a)) with 210 belief points and other upper-bound methods: the MDP, the
QMDP and the fast informed bound approximations.
We see a dramatic improvement in the quality of the bound for the adaptive method.
In contrast to this, the uniformly sampled grid (random-grid approach) hardly changes the
bound. There are two reasons for this: (1) uniformly sampled grid points are more likely to
be concentrated in the center of the belief simplex; (2) the transition matrix for the Maze20
problem is relatively sparse, the belief points one obtains from the extreme points in one
step are on the boundary of the simplex. Since grid points in the center of the simplex
are never used to interpolate belief states reachable from extremes in one step they cannot
improve values at extremes and the bound does not change.
One drawback of the adaptive method is its running time (for every grid size we need
to solve a sequence of grid-based MDPs). Figure 20 compares running times of dierent
methods on the Maze20 problem. As grid-expansion of the adaptive method depends on
the value function obtained for previous steps, we plot its cumulative running times. We
see a relatively large increase in running time, especially for larger grid sizes, reecting
the trade-o between the bound quality and running time. However, we note that the
adaptive-grid method performs quite well in the initial few steps, and with only 80 grid
points outperforms the regular grid (with 210 points) in bound quality.
Finally, we note that other heuristic approaches to constructing adaptive grids for point
interpolation are possible. For example, a dierent approach that renes the grid by ex-

72

Value-Function Approximations for POMDPs

control performance
70

score

60

400

50

200
40 200 400

40
40

200
40

400
200

400

40

30

20

fast
interpolation interpolation
MDP QMDP informed (regular grid) (adaptive grid)

interpolation
(random grid)

nearest-neighbor nearest-neighbor
(adaptive grid)
(random grid)

Figure 21: Control performance of lookahead controllers based on grid-based point interpolation and nearest neighbor methods and varying grid sizes. The results are
compared to the MDP, the QMDP and the fast informed bound controllers.
amining dierences in values at current grid points has recently been proposed by Brafman
(1997).
4.5.9 Control

Value functions obtained for dierent grid-based methods dene a variety of controllers. Figure 21 compares the performances of lookahead controllers based on the point-interpolation
and nearest-neighbor methods. We run two versions of both approaches, one with the adaptive grid, the other with the random grid, and we show results obtained for 40, 200 and 400
grid points. In addition, we compare their performances to the interpolation with regular
grids (with 210 grid points), the MDP, the QMDP and the fast informed bound approaches.
Overall, the performance of the interpolation-extrapolation techniques we tested on
the Maze20 problem was a bit disappointing. In particular, better scores were achieved
by the simpler QMDP and fast informed bound methods. We see that, although heuristics
improved the bound quality of approximations, they did not lead to the similar improvement
over the QMDP and the fast informed bound methods in terms of control. This result
shows that a bad bound (in terms of absolute values) does not always imply bad control
performance. The main reason for this is that the control performance is inuenced mostly
by relative rather than absolute value-function values (or, in other words, by the shape
of the function). All interpolation-extrapolation techniques we use (except regular grid
interpolation) approximate the value function with functions that are not piecewise linear
and convex; the interpolations are based on the linear-time interpolation technique with a
sawtooth-shaped function, and the nearest-neighbor leads to a piecewise-constant function.
This does not allow them to match the shape of the optimal function correctly. The other
factor that aects the performance is a large sensitivity of methods to the selection of grid
points, as documented, for example, by the comparison of heuristic and random grids.

73

Hauskrecht

In the above tests we focused on lookahead controllers only. However, an alternative way
to dene a controller for grid-based interpolation-extrapolation methods is to use Q-function
approximations instead of value functions, and either direct or lookahead designs.25 Qfunction approximations can be found by solving the same grid-based MDP, and by keeping
values (functions) for dierent actions separate at the end.

4.6 Approximations of Value Functions Using Curve Fitting (Least-Squares
Fit)
An alternative way to approximate a function over a continuous space is to use curve-tting
techniques. This approach relies on a predened parametric model of the value function
and a set of values associated with a nite set of (grid) belief points G. The approach
is similar to interpolation-extrapolation techniques in that it relies on a set of belief-value
pairs. The dierence is that the curve tting, instead of remembering all belief-value pairs,
tries to summarize them in terms of a given parametric function model. The strategy seeks
the best possible match between model parameters and observed point values. The best
match can be dened using various criteria, most often the least-squares t criterion, where
the objective is to minimize
Error(f ) =

1X
[y
2 j j

f (bj )]2 :

Here bj and yj correspond to the belief point and its associated value. The index j ranges
over all points of the sample set G.
4.6.1 Combining Dynamic Programming and Least-Squares Fit

The least-squares approximation of a function can be used to construct a dynamic-programming
algorithm with an update step: Vbi+1 = HLSF Vbi . The approach has two steps. First, we
obtain new values for a set of sample points G:

'i+1 (b) = (H Vbi )(b) = max
a2A

(

X
s2S

(s; a)b(s) + 

XX
o2 s2S

)
b
P (ojs; a)b(s)Vi ( (b; a; o)) :

Second, we t the parameters of the value-function model Vbi+1 using new sample-value pairs
and the square-error cost function. The complexity of the update is O(jGjjAjjS j2 jjCEval (Vbi )+
CFit (Vbi+1 ; jGj)) time, where CEval(Vbi ) is the computational cost of evaluating Vbi and
CFit (Vbi+1 ; jGj) is the cost of tting parameters of Vbi+1 to jGj belief-value pairs.
The advantage of the approximation based on the least-squares t is that it requires us
to compute updates only for the nite set of belief states. The drawback of the approach
is that, when combined with the value-iteration method, it can lead to instability and/or
divergence. This has been shown for MDPs by several researchers (Bertsekas, 1994; Boyan
& Moore, 1995; Baird, 1995; Tsitsiklis & Roy, 1996).
25. This is similar to the QMDP method, which allows both lookahead and greedy designs. In fact, QMDP
can be viewed as a special case of the grid-based method with Q-function approximations, where grid
points correspond to extremes of the belief simplex.
74

Value-Function Approximations for POMDPs

4.6.2 On-line Version of the Least-Squares Fit

The problem of nding a set of parameters with the best t can be solved by any available
optimization procedure. This includes the on-line (or instance-based) version of the gradient
descent method, which corresponds to the well-known delta rule (Rumelhart, Hinton, &
Williams, 1986).
Let f denote a parametric value function over the belief space with adjustable weights
w = fw1 ; w2 ;    ; wk g. Then the on-line update for a weight wi is computed as:

wi

wi i (f (bj ) yj )

@f
j ;
@wi b
j

where i is a learning constant, and bj and yj are the last-seen point and its value. Note
that the gradient descent method requires the function to be dierentiable with regard to
adjustable weights.
To solve the discounted innite-horizon problem, the stochastic (on-line) version of a
least-squares t can be combined with either parallel (synchronous) or incremental (GaussSeidel) point updates. In the rst case, the value function from the previous step is xed
and a new value function is computed from scratch using a set of belief point samples and
their values computed through one-step expansion. Once the parameters are stabilized (by
attenuating learning rates), the newly acquired function is xed, and the process proceeds
with another iteration. In the incremental version, a single value-function model is at the
same time updated and used to compute new values at sampled points. Littman et al. (1995)
and Parr and Russell (1995) implement this approach using asynchronous reinforcement
learning backups in which sample points to be updated next are obtained via stochastic
simulation. We stress that all versions are subject to the threat of instability and divergence,
as remarked above.
4.6.3 Parametric Function Models

To apply the least-squares approach we must rst select an appropriate value function
model. Examples of simple convex functions are linear or quadratic functions, but more
complex models are possible as well.
One interesting and relatively simple approach is based on the least-squares approximation of linear action-value functions (Q-functions) (Littman et al., 1995). Here the
value function Vbi+1 is approximated as a piecewise linear and convex combination of Qb i+1
functions:
Vbi+1 (b) = max Qb i+1 (b; a);
a2A
where Qb i+1 (b; a) is the least-squares t of a linear function for a set of sample points G.
Values at points in G are obtained as

'ai+1 (b) = (b; a) + 

X

o2

P (ojb; a)Vbi ( (b; o; a)):

The method leads to an approximation with jAj linear functions and the coeÆcients of these
functions can be found eÆciently by solving a set of linear equations. Recall that other two
approximations (the QMDP and the fast informed bound approximations) also work with
75

Hauskrecht

jAj linear functions. The main dierences between the methods are that the QMDP and

fast informed bound methods update linear functions directly, and they guarantee upper
bounds and unique convergence.
A more sophisticated parametric model of a convex function is the softmax model (Parr
& Russell, 1995):
2

Vb (b) = 4

"
X X

2

s2S

#k 3 1
(s)b(s) 5

k

;

where is the set of linear functions  with adaptive parameters to t and k is a \temperature" parameter that provides a better t to the underlying piecewise linear convex function
for larger values. The function represents a soft approximation of a piecewise linear convex
function, with the parameter k smoothing the approximation.
4.6.4 Control

We tested the control performance of the least-squares approach on the linear Q-function
model (Littman et al., 1995) and the softmax model (Parr & Russell, 1995). For the softmax
model we varied the number of linear functions, trying cases with 10 and 15 linear functions
respectively. In the rst set of experiments we used parallel (synchronous) updates and
samples at a xed set of 100 belief points. We applied stochastic gradient descent techniques
to nd the best t in both cases. We tested the control performance for value-function
approximations obtained after 10, 20 and 30 updates, starting from the QMDP solution. In
the second set of experiments, we applied the incremental stochastic update scheme with
Gauss-Seidel-style updates. The results for this method were acquired after every grid point
was updated 150 times, with learning rates decreasing linearly in the range between 0:2 and
0:001. Again we started from the QMDP solution. The results for lookahead controllers are
summarized in Figure 22, which also shows the control performance of the direct Q-function
controller and, for comparison, the results for the QMDP method.
The linear-Q function model performed very well and the results for the lookahead design
were better than the results for the QMDP method. The dierence was quite apparent for
direct approaches. In general, the good performance of the method can be attributed to
the choice of a function model that let us match the shape of the optimal value function
reasonably well. In contrast, the softmax models (with 10 and 15 linear functions) did not
perform as expected. This is probably because in the softmax model all linear functions are
updated for every sample point. This leads to situations in which multiple linear functions
try to track a belief point during its update. Under these circumstances it is hard to capture
the structure of the optimal value function accurately. The other negative feature is that
the eects of on-line changes of all linear functions are added in the softmax approximation,
and thus could bias incremental update schemes. In the ideal case, we would like to identify
one vector  responsible for a specic belief point and update (modify) only that vector.
The linear Q-function approach avoids this problem by always updating only a single linear
function (corresponding to an action).

76

Value-Function Approximations for POMDPs

control performance
70

60
lookahead

10 20
iter iter 30 stoch
iter

10 20
iter iter

10 20 30
iter iter iter

score

50

40

stoch

30
iter stoch

20
10 iter
iter

30
iter

stoch

direct

30

20
QMDP
approximation

linear Q-function
lookahead

linear Q-function
direct

softmax
(10 linear functions)

softmax
(15 linear functions)

Figure 22: Control performance of least-squares t methods. Models tested include: linear
Q-function model (with both direct and lookahead control) and softmax models with 10 and 15 linear functions (lookahead control only). Value functions
obtained after 10, 20 and 30 synchronous updates and value functions obtained
through the incremental stochastic update scheme are used to dene dierent
controllers. For comparison, we also include results for two QMDP controllers.

4.7 Grid-Based Approximations with Linear Function Updates
An alternative grid-based approximation method can be constructed by applying Sondik's
approach for computing derivatives (linear functions) to points of the grid (Lovejoy, 1991a,
1993). Let Vbi be a piecewise linear convex function described by a set of linear functions i .
Then a new linear function for a belief point b and an action a can be computed eÆciently
as (Smallwood & Sondik, 1973; Littman, 1996)
b;a
i+1 (s) = (s; a) + 

XX
o2 s0 2S

P (s0 ; ojs; a)i(b;a;o) (s0 );

where (b; a; o) indexes a linear function i in a set of linear functions
maximizes the expression
"
X X

s0 2S s2S

(10)
i

(dening Vbi ) that

#

P (s0 ; ojs; a)b(s) i (s0 )

for a xed combination of b; a; o. The optimizing function for b is then acquired by choosing
the vector with the best overall value from all action vectors. That is, assuming bi+1 is a
set of all candidate linear functions, the resulting functions satises
 = arg max X b (s)b(s):
b;i+1
i+1
 +1 2 +1 s2S
A collection of linear functions obtained for a set of belief points can be combined into
a piecewise linear and convex value function. This is the idea behind a number of exact
b
i

b
i

77

Hauskrecht

V(b)
*

V(b)
V(b)
new linear function

0

b

1

b(s1 )

Figure 23: An incremental version of the grid-based linear function method. The piecewise
linear lower bound is improved by a new linear function computed for a belief
point b using Sondik's method.
algorithms (see Section 2.4.2). However, in the exact case, a set of points that cover all
linear functions dening the new value function must be located rst, which is a hard task
in itself. In contrast, the approximation method uses an incomplete set of belief points that
are xed or at least easy to locate, for example via random or heuristic selection. We use
HGL to denote the value-function mapping for the grid approach.
The advantage of the grid-based method is that it leads to more eÆcient updates. The
time complexity of the update is polynomial and equals O(jGjjAjjS j2 jj). It yields a set of
jGj linear functions, compared to jAjj i jjj possible functions for the exact update.
Since the set of grid-points is incomplete, the resulting approximation lower-bounds the
value function one would obtain by performing the exact update (Lovejoy, 1991a).

Theorem 13 (Lower-bound property of the grid-based linear function update). Let Vbi be a
piecewise linear value function and G a set of grid points used to compute linear function
updates. Then HGL Vbi  H Vbi .
4.7.1 Incremental Linear-Function Approach

The drawback of the grid-based linear function method is that HGL is not a contraction
for the discounted innite-horizon case, and therefore the value iteration method based on
the mapping may not converge (Lovejoy, 1991a). To remedy this problem, we propose an
incremental version of the grid-based linear function method. The idea of this renement is
to prevent instability by gradually improving the piecewise linear and convex lower bound
of the value function.
Assume that Vbi  V  is a convex piecewise linear lower bound of the optimal value
function dened by a linear function set i , and let b be a linear function for a point b
that is computed from Vbi using Sondik's method. Then one can construct a new improved
value function Vbi+1  Vbi by simply adding the new linear function b into i . That is:
i+1 = i [ b . The idea of the incremental update, illustrated in Figure 23, is similar
to incremental methods used by Cheng (1988) and Lovejoy (1993). The method can be
78

Value-Function Approximations for POMDPs

running times

bound quality

2500

65
9

2000

60

10

8

score

55
50
45
40

2

3

4

5

6

7

8

9

10

2

3

4

5

6

7

8

9

time [sec]

7

10

1

6

1500

10

5

9
8
1000

4

7
6

3

5
4

500

1

2

3

35
1.26

50.02

1

2

1

0

30
standard approach

QMDP

incremental approach

fast
informed

standard approach

incremental approach

Figure 24: Bound quality and running times of the standard and incremental version of
the grid-based linear-function method for the xed 40-point grid. Cumulative
running times (including all previous update cycles) are shown for both methods.
Running times of the QMDP and the fast informed bound methods are included
for comparison.
extended to handle a set of grid points G in a straightforward way. Note also that after
adding one or more new linear functions to i , some of the previous linear functions may
become redundant and can be removed from the value function. Techniques for redundancy
checking are the same as are applied in the exact approaches (Monahan, 1982; Eagle, 1984).
The incremental renement is stable and converges for a xed set of grid points. The
price paid for this feature is that the linear function set i can grow in size over the iteration
steps. Although the growth is at most linear in the number of iterations, compared to
the potentially exponential growth of exact methods, the linear function set describing
the piecewise linear approximation can become huge. Thus, in practice we usually stop
incremental updates well before the method converges. The question that remains open is
the complexity (hardness) of the problem of nding the xed-point solution for a xed set
of grid points G.
Figure 24 illustrates some of the trade-os involved in applying incremental updates
compared to the standard xed-grid approach on the Maze20 problem. We use the same
grid of 40 points for both techniques and the same initial value function. Results for 1-10
update cycles are shown. We see that the incremental method has longer running times
than the standard method, since the number of linear functions can grow after every update.
On the other hand, the bound quality of the incremental method improves more rapidly
and it can never become worse after more update steps.
4.7.2 Minimum Expected Reward

The incremental method improves the lower bound of the value function. The value function, say Vbi , can be used to create a controller (with either the lookahead or direct-action
choice). In the general case, we cannot say anything about the performance quality of
such controllers with regard to Vbi . However, under certain conditions the performance of
both controllers is guaranteed never to fall below Vbi . The following theorem (proved in the
Appendix) establishes these conditions.

Theorem 14 Let Vbi be a value function obtained via the incremental linear function method,
starting from Vb0 , which corresponds to some xed strategy C0 . Let CLA;i and CDR;i be two
79

Hauskrecht

controllers based on Vbi : the lookahead controller and the direct action controller, and V C ,
VC
be their respective value functions. Then Vbi  V C
and Vbi  V C
hold.
We note that the same property holds for the incremental version of exact value iteration.
That is, both the lookahead and the direct controllers perform no worse than Vi obtained
after i incremental updates from some V0 corresponding to a FSM controller C0 .
LA;i

DR;i

LA;i

DR;i

4.7.3 Selecting Grid Points

The incremental version of the grid-based linear-function approximation is exible and
works for an arbitrary grid.26 Moreover, the grid need not be xed and can be changed on
line. Thus, the problem of nding grids reduces to the problem of selecting belief points to
be updated next. One can apply various strategies to do this. For example, one can use a
xed set of grid points and update them repeatedly, or one can select belief points on line
using various heuristics.
The incremental linear function method guarantees that the value function is always
improved (all linear functions from previous steps are kept unless found to be redundant).
The quality of a new linear function (to be added next) depends strongly on the quality of
linear functions obtained in previous steps. Therefore, our objective is to select and order
points with better chances of larger improvement. To do this we have designed two heuristic
strategies for selecting and ordering belief points.
The rst strategy attempts to optimize updates at extreme points of the belief simplex
by ordering them heuristically. The idea of the heuristic is based on the fact that states
with higher expected rewards (e.g. some designated goal states) backpropagate their eects
(rewards) locally. Therefore, it is desirable that states in the neighborhood of the highest
reward state be updated rst, and the distant ones later. We apply this idea to order
extreme points of the belief simplex, relying on the current estimate of the value function
to identify the highest expected reward states and on a POMDP model to determine the
neighbor states.
The second strategy is based on the idea of stochastic simulation. The strategy generates
a sequence of belief points more likely to be reached from some (xed) initial belief point.
The points of the sequence are then used in reverse order to generate updates. The intent
of this heuristic is to \maximize" the improvement of the value function at the initial xed
point. To run this heuristic, we need to nd an initial belief point or a set of initial belief
points. To address this problem, we use the rst heuristic that allows us to order the
extreme points of the belief simplex. These points are then used as initial beliefs for the
simulation part. Thus, we have a two-tier strategy: the top-level strategy orders extremes
of the belief simplex, and the lower-level strategy applies stochastic simulation to generate
a sequence of belief states more likely reachable from a specic extreme point.
We tested the order heuristics and the two-tier heuristics on our Maze20 problem, and
compared them also to two simple point selection strategies: the xed-grid strategy, in
which a set of 40 grid points was updated repeatedly, and the random-grid strategy, in
which points were always chosen uniformly at random. Figure 25 shows the bound quality
26. There is no restriction on the grid points that must be included in the grid, such as was required for
example in the linear point-interpolation scheme, which had to use all extreme points of the belief
simplex.
80

Value-Function Approximations for POMDPs

bound quality
65
60

score

55
2

50

5 6 7 8 9 10
3 4
2

1

3

7
4 5 6

8 9 10
2

4

3

2

7 8 9 10
5 6

3

1

1

1

45

7 8 9 10
4 5 6

40
35
30
fixed grid

random grid

order heuristic

2-tier heuristic

Figure 25: Improvements in the bound quality for the incremental linear-function method
and four dierent grid-selection heuristics. Each cycle includes 40 grid-point
updates.
of the methods for 10 update cycles (each cycle consists of 40 grid point updates) on the
Maze20 problem. We see that the dierences in the quality of value-function approximations
for dierent strategies (even the very simple ones) are relatively small. We note that we
observed similar results also for other problems, not just Maze20.
The relatively small improvement of our heuristics can be explained by the fact that
every new linear function inuences a larger portion of the belief space and thus the method
should be less sensitive to a choice of a specic point.27 However, another plausible explanation is that our heuristics were not very good and more accurate heuristics or combinations
of heuristics could be constructed. EÆcient strategies for locating grid points used in some
of the exact methods, e.g. the Witness algorithm (Kaelbling et al., 1999) or Cheng's methods (Cheng, 1988) can potentially be applied to this problem. This remains an open area
of research.
4.7.4 Control

The grid-based linear-function approach leads to a piecewise linear and convex approximation. Every linear function comes with a natural action choice that lets us choose the
action greedily. Thus we can run both the lookahead and the direct controllers. Figure 26
compares the performance of four dierent controllers for the xed grid of 40 points, combining standard and incremental updates with lookahead and direct greedy control after 1,
5 and 10 update cycles. The results (see also Figure 24) illustrate the trade-os between the
computational time of obtaining the solution and its quality. We see that the incremental
approach and the lookahead controller design tend to improve the control performance. The
prices paid are worse running and reaction times, respectively.
27. The small sensitivity of the incremental method to the selection of grid points would suggest that one
could, in many instances, replace exact updates with simpler point selection strategies. This could
increase the speed of exact value-iteration methods (at least in their initial stages), which suer from
ineÆciencies associated with locating a complete set of grid points to be updated in every step. However,
this issue needs to be investigated.
81

Hauskrecht

control performance
70

5

60

10

10
1

lookahead

lookahead

5

10

5

10

1

5
1

1

score

50
direct
40

direct

30

20
QMDP

fast
informed

direct
standard

lookahead
standard

direct
incremental

lookahead
incremental

Figure 26: Control performance of four dierent controllers based on grid-based linear function updates after 1, 5 and 10 update cycles for the same 40-point grid. Controllers represent combinations of two update strategies (standard and incremental) and two action-extraction techniques (direct and lookahead). Running
times for the two update strategies were presented in Figure 24. For comparison we include also performances of the QMDP and the fast informed bound
methods (with both direct and lookahead designs).
control performance
70
5

score

5

10

10

1

1

60

1

5

10
1

5

10

50

40

30

20
QMDP

fast
informed

fixed grid

random grid

order heuristic

2-tier heuristic

Figure 27: Control performances of lookahead controllers based on the incremental linearfunction approach and dierent point-selection heuristics after 1, 5 and 10 improvement cycles. For comparison, scores for the QMDP and the fast informed
bound approximations are shown as well.
Figure 27 illustrates the eect of point selection heuristics on control. We compare the
results for lookahead control only, using approximations obtained after 1, 5 and 10 improvement cycles (each cycle consists of 40 grid point updates). The test results show that, as

82

Value-Function Approximations for POMDPs

for the bound quality, there are no big dierences among various heuristics, suggesting a
small sensitivity of control to the selection of grid points.

4.8 Summary of Value-Function Approximations
Heuristic value-function approximations methods allow us to replace hard-to-compute exact
methods and trade o solution quality for speed. There are numerous methods we can employ, each with dierent properties and dierent trade-os of quality versus speed. Tables 1
and 2 summarize main theoretical properties of the approximation methods covered in this
paper. The majority of these methods are of polynomial complexity or at least have eÆcient (polynomial) Bellman updates. This makes them good candidates for more complex
POMDP problems that are out of reach of exact methods.
All of the methods are heuristic approximations in that they do not give solutions of a
guaranteed precision. Despite this fact we proved that solutions of some of the methods are
no worse than others in terms of value function quality (see Figure 15). This was one of the
main contributions of the paper. However, there are currently minimal theoretical results
relating these methods in terms of control performance; the exception are some results
for FSM-controllers and FSM-based approximations. The key observation here is that for
the quality of control (lookahead control) it is more important to approximate the shape
(derivatives) of the value function correctly. This is also illustrated empirically on gridbased interpolation-extrapolation methods in Section 4.5.9 that are based on non-convex
value functions. The main challenges here are to nd ways of analyzing and comparing
control performance of dierent approximations also theoretically and to identify classes of
POMDPs for which certain methods dominate the others.
Finally, we note that the list of methods is not complete and other value-function approximation methods or the renements of existing methods are possible. For example, White
and Scherer (1994) investigate methods based on truncated histories that lead to upper
and lower bound estimates of the value function for complete information states (complete
histories). Also, additional restrictions on some of the methods can change the properties
of a more generic method. For example, it is possible that under additional assumptions
we will be able to ensure convergence of the least-squares t approximation.
5. Conclusions

POMDPs oers an elegant mathematical framework for representing decision processes
in stochastic partially observable domains. Despite their modeling advantages, however,
POMDP problems are hard to solve exactly. Thus, the complexity of problem solvingprocedures becomes the key aspect in the sucessful application of the model to real-world
problems, even at the expense of the optimality. As recent complexity results for the
approximability of POMDP problems are not encouraging (Lusena et al., 1998; Madani
et al., 1999), we focus on heuristic approximations, in particular approximations of value
functions.

83

Hauskrecht

Method
MDP approximation
QMDP approximation
Fast informed bound
UMDP approximation
Fixed-strategy method
Grid-based interpolation-extrapolation
Nearest neighbor
Kernel regression
Linear point interpolation
Curve-tting (least-squares t)
linear Q-function
Grid-based linear function method
Incremental version (start from a lower bound)

Bound
upper
upper
upper
lower
lower
upper
lower
lower

Isotonicity

p
p
p
p
p
-p
p
p

Contraction

-p

-*

p
p
p
p
p
-p
p
p

Table 1: Properties of dierent value-function approximation methods: bound property,
isotonicity and contraction property of the underlying mappings for 0   < 1.
(*) Although incremental version of the grid-based linear-function method is not
a contraction it always converges.
Method
MDP approximation
QMDP approximation
Fast informed bound
UMDP approximation
Fixed-strategy method
Grid-based interpolation-extrapolation
Nearest neighbor
Kernel regression
Linear point interpolation
Fixed interpolation
Best interpolation
Curve-tting (least-squares t)
linear Q-function
Grid-based linear function method
Incremental version

Finite-horizon
P
P
P
NP-hard
P
varies
P
P
P
P
P
varies
P
P
NA

Discounted innite-horizon
P
P
P
undecidable
P
NA
P
P
varies
P
?
NA
NA
NA
?

Table 2: Complexity of value-function approximation methods for nite-horizon problem
and discounted innite-horizon problem. The objective for the discounted innitehorizon case is to nd the corresponding xed-point solution. The complexity
results take into account, in addition to components of POMDPs, also all other
approximation specic parameters, e.g., the size of the grid G in grid-based methods. ? indicates open instances and NA methods that are not applicable to one
of the problems (e.g. because of possible divergence).

84

Value-Function Approximations for POMDPs

5.1 Contributions
The paper surveys new and known value-function approximation methods for solving POMDPs.
We focus primarily on the theoretical analysis and comparison of the methods, with ndings and results supported experimentally on a problem of moderate size from the agent
navigation domain. We analyze the methods from dierent perspectives: their computational complexity, capability to bound the optimal value function, convergence properties of
iterative implementations, and the quality of derived controllers. The analysis includes new
theoretical results, deriving the properties of individual approximations, and their relations
to exact methods. In general, the relations between and trade-os among dierent methods
are not well understood. We provide some new insights on these issues by analyzing their
corresponding updates. For example, we showed that the dierences among the exact, the
MDP, the QMDP, the fast-informed bound, and the UMDP methods boil down to simple
mathematical manipulations and their subsequent eect on the value-function approximation. This allowed us to determine relations among dierent methods in terms of quality of
their respective value functions which is one of the main results of the paper.
We also presented a number of new methods and heuristic renements of some existing
techniques. The primary contributions in this area include the fast-informed bound, gridbased point interpolation methods (including adaptive grid approaches based on stochastic sampling), and the incremental linear-function method. We also showed that in some
instances the solutions can be obtained more eÆciently by converting the original approximation into an equivalent nite-state MDP. For example, grid-based approximations with
convex rules can be often solved via conversion into a grid-based MDP (in which grid points
correspond to new states), leading to the polynomial-complexity algorithm for both the nite and the discounted innite-horizon cases (Section 4.5.3). This result can dramatically
improve the run-time performance of the grid-based approaches. A similar conversion to
the equivalent nite-state MDP, allowing a polynomial-time solution for the discounted
innite-horizon problem, was shown for the fast informed bound method (Section 4.2).
5.2 Challenges and Future Directions
Work on POMDPs and their approximations is far from complete. Some complexity results
remain open, in particular, the complexity of the grid-based approach seeking the best interpolation, or the complexity of nding the xed-point solution for the incremental version
of the grid-based linear-function method. Another interesting issue that needs more investigation is the convergence of value iteration with least-squares approximation. Although
the method can be unstable in the general case, it is possible that under certain restrictions
it will converge.
In the paper we use a single POMDP problem (Maze20) only to support theoretical
ndings or to illustrate some intuitions. Therefore, the results not supported theoretically (related mostly to control) cannot be generalized and used to rank dierent methods,
since their performance may vary on other problems. In general, the area of POMDPs
and POMDP approximations suers from a shortage of larger-scale experimental work with
multiple problems of dierent complexities and a broad range of methods. Experimental
work is especially needed to study and compare dierent methods with regard to control
quality. The main reason for this is that there are only few theoretical results relating the
85

Hauskrecht

control performance. These studies should help focus theoretical exploration by discovering
interesting cases and possibly identifying classes of problems for which certain approximations are more or less suitable. Our preliminary experimental results show that there are
signicant dierences in control performance among dierent methods and that not all of
them may be suitable to approximate the control policies. For example, the grid-based
nearest-neighbor approach with piecewise-constant approximation is typically inferior to
and outperformed by other simpler (and more eÆcient) value-function methods.
The present work focused on heuristic approximation methods. We investigated general (at) POMDPs and did not take advantage of any additional structural renements.
However, real-world problems usually oer more structure that can be exploited to devise
new algorithms and perhaps lead to further speed-ups. It is also possible that some of the
restricted versions of POMDPs (with additional structural assumptions) can be solved or
approximated eÆciently, even though the general complexity results for POMDPs or their approximations are not very encouraging (Papadimitriou & Tsitsiklis, 1987; Littman, 1996;
Mundhenk et al., 1997; Lusena et al., 1998; Madani et al., 1999). A challenge here is to
identify models that allow eÆcient solutions and are at the same time interesting enough
from the point of application.
Finally, a number of interesting issues arise when we move to problems with large state,
action, and observation spaces. Here, the complexity of not only value-function updates
but also belief state updates becomes an issue. In general, partial observability of hidden
process states does not allow us to factor and decompose belief states (and their updates),
even when transitions have a great deal of structure and can be represented very compactly.
Promising directions to deal with these issues include various Monte-Carlo approaches (Isard
& Blake, 1996; Kanazawa, Koller, & Russell, 1995; Doucet, 1998; Kearns et al., 1999)),
methods for approximating belief states via decomposition (Boyen & Koller, 1998, 1999),
or a combination of the two approaches (McAllester & Singh, 1999).
Acknowledgements

Anthony Cassandra, Thomas Dean, Leslie Kaelbling, William Long, Peter Szolovits and
anonymous reviewers provided valuable feedback and comments on this work. This research
was supported by grant RO1 LM 04493 and grant 1T15LM07092 from the National Library
of Medicine, by DOD Advanced Research Project Agency (ARPA) under contract number
N66001-95-M-1089 and DARPA/Rome Labs Planning Initiative grant F30602-95-1-0020.
Appendix A. Theorems and proofs

A.1 Convergence to the Bound
Theorem 6 Let H1 and H2 be two value-function mappings dened on V1 and V2 s.t.
1. H1 , H2 are contractions with xed points V1 , V2 ;
2. V1 2 V2 and H2 V1  H1 V1 = V1 ;

3. H2 is an isotone mapping.
Then V2  V1 holds.
86

Value-Function Approximations for POMDPs

Proof By applying H2 to condition 2 and expanding the result with condition 2 again we
get: H22 V1  H2 V1  H1 V1 = V1 . Repeating this we get in the limit V2      H2n V1 
   H22 V1  H2V1  H1V1 = V1 , which proves the result. 2
A.2 Accuracy of a Lookahead Controller Based on Bounds
Theorem 7 Let VbU and VbL be upper and lower bounds of the optimal value function for
the discounted innite-horizon problem. Let  = supb jVbU (b) VbL (b)j = kVbU VbL k be
the maximum bound dierence. Then the expected reward for a lookahead controller Vb LA ,
constructed for either VbU or VbL , satises kVb LA V  k  (1(2 )) .

Proof Let Vb denotes either an upper or lower bound approximation of V  and H LA be the
value function mapping corresponding to the lookahead policy for Vb . Note, that since the
lookahead policy always optimizes its actions with regard to Vb , H Vb = H LA Vb must hold.
The error of Vb LA can be bounded using the triangle inequality

kVb LA V  k  kVb LA Vb k + kVb V k:
The rst component satises:

kVb LA Vb k = kH LA Vb LA Vb k
 kH LA Vb LA H Vb k + kH Vb Vb k
= kH LA Vb LA H LA Vb k + kH Vb Vb k
  kVb LA Vb k + 
The inequality: kH Vb Vb k   follows from the isotonicity of H and the fact that Vb is either
an upper or a lower bound. Rearranging the inequalities, we obtain: kVb LA Vb k = (1   ) .
The bound on the second term kVb V  k   is trivial.
(2  )
Therefore, kVb LA V  k  [ (1 1  ) + 1] =  (1
) . 2
A.3 MDP, QMDP and the Fast Informed Bounds
Theorem 8 A solution for the fast informed bound approximation can be found by solving
an MDP with jS jjAjjj states, jAj actions and the same discount factor  .
Proof Let ai be a linear function for action a dening Vbi . Let i (s; a) denote parameters
of the function. The parameters of Vbi+1 satisfy:
i+1 (s; a) = (s; a) + 
Let

X

X
0
0 0
max
0 2A 0 P (s ; ojs; a)i (s ; a ):
a
o2
s 2S

i+1 (s; a; o) = max
0

X

a 2 A s0 2 S

87

P (s0 ; ojs; a)i (s0 ; a0 ):

Hauskrecht

Now, we can rewrite i+1 (s; a; o) for every s; a; o as:
8
<X

2

X

i+1 (s; a; o) = max
P (s0 ; ojs; a) 4(s0 ; a0 ) + 
a0 2A :s0 2S
o0 2
8
2
< X
4
= max
a0 2A : 0

3

2

39
=
i (s0 ; a0 ; o0 )5;

P (s0 ; ojs; a)(s0 ; a0 )5 +  4

X X

o0 2 s0 2S

s 2S

39
=
P (s0 ; ojs; a)i (s0 ; a0 ; o0 )5;

These equations dene an MDP with state space S  A  , action space A and discount
factor  . Thus, a solution for the fast informed bound update can be found by solving an
equivalent nite-state MDP. 2

Theorem 9 Let Vbi corresponds to a piecewise linear convex value function dened by
linear functions. Then H Vbi  HF IB Vbi  HQMDP Vbi  HMDP Vbi :
Proof
8
<X

X

i

9
=

XX

max : (s; a)b(s) + 
max
P (s0 ; ojs; a)b(s)i (s0 );
a2A s2S

2
0
o2
s 2S s2S
= (HVi )(b)
i

 max
a2A

X
s2S

2

b(s) 4(s; a) + 

= (HF IB Vi )(b)

 max
a2A

X
s2S

b(s) 4(s; a) + 



s2S

a2A

2

= (HMDP Vbi )(b)

3

P (s0 ; ojs; a)i (s0 )5
3

X
s0 2S

2

b(s) max 4(s; a) + 

max

X

o2 i 2 i s0 2S

2

= (HQMDP Vbi )(b)
X

X

i

P (s0 js; a) max i (s0 )5
i 2

i

3

X
s0 2S

P (s0 js; a) max i (s0 )5
i 2

i

A.4 Fixed-Strategy Approximations
Theorem 10 Let CF SM be an FSM controller. Let CDR and CLA be the direct and the
one-step-lookahead controllers constructed based on CF SM . Then V C (b)  V C (b) and
V C (b)  V C (b) hold for all belief states b 2 I .
Proof The value function for the FSM controller CF SM satises:
F SM

F SM

LA

VC

F SM

where

(b) = max V (x; b) = V ( (b); b)
x2M

V (x; b) = (b; (x)) + 

X
o2

P (ojb; (x))V ((x; o);  (b; (x); o)):
88

DR

Value-Function Approximations for POMDPs

The direct controller CDR selects the action greedily in every step, that is, it always
chooses according to (b) = arg maxx2M V (x; b). The lookahead controller CLA selects the
action based on V (x; b) one step away:

LA (b) = arg max
a2A

"

#

X

0
(b; a) +  P (ojb; a) max
0 2M V (x ;  (b; a; o)) :
x
o2

By expanding the value function for CF SM for one step we get:

VC

F SM

(b) = max V (x; b)
x2M
"

#

X

= max (b; (x)) +  P (ojb; (x))V ((x; o);  (b; (x); o))
x2M
o2
= (b; ( (b))) + 

 (b; ( (b))) + 
"

X

o2

X

o2

(1)

P (ojb; ( (b)))V ((x; o);  (b; ( (b)); o))

P (ojb; ( (b))) max
V (x0 ;  (b; ( (b)); o))
0
x 2M

X

(2)

#

0
 max
(b; a) +  P (ojb; a) max
0 2M V (x ;  (b; a; o))
a2A
x
o2
X
LA
0
LA
= (b;  (b)) +  P (ojb; LA (b)) max
0 2M V (x ;  (b;  (b); o))
x
o2

(3)

Iteratively expanding maxx0 2M V (x; :) in 2 and 3 with expression 1 and substituing improved
(higher value) expressions 2 and 3 back we obtain value functions for both the direct and
the lookahead controllers. (Expansions of 2 lead to the value for the direct controller
and expansions of 3 to the value for the lookahead controller.) Thus V C
 VC
C
C
and V
 V must hold. Note, however, that action choices (b) and LA(b)
in expressions 2 and 3 can be dierent leading to dierent next step belief states and
subsequently to dierent expansion sequences. Therefore, the above result does not imply
that V DR (b)  V LA (b) for all b 2 I . 2
F SM

F SM

DR

LA

A.5 Grid-Based Linear-Function Method
Theorem 14 Let Vbi be a value function obtained via the incremental linear function method,
starting from Vb0 , which corresponds to some xed strategy C0 . Let CLA;i and CDR;i be two
controllers based on Vbi : the lookahead controller and the direct action controller, and V C ,
VC
be their respective value functions. Then Vbi  V C
and Vbi  V C
hold.
Proof By initializing the method with a value function for some FSM controller C0 , the
incremental updates can be interpreted as additions of new states to the FSM controller (a
new linear function corresponds to a new state of the FSM). Let Ci be a controller after
step i. Then V C
= Vbi holds and the inequalities follow from Theorem 10. 2
LA;i

DR;i

LA;i

F SM;i

89

DR;i

Hauskrecht

References

Astrom, K. J. (1965). Optimal control of Markov decision processes with incomplete state
estimation. Journal of Mathematical Analysis and Applications, 10, 174{205.
Baird, L. C. (1995). Residual algorithms: Reinforcement learning with function approximation. In Proceedings of the Twelfth International Conference on Machine Learning,
pp. 30{37.
Barto, A. G., Bradtke, S. J., & Singh, S. P. (1995). Learning to act using real-time dynamic
programming. Articial Intelligence, 72, 81{138.
Bellman, R. E. (1957). Dynamic programming. Princeton University Press, Princeton, NJ.
Bertsekas, D. P. (1994). A counter-example to temporal dierences learning. Neural Computation, 7, 270{279.
Bertsekas, D. P. (1995). Dynamic programming and optimal control. Athena Scientic.
Bonet, B., & Gener, H. (1998). Learning sorting and classication with POMDPs. In
Proceedings of the Fifteenth International Conference on Machine Learning.
Boutilier, C., Dean, T., & Hanks, S. (1999). Decision-theoretic planning: Structural assumptions and computational leverage. Articial Intelligence, 11, 1{94.
Boutilier, C., & Poole, D. (1996). Exploiting structure in policy construction. In Proceedings
of the Thirteenth National Conference on Articial Intelligence, pp. 1168{1175.
Boyan, J. A., & Moore, A. A. (1995). Generalization in reinforcement learning: safely
approximating the value function. In Advances in Neural Information Processing
Systems 7. MIT Press.
Boyen, X., & Koller, D. (1998). Tractable inference for complex stochastic processes. In
Proceedings of the Fourteenth Conference on Uncertainty in Articial Intelligence, pp.
33{42.
Boyen, X., & Koller, D. (1999). Exploiting the architecture of dynamic systems. In Proceedings of the Sixteenth National Conference on Articial Intelligence, pp. 313{320.
Brafman, R. I. (1997). A heuristic variable grid solution method for POMDPs. In Proceedings of the Fourteenth National Conference on Articial Intelligence, pp. 727{233.
Burago, D., Rougemont, M. D., & Slissenko, A. (1996). On the complexity of partially
observed Markov decision processes. Theoretical Computer Science, 157, 161{183.
Cassandra, A. R. (1998). Exact and approximate algorithms for partially observable Markov
decision processes. Ph.D. thesis, Brown University.
Cassandra, A. R., Littman, M. L., & Zhang, N. L. (1997). Incremental pruning: a simple,
fast, exact algorithm for partially observable Markov decision processes. In Proceedings
of the Thirteenth Conference on Uncertainty in Articial Intelligence, pp. 54{61.
90

Value-Function Approximations for POMDPs

Casta~non, D. (1997). Approximate dynamic programming for sensor management. In
Proceedings of Conference on Decision and Control.
Cheng, H.-T. (1988). Algorithms for partially observable Markov decision processes. Ph.D.
thesis, University of British Columbia.
Condon, A. (1992). The complexity of stochastic games. Information and Computation,
96, 203{224.
Dean, T., & Kanazawa, K. (1989). A model for reasoning about persistence and causation.
Computational Intelligence, 5, 142{150.
Dearden, R., & Boutilier, C. (1997). Abstraction and approximate decision theoretic planning. Articial Intelligence, 89, 219{283.
Doucet, A. (1998). On sequential simulation-based methods for Bayesian ltering. Tech.
rep. CUED/F-INFENG/TR 310, Department of Engineering, Cambridge University.
Drake, A. (1962). Observation of a Markov process through a noisy channel. Ph.D. thesis,
Massachusetts Institute of Technology.
Draper, D., Hanks, S., & Weld, D. (1994). Probabilistic planning with information gathering
and contingent execution. In Proceedings of the Second International Conference on
AI Planning Systems, pp. 31{36.
Eagle, J. N. (1984). The optimal search for a moving target when search path is constrained.
Operations Research, 32, 1107{1115.
Eaves, B. (1984). A course in triangulations for soving dierential equations with deformations. Springer-Verlag, Berlin.
Gordon, G. J. (1995). Stable function approximation in dynamic programming. In Proceedings of the Twelfth International Conference on Machine Learning.
Hansen, E. (1998a). An improved policy iteration algorithm for partially observable MDPs.
In Advances in Neural Information Processing Systems 10. MIT Press.
Hansen, E. (1998b). Solving POMDPs by searching in policy space. In Proceedings of the
Fourteenth Conference on Uncertainty in Articial Intelligence, pp. 211{219.
Hauskrecht, M. (1997). Planning and control in stochastic domains with imperfect information. Ph.D. thesis, Massachusetts Institute of Technology.
Hauskrecht, M., & Fraser, H. (1998). Planning medical therapy using partially observable
Markov decision processes. In Proceedings of the Ninth International Workshop on
Principles of Diagnosis (DX-98), pp. 182{189.
Hauskrecht, M., & Fraser, H. (2000). Planning treatment of ischemic heart disease with
partially observable Markov decision processes. Articial Intelligence in Medicine, 18,
221{244.
91

Hauskrecht

Heyman, D., & Sobel, M. (1984). Stochastic methods in operations research: stochastic
optimization. McGraw-Hill.
Howard, R. A. (1960). Dynamic Programming and Markov Processes. MIT Press, Cambridge.
Howard, R. A., & Matheson, J. (1984). Inuence diagrams. Principles and Applications of
Decision Analysis, 2.
Isard, M., & Blake, A. (1996). Contour tracking by stochastic propagation of conditional
density. In Proccedings of Europian Conference on Computer Vision, pp. 343{356.
Kaelbling, L. P., Littman, M. L., & Cassandra, A. R. (1999). Planning and acting in
partially observable stochastic domains. Articial Intelligence, 101, 99{134.
Kanazawa, K., Koller, D., & Russell, S. J. (1995). Stochastic simulation algorithms for
dynamic probabilistic networks. In Proceedings of the Eleventh Conference on Uncertainty in Articial Intelligence, pp. 346{351.
Kearns, M., Mansour, Y., & Ng, A. Y. (1999). A sparse sampling algorithm for near
optimal planning in large Markov decision processes. In Proceedings of the Sixteenth
International Joint Conference on Articial Intelligence, pp. 1324{1331.
Kjaerul, U. (1992). A computational scheme for reasoning in dynamic probabilistic networks. In Proceedings of the Eighth Conference on Uncertainty in Articial Intelligence, pp. 121{129.
Korf, R. (1985). Depth-rst iterative deepening: an optimal admissible tree search. Articial
Intelligence, 27, 97{109.
Kushmerick, N., Hanks, S., & Weld, D. (1995). An algorithm for probabilistic planning.
Articial Intelligence, 76, 239{286.
Lauritzen, S. L. (1996). Graphical models. Clarendon Press.
Littman, M. L. (1994). Memoryless policies: Theoretical limitations and practical results.
In Cli, D., Husbands, P., Meyer, J., & Wilson, S. (Eds.), From Animals to Animats 3: Proceedings of the Third International Conference on Simulation of Adaptive
Behavior. MIT Press, Cambridge.
Littman, M. L. (1996). Algorithms for sequential decision making. Ph.D. thesis, Brown
University.
Littman, M. L., Cassandra, A. R., & Kaelbling, L. P. (1995). Learning policies for partially
observable environments: scaling up. In Proceedings of the Twelfth International
Conference on Machine Learning, pp. 362{370.
Lovejoy, W. S. (1991a). Computationally feasible bounds for partially observed Markov
decision processes. Operations Research, 39, 192{175.
92

Value-Function Approximations for POMDPs

Lovejoy, W. S. (1991b). A survey of algorithmic methods for partially observed Markov
decision processes. Annals of Operations Research, 28, 47{66.
Lovejoy, W. S. (1993). Suboptimal policies with bounds for parameter adaptive decision
processes. Operations Research, 41, 583{599.
Lusena, C., Goldsmith, J., & Mundhenk, M. (1998). Nonapproximability results for Markov
decision processes. Tech. rep., University of Kentucky.
Madani, O., Hanks, S., & Condon, A. (1999). On the undecidability of probabilistic planning
and innite-horizon partially observable Markov decision processes. In Proceedings of
the Sixteenth National Conference on Articial Intelligence.
McAllester, D., & Singh, S. P. (1999). Approximate planning for factored POMDPs using
belief state simplication. In Proceedings of the Fifteenth Conference on Uncertainty
in Articial Intelligence, pp. 409{416.
McCallum, R. (1995). Instance-based utile distinctions for reinforcement learning with
hidden state. In Proceedings of the Twelfth International Conference on Machine
Learning.
Monahan, G. E. (1982). A survey of partially observable Markov decision processes: theory,
models, and algorithms. Management Science, 28, 1{16.
Mundhenk, M., Goldsmith, J., Lusena, C., & Allender, E. (1997). Encyclopaedia of complexity results for nite-horizon Markov decision process problems. Tech. rep., CS
Dept TR 273-97, University of Kentucky.
Papadimitriou, C. H., & Tsitsiklis, J. N. (1987). The complexity of Markov decision processes. Mathematics of Operations Research, 12, 441{450.
Parr, R., & Russell, S. (1995). Approximating optimal policies for partially observable
stochastic domains. In Proceedings of the Fourteenth International Joint Conference
on Articial Intelligence, pp. 1088{1094.
Pearl, J. (1988). Probabilistic reasoning in intelligent systems. Morgan Kaufman.
Platzman, L. K. (1977). Finite memory estimation and control of nite probabilistic systems.
Ph.D. thesis, Massachusetts Institute of Technology.
Platzman, L. K. (1980). A feasible computational approach to innite-horizon partiallyobserved Markov decision problems. Tech. rep., Georgia Institute of Technology.
Puterman, M. L. (1994). Markov decision processes: discrete stochastic dynamic programming. John Wiley, New York.
Raia, H. (1970). Decision analysis. Introductory lectures on choices under uncertainty.
Addison-Wesley.
Rumelhart, D., Hinton, G. E., & Williams, R. J. (1986). Learning internal representations
by error propagation. In Parallel Distributed Processing, pp. 318{362.
93

Hauskrecht

Satia, J., & Lave, R. (1973). Markovian decision processes with probabilistic observation
of states. Management Science, 20, 1{13.
Singh, S. P., Jaakkola, T., & Jordan, M. I. (1994). Learning without state-estimation
in partially observable Markovian decision processes. In Proceedings of the Eleventh
International Conference on Machine Learning, pp. 284{292.
Smallwood, R. D., & Sondik, E. J. (1973). The optimal control of partially observable
processes over a nite horizon. Operations Research, 21, 1071{1088.
Sondik, E. J. (1971). The optimal control of partially observable Markov decision processes.
Ph.D. thesis, Stanford University.
Sondik, E. J. (1978). The optimal control of partially observable processes over the innite
horizon: Discounted costs. Operations Research, 26, 282{304.
Tatman, J., & Schachter, R. D. (1990). Dynamic programming and inuence diagrams.
IEEE Transactions on Systems, Man and Cybernetics, 20, 365{379.
Tsitsiklis, J. N., & Roy, B. V. (1996). Feature-based methods for large-scale dynamic
programming. Machine Learning, 22, 59{94.
Washington, R. (1996). Incremental Markov model planning. In Proceedings of the Eight
IEEE International Conference on Tools with Articial Intelligence, pp. 41{47.
White, C. C., & Scherer, W. T. (1994). Finite memory suboptimal design for partially
observed Markov decision processes. Operations Research, 42, 439{455.
Williams, R. J., & Baird, L. C. (1994). Tight performance bounds on greedy policies based
on imperfect value functions. In Proceedings of the Tenth Yale Workshop on Adaptive
and Learning Systems Yale University.
Yost, K. A. (1998). Solution of large-scale allocation problems with partially observable
outcomes. Ph.D. thesis, Naval Postgraduate School, Monterey, CA.
Zhang, N. L., & Lee, S. S. (1998). Planning with partially observable Markov decision
processes: Advances in exact solution method. In Proceedings of the Fourteenth Conference on Uncertainty in Articial Intelligence, pp. 523{530.
Zhang, N. L., & Liu, W. (1997a). A model approximation scheme for planning in partially
observable stochastic domains. Journal of Articial Intelligence Research, 7, 199{230.
Zhang, N. L., & Liu, W. (1997b). Region-based approximations for planning in stochastic
domains. In Proceedings of the Thirteenth Conference on Uncertainty in Articial
Intelligence, pp. 472{480.

94

