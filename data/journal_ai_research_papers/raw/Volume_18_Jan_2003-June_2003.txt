Journal of Artiﬁcial Intelligence Research 18 (2003) 149-181

Submitted 10/02; published 02/03

Wrapper Maintenance: A Machine Learning Approach
Kristina Lerman

lerman@isi.edu

USC Information Sciences Institute
4676 Admiralty Way
Marina del Rey, CA 90292 USA

Steven N. Minton

minton@fetch.com

Fetch Technologies
4676 Admiralty Way
Marina del Rey, CA 90292 USA

Craig A. Knoblock

knoblock@isi.edu

USC Information Sciences Institute and Fetch Technologies
4676 Admiralty Way
Marina del Rey, CA 90292 USA

Abstract
The proliferation of online information sources has led to an increased use of wrappers
for extracting data from Web sources. While most of the previous research has focused
on quick and eﬃcient generation of wrappers, the development of tools for wrapper maintenance has received less attention. This is an important research problem because Web
sources often change in ways that prevent the wrappers from extracting data correctly. We
present an eﬃcient algorithm that learns structural information about data from positive
examples alone. We describe how this information can be used for two wrapper maintenance applications: wrapper veriﬁcation and reinduction. The wrapper veriﬁcation system
detects when a wrapper is not extracting correct data, usually because the Web source has
changed its format. The reinduction algorithm automatically recovers from changes in the
Web source by identifying data on Web pages so that a new wrapper may be generated for
this source. To validate our approach, we monitored 27 wrappers over a period of a year.
The veriﬁcation algorithm correctly discovered 35 of the 37 wrapper changes, and made
16 mistakes, resulting in precision of 0.73 and recall of 0.95. We validated the reinduction algorithm on ten Web sources. We were able to successfully reinduce the wrappers,
obtaining precision and recall values of 0.90 and 0.80 on the data extraction task.

1. Introduction
There is a tremendous amount of information available online, but much of this information
is formatted to be easily read by human users, not computer applications. Extracting
information from semi-structured Web pages is an increasingly important capability for
Web-based software applications that perform information management functions, such as
shopping agents (Doorenbos, Etzioni, & Weld, 1997) and virtual travel assistants (Knoblock,
Minton, Ambite, Muslea, Oh, & Frank, 2001b; Ambite, Barish, Knoblock, Muslea, Oh, &
Minton, 2002), among others. These applications, often referred to as agents, rely on
Web wrappers that extract information from semi-structured sources and convert it to
a structured format. Semi-structured sources are those that have no explicitly speciﬁed
grammar or schema, but have an implicit grammar that can be used to identify relevant
c
2003
AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Lerman, Minton & Knoblock

information on the page. Even text sources such as email messages have some structure in
the heading that can be exploited to extract the date, sender, addressee, title, and body
of the messages. Other sources, such as online catalogs, have a very regular structure that
can be exploited to extract all the data automatically.
Wrappers rely on extraction rules to identify the data ﬁeld to be extracted. Semiautomatic creation of extraction rules, or wrapper induction, has been an active area of
research in recent years (Knoblock, Lerman, Minton, & Muslea, 2001a; Kushmerick, Weld,
& Doorenbos, 1997). The most advanced of these wrapper generation systems use machine
learning techniques to learn the extraction rules by example. For instance, the wrapper
induction tool developed at USC (Knoblock et al., 2001a; Muslea, Minton, & Knoblock,
1998) and commercialized by Fetch Technologies, allows the user to mark up data to be
extracted on several example pages from an online source using a graphical user interface.
The system then generates “landmark”-based extraction rules for these data that rely on
the page layout. The USC wrapper tool is able to eﬃciently create extraction rules from
a small number of examples; moreover, it can extract data from pages that contain lists,
nested structures, and other complicated formatting layouts.
In comparison to wrapper induction, wrapper maintenance has received less attention.
This is an important problem, because even slight changes in the Web page layout can break
a wrapper that uses landmark-based rules and prevent it from extracting data correctly. In
this paper we discuss our approach to the wrapper maintenance problem, which consists of
two parts: wrapper veriﬁcation and reinduction. A wrapper veriﬁcation system monitors
the validity of data returned by the wrapper. If the site changes, the wrapper may extract
nothing at all or some data that is not correct. The veriﬁcation system will detect data
inconsistency and notify the operator or automatically launch a wrapper repair process.
A wrapper reinduction system repairs the extraction rules so that the wrapper works on
changed pages.

Pages to
be labeled

Web
pages

Reinduction System

GUI

Labeled
Web pages

Wrapper
Induction
System

Wrapper
Extracted
data
Change
detected

Automatic
Re-labeling

Wrapper
Verification

Figure 1: Life cycle of a wrapper
Figure 1 graphically illustrates the entire life cycle of a wrapper. As shown in the ﬁgure,
the wrapper induction system takes a set of web pages labeled with examples of the data to
be extracted. The output of the wrapper induction system is a wrapper, consisting of a set
150

Wrapper Maintenance

of extraction rules that describe how to locate the desired information on a Web page. The
wrapper veriﬁcation system uses the functioning wrapper to collect extracted data. It then
learns patterns describing the structure of data. These patterns are used to verify that the
wrapper is correctly extracting data at a later date. If a change is detected, the system can
automatically repair a wrapper by using this structural information to locate examples of
data on the new pages and re-running the wrapper induction system with these examples.
At the core of these wrapper maintenance applications is a machine learning algorithm that
learns structural information about common data ﬁelds. In this paper we introduce the
algorithm, DataProG, and describe its application to the wrapper maintenance tasks in
detail. Though we focus on web applications, the learning technique is not web-speciﬁc,
and can be used for data validation in general.
Note that we distinguish two types of extraction rules: landmark-based rules that extract data by exploiting the structure of the Web page, and content-based rules, which we
refer to as content patterns or simply patterns, that exploit the structure of the ﬁeld itself.
Our previous work focused on learning landmark rules for information extraction (Muslea,
Minton, & Knoblock, 2001). The current work shows that augmenting these rules with
content-based patterns provides a foundation for sophisticated wrapper maintenance applications.

2. Learning Content Patterns
The goal of our research is to extract information from semi-structured information sources.
This typically involves identifying small chunks of highly informative data on formatted
pages (as opposed to parsing natural language text). Either by convention or design, these
ﬁelds are usually structured: phone numbers, prices, dates, street addresses, names, schedules, etc. Several examples of street addresses are given in Fig. 2. Clearly, these strings
are not arbitrary, but share some similarities. The objective of our work is to learn the
structure of such ﬁelds.
4676 Admiralty Way
10924 Pico Boulevard
512 Oak Street
2431 Main Street
5257 Adams Boulevard

Figure 2: Examples of a street address ﬁeld

2.1 Data Representation
In previous work, researchers described the ﬁelds extracted from Web pages by a characterlevel grammar (Goan, Benson, & Etzioni, 1996) or a collection of global features, such as the
number of words and the density of numeric characters (Kushmerick, 1999). We employ an
intermediate word-level representation that balances the descriptive power and speciﬁcity
of the character-level representation with the compactness and computational eﬃciency of
the global representation. Words, or more accurately tokens, are strings generated from
151

Lerman, Minton & Knoblock

an alphabet containing diﬀerent types of characters: alphabetic, numeric, punctuation,
etc. We use the token’s character types to assign it to one or more syntactic categories:
alphabetic, numeric, etc. These categories form a hierarchy depicted in Fig. 3, where the
arrows point from more general to less general categories. A unique speciﬁc token type is
created for every string that appears in at least k examples, as determined in a preprocessing
step. The hierarchical representation allows for multi-level generalization. Thus, the token
“Boulevard” belongs to the general token types Alphanum (alphanumeric strings), Alpha
(alphabetic strings), Upper (capitalized words), as well as to the speciﬁc type representing
the string “Boulevard”. This representation is ﬂexible and may be expanded to include
domain speciﬁc information. For example, the numeric type is divided into categories
that include range information about the number — Large (larger than 1000), Medium
(medium numbers, between 10 and 1000) and Small (smaller than 10)— and number of
digits: 1−, 2−, and 3−digit. Likewise, we may explicitly include knowledge about the type
of information being parsed, e.g., some 5-digit numbers could be represented as zipcode.

TOKEN

PUNCT

ALPHANUM

ALPHA

UPPER

NUMBER

LOWER

SMALL MEDIUM LARGE

ALLCAPS

CA

HTML

1Digit

Boulevard

2Digit

3Digit

310

Figure 3: Portion of the token type syntactic hierarchy
We have found that a sequence of speciﬁc and general token types is more useful for
describing the content of information than the character-level ﬁnite state representations
used in previous work (Carrasco & Oncina, 1994; Goan et al., 1996). The character-level
description is far too ﬁne grained to compactly describe data and, therefore, leads to poor
generality. The coarse-grained token-level representation is more appropriate for most Web
data types. In addition, the data representation schemes used in previous work attempt
to describe the entire data ﬁeld, while we use only the starting and ending sequences,
or patterns, of tokens to capture the structure of the data ﬁelds. The reason for this is
similar to the one above: using the starting and ending patterns allows us to generalize
the structural information for many complex ﬁelds which have a lot of variability. Such
ﬁelds, e.g., addresses, usually have some regularity in how they start and end that we
can exploit. We call the starting and ending patterns collectively a data prototype. As
an example, consider a set of street addresses in Fig. 2. All of the examples start with a
152

Wrapper Maintenance

pattern <Number Upper> and end with a speciﬁc type <Boulevard> or more generally
<Upper>. Note that the pattern language does not allow loops or recursion. We believe
that recursive expressions are not useful representations of the types of data we are trying
to learn, because they are harder to learn and lead to over-generalization.
2.2 Learning from Positive Examples
The problem of learning the data prototype from a set of examples that are labeled as
belonging (or not) to a class may be stated in one of two related ways: as a classiﬁcation
or as a conservation task. In the classiﬁcation task, both positive and negative instances of
the class are used to learn a rule that will correctly classify new examples. Classiﬁcation
algorithms, like FOIL (Quinlan, 1990), use negative examples to guide the specialization
of the rule. They construct discriminating descriptions — those that are satisﬁed by the
positive examples and not the negative examples. The conservation task, on the other hand,
attempts to ﬁnd a characteristic description (Dietterich & Michalski, 1981) or conserved
patterns (Brazma, Jonassen, Eidhammer, & Gilbert, 1995), in a set of positive examples of a
class. Unlike the discriminating description, the characteristic description will often include
redundant features. For example, when learning a description of street addresses, with city
names serving as negative examples, a classiﬁcation algorithm will learn that <Number> is
a good description, because all the street addresses start with it and none of the city names
do. The capitalized word that follows the number in addresses is a redundant feature,
because it does not add to the discriminating power of the learned description. However, if
an application using this description encounters a zipcode in the future, it will incorrectly
classify it as a street address. This problem could have been avoided if <Number Upper>
was learned as a description of street addresses. Therefore, when negative examples are
not available to the learning algorithm, the description has to capture all the regularity
of data, including the redundant features, in order to correctly identify new instances of
the class and diﬀerentiate them from other classes. Ideally, the characteristic description
learned from positive examples alone is the same as the discriminating description learned by
the classiﬁcation algorithm from positive and negative examples, where negative examples
are drawn from inﬁnitely many classes. While most of the widely used machine learning
algorithms (e.g., decision trees (Quinlan, 1993), inductive logic programming (Muggleton,
1991)) solve the classiﬁcation task, there are fewer algorithms that learn characteristic
descriptions.
In our applications, an appropriate source of negative examples is problematic; therefore,
we chose to frame the learning problem as a conservation task. We introduce an algorithm
that learns data prototypes from positive examples of the data ﬁeld alone. The algorithm
ﬁnds statistically signiﬁcant sequences of tokens. A sequence of token types is signiﬁcant
if it occurs more frequently than would be expected if the tokens were generated randomly
and independently of one another. In other words, each such sequence constitutes a pattern
that describes many of the positive examples of data and is highly unlikely to have been
generated by chance.
The algorithm estimates the baseline probability of a token type’s occurrence from the
proportion of all types in the examples of the data ﬁeld that are of that type. Suppose we
are learning a description of the set of street addresses in Fig. 2, and have already found
153

Lerman, Minton & Knoblock

a signiﬁcant token sequence — e.g., the pattern consisting of the single token <Number>
— and want to determine whether the more speciﬁc pattern, <Number Upper>, is also
a signiﬁcant pattern. Knowing the probability of occurrence of the type Upper, we can
compute how many times Upper can be expected to follow Number completely by chance.
If we observe a considerably greater number of these sequences, we conclude that the longer
pattern is also signiﬁcant.
We use hypothesis testing (Papoulis, 1990) to decide whether a pattern is signiﬁcant.
The null hypothesis is that observed instances of this pattern were generated by chance,
via the random, independent generation of the individual token types. Hypothesis testing
decides, at a given conﬁdence level, whether the data supports rejecting the null hypothesis.
Suppose n identical sequences have been generated by a random source. The probability
that a token type T (whose overall probability of occurrence is p) will be the next type in
k of these sequences has a binomial distribution. For a large n, the binomial distribution
approaches a normal distribution P (x, µ, σ) with µ = np and σ 2 = np(1−p). The cumulative
probability is the probability of observing at least n1 events:
P (k ≥ n1 ) =

 ∞
n1

P (x, µ, σ)dx

(1)

We use polynomial approximation formulas (Abramowitz & Stegun, 1964) to compute the
value of the integral.
The signiﬁcance level of the test, α, is the probability that the null hypothesis is rejected
even though it is true, and it is given by the cumulative probability above. Suppose we set
α = 0.05. This means that we expect to observe at least n1 events 5% of the time under the
null hypothesis. If the number of observed events is greater, we reject the null hypothesis
(at the given signiﬁcance level), i.e., decide that the observation is signiﬁcant. Note that
the hypothesis we test is derived from observation (data). This constraint reduces the
number of degrees of freedom of the test; therefore, we must subtract one from the number
of observed events. This also prevents the anomalous case when a single occurrence of a
rare event is judged to be signiﬁcant.
2.3 DataProG Algorithm
We now describe DataProG, the algorithm that ﬁnds statistically signiﬁcant patterns in a
set of token sequences. During the preprocessing step the text is tokenized, and the tokens
are assigned one or more syntactic types (see Figure 3). The patterns are encoded in a
type of preﬁx tree, where each node corresponds to a token type. DataProG relies on
signiﬁcance judgements to grow the tree and prune the nodes. Every path through the
resulting tree starting at the root node corresponds to a signiﬁcant pattern found by the
algorithm. In this section, we focus the discussion on the version of the algorithm that
learns starting patterns. The algorithm is easily adapted to learn ending patterns.
We present the pseudocode of the DataProG algorithm in Table 1. DataProG grows
the pattern tree incrementally by (1) ﬁnding all signiﬁcant specializations (i.e., longer patterns) of a pattern and (2) pruning the less signiﬁcant of the generalizations (or specializations) among patterns of the same length. As the last step, DataProG extracts all
signiﬁcant patterns from the pattern tree, including those generalizations (i.e., shorter patterns) found to be signiﬁcant given the more speciﬁc (i.e., longer) patterns.
154

Wrapper Maintenance

DATAPROG MAIN LOOP
Create root node of tree;
For next node Q of tree
Create children of Q;
Prune nodes;
Extract patterns from tree;

CREATE CHILDREN OF Q
For each token type T at next position in examples
Let C = NewNode;
Let C.token = T;
Let C.examples = Q.examples that are followed by T;
Let C.count = |C.examples|;
Let C.pattern = concat(Q.pattern T );
If Signiﬁcant(C.count, Q.count, T.probability)
AddChildToTree(C, Q);
End If
End T loop

PRUNE NODES
For each child C of Q
For each sibling S of C s.t. S.pattern ⊂ C.pattern
Let N = C.count − S.count
If Not(Signiﬁcant(N, Q.count, C.token.probability))
Delete C;
break;
Else
Delete S;
End If
End S loop
End C loop

EXTRACT PATTERNS FROM TREE
Create empty list;
For every node Q of tree
For every child C of Q 
Let N = C.count − i (Si .count|Si ∈ Children(C))
If Signiﬁcant( N, Q.count, C.token.probability)
Add C.pattern to the list;
Return (list of patterns);

Table 1: Pseudocode of the DataProG algorithm

155

Lerman, Minton & Knoblock

The tree is empty initially, and children are added to the root node. The children
represent all tokens that occur in the ﬁrst position in the training examples more often
than expected by chance. For example, when learning addresses from the examples in
Fig. 2, the root will have two child nodes: Alphanum and Number. The tree is extended
incrementally at each node Q. A new child is added to Q for every signiﬁcant specialization
of the pattern ending at Q. As explained previously, a child node is judged to be signiﬁcant
with respect to its parent node if the number of occurrences of the pattern ending at the
child node is suﬃciently large, given the number of occurrences of the pattern ending at the
parent node and the baseline probability of the token type used to extend the pattern. To
illustrate on our addresses example, suppose we have already found that a pattern <Number
Upper> is signiﬁcant. There are ﬁve ways to extend the tree (see Fig. 4) given the data:
<Number Upper Alphanum>, <Number Upper Alpha>, <Number Upper Upper>,
<Number Upper Street>, <Number Upper Boulevard>, and <Number Upper Way>.
All but the last of these patterns are judged to be signiﬁcant at α = 0.05. For example,
<Number Upper Upper> is signiﬁcant, because Upper follows the pattern <Number
Upper> ﬁve out of ﬁve times,1 and the probability of observing at least that many longer
sequences purely by chance is 0.0002.2 Since this probability is less than α, we judge this
sequence to be signiﬁcant.

ROOT
NUMBER
UPPER

ALPHANUM

ALPHA

UPPER

Boulevard

Street

Figure 4: Pattern tree that describes the structure of addresses. Dashed lines link to nodes
that are deleted during the pruning step.

The next step is to prune the tree. The algorithm examines each pair of sibling nodes,
one of which is more general than the other, and eliminates the less signiﬁcant of the pair.
More precisely, the algorithm iterates through the newly created children of Q, from the
most to least general, and for every pair of children Ci and Cj , such that Ci .pattern ⊂
Cj .pattern (i.e., Cj .pattern is strictly more general than Ci .pattern), the algorithm keeps
only Cj if it explains signiﬁcantly more data; otherwise, it keeps only Ci . 3
1. Such small numbers are used for illustrative purposes only — the typical data sets from which the
patterns are learned are much larger.
2. The calculation of this cumulative probability depends on the occurrence probability of Upper. We count
the occurrence of each token type independently of the others. In our example, occurrence probability
(relative fraction) of type Upper is 0.18.
3. DataProG is based on an earlier version of the algorithm, DataPro, described in the conference paper (Lerman & Minton, 2000). Note that in the original version of the algorithm, the speciﬁc patterns
were always kept, regardless of whether the more general patterns were found to be signiﬁcant or not.

156

Wrapper Maintenance

Let us illustrate the pruning step with the example pattern tree in Fig. 4. We can eliminate the node AlphaNum, because all the examples that match the pattern <Number Upper Alphanum> also match the pattern <Number Upper Alpha> — thus, Alphanum is
not signiﬁcant given its specialization Alpha. We can eliminate node Alpha for a similar
reason. Next, we check whether <Number Upper Upper> is signiﬁcant given the patterns
<Number Upper Boulevard> and <Number Upper Street>. There are 2 instances of the
address ﬁeld that match the pattern <Number Upper Boulevard>, and 2 addresses that
match <Number Upper Street>. If <Number Upper Upper> matches signiﬁcantly more
than 4 addresses, it will be retained and the more speciﬁc patterns will be pruned from the
tree; otherwise, it will be deleted and the more speciﬁc ones kept. Because every example
is described by at most one pattern of a given length, the pruning step ensures that the size
of the tree remains polynomial in the number of tokens, thereby, guaranteeing a reasonable
performance of the algorithm.
Once the entire tree has been expanded, the ﬁnal step is to extract all signiﬁcant patterns
from the tree. Here, the algorithm judges whether the shorter (more general) pattern, e.g.,
<Number Upper>, is signiﬁcant given the longer specializations of it, e.g., <Number
Upper Boulevard> and <Number Upper Street>. This amounts to testing whether the
excess number of examples that are explained by the shorter pattern, and not by the longer
patterns, is signiﬁcant. Any pattern that ends at a terminal node of the tree is signiﬁcant.
Note that the set of signiﬁcant patterns may not cover all the examples in the data set, just
a fraction of them that occur more frequently than expected by chance (at some signiﬁcance
level). Tables 2–4 show examples of several data ﬁelds from a yellow pages source (Bigbook)
and a stock quote source (Y ahoo Quote), as well as the starting patterns learned for each
ﬁeld.

3. Applications of Pattern Learning
As we explained in the introduction, wrapper induction systems use information from the
layout of Web pages to create data extraction rules and are therefore vulnerable to changes
in the layout, which occur frequently when the site is redesigned. In some cases the wrapper
continues to extract, but the data is no longer correct. The output of the wrapper may also
change because the format of the source data itself has changed: e.g., when “$” is dropped
from the price ﬁeld (“9.95” instead of “$9.95”), or book availability changes from “Ships
immediately” to “In Stock: ships immediately.” Because other applications, such as Web
agents (Ambite et al., 2002; Chalupsky et al., 2001), rely on data extracted by wrappers,
wrapper maintenance is an important research problem. We divide the wrapper maintenance problem into two parts, each described separately in the paper. Wrapper veriﬁcation
automatically detects when a wrapper is not extracting data correctly from a Web source,
while wrapper reinduction automatically ﬁxes broken wrappers. Both applications learn a
description of data, of which patterns learned by DataProG are a signiﬁcant part.

This introduced a strong bias for speciﬁc patterns into the results, which led to a high proportion of
false positives during the wrapper veriﬁcation experiments. Eliminating the speciﬁcity bias, improved
the performance of the algorithm on the veriﬁcation task.

157

Lerman, Minton & Knoblock

BUSINESS NAME
Chado Tea House
Saladang
Information Sciences Institute
Chaya Venice
Acorda Therapeutics
Cajun Kitchen
Advanced Medical Billing Services
Vega 1 Electrical Corporation
21st Century Foundation
TIS the Season Gift Shop
Hide Sushi Japanese Restaurant
Aﬂoat Sushi
Prebica Coﬀee & Cafe
L ’ Orangerie
Emils Hardware
Natalee Thai Restaurant
Casablanca
Antica Pizzeria
NOBU Photographic Studio
Lotus Eaters
Essex On Coney
National Restaurant
Siam Corner Cafe
Grand Casino French Bakery
Alejo ’ s Presto Trattoria
Titos Tacos Mexican Restaurant Inc
Killer Shrimp
Manhattan Wonton CO
Starting patterns
<Alpha Upper>
<Alpha Upper Upper Restaurant>
<Alpha ’>

ADDRESS
8422 West 1st Street
363 South Fair Oaks Avenue
4676 Admiralty Way
110 Navy Street
330 West 58th Street
420 South Fairview Avenue
9478 River Road
1723 East 8th Street
100 East 85th Street
15 Lincoln Road
2040 Sawtelle Boulevard
87 East Colorado Boulevard
4325 Glencoe Avenue
903 North La Cienega Boulevard
2525 South Robertson Boulevard
998 South Robertson Boulevard
220 Lincoln Boulevard
13455 Maxella Avenue
236 West 27th Street
182 5th Avenue
1359 Coney Island Avenue
273 Brighton Beach Avenue
10438 National Boulevard
3826 Main Street
4002 Lincoln Boulevard
11222 Washington Place
523 Washington Boulevard
8475 Melrose Place
<Number Upper Upper>
<Number Upper Upper Avenue>
<Number Upper Upper Boulevard>

Table 2: Examples of the business name and address ﬁelds from the Bigbook source, and
the patterns learned from them

158

Wrapper Maintenance

CITY
Los Angeles
Pasadena
Marina Del Rey
Venice
New York
Goleta
Marcy
Brooklyn
New York
Buﬀalo
Los Angeles
Pasadena
Marina Del Rey
West Hollywood
Los Angeles
Los Angeles
Venice
Marina Del Rey
New York
New York
Brooklyn
Brooklyn
Los Angeles
Culver City
Marina Del Rey
Culver City
Marina Del Rey
West Hollywood
Starting patterns
<Upper Upper>
<Upper Upper Rey>

STATE
CA
CA
CA
CA
NY
CA
NY
NY
NY
NY
CA
CA
CA
CA
CA
CA
CA
CA
NY
NY
NY
NY
CA
CA
CA
CA
CA
CA

PHONE
( 323 ) 655
( 626 ) 793
( 310 ) 822
( 310 ) 396
( 212 ) 376
( 805 ) 683
( 315 ) 793
( 718 ) 998
( 212 ) 249
( 716 ) 839
( 310 ) 477
( 626 ) 792
( 310 ) 823
( 310 ) 652
( 310 ) 839
( 310 ) 855
( 310 ) 392
( 310 ) 577
( 212 ) 924
( 212 ) 929
( 718 ) 253
( 718 ) 646
( 310 ) 559
( 310 ) 202
( 310 ) 822
( 310 ) 391
( 310 ) 578
( 323 ) 655

<AllCaps>

<( 3digit ) 3digit - Large>

-

2056
8123
1511
1179
7552
8864
1871
2550
3612
5090
7242
9779
4446
9770
8571
9380
5751
8182
7840
4800
1002
1225
1357
6969
0095
5780
2293
6030

Table 3: Examples of the city, state and phone number ﬁelds from the Bigbook source, and
the patterns learned from them

159

Lerman, Minton & Knoblock

PRICE CHANGE
+ 0 . 51
+ 1 . 51
+ 4 . 08
+ 0 . 83
+ 2 . 35
- 10 . 84
- 1 . 24
- 1 . 59
- 2 . 94
+ 1 . 04
- 0 . 81
+ 4 . 45
+ 0 . 16
- 3 . 48
+ 0 . 49
- 3 . 38
+ 1 . 15
- 2 . 86
- 6 . 46
- 0 . 82
+ 2 . 00
+ 0 . 13
- 1 . 63
Starting patterns
<Punct 1digit . 2digit>

TICKER
INTC
IBM
AOL
T
LU
ATHM
COMS
CSCO
GTE
AAPL
MOT
HWP
DELL
GM
CIEN
EGRP
HLIT
RIMM
C
GPS
CFLO
DCLK
NT
BFRE
QCOM

VOLUME
17 , 610 , 300
4 , 922 , 400
24 , 257 , 300
8 , 504 , 000
9 , 789 , 300
5 , 646 , 400
15 , 388 , 200
19 , 135 , 900
1 , 414 , 900
2 , 291 , 800
3 , 599 , 600
2 , 147 , 700
40 , 292 , 100
1 , 398 , 100
4 , 120 , 200
7 , 007 , 400
543 , 400
307 , 500
6 , 145 , 400
1 , 023 , 600
157 , 700
1 , 368 , 100
4 , 579 , 900
149 , 000
7 , 928 , 900

<AllCaps>

<Number , 3digit , 3digit>

PRICE
122 3 / 4
109 5 / 16
63 13 / 16
53 1 / 16
68
29 7 / 8
57 11 / 32
134 1 / 2
65 15 / 16
117 3 / 4
169 1 / 4
145 5 / 16
57 3 / 16
77 15 / 16
142
25 7 / 8
128 13 / 16
132 1 / 4
49 15 / 16
44 5 / 8
103 1 / 4
106
124 1 / 8
46 9 / 16
128 1 / 16
<Medium 1digit / Number>
<Medium 15 / 16 >

Table 4: Data examples from the Y ahoo Quote source, and the patterns learned from them

160

Wrapper Maintenance

3.1 Wrapper Verification
If the data extracted by the wrapper changes signiﬁcantly, this is an indication that the
Web source may have changed its format. Our wrapper veriﬁcation system uses examples
of data extracted by the wrapper in the past that are known to be correct in order to
acquire a description of the data. The learned description contains features of two types:
patterns learned by DataProG and global numeric features, such as the density of tokens
of a particular type. The application then checks that this description still applies to the
new data extracted by the wrapper. Thus, wrapper veriﬁcation is a speciﬁc instance of the
data validation task.
The veriﬁcation algorithm works in the following way. A set of queries is used to retrieve
HTML pages from which the wrapper extracts (correct) training examples. The algorithm
then computes the values of a vector of features, "k, that describes each ﬁeld of the training
examples. These features include the patterns that describe the common beginnings (or
endings) of the ﬁeld. During the veriﬁcation phase, the wrapper generates a set of (new)
test examples from pages retrieved using the same set of queries, and computes the feature
vector "r associated with each ﬁeld of the test examples. If the two distributions, "k and "r
(see Fig. 5), are statistically the same (at some signiﬁcance level), the wrapper is judged to
be extracting correctly; otherwise, it is judged to have failed.

16
training set
test set

feature value

14
12
10
8
6
4
2
0
1

2

3

4

5

6

7

feature

Figure 5: A hypothetical distribution of features over the training and test examples

Each ﬁeld is described by a vector, whose ith component is the value of the ith feature,
such as the number of examples that match pattern j. In addition to patterns, we use the
following numeric features to describe the sets of training and test examples: the average
number of tuples-per-page, mean number of tokens in the examples, mean token length, and
the density of alphabetic, numeric, HTML-tag and punctuation types. We use goodness of
ﬁt method (Papoulis 1990) to decide whether the two distributions are the same. To use
the goodness of ﬁt method, we must ﬁrst compute Pearson’s test statistic for the data. The
Pearson’s test statistic is deﬁned as:
161

Lerman, Minton & Knoblock

q=

m

(ti − ei )2
i=1

ei

(2)

where ti is the observed value of the ith feature in the test data, and ei is the expected
value for that feature, and m is the number of features. For the patterns ei = nri /N ,
where ri is the number of training examples explained by the ith patter, N is the number
of examples in the training set and n is the number of examples in the test set. For numeric
features ei is simply the value of that feature for the training set. The test statistic q has
a chi-squared distribution with m − 1 independent degrees of freedom. If q < χ2 (m − 1; α),
we conclude that at signiﬁcance level α the two distributions are the same; otherwise, we
conclude that they are diﬀerent. Values of χ2 for diﬀerent values of α and m can be looked
up in a statistics table or calculated using an approximation formula.
In order to use the test statistic reliably, it helps to use as many independent features as
possible. In the series of veriﬁcation experiments reported in (Lerman & Minton, 2000), we
used the starting and ending patterns and the average number of tuples-per-page feature
when computing the value of q. We found that this method tended to overestimate the
test statistic, because the features (starting and ending patterns) were not independent. In
the experiments reported in this paper, we use only the starting patterns, but in order to
increase the number of features, we added numeric features to the description of data.
3.1.1 Results
We monitored 27 wrappers (representing 23 distinct Web sources) over a period of ten
months, from May 1999 to March 2000. The sources are listed in Table 5. For each wrapper,
the results of 15–30 queries were stored periodically, every 7–10 days. We used the same
query set for each source, except for the hotel source, because it accepted dated queries,
and we had to change the dates periodically to get valid results. Each set of new results
(test examples) was compared with the last correct wrapper output (training examples).
The veriﬁcation algorithm used DataProG to learn the starting patterns and numeric
features for each ﬁeld of the training examples and made a decision at a high signiﬁcance
level (corresponding to α = 0.001) about whether the test set was statistically similar to the
training set. If none of the starting patterns matched the test examples or if the data was
found to have changed signiﬁcantly for any data ﬁeld, we concluded that the wrapper failed
to extract correctly from the source; otherwise, if all the data ﬁelds returned statistically
similar data, we concluded that the wrapper was working correctly.
A manual check of the 438 comparisons revealed 37 wrapper changes attributable to
changes in the source layout and data format.4 The veriﬁcation algorithm correctly discovered 35 of these changes and made 15 mistakes. Of these mistakes, 13 were false positives,
which means that the veriﬁcation program decided that the wrapper failed when in reality
it was working correctly. Only two of the errors were the more important false negatives,
meaning that the algorithm did not detect a change in the data source. The numbers above
4. Seven of these were, in fact, internal to the wrapper itself, as when the wrapper was modiﬁed to extract
“$22.00” instead of “22.00” for the price ﬁeld. Because these actions were mostly outside of our control,
we chose to classify them as wrapper changes.

162

Wrapper Maintenance

Source
airport
altavista
Amazon
arrowlist

Type
tuple/list
list
tuple
list

Bigbook
Barnes&N oble
borders
cuisinenet

tuple
tuple
list
list

geocoder
hotel
mapquest
northernlight
parking
Quote
Smartpages
showtimes
theatre
W ashington P ost
whitepages
yahoo people
Y ahoo Quote
yahoo weather
cia f actbook

tuple
list
tuple
list
list
tuple
tuple
list
list
tuple
list
list
tuple
tuple
tuple

Data Fields
airport code, name
url, title
book author, title, price, availability, isbn
part number, manufacturer, price, status,
description, url
business name, address, city, state, phone
book author, title, price, availability, isbn
book author, title, price, availability
restaurant name, cuisine, address, city, state,
phone, link
latitude, longitude, street, city, state
name, price, distance, url
hours, minutes, distance, url
url, title
lotname, dailyrate
stock ticker, price, pricechange, volume
name, address, city, state, phone
movie, showtimes
theater name, url, address
taxi price
business name, address, city, state, phone
name, address, city, state, phone
stock ticker, price, pricechange, volume
temperature, forecast
country area, borders, population, etc.

Table 5: List of sources used in the experiments and data ﬁelds extracted from them. Source
type refers to how much data a source returns in response to a query — a single
tuple or a list of tuples. For airport source, the type changed from a single tuple
to a list over time.

163

Lerman, Minton & Knoblock

result in the following precision, recall and accuracy values:
P

=

R =
A =

true positives
= 0.73 ,
true positives + f alse positives
true positives
= 0.95 ,
true positives + f alse negatives
true positives + true negatives
= 0.97 .
positives + negatives

These results are an improvement over those reported in (Lerman & Minton, 2000),
which produced P = 0.47, R = 0.95, A = 0.91. The poor precision value reported in that
work was due to 40 false positives obtained on the same data set. We attribute the improvements both to eliminating the speciﬁcity bias in the patterns learned by DataProG
and to changing the feature set to include only the starting patterns and additional numeric
features. Note that this improvement does not result simply from adding numeric features.
To check this, we ran the veriﬁcation experiments on a subset of data (the last 278 comparisons) using only the global numeric features and obtained P = 0.92 and R = 0.55, whereas
using both patterns and numeric features results in values of P = 0.71 and R = 1.00 for
the same data set.
3.1.2 Discussion of Results
Though we have succeeded in signiﬁcantly reducing the number of false positives, we have
not managed to eliminate them altogether. There are a number of reasons for their presence,
some of which point to limitations in our approach.
We can split the types of errors into roughly three not entirely independent classes:
improper tokenization, incomplete data coverage, and data format changes. The URL ﬁeld
(Table 6) accounted for a signiﬁcant fraction of the false positives, in large part due to
the design of our tokenizer, which splits text strings on punctuation marks. If the URL
contains embedded punctuation (as part of the alphanumeric key associated with the user or
session id), it will be split into a varying number of tokens, so that it is hard to capture the
regularity of the ﬁeld. The solution is to rewrite the tokenizer to recognize URLs for which
well deﬁned speciﬁcations exist. We will address this problem in our ongoing work. Our
algorithm also failed sometimes (e.g., arrowlist, showtimes) when it learned very long and
speciﬁc descriptions. It is worth pointing out, however, that it performed correctly in over
two dozen comparisons for these sources. These types of errors are caused by incomplete
data coverage: a larger, more varied training data set would produce more general patterns,
which would perform better on the veriﬁcation task. A striking example of the data coverage
problem occurred for the stock quotes source: the day the training data was collected, there
were many more down movements in the stock price than up, and the opposite was true on
the day the test data was collected. As a result, the price change ﬁelds for those two days
were dissimilar. Finally, because DataProG learns the format of data, false positives will
inevitably result from changes in the data format and do not indicate a problem with the
algorithm. This is the case for the factbook source, where the units of area changed from
“km2” to “sq km”.
164

Wrapper Maintenance

hotel, mapquest (5 cases): URL ﬁeld contains alphanumeric keys, with embedded punctuation symbols. The tokenizer splits the ﬁeld into many tokens. The key or its
format changes from:
http://. . .&Stamp=Q4aaiEGSp68*itn/hot%3da11204,itn/agencies/newitn. . . to
http://. . .&Stamp=8∼bEgGEQrCo*itn/hot%3da11204,itn/agencies/newitn. . .
On one occasion, the server name inside the URL changed: from
http://enterprise.mapquest.com/mqmapgend?MQMapGenRequest=. . . to
http://sitemap.mapquest.com/mqmapgend?MQMapGenRequest=. . .
showtimes, arrowlist (5 cases ): Instance of the showtimes ﬁeld and part number and
description ﬁelds (arrowlist) are very long. Many long, overly speciﬁc patterns are
learned for these ﬁelds: e.g.,
<( Number : 2digit AllCaps ) , ( Small : 2digit ) , ( Small : 2digit ) , ( 4 : 2digit
) , 6 : 2digit , 7 : 2digit , 9 : 2digit , 10 : 2digit >

altavista (1 case): Database of the search engine appears to have been updated. A diﬀerent
set of results is returned for each query.
quote (1 case): Data changed — there were many more positive than negative price movements in the test examples
factbook (1 case): Data format changed:
f rom <Number km2 >
to <Number sq km >
Table 6: List of sources of false positive results on the veriﬁcation task

165

Lerman, Minton & Knoblock

3.2 Wrapper Reinduction
If the wrapper stops extracting correctly, the next challenge is to rebuild it automatically (Cohen, 1999). The extraction rules for our wrappers (Muslea et al., 2001), as well as
many others (cf. (Kushmerick et al., 1997; Hsu & Dung, 1998)), are generated by a machine
learning algorithm, which takes as input several pages from a source and labeled examples
of data to extract from each page. It is assumed that the user labeled all examples correctly. If we label at least a few pages for which the wrapper fails by correctly identifying
examples of data on them, we can use these examples as input to the induction algorithm,
such as STALKER,5 to generate new extraction rules.6 Note that we do not need to identify the data on every page — depending on how regular the data layout is, Stalker can
learn extraction rules using a small number of correctly labeled pages. Our solution is to
bootstrap the wrapper induction process (which learns landmark-based rules) by learning
content-based rules. We want to re-learn the landmark-based rules, because for the types
of sites we use, these rules tend to be much more accurate and eﬃcient than content-based
rules.
We employ a method that takes a set of training examples, extracted from the source
when the wrapper was known to be working correctly, and a set of pages from the same
source, and uses a mixture of supervised and unsupervised learning techniques to identify
examples of the data ﬁeld on new pages. We assume that the format of data did not
change. Patterns learned by DataProG play a signiﬁcant role in the reinduction task.
In addition to patterns, other features, such as the length of the training examples and
structural information about pages are used. In fact, because page structure is used during
a critical step of the algorithm, we discuss our approach to learning it in detail in the next
paragraph.
3.2.1 Page Template Algorithm
Many Web sources use templates, or page skeletons, to automatically generate pages and
ﬁll them with results of a database query. This is evident in the example in Fig. 6. The
template consists of the heading “RESULTS”, followed by the number of results that match
the query, the phrase “Click links associated with businesses for more information,” then
the heading “ALL LISTINGS,” followed by the anchors “map,” “driving directions,” “add
to My Directory” and the bolded phrase “Appears in the Category.” Obviously, data is not
part of the template — rather, it appears in the slots between template elements.
Given two or more example pages from the same source, we can induce the template
used to generate them (Table 7). The template ﬁnding algorithm looks for all sequences
of tokens — both HTML tags and text — that appear exactly once on each page. The
algorithm works in the following way: we pick the smallest page in the set as the template
seed. Starting with the ﬁrst token on this page, we grow a sequence by appending tokens
5. It does not matter, in fact, matter which wrapper induction system is used. We can easily replace
Stalker with HLRT (Kushmerick et al., 1997) to generate extraction rules.
6. In this paper we will only discuss wrapper reinduction for information sources that return a single tuple
of results per page, or a detail page. In order to create data extraction rules for sources that return lists
of tuples, the Stalker wrapper induction algorithm requires user to specify the ﬁrst and last elements
of the list, as well as at least two consecutive elements. Therefore, we need to be able to identify these
data elements with a high degree of certainty.

166

Wrapper Maintenance

(a)

(b)
Figure 6: Fragments of two Web pages from the same source displaying restaurant information.

167

Lerman, Minton & Knoblock

to it, subject to the condition that the sequence appears on every page. If we managed to
build a sequence that’s at least three tokens long7 , and this sequence appears exactly once
on each page, it becomes part of the page template. Templates play an important role in
helping identify correct data examples on pages.
input:
P = set of N Web pages
output:
T = page template
begin
p = shortest(P )
T = null
s = null
for t = ﬁrsttoken(p) to lasttoken(p)
s = concat(s, t)
if ( s appears on every page in P )
s = s
continue
else

n= N
page=1 count(s, page)
if ( n = N AND length(s) ≥ 3 )
add-to-template(T, s)
end if
s = null
end if
end for
end
Table 7: Pseudocode of the template ﬁnding algorithm

3.2.2 Automatic Labeling Algorithm
Figure 7 is a schematic outline of the reinduction algorithm, which consists of automatic
data labeling and wrapper induction. Because the latter aspect is described in detail in
other work (Muslea et al., 2001), we focus the discussion below on the automatic data
labeling algorithm.
First, DataProG learns the starting and ending patterns that describe the set of training examples. These training examples have been collected during wrapper’s normal operation, while it was correctly extracting data from the Web source. The patterns are used
to identify possible examples of the data ﬁeld on the new pages. In addition to patterns,
we also calculate the mean (and its variance) of the number-of-tokens in the training examples. Each new page is then scanned to identify all text segments that begin with one
of the starting patterns and end with one of the ending patterns. Text segments that con7. The best value for the minimum length for the page template element was determined empirically to be
three.

168

Wrapper Maintenance

extract

extracted
data

Wrapper

learn
labeled
Web pages

Wrapper
Induction
System

patterns
apply

Web
pages

extracts
score

group

Figure 7: Schematic outline of the reinduction algorithm
tain signiﬁcantly more or fewer tokens than expected based on the old number-of-tokens
distribution, are eliminated from the set of candidate extracts. The learned patterns are
often too general and will match many, possibly hundreds, text segments on each page.
Among these spurious text segments is the correct example of the data ﬁeld. The rest of
the discussion is concerned with identifying the correct examples of data on pages.
We exploit some simple a priori assumptions about the structure of Web pages to help
us separate interesting extracts from noise. We expect examples of the same data ﬁeld to
appear roughly in the same position and in the same context on each page. For example,
Fig. 6 shows fragments of two Web pages from the same source displaying restaurant information. On both pages the relevant information about the restaurant appears after the
heading “ALL LISTINGS” and before the phrase “Appears in the Category:”. Thus, we
expect the same ﬁeld, e.g., address, to appear in the same place, or slot, within the page
template. Moreover, the information we are trying to extract will not usually be part of
the page template; therefore, candidate extracts that are part of the page template can
be eliminated from consideration. Restaurant address always follows restaurant name (in
bold) and precedes the city and zip code, i.e., it appears in the same context on every page.
A given ﬁeld is either visible to the user on every page, or it is invisible (part of an HTML
tag) on every page. In order to use this information to separate extracts, we describe each
candidate extract by a feature vector, which includes positional information, deﬁned by the
(page template) slot number and context. The context is captured by the adjacent tokens:
one token immediately preceding the candidate extract and one token immediately following it. We also use a binary feature which has the value one if the token is visible to the
user, and zero if it is part of an HTML tag. Once the candidate extracts have been assigned
feature vectors, we split them into groups, so that within each group, the candidate extracts
are described by the same feature vector.
The next step is to score groups based on their similarity to the training examples. We
expect the highest scoring group to contain correct examples of the data ﬁeld. One scoring
method involves assigning a rank to the groups based on how many extracts they have
in common with the training examples. This technique generally works well, because at
least some of the data usually remains the same when the Web page layout changes. Of
169

Lerman, Minton & Knoblock

course, this assumption does not apply to data that changes frequently, such as weather
information, ﬂight arrival times, stock quotes, etc. However, we have found that even in
these sources, there is enough overlap in the data that our approach works. If the scoring
algorithm assigns zero to all groups, i.e., there exist no extracts in common with the training
examples, a second scoring algorithm is invoked. This scoring method follows the wrapper
veriﬁcation procedure and ﬁnds the group that is most similar to the training examples
based on the patterns learned from the training examples.
The ﬁnal step of the wrapper reinduction process is to provide the extracts in the top
ranking group to the Stalker wrapper induction algorithm (Muslea et al., 2001) along
with the new pages. Stalker learns data extraction rules for the changed pages. Note
that examples provided to Stalker are required to be the correct examples of the ﬁeld. If
the set of automatically labeled examples includes false positives, Stalker will not learn
correct extraction rules for that ﬁeld. False negatives are not a problem, however. If the
reinduction algorithm could not ﬁnd the correct example of data on a page, that page is
simply not used in the wrapper induction stage.
3.2.3 Results
To evaluate the reinduction algorithm we used only the ten sources (listed in Table 5) that
returned a single tuple of results per page, a detail page.8 The method of data collection
was described in Sec. 3.1.1. Over the period between October 1999 and March 2000 there
were eight format changes in these sources. Since this set is much too small for evaluation
purposes, we created an artiﬁcial test set by considering all ten data sets collected for each
source during this period. We evaluated the algorithm by using it to extract data from
Web pages for which correct output is known. Speciﬁcally, we took ten tuples from a set
collected on one date, and used this information to extract data from ten pages (randomly
chosen) collected at a later date, regardless of whether the source had actually changed
or not. We reserved the remaining pages collected at a later date for testing the learned
Stalker rules.
The output of the reinduction algorithm is a list of tuples extracted from ten pages, as
well as extraction rules generated by Stalker for these pages. Though in most cases we
were not able to extract every ﬁeld on every pages, we can still learn good extraction rules
with Stalker as long as few examples of each ﬁeld are correctly labeled. We evaluated the
reinduction algorithm in two stages: ﬁrst, we checked how many data ﬁelds for each source
were identiﬁed successfully; second, we checked the quality of the learned Stalker rules
by using them to extract data from test pages.
Extracting with content-based rules We judged a data ﬁeld to be successfully extracted if the automatic labeling algorithm was able to identify it correctly on at least two
of the ten pages. This is the minimum number of examples Stalker needs to create extraction rules. In practice, such a low success rate only occurred for one ﬁeld each in two
8. We did not use the geocoder and cia f actbook wrappers in the experiments. The geocoder wrapper
accessed the source through another application; therefore, the pages were not available to us for analysis.
The reason for excluding the f actbook is that it is a plain text source, while our methods apply to Web
pages. Note also that in the veriﬁcation experiments, we had two wrappers for the mapquest source,
each extracting diﬀerent data. In the experiments described below, we used the one that contained more
data for this time period.

170

Wrapper Maintenance

of the sources: Quote and Y ahoo Quote. For all other sources, if a ﬁeld was successfully
extracted, it was correctly identiﬁed in at least three, and in most cases almost all, of the
pages in the set. A false positive occurred when the reinduction algorithm incorrectly identiﬁed some text on a page as a correct example of a data ﬁeld. In many cases, false positives
consisted of partial ﬁelds, e.g., “Cloudy” rather than “Mostly Cloudy” (yahoo weather).
A false negative occurred when the algorithm did not identify any examples of a data ﬁeld.
We ran the reinduction experiment attempting to extract the ﬁelds listed in Table 8. The
second column of the table lists the fractions of data sets for which the ﬁeld was successfully
extracted. We were able to correctly identify ﬁelds 277 times across all data sets making
61 mistakes, of which 31 were attributed to false positives and 30 to the false negatives.
There are several reasons the reinduction algorithm failed to operate perfectly. In many
cases the reason was the small training set.9 We can achieve better learning for the yellowpages-type sources Bigbook and Smartpages by using more training examples (see Fig. 8).
In two cases, the errors were attributable to changes in the format of data, which resulted
in the failure of patterns to capture the structure of data correctly: e.g., the airport source
changed airport names from capitalized words to allcaps, and in the Quote source in which
the patterns were not able to identify negative price changes because they were learned
for a data set in which most of the stocks had a positive price change. For two sources
the reinduction algorithm could not distinguish between correct examples of the ﬁeld and
other examples of the same data type: for the Quote source, in some cases it extracted
opening price or high price for the stock price ﬁeld, while for the yahoo weather source, it
extracted high or low temperature, rather than the current temperature. This problem was
also evident in the Smartpages source, where the city name appeared in several places on
the page. In these cases, user intervention or meta-analysis of the ﬁelds may be necessary
to improve results of data extraction.
Extracting with landmark-based rules The ﬁnal validation experiment consisted of
using the automatically generated wrappers to extract data from test pages. The last three
columns in Table 8 list precision, recall and accuracy for extracting data from test pages.
The performance is very good for most ﬁelds, with the notable exception of the STATE ﬁeld
of Bigbook source. For that ﬁeld, the pattern <Allcaps> was overly general, and a wrong
group received the highest score during the scoring step of the reinduction algorithm. The
average precision and recall values were P = 0.90 and R = 0.80.
Within the data set we studied, ﬁve sources, listed in Table 9, experienced a total of seven
changes. In addition to these sources, the airport source changed the format of the data it
returned, but since it simultaneously changed the presentation of data from a detail page to
a list, we could not use this data to learn Stalker rules. Table 9 shows the performance of
the automatically reinduced wrappers for the changed sources. For most ﬁelds precision P ,
the more important of the performance measures, is close to its maximum value, indicating
that there were few false positives. However, small values of recall indicate that not all
examples of these ﬁelds were extracted. This result can be traced to a limitation of our
approach: if the same ﬁeld appears in a diﬀerent context, more than one rule is necessary
9. Limitations in the data collection procedure prevented us from accumulating large data sets for all
sources; therefore, in order to keep the methodology uniform across all sources, we decided to use
smaller training sets.

171

Lerman, Minton & Knoblock

source/field
airport code
airport name
Amazon author
Amazon title
Amazon price
Amazon ISBN
Amazon availability
Barnes&N oble author
Barnes&N oble title
Barnes&N oble price
Barnes&N oble ISBN
Barnes&N oble availability
Bigbook name
Bigbook street
Bigbook city
Bigbook state
Bigbook phone
mapquest time
mapquest distance
Quote pricechange
Quote ticker
Quote volume
Quote shareprice
Smartpages name
Smartpages street
Smartpages city
Smartpages state
Smartpages phone
Y ahoo Quote pricechange
Y ahoo Quote ticker
Y ahoo Quote volume
Y ahoo Quote shareprice
W ashington P ost price
W eather temp
W eather outlook
average

ex %
100
90
100
70
100
100
60
100
80
90
100
90
70
90
70
100
90
100
100
50
63
100
38
80
80
0
100
100
100
100
100
80
100
40
90
83

p
1.0
1.0
97.3
98.8
1.0
1.0
1.0
0.93
0.96
1.0
1.0
1.0
1.0
1.0
0.91
0.04
1.0
1.0
1.0
0.38
0.93
1.0
0.46
1.0
1.0
0.68
1.0
0.99
1.0
1.0
1.0
1.0
1.0
0.36
0.83
0.90

r
1.0
1.0
0.92
0.81
0.99
0.91
0.86
0.96
0.62
0.68
0.95
0.92
0.76
0.87
0.98
0.50
0.30
0.98
0.98
0.36
0.87
0.88
0.60
0.82
0.52
0.58
0.70
1.0
0.41
0.98
0.99
0.59
1.0
0.82
1.0
0.80

Table 8: Reinduction results on ten Web sources. The ﬁrst column lists the fraction of the
ﬁelds for each source that were correctly extracted by the pattern-based algorithm.
We judged the ﬁeld to be extracted if the algorithm correctly identiﬁed at least
two examples of it. The last two columns list precision and recall on the data
extraction task using the reinduced wrappers.

172

Wrapper Maintenance

100

extraction accuracy (%)

80

60

40
PHONE
STATE
CITY
NAME
STREET

20

0
0

5

10

15

20

25

number of training examples

Figure 8: Performance of the reinduction algorithm for the ﬁelds in the Smartpages source
as the size of the training set is increased

source/field
Amazon author
Amazon title
Amazon price
Amazon ISBN
Amazon availability
Barnes&N oble author
Barnes&N oble title
Barnes&N oble price
Barnes&N oble ISBN
Barnes&N oble availability
Quote pricechange
Quote ticker

P
1.0
1.0
0.9
1.0
1.0
1.0
1.0
1.0
1.0
1.0
0.0
1.0

R
1.0
0.7
0.9
0.9
0.9
0.5
0.8
1.0
1.0
1.0
0.0
1.0

A
1.0
0.7
0.9
0.9
0.9
0.5
0.8
1.0
1.0
1.0
0.0
1.0

source/field
Smartpages name
Smartpages street
Smartpages city
Smartpages state
Smartpages phone
Y ahoo Quote pricechange
Y ahoo Quote ticker
Y ahoo Quote volume
Y ahoo Quote shareprice
Quote volume
Quote shareprice

P
1.0
N/A
0.0
1.0
N/A
1.0
1.0
1.0
1.0

R
0.9
0.0
0.0
0.9
0.0
0.2
0.5
0.7
0.7

A
0.9
0.0
0.0
0.9
0.0
0.2
0.5
0.7
0.7

1.0
0.0

1.0
N/A

1.0
0.0

Table 9: Precision, recall, and accuracy of the learned STALKER rules for the changed
sources

to extract it from a source. In such cases, we extract only a subset of the examples that
share the same context, but ignore the rest of the examples.
As mentioned earlier, we believe we can achieve better performance for the yellow-pagestype sources Bigbook and Smartpages by using more training examples. Figure 8 shows the
eﬀect increasing the size of the training example set on the performance of the automatically
generated wrappers for the Smartpages source. As the number of training examples goes
up, the accuracy of most extracted ﬁelds goes up.
173

Lerman, Minton & Knoblock

3.2.4 Lists
We have also applied the reinduction algorithm to extract data from pages containing lists
of tuples, and, in many cases, have successfully extracted at least several examples of each
ﬁeld from several pages. However, in order to learn the correct extraction rules for sources
returning lists of data, Stalker requires that the ﬁrst, last and at least two consecutive
list elements be correctly speciﬁed. The methods presented here cannot guarantee that
the required list elements are extracted, unless all the list elements are extracted. We are
currently working on new approaches to data extraction from lists (Lerman, Knoblock, &
Minton, 2001) that will enable us to use Stalker to learn the correct data extraction rules.

4. Previous Work
There has been a signiﬁcant amount of research activity in the area of pattern learning. In
the section below we discuss two approaches, grammar induction and relational learning,
and compare their performance to DataProG on tasks in the Web wrapper application
domain. In Section 4.2 we review previous work on topics related to wrapper maintenance,
and in Section 4.3 we discuss related work in information extraction and wrapper induction.
4.1 Pattern Learning
4.1.1 Grammar induction
Several researchers have addressed the problem of learning the structure, or patterns, describing text data. In particular, grammar induction algorithms have been used in the past
to learn the common structure of a set of strings. Carrasco and Oncina proposed ALERGIA (Carrasco & Oncina, 1994), a stochastic grammar induction algorithm that learns a
regular language from positive examples of the language. ALERGIA starts with a ﬁnite
state automaton (FSA) that is initialized to be a preﬁx tree that represents all the strings
of the language. ALERGIA uses a state-merging approach (Angluin, 1982; Stolcke & Omohundro, 1994) in which the FSA is generalized by merging pairs of statistically similar (at
some signiﬁcance level) subtrees. Similarity is based purely on the relative frequencies of
substrings encoded in the subtrees. The end result is a minimum FSA that is consistent
with the grammar.
Goan et al. (Goan et al., 1996) found that when applied to data domains commonly
found on the Web, such as addresses, phone numbers, etc., ALERGIA tended to merge
too many states, resulting in an over-general grammar. They proposed modiﬁcations to
ALERGIA, resulting in algorithm WIL, aimed at reducing the number of faulty merges. The
modiﬁcations were motivated by the observation that each symbol in a string belong to one
of the following syntactic categories: NUMBER, LOWER, UPPER and DELIM. When
viewed on the syntactic level, data strings contain additional structural information that can
be eﬀectively exploited to reduce the number of faulty merges. WIL merges two subtrees if
they are similar (in the ALERGIA sense) and also if, at every level, they contain nodes that
are of the same syntactic type. WIL also adds a wildcard generalization step in which the
transitions corresponding to symbols of the same category that are approximately evenly
distributed over the range of that syntactic type (e.g., 0–9 for numerals) are replaced with
a single transition corresponding to the type (e.g., NUMBER). Goan et al. demonstrated
174

Wrapper Maintenance

that the grammars learned by WIL were more eﬀective in recognizing new strings in several
relevant Web domains.
We compared the performance of WIL to DataProG on the wrapper veriﬁcation task.
We used WIL to learn the grammar on the token level using data examples extracted by
the wrappers, not on the character level as was done by Goan et al.Another diﬀerence from
Goan et al. was that, whereas they needed on the order of 100 strings to arrive at a high
accuracy rate, we have on the order of 20–30 examples to work with. Note that we can
no longer apply the wildcard generalization step to the FSA because we would need many
more examples to decide whether the token is approximately evenly distributed over that
syntactic type. Instead, we compare DataProG against two versions of WIL: one without
wildcard generalization (WIL1), and one in which every token in the initial FSA is replaced
by its syntactic type (WIL2). In addition to the syntactic types used by Goan et al., we
also had to introduce another type ALNUM to be consistent with the patterns learned by
DataProG. Neither version of WIL allows for multi-level generalization.
The algorithms were tested on data extracted by wrappers from 26 Web sources on ten
diﬀerent occasions over a period of several months (see Sec. 3.1). Results of 20–30 queries
were stored every time. For each wrapper, one data set was used as the training examples,
and the data set extracted on the very next date was used as test examples. We used WIL1
and WIL2 to learn the grammar of each ﬁeld of the training examples and then used the
grammar to recognize the test examples. If the grammar recognized more than 80% of the
test examples of a data ﬁeld, we concluded that it recognized the entire data ﬁeld; otherwise,
we concluded that the grammar did not recognize the ﬁeld, possibly because the data itself
has changed. This is the same procedure we used in the wrapper veriﬁcation experiments,
and it is described in greater detail in Section 3.1.1. Over the period of time covered by
the data, there were 21 occasions on which a Web site changed, thereby causing the data
extracted by the wrapper to change as well. The precision and recall values for WIL1
(grammar induction on speciﬁc tokens) were P = 0.20, and R = 0.81; for WIL2 (grammar
induction on wildcards representing tokens’ syntactic categories) the values were P = 0.55
and R = 0.76. WIL1 learned an overly speciﬁc grammar, which resulted in a high rate
of false positives on the veriﬁcation task, while WIL2 learned an overly general grammar,
resulting in slightly more false negatives. The recall and precision value of DataProG for
the same data were P = 0.73 and R = 1.0.
Recently Thollard et al. (Thollard, Dupont, & de la Higuera, 2000) introduced MDI, an
extension to ALERGIA. MDI has been shown to generate better grammars in at least one
domain by reducing the number of faulty merges between states . MDI replaces ALERGIA’s
state merging criterion with a more global measure that attempts to minimize the KullbackLeibler divergence between the learned automaton and the training sample while at the same
time keeping the size of the automaton as small as possible. It is not clear whether MDI
(or a combination of MDI/WIL) will lead to better grammars for common Web data types.
We suspect not, because regular grammars capture just a few of the multitude of data types
found on the Web. For example, business names, such as restaurant names shown in Table 2
may not have a well deﬁned structure, yet many of them start with two capitalized words
and end with the word “Restaurant” — which constitute patterns learned by DataProG.
175

Lerman, Minton & Knoblock

4.1.2 Relational learning
As a sequence of n tokens, a pattern can also be viewed as a non-recursive n-ary predicate.
Therefore, we can use a relation-learning algorithm like FOIL (Quinlan, 1990) to learn them.
Given a set of positive and negative examples of a class, FOIL learns ﬁrst order predicate
logic clauses deﬁning the class. Speciﬁcally, it ﬁnds a discriminating description that covers
many positive and none of the negative examples.
We used Foil.6 with the no-negative-literals option to learn patterns describing several
diﬀerent data ﬁelds. In all cases the closed world assumption was used to construct negative
examples from the known objects: thus, for the Bigbook source, names and addresses were
the negative examples for the phone number class. We used the following encoding to
translate the training examples to allow foil.6 to learn logical relations. For each data ﬁeld,
FOIL learned clauses of the form
data f ield(A) := P (A) f ollowed by(A, B) P (B) ,

(3)

as a deﬁnition of the ﬁeld, where A and B are tokens, and the terms on the right hand side
are predicates. The predicate f ollowed by(A, B) expresses the sequential relation between
the tokens. The predicate P (A) allows us to specify the token A as a speciﬁc token (e.g.,
John(A)) or a general type (e.g., Upper(A), Alpha(A)), thus, allowing FOIL the same
multi-level generalization capability as DataProG.
We ran Foil.6 on the examples associated with the Bigbook (see Tables 2–3). The
relational deﬁnitions learned by Foil.6 from these examples are shown in Table 10.
In many cases, there were similarities between the deﬁnitions learned by FOIL and
the patterns learned by DataProG, though clauses learned by FOIL tended to be overly
general. Another problem was when given examples of a class with little structure, such
as names and book titles, FOIL tended to create clauses that covered single examples, or it
failed to ﬁnd any clauses. In general, the description learned by FOIL depended critically
on what we supplied as negative examples of that ﬁeld. For example, if we were trying to
learn a deﬁnition for book titles in the presence of prices, FOIL would learn that something
that starts with a capitalized word is a title. If author names were supplied as negative
examples as well, the learned deﬁnition would have been diﬀerent. Therefore, using FOIL
in situations where the complete set of negative examples is not known or available, is
problematic.
4.2 Wrapper Maintenance
Kushmerick (Kushmerick, 1999) addressed the problem of wrapper veriﬁcation by proposing
an algorithm Rapture to verify that a wrapper correctly extracts data from a Web page.
In that work, each data ﬁeld was described by a collection of global features, such as
word count, average word length, and density of types, i.e., proportion of characters in the
training examples that are of an HTML, alphabetic, or numeric type. Rapture calculated
the mean and variance of each feature’s distribution over the training examples. Given a
set of queries for which the wrapper output is known, Rapture generates a new result for
each query and calculates the probability of generating the observed value for every feature.
Individual feature probabilities are then combined to produce an overall probability that
the wrapper has extracted data correctly. If this probability exceeds a certain threshold,
176

Wrapper Maintenance

*** Warning:
NAME(A)
NAME(A)
NAME(A)

the following definition does not cover 23 tuples in the relation
:= AllCaps(A), followed by(A,B)
:= Upper(A), followed by(A,B), Number(B)
:= followed by(A,B), Venice(B)

STREET(A) := Large(A), followed by(A,B)
STREET(A) := Medium(A), followed by(A,B), AlphaNum(B)

** Warning:
CITY(A)
CITY(A)
CITY(A)
CITY(A)
CITY(A)

the following definition does not cover 9 tuples in the relation
:= Los(A)
:= Marina(A)
:= New(A)
:= Brooklyn(A)
:= West(A), followed by(A,B), Alpha(B)

STATE(A) := CA(A)
STATE(A) := NY(A)
PHONE(A) := ((A)

Table 10: Deﬁnitions learned by foil.6 for the Bigbook source
Rapture decides that the wrapper is correct; otherwise, that it has failed. Kushmerick
found that the HTML density alone can correctly identify almost all of the changes in
the sources he monitored. In fact, adding other features in the probability calculation
signiﬁcantly reduced algorithm’s performance. We compared Rapture’s performance on
the veriﬁcation task to our approach, and found that Rapture missed 17 wrapper changes
(false negatives) if it relied solely on the HTML density feature. 10
There has been relatively little prior work on the wrapper reinduction problem. Cohen (Cohen, 1999) adapted WHIRL, a “soft” logic that incorporates a notion of statistical
text similarity, to recognize page structure of a narrow class of pages: those containing
simple lists and simple hotlists (deﬁned as anchor-URL pairs). Previously extracted data,
combined with page structure recognition heuristics, was used to reconstruct the wrapper
once the page structure changed. Cohen conducted wrapper maintenance experiments using original data and corrupted data as examples for WHIRL. However, his procedure for
corrupting data was neither realistic nor representative of how data on the Web changes.
Although we cannot at present guarantee good performance of our algorithm on the wrapper reinduction for sources containing lists, we handle the realistic data changes in Web
sources returning detail pages.
10. Although we use a diﬀerent statistical test and cannot compare the performance of our algorithm to
Rapture directly, we doubt that it would outperform our algorithm on our data set if it used all global
numeric features, because, as we noted in Section 3.1.1, using patterns as well as global numeric features
in the veriﬁcation task outperforms using numeric features only.

177

Lerman, Minton & Knoblock

4.3 Information Extraction
Our system, as used in the reinduction task, is related in spirit to the many information
extraction (IE) systems developed both by our group and others in that it uses a learned
representation of data to extract information from speciﬁc texts. Like wrapper induction
systems (see (Muslea et al., 2001; Kushmerick et al., 1997; Freitag & Kushmerick, 2000)),
it is domain independent and works best with semi-structured data, e.g., Web pages. It
does not handle free text as well as other systems, such as AutoSlog (Riloﬀ, 1993) and
Whisk (Soderland, 1999), because free text has fewer non-trivial regularities the algorithm
can exploit. Unlike wrapper induction, it does not extract data based on the features that
appear near it in text, but rather based on the content of data itself. However, unlike Whisk,
which also learns content rules, our reinduction system represents each ﬁeld independently
of the other ﬁelds, which can be an advantage, for instance, when a web source changes the
order in which data ﬁelds appear. Another diﬀerence is that our system is designed to run
automatically, without requiring any user interaction to label informative examples. In the
main part because it is purely automatic, the reinduction system fails to achieve the accuracy
of other IE systems which rely on labeled examples to train the system; however, we do
not see it as a major limitation, since it was designed to complement existing extraction
tools, rather than supersede them. In other words, we consider the reinduction task to be
successful if it can accurately extract a suﬃcient number of examples to use in a wrapper
induction system. The system can then use the resulting wrapper to accurately extract the
rest of the data from the source.
There are many similarities between our approach and that used by the RoadRunner system, developed concurrently with our system and reported recently in (Crescenzi,
Mecca, & Merialdo, 2001b, 2001a). The goal of that system is to automatically extract
data from Web sources by exploiting similarities in page structure across multiple pages.
RoadRunner works by inducing the grammar of Web pages by comparing several pages
containing long lists of data. The grammar is expressed at the HTML tag level, so it is
similar to the extraction rules generated by Stalker. The RoadRunner system has been
shown to successfully extract data from several Web sites. The two signiﬁcant diﬀerences
between that work and ours are (i) they do not have a way of detecting changes to know
when the wrapper has to be rebuilt and (ii) our reinduction algorithm works on detail pages
only, while RoadRunner works only on lists. We believe that our data-centric approach is
more ﬂexible and will allow us to extract data from more diverse information sources than
the RoadRunner approach that only looks at page structure.

5. Conclusion
In this paper we have described the DataProG algorithm, which learns structural information about a data ﬁeld from a set of examples of the ﬁeld. We use these patterns in
two Web wrapper maintenance applications: (i) verification — detecting when a wrapper
stops extracting data correctly from a Web source, and (ii) reinduction — identifying new
examples of the data ﬁeld in order to rebuild the wrapper if it stops working. The veriﬁcation algorithm performed with an accuracy of 97%, much better than results reported
in our earlier work (Lerman & Minton, 2000). In the reinduction task, the patterns were
used to identify a large number of data ﬁelds on Web pages, which were in turn used to
178

Wrapper Maintenance

automatically learn Stalker rules for these Web sources. The new extraction rules were
validated by using them to successfully extract data from sets of test pages.
There remains work to be done on wrapper maintenance. Our current algorithms are not
suﬃcient to automatically re-generate Stalker rules for sources that return lists of tuples.
However, preliminary results indicate (Lerman et al., 2001) that it is feasible to combine
information about the structure of data with a priori expectations about the structure of
Web pages containing lists to automatically extract data from lists and assign it to rows and
columns. We believe that these techniques will eventually eliminate the need for the user to
mark up Web pages and enable us to automatically generate wrappers for Web sources. Another exciting direction for future work is using the DataProG algorithm to automatically
create wrappers for new sources in some domain given existing wrappers for other sources
in the same domain. For example, we can learn the author, title and price ﬁelds for the
AmazonBooks source, and use them to extract the same ﬁelds on the Barnes&N obleBooks
source. Preliminary results show that this is indeed feasible. Automatic wrapper generation
is an important cornerstone of information-based applications, including Web agents.

6. Acknowledgments
We would like to thank Priyanka Pushkarna for carrying out the wrapper veriﬁcation experiments.
The research reported here was supported in part by the Defense Advanced Research
Projects Agency (DARPA) and Air Force Research Laboratory under contract/agreement
numbers F30602-01-C-0197, F30602-00-1-0504, F30602-98-2-0109, in part by the Air Force
Oﬃce of Scientiﬁc Research under grant number F49620-01-1-0053, in part by the Integrated
Media Systems Center, a National Science Foundation (NSF) Engineering Research Center,
cooperative agreement number EEC-9529152 and in part by the NSF under award number
DMI-0090978. The U.S. Government is authorized to reproduce and distribute reports for
Governmental purposes notwithstanding any copy right annotation thereon. The views
and conclusions contained herein are those of the authors and should not be interpreted as
necessarily representing the oﬃcial policies or endorsements, either expressed or implied, of
any of the above organizations or any person connected with them.

References
Abramowitz, M., & Stegun, I. A. (1964). Handbook of mathematical functions with formulas, graphs and mathematical tables. Applied Math. Series 55. National Bureau of
Standards, Washington, D.C.
Ambite, J.-L., Barish, G., Knoblock, C. A., Muslea, M., Oh, J., & Minton, S. (2002).
Getting from here to there: Interactive planning and agent execution for optimizing
travel. In The Fourteenth Innovative Applications of Artiﬁcial Intelligence Conference
(IAAI-2002), Edmonton, Alberta, Canada, 2002.
Angluin, D. (1982). Inference of reversible languages. Journal of the ACM, 29 (3), 741–765.
179

Lerman, Minton & Knoblock

Brazma, A., Jonassen, I., Eidhammer, I., & Gilbert, D. (1995). Approaches to the automatic discovery of patterns in biosequences. Tech. rep., Department of Informatics,
University of Bergen.
Carrasco, R. C., & Oncina, J. (1994). Learning stochastic regular grammars by means of a
state merging method. Lecture Notes in Computer Science, 862, 139.
Chalupsky, H., et al. (2001). Electric elves: Applying agent technology to support human
organizations. In Proceedings of the Thirteenth Annual Conference on Innovative
Applications of Artiﬁcial Intelligence (IAAI-2001), Seattle, WA.
Cohen, W. W. (1999). Recognizing structure in web pages using similarity queries. In Proc.
of the 16th National Conference on Artiﬁcial Intelligence (AAAI-1999), pp. 59–66.
Crescenzi, V., Mecca, G., & Merialdo, P. (2001a). Automatic web information extraction
in the roadrunner system. In Proceedings of the International Workshop on Data
Semantics in Web Information Systems (DASWIS-2001).
Crescenzi, V., Mecca, G., & Merialdo, P. (2001b). RoadRunner: Towards automatic data
extraction from large web sites. In Proceedings of the 27th Conference on Very Large
Databases (VLDB) Rome, Italy.
Dietterich, T., & Michalski, R. (1981). Inductive learning of structural descriptions.. Artiﬁcial Intelligence, 16, 257–294.
Doorenbos, R. B., Etzioni, O., & Weld, D. S. (1997). A scalable comparison-shopping
agent for the world-wide webs. In Proceeding of the First International Confence on
Autonomous Agents, Marina del Rey.
Freitag, D., & Kushmerick, N. (2000). Boosted wrapper induction. In Proceedings of the 7th
Conference on Artiﬁcial Intelligence (AAAI-2000), pp. 577–583. AAAI Press, Menlo
Park, CA.
Goan, T., Benson, N., & Etzioni, O. (1996). A grammar inference algorithm for the world
wide web.. In Proceedings of AAAI Spring Symposium on Machine Learning in Information Access, Stanford University, CA.
Hsu, C.-N., & Dung, M.-T. (1998). Generating ﬁnite-state transducers for semi-structured
data extraction from the web. Journal of Information Systems, 23, 521–538.
Knoblock, C. A., Lerman, K., Minton, S., & Muslea, I. (2001a). Accurately and reliably
extracting data from the web: A machine learning approach. IEEE Data Engineering
Bulletin, 23 (4), 33–41.
Knoblock, C. A., Minton, S., Ambite, J. L., Muslea, M., Oh, J., , & Frank, M. (2001b).
Mixed-initiative, multi-source information assistants. In The Tenth International
World Wide Web Conference (WWW10), Hong Kong.
Kushmerick, N. (1999). Regression testing for wrapper maintenance.. In Proceedings of the
14th National Conference on Artiﬁcial Intelligence (AAAI-1999).
180

Wrapper Maintenance

Kushmerick, N., Weld, D. S., & Doorenbos, R. B. (1997). Wrapper induction for information extraction. In Proceedings of the Intl. Joint Conference on Artiﬁcial Intelligence
(IJCAI), pp. 729–737.
Lerman, K., Knoblock, C. A., & Minton, S. (2001). Automatic data extraction from lists and
tables in web sources. In Proceedings of the workshop on Advances in Text Extraction
and Mining (IJCAI-2001) Menlo Park. AAAI Press.
Lerman, K., & Minton, S. (2000). Learning the common structure of data. In Proceedings
of the 15th National Conference on Artiﬁcial Intelligence (AAAI-2000) Menlo Park.
AAAI Press.
Muggleton, S. (1991). Inductive logic programming. New Generation Computing, 8, 295–
318.
Muslea, I., Minton, S., & Knoblock, C. (1998). Wrapper induction for semistructured webbased information sources.. In Proceedings of the Conference on Automated Learning
and Discovery (CONALD).
Muslea, I., Minton, S., & Knoblock, C. A. (2001). Hierarchical wrapper induction for
semistructured information sources. Autonomous Agents and Multi-Agent Systems, 4,
93–114.
Papoulis, A. (1990). Probability and Statistics. Prentice Hall, Englewood Cliﬀs, NJ.
Quinlan, J. R. (1990). Learning logical deﬁnitions from relations.. Machine Learning, 5 (3),
239–266.
Quinlan, J. R. (1993). C4.5: Programs for Machine Learning. Morgan Kaufmann, San
Mateo, CA.
Riloﬀ, E. (1993). Automatically constructing a dictionary for information extraction tasks.
In Proceedings of the 11th National Conference on Artiﬁcial Intelligence, pp. 811–816
Menlo Park, CA, USA. AAAI Press.
Soderland, S. (1999). Learning information extraction rules for semi-structured and free
text. Machine Learning, 34 (1-3), 233–272.
Stolcke, A., & Omohundro, S. (1994). Inference of ﬁnite-state probabilistic grammars. In
Proceedings of the 2nd Int. Colloquium on Grammar Induction, (ICGI-94), pp. 106–
118.
Thollard, F., Dupont, P., & de la Higuera, C. (2000). Probabilistic DFA inference using
Kullback-Leibler divergence and minimality. In Proceedings of the 17th International
Conf. on Machine Learning, pp. 975–982. Morgan Kaufmann, San Francisco, CA.

181


	
 
			 ! #"$ % 
'&)( *,+.-//021304!(657720

89:;< =?>2@
/-!AB:	%&=C>2@
/0

DFEHGJIKGJLMNOM2GQPSRUTWV$PSXZY,I[Y,PSXZY\PS]<Y)^
_

G)Ea`cbZT2R,dfegRhEaM2RUiZT2YjV$PSXZY\IKY\PSXZY\PS]<YkRUPSX
_

npqso r3w
tu vxqWy?z3{#|

G)EHlJYmN3NHMPSl

}~33HJ.H

 \3#s#'J?) ¡¢f¢£
¤ ¥¦§¨s©ª«p¬a
¡­O®$¢£¯¡
° $
z uw±u²y?³´µq¶rz$·u3r¸q
Ä)Å ÆÅÇÈ2¢s'ÉÅw2¢9Ê2ÇËÅ¯
Ìh¶Å.«
6ÇJÅ.«Å¯¡

}¸¹¶º£~$»OJ¼w¾½À¿$$£»3Á\~ÃÂ.

w¢sÅÍ
«ÅÉ
Î Åw,ÇÈÐÏ¾Ñ3Ë£¡Æ£Å2¢Ò!sÓ
Í!ÅÈ©ÀÅÉ ¤ <¥¥ÔË\ÇË6©Õ
°

³q¶rr¸q×ÖØz$r¸ÙaÚÛ³Ü
¬$µÑH¬$\?áÃw¢sÅÍ
«ÅfQ
â $ã ä,6Å.«

Áµ~3£Ý3¿3¾½QÞ¶}¶¿$$ªß3à ~3¸$»3¾½

f)J© ãªw¢sÅÍ
«Åf â
£åµåa¦m¦§ ¤ ¥æ)Ñw2¢f«Q¬a
¡­O®$¢£¯¡

çéè?êëìíHî¶ë

ï6ðsñòó¶òðfñòðfôòÈõ÷ö¡øòÉù öúfñû[üýmþ<øsÿö.ù¡ òª ò
 ÿðö)öü÷ÿ	
òð ó¡ üª ò üý¡ ò9ÿù üðÀðÌ
 õ[øfÿù
¡ò9ôòò9ñKÿðªðfô¡ò9ÿùªðSÿö ö¡òð¸öªüð[ý¡ü ö¡øòµï?ô2ü	JúðÀöûÈï6ðKöøªùhósÿó¶ò$þ#òÈôüðfùªñòCöþÛü
fÿù.ô#ý¾üÈ
 ùwüýªðfñò9ósò9ðfñòðsô2ò ðfÿË
 ò À û	ÿCù ûð¸ö¡ÿôö.ôÛüðò<ÿðfñJÿ?ùòÈÿð¸ö.ôÛüðò	"!Kò<ù øfüþ¨ý¾ò9ÿöú¡ò9ù
ÿðfññ#
 ÿþf
 ÿô%$ ùÃüýwöøò &H ï6ðÌófÿ öªôúª ÿ ¸þ<øÀò?ö¡øòhù ûð¸ö¡ÿôö.ô<ý¾ü	 üý'ªðfñò9ósò9ðfñòðsô2ò(ªùmôüËóú#)
ö
ÿöªüðsÿÀ û ò!ÿùûSöü ô
øò!ô%$*£
 öøò  òpÿ òËôÿù ò!ù+ªð þ<ø.ô
ø÷ö¡øÀð ùCö¡øfÿö,ªðö¡úÀöòª û[ÿ òQðüö ò À ò  ÿð¸ö
ÿ ò?ðüö¡ ò9ôü
 ð
-9ò9ñpÿùÛùúfô
ø./K
! òhÿ. ù üËô2üðfù.ñò # ö¡øòCó¡ üª ò üý3ý¾ü òö öÀð01 ò ñ#.ùö

ªðQ
 ý¡ ü
ÿ2
$ ðüþª ò9ñ# ò3f ÿùòÈüðª û[öøòpósÿ öhöøfÿö4ªù ò À ò  ÿð¸öhöüSöøfòù òö)üý¸5 úòªò9ùUôüðfù ö¡ úfôö¡ò9ñ[ý¡ ü ÿ
ùúf
 ùò2öÃüýsö¡øò\ÿÀ óøsÿ¶ ò2ö /Ð
! øªò\ù úsô
øQó üô2ò!ùù/.ùÃôüË
 óúö
ÿöÀüðfÿÀ ûJøfÿ
 ñ6Àö#ÿ
ª üþµùOý¾ü# ÿhùËó

7)
ô9ÿöªüðüýwùúf
 ùò ¸5 úò9ðö8¡ ò9ÿùüðÀð ÿðfñpôÿðpö¡ø¸úsù9¶ ò:;ªòþÛò9ñÿùÛÿUý¾ü	 üýô2üË
 ó.ÿöªüð'w< üðfô2ò,öøò
¡ òª ò
 ÿð¸öµófÿ ö<üýHÿ3$ ðüþª ò9ñ ò(f ÿùòCøfÿù=s ò9òðZò> ö¡ ÿôöò!ñ6f ÿ
.¡ ò9ÿù üðªð) ö
ÿù$ ùmöü?¶ òUó¶ò ý¾üQ
 ò!ñ
ô9ÿð&s
 òUù
Ëó
7fò9ñ6

B@ AC;D ëìEF+\G î¶ëHIE D
JLKMN.OPOQKMMRTS#KUV&W'XKMYKZ[\MY]^K^]#[RTS0_0[RT]Z.MP`[a6K4MOQ]#W/K]#b/[a6KW'_0W/KPX`_#Z.c[a.KOQ]Z[YXRTd'N6[R]Ze_#Z.c
[a6K]#Xf_#Z.RTg_0[RT]Zh]#b8[a6K?W"_0WiKPXj
.k lmk ÖØu$·¸³onz·¸³u{ÃÜ
p%Z^e_#ZV&MRT[N._0[R]Z.M8]#b'KPS#KPXV*c._V2UoRTb1K#`0q:K_0XKOQ]Z6brX]Z[YKcq4RT[a&[a6K,W.X]#d'UTK^s]#b8tuPvuQwx2y1z'y1z{}|8~v
y1wuQuQ00z'vj++MYW/KOPR_#UUTV#`*_#M,_&W.XKURo^eRZ._0XVMY[YKPWh[Y]S0_0XRT]N'M:RoZ[YKUUoRTf#KZ[:[_#MY*MrK#jf6jT`.W'Uo_#Z.Z.RZ6f6`c6KQ
OPRMR]Z^e_0*RZ6f6`XK_#MY]Z.RZ.f `8R[RMZ'_0[N6X_#U=_#Z.cXK_#MY]Z._0d"UTK[Y]c.RMOP_0XcKPS#KPXV[a.RZ6fd"N6[q4a._0[&RM
XKUTKPS0_#Z[[Y]_#Oa.RTKPS#K4[a6K^KPOPRTKZ[UTV#j6]#X\RZ'MY[_#Z.OQK#`d/KPbr]#XK,MY[_0X[RZ6f3[Y]q4XRT[YK:[a.RM8W'_0W/KPX`#q:Ka._#c
[Y]OQ]Z'MRc6KPX[a6KXKUKPS;_#Z[UR[YKPX_0[N6XK?]Z[a6K[Y]#W"RO0`"_#Z.c]Z.UTVhRT[P"f_0[a6KPXRZ6f]Z]N6Xc6KMY*M4_#UU[a6K
W'_0W/KPXM_0di]N.[4XKUTKPS0_#Z.OQK}[a._0[4q:K&a'_S#K2_0[a._#Z'cUTKcN.M[Y]MYKP[3_q(_V]N6Xb_S#]N6XR[YK&OQ]]#hd/]]#*MP`
d/KOP_#N.MYK?[a6KPV_0XK]#b8Z6]ea6KUWh[Y]e[a6K?[_#MY]#bqXRT[RZ.f&[a'RM(W'_0W/KPXja6K_0d'RoURT[V[Y]eb1]*OPN.M,]Zq4a._0[
RM4XKUTKPS0_#Z[2r]#X3c'N._#UUTV[Y]c.RoMOP_0Xcqa._0[RMZ6]#[ ,OP_#Zd/K}OQ]Z.MRc6KPXKc_#M_OQKZ[YX_#UI`iO a._0X_#OQ[YKPXRM[RO
brK_0[N6XK4]#bBRZ[YKUURf#KZ.OQK#RT[=RoMd/KURTKPS#Kc[a._0[+]S#KPX,0]#bB[a.K4Z6KN6X]Z'_#U.OQ]Z.Z6KOQ[RT]Z'M=]#b/]N6X\d'X_#RZ.M
 

"¡

(¢

:£

\¤

¥

o¦ 	¥

-//0Û¶ %% !=¡U
= C2
 H
!À;µ
 ¶:!	%&% f		&2%3% 2 =



~33



¹sº£~$»wº

~w¶Ýw¿$¾½

_0XK3RZ.a.Rd'RT[Y]#XV2_#Z.cMYKPXS#K[Y]&fRS#KN6WMYKZ.M]#XR_#U'RoZ6W'N6[M	*N6d.X_#^_#Z.R_#ZB`
3XKRZ6KPX`9K_0X Um`## j
a.RoMK *W'U_#RoZ.Mq4aVRTXXKUKPS;_#Z.OQK#` N'Z.c6KPX3S;_0X RT]N.M3Z._#^KM_#MRZ.c6KPW/KZ.c6KZ'OQK#`iRTXXKc.N.Z.c'_#Z.OQV#`BRZ 'N*
KZ.OQK_0d'RoURT[V#`Z6]S#KU[V#`=MYKPW'_0X _0d'RURT[V#`RMZ.]q(_#c._V*M}OQ]Z'MRc6KPXKc_#M}_#ZRo^W/]#X[_#Z[}Z6]#[RT]ZRZ^e_#ZV
 KUc'M]#b+_0X[R  OPR_#U9RZ[YKUoURTf#KZ.OQKMYKPK_MN.XS#KPVbr]#X3^e]#XK&c.KP[_#RUMP`iK#jf6jT` 
XKRZ.KP
X *N6d.X _#^e_#Z.R_#ZB`
#  6N6d.X_#^e_#Z'R_#ZKP[4_#UmjT` # # j
p%Z [a6Kb1]UU]q4RZ.f6`+q:K_0XKOQ]Z.OQKPXZ6Kc q4RT[a wuQuQ00z u !0wwYu; !#z.y1z{#j p%Z [a.RMb1X_#^eKPq+]#Xi`
[a6K[_#MY RM[VW'ROP_#UoUTV [a._0[]#bc6KP[YKPX^eRoZ.RZ6fqa6KP[a6KPXMY]^K W'RTKOQK]#bZ.]q4UTKc.f#K #
_ "N6KPXV.%
 $
OP_#Z d/Kc.KPXRTS#Kc brX]^ _Z6]	q4UTKc6f#Kd'_#MY'
K &(
j KPS#KPX_#U4XK_#MY]Z.RZ.fMOa.K^KMOP_#Z diK[_0#KZ RZ[Y]
_#OPOQ]N.Z[:a.KPXK#`brX]^ [a6KOPU_#MMROP_#U.]Z.K&RZ6brKPXKZ.OQKRM\OPU_#MMROP_#U6KZ[_#RU^KZ[ =[Y]}^]#XKMY]#W'a.RoMY[ROP_0[YKc
]Z6KM?OQ]^e^]Z6MYKZ.MYKRZ.b1KPXKZ'OQK	 jJ a6KZc6K_#URoZ6fq4R[aMN'OaXK_#MY]Z.RoZ6f}[_#MMP`6XKUTKPS;_#Z'OQKRM:]#br[YKZ
K*W'UT]RT[YKc&MY]3_#M9[Y]?^e_0#K,RZ.b1KPXKZ'OQK+^]#XK:KPOPRTKZ[8b1X]^ _OQ]^W'N6[_0[R]Z._#UWi]RoZ[9]#b.SRKPqjp%Z&]#[a6KPX
XK_#MY]Z'RZ6f W.X]#d'UK^eMP`[a6KLW'N6XW/]MYK RM[Y] K *W'URoOPRT[UTV c6KPX RTS#KLMY]^KRZ[YKZ.MR]Z._#UUTVOa._0X _#OQ[YKPXRTgPKc
W'RTKOQKM&]#b*Z6]	q4UTKc6f#KLrK#jf6jT`=[YKUU:^K_#UU\qa._0[}V#]N *Z6]q _0d/]N6[2,q:KPKP[V. j .]#XeMN.Oa W.X]#d'UTK^eM
r[a._0[_0XKZ.]#[:XKc.N.OPRTd'UK4[Y]ec6KOPRMRT]ZW.X]#d'UTK^M  `XKUTKPS;_#Z'OQK3_#UoMY]a._#M,_2X]UTK3[Y]W'U_V#`*b1]#XRZ'MY[_#Z.OQK
dV_#UUT]	q4RZ6fN.M[Y]Oa._0X _#OQ[YKPXRTgPKe[a6K2W'RKOQKM]#b:RZ6br]#X^e_0[RT]Zq:K_0XKRZ[YKPXKMY[YKcLRZdVb1]#Xf#KP[Y[RoZ6f
[a6K]#[a.KPX]Z6KMPj
9]q4a._0[?K *[YKZ[RM?[a6Kf#]_#U\]#b:Ro^W.X]	SRZ.fRZ.b1KPXKZ'OQKXK_#Oa._0d"UT*K ) p%Z ]#Xc6KPX[Y]_#c.c6XKMM3[a.RM
W/]RZ[P`"_e#KPVRMMN6K}RM[a6+
K ,!0.x -/6vI#v0y !0z"#1 ,!0.
x -"3u 2yr5v 4}]Z6K#jp%Z.c6KPKcB`i_#MMN.^eK[a._0[q+K}Z.]qs[a._0[
[a6K+XKMY]UN6[R]Z?]#b6MY]^K\XK_#MY]Z.RZ6f4W.X]#d'UTK^M OP_#Zd/K\MWiKcN6W]Z.OQK+XKUTKPS0_#Z[RZ6br]#X^e_0[RT]Z?a'_#Md/KPKZ
KUROPR[YKcBj+p%Z[a.KMRT[N._0[R]Zq4a6KPXKRT[4RM4OQ]^W'N6[_0[RT]Z'_#UUTVha._0Xc6KPX4[Y]W/]RZ[]N6[4MN'OaRZ6br]#X^e_0[RT]Z
brX]^ [a.K}RZ6W"N6[[a._#Z[Y]XK_#MY]Zc'RTXKOQ[UTVbrX]^ [a.K}RZ6W"N6[P`'OQ]^W'N.[_0[RT]Z._#U9diKZ.K  [M4_0XK2a._0Xc[Y]
d/KK W/KOQ[YKcBjpb:MY]6`9_#UT[YKPX Z._0[RTS#KN.MKM?]#b+XKUTKPS;_#Z'OQKeb1]#XXK_#MY]Z.RZ.f_0XK[Y]d/KeRZS#KMY[RTf_0[YKcBj.]#X
RZ.M[_#Z.OQK#`9MYK_0X Oa.RZ.fhb1]#X}XKUTKPS0_#Z.OQKeRZ6br]#X^e_0[RT]ZLOP_#Zd/KeUR^eRT[YKc dV OQ]Z.MRc6KPX RZ6f]Z.UTVW'RTKOQKM]#b
*Z6]q4UKc6f#K,[a._0[\OP_#Zd/K,f#KZ6KPX _0[YKcRZ_3[YX_#OQ[_0d"UTKq(_V#jpbiMN'OaeRZ.b1]#X^_0[RT]Z2c6KPW/KZ.c2]Z.UTV}]Z[a6K
*Z6]q4UKc6f#K\d'_#MK#`0_#Z.]#[a6KPX9W/]MMRTd'UTK=_0W.W'X]_#Oa&RM [Y]r[YKZ[_0[RTS#KUTV.OQ]^eWiKZ'M_0[YK\[a6K:OQ]^W'N6[_0[R]Z._#U
XKMY]N.XOQKMMWiKZ[RoZ c6KPXRTS*RZ6fL[a.KXKUTKPS0_#Z.OQK RZ6br]#X^e_0[RT]Z [a6X]N6fa ^e_#Z6
V "N6KPXRKMOQ]^W'N.[RZ6f
W'RTKOQKM]#bXKUTKPS;_#Z[RZ6br]#X^e_0[R]ZhOP_#Z[a6KZhd/K?S*RTKPq:Kch_#M4_br]#X^ ]#b8OQ]^W'RUo_0[RT]Z" j
.k l87:9; u=<\q u>U·*?#q ° z<µq¶r
@R[Y[UTKRM3Z.]q4ZL_0d/]N6[3[a6KeOQ]^W"N6[_0[RT]Z._#U=OQ]^eW'UTK6RT[V]#b+XKUKPS;_#Z.OQK#ja'RMW'_0W/KPX3OQ]Z[YXRTd"N6[YKM
[Y]  UU[a.RMf_0W j&a6K2OQ]^W'UTK 6RT[V]#b+MYKPS#KPX _#UUT]#fROId'_#MYKc XKUTKPS;_#Z'OQK&XKU_0[RT]Z.M3RM3Rc6KZ[R  KcRZ _
W.X]#W/]MR[RT]Z._#U=MYKP[Y[RoZ6f6B
j A:VUT]#fROId"_#MYKcq:K^eK_#Z [a'_0[}[a6KZ6]#[RT]Z.M}]#b,XKUTKPS0_#Z.OQKq+Kb1]*OPN.M}]Z
_0XK2Z6]#[4K *[YX_;UT]#fRoOP_#U9d"N6[d'N.RoUT[RZ.MRoc6K?[a6K}U]#fRDO C([a6KPV_0XK&c6K  Z6KcN.MRZ6f[a6K}MY[_#Z'c._0XcU]#fROP_#U
Z6]#[RT]Z'M\]#b(OPU_#MMROP_#Urbr]#X^&N.U_*`*^]c.KUm`UT]#fRoOP_#Uic.Kc.N.OQ[RT]ZB`KP[O0j\a.KMY[YXKMM,RM+Uo_#Rce]ZZ6]#[RT]Z'M+]#b
XKUTKPS0_#Z.OQK}[a._0[OP_#ZW.X]	S#K}a6KUW.brN'U/b1]#X3R^W.X]S*RZ6feRZ6brKPXKZ.OQK_#Z'cB`"RZW'_0X[ROPN'U_0X`6[a6K&^]MY[d'_#MRO
br]#X^ ]#b=R[P`iOPU_#MMROP_#U9KZ[_#RUo^KZ[P.j EKUTKPS0_#Z.OQK2RMOP_0W'[N6XKcdVhXKUo_0[RT]Z.M4RoZ[a6K2^KP[_#U_#Z6fN'_0f#K&]#b
[a6K&UT]#fRO0`.[a._0[RMP`.q:Kbr]#X^e_#UoRTgPK?XKUTKPS0_#Z.OQK}_#M_eXKUo_0[RT]Zd/KP[q:KPKZ]#Gd F%KOQ[M]#b8[a6KW'X]#W/]MRT[RT]Z._#U
U_#Z6fN'_0f#K2rbr]#X^&N.U_#M+]#X:MYKP[M:]#bUoRT[YKPX_#UIM H	S0_0XR_0d"UTKM 9[aN.M\K *W.XKMMRZ6f}[a6K4b_#OQ[([a._0[:M]^K]#d F%KOQ[(RM
XKUTKPS0_#Z[[Y]MY]^K]#[a6KPX]Z6K#j
,q:] Z6]#[RT]Z.MW'U_V _ OQKZ[YX_#UX]UTK RZ [a.RoMeW'_0W/KPXj 4a6K  X MY[]Z6K#%
` JmPuPxe0z'v0y 0 KLM!0wN
x /TD O
;#w ymQ PQuy1zitRu -6uPz"tuPz  u SRZ.c.KPWiKZ'c6KZ.OQK&b1]#XMa.]#X[ 4[YKUUM[a._0[_W.X]#W/]MRT[R]Z._#Ubr]#X^&N.UT
_ &sRM
RZ.c.KPWiKZ'c6KZ[,brX]^ _fRTS#KZ MYKPV
[ U ]#b=S;_0X R_0d'UTKMRTb=_#Z.c]Z.UTVhRTb=RT[OP_#Zd/K}XKPqXRT[Y[YKZWK "N.RTS0_#UTKZ[UV
_#M&_br]#X^&N.U_RZq4a.RO aZ6]Z.K]#b[a6KS;_0X R_0d'UTKM}RX
Z U _0W.W/K_0XMja6KMKOQ]Z.c]Z.KRM[a6KZ.]#[RT]Z
]#Yb M!0wm{uvmvy1z{  {#yr0uQz uPv UZ![;#w ymQ PQuLyrz T
 M!0wN
x /T#
 &j p[hRMhRZ[R^e_0[YKUTV UoRZ6#Kc [Y] [a6K
\^]*_

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

Z6]#[RT]Z]#b+br]#X^&N.U_;IS0_0XR_0d'UTKRZ'c6KPW/KZ.c6KZ.OQK&d/KOP_#N.MYK#`9_#Mq+KMa6]q`9[a6KXKMN'UT[3]#b:br]#Xf#KP[Y[RZ.f[a6K
MYKP[?]#b:S;_0X R_0d'UTKM U RZL_b1]#X ^}N.UoT
_ &sOP_#ZdiKc6K  Z6Kc _#M?[a6KeMY[YX]Z.f#KMY[OQ]Z.MYWK "N6KZ.OQK]#b & d/KRZ6f
RZ.c.KPWiKZ'c6KZ[b1X]^ Uej A:]#[a Z6]#[RT]Z'M&a'_S#Kh_0W.W/K_0XKc RZ[a.KUR[YKPX_0[N6XKN.Z.c6KPX}S;_0XR]N.M}Z'_#^KM
_#Z.cq4RT[aMYKPS#KPX_#U/c.R iKPXKZ[?rd'N6[:WK "N.RS;_#UTKZ[ \c6K  Z.RT[R]Z.MP`_#Z.c_0XK?a.Rfa.UTVN.MYKPbN.U.br]#X,^e_#ZVe[_#MY*M
RZh_#N6[Y]^_0[YKcXK_#M]Z.RZ6f_#Z.c^_#ZVW.X]#d"UTK^eM(RZh_0X[R  OPR_#UBRZ[YKUURTf#KZ.OQK C
0j}/*v	!#xvuthtutD/vy0!0z #z"t%I!0z6u	M/'uPz u
=z"t0yrz{j\6]#X^&N.U_;IS0_0XR_0d'UKRZ.c.KPWiKZ'c6KZ.OQKOP_#Zd/K
N'MYKPbrN'U8b1]#X&Oa6KORZ.f N.Z"M_0[RoM  _0d'RUoRT[V]#Xb1]#X&OQ]Z.MYKW"N6KZ.OQK  Z.c.RZ.f6j&p%Z.c6KPKc `9MY[YXN'OQ[N6XRZ6f
[a.K?Z6]	q4UTKc6f#K?d"_#MYK?dV  Z.c.RoZ6f&N'MYKPbrN'U"RZ'c6KPW/KZ.c6KZ.OPRTKM:^e_Vd/K3q+]#X[ac6]RZ6f2d/KPbr]#XK3XN.Z*
Z'RZ6f_#ZVMYK_0XO a_#UTf#]#XR[a.^hj=a.RoM+W'XRZ.OPRTW"UTKRM(_0[q:]#XRZL^RTXY
 OQpUTX _#RT[aB`0## j+p%Z
]#W'[R^e_#UOP_#MYKMP`9b1]#X?K6 _#^W'UK#`_hM_0[RM  _0d'RURT[VhW.X]#d'UK^ qRUU9diKc6KOQ]^eWi]MKcRZ[Y]_hM^e_#UU
ZN.^}d/KPX]#b4M_0[RoM  _0d'RUoRT[VW.X]#d'UK^eM?]Z K_#MRTKPX&Z.]q4UTKc.f#Kd'_#MYKMrq4RT[a UTKMMS;_0X R_0d'UTKM _#M
Ma6]q4Z dV 8 _0X _#Z.cX

 KUoc6KPX[ # jM}[Y] R^W.X]	SRoZ6fRZ6brKPXKZ.OQK#`[a.RM}OP_#Zd/KW"_0X[ROPN*
Uo_0XUTVa.KUTW.bN.U8RZ [a6KMR[N._0[RT]Z q4a6KPXK[a6KeMYKP[]#b " N6KPXRTKM?N.Z'c6KPXOQ]Z.MRc.KPX_0[RT]ZRM?UoR^eRT[YKc
[Y] br]#X^&N.U_#M $ [a._0[_0XKLMYV*Z[_#OQ[ROP_#UoUTV]#XMYK^e_#Z[ROP_#UUTV.RZ.c6KPW/KZ.c6KZ[?brX]^ _MYKP[ U ]#b

S0_0XR_0d"UTKMPj
jW/'uQw 4h#z6 |+uPw yrz{MYKPK2RZW'_0X[ROPN'U_0X^eRTXOQpUX_#RT[aB`0## `\t0ym{#z!0 y1&MYKPK2[a6K&q+]#X
d
V 3_0Xq4RO a6K#` #  j EKZ'c6KPXRZ6f_b1]#X ^}N.Uo_ &RZ'c6KPW/KZ.c6KZ[brX]^ _MYKP[ U ]#b(S;_0XRo_0d'UTKM
[a.X]N6faS;_0XRo_0d'UTK4br]#Xf#KP[Y[RZ.f&fRS#KM+X RMYK4[Y]_}b1]#X ^}N.Uo_[a._0[(RM "N6KPXVIWK "N.RTS0_#UTKZ[\[Y] & qjXj[Pj
U RZ [a6KMYKZ.MK[a._0[KPS#KPXV UT]#fROP_#UOQ]Z.MWK "N6KZ'OQK $ ]#b & [a._0[RMeRZ.c.KPWiKZ'c6KZ[2brX]^ U
_#UoMY]hRM?_UT]#fROP_#UOQ]Z.MYWK "N6KZ.OQK]#b & ]Z.OQKe^e_#c6KRZ'c6KPW/KZ.c6KZ[4brX]^ U` _#Z'c [a6KOQ]ZS#KPXMK
a.]Uc.Me_#Mq+KUoUmj p%Z[YKPXKMY[RZ6fUV#`,[a6KMYKP[]#b?_#UU[a6Kb1]#X ^}N.Uo_#MeRZ.c6KPW/KZ.c.KZ[brX]^ _ MYKP[]#b
S0_0XR_0d"UTKMRM_ MY[_0d"UTK W.X]*c.N.OQ[RT]Z  KUc	 *RTKPf#KUm`  }p%Z6]N6K#` #  `_#Z'c br]*OPN.MRZ6f ]Z
MN.Oah_2W.X]c.N'OQ[RT]Z  KUcRM:S;_#UN'_0d'UTKb1]#XMYKPS#KPX _#U/XK_#MY]Z.RZ.f2MOa6K^KMj\6]#X4RZ'MY[_#Z.OQK#`6RZ[a6K
OQ]Z'MRMY[YKZ.OQVId'_#MYKc}brX_#^KPq:]#Xbr]#Xc.Ro_0fZ6]MRM\5 E4KRT[YKPX`  # `[a.1K "N6KPXRTKM9q+K:_0XK(RZ[YKPXKMY[YKc
RoZ}_0XK([a6K(OQ]Z 'RoOQ[M9]#b"[a6K(MYVM[YK^[Y]d/K(c.R_0fZ6]MKcB`#RmjK#jT`#[a6K,OPU_#N.MYKM[a._0[8_0XK,RZ.c.KPWiKZ'c6KZ[
brX]^KPS#KPXV&S0_0XR_0d"UTKN.MYKc2[Y]XKPW.XKMYKZ[=[a6KMYV*MY[YK^h`K *OQKPW'[=[a6K4_0d'Z.]#X^e_#URT[VW.X]#Wi]MRT[RT]Z.M
N'MYKch[Y]eKZ.OQ]*c6K?[a6K}OQ]^W/]Z6KZ[4br_#RUoN6XKMPj
j ;z !0|,ut{+
u P;uQvIw /5v /wyrz{#`\	v ! -"5y WO P;PutwYu; !0z'y1z{je6]#X^&N.U_;IS0_0XR_0d'UK2RoZ.c6KPW/KZ.c6KZ.OQK&RM
 
_#KPV Z6]#[RT]Z br]#Xc.KOQ]^W/]MRZ6f_LW'X]#W/]MRT[RT]Z._#U(*Z6]	q4UTKc6f#Kd"_#MYK   A br]#XMa6]#X[  `,RmjK#jT`
_  Z'RT[YKMYKP[2]#bW'X]#W/]MRT[RT]Z._#U=b1]#X^&N.U_#M`=RZ[Y] M^e_#UoUTKPX}MN.d.d'_#MYKMPj *N.O a _c6KOQ]^eWi]MRT[RT]Z
RoM_#UU8[a6K^e]#XKS;_#UoN._0d'UTK_#M[a.KeZN.^}d/KPX?]#b(S;_0XRo_0d'UTKM3[a6KeMN.d.d'_#MYKMc.KPWiKZ'c.M]ZRMUT]	qj
W.[R^e_#UUV#`	_Z6]	q4UTKc6f#K+d'_#MYK &"!$# $ (&%('''% $*),+(RMbrN'UUTV3c6KOQ]^W/]M_0d'UTK:RTb.RT[OP_#Z&d/K\q4XRT[Y[YKZ
_#N
M &-! & (/. '('(' . & ) q4a.KPX%
K &10(_#Z.c &/2c.KPWiKZ'c]Zc.RM FY]RZ[3MKP[M]#b:S;_0XRo_0d'UTKM3br]#X_#UU
 ^eRTX
35!
4 6.j *N'Oa c6KOQ]^W/]MRT[RT]Z'M?q+KPXKOQ]Z.MRc6KPXKc RZMYKPS#KPX _#U\W'_0W/KPXM5 8_0XRT*aB` # 7
8OQp%UTX_#RT[a 9
` 0##* _0,X "N.RM 9]#IX "N6KP[P/` 0##3qRT[aLMY]^KPq4a'_0[c.:R /KPXKZ[^e]#[RTS;_0[R]Z.MPj
4a6K^]MY[RoZ[N.R[RTS#Kh^]#[RTS0_0[RT]Z br]#XMYK_0XO a.RZ6fMN.Oa c.KOQ]^W/]MRT[RT]Z.MRoM[a._0[RT[fRS#KM_
d/KP[Y[YKPXN.Z.c.KPXMY[_#Z.c.RoZ6f]#b.[a6K:*Z6]q4UKc6f#K+d"_#MYK#`#dV}MY[YXN.OQ[N6X RZ6fR[q4RT[a}XKMYW/KOQ[[Y]erWi]MMRTd'UTK
c'RM FY]RZ[(d'N.[Z6]#[Z6KOQKMM_0X RUTV.:MYKP[M]#b[Y]#W'ROPM; _0,X "N.RYM 9]#IX "N6KP[P,` 0## j
<6j P uQym0u LwYuPy1 0y !0z 0z"t yr
z ,!#z6 y1vuPz M4DO%	v !0TuPw%#z'vwYu; !#z.y1z{#=
j KOQ]^W/]MRZ.f _ W'X]#W/]MRT[RT]Z._#U
*Z6]	q4UTKc6f#Kd'_#MY'
K & RZ[Y] MN6d.d'_#MK5
M # & ( %('('('>% & ) +W.X]S#KM_#UMY][Y] diKXKUTKPS0_#Z[b1]#Xc6K  Z*
RoZ6f&RoZ.OQ]Z.MRM[YKZ.OQVI[Y]UKPX_#Z[(XKUo_0[RT]Z.M:_#M(q+KUU/_#M(d/KURTKPb/XKPS*RMR]Z]#W/KPX_0[Y]#XMj=a6K?_0W.W.X]_#O a
W'X]#W/]MYKcd@
V ?(a.]#W.X__#Z'X
c 8_0XRa [ ##}W.X]*OQKPKc.M2_#M&b1]UU]q4MM C[a6K*Z6]	q4UTKc6f#Kd'_#MYK &
\^]^\



~33



¹sº£~$»wº

~w¶Ýw¿$¾½

RoM  XMY[2W'_0X[RT[R]Z6Kc RoZ[Y]@# & ( %('('('&% & ) +MN.O a [a._0[[a6KhRZ[YKPXMYKOQ[RT]Z ]#b[a6KhU_#Z6fN._0f#KM]#b
[a.KeMN6d.d'_#MKM2RIjK#jT` [a6KMYKP[MU	6	& 0m4]#b:S;_0XRo_0d'UTKM[a6KeMN6d.d"_#MYKM3c6KPW/KZ.c]Z"_0XKe_#M
M^e_#UU_#M?W/]MMRd'UTK#/[a6KZ $ RM?RZ.b1KPXXKcbrX]^ &sqjXj[Pj2[a6KfRTS#KZLW'_0X[RT[RT]Z RTb+_#Z'c ]Z.UTVRb
[a.K2OQ]DZ FYN.Z'OQ[RT]Z ]#b+_#UU &10+MN.Oa [a'_0[
 U	.	&10
U.	$8 !
4 RoMOQ]Z'MRMY[YKZ[_#Z.c
KZ[_#RU
M $\j\p%Z_eXKPS*RMR]ZhMRT[N._0[RT]Z `6[a.RM_0W.W'X]_#Oa_#UMY]eKZ.MN6XKM,[a._0[4[a6K]Z.UTV]Uchd/KURKPbrM
[a'_0[^e_Vd/K[a6X]q4Z_q(_V _0XK2_0di]N.[4[a6K}S;_0XRo_0d'UTKMXKUTKPS0_#Z[[Y][a.K}RZ6W"N6[br]#X^}N'U_*j48R 
Z'_#UUTV#`_#M=XKOQKZ[UTV2Ma6]	q4Z2dV&MY]^eK]#b"[a.K_#N6[a6]#XM]#bi[a6K,W.XKMYKZ[W"_0WiKPX`b1]#Xf#KP[Y[RZ6fOP_#Zed/K
_#c.S;_#Z[_0f#KP]N.MUTVK W"UT]RT[YKc_#M_q:K_0#KZ.RZ6f^KOa'_#Z.RM^ b1]#XXKOQ]	S#KPXRZ6fhOQ]Z.MRoMY[YKZ.OQVhbrX]^
_#ZRZ.OQ]Z.MRMY[YKZ[  A5 @9_#Z6%
f _0,X "N.RMP` 0#  j
j P uQym0u  /^-6t#vuQ
j  diKUoRTKPb.N6WBc._0[YK\]#W/KPX_0[Y]#X=^_0W'M9_*Z6]qUTKc6f#K:d'_#MYYK & _#Z.c}_#Z2RZ.W'N6[br]#X^&N.U_
$K *W.XKMMRoZ6fMY]^eK:K *W'URoOPRT[ KPS#]UN6[R]Z}]#b"[a6K:q+]#XUoc[Y]?_3Z6KPq Z.]q4UTKc.f#K+d'_#MK & $\G & _#Z.c
&
 $XKMYW/KOQ[RTS#KUV}XKPW'XKMYKZ[[a.K_0f#KZ[ M+Z.]q4UTKc.f#K P5u M!0wu_#Z.c vuPw[a.K,KPS#]UN6[RT]Z2]#bi[a6K
q:]#XUcK W.XKMMYKcdV3[a6K+N.W/c'_0[YK#j KPS#KPX_#U_#N6[a6]#XM9_0XfN6Kc[a._0[9_#Z}N6WBc._0[YK]#W/KPX_0[Y]#XMa6]N.Uc
W'XKMYKPXS#K+[a6K+W"_0X[ ]#b.[a6K+Z.]q4UTKc.f#K\d'_#MYK:Z6]#[9OQ]Z'OQKPXZ6Kc}dV?[a6K:N6WBc._0[YK#j94a.RMUK_#c.M [Y][a6K
br]UUT]	q4RZ6f[a6XKPKQMY[_0f#KW'X]OQKMMP`/W.X]#W/]MYKcRoZ.c6KPW/KZ.c6KZ[UTVdV ]a.KPX[V#` @9N6;_#MgPKPq4ROQg#`B_#Z.c
_#c._#URoZ.MY0_; A:N.f*_ F[ # \_#Z.c2dVKPXgRTf_#Z.c ER  [ # _#Z'ceZ._#^Kch_#Z.c 
!"!$#.`
XKMYW/KOQ[RTS#KUTV.I C,Rrc6KP[YKPX^eRZ.K[a6KS0_0XR_0d'UKM8XKUTKPS0_#Z[+[Y][a6K4N.W/c'_0[YK#`Z._#^KUTV#`%
 U.	 $8 
RoR14b1]#Xf#KP[[a6KMYKeS0_0XR_0d'UKMRoZ &s[Y]h]#d.[_#RZ_hZ.KPq b1]#X ^}N.Uo_
&'")(%+* U,	.	 & % 
 U.	 $8Y 
RoRR12K *W'_#Z.c dV $\j p%Z ^e]#XKLOQ]^W'_#OQ[[YKPX^eMP`[a.RMN6WBc._0[YK]#W/KPX_0[Y]#XhRMK W.XKMMYKc dV
&- $!.&'")(%+* U,	.	 & % 
 U.	 $8Y0+
/ $\j\aN.MP`*d/]#[ah]N6X,XKMN'UT[M(]Zh S4RZ'c6KPW/KZ.c6KZ.OQK
_#Z'c}S0_0XR_0d"UTK+br]#Xf#KP[Y[RZ.f3_0XK:XKUTKPS;_#Z[8[Y]?[a6K,OQ]^W'N6[_0[R]Z._#U*RMMN6KM9W/KPX[_#RZ.RoZ6f4[Y]3[a.RM*RZ.c
]#b8d/KURTKPb9N6WBc._0[YKMPj
jwu0 !0z.yrz{ Q P3!/*v} v0y !0z21}t,u Py1 0y !0z xe ;y1z{31 -" #z.z.yrz{#j @ ]#fRoOP_#U:Uo_#Z6fN._0f#KM&b1]#X2XK_#M]Z.RZ6f
_0d/]N6[_#OQ[RT]ZeK W.XKMM8[a6K,K /KOQ[Mc6KP[YKPX^RZ.RMY[RoO\]#X=Z6]#[P`OQ]Z.c.RT[RT]Z'_#U]#X+Z6]#[ 9]#b"_#OQ[RT]Z'MdV
^eK_#Z.M\]#bW.X]#W/]MRT[RT]Z'_#U6b1]#X ^}N.Uo_#M	 
KUTbr]Z.+
c  @9RTbMOa.R[Yg#` #   *_#Z.c.KPq:_#UUI` # .._0XfRKPX`
@9_#Z6f6`  _0IX "N.RoMP` 0##*4KPXgRTf6` @9_#Z6f6*` _0IX "N.RoMP`  ]U_#OPMYKPi9` 0#    Z.c.RoZ6fe[a6K2S0_0XR 
_0d"UTKM([a6K?K /KOQ[M4_0XKc6KPW/KZ.c.KZ[(]ZKZ._0d'UKM([Y]Rc6KZ[RTbrVe[a6K?S0_0XR_0d'UTKM:q4a.]MYK?[YXN6[aS0_#UN6K
^_Vd/KOa._#Z6f#KcdVe[a6K3_#OQ[RT]ZB6^]#XKP]S#KPX`.br]#X^&N.U_;UR[YKPX_#U'RZ'c6KPW/KZ.c6KZ.OQK65_}XK  Z6K^KZ[
]#b SRZ.c6KPW/KZ.c.KZ.OQK2[a._0[q:KRZ[YX]*c.N.OQK5L_#UMY][YKUUoMN.MRZq4a.RO ac.RTXKOQ[R]Z rb1X]^ b_#UMYK
[Y]h[YX N6K&_#Z'c H	]#X?b1X]^ [YX N6K}[Y]hb_#UMYK	4[a6K&W/]MMRTd"UTK}O a._#Z6f#K^e_V]*OPOPN6Xja.RoMRMKMYW/KOPR_#UoUTV
N'MYKPbrN'U/b1]#X  UT[YKPXRZ6f2]N6[RXXKUTKPS0_#Z[_#OQ[R]Z.MRZh_ec.KOPRMRT]Zh^e_0*RZ6f]#X4W'U_#Z.Z.RoZ6f}W'X]#d'UTK^hj
j -iwY0u PuPwYuPz  u?wYu -"wYuQPuPz'vI#v0y !0z.1
j @]#fROP_#U'Uo_#Z6fN._0f#KM=br]#X\XKPW.XKMYKZ[RZ6f?W.XKPb1KPXKZ'OQKqXRT[YK,KUK^KZ*
[_0XVf#]_#UM_#M3W'X]#W/]MRT[RT]Z._#Ub1]#X ^}N.Uo_#M_#Z'cR[RM3OQXN'OPR_#U[Y]Roc6KZ[Rb1V[a.]MYK2S;_0XRo_0d'UTKM[a._0[
a'_S#KZ.]3RoZ 'N6KZ.OQK(]Z[a.K_0f#KZ[ M+W.XKPbrKPXKZ.OQK#ja6KPXKPb1]#XK#`b1]#X^&N.U_;IS0_0XR_0d"UTK:RoZ.c6KPW/KZ.c6KZ.OQK
a'_#M,_#ZRo^W/]#X[_#Z[:X]UTK3[Y]2W'U_V"*br]#XRZ.MY[_#Z'OQK#`[a.KbrX_#^KPq:]#X]#b9MY]0OP_#UUKc uPvuPw y1 -*0w0y PM/
W'XKPb1KPXKZ.OQK,MY[_0[YK^KZ[M=]#b"_#Z_#Z.N
c K_0XU [ # <8RZ[YKPXW.XKP[M_3W'XKPb1KPXKZ.OQK:R[YK^ $ C3798;:<7
dV Cbr]#X_#ZVW'_#RTX3]#b:q+]#X Uc.M2>= % =@?MN.Oa [a._0[eR1=BA !C7`\RR1D=@?EA !:7 _#Z.c RRR1F= _#Z.c
=@?OQ]RZ.OPRc6K]Z _#UU4S0_0XR_0d"UTK+
M $ 0z"tG7 0wu yrz"tu -6uQz"tuQz'v w !0x2`[a6KZ q:K a'_S#KL_ M[YXROQ[
W'XKPb1KPXKZ.OQK]#b= ]S#KPX=@?1j
.k lIHKJ u{·r³´mÚÃ·³uw{gz3{MLON r|wz3{#³>Pz$·³uw{gu=>J·*?Ãq ° z=<µqsr
a6K4XKMY[\]#bB[a.KW'_0W/KPX+RM\MY[YXN.OQ[N6XKc_#M+b1]UU]q4MPj b1[YKPX(MY]^Kb1]#X^_#U.W.XKUoR^eRZ._0X RTKMfRTS#KZRZLKO
[RT]Z `[a6K(#KPV2Z.]#[RT]Z2]#b"br]#X^&N.U_;IS0_0XR_0d'UK:RZ'c6KPW/KZ.c6KZ.OQK:RM8W.XKMYKZ[YKcRZ KOQ[R]Z  j A:KOP_#N.MK4RT[
\^]+Q

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

OP_0W.[N6XKM=_3S#KPXV2d'_#MRO:br]#X^]#b/UT]#fROId'_#MKceRZ.c6KPW/KZ.c.KZ.OQK#`0[a.RM8XKU_0[R]Za._#M=_#UTXK_#c.V}d/KPKZRZ[YX]0
c.N.OQKcRoZ2[a6KURT[YKPX_0[N.XK,N.Z.c6KPX=MYKPS#KPX _#U.Z._#^KMP`URT#K,RZ "N6KZ.OQK_0d'RUoRT[V5 A:]N6[RUoRTKPX` # < `*XKUTKPS0_#Z.OQK
[Y]_MN6Gd FYKOQ[4^e_0[Y[YKPX5 @_0#K^eKPV#KPX` # # `i]#XXKc.N.Z'c._#Z.OQVL ]a.KPX[VKP[_#UmjT` #  j UT[a6]N.faRT[
RMOQ]Z.OQKPW'[N._#UUTV&_#Z.c2[YKOa.Z'ROP_#UUTV&MR^W'UK#`;[a'RMZ6]#[RT]Za._#MZ.]#[diKPKZM[N.c.RTKc2RZ_?MYV*MY[YK^e_0[RoO(q:_V#`
_#Z.c}]N6X8S#KPXV  X MY[OQ]Z[YXRTd"N6[RT]Z_#Ro^eM9_0[  UoURZ6f,[a.RoMf_0W `  XMY[dVfRSRZ.f4MYKPS#KPX_#U*WK "N.RTS0_#UTKZ[9Oa'_0XY
_#OQ[YKPXRTg_0[R]Z.M]#b[a.RMZ6]#[R]Z r[a.RoM4RMN'MYKPbrN'Um`'_#MMYKPS#KPX_#U9W'_0W/KPXM4RZ[YX]*c.N.OQKc_#Z'cN.MYKc[a6K&M_#^K
OQ]Z.OQKPW.[MN'Z.c6KPX}c':R iKPXKZ[2Z._#^KM  `+_#Z.c MKOQ]Z.c dVRoZS#KMY[Rf_0[RZ6f OP_0XKPbrN'UUTVRT[M&OQ]^W'N6[_0[R]Z._#U
OQ]^W'UK *RT[V#j=p%ZW'_0X[ROPN.Uo_0X`q:KMa6]	q [a._0[P`.RZ[a.K?f#KZ6KPX_#UBOP_#MYK#`'O a6KO*RZ6fq4a6KP[a6KPX_2br]#X^&N.U_2RM
RZ.c.KPWiKZ'c6KZ[brX]^ _MYKP[:]#b S0_0XR_0d'UKM\RM 'OQ]^W'UKP[YK#j+a6KZ `q:Kf#]&d/KPV#]Z.ce[a.RoM=S#KPXVMR^W'UTK
Z6]#[RT]ZdVeRZ[YX]c.N'OPRZ6f?[a6K^]#XK  Z6KQIf#X_#RZ6KcZ6]#[RT]Z]#b !#w N
x /* 	 '
yvuQwY0 yrz"tu -6uQzituQz u(RZ]#X c6KPX
[Y]c.RMOQXR^eRZ'_0[YK[a6KMRT[N._0[R]Zqa6KPXK_b1]#X^&N.UT
_ & OQ]ZS#KPV*MM]^KRZ6br]#X^e_0[RT]Z_0d/]N6[?_UoRT[YKPX_#U
d'N6[2Z6] RZ6br]#X^e_0[RT]Z _0d/]N6[&R[M&Z.KPf_0[RT]ZBjLa.RM}XK  Z.K^KZ[2RM&a6KUTW.bN.U\q4a6KZ6KPS#KPX2[a6KW/]U_0XRT[V
]#b3RZ6br]#X^e_0[RT]Z RMMRTfZ'R  OP_#Z[P`q4a.RO a RM&[a6KOP_#MYKRZ ^e_#ZV p  KUc.MhRZ.OPUN'c.RZ6fOPU]MYKc*Iq:]#XUc
XK_#MY]Z'RZ6f_#Z'cXK_#M]Z.RZ6f_0d/]N6[_#OQ[RT]Z'M  j3JLK2_#UoMY]MY[N'c6VMYKPS#KPX_#URZ[YKPXKMY[RoZ6fZ6]#[R]Z.Mc.KPXRTS#Kc
brX]^b1]#X ^}N.Uo_;IS;_0XRo_0d'UTK(_#Z.cbr]#X^}N'U_;URT[YKPX_#URZ.c.KPWiKZ'c6KZ.OQK#`#MN.O ae_#M[a6KZ6]#[R]Z2]#by1.
x -"y 
(ut M!0Iw O
x /* 2	 & RM @9RT[%: S=_0XY+MR^eW'UR  Kc2RTbBRT[:c6KPW/KZ.c.M]ZKPS#KPXVeUR[YKPX_#U9rS0_0XR_0d'UK	]OPOPN.XXRZ6f}RZRT[ =_#Z.c
N
[a6KOQ]#XXKMYW/]Z.c.RoZ6fW.X]*OQKMM]#bMRo^W'URTbrV*RZ6f_b1]#X ^}N.Uo_*j KMYW'R[YK[a.RMOQ]^W'UTK 6RT[VL_#Z.cd/KOP_#N.MYK
[a6KMRTgPKe]#b_MR^W'UoR  Kcb1]#X ^}N.Uo_OP_#ZZ6KPS#KPX&d/KU_0Xf#KPX&[a._#Z[a6KMRgPKe]#b,[a6K]#X RTfRZ._#U8br]#X^&N.U_*`
MR^eW'UR  OP_0[R]Z}OP_#ZW.X]S#K_3S;_#UN'_0d'UTK(XKUTKPS0_#Z.OQKQId'_#MYKcW.XKPW.X]OQKMMRZ6f3b1]#X+R^W.X]	SRoZ6f^_#ZV2br]#X^eM
]#bRZ6brKPXKZ.OQK#j
p%%
Z KOQ[RT]Z <6`q:K[N6XZ[Y][a6K4MYKOQ]Z.ce#KPV2Z.]#[RT]ZB`Z'_#^KUTYV M!0wm{uvmvy1z{?{#yr0uQzPuv ![;#w ymQ PQu
yrzY !0wN
x /* 5 @RT
Z  EKRT[YKPX` # < j+a6K3br]#Xf#KP[Y[RZ6fW'X]OQKMM+W"U_V*M,_#ZhR^W/]#X[_#Z[+X]UTK?RZ^e_#ZV
p?[_#MYM&_#Z.c a._#Md/KPKZM[N.c.RTKcRoZ[a6KURT[YKPX_0[N6XKN.Z.c6KPXS;_0XR]N.M]#[a6KPX2Z._#^KM`MN'Oa_#M}S0_0XR 
_0d'UTK&KUR^RZ._0[RT]ZB`i]#X^e_0XfRoZ._#URTg_0[RT]Z  ?]a.Uo_#MP*` ]#X _#Um`  _0KZ.Z.RI` ## j KPS#KPX _#UMYK^e_#Z[ROP_#U
Oa'_0X_#OQ[YKPXRTg_0[RT]Z'M}_#Z.c^KP[_0[a6KP]#XKP[ROW.X]#W/KPX[RTKM3]#b(br]#Xf#KP[Y[RZ6f_0XKW.XKMYKZ[YKc j A(_#MYKc]Z[a.RM
Z6]#[RT]Z `.q+K}RZ[YX]c.N'OQK_#Z_#c.c.R[RT]Z._#UBZ6]#[RT]Z]#b8c.KPWiKZ'c6KZ.OQK?d/KP[q:KPKZ[q+]b1]#X ^}N.Uo_#M,fRTS#KZ_MYKP[
]#b/S;_0X R_0d'UTKMM C9q+KMY[_0[YK4[a'_0[ & RoMWK "N'RTS;_#UKZ[[Y
] 
 qjXj[Pj U RTb/_#Z.ce]Z'UTV&Rb"d/]#[abr]#X^&N.U_#M=_0XKUT]#f0
ROP_#UUV}WK "N.RTS0_#UTKZ[=]Z.OQK^_#c6K4RZ.c.KPWiKZ'c6KZ[8brX]^ KPS#KPXVS;_0XRo_0d'UTK,K 6OQKPW.[\[a6]MK4]#b Uj<KPXK_0f_#RZB`
RT[,RM(R^W/]#X[_#Z[([Y]e^e_0#K_2c.RMY[RoZ.OQ[RT]ZdiKP[q+KPKZ_2S;_0XRo_0d'UTK3_#Z.chRT[M(Z6KPf_0[RT]Zrbr]#XRZ.M[_#Z.OQK#`6]Z6K
OP_#ZdiKRZ[YKPXKMY[YKcRoZ[a6K4W/]MR[RTS#KOQ]Z 'ROQ[M+]#bB_MYV*MY[YK^h`]Z.UTV. j6]#X:[a.RM=W"N6XW/]MYK#`q:KRZ[YX]*c.N.OQK
_?Z6]#[RT]Z2]#b/URT[YKPX _#Ubr]#Xf#KP[Y[RZ.f[a._0[XK  Z.KM8[a6KOQ]#XXKMYW/]Z.c'RZ6f3Z6]#[RT]Z2]#biS;_0XRo_0d'UTK:b1]#Xf#KP[Y[RoZ6f6jJLK
Ma6]	q a6]	q OPUT]MKc*Iq+]#X UceRZ6brKPXKZ.OQKOP_#Zd/KMR^W"UTV}O a._0X_#OQ[YKPXRTgPKcbrX]^[a6KOQ]#XXKMYW/]Z.c.RoZ6f3WK "N.RS
_#UTKZ.OQKXKU_0[RT]Z j88RZ'_#UUTV#`q:KRc.KZ[RTbrV&[a6KOQ]^W"UTK *R[V]#bBd/]#[aZ6]#[R]Z.M=]#bBWK "N.RTS0_#UTKZ.OQK4_#Z'cMa6]	q
[a6K^ [Y]d/Ka._0Xc   - OQ]^W"UTKP[YK	 j M_OQ]Z.MYWK "N6KZ.OQK#`"b1]#Xf#KP[Y[RZ6fS0_0XR_0d"UTKM(]#XUR[YKPX_#UM,q4R[a.RZh_
br]#X^}N'U_OP_#Z.Z.]#[d/K}_#O a.RTKPS#Kc RZWi]UVZ6]^R_#UB[R^K&RZ[a.K}f#KZ6KPX _#U9OP_#MYKN.Z'UTKMM[a.K}W/]UTV*Z6]^eR_#U
a.RTKPX _0XOaVOQ]UoU_0W'MYKM_0[[a6K  X MY[UTKPS#KU1 j+JLK}_#UMY]Ma6]q [a._0[_W/]UTV*MRTgPK3W.X]#Wi]MRT[RT]Z._#UiXKPW.XKMYKZ*
[_0[RT]Z ]#b,b1]#Xf#KP[Y[RZ6fRoMS#KPXVN.Z'URT#KUTV[Y]K 6RMY[}RoZL[a6Kf#KZ.KPX_#U+OP_#MK#jhJLKZ6KPS#KPX[a6KUTKMM}W.XKMYKZ[
MY]^KXKMY[YXROQ[YKcMRT[N._0[RT]Z'M(q4a6KPXK?br]#Xf#KP[Y[RZ6fRM([YX_#OQ[_0d'UTK#j
KOQ[R]X
Z Ma6]	q4M} SRZ.c6KPW/KZ.c.KZ.OQKOPUT]MYKUVLXKU_0[YKc [Y]Z6]#[R]Z.M]#b4RXXKUTKPS0_#Z.OQK_#UTXK_#c6VRZ*
[YX]*c.N.OQKcLRZ [a.KeURT[YKPX_0[N6XK&dVS;_0XR]N.M?_#N6[a6]#XM%
j KOQ[RT]
Z hc.RoMOPN.MMYKM]#[a6KPXXKU_0[YKcLq:]#XL_#Z.c
MY#KP[O a6KM3brN.X[a6KPX4K *[YKZ.MR]Z.M]#b\M]^K}Z6]#[R]Z.M_#Z'cXKMN'UT[M4MY[N'c.RTKcRoZ[a6K}W'_0W/KPXj8RZ._#UUTV#` KO
[RT]Z OQ]Z.OPUN.c.KM[a.K&W"_0WiKPXj =X]]#brM3]#b+[a6K^e_#RZW.X]#W/]MRT[R]Z.M_0XK&XKPWi]#X[YKcRoZ_#ZL_0W.W/KZ.c'R ij
 fUT]MM_0XV]#b[a6KZ6]#[_0[R]Z.MRM_0[4[a6K?KZ.ch]#b8[a.RM(W"_0WiKPX`X RTfa[,d/KPbr]#XK?[a6Kd"RTd'URT]#f#X _0W'aV#j

\^]



~33



¹sº£~$»wº

~w¶Ýw¿$¾½

8A ìH H D íOìH	3ê
JLK  XMY([ XKOP_#UU M]^Kd'_#MRoOZ.]#[RT]Z.M,brX]^ W.X]#Wi]MRT[RT]Z._#U/UT]#fRO0`._#Z'chb1X]^ OQ]^W'UTK6RT[V[a6KP]#XV#j
7/lmk

°

=<

r¸u \u3Ü³·³uw{#z3±Cy?u3|³

;

@ KP
[ 
 d/K_  Z.RT[YKeMYKP[}]#b:W'X]#W/]MRT[RT]Z._#US0_0XR_0d'UKMPj

RM?[a6KeW'X]#W/]MRT[RT]Z._#UUo_#Z6fN._0f#K
d'N.RoUT[N6Wb1X]^
:`i[a6K2OQ]Z.Z6KOQ[RTS#KM3_#Z.c[a6K A+]]UTK_#Z OQ]Z.MY[_#Z[M*  &_#Z.c "&RZ[a6K}N'MN._#U
q(_V#j\6]#X,KPS#KPX+
V U!"
:#` 

%$ c6KZ6]#[YKM:[a6K3MN6d"U_#Z6fN._0f#K]#b&

f#KZ6KPX_0[YKcbrX]^ [a6K
S0_0XR_0d'UTKM3]#b U ]Z.UTV#j  yvuQwY0/]#'b 

%$ RM3KRT[a6KPX_hS0_0XR_0d"UTK2]#b U rW/]MRT[RTS#KURT[YKPX _#U14]#X[a6K
Z6KPf_0[RT]Z]#b_}S0_0XR_0d'UTK4]#b U Z6KPf_0[RTS#K?UR[YKPX_#U1 ja6KRTX:MYKP[(RM+c.KZ6]#[YK)
c (*$(`q4a.RU+K (*,$ rXKMYW -j (/$. 
c6KZ6]#[YKM&[a6KMYKP[&]#b,Wi]MRT[RTS#KrXKMW jZ6KPf_0[RTS#K	URT[YKPX _#UMd'N'RUT[N6W b1X]^ Uj  OPU_#N.MY)
K 0rXKMYWj9_
[YKPX2
^ 1 =]#%b 
3
 $ RM(_hrWi]MMRTd'UTVK^eW.[V.  Z.RT[YK3c.RM FN.Z.OQ[R]ZrXKMYWj*OQ]DZ FYN.Z'OQ[RT]Z"=]#b9URT[YKPX _#UM\]#b


%$(j  ?54 rXKMYW j*_ 64=\b1]#X ^}N.Uo_]#&b 

%$ RM:_  Z.RT[YKOQ]Z FN.Z.OQ[RT]Z]#bOPU_#N.MKM3rXKMYW j
c.R5M FYN.Z'OQ[RT]Z]#b:[YKPX^eM]#'b 

%$,j MN.MN._#Um`/KPS#KPXV  Z.RT[YK2MYKP[]#b:br]#X^}N'U_#M3b1X]7
^ 
3
% RM
Rc6KZ[R  Kcq4R[ah[a6K?br]#X^}N'U_2[a._0[4RM([a.KOQ]Z FN.Z.OQ[RT]Z]#bRT[M(KUTK^eKZ[MPj
6X]^ Z6]	q ]ZBG` & c6KZ6]#[YKM\_W.X]#W/]MRT[RT]Z'_#Ubr]#X^&N.U_*`RmjK#jT`_^K^}d/KPX=]#8b 
3
%ij U,	.	 &RM
[a6KMYKP[\]#bBW.X]#Wi]MRT[RT]Z._#U*S0_0XR_0d'UKM=_0W.W/K_0XRZ6f}R%
Z &j8pb (9"(*iG` U,.: ((8RM=[a.KMYKP[+]#bBS;_0XRo_0d'UTKM
brX];
^ 
 N6W/]Z q4a.RoOa URT[YKPX_#UM]#
b ( _0XK d'N'RUT[Pj +UTK^KZ[M]#
b 
 _0XKLc6KZ6]#[YK=
c <'?
` >?
` @ KP[O0j
\UK^KZ[M:]#&b (  _0XK3c.KZ6]#[YK)
c #`  ( #`  - KP[O0j 6N6d'MYKP[M+]#&b 
 _0XK?c6KZ6]#[YKc UeB` A#` CKP[O0j=p%Z]#X c6KPX
[Y]MRo^W'URTbrVZ6]#[_0[R]Z.MP`q:K4_#MMR^eRU_0[YK,KPS#KPXV2MRZ6fUTKP[Y]%
Z U !$#D< +q4RT[aRT[M=N.Z.8R "N6K(KUTK^eKZ-[ <"ja6K
 Fy Eu\]#b _}b1]#X ^}N.Uo_ &`*c6KZ6]#[YKcdVA &A
`*RM\[a6KZN.^}diKPX+]#bB]OPOPN.XXKZ.OQKM+]#b S0_0XR_0d'UTKM\RT[+OQ]Z[_#RZ.MPj 
W.X]#W/]MR[RT]Z._#UBbr]#X^&N.UT
_ & RMM_#Rc[Y]d/K}R
Z 44KPf_0[R]G
Z 44]#X^_#U.]#X^ : 4?4=4Rb=_#Z.c]Z.UTVRTb]Z.UV
W.X]#W/]MR[RT]Z._#U8MYV*^d/]UM_0XKRZL[a6KMOQ]#W/Ke]#b_#ZL]*OPOPN6XXKZ.OQK]#bD: RZ &jp[}RM?q:KUU I*Z6]q4Z[a._0[
KPS#KPXVW.X]#Wi]MRT[RT]Z._#U*br]#X^&N.U_ & d'N.RUT[N6Wb1X]^ [a6K4OQ]Z'Z6KOQ[RTS#KMF/:B` H(` ::#` I ]Z.UTV#`OP_#Zd/K[N.XZ6Kc
RZURZ6K_0X:[R^K?RZ[Y]2_#ZWK "N.RS;_#UTKZ5[ 4?4br]#X^&N.U_}dK
V J%W'N.Ma.RoZ6f}c6]	q4MZ L}KPS#KPXV]OPOPN6XXKZ.OQK]#b<: RZ
RT[RmjK#jT`6K *W'UT]RT[RoZ6
f K ]#Xf_#Z  MUo_q:_#Z.cXK^]S*RZ6fc6]N6d"UTKZ.KPf_0[RT]Z.MMRoZ.OQK: RM(RZS#]UoN6[RTS#K	 j
*URfa[UTV _0d'N.MRZ6fhq:]#Xc.MP`q+KOP_#UU=[a.Kbr]#X^}N'U_hXKMN'UT[RZ6fhbrX]^ [a'RMZ6]#X ^e_#URTg_0[RT]ZW.X]*OQKMMvr~6u
NON?P]#b & _#Z.chq:KZ6]#[YK ( 3 *P	 &+[a6KMYKP[4]#bUR[YKPX_#UM(brX]Q
^ (R]*OPOPN6XX RZ6fRZ[a6
K 4O4 ]#b &j=.]#X
RZ.M[_#Z.OQK#`0[a6'K 4O4]#b & !O:,Y :< T/ SPU H5V RoM: W HFX: SP/FY: V;a.KZ.OQK#`0q+K,a._S#5K ( 3 *P	 &/ !$#  % X: S % Y: V +j
4]#[YK4[a._0[=[a.+K 4?4 ]#b/_?b1]#X ^}N.Uo_?c6KPW/KZ.c.M8]ZeRT[M\MYVZ[_#OQ[ROP_#U"MY[YXN.OQ[N6XK#`RmjK#jT`[q+]}b1]#X ^}N.Uo_0K,[a._0[
_0XKMVZ.OQ[_0[RoOP_#UUTVc.:R /KPXKZ[,^e_Vha._S#K&c.:R /KPXKZ/[ 4O4M4KPS#KZRTb9[a6KPVh_0XK?WK "N.RTS0_#UTKZ[Pj
.N'UU\RZ'MY[_#Z[Ro_0[RT]Z.M]#b4S;_0XRo_0d'UTKM]#.
b UZ2
 _0XKOP_#UUTKX
c U| !0wTt; ( \[a6KPV_0XKc6KZ6]#[YKc dV
=%$ _#Z.c[a6KRTX?MYKP[?RMc6KZ6]#[YKG
c [/$,jJ a6K]
Z \ _#Z'_
c ^ _0XK2[q:]c'RM FY]RZ[MN6d'MKP[M]#*b 
:` = ` / %= a
c6KZ6]#[YKM:[a6O
K \ . ^}Iq:]#XUc[a._0[:OQ]RZ.OPRc.KM\q4R[a = `]b
Z \ _#Z.cqRT[a %= a]b
Z ^/j ZRoZ[YKPXW'XKP[_0[RT]Z
= ]S#KP+X 
3
%RoM FN.MY[(c
_ 
9Iq:]#XUcB`*_#Z.c= RM(M_#Rc[Y]2d/K3_2^]*c6KU"]#b & q4a.KZ6KPS#KPX,RT[,^e_0#KYM &
[YXN6K#j\JLKc6KZ6]#[Y
K d f' e"	 &([a6KMYKP[]#b8^]*c6KUM(]#b &j
6]#XKPS#KPXVbr]#X^&N.U_ &s_#Z.cKPS#KPXVS;_0X R_0d'UT
K >` &5gih / rXKMW j &'gih ( RM3[a6K2b1]#X ^}N.Uo_]#d'[_#RZ6Kc
dVLXKPW'U_#OPRZ.fhKPS#KPXV]*OPOPN6XXKZ.OQK]#Tb > RoX
Z &dVL[a6KOQ]Z.MY[_#Zc
[   "rXKMYW j * f  ; j &5j h ( rXKMYW j
&5j h / \RoM,_#Zh_0d.d.XKPS*R_0[RT]Zbr]#X &'gih ( rXKMYW 1
j &'gih / +qa6K)
Z 9RM,_2W/]MR[RTS#KUoRT[YKPX_#8U >_#Z.cbr]#X &'gih /
rXKMYW1j &'gih ( +q4a6Kk
Z 8RM,_Z6KPf_0[RTS#K}UoRT[YKPX_#UM%: >9j

3RS#KZ_#ZRZ[YKPXW.XKP[_0[RT]ZG= _#Z.c_hUoRT[YKPX_#X
U `q:KUTKP[&')l V>= % I?c.KZ6]#[YKe[a6KRoZ[YKPXW'XKP[_0[RT]Z
[a._0[fRTS#KMe[a6KM_#^K[YX N6[a S0_#UN6K_#M= [Y] _#UUS;_0XRo_0d'UTKM2K 6OQKPW.[[a.KS;_0X R_0d'UTKh]#3
b `,_#Z.c MN.O a
[a._0[&'"l V>= % I A !!j2p%ZL]#[a6KPXq:]#Xc.M`M&')l V >= % I3RM3[a6KeRZ[YKPXW.XKP[_0[RT]ZLM_0[RMYbrV*RZ6m
f \[a'_0[RM

nporqtsuXvXwFxty{z}|~{z}u-|yT{||u~Ofz}{|TyD~iu|&yuzvTo
\^]i

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

[a6KOPU]MYKMY[?[Y] =,j.]#X}RZ.M[_#Z.OQK#` W.X]	SRoc6Kc [a._0[
 ! #  % S>+_#Z.cG=4 6 ! =4SP! 0`q:Ka._S#K
&')l V>= % X: SPQ 6!:_#Z'c &')lV >= % :XSPQSP! *j ?,UTK_0XUTV#` RTb6= A !!:[a6KZG&'"lV>= % I!=,j2pb
(@! #i ( %('('('>%  ) +}RoM,_eOQ]Z.MRM[YKZ[4MKP[]#bUoRT[YKPX_#UMP`*[a6KZ-&')fV>= % (:,RoM,c6K  Z6Kch_#M
&')l V '('('  &')f V>= %  (  %('('('  %  )  '
@_#M[UTV#`*fRTS#KZh_#ZhRZ[YKPXW.XKP[_0[RT]Z
= _#Z.ch_&S;_0X R_0d'UT?
K >`*q+KUKPT[  3 * V9>= % >/(c.KZ6]#[YK?[a6K?RZ[YKPXW.XKQ
[_0[RT]ZL[a'_0[fRTS#KM[a.KeM_#^Ke[YXN.[a S;_#UN.Ke_#M = [Y]_#UU8S0_0XR_0d'UKM3K *OQKPW.
[ >`_#Z.c[a._0[fRTS#KM?[Y] >
[a6KS0_#UN6K3]#W.W/]MR[YK?[Y]e[a._0[fRTS#KZdV=,j
,q:]br]#X^&N.U_#
M  _#Z.c 
 _0XKM_#Roc [Y]d/K u M/*y100uQz'v}x !Dt /* !_b1]#X^&N.UX
_ & RTb3_#Z.c ]Z'UTV Rb
& 
/  &G/ 
j
p%Z[a.RM(W'_0W/KPX,q:KN.MYK?[a.KOQ]Z.OQKPW.[M]#bW.XRo^K?R^W'URoOP_0[YKM:_#Z'cW.XR^K?R^eW'UROP_#Z[MPja6K?MYKP[]#b
W.XRo^K?R^W'URoOP_0[YKM(]#b_br]#X^&N.U_ &`.c.KZ6]#[YKchd

V 	 
	 & `'RM4c6K  Z6Kch_#MM C
	 

 	&!$#02OPU_#N'MYKKA&OA ! &0 _#Z.c

4

0 ? OPU_#N'MYKMPj[Pj O
& A ! 0 ? _#Z.ck0 ? A ! 0&_#Z.c 0 A4! 0 ? +
'

^]Z6fL_#UU:[a6KR^eW'UROP_0[YKM}]#
b & RmjK#jT`+[a6KhOPU_#N.MYKM2KZ[_#RUTKc dV#& `+[a6KW.XR^eKR^eW'UROP_0[YKM
]#b.&_0XK[a6K^eRZ.R^_#U8]Z6KMqjXj[Pj A ! RIjK#jT`[a.KUT]#fROP_#UoUTVM[YX]Z6f#KMY[&]Z6KM  ja.KMYKP[&]#b:W'XR^K
R^W"UROP_#Z[M+]#b_br]#X^&N.U_ &`.c6KZ.]#[YKcdVb
	i	& `'RM4c6K  Z6Kchc.N'_#UUTV_#MMC


	"	&

!$#U1[YKPX

^ A 1GA ! & _#Z.c 4  1 ? [YKPX^ MPj[Pj#1 ? A ! & _#Z.c)1 A ! 1 ? _#Z.cb1 ? A4! 1*+ '
^]Z6fh_#UU[a6KR^W"UROP_#Z[M4]#b & RIjK#jT`B[a6K2[YKPX^eM?R^W"UTVRoZ6fL& `/[a6K2W.XRo^K&Ro^W'UROP_#Z[M]#b &
_0XK[a.K^e_ *Ro^e_#UB]Z6KM,qjXj[PjA ! RmjK#jT`'[a6KUT]#fROP_#UoUTVq:K_0#KMY[4]Z.KM  j
b+OQ]N6XMYK#`B[a6KMYKP[3]#b+W.XR^K&R^W'UoROP_#Z[M H;_0[YKM^_VOQ]Z[_#RZ WK "N.RTS0_#UTKZ[[YKPX^MIH;OPU_#N.MYKMjJLK
OP_#Z XKMY[YXROQ[]N6X_0[Y[YK^W.[RT]Z [Y]]Z6K[YKPXL
^ H;OPU_#N.MYKhbr]#XK_#O a MYKP[e]#b3WK "N.RTS0_#UTKZ[[YKPX^eIM H;OPU_#N'MYKMPj
[_0[YKc ]#[a6KPXq4RoMYK#`,R9
Z 
	i	 &_#Z'
c 	 
	 & `,]Z.UTV ]Z6KXKPW.XKMYKZ[_0[RTS#KWiKPXWK "N.RS;_#UTKZ'OQKOPU_#MMRM
#KPW.[Pj
 H_S % :<,_
/ VI  % e  +~6uuPYv !  -"w yrxuy1.x -"5y  #vu%
 !  & yo 1 P4
 z3v <Û±q 
k  uv & ! # 
t;u 
=z.yv5y !0z1
	

 	& !$#

H)S % H :XVXH  % :Ye3H % eH :@ % 3H-:YV-H)e

+ '

J uv <mÚÃ·z·³uw{#z3± J uwv <Û±q  ³·
a6KOQ]^W'UTK6RT[V&XKMN.UT[M\q+KfRTS#KRoZe[a.RM\W'_0W/KPX\XKPbrKPX:[Y]}MY]^K3OQ]^W'UK*RT[VeOPU_#MMYKM+q4a.RoOaec6KMKPXS#K
MY]^K XKOP_#UoUMPj ]#XKLc6KP[_#RUMOP_#Z d/Kbr]N.Z.c RZ 8_0W'_#c.R^eR[YXRT]N  M[ # <[YK [Yd/]]#"
j 
3RTS#KZ _
W.X]#d"UTK^ `iq:K2c.KZ6]#[YK}dV  [a6K2OQ]^W'UTK^KZ[_0XVW'X]#d'UTK^ ]#b j4JLK_#MMN.^K&[a._0[[a.K&OPU_#MMYKM
9`  _#Z.c L_0XKZ.]q4Z[Y][a6K?XK_#c6KPXj+a6K?br]UUT]qRZ6f2OPU_#MMYKM4q4RUU/_#UMY]d/KOQ]Z.MRc6KPXKc C
M B:RM([a6KOPU_#MM]#b8_#UoUBU_#Z6fN._0f#K/M ( MN.O ah[a._0+[ ( ! ( ( )
 ( - `6qa6KPXK
 - _#UoMY]Z.]q4Z_#!
( ( RoMRZ  _#Z.
c ( - RZ  9j a6K&OP_#Z6]Z.ROP_#U " - OQ]^W'UTKP[YK2W.X]#d'UTK^ RM!+$ #&%('*)M!$ #C,_
W"_#RTX]#b,br]#X^&N.U_#,
M +	$ % .7 -}RM}RZ !+$ #$%('/)M!$ # RTb(_#Z.c ]Z.UTV RTYb $ RMM_0[RM  _0d'UKe_#Z.c 7RMZ6]#[Pj
4a6KOQ]^W"UTK^KZ[_0XVeOPU_#MM  " - RM\[a6K3OPU_#MM=]#b9_#UU'U_#Z.fN._0f#K*M ( MN'Oa[a._0*[ ( ! ( ( . ( - `
qa6KPXK ( ( RoMRZ   _#Z.c ( - RZ  ja6KOP_#Z6]Z'ROP_#U  " - OQ]^W'UKP[YKW.X]#d"UTK^ RM,!+$ #&0
M +	$ % .7 -,RM(RZ !$ #(0 1/2 04'*)M!+$ #RTb_#Z.c]Z'UTVRTb $RM(M_0[RM  _0d'UTK
132 04'*)M!+$ #C_&W'_#RTX(]#b9b1]#X^&N.U_#5
]#X7 RM4Z6]#[Pj
7/l87

\^]76



~33



¹sº£~$»wº

~w¶Ýw¿$¾½

  - ! RM[a6KOPUo_#MM]#b_#UoU\U_#Z6fN'_0f#KM}XKOQ]#fZ.RTg_0d'UTKRZW/]UTV*Z6]^eRo_#U8[R^KdV_c.KP[YKPXY
^RZ.RMY[RoO?9N6X RZ6fe^e_#O a.RZ6K}KW" N.RW.W/Kcq4RT[a_#Z  L]#X_#OPUTK#`/RmjK#jT`/_c6KPS*ROQK&_0d'UTK[Y]MY]UTS#K2_#ZV

RoZ.MY[_#Z.OQK?]#b_#Z  ]#X4_   W.X]#d"UTK^ RZhN.Z.RT[([R^eK#j  - RM[a6KOQ]#XXKMYW/]Z.c'RZ6fOPU_#MM,]#b
bN.Z.OQ[R]ZW.X]#d'UTK^MPj
 &  - !   RM4[a6K}OPUo_#MM]#b=_#UUU_#Z6fN._0f#KMXKOQ]#fZ.RTg_0d"UTK}RZWi]UVZ6]^R_#U/[R^K}dVh_Z.]Z.c6KQ
[YKPX ^eRZ.RM[RO?9N.XRZ6fe^e_#O a.RZ6K}WK "N'RTW.W/Kcq4RT[a_#Z   ]#X_#OPUTK#j44a6KOP_#Z6]Z.RoOP_#U &  - OQ]^W"UTKP[YK
W'X]#d'UTK^ 		 
 RM&[a6KMKP[]#b4_#UU:[YXRTW'UK

M +:\ !=#  ( %('''%   + % ^ !=#S ( %('''% S ) + % 
 -qa6KPXK
\ _#Z.c ^ _0XK[q+] c.R5M F%]RZ[MYKP[M]#bW'X]#W/]MRT[RT]Z._#U(S0_0XR_0d"UTKM_#Z.c 
 RM_ br]#X^}N'U_LbrX]^

3
%` a(j  W/]MR[RTS#K}RZ'MY[_#Z.OQK2]#b\[a.RoMW'X]#d'UTK^ RM3_[YXRTW'UTK +:\ % ^ % 
 -br]#X3q4a.RO a[a6KPXK
K6RMY[M4_ \Iq:]#XUc = `MN.Oah[a'_0[b1]#X_#UWU ^}Iq+]#XUoc%= a q:Ka._S#K= `/
%= a A ! 
3j
U   - OQ]^W'UTKP[YKW.X]#d'UTK^ 	 
RM}[a6KMYKP[2]#b4_#UU
   - ! Q&  - !    j a6KOP_#Z6]Z.RoOP_#
[YX RTW'UTKM +:\ ! #  ( %('''%  + % ^8! #S ( %('''% S ) + % 
 -q4a.KPX
K \ _#Z.G
c ^ _0XK[q:]c.RM FY]RZ[MYKP[M?]#b
W'X]#W/]MRT[RT]Z._#US0_0XR_0d'UTKM_#Z.c 
 RM_br]#X^}N'U_4brX]^ 

 ` a /j  Wi]MRT[RTS#K(RZ.MY[_#Z.OQK(]#b"[a.RM
W'X]#d'UTK^ RM3_h[YX RTW'UT
K +:\ % ^ % 
 -?MN.Oa [a'_0[b1]#X?KPS#KPX]
V \4Iq:]#XUc = ` [a6KPXKK 6RMY[Mm
_ ^}Iq:]#XUc
=Ya br]#Xq4a.RO a= `/
%= a A ! 
3j
&  - _#Z.c   - _0XKOQ]^W'UK*RT[VeOPU_#MMYKM:UT]*OP_0[YKc_0[:[a6KMY]0OP_#UUTKcMYKOQ]Z.cUTKPS#KU.]#bB[a.KW/]UTV*Z6]^eR_#U

a.RTKPX _0XOaV#`.q4a.RoOaW'U_VM4_2W.X]^eRZ.KZ[(X]UTKRoZhZ.]q4UTKc.f#K?XKPW.XKMYKZ[_0[RT]Z_#Z'chXK_#MY]Z.RoZ6f6j

8A E  RG  4H l W

D F  aE ì  *G í[íìH íOè*	 C	D -F T D -F  D îB
6]#X^&N.U_;UoRT[YKPX_#U_#Z.c b1]#X^&N.U_;IS0_0XR_0d"UTKLRZ.c6KPW/KZ.c6KZ'OQKOP_0W.[N.XKMY]^Kb1]#X^M]#b2RoZ.c6KPW/KZ.c6KZ.OQK
d/KP[q:KPKZ[a6K2[YXN6[aS;_#UN.KM4]#b=S0_0XR_0d"UTKM4_#Z.c[a6K&W/]MMRTd"UTK?[YXN6[aS;_#UoN6KM4]#b+_br]#X^&N.U_*j E]N6fa.UV
MYW/K_0*RZ6f6`&RoMc6KPW/KZ.c6KZ[]
Z .d/KOP_#N.MK+RT[[YKUUM]Z6K:M]^KP[a.RZ6fW/]MRT[RTS#K:_0di]N.[  C9^]#XK+W.XKOPRMYKUTV#`
[a6KPXKRM_OQ]Z[YKMY[P`+RmjK#jT`_OQ]Z FN.Z.OQ[RT]Z]#bURT[YKPX_#UM` [a._0[P`_#c.c6Kc[Y][Y] &KZ._0d'UKM]Z6K[Y]RZ6brKPX
j6]#XRZ'MY[_#Z.OQK#` & !  k
 I SPRM3c6KPW/KZ.c6KZ[4]Z S	`BMRZ'OQc
K S}OP_#Z d/K&RZ.b1KPXXKcbrX]^ &sN.Z.c6KPX[a6K
_#MMN'^W.[RT]Z[a._0[6RM=[YXN.K#j b OQ]N6XMYK#`*q:KOP_#Z'Z6]#[:_#MMN.^KOQ]Z[YK *[M([a._0[,_0XK3RZ.OQ]Z.MRoMY[YKZ[\q4RT[a
&`:_#Z.c q+KOP_#Z'Z6]#[_#MMN'^m
K R[MYKUTbj  b1]#X^&N.U_ & q4RoUU\d/KhOQ]Z.MRoc6KPXKc _#MeRZ'c6KPW/KZ.c6KZ[brX]^
S0_0XR_0d'UT
K >RTb=_#Z.c]Z.UVRTb\RT[3RMd/]#[aRoZ.c6KPW/KZ.c6KZ[4brX]
^ >_#Z.c RZ.c6KPW/KZ.c.KZ[brX]^ %: >9
j N'_#UUTV#`
q:K3OP_#ZhRoZ[YKPXW'XKP[+d/]#[abr]#X^eM:]#b9c6KPW/KZ.c.KZ.OQK_#M,_0d/]N6[Z.KMM:XKU_0[RT]Z.Mqa6K+
Z & RoM+c6KPW/KZ.c.KZ[:]Z
_eUR[YKPX_#WU `'RT[,[YKUUM(]Z.KMY]^KP[a.RoZ6fe_0d/]N6/[ `'_#Z.chq4a.KB
Z & RMc6KPW/KZ.c.KZ[,]Z_eS;_0XRo_0d'UT6
K >`'R[,[YKUUM
MY]^KP[a'RZ6fe_0d/]N6T[ >]#X_0d/]N6[%: >j
Ãì

í

ë $ìí Uí

BH lmk 9 Ã{·z ; ·¸³ ; z3±{MLÛq <\q¶{4L#q£{ ; q
a6K2K_#MRKMY[?q:_V[Y]c6K  Z6K2c6KPW/KZ.c6KZ.OQK2d/KP[q:KPKZ_br]#X^&N.U_T&s_#Z.cL_hURT[YKPX_#UY:RM3dV_#MMN'^eRZ6f
[a._0[ &`q4a6KZ W'N6[?RZ[Yk
] 4O4:`OQ]Z[_#RZ.Mj EK^RZ.c.RZ.f[a._0[( 3 *P	&RM3[a6KeMYKP[?]#b(URT[YKPX _#UM[a._0[
]*OPOPN6X4RZ[a6
K 4?4 ]#b &3`.[a.RM,OP_#ZdiK3br]#X^e_#UUVK*W.XKMMYKcdV[a6Kbr]UUT]	q4RZ6fc6K  Z'RT[RT]ZC

 [w !0x7

 1/2
k " Ü Ã{·z ; ·³ ; z3±$Uy&%9³'{MLÛq<µq¶{4LÛq¶{ ; q('  uv & P uhNM!0wx /*TN
q!m{Û³·³uw{ #
yrvuPw%0 ![+(* 1:0z"t(I/=PuPv ![+(R 
 & yo}Q0ymthv	! P u?MYV*Z[_#OQ[ROP_#UUTV @9RT[%c6KPW/KZ.c6KZ[ !0z NJIwu - MVZ[_#OQ[ROP_#UUTV @9RT[%RZ.c.KPWiKZ'c6KZ[
w !02
x  Key 0z"T
t !0z' 4y /*)m( 3 *Q	&4 JwYuQ	- T )k
4 ( 3 P* 	& K 
\^],+

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

 & yo&Q0ymtv	! PuMYV*Z[_#OQ[ROP_#UoUTV @9RT[%c6KPW/KZ.c6KZ[ 0! z_( y 0z"t'!0z. 4hy vr~*uPwYuey1 ) (  /P~
vr~*#v.& y1 4;z"vIvy00r 4  yv5O%tu -6uQzituQz'v !0z   ,vr~*uPw |y1Pu 1 & yoQ0ymtv	! PuMVZ[_#OQ[ROP_#UUTV
9@ RT[%RZ.c.KPWiKZ'c6KZ[  w 0! x2(



6 X]^ [a'RM+c.K  Z.RT[RT]ZRT[\br]UUT]	q4M:R^e^Kc.Ro_0[YKUTV2[a._0[ & RM+MYV*Z[_#OQ[ROP_#UoUTV @R[%RZ.c6KPW/KZ.c6KZ[brX]^
( RTb?_#Z.c ]Z'UTV RTb3( 3 *P	&6K( ! j aN.MP`,RZ ]#Xc6KPX[Y] c.KP[YKPX^eRZ6Kq4a6KP[a6KPX_br]#X^&N.U_ & RM
MYV*Z[_#OQ[RoOP_#UUTV%@9RT[%c6KPW/KZ.c6KZ[(]Zh_MYKP[/( ]#b8URT[YKPX_#UoMP`R[(MN6OQKM,[Y]eO a6KOq4a6KP[a.KPX,[a6KPXK3K*RoMY[M_
URT[YKPX _#UBRm
Z ( [a._0[4]OPOPN6X MRZ[a6
K 4O4 ]#b &j




 ! :,YF/#P  ~*uNON?P ![ 
 y1 :,THG: P  vr~6uQwu5M!0wYu 1 
 y1& 04 z'vIvy0#1 4
 z3v <Û±q 7  u v  0zit P 
 yv5OYtuR-6uPz"tuPz'v !0z 3P !#vr~
:,0z"t :YP 1\|8~yrTu}yv+yo3I40z'vIQvy00r 4  ry v5Oy1zituR-6uPz"tuPz'v=w !0x 
M[a.RoMK *_#^W"UTKRUUN'MY[YX_0[YKMP`3_ W.X]#W/]MR[RT]Z._#Ub1]#X ^}N.Uo_ OP_#Z K_#MRUTV d/KMYV*Z[_#OQ[ROP_#UoUTV @9RT[%
RZ.c.KPWiKZ'c6KZ[&brX]^ _UR[YKPX_#U(q4a.RUKMYV*Z[_#OQ[ROP_#UUTV @R[%c6KPW/KZ.c6KZ[&]Z RT[MeZ6KPf_0[RT]Z j a.RoM&RoMe_#M
K*WiKOQ[YKc `*MRZ.OQK & ^e_VR^W'UTVc RZMY]^K3OQ]Z[YK*[P`6q4a.RoUTKRT[+^_Ved/K_#Uq:_VM:R^W/]MMRd'UTK([Y]&c.KPXRTS#K
Y: j(pZ]#[a6KPXq+]#Xc'MP`'[a6K&MYKP[4]#b=UoRT[YKPX_#U.M & RM4MVZ[_#OQ[ROP_#UUTT
V @9RT[%RZ.c6KPW/KZ.c.KZ[(brX]^ RMZ6]#[OPU]MYKc
N.Z.c.KPX+Z6KPf_0[RT]Z jpZ[YKPXKMY[RZ.fUTV#`6_}Z6]#[R]Z]#bMVZ[_#OQ[ROP_#U/br]#X^}N'U_;IS;_0X R_0d'UTK4RoZ.c6KPW/KZ.c6KZ.OQKOP_#Zd/K
c6K  Z.Kcb1X]^ [a6K^]#XK?d"_#MRO?Z6]#[RT]Z]#bMYV*Z[_#OQ[ROP_#U @BRoZ.c6KPW/KZ.c6KZ.OQK#j
q!m{Û³·³uw{ 7 " Ü Ã{·z ; ·³ ; z3±$ %9³'{4#
L q<µq£{MÛL q¶{ ; q('  uPv & PuM!0w xN/*TVw[!0xQ
3
% 1Y< 
;#w ymQPQuN![+
E1:0z"t U  /PQPuv1![+
 
 & y1P0yte	v ! Pu(MVZ[_#OQ[ROP_#UUTVNS=_0XYc.KPWiKZ'c6KZ[ !0z < JIwu - (MYV*Z[_#OQ[ROP_#UoUTVNS=_0XYRZ.c6KPW/KZ.c.KZ[
w !0x <QKey #z"T
t !0z. 4y T< )'U	.	 & JwYuQ	 - T< )B
4 U,	6	&4 K 
 & yo}Q0ymt	v !'PuMYVZ[_#OQ[ROP_#UUV S=_0XYc6KPW/KZ.c6KZ[ !0z U y 0z"tB!#z. 4hy 2vr~*uQwuyoh;#w ymQPQu<
yr+
z U  ov  &yo
 .0w O%tRu -6uPz"tuQz"v !0zyrv>1=y u I1y 0z"L
t !0z. 4ey YU.	 &  U ! 4  ,vr~*uPw |y1Pu 1 &
y1?Q#yt	v ! PuMYV*Z[_#OQ[ROP_#UUTL
V S=_0XYRZ.c.KPWiKZ'c6KZ1[  w !0x U,

	

& ! D/ :-SQ &yoI40z'vIvy5 01 4 '0wIOYtu -6uQz"tuQz'v !0z L
 0z"t%!0zbS#z"t 40z'vIMO
 z3v Û< ±q H  uv"
vy0 0r 4 .0w O yrz"tu -6uQzituQz'vw 0! x V 




 V*Z[_#OQ[ROP_#U+ S RZ.c6KPW/KZ.c.KZ.OQKeOP_#Zd/KK_#MRoUTV KW.XKMMYKc_#M}MYV*Z[_#OQ[ROP_#U: @BRZ'c6KPW/KZ.c6KZ.OQKC
& RM,MYV*Z[_#OQ[ROP_#UUTVLS=_0XYRZ.c.KPWiKZ'c6KZ[(brX]^:U RTb9_#Z.c]Z'UTVRTbRT[,RM,MYV*Z[_#OQ[RoOP_#UUTV%@9RT[%RZ.c.KPWiKZ'c6KZ[
brX]^:U . #):%> A> )BU +j1?(UTK_0X UTVeKZ6]N6fa `d/]#[ahMYV*Z[_#OQ[ROP_#U br]#X^&N.U_;URT[YKPX _#U"RZ'c6KPW/KZ.c6KZ.OQK3_#Z.c
MYV*Z[_#OQ[RoOP_#U br]#X^}N'U_;IS;_0X R_0d'UTK?RZ.c.KPWiKZ'c6KZ.OQK3OP_#Zd/K?Oa6KO#KcRoZhURZ6K_0X,[R^eK#j
]q:KPS#KPX`[a.KMYK,d'_#MRO+br]#X^eM]#b"RZ'c6KPW/KZ.c6KZ.OQK\MN iKPX8brX]^[q:]R^W/]#X[_#Z[8c6X_q4d'_#O*MPj8RXMY[P`
[a6KPV c6] Z6]#[M_0[RMYbrV [a.KW.XRZ'OPRTW'UTK]#b2RXXKUTKPS0_#Z.OQKL]#b2MYVZ[_ C [q:] KW"N.RTS0_#UTKZ[hb1]#X ^}N.Uo_#M_0XK
Z6]#[e_#UTq(_V*MeMYV*Z[_#OQ[ROP_#UUTV RZ.c6KPW/KZ.c6KZ[brX]^ [a6KhM_#^eKURT[YKPX_#UM H	S;_0XRo_0d'UTKMPj KOQ]Z'cB`+MYV*Z[_#OQ[R 
OP_#UBc6KPW/KZ.c6KZ'OQK3c.]KM,Z6]#[_#Uq:_VMOP_0W'[N6XK3[a6KRZ[N.RT[RTS#K3^K_#Z.RoZ6f2]#bc6KPW/KZ.c.KZ.OQK C8b1]#XRZ'MY[_#Z.OQK#`
& !  ,/ X
: S6/ c
 H SPY3RoMMVZ[_#OQ[ROP_#UUTV @R[%c6KPW/KZ.c6KZ[]Z "`X: S	&` S	9MRZ.OQKX: S}OP_#ZLd/K2c.KPXRTS#Kc
brX]^ &` &RM?_0d/]N6[X: S&RZLM]^KMYKZ.MK#j ?:]Z[YX_#MY[RZ6fUV#`[a6KPXKRM?Z6]q(_V [Y]c6KPX RTS#
K S}b1X]^ &`
N.Z.UKMM(W.X]*c.N.OPRZ.f&_#ZRoZ.OQ]Z.MRM[YKZ.OQV#j
_#Z.c.URoZ6f&MN.Oah_MYKPW"_0X_0[RT]ZXWK "N.RTXKM(_^]#XKX]#d'N.MY[,Z6]#[RT]Z]#bRZ.c6KPW/KZ.c.KZ.OQK#`[Y]d/K?RZ[YX]0
c.N.OQKcRZ[a6K?br]UUT]qRZ6fMYKOQ[RT]ZBj
\^]^]



~33



¹sº£~$»wº

~w¶Ýw¿$¾½

BH l87:9 q¶vxz3{·³ ; zw±&{4L#q<µq£{MLÛq£{ ; q
JLKZ6]	q fRTS#K_PuQxe0z"vy5 06c6K  Z.RT[R]Ze]#b9RoZ.c6KPW/KZ.c6KZ.OQK#`q4a.RoOac6]KM,Z.]#[(MN iKPX(brX]^ [a6K?_0br]#XKQ
^KZ[RT]Z6Kc c.X_qd"_#O*MP`:RIjK#jT`+_c6K  Z.RT[RT]Z [a._0[ec6]KMeZ6]#[ec.KPWiKZ'c ]Z [a6KMYV*Z[_#OQ[RoOP_#Ubr]#X^ RZ
q4a.RoOa br]#X^}N'U_#M2_0XKK *W.XKMMYKc j JLKqRUU+W.X]S#K[a._0[[a.RMMYK^_#Z[ROP_#U4c6K  Z.RT[R]Z]#b3RZ.c6KPW/KZ*
c6KZ.OQKc.]KMeZ.]#[eMN /KPXb1X]^ [a6KMYKOQ]Z.c c.X_qd"_#O ]#bMVZ[_  RoZ.c6KPW/KZ.c6KZ.OQK#`+RmjK#jT`+_Lbr]#X^&N.U_
[a._0[RM,MYK^e_#Z[ROP_#UUTVhc6KPW/KZ.c.KZ[,]Z_eURT[YKPX_#UB_#Uq:_VMKZ._0d'UTKM]Z6K[Y]c.KPXRTS#K?[a6KUoRT[YKPX_#U RZMY]^K
OQ]Z[YK [Pj
v & Pu M!0wN
x /T [w !#x 
3
% 81  )
q!m{Û³·³uw{ H " " Üq¶vxz3{·³ ; z3± ' $Uy&%9³'{MLÛq <\q¶{4L#q£{ ; q'  u
(R 1(0z"t ( I /=PuP1v ! +(R 
t !0z' 4hy vr~*uQwu,u 2#y1vre
 & yo&Q0ymt	v !'Pu @RT[%RZ'c6KPW/KZ.c6KZ[ - [w !0x  14tuPz !#vut   4 &1,y 2#z"B
M!0wN
x /T 
  ov  
  & #z"t 
 yoI 40z'vI v5y  01 4  y5v Oyrz"tu -6uQzituQz'v w !0x   ,vr~*uPw |y1Pu 1 & y1
P0ymt	v !+P.u @9RT[%c6KPW/KZ.c6KZ[ !0)
z  1=tuQz !#vuc
t   &5 ~*uPu1v ![0rByrvuPw%0
 ![/(   /P~vr~*#v
  &y1tuQz !vuB
t PM4
r ( 3 *Q	 & 
t (  4 &1By (0zit !0z. 4?y %(68 ( 3 *P	 & !
 & yo+Q0ymt	v ! P u @9RT[%RZ.c6KPW/KZ.c.KZ[  w !0x (F19tuQz !vu/
  ,vr~6uQw|you$1 & y1P0ymt	v !+P u @RT[%c.KPWiKZ'c6KZ[ !0m
z ( 1+tuPz !#vut (  &5

*Ro^W'UTV}XKPqXRT[RoZ6f?[a6Kc.K  Z.RT[RT]Z `& RM1@RT[%RoZ.c6KPW/KZ.c6KZ[b1X]^!( RTbB_#Z.ce]Z'UTVRTb/[a6KPXK4K6RMY[M:_
br]#X^}N'U_ 
LMj[Pj 
  &_#Z.c 
LRM9MYVZ[_#OQ[ROP_#UUV@9RT[%RZ.c.KPWiKZ'c6KZ[/brX]^ (4j4aN.M`; @BRoZ.c6KPW/KZ.c6KZ.OQK
RM9Z6]#[_ /KOQ[YKc}dV?[a6K:MYVZ[_#OQ[RO\b1]#X^ RZ?q4a'ROa}_br]#X^}N'U_,RM K*W.XKMMYKcB`;[a._0[9RM`	XKPW"U_#OPRZ6f.&Lq4RT[a
_#ZVh]#b=RT[MWK "N.RTS0_#UTKZ[b1]#X ^}N.Uo_#M4c6]KM4Z6]#[^]*c.RTbrV[a6K}XKU_0[RT]Z  .
j *RZ.OQK & RM @9RT[%RZ.c.KPWiKZ'c6KZ[
brX]^ ( RTb_#Z.c]Z.UVRTb & OP_#Zd/K3^e_#c6K?MYV*Z[_#OQ[ROP_#UoUT%
V @9RT[%RZ.c6KPW/KZ.c.KZ[=brX]^ ( qa.RUTKW'XKMYKPXS*RZ6f
UT]#fROP_#U=WK "N.RS;_#UTKZ'OQK#`9RT[br]UUT]	q4M?[a._0[}MYVZ[_#OQ[ROP_#U @RT[%RoZ.c6KPW/KZ.c6KZ.OQK2R^W"URTK
M @RT[%RoZ.c6KPW/KZ.c6KZ.OQK#`
d'N6[,[a.KOQ]ZS#KPXMK}c6]KMZ6]#[4a.]UchRZ[a6K?f#KZ6KPX _#UOP_#MYK#j
& !   /G:XS6/  H]SPYu~00u 
r( 3 *P	& ! #  % :-S&+]N !#vuvr~#vY& y1
 z3v <Û±q  uv 
!  / :XSP 1=y1z 8
| ~y0Q~ St!u}z!#v(I--6u0w
 yv5Oy1z"tuR-6uPz"tuQz"vw !0x S%P u3 D/Pu&yv=y1&u	W/*y100TuPz'v:v	! 
 
-G;! yrvyr0uP 4 
MRoZh[a6K2OP_#MYK]#b=MYV*Z[_#OQ[ROP_#U8RZ.c6KPW/KZ.c6KZ'OQK#`6q+K2OP_#Zbr]#X^e_#UoRTgPK[a6K}br_#OQ[[a._0[_b1]#X ^}N.Uo_%&
.a _#M8MY]^K:K /KOQ[M8]Z}[a.K+[YXN.[aS0_#UN6K+]#b'_4S0_0XR_0d"UTKR<"jp%Z.c6KPKc `	q:K,c6K  Z6K:_Z6]#[R]Z]#b9MK^e_#Z[RoOP_#U1
br]#X^}N'U_;IS;_0X R_0d'UTKRZ.c.KPWiKZ'c6KZ.OQK#`q4a'ROaOP_#Z}_#UMY]d/KK_#MRoUTVc.K  Z6Kc?brX]^ [a.KMYK^e_#Z[ROP_#U1/Z.]#[RT]Z
]#b @BRZ.c.KPWiKZ'c6KZ.OQK#j

!

 " " Üq¶vxz3{·³ ; z3± ' $ ³'{MLÛq<µq¶{4LÛq¶{ ; q('  u vG& P ,u !0wxN/*   w !0x 
3
  1< )

q m{Û³·³uw{


E1+#z"t

U I/=PuPv ![+
 

& yoQ#ytv	!%P u S=_0XYRoZ.c6KPW/KZ.c6KZ[  w !0x < 1+tuQz #! vut<  4 , &18y 0z"tL!0z. 4ey vr~*uPwYu2u,2#y1vr
 
M!0wxN/T 
 1v  
 &0z"t 
sy14I40z'vIQvy00r 4 .0w Oyrz"tu -6. uQz"tuQz'v= w !0x <  ,vr~6uQw|you$1&sy1
P0ymtv	!'P u =S _0XYc6KPW/KZ.c6KZ[%!0z_<1tuPz!#vut<  ,. 5
& utuQz!vuLPM4 
U.	&2vr~6u2uPv
!}
 0r ;0wymQQP u+<  /Q ~hvr~#v%<  , &

	

.
Do
	y{z	~u zY}y?yp~{ fx8u'x||Mz}u u zY}y/}su*D	{ }| yz}T%ytf~iulu~uu*u| }|z}yp
yx y "!?y}suz&x8yz	~if~iulu~uuY:#lu%	$pu6{&u /U}|%&+~iu' | &O}su%z}u :y#}suYlu zo
Q)((

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

y1LQ0ymt 	v ! Pu S=_0XRZ.c6KPW/KZ.c6KZ[ w[!#x U 1tuPz!#vut6U  4 , &1y  0zit(!0z. 4 y 'U 
U	.	&!   ,vr~*uPw |y1Pu 1 & yo?P0ytv	!TPu.S=_0Xc6KPW/KZ.c6KZ[ . !0z U 1+tuQz !#vut U  ,. &5
?(UK_0XUTV#`& RM S=_0XYRoZ.c6KPW/KZ.c6KZ[(b1X]^ U RTb_#Z.ch]Z.UVRTb9[a6KPXK?K6RMY[M_br]#X^&N.U_ 
 MPj[Pj 
 &
_#Z.c 
 RMMYV*Z[_#OQ[RoOP_#UUTV S=_0XYRZ'c6KPW/KZ.c6KZ[eb1X]^ Uj$]#XKP]S#KPX`.S=_0XYRZ.c.KPWiKZ'c6KZ.OQKRM[Y]X@9RT[%
RZ.c.KPWiKZ'c6KZ.OQK,_#M\MYV*Z[_#OQ[ROP_#=U S=_0XRZ.c6KPW/KZ.c6KZ'OQK(RoM[Y]}MYV*Z[_#OQ[ROP_#U @9RT[%RZ.c.KPWiKZ'c6KZ.OQK#RZ.c.KPKcB` &
RM S=_0XYRoZ.c6KPW/KZ.c6KZ[,b1X]:
^ U Rb9_#Z.ch]Z'UTVRb & RM @9RT[%RZ.c.KPWiKZ'c6KZ[:brX]Q
^ (*$,j
v &! Y/G: PE/ Y+ H Y  u~#0u  U	.	 & ! #  % S>+ N !#vuvr~#Yv & y1
 z3v <Û±q  uY
.0w Oy1z"tRu -6uPz"tuQz"v w !0x  
a.K3c.K  Z.RT[RT]Z]#b8MYK^e_#Z[ROP_#U  @BRoZ.c6KPW/KZ.c6KZ.OQK3RM(d'_#MKc]Zh[a6KMYKP[]#b8URT[YKPX _#UM:]#b9br]#X^&N.U_#M
KW"N.RTS0_#UTKZ[,[Y+
] &j=p%Z[N.R[RTS#KUTV#`6[a.RM,RoM([a6KK_#MRTKM[q:_Vh[Y]c6K  Z.K_Z6]#[RT]Zh]#bRZ.c.KPWiKZ'c6KZ.OQK[a._0[
RM}Z6]#[}c6KPW/KZ.c.KZ[]Z[a6KMVZ[_ ij4]	q+KPS#KPX`\W.X]S*RZ6f[a6KP]#XK^eM&c.RTXKOQ[UVbrX]^ [a.RMc6K  Z.RT[RT]Z
RM}Z6]#[}MY]K_#MYV#j.]#X&RZ'MY[_#Z.OQK#`8q+Kq4RUU8W'X]S#K[a._0[}c.KP[YKPX^eRZ.RoZ6fhq4a6KP[a6KPX&_br]#X^&N.U_ & RM @9RT[%
c6KPW/KZ.c6KZ[]Z URT[YKPX_#RU RMRoZ  `d'N6[[a.RMXKMN.UT[OP_#Z'Z6]#[}d/Kt#y1w3u v 4W.X]S#Kc brX]=
^ K  Z'RT[RT]Z
] &OP_#Z.Z6]#[d/Kc6]Z6Kq4RT[aL_hW/]UTV*Z6]^eR_#U
 `9MRZ.OQKeOa.KO*RZ6f_#UU=Wi]MMRTd'UTK&br]#X^}N'U_#M3WK "N'RTS;_#UKZ[?[Y'
Z6]Z*c.KP[YKPX^eRZ.RoMY[RO=fN.KMMRZ6f6jJLKfRTS#KZ6]q _MK^e_#Z[RoOP_#U6Oa._0X_#OQ[YKPX RTg_0[RT]Z]#b" @BRZ'c6KPW/KZ.c6KZ.OQK#j
° r¸u=<µuwÜ³·³uw{ 
x /*  &yo  yr5v Oy1zitRu -6uPz"tuPz'=v w !0x yvuQwY0r ,y 0z"+
t !0z' 4y  1 !#w}0z 4y1z'vuPIw O
k  !0wN
-"wuPvI#v0y !0z = )_[T 1=y  =.A ! & vr~6uQz &')l V >= % Y
: IFA ! &5
M2_c'RTXKOQ[}OQ]#X]UU_0XV#`q:Kf#KP[&[a'_0[ & RM @R[%RZ.c6KPW/KZ.c6KZ[?brX]^ (RTb_#Z.c ]Z.UTVRTb,br]#X_#ZV
URT[YKPX _#WU  ) ( _#Z.c_#ZVhRZ[YKPXW.XKP[_0[RT]Z= )_[Ti`'RTb4=;A ! & [a6KZ &'"l V>= % X: mDA ! &j
a'RM=W.X]#WiKPX[VfRTS#KM,_#ZRc6K_]#ba6]	q  @ c6KPW/KZ.c6KZ.OQKq+]#X*MPjp%Z.c6KPKcB`*RTb & RM @RT[%c6KPW/KZ.c.KZ[
]Zh_2URT[YKPX_#8U `*[a6KZ[a6KPXK3K *RoMY[M(_#ZhRZ[YKPXW.XKP[_0[RT]Z
= MN.Oa[a._0[ =;A ! & _#Z'c
&'"l V>= % X: m A4! &`
q4a.RoOa^K_#Z.M([a._0[_6=;A ! 9_#Z.cLrdi\[a6K?UR[YKPX_#tU 9RZ
= Rc
M J%XK_#UUTVZ6KPKc6KMc L&[Y]e^e_0#K = _2^]*c6KU
]#b &`6[a._0[4RoMP`*[a6KW'_0X[Ro_#UBRZ[YKPXW.XKP[_0[RT]Zh]#d'[_#RZ6KchdVXK^]S*RZ6f 8RZ= c.]KMZ.]#[M_0[RMYbrT
V &3j
a'RMW.X]#W/KPX[V_#UMY]K *W'U_#RoZ.Mq4aVe @Bc6KPW/KZ.c6KZ'OQKb1]#X ^e_#URTgPKM\[a6KOQ]Z.OQKPW'[+]#/b J%[YXN.KRZMY]^K
OQ]Z[YK [ L*`_#MK *W'U_#RoZ6Kc_0[3[a6K2d/KPfRZ.Z.RoZ6f]#b\[a.RoMMYKOQ[R]ZBj3pZ.c.KPKcB` & R
M @9RT[%c6KPW/KZ.c6KZ[4]]
Z \Rb
_#Z.c]Z.UTVhRTb8[a6KPXK2RM4M]^K}OQ]Z[YK [eOQ]Z.MRMY[YKZ[4q4RT[a &`"_#Z'c[a._0[c6]KMZ6]#[R^W'Ub
V I `/RZhq4a.RoOa
& Ro^W'URTKT
M j(a.RM4OP_#Zd/KW.X]S#KcbrX]^ [a6K}_0d/]S#K&W.X]#W/]MR[RT]Z C=RTb= RM4_#ZRZ[YKPXW.XKP[_0[R]ZMN.O a
[a._0[F=;A ! & d'N6[F&')l V>= % Y: I A4! &`6[a6KZh[a6K[YKPXT
^ C
1 !  #D> )k
OA%=;A ! & b
/ > + . #)%: > A > )k
  e =;A ! & / %: >*+;	  #i +
RM=OQ]Z'MRMY[YKZ[=q4RT[L
a & rdV2OQ]Z'MY[YXN.OQ[RT]Z ` 1hRMWK "N.RTS0_#UTKZ[[Y]}[a6K4c.RoM FYN'Z.OQ[RT]Z2]#bB_?[YKPX^ WK "N.RS;_#UTKZ[
[Y]= q4R[a_}[YKPX^ WK "N.RS;_#UTKZ[\[Y] &')l V>= % Y: IY .RT[:_#UMY]2a6]Uc.M\[a._0R[ 1/ & A ! `q4a.RUT/K 1 A4! `[a._0[
RMPB` 1 RM_OQ]Z[YK [RZhq4a'ROB
a & Ro^W'URTK'M j
]#XKP]S#KPX
` =X]#Wi]MRT[RT]Z 2Ma.]q4M[a._0[3]N6X?Z6]#[RT]Z]#b @9RT[%RZ.c.KPWiKZ'c6KZ.OQKOQ]RZ'OPRc6KMq4RT[a[a6K
Z6]#[RT]Z]#b J0z'vy O K	x !0z !#	v !#z.5y yr5v 4?5 EV_#Z G` #G 0` #  j=9]d/K\^]#XK+W.XKOPRMK#`;_OQ]Z'MRMY[YKZ[ Bbr]#X^&N.U_
RM M_#Rc[Y]diK+^]Z6]#[Y]Z.ROrXKMYW j_#Z[R^e]Z6]#[Y]Z.RO RZ?S0_0XR_0d'UTRK <RTb*_#Z.c]Z.UTV?RTb*RT[RM @9RT[%RZ.c.KPWiKZ'c6KZ[
brX]^ Y: < rXKMYW j b1X]^ <6 j p%Z[YKPXKMY[RZ6fUTV#`_ MN.d/OPUo_#MMROP_#U 0 RoZ6b1KPXKZ.OQKXKUo_0[RT]ZB`OP_#UUTKc z"#5v /*wY0
yrWz PuPwYuPz  uP`4a._#Md/KPKZ c.K  Z6Kc ]Z [a'RMef#X]N'Z.cs5 E4V_#ZB` #G 0` #  
j A(_#MRoOP_#UUTV#`4_ b1]#X ^}N.Uo#
_ $
RMeOQ]Z'MRc6KPXKc _#M_ OQ]Z.MYWK "N6KZ.OQK]#b_b1]#X ^}N.Uo_ & RTb?_#Z.c ]Z'UTV RTbR[RM_UT]#fROP_#U4OQ]Z'MYWK "N.KZ.OQK
 &


iorqtsf&*z}u:z} }y3y#|{|BuU	{|TuU*o

Q)(



~33



¹sº£~$»wº

~w¶Ýw¿$¾½

]#b}R[P`_#Z.c & @RT[%RoZ.c6KPW/KZ.c6KZ.OQK]#b}_ URT[YKPX _#UR^eW'URTKMRT[M $@9RT[%RZ.c6KPW/KZ.c.KZ.OQK#j OPOQ]#Xc.RoZ6fUTV#`
Z._0[N6X _#URZ6brKPXKZ.OQKW.XKPS#KZ[MN.M4b1X]^ OQ]Z.MRc6KPXRZ.f He_#M_OQ]Z'MYKW"N.KZ.OQK]#b  RT[RoM_XKUTKPS;_#Z[
R^W"UROP_0[RT]Z" j UoU*]N6X+O a._0X_#OQ[YKPXRTg_0[R]ZXKMN.UT[M=_0d/]N6[ @9RT[%RZ.c6KPW/KZ.c.KZ.OQK#`RZ.OPUN'c.RZ6fOQ]^W'UTK6RT[V
XKMN'UT[MP`+a'_S#K_#Z R^e^Kc.Ro_0[YKRo^W'_#OQ[]Z MN'Oa _Z'_0[N6X_#URZ.b1KPXKZ'OQKXKU_0[RT]Z rKMYW/KOPR_#UoUTV#`\[a6KPV
c.RTXKOQ[UTVMa.]q [a._0[4[a6KOQ]^W'UK *RT[V]#bZ._0[N.X_#UBRZ6brKPXKZ.OQKRM,RoZ  -  j
\X]#W/]MRT[RT]Z ?RMK_#MRUTVK [YKZ.c.Kc[Y]ebr]#X^&N.U_;IS0_0XR_0d'UTK3RZ.c.KPWiKZ'c6KZ.OQK C

J

 k
yrz'vuQw -"wuPvI#vy00! z

 M!0wx */ T




& y1 '0wIOyrz"tuR-.uQz"tuPz'v w !0x ; 0wymQPQu< y 0zit !0z. 4Ly  1 M !0wh0z4
1=|+u~00u=;A ! & y 
 0z"tT#! z. 4y ? 3 *V >= % <*A ! &5

= ) [/
a.Kbr]UUT]qRZ6fe^KP[_0[a6KP]#XKP[RO&W.X]#W/KPX[RTKM4]#b= @ RZ.c6KPW/KZ.c.KZ.OQK_0XK2N.MYKcRoZ[a6K}XKMY[]#b[a.RM
MYKOQ[RT]Z j
uwru±±z$r

r¸u=µ
< uwÜ³·³uw{ 7
JK
r( 3 *P	&59( 3 *P	&
JW
K   &  
1\vr~6uQz 
r( 3 *Q	&/! 
r( 3 *P 

J	 ,
K r( 3 *Q	& / 
' r( 3 *P	& . r( 3 *Q 
4
J	P 
K r( 3 *Q	& H 
' r( 3 *P	& . r( 3 *P 

J

K  )-
r( 3 *P	
& y 
 #z"tT0! z. 4y :Y ) r( 3 *Q : &



°






 SRZ.c6KPW/KZ.c6KZ'OQKK6a.RTd'RT[M4MR^eRUo_0X4W.X]#W/KPX[RKMP`'W'UoN.MZ6KPf_0[RT]ZLM[_0d'RURT[VrWi]RoZ[2 <d/KUT]	q `
q4a.RoOahRMZ.]#[M_0[RM  KcdV @BRZ.c.KPWiKZ'c6KZ.OQK#j
°

r¸u=µ
< uwÜ³·³uw{ H
JK
U	.	&5 U	6	&4
JW
K   &  
1\vr~6uQz 
U.	&/!.U	. 

J	 ,
K 
U .	& / 
' r( 3 *Q	&4 . 
r( 3 *Q 

J	P 
K 
U .	& H 
' r( 3 *Q	&4 . 
r( 3 *Q 

J

K 

U 	. : 
& /!.U	.	&








A:KPV#]Z.c [a6KMYKW.X]#W/KPX[RTKMP`( @BRZ'c6KPW/KZ.c6KZ.OQK_#Z.c  S4RZ'c6KPW/KZ.c6KZ.OQKc6] Z6]#[K6a.RTd"RT[e_#ZV
W'_0X[RoOPN.U_0XUTV RZ[YKPXKMY[RZ6fM[YXN.OQ[N6XK#j pZ W'_0X[ROPN.Uo_0X`: @ RZ.c6KPW/KZ.c6KZ'OQK_#Z'c  S4RZ'c6KPW/KZ.c6KZ.OQK
Z6KRT[a.KPX_0XK+^e]Z6]#[Y]Z.RO=Z.]#X9_#Z[R ^]Z6]#[Y]Z.RoO=qjXj[Pj9K W"_#Z.MRT]Z?]#b& MY[YXKZ6f#[a.KZ.RZ6f,]#X9q+K_0#KZ.RoZ6f
& OP_#ZK_#MRUTV^e_0#K}RT[,Z6]UT]Z6f#KPX4RZ'c6KPW/KZ.c6KZ[+brX]^ _MYKP[4]#b8UoRT[YKPX_#UM(]#XS0_0XR_0d"UTKM  j
4E KOP_#UU[a'_0[%(  
& Rb._#Z.c]Z'UTV?RTbM(6r( 3 *Q	4
&  ! 4 ja.RM ^eK_#Z.M[a._0[9[a.K1@ R[%c6KPW/KZ.c6KZ.OQK
]#b & ]Zm( ]Z.UTVR^eW'URTKM\[a6KV@ RT[%c6KPW/KZ.c.KZ.OQK]Zh_UoRT[YKPX_#U"]#b(`.Z.]#[(_GJ%bN.UU L @ R[%c6KPW/KZ.c6KZ.OQK]Z
_#ZVURT[YKPX_#U]#b(4j9p%Z]#[a.KPXq:]#Xc.M`RTb*q+K(q(_#Z[8[Y]3Oa6KO}q4a.KP[a6KPX_br]#X^&N.U_ 
& RM @ RT[%c.KPWiKZ'c6KZ[9]Z
0z3
4 URT[YKPX _#U.]#b&(4`q:K?Z6KPKc_2Z6]#[R]ZMY[YX]Z6f#KPX([a._#Z @ c6KPW/KZ.c6KZ.OQK#`6OP_#UUTKcbN.UU. B@ c.KPWiKZ'c6KZ.OQK#j
a6KM_#^KOP_#Zhd/KM_#Rcbr]#X S c6KPW/KZ.c6KZ.OQK#j

" >¡Ú#±'±$Uy $ % ÛL q <µq£{4L#q£{ ; q'  uPv & Pu  !#w xN/* 1w[!#x 

 1( P uI/=PMO
q!m{Û³·³uw{
Puv ! +(R 0z"t U P u} /PQPuv ![/
 
 & y1brN.UoUTV @ R[%c6KPW/KZ.c6KZ[ !0zk(sy #z"tT!0z. 4y +(9 
r( 3 *P	&
U.	&
 & y1brN.UoUTV S=0_ XYc6KPW/KZ.c.KZ[ !0zBU y 0z"t+!0z. 4y .U
Q)(*_

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº



& !  /F:XS3/?SlHF:XSPY+y1  /*1 4  yv5O%tuR-6uPz"tuQz"v!0z #  % :XS>+&#z"t  /*1 4 .0w O%tuR-6uPz"tuQz"v
 z3v Û< ±q "
!0z #  % S&+ !0'z vwY;vyrz{# 4)1 & y1z!#vI/*r 4  yv5O%tu -6uQzituQz'v !0z #  % S&+

?(UK_0XUTVKZ6]N6faB`iq4a6KZ.KPS#KPXV& RMbrN.UoUTVL@9RT[%c6KPW/KZ.c6KZ[]Z(`/RT[RoM_#UM]bN.UUTVLS=_0XYc6KPW/KZ.c6KZ[
]Z U.:(( j 4]	q+KPS#KPX`"[a6K}OQ]ZS#KPXMKc6]KMZ6]#[4a6]UocB`6_#M[a6KW'XKPSR]N.M:K*_#^W"UTKMa6]	q4MPj
J a.RUTKhbN.UU, @ c6KPW/KZ.c6KZ.OQKrXKMW j bN.UU, Sc6KPW/KZ.c6KZ.OQK	2OP_#Z d/KOa6KO#Kc RZ URZ.K_0X[R^K
]Z.OQK 
r ( 3 *P	 &rXKMYW jO U	6	 &4YRMZ6]	q4ZB`,_0[[a6KKZ.c ]#b?[a6KMKOQ[RT]Z q:KW'X]S#K[a._0[
c6KP[YKPX^RZ.RZ6f[a6KMYKhMYKP[MRM  .a._0X cB`=_#Z.c [a._0[c6KOPRc.RoZ6fbN.UU+ @ c6KPW/KZ.c6KZ.OQK _#M2q+KUoU:_#M&bN.UU
 S4c.KPWiKZ'c6KZ.OQK	(RM  'OQ]^W'UTKP[YK#j
@KP[4N.M,Z6]	q OQ]Z.MRc.KPX,[a6K?W'_0X[ROPN'U_0X,OP_#MYK]#bbrN.UoUi @ c6KPW/KZ.c6KZ.OQK3q4a6Km
Z ( ! ( 3 *Q	 & `']#X[a6K
bN.UU( S4c6KPW/KZ.c.KZ.OQKq4a6KZ U ! U	6	 &4 j pbbrN.UoU:c.KPWiKZ'c6KZ.OQKha6]Uc.M2RZ [a.KMYKOP_#MYKMP`(q:KM_V
[a._0.[ & RoM @9RT[%MR^eW'UR  Kc `]#X S=_0XYMRo^W'UR  KcB`XKMWiKOQ[RS#KUTV#j S=_0XYMR^eW'UR  OP_0[R]ZRoM:_#O a.RTKPS#Kcq4a6KZ
& OQ]Z[_#RZ'MZ6] ]OPOPN.XXKZ.OQK]#b_#ZV S;_0XRo_0d'UTKRT[RM S=_0XRZ.c6KPW/KZ.c6KZ[ebrX]^hj @9RT[%MR^W"UR  OP_0[RT]Z
OQ]#XXKMWi]Z'c.M[Y][a6K^]#XKXKM[YXROQ[YKc MRT[N._0[RT]Z qa6KPXKh[a6K 4O4]#b & c6]KMeZ6]#[OQ]Z[_#RZ _#ZV
]*OPOPN6XXKZ.OQK]#b_eUoRT[YKPX_#UBRT[RM @9RT[%RZ.c.KPWiKZ'c6KZ[:brX]^hj
pb'_b1]#X^&N.U
_ & RMZ6]#[ @9RT[%MR^W"UR  KcrXKMYWj S=_0XYMR^W'UR  Kc" `;[a6KZ[a.KPXK:RoM9MY]^eK(UoRT[YKPX_#U"rXKMYW j
S0_0XR_0d'UTK	[a._0[\]OPOPN6X MRZ2[a6/K 4O4 ]#b &`d'N.[ & RoMZ6]#[ @RT[%c.KPWiKZ'c6KZ[rXKMW j S=_0XYc6KPW/KZ.c6KZ[ 9]Z
RT[Pja.RoM\^K_#Z.M+[a._0[([a6KMYVZ[_#OQ[RObr]#X^ RoZeq4a.RoOL
a & RM+K W'XKMMYKcOQ]Z[_#RoZ.M(_}UR[YKPX_#U.]#X:S;_0X R_0d'UTK
[a._0[4RoM,RZ.c6KPKchN.MKUTKMMPj

!

 " Ü³'v

<Û±'³ !mq	L > u3rvÐÚÛ±z '  u v & Pu2.M!0w xN/*T  w !0x
 & y1Y@RT[%MRo^W'UR  Kc y 0zitL!#z. 4y /( 3 *P	&!.8( 3 *P	&
S _0XYMR^W"UR  KcLy 
 0z"tT#! z. 
4 y .,
U 	.	&/!.U.	&
 & y1 =

q m{Û³·³uw{


3
%


M[a6Khbr]UUT]	q4RZ6f K6_#^W'UTKhRUUoN.MY[YX_0[YKMP`\KPS#KPXV b1]#X^&N.U_[a._0[eRoM @RT[%MRo^W'UR  Kc_#UMY]RoMNS=_0XY
MR^eW'UR  Kcd'N6[([a6K}OQ]ZS#KPXMK}c6]KMZ6]#[a6]UochRZ[a6Kf#KZ6KPX _#U OP_#MYK#j



& ! </ :XS%/2SBH :XSP /2 %HOVY(z/uQyvr~*uQwy1  yv5Oy1x.-"y 
:ut&z!#w .0w Oy1x.-"y 
:ut  ~6u
 z3v <Û±q "
u	W/*y100TuPz'v!0wxN/* h  / :XS</LSXH :XSPY?y1 .0w O yrxY-i
y 
:ut PM/6v=yv=y1z!#v  yv5Oy1x.-"y 
(ut +P\yrz"0r 4)1
vr~*uu M*/ y100uQz'v#! w xN*/  h  / :XSPyo P,!#vr~  yv5Oy1x.-"y 
:uth0zit .0w Oy1x.-"y 
(ut 





*Ro^W'UR  Kcbr]#X^}N'U_#Mec6]Z6]#[RZ.OQ]#XW/]#X_0[YK_#ZV N.MYKUTKMMUoRT[YKPX_#UM2]#XeS0_0XR_0d"UTKMPj"M[a6KZ6K*[
W.X]#W/]MR[RT]Z2Ma6]qM\RT[P`[a.K4Z6]#[RT]Z]#bBMRo^W'UR  Kcbr]#X^&N.U_?_#OQ[N._#UUV&RM=[a6K,W/]RZ[qa6KPXKMYV*Z[_#OQ[RoOP_#U

RZ.c.KPWiKZ'c6KZ.OQK3_#Z.cMYK^e_#Z[ROP_#U1,RZ.c6KPW/KZ.c6KZ'OQKOQ]RZ'OPRc6K#j
°

=<

r¸u µuwÜ³·³uw{



 uv &P u}.M!0wx /*T  w !0x


3
%



 & 1y   yrv5O yrx.-"y 
:uthy &0zit !0z. 4y 2vr~*u M!0r !0|yrz{ u	W/yr;#TuPz u}~G!0 t0 M!0weuQ0uPwI4c(
& y1?I40z'vIvy5 01 4  yv5Oyrz"tu -6uQz"tuQz'v w[!0x (sy &0z"t+!0z. 4y /(  4 &~G!0 t0



 & 1y  .#wIO yrx.-"
y 
:uthy }0z"t !0z. 4y vr~*u !#1 !0|yrz{u M/*y100uQzu}~!0Tt; M !0wuQ0uPwI4 U
& y1?I40z'vIvy5 01 4 .0w Oyrz"tu -6uQz"tuQz'v w[!0x U y 0z"tT!0z' 4y  U  4 , & ~ !0Tt;



.

(  1

E1

aN.MP`Bqa.RUTK&_b1]#X^&N.U_OP_#ZLK_#MRoUTVd/K @RT[%RZ'c6KPW/KZ.c6KZ[4brX]^ _hMYKP[?]#b+UR[YKPX_#UMq4RT[a6]N.[d/KQ
R Z6fMYV*Z[_#OQ[RoOP_#UUTV @9RT[%RZ.c.KPWiKZ'c6KZ[b1X]^ RT[P` MR^W"UR  OP_0[RT]ZRM3_q:_V[Y] FY]RZ @RT[%RoZ.c6KPW/KZ.c6KZ.OQK
q4RT[a R[MeMYV*Z[_#OQ[ROP_#U4XKMY[YXRoOQ[RT]Z rq4a.RoOa RMK_#MRTKPXe[Y]f#X_#MW `,_#Z.c _#Meq:Kq4RUoU:MKPKMY]]ZB`+K_#MRTKPX

Q)(^\



~33



¹sº£~$»wº

~w¶Ýw¿$¾½

[Y]hOa6KORoZ[a6K2f#KZ6KPX _#UOP_#MK	IC @9RT[%RZ.c6KPW/KZ.c.KZ.OQK_#Z.c MYV*Z[_#OQ[RoOP_#U @RT[%RZ'c6KPW/KZ.c6KZ.OQKOQ]RoZ.OPRc6K
]Z @9RT[%MR^W"UR  Kc b1]#X ^}N.Uo_#MPj a6KM_#^eKa6]Uc.Mbr]#X S=_0XYRoZ.c6KPW/KZ.c6KZ.OQKL_#Z.c MYVZ[_#OQ[ROP_#U S=_0XY
RZ.c.KPWiKZ'c6KZ.OQK#j
a.KeMY[YXKZ6f#[aL]#b([a6KZ6]#[RT]Z ]#b,MR^W"UR  OP_0[RT]ZURTKM?RoZ [a6Keb_#OQ[[a._0[KPS#KPXV br]#X^&N.U_hOP_#Zd/K
MR^eW'UR  KcW.XKMYKPXSRZ.fRT[M?^e]c6KUoMPja.RoMRoM?N.MYKPbN.Um`B_#M?MR^W"UR  Kcb1]#X^&N.U_#M?OP_#Z d/KMa6]#X[YKPX_#Z.c
K_#MRTKPX4[Y]N.Z.c6KPX MY[_#Z.c[a._#Zhbr]#X^&N.U_#M,OQ]Z[_#RZ.RZ.feN.MYKUTKMM4URT[YKPX_#UMj

 P!0wuQ0uPwI4

=<

°

r¸u µuwÜ³·³uw{

&  


&w[!0x7

 
1 vr~*uPwYuu32yoQvr  yv5Oy1x.-"y 
:ut !0wxN/*  
  ov 

*RoZ.OQK @R[%MR^W'UoR  Kc5 A(M4_0XK2_#UMY] S=_0XYMR^W"UR  KcB`6[a'RMW.X]#Wi]MRT[RT]Zh_#UMY]Ma6]	q4M4[a'_0[4KPS#KPXV
 A OP_#Zd/KV=
S _0XYMR^W'UR  KcqRT[a6]N6[^]*c.RTbrV*RZ6f2RT[M,MYKP[]#b^]*c6KUMPj

%p Z[YKPXKMY[RZ6fUTV#`di]#[a @ RZ.c6KPW/KZ.c.KZ.OQK&_#Z'c S4RZ'c6KPW/KZ.c6KZ.OQKOP_#ZLd/KeOa'_0X_#OQ[YKPXRTgPKcq4RT[a*
]N6[OQ]Z'MRc6KPXRoZ6f [a6KOQ]#XXKMWi]Z'c.RZ6fLMYV*Z[_#OQ[RoOZ6]#[RT]Z.Me]#b3RoZ.c6KPW/KZ.c6KZ.OQK#` FYN'MY[dV OQ]^W"_0XRZ6f
br]#X^}N'U_#M(]#d.[_#RZ6KcdVMYKP[Y[RZ6f[a6K?[YXN6[ahS0_#UN6K?]#bUR[YKPX_#UM:q+Kq:_#Z[[Y]O a6KOh[a6K}c6KPW/KZ.c6KZ.OQK#j
 uPv& P u? M!0wx /*T w[!#x
vIvuQxuQz'vr20wYuu	M/*yr;0uQz"v 
JK  4 &
JWK &5j h ( A ! T
& jh /
J	MK &OA ! 5
& jh /
J
K 5
& j h ( A ! &
=<

°

r¸u µuwÜ³·³uw{




3
  0z"t3 P ?u 2yrvuPw%0 ![5(   ~*u?ziu32vG!/w





a.K_0d/]	S#KhW.X]#W/KPX[RTKM2OP_#Z d/KN.MYKc [Y]Oa.KO q4a6KP[a6KPXe_ br]#X^&N.U_RMN@RT[%c6KPW/KZ.c.KZ[&]Z _
URT[YKPX _#Um`6_#M[a6K?br]UUT]	q4RZ6f2K6_#^W'UTKMa.]q4MPj
  /GX: S /  S/HGX: SPYey1  yrv5Oy1zituR-6uPz"tuPz'v w[!0x S yrz uwYu -" QPyrz{ S P4
* f 
z3v <Û±q  &!
|yvr~y1z & {y1#uwyouv	! 0z yrzI!0z6 y1vuPz'v M!0wxN/T   !0z"vw%;Qvy1z{# 4"1 & y1  yrv5OYtu -6uQz"tuQz'v !#z :XS
 yrz u?wuR-"Ty1z{S PM4 :)|yvr~yrzB& {#yr0uQ & h / .1|8~y0Q~y13z !#v+#v\Tu;v(;? !{#y00r 4evw !0z{
;vr~*u}yrz I!0z6 y1vuPz'v !#w xN/* T! PPvI0yrziut PM4wuR-"Ty1z{SLP4* f |yvr~yrz &



 MRo^eRU_0XW.X]#Wi]MRT[RT]Za6]Uc'M=br]#X+ 4
S RoZ.c6KPW/KZ.c6KZ.OQK#`Oa._0X_#OQ[YKPX RTgRZ6f}[a6K4S0_0XR_0d'UKM\_br]#X^&N.U_
& c6KPW/KZ.c'M+]Z `'N.MRZ.f&[a.K?b1]#X^&N.U_#M &'gih / _#Z.cB&'gih ( j
° r¸u=µ
< uwÜ³·³uw{   uPv & P u M0! wxN/T w[!0x
3
% #z"tb> Pu00wyQPPTu+! 
  ~*uziu,2v
M!D/*w?vI#vuPxuQz'vr&#wYueu M/*yr;0uQz'v 
J K >  4 ,. &
J WK '& gih /  '& gih (
	J MK &  '& gih /
J 
K &  '& gih ( 







M\RZe[a6KOP_#MYK]#bBURT[YKPX_#U.c.KPWiKZ'c6KZ.OQK#`[a6K_0di]	S#KW'X]#W/KPX[V2OP_#Zd/KN.MKce[Y] 

_br]#X^&N.U_2RM S=_0XYc.KPWiKZ'c6KZ[,]Z_S;_0X R_0d'UTK#j


z3v

/ S8H
<Û±q &"!  

Z.c2]N6[\qa6KP[a6KPX

:XSPYy1 ' 0wIOyrz"tuR-.uQz"tuPz'vw[!#x!Sy1z  u3|+u3~0#uY& h /  & h ( . 
Q)(+Q

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

p%Z[YKPXKMY[RZ6fUTV#`& @BRZ.c.KPWiKZ'c6KZ.OQK_#Z.cs S4RoZ.c6KPW/KZ.c6KZ.OQK OP_#ZsdiK c6KP[YKPX^eRoZ6Kc RZs_#ZsKP
OPRTKZ[eq(_V q4a6KZ & RMfRTS#KZ RZ MY]^eKMYW/KOPR  OhZ6]#X ^e_#U,br]#X^eMP`(Z._#^KUTV#`:W.XRo^KR^W'UoROP_0[YKhZ6]#XY
^e_#Ubr]#X^ ]#X}W.XR^K2R^W"UROP_#Z[3Z.]#X^e_#U8br]#X^hje6]#X&MN.OaZ6]#X^e_#U8br]#X^eMP`@RT[%RZ'c6KPW/KZ.c6KZ.OQK2_#Z.c
S=_0XYRZ'c6KPW/KZ.c6KZ.OQK?OQ]^Kc.]q4Zh[Y][a6KRTX4OQ]#XXKMYW/]Z.c.RZ6f2MYV*Z[_#OQ[RoOP_#U br]#X^eMPj
Pu !0wxN/* Nw !0x7
3
% 0z"tm(:P uhI/=PuPvV![(R ~*uziu,2v
r¸u=<µuwÜ³·³uw{   uPv &
vIvuQxuQz'vr20wYuu	M/*yr;0uQz"v 
°



JK(  4 &
JW
K 
	"	&T U# 19AB1 y1vuQwx vr~#v,t!	uz!v I!0z'vI0yrz0z4
yvuQwY0Qw !0x2( +
J	MK 	 
	
& T # 0Ar0y1}L /u}vr~#v,t!uQz!#v ,!0z"vI0y1z#z4yrvuPw%# w[!#x ( + 



v & Pu !#w xN/*   w !0x 
3
% 0z"t U Pu  /PQPuv ![
  ~*uziu,2v
r¸u=<µuwÜ³·³uw{   uPY
vIvuQxuQz'vr20wYuu	M/*yr;0uQz"v 
°



JK U  4 , &
JWK
	"	&. T U# 19AB1 y1vuQwx vr~#v,t!	uz!v I!0z'vI0yrz0z4;0wy PQu  w !0x U +
J	MK 	 
	
& T # 0Ar0y1}L /u}vr~#v,t!uQz!#v ,!0z"vI0y1z#z400w ymQPPTu w !0x U +



 z3v <Û±q k  uPv& ! 0/D:XS /SHD:XSPY u,~0#u-
 	"	&! #  /:XSP +&0z"t 	 
	&!$#  % :XS>+
J	/*- 	v ! !{#y00=u	W/*y100TuPz u[K u 0z u; yr 4T!QPQPuQw0uvr~#v & yo  yrv5Oy1zituR-6uPz"tuPz'v  w !0xQS !W! ;y1z{
#v/
 "	 	& 'J 0! w 	 
	&  K  u 0z 0 M! u; yr 4 QvI#vuvr~#v.& y1  yrv5OYtuR-.uQz"tuPz'v !0z :XS0z"t '0wIO
yrz"tuR.- uQz"tuPz'v  w 0! x VLPM4%,0! z. ymtuQwy1z{0z4+![vr~*uQPu}z!0wxe0!0wx&



\X]#W/]MRT[RT]Z Ma6]qM[a._0[&_  AOP_#Z diKK_#MRUTV S=_0XYMR^eW'UR  Kc RmjK#jT`8RZLW/]UTV*Z6]^eRo_#U8[R^K	
#_ MMY]]Z_#M[a6KS0_0XR_0d'UKMRT[4RMYS=_0XYRZ.c.KPWiKZ'c6KZ[4b1X]^ a._S#K&d/KPKZc6KP[YKPX ^eRZ6KcBj(p%Z.c6KPKcB`'q+K2OP_#Z
K_#MRUV}c6KMRfZ_?f#XKPKc6V_#UTf#]#XR[a.^b1]#X+MR^W'UoRTb1V*RZ6f A(MPja.RM8_#UTf#]#XR[a.^OQ]Z.MRM[M=RZOQ]Z.MRoc6KPXRZ6f
KPS#KPXVS;_0XRo_0d'UT
K >L]#b U	.	 &4RZ_MN.OPOQKMMRTS#K2q:_V#`Bq4a.RUKXKPW'Uo_#OPRZ6+
f & d'
V & gih / q4a6KZ6KPS#KPX & RM
S=_0XYRZ'c6KPW/KZ.c6KZ[:brX]^ >j\a'RM,_#UTf#]#XRT[a'^ XN.Z.M,RoZ[R^KW/]UTV*Z6]^eR_#U/RZ[a.KMRTgPK?]#b & ]Z.OQK}[a6K
S0_0XR_0d'UTKM & RM S=_0XRZ.c6KPW/KZ.c6KZ[,brX]^ a._S#K}d/KPKZOQ]^W"N6[YKcBj ([4[a6KKZ'cB`.[a6KXKMN.UT[RZ.f  A RM
S=_0XYMRo^W'UR  KcBj
@9RT[%MR^W"URTbrVRZ.f_  ARM?Z6]#[}MY]hK_#MYVLRTb(Z6]_#MMN.^eW.[RT]Z.M3_0XK^_#c6K_0d/]N6[RT[M?MYV*Z[_ i`8c.N6K
[Y][a6K&br_#OQ[3[a._0[?URT[YKPX _#UM4MRfZ.M_0XK&OQXN'OPR_#U9a.KPXK#j3pZ.c.KPKcB`iU]]#*RZ6f]Z.UTV_0[3[a6K&]OPOPN6XXKZ.OQK&]#b+_
S0_0XR_0d'UTK(RZ.MRc6K\_3br]#X^&N.U_RM8Z6]#[MN6OPRTKZ[8[Y]MY[_0[YK,q4a6KP[a.KPX]#X=Z.]#[[a'RM8RM8_3Wi]MRT[RTS#K:]OPOPN6XXKZ.OQK
r]#X=_?Z6KPf_0[RTS#K,]Z.K	 j=6]#X[N.Z._0[YKUV#`[N6XZ.RoZ6f_3br]#X^&N.U_RZ[Y]?RT[XM 4O4RMOQ]^eW'N6[_0[RT]Z._#UoUTVK_#MYV_#M
UT]Z6f_#M8RT[9c6]KM8Z6]#[8OQ]Z[_#RZ2_#ZV]*OPOPN6XXKZ.OQK:]#b.OQ]Z.Z6KOQ[RS#KMURT#K  ]#X _#Z.c}R[W.X]	S#KM8MN6OPRTKZ[
[Y]c6KMRTfZ_?f#XKPKc6V_#UTf#]#X RT[a.^br]#X @RT[%MR^W'URb1V*RZ6f4
_  A q4a6KZ2[a6K4UoRT[YKPX_#UM8RT[=RM @9RT[%RZ.c.KPWiKZ'c6KZ[
brX]^ a._S#Kd/KPKZRc6KZ[R  Kc jpZ.c.KPKcB`.q4RT[a'RZ_#k
Z 4?4 br]#X^&N.U_*`6KPS#KPXVUR[YKPX_#UBOP_#Zd/KOQ]Z.MRoc6KPXKc
K_#MRUV_#M_#Z_0[Y]^eRO}]#Gd FYKOQ[Pj?a.RM_#UTf#]#XRT[a.^ OQ]Z.MRM[MRoZOQ]Z.MRoc6KPXRZ6fKPS#KPXVURT[YKPX _#&U =]#*b ( 3 *P	 &
RZ _MN.OPOQKMMRTS#K2q:_V#` q4a.RUKXKPW'Uo_#OPRZ6fKPS#KPXV]*OPOPN6XXKZ.OQK2]#*b \RoZ & d
V   "2OQ]Z.MRc6KPXRZ.fKPS#KPXV
URT[YKPX _#UB]#-b ( 3 *P	 &_#M_#Z_0[Y]^hj [_0[YKc]#[a6KPXqRMYK#`'qa6KZ =RoM_W/]MR[RTS#KrXKMYW jZ.KPf_0[RTS#K	UoRT[YKPX_#U
> rXKMYW jF%: >/ `"XKPW'U_#OPRoZ6f 8dk
V   "c6]KMZ6]#[^eK_#ZXKPW'Uo_#OPRZ6f %: > rXKMYW 'j >/(dV*    C+]Z.UTV[a6K
]*OPOPN6XXKZ.OQKM:]#&b q4RT[a[a6KXRTfa[+MRTfZ_0XK?OQ]Z.MRoc6KPXKcBja.RoM\_#UTf#]#XR[a.^ X N.Z.M\RoZ[R^eKW/]UTV*Z6]^eR_#U
RZL[a.KMRTgPKe]#Yb &]Z.OQKe[a6KURT[YKPX_#UM & RM @9RT[%RZ.c6KPW/KZ.c.KZ[b1X]^ a._S#Kd/KPKZOQ]^W'N.[YKcBj ([}[a6K
KZ.cB`6[a.KXKMN.U[RZ6f  A RM @R[%MR^W'UoR  KcBj

Q)(





~33

HBlIHKJ

uv

<m±q 

³·

¹sº£~$»wº

~w¶Ýw¿$¾½

[q¶ÜÚÛ±·Ü

J a.RUTKMYV*Z[_#OQ[ROP_#U( @ _#Z.c  4S c.KPWiKZ'c6KZ.OQKOP_#Z d/KK_#MRUTVO a6KO#Kc oR ZURZ.K_0X}[R^eKRZ [a6K
MRTgPK}]#b=[a6K&RZ6W'N6[P`'[a.RMRMb_0XbrX]^ /d KRZ6feK*W/KOQ[YKcbr]#XeMYK^e_#Z[ROP_#U14 @ 6c KPW/KZ.c6KZ.OQK}_#Z.c S
c6KPW/KZ.c6KZ'OQK3RoZ[a6Kf#KZ6KPX_#UOP_#MYK C

" ; <   =>$ $ % L < ML ; ('	   ) 	 )
  1 	   )
 )
  1 ' 	   ) 	  )
  0zit  '    )  )	
  0wYu  O[I!0x.-"uPvu 
=<

°

r¸u µuwÜ³·³uw{

k



uv

m±q

³·

u

)y

#q µq£{ Ûq¶{

q

0

 aN.MP`,_#UT[a.]N6fa [a6KPV UT]]# MR^eW'UTK#`\[a.KW.X]#d"UTK^eM]#bc6KP[YKPX ^eRZ.RZ.fqa6KP[a6KPX_b1]#X ^}N.Uo_RM
RZ.c.KPWiKZ'c6KZ[b1X]^ _hURT[YKPX_#U]#X_S0_0XR_0d"UTK&_0XKe_#Ma._0XcL_#MO a6KO*RZ6fhW'X]#W/]MRT[RT]Z._#UKZ[_#RU^KZ[Pj
p%Z[YKPXKM[RZ6fUTV#` [a.KeOQ]^W'UTK 6RT[V]#b+d/]#[ac.KOPRMRT]ZW.X]#d"UTK^eMbr_#UoUc6]q4Z [Y] q4a6KZ.KPS#KPXOa6KORoZ6f
RZ"c.KPWiKZ'c6KZ.OQK?d/KOQ]^KM[YX _#OQ[_0d'UTK#j W'_0X[brX]^ [a.KOP_#MYK&]#b8MVZ[_#OQ[ROP_#URZ.c6KPW/KZ.c6KZ'OQK#`.MY]^K
]#[a6KPXXKMY[YXROQ[RT]Z'M]Z &s^_0#KMRZ"c6KPW/KZ.c.KZ.OQK}[YKM[_0d'UTKeRZW/]UTV*Z6]^eR_#U[R^K#j2\MYW/KOPR_#UUV#`"q:K
f#KPM[ C

r¸u=µ
< uwÜ³·³uw{ k'k h~*uQziuP0uPw & P uP 0! z{0ev	!'PT;  ![ NOP M!0w xN/*T;vr~#vyovwYvIQPPTu.M!0w
P TD/Q# W/.uPwI420z6|+uQwy1z{BJIy ru  18vr~*uQwuu,2#y1vrY-!0 4#vyrxu0{Q!0wyvr~x v	!tuPvuPw x2yrziu3|8~6uPvr~*uPw &OA !=1
M!0w&0z=4NOP M!0wxN/T1K0z"tQvIQPQu M!0w00wyQPPTuy1z.vI0z'vym#vy0!0z Jy u I1+wuR-"Ty1z{hy1z & ) 0z4
;#w ymQQP u PM2
4 [YXN6K !0w P42br_#UoMYKe{#yr0u2!#w xN/* vr~#v(Qvy1r PuQ !0z{#&v	! Kvr~6uQz    ) 	 )
  1

)
   	) 
  1  '     )  )
  0z"t  ' 	   ) 	 )
  0wu}yrz  
°

%p Z W"_0X[ROPN.U_0X`,q4a6KZ(& RMXKMY[YX ROQ[YKc [Y] _ XKZ._#^_0d'UTK]#XZ ?54 br]#X^&N.U_]#X[Y] d'RZ'_0XV
OPU_#N.MKM?X]^ br]#X^&N.U_ `._#UU b1]N6Xc.KOPRMRT]ZW.X]#d'UTK^eM,_0d/]S#KdiKU]Z6f[Y] 9j
JLKa._S#K_#UMY]RZS#KMY[RTf_0[YKc[a6K4OQ]^W'UK*RT[V2]#biO a6KO*RZ6f}q4a6KP[a6KPX\_b1]#X^&N.U_3RM @RT[%MRo^W'UR  Kc
_#Z.T
c S=_0XMR^W'UoR  Kc"I C

0z"t   2 0 !       132  '#wYu  O[I!0x.-"uPvu 
UU8[a6KMYKOQ]^W'UTK6RT[V XKMN.UT[M?a._S#KMY]^KR^W'_#OQ[?]ZL[a.K_0W.W.X]_#O a6KM[a'_0[KW"UROPRT[UTVZ6KPKc
OQ]^W'N.[RZ6f 
U,.	&:_#M4_W.XKPW.X]OQKMMRZ6f2[_#MYiRj 4_#^eKUTV#`.q:Ka._S#K}[a6K?br]UUT]qRZ6f2XKMN.UM[ C
=<

k7

=<

k	H

°

r¸u µuwÜ³·³uw{

°

r¸u µuwÜ³·³uw{

 #(0 !       132 ' 

  2uvuQwx&yrz.yrz{h|8~6uPvr~*uPw
r( 3 P* 	&

! ( JI|8~*uPwY
u ( yoPuv ![&
yvuQwY0
 K 130z"ttuPvuQwx2y1z'y1z{
|8~6uPvr~*uPwU.	& !=A JI|8~*uPwYu?A y1}Puv ![;0wy PQu Key1 " - O[I!0x.-"uPvu 
  ~6u&Pu0w Q~ -"w !QPPTuPx ,!0z6yoQvy1z{hyrzOQ]^W'N6[RZ.f
r( 3 *P	&%JIwu	-.u3vyr0uP 4 U	.	& Ky1
yrz   - 0z"ty1 P3!#vr~  O~0wYt0zit O~0wYt 

BH l  ³Ü ; Ú#ÜÜ³u{
a6KW.XKPS*RT]N.M&Oa._0X _#OQ[YKPXRTg_0[RT]Z.M_#Z'c OQ]^W"UTK*R[VLXKMN'UT[M}UK_#c[Y]LMYKPS#KPX_#U "N6KMY[RT]Z'MMCq4a6KZ RM
RT[q+]#X[aq4a'RUTK[Y]W.XKPW'X]OQKMM_Z.]q4UTKc.f#K}d'_#MK}dVOQ]^W'N.[RZ6fRoZ.c6KPW/KZ.c6KZ.OQKXKU_0[RT]Z.M ) 4]	q
Ma6]N'Uc [a6KMYKRZ.c6KPW/KZ.c6KZ'OQK&XKU_0[RT]Z.M?d/KOQ]^eW'N6[YKc ) J a._0[}RoM?[a6KUKPS#KU=]#b(f#KZ6KPX_#UR[V ]#b,[a6K
c6K  Z'RT[RT]Z.M(_#Z.chXKMN.UT[M(q:Kf_S#K&RZ[a.RM4MYKOQ[RT]Z )

Q)(i

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

_#ZVWK "N.RTS0_#UTKZ[,O a._0X_#OQ[YKPXRTg_0[R]Z.M]#bb1]#X ^}N.Uo_;IS;_0XRo_0d'UTK3RZ.c6KPW/KZ.c6KZ'OQKa._S#Kd/KPKZfRTS#KZhRZ
[a6K,URT[YKPX _0[N6XK#`0K_#Oa2]#b"q4a.RO a}OQ]N.Uoc}MYKPXS#K(_#M_3c6K  Z.RT[RT]ZK  Z.RT[RT]Z<6` ?:]#X]UUo_0XV 0`K_#Oa2]#b"[a6K
MY[_0[YK^KZ[M3;  `i  8_#Z.c <RZ =X]#W/]MR[RT]Z _#Z.c2]#b"[a.KMY[_0[YK^KZ[M; `/  8RZ =X]#Wi]MRT[RT]Z `
MY]e]Z.K^e_Vq:]Z.c6KPXq4a'ROa]Z6K}a._#M,[Y]ed/KN.MYKchRoZhW.X_#OQ[ROQK#j
p%Z^_#ZVW"_0WiKPX M4XKPbrKPXXRoZ6feK *W'UROPRT[UV[Y]br]#X^}N'U_;IS;_0X R_0d'UTKRoZ.c6KPW/KZ.c6KZ.OQK#`'[a6K}W'XR^K&R^W'URT
OP_#ZI[ H;OP_0[YK2O a._0X_#OQ[YKPXRg_0[RT]Z 5 \X]#W/]MRT[RT]ZRM,N.MYKc_#M4_c.K  Z.RT[RT]ZL5 A:]N6[RUoRTKPX` # <6 ]a.KPX[V
KP[?_#UmjT` #  j 
KZ6KPX_#UUVMYW/K_0RZ.f6`"[a.RoMRMZ6]#[[a6K2Oa6K_0W/KMY[q:_V[Y]hOQ]^W'N.[YK}[a6K2MYKP[]#b=S0_0XR 
_0d'UTKM?_br]#X^&N.U_c6KPW/KZ.c.M]ZB`MRZ.OQK&[a6KeMRTgPK2]#5b 
	"	 &RoMK *W/]Z6KZ[R_#URZ[a6KeMRTgPK2]#b &sRZ[a6K
q:]#XMY[OP_#MYK#ja.RM?O a._0X_#OQ[YKPXRg_0[RT]Z RoM3[Y]d/KeN.MYKcLRZW.X_#OQ[ROQKe]Z'UTVRTb:[a6KeMYV*Z[_#OQ[ROP_#U\br]#X^ ]#b
& RMMN.Oa [a._0[RT[MW.XR^KhR^eW'UROP_#Z[M&]#XW.XRo^KhR^W'URoOP_0[YKMOP_#Z d/KOQ]^W'N6[YKc K_#MRUTV b1X]^ RT[
r[a.RM4RM,[a6KOP_#MYK}b1]#XRZ.MY[_#Z.OQKq4a6KZ6KPS#KPX & RM,_ ?X]^ b1]#X ^}N.Uo_ 1j ?(UTK_0XUV#`6[a6KOa.K_0WiKM[4q(_V[Y]
OQ]^W'N.[YKb1]#X ^}N.Uo_;IS;_0XRo_0d'UTK,RZ.c6KPW/KZ.c.KZ.OQK,OQ]Z.MRMY[M+RZN.MRoZ6f_#ZV2]#b/[a6KWK "N.RTS0_#UTKZ[b1]#X ^}N.Uo_0[RT]Z.M
]#b =X]#W/]MR[RT]Z `.q4a.RO ah_#UUBOQ]Z.MRoMY[,]#b8S;_#URoc.RT[V[YKMY[MPj
?(a.KO*RZ6feq4a.KP[a6KPX4_ebr]#X^&N.U_ & RM S=_0XYRZ'c6KPW/KZ.c6KZ[,b1X]^ _S0_0XR_0d'UT3
K > RM 'OQ]^W'UKP[YK#`
q4a.RoOaR^W"URTKM[a._0[+MR^W'URb1V*RZ6f4_Z.]q4UTKc.f#K,d'_#MYKdV2f#KP[Y[RZ6fXRoc2]#biXKc.N.Z.c._#Z[S0_0XR_0d'UTKMZ.KPKc.M
A U.	 &AOP_#UUM=[Y]2_#Z  ]#X_#OPUK#`*_#Z'cRM\[aN.M+RZ   - _#Z.cZ6]#[\d/KUT]	qsN.Z.UKMM   !  B j6a.RM
^e_VUT]]# W'_0X _#c6W] 6ROP_#U3_#Z.cMY]^eKP[R^KM&N.MYKUTKMM[Y]W.XKUR^eRZ'_0XRUTVOQ]^W"N6[YKMYKPS#KPX_#U:RZ.M[_#Z.OQKM
]#b4_   ]#
X  .a'_0Xc RZ.c6KPW/KZ.c.KZ.OQKeW.X]#d"UTK^ [Y]La6KUW MY]USRZ.f_ MRZ6fUK	?RZ.M[_#Z.OQK]#b_ 
]#X  .OQ]^eW'UTKP[YKLW.X]#d"UTK^hjC4]	q+KPS#KPX`[a'RMZ.KPf_0[RTS#KOQ]^e^KZ[a._#M_ f#KZ6KPX_#U?MOQ]#W/K]Z.UTV#`
_#Z.c RZ^e_#ZVLW'_0X[ROPN'U_0XOP_#MYKMP`[a.RoMOP_#ZW'X]S#L
K "N.R[YKeKPOPRTKZ[RZ'c6KPKcB`KPS#KZ q4a6K#
Z &a._#M}Z6]
W'_0X[RoOPN.U_0X?MYV*Z[_#OQ[ROP_#U8br]#X^h`B[a.KeM_0[RM  _0d"RURT[Vh]#X?[a6KN.Z.M_0[RM  _0d'RUR[V]#b &5gih / / : &'gih ( ^e_V
d/K4W'_0X[ROPN.U_0XUV}K_#MYV[Y]&O a6KO. j+'N6X[a6KPX^e]#XK#`RbB[a6K*Z6]	q4UTKc6f#Kd'_#MYK & RM+[Y]2d/.
K "N6KPXRTKc^e_#ZV
[R^KM`4[a6KZ [a6KW.XKPW.X]OQKMMRZ6fW"a._#MYK OQ]Z.MRMY[RoZ6f RZ S=_0XYMRo^W'URTbrV*RZ6X
f & dV RTfZ6]#XRoZ6f N.MKUTKMM
S0_0XR_0d'UTKM,RoM,URT#KUTV[Y]ed/K?q+]#X[aq4a.RoUTK#j

=A ÃE ìëëH D 
p%Z[a.RM(MYKOQ[RT]ZB`6q:Kc6K  Z.Kqa._0[(b1]#Xf#KP[Y[RoZ6feRMP`*W.XKMKZ[MY]^eK]#b8RT[M(W.X]#WiKPX[RTKMP`*_#Z.c  Z._#UUVfRTS#K
MY]^K}OQ]^W'UTK 6RT[VXKMN'UT[MPj

 lmk

!

4L ° ru<µqsr·³q¶Ü
 d'_#MRO:q(_V[Y]MR^W'URb1V_  A qjXj[Pj_MYKP[\]#b/UoRT[YKPX_#UM8]#X\_MYKP[=]#b/S;_0X R_0d'UTKMOQ]Z.MRMY[M=RZM!0wm{uvmvy1z{
URT[YKPX _#UMIH	S0_0XR_0d'UTKMRZ&RT[Pj A+KPV#]Z'c[a6K,MR^W"UR  OP_0[RT]Z[_#MYi`b1]#Xf#KP[Y[RZ6f?RM8_3q:_V}[Y]?^e_0#K_3br]#X^&N.U_
RZ.c.KPWiKZ'c6KZ[:brX]^ URT[YKPX _#UIM H	S0_0XR_0d'UTKMj @KP[4N.M  X MY[,MY[_0X[q4R[ahURT[YKPX_#U/br]#Xf#KP[Y[RZ6f C
q m{Û³·³uw{#Ü

z3{

 " ±'³·q¶rz3±1> uwr|wqf··³'{Ã| '  u v1&:P u M!0w xN/*T  w[!#x 

 #z"t ( P uI/=PuPv
![+(*  &'))(%*( 3 *P	& % ((?y1vr~*u1M!0w xN/*Ty1z"t/vy1#uQ 4tu;
=ziut0 !#1 !0|8
 &'")(%+* ( 3 *P	& %  ! &1
 &'")(%+* ( 3 *P	& % #i +;7! &Tj h ( HL :Y/ & 1
&'")(%+* ( 3 *P	& % #i + . ((/!.&'))(%*( 3 *P &'))(%*( 3 *Q	& % (( % #i +;

!

q m{Û³·³uw{

Q)(76



~33



¹sº£~$»wº

~w¶Ýw¿$¾½

a'RM}c.K  Z.RT[RT]Z RM2MY]N.Z'c MRZ.OQK[a6K]#Xc6KPXRoZ6fRoZq4a'ROa URT[YKPX _#UM&]#b?( _0XKhOQ]Z.MRc6KPXKc c6]KM
Z6]#[4^_0[Y[YKPX 7 j\JLK&OP_#Z_#UMY]W.X]S#K[a._0[[a6Kc.K  Z.RT[RT]Zh_0d/]	S#K}RM(KW"N.RTS0_#UTKZ[,[Y][a6K]Z.KRZq4a.RoOa
]RZ
[ j\RM(XKPW"U_#OQKchdV

&'))(%*( 3 *P	& % #i +;1! &5j h ( HL :X2/B&5j h / 
FN.MY[,d/KOP_#N.MYK & _#Z'c &5j h / _0XK?WK "N.RS;_#UTKZ[^]*c.N.UT]:Yj
@KP[(N'M+Z6]	q fRTS#K?_&MK^e_#Z[RoOP_#UiO a._0X_#OQ[YKPXRg_0[RT]Z]#b9UR[YKPX_#U.br]#Xf#KP[Y[RZ6f6j\pb&( !$#i +`*[a._0[,RMP`B(
RMOQ]^W/]MYKc]#b\_MRZ6fUTKUoRT[YKPX_#Um`"[a6KZb1]#Xf#KP[Y[RoZ6b
f =b1X]^ _b1]#X ^}N.UoL
_ & _#^]N.Z[M[Y]RZ[YX]*c.N.OPRZ6f
[a6K^e]c6KU &'"lV>= % X: m(b1]#XK_#O a^e]c6KU = ]#b & MN'Oah[a._0[D=9A ! j
° r¸u=<µuwÜ³·³uw{ k 
~*uuPv ![x !tuP  ! D&'))(%* ( 3 *P	 & % #i +;N
 #z P u23u 2 -iwYuQPut; 
d f' e" &'))(%+* ( 3 *Q	 & % #i +;Y ! d f' e"	 & . # &')l V >= % Y: I A2=;A ! & +
! #+= A &')f V>= % mDA ! &+
 MR^eRUo_0X:MY[_0[YK^eKZ[4OP_#Zd/KfRTS#KZbr]#X,[a6K?OP_#MYKRZq4a.RO )
a ( RM(OQ]^W/]MYKc]#b9^e]#XK3[a._#Z]Z6K
URT[YKPX _#Umj8pZh[a'RMOP_#MYK#`.br]#XK_#O a^]*c6KU = ]#b &`.q:KOP_#Zbr]#XOQK_#ZVhMN6d'MKP[,]#bUR[YKPX_#UTM ( ( 9( MN.O a
[a._0[F=;A ! ( ( [Y]_#MMN.^K?[a6KS0_#UN6K3b_#UMYK#j
=<

°

r¸u µuwÜ³·³uw{

k

~*uuPv ![x !tuP  ! D&'))(%*( 3 *P	& % (
(   0z Pu2u32-"wuut0

d 'ei &'))(%*( 3 P* 	& % ((Y

A &'"lV>= % ( ( FA ! & |8~*uQwu6( ( 9(
M_eOQ]#X]UoU_0XV#`.q:K]#d.[_#RZ[a.Kb1]UoUT]q4RoZ6f2W.X]#W/KPX[RTKM(]#b8URT[YKPX_#U/br]#Xf#KP[Y[RZ.fC
J

uwru±±z$r

 7

!$#+=

 uv &1 
 P u1!0wxN/* ;1 w !0x


3
% #z"t( ( % ( - 9(R

+



! &'))(%*( 3 *P	& % ( ( 3~!# t; 
 & A.
& A ! 
~!0Tt; 1(vr~*uQz &'))(%*( 3 *Q	& % ( ( F
 A !.&'))(%+* ( 3 *Q 
 % ( ( ?
 ~!0Tt;&;|+uP1 
  O
 ( ( "( - ~0! Tt; 1(vr~*uQz &'))(%+* ( 3 *Q	& % ( (  A !.&'")(%+* ( 3 *P	& % ( - ?
 ~!0Tt;20|+uQr 
 ?

@KP[4Z6]q OQ]Z.MRc6KPX_#ZhK*_#^eW'UTK#j



z3v

 u~0#u&'))(%*( 3 *P	& % #):< +;   3HbV0/S-HbVP
<Û±q k"k uPv &"! :<H)SP0/L 3H)V 

a.K?#KPVW'X]#W/]MRT[RT]Zbr]#X[a6KZ6]#[R]Zh]#b9br]#Xf#KP[Y[RZ.fRM,[a6K?br]UUT]	q4RZ6f2]Z6KC

orqtsu%z}yUyMy#}sW:	{}u TuU&{|Ty:&:z	psU  y{zxWz	~t|u 	 luY x8y5|}uz	|!
npo* 

 	5 
~ 
 *}s'u  "!#$%& "!#'$() +*+),* (.-0/+1 32 -541 76 $789(
* -541 76 $
8
(.-0/+1  * 6 $:  8;  8;(
*
<=(.-0/+1 32 -54+1 >6 $  8?(.-54'1  * 6 $  8;(.-0/+1  * 6 $  8;  8;(
*8WTTuz}
    ~   !
Do* "  @  @B}su A%3:!#$3:!#$()B#*+)C#* D$(.-E1 F6 $G8H(.-E1JI%*3* -E1KI 6 $8L$(.-E1 F6 $G8
(.-E1KI%*3* -E1JI&*M<=(.-E1 6 (.-E1JI- iTTu z}% NB fN
~  !

ioR}suX{Ku   O  Wz}D| o
Q)(,+

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

& '))(%*( 3 P* 	& % ((3y1?vr~6u
 uv & Pu} M!0wx */ T. w !0x!

 0z"t(9"(*  
r¸u=<µuwÜ³·³uw{ k
 !{#y00r 4 vw !0z{uQv , !0z6u	W/.uPz uB![ & vr~#v?y1  yrv5Oy1zituR-6uPz"tuPz'v w[!0x ( 	J /*- v	!  !{ y5 0u	W/yr;O
uQz u K 
°

 a.Kbr]UUT]	q4RZ6f2R^e^Kc'R_0[YKOQ]Z.MKW"N6KZ'OQK?]#b=X]#Wi]MRT[RT]Z'&KM[_0d'URMa.KM:M[YX]Z6f2XKU_0[RT]Z'Ma.RTW'M
d/KP[q:KPKZUR[YKPX_#U/b1]#Xf#KP[Y[RZ6f_#Z.cB@RT[%RZ'c6KPW/KZ.c6KZ.OQKC

J uwru±±z$r  H  uPv & Pu2.!#w xN/*  w !0x 
3
% #z"t( "(*
(sy &0z"t+!0z. 4y .& .
 &'")(%+* ( 3 P* 	& % (:~!0Tt; 

Y& yo  yrv5Oy1zituR-6uPz"tuPz'v  w !0x

a.K?b1]UU]q4RZ.f&]Z.KfRTS#KM_#ZR^e^Kc.Ro_0[YK3_0W'W'UROP_0[RT]Z]#b8URT[YKPX _#U/b1]#Xf#KP[Y[RoZ6fC
x /*  $y1  y5v Oyrz"tu -6uQzituQz'v w !07
x ( 1vr~6uQz & A !:$~ !# t;y 0z"t !0z' 4y 
J uwru±±z$r     !#w N
&'))(%* ( 3 *Q	 & % ((FA ! $.
a'RM:XKMN.UT[(W.X]S#KM[a'_0[,b1]#Xf#KP[Y[RoZ6feURT[YKPX_#UoM(b1X]^ ( c6]KM,Z6]#[_ iKOQ[KZ[_#RoU^KZ[,]#b9br]#X^&N.U_#M
[a._0[_0XK @9RT[%RZ.c6KPW/KZ.c.KZ[ brX]^ (4ja'RM9RoMRoZ}MY]^eKMYKZ.MYK,_#Z._#UT]#f#]N'M8[Y][a.K(OQ]Z'OQKPW.[]#b  U[YX_0[RT]Z
RZ^]*c._#U9U]#fROPMe	 
]Uc6d"U_0[Y[P`  # 9RZ.c.KPKcB`iRbq+K_0XKRZ[YKPXKMY[YKcLRZ*Z6]q4RoZ6fqa6KP[a6KPX & A ! $
]Z.UTV2br]#X+br]#X^&N.U_#M $ [a._0[:_0XK @9RT[%RZ.c.KPWiKZ'c6KZ[brX]^ (`[a6KZ[a.KURT[YKPX _#UM=]#b ( OP_#ZdiKb1]#Xf#]#[Y[YKZ
RB
Z &j
@KP[N.MZ6]qRZS#KMY[RTf_0[YK&[a6K}OQ]^W"N6[_0[RT]Z]#b &'")(%+* ( 3 *P	 & % (: j @KP[N.M  XMY[OQ]Z'MRc6KPX O4
br]#X^}N'U_#M &j6]#Xf#KP[Y[RZ6f}URT[YKPX_#UMq4R[a.RZ 64 b1]#X ^}N.Uo_#MRoM_?OQ]^W'N6[_0[RT]Z'_#UUTVK_#MYV&[_#MYij Z2[a6K
]Z6K3a._#Z.cB`br]#Xf#KP[Y[RZ6fURT[YKPX _#UM=q4R[a.RZ_&c.R5M FYN.Z'OQ[RTS#K4br]#X^&N.U_OQ]^eKM,c6]q4Z[Y]&b1]#Xf#KP[Y[RZ6f2[a6K^ RZ
KPS#KPXVhc.R5M FYN.Z'OQM[ C
=<

°

r¸u µuwÜ³·³uw{

k





 0z"t(="(R 
& ')"( *( 3 *P	& % :( 

H &'))(%*( 3 *P 
 % (( '

 uPv &1 
 Pu}v| ! M!0w xN/*T; w[!0x

&'))(%*( 3 Q* 	&KH 
 % (:"

Z [a6K]#[a6KPX:a._#Z.cB`br]#Xf#KP[Y[RZ.fURT[YKPX_#UoM8q4RT[a.RZ_OQ]Z.MRMY[YKZ[=[YKPX^ MR^W"UTVOQ]Z.MRoMY[M\RZ2XK^]S
e
RZ6f[a.K^ b1X]^ [a6K?[YKPX^TC
k   uBv 1 P u I!0z6yoQvuQz'v vuPw x w !0x 
3
% JyIuQ|+ut;(vr~6u:Puv![:yrvr:
yvuQwY0
 K
0z"tc( "(R  &'")(%+* ( 3 *P 1 % (:  j  
=<

°

r¸u µuwÜ³·³uw{

UoRT[YKPX_#UM&OP_#Z d/Kbr]#Xf#]#[Y[YKZ brX]^ _
rb ]#X^&N.U_B&RoZ Wi]UVZ6]^R_#U[R^K#jep[RMMN.OPRTKZ[?[Y]c6KUTKP[YKeKPS#KPXV UoRT[YKPX_#U8]#bT( brX]^ K_#O a
c.RM5FYN.Z'OQ[+]#b &RTb]Z6K?]#b8[a6Kc.RoM FYN'Z.OQ[M(d/KOQ]^KM,K^W.[V[a6KZ &'))(%*( 3 *Q	& % (( 9* f ; j
a'RZ6fMB_0XK:^]#XK\OQ]^W"UROP_0[YKcbr]#X9OQ]DZ FYN.Z'OQ[RTS#K=br]#X^}N'U_#M &/
j9\MYW/KOPR_#UUV#`[a6KPXK:RM Z6]XKMN.UT[
MR^RU_0XB[Y.] \X]#W/]MRT[RT]Z ^,b1]#XOQ]Z FN.Z.OQ[RTS#K=br]#X^&N.U_#MPj9J a'RUTK &'))(%* ( 3 *Q	 & % (( / &'))(%* ( 3 *P 
 % ((
RM_U]#fROP_#U.OQ]Z.MYWK "N6KZ.OQK4]#b &'))(%+* ( 3 *Q	 &/ 
 % (:(MKPK ?:]#X]UoU_0X
V  `[a6KOQ]ZS#KPXMYKc.]KM=Z.]#[=a6]Uc
RZ[a6Kf#KZ6KPX_#U OP_#MYK#j
64

?:]^}d'RZ'RZ6f[a.K[q+]LW'XKPSR]N.MW'X]#W/]MRT[RT]Z.M}Ma6]	q4Ma6]q


	

 z3v <Û±q kG7  uPv & !. 1 
"!O:< 1+0z"t( !$# + .y1z  u  4 
1=|+u~0#u&'))(%*( 3 *P 
 % ((

  .yrz u
&'))(%+* ( 3 *Q	& % (:yoh;#
ymt)12|+u~00u &'))(%+* ( 3 *Q	& % (: / &'")(%+* ( 3 *P 
 % (:Y   :< 
5
.yrz uV&G/ 
y1y1z ,!0z6yoQvuQz'v>1<&'))(%*( 3 *P	& / 
 % (:yoyrz,!#z6 y1vuPz'v:0|+uQr 

	

	

Q)(^]



~33



¹sº£~$»wº

~w¶Ýw¿$¾½

`*_#ZVZ.]Z*IS;_#UoRcOPU_#N'MYK60RM @RT[%RoZ.c6KPW/KZ.c6KZ[=brX]^ ( RTb _#Z.c]Z.UTVeRTb( 3 *P0; 
 j *RZ.OQK[a6KOQ]ZDFYN.Z'OQ[RT]Z ]#b?[q+] br]#X^}N'U_#Me[a._0[_0XK @RT[%RoZ.c6KPW/KZ.c6KZ[2b1X]^ ( RM @9RT[%
RZ.c.KPWiKZ'c6KZ[?brX]^ ( MKPKL\X]#W/]MRT[RT]Z  `_#Z.c MRZ.OQKKPS#KPXVLbr]#X^}N'U_RMKW"N'RTS;_#UKZ[[Y] _ ?T4
br]#X^}N'U_*Q` =X]#Wi]MRT[RT]Z+&3Ma6]	q4M &'))(%*( 3 *Q	& % ((KW"N.RTS0_#UTKZ[[Y][a6KMYKP[]#bB_#UU*OPU_#N.MYKM*04[a'_0[\_0XK
KZ[_#RUTKc2dV & _#Z.c_0XK,b1X]^ #0OPU_#N'MYKA ( 3 *P0; O( !  +j A:KOP_#N.MYK#0OPU_#N.MKA( 3 *P0; O( !. +RM
OPUT]MYKcN.Z.c6KPXMN6d'MN.^eW.[RT]Z2RmjK#jT`#RT[ RMB_MY[_0d"UTK=W.X]*c.N.OQ[R]Z  KUc" `	R[ RMBW/]MMRTd"UTK9[Y][_0#K+_#c6S0_#Z[_0f#K
]#b}OQ]Z'MYWK "N.KZ.OQK  Z.c.RZ.f _#UTf#]#XR[a.^eM MYKPK _0IX "N.RoMP
` 0## `3[Y] c6KPXRTS#K "
_ ?54 XKPW'XKMYKZ[_0[RT]Z
]#b&')"( * ( 3 *P	 & % (: j \MWiKOPRo_#UUTV#`=RZ [a6KhOP_#MYKq4a6KPXK & RM_ ?54 br]#X^&N.U_*`=XKMY]UN6[RT]Z6Id'_#MYKc
OQ]Z.MYWK "N6KZ.OQK  Z'c.RZ6fe_#UTf#]#X RT[a.^eMURT#K}[a6]MYK2XKPW/]#X[YKcRZ rp%Z6]N6K#` # ]#Xec6KU S=_#Um` ##OP_#Z
d/KN.MYKcB6[a'RM,RM,Z6]#[S#KPXVMN6XW.XRoMRZ6fMRZ.OQK?XKMY]UoN6[RT]ZhRM,Z6]#[a'RZ6fd'N6[300w ymQ PPTueuP
yrx2y1zi#v5y !#z.j
p%ZOQ]Z[YX_#MY[ [Y][a.K\c.RM FN.Z.OQ[RS#K9br]#X^&N.U_#M MR[N._0[RT]ZB`[a.KPXK\RMBZ6],fN'_0X_#Z[YKPK+[a._0[MN'OaOQ]Z.MWK "N6KZ'OQKQ
 Z.c'RZ6f_#UTf#]#X RT[a.^eM+XN.ZRZ[Ro^K4W/]UTV*Z6]^eR_#U"RZe[a.K3RoZ6W'N6[\MRTgPK4q4a.KZ[a6K?RZ.W'N6[\RM:_&OQ]Z FYN'Z.OQ[RTS#K
br]#X^}N'U_r]#[a6KPXqRMYK#`9_#M}K *W'U_#RZ6KcRZL[a6Kebr]UUT]	q4RZ6f6`9q+Kq+]N'Uca._S#K  !  B j 4KPS#KPX[a6KUTKMMP`
br]#Xf#KP[Y[RZ6fURT[YKPX_#UoM,q4RT[a.RoZ_OQ]Z FN.Z.OQ[RS#Kbr]#X^}N'U%
_ & OP_#Zd/KK_#MVRZMY]^eK}XKM[YXROQ[YKcOP_#MYKMP`iKM%
W/KOPR_#UUTVq4a6KZ & RM,fRTS#KZdV[a.KMYKP[4]#bRT[M4W.XR^eKR^W'URoOP_0[YKMP.RZh[a.RoMMRT[N._0[R]ZB`.RT[4RM4MN6OPRTKZ[
[Y]efRTS#K}N6Wh[a6]MYKOPUo_#N.MYKMOQ]Z[_#RZ.RZ.fe_eURT[YKPX_#U/brX]Q
^ (4j
° r¸u=<µuwÜ³·³uw{ k 
 !0wN
x /*  [w !#2
x 

 0z"c
t ( "(R 
 uPv & Pu&.
	 
 &')"( * ( 3 *P	 & % (:Y7
 !$#0rA 0 )	 
	 &F e)( 3 *P 00M)
 ( ! +'
a.K:Z6]#[R]Z}]#b"URT[YKPX_#Ub1]#Xf#KP[Y[RZ6f3f#KZ6KPX_#URgPKM8[a6K:Z.]#[RT]Z&]#b'S0_0XR_0d'UTK+KUR^eRoZ._0[RT]ZbrX]^sW.X]#W/]0
MRT[R]Z._#U*UT]#fRO?r[a._0[q(_#M=_#UTXK_#c6VZ6]	q4Z2dV A:]]UK_#MKUR^eRoZ._0[RT]Z]#b/^eRc'c.UTK\[YKPX ^eM_#Z.ca._#M8d/KPKZ
f#KZ6KPX_#UoRTgPKc[Y][a6K  X MY[%I]#Xc6KPXOP_#MKRZ_^]#XKXKOQKZ[&W'_#MY[dV @9RZ  E4KRT[YKPX` # < jp%Z.c6KPKcB`
S0_0XR_0d'UTK}KUR^eRoZ._0[RT]ZRoM_0d/]N6[&;#w ymQ PQu !0wm{uvmvy1z{#`RmjK#jT`/[a6K2]Z6K_#O a.RTKPS#KcLZ6]#[?OQ]Z.MRoc6KPXRZ6f[a6K
URT[YKPX _#UM,MRTfZ.MWC
Pu !0wN
x /*   w !0x 

 #z"tLuPYv U Pu
q!m{Û³·³uw{  " nz$r³z$´Û±q'> uwr|wqf··¸³{#| '  uPv &
I /=PQPuPv ![+
  &')"( 3* U	.	 & % U&?y1vr~*1
u !#w N
x /* yrz"Dt /vy1#uQ 4t;u 
=ziuth0 !0r !0|8 
 ! &1
 &'")(%+* U,	.	 & % 
 ! &'gih ( H &'gih / 1
 &'")(%+* U,	.	 & % #D> +;
 ! &')"( 3* U	. &')"( 3* U	.	 & % U& % #D> +; 
 &'")(%+* U,	.	 & % #D> + . U}
 H)SP0/L 3 H)V  u~0#u&'))(%3* U,.	 & % #  +;  S-H)V 
 z3v <Û±q k%H  uPv &"! :<
M=_?c.RTXKOQ[8OQ]Z'MYWK "N.KZ.OQK,]#b"[a.Kc6K  Z.RT[R]ZB`)&'")(%+* U,	.	 & % #D> ( %('''% > ) +;8RoM9WK "N.RTS0_#UTKZ[8[Y][a6K
"N._#Z[R  Kcd/]]UTK_#Zb1]#X^&N.U_hN.MN._#UUTVq4RT[abrXKPK?S;_0X R_0d'UTKM 
&c.KZ6]#[YKc  > ( '('('  > ) &j
?(UK_0XUTV KZ6]N6faB`br]#Xf#KP[Y[RZ.f_S;_0X R_0d'UTK > _#^]N'Z[M&[Y] b1]#Xf#KP[Y[RZ6fdi]#[a[a6KURT[YKPX_#U
M > _#Z.c
%: >9j
° r¸u=<µuwÜ³·³uw{ 7 
 !0wN
x /*  [w !#2
x 

  0z"t U!"
  u~00u
 uPv & Pu&.
&'))(%3* U	.	 & % U2" .&'))(%* ( 3 *Q	 & % ('$+
a'RMXKMN.UT[P`#[Y]#f#KP[a6KPX\q4RT[a&[a6K(W.XKPS*RT]N.M9XKMN.U[M9]ZUoRT[YKPX_#Ub1]#Xf#KP[Y[RoZ6f6`fRTS#KMN.M[a6K(br]UUT]	q4RZ6f
OQ]#X]UUo_0XRTKM(br]#XS;_0X R_0d'UTK?br]#Xf#KP[Y[RZ6fC

(

!

?(UK_0XUTVKZ6]N6fa

Q (

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

J

uwru±±z$r



d 'ei &'))(%*3U.	& % D# >*+;Y
J

d 'fe"	& . # 3 * V >= % >B A2=;A ! &+ '
uPv &Pu2 M!0wx /*Th0z"t U2"
 F&'))(%+* U.	& % U2yovr~6u& !{#y00r 4vw !0z{uQv
!


uwru±±z$r 
,!#z6Pu M/'uQzuN![ & vr~#v:y1 .0w Oyrz"tu -6uQz"tuQz'v w[!0x U J	/*-v	! !{#y00=u	W/yr;#TuPz u[K 



x /T $ y1 '0Iw Oyrz"tRu -.uQz"tuPz'v w !0x U 1vr~*uPz & A ! $ y  0z"
t !0z. 4 y 
J uwru±±z$r      M!0wN
&'))(%*3U,.	& % U&FA ! $ 
 OQ]Z'MYWK "N.KZ.OQK(]#b.[a6K,U_0[Y[YKPX8XKMN.U[9RM9[a._0[8b1]#Xf#KP[Y[RZ6f3S;_0X R_0d'UTKM9RM9N'MYKPbrN'Uq4a.KZ]Z.UV_MN6d'MYKP[
]#b=S0_0XR_0d'UKM4_0XK&XK_#UUTVN'MYKcRZ[a6N
K "N.KPXRTKMPj44aN.M`"RT1b & XKPW.XKMKZ[M3MY]^K&W'RTKOQKM]#b=*Z6]qUTKc6f#K
_0d/]N6[=_?MOQKZ._0X RT]?]#biRoZ[YKPXKM[P`_#Z.c2q:K4_0XKRZ[YKPXKMY[YKcRZ&Z.]q4RZ.f?q4a6KP[a6KPX=_?b_#OQ[ $RM8[YXN.KRZ2[a6K
MOQKZ._0X RT]6`[a6KU]#fROP_#U6]#W/KPX_0[RT]Z[Y]}c6]RM8[Y] "N6KPXV&q4a6KP[a.KPX &OA ! $\-j 4]q`RTb"[a.K,Wi]MMRTd'UTK:b_#OQ[M $
q:K_0XKRZ[YKPXKMY[YKcRoZhc6]eZ6]#[RZS#]UTS#KMY]^KS;_0XRo_0d'UTKM U`6[a6KZh[a6KMYK?S0_0XR_0d"UTKM,OP_#Zhd/K?b1]#Xf#]#[Y[YKZ
brX]^ &`._#.M "N6KPXVRZ.f&qa6KP[a6KP.X $ RMRo^W'URTKcOP_#Zd/K?c6]Z6K?]Z&'))(%3* U	.	 & % U2:RZ.MY[YK_#c]#b &j
a.X]N6fa2[a6K,W.XKPSRT]N'M9W'X]#W/]MRT[RT]ZB`#MY]^eK4_#UTf#]#XRT[a'^eMb1]#X=br]#Xf#KP[Y[RZ.fS;_0X R_0d'UTKM8OP_#Zd/K,K_#MRUV
c6KPXRS#KcLb1X]^ _#UTf#]#XR[a.^eM?br]#Xbr]#Xf#KP[Y[RZ6fURT[YKPX_#UMMY]^Ke]#b,[a6K^ a._S#Kd/KPKZMY#KP[Oa.Kc d/KPbr]#XK	 j
W/KOPR  OP_#UoUTV#`W/]UTV*Z6]^eR_#U'[R^K_#Uf#]#XRT[a.^eM+br]#X:br]#Xf#KP[Y[RZ.f}S0_0XR_0d'UKM\q4R[a.RZe_ 64b1]#X ^}N.Uo_]#X,_
br]#X^}N'U_fRS#KZdVe[a.K3MKP[,]#b9RT[M:W.XRo^KR^eW'UROP_0[YKM:OP_#Zd/K]#d'[_#RZ6KcBj [a6KPX([YX_#OQ[_0d"UTKOPU_#MMYKM(]#b
W.X]#W/]MR[RT]Z._#U9b1]#X^&N.U_#Mbr]#X?S;_0X R_0d'UTK&b1]#Xf#KP[Y[RZ6fhK 6RMY[Pj}.]#X}RZ.M[_#Z.OQK#`B[_0RoZ6fh_#c6S;_#Z[_0f#Ke]#b:[a6K
b_#OQ[\[a._0[ &'")(%+* U,	.	 &/ 
 % U}  &')"( 3* U	.	 & % U2 / &'))(%+* U,	6 
 % U}qa6KZ6KPS#KPX U	6	 &4 
U. 
 !  a.]Uc.MP
` 3_0Xq4RoOa6K[ ##Ma6]q:Kc [a._0[S0_0XR_0d'UKbr]#Xf#KP[Y[RZ6fRoZ _br]#X^&N.U_ & OP_#Z
d/Kec6]Z6KRoZLURZ6K_0X?[R^eKe_#MMY]]Z_#N
M &RMRZ 2,u ,!0.
x -G!;PQ PQu N&uI{#v0y !0z N !0wxe0Y P!0wx  64?4= `
RmjK#jT`=_   Y
 4O4b1]#X^&N.U_RZ q4a.RO a[a6KhOQ]Z FN.Z.OQ[M&]#b4_#ZVOQ]Z FN.Z.OQ[RS#KMN.d.b1]#X ^}N.Uo_c6] Z6]#[
Ma._0XK_#ZVeS;_0X R_0d'UTK#jpZ[YKPXKMY[RoZ6fUTV#`[a6K 64O4b1X _0f^KZ[:]#b W.X]#Wi]MRT[RT]Z._#U.U]#fRO4RM+MY[YXROQ[UVe^]#XK
MN.OPOPRoZ.OQ[[a._#Z&[a6K 64]Z6K?rKMYW/KOPR_#UUTV#`0MY]^K 64O4b1]#X^&N.U_#M9]Z.UTV_#c'^eRT[K *W/]Z6KZ[R_#UUTVU_0Xf#K
KW"N.RTS0_#UTKZ[ 64 b1]#X ^}N.Uo_#M 3 3_0Xq4RO a6K _0,X "N.RMP` ## j
p%Z[a6K}f#KZ6KPX_#U9OP_#MYK#` FN.MY[_#M4br]#X4[a6K&URT[YKPX_#UMRT[N._0[RT]Z `.[a6KPXKRoM4Z6]eq(_V[Y]br]#Xf#KP[4KPOPRKZ[UTV
RmjK#jT`6RZWi]UVZ6]^R_#U6[R^K	\_&MYKP[+]#bBS0_0XR_0d"UTKM\qRT[a.RZe_}br]#X^}N'U_N.Z.UKMM  !  / #j 4KPS#KPX[a6KUTKMMP`
[a6K+b1]UU]q4RZ.fc6KOQ]^W/]MRT[RT]ZW.X]#W/KPX[V?OP_#Z}d/K\a6KUTW.bN.U0RZ}MY]^K+MRT[N._0[RT]Z.M+_#OQ[N._#UUTV#`#RT[RoMa6K_SRUV
K*W'UT]RT[YKchRZ ]a.U_#M,KP[4_#UIjT` ## j
°

=<

r¸u µuwÜ³·³uw{

U 4

7Bk

 uv1&1 
 Puev| ! M!0wxN/T; w[!0xQ
3
% 1#z"t%U Pu /PQPuv ![O
  
& /&'")(%+* U	6 
 % U&

,. & 1\vr~*uPz&'")(%+* U,	.	&G/ 
 % &U 

4]#[YK[a._0[,[a6KOQ]#XXKMYW/]Z.c.RZ.fW.X]#W/KPX[Vbr]#XURT[YKPX_#Uibr]#Xf#KP[Y[RZ6fec.]KM,Z6]#[a.]UcL_#M_&W.XKPS*RT]N.M

K6_#^W'UTKMa.]q4M  j
6]#Xf#KP[Y[RZ6f URT[YKPX_#UM]#X}S0_0XR_0d"UTKM?W.X]	S#KM}a.KUTW.bN.URZS0_0XRT]N'MMYKP[Y[RZ.fMrq:K_#UTXK_#c6VMY#KP[Oa.Kc
MY]^K ]#b}[a6K^ RZ [a6KLRZ[YX]c.N'OQ[RT]Z" j6]#XRZ.M[_#Z.OQK#`^eRoZ.R^e_#U^]c.KURoZ6b1KPXKZ.OQK r]#XOPRXOPN.^2
MOQXRW.[RT]Z >O ?(_0X[aV#`  4OP_#Zd/K?K *W.XKMMKcN.MRoZ6feURT[YKPX_#U b1]#Xf#KP[Y[RoZ6frd'N6[Z6]#[c.RXKOQ[UTVN'MRZ6f
S0_0XR_0d'UTKb1]#Xf#KP[Y[RoZ6f6`"qa.ROaMa6]qM4[a6K&RZ[YKPXKMY[4]#b[a.K}^]#XK}f#KZ6KPX_#U9b1]#X ^ q:K}RZ[YX]*c.N.OQKc" j(p%Z*
c6KPKcB`6RT[:RM+q+KUUTIZ6]	q4Z[a._0[,OPUT]MYKcq+]#X UcRoZ6b1KPXKZ.OQK4brX]^ _*Z6]	q4UTKc6f#Kd'_#MYK & OP_#ZdiKUT]#fROP_#UUV
Oa'_0X_#OQ[YKPXRTgPKc _#MOPU_#MMROP_#U4KZ[_#RU^eKZ[brX]^ & OQ]^W"UTKP[YKc q4RT[a M]^KL_#MMN.^W'[RT]Z.MPj p%Z [a6K
OPRTXOPN'^eMOQXRTW'[RT]Zb1X_#^eKPq+]#X ; >O ?(_0X[aV#`   `fRTS#KZ _hW'_0X[RT[R]
Z +:
 % % -?]#/b 
:`9MN.Oa _#M%
MN.^eW.[RT]Z.M?_0XK[a6KZ6KPf_0[R]Z.M]#b([a6Kb1]#X^&N.U_#
M  MPj[P
j  c6]KMZ.]#[}OQ]Z[_#RZ_#ZV S;_0XRo_0d'UTKbrX]^

Q



~33



¹sº£~$»wº

~w¶Ýw¿$¾½

K 1OQ]Z[_#RZ.RoZ6f2]Z.UTVW/]MR[RTS#K?URT[YKPX_#UM:d'N'RUT[(N6Whb1X]^ 
 _#Z.chURT[YKPX _#UM:d'N.RUT[
 _#Z.cb1]#X4KPS#KPXVhOPU_#N.MYO
6N WbrX]^ `'RTb & A4!=1La6]Uc'MP`*[a6KZ'& A4! 1H  a.]Uc.M,_#Mq:KUUmj+ "N.RTS0_#UTKZ[UV#`:  RoMOQ]Z.MRc.KPXKc_
XK_#MY]Z'_0d'UTK_#MMN'^W.[RT]Zq4a.KZ6KPS#KPX4RT[RM}MYVZ[_#OQ[ROP_#UUV6 S=_0XRZ.c6KPW/KZ.c6KZ[(b1X]^  _#Z.cKW"_#Z.c*
RZ6%
f & q4RT[ahRT[4c.]KMZ.]#[4^]*c.RTbrVq4a._0[RoM_#UTXK_#c6V*Z6]q4Z_0di]N.[+(*, . (  j ?(UTK_0XUVKZ6]N6fa `.[a6K
MRTfZ'M4]#b:URT[YKPX_#UM4b1X]
^ (* XK_#UoUTV^e_0[Y[YKPXa6KPXK#jMRZ.f]N6X3W.XKPSRT]N'M4Z6]#[_0[RT]Z'MP`4:  RM3_#MMN.^Kc
RTb8_#Z.ch]Z.UVRTb   4 ,. :  _#Z.'
c &    & / : \7j M4_eOQ]Z'MYWK "N.KZ.OQK#`'q:K}c6KPX RTS#K?[a6Kbr]UUT]	q4RZ6f
Oa'_0X_#OQ[YKPXRTg_0[RT]Z]#b8OPRTXOPN.^eMOQXRTW.[RT]Z C
°

1 0z"t
 1 1  P u&vr~wuu2t0y1	M!0yrz'v
 uPv &1 
 P u}v| !YM!0wxN/T;  w !0x2
3
% +
Puvr ![00w ymQPPTuQ  w !0x 
 mJ I/P~hvr~*#v U,	.	& . U. 
'"
 . .  K  v\~!0Tt; 
4 ;0wy QP u  w 0! x 
   
 t!	uz! v I0! z'vI0yrz0z
=<

r¸u µuwÜ³·³uw{

7=7


 	  
 	 & % +:
 % % -YFA ! 

y 0z"t+!0z. 4y 
&OA !.&'")(%+* ( 3 *P	 & / 
 % (/. . (9


 zLvr~*u3{uQziuPw%#;u 

 	  
 	 & % +:
 % % -YFA ! 

y 0z"t+!0z. 4y 
& A !.&'))(%*( 3 *P	& / :@&')"( * ( 3 *P	 & / : 
 % ( 
.

( .  % ( 
.

( . 

|8~*uPwYu 
 	  
 yo y1w M/*x&w y -ivy0!0z;}tu;
=ziuty1z#J   0wQvr~Q4)1 IK 
*Ro^eRU_0X3Oa._0X _#OQ[YKPXRTg_0[RT]Z.M}OP_#Zd/Kc6KPXRTS#Kc br]#X[a6K]#[a.KPXb1]#X ^eM?]#b(OPUT]MYKcLq:]#XUc XK_#M]Z.RZ6f
W/]RZ[YKc]N6[4MY]eb_0Xj
6]#Xf#KP[Y[RZ6f_#UM]eRM,_OQKZ[YX _#U OQ]Z.OQKPW.[qa6KZq+K_0XKOQ]Z.OQKPXZ6KchqRT[aT"N.KPXV_#Z.Mq+KPXRoZ6f2qjXj[Pj
_}XKMY[YXROQ[YKc[_0Xf#KP[(U_#Z6fN._0f#K#j\pZ.c.KPKcB`RZ^e_#ZVW.X]#d'UTK^MP`[a6KPXKRM+_}MYKP[:]#bBS0_0XR_0d'UTKM\b1]#X:q4a.RoOa
q:K_0XKZ.]#[eRZ[YKPXKMY[YKc RZ [a6KRTX2[YXN6[a S0_#UN6KLMY] q+KOP_#Z br]#Xf#KP[[a6K^ j 6]#XeRZ.MY[_#Z'OQK#`\RZ [a6K
  1@*O4 b1X _#^KPq+]#XdV _#N.[Yg#` (O UoUTKMY[YKPX`_#Z.+
c *KU^e_#Z[ #  `'OQ]^eW'RURZ.f_q(_V 'N.KZ[M+]#X
_#OQ[RT]Z.M,_#^e]N.Z[M[Y]b1]#Xf#KP[Y[RoZ6f2S;_0XRo_0d'UTKMPj *RZ'OQK[a6K?]Z'UTVeS0_0XR_0d'UTKM:q:K?_0XK?XK_#UUTVRZ[YKPXKMY[YKchRZ
q4RT[a'RZ_fRTS#KZ2MYKP[8]#b"OPUo_#N.MYKMXKPW.XKMKZ[RZ.f_W'U_#Z'Z.RZ6fW'X]#d'UTK^sRZ.MY[_#Z'OQK:_0XK([a6]MK:XKPW.XKMYKZ[RZ6f
[a6KW'Uo_#Z.MP`Bq:KOP_#ZOQ]^W'RoUTK_q(_V_#ZV]#[a6KPXS;_0XRo_0d'UTK#`RTb\[a.RM?c6]KMZ6]#[RZ[YX]*c.N.OQK_#ZRZ'OQXK_#MYK
]#b9MRTgPK3]#b[a6K3XKMN'UT[RZ6f}b1]#X^&N.U_*j Z6]#[a6KPX,MR[N._0[RT]Zq4a6KPXK?MN'Oa_2b1]#Xf#KP[Y[RZ6fZ._0[N6X_#UoUTV]OPOPN.XM
RM^e]c6KUTId'_#MYKcc.Ro_0fZ6]MRMe5 E4KRT[YKPX`  # \OQ]^W'RUoRZ6fh_q(_VKPS#KPXVS0_0XR_0d"UTKK *OQKPW'[[a6K_0d"Z6]#XY
^e_#UR[V]Z.KMc6]KMZ6]#[eXK^e]S#K_#ZV W"RTKOQKh]#bRoZ6b1]#X ^e_0[RT]Z XWK "N.RTXKc [Y]OQ]^eW'N6[YKh[a6KOQ]Z "ROQ[M
_#Z.c[a6Kc.R_0fZ.]MYKM]#b=_eMVMY[YK^j(4aN.M` _0Xq4ROa.K[ # Ma6]	q4M4a6]	q d/]#[a[a.KMYKP[4]#bOQ]Z "ROQ[M
_#Z.c[a6K}MYKP[]#bOQ]Z.MRMY[YKZ'OQVId'_#MKcc.Ro_0fZ6]MYKM]#b=_MYV*MY[YK^ RoMOa._0X _#OQ[YKPXRTgPKcdV[a6K}b1]#X ^}N.Uo_]#d6
[_#RZ6Kc dVb1]#Xf#KP[Y[RoZ6fhKPS#KPXV S;_0X R_0d'UTK2K 6OQKPW.[?[a6Ke_0d'Z6]#X ^e_#URT[V]Z6KMRoZ [a6KeOQ]Z FN.Z.OQ[RT]Z ]#b:[a6K
MYV*MY[YK^ c6KMOQX RTW.[RT]Z _#Z.c [a6K_S;_#RoU_0d'UTK]#d'MYKPXS0_0[RT]Z.Mj \X]S*Rc6Kc [a._0[2[a6KMYV*MY[YK^ c6KMOQX RTW.[RT]Z
a._#M  XM[d/KPKZ[N6XZ6Kc RZ[Y] 64?4:`Bb1]#Xf#KP[Y[RoZ6fhOP_#Z diK2_#Oa'RTKPS#KcLRZ URZ6K_0X[R^K2_#Z.c c.R_0fZ.]MYKM

Q_

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

OQ]Z[_#RZ.RZ6f_^eRZ'R^e_#UZN.^d/KPX]#b,b_#N.UT[VLOQ]^W/]Z6KZ[M}OP_#Zd/KeKZN.^KPX _0[YKc RZ r]N6[YW'N6[ ?Wi]UV
Z6]^eRo_#U\[R^eK#jp%Z[YKPXKMY[RZ6fUTV#`8[a.RoMq:]#XMa.]q4M&[a._0[&[a6Kc.R_0fZ6]MRoM[_#MY c6]KM2Z6]#[&XKW"N.RTXK[a6K
N.MN'_#UUTV K W/KZ.MRTS#K	?OQ]^W"N6[_0[RT]Z ]#bW.XR^eKR^W'UoROP_0[YKIM H;R^W"UROP_#Z[M?[Y]d/K_#Oa.RTKPS#Kc _#OQ[N._#UoUTV#`
OQ]^W'N.[RZ6f2W.XR^eKR^eW'UROP_0[YKIM H;Ro^W'UROP_#Z[M\RoM FN.MY[,_|\D 4?[Y]e_#O a.RTKPS#KS0_0XR_0d"UTKbr]#Xf#KP[Y[RZ.fe_#Z.chZ6]#[
_{ !0'RoZOQ]Z.MRM[YKZ.OQVId"_#MYKcc'R_0fZ6]MRM j:6]#Xf#KP[Y[RZ6fKPS#KPXVhS;_0X R_0d'UTK?brX]^ _b1]#X ^}N.Uo_e_#UUT]	q4Mbr]#X
OQ]Z.MRoMY[YKZ.OQVO a6KO*RZ6fMRoZ.OQK & RMOQ]Z.MRoMY[YKZ[RTb._#Z'c}]Z'UTVRTb&'))(%+* U,	6	 & % U	.	 &Y9RM9OQ]Z'MRMY[YKZ[Pj
a6Kq+KUUTIZ6]	q4
Z 3_S*RM&_#Z.c +N6[Z._#^ _#UTf#]#XRT[a.^ b1]#X&M_0[RM  _0d"RURT[V[YKMY[RoZ6f  3_S*RN
M  \N.[Z._#^h`
 03rXKOQKZ[UTVXKPSRMRT[YKcedV KOa[YKPX4_#Z.L
c E4RMa[ # <N.Z'c6KPX,[a6K3Z._#^K3c.RTXKOQ[RT]Z'_#U.XKMY]UoN6[RT]Z"
d'_#MRoOP_#UUTVOQ]Z'MRMY[MRoZLOQ]^W'N6[RZ.f_OPU_#N.M_#U8XKPW.XKMYKZ[_0[RT]Z]#b &'))(%+* U.	 & % U,	.	 &Yb1X]^ _
?546
 & N.MRZ.f&XKMY]UN6[RT]Z *Rb[a6KK^eW.[VhOPU_#N.MKRM,Z6]#[f#KZ6KPX _0[YKcB`.[a6KZ & RM,OQ]Z.MRM[YKZ[4_#Z'ch[a6K
OQ]ZS#KPXMYK}_#UoMY]ea6]Uc.Mj
6]#Xf#KP[Y[RZ6f OP_#Z _#UM] d/KLN.MYKc _#M_ #KPV OQ]Z.OQKPW.[RZ ]#Xc.KPXh[Y] ]#Xf_#Z.RTgPK *Z6]q4UKc6f#KLMY] _#M
[Y] XKPW'U_#OQK]Z.KfUT]#d"_#U4RZ6brKPXKZ.OQKRZ[Y] _ZN.^}diKPX]#bUT]OP_#URZ6brKPXKZ.OQKM_#MMa.]q4Z_#^]Z6f ]#[a*
KPXM 3d
V ?]a'U_#M?KP[}_#UIj+[ ##}_#Z.c ^eRTX_#Z'c OQp%UTX_#R[a ; 0## ` OQp%UTX_#RT[a _#Z.
c ^eRTX; 0#  j
@ ]]MYKUTVMYW/K_0RoZ6f6` MN.O aL_0W.W.X]_#O a6KM?XKUTV]ZL[a6KRc6K_[a'_0[?K W'U]RT[RZ6f_#UU[a6KW'RTKOQKM3]#b(RZ6br]#XY
^e_0[RT]Z fRS#KZRoZ_*Z6]qUTKc6f#K2d'_#MYKRM[VW'ROP_#UoUTVZ6]#[3XWK "N.RTXKcbr]#X "N6KPXV_#Z.MYq:KPXRZ6f6j.]OPN.MRZ6f
]Z q4a._0[RMXKUTKPS0_#Z[[Y] [a6'
K "N6KPXV RMMN6OPRTKZ[Pj J a.RUKMN.O a [YKOa.Z.8R "N6KMc6] Z6]#[UT]q:KPXh[a6K
OQ]^W'UK *RT[V ]#b2RZ6brKPXKZ.OQK brX]^ [a6KL[a6KP]#XKP[RoOP_#UMRc6K#`[a6KPV OP_#Z UTK_#c [Y] MRTfZ'R  OP_#Z[W.X _#OQ[ROP_#U
R^W'X]S#K^KZ[MPj 6]#XRoZ.MY[_#Z.OQK#`(_#MMN.^eK[a._0L
[ & OQ]Z.MRMY[Me]#b[a.XKPKbr]#X^}N'U_#M 
 ( ` 
 - `:_#Z'c 
 0 j
6]#X_#ZV "N6KPXV &`4UKPT
[ U !   00  ( U. 
10IY  U,	.  j JLKLa._S#K & A !  RTb_#Z.c ]Z.UTV Rb
&'))(%3* U,. 00  ( 
10 % UFA !&j8pb U,. 
 0 %  0-  ( U	. 
10mY ! `[a'RM\_#^]N'Z[M+[Y][YKMY[yrz"tu O
-6uPz"tuQz"v 4eqa6KP[a6KPX&'))(%3* U,. 0-  ( 
10 % UA !  a6]Uc.M3]#X&'")(%+* U	6 
 0 % U=A !  a.]Uc.MPj
a.RoMq(_V#`]Z6KfUT]#d'_#URZ.b1KPXKZ'OQK&RM3XKPW'U_#OQKcdV[q:]UT]*OP_#URZ6brKPXKZ.OQKMP
j 44]	q`M&'))(%+* U,	6 
 ( /

 - % U=4RoMWK "N.RTS0_#UTKZ[3[Y] &')"( 3* U	. 
 ( /-&'))(%3* U,. 
 - % U 	 U	. 
 -  U. 
 ( YY % U= j
OPOQ]#Xc.RZ6fUV#`"KPS#KPXVS;_0X R_0d'UTK}b1X]^ 
 - [a._0[?RM4Z6]#[?_S;_0X R_0d'UTK}]#
b 
 ( ]#X?_S;_0X R_0d'UTK}]#b  OP_#Z d/K
br]#Xf#]#[Y[YKZ  XM[+q4R[a.RZ 
 - d/KOP_#N.MYK?RT[:fRTS#KM,Z6]2RZ6br]#X^e_0[RT]ZXKUTKPS0_#Z[:[Y]2[a6V
K "N6KPXVi*[aN.M`]Z'UTV_
brKPq W'RTKOQKM=]#bi*Z6]	q4UTKc6f#K4a'_S#K4[Y]diK J%W'X]#W'_0f_0[YKMc Lb1X]^ 
 - [Y] 
 ( d/KPbr]#XK_#Z.MYq:KPXRZ.f?[a6YK "N6KPXV#`
_#Z.chbr]#Xf#KP[Y[RZ.f_#UUT]	q4M(b1]#XOa._0X _#OQ[YKPXRTgRZ6f[a.K^ K 6_#OQ[UTV#j
MKPS#]##KcRZ[a6K&RoZ[YX]*c.N.OQ[R]ZB`"_#Z6]#[a.KPX3MOQKZ._0XRT]RZq4a.RO abr]#Xf#KP[Y[RZ6fhRMN.MYKPbN.U9RM4[a'_0[]#b
d/KURTKPb=N6WBc._0[YK#j3p%Z.c6KPKcB`i[a6KPXK_0XK^e_#ZVbr]#X^e_#URg_0[RT]Z.M]#b\d/KURTKPb=N6WBc._0[YK}[a._0[?_0XK2d'_#MYKc]ZL_
br]#X^ ]#b\S0_0XR_0d'UK&br]#Xf#KP[Y[RZ.f6j&a.K&d"_#MRO2MOQKZ._0XR]RoM[a.Kb1]UU]q4RZ.f]Z6K C3q:Ka._S#K_br]#X^&N.UT
_ &
[a._0[XKPW.XKMKZ[M4]N6X*Z6]	q4UTKc6f#K#i[a6KPXK&_0XK&M]^K}O a._#Z6f#KM3RZ[a.Kq:]#XUcB`'_#Z'cq4a'_0[q+K&*Z6]qRM
[a._0[&_0b1[YKPX&[a6K^ _b1]#X ^}N.Uo_ $ d/KOQ]^KM[YX N6K#jha6KMRo^W'UTKMY[3q(_V[Y]c6K_#U=qRT[aL[a6KN.W/c'_0[YKRM
[Y]_#MMN.^K}[a._0
[ $ XKPW.XKMYKZ[M_#UoUBq+K}Z.]q_0di]N.[[a6K[YX N6[aS0_#UN6K]#b[a.KS;_0X R_0d'UTKMRZ $\j M_
XKMN'UT[P`q:K3a._S#K?[YG
] J%br]#Xf#KP[ L2b1X]
^ & [a6KS;_#UoN6K]#b[a6K3S;_0XRo_0d'UTKM:RL
Z U,	6	 $8 j=a.KPXK_0XKc.R iKPXKZ[
br]#X^e_#URTg_0[R]Z.M ]#b6[a.RoMMO a6K^e_*`0d'_#MYKc}]Zqa6KP[a6KPXbr]#X^&N.U.
_ $hRMOQ]Z.MRc6KPXKc[Y]OP_0XXVRZ6br]#X^e_0[RT]Z
_0d/]N6[S0_0XR_0d'UTKM8RT[=^eKZ[RT]Z'MrJ RZ'MUTKP[Y[P=` #0]#X=]Z.UTV}]Z[a6K,S0_0XR_0d'UTKMR[8c.KPWiKZ'c.M]Z 4KPfZ.KPX`
 # `]#X=_#UoMY]3]Z2S;_0XRo_0d'UTKM9XKU_0[YKc2[Y]?c6KPW/KZ.c6KZ[9S0_0XR_0d"UTKMS*R_3_3c6KPW/KZ.c6KZ.OQK:bN.Z.OQ[RT]Z 4KPXgRTf6`
#  j\a'RM*RZ.c&]#biN6WBc._0[YK,MOa6K^_*`q4a.RUK:UTKMM9*Z6]	q4Z2[a._#Z2[a6K ]MMRd'UTK ]*c6KU/
M W.W.X]_#O a2dV
J RZ.MUTKP[Y[[ #0 `/a._#M,W.X]S#Kch[Y]ed/K?MN.R[YKcb1]#X,XK_#M]Z.RZ6fe_0d/]N6[_#OQ[RT]Z'M ]a6KPX[VKP[4_#UIjT` # 
KPXgRTB
f  ER  ` ## j'N6X[a6KPX^e]#XK#`[a6KW/]MMRTd'RUR[V[Y]br]#Xf#KP[URT[YKPX _#UMe_#Z.cLZ6]#[S0_0XR_0d"UTKM RM
_#UMY]3S0_#UN._0d'UK+RZ}[a.RMbrX_#^KPq:]#X[Y]?[_0#K_#OPOQ]N.Z[b1]#XW/KPXMRMY[YKZ[9RZ6br]#X^e_0[R]ZB`#_#MMa6]qZ}XKOQKZ[UTV
dVMY]^K]#b4N.M KPXgRTfKP[_#UmjT` 0#  `\MRZ'OQK[a6KW/]U_0XRT[V]#bRZ6br]#X^e_0[RT]ZRoM]#br[YKZ MRTfZ.R  OP_#Z[Pj
6]#X2RZ.MY[_#Z'OQK#`9q4a'RUTKbr]#Xf#KP[Y[RZ6f[a6K 'N.KZ[  3 <%brX]^ _*Z6]q4UKc6f#Kd'_#MKRMZ.]#[W.X]#d"UTK^e_0[RO0`
br]#Xf#KP[Y[RZ6fe[a.K?WiKPX MRMY[YKZ[ 'N6KZ[:<  3 <%q+]N.UochMN6XKUTVd/KRZ._#c6WK "N._0[YK#j

Q I\



~33



¹sº£~$»wº

~w¶Ýw¿$¾½

6]#Xf#KP[Y[RZ6f OP_#Z _#UM]d/KN.MYKc [Y] O a._0X_#OQ[YKPXRgPK_ c6KPW/KZ.c6KZ.OQKXKU_0[RT]Z OP_#UoUTKc c6K  Z._0d'RUR[V
5 @_#Z.f  _0X,"N'RMP`N#;dih_#Mq+KUU?_#M[a6KMY[YX]Z.f#KMY[Z6KOQKMM_0XVrXKMYW j q:K_0#KMY[MN6OPRTKZ[ 
OQ]Z.c.R[RT]Z.M]#b:_W'X]#W/]MRT[RT]Z._#U S;_0XRo_0d'UTK]Z _MYKP[ U ]#b=S0_0XR_0d'UKM4fRTS#KZ _[a6KP]#XV & 5@9RZB`0##*
]a6KPX[V#
` @N.;_#MYgPKPqROQg#`  g_#U_#MP`90# j MMa6]	q4Z RZ 5@_#Z6fB _0X,"N.RMP` #;d  @RoZB` 0##*
]a6KPX[V}KP[_#UmjT` 0#  `_#UU[a.KMYK,Z6]#[RT]Z.Ma._S#K^_#ZV&_0W.W'UROP_0[R]Z.MRZ}S0_0XRT]N.M p  KUc.M`;RZ'OPUN.c.RZ.f
aVW/]#[a6KMRoM,c.RMOQXRo^eRZ._0[RT]Z `_0f#KZ[OQ]^e^&N.Z.ROP_0[R]ZB`6[a6KP]#XVh_0W.W.XW] 6R^e_0[RT]Zh_#Z.c_0d/c'N.OQ[RT]ZBj
8RZ._#UoUTV#`d"_#MYKch]ZhURT[YKPX _#Ui_#Z'cS;_0XRo_0d'UTKb1]#Xf#KP[Y[RoZ6f6`6S;_#UoN._0d'UTK3WK "N.RTS0_#UTKZ.OQK3XKU_0[RT]Z'M+]	S#KPX4br]#XY
^&N.U_#MOP_#Z_#UoMY]ed/K?c6K  Z6Kc C

 " yC³· %qsÙaÚÛ³1nz3±q¶{ ; q pz3r %q¶ÙaÚ#³1nz3±q£{ ; q('  uPv &1 
 P u:v| ! M!0w xN/*T;w[!#x=

 1
(Pu2I/=PQPuPv [! +(* 1:0z"t U P u2e /=PPuv1![?
 
 & 0z"t 
 0 wu}Q#ytv	!TPu @9RT[%IKW"N'RTS;_#UKZ[3{#yr0uQz)( 1+tuQz!#vut &   
1=y #z"tT!0z. 4y 
&'")(%+* ( 3 *P	& % ( 3 *P	& '(:.&'")(%+* ( 3 *P 
 % ( 3 *P 
 T(:
u S=_0XYIWK "N.RTS0_#UTKZ[3{y1#uQz U 1(tuQz!vut & 3$ 
1=y #z"t+!0z. 4y 
 & 0z"t 
 0wu}Q#yt	v !TP.
&'")(%+* U,	.	 & % U	.	 &  U& .&'))(%+* U,	6 
 % U	. 
  U&

!

q m{Û³·³uw{

 I SP4/S?I V20z"t 

z3v <Û±q k   uPv & !  )
0z"t 
 0wu  y v5OYu M/*yr;0uQz'v8{#yr0uPzb(



!

 I e4/:e I V  uvX(

!#):< % V +  &

*N'OaWK "N.RS;_#UTKZ'OQK}XKUo_0[RT]Z.MOP_0W.[N6XK2MY]^K2br]#X^eM]#b\c6KPW/KZ.c6KZ.OQK}d/KP[q:KPKZ b1]#X^&N.U_#Mja6KPV
0_ XK4N'MYKPbrN'URoZ2[a6K,S;_0X RT]N.MMRT[N'_0[RT]Z.M8q4a6KPXKRT[RM8XKW"N.RTXKc2[Y]br]#X^e_#UoUTVOa'_0X_#OQ[YKPXRTgPK[a6K,br_#OQ[\[a._0[
[q:]Z.]q4UTKc.f#K}d'_#MKMMa'_0XK&M]^K}[a.KP]#XK^eMPj3aN.MP`'[q+]br]#X^&N.U_#M_0XK @9RT[%IKW"N.RTS0_#UTKZ[4fRTS#KZ](
q4a6KZ.KPS#KPXKPS#KPXVLOPU_#N.MYKOQ]Z[_#RZ.RZ.fURT[YKPX_#UMbrX]^ ( ]Z.UTVRoM?_hUT]#fROP_#U=OQ]Z.MWK "N6KZ'OQK]#b+[a6K  XMY[
br]#X^}N'U_Rb=_#Z.c]Z.UTVRTb+RT[RoM_UT]#fRoOP_#UOQ]Z'MYWK "N.KZ.OQK2]#b\[a6KMYKOQ]Z.c br]#X^&N.U_*j3p%Z[a.K2M_#^K2S#KRZB`
[q:L
] S=_0XYIWK "N'RTS;_#UKZ[br]#X^&N.U_#M,fRS#KZ U a._S#K[a6K&M_#^KOPU_#N'M_#UOQ]Z.MWK "N6KZ'OQKM4d'N'RUT[,N6WbrX]^ Uej
?(UTK_0X UTV#` @RT[%IWK "N.RTS0_#UTKZ.OQKRM^]#XK  Z6KQIf#X_#RZ.Kc [a._#Z S=_0XYIWK "N'RTS;_#UKZ.OQKRZ [a6KMYKZ'MYK[a._0[[q:]
br]#X^}N'U_#M S=_0XYIWK "N.RTS0_#UTKZ[fRTS#KZ U _0XK_#UMY'
] @RT[%IWK "N.RTS0_#UTKZ[fRTS#KZ (-!Q(*$(`8[a6KMYKP[]#b4UoRT[YKPX_#UM
d'N.RoUT[?N6W/]Z U`d'N6[?[a6KOQ]ZS#KPX MYKc6]KMZ.]#[a6]UcRoZ [a6Kf#KZ6KPX _#U\OP_#MYK#j ]^K_0W'W'UROP_0[RT]Z'M_0XK
XKU_0[YKc[Y]*Z6]	q4UTKc6f#K_0W'W.XW] 6R^e_0[R]Z 
 RoM_OQ]#XXKOQ[_0W.W'XW] 6R^e_0[RT]Z]#1b & ]S#KP6
X ( RTb8_#Z.c]Z.UV
RTb 
 _#Z.c & _0XN
K @R[%IWK "N.RS;_#UTKZ[4fRS#K
Z (( `iZ.]#X^e_#URTg_0[R]Z r[N6X Z.RZ6f_br]#X^}N'UL
_ & RZ[Y]_ ?54 

dVRZ[YX]*c.N.OPRZ6fZ6KPq MYV*^d/]UMRM?_#OPOQKPW.[_0d"UTKe_#M?UT]Z6fh_#M3[a6K[q+]hbr]#X^&N.U_#M3_0XKWK "N.RTS0_#UTKZ[3]	S#KPX
[a6K]#X RTfRZ._#U/U_#Z6fN'_0f#K#`'RmjK#jT` & _#Z'c 
 _0XV
K S=_0XYIWK "N.RTS0_#UTKZ[fRTS#KZ U-! U	6	 &4Y `'_#Z.cMY]]Z j

 l87 J

uv

<m±q 

³·

[q¶ÜÚÛ±·Ü

p[2RoM "N.RT[YKK_#MYV [Y]LW.X]	S#K[a'_0[b1]#Xf#KP[Y[RoZ6fLRM2_LOQ]^W'N6[_0[RT]Z'_#UUTVK*W/KZ.MRTS#K]#W/KPX_0[RT]Z RZ [a6K
f#KZ6KPX_#U:OP_#MYK#jpZ'c6KPKcB`MRZ.OQK_br]#X^&N.U_'& RM}OQ]Z.MRMY[YKZ[2RTb_#Z.c]Z'UTVRTb &'))(%*( 3 *P	& % ( 3 *Q	&4Y
RM2OQ]Z.MRoMY[YKZ[_#Z.c MRoZ.OQK[a.KU_0[Y[YKPXbr]#X^&N.U_RMN@RT[%RoZ.c6KPW/KZ.c6KZ[brX]^ KPS#KPXV UR[YKPX_#URIjK#jT`+RT[2RM
KW"N.RTS0_#UTKZ[9[Y]* f  +]#XWK "N.RS;_#UTKZ[[Y3
]   :)	 `0[a6KPXK+RMZ6]4q(_V[Y]3OQ]^eW'N6[YK+_br]#X^}N'U_ 
LWK "N.RS;_#UTKZ[
[Y] &'))(%* ( 3 *Q	 & % ((3RZW/]UTV*Z6]^eR_#U9[R^K#`N'Z.UTKMM  !  9j OQ[N'_#UUTV#` q:KeOP_#Zc6KPXRS#K&[a.Ke^]#XK
OQ]Z.MY[YX _#RZ.RZ6f3XKMN.UT[P`Ma6]	q4RZ6f3[a._0[\[a6K3 Fy Eu]#bi_#ZV2b1]#X^&N.U_WK "N.RTS0_#UTKZ[[Y],&')"( * ( 3 *P	 & % (:^e_V
d/KMN6W/KPXW/]UTV*Z6]^eR_#UoUTV&Uo_0Xf#KPX[a._#Zh[a.KMRTgPK?]#b &j
°

=<

r¸u µuwÜ³·³uw{

7H

 uPv1& P u !#w xN/*  w[!0x


3
% 0z"tuPvX( P u
=z.yvu& /=PPuvY![3(R 

 u	W/*y100TuPz'v,v	! &'")(%+* ( 3 *P	& % :
( } ov 

 zvr~*u}{uPziuQwY0  0Pu$1vr~*uPwYuey1}z!N-"w[! -G!; yvy0!0z"0!0wxN/* 
QQ

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

vr~*ue yFEu%![ 
 yo.-G!0 40z!0x2y#1 4 P,!D/*z"tutyrz A &ABA (A 1 /*z.u     
,!#z6 ymtuQwuT
t /z'
y #uP 4eyrz ,!0x.-"u32yrv54vr~*u,!0wI4 K 

   JI|8~y0Q~Ly1

a'RMXKMN.UT[?Ma.]q4M3[a._0[OQ]^eW'N6[RZ6fh_#Z K*W'UROPR[XKPW'XKMYKZ[_0[RT]ZL]#b &')"( *( 3 *P	& % (:N'Z.c6KPX
[a6Kebr]#X^ ]#b(_W.X]#W/]MRT[R]Z._#Ub1]#X^&N.U_RMa._0Xc `KPS#KZ RZ_OQ]^W"RU_0[RT]Z*Id"_#MYKc_0W.W.X]_#Oaqa6KPXK
[a6K[Ro^KZ6KPKc6Kch[Y]c6KPXRTS#KMN'Oa_br]#X^&N.U_2RMZ.KPfUTKOQ[YKcBj
8RZ._#UoUTV#`*q+Ka'_S#K}_#UoMY]ec6KPXRTS#Kc C
=<
 #(0  / '
°

 " ; uv

7


	 	  )
 

r¸u µuwÜ³·³uw{



<m±q  ³·  u=>)yC³·  pz3r %q¶ÙaÚ#³1nz3±q£{ ; q('
0z"t   2 0  /' 
	 	  ) 
  0 wYu   - O ,!0x.-"uPvu 

RG  D îB3íè:H	H6ër}Oí D îB?í D F#ëìHî¶ë]}Oí D îB
p%Z[a'RM(MYKOQ[RT]ZB`*q:K3Ma6]q [a._0[,MYKPS#KPX _#UBZ6]#[RT]Z.M:]#b9c.KPWiKZ'c6KZ.OQK3RZ[YX]c.N'OQKcRZ[a6K?UR[YKPX_0[N6XK3_0XK
KW"N.RTS0_#UTKZ[4[Y]6`i]#X3OP_#ZdiK}KW'XKMMYKcRZ[YKPX^M4]#b`iMK^e_#Z[RoOP_#U9RZ'c6KPW/KZ.c6KZ.OQK#j:pZW'_0X[ROPN'U_0X`.q:K
Ma6]	q [a'_0[ A:]N6[RUoRTKPX+ M4c.K  Z.RT[RT]Z]#b\RZ 'N.KZ.OQK_0d'RUR[V5 A:]N6[RoURTKPX` # <RM4RZbr_#OQ[WK "N.RTS0_#UTKZ[[Y]
MYK^e_#Z[ROP_#U1\ S4c.KPWiKZ'c6KZ.OQK#ja6Kc6K  Z.RT[R]Z2]#bBXKUTKPS0_#Z.OQK_#M+fRTS#KZdV @9_0#K^KPV#KPX[ # #:OP_#Z
_#UMY]d/K\W.X]S#Kc2[Y]diK:WK "N.RTS0_#UTKZ[9[Y]? Sc6KPW/KZ.c6KZ'OQK#j Z.K+]#b.[a.K+[q+]?c6K  Z'RT[RT]Z.MfRTS#KZ&dV @9_0#KQ
^KPV#KPX[ # #b1]#X3MY[YXRoOQ[XKUTKPS0_#Z.OQK2OP_#Z_#UM]d/KK *W.XKMMYKcRZ[YKPX ^eM4]#b= Sc6KPW/KZ.c6KZ.OQK#j4a6KMYK
XKMN'UT[M_#UUT]	q b1]#X  Z.c.RZ6f[a6KOQ]^W"UTK *R[V&]#bi_#UU*[a.KMYK,b1]#X ^eM8]#bBc6KPW/KZ.c6KZ.OQK(_#M\_?c.RXKOQ[=OQ]#X]UU_0XV
[Y][a.KOQ]^W'UK *RT[V XKMN.UT[MXKPW/]#X[YKcRZL[a.KW.XKPS*RT]N.MMYKOQ[RT]ZBj6]#X&[a6KM_0#K]#bOQ]^W'UTKP[YKZ.KMMP`
q:K}_#UMY]fRTS#K[a.K}OQ]^W'UK *RT[Vh]#b[a6K]#X RTfRZ._#UBc6K  Z.RT[RT]Zh]#b=M[YXROQ[XKUKPS;_#Z.OQK5 @_0#K^KPV#KPX` # 
rq4a.RoOaLRMZ.]#[c.RTXKOQ[UVXKU_0[YKc[Y] S4c6KPW/KZ.c.KZ.OQK	 `q4a'ROa [N6X Z.M?]N6[?[Y]d/KeOQ]^W"N6[_0[RT]Z._#UUV
MR^eW'UTKPX([a._#Zh[a6K}MN6d'MYWK "N6KZ[,c6K  Z.RT[R]ZfRS#KZdL
V @9_0#K^KPV#KPX2[ # # j
8AC;D

ml k {mÚ#q£{ ; q¶z$´m³'±³· 
A:]N6[RURKPX2[# <RZ[YX]c.N'OQKM_Z6]#[RT]Z ]#b:RZ'N.KZ.OQK_0d'RUR[V#jE]N6fa.UVMYW/K_0RoZ6f6`B_br]#X^&N.U_T&sRM
RZ "N6KZ.OQK_0d'UTKb1X]^ _MYKP[,]#bS0_0XR_0d'UKM U RTb [a.KPXK?K*RoMY[M,_2MOQKZ._0XRT]eRoZqa.ROa[a6K3[YXN.[aS;_#UN.K]#b
& c6KPW/KZ.c'M+]Z[a6K?S0_#UN6K?]#b8[a6K?S0_0XR_0d'UTKM,RoZBUej=4a.RM,Rc6K_OP_#ZdiK?br]#X^e_#UoRTgPKch_#Mbr]UUT]	q4MPj
  /=PPuv.![
k  " ³'{<ÚÃq£{ ; qsz3´Û³'±'³· '  uPv & PuVM!0wxN/T  w !0x
3
  0 z"t+U 
& y1RZ'N6KZ.OQK_0d'UK w[!0x U y  0 z"t6!#z. 4 y vr~*uPwYu u32yoQvr ]
 NU O| 0! wTtG= 10z"t v| !
U O| 0! wTt;D= ( 0z"t,= - 1v 6=/
= ( A ! & 0 z"t=/= - A !O: &~!0Tt 




!

q m{Û³·³uw{

p%Z ]#[a6KPXq:]#Xc.MP`[a6KPXKLRM_ MOQKZ._0XR] = RZ q4a.RoOa [a6K b1]#X ^}N.Uo_ & OP_#Z d/K[YXN6K ]#Xhb_#UMYK#`
6c KPW/KZ.c.RoZ6f]Z[a6KS;_#UN.Ke]#b([a6KS0_0XR_0d'UKMRZ UejJ a.RoUTKeRZ'N.KZ.OQK_0d'RUR[VU]]#*Mc.RiKPXKZ[?brX]^
[a6Kc.K  Z.RT[RT]Z'MfRS#KZRZL[a'RM3W'_0W/KPX`9R[OP_#Zd/KeMa6]	q4Z[a._0[}RZ br_#OQ[&RZ'N.KZ.OQK_0d'RUR[VOQ]RZ'OPRc6KM
q4RT[ah Sc6KPW/KZ.c6KZ.OQK#j
 uPv & Pu M!0w xN/*T  w !0x7
3
% 0z"t U I/=PQPuPv![
 B& yoeyrz /O
uQz  u  PQu1 w !0x U y #z"tT!0z. 4y .& yo .0w OYtuR-6uPz"tuPz'v !0zBU
=<

°

r¸u µuwÜ³·³uw{

7



M2_OQ]Z.MKW"N6KZ'OQK#`=_^e]c6KUTI[a6KP]#XKP[ROOa._0X_#OQ[YKPX RTg_0[RT]Z ]#b4RZ'N6KZ.OQK_0d'RoURT[V OP_#Z d/KK_#MRUV
c6KPXRS#KcLb1X]^ [a6Ke]Z6Kb1]#X&SRZ.c.KPWiKZ'c6KZ.OQK#ja.KeOQ]^W'UTK6RT[V ]#b,RZ"N6KZ.OQK_0d'RUoRT[VRoM_#ZLK_#MYV
OQ]#X]UUo_0XV[Y][a.RM(W.X]#W/KPX[VC  )   '  )
  
    # RoM  .OQ]^W"UTKP[YK#j

Q





~33

¹sº£~$»wº

~w¶Ýw¿$¾½

8l 7 Kq¶±qnz3{ ; q
@_0#K^eKPV#KPX}[#`##:RZ[YX]*c.N.OQKM:MYKPS#KPX_#U/br]#X^eM:]#bXKUKPS;_#Z.OQK#jJLK?Ma.]q a6]	q [a.KMYK3b1]#X^M+]#b
XKUTKPS0_#Z.OQK_0XKeMY[YX]Z6fUTVXKUo_0[YKc [Y] SRZ.c.KPWiKZ'c6KZ.OQK#jJLKe_#UM]OQ]^eW'UTKP[YK[a6K2XKMN'UT[MfRTS#KZLRZ
5 @_0#K^eKPV#KPX` # # `dVK 6a.RTd'R[RZ6f[a.KeOQ]^W'N6[_0[RT]Z'_#UOQ]^W'UTK 6RT[V]#b:K_#Oabr]#X^ ]#b:XKUTKPS0_#Z.OQK
RZ[YX]*c.N.OQKchRZ5 @9_0#K^KPV#KPX` # # j

 ! ' 

	  
 # $# #  2
@_0#K^eKPV#KPX+ M,Z6]#[RT]Z]#b XKUTKPS0_#Z.OQK]#b_br]#X^&N.U_[Y]&_&MN6dGFYKOQ[(^e_0[Y[YKPX,OP_#Zd/Kc6K  Z6KcRZe[YKPX^M+]#b
W.XRo^K?R^W'URoOP_0[YKM(]#b9[a6Kb1]#X^&N.U_*`._#Mb1]UU]q4MMKPK K  Z.RT[RT]ZeRT
Z @_0#K^KPV#KPX`##IC
q!m{Û³·³uw{ k'k " rq£±qnz3{ ; q ·u z ÜÚÃ´q ; ·[vxz··qsr'  uPv & Pu M!0wx /*T w !0x 
3
%0zit
U I/=PuPv ![c
  & y1XKUTKPS0_#Z[&[Y] U y h0z"t !0z. 4y vr~6uQwu,u 2#y1vrL
 -"w yrxuyr.
x -"
0y vB
u ![ &
xuQz'vy0!0z.yrz{h;#w ymQPQu [w !#
x U





z3v

  	 /)
  1    132  ' 

<Û±q k

# 1

 uPv &"! /)V#z"t U$! #  % >S +Y& yowuQuQ00z'v(v	! U,

M_OQ]Z'MYWK "N.KZ.OQK#` @9_0#K^KPV#KPX+ M&Z6]#[RT]Z]#b:RTXXKUTKPS0_#Z.OQK]#b,_hb1]#X ^}N.Uo_[Y]_MN.dGF%KOQ[^_0[Y[YKPX
OQ]RZ.OPRoc6KM(q4RT[ah SRZ.c6KPW/KZ.c6KZ'OQK#j
°

 uPv & P u&.!0wxN/*  w[!#x2

 0z"t U  /PQPuv ![/
  &y1wuQuQ;#z'v
r¸u=<µuwÜ³·³uw{ 7
v	! U y 0z"tT!0z. 4y  & oy  .# wIOYtuR-.uQz"tuPz'v !0zBU


 aN.MP`[a.K^e]c6KUTI[a6KP]#XKP[ROOa'_0X_#OQ[YKPXRTg_0[RT]Z ]#b S4RoZ.c6KPW/KZ.c6KZ.OQK_#UMY]L_0W.W"URTKM}[Y] RXXKUTKQ
S0_#Z.OQK2]#b\_b1]#X^&N.U_[Y]h_MN.dGF%KOQ[3^e_0[Y[YKPXj?JLK_#UM]a._S#K[a._0[[a6KRTXXKUTKPS0_#Z.OQK}]#b\_b1]#X^&N.U_[Y]
_eMN.Gd F%KOQ[^_0[Y[YKPXOQ]RZ'OPRc6KM(q4RT[T
a A:]N6[RoURTKPX+ M,c6K  Z.RT[RT]Z]#b8RZ 'N.KZ.OQK_0d'RUR[V#j8RZ._#UUTV#`*[a6K}_0di]	S#K
W.X]#W/]MR[RT]Z_#UUT]qM(b1]#X4_#ZK_#MYVW'X]]#b]#b8OQ]^W'UTK 6RT[Vbr]#XXKUTKPS0_#Z.OQK#`.Z._#^KUV#` 2   	 / )
  1 -
 132  '  # 1 ;! ' 
	  
 # $ # #  2 RM  .OQ]^W"UTKP[YK#j

 ! '
	  
 # $# #  2
@_0#K^eKPV#KPX4a._#M:RZ[YX]c.N'OQKc[q+]2br]#X^eM:]#bvwy0vwuQuQ00z uPj=a6KOa6X]Z6]UT]#fROP_#UUV6  XMY[+]Z6K3a._#M
d/KPKZhfRTS#KZRoZ5@_0#K^KPV#KPX` # `"_#M4b1]UoUT]q4Mj
k   '  uPv & Pu
q!m{Û³·³uw{ k7 " Ü·r³ ; · rq£±qnz3{ ; q×·u z ÜÚÃ´q ; ·Kv z··qsr #y?zwq¶vxq qsr
M!0w N
x /*TN
  w !0x 
3
% 0z"t U  /PQPuv ![
  & y1MY[YXROQ[UTV XKUKPS;_#Z[[Y] U y 0z"t !0z' 4y 
uQ#uQw 4-"wy1xu&yr.x -"5y  #vu ![ & ,!#z'vI0yrz6&;0wymQ PQ1u  w !0x U,
@9_0#K^KPV#KPXa._#M_#UMY]LRZ[YX]c'N.OQKc _#Z6]#[a6KPXZ6]#[R]Z ]#bMY[YX ROQ[2XKUTKPS0_#Z.OQK5 @_0#K^KPV#KPX` # # `
^]#XK}c6K^e_#Z.c.RoZ6f}[a'_#Zh[a6K]#XRfRZ._#Ui]Z6K#j KPXKq:KOQ]Z.MRoc6KPX_#ZWK "N.RTS0_#UTKZ[c6K  Z.RT[R]ZBj
 # 2

 
 # 2   	 /)
  1    132  ' 

# 1

k   ('  uPv& P u
q!m{Û³·³uw{ k	H " Ü·r³ ; · rq£±qnz3{ ; q×·u z ÜÚÃ´q ; ·Kv z··qsr #y?zwq¶vxq qsr
M!0w xN/*TN w !0x 
3
  0z"t U  /PQPuv ![
  & 1y MY[YXROQ[UTV XKUKPS;_#Z[[Y] U y 0z"t !0z' 4y 
vr~*uPwYu?u,#2 y1vr4 -iw yrxuyrx.-"y5 #vu![1& xeuPz'vy0!0z.yrz{200w ymQ PPTuw[!#x U 10z"t2uQ#uQw 4 -"wy1xuyrxY-i
y0#vu
![ & xuQz'vy00! z6N!0z. 4;#w ymQPQu1 w !0x U,

Q 

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

A:]#[ac6K  Z.RT[R]Z.MW.XKPS#KZ[\[_#N6[Y]UT]#fRKM+_#Z.cOQ]Z[YX_#c'ROQ[Y]#XVbr]#X^}N'U_#MbrX]^d/KRZ6fMY[YX ROQ[UTV&XKUTKQ
S0_#Z[=[Y]}_#ZV2MYKP[=]#biS;_0X R_0d'UTKMPj8a6K(d'_#MRO,c.R:/KPXKZ.OQK(d/KP[q:KPKZe[a6KMK[q:]c6K  Z'RT[RT]Z.M8RM8[a._0[+RZ2[a6K
 XM[\]Z6K3q:Kq(_#Z[:[a'_0[+KPS#KPXVW.XR^eKR^W"UROP_0[YK4]#b & OQ]Z[_#RZ.M?#v=Tu;vB_}S;_0X R_0d'UTKb1X]^ Ue`*q4a.RUTK
RZ[a6K&MKOQ]Z.c OP_#MYK2q+K2R^W/]MYK}[a._0[KPS#KPXVW.XR^eK}R^W"UROP_0[YK]#b & ^&N.MY[3OQ]Z[_#RZ !0z' 4}S;_0XRo_0d'UTKM
brX]^ U > 7j M,[a.Kb1]UoUT]q4RoZ6f2K *_#^W"UTKMa6]	q4MP`6[a6KPXK_0XKb1]#X ^}N.Uo_#M(b1]#Xqa.ROa[a.K[q:]c6K  Z'RT[RT]Z.M
]#bMY[YXROQ[,XKUTKPS;_#Z'OQKc6]Z6]#[OQ]RZ'OPRc6K#j

 uPvV& !  HKSQ0z"t U ! # + ~*uQwuy1 !0z. 4#!#ziu -"wy1xuyrx.-"
y0vu ![L&1
z"0xuP 4+HS  .y1z  uyrv ,!0z'vI#y1z6#v\Tu;v:e00wyQPPTu ![YU 1=yrv!0r !0|8vr~#v &y1Qvw y0v 4ewuQuQ;#z'v
v	!%U | ow1v J   #uPxu4 uQw 1 K  !0|+uP0uQw 1( yrz uvr~*u-"wy1xuy1x.-"y0#vu,H_Syo&z!#v ,!0x.-G!;ut
]Z.UTV]#b400wyQPPTuQ ![VU J P u3 D/Pu3S ) 4 U K 1\yv !0r !0|8&vr~v & y1z!#v+Qvw y0v 4wuQuQ00z'v,v	! U | ow ov 
J   #uPxu4uQw 1  [K 


z3v

<Û±q k

	

 a.X]N6fa SRZ.c6KPW/KZ.c.KZ.OQK#`q:K+OP_#Z2c6KPXRS#K\_#Z}_#U[YKPXZ._0[RTS#K:Oa._0X_#OQ[YKPX RTg_0[RT]Z&]#b6[a6K+Z.]#[RT]Z]#b
vwy0v=wuQuQ00zu(RZ[YX]c'N.OQKcdV @9_0#K^KPV#KPX&[## j:p%Z.c6KPKcB`*_#M,_MY[YX_#RTfa[Ybr]#Xq:_0X cOQ]Z'MYKW"N.KZ.OQK
]#b8[a6Kc6K  Z'RT[RT]ZB`q+K}a._S#K C
 I/=PuPv ![6
  & y1Qvw y0v 4
 uv & Pu!#w xN/*   w !0xQ

  0zit%U 
wuQuQ;#z'v9v	!VU y 40z"tN!0z. 4&y  & yo .0w OYtuR-6uPz"tuPz'v !0z U 0 z"t .0w Oyrz"t u -6uQzituQz'vw[!#x U,.	&  U
=<

°

r¸u µuwÜ³·³uw{

7







J K&a._S#K&Rc6KZ[R  Kc[a6K&OQ]^W'UTK6RT[V]#b8d/]#[ac6K  Z'RT[RT]Z.M:]#bMY[YXROQ[4XKUTKPS0_#Z.OQK#`"_#Z.c[a6KPV[N6XZ
L
]N6[[Y]diK?c.RiKPXKZ[MC=[a6K  XMY[c6K  Z'RT[RT]ZRM,a._0Xc.KPX[a._#Zh[a6KMKOQ]Z.c]Z6K#j

r¸u=<µuwÜ³·³uw{ 7  " ; uv <m±q  ³·  u=>)Ü·r¸³ ; ·[rq£±qnz3{ ; q('
JK! # 2  
 # 2   	 /)
  1 -  132  '   # 1  ! '
	  
 # $# #  2 J   #uPxeuM4uQw 1  Ky1
  - O[I!0x.-"Tuvu 
J WG
K ! # 2  
(# 2   	 /)
  1    132  '   # 1  ! ' 

	  
 B
# D$# #  2 J   #uQxuM4uPw 1 [K y1
" - O[I0! x."- uPvu 
°

a.KMYKOQ]^W'UTK6RT[V XKMN.UT[MhR^eW.X]S#K4a6KP]#XK^ 0 b1X]^ 5@_0#K^KPV#KPX`L## `q4a'ROa ]Z.UV
W/]RZ[M]N.[[a.K  'a._0Xc.Z6KMM3]#b\RTXXKUKPS;_#Z.OQK2_#Z.c MY[YXRoOQ[3RXXKUTKPS0_#Z.OQK2_#M?c6K  Z6KcRZ 5@_0#K^KPV#KPX`
# # j
D F  \G ìë
-$ìmëf D ê0HIE D ê
p%Z [a'RM2MYKOQ[RT]ZB`=q:K  XMY[2c.RMOPN.MM}]#[a6KPXXKU_0[YKc q:]#Xi`=[a6KZ YM ]^KW/]MMRTd"UTKK*[YKZ.MRT]Z'M}]#b[a6K
Z6]#[RT]Z'M_#Z.cXKMN'UT[M,q:Ka._S#K}W.XKMYKZ[YKchd/KPb1]#XK#j

-$ì ]
 íël'F EÃì

8A	 ë 


í

ml k NZ·*?#qsr [q£±z·q%L uwr 
M&_#UXK_#c6VKPS#]##KcB`(RZ.c.KPWiKZ'c6KZ.OQKa._#M&d/KPKZ OQ]Z.MRc6KPXKc N'Z.c6KPXS0_0XRT]N'M}br]#X^eM2RZ S0_0XRT]N.M4p
 KUc'MPj

Do Dz} -z}u|uu+RO$$puTu'Uu z rn *-y |~|y lu+syx#c}yluT:z}y  |z}u|{}u~}y3 y Uz}yp||| 
$8y}|uz n ! !#"6z%$& n&''( *o
 

Q 6



~33



¹sº£~$»wº

~w¶Ýw¿$¾½

 ) 	   )  )
   )

 2 1  1 !  #  1 )   1  

a6KPXK&_0XK]#[a.KPX?b1]#X^M]#b:RZ.c6KPW/KZ.c.KZ.OQK}RZW.X]#Wi]MRT[RT]Z._#U9UT]#fRO&[a._0[3q+Kea'_S#KeZ6]#[?OQ]Z.MRoc6KPXKc
RZ[a.RM_0X[ROPUTK#`8KMYW/KOPR_#UUTV#`8c6K  Z'_0d'RURT[V#`9OQ]Z[YX]UU_0d"RURT[V 5 @9_#Z6f  _0,X "N.RMP` # ;di}_#Mq:KUU:_#M
OQ]Z.c.R[RT]Z._#U#RZ.c.KPWiKZ'c6KZ.OQK 3_0Xq4RO a6K#` # # jpb Al` C _#Z.c  _0XK\[a6XKPK\c.RoM F%]RoZ[ MYKP[M]#b*S;_0XRo_0d'UTKM
_#Z.c & RM_*Z6]	q4UTKc6f#K}d'_#MYK[a.KZ A _#Z.
c C _0XK&OQ]Z'c.RT[RT]Z._#UoUTVRoZ.c6KPW/KZ.c6KZ[(qjXj[Pj  *Z6]	q4RZ6f
& RTb_#Z.c]Z.UVRbbr]#X3_#ZV  Iq:]#XUc = 8`i]Z.OQKq:K}*Z6]	q =  _#Z.c & `iUTK_0XZ.RZ.fMY]^KP[a.RoZ6f_0d/]N6[
A OP_#Z.Z6]#[^e_0#K N.MhUTK_0XZ _#ZV[a'RZ6f Z6KPq _0d/]N6k
[ C _#Z.c	5y uL#uQw Q j a6KLOQ]^W'N6[_0[R]Z._#U
RMMN6KM2W/KPX[_#RZ.RZ.f[Y] OQ]Z.c.RT[RT]Z'_#U,RZ.c6KPW/KZ.c6KZ'OQK_#Z.c [Y] MY[YX]Z.f#KPXZ6]#[RT]Z'Me_#Meq:KUU,_#MeXKU_0[YKc
Z6]#[RT]Z'M:MN.Oa_#M(XKUTKPS0_#Z.OQK3d/KP[q:KPKZhMN6Gd FYKOQ[(^e_0[Y[YKPXM5 @9_0#K^KPV#KPX` # #(_#Z'cZ.]S#KUT[V 	 
XKRZ6KPX
 
3KZ6KMYKPXKP[aB`     `a'_S#K\d/KPKZK [YKZ.MRTS#KUTV?MY[N.c.RKcRZ_OQ]^W'_#Z.RT]ZW'_0W/KPX+5 @_#Z6f6` @9RTd/KPX_0[Y]#XK#`
_0,X "N.RMP` 0#  j
 

   
  #

/ )     
  # 	   ) 	 )
 
KPS#KPX_#U6_0W'W.X]_#Oa.KM8[Y]?diKUoRTKPb.Oa._#Z.f#K^e_0#K,N.MYK(]#b"_K*W'UROPRT[c6KPW/KZ.c6KZ.OQK:XKU_0[R]ZB`0q4a.RO a&^eK_#Z.M
[a._0[RT[(RM:W'_0X[(]#b9[a6K?RZ6W'N6[3rq4a.RUK]N6X M:RoM:Ro^W'UROPR[P`RmjK#jT`6c6KPXRS#KcbrX]^ [a6K?RZ.W'N6[  jaN.MP`*OQ]^2
W'N6[RoZ6fRZ.c.KPWiKZ'c6KZ.OQKhXKU_0[R]Z.MbrX]^ _*Z6]qUTKc6f#Kd'_#MYKOP_#Z d/KMKPKZ _#M_#Z N6W'MY[YXK_#^ [_#MY
KZ._0d'UoRZ6fN.M}[Y]LMYW/KOPRTbrV[a.K JYOQ]#XDK L ^eRoZ.R^e_#U1?RZ.c6KPW/KZ.c6KZ'OQKXKU_0[RT]Z N6W/]Zq4a'ROa [a6KdiKUoRTKPb
Oa'_#Z6f#K2]#WiKPX _0[Y]#XRM4d"_#MYKcBB[a.RMOQ]#XKRZ.c.KPWiKZ'c6KZ.OQKXKUo_0[RT]Z OP_#Z[a.KZd/K2OQ]^W'UTKP[YKcdVMYW/KO
RTbrVRoZ6fK *W'UROPR[UTVMY]^K_#c.c'RT[RT]Z._#U:c6KPW/KZ.c6KZ.OPRKM}N.MRZ6fZ6]	q4UTKc6f#Kh_0d/]N6[2[a6Kc6]^_#RZBX
j *N'Oa
_#Z_0W'W.X]_#Oa a._#MdiKPKZW.X]#W/]MYKcbr]#Xd/KURKPb\XKPS*RMRT]ZLRoZ ._0X	R Z' _#M}c6K1U ?:KPXX]  4KPXgRTf6` #  `
br]#Xd/KURKPb=N6WBc._0[YK}RZ ; _0,X "N.RMP` # <3_#Z.c  KPXgRTf6` # _#Z.cbr]#XXK_#MY]Z.RZ6f_0d/]N6[3_#OQ[RT]ZLRZ
 KPXgRT%
f  ER  ` ## j
 


 ) 	   )  )
 

/)  
 1 )*#  # !
?:]Z[YK[N'_#U,XK_#MY]Z.RoZ6f 	
?a.Rc.RZ'R  
3RoN.Z.Oa'RTfUR_*`0#2a._#M2d/KPKZ RZ[YX]*c.N.OQKc br]#Xb1]#X^_#URTgRZ6f
c6]^e_#RoZ.MRZ2q4a.RoOa*Z6]qUTKc6f#KOP_#ZZ'_0[N6X_#UUTV}d/K(c'RTSRoc6Kc2RZ[Y]W'_0X[M4OQ]Z[YK[M j\\_#O aOQ]Z[YK[:RM
Oa'_0X_#OQ[YKPXRTgPKchdVRT[M(]	q4ZU_#Z6fN._0f#K?_#Z.c_#UTW"a._0d/KP[Pj84a6K3Z6]	q4UTKc6f#Kd'_#MYK3]#b_&OQ]Z[YK *[4OQ]Z[_#RoZ.M
q4a._0[3RMXKUTKPS0_#Z[3[Y]_W'_0X[]#b=[a6K2c6]^e_#RZBj]q:KPS#KPX`RT[3RMZ6]#[fN'_0X_#Z[YKPKc [a'_0[[a.K&c.R iKPXKZ[
W'_0X[M&]#b[a6Khc6]^e_#RZ c6]LZ6]#[RZ[YKPX_#OQ[P`\MY]LRZ.b1KPXKZ'OQKRZ ]Z6KhOQ]Z[YK [e^_V diK_ /KOQ[YKc dV [a6K
*Z6]q4UKc6f#K?]#bMY]^K]#[a6KPXOQ]Z[YK *[Pj
a.K^e_#RZ c.R iKPXKZ'OQKd/KP[q:KPKZ OQ]Z[YK [N._#UXK_#MY]Z'RZ6f_#Z.c RZ.c6KPW/KZ.c6KZ'OQKRoM[a._0[e[a6KU_0[%
[YKPX}RoM_MY[N.c.V]#b([a6KeXKUKPS;_#Z.OQKXKU_0[RT]ZL[a'_0[OP_#Zd/Kec6X_q4Z brX]^ "
_ J['_0[ L RmjK#jT`8Z6]#[c.RTS*Rc6Kc
RZ[Y]OQ]Z[YK [M \*Z6]qUTKc6f#Kd'_#MK#q4a.KPXK_#M+OQ]Z[YK *[N._#U'XK_#MY]Z.RZ6f}RM]ZZ6]	q4UTKc6f#K_0di]N.[\MYW/KOPR  O
OQ]Z[YK [MP`/[a._0[3RMP`"Z.]q4UTKc.f#K}RM4K W.XKMMYKcdVMYW/KOPRTbrVRoZ6fq4a.RO aOQ]Z[YK [?RT[4XKPb1KPX M4[Y]6jp%Z]#[a6KPX
q:]#Xc.MP` [a.KXKUTKPS0_#Z.OQKXKU_0[RT]ZLRoM?_hXKMN.U[]#b:XK_#MY]Z'RZ6fh_0d/]N6[?Z.]q4UTKc.f#KeRZLMY[N.c6V*RZ6fc6KPW/KZ*
c6KZ.OQVi6]Z[a6K?]#[a6KPXa'_#Z.cB`6RT[,RM(]Z6K3]#b[a6Kc._0[_2[a._0[a._#M([Y]d/K3W.X]	SRoc6Kcb1]#X,XK_#M]Z.RZ6f_0d/]N6[
OQ]Z[YK [MPj
 

  	   )  #  1 ) 1   2 2   	 3)
  
   	   #   

 

 a6Kc6K  Z.R[RT]ZL]#bRTXXKUTKPS;_#Z'OQKfRTS#KZ dV @KPSV#`=8RT#KM`_#Z.c *_0fRTS [##&_#Ro^eM_0[&KMY[_0d'URoMa.RZ6f
q4a.RoOabr_#OQ[M]#b+_*Z6]q4UKc6f#K2d'_#MYK_0XKeRTXXKUTKPS;_#Z[[Y]h[a6Kc6KPXRTS0_0[RT]Z]#b+_T"N6KPXV#j}pZW'_0X[RoOPN.U_0X`
[a6KPVLOQ]Z.MRoc6KPX_  X MY[%I]#Xc6KPXUT]#fRoOq4RT[aLZ6]brN.Z'OQ[RT]ZLMYV*^d/]UM?_#Z.c _MYKP[]#b,RZ.b1KPXKZ'OQKXN.UTKMPj 
*Z6]q4UKc6f#K4d'_#MKRM+_}MYKP[+]#bOPUT]MYKcbr]#X^}N'U_#Mrbr]#X^&N.U_#M=qRT[aZ6]}b1XKPK4S0_0XR_0d'UTKM j KPXRS;_0[RT]Z]#b_

Q +

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

"N6KPXV_#Z6]#[a6KPX:OPUT]MYKcebr]#X^&N.U_8RoM]#d.[_#RZ6KcdV_0W.W"UTVRoZ6f3[a6K4RZ6brKPXKZ.OQK4XN.UTKM[Y]}[a6K*Z6]qUTKc6f#K
d'_#MYK}_#Z.c[a6KUT]#fRoOP_#U _ *R]^eM,]#b[a6K[a6KP]#XV#j
 br]#X^&N.U
_ ]#b[a.K*Z6]	q4UTKc6f#Kd'_#MYKRM2RTXXKUKPS;_#Z[[Y] [a6Kc6KPXRTS0_0[RT]Z ]#b4_#Z6]#[a6KPXbr]#X^&N.U_
7RTb c6]KMZ6]#_
[ J%W'_0X[ROPRTW"_0[YDK Lh[Y][a6KeW'X]OQKMM?]#b,RZ6brKPXXRZ6f
7 brX]^ [a6KZ.]q4UTKc.f#Ked'_#MYK#j.]#X
K6_#^W'UTK#`#RZ[a6K+*Z6]	q4UTKc6f#K:d'_#MYK #i\&[  % 
 ;  % \& ALT I ^h A  +`RT[RMOPUK_0X[a'_0%[ \2[ 9RMXKUTKPS;_#Z[
[Y] ^h[  `.q4a'RUTK 
 ; (RoM,Z6]#[Pj
a'RMBc6K  Z.R[RT]ZdiKOQ]^eKM OQ]^W'URoOP_0[YKc?q4a6KZ?^]#XK\OQ]^W'UTK ?MOQKZ._0X RT]M _0XK=OQ]Z.MRc6KPXKcB%j 4_#^eKUTV#`
@ KPSVKP[4_#Umj\OQ]Z.MRc6KPX,[a6XKPKc':R iKPXKZ[ JYOQ]]#Xc.RZ'_0[YKM LGC  XM[P`6q4a6KP[a6KPX_#UUBc.KPXRTS0_0[RT]Z.M,_0XKOQ]Z'MRc*
KPXKcL]#X FYN'MY[?]Z6K#MYKOQ]Z.cB`9q4a6KP[a6KPXq+KOQ]Z'MRc6KPX_#UoUc6KPXRTS0_0[RT]Z.M3]#X FYN.M[^eRZ.R^_#U9]Z.KMP8[a.RTXcB`
q4a6KP[a.KPXq+KOQ]Z.MRc6KPX}^K^d/KPXMa.RTW [Y][a6KW.X]]#b+]#X FYN.M[c6KPXRTS0_0d'RUR[VbrX]^ [a6Kb1]#X^&N.U_#M[a._0[
OQ]^W/]MYK[a.K?W.X]]#b(RZ[a'RMOP_#MYK#`.q:Ka._S#Kbr]N6X,W/]MMRTd"UTKO a6]ROQKM  j
A:KMRc.KM[a6Kb_#OQ[}[a._0[&[a.RM}Z6]#[RT]Z ]#bRTXXKUKPS;_#Z.OQKRMd"_#MYKc]Z  XM[%I]#Xc6KPX2UT]#fRO0`8[a6KPXK_0XK
]#[a6KPX`^e]#XKMN6d"MY[_#Z[Ro_#Um`,c.:R /KPXKZ.OQKMd/KP[q:KPKZ RT[_#Z.c [a6KRc.K_#MRZS#KMY[RTf_0[YKc RZ [a.RoMeW'_0W/KPXj
8RTXMY[P`iRT[RoM4_XKU_0[RT]ZdiKP[q+KPKZ[q+]b1]#X ^}N.Uo_#MP`'fRTS#KZ_d'_#Of#X]N.Z.c*Z6]q4UKc6f#Kd'_#MK#j MMN.O aB`
RT[RM4^]#XK}XKUo_0[YKc[Y]]#[a6KPX?Z6]#[RT]Z.M4]#b=XKUTKPS0_#Z.OQK&RZ[a6K2URT[YKPX _0[N6XK5 @9_#Z6+
f  _0,X "N'RMP` # 0_ j
KOQ]Z.c `RT[RMd'_#MYKc2]Z2[a6K,OQ]Z.OQKPW.[]#b"W.X]]#b`#qa.ROa2RM8MY]^eKP[a.RZ6f?Z6]#[OQ]^W'UKP[YKUTV}c6KPW/KZ.c.KZ[]Z
[a6K2MYK^e_#Z[ROPMPj?6]#X?K 6_#^W'UTK#`iXKPW'Uo_#OPRZ6f[a.K&N.MN._#U^]*c.N.MW/]Z6KZ.M4q4RT[a[a6K&M[YX_#Z6f#KRZ6brKPXKZ.OQK
XN.UK  %%  I 1  19`iq4a.RoOac6]KM4Z.]#[Oa'_#Z6f#K}[a.K}MYK^e_#Z[ROPM4]#b[a6K}UT]#fRoOPMP`'[a6KZ[a6Kbr]#X^&N.U_

 ; ]#b,[a6KZ6]	q4UTKc6f#Kd'_#MYK_0di]	S#Kd/KOQ]^KM&^e_0fROP_#UoUTV XKUTKPS0_#Z[&[Y_
] ^h[  j4a.RMRMW/KPXb1KOQ[UV
XK_#MY]Z'_0d'UTK3RZ[a.K3_0W'W.X]_#Oad%
V @KPSVeKP[,_#UmjT`*q4a.KPXKRo^W.X]	SRZ.fKPOPRTKZ'OQVN.MRZ.f}_2MYW/KOPR  O4W.X]]#b
[a6KP]#XVhRM([a.K_#R^hj
8l 7  ·q£{MLm³'{Ã|xuwÚ#r u$·³u{ÃÜ zw{ML [q¶ÜÚÛ±·Ü
a6KZ.]#[RT]Z.M_#Z.cXKMN.UT[M(W.XKMYKZ[YKcRZ[a.RM(W"_0WiKPXOP_#Zd/K?K[YKZ.c.KcRZhMYKPS#KPX_#U9c.RTXKOQ[R]Z.MPj

 '0  2  
 /) 



 132   # #  )   )

1/2
1/2

 ) ) 1 #  1 )M! 1   1/2 '
   )  2  ! # 2 '
 # ' 2  !

0	  2

 
    ) 	   ) 	 )
 
 	


p[ ^e_V3d/Kq+]#X[a?q+]Z'c6KPXRZ6f,_0d/]N6[ a6]	q[a6K\Z.]#[RT]Z.MB]#b* @BRZ.c.KPWiKZ'c6KZ.OQK8_#Z.c S4RoZ.c6KPW/KZ.c6KZ.OQK
OP_#Zd/Kf#KZ6KPX _#URTgPKcL[Y][a6KeOP_#MYKqa6KPXK[a6Ke*Z6]	q4UTKc6f#Ked"_#MYKRM?Z6]#[}_^KPXKeW'X]#W/]MRT[RT]Z._#Ubr]#XY
^&N.U_d"N6[+_}W.X]#d'_0d"RURT[V&c.RoMY[YXRTd'N.[RT]Z2]S#KP+X [Ti`]#X,_#ZRoZ.OQ]^W'UTKP[YKW.X]#d'_0d"RURT[Vr]#X(WK "N.RTS0_#UTKZ[UV
_MYKP[]#b+W.X]#d'_0d'RUR[Vc.RoMY[YXRTd'N.[RT]Z.M  `/]#X_M[YX_0[R  Kc *Z6]qUTKc6f#Ked'_#MK#`]#X_#ZV ]#[a6KPX]#Xc'RZ._#U]#X
ZN.^KPXROP_#UBM[YXN.OQ[N6XK#j
8RTXM[P`UTKP[:N.M\Z6]#[RoOQK4[a._0[(MY]^K]#bB]N6X:O a._0X_#OQ[YKPXRg_0[RT]Z.M(UTK_#ce[YN
] "N.RT[YK4RZ[N.RT[RS#K4_#Z.cef#KZ.KPX_#U
Rc6K_#Mj=]e[_0#K[a6KOP_#MYK]#b S4RoZ.c6KPW/KZ.c6KZ.OQK#`*q:Ka._S#K}Ma6]qZh[a._0[,[a6Kbr]UUT]	q4RZ6f&[a6XKPKM[_0[YKQ
^KZ[M4_0XK?WK "N.RTS0_#UTKZ[,q4a6KZ & RM,_W.X]#W/]MR[RT]Z._#U"Z6]	q4UTKc6f#Kd'_#MYK C
_ & c.]KMZ.]#[[YKUU _#ZV[a'RZ6f_0d/]N6/[ >`.RoZh_#ZVhOQ]Z[YK [P
rdi & OP_#Zd/K?XKPqXRT[Y[YKZWK "N.RTS0_#UTKZ[UTVRoZh_b1]#X ^}N.Uo_ & ? RoZq4a.RO )
a >c6]KM4Z6]#[_0W'WiK_0X
 K  Z.RT[R]5
Z < 
O:br]#X_#ZV[q+]RZ[YKPXW.XKP[_0[RT]Z'M = _#Z.c = ? [a._0[4c.R iKPX]Z'UTVRZ[a.KS;_#UoN6K?fRTS#KZh[Y] >9`.[a6KM[_0[N.M
]#b0= q4RT[aeXKMYW/KOQ[\[Y] & RmjK#jT`6^]*c6KU']#X:OQ]N.Z[YKPX^]*c6KU1=RM+[a6KM_#^eK_#M:[a._0[:]#b =@?9 ?:]#X]UoU_0XT
V  j
M,[Y]eS0_0XR_0d'UTK?br]#Xf#KP[Y[RZ.fC
c" &'))(%*3U	.	& % U2RM+[a6K3^]MY[+f#KZ6KPX_#U/OQ]Z.MYKW"N6KZ.OQK]#b &
 :? ]#X]UoU_0XV &  j

Q I]

[a._0[:RoM S=_0XYRoZ.c6KPW/KZ.c6KZ[=brX]^U



~33



¹sº£~$»wº

~w¶Ýw¿$¾½

4]q`6[a6KMKc6K  Z.RT[R]Z.M+a'_S#K_MN6OPRTKZ[,UTKPS#KU/]#b9f#KZ6KPX_#UR[V[Y]diKK*[YKZ.c6Kch[Y][a6K?OP_#MYK?qa6KPXK
[a6K*Z6]	q4UTKc6f#K?d'_#MK & RM,XKPW"U_#OQKchdV_#Z6]#[a.KPXMY[YXN'OQ[N6XK#j
aN.MP`MY]^eK]#bN.M}a'_S#KK[YKZ'c6Kc [a6KZ.]#[RT]Z]#bYS=_0XYRZ.c6KPW/KZ.c.KZ.OQKO a._0X_#OQ[YKPXRTgPKc N'MRZ6f
rdiY_#Z.ceS;_0XRo_0d'UTK:b1]#Xf#KP[Y[RoZ6f?[Y]]#Xc.RoZ._#U*OQ]Z.c.RT[RT]Z'_#UbN.Z.OQ[R]Z.M,rXKPW.XKMYKZ[YKce_#M+MY[YX_0[R  Kc2d"_#MYKM 
5 @_#Z.f6` _0,X "N'RMP`  J RUUR_#^MP` 0#  j a6Kd'_#MROW'N6XW/]MYKq(_#M[Y] K [YKZ.c [a6K J%br]#Xf#KP[_#Z.c
K*W'_#Z.Mc L _0W.W.X]_#O a _0[hq+]#X b1]#XN.W/c'_0[RZ6f J['_0[ L *Z6]	q4UTKc6f#K d'_#MYKML_#Mhd'XRTMK .V c.RoMOPN.MMYKc RZ
KOQ[RT]Z <:[Y]N6WBc._0[RZ.f2^e]#XKMY]#W'a.RoMY[ROP_0[YKchKPW'RoMY[YK^eRO3MY[_0[YKMPj
a.KOP_#MYK4]#bBRZ.OQ]^eW'UTKP[YK,W.X]#d"_0d'RURT[RKM9RM\_#UMY]RZ[YKPXKMY[RZ.fMRZ.OQK,f#KZ6KPX _#URTgRZ6f_ `Brdi8_#Z'cO
q4RUoUUTK_#c[Y][a6K2M_#^KRZ[N.RT[RTS#K&Z6]#[RT]
Z 0jM3[Y]S0_0XR_0d'UTK}b1]#Xf#KP[Y[RZ6f6` RT[3RMZ6]#[?a._0Xc[Y]Z6]#[ROQK
[a._0[4R[OQ]#XXKMYW/]Z.c.M([Y][a6Kq:KUU I*Z6]q4ZhZ.]#[RT]Zh]#b:x#w{y1z"#
Fy E#v0y !0z.j

 '  0 	  2  
    )    )  )	
   ) ) 1 )
 4! !  
  2 1  1 !  #  1 )   1   
 !
a6K&c6K  Z.R[RT]Zh]#b= @B,_#Z.c SRZ.c6KPW/KZ.c.KZ.OQK	& OP_#Zd/K}XKPqXRT[Y[YKZKW"N'RTS;_#UKZ[UTVhRZ_br]#X^&N.U_
&6?,RZ qa.RO9
a erXKMYW j=>/ec6]KMZ6]#[_0W.W/K_0XRM "N.RT[YKhf#KZ6KPX _#Um`RZ [a6KMYKZ.MYK[a'_0[[a6KU]#fROP_#U
U_#Z6fN'_0f#K0z"t  !#w,[a6KOQ]Z.MYWK "N6KZ.OQKXKU_0[RT]Z_#Z.c[aN.M([a6KZ6]#[R]Zh]#bU]#fROP_#U/KW"N'RTS;_#UKZ.OQK	+^e_V
S0_0XV#`\q4a'ROa KZ._0d'UKM&N'M2[Y] c.X_q brX]^ [a.RM&W.X RZ.OPRTW'UKZ6]#[RT]Z.M&]#b @ _#Z.c  S4RZ'c6KPW/KZ.c6KZ.OQK
_#Z.c brX]^ [a6KZL]Z ` Z6]#[RT]Z.M3]#b(URT[YKPX_#U8_#Z.c S0_0XR_0d"UTK}br]#Xf#KP[Y[RZ.fb1]#XZ.]Z.OPU_#MMRoOP_#UU]#fROPMPj2a.RM
RM(q4a'_0[a._#M(d/KPKZhc6]Z6K_0[4UTK_#M[,W'_0X[UTV.+RZL5 @_0#K^KPV#KPX` # # jEKPXKq:K?d.XRMK .VOQ]Z.MRoc6KPX,[q:]
OP_#MYKMMC
R1I /=P,PT;5y  0 !{#0y Qj\a6KMK3U]#fROPM_0XK3d'N.RoUT[+]Zh_OPUo_#MMROP_#UBU_#Z.fN._0f#K?d'N6[,a._S#K_2q+K_0#KPXOQ]Z*
MYWK "N6KZ.OQK&XKU_0[RT]Z[a._#Z OPU_#MMRoOP_#UUT]#fRO0j6]#X?RZ.MY[_#Z'OQK#`iRZ^]MY[3^}N'UT[RTS0_#UN6KcUT]#fRoOPMP`ic'N6K[Y][a6K
b_#OQ[&[a'_0[&[a.KK 6OPUN.c6Kc ^eRc'c.UTK 
 H :<6RoM&Z.]#[&_[a6KP]#XK^h`+_br]#X^&N.U_MN.Oa _#M 
 H  X: SFG
/ SP
q4RUoU'c6KPW/KZ.cd/]#[a]Z_#Z.c]k
Z Srq4a6KPXK_#M,RT[:c.KPWiKZ'c.M\]Z'UTVe]Z eRZOPU_#MMROP_#UiUT]#fRO `6d/KOP_#N.MYK3RT[
OP_#Z.Z6]#[+d/K4XKPqX RT[Y[YKZeWK "N.RTS0_#UTKZ[UTV&RoZ[Y]&_br]#X^}N'U_RZq4a.RO a S,c6]KM+Z.]#[+_0W.W/K_0XRoZeW'_0X[RoOPN.U_0X`
RMZ6]#[=_#Uq:_VM\WK "N.RS;_#UTKZ[8[Y]% H2 -: S%6
/ SP8RZMN.OaUT]#fRoOPM  ]Z[a.KOQ]Z[YX_0XV#`[a6K,br]#X^&N.U_% H2 <6/ SP
RM(WK "N.RTS0_#UTKZ[,[Y]RZhN.MN._#UB^&N.UT[RS;_#UN.KcU]#fROPM_#Z.c[aN.Mc6KPW/KZ.c'M(]Z ]Z'UTV#j
RR1x !t09 !{5y P *j 4]q`.[a6KU_#Z.fN._0f#KRM,]#d'[_#RZ6KchdVK *[YKZ.c.RoZ6fe_eOPU_#MMROP_#UBW.X]#W/]MR[RT]Z._#UiU_#Z*
fN._0f#K?q4R[a]Z6K3]#X,^]#XK?^]*c._#UR[RTKMP`qa.RUTK[a.K3OQ]Z'MYWK "N.KZ.OQK3XKU_0[RT]ZK *[YKZ.c.M:[a._0[(]#b9OPU_#MMROP_#U
UT]#fRORZ[a6K2MYKZ.MYK&[a._0[?_^e]c._#UoRT[VIb1XKPK}br]#X^&N.U_RoM_[a6KP]#XK^ RTb+_#Z.c]Z'UTVRTb=RT[3RM_[a.KP]#XK^
]#bOPU_#MMRoOP_#U UT]#fRO j:a6KPXKPbr]#XK#`.XKMN.UT[MMN'Oa_#M =X]#W/]MR[RT]Z.M _#Z.c 2MY[RUoUB^e_0#KMYKZ.MK_#Z.chq:K
OQ]Z FYKOQ[N6XK3[a._0[([a6KPV_0XKM[RUU.S0_#URc j89]2[_0#K_#ZK *_#^W"UTK#`RoZ[a6K?UT]#fRo6
O  }q4a.KPX
K  & I	 & RM
_[a6KP]#XK^h`/_ebr]#X^&N.U_MN.Oa_#

M  & 
/ 	 & H 
4,RMRZ.c6KPW/KZ.c6KZ[,brX]^ 
 q4a.RoUT
K  & 
/ 	 & H 

RM,Z6]#[Pj




132


  ! # 2  
 #  / '  2  ! /)  
   2 
 #  2  ! #  
G 1 	  	!

 

6]#Xf#KP[Y[RoZ6f_hMYKP[?]#b+S;_0XRo_0d'UTKM3^]*c.R  KM3_*Z6]q4UKc6f#K2d'_#MYKq4a.RoUTKW.XKMYKPXS*RZ6fMY]^K]#b:[a6KOQ]Z*
MYWK "N6KZ.OQKMP`Z._#^KUTV#`B[a.]MYKed'N.RoUT[]Z S0_0XR_0d"UTKM3[a._0[_0XKZ.]#[?b1]#Xf#]#[Y[YKZ j [a6KPXbrX_#^KPq:]#X*M_0XK

iorqts  y }suu  yzB )p|u8iz}y | -~i:z} )}y  xsu-}su $&yx|u~)u f{u8z}uiz}uuU}u~ Xz}yw
 |  - ~:z} i }y $F * ~iyUu yB|u~Y}yRu 	|u8~iu }y?$ lu u8  ||Uz}y | X~:z} }y
y   | xt i 8}u ||lyTu }s)'ly  *! $ %*r ) u:}t}su~u  }y    )!G $#"$ !&%(' $) )& *3* *G $).*
xs	s|u~Y}y/}su'~uyTlyp}2 1|3547 6 y+ 5 xX218o z3947o 6 o, - /X/. ypU -z}y   |  ~i:z} )4 }y y i	u~ z}yp
Tz}yf  |   ~:z}  }y0 
y 
f ~3}suRz}yf  |  ~:z} i }y:  y*;<=5~u u~
 4 $! *   $ > 4 $ *3*o $  *Xxty |~|up~ }y}suO}TuO~u  }y " y} }s{/  ||iz}y f|  ~:w
z} i }y  l u'u'i Bi18z}35u476 u~Tyz}u' ypTf{ }| ? fz}{|AO@ z}yf  |  ~:z} i }y $ su z}u  +iz}y   | 
~:z} i }y O y
*  z}yp xs	s R  ~) u~ T
 }suX/i   uU z}yp+ z} |upo
Q _&(

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

d'_#MYKce]ZXKMY[YXRoOQ[RZ6f?[a6K,W/]MMRd'UTK "N6KPX RTKM=RZ2]#[a6KPX\q:_VMP`*RmjK#jT`OQ]Z.MRc6KPX RZ6f]Z.UTVN"N6KPX RTKMRZ ]#XZ
br]#X^  _#N6[Yg#` ?K_0XZ.MP=`  KU^e_#ZB` # j
E4K_#MY]Z.RZ6fq4RT[a}Oa._0X _#OQ[YKPXRMY[RO(^]*c6KUM: _#N6[Yg#` K_0XZ.MPD`  *KU^e_#ZBG` #  RM9d'_#MYKc&]Z}N'MRZ6f
]Z.UTVL_MN6d'MKP[]#b^]*c6KUM]#b,[a6K]#X RTfRZ._#Ubr]#X^&N.U_*j M}b1]#X&b1]#Xf#KP[Y[RZ6f6`[a.RM}^e_V RZ.OQXK_#MYK[a6K
MRTgPK]#b[a6KXKPW.XKMKZ[_0[RT]Z ]#b_*Z6]q4UKc6f#Khd'_#MYKK *Wi]Z.KZ[R_#UoUTV#j a'_0Xc6]Z _#Z.c E]#[a [ # 
a._S#KMa6]	q4Z [a._0[O a._0X_#OQ[YKPXRoMY[ROe^]*c6KUM?OP_#Zd/KeN.MYKc br]#XKPOPRTKZ[XK_#MY]Z'RZ6fh]ZMY]^eKMYKP[M]#b
XKMY[YX ROQ[YKc "N6KPXRTKMPj
A  E D î#G+F\H D  ] íOì<ê

JLKa._S#KRZS#KMY[RTf_0[YKc MKPS#KPX_#U,q(_V*Me]#b3_#Z.MYq:KPXRZ6f [a6Kh#KPV#"N.KMY[RT]Z ]#b3c6KP[YKPX^eRZ'RZ6fq4a._0[e_
W.X]#W/]MR[RT]Z._#U8*Z6]q4UKc6f#Ked'_#MYK[YKUUM}_0di]N.[[a6KRoZ"c6KPW/KZ.c6KZ.OPRKM3diKP[q+KPKZ S0_0XR_0d'UTKM_#Z.cbr]#XY
^&N.U_#MPj86]#X=K_#O ae]#b'[a.KZ6]#[RT]Z.MMY[N'c.RTKcB`0q:Ka._S#K,XKUo_0[YKceRT[8[Y]?]#[a6KPX=W.XKPSRT]N'MUTV?*Z6]q4ZZ.]#[RT]Z.M
_#Z.chq:Ka._S#K}MY[N.c'RTKcRT[,b1X]^ _eOQ]^W'N6[_0[R]Z._#UBW/]RZ[:]#bS*RTKPq`6fRTS*RZ6f2d/]#[ahOQ]^W'UTK 6RT[VXKMN.UT[M
_#Z.cO a._0X_#OQ[YKPXRTg_0[R]ZXKMN.U[M9[Y]?d/K,N.MYKc2br]#XW.X_#OQ[RoOP_#UOQ]^eW'N6[_0[RT]ZBj8p%Z2[a6K,URTfa[8]#b']N6XXKMN.UT[MP`
RT[,_0W.W/K_0XM:[a._0[,[a6K3S0_0XRT]N.M(br]#X^eM:]#bUT]#fROP_#UBRZ.c.KPWiKZ'c6KZ.OQK_0XKOPUT]MYKUTVOQ]Z'Z6KOQ[YKcBj++MYW/KOPR_#UUTV#`
MYKPS#KPX_#U=]#b:[a.K^ a._#c d/KPKZLW.X]#W/]MYKc dV c.:R /KPXKZ[?_#N6[a.]#XM?q4RT[a.]N6[3diKRoZ6fK W'UoROPRT[YKUTVXKU_0[YKcBj
A:]N6[RURKPX+ MRZ "N6KZ.OQK_0d'RUoRT[V_#Z'c @_0#K^KPV#KPX  MXKUTKPS;_#Z'OQK]#b=_br]#X^}N'U_2[Y]_MN6Gd FYKOQ[4^e_0[Y[YKPX3_0XK
Rc6KZ[ROP_#U+[Y]L SRZ.c.KPWiKZ'c6KZ.OQK5 \X]#W/]MRT[RT]Z'
M _#Z.c  jLJLKh_#UMY]Lc.RMOPN'MMYKc^&N.O a XKU_0[YKc
q:]#X"`_#Z.c MN6f#f#KMY[hMY]^KK [YKZ'MRT]Z.M[Y] ^e]#XKf#KZ.KPX_#Ub1X_#^eKPq+]#X [a'_#Z ^eKPXKW'X]#W/]MRT[RT]Z._#U
UT]#fRO0j
a.K?b1]UU]q4RZ.f}[_0d'UK?fRTS#KM_MYV*Z[a.KP[RO3SRKPq ]#b^e_#ZVZ6]#[RT]Z.M,_#c.c.XKMMYKchRZ[a'RM(W'_0W/KPX_#Z.c
[a6KOQ]#XXKMYW/]Z.c.RZ.f&OQ]^W"UTK *R[VXKMN.UT[Mj
\X]#d'UTK^
44]#[_0[R]Z
K  Z.R[RT]Z
?:]^W'UTK 6RT[V
V*Z[Pj @RT[%RZ'c6KPW/KZ.c6KZ.OQK
( 3 *Q	 &40)
 (@!O

@9RT[%RZ.c6KPW/KZ.c.KZ.OQK
( 4 &
 (@!O 'OQ]^W'UKP[YK
 
 ' 
  & % ( 3 *P 
 )
KPW/KZ.c6KZ[URT[YKPX_#UoM

r ( 3 *Q	 & #iDA #i +  &+
" - OQ]^W'UTKP[YK
.N'UU @R[%RZ.c6KPW/KZ.c6KZ'OQK
(= r ( 3 *Q	 &4
'OQ]^W'UKP[YK
@9RT[%MR^W"UR  Kc
8 ' #i +  4 &   )k4 ( 3 *Q	 & 'OQ]^W'UKP[YK
@9RT[%IWK "N'RTS;_#UKZ.OQK
&   

&'))(%+* ( 3 *Q	 & % ( 3 *P	 & T(:" 
&'))(%+* ( 3 *Q 
 % ( 3 *P 
 T(:
  - OQ]^W"UTKP[YK
\X]#d'UTK^eM(]ZURT[YKPX_#UM,_#Z'c[a6KRTX4OQ]^W"UTK *R[V#j
\X]#d'UTK^
44]#[_0[RT]Z
K  Z.RT[R]Z
?:]^W'UTK 6RT[V
V*Z[Pj S=_0XYRZ.c6KPW/KZ.c.KZ.OQK
U.	 &  U ! 

S=_0XYRoZ.c6KPW/KZ.c6KZ.OQK
U 4 , &





&

U


.







&
!


'OQ]^W'UKP[YK
 '
%
.
KPW/KZ.c6KZ[,S;_0X R_0d'UTKM

 U	.	 & #D< A <  ,. &+
" - OQ]^W'UTKP[YK
.N'UU S=_0XYRZ'c6KPW/KZ.c6KZ.OQK
U! 
 U.	 &
'OQ]^W'UKP[YK
S=_0XYMR^W'UR  Kc
r< ' #D<+  4 ,. &  < )B4 U,	.	 & 'OQ]^W'UKP[YK
S=_0XYIWK "N.RTS0_#UTKZ.OQK
& 3$ 

&'))(%3* U.	 & % U.	 &  U&" 
&'))(%3* U. 
 % U. 
  U&
 - OQ]^W"UTKP[YK
\X]#d'UTK^M(]ZhS;_0X R_0d'UTKM,_#Z.c[a6KRTXOQ]^W'UK *RT[V#j

Q_



~33



¹sº£~$»wº

~w¶Ýw¿$¾½

a.K}b_#OQ[3[a._0[3di]#[a Z6]#[R]Z.M]#b=b1]#X ^}N.Uo_;IS;_0XRo_0d'UTK}RoZ.c6KPW/KZ.c6KZ.OQK}_#Z.cb1]#Xf#KP[Y[RoZ6fha._S#Kd/KPKZ
N.MYKch_#M#KPVOQ]Z.OQKPW'[M4RZ^e_#ZV p  KUc.M?RZ.OPUN'c.RZ6f&_#N6[Y]^e_0[YKcXK_#MY]Z.RZ6f6`*d/KURTKPbXKPSRoMRT]Z_#Z.c
N6WBc._0[YK#`.c.Ro_0fZ6]MRMP`6XK_#MY]Z.RZ6fe_0d/]N6[_#OQ[RT]Z.MKP[O0j
a._#M4diKPKZc.RMOPN.MMYKcd/KPb1]#XK	*KOQ[RT]Z.M }_#Z.c
< `8MY]q:Keq4RUoU9XKPb1X_#RoZLb1X]^ XKPW/K_0[RZ6fR[a6KPXK#ja6Kf_#RZ]#b:f#KZ.KPX_#URT[V] /KPXKcdV [a6KOQ]#XXKQ
MYW/]Z.c.RoZ6fhURT[YKPX_#U I]#X RTKZ[YKcZ6]#[RT]Z.MRoZ[YX]*c.N.OQKcRZL[a.RMW'_0W/KPX}a._#M}_#UMY]d/KPKZLKMY[_0d"URMa6Kc rK#jf6jT`
=X]#Wi]MRT[RT]
Z 0 `_#Z.c[a6KRTX?_0W.W'UoROP_0[RT]Z[Y]MYKPS#KPX_#/U p4W.X]#d"UTK^eM2URT#KOPUT]MYKc*Iq:]#XUcXK_#M]Z.RZ6f
_#Z.chd/KURKPbN6WBc._0[YK	:a._#M,d/KPKZM#KP[Oa6KcBj
\XR^e_0XRoUTV#`#]Z6K4]#bB[a.K^e_#RZ^]#[RTS0_0[RT]Z.M\b1]#X+[a6KZ6]#[R]Z.M=]#bBbr]#X^&N.U_;IS0_0XR_0d'UTKRoZ.c6KPW/KZ.c6KZ.OQK
_#Z.cb1]#Xf#KP[Y[RZ6f&q:_#M([Y]2R^W.X]S#K3RZ6brKPXKZ.OQK4brX]^ _}OQ]^eW'N6[_0[RT]Z._#UiMRc.K#`dVKZ._0d'URoZ6f[Y]2b1]*OPN.M+]Z
XKUTKPS0_#Z[=W'RTKOQKM]#b/*Z6]qUTKc6f#K#ja6KK *[YKZ[\[Y]q4a'ROa[a'RM8f#]_#U'OP_#ZdiK,XK_#Oa6KcOP_#Zed/Kc.RMOPN.MMYKc
_0[[a6K}URTfa[:]#b8]N6XOQ]^W'UTK 6RT[VXKMN'UT[MM C
v JIyrz K0tRu -6uPz"tuQz  uwYuP v5y !0z.?~00u&~y {#T
~ I!0.
x -"3u 2#y5v 4 :a6K3Z6]#[RT]Z.M(OQ]Z.Z6KOQ[YKc[Y]2 S
  !;.
c.KPWiKZ'c6KZ.OQKe @Bc6KPW/KZ.c6KZ'OQK#`6brN.UoUi S+_#Z.ch @Bc.KPWiKZ'c6KZ.OQK#`.RZ "N6KZ.OQK_0d'RUoRT[V#`XKUTKPS0_#Z.OQK
[Y]_MN.Gd F%KOQ[?^e_0[Y[YKPX_#Z'cLMY[YXROQ[XKUTKPS0_#Z.OQKMYKOQ]Z.c br]#X^a._S#Ke_OQ]^eW'UTK 6RT[V_0[?[a6K  XMY[
UKPS#KU8]#b\[a6K&W/]UTVZ.]^eR_#Ua'RTKPX_0XO aV#`Bq4a'ROa ^K_#Z.M[a._0[?[a.KPVOP_#Z d/K&O a6KO#KcdV_M_0[RM%
 _0d'RURT[V]#X H;_#Z'c_#ZN'Z.M_0[RM  _0d'RURT[VMY]UTS#KPXj+a6KPVd/KOQ]^_
K J%[YX _#OQ[_0d'UTDK Leqa6KZMYV*Z[_#OQ[RoOP_#U
XKMY[YXROQ[RT]Z'M_0XK&^e_#c6Kh5 =X]#W/]MR[RT]Z  j6]#Xf#KP[Y[RZ6fUR[YKPX_#UM]#XS0_0XR_0d'UKM (_#UMY]RMOQ]^2
W"N6[_0[RT]Z._#UUVK *W/KZ.MRTS#K#jha.KXK^e_#RoZ.RZ6fZ6]#[R]Z.M_0XKRZOQ]^eW'UTK 6RT[VOPU_#MMYKM}U]OP_0[YKc _0[
[a.K3MKOQ]Z.chUTKPS#KUi]#b[a6K3W/]UTV*Z6]^eR_#U"a.RTKPX_0X OaV#jJL]#XMYK#`.N.Z.c.KPX+[a6K?MY[_#Z'c._0Xc_#MMN.^eW.[RT]Z.M
]#b8OQ]^W'UK *RT[V[a.KP]#XV#`6[a6K?K *W'UROPRT[(OQ]^W'N.[_0[RT]Zh]#b8URT[YKPX_#Ui]#XS0_0XR_0d'UKbr]#Xf#KP[Y[RZ6feOP_#Z'Z6]#[
d/K_#Oa.RKPS#Kc RZW/]UTV*Z6]^eR_#U+MYW'_#OQKRZ [a6Kf#KZ.KPX_#U(OP_#MYK5 =X]#W/]MR[RT]Z    ja'RMW'N'Ma6KM
[Y]	q:_0X c.M[a.KZ6KPf_0[RTS#KOQ]Z.OPUN.MR]Z [a._0[_#UU[a.KMYKZ6]#[RT]Z'M_0XKa._0X cL[Y]d/KeOQ]^W'N6[YKc _0[
UK_#MY[RZ[a.K:q:]#XMY[8OP_#MYK	9K 6OQKPW.[=RTb6[a6K,MRgPK+]#X8[a6K,MYV*Z[_#OQ[RoOP_#U*b1]#X^s]#b.[a.K(RoZ6W'N6[ KZ'_0d'UTKM8RT[Pj
4a6Kb_#OQ[[a'_0[4[a6KMYK}W.X]#d'UK^eMb_#UU RZ[a6K}MKOQ]Z.cUKPS#KU]#b[a6K}W/]UTVZ.]^eR_#UBa.RTKPX _0XOaV_0XK
Z.]#[[a._0[MN6XW.XRMRoZ6f}MRoZ.OQK?[a.RM,RM(qa6KPXK_U_0Xf#K?W"_0X[RTb8Z6]#[,[a6K^e*_ FY]#XRT[V6+]#bR^eWi]#X[_#Z[
W'X]#d'UTK^eM,RoZZ6]	q4UTKc6f#K?XKPW.XKMYKZ[_0[RT]Z b_#UUmj
x -iT,u 2#y5v 4 t !u z !#v2z/3u  uQP0w yr 4'-"wYuP0uPz'v [w !0x -iw% v5y  00Q{ !DO
 /6ve ~yT{0~ | !0wQ5v O[ ;Pu ,!#Y
wyvr~x& aN.MP*` ^eRTX_#Z'
c OQp%UTX_#RT[aa._S#KMa6]q4Z[a6KeOQ]^W'N6[_0[R]Z._#Ud/KZ6K  [M?[a'_0[OP_#Z
d/K&_#Oa.RTKPS#Kc dVMY[YXN'OQ[N6XRZ6f_  A r[a6X]N6fa[a6K&br]#Xf#KP[Y[RZ6f]#W/KPX_0[RT]Z"MY]_#M[Y]h_#Oa'RTKPS#K
RoZ6b1KPXKZ.OQK,_#Z.ceOQ]Z.MYWK "N6KZ.OQK  Z.c.RZ.f^]#XK,KPOPRTKZ[UV ^eRTX  OQp%UTX_#RT[aB` 0##* OQpUX_#RT[a
 ^eRTX` 0#  j  MR^eRUo_0X9c.RMOQXKPW'_#Z.OQVd/KP[q+KPKZ2[a6K(q:]#XMY[8OP_#MYKMRT[N'_0[RT]Z}_#Z'c}[a.K:W'X_#OQ[R 
OP_#U/]Z.KM,OP_#ZdiK]#d'MYKPXS#KchRoZ]#[a6KPXc.]^e_#RZ.MPKMYW/KOPR_#UUV#`M_0[RoM  _0d'RUoRT[VId'_#MYKcOa6KO#KPXM,br]#X
"N._#Z[R  Kc d/]]UTK_#Z b1]#X ^}N.Uo_#M25 A(RTKPXK#` ?(R^_0[Y[Rm9` ?(U_0X#K#`9.N FRT[_*` /aNB` ##8J RUoUR_#^eMP`
A(RTKPXK#` ?(U_0X#K#`  
?N6W.[_*` 0##N.MKcbr]#X4br]#X^e_#U S#KPX R  OP_0[RT]ZW'N6XW/]MYKMrd/]N.Z'c6Kc^]*c6KU
O a6KO*RZ6fK 6a.RTd"RT[4RZ[YKPXKMY[RZ.fOQ]^W"N6[_0[RT]Z._#Ud/Ka._S*RT]N6X M&_#OQ[N._#UoUTV#`B[a6KPV[VW'RoOP_#UUTVW/KPXY
br]#X^ diKP[Y[YKPX[a._#Z MYW/KOPR_#URTgPKc _#UTf#]#X RT[a.^eMP`(_#MMa6]qZ R6
Z ERZ[_#Z.KZB` 0#  `4c6KMYW'R[YK[a6K
b_#OQ[[a._0[[a6KPV_0XKeOQ]Z6b1X]Z[YKcL[Y][a6KW.X]#d'UK^ ]#b+S0_0XR_0d'UK}br]#Xf#KP[Y[RZ6f RmjK#jT`KURo^eRZ._0[RT]Z
]#b8K 6RMY[YKZ[R_#UUTL
V "N'_#Z[R  KcS;_0XRo_0d'UTKM  j
x -G!0wQvI0z'v[w !0uQjJ a._0[q:K^K_#Zq4RT[a J%W.XKPW.X]0
  !0w3u !0#uQw 1 -"wRu -i[w !Wu  yrz{xeD 4 -"TD 4L0z y1.
OQKMMRZ6f L3XKPbrKPXM8[Y]?[a6K,[_#M}]#b/OQ]^W'N6[RoZ6feRZ"c6KPW/KZ.c6KZ'OQK+XKUo_0[RT]Z.M8_#Z.c2br]#Xf#KP[Y[RZ6%
f P 5u M!0wYu

Do s{-~ }y ""y Ty y}y *) u z}uu %lu|u8z}uDy %%lu|u' ~}u ypTu  yz}T%yr|) ?~
~u y6/$D io
 

Q _^_

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

W/KPXbr]#X^eRoZ6fh^]#XKeW.X]#d'UTK^2I]#XRKZ[YKcL[_#MM&MN.O a_#MOQ]Z'MYKW"N.KZ.OQK  Z'c.RZ6f6` c.Ro_0fZ6]MRMP`_#O
[R]Z H;N6WBc._0[YK#`=c6KOPRMRT]Z ^_0RZ.fKP[O0jaN.MP` @9RT[%MR^W"URTbrVRZ.f r]#X S=_0X	MR^W'URb1V*RZ6f_ A
c'N6XRZ6f_W.XKUR^RZ._0XV] "UoRZ6K&W'a._#MYK2OP_#Z W.X]	S#Kea6KUTW.bN.U br]#X?R^W.X]S*RZ6f]Z6URZ6K2RZ6brKPXKZ.OQK
MRZ.OQK2MR^W'UoR  OP_0[RT]ZZ6KPS#KPXRZ.OQXK_#MKM3[a6KMRTgPK2]#b+5
_  Aj M?Ma6]q4ZdV \X]#W/]MRT[RT]
Z   `_
MR^eRU_0X=OQ]Z'OPUN.MRT]ZOP_#Z.Z6]#[\d/Kc6X _q4Z[Y]q4a._0[+OQ]Z.OQKPXZ.M\b1]#Xf#KP[Y[RoZ6f6j=a.RM\MYKPK^eM=[Y]}d/K[a6K
W'XROQK\[Y]d/K\W'_#Roc[Y]d/KZ6K  [brX]^ [a6K:Wi]	q+KPX8]#b.br]#Xf#KP[Y[RZ.f6j]q:KPS#KPX`[a'RMZ6KPf_0[RS#K(OQ]Z'OPUN*
MRT]Z^}N'MY[d/K:[YK^eWiKPXKcdV}[a6K,[q:]br]UUT]	q4RZ6f3OQ]^e^KZ[MPj Z2[a.K,]Z6Ka._#Z.cB`#br]#Xf#KP[Y[RZ.fRM
RoZ[YKPXKM[RZ6f -6uPw4uQR[\RMZ6]#[=]Z'UTV&_[Y]]U.[a._0[+OP_#Za6KUTWeR^W'X]S*RZ6f?RZ6brKPXKZ.OQKRoZeMY]^K4OP_#MKM
d"N6[_#UMY]e_f#]_#URZhMYKPS#KPX_#9U 4p(_0W.W'URoOP_0[RT]Z.MPj Z[a6K]#[a6KPX4a._#Z.c `]N.X4OQ]^W'UTK 6RT[VXKMN.UT[M
XKU_0[YK3[Y][a6K3q+]#XM[(OP_#MK3MRT[N._0[RT]ZB`]Z.UTV#`6_#Z.c `*_#M(KPS#]##KcdiKPbr]#XK#`*br]#Xf#KP[Y[RZ6fRM:brK_#MRTd'UTKRZ
^_#ZV}W.X_#OQ[ROP_#U6OP_#MYKMj88RZ'_#UUTV#`#UTKP[N.M8Z6]#[YK,[a._0[8[a6KPXK_0XK(MKPS#KPX_#U6OQ]^W'UTKP[YK,W'X]#W/]MRT[RT]Z._#U
brX_0f^KZ[Mb1]#Xq4a.RO abr]#Xf#KP[Y[RZ6fRM4K_#MYV#j4\MWiKOPRo_#UUTV#`'_#M_#c6S#]*OP_0[YKcdV 3_0Xq4RO a6K[ ## `
OQ]^eW'RURZ.f_  A RZ[Y]_ O4O4 br]#X^&N.U_c.N.XRZ6f_#Z ] iURZ6KMY[YKPW OP_#Z W.X]S#KW.X_#OQ[ROP_#UUV
S0_#UN._0d"UTK=[Y]3_#Oa.RTKPS#K(br]#Xf#KP[Y[RZ6f3RZ}_#ZKPOPRKZ[q:_V#`W.X]	SRoc6Kc[a._0[[a6K:MRTgPK\]#b'[a6K+OQ]^W"RUTKc
br]#X^ XK^e_#RZ.M4M^e_#UUBKZ.]N6fa rq4a'ROaOP_#Z'Z6]#[4d/KfN._0X _#Z[YKPKcRZh[a6K}q+]#X MY[4OP_#MYK	 .
j *RoZ.OQKRT[
RoMZ6]#[*Z6]qZq4a6KP[a.KPX[a6K 64O4 brX_0f^KZ[}RoM?MY[YXROQ[UTV ^]#XKMN.OPOPRZ.OQ[[a._#ZL[a6KeW'XR^K
Ro^W'UROP_0[YKM9]Z6K? 3_0Xq4RO a6K  _0,X "N.RMP` ## `[a6K+W'XR^K:R^W'URoOP_0[YKM brX_0f^KZ[8OP_#Z2_#UM]d/K
[_0Xf#KP[YKcLq4RT[aW.X]  [_#M3_OQ]^eW'RU_0[RT]ZU_#Z6fN._0f#K2br]#X?MY]^K&Z6]	q4UTKc6f#K&d'_#MYKMBKMYW/KOPR_#UUTV#`
M]^K2XKOQKZ[_0W'W.X]_#Oa.KM3[Y]h[a6KR^W'URoOPRT[,XKPW.XKMKZ[_0[RT]Z ]#b+W.XR^eK}R^W"UROP_0[YKM2	 *R^]Z 
c.KU S=_#UI` 0# K 6a.RTd"RT[4S#KPXVMRTfZ.R  OP_#Z[K^W'RTX ROP_#U W/KPXbr]#X^e_#Z.OQKM2r[a6KPVKZ._0d'UTK&[a6K2OQ]^2
W"N6[_0[RT]Z]#b9MYKP[M(]#bW.XR^KR^W'UoROP_0[YKM+OQ]Z[_#RZ.RoZ6f&N.W[YT
] P / OPU_#N.MKM  j OPOQ]#X c.RZ6fUTV#`*[a6KPV
OP_#ZW.X]	S#KS;_#UoN._0d'UTK3br]#X[a6KW.X _#OQ[ROP_#U OQ]^W'N.[RZ6f2]#bRZ.c6KPW/KZ.c6KZ'OQK_#Z.cb1]#Xf#KP[Y[RoZ6f6j
D E  	'F &= D ëê
a6K&[a.RTX c_#N6[a6]#X?a._#Md/KPKZW'_0X[UTVMN6W.W/]#X[YKcdV[a.K}p c6KN@ KZ'MP`/[a6K Z.RS#KPXMRT[K2 c  4X[Y]RMP`
[a6KYEKP fRT])
Z 44]#X+
c H8_#M%c6KQ ?(_#Uo_#RM+N'Z.c6KPX[a6K9  ?(,,p ? W.X] FYKOQ[P`_#Z.cdV2[a6K\N6X]#WiK_#Z ?:]^2
^&N.Z.RT[V87 1 E =X]#f#X_#^j *]^KXKMN.UT[M,]#b[a.RoM,W'_0W/KPX_#UTXK_#c6Vh_0W.W/K_0XKcR'
Z KOQ[RT]Z  ]#b[a6K
W'_0W/KPX5 @_#Z.f  _0,X "N'RMP` # 0_ J ?:]^W'UK *RT[VXKMN.UT[M3br]#XRZ.c.KPWiKZ'c6KZ.OQK2_#Z.cc6K  Z'_0d'RURT[VRZ
W.X]#W/]MR[RT]Z._#U/UT]#fRUO L*` ,[w !^  ![}vr~*u 
	  z"vuQwz"#v0y !0z"0  !0Wz uQwuQz u !0
z (wyrz Py -"u ![}z !0|,Tut{u
u -"wYuQPuPz'vI#v0y !0z 0z"
t 4u;M !0z.yrz{ J  M K	`'W"_0f#KM  	  ` # j
çÐî

Q _W\



~33



¹sº£~$»wº

~w¶Ýw¿$¾½

&T D

F\H Øç  ì E8Eê
° r¸u=<µuwÜ³·³uw{ 
 M!0wx /*TV& y1  yrv5Oyrz"tuR-.uQz"tuPz'v  w !0x 8y 40z"tN!0z' 4y  1Q!#w40z4yrz'vuQw -"wuPvI#vy0!0z
= ) [T 1=y F=;A ! & vr~*uPz&'"l V>= % :XmDA ! &5
ç

 MMN'^K[a._0[ & RM.@RT[%RoZ.c6KPW/KZ.c6KZ[,b1X]^ j4a6KZ `'[a6KPXK}K*RoMY[M4_b1]#X ^}N.Uo_ 
 RoZk4?4
=> 
[a._0[?RMKW"N.RTS0_#UTKZ[[Y] &B` _#Z.c c6]KM?Z6]#[?OQ]Z[_#RoZGj4a6KZB`/b1]#X_#ZV-= ) [  MN.Oa [a'_0[=BA ! 

q:K3a'_S#K &')lV >= % :YIDA ! 
3j 6 RZ.OQK 
 RoM\KW" N.RTS0_#UTKZ[+[Y] 
& `*q:KOQ]Z.OPUoN.c6K[a._0[([a6K?M_#^K3W.X]#W/KPX[V
a6]Uc'M(b1]#X 3
& j
MMN.^eKe[a._0[P`8b1]#X&_#ZVLRZ[YKPXW.XKP[_0[RT]Z = )9[/i`4= A ! & R^W'URKM &')fV>= % :YI A ! 
& jJLK
W.X]	S#K[a._0[& RM 9@ RT[%RZ.c6KPW/KZ.c.KZ[:b1X]^Qj\p%Z.c6KPKcB`.UTKP[/1d/K?[a6K[YKPX ^ q4a6]MYK]Z.UTV^]c.KUBRM =,j
a6K?br]UUT]	q4RZ6f2KW" N.RTS0_#UTKZ.OQKa6]Uoc.MMC
°

r¸uHu

#U1
#U1


&






A =;A ! & +
A =;A ! & _#Z.c = A4!  +
#U1  A =;A ! & _#Z.c = A 4!  +

 A	=;A! & _#Z.c
 H 1
	    j

. #U1
. #U1

+

1

=;A !  +
A%=;A ! & _#Z'c =;A !  +

 a.K2Uo_0[Y[YKPXMY[YKPWOP_#ZLd/Kc6]Z6Kd/KOP_#N.MK= A ! &sR^W'URKM4[a._0[&'"lV>= % :Xm?RM3_#UMY]_h^]*c6KU
]#b &j 44]	q`Rb= A4! [a6KZ91  c6]KMZ.]#[OQ]Z[_#RZ j Z [a6K]#[a6KPXha._#Z.cB`RTb= A ! `4[a6KZ
1Hk1 	 +   j 1 OP_#ZLd/KXKPqXRT[Y[YKZ_#M_OQ]Z FN.Z.OQ[R]ZL]#b:UoRT[YKPX_#UM?Z6]#[}OQ]Z[_#RZ'RZ6fZ6KRT[a.KPX(Z6]#X
RT[M?Z6KPf_0[R]ZB
j M_XKMN.UT[P`B[a6K_0d/]S#Kebr]#X^&N.U_Lrq4a.RoOa RM?R]
Z 4O4=3c6]KM?Z6]#[OQ]Z[_#RZ `Bq4a.RoOa
^K_#Z.M[a._0[ & RYM @RT[%RZ'c6KPW/KZ.c6KZ[+brX]^ j

r¸u=µ
< uwÜ³·³uw{ 
JK
r( 3 *P	&59( 3 *P	&
JW
K   &  
1\vr~6uQz 
r( 3 *Q	&/! 
r( 3 *P 

J	 ,
K r( 3 *Q	& / 
' r( 3 *P	& . r( 3 *Q 
4
J	P 
K r( 3 *Q	& H 
' r( 3 *P	& . r( 3 *P 

J

K  )-
r( 3 *P	
& y 
 #z"tT0! z. 4y :Y ) r( 3 *Q : &



°

°






=>

r¸uHu

0j49XRTS*R_#Umj

j+(

 [a._0[3RM4KW"N.RS;_#UTKZ[4[Y] &`i_#Z.cMN.Oa[a._0[
 & RTb_#Z.c]Z.UTVhRTb8[a6KPXK}K* RM[M_b1]#X^&N.U_ 
RMMYV*Z[_#OQ[RoOP_#UUTV+@RT[%RZ'c6KPW/KZ.c6KZ[+brX]^Q(4j1*RZ.OQK &  
`.RT[,br]UUT]qM([a._0[ 
  2j

j 3d/K
_ 4O4 b1]#X^&N.U_KW"N.RTS0_#UTKZ[[Y] & rXKMYWj 
48MPj[PjZ6]URT[YKPX _#U*]#bt(]OPOPN.XM
RoZRT[Pj=4a6KZ  /  rXKMYW j  H 3\RM(_br]#X^&N.U_}KW"N'RTS;_#UKZ[+[Y] &/ 
 rXKMYW j1&_H 
 `*q4a.RoOa
RoMRm
Z 4O4:`'_#Z.cZ6]eURT[YKPX_#U/]#bY( ]OPOPN6X MRZhRT[Pj
6< j *[YX_#RTfa[Yb1]#Xq(_0Xc b1X]^ [a6Kbr_#OQ[&[a._0[4_0W.W/K_0XMRZ _ 4O4 b1]#X ^}N.Uo_ &RTb,_#Z.c ]Z.UTVLRTbF:Y
_0W'WiK_0X MRZ[a6
K 4O4 b1]#X^ ]#b : &3j
j @KP[ rXKMW
 Y



Q _Q

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

r¸u=µ
< uwÜ³·³uw{ 
JK
U	.	&5 U	6	&4
JW
K   &  
1\vr~6uQz 
U.	&/!.U	. 

J	 ,
K 
U .	& / 
' r( 3 *Q	&4 . 
r( 3 *Q 

J	P 
K 
U .	& H 
' r( 3 *Q	&4 . 
r( 3 *Q 

J

K 

U 	. : 
& /!.U	.	&



°






r¸uHu=> [ ?RM3[YXRSR_#UI+; 3_#Z.c   ?_0XKMR^RU_0X3[Y][a6KW.X]]#b:]#b+W/]RZ[Me;?_#Z'c   3]#b =X]#W/]0
MRT[R]Z `8XKPW'U_#OPRoZ6f9JYURT[YKPX _#UFLdV J%S;_0X R_0d'UTKDL*`X,dVG<'`_#Z.c 
r( 3 *?dV U	j M}[Y]  <ICeRb
> )4 
U	.	&+[a6KZh[a.KPXK?K*RoMY[M,_br]#X^}N'U_ 
 KW"N'RTS;_#UKZ[([Y]L& RZqa.ROa)>c6]KM4Z6]#[_0W.W/K_0X
MRZ'OQ+K >hc6]KM+Z6]#[:_0W.W/K_0X:RoZ : 
 KRT[a6KPX`2: 
 RoM\_}b1]#X^&N.U_KW"N.RS;_#UTKZ[\[Y] : & RZeq4a'ROa >c.]KM:Z6]#[
_0W.W/K_0Xj

°

=<

°

uPv & P u&YM!0wxN/T w[!0x 

 
y1  yrv5O yrx.-"y 
:uthy &0zit !0z. 4y 2vr~*u M!0r !0|yrz{ u	W/yr;#TuPz u}~G!0 t0 M!0weuQ0uPwI4c(
y1?I40z'vIv5y  01 4  y5v Oyrz"tu -6uQz"tuQz'v w[!0x (sy &0z"t+!0z. 4y /(  4 &~G!0 t0
y1 .#wIO yr.x -"
y 
:uthy }0z"t !0z. 4y vr~*u !#1 !0|yrz{u M/*y100uQzu}~!0Tt; M!0wuQ0uPwI4 U
y1?I40z'vI v5y  01 4 .0w Oyrz"tu -6uQz"tuQz'v [w !0x U y 0z"T
t !0z' 4y  U  4 ,. & ~!0Tt;

r¸u µuwÜ³·³uw{

 &
&

 &
&

< 

(  1

E1

=>
 @9RT[%MR^eW'UR  OP_0[R]Z

°

r¸uHu

I C MMN.^KB& RMN@R[%MR^W'UoR  Kc r[aN.M( 3 *P	& ! r( 3 *Q	&4Y_#Z'c UKP[c( (Rij
pb & R MMYVZ[_#OQ[ROP_#UUV6@RT[%RZ'c6KPW/KZ.c6KZ[&brX]^ (4`,[a6KZ9(  ( 3 *P	&5! `,[aN'M ( 
8( 3 P* 	&! `"RmjK#jT`M(  4 &j
C5MMN'^K[a._0[L& RM2Z6]#[ @9RT[%MR^W"UR  KcBj4a6KZ [a6KPXKhK6RMY[M ) ( 3 *Q	&4&MPj[Pj1&
RoL
M @9RT[%RZ.c.KPWiKZ'c6KZ[b1X];
^ j J RT[a ( ! #i +`3RT[RoMOPUK_0Xh[a._0[B& RoMMVZ[_#OQ[ROP_#UUTV
@9RT[%c6KPW/KZ.c6KZ[(]Z (4`6q4a.RUT
K @R[%RZ.c6KPW/KZ.c6KZ[:b1X]^ RT[P`.OQ]Z[YX _#c.ROQ[RT]ZBj
 S=_0XMR^W'UoR  OP_0[RT]ZBj:a6KW'X]]#bRM4MR^eRUo_0X,[Y][a6K @RT[%MRo^W'UR  OP_0[RT]ZOP_#MYK#`"XKPW'U_#OPRZ6f J @9RT[%
RoZ.c6KPW/KZ.c6KZ[ LdK
V J[S=_0XRZ.c6KPW/KZ.c6KZ[ L*#` ( dT
V UeM` (Rd
V 
:M` 9dV >M` ( 3 *P	 &\dV U	.	 & j




=<

°

r¸u µuwÜ³·³uw{

&  




P 0! wuQ0uPwI4T&(w !0x
3
  1vr~*uPwYuhu,2#y1vr  yv5Oy1x.-"y 
:ut M!0wx */ T 
  ov 

RoM @RT[%RZ'c6KPW/KZ.c6KZ[b1X]^ (  r( 3 *P	&q+K *Z6]q [a'_0[L[a6KPXK K6RMY[ML_
r¸uHu=> *RoZ.OQK &
4O4 b1]#X^&N.U_ 

 KW"N.RTS0_#UTKZ[}[Y] & MN.Oa [a._0[c( 3 *Q 
@ :( r( 3 *P	&Y!K`=RmjK#jT`=MN'Oa [a._0[
( 3 *Q 
 
r( 3 *P	& j A:V W/]RZ[;2]#b=X]#W/]MRT[R]Z" q+Ka._S#K 
r( 3 *P 
 ! 8( 3 *P	& j
aN.MP` r( 3 *Q 
4 ( 3 *P 
Y 8( 3 *P	& ! r( 3 *Q 
4 `b1X]^ q4a.RoOa q:K OQ]Z.OPUN.c6K[a._0[
r( 3 *Q 
4/! ( 3 *P 
 `'RIjK#jT` 
 RM @9RT[%MR^W"UR  KcBj

°

° r¸u=µ
< uwÜ³·³uw{   uv & P u M!0wxN/T w[!0x
M!D/*w?vI#vuPxuQz'vr&#wYueu M/*yr;0uQz'v 



 0z"tbNPu
yvuQwY0 ![(* ~*uziu,2v
Q_





~33



JK  4 &
JWK &5j h ( A ! T
& jh
J	MK O
& A ! &5j h /
J
K 5
& j h ( A! 
& 



/

¹sº£~$»wº

~w¶Ýw¿$¾½



=>

°

r¸uHu

[-I ;   @ KP['<&[a.K4S0_0XR_0d'UTK4]#bB_#Z.c_#MMN.^K[a'_0[ &5j h ( A4! &5j h / `q4a.RoOa^eK_#Z.M=[a._0[:[a6KPXKRM
_ 
  #D< +PIq+]#X Uc
= MN'Oa[a._0[E=;A ! &5j h ( / : &5j h / 6MRZ.OQKV& RM+KW"N.RTS0_#UTKZ[+[Y]: / &Tj h ( #H
 X:  / &Tj h   ` q:K&a._S#K = / #i +A !&5j h ( /  A ! & _#Z'c &'"lV>=G/#i + % :YI! = /#):Y +A !
&Tj h ( / : &Tj h / .a6KZ.OQK#` &'"lV>= / #i + % :YI A4! & _#Z.c[a6KPXKPbr]#XK  & dVL\X]#W/]MRT[RT]Z 0j
;- I     MMN.^K &5j h ( A ! &5j h / j=JLK&a._S#K[a6Kbr]UUT]qRZ6fOa._#RoZh]#bRo^W'UROP_0[R]Z.MMC

&

A!

&

&

A!

:/ 5& j h ( W HL :Y/ 5& j h / 
:/ &5j h / W HL :Y/ &5j h / 

&5j h

/

  -I [   @ KP[?N.M3_#MMN.^eK}[a._0[ & A ! 5& j h / ` _#Z.cW.X]	S#K[a._0[3  4 
& j3p%Z.c6KPKcB`/[a6K2_#MMN.^eW.[RT]Z
OP_#Zd/K?XKPqXRT[Y[YKZh_#MWC
 = ) [/  ' > =;A ! & I =;A ! &5j h / 

4]q`0= A !&5j h / RM4KW"N.RTS0_#UTKZ[3[Y]M_V[a'_0[Oa._#Z6fRoZ6f[a6K2[YXN6[aS;_#UoN6K}]#b'=[Y]hb_#UMYK#` = RM
M[RUUB_^]*c6KUB]#b &jp%Zhb1]#X ^}N.Uo_#MP`

 =) [/ ' >=9A !
&

I &')fV>= % :YIFA ! & 

4a.RM,RM(K6_#OQ[UTV[a6Kc6K  Z.RT[RT]Z]#bX  4 &j
;-I  <  *_#^K_#M,[a.KW.X]]#b]#b;-I    j
 <-I [   *R^eRUo_0X:[Y][a6K?W.X]]#b9]#b,  RI [  j



° r¸u=µ
< uwÜ³·³uw{   uPv & PuM!0w xN/*TVw[!0xQ
3
% 0z"tc>(Pueh;0wy PQu ![6
  ~6u2ziu,2v
M!D/*w?vI#vuPxuQz'vr&#wYueu M*/ yr;0uQz'v 
J K >  4 ,. &
J WK '& gih /  '& gih (
	J MK &  '& gih /
J 
K &  '& gih ( 







=> C=\_#MYVeOQ]Z.MKW"N6KZ'OQK4]#bB[a6Kc6K  Z.RT[R]Z]#b  S4RZ'c6KPW/KZ.c6KZ.OQK	& RM S=_0XRZ.c6KPW/KZ.c6KZ[brX]^

°

r¸uHu

>Rb_#Z.c]Z'UTVRb9RT[RMY@RT[%RZ'c6KPW/KZ.c6KZ[\brX]^ D# > % :Y> ;+  `"_#Z'c = X]#W/]MR[RT]Z   j
°



v & PuVM!0w xN/*T w[!#x 
3
% 0zit ( Pu /PQPuvY![3(R  ~*ueziu,2v
 uP1
r¸u=<µuwÜ³·³uw{ 
vIvuQxuQz'vr20wYuu	M/*yr;0uQz"v 

Q _D

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº



JK(  4 &
JW
K 
	"	&T U# 19AB1 y1vuQwx vr~#v,t!	uz!v I!0z'vI0yrz0z4
yvuQwY0Qw !0x2( +
J	MK 	 
	
& T # 0Ar0y1}L /u}vr~#v,t!uQz!#v ,!0z"vI0y1z#z4yrvuPw%# w[!#x ( + 



=>

°

r¸uHu

 [

;IC

I 9C pb& R M @9RT[%RZ.c6KPW/KZ.c.KZ[9b1X]^ (4`[a6KZ2[a6KPXK,K6RMY[M8_34O4br]#X^&N.U_ 
KW"N.RS;_#UTKZ[
[Y] &sMPj[Pj( 3 *P 
<k( ! j ?(UTK_0XUVKZ6]N6fa `B[a6KW.X]#W/KPX[V_( 3 *Q 
<_( !RoM?MY[RUU
M_0[RM  Kc RTb 
 RM[N.XZ6Kc RZ[Y] 6
4 :`+KMYW/KOPR_#UoUTVq4a.KZ 
 RoMe[N6XZ.Kc RZ[Y] RT[MW'XR^K
Ro^W'UROP_#Z[hZ6]#X^e_#U3br]#X^hj *RZ.OQK [q:] KW"N.RTS0_#UTKZ[hb1]#X ^}N.Uo_#Mha._S#K [a6KM_#^KLW'XR^K
Ro^W'UROP_#Z[MP`6Z6][YKPX^ ]#%b 
 	"	&(OQ]Z[_#RZ.M4_eURT[YKPX_#U/brX]^Q(4j
C=
	i	 &hRoM9
_ 4O4 b1]#X^&N.U_ [a._0[RMKW"N.RS;_#UTKZ[[Y](& _#Z.c MYVZ[_#OQ[ROP_#UUV @9RT[%
RoZ.c6KPW/KZ.c6KZ[+brX]Q
^ (4j KZ.OQK#` & RMY@RT[%RZ'c6KPW/KZ.c6KZ[+brX]^ (j


  IC 6R^eRU_0X:[Y]e[a6KW.XR^K?R^eW'UROP_#Z[:MRT[N._0[RT]ZB`.N'MRZ6f 5? 4 RZ.MY[YK_#ch]#b 6
 4:j

 [



  uPv & Pu !#w xN/*  w !0x 

 0z"tTU PuI/=PuPv ![
  ~*uziu,2v
vIvuQxuQz'vr20wYuu	M/*yr;0uQz"v 
=<

°

r¸u µuwÜ³·³uw{



JK U  4 , &
JWK
	"	&. T U# 19AB1 y1vuQwx vr~#v,t!	uz!v I!0z'vI0yrz0z4;0wy PQu  w !0x U +
J	MK 	 
	
& T # 0Ar0y1}L /u}vr~#v,t!uQz!#v ,!0z"vI0y1z#z400w ymQPPTu w !0x U +



=> +_#MYV&OQ]Z'MYKW"N.KZ.OQK,]#b/[a6Kc6K  Z.R[RT]Z]#b/ S4RoZ.c6KPW/KZ.c6KZ.OQK#`#W"UN.M =X]#W/]MR[RT]Z?_0d/]S#K#j

°

r¸uHu

=<

°

°

P

   )  )	
 
=>
 $ L < 4L
r¸u µuwÜ³·³uw{

 	   ) 	 )
  1     )  )	
  1  '     ) 	 )
 

0wYu  O[I!0x.-"uPvu 

0z"t  ' 



r¸uHu

)y

Ûq \q¶{ #q£{

;
q

M a.RTW j}pZ ]#X c6KPX?[Y]Ma6]	q [a._0[ &sRMV@9RT[%c6KPW/KZ.c6KZ[]Z (`R[3RoM?MN6OPRTKZ[3[Y]
fN.KMM_URT[YKPX_#UX(brX]^ (s_#Z.c_ 	U	.	&  # U	.:m +;Iq:]#XUc = [a._0[&RM_^]*c6KU]#b
&Tj h ( d'N.[4Z6]#[_^]*c6KUB]#b1&5j h / j4a6KMYK[YKMY[MOP_#ZdiK}_#Oa.RTKPS#KcRZh[Ro^KW/]UTV*Z6]^eR_#U
RoZ A &A
j
_0Xc.Z.KMMP.j @KP[N'MOQ]Z.MRc6KPX4[a.K&^e_0W'W'RZ6fd MPj[PjOd 	& ! +	& / M M - `Bqa6KPXK
M RM(_2W.X]#Wi]MRT[RT]Z._#U'S;_0XRo_0d'UTK[a._0[c6]KM,Z6]#[(]OPOPN6XRoTZ &37j ?(UTK_0XUTVKZ6% ]N6faB` d 	 &
OP_#Zd/K(OQ]^eW'N6[YKceRZ2[Ro^K,W/]UTVZ.]^eR_#URZ-A &A
j ]#XKP]S#KPX` & RMM_0[RoM  _0d'UTK,RTbi_#Z.c]Z.UV
Rb &G/ M sRoM @RT[%c6KPW/KZ.c.KZ[,]
Z # M +j



K^}diKPX

$

LÛq<µq¶{4LÛq¶{ ;
q

Q_6



~33



¹sº£~$»wº

~w¶Ýw¿$¾½

K^}diKPX Ma.RTW j4pZ]#Xc6KPX[Y]Ma6]qs[a._0[ & RM.S=_0XYc6KPW/KZ.c.KZ[]Z Ue`BRT[RoM4MN6OPRTKZ[[Y]
fN.KMM_S;_0X R_0d'UTK> brX]^ U _#Z'c_	U,	.	&  #D>*+;Iq+]#X Uc-= [a._0[RoM4Z6]#[_^]*c6KU ]#b
[a.Kbr]#X^&N.U_ &'gih /  &'g ( j=a.RoM=[YKMY[,OP_#Zd/K_#Oa'RTKPS#KchRZ[R^KWi]UVZ6]^R_#U.RZGA &A
j
_0Xc.Z.KMMPj *R^RU_0X[Y] [a6K a._0X c.Z6KMMW.X]]#be]#b @ c6KPW/KZ.c6KZ.OQK#`&XKPW'U_#OPRoZ62
f J @9RT[%
c.KPWiKZ'c6KZ[ L2dV J[S=_0XYc6KPW/KZ.c6KZ[ L*j

 >¡Ú#±'±$Uy

L q<µq£{MLÛq£{ ; q
#
K^}diKPX Ma.RTW jY& RMbN.UUV%@R[%c6KPW/KZ.c6KZ[]Z_( ! #i (&%('''%  ),+&RTb_#Z.c]Z.UTVhRTb &5j  h ( A 4!
&Tj  h / _#Z.cjTjTj_#Z.c &5j h ( A4! &5j h / a6]Uc.MPj1"N'RTS;_#UKZ[UTV#`& RM4brN'UUTV+@RT[%c6KPW/KZ.c.KZ[
]Z ( ! #i ( %('''%  ) +hRTb _#Z.c ]Z.UTV Rb,[a6Kbr]#X^&N.U_-3 0- ( 	&5j  h ( / : &5j  h /  / ''' /
  0 - ) 	 &5j  h ( / : &Tj  h / \RM+M_0[RM  _0d'UK#`q4a.KPXK4K_#O a3 0 -&0RM+_}XKZ._#^eRZ6f[a._0[
^_0W'MS0_0XR_0d'UKM?[Y]Z.KPq MYV*^d/]UMRZ_N'Z.RTbr]#X^ q:_V6 j 6RZ.OQKe[a.RoM?b1]#X ^}N.Uo_OP_#Zd/K
OQ]^eW'N6[YKcRZ[Ro^K?W/]UTVZ.]^eR_#UiRZ A &A A UA
`6[a6K^K^}d/KPXMa.RTW]#*b  ' 	   ) 0
	 )
  [Y]  b1]UoUT]q4Mj
_0Xc.Z.KMMPj=.N.UoU' @Bc6KPW/KZ.c.KZ.OQK_#Z'c @Bc.KPWiKZ'c6KZ.OQK3OQ]RZ.OPRc6KRZe[a.KOP_#MYKRoZeq4a.RoOa
( RM3OQ]^W/]MYKc ]#b+_MRZ.fUTK&UoRT[YKPX_#Umj *RoZ.OQK}[a.K  'a._0Xc.Z.KMM3]#b+ @Bc.KPWiKZ'c6KZ.OQK2a._#M
d/KPKZ W.X]S#KcN.MRZ6f_hMYKP
[ ( OQ]^W/]MYKc ]#b(_hMRZ.fUTK&UoRT[YKPX_#Um`B[a6K  'a._0Xc.Z6KMM3]#b+bN.UU
 @ c6KPW/KZ.c6KZ.OQK3br]UUT]	q4MPj



 >¡Ú#±'±$

L q <µq£{4L#q£{ ; q
Û
K^}diKPX Ma.RTW jB& RMbN.UUVBS=_0XYc6KPW/KZ.c.KZ[}]Z#U ! #D> ( %('''% > ) +hRTb,_#Z.c]Z.UV Rb &  4
&5g  h / _#Z.cjTjTj_#Z.c'&  4 &'g h / a6]Uc.MPj,1"N.RS;_#UTKZ[UTV#` & RM4brN.UoUTV S=_0XYc.KPWiKZ'c6KZ[]Z
U-!$#D> ( %('''% > ) ++RTb*_#Z.c]Z'UTV Rb[a6K\b1]#X^&N.U_   0- ( 	&  &'g  h /  / ''' /<  0- ) 	& 
&5g h / ,RoM4M_0[RM  _0d'UTK#`.qa6KPXKK_#O a  0 -& 0=RM4_XKZ._#^eRZ.f[a._0[^_0W'MS0_0XR_0d'UKM,[Y]
Z.KPq  MYV*^d/]UMeRoZ_N.Z'RTb1]#X ^ q:_V6 B
j *RZ'OQK[a.RM?br]#X^&N.U_hOP_#Zd/KOQ]^eW'N6[YKcRoZ [R^K
W/]UTV*Z6]^eRo_#URZ A &A A U A
`#[a6K,^K^}d/KPXMa.RW]#b  '  	   ) 	 )
  [Y
]  ebr]UUT]	q4MPj
_0Xc.Z.KMMPj=.N.UoUi Sc6KPW/KZ.c6KZ.OQK?_#Z.c Sc6KPW/KZ.c6KZ.OQK?OQ]RZ.OPRoc6K?RT&b ( RM(OQ]^W/]MYKc]#b
_3MRoZ6fUTK+UoRT[YKPX_#Umj *RZ.OQK+[a6K  'a._0Xc.Z.KMM]#b" S4c.KPWiKZ'c6KZ.OQK(a._#MdiKPKZ}W.X]	S#KcN.MRZ.f_
MKPY[ (LOQ]^eWi]MKc}]#b"_MRZ6fUTK:URT[YKPX_#Um`;[a6K  .a'_0Xc.Z6KMM9]#b'bN.UU S4c6KPW/KZ.c.KZ.OQK+br]UUT]	q4MPj



 h~*uQziuP0uPw & P uP 0! z{0v	! PT;  ![ N?P M!0wxN/T;vr~vy12vwYvI PQu M!0w
=<
PTD/ Q# W/.uPwI420z6|+uQwy1z{BJIy ru  18vr~*uQwuu,2#y1vrY-!0 4#vyrxu0{Q!0wyvr~x v	!tuPvuPw x2yrziu3|8~6uPvr~*uPw &OA !=1
M0! w&0z=4NOP M!0wxN/T1K0z"tQvIQPQu M!0w00wyQPPTuy1z.vI0z'vym#vy0!0z Jy u I1+wuR-"Ty1z{hy1z & ) 0z4
;#w ymQQP u PM2
4 [YXN6K !0w P42br_#UoMYKe{#yr0u2!#w xN/* vr~#v(Qvy1r PuQ !0z{#&v	! Kvr~6uQz    ) 	 )
  1
   )  	) 
  1  '     )  )
  0z"t  ' 	   ) 	 )
  0wu}yrz  
°

r¸u µuwÜ³·³uw{

K "N6KZ.OQK?]#b =X]#W/]MR[RT]Z.M 2_#Z.cBj=J a6KZB& d/KUT]Z6fM:[Y]
r¸uHu=> a.RM(RM(_MY[YX_#Rfa[Ybr]#Xq(_0XchOQ]Z.MYW
_OPU_#MM  ]#b:br]#X^&N.U_#M?[a'_0[RM?[YX_#OQ[_0d"UTKebr]#X}OPU_#N.M_#U "N6KPXV_#Z.Mq+KPXRoZ6f_#Z.cMY[_0d"UTKebr]#XS;_0X R_0d'UTK
RZ.M[_#Z[R_0[R]ZB`6q+KOP_#ZK_#MRUTVOa.KOhq4a6KP[a.KPX.&OA ! &'gih / _#Z.c'&'gih / A ! & a6]Uc'MPj

°

Q_+

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

=<

°

r¸u µuwÜ³·³uw{
°

r¸uHu

=>



%

yC³· Ü³'v

&

  #(0 !       132  ' #z"t 

<Û±'³ ! ;

 2 0 !  

    1/2 '0wu

 O[I!0x.-"Tuvu 

z·³uw{

K^}diKPX Ma.RTW j +_#MYV OQ]Z.MYKW"N6KZ.OQK]#b3[a6Kbr_#OQ[e[a'_0[  #(0 !       132  ' RM
_ XKMY[YX ROQ[RT]Z ]#b  '  	   )  )
  [a'_0[2RoMRZ   _#Z.c  RM}OPU]MYKc N'Z.c6KPX

W/]UTV*Z6]^eRo_#U"XKc.N.OQ[RT]Z.M j
_0Xc.Z.KMMPjJLK?W.X]	S#K[a._0[,_2br]#X^}N'U_ 
`*d'N.RUT[+]S#KPX_#Zh_#UTW'a._0d/KP['A ! #D> ( %('('('>% > ) +`
RoMM_0[RM  _0d'UTK?RTb9_#Z'ch]Z.UTVRTb9br]#X^&N.U_ & RYM @BMR^eW'UR  Kc `q4a6KPXK

&"! 


H 
 A3:%Ar0/  >
g 	

0 

@0

qa6KPXK 

 A3:%ARM:[a6K?b1]#X ^}N.Uo_]#d.[_#RoZ6KcdVXKPW'U_#OPRoZ6f&RoZ 
 K_#O a]*OPOPN6XXKZ'OQK]#b%> 0
rXKMYW j6:%>0:qRT[a-:%> 0,rXKMYWj-> 0I j
8RTX MY[P`:Rb 
 RoMZ6]#[M_0[RM  _0d'UTK#`:Z6KRT[a6KPX 
 A3:%ARoMP`\[aN.M 
=H 
 A3:%Ar2RoMeZ6]#[
M_0[RM  _0d'UK#j M_2XKMN.UT[P` & RMZ6]#[M_0[RoM  _0d'UTK#`6[aN.MR[RMZ6]#[ @9RT[%MR^W"UR  KcB`d/KOP_#N.MYK
8 ( 3 *P	 & ! &d"N6.[ & ^KZ[RT]Z.M,S0_0XR_0d"UTK5M > 08_#Z.m
c @0j
MMN'^K 
 M_0[RM  _0d'UTK#j ?(UTK_0XUV#G` & RM+M_0[RM  _0d'UK4_#M:q+KU	U CUTKP[E= d/K_^]*c6KU"]#
b &jJLK

W'X]S#K([a._0[ &RoM @9RT[%MR^W"UR Kc3dVMa6]	q4RZ6f[a._0[R[RM @RT[%c.KPWiKZ'c6KZ[9]ZK_#O aURT[YKPX_#URT[
OQ]Z[_#RZ.Mj,JLK&a._S#
K ( 3 *P	 &7 ! #D> ( %('('(' % > ) % @ ( %('('('&% @ ) % %: > ( %('('('&% %: > ) % %: @ ( %('('('>% Y: @ ) +j
@KP+
[  0 )k( 3 *P	 & j
[ 5
 MMN'^K[a'_0[,= A !Q 0j a6KZ `<&'"l V>= % X:  0 A4! &jpZ'c6KPKcB`UTKP[ U	.:  0I
 ! >0
rXKMYW j @0mI C<= M_0[RM  K*M > 0  @0 M]&O a._#Z6fRZ6f&[a6K[YXN6[aS;_#UoN6K4]#b >0 ]Z.UTVrXKMYW j @0
]Z'UTV6:UK_#c.M,[Y]_e^e]c6KU/[a'_0[4c6]KMZ6]#[4M_0[RoMYb1
V > 0  @ 0j
;  [a6KPXq4RMK#`q:Ka._S#K = A ! X
: 0'
j E4KPW'U_#OPRZ6
f  0 dV Y:  0 RZ[a6KW.X]]#b,]#b4OP_#MYK[ 
KZ'_0d'UTKMc6KPX RTSRoZ6f}[a.KK W/KOQ[YKcOQ]Z.OPUN.MR]ZBj

 %

pz3r Ü³'v

<Û±'³ ! ;

z·³uw{

°

 K^}diKPX Ma.RTW j=+_#MYVhOQ]Z.MYKW"N6KZ.OQK}]#b[a.Kbr_#OQ[[a._0[   2 0 !       132 ' 
RoM_XKMY[YXROQ[RT]Z]#b '  	   ) 	 )
  [a._0[&RMRZ  _#Z'c   RMOPU]MYKc
N'Z.c6KPX,W/]UTV*Z6]^eR_#UiXKc.N'OQ[RT]Z" j
 _0Xc.Z.KMMPj94a6KW.X]]#bRMMR^eRUo_0Xi[Y]4[a6KW.X]]#b]#b  'a._0Xc.Z6KMM/]#b   #(0 !     
 1/2  '`*XKPW'U_#OPRZ.]f J @9RT[%MR^eW'UR  Kc Lq4RT[9
a J[S=_0XYMR^W"UR  KMc L*j


=<
  2 uvuQwx&yrz.yrz{h|8~6uPvr~*uPw
r( 3 *P	& !
|8~6uPvr~*uPw
U .	
&  !=A JI|8~*uPwYu?A

r¸u µuwÜ³·³uw{

( IJ |8~*uPwYu( yoPuv ![&
yvuQwY0
 K 130z"ttuPvuQwx2y1z'y1z{



1y }Puv ![;0wy PQu Key1 " - O[I!0x.-"uPvu 
  ~6u&Pu0w Q~ -"w !QPPTuPx ,!0z6yoQvy1z{hyrzOQ]^W'N6[RZ.f
r( 3 *P	&%JIwu	-.u3vyr0uP 4 U	.	& Ky1
yrz   - 0z"ty1 P3!#vr~   0z"t  O~*0w%t 

Q _W]



°

~33



¹sº£~$»wº

~w¶Ýw¿$¾½

=> C

r¸uHu

 KP[YKPX^RZ.RZ6fqa6KP[a6KPXFr( 3 Q* 	&4!

( RoM

" - OQ]^W'UTKP[YK#j

K^}diKPX Ma.RTW j
8( 3 *P	& !

(RTb,_#Z.c ]Z.UTVLRTbR1   & a6]Uc.Mb1]#X&KPS#KPXV  )=(_#Z.c RR16  4 &
.a ]Uc.Mb1]#X3KPS#KPXV] ) ( 3 *Q	&4 +(B[a6KMYKP[?]#b+RZ.MY[_#Z.OQKM +	& % ( -MN.O a [a._0[eR1a6]Uc.MRM
[a.K&N.Z'RT]Z]#b\_URoZ6K_0XZN.^}diKPX]#b=W.X]#d'UTK^eMRZ  9`i[aN.MRT[3RMRoZ  BMRo^eRU_0XUV#`.[a6K
MKP[:]#bRZ.MY[_#Z'OQKM +	& % ( -+MN.O a[a'_0[?RoR1=a.]Uc.M:RM+_&W.X]#d'UTK^ RZ  9j.a.RM+W.X]	S#KM([a6K
^eK^d/KPXMa'RTW[Y] " - ]#b8[a6K?W.X]#d'UK^ ]#bc6KP[YKPX ^eRZ.RZ.f&qa6KP[a6KPXFr( 3 *Q	&4! (j
_0Xc.Z.KMMPj
@KP
[ + 
 % -\d/K_&W'_#RX+]#b9W.X]#W/]MRT[RT]Z'_#U.br]#X^}N'U_#MPj8J R[a6]N6[(UT]MM:]#bf#KZ6KPX _#URT[V#`*q:K?_#M%
MN.^K[a._0[ 
L_#Z.c c.]4Z6]#[Ma'_0XK=_#ZV3S0_0XR_0d'UK8_#Z'c?[a._0[ A ! U. 
/ !$#D> (&%('''% > )+`
U,	. /
 !$# ( %('''%   +j8.N6X[a6KPX^]#XK(q:K,_#MMN.^K([a._0Y[ A ! 4 2RTb'RT[q:KPXK,Z6]#[8[a6K,OP_#MYK
R[q:]N.Uc[a6KZ d/K2MN6OPRTKZ[3[a6KZ [Y]XKPW'U_#OQK 
 dV 
 />Y* H:*4d/KPb1]#XK&W/KPXbr]#X^eRZ6f
[a.K?XKc.N.OQ[RT]Zi jJLK?W.X]S#K?[a'_0[ + 
 % -:RM,_2W/]MR[RTS#KRoZ.MY[_#Z.OQK3]#b !$ #(04'*)M!$ #9`RmjK#jT` 

RoMM_0[RM  _0d'UK&_#Z.c RM3N.Z'M_0[RM  _0d"UTK#`iRb=_#Z.c]Z.UTVRTbE
r ( 3 *P 
 /:  ! ( 3 *Q	 & 
Y
qa6KPXK &? 
/ ! 
H 

 A3%: Ar / g 	 > 0  @ 0 _#M,RoZ_&W.XKPSRT]N'M\W.X]]#b+Z.]#[YK?[a._0[
& 
(_#Z.c c6]Z6]#[Ma'_0XK_#ZVS0_0XR_0d'UKM  j
RrRb 
 RMLM_0[RM  _0d'UTK _#Z.c
RM N.Z.M_0[RM  _0d'UK#`[a6KZ &? 
4RoM @RT[%MRo^W'UR  Kc _#O
OQ]#X c.RZ6f [Y] [a6KW.XKPS*RT]N.MW.X]]#b&_#Z.c [aN.M
r ( 3 *Q	 &? 
4Y !;( 3 *Q	 & 
Yq4a.KPXK_#M
8 ( 3 *P :  !.`'q4a.RoOa[Y]#f#KP[a6KPXKZ[_#RU [a._0[Dr ( 3 *Q	 & 
0/ : / ! ( 3 *Q	 &? 
4Y j
RoR1 MMN.^eK[a._0[ 
 RMN.Z.M_0[RoM  _0d'UTK_#Z'cr ( 3 *P	 &? 
0/: 1 ! ( 3 *P	 &? 
Y ja6KZ
& 
iRM Z6]#[ MR^W'UR  Kc&rXKOP_#UU#[a._0[ U	6 
4iRMBZ6]#[ K^W'[V?_#Z.c?a6KZ.OQK+MY]RWM ( 3 *Q	 &? 
4YY `
[aN.M6
r ( 3 *Q	 &? 
4Y "( 3 *Q	 &? 
4Y -j 44]	q`2
r ( 3 *P	 &? 
 / :  ! ( 3 *Q	 & 
Y=Ro^W'URTKM
8 ( 3 *P	 &? 
0/: M)
 ( 3 *P 1 !O`iq4a.RoOaRMWi]MMRTd'UTK3]Z.UVRb RM4_e[_#N6[Y]UT]#f#V rd/KQ
OP_#N'MYB
K &? 
?_#Z'c c6] Z6]#[2Ma._0XK_#ZVS;_0XRo_0d'UTKM  =d"N6[}RZ[a.RM&OP_#MYK#` &? 
4@/ : RM
RoZ.OQ]Z.MRM[YKZ[?_#Z.cL[aN.M r ( 3 *P	 &? 
</ : 
 ! `a6KZ.OQK#&` ( 3 *P	 &? 
Y !`9q4a.RO aLRM
OQ]Z[YX_#c.RoOQ[Y]#XV#j
RoRR17 MMN.^K?[a._0[ RM,M_0[RoM  _0d'UTK_#Z'c 
r ( 3 *P	 &? 
M/ : / ! ( 3 *P	 &? 
Y j
4a6K MYKOQ]Z'csOQ]Z'c.RT[RT]Z OP_#Zsa.]Uc ]Z.UV RTb &? 
hRoMN.Z'M_0[RM  _0d"UTK#`a6KZ.OQK Z6]#[ @9RT[%
MR^W'UR  Kc MRoZ.OQG
K ( 3 *P	 &? 
Y ! 4  `?MY] 
 RMN.Z.M_0[RoM  _0d'UTK_#Mhq:KUUm[a.RoM[_0#KMN.M
d"_#O[Y][a6KOP_#MKRR1 `6q4a'ROahUTK_#c'MN.M,[Y]e[a.KM_#^KOQ]Z[YX_#c.ROQ[R]Z_0f_#RZBj

 ?(]^W'N6[RZ.f r( 3 *Q	&44RoMRoZ   - MRZ.OQK    )
( 3 *P	& a6KZ.OQK#`\RT[&RM2MN6OPRKZ[}[Y][YKM[&br]#X2KPS#KPXVK

 )	
  RMRZ  _#Z.c r( 3 *Q	&46
)=( 3 *P	&q4a6KP[a6KPX2]#XZ6]#[ & RM @9RT[%

RoZ.c6KPW/KZ.c6KZ[b1X]^ RT[  jp[+RM+_#UMY]}di]#[a  .a._0X c_#Z.c  .a._0X cBj  .a._0X c.Z6KMM:RM\Ma6]q:Kc
dV [a6K br]UUT]	q4RZ6f Wi]UVZ6]^R_#U,XKc.N'OQ[RT]Z b1X]^ !$#C  ?54 br]#X^}N'U_ & RMM_0[RM  _0d'UTK
Rb}_#Z.c ]Z.UTV RTb& RMS0_#URc ]#X r( 3 *P &} ! 4 &OPUTK_0XUTV KZ6]N6faB`S0_#URc ?54 br]#X^&N.U_#M
OP_#Z d/KXKOQ]#fZ.RTgPKc RZLW/]UTV*Z6]^eRo_#U9[Ro^K#j4aN.M`<!$# OP_#ZdiKMY]UTS#KcRb+q:K*Z6]q a6]q [Y]
OQ]^eW'N6[YK 
r ( 3 *Q	&4br]#X?_#ZV &`/q4a.RO aMa6]q4M[a._0[?OQ]^W"N6[RZ6f
r( 3 *Q	&4RM  .a'_0XcBj
4a6K?W.X]]#b9]#b  'a._0Xc.Z6KMM4RMMR^eRU_0X & RMN.Z.M_0[RM  _0d'UKRTb8_#Z.ch]Z'UTVRb4& RoMZ6]#[S0_#URc
_#Z'c 
r ( 3 *Q &} !  j

Q*\(

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

 KP[YKPX^RZ.RZ6fhqa6KP[a6KPXU	6	&4 ! U R M 
  - OQ]^eW'UTKP[YK#j K^}diKPX Ma.RTWLbr]UUT]	q4M?K_#MRUV
brX]^ [a6K+^K^}d/KPXMa.RW]#b6[a.K+OQ]#XXKMWi]Z'c.RZ6f(W.X]#d"UTK^ br]#X4r( 3 *Q	4&  j_0Xc.Z6KMM RMMR^eRU_0X
[Y][a6Ka._0Xc'Z6KMM(W.X]]#bb1]#XD8( 3 *P	& /! (4j
 ?(]^W'N6[RZ.fU	.	&RM=RoZ



 - _#Z'ceRMd/]#[a  'a._0Xce_#Z.c  .a._0X cBj *R^eRUo_0X[Y]}[a6K

OQ]#XXKMYW/]Z.c.RZ.f&XKMN.UT[(br]#XD
r( 3 Q* 	& j

=<

°

r¸u µuwÜ³·³uw{

<



~*uPuv1![x !tuQ
N![F&'))(%+* ( 3 *Q	& % #i +;N 0z Puu,2 -"wu Puth0

d 'fe" &'))(%+* ( 3 Q* 	& % i#  +;Y

&')lV >= % :YI A2=;A ! & +
! #+= A &')fV>= % mDA ! &+
° r¸uHu=> a6K?W.X]]#b8RM(]#d.[_#RZ6KcR^e^Kc.Ro_0[YKUTVbrX]^
[a6Kc.K  Z.RT[RT]Z j

° r¸u=<µuwÜ³·³uw{
W ~*uPu1
v ![x !tuQ
N
 ![F&'))(%+* ( 3 *Q	 & % (: 0z P u3u 2 -iwYuQPuth;
d ' ei &'))(%* ( 3 *P	 & % ((Y !$#+= A&'"l V>= % ( ( FA ! & |8~*uQw6u ( ( 9( +
° r¸uHu=> A+VRZ.c.N'OQ[RT]Z]Z A (A
j\a6K3d'_#MK3OP_#MKRZq4a.RO b
a ( RM(K^W.[VRM([YXRSR_#UIj @KP[Z6]q _#MMN.^K
[a._0[[a6KW.X]#WiKPX[Vha6]Uc.Mb1]#X3_#Zk
V ( OQ]^W/]MYKc]#b hKUTK^KZ[MP`/_#Z.cW'X]S#K}[a._0[R[4a6]Uc.M4_#M4q:KUU
br]#+X ( . #i +j
A:Vhc6K  Z.R[RT]ZB`
=;A !.&'))(%* ( 3 *P	 & % ( . #i +;
Rb9_#Z.ch]Z'UTVRTb =;A ! &')"( * ( 3 *P &'))(%* ( 3 *P	 & % (( % #i +;Y
RTb8_#Z.c]Z.UVRTb =;A ! &')"( * ( 3 *P	 & % (:,]#XD&')l V>= % IDA !.&'")(%+* ( 3 *P	 & % (:
RTb8_#Z.c]Z.UVRTb &'"l V>= % ( ? FA !.&'))(%* ( 3 *Q	 & % ((:q4a6KPX
K ( ? #i +
MRZ6f&[a6KRZ'c.N.OQ[RT]ZaVW/]#[a6KMRMP`*q:K?OP_#ZhK W'XKMM:[a6KMYKP[(]#b9^e]c6KUoM+]#b<&'))(%* ( 3 *Q	 & % ((:_#M
[a6K^e]c6KUoM = ? MN'Oah[a._0[&')f V>= ? % ( (  A ! &`.qa6KPX3
K ( ( RM,_#ZVhMN6d'MKP[,]#%b (4j M4_XKMN.U[P`
=;A !.&'))(%+* ( 3 *Q	 & % ( . #i +;
RTb9_#Z.c]Z.UTVRb &')f V>= % ( ?  !9= ? _#Z.c &')l V>= ? % ( (  A ! & % q4a6KPX
K ( ? #i +}_#Z.k
c ( ( (
RTb9_#Z.c]Z.UTVRb &')f V>= % ( ? (  A ! & q4a6KPX
K ( ? ( "( . #i +
M_ XKMN.U[P`=[a6Kh^]*c6KUM&]#b&'")(%+* ( 3 *P	 & % (:&_0XKh[a.K^e]c6KUoM}[a'_0[eOP_#Z diKh^e_0W'WiKc RZ[Y]
^]*c6KUM(]#b & dVbr]#XOPRZ.fe_MN6d'MYKP[,]#bUR[YKPX_#UM(Rm
Z ( [Y]ed/KOQ]^K?[YXN6K#j

°

!

d 'fe"	&

. #

(** &'))(%*( 3 *Q	& % ((&y1
 uPv &:Pu !0wxN/*   w !0xQ

 0zit (
vr~*u !{#y00r 4Qvw[!0z{uQv I!0z6u	M/'uPz u ![.& vr~ #v+yo  yrv5Oy1zituR-6uPz"tuPz'vw[!#x2( 	J /*-v	! !{y5 0u	W/*y1*O
0uQzu K 
=<

r¸u µuwÜ³·³uw{

&

° r¸uHu=> A:V RZ.c'N.OQ[RT]Z]Z A (A
ja6Kd'_#MYKOP_#MYK A (A !
 RM}[YXRTS*R_#Umj @ KP[N.M2Z6]q _#MMN.^K[a._0[
[a6KeW'X]#W/]MRT[RT]Z a6]Uc'M3b1]#X}KPS#KPXV A (AL_#Z.cMa6]q [ a'_0[RT[XK^_#RZ.M3[YXN6Kqa6KZ;A (A ! 0j

Q*\



~33



¹sº£~$»wº

~w¶Ýw¿$¾½

@ KP[m(=!

( ? . #i +j A+V [a6KLRZ.c.N'OQ[RT]Z aVWi]#[a.KMRMP`q:KLOP_#Z _#MMN.^eK[a._0[ &'")(%+* ( 3 *P	& % ( ?o
R M[a6K ^]MY[Lf#KZ.KPX_#UOQ]Z.MYKW"N6KZ.OQK ]#bT& [a._0[LRM @RT[%RoZ.c6KPW/KZ.c6KZ[brX]^ ( ? j 6]#X[a6K M_0#K
]#beMR^eW'UROPRT[V#`?UTKP[ &6??c6KZ.]#[YK [a.RoMbr]#X^}N'U_*j p[XK^e_#RZ.M[Y] Ma.]q [a._0[&'))(%+* ( 3 *Q	& % (: !
&'))(%* ( 3 *Q &'))(%+* ( 3 *Q	& % ( ?  % #i +;! &')"( *( 3 *P	& ? % #i +;?RM3[a6K^]MY[?f#KZ6KPX_#U+OQ]Z.MYKW"N6KZ.OQKe]#b
&6?i[a._0[4RY
M @RT[%RZ'c6KPW/KZ.c6KZ[+brX]^ j\,q:]OP_#MYKM_0XK[Y]ed/K?OQ]Z.MRc.KPXKcC
^ >RTb8_#Z.c]Z.UTVRTb
  !=>9j &'))(%* ( 3 *Q	 &6? % >B(RM @R[%RZ.c6KPW/KZ.c6KZ[:b1X]Q
&'")(%+* ( 3 *P	 & ? % >/FA !.&'")(%+* ( 3 *P	 & ? % >/ gih / a6]Uoc.MPj8JLKa._S#K
	& ?gih ( HL :%> /T& ? Ygih
/

 	&

?gih ( H & ?gih / 

4a.RM/br]#X^}N'U_(OPUTK_0XUTV3RMB_UT]#fRoOP_#U#OQ]Z.MYKW"N6KZ.OQK\]#b &'))(%*( 3 *Q	& ? % #D>*+; j<KZ.OQK &'")(%+* ( 3 *P	& ? % >/
RoM @RT[%RoZ.c6KPW/KZ.c6KZ[3b1X]^ >j
&')"( * ( 3 *P	 &6? % >/RM_UT]#fRoOP_#U\OQ]Z.MYKW"N6KZ.OQK]#bY&6?1jp%Z.c6KPKcB`
br]#X:KPS#KPX+
V & ? )k

i` > ) 
:`*q+Ka._S#K & ?  >/ & gi? h (  H Y: >/ & gi? h /  jp[\XK^_#RZ.M
[Y] Ma6]	q [a'_0[KPS#KPXVU]#fROP_#U+OQ]Z'MYWK "N.KZ.OQK 
 ]#.
b &6?[a._0[2RM @9RT[%RZ.c.KPWiKZ'c6KZ[3brX]^ > RoM_
U]#fROP_#U+OQ]Z'MYWK "N.KZ.OQK]#bF&'")(%+* ( 3 *P	 &6? % >/ B
j @KP[ 
 _#ZVLbr]#X^&N.U_Mj[P'
j &6?DA ! 
 a6]Uc.M}_#Z.c

 A ! 
'gih / j 6RZ.OQK & ?   > B
/ & gi? h ( & HL %: > / & gi? h / ,a6]Uc.MP`'q+K&a._S#K & ? A ! 
 RTb8_#Z.c]Z.UV
Rb,di]#[a  >/ &6gi? h (  A ! 
 _#Z.c  Y: >/ &6gi? h /  A ! 
 a6]Uc jaN.MP`RZ]#X c6KPX}[Y]LMa.]q [a._0[
&'")(%+* ( 3 *P	 & ? % >/A ! 
sa6]Uc.MP`/RT[3RM3MN6OPRKZ[[Y]hW.X]	S#K[a._0[ & gi? h ( A ! 
 a6]Uc'MPj *N6W.W/]MYK
[a'_0[8RoM9Z6]#[8[a6K(OP_#MYK#j=a.KZB`0[a6KPXK:K *RM[M_#Z2R^eW'UROP_#Z[ 1e]#b & gi? h ( [a._0[RMZ6]#[_#Z2R^W'UoROP_#Z[
]#b 
3j ]q:KPS#KPX`BMRZ'OQK >/ &6?gih ( A ! 
 a6]Uc.MP`'q+K}Z6]	q [a._0[ > b
/ 1BRM_#ZR^W'UoROP_#Z[,]#b

3j *RZ.OQK 
 RMWK "N'RTS;_#UKZ[[Y][a6K&OQ]Z FYN'Z.OQ[RT]Z]#b+RT[MW.X R^KR^eW'UROP_0[YKMP`'[a6KPXK}Z.KOQKMM_0XRUV
K6RMY[M,_&W.X R^KRo^W'UROP_0[YK]#b 
 MPj[Pj >
/ 1BFA !_#Z'c 1 A4! a6]UcBja'RM+Ro^W/]MYKM:[a._05[ >
d/KUT]Z.fM=[Y]d'N6[+Z6]}UR[YKPX_#U6]#tb 1hd/KUT]Z6fM=[Y]8j A:VOQ]Z.MY[YXN'OQ[RT]ZB`gih / RM+_#ZR^eW'UROP_0[YK]#b

5gih / _#Z.cMgih / RM4M[YXROQ[UTVMY[YX]Z6f#KPX3[a._#Z8j *RZ'OQK 
CA ! 
'gih / a.]Uc.MP` 
BA !Mgih / a.]Uc.M
_#M4q+KUoUmj=a.RM(OQ]Z[YX_#c.ROQ[M4[a6Kb_#OQ[[a._0[	LRoM_2W.XR^eK3Ro^W'UROP_0[YK3]#b 
j
: >j\a.K3c.K^]Z.MY[YX_0[R]ZRMMRo^eRU_0X`iN
x /6vI#vyoN
x /6vI0z"t#yoj
  !OY



=<

°

r¸u µuwÜ³·³uw{

^



  0z"t(99(   
& ')"(  *( 3 *P	& % :( H
&'))(%*( 3 *P 
 % ((  '

 uPv &1 
Pu}v| ! M!0w xN/*T; w[!0x

&'))(%*( 3 Q* 	&KH 
 % (:"

^ ]c.KUM]#b
=> a6K PO U_#R^ OP_#Zd/KK_#MRoUTV W.X]	S#Kcb1X]^Z\X]#W/]MRT[RT]Z W j p%Z.c6KPKcB`}[a6K 
&'))(%*( 3 *Q	
& H 
 % ((_0XK,[a6K^]*c6KUM<=MN.Oa2[a._0[ &'"lV>= % ( (  A ! 
& H 
`#qa6KPXK/( ( "(4jX44]	q`
&')lV>= % ( (  A !:& H 
a6]Uc.MRb:_#Z.c]Z.UTV RTb6&'"lV>= % ( (  A ! &a6] Uoc.M?]#X,&'"lV>= % ( (  A ! 

°

r¸uHu

a6]Uc'MPj
Zh[a.K?]#[a6KPXa._#Z'cB`*[a6K^]*c6KUM(]#b<&'))(%*( 3 *P	& % ((&H&'))(%+* ( 3 *Q 
 % (:(_0XK[a6]MYKMN'Oah[a._0[
&')l V>= % ( ( A !& ]#X&'"l V>= % ( (  A ! 
 b1]#X?MY]^eKc( ( (j?a.RoM4RMKW"N.RTS0_#UTKZ[[Y][a6K_0di]	S#K
OQ]Z.c.R[RT]ZBj


Q*\*_

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

 uP&v 1 Pu2+,!#z6 y1vuPz'v(vuQwx w[!0x 

 0z"t(99(R 
r¸u=<µuwÜ³·³uw{ &
&'))(%*( 3 *Q 1 % (:  j  j   
 
°

=> C\JLK  X MY[,W.X]	S#K[a6Kbr]UUT]	q4RZ6f2UTK^e^e_GC

°

r¸uHu

y?q¶v²v

z

#i +

k P !0w20z4LI!0z6yoQvuQz'v(vuQwx 141\|+u~0#u&'))(%*( 3 P*  1 % I  1

,w[!W! %JIuQx2xe K C

;

z$Üq

;

z$Üq

;

z$Üq

k  ))19` y u o`B1 ! /1 ?1j
&'")(%+* ( 3 *P 1 % I  1Bj h ( HL :X#Hb1B 1 ? =1  #i +j
:  ))19`By u o`B1 !O:X /1 ?j
7 Y
&'")(%+* ( 3 *P 1 % I 9H1 1 91  #i +j
:  ))
4 1_#Z.c Y
4 19j
H  ))
&'")(%+* ( 3 *P 1 % I  1 HL Y: MH1  1=1 #i +j

MY[YX_#Rfa[Ybr]#Xq(_0XcRZ.c'N.OQ[RT]Z]Zk(

=<

°

r¸u µuwÜ³·³uw{

°

r¸uHu

	

  &')"(

*(




OQ]^eW'UTKP[YKM[a.KW.X]]#bj

   uPv &Pu&.!0wxN/*  w[!#x2

  0z"t(=
3 *P	& % (:Y7!$#0Ar0 )	 
	&#z"t( 3 *P0;4)(@!O +

( 




=>

C @KP['0 )	 
 &'))(%*( 3 *P	& % ((Y j *RZ.OQK.& A !.&'))(%*( 3 *P	& % ((=_#Z.c &'))(%*( 3 *P	& % ((FA !
0a6]UcB` 0RM\_#ZR^W'UoROP_0[YK,]#b&j@4KZ'OQK#`[a.KPXK4K6RMY[M+_W.X R^KR^W"UROP_0[YK+0 ? ]#b& Mj[PjR0 ? A ! 0
a.]Uc.MPj.*RoZ.OQK
0 c6]KM4Z.]#[OQ]Z[_#RZ_#ZVUoRT[YKPX_#UBbrX]^( `'[a'RM4RM_#UMY][a6K}OP_#MK}br]#X60 ?j4aN.MP`
0 ?RM_UT]#fRoOP_#UOQ]Z.MYKW"N6KZ.OQK}]#b1& [a'_0[RM.@RT[%RZ'c6KPW/KZ.c6KZ[:brX]^ ( j M4_OQ]Z'MYKW"N.KZ.OQK}]#b
\X]#W/]MRT[RT]Z &`"RT[4^&N.MY[4diK[a6K}OP_#MYK}[a._0[&'")(%+* ( 3 *P	& % :
( A ! 0 ? j6KZ.OQK#`i[a6KPXK}K*RM[M4_
W'XR^KR^W"UROP_0[YK+0 ? ?]#b &')"( *( 3 *P	& % :( ?MPj[Pj +0 ? ? A ! 0 ?a6]Uc.Mj&a'RM3R^W'URKM[a'_0[+0 ? ? A !20

a.]Uc.M_#Mq:KUUm`i_#Z.cMRZ.OQK&d/]#[aOPU_#N'MYKM_0XK}W.X R^K}Ro^W'UROP_0[YKM4]#b=[a6K2M_#^K&b1]#X ^}N.Uo_*`"[a6KPV
_0XKWK "N'RTS;_#UKZ[Pj A(N6[[a'RM,R^W'UoRTKM:[a._0?
[ 05 0 ?/a.]Uc.MP`*q4a.RoOahOQ]^W'UKP[YKM[a6KW'X]]#bj
[ 0hd/K_W.XR^eKR^W'UoROP_0[YKe]#b & [a._0[2c6]KM&Z6]#[2OQ]Z[_#RoZ _#ZVUR[YKPX_#U=brX]Z
^ (G
j 0hRM
 C @ KP
@9RT[%RZ.c.KPWiKZ'c6KZ[:brX]Q
^ (j *RZ.OQ
K 02RM,_#ZR^W'UoROP_0[YK3]#b &3`.RT[^}N'MY[4_#UMY]d/K_#ZR^W'URoOP_0[YK]#b
&'")(%+* ( 3 *P	 & % (: j 6N6d'MYWK "N6KZ[UTV#`"[a.KPXK}K 6RMY[M3_W.XRo^K}R^eW'UROP_0[Yc
K 0+?9]#bE&'))(%* ( 3 *Q	 & % ((
Mj[P
j 0 ? A !20a6]Uc.MPj *RZ.OQK & A ! &'))(%+* ( 3 *Q	 & % (:3_#Z.cG&'")(%+* ( 3 *P	 & % (:A !20 ? d/]#[aLa6]UcB`
q:Ka._S#+
K & A !20 ?=_#Mq:KUUmj KZ.OQK#`9[a.KPXKeK 6RMY[M_hW'XR^KR^W"UROP_0[YK 0+? ?]#b &MPj[P)
j 0+? ?FA ! 0+?
a.]Uc.MPja6KPXKPbr]#XK#` 0 ? ? A ! 0a6]Uc'M9_#Z.c2MRoZ.OQK+d/]#[a2OPU_#N.MKM_0XK:W'XR^K:R^W'URoOP_0[YKM]#b"[a6K,M_#^K
br]#X^&N.U_*`6[a6KPV_0XK?WK "N.RTS0_#UTKZ[Pj A:N.[,[a.RM,R^W"URTKM+[a._0?
[ 05 0 ?/a.]Uc.MP`*q4a.RoOaOQ]^W'UTKP[YKM4[a6K
W'X]]#bj



Q*\^\



~33

=<

°

r¸u µuwÜ³·³uw{

0



¹sº£~$»wº

~w¶Ýw¿$¾½

"
  
 u~00u
&'))(%*3U	.	& % U2".&'))(%*( 3 Q* 	& % ( $ 

 uPv &Pu&.!0wxN/*  w[!#x2

 0z"t U

=> A:VhRZ.c.N.OQ[R]Z]Z A UA
j:4a6KW.X]#W/]MR[RT]Z[YXRTS*R_#UUTVa6]Uc.M,br]#X A U
A ! *j @ KP[N'M_#MMN.^eKRT[
RM([YXN.Kq4a6KZ6KPS#KPX A U A! ij @ KP[ U !$#D< ( %('''% < , ( +j A:Vc.K  Z.RT[RT]Z `q:Ka._S#K
°

r¸uHu

& '))(%*3U.	& % U2/!.&'))(%+* U,	6 &'")(%+* U,	.	& % #D< ( %('''% < +; % #D< , ( +;
A:Vh[a6KRoZ.c.N.OQ[RT]ZhaVWi]#[a.KMRMP`&'))(%+* U,	6	& % U}RM,KW"N.RTS0_#UTKZ[4[Y] &'))(%*3U,. 
 % #D< , ( ;+  `
q4a6KPXK 
 RM,c6K  Z.Kch_#MM C

"!.&'")(%+* ( 3 *P	 & % #D> > )#D< ( %('('('>% < ++ . #)%: >9 > ) #D< ( %('('('>% < ++;
JLK&a._S#K&'")(%+* U,	.	 & % U} .&'))(%3* U,. 
 % #D< , ( +; j A:Vc.K  Z.RT[RT]Z `
JLK&_#UMY]ea._S#K

&'")(%+* U	6 
 % < , ( ! 
    h / H 
    h

(

'

&'))(%*( 3 *Q 
 % #D< , ( % :%< , ( +;
! &'")(%+* ( 3 *P &')"( *( 3 *P 
 % #D< , ( +; % #):%< , ( +;
! &'")(%+* ( 3 *PY :%< , ( / 
    h / WH 
    h ( % #):%< , ( +;
!
 < , ( /LY %: < , ( / 
    h / H 
    h ( 	    h ( WHLY :Y< , ( / 
    h / WH 
    h ( 	    h / '
a'RM2MR^W'UoR  KM}[Y]  < , ( / 
    h ( RH 
    h / H 
    h ( `\q4a.RoOa RM_#UM]LKW"N.RS;_#UTKZ[2[Y]

    h / H 
    h ( `'a.KZ.OQK?WK "N'RTS;_#UKZ[,[Y]&'")(%+* U,	. 
 % #D< , ( +; j ?:]Z.MYKW"N6KZ[UTV#`6q+K}a._S#K
&'))(%3* U,.	 & % U&
 &'")(%+* ( 3 *P &')"( * ( 3 *P	 & % #D> > ) #D< (&%('('(' % < ++ . #)Y
: > > ) #D< (&%('('(' % <++; % #D< , ( % :%< , ( +;
 &'")(%+* ( 3 *P	 & % U2 '
°



=<

r¸u µuwÜ³·³uw{

°

U 4

G

 uPv &1 
:Puv| ! !#w xN/* 0 w[!#x 
3
% 140z"tLU P ue /=PPuv ![6
   
& /&'")(%+* U	6 
 % U&

,. & 1\vr~*uPz&'")(%+* U,	.	&G/ 
 % &U 

=> @ KP[N.MOQ]Z'MRc6KPX?[a6KeOP_#MKeq4a6KPXK U ! #D< +j A:V c.K  Z.RT[RT]Z `iq:Kea._S#K

r¸uHu

&'))(%*3U.	& /


 % #D< +; ! 	&9/ 
	ph / H 	 &./ 
	ph ( j1"N'RTS;_#UKZ[UTV#` &'))(%+* U,	6	&./ 
 % D# < +;  	&h / /

h / TH 	&h ( / 

 h (  j J a6KZ <  4 , &`4q:Ka._S#KX&  &h /  &h ( 
j OPOQ]#Xc.RoZ6fUTV#`
&'))(%*3U,.	& / 
 % #D<+;  &;/  
 h / H . 
 h (   & / &')"( *P 
 % #D<+; j@ MYY[ X_#Rfa[Ybr]#Xq(_0Xc



°

RZ.c'N.OQ[RT]ZOQ]^W'UTKP[YKM4[a6K?W.X]]#bj

1 0zit
 1 1  P u}vr~wYu ut0y1	M!0yrz'v
 uPv &1 
 P u&v| !.!#w xN/* 0  w 0! x 
3
% :
Puvr ![00w ymQPPTuQ  w !0x 
 mJ I/P~hvr~*#v U,	.	& . 
U . 
'"
 . .  K  v\~!0Tt; 
=<

r¸u µuwÜ³·³uw{



Q*\+Q

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

  


 t!	uz!v I!0z'vI0yrz0z4;0wy PQu  w !0x



 	  
 	 & % +:
 % % -YFA ! 

y 0z"t+!0z. 4y 
&OA !.&'")(%+* ( 3 *P	 & / 
 % ( . . (9

   zLvr~*u3{uQziuPw%#;u 

 	  
 	 & % +:
 % % -YFA ! 

y 0z"t+!0z. 4y 
& A !.&'))(%*( 3 *P	& / :@&')"( * ( 3 *P	 & / : 
 % (
.

( .  % (
.

( . 

°

|8~*uPwYu 
 	  
 yo y1w M/*x&w y -ivy0!0z;}tu;
=ziuty1z#J   0wQvr~Q4)1 IK 
=>

r¸uHu

0j44a.RMhRM_ OQ]Z'MYKW"N.KZ.OQK]#b2a6KP]#XK^

j  brX]^ 5 =XgPV^&N.MRZ'MYRI` # j a.RM[a.KP]#XK^
M[_0[YKM[a._0[RTb 
 c.]KMZ.]#[OQ]Z[_#RoZ URT[YKPX _#UMb1X]^  `3[a6KZ 
 	  
 	& % +:
 % % -Y A ! 

a.]Uc.MRTb_#Z.c ]Z.UTV RTb?[a6KPXKRMZ6] OPU_#N.MYK_1 MPj[Pj 1 c6]KMZ6]#[OQ]Z[_#RZ _#ZV URT[YKPX _#UbrX]^
( . . ( _#Z'#
c & A ! : 
"H1 d'N6[ & A4! 1jLa.RM&RM}KW"N.RS;_#UTKZ[&[Y] M[_0[YKh[a._0[P`\RTb 
 c6]KM
Z.]#[&OQ]Z[_#RZ URT[YKPX_#UoMbrX]^  `8[a6KZ 
 	  
 	 & % +:
 % % -Y A ! 
 a.]Uc.MRb_#Z.c]Z'UTVRTb`9br]#X
KPS#KPXV OPU_#N.MYk
K 1 OQ]Z[_#RZ.RoZ6f]Z.UV UoRT[YKPX_#UMbrX]^ ( , . (  `,q:Ka'_S#K &;/ 
 A ! 1 RTb?_#Z.c
]Z'UTVRT1b &CA ! 1j3p[?RMK_#MYV[Y]hMYKPK&[a._0[3[a6K2WK "N.RTS0_#UTKZ.OQK}RoM4W.XKMYKPXS#Kcq+]N'Uc_#ZVbr]#X^&N.U_
1 @R[%RZ.c6KPW/KZ.c6KZ[b1X]^ (T. . (  d/KOQ]Z.MRc.KPXKc _#ZVbr]#X^&N.U_hOP_#ZLd/K[N6X Z6KcRZ[Y]_#Z
WK "N.RTS0_#UTKZ1
[ ?54 b1]#X ^}N.Uo_ j84aN.M`a6KP]#XK
^ j OP_#Zd/K,XKPW'a6X _#MYKcRZeb1]#Xf#KP[Y[RoZ6f[YKPX^eWM C8Rb

 c.]KM(Z6]#[,OQ]Z[_#RZhS0_0XR_0d'UTKM+brX]^  `[a.KZ 
 	  
 	 & % +:
 % % -YFA ! 
 a.]Uc.M(RTb_#Z.c]Z.UV
Rb &G/ 
  (   & RTb_#Z.ch]Z.UVRTb & A ! &'))(%+* ( 3 *Q	 & / 
 % ( . . ( 9 j

j44a.RMhRM_

OQ]Z'MYKW"N.KZ.OQK]#b2a6KP]#XK^ j  brX]^ 5=XgPV^&N.MRZ'MYRI` # j a.RM[a.KP]#XK^
M [_0[YKM[a._0[ 
 	  
 	& % +:
 % % -YA ! 
 a6]Uc.MRTb_#Z.c ]Z.UV RTbV& A ! 
 ]#Xe[a6KPXKK*RoMY[Me_
br]#X^&N.U_ MPj[Pj, c6]KMZ6]#[OQ]Z[_#RZ_#ZV URT[YKPX_#UbrX]^7( . . ( ` & A ! 
 H  a6]Uoc.M?_#Z.c

 	  
 	 & % +:
 % % -YFA ! :&jp[\RoMK_#MYV2[Y]MYKPK[a'_0[\MN.O a_?br]#X^&N.U_ K6RMY[M=Rb"_#Z.c]Z'UTV&Rb
[a.K3OQ]DZ FYN.Z'OQ[RT]Z ]#b9_#UU"[a6K3br]#X^}N'U_#M. MN'Oa[a._0[  c6]KM(Z6]#[,OQ]Z[_#RZh_#ZVURT[YKPX_#U"brX]^
( . . (_#Z.c &OA ! 
H  a6]Uc.M9RM9Mj[Pj 
 	  
 	 & % +:
 % % -YFA ! : =j *RZ'OQK &OA ! 
H  a.]Uc.M
Rb"_#Z.c2]Z.UV}RTb & / : 
 A !  a6]Uc'MP` RoM8WK "N.RS;_#UTKZ[8[Y]&'))(%* ( 3 *Q	 & / : 
 % ( . . ( 9 jaN.MP`

 	  
 	 & % +:
 % % -Y A ! 
 a6]Uc.MRTb=_#Z.c]Z.UTVRTb &CA ! 
 a.]Uc.M]#X 
 	  
 	 & % +:
 % % -YA !
:@&')"( * ( 3 *P	 &;/ : 
 % (/. . ( 92a.]Uc.MPj p%Z [a6KOP_#MKq4a6KPXK & A ! 
 a6]Uoc.MP` &;/ : 
 RM
RoZ.OQ]Z.MRM[YKZ[P`MY]RT[RM?_#UoMY][a6KOP_#MKe]#b &')"( * ( 3 *P	 & / : 
 % ( . . ( jaN.MP`RTb & A ! 

a.]Uc.MP` 
 	  
 	 & % +:
 % % -Y A ! :<&'))(%* ( 3 *Q	 &/ : 
 % ( . . (  /a6]Uc'M _#M q:KUUm*j OPOQ]#Xc.RoZ6fUTV#`

 	  
 	 & % +:
 % % -YA ! 
 a6]Uoc.M,RTb8_#Z.ch]Z.UTVRTb 
 	  
 	 & % +:
 % % -YFA ! :<&'")(%+* ( 3 *P	 & /
: 
 % ( . . ( 9a6]Uc.MPj *RZ'OQK&')"( * ( 3 *P	 & /-: 
 % ( . . (9c6]KM4Z6]#[OQ]Z[_#RZ_#ZVUoRT[YKPX_#U
brX]^  `6[a6KWi]RoZ[ FN.MY[_0d/]S#K}KZ._0d'UTKM,OQ]Z.OPUoN.c.RZ6f2[a6K?W'X]]#bj

Q*\



~33



¹sº£~$»wº

~w¶Ýw¿$¾½


 !#w N
x /* .
 [w !#x 

 0z"tTuv&( Pu&eI/=PuPv ![/(*   zvr~6u
 uPv & P uY
r¸u=<µuwÜ³·³uw{  
{uPziuQwY0  0Pu$1=vr~*uPwYu?yoz!.-"w !I-G!0 yvy5!0zi0 M!0wxN/T 
u M/*yr;0uQz'vv	!&'))(%*( 3 *P	& % ((1v vr~*uy E	u
![ 
 y1 -G0!  4;z !0x2y0r 4 P,!D/*z"tuty1z A &A OA (A 1 /*z.u     9     
°

=> a6K FN.MY[R  OP_0[R]ZhRM,[q:]#br]UcC
[
&'))(%*( 3 *Q	& % ((RM[a6KUT]#fROP_#UoUTV MY[YX]Z6f#KM[OQ]Z.MYKW"N6KZ.OQKL]#bN& [a'_0[RoML@9RT[%RZ.c.KPWiKZ'c6KZ[
brX]^ (j ?:]Z.MYKW" N6KZ[UTV#`(b1]#XKPS#KPXV b1]#X ^}N.Uo_1 ) 
3
%i`+q:Ka._S#K & A ! 1 RTb3_#Z.c ]Z'UTV Rb
&'))(%*( 3 *Q	& % ((,A ! 19` qa6KPXK( !!( 3 *Q	& +( 3 *P 1B jNA:KOP_#N.MYK&'))(%+* ( 3 *Q	& % (:c6KPW/KZ.c.M]Z.UV
]Z URT[YKPX_#UoM]#bR( 3 *Q	4& 4k( 3 *P 1B ` RT[RM_#Z yrz'vuPw	-G!# 0z"v]#b & _#Z.ck1`BRmjK#jT`B_br]#X^&N.U_+$ MPj[Pj &CA !$
_#Z.c $ A ! 1a6]Uc [aN.M,q:Ka._S#KNO
& A ! &')"( *( 3 *P	& % ( 3 *Q	
&  5( 3 *P 1BYDA ! 19j
;9[a6K(K6 RMY[YKZ.OQK,]#bi_W'X]#W/]MRT[RT]Z._#Ubr]#X^}N'U_*`#RZ[YKPXWi]Uo_#Z[]#b& _#Z.c1`_#Z.c&]#biMRTgPK+W/]UTV*Z6]^eRo_#UUTV
d/]N.Z.c6Kc RZ9A 
& A A 1@A q+]N'Uc Ro^W'UTV[a._0[  ;  
   5:
A ]#W.W'_#Z'_' * RTW"MYKPX`  #0 `
q4a.RoOahRMOQ]Z'MRc6KPXKcS#KPXVN.Z'URT#KUTVRoZhOQ]^W'UTK6 RT[V[a6KP]#XV#j

°

r¸uHu

°

r¸u µuwÜ³·³uw{
°

r¸uHu

=<

 <

  #(0  3'  	   )
 

0z"t

=>
S _0XIKW"N.RS;_#UTKZ'OQK#j
 =



 2 0  3 '  	   )
  0wu   - O[I!0x.-"Tuvu 

K^}diKPX Ma.RTW C8p%Z]#Xc6KPX,[Y]eOa.KO[a6K^K^}d/KPXMa.RTW[Y][a6KOQ]^W"UTK^KZ[_0XVW.X]#d'UTK^h`
fN.KMMRZ6f_OPU_#N.MYK1d'N'RUT[N.WbrX]^ U` _#Z'cO a6KO*RZ6f[a._0[	&A ! 1_#Z.c 
 A4! 1B4]#X
	 & A4! 1 _#Z.c 
 A ! 1B&RM2MN.OPRTKZ[Pja6KhOa6KO M[YKPW OP_#Z diKK_#MRUV_#OPOQ]^W'URoMa6Kc
RoZW/]UTV*Z6]^eRo_#U[R^eK&qa6KZ _#Z  ]#X_#OPUTKeRoM_S;_#RoU_0d'UTK#j4KZ.OQK#`[a6KeOQ]^W'UTK^eKZ[_0XV
W'X]#d'UTK^ d/KUT]Z6fM([Y+
] & - j
_0Xc.Z.KMMM C @ KP
[ d d/K[a6Ke^e_0W.W"RZ6f[a._0[_#MMY]*OPR_0[YKM[a6K[YXRTW'U
K +	& % * f   % \ -3[Y][a6K
"N._#Z[R  Kc d/]]UTK_#Z br]#X^}N'U_ 8\  ^ & rqa6KPXK #i\ % ^ +RM_ W'_0X[RT[RT]Z ]#N
b U	.	 &Y j
?,UTK_0XUTVKZ6]N6faBr
` d RM(W/]UTV[R^K#j ]#XKP]S#KPX`'q:Ka._S#K C

8\  ^

& RoM,S;_#UoRc

RTb8_#Z.c]Z.UVRTb A !  ^ ' &
RTb8_#Z.c]Z.UVRTb A ! &')"( *3U	.	& % ^e
RTb8_#Z.c]Z.UVRTb &6
 ` * f 

6RZ.OQK[a6KS;_#UoRc.RT[VW.X]#d'UK^ br]#X 	  
 br]#X^}N'U_#M2RM  - OQ]^eW'UTKP[YK#`\[a'RM2W.X]	S#KM[a6K

	 	  ) 
  j

  - a._0Xc'Z6KMM(]#b   2 0  / '
 @9RT[%IKW"N.RTS0_#UTKZ.OQK#j

K^}diKPX Ma.RTW C KPK[a6Ke^K^}diKPX
JYMj[Pj*( 3 *Q 1 5"(RL*j

Ma.RTW W.X]]#b(_0di]	S#K#`9XKPW'U_#OPRZ6f J%d'N'RUT[?N6WLbrX]^ UL0dV

_0Xc.Z.KMMM C@KP[Yd d/K\[a6K,^e_0W.W"RZ6f[a._0[_#MM]OPR_0[YKM +	& % 
 % U - [Y] +	& % 
 % ('$ - j?(UTK_0XUV
KZ.]N6faB`-d  +	& % 
 % U -YOP_#Z d/KOQ]^W'N.[YKc RZ[R^KW/]UTV*Z6]^eRo_#U=RZ;A +	& % 
 % U -A
jJLK
a'_S#KMa.]q4Zh[a'_0[.& _#Z.c 
 _0XKVS=_0XIKW"N.RS;_#UTKZ[,fRTS#KZ U RTb_#Z.c]Z.UTVRTb & _#Z'c 
 _0XK
Q*\i

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

@9RT[%IKW"N.RTS0_#UTKZ[&fRTS#KZ ('$(j KZ.OQK#`'d RM2_W/]UTV*Z6]^eRo_#U\^e_#ZVI]Z.KhXKc.N.OQ[RT]Z brX]^
  2 0  3'  	   ) 
  [Y]   #(0  3'  	   )
  j *RoZ.OQK   2 0  /'  	   )	
  RoM  - a'_0XcB`
[a'RMRM,_#UM][a6KOP_#MYKbr]#X   #(0  /'  	   )	
  j



v & P u !0wxN/*   w !0x
3
% 0z"tLU I/=PQPuPv.![3
  & y1}yrz /O
 u1
r¸u=<µuwÜ³·³uw{ 
uQz  u PQu1 w !0x U y #z"tT!0z. 4y .& yo .0w OYtuR-6uPz"tuPz'v !0zBU
°

° r¸uHu=> =X]#W/]MR[RT]Z <b1X]^
5 A:]N6[RURTKPX` # <M[_0[YKM[a._0[N&RMRZ'N6KZ.OQK_0d'UK}brX]^ U TR b(_#Z.c
]Z.UTVRTb9[a6KPXKK6RMY[M_2W'XR^K?R^W"UROP_#Z[:]#b & [a._0[OQ]Z[_#RZ'M4_S0_0XR_0d'UKbrX]^ Ue`.q4a.KPXK U oR M,[a6K
MYKP[]#b8OQ]Z[YX]UU_0d'UK?S;_0XRo_0d'UTKMPj \X]#W/]MRT[RT]ZhOQ]^W"UTKP[YKM,[a6KW'X]]#bj


 uPv& Pu& M!0wx /*T. w !0x 
3
%0z"tNU  /=PPuv ![T
  &yo3wuQuQ;#z'v
	v ! U y 0z"tT!0z. 4y  & yo .#wIYO tuR-.uQz"tuPz'v !0zBU

=<

°

r¸u µuwÜ³·³uw{







=> a6K?W.X]]#b8RM([YXRTS*R_#U/brX]^ =X]#Wi]MRT[RT]Zhj

°

r¸uHu

 uPv & P u2.!0wxN/* w !0x2
3
% #z"t U I/=PQPuPv ![+
 Y& yo?Qvw y0v 4
wuQuQ;#z'v9v	!VU y 40z"tN!0z. 4&y  & yo .0w OYtuR-6uPz"tuPz'v !0z U 0z"t .0w Oyrz"tu -6uQzituQz'vw[!#x U,.	&  U
=<

°

r¸u µuwÜ³·³uw{







 X]#W/]MR[RT]Z	& RM S=_0XYc6KPW/KZ.c6KZ[
=> +_#MYVbrX]^ [a.Kc6K  Z'RT[RT]Z]#b MY[YX ROQ[\XKUKPS;_#Z.OQK#`W'UN'M =
brX]^ KPS#KPXVS0_0XR_0d'UTK}]OPOPN.XXRZ6fRZ_W.X R^K}Ro^W'UROP_0[YK]#b & #_ Z.cBS=_0XRZ.c6KPW/KZ.c6KZ[4brX]^ _#UU9[a6K
°

r¸uHu



XK^e_#RoZ.RZ6f&S;_0X R_0d'UTKM  j

r¸u=µ
< uwÜ³·³uw{ 
J K! # 2  
 # 2   	 3 )

,!#xY-iTuvu 
J WK ! # 2  
 # 2   	 /)

,#! xYi- Tuvu 
°

°

=>

r¸uHu



Ü·r¸³

;

 1 -   1/2 '
 1    132 ' 

# 1

 !'

# 1

G! '



	  
 #GD$# #  2 J   #uPxu4uQw 1 Keyo 


	  
(# $# #  2 J   #uPxeuM4uQw 1  [Ky1 "

- O
-

O

n ; q " y?z3q£v qwq¶r k   '
K^}diKPX Ma.RTW j @KP[2N'M&OQ]Z'MRc6KPX2[a6KhOQ]^W'UK^KZ[_0XVW.X]#d"UTK^hj 
3N6KMM_ OPU_#N'MYKb19`
O a6KO[a._0[,RT[(c6]KM:Z.]#[:OQ]Z[_#RZh_#ZVS0_0XR_0d'UTKb1X]^ U r[a.RM(OP_#ZdiK3_#Oa'RTKPS#KchRZ[R^K
W/]UTV*Z6]^eRo_#U=RZ A 1@A A U
A
`\a6KZ'OQKRZ[R^KW/]UTVZ.]^eR_#U=RZ A &A A U
AMRZ.OQKZ6]W'XR^K
Ro^W'UROP_0[YK4]#b & OP_#ZRZ.OPUN'c6K_S0_0XR_0d'UK[a._0[(c6]KM+Z6]#[:]OPOPN6X:RL
Z &4 j=a6KZO a6KO[a._0[
R[(RoM:_#ZhRo^W'UROP_0[YK]#b &r]Z6K?OP_#UU/[Y]_#Z  ]#X_#OPUTK	:_#Z.cOa.KO[a._0[,KPS#KPXVMN6dBOPU_#N.MYK
]#*b 1 ]#d'[_#RZ6KcdVXK^]	SRoZ6fb1X]^ R[]Z.K]#b:RT[M3URT[YKPX_#UoMRoMZ.]#[_#ZR^W'UoROP_0[YK}]#b &
 OP_#UoUM[Y]_#Z  ]#X_#OPUTK	 j *RZ'OQK&]Z'UTV
OP_#UUoM[Y]MN.OaL_#Z ]#X_#OPUKe_0XKXWK "N.RTXKc
[Y]2Oa.KO[a'_0R[ 1RM+_W'XR^KR^eW'UROP_0[YK]#b &`[a.KOQ]^W'UK^KZ[_0XVeW.X]#d'UK^]#b! # 2  
(#
] &  - j KZ.OQK#` ! # 2  
 # 2   	 / )
  d/KUT]Z6fM([Y]  - j
2   	 / )
  d/KUT]Z6fM([YL
_0Xc.Z.KMMPj @ KP[ #i\ % ^ +}d/K_W'_0X[RT[R]Zh]#b U	.	 &?rbr]#X_#ZVb1]#X ^}N.Uo%
_ & j 8\  ^ & RM
S0_#URc RTb:_#Z.c ]Z.UTVRTb\KPS#KPXVW.X R^K2R^W'URoOP_0[YK&]#b &s[a._0[OQ]Z[_#RZ.M_S0_0XR_0d"UTK2b1X]7
^ \
·[rq£±q z3{

Q*\76



~33



¹sº£~$»wº

~w¶Ýw¿$¾½



_#UoMY]OQ]Z[_#RZ.M:_?S;_0X R_0d'UTK,brX]^!^Rbi_#Z.c]Z.UTV2RTbiKPS#KPXVW.XR^eKR^W'URoOP_0[YK,]#b & OQ]Z[_#RoZ.M
_2S0_0XR_0d"UTKbrX]^ ^ MRZ.OQK U.	 &/ ! \ . ^e\Rb_#Z.c]Z.UTVRTb & RM(MY[YX ROQ[UTVXKUTKPS;_#Z[([Y]
^j

Ü·r¸³

;

n ; q " y?z3q£v qwq¶r k   '
K^}diKPX Ma.RTW C [YX _#RTfa[Ybr]#Xq(_0XchbrX]^ \X]#W/]MRT[RT]Z.M 2_#Z'c P*j
_0Xc.Z.KMMM CA:VK6a.RTd"RT[RZ6f_W/]UTVZ.]^eR_#U#XKc'N.OQ[RT]Z}b1X]^C!$#(04'*)M!+$#&[Y] ! # 2  
 # 2   0
	 / )	
  1    1/2  '  # 1 .! ' 
	  
 # $ # #  2 j?9]_#ZVW"_#RTX + % 7 -]#b\W.X]#W/]0
MRT[RT]Z._#UBbr]#X^&N.U_#MP`iUTKP[D  0 ->7((d/K_b1]#X ^}N.Uo_]#d.[_#RZ6KcbrX]^ 7 dVhXKZ._#^eRZ.fRT[M
S0_0XR_0d"UTKMPj dSR]N.MUTV#`
Rr6  0 ->7(,RM,M_0[RM  _0d'UTK?RTb8_#Z.c]Z.UTVRTbM7 RMPj
4]q`"UTKP[ M d/K?_eZ6KPq S0_0XR_0d"UTK#`6UTKP[
&"! / M / :  0 ->7,
_#Z'X
c U8! U,	. i . # M +T
j A+V \X]#W/]MRT[RT]
Z ` &RV
M S=_0Xc6KPW/KZ.c6KZ[]X
Z U RTb(_#Z.c
]Z'UTVRb[a6KPXKRoM,_W.XR^eK3Ro^W'UROP_#Z[:]#b & ^eKZ[RT]Z'RZ6f_S0_0XR_0d'UTKbrX]^ Ue`'RmjK#jT`.RTb8_#Z.c
]Z'UTVRb / :  0 ->7,(RM,M_0[RoM  _0d'UTK#`6[aN.MP`.N'MRZ6fR1I C
RoR1 & RM S=_0XYc.KPWiKZ'c6KZ[4]Z U Rb_#Z.c]Z'UTVRbd/]#[a _#Z.c:7 _0XKM_0[RoM  _0d'UTK#j
4a6KZB`}_0f_#RoZ _0br[YKPX =X]#W/]MR[RT]Z ` & RM S=_0XYRZ'c6KPW/KZ.c6KZ[brX]^ U	6	 &4  U !
U,	.>3 0 ->7(YRTb_#Z'c ]Z'UTV RTbZ.] W'XR^KR^W'URoOP_#Z[]#N
b & ^KZ[RT]Z.M_ S;_0X R_0d'UTK
brX]^ U	.>  0 ->7(Y `6RmjK#jT`RTbB_#Z.ce]Z'UTVRTb 3 0 ->7(\RM=N.Z'M_0[RM  _0d"UTK#`[aN.MP`N'MRZ6f
RrIC
RoRR1 & RM S=_0XYRoZ.c6KPW/KZ.c6KZ[,b1X]:
^ U	.	 &  U RTb9_#Z'ch]Z.UTVRTbM7 RM,M_0[RoM  _0d'UTK#j
4aN.M`'brX]^ \X]#W/]MRT[RT]Z `8RRr,_#Z.c RRR1 `.q:K&f#KP[[a._0[ & RoM4MY[YXRoOQ[UTVhXKUTKPS0_#Z[[YT
] U
Rb_#Z.c]Z'UTVRb RM,M_0[RoM  _0d'UTK?_#Z.c 3 0 ->7((RoMZ6]#[Pj
·[rq£±q z3{



Q*\,+

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

ç

&T D F\H  GE

Ãêê¸íì



KPXKRM,_M^_#UU/fUT]MM_0XV]#b8N.MYKPbN.Ui[YKPX^eM,qRT[a[a6K?W'U_#OQK?qa6KPXK3[a6KRTX4c.K  Z.RT[RT]ZOP_#Zd/K3br]N.Z.cBj


%$
W.X]#W/]MR[RT]Z._#UiU_#Z6fN._0f#Kf#KZ.KPX_0[YKcdB
V U
*KOQ[RT]Z j 
('$
MYKP[,]#bURT[YKPX _#UM(d'N.RU[:N6WhbrX]^ U
*KOQ[RT]Z j 
(',$
MYKP[,]#b8W/]MRT[RTS#K?UR[YKPX_#UM(d'N.RoUT[:N.Wb1X]:
^ U
*KOQ[RT]Z j 
( $.
MYKP[,]#bZ6KPf_0[RTS#K&URT[YKPX_#UoM+d"N.RUT[(N6WbrX]^ U
*KOQ[RT]Z j 
U.	 &
MYKP[,]#b8W.X]#W/]MR[RT]Z._#UiS;_0X R_0d'UTKM,_0W.W/K_0XRoZ6fRB
Z &
*KOQ[RT]Z j 
4O4
Z6KPf_0[RT]ZZ6]#X^e_#UBbr]#X^
*KOQ[RT]Z j 
( 3 *Q	 &4
MYKP[,]#bURT[YKPX _#UM(]OPOPN.XXRZ6fRZ[a.
K 4?4 ]#b &
*KOQ[RT]Z j 
Y= $
_ UIq+]#X UcRZ.MY[_#Z[R_0[RT]Z'M,]#b_#UoU/S;_0XRo_0d'UTKM(]#b U} *KOQ[RT]Z j 
[/$
MYKP[,]#b_#UU U?Iq+]#X Uc.M
*KOQ[RT]Z j 
=
q:]#XUcrbN.UU/RZ.MY[_#Z'OPR_0[RT]Z"
*KOQ[RT]Z j 
d f' e"	 &
MYKP[,]#b^]*c6KUM(]#b &
*KOQ[RT]Z j 
 ').} =
br]#X^}N'U_2MN.Oa[a._0?
[ d ' ei	 & ! 
*KOQ[RT]Z j 
&'gih /
*KOQ[RT]Z j 
&'gih (
*KOQ[RT]Z j 
&5j h (
*KOQ[RT]Z j 
&')l V>= % I
*KOQ[RT]Z j 
	 
	 &
MYKP[,]#b8W.XRo^K?R^W'URoOP_0[YKM(]#b &
*KOQ[RT]Z j 

	i	 &
MYKP[,]#b8W.XRo^K?R^W'URoOP_#Z[M:]#b &
*KOQ[RT]Z j 
`

*KOQ[RT]Z j 
" " *KOQ[RT]Z j 
- ` & - `  MYV*Z[_#OQ[RoOP_#U @R[%c6KPW/KZ.c6KZ.OQK
K  Z'RT[RT]Z 
MYV*Z[_#OQ[RoOP_#U S=_0XYc6KPW/KZ.c.KZ.OQK
K  Z'RT[RT]Z 
 &
MYK^e_#Z[ROP_#U1 @RT[%c6KPW/KZ.c.KZ.OQK
K  Z'RT[RT]Z 
r ( 3 *P	 &
URT[YKPX _#UM(MN.Oa[a._0+[   &
K  Z'RT[RT]Z 
<  ,. &
MYK^e_#Z[ROP_#U1 S=_0XYc6KPW/KZ.c6KZ.OQK
K  Z'RT[RT]5
Z <
r ( 3 *P	 &
S0_0XR_0d'UTKM,MN.Oah[a'_0+[   &
K  Z'RT[RT]5
Z <
x -"
y 
:ut
K  Z'RT[RT]Z 
 yr5v O yr.
.#Iw O yr.x -"
y 
:ut
K  Z'RT[RT]Z 
&'))(%+* ( 3 *Q	 & % (: URT[YKPX _#U"br]#Xf#KP[Y[RZ.f
K  Z'RT[RT]B
Z 

&'))(%+* U,	6	 & % (: S0_0XR_0d'UTK3br]#Xf#KP[Y[RZ6f
K Z'RT[RT]Z 
&   

@R[%IWK "N.RS;_#UTKZ'OQK
K  Z'RT[RT]Z
& $ 

S=_0XYIWK "N.RTS0_#UTKZ.OQK
K  Z'RT[RT]Z
RZ "N6KZ.OQK_0d'RUoRT[V
K  Z'RT[RT]Z P
XKUTKPS0_#Z.OQK?[Y]_MN6Gd FYKOQ[^e_0[Y[YKPX
K  Z'RT[RT]Z 
MY[YXRoOQ[,XKUTKPS0_#Z.OQK?[Y]_eMN.Gd F%KOQ[^_0[Y[YKPX
K  Z'RT[RT]Z &

Q*\^]



~33

]$ì D Bî 3ê



¹sº£~$»wº

~w¶Ýw¿$¾½



^eRTX`(jT`Y

OQpUTX

#_ RT[aB`Yij?;0## j _0X[RT[RT]Z*Id'_#MKc U]#fROP_#U3XK_#MY]Z.RoZ6f6j p%Z ,w[!^ uut0yrz{0 ![
vr~6u
	iuP0uPz'vr~  z'vuPw z"vy5!0zi0  !0zWuQwuQzu !#z (wy1z Py -"TuQ![ }z!0|,ut{uuR-"wuuQz'vIvy5!0z0zit
4u;M!0z.yrz{ J   IK	`"W.W j  # 5 <#*j
A(RTKPXK#` }jT` ?(Ro^e_0[Y[Rm` }jT` ?(U_0X#K#`4
j jT`4.N FRT[_*
` jT.
`  BaNB`2j}[## j V*^d/]URO^]*c6KU
O a6KO*RZ6f3N.MRoZ6f   W.X]*OQKc.N6XKM9RZ.MY[YK_#c]#=b A  Mjp%Z ,[w !^ uut0yrz{0Y ![ 2u yT{#z  /6	v !0xe#v5y !#z
 !#zWPuPwYuPz  Tu J    K	j
A:]#W.W'_#Z._*` Ej AjT`  *RTW"MYKPX` j'[ #0 jBa6KOQ]^eW'UTK 6RT[V}]#b  Z'RT[YK(brN.Z'OQ[RT]Z.MPj6p%ZS0_#Z @ KPKNq+KZB` 6j
+cBj
 ` 0ziQt P3!W!  !  ~*,u !0wYuv5y  0  !0.
x -/6vuQw 	ymuPz  uP` S]UI,j }`iO a._0W j  <6ji+UMYKPS*RTKP
X 6OPRTKZ.OQK
+N6d'URoMa6KPXM3: 44]#X[a* 4]UoU_#Z.c" ` ^eMY[YKPXc'_#^hj
A:]N6[RURKPX` ?3j\[ # < je]	q:_0Xc _UT]#fRO2br]#X "N._#UoRT[_0[RTS#Kc6KOPRMR]Z [a6KP]#XV#j&pZ ,[w !Wuut0y1z{0L
 ![evr~6u
P!D/*wvr~  z'vuQwz"#v0y !0z"#  !0Wz uQwuQz u !0z vr~*u ,w yrz Py -"u ! }z !#|,Tut{u Ru -iwYuQPuQz"vI#v5y !#z 0zit
4u;M !0z.yrz{ J    
DK	`"W.W =
j D 5 j
?(a6]#W'X_*
` ijT=`  8_0XRT*aB` Ej[ ## 1j ZhRZ.OQ]Z.MRMY[YKZ.OQV[Y]UTKPX_#Z[4^]*c6KUBbr]#Xd/KURTKPb XKPW'XKMYKZ[_0[RT]Z
_#Z'cd/KURKPbiXKPSRMRT]ZBj p%
Z (w !W u ut0yrz{0 ! 3vr~6

u 	.y 2vu uQz'vr~  z'vuPw z"v5y !0zi0 !0y1z"v  !0Wz uQwuQz u !#z
 wvy 
1Pym0  z"vuQr
yT{uPz  %u J       K	`'W'W j   5  j
3_0Xq4RO a6K#` }j[ # # j  U]#fROP_#UBZ6]#[RT]Z]#b8OQ]Z.c.RT[RT]Z'_#UiRoZ.c6KPW/KZ.c6KZ.OQK CW.X]#W/KPX[RTKM(_#Z.ch_0W'W'UROP_;
[R]Z.MPj  wQvy 
 Pym0  z'vuP1y {uQz uQ`  /[  5  ` <Q 5 j
3_0Xq4RO a6K#` }j[ #  1
j ]c6KUTId'_#MYKchc.R_0fZ.]MRM,N.MRoZ6f&M[YXN.OQ[N6XKchMVMY[YK^ c.KMOQXRTW.[R]Z.MPj G!D/*wz"0
!   wQvy 
1y#  z'vuQry {uQz 
u 4uPu0w Q~` #` & 5 j
3_0Xq4RO a6K#*
` }j:[ ## j ?:]^eW'RURZ.f*Z6]qUTKc6f#KRZ[Y]c6KOQ]^eWi]M_0d'UTKZ6KPf_0[R]ZZ6]#X^_#Ub1]#X ^hjp%Z
,[w !^ uut0yrz{0 ![&vr~*u 	.y 2vu uQz'vr
~  z'vuQwz"#v0y !0z"0	 !0yrz'v  !0Wz uQwuQz u !0z  wvy 
1y0  z'vuQry {uQz u
J       K	`'W.W j  <)5 #j
3_0Xq4RO a6K#` }jT1
`  _0,X "N.RMP` j[ ## j  W/KPXMYW/KOQ[RTS#Kh]Z Z6]	q4UTKc6f#KOQ]^eW'RU_0[RT]Z j p%Z ,[w !DO
uut0y1z{0L
 ![vr~*u 	iuQ#uQz'vu uQz'vr~  z'vuPw zi#v5y !#z"0 G!0yrz'v  !0Wz uQwuQz +
u !0z  wQvy 
1y#  z'vuQry {uQz u
J       K	`'W.W j ^D 5 &j
3_S*RMP` jT`  \N6[Z'_#^h` ji[  0 *
j  OQ]^W'N6[RZ.f?W.X]*OQKc.N6XK,br]#1X "N._#Z[R  OP_0[RT]Z[a.KP]#XV#	j G!D/*wz"0
! vr~*u   L` P` 0  5 GWj
KOa[YKPX` EjTD` 6E4RoMaB`Ppj[ # < j RXKOQ[RT]Z._#UXKMY]UN6[R]ZBP[a6K+c'_S*RM%IW'N6[Z'_#^ W.X]*OQKc.N6XK#`PXKPSRoMRT[YKcBj
p%Z ,[w !^ uut0yrz{0V
 ![vr~*?u P !D/*wQvr~  z'vuPw z"v5y !0zi0  !0Wz uQwuQz u !0zvr~*u (wy1z y -iTuQ ![ }z !0|,Tut{u
4Ru -"wuuQz'vI#v0y !0z 0z"t u0 !0z.yrz{ J   
DK;`'W.W 
j   <)5  <Qj
c6KU S=_#Um` }j:[ ## 
j  Z6KPq ^KP[a6]*cbr]#X2OQ]Z.MYWK "N6KZ.OQK  Z.c.RZ.f_#Z'c OQ]^W"RU_0[RT]ZRoZXKMY[YX ROQ[YKc
Uo_#Z6fN._0f#K#j#p%Z (w !W u ut0yrz{# ![:vr~*u 	.y 2vu uQz'vr3
~ N#v0y !0z"#  !0^z PuPwYuPz  u !#z  wvy 
1y0  z'vuQry {uQz u
J       K	`.W.Wj # 5  <6` X U_#Z.c6] @ j
]a6KPX[V#
` jT` @N60_#MYgPKPq4ROQg#`iJsjT`  _#c._#UoRZ.MY0_; A(N6f*_ FQ`ij8[ #  ja.K 7 _#Z.cXKU_0[RTS*RTgRZ6f
O a._#Z6f#Kbr]#Xe_#OQ[RT]Z N.W/c'_0[YK#jpZ ,[w !^ uut0yrz{0 ![hvr~*u 	.y 2vr~  z'vuQwz"#v0y !0z"#  !0Wz uQwuQz B
u !#z
,w yr
z y -"u ! }z !0|,ut{u u -"wYuQPuPz'vI#v0y !0z 0z"
t 4u;M !0z.yrz{ J  M K	`'W'W j  5 #j
]a6KPX[V#1
` jT` @N.;_#MYgPKPqROQg#`J jT`  g_#U_#MP` }j4; 0#  j ?(]^W'N6[RZ.fMY[YX]Z6f#KMY[Z6KOQKMM_0XV _#Z.c
q:K_0#KMY[,MN6OPRTKZ[:OQ]Z.c.RT[R]Z.M]#b  XM[%I]#Xc6KPX\br]#X^&N.U_#MPj/p%Z ,[w !Wuut0y1z{0 ![3vr~*u 	iuP0uQz"vuuQz"vr~
 z"vuQwz"#v0y !0z"0
 G!#y1z'v  !0Wz uQwuQz  u !0z  wQvy 
1Pym0  z'vuP1y {uQz Lu J       K;`.W.W j  <Q 5 WG0j

Q Q)(

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

._0XfRKPX`6}jT` @_#Z6f6` 6jT`  _0X,"N'RMP` j?;0## j \X]#W/]MRT[RT]Z._#U4UT]#fRO_#Z'c ]Z6KQMY[_0f#KLc6KOPRoMRT]Z
^_0RZ.f6j p%Z (w !Wuut#y1z{# ![vr~*u 	iuQ#uQz'vr~  z'vuQwz"#vy0!0z"#  !0zWuQwuQz  uX!0z ,w yrzy -"u ![
}z !0|,Tut{u uR-"wuuQz'vIvy5!0z 0z"tu;!0z'y1z{ J  IK;`'W.W j <<Q 5 <Qj
._0X	R Z. _#Mec6KU ?(KPXX]6` @=jT`  4KPXgRf6` j[# j A:KURTKPbOa._#Z.f#K_#Z.c c6KPW/KZ.c.KZ.OQK#j pZ ,w[!^ uutDO
yrz{#T
 ![vr~6u 	'y 2vr~  !0^z PuPwYuPz  '
u !0z ~*3u !0wuPv0y #  	 -6,u vrB
 ![ u;!0z'y1z{  P3!D/6v}z !0|,Tut{u
J      I K;`'W.W j  < +5 &G0j

KUTbr]Z.cB` jT`  @RbrMO a.RT[Yg#
` S}j[ #   j E4KPW.XKMYKZ[RZ6f_#OQ[RT]Z _#Z.c Oa._#Z6f#KdVUT]#fROW.X]#f#X _#^eMPj
!D/*wz"0 !   !{5y  ,[w !{#wY0x2x&yrz{` `  
 5j

3a.Roc.RZ.Rm` ?jT
` :
?RN.Z.O a.RTfUR_*`/:j+; 0#  T
j @ ]*OP_#U=^]*c6KUMYK^e_#Z[ROPMP`]#X}OQ]Z[YK [N._#U\XK_#MY]Z.RoZ6f !
U]OP_#UR[
V OQ]^W'_0[RTd"RURT[V#j  wvy 
1Pym0  z"vuQr
yT{uPz  uP`   P` G 5 #j

]Uc.d'U_0[Y[P1
` Ej3[  # j  !{#0y Q ![ 9yrxuL0z"t  !0.
x -/6vI#v0y !0z.` S]UIj ]#
b  	    3u 5v /wu N !#vuQ j
?(KZ[YKPXb1]#X[a.K [N.c6V]#b @9_#Z6fN._0f#K&_#Z.cpZ.b1]#X^_0[RT]ZB
` [_#Z6br]#XcB` ? j

XKRoZ6KPX
` EjT`  
KZ.KMYKPXKP[aB` j Ej([     jLJ a._0[ MZ6KPq )_MYK^e_#Z[ROc6K  Z.R[RT]Z]#b4Z.]S#KUT[V#j
p%Z ,[w !Wuut0y1z{0N
 ! }vr~*u,y {#~vr~  z'vuQwz"#v0y !0z"# !0yrz'v  !0Wz uQwuQz N
u !0z  wQvy 
1y#  z'vuQry {uQz u
J       K	`'W.W j <Q0"5 <Q <6j

XKRoZ6KPX` EjT`  *N.d.X_#^e_#Z.Ro_#ZB` }j8[ #  j =X]*OQKPKc.RZ.fM,]#b[a6K  p,b_#UUBMYV*^W/]MRN.^ ]ZXKUTKQ
S0_#Z.OQK#jTj:KO a.Z.ROP_#U E4KPW/]#X[  <0 ,`   4p =XKMMPj
KPfZ6KPX` ij[  # j W/KOPR  OP_0[R]Z_#Z.cR^W'UTK^eKZ[_0[RT]Z]#bW.X]#f#X_#^M4br]#XN.W/c'_0[RZ6fRZ'OQ]^W'UTKP[YK
RoZ6b1]#X ^e_0[RT]Zec._0[_0d"_#MYKMPj/pZ (w !W u ut0yrz{0 ![vr~*u 	.y 2vr~    	     	    	    
	=4;.x -G!0 y /x !0z ,w yrz Py -"u ![ }vIQ P;u 	4;vuPx& J  	   [K;`.W.W j  <  5 Wj
KPXgRTf6` }ji[ #  j4a6K 7  XKPSRoMRT[YKcBj"p
Z (w !W u ut0yrz{0V
 ![vr~6/u P\y Qvr
~  z'vuQwz"#v0y !0z"#  !#Wz PuPwYuPz  u
!#z vr~6
u (wy1z y -iTuQ ![}z !0|,ut{u u -"wuPuPz'vI#v0y !0z 0zi
t u;M !0z.yrz{ J   I K	`"W.W j <"5 0*j
KPXgRTf6` jT` @9_#Z6f6` 6jT` _0,X "N.RM` jT`  9]Uo_#OPMYKP"`B?j=; 0#  j WBc._0[YKMP`B_#OQ[RT]Z.M`/_#Z'cW'Uo_#Z.Z.RZ6f6j
p%Z (w !W u ut0yrz{#%
 ![vr~*u 	/uQ0uPz'vuuPz'vr
~  z"vuQwz"#v0y !0z"0 !0yrz'v  !0^z PuPwYuPz  L
u !0z  wvy 
1y0  z'vuP O
yT{uQz  L
u J      K	`.W.Wj  5 & <6j
KPXgRTf6` }jT`  E4R  ` j"[ #  j WBc._0[YK]#W/KPX_0[RT]Z.WM C_XKPS*RTKPqjipZ (w !W u ut0yrz{0 ![vr~*u ~yrwvu uQz'vr~
 /*[w !I-.u0z  !#Wz PuPwYuPz  N
u !#z  wvy 
1y0  z"vuQr
yT{uPz  L
u J      M K	`.W.Wj   5 ^j
KPXgRTf6` }jT*`  E4R  ` j[ ## j \X]#W/]MRT[RT]Z'_#U0diKUoRTKPbd'_#MK\N6WBc._0[YK=_#Z.c}^eRZ.R^_#U;O a._#Z6f#K#j  wvy 
1y0
 z"vuQr
yT{uPz  uP`  [ ` PQ +5   j
p%Z6]N6K#` j/[ #  j @9RZ6K_0X\XKMY]UN6[RT]ZRZOQ]Z.MYWK "N6KZ.OQK$5  Z'c.RZ6f6j  wQvy 
1Pym0  z'vuQr
yT{uPz  uP` ;  5   `
   5    j
_#N6[Yg#` }jT
` ?K_0XZ'MP` jT1`  *KU^e_#ZB` Aj4[ #   j EK_#MY]Z'RZ6f q4RT[a Oa'_0X_#OQ[YKPXRMY[RoOh^]c.KUMPjp%Z
,[w !^ uut0yrz{0V
 ![vr~*u,TuP0uPz'vr
~ Nv5y !0zi0  !0^z PuPwYuPz  V
u !#z  wvy 
1y0  z'vuQr
yT{uPz  u J       MK	`
W'W j  <)5  j
_#N6[Yg#`F}jT` ?K_0X Z.MP` jT`  KU^e_#ZB` Aj[ #  j ]#XZ _0W.W.XW] 6R^e_0[RT]Z.M]#b}K^W'RTX ROP_#U3c._0[_*j
 wvy 
1Pym0  z"vuQr
yT{uPz  uP`  
:[  ` &# 5  <Qj
_#N6[Yg#` }jT7
` (O UoUTKMY[YKPX` &jT1`  KUo^e_#ZB` Aj4[ #  j \Z'OQ]c.RoZ6fW"U_#Z.M2RZ W.X]#W/]MR[RT]Z._#U:UT]#fRO0j
p%Z (w !W u ut0yrz{# ! &vr~*
u P\y Qvr
~  z"vuQwz"#v0y !0z"0  !0^z PuPwYuPz  %
u !0z vr~6u (wyrz Py -"u ![}z !0|,Tut{u
4Ru -"wuuQz'vI#v0y !0z 0z"t u0 !0z.yrz{ J   I K;`'W.W j   <)5   <6j

QQ



~33



¹sº£~$»wº

~w¶Ýw¿$¾½

c6]ZB`EjT` E]#[a ` &j[# j EK_#M]Z.RZ6fq4RT[a^]c.KUMPj  wvy 
1Pym0  z'vuQr
yT{uPz uP`  i[ 5  `
&+5 G  j
?]a.Uo_#MP` 6jT` ]#X_#UI` ijT`C_0KZ.Z.RI`=Ej9[## j \X]#W/]MRT[RT]Z'_#UBRZ6br]#X^e_0[RT]ZhMYV*MY[YK^eMj !D/*w z"# ![
 !{#0y e0zit  !#xY- /*vIvy5!0z'` 0 ` G 5 G0j
@_0#K^eKPV#KPX` 
&j4[ #  j  UT]#fROP_#U,_#OPOQ]N'Z[]#b4XKUTKPS0_#Z.OQK#j p%Z (w !W u ut0yrz{0 ! vr~*uP!D/*wvu uQz'vr~
 z"vuQwz"#v0y !0z"0
 G!#y1z'v  !0Wz uQwuQz  u !0z  wQvy 
1Pym0  z'vuP1y {uQz Lu J       K;`.W.W j   5 #j
@_0#K^eKPV#KPX` 
2j[ # # j EKUKPS;_#Z.OQKb1X]^ _#Z KPW'RoMY[YK^eROW/KPXMYW/KOQ[RTS#K#j  wQvy 
1y#  z'vuQry {uQz uQ`
 i[  5  `   +5 &j
@_#Z.f6` .jT` @RdiKPX _0[Y]#XK#` jT`  _0,X "N'RMP` j8; 0#  j ?(]Z.c.RT[RT]Z'_#U RZ.c6KPW/KZ.c.KZ.OQKRZW'X]#W/]MRT[RT]Z._#U
U]#fRO0j  wQvy 
 Pym0  z'vuQry {uQz uQ`  
 9[  5  ` 0 5 &G0j
@_#Z.f6` 6jT`  _0,X "N'RMP` j\[ # 0_ j ?:]^W'UK *RT[VXKMN'UT[M3b1]#XRoZ.c6KPW/KZ.c6KZ.OQK&_#Z.cLc6K  Z'_0d'RURT[VRZ
W'X]#W/]MRT[RT]Z._#UUT]#fRO0j'p
Z (w !Wuut#y1z{# ![4vr~6u 	'y 2vr~  z"vuQwz"#v0y !0z"0  !0Wz uQwuQz 
u !0z (wy1z y -iTuQ
! }z !0|,ut{u u -"wYuQPuPz'vI#v0y !0z 0z"
t 4u;M !0z.yrz{ J  M K	`'W'W j   5  j
@_#Z.f6

` 6jT` 8_0,X "N'RMP` j:[ # ;di jh,q:]Z.]#[RT]Z.M?]#bc6KPW/KZ.c.KZ.OQKeRZLW.X]#Wi]MRT[RT]Z._#U8UT]#fRDO C9OQ]Z*
[YX]UU_0d'RUoRT[V_#Z'cc6K  Z'_0d'RURT[V#j2pZ ,[w !^ uut0yrz{0T
 ![vr~*
u P\y vu uQz'vr_
~ N}#v5y !#z"0  !#Wz PuPwYuPz  +
u !#z
 wvy 
1Pym0  z"vuQr
yT{uPz  %u J        K;`.W.W j  5   j
@_#Z.f6` 6jT`  _0,X "N.RMP` j"; 0#  j EKMY]USRZ.f3RoZ.OQ]Z.MRM[YKZ.OPRTKMdV&S0_0XR_0d'UTK(br]#Xf#KP[Y[RZ6f6j"pZ ,[w !^ uuDt O
yrz{# ![2vr~*u (yT{0~vr~  z'vuQwz"#v0y !0z"#  !0Wz uQwuQz u !#z (wyrz Py -"uN
 !  }z !0|,Tut{u u -"wYuQPuPz'vID O
v0y !0z0z"
t 4u;M !0z.yrz{ J WK	`'W'W j    5 0*j
@_#Z.f6` 6jT` _0IX "N.RoMPQ` jT`  J RoUUR_#^eM` j  }j/; 0#  j 4WBc._0[RZ.f?KPW'RMY[YK^eRoOMY[_0[YKMPj p%Z ,[w !^ uut0yrz{0
! 2vr~6
u P!D/*wvu uQz'vr~  /vwY0y#z !0yrz'v  !0Wz uQwuQz  L
u !0z  wvy 
1Pym0  z'vuP1y {uQz u J     K;`BW.W j
# +5   j
@ KPSV#` jT`iR#KMP` EjT`  *_0fRTSi` 2j[ # # j W/KPKc.RZ6feN6WRZ6brKPXKZ.OQKMN.MRZ6fXKUTKPS;_#Z'OQKXK_#MY]Z'RZ6f C
sbr]#X^e_#URoM^ _#Z.c_#UTf#]#XR[a.^eMPj  wQvy 
1Pym0  z'vuP1y {uQ
z uQ`  i[   `   5   j
@RoZB`6+j; 0## j ZhMY[YX]Z6f#KMY[4Z6KOQKMM_0XV_#Z.chq:K_0#KMY[MN.OPRTKZ[(OQ]Z'c.RT[RT]Z.Mjp%
Z (w !Wuut#y1z{#N
 ![
vr~6

u 	iuP0uPz'vr~  z'vuPw z"v5y !0zi0  !0Wz uQwuQz u !#z (wy1z Py -"TuQ
 ![ }z !0|,ut{
u Ru -"wuuQz'vIv5y !0z0zit
4u;M !0z.yrz{ J   IK	`"W.W 
j &+5 ^Dj
@RoZB` :jT`  E4KRT[YKPX` Ej:[ # < j6]#Xf#KP[2R[ Tjp%Z (w !Wuut#y1z{#+
 ![vr~*u    P01 	40Yx -!; y /*x !#z
4uQuQ;#
z  uP`'W.W j W <)5 W#j
_0,X "N'RMP` j?[ # < j ]MMRd'UTK^]*c6KUM_0W.W.X]_#O a SR_RZ.c6KPW/KZ.c6KZ'OQV#j p%Z ,[w !^ uut0yrz{0 ![vr~6u
,TuP0uPz'vr~  /*[w ! -6u0
z  !0Wz uQwuQz N
u !0z  wvy 
1y0  z'vuQr
yT{uPz  %
u J      
K	`.W.Wj   5  <*j
_0,X "N'RMP` j+; 0## j ?:]Z.MYWK "N6KZ.OQK  Z.c.RZ6f_#UTf#]#XR[a.^eMPjp%Z }0z"Qt P,!W! '!0z 25u u0 	y PQu 4u;M !0z O
yrz{#z"
t z  uPwvI#y1z'5v 4 0z"{uQxuQz'v 	=4	QvuQx& 1 !0 /*xu    { !0wyrvr~x& !0
w z  uPwvI0yrz 0zit
20u Pu; 	y PQu u0 !0z.yrz{`"Oa'_0W j `.W.Wj < 5  <Q,j UoNq:KPX OP_#c.K^eRO +N6d'URMa6KPXMPj
_0,X "N'RMP
` jT` :]#,X "N.KP[P%` 4}j:; 0## j KOQ]^eWi]MRZ6fW.X]#Wi]MRT[RT]Z._#U8*Z6]qUTKc6f#Kd"_#MYKM[a.X]N6fa
[Y]#W"ROPM&rK *[YKZ.c6Kc_0d'MY[YX_#OQ[  j4pZ ,[w !^ uut0yrz{0 ![}vr~6u&xuuPvyrz{ !#
z  #wvym0 ;z !0|,ut{ue0zit
/*z uQwQvI0yrz'5v 4 yrz"tRu -.uQz"tuPz  u 1 I!0z"t0yv5y !#z.y1z{ 1+yrWz uQwuQz u j
>O ?(_0X[aV#` .j9[   
j W.W'URoOP_0[RT]Z.M(]#b=OPRTXOPN'^eMOQXRTW'[RT]Z[Y]br]#X^e_#URgRZ6fOQ]^e^]Z*MKZ.MYK*Z6]	q4U 
Kc.f#K#j  wQvy 
 Pym0  z'vuQry {uQz uQ`  ` # 5 &j
a._0X

QQ_

¶»f»½.¾»w~3}¡3¼3ººf$¼3ºwÞsº

OQpUTX

_#RT[aB` ijT`  ^eRX`:4j;0# j a6KP]#XK^ W.X]	SRoZ6f q4RT[a MY[YXN.OQ[N.XKc [a6KP]#XRTKMPj pZ ,w[!DO
uut0y1z{0L![vr~*u 	iuQ#uQz'vu uQz'vr~  z'vuPw zi#vy5!#z"0G!0yrz'v  !0zWuQwuQzu+!0z  wQvy 
1y#  z'vuQry {uQzu
J       K	`'W.W j  <)5   0j
8_0W'_#c.R^RT[YXRT]NB` ?j}j9[ # < j  !0.
x -/6vI#v5y !#z"0  !0.
x -"3u 2#yv540j7c.c.RM]Z*IJLKMUTKPV#j
8_0XRT*aB1
` Ej[ #  j  uQyI5u   N
1 P uQym0u wuQy1 0y !0z210z"t  -"yrvmvyrz{ T0z{ /6{u`(W.W 7j  5 j@]#fRO0`
@9_#Z6fN._0f#K&_#Z.c ?:]^W'N.[_0[RT]ZBj ? G@1
p +N6d'UROP_0[R]Z.MPj
8_0Xi`*j .jT` 
KUc6KPX` }j S}j [ #  j 8_0X[RT[R]Z.RZ6f&^KP[a6]*c.M(b1]#X,M_0[RoM  _0d'RUoRT[V[YKMY[RoZ6f2]ZhU_0Xf#K
br]#X^&N.U_#MPjLp%Z (w !W u ut0yrz{0 ! vr~*u ~yrwvu uQz'vr~  z'vuQwz"#v0y !0z"#  !0Wz uQwuQz B
u !#z  /6	v !0xe#vut
2uDt /v0y !0z J      I K	`.W'W j  <  G5  j
=XgPV^&N.MRZ'MYRI`/9
j ?j+[  # j Z_#UTf#]#XR[a.^ [Y]OQ]^eW'N6[YKOPRTX OPN.^eMOQXRW.[RT]ZBj  wQvy 
 Pym0  z'vuP1y O
{uQz uQ`  #` < G5   j
EKR[YKPX` Ej[  # j  [a6KP]#XV]#bc.Ro_0fZ6]MRM}b1X]^  X MY[}W'XRZ.OPRTW"UTKMPj  wQvy 
 Pym0  z"vuQr
yT{uPz  uP`  `
+5 j
E4RoZ[_#Z6KZ ` 6j*; 0#  j 8_0X[R_#UR^W'URoOPRT[BN.Z6br]Uc.RZ6f,RZ[a6K _SRoM% \N6[Z'_#^ W.X]OQKc.N.XK=br]#X "N._#Z[R  Kc
d/]]UTK_#Zebr]#X^&N.U_0K#jipZ (w !W u ut0yrz{0 ![vr~*
u  P   B!0w G~ !I-L#v     #`W.W j  <)5  j
EV_#Z /
` /j &j,[ #G  @
j KPbr_#N.U[M&_#Z'c XKPSRMRT]Z RoZ MY[YX N.OQ[N6XKc [a6KP]#XRTKMjLpZ (w !W u ut0yrz{# ! vr~6u
	'y 2vr~     	40.x -G!;y /*x !0z  !{5y &yrz  !0.x -/6vuQw 	PyIuQz %u J    	   K	`'W'W j   5    j
EV_#Z 1
` 7j &j[ #  j (wYtuPwYuB
t -"wYuQPuPz'vI#v0y !0z6 ![vr~*,u !0w yIuj \aBj &j=[a.KMRMP`=p%^W/KPXR_#U ?(]UUTKPf#K#`
@]Z.c6]ZBj
*_#Z.c.KPq:_#UUI`*4j[ #  +
j Pu5v /wu20z"
t P\ /'uQz"vr j br]#X Z'RTS#KPXMRT[L
V \XKMMPj
*RTKPf#KUI` j=[  # j u -"
w u PuPz'vI#v0y !0z uPv /6vyr
y1Q#v0y !0z tu ,!#z.z"0y1P0z  uQuQz  0 M/* -"[w ! -G!; yv0y !0z.ziuP
j
4a K MYKc  \ [_0[P` Z.RTS#KPXMR[ K c0 R 	5 _0XMYKRUU
K jRZb1XKZ.Oa" j
*R^e]ZB` @=jTY
`  c6KU S=_#Um` j&; 0#  j =OPRTKZ[OQ]Z.MYWK "N6KZ.OQK  Z'c.RZ6f6j pZ ,[w !^ uut0yrz{0 ![vr~6u
	/uQ0uPz'vuuPz'vr~  z'vuQwz"#v0y !0z"0 G!#y1z'v  !0Wz uQwuQz Nu !0z  wvy 
1y0  z'vuP1yT{uQz  %u J       K;`6W.W j
 # 5  j
*N6d'X_#^e_#Z.R_#Z ` }jT` 
XKRoZ6KPX` EjT`  9K_0X Um

` .j:[ # # 
j 4X[R  OPR_#U=p%Z[YKUURTf#KZ.OQK #]N6XZ'_#0U C W/KOPR_#U
p%MMN.K?]Z EKUTKPS0_#Z.OQK#`/ h[   ` # j
_#ZB` ijT` K_0XUm` 6j[ # < 
j W/KOPR  OP_0[RT]Z_#Z'cKPS0_#UN._0[RT]Z]#bW.XKPbrKPXKZ.OQKMbr]#XW'U_#Z.Z.RoZ6f&N'Z.c6KPX
N'Z.OQKPX[_#RZ[V#j(p%Z (w !W u ut0yrz{# ![}vr~*
u P !/wQvr~  z'vuPw zi#v5y !#z"0  !0Wz uQwuQz u !0zvr~*u (wy1z y -iTuQ
! }z !0|,ut{u u -"wYuQPuPz'vI#v0y !0z 0z"
t 4u;M !0z.yrz{ J  
K	j
J RUUR_#^MPW` j;:jTD` A:RKPXK#` }jT` ?(U_0X#K#`;j jT`  
3N.W.[_*` }j6; 0## j ?:]^d"RZ.RZ6f KOPRMRT]
Z 3R_0f#X _#^eM
_#Z'c   \X]*OQKc.N6XKM}b1]#X\OPRTKZ[ V*^}di]UoRO ]c6KU ?(a.KO*RZ6f6jpZ (w !Wuut#y1z{#T
 ! vr~6u
9|+uP Qvr~  z'vuPw z"v5y !0zi0  !#Wz PuPwYuPz  N
u !#z  !#Yx - /*vuPw  ymtu	
t "uQwy 
1 #v0y !06
z J    K	j
J RZ.MUTKP[Y[P` j\[ #0 j -*t#vy1z{  !{#0y # &#vIQ P0Puj ?(_#^d'XRc6f#K2X _#OQ[MRZ a6KP]#XKP[RoOP_#U ?:]^2
W"N6[YKPX *OPRTKZ'OQK#j ?(_#^d'XRc6f#K Z.RTS#KPXMRT[L
V =XKMMj

Q Q*\

Journal of Artificial Intelligence Research 18 (2003) 351-389

Submitted 10/02; published 5/03

A New General Method to Generate Random Modal Formulae for
Testing Decision Procedures
Peter F. Patel-Schneider

PFPS @ RESEARCH . BELL - LABS . COM

Bell Labs Research
600 Mountain Ave. Murray Hill, NJ 07974, USA

Roberto Sebastiani

RSEBA @ DIT. UNITN . IT

Dip. di Informatica e Telecomunicazioni
Università di Trento
via Sommarive 14, I-38050, Trento, Italy

Abstract
The recent emergence of heavily-optimized modal decision procedures has highlighted the key
role of empirical testing in this domain. Unfortunately, the introduction of extensive empirical tests
for modal logics is recent, and so far none of the proposed test generators is very satisfactory. To
cope with this fact, we present a new random generation method that provides benefits over previous methods for generating empirical tests. It fixes and much generalizes one of the best-known
methods, the random CNF  test, allowing for generating a much wider variety of problems, covering in principle the whole input space. Our new method produces much more suitable test sets for
the current generation of modal decision procedures. We analyze the features of the new method
by means of an extensive collection of empirical tests.

1. Motivation and Goals
Heavily-optimized systems for determining satisfiability of formulae in propositional modal logics are now available. These systems, including DLP (Patel-Schneider, 1998), FACT (Horrocks,
1998), *SAT (Giunchiglia, Giunchiglia, & Tacchella, 2002), MSPASS (Hustadt, Schmidt, & Weidenbach, 1999), and RACER (Haarslev & Möller, 2001), have more optimizations and are much
faster than the previous generation of modal decision procedures, such as LEAN K (Beckert & Goré,

1997), L OGICS W ORKBENCH (Heuerding, Jäger, Schwendimann, & Seyfreid, 1995), KE (Pitt &
Cunningham, 1996) and K SAT (Giunchiglia & Sebastiani, 2000). 1
As with most theorem proving problems, neither computational complexity nor asymptotic algorithmic complexity is very useful in determining the effectiveness of optimizations, so that their
effectiveness has to be determined by empirical testing (Horrocks, Patel-Schneider, & Sebastiani,
2000). Empirical testing directly gives resource consumption in terms of compute time and memory
use; it factors in all the pieces of the system, not just the basic algorithm itself. Empirical testing
can be used not only to compare different systems, but also to tune a system with parameters that
can be used to modify its performance; moreover, it can be used to show what sort of inputs the
system handles well, and what sort of inputs the system handles poorly.
Unfortunately, the introduction of extensive empirical tests for modal logics is recent, and so
far none of the proposed test methodologies are very satisfactory. Some methods contain many



1. For a more complete list see Renate Schmidt’s Web page listing theorem provers for modal logics at
http://www.cs.man.ac.uk/˜schmidt/tools/.
c 2003 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

PATEL -S CHNEIDER & S EBASTIANI

formulae that are too easy for current heavily-optimized procedures. Some contain high rates of
trivial or insignificant tests. Some generate problems that are too artificial and/or are not a significant
sample of the input space. Finally, some methods generate formulae that are too big to be parsed
and/or handled.
For the reasons described above, we presented (Horrocks et al., 2000) an analytical survey of
the state-of-the art of empirical testing for modal decision procedures. Here instead we present a
new random generation method that provides benefits over previous methods for generating empirical tests, built on some preliminary work (Horrocks et al., 2000). Our new method fixes and much
generalizes the 3CNF  methodology for randomly generating clausal formulae in modal logics
(Giunchiglia & Sebastiani, 1996; Hustadt & Schmidt, 1999; Giunchiglia, Giunchiglia, Sebastiani,
& Tacchella, 2000) used in many previous empirical tests of modal decision procedures. It eliminates or drastically reduces the influence of a major flaw of the previous method, 2 and allows for
generating a much wider variety of problems.
In Section 2 we recall a list of desirable features for good test sets. In Section 3 we briefly
survey the state-of-the-art test methods. In Sections 4 and 5 we present and discuss the basic and
the advanced versions of our new test method respectively, and evaluate their features by presenting
a large amount of empirical results. In Section 6 we provide a theoretical result showing how
the advanced version of our method, in principle, can cover the whole input space. In Section 7
we discuss the features of our new method, and compare it wrt. the state-of-the-art methods. In
Section 8 we conclude and indicate possible future research directions.
A 5-page system description of our random generator has been presented at IJCAR’2001 (PatelSchneider & Sebastiani, 2001).

2. Desirable Features for Good Test Sets
The benefits of empirical testing depend on the characteristics of the inputs provided for the testing,
as empirical testing only provides data on these particular inputs. If the inputs are not typical or
suitable, then the results of the empirical testing will not be useful. This means that the inputs
for empirical testing must be carefully chosen. With Horrocks (Horrocks et al., 2000) we have
previously proposed and motivated the following key criteria for creating good test sets.
Representativeness: The ideal test set should represent a significant sample of the whole input
space. A good empirical test set should at least cover a large area of inputs.
Difficulty: A good empirical test set should provide a sufficient level of difficulty for the system(s)
being tested. (Some problems should be too hard even for state-of-the-art systems, so as to
be a good benchmark for forthcoming systems.)
Termination: To be of practical use, the tests should terminate and provide information within a
reasonable amount of time. If the inputs are too hard, then the system may not be able to
provide answers within the established time. This inability of the system is of interest, but
can make system comparison impossible or insignificant.
2. That is, a significant amount of inadvertently trivial problems are generated unless the parameter p is set to 0 (Horrocks et al., 2000). See Section 4.1 for a full discussion of this point.

352

A N EW G ENERAL M ETHOD

TO

G ENERATE R ANDOM M ODAL F ORMULAE

Scalability: The difficulty of problems should scale up, as comparing absolute performances may
be less significant than comparing how performances scale up with problems of increasing
difficulty.
Valid vs. not-valid balance: In a good test set, valid and not-valid problems should be more or
less equal both in number and in difficulty. Moreover, the maximum uncertainty regarding the
solution of the problems is desirable.
Reproducibility: A good test set should allow for easily reproducing the results.
The following criteria derive from or are significant sub-cases of the main criteria above.
Parameterization: Parameterized inputs with sufficient parameters and degrees of freedom allow
the inputs to range over a large portion of the input space.
Control: In particular, it is very useful to have parameters that control monotonically the key features of the input test set, like the average difficulty and the “valid vs. non-valid” rate.
Modal vs. propositional balance: Reasoning in modal logics involves alternating between two orthogonal search efforts: pure modal reasoning and pure propositional reasoning. A good test
set should be challenging from both viewpoints.
Data organization: The data should be summarizable —so as to make a comparison possible with
a limited effort— and plottable —so as to enable the qualitative behavior of the system(s) to
be highlighted.
Finally, particular care must be taken to avoid the following problems.
Redundancy: Empirical test sets must be carefully chosen so as not to include inadvertent redundancy. They should also be chosen so as not to include small sub-inputs that dictate the result
of the entire input.
Triviality: A good test set should be flawless, that is, it should not contain significant subsets of
inadvertent trivial problems.
Artificiality: A good empirical test set should correspond closely to inputs from applications.
Over-size: The single problems should not be too big w.r.t. their difficulty, so that the resources
required for parsing and data managing do not seriously influence total performance.
These criteria, which are described and motivated in detail by Horrocks et al. (2000), have been
proposed after a five-year debate on empirical testing in modal logics (Giunchiglia & Sebastiani,
1996; Heuerding & Schwendimann, 1996; Hustadt & Schmidt, 1999; Giunchiglia et al., 2000;
Horrocks & Patel-Schneider, 2002). (Notice that some of these criteria are identical or similar to
those suggested by Heuerding & Schwendimann, 1996.)
The above criteria are general, and in some cases they require some interpretation. First, some
of them have to be implicitly interpreted as “unless the user deliberately wants the contrary for some
reason”. For instance, it might be the case that one wants to deliberately generate easy problems,
e.g., to be sure that the tested procedure does not take too much time to solve them, or redundant
353

PATEL -S CHNEIDER & S EBASTIANI

problems, e.g., to test the effectiveness of some redundancy elimination technique, or satisfiable
problems only, e.g., to test incomplete procedures. To this extent, the key issue here is having a
reasonable form of control over these features, so that one can address not only general-purpose
criteria, but also specific desiderata.
Second, in some cases, there may be a tradeoff between two distinct criteria, so that it may
be necessary to choose only one of them, or to make a compromise. One example is given by
redundancy and artificiality: in some real-world problems large parts of the knowledge base are
irrelevant for the query, whose result is determined by a small subpart of the input; in this sense
eliminating such “redundancies” may make problems more “artificial”.
Particular attention must be paid to the problem of triviality, as it has claimed victims in many
areas of AI. In fact, flaws (i.e., inadvertent trivial problems) have been detected in random generators
for SAT (Mitchell, Selman, & Levesque, 1992), CSP (Achlioptas, Kirousis, Kranakis, Krizanc, Molloy, & Stamatiou, 1997; Gent, MacIntyre, Prosser, Smith, & Walsh, 2001), modal reasoning (Hustadt & Schmidt, 1999) and QBF (Gent & Walsh, 1999). Thus, the notion of “trivial” (and thus
“flawed”) deserves more comment.
In the work by Achlioptas et al. (1997) flawed problems are those solvable in linear time by
standard CSP procedures, due to the undesired presence of implicit unary constraints causing some
variable’s value to be inadmissible. A similar notion holds for SAT (Mitchell et al., 1992) and QBF
(Gent & Walsh, 1999). In the literature of modal reasoning, instead, the typical flawed problems
are those whose (un)satisfiability can be verified directly at propositional level, that is, without
investigating any modal successors; this kind of problems are typically solved in negligible time
w.r.t. other problems of similar size and depth (Hustadt & Schmidt, 1999; Giunchiglia et al., 2000;
Horrocks et al., 2000).3 Thus, with a little abuse of notation and when not otherwise specified, in
this paper we will call trivially (un)satisfiable the problems of this kind. 4

3. An Overview of the State-of-the-art
Previous empirical tests have mostly been generated by three methods: hand-generated formulae
(Heuerding & Schwendimann, 1996), randomly-generated clausal modal formulae (Giunchiglia &
Sebastiani, 1996; Hustadt & Schmidt, 1999; Giunchiglia et al., 2000), and randomly-generated
quantified boolean formulae that are then translated into modal formulae (Massacci, 1999).
We have already presented a detailed analysis of these three methods (Horrocks et al., 2000).
Here we present only a quick overview of the latter two methods, as we will refer to them in following sections.5
3.1 The 3CNF  Random Tests
In the 3CNF  test methodology (Giunchiglia & Sebastiani, 1996; Hustadt & Schmidt, 1999;
Giunchiglia et al., 2000), the performance of a system is evaluated on sets of randomly generated 3CNF  formulae. A CNF  formula is a conjunction of CNF  clauses, where each clause
3. Of course here by “modal” we implicitly assume the modal depth be strictly greater than zero, that is, we do not
consider purely propositional formulas.
4. Notice that we do not use the more suitable expression “propositionally (un)satisfiable” because the latter has been
used with a different meaning in the literature of modal reasoning (see, e.g., Giunchiglia & Sebastiani, 1996, 2000).
5. The first method (Heuerding & Schwendimann, 1996) is obsolete, as the formulae generated are too easy for current
state-of-the-art deciders (Horrocks et al., 2000).

354

A N EW G ENERAL M ETHOD

TO

G ENERATE R ANDOM M ODAL F ORMULAE

is a disjunction of either propositional or modal literals. A literal is either an atom or its negation.

Modal atoms are formulae of the form  , where  is a CNF  clause. A 3CNF  formula is a
CNF  formula where all clauses have exactly 3 literals.
3.1.1 T HE R ANDOM G ENERATOR
A 3CNF  formula is randomly generated according to five parameters: the (maximum) modal
depth  ; the number of clauses in the top-level conjunction  ; the number of propositional variables

; the number of distinct box symbols  ; and the probability  of an atom occurring in a clause at
depth 	 being purely propositional.
The random 3CNF  generator, in its final version (Giunchiglia et al., 2000), works as follows:
a 3CNF  formula of depth  is produced by randomly generating
depth  , and forming their conjunction;



a 3CNF  clause of depth  is produced by randomly generating three distinct, under commutativity of disjunction, 3CNF  atoms of depth  , negating each of them with probability
0.5, and forming their disjunction;











a propositional atom is produced by picking randomly an element of
uniform probability;

3CNF  clauses of



with

a 3CNF  atom of depth  is produced by generating with probability  a random
"! 
"!
, where
is picked
propositional atom, and with probability   a 3CNF  atom

"#

randomly in  
 and
is a randomly generated 3CNF  clause of depth $% .

Recently Horrocks and Patel-Schneider (2002) have proposed a variant of the 3CNF  random
#
generator of Giunchiglia et al. (2000). They added four extra parameters: &(' and & , representing
#
#",respectively the probability that a propositional and modal atom is negated, and ) +* and )
,
representing respectively the minimum and maximum number of modal literals in a clause, with
equal probability for each number in the range. For their experiments, they always set &.'0/1243
#
#",6and ) +* /5)
/57 . To this extent, 3CNF  formulas can be generated as in the generator of
#
# +*
#",6Giunchiglia et al. (2000) by setting & ' /8&
/9243 and )
/:)
/97 .
3.1.2 T EST M ETHOD & DATA A NALYSIS
The 3CNF  test method works as follows. A typical problem set is characterized by a fixed

,  ,  and  :  is varied in such a way as to empirically cover the “100% satisfiable—100%
unsatisfiable” transition. Then, for each tuple of the parameters’ values (data point from now on)
in a problem set, a certain number of 3CNF  formulae are randomly generated, and the resulting
formulae are given in input to the procedure under test, with a maximum time bound. Satisfiability
rates, median/percentile values of the CPU times, and median/percentile values of other parameters,
e.g., number of steps, memory, etc., are plotted against the number of clauses  or the ratio of

clauses to propositional variables <; .
3.2 The Random QBF Tests
In QBF-based benchmarks (such as part of the TANCS’99 benchmarks (Massacci, 1999)), system performances are evaluated on sets of random quantified boolean formulae, which are gener355

PATEL -S CHNEIDER & S EBASTIANI

ated according to the method described by Cadoli, Giovanardi, and Schaerf (1998) and Gent and
Walsh (1999) and then converted into modal logic by using a variant of the conversion by Halpern
and Moses (1992).
3.2.1 T HE R ANDOM G ENERATOR





Random QBF formulae are generated with alternation depth
and at most
variables at each
alternation. The matrix is a random propositional CNF formula with  clauses of length , with
some constraints on the number of universally and existentially quantified variables within each
clause. (This avoids the problem of generating flawed random QBF formulae highlighted by Gent
& Walsh, 1999.) For instance, a random QBF formula with /97 , /
looks like:

 
	
  


  
  	
  
  
(1)
Here  is a random CNF formula with parameters ,  and . We will denote with  and 
the total number of universally and existentially quantified variables respectively. Clearly, both 
and  are  !#" . Moreover, $ is the modal formula resulting from Halpern and Moses’ %
conversion, so both the depth and the number of propositional variables of $ are also &'()" .
 

 



  

 

   











3.2.2 T EST M ETHOD & DATA A NALYSIS
The test method, as it was used in the TANCS competition(s) (Massacci, 1999), works as follows.
The tests are performed on single data points. For each data point, a certain number of QBF
formulae are randomly generated, converted into modal logics and the resulting formulae are given
as input to the procedure being tested, with a maximum time bound. The number of tests which
have been solved within the time-limit and the geometrical mean time for successful solutions are
then reported. Data are rescaled to abstract away machine and run-dependent characteristics. This
results typically in a collection of tables presenting a data pair for each system under test, one data
point per row.

4. A New CNF  Generation Method: Basic Version
From our previous analysis (Horrocks et al., 2000) we have that none of the current methods are
completely satisfactory. To cope with this fact, we propose here what we believe is a much more satisfactory method for randomly generating modal formulae. The new method can be seen as an improved and much more general version of the random 3CNF  generation method by Giunchiglia
et al. (2000).
We present our new method by introducing incrementally its new features in two main steps. In
this section we introduce a basic version of the method, wherein






we provide a new interpretation for the parameter  (Section 4.1) that allows for varying 
without causing the flaws described in Horrocks et al. (2000); and
we extend the interpretation for the parameter  (Section 4.3), providing a more fine-grained
way for tuning the difficulty of the generated formulae.

In Section 5, we present the full, advanced version of the method, wherein
356

A N EW G ENERAL M ETHOD

TO

G ENERATE R ANDOM M ODAL F ORMULAE




we further extend the parameters  and  , allowing for shaping explicitly the probability
distribution of the propositional/modal rate and the clause length respectively (Section 5.1);
and



we allow  and  vary with the nesting depth of the subformulae (Section 5.2), allowing for
different distributions at different depths.

To investigate the properties of our CNF  generator we also present a series of experiments with
appropriate settings either to mimic previous generation methodologies or to produce improved or
new kinds of tests.
In all tests we have adopted the testing criteria of the 3CNF  method. For each test set, we
fixed all parameters except  , which was varied to span at least the satisfiability transition area.
(Because of the “Valid vs. non-valid balance” feature of Section 2, we consider the transition area


to be the interesting portion of the test set.) For almost all test sets we varied  from to   ,



, or   , resulting in integral values for  ;
ranging from  to   , 3  , or   . For each
3 
value of  we generated 100 formulae, a sufficient number to produce reasonably reliable data. A
time limit of 1000 seconds was imposed on each attempt to determine the satisfiability status of a
formula. As it is common practice, we set the number of boxes  to  throughout our testing. This
setting for  produces the hardest formulae (Giunchiglia & Sebastiani, 1996; Hustadt & Schmidt,
1999; Giunchiglia et al., 2000). We performed several test sets with similar parameters, often, but

not always, varying only .
We tested our formulae against two systems, DLP version 4.1 (Patel-Schneider, 1998) and
*SAT version 1.3 (Tacchella, 1999), two of the fastest modal decision procedures. They are available at http://www.bell-labs.com/usr/pfps/dlp and http://www.mrg.dist.unige.it/˜tac respectively.
All the code used to generate the tests is available at http://www.bell-labs.com/usr/pfps/dlp.
We plotted the results of our test groups (test sets with similar parameters) on six or four plots.
Two plots were devoted to the performance of DLP, one showing the median and one showing the

90th percentile time taken to solve the formulae at each value of  , plotted against <; . For those
test groups were we ran *SAT we also plotted the median and 90th percentile for *SAT.
We also plotted the fraction of the formulae that are determined to be satisfiable or unsatisfiable
by DLP within the time limit.6 To save space, satisfiability and unsatisfiability fractions are plotted
together on a single plot. Satisfiability fractions are higher on the left side of the plot while unsatisfiability fractions are higher on the right. This multiple plotting does obscure some of the details,
but the only information that we are interested in here is the general behavior of the fractions, which
is not obscured. In fact, the multiple plotting serves to highlight the crossover regions, where the
satisfiability and unsatisfiability fractions are roughly equal.
Finally, we plotted the fraction of the formulae where DLP finds a model or determines that
the formula is unsatisfiable without investigating any modal successors. We call these fractions
the trivial satisfiability and trivial unsatisfiability fractions. These last fractions are an estimate
of the number of formulae that are satisfiable in a Kripke structure with no successors —like, e.g.,
   — and that have no propositional valuations —like, e.g.,  6    — respec 
tively. For various reasons, discussed below, they are better indicators of triviality than the more








"







"

6. Notice that the two curves are symmetric with respect to 0.5 if and only if no test exceeds the time limit. E.g., if
at some point 40% of the tests are determined to be satisfiable by DLP, 10% are determined to be unsatisfiable and
     .
50% are not solved within the time limit, then the two curves are not symmetric at that point, as  	


357

PATEL -S CHNEIDER & S EBASTIANI

formal measures used in previous papers. Again, trivial satisfiability and unsatisfiability fractions
are plotted together on a single plot.
To reduce clutter on the plots, we used a line to show the results for each value of  we tested.
To distinguish between the various lines on a plot, we plotted every five or 10 data points with a
symbol, identified in the legend of the plot.
Running the tests presented in this paper required some months of CPU time. Because of this,
we ran our tests on a variety of machines. These machines range in speed from a 296MHz SPARC
Ultra 2 to a 400MHz SPARC Ultra 4 and had between 256MB and 512MB of main memory. No
machines were completely dedicated to our tests, but they were otherwise lightly loaded. Each test
set was run on machines with the same speed and memory. Direct comparison between different
groups of tests thus has to take into account the differences between the various test machines.
4.1 Reinterpreting the Parameter 
One problem with the previous methods for generating CNF  formulae is that the generated formulae can contain pieces that make the entire formula easy to solve. This mostly results from the
presence of strictly-propositional top-level clauses. With the small number of propositional variables in most tests (required to produce reasonable difficulty levels for current systems), only a
few strictly-propositional top-level clauses are needed to cover all the combinations of the propositional literals and make the entire formula unsatisfiable. Previous attempts to eliminate this “trivial
unsatisfiability” have concentrated on eliminating top-level propositional literals by setting  /5
(Hustadt & Schmidt, 1999; Giunchiglia et al., 2000). (Unfortunately this choice forces 
 ,
as for 9  such formulae are too hard for all state-of-the-art systems.) When each atom in a
clause is generated independently from the other atoms of the clause an approach that modifies the
probability of propositional atoms is necessary to eliminate these problematic clauses.



The first new idea of our approach, suggested previously (Horrocks et al., 2000), works as
follows. Instead of forbidding strictly-propositional clauses except at the maximum modal depth,  ,
by setting  / , we instead require that the ratio between propositional atoms in a clause and the
clause size be as close as possible to the propositional probability  for clauses not at the maximum
modal depth  . 7





For clauses of size  , if  is ;  for some integral , this results in all clauses not at modal
depth  having propositional atoms and  
modal atoms. For other values of  , we allow
or 4 
propositional atoms in each clause not at modal depth  , with probability
either 4 


and    4  , respectively.8 For instance, if  / 2 and  / 7 , then each clause
4
0
contains 1 propositional and 1 modal literal, and the third is propositional with probability 0.8, as


, this eliminates the possibility of strictly
7
2 $
7 2
/
  $9 /
2 . If 
9 ;
propositional clauses, which are the main cause of trivial unsatisfiability, except at modal depth  .

   	

 	

 
      



  

"



7. Other approaches to eliminating propositional unsatisfiability are possible. For example, it would be possible to
simply remove any strictly-propositional clauses after generation. However, this technique would alter the meaning
of the parameter , that is, the actual probability for a literal to be propositional would become strictly smaller than
, and it will be out of the control of the user.


and
.
8. Remember that




   !#"%$'&)( "+*-,+. /0 1 "2#"+$'&3( "+45,%.
358

A N EW G ENERAL M ETHOD

TO

G ENERATE R ANDOM M ODAL F ORMULAE

Satisfiability and Unsatisfiability Fractions
1

Trivial Satisfiability and Unsatisfiability Fractions
1

N=3
N=4
N=5
N=6
N=7
N=8
N=9

0.8

N=3
N=4
N=5
N=6
N=7
N=8
N=9

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60
L/N

80

100

120

20

DLP median times

40

60
L/N

80

100

120

DLP 90th percentile times

1000

1000

N=3
N=4
N=5
N=6
N=7
N=8
N=9

100

N=3
N=4
N=5
N=6
N=7
N=8
N=9

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60
L/N

80

100

120

20

*SAT median times

40

60
L/N

80

100

120

*SAT 90th percentile times

1000

1000

N=3
N=4
N=5
N=6
N=7
N=8
N=9

100

N=3
N=4
N=5
N=6
N=7
N=8
N=9

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60
L/N

80

Figure 1: Results for

4.1.1 M ODAL D EPTH



100

/

7

120

,

/

,

/

20

40

, and 

/:243

60
L/N

80

100

120

(old method)



Our first experiments were a direct comparison to previous tests. We generated CNF  formulae
with  /17 ,  /  ,  /  , and  / 243 , a setting that has been used in the past, and one that
exhibits some problematic behavior. We used both our new method and the old 3CNF  generation
method by Giunchiglia et al. (2000) briefly described in Section 3.1 (the “old method” from now
on). We also generated CNF  formulae with  /17 ,  /  ,  /  , and 	/  , the standard
method for eliminating trivially unsatisfiable formulae. (At  /  our new method is the same as
the old 3CNF  generation method.) The results of the tests are given in Figures 1, 2, and 3.
359

PATEL -S CHNEIDER & S EBASTIANI

Satisfiability and Unsatisfiability Fractions
1

Trivial Satisfiability and Unsatisfiability Fractions
1

N=3
N=4
N=5
N=6
N=7
N=8
N=9

0.8

N=3
N=4
N=5
N=6
N=7
N=8
N=9

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60
L/N

80

100

120

20

DLP median times
1000

60
L/N

80

100

120

DLP 90th percentile times
1000

N=3
N=4
N=5
N=6
N=7
N=8
N=9

100

40

N=3
N=4
N=5
N=6
N=7
N=8
N=9

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60
L/N

80

100

120

20

*SAT median times
1000

60
L/N

80

100

120

*SAT 90th percentile times
1000

N=3
N=4
N=5
N=6
N=7
N=8
N=9

100

40

N=3
N=4
N=5
N=6
N=7
N=8
N=9

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60
L/N

80

Figure 2: Results for



100

/97

,

120

/

20

,

/

, and 

/:243

40

60
L/N

80

100

120

(our new method)

One aspect of this set of tests is that all three collections have many trivially unsatisfiable formulae out of the satisfiability transition area, even the collection with no top-level propositional atoms.
The trivial unsatisfiability occurs in the collection with no top-level propositional atoms because

/
7 ) and both DLP and *SAT detect
there are only a few top-level modal atoms (e.g., for
clashes between complementary modal literals without investigating any modal successors.
The presence of this large number of trivially unsatisfiable formulae is not actually a serious
problem with these tests. The trivial unsatisfiability only shows up after the formulae are almost

/
7 , which is trivial to
all unsatisfiable already and easy to solve. The only exception is for
solve anyway. However, our new generation method considerably reduces the number of trivially
unsatisfiable formulae and almost entirely removes them from the satisfiable/unsatisfiable transition



360

A N EW G ENERAL M ETHOD

TO

G ENERATE R ANDOM M ODAL F ORMULAE

Satisfiability and Unsatisfiability Fractions
1

Trivial Satisfiability and Unsatisfiability Fractions
1

N=3
N=4
N=5
N=6

0.8

N=3
N=4
N=5
N=6

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60
L/N

80

100

120

20

DLP median times

40

60
L/N

80

100

120

DLP 90th percentile times

1000

1000

N=3
N=4
N=5
N=6

100

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60
L/N

80

100

120

20

*SAT median times

40

60
L/N

80

100

120

*SAT 90th percentile times

1000

1000

N=3
N=4
N=5
N=6

100

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60
L/N

80

Figure 3: Results for



100

/97

120

,

/

20

,

/

, and 

40

/:

60
L/N

80

100

120

(either method).

area. There are some trivially satisfiable formulae in this set of tests, but only a few, and only for
the smallest clause sizes. Their presence does not affect the difficulty of the generated formulae.
The two methods with  /:243 are relatively close in maximum difficulty, with our new method
generating somewhat harder formulae. However, our method produces difficult formulae, for both

DLPand *SAT, over a much broader range of <;
than does the original method.
Changing to  /  results in formulae that are orders of magnitude harder. This is not good,
previous arguments to the contrary notwithstanding, as we would like to have a significant number
of reasonable test sets to work with, and  /  allows only consideration of a very few values for

before the formulae are totally impossible to solve with current systems, resulting in very few
reasonable test sets.
361

PATEL -S CHNEIDER & S EBASTIANI

So, at a maximum modal depth of %/  our method results in formulae that are of similar
difficulty to the previously-generated formulae and still have trivially unsatisfiable formulae, but
ones that do not seriously affect the difficulty of the test sets.
4.1.2 M ODAL D EPTH



Restricting attention to a maximum modal depth of  /  is not very useful. Formulae with maximum modal depth of  are not representative of modal formulae in general, particularly as they
have no nested modal operators. Sticking to a maximum modal depth of  seriously limits the
significance of the generated tests.
We would thus like to be able to perform interesting experiments with larger maximum modal
depths. So we performed a set of experiments with a maximum modal depth of  /
. We started
with a set of tests that corresponds to previously-performed experiments.
At depth  /
, in the old method for  / 243 the time curves are dominated by a “half-dome”
shape, whose steep side shows up where the number of trivially unsatisfiable formulae becomes
large before the formulae become otherwise easy to solve, as shown in Figure 4. In fact, nearly all
the unsatisfiable formulae here are trivially unsatisfiable.
This is an extremely serious flaw, as the difficulty of the test set is being drastically affected
by these trivially unsatisfiable formulae. Changing to  /  is not a viable solution because at
depth  /
such formulae are much too difficult to solve, as shown in Figure 5, where the median
percentile exceeds the timeout before any formulae can be determined to be unsatisfiable, even for
3 propositional variables.
With our new method, as shown in Figure 6, the formulae are much more difficult to solve than
the old method, because there is no abrupt drop-off from propositional unsatisfiability, but they are
much easier to solve than those generated with  /  . Further, trivially unsatisfiable formulae do
not appear at all in the interesting portion of the test sets.
,  /243 ) is not entirely suitable. The formulae
Nevertheless this choice of parameters ( /
are becoming too hard much too early. In particular, there are no unsatisfiable formulae that can

be solved for

7 , and thus the unsatisfiability plots cannot be distinguished from the x axis
(recall Footnote 6). However, our new method does provide some advantages already, providing an
interesting new set of tests, albeit one of limited size.









4.2 Increasing 





We would like to be able to produce better test sets for depth 9/
and greater. One way of
doing this is to increase the propositional probability  from 243 to something like 2 , increasing
the number of propositional atoms and thus decreasing the difficulty of the generated formulae.
This would be very problematic with previous generation methods as it would result in the trivially
unsatisfiable formulae determining the results for even smaller numbers of clauses  , but with our
method here it is not much of a problem.
To investigate the increasing of the the propositional probability, we ran a collection of tests with
maximum modal depth  /
and propositional probability  / 2 with both the old method and
our new method. The results of these tests are given in Figures 7 and 8. As before, the asymmetries

between the satisfiability and unsatisfiability curves in Figure 8 for /93  are due to the fact that
many tests are not solved by DLP within the time limit (c.f., Footnote 6).





362



A N EW G ENERAL M ETHOD

TO

G ENERATE R ANDOM M ODAL F ORMULAE

Satisfiability and Unsatisfiability Fractions
1

Trivial Satisfiability and Unsatisfiability Fractions
1

N=3
N=4
N=5
N=6

0.8

N=3
N=4
N=5
N=6

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60

80

100
L/N

120

140

160

180

200

20

DLP median times

40

60

80

100
L/N

120

140

160

180

200

DLP 90th percentile times

1000

1000

N=3
N=4
N=5
N=6

100

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

140

160

180

200

20

*SAT median times

40

60

80

100
L/N

120

140

160

180

200

180

200

*SAT 90th percentile times

1000

1000

N=3
N=4
N=5
N=6

100

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

140

Figure 4: Results for



160

/

7

180

,

200

/

20

,

 , and
/

40



60

/:243

80

100
L/N

120

140

160

(old method)

As expected, the old method produces large numbers of trivially unsatisfiable formulae. These
trivially unsatisfiable formulae show up much earlier than with  /9243 , making the tests considerably easier, especially for *SAT.
Our new method produces hard formulae, but ones that are quite a bit easier than for  / 243 .

/
In particular, DLP solved all instances within the time limit for
. Trivially unsatisfiable
formulae do show up, but only well after the formulae are already unsatisfiable, and they do not
significantly affect the difficulty of the tests.
So our method allows the creation of more-interesting tests at modal depths greater than  ,
simply by adjusting  to a value where the level of difficulty is appropriate. Trivial unsatisfiability
is not a problem, whereas in the old method it was the most important feature of the test.
363

PATEL -S CHNEIDER & S EBASTIANI

Satisfiability and Unsatisfiability Fractions
1

Trivial Satisfiability and Unsatisfiability Fractions
1

N=3
N=4
N=5

0.8

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

N=3
N=4
N=5

0
20

40

60

80

100
L/N

120

140

160

180

200

20

DLP median times

40

60

80

100
L/N

120

140

160

180

200

DLP 90th percentile times

1000

1000

N=3
N=4
N=5

100

100

10

10

1

1

0.1

0.1

0.01

N=3
N=4
N=5

0.01
20

40

60

80

100
L/N

120

140

160

180

200

20

*SAT median times

40

60

80

100
L/N

120

140

160

180

200

180

200

*SAT 90th percentile times

1000

1000

N=3
N=4
N=5

100

100

10

10

1

1

0.1

0.1

0.01

N=3
N=4
N=5

0.01
20

40

60

80

100
L/N

120

140

Figure 5: Results for



160

/

7

180

,

200

/

20

,

 , and
/



40

60

/8

80

100
L/N

120

140

160

(either method)

4.3 Changing the Size of Clauses
A problem with increasing the propositional probability is that formulae become “too propositional”
—that is, the source of difficulty becomes more and more the propositional component of the problem, and not the modal component. As we are interested in modal decision procedures, we do not
want the main (or only) source of difficulty to be propositional reasoning.
We decided, therefore, to investigate a different method for modifying the difficulty of the generated formulae. We instead allow the number of literals in a clause  to vary in a manner similar to
the number of propositional atoms. If  is an integer then each clause has that many literals. Otherwise, we allow either  or  literals in each clause, with probability    and    ,

 	  

 	

364

 	

A N EW G ENERAL M ETHOD

TO

G ENERATE R ANDOM M ODAL F ORMULAE

Satisfiability and Unsatisfiability Fractions
1

Trivial Satisfiability and Unsatisfiability Fractions
1

N=3
N=4
N=5
N=6

0.8

N=3
N=4
N=5
N=6

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60

80

100
L/N

120

140

160

180

200

20

DLP median times

40

1000

80

100
L/N

120

140

160

180

200

DLP 90th percentile times
1000

N=3
N=4
N=5
N=6

100

60

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

140

160

180

200

20

*SAT median times

40

1000

80

100
L/N

120

140

160

180

200

180

200

*SAT 90th percentile times
1000

N=3
N=4
N=5
N=6

100

60

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

Figure 6: Results for

140



160

/97

180

,

200

,

/

20

 , and
/



40

60

/:243

80

100
L/N

120

140

160

(our new method)

respectively. We then determine the number of propositional atoms in each clause based on the
number of literals in that clause.
We generated CNF  formulae with  /
43 , /
 ,  /
 , and  /243 . The change from


/17 to
/
43 produces fewer disjunctive choices and should result in easier formulae. The
results of these tests are given in Figure 9.
These formulae are much easier than those generated with  / 7 , although they are still quite
hard and form a reasonable source of testing data. Trivially unsatisfiable formulae appear in large
numbers only well after the formulae are all unsatisfiable and relatively easy.
To further illustrate the reduction in difficulty with smaller values of  we generated formulae
 3 , 
/ ,  / , and  /:243 . As shown in Figure 10, these formulae are even easier
using  /





 

365

PATEL -S CHNEIDER & S EBASTIANI

Satisfiability and Unsatisfiability Fractions
1

Trivial Satisfiability and Unsatisfiability Fractions
1

N=3
N=4
N=5
N=6

0.8

N=3
N=4
N=5
N=6

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60

80

100
L/N

120

140

160

180

200

20

DLP median times

40

60

80

100
L/N

120

140

160

180

200

DLP 90th percentile times

1000

1000

N=3
N=4
N=5
N=6

100

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

140

160

180

200

20

*SAT median times

40

60

80

100
L/N

120

140

160

180

200

180

200

*SAT 90th percentile times

1000

1000

N=3
N=4
N=5
N=6

100

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

140

Figure 7: Results for



160

/

7

180

,

200

/

20

,

 , and
/

40



60

80



/:2

100
L/N

120

140

160

(old method)



than for  /
43 . Trivially unsatisfiable formulae do appear, but again only after the formulae
become all unsatisfiable, and not until the formulae become easy, particularly for *SAT.
 3 we now have a reasonable set of formulae for maximum modal depth %/
At  /
.
With a maximum modal depth of , the formulae are much more representative than formulae with
maximum modal depth of  . The formulae are neither too easy nor too hard for current modal
decision procedures so the satisfiability transition can be investigated for significant numbers of
propositional variables.
Further, with this new method we can provide a collection of test sets that vary in difficulty

by varying  . Most previous comparative test sets varied , which is problematic because most

interesting parameter sets become too hard for small values of , in the range of to  .









366

A N EW G ENERAL M ETHOD

TO

G ENERATE R ANDOM M ODAL F ORMULAE

Satisfiability and Unsatisfiability Fractions
1

Trivial Satisfiability and Unsatisfiability Fractions
1

N=3
N=4
N=5
N=6

0.8

N=3
N=4
N=5
N=6

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60

80

100
L/N

120

140

160

180

200

20

DLP median times

40

1000

80

100
L/N

120

140

160

180

200

DLP 90th percentile times
1000

N=3
N=4
N=5
N=6

100

60

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

140

160

180

200

20

*SAT median times

40

1000

60

80

100
L/N

120

140

160

180

200

180

200

*SAT 90th percentile times
1000

N=3
N=4
N=5

100

100

10

10

1

1

0.1

0.1

0.01

N=3
N=4
N=5

0.01
20

40

60

80

100
L/N

120

140



Figure 8: Results for

160

/97

180

,

200

/

,

20

 , and
/



40

60



/:2

80

100
L/N

120

140

160

(our new method)



/
To illustrate the effects of varying  we generated formulae using
,  /  ,  /5 , and

from  to  . As shown in Figure 11, this produces an interesting set of tests.
 /:243 , varying
The difficulty levels can be set appropriately. Trivially unsatisfiable formulae do appear, but only
after the formulae become unsatisfiable anyway. Trivially unsatisfiable formulae do not influence
the difficulty of the test.

   

367

PATEL -S CHNEIDER & S EBASTIANI

Satisfiability and Unsatisfiability Fractions
1

Trivial Satisfiability and Unsatisfiability Fractions
1

N=3
N=4
N=5
N=6

0.8

N=3
N=4
N=5
N=6

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60

80

100
L/N

120

140

160

180

200

20

40

DLP median times

60

80

100
L/N

120

140

160

180

200

DLP 90th percentile times

1000

1000

N=3
N=4
N=5
N=6

100

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

140

160

180

200

20

*SAT median times

40

60

80

100
L/N

120

140

160

180

200

180

200

*SAT 90th percentile times

1000

1000

N=3
N=4
N=5
N=6

100

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

Figure 9: Results for

4.3.1 M ODAL D EPTH



140

/

160



43

180

,

200

/

20

,

 , and
/



40

60

/:243

80

100
L/N

120

140

160

(our new method)

7

Our method can be used to generate interesting test sets with modal depth  / 7 . This depth is not
at all interesting with previous methods—either the formulae are immensely difficult, such as for
 /: , or the behavior is dominated by trivial unsatisfiability, such as for  /:243 .
For interesting levels of difficulty, we do have to reduce  to values below 43 . If  is much
larger, the formulae are too hard. However, with 
43 we can produce interesting test sets, as
shown in Figure 12. (The relevant asymmetry between the satisfiable and unsatisfiable rates curves

for
3 is due to the high amount of tests exceeding the time limit.) Here the problems are hard

	3 but doable, and there are no problems with trivially (un)satisfiable formulas.
even for





368



A N EW G ENERAL M ETHOD

TO

G ENERATE R ANDOM M ODAL F ORMULAE

Satisfiability and Unsatisfiability Fractions
1

Trivial Satisfiability and Unsatisfiability Fractions
1

N=3
N=4
N=5
N=6
N=7

0.8

N=3
N=4
N=5
N=6
N=7

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60

80

100
L/N

120

140

160

180

200

20

DLP median times

40

60

80

100
L/N

120

140

160

180

200

DLP 90th percentile times

1000

1000

N=3
N=4
N=5
N=6
N=7

100

N=3
N=4
N=5
N=6
N=7

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

140

160

180

200

20

*SAT median times

40

60

80

100
L/N

120

140

160

180

200

180

200

*SAT 90th percentile times

1000

1000

N=3
N=4
N=5
N=6
N=7

100

N=3
N=4
N=5
N=6
N=7

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

Figure 10: Results for



140

/

160




3

180

,

200

/

20

,

 , and
/



40

60

/:243

80

100
L/N

120

140

160

(our new method)

Our method now allows us fine control of the difficulty of tests. To make a test easier, we can
just reduce the size of clauses by reducing the value(s) of  , or increase the propositional probability

 . This control was missing with the previous method, as
was restricted to integral value, and,
anyway, was always set to 7 and making  much different from 2  resulted in problems with trivial
unsatisfiability for maximum modal depths greater than 1.

5. A New CNF  Generation Method: Advanced Version
Actually, our generator is much more general than what we have described so far. We allow direct
specification of the probability distribution of the number of propositional atoms in a clause, and
369

PATEL -S CHNEIDER & S EBASTIANI

Satisfiability and Unsatisfiability Fractions
1

Trivial Satisfiability and Unsatisfiability Fractions
1

C=2.2
C=2.4
C=2.6
C=2.8

0.8

C=2.2
C=2.4
C=2.6
C=2.8

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60

80
L/N

100

120

140

20

DLP median times

40

60

80
L/N

100

120

140

DLP 90th percentile times

1000

1000

C=2.2
C=2.4
C=2.6
C=2.8

100

C=2.2
C=2.4
C=2.6
C=2.8

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80
L/N

100

Figure 11: Results for


/

120

140

,

/

20

,

 , and
/



40

/9243

60

80
L/N

100

120

140

(our new method)

allow the distribution to be different for each modal depth from the top level to    . We also allow
direct specification of the probability distribution for the number of literals in a clause at each modal
depth. Thus, the probability distribution for the number of propositional atoms depends on both the
modal depth and the number of literals in the clause.
5.1 Generalization: Shaping the Probability Distributions.
The generator has two parameters to control the shape of formulae. The first parameter,  , is a
list of lists (e.g., [[0,0,1]]) telling it how many disjuncts to put in each disjunction at each
modal level. Each internal list represents a finite discrete probability distribution. For instance, the
“[0,0,1]” says “ ;  of the disjunctions have  disjunct,  ;  have disjuncts, and ;  have 7
disjunctions” (fixed length 3). Because there is only one element of the list, this frequency is used at
each modal depth, until the last. Other possibilities are, e.g., [[1,1,1,1]] (maximum length 4
with uniform distribution), [[16,8,4,2,1]] (maximum length 5 with exponential distribution),
and so on.
The second parameter,  , is a list of lists of lists (e.g., [[[],[],[0,3,3,0]]]) that controls the propositional/modal rate. The top-level elements are for each modal depth (here all the
same). The second-level elements are for disjunctions with 1,2,3,... disjunctions (here only the third
matters as all disjunctions have three disjuncts). For instance, the “[0,3,3,0]” says “ ; of the
disjunctions have  propositional atoms, 7 ; have  propositional atom, 7 ; have propositional
atoms, and  ; have 7 propositional atoms” (that is, our new scheme discussed in the paper with









370





A N EW G ENERAL M ETHOD

TO

G ENERATE R ANDOM M ODAL F ORMULAE

Satisfiability and Unsatisfiability Fractions
1

Trivial Satisfiability and Unsatisfiability Fractions
1

N=3
N=4
N=5
N=6

0.8

N=3
N=4
N=5
N=6

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60

80

100
L/N

120

140

160

180

200

20

40

DLP median times
1000

100
L/N

120

140

160

180

200

DLP 90th percentile times
N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

140

160

180

200

20

*SAT median times
1000

40

60

80

100
L/N

120

140

160

180

200

180

200

*SAT 90th percentile times
1000

N=3
N=4
N=5
N=6

100

N=3
N=4
N=5
N=6

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80

100
L/N

120

140

160

Figure 12: Results for



80

1000

N=3
N=4
N=5
N=6

100

60



180

200

20

 
/



3

,
/



,

40

/97

60

80

, and 

100
L/N

120

140

160

/:243

/
243 ; the old scheme with  /
243 is represented by [[[],[],[1,3,3,1]]]). Notice that
the first element of the distributions in  represents the value  , whilst the first element of the distributions in  represents the value  . Setting the last element of each distribution to zero [...,0]
eliminates all strictly propositional clauses, which are the main cause of trivial unsatisfiability; this


% ;
of Section 4.1.
is the way we implement the constraint 



"

371

PATEL -S CHNEIDER & S EBASTIANI

1
2
3
4
5
6

function rnd CNF  (d,m,L,N,p,C)
for i := 1 to  do
repeat

:= rnd clause(d,m,N,p,C);
until is new(Cl );
return    ;

/* generate  distinct random clauses */

/* discards




if it already occurs */



7 function rnd clause(d,m,N,p,C)
8
:= rnd length(d,C);
/* select randomly the clause length */
9
/* select randomly the prop/modal rate */
 := rnd propnum(d,p,K);
10
repeat
11
for j := 1 to  do
/* generate P distinct random prop. literals */

	
12
:= rnd sign() rnd atom(0,m,N,p,C);
/* generate K-P distinct random modal literals */
13
for j := P+1 to do
	
14
:= rnd sign() rnd atom(d,m,N,p,C);

15
/	
   	 ;
/* discards Cl if contains repeated atoms */
16
until no repeated atoms in(Cl);
17
return   ;






 "

18 function rnd atom(d,m,N,p,C)
19
if d=0
20
then return rnd propositional atom(N); /* select randomly a prop. atom */
21
else
 !
22
:= rand box(m);
/* select randomly an indexed box */

23
:= rand clause(d-1,m,N,p,C);
"!
24
return  ;
Figure 13: Schema of the new CNF  random generator.
For instance, the plots of Figures 1-12 can be obtained with the following choices of C and p:
Fig.
C
p
C (advanced version)
p (advanced version)
1, 4
3
0.5 (old) [[0,0,1]]
[[[],[],[1,3,3,1]]
2, 6
3
0.5 (new) [[0,0,1]]
[[[],[],[0,3,3,0]]
3, 5
3
0
[[0,0,1]]
[[[],[],[1,0,0,0]]
7
3
0.6 (old) [[0,0,1]]
[[[],[],[8,36,54,27]]
8
3
0.6 (new) [[0,0,1]]
[[[],[],[0,1,4,0]]
9
2.5
0.5 (new) [[0,1,1]]
[[[],[0,3,0],[0,3,3,0]]
10, 12 2.25
0.5 (new) [[0,2,1]]
[[[],[0,3,0],[0,3,3,0]]
11
2.2, 2.4, 0.5 (new) [[0,4,1]], [[0,3,2]] [[[],[0,3,0],[0,3,3,0]]
2.6, 2.8
[[0,2,3]], [[0,1,4]]
Our generator works as described in Figure 13. The function is new(Cl ) checks if  /
  ; rnd length(d,C) selects randomly the clause length according to the   -th dis	

tribution in  (e.g, if  is  and  is [[0,1,1][1,2][1]], it returns  with probability ; 7



372

A N EW G ENERAL M ETHOD





TO

G ENERATE R ANDOM M ODAL F ORMULAE

 







and with probability ; 7 ); rnd propnum(d,p,K) selects randomly the number of propositional
 
-th distribution in  (e.g, if  is  ,
is and  is
atoms per clause  according to the 
[[[],[0,1,0],[0,1,0,0]] [[1,0][0,1,0]]], it returns  deterministically); rnd sign
selects randomly either the positive or negative sign with equal probability; no repeated atoms in(Cl)
checks if the clause  contains no repeated atom; Sort(Cl) returns the clause  sorted according

to some criterium; rnd propositional atom(N) selects with uniform probability one of the propo !
sitional atoms  ; rnd box(m) selects with uniform probability one of the  indexed boxes
.
When eliminating duplicated atoms in a clause, we take care not to disturb these probabilities
by first determining the “shape” of a clause (rows 8-9 in Figure 13), and only then instantiating that
with propositional variables (rows 10-16 in Figure 13). If a clause has repeated atoms, either propositional or modal, the instantiation is rejected and another instantiation of the shape is performed.
If we did not take care in this way we would generate too few “small” atoms because there are
fewer small atoms than large atoms, resulting in a greater chance of rejecting small atoms because
of repetition.
The elimination of duplicated atoms in a clause is not only a matter of elimination of redundancies, but also of elimination of a source of flaws. In fact, one might generate top-level clauses like


  
   
         

    , which would make the whole formula inconsistent.






 


"


 ""
$

Example 5.1 We try to guess a parameter set by which the new random generator can potentially
generate the following CNF  formula :




                   




  
 
  
  
 


(2)
           


















 
 

















"


 " "
"






"


" "
"

"

"



, /
, /
. At top level we have 0 unary, 2 binary and
After a quick look we set  /  ,  /
2 ternary clauses; at depth 1 we have 2 unary and 4 binary clauses; at depth 2 we have only 6 unary
clauses. Thus, we can set
C = [[0,2,2],[2,4],[6]].
(3)
At top level there are no unary clauses (we represent this fact by the empty list “[]”), the 2 binary clauses have 1 propositional literal, and the 2 ternary clauses have 1 propositional literal; at
depth 1, the 2 unary clauses have 0 propositional literals, while the 4 binary clauses have 1 propositional literal. (There is no need to provide any information for depth 2, as all clauses are purely
propositional.) Thus, we can set
p = [[[],[0,2,0],[0,2,0,0]] [[2,0],[0,4,0]]].

(4)

The two expressions can then be normalized into:
C = [[0,1,1],[1,2],[1]]
p = [[[],[0,1,0],[0,1,0,0]] [[1,0],[0,1,0]]].

(5)

Notice that any other setting of  ,  obtained by changing the non-zero values in (5) into other
non-zero values, or turning zeros into non-zeros (but not vice versa!), will do the work, just with a
different probability. For instance, turning the first list in  into [1,1,1] allows for generating
also unary clauses at top level; anyway, with probability ; 7  the generator may still produce

formulae with only binary and ternary clauses at top level.

 "

373

PATEL -S CHNEIDER & S EBASTIANI

Satisfiability and Unsatisfiability Fractions
1

Trivial Satisfiability and Unsatisfiability Fractions
1

N,d=3,3
N,d=4,3
N,d=3,4
N,d=4,4

0.8

N,d=3,3
N,d=4,3
N,d=3,4
N,d=4,4

0.8

0.6

0.6

0.4

0.4

0.2

0.2

0

0
20

40

60

80
L/N

100

120

140

20

DLP median times
1000

60

80
L/N

100

120

140

DLP 90th percentile times
1000

N,d=3,3
N,d=4,3
N,d=3,4
N,d=4,4

100

40

N,d=3,3
N,d=4,3
N,d=3,4
N,d=4,4

100

10

10

1

1

0.1

0.1

0.01

0.01
20

40

60

80
L/N

100

120

140

20

40

60

80
L/N

100

120

140



Figure 14: Results for DLPwith  /97  , /97  ,  / [[1,8,1]],
 / [[[1,0],[0,1,0],[0,1,1,0]]].

As an illustration of our general method, we present a set of tests with  /  ,  / 7  ,

,
/ [[1,8,1]], and %/ [[[1,0],[0,1,0],[0,1,1,0]]]. This set of tests
introduces a small fraction of single-literal clauses that contain a modal literal (except at the greatest
modal depth, where they contain, of course, a single propositional literal). The results of tests are
given in Figure 14. Again, trivial instances occur only out the interesting zone. Here we can generate
interesting test sets even with modal depth .


/17 

5.2 Varying the Probability Distributions with the Depth
Our new method provides the ability to fine-tune the distribution of both the size and the propositional/modal rate of the clauses at every depth. This fine tuning results in a very large number
of parameters, and so far in this paper we have only investigated distributions that conform to the
scheme described above or ones that correspond to the 3CNF  generation method previously used.
To give an example of how to vary the probability distributions with the nesting depth of the


clauses, we consider the case with  /
63 , 
/
 ,
/7  63 ,
/ [[1,8,1],[1,2]],

/ [[[1,0],[0,1,0],[0,1,1,0]],[[1,0],[0,1,0]]]. The results of the tests are
given in Figure 15.
The  parameter says that the probability distributions of the length of the clauses occurring at
nesting depth  and  are [1,8,1] and [1,2] respectively. (When not explicitly specified, it is
374

A N EW G ENERAL M ETHOD

TO

G ENERATE R ANDOM M ODAL F ORMULAE

Satisfiability and Unsatisfiability Fractions

Trivial Satisfiability and Unsatisfiability Fractions

1

1

0.8

0.8

N,d=3,4
N,d=4,4
N,d=5,4
N,d=3,5
N,d=4,5
N,d=5,5

0.6

N,d=3,4
N,d=4,4
N,d=5,4
N,d=3,5
N,d=4,5
N,d=5,5

0.6

0.4

0.4

0.2

0.2

0

0
0

20

40

60

80

100

120

140

0

20

40

60

L/N

80

100

120

140

L/N

DLP median times
1000

DLP 90th percentile times
1000

N,d=3,4
N,d=4,4
N,d=5,4
N,d=3,5
N,d=4,5
N,d=5,5

100

N,d=3,4
N,d=4,4
N,d=5,4
N,d=3,5
N,d=4,5
N,d=5,5

100

10

10

1

1

0.1

0.1

0.01

0.01
0

20

40

60

80

100

120

140

0

20

L/N

40

60

80

100

120

140

L/N




Figure 15: Results for DLPwith /
63 , 
/
 ,
/
7  63 ,
/ [[1,8,1],[1,2]],
 / [[[1,0],[0,1,0],[0,1,1,0]],[[1,0],[0,1,0]]].



considered the last distribution by default, as in the case of depth  .) Thus, the top-level clauses
are on average ;  unary, ;  binary ;  ternary, while the clauses occurring at depth  are
on average ; 7 unary and ; 7 binary.



The  parameter says that the lists of probability distributions of the propositional/modal ratio
at nesting depth  and  are [[1,0],[0,1,0],[0,1,1,0]] and [[1,0],[0,1,0]] respectively. Thus, at every depth, unary clauses have no propositional literal and binary clauses have
 propositional and  modal literal. The top-level ternary clauses have either  or
propositional
literals, with equal probability.



Notice that at top level the distributions are identical to those of Figure 14, whilst at depth 
there are no more ternary clauses and a higher fraction of unary clauses. These slight modifica
tions allow reasonable test sets with  / 3 and
/
3 . Moreover, trivial instances have nearly
disappeared.

6. Generality of the Method

%

We have already observed (Horrocks et al., 2000) that for normal modal logics, from
upward,
there is no loss in the restriction to CNF  formulae, as there is an equivalence between arbitrary
375

PATEL -S CHNEIDER & S EBASTIANI

normal modal formulae and CNF  formulae9 . We may wonder how well our generation technique covers the whole space of CNF  formulae, and how well we can approximate a restricted
subclass of this space. Example 5.1 represents an instance of a very general property of our random
generation technique, which we present and discuss below.
Now we assume that the rnd CNF  of Figure 13 is a “purely random” generator, i.e., it performs all non-deterministic choices independently and in a pure random way. (Of course pseudorandom generators only approximate this feature.) Moreover, with no loss of generality, we restrict
our discussion to CNF  formulae which have no repeated clauses at top level and no repeated
atoms inside any clause at any level, and in which atoms are sorted within each clause, according to the generic function Sort() of Figure 13. The former allows for considering only formulae
which are already simplified out; the latter allows for considering only one representative for each
class of formulae which are equivalent modulo order permutations. As discussed by Giunchiglia


     
et al. (2000), the latter allows for further simplifying subformulae like, e.g.,   





or  

 
  .




"

$

 



 "  
 "



"

Let be a sorted CNF  formula of depth  and with  top-level clauses built on all the

"#
propositional atoms      and on all the modal boxes    
 , which has no repeated
clause at top level and no repeated atoms inside any clause at any level. Then we can construct 

and  so that, for each  , ,  :





(a) the -th element of the  -th sublist in  is non-zero if and only if there is a clause of length
occurring at depth  in , and

(b) the   -the element of the -th sub-sublist of the  -th sublist in  is non-zero if and only if

there is a clause of length occurring at depth  which contains  propositional literals.

$

One possible operative technique to build  and  works as follows. Initialize  as a list of
sublists. Then, for every depth level  2     , set the  -th sublist of  as follows:



$






(i) set the size of the sublist as the maximum size of clauses occurring in at depth  ;


(ii) for all 8      , count the number of clauses of length occurring in at depth  , and
append the result to the sublist.



Initialize  as a list of  sublists of sub-sublists. Then, for every depth level
the  -th sublist of  as follows:
(i) look at
; 
(ii) for all





: set the size



    







$

2   8 

of the sublist as the maximum size of clauses occurring in



$

, set

at depth

, generate the -th sub-sublist as follows:



look at  : if the number of clauses of length occurring at depth  is non-zero, then set

the length of the sub-sublist to 8 , else set to 0;

	

9. This holds for all modal normal logics from
upward, as the conversion works recursively on the depth of the
formula, from the leaves to the root, each time applying to sub-formulae the propositional CNF conversion and the
transformation








 

which preserves validity in such logics.

376






 

A N EW G ENERAL M ETHOD

TO

G ENERATE R ANDOM M ODAL F ORMULAE



$

for all 
occurring in
2  

  , count the number of clauses of length
 which have  propositional literals, and append the result to the sub-sublist.



at depth

Example 5.1 represents an instance of application of the above technique for construction  and 
 above, but are such
from . Notice that the  and  parameters not only verify points  and
that the probability distributions mimic the actual number of occurrences of the different kinds of
clauses.

$

 "

"

$

Theorem 6.1 Let rnd CNF  be a purely random generator as in Figure 13. Let be a sorted
CNF  formula of depth  and with  top-level clauses built on all the propositional atoms in

 #
      and on all the modal boxes in 
  
 , which has no repeated clause at top level
and no repeated atoms inside any clause at any level. Let  and  be built from so that to verify
 above. Let  and   be obtained from  and  respectively by substituting some
points  and
zero-values with some non-zero values. Then we have:

 "

$

"

$

(i) rnd CNF  (d,m,L,N,p,C) returns with some non-zero probability  ;
(ii) rnd CNF  (d,m,L,N,p’,C’) returns with some non-zero probability 

$

 

.

$

Proof The fully-detailed proof is reported in Appendix. Here we sketch the main steps.
The following facts come straightforwardly by induction on the structure of :

$

1. every propositional atom occurring in at some depth  is returned with the same non-zero
probability   by both rnd atom(0,m,N,p,C) and rnd atom(0,m,N,p’,C’);
 
2. every modal atom  occurring in at some depth  is returned with some non-zero probability  by rnd atom(d-i,m,N,p,C), and is returned with some non-zero probability   
by rnd atom(d-i,m,N,p’,C’);

$







$




3. every clause  occurring in at some depth  is returned with some non-zero probability
 by rnd clause(d-i,m,N,p,C), and is returned with some non-zero probability    by
rnd clause(d-i,m,N,p’,C’).







Thus, every top level clause 
	 is returned by rnd clause(d,m,N,p,C) and rnd clause(d,m,N,p’,C’)
with some non-zero probabilities  	 and  	 respectively, being  	  	 . From this fact, it comes
straightforwardly that is returned by rnd CNF  (d,m,L,N,p,C) and rnd CNF  (d,m,L,N,p’,C’)
with some non-zero probabilities  and   respectively, being    .
Q.E.D.
Q.E.D.
From a theoretical viewpoint, Theorem 6.1  shows that our generation technique is very
general, because, for every CNF  formula , there exists a choice for the parameters s.t. a purely
random generator returns with some non-zero probability  .
 is not unique as,
Of course, the choice criterium for  and  suggested by points  and
for example, any other setting obtained from it by turning zeros into non-zeros would match the
requirements. As an extreme case, we might think to do very general choices like

$

"

$

$

C = [[1,1,1,...],...]

 "

"

p = [[[[1,1],[1,1,1],[1,1,1,1]...]]].

(6)

which guarantee to have every possible CNF  formula within a given bound in clause size with
non-zero probability. Anyway, Theorem 6.1   shows that, extending the number of non-zeros
values, the probability of generating decreases.

$

 "

377

PATEL -S CHNEIDER & S EBASTIANI

For instance, consider Example 5.1. Turning the first list in  of (5) into [1,1,1] would still
allow for generating the formula (2), but it would allow for generating also unary clauses at top level
with probability  
; 7  , which converges quickly to  with  .

 "

Usually we are not interested in randomly generating one precise formula with some non-zero
probability —which would be rather small anyway— but rather to randomly generate a class of formulae which are as similar as possible a given target class of formulae. Adding redundant non-zeros
would extend the range of shapes for formulae, extending the variance and lowering the resemblance
to the target class of formulae.

7. Discussion
7.1 The Basic and the Advanced Method
Our new testing method can be used at two different levels, depending on the attitude —and on the
skills and experience— of the user.
In the basic usage the clause length  is represented by lists with either only one non-zero
element (e.g., [[0,0,1]], meaning “clause length ”) or only two adjacent non-zero elements
(e.g., [[0,2,1]], meaning “clause length or 7 , with probability ; 7 and ; 7 respectively”);
similarly, the propositional/modal rate  is represented by lists with either only one non-zero element
(e.g., [[[],[],[0,1,0,0]]], meaning “  propositional literal per clause”) or only two nonzero adjacent elements (e.g., [[[],[],[0,3,2,0]]], meaning “either  or propositional
literals per clause, with probability 7 ; 3 and ; 3 respectively”); the distributions do not vary with
the depth.
In the basic way the random generator is used as a “flawless” 10 extension of the 3CNF 
method of Giunchiglia and Sebastiani (1996), which allows for setting the clause length to either
fixed integer values or to non-integer average values. The number of parameters is kept relatively
small, so that to allow a coarse-grained coverage of a significant subspace with an affordable number
of tests.











In the advanced usage, it is possible to apply any finite probability distributions to both  and  ;
moreover, it is possible to use different distributions at different depths. This opens a huge amount
of possibilities, but requires some skills and experience from the user: the representation of sophisticated multi-level distributions may be rather complicated, and may thus require some practice;
moreover, the usage of complex distributions requires some care, as the presence non-constant distributions in both clause length and propositional/modal rate may significantly enlarge the variance
of the features of the generated formulae, making the effects of the tests more unpredictable and
instance-dependent.
In order to guide the user, we provide some general suggestions for choosing the parameter sets
in a testing session. They come from both theoretical issues and our practical experience in using
the generator.



Avoid generating purely propositional top-level clauses, that is, set p = [[...,0],...].
See Sections 4.1 and 5.1. If possible, avoid generating unary top-level clause, that is, set C
= [[0,...],...]). See also Section 7.5.

10. In the sense of “free from the flaw highlighted in the work by Hustadt and Schmidt (1999) and Giunchiglia
et al. (2000)”.

378

A N EW G ENERAL M ETHOD




TO

G ENERATE R ANDOM M ODAL F ORMULAE

In organizing a testing session, fix the parameter sets according to the following order and
directives.
(i) Fix d. With d=1 the search is mostly dominated by its propositional component, with
d>2 it tends to be dominated by its modal component. d=2 is typically a good start.
(ii) Fix m. m substantially partitions the problem into m independent problems. Increasing m,
the samples tend to be more likely-satisfiable. m=1 is typically a good start.
(iii) Set C. Increasing the top level values of C, the samples tend to be more likely-satisfiable
and the propositional component of search increases, so that the transition area moves
to the right and the hardness peaks grow. Average values in  267   for the top level
distributions of C are typically a good start.
(iv) Set p. Decreasing the top level values of p, the modal component of search increases.
For the the top level distributions of p, having on average half of top-level atoms propositional (that is, the  /:243 of Section 4) is typically a good start.
(v) For each choice of the above parameters, increase N, starting from (at least) the maximum length in C, until the desired level of hardness is reached.
(vi) Make L vary within the satisfiability transition area.











When dealing with C and p, focus on top-level clause distributions first. Small variations
of C and p at top level may cause big variations in hardness and satisfiability probability.
Variations at lower levels typically cause much smaller effects.




Use convex distributions: e.g., [1,5,1] and [5,1,5] have the same mean value, but the
variance of the former is much smaller than that of the latter.




Do keep L ranging in the satisfiability transition area: increasing L out of it, the fraction of
trivially unsatisfiable samples can become relevant. To determine the satisfiability transition
area, make a preliminary check with few samples per point (say, 10) using dichotomic search.
Unlike N (and m), the parameters d, C, p make the formulas vary their shape. Thus, we
suggest to group together plots with the same d, C and p values and increasing N’s.

On the whole, the large number of parameters makes it impossible to cover the parameter space
in a reasonable amount of testing. However, just about any CNF  formula shape can be generated
so that the method described in Section 6 can be used to produce random formulae reasonably
similar to some formula(e) of interest.
7.2 Comparison with the Old 3CNF  Method
On the whole, the new method inherits all the features of the old 3CNF  method.


Scalability: Increasing ,  (and also the average clause length in  ) the difficulty of the generated
problems scales up at will. Thus it is possible to compare how the performance of different
systems scale up with problems of increasing difficulty, for each source of difficulty (e.g.,
size, depth, etc.).
Valid vs. not-valid balance: The parameter  allows for tuning the satisfiability rate of the formula
at will. Moreover, it is always possible to choose  to generate testbeds with about a 50%satisfiable rate, which allows for the maximum uncertainty.
379

PATEL -S CHNEIDER & S EBASTIANI

Termination: The new method allows for generating test sets of up to depth 3-4 which are run by
state-of-the-art systems in a reasonable amount of time.
Reproducibility: The results of each testbed are easy to reproduce because the generator’s code
and all the parameters’ values are made publicly available.
Parameterization: The random generation of CNF  formulae is fully parametric.
Data organization: The most natural way to use the new random generator is to generate tests and
plot data by increasing values of one or two parameters. This allows for easy, quantitative and
qualitative evaluations of the performances of the different procedures under test.
Moreover, the new method improves the 3CNF  method for the following features.
Representativeness: As stated in Section 6, CNF  formulae represent all formulae in the normal
upward, as there is an equivalence-preserving way of converting all
modal logics from
modal formulae into CNF  . From Theorem 6.1, the new method allows for a very finegrained sampling of the class of CNF  formulae.

% 







Difficulty: The random CNF  formulae with 
and
provide challenging test sets for

and
can be well considered
state-of-the art procedures. CNF  formulae with 
as challenges for next-generation systems. (Of course, it is not a problem to generate easy
problems too.)


Control: The parameters ,  and  allow for controlling monotonically the difficulty of the test

set. (E.g., if you increase , you are reasonably sure that your mean/median CPU time plots
will increase.) The parameter  allows for controlling the satisfiability rate. Monotonicity
allows for controlling one feature by simply increasing or decreasing one value, and thus for
eliminating uninteresting areas of the input space.
Modal vs. propositional balance: The size of the Kripke models spanned by the decision procedures has increased exponentially with the higher modal depths reached by the new test sets;
moreover, the probability of repeated top-level atoms has dramatically reduced. 11 Consequently, unlike the tests by Hustadt and Schmidt (1999) and Giunchiglia et al. (2000) the
search is no longer dominated by the pure propositional component of reasoning, and the
empirical results show that a large number of modal successors are explored.
Finally, the new method completely removes or drastically reduces the effects of the following
problems.
Redundancy: Propositional and modal redundancy had already been eliminated in the last versions
of the 3CNF  method (Giunchiglia et al., 2000). Moreover, the new method allows for
eliminating all strictly propositional clauses.
Triviality: The main cause of trivial unsatisfiability has been removed, so that trivially unsatisfiable
formulae have been relegated out of the transition areas in our experiments.
11. The number of possible distinct modal atoms increases hyper-exponentially with

380



(Horrocks et al., 2000).

A N EW G ENERAL M ETHOD

TO

G ENERATE R ANDOM M ODAL F ORMULAE

Artificiality: Our method allows the user to shape the test formulae so that to maximize the resemblance to the expected typical inputs of his/her system(s). Of course, this is done within
the limits imposed by randomness: the more irregular the typical input formulas, the higher
the variance of the randomly generated formulas, the lower their average resemblance to the
typical input formulas.
Over-size: The new method allows for generating extremely hard problems with reasonable size.
It comes from the analysis of the resulting data that hard problems require very big amounts
of both search branches and modal successors generated, so that the search is not dominated
by parsing and data managing.
The generator presented by Horrocks and Patel-Schneider (2002), extends the 3CNF  generator of Giunchiglia et al. (2000) too. However, our new generator allows for shaping the probability
distributions of both C and p, and for using different distributions at every depth level. In principle,
the generator of Horrocks and Patel-Schneider (2002) allows also for setting the probabilities & '
#
and &
by which propositional and modal atoms are negated. However, this feature is not used
#
very much—in the experiments by Horrocks and Patel-Schneider (2002) & ' is always 243 and &
is different from 243 only in one experiment— and adds nothing to the generality of the generator,
so that in our new generator we decided not to re-introduce it.
7.3 Comparison with the QBF-based Method
Before comparing our new CNF  generation method with the QBF-based generation method, we
must notice that, so far, they have been used in different ways, corresponding to the two different
test techniques briefly summarized in Section 3.






In the TANCS competition(s) (Massacci, 1999), the tests have been performed on single
data points, and the results are presented in the form of big tables, each entry consisting
of the number of successful solutions and in the rescaled geometrical mean CPU time for
such solutions. Two or more systems are compared according to their number of successful
solutions, considering the geometrical mean CPU time value only when the result is even.
This is due to the fact that a comparison between geometrical means is possible only if they
are computed on the same number of successful values, or, for a more accurate comparison,
on the same successful values.12 This method was chosen to guarantee the fairness of the
comparison between the competitors, which is the key requirement in a competition.
In this paper instead, we have focused on highlighting both the qualitative and quantitative
behavior of the system(s). Thus we have preferred plots to tables, and we have preferred
representing percentiles CPU times rather than the number of successful solutions and their
geometrical mean times. In fact, the former does not require to distinguish between successful
and non-successful solutions.13 Thus, they are much more suitable for plotting, because
a comparison on geometrical means makes sense only for those data points with the same
number of successful solutions, which is very hard to follow in a plot.

12. In case of tests exceeding the timeout, geometrical means are altered by the truncation introduced by the unsuccessful
solutions. Thus the geometrical mean makes sense only if calculated only on successful results.
13. If the percentage of successful solutions is greater or equal than , then the value -th percentile is not influenced
by the truncation of values introduced by timeouts, otherwise it is equal to the timeout value.

381

PATEL -S CHNEIDER & S EBASTIANI

Of course, both generators can be used in both ways. (See Heguiabehere and de Rijke (2001)
for some plots with the random QBF-based method.) Comparing the two approaches above in
organizing and presenting data is not one of the goals of this paper, so we restrict our analysis to the
generation methods, independently from how they have been used so far.
The QBF-based generation method of Massacci (1999) shares with our new CNF  generation
method several features —in particular Scalability, Valid vs. not-valid balance, Termination, Reproducibility, Parameterization, Data Organization, Difficulty, Modal vs. propositional balance, Redundancy and Triviality— for which considerations which are identical or analogous to

those for our new method hold, once we consider parameters , and  instead of parameters ,
 and  . The following features instead deserve more discussion.





Control: The parameters and allow for controlling monotonically the difficulty of the test set.
The parameter  allows for controlling the satisfiability rate. However, unlike the CNF 
case, the main parameters of the QBF generator (e.g., and ) do not have a direct meaning
wrt. the main characteristics of the resulting modal formulae like, e.g., the modal depth and
the number of propositional variables.



Representativeness: In general QBF formulae are good representatives for the whole class of
quantified boolean formulae, as there is a way to convert a generic quantified boolean formula
into QBF.14 (The randomly generated QBF formulae used by Massacci (1999) restrict to
those having a fixed amount of variables per alternation.) Nevertheless, the class of modalencoded QBF formulae restrict to those having candidate Kripke structures with the very
regular structure imposed by the QBF and/or binary search trees.



Artificiality: Unlike the CNF  case, the main parameters of the QBF generator (e.g., and )
do not have a direct meaning wrt. the main characteristics of the resulting modal formulae.
Thus, it is hard to choose the parameters for the random QBF generator so that to resemble
expected typical inputs of the system(s).
Over-size: One final problem with random modal-encoded QBF formulae is size. Initial versions
of the translation method produced test sets in the 1GB range, which stressed too much the
data-storage and retrieval portion of the provers. (For example, running DLP on these formulae resulted in a 1000s timeout without any significant search.) Although the encoding has
been significantly improved in this sense, the current versions still produce very large modal
formulae, mostly to constrain the Kripke structures.
Similar considerations have been very recently presented by Heguiabehere and de Rijke (2001).
On the whole, we believe that the QBF generation method is still appealing, and that the two
methods can co-exist in any empirical test session.
14. Notice that by “QBF” here we denote the class of prenex CNF QBF formulae, given by an alternation of quantification
variables ending with an existential one followed by a CNF propositional formula. The conversion works by lifting
quantifiers outside the formula and then converting into k-CNF [k-DNF] the matrix if the innest quantifier is an [a ,
negating the result and pushing down the negation recursively]. The conversion is truth-preserving [truth-inverting].


382

A N EW G ENERAL M ETHOD

TO

G ENERATE R ANDOM M ODAL F ORMULAE

7.4 Complexity Issues
From a purely theoretical viewpoint, it is remarked that modal-encoded QBF formulae can capture
the problems in  , while CNF  formulae are “stuck at NP” (Massacci, 1999) 15 . This statement
requires some clarification.
First, test sets are necessarily finite, therefore it makes no sense to attribute to them a complexity
class. Thus, when speaking of complexity classes for test problems, we do not refer to test sets, but
rather to the infinite sets of formulae we could generate if we could have unbounded values for (at
least one of) the generation parameters. In particular, the statement above means that the infinite set
of QBF formulae with unbounded number of variables per alternation and bounded alternation
depth is complete for  (Garey & Johnson, 1979), while the infinite set of CNF  formulae
with bounded depth and unbounded number of propositional variables is in NP (Halpern, 1995).
Secondly, the alternation depth and the variable number per alternation are not the “QBFanalogous” of
’s modal depth and variable number respectively, as both the latter values for
the resulting modal formulae grow as
. 16 In fact, QBF formulae with bounded alternation
depth and unbounded number of variables per alternation give rise to modal formulae of both
unbounded depth and unbounded number of variables.
Finally, the “  vs. NP” issue of Massacci (1999) is not a matter of generators, but rather a
matter of how such generators are used, and of how results are organized and presented. In fact,
so far random CNF  testbeds have always been organized by fixing all the parameters except 
(modal depth  included!) and making  vary. This choice, whose goal is to produce data plots
covering the satisfiability transition area, is what causes the testbed formulae to be “stuck at NP”.
To avoid this fact, one may want to make  vary and to fix all the other parameters, as
satisfiability with unbounded depth and bounded number of propositional variables is PSPACEcomplete (Halpern, 1995).



% 



&  )"



%

7.5 Asymptotic Behavior
Achlioptas et al. (1997) presented a study on the asymptotic behavior of random CSP problems.
They showed that, for most well-known random generation models (which did not reveal flaws in

empirical tests) the probability that problems are trivially unsatisfiable tends to 1 with
	 ,

being the number of variables. Gent et al. (2001) lately explained this discrepancy between
theoretical and empirical results by showing that the above phenomenon happens with significant

probability only for values of which are out of the reach of current CSP solvers.
The problem is due to the possible presence of (implicit) unary constraints causing some variable’s value to be inadmissible. If this occurs with some non-zero probability, then with non-zero
probability some variable may have all its values inadmissible. This causes a “local” inconsistency


of the whole problem, which is very easily revealed by the solver. When
 , the probability
of not having such situation tends to zero. Analogous problems have been revealed with random
SAT problems generated with the constant probability generation model, as unary clauses are gen-



15. More precisely, Massacci (1999) referred to the 3CNF  formulae of Giunchiglia et al. (2000). The statement holds
also for all the CNF  formulae.
16. As we have already noticed (Horrocks et al., 2000), a better “QBF-analogous” of the modal depth is the total number
of universally quantified variables ( 
in our case). In fact, like modal
with bounded depth,
the class of QBF formulae with bounded is only complete in NP, as it is possible to “guess” a tree-like witness
nodes.
with



   

   #


383

 	

PATEL -S CHNEIDER & S EBASTIANI

erated with non-zero probability (Mitchell et al., 1992), and with random QBF problems, as implicit
unit clauses, —i.e., clauses containing only one existential variable— are generated with non-zero
probability (Gent & Walsh, 1999). For the random k-SAT model,
, such problem does not
occur (Friedgut, 1998; Achlioptas et al., 1997).





Our generation model is far more complicated to analyze than the models above. First, CNF 
formulas have a much more complicated structure than random SAT, CSP and QBF formulas, involving a much wider number of parameters. Second, unlike with the models discussed above, the
(constraints described by) CNF  clauses are not picked in a uniform way, as the probability of
 !
"
generating a given CNF  atom
varies strongly with its depth and shape, and it is typically
much smaller than that of generating a propositional atom  .17 Thus, developing a formal probabilistic analysis for the asymptotic behavior of our model is out of the reach (and of the scope) of
this paper. However, we provide here some heuristic considerations.
The simplest case is when we do not allow the generation of unary clauses at top level, that is,
when C = [[0,...],...], so that we do not have explicit unary constraints. We may still have
 !
 !

 !

 !
 "
 "
  "
   
or

.
implicit unary constraints like, e.g., 
Anyway, a simple heuristic consideration suggests that, given the big numbers of distinct CNF 
modal atoms which may potentially be generated, such situations are more unlikely than that of
  	      	 in the standard 2-SAT model, which is
having implicit unit constraints like 
free from the asymptotic local inconsistency problem.
A more critical case is when we allow for the generation of unary clauses at top level, that
is, when C = [[x,...],...],    . In this case we can generate unary clauses, and thus
local inconsistencies, with non-zero probability. Thus, a simple way to avoid this problem is to
restrict the values of  so that not to allow unary top-level clauses, that is, to always set C =
[[0,...],...]. Notice, however, that this hardly becomes a problem in practice if we respect the condition described in Sections 4.1 and 5.1 of avoiding purely propositional top-level
clauses (that is, always set p = [[...,0],...]). In fact, given the big numbers of distinct
CNF  modal atoms which may potentially be generated, the probability of having two contradic !
 !
tory modal unit clauses
,
within the same formula becomes quickly negligible even with
small depths.
Notice that here we have intentionally not considered “modal” implicit unary constraints like,
 !

  
 ,
e.g., 
, and being mutually inconsistent modal literals (e.g., /
 !

/


). In fact, detecting such inconsistencies requires investigating recursively the
modal successors, and therefore it is not “trivial”.



" 







" 
  "
$ $ "

"  

" 

"  

"

"



$

8. Conclusions and Future Work
As shown by the test sets above our new method, in its basic form, allows us to generate a wider
variety of problems covering more of the input space. We can better-tune the difficulty of problems
for various parameter values, including the first reasonable test sets for maximum modal depths
of and 7 . We can produce interesting scaling dimensions, varying more than just the number of

propositional variables . For example, we can now vary the propositional probability  or the
size of clauses  to vary the difficulty of interesting problems. As neither  nor  are restricted to
integral values, we have extremely fine control over the difficulty of test sets. Thus we can create





17. Again, we recall that the number of possible distinct CNF 
depth (Horrocks et al., 2000).



384

atoms increases hyper-exponentially with the modal

A N EW G ENERAL M ETHOD

TO

G ENERATE R ANDOM M ODAL F ORMULAE

more interesting test sets where the satisfiable/unsatisfiable transition is explorable with current
decision procedures.
We have drastically reduced the influence of trivial unsatisfiability, which flawed the previous
CNF  methodologies when 0% . We retain the desirable features of the previous CNF  methodologies. Our test sets are easy to reproduce and are not too large.
In our full methodology we have introduced the possibility of shaping the distribution of both
the size and the propositional/modal rate of the clauses. This can be done at each level of modal
depth. This allows for generating a much wider variety of problems, covering in principle the whole

input space. For instance, we have produced a full test set with  / 3 and /93 (Figure 15).
We have not moved closer to application data, as there are no significant direct applications
of modal decision procedures and thus no guidance for the sorts of inputs that would be close to
application inputs. In any case, we believe we have moved closer than ever to the possibility of
approximating given classes of input formulae.
There is still much work to be done using our generation methodology. We can produce more
test sets and try these test sets out on various modal decision procedures. We may also want to
uncover parameter settings where the full generality of our generation method is needed to produce
reasonable test sets.

Acknowledgments
We would like to thank Thomas Eiter and the three anonymous reviewers for their valuable comments and helpful suggestions which greatly improved the quality of the paper. The second author
is supported by a MIUR COFIN02 project, code 2002097822 003, and by the C ALCULEMUS !
IHP-RTN EC project, contract code HPRN-CT-2000-00102, and has thus benefited of the financial contribution of the Commission through the IHP programme.

Appendix A: Fully-detailed Proof of Theorem 6.1

$

Theorem 6.1 Let rnd CNF  be a purely random generator as in Figure 13. Let be a sorted
CNF  formula of depth  and with  top-level clauses built on all the propositional atoms in

 #
      and on all the modal boxes in 
  
 , which has no repeated clause at top level
and no repeated atoms inside any clause at any level. Let  and  be built from so that to verify
 of Section 6. Let   and   be obtained from  and  respectively by substituting
points  and
some zero-values with some non-zero values. Then we have:

 "

$

"

$

(i) rnd CNF  (d,m,L,N,p,C) returns with some non-zero probability  ;
(ii) rnd CNF  (d,m,L,N,p’,C’) returns with some non-zero probability 

$

$

 

.

Proof The proof works by induction on the structure of . First, we prove that:

$

1. every propositional atom occurring in at some depth  is returned with the same non-zero
probability   by both rnd atom(0,m,N,p,C) and rnd atom(0,m,N,p’,C’);

 
2. every modal atom  occurring in at some depth  is returned with some non-zero probability  by rnd atom(d-i,m,N,p,C), and is returned with some non-zero probability   
by rnd atom(d-i,m,N,p’,C’);




$




385




PATEL -S CHNEIDER & S EBASTIANI

$

3. every clause  occurring in at some depth  is returned with some non-zero probability
 by rnd clause(d-i,m,N,p,C), and is returned with some non-zero probability    by
rnd clause(d-i,m,N,p’,C’).







From point 3. we have that every top level clause  	 is returned by rnd clause(d,m,N,p,C) and
 	 . As
rnd clause(d,m,N,p’,C’) with some probabilities  	 and   	 respectively, being   	
has no repeated clause, recalling a property of probabilities we have:

$




  
   
 
   
 "  
 
 
     "     " 
      	    "    



		


	     "  








"

:





/



8



 8



 

 8



/

/



	













 	 	




"




(7)

 

8

"
(8)










(9)


Notice that (8) is strictly monotonic in all its components. Thus, 
Now we need to prove points 1, 2 and 3.

 

.

+

$

1. Let  	 be a propositional atom in       occurring in at depth  , for some 
 .
Then both rnd atom(0,m,N,p,C) and rnd atom(0,m,N,p’,C’) invoke rnd propositional atom(N),

which returns  	 with probability  / ; .
  
2. Let
be a boxed clause occurring in at depth  , for some  9 and : . Then the
  

occurs in at depth  : . (Notice that <% instead of  	 :
cannot occur
clause
in at depth  , because  is the maximum depth of .)

$

$



$

$

(i) By inductive hypothesis, it follows from point 3. that  is returned with some non-zero
probability  by rnd clause(d-i-1,m,N,p,C). As   , rnd atom(d-i,m,N,p,C) invokes
  
with the non-zero probrand box(m) rand clause(d-i-1,m,N,p,C), which returns
/;
 .
ability 
(ii) By inductive hypothesis, it follows from point 3. that  is returned with some nonzero probability  
 by rnd clause(d-i-1,m,N,p’,C’). rnd atom(d-i,m,N,p’,C’)
in  
vokes rand box(m) rand clause(d-i-1,m,N,p’,C’), which returns
with the non  . Thus,    .
zero probability   /;


 



 
 



 

 

 propositional literals, which occurs in $ at depth
3. Let  be a clause with length and 5
 , for some  . As $ is sorted,  is represented as          	 " ,
	 denote modal literals.
where 
 denote propositional literals and
(i) By inductive hypothesis, it follows from point 1. that each propositional literal  	 is
   	 by rnd sign()  rnd atom(0,m,N,p,C),
returned with some non-zero probability
and it follows from point 2. that each modal literals
is returned with the non-zero
  
   by rnd sign()  rnd atom(d-i,m,N,p,C).
probability


<   



%
!

   

243

243

386



!



  

!



  

!

A N EW G ENERAL M ETHOD

TO

G ENERATE R ANDOM M ODAL F ORMULAE





By construction of  , the -th element of the  -th sublist in  is non-zero; thus, is
returned with some non-zero probability  	 by rnd length(d-i,C).

By construction of  , the   -the element of the -th sub-sublist of the  -th sublist in  is
!
non-zero; thus,  is returned with some non-zero probability  	 by rnd propnum(d,p,j).18
Similarly to (9), has no repeated atoms inside any clause, so that  is returned by
rnd clause(d-i,m,N,p,C) with the non-zero probability

$





 	   ! 	
/

	



 " 	
243

!

  	







	


   

	



!



 



















 

 

  



(10)

As with (9), the expression on the right in (10) is strictly monotonic in all its terms  	 ,
 ! 	 ,   	 ’s,    ’s within the domain of definition.
(ii) By inductive hypothesis, it follows from point 1. that each propositional literal 	
243
  	 by rnd sign()
is returned with some non-zero probability 243    	

rnd atom(0,m,N,p’,C’), and it follows from point 2. that each modal literals
is re


turned with some non-zero probability 243 
 %243   by rnd sign() rnd atom(di,m,N,p’,C’).

By construction of  and   , the -th element of the  -th sublist in   is non-zero; thus,
 is returned with some non-zero probability   	 by rnd length(d-i,C’). By construction
of   from  ,   	  	 .

By construction of  and   , the   -the element of the -th sub-sublist of the  -th
!
sublist in  is non-zero; thus,  is returned with some non-zero probability   	 by

!

!
rnd propnum(d,p,j). By construction of   from  ,   	  	 .
As has no repeated atoms inside any clause, it follows that  is returned by rnd clause(di,m,N,p’,C’) with the non-zero probability






 


 










$

 
 


/
  243 "  	   
     
      
   


 
Because of the strict monotonicity of (10) and (11), we have that    .
 

  	    ! 	

	



!

   	

	


     



	



!

(11)

Q.E.D.

References
Achlioptas, D., Kirousis, L. M., Kranakis, E., Krizanc, D., Molloy, M. S. O., & Stamatiou, Y. C.
(1997). Random constraint satisfaction: A more accurate picture. In Smolka, G. (Ed.), Principles and Practice of Constraint Programming, Vol. 1330 of Lecture Notes in Computer
Science, pp. 107–120, Berlin. Springer.
Beckert, B., & Goré, R. (1997). Free variable tableaux for propositional modal logics. In Automated
Reasoning with Analytic Tableaux and Related Methods: International Conference Tableaux’97, Vol. 1227 of Lecture Notes in Artificial Intelligence, pp. 91–106, Berlin. Springer.





18. Notice that   is a conditioned probability, that is, the probability of having  propositional literal provided the
clause has  literals. This matches the fact that  is an input in rnd propnum(d,p,j).

387

PATEL -S CHNEIDER & S EBASTIANI

Cadoli, M., Giovanardi, A., & Schaerf, M. (1998). An algorithm to evaluate quantified Boolean
formulae. In Proceedings of the 15th National Conference on Artificial Intelligence (AAAI98), pp. 262–267, Menlo Park, CA. AAAI Press.
Friedgut, E. (1998). Sharp thresholds of graph properties, and the k-sat problem. Journal of the
American Mathematical Society, 12(4), 1017–1054.
Garey, M. R., & Johnson, D. S. (1979). Computers and Intractability: A Guide to the Theory of
NP-Completeness. W. H. Freeman, New York.
Gent, I. P., MacIntyre, E., Prosser, P., Smith, B. M., & Walsh, T. (2001). Random constraint satisfaction: Flaws and structure. Journal of Constraints, 6(4), 345–372.
Gent, I. P., & Walsh, T. (1999). Beyond NP: The QSAT phase transition. In Proceedings of the
Sixteenth National Conference on Artificial Intelligence and the Eleventh Innovative Applications of Artificial Intelligence Conference (AAAI-99), pp. 648–653, Menlo Park, CA. AAAI
Press.
Giunchiglia, E., Giunchiglia, F., Sebastiani, R., & Tacchella, A. (2000). SAT vs. Translation based
decision procedures for modal logics: a comparative evaluation. Journal of Applied NonClassical Logics, 10(2), 145–172.
Giunchiglia, E., Giunchiglia, F., & Tacchella, A. (2002). SAT based decision procedures for classical
modal logics. Journal of Automated Reasoning, 28, 143–171.
Giunchiglia, F., & Sebastiani, R. (1996). Building decision procedures for modal logics from propositional decision procedures - the case study of modal K. In Proceedings of the Thirteenth
Conference on Automated Deduction, Vol. 1104 of Lecture Notes in Artificial Intelligence,
pp. 583–597, Berlin. Springer.
Giunchiglia, F., & Sebastiani, R. (2000). Building decision procedures for modal logics from propositional decision procedures - the case study of modal K(m). Information and Computation,
162(1/2), 158–178.
Haarslev, V., & Möller, R. (2001). RACER system description. In Proceedings of the International Joint Conference on Automated Reasoning, IJCAR’2001, Vol. 2083 of Lecture Notes
in Computer Science, pp. 701–705, Siena, Italy. Springer.
Halpern, J. Y. (1995). The effect of bounding the number of primitive propositions and the depth of
nesting on the complexity of modal logic. Artificial Intelligence, 75(3), 361–372.
Halpern, J. Y., & Moses, Y. (1992). A guide to the completeness and complexity for modal logics
of knowledge and belief. Artificial Intelligence, 54(3), 319–379.
Heguiabehere, J., & de Rijke, M. (2001). The random modal QBF test set. In IJCAR’2001 Workshop
on Issues in the Design and Experimental Evaluation of System for Modal and Temporal
Logics, pp. 58–67.
Heuerding, A., Jäger, G., Schwendimann, S., & Seyfreid, M. (1995). Propositional logics on the
computer. In Baumgartner, P., Hähnle, R., & Posegga, J. (Eds.), Automated Reasoning with
Analytic Tableaux and Related Methods: International Conference Tableaux’95, Vol. 918 of
Lecture Notes in Artificial Intelligence, pp. 310–323, Berlin. Springer.
Heuerding, A., & Schwendimann, S. (1996). A benchmark method for the propositional modal
logics K, KT, S4.. Tech. rep. IAM-96-015, University of Bern, Switzerland.
388

A N EW G ENERAL M ETHOD

TO

G ENERATE R ANDOM M ODAL F ORMULAE

Horrocks, I. (1998). Using an expressive description logic: FaCT or fiction?. In Cohn, A. G., Schubert, L., & Shapiro, S. C. (Eds.), Principles of Knowledge Representation and Reasoning:
Proceedings of the Sixth International Conference (KR’98), pp. 636–647. Morgan Kaufmann
Publishers, San Francisco, California.

% 

Horrocks, I., & Patel-Schneider, P. F. (2002). Evaluating optimised decision procedures for propositional modal
satisfiability. Journal of Automated Reasoning, 28(2), 173–204.
Horrocks, I., Patel-Schneider, P. F., & Sebastiani, R. (2000). An analysis of empirical testing for
modal decision procedures. Logic Journal of the IGPL, 8(3), 293–323.
Hustadt, U., & Schmidt, R. A. (1999). An empirical analysis of modal theorem provers. Journal of
Applied Non-Classical Logics, 9(4), 479–522.
Hustadt, U., Schmidt, R. A., & Weidenbach, C. (1999). MSPASS: Subsumption testing with SPASS.
In Lambrix, P., Borgida, A., Lenzerini, M., Möller, R., & Patel-Schneider, P. (Eds.), Proceedings of the 1999 International Workshop on Description Logics (DL’99)., pp. 136–137.
Massacci, F. (1999). Design and results of Tableaux-99 non-classical (modal) system competition.
In Automated Reasoning with Analytic Tableaux and Related Methods: International Conference Tableaux’99, Vol. 1617 of Lecture Notes in Artificial Intelligence, pp. 14–18, Berlin.
Springer.
Mitchell, D., Selman, B., & Levesque, H. (1992). Hard and easy distributions of SAT problems.
In Proceedings of the Tenth National Conference on Artificial Intelligence, pp. 459–465, San
Jose, California. American Association for Artificial Intelligence.
Patel-Schneider, P. F. (1998). DLP system description. In Franconi, E., Giacomo, G. D., MacGregor, R. M., Nutt, W., Welty, C. A., & Sebastiani, F. (Eds.), Collected Papers from the International Description Logics Workshop (DL’98), pp. 87–89. Available as CEUR-WS/Vol-11
from http://SunSITE.Informatik.RWTH-Aachen.DE/Publications/CEUR-WS.
Patel-Schneider, P. F., & Sebastiani, R. (2001). A new system and methodology for generating random modal formulae. In Proceedings of the International Joint Conference on Automated
Reasoning, IJCAR’2001, Vol. 2083 of Lecture Notes in Computer Science, pp. 464–468,
Siena, Italy. Springer.
Pitt, J., & Cunningham, J. (1996). Distributed modal theorem proving with KE. In Minglioli, P.,
Moscato, U., Mindici, D., & Ornaghi, M. (Eds.), Automated Reasoning with Analytic Tableaux and Related Methods: International Conference Tableaux’96, Vol. 1071 of Lecture
Notes in Artificial Intelligence, pp. 160–176, Berlin. Springer.
Tacchella, A. (1999). *SAT system description. In Lambrix, P., Borgida, A., Lenzerini, M., Möller,
R., & Patel-Schneider, P. (Eds.), Proceedings of the 1999 International Workshop on Description Logics (DL’99)., pp. 142–144.

389

Journal of Artificial Intelligence Research 18 (2003) 217-261

Submitted 8/02; published 3/03

Interactive Execution Monitoring of Agent Teams
David E. Wilkins
Thomas J. Lee
Pauline Berry

WILKINS @ AI . SRI . COM
TOMLEE @ AI . SRI . COM
BERRY @ AI . SRI . COM

Artificial Intelligence Center, SRI International
333 Ravenswood Ave., Menlo Park, CA 94025 USA

Abstract
There is an increasing need for automated support for humans monitoring the activity of
distributed teams of cooperating agents, both human and machine. We characterize the domainindependent challenges posed by this problem, and describe how properties of domains influence
the challenges and their solutions. We will concentrate on dynamic, data-rich domains where humans are ultimately responsible for team behavior. Thus, the automated aid should interactively
support effective and timely decision making by the human. We present a domain-independent
categorization of the types of alerts a plan-based monitoring system might issue to a user, where
each type generally requires different monitoring techniques. We describe a monitoring framework
for integrating many domain-specific and task-specific monitoring techniques and then using the
concept of value of an alert to avoid operator overload.
We use this framework to describe an execution monitoring approach we have used to implement Execution Assistants (EAs) in two different dynamic, data-rich, real-world domains to assist
a human in monitoring team behavior. One domain (Army small unit operations) has hundreds
of mobile, geographically distributed agents, a combination of humans, robots, and vehicles. The
other domain (teams of unmanned ground and air vehicles) has a handful of cooperating robots.
Both domains involve unpredictable adversaries in the vicinity. Our approach customizes monitoring behavior for each specific task, plan, and situation, as well as for user preferences. Our
EAs alert the human controller when reported events threaten plan execution or physically threaten
team members. Alerts were generated in a timely manner without inundating the user with too
many alerts (less than 10% of alerts are unwanted, as judged by domain experts).

1. Introduction
As automation and reliable, high-bandwidth communication networks become more common, humans are increasingly responsible for monitoring and controlling the activity of distributed teams of
cooperating agents, both human and machine. Such control decisions in many realistic domains are
complex, and require human experience and judgment. Our vision is that human decision makers
will be able to perform more important tasks than continuously monitoring incoming information
by relying on an automated execution aid to alert them when significant new information warrants
their attention. We are primarily interested in domains requiring human control and will describe
two such domains. However, the majority of our techniques and analysis also apply to completely
automated execution monitoring. In fact, in one of our domains we both interact with a human
controller and autonomously adjust robot behavior and plans.
To rapidly make effective control decisions for distributed agent teams, the human needs automated support, for several reasons. First, inexpensive sensors and reliable, high-bandwidth communication networks provide large volumes of pertinent data arriving from sensors, team members,

c
2003
AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

W ILKINS , L EE , & B ERRY

and other sources. Without automated support, the human cannot cope with the volume of incoming
information. Second, plans that coordinate the activity of several team members, as many as several
hundred in our first domain, can become too complex to monitor without automated help. Third, we
are addressing domains that are dynamic, sometimes requiring responses in a few seconds or less.
Fourth, the automated team members (robots) are complex, with different failure modes and recovery procedures, and automated support for controlling them is often essential. All these challenges
are magnified as the tempo of the decision cycle increases or the user becomes stressed. Thus,
domains with the above properties require an interactive, automated assistant to support humans in
monitoring incoming information and controlling agent teams.
We will concentrate on dynamic, data-rich domains where humans are ultimately responsible
for team behavior. Realistic domains often have adversaries to overcome. These may range from
fairly benign forces of nature that introduce uncertainty, to intelligent adversaries that are trying to
actively thwart plans. An automated execution assistant should interactively support effective and
timely decision making by the human, and interact with the human to take advantage of knowledge
the human possesses that is not explicitly modeled in the machine. Ideally, an execution assistant
would allow its human user to, among other things:
• Guide the system with minimal effort
• Focus on external events, assuming the system will alert the user when human attention is
desirable
• Understand, evaluate, and modify the plans/actions
• Understand why and why not for each action or decision taken/recommended/rejected by the
system
• Have constant multimodal feedback
• Recommend actions and decisions that violate constraints when warranted
One key idea is that rich plan representations allow the execution aid to share context with users,
so both understand the semantics of plans and requests. Understanding the plan is the key to helping
the user deal with the possible information glut created by advanced information systems. The
execution aid uses the plan to filter, interpret, and react to the large volume of incoming information,
and can alert the user appropriately when events threaten the plan or the user’s physical existence.
Once the user develops trust in the execution aid, there will be a reduction of the need for human
monitoring of the display of the information system, while simultaneously increasing the amount
of relevant information monitored because the aid analyzes every piece of incoming data. Relying
on alerts from an automated aid allows the human to pay attention to more important tasks than
monitoring incoming data, attending to the display only when alerted by the execution aid.
In the next section, we characterize the domain-independent challenges posed by this problem,
concentrating those that are unique to interactive execution aids in dynamic domains with distributed
teams of cooperating agents. Then, we describe how properties of various domains influence these
challenges and their solutions. In Section 4, we present a domain-independent categorization of the
types of alerts a plan-based monitoring system might issue to a user. Next, we describe the concept
of value of information and alerts that is key to reducing unwanted alerts (alarms). Sections 6
218

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

and 7 describe the Execution Assistants we implemented in the small unit operations and robotics
domains, respectively. Sections 6.8 and 7.5 contain the results of evaluations performed in each
domain. Finally, we discuss related work and present our conclusions.

2. Interactive Monitoring Challenges
There has been great interest in plan generation algorithms, but less work on using plans to dynamically control execution. Much execution monitoring work describes monitors in specific domains,
so we first characterize the domain-independent challenges of monitoring agent teams.
There are several “universal” challenges of execution monitoring that are not particular to dynamic, data-rich domains or interactive monitoring. These issues should be part of a monitoring
ontology and are addressed in our EAs, but we do not stress them in our discussion as they are
discussed elsewhere (Kaminka, Pynadath, & Tambe, 2001; Jonsson, Morris, Muscettola, & Rajan,
2000; Muscettola, Nayak, Pell, & Williams, 1998; Myers, 1999; Wilkins, Myers, Lowrance, &
Wesley, 1995; Coiera, 1993; Durfee, Huber, Kurnow, & Lee, 1997). The issues include the following:
• Sensitivity of the monitor — its ability to detect problems or meet requirements. The system
must remain reactive to incoming data while performing monitoring tasks.
• Temporal reasoning and temporal sensitivity. Execution takes place over time and plans specify future actions, thus making temporal reasoning central.
• Concurrent temporal processes. Multiple tasks or agents may be executing concurrently.
• Synchronization between agents. An execution assistant must get the right information to the
right team members at the right time to support the cooperative activity specified in the plan.
In some domains, this may require doing plan recognition on other team members (Kaminka
et al., 2001).
• False and redundant alarms. Unwanted alarms are ubiquitous in data-rich domains such as
medicine (Koski, Makivirta, Sukuvaara, & Kari, 1990; Tsien, 1997) and the domains described in this paper.
• Combining event-driven and goal-driven behavior. The execution assistant must respond to
unfolding events with acceptable latency while concurrently invoking actions that will continue execution of the (perhaps modified) plan and satisfy user requests. Goal-driven tasks
include responses to events, such as generating modified, new, or contingency plans, and
invoking standard operating procedures.
• Adversarial reasoning, including plan and pattern recognition. Many real-world domains have
adversaries and their activity must be closely monitored.
We are concerned with execution monitoring of agent teams, where team members may be
any combination of humans and/or machines. We concentrate on the challenges that are unique to
interactive execution aids in dynamic domains, and categorize these challenges into the following
four categories.
Adaptivity. The output of an execution assistant must meet human requirements and preferences for monitoring behavior, providing high-value alerts and suggestions. As in all execution
219

W ILKINS , L EE , & B ERRY

monitoring, sensitivity is crucial, but in interactive monitoring the sensitivity of the monitor must
also be adaptable. In addition to adapting to user preferences, the analysis done by an execution
assistant and its level of autonomy must be adjustable to operational tempo and incoming data rate.
The system should ideally adapt its output to the user’s capabilities and cognitive load.
Plan and situation-specific monitoring. Coordinating the activities of many teams members
requires a plan shared by the team. We will assume that plans contain partial orders of tasks for
each team member, as well as any necessary coordinating instructions and commitments (Grosz &
Kraus, 1999). The plan representation also encodes some of the expected outcomes (effects) of plan
execution, so that execution aids can detect deviations. The analysis done by an execution assistant
and any suggested responses must depend on the plan and situation to be effective, because events
often cause a problem for some plans but not for others. We found that monitoring algorithms
must often be tailored to the specific tasks that compose plans. To facilitate interaction, the plan
representations must be understandable by both humans and the system, although the human might
be aided by multiple plan views of the internal representation in a user-friendly interface.
Reactivity. Any execution monitor must react to events and uncertainty introduced by the environment. In dynamic, data-rich domains, particular care must be taken to ensure that the system
remains reactive with high rates of incoming information and fast decision cycles. Resources are
not generally available to perform all desired analyses for every input — for example, projecting
future problems with multiple simulation runs or searching for better plans may be computationally
expensive. There are often no obvious boundaries to the types of support an execution aid might
provide in a real-world domain. Therefore, a balance must be struck between the capabilities provided and resources used. A few examples show the types of issues that arise in practice. In our
first domain, only coarse terrain reasoning was used, as projections using fine-grained terrain data
were computationally expensive. In our robot domain, we had to adjust the time quanta assigned
to processes by the scheduler so that our monitoring processes were executed at least every second. Finally, in domains with dangerous or intelligent adversaries, reacting to their detected activity
becomes a high priority. There has been considerable research on guaranteeing real-time response
(Ash, Gold, Seiver, & Hayes-Roth, 1993; Mouaddib & Zilberstein, 1995), but the tradeoffs are generally different in every application and are usually a critical aspect of the design of an execution
assistant.
High-value, user-appropriate alerts. Alerting on every occurrence of a monitored condition
that is possibly a problem is relatively easy; however, the user would quickly ignore any assistant
that gave so many alerts. The challenge is to not give false alarms and to not inundate the user with
unwanted or redundant alerts. The system must estimate the utility of information and alerts to the
user, give only high-value alerts, and present the alerts in a manner appropriate to their value and the
user’s cognitive state. We found that a common challenge is to avoid cascading alerts as events get
progressively further away from expectations along any of a number of dimensions (such as time,
space, and resource availability). Another challenge that we will not discuss in depth is aggregating
lower-level data (e.g., sensor fusion), which can reduce the number of alerts by consolidating inputs.
Estimates of the value of alerts can be used to adjust alerting behavior to the user’s cognitive load.
Interactive alerting during execution naturally leads to the equally important and challenging
topic of human directing of responses and plan modifications. Our monitoring technologies have
been used in continuous planning frameworks (Wilkins et al., 1995; Myers, 1999), but we will limit
the scope of this paper to interactive alerting. We briefly mention some ongoing research on this
topic that we either are using or plan to use in conjunction with our execution aids.
220

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

Agent systems that interact with humans are an active area of research, and the issues are discussed in the literature (Myers & Morley, 2001; Ferguson & Allen, 1998; Schreckenghost & et al.,
2001). Myers and Morley (2001), for example, describe the Taskable Reactive Agent Communities
(TRAC) framework that supports human supervisors in directing agent teams. They address topics
such as adjustable agent autonomy, permission requirements, consultation requirements, and the
ability to communicate strategy preferences as guidance. TRAC is complementary to the execution
monitoring described in this paper.
Another active research area that fits naturally with our execution monitoring approach is theories of collaboration. In fact, we use the SharedPlans theory of collaboration (Grosz & Kraus, 1999)
in our second domain (Ortiz & Hsu, 2002) to direct agents in conjunction with the execution monitor. This theory models the elements of working together in a team as well as the levels of partial
information associated with states of an evolving shared plan. Central to the theory of SharedPlans
is the notion that agents should be committed to providing helpful support to team members. Within
the theory, this notion of helpful behavior has been formally defined (Ortiz, 1999). The work on
collaboration is complimentary with our monitoring approach, but will not be discussed in detail.

3. Monitoring Approach Determined by Domain Features
The domain features and monitoring challenges with which we are concerned are common in many
domains in addition to robot teams and small unit operations (SUO). For example, they occur in
the monitoring of spacecraft (Bonasso, Kortenkamp, & Whitney, 1997; Muscettola et al., 1998) and
monitoring in medicine (Coiera, 1993) for ICU patients or for anesthesia. These domains are also
data rich — medical clinicians have “difficulty in using the vast amount of information that can
be presented to them on current monitoring systems” (Weigner & Englund, 1990; Coiera, 1993).
In particular, the problem of flooding human users with false or redundant alarms is ubiquitous in
medical monitoring (Koski et al., 1990; Tsien, 1997). One study found that 86% of alarms in a
pediatric ICU were false alarms (Tsien & Fackler, 1997). False alarms distract humans from more
important tasks. Such a false alarm rate would most likely make the monitor useless in fast-paced
operations. Research in these domains has concentrated on automated monitoring, with little or no
emphasis on interactive monitoring.
While the challenges described in the previous section apply to all interactive, dynamic domains, the properties of individual domains influence their solutions. One brief case study shows
how the features of the communication system and the use of legacy agents can indicate a different
monitoring approach for two similar problems. Kaminka et al. (2001) address a problem similar to ours: many geographically distributed team members with a coordinating plan in a dynamic
environment. They use an approach based on applying plan-recognition techniques to the observable actions of team members, rather than communicating state information among team members,
which they refer to as report-based monitoring.
They list four problems with report-based monitoring (Kaminka et al., 2001): (1) intrusive modifications are required to legacy agents to report state, (2) the necessary state information changes
with the monitoring task, (3) the monitored agents and the communication lines have heavy computational and bandwidth burdens, and (4) it assumes completely reliable and secure communication
between the team members. They say that (1) is their main concern, with (3) being next most
important.

221

W ILKINS , L EE , & B ERRY

Plan constraint violated
Policy constraint violated
New opportunity detected
Adversarial activity detected
Constraint violation, opportunity, or adversarial activity projected
Contingency plan suggested
System problem detected
Reporting requirement triggered
Figure 1: Top-level categories in alert ontology.

In both of our domains, we use report-based monitoring. Our agents already report their state or
can easily be modified to do so, for example, by attaching Global Positioning (GPS) devices. Our
monitoring tasks can be performed using the reports already available, although one can imagine
adding further functionality that would change the reporting requirements. In our first domain,
reports are distributed by the Situation Awareness and Information Management (SAIM) system
on a high-bandwidth network. SAIM uses novel peer-to-peer (P2P) dissemination algorithms and
forward fusion of sensor reports, greatly reducing bandwidth requirements. P2P is fault tolerant,
allowing any node to be a server. Dissemination is based on an agent’s current task, geographic
location, and relationship in the hierarchical organization of team members.
In summary, report-based monitoring works in our domains because we rely less on unmodifiable legacy agents, have more reliable communications, and have enough bandwidth available with
our network and dissemination algorithms. Kaminka’s approach provides more automated support,
but we must address the problem of modeling the value of information to the user. If Kaminka’s
system was extended to interact with humans, we believe our alert ontology and techniques for
avoiding operator overload would be applicable, whether alerts come from sources based on planrecognition or from reports. Because we rely on humans as being ultimately responsible for team
behavior, we do not require as much state information nor complete reliability in communication.
Unreliable communication will degrade monitoring performance, but the human decision maker
must take missing inputs into account when making a decision. The execution assistant can monitor
communications and alert the human to possible communications problems.

4. Types of Alerts
Alerts are used to focus the user’s attention on an aspect of the situation that the execution aid has
determined to be of high value. We discuss the problem of determining the value of information
and alerts in later sections, which determines whether and how an alert is presented. An alert may
indicate that a response is required, or may just be informative. Many different types of alerts can
be given, and it is useful to categorize alerts, thus providing the beginning of a reusable, domainindependent ontology for execution monitoring.
Figure 1 shows the top-level categories for alerts that we identified by starting with a superset of the categories we found useful in our two domains and then generalizing them to cover a
broad range of domains. It is assumed that execution is directed by a plan that is shared by the
team. These categories generally require different monitoring techniques and different responses to
222

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

detected problems. For example, adversarial activity could have been a subclass of other relevant
classes, but it requires different monitoring techniques. The friendly location data is precise (within
the error of GPS) and trustworthy, while adversarial data comes from fusion engines running on
data from sensor networks. The adversarial data is highly uncertain, may come at significantly different rates, and generally will have different algorithms for determining the value of information,
as adversarial entities are actively trying to thwart your plan and perhaps are trying to kill you.
The top-level categories in our ontology generally differ along the following dimensions that
are important to monitoring:
• Properties of data sources (such as reliability and uncertainty).
• Rates of incoming data
• Method of acquiring data (such as receiving messages, pulling data from databases, doing
plan recognition)
• Monitoring algorithms, including tradeoff of complexity of analysis with reactivity
• Desired responses to alerts
• Value of information algorithms
The different monitoring techniques for each category are often domain specific, and can even
be task specific in some cases, adapting the monitoring as tasks in the plan are executed. Our
monitoring framework integrates these various techniques and then uses the concept of value of an
alert to control interaction with the user.
We briefly discuss each of the top-level categories. We have not provided the next lower level
of the ontology because the space of possibilities is large, with domain-specific concerns important.
For example, adversarial alerts could include subclasses for fixed or mobile adversaries, for size
and capabilities of the adversarial team, for an alliance or tightly coordinated adversarial team, for
adversarial intent or plan, and so forth. Later in the paper, we describe how alerts given by our
implemented execution assistants (EAs) fit into these categories.
Plan constraints. Plans provide most of the expectations of how execution should proceed, so
this category has the richest set of alerts. A fairly large hierarchical ontology could be produced
to describe different types of alerts on plan constraints. Gil and Blythe (1999) present a domainindependent ontology for representing plans and plan evaluations. Each concept in their evaluation
ontology could be a source of an alert when the evaluation becomes sufficiently important to the
user. Plans in real-world domains are often hierarchical, so constraints from different levels or
layers may be violated. It may be desirable to customize alerts based on the hierarchical level of the
plan constraint in question. To indicate the range of possible alerts in this category, we list a few
common examples:
• A coordinating team member (or the agent) is out of position or late.
• The effects of the agent’s (or a team member’s) actions were not achieved as expected.
• A team member has retracted a commitment to perform a certain task, requiring a reallocation
of tasks or resources.
223

W ILKINS , L EE , & B ERRY

• Conditions required by the plan are not true when expected.
• Resources used by the plan are not available or degraded.
Policy constraints. Most real-world domains have persistent constraints such as policies or
rules of engagement that must not be violated. While these could be considered as part of the
plan by representing them as maintenance conditions that extend over the entire plan, they are
significantly different in practice and are often monitored by different techniques, because they may
require additional domain knowledge or specialized monitoring algorithms, which must be invoked
efficiently. For example, in our domains, we never want our human team members to be killed or
our robots destroyed. Therefore, we monitor the physical safety of our agents at all times and give
alerts to the user when some agent is in danger. Dangers from adversarial agents are covered in
their own category. However, the system should also alert the user to threats from team members
(fratricide) and from the local agent’s own actions (e.g., a robot’s battery running low).
New opportunities. Even though the current plan can still be executed without change, it may
be possible to generate a better plan for the current situation as new opportunities arise. Determining
if an execution-time update to the world state permits a more desirable plan is a difficult problem
in general, similar to generating a new plan for the new situation. However, in real-world domains,
there are often methods for detecting new opportunities that indicate a plan revision might be cost
effective. For example, certain key features (such as “pop-up targets” in military domains) can
represent new opportunities, and there are often encoded standard operating procedures (SOPs)
that can be invoked when triggered by the current situation to improve the plan and/or react to
events. Because our monitoring is interactive, we can avoid the difficult decision of whether to
search for a better plan by alerting the user of high-value opportunities and relying on the user to
judge the best response.
Adversarial activity. This category assumes that our team members are operating in environments with adversaries that are trying to actively thwart team plans. When adversaries are dangerous
(e.g., worthy human opponents), reacting to their detected activity becomes a top priority and, in
our experience, merits customized monitoring algorithms. Recognizing immediate threats to a team
member’s physical existence or to the accomplishment of the plan is obviously important. In addition, information that allows the human to discern patterns or recognize the opponent’s plan or
intent is valuable. Our EAs recognize physical threats and adversarial activity not expected by the
plan, but do not currently perform automated plan or intent recognition on data about adversaries.
Both automated plan recognition (Kaminka et al., 2001) and inference of adversarial intent (Franke,
Brown, Bell, & Mendenhall, 2000; Bell, Jr., & Brown, 2002) are active areas of research. If algorithms are developed that reliably recognize adversarial plans or intent while using acceptable
computational resources, they could easily be invoked within our monitoring framework.
Projections. Even though the current plan can still be executed without change for the time
being, it may be possible to predict that a future failure of plan or global constraints will occur, with
varying degrees of certainty. For example, suppose the plan requires a robot to move to location X
by time T, but the robot is getting progressively more behind schedule or more off course. At some
point before T, the system can predict with acceptable certainty that this location constraint will be
violated and alert the user, who may revise the plan. In addition, new opportunities and probable
adversarial activity could be projected. Projection/simulation algorithms can be computationally
expensive, so the execution monitor must adjust its calculation of projections to match available
resources and constraints.
224

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

Contingency plans. The plan may specify contingency plans or subplans, which are to be
invoked when certain, specified conditions arise. The execution monitor should monitor these conditions and alert the user when a contingency plan has been triggered. The system can also notify
all team members automatically if the user decides to switch execution to a contingency plan. Another desirable alert in some domains might be a suggestion by the system that new contingency
plans should be generated for certain situations as events unfold in an unexpected manner. Our EAs
monitor the triggering of contingencies but do not suggest their generation.
System problems. Depending on the domain, the user may want to be alerted of problems with
incoming data streams or in the functioning of the execution assistant itself. For example, if no data
is arriving from the sensors, or over the network from other team members, this may be crucial to
helping the user interpret the situation and system alerts.
Reporting requirements. One of our basic assumptions is that the human user has experience
and knowledge that are not modeled within the system. Therefore, the system cannot always recognize how a new piece of information will affect plan execution. Some information that does not
trigger the above alerts might still be valuable to the user. The system is given reporting requirements that allow it to recognize such information. One generally useful reporting requirement would
be execution status, so the user can quickly determine that execution is proceeding as planned. Reporting requirements may take any number of forms, as appropriate to the domain. The comments
about recognizing new opportunities apply here — domains might specify requirements as SOPs,
key features, declarative statements, or heuristic algorithms. Several things fall under this category,
such as information that reduces uncertainty and/or indicates that the plan is executing as expected.
As another example, a robot might be told to immediately report any murder or fire it witnesses
while executing its planned tasks.

5. Value of Information and Alerts
Algorithms that alert on constraint violations and threats in a straightforward manner inundate the
user in dynamic domains. Unwanted alerts were a problem in both our domains and in many other
domains as well, such as medical monitoring (Koski et al., 1990). An aid that gives alerts every
second will quickly be discarded by the user in stressful situations (if not immediately). To be useful,
an execution aid must produce high-value, user-appropriate alerts. Alerts and their presentation may
also have to be adjusted to the situation, including the user’s cognitive state (or the computational
state of a software agent). For example, in high-stress situations, tolerances could be increased
or certain types of alerts might be ignored or postponed. In this section, we provide a conceptual
framework for the alerting algorithms in our monitoring framework and our domain-specific EAs.
Our approach is grounded in the concept of determining the value of an alert. First, the system
must estimate the value of new information to the user. Information theory derives from communication theory and the work by Shannon (1948). In this theory, the value of information refers to
the reduction in uncertainty resulting from the receipt of a message, and not to the meaning that
the message (or the uncertainty reduction) has to the receiver (Weinberger, 2002). We use the term
value of information (VOI) in a different sense, namely, the pragmatic import the information has
relative to its receiver. (Of course, the reduction of uncertainty often has pragmatic import.) Like
Weinberger (2002), we assume that the practical value of information derives from its usefulness in
making informed decisions.

225

W ILKINS , L EE , & B ERRY

However, alerting the user to all valuable information could have a negative impact in certain
situations, such as when the alert distracts the user from more important tasks, or when too many
alerts overwhelm the user. We therefore introduce the concept of value of an alert (VOA), which
is the pragmatic import (for making informed decisions) of taking an action to focus the user’s
attention on a piece of information. VOA takes VOI into account but weighs it against the costs and
benefits of interrupting the user. If the user is busy doing something significantly more important,
then issuing an alert might not be valuable, even when VOI is high. VOA must generally estimate
the user’s cognitive state and current activities. VOA will generally determine the modality and
other qualities of alert presentation (e.g., whether one should flash red text on a computer display or
issue a loud audible warning).
VOI and VOA are highly correlated in most situations, and most general comments about VOI
apply to VOA as well. However, VOA may be low while VOI is high if the user is highly stressed
or preoccupied with more important tasks. It is also possible to have a high VOA and low VOI.
For example, mission-specific monitors might alert the user to information that has been known for
some time (and thus has little or no value as information) because the information is crucial to an
upcoming decision and the user may have forgotten it, or may be behaving in a way that indicates a
lack of awareness.
Weinberger gives a quantitative definition of pragmatic information, assuming a finite set of
alternatives that lead to well-defined outcomes, each of which has some value to the decision maker.
In realistic domains like ours, alternatives and outcomes are not precisely defined. Furthermore,
information and decision theories (including Weinberger’s) assume that the decision maker is aware
of (or has processed) previous information and can devote sufficient resources to analyzing the
current information. Under such assumptions of unlimited processing power, VOA and VOI are the
same. In most realistic domains, these assumptions do not hold. Humans are resource bounded and,
during fast-paced operations, alerts and information may be ignored and the user may not realize
the implications of information on a complex plan that coordinates many team members.
5.1 Estimating VOI and VOA
In interactive, dynamic, real-world domains like SUO, we cannot model all alternatives, their payoffs, nor all the other knowledge and probabilities required with enough precision to compute the
“theoretical” VOI and VOA. Much knowledge about VOI resides only with human experts, and
even they might have different preferences or opinions about VOI. For example, in the SUO domain, the user might be concerned about the public-relations effects of how the plan execution is
reported in the international media. It is precisely because humans have knowledge not modeled
in the system that we want our execution assistants to be interactive. In such realistic domains,
there are generally no obvious boundaries to the types of support the system should provide, and
no precisely defined evaluation functions or payoff matrixes. Thus, Weinberger’s theory and formal
techniques for computing the value of information (Athey & Levin, 2001) cannot be applied. Horty
and Pollack (2001) develop some of the foundations for a theory of rational choice that involves
estimating the cost of decisions in the context of plans. Their approach comes closer to addressing
our concerns. However, determining costs and utilities of actions will continue to require human
judgment in many domains, especially if human lives are being put at risk.
Therefore, we developed algorithms that heuristically estimate VOI using domain knowledge,
although quantitative VOI functions can easily be used in our framework. The inputs to our al-

226

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

gorithms are described in Section 5.3. These domain-specific algorithms are, and must be, easily
customized and tuned for user preferences, as well as the situation. They are invoked in domainindependent ways for a variety of purposes by the monitoring framework, and were developed with
feedback from domain experts. We believe it is feasible to use machine-learning techniques to
replace or supplement hand-coded heuristics for VOI/VOA estimation and/or the user preferences
which affect it, but this was not explored.
VOI and VOA are computed qualitatively in our domains, using several domain-specific quantitative measures in the qualitative reasoning process. Issuing an alert is a discrete event, and generally
there are a small number of options for presenting an alert. Therefore, estimating VOA is primarily a problem of categorizing the potential alert into a small number of alert presentation types or
modalities. We need to determine when the VOA crosses thresholds (defined by the VOI/VOA
specification) indicating, for example, that it is valuable to issue an alert, or that the alert should be
issued as high-priority. In our framework, the thresholds are customizable by the user and can be
mission specific, so they can change automatically as different missions in the plan are executed.
The VOI algorithms also determine what information to include in an alert.
Different alert presentations are handled by assigning a qualitative priority to each alert. For example, our SUO EA divides alerts by VOA into four equivalence classes for levels of priority, which
were already defined in the SUO domain. Each priority is presented differently to the user, from
using different modalities to simply using different colors or sizes of text or graphics. Currently, we
use three priority levels in the robotics domain, but may add more in the future as collaborating team
members make more use of the EA. These priority levels can be used to adjust alerting behavior to
the user’s cognitive load. For example, during fast-paced operations, only the highest-priority alerts
could be presented.
There are several reasons for preferring qualitative reasoning, and we draw on Forbus’s work in
describing the advantages (Donlon & Forbus, 1999; Forbus, 2002). Qualitative models fit perfectly
with making decisions, which are discrete events, and effectively divide continuous properties at
their important transitions. Thus, changes in qualitative value generally indicate important changes
in the underlying situation. Qualitative models also facilitate communication because they are built
on the reasoning of human experts and thus are similar to people’s understanding. For example,
the priority levels used in our VOA algorithms have long been named and defined in the military.
Qualitative reasoning is important as a framework for integrating the results of various qualitative
computations in a way humans can understand. Finally, the precision of quantitative models can
be a serious weakness if the underlying models do not accurately reflect the real-world situation.
Precise data can lead to precise but incorrect results in a low-accuracy model, and the precise results
can lead to a false sense of security.
These advantages of qualitative reasoning are apparent in both common sense and military reasoning. Common sense reasoning about continuous quantities is often done qualitatively. The
continuous value is of interest only when a different action or decision is required. For example,
you can ignore your fuel gauge when driving once you have decided whether or not you must refuel before reaching your destination. In addition to the priorities already mentioned, the military
quantizes many continuous properties used to describe terrain in ways that are relevant to military
operations, creating phase lines, decision points, named areas of interest, key terrain avenues of
approach, and so forth. The SUO EA incorporates these quantizations to reason about terrain’s influence on VOI and VOA and to effectively communicate information in alerts, just as the military
has used them for years to facilitate communication, collaboration, and decision making.
227

W ILKINS , L EE , & B ERRY

5.2 Properties of VOI and VOA
VOI and VOA in our dynamic domain depends primarily on whether the information will influence
decisions/responses. The execution aid must also ensure human awareness of high-value data to
support decisions only the human user can make. Thus, the system must estimate or model what the
human needs to know (e.g., by specifying reporting requirements), even if the system cannot predict
how the information might influence a decision. For example, an emerging adversarial or friendly
pattern might be crucial. If the system does not have a human-level ability to recognize plans and
patterns, then it should ensure the human decision maker is aware of the relevant data.
One obvious but important property of VOI is that it is zero if the user is already aware of
the information. Another property is that information indicating that plan execution is proceeding
according to plan can be valuable, because it influences the decision to continue as planned. The
value of such confirming information depends on the features of the domain — such information
will be more valuable in domains with high uncertainty and active adversaries.
Another feature that may be useful in certain domains is classifying the responses suggested
by a piece of information or an alert. For example, any new report may require a significant plan
modification, a minor plan modification, the invocation of a contingency plan, the application of a
standard operating procedure (SOP), or the identification of a new opportunity. However, the type of
response does not necessarily correlate with VOI, as a minor plan modification might be life saving,
while a major modification might simply reduce resource usage by ten percent. The distinction is
important because the simpler responses can more likely be handled in an automated fashion, thus
reducing the need to involve the user.
Determining what information to present in an alert requires addressing human factors. Initially,
it is important to present an alert concisely so the human can determine its import at a glance,
and assess whether to divert his or her attention from other tasks. In our EAs, the user can drill
down for more detailed information on any alert in order to assess the situation more accurately.
Finally, some domains may have concerns other than making informed decisions. For example, the
emotional state of the user or recording data of scientific value might be beneficial. In particular,
if the concern is analyzing or debugging system performance rather than making good execution
decisions, a different VOI estimator can be used to provide alerts about system behavior.
5.3 VOI and VOA Criteria
As described above, the VOI and VOA algorithms will generally be heuristic, domain-specific, and
user customizable. Here we identify most of the inputs that will be applicable to most interactive,
dynamic domains. We started with a superset of the VOI criteria we found useful in our two domains
and then generalized them to be domain independent. (The properties of the user listed below are
estimates from system models of the user, as the user’s mental state is not accessible.)
• The plan
• Policies
• User’s awareness of current situation
• System’s view of current situation
• User’s cognitive load
228

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

• Resources, especially time, available for analysis or response
• Information about adversarial agents
• Characterization of uncertainty
• Age of information and age of user’s awareness
• Source of information
The plan provides several VOI criteria: the plan may provide explicit and implicit decision
points, high-value places, times, team members, and so forth. The value of a task, constraint,
adversarial action, or team member is often determined by the plan structure and plan annotations.
The tasks in the plan can invoke task-specific VOI algorithms within our monitoring framework,
as described in Section 6. Domain policies (or specialized reasoners that implement them) and
reporting requirements should provide the knowledge necessary to determine the value of alerts
about various types of constraint violations and reports. For example, in our domains, we monitor
the physical safety of our agents. Alerts on life-threatening situations have the highest priority.
We noted that VOI tends to zero to the extent the user is already aware of the information. Thus,
determining VOI must access the current view of the situation to determine if arriving reports offer
new information or simply confirm the existing view. In data-rich domains, we assume that the
execution aid may have a more detailed description of the situation than the user (for the aspects of
the situation that are described by incoming data), because the user may be performing other tasks
and monitoring the situation only when he is alerted by the EA. Therefore, the value of alerting
the user will depend on how much the new information differs from the user’s last situation update,
even if the system has more recent data that differs only slightly from the new information.
Ideally, we would like to model the user’s cognitive load, and give lower values to noncritical
alerts when the user is consumed with addressing more critical aspects of the situation. Similarly,
we do not want to overload the system’s computational resources or ability to remain reactive, so
the value of certain information may depend on the time or resources available to analyze it.
When determining the value of information about adversaries, it is often useful to compare
developing patterns to any information about the adversary’s plans or tendencies, which could be
obtained from human intelligence analysts or generated by plan-recognition or pattern-matching
algorithms. As mentioned above, information that reduces uncertainty is valuable in domains with
high uncertainty and active adversaries. VOI can be estimated if we have a characterization of the
uncertainty present in our current view of the situation.
The age of information is also a factor in VOI — outdated reports may have zero value if newer
information has already arrived. When modeling the user’s awareness, elapsed time is a factor. The
user will be aware of alerts issued in the last few minutes, but may no longer be aware of something
that was brought to her attention yesterday or last week. Thus, the value of a proposed new alert
may increase with elapsed time since a similar alert was issued.
When a variety of sources of information exists, the source is a factor in VOI. Often, different
information sources have inherently different levels of certainty, authority, or importance. For example, the SUO EA accepts reports from both human observers and automated sensors. An EA
with such inputs might want to weigh human observations differently depending on the human and
the situation. In later sections on our implemented EAs, we describe our domain-specific VOI/VOA
algorithms, which have inputs corresponding to the inputs listed above.
229

W ILKINS , L EE , & B ERRY

6. Implementing Execution Monitors – Small Unit Operations
We have developed an execution-monitoring framework that can easily be adapted to produce interactive monitors for agent teams in dynamic domains. To support this claim, we describe two
dynamic, data-rich, real-world domains and the Execution Assistants (EAs) we have implemented
using our framework. Our first domain, Army small unit operations (SUO), has hundreds of mobile,
geographically distributed agents, which are a combination of humans, robots, and vehicles. The
other domain, UV-Robotics (Ortiz, Agno, Berry, & Vincent, 2002), is described in Section 7 and
has teams composed of a handful of cooperating, unmanned ground and air vehicles (UGVs and
UAVs) and a human controller. Both domains involve unpredictable adversaries in the vicinity of
the team members.
We originally developed our monitoring framework for the SUO domain using several personmonths of effort, although the majority of the effort was in knowledge acquisition and modeling.
The SUO monitoring framework, described below, was designed to be modular and to support the
easy insertion of domain-specific (and user-customized) system components, such as task models,
monitoring algorithms, and value-of-information estimators. Our design was validated when we
implemented a complex execution monitor in the UV-Robotics domain in about one person-week
(as described in Section 7.2). The UV EA uses the same plan representation and basic architecture
as the SUO EA, but the inputs are different as are the tasks and the monitoring algorithms that
respond to the inputs and generate alerts.
The majority of our framework also applies to completely automated execution monitoring as
demonstrated by the UV EA. A UV EA runs on each robot in the team and is used to autonomously
adjust the robot control by blending desired behaviors and automatically revising plans during execution. The UV EA also provides alerts to any human controller who is monitoring the robots.
While the framework described in this section is general, we follow it with some domain-specific
details which clarify the concepts and tradeoffs. These details may not be of interest to all readers.
6.1 SUO Problem Description
Small unit operations in the military involve hundreds of mobile, geographically distributed soldiers
and vehicles cooperatively executing fast-paced actions against an unpredictable adversary. Computational support is bandwidth restricted and must use lightweight and portable devices. Currently,
the planning decisions are all made by humans, and the plans are not machine understandable.
We implemented the SUO EA as part of a larger system: the Situation Awareness and Information Management (SAIM) system, which distributes timely, consistent situation data to all friendly
agents. SAIM uses new technologies to demonstrate a new concept of automated support (described
below) in the SUO domain. We assume many small teams of agents (human, vehicles, and eventually robots), separated and dispersed throughout a large space, operating in concert to achieve
goals. We assume that each agent has equipment providing robust geolocation (GPS), computing,
and communication capabilities. SAIM also assumes an unpredictable adversary, fast-paced action,
and a rich population of sensors controlled by cooperating team members.
The key innovations of SAIM, in addition to the EA, are a self-organizing peer-to-peer information architecture and forward fusion and tracking. Fusion of information and tracking is distributed
and done close to the source to minimize latency, bandwidth requirements, and ambiguity. Adjudication maintains consistency of distributed databases. The information architecture supports ad hoc
information dissemination based on multicast groups centered on mission, geography, or command.
230

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

Self-elected servers provide the same robustness for information dissemination that the peer-to-peer
network brings to the transport layer.
SAIM provides large volumes of geolocation data — too much information for a human controller to monitor, particularly in high-stress situations. The EA alleviates this problem by using a
machine-understandable plan to filter the information from SAIM and alert the user when events
threaten the user or the execution of the plan. A plan-aware, situation-aware, action-specific EA
can alert appropriately for the situation, thus improving decision making by enabling hands-free
operations, reducing the need for human monitoring, increasing the amount of relevant information
monitored, and prompting the user when action is required.
The complexities of plans, the number of agents, and the volume of data pose a challenge to
existing execution-monitoring techniques. Unlike a lot of AI planning work, particularly in robotics,
most actions in our domain are performed by external agents, mostly humans, and the monitor has
no access to the state of executing agents. Status information must be obtained from external inputs.
We focus on the problem of alerting human users when the situation requires attention; we
assume that the human will modify the plan as needed. This was done for several reasons. First, the
users are unwilling to cede decision making to a machine, so we first develop trust by giving useful
alerts, a capability well suited for automation if the plan can be represented with enough fidelity, and
something that provides obvious value in dealing with the information glut. Second, mistakes can
be a matter of life and death, so systems must be verifiably robust before they are given decisionmaking power. Human decision makers must take imperfect information into account, including
reports from sensor networks, other humans, and execution assistants. Third, demonstrating the
utility of automated, plan-based monitoring in this large and complex domain is likely to facilitate
future acceptance by users of plan-related automation.
name
Battalion
Company
Platoon

Abbrev
BN
CO
PLT

Entities controlled
400-600
about 100
about 30

Figure 2: Echelons in the command hierarchy with EAs.

Execution monitoring requires coordination over multiple echelons (levels in the hierarchy), so
that users know what their subordinates are doing. Figure 2 shows the echelons for which we have
demonstrated the EA. Multiple agents at each echelon must coordinate fast-paced activities over a
wide area in real time. Our task requires the solution of three difficult problems: handling the large
volume of incoming information, developing a sufficiently rich plan representation for capturing
tactical Army plans, and determining when to alert the user.
As mentioned before, the EA must give only high-value alerts to be useful. For example, once
a unit is out of position or late, the system must recognize both the import of this condition and
when the situation has changed sufficiently to issue another alert, without issuing too many alerts.
Consider the seemingly simple example of a plan specifying that a squad of 10 agents should move
to Objective Golf at 0700. What is the location of the squad? An obvious solution is to compute
the centroid of each member’s location. However, no one is near the centroid if all members are
in a large semicircle with the centroid at the center (this situation arises when the squad follows a
231

W ILKINS , L EE , & B ERRY

road around a sweeping curve). If one member is now immobile with his GPS still broadcasting, the
centroid may be seriously inaccurate. Does the centroid need to be near Golf, or is one member near
Golf sufficient, or must all members be near Golf? It depends on the mission (task) and situation. If
the mission is to observe a valley, one member is sufficient, but we might want all members for an
attack. Our solution is to use mission-specific algorithms (specified in the mission model described
in Section 6.5) for reasoning about the location of units.
The EA must avoid cascading alerts as events get progressively further away from expectations
along any of a number of dimensions (such as time, space, and resource availability). In the above
example, how close in time to 0700 should the squad be before there is a problem with achieving the
plan’s objectives? Similarly, how close in distance to Golf? Again, the time and distance thresholds
that indicate a problem depend on the mission and situation. A human uses his background world
knowledge to quickly determine if a delay affects the plan, but execution aids must have much
knowledge encoded to do this. These problems become exacerbated as the plans and missions
become more complex. Detecting friendly-fire (fratricide) risks poses even more difficult issues,
because there are typically many friendly units in close proximity.
6.2 SUO Approach
Machine understanding of the plan is the key to helping humans deal with the information glut created by advanced situation-awareness systems like SAIM. The plan specifies expectations for how
events will unfold, so the EA can compare actual events to the situations that were anticipated. We
use rich, knowledge-based plan representations (Wilkins & desJardins, 2001) to allow computers to
share context with users, so both understand the semantics of plans and requests.
We had two tasks involving significant knowledge acquisition and domain modeling: (1) we
had to model SUO plans and the actions that compose them, and (2) we had to model the value
of information and various types of alerts for users. We interacted with several domain experts to
develop these models. These tasks were aided by the centuries of analysis and modeling that have
already been done in this domain. For task 1, the Army already has a standard plan representation
called the Operations Order, which has a required structure, but the entries are mostly free text.
Primitive actions in this domain are referred to as missions, and there are Army field manuals that
describe missions in detail. We modeled missions in a hierarchical mission model. Our mission
model and plans are described in Section 6.5. For task 2, there is extensive accumulated experience
and analysis of errors and opportunities that arise during execution of SUO plans, but there are many
tradeoffs to be made. The tradeoffs and our models are described in Sections 6.4, 6.6, and 6.7.
Mission-specific execution monitoring is achieved by a novel integration of mission knowledge
represented as methods with an AI reactive control system. The EA invokes methods at appropriate
points during plan execution. The methods employ mission-specific algorithms and in turn invoke
EA capabilities in a mission-specific manner. Much of the domain and mission knowledge is encoded in the mission model and not explicitly represented in the plan itself, which specifies a partial
order of missions for each team member. The EA uses the plan to invoke the knowledge in the
mission model at the appropriate time and with the appropriate arguments.
Another feature of our approach, particularly for terrain reasoning, is the pervasive use of specialized programs, possibly external to the EA, to perform complex computations that are important
to system performance. By using alternative specialized programs, the EA can easily adapt the granularity of its reasoning and improve performance as better modules become available. For example,

232

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

API functions in our design can be used for terrain reasoning and to compute the enemy strength
from the current tracks.
Our approach builds on SRI’s continuous planning technology (Wilkins & desJardins, 2001;
Wilkins & Myers, 1998; Wilkins et al., 1995) and on the domain-independent Act formalism
(Wilkins & Myers, 1995). Act represents procedural knowledge and plans as Acts, provides a
rich set of goal modalities for encoding activity (see Section 6.5), and has been used by several
institutions (Wilkins & Myers, 1998; Durfee et al., 1997). The EA uses P RS (Georgeff & Ingrand,
1989; Wilkins et al., 1995) as its reactive control system (other reactive control systems have similar capabilities, e.g., UM-PRS (Durfee et al., 1997)). P RS is a good framework for constructing the
EA because it supports parallel activities within an agent, and can smoothly interleave responses
to external requests and events with internal goal-driven activities with its uniform processing of
goal- and event-directed behavior. P RS uses procedures encoded as Acts and its extensive graphical
tracing provides valuable insights into EA operation.
6.3 SUO Architecture
The architecture of the EA and its interactions with the SAIM system are shown in Figure 3. We
developed two major modules, the Planning Assistant (PA) and the Execution Assistant (EA), which
assist the user in generating and executing plans, respectively. We implemented only a skeletal
PA to produce machine-understandable plans, using the S IPE –2 hierarchical task network planner
(Wilkins et al., 1995). Both the PA and EA use Acts and a common knowledge base, ontology, and
mission model that is object-based and easily extended. Knowledge about actions is represented in
the mission model, and knowledge of plans, strategies, and procedures is represented as Acts.
The inputs to the EA are plans to execute, location reports, sensor tracks, and messages from
other agents (e.g., reporting mission success and failure, and ordering execution of new plans).
SAIM broadcasts up-to-date locations of all friendly agents, and broadcasts tracks that represent the
results of fusing sensor hits on nonfriendly entities. SAIM provides and the EA supports rates of
more than a dozen such inputs per second.
The EA monitors the current mission for every immediate subordinate of the EA owner, and
alerts on threats to subordinates (subordinate depth is customizable). If events threaten successful
execution of the plan, threaten the user or subordinate units, or trigger planned contingencies, the
EA issues an alert to the user, depending on the value of such an alert as determined by applying
our VOA algorithms. The user must decide how to respond. Our design and technology can also
suggest responses and/or plan modifications (Wilkins et al., 1995), but this was left for future work.
In addition to giving alerts, the SUO EA can dynamically change the command hierarchy, abort
execution of one plan and switch to monitoring a new plan, and reduce unwanted alerts to avoid
inundating the user.
EAs for every unit at every echelon process reports and give alerts locally. SAIM provides the
same tactical picture to all EAs (modulo an EA’s registration in SAIM multicast groups). Therefore,
it is not necessary for an EA to report a new threat to its superior, as the superior’s EA (as well as
the EA of other affected team members) has the same information and would already have issued a
similar alert. This architecture is fault tolerant because EAs do not rely on reports from subordinates
to determine most alerts. Thus, each EA maintains most of its functionality even if it is not in contact
with other EAs, as long as it gets SAIM position reports from one node.

233

W ILKINS , L EE , & B ERRY

PA

EA
PDA Domain KB

PDA Domain KB
Acts used
for planning

Plan
Initializer

Cue:
ACT2
(TEST (ready unit1))
Cue:

ACT1
Answer query

Executable
Plan (Act)

Execution
Manager
Requests, updates

Executable
Plan

Cue:

ACT1
Answer query

Executable plan,
monitors

Advisable
Planner Agent
Partial plan
Task organization
Assets
Guidance

Cue:
ACT2
(TEST (ready unit1))

Common: ontology
mission model

PRS

Common: ontology
mission model

SIPE

Acts used for
monitoring

Requests
Registrations
Notifications
Updates

SimFlex

Watchman
PRS

PRS

SAIM: Persistent Data Store (PDS), Disseminator, ...

Situation
Updates
Requests
Scripted Events

Figure 3: Internal architecture of the EA and PA and their interaction with SAIM. The PDS archives
plans and other data and has a continuously changing picture of the current situation.

As shown in Figure 3, the EA is implemented as multiple asynchronous P RS agents (defined below) to alleviate the computational burden on the central EA Manager agent. Asynchronous agents
provide faster response and better alerts than would a synchronous architecture, because the agents
are always using the latest information available to them without having to wait to synchronize with
other agents. To implement the EA, we extended P RS to monitor temporal constraints and to batch
incoming facts so it could handle much higher data rates.
Internal EA agents (as opposed to external team members) use the Belief-Desire-Intention (BDI)
model of agency (Rao & Georgeff, 1995). Each agent has beliefs about the state of the world, desires
to be achieved, and intentions representing actions that the agent has adopted to achieve its desires.
Each EA agent has its own controller process, which operates on its own database of beliefs, its
own set of intentions, its own monitors, its own set of Acts that encode procedural knowledge about
how to accomplish goals, and its own L ISP functions that implement the primitive actions of the
agent. An EA agent continually applies its Acts to accomplish its current intentions (tasks). The EA
appears as a single agent to SAIM and the outside world. The following are the internal EA agents.
Plan Initializer. This agent gets a plan from the PA and sends messages to the EA Manager
agent after performing all initializations necessary to begin monitoring of plan execution. Primarily,
this involves creating and loading plan monitors, and posting facts in the EA Manager database.
Watchman. This agent monitors incoming message traffic on the SAIM network, mainly by
querying for tracks and other information. It filters irrelevant or insignificantly changed reports,
and sends a message to the EA Manager when any report or message requires its attention. It
simultaneously monitors files of scripted events when such monitoring is requested. The Watchman
inserts events from scripts at appropriate times, interleaving them with live messages.

234

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

EA Manager. This agent begins plan execution immediately after receiving a plan from the
Plan Initializer. The agent implements the core EA functionality — it compares reports from the
Watchman agent to the plan and plan monitors, and generates high-value alerts.
SimFlex. This agent provides a powerful and flexible way to define the execution semantics
of an action using Acts (and thus the full power of PRS). SimFlex (simulated, flexible execution)
enables mission-specific execution monitoring (by having an Act for each mission) and makes the
system easily extendible. For example, if certain missions were to automatically command robotic
vehicles or send messages to other EAs, those actions could be easily implemented in SimFlex.
Most of the actions in our plans are executed by external human agents, in which case this agent
does little except perhaps prompt the user. Some actions, such as reorganizations, are automatically
executed in SimFlex by invoking the Execute-Mission method defined in the mission model.
6.4 SUO Alert Types
While there is extensive accumulated experience regarding the execution of SUO plans, selecting
which types of alerts to detect involved trading off several factors, such as whether the alert can be
detected from available data, the utility of the alert to the user, the cost of implementation, and the
ability to maintain reactivity given the computational expense of detecting the alert. We earlier gave
the example of balancing the usefulness of fine-grained terrain reasoning for movement projection
with its computational impact on reactivity. Thus, modeling the value of information and types of
alerts to be detected involved interaction between the domain experts and system developers. Here
we describe the types of alerts we decided to detect. More details of how we implement these and
model the value of information and alerts is given in Sections 6.6 and 6.7.
Figure 4 describes the 13 types of alerts that are detected by the SUO EA. Most of these are
time and location checking. Comparing these alerts to our categories in Section 4, the proximity
alerts are all instances of adversarial activity detected. The adversarial alerts also fit this category
and the last three adversarial alerts are also of the type plan constraint violated because expectations and requirements specified in the plan (such as locations and routes to monitor) are violated.
The contingency alert, which can be triggered by either friendly or hostile actions, is of the type
contingency plan suggested. The out-of-position, coordination, and schedule alerts are of type plan
constraint violated, but would be of type constraint violation projected when the violation is projected. The fratricide alert is of type policy constraint violated, and the unknown-position alert is of
type reporting requirement.
6.5 SUO Plans and Mission Model
Our hierarchical mission model specifies an ontology for the primitive actions, and has methods
that encode most of the domain knowledge about constraints and expected behaviors. Tailoring
monitoring to each mission is crucial because most behaviors, even something as simple as denoting
the location of a unit, are mission specific. The plan representation is a novel combination of the
mission model and an extended version of the Act formalism (Wilkins & Myers, 1995).1
1. EA plans represent plans as they are expressed in Army operations orders, but only parts of the current Army fiveparagraph order are represented in machine-understandable form. Primarily, task organization and the specific maneuver tasks and coordinating instructions from the Execution Paragraph are represented, but some other aspects are
encoded as well.

235

W ILKINS , L EE , & B ERRY

Alert Type
fratricide
out-of-position
unknown-position
coordination
schedule
contingency
contingency
monitored
ave-of-approach
hostile-expected
contact
distance
strength
proximity

FRIENDLY ALERTS
Friendly units pose a threat to each other.
Location constraints in plan violated.
Unknown location of a subordinate/coordinating unit.
Coordinating units cannot synchronize as planned.
Time constraint in plan violated.
An event has triggered a queued contingency.
ADVERSARIAL ALERTS
An event has triggered a queued contingency.
Activity at a monitored map location.
Activity on a monitored route (avenue of approach).
Expected hostile activity absent.
PROXIMITY ALERTS
A friendly unit’s first contact with a hostile entity.
Hostile entities are closer since last alert.
Threat has grown stronger since last alert.
A merged alert of more than one of the above.

Figure 4: Types of alerts generated by the SUO EA.

The Act formalism is a domain-independent AI language for representing the kinds of knowledge about activity used by both plan generation and reactive execution systems. It provides a rich
set of goal modalities for encoding activity, including notions of achievement, maintenance, testing, conclusion, and waiting. This expressiveness is necessary for representing SUO plans, which
must coordinate distributed units, trigger preplanned contingencies, and enforce a variety of execution constraints. The basic unit of representation is an Act, which can be used to encode plans,
strategies, and standard operating procedures (SOPs).
The EA can monitor any plan that is composed of missions from the mission model. The mission
model is derived from Army field manuals and elaboration by domain experts. It includes a set of
mission templates (with associated parameters) that units at various echelons could be ordered to
perform, in either a written or verbal order. Since the mission model is grounded in field manuals, it
is a first step toward formalizing a plan representation that is meaningful to end users yet amenable
for execution monitoring and other AI-related capabilities (e.g., plan generation, replanning, course
of action evaluation).
The mission model is a class hierarchy (implemented in L ISP and CLOS, the Common Lisp
Object System), with inherited methods that encode knowledge about how to monitor a particular
mission. Each leaf class corresponds to a monitorable action that may occur in a plan; each nonleaf
class encapsulates common parameters and behaviors for its subclasses. The mission model allows
most aspects of system behavior to be tailored in a mission-specific manner. Thus, specialized
methods in the mission model can, for example, use mission-specific algorithms for monitoring
progress of a movement. Methods are invoked by the EA Manager but can in turn invoke processing
in the EA Manager by posting mission-specific facts that invoke capabilities of the EA Manager
(there is an API of such facts, important facts are described later).

236

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

Each mission in the model contains a name and parameters that describe the mission. For example, the mission model contains the nonleaf movement-mission class, which contains a destination
parameter and a method for checking that the executing unit has arrived at its destination. Five
different movement missions inherit this behavior. The root class in the model is the mission class,
which encapsulates all parameters and behaviors that are shared by all missions. All missions inherit
start-time and end-time scheduling constraints and methods from this superclass.
Coverage. The mission model formalizes a substantial subset of the missions mentioned in
Army field manuals. We have enumerated 62 mission classes, and have implemented 37 of these, a
superset of those required by our scenarios. The mission model covers multiple echelons, with emphasis on battalion, company, and platoon. It does not model all aspects of missions, only those for
which SAIM can provide monitoring data, that is, those related to time and location. For example,
it does not alert on potential mission failure due to casualties incurred.
Contingencies. The mission model contains the nonleaf contingent-mission class. This class
and its leaf children classes are used to implement a mission sequence that is part of the plan but is
to be executed only when certain conditions are fulfilled. Domain experts term these portions of the
plan branches and sequels. The missions under contingent-mission contain parameters to describe
the condition, specified in the plan, that activates the contingency.
Dynamic resubordination. Army operations orders allow the command hierarchy (termed the
task organization) to be changed during the operation, although existing command and control software does not support dynamic changes to the command hierarchy. The reorganization-mission
class provides this capability in the EA. When a reorganization mission is executed, it causes the
EA to update its representation of the command hierarchy accordingly. This has a substantial effect
on EA behavior, because many EA algorithms use the command hierarchy.
Methods. Each mission provides several methods that are invoked at appropriate times by the
EA to monitor execution of the mission. This set of methods serves as an API for mission-specific
execution monitoring semantics. The following methods comprise the bulk of the API:
Post-Execution-Constraints is the main API method invoked by the EA for monitoring a mission.
It invokes methods that post and enforce various constraints.
Check-Initial-Location, Check-Final-Location confirm that unit(s) are positioned correctly at
the start and end of their mission respectively.
Start-Time-Constraints, End-Time-Constraints check that a mission is beginning and ending
execution as scheduled. These methods usually post facts in the EA Manager to invoke its
Timed Monitor mechanisms.
Location-Constraints enforces location checking of friendly units and hostile tracks for a variety
of missions.
Contingency-Satisfied determines whether a contingent mission sequence should be executed.
Respond-To-Monitored-Red-Activity is the algorithm for responding to hostile activity in places
where the plan calls for monitoring such activity.
Execute-Mission invokes any processing required to execute a mission. It is invoked by posting
a goal in the SimFlex agent, and all internal agents continue P RS execution while ExecuteMission is running.
237

W ILKINS , L EE , & B ERRY

Compute-Priority computes the priority of an alert.
Desired-Strength-Ratio is a heuristic that expresses a desired friendly:hostile ratio of combat
power.
Red-Alert-Priority computes the priority of a proximity alert, or whether an alert should be issued
at all, based on recent changes to reported strengths of a friendly unit and nearby hostile
tracks.
Wait-Until-Mission-Start, Wait-Until-Mission-End control interaction with the EA GUI with regard to mission start and end times.
Specialization of methods is useful for expressing desired behavior by the EA. For example,
the Location-Constraints method is specialized on movement-mission, coordination-mission, and
several other missions. For movement missions, the EA checks whether the centroid of the moving
unit is at its destination. For coordination missions, the EA checks whether any elements of two
coordinating units are at the specified coordination point.
6.6 SUO Execution Monitoring
The EA Manager continuously responds to new goals and facts posted in its database. The Watchman agent is asynchronously posting facts to the EA Manager database as it receives messages from
SAIM. Facts so posted include confirmations of mission starts and completions (from subordinate
EAs), orders for aborting the current plan or executing a new plan (from a superior EA), sensor
tracks, calls for fire, and location reports (from the SAIM network).
The methods in the mission model post facts to the EA Manager to invoke mission-specific
monitoring. Examples of such fact-invoked capabilities provided by the EA Manager include monitoring several types of time constraints and monitoring a specified location for activity (with options
for friendly or enemy, and expected or unexpected).
The behavior of the EA Manager is determined by the posted goals and facts, their relative timing, and the set of Acts used to respond. The EA Manager switches its focus to the highest-priority
task on each execution cycle so that all goals and facts generate responses with acceptable latency
(Georgeff & Ingrand, 1989). Execution cycles are on the order of milliseconds. System behavior
is nondeterministic because it depends on exactly which facts and goals are posted during each execution cycle, which may in turn depend on the CPU scheduling of the EA Manager, Watchman,
and SAIM processes. The number of alerts rarely varies — what does vary is the exact times of
alerts (which can vary by a few seconds), and the hostile strengths reported (which can change if
the Watchman agent gets more or fewer CPU cycles to accumulate tracks before the EA Manager
executes).
The EA Manager must constantly monitor the status and behavior of currently executing missions, while simultaneously monitoring up to a dozen incoming facts per second and determining
their impact on the plan. While monitoring a plan, it typically has on the order of 100 intentions
it is trying to accomplish at any one time, and has 107 Acts (Procedures) to apply to its intentions.
Most intentions can cause an alert to be generated. Each unprocessed report and track forms an intention. Typically, five subordinate missions are executing simultaneously. Each produces multiple
intentions: at least one for detecting the start and end of each mission, and a few for each time and

238

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

location constraint (every mission has at least a start time and an end time constraint). For example, for each time constraint, the EA Manager has intentions that monitor if the specified time has
elapsed and if the required event has occurred.
The plan-based monitoring of the EA can be viewed as asynchronously and simultaneously
interleaving the following activities. We describe these in more detail below and mention the most
important design tradeoffs.
• Initiating or aborting plan execution upon request
• Monitoring incoming location and sensor reports
• Monitoring progress of the missions and time constraints specified in executing plans
• Responding to other types of incoming requests
6.6.1 P LAN MONITORING
To monitor a plan, a request goal is posted in the database. This invokes an Initialize-Plan Act that
computes the conditions that should be globally monitored for this plan and posts facts to the EA
Manager database declaring that there is a current plan with monitors. These facts in turn cause
Acts to execute in the EA Manager, which load and execute the plan. The EA Manager traverses
through the parallel branches of this plan as missions complete.
The global monitors are computed using the API function compute-plan-monitoring-data,
which can specify domain-specific monitors. Domain-independent capabilities are also available,
such as having the system determine all predicates in plan preconditions that must be true initially
(as opposed to predicates that are achieved by plan actions that precede them). In the SUO domain,
compute-plan-monitoring-data finds all decision points and “named areas of interest” specified in
the plan, and sets up monitors for them. This monitoring is accomplished by posting facts in the EA
Manager database that cause the EA to notice any adversarial activity in these locations.
The EA can abort monitoring of one plan and switch to monitoring a new plan. This process
involves removing facts for old missions and monitors from the EA Manager database, aborting
execution of the Acts currently intended for execution, and posting a goal to execute the new plan.
6.6.2 L OCATION REPORTS
The Blue Report Act in Figure 5 is invoked every time a location report is posted in the EA Manager
database, which can happen several times each second. However, the Watchman agent filters location reports that are not of interest to the EA Manager (e.g., for entities irrelevant to the plan of the
EA owner, or because there is no change from the last report), and updates the representation of the
current situation in the EA. The Blue Report Act is specific to the SUO domain, but our framework
requires a similar Act to be written for each type of input that is to be actively monitored. For example, there is a similar UV-Robotics Act that responds to state updates (see Section 7.4). These Acts
are written using the Act-Editor (Wilkins & Myers, 1995), a tool for graphically editing procedural
knowledge (Acts) with an intuitive user interface.
This Act begins by invoking a domain-specific specialized reasoner to check for fratricide risk,
which may have the side effect of giving an alert (using the API function issue-alert). The specialized reasoner can easily be replaced by better fratricide detection algorithms in the future. Next, the
Blue Report Act checks whether the current plan has any expectations for this unit, and if so, it calls
239

W ILKINS , L EE , & B ERRY

BLUE-REPORT fact: Check-blue-report
Cue:
(CONCLUDE
(Blue-report Unit.1 X.1 Y.1 Time.2))
Preconditions:
- no entry Setting:
- no entry Resources:
- no entry Properties:
(Authoring-system Act-Editor)

N1:
(ACHIEVE (Check-fratricide-risk Unit.1 X.1 Y.1 Time.2))

N2:
(TEST
(Expected-location Unit.1 Id.1
Dest-map-object.1 Time.1 Loc-fuzz.1)

N4:
(TEST
(Not (Expected-location Unit.1 Id.1
Dest-map-object.1 Time.1 Loc-fuzz.1)))

Comment:

N3:

This Act is invoked every time a
blue location report is posted in
the database. It invokes an API
function to check for fratricide
risk, and another to check the
unit’s expected location
whenever the database has an
expected location (from the plan)
for the unit in the report.

(ACHIEVE
(Check-expected-location Unit.1 Id.1
Dest-map-object.1 Time.1 Loc-fuzz.1 :In-progress))

N5:
(RETRACT (Blue-report Unit.1 X.1 Y.1 Time.2))

Figure 5: Graphical representation of the Act that responds to every friendly location report.
the API function check-expected-location to compare the current location to the expected location,
again posting an alert if appropriate. Finally, the report fact is removed from the database.
Responding to a fused sensor track indicating adversarial activity is controlled by a similar Red
Report Act, which compares adversarial activity to plan expectations. Instead of analyzing fratricide
risk, the Red Report Act invokes a reasoner for evaluating adversarial threats. As described in
Section 6.7, this involves updating a threat envelope for each friendly unit.
6.6.3 M ISSION MONITORING
To explain mission monitoring, we give an example of how a move mission in a plan is monitored.
A move-mission ready for execution has the following parameters:
(move-mission unit start-time-constraint start-time end-time-constraint end-time destination
route formation march-technique contingency contingency-satisfied).

The EA Manager begins execution by calling three methods defined in the mission model: StartTime-Constraints, End-Time-Constraints, and Location-Constraints. Each of these posts facts in the
EA Manager database to invoke mission-specific monitoring capabilities. For example, LocationConstraints (which is specialized to the class movement-mission) posts facts about locations this
mission expects friendly units to occupy and at what time (derived from the destination and route
arguments), and might also post facts about locations where this mission expects adversarial activity
and where adversarial activity should be monitored/alerted.
The EA receives confirmation of mission start from a subordinate EA. Location reports are
continuously posted by the Watchman, and the Act in Figure 5 analyzes them with respect to the
location facts posted by Location-Constraints. Sensor tracks are similarly analyzed by a different
Act. Let us suppose that at some point during mission execution, a track shows activity in a location monitored by this mission. The EA would detect this and invoke the mission-specific method
240

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

Respond-To-Monitored-Red-Activity, which describes how this mission will respond to such an
event. For example, it could issue an alert, abort the move, execute a contingency plan, or ask the
user to choose from a set of such options.
Type
ASAP
ON-ORDER
START-AT
START-NLT
START-NET
END-AT
END-NLT
END-NET

Meaning
start/end not specified
start/end when ordered
start exactly at given time
start no later than given time
start no earlier than given time
end exactly at given time
end no later than given time
end no earlier than given time

Figure 6: Temporal constraint types.

6.6.4 T EMPORAL MONITORING
The mission model includes starting and ending time constraints for every mission. Each time
constraint consists of a temporal constraint type and an absolute time. The temporal constraint
types in the EA are shown in Figure 6. These constraints require two types of monitoring tasks:
detecting when time constraints in the plan have passed without being met, and detecting events
that occur before their specified time.
We extended P RS with a domain-independent Timed Monitor mechanism that provides a general
capability covering all our temporal monitoring requirements. This capability was implemented
in the form of Acts, with some supporting L ISP code. Four special types of timed monitors are
provided, invoked by posting facts with the predicates Check-Not-Later-Than, Check-Not-EarlierThan, Check-In-Window, and Check-Near-Time. We describe our implementation for one of these;
the others are similar. The Act Check-Near-Time checks that an event occurs within a specified
threshold of some time point and can be invoked by a fact of the form:
(Check-Near-Time event.1 time.1 mode.1 fuzz.1)
To succeed, event.1 must occur within fuzz.1 seconds of time.1, with mode.1 indicating whether
this time is absolute or relative (to the time at which this fact is posted). A Timed Monitor Act sets
up a timer that expires at the given time, and P RS reacts appropriately to either the expiration of
the timer or the occurrence of the event, posting facts to the database to note the success or failure
of the temporal constraint. Because the above Acts are fact invoked, these mechanisms enable the
establishment of separate intentions to perform timing, without blocking other processing. This
modularization enables triggers to be set up to independently respond to timing results.
6.6.5 D ESIGN TRADEOFFS
As described in Section 2, a balance must be struck between the capabilities provided and resources
used. The tradeoffs are different in every application and are usually a critical aspect of the design of
an execution assistant. In the SUO domain, terrain reasoning is a key factor in this tradeoff. Using

241

W ILKINS , L EE , & B ERRY

fine-grained terrain data to analyze progress or project future failures can overload computational
resources. Therefore, the EA uses coarse terrain reasoning, but our design allows higher-fidelity
terrain reasoners to respond to a defined set of terrain analysis requests. This feature allows the
system to adjust its analysis to the tempo of operations.
Other key features to consider when making tradeoffs between reactivity and capabilities are
the amount of processing done by the mission-monitoring methods, the report-monitoring Acts, and
any specialized reasoners (such as terrain reasonsers) invoked by the methods or Acts. The user
can adjust the frequency of monitoring at any time by customizing parameter settings. Currently,
the SUO EA is not computationally overburdened while analyzing every report in full, but adding
more computationally expensive projections or alerts in the future could cause reconsideration of
this design decision. Finally, the amount of filtering of incoming reports done by the Watchman
agent affects this balance.
6.6.6 OTHER

FEATURES AND IMPLEMENTATION

The EA responds to other requests, such as calls for fire, which are described in Section 6.7. Several
other capabilities were implemented to make the EA easier to use and understand. Two are briefly
mentioned here. We implemented a GUI, not meant for military users, but rather to facilitate evaluation and understanding of the EA. The GUI displays all alerts in different scrollable windows for
each priority level, the current time, and the current mission of each subordinate of the EA owner.
The user can confirm mission starts and ends locally, although this might be done with voice or
some other modality in a fielded system. When a confirmation arrives from a subordinate EA, the
confirmation window for that mission is destroyed. Thus, confirmations and prompts can be given
locally or received in messages, with a seamless interleaving of those two types of confirmation.
The EA, PA, mission model, P RS and S IPE –2 are implemented in C OMMON L ISP, CLIM, and
CLOS. The EA also contains procedural knowledge in the form of Acts. SAIM was implemented
in C++ and Java, using the ACE Object Request Broker for CORBA. C++ was used to interface the
EA to SAIM and CORBA.
6.7 Alert Detection and VOI/VOA
The central task of the EA is to notify the user of important changes to the situation that may demand
attention. The EA must also avoid excessive alerting; otherwise, the user would abandon the EA
as a nuisance. A model of the user’s cognitive state with respect to awareness of threats would
be ideal, but is unavailable. As described in Section 5, we developed algorithms that heuristically
estimate VOI and VOA using domain knowledge. The inputs to these algorithms are described in
Section 5.3. We avoid excessive alerts by issuing only high-VOA alerts. Our techniques include
• Keeping event histories for each friendly unit, for map coordinates and for important map
locations named in the plan (e.g., decision points).
• Having alerts “expire” in the sense that they can no longer be used to suppress future alerts.
• Using alert histories for suppressing alerts by time (similar alert given recently), strength
(threat not significantly stronger), and distance (threat not significantly closer).
• Merging several related alerts that apply to subordinates into one alert for the common parent.

242

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

• Providing parameters so the user can customize alerting behavior and VOI/VOA estimates.
The event histories are currently our only model of the user’s cognitive state, except for global
properties of the situation, such as operational tempo. Our VOA calculations take into account the
frequency and timing of alerts that have already been given. The histories include all alerts that were
issued to the object of the history, and may include additional events, as described in Section 7.4.
We assume that the user is aware of information about which he or she has recently been alerted.
The idea behind having alerts “expire” is that the user may have forgotten information provided too
far in the past. Thus, the EA will not use alerts older than a specified threshold to reduce its estimate
of the value of giving an alert now.
The EA’s behavior must be easily customizable, both by users and by the plan, because users
have different preferences and situations impose different requirements. The EA can be customized
in many different ways. Our VOA algorithms, which recommend alerts and classify them by priority level, are controlled by thresholds and repetition parameters, which allow alerting behavior
to be customized to the user or situation. Examples of customizable VOA parameters are the alert
expiration periods described above (default 12 minutes) and alert suppression intervals (90 seconds
for hostile alerts, 120 seconds for alerts about friendly team members) during which alerts of the
same type about the same objects are suppressed for the given interval. In terms of VOA, another
fratricide alert has no value for the first 120 seconds after the user has been alerted about a fratricide
risk from the same team member.
Examples of customizable VOI parameters are the out-of-position distance threshold (150 m),
thresholds on the strength of adversarial threats, and the time threshold for schedule alerts (30
seconds). The time threshold, for example, would be smaller for tightly coordinated operations, and
larger for more loosely coordinated plans. In terms of VOI, detecting that a team member is late has
no significant value until the tardiness reaches the given 30-second threshold. If certain missions in
the plan change this threshold, say to 10 seconds, it indicates that information about tardiness of 10
to 30 seconds has more value in the context of these missions.
The problem of avoiding unnecessary repetition of similar alerts occurs with every type of alert.
Schedule deviations can become progressively more off schedule, position deviations can become
progressively more out of position, threats can move progressively closer or become progressively
stronger, and fratricide threats can persist over time. An EA must avoid cascading alerts in each of
these cases. In our framework, customizable thresholds are often paired with either customizable
ratios or a customizable sequence of thresholds, which control how often to repeat the alert if the
mission deviates progressively more from expectations. Repeated alerts generally have a lower
VOA and are given lower priorities.
Our evaluation showed that two types of alerts in the SUO domain pose particular problems
for avoiding inundation of the user. These are proximity alerts about adversarial activity and alerts
about fratricide risks among team members. We developed VOI/VOA algorithms especially for
these two types of alerts.
6.7.1 P ROXIMITY

ALERTS

There can be a high volume of sensor tracks near friendly units prior to and during battle; it would
overwhelm the user to see an alert on every change to every track. We keep a threat envelope for
each friendly unit, consisting of tracks close enough to pose a threat to it. Tracks are placed in zero

243

W ILKINS , L EE , & B ERRY

or more threat envelopes when they appear or move. Only significant changes to the strength of the
aggregate force in an envelope or the closeness of the nearest track causes an alert.
6.7.2 F RATRICIDE RISKS
Fratricide is one of the biggest dangers on the modern battlefield. This risk increases as the range,
lethality, and accuracy of weapons increase. Increased range increases risk because there is a bigger
area in which every team member must be correctly identified. Increased accuracy increases risk
because an incorrectly targeted team member is more likely to suffer harm. Hopefully, tools like
the EA and SAIM will increase situational awareness and greatly reduce the frequency of incorrect
targeting. Usually, a large number of friendly entities are in close proximity, so many potential
fratricide situations exist.
The EA detects two types of fratricide risks: (1) from calls for fire from other team members
(which appear in messages from SAIM), and (2) friendly units near each other (which are detected
from the geolocation data). In the first case, the user who issues a call for fire is warned and asked for
confirmation if team members are within a given threshold of the target. If the request is confirmed,
a SAIM message is sent to team members, and the EA of any entity within the target threshold
immediately alerts its owner to the risk from the planned fire.
The second case produces far too many alerts if simple algorithms are used. Our algorithms are
based on the Army’s notion of unit boundaries, which are specified in the plan. When two units
are within their boundaries, no alert is issued even if they are within weapons range of each other.
Fratricide alerts are issued when one unit is in another unit’s boundaries and within weapons range
of the other unit. We handle numerous special cases, such as when two units are both outside their
boundaries and within weapons range of each other. Detection of other fratricide situations is left
for future work (e.g., misoriented units within their boundary).
6.8 SUO Evaluation
The EA was evaluated with respect to the usefulness of its output, frequency of unwanted alerts,
and real-time performance with realistic data streams. SAIM and the EA were tested against data
produced by a high-fidelity military simulator on two scenarios. The simulator has detailed models
of each type of vehicle and sensor. One scenario lasted 13.5 hours, but only the last 90 minutes
were simulated at high fidelity. (The first 12 hours had a file of scripted events, with a few dozen
tracks and reports.) The second scenario, on the same terrain, was simulated for 20 minutes. The
90-minute simulation had more than 45,000 events passed to the Watchman from SAIM, of which
13,000 were passed on to the EA Manager, which monitors only to the squad level (8 to 10 entities).
During the simulator run, scripted events also simulate messages from any team members that are
not running live (such as messages confirming mission starts and completions). The high fidelity of
the simulation provides realistic data rates and inputs, thus providing some evidence indicating that
the EA will perform as desired in the real world.
Our formal evaluation ran live with SAIM, the simulator, and several team members, each running their own copy of SAIM and the EA on different physical machines. For a shorter development
cycle, we implemented an event generator that reproduces SAIM behavior, making the SAIM network unnecessary. The event generator creates messages from files of scripted events that include
confirmations of mission starts and completions (that normally would come from a subordinate
EA), orders for aborting the current plan or executing a new plan (that normally would come from

244

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

a superior EA), and sensor tracks and location reports (that normally would come from the SAIM
network). Our event scripts contain all messages captured from a run that included the simulator
and SAIM.
6.8.1 Q UALITY

OF ALERTS

Figure 7 presents the total number of alerts by type at each echelon during a typical run. Flash
is the highest of four priorities, and “immediate” the second highest. Flash alerts are generally life
threatening (first contact with adversarial entities and fratricide), while lower-priority alerts are only
plan threatening.
We analyzed and evaluated the alerts generated from our first and most challenging scenario.
Analysis by SRI and our domain experts indicates that all important situations were alerted. Less
than 10% of alerts were judged to have such low value that they should not have been issued, and no
Flash alerts were so judged. Judging the VOA for each alert is subjective: different domain experts
may have different alerting preferences, and each alert will have some new information. We have
no firm data on the number of unwanted alerts that would lead to performance degradation for a
typical user (or that would cause a user to shut off his EA). It is clear that the 86% false-alarm rate
found in a pediatric ICU (Tsien & Fackler, 1997) would not be acceptable on the battlefield. In our
judgment and that of our domain experts, the rates of low-value alerts we achieved are acceptable.
The number of alerts in Figure 7 is reasonable for a 90-minute interval of fast-paced action, and
further elimination of alerts risks missing a high-value alert. We purposefully erred on the side of
not missing any alerts.
We have compared the alerts generated by EAs operating at different echelons (running on
different machines on the SAIM network) on the same simulation. Our analysis shows that they
detect the same threat at the same time from the same tracks, when the threat is relevant to their
plans. The alerts show plan-specific and mission-specific behavior as expected. Because of the
nondeterminism inherent in our asynchronous agents, the alerts do not always show the exact same
strength, bearing or location of a threat. Figure 8 shows one example, the BN and A CO alerts near
08:05. At this time, 2nd PLT, A CO is moving outside its unit boundary specified in the plan, and a
hostile force appears to the north of A CO moving south. Note that both EAs issue flash fratricide
alerts at 8:05. However, the other alerts are different, and specific to the plan and owner of that EA,
as we would expect.
The plan called for an Attack-By-Fire mission if tracks are observed at location DP2 (a decision
point at which hostile activity calls for a human decision). This immediate alert appears only on the
BN EA (because the contingent fire mission is in only the BN plan) and notifies the user that hostile
entities have entered DP2, triggering the contingency. AA-Diamond is a route, defined in the BN
plan, along which adversaries are likely to approach. The second alert notifies the BN user (only)
of activity on the route and reports the number of entities detected.
Both EAs independently identify the fratricide risk at 8:05, as would the EAs of the two platoons
involved. The message details the two platoons to facilitate a quick response. Next, the BN EA
issues a distance alert after detecting tracks 450m SE of the Recon PLT, which was subordinated to
the BN earlier in the plan (so only the BN EA alerts). These tracks are now closer than when an
earlier first-contact alert was issued. Finally, the out-of-position alert at 07:58 indicates that 2 PLT
is 1 km south of the route specified for its move mission. (The 2 PLT EA simultaneously alerts that
one or more of its subordinate squads are out of position.)

245

W ILKINS , L EE , & B ERRY

Number
78
33
3
2
17
5
5
9
36
19
3
1
6
0
3
4
7
6
1
0

Type of Alert
Battalion EA - 41 missions
total alerts over 13.5 hrs, 26 flash
proximity alerts
schedule alerts
out of position alerts
avenue of approach alerts
triggers contingency alerts
at-monitored alerts
fratricide alerts
A CO EA - 11 missions
total alerts over 1.5 hrs, 14 flash
proximity alerts
schedule alerts
out of position alert
avenue of approach alerts
triggers contingency alerts
at-monitored alerts
fratricide alerts
3 PLT, A CO EA - 6 missions
total alerts over 1.5 hrs, 2 flash
proximity alerts
schedule alert
all other alerts

Figure 7: Number of alerts by type at each echelon. The number of missions for each echelon
indicates the size of its plan. Only the last 90 minutes of the 13.5-hour scenario was
simulated at a high fidelity. Of the 78 Battalion alerts, all but 5 were issued over the last
90 minutes.

6.8.2 P ERFORMANCE
Our EA Manager must handle more than 100 simultaneous intentions, while determining the import
of a dozen or more new facts a second and checking alert histories for redundancy. It was not clear
that our system could do all this and still alert the user within 5 seconds of a new fact arriving, as
required by our users. We tested the EA on both scenarios to determine if it met these requirements.
In real time, the EA generated alerts in less than 2 seconds from the receipt of a new fact. We found
that the EA can not only keep up, but can run at between 10x and 20x real time. (There may be
anomalous schedule alerts because of granularity issues at high time expansion rates.) Thus, current
data rates are not close to stressing the system – at 10x real time we are processing an average of 24
events per second in our 90-minute simulation, which is double our design requirement of a dozen
events per second. We did not determine the multiple at which degradation would occur because
it is difficult to detect degradation in such a complex system. We did establish that the EA, using

246

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

From BN EA 0803-0805
DAY 2, 08:04 IMMEDIATE notification:
Red activity at DP2 triggers contingency for Attack-By-Fire
DAY 2, 08:05 ROUTINE notification:
Enemy activity on ave of approach AA-Diamond (8 vehicles)
DAY 2, 08:05 FLASH notification:
Fratricide risk 2 Plt, A Co moved out of position near 3 Plt, B
DAY 2, 08:05 IMMEDIATE notification:
Closest threat (tracked) is now closer- 450m SE of Recon PLT
From A CO EA 0758-0805
DAY 2, 07:58 IMMEDIATE notification:
2 PLT out of position for Move mission is at GL180837, should be at Line-0003 (1000 m. N of 2 PLT)
DAY 2, 08:05 FLASH notification:
Fratricide risk - 2 PLT is out of position near 3-3-B-2-66

Figure 8: BN and A CO alerts around 0805 on Day 2. There was only one A CO alert from 8:03 to
8:06, during which time there were several BN alerts.

100-meter map granularity, is easily sufficient for plan monitoring with SAIM data rates (running
on both Sun Ultra 60s under Solaris and Pentium-based machines under Linux).2
Prior to implementation of the EA, we did a performance evaluation of P RS to determine if it
could handle the input data rates required by the EA. We briefly describe our results as many other
reactive control systems are based on P RS, e.g., UM-PRS (Durfee et al., 1997). We found that it
could not handle more than 12 facts per second without unacceptably long delays, using randomly
generated facts for two predicates where each fact invoked only trivial processing (incrementing
a counter). We determined that the effects of combinatorial P RS algorithms could be avoided by
batching new facts each time through its control loop. We modified the control loop to do so, and
the performance improved remarkably. For a test case of 2,000 facts posted in 1 second, it reduced
time to respond to the first (any) fact by 84%, reduced time to respond to all facts by 72%, and
reduced memory usage by 83%. Experiments showed that a fact batch size near 55 was optimal for
reducing response time, and any value between roughly 25 and 100 was near optimal.
6.8.3 L IMITATIONS
The EA is limited by what has been modeled, by the low fidelity of some models and heuristics, and
by the scenario-specific population of the knowledge base. There are many aspects of plan execution
that we do not currently monitor, although our monitoring framework can be easily extended when
other aspects of plans are modeled. Our selected capabilities are mostly a function of the available
input data and available funding for modeling. The EA can monitor a much broader range of plans
than were used in our scenarios. In fact, it can monitor any plan composed of a partial order of
defined missions for team members.
2. All performance data are from a Sun Ultra 60 under Solaris. All product and company names mentioned in this
document are the trademarks of their respective holders.

247

W ILKINS , L EE , & B ERRY

7. Monitoring Robot Teams
We are using a team of robots to cooperatively track and pursue enemy entities that have been detected. Unmanned air vehicles (UAVs) and unmanned combat air vehicles (UCAVs) are a growing
research interest (Musliner, Durfee, & Shin, 1993), led by the availability of cheaper platforms that
are easier to use. The SRI UV-robotics project focuses on building a system to carry out a mission
objective using a team of UGVs and UAVs. Each UGV or UAV is an autonomous agent with its own
view of the world, own onboard reasoning capabilities, and own set of resources (such as power,
computation, and a unique set of sensors). During a mission, there may be limited opportunity to
communicate with the human controller. Therefore, the agents must rely on one another to complete the mission. Our research concentrates on providing reactive regulation of low-level sensor
systems and vehicle controllers so as to attain high-level mission goals, while reacting to unforeseen
circumstances and taking advantage of the evolving situation.
The UV-robotics domain resembles the SUO domain in that it requires the rapid assessment of
the operational situation, the determination of the viability of existing plans and control policies,
and the modification of goals and objectives based on those findings and the available resources.
Unlike the SUO domain, the decisions are made by the (automated) agents themselves and the
agents must negotiate solutions in a cooperative fashion. One of the challenges of UVs (or any
physically mobile agent) is the need for a reactive system. Perception of, and knowledge about,
events and actions in the physical world are generally imprecise. To perform tasks reliably and
repeatedly requires dynamic monitoring.
Just as the SUO EA filters alerts to avoid overloading the human decision maker, we must also
filter alerts to an autonomous agent to avoid overloading its computational resources. Resources are
always limited, particularly on a mobile platform, so a balance must be struck between usefulness
and resources used. A good example of such balance is the computational resources available
onboard our robots. With an infinite number of CPU cycles, we would be able to generate large
numbers of contingency plans and evaluate each with simulation. However, we have only 20% of
the CPU available for robot control and monitoring. Therefore, we have to make design decisions
that limit the complexity of both control and monitoring algorithms, possibly leaving extension
hooks in anticipation of greater processing power in the future.
7.1 UV-Robotics: Problem Description
Our long-term goal is to build, test and validate an architecture for an agent that can support multiple
goals in a dynamic environment of cooperative mobile agents. Initial tasks for our teams include
surveillance and reconnaissance, search and destroy, pursuit, and evasion. A team of robots would
be expected to perform these tasks with minimal supervision. Key components of this architecture
were identified to be negotiation, strategic planning, execution and tasking control, execution monitoring, and recovery from failure. The challenge is to not only have several robots working together
but to have them understand the effects of their actions on common team goals.
One challenge is that an agent may be working toward multiple, possibly conflicting, goals.
Thus, the agent must be constantly evaluating its commitment to actions, or tasks, that contribute to
the satisfaction of these goals. The imprecision of any action or sensory input has to be taken into
account, and its contribution toward the satisfaction of current goals or plans assessed. In addition,
the user must be kept informed of the progress of the team toward its goals. The user does not
want to be actively involved in robot control, but must be able to intervene when necessary. Thus,
248

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

monitoring must both ensure robust autonomous operation and provide the user with a window into
the operation of the team.
7.2 UV-Robotics: Architecture
The SRI UV robot architecture is based on several years of research at SRI into intelligent reactive
control, planning, negotiation, and robot motion control (Wilkins & Myers, 1995; Myers, 1996;
Wilkins & Myers, 1998; Cheyer & Martin, 2001; Konolige & Myers, 1998). It is similar to systems
like SAFER (Holness, Karuppiah, & Ravela, 2001) and SRTA (Vincent, Horling, Lesser, & Wagner,
2001) in its ability to deal with multiple goals at once and evaluate when to discard goals. Figure 9
shows our Multi-Level Agent Adaptation (MLAA) architecture. Clearly, monitoring is pervasive
and serves each layer in the architecture as well as the user (not shown).
Other Agents
Uses
Coordination

Policy Maker
Update/Ask Achievable

Query

Uses

Uses

Strategic Planner

TEAM
LEVEL
STRATEGIC
LEVEL

Update
Update

Resource Mgr.

EA Watchman
Insert Goal
Update

Query

EA Plan Initializer
EA Plan Manager

Update

TACTICAL
LEVEL
(PRS)

Process
Query

Task Blender
Primitive Action
Executor

Update

CONTROL
LEVEL

Low-level Actions

Figure 9: Multi-level Agent Adaptation Architecture.
The coordination module receives goal requests from the human commander or other agents.
The agent participates in a negotiation process to determine its role in achieving the goal. During
negotiation, the agent consults the strategic planner to create a plan, or plan segment (referred to
as a recipe), and assess the recipe’s viability given current commitments. If the negotiation process
results in the goal and its recipe being accepted, the EA Manager (see Figure 3) instantiates the
recipe and initiates its execution. The Plan Initializer also creates monitoring sentinels for use by
the EA to detect deviation from the recipe during execution. The execution of a recipe involves
activation of tasks that must be blended with other active tasks to maximize the satisfaction of
multiple goals. For example, if the robot needs to reach a waypoint by a set time, take a picture of
a location nearby, and also remain concealed, the task blender modifies the path planner at runtime

249

W ILKINS , L EE , & B ERRY

to achieve all three tasks. Finally, the lowest layer in the architecture is the interface between the
tasking architecture and the physical, or simulated, robot controller.
The monitoring in Figure 9 is done by the UV EA, which was created by using the architecture
and representations of the SUO EA. The modular design of the SUO EA made this adaptation
straightforward. The architecture and internal EA agents depicted in Figure 3 were used with little
modification, as were the plan representation and the techniques for monitoring plans, applying
VOI and VOA calculations, and issuing alerts. Our implementation of an initial UV EA (using code
from the SUO EA) was done in about one person-week, an impressive result given the complexity
of the task. The implementation included connecting to new data sources, parsing their messages,
determining and implementing the most valuable monitoring algorithms, integrating with the plans
and missions already defined, and writing domain-specific VOI/VOA algorithms. Achieving some
missions requires recalculating waypoints at least every second while using only 20% of the CPU,
so we had to trade off speed and complexity in both waypoint calculation and monitoring. The
initial version of the UV EA detected the first five types of alerts listed in Section 7.4.
7.3 UV-Robotics: Execution Monitoring Issues
The initial monitoring issues apparent within the UV-Robotics domain can be divided into the following four categories:
• Monitoring the completion of, or progress toward, a basic action (e.g., go to a waypoint)
• Monitoring the satisfaction or completion of the multiple tasks to which the robot is currently
committed (e.g., pursue evader, patrol area, photograph target every 2 hours)
• Monitoring the activity of unknown or adversarial entities
• Monitoring the state of the communication network, the robot, and other team members (e.g.,
communication network quality or integrity, robot mobility, or battery level)
Comparing these to our ontology in Section 4, the first two categories involve the general alert
types plan constraint violated and constraint violation projected. However, they exist at different
levels of abstraction and often have different temporal impact and associated monitoring requirements. The third category cleanly fits the adversarial activity detected alert type and triggers alerts
for both autonomous control and user reporting. The fourth category is essential both to team-based
automated operation and effective user interaction, and involves policy constraint violated alerts,
reporting requirement alerts, and system problem detected alerts.
7.4 The UV-Robotics Execution Assistant
Like the SUO EA, our robot controller uses a rich plan representation to allow team members to
share context and communicate with the user. Primitive actions in this domain are basic motion control and communication requests to the physical robot. A goal request from the user is decomposed
into individual agent plans (recipes) and intentions to aid or interact with other agents. Recipes are
composed of partially ordered sequences of tasks that in turn evolve into primitive actions.
The UV EA uses an internal architecture similar to the SUO EA, as shown in Figure 3. As in
the SUO EA, the EA Manager continually applies its Acts to respond to new goals and facts posted

250

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

in its database. The Acts correspond to algorithms for monitoring requirements at each layer in the
MLAA architecture. Some implement user alerts and others implement autonomous control.
The inputs to the UV EA are plans to execute, policy declarations, status reports (including
location, speed and orientation) from its own sensor suite, and messages from other agents. These
messages include status reports of other agents, reports on mission success or failure, shared information, and requests for help. Depending on communication conditions or policy restrictions,
an agent may, or may not, receive from team members status reports (up-to-date locations) of all
friendly agents and other entities within visual range. Sentinels are extracted from plans and policy
declarations, are evaluated when status reports are received, and may produce alerts. The alerts
produced are designed to serve both the autonomous control via the plan manager component, and
the user, although the needs of each vary considerably.
For our initial experimentation, all monitoring alerts were derived from regular state messages
from each team member. A state message reports the current location, velocity, attitude, and sensor
imprecision of an agent. A UV-Robotics Act similar to the SUO Act in Figure 5 is invoked every
time a location report is posted in the EA Manager database. Such postings happen several times
each second, because each robot receives two such messages every second from its own sensors and
two from each team member, based on network conditions. It also receives similar state messages
about entities within its own field of vision. This means in a team of three robots each agent will be
handling a minimum of at least six state messages per second and possibly many more depending
on the environment. Also, there are messages between agents for sharing information, which we
are not currently considering except when they update state knowledge about adversarial entities.
In the future, the UV EA will be extended to serve the higher layers of the architecture that have
more in common with the SUO-EA alert types and triggers.
Our initial implementation of the UV EA detects the following types of alerts. We plan to
implement additional monitoring during the project.
• At-goal – robot at current waypoint
• Stuck – robot stuck and not at current waypoint
• Divergent – robot diverging from current waypoint
• No-status – robot no longer reporting its state
• Target-visible – robot has a target within its sensor range
• Lost-target – robot lost track of target during pursue mission
• Target-gone – target moved out of assigned sector during pursue mission
• Collision – robot anticipates it will hit a nearby object in the next few seconds
• Handoff – robot has delegated/accepted a task to/from another team member
The UV EA uses the same techniques as the SUO EA (Section 6.7) for estimating VOA and
greatly reducing the number of low-value alerts. In particular, the UV EA keeps event histories for
each team member being monitored. These histories are used to determine the value of information
and alerts, and to detect Stuck, Divergent, and No-status alerts. For example, the history indicates
251

W ILKINS , L EE , & B ERRY

the time and the robot location at the last progress check, so if the current waypoint has not changed
and the robot is further away from the waypoint, then the value of issuing a Divergent alert should
be calculated.
The value of issuing an alert takes into consideration customizable latency thresholds and repetition parameters, which are associated with both the automated agent and the user. Some of the
agent parameters are customized to improve performance, while others are a function of the behavior of the robot. For example, the value of a divergent alert will be a function of the expected
velocity of the agent, because an agent traveling at speed will diverge more quickly than a slow
agent. Similarly, a change in orientation will influence the value of an alert because a turning agent,
while not decreasing the distance to the waypoint, may indeed be making progress toward the goal.
An example of how monitoring is used to facilitate autonomous control is illustrated by the
situation where an agent is patrolling a designated area. When an evader becomes visible, the agent
receives a Target-visible alert, which is of type adversarial activity detected. Reacting to either a
high-priority policy to pursue evaders or an explicit plan step, the agent commits to a new goal
Pursue named-evader. This goal is achieved by the activation and blending of three tasks: Follow
named-evader, Relocate named-evader and Search-for named-evader. Thus, the robot will maintain
pursuit even when the evader slips in and out of its field of vision.
The user’s preferred strategy might be to report the first sighting of the evader or to track its
position, noting whenever it disappears from view. However, the autonomous control requires notification only if the likelihood of recovering visual contact is deteriorating and the robot is searching
aimlessly. At this point, a Target-Lost alert, which is of type plan constraint violated, will be sent to
the agent’s EA Manager (and possibly the user). In this example, a policy exists for reacting to this
type of alert. It will cause the pursuit goal to be dropped and the original Patrol plan to be resumed.
7.5 UV-Robotics: Evaluation
The UV EA is being evaluated within an SRI experimental framework called the SRI Augmented
Reaility Simulator (SARS) (Ortiz et al., 2002). The framework allows our autonomous agent architecture and software to be tested within an entirely simulated environment, on a team of physical
robots, or a mixture of the two. The physical robots are three pioneer robots from equipped with
GPS, as shown in Figure 10. Initial experiments were carried out in a simulated environment. We
then ran the system in an entirely physical world with a team of two cooperating robots searching
for and pursuing two independent evader robots. We have also run in environments composed of
a combination of physical robots and simulated entities to illustrate scalability and operation with
UAVs. The monitoring technology was effective in ensuring robust execution in all environments,
and in giving human operators insight into the state and activity of each robot. This insight facilitated debugging and the process of moving from the simulated world to the physical robots as
problems were quickly identified.
SARS is specifically designed to simulate robots and UAVs. It produces the same output in terms
of sensors, actuators, and resources (battery status, communication range, and so forth). SARS
computation and simulation is based on a precise 3D model of the environment. SARS is precise
enough that we can mix physical robots moving in the real world with virtual evaders and see the
physical robots following a virtual evader — thus, the name augmented reality. Using SARS, we
are able to simulate a team of UGVs moving and/or UAVs flying in a larger space than we have
available. The team of UAVs may be larger than our available physical UAVs, as well.

252

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

Figure 10: SRI experimental Pioneer UGV.
The initial UV EA implementation was evaluated with respect to the usefulness of its output,
value of alerts, and real-time performance with realistic data streams. Our analysis shows that all
the important situations are alerted during simulated executions, and during tests with actual robots,
which are never exactly reproducible.
No-status alerts have proven useful to the human user, as they indicate a hardware or software
problem on a robot or the network. Such problems are recognized immediately (after the customizable interval of noncommunication has passed) with the UV EA, but take considerably longer to
detect without alerts from the EA. A customizable threshold (which currently defaults to 5 seconds)
determines the value of an alert when the robot has not reported its state for a certain interval.
At-goal, Stuck, and Divergent are essential alerts for the autonomous-control agent-navigation
system, as well as being useful to a human user who wants to monitor the activity of a single
robot. Knowing when the robot has reached a goal point, when it has stopped and is not making
progress toward a goal point, and when it is diverging from the planned route are essential to robust
autonomous operation. Customizable intervals also control these alerts. Subtleties of the domain
must be considered to avoid false alarms. For example, the robot may be paused because of GPS
uncertainty and the GPS should be given time to establish connection with satellites. Also, a robot
takes time to turn and thus should not be regarded as stuck or divergent until turns and steering
adjustments have had time to complete.
Target-visible, Target-lost, and Handoff are useful to both the user and the autonomous controller, particularly when the task is to monitor or pursue a target. The autonomous controller
requires immediate awareness of loss of sensor contact, so it can adjust its lower-level behavior or
sensor parameters to find the evader. However, such immediate alerts would be unproductive for the
human user or the plan-level controller. A customizable interval gives the agent time to relocate the

253

W ILKINS , L EE , & B ERRY

evader, possibly avoiding an alert to the human. These types of alerts are the most time critical in
our evaluation domain.
Good tracking of an evader requires recalculating waypoints and orientation at least every second. The UV EA was able to keep up with data inputs, detect occurrences of the types of alerts
mentioned within 1 second, and recalculate waypoint and orientation twice per second. These constraints were not difficult to meet on our desktop machines, but the success of the UV EA on the
slower processors of the physical robot involved tradeoffs of speed with complexity of waypoint
calculation and monitoring. One useful technique is only using the latest state report for an agent
when more than one state report has accumulated during one cycle of the monitoring loop. The
relative CPU access of the various agents and processes also became important. For example, we
had to adjust the time quantum given by the scheduler to our EA processes to ensure that both the
process receiving messages and the various P RS agent processes in our EA were executed frequently
enough for waypoint recalculation. This problem has been alleviated with more recent upgrades in
the onboard computer, but could recur if more computationally expensive projections or alerts are
added to the EA.

8. Related Work
Plan generation has received a lot of attention recently, but rarely are the plans used to control
and monitor execution. Even more rarely are plans monitored that involve the activity of hundreds
of agents requiring tight coordination. Previous work on execution monitoring has focused on
models where the executor performs the planned actions (e.g., a robot controller) and usually has
direct access to internal state information. In the SUO domain, most actions are performed by
external agents, usually humans, and the monitor has no access to the state of its executing agents.
Such indirect execution requires different monitoring techniques, as the executor must use incoming
messages to determine the status of agents and activities and whether actions have been initiated or
completed. The Continuous Planning and Execution Framework (Myers, 1999) has addressed the
indirect execution problem, and our system builds on its ideas. However, our domain requires
monitoring of many more constraints with greater time sensitivity. We have much higher rates of
incoming data, and must customize monitoring of each action to generate appropriate, high-value
alerts.
Robot designers have often avoided the plan representations used by the AI plan-generation
community because of their restrictive assumptions (Pollack & McCarthy, 1999; Arkin, 1998). Both
our domains required an expressive plan representation, and our combination of the Act formalism
with a hierarchical, object-oriented mission model proved sufficiently expressive, providing a rich
set of goal modalities for encoding activity, including notions of achievement, maintenance, testing,
conclusion, and waiting.
The SAM system (Kaminka & Tambe, 1999) at ISI addresses a similar problem: automated
pilot agents on a battlefield. SAM has direct access to its local automated agent and much lower
incoming data rates than the EA. It addresses the difficult problem of plan recognition (of the plans
of other friendly agents). Because humans are not involved, SAM does not need to produce alerts
tailored to human cognitive capabilities. Experiments with SAM showed that distributed monitoring
outperformed centralized monitoring while using simpler algorithms. Our EAs and SAIM use such
a distributed design, building on these insights.

254

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

More recent work at ISI has produced a monitoring agent named OVERSEER (Kaminka et al.,
2001), which also addresses a problem similar to ours: many geographically distributed team members with a coordinating plan in a dynamic environment. address the problem of modeling the value
of information to the user. OVERSEER does not use the report-based monitoring approach adopted
by our EAs, because it must rely on unmodifiable legacy agents and does not have sufficient bandwidth and reliability in communication. A detailed analysis is given in Section 3.
NASA’s Remote Agent on Deep Space One (Jonsson et al., 2000; Muscettola et al., 1998) does
autonomous execution monitoring on a spacecraft. Our domains have many of the same requirements as NASA’s, including the core requirements of concurrent temporal processes and interacting
recoveries. However, NASA’s remote agent is fully automated, which places a heavier burden on
the module that generates plans and responses, but alleviates the burden of having to address human
interaction issues such as those considered in VOA. Monitoring algorithms are not described in detail, but are based on a procedural executive, which we assume is similar to our procedural reactive
control system. In NASA’s domain, the “agents” are mechanical devices onboard the spacecraft,
and their behaviors have been formally modeled. Our agents include humans, whose behaviors are
not easily modeled, so our EAs estimate the value of alerts as they interact with a human decision
maker, who ultimately is responsible for the control decisions.
Work on rationale-based monitoring (Pollack & McCarthy, 1999; Veloso, Pollack, & Cox, 1998)
addressed the problem of monitoring the world during the plan generation process (in causal-link
planners) to see if events invalidate the plan being generated. They monitor subgoals, preconditions,
usability conditions, and user preferences. All these are monitored in our framework when plans are
executed, and our EAs have additional capabilities, such as monitoring policy constraints and applying mission-specific monitoring methods. This rationale-based work does not address time-critical
monitoring during execution time, monitoring large volumes of incoming data, or the problem of
alerting users without overwhelming them.
Doyle (1995) describes a technique to focus the user’s attention on anomalous system behavior,
particularly sensor behavior. This work would be applicable within the lowest layer in our robotics
control module. It uses causal modeling to understand the “normal” behavior of a sensor. Anomaly
detection is based on measures of causal distance and distance from normal behavior. The distance
measures are not related to the plan and its goals/actions; instead they measure deviation from typical behavior. The user still has to relate the reported sensor anomaly to its higher-level effects, such
as a threat to plan or action execution. This work provides a monitoring technique for specific sensor and system types that could easily be incorporated in our monitoring framework. The resulting
anomaly detection might give low-level alerts or be a contributory factor in the reasoning process
for higher-level alert classes.
The Phoenix system uses the concept of a plan envelope (Hart, Anderson, & Cohen, 1990)
to represent the a priori expectations of an action’s progress. Envelopes are used when an action
executes over time and can be interrupted and altered during execution. The envelope captures
the range of possible performance of an action during successful execution. During execution, the
actual performance of the system is recorded and, if it deviates from the predefined envelope, a
possible failure is detected. This concept provides a useful monitoring technique for specific alerttypes, particularly those concerning actions that consume a variable amount of resources over time.
Envelopes can also identify when an action is performing better than required allowing opportunistic alerts. Envelopes could easily be incorporated in our monitoring framework as an additional
monitoring technique, and could be useful at the higher levels in both our domains.
255

W ILKINS , L EE , & B ERRY

The SUO EA provides a capability that does not currently exist, because there is no machineunderstandable representation of the plan on the battlefield. Currently, small-unit warfighters must
monitor all incoming information for relevance, with manual notification of other team members.
The SUO EA also improves on next-generation Army systems such as FBCB2 (Force XXI Battle
Command Brigade and Below) (Garamone, 2001). Unlike FBCB2, the EA alerts only on important
changes, can automatically update the areas to be monitored as the plan is executed, can dynamically change the force structure, and can alert the user to many issues that are not monitored in
other systems, such as fratricide risks, triggering of contingencies, and schedule, coordination and
positional deviations from the plan.

9. Conclusions
We characterized the domain-independent challenges posed by an execution aid that interactively
supports humans monitoring the activity of distributed teams of cooperating agents, both human and
machine. The most important issues for interactive monitoring are adaptivity, plan- and situationspecific monitoring, reactivity, and high-value, user-appropriate alerts. We showed how properties
of various domains influence these challenges and their solutions. We then presented a top-level
domain-independent categorization of the types of alerts a plan-based monitoring system might
issue to a user. The different monitoring techniques generally required for each category are often
domain specific and task specific.
Our monitoring framework integrates these various techniques and then uses the concept of
value of an alert to control interaction with the user. This conceptual framework facilitates integration of new monitoring techniques and provides a domain-independent context for future discussions of monitoring systems. We discussed various design tradeoffs that must be made during the
application of our monitoring framework to a domain (Sections 6.4 and 6.6).
We use this framework to describe a monitoring approach we developed and have used to implement Execution Assistants (EAs) in two different dynamic, data-rich, real-world domains. Our
approach is based on rich plan representations, which allow the execution aid to filter, interpret,
and react to the large volume of incoming information, and alert the user appropriately. An expressive plan representation is necessary for representing SUO plans, which must coordinate distributed
units, trigger contingencies, and enforce a variety of constraints. It is equally important that this
representation be monitorable by machines and meaningful to humans. Our plan representation
and mission model were able to model a representative SUO scenario with enough fidelity to provide value (as judged by our domain experts) and was also sufficient for plans in the UV-Robotics
domain.
We developed a sufficiently rich plan representation by extending an existing plan representation
with a hierarchical, object-oriented mission model that encodes knowledge about primitive actions
and mission-specific monitoring methods. The SUO EA implements a novel integration of these
hierarchical monitoring methods with a reactive control system. The EA invokes the most specific
methods defined in the hierarchy at appropriate points during monitoring.
One central challenge, in our domains as well as medical monitoring, is to avoid overwhelming
the user with unwanted alerts and/or false alarms. We define the concepts of value of information
and value of giving an alert as the principles for determining when to give an alert. We describe the
properties of VOI and VOA, criteria for computing them, the advantages of qualitative reasoning in

256

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

our domains, and the successful use of these concepts in our applications. VOI and VOA algorithms
must be customizable to the user, plan, and situation.
By using an asynchronous multiagent architecture and an extended version of the P RS reactive
control system, we monitored the execution of both SUO and UV-Robotics plans with acceptable
latency, given a dozen or more incoming events per second. P RS extensions include temporal monitors and efficiency improvements. Methods from the mission model are used throughout the SUO
monitoring process for action-specific monitoring. Our evaluation showed that our plan-aware EAs
generated appropriate alerts in a timely manner without overwhelming the user with too many alerts,
although a small percentage of the alerts were unwanted. We have shown the utility of using advanced AI planning and execution technologies in small unit operations.
The application to UV-Robotics showed the generality of our SUO framework and monitoring
concepts. We implemented a complex execution assistant in about one person-week, using code
from the SUO EA. The UV EA uses the same plan representation and basic architecture as the SUO
EA, but the inputs are different as are the tasks and the algorithms that respond to the inputs and
generate alerts.
Future work. The most obvious area for future work in the SUO domain is incorporation of
a planning assistant to complete the loop of continuous planning and execution. This integration
has already been accomplished in the UV-Robotics domain, but the difficulty in the SUO domain
is an interface that allows a soldier to interact effectively with the planning tool, using a wearable
computer in a battlefield situation. Several research programs are addressing this problem, some of
which are mentioned in Section 2.
Within the scope of execution monitoring, future work on our EAs could model and detect other
types of plan deviations (such as loss of surprise or additional types of fratricide risks), project
future failures, and provide higher-fidelity specialized reasoners, particularly for terrain reasoning.
Additional theoretical work on VOI and VOA would support better quantitative estimates of VOI
and VOA. The SUO mission model already has a method for projecting failures and a low-fidelity
projection capability could be easily added. In the UV-Robotics domain, we plan to implement
additional types of alerts in the near future, and extend the UV EA to serve the higher layers of the
architecture that have more in common with the SUO EA alert types and triggers. The fragility of
the UV communication network in hostile domains provides a set of interesting monitoring challenges that may result in the incorporation of specific monitoring-related tasks within cooperative
team missions. Monitoring strategies for uncertain communication environments is an important
research challenge for the UV-Robotics domain. Additional alerts being considered for future implementation include monitoring movement of entities in and out of geographical sectors mentioned
in the plan, monitoring the deterioration or improvement of communication conditions, and monitoring the actions and intentions of coordinating team members to facilitate cooperative behavior.

257

W ILKINS , L EE , & B ERRY

ACKNOWLEDGMENTS
The SUO research was supported by Contract F30602-95-C-0235 with the Defense Advanced Research Projects Agency (from the DARPA Planning and Decision Aids Program and the DARPA
Small Unit Operations Program), under the supervision of Air Force Research Laboratory – Rome.
The UCAV research was supported by the Office of Naval Research Unmanned Combat Air Vehicles Program (Contract N00014-00-C-0304). The SRI International Artificial Intelligence Center
supported the writing of this paper. We thank the subject matter experts who assisted us. Our primary collaborators and evaluators were Kenneth Sharpe of SAIC and Richard Diehl of the Institute
for Defense Analyses. We also used the expertise of Andy Fowles, Chris Kearns, and David Miller
of the U.S. Army Dismounted Battlespace Battle Laboratory (DBBL) at Fort Benning, and CPT
Dan Ray of the Mounted Maneuver Battlespace Laboratory (MMBL) at Fort Knox.

References
Arkin, R. (1998). Behavior-based robotics. MIT Press.
Ash, D., Gold, G., Seiver, A., & Hayes-Roth, B. (1993). Guaranteeing real-time response with
limited resources. Artificial Intelligence in Medicine, 5(1), 49–66.
Athey, S., & Levin, J. (2001). The value of information in monotone decision problems. Tech. rep.,
Stanford University, Stanford, CA.
Bell, B., Jr., E. S., & Brown, S. M. (2002). Making adversary decision modeling tractable with intent
inference and information fusion. In Proc. of the 11th Conference on Computer Generated
Forces and Behavioral Representation, Orlando, FL.
Bonasso, R. P., Kortenkamp, D., & Whitney, T. (1997). Using a robot control architecture to automate space shuttle operations. In Proc. of the 1997 National Conference on Artificial Intelligence, pp. 949–956, Providence, RI. AAAI Press.
Cheyer, A., & Martin, D. (2001). The open agent architecture. Journal of Autonomous Agents and
Multi-Agent Systems, 4(1), 143–148.
Coiera, E. (1993). Intelligent monitoring and control of dynamic physiological systems. Artificial
Intelligence in Medicine, 5(1), 1–8.
Donlon, J., & Forbus, K. (1999). Using a geographic information system for qualitative spatial
reasoning about trafficability. In Proc. of the Qualitative Reasoning Workshop, Loch Awe,
Scotland.
Doyle, R. J. (1995). Determining the loci of anomalies using minimal causal models. In Proc. of
the 1995 International Joint Conference on Artificial Intelligence, pp. 1821–1827, Montreal,
Quebec, Canada. Morgan Kaufmann Publishers Inc., San Francisco, CA.
Durfee, E. H., Huber, M. J., Kurnow, M., & Lee, J. (1997). TAIPE: Tactical assistants for interaction
planning and execution. In Proc. of Autonomous Agents ’97. ACM Press, New York.
Ferguson, G., & Allen, J. (1998). TRIPS: An integrated intelligent problem-solving assistant. In
Proc. of the 1998 National Conference on Artificial Intelligence, pp. 567–572. AAAI Press.
Forbus, K. D. (2002). Towards Qualitative Modeling of the Battlespace. Technical report unpublished manuscript, Northwestern University, Evanston, IL.
258

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

Franke, J., Brown, S. M., Bell, B., & Mendenhall, H. (2000). Enhancing teamwork through teamlevel intent inference. In Proc. of the 2000 International Conference on Artificial Intelligence,
Las Vegas, NV.
Garamone, J. (2001). Digital world meets combat during desert exercise. Tech. rep., American
Forces Information Service, www.defenselink.mil/news/Apr2001/.
Georgeff, M. P., & Ingrand, F. F. (1989). Decision-making in an embedded reasoning system. In
Proc. of the 1989 International Joint Conference on AI, pp. 972–978, Detroit, MI. Morgan
Kaufmann Publishers Inc., San Francisco, CA.
Gil, Y., & Blythe, J. (1999). A problem-solving method for plan evaluation and critiquing. In Proc.
of the Tenth Banff Knowledge Acquisition for Knowledge-Based Systems Workshop, Banff,
Alberta, Canada.
Grosz, B., & Kraus, S. (1999). The evolution of SharedPlans. In Rao, A., & Wooldridge, M. (Eds.),
Foundations and Theories of Rational Agencies, pp. 227–262.
Hart, D. M., Anderson, S. D., & Cohen, P. R. (1990). Envelopes as a vehicle for improving the
efficiency of plan execution. Tech. rep. UM-CS-1990-021, University of Massachusetts,
Amherst, MA.
Holness, G., Karuppiah, D.and Uppala, S., & Ravela, S. C. (2001). A service paradigm for reconfigurable agents. In Proc. of the 2nd Workshop on Infrastructure for Agents, MAS, and Scalable
MAS (Agents 2001), Montreal, Canada.
Horty, J., & Pollack, M. (2001). Evaluating new options in the context of existing plans. Artificial
Intelligence, 127(2), 199–220.
Jonsson, A., Morris, P., Muscettola, N., & Rajan, K. (2000). Planning in interplanetary space:
Theory and practice. In Proc. of the 2000 International Conference on AI Planning and
Scheduling, pp. 177–186, Breckenridge, CO. AAAI Press, Menlo Park, CA.
Kaminka, G., Pynadath, D., & Tambe, M. (2001). Monitoring deployed agent teams. In Proc. of
Autonomous Agents ’01, pp. 308–315, Montreal, Canada.
Kaminka, G., & Tambe, M. (1999). Experiments in distributed and centralized socially attentive
monitoring. In Proc. of Autonomous Agents ’99, pp. 213–220, Seattle, WA.
Konolige, K., & Myers, K. (1998). Artificial Intelligence Based Mobile Robots: Case studies of
Successful Robot Systems, chap. The Saphira architecture: a design for autonomy. MIT Press.
Koski, E., Makivirta, A., Sukuvaara, T., & Kari, A. (1990). Frequency and reliability of alarms in
the monitoring of cardiac postoperative patients. International Journal of Clinical Monitoring
and Computing, 7, 129–133.
Mouaddib, A.-I., & Zilberstein, S. (1995). Knowledge-based anytime computation. In Proc. of the
1995 International Joint Conference on Artificial Intelligence, pp. 775–783. Morgan Kaufmann Publishers Inc., San Francisco, CA.
Muscettola, N., Nayak, P. P., Pell, B., & Williams, B. C. (1998). Remote agent: To boldly go where
no AI system has gone before. Artificial Intelligence, 103(1-2), 5–47.
Musliner, D. J., Durfee, E. H., & Shin, K. G. (1993). CIRCA: A cooperative intelligent real-time
control architecture. IEEE Transactions on Systems, Man, and Cybernetics, 23(6).
259

W ILKINS , L EE , & B ERRY

Myers, K. L. (1996). A procedural knowledge approach to task-level control. In Proc. of the 1996
International Conference on AI Planning Systems. AAAI Press, Menlo Park, CA.
Myers, K. L., & Morley, D. N. (2001). Human directability of agents. In Proc. 1st International
Conference on Knowledge Capture, Victoria, B.C.
Myers, K. L. (1999). CPEF: A continuous planning and execution framework. AI Magazine, 20,
63–70.
Ortiz, C., Agno, A., Berry, P., & Vincent, R. (2002). Multilevel adaptation in teams of unmanned
air and ground vehicles. In First AIAA Unmanned Aerospace Vehicles, Systems, Technologies
and Operations Conference.
Ortiz, C. L. (1999). Introspective and elaborative processes in rational agents. Annals of Mathematics and Artificial Intelligence, 25(1–2), 1–34.
Ortiz, C. L., & Hsu, E. (2002). Structured negotiation. In Proc. of the First International Conference
on Autonomous Agents and Multiagent Systems.
Pollack, M. E., & McCarthy, C. (1999). Towards focused plan monitoring: A technique and an
application to mobile robots. In Proc. of the IEEE International Symposium on Computational
Intelligence in Robotics and Automation (CIRA), pp. 144–149.
Rao, A. S., & Georgeff, M. P. (1995). BDI-agents: From theory to practice. In Proc. of the First
Intl. Conference on Multiagent Systems, San Francisco.
Schreckenghost, D., & et al. (2001). Adjustable control autonomy for anomaly response in spacebased life support systems. In Proc. of the IJCAI Workshop on Autonomy, Delegation, and
Control.
Shannon, C. (1948). A mathematical theory of communication. Bell System Technical Journal, 27,
379–423, 623–656.
Tsien, C. (1997). Reducing false alarms in the intensive care unit: A systematic comparison of four
algorithms. In Proc. of the American Medical Informatics Association Annual Fall Symposium.
Tsien, C., & Fackler, J. (1997). Poor prognosis for existing monitors in the intensive care unit.
Critical Care Medicine, 25(4), 614–619.
Veloso, M., Pollack, M., & Cox, M. (1998). Rationale-based monitoring for planning in dynamic
environments. In Proc. of the 1998 International Conference on AI Planning Systems, pp.
171–180. AAAI Press, Menlo Park, CA.
Vincent, R., Horling, B., Lesser, V., & Wagner, T. (2001). Implementing soft real-time agent control.
In Proceedings of the 5th International Conference on Autonomous Agents. ACM Press.
Weigner, M. B., & Englund, C. E. (1990). Ergonomic and human factors affecting anesthetic vigilance and monitoring performance in the operating room environment. Anesthesiology, 73(5),
995–1021.
Weinberger, E. (2002). A theory of pragmatic information and its application to the quasispecies
model of biological evolution. Biosystems, 66(3), 105–119.
Wilkins, D. E., & desJardins, M. (2001). A call for knowledge-based planning. AI Magazine, 22(1),
99–115.
260

I NTERACTIVE E XECUTION M ONITORING OF AGENT T EAMS

Wilkins, D. E., & Myers, K. L. (1995). A common knowledge representation for plan generation
and reactive execution. Journal of Logic and Computation, 5(6), 731–761.
Wilkins, D. E., & Myers, K. L. (1998). A multiagent planning architecture. In Proc. of the 1998
International Conference on AI Planning Systems, pp. 154–162, Pittsburgh, PA.
Wilkins, D. E., Myers, K. L., Lowrance, J. D., & Wesley, L. P. (1995). Planning and reacting
in uncertain and dynamic environments. Journal of Experimental and Theoretical AI, 7(1),
121–152.

261

Journal of Artificial Intelligence Research 18 (2003) 491-516

Submitted 11/02; published 6/03

Acquiring Correct Knowledge
for Natural Language Generation
Ehud Reiter
Somayajulu G. Sripada

ereiter@csd.abdn.ac.uk
ssripada@csd.abdn.ac.uk

Department of Computing Science,
University of Aberdeen, Aberdeen AB24 3UE, UK

Roma Robertson

roma.robertson@ed.ac.uk

Division of Community Health Sciences - General Practice Section
University of Edinburgh
Edinburgh EH8 9DX, UK

Abstract
Natural language generation (nlg) systems are computer software systems that produce texts in English and other human languages, often from non-linguistic input data.
nlg systems, like most ai systems, need substantial amounts of knowledge. However, our
experience in two nlg projects suggests that it is difficult to acquire correct knowledge
for nlg systems; indeed, every knowledge acquisition (ka) technique we tried had significant problems. In general terms, these problems were due to the complexity, novelty,
and poorly understood nature of the tasks our systems attempted, and were worsened by
the fact that people write so differently. This meant in particular that corpus-based ka
approaches suffered because it was impossible to assemble a sizable corpus of high-quality
consistent manually written texts in our domains; and structured expert-oriented ka techniques suffered because experts disagreed and because we could not get enough information
about special and unusual cases to build robust systems. We believe that such problems
are likely to affect many other nlg systems as well. In the long term, we hope that new
ka techniques may emerge to help nlg system builders. In the shorter term, we believe
that understanding how individual ka techniques can fail, and using a mixture of different
ka techniques with different strengths and weaknesses, can help developers acquire nlg
knowledge that is mostly correct.

1. Introduction
Natural language generation (nlg) systems use artificial intelligence (ai) and natural language processing techniques to automatically generate texts in English and other human
languages, typically from some non-linguistic input data (Reiter & Dale, 2000). As with
most ai systems, an essential part of building an nlg system is knowledge acquisition (ka),
that is acquiring relevant knowledge about the domain, the users, the language used in the
texts, and so forth.
ka for nlg can be based on structured expert-oriented techniques, such as think-aloud
protocols and sorting, or on machine learning and corpus analysis, which are currently very
popular in other areas of Natural Language Processing. We have used both types of techniques in two nlg projects that included significant ka efforts – stop (Reiter, Robertson, &
Osman, 2003), which generated tailored smoking cessation letters, and SumTime-Mousam
c
2003
AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Reiter, Sripada, & Robertson

(Sripada, Reiter, Hunter, Yu, & Davy, 2001), which generated weather forecasts. In both
projects, and for all techniques tried, the main problem turned out to be knowledge quality;
evaluation and validation exercises identified flaws in the knowledge acquired using every
technique. The flaws were due to a variety of factors, but perhaps the basic underlying
reason for them was the nature of the writing tasks we were attempting to automate. They
were:
• complex (as are many tasks that involve interacting with humans): hence a lot of
knowledge was needed to cover the numerous special cases and unusual circumstances;
• sometimes novel (not done by humans): hence sometimes there were no experts at
the task as a whole, and no existing corpora of texts to analyse;
• poorly understood: hence we did not have good theoretical models to structure the
knowledge being acquired, and fill in gaps in the knowledge acquired from experts or
corpora; and
• ambiguous (allowed multiple solutions): hence different experts and corpus authors
produced very different texts (solutions) from the same input data.
These problems of course occur to some degree in ka for other expert system and natural
language processing tasks, but we believe they may be especially severe for nlg.
We do not have a good solution for these problems, and indeed believe that ka is one
of the biggest problems in applied nlg. After all, there is no point in using ai techniques
to build a text-generation system if we cannot acquire the knowledge needed by the ai
techniques.
In the longer term, more basic research into ka for nlg is badly needed. In the shorter
term, however, we believe that developers are more likely to acquire correct knowledge
when building an nlg system if they understand likely types of errors in the knowledge
acquired from different ka techniques. Also, to some degree the different ka techniques we
have tried have complementary strengths and weaknesses; this suggests using a variety of
different techniques, so that the weaknesses of one technique are compensated for by the
strengths of other techniques.
In the remainder of this paper we give background information on nlg, ka, and our
systems; describe the various ka techniques we used to build our systems and the problems
we encountered; and then discuss more generally why ka for nlg is difficult and how
different ka techniques can be combined.

2. Background
In this section we give some background information on natural language generation and
knowledge acquistion and validation. We also introduce and briefly describe the stop and
SumTime-Mousam systems.

492

Acquiring Correct Knowledge for NLG

2.1 Natural Language Generation
Natural Language Generation is the subfield of artificial intelligence that is concerned with
automatically generating written texts in human languages, often from non-linguistic input
data. nlg systems often have three stages (Reiter & Dale, 2000):
• Document Planning decides on the content and structure of the generated text; for
example that a smoking-cessation letter should start with a section that discusses the
pros and cons of smoking.
• Microplanning decides on how information and structure should be expressed linguistically; for example, that the phrase by mid afternoon should be used in a weather
report to refer to the time 1500.
• Surface Realisation generates an actual text according to the decisions made in previous stages, ensuring that the text conforms to the grammar of the target language
(English in our systems).
nlg systems require many types of knowledge in order to carry out these tasks. In particular, Kittredge, Korelsky, and Rambow (1991) point out that nlg systems need domain
knowledge (similar to that needed by expert systems), communication knowledge (similar
to that needed by other Natural Language Processing systems), and also domain communication knowledge (DCK). DCK is knowledge about how information in a domain is usually
communicated, including standard document structures, sublanguage grammars, and specialised lexicons. DCK plays a role in all aspects of language technology (for example, a
speech recogniser will work better in a given domain if it is trained on a corpus of texts
from that domain), but it may be especially important in nlg.
2.2 Knowledge Acquisition and Validation
Knowledge acquisition is the subfield of artificial intelligence that is concerned with acquiring the knowledge needed to build ai systems. Broadly speaking the two most common
types of ka techniques are:
• Techniques based on working with experts in a structured fashion, such as structured interviews, think-aloud protocols, sorting, and laddered grids (Scott, Clayton,
& Gibson, 1991; Buchanan & Wilkins, 1993); and
• Techniques based on learning from data sets of correct solutions (such as text corpora);
these are currently very popular in natural language processing and used for many
different types of knowledge, ranging from grammar rules to discourse models (for an
overview, see Jurafsky & Martin, 2000).
There are of course other possible ka techniques as well, including directly asking experts
for knowledge, and conducting scientific experiments. Some research has been done on
evaluating and comparing ka techniques, but such research can be difficult to interpret
because of methodological problems (Shadbolt, O’Hara, & Crow, 1999).
Research has also been done on verifying and validating knowledge to check that it
is correct (Adelman & Riedel, 1997). Verification techniques focus on detecting logical
493

Reiter, Sripada, & Robertson

anomalies and inconsistencies that often reflect mistakes in the elicitation or coding process;
we will not further discuss these, as such errors are not our primary concern in this paper.
Validation techniques focus on detecting whether the knowledge acquired is indeed correct
and will enable the construction of a good system; these are very relevant to efforts to
detect problems in knowledge acquired for nlg. Adelman and Riedel (1997) describe two
general types of validation techniques: (1) having experts check the acquired knowledge and
built systems, and (2) using a library of test cases with known inputs and outputs. In other
words, just as knowledge can be acquired from experts or from data sets of correct solutions,
knowledge can also be validated by experts or by data sets of correct solutions. Knowledge
can also be validated experimentally, by determining if the system as a whole works and has
the intended effect on its users. Of course care must be taken that the validation process
uses different resources than the acquisition process. For example, knowledge acquired from
an expert should not be validated by that expert, and knowledge learned from a data set
should not be validated by that data set.
There has not been a great deal of previous research on knowledge acquisition for nlg;
Reiter, Robertson, and Osman (2000) summarise previous efforts in this area. Generally
corpus analysis (analysis of collections of manually written texts) has been the most popular
ka technique for nlg, as in other areas of Natural Language Processing, although sometimes
it is supplemented by expert-oriented techniques (Goldberg, Driedger, & Kittredge, 1994;
McKeown, Kukich, & Shaw, 1994). Walker, Rambow, and Rogati (2002) have attempted
to learn nlg rules from user ratings of generated texts, which can perhaps be considered a
type of experiment-based ka.
2.3 STOP
stop (Reiter, Robertson, & Osman, 2003) is an nlg system that generates tailored smokingcessation letters. Tailoring is based on a 4-page multiple-choice questionnaire about the
smoker’s habits, health, concerns, and so forth. An extract from a questionnaire is shown
in Figure 1, and an extract from the stop letter generated from this questionnaire is shown
in Figure 2 (we have changed the name of the smoker to preserve confidentiality). From a
ka perspective, the most important knowledge needed in stop is what content and phrasing
is appropriate for an individual smoker; for example,
• What information should be given in a letter? The example letter in Figure 2, for
instance, emphasises things the smoker dislikes about smoking, confidence building,
and dealing with stress and weight gain; but it does not recommend specific techniques
for stopping smoking.
• Should a letter adopt a positive ‘you’ll feel better if you stop’ tone (as done in the
letter in Figure 2), or should it adopt a negative ‘smoking is killing you’ tone?
stop was never operationally deployed, but it was tested with real smokers in a clinical
trial, during which 857 smokers received stop letters (Lennox, Osman, Reiter, Robertson,
Friend, McCann, Skatun, & Donnan, 2001). This evaluation, incidentally, showed that stop
letters were no more effective than control non-tailored letters.

494

Acquiring Correct Knowledge for NLG

SMOKING QUESTIONNAIRE

Please answer by marking the most appropriate box for each question like this: _

Q1 Have you smoked a cigarette in the last week, even a puff?
YES _
Please complete the following questions

Please read the questions carefully.
Q2

Home situation:
Live
_
alone



NO

Please return the questionnaire unanswered in the
envelope provided. Thank you.
If you are not sure how to answer, just give the best answer you can.

Live with

husband/wife/partner



Live with
other adults

………0……… boys

………0……. girls

Q3

Number of children under 16 living at home

Q4

Does anyone else in your household smoke? (If so, please mark all boxes which apply)
husband/wife/partner 
other family member 
others 

Q5



Live with
children

How long have you smoked for? …20… years
Tick here if you have smoked for less than a year


Q6

How many cigarettes do you smoke in a day? (Please mark the amount below)

Less than 5 
Q7

5 – 10 

11 – 15 _

16 – 20 

21 - 30 

31 or more

How soon after you wake up do you smoke your first cigarette? (Please mark the time below)

Within 5 minutes 

6 - 30 minutes _

31 - 60 minutes 

Q8

Do you find it difficult not to smoke in places where it is
forbidden eg in church, at the library, in the cinema?

Q9

Which cigarette would you hate most to give up?

Q10

Do you smoke more frequently during the first hours after
waking than during the rest of the day?

Q11 Do you smoke if you are so ill that you are in bed most of the
day?
Q12
Are you intending to stop
smoking in the next 6
months?

YES



NO

_

After 60 minutes 
YES

_NO 

The first one in the morning _
Any of the others 
YES

NO

_

YES

NO

_

Q13 If yes, are you intending to stop smoking
within the next month?
YES NO 
Q14 If no, would you like to stop smoking if it was
easy?
YES Not Sure _
NO 




1

Figure 1: First page of example smoker questionnaire

495

Smoking Information for Heather Stewart
We know that all of these make it more likely that you will be able to stop.
Most people who stop smoking for good have more than one attempt.

People stop smoking when they really want to stop. It is encouraging that
you have many good reasons for stopping. The scales show the good
and bad things about smoking for you. They are tipped in your favour.

Overcoming your barriers to stopping...

THINGS YOU LIKE

it's relaxing
it stops stress
you enjoy it
it relieves boredom
it stops weight gain
it stops you craving

THINGS YOU DISLIKE
it makes you less fit
it's a bad example for kids
you're addicted
it's unpleasant for others
other people disapprove
it's a smelly habit
it's bad for you
it's expensive
it's bad for others' health

You could do it...
Most people who really want to stop eventually succeed. In fact, 10
million people in Britain have stopped smoking - and stayed stopped - in
the last 15 years. Many of them found it much easier than they expected.
Although you don't feel confident that you would be able to stop if you
were to try, you have several things in your favour.
•
•
•

You have stopped before for more than a month.
You have good reasons for stopping smoking.
You expect support from your family, your friends, and your
workmates.

You said in your questionnaire that you might find it difficult to stop
because smoking helps you cope with stress. Many people think that
cigarettes help them cope with stress. However, taking a cigarette only
makes you feel better for a short while. Most ex-smokers feel calmer and
more in control than they did when they were smoking. There are some
ideas about coping with stress on the back page of this leaflet.
You also said that you might find it difficult to stop because you would put
on weight. A few people do put on some weight. If you did stop smoking,
your appetite would improve and you would taste your food much better.
Because of this it would be wise to plan in advance so that you're not
reaching for the biscuit tin all the time. Remember that putting on weight
is an overeating problem, not a no-smoking one. You can tackle it later
with diet and exercise.

And finally...
We hope this letter will help you feel more confident about giving up
cigarettes. If you have a go, you have a real chance of succeeding.
With best wishes,
The Health Centre.

Reiter, Sripada, & Robertson

496

Figure 2: Extract from letter generated from Figure 1 questionnaire

You have good reasons to stop...

Acquiring Correct Knowledge for NLG

day

hour

12-06-02
12-06-02
12-06-02
12-06-02
12-06-02
12-06-02
13-06-02

6
9
12
15
18
21
0

wind
direction
WSW
WSW
WSW
WSW
SW
SSW
SSW

wind speed
(10m altitude)
10
9
7
7
7
8
10

wind speed
(50m alt)
12
11
9
9
9
10
12

Figure 3: Wind data extract from 12-Jun-2002 numerical weather prediction
Knowledge acquisition in stop was primarily based on structured expert-oriented ka
techniques, including in particular sorting and think-aloud protocols. Knowledge was acquired from five health professionals; three doctors, a nurse, and a health psychologist.
These experts were knowledgeable about smoking and about patient information, but they
were not experts on writing tailored smoking-cessation letters. In fact there are no experts
at this task, since no one manually writes tailored smoking-cessation letters.
It is not unusual for an nlg system to attempt a task which is not currently performed by
human experts; other examples include descriptions of software models (Lavoie, Rambow,
& Reiter, 1997), customised descriptions of museum items (Oberlander, O’Donnell, Knott,
& Mellish, 1998), and written feedback for adult literacy students (Williams, Reiter, &
Osman, 2003). Knowledge validation in stop was mostly based on feedback from users
(smokers), and on the results of the clinical trial.
2.4 SumTime-Mousam
SumTime-Mousam (Sripada, Reiter, Hunter, & Yu, 2002) is an nlg system that generates
marine weather forecasts for offshore oil rigs, from numerical weather simulation data. An
extract from SumTime-Mousam’s input data is shown in Figure 3, and an extract from the
forecast generated from this data is shown in Figure 4. From a ka perspective, the main
knowledge needed by SumTime-Mousam was again what content and expression was best
for users; for example,
• What changes in a meteorological parameter are significant enough to be reported in
the text? The forecast in Figure 4, for example, mentions changes in wind direction
but not changes in wind speed.
• What words and phrases should be used to communicate time? For example, should
1800 be described as early evening (as in Figure 4) or as late afternoon?
SumTime-Mousam is currently being used operationally by a meteorological company, to
generate draft forecasts which are post-edited by human forecasters.
Knowledge acquisition in SumTime-Mousam was based on both corpus analysis of
manually-written forecasts and structured ka with expert meteorologists. Unlike the experts we worked with in stop, the meteorologists we worked with in SumTime-Mousam

497

Reiter, Sripada, & Robertson

FORECAST 6 - 24 GMT, Wed 12-Jun 2002
WIND(KTS)
10M: WSW 8-13 gradually backing SW by early evening and SSW by
midnight.
50M: WSW 10-15 gradually backing SW by early evening and SSW by
midnight.
WAVES(M)
SIG HT: 0.5-1.0 mainly SW swell.
MAX HT: 1.0-1.5 mainly SW swell.
PER(SEC)
WAVE PERIOD: Wind wave 3-5 mainly 6 second SW swell.
WINDWAVE PERIOD: 3-5.
SWELL PERIOD: 5-7.
WEATHER:
Partly cloudy becoming overcast with light rain around midnight.
VIS(NM):
Greater than 10 reduced to 5-8 in precipitation.
AIR TEMP(C): 8-10 rising 9-11 around midnight.
CLOUD(OKTAS/FT): 2-4 CU/SC 1300-1800 lowering 7-8 ST/SC 700-900 around
midnight.
Figure 4: Extract from forecast generated for 12-Jun-2002
were experienced at writing the target texts (weather forecasts). The forecast corpus included the numerical weather simulation data that the forecasters used when writing the
forecasts, as well as the actual forecast texts (Sripada, Reiter, Hunter, & Yu, 2003).
Knowledge validation in SumTime-Mousam has mostly been conducted by checking
knowledge acquired from the corpus with the experts, and checking knowledge acquired
from the experts against the corpus. In other words, we have tried to make the validation
technique as different as possible from the acquisition technique. We are currently evaluating
SumTime-Mousam as a system by measuring the number of edits that forecasters make
to the computer-generated draft forecasts.

3. Knowledge Acquisition Techniques Tried
In this section we summarise the main ka techniques we used in stop and SumTimeMousam. For each technique we give an example of the knowledge acquired, and discuss
what we learned when we tried to validate the knowledge. Table 1 gives a very high level
overview of the major advantages and disadvantages of the different techniques we tried,
when the different techniques were perhaps most useful, and what types of knowledge they
were best suited to acquiring (using the classification of Section 2.1). As this table shows,
no one technique is clearly best; they all have different strengths and weaknesses. Probably
the best overall ka strategy is to use a mix of different techniques; we will further discuss
this in Section 5.

498

Acquiring Correct Knowledge for NLG

Techniques

Advantages

Disadvantages

directly ask
experts
structured ka
with experts
corpus
analysis

get big picture

many gaps, may
not match practice
limited coverage,
experts variable
hard to create,
texts inconsistent,
poor models for nlg
local optimisation,
not major changes

expert
revision

get details,
get rationale
get lots of
knowledge
quickly
fix problems
in knowledge

When
Useful
initial
prototype
flesh out
prototype
robustness,
unusual cases

Types of
Knowledge
domain,
DCK
depends
on expert
DCK,
communication

improve
system

all

Table 1: Summary Evaluation of ka techniques for nlg
3.1 Directly Asking Experts for Knowledge
The simplest and perhaps most obvious ka technique for nlg is to simply ask experts how
to write the texts in question. In both stop and SumTime-Mousam, experts initially
gave us spreadsheets or flowcharts describing how they thought texts should be generated.
In both projects, it also turned out that the experts’ description of how texts should be
generated did not in fact match how people actually wrote the texts in question. This is a
common finding in ka, and it is partially due to the fact that it is difficult for experts to
introspectively examine the knowledge they use in practice (Anderson, 1995); this is why
proponents of expert-oriented ka prefer structured ka techniques.
For example, at the beginning of SumTime-Mousam, one of the meteorologists gave
us a spreadsheet which he had designed, which essentially encoded how he thought some
parts of weather forecasts should be generated (the spreadsheet did not generate a complete
weather forecast). We analysed the logic used in the spreadsheet, and largely based the first
version of SumTime-Mousam on this logic.
One goal of our analysis was to create an algorithm that could decide when a change
in a parameter value was significant enough so that it should be mentioned in the weather
report. The spreadsheet used context-dependent change thresholds to make this decision.
For example, a change in the wind speed would be mentioned if
• the change was 10 knots or more, and the final wind speed was 15 knots or less;
• the change was 5 knots or more, and the final wind speed was between 15 and 40
knots; or
• the change was 10 knots or more, and the final wind speed was over 40 knots.
The context-dependent thresholds reflect the usage of the weather reports by the users (in
this case, oil company staff making decisions related to North Sea offshore oil rigs). For
example, if a user is deciding how to unload a supply boat, moderate changes in wind
speed don’t matter at low speeds (because light winds have minimal impact on supply
boat operations) and at high speeds (because the boat won’t even attempt to unload in
very heavy winds), but may affect decisions at in-between speeds. The context-dependent
499

Reiter, Sripada, & Robertson

thresholds would be expected to vary according to the specific forecast recipient, and should
be set in consultation with the recipient.
From our perspective, there were two main pieces of knowledge encoded in this algorithm:
1. The absolute size of a change determines whether it should be mentioned or not, and
2. The threshold for significance depends on the context and ultimately on how the user
will use the information.
3.1.1 Validation of Direct Expert Knowledge
We checked these rules by comparing them to what we observed in our corpus analysis of
manually written forecasts (Section 3.3). This suggested that while (2) above is probably
correct, (1) may be incorrect. In particular, a linear segmentation model (Sripada et al.,
2002), which basically looks at changes in slope rather than changes in the absolute value of a
parameter, better matches the corpus texts. The expert who designed the spreadsheet model
agreed that segmentation was probably a better approach. He also essentially commented
that one reason for his use of the absolute size model was that this was something that was
easily comprehensible to someone who was neither a programmer nor an expert at numerical
data analysis techniques.
In other words, in addition to problems in introspecting knowledge, it also perhaps is
not reasonable to expect a domain expert to be able to write a sophisticated data analysis
algorithm based on his expertise. This is not an issue if the knowledge needed is purely
declarative, as it is in many ai applications; but if we need procedural or algorithmic
knowledge, we must bear in mind that domain experts may not have sufficient computational
expertise to express their knowledge as a computer algorithm.
3.1.2 Role of Directly Asking Experts for Knowledge
Although the expert’s spreadsheet in SumTime-Mousam was far from ideal, it was extremely useful as a starting point. It specified an initial system which we could build fairly
easily, and which produced at least vaguely plausible output. Much the same in fact happened in stop, when one of the doctors gave us a flowchart which certainly had many
weaknesses, but which was useful as an initial specification of a relatively easy-to-build and
somewhat plausible system. In both stop and SumTime-Mousam, as indeed in other nlg
projects we have been involved in, having an initial prototype system working as soon as
possible was very useful for developing our ideas and for explaining to domain experts and
other interested parties what we were trying to do.
In terms of the types of knowledge mentioned in Section 2.1, both the stop flowchart
and the SumTime-Mousam spreadsheet specified domain knowledge (for example, how
smokers should be categorised) and domain communication knowledge (for example, the use
of ranges instead of single numbers to communicate wind speed). The stop flowchart did not
specify any generic communication knowledge such as English grammar and morphology;
the author probably believed we knew more about such things than he did. The SumTimeMousam spreadsheet did in effect include a few English grammar rules, but these were just
to get the spreadsheet to work, the author did not have much confidence in them.
500

Acquiring Correct Knowledge for NLG

In summary, we think directly asking experts for knowledge is an excellent way to
quickly build an initial system, especially if the nlg developers can supply communication
knowledge that the domain expert may not possess. But once the initial system is in place,
it is probably best to use other ka techniques, at least in poorly understood areas such as
nlg. However, in applications where there is a solid theoretical basis, and the expert can
simply say ‘build your system according to theory X’, an expert’s direct knowledge may
perhaps be all that is needed.
3.2 Structured Expert-Oriented KA: Think-Aloud Protocols
There are numerous types of structured expert-oriented ka techniques, including thinkaloud protocols, sorting, and structured interviews (Scott et al., 1991). We will focus here
on think-aloud protocols, which is the technique we have used the most. We have tried
other structured ka techniques as well, such as sorting (Reiter et al., 2000); we will not
describe these here, but our broad conclusions about other structured ka techniques were
similar to our conclusions about think-aloud protocols.
In a think-aloud protocol, an expert carries out the task in question (in our case, writing
a text) while ‘thinking aloud’ into an audio (or video) recorder. We used think-aloud
protocols in both stop and SumTime-Mousam. They were especially important in stop,
where they provided the basis for most content and phrasing rules.
A simple example of the think-aloud process is as follows. One of the doctors wrote a
letter for a smoker who had tried to stop before, and managed to stop for several weeks before
starting again. The doctor made the following comments in the think-aloud transcript:
Has he tried to stop smoking before? Yes, and the longest he has managed
to stop — he has ticked the one week right up to three months and that’s
encouraging in that he has managed to stop at least once before, because it is
always said that the people who have had one or two goes are more likely to
succeed in the future.
He also included the following paragraph in the letter that he wrote for this smoker:
I see that you managed to stop smoking on one or two occasions before but have
gone back to smoking, but you will be glad to know that this is very common
and most people who finally stop smoking have had one or two attempts in the
past before they finally succeed. What it does show is that you are capable of
stopping even for a short period, and that means you are much more likely to be
able to stop permanently than somebody who has never ever stopped smoking
at all.
After analysing this session, we proposed two rules:
• IF (previous attempt to stop) THEN (message: more likely to succeed)
• IF (previous attempt to stop) THEN (message: most people who stop have a few
unsuccessful attempts first)

501

Reiter, Sripada, & Robertson

The final system incorporated a rule (based on several ka sessions, not just the above
one) that stated that if the smoker had tried to stop before, and if the letter included a
section on confidence building, then the confidence-building section should include a short
message about previous attempts to stop. If the smoker had managed to quit for more than
one week, this should be mentioned in the message; otherwise the message should mention
the recency of the smoker’s previous cessation attempt if this was within the past 6 months.
The actual text generated from this rule in the example letter of Figure 2 is
Although you don’t feel confident that you would be able to stop if you were to
try, you have several things in your favour.
• You have stopped before for more than a month.
Note that the text produced by the actual stop code is considerably simpler than the
text originally written by the expert. This is fairly common, as are simplifications in the
logic used to decide whether to include a message in a letter or not. In many cases this is
due to the expert having much more knowledge and expertise than the computer system
(Reiter & Dale, 2000, pp 30–36). In general, the process of deriving implementable rules
for nlg systems from think-aloud protocols is perhaps more of an art than a science, not
least because different experts often write texts in very different ways.
3.2.1 Validation of Structured KA Knowledge
We attempted to verify some of the rules acquired from stop think-aloud sessions by performing a series of small experiments where we asked smokers to comment on a letter, or to
compare two versions of a letter. Many of the rules were supported by these experiments for example, people in general liked the recap of smoking likes and dislikes (see You have
good reasons to stop. . . section of Figure 2). However, one general negative finding
of these experiments was that the tailoring rules were insufficiently sensitive to unusual or
atypical aspects of individual smokers; and most smokers were probably unusual or atypical
in some way. For example, stop letters did not go into the medical details of smoking (as
none of the think-aloud expert-written letters contained such information), and while this
seemed like the right choice for many smokers, a few smokers did say that they would have
liked to see more medical information about smoking. Another example is that (again based
on the think-aloud sessions) we adopted a positive tone and did not try to scare smokers;
and again this seemed right for most smokers, but some smokers said that a more ‘brutal’
approach would be more effective for them.
The fact that our experts did not tailor letters in such ways may possibly reflect the
fact that such tailoring would not have been appropriate for the relatively small number of
specific cases they considered in our think-aloud sessions. We had 30 think-aloud sessions
with experts, who looked at 24 different smoker questionnaires (6 questionnaires were considered by two experts). This may sound like a lot, but it is a drop in the ocean when we
consider how tremendously variable people are.
Comments made by smokers during the stop clinical trial (Reiter, Robertson, & Osman, 2003) also revealed some problems with think-aloud derived rules. For example, we
decided not to include practical ‘how-to-stop’ information in letters for people not currently intending to stop smoking; smoker comments suggest that this was a mistake. In
502

Acquiring Correct Knowledge for NLG

fact, some experts did include such information in think-aloud letters for such people, and
some did not. Our decision not to include this information was influenced by the Stages
of Change theoretical model (Prochaska & diClemente, 1992) of behaviour change, which
states that ‘how-to-stop’ advice is inappropriate for people not currently intending to stop;
in retrospect, this decision was probably a mistake.
We repeated two of our think-aloud exercises 15 months after we originally performed
them; that is, we went back to one of our experts and gave him two questionnaires he had
analysed 15 months earlier, and asked him to once again think aloud while writing letters
based on the questionnaires. The letters that the expert wrote in the second session were
somewhat different from the ones he had originally written, and were preferred by smokers
over the letters he had originally written (Reiter et al., 2000). This suggests that our experts
were not static knowledge sources, but were themselves learning about the task of writing
tailored smoking-cessation letters during the course of the project. Perhaps this should not
be a surprise given that none of the experts had ever attempted to write such letters before
getting involved with our project.
3.2.2 Role of Structured Expert-Oriented KA
Structured expert-oriented ka was certainly a useful way to expand, refine, and generally
improve initial prototypes constructed on the basis of experts’ direct knowledge. By focusing
on actual cases and by structuring the ka process, we learned many things which the
experts did not mention directly. We obtained all the types of knowledge mentioned in
Section 2.1, by working with experts with the relevant expertise. For example in stop we
acquired domain knowledge (such as the medical effects of smoking) from doctors, domain
communication knowledge (such as which words to use) from a psychologist with expertise
in writing patient information leaflets, and communication knowledge about graphic design
and layout from a graphic designer.
However, structured expert-oriented ka did have some problems, including in particular coverage and variability. As mentioned above, 30 sessions that examined 24 smoker
questionnaires could not possibly give good coverage of the population of smokers, given
how complex and variable people are. As for variation, the fact that different experts wrote
texts in very different ways made it difficult to extract rules from the think-aloud protocols.
We undoubtably made some mistakes in this regard, such as not giving ‘how-to-stop’ information to people not currently intending to stop smoking. Perhaps we should have focused
on a single expert in order to reduce variation. However, our experiences suggested that
different experts were better at different types of information, and also that experts changed
over time (so we might see substantial variation even in texts from a single author); these
observations raise doubts about the wisdom and usefulness of a single-expert strategy.
In short, the complexity of nlg tasks means that a very large number of structured ka
sessions may be needed to get good coverage; and the fact that there are numerous ways to
write texts to fulfill a communicative goal means that different experts tend to write very
differently, which makes analysis of structured ka sessions difficult.

503

Reiter, Sripada, & Robertson

3.3 Corpus Analysis
In recent years there has been great interest in Natural Language Processing and other areas
of ai in using machine learning techniques to acquire knowledge from relevant data sets. For
example, instead of building a medical diagnosis system by trying to understand how expert
doctors diagnose diseases, we can instead analyse data sets of observed symptoms and actual
diseases, and use statistical and machine learning techniques to determine which symptoms
predict which disease. Similarly, instead of building an English grammar by working with
expert linguists, we can instead analyse large collections of grammatical English texts in
order to learn the allowable structures (grammar) of such texts. Such collections of texts
are called corpora in Natural Language Processing.
There has been growing interest in applying such techniques to learn the knowledge
needed for nlg. For example, Barzilay and McKeown (2001) used corpus-based machine
learning to learn paraphrase possibilities; Duboue and McKeown (2001) used corpus-based
machine learning to learn how NP constituents should be ordered; and Hardt and Rambow
(2001) used corpus-based machine learning to learn rules for VP ellipsis.
Some nlg researchers, such as McKeown et al. (1994), have used the term ‘corpus
analysis’ to refer to the manual analysis (without using machine learning techniques) of a
small set of texts which are written explicitly for the nlg project by domain experts (and
hence are not naturally occurring). This is certainly a valid and valuable ka technique,
but we regard it as a form of structured expert-oriented ka, in some ways similar to thinkaloud protocols. In this paper, ‘corpus analysis’ refers to the use of machine learning and
statistical techniques to analyse collections of naturally occurring texts.
Corpus analysis in our sense of the word was not possible in stop because we did not have
a collection of naturally occurring texts (since doctors do not currently write personalised
smoking-cessation letters). We briefly considered analysing the example letters produced
in the think-aloud sessions with machine learning techniques, but we only had 30 such
texts, and we believed this would be too few for successful learning, especially given the
high variability between experts. In other words, perhaps the primary strength of corpus
analysis is its ability to extract information from large data sets; but if there are no large
data sets to extract information from, then corpus analysis loses much of its value.
In SumTime-Mousam, we were able to acquire and analyse a substantial corpus of 1099
human-written weather forecasts, along with the data files that the forecasters looked at
when writing the forecasts (Sripada et al., 2003). Details of our corpus analysis procedures
and results have been presented elsewhere (Reiter & Sripada, 2002a; Sripada et al., 2003),
and will not be repeated here.
3.3.1 Validation of Corpus Analysis Knowledge
While many of the rules we acquired from corpus analysis were valid, some rules were
problematical, primarily due to two factors: individual variations between the writers, and
writers making choices that were appropriate for humans but not for nlg systems.
A simple example of individual variation and the problems it causes is as follows. One of
the first things we attempted to learn from the corpus was how to express numbers in wind
statements. We initially did this by searching for the most common textual realisation of
each number. This resulted in rules that said that 5 should be expressed as 5, but 6 should
504

Acquiring Correct Knowledge for NLG

form
5
05
6
06

F1
0
0
0
0

F2
7
0
44
0

F3
0
1
0
364

F4
0
46
0
154

F5
122
0
89
0

unknown
4
2
2
13

total
133
49
135
531

Table 2: Usage of 5, 05, 6, 06 in wind statements, by forecaster
be expressed as 06. Now it is probably acceptable for a forecast to always include leading
zeros for single digits (that is, use 05 and 06), and to never include leading zeros (that is,
use 5 and 6). However, it is probably not acceptable to mix the two (that is, use 5 and 06
in the same forecast), which is what our rules would have led to.
The usage of 5, 05, 6, and 06 by each individual forecaster is shown in Table 2. As
this table suggests, each individual forecaster is consistent; forecasters F3 and F4 always
include leading zeros, while forecasters F2 and F5 never include leading zeros. F1 in fact
is also consistent and always omits leading zeros; for example he uses 8 instead of 08. The
reason that the overall statistics favour 5 over 05 but 06 over 6 is that individuals also differ
in which descriptions of wind speed they prefer to use. For example, F1 never explicitly
mentions low wind speeds such as 5 or 6 knots, and instead always uses generic phrases such
as 10 OR LESS; F2, F4, and F5 use a mix of generic phrases and explicit numbers for low
wind speeds; and F3 always uses explicit numbers and never uses generic phrases. Some of
the forecasters (especially F3) also have a strong preference for even numbers. This means
that the statistics for 5 vs. 05 are dominated by F5 (the only forecaster who both explicitly
mentions low wind speeds and does not prefer even numbers); while the statistics for 6 vs.
06 are dominated by F3 (who uses this number a lot because he avoids both generic phrases
and odd numbers). Hence the somewhat odd result that the corpus overall favours 5 over
05 but 06 over 6.
This example is by no means unique. Reiter and Sripada (2002b) explain how a more
complex analysis using this corpus, whose goal was to determine the most common time
phrase for each time, similarly led to unacceptable rules, again largely because of individual
differences between the forecasters.
There are obvious methods to deal with the problems caused by individual variation. For
example, we could restrict the corpus to texts from one author; although this does have the
major drawback of significantly reducing the size of the corpus. We could also use a more
sophisticated model, such as learning one rule for how all single digit numbers are expressed,
not separate rules for each number. Or we could analyse the behaviour of individuals and
identify choices (such as presence of a leading zero) that vary between individuals but are
consistently made by any given individual; and then make such choices parameters which
the user of the nlg system can specify. This last option is probably the best for nlg
systems (Reiter, Sripada, & Williams, 2003), and is the one used in SumTime-Mousam
for the leading-zero choice.
Our main point is simply that we would have been in trouble if we had just accepted our
initial corpus-derived rules (use 5 and 06) without question. As most corpus researchers
are of course aware, the result of corpus analysis depends on what is being learned (for
example, a rule on how to realise 5, or a rule on how to realise all single-digit numbers)
505

Reiter, Sripada, & Robertson

and on what features are used in the learning (for example, just the number, or the number
and the author). In more complex analyses, such as our analysis of time-phrase choice rules
(Reiter & Sripada, 2002b), the result also depends on the algorithms used for learning and
alignment. The dependence of corpus analysis on these choices means that the results of
a particular analysis are not guaranteed to be correct and need to be validated (checked)
just like the results of other ka techniques. Also, what is often the best approach from an
nlg perspective, namely identifying individual variations and letting the user choose which
variation he or she prefers, requires analysing differences between individual writers. To
the best of our knowledge most published nl corpus analyses have not done this, perhaps
in part because many popular corpora do not include author information.
The other recurring problem with corpus-derived rules was cases where the writers
produced sub-optimal texts that in particular were shorter than they should have been,
probably because such texts were quicker to write. For instance, we noticed that when
a parameter changed in a more or less steady fashion throughout a forecast period, the
forecasters often omitted a time phrase. For example, if a S wind rose steadily in speed
from 10 to 20 over the course of a forecast period covering a calendar day, the forecasters
might write S 8-12 RISING TO 18-22, instead of S 8-12 RISING TO 18-22 BY MIDNIGHT.
A statistical corpus analysis showed that the ‘null’ time phrase was the most common one
in such contexts, used in 33% of cases. The next most common time phrase, later, was only
used in 14% of cases. Accordingly, we programmed our system to omit the time phrase
in such circumstances. However, when we asked experts to comment on and revise our
generated forecasts (Section 3.4), they told us that this behaviour was incorrect, and that
forecasts were more useful to end users if they included explicit time phrases and did not rely
on the readers remembering when forecast periods ended. In other words, in this example
the forecasters were doing the wrong thing, which of course meant that the rule produced
by corpus analysis was incorrect.
We don’t know why the forecasters did this, but discussions with the forecast managers
about this and other mistakes (such as forecast authors describing wind speed and direction
as changing at the same time, even when they actually were predicted to change at different
times) suggested that one possible cause is the desire to write forecasts quickly. In particular,
numerical weather predictions are constantly being updated, and customers want their
forecasts to be based on the most up-to-date prediction; this can limit the amount of time
available to write forecasts.
In fact it can be perfectly rational for human writers to ‘cut corners’ because of time
limitations. If the forecasters believe, for example, that quickly writing a forecast at the
last minute will let them use more up-to-date prediction data; and that the benefits of more
up-to-date data outweighs the costs of abbreviated texts, then they are making the right
decision when they write shorter-than-optimal texts. An nlg system, however, faces a very
different set of tradeoffs (for example, omitting a time phrase is unlikely to speed up an
nlg system), which means that it should not blindly imitate the choices made by human
writers.
This problem is perhaps a more fundamental one than the individual variation problem,
because it can not be solved by appropriate choices as to what is being learned, what
features are considered, and so forth. Corpus analysis, however it is performed, learns the
choice rules used by human authors. If these rules are inappropriate for an nlg system,
506

Acquiring Correct Knowledge for NLG

then the rules learned by corpus analysis will be inappropriate ones as well, regardless of
how the corpus analysis is carried out.
In very general terms, corpus analysis certainly has many strengths, such as looking
at what people do in practice, and collecting large data sets which can be statistically
analysed. But pure corpus analysis does perhaps suffer from the drawback that it gives no
information on why experts made the choices they made, which means that blindly imitating
a corpus can lead to inappropriate behaviour when the human writers face a different set
of constraints and tradeoffs than the nlg system.
3.3.2 Role of Corpus Analysis
Corpus analysis and machine learning are wonderful ways to acquire knowledge if
1. there is a large data set (corpus) that covers unusual and boundary cases as well as
normal cases;
2. the members of the data set (corpus) are correct in that they are what we would like
the software system to produce; and
3. the members of the data set (corpus) are consistent (modulo some noise), for example
any given input generally leads to the same output.
These conditions are probably satisfied when learning rules for medical diagnosis or speech
recognition. However, they were not satisfied in our projects. None of the above conditions
were satisfied in stop, and only the first was satisfied in SumTime-Mousam.
Of course, there may be ways to alleviate some of these problems. For example, we could
try to acquire general communication knowledge which is not domain dependent (such as
English grammar) from general corpora such as the British National Corpus; we could
argue that certain aspects of manually written texts (such as lexical usage) are unlikely to
be adversely affected by time pressure and hence are probably correct; and we could analyse
the behaviour of individual authors in order to enhance consistency (in other words, treat
author as an input feature on a par with the actual numerical or semantic input data). There
is scope for valuable research here, which we hope will be considered by people interested
in corpus-based techniques in nlg.
We primarily used corpus analysis in SumTime-Mousam to acquire domain communication knowledge, such as how to linguistically express numbers and times in weather
forecasts, when to elide information, and sublanguage constraints on the grammar of our
weather forecasts. Corpus analysis of course can also be used to acquire generic communication knowledge such as English grammar, but as mentioned above this is probably best
done on a large general corpus such as the British National Corpus. We did not use corpus
analysis to acquire domain knowledge about meteorology. Meteorological researchers in fact
do use machine learning techniques to learn about meteorology, but they analyse numeric
data sets of actual and predicted weather, they do not analyse textual corpora.
In summary, machine learning and corpus-based techniques are extremely valuable if
the above conditions are satisfied, and in particular offer a cost-effective solution to the
problem of acquiring the large amount of knowledge needed in complex nlg applications
(Section 3.2.2). Acquiring large amounts of knowledge using expert-oriented ka techniques
507

Reiter, Sripada, & Robertson

is expensive and time-consuming because it requires many sessions with experts; in contrast,
if a large corpus of consistent and correct texts can be created, then large amounts of
knowledge can be extracted from it at low marginal cost. But like all learning techniques,
corpus analysis is very vulnerable to the ‘Garbage In, Garbage Out’ principle; if the corpus
is small, incorrect, and/or inconsistent, then the results of corpus analysis may not be
correct.
3.4 Expert Revision
In both stop and SumTime-Mousam, we made heavy use of expert revision. That is, we
showed generated texts to experts and asked them to suggest changes that would improve
them. In a sense, expert revision could be considered to be a type of structured expertoriented ka, but it seems to have somewhat different strengths and weaknesses than the
techniques mentioned in Section 3.2, so we treat it separately.
As an example of expert revision, an early version of the stop system used the phrase
there are lots of good reasons for stopping. One of the experts commented during a revision
session that the phrasing should be changed to emphasise that the reasons listed (in this
particular section of the stop letter) were ones the smoker himself had selected in the
questionnaire he filled out. This eventually led to the revised wording It is encouraging that
you have many good reasons for stopping, which is in the first paragraph of the example
letter in Figure 2. An example of expert revision in SumTime-Mousam was mentioned in
Section 3.3; when we showed experts generated texts that omitted some end-of-period time
phrases, they told us this was incorrect, and we should include such time phrases.
In stop, we also tried revision sessions with recipients (smokers). This was less successful
than we had hoped. Part of the problem was the smokers knew very little about stop (unlike
our experts, who were all familiar with the project), and often made comments which were
not useful for improving the system, such as I did stop for 10 days til my daughter threw a
wobbly and then I wanted a cigarette and bought some. Also, most of our comments came
from well-educated and articulate smokers, such as university students. It was harder to get
feedback from less well-educated smokers, such as single mothers living in council (public
housing) estates. Hence we were unsure if the revision comments we obtained were generally
applicable or not.
3.4.1 Validation of Expert Revision Knowledge
We did not validate expert revision knowledge as we did with the other techniques. Indeed,
we initially regarded expert revision as a validation technique, not a ka technique, although
in retrospect it probably makes more sense to think of it as a ka technique.
On a qualitative level, though, expert revision has certainly resulted in a lot of useful
knowledge and ideas for changing texts, and in particular proved a very useful way of
improving the handling of unusual and boundary cases. For example, we changed the way
we described uneventful days in SumTime-Mousam (when the weather changed very little
during a day) based on revision sessions.
The comment was made during stop that revision was best at suggesting specific localised changes to generated text, and less useful in suggesting larger changes to the system.
One of the stop experts suggested, after the system was built, that he might have been
508

Acquiring Correct Knowledge for NLG

able to suggest larger changes if we had explained the system’s reasoning to him, instead of
just giving him a letter to revise. In other words, just as we asked experts to ‘think-aloud’
as they wrote letters, in order to understand their reasoning, it could be useful in revision
sessions if experts understood what the computer system was ‘thinking’ as well as what
it actually produced. Davis and Lenat (1982, page 260) have similarly pointed out that
explanations can help experts debug and improve knowledge-based systems.
3.4.2 Role of Expert Revision
We have certainly found expert revision to be an extremely useful technique for improving
nlg systems; and furthermore it is useful for improving all types of knowledge (domain,
domain communication, and communication). But at the same time revision does seem to
largely be a local optimisation technique. If an nlg system is already generating reasonable
texts, then revision is a good way of adjusting the system’s knowledge and rules to improve
the quality of generated text. But like all local optimisation techniques, expert revision
may tend to push systems towards a ‘local optimum’, and may be less well suited to finding
radically different solutions that give a better result.

4. Discussion: Problems Revisited
In section 1 we explained that writing tasks can be difficult to automate because these are
complex, often novel, poorly understood, and allow multiple solutions. In this section we
discuss each of these problems in more detail, based on our experiences with stop and
SumTime-Mousam.
4.1 Complexity
Because nlg systems communicate with humans, they need knowledge about people, language, and how people communicate; since all of these are very complex, that means that in
general nlg systems need a lot of complex knowledge. This is one of the reasons why knowledge acquisition for nlg is so difficult. If we recall the distinction in Section 2.1 between
domain knowledge, domain communication knowledge, and communication knowledge, it
may be that communication knowledge (such as grammar) is generic and hence can be acquired once (perhaps by corpus-based techniques) and then used in many applications. And
domain knowledge is similar to what is needed by other ai systems, so problems acquiring
it are not unique to nlg. But domain communication knowledge, such as the optimal tone
of a smoking letter and how this tone can be achieved, or when information in a weather
forecast can be elided, is application dependent (and hence cannot be acquired generically)
and is also knowledge about language and communication (and hence is complex). Hence
ka for nlg may always require acquiring complex knowledge.
In our experience, the best way to acquire complex knowledge robustly is to get information on how a large number of individual cases are handled. This can be done by corpus
analysis if a suitable corpus can be created. It can also sometimes be done by expert revision, if experts have the time to look at a large number of generated texts; in this regard
it may be useful to tell them to only comment on major problems and to ignore minor
difficulties. But however the knowledge is acquired, it will require a substantial effort.

509

Reiter, Sripada, & Robertson

4.2 Novelty
Of course, many ai systems need complex knowledge, so the above comments are hardly
unique to nlg. But one aspect of nlg which perhaps is more unusual is that many of the
tasks nlg systems are expected to perform are novel tasks that are not currently done by
humans. Most ai ‘expert systems’ attempt to replicate the performance of human experts
in areas such as medical diagnosis and credit approval. Similarly, most language technology
systems attempt to replicate the performance of human language users in tasks such as
speech recognition and information retrieval. But many nlg applications are like stop,
and attempt a task that no human performs. Even in SumTime-Mousam, an argument
could be made that the task humans actually perform is writing weather forecasts under
time constraints, which is in fact different from the task performed by SumTime-Mousam.
Novelty is a fundamental problem, because it means that knowledge acquired from
expert-oriented ka may not be reliable (since the experts are not in fact experts at the
actual nlg task), and that a corpus of manually-written texts probably does not exist.
This means that none of the ka techniques described above are likely to work. Indeed,
acquiring novel knowledge is almost the definition of scientific research, so perhaps the only
way to acquire such knowledge is to conduct scientific research in the domain. Of course,
only some knowledge will need to be acquired in this way, even in a novel application it is
likely that much of the knowledge needed (such as grammar and morphology) is not novel.
On the other hand, novelty perhaps is also an opportunity for nlg. One of the drawbacks of conventional expert systems is that their performance is often limited to that of
human experts, in which case users may prefer to consult actual experts instead of computer
systems. But if there are no experts at a task, an nlg system may be used even if its output
is far from ideal.
4.3 Poorly Understood Tasks
A perhaps related problem is that there are no good theoretical models for many of the
choices that nlg systems need to make. For example, the ultimate goal of stop is to
change people’s behaviour, and a number of colleagues have suggested that we base stop
on argumentation theory, as Grasso, Cawsey, and Jones (2000) did for their dietary advice
system. However, argumentation theory focuses on persuading people to change their beliefs
and desires, whereas the goal of stop was more to encourage people to act on beliefs and
desires they already had. In other words, stop’s main goal was to encourage people who
already wanted to stop smoking to make a serious cessation attempt, not to convince people
who had no desire to quit that they should change their mind about the desirability of
smoking. The most applicable theory we could find was Stages of Change (Prochaska &
diClemente, 1992), and indeed we partially based stop on this theory. However, the results
of our evaluation suggested that some of the choices and rules that we based on Stages of
Change were incorrect, as mentioned in Section 3.2.1.
Similarly, one of the problems in SumTime-Mousam is generating texts that will be
interpreted correctly despite the fact that different readers have different idiolects and in
particular probably interpret words in different ways (Reiter & Sripada, 2002a; Roy, 2002).
Theoretical guidance on how to do this would have been very useful, but we were not able
to find any such guidance.
510

Acquiring Correct Knowledge for NLG

The lack of good theoretical models means that nlg developers cannot use such models
to ‘fill in the cracks’ between knowledge acquired from experts or from data sets, as can be
done by ai systems in better understood areas such as scheduling or configuring machinery.
This in turn means that a lot of knowledge must be acquired. In applications where there is
a good theoretical basis, the goal of ka is perhaps to acquire a limited amount of high-level
information about search strategies, taxonomies, the best way to represent knowledge, etc;
once these have been determined, the details can be filled in by theoretical models. But in
applications where details cannot be filled in from theory and need to be acquired, much
more knowledge is needed. Acquiring such knowledge with structured expert-oriented ka
could be extremely expensive and time consuming. Corpus-based techniques are cheaper if
a large corpus is available; however, the lack of a good theoretical understanding perhaps
contributes to the problem that we do not know which behaviour we observe in the corpus
is intended to help the reader (and hence should be copied by an nlg system) and which
behaviour is intended to help the writer (and hence perhaps should not be copied).
4.4 Expert Variation
Perhaps in part because of the lack of good theories, in both stop and SumTime-Mousam
we observed considerable variation between experts. In other words, different experts wrote
quite different texts from the same input data. In stop we also discovered that experts
changed how they wrote over time (Section 3.2.1).
Variability caused problems for both structured expert-oriented ka (because different
experts told us different things) and for corpus analysis (because variation among corpus
authors made it harder to extract a consistent set of rules with good coverage). However,
variation seems to have been less of a problem with revision. We suspect this is because
experts vary less when they are very confident about a particular decision; and in revision
experts tended to focus on things they were confident about, which was not the case with
the other ka techniques.
In a sense variability may be especially dangerous in corpus analysis, because there is
no information in a corpus about the degree of confidence authors have in individual decisions, and also because developers may not even realise that there is variability between
authors, especially if the corpus does not include author information. In contrast, structured expert-oriented techniques such as think-aloud do sometimes give information about
experts’ confidence, and also variations between experts are usually obvious.
We experimented with various techniques for resolving differences between experts/authors,
such as group discussions and focusing on the decisions made by one particular expert. None
of these were really satisfactory. Given our experiences with revision, perhaps the best way
to reduce variation is to develop ka techniques that very clearly distinguish between decisions experts are confident in and decisions they have less confidence in.

5. Development Methodology: Using Multiple KA Techniques
From a methodological perspective, the fact that different ka techniques have different
strengths and weaknesses suggests that it makes sense to use a mixture of several different
ka techniques. For example, if both structured expert-oriented ka and corpus analysis
are used, then the explanatory information from the expert-oriented ka can be used to
511

Reiter, Sripada, & Robertson

help identify which decisions are intended to help the reader and which are intended to
help the writer, thus helping overcome a problem with corpus analysis; and the broader
coverage of corpus analysis can show how unusual and boundary cases should be handled,
thus overcoming a problem with expert-oriented ka.
It also may make sense to use different techniques at different points in the development
process. For example, directly asking experts for knowledge could be stressed at the initial
stages of a project, and used to build a very simple initial prototype; structured ka with
experts and corpus analysis could be stressed during the middle phases of a project, when
the prototype is fleshed out and converted into something resembling a real system; and
revision could be used in the later stages of a project, when the system is being refined and
improved.
This strategy, which is graphically shown in Figure 5, is basically the one we followed
in both stop and SumTime-Mousam. Note that it suggests that knowledge acquisition is
something that happens throughout the development process. In other words, we do not first
acquire knowledge and then build a system; knowledge acquisition is an ongoing process
which is closely coupled with the general software development effort. Of course, this is
hardly a novel observation, and there are many development methodologies for knowledgebased systems that stress iterative development and continual ka (Adelman & Riedel,
1997).
In the short term, we believe that using a development methodology that combines
different ka techniques in this manner, and also validating knowledge as much as possible,
are the best strategies for acquiring nlg knowledge. We also believe that whenever possible
knowledge that is acquired in one way should be validated in another way. In other words,
we do not recommend validating corpus-acquired knowledge using corpus techniques (even
if the validation is done with a held-out test set); or validating expert-acquired knowledge
using expert-based validation (even if the validation is done using a different expert). It
is preferable (although not always possible) to validate corpus-acquired knowledge with
experts, and to validate expert-acquired knowledge with a corpus.
Another issue related to development methodology is the relationship between knowledge acquisition and system evaluation. Although these are usually considered to be separate activities, in fact they can be closely related. For example, we are currently running
an evaluation of SumTime-Mousam which is based on the number of edits that forecasters
manually make to computer-generated forecasts before publishing them; this is similar to
edit-cost evaluations of machine translation systems (Jurafsky & Martin, 2000, page 823).
However, these edits are also an excellent source of data for improving the system via expert
revision. To take one recent example, a forecaster edited the computer-generated text SSE
23-28 GRADUALLY BACKING SE 20-25 by dropping the last speed range, giving SSE
23-28 GRADUALLY BACKING SE. This can be considered as evaluation data (2 token
edits needed to make text acceptable), or as ka data (we need to adjust our rules for eliding
similar but not identical speed ranges).
In other words, real-world feedback on the effectiveness and quality of generated texts
can often be used to either improve or evaluate an nlg system. How such data should
be used depends on the goals of the project. In scientific projects whose goal is to test
hypotheses, it may be appropriate at some point to stop improving a system and use all new
effectiveness data purely for evaluation and hypothesis testing; in a sense this is analogous
512

Acquiring Correct Knowledge for NLG

Directly Ask Experts
for Knowledge
Initial prototype

Structured KA
with Experts

Corpus Analysis

Initial version of full system

Expert Revision

Final System
Figure 5: Our Methodology
to holding back part of a corpus for testing purposes. In applied projects whose goal is
to build a maximally useful system, however, it may be more appropriate to use all of the
effectiveness data to improve the quality of the generated texts.

6. Conclusion
Acquiring correct knowledge for nlg is very difficult, because the knowledge needed is
largely knowledge about people, language, and communication, and such knowledge is complex and poorly understood. Furthermore, perhaps because writing is more of an art than a
science, different people write very differently, which further complicates the knowledge acquisition process; and many nlg systems attempt novel tasks not currently done manually,
which makes it very hard to find knowledgeable experts or good quality corpora. Perhaps
because of these problems, every single ka technique we tried in stop and SumTimeMousam had major problems and limitations.
There is no easy solution to these problems. In the short term, we believe it is useful
to use a mixture of different ka techniques (since techniques have different strengths and
weaknesses), and to validate knowledge whenever possible, preferably using a different tech-

513

Reiter, Sripada, & Robertson

nique than the one used to acquire the knowledge. It also helps if developers understand
the weaknesses of different techniques, such as the fact that structured expert-oriented ka
may not give good coverage of the complexities of people and language, and the fact that
corpus-based ka does not distinguish between behaviour intended to help the reader and
behaviour intended to help the writer.
In the longer term, we need more research on better ka techniques for nlg. If we cannot
reliably acquire the knowledge needed by ai approaches to text generation, then there is
no point in using such approaches, regardless of how clever our algorithms or models are.
The first step towards developing better ka techniques is to acknowledge that current ka
techniques are not working well, and understand why this is the case; we hope that this
paper constitutes a useful step in this direction.

Acknowledgements
Numerous people have given us valuable comments over the past five years as we struggled with ka for nlg, too many to acknowledge here. But we would like to thank Sandra
Williams for reading several drafts of this paper and considering it in the light of her own experiences, and to thank the anonymous reviewers for their very helpful comments. We would
also like to thank the experts we worked with in stop and SumTime-Mousam, without
whom this work would not be possible. This work was supported by the UK Engineering and
Physical Sciences Research Council (EPSRC), under grants GR/L48812 and GR/M76881,
and by the Scottish Office Department of Health under grant K/OPR/2/2/D318.

References
Adelman, L., & Riedel, S. (1997). Handbook for Evaluating Knowledge-Based Systems.
Kluwer.
Anderson, J. (1995). Cognitive Psychology and its Implications (Fourth edition). Freeman.
Barzilay, R., & McKeown, K. (2001). Extracting paraphrases from a parallel corporus.
In Proceedings of the 39th Meeting of the Association for Computation Linguistics
(ACL-01), pp. 50–57.
Buchanan, B., & Wilkins, D. (Eds.). (1993). Readings in Knowledge Acquisition and Learning. Morgan Kaufmann.
Davis, R., & Lenat, D. (1982). Knowledge-Based Systems in Artificial Intelligence. McGraw
Hill.
Duboue, P., & McKeown, K. (2001). Empirically estimating order constraints for content
planning in generation. In Proceedings of the 39th Meeting of the Association for
Computation Linguistics (ACL-01), pp. 172–179.
Goldberg, E., Driedger, N., & Kittredge, R. (1994). Using natural-language processing to
produce weather forecasts. IEEE Expert, 9 (2), 45–53.
Grasso, F., Cawsey, A., & Jones, R. (2000). Dialectical argumentation to solve conflicts
in advice giving: a case study in the promotion of healthy nutrition. International
Journal of Human Computer Studies, 53, 1077–1115.
514

Acquiring Correct Knowledge for NLG

Hardt, D., & Rambow, O. (2001). Generation of VP-ellipsis: A corpus-based approach.
In Proceedings of the 39th Meeting of the Association for Computation Linguistics
(ACL-01), pp. 282–289.
Jurafsky, D., & Martin, J. (2000). Speech and Language Processing. Prentice-Hall.
Kittredge, R., Korelsky, T., & Rambow, O. (1991). On the need for domain communication
language. Computational Intelligence, 7 (4), 305–314.
Lavoie, B., Rambow, O., & Reiter, E. (1997). Customizable descriptions of object-oriented
models. In Proceedings of the Fifth Conference on Applied Natural-Language Processing (ANLP-1997), pp. 253–256.
Lennox, S., Osman, L., Reiter, E., Robertson, R., Friend, J., McCann, I., Skatun, D., & Donnan, P. (2001). The cost-effectiveness of computer-tailored and non-tailored smoking
cessation letters in general practice: A randomised controlled study. British Medical
Journal, 322, 1396–1400.
McKeown, K., Kukich, K., & Shaw, J. (1994). Practical issues in automatic document
generation. In Proceedings of the Fourth Conference on Applied Natural-Language
Processing (ANLP-1994), pp. 7–14.
Oberlander, J., O’Donnell, M., Knott, A., & Mellish, C. (1998). Conversation in the museum: experiments in dynamic hypermedia with the intelligent labelling explorer. New
Review of Hypermedia and Multimedia, 4, 11–32.
Prochaska, J., & diClemente, C. (1992). Stages of Change in the Modification of Problem
Behaviors. Sage.
Reiter, E., & Dale, R. (2000). Building Natural Language Generation Systems. Cambridge
University Press.
Reiter, E., Robertson, R., & Osman, L. (2000). Knowledge acquisition for natural language
generation. In Proceedings of the First International Conference on Natural Language
Generation, pp. 217–215.
Reiter, E., Robertson, R., & Osman, L. (2003). Lessons from a failure: Generating tailored
smoking cessation letters. Artificial Intelligence, 144, 41–58.
Reiter, E., & Sripada, S. (2002a). Human variation and lexical choice. Computational
Linguistics, 28, 545–553.
Reiter, E., & Sripada, S. (2002b). Should corpora texts be gold standards for NLG?. In
Proceedings of the Second International Conference on Natural Language Generation,
pp. 97–104.
Reiter, E., Sripada, S., & Williams, S. (2003). Acquiring and using limited user models in
NLG. In Proceedings of the 2003 European Workshop on Natural Language Generation, pp. 87–94.
Roy, D. (2002). Learning visually grounded words and syntax for a scene description task.
Computer Speech and Language, 16, 353–385.
Scott, A. C., Clayton, J., & Gibson, E. (1991). A Practical Guide to Knowledge Acquisition.
Addison-Wesley.
515

Reiter, Sripada, & Robertson

Shadbolt, N., O’Hara, K., & Crow, L. (1999). The experimental evaluation of knowledge acquisition techniques and methods: History, problems and new directions. International
Journal of Human Computer Studies, 51, 729–755.
Sripada, S., Reiter, E., Hunter, J., & Yu, J. (2002). Segmenting time series for weather
forecasting. In Applications and Innovations in Intelligent Systems X, pp. 105–118.
Springer-Verlag.
Sripada, S., Reiter, E., Hunter, J., & Yu, J. (2003). Summarising neonatal time-series data.
In Proceedings of the Research Note Sessions of the EACL-2003, pp. 167–170.
Sripada, S., Reiter, E., Hunter, J., Yu, J., & Davy, I. (2001). Modelling the task of summarising time series data using KA techniques. In Applications and Innovations in
Intelligent Systems IX, pp. 183–196. Springer-Verlag.
Walker, M., Rambow, O., & Rogati, M. (2002). Training a sentence planner for spoken
dialogue using boosting. Computer Speech and Language, 16, 409–433.
Williams, S., Reiter, E., & Osman, L. (2003). Experiments with discourse-level choices
and readability. In Proceedings of the 2003 European Workshop on Natural Language
Generation, pp. 127–134.

516

Journal of Artificial Intelligence Research 18 (2003) 1-44

Submitted 5/02; published 1/03

Acquiring Word-Meaning Mappings
for Natural Language Interfaces
Cynthia A. Thompson

cindi@cs.utah.edu

School of Computing, University of Utah
Salt Lake City, UT 84112-3320

Raymond J. Mooney

mooney@cs.utexas.edu

Department of Computer Sciences, University of Texas
Austin, TX 78712-1188

Abstract
This paper focuses on a system, Wolfie (WOrd Learning From Interpreted Examples), that acquires a semantic lexicon from a corpus of sentences paired with semantic
representations. The lexicon learned consists of phrases paired with meaning representations. Wolfie is part of an integrated system that learns to transform sentences into
representations such as logical database queries.
Experimental results are presented demonstrating Wolfie’s ability to learn useful
lexicons for a database interface in four different natural languages. The usefulness of
the lexicons learned by Wolfie are compared to those acquired by a similar system, with
results favorable to Wolfie. A second set of experiments demonstrates Wolfie’s ability
to scale to larger and more difficult, albeit artificially generated, corpora.
In natural language acquisition, it is difficult to gather the annotated data needed
for supervised learning; however, unannotated data is fairly plentiful. Active learning
methods attempt to select for annotation and training only the most informative examples,
and therefore are potentially very useful in natural language applications. However, most
results to date for active learning have only considered standard classification tasks. To
reduce annotation effort while maintaining accuracy, we apply active learning to semantic
lexicons. We show that active learning can significantly reduce the number of annotated
examples required to achieve a given level of performance.

1. Introduction and Overview
A long-standing goal for the field of artificial intelligence is to enable computer understanding of human languages. Much progress has been made in reaching this goal, but much also
remains to be done. Before artificial intelligence systems can meet this goal, they first need
the ability to parse sentences, or transform them into a representation that is more easily
manipulated by computers. Several knowledge sources are required for parsing, such as a
grammar, lexicon, and parsing mechanism.
Natural language processing (NLP) researchers have traditionally attempted to build
these knowledge sources by hand, often resulting in brittle, inefficient systems that take
a significant effort to build. Our goal here is to overcome this “knowledge acquisition
bottleneck” by applying methods from machine learning. We develop and apply methods
from empirical or corpus-based NLP to learn semantic lexicons, and from active learning to
reduce the annotation effort required to learn them.

c
2003
AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Thompson & Mooney

The semantic lexicon is one NLP component that is typically challenging and time consuming to construct and update by hand. Our notion of semantic lexicon, formally defined
in Section 3, is that of a list of phrase-meaning pairs, where the meaning representation is
determined by the language understanding task at hand, and where we are taking a compositional view of sentence meaning (Partee, Meulen, & Wall, 1990). This paper describes
a system, Wolfie (WOrd Learning From Interpreted Examples), that acquires a semantic
lexicon of phrase-meaning pairs from a corpus of sentences paired with semantic representations. The goal is to automate lexicon construction for an integrated NLP system that
acquires both semantic lexicons and parsers for natural language interfaces from a single
training set of annotated sentences.
Although many others (Sébillot, Bouillon, & Fabre, 2000; Riloff & Jones, 1999; Siskind,
1996; Hastings, 1996; Grefenstette, 1994; Brent, 1991) have presented systems for learning
information about lexical semantics, we present here a system for learning lexicons of phrasemeaning pairs. Further, our work is unique in its combination of several features, though
prior work has included some of these aspects. First, its output can be used by a system,
Chill (Zelle & Mooney, 1996; Zelle, 1995), that learns to parse sentences into semantic
representations. Second, it uses a fairly straightforward batch, greedy, heuristic learning
algorithm that requires only a small number of examples to generalize well. Third, it is
easily extendible to new representation formalisms. Fourth, it requires no prior knowledge
although it can exploit an initial lexicon if provided. Finally, it simplifies the learning
problem by making several assumptions about the training data, as described further in
Section 3.2.
We test Wolfie’s ability to acquire a semantic lexicon for a natural language interface
to a geographical database using a corpus of queries collected from human subjects and
annotated with their logical form. In this test, Wolfie is integrated with Chill, which
learns parsers but requires a semantic lexicon (previously built manually). The results
demonstrate that the final acquired parser performs nearly as accurately at answering novel
questions when using a learned lexicon as when using a hand-built lexicon. Wolfie is
also compared to an alternative lexicon acquisition system developed by Siskind (1996),
demonstrating superior performance on this task. Finally, the corpus is translated into
Spanish, Japanese, and Turkish, and experiments are conducted demonstrating an ability
to learn successful lexicons and parsers for a variety of languages.
A second set of experiments demonstrates Wolfie’s ability to scale to larger and more
difficult, albeit artificially generated, corpora. Overall, the results demonstrate a robust
ability to acquire accurate lexicons directly usable for semantic parsing. With such an
integrated system, the task of building a semantic parser for a new domain is simplified. A
single representative corpus of sentence-representation pairs allows the acquisition of both
a semantic lexicon and parser that generalizes well to novel sentences.
While building an annotated corpus is arguably less work than building an entire NLP
system, it is still not a simple task. Redundancies and errors may occur in the training data.
A goal should be to also minimize the annotation effort, yet still achieve a reasonable level
of generalization performance. In the case of natural language, there is frequently a large
amount of unannotated text available. We would like to automatically, but intelligently,
choose which of the available sentences to annotate.

2

Acquiring Word-Meaning Mappings

We do this here using a technique called active learning. Active learning is a research
area in machine learning that features systems that automatically select the most informative examples for annotation and training (Cohn, Atlas, & Ladner, 1994). The primary goal
of active learning is to reduce the number of examples that the system is trained on, thereby
reducing the example annotation cost, while maintaining the accuracy of the acquired information. To demonstrate the usefulness of our active learning techniques, we compared
the accuracy of parsers and lexicons learned using examples chosen by active learning for
lexicon acquisition, to those learned using randomly chosen examples, finding that active
learning saved significant annotation cost over training on randomly chosen examples. This
savings is demonstrated in the geography query domain.
In summary, this paper provides a new statement of the lexicon acquisition problem
and demonstrates a machine learning technique for solving this problem. Next, by combining this with previous research, we show that an entire natural language interface can
be acquired from one training corpus. Further, we demonstrate the application of active
learning techniques to minimize the number of sentences to annotate as training input for
the integrated learning system.
The remainder of the paper is organized as follows. Section 2 gives more background
information on Chill and introduces Siskind’s lexicon acquisition system, which we will
compare to Wolfie in Section 5. Sections 3 and 4 formally define the learning problem and
describe the Wolfie algorithm in detail. In Section 5 we present and discuss experiments
evaluating Wolfie’s performance in learning lexicons in a database query domain and for
an artificial corpus. Next, Section 6 describes and evaluates our use of active learning
techniques for Wolfie. Sections 7 and 8 discuss related research and future directions,
respectively. Finally, Section 9 summarizes our research and results.

2. Background
In this section we give an overview of Chill, the system that our research adds to. We also
describe Jeff Siskind’s lexicon acquisition system.
2.1 Chill
The output produced by Wolfie can be used to assist a larger language acquisition system;
in particular, it is currently used as part of the input to a parser acquisition system called
Chill (Constructive Heuristics Induction for Language Learning). Chill uses inductive
logic programming (Muggleton, 1992; Lavrac̆ & Dz̆eroski, 1994) to learn a deterministic
shift-reduce parser (Tomita, 1986) written in Prolog. The input to Chill is a corpus of
sentences paired with semantic representations, the same input required by Wolfie. The
parser learned is capable of mapping the sentences into their correct representations, as well
as generalizing well to novel sentences. In this paper, we limit our discussion to Chill’s
ability to acquire parsers that map natural language questions directly into Prolog queries
that can be executed to produce an answer (Zelle & Mooney, 1996). Following are two
sample queries for a database on U.S. geography, paired with their corresponding Prolog
query:

3

Thompson & Mooney

<Sentence, Representation>
Training
Examples

WOLFIE

CHILL

Lexicon
<Phrase, Meaning>

Final
Parser
Prolog

Figure 1: The Integrated System
What is the capital of the state with the biggest population?
answer(C, (capital(S,C), largest(P, (state(S), population(S,P))))).
What state is Texarkana located in?
answer(S, (state(S), eq(C,cityid(texarkana, )), loc(C,S))).
Chill treats parser induction as the problem of learning rules to control the actions of
a shift-reduce parser. During parsing, the current context is maintained in a stack and a
buffer containing the remaining input. When parsing is complete, the stack contains the
representation of the input sentence. There are three types of operators that the parser uses
to construct logical queries. One is the introduction onto the stack of a predicate needed in
the sentence representation due to a phrase’s appearance at the front of the input buffer.
These operators require a semantic lexicon as background knowledge. For details on this
and the other two parsing operators, see Zelle and Mooney (1996). By using Wolfie, the
lexicon is provided automatically. Figure 1 illustrates the complete system.
2.2 Jeff Siskind’s Lexicon Learning Research
The most closely related previous research into automated lexicon acquisition is that of
Siskind (1996), itself inspired by work by Rayner, Hugosson, and Hagert (1988). As we
will be comparing our system to his in Section 5, we describe the main features of his
research in this section. His goal is one of cognitive modeling of children’s acquisition of the
lexicon, where that lexicon can be used for both comprehension and generation. Our goal
is a machine learning and engineering one, and focuses on a lexicon for comprehension and
use in parsing, using a learning process that does not claim any cognitive plausibility, and
with the goal of learning a lexicon that generalizes well from a small number of training
examples.
His system takes an incremental approach to acquiring a lexicon. Learning proceeds in
two stages. The first stage learns which symbols in the representation are to be used in the
4

Acquiring Word-Meaning Mappings

(‘‘capital’’, capital(_,_)),
(‘‘biggest’’, largest(_,_)),
(‘‘highest point’’, high_point(_,_)),
(‘‘through’’, traverse(_,_)),
(‘‘has’’, loc(_,_))

(‘‘state’’, state(_)),
(‘‘in’’, loc(_,_)),
(‘‘long’’, len(_,_)),
(‘‘capital’’, capital(_)),

Figure 2: Sample Semantic Lexicon
final “conceptual expression” that represents the meaning of a word, by using a versionspace approach. The second stage learns how these symbols are put together to form the
final representation. For example, when learning the meaning of the word “raise”, the
algorithm may learn the set {CAUSE, GO, UP} during the first stage and put them together
to form the expression CAUSE(x, GO(y, UP)) during the second stage.
Siskind (1996) shows the effectiveness of his approach on a series of artificial corpora.
The system handles noise, lexical ambiguity, referential uncertainty, and very large corpora, but the usefulness of lexicons learned is only compared to the “correct,” artificial
lexicon. The goal of the experiments presented there was to evaluate the correctness and
completeness of learned lexicons. Earlier work (Siskind, 1992) also evaluated versions of his
technique on a quite small corpus of real English and Japanese sentences. We extend that
evaluation to a demonstration of the system’s usefulness in performing real world natural
language processing tasks, using a larger corpus of real sentences.

3. The Lexicon Acquisition Problem
Although in the end our goal is to acquire an entire natural language interface, we currently
divide the task into two parts, the lexicon acquisition component and the parser acquisition
component. In this section, we discuss the problem of acquiring semantic lexicons that
assist parsing and the acquisition of parsers. The training input consists of natural language
sentences paired with their meaning representations. From these pairs we extract a lexicon
consisting of phrases paired with their meaning representations. Some training pairs were
given in the previous section, and a sample lexicon is shown in Figure 2.
3.1 Formal Definition
To present the learning problem more formally, some definitions are needed. While in the
following we use the terms “string” and “substring,” these extend straight-forwardly to
natural language sentences and phrases, respectively. We also refer to labeled trees, making
the assumption that the semantic meanings of interest can be represented as such. Most
common representations can be recast as labeled trees or forests, and our formalism extends
easily to the latter.
Definition: Let ΣV , ΣE be finite alphabets of vertex labels and edge labels, respectively.
Let V be a finite nonempty set of vertices, l a total function l : V → ΣV , E a set of unordered
pairs of distinct vertices called edges, and a a total function a : E → ΣE . G = (V, l, E, a) is
a labeled graph.

5

Thompson & Mooney

String s 1: ‘‘The girl ate the pasta with the cheese.’’
t 1 with its vertex and edge labels:

Tree t 1
1
2
4

ingest
patient
agent
person food
age type accomp
sex

3
5

6

7

female

child pasta

food

type
cheese

8

Interpretation f 1 from s 1 to t1 :
f 1 (‘‘girl’’) = 2
f 1 (‘‘ate") = 1
f 1 (‘‘pasta") = 3
f 1 (‘‘the cheese") = 7

Figure 3: Labeled Trees and Interpretations
Definition: A labeled tree is a connected, acyclic labeled graph.
Figure 3 shows the labeled tree t1 (with vertices 1-8) on the left, with associated vertex
and edge labels on the right. The function l is:1
{

(1, ingest), (2, person), (3, food), (4, female), (5, child), (6, pasta),
(7, food), (8, cheese) }.

The tree t1 is a semantic representation of the sentence s1 : “The girl ate the pasta with the
cheese.” Using a conceptual dependency (Schank, 1975) representation in Prolog list form,
the meaning is:
[ingest,

agent:[person, sex:female, age:child],
patient:[food, type:pasta, accomp:[food, type:cheese]]].

Definition: A u-v path in a graph G is a finite alternating sequence of vertices and edges
of G, in which no vertex is repeated, that begins with vertex u and ends with vertex v, and
in which each edge in the sequence connects the vertex that precedes it in the sequence to
the vertex that follows it in the sequence.
Definition: A directed, labeled tree T = (V, l, E, a) is a labeled tree whose edges consist of
ordered pairs of vertices, with a distinguished vertex r, called the root, with the property
that for every v ∈ V , there is a directed r-v path in T , and such that the underlying
undirected unlabeled graph induced by (V, E) is a connected, acyclic graph.
Definition: An interpretation f from a finite string s to a directed, labeled tree t is a
one-to-one function mapping a subset s0 of the substrings of s, such that no two strings in
s0 overlap, into the vertices of t such that the root of t is in the range of f .
1. We omit enumeration of the function e but it could be given in a similar manner, for example ((1,2),
agent) is an element of e.

6

Acquiring Word-Meaning Mappings

‘‘girl":

person
sex
age
female

‘‘pasta": food

type

child

pasta

‘‘the cheese": food
type
cheese

‘‘ate": ingest

Figure 4: Meanings
The interpretation provides information about what parts of the meaning of a sentence
originate from which of its phrases. In Figure 3, we show an interpretation, f1 , of s1 to t1 .
Note that “with” is not in the domain of f1 , since s0 is a subset of the substrings of s, thus
allowing some words in s to have no meaning. Because we disallow overlapping substrings
in the domain, both “cheese” and “the cheese” could not map to vertices in t1 .
Definition: Given an interpretation f of string s to tree t, and an element p of the domain
of f , the meaning of p relative to s, t, f is the connected subgraph of t whose vertices
include f (p) and all its descendents except any other vertices in the range of f and their
descendents.
Meanings in this sense concern the “lowest level” of phrasal meanings, occurring at the
terminal nodes of a semantic grammar, namely the entries in the semantic lexicon. The
grammar can then be used to construct the meanings of longer phrases and entire sentences.
This is our motivation for the previously stated constraint that the root must be included
in the range of f : we want all vertices in the sentence representation to be included in the
meaning of some phrase. Note that the meaning of p is also a directed tree with f (p) as its
root. Figure 4 shows the meanings of each phrase in the domain of interpretation function
f1 shown in Figure 3. We show only the labels on the vertices and edges for readability.
Definition: Given a finite set ST F of triples < s1 , t1 , f1 >, . . . , < sn , tn , fn >, where each
si is a finite string, each ti is a directed, labeled tree, and each fi is an interpretation function
from si to ti , let the language LST F = {p1 , . . . , pk } of ST F be the union of all substrings2
that occur in the domain of some fi . For each pj ∈ LST F , the meaning set of pj , denoted
MST F (pj ),3 is the set of all meanings of pj relative to si , ti , fi for some < si , ti , fi >∈ ST F .
We consider two meanings to be the same if they are isomorphic trees taking labels into
account.
For example, given sentence s2 : “The man ate the cheese,” the labeled tree t2 pictured
in Figure 5, and f2 defined as: f2 (“ate”) = 1, f2 (“man”) = 2, f2 (“the cheese”) = 3; the
2. We consider two substrings to be the same string if they contain the same characters in the same order,
irrespective of their positions within the larger string in which they occur.
3. We omit the subscript on M when the set ST F is obvious from context.

7

Thompson & Mooney

String s2 : ‘‘The man ate the cheese."
Tree t2 :

t2 with its vertex and edge labels:
ingest
patient
agent

1
2

4

3

person food
type
age
sex
6

5

male

adult

cheese

Figure 5: A Second Tree
meaning set of “the cheese” with respect to ST F = {< s1 , t1 , f1 >, < s2 , t2 , f2 >} is {[food,
type:cheese]}, just one meaning though f1 and f2 map “the cheese” to different vertices
in the two trees, because the subgraphs denoting the meaning of “the cheese” for the two
functions are isomorphic.
Definition: Given a finite set ST F of triples < s1 , t1 , f1 >, . . . , < sn , tn , fn >, where each
si is a finite string, each ti is a directed, labeled tree, and each fi is an interpretation
function from si to ti , the covering lexicon expressed by ST F is
{(p, m) : p ∈ LST F , m ∈ M (p)}.
The covering lexicon L expressed by ST F = {< s1 , t1 , f1 >, < s2 , t2 , f2 >} is:
{

(“girl”, [person, sex:female, age:child]),
(“man”, [person, sex:male, age:adult]),
(“ate”, [ingest]),
(“pasta”, [food, type:pasta]),
(“the cheese”, [food, type:cheese]) }.

The idea of a covering lexicon is that it provides, for each string (sentence) si , a meaning
for some of the phrases in that sentence. Further, these meanings are trees whose labeled
vertices together include each of the labeled vertices in the tree ti representing the meaning
of si , with no vertices duplicated, and containing no vertices not in ti . Edge labels may
or may not be included, since the idea is that some of them are due to syntax, which the
parser will provide; those edges capturing lexical semantics are in the lexicon. Note that
because we only include in the covering lexicon phrases (substrings) that are in the domains
of the fi ’s, words with the empty tree as meaning are not included in the covering lexicon.
Note also that we will in general use “phrase” to mean substrings of sentences, whether
they consist of one word, or more than one. Finally the strings in the covering lexicon may
contain overlapping words even though those in the domain of an individual interpretation
function must not, since those overlapping words could have occurred in different sentences.
Finally, we are ready to define the learning problem at hand.

8

Acquiring Word-Meaning Mappings

The Lexicon Acquisition Problem:
Given: a multiset of strings S = {s1 , . . . , sn } and a multiset of labeled trees T = {t1 , . . . , tn },
Find: a multiset of interpretation functions, F = {f1 , . . . , fn }, such that the cardinality of
the covering lexicon expressed by ST F = {< s1 , t1 , f1 >, . . . , < sn , tn , fn >} is minimized.
If such a set is found, we say we have found a minimal set of interpretations (or a minimal
covering lexicon). 2
Less formally, a learner is presented with a multiset of sentences (S) paired with their
meanings (T ); the goal of learning is to find the smallest lexicon consistent with this data.
This lexicon is the paired listing of all phrases occurring in the domain of some fi ∈ F
(where F is the multiset of interpretation functions found) with each of the elements in
their meaning sets. The motivation for finding a lexicon of minimal size is the usual bias
towards simplicity of representation and generalization beyond the training data. While
this definition allows for phrases of any length, we will usually want to limit the length
of phrases to be considered for inclusion in the domain of the interpretation functions, for
efficiency purposes.
Once we determine a set of interpretation functions for a set of strings and trees, there
is only one unique covering lexicon expressed by ST F . However, this might not be the
only set of interpretation functions possible, and may not result in the lexicon with smallest
cardinality. For example, the covering lexicon given with the previous example is not a
minimal covering lexicon. For the two sentences given, we could find minimal, though
rather degenerate, lexicons such as:
{

(“girl”,
(“man”,

[ingest, agent:[person, sex:female, age:child],
patient:[food, type:pasta, accomp:[food, type:cheese]]]),
[ingest, agent:[person, sex:male, age:adult],
patient:[food, type:cheese]]) }

This type of lexicon becomes less likely as the size of the corpus grows.
3.2 Implications of the Definition
This definition of the lexicon acquisition problem differs from that given by other authors,
including Riloff and Jones (1999), Siskind (1996), Manning (1993), Brent (1991) and others,
as further discussed in Section 7. Our definition of the problem makes some assumptions
about the training input. First, by making f a function instead of a relation, the definition
assumes that the meaning for each phrase in a sentence appears once in the representation
of that sentence, the single-use assumption. Second, by making f one-to-one, it assumes
exclusivity, that each vertex in a sentence’s representation is due to only one phrase in the
sentence. Third, it assumes that a phrase’s meaning is a connected subgraph of a sentence’s
representation, not a more distributed representation, the connectedness assumption. While
the first assumption may not hold for some representation languages, it does not present a
problem in the domains we have considered. The second and third assumptions are perhaps
less problematic with respect to general language use.
Our definition also assumes compositionality: that the meaning of a sentence is derived
from the meanings of the phrases it contains, in addition, perhaps to some “connecting”
information specific to the representation at hand, but is not derived from external sources
9

Thompson & Mooney

such as noise. In other words, all the vertices of a sentence’s representation are included
within the meaning of some word or phrase in that sentence. This assumption is similar
to the linking rules of Jackendoff (1990), and has been used in previous work on grammar
and language acquisition (e.g., Haas and Jayaraman, 1997; Siskind, 19964 ) While there is
some debate in the linguistics community about the ability of compositional techniques to
handle all phenomena (Fillmore, 1988; Goldberg, 1995), making this assumption simplifies
the learning process and works reasonably for the domains of interest here. Also, since we
allow multi-word phrases in the lexicon (e.g., (“kick the bucket”, die( ))), one objection
to compositionality can be addressed.
This definition also allows training input in which:
1. Words and phrases have multiple meanings. That is, homonymy might occur in the
lexicon.
2. Several phrases map to the same meaning. That is, synonymy might occur in the
lexicon.
3. Some words in a sentence do not map to any meanings, leaving them unused in the
assignment of words to meanings.5
4. Phrases of contiguous words map to parts of a sentence’s meaning representation.
Of particular note is lexical ambiguity (1 above). Note that we could have also derived an
ambiguous lexicon such as:
{

(“girl”, [person, sex:female, age:child]),
(“ate”, [ingest]),
(“ate”, [ingest, agent:[person, sex:male, age:adult]]),
(“pasta”, [food, type:pasta]),
(“the cheese”, [food, type:cheese]) }.

from our sample corpus. In this lexicon, “ate” is an ambiguous word. The earlier example
minimizes ambiguity resulting in an alternative, more intuitively pleasing lexicon. While
our problem definition first minimizes the number of entries in the lexicon, our learning
algorithm will also exploit a preference for minimizing ambiguity.
Also note that our definition allows training input in which sentences themselves are
ambiguous (paired with more than one meaning), since a given sentence in S (a multiset)
might appear multiple times appear with more than one meaning. In fact, the training data
that we consider in Section 5 does have some ambiguous sentences.
Our definition of the lexicon acquisition problem does not fit cleanly into the traditional
definition of learning for classification. Each training example contains a sentence and its
semantic parse, and we are trying to extract semantic information about some of the phrases
in that sentence. So each example potentially contains information about multiple target
concepts (phrases), and we are trying to pick out the relevant “features,” or vertices of the
4. In fact, all of these assumptions except for single-use were made by Siskind (1996); see Section 7 for
details.
5. These words may, however, serve as cues to a parser on how to assemble sentence meanings from word
meanings.

10

Acquiring Word-Meaning Mappings

representation, corresponding to the correct meaning of each phrase. Of course, our assumptions of single-use, exclusivity, connectedness, and compositionality impose additional
constraints. In addition to this “multiple examples in one” learning scenario, we do not
have access to negative examples, nor can we derive any implicit negatives, because of the
possibility of ambiguous and synonymous phrases.
In some ways the problem is related to clustering, which is also capable of learning
multiple, potentially non-disjoint categories. However, it is not clear how a clustering
system could be made to learn the phrase-meaning mappings needed for parsing. Finally,
current systems that learn multiple concepts commonly use examples for other concepts as
negative examples of the concept currently being learned. The implicit assumption made
by doing this is that concepts are disjoint, an unwarranted assumption in the presence of
synonymy.

4. The Wolfie Algorithm and an Example
In this section, we first discuss some issues we considered in the design of our algorithm,
then describe it fully in Section 4.2.
4.1 Solving the Lexicon Acquisition Problem
A first attempt to solve the Lexicon Acquisition Problem might be to examine all interpretation functions across the corpus, then choose the one(s) with minimal lexicon size. The
number of possible interpretation functions for a given input pair is dependent on both the
size of the sentence and its representation. In a sentence with w words, there are Θ(w2 )
possible phrases, not a particular challenge.
However, the number of possible interpretation functions grows extremely quickly with
the size of the input. For a sentence with p phrases and an associated tree with n vertices,
the number of possible interpretation functions is:
c!(n − 1)!

c
X
i=1

1
.
(i − 1)!(n − i)!(c − i)!

(1)

where c is min(p, n). The derivation of the above formula is as follows. We must choose
which phrases to use in the domain of f , and we can choose one phrase, or two, or any
number up to min(p, n) (if n < p we can only assign n phrases since f is one-to-one), or
p
i

!

=

p!
i!(p − i)!

where i is the number of phrases chosen. But we can also permute these phrases, so that
the “order” in which they are assigned to the vertices is different. There are i! such permutations. We must also choose which vertices to include in the range of the interpretation
function. We have to choose the root each time, so if we are choosing i vertices, we have
n − 1 choose i − 1 vertices left after choosing the root, or
n−1
i−1

!

=

(n − 1)!
.
(i − 1)!(n − i)!
11

Thompson & Mooney

The full number of possible interpretation functions is then:
min(p,n)

X
i=1

p!
(n − 1)!
× i! ×
,
i!(p − i)!
(i − 1)!(n − i)!

which simplifies to Equation 1. When n = p, the largest term of this equation is c! =
p!, which grows at least exponentially with p, so in general the number of interpretation
functions is too large to allow enumeration. Therefore, finding a lexicon by examining all
interpretations across the corpus, then choosing the lexicon(s) of minimum size, is clearly
not tractable.
Instead of finding all interpretations, one could find a set of candidate meanings for
each phrase, from which the final meaning(s) for that phrase could be chosen in a way that
minimizes lexicon size. One way to find candidate meanings is to fracture the meanings
of sentences in which a phrase appears. Siskind (1993) defined fracturing (he also calls
it the Unlink* operation) over terms such that the result includes all subterms of an
expression plus ⊥. In our representation formalism, this corresponds to finding all possible
connected subgraphs of a meaning, and adding the empty graph. Like the interpretation
function technique just discussed, fracturing would also lead to an exponential blowup in
the number of candidate meanings for a phrase: A lower bound on the number of connected
subgraphs for a full binary tree with n vertices is obtained by noting that any subset of
the (n + 1)/2 leaves may be deleted and still maintain connectivity of the remaining tree.
Thus, counting all of the ways that leaves can be deleted gives us a lower bound of 2(n+1)/2
fractures.6 This does not completely rule out fracturing as part of a technique for lexicon
learning since trees do not tend to get very large, and indeed Siskind uses it in many of his
systems, with other constraints to help control the search. However, we wish to avoid any
chance of exponential blowup to preserve the generality of our approach for other tasks.
Another option is to force Chill to essentially induce a lexicon on its own. In this
model, we would provide to Chill an ambiguous lexicon in which each phrase is paired
with every fracture of every sentence in which it appears. Chill would then have to decide
which set of fractures leads to the correct parse for each training sentence, and would only
include those in a final learned parser-lexicon combination. Thus the search would again
become exponential. Furthermore, even with small representations, it would likely lead
to a system with poor generalization ability. While some of Siskind’s work (e.g., Siskind,
1992) took syntactic constraints into account and did not encounter such difficulties, those
versions did not handle lexical ambiguity.
If we could efficiently find some good candidates, a standard induction algorithm could
then attempt to use them as a source of training examples for each phrase. However,
any attempt to use the list of candidate meanings of one phrase as negative examples for
another phrase would be flawed. The learner could not know in advance which phrases
are possibly synonymous, and thus which phrase lists to use as negative examples of other
phrase meanings. Also, many representation components would be present in the lists of
more than one phrase. This is a source of conflicting evidence for a learner, even without
the presence of synonymy. Since only positive examples are available, one might think of
using most specific conjunctive learning, or finding the intersection of all the representations
6. Thanks to net-citizen Dan Hirshberg for help with this analysis.

12

Acquiring Word-Meaning Mappings

For each phrase, p (of at most two words):
1.1) Collect the training examples in which p appears
1.2) Calculate LICS from (sampled) pairs of these examples’ representations
1.3) For each l in the LICS, add (p, l) to the set of candidate lexicon entries
Until the input representations are covered, or no candidate lexicon entries remain do:
2.1) Add the best (phrase, meaning) pair from the candidate entries to the lexicon
2.2) Update candidate meanings of phrases in the same sentences as the phrase just learned
Return the lexicon of learned (phrase, meaning) pairs.

Figure 6: Wolfie Algorithm Overview
for each phrase, as proposed by Anderson (1977). However, the meanings of an ambiguous
phrase are disjunctive, and this intersection would be empty. A similar difficulty would be
expected with the positive-only compression of Muggleton (1995).
4.2 Our Solution: Wolfie
The above analysis leads us to believe that the Lexicon Acquisition Problem is computationally intractable. Therefore, we can not perform an efficient search for the best lexicon.
Nor can we use a standard induction algorithm. Therefore, we have implemented Wolfie7 ,
outlined in Figure 6, which finds an approximate solution to the Lexicon Acquisition Problem. Our approach is to generate a set of candidate lexicon entries, from which the final
learned lexicon is derived by greedily choosing the “best” lexicon item at each point, in the
hopes of finding a final (minimal) covering lexicon. We do not actually learn interpretation
functions, so do not guarantee that we will find a covering lexicon.8 Even if we were to
search for interpretation functions, using a greedy search would also not guarantee covering
the input, and of course it also does not guarantee that a minimal lexicon is found. However,
we will later present experimental results demonstrating that our greedy approach performs
well.
Wolfie first derives an initial set of candidate meanings for each phrase. The algorithm
for generating candidates, LICS, attempts to find a “maximally common” meaning for each
phrase, which biases toward both finding a small lexicon by covering many vertices of a tree
at once, and finding a lexicon that actually does cover the input. Second, Wolfie chooses
final lexicon entries from this candidate set, one at a time, updating the candidate set as
it goes, taking into account our assumptions of single-use, connectedness, and exclusivity.
The basic scheme for choosing entries from the candidate set is to maximize the prediction
of meanings given phrases, but also to find general meanings. This adds a tension between
LICS, which cover many vertices, and generality, which biases towards fewer vertices. However, generality, like LICS, helps lead to a small lexicon since a general meaning will more
likely apply widely across a corpus.
7. The code is available upon request from the first author.
8. Though, of course, interpretation functions are not the only way to guarantee a covering lexicon – see
Siskind (1993) for an alternative.

13

Thompson & Mooney

answer/2

1

2

2

S

2

state/1

eq/2

1

1
S

2

C

cityid/2

loc/2
2
1
C

S

1
texarkana
Figure 7: Tree with Variables
Let us explain the algorithm in further detail by way of an example, using Spanish
instead of English to illustrate the difficulty somewhat more clearly. Consider the following
corpus:
1. ¿ Cuál es el capital del estado con la población más grande?
answer(C, (capital(S,C), largest(P, (state(S), population(S,P))))).
2. ¿ Cuál es la punta más alta del estado con la area más grande?
answer(P, (high point(S,P), largest(A, (state(S), area(S,A))))).
3. ¿ En que estado se encuentra Texarkana?
answer(S, (state(S), eq(C,cityid(texarkana, )), loc(C,S))).
4. ¿ Qué capital es la más grande?
answer(A, largest(A, capital(A))).
5. ¿ Qué es la area de los estados unitos?
answer(A, (area(C,A), eq(C,countryid(usa)))).
6. ¿ Cuál es la población de un estado que bordean a Utah?
answer(P, (population(S,P), state(S), next to(S,M), eq(M,stateid(utah)))).
7. ¿ Qué es la punta más alta del estado con la capital Madison?
answer(C, (high point(B,C), loc(C,B), state(B),
capital(B,A), eq(A,cityid(madison, )))).

The sentence representations here are slightly different than the tree representations given in
the problem definition, with the main difference being the addition of existentially quantified
variables shared between some leaves of a representation tree. As mentioned in Section 2.1,
the representations are Prolog queries to a database. Given such a query, we can create
a tree that conforms to our formalism, but with this addition of quantified variables. An
example is shown in Figure 7 for the representation of the third sentence. Each vertex is
a predicate name and its arity, in the Prolog style, e.g., state/1, with quantified variables
at some of the leaves. For each outgoing edge (n, m) of a vertex n, the edge is labeled with
the argument position filled by the subtree rooted by m. If there is not an edge labeled
with a given argument position, the argument is a free variable. Each vertex labeled with a
14

Acquiring Word-Meaning Mappings

variable (which can occur only at leaves) is an existentially quantified variable whose scope
is the entire tree (or query). The learned lexicon, however, does not need to maintain the
identity between variables across distinct lexical entries.
Another representation difference is that we will strip the answer predicate from the
input to our learner,9 thus allowing a forest of directed trees as input rather than a single
tree. The definition of the problem easily extends such that the root of each tree in the
forest must be in the domain of some interpretation function.
Evaluation of our system using this representation is given in Section 5.1; evaluation
using a representation without variables or forests is presented in Section 5.2. We previously
(Thompson, 1995) presented results demonstrating learning representations of a different
form, that of a case-role representation (Fillmore, 1968) augmented with Conceptual Dependency (Schank, 1975) information. This last representation conforms directly to our
problem definition.
Now, continuing with the example of solving the Lexicon Acquisition Problem for this
corpus, let us also assume for simplification, although not required, that sentences are
stripped of phrases that we know have empty meanings (e.g., “qué”, “es”, “con”, and “la”).
We will similarly assume that it is known that some phrases refer directly to given database
constants (e.g., location names), and remove those phrases and their meaning from the
training input.
4.2.1 Candidate Generation Phase
Initial candidate meanings for a phrase are produced by computing the maximally common
substructure(s) between sampled pairs of representations of sentences that contain it. We
derive common substructure by computing the Largest Isomorphic Connected Subgraphs
(LICS) of two labeled trees, taking labels into account in the isomorphism. The analogous
Largest Common Subgraph problem (Garey & Johnson, 1979) is solvable in polynomial
time if, as we assume, both inputs are trees and if K, the number of edges to include, is
given. Thus, we start with K set equal to the largest number of edges in the two trees being
compared, test for common subgraph(s), and iterate down to K = 1, stopping when one or
more subgraphs are found for a given K.
For the Prolog query representation, the algorithm is complicated a bit by variables.
Therefore, we use LICS with an addition similar to computing the Least General Generalization of first-order clauses (Plotkin, 1970). The LGG of two sets of literals is the least
general set of literals that subsumes both sets of literals. We add to this by allowing that
when a term in the argument of a literal is a conjunction, the algorithm tries all orderings
in its matching of the terms in the conjunction. Overall, our algorithm for finding the LICS
between two trees in the Prolog representation first finds the common labeled edges and
vertices as usual in LICS, but treats all variables as equivalent. Then, it computes the
Least General Generalization, with conjunction taken into account, of the resulting trees as
converted back into literals. For example, given the two trees:

9. The predicate is omitted because Chill initializes the parse stack with the answer predicate, and thus
no word has to be mapped to it.

15

Thompson & Mooney

Phrase
“capital”:

“grande”:
“estado”:

“punta mas”:
“encuentra”:

LICS
largest( , )
capital( , )
state( )
largest( ,state( ))
largest( , )
largest( ,state( ))
state( )
(population(S, ), state(S))
capital( , )
high point( , )
(state(S), loc( ,S))
high point( , )
state( )
(state(S), loc( ,S))

From Sentences
1,4
1,7
1,7
1,2
1,4; 2,4
1,2
1,3; 1,7; 2,3; 2,6; 2,7; 3,6; 6,7
1,6
1,7
2,7
3,7
2,7
2,7
3

Table 1: Sample Candidate Lexical Entries and their Derivation
answer(C, (largest(P, (state(S), population(S,P))), capital(S,C))).
answer(P, (high point(S,P), largest(A, (state(S), area(S,A))))).,
the common meaning is answer( ,largest( ,state( )). Note that the LICS of two trees
may not be unique: there may be multiple common subtrees that both contain the same
number of edges; in this case LICS returns multiple answers.
The sets of initial candidate meanings for some of the phrases in the sample corpus are
shown in Table 1. While in this example we show the LICS for all pairs that a phrase
appears in, in the actual algorithm we randomly sample a subset for efficiency reasons,
as in Golem (Muggleton & Feng, 1990). For phrases appearing in only one sentence
(e.g., “encuentra”), the entire sentence representation (excluding the database constant
given as background knowledge) is used as an initial candidate meaning. Such candidates
are typically generalized in step 2.2 of the algorithm to only the correct portion of the
representation before they are added to the lexicon; we will see an example of this below.
4.2.2 Adding to the Final Lexicon
After deriving initial candidates, the greedy search begins. The heuristic used to evaluate
candidates attempts to help assure that a small but covering lexicon is learned. The heuristic
first looks at the weighted sum of two components, where p is the phrase and m its candidate
meaning:
1. P (m | p) × P (p | m) × P (m) = P (p) × P (m | p)2
2. The generality of m
Then, ties in this value are broken by preferring less ambiguous (those with fewer current
meanings) and shorter phrases. The first component is analogous the cluster evaluation
16

Acquiring Word-Meaning Mappings

heuristic used by Cobweb (Fisher, 1987), which measures the utility of clusters based on
attribute-value pairs and categories, instead of meanings and phrases. The probabilities
are estimated from the training data and then updated as learning progresses to account
for phrases and meanings already covered. We will see how this updating works as we
continue through our example of the algorithm. The goal of this part of the heuristic
is to maximize the probability of predicting the correct meaning for a randomly sampled
phrase. The equality holds by Bayes Theorem. Looking at the right side, P (m | p)2 is
the expected probability that meaning m is correctly guessed for a given phrase, p. This
assumes a strategy of probability matching, in which a meaning m is chosen for p with
probability P (m | p) and correct with the same probability. The other term, P (p), biases
the component by how common the phrase is. Interpreting the left side of the equation, the
first term biases towards lexicons with low ambiguity, the second towards low synonymy,
and the third towards frequent meanings.
The second component of the heuristic, generality, is computed as the negation of
the number of vertices in the meaning’s tree structure, and helps prefer smaller, more
general meanings. For example, in the candidate set above, if all else were equal, the
generality portion of the heuristic would prefer state( ), with generality value -1, over
largest( ,state( )) and (state(S),loc( ,S)), each with generality value -2, as the
meaning of “estado”. Learning a meaning with fewer terms helps evenly distribute the
vertices in a sentence’s representation among the meanings of the phrases in that sentence,
and thus leads to a lexicon that is more likely to be correct. To see this, we note that some
pairs of words tend to frequently co-occur (“grande” and “estado” in our example), and
so their joint representation (meaning) is likely to be in the set of candidate meanings for
both words. By preferring a more general meaning, we easily ignore these incorrect joint
meanings.
In this example and all experiments, we use a weight of 10 for the first component of
the heuristic, and a weight of 1 for the second. The first component has smaller absolute
values and is therefore given a higher weight. Modulo this consideration, results are not
overly-sensitive to the weights and automatically setting them using cross-validation on the
training set (Kohavi & John, 1995) had little effect on overall performance. In Table 2 we
illustrate the calculation of the heuristic measure for some of the above fourteen pairs, and
its value for all. The calculation shows the sum of multiplying 10 by the first component of
the heuristic and multiplying 1 by the second component. The first component is simplified
as follows:
| p | | m ∩ p |2
| m ∩ p |2
P (p) × P (m | p)2 =
≈
×
,
t
| p |2
|p|
where | p | is the number of times phrase p appears in the corpus, t is the initial number
of candidate phrases, and | m ∩ p | is the number of times that meaning m is paired with
phrase p. We can ignore t since the number of phrases in the corpus is the same for each
pair, and has no effect on the ranking. The highest scoring pair is (“estado”, state( )), so
it is added to the lexicon.
Next is the candidate generalization step (2.2), described algorithmically in Figure 8.
One of the key ideas of the algorithm is that each phrase-meaning choice can constrain the
candidate meanings of phrases yet to be learned. Given the assumption that each portion of
the representation is due to at most one phrase in the sentence (exclusivity), once part of a
17

Thompson & Mooney

Candidate Lexicon Entry
(“capital”, largest( , )):
(“capital”, capital( , )):
(“capital”, state( , )):
(“grande”, largest( ,state( ))):
(“grande”, largest( , )):
(“estado”, largest( ,state( ))):
(“estado”, state( )):
(“estado”, (population(S, ), state(S)):
(“estado”, capital( , )):
(“estado”, high point( , )):
(“estado”, (state(S), loc( ,S))):
(“punta mas”, high point( , )):
(“punta mas”, state( )):
(“encuentra”, (state(S), loc( ,S))):

Heuristic Value
10(22 /3) + 1(−1) = 12.33
12.33
12.33
10(22 /3) + 1(−2) = 11.3
29
10(22 /5) + 1(−2) = 6
10(52 /5) + 1(−1) = 49
6
7
7
6
19
10(22 /2) + 1(−1) = 19
10(12 /1) + 1(−2) = 8

Table 2: Heuristic Value of Sample Candidate Lexical Entries

Given: A learned phrase-meaning pair (l, g)
For all sentence-representation pairs containing l and g, mark them as covered.
For each candidate phrase-meaning pair (p, m):
If p occurs in some training pairs with (l, g) then
If the vertices of m intersect the vertices of g then
If all occurrences of m are now covered then
Remove (p, m) from the set of candidate pairs.
Else
Adjust the heuristic value of (p, m) as needed to account
for newly covered nodes of the training representations.
Generalize m to remove covered nodes, obtaining m0 , and
Calculate the heuristic value of the new candidate pair (p, m0 ).
If no candidate meanings remain for an uncovered phrase then
Derive new LICS from uncovered representations and
calculate their heuristic values.

Figure 8: The Candidate Generalization Phase

18

Acquiring Word-Meaning Mappings

representation is covered, no other phrase in the sentence can be paired with that meaning
(at least for that sentence). Therefore, in step 2.2 the candidate meanings for words in
the same sentences as the word just learned are generalized to exclude the representation
just learned. We use an operation analogous to set difference when finding the remaining
uncovered vertices of the representation when generalizing meanings to eliminate covered
vertices from candidate pairs. For example, if the meaning largest( , ) were learned
for a phrase in sentence 2, the meaning left behind would be a forest consisting of the
trees high point(S, ) and (state(S), area(S, )). Also, if the generalization results
in an empty tree, new LICS are calculated. In our example, since state( ) is covered
in sentences 1, 2, 3, 6, and 7, the candidates for several other words in those sentences
are generalized. For example, the meaning (state(S), loc( ,S)) for “encuentra”, is
generalized to loc( , ), with a new heuristic value of 10(12 /1) + 1(−1) = 9. Also, our
single-use assumption allows us to remove all candidate pairs containing “estado” from the
set of candidate meanings, since the learned pair covers all occurrences of “estado” in that
set.
Note that the pairwise matchings to generate candidate items, together with this updating of the candidate set, enable multiple meanings to be learned for ambiguous phrases,
and makes the algorithm less sensitive to the initial rate of sampling for LICS. For example,
note that “capital” is ambiguous in this data set, though its ambiguity is an artifact of
the way that the query language was designed, and one does not ordinarily think of it as
an ambiguous word. However, both meanings will be learned: The second pair added to
the final lexicon is (“grande”, largest( , )), which causes a generalization to the empty
meaning for the first candidate entry in Table 2, and since no new LICS from sentence 4
can be generated, its entire remaining meaning is added to the candidate meaning set for
both “capital” and “más.”
Subsequently, the greedy search continues until the resulting lexicon covers the training
corpus, or until no candidate phrase meanings remain. In rare cases, learning errors occur
that leave some portions of representations uncovered. In our example, the following lexicon
is learned:
(“estado”, state( )),
(“grande”, largest( )),
(“area”, area( )),
(“punta”, high point( , )),
(“población”, population( , )),
(“capital”, capital( , )),
(“encuentra”, loc( , )),
(“alta”, loc( , )),
(“bordean”, next to( )),
(“capital”, capital( )).
In the next section, we discuss the ability of Wolfie to learn lexicons that are useful for
parsers and parser acquisition.

19

Thompson & Mooney

5. Evaluation of Wolfie
The following two sections discuss experiments testing Wolfie’s success in learning lexicons
for both real and artificial corpora, comparing it in several cases to a previously developed
lexicon learning system.
5.1 A Database Query Application
This section describes our experimental results on a database query application. The first
corpus discussed contains 250 questions about U.S. geography, paired with their Prolog
query to extract the answer to the question from a database. This domain was originally
chosen due to the availability of a hand-built natural language interface, Geobase, to
a database containing about 800 facts. Geobase was supplied with Turbo Prolog 2.0
(Borland International, 1988), and designed specifically for this domain. The questions in
the corpus were collected by asking undergraduate students to generate English questions for
this database, though they were given only cursory knowledge of the database without being
given a chance to use it. To broaden the test, we had the same 250 sentences translated into
Spanish, Turkish, and Japanese. The Japanese translations are in word-segmented Roman
orthography. Translated questions were paired with the appropriate logical queries from
the English corpus.
To evaluate the learned lexicons, we measured their utility as background knowledge
for Chill. This is performed by choosing a random set of 25 test examples and then
learning lexicons and parsers from increasingly larger subsets of the remaining 225 examples
(increasing by 50 examples each time). After training, the test examples are parsed using
the learned parser. We then submit the resulting queries to the database, compare the
answers to those generated by submitting the correct representation to the database, and
record the percentage of correct (matching) answers. By using the difficult “gold standard”
of retrieving a correct answer, we avoid measures of partial accuracy that we believe do not
adequately measure final utility. We repeated this process for ten different random training
and test sets and evaluated performance differences using a two-tailed, paired t-test with a
significance level of p ≤ 0.05.
We compared our system to an incremental (on-line) lexicon learner developed by Siskind
(1996). To make a more equitable comparison to our batch algorithm, we ran his in a “simulated” batch mode, by repeatedly presenting the corpus 500 times, analogous to running
500 epochs to train a neural network. While this does not actually add new kinds of data
over which to learn, it allows his algorithm to perform inter-sentential inference in both directions over the corpus instead of just one. Our point here is to compare accuracy over the
same size training corpus, a metric not optimized for by Siskind. We are not worried about
the difference in execution time here,10 and the lexicons learned when running Siskind’s
system in incremental mode (presenting the corpus a single time) resulted in substantially
lower performance in preliminary experiments with this data. We also removed Wolfie’s
ability to learn phrases of more than one word, since the current version of Siskind’s system
10. The CPU times of the two system are not directly comparable since one is written in Prolog and the
other in Lisp. However, the learning time of the two systems is approximately the same if Siskind’s
system is run in incremental mode, just a few seconds with 225 training examples.

20

Acquiring Word-Meaning Mappings

90

80

70

Accuracy

60

50

40

30

CHILL+handbuilt
CHILL-testlex
CHILL+Wolfie
CHILL+Siskind
Geobase

20

10

0
0

50

100
150
Training Examples

200

250

Figure 9: Accuracy on English Geography Corpus
does not have this ability. Finally, we made comparisons to the parsers learned by Chill
when using a hand-coded lexicon as background knowledge.
In this and similar applications, there are many terms, such as state and city names,
whose meanings can be automatically extracted from the database. Therefore, all tests
below were run with such names given to the learner as an initial lexicon; this is helpful
but not required. Section 5.2 gives results for a different task with no such initial lexicon.
However, unless otherwise noted, for all tests within this Section (5.1) we did not strip
sentences of phrases known to have empty meanings, unlike in the example of Section 4.
5.1.1 Comparisons using English
The first experiment was a comparison on the original English corpus. Figure 9 shows
learning curves for Chill when using the lexicons learned by Wolfie (CHILL+Wolfie) and
by Siskind’s system (CHILL+Siskind). The uppermost curve (CHILL+handbuilt) shows
Chill’s performance when given the hand-built lexicon. CHILL-testlex shows the performance when words that never appear in the training data (e.g., are only in the test sentences)
are deleted from the hand-built lexicon (since a learning algorithm has no chance of learning
these). Finally, the horizontal line shows the performance of the Geobase benchmark.
The results show that a lexicon learned by Wolfie led to parsers that were almost as
accurate as those generated using a hand-built lexicon. The best accuracy is achieved by
parsers using the hand-built lexicon, followed by the hand-built lexicon with words only in
the test set removed, followed by Wolfie, followed by Siskind’s system. All the systems
do as well or better than Geobase by the time they reach 125 training examples. The
differences between Wolfie and Siskind’s system are statistically significant at all training
21

Thompson & Mooney

Lexicon
hand-built
Wolfie
Siskind

Coverage
100%
100%
94.4%

Ambiguity
1.2
1.1
1.7

Entries
88
56.5
154.8

Table 3: Lexicon Comparison
example sizes. These results show that Wolfie can learn lexicons that support the learning
of successful parsers, and that are better from this perspective than those learned by a
competing system. Also, comparing to the CHILL-testlex curve, we see that most of the
drop in accuracy from a hand-built lexicon is due to words in the test set that the system
has not seen during training. In fact, none of the differences between CHILL+Wolfie and
CHILL-testlex are statistically significant.
One of the implicit hypotheses of our problem definition is that coverage of the training
data implies a good lexicon. The results show a coverage of 100% of the 225 training examples for Wolfie versus 94.4% for Siskind. In addition, the lexicons learned by Siskind’s
system were more ambiguous and larger than those learned by Wolfie. Wolfie’s lexicons had an average of 1.1 meanings per word, and an average size of 56.5 entries (after
225 training examples) versus 1.7 meanings per word and 154.8 entries in Siskind’s lexicons. For comparison, the hand-built lexicon had 1.2 meanings per word and 88 entries.
These differences, summarized in Table 3, undoubtedly contribute to the final performance
differences.
5.1.2 Performance for Other Natural Languages
Next, we examined the performance of the two systems on the Spanish version of the corpus.
Figure 10 shows the results. The differences between using Wolfie and Siskind’s learned
lexicons for Chill are again statistically significant at all training set sizes. We also again
show the performance with hand-built lexicons, both with and without phrases present only
in the testing set. The performance compared to the hand-built lexicon with test-set phrases
removed is still competitive, with the difference being significant only at 225 examples.
Figure 11 shows the accuracy of learned parsers with Wolfie’s learned lexicons for
all four languages. The performance differences among the four languages are quite small,
demonstrating that our methods are not language dependent.
5.1.3 A Larger Corpus
Next, we present results on a larger, more diverse corpus from the geography domain,
where the additional sentences were collected from computer science undergraduates in
an introductory AI course. The set of questions in the smaller corpus was collected from
students in a German class, with no special instructions on the complexity of queries desired.
The AI students tended to ask more complex and diverse queries: their task was to give five
interesting questions and the associated logical form for a homework assignment, though
again they did not have direct access to the database. They were requested to give at least
one sentence whose representation included a predicate containing embedded predicates, for

22

Acquiring Word-Meaning Mappings

100
90
80
70

Accuracy

60
50
40
30

Span-CHILL+handbuilt
Span-CHILL-testlex
Span-CHILL+Wolfie
Span-CHILL+Siskind

20
10
0
0

50

100
150
Training Examples

200

250

200

250

Figure 10: Accuracy on Spanish

100
90
80
70

Accuracy

60
50
40
30

English
Spanish
Japanese
Turkish

20
10
0
0

50

100
150
Training Examples

Figure 11: Accuracy on All Four Languages

23

Thompson & Mooney

100
90
80
70

Accuracy

60
50
40
30

CHILL
WOLFIE
Geobase

20
10
0
0

50

100

150

200
250
Training Examples

300

350

400

450

Figure 12: Accuracy on the Larger Geography Corpus
example largest(S, state(S)), and we asked for variety in their sentences. There were
221 new sentences, for a total of 471 (including the original 250 sentences).
For these experiments, we split the data into 425 training sentences and 46 test sentences, for 10 random splits, then trained Wolfie and then Chill as before. Our goal was
to see whether Wolfie was still effective for this more difficult corpus, since there were
approximately 40 novel words in the new sentences. Therefore, we tested against the performance of Chill with an extended hand-built lexicon. For this test, we stripped sentences
of phrases known to have empty meanings, as in the example of Section 4.2. Again, we
did not use phrases of more than one word, since these do not seem to make a significant
difference in this domain. For these results, we compare Wolfie’s lexicons for Chill using
hand-built lexicons without phrases that only appear in the test set.
Figure 12 shows the resulting learning curves. The differences between Chill using
the hand-built and learned lexicons are statistically significant at 175, 225, 325, and 425
examples (four out of the nine data points). The more mixed results here indicate both the
difficulty of the domain and the more variable vocabulary. However, the improvement of
machine learning methods over the Geobase hand-built interface is much more dramatic
for this corpus.
5.1.4 LICS versus Fracturing
One component of the algorithm not yet evaluated explicitly is the candidate generation
method. As mentioned in Section 4.1, we could use fractures of representations of sentences
in which a phrase appears to generate the candidate meanings for that phrase, instead
of LICS. We used this approach and compared it to the previously described method of
using the largest isomorphic connected subgraphs of sampled pairs of representations as

24

Acquiring Word-Meaning Mappings

100
90
80
70

Accuracy

60
50
40
30

fractWOLFIE
WOLFIE

20
10
0
0

50

100
150
Training Examples

200

250

Figure 13: Fracturing vs. LICS: Accuracy
candidate meanings. To attempt a more fair comparison, we also sampled representations
for fracturing, using the same number of source representations as the number of pairs
sampled for LICS.
The accuracy of Chill when using the resulting learned lexicons as background knowledge are shown in Figure 13. Using fracturing (fractWOLFIE) shows little or no advantage;
none of the differences between the two systems are statistically significant.
In addition, the number of initial candidate lexicon entries from which to choose is
much larger for fracturing than our LICS method, as shown in Figure 14. This is true even
though we sampled the same number of representations as pairs for LICS, because there
are a larger number of fractures for an arbitrary representation than the number of LICS
for an arbitrary pair. Finally, Wolfie’s learning time when using fracturing is greater than
that when using LICS, as shown in Figure 15, where the CPU time is shown in seconds.
In summary, these differences show the utility of LICS as a method for generating
candidates: a more thorough method does not result in better performance, and also results
in longer learning times. One could claim that we are handicapping fracturing since we are
only sampling representations for fracturing. This may indeed help the accuracy, but the
learning time and the number of candidates would likely suffer even further. In a domain
with larger representations, the differences in learning time would be even more dramatic.
5.2 Artificial Data
The previous section showed that Wolfie successfully learns lexicons for a natural corpus
and a realistic task. However, this demonstrates success on only a relatively small corpus
and with one representation formalism. We now show that our algorithm scales up well
with more lexicon items to learn, more ambiguity, and more synonymy. These factors are

25

Thompson & Mooney

600

Number of Candidates

500

400

300

fractWOLFIE
WOLFIE

200

100

0
0

50

100
150
Training Examples

200

250

Figure 14: Fracturing vs. LICS: Number of Candidates

4

3.5

Learning Time (sec)

3

2.5

2

1.5

1

0.5

fractWOLFIE
WOLFIE

0
0

50

100
150
Training Examples

200

Figure 15: Fracturing vs. LICS: Learning Time

26

250

Acquiring Word-Meaning Mappings

difficult to control when using real data as input. Also, there are no large corpora available
that are annotated with semantic parses. We therefore present experimental results on an
artificial corpus. In this corpus, both the sentences and their representations are completely
artificial, and the sentence representation is a variable-free representation, as suggested by
the work of Jackendoff (1990) and others.
For each corpus discussed below, a random lexicon mapping words to simulated meanings
was first constructed.11 This original lexicon was then used to generate a corpus of random
utterances each paired with a meaning representation. After using this corpus as input to
Wolfie12 , the learned lexicon was compared to the original lexicon, and weighted precision
and weighted recall of the learned lexicon were measured. Precision measures the percentage
of the lexicon entries (i.e., word-meaning pairs) that the system learns that are correct.
Recall measures the percentage of the lexicon entries in the hand-built lexicon that are
correctly learned by the system:
precision =
recall =

# correct pairs
# pairs learned

# correct pairs
.
# pairs in hand-built lexicon

To get weighted precision and recall measures, we then weight the results for each pair
by the word’s frequency in the entire corpus (not just the training corpus). This models
how likely we are to have learned the correct meaning for an arbitrarily chosen word in the
corpus.
We generated several lexicons and associated corpora, varying the ambiguity rate (number of meanings per word) and synonymy rate (number of words per meaning), as in Siskind
(1996). Meaning representations were generated using a set of “conceptual symbols” that
combined to form the meaning for each word. The number of conceptual symbols used in
each lexicon will be noted when we describe each corpus below. In each lexicon, 47.5%
of the senses were variable-free to simulate noun-like meanings, and 47.5% contained from
one to three variables to denote open argument positions to simulate verb-like meanings.
The remainder of the words (the remaining 5%) had the empty meaning to simulate function words. In addition, the functors in each meaning could have a depth of up to two
and an arity of up to two. An example noun-like meaning is f23(f2(f14)), and a verbmeaning f10(A,f15(B)); the conceptual symbols in this example are f23, f2, f14, f10,
and f15. By using these multi-level meaning representations we demonstrate the learning
of more complex representations than those in the geography database domain: none of the
hand-built meanings for phrases in that lexicon had functors embedded in arguments. We
used a grammar to generate utterances and their meanings from each original lexicon, with
terminal categories selected using a distribution based on Zipf’s Law (Zipf, 1949). Under
Zipf’s Law, the occurrence frequency of a word is inversely proportional to its ranking by
occurrence.
We started with a baseline corpus generated from a lexicon of 100 words using 25 conceptual symbols and no ambiguity or synonymy; 1949 sentence-meaning pairs were generated.
11. Thanks to Jeff Siskind for the initial corpus generation software, which we enhanced for these tests.
12. In these tests, we allowed Wolfie to learn phrases of up to length two.

27

Thompson & Mooney

100
90
80
70

Accuracy

60
50
40
30

Precision
Recall

20
10
0
0

200

400

600

800
1000
Training Examples

1200

1400

1600

1800

Figure 16: Baseline Artificial Corpus
We split this into five training sets of 1700 sentences each. Figure 16 shows the weighted
precision and recall curves for this initial test. This demonstrates good scalability to a
slightly larger corpus and lexicon than that of the U.S. geography query domain.
A second corpus was generated from a second lexicon, also of 100 words using 25 conceptual symbols, but increasing the ambiguity to 1.25 meanings per word. This time, 1937 pairs
were generated and the corpus split into five sets of 1700 training examples each. Weighted
precision at 1650 examples drops to 65.4% from the previous level of 99.3%, and weighted
recall to 58.9% from 99.3%. The full learning curve is shown in Figure 17. A quick comparison to Siskind’s performance on this corpus confirmed that his system achieved comparable
performance, showing that with current methods, this is close to the best performance that
we are able to obtain on this more difficult corpus. One possible explanation for the smaller
performance difference between the two systems on this corpus versus the geography domain is that in this domain, the correct meaning for a word is not necessarily the most
“general,” in terms of number of vertices, of all its candidate meanings. Therefore, the
generality portion of the heuristic may negatively influence the performance of Wolfie in
this domain.
Finally, we show the change in performance with increasing ambiguity and increasing
synonymy, holding the number of words and conceptual symbols constant. Figure 18 shows
the weighted precision and recall with 1050 training examples for increasing levels of ambiguity, holding the synonymy level constant. Figure 19 shows the results at increasing
levels of synonymy, holding ambiguity constant. Increasing the level of synonymy does not
effect the results as much as increasing the level of ambiguity, which is as we expected.
Holding the corpus size constant but increasing the number of competing meanings for a
word increases the number of candidate meanings created by Wolfie while decreasing the
amount of evidence available for each meaning (e.g., the first component of the heuristic
28

Acquiring Word-Meaning Mappings

70

60

Accuracy

50

40

30

Precision
Recall

20

10

0
0

200

400

600

800
1000
Training Examples

1200

1400

1600

1800

Figure 17: A More Ambiguous Artificial Corpus
100

95

90

Recall
Precision

Accuracy

85

80

75

70

65

60
1

1.25

1.5
Number of Meanings per Word

1.75

2

Figure 18: Increasing the Level of Ambiguity
measure) and makes the learning task more difficult. On the other hand, increasing the
level of synonymy does not have the potential to mislead the learner.
The number of training examples required to reach a certain level of accuracy is also
informative. In Table 4, we show the point at which a standard precision of 75% was first

29

Thompson & Mooney

100

Accuracy

95

90

Recall
Precision

85

80
1

1.25

1.5
Number of Words per Meaning

1.75

2

Figure 19: Increasing the Level of Synonymy
Ambiguity Level
1.0
1.25
2.0

Number of Examples
150
450
1450

Table 4: Number of Examples to Reach 75% Precision
reached for each level of ambiguity. Note, however, that we only measured accuracy after
each set of 100 training examples, so the numbers in the table are approximate.
We performed a second test of scalability on two corpora generated from lexicons an
order of magnitude larger than those in the above tests. In these tests, we use a lexicon
containing 1000 words and using 250 conceptual symbols. We generated both a corpus with
no ambiguity, and one from a lexicon with ambiguity and synonymy similar to that found
in the WordNet database (Beckwith, Fellbaum, Gross, & Miller, 1991); the ambiguity there
is approximately 1.68 meanings per word and the synonymy 1.3 words per meaning. These
corpora contained 9904 (no ambiguity) and 9948 examples, respectively, and we split the
data into five sets of 9000 training examples each. For the easier large corpus, the maximum
average of weighted precision and recall was 85.6%, at 8100 training examples, while for the
harder corpus, the maximum average was 63.1% at 8600 training examples.

6. Active Learning
As indicated in the previous sections, we have built an integrated system for language
acquisition that is flexible and useful. However, a major difficulty remains: the construction
of training corpora. Though annotating sentences is still arguably less work than building
30

Acquiring Word-Meaning Mappings

Apply the learner to n bootstrap examples, creating a classifier.
Until no examples remain or the annotator is unwilling to label more examples, do:
Use most recently learned classifier to annotate each unlabeled instance.
Find the k instances with the lowest annotation certainty.
Annotate these instances.
Train the learner on the bootstrap examples and all examples annotated so far.

Figure 20: Selective Sampling Algorithm
an entire system by hand, the annotation task is also time-consuming and error-prone.
Further, the training pairs often contain redundant information. We would like to minimize
the amount of annotation required while still maintaining good generalization accuracy.
To do this, we turned to methods in active learning. Active learning is a research area
in machine learning that features systems that automatically select the most informative
examples for annotation and training (Angluin, 1988; Seung, Opper, & Sompolinsky, 1992),
rather than relying on a benevolent teacher or random sampling. The primary goal of
active learning is to reduce the number of examples that the system is trained on, while
maintaining the accuracy of the acquired information. Active learning systems may construct their own examples, request certain types of examples, or determine which of a set
of unsupervised examples are most usefully labeled. The last approach, selective sampling
(Cohn et al., 1994), is particularly attractive in natural language learning, since there is an
abundance of text, and we would like to annotate only the most informative sentences. For
many language learning tasks, annotation is particularly time-consuming since it requires
specifying a complex output rather than just a category label, so reducing the number of
training examples required can greatly increase the utility of learning.
In this section, we explore the use of active learning, specifically selective sampling, for
lexicon acquisition, and demonstrate that with active learning, fewer examples are required
to achieve the same accuracy obtained by training on randomly chosen examples.
The basic algorithm for selective sampling is relatively simple. Learning begins with a
small pool of annotated examples and a large pool of unannotated examples, and the learner
attempts to choose the most informative additional examples for annotation. Existing work
in the area has emphasized two approaches, certainty-based methods (Lewis & Catlett,
1994), and committee-based methods (McCallum & Nigam, 1998; Freund, Seung, Shamir,
& Tishby, 1997; Liere & Tadepalli, 1997; Dagan & Engelson, 1995; Cohn et al., 1994); we
focus here on the former.
In the certainty-based paradigm, a system is trained on a small number of annotated
examples to learn an initial classifier. Next, the system examines unannotated examples,
and attaches certainties to the predicted annotation of those examples. The k examples with
the lowest certainties are then presented to the user for annotation and retraining. Many
methods for attaching certainties have been used, but they typically attempt to estimate
the probability that a classifier consistent with the prior training data will classify a new
example correctly.

31

Thompson & Mooney

Learn a lexicon with the examples annotated so far
1) For each phrase in an unannotated sentence:
If it has entries in the learned lexicon then
its certainty is the average of the heuristic values of those entries
Else, if it is a one-word phrase then
its certainty is zero
2) To rank sentences use:
Total certainty of phrases from step 1
# of phrases counted in step 1

Figure 21: Active Learning for Wolfie
Figure 20 presents abstract pseudocode for certainty-based selective sampling. In an
ideal situation, the batch size, k, would be set to one to make the most intelligent decisions
in future choices, but for efficiency reasons in retraining batch learning algorithms, it is
frequently set higher. Results on a number of classification tasks have demonstrated that
this general approach is effective in reducing the need for labeled examples (see citations
above).
Applying certainty-based sample selection to Wolfie requires determining the certainty
of a complete annotation of a potential new training example, despite the fact that individual
learned lexical entries and parsing operators perform only part of the overall annotation task.
Therefore, our general approach is to compute certainties for pieces of an example, in our
case, phrases, and combine these to obtain an overall certainty for an example. Since lexicon
entries contain no explicit uncertainty parameters, we used Wolfie’s heuristic measure to
estimate uncertainty.
To choose the sentences to be annotated in each round, we first bootstrapped an initial
lexicon from a small corpus, keeping track of the heuristic values of the learned items.
Then, for each unannotated sentence, we took an average of the heuristic values of the
lexicon entries learned for phrases in that sentence, giving a value of zero to unknown
words but eliminating from consideration any words that we assume are known in advance,
such as database constants. Thus, longer sentences with only a few known phrases would
have a lower certainty than shorter sentences with the same number of known phrases; this
is desirable since longer sentences will be more informative from a lexicon learning point
of view. The sentences with the lowest values were chosen for annotation, added to the
bootstrap corpus, and a new lexicon learned. Our technique is summarized in Figure 21.
To evaluate our technique, we compared active learning to learning from randomly selected examples, again measuring the effectiveness of learned lexicons as background knowledge for Chill. We again used the (smaller) U.S. Geography corpus, as in the original
Wolfie tests, using the lexicons as background knowledge during parser acquisition (and
using the same examples for parser acquisition).
For each trial in the following experiments, we first randomly divide the data into a
training and test set. Then, n = 25 bootstrap examples are randomly selected from the

32

Acquiring Word-Meaning Mappings

100

80

Accuracy

60

40
WOLF+active
WOLFIE
Geobase
20

0
0

50

100
150
Training Examples

200

250

Figure 22: Using Lexicon Certainty for Active Learning
training examples and in each step of active learning, the least certain k = 10 examples
of the remaining training examples are selected and added to the training set. The result
of learning on this set is evaluated after each step. The accuracy of the resulting learned
parsers was compared to the accuracy of those learned using randomly chosen examples to
learn lexicons and parsers, as in Section 5; in other words, we can think of the k examples
in each round as being chosen randomly.
Figure 22 shows the accuracy on unseen data of parsers learned using the lexicons learned
by Wolfie when examples are chosen randomly and actively. There is an annotation
savings of around 50 examples by using active learning: the maximum accuracy is reached
after 175 examples, versus 225 with random examples. The advantage of using active
learning is clear from the beginning, though the differences between the two curves are only
statistically significant at 175 training examples. Since we are learning both lexicons and
parsers, but only choosing examples based on Wolfie’s certainty measures, the boost could
be improved even further if Chill had a say in the examples chosen. See Thompson, Califf,
and Mooney (1999) for a description of active learning for Chill.

7. Related Work
In this section, we divide the previous research on related topics into the areas of lexicon
acquisition and active learning.
7.1 Lexicon Acquisition
Work on automated lexicon and language acquisition dates back to Siklossy (1972), who
demonstrated a system that learned transformation patterns from logic back to natural

33

Thompson & Mooney

language. As already noted, the most closely related work is that of Jeff Siskind, which we
described briefly in Section 2 and whose system we ran comparisons to in Section 5. Our
definition of the learning problem can be compared to his “mapping problem” (Siskind,
1993). That formulation differs from ours in several respects. First, his sentence representations are terms instead of trees. However, as shown in Figure 7, terms can also be
represented as trees that conform to our formalism with some minor additions. Next, his
notion of interpretation does involve a type of tree, but carries the entire representation of
a sentence up to the root. Also, it is not clear how he would handle quantified variables
in the representation of sentences. Skolemization is possible, but then generalization across
sentences would require special handling. We make the single-use assumption and he does
not. Another difference is our bias towards a minimal number of lexicon entries, while he
attempts to find a monosemous lexicon. His later work (Siskind, 2000) relaxes this to allow
ambiguity and noise, but still biases towards minimizing ambiguity. However, his formal
definition does not explicitly allow lexical ambiguity, but handles it in a heuristic manner.
This, though, may lead to more robustness than our method in the face of noise. Finally,
our definition allows phrasal lexicon entries.
Siskind’s work on this topic has explored many different variations along a continuum of
using many constraints but requiring more time to incorporate each new example (Siskind,
1993), versus few constraints but requiring more training data (Siskind, 1996). Thus, perhaps his earlier systems would have been able to learn the lexicons of Section 5 more
quickly; but crucially those systems did not allow lexical ambiguity, and thus also may
not have learned as accurate a lexicon. More detailed comparisons to such versions of the
system are outside the scope of this paper. Our goal with Wolfie is to learn a possibly
ambiguous lexicon from as few examples as possible, and we thus made comparisons along
this dimension alone.
Siskind’s approach, like ours, takes into account constraints between word meanings
that are justified by the exclusivity and compositionality assumptions. His approach is
somewhat more general in that it handles noise and referential uncertainty (uncertainty
about the meaning of a sentence and thus multiple possible candidates), while ours is
specialized for applications where the meaning (or meanings) is known. The experimental
results in Section 5 demonstrate the advantage of our method for such an application. He has
demonstrated his system to be capable of learning reasonably accurate lexicons from large,
ambiguous, and noisy artificial corpora, but this accuracy is only assured if the learning
algorithm converges, which did not occur for our smaller corpus in the experiments we ran.
Also, as already noted, his system operates in an incremental or on-line fashion, discarding
each sentence as it processes it, while ours is batch. In addition, his search for word meanings
proceeds in two stages, as discussed in Section 2.2. By using common substructures, we
combine these two stages in Wolfie. Both systems do have greedy aspects, ours in the
choice of the next best lexical entry, his in the choice to discard utterances as noise or create
a homonymous lexical entry. Finally, his system does not compute statistical correlations
between words and their possible meanings, while ours does.
Besides Siskind’s work, there are others who approach the problem from a cognitive
perspective. For example, De Marcken (1994) also uses child language learning as a motivation, but approaches the segmentation problem instead of the learning of semantics.
For training input, he uses a flat list of tokens for semantic representations, but does not
34

Acquiring Word-Meaning Mappings

segment sentences into words. He uses a variant of expectation-maximization (Dempster,
Laird, & Rubin, 1977), together with a form of parsing and dictionary matching techniques,
to segment the sentences and associate the segments with their most likely meaning. On
the Childes corpus, the algorithm achieves very high precision, but recall is not provided.
Others taking the cognitive approach demonstrate language understanding by the ability
to carry out some task such as parsing. For example, Nenov and Dyer (1994) describe a
neural network model to map between visual and verbal-motor commands, and Colunga
and Gasser (1998) use neural network modeling techniques for learning spatial concepts.
Feldman and his colleagues at Berkeley (Feldman, Lakoff, & Shastri, 1995) are actively
pursuing cognitive models of the acquisition of semantic concepts. Another Berkeley effort,
the system by Regier (1996) is given examples of pictures paired with natural language
descriptions that apply to the picture, and learns to judge whether a new sentence is true
of a given picture.
Similar work by Suppes, Liang, and Böttner (1991) uses robots to demonstrate lexicon learning. A robot is trained on cognitive and perceptual concepts and their associated
actions, and learns to execute simple commands. Along similar lines, Tishby and Gorin
(1994) have a system that learns associations between words and actions, but they use a
statistical framework to learn these associations, and do not handle structured representations. Similarly, Oates, Eyler-Walker, and Cohen (1999) discuss the acquisition of lexical
hierarchies and their associated meaning as defined by the sensory environment of a robot.
The problem of automatic construction of translation lexicons (Smadja, McKeown, &
Hatzivassiloglou, 1996; Melamed, 1995; Wu & Xia, 1995; Kumano & Hirakawa, 1994; Catizone, Russell, & Warwick, 1993; Gale & Church, 1991; Brown & et al., 1990) has a definition
similar to our own. While most of these methods also compute association scores between
pairs (in their case, word-word pairs) and use a greedy algorithm to choose the best translation(s) for each word, they do not take advantage of the constraints between pairs. One
exception is Melamed (2000); however, his approach does not allow for phrases in the lexicon or for synonymy within one text segment, while ours does. Also, Yamazaki, Pazzani,
and Merz (1995) learn both translation rules and semantic hierarchies from parsed parallel
sentences in Japanese and English. Of course, the main difference between this body of
work and this paper is that we map words to semantic structures, not to other words.
As mentioned in the introduction, there is also a large body of work on learning lexical
semantics but using different problem formulations than our own. For example, Collins and
Singer (1999), Riloff and Jones (1999), Roark and Charniak (1998), and Schneider (1998)
define semantic lexicons as a grouping of words into semantic categories, and in the latter
case, add relational information. The result is typically applied as a semantic lexicon for
information extraction or entity tagging. Pedersen and Chen (1995) describe a method
for acquiring syntactic and semantic features of an unknown word, assuming access to an
initial concept hierarchy, but they give no experimental results. Many systems (Fukumoto &
Tsujii, 1995; Haruno, 1995; Johnston, Boguraev, & Pustejovsky, 1995; Webster & Marcus,
1995) focus only on acquisition of verbs or nouns, rather than all types of words. Also, the
authors just named either do not experimentally evaluate their systems, or do not show the
usefulness of the learned lexicons for a specific application.
Several authors (Rooth, Riezler, Prescher, Carroll, & Beil, 1999; Collins, 1997; Ribas,
1994; Manning, 1993; Resnik, 1993; Brent, 1991) discuss the acquisition of subcategoriza35

Thompson & Mooney

tion information for verbs, and others describe work on learning selectional restrictions
(Manning, 1993; Brent, 1991). Both of these are different from the information required
for mapping to semantic representation, but could be useful as a source of information to
further constrain the search. Li (1998) further expands on the subcategorization work by
inducing clustering information. Finally, several systems (Knight, 1996; Hastings, 1996;
Russell, 1993) learn new words from context, assuming that a large initial lexicon and
parsing system are already available.
Another related body of work is grammar acquisition, especially those areas that tightly
integrate the grammar with a lexicon, such as with Categorial Grammars (Retore & Bonato,
2001; Dudau-Sofronie, Tellier, & Tommasi, 2001; Watkinson & Manandhar, 1999). The
theory of Categorial Grammar also has ties with lexical semantics, but these semantics
have not often been used for inference in support of high-level tasks such as database
retrieval. While learning syntax and semantics together is arguably a more difficult task,
the aforementioned work has not been evaluated on large corpora, presumably primarily
due to the difficulty of annotation.
7.2 Active Learning
With respect to additional active learning techniques, Cohn et al. (1994) were among the
first to discuss certainty-based active learning methods in detail. They focus on a neural
network approach to active learning in a version-space of concepts. Only a few of the
researchers applying machine learning to natural language processing have utilized active
learning (Hwa, 2001; Schohn & Cohn, 2000; Tong & Koller, 2000; Thompson et al., 1999;
Argamon-Engelson & Dagan, 1999; Liere & Tadepalli, 1997; Lewis & Catlett, 1994), and
the majority of these have addressed classification tasks such as part of speech tagging
and text categorization. For example, Liere and Tadepalli (1997) apply active learning
with committees to the problem of text categorization. They show improvements with
active learning similar to those that we obtain, but use a committee of Winnow-based
learners on a traditional classification task. Argamon-Engelson and Dagan (1999) also
apply committee-based learning to part-of-speech tagging. In their work, a committee of
hidden Markov models is used to select examples for annotation. Lewis and Catlett (1994)
use heterogeneous certainty-based methods, in which a simple classifier is used to select
examples that are then annotated and presented to a more powerful classifier.
However, many language learning tasks require annotating natural language text with
a complex output, such as a parse tree, semantic representation, or filled template. The
application of active learning to tasks requiring such complex outputs has not been well
studied, the exceptions being Hwa (2001), Soderland (1999), Thompson et al. (1999). The
latter two include work on active learning applied to information extraction, and Thompson
et al. (1999) includes work on active learning for semantic parsing. Hwa (2001) describes
an interesting method for evaluating a statistical parser’s uncertainty, when applied for
syntactic parsing.

8. Future Work
Although Wolfie’s current greedy search method has performed quite well, a better search
heuristic or alternative search strategy could result in improvements. We should also more
36

Acquiring Word-Meaning Mappings

thoroughly evaluate Wolfie’s ability to learn long phrases, as we restricted this ability in
the evaluations here. Another issue is robustness in the face of noise. The current algorithm
is not guaranteed to learn a correct lexicon in even a noise-free corpus. The addition of noise
complicates an analysis of circumstances in which mistakes are likely to happen. Further
theoretical and empirical analysis of these issues is warranted.
Referential uncertainty could be handled, with an increase in complexity, by forming
LICS from more pairs of representations with which a phrase appears, but not between
alternative representations of the same sentence. Then, once a pair is added to the lexicon,
for each sentence containing that word, representations can be eliminated if they do not
contain the learned meaning, provided another representation does contain it (thus allowing
for lexical ambiguity). We plan to flesh this out and evaluate the results.
A different avenue of exploration is to apply Wolfie to a corpus of sentences paired
with the more common query language, SQL. Such corpora should be easily constructible
by recording queries submitted to existing SQL applications along with their English forms,
or translating existing lists of SQL queries into English (presumably an easier direction to
translate). The fact that the same training data can be used to learn both a semantic
lexicon and a parser also helps limit the overall burden of constructing a complete natural
language interface.
With respect to active learning, experiments on additional corpora are needed to test
the ability of our approach to reduce annotation costs in a variety of domains. It would
also be interesting to explore active learning for other natural language processing problems
such as syntactic parsing, word-sense disambiguation, and machine translation.
Our current results have involved a certainty-based approach; however, proponents of
committee-based approaches have convincing arguments for their theoretical advantages.
Our initial attempts at adapting committee-based approaches to our systems were not very
successful; however, additional research on this topic is indicated. One critical problem is
obtaining diverse committees that properly sample the version space (Cohn et al., 1994).

9. Conclusions
Acquiring a semantic lexicon from a corpus of sentences labeled with representations of
their meaning is an important problem that has not been widely studied. We present both a
formalism of the learning problem and a greedy algorithm to find an approximate solution to
it. Wolfie demonstrates that a fairly simple, greedy, symbolic learning algorithm performs
well on this task and obtains performance superior to a previous lexicon acquisition system
on a corpus of geography queries. Our results also demonstrate that our methods extend
to a variety of natural languages besides English, and that they scale fairly well to larger,
more difficult corpora.
Active learning is a new area of machine learning that has been almost exclusively
applied to classification tasks. We have demonstrated its successful application to more
complex natural language mappings from phrases to semantic meanings, supporting the
acquisition of lexicons and parsers. The wealth of unannotated natural language data,
along with the difficulty of annotating such data, make selective sampling a potentially
invaluable technique for natural language learning. Our results on realistic corpora indicate
that example annotations savings as high as 22% can be achieved by employing active

37

Thompson & Mooney

sample selection using only simple certainty measures for predictions on unannotated data.
Improved sample selection methods and applications to other important language problems
hold the promise of continued progress in using machine learning to construct effective
natural language processing systems.
Most experiments in corpus-based natural language have presented results on some
subtask of natural language, and there are few results on whether the learned subsystems
can be successfully integrated to build a complete NLP system. The experiments presented
in this paper demonstrated how two learning systems, Wolfie and Chill, were successfully
integrated to learn a complete NLP system for parsing database queries into executable
logical form given only a single corpus of annotated queries, and further demonstrated the
potential of active learning to reduce the annotation effort for learning for NLP.

Acknowledgments
We would like to thank Jeff Siskind for providing us with his software, and for all his help
in adapting it for use with our corpus. Thanks also to Agapito Sustaita, Esra Erdem,
and Marshall Mayberry for their translation efforts, and to the three anonymous reviewers
for their comments which helped improve the paper. This research was supported by the
National Science Foundation under grants IRI-9310819 and IRI-9704943.

References
Anderson, J. R. (1977). Induction of augmented transition networks. Cognitive Science, 1,
125–157.
Angluin, D. (1988). Queries and concept learning. Machine Learning, 2, 319–342.
Argamon-Engelson, S., & Dagan, I. (1999). Committee-based sample selection for probabilistic classifiers. Journal of Artificial Intelligence Research, 11, 335–360.
Beckwith, R., Fellbaum, C., Gross, D., & Miller, G. (1991). WordNet: A lexical database
organized on psycholinguistic principles. In Zernik, U. (Ed.), Lexical Acquisition:
Exploiting On-Line Resources to Build a Lexicon, pp. 211–232. Lawrence Erlbaum,
Hillsdale, NJ.
Borland International (1988). Turbo Prolog 2.0 Reference Guide. Borland International,
Scotts Valley, CA.
Brent, M. (1991). Automatic acquisition of subcategorization frames from untagged text.
In Proceedings of the 29th Annual Meeting of the Association for Computational Linguistics (ACL-91), pp. 209–214.
Brown, P., & et al. (1990). A statistical approach to machine translation. Computational
Linguistics, 16 (2), 79–85.
Catizone, R., Russell, G., & Warwick, S. (1993). Deriving translation data from bilingual
texts. In Proceedings of the First International Lexical Acquisition Workshop.
38

Acquiring Word-Meaning Mappings

Cohn, D., Atlas, L., & Ladner, R. (1994). Improving generalization with active learning.
Machine Learning, 15 (2), 201–221.
Collins, M., & Singer, Y. (1999). Unsupervised models for named entity classification. In
Proceedings of the Conference on Empirical Methods in Natural Language Processing
and Very Large Corpora (EMNLP/VLC-99) University of Maryland.
Collins, M. J. (1997). Three generative, lexicalised models for statistical parsing. In Proceedings of the 35th Annual Meeting of the Association for Computational Linguistics
(ACL-97), pp. 16–23.
Colunga, E., & Gasser, M. (1998). Linguistic relativity and word acquisition: a computational approach. In Proceedings of the Twenty First Annual Conference of the
Cognitive Science Society, pp. 244–249.
Dagan, I., & Engelson, S. P. (1995). Committee-based sampling for training probabilistic classifiers. In Proceedings of the Twelfth International Conference on Machine
Learning (ICML-95), pp. 150–157 San Francisco, CA. Morgan Kaufman.
De Marcken, C. (1994). The acquisition of a lexicon from paired phoneme sequences and
semantic representations. In Lecture Notes in Computer Science, Vol. 862, pp. 66–77.
Springer-Verlag.
Dempster, A., Laird, N., & Rubin, D. (1977). Maximum likelihood from incomplete data
via the EM algorithm. Journal of the Royal Statistical Society B, 39, 1–38.
Dudau-Sofronie, Tellier, & Tommasi (2001). Learning categorial grammars from semantic
types. In Proceedings of the 13th Amsterdam Colloquium, pp. 79–84.
Feldman, J., Lakoff, G., & Shastri, L. (1995). The neural theory of language project
http://www.icsi.berkeley.edu/ntl. International Computer Science Institute, University
of California, Berkeley, CA.
Fillmore, C. (1968). The case for case. In Bach, E., & Harms, R. T. (Eds.), Universals in
Linguistic Theory. Holt, Reinhart and Winston, New York.
Fillmore, C. (1988). The mechanisms of “Construction Grammar”. In Axmaker, S., Jaisser,
A., & Singmeister, H. (Eds.), Proceedings of the Fourteenth Annual Meeting of the
Berkeley Linguistics Society, pp. 35–55 Berkeley, CA.
Fisher, D. H. (1987). Knowledge acquisition via incremental conceptual clustering. Machine
Learning, 2, 139–172.
Freund, Y., Seung, H. S., Shamir, E., & Tishby, N. (1997). Selective sampling using the
query by committee algorithm. Machine Learning, 28, 133–168.
Fukumoto, F., & Tsujii, J. (1995). Representation and acquisition of verbal polysemy. In
Papers from the 1995 AAAI Symposium on the Representation and Acquisition of
Lexical Knowledge: Polysemy, Ambiguity, and Generativity, pp. 39–44 Stanford, CA.

39

Thompson & Mooney

Gale, W., & Church, K. (1991). Identifying word correspondences in parallel texts. In
Proceedings of the Fourth DARPA Speech and Natural Language Workshop.
Garey, M., & Johnson, D. (1979). Computers and Intractability: A Guide to the Theory of
NP-Completeness. Freeman, New York, NY.
Goldberg, A. (1995). Constructions: A Construction Grammar Approach to Argument
Structure. The University of Chicago Press.
Grefenstette, G. (1994). Sextant: Extracting semantics from raw text, implementation
details. Integrated Computer-Aided Engineering, 6 (4).
Haas, J., & Jayaraman, B. (1997). From context-free to definite-clause grammars: a typetheoretic approach. Journal of Logic Programming, 30 (1), 1–23.
Haruno, M. (1995). A case frame learning method for Japanese polysemous verbs. In
Papers from the 1995 AAAI Symposium on the Representation and Acquisition of
Lexical Knowledge: Polysemy, Ambiguity, and Generativity, pp. 45–50 Stanford, CA.
Hastings, P. (1996). Implications of an automatic lexical acquisition mechanism. In
Wermter, S., Riloff, E., & Scheler, C. (Eds.), Connectionist, Statistical, and Symbolic Approaches to Learning for natural language processing. Springer-Verlag, Berlin.
Hwa, R. (2001). On minimizing training corpus for parser acquisition. In Proceedings of
the Fifth Computational Natural Language Learning Workshop.
Jackendoff, R. (1990). Semantic Structures. The MIT Press, Cambridge, MA.
Johnston, M., Boguraev, B., & Pustejovsky, J. (1995). The acquisition and interpretation of
complex nominals. In Papers from the 1995 AAAI Symposium on the Representation
and Acquisition of Lexical Knowledge: Polysemy, Ambiguity, and Generativity, pp.
69–74 Stanford, CA.
Knight, K. (1996). Learning word meanings by instruction. In Proceedings of the Thirteenth
National Conference on Artificial Intelligence (AAAI-96), pp. 447–454 Portland, Or.
Kohavi, R., & John, G. (1995). Automatic parameter selection by minimizing estimated
error. In Proceedings of the Twelfth International Conference on Machine Learning
(ICML-95), pp. 304–312 Tahoe City, CA.
Kumano, A., & Hirakawa, H. (1994). Building an MT dictionary from parallel texts based
on linguistic and statistical information. In Proceedings of the Fifteenth International
Conference on Computational Linguistics, pp. 76–81.
Lavrac̆, N., & Dz̆eroski, S. (1994). Inductive Logic Programming: Techniques and Applications. Ellis Horwood.
Lewis, D. D., & Catlett, J. (1994). Heterogeneous uncertainty sampling for supervised
learning. In Proceedings of the Eleventh International Conference on Machine Learning (ICML-94), pp. 148–156 San Francisco, CA. Morgan Kaufman.
40

Acquiring Word-Meaning Mappings

Li, H. (1998). A probabilistic approach to lexical semantic knowledge acquisition and structural disambiguation. Ph.D. thesis, University of Tokyo.
Liere, R., & Tadepalli, P. (1997). Active learning with committees for text categorization. In
Proceedings of the Fourteenth National Conference on Artificial Intelligence (AAAI97), pp. 591–596 Providence, RI.
Manning, C. D. (1993). Automatic acquisition of a large subcategorization dictionary from
corpora. In Proceedings of the 31st Annual Meeting of the Association for Computational Linguistics (ACL-93), pp. 235–242 Columbus, OH.
McCallum, A. K., & Nigam, K. (1998). Employing EM and pool-based active learning
for text classification. In Proceedings of the Fifteenth International Conference on
Machine Learning (ICML-98), pp. 350–358 Madison, WI. Morgan Kaufman.
Melamed, I. D. (1995). Automatic evaluation and uniform filter cascades for inducing n-best
translation lexicons. In Proceedings of the Third Workshop on Very Large Corpora.
Melamed, I. D. (2000). Models of translational equivalence among words. Computational
Linguistics, 26 (2), 221–249.
Muggleton, S. (Ed.). (1992). Inductive Logic Programming. Academic Press, New York,
NY.
Muggleton, S. (1995). Inverse entailment and Progol. New Generation Computing Journal,
13, 245–286.
Muggleton, S., & Feng, C. (1990). Efficient induction of logic programs. In Proceedings of
the First Conference on Algorithmic Learning Theory Tokyo, Japan. Ohmsha.
Nenov, V. I., & Dyer, M. G. (1994). Perceptually grounded language learning: Part 2–
DETE: A neural/procedural model. Connection Science, 6 (1), 3–41.
Oates, T., Eyler-Walker, Z., & Cohen, P. (1999). Using syntax to learn semantics: an
experiment in language acquisition with a mobile robot. Tech. rep. 99-35, University
of Massachusetts, Computer Science Department.
Partee, B., Meulen, A., & Wall, R. (1990). Mathematical Methods in Linguistics. Kluwer
Academic Publishers, Dordrecht, The Netherlands.
Pedersen, T., & Chen, W. (1995). Lexical acquisition via constraint solving. In Papers
from the 1995 AAAI Symposium on the Representation and Acquisition of Lexical
Knowledge: Polysemy, Ambiguity, and Generativity, pp. 118–122 Stanford, CA.
Plotkin, G. D. (1970). A note on inductive generalization. In Meltzer, B., & Michie, D.
(Eds.), Machine Intelligence (Vol. 5). Elsevier North-Holland, New York.
Rayner, M., Hugosson, A., & Hagert, G. (1988). Using a logic grammar to learn a lexicon.
Tech. rep. R88001, Swedish Institute of Computer Science.

41

Thompson & Mooney

Regier, T. (1996). The human semantic potential: spatial language and constrained connectionism. MIT Press.
Resnik, P. (1993). Selection and information: a class-based approach to lexical relationships.
Ph.D. thesis, University of Pennsylvania, CIS Department.
Retore, C., & Bonato, R. (2001). Learning rigid lambek grammars and minimalist grammars
from structured sentences. In Proceedings of the Third Learning Language in Logic
Workshop Strasbourg, France.
Ribas, F. (1994). An experiment on learning appropriate selectional restrictions from a
parsed corpus. In Proceedings of the Fifteenth International Conference on Computational Linguistics, pp. 769–774.
Riloff, E., & Jones, R. (1999). Learning dictionaries for information extraction by multilevel bootstrapping. In Proceedings of the Sixteenth National Conference on Artificial
Intelligence (AAAI-99), pp. 1044–1049 Orlando, FL.
Roark, B., & Charniak, E. (1998). Noun-phrase co-occurrence statistics for semi-automatic
semantic lexicon construction. In Proceedings of the 36th Annual Meeting of the
Association for Computational Linguistics and COLING-98 (ACL/COLING-98), pp.
1110–1116.
Rooth, M., Riezler, S., Prescher, D., Carroll, G., & Beil, F. (1999). Inducing a semantically
annotated lexicon via EM-based clustering. In Proceedings of the 37th Annual Meeting
of the Association for Computational Linguistics, pp. 104–111.
Russell, D. (1993). Language Acquisition in a Unification-Based Grammar Processing System Using a Real World Knowledge Base. Ph.D. thesis, University of Illinois, Urbana,
IL.
Schank, R. C. (1975). Conceptual Information Processing. North-Holland, Oxford.
Schneider, R. (1998). A lexically-intensive algorithm for domain-specific knowledge acquisition. In Proceedings of the Joint Conference on New Methods in Language Processing
and Computational Natural Language Learning, pp. 19–28.
Schohn, G., & Cohn, D. (2000). Less is more: Active learning with support vector machines. In Proceedings of the Seventeenth International Conference on Machine Learning (ICML-2000), pp. 839–846 Stanford, CA.
Sébillot, P., Bouillon, P., & Fabre, C. (2000). Inductive logic programming for corpus-based
acquisition of semantic lexicons. In Proceedings of 2nd Learning Language in Logic
(LLL) Workshop Lisbon, Portugal.
Seung, H. S., Opper, M., & Sompolinsky, H. (1992). Query by committee. In Proceedings
of the ACM Workshop on Computational Learning Theory Pittsburgh, PA.
Siklossy, L. (1972). Natural language learning by computer. In Simon, H. A., & Siklossy,
L. (Eds.), Representation and meaning: Experiments with Information Processsing
Systems. Prentice Hall, Englewood Cliffs, NJ.
42

Acquiring Word-Meaning Mappings

Siskind, J. M. (2000). Learning word-to-meaning mappings. In Broeder, P., & Murre, J.
(Eds.), Models of Language Acquisition: Inductive and Deductive Approaches. Oxford
University Press.
Siskind, J. M. (1992). Naive Physics, Event Perception, Lexical Semantics and Language
Acquisition. Ph.D. thesis, Department of Electrical Engineering and Computer Science, Massachusetts Institute of Technology, Cambridge, MA.
Siskind, J. M. (1996). A computational study of cross-situational techniques for learning
word-to-meaning mappings. Cognition, 61 (1), 39–91.
Siskind, J. M. (1993). Lexical acquisition as constraint satisfaction. Tech. rep. IRCS-93-41,
University of Pennsylvania.
Smadja, F., McKeown, K. R., & Hatzivassiloglou, V. (1996). Translating collocations for
bilingual lexicons: A statistical approach. Computational Linguistics, 22 (1), 1–38.
Soderland, S. (1999). Learning information extraction rules for semi-structured and free
text. Machine Learning, 34, 233–272.
Suppes, P., Liang, L., & Böttner, M. (1991). Complexity issues in robotic machine learning
of natural language. In Lam, L., & Naroditsky, V. (Eds.), Modeling Complex Phenomena, Proceedings of the 3rd Woodward Conference, pp. 102–127. Springer-Verlag.
Thompson, C. A., Califf, M. E., & Mooney, R. J. (1999). Active learning for natural language
parsing and information extraction. In Proceedings of the Sixteenth International
Conference on Machine Learning (ICML-99), pp. 406–414 Bled, Slovenia.
Thompson, C. A. (1995). Acquisition of a lexicon from semantic representations of sentences.
In Proceedings of the 33rd Annual Meeting of the Association for Computational Linguistics (ACL-95), pp. 335–337 Cambridge, MA.
Tishby, N., & Gorin, A. (1994). Algebraic learning of statistical associations for language
acquisition. Computer Speech and Language, 8, 51–78.
Tomita, M. (1986). Efficient Parsing for Natural Language. Kluwer Academic Publishers,
Boston.
Tong, S., & Koller, D. (2000). Support vector machine active learning with applications
to text classification. In Proceedings of the Seventeenth International Conference on
Machine Learning (ICML-2000), pp. 999–1006 Stanford, CA.
Watkinson, S., & Manandhar, S. (1999). Unsupervised lexical learning with categorial
grammars using the lll corpus. In Learning Language In Logic (LLL) Workshop Bled,
Slovenia.
Webster, M., & Marcus, M. (1995). Automatic acquisition of the lexical semantics of verbs
from sentence frames. In Proceedings of the 27th Annual Meeting of the Association
for Computational Linguistics (ACL-89), pp. 177–184.

43

Thompson & Mooney

Wu, D., & Xia, X. (1995). Large-scale automatic extraction of an English-Chinese translation lexicon. Machine Translation, 9 (3-4), 285–313.
Yamazaki, T., Pazzani, M., & Merz, C. (1995). Learning hierarchies from ambiguous natural
language data. In Proceedings of the Twelfth International Conference on Machine
Learning (ICML-95), pp. 575–583 San Francisco, CA. Morgan Kaufmann.
Zelle, J. M. (1995). Using Inductive Logic Programming to Automate the Construction of
Natural Language Parsers. Ph.D. thesis, Department of Computer Sciences, University of Texas, Austin, TX. Also appears as Artificial Intelligence Laboratory Technical
Report AI 96-249.
Zelle, J. M., & Mooney, R. J. (1996). Learning to parse database queries using inductive
logic programming. In Proceedings of the Thirteenth National Conference on Artificial
Intelligence (AAAI-96), pp. 1050–1055 Portland, OR.
Zipf, G. (1949). Human behavior and the principle of least effort. Addison-Wesley, New
York, NY.

44

Journal of Artificial Intelligence Research 18 (2003) 315-349

Submitted 10/02; published 4/03

Structure and Complexity in Planning with Unary Operators
Ronen I. Brafman
Carmel Domshlak

brafman@cs.bgu.ac.il
dcarmel@cs.bgu.ac.il

Department of Computer Science
Ben-Gurion University
P.O. Box 653, 84105 Beer-Sheva, Israel

Abstract
Unary operator domains – i.e., domains in which operators have a single effect – arise
naturally in many control problems. In its most general form, the problem of strips planning in unary operator domains is known to be as hard as the general strips planning
problem – both are pspace-complete. However, unary operator domains induce a natural
structure, called the domain’s causal graph. This graph relates between the preconditions
and effect of each domain operator. Causal graphs were exploited by Williams and Nayak
in order to analyze plan generation for one of the controllers in NASA’s Deep-Space One
spacecraft. There, they utilized the fact that when this graph is acyclic, a serialization
ordering over any subgoal can be obtained quickly. In this paper we conduct a comprehensive study of the relationship between the structure of a domain’s causal graph and the
complexity of planning in this domain. On the positive side, we show that a non-trivial
polynomial time plan generation algorithm exists for domains whose causal graph induces
a polytree with a constant bound on its node indegree. On the negative side, we show
that even plan existence is hard when the graph is a directed-path singly connected DAG.
More generally, we show that the number of paths in the causal graph is closely related to
the complexity of planning in the associated domain. Finally we relate our results to the
question of complexity of planning with serializable subgoals.

1. Introduction
One of the first well formulated problems addressed by AI researchers was the planning
problem. Simply stated, it involves the generation of a sequence of system transformations,
taken out of a given set of system transformations (called actions or plan operators), whose
combined effect is to move the system from some given initial state into one of a set of
desired goal states. The planning problem is known to be intractable in general (Chapman,
1987), and tractable algorithms exist for very restrictive classes of problems only. This
discouraging fact has not deterred planning researchers. Indeed, many researchers believe
that real-world problems have some properties, or structure, that could be exploited, either
implicitly or explicitly. In this paper we attempt to understand the relationship between
structure and complexity in planning problems in which each action changes the value of a
single variable.
To study the relation between the structure and the complexity in a class of problems
we must identify a set of parameters that characterize it. In the case of planning, a number
of such problem properties have been studied in the past (which we review in more detail
in Section 6). These properties have been mostly syntactical, i.e., they involve restriction
on operators, e.g., the type and number of preconditions or effects that operators have. For
c
2003
AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Brafman & Domshlak

example, Bylander (1994) showed that strips planning in domains where each operator is
restricted to have positive preconditions and one postcondition only is tractable. Bäckström
and Klein (1991b) considered other, more global types of syntactical restrictions, but using
a more refined model in which two types of preconditions are considered: prevail conditions,
which are variable values that are required prior to the execution of the operator and are
not affected by the operator, and preconditions, which are affected by the operator. For
example, they have shown that when operators have a single effect, no two operators have
the same effect, and each variable can be affected only in one context (of prevail conditions)
then the planning problem can be solved in polynomial time. However, these restrictions
are very strict, and it is difficult to find reasonable domains satisfying them.
In this paper we concentrate on more global properties of unary operator domains;
properties that capture some of the interactions between different planning operators. The
tool we use to study these properties is the domains’ causal graph. A causal graph is a
directed graph whose nodes stand for the domain propositions. An edge (p, q) appears in
the causal graph if and only if some operator that changes the value of q has a prevail
condition involving p. Such a problem structure was introduced by Knoblock (1994) in
the context of automatically generating abstractions for planning. Subsequently, Jonsson
and Bäckström (1998b) introduced the 3S class of planning problems with unary operators,
which was characterized by the acyclicity of the causal graph, and some restrictions on the
operator set. It was shown that determining plan existence for this class of problems is
polynomial, while plan generation is provably intractable.
Complexity results for unary operators would be of theoretical interest alone if one
could not supply interesting problems in which unary operators are used. One interesting
application in which this problem arises is the determination of dominance relationship
between different outcomes in a CP-net (Boutilier, Brafman, Hoos, & Poole, 1999). This
problem is reducible to strips planning with unary operators.
Another example, of greater interest to the planning community, is a planning-based
reactive control system that commands the NASA Deep Space One autonomous spacecraft (Pell, Bernard, Chien, Gat, Muscettola, Nayak, Wagner, & Williams, 1997; Williams
& Nayak, 1996, 1997). This system was hailed by Weld (1999) in his recent survey of AI
planning as one of the most exciting recent developments in the area of planning. Naturally, the complete system (Pell et al., 1997) is very complex, however, its configuration
planning and execution subsystem are of particular interest to us. In the context of controlling Deep-Space One, Williams and Nayak (1996, 1997) present a reactive planner, Burton,
that generates a single control action for the main engine subsystem of the spacecraft, and
compensates for anomalies at every step. Given a high-level goal (for example, thrust in
one of the engines), Burton continually tries to transition the system toward a state that
satisfies the desired goal. What is particularly relevant for us is that Burton’s task can be
described as a strips planning problem in which each operator affects only a single variable (hardware component) – Williams and Nayak (1997) argue that in physical hardware
it is usually the case that each state variable is commanded separately. However, Burton is
based on two additional important restrictions: First, the planner is explicitly supplied with
a serialization order for any satisfiable set of goal. Second, all operators must be reversible.
One of the reasons cited for designing Burton as a reactive planner that generates a
single action at a time was the potential intractability of generating whole plans. Indeed,
316

Structure and Complexity in Planning with Unary Operators

Williams and Nayak were pessimistic about the prospects of generating whole plans quickly
even for Burton, i.e., for problem instances with serializable sub-goals and single-effect
operators. As our results show, this pessimism was not fully justified.
Our work continues the study of planning with unary operators. This apparently easier
problem is in fact as hard as the general strips planning problem (Bylander, 1994). However, we can obtain finer distinctions and some positive results if we pay closer attention to
the causal structure of the domain. For example, it is easy to show that when the causal
graph is a tree, it is easy to determine a serializability ordering over any set of sub-goals,
and consequently, obtain a plan in polynomial time. In this paper we analyze the relationship between the domain’s causal graph and the complexity of plan generation and plan
existence. In particular we prove the following results:
• When the causal graph forms a polytree (the induced undirected graph is acyclic), and
its node indegree is bounded by a constant, then plan existence and plan generation
are polynomial.
• When the causal graph is directed-path singly connected (there is at most one directed
path between any pair of nodes), then plan existence is np-complete.
• In general, plan generation for the problems with acyclic causal graphs is provably
intractable, i.e., the problem requires exponential time. The corresponding claim
is derived from a previous result by Jonsson and Bäckström (1998b). However, we
show that the complexity of plan generation for these problems can be bounded by a
function of the number of paths within the causal graph.
Note that the complexity of the problems with polytree causal graphs but with unbounded
node indegree remains an open problem – it is still to be shown whether they can be solved
in polynomial time, or they are np-complete.
Finally, we relate our results to an old open question: how difficult is it to generate
plans for problems with serializable subgoals (Korf, 1987)? This question was stated by
Bylander (1992), and different hypotheses were raised by different researchers. Here, we
present a clear, though somewhat disappointing answer: First, our results suggest that even
when the underlying causal graph of the problem is acyclic (and thus the problem is known
to be serializable), finding a serialization ordering on the problem subgoals may be hard.
Second, we show that even if the actual serialization ordering on the subgoals is known,
solving the problem is not necessarily easy.
The rest of this paper is organized as follows: In Section 2 we first introduce some
basic formalism used in the paper, then discuss, motivate and illustrate the notion of causal
graph. In Sections 3 and 4 we present our results on the relation between the form of
the causal graph and the complexity of the planning problem. In Section 5 we discuss the
sub-goal serializability issue and the impact of our results on it. In Section 6 we describe
some related work on complexity of planning, and connect our work with the previous
results. We summarize in Section 7. Finally, Appendix A provides a short review of the
POP algorithm (Penberthy & Weld, 1992), and Appendix B provides some of the proofs.
317

Brafman & Domshlak

2. Basic Formalism and Causal Graphs
In this paper we consider only propositional planning problems, using the propositional
strips with negative goals formalism (Bylander, 1994), in which both positive and negative
preconditions are allowed. Following Bäckström and Klein (1991b), we distinguish between
preconditions and prevail conditions. In the former case the variable involved changes its
value after the operator is executed, while in the latter case the value does not change. The
post-condition of an operator expresses which state variables it changes and what values
these variables will have after executing the operator. The pre-condition specifies which
values these changed variables must have before the operator is executed. The prevail
condition specifies which of the unchanged variables must have some specific value before
execution of the operator and what these values are. Hence, prevail conditions, such as
having a visa, are needed in order to apply an operator, such as Enter-USA, but their
values do not change after the operator is applied. Finally, we assume that an operator is
applicable if and only if both its pre- and prevail conditions are satisfied.
Formally, we assume that a problem instance is given by a quadruple Π = hV, Λ, Init, Goali,
where:
• V = {v1 , . . . , vn } is a set of propositional state variables, each one with an associated
binary domain D(vi ). The domain D(vi ) of the variable vi induces an extended domain
D+ (vi ) = D(vi ) ∪ {u}, where u denotes the unspecified value.
• Init is an initial, fully specified state, i.e. Init ∈ D(v1 ) × . . . × D(vn ).
• Goal is a set of possible goal states. We assume that such a set is specified by a partial
assignment on V, thus Goal ∈ D+ (v1 ) × . . . × D+ (vn ).
• Λ = {A1 , . . . , AN } is a finite set of operators of the form hpre, post, prvi, where
pre, post, prv ⊆ D+ (v1 ) × . . . × D+ (vn ) denote the pre-, post-, and prevail condition,
respectively. In what follows, by pre(A), post(A), and prv(A) we denote the corresponding conditions of an operator A, and by pre(A)[i], post(A)[i], and prv(A)[i] the
corresponding values of the variable vi .
For every vi ∈ V, we must have either pre(A)[i] = u or prv(A)[i] = u. Further,
post(A)[i] 6= u if and only if pre(A)[i] 6= u, in which case post(A)[i] 6= pre(A)[i].
In this paper we analyse only planning problems with unary operators. Therefore, in
what follows, we assume that, for each operator A ∈ Λ, we have that:
1. there exists a variable vi ∈ V, such that pre(A)[i] 6= u, and
2. for each other variable vj ∈ V − {vi }, pre(A)[j] = u.
Note that specifying both pre- and postconditions in case of only propositional variables
is redundant, and we use it only to simplify the presentation. Likewise, our assumption that
post(A) 6= u implies pre(A) 6= u is different from the usual strips formalism, and requires
an exponential time translation in general. However, in our case of only unary operators,
this translation takes only linear time.
318

Structure and Complexity in Planning with Unary Operators

2.1 Causal Graphs
Causal graphs were used by Williams and Nayak (1997) as a tool for describing the structure
of planning domains with unary operators. They represent a dependence relation between
the state variables in the domain. A causal graph G is a directed graph whose nodes
correspond to the state variables. An edge from p to q appears in the causal graph if
and only if some operator that changes the value of q has a prevail condition involving
some value of p. Hence the immediate predecessors of q in G are all those variables that
affect our ability to change the value of q. Such a problem structure was introduced by
Knoblock (1994) in the context of automatic generation of abstractions for planning. The
causal graph is an intuitive model which is easily constructed given any planning problem.
Causal graphs are not the only graphical structure that can be derived from a given
planning problem, and effectively exploited in solving it. For instance, graphs in which
operators and literals (and not variables/propositions) are represented by the nodes, and the
edges represent both prevail and preconditions were introduced by Etzioni (1993) and Smith
and Peot (1993). In particular, problem space graphs of Etzioni (1993) and operator graphs
of Smith and Peot (1993) were proposed as mechanisms to reduce the number of threats
that arise during the total-order and partial-order planning, respectively. However, in this
paper we focus on the causal graphs, since they were shown to be especially informative
when all operators are unary (Jonsson & Bäckström, 1998b; Williams & Nayak, 1997).
Causal graphs have an important potential role in the design of autonomous industrial
systems, as argued and demonstrated by Williams and Nayak (1997): Unary operators are
natural when the manipulated objects are hardware components, since the basic control
actions in such systems change the state of a single hardware component. The applicability
of these control actions in any state depends on the state of the affected component as
well as on the state of the related hardware components. This naturally gives rise to a
planning domain with unary operators. Moreover, since the state variables correspond
to hardware components, in the induced causal graph we typically see that the prevail
dependencies between variables are usually implicitly entailed by the inter-composition of
the hardware components. Thus, the causal graph of such domains resembles the structure
of and the relationships between the system’s hardware components. This resemblance has
important practical ramifications for system design given the relationship between causal
graph structure and the complexity of plan generation: It enables the system designer to
consider the effect of his hardware design on the system’s ability to autonomously generate
control sequences.
A case in point is the planning problem studied by Williams and Nayak (1997), which
had a number of important features: all operators were unary and reversible, and the causal
graph was acyclic. Williams and Nayak argued that acyclic connectivity frequently occurs
in designed systems. However, the requirement that all operators should be reversible seems
to us restrictive, and it has important impact on the complexity of the problem. In the
case of the Burton planner (Williams & Nayak, 1997), there were good reasons to make this
assumption. Burton’s reactive nature precludes extensive deliberation on the consequences
of its operators. Thus it leaves open the possibility that operators may degrade the system’s
capabilities, leading it to dead-ends. In that case, the restriction to reversible operators was
319

Brafman & Domshlak

required in order to achieve a more reliable system. As we show later, in certain cases,
complete plans can be generated efficiently even when the operators are not reversible.
Williams and Nayak’s work has another interesting aspect, as noted by Weld (1999).
For a long time, researchers have known that planning problems with serializable subgoals
are likely to be easier to solve. Williams and Nayak recognized that their spacecraft configuration task was serializable (many real-world problems are not), and, more importantly,
they developed a fast algorithm for computing the correct order based on the fact that
the underlying causal graph is acyclic. However, their algorithm makes heavy use of the
fact that all operators are reversible. Informally, reversibility implies that we can solve our
subgoals one by one as long as they are consistent with some topological order of the causal
graph without taking into account any global considerations: any side-effect can always
be undone. Without the assumption of operator reversibility, it is relatively easy to show
that Williams and Nayak’s algorithm works only if the causal graph forms a directed chain.
Even when the causal graph is a tree, although the problem is easy, one must take care in
the choice of which subgoal to achieve next when operators are not reversible. As we show
later, when the structure of the causal graph is more complicated than a directed tree then
either the problem is hard or, if not, a more sophisticated algorithm is required.
Finally, we note that the existence of reversible operators might make the problem seem
easier than it actually is. In this paper we present an example of a propositional planning
problem with unary operators, acyclic causal graph, and totally reversible operators, the
minimal solution of which is exponentially long in the size of the problem’s description.
2.2 Example
In order to illustrate the notion of a causal graph, consider the following example, inspired
by the work of Williams and Nayak (1997) on controlling the main engine subsystem of the
Cassini spacecraft, in general, and its valve driver circuitry, in particular.
Each valve V L (on/off) is controlled by a valve driver V LD (open/close), and a safety
control unit SCU (safe/unsafe). Each driver controls exactly one valve, while a safety
control unit can control several valves. Commands to the driver are sent via a driver
control unit, that consist of two switches, S l and S r , which can be either on or off. The
activating states of S l and S r are described below. A valve reacts (by a state change)
to a command from its driver only if (i) the instruction actually involve a state change
(i.e., an open valve should not be reopened), and (ii) the safety control unit indicates that
manipulating the valve is safe. In addition, the valve can be closed if the safety control unit
indicates an unsafe situation. For simplicity of presentation, Table 1 presents the operator
set for controlling the valves and valve drivers only. The dashed boxes stand for driver
control units, two switches in each.
Now suppose that the valves V L1 and V L2 , with the drivers V LD1 and V LD2 , respectively, are controlled by a shared safety control unit SCU . Given the operator set in
Table 1, the causal graph for controlling this subsystem is presented in Figure 1.

3. Polytree Causal Graphs
Starting at this section, we show how, by bounding the structural complexity of the causal
graph, we can bound the complexity of plan generation. Recall that we use a propositional
320

Structure and Complexity in Planning with Unary Operators

Affected component
V LD
VL

pre
close
open
on
of f
on

post
open
close
of f
on
of f

prv
Sl = 1 ∧ Sr = 0
Sl = 0 ∧ Sr = 1
V LD = close ∧ SCU = saf e
V LD = open ∧ SCU = saf e
SCU = unsaf e

Table 1: A subset of the operator set for the valve circuitry controller example.
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 




S1r

S1l




EE
ww
E

_ _ _ _ _EEE_ _ _ _ _ _www_w _ _ _ _
EE
w
w
E"
{ww

V LD1

GG
G#

SCU

HH
HH
HH
HH
H#



S2r 
S2l G
G
y
G
y


_ _ _ _ _GGG_G _ _ _ _ _ yy_y _ _ _ _



w
ww
ww
w
w
w{ w

V LD2

GG
GG
GG
GG
G#

V L1

yy
|yy

vv
vv
v
vv
v{ v

V L2

Figure 1: Causal graph for the example.
language (binary variables) to describe the state of the world, and each operator is described
by its prevail conditions, single precondition, and single effect (or post-condition). The
precondition and the effect are two literals, one the negation of the other.
A causal graph forms a polytree if there is a single path between every pair of nodes in
the induced undirected graph1 , i.e., the induced undirected graph is a tree. For example, the
causal graph presented in Figure 1 forms a polytree. For this class of problems we present
a planning algorithm which is polynomial if the indegree of all nodes in the causal graph is
bounded by a constant. We argue that this assumption is reasonable if the prevail dependencies reflect the inter-composition of some controlled hardware components (Williams &
Nayak, 1997).
Given a propositional planning instance with a polytree causal graph, we:
1. Provide a general upper bound for the number of times that a variable may be required
to change its value on a valid, irreducible plan.
2. Using this general upper bound, provide a polynomial time procedure, called determinemax-sequence, that, given a variable v, determines the actual maximal number of
times that v can change its value on a valid, irreducible plan.
3. Provide a preprocessing algorithm that: (a) determines whether or not a plan for a
given problem instance of our class exists, and (b) performs a substantial amount of
1. These graphs are also known as singly connected DAGs.

321

Brafman & Domshlak

preprocessing for the subsequent step of plan generating. This algorithm is based on
a top-down execution of determine-max-sequence on the variables of the given
problem instance.
4. If the answer of the plan existence check is positive we run a particular deterministic instance of the POP algorithm2 (Penberthy & Weld, 1992), called pop-pcg,
that generates the required plan using the information provided by the preprocessing
algorithm, without backtracking, in linear time.
Informally, this process is based on the following properties of the planning problems
with polytree causal graph. First, the bound achieved in step 1 is necessary for the steps 2-3,
which are the main steps of our technique. By itself, this bound will be valid not only for
a polytree, but for a wider class of directed-path singly connected causal graphs. However,
steps 2-3 will be valid for polytree causal graphs only, because of the following properties
of this form of dependence relation between the variables:
(i) Given a variable v ∈ V, changing the value of a parent (immediate predecessor)
w ∈ pred(v) does not require any changes of neither other parents of v, nor their
predecessors in the causal graph.
(ii) The number of times that a variable v will be able to change its value along a valid
plan for a given problem instance depends directly both on these numbers for pred(v),
and on the actual ordering of the value changes of pred(v).
(iii) From (i) it follows that all the possible orderings of the value changes of pred(v) are
legal. In addition, it will be shown that chosing an ordering for the value changes of
pred(v) will not affect our ability to change the value of any variable except of v.
(iv) The crucial part of the process (steps 2-3) is basically about finding the right ordering of
the right number of value changes of pred(v) for each variable v ∈ V. By synchronizing
these changes to v’s parents appropriately, we can increase the number of possible
changes to v.
We start with some notation. First, a valid plan P for a given planning instance Π
will be called irreducible if any subplan P 0 of P is not a plan for Π, in the following sense:
Removal of any subset of (not necessarily subsequent) actions from P makes the resulting
plan either illegal, or its initial state is not Init, or its goal state is not one of the states
specified by Goal. The notion of irreducible plans was introduced by Kambhampati (1995),
where it was exploited for admissible pruning of partial plans during search3 .
2. A short review of the POP algorithm, and the corresponding formalism is provided in Appendix A. For
those familiar with the algorithm, we note one slight technical change, stemming from the use of unary
operators. POP uses two fictitious actions A0 and A∞ to capture the initial and goal state, respectively.
Here, we replace each of these actions by a set of actions, each with a single effect. The (fictitious) action
setting the initial value of variable vi is denoted A0i and the fictitious action whose precondition is the
goal value of variable vi is denoted A∗i .
3. Irreducible plans were called in (Kambhampati, 1995) minimal plans. However, we decided to change the
name of this concept in order to prevent an ambiguity between “minimal as irreducible” and “minimal
as optimal”.

322

Structure and Complexity in Planning with Unary Operators

Now, given a planning instance Π, let P be the set of all irreducible plans for Π. We
denote by MaxReq(v) the maximal number of times that a variable v ∈ V changes its value
in the course of execution of an irreducible plan for Π. Formally, let Req(P, v) be the number
of times that v changes its value in the course of execution of a plan P . Then,
MaxReq(v) = max{Req(P, v)}
P ∈P

Observe that, for any planning problem with unary operators, a variable must change
its value at most once for each required change of its immediate successors in the causal
graph (in order to satisfy the necessary prevail conditions), and then at most once in order
to obtain the value requested by the goal. Thus, for all variables in V, MaxReq(v) satisfies:
X
MaxReq(v) ≤ 1 +
MaxReq(u)
(1)
succ(v)

where succ(v) denotes the immediate successors of v in the corresponding causal graph.
Adopting the terminology from (Domshlak & Shimony, 2003; Shimony & Domshlak, 2002),
a directed acyclic graph G is directed-path singly connected if, for every pair of nodes s, t ∈ G,
there is at most one directed path from s to t. The following lemma shows that if the causal
graph forms a directed-path singly connected DAG then we can bound MaxReq(v) by n.
Clearly, all polytrees are directed-path singly connected DAGs, but not vice versa.
Lemma 1 For any solvable problem instance Π with a directed-path singly connected causal
graph over n variables, for any variable v, we have that MaxReq(v) ≤ n.
Proof: The proof is by induction on n. For n = 1 it is obvious that MaxReq(v) ≤ 1. Now
suppose that when |V| = n − 1 then for any v ∈ V,
MaxReq(v) ≤ n − 1
Let Π0 be some problem instance for which |V 0 | = n. Suppose that the variables in V 0 =
{v1 , . . . vn } are topologically ordered based on the domain’s causal graph. Clearly, vn is
a leaf node (i.e., succ (vn ) = ∅). We will denote by Π the problem instance obtained by
removing vn from the domain, and the corresponding variable set by V. According to Eq. 1,
for each immediate predecessor v of vn in the causal graph,
newMaxReq(v) ≤ MaxReq(v) + newMaxReq(vn ) ≤ MaxReq(v) + 1
where newMaxReq(v) denotes MaxReq(v) with respect to Π0 . Generally, since the causal
graph is directed-path singly connected, for each variable v ∈ V 0 ,

MaxReq(v) + 1, if there is a path from v to vn
newMaxReq(v) ≤
(2)
MaxReq(v),
otherwise
and thus, for each v ∈ V 0 , holds
newMaxReq(v) ≤ n

323

Brafman & Domshlak

Recall that MaxReq(v) stands for an upper bound on the number of value changes of v
that may be required by a valid, irreducible plan. However, the maximal achievable number
of value changes of v, denoted by MaxPoss(v) can be greater or less than MaxReq(v). For
example, if v has no predecessors in the causal graph, and there are two operators affecting
v differently, then MaxPoss(v) = ∞.
We denote the upper bound on the feasible number of value changes of v that may
be required in a valid, irreducible plan for Π by FMaxReq(v). Informally, no more than
MaxPoss(v) value changes of v can be required and no more than MaxReq(v) value changes
of v should be required, thus
FMaxReq(v) = min(MaxPoss(v), MaxReq(v))

(3)

Determining FMaxReq(v) for all variables requires explicit examination of a given problem instance. Recall that here we restrict the causal graph of Π to form a polytree. To
simplify the presentation, we assume that the goal values are specified for all state variables,
i.e. Goal ∈ D(v1 ) × . . . × D(vn ). Later we show that this assumption does not affect the
generality of the algorithm. Denote by v 0 and v ∗ the initial and the goal values of v in Π,
and by Λv ⊆ Λ the set of all operators affecting v. First we examine the root variables of
the causal graph, then we analyze the rest of the variables.
Denote by pred(v) the immediate predecessors of v in the causal graph. If pred(v) = ∅,
+
+
∗
then there are at most two operators A−
v , Av in Λv : Av has v as its postcondition, while
−
Av has the reverse effect. Since these operators have no prevail condition, if both A−
v and
+
Av are presented in Λ, then they can be applied one after another an infinite number of
+
times. Therefore, from Eq. 3, FMaxReq(v) = n. If Λv 6= {A−
v , Av } then we have two cases:
If the initial and the goal values of v are the same, then we cannot change the value of v
and reconstruct it later, and thus FMaxReq(v) = 0. Alternatively, if the initial and the goal
values of v are different then if Λv = {A+
v } then we can achieve the goal value of v but only
once and thus FMaxReq(v) = 1. Otherwise, the goal value of v is unachievable, thus the
given problem instance is unsolvable. Table 2 summarize this analysis.

v0
v0

=

v∗

6=

v∗

Λv
−
{Av , A+
v}
otherwise
+
{A−
v , Av }
+
{Av }
otherwise

FMaxReq(v)
n
0
n
1
no solution

Table 2: FMaxReq(v) values for the root variables in the causal graph.
Now consider a variable v which is presented by an internal node in the causal graph:
pred(v) = {w1 , . . . , wk } =
6 ∅. Observe that the number of possible value changes of v depends
on and only on:
1. The initial and the goal values of v, i.e., v 0 and v ∗ .
324

Structure and Complexity in Planning with Unary Operators

2. The set of operators affecting v, i.e., Λv .
3. The maximally possible (but still reasonable) number of times that predecessors of v
can change their values, i.e., FMaxReq(w1 ), . . . , FMaxReq(wk ).
4. The actual scheduling of the value changes of the predecessors of v.
The last point is crucial – it means that in order to determine FMaxReq(v) we should find
a particular scheduling of the value changes of pred(v) that allows such a maximal number
of value changes for v. The corresponding interleaving sequence of v’s values, starting and
finishing by v 0 and v ∗ respectively, with FMaxReq(v) value changes will be called maximal
and will be denoted by σ(v) (|σ(v)| = FMaxReq(v) + 1).
From Lemma 1, for 1 ≤ i ≤ k, we have FMaxReq(wi ) ≤ n, thus the number of different
orderings of value changes of pred(v) can be exponential in n. For instance, when, for
1 ≤ i ≤ k, we have FMaxReq(wi ) = n, this number of different orderings can be expressed
as:


k−1
n 
YX
n − 1 ni + 1
 2nk
j
j−1
i=1 j=1

where the correctness of the expression on the left side of the inequality is shown by Lemma 4
(see Appendix B, p. 347). Clearly, we cannot check all these orderings in a naive manner.
Following, we provide an algorithm that determines σ(v) in time which is polynomial in n.
For clarity of presentation we want to distinguish between the different elements of a
maximal sequence σ(v). Since all variables are binary, we denote the initial value of v, v 0 ,
by bv and the opposite value by wv (black/white). Similarly, bi and wi will stand for the
corresponding values of the variable vi . If so, we can think about all the operators in Λ
as described in this language. Likewise, we sequentially number the appearances of each
value of v on σ(v). For example, biv stands for the ith appearance of the value bv along
σ(v). To illustrate this notation, suppose that D(v) = {true, f alse}, the initial value of v
is v 0 = true, and FMaxReq(v) = 4. Then, we have:
bv ≡ true
wv ≡ f alse
σ(v) = b1v · wv1 · b2v · wv2 · b3v
First, for every variable v, every operator A ∈ Λv is extended to a set of operators that
explicitly specify prevail values for all parents of v in the causal graph: If |pred(v)| = k,
and the prevail condition of A is specified only in terms of some 0 ≤ k 0 ≤ k parents4 of
0
v, then A is extended to a set of 2k−k operators, where each operator extends A by an
instantiation of the previously unspecified parents of v. For example, consider a variable v
with pred(v) = {u, w}, and an operator
A = {pre : {bv }, post : {wv }, prv : {bu }},
4. For every other parent wj of v, we have prv(A)[j] = u.

325

Brafman & Domshlak

the prevail condition of which does not involve w. This operator is extended to a pair of
operators:
A0 = {pre : {bv }, post : {wv }, prv : {bu , bw }}
A00 = {pre : {bv }, post : {wv }, prv : {bu , ww }}

corresponding to the possible values of w. In what follows, we refer to the operator set
resulting from such a compilation of Λ as Λ./ . Note that, under the assumption of constantly
bounded maximal indegree κ of the causal graph, compiling Λ into Λ./ takes only polynomial
κ+1 , and thus |Λ./ | = O(n2κ+1 ).
time, since, for every variable v, |Λ./
v |≤2
Given the maximal sequences σ(w1 ), . . . , σ(wk ) and the operator set Λ./
v we construct
0
a directed graph (denoted as Ge (v)) that captures all (and only) feasible sequences of, up
to n, value changes of v, where each value change is annotated with the corresponding
assignment on pred(v). Although the number of the captured sequences can be exponential
in n, the size of G0e (v) is polynomial in n. With respect to this graph, the problem of finding
the maximal sequence σ(v) is reduced to the problem of finding a longest path from a given
node to an arbitrary other node in a directed acyclic graph.
The graph G0e (v) is created in three incremental steps. At the first step, given the
maximal sequences σ(w1 ), . . . , σ(wk ) and the operator set Λ./
v we construct a directed labeled
graph G(v) capturing information about all sequences of assignments on pred(v) that can
enable n or less value flips of v. The graph G(v) is defined as follows:
1. G(v) consist of η nodes, where

 n, ((n = 2j) and (v 0 = v ∗ )) or
((n = 2j + 1) and (v 0 6= v ∗ )), j ∈ N
η=

n − 1, otherwise
2. G(v) forms a 2-colored multichain, i.e., (i) the nodes of the graph are colored by black
and white, starting by black; (ii) there are no two subsequent nodes with the same
color; (iii) for 1 ≤ i ≤ η − 1, edges from the node i are only to the node i + 1.
Observe that such a construction of G(v) promises that the color of the last node will
be consistent with v ∗ .
3. The nodes of G(v) are denoted precisely by the elements of the maximal sequence
σ(v), i.e., biv stands for the ith black node in G(v).
4. Suppose that there are m operators in Λ./
v that change the value of v from bv to wv . In
i
this case, for each i, there are m edges from biv to wvi , and |Λ./
v | − m edges from wv to
bi+1
v . All edges are labeled by the prevail conditions of the corresponding operators,
i.e., a k-tuple of the values of w1 , . . . , wk . This tuple is denoted by l(e) (label of the
edge e) and its component, corresponding to a predecessor wi , is denoted by l(e)wi .
This formal definition of G(v) is relatively complicated, thus we provide a demonstrating
example: Suppose that we are given a problem instance over 5 variables, and we consider
326

Structure and Complexity in Planning with Unary Operators

a variable v with pred(v) = {u, w}, v 0 = bv , and v ∗ = wv . Recall that every operator in
Λ./ is presented as a three-tuple hpre, post, prvi of pre-, post-, and prevail conditions of the
operator respectively. Suppose that:
1
2
σ(u) = b1u · wu1
σ(w) = b1w · ww
· b2w · ww
 1
 Av = {pre : {bv }, post : {wv }, prv : {bu , ww }}
./
A2 = {pre : {wv }, post : {bv }, prv : {bu , bw }}
Λv =
 v3
Av = {pre : {wv }, post : {bv }, prv : {wu , ww }}

For this case, the graph G(v) is presented by Figure 2.
bu bw
bu ww /
b1v

wv1

bu bw

$
:

bu ww /
b2v

wv2

$

3 bu ww /

: bv

wv3

wu ww

wu ww

Figure 2: Example of the graph G(v).
The constructed graph G(v) captures information about all potentially possible executions of the operators in Λ./
v that can provide us MaxReq(v) or less value changes of v.
Each path, started at the source node of G(v), uniquely corresponds to such an execution.
Although the number of these alternative executions may be exponential in n, this graphical representation is compact: the number of edges in G(v) is O(n · |Λ./
v |). Note that the
information about the number of times that each operator in Λ./
can
be executed is not
v
captured by G(v). The following two steps add this information indirectly and exploit it to
find a maximal sequence σ(v).
At the second step of construction, we expand G(v) with respect to the maximal sequences σ(w1 ), . . . , σ(wk ) as follows: Each edge e ∈ G(v) (which by definition corresponds
to some operator A ∈ Λ./
v ), is replaced by a set of edges such that their labels correspond to
all possible assignments of the elements of σ(w1 ), . . . , σ(wk ) to l(e) (i.e., prv(A)). Likewise,
we add a dummy source node sv , with an edge from sv to the original source node of G(v)
labeled by a tuple of the first elements of σ(w1 ), . . . , σ(wk ) (= initial values of w1 , . . . , wk ).
Similarly, we add a dummy target node tv , with an edge from the original target node of
G(v) to tv labeled by a tuple of the last elements of σ(w1 ), . . . , σ(wk ) (= goal values of
w1 , . . . , wk ). We denote this extended graph by G0 (v), and Figure 3 illustrates G0 (v) for the
example above.
The extended graph G0 (v) can be viewed as a projection of the maximal sequences σ(wi ),
1 ≤ i ≤ k, on the graph G(v). Each edge in G(v) may be replaced by O(nk ) edges in G0 (v),
and thus the number of edges in G0 (v) is O(nk+1 · |Λ./
v |).
It is easy to see that not all paths in G0 (v) starting at sv are relevant. For example, in
G0 (v) above, an operator instance prevailed by b1u b2w can not be performed after an operator
2 . Thus, now we are faced with the problem of finding a longest
instance prevailed by b1u ww
feasible path from sv to a node in G0 (v), the label of which is consistent with v ∗ . The
following (last) step provides a reduction of the problem of finding a longest feasible path
from sv to a v ∗ -colored node in G0 (v) to a known problem of finding a longest path in a
327

Brafman & Domshlak

b1u b1w

b1u b1w
1
b1u ww

sv

b1u b1w

/ b1
v
2
b1u ww

&

b1u b2w
1
8 wv
1 w1
wu
w

% 
2
9 bH v

1
b1u ww

2
b1u ww

1 w2
wu
w

&

b1u b2w
2
8 wv

% 
3
9 bH v

1 w1
wu
w

1
b1u ww

&

3
8 wv

1 w2
wu
w

/ tv

2
b1u ww

1 w2
wu
w

Figure 3: Example of the graph G0 (v).
directed acyclic graph. Let the graph G0e (v) have the edges of G0 (v) as nodes, and let its
edges be defined by all allowed pairs of immediately subsequent edges in G0 (v): (e, e0 ) is
allowed if, for 1 ≤ i ≤ k, either l(e)wi = l(e0 )wi or l(e0 )wi appears after l(e)wi on σ(wi ). Such
a construction is a variant of a so called “edge graph” known in graph theory; the addition
in our case is the exclusion of non-allowed edges from it. Clearly, G0e (v) can be constructed
2
in time polynomial in size of G0 (v), and the number of edges in G0e (v) is O(n2k+2 · |Λ./
v | ).
b1u b1w

b1 b1

2
wu1 ww

2
wu1 ww

u /w J
// JJ
// JJJ
// JJJJ
// JJJ
J
//
JJ
JJ
//
$
$
//
/
1
1
1
2
1
1
1
1
2
/
_
_
_
_
/
bu bw //
b1u ww
bu ww
bu ww
bu bw //
//77
77 /
JJ
7
//77
//
u:
JJ
77 //
7 /
u
//77
//77
JJ
u
/
/
77 /
7 /
JJ
// 77
// 77
u
J$
/
/
7
7
7
7
u
// 7
// 7
//
77 //
7
7
7
1
1
2
/
/
7
7
7
bu bw
wu1 ww
77 //
7 //
// 77
// 77
II
u:
77//
7 //
II
u
// 77
// 77
II
uu
77//
7 //
// 77
// 77
II
uu
u
/
/
7
7
7
7
I$
u
// 
// 

u

// w1 w1
// w1 w1
2
1 w2
1 w2
b1u ww
b
b
u wJ
u w
// u w
// u w
JJ
JJ
JJ
//
JJ
JJ ///
JJ /
JJ /
JJ /
J$ 
$ 

Figure 4: Example of the graph G0e (v).
Figure 4 presents G0e (v) for our example. The dashed edges present the longest path
from the dummy source node to a node that corresponds to a value change from ¬v ∗ to v ∗
(from bv to wv ). Such a longest path in G0e (v) describes a maximal sequence of value changes
σ(v), and its length is actually FMaxReq(v) + 1. In our example, σ(v) = b1v · wv1 · b2v · wv2 , and
FMaxReq(v) = 3. Note that if v 0 = v ∗ then the empty path will be also acceptable since,
in general, v does not have to change its value. In this case FMaxReq(v) = 0 and σ(v) will
consist of only one element which corresponds to the initial (= goal) value of v.
Observe that a longest path in G0e (v) describes not only σ(v) but also the actual sequence
j
of invocations of the operators from Λ./
v that provides σ(v). We denote by {A(bv )} and
j
{A(wv )} the sequences of operator instances that have as effects the corresponding elements
from the sequences {bjv } and {wvj } ({bjv } ∪ {wvj } = σ(v)) of v’s values, respectively. In
what follows, we address these sequences of operator instances as one sequence of operator
328

Structure and Complexity in Planning with Unary Operators

Procedure forward-check (Π)
1. Topologically sort all variables V based on the the causal graph.
2. For each variable v ∈ V, call determine-max-sequence(Π, v), respecting the above
ordering.
3. If one of the calls to determine-max-sequence return failure, then return failure.
Otherwise return success.
Procedure determine-max-sequence (Π, v)
1. If pred(v) = ∅ then
(a) If v 0 6= v ∗ and A+
v 6∈ Λv , return failure.
(b) Otherwise, determine σ(v) according to the rules in Table 2, and return success.
2. Otherwise, if pred(v) = {w1 , . . . , wk } then
(a) Construct G(v) (based on v 0 , v ∗ , and Λ./
v ).
(b) Construct G0 (v) (from G(v), based on σ(w1 ), . . . σ(wk )).
(c) Construct G0e (v) (from G0 (v), based on σ(w1 ), . . . σ(wk )).
(d) Determine the longest path in G0e (v) to a node corresponding to a v ∗ -ended value
change, and derive σ(v) and the corresponding sequence of operators from it.
(e) If v 0 6= v ∗ and FMaxReq(v) = 0, return failure. Otherwise, return success.
Figure 5: forward-check algorithm
FMaxReq(v)

instances Γv = {A(νvi )}i=2

νvi

=




, where A(νvi ) has νvi as its effect, and
i+1

bv 2 ,
i
2

 w ,
v

i = 2k + 1

k∈N

i = 2k

Procedure forward-check in Figure 5 summarizes the presented approach. Note that
finding a set of longest paths from a node to all other nodes in a directed acyclic graph
can be done in time linear in the size of the graph (Wiest & Levy, 1969). Therefore, the
time complexity of a call to the determine-max-sequence procedure with a variable v is
2
bounded by the size of the constructed graph G0e (v) and thus is O(n2k+2 ·|Λ./
v | ). forwardcheck calls determine-max-sequence n times. Therefore, if the maximal node indegree
is bounded by a constant κ, then the overall complexity of the algorithm is O(|V|2κ+3 ·22κ+2 ),
i.e., polynomial in the size of the problem description.
Theorem 1 A given problem instance with a polytree causal graph is solvable if and only
if, for each v ∈ V, forward-check succeeds in constructing the maximal sequence σ(v).
forward-check fails if and only if at least one of the calls to the determine-maxsequence procedure fails. In turn, a call to determine-max-sequence on a variable v
329

Brafman & Domshlak

Algorithm: pop-pcg (hA, O, Li, agenda, Λ)
1. Termination: If agenda is empty, return hA, O, Li
2. Goal selection: Let hϑi , Aneed i be a rightmost pair on the agenda (by definition,
Aneed ∈ A and ϑi is one of the pre/prevail conditions of Aneed ).
3. Operator selection:
(a) If Aneed 6= A∗i (ϑi = νij ) then Aadd = A(νij ) ∈ Γi ∪ {A0i }.
(b) Otherwise:
i. Let m = max { j | A(νij ) ∈ A}.
ii. If vi∗ is consistent with νim (both associated with the same color from {b, w})
then Aadd = A(νim ), else Aadd = A(νim+1 ).
ϑ

4. Plan updating: Let L = L ∪ {Aadd →i Aneed }, and let O = O ∪ {Aadd < Aneed }. If
Aadd is newly instantiated, then A = A ∪ {Aadd } and O = O ∪ {A0i < Aadd < A∗i }
(otherwise A and O remain unchanged).
5. Update goal set: Let agenda = agenda - {hϑi , Aneed i}. If Aadd is newly instantiated,
then for each of its pre/prevail conditions Q, add hQ, Aadd i to agenda.
6. Threat prevention: If Aadd = A(νij ), j > 1, then, for each A ∈ A, s.t. νij−1 belongs
to the prevail conditions of A, add {A < A(νij )} to O.
7. Recursive invocation: pop-pcg(hA, O, Li, agenda, Λ), where agenda is topologically ordered (based on the causal graph with respect to the precondition part of each
pair).
Figure 6: pop-pcg algorithm
fails if and only if the initial and the goal values of v are different but there is no way to
change the value of v even once. Thus, if forward-check fails, then no plan exists.
To prove the opposite direction we proceed as follows: We define the pop-pcg algorithm
(POP for polytree causal graphs) and show that it will succeed without backtracking if
forward-check succeeds.5 pop-pcg is described in detail in Figure 6, and it works as
follows: First, let us expand each sequence of operator instances Γi by A(νi1 ) (A(b1i )) which
will stand for the dummy operator A0i . (Recall that up until now, only operators of the
form A(νij ) for j > 1 were defined.) The algorithm maintains a goal agenda sorted based
on the causal graph structure: parent variables appear after their descendents. At each
point, the next agenda item is selected; if it requires achieving some value for vi we add the
corresponding operator to the plan with the desired effect (step 3a). Actually, if we would
be ready to accept plans with possible redundant steps, we can omit the next step 3b from
the algorithm by assuming that the goal value of each variable v is the last element of the
5. For a short review of the POP algorithm, the corresponding formalism, and the description of the initial
call to the algorithm, we refer the reader to Appendix A.

330

Structure and Complexity in Planning with Unary Operators

maximal sequence σ(v). However, if we would like our plan to be irreducible, then a careful
decision about the really required number of value changes of each variable is required.
This decision is captured in step 3b by analysis of the value changes of a variable vi that
were found necessary in the previous iterations of the algorithm in order to satisfy the
predecessors of vi in the causal graph. Note that the agenda is sorted with respect to some
reverse topological ordering of the causal graph, thus if an operator affecting vi was selected
from the agenda then no operator affecting some predecessor of vi in the causal graph will
appear on the agenda until the end of the algorithm. No threats arise in pop-pcg, and the
ordering constraints are consistent.
Lemma 2 If forward-check was successful then pop-pcg will return a valid plan.
Proof:

The lemma will follow from the following claims:

1. For every agenda item, there exists an operator that has it as an effect.
2. There are no threats in the output of pop-pcg.
3. The ordering constraints in O are consistent.
4. The agenda will be empty after a polynomial number of steps.
For the proof see Appendix B, p. 343. 
Recall that, for simplicity of presentation, we assumed that the goal values are specified
for all state variables (single goal state), i.e. Goal ∈ D(v1 ) × . . . × D(vn ). Now we show that
the presented approach, with minor modifications, works for a set of possible goal states as
well, if such a set is specified by a partial assignment on V, i.e. Goal ∈ D+ (v1 )×. . .×D+ (vn ).
Note that the latter assumption is widely accepted in the planning literature.
First, no modifications should be done in processing variables that are specified by Goal.
Now, for each variable v, such that v ∗ is not specified by Goal, the modifications are as
follows:
1. The graph G(v) will consist of exactly n nodes. This is correct since (i) according to
Lemma 1, n changes of v have to be sufficient, and (ii) any value change of v can be
its last value change.
2. No changes in construction of G0 (v) and G0e (v).
3. In the procedure determine-max-sequence:
(a) In step 2d, determine the longest path from the dummy source node to any other
node in the graph.
(b) In step 2e, always return success.
Again, this is correct since any value change of v can be its last value change, and, in
particular, v may remain unchanged in a plan for a given problem.
Finally, the pop-pcg algorithm starts with a null plan that contains the end operator
A∗i only if vi∗ is specified by Goal.
331

Brafman & Domshlak

4. Directed-Path Singly Connected and General DAGs
In this section we analyze planning complexity in face of more complicated causal graphs.
First, we show that when the causal graph is directed-path singly connected even plan
existence is np-complete. Second, we show that for general causal graphs the situation is
even worse. Finally, we characterize an important parameter of the causal graph affecting
planning complexity, which allows us to extend the class of problems which are in np.
Theorem 2 Plan existence for strips planning problems with unary operators and directedpath singly connected causal graph is np-complete.
Proof:

For the proof see Appendix B, p. 346. 

Note that node indegree in the causal graph of the problem created in the proof of
Theorem 2 is bounded by 6. The hardness for directed-path singly connected causal graphs
with maximal indegree lower than 6 is thus open.
The directed-path singly connected structure of the causal graph turns out to be crucial
for guaranteeing reasonable solution times. As we now show, there are solvable propositional planning problems with an arbitrary acyclic (DAG) causal graph that have minimal
solutions of exponential size. Analysis of this class of problems points to the reason for such
provable intractability. This allows us to characterize an important parameter of the causal
graph affecting planning complexity and to extend the class of problems which are in np.
However, all these restricted problems are still np-complete.
Theorem 3 Plan generation for general strips planning problems with unary operators
and acyclic causal graph is provably intractable, i.e. it is harder than np.
This theorem follows from Theorem 5.4 in (Jonsson & Bäckström, 1998b), that shows
that plan generation for the 3S problem class is provably intractable. The point is that the
upper bound for MinPlanSize, presented in Eq. 5, can be exponential in the size of the input
in this case. First, we show by example that this upper bound can be achieved, then we
present some analysis of the reasons for this intractability.
The following example shows that an exponential upper bound can be achieved. It was
used in the proof of Theorem 5.4 in (Jonsson & Bäckström, 1998b), and was originally
presented in a different context by Bäckström and Nebel (1995). Consider a propositional
planning problem with |V| = n, where, for 1 ≤ i ≤ n, D(vi ) = {0, 1} and pred(vi ) =
{v1 , . . . vi−1 }. The operator set Λ consist of 2n operators {A1 , A01 , . . . An , A0n } where
pre(Ai )[j] =

post(A0i )[j]


=

0 if j = i
u otherwise


1
pre(A0i )[j] = post(Ai )[j] =
u

 0
0
1
prv(Ai )[j] = prv(Ai )[j] =

u
332

if j = i
otherwise
if j < i − 1
if j = i − 1
otherwise

Structure and Complexity in Planning with Unary Operators

It is easy to see that the causal graph of this problem forms a DAG (see Figure 7), and
an instance of this planning problem with the initial state h0, . . . , 0i and the goal state
h0, . . . , 0, 1i has a unique minimal solution of length 2n − 1 corresponding to a Hamilton
path in the state space.
PQRS
WVUT
V1

PQRS
/ WVUT
V2

'

...

4

PQRS
WVUT
Vn−1

&
PQRS
/ WVUT
Vn
7

Figure 7: Causal graph for the proof of Theorem 3
Now we show that this escalation in complexity can be “parametrized” by the form of
the causal graph.
Lemma 3 For any solvable problem instance Π with an acyclic causal graph over n variables, for any variable v, we have that:
MaxReq(vi ) ≤ 1 +

n
X

ρ(vi , vj )

j=i+1

where ρ(vi , vj ) denotes the total number of different, not necessary disjoint, paths from vi
to vj , where variables are ordered via a topological sort of the causal graph.
Proof: The proof is by induction on i. For i = n it is obvious that MaxReq(vn ) ≤ 1.
Now we assume that the lemma holds for any i > k, and prove it for i = k. Without loss
of generality, assume that succ(vk ) 6= ∅. Otherwise, we simply have that MaxReq(vk ) ≤ 1.
The proof is straightforward:
Eq. 1

MaxReq(vk )

≤

X

1 +

MaxReq(vik ) ≤

vik ∈succ(vk )
I.H.

≤

X

1 + |succ(vk )| +

vik ∈succ(vk )

=

1+

n
X

n
X

ρ(vik , vj ) =

j=ik +1

ρ(vk , vj )

j=k+1


Lemma 3 entails that the upper bound for MinPlanSize(Π) for a general planning problem
with unary operators and acyclic causal graph depends on the number of different paths
between the nodes in the causal graph. An immediate conclusion is that there is a significant
class of problems with an acyclic causal graph for which planning is in np. Let a DAG be
called max-δ-connected if the number of different directed paths between every two nodes
in this graph is bounded by δ.
333

Brafman & Domshlak

Theorem 4 Plan generation for strips planning problems with unary operators and maxδ-connected causal graph is np-complete if δ is polynomially bounded.
Proof: Membership in np is straightforward: If the variables of a given problem Π are
considered in a topological ordering induced by the causal graph, then from Lemma 3 follows
that, for any variable vi , MaxReq(vi ) ≤ δn. In turn, from this follows that MinPlanSize(Π) ≤
δn2 , and thus, if δ is polynomially bounded, then we can guess a minimal plan for Π that
could be verified in polynomial time.
The hardness follows from Theorem 2 that shows that even if the causal graph is max-1connected (directed-path singly connected), then plan existence (and thus plan generation)
is hard. 

5. Serializable Subgoals
A set of subgoals is defined to be serializable (Korf, 1987) if there exists an ordering among
the subgoals such that the subgoals can always be solved sequentially without ever violating
a previously solved subgoal in the order. Naturally, not all collections of subgoals are
serializable – sometimes it may be necessary to interleave plans for achieving different goals.
However, when a problem instance is serially decomposable, it is possible to design a set of
macro-operators with respect to which the subgoals are serializable (Korf, 1985).
A problem instance is serially decomposable if there exists some ordering of the state
variables for which the effect of each operator on each state variable depends only on that
state variable and previous state variables in the ordering. Unfortunately, Bylander (1992)
shows that determining serial decomposability of a problem is pspace-complete.
One major open problem put forth by Bylander in this context is: If a problem is
known to be serially decomposable, how difficult is it to determine whether a given instance
is solvable? As far as we know, the only work in this direction was done by Chalasani
et al. (1991), where the serial decomposability of the “general permutation problem” was
considered. In particular, they showed that this problem is in np, but it is unknown
whether it is np-hard. Recently, some complementary results for Bylander’s question were
presented Köehler and Hoffmann (2000). Our results shed more light on this question:
Any problem instance based on a unary operator domain whose causal graph is acyclic is
serially decomposable. Therefore, it can be concluded that finding a solution for serially
decomposable problems may require exponential time (i.e., the problem is in exptime).
However, Bylander’s question is about plan existence. In that case, Theorem 3 does not
apply, and we can only apply our np-hardness result (for directed-path singly-connected
graphs), since it addresses plan existence as well.
Weld (1999) hypothesized that: (1) If the underlying causal graph of the planning
problem is acyclic, then a serialization ordering on the subgoals of the problem is obvious;
(2) Serialized subgoals could be solved extremely quickly because no backtracking is required
between them. Although the first observation sounds intuitive, our results suggest that it
is rarely true. The acyclicity of the causal graph implies serializability, but in most of the
cases its structure does not provide us sufficient information about the actual serialization
ordering. Even when the causal graph is a directed tree one must think first before choosing
334

Structure and Complexity in Planning with Unary Operators

an ordering. Likewise, our results imply that when the causal graph does not form an
undirected tree determining a subgoal ordering is np-complete, and if the causal graph is
not directed-path singly connected, the problem is even more complex.
The second observation is not always true either. The problem is that it is important to
determine not only the serialization ordering over the subgoals, but also the exact strategies
for achieving them. As we showed, in certain cases, a problem with n serializable subgoals
requires an exponentially long solution. When the domain variables are not binary, the
situation is even worse – some of the corresponding complexity results can be derived from
the computational analysis of Domshlak and Dinitz (2001).

6. Connection with Related Work on Planning Complexity
The idea of analyzing and exploiting structural properties is not new to classical planning,
and in the last few years a number of important results have emerged. Generating plans
in the context of the strips representation language was shown by Bylander (1994) to
be pspace-complete. Despite this fact, the existence of many successful planning systems,
especially in recent years, demonstrates that planning is possible and practical for a wide list
of domains. Bylander argues that the large gap between the theoretical hardness of planning
and its practical success stems from the use of domain-dependent problem analysis and
algorithms. Consequently, various authors have explored the existence of some constrained
problem classes for which planning is easier.
In this section we shortly overview some of the major, previous results on complexity
of planning, and discuss their relationship to the results presented in this paper. For a
more detailed presentation of the previous results discussed below we refer the reader to
the original papers.
6.1 Local Syntactical Restrictions
In his seminal paper, Bylander (1994) presents a number of complexity results for propositional planning, analyzing different planning problems based on the type of formulas used,
the number and type (positive/negative) of operator pre- and postconditions, etc. The work
of Bylander is extended by some interesting, complementary results by Erol at al. (1995).
For example, Bylander shows that propositional planning in domains where each operator
is restricted to have positive preconditions and one postcondition only is tractable. Generally, extremely severe restrictions on operators are required to guarantee tractability, or
even membership in np. Note that Bylander (1994) and Erol et al. (1995) focuses on local
syntactical properties of operators, i.e., properties of single operators.
The only syntactic restriction that we pose on the planning problems in this paper is
the unarity of the operators. Determining plan existence for this, apparently easier class
of problems was shown by Bylander to be as hard as general propositional planning, i.e.
pspace-complete. Note that this result by itself does not entail our Theorem 3, since
planning problems with unary operators may induce causal graphs with cycles. Therefore,
none of our results is entailed by the results presented by Bylander (1994) and Erol et
al. (1995).
335

Brafman & Domshlak

6.2 Global Syntactical Restrictions
Bäckström and Klein (1991a, 1991b), and, subsequently, Bäckström and Nebel (1995),
consider other types of restrictions, but using a more refined model (the SAS formalism) in
which:
1. The state variables are multi-valued, and
2. Two types of preconditions are considered: prevail conditions, which are variable
values that are required prior to the execution of the operator and are not affected by
the operator, and preconditions, which are affected by the operator.
In general, four different restrictions were considered in these works:
(P) Post-uniqueness: For each effect there is at most one operator that achieves this effect.
In other words, desired effects determine operators to be used in a plan. Formally, a
problem instance is post-unique if and only if, for each vi ∈ V and x ∈ D(vi ), there is
at most one operator A ∈ Λ such that post(A)[i] = x.
(S) Single-valuedness: At most one value of each state variable appears in the prevail
conditions of the operators. For instance, if a certain operator requires the light
to be on (as a prevail condition), no other operator can use the prevail condition
that the light is off. Formally, a problem instance is single-valued iff there exist no
two operators A, A0 ∈ Λ and vi ∈ V such that prv(A)[i] 6= u, prv(A0 )[i] 6= u, and
prv(A)[i] 6= prv(A0 )[i].
(U) Unariness: Each operator affects only one state variable.
(B) Binariness: All state variables have exactly two possible values, i.e. all state variables
are propositional.
All these four properties are syntactical. However, the properties P and S differ from the
properties U and B by the fact that they have a global nature: Post-uniqueness and singlevaluedness restrict not the form of the operators, but a global property of the whole set of
operators. Bäckström and Nebel (1995) showed that US (unariness and single-valuedness)
is the extreme problem class for which plan generation is polynomial. 6
The problems that we analyzed in this paper belong to the problem class UB, by definition. As we already mentioned, even determining plan existence for this class of problems
is pspace-complete. Now consider the problem class PUB. Bäckström and Nebel (1995)
showed that: (i) PUB has instances with exponentially long minimal solutions, thus plan
generation for PUB is requires exponential time; (ii) existence of bounded length plans for
PUB is strongly np-hard; and (iii) the complexity of general plan existence for PUB is still
an open question. Informally it means that strengthening restrictions from UB to PUB
does not reduce the complexity significantly, at least from the practical point of view.
Proposition 1 Every UB problem instance with a tree causal graph is either post-unique,
or can be transformed into an equivalent post-unique problem instance in (low) polynomial
time. Thus, TreeUB ⊂ PUB.
6. For a thorough analysis of the complexity of SAS planning, we refer to Bäckström and Nebel (1995).

336

Structure and Complexity in Planning with Unary Operators

Proof: Consider a UB problem with a tree causal graph, and suppose that it is not postunique. It means that there exist a variable v ∈ V, with D(v) = {v 0 , v 00 }, such that there
exist two operators A1 , A2 ∈ Λv that change the value of v from v 0 to v 00 , and prv(A1 ) 6=
prv(A2 ).
From the assumption that the causal graph forms a tree it follows that |pred(v)| ≤ 1.
If pred(v) = ∅, then it is easy to see that the existence of such a pair of operators is
simply impossible. Therefore, let pred(v) = {w}, where D(w) = {w0 , w00 }. Without loss of
generality assume that prv(A1 )[w] = {w0 }, prv(A2 )[w] = {w00 }. Otherwise, if, for instance,
prv(A1 )[w] = u, then it is easy to see that A2 is a redundant operator.
Observe that in this case, prevail dependence of v on w is redundant: We can replace
the pair of operators A1 , A2 in Λ by a single operator A that changes the value of v from
v 0 to v 00 without any prevail condition. The replacement of A1 , A2 by A brings us to an
equivalent problem instance in which the operator set Λv is post-unique. This way we
continue to process iteratively all such ”problematic” variables v until we arrive at a postunique problem instance. 

Proposition 2 There are UB problem instances with a tree causal graph that are not singlevalued, thus TreeUB 6⊂ UBS.
Proof: The proof of Proposition 2 is straightforward: Consider a variable v ∈ V, D(v) =
{v 0 , v 00 }, such that succ(v) = {u, w}. It can be the case that any value change of u will be
prevailed by v 0 , while any value change of w will be prevailed by v 00 . Therefore, restricting
causal graphs even to trees does not entail single-valuedness.7 
Propositions 1 and 2 show that TreeUB is a polynomial subclass of PUB that is not
entailed by any tractability results of Bäckström and Nebel (1995).
Proposition 3 There are UB problem instances with a polytree causal graph that are neither single-valued, nor post-unique.
Proof: The proof is straightforward: Consider a planning problem with a polytree causal
graph, such that there exist a variable v ∈ V with pred(v) = {u, w}, and the following
operator set Λv :
pre
v0
v0
v 00
v 00

post
v 00
v 00
v0
v0

prv
{u0 , w00 }
{u00 , w0 }
{u0 , w0 }
{u00 , w00 }

Clearly, any problem instance with such Λv ⊆ Λ is neither single-valued, nor postunique, since (i) there is more than one operator achieving any value of v, and (ii) both
values of u (and both values of w) appear in prevail conditions of the operators in Λv . Note
7. Using the simple construction technique from the proof of Proposition 1 it can be shown that restricting
causal graphs to directed chains only does entails single-valuedness. However, this case is too restrictive.

337

Brafman & Domshlak

that the maximal indegree of such a polytree can be minimal, i.e. equal to 2. Thus, the
proposition is valid for any polytree that is not a tree. 
From Proposition 3 it follows that Theorems 1 and 4 introduce new polynomial and
np-easy subclasses of the UB problem class, respectively.
6.3 Structural Restrictions in Propositional Planning
Jonsson and Bäckström (1998b) present the 3S class of planning problems. This class is most
closely related to the problems examined in this paper, since it defines a special subclass of
problems with binary variables, unary operators and acyclic causal graphs. The 3S problem
class is defined by posing some additional, relatively severe, restrictions on the problem’s
operator set: Each variable v in a 3S problem instance is required to be either (i) static,
i.e., unchangeable; (ii) symmetrically reversible, i.e., for each operator A affecting v, there
exist an operator A0 affecting v with the same prevail conditions and the opposite effect;
or (iii) splitting. For the formal definition of the splitting property we refer to Jonsson
and Bäckström (1998b). Informally, if a binary variable v is splitting then the problem
instance can be split into three, well-defined subproblems that can be solved independently.
For this class of planning problems it was shown that plan existence can be determined in
polynomial time, while plan generation is provably intractable, since there are instances of
3S with exponentially long minimal solutions. In particular, the problem instance that we
used in the proof of Theorem 3 is in 3S.
The complexity analysis by Jnonsson and Bäckström (1998b) is somewhat unique in
the research on complexity of propositional planning, since, to the best of our knowledge,
this was the only attempt to exploit not only syntactical restrictions on the operator set,
but also some structural restrictions on interaction between the variables. Our analysis
can be seen as continuing this direction by looking on the structural restrictions only. We
believe that eliminating the marginal effect of the problem structure on the problem’s (potential) hardness will allow us to understand better the connection between the component
interactions topology, and the potential complexity of the problem.
6.4 Structural Restrictions in Multi-valued Formalisms
When the variables are no longer propositional, some additional properties of the problems
can be identified, and, possibly, exploited. In particular, additional internal structures of
the problem can be analysed.
Jonsson and Bäckström (1998a) analyze different properties of a multi-valued problem
structure, which is called the domain transition graph. Such a structure is defined for each
state variable of the problem, and it describes possible transitions between different values
of this variable. The domain transition graph of a state variable v is a directed labeled
graph Gv = (V, E), where V is associated with the v’s set of possible values, D(v), and
(x, A, y) ∈ E if and only if the operator A can be applied at some state in which v = x, and
its application results in a state in which v = y holds.
Jonsson and Bäckström identify sets of structural restrictions on domain transition
graphs which make planning instances tractable. Roughly, the properties are the following:
(1) The problem domain is interference-safe, i.e., each operator is either unary or irreplace338

Structure and Complexity in Planning with Unary Operators

able with respect to every variable it affects. An operator A is irreplaceable with respect
to a variable v if the removal of all edges from Gv that stem from A disconnects some
weakly connected component of Gv . (2) For every variable v, the graph Gv , restricted to
the set of values that appear in the prevail conditions of some operators, is acyclic. (3) Any
sequence of operators annotating a path from x to y in the domain transition graph of v, is
stronger than all shortest such sequences connecting x and y. Here, a sequence A1 , . . . , Ak
is stronger than A01 , . . . , A0l if there is a subsequence Ai1 , . . . , Ail of A1 , . . . , Ak such that for
every 1 ≤ j ≤ l, the prevail conditions of A0j are a subset of the prevail conditions of Aij .
Jonsson and Bäckström present a map of the computational complexity of problems with
different restrictions, displaying the frontier between the tractable and intractable cases.
Each domain transition graph combines and structures the influence of many operators
on a particular variable. Therefore, they provide us a more global picture than the operator
set alone. Hence, in spite of the fact that domain transition graphs do not capture the relationship between different variables, they do allow us to express some structural properties
that address interactions between the variables (e.g., see property (2) above).
Observe that domain transition graphs are not very informative in the case of propositional planning, since they are only distinguish between the variables that can be changed
only in one direction and the variables that can be changed in both directions. Although
this property of domain transition graphs allows to distinguish between the polynomial
planning with only positive postconditions, and the pspace-complete planning with both
positive and negative postconditions (Bylander, 1994), it seems to be not very helpful in
further hierarchical refinement of the propositional planning complexity. On the other hand,
there is no a priori reason why the causal graphs will not be informative in the multi-valued
case. Exploiting the properties of causal graphs, together with the properties of domain
transition graphs, seems to be a natural direction to extend the work presented in this paper.
The recent work of Domshlak and Dinitz (2001) on multi-entity off-line coordination can be
seen as investigating connections between the structure of the causal graph, together with
the properties of the domain transition graphs, and the complexity of the corresponding
problems in case of multi-valued domains. To the best of our knowledge, this is the only
work that was done with respect to such a “mixed” structural analysis, and a lot of work
remains to be done. For instance, combining various properties of the domain transition
graphs studied by Jonsson and Bäckström (1998a), with the properties of the problem’s
causal graph is a direction for the further research.

7. Summary and Future Work
We have shown that the form of the causal graph for strips planning problems with unary
operators is an important factor in determining the computational complexity of plan generation. In particular, we have shown that a polynomial time algorithm exists for any
problem with a polytree causal graph and the node indegree bounded by a constant. More
generally, this result shows that planning with polytree causal graphs is at most (what is
often referred to in the Bayes nets literature as) locally exponential, i.e., it is exponential in the maximal number of parents of a node. Note that in hardware-control planning
problems the maximal node indegree is expected to be small, since prevail dependencies
between the variables reflect the direct interconnections between the corresponding hard339

Brafman & Domshlak

ware components. Likewise we have shown that for a problem with directed-path singly
connected causal graph the maximal plan length is a low order polynomial, but the problem
is np-complete. More generally, we have shown a relation between the number of paths between variables in the causal graph and the computational complexity of the corresponding
planning problem. Finally we have presented the impact of our results on the question of
complexity of planning problems with serializable subgoals, and connected our work with
previous results on planning complexity.
Our work leaves a number of open questions with respect to purely syntactical, and a
mixture of both structural and syntactical restrictions on the planning problems with unary
operators. In the former case, one of the most important directions is a further analysis of
causal graphs with constantly bounded node indegree. It turns out that complexity analysis for this class of problems will be very helpful in understanding various computational
properties of CP-nets (Boutilier et al., 1999). Although here we provided a partial answer
for this question, the general picture of the worst-case complexity for this class of problems
is not clear. For example, if the indegree of the causal graph is known to be bounded by
2, and this is the only structural property of the causal graph, it is even not clear whether
this problem subclass is in np.
In the latter case, various syntactical restrictions can be analysed together with the form
of the causal graph. For example, one may be interested in the computational properties
of the problems with acyclic causal graphs, and the restriction that every operator has at
most α prevail conditions, where α is bounded by a constant. This, as well as many other
related questions with respect to various special cases of planning with unary operators are
of interest for the future work.

Acknowledgments
A preliminary version of this paper appeared in the Sixth International Conference on Artificial Intelligence Planning and Scheduling, April, 2002. We would like to thank the three
anonymous reviewers for their extremely helpful comments. Ronen Brafman is supported
in part by the Paul Ivanier Center for Robotics Research and Production Management.

340

Structure and Complexity in Planning with Unary Operators

Appendix A. A Short Review of POP, Causal Links and Threats
We represent a plan as a tuple: hA, O, Li, where A is a set of unary operators, O is a set of
ordering constraints over A, and L is a set of causal links. For example, if A = {A1 , A2 , A3 }
then O might be the set {A1 < A3 , A2 < A3 }. These constraints specify a plan in which
A3 is necessarily the last operator, but do not commit to a particular order on A1 and A2 .
Naturally, the set of ordering constraints must be consistent, i.e., there must exist some
ϑ
total order satisfying them. A causal link has the form Ap →i Ac , where Ap and Ac are
operators and ϑi is a possible value for some propositional variable vi . It denotes the fact
that Ap produces (i.e., has the postcondition) vi = ϑi which is consumed by Ac (i.e., used to
satisfy a pre- or prevail-condition of Ac ). Causal links help us detect whether one operator
At interferes with the work done to enable the execution of some other operator Ac . In that
case, At is said to constitute a threat to one of A0c s causal links. Formally, suppose that
ϑ

hA, O, Li is a plan, and Ap →i Ac is a causal link in L. Let At be a different operator in A.
ϑ

We say that At threatens Ap →i Ac when the following two criteria are satisfied:
• O ∪ {Ap < At < Ac } is consistent, and
• At has ¬ϑi as an effect.
When a partial order plan P contains threats, it is possible that the goal will not be
achieved by some (or all) of the total order plans consistent with P ’s ordering constraints.
To prevent this, the plan generator must check for threats and remove them by adding one
of two possible ordering constraints: At < Ap (demotion) or Ac < At (promotion).
A tutorial introduction to POP algorithms can be found in (Weld, 1994). POP is a
regressive framework for partial order planning that starts with the null plan and continuously updates it by inserting new actions and removing threats. This process continues until
the precondition and the prevail conditions of every operator in the plan are supported by
some causal link and no threats exist. The first argument to POP is a plan and the second
argument is an agenda of goals that need to be supported by causal links. Each item on the
agenda is represented by a pair hϑi , Ai where ϑi is either pre- or prevail condition of a plan
action A. The last argument to POP is the whole collection of the operators defined by
the planning instance. The initial call to POP contains the null plan, a specially initialized
agenda, and the operator set Λ of the given problem.
In this paper we introduce a specialized, deterministic POP algorithm that starts the
planning process using a variant of the null plan which encodes the planning problem. In
particular, if the planning instance has v1∗ , . . . , vn∗ as the goal then the corresponding null
plan has exactly 2n dummy unary operators, A = {A01 , . . . , A0n , A∗1 , . . . , A∗n }, n ordering
constraints, O = {{A01 < A∗1 }, . . . , {A0n < A∗n }}, and no causal links, L = {}. For every
vi ∈ V, A0i is the corresponding ”start” operator - it has neither pre- nor prevail conditions,
and its effect specifies the value of the variable vi in the initial state, which is denoted by
vi0 . Similarly, A∗i is the ”end” operator - it has no effect, no prevail conditions, but its
precondition is set to the value of vi in the goal state, which in turn is denoted by vi∗ .8
8. Actually, the goal state may not specify the values of all the variables, thus the number of the end
operators can be less than n. However, for clarity of presentation, we leave this definition of the null
plan.

341

Brafman & Domshlak

Our description of the null plan is modified from that of Weld (1994) to better suit the
restriction to unary operators. Likewise, the initial call to our POP algorithm contains the
agenda {hv1∗ , A∗1 i, . . . , hvn∗ , A∗n i}.

342

Structure and Complexity in Planning with Unary Operators

Appendix B. Proofs and Auxiliary Results
Lemma 2 If forward-check was successful then pop-pcg will return a valid plan.
Proof:

The lemma will follow from the following claims:

1. For every agenda item, there exists an operator that has it as an effect.
2. There are no threats in the output of pop-pcg.
3. The ordering constraints in O are consistent.
4. The agenda will be empty after a polynomial number of steps.
(1+4) The first claim follows from the success of the forward-check procedure.
forward-check implies that for any νij ∈ σ(vi ) there is an operator instance A(νij ) ∈
Γi ∪ {A0i }. Therefore, if νij ∈ σ(vi ) then the existence of an appropriate Aadd is promised.
Assume to the contrary that νij 6∈ σ(vi ) and, without loss of generality, assume that this
is the first iteration that it happens. If so, then for each variable u ∈ succ(vi ), there is no
edge labeled by νij in the graph G0 (u), which is created by the forward-check. From this
follows that Aneed cannot have νij as a prevail condition, and thus Aneed has to affect the
variable vi itself. In this case either Aneed = A(νij+1 ) or Aneed = A∗i .
Consider the former case: If Aneed = A(νij+1 ) then νij+1 was previously selected from the
agenda. By our assumption it means that νij+1 ∈ σ(vi ), and it contradicts our assumption
that νij 6∈ σ(vi ) since νij is a predecessor of νij+1 on σ(vi ).
Now consider the last option that Aneed = A∗i . If Aadd = A(νij ) then the goal value of
the variable vi is consistent with νij , and A(νij−1 ) ∈ A (see Step 3(b)ii). If A(νij−1 ) ∈ A
then νij−1 was previously selected from the agenda. By our assumption it means that
νij−1 ∈ σ(vi ). However, it contradicts our assumption that νij 6∈ σ(vi ) since σ(vi ), by
definition, terminates with a node consistent with the goal value of vi .
In addition, since we have shown that the only operators added into A are those from
Γi ∪ {A0i , A∗i }, for 1 ≤ i ≤ n, the agenda will be empty after O(n2 ) steps.
ϑ

(2) Suppose that some operator At threatens Ap →i Ac , i.e.,
• O ∪ {Ap < At < Ac } is consistent, and
• At has ¬ϑi as an effect.
For a given variable vi , pop-pcg forces the operators affecting vi as follows (Step 4):
A0i ≡ A(νi1 ) < A(νi2 ) < . . . < A(νix ),

x ≤ FMaxReq(vi )

(4)

Thus Ac can only be an operator with ϑi as a prevail condition. Note that Ap and At
affect the same variable vi . In (1) we already showed that ϑi = νij ∈ σ(vi ). In that
case At = A(νil ), l > j. However, if νij is a prevail condition of Ac then the ordering
constraint {Ac < A(νij+1 )} was added to O at Step 6. If so then from Eq. 4, it follows that
343

Brafman & Domshlak

{A(νil ) < A(νij+1 ), A(νij+1 ) < A(νil )}, l > j, will be implied by O ∪ {Ap < At < Ac }, and it
contradicts with the assumption that O ∪ {Ap < At < Ac } is consistent.
(3) The ordering constraints are consistent if no two operators Ai and Aj are such that
O implies {{Ai < Aj }, {Aj < Ai }}. In what follows, Ai will be used to denote an arbitrary
operator affecting variable vi .
First note that each ordering constraint added in Step 4 or Step 6 is either between
operators affecting the same variable or between operators affecting a variable and its child
(with respect to the causal graph). In particular, if Ai < Aj was added in Step 4 then either
vi = vj or vi ∈ pred(vj ), whereas if Ai < Aj was added in Step 6 then vj ∈ pred(vi ).
Assume, to the contrary that O implies Ai < Aj and Aj < Ai . From the argument
above, we know that there is a, possibly empty, path between vi and vj in the undirected
graph induced by the causal graph. By our structural assumption, we know that such an
undirected path between vi and vj is unique, and thus the situation is as follows: We have
two chains of operators
α : Ai = A1i0 < . . . < Axi00 < A1i1 < . . . < Axi11 < . . . . . . < A1im < . . . < Aximm = Aj
β : Ai = Ā1i0 > . . . > Āyi00 > Ā1i1 > . . . > Āyi11 > . . . . . . > Ā1im > . . . > Āyimm = Aj

such that, for 0 ≤ k ≤ m, both xk ≥ 1 and yk ≥ 1. The corresponding unique undirected
path between vi and vj is:
vi = vi0 · vi1 · . . . · vim−1 · vim = vj
Without loss of generality, the internal elements of α and β are disjoint. Otherwise, if there
is an operator B that belongs to the internal parts of both α and β then we can reduce
these chains and deduce Ai < B and Ai > B.
The proof of consistency is as follows:
(a) We prove that if such α and β exist then at least one of them should have at least
one internal element.
(b) We show some useful property of α and β, that is exploited in (c).
(c) We show that for 0 ≤ k ≤ m, Axikk and Āyikk are different except when x0 = y0 = 1.
Note that (a) together with (c) contradicts our assumption that Aximm = Āyimm .
(a) Assume, to the contrary, that both α and β do not contain any internal elements.
If so, then the algorithm actually adds to O ordering constraints Ai < Aj and Aj < Ai .
If vi and vj are the same variable then Ai < Aj can only stem from Step 4 and only
because Ai has the precondition of Aj as its effect. However, by definition of forwardcheck, Aj can not have the same role w.r.t. Ai and thus it is impossible that Aj < Ai was
added to O. Alternatively, if vi is a parent of vj then Ai < Aj can stem only from Step 4
because Ai has the prevail condition of Aj as its effect. Suppose that Ai = A(bji ) and thus
bji ∈ prv(Aj ). In turn, Aj < Ai can be added only in Step 6 because Aj has the precondition
of Ai as the prevail condition. But if bji ∈ prv(Aj ) then Ai = A(wij ), and this contradicts
344

Structure and Complexity in Planning with Unary Operators

our assumption that Ai = A(bji ). Alternatively, we can assume that Ai = A(wij ) but this
situation is completely symmetric, and thus the result will be the same. Hence we proved
that either α or β have to contain at least one internal element. In particular it means
that the next to last elements of α and β are different and this fact is exploited later in the
proof.
(b) Consider subchains of α that consist of operators affecting only one particular variable. For each such a subchain, i.e. for 0 ≤ k ≤ m, for 1 ≤ j ≤ xk − 1, the ordering
j
j+1
constraint Ajik < Aj+1
ik can only stem from Step 4 because Aik has the precondition of Aik
as its effect. Thus, post(Ajik ) = pre(Aj+1
ik ). Similarly, for the subchains of β, for 0 ≤ k ≤ m
j
and for 2 ≤ j ≤ yk , post(Āik ) = pre(Āj−1
ik ). In what follows we denote this property of α
and β by local monotonicity.
(c) First suppose that either x0 > 1 or y0 > 1, or both. Consider the following sequence:
γ : Āyi00 < Āyi00 −1 < . . . < Ā1i0 = A1i0 < ... < Axi00
From the local monotonicity, the construction of forward-check, and the fact that |γ| ≥ 2
0
it follows that post(Āyi0 ) appears before post(Axi00 ) on the maximal sequence σvi0 . Continuing
1

with the next variable vi1 we claim that post(Āyi1 ) has to appear before post(Axi11 ) on σvi1 .
(i) If vi0 is a parent of vi1 then Axi00 < A1i1 can only stem from Step 4 because Axi00 has
the prevail condition of A1i1 as its effect. In turn, Āyi00 > Ā1i1 can only stem from Step 6
because the prevail condition of Ā1i1 is the precondition of Āyi00 . From the relation between
Axi00 and Āyi00 , and the construction of G0e (vi1 ) in forward-check, it follows that post(Ā1i1 )
appears before post(A1i1 ) on σ(vi1 ). Subsequently, from the local monotonicity it follows
that post(Āyi11 ) appears before post(Axi11 ) on σ(vi1 ).
(ii) Similarly, if vi1 is a parent of vi0 then Āyi00 > Ā1i1 can only stem from Step 4 because
Ā1i1 has the prevail condition of Āyi00 as its effect, and Axi00 < A1i1 can only stem from Step 6
because the prevail condition of Axi00 is the precondition of A1i1 . From the relation between
Axi00 and Āyi00 , and the construction of G0e (vi1 ) in forward-check, it follows that post(Ā1i1 )
appears before post(A1i1 ) on σ(vi1 ), and again, from the local monotonicity it follows that
post(Āyi11 ) appears before post(Axi11 ) on σ(vi1 ).
Alternatively, if x0 = y0 = 1 then Axi00 = Āyi00 = Ai . From (a) immediately follows
that A1i1 6= Ā1i1 , and an analysis similar to the above shows that post(Āyi11 ) appears before
post(Axi11 ) on σ(vi1 ).
Having established that post(Āyi11 ) appears before post(Axi11 ) on σ(vi1 ), it is apparent
that an inductive argument will allow us to show that for all k > 0 we have that post(Āyikk )
appears before post(Axikk ) on σ(vik ). Note that in particular it means that the operators
Axikk and Āyikk are different, and this contradicts our assumption that Aximm = Āyimm . 

345

Brafman & Domshlak

Theorem 2
Plan existence for strips planning problems with unary operators and
directed-path singly connected causal graph is np-complete.
Proof: First we show the membership in np. Let MinPlanSize(Π) denote the size of the
minimal plan for a problem instance Π. Using the MaxReq property of the state variables,
the following upper bound for MinPlanSize(Π) is straightforward from the Lemma 1:
X
MinPlanSize(Π) ≤
MaxReq(v) ≤ n2
(5)
v∈V

Thus, if we guess a minimal solution for a given solvable problem, we can verify it in low
polynomial time.
The proof of the hardness is by polynomial reduction from 3-sat to the corresponding
propositional plan generation problem with a directed-path singly connected causal graph.
3-sat is the problem of finding a satisfying assignment for a propositional formula in conjunctive normal form in which each conjunct (clause) has at most three literals.
Let F = C1 ∧. . .∧Cn be a propositional formula belonging to 3-SAT, and let X1 , . . . , Xm
be the variables used in F. An equivalent propositional planning problem with a directedpath singly connected causal graph can be constructed as follows: The variable set is V =
{X1 , X̄1 , . . . , Xm , X̄m } ∪ {C1 , . . . , Cn }. The variables Xi and X̄i have no predecessors in
the causal graph, thus pred(Xi ) = pred(X̄i ) = {∅}. In turn, for 1 ≤ i ≤ n, pred(Ci ) =
{Xi1 , X̄i1 , Xi2 , X̄i2 , Xi3 , X̄i3 }, where Xi1 , Xi2 , and Xi3 are the variables that participate in
the ith clause of F. Finally, Init and Goal consist of false and true assignments to all
variables in V, respectively.
Let every operator A ∈ Λ be presented as a three-tuple h{pre}, {post}, {prv}i of pre, post,
and prevail conditions respectively. Then, the corresponding operator set Λ is specified as
follows:
ΛXi

={

h{f }, {t}, {}i }

ΛX̄i

={

h{f }, {t}, {}i }

Λ Ci

={

h{f }, {t}, {α1i }i, h{f }, {t}, {α2i }i, h{f }, {t}, {α3i }i

	

where αji (1 ≤ j ≤ 3) corresponds to the truth assignment on the variable Xij that satisfies
the ith clause of F. Let Ci = (X1 ∨ X̄2 ∨ X8 ). Then α1i = {X1 = t, X̄1 = f }, α2i = {X2 =
f, X̄2 = t}, and α3i = {X8 = t, X̄8 = f }.
To illustrate the proposed reduction consider the following example. Formula F consist
of 3 clauses: (x1 ∨ x¯2 ∨ x3 ) ∧ (x1 ∨ x¯2 ∨ x4 ) ∧ (x2 ∨ x¯3 ∨ x¯4 ). The causal graph of the
corresponding planning problem is as follows:
@ABC
GFED
@ABC
@ABC
GFED
GFED
@ABC
@ABC
@ABC
GFED
@ABC
GFED
x2 F GFED
x3
x1 F GFED
x4
x¯
x¯1
x¯3
::
- F  2 :
-- FF
;
{
H

::
-- FFF
- F  :
{; {; H x8 x8 x8
:

;
{
:
F
F
H

:
-FF
{;
-
A
x8 x8
:
F
FF :::  A
-{; {; x8 x8 H H
F
FF  : 
:
A

;
{
8
x

F
-H
F :
A
F : {; {; {; x8 x8 x8
H A A
 FFFF ::: 
-:
F
8
x
H

;
{
x8
  FFF ::
-H A A

{; x8 {; x8 F x8 F: :
FF:: - 
H

;
{
--  
8
x
F : H A A
FF::- 
{;
F#    { x {; x8 x8
F#     
   { x
@ABC
GFED
@ABC
GFED
@ABC
GFED
C1
C2
C3
346

@ABC
GFED
x¯4
x8 8x A
A
A

Structure and Complexity in Planning with Unary Operators

This is a propositional planning problem with single-effect operators and an underlying
directed-path singly connected causal graph. Clearly, Goal is reachable (Π is solvable) if and
only if a satisfying assignment for F can be found. Thus, plan existence for the propositional
planning problems with directed-path singly connected causal graphs is np-complete. 

Lemma 4 Given k ordered sequences σ1 , · · · , σk of n elements each, the number T [k] of
different merges of σ1 , · · · , σk , preserving the orderings induced by σ1 , · · · , σk on their elements, is given by:


k−1
n 
YX
n − 1 ni + 1
T [k] =
(6)
j−1
j
i=1 j=1

Proof: Considering the merge operation of such k sequences as iterative merge of σi ,
2 ≤ i ≤ k, with the already merged sequences σ1 , . . . , σi−1 , it is easy to see that T (k) can
be expressed as:
(
T [k − 1] · S [n(k − 1), n] , k > 1
T [k] =
(7)
1,
k=1
where S[x, y] stands for the number of different, order preserving merges of two ordered
sequences of sizes x and y (without loss of generality, we assume that x ≥ y).
We consider the process of merging two ordered sequences σ and σ 0 , |σ| ≥ |σ 0 |, as:
(i) partition of σ 0 into j sub-sequences,
(ii) partition of σ into l sub-sequences, where j − 1 ≤ l ≤ j + 1, and
(iii) interleaving and order preserving concatenation of the sub-sequences of σ and σ 0 .
First, observe that σ 0 can be partitioned into 1 ≤ j ≤ |σ 0 | sub-sequences. Second, for
0 |−1
any j, the numbers of different partitions corresponding to steps (i) and (ii) are |σj−1
and

|σ|+1
, respectively. Finally, given a pair of such partitions of σ and σ 0 , there exist exactly
j
one possible interleaving and order preserving concatenation as in step (iii). Therefore, we
have:


y 
X
y−1 x+1
S(x, y) =
(8)
j−1
j
j=1

and combining Eq. 7 with Eq. 8, we arrive to Eq. 6. 

347

Brafman & Domshlak

References
Bäckström, C., & Klein, I. (1991a). Parallel non-binary planning in polynomial time. In
Proceedings of Twelfth International Joint Conference on Artificial Intelligence, pp.
268–273, Sydney, Australia. Morgan Kaufmann Publishers.
Bäckström, C., & Klein, I. (1991b). Planning in polynomial time: The SAS-PUBS class.
Computational Intelligence, 7 (3), 181–197.
Bäckström, C., & Nebel, B. (1995). Complexity results for SAS+ planning. Computational
Intelligence, 11 (4), 625–655.
Boutilier, C., Brafman, R., Hoos, H., & Poole, D. (1999). Reasoning with conditional ceteris
paribus preference statements. In Proceedings of the Fifteenth Annual Conference on
Uncertainty in Artificial Intelligence, pp. 71–80. Morgan Kaufmann Publishers.
Bylander, T. (1992). Complexity results for serial decomposability. In Proceedings of the
Tenth National Conference on Artificial Intelligence, pp. 729–734, San Jose, CL. AAAI
Press.
Bylander, T. (1994). The computational complexity of propositional STRIPS planning.
Artificial Intelligence, 69 (1-2), 165–204.
Chalasani, P., Etzioni, O., & Mount, J. (1991). Integrating efficient model-learning and
problem-solving algorithms in permutation environments. In Proceedings of the Second
International Conference on Principles of Knowledge Representation and Reasoning,
pp. 89–98, Cambridge, MA. Morgan Kaufmann Publishers.
Chapman, D. (1987). Planning for conjunctive goals. Artificial Intelligence, 32 (3), 333–377.
Domshlak, C., & Dinitz, Y. (2001). Multi-agent off-line coordination: Structure and complexity. In Proceedings of Sixth European Conference on Planning, Toledo, Spain.
Domshlak, C., & Shimony, S. E. (2003). Efficient probabilistic reasoning in Bayes nets
with mutual exclusion and context specific independence. In Proceedings of the Sixteenth International FLAIRS Conference, Special Track on Uncertain Reasoning, St.
Augustine, FL. AAAI Press. to appear.
Erol, K., Nau, D. S., & Subrahmanian, V. S. (1995). Complexity, decidability and undecidability results for domain-independent planning. Artificial Intelligence, Special Issue
on Planning, 76 (1–2), 75–88.
Etzioni, O. (1993). Acquiring search-control knowledge via static analysis. Artificial Intelligence, 62 (2), 255–301.
Jonsson, P., & Bäckström, C. (1998a). State-variable planning under structural restrictions:
Algorithms and complexity. Artificial Intelligence, 100 (1–2), 125–176.
Jonsson, P., & Bäckström, C. (1998b). Tractable plan existence does not imply tractable
plan generation. Annals of Mathematics and Artificial Intelligence, 22 (3-4), 281–296.
Kambhampati, S. (1995). Admissible pruning strategies based on plan minimality for planspace planning. In Proceedings of the Fourteenth International Joint Conference on
Artificial Intelligence, pp. 1627–1635, Montreal, Canada.
348

Structure and Complexity in Planning with Unary Operators

Knoblock, C. (1994). Automatically generating abstractions for planning. Artificial Intelligence, 68 (2), 243–302.
Köehler, J., & Hoffmann, J. (2000). On reasonable and forced goal orderings and their use
in an agenda-driven planning algorithm. Journal of Artificial Intelligence Research,
12, 338–386.
Korf, R. (1985). Macro-operators: A weak method for learning. Artificial Intelligence, 26 (1),
35–77.
Korf, R. (1987). Planning as search: A quantitative approach. Artificial Intelligence, 33 (1),
65–88.
Pell, B., Bernard, D., Chien, S., Gat, E., Muscettola, N., Nayak, P., Wagner, M., & Williams,
B. (1997). An autonomous spacecraft agent prototype. In Proceedings of the First
International Conference on Autonomous Agents, pp. 253–261, Marina del Rey, CL.
ACM Press.
Penberthy, J. S., & Weld, D. S. (1992). UCPOP: A sound, complete, partial order planner
for ADL. In Proceedings of Third International Conference on Principles of Knowledge Representation and Reasoning, pp. 103–114, Cambridge, MA. Morgan Kaufmann
Publishers.
Shimony, S. E., & Domshlak, C. (2002). Complexity of probabilistic reasoning in (directedpath) singly connected (not polytree!) Bayes networks. submitted for publication.
Smith, D., & Peot, M. (1993). Postponing threats in partial-order planning. In Proceedings of
the Eleventh National Conference on Artificial Intelligence, pp. 500–506, Washington,
D.C. AAAI Press.
Weld, D. S. (1994). An introduction to least commitment planning. AI Magazine, 15 (4),
27–61.
Weld, D. S. (1999). Recent advances in AI planning. AI Magazine, 20 (2), 93–123.
Wiest, J. D., & Levy, F. K. (1969). A Management Guide to PERT/CPM. Prentice Hall.
Williams, B., & Nayak, P. (1996). A model-based approach to reactive self-configuring systems. In Proceedings of the Thirteenth National Conference on Artificial Intelligence,
pp. 971–977, Portland, OR. AAAI Press.
Williams, B., & Nayak, P. (1997). A reactive planner for a model-based executive. In
Proceedings of the Fifteenth International Joint Conference on Artificial Intelligence,
pp. 1178–1185, Nagoya, Japan.

349

Journal of Artificial Intelligence Research 18 (2003) 83-116

Submitted 07/02; published 1/03

Learning to Order BDD Variables in Verification
Orna Grumberg
Shlomi Livne
Shaul Markovitch

orna@cs.technion.ac.il
slivne@cs.technion.ac.il
shaulm@cs.technion.ac.il

Computer Science Department
Technion - Israel Institute of Technology
Haifa 32000, Israel

Abstract
The size and complexity of software and hardware systems have significantly increased
in the past years. As a result, it is harder to guarantee their correct behavior. One
of the most successful methods for automated verification of finite-state systems is model
checking. Most of the current model-checking systems use binary decision diagrams (BDDs)
for the representation of the tested model and in the verification process of its properties.
Generally, BDDs allow a canonical compact representation of a boolean function (given an
order of its variables). The more compact the BDD is, the better performance one gets
from the verifier. However, finding an optimal order for a BDD is an NP-complete problem.
Therefore, several heuristic methods based on expert knowledge have been developed for
variable ordering.
We propose an alternative approach in which the variable ordering algorithm gains
“ordering experience” from training models and uses the learned knowledge for finding
good orders. Our methodology is based on offline learning of pair precedence classifiers
from training models, that is, learning which variable pair permutation is more likely to
lead to a good order. For each training model, a number of training sequences are evaluated.
Every training model variable pair permutation is then tagged based on its performance on
the evaluated orders. The tagged permutations are then passed through a feature extractor
and are given as examples to a classifier creation algorithm. Given a model for which an
order is requested, the ordering algorithm consults each precedence classifier and constructs
a pair precedence table which is used to create the order.
Our algorithm was integrated with SMV, which is one of the most widely used verification systems. Preliminary empirical evaluation of our methodology, using real benchmark
models, shows performance that is better than random ordering and is competitive with
existing algorithms that use expert knowledge. We believe that in sub-domains of models
(alu, caches, etc.) our system will prove even more valuable. This is because it features the
ability to learn sub-domain knowledge, something that no other ordering algorithm does.

1. Introduction
The size and complexity of software and hardware systems have significantly increased in
the past years. As a result, it is harder to guarantee their correct behavior. Thus, formal
methods, preferably computerized, are needed for this task.
One of the most successful methods for automated verification of finite-state systems is
temporal logic model checking (Clarke, Emerson, & Sistla, 1986; Queille & Sifakis, 1981).
Temporal logics are suitable formalisms for describing the behavior of a program over time.
A model checking procedure receives a finite-state model of the system and a specification
c
2003
AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Grumberg, Livne, & Markovitch

written as a temporal logic formula. It returns “yes” if the model satisfies the formula
(meaning that the system behaves according to the specification). Otherwise, it returns
“no”, along with a counter example that demonstrates a bad behavior.
Model checking has been very successful in finding subtle errors in various systems.
It is currently recognized by the hardware industry as an important component of the
development phase of new designs. However, model checking procedures often suffer from
high space requirements, needed for holding the transition relation and the intermediate
results.
One of the most promising solutions to this problem is the use of binary decision diagrams (BDDs) (Akers, 1978; Bryant, 1986) as the basic data structure in model checking.
BDDs are canonical representations of boolean functions and are often very concise in size.
Their conciseness also yields efficiency in computation time. Since it is straightforward to
represent the transition relation and the intermediate results as boolean functions, BDDs
are particularly suitable for model checking. Today, existing industrial BDD-based verifiers, such as IBM’s RuleBase (Beer, Ben-David, Eisner, & Landver, 1996) and Motorola’s
Verdict (Kaufmann & Pixley, 1997) are used by many companies in their development
infrastructure.
The size of a BDD for a given function is sensitive to the ordering of the variables in
the BDD. However, finding an optimal ordering, which yields a smallest BDD for a given
function, is an NP-complete problem (Bollig & Wegener, 1996). Therefore, several heuristic
algorithms based on expert knowledge have been developed for variable ordering in the
hope of reducing the BDD size. Unfortunately, and in spite of the resources invested, these
algorithms do not produce good enough variable orders. The reason for this may be that
only general rules are used and no domain-specific knowledge is exploited.
The goal of this research is to develop learning techniques for acquiring and using
domain-specific knowledge for variable ordering. We assume the availability of one or more
training models. The training models are used for off-line acquisition of ordering experience
which can be used for ordering variables of a previously unseen model.
We first present a method for converting the ordering learning task into a concept
learning problem. The concept is the set of all ordered variable pairs that are in the “right”
order. The examples are ordered pairs of variables of a given training model. We show
a statistical method for tagging examples based on evaluated training orders and present
a set of variable-pair features. The result is a standard concept learning problem. We
apply decision tree learning to generate a decision tree for each training model. When used
for an unseen model, we combine the trees and generate a partial order which is used for
generating the required order. We also present an extension of the algorithm which learns
context-based precedence relations.
Our algorithm was integrated with SMV (McMillan, 1993), which is the backbone of
many verification systems. Empirical evaluation of our methodology, using real benchmark
models of hardware designs, shows performance that is much better than random ordering
and is competitive with existing algorithms that use expert knowledge.
Section 2 contains background on model checking. Section 3 presents our main algorithm
with empirical evaluation. Section 4 shows the context-based algorithm. Our conclusions
are presented in Section 5.
84

Learning to Order BDD Variables in Verification

2. Background
Model checking was introduced by Clarke and Emerson (1986) and by Queille and Sifakis
(1981) in the early 1980s. They presented algorithms that automatically reason about
temporal properties of finite state systems by exploring the state space. The use of binary
decision diagrams (BDDs) to represent finite state systems and to perform symbolic state
traversal is called symbolic model checking. The use of BDDs has greatly extended the
capacity of model checkers. Models with 2 100 and more states are routinely being verified.
BDDs were introduced by Akers (1978) as compact representations for boolean functions. Bryant (1986) proposed ordered binary decision diagrams (OBDDs) as canonical
representations of boolean functions. He also showed algorithms for computing boolean
operations efficiently on OBDDs.
The following subsection gives an overview of how finite state systems are represented
in symbolic model checking. BDDs are then described and the variable ordering problem is
defined. Existing algorithms for static variable ordering algorithms are reviewed. Finally,
a brief description of machine learning algorithms used for ordering is given.
2.1 Finite State Machines in Symbolic Model Checking
Finite state systems (FSM) can be described by defining the set of possible states in a
system and the transition relation between these states. A state typically describes values
of components (e.g., latches in digital circuits), where each component is represented by
a state variable. Let V = {v0 , v1 , ...vn−1 } be the set of variables in a system. Let K vi be
the set of possible values for variable v i . Then a state in the system can be described by
assigning values to all the variables in V . The set of all possible states S A is
SA = Kv0 × Kv1 .... × Kvn−1 .
A state can be written using a function that is true only in this state:
Vn−1
i=0

(vi == cj ),

where cj ∈ Kvi is the value of vi in the state. A set of states can be described by a function
as the disjunction of the functions that represent the states.
Figure 1 shows a 3-bit counter. A state in the 3-bit counter can be described by a
tuple which gives an assignment to the 3 variables v 2 , v1 , v0 . For example, the tuple h1, 0, 0i
represents the state with v2 = 1, v1 = 0, v0 = 0. The corresponding boolean expression for
the state is (v2 == 1) ∧ (v1 == 0) ∧ (v0 == 0).
In order to describe a system, we also need to specify its transition relation. The
transition relation describes all the possible transitions of each system state. It can thus be
described by pairs of states, hpresent state, next statei, where next state is a system state
after a transition from the present state. The variables in V will represent the present state
variables, and for each variable vi ∈ V we will define a corresponding next state variable
vi0 ∈ V 0 . V 0 will denote the set of next state variables.
An example of a valid transition for the 3-bit counter is from h0, 0, 0i to h0, 0, 1i. The
boolean function which represents this transition is (v 2 == 0) ∧ (v1 == 0) ∧ (v0 ==
0) ∧ (v20 == 0) ∧ (v10 == 0) ∧ (v00 == 1). The transition relation can be represented by a
85

Grumberg, Livne, & Markovitch

V2

V1

V0

Figure 1: 3 bit counter
Present State
v2 v1
v0
0
0
0
0
0
1
0
1
0
0
1
1
1
0
0
1
0
1
1
1
0
1
1
1

Next State
v20 v10 v00
0
0
1
0
1
0
0
1
1
1
0
0
1
0
1
1
1
0
1
1
1
0
0
0

Table 1: 3-bit counter transition relation table
boolean function which is the disjunction of the boolean functions of each of the transitions.
Table 1 shows the transition relation for the 3-bit counter.
An alternative method for describing the transition relation is for each state variable
to define its valid next states. This form is known as the partitioned transition relation.
The transition relation is then described by a set of functions (instead of one), one for each
variable. For variable vi , a boolean function Ti (V, vi0 ) defines the next value of vi , vi0 , given
that the current state of the system is V .
For synchronous systems, in which there is a simultaneous transition of all the system
components, the transition relation is

Vn−1
i=0

Ti (V, vi0 ).

In model checking it is common to use the partitioned transition relation form of representation, since it is usually more compact in memory requirements and thus allows the handling
of larger systems. For the 3-bit counter, the next state boolean functions are given below,
where ⊗ stands for the boolean operator Xor.

T0 (V, v00 ) : (v00 == v0 )
T1 (V, v10 ) : (v10 == (v0 ⊗ v1 ))
T2 (V, v20 ) : (v20 == (v2 ⊗ (v0 ∧ v1 ))).
86

Learning to Order BDD Variables in Verification

2.2 Binary Decision Diagrams
A binary decision diagram (BDD) is a DAG (directed acyclic graph) representation of a
boolean function. A BDD is composed of two sink nodes and several non-sink nodes. The
two sink nodes, labeled 0 and 1, represent the corresponding boolean values. Each non-sink
node is labeled with a boolean variable v and has two outgoing edges labeled 1 (or then)
and 0 (or else). Each non-sink node represents the boolean function corresponding to its 1
edge if v = 1, or the boolean function corresponding to its 0 edge if v = 0.
An ordered binary decision diagram (OBDD) is a BDD with the constraint that the
variables are ordered, and every root-to-sink path in the OBDD visits the variables in
ascending order.
A reduced ordered binary decision diagram (ROBDD) is an OBDD where each node
represents a distinct logic function. This representation is a canonical BDD representation
and the most compact representation possible for a given boolean function and a variable
ordering.
V2

V2

V’2

V’2

V1

V1

V’1
V0
V’0

0

0

0
0
0

0

0

1

0
1

0

0

0

0

1

0

0
1

0

0
1

0

0

0

0

1

1

0

0

V’1
V0
V’0

0
0

0

0

1

0
1

0

0

1

(a)

(b)

V2

V2

T2

V’2

T2

V’2

V1
V’1
V0
V’0

T1

V1

1

V’1
V0
V’0

T0
1
1
0

1

1

0

0

0

1

1

0

0
1

0

0
0

1

1
0

1

1

0

0

T1
T0
1
0
0

(c)

1

1

1

1

0

0

0

(d)

Figure 2: 3-bit counter transition relation (a),(b) and partitioned transition relation (c),(d)

Figure 2 (a),(b) shows the OBDD and ROBDD (respectively) representations of the
transition relation function for the 3-bit counter. The dashed lines are the 0 edges and the
solid lines are the 1 edges. ROBDDs have only two leaf nodes, one with 1 and one with
0. We drew them several times to enhance readability. ROBDDs can also use complement
edges, which produces an even more compact representation. We did not use complement
edges, also for reasons of readability. Figure 2 (c),(d) shows the OBDD and ROBDD
representations of the partitioned transition relation of the 3-bit counter. The variable
order v2 , v20 , v1 , v10 , v0 , v00 was used in all the representations. Variable ordering algorithms
in model checking place the next state variable v i0 adjacent to the present state variable v i .
87

Grumberg, Livne, & Markovitch

For the rest of this document we will refer to ROBDDs as BDDs (unless we explicitly state
otherwise).
Bollig and Wegener (1996) proved that finding an optimal variable ordering is an NPcomplete problem. An order is optimal if it yields a BDD with the smallest number of
nodes. Bryant (1986) pointed out that variable ordering greatly influences the size of the
BDD. He showed that for a boolean function, one variable ordering may yield a BDD that
is exponential in the number of variables, while a different ordering may yield a BDD of
polynomial size.
v1

v1

v3

v2

v2

v3

v4

v4

1

0

1

(a)

0
(b)

Figure 3: ROBDDs for the function F (v1, v2, v3, v4) = (v1 = v3) ∧ (v2 = v4)
Figure 3 gives an example of the effect of variable ordering on the BDD size for the function F (v1, v2, v3, v4) = (v1 = v3) ∧ (v2 = v4). In (a) the variable ordering is v1, v3, v2, v4
and in (b) the variable ordering is v1, v2, v3, v4.
Various algorithms have been developed for variable ordering. Exact algorithms (Ishiura,
Sawada, & Yajima, 1991; Drechsler, Drechsler, & Slobodova, 1998; Friedman & Supowit,
1987) are algorithms that find the optimal order. These algorithms use a method similar
to dynamic programming with pruning to find the optimal order. Due to the complexity
of the problem, exact algorithms are only practical for small cases, and one usually has to
turn to other heuristic methods. These heuristic methods can be roughly divided into two
groups.
1. Static Ordering (Aziz, Tasiran, & Brayton, 1994; Butler, Ross, & Rohit Kapur, 1991;
Chung, Hajj, & Patel, 1993; Fujii, Ootomo, & Hori, 1993; Jain, Adams, & Fujita, 1998;
Fujita, Fujisawa, & Kawato, 1988; Malik, Wang, Brayton, & Sangiovanni-Vincentelli,
1988; Touati, Savoj, Lin, Brayton, & Sangiovanni-Vincetelli, 1990) which try to find
a good ordering before constructing the BDD. Most of these algorithms are based on
the topological structure of the verified system.
2. Dynamic Ordering (Rudell, 1993; Meinel & Slobodova, 1998; Bollig, Lobbing, & Wegener, 1995; Meinel & Slobodova, 1997; Meinel, Somenzi, & Theobald, 1997; Ishiura
et al., 1991; Bern, Meinel, & Slobodova, 1995; Fujita, Kukimoto, & Brayton, 1995;
Mercer, Kapur, & Ross, 1992; Zhuang, Benten, & Cheung, 1996; Drechsler, Becker,
88

Learning to Order BDD Variables in Verification

& Gockel, 1996; Panda & Somenzi, 1995; Panda, Somenzi, & Plessier, 1994), which
given a BDD with some variable order, reorder the variables in the hope of finding a
smaller BDD.
In model checking procedures, variable ordering is a central component. At the initial
phase of model checking, when the system is translated into a BDD representation, Static
Ordering is used. The order built at this stage greatly influences the memory usage during
the whole computation. However, since model checking keeps producing and eliminating
BDDs, the variable order should be changed dynamically in order to effect the size of the
current BDDs. Dynamic Ordering is used in order to achieve this goal. It is applied by the
model checking procedure whenever the size of the BDDs reaches a certain threshold.
Since our work introduces a static ordering algorithm based on machine learning, the
next subsection presents a review of the existing static algorithms. Most of these algorithms
were developed for combinational circuits (i.e., models whose outputs depend only on their
current inputs and not on inputs of previous cycles) and were described with hardware
terminology. In order to simplify the description, we will describe them with the terminology
we have used so far.
2.3 Static Ordering
Static ordering algorithms try to find an initial good order for the BDD. To do so, they
extract topological data from the model and use this data to determine an order. All the
algorithms convert the model, described by a set of next state functions, into a directed
graph known as the model connectivity graph. Vertices in the graph are variables and
boolean operations (gates). A variable vertex represents a variable, while a gate vertex
represents a function. The edges ni → nj in the graph are between ni , which is either a
variable or gate vertex, and nj , which is a gate vertex. An edge ni → nj is placed if the
function represented by ni is an operand (i.e., an immediate subfunction) of the function
represented by nj . We can divide the static algorithms into four groups that differ in the
way they use the graph information.
2.3.1 Graph Search Algorithms
The method suggested by Malik et al. (1988) assigns to each vertex a level metric and orders
the variables in decreasing level value. The level of vertices with no out edges is set to be
zero and the level of every other vertex (v i ) is set to be level(vi ) = maxvj |vi →vj (level(vj )+1).
This method resembles a BFS (breadth first search) which originates in nodes that have no
out edges, and progresses backwards in the model. Fujita et al. (1988) proposed executing
a DFS (depth first search) from the vertices with no out edges, and progressing backwards.
Variables in this algorithm are added in post order form.
The algorithms of Malik et al. and Fujita et al. were designed for cases where only one
function should be represented in a BDD. This is hardly ever the case in model checking.
Butler et al. (1991) adapted the algorithm of Fujita et al. to models with multiple starting
points (that is, multiple vertices with no out edges). Their heuristic guides the algorithm
to select the first vertex as the vertex that represents the function which depends on the
maximum number of variables. This heuristic also guides the search to advance (backwards)
89

Grumberg, Livne, & Markovitch

from an inner vertex to the vertex that leads to the maximum number of different variables.
A tie breaking heuristic (Fujita, Fujisawa, & Matsunaga, 1993) for the enhanced algorithm
advises selecting (in case of a tie) the vertex with the maximum number of out edges.
The DFS-based methods append the variables to the variable order. Another DFS-based
algorithm relies on interleaving the variables in the order (Fujii et al., 1993). The algorithm
adds a variable after the variable which precedes it in the DFS order.
2.3.2 Graph Evaluation Algorithms
Graph evaluation algorithms use the model graph to evaluate the model variables and to
perform guided search based on their evaluation values. Minato et al. (1990) propagate
values backward through the graph, starting from vertices with no out edges, whose value
is set to 1. In vertices of boolean operations, the values on the out edges are summed and
the value obtained is divided equally between the in edges. This is done recursively until a
vertex of a variable is reached. At variable vertices the propagated values are accumulated
as the variable evaluation value. The order is constructed by iteratively adding the variable
with the highest value, removing it from the graph, and updating the values.
Chung et al.(1993) proposed two algorithm frameworks. The first framework is composed of two sweeps. In the first sweep each vertex is assigned a value. The values are set
by a propagating algorithm that starts from variable vertices with no in edges and advances
forward (by their out edges) to all the vertices in the graph. In the second sweep a guided
DFS initiated from vertices with no out edges is executed. This search is executed backward
in the graph and is guided by the maximal value. This means that the order of traversal
among vertex ancestors is according to their assigned value. A number of heuristics to
compute the values of the vertices were proposed:
1. Level-Based sets the value of variables with no input edges to be zero. The value of
the other vertices is set to be the maximal vertex value over its inputs plus one.
2. Fanout-Based propagates two values through the graph (one for each boolean value).
At a boolean operation vertex the values are not summed and passed along. Rather,
they are computed according to the boolean operation at the vertex. The initial values
are of variables with no input edges. Their value is set to be the number of out edges
the variable has.
In the second framework proposed by Chung et al., the shortest distance between each
pair of variables is computed. The total distance of a variable is computed as the sum of
its distances to all the variables. The variable with the lowest total distance is selected as
the first variable. The next variable is selected as the closest variable to the last ordered
variable. Ties are broken according to the distance to previous ordered variables.
All the graph evaluation algorithms try to order the variables so that the variable that
most influences the model’s next state functions will be first. The algorithms differ by the
methodology they use to order the other variables. Some algorithms order them so that
variables which substantially influence the model’s next-state functions are placed higher
in the variable order (toward the beginning of the order). Other algorithms place the other
variables according to their proximity to previously ordered variables.
90

Learning to Order BDD Variables in Verification

2.3.3 Decomposition Algorithms
Decomposition algorithms break down the model into parts. The algorithms then solve
two different problems. The first is finding a good order for each part, and the second is
finding the order of the parts. The order is constructed by combining the solutions of the
two problems.
The algorithm of Malik et al. was extended and adapted for finite-state machines (FSM)
by Toutai et al. (1990). In their algorithm, a model is decomposed to its next state functions,
each of which is considered separately. Variables of each next state function are ordered
according to Malik et al. The next state functions are then ordered by a cost function.
They are ordered so that functions with many overlapping variables will be adjacent. The
variable order is obtained by adding the variables of the next state functions according to
the order of the parts, while removing variables that already exist.
The algorithm of Aziz et al. (1994) decomposes the model in a different way. A model
is a hierarchical composition that is constructed by joining a number of internal parts that
pass information among themselves. Usually, there is less communication among the parts
than within them. Variables of an internal part tend to depend highly on one another.
The algorithm uses a process communication graph (PCG), which models the hierarchical
structure of the model and the communication between the parts. In a PCG each vertex is
an internal part, and an edge i → j connects vertex i and vertex j if part j depends on a
bit of part i. The PCG has parallel edges i → j, one for each bit value in i that j depends
upon. Alternatively, the edges could be weighted.
Given an order of the parts, an upper bound on the BDD size of the model can be computed. The computation is based on the size of the parts and the amount of communication
between them. Heuristics guided by the upper bound are applied in order to determine the
order of the parts. The order of the variables in each part is decided by one of the previous
ordering algorithms.
2.3.4 Sample-Based Algorithms
Sample-based static algorithms (Jain et al., 1998) are not real static algorithms in the
sense that they do not create the order based on information extracted from the model
description. Sample algorithms perform tests on parts of the model (building transition
relations and reachable states). For each part, a number of orders are evaluated. The good
orders are then merged to create a complete order for the model. Sampling algorithms use
“traditional” algorithms in order to find the candidate orders for the parts. These candidate
orders are then checked by the sampling algorithm.
2.3.5 Summary
A majority of the graph search algorithms and graph evaluation algorithms were developed
for other problems and adapted for symbolic model checking. Some of the algorithms
were developed in the context of combinational circuits, while others were developed for the
simple case of one function. In symbolic model checking the models are rarely combinational
(their outputs almost always depend also on inputs of previous cycles), and there is more
than one function to display. Adapting the existing algorithms to conform to the needs of
91

Grumberg, Livne, & Markovitch

symbolic model checking has had various degrees of success. Most of the adapted algorithms
are heuristic and apply a simple rule with some logical reasoning behind it.
The decomposition algorithms are either heuristic or provide a theoretical upper bound.
However, the bounds they use are rarely realistic; for most models we require much smaller
BDDs. The algorithms are also based on decomposing the model into parts and solving the
ordering of each part using graph search algorithms. Thus, they also inherit the drawbacks
of these algorithms.
Despite the efforts that have been invested and the many algorithms that have been
developed for static ordering, the results are not yet satisfactory. The produced BDDs
are too large to manipulate, and dynamic ordering must be applied. One problem with
the above approaches is their generality: they do not utilize domain-specific knowledge.
Domain-specific knowledge is essential for solving the majority of complex problems. It is
also difficult to retrieve. In the next subsection we discuss machine learning methods for
acquiring domain-specific knowledge for ordering tasks.
2.4 Learning to Order Elements
Learning to order elements can be done by first trying to induce a partial order, which can
then be used for generating a total order. In this context, a partial order is usually called
a preference predicate. Preference predicate induction is based on a set of tagged pairs of
elements where the binary tag identifies the preferred element. Broos and Branting (1994)
present a method for inducing a preference predicate using nearest neighbor classification.
The distance between an untagged pair and each tagged pair is computed as the sum of
distances between the corresponding elements. The closest tagged pair is selected. The
preferred element of the untagged pair is the one matching the preferred element in the
tagged pair.
Utgoff and Saxena (1987) represent a pair A, B by the concatenated feature vector
ha1 , . . . an , b1 , . . . bn i. The preference predicate is a decision tree induced from these examples.
Utgoff and Clouse (1991) represent a preference predicate by a polynomial. Let A =
ha1 , . . . an i , and B = hb1 , . . . bn i be a pair of elements represented by feature vectors. Let
w1 , . . . , wn be a set of weights. The preference predicate P is defined as follows:
P (A, B) =

(

n
1
i=1 wi (ai − bi ) ≥ 0
0 otherwise

P

Each example represents a linear constraint and the weights are found by solving the set of
constraints.
Cohen, Schapire and Singer (1999) extended the above mechanism by allowing any
preference function fi instead of (ai − bi ) in the above expressions. They also present
two methods for generating a total order based on the induced preference predicate. Both
methods use the preference predicate to construct a graph where the nodes are the elements
to be ordered and a directed edge is placed between two elements that have a precedence
relation. Two algorithms for inferring the order from the graph are given. The first defines
for each node a degree which equals the sum of the outgoing edges minus the sum of the
incoming edges. The order is then constructed by selecting the node with the greatest
92

Learning to Order BDD Variables in Verification

degree and removing its edges from the graph. The second algorithm constructs the order
in two stages. In the first stage, all the strongly connected components of the graph are
found, and they are ordered according to the dependencies between them. In the second
stage the elements of each component are ordered using the first algorithm.

3. A Learning Algorithm for Static Variable Ordering
Producing a good variable order requires extensive understanding of BDDs and their relation
to the model they represent. Such knowledge can be manually inserted by a human expert.
However, this task is too complex for large models. Therefore, it is rarely done. Existing
static ordering algorithms use relatively simple heuristic rules that are based on expert
knowledge. These rules look at the model structure to compose the ordering. Since the
rules are to be applied to all variables in all the models, they are general and thus limited
in the ability to produce good orders. Alternatively, we can try to build a program that
automatically acquires more specific knowledge based on ordering experience. In this section
we present such an algorithm.
The first step in building such a learning algorithm is deciding what knowledge we wish
to acquire from the ordering experience. The existing ordering algorithms demonstrate that
the precedence relation between variables is a key consideration for the order creation. The
graph search algorithms and the search-based graph evaluation algorithms try to place a
variable after the variables
that influence its next state value. Generally, a variable order
n
of n variables yields 2 precedence pairs. A precedence pair v i ≺ vj denotes that variable
vi should precede vj in the variable order. For example, the variable order a, b, c, d yields
the precedence pairs a ≺ b, a ≺ c, a ≺ d, b ≺ c, b ≺ d, c ≺ d.
The above task of learning precedence pairs can be transformed into a concept learning
task. A concept learning task is defined by:
• A universe X over which the concept is learned;
• A concept C – a subset of items in X that we want to learn (usually marked by its
associated boolean characteristic function f c );
• A set of examples – pairs of the form hx, f c (x)i, where x ∈ X;
• A set of features – functions above X that allow generalization.
For many learning tasks it is difficult to transform the problem to the format listed
above. It is already clear from the discussion above that the general concept we wish to
learn is the set of variable pairs in which the first should precede the second in the variable
ordering1 .
More precisely, we define the universe over which the concept is learned as the set of all
pairs h(vi , vj ), M i, where (vi ,vj ) is an ordered variable pair comprised of v i and vj , which
are variables in the model M . Since we expect that some pairs will have no preferred order,
we define a ternary instead of a binary concept. The ternary concept has the following
classes:
1. In practice, we will need only a small subset of the precedence pairs for constructing a total order.

93

Grumberg, Livne, & Markovitch

1. C+ , the class of all h(vi , vj ), M i for which it is preferable to place v i prior to vj in
order to get a good initial order.
2. C− , the class of all h(vi , vj ), M i for which it is preferable to place v i after vj in order
to get a good initial order.
3. C? , the class of all h(vi , vj ), M i for which placing vi before vj is just as likely to lead
to a good variable order as placing v i after vj .
In the following subsections we describe the algorithms for learning and using this concept.
3.1 Algorithm Framework
We start with the description of the general framework of the learning algorithm. Our goal
is to find variable orders that yield BDDs with small number of nodes. Given a training
model, the algorithm first generates a set of orders of its variables. We define a utility
function u over variable orders as following. Each of the orders is used as the initial order
for building the BDD representation of the model 2 . This BDD (denoted M-BDD) includes
the model’s partitioned transition relation and its set of initial states. The utility u of a
generated order is then defined to be reversely proportional to the the number of nodes in
the M-BDD constructed with this order.
A subset that consists of all the variable pairs that appear together in some next-state
function is selected by the example extractor from all the possible variable pairs. We call
such pairs interacting variable pairs. For example, if next(x) = y ∨ z then (y, z) is an
interacting variable pair. The example tagger tags each of the selected ordered pairs with
one of the classes C+ , C− , or C? , based on the evaluated orders. The tagged pairs are
forwarded to the feature extractor which, based on the model, computes for each pair its
feature vector. The learner, which is an ID3 (Quinlan, 1986) decision tree generator, uses
the tagged feature vectors to create a pair precedence classifier.
Several training models are used in this manner to construct different pair precedence
classifiers. When solving a new unseen problem, these pair precedence classifiers are used
by the ordering algorithm to create a variable order.
The learning framework for creating a pair precedence classifier of a training model is
given in Figure 4. The complete data flow is displayed in Figure 5. The following subsections
describe in greater detail the components of the framework.
3.2 The Training Sequence Generator
The goal of the training sequence generator is to produce orders with high variance in quality
which is exploited by the tagger (see Subsection 3.4). The simplest strategy for generating
such sequences is by producing random orders. This is indeed the strategy we have used in
the experiments described in this paper. One potential problem with this approach is with
domains where good orders (or bad orders) are rare. In such a case, a random generator
will not necessarily produce sequences with the desired diversity in quality.
2. We use the SMV (McMillan, 1993) system for this purpose.

94

Learning to Order BDD Variables in Verification

Input : Training Model
Output : Precedence Classifier
1. Create sample orders.
2. Use SMV to evaluate the utility of each sample order by the M-BDD size.
3. Find the interacting variable pairs of the training model.
4. Based on the evaluated sampled orders, tag each ordered pair that is based on an
interacting variable pair.
5. Transform each tagged pair to a tagged feature vector.
6. Create a classifier based on the tagged feature vectors.
Figure 4: Training model precedence classifier construction

Training
Order
SMV

Training
Model

Evaluated
Orders

Tagged
Pairs

Example

Feature
Extractor

Tagger

M-BDD

Example

Interacting
Variable
Pairs

Learner

Extractor

Real
Model

Ordering
Algorithm

Classifier

Tagged
Feature
Vectors

Order

Figure 5: Data flow

An alternative approach is to actively try producing orders that are very good and orders
that are very bad, therefore creating a large diversity in quality. One way of producing a
good order is by taking the orders that are the result of the dynamic ordering process.
Another option is by using an existing static ordering algorithm. One interesting idea
is to try and bootstrap the process by using the results of the adaptive ordering algorithm
as training examples thus resulting in progressively more diverse input.
95

Grumberg, Livne, & Markovitch

3.3 The Example Extractor
Given a set of n variables, we can extract n ∗ (n − 1) example ordered pairs for training.
But should we actually use all these ordered pairs as examples?
There are two main reasons for being selective about what examples to use:
1. Each example carries computational costs associated with tagging, feature extraction,
and the added computation by the induction procedure.
2. Noisy examples are known to have harmful effect on the induction process.
The process of selecting a subset of examples, to be tagged, out of a set of untagged
examples is called selective sampling. There are two common ways of performing selective
sampling. One is by automatic methods that use various general metrics for selecting
informative examples (Lindenbaum, Markovitch, & Rusakov, 1999). The other way is by
using domain specific heuristics about the potential of an example to be informative.
In this work we use the second approach. Consider a function f over m variables,
represented within a BDD of n variables (where m ≤ n). The number of nodes used to
represent f depends only on the relative order of the m variables. This means that changing
the order of the other n − m variables would not influence the BDD representation of the
function f .
The BDD representation of a model to be checked consists of the initial states of the
model and the next-state functions of the variables. Since the BDD representation for the
initial states is typically small, we do not take it into account. Therefore, when looking for
examples, we consider only the next-state functions. Usually, each such function is defined
only over a subset of all the model variables. Thus, the order of a pair of variables (v i , vj ),
that do not appear together in any next-state function is less likely to affect the quality of
the generated order. We therefore filter out such pairs.
3.4 The Example Tagger
An ordered variable pair (vi , vj ) should be tagged as belonging to C+ if it is preferable to
place vi before vj . Let V = {v1 , . . . , vn } be the set of variables of a given model. Let O be
the set of all possible orderings over V . Let O vi ≺vj be the set of all o ∈ O where vi precedes
vj . The ordered variable pair (vi , vj ) is defined to be preferable to (vj , vi ) if and only if
Average{u(o)|o ∈ Ovj ≺vi } ≤ Average{u(o)|o ∈ Ovi ≺vj }.
Since it is not feasible to evaluate all the possible orders, we sample the space of possible
orders, evaluate them and partition the samples to two sets as above. As the averages now
only estimate the real averages, we replace the term “smaller” in the above definition
with “significantly smaller.” This is determined by the unpaired t-test, which tests the
significance (with a given confidence) of the difference between the averages of two samples
of two populations.
More precisely, for each variable pair v i , vj , the set of sampled orders S ⊆ O is partitioned into two subsets Svi ≺vj ⊆ Ovi ≺vj and Svj ≺vi ⊆ Ovj ≺vi . An unpaired t-test with
a predetermined confidence level is used to check if the averages of the set utilities differ
significantly. If they do, the ordered pair corresponding to the set with the smaller average
96

Learning to Order BDD Variables in Verification

is tagged with + and the other ordered pair is tagged with - (meaning that they belong
to C+ and C− , respectively). Otherwise, the average difference is not significant, and both
ordered pairs are tagged with ? (meaning that they belong to C ? ).
A more elaborative approach could use the t-value as a weight on how important a particular order is. These weights could solve conflicts in the ordering process. Such a scheme
would require, however, a method to incorporate weights into the induction algorithm. One
method is by trying to induce a continues function instead of a ternary function.
3.5 The Feature Extractor
If we want to generalize from training models to future unseen models, we cannot represent
the pairs by the variable names. Rather, we should use a representation that can be used
across models. Most induction algorithms require that the examples be represented by
feature vectors.
The process of constructing an appropriate feature set is a crucial part of applying a
learning algorithm to a problem. It is a common knowledge engineering process where a
domain expert comes up with a set of features that might be relevant. It is the role of
the induction algorithm, then, to find out what combination of features are relevant to the
specific problem.
We have come up with a set of features over variable pairs. These features are extracted
from the model connectivity graph. Some of these attributes are inspired by traditional
static ordering algorithms. The attributes can be categorized into three groups:
• Variable attributes are defined on a single variable and try to capture its characteristics
in the model. One example is the variable-dependence attribute, which equals the
number of variables on which a variable depends. This attribute was inspired by the
value used by Butler et al. (1991) to guide the DFS search. A higher value indicates
that a larger portion of the model’s variables are needed to determine the variable’s
next-state value. Thus, a higher value may indicate that the variable location should
be lower in the order. Another example is the variable-dependency, which takes the
complementary view of variable-dependence. The attribute equals the number of
variables that depend on a given variable. A higher value may indicate that the
variable should be placed higher in the variable order.
• Symmetric pair attributes are defined on a variable pair v i , vj . These attributes try to
capture the strength of the bond between the two variables, as well as that between
this pair and the other variables in the model. For example, pair-minimal-distance
measures the shortest path between the variables in the model connectivity graph. A
shorter path can indicate a stronger bond between the variables. The distance-based
ordering framework (Chung et al., 1993) uses a similar feature to order variables.
Another example is pair-mutual-dependency, which counts the number of variables
whose next-state function depends on both v i and vj .
• Non-symmetric pair attributes try to capture the relationship between the two variables. For example, the pair-dependency-ratio is the ratio between the variabledependency values of the two variables. If the ratio is relatively high or low, it may
indicate the relative order of the two. pair-ns-distance evaluates the influence of one
97

Grumberg, Livne, & Markovitch

variable on the next state value of the other. It does so by measuring the distance
between the variables in the subgraph that represents the next-state function.
The complete list of attributes can be found in Appendix A.
3.6 The Induction Algorithm
After the feature extraction phase, our data is represented as a set of tagged feature vectors.
This type of representation can be used to produce classifiers by many induction algorithms,
including decision trees (Hunt, Marin, & Stone, 1966; Friedman, 1977; Quinlan, 1979;
Breiman, Frieman, Olshen, & Stone, 1984), neural networks (Widrow & Hoff, 1960; Parker,
1985; Rumelhart & McClelland, 1986) and nearest neighbor (Cover & Hart, 1967; Duda &
Hart, 1973). We have decided to use decision tree classifiers because of their relatively fast
learning and fast classification. Fast classification is especially important since we wish to
be competitive with other ordering algorithms and the number of variable pairs we need to
classify is large.
Decision trees have been researched thoroughly in the last decade, producing many
valuable extensions. One such extension enables the decision tree to give not only the
classification of items but also to associate with each such classification a confidence estimation. We have used this variant to allow conflict resolution. This will be described in
Section 3.7.3.
3.7 The Ordering Algorithm
The outcome of the learning process described in the last four subsections is a set of decision
trees, one for each training model.
We could also generate one tree based on the union of generated samples. One advantage
of the multiple-tree approach is that we expect the examples from the same model to be more
consistent, allowing generating compact trees. In contrast, a set of examples coming from
different models is likely to be more noisy, yielding a large tree. In addition, the multiple-tree
version allows us using a voting scheme during the ordering process, as described below.
Given a model M, the algorithm first extracts the interacting variable pairs. Each
of the classifiers is then applied to the feature vector representations of these pairs. For
each classifier, the classifications of all the pairs are gathered to form a precedence table.
These tables are then merged into one table. The order creation algorithm uses the merged
precedence table to construct the model’s variable order. The following subsections describe
the components in greater detail. Figure 6 shows the data flow in the ordering algorithm.
3.7.1 Building the Precedence Table
To build a precedence table based on a given classifier, the algorithm asks two questions for
each interacting variable pair vi , vj :
1. Should vi ≺ vj ?
2. Should vj ≺ vi ?
98

Learning to Order BDD Variables in Verification

Pair
Precedence
Classifier
Pair
Precedence

Real

Pair

Feature

Problem

Extractor

Extractor

Classifier

Pair

Pair

Tree

Table

Pair

Pair

Tree

Table

Merger

Merged
Pair
Precedence
Classifier

Pair

Pair

Tree

Table

Table

Order
Creation
Algorithm

Variable
Order

Figure 6: Ordering algorithm data flow

1
2
3
4
5
6
7
8
9

vi ≺ v j ?
No
No
No
Yes
Yes
Yes
Unknown
Unknown
Unknown

vj ≺ vi ?
No
Yes
Unknown
No
Yes
Unknown
No
Yes
Unknown

vi , vj order
Unknown
v j ≺ vi
Unknown
v i ≺ vj
Unknown
Unknown
Unknown
Unknown
Unknown

Table 2: Pair order table
If the two agree, the pair order is set to the agreed order. If they disagree, the order is
set to unknown. Table 2 summarizes all the possible answers for the two questions and the
resulting pair order.
3.7.2 The Merging Algorithm
After constructing the pair precedence tables from the training model’s classifiers, we merge
the tables using a voting scheme. For each variable pair v i , vj , we count the number of tables
that vote vi ≺ vj and the number of tables that vote vj ≺ vi . We then decide their pair
order according to the majority (ignoring the unknown votes).
Assuming that the majority vote chooses the order v i ≺ vj , the confidence for this vote
conf (v ≺v )−conf (v ≺v )
is computed by vote(vii ≺vjj )+vote(vjj≺vii) , where vote(vi ≺ vj ) is the number of tables that vote
99

Grumberg, Livne, & Markovitch

vi ≺ vj and conf (vi ≺ vj ) is the sum of the confidence values of these votes. vote(v j ≺ vi )
and conf (vj ≺ vi ) are defined similarly. If this value turns out to be lower than 0.1, we set
it to a minimal value of 0.1.
3.7.3 Cycle Resolution
In order to build a total, strict order out of the merged table, the table must not contain
any cycle. However, the above algorithm does not guarantee this. We therefore have to
apply a cycle resolution algorithm that makes the table cycle-free.
The precedence table can be seen as a directed graph in which the nodes are variables,
and there is a weighted edge vi → vj if and only if vi ≺ vj . There are many possible ways to
eliminate cycles in a directed graph. One reasonable bias is removing the least number of
edges. This problem is known as the minimum feedback arc set and is proven to be NP-hard
(Karp, 1972). Approximation algorithms for this problem exist (Even, Naor, Schieber, &
Sudan, 1998), but they are too costly for our purposes.
We use instead a simple greedy algorithm to solve the problem. All the constraints
(edges) are gathered into a list and sorted in a decreasing order according to their weights
(i.e., their confidence). A graph is initialized to hold only the variable vertices. The list of
edges is then traversed and each edge is added if it does not close a cycle.
3.7.4 Pair Precedence Ordering
At this stage of the algorithm, we hold an acyclic merged precedence table. The last step of
the ordering process is to convert the partial order represented by this table to a total order.
This is done by topological ordering. At each stage, the algorithm finds all the minimal
variables, i.e., variables that are not constrained to follow other unordered variable. From
this set, we select a variable vadd with maximal fan-out and add it after the last ordered
variable. We then add all the variables which are larger than v add but do not appear in
any constraint with an unordered variable. We do this because it is desirable to place
interacting variables near each other. The pair precedence ordering (PPO) algorithm is
listed in Figure 7. Figure 8 lists the selection of v add in PPO .
One possible change to the ordering process is to delay the cycle resolution to the last
stage. We call this version cycle resolution on demand. The modified algorithm does not
perform any cycle resolution on the merged table. Instead, the algorithm works with the
merged table that may contain cycles. If the table contains a cycle, the algorithm must
reach a stage where not all the variables are ordered and there are no minimal variables.
In this case the algorithm performs cycle resolution as before and continues the ordering
process.
3.8 Experiments
We performed an empirical evaluation of the PPO algorithm using models from the
ISCAS89 (Brglez, Bryan, & Kozminski, 1989) benchmark. The ISCAS89 benchmark circuits
have been used to empirically evaluate many algorithms that deal with various aspects of
circuit design (Chamberlain, 1995; Wahba & Borrione, 1995; Nakamura, Takagi, Kimura,
& Watanabe, 1998; Long, Iyer, & Abramovici, 1995; Iyer & Abramovici, 1996; Konuk
& Larrabee, 1993). We discovered that some of the circuits are insensitive to the initial
100

Learning to Order BDD Variables in Verification

Input : The merged pair precedence table.
Output : A variable order.
Let V be the set of all variables.
Let before(v, V 0 ) = {v 0 ∈ V 0 |v ≺ v 0 }.
Let after(v, V 0 ) = {v 0 ∈ V 0 |v 0 ≺ v}.

1. VC = {vi |bef ore(vi , V ) 6= ∅ or af ter(vi , V ) 6= ∅}
VN C = V − V C
2. While VC 6= ∅
(a) Vmin = {vi ∈ VC |af ter(vi , VC ) = ∅}
(b) vadd = argmaxvi ∈Vmin |bef ore(vi , VC )|
(c) order = order || vadd

a

b

(d) VC = VC − {vadd }
(e) for each vi ∈ VC
if af ter(vi , VC ) = ∅ and bef ore(vi , VC ) = ∅ then
order = order || vi , VC = VC − {vi }
3. Add VN C to end of variable list.
a. If more than one exists, select one.
b. Add variable to order.

Figure 7: Pair precedence ordering
ordering. This means that the entire sample of initial orders yielded model BDDs of similar
sizes. We eliminated these circuits from the set. Out of the remaining circuits we selected
those with a number of variables that SMV can handle. We ended up with the following
five circuits: s1269 (55), s1423 (91), s1512(86), s4863 (153), s6669 (314). The numbers in
parentheses stand for the number of variables in each model.
We began with an offline learning session where the three smaller models (s1269, s1423,
s1512) are used as training models. For each of these models we generated 200 random
orders and extracted examples as described in the previous section. The algorithm then
induced three precedence classifiers in the form of decision trees.
The number 200 was selected since it proved to be sufficiently large. In real application
the algorithm can be used as an anytime algorithm where training sequences are generated
as long as the user is willing to wait for the offline learner. An alternative approach would
keep aside a validation set that would be used for testing the system’s performance. The
training could have then be stopped when the learning curve flattens.
The algorithm was tested on the two larger models (s4863, s6669). For each of the
models, the three learned decision trees were used to generate the merged precedence table.
101

Grumberg, Livne, & Markovitch

Pair
Merged
Table

Minimal
Elements
Unordered
Variables

Find
Minimal

Filter
Maximal

Maximal
Minimal
Elements

Selected
Element
Select
One

Variable
Order

Figure 8: Pair precedence ordering v add selection

Our PPO algorithm (with cycle resolution on demand) was compared to the random
algorithm. In addition, we compared our results to two advanced graph search algorithms
for static ordering: the DFS append algorithm of Fujita et al. (1988) and the interleave
algorithm of Fujii et al. (1993). In both algorithms we used the adaptation for multiple
starting points (Butler et al., 1991) and its expanded version, which includes the tie breaking
rule (Fujita et al., 1993). The random results were taken based on 200 variable orders. The
two other algorithms were each run 10 times on every model. The performance of the
ordering algorithms is measured by the number of nodes in the model BDDs (partitioned
transition relation and initial states).
Table 3 and Figure 9 show the results obtained. The table shows that on model s6669,
PPO outperformed the random order by more than 300%. On model s4863, PPO outperformed the random order by 5%.
PPO vs. Random

6

2.5

x 10

random
PPO

2

BDD nodes

1.5

1

0.5

0

s4863

Model

s6669

Figure 9: Comparative histogram of PPO vs. Random

102

Learning to Order BDD Variables in Verification

Model
s4863
s6669

Random
Average
STD
849197
121376
2030880 1744493

PPO
Average
STD
807763 100754
713950
35446

Table 3: Comparative table of PPO vs. Random
The comparison of our algorithm to the two static algorithms is given in Figure 10.
The results show that our learning algorithm, after training, becomes competitive with the
existing ordering algorithms written by experts.
5

10

x 10

Append
Interleave
PPO

9
8
7

BDD nodes

6
5
4
3
2
1
0

s4863

Model

s6669

Figure 10: Comparative histogram of PPO vs. Static
To evaluate the utility of the learned knowledge we would like to compare the performance of the ordering process with and without the learned knowledge. Ordering without
any learned knowledge is equivalent to random ordering. The comparison of our results to
the random-ordering algorithm reveals that the learner indeed induced meaningful knowledge during the learning process. Our method is also much more stable than random
ordering on s6669 as indicated by comparing the standard deviation. This large variance
in the results of the random ordering is indeed exploited by our tagging procedure as explained in Section 3.4. The small variance in the results obtained by random ordering on
s4863 can explain why the improvement obtained by the PPO algorithm is much smaller
on this circuit. A more sophisticated training sequence generator, such as those described
in Section 3.2, might have been more successful with that circuit.
The comparison to the hand-crafted algorithms may look disappointing at first look
since the results of the learning system are not better than the existing algorithms. Recall,
however, that we are comparing an automated learning process to human expertise. Most
of the works in empirical machine learning make comparisons between the performance of
various learning algorithms. It is not common to compare the performance of a learning
103

Grumberg, Livne, & Markovitch

algorithm with a human expert or an expert system since in most cases it is clear that handcrafted algorithms would outperform automated learning processes. Since there are hardly
any other learning systems that were built to solve the BDD variable ordering problem we
could not make the more common comparison between learning systems.

4. Learning Context-Based Precedence for Static Ordering
The precedence relation is one of the key considerations used by traditional static ordering
algorithms. Another key consideration is the clustering of variables and their subsequent
ordering. The algorithms try to place highly interacting variables near each other.
The effect of the variable clustering in a BDD can be seen in the simple example given in
Figure 3. In this function, switching the two variables v 2 and v3 increases the BDD size by
3 nodes. For this function, all the orders in which the variables of each of the two clusters,
v1 , v3 and v2, , v4 , are kept together yield the minimal BDD representation. Other variable
orders yield a less compact BDD. Thus, in this function, the only key consideration is the
compliance with clustering (precedence is not taken into account).
4.1 Variable Distance
The above discussion leads to the hypothesis that the distance between variables is an important factor when considering alternative orders. One way to obtain distance information
is by learning the distance function between pairs of variables. There are, however, two
problems with this approach:
1. The target distance function is not well-defined across models. For example, if we
train on small models, the absolute distance function is not likely to be applicable for
large models.
2. Information on absolute distances between variables is not sufficient to construct a
good ordering. This is because the absolute distance does not uniquely define the
order between the variables. In fact, it defines two possible orders, where one is the
reverse of the other.
The example in Figure 11 demonstrates that an order and its reverse can yield BDDs
that are significantly different in size. Each of the BDDs in Figure 11 represents two
functions, f1 (a, b, c, d, e) = (a = b = c) ∨ (c = d) and f2 (a, b, c, d, e) = (a = b =
c) ∨ (c = e). The absolute distance between the variables in the orders is clearly the
same. However, the upper BDD is approximately double the size of the lower one.
We wanted to check whether in realistic examples reverse orders can yield BDDs that
are significantly different in size. We tested models from the ISCAS89 benchmarks
and created 5,000 variable orders for each model. For each order, we compared its
quality with the quality of the reversed order. We found that in many cases one order
was exceptionally good while the reversed one was exceptionally bad. Thus, learning
the absolute distance is not sufficient, and more information is needed.
We conclude that there are problems inherent both in learning and in utilizing absolute
distances. Still, clustering is a key consideration and should be pursued. We suggest,
104

Learning to Order BDD Variables in Verification

f1

a

f2

b
c
d
e

1

1
0

1

1

1

1

0
0

1

1

0

(a)
f2

e
f1

d
c
b
a

1

1
0

0
0

1

1

0

(b)

Figure 11: ROBDDs for the functions f 1 (a, b, c, d, e) = (a = b = c) ∨ (c = d) and
f2 (a, b, c, d, e) = (a = b = c) ∨ (c = e)

alternatively, learning the relative distance that determines, for variables v i , vj , and vk ,
which of vj , vk should be closer to vi , given that vi precedes the other two.
The remainder of this section describes a method for learning and utilizing context-based
precedence to infer the relative distance between variables.
4.2 Context-Based Precedence
A context precedence relation is a triplet v i ≺ vj ≺ vk : given that vi precedes vj and vk , the
variable vj should come before the variable vk . Thus, the context precedence relation adds
context to pair ordering decisions.
As in pair precedence learning, we define the universe to be the set of pairs h(v i , vj , vk ), M i
where vi , vj , vk are variables in the model M . The universe is divided into three classes,
C+ , C− , C? , as before. Examples for these classes are drawn in the same way. The pair
precedence framework can be applied with minor changes to work with context precedence
relations. These minor changes are described below.
4.3 The Example Tagger
A variable triplet (vi , vj , vk ) should be tagged as C+ if, given that vi precedes vj and vk , it is
preferable to place vj before vk (i.e., vi ≺ vj ≺ vk ). As in pair precedence learning, we use a
set of evaluated variable orders for the tagging. Any set of such orders can be partitioned to
three subsets, depending on which of the three variables is first. Given a partition defined
by vi (for example), we can test the order of v j and vk using t-test, as described in Section
105

Grumberg, Livne, & Markovitch

3.4. To reduce the number of noisy examples, we use only the partition that yields the most
significant t-test results.
4.4 The Feature Extractor
The attributes of a triplet (vi , vj , vk ) are computed based on the attributes of the two pairs
vi ≺ vj and vi ≺ vk . Each attribute value is the division/subtraction of two corresponding
attribute values from the two pair attributes.
More precisely, assume that the pair v i ≺ vj has attributes f1 (vi , vj ), . . . , fn (vi , vj ) and
the pair vi ≺ vk has attributes f1 (vi , vk ), . . . , fn (vi , vk ). Then the triple (vi , vj , vk ) has
attributes f1 (vi , vj )/f1 (vi , vk ), . . . , fn (vi , vj )/fn (vi , vk ). If some of the fl (vi , vk ) can be 0
then the corresponding attributes are subtracted instead of divided.
As an example consider an attribute f l which is pair minimal distance (see Section 3.5).
If fl (vi , vj )/fl (vi , vk ) is greater than 1 than the shortest path between v i and vj is larger
than the shortest path between vi and vk . This attribute can indicate that v k should appear
closer to vi .
Similarly, if fl is pair mutual dependency then fl (vi , vj )/fl (vi , vk ) > 1 indicates that the
number of variables whose next-state function depends on both v i and vj is greater than
those depending on both vi and vk . This may indicate that it is preferable to keep v i and
vj close together.
4.5 The Ordering Algorithm
The outcome of the learning phase is a set of decision trees, one for each model. This is the
same as in the case of context-free pairs. In this subsection we describe ways to use these
trees for ordering.
4.5.1 Building the Context Precedence Table
While in the case of pair precedence we had a table of size n 2 (where n is the number of
variables), we now produce one such table for each context variable. For each table we
perform inconsistency elimination similar to that described in Section 3.7.1. Here, however,
when we ask the classifier the two questions v j , vk and vk , vj , we add the context variable
vi to the query.
4.5.2 Pair Precedence Ordering with Context Precedence Filtering
The ordering algorithm uses the pair precedence table in the same way as the PPO algorithm. However, it was often found to be the case that the PPO algorithm had several
minimal variables, even after employing the maximal fanout filter. We use the contextbased precedence table to further reduce the size of the set of minimal elements. We use
the variables in the already ordered sequence as context variables and look at their associated tables. If the set of minimal elements contains a pair of variables constrained as
vj ≺ vk in one of the tables, we eliminate vk from the set. Figure 12 lists the code which
when added to the PPO algorithm, accepts a variable set V add (from which we previously
selected randomly), and returns one variable. We call the new algorithm PPO CPF .
Figure 13 lists the selection of vadd in PPOCPF .
106

Learning to Order BDD Variables in Verification

Input : The set of candidate variables to be added, V add , and the merged context precedence
table.
Output : A variable to be added.
Let after(v, Vi , Vj ) = {hvi , vj i vi ∈ Vi , vj ∈ Vj |vi ≺ vj ≺ v}.
0
b.1 Vadd
= {vi ∈ Vadd |af ter(vi , VInOrder , Vadd ) = ∅}
0
b.2 If Vadd
6= ∅ then
0
select randomly one variable from V add
else select randomly one variable from V add

Figure 12: Pair precedence ordering with context precedence filtering
Context
Merged
Table

Pair
Merged
Table

Minimal
Elements
Unordered
Variables

Find
Minimal

Filter
Maximal

Maximal
Minimal
Elements

Filter
Context
Constrained

Unconstrained
Minimal
Elements

Selected
Element
Select
One

Variable
Order

Figure 13: Pair precedence ordering with context precedence filtering v add selection

4.6 Experiments
We have evaluated the performance of PPO CPF , performing off-line learning on the
training models followed by ordering of the test models. The results are shown in Figure 14.
For comparison we also show the performance of the PPO algorithm and the two expert
algorithms.
The P P O CP F algorithm outperforms all the other algorithms on the two tested models.
The results show that the context-based precedence relations add valuable information.
We have tested the effect of the resources invested in the learning phase on the performance of the algorithms. Since the learning examples are tagged based on evaluated training
orders, and since the evaluation of the training orders is the most resource-consuming operation, we used the number of these orders as the resource estimator. Figure 15 shows the
learning curves of our algorithms, that is, it shows how the system performance changes
according to the offline resources consumed (the number of training orders evaluated).
Without testing any random order, our system has no knowledge on which to build
the precedence classifiers, and thus its performance is equivalent to random ordering. The
107

Grumberg, Livne, & Markovitch

5

10

x 10

Append
Interleave
PPO
CPF
PPO

9
8
7

BDD nodes

6
5
4
3
2
1
0

s4863

Model

s6669

Figure 14: Comparative histogram of ordering algorithms
6

2.2

x 10

s4863
s6669

2

1.8

bdd nodes

1.6

1.4

1.2

1

0.8

0.6
0

20

40

60

80
100
120
number of examples

140

160

180

200

Figure 15: Learning curves of the PPO CPF algorithm for the two testing models

tagging based on 20 orders is too noisy. While it improves the performance of s6669, it
degrades the performance of s4863. Forty orders are sufficient to generate stable tagging,
which yields improved classifiers and therefore improved ordering quality.

5. Discussion
The work described in this paper presents a general framework for using machine learning
methods to solve the static variable ordering problem. Our method assumes the availability
108

Learning to Order BDD Variables in Verification

of training models. For each training model, the learning algorithm generates a set of
random orders and evaluates them by building their associated BDDs. Each ordered pair
of interacting variables is then tagged as a good example if it appears more frequently
in highly valued orders. The ordered pairs are converted to feature-based representations
and are then given, with their associated tags, to an induction algorithm. When ordering
variables of a new unseen model, the resulting classifiers (one for each model) are used to
determine the ordering of variable pairs. We also present an extension of this method that
learns context-based ordering.
Our algorithm was empirically tested on real models. Its performance was significantly
better than random ordering, meaning that the algorithm was able to acquire useful ordering
knowledge. Our results were slightly better than existing static ordering algorithms handcrafted by experts. This result is significant if we compare it to applications of learning
systems to other domains. We would surely appreciate an induction algorithm that produces
a classifier with performance comparable to that of an expert system built by a medical
expert. A chess learning program that is able to learn an evaluation function that is
equivalent in power to a function produced by an expert will be similarly appreciated.
We therefore claim that the ability of or learning algorithm to achieve results that are as
good as manually designed algorithms indicates strong learning capabilities.
In most learning algorithms, we expect to get better performance when the testing
problems are similar to the training problems. In the verification domain, we expect to get
good results when the testing and training models come from a family of similar models.
There are several occasions in which models are similar enough to be considered a family:
Models of different versions of a design under development; models which are reduced
versions of a design, each with respect to a different property; models of designs with
a similar functionality like ALUs, arbiters, pipelines and bus controllers. Unfortunately,
due to the difficulty in obtaining suitable real models for our experiments, we ended up
experimenting with training and testing models that are not related. We expect to achieve
much better results for related models.
Compared with previous work in machine learning, our precedence relations most resemble these of Utgoff and Saxena (1987). Our ordering approach, in which we construct a
total order of elements by finding the precedence relation between them, is in essence the
same as that of Cohen, Schapire and Singer (1999). Specifically, the second ordering algorithm of Cohen, Schapire and Singer also uses the topological ordering approach to create
an order. Their algorithm initially finds in the precedence graph the connected components
and, after ordering them (using topological ordering), finds the order in each connected
component. However, since the quality of the final order is determined by the sum of constraints adhered to, all topological orders have theoretically the same quality. We found
that in the BDD variable ordering problem not all topological orders have the same quality.
Thus, we developed a topological ordering that takes into consideration those features that
we recognized as true for variable orders in BDDs.
Our work also differs from previous research in that it introduces the notion of contextbased precedence. Using this concept we were able to create an ordering algorithm that
produces the best results.
There are several directions for extending the work described here. One problem with
our current empirical evaluation is the small number of models. In spite of our extensive
109

Grumberg, Livne, & Markovitch

search efforts we were not able to find a large set of suitable examples. The majority of the
known examples are very simple (compared with real industry problems), producing small
model BDD representations with very little variance. We are currently in the process of
approaching companies that use model checking. In this way we hope to obtain additional
real models, preferably from families of the designs described above.
The attributes of the variable pairs were partially based on substantive research in the
field of static algorithms. We could not find such information on which to base contextbased variable attributes. Thus, we also based these attributes on those of the variable
pairs. Nevertheless, we believe that human experts in this field may have information that
can lead to the development of better attributes. The development of such attributes should
help to capture in a better way the context-based precedence concept.
Given our current results, an immediate question is whether the concept of precedence
pairs (context and non-context) can be extended to triplets, quadruples, etc. Such precedence relations take into account a larger part of the model and thus may possess valuable
information. Such an extension, however, could carry high cost during learning and, even
worse, during ordering.
Our framework for solving the static variable ordering problem was shown to be valuable
in model checking. Model checking is only one field of verification in which BDDs are used.
BDDs are also used in verification for simulation and equivalence checking. Our algorithm
can be applied for these problems as well. We are unaware of special static variable ordering
algorithms for these fields, but if such do exist, variable attributes based on these algorithms
should be added.
The most interesting future direction is the generalization of our framework for other
ordering problems. Ordering a set of objects is a very common sub-task in problem solving.
The most common approach for tackling such a problem is to evaluate each object using
a utility function and order the objects according to their utilities. Such an approach is
taken, for example, by most heuristic search algorithms. In many problems, however, it is
much easier to determine the relative order of two objects than to give each object a global
utility value. Few works have applied learning to ordering techniques that are not utility
based (Cohen et al., 1999). The algorithms described in Section 3 and Section 4 can be
applied to any ordering problem if a method for evaluating training orders is available, and
a set of meaningful pair features can be defined.
We believe that the research presented in this paper contributes both to the field of
machine learning and to the field of formal verification. For machine learning, it presents
a new methodology for learning to order elements. This methodology can be applied to
various kinds of ordering problems. For formal verification, it presents new learning-based
techniques for variable ordering. Finding good variable ordering techniques is one of the
key problems in this field.

Appendix A. Variable Pair Attributes
The following definitions and symbols will be used in the attribute description:
• N S(vi ) for the next state function of variable v i
• vi . vj to indicate that variable vi depends on variable vj ’s value (vj ∈ NS(vi ))
110

Learning to Order BDD Variables in Verification

• vi ./ vj to indicate that variable vi interacts with variable vj (vi . vj and/or vj . vi )
• # variables for the number of variables in the model
A.1 Variable Attributes
The attributes computed for vi are
1. Variable-dependence: the number of variables upon which v i depends (|{vj |vi . vj }|)
2. Variable-dependency: the number of variables that depend on v i (|{vj |vj . vi }|)
3. Variable-dependency-size: the sum of function sizes that depend on v i (

P

vj .vi

|{vk ∈ N S(vj )}|)

4. Variable-dependency-average-size:
the average function size dependent on v i
!
P
vj .vi

|{vk ∈N S(vj )}|

|{vj |vj .vi }|

5. Variable-dependence-dependency-ratio: the proportion between the number of vari!
ables on which vi depends and the number of variables that depend on it

|{vj |vi .vj }|
|{vj |vj .vi }|

6. Variable-interaction: the number of variables interacting with v i (|{vj |vi ./ vj }|)
7. Variable-dependence-percentage:
the percentage of model variables on which v i de!
pends

|{vj |vi .vj }|
#variables

8. Variable-dependency-percentage:
the percentage of model variables that depend on v i
!
|{vj |vj .vi }|
#variables

9. Variable-interaction-percentage:
the percentage of model variables interacting with v i
!
|{vj |vi ./vj }|
#variables

A.2 Variable Pair Attributes
The attributes computed for hvi , vj i are
• Symmetric attributes
1. Pair-minimal-distance: the minimal distance between v i ,vj in the model graph
2. Pair-minimal-distance-eval: the minimal distance between v i ,vj in the model
graph divided by the number of times it appears
3. Pair-minimal-dependency: the number of variables that depend on the pair with
the minimal distance
4. Pair-minimal-dependency-eval: the minimal distance between v i ,vj in the model
graph divided by number of variables that depend on the minimal distance
111

Grumberg, Livne, & Markovitch

5. Pair-minimal-connection-class: the minimal distance between the v i ,vj connection class (the operators that can be applied on two variables were divided into
classes and the operator that connected the two variables in the minimal distance
class was extracted)
6. Pair-minimal-maximal: the maximal sized NS(v k ) connecting the pair in minimal distance
7. Pair-minimal-maximal-eval: the minimal distance between v i ,vj in the model
graph divided by maximal sized NS(v k ) connecting the pair in minimal distance
8. Pair-sum-distance: the sum of distances between v i ,vj in the model graph
9. Pair-dependency-ns-size: the sum of NS(v k ) sizes that are dependent on vi and
P
vj ( vk .vi & vk .vj |vl ∈ N S(vk )|)

10. Pair-sum-distance-dependency-ratio: the sum of distances between v i ,vj in the
model graph divided by sum of NS(vk ) sizes that are dependent on vi and vj
11. Pair-mutual-dependence: the number of variables on which both v i ,vj depend
(|{vk |vi . vk & vj . vk }|)
12. Pair-mutual-dependency: the number of variables that depend on v i and vj
(|{vk |vk . vi & vk . vj }|)
13. Pair-mutual-interaction: the number of variables that interact with v i and vj
(|{vk |vi ./ vk & vi ./ vk }|)

14. Pair-mutual-ns-dependency: v i depends on vj and vj depends on vi - (vi . vj & vj . vi )
• Non-Symmetric attributes ( those computed for the pair hv i , vj i with relevance to vi )
1. Pair-ns-distance: the distance between v i ,vj in NS(vi )
2. Pair-dependence-ratio: the ratio between the number of variables !
that v i depends
on and the number of variables that v j depends on

|{vl |vi .vl }|
|{vm |vj .vm }|

3. Pair-dependency-ratio: the ratio between the number of variables
! that depend
on vi and the number of variable that depend on v j

|{vl |vl .vi }|
|{vm |vm .vj }|

4. Pair-interaction-ratio: the ratio between the number of variables that !interact
|{vl |vi ./vl }|
|{vm |vj ./vm }|

with vi and the number of variables that interact with v j

5. Pair-dependence-flag: the number of variables that v i depends on
! compared to
the number of variables that vj depends on

|{vl |vi .vl }|
|{vm |vj .vm }|

>= 1.0

6. Pair-interaction-flag: the number of variables that interact with v i compared
to
!
the number of variables that vj interacts with

112

|{vl |vi ./vl }|
|{vm |vj ./vm }|

>= 1.0

Learning to Order BDD Variables in Verification

References
Akers, S. (1978). Binary decision diagrams. IEEE Transactions on Computers, C-27 (6),
509–516.
Aziz, A., Tasiran, S., & Brayton, R. (1994). BDD variable ordering for interacting finite
state machines. In Proceedings of the 31st Design Automation Conference (DAC), pp.
283–288, San Diego, California.
Beer, I., Ben-David, S., Eisner, C., & Landver, A. (1996). RuleBase: An industry-oriented
formal verification tool. In Proceedings of the 33rd Design Automation Conference
(DAC), pp. 655–660, Las Vegas, Nevada. IEEE Computer Society Press.
Bern, J., Meinel, C., & Slobodova, A. (1995). Efficient OBDD-based boolean manipulation in CAD beyond current limits. In Proceedings of the 32nd Design Automation
Conference (DAC), pp. 408–413, San Francisco, California.
Bollig, B., Lobbing, M., & Wegener, I. (1995). Simulated annealing to improve variable orderings for OBDDs. In Proceedings of the International Workshop on Logic Synthesis,
pp. 5b:5.1–5.10, Granlibakken, California.
Bollig, B., & Wegener, I. (1996). Improving the variable ordering of OBDDs is NP-complete.
IEEE Transactions on Computers, 45 (9), 993–1002.
Breiman, L., Frieman, J. H., Olshen, R. A., & Stone, C. J. (1984). Classification and
Regression Trees. Wadsworth Publishing Company, Belmont, California, U.S.A.
Brglez, F., Bryan, D., & Kozminski, K. (1989). Combinational profiles of sequential benchmark circuits. In Proceedings of the International Symposium on Circuits and Systems,
pp. 1924–1934, Portland, Oregon.
Broos, P., & Branting, K. (1994). Compositional instance-based learning. In Proceedings
of the 12th National Conference on Artificial Intelligence, pp. 651–656, Menlo Park,
California. AAAI Press.
Bryant, R. (1986). Graph-based algorithms for boolean function manipulation. IEEE Transactions on Computers, C-35 (8), 677–691.
Butler, K. M., Ross, D. E., & Rohit Kapur, a. M. R. M. (1991). Heuristics to compute
variable orderings for efficient manipulation of ordered binary decision diagrams. In
Proceedings of the 28th Design Automation Conference (DAC), pp. 417–420, San Francisco, California.
Chamberlain, R. (1995). Parallel logic simulation of VLSI systems. In Proceedings of the
32nd Design Automation Conference (DAC), pp. 139–143, San Francisco, California.
Chung, P., Hajj, I., & Patel, J. (1993). Efficient variable ordering heuristics for shared
ROBDD. In Proceedings of the International Symposium on Circuits and Systems,
pp. 1690–1693, Chicago, Illinois.
Clarke, E. M., Emerson, F. A., & Sistla, A. P. (1986). Automatic verification of finite
state concurrent systems using temporal logic specifications. ACM Transactions on
Programming Languages and Systems, 8 (2), 244–263.
113

Grumberg, Livne, & Markovitch

Cohen, W. W., Schapire, R. E., & Singer, Y. (1999). Learning to order things. Journal of
Artificial Intelligence Research, 10, 243–270.
Cover, T. M., & Hart, P. E. (1967). Nearest neighbor pattern classification. IEEE Transactions on Information Theory, 13, 21–27.
Drechsler, R., Becker, B., & Gockel, N. (1996). Genetic algorithm for variable ordering of
OBDDs. IEEE Proceedings on Computers and Digital Techniques, 143 (6), 364–368.
Drechsler, R., Drechsler, N., & Slobodova, A. (1998). Fast exact minimization of BDDs.
In Proceedings of the 35th Design Automation Conference (DAC), pp. 200–205, San
Francisco, California.
Duda, R. O., & Hart, P. E. (1973). Pattern Classification and Scene Analysis. John Wiley
and Sons, New York.
Even, G., Naor, J., Schieber, B., & Sudan, M. (1998). Approximating minimum feedback
sets and multi-cuts in directed graphs. Algorithmica, 20, 151–174.
Friedman, J. (1977). A recursive partitioning decision rule for nonparametric classification.
IEEE Transactions on Computers, C-26 (4), 404–408.
Friedman, S. J., & Supowit, K. J. (1987). Finding the optimal variable ordering for binary
decision diagrams. In Proceedings of the 24th Design Automation Conference (DAC),
pp. 151–174, Miami Beach, Florida.
Fujii, H., Ootomo, G., & Hori, C. (1993). Interleaving based variable ordering methods
for ordered binary decision diagrams. In Proceedings of the IEEE/ACM international
conference on Computer-aided design, pp. 38–41, Santa Clara, California.
Fujita, M., Fujisawa, H., & Kawato, N. (1988). Evaluation and improvements of boolean
comparison method based on binary decision diagrams. In Proceedings of the International Conference on Computer-Aided Design, pp. 2–5, Santa Clara, California.
Fujita, M., Fujisawa, H., & Matsunaga, Y. (1993). Variable ordering algorithms for ordered
binary decision diagrams and their evaluation. IEEE Transactions on Computer-Aided
Design of Integrated Circuits and Systems, 12 (1), 6–12.
Fujita, M., Kukimoto, Y., & Brayton, R. (1995). BDD minimization by truth table permutations. In Proceedings of the International Workshop on Logic Synthesis, pp. 596–599,
Lake Tahoe, California.
Hunt, E., Marin, J., & Stone, P. (1966). Experiments in Induction. Academic Press, New
York.
Ishiura, N., Sawada, H., & Yajima, S. (1991). Minimization of binary decision diagrams
based on exchanges of variables. In Proceedings of the International Conference on
Computer-Aided Design, pp. 472–475, Santa Clara, California.
Iyer, M., & Abramovici, M. (1996). FIRE: A fault-independent combinational redundancy
identification algorithm. IEEE Transactions on VLSI Systems, 4, 295–301.
Jain, J., Adams, W., & Fujita, M. (1998). Sampling schemes for computing variable orderings. In Proceedings of the International Conference on Computer-Aided Design, pp.
631–638, San Jose, California.
114

Learning to Order BDD Variables in Verification

Karp, R. M. (1972). Reducibility among combinatorial problems. In Miller, R., & Thatcher,
J. (Eds.), Complexity of Computer Computations, pp. 85–103, New York. Plenum
Press.
Kaufmann, M., & Pixley, C. (1997). Intertwined development and formal verification of a
60x bus model. In Proceedings of the International Conference on Computer Design:
VLSI in Computers and Processors (ICCD’ 97), pp. 25–30, Austin, Texas.
Konuk, H., & Larrabee, R. (1993). Explorations of sequential atpg using boolean satisfiability. In Proceedings of the 11th IEEE VLSI Test Symposium, pp. 85–90.
Lindenbaum, M., Markovitch, S., & Rusakov, D. (1999). Selective sampling for nearest
neighbor classifiers. In Proceedings of the Sixteenth national confernce on Artificial
Intelligence, pp. 366–371, Orlando, Florida.
Long, D., Iyer, M., & Abramovici, M. (1995). Identifying sequentially untestable faults
using illegal states. In Proceedings of the 13th IEEE VLSI Test Symposium, pp. 4–11,
Los Alamitos, California.
Malik, S., Wang, A., Brayton, R., & Sangiovanni-Vincentelli, A. (1988). Logic verification
using binary decision diagrams in a logic synthesis environment. In Proceedings of the
International Conference on Computer-Aided Design, pp. 6–9, Santa Clara, California.
McMillan, K. (1993). Symbolic Model Checking: An Approach to the State Explosion Problem. Kluwer Academic Publisher.
Meinel, C., & Slobodova, A. (1997). Speeding up variable ordering of OBDDs. In Proceedings of the International Conference on Computer-Aided Design, pp. 338–343, Austin,
Texas.
Meinel, C., & Slobodova, A. (1998). Sample method for minimization of OBDDs. In Proceedings of the Conference on Current Trends in Theory and Practice of Informatics,
Vol. 1521 of Lecture Notes in Computer Science, pp. 419–428. Springer-Verlag, New
York.
Meinel, C., Somenzi, F., & Theobald, T. (1997). Linear sifting of decison diagrams. In
Proceedings of the 34th Design Automation Conference (DAC), pp. 202–207, Anaheim,
California.
Mercer, M. R., Kapur, R., & Ross, D. E. (1992). Functional approaches to generating
orderings for efficient symbolic representations. In Proceedings of the 29th Design
Automation Conference (DAC).
Minato, S., Ishiura, N., & Yajima, S. (1990). Shared binary decision diagrams with attributed edges for efficient boolean function manipulation. In Proceedings of the 27th
Design Automation Conference (DAC), pp. 52–57, Orlando, Florida.
Nakamura, K., Takagi, K., Kimura, S., & Watanabe, K. (1998). Waiting false path analysis
of sequential logic circuits for performance optimization. In Proceedings of the International Conference on Computer-Aided Design, pp. 392–395, San Jose, California.
Panda, S., & Somenzi, F. (1995). Who are the variables in your neighbourhood. In Proceedings of the International Conference on Computer-Aided Design, pp. 74–77, San
Jose, California.
115

Grumberg, Livne, & Markovitch

Panda, S., Somenzi, F., & Plessier, B. F. (1994). Symmetry detection and dynamic variable
ordering of decision diagrams. In Proceedings of the International Conference on
Computer-Aided Design, pp. 628–631, San Jose, California.
Parker, D. B. (1985). Learning logic. Tech. rep. TR-47, Center for Computational Research
in Economics and Management Science, MIT, Cambridge, MA.
Queille, J., & Sifakis, J. (1981). Specification and verification of concurrent systems in
cesar. In Dezani-Ciancaglini, M., & Montanari, U. (Eds.), Proceedings of the 5th
International Symposium on Programming, Vol. 137 of Lecture Notes in Computer
Science, pp. 337–351. Springer-Verlag, New York.
Quinlan, J. R. (1979). Discovering rules by induction from large collections of examples.
In Expert Systems in the Micro Electronic Age, pp. 168–201. Edinburgh University
Press.
Quinlan, J. R. (1986). Induction of decision trees. Machine Learning, 1 (1), 81–106.
Rudell, R. (1993). Dynamic variable ordering for ordered binary decision diagrams. In
Proceedings of the International Conference on Computer-Aided Design, pp. 42–47,
Santa Clara, California.
Rumelhart, D. E., & McClelland, J. L. (1986). Parallel distibuted processing: Exploration
in the microstructure of cognition.. Vol. 1,2. MIT Press.
Touati, H., Savoj, H., Lin, B., Brayton, R., & Sangiovanni-Vincetelli, A. (1990). Implicit
state enumeration of finite state machines using BDDs. In Proceedings of the International Conference on Computer-Aided Design, pp. 130–133, Santa Clara, California.
Utgoff, P., & Clouse, J. (1991). Two kinds of training information for evaluation function
learning. In Proceedings of the Ninth National Conference on Artificial Intelligence,
pp. 596–600, Anaheim, California.
Utgoff, P. E., & Saxena, S. (1987). Learning a preference predicate. In Proceedings of the
Fourth International Workshop on Machine Learning, pp. 115–121, Irvine, California.
Wahba, A., & Borrione, D. (1995). Design error diagnosis in sequential circuits. Lecture
Notes in Computer Science, 987, 171–188.
Widrow, B., & Hoff, M. E. (1960). Adaptive switching circuits. In 1960 IRE WESCON
Convention Record, pp. 96–104, New York.
Zhuang, N., Benten, M., & Cheung, P. (1996). Improved variable ordering of BDDs with
novel genetic algorithm. In Proceedings of the International Symposium on Circuits
and Systems., Vol. 3, pp. 414–417, Atlanta, Georgia.

116

Journal of Artificial Intelligence Research 18 (2003) 183-215

Submitted 9/01; published 2/03

An Evolutionary Algorithm with Advanced Goal and Priority
Specification for Multi-objective Optimization
Kay Chen Tan
Eik Fun Khor
Tong Heng Lee
Ramasubramanian Sathikannan

ELETANKC@NUS.EDU.SG
EIKFUN.KHOR@SEAGATE.COM
ELELEETH@NUS.EDU.SG
K.SATHI@GSK.COM

National University of Singapore
4 Engineering Drive 3, Singapore 117576
Republic of Singapore

Abstract
This paper presents an evolutionary algorithm with a new goal-sequence domination scheme for
better decision support in multi-objective optimization. The approach allows the inclusion of
advanced hard/soft priority and constraint information on each objective component, and is capable
of incorporating multiple specifications with overlapping or non-overlapping objective functions via
logical “OR” and “AND” connectives to drive the search towards multiple regions of trade-off. In
addition, we propose a dynamic sharing scheme that is simple and adaptively estimated according to
the on-line population distribution without needing any a priori parameter setting. Each feature in the
proposed algorithm is examined to show its respective contribution, and the performance of the
algorithm is compared with other evolutionary optimization methods. It is shown that the proposed
algorithm has performed well in the diversity of evolutionary search and uniform distribution of
non-dominated individuals along the final trade-offs, without significant computational effort. The
algorithm is also applied to the design optimization of a practical servo control system for hard disk
drives with a single voice-coil-motor actuator. Results of the evolutionary designed servo control
system show a superior closed-loop performance compared to classical PID or RPT approaches.

1. Introduction
Many real-world design tasks involve optimizing a vector of objective functions on a feasible
decision variable space. These objective functions are often non-commensurable and in
competition with each other, and cannot be simply aggregated into a scalar function for
optimization. This type of problem is known as multi-objective (MO) optimization problem, for
which the solution is a family of points known as a Pareto-optimal set (Goldberg, 1989), where
each objective component of any member in the set can only be improved by degrading at least one
of its other objective components. To obtain a good solution via conventional MO optimization
techniques such as the methods of inequalities, goal attainment or weighted sum approach, a
continuous cost function and/or a set of precise settings of weights or goals are required, which are
usually not well manageable or understood (Grace, 1992; Osyczka, 1984).
Emulating the Darwinian-Wallace principle of “survival-of-the-fittest” in natural selection and
genetics, evolutionary algorithms (EAs) (Holland, 1975) have been found to be effective and
efficient in solving complex problems where conventional optimization tools fail to work well.
©2003 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

TAN, KHOR, LEE, & SATHIKANNAN

The EAs evaluate performances of candidate solutions at multiple points simultaneously, and are
capable of approaching the global optimum in a noisy, poorly understood and/or non-differentiable
search space (Goldberg, 1989).
Since Schaffer’s work (1985), evolutionary algorithm-based search techniques for MO
optimization have been gaining significant attention from researchers in various disciplines. This
is reflected by the high volume of publications in this topic in the last few years as well as the first
international conference on Evolutionary Multi-criteria Optimization (EMO’01) held in March
2001 at Zurich, Switzerland. Readers may refer to (Coello Coello, 1996; 1999; Deb, 2001;
Fonseca, 1995; Van Veldhuizen & Lamont, 1998; Zitzler & Thiele, 1999) on detailed
implementation of various evolutionary techniques for MO optimization.
Unlike most conventional methods that linearly combine multiple attributes to form a composite
scalar objective function, the concept of Pareto's optimality or modified selection scheme is
incorporated in an evolutionary MO optimization to evolve a family of solutions at multiple points
along the trade-off surface simultaneously (Fonseca & Fleming, 1993). Among various selection
techniques for evolutionary MO optimization, the Pareto-dominance scheme (Goldberg, 1989)
that assigns equal rank to all non-dominated individuals is an effective approach for comparing the
strengths among different candidate solutions in a population (Fonseca & Fleming, 1993). Starting
from this principle, Fonseca and Fleming (1993) proposed a Pareto-based ranking scheme to
include goal and priority information for MO optimization. The underlying reason is that certain
user knowledge may be available for an optimization problem, such as preferences and/or goals to
be achieved for certain objective components. This information could be useful and incorporated
by means of goal and priority vectors, which simplify the optimization process and allow the
evolution to be directed towards certain concentrated regions of the trade-offs. Although the
ranking scheme is a good approach, it only works for a single goal and priority vector setting,
which may be difficult to define accurately prior to an optimization process for real-world
optimization problems. Moreover, the scheme does not allow advanced specifications, such as
logical “AND” and “OR” operations among multiple goals and priorities.
Based on the Pareto-based domination approach, this paper reformulates the domination scheme
to incorporate advanced specifications for better decision support in MO optimization. Besides the
flexibility of incorporating goal and priority information on each objective component, the
proposed domination scheme allows the inclusion of hard/soft priority and constraint
specifications. In addition, the approach is capable of incorporating multiple specifications with
overlapping or non-overlapping objective functions via logical “OR” and “AND” connectives to
drive the search towards multiple regions of the trade-off. The paper also proposes a dynamic
sharing scheme, which computes the sharing distance adaptively based upon the on-line
population distribution in the objective domain without the need of any a priori parameter setting.
The dynamic sharing approach is essential since it eliminates the difficulty of manually finding an
appropriate sharing distance prior to an optimization process. The choice of such a distance would
be sensitive to the size and geometry of the discovered trade-offs (Coello Coello, 1999; Fonseca &
Fleming, 1993).
This paper is organized as follows: The formulation of the proposed domination scheme for
better decision support is presented in Section 2. A dynamic sharing scheme that estimates the
184

AN EVOLUTIONARY ALGORITHM FOR MULTI-OBJECTIVE OPTIMIZATION

sharing distance adaptively based upon the on-line population distribution is described in Section 3.
Section 4 examines the usefulness and contribution of each proposed feature in the algorithm. The
performance comparison of the proposed algorithm with other evolutionary MO optimization
methods is also shown in the section. Practical application of the proposed algorithm to servo
control system design optimization is given in Section 5. Conclusions are drawn in Section 6.

2. Advanced Goal and Priority Specifications for MO Optimization
A multi-objective optimization problem seeks to optimize a vector of non-commensurable and
often competing objectives, i.e., it tends to find a parameter set P for Min F ( P ) , P ∈ R n , where P
P∈Φ

= {p1, p2,…, pn} is a n-dimensional vector having n decision variables or parameters, and Φ defines
a feasible set of P. F = {f1, f2,…, fm} is an objective vector with m objectives to be minimized. For
a MO optimization problem with simple goal or priority specification on each objective function,
the Pareto-based ranking scheme is sufficient (Fonseca & Fleming, 1993). In practice, however, it
may be difficult to define an accurate goal and priority setting in a priori to an optimization process
for real-world optimization problems. Besides goal and priority information, there could also be
additional supporting specifications that are useful or need to be satisfied in the evolutionary search,
such as optimization constraints or feasibility of a solution. Moreover, the Pareto-based ranking
scheme does not allow advanced specifications, such as logical “AND” and “OR” operations
among multiple goals and priorities for better decision support in complex MO optimization. In
this section, a new goal-sequence Pareto-based domination scheme is proposed to address these
issues and to provide hard/soft goal and priority specifications for better controls in the
evolutionary optimization process.
2.1 Pareto-based Domination with Goal Information

This section is about an effective two-stage Pareto-based domination scheme for MO optimization,
which is then extended to incorporate advanced soft/hard goal and priority specifications. Consider
a minimization problem. An objective vector Fa is said to dominate another objective vector Fb
based on the idea of Pareto dominance, denoted by Fa π Fb, iff f a ,i ≤ f b,i ∀ i ∈ {1,2,..., m} and
f a , j < f b, j for some j ∈ {1,2,..., m} . Adopting this basic principle of Pareto dominance, the first

stage in the proposed domination approach ranks all individuals that satisfy the goal setting to
minimize the objective functions as much as possible. It assigns the same smallest cost for all
non-dominated individuals, while the dominated individuals are ranked according to how many
individuals in the population dominate them. The second stage ranks the remaining individuals that
do not meet the goal setting based upon the following extended domination scheme. Let Fa
Fb

)
a

)
a

and

denote the component of vector Fa and Fb respectively, in which Fa does not meet the
185

TAN, KHOR, LEE, & SATHIKANNAN

goal G . Then for both Fa and Fb that do not totally satisfy the goal G , the vector Fa is said
to dominate vector Fb (denoted by Fa π Fb ) iff
G

)
a

)
a

( Fa π Fb ) or (abs( Fa -G) π abs( Fb -G))

(1)

For this, the rank begins from one increment of the maximum rank value obtained in the first
stage of the cost assignment. Therefore individuals that do not meet the goal will be directed toward
the goal and the infinum in the objective domain, while those that have satisfied the goal will only
be directed further towards the infinum. Note that the domination comparison operator is
non-commutative ( Fa π Fb ≠ Fb π Fa ). Figure 1 shows an optimization problem with two
G

G

objectives f1 and f2 to be minimized. The arrows in Figure 1 indicate the transformation according
to F' = F − G of the objective function F to F' for individuals that do not satisfy the goal, with
the goal as the new reference point in the transformed objective domain. It is obvious that the
domination scheme is simple and efficient for comparing the strengths among partially or totally
unsatisfactory individuals in a population. For comparisons among totally satisfactory individuals,
the basic Pareto-dominance is sufficient.
To study the computational efficiency in the approach, the population is divided into two
separate groups classified by the goal satisfaction, and the domination comparison is performed
separately in each group of individuals. The total number of domination comparisons for the
two-stage domination scheme is Nc = [ nG( ( nG( -1)+ nG) ( nG) -1)] where nG( is the number of
individuals that completely satisfy the goal G and nG) is the number of individuals partially satisfy
or completely not satisfy the goal G. Note that nG( + nG) = N for a population size of N. Hence, in
any generation, Nc is always less than or equal to the total number of domination comparisons
among all individuals in a population (each individual in the population is compared with (N-1)
individuals), i.e., Nc ≤ Nnc = N ( N − 1) . In the next section, the two-stage Pareto-based
domination scheme will be extended to incorporate soft/hard priority specifications for advanced
MO optimization.

186

AN EVOLUTIONARY ALGORITHM FOR MULTI-OBJECTIVE OPTIMIZATION

f2

6’
6

6’

5

5’

5

G
4
1

6
2
1

6

f1

Figure 1: Advanced Pareto Domination Scheme with Goal Information
2.2 Goal-Sequence Domination Scheme with Soft/Hard Priority Specifications

One of the advanced capabilities in evolutionary MO optimization is to incorporate cognitive
specification, such as priority information that indicates the relative importance of the multiple
tasks to provide useful guidance in the optimization. Consider a problem with multiple
non-commensurable tasks, where each task is assigned a qualitative form of priority indicating its
relative importance. In general, there exist two alternatives to accomplish these tasks, i.e., to
consider one task at a time in a sequence according to the task priority or to accomplish all tasks at
once before considering any individual task according to the task priority. Intuitively, the former
approach provides good optimization performance for tasks with higher priority and may result in
relatively poor performance for others. This is due to the fact that optimizing the higher priority
tasks may be at the performance expense of the lower priority tasks. This definition of priority is
denoted as “hard” priority in this paper. On the other hand, the latter approach provides a
distributed approach in which all tasks aim at a compromise solution before the importance or
priority of individual task is considered. This is defined as "soft" priority. Similarly, priorities for
different objective components in MO optimization can be classified as "hard" or "soft" priority.
With hard priorities, goal settings (if applicable) for higher priority objective components must be
satisfied first before attaining goals with lower priority. In contrast, soft priorities will first optimize
the overall performance of all objective components, as much as possible, before attaining any goal
setting of an individual objective component in a sequence according to the priority vector.
To achieve greater flexibility in MO optimization, the two-stage Pareto-based domination
scheme is further extended to incorporate both soft and hard priority specifications with or without
goal information by means of a new goal-sequence domination. Here, instead of having one priority
vector to indicate priorities among the multiple objective components (Fonseca & Fleming, 1998),
two kinds of priority vectors are used to accommodate the soft/hard priority information. Consider
an objective priority vector, Pf ∈ ℵ1xm and a goal priority vector, Pg ∈ ℵ1xm, where Pf(i) represents
the priority for the ith objective component F(i) that is to be minimized; Pg(i) denotes the priority for
187

TAN, KHOR, LEE, & SATHIKANNAN

the ith goal component G(i) that is to be attained; m is the number of objectives to be minimized and
ℵ denotes the natural numbers. The elements of the vector Pf and Pg can take any value in the
natural numbers, with a lower number representing a higher priority and zero representing a “don’t
care” priority assignment. Note that repeated values among the elements in Pf and Pg can be used to
indicate equal priority provided that Pf(i) ≠ Pg(i) ∀ i ∈ {1, 2, …, m}, avoiding contradiction of the
priority assignment. With the combination of an objective priority vector Pf and a goal priority
vector Pg, soft and hard priorities can be defined provided that there is more than one preference
among the objective components as given by
∃ {(Pf : Pf (j) > 1) ∨ (Pg : Pg (j) > 1)} for some j ∈ {1, 2, …, m}
(2)
Based on this, a priority setting is regarded as “soft” iff
∀ i ∈ {1, 2, …, m} ∃ {(Pf : Pf (i) = 1) ∨ (Pg : Pg (i) = 1)}
(3)
else, the priority is denoted as “hard”.
For example, the settings of Pf = [1, 1, 2, 2] and Pg = [0, 0, 0, 0] for a 4-objective optimization
problem indicate that the first and second objective components are given top priority to be
minimized, as much as possible, before considering minimization of the third and fourth objective
components. Since all elements in Pg are zeros (don’t care), no goal components will be considered
in the minimization in this case. On the other hand, the setting of Pf = [0, 0, 0, 0] and Pg = [1, 1, 2, 2]
imply that the first and second objective components are given the first priority to meet their
respective goal components before considering the goal attainment for the third and fourth
objective components. The above two different priority settings are all categorized as hard
priorities since in both cases, objective components with higher priority are minimized before
considering objective components with lower priority. For soft priority as defined in Eq. 3, the
objective priority vector and goal priority vector can be set as Pg = [1, 1, 1, 1] and Pf = [2, 2, 3, 3],
respectively. This implies that the evolution is directed towards minimizing all of the objective
components to the goal region before any attempt to minimize the higher priority objective
components in a sequence defined by the priority vector.
To systematically rank all individuals in a population to incorporate the soft/hard priority
specifications, a sequence of goals corresponding to the priority information can be generated and
represented by a goal-sequence matrix G’ where the kth row in the matrix represents the goal vector
for the corresponding kth priority. The number of goal vectors to be generated depends on the last
level of priority z, where z is the maximum value of any one element of Pg and Pf as given by
z = max[Pg(i), Pf(j)]

∀ i, j ∈ {1,2,..., m}

(4)

For this, the goal vectors with kth priority in the goal-sequence matrix G’k(i) for the priority index k
= 1, 2,…, z is defined as

G (i )

∀i = 1,..., m, G’ k (i ) =  min[F j =1,..., N (i )]
max[F
j =1,..., N (i )]


if Pg (i ) = k
if P f (i ) = k

(5)

otherwise

where N denotes the population size; min[F j =1,..., N (i )] and max[F j =1,..., N (i )] represents the
minimum and maximum value of the ith objective function from the on-line population distribution,
188

AN EVOLUTIONARY ALGORITHM FOR MULTI-OBJECTIVE OPTIMIZATION

respectively. In Eq. 5, for any ith objective component of any k priority level, the reason for
assigning G’k(i) with G(i) is to guide the individuals towards the goal regions; min[F j =1,..., N (i )] is
to minimize the corresponding objective component as much as possible; and max[F j =1,..., N (i )] is
to relax the requirements on the individuals to give other objective components more room for
improvement. According to Eq. 5, the goal-sequence matrix G’k(i) is dynamic at each generation, as
the values of min[F j =1,..., N (i )] and max[F j =1,..., N (i )] are dynamically computed depending on the
on-line population distribution. After computing the sequence of goals G’k ∀ k ∈ {1, 2,…, z}, the
individuals are first ranked according to the computed goal G’1 for the first priority. Then each
group of individuals that has the same ranks will be further compared and ranked according to next
goal G’2 for the second priority to further evaluate the individuals' domination in a population. In
general, this ranking process continues until there is no individual with the same rank value or after
ranking the goal G’z that has the lowest priority in the goal-sequence matrix. Note that individuals
with the same rank value will not be further evaluated for those components with “don’t care”
assignments.
With the proposed goal-sequence domination scheme as given in Eq. 5, both hard and soft
priority specifications can be incorporated in MO optimization. Without loss of generality, consider
a two-objective optimization problem, with f1 having a higher priority than f2, as well as a goal
setting of G = [g1, g2]. For soft priority optimization as defined in Eq. 3, the goal priority vector and
objective priority vector can be set as Pg = [1, 1] and Pf = [2, 0], respectively. Let min[F(i)] and
max[F(i)] denote the minimum and maximum value of the i-objective component of F in a
population, respectively. The relevant goals in the goal-sequence matrix for each priority level as
defined in Eq. 5 are then given as G’1 = G for the first priority and G’2 = {min[F(1)], max[F(2)]}
for the second priority. The goal-sequence domination scheme for the two-objective minimization
problem is illustrated in Figure 2. Here, the rank value of each individual is denoted by r1 → r2,
where r1 and r2 is the rank value after the goal-sequence ranking of the first and second priority,
respectively. The preference setting indicates that both g1 and g2 are given the same priority to be
attained in the optimization before individuals are further ranked according to the higher priority of
f1. This is illustrated in Figure 3a, which shows the location of the desired Pareto-front (represented
by the dark region) and the expected evolution direction (represented by the curved arrow) in the
objective domain for an example with an unfeasible goal setting G.
For hard priority optimization as defined in Eqs. 2 and 3, the goal priority vector and objective
priority vector can be set as Pg = [1, 2] and Pf = [0, 0], respectively. According to Eq. 5, this gives a
goal sequence of G’1 = [g1, max[F(2)] and G’2 = [max[F(1)], g2] for the first and second priority,
respectively. It implies that g1 is given higher priority than g2 to be attained in the optimization.
Figure 3b shows the location of the desired Pareto-front (represented by dark region) and the
expected evolution direction (represented by curved arrow) in the objective domain. As compared
to the solutions obtained in soft priority optimization, hard priority optimization attempts to attain
the first goal component and leads to the solution with better f1 (higher priority) but worse f2 (lower
priority). It should be mentioned that the setting of soft/hard priority may be subjective or problem
189

TAN, KHOR, LEE, & SATHIKANNAN

dependent in practice. In general, the hard priority optimization may be appropriate for problems
with well-defined goals in order to avoid stagnation with unfeasible goal settings. Soft priority
optimization is more suitable for applications where moderate performance among various
objective components is desired. Besides soft/hard priority information, there may be additional
specifications such as optimization constraints that are required to be satisfied in the optimization.
These specifications could be easily incorporated in MO optimization by formulating the
constraints as additional objective components to be optimized (Fonseca & Fleming, 1998). This
will be discussed in the next section.
f2
G'2

7→7
5→5
5→6

G'1

g2

4→ 4
1→1

7→8
2→3
1→2

g1

f1

Figure 2: Goal-sequence Domination with Goal G = {g1, g2}, Priority Pg = [1, 1] and Pf = [2, 0]

f2

f2

G2'

G '1

max[F(2)]

tinon

o
Evoluti

luo
EEvvooluti

n

desired solution
desired solution

g2

G
G '1

g2

Unfeasible
Region

G

G'2

Unfeasible
Region

g1

g1

f1

max[F(1)]

f1

(a) Soft priority f1 higher than f2
(b) Hard priority f1 higher than f2
Figure 3: Illustration of Soft and Hard Priority with Unfeasible Goal Setting
2.3 Optimization with Soft and Hard Constraints

Constraints often exist in practical optimization problems (Luus et al. 1995; Michalewicz &
Schoenauer, 1996). These constraints are often incorporated in the MO optimization function as
190

AN EVOLUTIONARY ALGORITHM FOR MULTI-OBJECTIVE OPTIMIZATION

one of the objective components to be optimized. It could be in the form of "hard" constraint where
the optimization is directed towards attaining a threshold or goal, and further optimization is
meaningless or not desirable whenever the goal has been satisfied. In contrast, a "soft" constraint
requires that the value of objective component corresponding to the constraint is optimized as much
as possible. An easy approach to deal with both hard and soft constraints concurrently in
evolutionary MO optimization is given here. At each generation, an updated objective function Fx#
concerning both hard and soft constraints for an individual x with its objective function Fx can be
computed in a priori to the goal-sequence domination scheme as given by
 G (i ) if [G (i) is hard] & [F x (i) < G (i )]
#
F x (i) = 
otherwise
F x (i )

∀i = {1,..., m}

(6)

In Eq. 6, any objective component i that corresponds to a hard constraint is assigned to the value
of G(i) whenever the hard constraint has been satisfied. The underlying reason is that there is no
ranking preference for any particular objective component that has the same value in an
evolutionary optimization process, and thus the evolution will only be directed towards optimizing
soft constraints and any unattained hard constraints, as desired.
2.4 Logical Connectives among Goal and Priority Specifications

For MO optimization problems with a single goal or priority specification, the decision maker often
needs to “guess” an appropriate initial goal or priority vector and then manually observe the
optimization progress. If any of the goal components is too stringent or too generous, the goal
setting will have to be adjusted accordingly until a satisfactory solution can be obtained. This
approach obviously requires extensive human observation and intervention, which can be tedious
or inefficient in practice. Marcu (1997) proposed a method of adapting the goal values based upon
the on-line population distribution at every generation. However, the adaptation of goal values is
formulated in such a way that the search is always uniformly directed towards the middle region of
the trade-offs. This restriction may be undesirable for many applications, where the trade-off
surface is unknown or the search needs to be directed in any direction other than the middle region
of the trade-off surface. To reduce human interaction and to allow multiple sets of goal and priority
specifications that direct the evolutionary search towards a different portion of the trade-off surface
in a single run, the goal-sequence domination scheme is extended in this section to enable logical
statements such as “OR” ( ∪ ) and “AND” ( ∩ ) operations among multiple goal and priority
specifications.
These logical operations can be built on top of the goal-sequence domination procedure for each
specification. By doing this, the unified rank value for each individual can be determined and taken
into effect immediately in the evolution towards the regions concerned. Consider ranking an
objective vector Fx by comparing it to the rest of the individuals in a population with reference to
two different specification settings of Si and Sj, where Si and Sj are the specifications concerning
any set of objective functions with or without goals and priorities. Let these ranks be denoted by
rank(Fx, Si) and rank(Fx, Sj), respectively. The “OR” and “AND” operations for the two goal
settings are then defined as,
191

TAN, KHOR, LEE, & SATHIKANNAN

rank ( Fx , S i ∪ S j ) = min{rank ( Fx , S i ), rank ( Fx , S j )}

(7a)

rank ( Fx , S i ∩ S j ) = max{rank ( Fx , S i ), rank ( Fx , S j )}

(7b)

According to Eq. 7, the rank value of vector Fx for an “OR” operation between any two
specifications Si and Sj takes the minimum rank value with respect to the two specification settings.
This is in order to evolve the population towards one of the specifications in which the objective
vector is less strongly violated. In contrast, an “AND” operation takes the maximum rank value in
order to direct the evolutionary search towards minimizing the amount of violation from both of the
specifications concurrently. Clearly, the “AND” and “OR” operations in Eq. 7 can be easily
extended to include general logical specifications with more complex connectives, such as “(Si OR
Sj) AND (Sk OR Sl)”, if desired.

3. Dynamic Sharing Scheme and MOEA Program Flowchart
3.1 Dynamic Sharing Scheme

Fitness sharing was proposed by Goldberg and Richardson (1987) to evolve an equally distributed
population along the Pareto-optimal front or to distribute the population at multiple optima in the
search space. The method creates sub-divisions in the objective domain by degrading an individual
fitness upon the existence of other individuals in its neighborhood defined by a sharing distance.
The niche count, mi = ∑ Nj sh(d i , j ) , is calculated by summing a sharing function over all members of
the population, where the distance di,j represents the distance between individual i and j. The
sharing function is defined as

  d i,j  α

sh(d i , j ) = 1 −  σ share 

0


if d i , j < σ share

(8)

otherwise

with the parameter α being commonly set to 1.
The sharing function in Eq. 8 requires a good setting of sharing distance σshare to be estimated
upon the trade-off surface, which is usually unknown in many optimization problems (Coello
Coello, 1999). Moreover, the size of objective space usually cannot be predefined, as the exact
bounds of the objective space are often undetermined. Fonseca and Fleming (1993) proposed the
method of Kernel density estimation to determine an appropriate sharing distance for MO
optimization. However, the sharing process is performed in the ‘sphere’ space which may not
reflect the actual objective space for which the population is expected to be uniformly distributed.
Miller and Shaw (1996) proposed a dynamic sharing method for which the peaks in the parameter
domain are ‘dynamically’ detected and recalculated at every generation with the sharing distance
remains predefined. However, the approach is made on the assumption that the number of niche
peaks can be estimated and the peaks are all at the minimum distance of 2σshare from each other.
192

AN EVOLUTIONARY ALGORITHM FOR MULTI-OBJECTIVE OPTIMIZATION

Moreover, their formulation is defined in the parameter space to handle multi-modal function
optimization, which may not be appropriate for distributing the population uniformly along the
Pareto-optimal front in the objective domain.
In contrast to existing approaches, we propose a dynamic sharing method that adaptively
computes the sharing distance σshare to uniformly distribute all individuals along the Pareto-optimal
front at each generation. This requires no prior knowledge of the trade-off surface. Intuitively, the
trade-offs for an m-objective optimization problem are in the form of an (m-1) dimensional
hyper-volume (Tan et al. 1999), which can be approximated by the hyper-volume Vpop(n) of a
hyper-sphere as given by,

V pop

(n)

=

 d (n) 
×

2 
 m −1

 ! 
 2 

π ( m −1) / 2

m −1

(9)

where d (n ) is the diameter of the hyper-sphere at generation n. Note that computation of the
diameter d (n ) depends on the curvature of the trade-off curve formed by the non-dominated
individuals in the objective space. For a two-objective optimization problem, the diameter d (n ) is
equal to the interpolated distance of the trade-off curve covered by the non-dominated individuals
as shown in Figure 4. Although computation of d (n ) that accurately represents the interpolated
curvature of the non-dominated individuals distribution is complex, it can be estimated by the
average distance between the shortest and the longest possible diameter given by dmin(n) and dmax(n)
respectively (Tan et al. 1999). Let Fx and Fy denote the objective function of the two furthest
individuals in a population. Then dmin(n) is equal to the minimum length between Fx and Fy, and
dmax(n) can be estimated by d1(n) + d2(n) as shown in Figure 4.
The same procedure can also be extended to any multi-dimensional objective space. To achieve
a uniformly distributed population along the trade-off set, the sharing distance σshare(n) could be
computed as half of the distance between each individual in the (m-1)-dimensional hyper-volume
Vpop(n) covered by the population size N at generation n,
N×

π ( m −1) / 2
 m −1

!
 2 

(n)
)
× (σ share

m −1

(n)
= V pop

(10)

Substituting Eq. 9 into Eq. 10 gives the sharing distance σshare(n) at generation n in term of the
diameter d (n ) and the population size N as given by
(n)
σ share
= N 1 /(1− m ) ×

d (n)
2

(11)

Clearly, Eq. 11 provides a simple computation of σshare that is capable of distributing the
population evenly along the Pareto front, without the need for any prior knowledge of the usually
193

TAN, KHOR, LEE, & SATHIKANNAN

unknown fitness landscape. Moreover, adopting the computation of sharing distance that is
dynamically based upon the population distribution at each generation is also more appropriate and
effective than the method of off-line estimation with pre-assumed trade-off surface as employed in
most existing sharing methods, since the trade-off surface may be changed any time along the
evolution whenever the goal setting is altered.
f2

Fx

dmin(n)
d (n)

Discovered
trade-off curve

d1 (n)
Fy

d2 (n)

f1

Figure 4: The Diameter d (n ) of a Trade-off Curve
3.2 MOEA Program Flowchart

The overall program flowchart of this paper’s multi-objective evolutionary algorithm (MOEA) is
illustrated in Figure 5. At the beginning of the evolution, a population of candidate solutions is
initialized and evaluated according to a vector of objective functions. Based upon the user-defined
specifications, such as goals, constraints, priorities and logical operations, the evaluated individuals
are ranked according to the goal-sequence domination scheme (described in Section 2) in order to
evolve the search towards the global trade-off surface. The resulted rank values are then further
refined by the dynamic sharing scheme (described in Section 3.1) in order to distribute the
non-dominated individuals uniformly along the discovered Pareto-optimal front. If the stopping
criterion is not met, the individuals will undergo a series of genetic operations which are detailed
within the “genetic operations” in Figure 6. Here, simple genetic operations consisting of
tournament selection (Tan et al. 1999), simple crossover with mating restriction that selects
individuals within the sharing distance for mating (Fonseca & Fleming, 1998) as well as simple
mutation are performed to reproduce offspring for the next generation.
After the genetic operations, the newly evolved population is evaluated and combined with the
non-dominated individuals preserved from the previous generation. The combined population is
then subjected to the domination comparison scheme and pruned to the desired population size
according to the Switching Preserved Strategy (SPS) (Tan et al. 1999). This maintains a set of
stable and well-distributed non-dominated individuals along the Pareto-optimal front. In SPS, if the
number of non-dominated individuals in the combined population is less than or equal to the
desired population size, extra individuals are removed according to their rank values in order to
promote stability in the evolutionary search towards the final trade-offs. Otherwise, the
194

AN EVOLUTIONARY ALGORITHM FOR MULTI-OBJECTIVE OPTIMIZATION

non-dominated individuals with high niched count value will be discarded in order to distribute the
individuals uniformly along the discovered Pareto-optimal front. After the process, the remaining
individuals are allowed to survive in the next generation and this evolutionary cycle is repeated
until the stopping criterion is met.

P opulation initialization
Function evaluation
D om ination com parison

Y es

Is
stopping criterion
m et?

non-dominated individuals

Final
population

No
G enetic operations
Function evaluation
evolved
population

Σ

new population

D ynam ic sharing

com bined
population

D om ination com parison

Size(nondom )
> popsize?

No

Filtering - based on
P areto ranked cost

Y es
D ynam ic sharing

Filtering - based on
shared costs

Figure 5: Program Architecture of the MOEA
Genetic Operations for MOEA:
Let,
pop(n) = population in current generation n
Step 1) Perform tournament selection to select individuals from pop(n). The selected population is
called selpop(n).
Step 2) Perform simple crossover and mating restriction for selpop(n) using the dynamic sharing
distance in Step 1. The resulted population is called crosspop(n).
Step 3) Perform simple mutation for crosspop(n). The resulted population is called evolpop(n).
Figure 6: Detailed procedure within the box of “genetic operations” in Figure 5

195

TAN, KHOR, LEE, & SATHIKANNAN

4. Validation Results on Benchmark Problems
This section validates the proposed algorithm in two ways. The first kind of validation (presented in
Section 4.1) illustrates how each of the proposed features, including goal-sequence domination
scheme, hard/soft goal and priority specifications, logical operations among multiple goals and
dynamic sharing, enhances the performance of MOEA in MO optimization. As shown in Section
4.2, the second type of validation compares performance of the proposed MOEA with various
evolutionary algorithms based upon a benchmark problem. Various performance measures are used
in the comparison and the results are then discussed.
4.1 Validation of the Proposed Features in MOEA

In this section, various proposed features in MOEA are examined for their usefulness in MO
optimization. This study adopts the simple two-objective minimization problem (Fonseca &
Fleming, 1993) that allows easy visual observation of the optimization performance. The function
has a large and non-linear trade-off curve, which challenges the algorithm’s ability to find and
maintain the entire Pareto-optimal front uniformly. The two-objective functions, f1 and f2, to be
minimized are given as
 8
1 

f1 ( x1 ,..., x8 ) = 1 − exp − ∑  xi −
 i =1 
8



2






2
 8
1  

f 2 ( x1 ,..., x8 ) = 1 − exp − ∑  xi +
 i =1 
8  


(12)

where, − 2 ≤ xi < 2, ∀i = 1,2,...,8 . The trade-off line is shown by the curve in Figure 7, where the
shaded region represents the unfeasible area in the objective domain.

f

2

Trade-off
Curve

Unfeasible
Region

f

1

Figure 7: Pareto-optimal Front in the Objective Domain
196

AN EVOLUTIONARY ALGORITHM FOR MULTI-OBJECTIVE OPTIMIZATION

The simulations are run for 70 generations with a population size of 100. Standard mutation with
a probability of 0.01 and standard two-point crossover with a probability of 0.7 are used. To study
the merit of the dynamic sharing scheme in MOEA as proposed in Section 3.1, 4 different types of
simulations have been performed. The first type is without fitness sharing. The second and third
employ a fixed sharing distance of 0.01 and 0.1, respectively. The fourth uses the dynamic sharing
scheme which does not require any predefined sharing distance setting. Figure 8 illustrates the
respective population distribution in the objective domain at the end of the evolution. It can be
observed that all of the four simulations are able to discover the final trade-off, but with some
performance difference in terms of the closeness and uniformity of the population distribution
along the trade-off curve.
For the MOEA without fitness sharing as shown in Figure 8a, the population tends to converge
to an arbitrary part of the trade-off curve. This agrees with the findings of Fonseca and Fleming,
(1993). For the MOEA with fitness sharing, as shown in Figures 8b and 8c, the population can be
distributed along the trade-off curve rather well, although the sharing distance of 0.01 provides a
more uniform distribution than that of 0.1. This indicates that although fitness sharing contributes
to population diversity and distribution along the trade-off curve, the sharing distance has to be
chosen carefully in order to ensure the uniformity of the population distribution. This often
involves tedious trial-and-error procedures in order to ‘guess’ an appropriate sharing distance,
since it is problem dependent and based upon the size of the discovered trade-offs as well as the
number of non-dominated individuals. These difficulties can be solved with the proposed dynamic
sharing scheme, which has the ability to automatically adapt the sharing distance along the
evolution without the need of any predefined parameter, as shown in Figure 8d.

(b) Sharing distance = 0.01

(a) No sharing

197

TAN, KHOR, LEE, & SATHIKANNAN

(c) Sharing distance = 0.1
(d) Dynamic sharing
Figure 8: Performance Validation of Dynamic Sharing Scheme in MOEA

f2

f2

To validate the contribution of the switching preserved strategy (SPS) in MOEA, the above
simulation was repeated with different scenarios and settings. Figure 9a depicts the simulation
result without the implementation of SPS, in which the evolution faces difficulty converging to the
trade-off curve. The solid dots represent the non-dominated individuals while the empty circles
represent the dominated individuals. As can be seen, the final population is crowded and the
non-dominated individuals are distributed with some distance away from the trade-off curve.
Figure 9b shows the simulation result for the MOEA with SPS and filtering solely based upon the
Pareto domination. The final population has now managed to converge to the Pareto-optimal front.
However, the non-dominated individuals are not equally distributed and the diversity of the
population is poor: they only concentrate on a portion of the entire trade-off curve (c.f. Figures 8d,
9b). These results clearly show that SPS in MOEA is necessary in order to achieve good stability
and diversity of the population in converging towards the complete set of trade-offs.

Unfeasible
region

Unfeasible
region

f1

f1

(b) With SPS solely based on Pareto ranked cost
(a) Without SPS
Figure 9: Performance Validation of SPS in MOEA

198

AN EVOLUTIONARY ALGORITHM FOR MULTI-OBJECTIVE OPTIMIZATION

f2

f2

The proposed goal-sequence domination scheme was also validated for problems with different
goal settings, including a feasible but extreme goal setting of (0.98, 0.2) and an unfeasible goal
setting of (0.7, 0.4) as shown in Figures 10 and 11, respectively. As desired, the population is seen
to concentrate on the preferred region of the trade-off curve at the end of the evolution, regardless
of the unattainable or extreme goal settings. As shown in Figures 10 and 11, MOEA is capable of
uniformly distributing the non-dominated individuals along any trade-offs size resulting from
different goal settings, with the help of the dynamic sharing scheme that automatically computes a
suitable sharing distance for optimal population distribution at each generation.

f1

f1

Figure 10: Feasible but Extreme Goal Setting

Figure 11: Unfeasible Goal Setting

Figure 12 shows the trace of sharing distance during the evolution. The thin and thick lines
represent the average sharing distance without any goal setting (see Figure 8d for the corresponding
Pareto-front) and with the goal setting of (0.7, 0.4) (see Figure 11 for the corresponding
Pareto-front), respectively. Generally, MO optimization without a goal setting has an initially small
size of discovered Pareto-front, which subsequently grows along with the evolution to approach
and cover the entire trade-off region at the end of evolution. This behavior is explained in Figure 12
where the sharing distance increases asymptotically along the evolution until a steady value of
0.0138 is reached. It should be noted that this value is close to the fixed sharing distance of 0.01 in
Figure 8b, which was carefully chosen after trial-and-error procedures. For the case of MOEA with
a goal setting of (0.7, 0.4), the sharing distance increases initially and subsequently decreases to
0.0025 along the evolution, which is lower than the value of 0.0138 (without goal setting). The
reason is that the concentrated trade-off region within the goal setting is smaller than the entire
trade-off region (without goal setting), and hence results in a smaller distance for uniform sharing
of non-dominated individuals. These experiments show that the proposed dynamic sharing scheme
can effectively auto-adapt the sharing distance to arrive at an appropriate value for uniform
population distribution along the discovered trade-off region at different sizes, without the need for
any a priori parameter setting.

199

TAN, KHOR, LEE, & SATHIKANNAN

Figure 12: Trace of the Dynamic Sharing Distance Along the Evolution

Non-dominated
individual

f2

f2

Figures 13 and 14 show the MOEA simulation results for the case of an infeasible goal setting
with soft and hard priorities, respectively. In the figures, diamonds represent goals, small circles
represent non-dominated individuals and solid dots represent dominated individuals. For the soft
priority setting in Figure 13, goals are treated as first priority followed by the objective component
of f1 as second priority, i.e., Pg = [1, 1] and Pf = [2, 0]. As can be seen, it provides a distributive
optimization approach for all goals by pushing the population towards the objective component of
f1 that has a higher priority, after taking the goal vector into consideration (c.f. Figures 3a, 13b). In
contrast, Figure 14 shows the minimization results with hard priority setting where priority of f1 is
higher than f2, i.e., Pg = [1, 2] and Pf = [0, 0]. Unlike the soft priority optimization, hard priority
minimizes the objective of f1 until the relevant goal component of g1 = 0.5 is satisfied before
attaining the objective component of f2 with the second goal component of g2 = 0.5, as shown in
Figure 14 (c.f. Figures 3b, 14b). As can be seen, objective values with hard priority settings are
better with higher priority but are worse with lower priority, as compared to the solutions obtained
in soft priority optimization (c.f. Figures 13b, 14b).

Non-dominated
individual

ff1

f1

(a) At generation 5
(b) At generation 70
Figure 13: MOEA Optimization with Unfeasible Goal Setting: f1 has Soft Priority Higher than f2
200

Non-dominated
individual

f2

f2

AN EVOLUTIONARY ALGORITHM FOR MULTI-OBJECTIVE OPTIMIZATION

Non-dominated
individual

ff11

f1

(a) At generation 5
(b) At generation 70
Figure 14: MOEA Optimization with Unfeasible Goal Setting: f1 has Hard Priority Higher than f2

ff22

Figure 15 shows the MOEA minimization result with f1 being a hard constraint. The population
continuously evolves towards minimizing f2 only after the hard constraint of f1 has been satisfied. In
general, objective components with hard constraints may be assigned as hard priorities in order to
meet the hard constraints before minimizing any other objective components.

Non-dominated
individuals

ff11

Figure 15: MOEA Minimization with Hard Constraint on f1
Figures 16 and 17 show the MO optimization results that include multiple goal settings specified
by logical “OR” ( ∪ ) and “AND” ( ∩ ) connectives, respectively. For the “OR” operation as shown
in Figure 16, the population is automatically distributed and equally spread over the different
concentrated trade-off regions to satisfy the goal settings separately, regardless of the overlapping
or feasibility of the goals. With the proposed dynamic sharing scheme, the sub-population size for
each goal is in general based upon the relative size of the concentrated trade-off surface of that goal,
201

TAN, KHOR, LEE, & SATHIKANNAN

and thus individuals are capable of equally distributing themselves along the different concentrated
trade-off regions. For the “AND” operation as illustrated in Figure 17, the whole population
evolves towards minimizing all the goals G1, G2 and G3 simultaneously. As a result, the individuals
are equally distributed over the common concentrated trade-off surface formed by the three goals,
as desired.
Pareto optimality observation

GG1 1

G
G22
f2

G3
G
3
GG4 4

f1

Figure 16: MOEA Minimization for (G1 ∪ G2 ∪ G3 ∪ G4)
Pareto optimality observation

GG11

G22

f2

G
G33

f1

Figure 17: MOEA Minimization for (G1 ∩ G2 ∩ G3)
4.2 Performance Comparisons of MOEA

This section studies and compares the performance of the proposed MOEA with other
multi-objective evolutionary optimization methods based upon a benchmark MO optimization
problem. For a comprehensive comparison, various performance measures are used and the
comparison results are discussed in the section.
4.2.1 The Test Problem
202

AN EVOLUTIONARY ALGORITHM FOR MULTI-OBJECTIVE OPTIMIZATION

The test problem used for the performance comparisons is a two-objective minimization problem
(Deb, 1999). The problem is chosen because it has a discontinuous Pareto-front which challenges
the evolutionary algorithm’s ability to find and maintain the Pareto-optimal solutions that are
discontinuously spread in the search space. The problem involves minimizing the objective
functions f1 and f2 as given below,

f1 ( x1 ) = x1
g ( x2 ,..., x10 ) = 1 + 10
h( f 1 , g ) = 1 − ( f 1 g )

0.25

(13a)

∑10
i = 2 xi
,
10 − 1

− ( f1 g )sin (10πf1 )

f 2 ( x1 ) = g ( x2 ,..., x10 )h( f1 , g )

(13b)
(13c)

(13d)

All variables are varied in [0, 1] and the true Pareto-optimal solutions are constituted with xi = 0
∀ i = 2, …, 10 and the discontinuous values of x1 in the range of [0, 1] (Deb, 1999). Figure 18
depicts the discontinuous Pareto-optimal front (in bold). The shaded region represents the
unfeasible region in the search space.

Figure 18: Pareto-optimal Front in the Objective Domain
4.2.2 Current Evolutionary MO Optimization Methods

Besides MOEA, five well-known multi-objective evolutionary optimization methods are used in
the comparison. These approaches differ from each other in their working principles and
mechanisms and have been widely cited or applied to real-world applications. The algorithms are
summarized below and readers may refer to their respective references for detailed information.
(i) Fonseca and Fleming’s Genetic Algorithm (FFGA): For MO optimization, Fonseca and
Fleming (1993) proposed a multi-objective genetic algorithm (MOGA) with Pareto-based ranking
scheme, in which the rank of an individual is based on the number of other individuals in the current

203

TAN, KHOR, LEE, & SATHIKANNAN

population that dominate it. Their algorithm was further incorporated with fitness sharing and
mating restriction to distribute the population uniformly along the Pareto-optimal front.
(ii) Niched Pareto Genetic Algorithm (NPGA): The method of NPGA (Horn & Nafpliotis, 1993)
works on a Pareto-dominance-based tournament selection scheme to handle multiple objectives
simultaneously. To reduce the computational effort, a pre-specified number of individuals are
picked as a comparison set to help determine the dominance. When both competitors end in a tie,
the winner is decided through fitness sharing (Goldberg and Richardson, 1987).
(iii) Strength Pareto Evolutionary Algorithm (SPEA): The main features of SPEA (Zitzler &
Thiele, 1999) are the usage of two populations (P and P’) and clustering. In general, any
non-dominated individual is archived in P’ and any dominated individual that is dominated by
other members in P’ is removed. When the number of individuals in P’ exceeds a maximum value,
clustering is adopted to remove the extra individuals in P’. Tournament selection is then applied to
reproduce individuals from P + P’ before the evolution proceeds to the next generation.
(iv) Non-Generational Genetic Algorithm (NGGA): In NGGA (Borges & Barbosa, 2000), a cost
function of an individual is a non-linear function of domination measure and density measure on
that individual. Instead of evolving the whole population at each iteration, a pair of parents is
selected to reproduce two offsprings. An offspring will replace the worst individual in a population
if the offspring has lower cost function than the worst individual.
(v) Murata and Ishibuchi’s Genetic Algorithm (MIGA): Unlike the above evolutionary
optimization methods, MIGA (Murata & Ishibuchi, 1996) applies the method of weighted-sum to
construct the fitness of each individual in a population. To keep the diversity of the population
along the Pareto-optimal front, the weights are randomly specified when a pair of parent solutions
is selected from a current population for generating the offspring.
4.2.3 Performance Measures

This section considers three different performance measures which are complementary to each
other: Size of space covered (SSC), uniform distribution (UD) index of non-dominated individuals
and number of function evaluation (Neval).
(i) Size of Space Covered (SSC): This measure was proposed by Zitzler and Thiele (1999) as a
measure to quantify the overall size of phenotype space covered (SSC) by a population. In general,
the higher the value of SSC, the larger the space covered by the population and hence the better the
optimization result.
(ii) Uniform Distribution (UD) of Non-dominated Population: Besides the size of space covered
by a population, it is also essential to examine the ability of an evolutionary optimization to
distribute their non-dominated individuals as uniformly as possible along the discovered
204

AN EVOLUTIONARY ALGORITHM FOR MULTI-OBJECTIVE OPTIMIZATION

Pareto-optimal front, unless prohibited by the geometry of the Pareto front. This is to achieve a
smooth transition from one Pareto-optimal solution to its neighbors, thus facilitating the
decision-maker in choosing his/her final solution. Mathematically, UD(X') for a given set of
non-dominated individuals X' in a population X, where X' ⊆ X, is defined as (Tan et al. 2001a),
UD(X' ) =

1
1 + S nc

(14)

where Snc is the standard deviation of niche count of the overall set of non-dominated individuals X'.
It can be seen that larger value of UD(X’) indicates a more uniform distribution and vice versa.
(iii) Number of Function Evaluation (Neval): The computational effort required to solve an
optimization problem is often an important issue, especially when only limited computing
resources are available. In the case that a fixed period of CPU time is allocated and the CPU time
for each function evaluation is assumed to be equal, then more function evaluations being
performed by an optimization indirectly indicates less additional computational effort is required
by the algorithm.
4.2.4 Simulation Settings and Comparison Results
The decimal coding scheme (Tan et al. 1999) is applied to all the evolutionary methods studied in
this comparison, where each parameter is coded in 3-digit decimals and all parameters are
concatenated together to form a chromosome. In all cases, two-point crossover with a probability of
0.07 and standard mutation with a probability of 0.01 are used. A reproduction scheme is applied
according to the method used in the original literature of each algorithm under comparison. The
population size of 100 is used in FFGA, NPGA, NGGA and MOEA, which only require a single
population in the evolution. SPEA and MIGA are assigned a population size of 30 and 70 for their
external/archive and evolving population size, respectively, which form an overall population size
of 100. All approaches under comparison were implemented with the same common sub-functions
using the same programming language in Matlab (The Math Works, 1998) on an Intel Pentium II
450 MHz computer. Each simulation is terminated automatically when a fixed simulation period of
180 seconds is reached. The simulation period is determined, after a few preliminary runs, in such a
way that different performance among the algorithms could be observed. To avoid random effects,
30 independent simulation runs, with randomly initialized population, have been performed on
each algorithm and the performance distributions are visualized in the box plot format (Chambers
et al. 1983; Zitzler & Thiele, 1999).
Figure 19 displays the performance of SSC (size of space covered) for each algorithm. In general,
SPEA and MOEA produce a relatively high value of SSC indicating their ability to have a more
distributed discovered Pareto-optimal front and/or to produce more non-dominated solutions that
are nearer to the global trade-offs. It can also be observed that, compared to the others, FFGA,
SPEA and MOEA are more consistent in the performance of SSC. The performance of UD
(uniform distribution) for all algorithms is summarized in Figure 20. In general, the UD
distributions are mostly overlapping with each other and thus there is too little evidence to draw any
205

TAN, KHOR, LEE, & SATHIKANNAN

strong conclusion. However, as the average performance is concerned (see bold horizontal line in
the box plots), SPEA, MIGA and MOEA outperform others slightly and are more consistent in
terms of the measure of UD. Figure 21 shows the distribution of Neval (number of function
evaluation) performed by each algorithm in a specified time. More function evaluations in a fixed
CPU time indirectly indicates that less CPU time is required by the algorithm. Intuitively, this
means less computational efforts are required by the algorithm to find the trade-offs. As shown in
Figure 21, MIGA requires the least algorithm effort while the performances of FFGA, NPGA and
MOEA are moderate in terms of Neval. It can also be observed that SPEA and NGGA are suitable
for problems with time-consuming function evaluations: the effects in algorithm effort become less
significant in these problems. In summary, the results show that MOEA requires moderate
computational effort and exhibits a relatively good performance in terms of SSC and UD on the test
problem, as compared to other MO evolutionary optimization methods in this study.

Figure 19: Box Plot of SSC

Figure 20: Box Plot of UD

206

AN EVOLUTIONARY ALGORITHM FOR MULTI-OBJECTIVE OPTIMIZATION

Figure 21: Box Plot of Neval
Figure 22 shows the distribution of non-dominated individuals in the objective domain, where
the range of each axis is identical to the range shown in Figure 18. For each algorithm, the
distribution is the best selected, among the 30 independent runs, with respect to the measure of SSC.
It can be seen from Figure 22 that MOEA benefits from evolving more non-dominated individuals
than the other methods. MOEA’s individuals are also better distributed within the trade-off region.

FFGA

NPGA

SPEA

NGGA

MIGA

MOEA

Figure 22: Best Selected Distribution of Non-dominated Individuals from Each Algorithm with
Respect to the Measure of SSC

207

TAN, KHOR, LEE, & SATHIKANNAN

5. Application to Practical Servo Control System Design
5.1 The Hard Disk Drive Servo System
A typical plant model of hard disk drive (HDD) servo system includes a driver (power amplifier), a
VCM (Voice Coil Motor) and a rotary actuator that is driven by the VCM. Figure 23 (Goh et al.
2001) shows a basic schematic diagram of a head disk assembly (HDA), where several rotating
disks are stacked on the spindle motor shaft.
VOICE COIL MOTOR
ACTUATOR

DISK

ARM

SUSPENSION AND
RECORDING HEAD

DATA TRACK

Figure 23: A HDD with a Single VCM Actuator Servo System
The dynamics of an ideal VCM actuator is often formulated as a second-order state-space model
(Weerasooriya, 1996),

 y&  0 K y  y   0 
  +   u
  = 
 v&  0 0  v   K v 

(15)

where u is the actuator input (in volts), y and v are the position (in tracks) and the velocity of the
R/W head, Kv is the acceleration constant and Ky the position measurement gain,
where K y = K t m with Kt being the current-force conversion coefficient and m being the mass of
the VCM actuator. The discrete-time HDD plant model used for the evolutionary servo controller
design in this study is given as (Tan et al. 2000),
 1 1.664 
1.384 
 x(k ) + 


1.664  u
1 
0



x(k + 1) = 

(16)

5.2 Evolutionary HDD Controller Design and Implementation

A two-degree-of-freedom (2DOF) control structure is adopted for the read/write head servo system
as shown in Figure 24. For simplicity and easy implementation, a simple first-order discrete-time

208

AN EVOLUTIONARY ALGORITHM FOR MULTI-OBJECTIVE OPTIMIZATION

controller with a sampling frequency of 4 kHz is used for the feedforward and feedback controllers,
which is in the form of
 z + ff 1 

K p = K f 
 z + ff 2 

 z + fb1 

K s = K b 
 z + fb2 

(17)

respectively. The control objective during the tracking in HDD is to follow the destination track
with a minimum tracking error. Note that only time domain performance specifications are
considered in this paper, and the design task is to search for a set of optimal controller parameters
{Kf, Kb, ff1, ff2, fb1, fb2} such that the HDD servo system meets all design requirements. These
requirements are that overshoots and undershoots of the step response should be kept less than 5%
since the head can only read or write within ±5% of the target; the 5% settling time in the step
response should be less than 2 milliseconds and settle to the steady-state as quickly as possible
(Goh et al. 2001). Besides these performance specifications, the system is also subject to the hard
constraint of actuator saturation, i.e., the control input should not exceed ±2 volts due to the
physical constraint on the VCM actuator.

r

Kp

u

+-

VCM

Feedforward
controller

y

Plant
Ks
Feedback controller

Figure 24: The Two Degree-of-freedom Servo Control System
The multi-objective evolutionary algorithm (MOEA) proposed in this paper has been embedded
into a powerful GUI-based MOEA toolbox (Tan et al. 2001b) for ease-of-use and for
straightforward application to practical problems. The toolbox is developed under the Matlab (The
Math Works, 1998) programming environment, which allows users to make use of the versatile
Matlab functions and other useful toolboxes such as Simulink (The Math Works, 1999). It allows
any trade-off scenario for MO design optimization to be examined effectively, aiding
decision-making for a global solution that best meets all design specifications. In addition, the
toolbox is equipped with a powerful graphical user interface (GUI) and is ready for immediate use
without much knowledge of evolutionary computing or programming in Matlab. A file handling
capability for saving all simulation results and model files in a Mat-file format for Matlab or
text-file format for software packages like Microsoft Excel is also available in the toolbox. Through
the GUI window of MOEA toolbox, the time domain design specifications can be conveniently set
as depicted in Figure 25, where Tr, OS, Ts, SSE, u and ue represents the rise time, overshoot,
settling time, steady-state error, control input and change in control input, respectively.

209

TAN, KHOR, LEE, & SATHIKANNAN

Figure 25: MOEA GUI Window for Settings of Design Specifications
The simulation adopts a generation and population size of 200, and all the design specifications
listed in Figure 25 have been successfully satisfied at the end of the evolution. The design trade-off
graph is shown in Figure 26, where each line representing a solution found. The x-axis shows the
design specifications and the y-axis shows the normalized cost for each objective. Clearly,
trade-offs between adjacent specifications result in the crossing of the lines between them (e.g.,
steady-state error (SSE) and control effort (u)), whereas concurrent lines that do not cross each
other indicating the specifications do not compete with one another (e.g., overshoots (OS) and
settling time (Ts)).

Figure 26: Trade-off Graph of the HDD Servo Control System Design

210

AN EVOLUTIONARY ALGORITHM FOR MULTI-OBJECTIVE OPTIMIZATION

The closed-loop step response of the overall system for an arbitrary selected set of MOEA
designed 2DOF controller parameters given as {Kf, Kb, ff1, ff2, fb1, fb2} = {0.029695, -0.58127,
0.90279, -0.3946, -0.70592, 0.83152} is shown in Figure 27. With a sampling frequency of 4 kHz,
the time domain closed-loop performance of the evolutionary designed controller has been
compared with the manually designed discrete-time PID controller as given in Eq. 18 (Goh et al.
2001) as well as the Robust and Perfect Tracking (RPT) controller (Goh et al. 2001) as given in Eq.
19,
0.13 z 2 − 0.23 z + 0.1
u=
(r − y )
(18)
z 2 − 1.25 z + 0.25
x(k + 1) = −0.04 x(k ) + 15179r (k ) − 453681y (k )

(19)

u (k ) = −3.43 × 10 −7 x(k ) + 0.04r (k ) − 0.18 y ( k )

It can be seen in Figure 27 that the evolutionary designed 2DOF controller has outperformed
both the PID and RPT controllers, with the fastest rise time, smallest overshoots and shortest
settling time in the closed-loop response. Its control performance is excellent and the destination
track crossover occurs at approximately 1.8 milliseconds.
1.8
1 : MOEA Based 2DOF Controller

1.6

2

2 : PID Controller
3 : RPT Controller

Head Position (Tracks)

1.4
1.2
3

1

1

0.8
0.6
0.4
0.2
0

0

0.001 0.002 0.003 0.004 0.005 0.006 0.007 0.008 0.009

0.01

Time in Seconds

Figure 27: Closed-loop Servo System Responses with Evolutionary 2DOF, RPT and PID
Controllers
The performance of the evolutionary 2DOF servo control system was further verified and tested
on the physical 3.5-inch HDD with a TMS320 digital signal processor (DSP) and a sampling rate of
4 kHz. The R/W head position was measured using a laser doppler vibrometer (LDV) and the
resolution used was 1 µm/volt. Real-time implementation result of the evolutionary HDD servo
control system is given in Figure 28, which is consistent with the simulated step response in Figure
27, and shows an excellent closed-loop performance.

211

TAN, KHOR, LEE, & SATHIKANNAN

Output Response
1.4

Tracks ( Actuator Output )

1.2

1

0.8

0.6

0.4

0.2

0

0

0.001 0.002 0.003 0.004 0.005 0.006 0.007 0.008 0.009
Time in Seconds

0.01

Figure 28: Real-time Implementation Response of the Evolutionary 2DOF Servo System

6. Conclusions
This paper has presented a multi-objective evolutionary algorithm (MOEA) with a new
goal-sequence domination scheme to allow advanced specifications such as hard/soft priorities and
constraints to be incorporated for better decision support in multi-objective optimization. In
addition, a dynamic fitness sharing scheme that is simple in computation and adaptively based upon
the on-line population distribution at each generation has been proposed. Such a dynamic sharing
approach avoids the need for a priori parameter settings or user knowledge of the usually unknown
trade-off surface often required in existing methods. The effectiveness of the proposed features in
MOEA has been demonstrated by showing that each of the features contains its specific merits and
usage that benefit the performance of MOEA. In comparison with other existing evolutionary
approaches, simulation results show that MOEA has performed well in the diversity of
evolutionary search and uniform distribution of non-dominated individuals along the final
trade-offs, without significant computational effort. The MOEA has been applied to the practical
engineering design problem of a HDD servo control system. Simulation and real-time
implementation results show that the evolutionary designed servo system provides excellent
closed-loop transient and tracking performance.

Acknowledgements
The authors wish to thank Andrew Moore and the anonymous reviewers for their valuable
comments and helpful suggestions which greatly improved the paper quality.

212

AN EVOLUTIONARY ALGORITHM FOR MULTI-OBJECTIVE OPTIMIZATION

References
Borges, C. C. H., & Barbosa, H. J.C. (2000). A non-generational genetic algorithm for
multiobjective optimization. IEEE Congress on Evolutionary Computation, 1, 172-179.
Chambers, J. M., Cleveland, W. S., Kleiner, B., & Turkey, P. A. (1983). Graphical Methods for
Data Analysis, Wadsworth & Brooks/Cole, Pacific CA.
Coello Coello, C. A. (1996). An Empirical Study of Evolutionary Techniques for Multiobjective
Optimization in Engineering Design, Ph.D. Thesis, Dept. of Computer Science, Tulane University,
New Orleans, LA.
Coello Coello, C. A. (1999). A Comprehensive Survey of Evolutionary-Based Multiobjective
Optimization Techniques. Knowledge and Information Systems, 1(3), 269-308.
Deb, K. (1999). Evolutionary algorithms for multi-criterion optimization in engineering design. In
Miettinen. Evolutionary Algorithms in Engineering and Computer science: Recent Advances in
Genetic Algorithms, Evolution Strategies, Evolutionary Programming, Genetic Programming, and
Industrial Applications, Wiley, New York, 135-161.
Deb, K. (2001). Multi-objective Optimization using Evolutionary Algorithms. John Wiley & Sons,
London.
Fonseca, C. M. (1995). Multiobjective Genetic Algorithms with Application to Control Engineering
Problems. Ph.D. Thesis, Dept. of Automatic Control and Systems Engineering, University of
Sheffield, UK.
Fonseca, C. M., & Fleming, P. J. (1993). Genetic algorithm for multiobjective optimization,
formulation, discussion and generalization. In (Forrest, 1993), 416-423.
Fonseca, C. M. & Fleming, P. J., (1998). Multiobjective optimization and multiple constraint
handling with evolutionary algorithms – Part I: A unified formulation. IEEE Trans. on System, Man,
and Cybernetics-Part A: System and Humans, 28(1), 26-37.
Goh, T. B., Li, Z. M., Chen, B. M., Lee, T. H., & Huang, T., (2001). Design and implementation of
a hard disk drive servo system using robust and perfect tracking approach. IEEE Trans. on Control
Systems Technology, 9(2), 221-233.
Goldberg, D. E., & Richardson, J. (1987). Genetic algorithms with sharing for multimodal function
optimization. Proc. 2nd Int. Conf. on Genetic Algorithms, 41-49.
Goldberg, D. E. (1989). Genetic Algorithms in Search, Optimization and Machine Learning.
Addison-Wesley, Reading, Massachusetts.
Grace, A. (1992). Optimisation Toolbox User’s Guide, The MathWorks, Inc.
Holland, J. H. (1975). Adaptation in Natural and Artificial Systems. University of Michigan, Ann
Harbor.

213

TAN, KHOR, LEE, & SATHIKANNAN

Horn, J., & Nafpliotis, N. (1993). Multiobjective Optimization Using the Niche Pareto Genetic
Algorithm. IlliGAL Report 93005, University of Illinois, Urbana, Illinois, USA.
Luus, R., Hartig, F. & Keil, F. J., (1995). Optimal drug scheduling of cancer chemotherapy by
direct search optimization. Hungarian Journal of Industrial Chemistry, 23, 55-58.
Marcu, T. (1997). A Multiobjective evolutionary approach to pattern recognition for robust
diagnosis of process faults. Proc. of IFAC Fault Detection, Supervision and Safety for Technical
Process, UK, 1183-1188.
Michalewicz, Z., & Schoenauer, M., (1996). Evolutionary algorithms for constrained parameter
optimization problems. Evolutionary Computation, 4(1), 1-32.
Miller, B. L., & Shaw, M. J. (1996). Genetic algorithms with dynamic niche sharing for multimodal
function optimization. IEEE Conf. on Evolutionary Computation, Japan, 786-791.
Murata, T., & Ishibuchi, H., (1996). Multi-objective genetic algorithm and its applications to
flowshop scheduling. Int. Journal of Computers and Engineering, 957-968.
Osyczka, A. (1984). Multicriterion Optimisation in Engineering. Ellis Horwood, Chichester.
Schaffer, J. D. (1985). Multiple-objective optimization using genetic algorithm. Proc. of first Int.
Conf. on Genetic Algorithms, 93-100.
Tan, K. C., Lee, T. H., & Khor, E. F. (1999). Evolutionary algorithms with goal and priority
information for multi-objective optimization. IEEE Congress on Evolutionary Computation, 1,
106-113.
Tan, K. C., Sathikannan, R., Tan, W. W., Loh, A. P., Lee, T. H., & Mamun, A. Al. (2000)
Evolutionary Design and Real-Time Implementation of a Hard Disk Drive Servo Control System.
Int. Conf. on Control 2000, University of Cambridge, UK, Section 6C.
Tan, K. C., Lee, T. H., & Khor, E. F., (2001a). Evolutionary algorithms for multi-objective
optimization: Performance assessments and comparisons. IEEE Congress on Evolutionary
Computation, 2, 979-986.
Tan, K. C., Lee, T. H., Khoo, D., & Khor, E. F., (2001b). A multi-objective evolutionary algorithm
toolbox for computer-aided multi-objective optimization. IEEE Trans. on Systems, Man and
Cybernetics - Part B: Cybernetics, 31(4), 537-556.
The Math Works, Inc. (1998). Using MATLAB, Version 5.
The Math Works, Inc. (1999). Simulink: User's Guild, Version 3.
Van Veldhuizen, D. A., & Lamont, G. B. (1998). Multiobjective evolutionary algorithm research:
A history and analysis. Technical Report TR-98-03, Dept. of Electrical and Computer Eng.,
Graduate School of Eng., Air Force Institute of Technology, Wright-Patterson AFB, Ohio.

214

AN EVOLUTIONARY ALGORITHM FOR MULTI-OBJECTIVE OPTIMIZATION

Weerasooriya, S. (1996). The Basic Servo Problem: Technical Report. Data Storage Institute,
National University of Singapore, Singapore.
Zitzler, E., & Thiele, L., (1999). Multiobjective evolutionary algorithms: A comparative case
study and the strength Pareto approach. IEEE Trans. on Evolutionary Computation, 3(4), 257-271.

215


	
 
			 ! #"$ % 
'&)( *,+.-//021$332465327/

89:;<  =>/
3?
/-!@BA:	%&=C/42?
/0

DFEHGJILKNMPOQSRUTBV)IXWYG<Z[EH\]O2G^Q`_aEcbedfV[ILghDibIkjSKlbLjSILEH\mOQnb]MSEoDqpSGJK<ErV)T
Et\$b]IkO2KlbEtu`vwKcZFKHx9O2KayzGJIb]OG^xxZ|{}O2ILEHKlb]EHu~ILG^pPMS\
s

kN

$][e2L

C  ¡<#¢£q¤¦¥H§

¨©[e2L

ª¬«'­®¯°®±i«2²©°'³q´µ«F¶]·«2²e¸2·®¹¬´µ«)º»®P¶k³B±H­e¼½°'®¸2·³B¾ ²¿«>ÀÁÂ)Á
Ã<ÁÄÁ»ÅeÁÀ9ÁÀ2²9Æ2³¯±Ç®¾ °·¸
®È^É²·Ê«2¯
¹·´®µ´S´µ«FËc¯Ì®²e®µ´µ®
ÍBÎÐÏ½ÑÍFÒ Ëc¯Ì®B²®µ´®È#Å½ÓÔÂHÀÌÕ

ÖØ×>ÙµÚ½ÛÜLÝÚ
Þtßà6áâµãäµá¿åiæBçèéæµß»äâµê6ëà6áåiìCáæíµîðïîî9çòñ½î9ìÌë»äçî9ñà6âôó2âçìà6êÌã©óà)õcæèµî!ì ë.æBççî2àölâµê6÷ ì àÌê6ãóø
à6ãêÌî!ì>ãì ëùçäúñ½ëûeîê6îçÐàJæBüüêÌâÐæµó
áî!ìtæBç©ñôüê6ë»ç©ó2ëùüß»î!ìýà6áîè æµß»ßîåðüßùâèPâµçß»èúàölâFåðî2à6áâ½ñìþtàÌáâÐì î
ïæì î!ñ âçéëùçñ½î9ü©î9çñ½î9çó2îÿóêÌë»àÌî9êÌë.æý$æµçñôà6áâìÌîðïæµìÌî9ñ âµç æSìÌóâµê6ë»çä ãçó2àÌëùâµç¿æBç©ñéæúì î!æBê
ó
á üê6âBø
óî9ñ½ãê6î æBß»àÌáâµãäá ìÌâµåðîqåðîàÌáâ½ñìðó2âå)ïëùçîqàÌáîúàölâ
ëà6áëùç à6áîSìÌóâµê6î >ìÌî9æBê
ó
á üæBê
æµñë»äåúý
à6áîiñ½âµåðëùçæBçÐàJæBüüê6âæó
áôãìÌî9ì>ßùâó9æBßLìÌî9æBê
ó
áôåðî2à6áâ½ñìCëùç à6áîiì üæó2î¬â ñë»ê6î9ó2àÌî9ñæµóè½ó2ßùëùó)äµê
æBüáì
HÞ Cì 2ýö<áî9êÌî>àÌáî>ã©ì ãæµß$ó
áâµë.ó2î!ì âµêHñ½î çëùçä¬àÌáîCîßùîåðî9çà
æBê6èÿåðâ½ñ½ë óæà6ë»âçì ßùâ½óæBß$ó
á©æBçäî9ì
à6áæàFó9æBç ï©îôæµüüßùë»î!ñ æµêÌîPæBê
óúæµññ½ë»àÌëùâµçýlæµê6óúñ½îßùî2à6ë»âç$ýcæBçñØæBê
óqêÌî9íµîê
ì6æBß
ç àÌáë.ìiüæµü©î9ê9ý#ö#î
üê6âµüâìÌîSæéçîöYßùâ½óæµßHì î!æBê
ó
áòåðî2àÌáâñ à6áæàiãìÌî9ìiæ ñ½ë»ûî9êÌî9çÐàiìÌî9æµê6ó
á ì ü©æµó2îý#æµçñ ö<áëùó
á à6æµ÷µî9ì
æóó2âãçÐà,â àÌáîióâµçóîü½à>â î ãë»íæBßùîç©ó2î¬ï©îàö#î9îç çî2àölâµê6÷Sì àÌê6ãó2àÌãê6î9ì9þHê6î9ì àÌê6ëùó2àÌî9ñ æµó2è½óß»ë.ó^üæµê ø
à6ëùæµß»ßùèñë»ê6î9ó2àÌî9ñäê6æµüáì
HÞ Cì
ç àÌáë.ì^öcæèµýàÌáîFçÐãå)ïîê^â ñëûeîê6îçÐà)ó2âç äãê6æBàÌëùâµçìCâ
à6áî)ìÌî9æBê
ó
áSì üæó2îJë.ì<ê6î9ñ½ãóî9ñÔýàÌáãìHëùåðüê6âíÐëùçäðî ÿóë»î9çó2è PâêÌî9âíµîê!ý½æBß»àÌáâãäµáúà6áî çæµß$ê6î9ìÌãßà
å[ãìàkçî9ó2î!ìÌì6æBê6ëùß»èJïîHæCß»â½ó9æBß½âµüàÌëùå)ãå äµëùíµîç[àÌáî<çæà6ãêÌîcâ à6áîHì î!æBê
ó
á)åðî2à6áâ½ñÔýBà6áî<à6âµüâµßùâµäµèJâ
à6áîtçî9ö ì î!æBê
ó
áiì üæó2îýµö<áë.ó
áFæíµâëùñìLåiæB÷ë»çä^î9æµêÌßùè[ñ½î!ó2ë.ì ëùâµç©ìNæBïâµãàNàÌáî,ñ½ëùêÌî!óà6ë»âçìkâ à6áî,æµê6ó9ìý
åiæèFáîßùüSàÌâ çñSïî2àÌàÌî9êtßùâó9æBß$âü½àÌëùåiæðàÌá©æBçúàÌáâÐì î)âµï½à
æBëùçî9ñúïèqìÌî9æµê6ó
áëùçäðëùçSàÌáî tÞ
ìÌüæó2î
,î2à
æBëùß»î!ñFê6î9ìÌãß»à6ìlâ àÌáîCîíæµß»ãæBàÌëùâµçúâ à6áîJüê6âµüâìÌî9ñÿìÌî9æµê6ó
áqåðî2àÌáâñqâµçSìÌîíµî9ê6æµßà6î9ì à<üêÌâïßùîåiìý
ëùçó2ßùãñ½ëùçäðà6áîJö#î9ß»ß»ø'÷Ðçâö<çqÞHß.æBê6å Pâçë»àÌâµê6ëùçä è½ìà6îåSýæBê6îCæBß.ì âðüê6î9ìÌîçÐàÌî!ñ


  

 
   !"









)



,&



	

$



%'&















#



.-

/

(


* 




+

20 1435 Ú½Û7698;t: ÝÚ7<=6 5
>@?+AB#CDBFEHGJI*KLDMONDG!MJPQNDRTSDMFGG4?#P"UWVYX[Z\]QV#^_^`ZJaQbcYdfe+\OgQhiMFBYjR=IlkFm#n#n7oqpTSrjMJstjMFG!MFSuKpTS/vxwHS/?+A@RyMFC/v#M
A*pyKLzNDSD{MJjKB#pTS[K|E}B#SDCqMJ~}{JpyMFSuKjMFB#G!?7SDpTSDvpTGA*pTCDMFRyE4B#{J{MJsDK!MFC2B+E#MFGpTB#SS/MJK|A;?#jwz{?7SDGpTGKG;?#P
BNDB#RTpyKBYKpy#MstBYjKJIBxY]dZ+aZV7FX#F]#d!VftgQ*.ofI'B#StCBuNDB#SuKpyKBYKpy#M4?7SDM#I B{?7RTRyMF{Kpy?7S?#P
SND4MJjpT{JB#RHsBYjB#4MJK!MJjGJIuNDGNDB#RTRTEl{?7SDCDpyKpT?7SDB#RHsDj?#tBYpTRTpyK|E.KBYtRyMFGJL/M(wHS/?%A*RyMFC/v#M(jMJstjMFG!MFSuK!MFCpTS
KL/Mv#jfBYstLDpT{JB#R#{?74s?7S/MFSuK pTGM sDjMFGG!MFC.pTS.K!MJjG2?#P/C/MJsMFSDC/MFSt{MB#SDC.pTSDCDMJs`MFStC/MFSD{MjMFRTBYKpy?7StGLDpystG
MJKAMJMFSBYjfpTBYtRyMFGJ.*L/MFG!M"jMFRTBYKpy?7SDGLDpystG@BYjMMFSD{?CDMFCNDGpTS/vqKL/MsDjMFG!MFSt{M?#j.BYtGMFSD{M?#P;RTpTSDwG
MJKAMJMFS¡S/?HC/MFG.pSKL/Mv#jBYstLL/M4wHS/?+A*RTMFC/v#MjMJsDjMFG!MFS[K!MFC¡pTSKL/MSND4MJjp{JB#RstBYjKlNDB#SuKpy¢DMFG
KL/M£C/MJsMFSDC/MFSD{MFG}MFSD{?CDMFC¤pTS¥KLDMv#jBYstLIB#SDC¤B#RTRT?+A*GqNDGK!?¦pTS[K!j?CDNt{MNDSD{MJjKB#pS[K|ErpTS[K!?§KL/M
4?HC/MFR9WRTRtpTSqB#RTRIB+E#MFGpTB#SS/MJK|A;?#jwHGsDj?%pC/M*B#MJjE}pTSuKNDpyKpy#M*v#jBYstLDpT{JB#RtK!?u?7RP?#jjMJsDjMFG!MFSuKpTS/v
BFYB#pTRTBYRyMwSD?+A*RyMFCDv#M#
WS/?#KL/MJjBYK!K!jB#{KpT?7S?#P BFE#MFGpB#S	S/MJKA?#jwHGpTG;KL/MFpyj(BYtpTRpyKE4K!?4MJ~}{JpTMFS[KRyE}s`MJjP?#j¨jMFB#G?7SDpTS/v
KB#G!wHGg©#MFSDG!MFSIlkFm#m#ª«lhiMFBYjRI"kFm#n#n7of¬L/MpTSDC/MJsMFSDC/MFSt{MFG4jMJsDjMFGMFS[K!MFC­pTS®KL/M*¯BYjMKL/M
w#MJE°K!?¦KLtpTGBYtpTRTpyK|E#I*jMFCtND{JpTS/v¦{LDB#S/v#MFGpTS¤KLDMwS/?%A*RyMFC/v#MG!KBYK!MxK!?¥Ry?H{JB#R{?74stNDKBYKpy?7SDGJ¬±S
B#CDCDpTKpy?7S2IHpT4s?#jKB#SuKGBFHpTS/v7G(pTSG!K!?#jBYv#MljMFuNtpyjMF4MFSuKG(BYjMs?7GGpyRyM@GpSD{MWpSDC/MJsMFSDC/MFSD{MFGB#RTRy?%A
B4PQB#{K!?#jpy²FBYKpy?7S?#P'KLDM.v7Ry?#tB#RSND4MJjfpT{JB#R`jMJsDjMFG!MFSuKBYKpy?7S¦gKL/M³!?7pTS[K(stj?#tBYtpTRpyKE}CtpTG!K!jpyN/Kpy?7Sof
´

µ

¶

·

¸

¹

º %¹

-//0l %% !=6^
= C2
 L
!»;H
 :!	%&% 		µ&2%% 2 =

» ¼X	½tt¾¿uÀ
LDMJjM	LDB#GMJMFSrB¡Ry?#K?#P)A;?#jwÁpS¥jMF{MFSuK}E#MFBYjG}?7SrKL/MB#NDK!?7BYKpT{RTMFBYjSDpTS/v?#PBFE#MFGpB#S
/S MJK|A;?#jwHG@Pj?7ÂCDBYKBH*Ã?7SDG!MFN/MFSuKRyE#ItKLDMJjMlBYjM"B4v#jMFBYK)B#S[ERyMFBYjfSDpTS/vB#Ryv#?#jfpyKLDG(A@LDpT{LBFE
M	GN/2CDpyHpTC/MFC§pTSuK!?KA?¡v#MFS/MJjB#R@BYsDsDj?7B#{fL/MFGJÄMJKL/?CtG4tB#G!MFC¥?7SÅcY^#]aQ]cY^VYW]^[Z|DZ^[ZJ^fZ
aZ\a\gQB#RG!?{JB#RTRyMFCxfcY^/\aQd!VY]^taQÆÇV\FZ+ofIB#SDCMJKL/?CtG(tB#G!MFC?7SOBz\c#df]^uWÈÉ^`FaQ]cY^ ( B#SDC	Bz\FZVYd!
sDj?H{MFCDN/jM#
LDMB#Ryv#?#jpTKLDG(tB#GMFC?7S£pTSDC/MJsMFSDCDMFSD{M)K!MFG!KGWs`MJjP?#jÂB}NDB#RTpyKBYKpT#MG!KNDCDEz?#P9KLDMC/MJsMFSHÊ
C/MFSD{MB#SDCpTSDCDMJs`MFStC/MFSD{MjMFRTBYKpT?7SDGLDpysG*B#4?7S/vzKL/M"BYjfpTBYtRyMFGWpTSOKL/M"CD?7B#pTS2IB#SDC£BYK!K!MF4sDK)K!?
¢tSDCBqS/MJKA?#jwKLDBYK@jMJsDjMFG!MFSuKG(KL/MFGMljMFRTBYKpT?7SDGLDpysGB#G*PBYjWB#Gs?7GGpTtRyM#9L/MJEKL/MJjMJP?#jM.KBYw#MB
RTpTGK@?#P{?7SDCDpyKpy?7StB#R'pTStC/MJsMFSDC/MFSD{M.jMFRTBYKpy?7SDGLtpystGg?#tKB#pTS/MFCPj?7ËKL/M4CDBYKBuE£4MFB#SDG)?#P{?7SDCDpÌÊ
Kpy?7SDB#RupTSDC/MJsMFSDCDMFSD{MK!MFG!KGfo B#G KL/M;pTS/stN/KJIB#SDC.v#MFSDMJjBYK!MB@S/MJKA?#jwKLDBYK'jMJsDjMFGMFS[KGi4?7G!K'?#PKLDMFG!M
jMFRTBYKpT?7SDGLDpysGJ'LDM@{?74stNDKBYKpy?7SDB#R`{?7G!K;?#P2KLDMFG!MWB#RTv#?#jpyKLDG;pTGB#pTSDRyECDN/M@K!?KLDMWSND`MJjB#SDC
{?74stRTM HpyK|EO?#PGND{fLK!MFG!KGJI'A*LDpT{fL{JB#S¡B#RTG?	{JB#NDG!MNDS/jMFRTpTBYtRyM"jMFGNtRyKGJÍ?74M4?#PKL/MB#Ryv#?#jpTKLDG
tB#G!MFC?7S£KLDpGWBYstsDj?7B#{L?#tKB#pTSGpT4sRTpy¢DMFC	?C/MFRGgQCDMÃ(B#4s?7GJI9kFm#m#n«iC/MÃB#4s?7GÎÐÏWN/MJK!M#I
kFm#m7Ñu«iWMFpTv#MJjFIhBY²4ÎÒhiMFBYjRI9kFm#mYÓHIkFm#m#Ô« ÏWN/MJK!MÎ¨C/MÃB#s`?7GFIikFm#m#Ô7ofIA@L/MJjMFB#GW?#KL/MJjBYjM4C/MÊ
Gpyv7SDMFCP?#j9v#MFS/MJjfB#R/*)G)gQC/M@ÃB#4s?7G9Î_ÏWN/MJK!M#IuÕYÓ#Ó#Ó#BH«tÃL/MFS/v/Iu;MFRRDÎ­Ö pTN2I/kFm#m7Ñu«D×MJMJwI`kFm#m#Ø«
ÍstpTjK!MFGJIt)RyEH4?7N/j*ÎÙÍ/{L/MFpTSDMFGJIkFm#m#Ô«tÚ9MJj}BqÎÛhiMFBYjRIkFm#mYÓH«`ÜMJj"N/KLÎÛÖ'B#N/jpyK!²JMFSIkFm#n#Ô7of
LDMB#RTv#?#jpyKLDG"tB#GMFCÁ?7SrBG{?#jpTSDvOPQNDSD{Kpy?7S¥BYK!K!MFsDK4K!?¢tSDCÁBv#jBYstLÁKLtBYKB Hppy²JMFG
KL/MG!MFRTMF{K!MFC¡G{?#jM#«KL/MG{?#jpTS/vPQNDSD{Kpy?7SpGNDGNDB#RTRTEC/MJ¢tS/MFCB#GB4MFB#GN/jM4?#P¢tK`MJK|A;MJMFS¡KL/M
v#jBYstL­B#SDC­KLDMCtBYKBHÒWRTRW?#PlKL/MFÝNDGMBÁG{?#jfpTS/vÁPNtSD{Kpy?7S°pTS­{?7ltpSDBYKpy?7S°A*pyKL­BÁG!MFBYj{fL
4MJKL/?HC°pTSr?#jCDMJj}K!?Á4MFB#GN/jM£KL/MOv#?u?HCDS/MFGGq?#PMFB#{L­M HstRy?#jMFC¤G!K!jNt{KN/jMPj?7ÞKL/M£GstB#{MO?#P
PMFB#GpytRyMG!?7RTNDKpy?7SDGJiWNDjpTS/vWKL/MM sRy?#jBYKpy?7SsDj?{MFGGFI#KL/M(G{?#jpTS/v)PQNDSD{Kpy?7SpTGBYsDsRTpyMFC"pTS"?#jC/MJjK!?
MJYB#RTNDBYK!M(KL/M(¢DKSDMFGG9?#P`MFB#{L}{JB#StCDpTCDBYK!M(G!K!jNt{KN/jM(K!?KL/MCDBYKBHß;B#{LB#RTv#?#jpyKLDÛpTG9{fLDBYjB#{K!MJjpT²JMFC
E®KL/M§G!sMF{Jpy¢t{G{?#jpTSDv¥PNDSt{Kpy?7S_B#SDC_G!MFBYj{fLsDj?{MFCDNDjMNDG!MFC2àLDMxG{?#jpTS/v¥PQNDSD{KpT?7SDGBYjM
tB#G!MFC§?7SÁCDpÌáMJjMFSuKsDjfpTSD{JpystRTMFGJI GND{fL§B#GMFSuK!j?#sE®gQÏ@MJjG!w#?+HpyKGÎâÃ??#sMJjFI(kFm#mYÓH«(ÃLD?+AàÎãÖ'pTN2I
kFm#ª#n«DC/M.ÃB#4s?7GJI`kFm#m#n«täMJtB#SDMWÎÅh'MFBYjfRI`kFm#n7Ñ#ofIB+E#MFGpTB#SBYsDstj?7B#{L/MFGgQNDSuKpTS/M#I`kFm#må/IkFm#m#ª«
Ã??#sMJjlÎÐÏ*MJjGw#?+HpyKGJIkFm#m#Õ«9æ/jpTMFCDB#SxÎÐç?7RTRTMJjFIÕYÓ#Ó#ÓH«æDjpyMFCDB#SI>@B#{fLDB#S¡ÎÐhiMMJè jFIkFm#m#m«
WMFpyv#MJj£ÎéÏ*MF{w#MJjB#S2IqkFm#m#Ø«Ï@MF{w#MJjfB#S2IkFm#m#ª«Ï@MF{w#MJjB#SIWMFpyv#MJjOÎÞÃ(LDpT{w#MJjfpTS/v/IkFm#m#Ø«
×OB#CDpyv7B#S,Îéä@BYPK!MJjE#IkFm#må/«ä*B#4?7SDp.ÎêÍMJtB#G!KpTB#StpIkFm#m7Ñu«qÍK!MF{wIlÕYÓ#Ó#Ó[ofI?#j	KL/M¡×OpTSDpT"ND
WMFG{jpystKpy?7S_ÖMFS/v#KLÒgQ;?7Nt{wYBYMJjKJI}kFm#m#Ô«4æ/jpyMFCtB#SÎÞW?7RTCtG!²FpTC/KJI"kFm#m#ª«Ö B#ëÎìB#{J{fLuNDGFI
kFm#må/«Í/N/²FN/wHpI2kFm#m#ÔI'kFm#m#ª«pTB#S2IDÕYÓ#Ó#Ó[of
LDMJjM;BYjMB#RTG!?)LuEuDjfpTC.B#Ryv#?#jpTKLDGKLtBYKNtG!M;BW{?7lpTSDBYKpy?7S?#PD{?7SDG!K!jB#pS[KÊ=tB#GMFC"B#StCG{?#jfpTS/vYÊ
tB#G!MFC4MJKLD?CDGFÄ ±S"GMJ#MJjB#RHA;?#jwG(g=ÍHpTSDv7L"Î®ÚB#RyK!?#jKBHI`kFm#m#ÔItkFm#m#Ø«HÍHstpyjK!MFGÎ_×	MJMJw`ItkFm#m#Ø«H)B#GL
ÎàWjND²FC/²JMFRIkFm#m#m«;C/MzÃ(B#4s?7GJIiæDMJjSB#è SDC/MJ²ÊÖ'NDSDB£ÎàhNDMJjKBHIÕYÓ#Ó7Ô7oKL/MzpTSDC/MJsMFSDCDMFSD{MÊ=tB#G!MFC
B#SDCrG{?#jpTS/vYÊ=tB#GMFC¤B#Ryv#?#jpTKLDGBYjMOB#pTSuKB#pTS/MFCrB#GzG!MJstBYjBYK!MOsDj?H{MFGG!MFGJIA*LDp{LrBYjM£{?7lpTS/MFC
pTS£G!?74M4ABFE#IA@L/MJjMFB#G)KL/M4LuEuDjfpTCDpy²FBYKpy?7SsDj?#s?7G!MFCOuE£@{JpC£B#StC£CDMÃ(B#4s?7GgÕYÓ#Ó#ÓHIiÕYÓ#Ó/k+o)pTG
tB#G!MFCx?7SxKL/MC/MJ#MFRT?#st4MFSuK.?#P(B	G{?#jpTSDvPNDSt{Kpy?7SKLDBYKlNDB#SuKpy¢DMFGKL/MCtpTG{jMJstB#St{JpyMFG)MJKAMJMFS
KL/MpTSDC/MJsMFSDCDMFSD{MFG.CDpTGstRTBFE#MFC¡uEKLDMz{JB#SDCtpTCDBYK!MqSDMJKA?#jw§B#SDC§KL/MzCDBYKBYtB#G!M#IB#StC¡KL/MzG!MFBYj{fL
sDj?H{MFGGpG(RTpTpyK!MFCzEKL/MjMFGNDRTKG?#PG?74MlpTSDCDMJs`MFStC/MFSD{MWK!MFG!KGJ
±SKLDpTG.stBYsMJjFI AM}P?{JNtG?7SxKL/MqG{?#jpTS/vuíG!MFBYj{L§BYsDsDj?7B#{fL2@RyKLD?7N/v7LxB#Ryv#?#jpTKLDG.pTSxKLDpTG
{JBYK!MJv#?#jE£LDBF#M4{?74?7StRyENDG!MFC£Ry?{JB#R'G!MFBYj{fL£MJKL/?CtG"gQNDSuKpTS/M#IkFm#mHkY«'Ã??#s`MJj)ÎÙÏ@MJjG!w#?%pTKGJI
kFm#m#Õ«Ã(LDpT{w#MJjfpTS/v/IWMFpyv#MJj4ÎàÏ@MF{w#MJjB#SIkFm#m#Ø«;C/MÃB#4s?7G.MJK"B#RyIÕYÓ#Ó7Ô«;Ï@MF{w#MJjB#S¦MJKB#RyI
kFm#m#Ø7ofI@CtN/MK!?§KLDM	M s?7S/MFSuKpTB#RTRTE¦RTBYjv#MOGpy²JM?#PKL/MG!MFBYj{fL­G!stB#{M#I(KL/MJjMOpTG}B¡v#j?+A*pS/v¡pTSuK!MJj!Ê
MFG!K4pTS¡?#KL/MJjL/MFN/jpG!KpT{G!MFBYjf{L¥4MJKL/?HCDGJI9pîM#GpNDRBYK!MFC§B#SDSDMFB#RTpTS/v§g=Ã(LDpT{w#MJjfpTS/v£MJK"B#RyI@kFm#m#Ø7ofI
ïð`ñ+òfó(ôõö%÷=øòù=ú õfûüúò(öúô÷=ø%ôi÷=ôù=ó­ý|þ=ÿ 	
Tþð


À

 $,.$ !

f¿ À#%$&(' »*)

"Ô©Ô$Ôð!$é $



KBYtN§G!MFBYj{L­gQ?7ND{wYBYMJjKJI*kFm#m#Ø«×NDSuK!MFSDB#NÁÎÂÃB#NIÕYÓ#Ó#Ó[ofI9DjfB#SD{L§B#SDCx?7NDSDCrgQ*pTB#S2I9ÕYÓ#Ó#Ó[ofI
v#MFS/MJKpT{qB#Ryv#?#jpyKLtG.B#SDC¡MJ#?7RTN/Kpy?7SDBYjE£stj?#v#jB#pS/v¡gQÖ BYjjf,B SD+ BYv7BHI9h'?#²FBH.I -N/jjB#4MFSDCDp=Ii×ON/jv7B
Î çlNDp ³!s`MJjfGJI*kFm#m#ª«.×	E#MJjfGJIÖ B#G!w#MJE¤Î ÖMJHpyK!KJIkFm#m#m«)Ü?7S/v/IÖ B# Î ÖMFNtS/v/IkFm#m#m7ofI@×BYjw#?+
{LtB#pTS®×?7S[K!MxÃBYjRT?®gQç?H{wYB¦Î¯ÃB#G!K!MFRy?/I*ÕYÓ#Ó/kY«.×E#MJjG}MJKB#RyIkFm#m#m7ofI*YBYjpTBYRyM	S/MFpyv7Lu?#jL/??C
G!MFBYj{fLrgQC/MÃB#4s?7GWÎ¨h;N/MJjKBHIÕYÓ#Ó/kJBH« hNDMJjKBHIÕYÓ#Ó/k+ofI B#S[K{?7Ry?7SuE	?#sDKppy²FBYKpy?7SÁgQC/M}ÃB#4s?7GJI
æ/MJjS*B#è SDC/MJ²ÊÖ NtSDBHIB#è 4MJ²*Î­h;N/MJjKBHIuÕYÓ#Ó7Õ«HhNDMJjKBHIuÕYÓ#Ó/k+ofIv#jMJMFC/E"jB#SDC/?7pT²JMFC"B#CtBYsDKpy#M(G!MFBYj{fL
sDj?H{MFCDN/jMFGgQC/MqÃB#4s?7GJI æDMJjSB#è SDC/MJ²ÊÖ'NDSDB	ÎÐh;N/MJjKBHIiÕYÓ#Ó7Õ7ofIB#SDCMFGKpTBYKpy?7S?#P(CDpTGK!jpytN/KpT?7S
B#Ryv#?#jpTKLDG.gQRTB#SD{?/I±S/²FBÎ¬Ö BYjjB St+ BYv7BHIÕYÓ#Ó7Ô7of
WRTR9?#PKL/MFG!MqMF4stRy?%E£CDpyá`MJjMFSuK.G!MFBYj{fL§MJKL/?CtGtN/KKL/MqGB#4M}G!MFBYjf{L¡GstB#{M#ÄlKL/MqG!stB#{M}?#P
*)GFÐs?7GGpytRyMB#RyK!MJjfSDBYKpy#MpTGlKLDMqG!stB#{Mz?#PKL/Mz?#jC/MJjfpTS/v7G.?#P(KLDMqYBYjpTBYtRTMFGqgQC/M	ÃB#4s?7GJI
B#è 4MJ²*Î­h;N/MJjKBHI[ÕYÓ#Ó7Õ«HC/M*ÃB#4s?7G9Î­Ï@NDMJK!M#IuÕYÓ#Ó#ÓY«uCDMÃ(B#4s?7GÎ­h;N/MJjKBHI[ÕYÓ#Ó/k«Hæ/jpTMFCDB#S
ÎÛç?7RRyMJjFItÕYÓ#Ó#ÓH«Ö BYjjB St+ BYv7BHItç.NDp ³!sMJjG(Î¬×ON/jv7BHI kFm#m#ª7of±SKLDpTGstBYsMJjFIDLD?+AMJ#MJjFIAMlBYjM4?#jM
pTSuK!MJjMFG!K!MFCpTSOKL/M4G!stB#{M4?#P;MFuNtpyB#RTMFSD{M"{JRB#GG!MFG)?#P*GqgQhiMFBYjRÎ¨Ú9MJjBHIkFm#mYÓ[ofIipîM#l{JRTB#GG!MFG
?#P9*)GWA*pyKLMFB#{fLjMJsDjMFG!MFSuKpTS/vBCtpÌá`MJjMFS[K*GMJK?#PsDj?#tBYtpRTpyKEqCDpTG!K!jpTtN/Kpy?7SDGF*L/MJjM.pTGB#RG!?}B
SNDlMJj;?#P RyMFBYjSDpS/vlB#Ryv#?#jpTKLDGKLtBYK{JBYjjE?7N/KKL/MWGMFBYj{LpTS}KLDpTGGstB#{MgQ@SDCDMJjGG!?7S2IH×B#Ctpyv7B#S
Î¬hiMJjRB#S2I kFm#m7Ñu« ÃLDp{w#MJjpTSDv/I kFm#m#ª«2WB#GL£ÎÙ@jfN/²FC/²JMFRI kFm#m#m«×OB#CDpyv7B#S2I`@StC/MJjG!?7S2Ih'MJjfRTB#S
ÎÅÚ9?7RTpTSDGwuE#I2kFm#m#ª«`ÍspyjK!MFG(Î ×	MJMJw`I kFm#m#Ø7of;*LDpTG;PMFBYKN/jMWjMFCDND{MFGKL/MGpy²JM)?#P'KL/MG!MFBYj{LGstB#{M#I
B#RyKL/?7NDv7L¡jMF{MFSuK"jMFGNDRyKGg=)pTRRTpTG!stpTM4ÎÂhiMJjRTB#SI9ÕYÓ#Ó/k+o{?7S/¢tj KLtBYKKLDpG.jMFCDNt{Kpy?7S¡pTG"S/?#KB#G
pT4s?#jKB#SuK9pTSK!MJjG?#PKL/M**G!sB#{MB#G9sDjMJHpy?7NDGRTElL/?#sMFC	gKL/M(jBYKpy??#P`KL/MSND`MJj9?#P*)G
K!?KL/MSuNDMJj?#PiMFuNDpTB#RyMFSt{M.{JRTB#GG!MFG@pTGRy?%A;MJj@KLDB#SP?7N/jofLDMsDjpT{MAMlLDB+#MlK!?}sBFEP?#j*KLDpTG
jMFCDNt{Kpy?7SpTG*KLDBYK*KLDMlMJYB#RTNDBYKpy?7SO?#P9KL/M{JB#StCDpTCDBYK!M"G!K!jND{KN/jMFG*C/?MFG*S/?#KWKBYw#MB#C/B#SuKBYv#M?#PB#S
pT4s?#jKB#SuKWsDj?#sMJjKE?#PB#SuEOG{?#jpS/vqPQNDSD{KpT?7SDGJISDB#4MFRyECDMF{?74s?7GBYtpTRTpTKE#I2B#SDC£KL/MJjMJP?#jMKL/M
{?#jjMFGs`?7StCDpTS/vB#Ryv#?#jpyKLtGBYjM.RyMFGG(MJ~}{JpyMFSuKJ
±S¦KLDpTGstBYsMJj"AMsDj?#s?7G!MBS/MJA G!MFBYj{L¥GstB#{MA*LDpT{fL§pTG{JRy?7GMFRyExjMFRTBYK!MFCÁK!?KL/MG!sB#{Mz?#P
MFNDpyYB#RyMFSD{M{JRTB#GGMFG?#P/*)GJI#B#SDC.A*LDpT{fLA;M;LDBF#M{JB#RTRyMFCKL/MGstB#{M?#P`d!Z\aQd]Q+aZV7JX7J ]'HVYdaQ]QV# X
Y]d!ZFaZ#d!Vft7\OgQä@h*)Gof®ÜM£C/MJ¢tS/M	BxRT?{JB#RGMFBYj{L®B#Ryv#?#jpyKLDÞpTSÁKLDpTGGstB#{M#I(B#SDCrGL/?%A
KLDBYK4E¦NtGpTS/vBC/MF{?74s?7GBYRyMG{?#jpTS/vPQNDSD{Kpy?7SIAM	{JB#S¥MJB#RNDBYK!MRy?H{JB#RTRyExKLDM	G{?#jM	?#PWKL/M
G!K!jNt{KN/jMFG9pTSKL/MS/MFpyv7Lu?#jL/??C?#PtKLDM{JNDjjMFSuKä@h*I7KLuNtG?#DKB#pTSDpTSDvWB#SMJ~}{JpTMFS[KB#Ryv#?#jfpyKLD
A*LDpRyM}jMJKB#pSDpTS/v£B#S[E¡?#P*KL/MB#C/YB#S[KBYv#MFG?#P@NDGpS/vMFNDpyYB#RyMFSD{M{JRTB#GG!MFG"?#PW*)GJ¦*PK!MJj4KL/M
?#jpyv7pSDB#R9GN/t}pTGGpy?7S£?#P(KLDpGstBYsMJjFIÃ(LDpT{w#MJjfpTS/v¡gÕYÓ#Ó7Õ7olsDj?#s?7G!MFCxB#SD?#KL/MJjRyMFBYjfSDpTS/v	B#Ryv#?#jfpyKLD
KLDBYKzG!MFBYj{LDMFG}pTS¥KLDMG!stB#{MO?#PWMFNDpyYB#RyMFSD{M	{JRB#GG!MFG?#P*GzB#StC¥A*LDpT{fLr{JB#S¤B#RG!?¡G{?#jMOKL/M
{JB#SDCDpCDBYK!MGK!jND{KN/jMFGRy?H{JB#RTRyE#I#NDGpTS/v@B){JB#S/?7StpT{JB#RjMJsDjMFG!MFSuKBYKpy?7S4G{fL/MF4MP?#j9MFuNDpTB#RyMFSt{M{JRTB#GG!MFGJI
{JB#RTRyMFC§c /@TZJaZV7JX7J ]*HVYdaQ]QVY X#]dZ+aZ4#d!Vft[\g=Ãh*Gfof
LDM*jMFG!K;?#PKL/M@stBYsMJj;pTG?#jv7B#SDpy²JMFCzB#GP?7RTRT?+A*GJÄG!MF{Kpy?7SÕCDpTG{JNDGG!MFGG!?7M*sDjMFRpTpTSDBYjfpyMFG9B#SDC
KL/M)B#C/YB#S[KBYv#MFGB#StCzCtpTGB#C/YB#S[KBYv#MFG?#Pi{JBYjjEHpTS/vl?7NDK;KL/MG!MFBYjf{LzsDj?H{MFGGpTSqKL/MWGstB#{MFG?#P *)G
B#SDCzMFNDpyYB#RyMFSD{M{JRTB#GG!MFG?#Pi*)GJ(ÍMF{Kpy?7S	ÔC/MFG{jpyMFGKLDMWv#jfBYstLDpT{JB#R`?#H³!MF{KGJIDä*h;*)GJItKLDBYK
A*pTRR'MpTSt{JRTNDC/MFCpTSKL/M}sDj?#s?7G!MFCG!MFBYj{fL¡G!sB#{M#}±S§ÍMF{Kpy?7Så/IB	C/MJKB#pRyMFCC/MFG{jpTsDKpy?7S?#PKL/M
Ry?H{JB#RG!MFBYjf{L¦4MJKL/?HC§NDGMFCxK!?M HstRy?#jMKLDpTGG!stB#{MqpG.sDj?%pC/MFC2	ÍMF{Kpy?7SÁØ	GL/?%A*G"L/?+AÒA;M{JB#S
MJYB#RTNDBYK!M)ä*h**)GMJ~}{JpyMFSuKRyENDGpTSDvlBlC/MF{?7s`?7GBYtRyM@G{?#jpTS/vPNDSt{Kpy?7S2ÍMF{Kpy?7Sª.{?7SuKB#pTSDGKL/M
M Hs`MJjfpT4MFSuKB#R9jMFGNDRTKG)?#PKLDMMJB#RNDBYKpy?7Sx?#PKL/M}sDj?#s?7G!MFCB#Ryv#?#jpTKLDâ?7SxKLDM}@RBYjÞgQMFpTSDRTp{L2I
ÍHN/MJjf4?7SDC/KJI.ÃLDB+#MJ²§ÎÞÃ??#sMJjFI4kFm#n#m7ofI.±StGN/jB#SD{MrgQpTSDCDMJjFIç?7RTRyMJjFIWä*NDGG!MFRTR.Îéç.B#StBY²FBFABHI
kFm#m7Ñ#oB#SDC¦Ï@B#pTRT¢tSDC/MJj}gQ@DjB#G?7S2I9;j?+A*S2I×ON/jstLuExÎàÜ­pTS/wHRyMJjFIkFm#m#ª7oS/MJKA?#jwHGJIB#G"A;MFRTR;B#G
?7SÁCDBYKBYtB#G!MFGPj?7¯KL/1
M 0Ã±×OB#{LDpS/MÖMFBYjSDpS/vOä*MJs`?7GpyK!?#jE#ÜM	B#RTG!?pTSD{JRNDC/MqB#S¦MF4spyjpT{JB#R
{?74stBYjfpTG!?7SA*pTKL?#KL/MJj@GKBYK!MÊ=?#PÊ=KL/MÊBYjK)RTMFBYjSDpTS/v4B#Ryv#?#jfpyKLDGJæpTSDB#RTRyE#IÍHMF{Kpy?7SOÑ4{?7SuKB#pTSDG*KL/M
{?7SD{JRTNtCDpTS/vjMFBYjwGB#StCG!?74M.sDj?#s`?7GB#RTGP?#j*PN/KNDjM)A;?#jw`
2

» ¼X	½tt¾¿uÀ
8 7%9:;< :Ü=<;> 5 Ý?>A@B<ÜLÙÙ>Ù	D6 C 4 ÖE6 Ù
1 Ö6 Ù¿Ü 5 8
L/MGMFBYj{L§sDj?H{MFCDN/jMFGlNDG!MFCA*pTKLDpTSBFE#MFGpTB#SÁS/MJK|A;?#jwRTMFBYjSDpTS/v	B#RTv#?#jpyKLDGlNDGNDB#RTRTE	?#sMJjBYK!M
?7SKL/M4G!sB#{M?#P**)GJ4±SKLDpTG){?7S[K!M HKJIiKL/M4sDj?#tRTMFË{JB#Sx`MP?#jB#RTRTE	M stjMFGG!MFCB#GJÄpy#MFS
B£{?74stRyMJK!MK!jB#pTStpTS/vG!MJK	gQpîM#£AMCD?£S/?#K{?7SDGpC/MJj"}pTGGpTSDv	B#RN/MFGl?#j4RTBYK!MFSuKBYjfpTBYtRyMFGfGo FIH
J  (KMLMLMLK ONGP.?#P9pTSDG!KB#St{MFG(?#PiB¢tSDpyK!MG!MJK?#R
P QYBYjpTBYtRTMFGJTI S4ID¢tSDCzKL/M*V
 UW)GND{fLKLDBYK
U W H­BYjvB 
_g U¯`
Ä Fo
gk+o
XZY[]\O^
3 54

A*L/MJjM ^ g_U¯Ä`Fo;pTGBG{?#jpTS/v"PQNDSD{Kpy?7S4MFB#GNDjpTS/vKL/M)¢DKS/MFGG?#P'B#SuEq{JB#StCDpTCDBYK!M*VUâK!?4KL/M
CDBYKB#G!MJK*FIDB#StC1acbzpTGKL/M.PQB#pTRyEq?#PiB#RRKL/Ml*)G@A*pyKLBQxSD?C/MFG - 
×OB#S[E}?#P`KLDM@G!MFBYj{fLzsDj?H{MFCDN/jMFGJIupTSD{JRTNDCtpTS/vWKL/M@{?7?7SDRyE4NDG!MFCqRy?{JB#RG!MFBYj{fLzMJKL/?CtGJI[jMFRTE
?7S¡BS/MFpyv7Lu`?#jfL/?u?HCG!K!jNt{KN/jM4KLDBYK"C/MJ¢tS/MFGKLDM}Ry?H{JB#RjNDRTMFGg?#s`MJjfBYK!?#jGfoNtG!MFCK!?O?+#M}A@pyKLDpTS
KL/M4G!MFBYj{fLG!stB#{M#lLDMG!KB#SDCtBYjCS/MFpyv7Lu`?#jfL/?u?HCpSKL/MG!stB#{M?#P*)G.NDGMFG@KLDM?#sMJjBYK!?#jG)?#P
BYj{@B#CDCDpyKpy?7SI[BYj{*CDMFRyMJKpy?7S}B#StC}BYj{*jMJ#MJjGB#RIKL/MJjMJEBF#?7pCDpTS/vgQpTS4KL/M@¢DjG!KB#StC}KL/M@KLDpyjC}{JB#G!M%o
KL/MlpSD{JRTNDGpT?7S}?#PCDpyjMF{K!MFC{E{JRyMFG@pTSKL/Mv#jBYsL2
LDMxB#Ryv#?#jpyKLD}GKLDBYKG!MFBYj{fL,pTS­KLDMxG!stB#{Mx?#P*)G£NDGpTSDvÁRT?{JB#R4MJKLD?CDGBYjMMJ~}{JpyMFSuK
B#pTStRyEMF{JB#NDG!Mz?#P*KL/MC/MF{?74s?7GBYpTRTpyK|EsDj?#sMJjKE¡KLDBYK4B#S[E¦G{?#jpTSDvOPQNDSD{Kpy?7StGlM /LDpytpTKJ
G{?#jpS/vlPQNDSD{Kpy?7S ^ pTGGB#pTCqK!?M4[Zfc /@Hc\JV[ÇTZpTP2KL/MWG{?#jM)?#P B#S[EqB+E#MFGpTB#S	SDMJKA?#jw}G!K!jNt{KN/jM
B+E4`M*M sDjMFGG!MFC}B#GBsDj?CDNt{K@g?#jBlGNDÙpS4KL/M@RT?#vYÊG!stB#{M%o?#PRT?{JB#RG{?#jMFGpTS[#?7RTpTSDv?7SDRyE?7S/M
S/?HC/M.B#SDCpyKGstBYjMFSuKGJÄ
_g U¯`
Ä Fdo Hfe ^Tj lg k KnmGo X lg kDo!o
gÕ7o
^
g Yih

lg k KnmGo X glkDo!o]H
glk KnmGo X glk/o;Äp gq r=st + g 1 o
gÔ7o
^
A*L/MJjMup gq r=svt + g 1 BYjM"KL/M4G!KBYKpTGKpT{JG)?#PKL/MYBYjpTBYtRyMFGwkOB#StC mxo X glk/o@pTSyFIp=îM#KL/M4SuNDMJj@?#P
pTSDGKB#SD{MFGpTScFÒKLtBYK;BYK{fL}MFB#{fL}s?7GGpTtRyM(pTSDG!KB#SuKpTBYKpy?7S?#=P kB#StC mGo X glkDof mGo X glkDoA*pTRRCDMFS/?#K!M
KL/M.sBYjMFS[KGMJK?#PRkzpTSKLDM.*z
 U¡IDpîM# mGo X lg k/{o H J|(} S~ |{ k } UP7
®sDj?H{MFCDN/jMKLDBYK;{LDB#S/v#MFG?7S/M*BYj{(BYKMFB#{L}?+#M@{JB#S}MJ~}{JpyMFSuKRyElMJYB#RTNDBYK!M*KL/M*pT4stj?+#MF4MFSuK
?#DKB#pTSDMFC®E¤KLtpTGq{fLDB#S/v#M# ÍHND{L_B¦sDj?{MFCDNDjMO{JB#S­jMFNtG!MKL/M{?74stN/KBYKpy?7StGz{JBYjjpyMFC°?7N/KBYK
sDjMJHpy?7NDG G!KBYv#MFGJI[B#SDCl?7SDRyE)KL/MG!KBYKpTG!KpT{JGi{?#jjMFGs`?7StCDpTS/vK!?WKL/MYBYjpTBYtRTMFGA*L/?7GMstBYjMFSuK'G!MJKGLDB+#M
MJMFS4?HCDpy¢DMFCS/MJMFC	K!?4`MjMF{?74stN/K!MFC2;L/MB#CDCDpyKpT?7S?#j*C/MFRyMJKpy?7S?#P9B#S	BYjf{   kpTSB*
U {JB#SzKL/MJjMJP?#jM)M@MJYB#RTNDBYK!MFCzE}{?74stNDKpTS/vl?7StRyE4?7S/MS/MJA­Ry?{JB#RG{?#jM#I
lg k KnmGo X( lg kDo!o?#j
^
j
n
K
G
m
o
lg k
{   k4jMFNDpyjMFGKL/M
Xn lg k/o!ofIHjMFG!sMF{Kpy#MFRTE#*L/M*MJYB#RTNDBYKpy?7Sq?#P2KL/M@jMJ#MJjGB#R`?#PB#SzBYj	
^{?7
j 4stNDKBYKpy?7S?#PKA?qS/MJART?{JB#RG{?#jMFGJI
lg k Knmxo X(n lg k/o!o(B#SDC
lg  KnmGo X  lg 2o!of
±KlGL/?7NtRTC£`MSD?#K!MFCxKLDBYK.MFB#{fL§GK!jND^{Kj N/jMpSKL/M}*ãG!stB#{M}^ j pG.S/?#K.B#RyABFg EHGlCDpyá`MJjMFSuKPj?7
KL/M?#KLDMJjGlpTSxK!MJjG.?#P(pyKGljMJsDjMFGMFS[KBYKpy?7S§{JBYstBYtpTRpyKE`Ä.pyPA;MzpTS[K!MJjsDjMJKKL/M}BYjf{JGpTSBO*ÂB#G
{JB#NDGB#R/pS[K!MJjB#{KpT?7SDGMJKAMJMFSBYjpBYtRyMFGJIYKL/MFSMFB#{fL*­jMJsDjMFG!MFSuKGBCDpÌáMJjMFS[K4?HC/MFR«7L/?%A;MJ#MJj+I
pyP2AMWGMJMWB"* B#GB"G!MJK;?#P'C/MJsMFSDC/MFSD{M pTStC/MJsMFSDC/MFSD{M(jMFRBYKpy?7SDGLDpTstG9MJKAMJMFSBYjfpTBYtRyMFGWgKLDBYK
sMJjpyKG;NDG;K!?"PQB#{K!?#jpy²JMB³?7pS[K;sDj?#tBYtpRTpyKE4CDpG!K!jpytNDKpy?7SofI#KL/MFSCDpÌáMJjMFSuK;*G(BFEqjMJsDjMFG!MFSuK
KL/MGB#M4?CDMFR"ß#MFSpTSKL/M{JB#G!M4?#PNDGpS/vB{JB#NDGB#R9pTSuK!MJjsDjMJKBYKpT?7S2I pyPAM}NDGM"?#G!MJjYBYKpy?7SHÊ
?7SDRyEzCDBYKBgQB#G*?#sDs?7G!MFCK!?M HsMJjpT4MFSuKB#R2CDBYKB4A*LDMJjM.G!?74MYBYjpTBYtRTMFG(BFEM.B#SDpysNDRTBYK!MFCofIHpyK
F
ð òù'ù=ô!õúvò %úiò Dú üó %û î÷ M÷=øôúô÷'ò ,%ò %ôDú ø ø.õù=]ô vò ô ÷="ò vò ]ô òùù=ôú #vò %ô ]ô Dü÷=ø)÷=ø%dô õ;ù õ ûüôú 
  Düûûõfûüú
ò #dô +ô ò÷=¡ô wM   ð
^j

¢

À

 $,.$ !

f¿ À#%$&(' »*)

"Ô©Ô$Ôð!$é $



Tp G(NDpyK!M.{?7?7S	P?#jKA?}BFE#MFGpB#SOS/MJK|A;?#jwG*K!?MMF4stpyjp{JB#RTRyEpTSDCtpTG!KpTS/v7NtpTGLDBYtRTM#2Ü°L/MFSKA?
*)GwU B#SDC1U£{JB#SjMJstjMFG!MFSuKKLDM)GB#4MG!MJK(?#P'{?7SDCtpyKpy?7SDB#R`pTSDC/MJsMFSDCDMFSD{M@B#GGMJjKpy?7SDGJIHAMGBFE
KLDBYKKLDMFG!Ml*)GWBYjMzZ"¤JÉH]l¥VYTZ^ta 0 gQhiMFBYjR'Î Ú9MJjBHIikFm#mYÓ[ofI`B#SDCAMlC/MFSD?#K!M.KLDpTG(B#GwU§¦¨U £ 
Ü­L/MFS	RyMFBYjfSDpTS/vBFE#MFGpTB#SOS/MJKA?#jwHGPj?7 CDBYKB4NDGpTS/v4G{?#jpTSDv"PQNDSD{KpT?7SDGJIHKA?}CDpÌáMJjMFSuK.gtN/K
MFNDpyYB#RyMFS[Kfo;*GBFEzMWpSDCDpTG!KpS/v7NDpTGLtBYtRyM#I7CDN/MWK!?4KL/M)M /pTG!K!MFSD{M)?#P'pS[YBYjpTB#SuKsDj?#sMJjKpyMFG;?7S
MFNDpyYB#RyMFS[KW*)GJI2EHpyMFRTCtpTS/v4MFNDB#R'G{?#jMFGJ*ÜM{?7NDRTCOKBYw#M4B#C/YB#S[KBYv#M?#PKLDpG*pTS?#jC/MJjWK!?qv#MJKB
4?#jMljMFCDND{MFCG!sB#{M.?#P9G!K!jND{KN/jMFGK!?MM stRT?#jMFC2
LDMWP?7RTRy?%A*pTS/vKL/MJ?#jMF stj?+HpTC/MFGBv#jBYstLtpT{JB#R{jpyK!MJjpy?7SzP?#jC/MJK!MJjpSDpTS/vKL/M)MFuNDpTB#RyMFSt{MW?#P
KA?q**)GJÄ
¬®­n¯[¢°«(±³²ÿ¢«¤¦=´¬µ,µ¶¸·¹ b5
c º	»5¼;\.V#d!Z"Z ¤JÉHl] ¥VYTZ^ta;] ÈVY^cY^tXz] ÈaHZX}V ¥YZ
©uª ¢§,«Ð¢¤
aHZl\JV /}Zl\e#ZJyZFa=cY^xVY^aHZl\JV /}½Z ¥+Æ|\aQdÉDFaQÉHd!Zi\ ¾
L/Ml\e7ZTZJa=cY^4?#PB* pTG;KL/M)NDSDCDpTjMF{K!MFCv#jBYsL}KLDBYKjMFGNDRyKGPj?7¨pyv7S/?#jpS/vlKL/MWCDpyjMF{KpT?7SDB#RTpyK|E
?#PiMJ#MJjEMFC/v#M#;z
 ¥+Æ|\aQdÉDFaQÉHd!ZpTSB*¿
 U¯pTG(B#S?#jC/MJjMFCK!jpystRTMJK;?#P9S/?HC/MFGJIlg  K k KnÀ ofI`GND{L	KLDBYK

gk+{o Uâ{?7S[KB#pTStGKL/M)BYj{JG  kB#StcC k5Á À IHB#SDCgÕ7o9KL/MWS/?HC/MF]G B#SDC À BYjM@S/?#KB#C³B#{MFS[KpTcS U§
 HZV7YÆa=cYÆ/ZV7.HV#aaZJdf^gQGL/?#jK!MFS/MFCLHÊLopTS}B*8
 UâpTG;B#S}?#jfC/MJjMFCqK!jpystRyMJK?#P S/?HC/MFGJI`lg  K k KnÀ ofI
GND{fLKLtBY*K Ué{?7SuKB#pTSDG@KL/MBYj{J	G   k	B#StÂ
C kÃÁ À W>*?#K!M"KLDBYK)pTSB#S£LHÊLOstBYK!K!MJjSÁlg  K k KnÀ o*KL/M
À
S/?HC/MFG £B#SDC {JB#S`M.B#CY³!B#{MFSuKJ
WS/?#KL/MJj"{LDBYjB#{K!MJjfpy²FBYKpy?7Sx?#PMFNDpyYB#RyMFSuK.*)GAB#GlsDjMFG!MFSuK!MFCxEÃ(LDpT{w#MJjfpTS/vxgkFm#m#Ø7ofI9K!?YÊ
v#MJKL/MJjA*pTKLsDj?u?#PKLtBYK)GMJ#MJjB#R9G{?#jpTSDvqPQNDSD{Kpy?7StG@NDGMFCOP?#j.RyMFBYjStpTS/v}BFE#MFGpTB#SxS/MJK|A;?#jwHG)Pj?7
CDBYKBv7py#MWKL/MWGB#4MWG{?#jM@K!?MFNDpyYB#RyMFSuK;G!K!jNt{KN/jMFG)gQGND{LqPQNDSD{Kpy?7SDGBYjM){JB#RTRyMFC	\c#d!ZnZ ¤FÉH] ¥YVYyZJ^ta
ÈÉ^`FaQ]cY^/\!of
LDM.{?7SD{MJsDK*?#PMFNDpyYB#RyMFSD{M?#P9*)G@stBYjKpTKpy?7SDG(KL/MG!stB#{M.?#P9*)GWpTSuK!?}BG!MJK*?#PiMFNDpyYBÊ
RyMFSD{M{JRTB#GGMFGJ@Ü­L/MFS/MJ#MJj.BzG{?#jMMFNDpyYB#RyMFSuK*PQNDSD{Kpy?7S£pTG*NtG!MFC2IpyKWGMJMFG)SDBYKN/jB#R'K!?G!MFBYj{L£P?#j
KL/MWMFG!K;{?7S/¢tv7N/jBYKpy?7SzpTSqKLDpTGS/MJA°GstB#{M@?#P MFuNDpTB#RyMFSt{M@{JRTB#GGMFG;?#P'*)GJ*LDpTG{fLDB#S/v#MpTSqKL/M
G!MFBYj{fLG!sB#{MlBFEDjfpTS/v4G!MJ#MJjB#RB#CDB#SuKBYv#MFGJÄ
Ä *L/M.G!stB#{M.?#PMFNDpyYB#RyMFSuK{JRTB#GG!MFGpG4?#jMjMFCtND{MFCKLDB#SKLDMlG!stB#{M.?#P*)GgQB#RyKL/?7NDv7L	pyK
pGG!KpTRTRMFSD?#j4?7NDGfofÜM{?7NDRTC	KL/MJjMJP?#jM.M Hs`MF{K*K!?}?#DKB#pTS	`MJK!K!MJj*jMFGNDRyKGgA*pyKLKL/MGB#4M
GMFBYj{LMá`?#jKfof
Ä WG"A;MC/?£S/?#K"Gs`MFStCKpT4Mzv#MFS/MJjBYKpTSDv¦gQNDGpS/vKL/Mq?#sMJjBYK!?#jGC/MJ¢tS/MFC¡K!?£?+#MMJKAMJMFS
SDMFpyv7L[?#jpS/v¥{?7S/¢Dv7N/jBYKpT?7SDGpTS_KL/M§G!MFBYj{LÅG!stB#{M%oB#StC_MJB#RNDBYKpTS/v,gQNDGpTS/v¥KL/MxG{?#jfpTS/v
PQNDSD{KpT?7So`MFNDpyYB#RyMFS[Ki*)GJI#AM{?7NDRTC.?#tKB#pTSl4?#jMMJ~}{JpyMFSuKB#Ryv#?#jpyKLD}GJ'Ï@?+AMJ#MJjFI[B#G'KL/M
jfBYKpy?l?#P2KL/MWSuNtlMJj?#P2MFNDpyYB#RyMFSD{M*{JRB#GG!MFG;K!?KL/M@SuNDMJj?#P*GGMJMFGWgMFstpyjpT{JB#RRyE/o
K!?OB#G!EsDK!?#K!M}K!?ÓHÕ#ª7Ñ§g=)pTRRTpTG!stpTM"Î hiMJjRT}B#S2I'ÕYÓ#Ó/k+ofIKL/MMJ~}{JpTMFSD{EpT4sDj?%#MF4MFSuK.BFE
M.G}B#RTR
Ä *L/MlG!MFBYj{fLpTS	KL/MlG!stB#{Ml?#P**)G@}BFEMMFB#GpTRyEzK!jBYsDsMFC	pSBRy?H{JB#R2?#sDKpT"NDItB#StCKL/M
GpyKNDBYKpy?7S¦A?#jG!MFSDGB#GKL/M?#sMJjBYK!?#jGC/MJ¢tSDMFC§P?#jKLDpTG"G!stB#{M{JB#S¥4?%#M`MJK|A;MJMFS¥{?7SD¢DvYÊ
NDjBYKpy?7SDG.{?#jjMFG!s?7SDCDpTSDvzK!?OMFuNtpyB#RTMFS[Kl**)GzgA@LDpT{LxA*pTRTRM4MJYB#RTNDBYK!MFC§A*pyKLKL/MzGB#4M
G{?#jM%ofLDpG9CDpy~}{JNDRTKE{JB#S}MstBYjKpTB#RTRyE"BF#?7pTC/MFCzpyPAM@G!MFBYj{fLqpS4KL/M@GstB#{M*?#P2MFNDpyYB#RyMFSD{M
{JRB#GG!MFGJ
Å+ð`ñ+Æô ôùõfûõfö+÷=øòfù=úiõfûüúò*öúô÷=øô9÷=ôù=Ç
ó ÈTÉi
Ê
TÉM
Yþ 
	
ËÆÌÈÍ"ÎvÏ
["õ )ù=ôúô;ù ô÷=ø%ô÷=ô|ù=Ð
ó É"Ì;ý ÒÑÆÌT"ÿ c
ËÆÌÍ"ÎvÏ

Ó 2ù÷2úòfó(O
ô Ìõfó üÔû ò !üúQ÷;ù %ö%;÷ üvò %Öú ÕØ×,Ìòù2÷=øô ó(òfù=ô'ù=ôúQ÷;ù |÷=¡ô 	õfú.ô ø%ôù=ô'÷=ø%ô'l÷ `ò ÙÚOÛi¸ú !"õ *ù=ô +ù=ôúô J÷`÷=ø%ô
ú=õfó(ô %ù=ò Yõ üû î÷ ÜúQ÷;ù %ö%;÷ üvò %úð Ýll÷=ø(ô òó(ó(vò lú î÷=öYõ;÷ ò uøô|ù=ôõfûüût÷=ø%Øô fõ;ù õ %ûôú;õù=ô üú ù=ô|÷=ôõ GÕÞüú
÷=øô yõfó üÔû *ò Dö %ù=ôúQ÷;ù ÷=¡ô *óö%ûü;÷ %òó õf`û üúQ÷;ù ö+;÷ üvò ú +÷=øôúôl÷ (ò vò ô %÷=ú"ò D¡ô ßJö õûüô .ô vò Æà+ôð
á

» ¼X	½tt¾¿uÀ
LDMzCDpGB#C/YB#S[KBYv#MFG4BYjMKLDBYKJI;pTS¡KLtpTGGstB#{M?#PMFuNtpyB#RTMFSD{Mz{JRB#GG!MFGJIpTK"pTG"4?#jMM HsMFSDGpy#M
K!?v#MFS/MJjfBYK!MlS/MFpyv7Lu?#jpTS/v{?7S/¢Dv7N/jfBYKpy?7SDGJI/MF{JB#NDG!MAM.B+EzMP?#j{MFCK!?4sMJjP?#j G!?74MlwpTStCq?#P
{?7SDGpG!K!MFSD{E{L/MF{wI7pS?#jC/MJjK!?@MFSDGN/jMKLDBYKKL/MFGM;{?7S/¢Dv7NDjBYKpy?7SDG2jMJsDjMFG!MFSuK MFNDpyYB#RyMFSD{M{JRTB#GG!MFG 3 «
pTSB#CDCDpTKpy?7S2I[KLDMWMJYB#RTNDBYKpT?7S?#P KL/MS/MFpyv7Lu?#jpTS/v"{?7S/¢Dv7N/jfBYKpy?7SDGBFEB#RTG!?"M4?#jM)M sMFSDGpy#MWpTP
AMlBYjMlS/?#K@BYtRyMK!?KBYw#M"B#C/B#SuKBYv#M"?#P'KL/MC/MF{?74s?7GBYtpTRpyKEqsDj?#sMJjKEz?#PiKL/MlG{?#jpS/v4PNtSD{Kpy?7S2
æpTSDB#RTRTE#I KL/MS/MJAÒGMFBYj{LÁG!stB#{Mpyv7LuKpS[K!j?HCDND{MqS/MJAÒRy?H{JB#RB HpBKLDBYKBYjMS/?#KlsDjMFG!MFS[K"pTS
*ÙG!stB#{M#
±S¦?#jC/MJj4K!?xC/MFGpTv7S¦B#S¦M HstRy?#jpS/vOstj?{MFGGP?#j4KL/MG!stB#{M?#P@MFuNtpyB#RTMFSD{Mz{JRB#GG!MFGAM	{?7NDRTC
NDG!MqKA?CDpTG!KpTSt{KlBYsDsDj?7B#{fL/MFGJÄKLDMq¢DjfG!K{?7SDGpTG!KG"pTS¡{?7SDGpTC/MJjpTSDv	KLDBYKB#S¡MFNDpyYB#RyMFSD{M{JRTB#GG"pTG
jMJsDjMFG!MFS[K!MFCEqB#SuEz?#P'pyKG{?74s?7S/MFSuKGlgQpTSzKLDpTG{JB#G!M#IDpTKpGSDMF{MFGGBYjEzK!?BF#?7pTCMJYB#RTNDBYKpS/v44?#jM
KLDB#Sz?7S/M{?74s?7S/MFSuKs`MJj({JRTB#GGfof«DB#SDCzKL/MG!MF{?7SDC{?7SDGpTG!KGpTSzNDGpTS/v"B4{JB#S/?7SDpT{JB#R`jMJstjMFG!MFSuKBYKpy?7S
G{fL/MF4M.P?#jKL/Ml{JRB#GG!MFGJ
LDM£v#jfBYstLDpT{JB#RW?#H³!MF{KG	{?74?7StRyE®NDGMFC­K!?¥jMJsDjMFG!MFSuKMFNDpyYB#RyMFSD{M{JRTB#GG!MFG?#P"*)G£BYjM
V7FX#F]W/VYdaQ]VYX#]dZ+aZz#d!Vft7\"gQhiMFBYjR9ÎÙÚ9MJjBHI9kFm#mYÓ[ogwHS/?+A*S£B#ãG â{º	»5¼;\!of*LDMFG!Mv#jfBYstLDG
{?7SuKB#pTS£`?#KLOCDpyjMF{K!MFCÁgQBYj{JGfo*B#SDC£NDSDCDpTjMF{K!MFC§gQRTpS/wGoMFC/v#MFGJItN/K@S/?zCtpyjMF{K!MFC{EH{JRyMFGJ)py#MFSB
h**®
 äC/MJ¢tS/MFC?7SB.¢tStpyK!MG!MJK?#P2S/?HC/MFDG SÅB#SDCBlSD?C/M k } S4IuKL/MP?7RTRy?%A*pTS/vGN/G!MJKG?#P2S/?HC/MFG
BYjMlCDMJ¢tS/MFC2Ä
mxoå lg kD]
o H J|} S~ |] k } ä½P7ItKLDM.G!MJK?#P'HVYdZ^ta\(?#RP k`
Ä
å lg kD]
o H J|} S~k é|Ø} ä½P7ItKLDM.G!MJK?#P[]yYd!ZJ^}?#RP k`
Äçæxè
å
o H J|} S~k`ë |Ø} ä½P7IDKLDMlG!MJK?#P^`ZJ]Ì#HÇcYdf\?#.P k`
Ä pê lg kDd
å lg kD
o H J|} S~ |Z k } ä K ?#Zj k ï|} ä ?#	j kë |} ä½P7I2KL/MG!MJKW?#P@V7 ðJV7Z^ta\WK!Ã? k`
Äíì*î
ñ uHpy?7NDGRTE ì*î å lg k/{
o H mGo?å lg kDDo ò æxè å lg kD=o òBpyê å lg k/of
WSOBYjx{   k	pS	Bq**¿
 UépGTc /*DZyZpyP9pyK@BYsDsMFBYjG@pTSMJ#MJjEO*ÒMFRy?7S/v7pTS/v4K!?qKL/MGB#4M
MFNDpyYB#RyMFSD{M4{JRTB#GGB#ãG U§"WSBYjÜ{   kpT
S UÞpGWGB#pTCK!?MqdiZ ¥#Zdf\f]=ÇTZpyPpTK)pGS/?#K{?74sMFRTRyMFC2I
pîM#.KLDMJjM4pTG)Bz**ó
 U£ MFNDpyYB#RyMFS[KWK!ô
? UéKLDBYK.{?7SuKB#pTSDG)KLDMBYjf½{ Áõk`lWG)MJ#MJjEO** pTSB
stBYjKp{JNDRTBYj*MFNDpyYB#RyMFSD{M"{JRTB#GGWLDB#GWKL/MGB#4M"GMJKW?#P{?7s`MFRRyMFCB#SDCOjMJ#MJjGpytRyM"BYj{JGJIBq{JB#S/?7StpT{JB#R
jMJsDjMFG!MFS[KBYKpT?7Sq?#PB#SzMFNDpyYB#RyMFSD{MW{JRTB#GGpTGKLDMWh;* {?7SDGpTGKpTS/vl?#PB#SBYj{@P?#j;MJ#MJjEz{?74sMFRTRyMFC
BYj{pTSzKL/M)MFNDpyYB#RyMFSD{M{JRTB#GGFIHB#StCB4RTpTS/w4P?#j(MJ#MJjEzjMJ#MJjGpyRyMWBYjf{YLDpTG;wHpTSDCq?#P'jMJstjMFG!MFSuKBYKpy?7S
LDB#GMJMFS}v7pT#MFSzGMJ#MJjB#RSDB#4MFGJÄiHV7aaZd^Og=ÍstpyjK!MFG;Î ×	MJMJw`IkFm#m#Ø7ofI'fc /@yZFaZÜ â{ºw»%¼¤Mg öDâº	»%¼o
g=ÃLDp{w#MJjpTSDv/IkFm#m#ª7ofIWZ\\FZ^taQ]VYi7dVt§gQ@StC/MJjGG!?7SxMJK"B#RyIkFm#m7Ñu«;)B#GLÁÎÂ@jfN/²FC/²JMFRIkFm#m#m7ofOWG
B{?7StG!MFuNDMFSD{M}?#P(KL/MJ?#jMFêkYIB{?74sRyMJK!MFC§h;*ãs?7GG!MFGG!MFGB#S¡BYjc{   kpTPB#StC?7SDRyEpyP(B
K!jpysRyMJK;?#PiS/?HC/MFGlg  K k KnÀ o;P?#jfGB[ÊG!K!jfND{KN/jMW?#j(KL/MBYj*{   k}pTGjMFNDpyjMFCqK!?4MWCDpTjMF{K!MFCCDN/M
K!??#KL/MJj*[ÊG!K!jfND{KN/jMFGlgK!?qBF#?7pTCP?#j}pTS/v4BS/MJA_uÊG!K!jND{KNDjM?#j*{jMFBYKpTSDv}BCDpyjMF{K!MFC{E{JRyM%o.gQG!MJM
æpyv7N/jMk+of
>@?#K!MKLDBYKqB#S­BYjtpTK!jBYjEÁh*¯C/?MFGzS/?#KzSDMF{MFGGBYjpTRTE¦jMJsDjMFG!MFSuKqG!?7MOMFNDpyYB#RyMFSD{M{JRB#GG
?#P**GJIB#RyKL/?7NDv7L¡KL/MJjMqpTG"B?7SDMÊ=K!?YÊ=?7S/M{?#jjMFG!s?7SDC/MFSt{M}MJKAMJMFSÁ{?74stRyMJK!MFCÁh**)G4B#SDC
MFNDpyYB#RyMFSD{Ml{JRTB#GG!MFG?#P*GJ>*MJ#MJjKL/MFRyMFGGJI`{?74stRyMJK!MFC£h**)G@BYjM{?7SDGpC/MJjBYtRyE4?#jM{?7Ê
stRTp{JBYK!MFCKLDB#Sv#MFS/MJjB#R9h;*)GJ¨{LDBYjfB#{K!MJjpy²FBYKpy?7S¡?#PKL/MG!sMF{Jpy¢{lsDj?#s`MJjKpyMFGWKLDBYK.Bh*
"NDG!K(#MJjpyPEpTS?#jC/MJjK!?}`M.B}{?74stRyMJK!MFC	h;*¬AB#G*?#DKB#pTS/MFCE@SDCDMJjGG!?7SMJK*B#R= gkFm#m7Ñ#ofÄ
÷ ,
ð øiò÷=ô÷=øYõ÷÷=ø%ôvò #ôùõ÷=òfù=úò 'võ î;÷ üvò õ ù=ô ô|ù=ú=õfû`"ò  õ õ;ù 	÷=ø%ô Ù.ÚOÛ¦ú Y"õ ô@õfûüúGò ô¡ô "õ vò %ú úQ÷=Æô Æ
øô úùT%ö%D
÷ @÷=ø üOú õfúdô ô9ú üó Ôû (÷=ôúQ÷÷=ø%ô9õ %úô ô9"ò ,îù=ô ÷=ô *Æûüôúð
ûü

À

 $,.$ !

f¿ À#%$&(' »*)

"Ô©Ô$Ôð!$é $

z



z
x

u

x

y

u

y
w

w

(a)

(b)

æpyv7N/jMkYÄ"gQB[o)BYv¥B#SDCÅgo4{?74stRTMJK!MFC®h;*"(L/M£BYj{JG
{?74sMFRTRyMFC2«HKL/MlBYjf{ k ÿþ pTG(jMJ#MJjGpytRTM

À


I

 k



_B#SDCç




BYjM
ý

¿­#l¢«ÐBB§ ¢Ì¡l´Z¬µ,µ,· »Vâº	»%¼¨äÂ]\"Vc /@TZJaZ âº	»%¼] ÈVY^	cY^tXz] È
]Qa\JV#aQ]\
	Z\la/Z;ÈcYycYb9]^	cY^`Y]aQ]cY^/\
 äã]\VVY]^	#d!Vft _] ¾QZ ¾W]Qa;fcY^ta=VY]^/\l^`cyHVYdaQ]QV# XY]dZFaZJX7JTZ\M¾
 d¹ Z/+aZZ\ÉtJÇ=#X7d!FVfyZ}tcÈ]^yZJY^uÉD7faZ	#ÇdXqZV#iZ a¥#ZJZddX}aVY^¥V#]cY^dqnZ c ¤F/@ÉDHVYc#9^`a=cZ^t¦a 4 aHcwÈZdäàZzVY]\.d!Z}HaQbcYdc[VY^ cY^D]_Æ!¾QZcY¾)^DcY\J^xZFÉ/Zi¥#aQ] Z¥#dZX4^`ÉcF^`[YZ]\Æ
fcY^D^`ZFaZ	ÇXzVq ]^De ¾
 ¹ /ZcY^ 	i#ÉHdV7aQ]QcYÂ^   k À 7c%Z\l^c7acFfJÉHdV\VY^]^#É/Z}\fÉtÇ#d!Vft£cÈ ä%¾
]y¥Y#ZJÉHdfdXZ VY d!Ü VY\ VY ^]k^#} É/äìZqcF\fÉDJÇÉH#dfd!Vf\qt]£^¥c!V7wÈ a)ä%yZ¾ V\a.cY^ZcÈqa/ZWÈc#ÉdcY^ 	'#ÉHd!V#aQ]Qc#^/\#]\ÌV#X7Z]^

©uª ¢§,«Ð¢¤

x

z

x

z

x

z

y

y

y

(a)

(b)

(c)

x
t

z
y
(d)

æipTv7N/jMlÕÄLDMP?7N/j@CDpÌáMJjMFS[K{?7SD¢Dv7N/jBYKpy?7StG({?7S[KB#pTStpTS/vB#S	BYj{G  kpTSB{?7stRyMJK!MFC	h;*
Ö MJK;NDGpTRTRTNtG!K!jBYK!M(KL/MWB#C/B#SuKBYv#MFG?#PG!MFBYj{fLDpTS/v"pTSKL/MWG!stB#{M@?#P2MFuNDpTB#RyMFSt{M*{JRTB#GG!MFG;?#P*)G
jBYKL/MJjKLDB#SzKL/M)G!stB#{MW?#P *G(A*pyKLzBGpT4stRyM*M HB#4sRyM#æpyv7N/jM)ÔCtpTG!stRTB+EGKL/M)G!MJK;?#P s`?7GGpytRyM
*)G4pS[#?7RyHpTS/vOKL/jMJMzS/?CDMFG J  K k KnÀ P7I;A*pyKL§BYj{JG"`MJK|A;MJMFS À B#SDC  IB#SDC§MJKAMJMFS k¡B#SDC  
L/M4¢tjG!K)KL/jMJM}**)GBYjMMFuNtpyB#RTMFS[KJ±SK!MJjG?#P(pTStC/MJsMFSDC/MFSD{MpTS/P?#jBYKpy?7SI2KL/MJE£RTMFB#CK!?
KL/M*GB#4M*pTSDCDMJs`MFStC/MFSD{MG!KBYK!MF4MFSu"K !`lg k KnÀ ~ 2olg k4B#SDC À BYjM*{?7SDCtpyKpy?7SDB#RTRTElpTSDC/MJsMFSDCDMFS[Kv7py#MF%S 2ofI
A*L/MJjMFB#G.KL/M}GKBYK!MF4MFS[#K !lg k KnÀ ~ $7oqlg kB#StC À BYjM}BYjv7pTStB#RTRyEOpSDC/MJsMFSDC/MFSuKfo@{?#jjMFG!s?7SDCDG)K!?OKL/M
P?7N/jKLO?7S/M#@LDMlP?7N/jW**)GBFE`M"GND}BYjpy²JMFC	E?7SDRyEK|A;?CDpyá`MJjMFSuK@{?7stRyMJK!MFC£h*)GFI
GL/?%A*S	pTSæpyv7NDjMå/

&%

û

» ¼X	½tt¾¿uÀ
y

y

x

x

z

z

(a)

(b)

x
y

z

y

z
x

(c)

(d)

æpyv7N/jMlÔÄæD?7N/j@CDpyá`MJjMFSuK*)G@A*pyKLKLDjMJM.S/?HC/MFGB#SDCK|A;?qBYj{JG
x

y

z

y

z
x

(a)

(b)

æipTv7N/jMå/Ä(A?}CDpyá`MJjMFSuKMFuNtpyB#RTMFSD{M.{JRTB#GG!MFG*?#Pi**)G
WGiA;M{JB#SG!MJM#IYKL/MGMFBYj{LG!stB#{M(B+E.MjMFCtND{MFC.ElNDGpS/v*h**)GK!?@jMJsDjMFG!MFSuK'KLDM{JRTB#GG!MFGJÄ
pTSl?7N/j'M /B#4stRTM#IK!?WKA?){JRTB#GG!MFGpTSDGK!MFB#C.?#PDP?7N/j'{?7SD¢Dv7N/jBYKpy?7StGJ«7pyK'{JB#SM;G!MJMFSgQWSDC/MJjGG?7SlMJKB#RyI
kFm#m7Ñ#olKLDBYKlKLDMjBYKpy?O?#P(KL/M}SNDlMJj?#P**)G"K!?OKL/MqSuNDMJjl?#P({JRTB#GGMFGpTGÕ#(Ø 'k#kqP?#j"KL/jMJM
S/?HC/MFGJIØå[(Ô 'kFn#ØzP?#jWP?7NDjWS/?HC/MFG@B#SDCOÕ#m#Õ#nH)k 'n7ÑYm#Õ	P?#jW¢D#MS/?CDMFGJ«pTSO4?#jMv#MFS/MJjB#R'K!MJjGJI`KL/M
jMFGNtRyKG9?#DKB#pTSDMFCEq)pTRTRTpG!stpyMB#SDC}hiMJjRB#SgÕYÓ#Ó/k+o;pTSDCDp{JBYK!MKLDBYKKLtpTGjBYKpT?lBYsDsDj?7B#{fL/MFGB.YB#RTN/M
?#P'RTMFGGKLDB#SP?7N/jB#GKL/M.SNDlMJj?#P'SD?C/MFG(pSD{jMFB#G!MFGJ*L/MNDG!M)?#P MFNDpyYB#RyMFSD{M{JRTB#GGMFGKL/MJjMJP?#jM
MFSuKB#pTRTG}{?7Su#MFSDpyMFSuKqGBFHpTS/v7G}pS¥M sRy?#jBYKpy?7SrB#StCrMJYB#RTNDBYKpy?7S¤Má`?#jKJIB#RTKL/?7N/v7L¥KL/MOv7B#pTSrpTGqS/?#K
G!sMF{KB#{JNDRTBYj+
ñ SxKL/M?#KL/MJj"LDB#SDC2I'KL/M}NDG!M}?#PB{JB#S/?7SDpT{JB#RjMJsDjMFG!MFSuKBYKpy?7S§G{L/MFM}B#RTRy?%A*GlNDG.K!?	M sRy?#jM
KL/MG!stB#{MsDj?#v#jMFGGpy#MFRyErB#StC°GEG!K!MF}BYKpT{JB#RTRyE#I@A*pyKL/?7N/KzRy?7GpTSDv§B#SuE¤NDS/M HstRy?#jMFC°{?7S/¢Dv7NDjBYKpy?7S
NDSDSDMF{MFGGBYjpTRTE#"ä*MJKN/jSDpTSDvqK!?	?7NDj.M HB#stRyM#I RyMJK.NtGGN/sDs?7G!M"KLDBYK.KL/M4K!jfN/M4?HC/MFR9pTG)KL/M*
CDpTGstRTBFE#MFCpTSæpyv7N/jMå/î¡B#StCOAMG!KBYjKKLDMGMFBYj{LA@pyKLB#SMF4sDKE£v#jBYstL¥gA*pTKLS/?BYj{JGfofÖ MJK
NDG(B#RTG?B#GGND4M)KLDBYK*KL/M.G!MFBYj{fL	B#Ryv#?#jpyKLt pTC/MFSuKpy¢DMFGKLDBYKB#SMFC/v#MMJK|A;MJMFÂ
S OB#SDBC kqsDj?HCDND{MFG
KL/M4v#jMFBYK!MFGKlpT4sDj?+#MF4MFSuK.pTSKL/M4G{?#jM#KKLtpTG4?74MFSuKJIKL/M4K|A;?B#RTK!MJjSDBYKpy#MFGJI   kB#SDC
çÁ
k¤gQ{JB#G!Mk}B#SDC§{JB#G!MzÕpTS¡æpyv7N/jMqØIjMFG!sMF{Kpy#MFRyEDofIiBYjM}MFNDpyYB#RyMFS[KJÖ MJKNDGS/?+A¨GN/sDs?7G!M
KLDBYK@A;MlCDMF{JpTC/M.K!?}{?7StS/MF{K*KL/MS/?CDMFZG B#SDC À «`BYv7B#pTS	AMlLDB+#MK|A;?q?#sDKpy?7SDGJ{Ä   À ?#wj 1Á À 
>@MJ#MJjKL/MFRyMFGGFIYCDMJs`MFStCDpTS/v?7S.KL/MsDjMJHpy?7NDGG!MFRTMF{K!MFCl{?7S/¢Dv7NDjBYKpy?7S2IA;M?#DKB#pTS.CDpyá`MJjMFSuK?7N/K{?7MFG
KLDBYK*BYjMlS/?Ry?7S/v#MJj*MFuNDpTB#RyMFSuKlgQG!MJMlæpyv7NDjMlØ7of
±P)A;MLtB#C¤{LD?7G!MFS¤{JB#G!M¦k§gKLNDG?#tKB#pTSDpTS/vMFpyKLDMJjq{JB#G!M¦kYTk	?#jq{JB#GM§kYÕ7ofI(AMA?7NDRTCrLDB+#M
MFRTpT}pTSDBYK!MFCKL/M}s`?7GGpytpTRpyKE	?#P(M HstRy?#jfpTS/vKL/M}** À  çÁ kIB#SDC¡KL/MJjMJP?#jM}KL/MqM sRy?#jpTS/v
sDj?H{MFGGlA;?7NDRC¡LDB+#MqMJMFSxK!jfpT4MFC2WGlKLDM}K!jN/Mz4?HC/MFRpTGlsDjMF{JpTGMFRyEOKLtpTGl*ìgQ{JB#GMÕTkzpTS
æpyv7N/jM}Ø7ofIiKL/MFSKLDM}G!MFBYj{fLxsDj?H{MFGGlA;?7NDRCLDBF#MqK!?pTSD{JRTNtC/M4B#S/?#KL/MJjlBYj{q{?7SDS/MF{KpTSD1
v kB#StC À
*Fð ù=Úôó(øYnò "õ .1,õòûüó û[÷=#ø%ò ô9ôõJ;ù ÷úðò +¨üú@õ Mcvò ô ÷=ô Ãòó #ò ô J÷*ò 9÷=ø%ô)ö îù=ô ÷=ô ,fù"õ øò %÷õ %¡ô Ã ù=òf-ó +¨M

/

û

À

 $,.$ !

f¿ À#%$&(' »*)

"Ô©Ô$Ôð!$é $



gQ{JB#G!MFGkYTkYTkYI;kYÕTk?#jkYÕÕ7ofI'MF{JB#NDG!uM kB#SDC À BYjM{?7SDCDpyKpy?7StB#RTRyEC/MJsMFSDC/MFSuK@v7pT#MFS'.K)KLDpTG
4?74MFSuKJI(B#S[ErRT?{JB#RGMFBYj{L¤sDj?H{MFGGA?7NDRTCrGK!?#s gQpTS¥B§Ry?{JB#R?#sDKpT"NDqofI`MF{JB#NtG!M	MJ#MJjErRy?H{JB#R
{LtB#S/v#MzgQBYj{.jMJ#MJjGB#R2?#j@BYj{jMF4?%B#RoA;?7NtRTCBYw#MlKLDM.G{?#jM.A?#jG!M#
Case 1

z

x

y

Case 2

z

x

y

1.1

z

x

y

2.1

z

x

y

z

x

y

z

x

y

2.2

z

x

y

1.2.1

z

x

y

1.2.2

z

x

y

1.1.1
1.2

æ pyv7N/jMlØÄ;Ö?H{JB#RG!MFBYj{fLpTSKLDM.G!stB#{M.?#P9*)GWpTGK!jBYsts`MFCBYK@BRy?H{JB#R2?#sDKpT"ND
Ã?7StG!MFuNDMFS[KRyE#I?7N/jstN/js?7G!M@{?7SDGpTG!KGpTSqB#CDCDpTS/vl?#jjMF4?+HpTS/vMFC/v#MFGgMFpyKL/MJjRTpTS/wHG?#jBYj{JGfoK!?
KL/MWG!K!jND{KN/jM*A*pyKLD?7N/K9sDjNDStpTS/vKL/MWG!MFBYj{LzG!stB#{M)NDSDSDMF{MFGGBYjpTRTE#'ÜM){?7NDRTC}KL/MJjMJP?#jM@pTSuK!j?HCDND{M
RTpTSDwGpSDG!K!MFB#Cq?#P BYj{JGgA*L/MFSqKL/MJjM)pTGS/?#K;MFSD?7N/v7LqpS/P?#jfBYKpy?7SK!?CDpTGKpTS/v7NDpTGL`MJK|A;MJMFSCDpyá`MJjMFSuK
stBYK!K!MJjStG ?#PtBYjf{JGfofI#A*LDpT{fL.A?7NDRTCG!MJj#MB#G'K!MFstRTBYK!MFG'?#jCDESDB#}pT{RTpTSDw#MJjGK!?WMFuNtpyB#RTMFSD{MstBYK!K!MJjfSDGJ
L/MJE"jMJsDjMFG!MFS[K;B#S[EYB#RTpTC4{?7tpTSDBYKpy?7S?#PBYjf{JGA*LDp{L4jMFGNDRyKG9pTS4B*_MFRy?7SDv7pTS/v)K!?lKL/M@GB#4M
MFNDpyYB#RyMFSD{M.{JRTB#GGF
Ö ?u?#wHpTS/vBYv7B#pTSOBYK*KL/MlsDjMJHpy?7NDG(M /B#4stRyM#ItA;M.A?7NDRTC	sDj?H{MJMFC	B#GP?7RTRy?%A*GJÄB#GGNDpTS/v4KLtBYK*pTS
?7N/jG!MFBYjf{LG!sB#{M(KL/M(?#sMJjBYK!?#jG9?#PRTpTS/w.B#CtCDpyKpy?7SB#SDC4{jMFBYKpT?7S4?#P`L/ÊLstBYK!K!MJjSDG9BYjMB+B#pRTBYtRyM#I#AM
A?7NDRTC¢DjfG!K*pTSD{JRNDC/M)KL/MRpTS/cw °ëk`«G!MF{?7SDCtRyE#ItA*LDMFS{?7SDGpC/MJjpTS/vKL/M"pTSD{JRTNtGpy?7Sz?#PB}{?7SDSDMF{Kpy?7S
MJKAMJMF%S qB#StC À I7AM(A;?7NDRC4LDBF#MK|A;?l?#sDKpy?7SDGJI7GL/?+A*S4pS"æpyv7NDjMå/ÄiKLDML/ÊLstBYK!K!MJjS À  BÁék
B#SDCKL/M.stBYK!K!MJjS À ë°ëk±SKLDpTG@{JB#G!MlKL/MG{?#jpTS/v}PNDSt{Kpy?7SA?7NDRTCB#GGpTv7S	KL/M.v#jMFBYK!MFG!KWG{?#jM
K!?KL/MLHÊLstBYK!K!MJjS À  ôÁékI/KLNDG(?#tKB#pTSDpTS/vKL/M{?#jjMF{K**
[< ÝÚT>t8 Ö Ý43HÝ!<< Ý65SÜ]Û½Ú7<Ü=<<73 4 <Û`>ÝÚT>t8 6 ÛÜ98:,Ù
L/MG{fL/MF4Mz?#P*jMJsDjMFG!MFS[KBYKpT?7S§KLtBYK"AMzA*pTRTR;NDG!MqpG"GRTpyv7LuKRyECDpÌáMJjMFS[K"Pj?7 KLDMzP?#jB#RpTG ?#P
{?74stRTMJK!MFC§h;*)GJO±|KpTGlSD?#KS/MF{MFGGBYjEP?#j"MFB#{LÁ{?7S/¢tv7N/jBYKpy?7S§?#P(?7N/jG!MFBYj{L¦G!stB#{MgA*LDp{L
AM	{JB#RTR)d!Z\aQd]Q+aZ
 â{ºw»%¼?#<j ;Zâ{ºw»%¼oK!?§{?#jjMFG!s?7SDC¦K!?xBCDpÌáMJjMFSuKMFuNDpTB#RyMFSt{M{JRB#GGJ«KA?
CDpÌáMJjMFSuKä@h*GBFEq{?#jjMFG!s?7SDCzK!?KL/M)GB#4M)MFuNtpyB#RTMFSD{MW{JRB#GGJ9L/M)B#pTSqjMFB#G!?7SP?#jKLDpTG
pTG"MJ~}{JpyMFSt{EÄE§B#RTRy?%A*pTS/vB#SÁMFNDpyYB#RyMFSD{M{JRTB#GGK!?MjMJsDjMFGMFS[K!MFCg?7SDRTE§pTSÁG!?74M{JB#G!MFGo"uE
CDpÌáMJjMFSuKä@h*GJIDAMA*pTRTRtv7B#pTSpTSqMJ~}{JpyMFSD{EqK!?4M stRT?#jM@KLDM)GstB#{M#MJP?#jMM stRB#pTSDpTS/vlKLDpTGpTS
v#jMFBYK!MJj)C/MJKB#pTRI/RyMJK@NDG(C/MJ¢tS/MKLDMl{?7SD{MJsDK?#Pä*h;*"Ä
=cY^D¢? X}>@l] È.A]Qa9§B\JÐV#aQ¬]
\ 	­¡Z«Ð\"¢©aH«ÐZ;&Èc#¢©yÞcYb9¯ ]^u= 	<c#CÂ^Y· ]QaQ»§]QcY^DâF\ º	 »%¼Vä ]\	V¡d!Z\aQd]Q+aZE â{ºw»%¼D
;Zâº	»%¼E] È	VY^`
HG k } S2 mGoå lg kDJo HKI $ML pyê å lg k/do HK$!¾
 äË7c%Z\l^c7afcY^ta=VY]^¡VY^DXY]d!ZFaZFX7JTZ ¾

0121

>ÙÚ½Û

N

û

» ¼X	½tt¾¿uÀ

 à7c+Z\)^c#afcY^ta=VY]^£V#^DXc @TZJaZJX4ÉH^Y]dZFaZ}FX#FyZFi] QZ WVJX7JTZfcY^ta=VY]^D]^uqc#^DX ]^De+\
OÈ §ZP#]\a\.]^ ÂaHZJ^¡Z]QaHZd g Do RQ¤ÕOcYd g oJSI $
u]\"fcY^Y]QaQ]cY^\a=V7aZ\"aHV#a(VY^¡VYd!
¦Z#P ]\a\l]^ cY^D Xq] È.]Qa]\"ZJ]aHZJd(HV#dacÈVY^[Æ|
/V#aaZd^§cYdla/ZdZ"]\lVY^`c#aHZd4VYd!<| cYd]y#]^V#aZOÇXqVY^£[Æ|"HV#aaZJdf^&4 [cY]^uza=c
ä

/

	

¹



k

ôä

¾ ¾

u~ mxoå lk M~




k

mGo?å l

H

i¾

!¾

Âä

u.¾

WG4B#S¥ä*h;* pTGBh**"IpyK4{?7NDRTC¦Mz{?7StGpTC/MJjMFC¦K!?MBOjMJsDjMFG!MFSuKBYKpy?7SÁ?#P@BG!MJK4?#P
g MFNDpyYB#RyMFS[Kfo*)GJÜM}KLDMJjMJP?#jM}NtG!KlC/MJ¢tSDM4A*LDpT{fLKL/M}G!MJK?#P**)GpGjMJsDjMFGMFS[K!MFC¡uEB
v7py#MFSä@h*zä"IDpîM#L/?%ACDpyjMF{Kpy?7SB+E}M)v7py#MFSK!?4KL/MRTpTSDwGpTSôä pTSz?#jC/MJj(K!?M HK!MFSDC	pyKK!?
B*L/MP?7RTRy?%A*pTS/v4C/MJ¢SDpyKpy?7SzP?#jB#RTpy²JMFGKLDpTG(pTC/MFBH
=[Z P[¢?aZ>@^/l\A]Qc#^§BTc!*È ç­äãVUX] ÈlWVYµ^`¢RNcY^D§ X} ] FÈ§B Y)¯ = C· ¼l] ¥YZ^¡V â{º	»5¼ÞäZ(b;Z\VYXaV#a@cV º	»%¼U ]\"V#^
 äËVY^`Ü U V ¥YZ"a/Zl\V /}Z\fe#ZTZJa=c#^ ¾
 O	È   k]\VY^xVYd!]ô^ äÂaHZB^   k]\VY\JcVY^¡VYd!"]1^ U\=^`czV#d]\d!ZY]d!ZFaZF ¾
 äc#d[VYZJ^d"Ã a=c.U d!cFV Y¥#ÉDZzZ aHUëZ\7V c+/}Z\lZ^[c#Æ|a}u/ZJV#^`aZaZd!dV#^/aZ\ ^`_]ZJ¾Qb¤Z ¾uaÆ/"Z)H`V#adacFZJdfZ^D\f]\\z¾cÈ}Y]d!ZFaQ]^uaHZ} ]^/e%\"]^ äâ]^
ÜMA*pRTRtNDGXM ^x | ;g ä.o;K!?C/MFS/?#K!M)KL/MG!MJK?#P'**)GKLDBYK(BYjM)M HK!MFSDGpy?7StG;?#PiB"v7py#MFSh*¿
 ä"
¯G«Ð§¥H§µA§B®¬K_ ZJd
a ä ÇZ"VY`
^ ;Zâº	»%¼¾ ¹ HZJB^ 
V 6^xb;ZJ |  Æ!;g [ä.dZ ao	HS^I Z$bT¾läãVY^ÇZ"[Z P7aZJ^[Z}a=cqc[ÇJa=VY]^½V º	»5¼'] ¾Z ¾@a/ZZ P7aZ^D\f]cY^£cÈ.VYc^ ;Zâ{ºw»%¼°]\
eÇ  G ÇJXU Z K P7U aZ£ ^`} Y]^G^z | ];gaä.VYod!Z}U nZ ¤JÉH¦8l] ¥UVYTZ£ ^=ga ] ¾¾Z ¾qVYaHZ}#] fWZJd!ZJ^ta ºw»%¼;\aV#aWVY^¥ÇZ}c[ÇJa=VY]^`Z.ÈdTc / ä

hYi

¯G«Ð§L§

Qg B[o"WG ä LDB#G4S/?CDpTjMF{K!MFC¥{E{JRTM¡gQ{?7SDCDpyKpy?7S¥ÕpTSÁWMJ¢tSDpTKpy?7S­k+ofIKL/MFSÁMFpyKLDMJj ä pTG4B#RyjMFB#CDE§B
*Â?#jpyKLtB#GlG!?74MRTpTSDwGJÖ MJKNDG"{?7SDGpTCDMJjB#S¡BYjtpyK!jBYjERTpS/w°ëk`Â0@GpTS/v{?7SDCtpyKpy?7S¤kqpTS
WMJ¢tSDpyKpT?7SkYIDS/MFpyKL/MJj£S/?#jZk{JB#S	LDBF#MBstBYjMFSuKJÜMl{JB#S	KLDMFS	CDpyjMF{KKL/M.RpTS/w5°ëkzpSqMFpTKL/MJj
CDpyjMF{Kpy?7SA*pTKL/?7N/K{jMFBYKpS/v"B#SLHÊL}stBYK!K!MJjS29±P2AMWCDpTjMF{KKL/MWRTpTS/Üw °ë k}B#{G   kB#SDcC k}pTGstBYjK
?#P9B#S/?#KL/MJj*RpTS/cw k`ë À IDKLDMFSA;MCDpyjMF{KpyKB#	G k  À gQpTS?#jCDMJjK!?}BF#?7pCBS/MJAÅLHÊLstBYK!K!MJjSof;ÜM
{JB#SÁ{?7S[KpSuN/MCDpyjMF{KpTS/v	KL/MRTpTSDwG.pS¡B£{LDB#pTS¦pTS¡KLDpTGAB+E#IB#SDC§KLDpTG.stj?{MFGG{JB#SDSD?#Kv#MFS/MJjfBYK!M
BxCDpTjMF{K!MFCr{EH{JRyM	MF{JB#NDG!M#IB#{J{?#jCDpTSDvK!?§{?7SDCDpTKpy?7SrÔpTS¥WMJ¢tSDpTKpy?7S_kY	I äâLDB#GSD?x{?74stRyMJK!MFRyE
NDSDCtpyjMF{K!MFC{EH{JRyM#
g`o}L/M£M K!MFStGpy?7S°sDj?H{MFGGq?#ÜP ä C/?MFGzSD?#K?CDpTPEÁKL/MG!w#MFRyMJK!?7S_B#SDC­C/?MFGzS/?#K{jMFBYK!MS/MJA
LHÊLsBYK!K!MJjSDGJL/MJjMJP?#jM#IB#RTRKL/MqM K!MFSDGpy?7SDG?#	P äãLDBF#MqKL/M}GB#4MzG!w#MFRyMJK!?7S¦B#SDCKL/MqGB#4M}uÊ
G!K!jNt{KN/jMFGgQBuÊG!K!jNt{KN/jM	pTG4BsBYjKpT{JNDRTBYj4{JB#G!M?#P)L/ÊLÁstBYK!K!MJjSofI(L/MFSD{MKLDMJEÁBYjMMFuNDpTB#RyMFSuKJ
±KGL/?7NDRCqMS/?#K!MFCKLtBYK*{?7SDCDpyKpT?7SqåpS@MJ¢SDpyKpy?7Sk.pTGS/?#K@S/MF{MFGGBYjEzK!?4sDj?%#M.KL/MjMFGNDRyKG
Tp Srhj?#s?7GpyKpy?7S,kYLDpTG{?7StCDpyKpy?7SrpGpTSD{JRTNtC/MFCÁK!?§MFStGN/jMKLDBYKzKL/MOKEs`M?#P.h* NDG!MFC¤K!?
jMJsDjMFG!MFS[KGN/tG!MJKG(?#PMFNDpyYB#RyMFSuK*)GWpTG(B#Gv#MFS/MJjfB#RB#Gs?7GGpTtRyM#i±S?#KLDMJjA;?#jfCDGJIt{?7SDCtpyKpy?7Så
ûM

À

f¿ À#%$&(' »*)

 $,.$ !

"Ô©Ô$Ôð!$é $



v7NDBYjB#SuK!MJMFGKLDBYKB#Sä*h** pTGBjMJsDjMFGMFS[KBYKpy?7Sz?#PKLDM@v#jMFBYK!MFGKSNDMJj?#PMFNDpyYB#RyMFSuK;*)GFI
GN//³MF{KK!?qKL/MljMFG!K!jpT{Kpy?7StGpT4s?7G!MFCE{?7SDCDpyKpy?7StG.kÊ|Ô}pS	WMJ¢tSDpyKpy?7SkY(WG*AM.A*pRTR2G!MJMpSKL/M
S/M HKsDj?#s`?7GpyKpy?7S2I7KLtpTGpTGB#{LtpyMJ#MFCzuECDpTjMF{KpTS/v.KLDM@pTStpTNtÛSuNDMJj?#PMFCDv#MFGJæ/?#jM HB#stRyM#I
À ë 
k ³ý A;?7NDRCS/?#K*M.BYB#RTpTCä@h*`LDMlä*h;*ÛKLtBYK*AMlA?7NDRTCNDG!MpTSKLDpTG*{JB#G!M
À
pTG ë¨!ë k`ë ý 
¯G«Ð§¥H§µA§BKj_ ZJZ
a äéÇfZô
V â{º	»5¼ ¥YZJdf] ÈX]^uaHZ	cY^#]aQ]cY^/\  Æ  ]^ ºdZ 	^D]QaQ]cY^  ¾ ¹ HZdZz]\
aHZJ^V}\]^u7yaZ ;	â{º	»5¼lk \É/J	aV#@a ^G | ;g ä.no ml^G | dg klio ¾

h

Y
i
L/M"sDj??#PpTG){?7SDGK!jND{Kpy#M#ÜMGLDB#RTR'tNDpTRC	KL/M4ä*h;*ok¨B#G)P?7RTRy?+A@GJÄ*KL/M4G!w#MFRTMJK!?7SB#SDCKL/M
LHÊLstBYK!K!MJjSDG*?#P(¬
k
BYjMlKLDMlGB#4M"B#G*KL/?7GMpTS WSBYjf{
pTS ¬GLtB#RTRS/?%A,Ml{?7SDGpC/MJjMFC
GND{fL}KLtBYK
g o Kl$ B#StC
g /o
gQpyPGND{fLqB#SBYj{WC/?MFG;SD?#K;M /pTG!KJIKL/MFS ÅpyKG!MFRyPA?7NDRTC
MB#Sä*h;*.ofÄA;M@{?7S[#MJjK;KL/M*BYj{
4pTSuK!?KL/M*RTpS/w 9LDpGsDj?H{MFGGpTGKL/MFS}jMJsMFBYK!MFC2
pT?7NDGRyE#I`KL/M4h*pÙ
k
?#tKB#pTS/MFCpTSOKLDpTGWABFELDB#GS/?CDpyjMF{K!MFC{EH{JRyM4B#SDC£#MJjpy¢DMFG){?7SDCtpyKpy?7S
åpTSWMJ¢tStpyKpy?7S¦kYl×	?#jMJ?%#MJjFIAM"{JB#StS/?#K)?#DKB#pTSBq{?7SD¢Dv7N/jBYKpy?7S
kstBYjMFMFSu{JKfB#ofND9G!±M SqB#CDCtpyg K2py?7o S2qIÅk $ {JgB#A;SDM4S/?#?7KStRyLDE	BF#jMFM4B#?%Su#EM{K?7L/4MstCDRyMJpTjK!MFMF{RTEKpy?7NDS£SDCD?#pyP;jMFBY{jK!{JMFG)C}A@{EHL/{J?7RyG!M@MpTMFSD{JpTKB#pTNDB#B#GRGM*S/BzMF?HpyGC/KN/L/MFDMJGjv#LDjfKB+BYL/#stM)MLBYS/j?#?{ P
¨
	pGS/?#K*sBYjK*?#PB#SuE	{E{JRTMpTS ¬?#j@pTK@pTG(sBYjK*?#P9B}{EH{JRyM"pTS ¬KLDBYK@"NDG!K@{?7S[KB#pTS£BYK)RyMFB#G!K
?7S/MLHÊLstBYK!K!MJjfSxgQB#SDCKL/MCDpyjMF{KpT?7SDG?#P KL/MBYj{JG(pTSzKLDpG;sBYK!K!MJjSA*pTRTR`S/MJ#MJj(M)jMF4?%#MFCofrk pTG
KL/MJjMJP?#jMlB#Sä*h**"
Ö MJK*NDG(S/?%AsDj?%#M.KLDBYKn^ g losmt^ gdlk ofÄpyP
^ g .oKL/MFS B#SDC LtBF#M.KL/MGB#4M
G!w#MFRyMJK!?7S¡B#SDCxLHÊLstBYK!K!MJjfSDGJI L/MFSt{M ÞB#SDCuÐ
k
B#RTG?	LDBF#MKLDMGB#4MG!w#MFRyMJK!?7S¡B#SDCxLHÊLstBYK!K!MJjfSDGJ
×?#jMJ?+#MJjFI'B#GWB#RRKL/MBYj{JG)pTSHkÙBYjMB#RTG!?BYj{JG)pTS "I2pyP
kÙKL/MFS ^ g lof I`A@LDpT{LOpTS
KN/jSp4stRTpyMFGKLDBYK
§L/MJjMJP?#jM#IDB#{J{?#jCtpTS/v4K!?qWMJ¢tStpyKpy?7S	ÕI
æpTSDB#RRyE#IRyMJKWNDGstj?+#M"KL/MNDSDpTN/MFS/MFGG?#P(k ÄAMB#RyjMFB#C/EwHS/?+A KLDBYK)B#S[E?#KL/MJjWä@h*-k
#MJjpyPEHpTS/v4KLDBYKX^ g .ovmw^ gdk o(LDB#GKL/M"GB#4MlGw#MFRyMJK!?7SOB#StCLHÊLsBYK!K!MJjSDGWB#Gvk@{J{?#jCtpTS/v
¯G«Ð§L§

mxoå l {H

ä

mGo?å lk {H

Z

G



k

yä

J DP



ôä

k

G!ëÞk

ñ

À



!ë

mGo?å l wH





k

ä

G | ;ä

k

yä

x |

U

}

x | ;ä

ôU

ä

5U

Eä

	



k

}

U

R



k

}





,U

}

k } ä
G | ;ä

£

G | ;ä

x |

£

K!?q{?7StCDpyKpy?7Sk.pS	WMJ¢tSDpyKpy?7SkYIKL/M.MFC/v#MFG*KLDBYK*BYjM"S/?#KstBYjK(?#PB#SuE?#PKL/MFG!MlL/ÊLstBYK!K!MJjSDG*tN/K
BYjM}pSD{JpTC/MFSuKK!?KL/MqpTCDCDRTMSD?C/%M kpTSB#SuExLHÊLsBYK!K!MJj
S   kEÁ À NDGK.M}CDpyjMF{K!MFC¡BFABFE
Pj?7 kgQpS?#jC/MJj(K!?}B+#?7pTC	S/MJALHÊL	stBYK!K!MJjSDGfof*L/MjMFB#pTStpTS/v"MFC/v#MFG(KLDBYK*BYjM.S/?#K(stBYjK(?#PB#S[E
LHÊL¡stBYK!K!MJjS¦NDGKlM}NDSDCtpyjMF{K!MFC2IpTS?#jCDMJjK!?£GBYKpTG!PEx{?7SDCDpyKpT?7Så£pSxWMJ¢tSDpyKpy?7S®kY	L/MJjMzpTG
KL/MJjMJP?#jM?7SDRyE?7S/M4ä*h**¨KLDBYKBYK{LDMFG.Bzv7py#MFSG!w#MFRyMJK!?7SB#SDCBG!MJK)?#P;L/ÊLOsBYK!K!MJjSDGJI2G!c
? k
pTGKLDM?7SDRyEä*h;* #MJjfpyPEHpTS/vKLDBY#K ^G | ;g ä.#o mx^x | dg klofzæpyv7NDjM}ªGL/?%A*GlB#SxM HB#4sRyM?#PKL/M
{?7SDG!K!jfND{Kpy?7SsDj?{MFGGF
LDMP?7RTRT?+A*pTSDv£stj?#s?7GpyKpy?7S¦MFSDGNDjMFG4KLDBYKKLDM	{?7SD{MJsDK}?#P)ä*h;* B#RTRy?+A@GNDG4K!?¡CDMJ¢tS/M	B
stBYjKpTKpy?7SpTSKL/MlGstB#{M.?#P*)GJ
¯G«Ð§¥H§µA§BTyz_ ZJd
a äËVY^% ä £ ÇZaQbcY] fWZdZ^t{a ;Zâº	»%¼;M\ ¾ ¹ /Zc
^ ^G | ;g ä.)o |<^G | ;g ä £ ]o HS$!¾

hYi

Ö MJK Ë`MB#SuE*"HL/MFScUËpTKG!MFRyPpTGBlh;*ÅB#SDC4?#pT?7NDGRyEÜU§HK^G | g_Uof;EBYststRyEHpTS/v)KL/M
jMFGNtRyKpTShj?#s`?7GpyKpy?7SÕIYA;M{JB#SB#GG!MJjK KLDBYKKL/MJjM;pTG2BGpTSDv7RyMä*h;*ärGND{fLKLDBYKOU}mt^G | g;älof
¯G«Ð§L§
(U

±SKL/Mstj?#s?7GpyKpy?7S£MFRy?+AlI AM}GL/?%A¬KL/MsDj?#s`MJjKpyMFG)A*LDpT{fLxBYjM}{?7}4?7SK!?OB#RRKL/M}*)G
MFRy?7S/v7pTSDv"K!?}KL/M.GB#4M.M HK!MFSDGpT?7S?#P9B#S	ä*h;*"
ûû

» ¼X	½tt¾¿uÀ

b
a

b
c

a

b
c

a

b
c

a

c

x

y

x

y

x

y

x

y

e

d

e

d

e

d

e

d

(a)

(b)

(c)

(d)

æpyv7N/jMlªÄ*±RTRNDG!K!jBYKpTSDv*KL/M{?7SDGK!jND{Kpy?7S4stj?{MFGG9pTS4hj?#s?7GpTKpy?7S"ÕÄgQB[oih;*Ðä«`g`oiNDStCDpyjMF{KÊ
pTS/v4KL/M"BYj{ o  k`«'gQ{+oNDSDCDpyjMF{KpTS/vKL/MlBYjx{ k   «gQCoNDStCDpyjMF{KpTSDv"KLDMlBYjG{   ê7I
KLuNDG?#DKB#pTSDpTSDv"KLDMlä*h;*~
 k

A B ¹ bxc º	»%¼;\ÇZycY^u}a=c4aHZ"[Z P[aZ^/\]QcY^£cÈWa/ZW\VT/Z;Zâ{ºw»%¼®] È)VY^qcY^D X"] È@a/ZX
V¥#Z"aHZl\VT/Zl\fe#ZJyZFa=cY^¡VY^zaHZl\JV/}Zl[Æ"HV7aaZd^/\i¾

¯G«Ð§¥H§µ §

h

Y
i
L/MS/MF{MFGGBYjE¡{?7SDCDpTKpy?7S§pGl?#pT?7NDGJÖMJK4NDGsDj?+#MKL/MGN/~q{JpyMFS[K{?7SDCDpTKpy?7S2Ä4RyMJK
¯G«Ð§L§

ÜU
B#SDí
C UÂ£
MK|A;?	**)G.A*pTKLO{?7?7SG!w#MFRyMJK!?7SxB#SDCLHÊL£stBYK!K!MJjfSDGJ.ÜMGLtB#RTR'{?7StG!K!jND{KBh* ä¨B#G
P?7RTRy?+A@GJÄKLDMzG!w#MFRTMJK!?7S§B#SDC§KL/MzLHÊLxstBYK!K!MJjfSDG"?#wP äàBYjMzKL/MzGB#4MB#GlKL/?7GMzpTS UÝB#SDC U £ «KL/M
MFC/v#MFGWKLDBYK)LDBF#M"KL/MGB#4M"?#jpyMFSuKBYKpy?7S£pTÂ
S UéB#SDy
C U£ BYjMCtpyjMF{K!MFC£pTy
S äÒpTSKL/MGB#MABFE`«2KL/M
?#KL/MJj@MFC/v#MFG*pTÂ
S ä jMFB#pTS	NtSDCDpyjMF{K!MFCæDj?7ãWMJ¢tSDpTKpy?7S	ÕItpyKpTG({JRTMFBYjKLDBY	K U K U £ } ^x | ;g ä.of
ä LDB#GS/?4CDpTjMF{K!MFCq{EH{JRyMFGMF{JB#NDG!ã
M U B#StÃC U£tBYjM*GJØ ä LDB#GS/?{?74stRTMJK!MFRyEqNDStCDpyjMF{K!MFC
{EH{JRyMFGJI.GpTSt{MB#RRKL/Mx{EH{JRyMFGpTÇ
S U B#SDC U £ GLDBYjMxBYKRTMFB#G!K	KL/M¡L/ÊL­stBYK!K!MJjSDGJã±S_B#CDCtpyKpy?7S2I
 
kë À {JB#SDS/?#KMB*GN/Dv#jBYsL)?#°
P ä¥MF{JB#NDG!MKLDpG2A;?7NtRTCpT4stRTE*KL/MM /pTG!K!MFSt{M?#PHKL/MGN/tv#jBYstLDG
À B#SDC  
À pc
 
k%Á
k 
S U B#SDÃC U £ IjMFG!sMF{Kpy#MFRyE#I/B#SDCqKL/MJjMJP?#jMWKL/MFG!MWKA?4*)GA?7NDRTC
S/?#K*LtBF#M.KL/MGB#4MlLHÊLsBYK!K!MJjSDGJ
LDMJjMJP?#jM#IKL/Mh* äËGBYKpTG!¢tMFG"{?7StCDpyKpy?7SDGzkÊ|ÔpTSÁWMJ¢tSDpyKpT?7S®kY¦;E¦BYsDstRyEHpTS/vOhj?#s?YÊ
GpyKpT?7S ÕI4AMr{JB#SÛKL/MFS NDpTRTCÅB_GpTS/v7RyMÁä*h;*
 k GNt{LÛKLDBYu
K ^x | ;g ä.
o m^x | dg klofIL/MFSD{M
K
}
|
U
UÂ£
^x dg klof
 {LtBYjB#{K!MJjpy²FBYKpy?7S?#PKL/MM K!MFStGpy?7S?#P9B#S	ä@h*¬KLDBYKA*pRTR``M.NtG!MJPNtR`RBYK!MJj@pTGJÄ
¯G«Ð§¥H§µA§BK ¼] ¥#Z^¦V#6
^ ;Zâº	»%¼Çä V#^OÃV º	»%¼¨UMaHZy
^ U ]\VY^ÁZ P7aZJ^/\f]cY^¦c!GÈ ä ] ÈVY^`
cY^D X}] ÈlaHZ;ÈJcYÌc#b9]^ufcY^Y]QaQ]cY^/\lHcYÌ
 äËVY^`Ü U V ¥YZ"a/Zl\V /}Z\fe#ZTZJa=c#^ ¾
bG k } S2] È mGo?å lg kDXo HKI $a/Z^ mGo X lg kDdo H mGo?å lg k/io ¾
6G k } S2] È mGo?å lg kDdo HK$OV#^ mGo X lg kDJo HKI $OaHZ^ ~ mGo X lg kDMo ~`H k ¾



hYi

¯G«Ð§L§
Ä

ZZ\\JVYdXzc#^Y]QaQ]QcY^tÄ
û

À

f¿ À#%$&(' »*)

 $,.$ !

"Ô©Ô$Ôð!$é $



g /oq
I $ÄWÖ MJKã } mGo?å glkDofI pîM#yI=  k } ä"LDMFS2IPj?7 {?7SDCtpyKpy?7SÕzpTS@MJ¢SDpyKpy?7SÕI
§ItpîM#yI° } mGo X glkDof×?#jMJ?%#MJjFI À } mGo?å glk/o(   kcÁ À pGB#SLHÊL	stBYK!K!MJjSpSÂä"
æ/j?7Ë{?7SDCDpTKpy?7S	ÔpTS@MJ¢SDpyKpy?7S	ÕIKLDpTG(?H{J{JN/jG@pyPiB#StC	?7SDRyEpyP.  kcÁ À pTGB#SOLHÊLstBYK!K!MJjSOpTS
U§IDA*LDpT{fLpTGMFNDpyYB#RyMFS[K(K!? À } mGo X lg kDofLDMJjMJP?#jM#I mGo X lg k/{
o H mGo?å glkDof
mxoå lg kDG
G
m
o
G
m
o
KL/MFÂS   o k5HoÁ $	À B#StpTG*C B#SLHX ÊLlg kDso BYHoI K!K!MJ$jÄ4SÖpTÂS MJ½K U¯ B#} StCKL/X MJlgjkDMJPof?#jMl±|PpyK@KL/pTGMJjB#MqRTG!pT?qG.B#B#SSD?#LHKÊL/LMJj"sBYSDK!?K!C/MJMjSÀ pTSÂ} ämGIto A*X LDglpkD{ofL I
{?7SuK!jB#CDpT{KGKL/M)PQB#{KKLDBYK mGoå lg kDdo HK$ÍH?/I kq{JB#SDS/?#K(LDBF#M.?#jM)KLDB#Sz?7S/M)stBYjMFSuKpS U§I/L/MFSD{M
~ mGo X lg kDM
o ~H kY
É ¤F]ZJ^ta;fcY^Y]QaQ]Qc#^DÄ
Ä F
 ±|P  k } U§k  } äãKL/MFS mxoå lg kDo HI $£æ/j?7 {?7SDCtpyKpy?7S§ÕAMzLDB+#M mxo X lg k/½o H mxoå lg kDofIL/MFSD{M
KL/±|MJOP jMJ P?# jGM k5 Á  À k5pTGÁ B#SÀ LHpTG(ÊLzB#SOstBYLHK!ÊK!LMJjstSBYK!pTôS K!MJä"jSOIHpT?71S SD{U§M. BYv7B#pSqPj?7Ð{?7SDCDpTKpy?7SÕI mxo X lg k/do H mGoå lg kDoB#SDC
{?7±|SDP CDpTKpy?7SxkÔI'Á AMÀ ?#DpTG"KB#B#pSÁS LHmGÊo?Lxå slg BYkDK!o K!MJHI jSÁ$pTSB#SDU§CIIPKjL/?7MFS {~ ?7mGSDo CDX pyKlg pTkD?7MoS¡~nÕH I I mGkqo?B#å StlgC kD*o mGH o X mxlg k/o `o X HIlg k/of$zxÍL/?/MJIjMJPjP?#?7j M
À pTGB#S	L/ÊLstBYK!K!MJjSpÂ
 
k%Á
S ä"





mGo?å lk
H

k } U

y x  &
L¡¬

¢© «Ð ¢©Þ¯

= <C B


?

  NY£q§¤¦¥c¢ µ¢

¯

= C




Ö MJK(NDGS/?%A_M HB#}pTS/MWKL/MB#pTSCDpÌáMJjMFSD{MFGMJKAMJMFSKL/MCDpÌáMJjMFSuK;jMJstjMFG!MFSuKBYKpy?7SDGJÄB"jMJsDjMFG!MFSHÊ
KBYKpy?7SB#G!MFC?7Sh*G.MFSDGNDjMFG)KLDBYKMJ#MJjE£MFuNtpyB#RTMFSD{M4{JRTB#GGLDB#GBNDStpTuNDMjMJstjMFG!MFSuKBYKpy?7S2I
tN/K(KLDMJjM.BYjMlh;*)G@KLDBYK@C/?SD?#K*{?#jjMFG!s?7SDCK!?qB#S[EMFNDpyYB#RyMFSD{M.{JRTB#GGgQpTS?#KL/MJjA?#jCDGFIDKL/M
BYsDspTS/vPj?7 MFNDpyYB#RyMFSD{M{JRTB#GGMFG.K!?h;*)GpTGpTS³!MF{Kpy#M%of ñ SKL/M?#KLDMJj"LDB#StC2I?7N/j.jMJsDjMÊ
G!MFSuKBYKpy?7StB#GMFC?7S	ä*h;*)Gv7NtBYjB#S[K!MJMFG*KLDBYK(MJ#MJjEä*h;*¬{?#jjMFG!s?7SDCDGK!?B#SMFNDpyYB#RyMFSD{M
{JRTB#GGgsDj?#s`?7GpyKpy?7Sk+otN/KC/?MFGSD?#K;MFSDGN/jM*KLtBYK;MJ#MJjEqMFuNtpyB#RTMFSD{M@{JRTB#GGLtB#GB"GpTSDv7RyMjMJsDjMFG!MFSHÊ
KBYKpy?7SÁgKL/M}BYsDstpTS/vPj?7àMFNDpyYB#RyMFSD{M{JRTB#GG!MFG*K!?zä@h*)GWpTG*?7S[K!?uofÏ@?+AMJ#MJjFIKL/M}BYsDstpTS/v
Pj?7 MFuNtpyB#RTMFSD{M4{JRTB#GG!MFGK!?Ãh*GlpTGWtp ³!MF{Kpy#M#4æpyv7N/jMFGlÑuüBHI9Ñuî¡B#SDC¡Ñuü{GL/?+A¬KLDM4KL/jMJM
ä*h;*)G{?#jjMFG!s?7SDCDpTS/v4K!?zKL/MGB#4MMFuNDpTB#RyMFSt{M{JRTB#GGF«KL/MB#GG!?H{JpTBYK!MFC{?74stRTMJK!MFCOh;*¨pTG
GL/?%A*S	pTSæpyv7NDjMÑuüC2±SKLDpTGM /B#4stRyM#ItKL/M.SuNtlMJj(?#P9*)GWpTSKL/M.MFNDpyYB#RyMFSD{M{JRTB#GG*pTGkFÕ

(a)

(b)

(c)

(d)

æpyv7N/jMÑuÄ"gQB[ofI g`oB#StCgQ{+o;LDjMJMWä@h*G({?#jjMFG!s?7SDCDpS/v.K!?KL/MGB#4MWMFuNtpyB#RTMFSD{MW{JRB#GGJ«gQCo
KL/MlB#GG!?H{JpTBYK!MFC	{?7stRyMJK!MFCh;*
WG AM;{JB#S"G!MJM#IYKL/MCDpÌáMJjMFSD{MBYsDsMFBYjG A*L/MFSlKL/MJjM;BYjMK!jpTB#SDv7NDRTBYj G!K!jfND{KN/jMFGJ'±|PHAM;{?74sBYjM
KL/M*CDMJ¢tSDpyKpy?7S?#P2ä@h*¨gQWMJ¢tSDpyKpT?7S	k+oA*pTKL4KL/M*{fLDBYjB#{K!MJjpy²FBYKpT?7S}?#P Ãh;*)GgQL/MJ?#jMF¨Õ7ofI
û2

» ¼X	½tt¾¿uÀ
AM"B+E	?#tG!MJj#MlKLDBYKWKL/M"MFGG!MFSuKpTB#R'CtpÌá`MJjMFSD{MlpTG@KLDBYK@BÃh;*¨BFEOLDBF#M{?74stRyMJK!MFRTE	NDSDCDpÌÊ
jMF{K!MFC{EH{JRyMFGJI[tN/KKL/MFG!M{EH{JRyMFG"NDG!KM.cYd!7VY ±Sä*h;*)GJIHNDSDCDpTjMF{K!MFC{E{JRyMFGBYjMKL/MJjMJP?#jM
P?#jtpTCDCDMFS2IuA@L/MJjMFB#GpTSÃ(h*)GWNDSDCtpyjMF{K!MFCS/?7SHÊ{fL/?#jCDB#R2{EH{JRyMFG@BYjM.P?#jtpTCDCDMFS2
±K@GLD?7NDRTCMlS/?#K!MFCKLDBYK*AM{?7NDRC	B#RTG!?zC/MJ¢tS/M.ä@h*)GWEjMJstRTB#{JpTSDv{?7SDCDpyKpy?7SOÔpTS	WMJPÊ
pTSDpTKpy?7Sxk.P?#jpyKGMFNDpyYB#RyMFSuKJÄ ¹ HZ"\ÉDÇ#d!Vft£]^#É/ZÇJXiZ ¥YZJdfXHVY]^¦c /@HcY^Z^taWcÈ äË]\"VaQdZZ
gA*LDp{LrpTG4B¡G!sMF{Jpy¢t{zKEsM	?#PW{fL/?#jCDB#R*v#jBYstLof¥±S¥KLDpGAB+E#I(KL/MGpT}pTRTBYjpyKpTMFGB#SDC¤CDpÌáMJjMFSD{MFG
MJKAMJMFS£Ãh;*)GWB#SDC	ä@h*)GWBYjM.MJ#MFSO{JRyMFBYjMJjF;@SuEq?#PKL/Mä*h**)G@pSKL/MlGB#4MlMFuNDpT[Ê
B#RyMFSD{MO{JRTB#GG}pG4?#DKB#pTS/MFC¤Pj?7éKL/M{?#jjMFG!s?7SDCDpTS/v¡Ãh;* uEÁjMF?+HpTS/vxG!?74MO?#P)KL/MRTpTSDwG
gQ{?7Su#MJjKpTS/vqKL/MFàpTSuK!?BYj{JGfopS?#jC/MJjK!??#tKB#pTS	B4K!jMJMG!K!jND{KN/jM#
ß HB#pSDpTS/vzKL/MsDj?#tRyMFËPj?7 B#S/?#KL/MJjs`MJjfG!sMF{Kpy#M#I2Pj?7 L/MJ?#jMFÞkB#SDChj?#s`?7GpyKpy?7Så
AMl{JB#SG!MJMKLDBYKKL/Mlj?7RyMstRTB+E#MFC	EKL/M.uÊG!K!jND{KN/jMFGpTSOÃh;*)GWpTGKL/MlGB#4MB#G*KLDBYKstRTB+E#MFC
EqKL/MLHÊLstBYK!K!MJjSDG@pTSä*h;*)GJ
±KWpG*B#RTG!?zpTSuK!MJjMFG!KpTS/vqK!?zSD?#K!MKLDBYKWKL/M"SuNDMJj@?#P**)G)A*LDpT{fLBYjM"M HK!MFSDGpy?7SDG@?#PBqv7py#MFS
ä*h;*"ÖI äID{JB#S`M{JB#RT{JNtRTBYK!MFC#MJjEzMFB#GpTRyE`ÄKL/MGN/Dv#jBYsLzpSDCDND{MFCquEqMFB#{L	{fLDB#pTS{?74s?7S/MFSuK
?#DP ä_pTG9B)K!jMJM#IHB#SDCKLDpGK!jMJM*{JB#S4MCDpyjMF{K!MFC4pTS4CDpÌáMJjMFSuK9AB+EG9EG!MFRyMF{KpTS/v.B#SuE?#PKLDMS/?CDMFGB#G
KL/M@j?u?#KS/?HC/M#×?#jMJ?%#MJjFI/A;MW{JB#S}stj?{MJMFCqpTSDC/MJsMFSDCDMFS[KRyEA*pyKLDpSMFB#{L{LDB#pS}{?74s?7S/MFSuKJ9L/M
SNDlMJj?#P2*GpS ^G | ;g ä.opTG9KLDMJjMJP?#jM*MFNDB#RDK!?KL/MsDj?HCDND{K?#P`KLDM@SNDlMJj?#P2S/?HC/MFG9A@pyKLDpTS
MFB#{L¦{LtB#pTSx{?74s?7S/MFSuK.?#	P ä"äMJv7BYjCDpS/vKL/M}SND`MJj?#P(ä@h*)GKLDBYKjMJsDjMFG!MFSuK.KL/MqGB#4M
MFNDpyYB#RyMFSD{M4{JRTB#GGJI2KLtpTG)SuNDMJj@v#j?+A*GM Hs?7S/MFSuKpTB#RTRyEA*pTKLOKLDMGpy²JM?#P;KL/M4NDStCDpyjMF{K!MFC£{JRTpTN/MFG
pTSKLDM"Ãh**"`æD?#j@M /B#4stRyM#I`pyPiKL/MlGN/tv#jBYstL	pTStCDND{MFCEBq{LDB#pS{?74s?7S/MFSuK*pTS	BÃh**
{?7SDGpG!KG?#P'Bl{?74stRTMJK!MWGNDDv#jBYstL}?#P ÂS/?HC/MFGJIKL/MFSqKL/M)SuNDMJj?#Pä@h*ÅjMJstjMFG!MFSuKBYKpy?7SDGpTG
Nn LtpTG?#pT?7NDGRyE	C/?MFG)S/?#K4MFB#S£KLDBYKBqGMFBYj{L4MJKLD?C£tB#G!MFC£?7Sä*h;*)G"NDG!KWM sRy?#jM
B#- RTRKL/MFGM.MFuNtpyB#RTMFS[K(jMJstjMFG!MFSuKBYKpy?7SDGJ
ñ NDjjMFB#G!?7SP?#jNDGpTS/vä*h;*)G@pTGB#RT4?7G!K(M /{JRTNDGpT#MFRyEsDjB#{Kp{JB#R9±SPQB#{KJIDä*h;*)G@C/?S/?#K
LDB+#M*B){JRyMFBYjG!MFB#SuKpT{JGgKL/MJEBYjMBG!?7MJA*LDBYKLuEuDjfpTC{jMFBYKN/jM#I7MJKAMJMFS*GB#SDC4{?74sRyMJK!MFC
h**)GfofÁÜM	{JB#SÁ?7SDRyE¡GBFE¦KLDBYK4ä*h**)GA?7NDRTCÁ{?#jjMFGs`?7StC¡K!?xG!MJKG?#P*MFNDpyYB#RyMFS[K*)G
A*LDp{L	GLtBYjMB#RTRKL/M{JB#NDGB#R stBYK!K!MJjfSDGA*LDMJjMlB#SOMá`MF{K)S/?HC/MlLDB#G@BYKWRyMFB#GKKA?z{JB#NtG!MFG"gQB#StC?7SDRTE
KL/Mz{JB#NDGB#RstBYK!K!MJjSDGA*L/MJjMqBGpTS/v7RyM}{JB#NtG!Mqstj?+#?#w#MFG4B#S§Má`MF{K4BYjMS/?#K"C/MJK!MJjpTSDMFCof	LDpTGpTG
S/?#K)sDj?#RyMFBYKpT{A*L/MFS£AMBYjMs`MJjP?#j}pTS/vq?C/MFR;\FZTZFaQ]cY^	N/KWpTKWMF{?74MFG{jfpyKpT{JB#RpyPAMBYjM
C/?7pTSDv}4?HC/MFR;V ¥#Zd!VF#]^u7Ä(A*pyKL/?7N/K@B}G!MFB#SuKpT{NDSDC/MJjGKB#SDCDpTS/v4?#P9KLDM{JRTB#GG@?#Pä*h;*)GJI2pyK@A*pTRTR
M.uNtpyK!M.CDpy~}{JNtRyK;K!?qB#GGpyv7S	Bstjpy?#j(K!?KL/MF	
ñ NDjWpTSuK!MFSuKpy?7SOpG*K!?K!jB#C/M"KL/MNDSDpTN/MFS/MFGG(?#PKL/MjMJsDjMFG!MFS[KBYKpT?7SO?#PMFuNDpTB#RyMFSt{M{JRTB#GGMFG@?#P
*)Gg=Ã(h*)GoP?#jB}4?#jM"B#StBYv#MFBYtRyM"?7S/MgQä@h*GfofÄ*K!MFG!KpS/v}A*LDMJKL/MJjWBqv7py#MFS£h*
äÒpTGWB#S£ä@h* pTG*MFB#GpyMJj)KLDB#SK!MFGKpTS/vzA*L/MJKL/MJx
j äÒpTGWBq{?74sRyMJK!MFCh*"2±SOKL/M¢tjG!K){JB#G!M#I
KL/M*{?7StGpTG!K!MFSD{E4{fL/MF{wpTSu#?7Ry#MFGK!MFG!KpTS/v.P?#jKL/M@BYtG!MFSD{M@?#PCtpyjMF{K!MFCB#SDC}{?74stRyMJK!MFRyE4NDStCDpyjMF{K!MFC
{EH{JRyMFGWgKLDMW{?74sRyM HpTKE4?#P2KL/MFG!MWK!MFG!KGB#SDCqKL/?7G!M@SDMF{MFGGBYjEK!?"#MJjpyPEA*L/MJKL/MJjBlCtpyjMF{K!MFCv#jfBYstL
pTG.B*àpGM HB#{KRTE£KLDM}GB#4M%ofIiA*L/MJjMFB#GlpTSKL/MG!MF{?7StC¡{JB#G!M#IpTSB#CDCDpTKpy?7SK!?K!MFG!KpS/vP?#jKL/M
BYtG!MFSt{M"?#PCDpyjMF{K!MFCB#SDC£stBYjKpTB#RTRyECDpyjMF{K!MFC£{EH{JRyMFGJI2AM4B#RTG!?S/MJMFC£K!?sMJjP?#jÂ{fL/?#jCDB#RpyKE	K!MFGKG
B#SDC{fL/MF{wzKLDBYK(MFB#{LBYj{pTGstBYjK?#P ?7SDM?#P KL/MpTSDCtND{MFCqGN/Dv#jBYstLtGCtpTG!stRTB+E#MFCqpSzæpyv7NDjM.ÕL/M
sDjp{M"AM}LDB+#MK!?	stB+EOP?#jlNDGpTS/vä*h;*)GlpG)KLDBYK.AM}BFE£?H{J{JB#Gpy?7SDB#RTRTE£S/MJMFCK!?MJB#RTNtBYK!M}B#S
MFNDpyYB#RyMFSD{M{JRB#GG@?#jMlKLDB#S£?7SD{M#@±SOKL/M"S/M K)G!MF{Kpy?7SIAMA@pTRTRM /B#pTS/ML/?+A BzRy?{JB#R'G!MFBYj{fL
4MJKL/?HCA*LDp{LNDG!MFG(ä@h*G*{JB#S	B#RTG?4KBYw#MlB#C/YB#S[KBYv#M?#P'KL/M.CDMF{?74s?7GBYtpTRTpTKEsDj?#s`MJjKE}?#PB
G{?#jpS/v4PNtSD{Kpy?7SpTS?#jCDMJjK!?MJ~}{JpyMFSuKRyEzMJB#RNDBYK!MlS/MFpyv7Lu?#jpTS/vG!K!jNt{KN/jMFGJ
û¢

À

f¿ À#%$&(' »*)

 $,.$ !

"Ô©Ô$Ôð!$é $



1 : w ?:x :698
]>

.>$Ü]ÛÝ

ó>ÔÚ

ÜMlA@pTRTR2NDG!MB}Ry?H{JB#R4MJKL/?HC	K!?qM sRy?#jM.KL/MG!MFBYj{L£G!stB#{M?#Pä*h;*)GJLDM.G!KBYjKpTS/v}s`?7pS[K?#P
KL/M)G!MFBYj{fLsDj?H{MFGGA*pTRTRt`MWB#SzMF4sDKEzä*h;* gQ{?#jjMFGs`?7StCDpTS/v.K!?4B#SzMF4sDK|Eq*lofD>*MJ#MJjKLDMÊ
RyMFGGFIDA;M{?7NDRTCGKBYjKPj?7ãB#S/?#KLDMJj@{?7S/¢Dv7NDjBYKpy?7SpTP'AMlLDB+#M"G!?7M.sDjpy?#j*wS/?%A*RyMFC/v#MBY`?7NDKKL/M
sDjMFGMFSD{M4?#jlBYtG!MFSt{M4?#PG?74M4MFC/v#MFG.?#jl[ÊG!K!jfND{KN/jMFGJÜM}"NDG!KKLDMFSxC/MJ¢tS/MKL/M4?#sMJjBYK!?#jfGK!?
4?%#MlPj?7 ?7S/M.{?7S/¢tv7N/jBYKpy?7SK!?qB#S/?#KL/MJj@SDMFpyv7L[?#jpS/v"{?7SD¢Dv7N/jBYKpy?7S

 -
k¡¬

?

P¢«N¢

ñ N/j(B#GpT{)?#sMJjBYK!?#jGBYjM.KL/M.pTSD{JRNDGpy?7Sq?#P9B#SMFC/v#M.MJKAMJMFSBsB#pyj(?#P9S/?7SHÊB#C³B#{MFS[K@S/?CDMFGB#SDC
KL/M;jMF4?+YB#Ru?#PDB#S.M /pTG!KpTS/v*MFC/v#M;MJK|A;MJMFS"BstB#pTj ?#P/B#C³B#{MFS[KS/?HC/MFG pTSlKL/M;{JNDjjMFSuK {?7S/¢Dv7N/jfBYKpy?7S2
L/MFGMMFC/v#MFG*B+E`MMFpTKL/MJj*CDpyjMF{K!MFC?#j@NDSDCtpyjMF{K!MFC2
LDM"pTSt{JRTNDGpy?7S?#PB#SpTG!?7RBYK!MFC£RpTS/Bw !ëkOA*pTRTR G!MJj#MB#G)BzK!MF4stRTBYK!MP?#jKL/M"BYjf{JG  k£B#SDC
BÁ
k«[LD?+AMJ#MJjFI[KL/M(RTpS/ã
w !ëkK!?#v#MJKL/MJjA*pTKL"B#SD?#KL/MJjRTpTS/w °ë À jMJsDjMFGMFS[K9B#SuE"{?7tpTSDBYKpT?7S?#P
BYj{JG M H{MJsDK'KL/?7G!MKLtBYK {jMFBYK!M;SDMJA¡LHÊLstBYK!K!MJjfSDG;gKL/M;*)G(gQB[ofIHgoB#SDC}gQ{+opTSæpyv7N/jM;Ô7ofi±SKL/M
{JB#G!M?#PB#CtCDpTS/vWB#S"BYjf{YI#A;M(B+El?#DKB#pTSG!MJ#MJjfB#RCtpÌá`MJjMFS[KS/MFpyv7Lu?#jpTS/v*{?7SD¢Dv7N/jBYKpy?7StGJI#C/MJsMFSDCDpTS/v
?7SKL/MlK!?#s`?7RT?#v#Eq?#PKL/M.{JN/jjMFS[Kä@h*ÙB#SDCKLDM.CDpyjMF{Kpy?7S?#PiKL/MlBYjf{)`MFpS/v4pTSD{JRTNDCDMFC2iWG(AM
A*pTRRG!MJM#IpyPAMzBYjMzK!MFG!KpTSDvOKL/MzpTSD{JRTNtGpy?7S?#PB#S¦MFC/v#MzMJKAMJMFS§K|A;?S/?HC/MFxG rB#SDC k`IKLDpTGBFE
pTSu#?7Ry#MK!MFG!KpS/vOG!?7M}?#PKL/MqCtpÌá`MJjMFS[KYB#RTpTCx{?7SD¢Dv7N/jBYKpy?7StG.?#DKB#pTSDMFCuEKLDM}pTSD{JRTNtGpy?7S£?#P(KL/M
RTpTSDô
w !ëk`IKL/MqBYjÜ{   kI KL/M}BYjÜ{  Á k`IKL/M}L/ÊLstBYK!K!MJjE
S   kyÁ À ?#j.KL/MLHÊLsBYK!K!MJjS
À 
À
ÞÁ
k®gA@L/MJjM
pTS¡KLDMRB#G!KK|A;?x{JB#GMFG4A;?7NtRTC¡MB#S[E¦S/?HC/MzGND{L¦KLDBYKMFpyKL/MJjKL/MRTpS/w
k`ë À ?#jzKL/MORpTS/w À ë®M /pTG!KGzpTS¥KLDM{JN/jjMFSuKq{?7SD¢Dv7N/jBYKpy?7S`of°Ï@?+AMJ#MJjFI*KLDMjMF4?%B#R*?#P.B#S
MFC/v#M.A@pTRTR`B#RyAB+EGjMFGNDRyK(pTS?7StRyE}?7S/M.SDMFpyv7L[?#jpS/v"{?7SD¢Dv7N/jBYKpy?7S ñ KL/MJj(?#sMJjBYK!?#jGJIGND{LB#G@BYj{
jMJ#MJjGB#Rg=ÃLDpT{w#MJjpTS/v/IkFm#m#ª7ofIA*pTRTRS/?#K(M)NtG!MFCzuEz?7N/jG!MFBYj{fL	4MJKL/?HC2LDM)GMJK(?#P'S/MFpyv7Lu?#jpTS/v
{?7S/¢Dv7NDjBYKpy?7SDG@?#P;Bqv7py#MFSä*h;*ó
 äÒA*pTRRKL/MJjMJP?#jM"MKL/MG!MJK)?#PB#RTR'KL/M4CDpÌáMJjMFSuK@ä@h*)G
?#DKB#pTSDMFCPj?7 ä EB#CtCDpTS/v?#j*C/MFRTMJKpTS/v4BGpTSDv7RyM)MFC/v#MqgMFpyKL/MJj@CDpyjMF{K!MFC?#jWNDSDCDpTjMF{K!MFCof
MJP?#jMM HstRTB#pTSDpS/v}KL/MCDMJKB#pTRTGW?#P;KLDMG!MFBYj{L¡4MJKL/?HC2IRyMJK.NDGpTRRTNDG!K!jBYK!M"KL/MB#pS£pC/MFB#G)uE
4MFB#SDG"?#P(KL/MzP?7RTRy?+A@pTS/v	M /B#4stRyM#Ä{?7StGpTC/MJj"KL/Mä*h**ËpTS¡æpyv7N/jMnI9A*LtpT{L¡jMJsDjMFG!MFSuKG"KL/M
{JN/jjMFS[K{?7S/¢tv7N/jBYKpy?7S?#P`KL/MG!MFBYj{fLsDj?{MFGGgKLtpTG9¢Dv7N/jM?7StRyECDpG!stRTB+EGiKL/M(stBYjK9?#PKL/Mä@h*
{?#jjMFGs`?7StCDpTS/vK!?KL/M@S/MFpTv7L[?#jL/??HC4?#PKL/M@S/?HC/MF{G B#St5C kDofIB#SDCqB#GGNDM*KLDBYK;A;MWGLDB#RTRDpSD{JRTNDC/M
B#SMFC/v#Ml`MJK|A;MJMFSKL/MlS/?HC/MFØG B#SDBC k`

x

y

æpyv7N/jMlnÄ@>*?HC/MuxLDB#GW?7S/MstBYjMFSuKWB#SDC£?7S/M4{fLDpTRTC2IkC/?MFG)S/?#KLDBF#M4B#SuEstBYjMFSuKG)B#SDCLDB#GWKA?
S/MFpyv7Lu`?#jfG
±S¡KLtpTGlGpTKNDBYKpy?7S2IiA;M{JB#SDS/?#KpTSuK!j?HCDND{MKL/MRTpTSD
w °ëkMF{JB#NDG!MzA;MqA;?7NDRC¡Hpy?7RTBYK!Mq?7S/Mq?#P
KL/M}{?7StCDpyKpy?7SDGCDMJ¢tSDpTS/vä*h;*)GgQ{?7SDCDpTKpy?7S¥k+of}ÜMzBFEpTSuK!j?HCDND{M4KL/MBYj{5  k£B#StCxpTS
KLDpTG({JB#GM#IBYv7B#pTSOpTS?#jC/MJjK!?}sDjMFG!MJj#M{?7SDCDpyKpy?7SkYIKL/MKA?qSDMFpyv7L[?#jG?#RP kNtG!KM{?7S[#MJjK!MFC
ûá

» ¼X	½tt¾¿uÀ
pTSuK!?"{fLDpTRTCDjMFS2iÜM){JB#SB#RTG?"pTSt{JRTNDC/MKLDMWBYj{wBÁÿk9æpTSDB#RRyE#I[AMBFE}pSD{JRTNDC/M*KA?CtpÌá`MJjMFS[KLHÊL
stBYK!K!MJjStGØ  k5Á À I/A*LDMJjM À pGBS/MFpTv7L[?#j?#POk£gKLDMW?#KLDMJjS/MFpyv7Lu`?#j"NDG!KMW{?7Su#MJjK!MFC	pTSuK!?
Bl{fLDpTRTCI[?7SD{MWBYv7B#pTSqpS?#jC/MJj;K!?stjMFG!MJj#MW{?7SDCDpyKpy?7SOk+ofL/MFG!M@P?7NDj;CDpÌáMJjMFSuK{?7S/¢Dv7NDjBYKpy?7SDGBYjM
CDpTGstRTBFE#MFCpSæipTv7N/jMlm
x

y

x

y

x

y

x

y

æpyv7N/jMlmÄ@>*MFpyv7Lu?#jpTS/v.{?7SD¢Dv7N/jBYKpy?7StG9?#DKB#pTS/MFC}uE4pTSt{JRTNDCDpTSDvWB#S}MFC/v#MMJKAMJMFScB#SDCckpS4KL/M
{?7S/¢Dv7N/jBYKpT?7S?#Piæpyv/`n

 - 
 9 
E B)>  
k¡

¢

ª

§,«

 «Ð § N

£q§

±S?#jC/MJjK!?CDMFGpyv7SxBG!EHG!K!MFBYKp{4AB+EK!?C/MJK!MJjpS/M4A*LDpT{fLS/MFpyv7Lu?#jpTS/vä*h;*)G"BYjpTG!MPj?7
KL/M)pTSD{JRTNtGpy?7S4?#jKL/MWjMF4?%B#R`?#P B#SzMFC/v#MpTSqB#Szä@h*IDpyK;pTGGN/~q{JpyMFS[KK!?{?7SDGpTC/MJjG!?74MRy?H{JB#R
stBYjB#MJK!MJjG?#P`KL/MK|A;?lSD?C/MFGK!?.M{?7SDS/MF{K!MFC29æpyjG!KJIuG!?74M*B#CDCtpyKpy?7SDB#RHS/?#KBYKpy?7SqpTG9pTSuK!j?HCDND{MFC2
±P ~~ujMJsDjMFG!MFSuKGKL/M.{JBYjfCDpTSDB#RTpTKE}?#P9B4G!MJKJItv7py#MFSBSD?C/M pTSB4h**z
 ä"IA;M.CDMJ¢tS/M#Ä


Ä
Ä

ñ

g 2o
g o I
lg 2o]HV~ pê å lg oM~I

å l ]HV~ mGo?å l M~
Q å

 

Ä
Ä

g o
g 2o
o?å lg 2o]HV~
å lg 2oM~
ì*î
å l ]HV~
å l M~
æxè

tGMJj#MKLDBYKP?#j*B#SuEä@h*fä"IDKLDM.P?7RRy?+A*pS/vKA?sDj?#sMJjKpyMFG(LD?7RTC2Ä
å lg 2oí
Ä
  å lg oíí Q å lg 2]o H o å lg o
å lg a
o H­
I ZÓ LéQ å lg {o H­ÓgQL/MFSD{M  å lg 2oí   å lg do H oå lg 2o!o
Ä pTP 

¡¢£B¢d¤S¥¦)¦§
¨)©tª¦E©E«h¬

L/MSNDMJjB#SDCKEsM?#P`SDMFpyv7L[?#jpS/vW{?7SD¢Dv7N/jBYKpy?7StG9KLDBYK{JB#S4M(?#DKB#pS/MFC4Pj?7ÛKL/MpTSt{JRTNDGpy?7S
pTS}KL/MW{JNDjjMFSuKä@h*Å?#P B#SqMFC/v#MWMJKAMJMFBS B#StcC k}{JB#SqM@C/MJK!MJjfpTS/MFCqPj?7ÙKL/MWstBYjB#MJK!MJjG
BY?+#M#,*L/MjMFGNDRyKB#SuK}{JB#GNDpTGK!jE¥BFErM	jMFCDND{MFCrK!?¦G!MJ#MFS­G!KBYK!MFGJIA@LDpT{LrA;MLDBF#MRTBYMFRyMFC
ü

À

 $,.$ !

f¿ À#%$&(' »*)

"Ô©Ô$Ôð!$é $



Pj?7 ì K!?1ä"W±S?#jCDMJjWK!?zPQB#{JpTRTpyKBYK!MpyKGWC/MFG{jpystKpy?7S2IDAM"GLDB#RTR NtG!MKLDM"C/MF{JpGpy?7S	K!jMJM"GLD?+A*S£pTS
æpyv7N/jMkJÓ&­Y
None

nG(x)=0 and nG(y)=0?

No

Yes

nG(x)=0 and nG(y)=0

nG(x)≠0 or nG(y)≠0

pG(x)=0 and pG(y)=0 ?

pG(x)=0 and pG(y)=0 ?

No

Yes

nG(x)=0 and nG(y)=0
pG(x)=0 and pG(y)=0

nG(x)=0 and nG(y)=0
pG(x)≠0 or pG(y)≠0

nG(x)≠0 or nG(y)≠0

State

C

No

nG(x)=0 and nG(y)≠0

pG(x)=0 and pG(y)≠0
nG(x)≠0 and nG(y)=0

State F

State G

pG(x)≠0 and pG(y)= 0

pG(x)=0 and pG(y)=0
nG(x)≠0 xor nG(y)≠0

nG(x)≠0 and nG(y)≠0

n G ( x) = 0 ?
Yes

No

Yes

pG(x)=0 and pG(y)=0

nG(x)≠0 or nG(y)≠0
pG(x)≠0 or pG(y)≠0

pG(x)=0 and pG(y)=0
nG(x)≠0 and nG(y)≠0 ?

State B

State A

No

Yes

n G ( x) = 0 ?
No

Yes

pG(x)=0 and pG(y)=0
nG(x)=0 and nG(y)≠0

pG(x)=0 and pG(y)=0
nG(x)≠0 and nG(y)=0

State D

State E

æpyv7N/jMkJÓHÄ@L/M.K!jMJM"?#Ps?7GGpytRTM)GKBYK!MFG@KLtBYK@B+EjMFGNDRyK(E	B#CDCDpS/vB#S	MFC/v#MMJKAMJMFSOS/?HC/MFG	
B#SDC1k

®+ðBúQ¯÷øõ÷=üúôfðB÷ù=¶'ôôò òfô öô|û ù +#÷=øôüòfú ù°,õõ ù÷ ²±ô ö%ûõù'´³7÷ù=ôôù=ô ô J2÷=õû ú'ú)ôûüôò|ù ÷=%ô ôWù ú÷=òò õfüó ú2%÷=ò ù=ò ûô'õù ÷=øWô9÷=ôeø%µ ô %ô ù=ôúô J÷)õ÷ ÷=üøò [ô9ð ûüò !õ÷ üò lò /÷=øô ö+ùù=ô J÷
%


d
*
 ã
¡  ¡  O ;

 Ô* ú
.
 ¡

Ø  n
Ø



;Ô

Æ ÆÆw
R
 ; v

M ;  "

d



» ¼X	½tt¾¿uÀ
±S"KLDpTGiK!jMJM#I[KLDMRT?+AMJj9`?+ ?#PMFB#{LS/?7S/Ê=K!MJjpTSDB#Ru#MJjK!M {?7SuKB#pTSDG9BWK!MFG!K*gQBY?7N/KKL/M(SuNtlMJj
?#PstBYjMFS[KG)?#j)KL/M4SNDlMJjW?#PS/MFpyv7Lu?#jG@?#PS/?HC/MFG*xB#SDCÂkDof.L/MRy?%A;MJj)?F £?#PMFB#{LK!MJj}pTSDB#R
#MJjK!M }{?7SuKB#pTSDG9KLDM*RTBYMFRH?#PKL/M*G!KBYK!MjMFGNDRyKpTSDvWPj?7ÛP?7RTRy?%A*pTS/v)KL/M*stBYKL4Pj?7ÛKL/Mj?u?#KK!?lKLDBYK
K!MJjpSDB#Rt#MJjK!M `*L/MC/MFG{jpystKpy?7S?#P'MFB#{L	G!KBYK!M}gQp=îM#9KL/MCDpÌáMJjMFS[KS/MFpyv7Lu?#jpTS/v"{?7S/¢Dv7N/jfBYKpy?7SDG
KLDBYK4{JB#SÁMq?#tKB#pTS/MFC¦pTS¦KLDpTG"{JB#G!M%o"{JB#S¦`MzP?7NDSDC¦pTS§iBYtRyMkYxLDMzN/sts`MJj?F HMFG?#P*B#RTRKL/M
#MJjKpT{MFGpTSKL/MK!jMJM}GL/?%A¬KL/MjMFGK!jpT{Kpy?7SDGp4s?7G!MFC£?7SxMFB#{L§pTSuK!MJj4MFCDpTBYK!M4?#jlK!MJjpTSDB#R9GKBYK!M#
æ/?#j4M /B#4stRyM#I;G!KBYK!M	Ò{?#jjMFG!s?7SDCDG"K!?BGpyKNDBYKpy?7S¦A*LDMJjMq?#KLÁS/?HC/MFuG ¤B#SDC k¡C/?S/?#K4LDB+#M
S/MFpyv7Lu?#jG(B#SDC	BYK@RyMFB#G!K?7S/Ml?#P'KL/MFÂLDB#GG!?7M.stBYjMFSuKJ;WRyKL/?7N/v7LKLDM.K!jMJMlLDB#G*G!MJ#MFSCDpyá`MJjMFSuK
G!KBYK!MFGJI2KLDMJjM4BYjM?7StRyE	¢D#M"K!jNDRyE	CtpÌá`MJjMFS[K)G!KBYK!MFGJIGpSD{M"GKBYK!MFGÒB#SDC£ßI2B#SDC£G!KBYK!MFG.æ®B#SDCx
BYjMlGEMJK!jpT{JB#R
ÍKBYK!M


@> NtlMJj(?#P
{?7S/¢Dv7N/jBYKpT?7SDG
k
Õ


Ã

g 2oí


ß
æ

gk+o(?7SDRyEqpTP
gÕ7o(?7SDRyEqpTP

!ëk



k

BÁék
!ëk
À
 
k Á
5
À 
ôé
Á
k

g /o í­k

Q å l

)pyjMF{K!MFC 0@StCDpyjMF{K!MFC Ã ?7stRyMJKpTS/v¸·
ÃEH{JRyMFG· ÃE{JRTMFG·
>*?
>@?
>@?
-MFG +(Ì1
>@?
>@?
.
+
2
1
>@?
>@?
-MFG
>*?
>@?
-MFG
.
+
2
0
1
-MFG
>@?
-MFG +ù021
>@?
-MFG +ù31
-F
M G +»31
>@?
>*?
>@?
>*?
>@?
-MFG +ù021
>@?
>*?
>@?
>*?
>@?
-MFG +»31
>*?
>@?
>@?
-MFG
-MFG
>@?
>@?
-MFG +.021
-MFG +ù021
>*?
>@?
>@?
-MFG
-MFG
>@?
>@?
-MFG +ù31
-MFG +»31
gÔ7o(?7SDRyEzpyPOQ å glkDo¹Q¤Õ
gåuo(?7SDRyEzpyOP Q å glosQ¤Õ

@CtC/MFCMFC/v#MFG

Q å lk

Q å lk

!ëk
 
k5Á

Q å

g Doí­k
gloí­k

!ëk
À 
ôÁék

g Doí¥Õ

BÁék
 
k

g oí¥Õ



Q å lk




k5Á

À

À


k
BÁék
À 
ôÁék

Q å l

 gg 2DoXoX­­II ÓÓB#B#SDSDCC    gg 2DoJoJ­­II ÓÓ
å l
å lk

H

H

å lk

å l

H
H

' BYRyMkYÄiBYtRyM?#P9G!KBYK!MFG@KLDBYKBFEjMFGNDRyK(EzB#CDCtpTS/v4B#SMFC/v#M.MJK|A;MJMFSOS/?CDMFGOB#SDCôk
±S	iBYtRyM}kYIMFB#{LOj?+A {?#jjMFG!s?7SDCDGK!?}B}G!KBYK!M#ÄKL/M.¢tjG!K{?7RTND}S	{?7S[KB#pSDGKL/MRTBYMFRTG(?#PKL/M
G!KBYK!MFGJ«tKL/MG!MF{?7SDC{?7RTNDSCDpG!stRTB+EGKL/M)K!?#KB#RSuNtlMJj?#P'S/MFpyv7Lu?#jpTS/v{?7S/¢Dv7N/jBYKpT?7SDGKLDBYK{JB#S
M}?#DKB#pS/MFC¡P?#j"MFB#{L¥G!KBYK!M#«KL/MzKLDpyjC§{?7RTNDS§GL/?+A@GlKL/MCDpÌáMJjMFSuKlK|EusMFG"?#PMFC/v#MFG"KLDBYKJI9P?#j
MFB#{L¥GKBYK!M#I{JB#S§MzB#CDC/MFC§K!?OKL/Mz{JN/jjMFSuK{?7S/¢Dv7N/jBYKpT?7S2«{?7RTNDStG.P?7N/jFI¢D#MB#SDC¡Gpy xA*pTRTR9M
CDpTG{JNDGG!MFCRTBYK!MJjF
0WGpTS/vzKL/MM /B#4stRyMpTSæpyv7N/jM4nI2A;M4GLtB#RTR M HstRTB#pSKL/M4NDGM"?#PKL/M4C/MF{JpTGpy?7S£K!jMJM4B#G)AMFRTRB#G
KL/M"pTSDG!KB#SuKpTBYKpy?7S?#P9KLDMlpTS/P?#jBYKpy?7SpTS	iBYtRyM}kYæ/?7RRy?+A*pS/vKL/MlCDMF{JpTGpy?7SK!jMJM#I`BYKWRyMJ#MFR;kqgKL/M
j??#K*#MJjK!M tofI`KL/MlK!MFG!K)pTG(PQB#RTG!M"GpTSD{ãM k	LtB#GKA?S/MFpyv7Lu`?#jfGJKWRyMJ#MFRÕItKL/MK!MFG!K@pTG@B#RTG!?PQB#RTG!M"B#G
LDB#GW?7S/MlsBYjMFS[KJ)K)RyMJ#MFRiÔ}KL/M"K!MFG!K)pTGK!jNDM#I`GpSD{x
M xLDB#GWS/?zS/MFpyv7Lu`?#j+*KWRTMJ#MFR åzA;M"jMFB#{fL

/



À

 $,.$ !

f¿ À#%$&(' »*)

"Ô©Ô$Ôð!$é $



BOK!MJjpTSDB#R;#MJjK!M  ñ N/j{JN/jjMFSuK"{?7SD¢Dv7N/jBYKpy?7S§KL/MJjMJP?#jM{?#jjMFG!s?7SDCtGlK!?G!KBYK!M	æi*L/MFS2IuE
M /B#pTSDpTSDv	G!KBYK!Mzæ,pTSxiBYtRyMkYIAMq{JB#S¦{?7S/¢Dj KLDBYKlAM}jMFB#{fL¦P?7N/j"CDpÌáMJjMFSuKl{?7S/¢Dv7N/jfBYKpy?7SDG
lg Q å lg k/{
o H_Õ7ofdÄ ä ò J ôÁékP7I äcò J   kPA@pyKL/?7N/KS/MJAÁLHÊL"stBYK!K!MJjSDGJI7B#StClK|A;?½ä ò J   k%Á À P
A*LDp{Lstj?CtND{M@S/MJA­LHÊLqstBYK!K!MJjSDGF;Í?/IuKLDMFG!MWBYjM@KL/MW?7SDRyEGK!jND{KN/jMFG;KLDBYK?7N/jB#Ryv#?#jpyKLD¨"NDG!K
MJYB#RTNDBYK!MA*L/MFS{?7SDGpTC/MJjpTSDvlKL/MpTSD{JRNDGpy?7S}?#P KL/M{JB#SDCDpCDBYK!M)MFC/v#ãM !ë k`±Szæpyv7NDjM"kå/ItA;MGL/?%A
B#S§M HB#4sRyMqP?#j"MFB#{LÁ?#P(KL/Mz¢D#MS/?7SHÊG!EH4MJK!jp{JB#RG!KBYK!MFG	g?7SD{MBYv7B#pTS2I9KLDMFG!MqM /B#4stRTMFGl?7SDRTE
CDpTGstRTBFE4KLDM@stBYjK?#P'KL/M)ä*h**)G{?#jjMFGs`?7StCDpTS/vK!?"KLDM)SDMFpyv7L[?#jLD?u?HC?#P'KL/MWSD?C/MF(G B#StC kDof
ÜMKL/MJjMJP?#jMLDB+#M.B4G!EHG!K!MFBYKpT{WABFEzK!?"M HstRy?#jM)B#RRtKL/MS/MFpTv7L[?#jpTSDv{?7S/¢Dv7NDjBYKpy?7SDGA*LDp{L
jMFGNtRyK}Pj?7 B#CDCDpTS/v¦B#S°MFC/v#M#ÛÏ*?%A;MJ#MJjFI)pyKzA*pTRTR*G!?74MJKpT4MFGzMOSDMF{MFGGBYjErK!?ÁsMJjP?#j G!?74M
B#CDCDpTKpy?7SDB#RG!K!MJstG@GpTSD{M)KL/Ml{?7SD¢Dv7N/jBYKpy?7StG?#DKB#pTS/MFC	"NDG!K(M.ä@h*)GFÄ
å lg k/c
o HI H
Ó L Q å lg k/Go HàÓ[of	±K"pTG.KL/MJjMJP?#jM
Ä æpyjfG!KJI'AMNDGKB#pTSuKB#pTS¡KL/Mq{?7SDCtpyKpy?7Srk£g 
SDMF{MFGGBYjEK!?Ofc /@TZJaZ@KL/Ml{?7SD¢Dv7N/jBYKpy?7S	P?#jWG!?74M.?#PKL/M"C/MFG{jpyMFCG!KBYK!MFGJIpîM#G!?74Ml?#P
KLDMqRTpTSDwG"NDG!K.M}{?7Su#MJjK!MFCÁpTSuK!?BYj{JGJLDM}{?74stRyMJKpS/v	sDj?H{MFGG{?7SDGpTG!KGlpTS¢DjpS/v	B#S
?#jfpyMFS[KBYKpT?7SpTS	{JB#G{JB#C/M#I`GKBYjKpTS/v4Pj?7àKLDMlRTpTS/wHØG k`ë | GND{LKLDBYK*KL/MBYj{³NDG!K*pTSuK!j?HCDND{MFC
pwG   k"ÖMJKNDG){?7SDGpTCDMJjWKLDMGpyKNDBYKpy?7SpTS£æpyv7N/jMk#kYIA@L/MJjMA;MAB#S[KK!?	{?7StS/MF{KKL/M
SD?C/MF]G qB#SD%C k`I[B.{JB#GM@{?#jjMFGs`?7StCDpTS/vWK!?lG!KBYK!MWu@4?7SDv.KL/M(KL/jMJM*s`?7GGpytRyMS/MFpyv7Lu?#jpTS/v
{?7SD¢Dv7N/jBYKpy?7StGJIiRTMJKlNDG.GNDsDs?7G!M4KLDBYKlAMqBYjM}K!MFG!KpTSDv	KL/M?7S/MqA*LDpT{fLxpTSuK!j?HCDND{MFGKL/MzLHÊL
sBYK!K!MJj
S   k1Á À .L/Mä*h;*¨?#DKB#pTSDMFCOPj?7ËKL/M4{?74stRTMJKpTS/vzsDj?H{MFGG)pTG)B#RTG!?CDpTGÊ
sRTBFE#MFCzpTS}æpyv7NDjMlk#kYLDM*GpÌ HKL}{?7RTNtS}pTS}'BYtRTMk*GL/?+A*G;A*LDp{L}GKBYK!MFGB#StC}S/MFpyv7Lu?#jpTS/v
{?7SD¢Dv7N/jBYKpy?7StGBFEjMFNDpyjMWKLDM.{?74stRyMJKpTSDv4sDj?H{MFGGJ

x

y

x

y

w

w

z

z

æpyv7N/jMk#kYÄ@ j B#StG!P?#jfBYKpy?7S?#P(B	{?7S/¢tv7N/jBYKpy?7S§BYPK!MJj"pTSD{JRTNDCtpTS/v}KLDMstBYK!K!MJjS
{?74stRyMJKpTSDv
Ä





kÁ

À

B#SDC

ÍHMF{?7SDCDRyE#IYpyK pTGs`?7GGpytRyMKLDBYKiG!?74M;?#PKLDM;S/MFpyv7Lu?#jpTS/v({?7S/¢tv7N/jBYKpy?7SDG'NtG!KMjM³!MF{K!MFC2I#B#G
KLDMJEv7py#MWjpTG!M@K!?"CDpTjMF{K!MFC}?#j({?74sRyMJK!MFRyENDSDCtpyjMF{K!MFC}{EH{JRyMFGgQ{?7SDCDpTKpy?7SDG;ÕB#SDCÔlCDMJ¢tSDpTS/v
ä@h*Gfof4æ/?#j.M /B#4stRyM#IRyMJKNDG){?7SDGpTC/MJjKL/M4GpyKNtBYKpy?7SCDpTG!stRBFE#MFCpTS£æipTv7N/jMkFÕIA*LDp{L
{?#jjMFG!s?7SDCDGK!?xG!KBYK!M	æ±S¦KLDpTG"{JB#G!M#I;KL/M{?7S/¢Dv7N/jBYKpT?7S§?#tKB#pTS/MFCÁBYPK!MJjpSD{JRTNDCDpS/vKL/M
BYjf½{   kB#SDC£{?74stRyMJKpTSDv}A?7NDRTCOv#MFS/MJjBYK!M4BCDpyjMF{K!MFC£{E{JRTM#)*LDpTG*{?7SD¢Dv7N/jBYKpy?7S£"NDG!K
KLDMJjMJP?#jM}MjM³!MF{K!MFC2L/M}{?7RNDSDGP?7N/jlB#StCx¢D#M}pSx'BYRyMk}GL/?+AÒA*LDpT{fLxG!KBYK!MFGB#SDC
{?7SD¢Dv7N/jBYKpy?7StG4BFE§jMFuNtpyjMBC/MJK!MF{Kpy?7SÁ?#P)CDpyjMF{K!MFC¦?#j{?74stRTMJK!MFRyE§NDStCDpyjMF{K!MFC¦{E{JRTMFGJI
jMFG!sMF{Kpy#MFRyE#

N



» ¼X	½tt¾¿uÀ

x

y

x

y

æipTv7N/jMkFÕÄ>@MFpyv7Lu`?#jfpTS/v4{?7S/¢Dv7N/jfBYKpy?7SKLDBYKv7pT#MFGjpTGMWK!?qBCDpyjMF{K!MFC{E{JRyM

¡¢£B¢£zº«¼»«h½B§
¨)©tª¦E©E«h¬

L/Ml?#KL/MJj@B#GpT{?#sMJjBYK!?#jFIKL/MljMF4?+YB#R?#PB#SMFC/v#MgMFpTKL/MJj@RTpS/w}?#j)BYj{+o(pG*"ND{LOGpT4stRTMJj(KLDB#S
KL/MB#CDCDpTKpy?7S°?#PB#S­MFC/v#M#I)GpTSD{M?7SDRTEr?7S/MS/MFpyv7Lu?#jpTS/v¦{?7S/¢Dv7N/jBYKpT?7S_pTGz?#DKB#pTS/MFC°A*L/MFS°AM
C/MFRyMJK!M"B#SMFCDv#M#W×?#jMJ?+#MJjFIpTK@pTG@S/?#K@S/MF{MFGGBYjE	K!?zsMJjP?#jfàB#S[EK!MFG!K@P?#j)C/MJK!MF{KpTS/vzCDpyjMF{K!MFCO?#j
NDSDCtpyjMF{K!MFC{E{JRTMFGJÏ@?+AMJ#MJjFIpTS£KLDpTG){JB#G!MAM4S/MJMFCK!?sDjMFGMJj#M4{?7SDCDpyKpy?7S£å	pTS£KL/M4C/MJ¢SDpyKpy?7S
?#P;ä@h* gQpy]P   k	M /pTG!KG)pTE
S äqL ~ mxoå lg kDMo ~9Q,Õq?#j mGo?å lg 2o Hx
I
7ofIKLtBYK){?7NtRTCM"pT?7RTBYK!MFC
$
BYPK!MJjB#S¡BYjf{}pTG.CDMFRyMJK!MFC2q*LDpTGGpyKNtBYKpy?7SxB+EBYsts`MFBYjl?7SDRyE£A*L/MFSAMqBYjM}v#?7pTS/v	K!?OjMF4?+#MzB#S
BYj½{   k	B#SDCOMFpyKL/MJj mGo å lg kDo H J DP?#j mGo å lg kDØo H J  K ý P7Ä*pTSOKL/Ml¢DjfG!K@{JB#G!M#IB#RRKL/M{LDpRTC/jMFS
?#.P k}KLDBYK*CD?SD?#KLDBF#M.?#KLDMJjstBYjMFSuKG(KLDB#1
S kzNtG!K(M){?7Su#MJjK!MFCOpTS[K!?SDMFpyv7L[?#jG?#.P kIDB#StCKLDpTG
sDj?H{MFGGWpTGjMJs`MFBYK!MFC£G!KBYjKpS/vPj?7ãMFB#{fL£?#P9KL/MFG!M{LDpTRC/jMFS2«tpSKL/MGMF{?7SDCO{JB#GM#IpTP mxoå g ý Øo Hj$
KL/MFS¦pTS¡B#CtCDpyKpy?7SK!?£KL/MqsDjMJHpy?7NDG.stj?{MFGGJIKL/MqBYj{ ý  kx"NDG!KlMz{?7S[#MJjK!MFC¥pS[K!?OKL/MqRTpS/w
ý ëÞkæpyv7NDjMkFÔ4pTRTRNDG!K!jBYK!MFGKL/MFGMlGpyKNDBYKpT?7SDGJLDpGsDj?H{MFCDN/jM)?#PK!jB#SDG!P?#jpS/v4BYj{JG*pTSuK!?RTpTSDwG
pTGM /B#{KRyEKL/M.GB#MlB#GKL/M?7SDMlC/MFG{jpT`MFCpTSKLDM.sDj??#P ?#P9hj?#s`?7GpyKpy?7SÕ

x

y

x

u

y
u

æpyv7N/jM4kFÔÄ jB#StG!P?#jfpTS/v4BYj{JGpS[K!?}RpTS/wHGBYPK!MJj*jMF4?+HpTS/v4KL/M.BYjf{ã

 ¾y u 
k¡

©uª ¢

ô¥H¢«Ð µ§«


k

W RyKL/?7N/v7L°KL/MsDjMJpy?7NtGqC/MFG{jpysDKpy?7S®?#P"KL/M?#s`MJjfBYK!?#jGKLDBYK	C/MJ¢tSDM£KLDMSDMFpyv7L[?#jLD?u?HC¤?#P"B#S
ä*h;*ÐpTG)NDpyK!M{?7S[#MFStpyMFS[KPj?7 BzsDjB#{KpT{JB#R(gQpTstRyMF4MFSuKBYKpy?7Sos?7pTS[KW?#PHpyMJA.IP?#j)KL/M4GBYw#M
?#P9{JRTBYjpyK|E#I/A;MGLDB#RTR2C/MFG{jpyM)KL/MFàpTSB#S/?#KLDMJjAB+E#;±SPQB#{KJItAMlGLDB#RTRNDGM¢D#M.?#sMJjBYK!?#jGJÄ
o¿ lg  K kDofIB#CDCtpyKpy?7Sz?#P9B#S	BYjã
{   k
Äíì
 


À

 $,.$ !

f¿ À#%$&(' »*)

"Ô©Ô$Ôð!$é $

A

x

y

x

y

B

x

y

x

y

C

x

y

x

y

x

ÀAÁ
D, analogous to E

x

y

ÀAÁ
F, analogous to G

x

y

ÀAÁ

ÀAÁ

x

y

ÀAÁ

x

y

y

ÀAÁ

x

y

x

y

ÀAÁ

x

y

x

y

x

y

ÀAÁ

x

y

x

y

ÀAÁ

x

y



æpyv7N/jMkå/Ä@æ/?#j}MFB#{fLrG!KBYK!M	?#PWKL/MC/MF{JpTGpT?7S§K!jMJMpTSÁæpyv/(kJÓHIB#S¥M /B#4stRTMz?#P@KL/M	S/MFpyv7Lu?#jpTS/v
{?7S/¢Dv7N/jBYKpT?7SDG9?#P2B#S}ä@h*KLDBYK;{JB#S}M(?#DKB#pTS/MFCBYPK!MJj;B#CtCDpTS/vB#SMFCDv#MMJKAMJMFS
S/?CDMFG OB#SDô
C k
û

» ¼X	½tt¾¿uÀ

AÂ Ã )Ä2g
¿   g
ÂAÃ )2Ä g

DofIB#CDCDpTKpy?7Sz?#PB}RTpTS/w5°ëk`
o
l K kDofItC/MFRyMJKpT?7S?#PiB#SBYj{ã 
k
Ä F
Q l K kDofItC/MFRyMJKpy?7S	?#PiBRpTS/5
w °ëk
Ä F
K KnÀ ofIB#CDCDpTKpy?7S?#PiB#SzBYjfw
{   k}B#StCz{jMFBYKpy?7S?#P KL/M)LHÊLzstBYK!K!MJjSB  k5Á À uE
Äíì è,è gl k
À
K!jfB#SDG!P?#jpTS/vKL/MRTpTS/5w k`ë pS[K!?KLDM.BYjã{ k5Á À 
LDM.{?7SDCDpyKpy?7StGKLDBYKKL/Ml{JNDjjMFSuK*ä*h;*z
 ä¬NtG!K(#MJjpyPEzG?KLDBYKMFB#{fL?#PKL/MFG!Ml?#s`MJjfBYK!?#jG
{JB#SMWBYststRTpyMFCqpTS}?#jfC/MJj(K!??#DKB#pTSB"B#RTpCqS/MFpTv7L[?#jpTSDvlä*h;* BYjMGL/?%A*SpTSz'BYtRTMÕ*L/MFG!M
{?7SDCDpTKpy?7SDG{JB#SzM*MFB#GpTRyE4C/MJjpy#MFCqPj?7ÙKLDM@pTS/P?#jBYKpT?7S}pTSqæipTv7N/jMkJÓ"B#SDCz'BYRyMkY9±SqiBYtRyM)ÕI
Å!ëÞæ kllg !pTëSKkDL/o`MjMJ{JstNDjjMFjMFG!MFSuSuKiKä@G hB(K!MF*G!K'"P?#7ji>@C/?#MJK!M(K!MFK{LDKpTBYS/KivWA;{M(?74{JB#stS"RyMJsK!MJMFjRTPEW?#NDj,StCDKpyLtjMFpTG{K!K!MFMFC.GKi{#EHMJ{JjRyMFElG'MFBYB#PGK!pTMJRTjEpTA*SDG!pyKMJL/jK?7pTN/S/KivB#K{L/KMNDRTB#pRTS/RyEw
pTSDGMJjKpTS/vKL/MzRTpTS/w`ÄpyKlpTGl?7SDRyExS/MF{MFGGBYjEK!?£{fL/MF{w§KL/M}M /pTG!K!MFSt{M}?#P*BstBYKL¡MJK|A;MJMFS ¥B#SD
C k
M /{JRTNDGpy#MFRTE4P?#jMFC}EKL/M)RTpTS/wHGJÍHpTpRTBYjRyE#`I F æ lg   kDoB#SDÃC F æ lg   k%Á À ojMJsDjMFG!MFSuK;K!MFGKG
P?#jC/MJK!MF{KpTS/v"CDpyjMF{K!MFC}{E{JRyMFG;BYPK!MJjpTSDG!MJjKpTS/v)KL/M*BYjZ{   k4B#SDC4KLDM*LHÊL4stBYK!K!MJjf5S   k%Á À pTS
KL/M4{JN/jjMFS[K)ä*h;*"I2jMFG!sMF{Kpy#MFRTE§gQB#SDC£sMJjLDBYstG@{?74stRyMJKpTSDvuof±|K)GL/?7NDRCOB#RTG?qMS/?#K!MFC£KLDBYK
AMz{JB#S¦sMJjP?#j KL/MFGMqK!MFG!KG"A*pTKL/?7N/KlpTStG!MJjKpTS/vKL/MzBYjf{}?#j"KL/MLHÊLxstBYK!K!MJjfS2ÄpTS§KLDpTGl{JB#GMqAM
?7SDRyES/MJMFCOK!?q{fL/MF{wOKL/MlM /pTG!K!MFSt{Ml?#PB}stBYKLPj?7 kK!c? {?7S[KB#pSDpTS/vq?7SDRyEMFpyKL/MJjWRTpTS/wHG(?#j)BYj{JG
CDpyjMF{K!MFC§B+AB+E§Pj?7é
 k¤gQB£stBYjKpTB#RTRTECtpyjMF{K!MFC§stBYKL¦Pj?7é
 kK!
? ofiBYtRyMÕOB#RG!?£GL/?+A*GA*LDp{L
?#sMJjBYK!?#jGzBFE¤jMFuNtpyjMB§s?7G!KÊ=sDj?H{MFGGpTSDv¡G!K!MJs­pTSr?#jCDMJj}K!?¦MFSDGN/jMOKLDBYKzKL/MO{?#jjMFG!s?7SDCDpTS/v
S/MFpyv7Lu?#jpTS/v{?7SD¢Dv7N/jBYKpy?7S?#P ä¬pG*B#Sä@h*`±SiBYtRyM"ÕI æÇÆ  Â ê | êulg k/oB#SDb
C Å*Q îÆ lg kDojMJPMJj
K!?}KLDMlsDj?H{MFCDN/jMFG(KLDBYKWsDjMFG!MJj#M{?7SDCDpyKpy?7StG.klB#SDCåqpTSOWMJ¢tSDpyKpy?7S¡kYItjMFG!sMF{Kpy#MFRTE#>@?#K!M"KLDBYK
?#K
L Å æ lg °ë k/oB#SDC æÇÆ  BÂ ê | ê[lg kDo9KBYw#M)KpT4aM Èg Â o9pSKL/MWA;?#jfG!K;{JB#G!M#I/A@L/MJjM Â pGKL/MWSuNtlMJj
?#PDRTpTSDwGpSKL/M;GN/Dv#jBYstLlpTSDCDND{MFC.uEKL/M{LDB#pS{?74g s?7S/MFSuK ?#P ärKLDBYKi{?7S[KB#pTStOG k`g R« ÅwQ î?Æ lg kDoKBYw#MFG
KpT4M È}g î g oipTSKL/M(A?#jG!K{JB#G!M#IA*L/MJjM î g pTGKL/MSNDMJj9?#P`BYj{JGpTSKL/MGN/tv#jBYstL4pTSDCtND{MFC"uE"KL/M
G!MJKW?#PC/MFG{MFStCDB#S[KGW?#]P kOpT
S äÙKLDBYKW?7SDRyE	LtBF#M?7S/MstBYjMFSuKJ=« F æ lg   k/o*B#SD
C F æ lg   k1Á À o
?#KLKBYw#MKpT4¸M È}g îÂ g oWpTS£KL/MA;?#jfG!K.{JB#G!M#I A@L/MJjM îÂ g pTG)KL/M4SNDlMJj)?#PMFC/v#MFG}gMFpyKL/MJj.BYjf{JG?#j
RTpTSDwGfo(pTSKLDM"GNDDv#jBYstLOpTSDCDND{MFCuEKL/M"SD?C/MFGWpTSOKL/M{LDB#pTS{?74s?7S/MFSuKW?#(P äÙKLDBYK{?7S[KB#pTStwG k
K!?#v#MJKL/MJjWA*pyKLKL/MFpTjC/MFG{MFSDCDB#SuKGJ
Äíì

Q

l K k

É1 : #Ê@8 =6 u< 5(Ë 5

76
5 8mÚ:]> 7½:]Ü=<:tÜÚ7<6 5 6OC%@éÜ 5 8;<8tÜÚT>Ì#Ú½Û[:,ÝÚ7:HÛ>Ù
L/M@G!MFBYj{L4MJKLD?C}A;MWLDBF#M)C/MFG{jpT`MFC4}BFEM*BYsDsRTpyMFC4pTSq{?7ltpSDBYKpy?7SA@pyKLB#SuEG{?#jMWMFuNDpT[Ê
B#RyMFSuKPQNDSD{Kpy?7S gP?#jqM HB#4sRyMKL/M@±!Ã)I±!ÃWI×O)ÖÅB#StCr@M£G{?#jpTSDvPNDSt{Kpy?7SDG4BYjMG{?#jM
MFNDpyYB#RyMFS[KfofW^ S®MFB#G!E,gtN/KzpTS/MJ~}{JpyMFSuKfo"ABFErK!?ÁpTSuK!MJv#jBYK!M£?7N/jqG!MFBYjf{L­4MJKL/?HCrA*pTKL¤B¡G{?#jM
MFNDpyYB#RyMFS[KlPNDSt{Kpy?7SA?7NDRTCM}B#GP?7RRy?+A*GFÄlv7py#MFS¦B#S¡ä@h*§
 äàK!?MMJYB#RTNDBYK!MFC2IG!MFRyMF{KB#S[E
M HK!MFSDGpy?7SBU ?#Pdä B#SDC{?74stNDK!M ^ _g U Ä FofÜM.{?7NDRCqB#RTG?NtG!M)?#KL/MJjlgQS/?7SHÊ=MFNDpyYB#RyMFSuKfoG{?#jfpTS/v
PQNDSD{Kpy?7SDGFIHB#RTKL/?7N/v7LKL/MG{?#jM.?#]P ä A?7NDRTCC/MJsMFSDC?7S	KL/MlG!MFRyMF{K!MFC	M K!MFSDGpy?7S2
Ï@?+AMJ#MJjFIRyMJK.NDG){?7SDGpTCDMJjKL/M{JB#G!M4?#PBC/MF{?74s?7GBYtRyM4G{?#jfpTS/vPNtSD{Kpy?7S ^ ÄKL/M4*à?#/Ê
KB#pTS/MFCluEB#CDCtpTS/v?#j'jMF4?+HpTS/vWB#SlBYj{Pj?7KL/M{JN/jjMFSuK *Þ
 UÐ{JB#S`MMJB#RTNtBYK!MFClE.4?HCDpyPEpTSDv
?7SDRyEq?7S/MlRy?H{JB#RG{?#jM#Ä
_g Uóò J  
kP.`
Ä Fdo H ^ _g U¯`Ä Fo Í ^ j lg k KnmGo X lg kDo!oí ^ j lg k KnmGo X lg k/Oo ò J DPo
^
_g UoÎ J  
kP.`
Ä Fdo H ^ _g U¯`Ä Fo Í ^ j lg k KnmGo X lg kDo!oí ^ j lg k KnmGo X lg kDo Î J DPo
^
]>

7

(< kÛ

 Û <Ý?>ÙÙ¿Ü



À

 $,.$ !

f¿ À#%$&(' »*)

"Ô©Ô$Ôð!$é $



Ã?7SDCDpyKpT?7SDG
hi?7G!KÊ=stj?{MFGGpTS/v
å
å
å
Ï} I ì*î lg kDof« 
gloJH_
I
Ó âµê  glk/oJH_
I
ÓH«
pTP  å gloaH­
I
Ó æBç©ñ Q å glk/oJH_
IÓ
o?¿ gl K k/o
å lg 2J
å glk/oaH­
å glkDoJH­
|
y
p

P
g
o
­
H
I
Ó
g
I
Ó
Q
I
[
Ó
!
o
o

K
/
L
F
M
S

ê
u
ê
l
g
/
k
o
µ
æ

ç
ñ
µ
â
ê
ì
 
 S F æ lg   k/od  HKÐ o Â7Ñ ê
æaÆ
BÂ
KL/MFô
Ï} I ì*î å lg kDof«  å lg ]
o H_Ó æBçñ  å glk/o]H_ÓH«
K k/o
å lg a
)
Q
2
Ä
l
g

y
p

P
g
l
Q
o
­
H
I
Ó
I
Ó[o
>@?7S/M
æBç©ñ Q å lg kDoJH­
ì Â
Ã
o
KL/MF6
S Å æ lg !ë kD]o HTÐ Â7Ñ ê
F o?¿   gl K k/o
 } mGo?å lg k/o
pTP  å glkDo¹Ò¤Õ
KL/MFS6ÅwQ î?Æ glk/o
F Â
Ã Q)Ä2gl K kDo
 } pê å lg kDo
>@?7S/M
Ï} I ì*î å lg kDof« À } pê å lg kDof«
K KnÀ o
ì èè gl k
pyPå lg lgQ k/å do lg H­kD¹o Ó Q¤æBçÕ ñ æµQçñå lg g kD Jo å H­Ilg ÓHao « H­I Ó âµê Q å lg Xo H­I Ó[oo pTPQ KL/å MFglS k/osæaQ¤Æ  Õ BÂ ê | êuglk/o
KL/MFô
S F æ lg   k%Á À ]o HTÐ o Â7Ñ ê
iBYtRyMlÕÄ;L/M?#sMJjBYK!?#jGJItKL/MFpyj{?7SDCDpTKpy?7SDG?#P9BYsDstRTp{JBYtpTRTpyK|E#IB#StCs`?7GKÊ=sDj?H{MFGGpTS/v4jMFuNDpTjMF4MFSuKG
ñ

sMJjBYK!?#j

0WGpTS/v§C/MF{?74s?7GBYtRyMOG{?#jpTS/v¡PNDSt{Kpy?7SDGJIKL/Mstj?{MFGG?#P.G!MFRyMF{KpS/v/I(v7py#MFS¤B#S°ä*h;*"I(B
jMJsDjMFG!MFS[KBYKpT#Mq*ËB#SDC¡KL/MFSxMJYB#RTNDBYKpS/vpyKl}BFEM}NDpyK!M}pTSDMJ~}{JpyMFSuKJIiGpSD{M4A;MqA;?7NtRTC¡LDB+#M
K!?jMF{?74stN/K!MqKL/MqRy?H{JB#RG{?#jMFGlP?#jB#RTRKL/MqS/?CDMFGlpTSDGK!MFB#Cx?#P(?7SDRyE?7S/MzRy?H{JB#RG{?#jM#	*LDpTGPQB#{K
{JB#S¦BYw#MqBORyMFBYjSDpTSDv	B#Ryv#?#jpyKLD KLDBYKGMFBYj{L/MFG"pTS¡KL/M}G!stB#{Mq?#P(MFuNtpyB#RTMFSD{M}{JRTB#GGMFGl?#P(*)G
{?7SDGpC/MJjBYtRyEqGRy?+AMJj*KLtB#S	B#S	B#Ryv#?#jpTKLDÐKLDBYK*G!MFBYjf{L/MFGWpTSKL/M.G!sB#{M.?#Pi**)G"gKLtpTGpTGKL/M{JB#G!M
?#PKL/M.B#Ryv#?#jpTKLDÐsDj?#s?7G!MFCE	ÃLDpT{w#MJjpTS/v/I2kFm#m#ª7of
ñ NDjG!MFBYj{fLzMJKL/?Cq{JB#SM*NDGMFCP?#j;C/MF{?74s?7GBYRyM*G{?#jpS/v.PQNDSD{Kpy?7SDGG!?lKLDBYKJÄgk+opyKpTG;S/?#K
S/MF{MFGGBYjExK!?£K!jB#SDG!P?#j KL/Mzä@h*ËpS[K!?BO**"I9KL/Mä*h**Ë{JB#S§MqMJB#RTNtBYK!MFC¦CtpyjMF{KRyE#I
B#SDC¥gÕ7o*KL/M4G{?#jM"?#P;B#SuEOS/MFpTv7L[?#jpTSDv}ä*h;*Ð{JB#S£M?#DKB#pS/MFCEO{?7stN/KpTS/vzBYK4?7G!K)KA?
Ry?H{JB#RG{?#jMFGFWRTR2KL/MB#C/B#SuKBYv#MFGW?#PKL/MlG!MFBYj{fLOMJKL/?CtG(?7S	KL/MG!stB#{M.?#P9*)G)BYjMlKL/MJjMJP?#jM
jMJKB#pTSDMFC2I/tN/KB44?#jM.jMFCDND{MFCB#SDCj?#tNDGKG!MFBYj{LOG!stB#{MlpG(NDG!MFC2
MJP?#jM@KLDMFG!MWB#GG!MJjKpy?7SDGBYjM@sDj?+#MFCIRyMJKNDG;M HB#pS/M@B#SqM HB#stRyM#Ã?7SDGpC/MJjKL/M)ä*h;* ä
pTSzæpyv7N/jMkFØ"B#SDCzKL/M)KL/jMJM)S/MFpyv7Lu`?#jfpTS/v{?7SD¢Dv7N/jBYKpy?7StGsDj?CDNt{MFC}EKL/MpTSD{JRNDGpy?7S4?#PiB#SzMFC/v#M
MJKAMJMFô
S £B#SD1
C k`I ä ( ÖI ä - B#SDy
C ä 0 gQB#RTG!?}CtpTG!stRTB+E#MFCpTSæpyv7N/jMkFØ7of

b
a
x

b
c

y

a
x

b
c

a

y

x

b
c

y

a
x

c
y

d

d

d

d

G

G1

G2

G3

æipTv7N/jMkFØÄ;WS	ä@h*fä B#SDCKLDjMJMlS/MFpyv7Lu?#jpTS/v{?7S/¢Dv7NDjBYKpy?7SDGwä ( I¸ä - B#SDCä
2

0

» ¼X	½tt¾¿uÀ
LDMG{?#jM?#P@MFB#{fL¥?#PWKL/MFG!M	ä*h;*)GqpTG"MFuNDB#RK!?KLDM	G{?#jM?#P@B#SuE¦?#P@KL/MFpTj"M HK!MFSDGpT?7SDGJ
æpyv7N/jMkFªCDpTG!stRBFEHG?7S/MM K!MFStGpy?7SP?#jMFB#{L£S/MFpyv7Lu?#jpTS/v{?7S/¢Dv7NDjBYKpy?7S2
b

b
a

c

x

b

a

y

c

x

a

y

c

x

y

d

d

d

H1

H2

H3

æ pyv7N/jMkFªÄß9 HK!MFSDGpy?7StGZU
ÜM"{JB#SKL/MJjMJP?#jM.AjfpyK!M#Ä
AÔvÕ,þÖl) × Ó  ØÇÕ,þÖlÙ
 × ÓÚ
AÔsçCþÖl) × Ó  ØJçCþÖlÙ
 × ÓÚ
AÔsèCþÖl) × Ó  ØJèCþÖlÙ
 × ÓÚ

I

( °U
-

B#SDC1U 0 ?#PiKL/Mlä@h*Gä ( Iä - B#SDCä 0 pTSæpyv/'kFØ

ÓÚ AAããÜ]Ü]7ää7tt

 ÓÚ ¾¾äRäRÜåÜÛßàÛ?tæ
 âDÓÚ
 æ?Ü]ä7æ?ÜeÝ%
Ó
ÓÚ AãÜe%Ý t
 ÓÚ ¾äRÜ[ßÛ?ãFâJD
 ÓÚ æ?Ü]ä7
Ó
ÓÚ ÓÚ
ÓÚ
æ/?#j@MFB#{LOM K!MFStGpy?7S 2éi?#P9B#S[ES/MFpTv7L[?#jpTSDv"{?7S/¢tv7N/jBYKpy?7S Jé|ItpTKpTG(B#RyABFEHGs?7GGpyRyM@K!?}¢tSDC
B#S	M HK!MFSDGpT?7S éi?#P9KL/Ml{JN/jjMFS[K@ä*h** ÙGND{fLKLDBYK*KLDMlG{?#jMFG@?#P 2é9B#SDC é?7SDRyECDpÌáMJj
Ó

ÂU

¾ÛBÜeÝ+D

¾ÛBÜeÝ+D

¾ÛBÜeÝ+D


ÓÚ Þ4Þ4ÜÜßàßàÛ4Û4áFáFââDD


ÓÚ Þ4ÜßàÛ4áFâ D

ÓÚ

ÓÚ AAáFáFÜeÜeããtt


ÓÚ AáFÜeã t

ÓÚ

ôU

å

ä

zä

dU

ôU

pTS?7S/MRy?{JB#R2G{?#jMqgQæpyv7N/jMqk+ÑCDpTG!sRTBFEHGKL/MFG!M.M HK!MFSDGpy?7StGfofÜMl{JB#SKL/MFSAjpTK!M#Ä

Ó ÔÔ ÖlÖl×× Ó ØJØ êê çÕ ÖÖÙÙ×× Ó Ú ÛhÛhÜeÜeÝ%Ý%tt


Ó Ô Öl× Ó Ø ê è ÖÙ× ÓÚ hÛ ÜeÝ%t

Ó
Ó
ÓÚ
þ

þ

þ

Cþ

þ

Cþ

Ó Ú Þ4Þ4Ü[Ü[ßßÛ4Û4ááJââJHH


ÓÚ Þ4Ü[ßÛ4áJâ H

ÓÚ

b
a
x

Ó Ú ããÜ]Ü]7ää7DD


ÓÚ ãÜe+Ý D

ÓÚ

b
c

y

Ó Ú AAááÜåÜåããtt


ÓÚ AáÜåã t

ÓÚ

a
x

Ó Ú äRäRÜeÜåæYÝ+Dt

 Ó Ú Aæ?æÜ]Üëä7Ý+
ÓÚ ¾äRÜeãD
 ÓÚ AæÜåä7
ÓÚ ÓÚ

b
c

y

å

a
x

c
y

d

d

d

H G1

H G2

H G3

æipTv7N/jMk+ÑuÄ;*L/jMJM.CDpÌáMJjMFSuKM K!MFSDGpy?7SDGZU å ( I,U å - B#StCôU å 0 ?#PKL/M.ä*h;*zä¬pTSæpyv/ kFØ
iBYwpS/vpTSuK!?}B#{J{?7NDSuKKL/M.sDjMJpy?7NtGM sDjMFGGpy?7SDGFIAM.?#DKB#pS2Ä
;g ä ( 
Ä Fo H ^ ;g äÛÄ Fo Í ^ j lg k K $7oí ^ j glk K o
^
¢

À

 $,.$ !

f¿ À#%$&(' »*)

"Ô©Ô$Ôð!$é $



g;ä - ÄFo H ^ g;äÛÄFoÍ ^ j glk K î oí ^ j glk K J  î Po
g;ä 0 Ä Fo H ^ g;äÛÄFoÍ ^ j glk K   oí ^ j glk K J    Po
^
LDMJjMJP?#jM#IKL/MG{?#jM4?#PB#SuE£S/MFpTv7L[?#jpTSDvq{?7S/¢Dv7NDjBYKpy?7SB+EOM?#DKB#pTS/MFCPj?7 KL/MG{?#jM
?#P	äÐE{?74stN/KpTSDv?7SDRyE£KA?ORy?H{JB#RG{?#jMFGFz>@?#K!M}KLDBYKG!?74M}?#PKL/MFGM}Ry?H{JB#RG{?#jMFGBFExLDB+#M
B#RyjMFB#CDE	MJMFS{?74stN/K!MFCBYKsDjMJHpy?7NDGWpyK!MJjBYKpT?7SDG)?#PKL/M4G!MFBYjf{LsDj?H{MFGGJÄWP?#jM HB#4sRyM#I ^ j glk K $7o
LDB#C¦K!?MqNDG!MFC¦K!?G{?#jMKL/MpTSDpTKpTB#RMF4stKE¡ä@h*"I;B#SDC¡MFpTKL/MJj ^Tj lg k K î o?#j ^Tj lg k K   o"{?7NDRTC
LDB+#MlMJMFS{?74stN/K!MFC	A*L/MFSKL/M.RpTS/cw k`ë î ?#Zj kë   AB#G@pTSDG!MJjK!MFCpS[K!?4KL/MG!K!jND{KN/jM#
¯G«Ð§¥H§µA§BTìz_ ZJG
a äÝÇfZVYÌ
^ ;Zâ{ºw»%¼ËVY^
 ä £ ÇZVY^tb
X ;Zâº	»%¼Âc[ÇJa=V#]^`Z¤ÇX¥Vf7`XY]^u¤cY^Z
cÈ}a/Zcf/ZJdV#a=c#d\[Z\Jd]=ÇZ£]^ ¹ VuÇTZ  a=ô
c ä%¾ _ ZJa ^ ÇZVO\fcYdZ	nZ ¤FÉl] ¥V#yZJ^taWV#^x[Zc /@Hc\JV[ÇTZ
ÈÉ^`FaQ]cY^ ¾
V uOÈaHZcf/ZJdV#a=c#d"]\ ì Â
Ã Q)Ä2lg  K k/olaHZ^
;g ä £ `
Ä Fdo H ^ ;g ä¬`Ä Fo Í ^ j lg k K $7o í ^ j lg k K J OPo
^
^

ÇebOÈaHZcf/ZJdV#a=c#d"]\ ?¿   g
o

ì

g;ä £ Ä Fo]H

^

ëbOÈaHZcf/ZJdV#a=c#d"]\

/olaHZJ^
g;ä¬ÄFoÍ

l K k

g

^

^ j

glk

o"aHZJ^
;g ä £ Ä`FodH
;g ä¬ÄFo{Í
^

^

uOÈaHZcf/ZJdV#a=c#d"]\ Â
Ã )Ä2g

g Do

KnmGoå lk =ò

ZebOÈaHZcf/ZJdV#a=c#d"]\ ?¿   g
o

g;ä £ Ä FodH

glk

o í

K J À P

^Tj

glk

K J  KnÀ P

^ j

glk K $7o

l K k

Q

^

hYi

^Tj

DoaHZ^
g;ä £ Ä`Fdo H ^ g;ä¬Ä`FoÍ

ZF

^

glk

^ j

o

J OP

K KnÀ
èè l k

ì

ZF

g Do!o í

KnmGo?å lk

/oaHZJ^
g;äÛÄ`FoÍ

^ j

glk

o í

K J DP

l K k
^

^ j

glk

g Do!oí

KnmGo?å lk

^ j

glk

o

g /o)Î

KnmGo?å lk

o

J DP

¯G«Ð§L§

gk+oæipTjG!KJI[AM@GLDB#RTR/sDj?+#MWKLDBYKAM@{JB#Sz{?7SDG!K!jNt{K;B#SqM K!MFSDGpy?7ScU £ ?#Pä £ B#SDCqB#S/?#KL/MJjM K!MFSDGpy?7S
?#]P äItGND{fLKLDBY	K U¯B#SDô
C U£`CtpÌá`MJj@pTS?7SDRyEq?7S/MlBYj{}gKLtpTG(BYj{MFpTS/vÜ  k/of
Ä Ã?7SDGpTCDMJjKL/M){JB#G!MFG.gQB[ofI g`ofIHB#SDCgQ{+ofIHA*LDpT{fLq{?#jjMFG!s?7SDCK!?KL/M)B#CDCDpyKpT?7S?#P B#SzMFC/v#MWMJKAMJMFS
B#SD%
C k`ÄipTS4{JB#GM"gQB[of°I ä £ H äÂò J !ëkP@B#SDCRTMJ]K U £ MB#SM HK!MFSDGpy?7S?#DP ä £ KLDBYK{?7SuKB#pTSDGKLDM*BYj{
 
k«[pS{JB#G!MlgofI#A*L/MJjZ
M ä*£,H äÃò J   k,P7IuB#SDCpTS{JB#GMlgQ{+ofI7A*L/MJjZM ä*£,HÛ;g äÎ J k`ë À Poò J  
À
k5Á
P7IHRyMJ
K U £ `M@B#S[E4M HK!MFSDGpy?7S}?#OP ä £ gA*LDpT{fLA*pRTRH{?7S[KB#pTSqKL/MWBYj{   k/of±S}B#RTRDKL/jMJM@{JB#GMFGJI
RyMJZK U HÞU£Î J   kP7ÜMGLDB#RTRsDj?%#M.KLDBY	K U¯pTG(B#SM K!MFSDGpy?7S?#]P ä"Ä
 æÍMFpyjf{G!?7KJStIDCDpyKRyE#pTIHGpyP?#ýô}pT?7NDí G(} KLDäàBY*K gQä¬pTSzB#MFSDpyK1C L/MJUìj({JLDB#BFG!#M MlýôKL/}MlíGB#HÞ4I M G! w#MFRykDMJofK!IH?7S2KL/ MFS ýB}íB} ä £ WG U £ pTGB#S
M HK!MFSDGpy?7S?#dP ä*£QIKLDMFS ý1}íÃ} U£IDB#SDCKLtpTGpT4stRTpTMFGKLDBYK ý1}íÃ} U¡LDMJjMJP?#jM#IHB#RRKLDM.BYj{JG
U

á

» ¼X	½tt¾¿uÀ
pTÂ
S ä BYjM.B#RTG!?BYj{JGpS1U¡*LDpTGjMFGNDRTKB#RG!?MFSDGN/jMFGKLtBYKMJ#MJjELHÊLstBYK!K!MJjSpTSÂä pTG(B#RTG?B#S	LHÊL
stBYK!K!MJjSpTSôU§
 þ ofLDI2pyKjfL/CDMFRyE#S I ýypyP îý  í Á í þfÁ } þ UÂpTG"£ B#ñ S§SDLH{ÊML¡BYstv7BYB#K!pTS2K!MJI2jB#SÁGpTUÂS £ U pG@gQB#pTSxS£MMF HpyKK!LDMFMJSDj"Gpy{J?7B#SOG!M ?#P(ý ä*\£QI`A;í M4Á {JB#Sþ G!HMJI M" KLD BYK
kBÁ
ýBïí Á
þ8} ä £ IDB#SDC	KL/MFS ýBïí Á
þ8} ä"Í?/
I äÛB#SDÂ
C U LDB+#MlKL/M.GB#4MlLHÊLsBYK!K!MJjSDGJ
UÂpTGiKL/MJjMJP?#jMB#SM K!MFStGpy?7S?#D
P ä"I[B#{J{?#jCDpS/v)K!?.@MJ¢SDpyKpy?7S4Õ9>*?#K!M(KLtBYK G ý HÞ
I
k mGo X g ý ]
oH
mGo
G
m
o
G
m
o
ý
o H X(ð lg k/o Î J DP7
X lg kD]
X(ð g oB#StC
{?7SDGpTC/MJj	{JB#GMFG§gQCozB#SDC¬gM%ofIA@LDpT{L_{?#jjMFG!s?7SDC°K!?rKL/MxC/MFRTMJKpy?7S­?#P"B#SMFC/v#M
Ä ÖMJKONDGS/?+A
MJKAMJMFy
S B#StÂ
C k§gMFpTKL/MJjWBzRTpTSDwq?#jB#S£BYj{YIjMFG!sMF{Kpy#MFRyEDofÄ(pTS{JB#G!M	gQCofIRyMJK UìMB#SOM K!MFSDGpy?7S
?#{P ä¬{?7SuKB#pTSDpS/v4KL/MlBYjx{   k`«tpTS	{JB#G!MgM%ofIRyMJwK U MlB#SuEM K!MFStGpy?7S	?#{P ä"±S?#KL{JB#G!MFGJI`RyMJK
U£!H¨UpÎ J  
kP7ÜMlA*pRTRtstj?+#MKLDBYZ
K UÂ£2pTG(B#SM K!MFStGpy?7S?#]P ä*£QÄ
 æÍMFpyjf{G!?7KJStIDCDpyKRyE#pTI G(py{JP RyMFý BYj@KLDíBY*K } ä ä*£ £B#gQSDS/1C ?#K!U M4£ KLDLDBFBY#K Mý KL/ñM.Gí B#4H¿I M G!w# MFRyMJkDK!?7ofI S2K L/MFS ý òí} äWGG UêpTGB#S
M HK!MFSDGpy?7S?#P ä"ItKL/MFS ýÂóí1} U§IB#StC	KL/MJjMJP?#jM ýôóíô} U £ *Í?/I`B#RTR2KL/M"BYj{JG*p
S ä £ BYjM"B#RTG!?
BYj{JG@pT1
S U £ ;×?#jMJ?+#MJj+ItMJ#MJjELHÊLsBYK!K!MJjSpTÂ
S ä £ pG(B#RTG!?B#SL/ÊLstBYK!K!MJjSp1
S U £
LDpyjfCDRyE#I pyP ý ôí Á þ pTGB#S¦LHÊL¡stBYK!K!MJjSÁpT
S U £ gQB#SDC§A;MqwSD?+AÐKLDBYK ý  í Á þ H I

þ ofI'KLDMFS ý í Á
þ } U¡4WG
 
kyÁ
G UÞpGB#SM K!MFStGpy?7S?#ZP ä"I KL/MFS ýñí Á þ } ä"
L/MJjMJP?#jM#I ýôóí Á þ } ä£gKL/M.jMF4?%B#R'?#PKL/MlBYjx{   k{JB#SDS/?#K*CDMFG!K!j?+E	B#SuELHÊL	sBYK!K!MJjS
A*L/MJjãM   kpTGS/?#KpS[#?7Ry#MFC`ofÍ?/ÖI ä £ B#SDÂ
C U £ LDBF#MKL/M.GB#4MLHÊLstBYK!K!MJjStGJ
±SxKLDpGAB+E#dI UÂ£pTGlB#SxM HK!MFSDGpy?7S¡?#wP ä*£	×?#jMJ?+#MJj+I9A;Mz{JB#S¡G!MJMqKLDBYK G ý Hf
I
k mGo X ð g ý G
o H
mGo
G
m
o
G
m
o
ý
J
o H X lg kDo Î DP7
X g oB#SDC
Xrð lg kD]
gÕ7o*L/MlG{?#jMFG*?#{P äÙB#SDy
C ä*£BYjMlKL/M"GB#4MB#G@KL/MlG{?#jMFG*?#]P UéB#Stô
C UÂ£2jMFG!sMF{Kpy#MFRyE#IGpTSD{M ^ pTG
G{?#jMlMFuNDpTB#RyMFSuKJ×?#jMJ?+#MJjFIB#G ^ pTGC/MF{?74s?7GBYRyM#I/A;M{JB#SAjpyK!M
;g ä £ 
Ä F]o H ^ _g U £ `Ä Fdo HSõuö ^ j g ý KnmGo Xrð g ý o!]o HSõbö4ø ÷ g ^ j g ý KnmGo Xrð g ý o!oí ^ j lg k KnmGo X(ð lg k/o!o H
^
õ6öRø÷ g ^ j g ý KnmGo X g ý o!õboí ö ^ j g lg ý k KnKnmGmGoo X glg ýk/o!o!{o@o ÍÍ ^ j lglg kk KnKnmGmGoo X lglg kDkDo!o!ooíí ^ j lglg kk KnKnmGmGoo X ð lglg k/k/o!o!oo HH
X
X
X(ð
^ j
^ j lg k KnmGo
^ j lg k KnmGo
_g U¯
Ä
F@
o
Í
oH
X lg kDo!oí
X(ð lg k/o!
^
^TÍ j
;g ä¬
Ä
F{
o
lg k KnmGo X lg kDo!o^í j
lg k KnmGo Xrð lg kDo!o
^
^ j
^ j
gåuo
Ö MJK*NDGS/?%A,{?7SDGpC/MJj(KL/M.¢D#MCDpÌáMJjMFS[K({JB#G!MFGFÄ
gQB[o±SKLtpTG*{JB#G!M#I`AMlwHS/?+AÅPj?7Â'BYRyMÕ4KLtBYK mGo?å lg k/o H$*×?#jMJ?%#MJjFI mGo å ð lg k/(o H$OgMF{JB#NDG!M
AMBYjM4pTSDG!MJjKpS/vqBRTpS/w/oB#SDC mGo X(ð lg k/o Hq
I $gMF{JB#NDG!5M U S £ ~ mxpTG)o B#Slg MkD HMo K!~MFHÂSDGpykY?7IiSpî?#M#P  ä mG£ o KLDBYlg K.kD*o {?7H S[KJB#OpSDP7G 
KL/MBYj5{   kDofL/MFS2I2Pj?7 hj?#s?7GpyKpy?7SØzAM4?#DKB#pT
Xrð
Xrð
×?#jMJ?+#MJjFI mGo X lg kD]o H mGo Xrð lg k/)o Î J DPHS$Í?/Itß;t gåuoMF{?74MFG
;g ä £ 
Ä F]o H ^ ;g äÛ`Ä Fo Í ^ j lg k K $7oí ^ j lg k K J OPo
^
g`oæDj?7àiBYtRyMlÕAM.v#MJK mxo å lg kDXo HK
I
?#j mxo å lg ao HK
$
I

$
G
m

o
å
G
m
o
±P
lg kDa
o H
I
ItPj?7ãhj?#s?7GpyKpy?7S	ØA;M?#DKB#pTS X lg k/o H mGo?å lg k/of×?#jMJ?+#MJjFI mGo Xrð lg k/o H
$
mGo
o ò J OPH mGo?å lg k/Do ò J DP7
X lg kDD
x
m
±P oå lg kDo Hù$KL/MFS mGo å ð lg k/Ão H J DP¦gMF{JB#NDGM	A;M£BYjMB#CDCtpTS/vKL/MBYjô
{   kDof®æ/j?7
G
m
o
x
m
o
x
m

o
å
hj?#s`?7GpyKpy?7SØA;M"?#DKB#pTS Xrð lg kD(o H å ð lg kDØo H J OP½H
lg kDO
o ò J OP7@×?#jMJ?+#MJjFI mxo X lg k/(o H
mGo
o Î J DPHK$½H mGo?å lg kDof
X ð lg k/
2Mü

À

 $,.$ !

f¿ À#%$&(' »*)

"Ô©Ô$Ôð!$é $



±SMFpyKL/MJj@{JB#G!M#Itß'gåuoMF{?74MFG
;g ä £ `
Ä Fdo H ^ ;g ä¬Ä Fo@Í ^ j glk KnmGo?å glk/o!o í ^ j glk KnmGo?å glk/oDò J OPo
^
gQ{+o±S.KLtpTG{JB#G!M#I mGo?å lg k/{o HK$B#SDC mGo å ð glk/o{H J  KnÀ P79æ/j?7Åhj?#s?7GpyKpy?7S.ØA;M;?#DKB#pTS mxo X ð glkDodH
J  KnÀ P7×?#jMJ?+#MJjFI mGo X lg kD]
o H mGo Xrð lg kDo Î J DPH J À P7;LDMFS2IDß gåuoMF{?74MFG
;g ä £ 
Ä F]o H ^ ;g ä¬`Ä Fo Í ^ j glk K J À Poií ^ j glk K J  KnÀ Po
^
gQCoiWG mGo?å lg kD]o HK$)B#St%C UÂpTGB#S4M HK!MFSDGpT?7S?#=P ä­{?7SuKB#pTSDpS/v)KL/MBYjØ{   kI7Pj?7Ûhj?#s?7GpyKpy?7S4Ø
AMv#MJK mxo X lg k/]o H J DP7×	?#jMJ?+#MJjFI mGo Xrð lg kD]o H mxo X lg k/o Î J DPxHK$±S"KLDpTGi{JB#G!Mß;t/gåuo'MF{?74MFG
;g ä £ 
Ä F]o H ^ ;g äÛ`Ä Fo Í ^ j lg k K J DPo'í ^ j lg k K $7o
^
gM%o@±SKLDpTG){JB#G!M#I'B#G mxo å lg kD2o Hq
I
I hj?#s?7GpTKpy?7SØB#GG!MJjKG)KLDBYK mxo X lg k/*o H mGo å lg k/of×?#jMJ?+#MJj+I
$
mGo
G
m
o
G
m

o
o H X lg kDo Î J DPH å lg kDo Î J OP7L/MJjMJP?#jM#Itß;t gåuo(MF{?74MFG
X ð lg k/d
;g ä £ `
Ä Fdo H ^ ;g ä¬Ä F@o Í ^Tj lg k KnmGo å lg kDo!oí ^j lg k Knmxo å lg kDo Î J DPo
^



]¡¬

Bt A 2

£q§¤¥l°«B§

é ª

ª ¢«¥#¥.«§$ ª ¢

W GA;MLtBF#M}B#RyjMFB#C/EO4MFSuKpy?7S/MFCIKL/MJjMBYjMGMJ#MJjB#R9A?#jwGCDMJ#?#K!MFCxK!?	RyMFBYjStpTS/vBFE#MFGpTB#S¡S/MJKÊ
A?#jwGFI#A*pyKLDpTSlKL/M(G{?#jM%í)GMFBYj{L4BYsDstj?7B#{L2I[A*LDpT{fLNDGM;KL/M(G!sB#{M?#P{?74stRyMJK!MFC4h;*)G9K!?{JBYjjE
?7N/KKL/M.G!MFBYjf{LsDj?H{MFGGJ*L/MJjMpTGB4GRTpyv7LuKCDpÌáMJjMFSD{M)MJKAMJMFSKL/M?#sMJjBYK!?#jG({?7SDGpC/MJjMFCpTSzKL/M
CDpÌáMJjMFSuKA?#jwGFÄ;KL/MB#CDCDpyKpy?7SB#SDCC/MFRTMJKpy?7S	?#PMFC/v#MFGWpTG*{?7StGpTC/MJjMFC	uE	×OB#CDpyv7B#SOMJK@B#R'gkFm#m#ª7ofI
A*pyKLtpTSB×BYjw#?+§ÃLDB#pSx×	?7SuK!MÃBYjfRy?sDj?H{MFGGJIA@LDpT{L¡B#RTG!?sMJjP?#jG.×?7S[K!MÃBYjRy?	GB#stRTpTS/v
Pj?7ÙKLDMWG!sB#{MW?#P KL/M@?#jfC/MJjpTS/v7G?#PKL/MWBYjfpTBYtRyMFG;{?74stBYKpytRTM*A*pyKLqKL/M){JN/jjMFSuKÃ(h*"Dß;C/v#M
B#CDCDpTKpy?7SqB#StCC/MFRyMJKpy?7SpTGB#RTG!?4NDGMFCqEÍHstpyjK!MFGB#SDC	×MJMJwgkFm#m#Ø7ofItN/KA*pyKLDpTSzB"v#jMJMFC/EqsDj?H{MFGG
KLDBYK¢DjfG!K)v#j?+A*G.KL/MG!K!jND{KNDjMuE£B#CDCDpTS/vzMFC/v#MFG.B#StCKL/MFSKLDpTSDG)pyK)E£CDMFRyMJKpTS/vzMFC/v#MFGJ4WCDCDpÌÊ
Kpy?7SDB#R`?#sMJjBYK!?#jGBYjM{?7SDGpTC/MJjMFCquEÃLDpT{w#MJjpTS/vgkFm#m#ª7ofIpTSt{JRTNDCDpTSDv.BYj{WjMJ#MJjGB#RB#SDC{jMFBYKpy?7S?#P
uÊG!K!jND{KN/jMFGJ
WRTR'KL/MFG!M44MJKL/?HCDGW4?+#M4KL/j?7N/v7LKLDMGstB#{M?#P{?74stRyMJK!MFCh;*)G.pTSOKL/M"P?7RRy?+A*pS/v}ABFE`Ä
v7py#MFSKLDMl{JN/jjMFSuK@Ãh;*¿
 ä"IBYPK!MJjWG!MFRyMF{KpTS/vB#S	?#s`MJjfBYK!?#jFItBYsDstRTEpTSDv"pyK(K!? ä¬B#SDC?#DKB#pSDpTS/v4B
S/MFpyv7Lu?#jpTS/v"h*f
 ä*£I/KL/MJEzv#MFS/MJjBYK!MlB	fcY^/\f]\aZJ^ta([Z P7aZJ^/\f]cYc^ U£`?#dP ä*£9gQB4*Û`MFRT?7S/v7pTS/v"K!?
KL/M)MFNDpyYB#RyMFSD{M){JRTB#GGjMJsDjMFGMFS[K!MFCzE}KL/M)h*lofItpyP?7S/MWM /pTG!KGJ9±PKLDpTGpTGKL/M{JB#G!Mg?#KL/MJjA@pTG!M
ä*£7pTG S/?#K'B(YB#RTpTCl{?7S/¢Dv7N/jBYKpT?7SofI%KLDMFu
S ä*£7pTGMJB#RTNtBYK!MFC.E){?7stN/KpTS/v*KL/MG{?#jM;?#!P UÂ£I _g UÂ£`Ä Fof
L/M"{?74stRyMJK!MFC£h**ÒjMJsDjMFG!MFSuKBYKpy?7SO?#(P ä £ pGKL/MFSOjMF{?+#MJjMFCPj?7ËpyKGW{?7SDGpTGK!MFS[K@^ M K!MFSDGpy?7S
U £
LDM9sDj?H{MFGG2?#P/{L/MF{wpS/vKL/MM /pTG!K!MFSt{M9?#PHB*{?7SDGpTG!K!MFSuKM HK!MFSDGpy?7SlB#SDCv#MFS/MJjBYKpS/vpyKpTG{JBYjjpyMFC
?7N/KA@pyKL4B)sDj?H{MFCDN/jM{JB#RRyMFcC â{ºw»%¼Æa=c#Æ ºw»%¼§gQW?#jÎ_'BYjfGpIDkFm#m#Õ7ofIHA*LDpT{fLjNDSDG9pSKpT4M Èlg Qaúêo
pTSKLDMlA?#jG!K@{JB#GM#IA*LDMJj½M ê"C/MFS/?#K!MFG@KL/MSNDMJj?#P9MFC/v#MFGWpTSKL/M"h*"WS/?#KL/MJjWsDj?H{MFCDN/jM#I
{JB#RTRyMFí
C º	»%¼Æa=cY;Æ â{ºw»%¼I2pTG.pTSu#?#w#MFC§pSx?#jC/MJjK!??#DKB#pSxKL/Mz{?74stRyMJK!MFC¦h*ãjMJstjMFG!MFSuKBYKpy?7S
?#P"KL/MxS/MJA YB#RTpTC­{?7S/¢Dv7NDjBYKpy?7S2ÐL/MJjMxBYjMxCDpÌáMJjMFS[KpTstRyMF4MFSuKBYKpy?7SDG?#P*@Ê=K!?YÊh;*
gQWSDC/MJjGG?7SMJK;B#R=yIkFm#m7Ñu«ÃLDp{w#MJjpTSDv/ItkFm#m#Ø«t×	MJMJw`I2kFm#m#Ø«/h'MFBYjfR`ÎÚ9MJjBHIkFm#mYÓ[of;æ/?#jM HB#stRyM#I
KL/MWKpT4M){?74stRyM /pyK|E4?#P KL/M)B#Ryv#?#jpyKLtÙsDj?#s`?7GMFCEzÃLDpT{w#MJjpTS/vgkFm#m#Ø7opTsG Èg êo9?7SzKL/M)BF#MJjBYv#M
B#SD
C È}lg Qcê%opSKL/M.A?#jG!K*{JB#G!M#
ñ NDjGMFBYj{L4MJKLD?CC/?MFG(S/?#K(S/MJMFCzK!?NDG!M)B#S[Eq?#P KL/MFGMWK|A;?}sDj?H{MFCDN/jMFGJÄpTSz?#jC/MJjK!?4{LDMF{w
KL/M4YB#RTpTCDpTKE	?#PBS/MFpyv7Lu?#jpTS/vz{?7S/¢Dv7N/jBYKpT?7S?#PB#Sxä@h* ä"I'pTK)pG)?7SDRyES/MF{MFGGBYjE#I'pSG!?74M

ú%

2

» ¼X	½tt¾¿uÀ
{JB#G!MFGJI;K!?s`MJjP?#j¯B£K!MFG!KK!?xC/MJK!MF{K4MFpyKL/MJj4B#SÁNDSDCtpyjMF{K!MFC§stBYKL¦?#jBOsBYjKpTB#RTRyECDpTjMF{K!MFC¦stBYKL
MJKAMJMFSK|A;?S/?HC/MFG*pSyäÂgQpT4stRyMFMFS[K!MFCuEsDj?H{MFCDN/jMFGaÅ æ g=o(B#SDCF æ g=opTSÍMF{Kpy?7S	å/Ô7of ñ S
KL/M?#KL/MJjLtB#SDC2IY?7SD{M(KL/M(G!MFBYj{fL4sDj?H{MFGG9LDB#GM HstRy?#jMFCKLDMSDMFpyv7L[?#jLD?u?HCl?#P=ä­B#SDCC/MJK!MJj}pTS/MFC
KL/M.MFG!K(S/MFpTv7L[?#jpTSDv{?7SD¢Dv7N/jBYKpy?7Â
S ä£¸I ä*£2pTG(S/?#KB#RyABFEHG*B#SOä*h**"IB#SDCAMl"NDG!K(v#MFS/MJjfBYK!M
pyKG"ä*h;*ËjMJsDjMFG!MFS[KBYKpT?7S2£*LDpTG.v#MFSDMJjBYKpy?7S¦sDj?H{MFCDN/jMzpTG"B#RTG!?£#MJjE¡GpTstRyM#Ä4pyK{?7StGpTG!KG"pTS
¢DjpS/v/IGKBYjKpTS/vPj?7 BGpTS/v7RyM)S/?HC/M kI/B4{JB#G{JB#CDMFCsDj?H{MFGGKLDBYK(MFpyKLDMJjCDpyjMF{KGRTpTSDwGBFABFEPj?7
k?#j4NDSDCDpTjMF{KGlBYj{JGgQpT4sRyMF4MFSuK!MFC¡EsDj?H{MFCDN/jMFG æaÆ  BÂ ê | ê[g=olB#SDw
C ÅwQ î?Æ g=olpTSÁÍMF{Kpy?7S§å/Ô7of
>@?#K!MKLDBYK4B#RTRKLDMFG!MsDj?H{MFCDN/jMFG"NDG!MFC¦Ex?7N/j4G!MFBYj{fL¥4MJKL/?HC¦BYjMRTMFGG"KpT4MÊ{?7SDGNtpTS/vOKLDB#S
h**@Ê=K!?YÊ*ÐB#SDC*@Ê=K!?YÊh**"
×?#jMpT4s?#jKB#SuKRyE#I?7N/jG!MFBYj{fL°MJKL/?C°{JB#S°KBYw#MB#C/B#SuKBYv#M?#P.KL/MC/MF{?74s?7GBYpTRTpyK|E¦?#P
B#SuErG{?#jpTSDvxPNtSD{Kpy?7SDGJIB#SDC¤MFB#{L°ä*h**êgM /{MJsDKzKL/MOpSDpyKpTB#R?7S/M%o{JB#SrM	MJYB#RTNDBYK!MFC®uE
{?74stNDKpTS/v?7SDRTEzK|A;?Ry?H{JB#R G{?#jMFGJ*Ï@?+AMJ#MJjFI2KL/M"4MJKL/?HCDGtB#GMFC?7S£{?74stRyMJK!MFC£h**)G)S/MJMFC
K!?zjMF{?74stN/K!M"B#RTRKLDMRy?H{JB#R G{?#jMFGJI2B#RyKL/?7N/v7LKL/MB#Ryv#?#jfpyKLDàstj?#s?7G!MFC	E×NtS[K!MFSDB#N£B#SDCÃB#N
gÕYÓ#Ó#Ó[ofI A@LDpT{L£?#sMJjBYK!MFG)?7S{?74sRyMJK!MFCh*)GB#SDCNDG!MFGWKL/jMJM4pTStG!MJjKpy?7SO?#sMJjBYK!?#jGgP?#j)BYjf{JGJI
RTpTSDwGWB#SDCuÊG!K!jND{KN/jMFGfo@pTGB#RTG!?BYtRyMK!?	G{?#jMB#S[ES/MFpyv7Lu?#jpTS/vz{?7S/¢Dv7N/jBYKpT?7SNDGpTS/vzKA?Ry?H{JB#R
G{?#jMFGF«tL/?+AMJ#MJjFIKL/M.YB#RTpTCDpyK|E}{?7SDCDpTKpy?7SDG?#P9G!?74M.?#PiKL/MFG!Ml?#s`MJjfBYK!?#jG*BYjM.SD?#K*{?#jjMF{KJ
æpTSDB#RRyE#IÃLtpT{w#MJjpS/v§gÕYÓ#Ó7Õ7ëo ûzC/MFG{jpT`MFGlB#S¡B#Ryv#?#jpTKLD KLDBYKG!MFBYj{fL/MFG"pTSxKL/MzG!stB#{Mq?#P{?7Ê
stRyMJK!MFCh;*)GlB#StC£pGB#RTG!?BYtRyM"K!?MJB#RNDBYK!M{?7S/¢Dv7N/jfBYKpy?7SDGWuE£{?74stN/KpS/vq?7StRyE§gQN/sK!?P?7N/jo
Ry?H{JB#R'G{?#jMFGJ*±K)NDG!MFGWGpÌ ?#sMJjBYK!?#jGJI2RTpTSDwzB#SDC£BYj{"B#CDCDpyKpT?7S2ItRTpTSDwB#StCOBYj{"C/MFRyMJKpT?7S2I{jMFBYKpT?7SO?#P
uÊG!K!jND{KN/jMFG(uECDpTjMF{KpTS/vKA?B#RyjMFB#C/EzM HpG!KpTS/vRTpS/wGFIHB#StCjMJ#MJjGB#R?#PBYjf{JGJ;WRTR2KL/Ml?#s`MJjfBYK!?#jG
{JB#SMMJYB#RTNDBYK!MFCNtGpTS/vqKA?	Ry?{JB#RG{?#jMFGJI2M H{MJstKjMJ#MJjGB#R9B#SDC{jMFBYKpT?7S?#PuÊG!K!jND{KN/jMFGJIKLDBYK
jMFNDpyjM(P?7N/jRy?{JB#RG{?#jMFGJ*L/MYB#RTpTCDpyK|E"{?7StCDpyKpy?7SDG?#PKL/M*?#sMJjBYK!?#jGBYjM@MFG!KBYtRTpTGL/MFC4MFGG!MFSuKpTB#RTRTE
pTSK!MJj}G?#PKA?{?7SDCDpyKpT?7SDGJÄgk+o)KL/MBYG!MFSD{M?#PG!MFpÌÊCtpyjMF{K!MFC?#jNtSDCDpyjMF{K!MFC£stBYKLtGMJKAMJMFS
KA?}S/?HC/MFG(KLtBYKC/?S/?#KstB#GG(KL/j?7N/v7L{MJjKB#pTS	G!MJK?#PS/?HC/MFGJhI üItB#StCxgÕ7oKL/M.PQB#{KKLDBYK*B4{MJjKB#pTS
G!MJK?#P2S/?HC/MFGP?#jGBl{JRTpTN/M#iÖ'pTS/w"pTSDG!MJjKpT?7S"B#StC{jMFBYKpy?7S}?#PuÊG!K!jND{KNDjMFGS/MJMFCKL/M(¢DjG!K9K|EusM?#P
{?7SDCDpTKpy?7S2IuRpTS/w4B#SDCBYj{WC/MFRyMJKpy?7SzS/MJMFCzKL/M)G!MF{?7SDCz?7S/M#IHA*L/MJjMFB#GBYj{WpTSDGMJjKpy?7S}B#StCzBYjf{*jMJ#MJjfGB#R
jMFNDpyjM?#KLO{?7SDCtpyKpy?7SDGJWL/H
M ýstBYK¼L þqB#RTpCDpyKE	{?7StCDpyKpy?7SDG*KBYw#M4KpT42M Èng ~´üZ~ç
í êo*pSKL/M"A?#jG!K
{JB#G!M#I`B#SDCKL/`
M ý!{JRTpuN/M þ4{?7StCDpyKpy?7SDGKBYw#MKpT4ZM È}ng ~´üZ~ ofItB#RTG!?pSKL/M.A?#jG!K*{JB#G!M#;LDpTG(B#Ryv#?#jfpyKLD
B#RTG!?4jMFuNDpTjMFGKL/uM âº	»%¼Æa=cY;Æ º	»%¼¡B#SD
C º	»5¼Æa=cY;Æ â{ºw»%¼¡sDj?H{MFCDN/jMFGK!?MNDG!MFC
Í?/IB#RyKLD?7N/v7L_KL/MxYB#RTpTCtpyKE¤{?7StCDpyKpy?7SDG?#PKL/M?#sMJjBYK!?#jfGpTS,ÃLtpT{w#MJjpS/v ÿüGB#Ryv#?#jpyKLt B#SDC
KL/MFpyjzs?7G!K!sDj?H{MFGGpS/v§BYjMG!?7MJA*LDBYK4?#jM{?74stRyM ®KLDB#S°?7N/jGJIKLDMB#CDB#SuKBYv#MxpTGqKLDBYKKLDpTG
B#Ryv#?#jpTKLDàC/?MFGS/?#K*LtBF#MlB#SuECDN/stRTp{JBYK!MWjMJsDjMFG!MFSuKBYKpy?7SDG*?#PiKLDMMFuNDpTB#RyMFSt{M.{JRTB#GG!MFGJ;Ü°LDMJKL/MJj
KL/M{?74stN/KBYKpT?7SDB#RH{?7G!K?#P4?%#MFG9pTSlKLDMÃ(h*°G!sB#{M{JB#S{?74sMFSDGBYK!MP?#jKL/MRTBYjv#MJj9SuNtlMJj
?#Pä*h;*)G)gQB#SDCKLDM@RTBYjv#MJjSuNtlMJj?#PRy?H{JB#RDG{?#jMFGK!?`M@{?74stN/K!MFCo9pTGB.}BYK!K!MJj?#PMF4spyjpT{JB#R
MJYB#RTNDBYKpy?7S2I'KLDBYKlA@pTRTRs?7GGpyRyEC/MJsMFSDC?7S¡KL/Ï
M ý!G!sBYjG!MFS/MFGG þ?#PKL/MqG!sMF{Jpy¢{4C/?7B#pTSstj?#tRyMF
{?7SDGpC/MJjMFC2
1 7#Ê{8>$Û[<> 5 Ú½Ü=< 1 >ÙY: <ÚÙ
±SKLDpTGGMF{Kpy?7S.AMGLDB#RR#C/MFG{jpyM9KL/MM sMJjpTMFS[KG2{JBYjjfpyMFC?7N/K'A*pyKL)?7N/j B#RTv#?#jpyKLDIKL/M?#tKB#pTS/MFC
jMFGNtRyKGJIuB#StC}Bl{?7stBYjBYKpy#M)G!KNDC/EA*pTKL4?#KL/MJjB#Ryv#?#jpyKLD}GP?#j;RyMFBYjStpTS/vlBFE#MFGpTB#SS/MJKA?#jwHGJ9ÜM
LDB+#MG!MFRyMF{K!MFCSDpTS/MCDpÌáMJjMFSuK'sDj?#tRyMFG'K!?)K!MFG!K?7N/j9B#Ryv#?#jpyKLD	IYB#RR[?#PDA@LDpT{L?7SDRyE{?7S[KB#pTSCDpG{jMJK!M
YBYjpTBYtRyMFGFÄiWRTBYjËgQæipTv7N/jMkFn7ofIH±SDGN/jfB#SD{MgQæpyv7N/jM"kFm7ofI/Ï@B#pTRT¢tSDC/MJj*gQæpyv7N/jMWÕYÓ[ofI/jMFB#G!KÊÃB#SD{MJj+I
{j! ItæRTBYjM+ÕItÏ@?7NDG!MÊ=Ú9?#K!MFGFI×ONDGL/j?u?7I/B#SDC>@N/jfG!MJjE#
FB
ð ¯ø ü=ú ò;ù ùW"õ #ô!õù=¡ô )nõ  ÷=ôù÷=øôiòf;ù ²,vYõûHúö %ó üúú ò W"ò /÷=ø üDú Yõ #ô|ù!ð

/

2

À

f¿ À#%$&(' »*)

 $,.$ !

"Ô©Ô$Ôð!$é $



LDMWRTBYjÛSDMJKA?#jw"CtpTG!stRTB+EGiKL/MjMFRTMJB#SuK9BYjfpTBYtRyMFGB#SDCjMFRBYKpy?7SDGLDpTstG P?#j9KL/MWRTBYjÛ×?7SHÊ
yp K!?#jpS/vÍEHG!K!MF gQMFpTSDRTpT{fL}MJK(B#RyIkFm#n#m7ofItB"CDpTBYv7S/?7GKpT{*BYsDsRTpT{JBYKpy?7SqP?#jstBYKpyMFSuK4?7SDpyK!?#jpS/v/9LDpTG
S/MJK|A;?#jw`I`A*LDpT{fL	{?7S[KB#pSDGWÔ7Ñ4BYjfpTBYtRyMFG@B#SDC	å[ª}BYj{JGJILtB#G*MJMFS	{?7SDGpTC/MJjMFCOB#G@B}`MFSt{LDBYjwqP?#j
MJYB#RTNDBYKpTS/vB+E#MFGpTB#S£S/MJKA?#jwRyMFBYjSDpS/v4B#Ryv#?#jpyKLD}GJL/M.pTSDstN/K(CDBYKB{?7?7SDRyENDG!MFC	BYjMGN//Ê
G!MJKG?#PKL/MWRTBYjÙCDBYKBYtB#G!MNDpTRyKiuEÏ@MJjG!w#?+HpyKGWgkFm#mHk+ofIA@LDpT{L4{?7SuKB#pTSDG;ÕYÓ#Ó#Ó#Ó{JB#G!MFGKLDBYK9AMJjM
G!K!?H{LDB#GKpT{JB#RTRyEzv#MFS/MJjBYK!MFC£NDGpTSDv"KLDMl@RBYj S/MJKA?#jw`;±S?7N/jM HsMJjpT4MFSuKGJI/AMlLDB+#MNDG!MFC	KL/jMJM
CDBYKBYtB#GMFG(?#PiCtpÌá`MJjMFS[K(Gpy²JMFG.gKLDM¢DjG!sK Ä{JB#G!MFGpTSKLDM)WRTBYj CtBYKBYtB#G!M#IDP?#vj Ä5H_ÔYÓ#Ó#Ó K ØYÓ#Ó#ÓB#SDC
kJÓ#Ó#Ó#Ó[of
10

21

19

20

31

4

27

11

28

29

7

8

13

22
15

6

17

25

18

26

1

2

3

5

23

32

34

35

12

9

16

36

37

24

33

14

30

æ pyv7NDjM4kFnÄ;L/M.WRTBYj SDMJKA?#jw
±SDGN/jfB#SD{M¡gQpTSDC/MJjMJKqB#RyIkFm#m7Ñ#opTG}BxS/MJKA?#jw¥P?#j}MJYB#RTNDBYKpTSDvx{JBYjqpTSDGN/jB#SD{MjpG!wGFrL/M
±SDGN/jB#St{M@S/MJK|A;?#jwz{?7S[KB#pSDG(Õ7Ñ.YBYjpTBYRyMFG;B#StCzØ#Õ"BYj{JGJ9±Sq?7N/jM sMJjpTMFS[KGJIAMWLDB+#MNDG!MFCz¢D#M
CDBYKBYtB#GMFG*{?7SuKB#pTSDpTS/v	kJÓ#Ó#Ó#Óz{JB#G!MFGJItv#MFS/MJjBYK!MFCOPj?7ÐKLDM.±StGN/jB#SD{MBFE#MFGpTB#SOSDMJKA?#jw
ÏWB#pTRy¢tStC/MJjlgQ*tjB#G!?7SMJK*B#RyI'kFm#m#ª7o*pTGBqS/?#jBYKpT#MlG!EHG!K!MFàKLDBYK@P?#jMF{JB#G!KG@GMJ#MJjMGNt4MJj
LDB#pTR/pSS/?#jKL/MFB#GK!MJjSzÃ?7RT?#jB#C/?/9L/MÏWB#pTRy¢tStC/MJj9S/MJKA?#jw{?7SuKB#pTSDG;Ø#ª.BYjfpTBYtRyMFG9B#SDCzª#ªBYj{JGJ9±S
KLDpTG@{JB#G!M#I`A;M"LDBF#MB#RTG!?zNDG!MFC	¢t#MCDBYKBYtB#GMFG*A*pTKL¡kJÓ#Ó#Ó#Ó{JB#G!MFG@v#MFS/MJjBYK!MFC£Pj?7àKL/M"Ï@B#pTRT¢tSDC/MJj
S/MJK|A;?#jw`
jMFB#G!KÊÃ(B#SD{MJjFI{j! I2æiRBYjM+ÕI2Ï*?7NDGMÊ=Ú9?#K!MFGJIi×ONDGL/j?u?7I`B#SDC>@NDjG!MJjE	BYjMCDBYKBYtB#GMFGBFYB#pTRÌÊ
BYtRyM}Pj?7 KL/M 0Ã±×B#{fLDpTS/MzÖMFBYjSDpS/v	äMJs?7GpyK!?#jE#zjMFB#G!KÊÃ(B#SD{MJj"{?7SuKB#pTSDGqkJÓ	YBYjpTBYtRTMFG}gm
BYK!K!jpyN/K!MFGJI7K|A;??#P`A@LDpT{L4LtBF#M@}pTGGpTSDv@YB#RTN/MFGJIuB#SDCBtpSDBYjE{JRB#GG9YBYjpTBYtRyM%o'B#SDCqÕ#n#ª.pTSDGKB#SD{MFGJ
L/M{j! CDBYKBYtB#G!M4{?7SD{MJjStG{jMFCDpyK){JBYjCBYsDstRpT{JBYKpy?7SDGJW±K)LtB#G@å[mYÓ{JB#GMFG.B#SDCÁkFªqBYjpBYtRyMFG4gkFØ
BYK!K!jpyN/K!MFG@B#StC£Bz{JRTB#GGWYBYjpTBYtRTM%ofIB#SDCG!MJ#MFS£YBYjpTBYtRyMFGWLDB+#M}pTGGpTSDv4B#RTNDMFGJ)×?#jMJ?%#MJjFI GpÌ 	?#P
KL/MYBYjpTBYtRyMFGipTSKL/M({j! CDBYKBYB#G!MBYjM({?7S[KpSuN/?7NtGiB#StCAMJjM(CDpTG{jMJKpy²JMFC"NDGpTS/vWKL/M(×ÖÃí.í®G!EHGÊ
K!MF gQç?7LtBFHpID©#?7LDS2I/Ö ?7S/v/It×B#StRyMJEzÎ h DMJv#MJjFIkFm#måuof;æRTBYjM+ÕNDG!MFG)kFÔ"BYjfpTBYtRyMFGgkJÓ4BYK!K!jpyN/K!MFG
B#SDCxÔ{JRTB#GG)BYjpBYtRyMFGJI2?7S/M4P?#jKL/MSND`MJj)?#PKpT4MFGB{MJjKB#pSKEsM"?#PG!?7RTBYj BYjM4?{J{JNDjMFCpTS
BÕåYÊL/?7N/j*s`MJjfpy?C`oB#StC{?7S[KB#pTStG.kJÓ7ª#ªpTStG!KB#SD{MFGJI/A*pTKL/?7N/KpTGGpS/vYB#RTN/MFGFÏ*?7NDGMÊ=Ú9?#K!MFG@G!K!?#jMFG
KL/M@#?#K!MFGP?#j;MFB#{fL}?#P2KLD	M 0lÍuÏ@?7NDG!M?#Pä*MJsDjMFG!MFSuKBYKpy#MFG(Ã?7S/v#jMFGG4MFS?7SOkFª.w#MJE4#?#K!MFGJ«/pyK;LDB#G
k+ÑqYBYjpTBYtRyMFG)B#SDC£å[Ô#ØjMF{?#jCDGB#SDCB#RTRiKL/MYBYjpTBYtRyMFGWM /{MJsDKKA?LDB+#MpTGGpTS/v}YB#RTN/MFGF×NtGLHÊ
j??7Ò{?7SuKB#pTSDGnHkFÕå4{JB#G!MFG{?#jjMFG!s?7SDCtpTS/vK!?G!sMF{JpyMFG?#Pv7pRTRyMFC"NDGL/j?u?7G;pTS4KL/M)@v7BYjpT{JNDGB#SDC
ÖMJspy?#KBæDB#pTRTE«KLDMJjM4BYjM}Õ#ÔzBYjfpTBYtRyMFG4gQB{JRTB#GG)YBYjpTBYRyM#IG!KBYKpTS/vA*LDMJKL/MJjKL/M"NDGL/j??7 pTG
MFCDpyRyM?#js?7pTG?7S/?7NDGJI2B#SDCxÕ#ÕBYK!K!jpTtN/K!MBYjfpTBYtRyMFGfo*B#SDC?7SDRTE	?7S/M4YBYjpTBYtRyMLDB#GpGGpTS/vqB#RN/MFGJ

N

2

» ¼X	½tt¾¿uÀ

Age

SocioEcon

GoodStudent

AntiTheft

OtherCar

RiskAversion

HomeBase

Mileage

CarValue

SeniorTrain

VehicleYear

RuggedAuto

Theft

MakeModel

Antilock

Accident

ThisCarDam

OtherCarCost

DrivingSkill

Airbag

DrivQuality

DrivHist

Cushioning

ILiCost

MedCost

ThisCarCost

PropCost

æpyv7N/jMkFmÄL/M±SDGN/jfB#SD{MS/MJKA?#jw
>WN/jG!MJjE{?7SuKB#pTSDGCDBYKB.jMFRBYKpy#MK!?"KL/MMJYB#RTNDBYKpy?7S}?#PBYststRTpT{JBYKpy?7StG9P?#jSuNDjG!MJjEG{LD?u?7RTGFIuB#SDCqLDB#G
m4YBYjpTBYRyMFGB#SDC§kFÕ#m#ªYÓz{JB#GMFGJIA@pyKL/?7N/KpGGpTS/v4YB#RTN/MFGF;±SB#RTR ?#PKL/M{JB#G!MFGFI`pGGpTS/v4YB#RTN/MFG@BYjM
S/?#K*CtpTG{JBYjC/MFCztNDK(K!jMFBYK!MFCB#G@BCDpTG!KpSD{K(G!KBYK!M#
±S}KLDM*¢DjGKG!MJjpyMFG;?#P2M Hs`MJjfpT4MFSuKGJI[AMWB#p¬K!?{?74stBYjMWKL/M*MFLDB+pT?#j?#P?7N/jä*h;*@Ê=tB#G!MFC
Ry?H{JB#R9G!MFBYj{fLx4MJKL/?HCrg 
	¼¦©'o@A@pyKL£KL/M{JRTB#GGp{JB#R9Ry?{JB#R9GMFBYj{LxpSOKLDMG!stB#{M4?#P*)Gq7g ¦©iof
L/MG{?#jpS/v}PQNDSD{Kpy?7S£G!MFRyMF{K!MFCpG@WMFN¥gQÏ*MF{w#MJjB#SxMJK)B#RyI9kFm#m#Ø7ogA*LDp{LpTGWG{?#jM"MFuNDpTB#RyMFSuK
B#SDC¥C/MF{?7s`?7GBYtRyM%ofIA*pTKL§KLDMstBYjB#4MJK!MJj4jMJstjMFG!MFSuKpTS/vKL/MMFuNtpyB#RTMFS[K4GB#4sRyMGpy²JMG!MJK4K!?rk
B#SDCB4NDStpyP?#jfÒG!K!jfND{KN/jM)sDjpT?#jFi*L/MG!KBYjKpTS/vs?7pTSuK?#P KL/M.G!MFBYjf{L	pTGKL/MMFsDKEzv#jBYstLpTSz?#KL
{JB#G!MFGJ
ÜM"LDBF#Ml{?7RRyMF{K!MFC	KL/MlP?7RTRT?+A*pTSDv"pTSDP?#j}BYKpy?7SBY?7N/K(KL/M.M HsMJjpT4MFSuKGJÄ
= ¢  ¡ L/M.WMFNG{?#jMqgQRy?#v#MJjfGpy?7So;?#PiKL/MlRyMFBYjfS/MFCS/MJKA?#jw`
UðEN¡ L/M.SNDlMJj(?#PMFC/v#MFG@pTSD{JRTNDCDMFCqpTSKLDMlRyMFBYjS/MFCSDMJKA?#jw
 ¡ LDMzÏWB#pTSDv£CDpG!KB#SD{M#Iã
Ï H)í).íW±fI9pîM#¡KL/MSuNDMJj?#PWCDpÌáMJjMFSuKMFC/v#MFGFI;B#CDC/MFC_gQofI
CDMFRyMJK!MFC£gQ.ofI?#j;A*j?7S/v7RyE"?#jpyMFSuK!MFC£gA@pyKL/?7N/KKBYwHpTS/v"pTSuK!?B#{J{?7NDSuK;KLDM@CDpÌáMJjMFSD{MFGMJKAMJMFS
MFNDpyYB#RyMFSuK.G!K!jND{KNDjMFGfog±ofI'pTSKL/MRTMFBYjS/MFCxS/MJK|A;?#jw£A@pyKLjMFG!sMF{K.K!?	KLDMv#?7RTCxG!KB#StCDBYjC
SDMJKA?#jwrgKL/M4?#jpyv7pTStB#R'4?HC/MFRof"LDpTG)4MFB#GN/jM4pTG)?7SDRyE£{?74stN/K!MFCP?#jKL/M4KL/jMJM"K!MFGKlC/?YÊ
}B#pTSDGA*L/MJjM.B4v#?7RTC	G!KB#StCDBYjCM /pTG!KGJ
 µ¢«¡ LDMSuNDMJj?#P2pyK!MJjBYKpy?7StG{JBYjjpTMFC4?7N/KEKL/M*B#Ryv#?#jpTKLDÛK!?ljMFB#{LqKL/MMFG!KS/MJK|A;?#jwIHpîM#
KLDMlSuNtlMJj(?#Pi?#s`MJjfBYK!?#jG*NDGMFCK!?K!jB#SDGP?#jÐKLDMlpTSDpyKpB#Rv#jfBYstLpTSuK!?}B4Ry?H{JB#R2?#sDKpT"ND
 #t¡ L/M.SNDMJj(?#PpSDCDpyHpTCDNDB#RG*gMFpyKL/MJj***)G*?#jWä*h;*)Gfo(MJB#RTNtBYK!MFC	EqKL/M.B#RTv#?#jpyKLD
2i

À

 $,.$ !

f¿ À#%$&(' »*)

"Ô©Ô$Ôð!$é $

QGVertMotion

N0_7muVerMo



SubjVertMo

CombVerMo

RaoContMoist

AreaMeso_ALS

CombMoisture

AreaMoDryAir

AMInstabMt

CldShadeConv

ScenRelAMIns

LLIW

LatestCIN

CurPropConv

MountainFcst

SfcWndShfDis

ScenRel3_4

RHRatio

AMDewptCalPl

WindFieldPln

TempDis

SynForcng

MeanRH

CombClouds

OutflowFrMt

Boundaries

LowLLapse

WindFieldMt

WindAloft

AMInsWliScen

ScnRelPlFcst

IRCloudCover

WndHodograph

MorningBound

Scenario

VISCloudCov

CldShadeOth

InsInMt

Date

SatContMoist

MvmtFeatures

MidLLapse

LIfr12ZDENSd

LoLevMoistAd

InsChange

InsSclInScen

MorningCIN

ScenRelAMCIN

AMCINInScen

Dewpoints

CompPlFcst

CapChange

CapInScen

PlainsFcst

N34StarFcst

R5Fcst

U U
ð

æpyv7N/jMlÕYÓHÄL/M.ÏWB#pTRy¢tStC/MJj(S/MJKA?#jw

L/MSuNtlMJj?#PiY] fWZJd!ZJ^taHG!KBYKpTG!KpT{JGMJYB#RTNDBYK!MFC4CtN/jpTS/v@KL/MM MF{JNDKpy?7S?#PtKL/M(B#Ryv#?#jfpyKLD
*LDpTG"pTGBNDG!MJPQNDRYB#RTN/MzK!?x4MFB#GNDjMqKLDMzMJ~q{JpyMFSD{E¡?#P@KL/M	B#Ryv#?#jpTKLDGJI9MF{JB#NDG!M4?7GK"?#P

¬<¡

2û

» ¼X	½tt¾¿uÀ
KLDM4jNDSDSDpS/vqKp4M?#PB	G{?#jpTS/vYÊ=tB#GMFCRyMFBYjSDpTSDvzB#Ryv#?#jfpyKLDâpTGG!sMFSuK.pTS£KL/M4MJYB#RTNDBYKpy?7S?#P
GKBYKpTG!KpT{JG*Pj?7ÐKLDMlCDBYKBYtB#G!M#
© U¬¡ L/M"K!?#KB#R9SuNDMJj@?#PG!KBYKpTG!Kp{JGWNtG!MFC£uE	KLDMB#RTv#?#jpyKLD>@?#K!M4KLDBYK)KLDpTGWSuNtlMJj{JB#S
M{?7SDGpTC/MJjBYtRTE	v#jMFBYK!MJjlKLtB#SxßG!KßENDGpS/vzLtB#GLDpTS/vK!MF{fLDSDpTN/MFGAM{JB#S¡G!K!?#jM}B#SDC
MJ~q{JpyMFS[KRTE4jMJK!jpyMJ#M)B#S[E4stjMJpT?7NDGRyE{JB#RT{JNDRTBYK!MFCzG!KBYKpTGKpT{JGJ±|KpTG;S/?#KKL/MJjMJP?#jM)S/MF{MFGGBYjE4K!?
jMF{?74stN/K!M.KLDMF uEB#{J{MFGGpTS/v4KL/MlCtBYKBYtB#G!M#ItKLNDG(v7B#pSDpTS/v4pTSMJ~}{JpTMFSD{E#
ô²ÿ,«Y½B#¡RTN/MF*ØG L/p M@B+#MJjBYv#M.pTSuSzNtlßMJjgÔ7?#o!Po;{BY?7jf4pTBYstN/RyMFK!MFGC2KLDBYKLDppS[GK!YMJB#j#RTN/MFMWSDMWpTG;pTSqB#RKG!L/?"M)p4CDpÌsá?#MJjjKMFB#SuS[K;KG!KBYMFK{JpTB#GNDKpTG!{JMWGKgQL/pîMWM#9KpTK4L/MM
jMFuNDpTjMFCgK!q ?r=sv{t?7à4g sN/K!M"BG!KBYKpG!KpT{"pTSD{jMFB#G!MFGWM Hs?7S/MFS[KpB#RTRyEA*pyKLOKL/MSuNDMJj@?#PBYjpBYtRyMFG
pS[#?7Ry#MFC
© ¤¦¢¡ LDMKpTM#I4MFB#GN/jMFCpTS¡\JZcY^`\fIMFstRy?+E#MFCEKLDM"B#Ryv#?#jfpyKLDËK!?RyMFBYjS£KL/M4S/MJKA?#jw`
ñ N/j.pT4stRTMF4MFS[KBYKpT?7SxpTG)AjpTK!K!MFSxpTSKL/M}©[ Ú¨sDj?#v#jB#}pTS/vRTB#S/v7NDBYv#MqB#SDCjNDStGWNtSDC/MJj
Ö'pTSNH `¦LDpTGYB#RTN/MpTG"?7SDRyE¦Bj?7N/v7L¥4MFB#GNDjM?#P*KL/MMJ~}{JpTMFSD{E¡?#PWKL/MB#Ryv#?#jpyKLtGJIMÊ
{JB#NtG!MKL/MJjMBYjMB#S[E§{Jpyj{JNDGKB#SD{MFG"KLDBYK"}BFE§pS tN/MFSD{M}KL/MjNDSDSDpS/vKpT4MgM K!MJjfSDB#R
RT?7B#CDpTS/v£pTS§BS/MJK|A;?#jw#MFCr{?74stN/K!MJj+I{JB#{LDpTSDv£?#j4B#SuE¡?#KL/MJjB#Gs`MF{K"?#P*KLDMz{?74sN/K!MJjBYj!Ê
{fLDpyK!MF{KN/jM#I4MF?#jE¡stBYv7pS/v/INDG!M?#PWpTjKNDB#R4MF4?#jE#I;KL/jMFB#CDpTSDv/ICDpÌáMJjMFSuK{?HC/M#I;MJK{Yof
>@MJ#MJjKL/MFRTMFGGJIAM	LDB+#MK!jpyMFC¦K!?MFSDGN/jMqKLDBYKKL/MK|A;?¡B#RTv#?#jpyKLDGjNDSÁNDStC/MJjKLDM	GB#4M
{?7StCDpyKpy?7SDGB#G"PBYjB#G"s`?7GGpytRyM#I'B#SDC¡KLDMqK|A;?pT4sRyMF4MFSuKBYKpy?7SDG.GLtBYjMz?7G!Kl?#PKLDMq{?HC/M#
±SzPB#{KJI/KLDMWK|A;?B#RTv#?#jpyKLDGLDB+#MMJMFSzpS[K!MJv#jBYK!MFCpS[K!?KL/MßRTpyjfB.stB#{wBYv#MqgQB+B#pRTBYtRyM)BYK
 "!#!!%$'&#(#)*$+-,#./$ (-0213(4&65873.-9 of
æ/?#jKL/M4±SDGN/jB#St{MB#StCÏ@B#pTRT¢tSDC/MJjC/?7B#pSDGJI2KL/M4jMJs?#jK!MFCxjMFGNDRyKG)BYjM}KL/MBF#MJjBYv#MzYB#RTN/MFG
B#{j?7GGKL/M)¢D#M.CDBYKBYtB#G!MFG({?7StGpTC/MJjMFCL/MWjMFGNDRyKG?#Pi?7N/jM sMJjp4MFS[KGP?#jG!EHS[KL/MJKp{WCtBYKBHItpîM#
WRTBYjIH±SDGN/jB#St{MWB#SDCÏWB#pTRy¢tStC/MJjFIuBYjM.CDpTG!stRBFE#MFCpTSz'BYtRTMFGÔI/åB#StC	ØI/jMFG!sMF{Kpy#MFRyE#IHA*L/MJjM@AM
B#RTG!?GL/?+A¤KL/M*WMFNYB#RTN/MFG9P?#jKL/M*K!jN/Ml;g :
<9o9B#SDC4KL/MMFsDKE	7g $6<oiS/MJKA?#jwHGWgA@pyKL4stBYjB#MJK!MJjG
jMÊ=K!jB#pS/MFCPj?7âKL/M}{?#jjMFG!s?7SDCDpTSDvCtBYKBYtB#G!cM FofI'A@LDpT{L}BFEG!MJj#MzB#GlBwHpTSDC?#PG{JB#RyM#zL/M
jMFGNtRyKG?#DKB#pTS/MFC	P?#jjMFB#RCDBYKBBYjMCDpTG!stRBFE#MFCpTSiBYtRyMlª
WGWA;M{?7SDGpTCDMJj@KL/MJjMK!?MB{JRyMFBYjCDpÌáMJjMFSD{MMJKAMJMFSOKLDM"jMFGNDRyKG*?#DKB#pTS/MFC£P?#j@KL/MG!EHSHÊ
KL/MJKpT{lB#SDCKL/xM 0Ã±C/?7B#pTSDGFIAMlGLtB#RTR2CDpTG{JNtGGKL/MFãG!MJsBYjBYK!MFRyE#
Ä æD?#j*KL/MlGESuKL/MJKpT{C/?7}B#pTSDG.gQiBYtRyMFG@ÔItåB#SDCØ7ofÄ
ñ N/jä*h**@Ê=tB#G!MFC§B#Ryv#?#jpyKLDË?7N/K!sMJjP?#jGWKL/M**@Ê=tB#G!MFC¡?7S/MA*pyKL£jMFG!sMF{K)K!?
=
KLDMYB#RTN/M?#PHKL/MG{?#jpTS/v*PNDSt{Kpy?7S.NDG!MFClK!?*v7NDpC/M9KL/M;GMFBYj{L2Ä'A;MB#RyABFEHG ?#DKB#pS.MJK!K!MJj
jMFGNDRyKG?7SxKL/M¢D#M}CtBYKBYtB#G!MFGl{?7StGpTC/MJjMFC>*?#K!MqKLDBYK.AM}BYjM}NDGpTS/vB	Ry?#v7BYjpTKLDpT{
#MJjfGpy?7S®?#PKL/MOG{?#jfpTS/vxPQNDSD{Kpy?7SIG!?§KLDBYKzKL/MOCDpyá`MJjMFSt{MFG}BYjM£ND{fL¤v#jMFBYK!MJjpS¤B
SD?7SHÊRy?#v7BYjpyKLtpT{)G{JB#RyM#L/MFG!MjMFGNDRyKGGN/sDs?#jKKL/MlpTCDMFBKLDBYK*ä*h;*)G)BYjMlBYRyMK!?
¢SDC}S/MJA°B#SDCq`MJK!K!MJjRy?H{JB#RtB /pTBlA*pyKLDpSKL/M@G{?#jM%í)G!MFBYj{fLzBYstsDj?7B#{LzP?#jRTMFBYjSDpTS/v
B+E#MFGpTB#S£S/MJKA?#jwHG*pTSKLDpGKEs`Ml?#PiLDpTv7LDRyEqGK!jND{KN/jMFCCD?7B#pTSDGJ
ñ N/j4G!MFBYj{L¤4MJKL/?HC¥pTGB#RTG!?sDjMJPMJjBYtRyMzPj?7ìKL/Ms?7pTS[K"?#PWpyMJAÐ?#P@KL/M	Ï@B#}pTS/v
=
CtpTG!KB#SD{MFGJIA*LDpT{fLBYjM"B#RyABFEHG@{?7SDGpTC/MJjBYtRTEzRy?%A;MJjWKLDB#SKL/Ml?7S/MFG@?#DKB#pTSDMFC	ENtGpTS/v
KLDMl*ÙG!stB#{M#
×?#jMJ?%#MJjFI/?7N/j;GMFBYj{Lz4MJKL/?HC}pTGv#MFS/MJjB#RTRTE"4?#jM*MJ~}{JpyMFSuKJÄ9pyK{JBYjjfpyMFG?7NDKPMJAMJjpyK!MJj!Ê
=
BYKpT?7SDG4g?7SKL/M"¢D#M{JB#G!MFGfofIMJYB#RTNDBYK!MFGWPMJAMJjpTSDCDpTpTCtNDB#RTGg?7SP?7N/j){JB#G!MFGfofI{?74sN/K!MFG
2M

À

f¿ À#%$&(' »*)

 $,.$ !



õ tî9ã

W-X <-Y8Z
< Y8Z
-

Ý

[3\

b[
UElKm a m]n

[3\

W-X <-Y8Z
<-Y8Z

UEl ["_o\

[3\

UEl [ m^l \
UEl ["_]_[

l [

cYedgf hjiRq

W-X <-Y8Z
<-Y8Z
U

cYedgf hji%sut

U

Yedgf h;i%sut

U

U

[ l

n a^a]\^a
n a][ l

l

m]m^m

à% N%

[3\

n

[á

\

K[

%%

n
_

_ ]\üü

>#ìà >kí

@A>CBED

ü][
üü

b[ûK[][

FGIHKJ

@LMON

n

[ m

\ ]a]\ m

\

\ n

_o\

n^n]n^n

n

[3a

l

\ n

]\

%%%% %

` á^a
` a^a

_

\

m^n

_ l^lKn [

` m _

pa6_

m

% %%

PRQSHKJTMrU

^\3_á

./ /&%F/ NN NN / % %% /N/ % N // N %%

PRQSHKJTMVUl]n]n]n

m

p\

n

ç©ñ

û]a

% / % %%

[3\

n a][

 'àÌîê

PRQSHKJTMVU üüü

_

n

Um]m^m a

Yedgf h;iRq

Þ

ü

["_

U

Yedgf h;iRk

Ý

ü
üá

U






N
/ N% /% /
N/ %/ NN NN %% /N ?% //
?

NNNN%% %
NN%%
%
N
%% N./ /
%% / /
U

c Yedgf hjiRk

Ý

>#ñ½ä

"Ô©Ô$Ôð!$é $

l ]\]\

NN / %% / %F/ % //
n^n [ m

K\][

K[][ m

l

_ m

` m

l

` m _
` m [

m [

NN

K[^\
]a n

n

vCw6x8y{z}|~zKb-y{%j"z}Vyw6b-w6w6x8w"'zK

 Nb
W-X <-Y8Z
<-Y8Z
c{j h
 {; h

>C"

 p^ n _ 
 p^ Kn3l
 p^ n [ n

?

P

 a

[ l
[ m


[

^l



 n
[

 n
_

 DNpJ
[^a
l a

a

 
 \3_ ^
m n
 \  _Ka

>BuDT>I

@A>CBED

FGIHKJ

@LMON

 m^m]n

\ m^m \ l
_ ^l \]\

 `3
m l
 `n 

]n^
  [

Kn [ 

l]

   l] _Ka

n

vw6x2y{z ~*¢¡"zobw6£"z¤zK2y{%;"¢z¥T¦2bw"¦-§z¨-©w"ª¦«w"§V¬­-w6w6x2w"zK"ª{®oz°¯o±"±"±"±

jzo²/zo*-ªS³zozK¦#R'w6ª'ª´§oA;bµz-w6w6x2w"zKr¶j¦©-zoz¢§ow"'zKp·p¸-'zKAjzo²/zo*'w6ªª§o
¶j¦¹-zVº2¡"zO§ow"zKp·p¸-w"¦-»b-¦-*¼w"''zo}¶j¦¹;-/§ow"'zK½·p¾%¿O¦Àz§¦Á'pw6Â"¸-zOwK¡"zobw6£"z
¦-ÃxzoÄ"¡6w6bªw6x8y{zKÄª¦#¡"y{¡"zKÅª¦¹zÃ'w6ª'ª§o¢ªÄyª{£#y{ÂÀ£"zKw6'zoÆ¶j¦Å;r§ow"'zKp·p¾
ÇÉÈ "¢z}ÊË/¥%©w"ª¦2¨¶¼vCw6x2yz}Ì·p~
Í

v¢zAzK-y
ª¦-ª
§ow"zw6z¦"Cw"§¦-§oy2ª{¡"zRw6x
zRw"¡6w"¦#w6£"zKC"zrÎÏ¢ÐVÑ
x8w"'zK°­zo-°²¢ª{­zKÒezK§'}zVÏ¢ÐrÑEx2w"'zK»¦zrª¦­'zob©"
z³ezK§ª¡"zK¦zKo~Ax"

 Np
W2XÔ Y8Z
Ô Y8Z
cÕef ×Ö d
 Õ8f Ö×d

 [ m o
_ a6_ 
 [ m a  m^l
 l]n    n
 \ m _oa  \

Ó
\6_
_ l

?

P


 [
[ l

 

 n
 
p

 



 DNpJ


^

\]a

a 

 
  l  
_ [
 [ n a  m

ÓBuDTÓ
m n
_[ ]
_ Áp

@AÓBuD

FRGIH]J

@LMVN

[ l]m [  \
[^a Kn  \

 ` m^

aK["_
a  a

 `a 

\^\
n

vw6x2y{z}¬~*¢¡"zobw6£"z¤zK2y{%;"¢z}ØVw"ªy{º2¦--zo%-©w"ª¦«w"§V¬Æ-w6w6x2w"'zKr"ª{®oz©¯o±"±"±"±

[6_]_

Ù¢ÚÛ{ÜÞÝµÜ2ßÅàá2âã#ä8å

 Np
èRé PRê
 PRê
èRé PRê
 PRê
èRé PRê
 PRê
èRé PRê
 PRê

Ó"

 DNbJ

ÓCBED ÓI

 

  ]
a [^a
  a][^a

 JTNpH^BED Eæ H Á
 ç NpJ
_
\  m
_
\  m
\
\

 l  \ 
 l  _ 

 m

 \3_  a
 \3_ ]

 l
p

 [^\ Km
 [^\][ 

]
 

 m

]n

ç Jë
l  a

]n

[ l]lKm

 \

ì QH]JN
 \  _

 [

]n  
D NpB
íî ÁBN  G î T
 
\  _ n
 [

\ n]m [
#BuðJ 6
î î M
[ Á  
 m^m [][
ï

èRé PRê
 PRê

 _^_   m
 _^_ ]n a

m^
a3_

m _
 n 

èRé PRê
 PRê

T ]
 l _  _
T ]l _  _
a

m
a

m

FJ BuNpJñ
[  l
\ ]

 l 
 [3a

@AÓCBED

FRGIH]J

@LMON

   

 ` \

n ` \6_ 

 ` \

n ` \^a]\

  aK[

l [ l
l  n

 n]n3Kn

 `g_ l

m^]n a

 `\ 

 `n 
 `a l

 ]
 m
 n

[^a^a3_
[ n^m 

 `g_ 

 ` \]\
 ` 

lKm 

\  

] ^
a a 
 ] a m

 `a n
 ` \]\

 ` n
 ` m

 pÁ
  _ 

l m
_oaK[ K
a n  _ l

 ` m]m
 `m \

[  
[^[ m

] l
p^

a n 
  \ m

 `g_ l
 ` lKm

^ ` m 
½ ` lKn

 `[ l

vw6x2y{z}Ì~*¢zK-y{%j"zÃÊOË/¥%-w6w6x2w"zK

w"y£""bª{-©zKw"§bòz}w"­zÃ'yª{¦¹¦Åu²/À§ow"'zK¢;óªSô¸2õ
ö-÷øIùúªxezo''zo¢-w"¦
÷øIùú¦Åbzoz¨§ow"'zKo¸8w"¦2Å÷ø
ùûª%xzo''zo¦ò¦z¨§ow"'z"¾
ª{þzK'ÒzK§°'ÿzòzÀ§oª{zK¦-§ÂÉ"zò²*Éw"y{£""bª-©o¸%z

Íýü

¦-zKª{zo¨w"y{£""bª-

§oy{zKw6by{Â

ª{-w6ª{¦

'Òzoj"b©Oz­"-zo¨²¢ª{ÞzKÒezK§'

w"¦ÁÂ

ª©ª´©ªyw6K~
"*-z©º-¡"z

zÀ§oª{zK¦-§Â«­zKw"bzK§¦-ª-zozK
¾

¥ ¦

wÿ'zK§¦-

¢Î*Ï¢Ð

'zopª{zK°"}zôÒzobª©zK¦Áo¸Ä²/zÞw"ª

'Ò2w"§zÀ²¢zK¦

'ÿ'zK'¹z

xzK-wK¡4ª{"°"}z

zKw6b§b

ª¦

z

2'zKúª¦ú§Ãx2ª¦2w6ª{¦ú²¢ªúwò'zKw6p§bÿzKbªª§Æ²¢-ª§púªÃ­"z©Ò]²/zo¼-y

-w"¦ÆwVª­Ò2yzR£"zozKÂ}zKw6b§b
¾Av-z*zKpª'ª§*'zKy{zK§'zKÆª
	Ã¶EÐOy{]¡"zo]¸2¯/-§3w6zobo¸
¯"¬·p¸
²¢-ª´§bÅ'pª{zK¢'»zK§ow6Òz¤;

w»y{§ow"y©w3ôª¤-

xÂÅ'zKy{zK§ª¦-£»w»'yª¦Å-w6O©ª¦-ª´©w"yy{Â

zK§zKw"zKC-z¡6w"yz"-z*§"bª´¦£¢¼-¦-§ª{¦3ª°­zK-ªw6'z*zÑu'zKy{zK§ª{¦Ã"z/y{§ow"y©w3ôª¤--'
¡4ªª{'zK¹ª/Ò-zo¡"zK¦#'zK«xÂ»°w"ª¦Áw"ª´¦-ª¦£¤w­yª'/"yª{¦-/-w6w6bz;"x8ª-zK¦
¸#z'6Ñu§ow"yy{zK

!
"$#&% e¶¼w"y{-£¤;"Ò-bw"§ª§ow"yzKw"¦--z*w6x2Æyª´'''"zKj"x2ª2zK¦¨"Òzobw6'"b¦"'y-ª{¦-o¸6w"¦-
§¦-'z
' zK¦#y{Â"¸#yª{¦-R²¢-ª§p­-wK¡"zV¦"RxzozK¦­¡4ªª{'zKÆÒ-bzo¡ª{2y{ÂÃ°wKÂ­w"y'¨xzK§­z¢;"x8ª-zK¦8·p¾

z¢2wK¡"z¢ª©Ò2y{zK­zK¦#'zKÆu²/}ª©Ò2y{z¡"zopª{¦-A"ew6x2­'zKw6p§b
~)(+*!,õ
ö-÷øIù¹w"¦--(.*,÷ø
ùR¸"²¢-ª´§b
ü
zô4Ò2y{"z©-z°¢Î*Ï¢Ð
w"¦2 Ï¢Ð
'Ò2w"§zKK¸CzKÒezK§ª¡"zKy{Â"¸C-bª¦£«z°bw"­z©"Òzobw6'"bÃw"}zKª¨zÑ
'ÒzK§ª{¡"z¹£"zozKÂû¡"zobª{¦2o¾
z¤w6x2

vz»Ò2w6bw"©zo'zob­-'zKÉxÂúzK'zÅw"y£""bª{-©Æw6z¹z«y{zK¦-£"0/121¢"

yª'Vw"¦-ò-z¤¦-Ãxezo3/465 Ä
/ "ª'zobw6ª{¦-rz'-ª{zKò'»''"ÒÞzÆ'zKw6b§p

zô4Òezopª­zK¦#o¸6zK'z%¡3w"y´zK-wK¡"zÄxzozK¦¤ºô4zK¤w"jyy{^²¢o~/121798»w"¦2:/;465

Ò-4§zKo¾¢¥ ¦



/<7=8¶>83?»¯]·p¸@8¹xzKª¦£rz

¦-}xzo*"
¡3w6bª´w6x2y{zKª´¦©zO©w"ª¦I¾v-zr§"bª´¦£}¼-¦-§ª{¦Àw"¦-Àzrª¦2ª{ªw"y£"bw6Ò8°w6zVzOw"­z
w"ª¦»Ò-bzo¡ª{2*zô4Òzobª­zK¦#o¸w"Ä²/zKyyw"Äz¨§yyzK§'zK¹Òezob;"b°w"¦-§z­zKw"zKK¸²¢ª{»¦zzô§zoÒÑ
ª{¦
~Äw"rzÆ¦#-Ãxzo¢"Rª{'zopw6ª{¦-Vª¢¦^²

º-ôzKÉ¶j¥'zo!7A/465 
/ ·p¸8²/zÆ§­Ò2'zÃz¤ª'zobw6ª{¦Å²rzoz

[6_oa

B ßáCÚD-ÛFEHGJI*áLKeßÁåbÛSáHEME-ßONQPäCSR

z­xzK'O£"bw6Ò2Þ²%w"j-¦-
ª¦«vw6x2y{zK3]#¸¸H­w"¦-

åNSCQT2ÚQNSTUCßÁåOÛFEMNSD-ßÀåpãá-Úß¹äHV
WYX[Z¢ÙA\Oå

¶2/¥'zo·Oª¦-''zKw"I¾¤v-z¤bzK-y{V"/zK'z­zô4Òezopª­zK¦#Vw6bz©-ª'Ò2y´wKÂ"zK

¯o±4¾

 Nb

Ó"

P
í



^H_`W-X4Ô Y8Z
^H_` Ô Y8Z

¼^ n 
¼^] l

[^\
l 

^H_`W-X4Ô Y8Z
^H_` Ô Y8Z

 l 6
[ _o\ 
 l [6_o\ 

[^\

^H_`W-X4Ô Y8Z
^H_` Ô Y8Z

  n K
a [  
  n K
a [][ 

[ l
lKn




^






n

_ Kn
T n]n]n^n

PRQSHKJTM



n

l

\

n

[6_
n

 aK[

vw6x2y{z:]#~*zK-yÄ;"¢z¨ry´w6b

 Nb

^H_`W-X4Ô Y8Z
^H_` Ô Y8Z

 p^ n _ n
 p  _oa^a

Ó"
[ l
[6_

P
í



 a

l

m3lKm \
a l  n

 n ^
[ [  m3
 \K[ lKn]m 

 `\ 
 ` l]m

 a]\
 m 

p aK[ m]m]n

 n [6_ 
 ^]½
]

 n Á m \^\
 _]_  \K[ 

 `\ 
 `l a

[  

 K
_ \K[3\3_ n
p a l]n \ l

 n 3
\ _ 
  n  [
]

 n^]n  \ l
 _]_  _ 3
m l

 ` \^\
 `\ n

_  l

 n

[

ÓBuDTÓ

l [ 

a]\ 

-w6w6x2w"zK¢-ª´¦£­vCw6x2bazKw6b§b

 DNpJ


 n
[

 a

@LMON

 ^
[^a
_ _ m _[6_

p K

 m
K
 n \ m \
PRQSHKJTM  l]n]n^n
 _^_ m3l _ m
n
[^a



[6_

FGIHKJ

 

¼ n]n^n

n


_






@AÓCBED

 DNpJ


PRQSHKJTM

l a
[  l


 
[ l a m _ 
 l^  ]l

ÓBuDTÓI
 a  
l  [ l

@AÓBuD

FRGIH]J

@LMVN

_ l  l^l 
 ]l
_ n \ ^

 ` [][
[Á`  \

 a 
[  a

vw6x2y{zc~*¢¡"zobw6£"zÃzK-y%;"rz¥T¦2bw"¦-§z°w"ª¦Å-ª´¦£­vCw6x2da4zKw6b§b

 Nb

^H_`W-X4Ô Y8Z
^H_`Ô Y8Z

 [ m o
_ a3_ 
 [ m a n _ 

Ó"
\3_
_ n

í

P


 [

 

 n
 
½

 l

 _



l

 DNpJ

 

ÓCBED ÓI

@AÓBuD

FRGIH]J

@LMON

\3_
 \ 

m  a 3
m l] \
_ l   ] [

 m^m  a
]  a][

 ` l^] ] a6_ Ó _
 ` l]n Á \K[ KÓ _

[Á` n _
[Á` n _

 \ K
l n
 
[ l p

vw6x2y{zc~*¢¡"zobw6£"zÃzK-yÄ;"¢z¨Ørw"ª´y{º2¦-zoÄ°w"ª¦Å-ª´¦£¤vw6x2Ma4zKw6b§b
È "¤z»'Â¦#zoª§À©w"ª¦2o¸Cª¦ w"yyRzÀ§ow"'zKo¸Azô§zoÒ-Ãª¦ ¦z©"Äz»ª¦--bw"¦-§z©-w6w6x2w"zKo¸
zbzK-y{A"x2w"ª¦zK­xÂe(.*,õ
ö-÷øIùÅw"¦-Àõ
ö-÷øIùÅw6z¢z¢w"­z"¾Rv¢-ªÒ2zK¦-­zK¦¦©w"y}w6Ò-ÒzKw6b
j"­z«ÊOË/¥Ã-w6w6x2w"'zKo¸*²¢zoz¹¦-yÂ

ª¦ûu²/ú-w6w6x2w"'zK©-#zKe(+*!,õ
ö-÷øIù

ª©Ò-]¡"z¹z¹zKb-y{

"Äõ
ö-÷øIùA¾Ævzozoj"z"¸I-z©vCw6x2a4zKw6b§bú-#zK¨¦-"¨§¦Á'bªx2'z­ª{£¦-ªº2§ow"¦ÁyÂÅ'òª­Ò2]¡4ª¦£»z
£"zozKÂ©zKw6b§b»ª¦©-zr¢Î*Ï¢Ð

'Ò2w"§zÆ¶¼w6/y{zKw"*-ª´¦£zrzKy{zK§'zK°¡6w"yzK;"*z¢Ò8w6bw"­zo'zobf/g121

w"¦-h/;45 
/ ·p¾Rv-ª´*ª%ª¦»§¦#'bw"'Ä²¢ª{»zª-w6ª{¦»ª¦»zÏ¢Ð
z¤zK-y"x-w"ª¦-zKÅxÂ
Vyw6bÆÑ|6±"±"±

÷øIùA¸8²¢ª{Å-zÃzô§zoÒ-ª{¦

'Ò2w"§z"¸²rzoz(.*,÷ø
ù

ª­Ò-^¡"zK

"Au²/«ÊOË%¥-w6w6x2w"'zK­¶jz'-w"ybzK-y{p·w"¦-

¶j²¢zoz}÷øIùúÒezob;"b°%xezo''zo¢-w"¦d(+*!,÷øIùC·p¾

w"¦2i
 (.*,÷ø
ùR¸I²/z©'ªyy§¦-bªzoc
 (+*!,
ü
õ
ö-÷øIùÞ'°xezOÒ-bzo;zobw6x8y{zO'-(+*!,÷øIùÞ¦«z¨Â¦#zoª§°w"ª¦-o¸w"y{-£Åª¦¹-ª%§ow"'zj(+*!,÷øIù
ª{

zKÒezK§'«-z°§­Ò2w6bª´'¦Þxzou²/zozK¦0(+*!,õ
ö-÷øIù

Òzoj"b©%xzo''zo¢¦òz}ª¦-bbw"¦-§z¨°w"ª¦
¾ È "Vz}ÊË/¥%-w6w6x2w"'zKK¸2zÃu²/Àw"y{£""bª-©ÄÒzo'Ñ
j"b bª©ªyw6py{Â8~zKw"§p¤w"y£""bª{-ýªCxezo''zo-w"¦¤z/"zo¦Ã²*°w"ª¦-o¸6w"¦-Ãxe"¤w"y{£""bª-©

[6_ m

Ù¢ÚÛ{ÜÞÝµÜ2ßÅàá2âã#ä8å

Ó

 Np

 DNbJ

ÓBuDTÓI

 

 JTNpH^BED Eæ H Áç NpJ

@)k  R
è éC PRê
@)k   PRê

  ]
a [^a
  a][^a
\

\

a^\ m a

\

\

\^a n \

@)k  R
è éC PRê
@)k   PRê

 l  \ 
 l  \ 

 m

 m

\ ] _ l

]n

]m

[^[ lKn _

@)k  R
è éC PRê
@)k   PRê

 \3_  a
 \3_  \

 l

@)k  R
è éC PRê
@)k   PRê

 [^\ ]
 [^\  m

 [

@AÓBuD

FRGIHKJ

@LMON

 [ l
  \


 [ K
 n^m
  a 3
½
m 

 `n 
 ` a6_

 `m \
 `m a

m]n a
] _o\

m a l _o[
a m _  [

 ` ]n
 ` _

m ` \
  ` 

\  \

 _  m^n

 \]\]\ l

 ` ["_
 ` _

m `×_ n
 n `\ n

] ]
[ [
p \K[

   K
 n \
 ½ m]3
]
n l

 ` 
 ` ]m

] `  [
 l ` n

Kn^m^l]l \
 l _  a n

n  
[ 3
 [ l]l

 ]
l n \ ^
 l
 lKm _ l

[#` a 
[#` l _

a]a 
 _ ^l

FJ BuNpJñ
l 
[  ^
 a m a
a

]l 
  _

l ^l
\ ]
_ m]m 

 ` n^m
 ` m3l

 aÁ` n3l
 \Á` ]n

ç Jë

 l

ì QH]JN
 ] \ 
 ]m
 a n]m a

íî ÁBN G î DTNpB
 l

_  l \ 

 a n
 l^
]

 

l \ l _ n
#BuðJ î6î M

ï

@)k  R
è éC PRê
@)k   PRê

 _]_ n^n^
 _]_ n _ 

m^m
m^n

[ m3l
[ l]n

@)k  R
è éC PRê
@)k   PRê

T ]
 l _  _
T ]l _  _
a

a
a

\ a 
]

vw6x2y{z©¯o±4~/zK-y%;"-z}ÊOË%¥/-w6w6x8w"'zK¢-bª¦£­vCw6x8MazKw6b§p

Òzoj"b

z'-w"yyÂ­¦À-zrzK°w"ª¦-ª¦£Ãu²/­©w"ª¦-K¾<(+*,'õ
ö2÷ø
ù

(+*!,÷øIù

²rª{¹zK'ÒzK§Ä'©b2¦-¦-ª¦£¤ª­z"¾

ª´*'©zo²¢-w6Ä­"zVz°§oª{zK¦#%-w"¦

z«-w]¡"zÅ§ow6bª{zKûÆwò-ªb 'zopª{zK¤"zôÒzobª´­zK¦ÁÃ' §­Ò2w6z»­y{zKw6b¦2ª¦£òw"y{£""pª{-
ü
x2w"'zKÅ¦ò¢Î*Ï¢ÐOr²¢ª{«"-zorw"y{£""bª-©Äj"¢y{zKw6b¦2ª¦£
%wKÂ"zKªw"¦ ¦zo²*"4o¾/¥T¦Å-ª§ow"'z"¸8z
§­Ò2w6pª'¦òª´Ä¦-y{Â«ª¦#'zK¦-zK«'»­zKw"bz¨z:'-w"yªuÂ¹"zÃy{zKw6p¦zKÅ¦zo²*"e¾Ä¥ ¦òw"--ªª{¦¹'
zÏ¢ÐVÑEx2w"'zK»y{§ow"yw"¦2Æw6x2­'zKw6b§p­Ò-zo¡4ª{-yÂ}§¦-ª-zozK
¸"²/z-wK¡"z¢w"y´'¨-'zKÆz%jyy{^²¢ª¦£
w"y{£""bª-©o~
ö l
H
¶ aÒ2ª{'zK°zoÀw"y¾{¸¨
¯ "|·p¸Vw"¦ w"y£""bª{-
x2w"'zK ¦ ª¦--zoÒezK¦2zK¦-§z¹'zK'o¾
zÞ-'zK w"¦
ü
ª´¦-zoÒzK¦-zK¦-§z%'zK'x2w"'zK­¦°z­zKw"bz"e§¦2-ª{ª{¦-w"y¤-w"y2ª¦j"b©w6ª{¦Å¶2m¨2yy{x2w"§8¸
Ç

¯"Ì·p¸e²¢ª{«w©ºôzKò§¦º2zK¦-§z¨yzo¡"zKy
z'#2w"y
'°±4¾n¾
v¢z:mcoÀ'zKw6b§p
Ç

©zoÉ¶EË/"Òzoqp

Ø¢zop;"]¡4ª{o¸A¯o·p¸Iª¦

§}x2ª´¦-w6ª{¦

²¢ª{Å-z:%ÏVzK

b§"bª¦£Àj-¦2§ª{¦û¶sr)t·p¾Aur"'z¤-w6qr)t«¦zozK-Vw"¦ò"b-zobª¦£©"z}¡6w6bªw6x2yzK¢w"VzÆª¦Ò2o¾
z¤-'zK«w"¦ò"bzobª¦-£Æ§¦2ª''zK¦#Ä²¢ª{«-z'"Òey"£"Â»"z}§"bzK'Ò¦--ª¦-£¤¦zo²*"o¾
ü
Ç

V¦"zoCw"y{£""bª{-Å¸vwuÉÎC^²*zoAË/¦-''p-§'"*¶sxyIöl·p¸^2w6I-'zKIª¦2zoÒzK¦-zK¦-§z'zK'*¶EËÄzK¦£
zorw"y¾{¸¯O]QËÄzK¦£¸U/zKyyzp|{Cª
¸
¯·p¾

vzru²/­ª¦-zoÒzK¦-zK¦2§zÑEx2w"'zK©w"y{£""pª{-©o¸4öl»w"¦-}xHyöl¸Á"Òzobw6'zV¦À-zr'Ò2w"§zV"Iz'-ª{¡6w"y{zK¦-§z
§oyw"zKo¸²¢zobzKw"~r<t¨zô4Ò2y{"bzKAz'Ò2w"§z¢"eÏ¢Ð²¢2ª§b­w6z§©Ò2w6ª{x2y{zÄ²rª{Æw£ª{¡"zK¦­"b-zobª¦£¾
zÄ-wK¡"zÄª¦2§oy-zK-z*w"y{£""bª-r)tª¦¨z%§­Ò2w6pª'¦
¸6-ª¦-£rwV§"zK§"bzobª¦-£rw"¦-Ãz%w"­z
ü

§"bª´¦£©¼-¦-§ª{¦
°©zo

§ow"¦

w"¢z¤¢Î*Ï¢Ð
'Òzoj"b

w"¦-òÏ¢¢ÐrÑEx2w"'zK

-zÅzK-y­"x-w"ª¦zK

[^a n

'zKw6p§bÞ­zo4-o¸eª¦Å"b-zo¢'»'zK'r²rzozo
²¢ª{

wú©"zòª¦j"b­zK

w"y£""bª{-«¾

vz

B ßáCÚD-ÛFEHGJI*áLKeßÁåbÛSáHEME-ßONQPäCSR

zK2y{j"}z°w"y£""bª{-©Ãölûw"¦-r)t

åNSCQT2ÚQNSTUCßÁåOÛFEMNSD-ßÀåpãá-Úß¹äHV
WYX[Z¢ÙA\Oå

-wK¡"z»xzozK¦

"x-w"ª¦-zKú-ª¦-£«¨]²r¦

ª­Ò8y{zK­zK¦#w6ª{¦-

¶j²¢-ª´§bÞw6zÆw"y'«ª¦-§oy2zKòª¦ zjy{¡4ª{bwÀ'"ju²%w6z^·p¾ È "cxyIöl¸²/zÆ2'zKò-zÆ";²/w6z­Ò8w"§6w6£"z
wK¡6w"ªyw6x8y{z¨w6wSQY;LQYsH@OU)U@Sv@UL+Lw I¾
v-z'zK'©w"ª¦2ª¦-§oy´-zK¨ª¦}zK'z/zôÒzobª´­zK¦ÁCw6z%ryw6p«¸^¥ ¦--bw"¦-§z"¸6w"¦-ÃØVw"ªy{º8¦-zoK¾I¥ ¦
w"--ªª{¦}'-zw%ÏVzK­¡6w"yzKo¸"-z%¦-Ãxzo"8zK£"zKAª¦¤zÄy{zKw6b¦-zK¤¦-zou²/"w"¦-¤zØrw"°©ª¦£
-ªw"¦-§zKo¸²/z}-wK¡"z¤§yy{zK§'zK«²*»w"--ª{ª¦-w"yeÒezob;"b°w"¦-§z¨­zKw"bzKo~

j@$

vzÆ¡6w"yz¤"*z
/¥Ë

¶2/w]Â"zKªw"¦

¥T¦j"b©w6ª¦

Ë%bª{'zobª{¦e·§"pª¦£»j-¦2§ª{¦

¶ 4
a §b#²/w6b®"¸

¯O]L·¢j"r-zÃy{zKw6b¦-zKÅ¦zou²/"e¾¢v-ª´Ä¡3w"y´z}­zKw"-zK¢-z:'-w"yª{Â»"A-zÃ¦zo²*"Å2ª¦£
y´ªF"zKyª4«w"¦-Åw©ÒzK¦-w"yuÂ¹'zob«¾wu¢"'z¤-w6A*¥Ë

°w3ô4ª¤-

ª´w"y'»§"zÑEz'-ª{¡6w"y{zK¦ÁVw"¦-

-zK§­Òw6x2y{z"¾

d 3$

vz~m}-yy{x2w"§ÁÑ¡{zKª{x2y{zoI2ª'w"¦-§zO¶¼§ ÑEzK¦#'"ÒÂ·*¶2m¨-yyx2w"§e¸¯"Ì·xzou²/zozK¦ÃzÒ-b"x2w6x2ªySÑ
ªuÂÅ-ª'bª{x2ª¦
¸¢©¸8w"'4§oªw6'zKò'°z¤-w6w6x2w"'z¹¶jz}zK­Ò8ª{bª§ow"yjz'zK¦-§Â«-ª''pª{x2ª{¦e·
w"¦2Þz­Ò-"x2w6x8ªyª{ÂÅ-ª''bªx2ª{¦Åw"b'§oª´w6'zK
2ª°­zKw"bz
¼w"§O§ow"y§o-yw6'zK

'«z©y{zKw6b¦-zK

¦-zou²/"8¸£¢£¤*¾ju¢"ª´§z­-w6

ª´°w"§-w"yyÂÿ-z

w"­zÞw"Àz y{"£ûÒ-"x2w6x8ªyª{Â "z -w6w4¾
zÞ-wK¡"zÞª¦
ü
w°zK§bzKw"ª¦£»­¦"'¦-ª§Ãyª¦zKw6¢'bw"¦-'j"b©w6ª{¦ò"Az:m}-yy{x2w"§ÁÑ¡{zKª{x2y{zo

2ª'w"¦-§z"¸xzK§ow"-'zO-ª´*¦-z¨-w"%zôÒ¦zK¦#ªw"y§­Ò2yzô4ª{ÂÀw"¦-¹-zV'pw"¦-'j"b©w6ª{¦«§ow"¦«xz
¡"zoÂÞz°§oªzK¦Áy{Âe~O¥w¢¤

§©Ò2'zK

¦-zou²/"0¥¤¸zK¦úz-m¦{

ª´Ozq'ª¦ÁOÒ-b"x2w6x2ªyªuÂò-ª´''bª{x2-ª{¦òw"§oªw6'zK

2ª'w"¦-§z°§ow"¦

'òw

xz­²bª{''zK¦ûª¦Þz°jyy{^²¢ª¦£¹²%wKÂþ¶¼z«Ë%w"­Òo¸

¯.{w"§p|%w"§o§b-o¸C¯3 #·p~

¨J© ¶2¢Yª¢¤R·)7«?­¬®/¶°¯Ã·+±|²

Á Â ®Ä¶>¶zª¢¦Ä¤Ä¶>¶·'·
Ã
²
®+¸º¹H»
³L´!µ£·
³6¼¾¿.
½ À

¬e®%¶>¶·<?

³L´!µ

²rzozY¬e®Ä¶ O
Å ·zK¦"'zKfa42w"¦-¦¦¤zK¦Á'b"Ò#Â¤²¢ª{ÆzKÒezK§'¨-z-ª''bªx2ª{¦:¢
zo"
¡6w6bªw6x2y{zK[Å
-z°u²/

w"¦-

¶¬·

;"R-zxÑ

ÁÃÂ ®Ä¶>¶zª¢¦Ä¤Ä¶>¶·'·RªRzV­zKw"bz"IÃ--w"y-ª¦j"b©w6ª¦­xzou²/zozK¦

zo}"%¡6w6bªw6x2y{zK
Æ¶Ç»w"¦2i¢¦Ä¤/¶>¶
·p¾«r}z°º-p'u²/ò'zob°}"%z©zô4Ò-zKbª{¦

w6x^¡"z}©¦"zoÒzK¦-»¦«-z£"bw6Ò2d¥¤¸--Ä'bw"¦-'j"b©w6ª{¦«§¦2ª'Äª¦«§ow"y´§o-yw6ª¦£Æ¦-yÂ
ª¦ûz#
' 2w6ª{¦ ¶¬·p¾
a ¸z¹ª¦#'zoÒ-zow6ª¦ "-Ã'bw"¦2';"p©w6ª{¦û"z
m}-yy{x2w"§ÁÑ¡{zKª{x2y{zor-ª'w"¦-§z¤ªo~%zÆ-ª{£zoV-ª¢¡3w"y´zÃªK¸8zÃxzo''zoV-z¤¦zo²*"Åº-Vz
2w6w4¾VØr]²/zo¡"zoK¸
-ªV­zKw"-zÃ--yÅxz¤-w"¦--y{zKÅ²¢ª{ò§ow"-ª{¦
¸
ª¦-§zÃwÀ-ª£dm¦ÿ
{ ¡6w"yz
°wKÂÞw"y'«ª¦--ª´§ow6'zÃ^¡"zoº-'ª¦£ ¶¼w«¦-zou²/"ò
 ²¢ª °w"¦ÁÂ zK£"zK²¢ªy´yIÒ-"x8w6x2y{Âò-w]¡"z©w¹-ª{£
mcú
{ ¡6w"yz^·p¾

-zÀ-ªbú'zob

Vy{£ûj"Ãz»w"y{£""pª{-©}²¢'zÀ£"w"y/ª´¨'
zKw"yyÂ

zÀ­zo'bª§Æ-w6¤-y´Þxez©2'zK

m¦{þxezK§ow"2'z°²*

"Ò-ª©ª{®ozÀz-%w]Â"zKªw"¦

§"z"¸)%ÏVzKÉª

'òzo¡6w"y-w6'z°zK«¸²*z°2wK¡"zÀw"y´'ò§­Ò2-'zK/¥'Ë

"/-z°w"y{£""bª{2©¨§¦-ª´zozKú-z°ª¦-zoÒzK¦--zK¦-§zÆ'zK'Ãª´¦-''zKw"

w"¦-

"ÄwÅ§"pª¦£

¼-¦-§ª{¦
¾
v-z»bzK-y{¤"VzK'z«zô4Òezopª­zK¦#­w6zÅ-ª'Ò8ywKÂ"zKÉª¦Évw6x2y{z
Òzoj"b©w"¦-§z°©zKw"z°w"¦2úzKw"§bÉ-w6w6x8w"'zÀª¨²bª{''zK¦ûª¦

¯"¯6¾

vz¹xzK'Æ¡3w"y-z»j"©zKw"§p

xy
¸w"¦2úz»'zK§¦-úxzK'}¡3w"y-z°ª¦

ª{w"yª´§oo¾v¢zK'zzKb-y{ª´¦--ª§ow6'zÄ-w6**zKw6b§b»­zo4°ª¦°z¢rÎÏ¢Ð

'Ò2w"§z"¸4ª¦À§}x2ª´¦-w6ª{¦

²¢ª{òzj/ÏVzKÞ§"bª´¦£°¼-¦-§ª{¦I¸2ªV§­Òzoª{ª{¡"z}²rª{ÅzKÒezK§V'»"zow"y{£""bª{-°o~*¦2y{Â«z

(+*!,÷øIù«w"y{£""pª{-«¸"²¢2ª§bÆ-'zKAw©"zÄÒ]²/zoj2y¶¼w"¦2­­"z§­Ò2-w6ª{¦-w"yy{ÂÃª¦Á'zK¦2ª{¡"z^·C'zKw6b§p
zKpª'ª§ª¦}zÏ¢Ð 'Ò2w"§z"¸"w"¦-I¸^'Vw¢y{zKzozô4'zK¦Áo¸"z*­"z*ª´¦;"p­zKcr)r
t w"y{£""bª{2«¸]Òzoj"b
xzo''zor2w"¦ õ
ö-÷øIùûª¦Å'©zÃ§ow"'zKo¾r¿Ox2'zo¡"z¨2w6¢x"M(+*!
, ÷øIùûw"¦-Mr)°
t Òzoj"b xzo''zor-w"¦
õ
ö-÷øIù ª¦¹'zob©Ä"m¦{ ¦«;-¢§ow"'zKjº2¡"z"¾
[^a 

Ù¢ÚÛ{ÜÞÝµÜ2ßÅàá2âã#ä8å

 Np

ÈYÉ

 æ
PRQSHKJTM

èRé PRê
 PRê
P ê
Ù k  R
é æ
 F é æ
È 

Ê;ËQËÌLÍÌ
Ö Ò6Ò@×6Ó6Ï
]Á] l
 \  [^\

] [ ]
 
]Á  _

ÊËËQÎËÍ
Ö ÒvÒ6ÏvÒ6Ï

ÏvÐ$Ñ@ÒvÓvÔ6Ô

m `  3
n  \
m `   n [6_

¼^ m \ 
¼ \]\ m 
¼ l  m _
¼ [  l 

aÁ` n K
\ ["_ l
m ` ^ m  n

ÎÚ Õ ËÌLÛQÜ

PRQSHKJTM
èRé PRê
 PRê
P ê
Ù k  R
é æ
 F é æ
È 

ÊÝOÜSÞßÌ

 l [ m^l \

Ö¡Ôà Ø!á Ñ

 \  [ m \
 l]l ]]
 l [3a n _

m ` ^l _ n 
m ` ^l \  

 l^l a 

Ö¡ÔvÔ6ÔàQÓ

ÏvÐ$ÑLÔ Ø Ò á

 \  a ]
 
 l^l a n [
 l^lKm a l

 F é æ
È 

P ê
èRé R
 PRê
P ê
Ù k  R
é æ
 F é æ
È 

P ê
èRé R
 PRê
P ê
Ù k  R
é æ
 F é æ
È 

ÊâÌÍQÛQÜË Õ

  n a^a]\^a

_"` a l [  l
m `  \3_Ka3_

ÎÚ Õ ÝQÎÜÍ

Ö¡×vÓãâà6àOÑ

 ] K
_ \]\ 
  n]m  \][
  n a l ½
 p] n _ 
 p] Kn3l

Ö¡×6ÒÑ Ø ã6ã

 p m  n 
 p ["_  \

ÊºÌLÍÎUÌßÝ

T^ n^l  _

T½ ]
m l
[ [ ^
T½ lKn  _

Ö¡×Òâà6à×à

ÊgÜÎÞQÛÞ Õ

 l ]½ a
 l  \ n a

 lKm  K
l n _
 lKn  [][ n
 [ m a  [ m

ÏvÐ$Ñ Ø ÔàÏ

ä J H Áç N
l n^
aÁ`  a ]
aÁ`  m _ m]n

ãvÐ à×à áLØ

T [    [
T½ l a  

ÊºÌLËQÜÍÎÝ

ÖçàQÏ6ã@Ó Ø Ò

m `  _[  m
aÁ` Á _ n [
m `  a]a^aK[

T^ _ m  [
T n]m a  _
T n]m \][6_

ÊâÌË Õ ßUÌOÝ

 [ m a  m3l

  n^n]n^n
m `  _  m^

ÎÚ Õ ÞQÛQÍÎ

Ö¡×6Ó6Ïv×6ã6ã

l l 
_"`×_ ]
_ [
aÁ`   \ n \

 l a]a]\  a

ÊÝÍÝSÌßÍ

 l p _ 







Õ

[^\
[6_

l 

 n

[^\

Õ

[^\
l [

[ 
[

 n ` l  a ]
]

 a

\3_

[

 n
_

n
[
a

 n

l



]n
 a



m

n

 

 n
 
½


]

½

 \

^

l

n



 
 _
 

l

 l
 
^

 

Õ Ë


n



 n
[

 \

\K[

l
n

m


 

lKn

n




×ã

[ m

n



l

]l

_ n




n

×ã

[ l
 l

n

[

_

[ l
[ m

Ñâà

n
[

n

Ñ

\3_
_ l

\



\
 
]

]n ` l  \K[
]n ` [^a l]n 

n

 n


Ì

ÌLÍ

Õ ÍÚ$ßÌOÝÛÌ

n




p

[][

  ` \ lKm a 




n

[



n



Ò

[^\

 _

l


Ò

[ 

[6_
]



m

[6_

 a





 \

lKn




m

Õ

 \

ÛÚåÜ Õ ÜÞUÌ

ÑLÓ6ÐFÔ6Ï6Ò Ø Ñ

n

n


_

Ø

[6_
 a

[ l
l]





Ø

]

 _
[ 

í HKLQnæ  "NbJ

Ö¡Ô6× á ×vÓ6Ó

P
í

 l]n]n]n

Ê;ÝÝQÝQËÞ

PRQSHKJTM
P ê
èRé R
 PRê
P ê
Ù k  R
é æ

Ó"

¼ n]n]n




n

vw6x2y{z©¯"¯6~Îzoj"b©w"¦-§zÃ­zKw"zK¢;"r-ªS³zozK¦ÁyzKw6b¦-ª¦£Æw"y{£""bª-©

v-z©;-

'zopª{zK¨"Äzô4Òzobª­zK¦#¨w6''zK­Ò-¤'

bª{2©¢¦Þw¹-w6w"'zo²r-ª§b
"bzoÆ'

ªV-ªS³zozK¦#rj

zo¡3w"y2w6'zÀzÀxzK-wK¡4ª{"¨"Äz»w"­z»w"y{£"6Ñ

zÆ'bw"ª¦-ª´¦£À'zo-zKò'Åy{zKw6p¦òz­¦zo²*"8¾¨¥ ¦

Þ'¸R²/z»2wK¡"zÅ§­Ò2-'zKû-zh%ÏVzK
¸f/¥ËV¸w"¦-m¦{

¡3w"y-zKÃ"¢z«¦zou²/"û'b-§½Ñ

z¨yzKw6b¦zK«-ª´¦£­w©-w6w6x2w"'z"¸2²¢ª{¹zK'ÒzK§Ä'°w°-ªS³zozK¦ÁÄ-w6w6x8w"'z"~j"z¨Vyw6b

-©w"ª¦
¸

z¤'bw"ª¦-ª´¦£©'zoOª¢-z¤Vyw6bÆÑ|6±"±"±»-w6w6x2w"zÆ2'zKÅÒ-bzo¡ª{2y{Â"¸8w"¦2òzÃ'zK''zoOªj"b­zK
zÆ|6±"±"±À¦zô4r§ow"zKrª¦òzÃVyw6bó-w6w6x2w"'zj"¢x"Å¥ ¦-pw"¦-§z}w"¦-
¦zÃ"Rz}º2¡"zÃ-w6w6x2w"zKr2w6r²/zÃ-w]¡"zÃxzozK¦
-w6w6x2w"zK¤w"Ãz©'zK¤'zoo¾

x#Â

Ørw"ªyº2¦-zoK¸4²/zÃ'zKyzK§'zK

-ª¦-£©w"¢z¤'bw"ª¦2ª¦£©'zoOw"¦-òw"¦-"zor"A-zK'z

vz©zKb-y{¨w6z»^²¢¦ûª´¦úvCw6x8y{zò¯o¾
[^a 

ü

z¹§ow"¦

"x8'zo¡"z°2w6ÃzoÂ

B ßáCÚD-ÛFEHGJI*áLKeßÁåbÛSáHEME-ßONQPäCSR

åNSCQT2ÚQNSTUCßÁåOÛFEMNSD-ßÀåpãá-Úß¹äHV
WYX[Z¢ÙA\Oå

w6z}w"¦2w"y{"£"-'Àz¨zKb-y{Ä"x-w"ª´¦zKÅª¦«vw6x2y{z°¯"¯6¸8²¢zoz-z}w"­z}2w6w6x2w"'zKr²*zozÃ-'zK«j"
'bw"ª¦2ª¦£Àw"¦2Þ'zK'ª¦£¾¤Ø¢^²*zo¡"zoK¸ª¦

-ªO§ow"'z°õ
ö2÷ø
ù

w"y'¹Òzo;"p©Vxezo''zo2w"¦i(.*,÷ø
ù

r)tÀª¦«'zob°"<m¦{R¾8vzozoj"z"¸-zÃ£"#4«xzK-w]¡ª{"r"rw"y{£""pª{-

w"¦-

§ow"¦-¦-"xz}w6''bª{x2-'zK«'

]¡"zobº-'ª¦£¾

PRQSHKJTM
èé PRê
 PRê
P ê
Ù k  R
é æ
 F é æ
È 

P ê
èé R
 PRê
P ê
Ù k  R
é æ
 F é æ
È 

P ê
èé R
R
P
ê

P ê
Ù k  R
é æ
 F é æ
È 

ÈYÉ

 æ

 Nb

¼ n]n]n

ÊË Õ Î Õ Í
Ö ÒÑvÏvÒ6ã

Ê;ËQËÞÝÍ
Ö ÒvÒ Ø!á Ï

ÏvÐ°ÒvÔ6ã6ÒvÏ

 Km3l 

 [  \ l

ÎÚ$ËßUÌßQÛ

ä J H Áç N
T½ K
 p ]
 m _ l
[ [6_ 
T½] n^n [
 p [ m^l^

ÛÚåÜÜÛÎUÌ
ãvÐ à6à Ø àÔ

 K
 m 6
[ _
 \  ]
a \
]] n]m

m ` l ^
[ a^a
m ` l ^
[ \ l
aÁ`  l]] _

] _ m 
 \^\  
 l]n^l 

ÊºÌLË Õ ÛUÌÍ

ÊâÌËÜ Õ ÛUÌ

Ö¡×6ÒÑvã6Ñ á

Ö¡×ÒàQÒvÓ6Ï

T [ n  a]\
T½ lKn3Km

m `   l _K\

aÁ` [^[ l  a
_"`×_ n  a 
aÁ`   n \ 

  [  n ^
 
 p \  ^l

aÁ` [^[^\3_ 

í HKLQnæ  "NbJ
 l Á] \ l
ÊÜÎÞQÛQßÎ
 [ m a l a l
 l Á m ½

ÖçàQÏ Ø Ïvã6Ò

ÑLÓ6ÐFÔã6Ñ áØ
Kn ` [ m _  n
Kn ` l^l [ ]
 n
  ` \^a ]l \

Ê;ÝQÍÝÝQÎ Õ

 l 3
a _  n^
 l]n \]\^a n
 [ m a ^ a

 l a][ m  m

Õ ÍÚ°ÞUÌLÍßQÎ

Ö¡Ô6Óãâà á Ñ

 l Áp l \

Kn ` l _oa3_K\

vw6x2y{z©¯o~*Îzoj"b©w"¦2§z}­zKw"bzKÄ;"¢z}y{zKw6b¦2ª¦£Æw"y{£""bª{-°-ª¦-£¤w©2ªS³ezobzK¦ÁÄ'zK'r'zo
'ò§­Ò2w6bz­
È ª¦-w"y´y{Â"¸
²*zÀ-wK¡"z°§ow6bbª{zK ¨w"¦-"zoÃ'zopª{zKO"%zôÒzobª©zK¦Áo¸
²r-ª§b w"ª´
õ
ö-÷øIù w"y£""bª{-
²¢ª{ z©w"y£""bª{-
Ò-"Ò'zK xÂ ËÄ-ª§"zopª¦£ ¶so6±"±Oo·p¸C-w6¨zKw6b§bzKÃª¦ z
Ë%Î*Ï¢Ð
¶j²¢-ª´§b

'Ò8w"§z"¾ÿ¥ ¦É-ª­§ow"z"¸*²/zÅ-wK¡"z
²/zoz

u²/û"z

'zKy{zK§'zK

¼-¦-§ª{¦ò²¢ª{

î

ËÄ-ª§"zopª¦£#·p¾

-w6w"'zo¹-'zKþx#Â

Òzobª­zK¦#w"yA§¦--ªª{¦-O'Åz©zK§bª{xzK

-z¹Ør-'zÑ A
è "'zK»w"¦-êé

ª¦

¥T¦þ"bzo»'ûw6Ò-Ò2Kôª©w6'z

ËÄ-ª§"zopª¦£SëgO²/"8¸C²*z©2'zK

w°Ò-pª{"¢z'-ª{¡6w"y{zK¦#rw"­Ò8y{zÃª®ozÃ"A'zK¦
¸
w"¦-

--#
ze%ÏVzK

°zôÑ
§"pª¦£

w»''b-§bzÃÒ-pª{"¢"±ìg±"±¯í-¸8²rzoz

ª}-z¹¦-ÃxzoÃ"jzoz¹Ò2w6bw"©zo'zob­ª¦ûz»Ï¢¢Ðï­"zo^¡"zoK¸²/z«-'zKûº-¡"z¹bw"¦-

"-z¤"pª{£ª¦-w"y-w6w6x2w"'zKK¸
zKw"§bú§¦#w"ª¦-ª¦-£»w6Ò-Ò2Kôª©w6'zKy{Âð]3±ñ
j"VØr-'zÑ A
è "'zKw"¦-

°w"ª¦-

-x2'zo

"zÆ'"w"yA-w6wú¶|6±6 Å§ow"zK

¬"Ì"ÌÀ;"éò2À·p¾vw6x2y{z°¯K|À-ª'Ò8ywKÂ4Äz¤wK¡"zobw6£"z­¡6w"yzKrw"§Vz

º-¡"z°2w6w"'zo¨"%z­zKy´w6ª{¡"z°ª­Ò2]¡"zK­zK¦#"%z­Òzo'Ñu§ow"'z°b§"z©"x-w"ª¦-zK
Òzo'Ñu§ow"'z­§"z­"%÷øIùA¸
w"O²/zKyyw"OzÆbw6ª{¹"zÆª©z¤'ÒzK¦#Ox#Â

÷øIù

x#Â

õ
ö-÷øIù

'Åz

'»-z¤ª´­z­'ÒzK¦ÁVx#Â

õ
ö-÷øIùR¾
z¤w"y'°-]²
ª¦Åvw6x2y{z©¯K|°z}§"zKÒe¦2-ª¦£Æ¡6w"yzK"x2w"ª¦zKÅxÂòË%-ª§"zobª¦£ò¶¼2ª¦£
ü
¦-y{ÂÀ¦z}-w6w"zop·%j"z}§­Ò8w6bª'¦¹xzou²/zozK¦ò2ªòleö-÷øIùúw"y{£""pª{-w"¦-ò÷øIùR¾
z©w]Â}"x2zo¡"z%-w6z*xzK-w]¡ª""õ
ö-÷øIù»w"¦-eleö-÷øIù¹ª'­zo²¢-w6A-ª{³ezozK¦#o~Cw"y£
ü
x"úw"y{£""bª-©w6z©­"bz©z°§oª{zK¦#-w"¦ ÷øIùR¸Cª{¨'zozK°'ò-2w6:l8ö2÷ø
ù b-¦2Ojw"''zo}-w"¦
õ
ö-÷øIùR¾
ü

ª{ÉbzK'ÒzK§Ã'

z³zK§ª{¡"zK¦zKK¸x"

õ
ö-÷øIù
[^a 

w"¦-êleö-÷øIù

"x-w"ª¦ÿzôw"§y{Âÿz«w"­z

Ù¢ÚÛ{ÜÞÝµÜ2ßÅàá2âã#ä8å

èé PRêþ]NpJ
è NbQSHóL]N

N ó
 HóTH ä 
ä N  G î óTN

 MqôJ î  `

ä

íî 
ï

ä ðJ î6î M



æ éC PRê

ä  
ä  PRê
Ù LMVN
è Hó L î
 `n [ 
 ` n]n3l

n ` n]n^n]n
n `n  l a

 MAôÁJ î  `

ä 
ä  PRê
Ù LMON
ó Lî
è HT

n ` n]n^n]n
 n `n  a 

 `a 

^NbJ

è NbQSHóL]N

 ` _

vw6x2y{z©¯K|~ÄË/­Ò2w6bª´'¦¹²¢ª{òË%2ª§"zobª´¦£Sëg%²*"»¦ò§­Ò2y{zo'zKÅÎ*Ï¢ÐO

'y-ª{¦

w"¹÷ø
ùýª´¦

"zoÆ©w"ª¦I¸õ
ö-÷øIù
Òzoj"b©Ä²/"b'zÃ-w"¦

Ør-'zÑ A
è "'zK«-©w"ª¦

z

'Òzo;"p©}÷øIùý¶j¦
÷øIùR¾%¥T¦

¶¼¦-

ª­Ò2]¡"zK­zK¦#p·âO]²/zo¡"zoK¸¢ª¦þz

zKyw6ª¡"z

zÀº-¡"z°-w6w"zo¤§¦2ªzozKe·V²¢zozKw"jleö-÷øIù

w"¦ÁÂÅ§ow"'z"¸z¤-ªS³zozK¦-§zKrw6zÃ°w"yy¶jzoÂÅ§-y´Åxz}w©bzK-y{"

-ªS³zozK¦-§zKª´¦Þz­zôÒzobª´­zK¦Áw"yAzoÒe·Vw"¦-úw«¤-§pú­"z©'Â4''zK©w6ª´§­zôÒzobª´­zK¦Áw6ª¦Þ²¢ª{
zK'zÀw"y{£""bª{-°O²*-y´Þxez©¦-zK§zKw6ÂÞª¦Þ"bzo}'ÅzK'w6x2yª´Þ£"zK¦zobw"yR§¦2§oy-ª{¦2w6xe-zKª{
§­Ò2w6pw6ª{¡"z¨xzK-wK¡4ª{"K¾

õ÷öhø-ù÷ú~ûSü¡ýfþ~ÿ¾ú	

zÞ-wK¡"z
ü

zo¡"zKy{"ÒzKþwû¦zo²

y{4§ow"y'zKw6p§b

%wKÂ"zKªw"¦û¦zou²/"

y{zKw6b¦2ª¦£

ª¤-w6­ª{ÆzK­¦"­'zKw6b§b
zK''pª§'zK

w"y{£""bª{-Å¸/²rª{-ª¦ÿz

''b2§zKj
ª´¦

§"zv±O'zKw6p§b

-w6w6x8w"'zKo¾°v-z©©w"ª¦ÞjzKw6z©"/}w"y{£""pª{-

z«'Ò8w"§z»"VÏ¢ÐOo¸/x2Æ-'zKÆwÞ¦zo²j"b

ÎÏ¢¢ÐOo¸%-w6°w"yy]²¢©2Æ'

w6Ò-Ò-w"§pþj"

'zKw6b§p

z°§oª{zK¦#y{ÂÉª¦
w

'Ò2w"§z

"¢zoÒ2zK'zK¦#w6ª{¦
¸

ª©ªy´w6¤'

zÅ'Ò2w"§zÅ"

z'-ª{¡6w"y{zK¦-§z­§oyw"'zK¨"/Ï¢Ðo¾
¼-¦-§ª{¦
'Ò2w"§z
w"¦#Â

§ow"¦

È "¨z©§°­¦úª{2w6ª{¦ ª¦ ²¢-ª§pÞw«zK§­Òw6x2y{z­§"pª¦£
ª¢-zK
¸2zÆ'zoV"A"Òzobw6'"bV-w6r-zoº2¦z}-zÃ¦zKª{£#x"bò''b-§bz}"RV'zKw6b§p
xz«§"zKþy§ow"yyÂ

¦zKª{£#xe"pª¦£

²/z©©w"ª¦#w"ª¦

zK''pª§'zK

¶¼w"°ª©-w6Ò-ÒzK¦-­ª¦ÉzÅÒ2w"§zÅ"Ï¢ÐOp·p¸ªE¾×z"¾
Î*Ï¢Ð

x#Â

z©§­Ò2w6ª¦-w"yz°§oª{zK¦-§Â

ª­z"¸A²/z»zôÒ2y"z»w

²*z

§©Ò2ª¦£ûw6»­À²*Éy{4§ow"y¢§"zKK¾

­"z»zK-2§zKû'zKw6p§b

§ow"¦

zo¡3w"y´-w6'z

¥T¦þ-ª°²/w]Â"¸

-w6¨z­'Ò8w"§z­"/Ï¢Ð¨6³zob¨w"¦-
¸Iw6-z©w"­z
'Ò2w"§z"¸A²rª{ûw

­"zo­yw"¦-2§ow6Òz"¸²r-ª§bÿwK¡"ª´-

'­zVzKw6by{Â­zK§oª´ª{¦-¦°zK£"zO-ª{bzK§ª{¦-o¾vzK'zV§b-w6pw"§'zobª'ª§o%©w]Â°zKy{Ò°'¤-ªzK§zV'zKw6b§p
Ò-4§zKÄ'^²/w6p-xzo''zor¦-zou²/"«''b-§bzKo¾
v-zzôÒzobª©zK¦Áw"yzKb-y{%^²

-w6zKw6b§b

z°§oª{zK¦#y{Â¹w"¦-«w"§o§obw6'zKyÂ»bzK§]¡"zoO§­Ò2y{zô

­zo4«x2w"'zK¹¦«bzK''bª§'zKÅÎ*Ï¢ÐOV§ow"¦

%wKÂ"zKªw"¦

¦zou²/"«''b2§zK%j

-w6w4¸2w"¦2Å§ow"¦

§­Òzo'z%²¢ª{¤'zo¡"zobw"y4'w6'zÄ"--z%w6b£%wKÂ"zKbªw"¦©¦zo²*"¤y{zKw6b¦-ª´¦£¢w"y{£""bª-©o¸"w"y{-£¤ªCzK
¦"ª{£¦2ª{º2§ow"¦#y{ÂÅª­Ò-b]¡"z¤zK«¾Ã¿OOzô4Òzobª­zK¦#rª´¦JazK§ª¦úÌ¸Iw"O²*zKyyw"O'z­§¦-2-§'zK
xÂ­Ë%2ª§"zobª´¦£©¶so6±"±Oo·p¸4zozKµ'¨Òª¦#-A-w6'zKw6b§p°w"y{£""pª{-©x2w"zKÆ¦©ÎÏ¢Ð*§ow"¦­"x2w"ª¦
yª£Áy{Â}xezo''zoAbzK-y{o¸6²¢ªÃbzK'ÒzK§'x"Æz³zK§ª{¡"zK¦zKw"¦-Æz°§oª{zK¦-§Â"¸Á-w"¦­'zKw6b§p©­zo4-
x2w"'zK

¦òÏ¢¢ÐOo¸
zK'ÒzK§oªw"yyÂÀj"r-ª£-y{Â¹''b-§bzKò­4zKy¤¶¼ª¾×z"¾{¸e©zKy´Ä-w6O§ow"¦òxzÀ¶¼w"y©'p·

ÒzojzK§y{ÂÞzoÒ-zK'zK¦#'zKûx#Â
²¢-ª´§b

w6zú§­Ò2yzô

wòÏ¢¢Ð¨·p¾

¶¼§¦#w"ª¦

©w"¦#Â

ü

z°xzKyª{zo¡"z°-w6¤Î*Ï¢ÐOÆ§ow"¦ÿw"y'òxz°2'zoj2yRª¦ú°w"ª¦-
¡6w6bªw6x8y{zK¹w"¦-

§­Ò2yª´§ow6'zK

zoÒzK¦-zK¦-§zÞÒ2w6''zob¦2p·»w"¦-

'Ò2w6p'z°¶jzoÒ-zKzK¦Á¢°w"¦ÁÂ¹ª¦-zoÒzK¦--zK¦-§zrbzKyw6ª{¦-2ª{Ò2p·p¾
È "%¼zrzK'zKw6b§p
¸4²*zOw6zVÒ2yw"¦-¦2ª¦£'­ª¦#'zo£"bw6'zr-zr'zK§p-¦-ªç'zK/zo¡"zKy{"ÒzKÀª´¦°-ª´RÒ2w6Òzo
²¢ª{2ª¦À©"zÒ]²/zoj2y
'zKw6b§bò­zo4-o¸--§pÅw"Äz¦-zK§¦-ª-zozK¹x#Â}%yw"¦-§­zow"y¾¶so6±"±|·p¸
zVËÄw"­ÒRzo%w"y¾8¶so6±"±Oo·"/-zVË%w"­Òw"¦2°Î-zowÀ¶so6±"±¯owÁ·p¾/r-2ª{ª{¦-w"yyÂ"¸ª¦­zVyª{£#R"
z
zK2y{%"x-w"ª¦zK¹xÂ»¢­zo4Åª¦¹§Ãx2ª¦-w6ª¦«²¢ª{«vw6x2dazKw6b§p
¸2ª{°wKÂ»xez¨ª´¦Á'zozKª¦£Æ'
ª¦-§"bÒe"pw6'zVw"¦"-zoÄ"Òezopw6'"K¸²¢-ª§p¹§-y»zKª{zo%xzVwÆ§oyw"bª§ow"yw6b§Ozo¡"zobbw"y"%­zª´¦-°"

[^aK[

B ßáCÚD-ÛFEHGJI*áLKeßÁåbÛSáHEME-ßONQPäCSR

'ÒzK§oª{º2§Æ"Òzobw6'"Ã'

zK']Â

w6Ò-Ò2y´ª§ow6ª{¦¹"¢w"y{£""bª-

åNSCQT2ÚQNSTUCßÁåOÛFEMNSD-ßÀåpãá-Úß¹äHV
WYX[Z¢ÙA\Oå

zÀw"yòª¦#'zK¦- 'Å²/"
 Þ¦úzÀw"-w6Ò-w6ª{¦ÿw"¦-
ü
'°zKw"yIÒ-"x2y{zK°/ª´¦¹z¨º-zKy¹"§oyw"bª{º2§ow6ª{¦
¾

4Ñu

Ò8w6''zob¦-o¾

 û <ú~ùMüþHú
  w«¶séÞËvr·

v-ª´²/"À2w"%xezozK¦«bÒ-Ò"'zKÀx#ÂÀzcaÒ2w"¦-ªbhé

ª¦-ª'zobª{Ã-z¨ËÄª{zK¦-§oªwÃÂÀvCzK§o¦y{"£

w"¦-»z

w"¦-§p-wÆ-¦-zo%ÎR@'zK§%vÄ¥ËYo6±"±¯½Ñ¾oO]6|^ÑTË¿¬^Ñ

-¦#w¤zË%Ã-¦2ª-w"zK/z¨Ë%w"'ªyy´w3Ñ¡{w:é

±¯Æw"¦-ÞÎ~Ë*Ñu±Oo^Ñu±"±Oo¸CzK'ÒzK§ª{¡"zKy{Â"¾

"z
 é

z­w6zÆ£"bw6'zo¼-y'¹§yy{zKw6£z

ü
ª¦#¡3w"y´-w6x2y{zzKy{Ò«²rª{«z}ª´­Ò2y{zK­zK¦#w6ª{¦«"A'zo¡"zopw"yw"y{£""bª-©o¾

ü
zozÃw"¦¦ÁÂ4­-zo¡ªzo²*zob;"¢2'zoj2y
§©­zK¦#¢w"¦-Åb£"£"zK'ª{¦-K¾

¾
Îzobw°j"-ª

zÃw6z}w"y´'©£"bw6'zo¼-yI'Àz

!
úfû"
#

rx-bw"©'¦I¸÷V¾{¸<*b]²¢¦
¸ ¾{¸<éò-Ò2#Â"¸CÃ¾{¸<p
Â''zK
V§oª
¸zae¾{¸p

z°Ë%w"­Òo¸.{R¾éú¾R¶so6±"±"±Á·p¾j{IzKw6b¦2ª¦£°pª{£ÁOª{®ozK

87z62;:9 (

#Âx-bª¹­zo4y{"£"Â"¾
V§oª
¸.a¾{¸p

ª¦Uy{zo]¸C¨¾÷{R¾*¶ ¯"Ì·p¾òØVw"ªy{º8¦-zoK~

ü

$&%¡!'%H #)( %H " *"( '%H +" (-,.(

j";"bzK§ow"'ª¦£¨'zo¡"zobz/²/zKw6zoK¾

¡ %¦#

%<;A! # =

%wKÂ"zKª´w"¦

%0/21324¸#¬O]65]¯6¾

xzKyª{zoR¦-zou²/"OxÂò­zKw"¦2O"*w

$&%¡ ">"$# / >%Hº'13?30@3¸|6±OA5|4¯K¬¾

z¤Ë%w"­Òo¸{R¾.éú¾A¶so6±"±¯]·p¾rµ#Â#x2bªÅ­zo-y"£"Â«;"Oy{zKw6b¦-ª´¦£­xzKyª{zo¦zou²/"4o~

/zK¦zK2ª§o¾B$&%¡&%HO C# ( % "*D( '%H "E(-,

V¦-zob¦
¸ae¾{¸éòw"2ª{£w"¦
¸-Ï¤¾{¸Hp

;BFGFH (AH#JI

;O%%H "å%P(!,

/zKª¦-yª´§b
¸*¥p¾Ã¾{¸3a4zop­¦-o¸/Ø}¾8¾{¸Ë%-wK¡"zo®"¸r¨¾fé
©¦-ª{'"bª¦-£¨'Â'zK«~

S$&%	Tw ( ââVU #
# #
% o¸o3 Q]65o"¬"Ì¾

¦-zou²/"K¾

O¡LK­ %>(

Îzoby©w"¦I¸éú¾¶ ¯O]"·p¾%

yzK¦-§z}§oyw"zKÄ;"rw"§Â§oyª´§¨-ª{£"bw6Ò8-o¾

\ V U

 # "

 %  #

% # 0% /M14NK¸Ho"|"¬A5o"Ìo¾

ËÄ-w6bw"§'zobª{®Kw6ª¦«"é

	H  #&%  #  %

1Q4R6¸e¬6±¬A5¬3 -¯6¾

w6"^¡»z'-ª{¡6w3Ñ

Ë/"ÒzoK¸ÄÐÆ¾ È ¾r¶ ¯·p¾ vzÅw"y´w6b
§ow"'zV'-Â¤²¢ª{Æ²*¤Ò-"x8w6x2ªyªª§ª¦-;zozK¦2§zÄ'zK§b-¦-ª&'#zKR;"*xezKy´ª{zo

% (!,
%0/ W

¾{¸­p

>YXw ( FS2%[Z

( % , !>%â ( %	;A! # =

 # "

$&%¡ " "$# Q/ >%â # %

%ª¦-zo]¸¾{¸myyzoK¸#Ï¤¾{¸4¢-zKyy¸a¾{¸p m¨w"¦-w6®KwK²%w4¸m­¾¶ ¯O]"·p¾V-w6Ò-ª¡"z¢Ò-"x8w6x2ªyªª§%¦zou²/"4
²rª{«-ª--zK¦À¡6w6bªw6x8y{zKo¾ \ ! # %]7zL&% # %0/M140?"¸Ho4¯K|A5o3 " ¾
{w6bbw¦^ w6£w4¸CÎ¾¶so6±"±|·p¾{zKw6b¦-ª¦-£}%w]Â"zKªw"¦ ¦-zou²/"}ª¦Þz­'Ò2w"§z©"
'b-§zKVxÂ«zK'ª©w6ª¦ "*-ª''bªx2ª{¦«w"y{£""pª{-©o¾:$&%¡&
 %HO #C( % "*"( '%H "(!, $&%¡ " "$#`_
/>%f	a % ¡ Iï% 1B3Mb¸6o ±¬A5o6o ±4¾

%yw"¦-§¸}¾{¸¥ ¦®Kw4¸I¥½¾{¸÷p

/-§6w6zoo¸Á}¾3}¾4¶ ¯"|·p¾H*zKy´ª{zo-¦zou²/"4§¦-''b-§ª¦¤2ª¦£-z/©ª´¦-ª¤-
Ò2bª¦-§oª{Ò8y{z"¾7÷629 ( ¡ %¦# %cZ (MI F¡c	H # d%Hâ>1eNVfgNo¸8 -¯&5Á ¾
/-§6w6zoo¸}¾
¨¾A¶ ¯"¬·p¾ihA2a %º# 2%

 "å# 

, %Cj ( l k >% m8,  2( I


(%

% 2ºU #)(

zK§pª{Ò-ª{¦Ãy{zK¦£"

%  ( # % , ;d%Hâo¾¨Î
¾gÏ¤¾

-zKªo¸-ÊV¦-ª{¡"zobbª{uÂ»"Êr'zK§pÁo¾

%-¦#ª¦z"¸ ü

% (!,
n$&%TY ( âlU # 0% / 
$&%¡ ">"å# Q/ d%Hâo¸2¬oA5Ì6±4¾

¾2¶ ¯4¯]·p¾Ivzo"ÂÃzoº2¦zK©zK¦ÁA".%wKÂ"zKªw"¦»¦zo²*"4o¾

Z ( % , ;d%Hâ ( %qp%Hº!!  # % Ca # r
% ;Aº # =

 # "

%-¦#ª¦z"¸ ü *
¾ ¶ ¯3 #·p¾¹¿OÒezopw6ª{¦-V;"Ãy{zKw6b¦-ª¦-£»²rª{
$&%H¡ ">"å# /Qd %HâK­ % L14Á¸¯K¬A5oo"¬¾
[^a l

£"bw6Ò2-ª§ow"yA©zKy´o¾

>3	doLd%>

*"( '%H 
" (-, ;Aº # =

 # "

Ù¢ÚÛ{ÜÞÝµÜ2ßÅàá2âã#ä8å

%-¦#ª¦z"¸ ü

$-XXQX

¾
¶ ¯"Ì·p¾

% O6 #C(

U2%



%

£2ªz¢'¤zVyª{'zobw6bz¢¦»y{zKw6b¦-ª¦-£¨Ò-"x2w6x8ªyª'ª´§/¦-zou²/"/j

%i(

%rsP% ( j " VUA/Q
2%tUiuï Xv%0/ # % â! # 0% /M1Qb"¸¯"¬A5o4¯o±4¾

-w6w4¾

Ë%zK¦-£¸ ¾{¸z/zKyyE¸Ï¤¾}¾{¸£p

{ªI¸ ü ¾*¶ ¯O]"·p¾»r¦ w"y£""bª{- j"c%wKÂ"zKª´w"¦úxzKyª{zo¦-zou²/"
2w6w4¾B$&%rTw ( â
 âVU # %0/ %i(!, ;O$¦2%+Uh	0;¦]w ?DNo¸"|A56±4¾

'b-§ª{¦«j

§¦4Ñ

v

-¾{­
¸ /zKyy¸ÄÏ¤¾*Ã¾{ò
¸ p
{ª´
¸ ü ¾V¶ 
¯ ·p
¾
{IzKw6b¦2ª¦i
£ %wKÂ"zKª´w"¦ ¦-zou²/"
 Àj
-w6w4~ V¦
zÀ§oª{zK¦Árw6Ò-Ò-w"§pÅx2w"'zKÅ¦Åª¦j"b©w6ª{¦¹-zo"Â"¾vCzK§b
¾-bzoÒI¾{¸2ÊV¦-ª{¡"zobªuÂ°"AVy{xzow4¾

Ë%zK¦-£¸

Ë%-ª´§"zobª¦-£¸2Ï¤¾é

¾¶ ¯"¬·p¾r

Ë%-ª´§"zobª¦-£¸%Ï¤¾wéú¾¶ ¯"Ì·p¾Ã{zKw6b¦-ª¦£

jf " , >zZ

>S

Ë%-ª´§"zobª¦-£¸%Ï¤¾wéú¾¶so6±"±Oo·p¾Ã{zKw6b¦-ª¦£

*D( '%H E" (-, \

Ë%-ª´§"zobª¦-£¸^Ï¤¾vé

O # 
% ]7z&% #

¾{¸"ÐVzKª£"zoK¸3Ï¤¾{¸Op

©zo2Vw"¦2

 ( l k

Ë%^²¨¸eËV¾{¸.p

z'#-ª¡3w"y{zK¦2§zò§oyw"'zKÀ"¦%wKÂ"zKª´w"¦

 # "

¦-zou²/"

( % , !>%Hº ( %{pE%Hâº  # % Ca # 
% ;Aº # =

z'#-ª¡3w"y{zK¦2§zò§oyw"'zKÀ"¦%wKÂ"zKª´w"¦

% L;!184¸- " Á¬A5Á ¾

 # "

¦-zou²/"

¦zo Ñ

 # "

''b-§-zKo¾

$&%¡ ">"$# / >%Hº¸
''b-§-zKo¾

ØrzK§"zob°w"¦
¸"ÏÃ¾4¶ ¯"¬·p¾Q{zKw6b¦-ª¦£Y%wKÂ"zKbªw"¦Ã¦-zou²/"K~azKw6b§p

I # %HL'a~Tò&FS! %}(!,
L$&%w
T  "$#Jï
$&%¡ ">"$# / >%Hº:M%+Uh	  # %  #  % ¸¯"¯oA58¯o¾

zô4Òzobª­zK¦#w"yzK-yo¾

( F ( %r;A! # =

% 

%0/}Kò

( % , !>%Hº ( %WpE%Hâº  # % Ca # P
% ;Aº # =

>X " doL>%H>xZ

$&%H¡ ">"å# /Qd%Hâo¸HO]65¾
% (!,
$&%TY ( âlU # 0% / y
¯K¬6±|8
5 ¯K¬O]#¾

"Az'#2ª{¡3w"yzK¦Áò%w]Â"zKªw"¦

'pw"¦-'j"b©w6ª{¦-w"y§b-w6bw"§'zopª{®Kw6ª{¦

% (-,
G$&%PTw ( ºVU # 0% / v

²/"''b2§zKo¾

. # , ><$&%¡&% #C( H%  "
> )

{Cª
¸8ËV¾¶ ¯"Ì·p¾¢Ò-Ò2Kôª©w6ª¦-£©-ª§zo'z}Ò-"x2w6x2ª´yª{uÂ»-ª''pª{x2ª{¦2*²rª{ÅzoÒzK¦4Ñ
% ( %r$&% ,>(  I  )# ( %9z ( ' a|1v3df¸- ÁÌA
8$-XQXQXÃ2;2 % % O )# ( % 
o 5Á ÁÌO#
] ¾

-zK¦-§z¨'zozKo¾

Ë/"ÒzoK¸"ÐÆ¾ È ¾{¸p Ørzob;"^¡ª{K¸O¾¶ ¯o·p¾
¦-zou²/"¢;b
-w6w4¾
O! #  ÷L

\

ÏOw"
¸ÁÏ¤¾{¸Qp

ÏVb-®K®ozKy¸é

©zKy´j

#

%r;A! # =

 # "

% ]7

¾2¶ ¯·p¾e

ÁÂx-bª´Ãw"¦#Â#ª´­zÄw"y{£""bª{-ýj"Az§¦-''p-§ª{¦Æ"8§ow"2w"y

% (!,
Ò2w6b'z¤-w6w4¾O$&%Y
T  ( ºlU # % / 
$&%¡ ">"å# Q/ d%Hâo¸¯ oA58¯ ¾

z»ËÄw"­Òo¸÷{¾÷éú¾%¶ ¯·p¾Å¥ ¦-zoÒzK¦-zK¦-§Â
§¦2¦zK§'zK

%wKÂ"zKbªw"¦Æ­zo4¨j"Cz/ª¦--2§ª{¦O"Ò-"x2w6x8ªyª'ª´§

'% # 0% /21v?6¸8|6±OA5|3 ¾

¦zou²/"4o¾

30@3¸e¬4¯"¯&5¬3 ¾

M



M

z

Kò d% ( % # 0% /21vG36¸Ho4¯&5|4¯"¯6¾

t

r$&%

(

 #  " A
; ! # =  #  "

$&%¡ " "$# Q/ >%â'1

2 ¾¶so6±"±Oo·p¾V¦Á§y¦ÁÂ
&% #C( H%  "8*"( '%H "8(!, ;8FFH (6H#JI ¡

¾{¸ È o
z b¦ w"¦--zo®Ñ¡{-¦-w4¸ ¾Léú¾{¸ÁÐ w"©zo®"¸ -¾^Ã¾{¸Op
"Ò2ª©ª{®Kw6ª{¦ ;"¤
 y{zKw6b¦-ª´¦£ %wKÂ"zKªw"¦É¦zo²*"o¾
¡

e

( % , !>%â ( %p%â!!  # % Ca

zKyw6ª{¦2-ª{Ò2Ow"¦-ûy{zKw6b¦-ª´¦£Åw"y{£""bª{2©j"Ãª¦-£y{Â

*D( &% 
" (!, X H FU! `# I > %H  " 2%+U



z/ËÄw"­Òo¸@{¾@é

. # , ¡d%>Z
> ~

Î-zow4¸ -¾@é

n

z¤ËÄw"­Òo¸H{¾Héú¾{¸ È zob¦ w"¦-zo®Ñ¡{2¦-w4¸ -¾é ¾{¸p
Î*zow4¸ ¾Hé ¾¶so6±"±Oo·p¾A{I4§ow"y'zKw6p§bÞ­zo4-
j"}y{zKw6p¦-ª¦}
£ %wKÂ"zKªw"¦û¦zou²/"4}-bª¦£¹wÅ­4-ª{º-zKÞ¦zKª{£#x"b ª¦Þz©Ò2w"§z­"/2w6£o¾

7÷62:9 (

z

¡ %#

Ë%w"­Òo¸­{R¾wéú¾{¸
zKw6b§b

w"y{£""pª{-

%Z (2I FHS¡!c	 # >%Hº'140R24+No¸C¯oA58¯o¾


e



Î-zow4¸ ¾wéú¾¶so6±"±|·p¾µr¦ ª{'zobw6'zK y{4§ow"y
È zob¦ w"¦2zo®Ñ¡{-¦2w4¸ ¾Yéú¾{¸3p
;"­y{zKw6b¦2ª¦£d%wKÂ"zKbªw"¦ ¦zou²/"4Æ²¢ª{ûzK'w6¤x2w"zKû¦É§¦-2ª{ª{¦-w"y

v$&%¡!'%H #)( %H " *D( &% " (!, $&%H¡ ">"å# Q/ d%~	a

ª´¦-zoÒzK¦-zK¦-§zV'zK'o¾

[^a]\

% ¡ ï
I %

183Mb"¸oo4¯&5o"|"¬¾

B ßáCÚD-ÛFEHGJI*áLKeßÁåbÛSáHEME-ßONQPäCSR

z­Ë%w"­Òo¸{¾é

w" ©zo®"¸-¾8Ã¾{¸.p

¾{¸
Ð

xÂÉw"¦Á©§y{¦#Âÿ"Ò-ª©ªbw6ª{¦
~

Z (MI F # %0/¾

n

Îzow4¸ ¾éú¾A¶¼ª¦«Ò-bzKp·p¾­{IzKw6p¦-ª¦£e%wKÂ"zKbªw"¦Þ¦zou²/"4

azKw6b§b2ª¦£úª¦ÿu²/

Q

z«Ë%w"­Òo¸<{R¾<éú¾{¸~p

åNSCQT2ÚQNSTUCßÁåOÛFEMNSD-ßÀåpãá-Úß¹äHV
WYX[Z¢ÙA\Oå

-ª{³ezozK¦#­'Ò2w"§zKo¾

\

>Gj~LJ2%+U	

(!,



ØVzo'z"¸ ¾ È ¾%¶ ¯O]"·p¾ ¿O¦ûzÀ2'zÀ"ª´¦-zoÒzK¦-zK¦-§z­bzKyw6ª{¦-2ª{Ò2j"
yzKw6b¦-ª¦£»ª­Ò8yª{º-zK«xzKyªzo¦-zou²/"K¾
¡! H # H "
 H "
¡ " "$#  w	 % ¡ ï%
¸

P$&%

A5

 "¬ ¬oo¾
z¢Ë%w"­Òo¸O{¾Oéú¾{¸Qp

'%

)( % Q*"( '% (!, $&%

I 13M4

/ >% a

"
¦zo² w6Ò-Ò-w"§p­j"Ry{zKw6b¦-ª¦-£¢xzKyª{zo-¦zo²*"R2ª¦£
$&%¡!'%H #)( %H " *D( &% "E(!, ;BFF (6HO#`I ¡PK­ %>( % # %0/M14Af¸¯"¯&5|O]#¾

ØVzo'z"¸ ¾ È ¾2¶so6±"±"±Á·p¾e

ª´¦-zoÒzK¦-zK¦-§zO§bª{'zopªw4¾
z«Ë%w"­Òo¸<{R¾<éú¾{¸~p
¦-zou²/"¹-bª¦£

Q

ØVzo'z"¸ ¾ È ¾¶so6±"±"±Á·p¾ r
 Ò-Ò-]ô4ª°w6ª¦£ò§ow"-bw"y"b-zobª¦£};"
%wKÂ"zKª´w"¦
£"zK¦zoª§ w"y{£""bª{2©©w"¦- 
 ª¤-yw6'zKþw"¦2¦zKw"yª¦£¾
w ââ # %
>S

$&%T ( VU %0/ W(!,

X # / Q>x$-T \ pZ ( % , !>%Hº¸8|"|"|A5|3 ±4¾

zÀË%w"©ÒeK¸z{R¾zé

#

¾{¸£pÎ*zow4¸ ¾zé

¾*¶so6±"±¯]·p¾}a'4§b2w"'ª§©y{4§ow"yAw"¦-ú2ª''bª{x8'zK

zKw6b§bûw"y{£"6Ñ

g$&%TY ( ºlU # %/ %](-, >8$-$-$$&%H¡!'%H #)( %H " 	a I F (@%â#  I
Iï%>m X8o (L" S #)( %HL'aZ (MI F O #C( % 2%tU~TY (  #>"$#&%  # W[;&F #  " \ ( U " ¸

pª{-©j"y{zKw6b¦-ª´¦£rxzKyªzo2¦zou²/"4o¾

( %W;UO&F # oL	a
A5

% ¡

¯o±O 8¯"¯K¬¾



z»ËÄw"­Òo¸÷{¾÷éú¾{¸)póÎzow4¸ ¾£éú¾%¶so6±"±¯]·p¾Ma'§p-w"'ª§Ày{4§ow"yR'zKw6b§pûw"y{£""pª{-©j"ÃyzKw6b¦4Ñ

}7z2;9 (

ª´¦£«xzKyª{zo¦zo²*"o~jazKw6b§b2ª¦£Åª¦ÞzÀ'Ò2w"§z­"%"bzobª´¦£o¾

$&%H¡ ">"å# Q/ d%Hâ>1Q403df¸ooA5o"|¾

ÏV"K¸Ï¤¾{¸£p

vw6bªE¸zéú¾¶ ¯o·p¾©

ª­Ò8y{zÃw"y{£""pª{-

¡ %j#

%y;Aº # =

 # "

'Å§¦-''p-§¨w«§¦-ª'zK¦Ázô4'zK¦-ª{¦Þ"%w

Ò8w6ªw"yy{ÂV"bª{zK¦#'zK¨£"pw6Ò2
¾vCzK§b
¾3zoÒI¾]Ñb¯"¬¸#Ë/"£¦-ª{ª¡"z[aÂ4''zK©z{Cw6x"bw6'"Â"¸"ÏVzoÒ2w6­zK¦#
"Ë/©Ò2'zo3a4§oª{zK¦2§z"¸2ÊOËY{Ã¾
È bªzK-©w"¦
¸UuÃ¾{¸Hp

ÐVy´-'®K©ª-o¸éú¾C¶ ¯"Ì·p¾w{IzKw6p¦-ª¦£
%wKÂ"zKª´w"¦

% (!,
$&%TY ( âlU # 0% / y
o"¬oA
5 o"Ìo¾

jf " , >zZ

>S

¦zo²*"¢²¢ª{«y{4§ow"yI''b2§z"¾

( % , !>%Hº ( %{pE%Hâº  # % Ca # 
% ;Aº # =

 # "

$&%¡ ">"$# / >%Hº¸

myy{zoK¸Ï¤¾8¶so6±"±"±Á·p¾/zKª¦-£c%wKÂ"zKªw"¦Àw6xR¦zou²/"©''p-§z"¾n$&%TY ( âlU #
>:	 #H ¡â>%>Z ( % , ;d%Hâ ( %qpE%Hâº  # %Ca # %;A! # =  #  " $&%¡ " "$# /Q>%â¸o6±¯&5o4¯o±4¾

È bªzK-©w"¦
¸uÃ¾{¸p

(-,

t

Îz zoK¸
Ï¤¾¶ ¯·p¾A{IzKw6b¦-ª´¦£%wKÂ"zKª´w"¦
È bªzK-©w"¦
¸uÃ¾{¸.urw"§p-©w"¦
¸e¥p¾{¸.p
°w"ª{¡"z¤-w6w"'zoo~v-z "'Ò2w6bzÃ§ow"¦--ª´-w6'z °w"y{£""pª{-«¾
w

L

Z ( % , ;d%Hâ ( %qp%Hº!!  # % Ca # r
% ;Aº # =

ÐVzKª{£"zo]¸Ï¤¾{¸+p

ØrzK§"zop©w"¦
¸IÏ¤¾¶ ¯"¬·p¾

 # "

 # "

$&%H¡

ÎzKw6by¸"¾2¶ ¯6±Á·p¾z{zKw6b¦-ª¦-£O§ow"2w"y-'zozK;b
% (-, ;;O;$ _ ?G@3¸H]]3±|5]]6Ì¾
$&%rTY ( ºlU # % / i

ÐVzKª{£"zo]¸#Ï¤¾{¸Îw6®"¸4}¾{¸p

#
*D( '%H E" (-, $&%¡ ">"$# / >%~	a % ¡ Iï% 1Bb"¸Ho"|4¯&5o3 Q]#¾

>OX " >o>%>Z

( % , ;d%Hâ

zoÒzK¦-zK¦2§z%ª´¦;"p©w6ª{¦
¾

x$&%¡&% #C( %H

ÐVzKª{£"zo]¸CÏ¤¾{¸Îw6®"¸}¾{¸pÎzKw6by¸ ¾¶ ¯"|·p¾}{IzKw6b¦-ª´¦£«ª­Ò2yzÆ§ow"2w"yR''b2§zKo¾

[^a3_

. # , ¡>%H>
> )

"Rz¤ÏVªbª§b2y{zo¢-ª'bª{x2ª¦¹²¢ª{

% (!,
$&%~TY ( âlU # 0% / L
">"å# /Qd%Hâo¸¯"ÌA
5 o6±]#¾

w6Ò2Ò2yª§ow6ª{¦°'­y{zKw6b¦-ª¦-£c%wKÂ"zKªw"¦«¦-zou²/"K¾

( %	pE%Hº!!  # H% Ca # 
% ;qº # =

%

¦-zou²/"Å''b-§-z¨j

% (-,
6
e$&%YT ( ºVU # 0% / 
$&%¡ ">"å# Q/ d%Hâo¸o6±ÌA5o4¯K¬¾

§p-w6bw"§'zobª´w6ª{¦

%0/

"

Ù¢ÚÛ{ÜÞÝµÜ2ßÅàá2âã#ä8å

ÐOªy´yª'Ò2ªz"¸wae¾[r¾{¸qp

Îzoby´©w"¦
¸òé

¾/Ï¤¾¨¶so6±"±¯]·p¾|¦-­zobw6ª¦-£

% (!,
w"§Â4§oyª§Ä2ª{£"bw6Ò2-­4zKyo¾+$&%Tw ( ºVU # 0
%/]
# %r;A! # =  #  " $&%¡ ">"å# /Qd%Hâo¸¯6]¯&8
5 ¯6]]#¾

é

w6"]¡

z'#-ª¡3w"y{zK¦2§z

§oyw"zKÀ"

>S3	>o>%¡â>%><Z ( % , !>%Hº ( %cp%â!!  # 
% Ca

:QKA	; *D( '%H E" (-, Z (2I FHS # %/21B36¸C¯6±|5o6±Ì¾

ÐOy{^¡"zoK¸ È ¾¶ ¯·p¾Ävw6x2«'zKw6b§p
¸8Îw6¥½¾
ØrzK§"zob©w"¦I¸*Ï¤¾%¶ ¯"Ì·p¾0/w]Â"zKªw"¦

¦zo²*"¤j"ï4¦^²¢y{zK£"z¹-ª§^¡"zoÂ"¾

Î*ªw6'zo;ÂÁÑga-w6Ò2ª{¸Î¾a4ÃÂ#
¸4¨¾Êr#-b-w"ÃÂ

&a}2%+Uuï 

\ # % # 0% /"¾8ËÄw"}x-pª£"z"~~éò¥Tv

ØrzK§"zob©w"¦I¸8Ï¤¾{¸eÐVzKª{£"zo]¸-ÏÃ¾{¸p

+;eUMo@2%Hº

¶22o¾·p¸

A5

¥T¦ÉÊÃ¾néú¾ È wKÂÂw"
¸ÄÐ¤¾

%sP% ( j " VU6/]u

%q#

ÎzKo¸oO]6| |6±¬¾

Ë%-ª§"zobª¦£¸Ï¤¾Hé

\

O! # 
% 7÷L'% #

Z (2I FHS¡! _  % V UrFH ( Q #>"å# %  # 
 %Cj
éòzK-ª§ow"yI¥T¦j"b©w6ª¦da4§oª{zK¦-§zKo¸.aw"¦j"b«Êr¦2ª{¡"zobª{Â"¾

Ørzob;"]¡4ª{o¸Y¢¾¢¶ ¯4¯]·p¾

( l k



%


(%

%0/214@3¸C¯O]65o3 Á|¾

% 2âU6 #C( 2
% ¾þÎ
¾gÏ

Ë/"ÒzoK¸RÐ¤¾ È ¾Ä¶ ¯6±Á·p¾bm}w6 ~©r¦ûzK¦#'"Ò#Â#Ñubª¡"zK¦û'Â4''zK
'b-§ª{¦ò"AÒ-"x2w6x2ª´yª'ª§Vzô4Òzo¢'Â4''zK©r;bó-w6w6x2w"zKo¾
w º #

Z ( % , ;d%Hâ ( %qp%Hº!!  # % Ca # r
% ;Aº # =

8
z Ë%w"­Òo¸f{R¾)éú¾¢¶ ¯"|·p¾
Z M( I F¡c	H # d%Hâ>1eNVfgNo¸¯6±|58¯"¬¾

ØVzo'z"¸ -¾ È ¾{¸wp

"zK¦2'zK¦
¸

{zKw6b¦-ª¦-£

-zKªo¸

;"¤z»§¦4Ñ

% (-,
O$&%YT ( VU %0/ 

$&%¡ ">"å# Q/ d%Hâo¸2¬3 5Ìo¾

 # "

(o_

¾¶ ¯"¬·p¾f{zKw6b¦-ª¦£
%wKÂ"zKbªw"¦ò¦zo²*"o~*vz

§Ãx2ª¦2w6ª{¦«"£¦^²¢y{zK£"zÃw"¦-Å'w6ªª§ow"yI-w6w4¾

Ørzob;"]¡4ª{o¸)¢¾{¸)p

#% 

>ï	 #H >

7z2~9 (

§ow"-bw"yÄÒy{Â#'bzozKo¾

v;]%$&%2 ( ULU6 #C( %0 ( hA2a %â# 2%r9:Cj ( l k

È ¾Uè¤¾C¶ ¯"Ì·p¾

¡ %h#

%

% ¾/ÊOËw{ûÎRzKbo¾

m4§6w4¸
v¾{¸.pË%w"'zKy{¸e}¾¶so6±"±¯]·p¾¥ ­Ò-b]¡"zK y{zKw6b¦-ª¦-£©"~%wKÂ"zKª´w"¦ ¦ zou²/"K¾$&%TY ( âlU #
(-, >:	d oL> %H¡> %H>y
 Z ( % , ;d
 %Hâ ( %qp%Hº!!  # %Ca # %r;Aº # =  #  " $&%¡ ">"å# /Qd%Hâo¸o"ÌA5oO]6Ì¾

%0/
%

m-w]¡ªE¸C¨¾{¸"2¦
¸Ð¤¾{¸{I¦-£¸}¾{¸é w"¦-y{zoÂ"¸Ï¤¾{¸pÎQ-zo£"zoK¸m­¾*¶ ¯3 #·p¾déM{Ë­±c±¤~} ©w"§b2ª¦z
yzKw6b¦-ª¦£úy´ª{x-bw6Âÿª¦ Ë­±c¤
± ¾$&%Tw ( ºVU # %0/ %(!, >M	 #H >$&%¡&%HO #C( % " Z ( % , ;d%Hâ ( %
 (6(L"å% j # >x
 ;A! # =  #  " $&%¡ ">"$# /> %Hº ¸H]^ ±|5]^ Á|¾
m¨-y´y{x2w"§e¸ae¾¶ ¯"Ì·p¾$&%
{w"Å¸ ü

,>(  I

 #)( 9
% z

( ' a}2%tUh	  # %

 #  % ¾*Ïr^¡"zoÎx2y´ª§ow6ª{¦
¾

¾{¸p«%w"§o§b-o¸ È ¾I¶ ¯3 #·p¾~{zKw6b¦-ª¦£ï%wKÂ"zKªw"¦ÅxezKy´ª{zoI¦zou²/"4o¾-V¦»w6Ò2Ò-w"§bÅx2w"'zK»¦
-z:éòÏq{ûÒ-bª¦2§oª{Ò2y{z"¾
HS  # H " ¡ ">"$#  Hº
3¸o"Ì o"|¾

]Z (2I F

C( %

$&%

/ >% '13G@

A5

{w6bbw¦^ w6£w4¸%ÎC¾{¸/Î"®Kw4¸wé ¾{¸Q-bw"­zK¦-2ª¸#¤¾{¸wéò-£w4¸*}¾{¸[p m¨-ª  Òzobo¸ËV¾¶ ¯"Ì·p¾ a'p-§z
yzKw6b¦-ª¦£%"S%
 wKÂ"zKª´w"¦Ã¦zo²*"x#ÂO£"zK¦zoª§w"y{£""bª{-°o~IÿÒezob;"b°w"¦-§zRw"¦-w"y{Â4ª"4§¦Á'by
% ( %T­Os¡!' %;O%H " a %â# % 2
Ò8w6bw"­zo'zobo¾$-XQXQX
U;2
 % %  )# ( % <
 %+U \ O! # %}
 $&%¡ ">"å# /Qd
 %Hâ> 13b"¸
 ¯A
4
o 5"
o Ì¾
{w6bbw¦^ w6£w4¸RÎ¾{¸)m¨-ª 'Òzobo¸AËV¾{¸~p§é

£w4¸R}¾/¶ ¯"Ì·p¾i{zKw6b¦-ª¦£M/w]Â"zKªw"¦

¦zo²*"û''b2§zK

$-XQXX

xÂûzKw6b§b-ª´¦£Þ;"Æz¹xzK'Æ"bzobª´¦£ò²¢ªû£"zK¦-zoª§¹w"y{£""bª{-°o¾

é

	a % ¡

I 1 \ 2 %i2%+UWZEa&% #  % Q
1 4"3¸- O]65Á "|¾

S;2% % O #)(

w"-ª{£w"¦
¸eÏÃ¾{¸er¦2zob'¦
¸Ha¾2}¾{¸eÎzoby©w"¦
¸éú¾eÏÃ¾{¸.p|èAyª´¦-;Â"¸eËV¾2v¾¶ ¯"Ì·p¾ò%wKÂ"zKªw"¦
w]¡"zobw6£ª¦£

Z (MII " %

w"¦-

#  #)(

%

­4zKy'zKy{zK§ª¦

%ï# J
% 	 O #&%  #  %L

;"béòw6"^¡

zS ( ' a

[^a]a

2%+U

\

z'#2ª{¡3w"yzK¦-§z

>

% ( %
% Y

­4zKy

§oyw"'zK«"Æw"§Â4§oyª§ú-ª£"bw6Ò2-o¾

(U%
1 40R6¸o3 "|A5o"¬o6±4¾

B ßáCÚD-ÛFEHGJI*áLKeßÁåbÛSáHEME-ßONQPäCSR

é

w"-ª{£w"¦
¸eÏÃ¾{¸.p

rw6;'zoÂ"¸Ã¾¶ ¯3 #·p¾3éò-zKy'zKy{zK§ª¦òw"¦-

ëgÄ²¢ª´¦-]²}¾

ª´¦°£"bw6Ò8-ª§ow"ye­-zKy%-ª¦£Æ¿O§o§ow"

 # O #C(

åNSCQT2ÚQNSTUCßÁåOÛFEMNSD-ßÀåpãá-Úß¹äHV
WYX[Z¢ÙA\Oå

%1bG?6¸¯K¬"|"¬A58¯K¬3 ÁÌ¾

w"§o§-¦Áª´¦£°j"r­4zKyC-¦-§zow"ª¦#uÂ

*"( '%H " (!,

>O;

I

; %â%>(2_

! # 2%M	  # %  #  %

éòzoz8¸VËO¾r¶ 
¯ "¬·p¾
Ë w"2w"y¢ª¦-;zozK¦2§zòw"¦-þ§ow"2w"y¢zô4Ò2yw"¦2w6ª{¦ ¢
%
² ª 2
x w"§£"-¦2ê4¦]²ry{zK£"z"¾
% (!, >}X " doLd%>Z ( % , !>%Hº ( %p%â!!  # %Ca # %;qº # =  #  " $&%¡ ">"$# />%Hº¸
$&%cTw ( â âVU # %0/ <

A5

 ±| Á -¯o±4¾

é

-¦Á'zK¦2w"
¸RÎ¾{¸fp

%w]Â"zKªw"¦
éòÂ"zobo¸¾ ü

ËÄw"
¸RÏ¤¾%¶so6±"±"±Á·p¾~°§oª{zK¦#¤b§"zÑEx2w"'zKÉy{zKw6b¦2ª¦£Å"rz'#-ª¡3w"y{zK¦2§zÀ§oyw"zKÃ"

B7z2:9 (

¦zou²/"4o¾

¡ %#

 # "

$&%¡ " "$# / >%Hº'1B3G?3G@3¸."ÌA58¯o±¬¾

¾{¸U{w";"zoÂ"¸Um­¾V¾{¸p{Izo¡4ª{'o¸v¾¶ ¯·p¾){zKw6b¦-ª¦-£ï%wKÂ"zKbªw"¦«¦zou²/"4%;b

Ò8y{zo'z}-w6w­²rª{Å''4§b-w"ª§¨'zKw6b§p

( %	pE%Hº!!  # H% Ca # <
% ;qº # =

d%Hâ

:¾¨¶ ¯·p¾TY (
$&% , ;d%Hâo¾[a4w"¦dé

ÎzKw6by¸

G
(-,

%r;A! # =

 # "

% (!,
$&%<TY ( âlU # 0% / 
">"å# /Qd%Hâo¸ Q]6ÌAÁ
5  "¬¾

w"y£""bª{-©K¾

$&%H¡

I %>m
 # "$#&%  # yKò %d( % # %0/ # %$&%¡ ">"å# Q
/ d%
	a % ¡ ï
w6'zo~wéò"£w"¦Mm¨w"¼©w"¦-¦
¾

. # , ¡â>%>Z
> ~

% (!, T
9:Cj ( l k 

ª´¦-§ÆÑ

( % ,  _

" L %â#  " 

$&%iTY ( âlU # 0% /

ÎzKw6by¸ -¾{¸pêèAzop©w4¸Áv¾Oae¾¶ ¯6±Á·p¾H~'-ª{¡6w"y{zK¦-§z/w"¦-Æ'Â4¦ÁzKbª"e§ow"-w"y4­4zKyo¾

>:	 #H >Z



Î-zow4¸ ¾@é

( % , ;d%Hâ ( %qpE%Hâº  # % Ca # 
% ;A! # =

 # "

$&%¡ " "$# Q/ >%â¸oo6±|5ooO]#¾

%

\[  ( U (@%Y"( â "  % a:U #&% 2 # ! # U (@% FL; " c ( % % 2âU # ( %UY;lU % Uò>% # 
aWU # %   Ij# â % ¶¼ª¦aÒ2w"¦-ª´8·p¾ÅÎI¾gÏÃ¾CzKªK¸ÏVzoÒ2w6b­zK¦Á¤"VË/©Ò2'zoja§oª{zK¦-§z

¾¶so6±"±¯]·p¾

 %    #  %

w"¦2Å¢bª{º2§oªw"y¥ ¦Á'zKy´yª{£"zK¦-§z"¸-ÊV¦-ª{¡"zobbª{uÂÀ"RÐObw"¦-w"-w4¾

azox8w"'ªw"¦-ª¸¹Î¾Å¶ 
¯ O]"·p¾
{ zKw6p¦-ª¦£«%wKÂ"zKªw"¦¦-zou²/" ; 
I
% (!, > ðz # º¡ â>%>Z ( % , ;d%Hâ ( %zpE%Hâº  # %Ca
2w6w6x2w"'zKo¾x$&%yTw ( ââV
 U # %0/ x
$&%H¡ ">"å# /Qd%Hâo ¸- ±¯&5Á ±O ¾

¢w"©¦-ª¸

éú¾{¸dp

ª¦2§­Ò2y{zo'z

#

%y;Aº # =

 # "

ÎzKw6by¸¾C¶ ¯O"
] ·p¾rvzzK§^¡"zoÂÅ"R§ow"-w"yÒy{ÂÁÑE'bzozKjó'w6ª´'ª§ow"y2w6w4¾/¥ ¦
{¾ u}¾Um}w"¦-w"y¸v¾åae¾S{Izo¡4ª{'o¸-¾ È ¾S{zK©­zo}¶22o¾·p¸vp%â!!  # %Ca # %;qº # =  #  " $&%¡ " "$# /Q>%âL"¸
V©''zop-w"«~~r
u "4ÑuØryyw"¦-I¸SoooA5oo¾

zox8w"¦z"¸Ð¤¾{¸.p

a4§pÁ²%w6®"¸2Ð¤¾
¶ ¯O]L·p¾*'ª©w6ª´¦£¨zO-ª­zK¦2ª{¦­"Iw¤­4zKy¾;O%% "n%(!, 	  # %  #  %
a4ª¦-£
¸­éú¾{¸qp èRw"y{'"bw4¸qé ¾O¶ ¯"|·p¾ V¦ w"y{£""bª{2 j"À-z §¦-'b-§ª{¦
²/"°
 'b-§zK/j -w6w4¾$&%Tw ( ââVU # %0/ %P(-, >O9 # %>WZ ( % , !>%Hº
;qº # =  #  " $&%H¡ ">"å# /Qd %Hâo¸o"¬A5o"Ì"¬¾
a4ª¦-£
¸Uéú¾{¸p«èRw"y'"w4¸é


%d(

1B6¸ ÁÌ4¯&5Á ÁÌ3 ¾

"¦%wKÂ"zKª´w"¦

( %pE%Hâº  # % Ca # %

¾C¶ ¯"¬·p¾%Ë%¦-''b-§ª¦¹"%w]Â"zKªw"¦ò¦-zou²/"«''b-§bzK%;ó-w6w4~

$&%¡!'%H #)( %H " *"( '%H " (-, ;BFF (6HO#`I

x-bª{zoIb¡"zoÂÀw"¦2»w"¦¹zÀ§oª{zK¦ÁÄw"y{£""pª{-«¾

% # 0% /218324¸C¯"¯"¯&58¯K|4¯6¾

aÒ2ª'zKo¸ÁÎ¾{¸2ÐOy{Â4­K¸4ËV¾{¸pa4§b-zKª¦zKo¸¨¾e¶ ¯"|·p¾Z<L % O C# (
u "'zKVª¦d
r
a w6ª'ª´§oò4
 ¯6¸r
u zo²R"e
 ~[
a Ò-pª¦£"zowèAzobyw6£¾
aÒ2ª'zKo¸Î¾{¸<p

¦zo Ñ

éòzoz8¸RËV¾*¶ ¯"¬·p¾

{zKw6b¦-ª¦£

%1TY;lU

#  #)( b
% 2%tUj	Á¾÷{zK§z

%w]Â"zKªw"¦ÿ¦zou²/"4¨²¢ª{

-ª§zo'z°¡3w6bª´w6x2y{zKOj

x$&%WTY ( ºlU # %/ %~(!, >S .~#  % 8$&%H¡!'%H #)( %H " Z ( % , !>%Hº ( %WsP% ( j " lU6/Qu
M%+Uuï  \ # % # %/"¸o3 5o¾

2w6w4¾

[^a m

¡Kò

#% 

( oL&a

_

Ù¢ÚÛ{ÜÞÝµÜ2ßÅàá2âã#ä8å

a'zK§8¸ØÃ¾¶so6±"±"±Á·p¾8¿O¦}z*2'z"-;"zKyzo'¦-²¢zK¦}yzKw6b¦-ª¦£ª´¦c%wKÂ"zKª´w"¦¤¦-zou²/"K¾D$&%TY ( âlU #
(-, >:	 # H ¡â> %>
 Z ( % , ;d
 %Hâ ( %qpE%Hâº  # %C a # %;A! # =  #  " $&%¡ " "$# /Q> %â ¸e¬"¬A
 5¬"Ì"¬¾
a4®KUª¸-¾¶ ¯"|·p¾/ý§¦-''b2§ª{¦«"/w]Â"zKªw"¦
% (!, >O
Ò2bª¦-§oª{Ò8y{z"¾$&%TY ( ºl
 U # %/ P
 9 # %>W
 Z
/> %Hº ¸H"o Ì"ÌA5oO6] |¾

¦zou²/"4j

-w6w6x2w"zKx2w"'zKÅ¦«zcé

( % , !>%Hº ( %pE%Hâº  # % Ca # 
% ;qº # =

%0/
%

ÏA{

$&%¡ " "$#`_

 # "

a4®KUª¸¾%¶ ¯"Ì·p¾i{IzKw6b¦2ª¦£M%w]Â"zKªw"¦ÿxzKyª{zoÄ¦zou²/"4¤x2w"'zKÿ¦ -z»©ª´¦-ª¤- 
 zK§pª{Ò-ª{¦
yzK¦£" Ò-bª¦-§oªÒ2y{z"~%r¦ z°§oª{zK¦#Ow"y{£""bª{-
-bª¦£©z
Yp 'zK§b-¦-ª&'#z"¾L$&%TY ( â
 lU # %0/ %x(!,
>S z # !¡d
 %>
 $&%¡& % C# ( %H " Z ( % , ;d
 %Hâ ( % \ O # %.
 7z& % # %0/¸- ÁÌA
o 5Á Q3
] ±4¾

E
% (!,
T  ( âlU # 0% / 
Y

vªw"¦I¸ ¾/¶so6±"±"±Á·p¾Å
¬O]#¾

x2bw"¦-§bÑuw"¦-4ÑEx-¦-

>3	 #H ¡>%H>YZ

w"y{£""pª{-

j"ïé

Ïq{

y{zKw6p¦-ª¦£

( % , !>%Hº ( %pE%Hâº  # % Ca # }
% ;A! # =

%wKÂ"zKbªw"¦û¦-zo²*"4o¾<$&%
 #  " $&%¡ " "$# /Q> %â ¸¬6
 ±|5

èAzob©w4¸Av¾{¸<p ÎCzKw6py¸#-¾/¶ ¯6±Á·p¾ ËÄw"-w"y¦-zou²/"K~ea4zK©w"¦Áª´§oÃw"¦- zôÒ2zKª{¡"zK¦-zKo¾»¥T¦û¨¾gÏ¤¾
a-w"§b#'zoK¸¨v¾åae¾­{zo²¢ª{'o¸q{R¾ uÃ¾òm¨w"¦-w"yE¸]-¾ È ¾3{IzK©­zoÿ¶2-o¾·p¸pE%Hâº  # %Ca # %;Aº # =  #  "
$&%H¡ ">"å# /Qd %Hâ> 1f¸2V©''zob2w"«~)¢
u "b4ÑuØ¢y´yw"¦-
¸2ÌA5]6Ì¾
ü

zob¤
¸Au}¾{¸p

ü

¦£¸÷é

Bh )# (2I

w6x8y{zKo¾

¾+{R¾{¸+{w"Å¸

ª´Ã-

U;2%

{w"bª'®ozK¦
¸Aae¾¶ ¯"|·p¾
2 # k
 1Nd4¸¬"|O6
] 5¬"¬o¾

ü
zK§pª{Ò-ª{¦

%  #)(

%

%i(

¾{¸zp

ÐVpw6Ò2-ª§ow"yVw"¦-

zK§obbª{¡"z

{IzK2¦£¸+m­¾+a¾¶ ¯·p¾¤Êrª´¦£Àzo¡"y´ª{¦-w]Â

y{zK¦£"

©zKy´°j"«§¦Áª¦-£"zK¦-§z

§­Ò2-w6ª{¦Þw"¦-Þ©ª¦4Ñ

L$-XQXX

Ò-bª¦2§oª{Ò2y{zOj"O2w6w»°ª¦-ª¦£­"*Ò-"x2w6x8ªyª'ª´§34¦^²¢y{zK£"z"¾

%YT­s¡&%r;O%H " a %â# % 2%+U

\

[ m]n

O! # %$&%¡ " "$# /Q>%â'1436¸C¯6]^ 58¯6]L¾

Journal of Artificial Intelligence Research 18 (2003) 263-313

Submitted 08/02; published 04/03

Exploiting Contextual Independence In Probabilistic Inference
David Poole

poole@cs.ubc.ca

Department of Computer Science,
University of British Columbia,
2366 Main Mall, Vancouver, B.C., Canada V6T 1Z4
http://www.cs.ubc.ca/spider/

Nevin Lianwen Zhang

lzhang@cs.ust.hk

Department of Computer Science,
Hong Kong University of Science and Technology, Hong Kong,
http://www.cs.ust.hk/˜lzhang/

Abstract
Bayesian belief networks have grown to prominence because they provide compact representations for many problems for which probabilistic inference is appropriate, and there are algorithms
to exploit this compactness. The next step is to allow compact representations of the conditional
probabilities of a variable given its parents. In this paper we present such a representation that
exploits contextual independence in terms of parent contexts; which variables act as parents may
depend on the value of other variables. The internal representation is in terms of contextual factors (confactors) that is simply a pair of a context and a table. The algorithm, contextual variable
elimination, is based on the standard variable elimination algorithm that eliminates the non-query
variables in turn, but when eliminating a variable, the tables that need to be multiplied can depend
on the context. This algorithm reduces to standard variable elimination when there is no contextual
independence structure to exploit. We show how this can be much more efficient than variable
elimination when there is structure to exploit. We explain why this new method can exploit more
structure than previous methods for structured belief network inference and an analogous algorithm
that uses trees.

1. Introduction
Probabilistic inference is important for many applications in diagnosis, perception, user modelling,
and anywhere there is uncertainty about the state of the world from observations. Unfortunately
general probabilistic inference is difficult both computationally and in terms of the number of probabilities that need to be specified. Belief (Bayesian) networks (Pearl, 1988) are a representation of
independence amongst random variables. They are of interest because the independence is useful
in many domains, they allow for compact representations for many practical problems, and there
are algorithms to exploit the compact representations. Note that even approximate inference is
computationally difficult in the worst case (Dagum and Luby, 1993).
Recently there has been work to extend belief networks by allowing more structured representations of the conditional probability of a variable given its parents (D’Ambrosio, 1995). This has been
in terms of either causal independencies (Heckerman and Breese, 1994; Zhang and Poole, 1996), parametric forms such as sigmoidal Bayesian networks (Neal, 1992; Saul, Jaakkola and Jordan, 1996), or
by exploiting contextual independencies inherent in stating the conditional probabilities in terms of
rules (Poole, 1993) or trees (Smith, Holtzman and Matheson, 1993; Boutilier, Friedman, Goldszmidt
and Koller, 1996). In this paper we show how an algorithm that exploits conditional independence
©2003 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

POOLE & ZHANG

for efficient inference in belief networks can be extended to also exploit contextual independence.
Poole (1997) provides an earlier, less efficient, version in terms of rules. Zhang and Poole (1999)
give an abstract mathematical analysis of how contextual independence can be exploited in inference.
Section 2 introduces belief networks and an algorithm, variable elimination (VE) (Zhang and
Poole, 1994) or Bucket Elimination for belief assessment (Dechter, 1996), for computing posterior
probabilities in belief that is based on nonlinear dynamic programming (Bertelè and Brioschi, 1972).
Section 3 presents a representation for conditional probabilities that lets us state contextual independence in terms of confactors. Section 4 shows how the VE algorithm can be extended to exploit
the contextual independence in confactors. Section 5 shows how we can improve efficiency by
reducing the amount of splitting. Section 6 gives some empirical results on standard and random
networks. The details of the experiments are given in Appendix A. Section 7 gives comparisons to
other proposals for exploiting contextual independencies. Section 8 presents conclusions and future
work.

2. Background
In this section we present belief networks and an algorithm, variable elimination, to compute the
posterior probability of a set of query variables given some evidence.
2.1 Belief Networks
We treat random variables as primitive. We use upper case letters to denote random variables. The
domain of a random variable X, written dom(X), is a set of values. If X is a random variable and
v ∈ dom(X), we write X=v to mean the proposition that X has value v. The function dom can be
extended to tuples of variables. We write tuples of variables in upper-case bold font. If X is a tuple
of variables, X1 , . . . , Xk , then dom(X) is the cross product of the domains of the variables. We
write X1 , . . . , Xk  = v1 , . . . , vk  as X1 = v1 ∧ . . . ∧ Xk = vk . This is called an instantiation of X.
For this paper we assume there is a finite number of random variables, and that each domain is finite.
We start with a total ordering X1 , . . . , Xn of the random variables.
Definition 1 The parents of random variable Xi , written πXi , are a minimal1 set of the predecessors
of Xi in the total ordering such that the other predecessors of Xi are independent of Xi given πXi . That
is πXi ⊆ {X1 , . . . , Xi−1 } such that P(Xi |Xi−1 . . . X1 ) = P(Xi |πXi ).
A belief network (Pearl, 1988) is an acyclic directed graph, where the nodes are random variables2 . We use the terms node and random variable interchangeably. There is an arc from each
element of πXi into Xi . Associated with the belief network is a set of probabilities of the form
P(X|πX ), the conditional probability of each variable given its parents (this includes the prior probabilities of those variables with no parents).
By the chain rule for conjunctions and the independence assumption:
n

P(X1 , . . . , Xn ) =
P(Xi |Xi−1 . . . X1 )
i=1

1. If there is more than one minimal set, any minimal set can be chosen to be the parents. There is more than one minimal
set only when some of the predecessors are deterministic functions of others.
2. Some people like to say the nodes are labelled with random variables. In the definition of a graph, the set of nodes
can be any set, in particular, they can be a set of random variables. The set of arcs is a set of ordered pairs of random
variables.

264

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

Y

A

Z

B

C

D

E

A
a
a
a
a
a
a
a
a
a
a
a
a
a
a
a
a

B
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b
b

C
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c

D
d
d
d
d
d
d
d
d
d
d
d
d
d
d
d
d

P(e|ABCD)
0.55
0.55
0.55
0.55
0.3
0.3
0.3
0.3
0.08
0.08
0.025
0.5
0.08
0.08
0.85
0.5

Figure 1: A simple belief network and a conditional probability table for E.

=

n


P(Xi |πXi )

(1)

i=1

This factorization of the joint probability distribution is often given as the formal definition of a
belief network.
Example 1 Consider the belief network of Figure 1. This represents a factorization of the joint
probability distribution:
P(A, B, C, D, E, Y , Z)
= P(E|ABCD)P(A|YZ)P(B|YZ)P(C|YZ)P(D|YZ)P(Y )P(Z)
If the variables are binary3 , the first term, P(E|ABCD), requires the probability of E for all 16 cases
of assignments of values to A, B, C, D. One such table is given in Figure 1.
2.2 Belief Network Inference
The task of probabilistic inference is to determine the posterior probability of a variable or variables
given some observations. In this section we outline a simple algorithm for belief net inference called
variable elimination (VE) (Zhang and Poole, 1994; Zhang and Poole, 1996) or bucket elimination
for belief assessment (BEBA) (Dechter, 1996), that is based on the ideas of nonlinear dynamic
programming (Bertelè and Brioschi, 1972)4 and is closely related to SPI (Shachter, D’Ambrosio and
3. In this and subsequent examples, we assume that variables are Boolean (i.e., with domain {true, false}). If X is a
variable, X=true is written as x and X=false is written as x, and similarly for other variables. The theory and the
implementations are not restricted to binary variables.
4. Bertelè and Brioschi (1972) give essentially the same algorithm, but for the optimization problem of finding a minimization of sums. In VE, we use the algorithm for finding the sum of products. VE is named because of the links to

265

POOLE & ZHANG

Del Favero, 1990). This is a query oriented algorithm that exploits the conditional independence
inherent in the network structure for efficient inference, similar to how clique tree propagation
exploits the structure (Lauritzen and Spiegelhalter, 1988; Jensen, Lauritzen and Olesen, 1990).
Suppose we observe variables E1 , . . . , Es have corresponding values o1 . . . os . We want to determine the posterior probability of variable X, the query variable, given evidence E1 =o1 ∧ . . .∧Es =os :
P(X|E1 =o1 ∧ . . . ∧ Es =os ) =

P(X ∧ E1 =o1 ∧ . . . ∧ Es =os )
P(E1 =o1 ∧ . . . ∧ Es =os )

The denominator, P(E1 =o1 ∧ . . . ∧ Es =os ), is a normalizing factor:

P(X=v ∧ E1 =o1 ∧ . . . ∧ Es =os )
P(E1 =o1 ∧ . . . ∧ Es =os ) =
v∈dom(X)

The problem of probabilistic inference can thus be reduced to the problem of computing the probability of conjunctions.
Let Y = {Y1 , . . . , Yk } be the non-query, non-observed variables (i.e., Y = {X1 , . . . , Xn } − {X} −
{E1 , . . . , Es }). To compute the marginal distribution, we sum out the Yi ’s:
P(X ∧ E1 =o1 ∧ . . . ∧ Es =os )


···
P(X1 , . . . , Xn ){E1 =o1 ∧...∧Es =os }
=
Yk

=


Yk

Y1

···

n


P(Xi |πXi ){E1 =o1 ∧...∧Es =os }

Y1 i=1

where the subscripted probabilities mean that the associated variables are assigned the corresponding
values.
Thus probabilistic inference reduces to the problem of summing out variables from a product
of functions. To solve this efficiently we use the distribution law that we learned in high school:
to compute a sum of products such as xy + xz efficiently, we distribute out the common factors
(which here is x) which results in x(y + z). This is the essence of the VE algorithm. We call the
elements multiplied together “factors” because of the use of the term in mathematics. Initially the
factors represent the conditional probability tables, but the intermediate factors are just functions on
variables that are created by adding and multiplying factors.
A factor on variables V1 , . . . , Vd is a representation of a function from dom(V1 ) × . . . × dom(Vd )
into the real numbers.
Suppose that the Yi ’s are ordered according to some elimination ordering. We sum out the
variables one at at time.
To sum out a variable Yi from a product, we distribute all of the factors that don’t involve Yi
out of the sum. Suppose f1 , . . . , fk are some functions of the variables that are multiplied together
(initially these are the conditional probabilities), then


f1 . . . fk = f1 . . . fm
fm+1 . . . fk
Yi

Yi

the algorithm of Bertelè and Brioschi (1972); they refer to their basic algorithm as The elimination of variables one
by one, which is exactly what we do. Bertelè and Brioschi (1972) also describe good elimination ordering heuristics
and refinements such as eliminating variables in blocks and forms of conditioning which we don’t consider here.
The only difference between VE and BEBA is that BEBA requires an a priori elimination ordering (and exploits
the prior ordering for efficiency), whereas the VE allows for dynamic selection of which variable to eliminate next.

266

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

To compute P(X|E1 =o1 ∧ . . . ∧ Es =os )
Let F be the factors obtained from the original conditional probabilities.
1. Replace each f ∈ F that involves some Ei with f{E1 =o1 ,...,Es =os } .
2. While there is a factor involving a non-query variable
Select non-query variable Y to eliminate
Set F = eliminate(Y , F).
3. Return renormalize(F)
Procedure eliminate(Y, F):
Partition F into
{f1 , . . . , fm } that don’t contain Y and
{fm+1
, . . . , fr } that do contain Y
Compute f = Y fm+1 ⊗t . . . ⊗t fr
Return {f1 , . . . , fm , f }
Procedure renormalize({f1 , . . . , fr }):
Compute f = f
1 ⊗ t . . . ⊗ t fr
Compute c = X f
Return f /c

% c is normalizing constant
% divide each element of f by c

Figure 2: The tabular VE algorithm
where f1 . . . fm are those functions that don’t involve Yi , and f
m+1 . . . fk are those that do involve Yi .
We explicitly construct a representation for the new function Yi fm+1 . . . fk , and continue summing
out the remaining variables. After all the Yi ’s have been summed out, the result is a function on X
that is proportional to X’s posterior distribution.
In the tabular implementation of the VE algorithm (Figure 2), a function of d discrete variables
V1 , . . . , Vd , is represented as a d-dimensional table (which can be implemented, for example, as a
d-dimensional array, as a tree of depth d, or, as in our implementation, as a 1-dimensional array based
on a lexicographic ordering on the variables). If f is such a table, let variables(f ) = {V1 , . . . , Vd }.
We sometimes write f as f [V1 , . . . , Vd ] to make the variables explicit. f is said to involve Vi if
Vi ∈ variables(f ).
There are three primitive operations on tables: setting variables, forming the product of tables,
and summing a variable from a table.
Definition 2 Suppose C is a set of variables, c is an assignment C = v, and f is a factor on variables
X. Let Y = X − C, let Z = X ∩ C, and let Z = v be the assignment of values to Z that assigns the
same values to elements of Z as c does. Define set(f , c) be the factor on Y given by:
set(f , c)(Y) = f (Y, Z=v ).
That is, set(f , c) is a function of Y, the variables of f that are not in c, that is like f , but with some
values already assigned. Note that, as a special case of this, if c doesn’t involve any variable in f
then set(f , c) = f .
Example 2 Consider the factor f (A, B, C, D, E) defined by the table of Figure 1. Some examples
of the value of this function are f (a, b, c, d, e) = 0.55, and f (a, b, c, d, e) = 1 − 0.08 = 0.92.
set(f , a ∧ b ∧ e) is a function of C and D defined by the table:
267

POOLE & ZHANG

C
c
c
c
c

D
d
d
d
d

value
0.08
0.08
0.025
0.5

Definition 3 The product of tables f1 and f2 , written f1 ⊗t f2 is a table on the union of the variables
in f1 and f2 (i.e., variables(f1 ⊗t f2 ) = variables(f1 ) ∪ variables(f2 )) defined by:
(f1 ⊗t f2 )(X, Y, Z) = f1 (X, Y)f2 (Y, Z)
where Y is variables(f1 ) ∩ variables(f2 ), X is variables(f1 ) − variables(f2 ), and Z is variables(f2 ) −
variables(f1 ).
Note that ⊗t is associative and commutative.
To construct the product of tables, fm+1 ⊗t · · · ⊗t fk , we union all of the variables in fm+1 . . . fk , say
these are X1 , . . . , Xr . Then we construct an r-dimensional table so there is an entry in the table for
each combination v1 , . . . , vr where vi ∈ dom(Xi ). The value for the entry corresponding to v1 , . . . , vr
is obtained by multiplying the values obtained from each fi applied to the projection of v1 , . . . , vr
onto the variables of fi .

Definition 4 The summing out of variable Y from table f , written Y f is the table with variables
Z = variables(f ) − {Y } such that5


(
f )(Z) =
f (Z ∧ Y =vi )
Y

vi ∈dom(Y )

where dom(Y ) = {v1 , . . . , vs }.
Thus, to sum out Y , we reduce the dimensionality of the table by one (removing the Y dimension),
the values in the resulting table are obtained by adding the values of the table for each value of Y .
Example 3 Consider eliminating B from the factors of Example 1 (representing the belief network
of Figure 1), where all of the variables are Boolean. The factors that contain B, namely those factors
that represent P(E|ABCD) and P(B|YZ), are removed from the set of factors. We construct a factor
f1 (A, B, C, D, E, Y , Z) = P(E|A, B, C, D) ⊗t P(B|Y , Z), thus, for example,
f1 (a, b, c, d, e, y, z) = P(e|a ∧ b ∧ c ∧ d)P(b|y ∧ z)
f1 (a, b, c, d, e, y, z) = P(e|a ∧ b ∧ c ∧ d)P(b|y ∧ z)
f1 (a, b, c, d, e, y, z) = P(e|a ∧ b ∧ c ∧ d)P(b|y ∧ z)
f1 (a, b, c, d, e, y, z) = P(e|a ∧ b ∧ c ∧ d)P(b|y ∧ z)
and similarly for the other values of A . . . Z. We then need to sum out B from f1 , producing
f2 (A, C, D, E, Y , Z) where, for example,
f2 (a, c, d, e, y, z) = f1 (a, b, c, d, e, y, z) + f1 (a, b, c, d, e, y, z).
f2 is then added to the set of factors. Note that the construction of f1 is for exposition only; we don’t
necessarily have to construct a table for it explicitly.
5. This may look like a circular definition, but the left side defines the summing tables, whereas on the right side we are
summing numbers.

268

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

3. Contextual Independence
In this section we give a formalization of contextual independence. This notion was first introduced
into the influence diagram literature (Smith et al., 1993). We base our definitions on the work of
Boutilier et al. (1996).
Definition 5 Given a set of variables C, a context on C is an assignment of one value to each variable
in C. Usually C is left implicit, and we simply talk about a context. We would say that C are the
variables of the context. Two contexts are incompatible if there exists a variable that is assigned
different values in the contexts; otherwise they are compatible. We write the empty context as true.
Definition 6 (Boutilier et al., 1996) Suppose X, Y, Z and C are sets of variables. X and Y are
contextually independent given Z and context C=c, where c ∈ dom(C), if
P(X|Y=y1 ∧ Z=z1 ∧ C=c) = P(X|Y=y2 ∧ Z=z1 ∧ C=c)
for all y1 , y2 ∈ dom(Y) for all z1 ∈ dom(Z) such that P(Y=y1 ∧ Z=z1 ∧ C=c) > 0 and P(Y=y2 ∧
Z=z1 ∧ C=c) > 0.
We also say that X is contextually independent of Y given Z and context C=c. Often we will
refer to the simpler case when the set of variables Z is empty; in this case we say that X and Y are
contextually independent given context C=c.
Example 4 Given the belief network and conditional probability table of Figure 1,
• E is contextually independent of {C, D, Y , Z} given context a ∧ b.
• E is contextually independent of {C, D, Y , Z} given {B} and context a.
• E is not contextually independent of {C, D, Y , Z} given {A, B} and the empty context true.
• E is contextually independent of {B, D, Y , Z} given context a ∧ c.
• E is contextually independent of {A, B, C, D, Y , Z} given B and context a ∧ c ∧ d.
3.1 Where Does Contextual Independence Arise?
Most of the examples in this paper are abstract as they are designed to show off the various features
of the algorithms or to show pathological cases. In this section we will give some examples to show
natural examples. We are not claiming that contextual independence is always present or able to
be exploited. Exploiting contextual independence should be seen as one of the tools to solve large
probabilistic reasoning tasks.
Example 5 When a child goes into an emergency ward the staff may want to determine if they are
a likely carrier of chicken pox (in order to keep them away from other children). If they haven’t
been exposed to chicken pox within the previous few weeks, they are unlikely to be a carrier. Thus
whether they are a carrier is independent of the other background conditions given they haven’t been
exposed. If they have been exposed, but have not had chicken pox before they are likely to be a
carrier. Thus whether they are a carrier is independent of the other background conditions given
they have been exposed and haven’t had chicken pox before. The other case can involve many other
variables (e.g., the severity and the age of the last time they had chicken pox) to determine how likely
the child is to be a carrier.
269

POOLE & ZHANG

Example 6 Many engineered systems are designed to insulate something from other conditions. The
classic example is central air conditioning (heating and/or cooling in a house). The temperature inside
a house depends on the outside temperature if the air conditioning is off. If the air conditioning is on,
the temperature depends on the setting of the thermostat and not on the outside temperature. Thus the
inside temperature is contextually independent of the outside temperature given the air conditioning
is on and is contextually independent of the thermostat setting given the air conditioning is off.
Example 7 Consider a case where someone is to make a decision based on a questionnaire and the
questions asked depend on previous answers. In this case the decision6 is contextually independent
of the answers to the questions that are not asked given the context of the questions asked. For
example, consider a questionnaire to determine if a bank customer should get a loan that starts
asking the customer if they rent or own their current home. If they own, they are asked a number of
questions about the value of the house which are not asked if they rent. The probability that they get
a loan is contextually independent of the value of the home (and the other information that was not
available to the decision maker) given that the applicant rents their home.
Example 8 When learning a decision network from data, it is often advantageous to build a decision
tree for each variable given its parents (Friedman and Goldszmidt, 1996; Chickering, Heckerman
and Meek, 1997). These decision trees provide contextual independence (a variable is independent
of it’s predecessors given the context along a path to a leaf in the tree). The reason that this is a
good representation to learn is because there are fewer parameters and more fine control over adding
parameters; splitting a leaf adds many fewer parameters than adding a new parent (adding a new
variable to every context).
3.2 Parent Contexts and Contextual Belief Networks
We use the notion of contextual independence for a representation that looks like a belief network, but
with finer-grain independence that can be exploited for efficient inference in the contextual variable
elimination algorithm.
As in the definition of a belief network, let’s assume that we have a total ordering of the variables,
X 1 , . . . , Xn .
Definition 7 Given variable Xi , we say that C=c, where C ⊆ {Xi−1 . . . X1 } and c ∈ dom(C), is a
parent context for Xi if Xi is contextually independent of the predecessors of Xi (namely {Xi−1 . . . X1 })
given C=c.
What is the relationship to a belief network? In a belief network, the rows of a conditional probability
table for a variables form a set of parent contexts for the variable. However, there is often a much
smaller set of smaller parent contexts that covers all of the cases.
Example 9 Consider the belief network and conditional probability table of Figure 1. The predecessors of variable E are A, B, C, D, Y , Z. A set of minimal parent contexts for E is {{a, b}, {a, b},
{a, c}, {a, c, d, b}, {a, c, d, b}, {a, c, d}}. This is a mutually exclusive and exhaustive set of parent
contexts. The probability of E given values for its predecessors can be reduced to the probability of
6. To make this a probabilistic problem, and not a decision problem, consider that the probability is for a third party
to determine the probability distribution over the possible decisions. A similar analysis can be carried out to exploit
contextual independence for decisions (Poole, 1995). The decision maker’s decisions can’t depend on information
she doesn’t have.

270

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

A
A=true

Y
A=false

B

0.55

Y=true

C

Z
D

0.3 0.08

Y=false

0.77

0.27

0.17

P(b)
B

0.025

0.5
0.85

Z
Z=true

Z=false

0.29

Y

P(e)
0.79

0.59

P(d)
Figure 3: Tree-structured representations of the conditional probabilities for E, B, and D given their
parents. Left branches correspond to true and right branches to false. Thus, for example,
P(e|a ∧ b) = 0.55, P(e|a ∧ b) = 0.3, P(e|a ∧ c ∧ d ∧ b) = 0.025 etc.

E given a parent context. For example:
P(e|a, b, c, d, y, z) = P(e|a, b)
P(e|a, b, c, d, y, z) = P(e|a, c)
.P(e|a, b, c, d, y, z) = P(e|a, c)
In the belief network, the parents of E are A, B, C, D. To specify the conditional probability of E
given its parents, the traditional tabular representation (as in Figure 1) require 24 = 16 numbers
instead of the 6 needed if we were to use the parent contexts above. Adding an extra variable as a
parent to E doubles the size of the tabular representation, but if it is only relevant in a single context
it may only increase the number of parent contexts by one.
We can often (but not always) represent contextual independence in terms of trees. The left side
of Figure 3 gives a tree-based representation for the conditional probability of E given its parents. In
this tree, internal nodes are labelled with parents of E in the belief network. The left child of a node
corresponds to the variable labelling the node being true, and the right child to the variable being
false. The leaves are labelled with the probability that E is true. For example P(e|a ∧ b) = 0.3,
irrespectively of the value for C or D. In the tree-based representation the variable (E in this case)
271

POOLE & ZHANG

is contextually independent of its predecessors given the context defined by a path through the tree.
The paths through the tree correspond to parent contexts.
Before showing how the structure of parent contexts can be exploited in inference, there are a
few properties to note:
• The elements of a mutually exclusive and exhaustive set of parent contexts are not always the
minimal parent contexts. For example, suppose we have a variable A with parents B and C,
all of which are Boolean. Suppose probability of a is p1 when both B and C are true and
probability p2 otherwise. One mutually exclusive and exhaustive set of parent contexts for
A is {b ∧ c, b ∧ c, b}. b ∧ c is not minimal as c is also a parent context. Another mutually
exclusive and exhaustive set of parent contexts for this example is {b ∧ c, b ∧ c, c}. The set
of minimal parent contexts, {b ∧ c, b, c}, isn’t a mutually exclusive and exhaustive set as the
elements are not pairwise incompatible.
One could imagine using arbitrary Boolean formulae in the contexts. This was not done as it
would entail using theorem proving (or a more sophisticated subsumption algorithm) during
inference. We doubt that this would be worth the extra overhead for the limited savings.
• A compact decision tree representation of conditional probability tables (Boutilier et al., 1996)
always corresponds to a compact set of parent contexts (one context for each path through the
tree). However, a mutually exclusive and exhaustive set of parent contexts cannot always be
directly represented as a decision tree (as there isn’t always a single variable to split on). For example, the mutually exclusive and exhaustive set of contexts {{a, b}, {a, c}, {b, c}, {a, b, c}, {a, b, c}}
doesn’t directly translate into a decision tree. More importantly, the operations we perform
don’t necessarily preserve the tree structure. Section 4.12 shows how we can do much better
than an analogous tree-based formulation of our inference algorithm.
Definition 8 A contextual belief network is an acyclic directed graph where the nodes are random
variables. Associated with each node Xi is a mutually exclusive and exhaustive set of parent contexts,
i , and, for each π ∈ i , a probability distribution P(Xi |π ) on Xi . Thus a contextual belief network
is like a belief network, but we only specify the probabilities for the parent contexts.
For each variable Xi and for each assignment Xi−1 =vi−1 , . . . , X1 =v1 of values to its preceding
v ...v1
variables, there is a compatible parent context πXi−1
. The probability of a complete context (an
i
assignment of a value to each variable) is given by:
P(X1 =v1 , . . . , Xn =vn )
n

P(Xi =vn |Xi−1 =vi−1 , . . . , X1 =v1 )
=
i=1

=

n


v

P(Xi =vi |πXi−1
i

...v1

)

(2)

i=1

This looks like the definition of a belief network (equation (1)), but which variables act as the parents
depends on the values. The numbers required are the probability of each variable for each element
of the mutually exclusive and exhaustive set of parent contexts. There can be many fewer of these
than the number of assignments to parents in a belief network. At one extreme, there are the same
number; at the other extreme there can be exponentially many more assignments of values to parents
than the number of elements of a mutually exclusive and exhaustive set of parent contexts.
272

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

3.3 Parent Skeletons
Although the definition of a contextual belief network specifies the contextual independence we
want, it doesn’t give us a way to organize the parent contexts (in much the same way as a belief
network doesn’t specify the representation of a conditional probability table). We use the concept
of a parent skeleton as a way to organize the parent contexts; we want to use the indexing provided
by tables while still allowing for the ability to express context-specific independence.
The notion of a parent context is more fine-grained than that of a parent (the set of parents
corresponds to many parent contexts). When there is no context-specific independence, we would
like to not have to consider the parent contexts explicitly, but consider just the parents. We will use a
parent skeleton to cover both parents and parent contexts as special cases, and to interpolate between
them, when the independence depends on some context as well as all values of some other variables.
Definition 9 A parent skeletal pair for variable X is a pair c, V  where c is a context on the
predecessors of X and V is a set of predecessors of X such that X is contextually independent of its
predecessors given V and context c. Note that
context is c ∧ V = v. A parent skeleton for
 a parent

variable X is a set of parent skeletal pairs, { cj , Vj : 0 < j ≤ k}, where the cj are mutually exclusive

and exhaustive (i.e., ci and cj are incompatible if i 
= j, and kj=1 cj ≡ true).
Example 10 A parent skeleton for E from Example 9 is {a, {B}, a ∧ c, {}, a ∧ c ∧ d, {B},
a ∧ c ∧ d, {} .
Parent skeletons form the basis of a representation for contextual belief networks.
For each


variable, X, you select a parent skeleton such that for each parent skeleton pair cj , Vj in the parent
context, cj ∧ Vj = vj is a parent context for X. For each such parent context pair we specify a
probability distribution P(X|cj ∧ Vj = vj ).
3.4 Contextual Factors
Whereas the VE algorithm uses tables both as a representation for conditional probabilities and for
the intermediate representations, the contextual variable elimination algorithm defined below uses
a hybrid of tables and rules (Poole, 1997) that we call contextual factors or confactors. Confactors
cover both tables and rules as special cases.
Definition 10 A contextual factor or confactor is a pair of the form:
c, t
where c is a context, say X1 =vk ∧ . . . ∧ Xk =vk , and t is a table that represents a function on variables
Xk+1 , . . . , Xm , where {X1 , . . . , Xk } and {Xk+1 , . . . , Xm } are disjoint sets of variables. c is called the
body of the confactor and t is called the table of the confactor.
A confactor represents a partial function (Zhang and Poole, 1999) from the union of the variables.
The function only has a value when the context is true, and the value of the function is obtained by
looking up the value in the table.
Just as tables can be used to represent conditional probabilities, confactors can be used to represent
conditional probabilities when there is context-specific independence. In particular, a set of parent
contexts can be represented as a set of confactors with mutually exclusive and exhaustive bodies.
Given a parent skeleton for variable X we can construct a set of confactors for X as follows: for each
c, V  in the parent skeleton for X, we construct a confactor c, t({X} ∪ V ) where t({X = x} ∧ V =
v) = P(X = x|V = v ∧ c).
273

POOLE & ZHANG

Definition 11 A confactor is applicable on a context if the body of the confactor is compatible with
the context.
Definition 12 Given a confactor r = X1 =vk ∧ . . . ∧ Xk =vk , t[Xk+1 , . . . , Xm ] and a context c that
assigns at least the variables X1 . . . Xm , if r is applicable in c, the value of the context c with respect
to the confactor r is the value of t[Xk+1 = vk+1 , . . . , Xm = vm ] where vk+1 , . . . , vm are the values
assigned to Xk+1 , . . . , Xm in c.
Definition 13 A set R of confactors represents a conditional probability P(Xi |X1 . . . Xi−1 ) if the
bodies of the confactors are mutually exclusive and exhaustive, and if P(Xi = vi |X1 = v1 ∧ . . . ∧
Xi−1 = vi−1 ) is equal to the value of the context X1 = v1 ∧ . . . ∧ Xi−1 = vi−1 ∧ Xi = vi with respect
to the (unique) confactor in R that is applicable in that context.
Intuitively, the confactors that represent a contextual belief network are a way to organize the
parent contexts. The idea is to represent the parent contexts in tables when there is no context-specific
independence, and when some variables are independent of their predecessors in some context, then
that context can be made a body of the confactors.
Example 11 Consider the conditional probabilities represented in Figure 3. E is independent of its
predecessors given {B} and context a. This leads to the confactor:
a, t1 [B, E]

(3)

E is independent of its predecessors given context a ∧ c. This leads to the confactor:
a ∧ c, t2 [E]

(4)

E is independent of its predecessors given {B} and context a ∧ c ∧ D. This leads to the confactor:
a ∧ c ∧ d, t3 [B, E]

(5)

E is independent of its predecessors given context a ∧ c ∧ d. This leads to the confactor:
a ∧ c ∧ d, t4 [E]

(6)

The full multiset of confactors corresponding to the trees of Figure 3 are given in Figure 4. The
fifth and sixth confactors give the conditional probability for B, and the last two confactors give the
conditional probability for D.
We can now rewrite the definition of a contextual belief network in terms of confactors:
If every conditional probability is represented by a set of confactors, the probability of
a complete context, c is the product of the values of c with respect to the confactors
that are applicable in c. For each complete context and for each variable there is one
confactor containing that variable that is applicable in that context.

4. Contextual Variable Elimination
The general idea of contextual variable elimination (CVE) is to represent conditional probabilities
in terms of confactors, and use the VE algorithm with the confactor representation rather than with
tables. The units of manipulation are thus finer grained than the factors in VE or the members of
the buckets of BEBA; what is analogous to a factor or a member of a bucket consists of multisets of
confactors. Given a variable to eliminate, we can ignore (distribute out) all of the confactors that don’t
274

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE




















P(E|A, B, C, D)

P(B|Y , Z)














B
true
a, true
false
false















a ∧ c ∧ d,








B
true
y, true
false
false

Z
true
false
true
false

E
true
false
true
false

B
true
true
false
false

Value
0.55 
0.45
0.3
0.7

E
true
false
true
false



E
Value 
a ∧ c, true 0.08
false 0.92

Value
E
Value 
0.025  
a ∧ c ∧ d, true 0.5
0.975
0.85
false 0.5
0.15

Value
Value 
0.77   B
y, true 0.27
0.17
0.23
false 0.73
0.83


D



  true
 D

Value

z, true
P(D|Y , Z)
z, true 0.29



false
0.71
false


false

Y
true
false
true
false

Value
0.79 
0.59
0.21
0.41

Figure 4: The confactors corresponding to the trees of Figure 3

275

POOLE & ZHANG

involve this variable. Where there is some contextual independence that goes beyond conditional
independence of variables, the savings can be substantial. If there is no contextual independence, all
of the confactors have empty contexts, and this algorithm reduces to VE.
This section introduces an abstract nondeterministic version of CVE. Section 5 presents a more
concrete version where we explain how to resolve much of the nondeterminism.
The input to CVE is:
• a multiset of confactors that consists of the union of the confactors that represent the conditional
probability distribution of each variable given its predecessors
• a set of query variables
• an observation that is a conjunction of assignments of values to some of the variables
We first consider the case with no observations. Observations are considered in Section 4.7.
Initially and after the elimination of each variable, we maintain a multiset of confactors with the
following program invariant:
The probability of a context c on the non-eliminated variables can be obtained by multiplying the values of context c associated with confactors that are applicable in context c.
For each complete context on the non-eliminated variables and for each variable there
is at least one confactor containing that variable that is applicable in that context7 .
The algorithm will not sum out a variable in all contexts in one step. Rather it will sum out a variable
in different contexts separately. Intermediate to being fully summed out, a variable will be summed
out in some contexts and not in others. The remaining variables should be interpreted relative to
whether the variable has been summed out in context c.
Like VE, the abstract algorithm is made up of the primitive operations of summing out a variable
and multiplying confactors, and also includes a primitive operation of confactor splitting that enables
the other two operations. All of these operations locally preserve this program invariant. They are
described in the next subsections.
4.1 Multiplying Contextual Factors
If we have two confactors with the same context:
b, t1 
b, t2 
we can replace them with their product:
b, t1 ⊗t t2 .
7. This second part of the invariant may not be so intuitive, but is important. For example, in Example 11, one may be
tempted to reduce confactor (6) to a ∧ c ∧ d, 0.5 (i.e., where the table is a function of no variables) as the contribution
of the confactors is the same independent of the value of E (the table t4 [E] has value 0.5 for each value of E in
confactor (6)). The first part of the invariant isn’t violated. However, if there were no other confactors containing
E that are applicable when a ∧ c ∧ d is true, after summing out E, we want the confactor a ∧ c ∧ d, 1, but before
summing out E we want the confactor a ∧ c ∧ d, 0.5 in order to maintain the first part of the invariant. We would
like to maintain the property that we only consider confactors containing E when eliminating E. The second part of
the invariant allows us to do this without treating this as a special case in our algorithm.

276

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

The program invariant is maintained, as any context incompatible with b isn’t affected by this
operation. Any context that is compatible with b, the product of the values of t1 and t2 on that context
is the same as the value of t1 ⊗t t2 on that context. The completeness part of the invariant isn’t
affected by multiplying.
4.2 Summing Out A Variable That Appears In The Table
Suppose we are eliminating Y , and have a confactor:
b, t
such that table t involves Y , and no other confactor that is compatible with b contains Y , we can
replace this confactor with

b,
t
Y

Note that after this operation Y is summed out in context b.
Correctness: To see why this is correct, consider a context c on the remaining variables (c doesn’t
give a value for Y ). If c isn’t compatible with b, it isn’t affected by this operation. If it is compatible
with b, by elementary probability theory:

P(c) =
P(c ∧ Y =vi )
i

By the program invariant, and because there are no other confactors containing Y that are compatible
with c, P(c ∧ Y =vi ) = pi p, for some product p of contributions of confactors that don’t involve
 Y.
Exactly the same confactors will be used for the different values of Y . Thus we have P(c) = p( i pi ),
and so we have maintained the first part of the program invariant. The second part of the program
invariant is trivially maintained.
4.3 Summing Out A Variable In The Body Of Confactors
Suppose we are eliminating Y , with domain {v1 , . . . , vk }, and have confactors:
b ∧ Y =v1 , T1 
...
b ∧ Y =vk , Tk 
such that there are no other confactors that contain Y whose context is compatible with b. We can
replace these confactors with the confactor:
b, T1 ⊕t . . . ⊕t Tk 
Where ⊕t is the additive analogue of ⊗t . That is, it follows definition 3, but using addition of the
values instead of multiplication.
Note that after this operation Y is summed out in context b.
Correctness: To see why this is correct, consider a context c on the remaining variables (c doesn’t
give a value for Y ). If c isn’t compatible with b, it isn’t affected by this operation. If it is compatible
with b, by elementary probability theory:

P(c) =
P(c ∧ Y =vi )
i

277

POOLE & ZHANG

we can distribute out all of the other confactors from the product and thus the first part of the invariant
is maintained. Note that the ⊕t operation is equivalent to enlarging each table to include the union
of all of the variables in the tables, but not changing any of the values, and then pointwise adding
the values of the resulting tables. The second part is trivially maintained.
The second part of the program invariant implies that we cannot have a confactor of the form
b ∧ Y =vi , pi  without a corresponding confactor for Y =vj , where i 
= j.
4.4 Confactor Splitting
In order to satisfy the prerequisites to be able to multiply confactors and sum out variables, sometimes
we need to split confactors.
If we have a confactor
b, t
we can replace it by the result of splitting it on a non-eliminated variable Y , with domain {v1 , . . . , vk }.
If Y doesn’t appear in t, splitting t on T results in the set of confactors:
b ∧ Y =v1 , t
...
b ∧ Y =vk , t
If Y does appear in t, the result is the set of confactors:
b ∧ Y =v1 , set(t, Y =v1 )
...
b ∧ Y =vk , set(t, Y =vk )
where set was defined in Definition 2.
Correctness: The program invariant is maintained as one of the new confactors is used for any
complete context instead of the original confactor. They both give the same contribution.
Example 12 Splitting the first confactor for P(E|A, B, C, D) in Figure 4 on Y gives two confactors:
B
true
a ∧ y, true
false
false

E
true
false
true
false

Value
0.55 
0.45
0.3
0.7

(7)

B
true
a ∧ y, true
false
false

E
true
false
true
false

Value
0.55 
0.45
0.3
0.7

(8)





278

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

Example 13 Splitting the first confactor for P(B|Y , Z) in Figure 4 on A gives two confactors:
B
true
a ∧ y, true
false
false

Z
true
false
true
false

Value
0.77 
0.17
0.23
0.83

(9)

B
true
a ∧ y, true
false
false

Z
true
false
true
false

Value
0.77 
0.17
0.23
0.83

(10)





The reason that we may want to do these two splits is that now we can multiply confactors (7) and
(9).
4.5 Examples of Eliminating Variables
The four operations above are all that is needed to eliminate a variable. A variable is eliminated
when it is summed out of all contexts.
Example 14 When we eliminate B from the confactors of Figure 4, we only need to consider the
four confactors that contain B. The preconditions for summing out B or for multiplying are not
satisfied, so we need to split. If we split the first confactor for P(E|A, B, C, D) on Y (as in Example
12) and split the first confactor for P(B|Y , Z) on A (as in Example 13), we produce two confactors,
(7) and (9), that can be multiplied producing:
B
true
true

true
a ∧ y, true
false
false
false
false

E
true
true
false
false
true
true
false
false

Z
true
false
true
false
true
false
true
false

Value
0.4235
0.0935
0.3465 
0.0765
0.069
0.249
0.161
0.581

(11)

This is the only confactor that contains B and is applicable in the context a ∧ y, so we can sum out
B from the table, producing the confactor:


E
true
a ∧ y, true
false
false

Z
true
false
true
false

Value
0.4925 
0.3425
0.5075
0.6575

(12)

The other nontrivial confactors produced when summing out B are:

E
Value 
a ∧ y, true 0.3675
false 0.6325

(13)

279

POOLE & ZHANG

E
true
a ∧ c ∧ d ∧ y, true
false
false

Value
0.21475 
0.70975
0.78525
0.29025


E
Value
a ∧ c ∧ d ∧ y, true 0.62725
false 0.37275


Z
true
false
true
false

(14)

(15)

See Example 19 below for some trivial confactors produced and how to avoid them.
These confactors should be contrasted with the factor on A, C, D, E, Y , Z (of size 32) that is
produced by eliminating B in VE.
Example 15 Suppose that instead we were to eliminate D from the confactors of Figure 4. This
example differs from the previous example as D appear in the bodies as well as in the tables.
The two confactors for P(E|A, B, C, D) that contain D, namely a ∧ c ∧ d, t3 [B, E] (confactor
(5)), and a ∧ c ∧ d, t4 [E] (confactor (6)) are both compatible with both confactors for P(D|Y , Z).
So we cannot sum out the variable or multiply any confactors.
In order to be able to multiply confactors, we can split confactor (5) on Z producing:
a ∧ c ∧ d ∧ z, t3 [B, E]

(16)

a ∧ c ∧ d ∧ z, t3 [B, E]

(17)

The confactors for P(D|Y , Z) are z, t7 [D] and z, t8 [D, Y ]. We can split the first of these on A
producing
a ∧ z, t7 [D]

(18)

a ∧ z, t7 [D]

(19)

There are no other confactors containing D with context compatible with confactor (18). The
prerequisite required to sum out D in the context a ∧ z is satisfied. This results in the confactor
a ∧ z, 1 where 1 is the factor of no variables that has value 1. This can be removed as the product
of 1 doesn’t change anything. Intuitively this can be justified because in the context when A is true
D has no children. We can detect this case to improve efficiency (see Section 4.10).
The confactor (19) can be split on C, producing
a ∧ c ∧ z, t7 [D]

(20)

a ∧ c ∧ z, t7 [D]

(21)

We can sum out D from confactor (20), producing a ∧ c ∧ z, 1, as in the previous case.
We can split confactor (21) on D producing:
a ∧ c ∧ d ∧ z, 0.29

(22)

a ∧ c ∧ d ∧ z, 0.71

(23)

where 0.29 and 0.71 are the corresponding values from t7 [D]. These are functions of no variables,
and so are just numbers.
We can now multiply confactor (22) and (16), producing:
a ∧ c ∧ d ∧ z, 0.29t3 [B, E]

(24)

where 0.29t3 [B, E] is the table obtained by multiplying each element of t3 [B, E] by 0.29.
280

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

We can also split confactor (6) on Z, producing:
a ∧ c ∧ d ∧ z, t4 [E]

(25)

a ∧ c ∧ d ∧ z, t4 [E]

(26)

We can multiply confactors (23) and (25), producing:
a ∧ c ∧ d ∧ z, 0.71t4 [E]

(27)

We now have only complementary confactors for D in the context a ∧ c ∧ z, namely confactors
(24) and (27) so we can sum-out D in this context resulting in
a ∧ c ∧ z, t9 [B, E]

(28)

where t9 [B, E] is 0.29t3 [B, E] ⊕t 0.71t4 [E]. In full form this is:


B
true
a ∧ c ∧ z, true
false
false

E
true
false
true
false

Value
0.36225 
0.63775
0.6015
0.3985

(29)

The other confactor produced when summing out D is:
B
true
true

true
a ∧ c ∧ z, true
false
false
false
false

E
true
true
false
false
true
true
false
false

Y
true
false
true
false
true
false
true
false

Value
0.12475
0.21975
0.87525 
0.78025
0.7765
0.7065
0.2235
0.2935

(30)

4.6 When to Split
Confactor splitting makes the multiset of confactors more complicated, so we have to be careful to
apply this operation judiciously. We need to carry out confactor splitting in order to make identical or
complementary contexts so we can carry out the operations of summing out a variable or multiplying
confactors. These are the only cases we need to split.
Definition 14 Given confactor r1 = c1 , T1  and context c, such that c1 and c are compatible, to
split r1 on c means to split r1 sequentially on each of the variables that are assigned in c that aren’t
assigned in c1 .
When we split r1 on c, we end up with a single confactor with a context that is compatible with
c; the contexts of all of the other confactors that are produced by the splitting are incompatible with
c. These confactors that are incompatible with c are called residual confactors.
More formally, we can recursively define residual(r1 , c), where r1 = c1 , t1  and c and c1 are
compatible, by:
• residual(r1 , c) = {} if c ⊆ c1
281

POOLE & ZHANG

• Else if c 
⊆ c1 , select a variable X that is assigned in c but not in c1 .
residual(r1 , c) = {c1 ∧ X=vi , set(t1 , X=vi ) : vi ∈ dom(X)&vi 
= cX }
∪residual(c1 ∧ X=cX , set(t1 , X=cX ), c)
where cX is the value assigned to X in context c. Recall (Definition 2) that set(t, X=vi ) is t
if t doesn’t involve X and is the selection of the X=vi values from the table, followed by the
projection onto the remaining variables, if t does involve X.
The results of splitting a confactor on a context is a set of confactors:
split(c1 , t1 , c) = residual(c1 , t1 , c) ∪ {c1 ∪ c, t1 }.
Example 16 Consider residual(a ∧ b, t1 [C, D], c ∧ e). Suppose we split on C first, then on E.
This results in two residual confactors: a ∧ b ∧ c, t2 [D] and a ∧ b ∧ c ∧ e, t3 [D]. Note that t2 [D]
is the projection of t1 [C, D] onto C=false and t3 [D] is the projection of t1 [C, D] onto C=true. The
non-residual confactor that we want from the split is a ∧ b ∧ c ∧ e, t3 [D].
If instead we split on E then C, we get the residual confactors: a ∧ b ∧ e, t1 [C, D] and
a ∧ b ∧ c ∧ e, t2 [D], with the same non-residual confactor.
Note that the result can depend on the order in which variables are selected (see below for some
useful splitting heuristics). The algorithms that use the split will be correct no matter which order the
variables are selected, however some orderings may result in more splitting in subsequent operations.
Example 16 highlights one heuristic that seems generally applicable. When we have to split
a confactor on variables that appear in its body and on variables in its table, it’s better to split on
variables in the table first, as these simplify the confactors that need to be subsequently split.
We can use the notion of a residual to split two rules that are compatible, and need to be multiplied.
Suppose we have confactors r1 = c1 , t1  and r2 = c2 , t2 , that both contain the variable being
eliminated and where c1 and c2 are compatible contexts. If we split r1 on c2 , and split r2 on c1 , we
end up with two confactors whose contexts are identical. Thus we have the prerequisite needed for
multiplying.
Example 17 Suppose we have confactors r1 = a ∧ b ∧ c, t1  and r2 = a ∧ d, t2  that both contain
the variable being eliminated. We can split r1 on the body of r2 , namely a ∧ d, producing the
confactors
a ∧ b ∧ c ∧ d, t1 

(31)

a ∧ b ∧ c ∧ d, t1 
Only the first of these is compatible with r2 . The second confactor is a residual confactor.
We can split r2 on the body of r1 , namely a ∧ b ∧ c, by first splitting r2 on B, then on C, producing
the confactors:
a ∧ b ∧ c ∧ d, t2 
a ∧ b ∧ c ∧ d, t2 

(32)

a ∧ b ∧ d, t2 
Only the second confactor (confactor (32))is compatible with r1 or any of the residual confactors
produced by splitting r1 . Confactors (31) and (32) have identical contexts and so can be multiplied.
282

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

Suppose we have confactors r1 = c1 ∧ Y =vi , t1  and r2 = c2 ∧ Y =vj , t2 , where c1 and c2
are compatible contexts, and vi 
= vj . If we split r1 on c2 , and split r2 on c1 , we end up with two
confactors whose contexts are identical except for the complementary values for Y . This is exactly
what we need for summing out Y .
If Y is binary with domain {vi , vj }, and there are confactors r1 = c1 ∧ Y =vi , t1  and r2 =
c2 ∧ Y =vj , t2 , where c1 and c2 are compatible contexts, and there is no other confactor that contains
Y that is compatible with c1 and c2 , summing out Y in the context c1 ∪ c2 results in the confactors:
residual(r1 , c2 ) ∪ residual(r2 , c1 ) ∪ {c1 ∪ c2 , t1 ⊕t t2 }.
If there are more than two values in the domain, we may need to split each pair of confactors, always
using the results of previous splits for subsequent splits.
Proposition 1 Splitting confactor c1 , t1  on c creates

(|dom(X)| − 1)
X∈vars(c)−vars(c1 )

extra confactors, independently of the order in which the variables are selected to be split, where
vars(c) is the set of variables assigned in context c.
When we have to split, there is a choice as to which variable to split on first. While this choice
does not influence the number of confactors created for the single split, it can influence the number of
confactors created in total because of subsequent splitting. One heuristic was given above. Another
useful heuristic seems to be: given a confactor with multiple possible splits, look at all of the
confactors that need to be combined with this confactor to enable multiplication or addition, and
split on the variable that appears most. For those cases where the conditional probability forms a
tree structure, this will tend to split on the root of the tree first.
4.7 Evidence
As in VE, evidence simplifies the knowledge base. Suppose E1 =o1 ∧ . . . ∧ Es =os is observed. There
are three steps in absorbing evidence:
• Remove any confactor whose context contains Ei =oi , where oi 
= oi .
• Remove any term Ei =oi in the context of a confactor.
• Replace each table t with set(t, E1 =o1 ∧ . . . ∧ Es =os ) (as in the tabular VE algorithm).
Again note that incorporating evidence only simplifies the confactor base.
Once evidence has been incorporated into the confactor-base, the program invariant becomes:
The probability of the evidence conjoined with a context c on the non-eliminated, nonobserved variables is equal to the product of the probabilities of the confactors that
are applicable in context c. For each context c on the non-eliminated, non-observed
variables and for each variable X there is at least one confactor containing X that is
applicable in context c.
For probabilistic inference, where we will normalise at the end, we can remove any confactor that
doesn’t involve any variable (i.e., with an empty context and single number as the table) as a result
of the second or third cases. That is, we remove any confactor that only has observed variables. We
then need to replace “equal” with “proportional” in the program invariant.
283

POOLE & ZHANG

Example 18 Suppose d ∧ z is observed given the confactors of Figure 4. The first two confactors for
P(E|A, B, C, D) don’t involve D or Z and so are not affected by the observation. The third confactor
is removed as its body is incompatible with the observation. The fourth confactor is replaced by:

E
Value 
a ∧ c, true 0.5
false 0.5
The first confactor for P(B|Y , Z) is replaced by
 B
Value 
y, true 0.17
false 0.83
The first confactor for P(D|Y , Z) is removed and the second is replaced by

Y
Value 
true, true 0.21
false 0.41
where true represents the empty context.
4.8 Extracting the Answer
Suppose we had a single query variable X. After setting the evidence variables, and eliminating the
remaining variables, we end up with confactors of the form:
{X=vi }, pi 
and of the form
{}, ti [X]
If e is the evidence the probability of X=vi ∧ e is proportional to the product contributions of the
confactors with context X=vi and the selection for the X=vi value for the table. Thus


pi
ti [vi ].
P(X=vi ∧ e) ∝
X=vi ,pi 

{},ti [X]

Then we have:
P(X=vi ∧ e)
.
P(X=vi |e) = 
vj P(X=vj ∧ e)
Notice that constants of proportionality of the evidence or by removing constants (confactors with
no variables) cancel in the division.
If we had multiple query variables (i.e., we wanted the marginal of the posterior), then we still
multiply the remaining confactors and renormalise.
4.9 The Abstract Contextual Variable Elimination Algorithm
The contextual variable elimination algorithm, is given in Figure 5. A more refined version that does
less splitting is given in Section 5.
The elimination procedure is called once for each non-query, non-observed variable. The order
in which the variables are selected is called the elimination ordering. This algorithm does not imply
284

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

To compute P(X|E1 =o1 ∧ . . . ∧ Es =os )
Given multiset R of confactors
1. Incorporate evidence as in Section 4.7.
2. while there is a non-query variable to be eliminated
{
Select non-query variable Y to eliminate;
Call R := eliminate(Y , R);
}
3. Compute posterior probability for X as in Section 4.8
Procedure eliminate(Y, R):
partition R into:
R− = those confactors in R that don’t involve Y ;
R∗ = {r ∈ R : r involves Y };
while there is {b1 , T1 , b2 , T2 } ⊆ R∗ where b1 and b2 are compatible,
{
remove b1 , T1  and b2 , T2  from R∗ ;
split b1 , T1  on b2 putting residual confactors in R∗ ;
split b2 , T2  on b1 , putting residual confactors in R∗ ;
add b1 ∧ b2 , T1 ⊗t T2  to R∗ ;
}
for every b, t ∈ R∗ such that Y appears in t
{
remove 
b, t from R∗ ;
add b, Y t to R− ;
}
while R∗ is not empty
{
if {b ∧ Y =v1 , T1 , . . . , b ∧ Y =vk , Tk } ⊆ R∗
{
remove b ∧ Y =v1 , T1 , . . . , b ∧ Y =vk , Tk  from R∗ ;
add b, T1 ⊕t . . . ⊕t Tk  to R− ;
}
else if {b1 ∧ Y =vi , T1 , b2 ∧ Y =vj , T2 } ⊆ R∗ where b1 and b2 are compatible and b1 
= b2
{
remove b1 ∧ Y =vi , T1  and b2 ∧ Y =vj , T2  from R∗ ;
split b1 ∧ Y =vi , T1  on b2 , putting all created confactors in R∗ ;
split b2 ∧ Y =vj , T2  on b1 , putting all created confactors in R∗ ;
}
}
Return R− .
⊗t is defined in Section 2.2.
⊕t is defined in Section 4.3.
All set operations are assumed to be on multisets.
Figure 5: Contextual Variable Elimination
285

POOLE & ZHANG

that the elimination ordering has to be given a priori. The other choice points are the order in which
to do multiplication, and the splitting ordering.
Note that in the eliminate algorithm, all set operations are assumed to be on multisets. It is
possible, and not uncommon, to get multiple copies of the same confactor. One example where
this happens is when there is a naive Bayes model with variable C with no parents, and variables
Y1 , . . . , Yn each with only C as a parent. Often the conditional probabilities of some of the Yi ’s are
the same as they represent repeated identical sensors. If these identical sensors observe the same
value, then we will get identical confactors, none of which can be removed without affecting the
answer.
To see the correctness of the procedure, note that all of the local operations preserve the program
invariants; we still need to check that the algorithm halts. After the first while-loop of eliminate, the
contexts of the confactors in R∗ are mutually exclusive and covering by the second part of the loop
invariant. For all complete contexts on the variables that remain after Y is eliminated, there is either
a compatible confactor with Y in the table, or there is a compatible confactor with Y = vi for every
value vi . The splitting of the second while loop of eliminate preserves the mutual exclusiveness of
the bodies of the confactors in R∗ and when splitting a confactor, the set of created confactors covers
the same context as the original confactor. If there are confactors in R∗ , and the if-condition does
not hold, then there must be a pair of confactors where the else-if condition holds. Thus, each time
through the second while-loop, the number of confactors in R− increases or the number of confactors
in R∗ increases and these are both bounded in size by the size of the corresponding factor. Thus
eliminate must stop, and when it does Y is eliminated in all contexts.
4.10 Ones
In a Bayesian network we can remove a non-observed, non-query node with no children without
changing the conditional probability of the query variable. This can be carried out
 recursively. In
VE, if we were to eliminate such variables, we create factors that are all ones (as X P(X|Y ) = 1).
In contextual VE, we can have a more subtle version when a variable may have no children in
some contexts, even if it has children in another context.
Example 19 Consider eliminating B as in Example 14 where the belief network is given in Figure
1 and the structured conditional probabilities are given in Figure 3). In the context a ∧ c, the only
confactors that are applicable are those that define P(B|YZ). As stated, the contextual VE algorithm,
the following three confactors are created:
a ∧ c ∧ y, 1[Z]
a ∧ c ∧ y, 1
where 1[Z] is a function of Z that has value 1 everywhere and 1 is the function of no variables that
has value 1.
Confactors that have contribution 1 can be removed without affecting the correctness of the
algorithms (as long as these confactors aren’t the only confactors that contain a variable in some
context). It is easy to show that the first part of the program invariant is maintained as multiplying by
1 doesn’t affect any number. The second part of the invariant is also maintained, as there are always
the confactors for the child (E in this case) that don’t depend on the variable being eliminated, as
well as the confactors for the parents of the variable being eliminated.
286

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

...
S
...

...

FT

FB

OT

...

...

MB

MT

FH

MH

...

...

Figure 6: A fragment of a belief network: OT to eliminate.
It is however probably better to never construct such confactors rather than to construct them
and then throw them away. We show how this can be done in Section 5.1.
4.11 Multi-Valued Variables
We have presented an algorithm that allows for multi-valued variables, where the splitting operation
creates the same number of confactors as there are values in the domain of the variable being split.
There is an alternate method for using multi-valued variables. This is to extend the notion of a
context to allow for membership in a set of values. That is, a context could be a conjunction of terms
of the form X ∈ S where S is a set of values. The original version of equality of the form X=v is the
same as X ∈ {v}. Splitting can be done more efficiently as there is only one residual confactor for
each split. Effectively we treat a multiset of confactors as a unit.
There are examples where this representation can be much more efficient, but it makes the
algorithm much more complicated to explain. There are also examples where the binary splitting is
less efficient as it needs more splits to get the same result.
4.12 Why CVE Does More Than Representing Factors As Trees
It may seem that CVE is a confactor based representation for factors, in much the same way as the
trees in the structured policy iteration (Boutilier, Dearden and Goldszmidt, 1995) for solving MDPs.
In this section we present a detailed example that explains why CVE can be much more efficient
than a tree-based representation of the VE factors.
Example 20 Figure 6 shows a fragment of a belief network. This is an elaboration of Example 6,
where what affects the inside temperature depends on whether the air conditioning is broken or is
working. All the variables are Boolean. We use the following interpretation:
287

POOLE & ZHANG

true

FB

FT

OT
p1

MB

false

p2

p3

MT

OT
p4

p5

P(fh)

p6

p7

p8

P(mh)

Figure 7: Tree-structured conditional probability tables for A and for B. Left branches correspond
to true and right branches to false. Thus p1 = P(a|d ∧ e), p2 = P(a|d ∧ e), etc.

FB Fred’s air conditioning is broken
FT Fred’s thermostat setting is high
OT Outside temperature is hot
FH Fred’s house is hot
MB Mary’s air conditioning is broken
MT Mary’s thermostat setting is high
MH Mary’s house is hot
S Season, that is true if it is Summer
The ancestors of FT , FB, S, MB, and MT are not shown. They can be multiply connected.
Similarly, the descendants of FH and MH are not shown. They can be multiply connected.
The outside temperature (OT ) is only relevant to Fred’s house being hot (FH) when Fred’s air
conditioner is broken (FB is true) in which case Fred’s thermostat setting (FT ) is not relevant. Fred’s
thermostat setting (FT ) is only relevant to Fred’s house being hot (FH) when Fred’s air conditioner
is working (FB is false), in which case the outside (OT ) is not relevant. And similarly for Mary’s
house. See Figure 7. What is important to note is that FH and MH are dependent, but only if both
air conditioners are broken, in which case the thermostat settings are irrelevant.
Suppose we were to sum out OT in VE. Once OT is eliminated, FH and MH become dependent. In VE and bucket elimination we form a factor f (FH, MH, FT , FB, MB, MT , S) containing
all the remaining variables. This factor represents P(FH, MH|FT , FB, MB, MT , S) (unless there is
a pathological case such as if MT or MB is a descendent of FH, or if FT or FB is a descendent of
MH). One could imagine a version of VE that builds a tree-based representation for this factor. We
show here how the confactor-based version is exploiting more structure than this.
288

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

If we are to take the contextual independence into account, we need to consider the dependence
between FH and MH when both FB and MB are true (in which case FT and MT are irrelevant). For
all of the other contexts, we can treat FH and MH as independent. The algorithm CVE does this
automatically.
The conditional probabilities of Figures 6 and 7 can be represented as the following confactors:
FH
true
fb, true
false
false

OT
true
false
true
false

Value

p1
p2
1 − p1
1 − p2

(33)

FH
true
fb, true
false
false

FT
true
false
true
false

Value

p3
p4
1 − p3
1 − p4

(34)





MH
true
mb, true
false
false

OT
true
false
true
false

Value

p5
p6
1 − p5
1 − p6

(35)

MH
true
mb, true
false
false

MT
true
false
true
false

Value

p7
p8
1 − p7
1 − p8

(36)





OT
true
true
false
false

S
true
false
true
false

Value
p9
p10
1 − p9
1 − p10

(37)

Eliminating OT from these confactors results in six confactors:
FH
true
true

true
fb ∧ mb, true
false
false
false
false

MH
true
true
mbalse
mbalse
true
true
false
false

S
true
false
true
false
true
false
true
false

Value
p9 ∗ (p5 ∗ p1 ) + (1 − p9 ) ∗ (p6 ∗ p2 )
p10 ∗ (p5 ∗ p1 ) + (1 − p10 ) ∗ (p6 ∗ p2 )

p9 ∗ ((1 − p5 ) ∗ p1 ) + (1 − p9 ) ∗ ((1 − p6 ) ∗ p2 )
p10 ∗ ((1 − p5 ) ∗ p1 ) + (1 − p10 ) ∗ ((1 − p6 ) ∗ p2 )
p9 ∗ (p5 ∗ (1 − p1 )) + (1 − p9 ) ∗ (p6 ∗ (1 − p2 ))
p10 ∗ (p5 ∗ (1 − p1 )) + (1 − p10 ) ∗ (p6 ∗ (1 − p2 ))
p9 ∗ ((1 − p5 ) ∗ (1 − p1 )) + (1 − p9 ) ∗ ((1 − p6 ) ∗ (1 − p2 ))
p10 ∗ ((1 − p5 ) ∗ (1 − p1 )) + (1 − p10 ) ∗ ((1 − p6 ) ∗ (1 − p2 ))
289

POOLE & ZHANG

FH
true
fb ∧ mb, true
false
false





FH
true
fb, true
false
false

FT
true
false
true
false

Value

p9 ∗ p1 + (1 − p9 ) ∗ p2
p10 ∗ p1 + (1 − p10 ) ∗ p2
p9 ∗ (1 − p1 ) + (1 − p9 ) ∗ (1 − p2 )
p10 ∗ (1 − p1 ) + (1 − p10 ) ∗ (1 − p2 )

Value

p3
p4
1 − p3
1 − p4

Value

p9 ∗ p5 + (1 − p9 ) ∗ p6
p10 ∗ p5 + (1 − p10 ) ∗ p6
p9 ∗ (1 − p5 ) + (1 − p9 ) ∗ (1 − p6 )
p10 ∗ (1 − p5 ) + (1 − p10 ) ∗ (1 − p6 )


S
Value
fb ∧ mb, true p9 + (1 − p9 )
false p10 + (1 − p10 )




MH
true
fb ∧ mb, true
false
false

S
true
false
true
false

MH
true
mb, true
false
false

MT
true
false
true
false

S
true
false
true
false

Value

p7
p8
1 − p7
1 − p8

Note that the third and the sixth confactors were there originally and were not affected by
eliminating OT .
The resultant confactors encode the probabilities of {FH, MH} in the context fb ∧ mb. For all
other contexts, CVE considers FH and MH separately. The total table size of the confactors after
OT is eliminated is 24.
Unlike VE or BEBA, we need the combined effect on FH and MH only for the contexts where OT
is relevant to both FH and MH. For all other contexts, we don’t need to combine the confactors for
FH and MH. This is important, as combining the confactors is the primary source of combinatorial
explosion. By avoiding combining confactors, we can have a potentially huge saving when the
variable to be summed out appears in few contexts.
4.13 CVE Compared To VE
It is interesting to see the relationship between the confactors generated and the factors of VE for
the same belief network, with the same query and observations and the same elimination ordering.
There are two aspects to the comparison, first the exploitation of contexts, and second the idea of
not multiplying confactors unless you need to. In this section, we introduce a tree-based variable
elimination algorithm (TVE) that uses confactors but doesn’t have the property of the example above
where there are confactors that are not multiplied when VE would multiply the corresponding factors.
In order to understand the relationship between VE and CVE for the same query and the same
elimination order, we can consider the VE derivation tree of the final answer. The tree contains all
290

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

initial and intermediate factors created in VE. The parents in the tree of any factor are those factors
that were multiplied or had a variable summed out to produce this factor. Note that this is a tree
(each factor has only one child) as each factor is only used once in VE; once it is multiplied or a
variable is summed from it, it is removed.
For each node in this tree that is created by multiplying two other factors, the number of multiplications in VE is equal to the table size of the resulting factor. For each factor created by summing
out a variable, the number of additions is equal to the size of its parent minus its size.
We can define tree-based variable elimination (TVE) to be a composite of VE and CVE. It uses
confactors as in CVE. Associated with each factor in the VE derivation tree is a set of confactors.
WhenVE multiplies two factors, TVE multiplies (and does the requisite splitting) all of the compatible
confactors associated with the factors being multiplied. TVE is essentially the same as the tree-based
merging of Boutilier (1997) (but Boutilier also does maximization at decisions).
Whenever VE multiplies two factors, TVE multiplies all of the confactors associated with the
factors. The TVE confactors associated with the VE factors will always have a total table size that is
less than or equal to the VE factor size. TVE maintains a set of confactors with mutually exclusive
and covering contexts. The number of multiplications is equal to the resulting table size for each
pairwise multiplication (as each entry is computed by multiplying two numbers). It is easy to see
that TVE always does fewer or an equal number of multiplications than VE.
CVE is like TVE except that CVE doesn’t multiply some of the confactors when VE multiplies
two factors. It delays the multiplications until they need to be done. It relies on the hope that
the confactors can be separately simplified before they need to be multiplied. This hope is not
unjustified because if eliminating a variable means that both of the factors need to be multiplied by
other confactors, then they need to be multiplied by each other.
Example 21 If we were to use TVE for Example 20, once OT is eliminated, TVE builds a tree
representing the probability on both FH and MH. This entails multiplying out the confactors that
were not combined in CVE, for example multiplying the third, fifth and sixth factors of theresult of
Example 20, which produces the confactor of the form f b ∧ mb, t(FH, FT , MH, MT , S) . Eliminating OT results in a set of confactors with total table size 72, compared to 24 for VE. Without any
contextual structure, VE builds a table with 27 = 128 values.
It is possible that not multiplying compatible confactors earlier means that we will eventually
have to do more multiplications. The following example is the simplest example we could find where
CVE does more multiplications than VE or TVE. Slight variations in the structure of this example,
however result in CVE doing fewer multiplications.
Example 22 Consider the belief network shown in Figure 8(a). First we will sum out a variable, A,
to create two confactors that are not multiplied in CVE but are multiplied in TVE. We then multiply
one of these confactors by another factor when summing out the second variable, B. We then force
the multiplication when eliminating C.
Suppose that all of the variables are binary except for variable W that has domain size 1000. (The
counter example doesn’t rely on non-binary variables; you could just have B having 10 binary parents,
but this makes the arithmetic less clear). In the analysis below we only discuss the multiplications
that involve W , as the other multiplications sum up to less than a hundred, and are dominated by the
multiplications that involve W .
Suppose that we have the following confactors for S:
x, t1 (A, B, C, S)

(38)
291

POOLE & ZHANG

W

W

X

C

B

A

C

B

S

S

T
(a)

(b)

Figure 8: Belief network for Example 22.
x, t2 (B, C, S)

(39)

Suppose that we have the following confactors for T :
x, t3 (A, B, C, T )

(40)

x, t4 (C, T )

(41)

Suppose first that T is observed. Then the confactors for T are replaced by:
x, t5 (A, B, C)

(42)

x, t6 (C)

(43)

Let’s now eliminate A. In both CVE and TVE, confactors (38) and (42) and the prior on A are
multiplied together, and A is summed out resulting in:
x, t7 (B, C, S)

(44)

In TVE, confactors (39) and (43) are also multiplied together resulting in:
x, t8 (B, C, S)

(45)

Next we eliminate B. In both CVE and TVE, confactor (44) is multiplied by the factors representing
P(C|B) and P(B|W ). We assume that the factor representing P(B|W ) is multiplied last as this
minimises the number of multiplications. This involves 8008 multiplications (as the product has a
table size of 8000 and the intermediate table is of size 8). Then B is summed out resulting in the
factor:
x, t9 (C, S, W )

(46)

In CVE, confactor (39) is multiplied by the factors representing P(C|B) and P(B|W ). This also
involves 8008 multiplications. Then B is summed out from the product resulting in:
x, t10 (C, S, W )

(47)

In TVE, confactor (45) is multiplied by the factors representing P(C|B) and P(B|W ). This also
involves 8008 multiplications. Then B is summed out from the product resulting in:
x, t11 (C, S, W )

(48)
292

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

When C is eliminated, TVE requires no more multiplications. It just sums out C from the table of
confactor (48). However in CVE, we need to multiply confactors (43) and (47), which involves 4000
multiplications. The resulting confactors from CVE and TVE are identical.
Thus CVE requires about 20000 multiplications, TVE requires about 16000 multiplications. VE,
for the same elimination order, requires about 16000 multiplications.
This should not be surprising, particularly when you realise that VE is not optimal. For a given
elimination ordering, it is sometimes optimal to multiply factors before VE actually multiplies them,
as the following example shows:
Example 23 Consider the belief network in Figure 8(b), with the same domain sizes as in the
previous example. The factors represent P(W ), P(B|W ), P(C), P(S|BC). If we were to eliminate B
then C, it is more efficient to preemptively multiply P(C) by P(S|BC) than to delay the multiplication
till after summing out B (as VE does).
It may seem negative to show that CVE doesn’t always do fewer multiplications than VE but
has the overhead of maintaining contexts. However, there seems no reason why the preemptive
multiplication of TVE is optimal either. One possibility is to treat “when to multiply” and “when
to sum out variables” as a secondary optimisation problem (Bertelè and Brioschi, 1972; Shachter
et al., 1990; D’Ambrosio, 1995); unfortunately this optimization is also computationally difficult
(D’Ambrosio, 1995). This, however is beyond the scope of this paper.

5. Avoiding Splitting
5.1 Absorption
In this section we characterize a case when we don’t need to split during multiplication. Note that
the result of eliminating a variable is exactly the same as before; we are saving because we don’t
create the residuals, but rather use the original confactor.
Definition 15 A multiset of confactors R is complete if the contexts of the confactors are mutually
exclusive and covering.
If we have a multiset R of confactors that is complete, it means that we don’t have to split other
confactors r that may need to be multiplied by all of the confactors in R. For each residual of r, there
will be another element of R with which it will be compatible. Instead of splitting r, we can just
multiply it by each element of R. This is the intuition behind absorption. Note that we may need to
split elements of R during multiplication.
Suppose we have a complete multiset of confactors R and another confactor r1 = c1 , t1 . Define
absorb(R, c1 , t1 )
= {ci , pi  ∈ R : incompatible(ci , c1 )}

∪
(residual(ci , ti , c1 ) ∪ {c1 ∪ ci , set(t1 , ci ) ⊗t set(ti , c1 )})
ci , ti  ∈ R
compatible(c1 , ci )
where ⊗t is table multiplication (Definition 3).
293

POOLE & ZHANG

Correctness: We can replace R ∪ {r1 } with absorb(R, r1 ) and the program invariant is preserved.
First note that the confactors in absorb(R, r1 ) are complete (and so the second part of the invariant
holds). To see why the first part of the invariant is preserved, consider a complete context c. If
c is compatible with c1 , then in the original confactors, we use one confactor from R as well as
r1 . In the revised confactor base we use the appropriate confactor with the product of the original
probabilities. If c is incompatible with c1 then it is compatible with one element c2 , p2  of R. If
c2 is incompatible with c1 , the confactor to be used is the original confactor, and if c2 is compatible
with c1 , then we use the residual confactor. In each case we get the same contributions from R ∪ {r1 }
and from absorb(R, r1 ).
Example 24 If we were to eliminate B from the confactors of Figure 4 (as in example 14), we can
treat the two confactors for P(B|Y , Z) as the complete multiset of confactors. This means that we
don’t need to split the other confactors on Y .
Note that if we try to use the confactors for E as the complete set of confactors when eliminating
B, we don’t have to split the confactors on A, C or D, but we have to consider confactors that don’t
involve B when eliminating B, and we end up multiplying confactors that don’t need to be multiplied.
Note that if R cannot be represented as a decision tree (e.g., if R has confactors corresponding to
the contexts in {{a, b}, {a, c}, {b, c}, {a, b, c}, {a, b, c}}), it’s possible that there is no way to split r1
that results in as compact a representation as results from absorb(R, r1 ).
It seems as though it is very useful to have a multiset of confactors that is complete, but it is not
of much use if we cannot easily find such a set. First note that if we have a multiset R of confactors
that is complete, then absorb(R, r1 ) is also a multiset of confactors that is complete, which can, in
turn, be used to combine with another confactor.
Initially, for each variable X, the confactors that represent the conditional probability table
P(X|πX ) are complete. Moreover they will all contain X and so need to be involved when eliminating
X. These can be used as the initial seed for absorbing other confactors. Unfortunately, after we have
eliminated some variables, the confactors that define the initial conditional probability tables for
some variable X don’t exist anymore; they have been split, multiplied by other confactors and added
to other confactors. However, for each variable X, we can still extract a useful multiset of confactors
that all contain X that are complete on the empty context (i.e., are mutually exclusive and covering).
These will be called the confactors for X, and correspond to the confactors with X in the head in an
earlier version of contextual variable elimination (Poole, 1997).
Definition 16 If X is a variable, the confactors for X are a subset of the confactor base defined by:
• Initially the confactors for X are the confactors that define the conditional probability P(X|πX ).
• When we split a confactor for X, the confactors created are also confactors for X. Note that
this does not cover the case where we are splitting a confactor on a confactor for X.
• When we multiply a confactor for X with another confactor, the confactor created is a confactor
for X.
• When we add a confactor for X with another confactor (when eliminating another variable Y ,
for example), the resulting confactor is also a confactor for X.
Proposition 2 The confactors for X at any stage of contextual variable elimination are complete.
294

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

To show this, we will show that the three basic operations preserve this property.
• splitting preserves this property, as the resulting confactors are exclusive and cover the context
of the confactor being split.
• multiplication preserves this property as, for any variable X, only one of the confactors involved
in a multiplication can be a confactor for X (as the confactors for X are mutually exclusive) and
the set of contexts covered by the confactors isn’t changed by multiplication. This argument
also holds for absorption.
• for addition, note that, for any variable X, either all of the confactors or none of the confactors
involved in an addition are confactors for X when summing out Y . To show this suppose we
have r1 = c ∧ Y = v1 , p1  and r2 = c ∧ Y = v2 , p2  where confactor r1 is a confactor for
X and confactor r2 isn’t. Because the confactors for X are mutually exclusive and covering,
there must be a confactor that is covered by X that is applicable in a context when c ∧ Y = v2
is applicable. This confactor cannot mention Y , for otherwise addition isn’t applicable, and so
it must also be applicable when c ∧ y = v1 is true, which contradicts the mutual exclusiveness
of the confactors for X. Now it is easy to see that addition preserves this property as the
confactors being summed cover the same contexts as the resulting confactor.
We can also use the idea of the confactors for X to recognise when summing out a variable will
create a table of 1’s that can be removed (see Section 4.10). First note that in the original confactors
for X, if, when eliminating X, we don’t have to multiply these by other confactors (i.e., they have
no children in this context), then we know that summing out X will produce a table of 1’s. We can
do better than this for recognising when we will produce ones. We will use one bit of information
to encode whether a confactor for X is pure for X. Initially all of the confactors for X are pure for
X. If a confactor for X is pure for X, and, when eliminating Y is absorbed into a confactors for Y
that is pure for Y , then the resulting confactor is pure for X. For every other case when a confactor
for X is multiplied by another confactor, the result is not pure for X. If we are summing out X, after
absorption, we can remove all confactors for X that are pure for X. This is correct because we have
maintained the invariant that if we sum out X from the table of a confactor for X that is pure for X we
create a table with only ones. Note that this procedure generalises the idea that we can recursively
remove variables with no children that are neither observed nor queried.
The idea of absorption into the rules for the variable being eliminated described in this section
should only be seen as a heuristic to avoid splitting. It does not necessarily reduce the amount
of work. First note that in variable elimination there is a choice in the order that we multiply
factors. Multiplication of factors is associative and commutative, however, the order in which the
multiplication is carried out affects efficiency, as the following example shows.
Example 25 Suppose variable B has one parent, A and two children C and D, who each only have
B as a parent. When eliminating B we have to multiply the factors representing P(B|A), P(C|B)
and P(D|B). Suppose that B, C and D are binary, and that A has domain size of 1000. When
multiplying two factors the number of multiplications required is equal to the size of the resulting
factor. If we save intermediate results, and multiply these in the order (P(B|A)⊗t P(C|B))⊗t P(D|B),
we will do 12000 multiplications. If we save intermediate results, and multiply these in the order
P(B|A) ⊗t (P(C|B) ⊗t P(D|B)), we will do 8008 multiplications. If we don’t save intermediate
tables, but instead recompute every product, we will do 16000 multiplications.
295

POOLE & ZHANG

If you need to multiply k > 1 factors, where m is the size of the resulting factor, the number of
multiplications is bounded below by k − 2 + m (as the final product requires m multiplications and
each other requires at least one multiplication) and bounded above by (k − 1) ∗ m (as there are k − 1
factor multiplications and each of these requires at most m multiplications).
The associative ordering imposed by absorption into the rules for the variable being eliminated
(which for the example above implies absorbing P(C|B) and P(D|B) into P(B|A)) may not be the
optimal multiplication ordering. The absorption ordering (that saves because it reduced splitting)
should be seen as a heuristic; it may be worthwhile to do a meta-level analysis to determine what
order to multiply (Bertelè and Brioschi, 1972; Shachter et al., 1990; D’Ambrosio, 1995), but this is
beyond the scope of this paper.
5.2 Summing Out A Variable
Suppose we are eliminating Y , and we have absorbed all of the confactors that contain Y into the
confactors for Y . Then any two confactors in R that contain Y have incompatible contexts. The
contexts for the confactors that contain Y in the table are disjoint from the contexts of the confactors
that contain Y in the body.
Summing out Y from a confactor that contains Y in the table proceeds as before. We can use a
similar trick to absorption to avoid any more splitting when adding confactors that contain Y in the
body.
Suppose Y has domain {v1 , . . . , vs }. The contexts of the confactors with Y =vi in the body are
exclusive and the disjunct is logically equivalent to the disjunct of confactors with Y =vj in the body
for any other value vj .
For each 1 ≤ i ≤ s, let Ri = {b, t : b ∧ Y =vi , t ∈ R+ }. Thus Ri is the confactor for Y = vi
in the context, but with Y = vi omitted from the context. We will combine the Ri ’s using a binary
operation:
R1 ⊕g R2 = {c1 ∪ c2 , set(t1 , c2 ) ⊕t set(t2 , c1 ) : c1 , t1  ∈ R1 , c2 , t2  ∈ R2 , compatible(c1 , c2 )}
where ⊕t is an addition operation defined on tables that is identical to the product ⊗t of Definition
3 except that it adds the values instead of multiplying them.
Then R1 ⊕g R2 ⊕g . . . ⊕g Rs is the result from summing out Y from the confactors with Y in the
body.
5.3 Contextual Variable Elimination with Absorption
A version of contextual variable elimination that uses absorption, is given in Figure 9. This is the
algorithm used in the experimental results of Section 6.
The elimination procedure is called once for each non-query, non-observed variable. The order
in which the variables are selected is called the elimination ordering. This algorithm does not imply
that the elimination ordering has to be given a priori.
One of the main issues in implementing this algorithm is efficient indexing for the confactors. We
want to be able to quickly find the confactors for Y , the confactors that contain Y , and the compatible
confactors during addition and absorption. If we are given a prior elimination ordering, we can use
the idea of bucket elimination (Dechter, 1996), namely that a confactor can be placed in the bucket
of the earliest variable in the elimination ordering. When we eliminate Y , all of the confactors that
contain Y are in Y ’s bucket. If we don’t have a prior elimination ordering, we can keep an inverted
296

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

To compute P(X|E1 =o1 ∧ . . . ∧ Es =os )
Given
multiset of contextual contribution confactors
1. Incorporate evidence as in Section 4.7.
2. While there is a factor involving a non-query variable
Select non-query variable Y to eliminate;
Call eliminate(Y ).
3. Compute posterior probability for X as in Section 4.8
Procedure eliminate(Y):
partition the confactorbase R into:
R− those confactors that don’t involve Y
R+ = {r ∈ R : r is a confactor for Y }
R∗ = {r ∈ R : r involves Y and r is not a confactor for Y };
for each r ∈ R∗
do R+ ← absorb(R+ , r);
partition R+ into:
Rt = {r ∈ R+ : Y in table of r}
Ri = {b, t : b ∧ Y =vi , t ∈ R+ } for each 1 ≤ i 
≤ s, where dom(Y ) = {v1 , . . . , vs }.
Return confactorbase R− ∪ (R1 ⊕g · · · ⊕g Rs ) ∪ {bi , Y ti  : bi , ti  ∈ Rt }.
absorb(R, r) is defined in Section 5.1.
R1 ⊕g R2 is defined in Section 5.2.
Figure 9: Contextual Variable Elimination with Absorption

297

POOLE & ZHANG

list of the confactors (for each variable, we have a list of all of the confactors that are for that variable
and a list of the confactors that contain that variable). We then have to maintain these lists as we
create new confactors and delete old ones. We also want to be able to index the confactors so that
we can quickly find other confactors that contain the variable to be eliminated and have compatible
contexts. In our implementation, we compared all of the confactors that contain the variable to be
eliminated, and rejected those with incompatible contexts. Ideally, we should be able to do better
than this, but how to do it is an open question.
There are a number of choice points in this algorithm:
• the elimination ordering.
• the splitting ordering; when computing residuals, which order should the variables be split on.
This is discussed in Section 4.4.
• the order that the elements of R∗ are absorbed. This has an impact similar to the choice of
multiplication ordering for VE (when we have to multiply a number of factors, which order
should they be done); sometimes we can have smaller intermediate factors if the choice is
done appropriately.

6. Empirical Results
An interesting question is whether there are real examples where the advantage of exploiting contextual independence outweighs the overhead of maintaining confactors.
We can easily generate synthetic examples where VE is exponentially worse than contextual
variable elimination (for example, consider a single variable with n, otherwise unconnected, parents,
where the decision tree for the variable only has one instance of each parent variable, and we
eliminate from the leaves). At another extreme, where all contexts are empty, we get VE with very
little overhead. However, if there is a little bit of CSI, it is possible that we need to have the overhead
of reasoning about variables in the contexts, but get no additional savings. The role of the empirical
results is to investigate whether it is ever worthwhile trying to exploit context-specific independence,
and what features of the problem lead to more efficient inference.
6.1 A Pseudo-Natural Example
While it may seem that we should be able to test whether CVE is worthwhile for natural examples
by comparing it to VE for standard examples, it isn’t obvious that this is meaningful. With the tablebased representations, there is a huge overhead for adding a new parent to a variable, however there is
no overhead for making a complex function for how a variable depends on its existing parents. Thus,
without the availability of effective algorithms that exploit contextual independence where there is a
small overhead for adding a variable to restricted contexts, it is arguable that builders of models will
tend to be reluctant to add variables, but will tend to overfit the function for how a variable depends on
its parents. As all models are approximations it makes sense to consider approximations to standard
models. As we are not testing the approximations (Dearden and Boutilier, 1997; Poole, 1998), we
will pretend these are the real models.
In this section we produce evidence that there exists networks for which CVE is better than
VE. The sole purpose of this experiment it to demonstrate that there potentially are problems where
it is worthwhile using CVE. We use an instance of the water network (Jensen, Kjærulff, Olesen
298

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

100
0 observations
5 observations
10 observations
CVE=VE

VE runtime (secs)

10

1

0.1

0.01

0.001
0.001

0.01

0.1
1
CVE runtime (secs)

10

100

Figure 10: Scatterplot of runtimes (in msecs) of CVE (x-axis) and VE (y-axis) for the water network.
Full details are in Appendix A.

and Pedersen, 1989) from the Bayesian network repository8 where we approximated the conditional
probabilities to create contextual independencies. Full details of how the examples were constructed
are in Appendix A. We collapsed probabilities that were within 0.05 of each other to create confactors.
The water network has 32 variables and the tabular representation has a table size of 11018 (after
removing variables from tables that made a difference of less that 0.05). The contextual belief
network representation we constructed had 41 confactors and a total table size of 5834.
Figure 10 shows a scatter plot of 60 runs of random queries9 . There were 20 runs each for 0,
5 and 10 observed variables. The raw data is presented in Appendix A. The first thing to notice
is that, as the number of observations increases, inference becomes much faster. CVE was often
significantly faster than VE. There are a few cases where CVE was much worse than VE; essentially,
given the elimination ordering, the context-specific independence didn’t save us anything in these
example, but we had to pay the overhead of having variables in the context.
8. http://www.cs.huji.ac.il/labs/compbio/Repository/
9. Note that all of these results are statistically significant to some degree. The least significant is with 10 observations,
that, using the matched-sample t-test (also known as the paired t-test), is significant to the 0.2 level for the logarithm
of the runtimes. The others are significant way below the 0.001 level. The logarithm is appropriate as the difference
in the logarithms corresponds to the multiplicative speedup.

299

POOLE & ZHANG

6.2 Randomised Networks
In order to see how the algorithm depends on the structure inherent in the network, we constructed
a number of parametrized classes of networks. We explicitly constructed networks that display
contextual independence, as if there is not contextual independence this algorithm degenerates to
VE.
We have the following parameters for building random networks:
n the number of variables
s the number of splits (so there will be n + s confactors).
p the probability that a predecessor variable that isn’t in the context of a confactor will be in the
table of the confactor.
The exact algorithm for constructing the examples is given in Appendix A.
The variable s controls the number of confactors, and p controls (probabilistically) the size of
the tables. Figure 1110 shows a scatter plot comparing the runtimes of CVE and VE for n = 30 and
p = 0.2 and for three different values of s, 5, 10, and 15.
While this may look reasonable, it should be noticed that the number of splits and the number of
different variables in the splits is strongly correlated in these examples (see Appendix A for details).
However, one of the properties of CVE is that if a variable does not appear in the body of any
confactor, it is never added to the context of a constructed confactor. That is, a variable that only
appears in tables, always stays in tables. Thus it may be conjectured that having fewer variables
appearing in contexts may be good for efficiency.
We carried out another experiment to test this hypothesis. In this experiment, the networks were
generated as before, however, when we went to split a context we attempted to first split it using a
variable that appears in a different context before using a variable that didn’t appear in a context. The
full details of the algorithms to generate examples and some example data are given in Appendix A.
Figure 12 shows a scatter plot of comparing the run times for CVE and VE for each of the generated
examples. With this class of networks CVE is significantly faster than VE.

7. Comparison With Other Proposals
In this section we compare CVE with other proposals for exploiting context-specific information.
The belief network with the conditional probability table of Figure 1 (i.e., with the contextual
independence shown in Figure 4) is particularly illuminating because other algorithms do very badly
on it. Under the elimination ordering B, D, C, A, Y , Z, to find the marginal on E, the most complicated
confactor multiset created is the confactor multiset for E after eliminating B (see Example 14) with
a total table size of 16. Observations simplify the algorithm as they mean fewer partial evaluations.
In contrast, VE requires a factor with table size 64 after B is eliminated. Clique tree propagation
constructs two cliques, one containing Y , Z, A, B, C, D of size 26 = 64, and the other containing
A, B, C, D, E of size 32. Neither takes the structure of the conditional probabilities into account.
Note however, that VE and clique tree propagation manipulate tables which can be indexed much
faster than we can manipulate confactors. There are cases where the total size of the tables of the
10. Note that all of these results are statistically significant. The least significant is the s = 10 plot that, using the matchedsample t-test (also known as the paired t-test), is significant to the 0.05 level for the logarithm of the runtimes. The
logarithm is appropriate as the difference in the logarithms corresponds to the multiplicative speedup.

300

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

1000
s=5
s=10
s=15
CVE=VE

VE runtime (secs)

100

10

1

0.1
0.1

1

10
CVE runtime (secs)

100

1000

Figure 11: Scatterplot of runtimes (in seconds) of CVE (x-axis) and VE (y-axis) for randomised
networks

301

POOLE & ZHANG

1000
s=5
s=10
s=15
CVE=VE

VE runtime (secs)

100

10

1

0.1
0.1

1

10
CVE runtime (secs)

100

1000

Figure 12: Scatterplot of runtimes (in seconds) of CVE (x-axis) and VE (y-axis) for random networks
biased towards fewer different variables in the contexts.

302

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

confactors is exponentially smaller than the tables (where added variables are only relevant in narrow
contexts). There are other cases where the table size for the confactors is the same as the table size
in VE, and where the overhead for manipulating contexts will not make CVE competitive with the
table-based methods.
Boutilier et al. (1996) present two algorithms to exploit structure. For the network transformation
and clustering method, the example of Figure 1 is the worst case; no structure can be exploited after
triangulation of the resulting graph. (The tree for E in Figure 3 is structurally identical to the tree
for X(1) in Figure 2 of (Boutilier et al., 1996)). The structured cutset conditioning algorithm does
well on this example. However, if the example is changed so that there are multiple (disconnected)
copies of the same graph, the cutset conditioning algorithm is exponential in the number of copies,
whereas the probabilistic partial evaluation algorithm is linear11 .
This algorithm is most closely related to the tree-based algorithms for solving MDPs (Boutilier
et al., 1995), but these work with much more restricted networks and with stringent assumptions on
what is observable. CVE is simpler than the analogous algorithm by Boutilier (1997) for structured
MDP with correlated action effects that represents conditional probabilities as trees. Section 4.12
shows why we can do better than the tree-based algorithms.
Poole (1997) gave an earlier version of rule-based VE, but it is more complicated in that it
distinguished between the head and the body of rules as part of the inference (although the confactors
for X correspond to the rules with X in the head). CVE is much more efficient than the rule-based VE
as it allows for faster indexing of tables. The notion of absorption was introduced by Zhang (1998),
which motivated the work in a very different way. Zhang and Poole (1999) give a mathematical
analysis of how context-specific independence can be exploited in terms of partial functions. The
union-product is a formalization of the operation we are using between confactors. The current paper
extends all of these in giving a specific algorithm showing how to combine the confactors and tables,
gives a more general analysis of when we need to do confactor splitting and when we don’t need to,
gives a more sophisticated method to initialize absorption (maintaining the confactors for a variable)
and gives a much more detailed empirical evaluation (with a new implementation). The ability to
handle ones is also improved.
Finally the representation should be contrasted with that of Geiger and Heckerman (1996).
They use a similarity network that gives a global decomposition of a belief network; for different
contexts they allow for different belief networks. We allow for a local decomposition of conditional
probabilities. The algorithms are not very similar.

8. Conclusion
This paper has presented a method for computing posterior probabilities in belief networks that exhibit
context-specific independence. This algorithm is an instance of variable elimination, but when we
sum out a variable the tables produced may depend on different sets of variables in different contexts.
The main open problem is in finding good heuristics for elimination orderings (Bertelè and
Brioschi, 1972). Finding a good elimination ordering is related to finding good triangulations in
building compact junction trees, for which there are good heuristics (Kjærulff, 1990; Becker and
Geiger, 1996). These are not directly applicable to contextual variable elimination (although there
11. This does not mean that all conditioning algorithms need suffer from this. We conjecture that there is a conditioning
algorithm that can extend contextual VE but save space, as in other bucket elimination algorithms (Dechter, 1996) or
the relevant cutsets for probabilistic inference (Darwiche, 1995; Díez, 1996).

303

POOLE & ZHANG

are analogous heuristics that are applicable), as an important criteria in this case is the exact form
of the confactors, and not just the graphical structure of the belief network. This means that it is not
feasible to compute the elimination ordering a priori. We are also investigating anarchic orderings
where we eliminate a variable in some contexts, without eliminating it in every context before we
partially eliminate another variable. We believe that this opportunistic elimination of variables in
contexts has much potential to improve efficiency without affecting correctness.
One of the main potential benefits of this algorithm is in approximation algorithms, where the
confactors allow fine-grained control over distinctions. Complementary confactors with similar
probabilities can be collapsed into a simpler confactor. This can potentially lead to more compact
confactor bases, and reasonable posterior ranges (Dearden and Boutilier, 1997; Poole, 1998).
The work reported in this paper has been followed up by a number of researchers. Tung (2002)
has shown how to exploit context-specific independence in clique trees. Guestrin, Venkataraman and
Koller (2002) extended the contextual variable elimination to multi-agent coordination and planning.

Acknowledgements
This work was supported by the Institute for Robotics and Intelligent Systems, Natural Sciences and
Engineering Research Council of Canada Research Grant OGPOO44121 and Hong Kong Research
Grants Council grant HKUST6093/99E. Thanks to Rita Sharma, Holger Hoos, Michael Horsch and
the anonymous reviewers for valuable comments, and to Valerie McRae for careful proofreading.
The code is available from the first author.

Appendix A. Details of the experiments
A.1 Water Network
In order to construct a pseudo-natural example, we used the water network from the Bayesian
network repository12 and modified it to let it exhibit context-specific independence. For each table,
a variable was declared redundant if the differences in the probabilities for the values of this variable
were less than a threshold of 0.05 from each other (thus, if we chose the midpoint of a reduced
table, the original probabilities were all less than 0.025 from this midpoint). In order to discover
context-specific independence, we carried out a greedy top-down algorithm to build a decision tree.
If we are building the conditional for variable Xi , we chose the variable Y to split on that results in the
maximum number of pairs of numbers where the values for Xi are within the threshold 0.05 of each
other. We then recursively remove redundant variables from each side, and keep splitting. Once we
have built a tree, for each node, we can decide whether to use the tabular representation or a factored
representation. In these experiments, we only committed to the context-based representation when
the total size of the context-based representation (obtained simply by summing the sizes of the tables)
was less than 51% of the tabular representation.
It should be noted that these thresholds were not chosen arbitrarily. If we used 0.03 instead
of 0.05, we didn’t find any context-specific independence. If we chose 0.07 instead of 0.05, then
the tabular representation collapses. If we chose 80% or 99% instead of 51% as the threshold for
accepting a change, we got smaller tables, but much larger run times.
12. http://www.cs.huji.ac.il/labs/compbio/Repository/

304

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

CVE
Query Var
#11(CKND_12_15)
#13(CBODN_12_15)
#27(CKND_12_45)
#25(CKNI_12_45)
#22(CKNN_12_30)
#21(CBODN_12_30)
#17(CKNI_12_30)
#22(CKNN_12_30)
#19(CKND_12_30)
#15(CNON_12_15)
#12(CNOD_12_15)
#3(CKND_12_00)
#16(C_NI_12_30)
#30(CKNN_12_45)
#4(CNOD_12_00)
#21(CBODN_12_30)
#5(CBODN_12_00)
#19(CKND_12_30)
#11(CKND_12_15)
#23(CNON_12_30)

Time
15039
620
3808
1708
367
7953
742
363
7939
8177
618
419
429
2902
2496
8042
992
7936
16290
604

Size
1327104
16384
186624
36864
16128
193536
48384
16128
774144
193536
37044
29376
28224
112896
110592
193536
112320
774144
1327104
37044

VE
Time
25368
4552
53965
57414
3821
13997
3677
3846
26654
14599
4264
9414
3799
52648
42270
13619
3334
25637
24753
3535

Size
5308416
442368
15925248
7077888
442368
1769472
442368
442368
2359296
1769472
442368
1327104
442368
15925248
5308416
1769472
442368
2359296
5308416
442368

Figure 13: Data for random queries with no observed variables for the water network
Figure 13 shows some of the details of some of the data with no observations. Figures 14 and 15
shows some of the details of some of the data with 5 and 10 observation respectively. These make up
the data shown in Figure 10 of the main paper. We show the index of the variable given the ordering
in the repository (we started counting at 0).
All of the times are in milliseconds for a Java implementation running on 700 MHz Pentium
running Linux with 768 megabytes of memory. In order to allow for the variation in run times due
to garbage collection each evaluation was run three times and the smallest time was returned. The
space is for the maximum table created in VE or the maximum size of the sum of all of the confactors
created during the elimination of one variable.
A.2 Randomised Experiments
The following procedure was used to generate the random networks. Given the n variables, we
impose a total ordering. We build a decision tree for each variable. The leaves of the decision trees
correspond to contexts and a variable that the tree is for. We start with the empty decision tree for
each variable. We randomly (with uniform probability) choose a leaf and a variable. If the variable
is a possible split (i.e., it is a predecessor in the total ordering of the variable the leaf is for and
the context corresponding to the leaf doesn’t commit a value to that variable), we split that leaf on
that variable. This is repeated until we have n + s leaves. Then for each leaf, we built a confactor
that has the same context and each predecessor of the variable that the leaf is for is included in the
305

POOLE & ZHANG

Observed
#1=2 #2=2 #26=2 #28=1 #30=1
#6=2 #8=1 #11=2 #14=2 #24=1
#8=3 #14=0 #15=3 #18=3 #20=2
#5=1 #9=0 #12=2 #15=0 #16=3
#6=1 #7=0 #11=1 #13=3 #25=2
#2=1 #6=0 #13=0 #19=1 #25=0
#0=3 #2=1 #18=2 #20=1 #23=1
#4=3 #10=3 #12=3 #17=0 #28=2
#3=1 #11=1 #19=1 #25=1 #31=3
#10=3 #19=0 #21=0 #26=0 #27=0
#11=1 #13=0 #21=1 #25=2 #29=2
#3=0 #23=1 #26=1 #27=0 #28=3
#9=2 #10=1 #13=1 #25=2 #26=1
#9=1 #11=0 #14=2 #15=1 #27=0
#2=0 #10=2 #15=2 #17=1 #24=1
#2=0 #7=3 #15=1 #21=2 #27=2
#0=3 #2=0 #6=0 #7=2 #16=2
#2=2 #20=2 #24=2 #25=0 #30=0
#8=2 #11=2 #19=2 #25=1 #29=3
#9=1 #12=3 #13=0 #19=2 #21=3

Query Var
#8(C_NI_12_15)
#22(CKNN_12_30)
#6(CKNN_12_00)
#10(CBODD_12_15)
#27(CKND_12_45)
#18(CBODD_12_30)
#17(CKNI_12_30)
#6(CKNN_12_00)
#14(CKNN_12_15)
#16(C_NI_12_30)
#24(C_NI_12_45)
#15(CNON_12_15)
#30(CKNN_12_45)
#25(CKNI_12_45)
#8(C_NI_12_15)
#16(C_NI_12_30)
#29(CBODN_12_45)
#21(CBODN_12_30)
#9(CKNI_12_15)
#26(CBODD_12_45)

CVE
Time
Size
84
9216
15
816
9
336
54
576
1184
28224
123
9216
16
1728
284
6912
1450
36864
1076
49152
353
28080
14258 193536
75
9216
65
4096
12
576
29
1008
7
336
453
49152
76
9216
31
1024

VE
Time
579
156
26
71
3210
224
87
162
1041
521
13928
2600
2646
120
767
531
1304
877
216
440

Size
36864
9216
2304
6912
147456
12288
5184
20736
147456
49152
1327104
442368
248832
4096
110592
82944
147456
49152
9216
49152

Figure 14: Data for random queries with 5 randomly observed variables for the water network

306

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

Observed
#2=3 #3=0 #7=2 #12=1 #13=2
#19=1 #21=2 #22=2 #26=1 #30=1
#0=0 #3=0 #8=3 #12=3 #13=0
#16=2 #18=2 #26=3 #27=2 #28=1
#1=2 #6=0 #8=0 #11=2 #17=0
#20=3 #22=1 #23=1 #24=2 #26=2
#2=2 #5=3 #8=0 #9=1 #10=1
#17=2 #18=1 #22=2 #28=0 #30=1
#4=2 #7=1 #8=2 #12=1 #13=2
#15=3 #17=0 #19=0 #22=2 #31=2
#1=1 #7=1 #9=1 #10=0 #11=0
#13=3 #14=1 #23=1 #24=1 #30=2
#2=1 #4=0 #6=0 #15=0 #18=0
#22=2 #23=3 #24=2 #29=2 #30=1
#3=0 #10=0 #14=1 #16=3 #19=0
#24=1 #25=2 #28=3 #30=1 #31=1
#1=2 #2=3 #3=1 #9=2 #10=0
#14=0 #16=3 #25=1 #28=3 #30=2
#2=3 #5=1 #6=0 #11=2 #12=0
#17=1 #22=0 #24=3 #27=0 #28=1
#8=3 #9=2 #10=0 #11=1 #12=1
#14=2 #15=3 #19=0 #22=2 #26=3
#1=0 #7=2 #8=2 #13=0 #15=3
#17=2 #20=3 #26=1 #27=0 #31=3
#4=2 #5=3 #6=1 #9=1 #10=0
#12=2 #17=0 #19=1 #25=0 #29=0
#0=0 #2=1 #11=1 #13=1 #17=2
#21=3 #22=1 #23=1 #24=2 #30=2
#4=1 #9=0 #10=0 #11=1 #12=2
#23=1 #25=2 #29=1 #30=0 #31=2
#1=2 #6=0 #7=1 #10=3 #12=1
#15=3 #16=1 #17=2 #23=2 #24=1
#1=2 #2=2 #3=2 #5=2 #9=2
#13=1 #15=0 #22=1 #25=2 #30=0
#0=3 #1=1 #5=1 #6=0 #7=1
#8=2 #15=3 #17=0 #24=3 #25=0
#0=2 #6=1 #8=0 #9=2 #10=2
#16=0 #18=0 #19=0 #21=0 #26=0
#1=1 #3=0 #4=2 #9=1 #10=3
#13=0 #14=2 #22=0 #23=0 #30=2

Query

CVE
Time Size

VE
Time

Size

#14

30

2304

40

2304

#7

14

256

17

768

#25

7

256

7

256

#23

4

192

4

192

#28

10

256

8

256

#22

9

336

10

768

#25

14

768

31

2304

#7

544

9216

121

9216

#8

10

1024

16

1024

#25

22

768

22

768

#5

3

84

4

192

#24

11

256

8

256

#23

6

256

23

1024

#27

10

576

18

768

#5

77

4096

141

12288

#27

3

64

4

144

#18

4

112

65

12288

#21

76

768

16

1024

#13

7

576

12

768

#6

37

768

17

768

Figure 15: Data for random queries with 10 randomly observed variables for the water network

307

POOLE & ZHANG

generate_random_CBN(n, s, p) :
create n Boolean variables X1 , . . . , Xn
Let S = {{}, Xi  : i ≤ i ≤ n}
{S is a set of context-variable pairs}
repeat
choose random c, Xi  ∈ S
choose random j such that 1 ≤ j < n
if j < i and Xj doesn’t appear in c:



replace c, Xi  ∈ S with c ∧ Xj = true, Xi and c ∧ Xj = false, Xi
until there are n + s elements of S
for each c, Xi  ∈ S
Let V = {Xi }
for each j < i
if Xj doesn’t appear in c
with probability p add Xj to V
create a random table T on the variables in V
add confactor c, T  to the contextual belief network
Figure 16: Algorithm for constructing the randomised examples
confactor with probability p. The variable that the leaf is for is also in the confactor. We assign
random numbers the probabilities (these numbers won’t affect anything in the results assuming that
the times for operations on floating point numbers isn’t affected by the actual values of the numbers).
The algorithm to construct the random examples used in Section 6.2 is given in Figure 16. Note
that “choose random” means to choose randomly from a uniform distribution.
For the examples biased towards using fewer variables, we replaced the line:




replace c, Xi  ∈ S with c ∧ Xj = true, Xi and c ∧ Xj = false, Xi
with
if there is k < i such that Xk doesn’t appear in c and Xk is used in another context
then
replace c, Xi  ∈ S with c ∧ Xk = true, Xi  and c ∧ Xk = false, Xi 
else




replace c, Xi  ∈ S with c ∧ Xj = true, Xi and c ∧ Xj = false, Xi
where, if more than one such k exists, the k is chosen uniformly from all of the values that satisfy
the condition.
Figure 17 shows some of the details of some of the data shown in Figure 11. All of the times
are for a Java implementation running on a 700 MHz Pentium running Linux with 768 megabytes of
memory. In order to allow for the variation in run times due to garbage collection, each evaluation
was run three times and the smallest time was returned.
For each generated example, the table of Figure 17 shows
• n the number of variables
308

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

n

s

p

30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30

5 (5)
5 (5)
5 (5)
5 (5)
5 (5)
5 (5)
5 (5)
5 (4)
5 (4)
5 (3)
10 (9)
10 (9)
10 (10)
10 (8)
10 (7)
10 (8)
10 (9)
10 (8)
10 (9)
10 (8)
15 (10)
15 (11)
15 (11)
15 (12)
15 (11)
15 (11)
15 (13)
15 (12)
15 (12)
15 (10)

0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2

CBN
Size
10922
1846
1964
1600
1668
904
1738
1744
3060
2692
3842
1262
3908
4904
10456
1790
2054
3608
6392
6180
2724
5896
2096
3674
2388
1938
4188
2806
3512
1700

BN
Size
8398266
132692
13456
4908
8292
1906
10786
18538
87292
69602
530622
36070
80704
33568176
314126
28758
24452
58352
1188654
42344
2104338
8425520
2239982
39928
552768
49388
351374
111632
126464
541498

CVE
Time
MTS
31388 2097152
9653
393216
2022
131072
3922
196608
60304
614400
637
32768
720
42048
2223
131072
11681
524288
5325
262144
22288
524288
4063
147456
112537 1966080
81450 5111808
31627
589824
1590
98304
13642
262144
24948
819200
403347 5767168
10078
253952
56636 1572864
185925 6389760
27065
825344
6393
360448
8623
425984
11299
438272
18602
432776
3213
138240
16118
258048
5986
172032

VE
Time
84801
12418
3748
5572
61612
1005
1340
2546
12298
9530
31835
11038
31214
203284
44079
2974
5253
18574
359992
17501
49316
260645
42180
9631
13641
27303
38843
5463
11479
8414

Figure 17: Comparisons of random networks that exhibit CSI.

309

MTS
4194304
524288
131072
524288
2097152
65536
131072
262144
1048576
524288
2097152
524288
4194304
16777216
2097152
262144
262144
1048576
33554432
1048576
2097152
16777216
2097152
524288
524288
2097152
2097152
1048576
1048576
524288

POOLE & ZHANG

• s the number of splits and, in parentheses, the number of different variables on which the splits
occur (different leaves can be split on the same variable).
• p the probability of splitting on a variable it is possible to split on.
• CBN size: the total size (summing over the size of the tables) of the contextual belief network
representation.
• BN size: the total size of the factors for the corresponding belief network (i.e., assuming the
probabilities are stored in tables).
• CVE time is the runtime (in msecs) of contextual variable elimination and CVE MTS is the
maximum sum of the table sizes created for the elimination of a single variable.
• VE time: the runtime (in msecs) of variable elimination and VE MTS is the maximum table
size created for the elimination of a single variable.

References
Becker, A. and Geiger, D. (1996). A sufficiently fast algorithm for finding close to optimal junction trees, in E. Horvitz and F. Jensen (eds), Proc. Twelfth Conf. on Uncertainty in Artificial
Intelligence (UAI-96), Portland, OR, pp. 81–89.
Bertelè, U. and Brioschi, F. (1972). Nonserial dynamic programming, Vol. 91 of Mathematics in
Science and Engineering, Academic Press.
Boutilier, C. (1997). Correlated action effects in decision theoretic regression, in Dan Geger and
Prakash Shenoy (ed.), Proceedings of the Thirteenth Annual Conference on Uncertainty in
Artificial Intelligence (UAI–97), Providence, Rhode Island, pp. 30–37.
Boutilier, C., Dearden, R. and Goldszmidt, M. (1995). Exploiting structure in policy construction,
Proc. 14th International Joint Conf. on Artificial Intelligence (IJCAI-95), Montréal, Québec,
pp. 1104–1111.
Boutilier, C., Friedman, N., Goldszmidt, M. and Koller, D. (1996). Context-specific independence
in Bayesian networks, in E. Horvitz and F. Jensen (eds), Proc. Twelfth Conf. on Uncertainty in
Artificial Intelligence (UAI-96), Portland, OR, pp. 115–123.
Chickering, D. M., Heckerman, D. and Meek, C. (1997). A Bayesian approach to learning Bayesian
networks with local structure, Proc. Thirteenth Conf. on Uncertainty in Artificial Intelligence
(UAI-97), pp. 80–89.
Dagum, P. and Luby, M. (1993). Approximating probabilistic inference in Bayesian belief networks
is NP-hard, Artificial Intelligence 60(1): 141–153.
D’Ambrosio (1995). Local expression languages for probabilistic dependence, International Journal
of Approximate Reasoning 13(1): 61–81.
310

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

n

s

p

30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30

5 (3)
5 (2)
5 (2)
5 (2)
5 (1)
5 (2)
5 (2)
5 (1)
5 (3)
5 (2)
10 (3)
10 (3)
10 (2)
10 (3)
10 (2)
10 (2)
10 (3)
10 (2)
10 (2)
10 (3)
15 (2)
15 (3)
15 (3)
15 (2)
15 (3)
15 (4)
15 (3)
15 (3)
15 (3)
15 (2)

0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2
0.2

CBN
Size
1602
6108
17526
892
1540
1156
2344
1406
7740
4184
3038
888
3372
2240
1106
778
1888
9740
1102
4078
2710
1246
2046
1588
2260
2842
3074
1834
4362
3142

BN
Size
3658
7240
19632
4164
2640
5572
68676
7284
209652
8838
1119562
5176
4222408
30968
11660
4582
72260
413892
7744
298438
50698
84836
75956
138888
20230
67385366
533738
278426
209186
151160

CVE
Time
662
1583
6754
1604
261
608
12462
2197
17736
8053
30669
565
21834
20308
741
274
6659
11271
313
61140
8845
1935
54571
14280
522
322274
85480
18560
22872
4476

MTS
49152
131072
393216
81920
16512
40960
1048576
81920
851968
528384
1048576
24576
917504
524800
32768
18432
262144
868352
16384
1048576
524288
90112
1310720
458752
28672
10485760
2752512
753664
1441792
164096

VE
Time
604
1945
8833
3119
457
816
9370
4021
18279
16437
53732
2625
108732
129885
433
656
11986
179564
1395
79858
39265
3652
141386
43059
1815
726989
89431
43554
131704
26426

MTS
65536
131072
1048576
131072
32768
65536
1048576
262144
2097152
1048576
2097152
131072
4194304
4194304
65536
65536
524288
8388608
65536
4194304
2097152
262144
8388608
2097152
131072
33554432
8388608
1048576
4194304
1048576

Figure 18: Some of the details of data from Figure 12 (biased towards fewer different variables)

311

POOLE & ZHANG

Darwiche, A. (1995). Conditioning algorithms for exact and approximate inference in causal networks, in P. Besnard and S. Hanks (ed.), Proc. Eleventh Conf. on Uncertainty in Artificial
Intelligence (UAI-95), Montreal, Quebec, pp. 99–107.
Dearden, R. and Boutilier, C. (1997). Abstraction and approximate decision theoretic planning,
Artificial Intelligence 89(1): 219–283.
Dechter, R. (1996). Bucket elimination: A unifying framework for probabilistic inference, in
E. Horvitz and F. Jensen (eds), Proc. Twelfth Conf. on Uncertainty in Artificial Intelligence
(UAI-96), Portland, OR, pp. 211–219.
Díez, F. (1996). Local conditioning in Bayesian networks, Artificial Intelligence 87(1–2): 1–20.
Friedman, N. and Goldszmidt, M. (1996). Learning Bayesian networks with local structure, Proc.
Twelfth Conf. on Uncertainty in Artificial Intelligence (UAI-96), pp. 252–262.
Geiger, D. and Heckerman, D. (1996). Knowledge representation and inference in similarity networks
and Bayesian multinets, Artificial Intelligence 82: 45–74.
Guestrin, C., Venkataraman, S. and Koller, D. (2002). Context specific multiagent coordination and
planning with factored MDPs, The Eighteenth National Conference on Artificial Intelligence
(AAAI-2002), Edmonton, Canada.
Heckerman, D. and Breese, J. (1994). A new look at causal independence, Proc. of the Tenth
Conference on Uncertainty in Artificial Intelligence, pp. 286–292.
Jensen, F. V., Kjærulff, U., Olesen, K. G. and Pedersen, J. (1989). Et forprojekt til et ekspertsystem
for drift af spildevandsrensning (an expert system for control of waste water treatment — a
pilot project), Technical report, Judex Datasystemer A/S, Aalborg, Denmark. In Danish.
Jensen, F. V., Lauritzen, S. L. and Olesen, K. G. (1990). Bayesian updating in causal probabilistic
networks by local computations, Computational Statistics Quarterly 4: 269–282.
Kjærulff, U. (1990). Triangulation of graphs - algorithms giving small total state space, Technical
Report R 90-09, Department of Mathematics and Computer Science, Strandvejen, DK 9000
Aalborg, Denmark.
Lauritzen, S. L. and Spiegelhalter, D. J. (1988). Local computations with probabilities on graphical
structures and their application to expert systems, Journal of the Royal Statistical Society, Series
B 50(2): 157–224.
Neal, R. (1992). Connectionist learning of belief networks, Artificial Intelligence 56: 71–113.
Pearl, J. (1988). Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference,
Morgan Kaufmann, San Mateo, CA.
Poole, D. (1993). Probabilistic Horn abduction and Bayesian networks, Artificial Intelligence
64(1): 81–129.
312

EXPLOITING CONTEXTUAL INDEPENDENCE IN PROBABILISTIC INFERENCE

Poole, D. (1995). Exploiting the rule structure for decision making within the independent choice
logic, in P. Besnard and S. Hanks (eds), Proc. Eleventh Conf. on Uncertainty in Artificial
Intelligence (UAI-95), Montréal, Québec, pp. 454–463.
Poole, D. (1997). Probabilistic partial evaluation: Exploiting rule structure in probabilistic inference, Proc. 15th International Joint Conf. on Artificial Intelligence (IJCAI-97), Nagoya, Japan,
pp. 1284–1291.
Poole, D. (1998). Context-specific approximation in probabilistic inference, in G.F. Cooper and
S. Moral (ed.), Proc. Fourteenth Conf. on Uncertainty in Artificial Intelligence, Madison, WI,
pp. 447–454.
Saul, L., Jaakkola, T. and Jordan, M. (1996). Mean field theory for sigmoid belief networks, Journal
of Artificial Intelligence Research 4: 61–76.
Shachter, R. D., D’Ambrosio, B. D. and Del Favero, B. D. (1990). Symbolic probabilistic inference
in belief networks, Proc. 8th National Conference on Artificial Intelligence, MIT Press, Boston,
pp. 126–131.
Smith, J. E., Holtzman, S. and Matheson, J. E. (1993). Structuring conditional relationships in
influence diagrams, Operations Research 41(2): 280–297.
Tung, L. (2002). A clique tree algorithm exploiting context-specific independence, Master’s thesis,
Department of Computer Science, University of British Columbia.
Zhang, N. L. (1998). Inference in Bayesian networks: The role of context-specific independence,
Technical Report HKUST-CS98-09, Department of Computer Science, Hong Kong University
of Science and Technology.
Zhang, N. L. and Poole, D. (1999). On the role of context-specific independence in probabilistic
reasoning, Proc. 16th International Joint Conf. on Artificial Intelligence (IJCAI-99), Stockholm,
Sweden, pp. 1288–1293.
Zhang, N. and Poole, D. (1994). A simple approach to Bayesian network computations, Proc. of the
Tenth Canadian Conference on Artificial Intelligence, pp. 171–178.
Zhang, N. and Poole, D. (1996). Exploiting causal independence in Bayesian network inference,
Journal of Artificial Intelligence Research 5: 301–328.

313

Journal of Artificial Intelligence Research 18 (2003) 117-147

Submitted 7/02; published 2/03

Translation of Pronominal Anaphora between English and
Spanish: Discrepancies and Evaluation
Jesús Peral

jperal@dlsi.ua.es

Dept. Lenguajes y Sistemas Informáticos
University of Alicante
Alicante, SPAIN

Antonio Ferrández

antonio@dlsi.ua.es

Dept. Lenguajes y Sistemas Informáticos
University of Alicante
Alicante, SPAIN

Abstract
This paper evaluates the different tasks carried out in the translation of pronominal
anaphora in a machine translation (MT) system. The MT interlingua approach named
AGIR (Anaphora Generation with an Interlingua Representation) improves upon other
proposals presented to date because it is able to translate intersentential anaphors, detect co-reference chains, and translate Spanish zero pronouns into English—issues hardly
considered by other systems. The paper presents the resolution and evaluation of these
anaphora problems in AGIR with the use of different kinds of knowledge (lexical, morphological, syntactic, and semantic). The translation of English and Spanish anaphoric
third-person personal pronouns (including Spanish zero pronouns) into the target language
has been evaluated on unrestricted corpora. We have obtained a precision of 80.4% and
84.8% in the translation of Spanish and English pronouns, respectively. Although we have
only studied the Spanish and English languages, our approach can be easily extended to
other languages such as Portuguese, Italian, or Japanese.

1. Introduction
The anaphora phenomenon can be considered one of the most difficult problems in natural
language processing (NLP). The etymology of the term anaphora originates with the Ancient
Greek word “anaphora” (αναϕoρα), which is made up of the separate words, ανα (“back,
upstream, back in an upward direction”) and ϕoρα (“the act of carrying”), and which
denotes the act of carrying back upstream.
Presently, various definitions of the term anaphora exist, but the same concept underlies
all of them. Halliday & Hassan (1976) defined anaphora as “the cohesion (presupposition)
which points back to some previous item.” A more formal definition was proposed by Hirst
(1981), which defined anaphora as “a device for making an abbreviated reference (containing
fewer bits of disambiguating information, rather than being lexically or phonetically shorter)
to some entity (or entities) in the expectation that the receiver of the discourse will be able
to disabbreviate the reference and, thereby, determine the identity of the entity.” Hirst
refers to the entity as an anaphor, and the entity to which it refers is its antecedent:
• [Mary]i went to the cinema on Thursday. Shei didn’t like the film.
c
°2003
AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Peral & Ferrández

In this example, the pronoun she is the anaphor and the noun phrase Mary is the
antecedent. This type of anaphora is the most common type, the so-called pronominal
anaphora.
The anaphora phenomenon can be further broken down into two processes: that of
resolution and generation. “Resolution” refers to the process of determining the antecedent
of an anaphor; “generation” is the process of creating references over a discourse entity.
In the context of machine translation, the resolution of anaphoric expressions is of crucial
importance in order to translate/generate them correctly into the target language (Mitkov
& Schmidt, 1998). Solving the anaphora and extracting the antecedent are key issues for
correct translation into the target language. For instance, when translating into languages
which mark the gender of pronouns, resolution of the anaphoric relation is essential. Unfortunately, the majority of MT systems do not deal with anaphora resolution, and their
successful operation usually does not go beyond the sentence level.
We have employed a computational system that focuses on anaphora resolution in order
to improve MT quality and have then measured the improvements. The SUPAR (Slot
Unification Parser for Anaphora Resolution) system is presented in the work of Ferrández,
Palomar, & Moreno (1999). This system can deal with several kinds of anaphora with
good results. For example, the system resolves pronominal anaphora in Spanish with a
precision rate of 76.8% (Palomar et al., 2001); it resolves one-anaphora in Spanish dialogues
with a precision rate of 81.5% (Palomar & Martı́nez-Barco, 2001), and it resolves definite
descriptions in Spanish direct anaphora and bridging references with precision rates of 83.4%
and 63.3%, respectively (Mun̄oz, Palomar, & Ferrández, 2000). In the work presented here,
we have used an MT system exclusively for pronominal anaphora resolution and translation.
This kind of anaphora is not usually taken into account by most of the MT systems, and
therefore pronouns are usually translated incorrectly into the target language. Although
we have focused on pronominal anaphora, our approach can be easily extended to other
kinds of anaphora, such as one-anaphora or definite descriptions previously resolved by the
SUPAR system.
It is important to emphasize that in this work we only resolve and translate personal
pronouns in the third person whose antecedents appear before the anaphor—that is, an
anaphoric relation between the pronoun and the antecedent is established, and cataphoric
relations (in which the antecedent appears after the anaphor) are not taken into account.
This paper focuses on the evaluation of the different tasks carried out in our approach
that lead to the final task: the translation of the pronominal anaphora into the target
language. The main contributions of this work are a presentation and evaluation of the
multilingual anaphora resolution module (English and Spanish) and an exhaustive evaluation of the pronominal anaphora translation between these languages.
The paper is organized as follows: Section 2 shows the anaphora-resolution needs in MT
and the deficiencies of traditional MT systems to resolve this phenomenon conveniently.
Section 3 presents the analysis module of our approach. In Section 4, we identify and
evaluate the NLP problems related to pronominal anaphora resolved in our system. Section
5 presents the generation module of the system. In Section 6, the generation module
is evaluated in order to measure the efficiency of our proposal. Finally, we present our
conclusions.
118

Translation of Pronominal Anaphora between English and Spanish

2. Anaphora Resolution and its Importance in MT
As noted earlier, anaphora resolution is of crucial importance in order to translate anaphoric
expressions correctly into a target language. Let us consider the sentences (Hutchins &
Somers, 1992):
1. [The monkey]i ate the banana because iti was hungry.
2. The monkey ate [the banana]i because iti was ripe.
3. The monkey ate the banana because it was tea-time.
In each sentence the pronoun it refers to something different: in sentence (1), it refers
to the monkey, in sentence (2) to the banana, and in sentence (3), to the abstract notion
of time. If we wish to translate these sentences into Spanish or German (languages which
mark the gender of pronouns), anaphora resolution will be absolutely essential since, in
these languages, pronouns take the gender of their antecedents. Therefore, in Spanish, we
would obtain the following pronouns: (1) éste (in the masculine form since the antecedent—
the monkey—is masculine), (2) ésta (feminine—the banana), and (3) an omitted pronoun
(since the second clause of the sentence is impersonal in Spanish and does not need any
subject). On the other hand, in German we would obtain: (1) er (masculine antecedent),
(2) sie (feminine antecedent), and (3) es (neutral).
Besides these problems, originated by the gender of anaphoric expressions in different
languages, there are other differences (that we have named discrepancies) which influence
the process of translation of these expressions. These discrepancies have been previously
studied by other authors. Mitkov & Schmidt (1998) present several problems to be taken
into account in the translation of pronominal anaphors between different languages (German, French, English, Malay, and Korean); Nakaiwa & Ikeara (1992) treat the problem of
the translation of elliptical constructions in a Japanese–English MT system; and Mitkov et
al. (1994) and Geldbach (1999) present the discrepancies in an English–Korean MT system
and a Russian–German MT system, respectively.
Another difference between languages is that of number discrepancies, in which certain
nouns are referred to by a singular pronoun in one language and by a plural noun in the
other. For example, the word people is plural in English, whereas in Spanish or German it
is singular. Hence, in translations from English to Spanish, or from English to German, the
plural pronoun will become a singular pronoun.
On the other hand, although in the majority of cases language-pairs pronouns in the
source language are translated by target-language pronouns that correspond to the antecedent of the anaphor, there are some exceptions. In most of these cases, pronominal
anaphors are simply omitted in the target language. For instance, in translations from
English to Spanish, pronouns are frequently not translated because of the typical Spanish
elliptical zero-subject construction. Other languages with typical zero constructions are
Japanese, Italian, Thai, or Chinese.
In some languages, however, the pronoun is directly translated by its antecedent. For
example, in English–Malay translations there is a tendency to replace the it pronoun with
its antecedent, in which case the translator must first be able to identify the antecedent.
119

Peral & Ferrández

Some languages translate pronouns into different expressions, depending on the syntactic
and semantic information of the antecedent. For example, in English–Korean translation
pronouns can be elliptically omitted, or they can be translated into definite noun phrases,
into their antecedent, or into different Korean pronouns.
All the above-mentioned problems in the translation of anaphoric expressions into a
target language show that it is very important to carry out a detailed analysis of these
expressions (including their resolution and the identification of the antecedent).
Because the majority of MT systems only handle one-sentence input, they usually cannot
deal with anaphora resolution, and if they do, their successful operation usually does not go
beyond the sentence level. In order to assess the deficiencies of MT systems, we analyzed the
characteristics of different MT systems, with an emphasis on those characteristics related
to anaphora resolution and translation into a target language. An overview of our analysis
can be seen in Table 1.
MT system
Systran
Météo
SUSY
Ariane
Eurotra
METAL
Candide
Inter-Nostrum
IXA
Episteme
KANT
DLT
DLT (BKB)
Rosetta
CREST
µkosmos
a.
b.
c.
d.
e.
f.

Strategya
Direct
Direct
Transfer
Transfer
Transfer
Transfer
Transfer
Transfer
Transfer
Transfer
Interlingua
Interlingua
Interlingua
Interlingua
Interlingua
Interlingua

Restrictb
No
Yes
No
No
No
No
Yes
Yes
No
No
Yes
No
No
No
Yes
Yes

Partialc
Yes
No
No
No
No
Yes
No
Yes
Yes
No
No
No
No
No
No
No

Anaphord
Yes
No
Yes
Yes
No
Yes
No
No
No
No
Yes
No
Yes
No
Yes
No

Corefere
No
No
No
No
No
No
No
No
No
No
No
No
No
No
Yes
No

Zerof
Yes
No
No
Yes
No
Yes
No
No
No
No
Yes
No
No
No
Yes
No

Strategy of translation: direct, transfer, or interlingua.
Restricted domain.
Partial parsing.
Resolution of intersentential anaphora.
Identification of co-reference chains.
Translation of zero pronouns into the target language.

Table 1: Characteristics of main MT systems
The table reflects a number of different system characteristics.
1. MT system. The MT systems studied included Systran (Toma, 1977; Wheeler,
1987); Météo (Chandioux, 1976, 1989); SUSY (Maas, 1977, 1987); Ariane (Boitet &
Nédobejkine, 1981; Boitet, 1989); Eurotra (Varile & Lau, 1988; Allegranza, Krauwer,
& Steiner, 1991); METAL (Bennet & Slocum, 1985; Thurmair, 1990); Candide (Berger
120

Translation of Pronominal Anaphora between English and Spanish

et al., 1994); Inter-Nostrum (Canals-Marote et al., 2001a, 2001b); IXA (Dı́az-Ilarraza,
Mayor, & Sarasola, 2000, 2001); Episteme (Amores & Quesada, 1997; Quesada &
Amores, 2000); KANT (Goodman, 1989; Nirenburg, 1989; Mitamura, Nyberg, & Carbonell, 1991); DLT (Witkam, 1983; Schubert, 1986); DLT with Bilingual Knowledge
Bank (BKB) (Sadler, 1989); Rosetta (Appelo & Landsbergen, 1986; Landsbergen,
1987); CREST (Farwell & Helmreich, 2000); and µkosmos (Mahesh & Nirenburg,
1995a, 1995b).
2. Strategy of translation. This characteristic indicates the strategy used by the MT system in accordance with the existence of intermediate representations: direct, transfer,
or interlingua.
3. Restricted domain. This characteristic tells if the texts of the source language are of
a specific domain (restricted domain).
4. Partial parsing. This characteristic indicates if the MT system carries out a partial parsing of the source text by identifying only some constituents (noun phrases,
prepositional phrases, etc.) and some relations between them.
5. Resolution of intersentential anaphora. This characteristic indicates whether the MT
system resolves intersentential anaphora. If it does not, then the anaphoric expressions
that have their antecedents in previous sentences will be incorrectly translated into
the target language, in most of cases.
6. Identification of co-reference chains. This characteristic tells us if the co-reference
chains of the source text are identified after resolving intersentential anaphora.
7. Translation of zero pronouns. This characteristic indicates if the MT system detects
and resolves omitted pronouns (zero pronouns1 ) in the source language that are compulsory in the target language.
After analyzing the characteristics of the primary commercial MT systems, we concluded
that there is no MT system that can work on unrestricted texts, resolve intersentential
anaphora, identify the co-reference chains of the text, and translate zero pronouns into the
target language after carrying out a partial parsing of the source text.
Unlike other systems, such as the KANT interlingua system, the Météo system, and the
Candide system, among others, that are designed for well-defined domains, our interlingua
MT approach, called AGIR (Anaphora Generation with an Interlingua Representation),
works on unrestricted texts. Although we could have applied full parsing to these texts, we
have instead utilized partial parsing, due to the unavoidable incompleteness of the grammar.
This is a main difference between our system and other interlingua systems, such as the
DLT system (which is based on a modification of Esperanto), the Rosetta system (which
experiments with Montague semantics as the basis for an interlingua), the KANT system,
and others.
After parsing and solving pronominal anaphora, an interlingua representation of the
entire text is obtained. To do this, sentences are split into clauses, and a complex feature
1. This kind of pronouns will be presented in detail in Section 4.1.

121

Peral & Ferrández

structure based on semantic roles (agent, theme, etc.) is generated for each one. For each
clause, the different semantic roles that appear will be identified and linked with one entity
of the text. If there is an anaphor in the text, it will be linked with the entity that represents
its antecedent. The AGIR’s interlingua representation has been presented in more detail in
(Peral, Palomar, & Ferrández, 1999; Peral & Ferrández, 2000a).
From the interlingua representation, the translation of the anaphor (including the intersentential anaphor), the detection of co-reference chains of the whole text, and the translation of Spanish zero pronouns into English have been carried out. AGIR has been designed to deal with all these issues which are hardly considered by most of the real MT
systems. Furthermore, our approach can be used for other applications, for example, for
cross-language information retrieval, summarization, etc.
It is important to note that although some of the above-mentioned MT systems resolve
different problems, such as zero pronouns or pronominal anaphora, their results are not very
satisfactory. Furthermore, we present some examples (extracted from the corpora used
in the evaluation of our approach—see Section 4) of incorrect Spanish–English–Spanish
translations of pronouns done by Systran2 that AGIR does correctly3 :
• (S) Siempre creı́ que a lo que yo aspiraba era a la comunicación perfecta con un
hombre, o, mejor dicho, con el hombre, con ese prı́ncipe azul de los sueños de infancia,
un ser que sabrı́a adivinarme hasta en los más menudos pliegues interiores. Ahora he
aprendido no sólo que [esa fusión]i es imposible, sino además que Øi es probablemente
indeseable.
• (E) I always thought that to which I aspired I was to the perfect communication
with a man, or, rather, with the man, that blue prince of the childhood dreams, a
being who would know to guess to me until in slightest you fold interiors. Now I have
learned not only that that fusion is impossible, but in addition that he is probably
undesirable.
In this example, Systran incorrectly translates into English the zero pronoun of the
last sentence of the paragraph, proposing the pronoun he instead of the pronoun it (the
antecedent is the noun phrase esa fusión—that fusion). Our system proposed the correct
pronoun. It is important to note that although the zero pronoun is identified by Systran,
it is incorrectly solved and subsequently incorrectly translated.
• (S) Al pasar de [la luminosidad]i de la calle, y tal vez por contraste con ellai , impresionaba la oscuridad interior y el vacı́o de la Catedral, en la que apenas habı́a a la
vista cuatro o cinco personas.
• (E) When happening of the luminosity of the street, and perhaps in contrast with
her, it impressed the inner dark and the emptiness of the Cathedral, in which as soon
as there were at sight four or five people.
2. A free trial of the commercial product SYSTRANLinks (copyright 2002 by SYSTRAN S.A.) has been
used to translate between the English and Spanish languages all the corpora used in the evaluation of
our approach. (URL = http://w4.systranlinks.com/config, visited on 06/22/2002).
3. In this paper, we have used the symbols (S) and (E) to represent Spanish and English texts, respectively.
The symbol “Ø” indicates the presence of the omitted pronoun. In the examples, the pronoun and the
antecedent have an index; co-indexing indicates co-reference between them.

122

Translation of Pronominal Anaphora between English and Spanish

In this case, Systran incorrectly translates into English the pronoun ella (with antecedent
la luminosidad —the luminosity), by proposing the pronoun her instead of it.
• (E) If you have not already done so, unpack [your printer]i and the accessory kit that
came with iti .
• (S) Si usted no ha hecho ya ası́ pues, desempaquete su impresora y el kit de accesorios
eso vino con él.
This example shows an incorrect English–Spanish translation of the pronoun it. In this
case, the pronoun is incorrectly solved (the antecedent is the noun phrase your printer,
feminine) and then it is incorrectly translated (pronoun él —masculine—instead of pronoun
ésta—feminine).
All the above examples illustrate that the translation of pronouns could be notably
improved if their antecedents were correctly identified and, subsequently, pronouns were
translated into the target language.

3. AGIR’s Analysis Module
AGIR system architecture is based on the general architecture of an MT system that uses an
interlingua strategy. Translation is carried out in two stages: (1) from the source language
to the interlingua, and (2) from the interlingua into the target language. Modules for
analysis are independent from modules for generation. Although our present work has only
studied the Spanish and English languages, our approach can be easily extended to other
languages, for exampe, to multilingual system, in the sense that any analysis module can
be linked to any generation module.
In AGIR the analysis is carried out using SUPAR (slot unification parser for anaphora
resolution) (Ferrández et al., 1999). SUPAR is a computational system that focuses on
anaphora resolution. It can deal with several kinds of anaphora, such as pronominal
anaphora, one-anaphora, or definite descriptions4 . The SUPAR’s input is a grammar defined by means of the grammatical formalism SUG (slot unification grammar ). A translator
that transforms SUG rules into Prolog clauses has been developed. This translator provides
a Prolog program that will parse each sentence. SUPAR can perform either a full or a partial parsing of the text with the same parser and grammar. In this study, partial-parsing
techniques have been utilized due to the unavoidable incompleteness of the grammar and
the use of unrestricted texts (corpora) as input.
The analysis of the source text is carried out in several steps. The first step of the
analysis module is the lexical and morphological analysis of the input text. Because of
the use of unrestricted texts as input, the system obtains the lexical and morphological
information of the texts’ lexical units from the output of a part-of-speech (POS) tagger.
The word as it appears in the corpus, its lemma, and its POS tag (with morphological
information) is supplied for each lexical unit in the corpus.
4. One-anaphora has the following structure in English: a determiner and the pronoun one with some
premodifiers or postmodifiers (the red one; the one with the blue bow ). This kind of anaphors in Spanish
consists of noun phrases in which the noun has been omitted (el rojo; el que tiene el lazo azul ). In
definite descriptions, anaphors are formed by definite noun phrases that refer to objects that are usually
uniquely determined in the context.

123

Peral & Ferrández

The next step is the parsing of the text (which includes the lexical and morphological information extracted in the previous stage). Before applying the parsing, the text is
split into sentences. The output will be the slot structure (SS) that stores the necessary
information5 for the subsequent stages.
In the third step, a module of word-sense disambiguation (WSD) is used to obtain a
single sense for the different texts’ lexical units. The lexical resources, WordNet (Miller,
Beckwith, Fellbaum, Gross, & Miller, 1990) and EuroWordNet (Vossen, 1998), have been
used in this stage6 .
The SS, enriched with the information from the previous steps, will be the input for the
next step, in which NLP problems (anaphora, extraposition, ellipsis, etc.) will be treated
and solved. In this work, we have focused on the resolution of NLP problems related to
pronominal anaphora. After this step, a new slot structure (SS’) is obtained. In this new
structure, the correct antecedent—chosen from the possible candidates after applying a
method based on constraints and preferences (Ferrández et al., 1999)—for each anaphoric
expression will be stored along with its morphological and semantic information. The new
structure SS’ will be the input for the final step of the analysis module.
In the last step, AGIR generates the interlingua representation of the entire text. This
is the main difference between AGIR and other MT systems, which process the input text
sentence by sentence. The interlingua representation will allow the correct translation of
the intersentential and intrasentential pronominal anaphora into the target language. Moreover, AGIR allows the identification of co-reference chains of the text and their subsequent
translation into the target language.
The interlingua representation of the input text is based on the clause as the main unit
of this representation. Once the text has been split into clauses, AGIR uses a complex
feature structure for each clause. This structure is composed of semantic roles and features
extracted from the SS of the clause. The notation we have used is based on the one used
in KANT interlingua.
It is important to emphasize that the interlingua lexical unit has been represented in
AGIR using the word and its correct sense in WordNet. After accessing the ILI (interlingual-index) module of EuroWordNet, we will be able to generate the lexical unit into the
target language.
Once the semantic roles have been identified, the interlingua representation will store
the clauses with their features, the different entities that have appeared in the text and the
relations between them (such as anaphoric relations). This representation will be the input
for the generation module.
5. The SS stores the following information for each constituent: constituent name (NP, PP, etc.), semantic
and morphological information, discourse marker (identifier of the entity or discourse object), and the
SS of its subconstituents.
6. In the evaluation of our approach, we have only used an English corpus (SemCor) where all content words
are annotated with their WordNet sense; this sense has been used to identify the semantic category of the
word. The remaining corpora do not have information about the senses of the content words; therefore, a
set of heuristics has been used to identify their semantic categories. Currently, a WSD module (Montoyo
& Palomar, 2000) is being developed in our Research Group, which will be incorporated into our system
in the future.

124

Translation of Pronominal Anaphora between English and Spanish

4. Resolution of NLP Problems in AGIR
The fourth stage of the AGIR’s analysis module allows for the resolution of NLP problems. Our present work focuses on the resolution of NLP problems related to pronominal
anaphora in the source language so as to translate these anaphoric expressions correctly
into the target language. We are only describing the translation of anaphoric, third-person,
personal pronouns into the target language. Therefore, we have only focused on the discrepancies between Spanish and English in the treatment of these pronouns. In the next
two subsections, we will describe the syntactic discrepancies treated and solved in AGIR
(Spanish zero pronouns) and the anaphora resolution module of the system.
4.1 Elliptical Zero-Subject Constructions (Zero Pronouns)
The Spanish language allows for the omission of the pronominal subject of the sentences.
These omitted pronouns are usually called zero pronouns. Whereas in other languages (e.g.,
in Japanese), zero pronouns may appear in either the subject’s or the object’s grammatical
position, in Spanish texts zero pronouns only appear in the position of the subject.
In MT systems, the correct detection and resolution of zero pronouns in the source
language is of crucial importance if these pronouns are compulsory in the target language.
In the following example, a Spanish sentence that contains a zero pronoun and its translation
into English with the equivalent compulsory pronoun are shown.
• (S) [Ese hombre]i era un boxeador profesional. Øi Perdió únicamente dos combates.
• (E) [That man]i was a professional boxer. Hei only lost two fights.
We should remark that zero pronouns can also occur in English, although they appear
less frequently, since they usually are used in coordinated sentences in which the zero pronoun usually refers to the subject of the sentence. Although zero pronouns have already
been studied in other languages, such as Japanese—with a resolution percentage of 78% in
the work of (Okumura & Tamura, 1996), they have not yet been studied in Spanish texts.
(Ferrández & Peral, 2000) has presented the first algorithm for Spanish zero-pronoun resolution. Basically, in order to translate Spanish zero pronouns into English, they must first
be located in the text (ellipsis detection) and then resolved (anaphora resolution) (Peral &
Ferrández, 2000b):
• Zero-pronoun detection. In order to detect zero pronouns, sentences should be divided
into clauses, since the subject can only appear between the clause constituents. After
that, a noun-phrase (NP) or a pronoun is sought, for each clause, through the clause
constituents on the lefthand side of the verb, unless it is imperative or impersonal.
Such an NP or pronoun must agree in person and number with the verb of the clause.
• Zero-pronoun resolution. After the zero pronoun has been detected, our computational
system inserts the pronoun in the position in which it has been omitted. This pronoun
will be detected and resolved in the following module of anaphora resolution. Person
and number information is obtained from the clause verb. Sometimes, in Spanish, the
gender information of the pronoun can be obtained from the object when the verb
125

Peral & Ferrández

is copulative. In these cases, the subject must agree in gender and number with its
object whenever the object can have either a masculine or feminine linguistic form.
4.1.1 Evaluation
To evaluate this task, two experiments were performed: an evaluation of zero-pronoun
detection and an evaluation of zero-pronoun resolution. In both experiments the method
was tested on two kinds of corpora. In the first instance, we used a portion of the LEXESP7
corpus that contains a set of thirty-one documents (38,999 words) from different genres and
written by different authors. The LEXESP corpus contains texts of different styles and
on different topics (newspaper articles about politics, sports, etc.; narratives about specific
topics; novel fragments; etc.). In the second instance, the method was tested on a fragment
of the Spanish version of Blue Book (BB) corpus (15,571 words), a technical manual that
contains the handbook of the International Telecommunications Union (CCITT) published
in English, French, and Spanish. Both corpora are automatically tagged by different taggers.
We randomly selected a subset of the LEXESP corpus (three documents —6,457 words)
and a fragment of the Blue Book corpus (4,723 words) as training corpora. The remaining
fragments of the corpora were reserved for test data.
It is important to emphasize that all the tasks presented in this paper were automatically
evaluated after the annotation of each pronoun (including zero pronouns). To do so, each
anaphoric, third-person, personal pronoun was annotated with the information about its
antecedent and its translation into the target language. Furthermore, co-reference chains
were identified. The annotation phase was accomplished in the following manner: (1)
two annotators (native speakers) were selected for each language, (2) an agreement was
reached between the annotators with regard to the annotation scheme, (3) each annotator
annotated the corpora, and (4) a reliability test (Carletta et al., 1997) was done on the
annotation in order to guarantee the results. The reliability test used the kappa statistic
that measures agreement between the annotations of two annotators in making judgments
about categories. In this way, the annotation is considered a classification task consisting of
defining an adequate solution among the candidate list. According to Carletta et al. (1997),
a k measurement such as 0.68 < k < 0.80 allows us to draw encouraging conclusions, and
a measurement k > 0.80 means there is total reliability between the results of the two
annotators. In our tests, we obtained a kappa measurement of 0.83. Therefore, we consider
the annotation obtained for the evaluation to be totally reliable.
4.1.2 Evaluation of Zero-Pronoun Detection
In the evaluation of zero-pronoun detection, the training phase was used to carry out modifications in the grammar in order to improve the processes of partial parsing and clause
splitting. After this training, we conducted a blind test over the entire test corpus. To
achieve this sort of evaluation, several different subtasks may be considered. First, each
verb must be detected. This task is easily accomplished since both corpora have been pre7. The LEXESP corpus belongs to the project of the same name, carried out by the Psychology Department
of the University of Oviedo and developed by the Computational Linguistics Group of the University
of Barcelona, with the collaboration of the Language Processing Group of the Catalonia University of
Technology, Spain.

126

Translation of Pronominal Anaphora between English and Spanish

viously tagged. The second task is to classify the verbs into two categories: (a) verbs whose
subjects have been omitted, and (b) verbs whose subjects have not. The obtained results
with the LEXESP and Blue Book corpora appear in Table 2.

LX
BB

1st
240
0

Verbs with subject omitted
Verbs with subject not omitted
P(%) 2nd P(%)
3rd
P(%) 1st P(%) 2nd P(%)
3rd
P(%)
96.7
54
98.1 1,227 97.1 31
71
17
94.1 1,085 83.3
PRECISION = 97.1%
PRECISION = 83.1%
0
0
0
121
97.5
0
0
0
0
351
82
PRECISION = 97.5%
PRECISION = 82.0%
GLOBAL PRECISION = 90.4%
Table 2: Zero-pronoun detection, evaluation phase

The table is divided into two parts, corresponding to categories (a) and (b) previously
mentioned. For each category, the number of verbs in first, second, and third person,
together with their precision (P), are represented. Precision was defined as the number
of verbs correctly classified (subject omitted or not) divided by the total number of verb
classifications attempted for each type. For example, in the LEXESP corpus 1,227 verbs in
the third person with their subjects omitted were classified, and the precision obtained was
97.1%.
Discussion. In the detection of zero pronouns the following results were obtained: for
the LEXESP corpus, precisions of 97.1% and 83.1% were obtained for verbs whose subjects
were omitted or were not omitted, respectively; for the BB corpus, precisions of 97.5% and
82% were obtained. For both corpora, an overall precision of 90.4% (2,825 out of a total of
3,126) was obtained for this task.
From these results, we have extracted the following conclusions:
• There are no meaningful differences between the results obtained with each corpus.
• The BB corpus has no verbs in either the first or second person. This is explained by
considering the style of the corpus: it is a technical manual which usually consists of
a series of isolated definitions done by the writer.
• The rate of precision for the detection of verbs whose subjects are not omitted is
lower (approximately 15%) than for the detection of verbs whose subjects are omitted.
There are several reasons for this:
– The POS tagger does not identify impersonal verbs. This problem has been
partly resolved heuristically, by the choice of impersonal verbs (e.g., llover —to
rain), but it cannot be resolved for all impersonal verbs. For example, the verb
ser (to be) is not usually impersonal, but it can be in certain constructions (e.g.,
Es hora de desayunar —It is time to have breakfast).
– The ambiguity and the unavoidable incompleteness of the grammar affects the
process of clause splitting, and therefore affects the detection of the possible
subject for the clause on the lefthand side of the verb.
127

Peral & Ferrández

Since ours is the first study done specifically on Spanish texts and since the design of
the detection stage mainly depends upon the structure of the language in question, we have
not compared our results with those of other published works. Such comparisons would
prove to be insignificant8 .
Finally, it is important to emphasize the importance of this phenomenon in Spanish.
Specifically, in both corpora, the subject is omitted in 52.5% (1,642 out of 3,126) of the
verbs. Furthermore, this phenomenon is even more important in narrative texts (57.3%
in the LEXESP corpus) than in the technical manuals (25.6% in the BB corpus). These
percentages show the importance of correctly detecting these kinds of pronouns in an MT
system so as to conveniently translate them into the target language.
4.1.3 Evaluation of Zero-Pronoun Resolution
After zero pronouns have been detected, they are then resolved in the subsequent module
of anaphora resolution (explained in the following subsection). Basically, an algorithm that
combines different kinds of knowledge by distinguishing between constraints and preferences
is used (Ferrández et al., 1999; Palomar et al., 2001).
The set of constraints and preferences presents two basic differences between zeropronoun and pronominal anaphora resolution:
1. Zero-pronoun resolution has the constraint of agreement only in person and number,
whereas pronominal anaphora resolution also requires gender agreement.
2. Two new preferences to solve zero pronouns are used: (a) preference is given to
candidates in the same sentence as the anaphor that have also been the solution of a
zero pronoun in the same sentence as the anaphor, and (b) in the case where the zero
pronoun has gender information, preference is given to those candidates that agree in
gender.
In evaluating zero-pronoun resolution so as to obtain the best order of preferences (one
that produces the best performance), we used the training phase to identify the importance
of each kind of knowledge. To do this, we analyzed the antecedent for each pronoun in the
training corpora, and we identified their configurational characteristics with reference to
the pronoun (e.g., if the antecedent was a proper noun, if the antecedent was an indefinite
NP, if the antecedent occupied the same position with reference to the verb as the anaphor
—before or after, etc.). Subsequently, we constructed a table that showed how often each
configurational characteristic was valid for the solution of a particular pronoun (e.g., the
solution of a zero pronoun was a proper noun 63% of the time, for a reflexive pronoun, it
was a proper noun 53% of the time, etc.). In this way, we were able to define the different
patterns of Spanish pronoun resolution and apply them in order to obtain the evaluation
results that are presented in this paper. The order of importance was determined by first
sorting the preferences according to the percentage of each configurational characteristic;
8. In order to compare our system with other systems, in Section 6.2 we evaluate pronoun translation
(including zero pronouns) between Spanish and English using the commercial product SYSTRANLinks
and the Spanish LEXESP corpus. The evaluation highlights the deficiencies of zero-pronoun detection,
resolution, and translation (out of 559 anaphoric, third-person, zero pronouns in the LEXESP corpus,
only 266 were correctly translated into English—a precision of only 47.6%).

128

Translation of Pronominal Anaphora between English and Spanish

that is, preferences with higher percentages were considered more important than those with
lower percentages. After several experiments on the training corpora, an optimal order for
each type of anaphora was obtained. Since in this phase we processed texts from different
genres and by different authors, we can state that the final set of preferences obtained and
their order of application can be used with confidence on any Spanish text.
After the training, we conducted a blind test over the entire test corpus, the results for
which are shown in Table 3.
Cataphoric
LEXESP
BB
TOTAL

640
76
716

Exophoric
28
8
36

Anaphoric
Correct Total
455
559
30
37
485
596

P(%)
81.4
81.1
81.4

Table 3: Zero-pronoun resolution, evaluation phase
It is important to mention here that out of 3,126 verbs in these corpora, 1,348 (Table
2) are zero pronouns in the third person and will be resolved. In Table 3 we present a
classification of these third-person zero pronouns, which has been conveniently divided into
three categories:
1. Cataphoric. This category is comprised of those zero pronouns whose antecedents,
that is, the clause subjects, come after the verb. For instance, in the following Spanish
sentence Øi Compró [un niño]i en el supermercado ([A boy]i bought in the supermarket), the subject, un niño (a boy), appears after the verb, compró (bought). These
kinds of verbs are quite common in Spanish (P = 53.1%, 716 out of 1,348), as can be
seen in Table 3, and represents one of the main difficulties in resolving anaphora in
Spanish: the structure of a sentence is more flexible than in English. These represent
intonationally marked sentences, where the subject does not occupy its usual position
in the sentence, that is, before the verb. Cataphoric zero pronouns will not be resolved in AGIR, since semantic information is needed to be able to discard all of their
antecedents and to give preference to those that appear within the same sentence and
clause after the verb.
For example, the sentence Ø Compró un regalo en el supermercado ([He]Ø bought a
present in the supermarket) has the same syntactic structure as the previous sentence,
i.e., verb, NP, and PP, where the object function of the NP can only be distinguished
from the subject by means of semantic knowledge.
2. Exophoric. This category consists of those zero pronouns whose antecedents do not
appear linguistically in the text (they refer to items in the external world rather than
things referred to in the text). Exophoric zero pronouns will not be resolved by the
system.
3. Anaphoric. This category is comprised of those zero pronouns whose antecedents are
found before the verb. These kinds of pronouns will be resolved by our system.
129

Peral & Ferrández

In Table 3 the numbers of cataphoric, exophoric, and anaphoric zero pronouns for each
corpus are shown. For anaphoric pronouns, the number of pronouns correctly solved as
well as the obtained precision, P (number of pronouns correctly solved divided by the
number of solved pronouns) is presented. For example, in the LEXESP corpus, there are
640 cataphoric, 28 exophoric, and 559 anaphoric zero pronouns. From these anaphoric
pronouns, only 455 were correctly solved, giving a precision of 81.4%.
Discussion. In zero-pronoun resolution, the following results have been obtained: LEXESP corpus, P = 81.4%; BB corpus, P = 81.1%. For the combined corpora, an overall
precision for this task of 81.4% (485 out of 596) was obtained. The overall recall, R (the
number of pronouns correctly solved divided by the number of real pronouns) obtained was
79.1% (485 out of 613).
From these results, we have extracted the following conclusions:
• There are no meaningful differences between the results obtained from each corpus.
• Errors in the zero-pronoun-resolution stage are originated by different causes:
– exceptions in the application of preferences that imply the selection of an incorrect antecedent as solution of the zero pronoun (64% of the global mistakes)
– the lack of semantic information9 , causing an error rate of 32.4%
– mistakes in the POS tagging (3.6%)
Since the results provided by other works have been obtained for different languages
(English), texts, and sorts of knowledge (e.g., Hobbs and Lappin full parse the text), direct
comparisons are not possible. Therefore, in order to accomplish this comparison, we have
implemented some of these approaches in SUPAR10 , adapting them for partial parsing and
Spanish texts. Although these approaches were not proposed for zero pronouns and the
comparison will not be fully fair, we have implemented them since that is the only way to
compare our proposal directly with some well-known anaphora-resolution algorithms.
We have also compared our system with the typical baseline of proximity preference
(i.e., the antecedent that appears closest to the anaphora is chosen from among those that
satisfy the constraints—morphological agreement and syntactic conditions). We have also
compared our system with the baseline presented by Hobbs (1978)11 and Lappin & Leass’
method (Lappin & Leass, 1994). Moreover, we also compared our proposal with centering
approach by implementing functional centering (Strube & Hahn, 1999). The precisions
obtained with these different approaches and AGIR are shown in Table 4. As can be seen,
the precision obtained in AGIR is better than those obtained using the other proposals.
9. It is important to mention here that semantic information was not available for the Spanish corpora.
10. A detailed study of these implementations in SUPAR is presented in Palomar et al. (2001).
11. Hobbs’s baseline is frequently used to compare most of the work accomplished on anaphora resolution.
Hobbs’s algorithm does not work as well as ours because it carries out a full parsing of the text. Furthermore, the manner in which the syntactic tree is explored using Hobbs’s algorithm is not the best one
for Spanish, since it is nearly a free-word-order language.

130

Translation of Pronominal Anaphora between English and Spanish

LEXESP
BB

Proximity
54.9
48.6

Hobbs
60.4
62.2

Lappin
66.0
67.6

Strube
59.7
59.5

AGIR
81.4
81.1

Table 4: Zero-pronoun resolution in Spanish, comparison of AGIR with other approaches

4.2 The Anaphora-Resolution Module
The anaphora-resolution module used in AGIR is based on the module presented in (Ferrández et al., 1999; Palomar et al., 2001) for the SUPAR system. The algorithm identifies
noun phrase (NP) antecedents of personal, demonstrative, reflexive, and zero pronouns in
Spanish. It identifies both intrasentential and intersentential antecedents and is applied to
the syntactic analysis generated by SUPAR. It also combines different forms of knowledge
by distinguishing between constraints and preferences. Whereas constraints are used as
combinations of several kinds of knowledge (lexical, morphological, and syntactic), preferences are defined as a combination of heuristic rules extracted from a study of different
corpora.
A constraint defines a property that must be satisfied in order for any candidate to be
considered as a possible solution of the anaphor. The constraints used in the algorithm
are the following: morphological agreement (person, gender, and number) and syntactic
conditions on NP-pronoun non-co-reference.
A preference is a characteristic that is not always satisfied by the solution of an anaphor.
The application of preferences usually involves the use of heuristic rules in order to obtain a
ranked list of candidates. Some examples of preferences used in our system are the following:
(a) antecedents that are in the same sentence as the anaphor, (b) antecedents that have
been repeated more than once in the text, (c) antecedents that appear before their verbs
(i.e., the verb of the clause in which the antecedent appears), (d) antecedents that are
proper nouns, (e) antecedents that are an indefinite NP, and so on.
In order to solve pronominal anaphors, they must be first located in the text (anaphora
detection) and then resolved (anaphora resolution):

• Anaphora detection. In the algorithm, all the types of anaphors are identified from
left to right as they appear in the sentence’s slot structure obtained after the partial
parsing. To identify each type of pronoun, the information stored in the POS tags
has been used. In the particular case of zero pronouns, they have been detected in a
previous stage, as previously described.
• Anaphora resolution. After the anaphor has been detected, the corresponding method,
based on constraints and preferences, is applied to solve it. Each type of anaphor has
its own set of constraints and preferences, although they all follow the same general
algorithm: constraints are applied first, followed by preferences. Constraints discard
some of the candidates, whereas preferences simply sort the remaining candidates.
131

Peral & Ferrández

4.2.1 Evaluation
In evaluating the algorithm for anaphora resolution12 , we looked at pronominal anaphora
resolution in Spanish and English, respectively. For the Spanish evaluation, the method
was tested on the portion of the LEXESP corpus previously used to evaluate zero-pronoun
detection and resolution. For English, we tested the method on two kinds of corpora. In the
first instance, we used a portion of the SemCor collection—presented in (Landes, Leacock,
& Tengi, 1998)—which contains a set of eleven documents (23,788 words) in which all
content words are annotated with the most appropriate WordNet sense. The SemCor corpus
contains texts about different topics (law, sports, religion, nature, etc.) and was written
by different authors. In the second instance, the method was tested on a portion of the
MTI13 corpus, which contains seven documents (101,843 words). The MTI corpus contains
computer science manuals on different topics (commercial applications, word processing
applications, device instructions, etc.). Both English corpora are automatically tagged by
different taggers.
We randomly selected a subset of the SemCor corpus (three documents—6,473 words)
and another subset of the MTI corpus (two documents—24,264 words) as training corpus.
The remaining fragments of the corpora were reserved for test data.
In the two tasks, the training phase was used to identify the importance of each kind of
knowledge to obtain the optimal order of the preferences.
4.2.2 Evaluation of Anaphora Resolution in Spanish
An evaluation of the algorithm for anaphora resolution in Spanish has been given in detail
in the work of Palomar et al. (2001). In this paper, we present the obtained results of the
evaluation of this task in AGIR over a different portion of the LEXESP corpus. Furthermore,
non-anaphoric complement pronouns, that is, complement pronouns that appear next to
the previous indirect object when it has been moved from its theoretical place after the
verb (A Pedroi lei vi ayer —I saw Pedro yesterday), were not resolved because this kind of
pronoun does not appear in the English translation. For these reasons, the results of the
two works are slightly different.
After the training phase, the algorithm was evaluated over the test corpus. In this
evaluation, only lexical, morphological, and syntactic information was used. Table 5 shows
the results of this evaluation.

LEXESP

Comp

P(%)

Ref

P(%)

98

82.6

105

92.4

PP
notPP
71

P(%)
70.4

PP
inPP
46

P(%)

Total

76.1

320

P(%)
Total
82.2

Table 5: Anaphora resolution in Spanish, evaluation phase
12. As previously mentioned, only anaphoric, third-person, personal pronouns will be resolved in order to
translate them into the target language.
13. This corpus was provided by the Computational Linguistics Research Group of the School of Humanities,
Languages and Social Studies, University of Wolverhampton, England. The corpus is anaphorically
annotated indicating the anaphors and their correct antecedents.

132

Translation of Pronominal Anaphora between English and Spanish

In Table 5 the occurrences of personal pronouns in the LEXESP corpus are shown. The
different types are: Comp (complement personal pronouns), Ref (reflexive pronouns), PPnotPP (personal pronouns not included in a prepositional phrase), and PPinPP (personal
pronouns included in a prepositional phrase). For each type, the obtained precision, P (the
number of pronouns correctly solved divided by the number of solved pronouns), is shown.
The last two columns represent the total number of personal pronouns and the obtained
precision.
Discussion. In pronominal anaphora resolution in Spanish, we obtained a precision of
82.2% (263 out of 320). The recall, R (number of pronouns correctly solved divided by the
number of real pronouns), obtained was of 79% (263 out of 333).
After analyzing the results, the following conclusions were extracted:
• In the resolution of reflexive pronouns, a high precision (92.4%) was obtained. This
higher percentage is because the antecedent of these pronouns is usually the closest NP
to the pronoun and it is in the same sentence. Therefore, after applying preferences,
few errors are produced.
• Analyzing the errors in the remaining pronouns, it is important to mention the complexity of the LEXESP corpus itself. It consists of several narrative documents, sometimes with a very complex style, with long sentences (with an average of 24.6 words
per sentence). This implies a large number of candidates per anaphor after applying
constraints (an average of 16.6).
• Errors were originated by different causes:
– exceptions in the application of preferences (66.7% of the global mistakes)
– a lack of semantic information (29.8%)
– mistakes in the POS tagging (3.5%)
We compared our proposal with the approaches previously presented in the evaluation
of zero-pronoun resolution. As shown in Table 6, the precision obtained using AGIR is
better than those for the other proposals.

LEXESP

Proximity
52.5

Hobbs
65.3

Lappin
73.3

Strube
68.3

AGIR
82.2

Table 6: Anaphora resolution in Spanish, comparison of AGIR with other approaches

4.2.3 Evaluation of Anaphora Resolution in English
The algorithm for anaphora resolution in English is based on the one developed for Spanish,
and it has been conveniently adapted for English. The main difference between the two
algorithms consists in a different order of the preferences obtained after the training phase.
After this phase, we extracted the following conclusions:
133

Peral & Ferrández

• Spanish has more morphological information than English. As a consequence, morphological constraints in Spanish discard more candidates than constraints in English.
• Spanish is a nearly free-order language, in which the different constituents of a sentence
(subject, object, etc.) can appear almost at any position. For this reason, the preference of syntactic parallelism has a more important role in the anaphora-resolution
method in English than in Spanish.
• Spanish sentences are usually longer than English ones. This fact implies more candidates for Spanish anaphors than for English ones.
After the training phase, the algorithm was evaluated over the test corpus. In the
evaluation phase, two experiments were carried out. In the first experiment, only lexical,
morphological, and syntactic information was used. The obtained results with the SemCor
and MTI corpora appear in Table 7.
SEMCOR
MTI

He
116
1

She
10
0

It
38
347

They
50
56

Him
34
0

Her
0
0

Them
6
66

Corr
175
361

Total
254
470

P(%)
68.9
76.8

Table 7: Anaphora resolution in English, evaluation phase: experiment 1
The table shows the number of pronouns (classified by type) for the different corpora.
The last three columns represent the number of correctly solved pronouns, the total number
of pronouns, and the obtained precision, respectively. For instance, in the MTI corpus a
precision of 76.8% was obtained.
Discussion. In pronominal anaphora resolution in English, the following results were
obtained in the first experiment: SemCor corpus, P = 68.9%, R = 66%; MTI corpus, P =
76.8%, R = 72.9%.
From these results, we have extracted the following conclusions:
• The types of pronouns vary considerably according to the corpus. In the SemCor
corpus, 15% of the pronouns are occurrences of the it pronoun, whereas in the MTI
corpus this percentage is 73.8%. This fact is explained by the kind and domain of
each corpus. The SemCor is a corpus with a narrative style which contains a lot of
person entities14 that are referred to in the text with the use of personal pronouns
(he, she, and they). On the other hand, the MTI corpus is a collection of technical
manuals that contains almost no person entities. Rather, most references are to object
entities, using it pronouns.
• In the SemCor corpus, errors originated from different causes:
– The lack of semantic information caused 57% of the global mistakes. There were
seventeen mistakes in the resolution of it pronouns, in which the system proposed
14. If we use a basic ontology based on semantic features, at the top level, entities could be classified into
three main categories: person, animal, and object.

134

Translation of Pronominal Anaphora between English and Spanish

a person entity as solutions for these pronouns. On the other hand, twenty-eight
occurrences of the pronouns he, she, him, and her were incorrectly solved due to
the system proposing an object or animal entity as the solution.
– There were exceptions in the applications of preferences (38%), mainly due to
the existence of a large number of candidates compatible with the anaphor15 .
– There were mistakes in the POS tagging (5%).
• In the MTI corpus, errors were mainly produced in the resolution of it pronouns
(73.4% of the global mistakes). The it pronoun lacks gender information (it is valid for
masculine and feminine) and subsequently there are a lot of candidates per anaphor16 .
This fact originates errors in the application of preferences. The remaining errors are
originated by the lack of semantic information.
After analyzing the results, it was observed that the precision of the SemCor corpus was
approximately 8% lower than that for the MTI corpus. The errors in the SemCor corpus
mainly originated with the lack of semantic information. Therefore, in order to improve
the obtained results, a second experiment was carried out with the addition of semantic
information.
The modifications to the second experiment were the following:
• Two new semantic constraints—presented in (Saiz-Noeda, Peral, & Suárez, 2000)—
were added to the morphological and syntactic constraints:
1. The pronouns he, she, him, and her must have as the antecedents person entities.
2. The pronoun it must have as its antecedent a non-person entity.
To apply these new constraints, the twenty-five top concepts of WordNet (the concepts
at the top level in the ontology) were grouped into three categories: person, animal,
and object. Subsequently, WordNet was consulted with the head of each candidate,
and thus the semantic category of the antecedent was obtained.
• This experiment was exclusively carried out with the SemCor corpus because it is the
only one in which content words are annotated with their WordNet sense.
Table 8 shows the number of pronouns (classified by type) for the different corpora after
these changes were incorporated.
As shown in Table 8, the addition of the two simple semantic constraints resulted in
considerable improvement in the obtained precision (approximately 18%) for the SemCor
corpus. We concluded that the use of semantic information (such as new constraints and
preferences) in the process of anaphora resolution will improve the results obtained.
15. The sentences of the SemCor corpus are very long (with an average of 24.3 words per sentence). This
fact implies a large number of candidates per anaphor (an average of 15.2) after applying constraints.
16. The sentences of the MTI corpus are not very long (with an average of 15.5 words per sentence). However,
the candidates per anaphor, after applying constraints, are high (an average of 13.6).

135

Peral & Ferrández

SEMCOR
MTI

He
116
1

She
10
0

It
38
347

They
50
56

Him
34
0

Her
0
0

Them
6
66

Corr
220
361

Total
254
470

P(%)
86.6
76.8

Table 8: Anaphora resolution in English, evaluation phase: experiment 2
Finally, Table 9 compares anaphora resolution using AGIR with the other approaches
previously presented17 . It is important to emphasize the high percentages obtained using
our system and Hobbs’s method in the SemCor corpus; both systems incorporate semantic information18 into their methods using semantic constraints (selectional restrictions),
whereas none of the other authors incorporate semantics in their approaches.
SEMCOR
MTI

Proximity
37.0
54.9

Hobbs
81.9
66.0

Lappin
59.4
75.1

Strube
59.4
63.2

AGIR
86.6
76.8

Table 9: Anaphora resolution in English, comparison of AGIR with other approaches

5. AGIR’s Generation Module
The interlingua representation of the source text is taken as input for the generation module.
The output of this module is the target text, that is, the representation of the source text’s
meaning with words of the target language.
The generation phase is split into two modules: syntactic generation and morphological
generation. Although the approach presented here is multilingual, we have focused on the
generation into the Spanish and English languages.
5.1 Syntactic Generation
In syntactic generation, the interlingua representation is converted by transformational rules
into an ordered surface-structure tree, with appropriate labeling of the leaves with target
language grammatical functions and features. The basic task of syntactic generation is to
order constituents in the correct sequence for the target language. However, the aim of
this work is only the translation of pronominal anaphora into the target language, so we
have only focused on the discrepancies between the Spanish and English languages in the
translation of the pronoun.
In syntactic generation, Spanish elliptical zero-subject constructions were studied. This
phenomenon was conveniently treated and solved in the analysis module. Therefore, all the
17. As mentioned earlier, all the results presented here were automatically obtained after the anaphoric
annotation of each pronoun. After the tagging and the partial parsing of the source text, pronominal
anaphora were resolved and translated into the target language. None of the intermediate outputs needed
to be adjusted manually in order to be processed subsequently.
18. Hobbs proposed the use of semantic information using selectional restrictions as a straightforward extension of his method in order to improve the obtained results in anaphora resolution.

136

Translation of Pronominal Anaphora between English and Spanish

necessary information to translate these constructions has been stored in the interlingua
representation.
5.2 Morphological Generation
The final stage of the generation module is morphological generation, in which we mainly
have to treat and solve number and gender discrepancies in the translation of pronouns.
5.2.1 Number Discrepancies
This problem is generated by the discrepancy between words of different languages that
express the same concept. These words can be referred to a singular pronoun in the source
language and to a plural pronoun in the target language. In order to take into account
number discrepancies in the translation of the pronoun into English or Spanish, a set of
morphological (number) rules is constructed. The lefthand side of the number rule contains
the interlingua representation of the pronoun, whereas the righthand side contains the
pronoun in the target language.
5.2.2 Gender Discrepancies
Gender discrepancies come from existing morphological differences between different languages. For instance, English has less morphological information than Spanish. The English
plural personal pronoun they can be translated into the Spanish pronouns ellos (masculine)
or ellas (feminine); the singular personal pronoun it can be translated into él/éste (masculine) or ella/ésta (feminine), etc. In order to take into account such gender discrepancies
in the translation of the pronoun into English or Spanish, a set of morphological (gender)
rules was constructed.

6. Evaluation of the Generation Module
In this step, we tested the AGIR’s generation module by evaluating the translation of
English pronouns into Spanish, and the translation of Spanish pronouns into English.
As mentioned earlier, the generation module takes the interlingua representation as
input. Previously, Spanish zero pronouns were detected (90.4% P) and resolved (81.4%
P), and anaphoric third-person personal pronouns were resolved in Spanish (82.2% P)
and English (86.6% P in the SemCor corpus with semantic information, and 76.8% P in
the MTI corpus without semantic information). Non-referential uses of it pronouns were
automatically detected, obtaining an 88.7% P on unrestricted texts19 .
19. In order to detect pleonastic it pronouns in AGIR, a set of rules, based on pattern recognition, that
allow for the identification of this type of pronoun is constructed. These rules were based on the work of
(Lappin & Leass, 1994; Paice & Husk, 1987; Denber, 1998), which dealt with this problem in a similar
way. We have used the information provided by the POS tagger in order to improve the detection of the
different patterns. We have evaluated the method using journalistic texts for a portion of the Federal
Register corpus that contains a set of 313 documents (156,831 words). In the detection of pleonastic it
pronouns a 88.7% P (568 out of 640) was obtained. Finally, it is very important to point out the high
percentage of it pronouns in the test corpus that are pleonastic (32.9%). This fact demonstrates the
importance of the correct detection of this kind of pronoun in any MT system.

137

Peral & Ferrández

Once the interlingua representation was obtained, the method proposed for pronominal
anaphora translation into the target language was based on the treatment of number and
gender discrepancies.
6.1 Pronominal Anaphora Translation into Spanish
In this experiment, the translation of English, third-person, personal pronouns into Spanish
was evaluated.
We tested the method on the portions of the SemCor and MTI corpora used previously
in the process of anaphora resolution. The training corpus was used for improving the
number and gender rules. The remaining fragments of the corpora were reserved for test
data.
We needed to know the semantic category (person, animal, or object) and the grammatical gender (masculine or feminine) of the pronoun’s antecedent in order to apply the
number and gender rules. In the SemCor corpus, the WordNet sense was used to identify the antecedent’s semantic category. In the MTI corpus, due to the lack of semantic
information, a set of heuristics was used to determine the antecedent’s semantic category.
With regard to information about the antecedent’s gender, an English–Spanish electronic dictionary was used since the POS tag does not usually provide gender and number
information. The dictionary was incorporated into the system as a database. For each
English word, the dictionary provides a translation into Spanish, and the word’s gender
and number in Spanish.
The number and gender rules were applied using this morphological and semantic information. We conducted a blind test over the entire test corpus, and the obtained results
appear in Table 10.

SEMCOR
MTI
TOTAL

Subject
197
239
436

Compl
47
231
288

Correct
229
353
582

Total
254
470
724

P(%)
90.2
75.1
80.4

Table 10: Translation of pronominal anaphora into Spanish, evaluation phase

The evaluation of this task was automatically carried out after the anaphoric annotation of each pronoun. This annotation included information about the antecedent and the
translation into the target language of the anaphor. To do so, the human annotators translated the anaphors according to the criteria established by the morphological rules. For
example, the pronoun it with subject function was translated into the Spanish pronoun él
if its antecedent was of the animal type and masculine; on the other hand, if its antecedent
was of the object type and masculine, it was translated into the Spanish pronoun éste;
and so on. In the Spanish–English translation, the pronoun él with subject function was
translated into the English pronoun he if its antecedent was a person type and masculine;
138

Translation of Pronominal Anaphora between English and Spanish

on the other hand, if its antecedent was an object/animal type and masculine/feminine, it
was translated into the English pronoun it; and so on20 .
Table 10 shows the anaphoric pronouns of each corpus classified by grammatical function: subject and complement (direct or indirect object). The last three columns represent
the number of pronouns successfully solved, the total number of solved pronouns, and the
obtained precision, respectively. For instance, the SemCor corpus contains 197 pronouns
with subject function and 47 complement pronouns. The precision obtained in this corpus
was of 90.2% (229 out of 254).
Discussion. In the translation of English personal pronouns in the third person into
Spanish, an overall precision of 80.4% (582 out of 724) was obtained. Specifically, 90.2% P
and 75.1% P were obtained in the SemCor and MTI corpora, respectively.
From these results, we have extracted the following conclusions:
• In the SemCor corpus, all of the instances of the English pronouns he, she, him, and
her were correctly translated into Spanish. There are two reasons for this:
– The semantic roles of these pronouns were correctly identified in all of the cases.
– These pronouns contain the necessary grammatical information (gender and
number) that allows the correct translation into Spanish, independent of the
antecedent proposed as a solution by the AGIR system.
The errors in the translation of the pronouns it, they, and them were originated by
the following different causes:
– There were mistakes in the anaphora-resolution stage, that is, the antecedent
proposed by the system was not the correct one (44.4% of the global mistakes).
This caused an incorrect translation into Spanish mainly due to the fact that the
proposed antecedent and the correct one had different grammatical genders.
– There were mistakes in the identification of the semantic role of the pronouns
that caused the application of an incorrect morphological rule (44.4%). These
mistakes mainly originated in an incorrect process of clause splitting.
– There were mistakes originated by the English–Spanish electronic dictionary
(11.2%). Two circumstances could occur: (a) the word did not appear in the
dictionary; and (b) the word’s gender in the dictionary was different from the
real word’s gender, since the word had different meanings.
• In the MTI corpus, nearly all the pronouns were it, they, and them (96.2% of the total
pronouns). The errors in the translation of these pronouns originated in the same
causes as those in the SemCor corpus, although the percentages were different:
– There were mistakes in the anaphora-resolution stage (22.9% of the mistakes).
– There were mistakes in the identification of the pronouns’ semantic role (62.9%).
20. In the automatic evaluation, a pronoun was considered as correctly translated when the pronoun proposed
by the system was the same as that proposed by the human annotator. With this criterion, we evaluated
the correct application of the corresponding morphological rule.

139

Peral & Ferrández

– There were mistakes that originated in the English–Spanish dictionary (14.2%).
In this corpus, there were a large number of technical words that did not appear
in the electronic dictionary.
• After analyzing the results, we observed that the precision of the SemCor corpus
was approximately 15% higher than that obtained by the MTI corpus. The lower
percentage obtained by the MTI corpus were the result of the corpus itself (most
of the pronouns in this corpus are it, they, and them), and of the lack of semantic
information.
In order to measure the efficiency of our proposal, we compared our system with one of
the most representative MT systems of the moment: Systran. Systran was designed and
built more than thirty years ago, and it is being continually modified in order to improve
its translation quality. Moreover, it is easily accessible to Internet users through the service
of MT on the web—BABELFISH21 —which provides free translations between different
languages. With regard to the problem of pronominal anaphora resolution and translation,
Systran is one of the best MT systems studied (see Section 2) because, like our own system,
it treats the problems of intersentential pronominal anaphora and Spanish zero pronouns on
unrestricted texts after carrying out a partial parsing of the source text. As was mentioned
in Section 2, a free trial of the commercial product SYSTRANLinks22 was used to translate
between the English and Spanish languages the evaluation corpora. The results appear in
Table 11.
SEMCOR
MTI

SYSTRANLinks
75.4
58.1

AGIR
82.5
69.3

Table 11: Translation of pronominal anaphora (complement pronouns only) into Spanish,
SYSTRANLinks and AGIR
The evaluation of the SYSTRANLinks output was carried out by a human translator by
hand. Pronouns judged as acceptable by the translator were considered correctly translated;
otherwise, they were considered incorrectly translated.
Table 11 only shows the evaluation of English complement pronoun translation into
Spanish because Systran did not translate all the subject pronouns into Spanish. By analyzing the Systran outputs of both corpora, we extracted the following conclusions:
• All the instances of the English pronouns he and she (always with subject function)
were correctly translated into their Spanish equivalents él and ella.
• All the instances of the English pronouns it and they with subject function were
omitted in Spanish—zero pronouns. These pronouns were not resolved in English,
and subsequently were not translated into Spanish.
21. URL = http://www.babelfish.altavista.com (visited on 03/11/2002).
22. URL = http://w4.systranlinks.com/config (visited on 06/22/2002).

140

Translation of Pronominal Anaphora between English and Spanish

On the other hand, in our AGIR system, we have evaluated the correct application of
the morphological rule to translate all source pronouns into target pronouns. A subsequent
task must decide if the pronoun in the target language (a) must be generated as our system
proposes, (b) must be substituted by another kind of pronoun (e.g., a possessive pronoun),
or (c) must be eliminated (i.e., Spanish zero pronouns). Therefore, we have only taken into
account the complement pronoun translation in order to make a fair comparison between
the two systems.
As shown in Table 11, the precision obtained using AGIR is approximately 7–11% higher
(depending on the corpus) than the one obtained using Systran. The errors in Systran originated in mistakes in the anaphora-resolution stage that caused incorrect translations, since
the proposed antecedents and the correct ones have different grammatical gender. These
errors can occur in intrasentential anaphors (as presented in Section 2) or in intersentential
anaphors, as in the following example extracted from the corpora:
• (E) [This information]i is only valid for Linux on the Intel platform. Much of iti
should be applicable to Linux on other processor architectures, but I have no first
hand experience or information.
• (S) Esta información es solamente válida para Linux en la plataforma de Intel. Mucho
de él debe ser aplicable a Linux en otras configuraciones del procesador, pero no tengo
ninguna experiencia o información de primera mano.
This example shows an incorrect English–Spanish translation of the pronoun it done by
Systran. In this case, the antecedent (this information, feminine) is in the previous sentence
to the anaphor. It is incorrectly solved, and then it is incorrectly translated (the pronoun
él —masculine—instead of the pronoun ésta—feminine).
6.2 Pronominal Anaphora Translation into English
In this experiment, the translation of Spanish, third-person, personal pronouns and zero
pronouns (excluding reflexive pronouns) into English was evaluated. We tested the method
on the portion of the LEXESP corpus that was previously used in the process of anaphora
resolution.
We needed to know the semantic category and the grammatical gender of the pronoun’s
antecedent in order to apply the number and gender rules. In the LEXESP corpus, due to
the lack of semantic information, a set of heuristics was used to determine the antecedent’s
semantic category. On the other hand, the information about the antecedent’s gender was
provided by the POS tag of the antecedent’s head. We conducted a blind test over the
entire test corpus, and the results appear in Table 12.

LEXESP

Subject
630

Compl
145

Correct
657

Total
775

P(%)
84.8

Table 12: Translation of pronominal anaphora into English, evaluation phase
141

Peral & Ferrández

Discussion. In the translation of Spanish personal pronouns in the third person into
English, an overall precision of 84.8% (657 out of 775) was obtained. From these results,
we extracted the following conclusions:
• All the instances of the Spanish plural pronouns (ellos, ellas, les, los, las, and the
zero pronouns in plural corresponding to the English pronouns they and them), were
correctly translated into English. There are two reasons for this:
– The semantic roles of these pronouns were correctly identified in all of the cases.
– The equivalent English pronouns (they and them) lack gender information, that
is, they are valid for masculine and feminine. Therefore, the antecedent’s gender
did not influence the translation of these pronouns.
• The errors occurred in the translation of the Spanish singular pronouns (él, ella, le,
lo, la, and in zero pronouns in singular corresponding to the English pronouns he, she,
it, him, and her ). There were different causes for these errors:
– There were mistakes in the anaphora-resolution stage (79.7% of the global mistakes), which caused an incorrect translation into Spanish, mainly due to the
proposed antecedent and the correct one having different grammatical gender.
Sometimes both had the same gender, but they had different semantic categories.
– There were mistakes in the application of the heuristic used to identify the antecedent’s semantic category (20.3%). This involved the application of an incorrect
morphological rule.
Our proposal was compared with the SYSTRANLinks output. As shown in Table 13, the
precision obtained by the AGIR system was approximately 28% higher than that obtained
by Systran.

LEXESP

SYSTRANLinks
56.9

AGIR
84.8

Table 13: Translation of pronominal anaphora into English, SYSTRANLinks and AGIR

The low results obtained in Systran are mainly the result of errors that occurred in the
translation of Spanish zero pronouns. Specifically, out of 775 Spanish pronouns, 334 errors
occurred, and 293 of them (87.7% of the global errors) originated in the translation of zero
pronouns, whereas the remainder (12.3%) originated in the translation of the remaining
not-omitted pronouns. The errors in the translation of zero pronouns mainly originated in
their incorrect resolution.

142

Translation of Pronominal Anaphora between English and Spanish

7. Conclusion
In this paper we have evaluated the different tasks carried out in our MT approach (for
Spanish and English languages) that allowed the correct pronominal anaphora translation
into the target language. We have shown the importance of the resolution of anaphoric
expressions in any MT system for correct translations into the target language, and how
the main MT systems do not conveniently resolve this phenomenon.
Our approach, called AGIR, works on unrestricted texts to which partial-parsing techniques have been applied. After parsing and solving NLP problems, an interlingua representation of the entire text is obtained. This fact is one of the main advantages of our system
since several problems (hardly solved by the majority of MT systems) can be treated and
solved. These problems are the translation of intersentential anaphora, the detection of
co-reference chains, and the translation of Spanish zero pronouns into English.
In the evaluation, we obtained a precision of 80.4% and 84.8% in the translation of
Spanish and English pronominal anaphora, respectively. Previously, Spanish zero pronouns
had been resolved (with a precision of 81.4%) and anaphoric personal pronouns had been
resolved in English (with precisions of 86.6% and 76.8% in the SemCor corpus with semantic
information and in the MTI corpus without it, respectively) and in Spanish (with a precision
of 82.2%).
In addition, we carried out an exhaustive comparison with some well-known anaphoraresolution algorithms. Finally, we also compared pronoun translation with one of the most
representative MT systems at the moment: Systran. In all of these comparisons, AGIR was
shown to perform better.
A very important conclusion was extracted during the evaluation phase: the adding of semantic information improves the precision of the anaphora-resolution process considerably,
and therefore the corresponding precision of the anaphora-translation process. Currently,
the addition of this kind of information in the different stages of the AGIR system is being
studied in order to improve the overall performance of the system.
The resolution and translation of new types of references, such as definite descriptions
or anaphora originated by demonstrative pronouns, will be studied in the future. Moreover,
the addition of new languages to the interlingua approach will be taken into account.

Acknowledgments
The authors wish to thank Manuel Palomar for his helpful revisions of this paper; Ferrán
Pla, Ruslan Mitkov, and Richard Evans for having contributed their corpora; and Rafael
Muñoz, Maximiliano Saiz-Noeda, Patricio Martı́nez-Barco, and Juan Carlos Trujillo for
their suggestions and willingness to help in any task related to this paper. We are also
grateful for the helpful comments of the anonymous reviewers of several conference papers
in which we presented our preliminary work.
This research has been supported by the Spanish Government, under projects TIC20000664-C02-02 and FIT-150500-2002-416.
143

Peral & Ferrández

References
Allegranza, V., Krauwer, S., & Steiner, E. (1991). Introduction. Machine Translation
(Eurotra Special Issue), 6 (2), 61–71.
Amores, J., & Quesada, J. (1997). Episteme. Procesamiento del Lenguaje Natural, 21, 1–15.
Appelo, L., & Landsbergen, J. (1986). The machine translation project Rosetta. In Gerhardt, T. (Ed.), I. International Conference on the State of the Art in Machine Translation in America, Asia and Europe: Proceedings of IAI-MT86, IAI/EUROTRA-D,
pp. 34–51 Saarbrücken (Germany).
Bennet, W., & Slocum, J. (1985). The LRC machine translation system. Computational
Linguistics, 11, 111–121.
Berger, A., et al. (1994). The Candide system for Machine Translation. In Proceedings of
the ARPA Workshop on Speech and Natural Language, pp. 157–163 Morgan Kaufman
Publishers.
Boitet, C. (1989). Geta project. In Nagao, M. (Ed.), Machine Translation Summit, pp.
54–65. Ohmsha, Tokyo.
Boitet, C., & Nédobejkine, N. (1981). Recent developments in Russian-French machine
translation at Grenoble. Linguistics, 19, 199–271.
Canals-Marote, R., et al. (2001a). El sistema de traducción automática castellano-catalán
interNOSTRUM. Procesamiento del Lenguaje Natural, 27, 151–156.
Canals-Marote, R., et al. (2001b). The Spanish-Catalan machine translation system interNOSTRUM. In Proceedings of Machine Translation Summit VIII, pp. 73–76 Santiago
de Compostela (Spain).
Carletta, J., et al. (1997). The Reliability of a Dialogue Structure Coding Scheme. Computational Linguistics, 23 (1), 13–32.
Chandioux, J. (1976). MÉTÉO: un système opérationnel pour la traduction automatique
des bulletins météreologiques destinés au grand public. META, 21, 127–133.
Chandioux, J. (1989). Météo: 100 million words later. In Hammond, D. (Ed.), American Translators Association Conference 1989: Coming of Age, pp. 449–453. Learned
Information, Medford, NJ.
Dı́az-Ilarraza, A., Mayor, A., & Sarasola, K. (2000). Reusability of wide-coverage linguistic
resources in the construction of a multilingual machine translation system. In Proceedings of the Machine Translation and multilingual applications in the new millennium
(MT’2000), pp. 12.1–12.9 Exeter (UK).
Dı́az-Ilarraza, A., Mayor, A., & Sarasola, K. (2001). Inclusión del par castellano-euskara
en un prototipo de traducción automática multilingüe. In Proceedings of the Second
International Workshop on Spanish Language Processing and Language Technologies
(SLPLT-2), pp. 107–111 Jaén (Spain).
144

Translation of Pronominal Anaphora between English and Spanish

Denber, M. (1998). Automatic Resolution of Anaphora in English. Eastman Kodak Co.,
Imaging Science Division.
Farwell, D., & Helmreich, S. (2000). An interlingual-based approach to reference resolution. In Proceedings of the Third AMTA/SIG-IL Workshop on Applied Interlinguas:
Practical Applications of Interlingual Approaches to NLP (ANLP/NAACL’2000), pp.
1–11 Seattle, Washington (USA).
Ferrández, A., Palomar, M., & Moreno, L. (1999). An empirical approach to Spanish
anaphora resolution. Machine Translation, 14 (3/4), 191–216.
Ferrández, A., & Peral, J. (2000). A computational approach to zero-pronouns in Spanish. In Proceedings of the 38th Annual Meeting of the Association for Computational
Linguistics (ACL’2000), pp. 166–172 Hong Kong (China).
Geldbach, S. (1999). Anaphora and Translation Discrepancies in Russian-German MT.
Machine Translation, 14 (3/4), 217–230.
Goodman, K. (1989). Special Issues on Knowledge-Based Machine Translation, Parts I and
II. Machine Translation, 4 (1/2).
Halliday, M., & Hasan, R. (1976). Cohesion in English. Longman English Language Series
9. Longman, London.
Hirst, G. (1981). Anaphora in Natural Language Understanding. Springer-Verlag, Berlin.
Hobbs, J. (1978). Resolving pronoun references. Lingua, 44, 311–338.
Hutchins, W., & Somers, H. (1992). An Introduction to Machine Translation. Academic
Press Limited, London.
Landes, S., Leacock, C., & Tengi, R. (1998). Building semantic concordances. In Fellbaum, C. (Ed.), WordNet: An Electronic Lexical Database, pp. 199–216. MIT Press,
Cambridge, Mass.
Landsbergen, J. (1987). Montague grammar and machine translation. In Whitelock, P.,
Wood, M., Somers, H., Johnson, R., & Bennet, P. (Eds.), Linguistic theory and computer applications, pp. 113–147. Academic Press, London.
Lappin, S., & Leass, H. (1994). An algorithm for pronominal anaphora resolution. Computational Linguistics, 20 (4), 535–561.
Maas, H. (1977). The Saarbrücken automatic translation system (SUSY). In Proceedings
of the Third European Congress on Information Systems and Networks, Overcoming
the language barrier, pp. 585–592 München (Germany).
Maas, H. (1987). The MT system SUSY. In King, M. (Ed.), Machine translation today: the
state of the art, Edinburgh Information Technology Series 2, pp. 209–246. Edinburgh
University Press.
145

Peral & Ferrández

Mahesh, K., & Nirenburg, S. (1995a). A situated ontology for practical NLP. In Proceedings
of Workshop on basic ontological issues in knowledge sharing (IJCAI’95) Montreal
(Canada).
Mahesh, K., & Nirenburg, S. (1995b). Semantic classification for practical Natural Language Processing. In Proceedings of the Sixth ASIS SIG/CR Classification Research
Workshop: An interdisciplinary meeting, pp. 79–94 Chicago, Illinois (USA).
Miller, G., Beckwith, R., Fellbaum, C., Gross, D., & Miller, K. (1990). WordNet: An on-line
lexical database. International journal of lexicography, 3 (4), 235–244.
Mitamura, T., Nyberg, E., & Carbonell, J. (1991). An efficient interlingua translation
system for multi-lingual document production. In Proceedings of Machine Translation
Summit III Washington, DC (USA).
Mitkov, R., Kim, H., Lee, H., & Choi, K. (1994). Lexical transfer and resolution of pronominal anaphors in Machine Translation: the English-to-Korean case. Procesamiento del
Lenguaje Natural, 15, 23–37 (Grupo 2. Traducción Automática e Interfaces).
Mitkov, R., & Schmidt, P. (1998). On the complexity of pronominal anaphora resolution
in machine translation. In Martı́n-Vide, C. (Ed.), Mathematical and computational
analysis of natural language. John Benjamins Publishers, Amsterdam.
Montoyo, A., & Palomar, M. (2000). WSD algorithm applied to a NLP system. In
Bouzeghoub, M., Kedad, Z., & Métais, E. (Eds.), Natural Language Processing and
Information Systems, Vol. 1959 of Lecture Notes in Computer Science, pp. 54–65
Versailles (France). Springer-Verlag.
Mun̄oz, R., Palomar, M., & Ferrández, A. (2000). Processing of Spanish Definite Descriptions. In Cairo, O., Sucar, L., & Cantu, F. (Eds.), MICAI 2000: Advances in Artificial
Intelligence, Vol. 1793 of Lecture Notes in Artificial Intelligence, pp. 526–537 Acapulco
(Mexico). Springer-Verlag.
Nakaiwa, H., & Ikehara, S. (1992). Zero pronoun resolution in a Japanese-to-English Machine Translation system by using verbal semantic attributes. In Proceedings of the
Third Conference on Applied Natural Language Processing (ANLP’92), pp. 201–208
Trento (Italy).
Nirenburg, S. (1989). Knowledge-based machine translation. Machine Translation, 4, 5–24.
Okumura, M., & Tamura, K. (1996). Zero pronoun resolution in Japanese discourse based
on centering theory. In Proceedings of the 16th International Conference on Computational Linguistics (COLING’96), pp. 871–876 Copenhagen (Denmark).
Paice, C., & Husk, G. (1987). Towards the automatic recognition of anaphoric features
in English text: the impersonal pronoun “it”. Computer Speech and Language, 2,
109–132.
Palomar, M., & Martı́nez-Barco, P. (2001). Computational approach to anaphora resolution
in Spanish dialogues. Journal of Artificial Intelligence Research, 15, 263–287.
146

Translation of Pronominal Anaphora between English and Spanish

Palomar, M., et al. (2001). An algorithm for anaphora resolution in Spanish texts. Computational Linguistics, 27 (4), 545–567.
Peral, J., & Ferrández, A. (2000a). An application of the Interlingua System ISS for SpanishEnglish pronominal anaphora generation. In Proceedings of the Third AMTA/SIG-IL
Workshop on Applied Interlinguas: Practical Applications of Interlingual Approaches
to NLP (ANLP/NAACL’2000), pp. 42–51 Seattle, Washington (USA).
Peral, J., & Ferrández, A. (2000b). Generation of Spanish zero-pronouns into English. In
Christodoulakis, D. (Ed.), Natural Language Processing - NLP 2000, Vol. 1835 of
Lecture Notes in Artificial Intelligence, pp. 252–260 Patras (Greece). Springer-Verlag.
Peral, J., Palomar, M., & Ferrández, A. (1999). Coreference-oriented Interlingual Slot
Structure and Machine Translation. In Proceedings of the ACL Workshop Coreference
and its Applications, pp. 69–76 College Park, Maryland (USA).
Quesada, J., & Amores, J. (2000). Diseño e implementación de sistemas de Traducción
Automática. Universidad de Sevilla. Secretariado de publicaciones, Sevilla.
Sadler, V. (1989). Working with analogical semantics: disambiguation techniques in DLT.
Distributed Language Translation 5. Foris, Dordrecht.
Saiz-Noeda, M., Peral, J., & Suárez, A. (2000). Semantic compatibility techniques for
anaphora resolution. In Proceedings of ACIDCA’2000, pp. 43–48 Monastir (Tunisia).
Schubert, K. (1986). Linguistic and extra-linguistic knowledge. Computers and Translation,
1, 125–152.
Strube, M., & Hahn, U. (1999). Functional Centering - Grounding Referential Coherence
in Information Structure. Computational Linguistics, 25 (5), 309–344.
Thurmair, G. (1990). Complex lexical transfer in METAL. In Proceedings of TMI’90, pp.
91–107 Austin, Texas (USA).
Toma, P. (1977). Systran as a multilingual machine translation system. In Proceedings of
the Third European Congress on Information Systems and Networks, Overcoming the
language barrier, pp. 569–581 München (Germany).
Varile, G., & Lau, P. (1988). Eurotra: practical experience with a multilingual machine
translation system under development. In Proceedings of the Second Conference on
Applied Natural Language Processing (ANLP’88), pp. 160–167 Austin, Texas (USA).
Vossen, P. (1998). EuroWordNet: Building a Multilingual Database with WordNets for
European Languages. The ELRA Newsletter, 3 (1), 7–12.
Wheeler, P. (1987). Systran. In King, M. (Ed.), Machine translation today: the state of the
art, Edinburgh Information Technology Series 2, pp. 192–208. Edinburgh University
Press.
Witkam, A. (1983). Distributed language translation: feasibility study of multilingual facility
for videotex information networks. BSO, Utrecht.

147

Journal of Articial Intelligence Research 18 (2003) 45-81

Submitted 08/02; published 01/03

Monte Carlo Methods for Tempo Tracking
and Rhythm Quantization
Ali Taylan Cemgil
Bert Kappen

SNN, Geert Grooteplein 21 cpk1 - 231, University of Nijmegen
NL 6525 EZ Nijmegen, The Netherlands

cemgil@snn.kun.nl
bert@snn.kun.nl

Abstract

We present a probabilistic generative model for timing deviations in expressive music performance. The structure of the proposed model is equivalent to a switching state
space model. The switch variables correspond to discrete note locations as in a musical
score. The continuous hidden variables denote the tempo. We formulate two well known
music recognition problems, namely tempo tracking and automatic transcription (rhythm
quantization) as ltering and maximum a posteriori (MAP) state estimation tasks. Exact computation of posterior features such as the MAP state is intractable in this model
class, so we introduce Monte Carlo methods for integration and optimization. We compare
Markov Chain Monte Carlo (MCMC) methods (such as Gibbs sampling, simulated annealing and iterative improvement) and sequential Monte Carlo methods (particle lters). Our
simulation results suggest better results with sequential methods. The methods can be
applied in both online and batch scenarios such as tempo tracking and transcription and
are thus potentially useful in a number of music applications such as adaptive automatic
accompaniment, score typesetting and music information retrieval.
1. Introduction
Automatic music transcription refers to extraction of a human readable and interpretable
description from a recording of a musical performance. Traditional music notation is such
a description that lists the pitch levels (notes) and corresponding timestamps.
Ideally, one would like to recover a score directly from the audio signal. Such a representation of the surface structure of music would be very useful in music information retrieval
(Music-IR) and content description of musical material in large audio databases. However,
when operating on sampled audio data from polyphonic acoustical signals, extraction of a
score-like description is a very challenging auditory scene analysis task (Vercoe, Gardner,
& Scheirer, 1998).
In this paper, we focus on a subproblem in music-ir, where we assume that exact timing
information of notes is available, for example as a stream of MIDI1 events from a digital
keyboard.
A model for tempo tracking and transcription from a MIDI-like music representation
is useful in a broad spectrum of applications. One example is automatic score typesetting,
1. Musical Instruments Digital Interface. A standard communication protocol especially designed for digital
instruments such as keyboards. Each time a key is pressed, a MIDI keyboard generates a short message
containing pitch and key velocity. A computer can tag each received message by a timestamp for real-time
processing and/or recording into a le.

c 2003 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Cemgil & Kappen
the musical analog of word processing. Almost all score typesetting applications provide a
means of automatic generation of a conventional music notation from MIDI data.
In conventional music notation, the onset time of each note is implicitly represented by
the cumulative sum of durations of previous notes. Durations are encoded by simple rational
numbers (e.g., quarter note, eighth note), consequently all events in music are placed on
a discrete grid. So the basic task in MIDI transcription is to associate onset times with
discrete grid locations, i.e., quantization.
However, unless the music is performed with mechanical precision, identication of the
correct association becomes diÆcult. This is due to the fact that musicians introduce
intentional (and unintentional) deviations from a mechanical prescription. For example
timing of events can be deliberately delayed or pushed. Moreover, the tempo can uctuate
by slowing down or accelerating. In fact, such deviations are natural aspects of expressive
performance; in the absence of these, music tends to sound rather dull and mechanical.
On the other hand, if these deviations are not accounted for during transcription, resulting
scores have often very poor quality.
Robust and fast quantization and tempo tracking is also an important requirement for
interactive performance systems; applications that \listen" to a performer for generating an
accompaniment or improvisation in real time (Raphael, 2001b; Thom, 2000). At last, such
models are also useful in musicology for systematic study and characterization of expressive
timing by principled analysis of existing performance data.
From a theoretical perspective, simultaneous quantization and tempo tracking is a
\chicken-and-egg" problem: the quantization depends upon the intended tempo interpretation and the tempo interpretation depends upon the quantization. Apparently, human
listeners can resolve this ambiguity (in most cases) without any eort. Even persons without
any musical training are able to determine the beat and the tempo very rapidly. However,
it is still unclear what precisely constitutes tempo and how it relates to the perception of
the beat, rhythmical structure, pitch, style of music etc. Tempo is a perceptual construct
and cannot directly be measured in a performance.
The goal of understanding tempo perception has stimulated a signicant body of research on the psychological and computational modeling aspects of tempo tracking and
beat induction, e.g., see (Desain & Honing, 1994; Large & Jones, 1999; Toiviainen, 1999).
These papers assume that events are presented as an onset list. Attempts are also made
to deal directly with the audio signal (Goto & Muraoka, 1998; Scheirer, 1998; Dixon &
Cambouropoulos, 2000).
Another class of tempo tracking models are developed in the context of interactive
performance systems and score following. These models make use of prior knowledge in the
form of an annotated score (Dannenberg, 1984; Vercoe & Puckette, 1985). More recently,
Raphael (2001b) has demonstrated an interactive real-time system that follows a solo player
and schedules accompaniment events according to the player's tempo interpretation.
Tempo tracking is crucial for quantization, since one can not uniquely quantize onsets
without having an estimate of tempo and the beat. The converse, that quantization can
help in identication of the correct tempo interpretation has already been noted by Desain
and Honing (1991). Here, one denes correct tempo as the one that results in a simpler
quantization. However, such a schema has never been fully implemented in practice due
to computational complexity of obtaining a perceptually plausible quantization. Hence

46

Monte Carlo Methods for Tempo Tracking and Rhythm Quantization
quantization methods proposed in the literature either estimate the tempo using simple
heuristics (Longuet-Higgins, 1987; Pressing & Lawrence, 1993; Agon, Assayag, Fineberg,
& Rueda, 1994) or assume that the tempo is known or constant (Desain & Honing, 1991;
Cambouropoulos, 2000; Hamanaka, Goto, Asoh, & Otsu, 2001).
Our approach to transcription and tempo tracking is from a probabilistic, i.e., Bayesian
modeling perspective. In Cemgil et al. (2000), we introduced a probabilistic approach to
perceptually realistic quantization. This work also assumed that the tempo was known or
was estimated by an external procedure. For tempo tracking, we introduced a Kalman lter
model (Cemgil, Kappen, Desain, & Honing, 2001). In this approach, we modeled the tempo
as a smoothly varying hidden state variable of a stochastic dynamical system.
In the current paper, we integrate quantization and tempo tracking. Basically, our
model balances score complexity versus smoothness in tempo deviations. The correct tempo
interpretation results in a simple quantization and the correct quantization results in a
smooth tempo uctuation. An essentially similar model is proposed recently also by Raphael
(2001a). However, Raphael uses an inference technique that only applies for small models;
namely when the continuous hidden state is one dimensional. This severely restricts the
models one can consider. In the current paper, we survey general and widely used state-ofthe-art techniques for inference.
The outline of the paper is as follows: In Section 2, we propose a probabilistic model for
timing deviations in expressive music performance. Given the model, we will dene tempo
tracking and quantization as inference of posterior quantities. It will turn out that our model
is a switching state space model in which computation of exact probabilities becomes intractable. In Section 3, we will introduce approximation techniques based on simulation,
namely Markov Chain Monte Carlo (MCMC) and sequential Monte Carlo (SMC) (Doucet,
de Freitas, & Gordon, 2001; Andrieu, de Freitas, Doucet, & Jordan, 2002). Both approaches
provide exible and powerful inference methods that have been successfully applied in diverse elds of applied sciences such as robotics (Fox, Burgard, & Thrun, 1999), aircraft
tracking (Gordon, Salmond, & Smith, 1993), computer vision (Isard & Blake, 1996), econometrics (Tanizaki, 2001). Finally we will present simulation results and conclusions.

2. Model
Assume that a pianist is improvising and we are recording the exact onset times of each key
she presses during the performance. We denote these observed onset times by y0 ; y1 ; y2 : : :
yk : : : yK or more compactly by y0:K . We neither have access to a musical notation of the
piece nor know the initial tempo she has started her performance with. Moreover, the
pianist is allowed to freely change the tempo or introduce expression. Given only onset
time information y0:K , we wish to nd a score 1:K and track her tempo uctuations z0:K .
We will rene the meaning of  and z later.
This problem is apparently ill-posed. If the pianist is allowed to change the tempo
arbitrarily it is not possible to assign a \correct" score to a given performance. In other
words any performance y0:K can be represented by using a suitable combination of an
arbitrary score with an arbitrary tempo trajectory. Fortunately, the Bayes theorem provides
an elegant and principled guideline to formulate the problem. Given the onsets y0:K , the
best score 1:K and tempo trajectory z0:K can be derived from the posterior distribution

47

Cemgil & Kappen
that is given by
1
p(y j ; z )p( ; z )
p(y0:K ) 0:K 1:K 0:K 1:K 0:K
a quantity, that is proportional to the product of the likelihood term p(y0:K j1:K ; z0:K ) and
the prior term p(1:K ; z0:K ).
In rhythm transcription and tempo tracking, the prior encodes our background knowledge about the nature of musical scores and tempo deviations. For example, we can construct a prior that prefers \simple" scores and smooth tempo variations.
The likelihood term relates the tempo and the score to actual observed onset times. In
this respect, the likelihood is a model for short time expressive timing deviations and motor
errors that are introduced by the performer.

p(1:K ; z0:K jy0:K ) =

/ c1
/ c2
/ : : :F
/ ck
EE
FF
CC
F
EE
EE
CC
FF
EE
EE
CC
FF
EE
EE
CC
FF
CC
E" 
E" 
# 
!: : :

c0 EE

1

k 1

2

/ :::
/ 1
/ 2
BB
@@
BB
BB
@@
BB
BB
@@
BB
BB
@@
BB
B
@@
B! 
B! 
/ 1
/ 2
/ :::

0 B

0


y0



y1



y2

/ :::
CC Quantization
CC
HH
CC
HH
CC
HH
CC
H# 
!
/ ck

1 HH

k

Score

/ k
/ :Tempo
::
Trajectory
@@
EE
@
EE
@@
EE
@@
EE
@@
E" 
@
/ k
/ : :Noiseless
:
onsets

k 1E
/

/



k 1


:::

:::

Locations



yk 1

yk

: Observed
::
Onsets

Figure 1: Graphical Model. Square and oval nodes correspond to discrete and continuous
variables respectively. In the text, we sometimes refer to the continuous hidden
variables (k ; k ) by zk . The dependence between  and c is deterministic. All
c,  ,  and  are hidden; only onsets y are observed.

2.1 Score prior
To dene a score 1:K , we rst introduce a sequence of quantization locations c0:K . A
quantization location ck species the score time of the k'th onset. We let k denote the
interval between quantization locations of two consecutive onsets
k = ck

ck 1

(1)

For example consider the conventional music notation
which encodes the score 1:3 =
[1 0:5 0:5]. Corresponding quantization locations are c0:3 = [0 1 1:5 2].
One simple way of dening a prior distribution on quantization locations p(ck ) is specifying a table of probabilities for ck mod 1 (the fraction of ck ). For example if we wish to


48





Monte Carlo Methods for Tempo Tracking and Rhythm Quantization
allow for scores that have sixteenth notes and triplets, we dene a table of probabilities for
the states c mod 1 = f0; 0:25; 0:5; 0:75g[f0; 0:33; 0:67g. Technically, the resulting prior
p(ck ) is periodic and improper (since ck are in principle unbounded so we can not normalize
the distribution).
However, if the number of states of ck mod 1 is large, it may be diÆcult to estimate the
parameters of the prior reliably. For such situations we propose a \generic" prior as follows:
We dene the probability, that the k'th onset gets quantized at location ck , by p(ck ) /
exp( d(ck )) where d(ck ) is the number of signicant digits in the binary expansion of ck
mod 1. For example d(1) = 0, d(1:5) = 1, d(7 + 9=32) = 5 etc. The positive parameter  is
used to penalize quantization locations that require more bits to be represented. Assuming
that quantization locations of onsets are independent a-priori, (besides being increasing in
k, i.e., ck  ck 1 ), P
the prior probability of a sequence of quantization locations is given by
p(c0:K ) / exp(  K
k=0 d(ck )). We further assume that c0 2 [0; 1). One can check that
) < p(
). We can generalize this
such a prior prefers simpler notations, e.g., p(
prior to other subdivisions such triplets and quintiplets in Appendix A.
Formally, given a distribution on c0:K , the prior of a score 1:K is given by






6

p(1:K ) =

X

c0:K











6

p(1:K jc0:K )p(c0:K )

(2)

Since the relationship between c0:K and 1:K is deterministic, p(1:K jc0:K ) is degenerate for
any given c0:K , so we have

p(1:K ) / exp



K
k
X
X

!

d( k0 )
(3)
=1 k0 =1
One might be tempted to specify a prior directly on 1:K and get rid of c0:K entirely.
However, with this simpler approach it is not easy to devise realistic priors. For example,
consider a sequence of note durations [1 1=16 1 1 1 : : : ]. Assuming a factorized prior on
 that penalizes short note durations, this rhythm would have relatively high probability
whereas it is quite uncommon in conventional music.
k

2.2 Tempo prior
We represent the tempo in terms of its inverse, i.e., the period, and denote it with . For
example a tempo of 120 beats per minute (bpm) corresponds to  = 60=120 = 0:5 seconds.
At each onset the tempo changes by an unknown amount k . We assume the change k
is iid with N (0; Q ). 2 We assume a rst order Gauss-Markov process for the tempo
k = k 1 + k
(4)
Eq. 4 denes a distribution over tempo sequences 0:K . Given a tempo sequence, the
\ideal" or \intended" time k of the next onset is given by

k = k 1 + k k 1 + k

(5)

2. We denote a (scalar or multivariate) Gaussian distribution p(x) with mean vector  and covariance
1
matrix P by N (; P )=
^ j2P j 2 exp( 21 (x )T P 1 (x )).

49

Cemgil & Kappen
The noise term k denotes the amount of accentuation (that is deliberately playing a
note ahead or back in time) without causing the tempo to be changed. We assume k 
N (0; Q ). Ideal onsets and actually observed \noisy" onsets are related by

yk = k + k

(6)

The noise term k models small scale expressive deviations or motor errors in timing of individual notes. In this paper we will assume that k has a Gaussian distribution parameterized
by N (0; R).
The initial tempo distribution p(0 ) species a range of reasonable tempi and is given
by a Gaussian with a broad variance. We assume an uninformative (at) prior on 0 . The
conditional independence structure is given by the graphical model in Figure 1. Table 1
shows a possible realization from the model.
We note that our model is a particular instance of the well known switching state space
model (also known as conditionally linear dynamical system, jump Markov linear system,
switching Kalman lter) (See, e.g., Bar-Shalom & Li, 1993; Doucet & Andrieu, 2001;
Murphy, 2002).

k 0
1
2
3
k
...
ck 0 1/2 3/2 2 . . .
k 0.5 0.6 0.7 . . . . . .
k 0 0.25 0.85 1.20 . . .
yk 0 0.23 0.88 1.24 . . .


(





(

Table 1: A possible realization from the model: a ritardando. For clarity we assume  = 0.
In the following sections, we will sometimes refer use zk = (k ; k )T and refer to z0:K
as a tempo trajectory. Given this denition, we can compactly represent Eq. 4 and Eq. 5 by

zk =



1 k
0 1



zk 1 + k

(7)

where k = (k ; k ).

2.3 Extensions
There are several possible extensions to this basic parameterization. For example, one could
represent the period  in the logarithmic scale. This warping ensures positivity and seems
to be perceptually more plausible since it promotes equal relative changes in tempo rather
than on an absolute scale (Grubb, 1998; Cemgil et al., 2001). Although the resulting model
becomes nonlinear, it can be approximated fairly well by an extended Kalman lter (BarShalom & Li, 1993).
A simple random walk model for tempo uctuations such as in Eq. 7 seems not to be
very realistic. We would expect the tempo deviations to be more structured and smoother.

50

Monte Carlo Methods for Tempo Tracking and Rhythm Quantization
In our dynamical system framework such smooth deviations can be modeled by increasing
the dimensionality of z to include higher order \inertia" variables (Cemgil et al., 2001). For
example consider the following model,

0
k
B
1;k
B
B
2;k
B
B
@ ...

D 1;k

1
0
10
1 k k 0 : : : 0
k 1
C
B
C
B
0 1 0 0 : : : 0 C B 1;k 1
C
B
C
B
C
B
2;k 1
= B0 0
C
C
B
C
B
C
B
.
.
..
A
@ .. ..
A@
A
.
0 0

D 1;k 1

1
C
C
C
+ k
C
C
A

(8)

We choose this particular parameterization because we wish to interpret 1 as the slowly
varying \average" tempo and 2 as a temporary change in the tempo. Such a model is useful
for situations where the performer uctuates around an almost constant tempo; a random
walk model is not suÆcient in this case because it forgets the initial values. Additional state
variables 3 ; : : : ; D 1 act like additional \memory" elements. By choosing the parameter
matrix A and noise covariance matrix Q, one can model a rich range of temporal structures
in expressive timing deviations.
The score prior can be improved by using a richer model. For example to allow for
dierent time signatures and alternative rhythmic subdivisions, one can introduce additional
hidden variables (See Cemgil et al. (2000) or Appendix A) or use a Markov chain (Raphael,
2001a). Potentially, such extensions make it easier to capture additional structure in musical
rhythm (such as \weak" positions are followed more likely by \strong" positions). On the
other hand, the number of model parameters rapidly increases and one has to be more
cautious in order to avoid overtting.
For score typesetting, we need to quantize note durations as well, i.e., associate note
osets with quantization locations. A simple way of accomplishing this is to dene an
indicator sequence u0:K that identies whether yk is an onset (uk = 1) or an oset (uk =
0). Given uk , we can redene the observation model as p(yk jk ; uk ) = uk N (0; R) + (1
uk )N (0; Ro ) where Ro is the observation noise associated with osets. A typical model
would have Ro  R. For Ro ! 1, the osets would have no eect on the tempo process.
Moreover, since uk are always observed, this extension requires just a simple lookup.
In principle, one must allow for arbitrary long intervals between onsets, hence k are
drawn from an innite (but discrete) set. In our subsequent derivations, we assume that the
number of possible intervals is xed a-priori. Given an estimate of zk 1 and observation yk ,
almost all of the virtually innite number of choices for k will have almost zero probability
and it is easy to identify candidates that would have signicant probability mass.
Conceptually, all of the above listed extensions are easy to incorporate into the model
and none of them introduces a fundamental computational diÆculty to the basic problems
of quantization and tempo tracking.

51

Cemgil & Kappen
2.4 Problem Denition
Given the model, we dene rhythm transcription, i.e., quantization as a MAP state estimation problem
1: K = argmax p(1:K jy0:K )
(9)
p(1:K jy0:K ) =

Z 1:K

dz0:K p(1:K ; z0:K jy0:K )

and tempo tracking as a ltering problem
X
zk = argmax p(1:k ; zk jy0:k )
zk

1:k

(10)

The quantization problem is a smoothing problem: we wish to nd the most likely score

1:K given all the onsets in the performance. This is useful in \oine" applications such as
score typesetting.
For real-time interaction, we need to have an online estimate of the tempo/beat zk .
This information is carried forth by the ltering density p(1:k ; zk jy0:k ) in Eq.10. Our
denition of the best tempo zk as the maximum is somewhat arbitrary. Depending upon
the requirements of an application, P
one can make use of other features of the ltering
density. For example, the variance of 1:k p(1:k ; zk jy0:k ) can be used to estimate \amount
of condence" in tempo interpretation or arg maxzk ;1:k p(1:k ; zk jy0:k ) to estimate most
likely score-tempo pair so far.
Unfortunately, the quantities in Eq. 9 and Eq. 10 are intractable due to the explosion in
the number of mixture components required to represent the exact posterior at each step k
(See Figure 2). For example, to calculate the exact posterior in Eq. 9 we need to evaluate
the following expression:
Z
1
dz0:K p(y0:K jz0:K ; 1:K )p(z0:K j1:K )p(1:K )
(11)
p(1:K jy0:K ) =

Z
1
= p(y0:K j1:K )p(1:K )
(12)
Z
P
where the normalization constant is given by Z = p(y0:K ) = 1:K p(y0:K j1:K )p(1:K ). For
each trajectory 1:K , the integral over z0:K can be computed stepwise in k by the Kalman
lter (See appendix B.1). However, to nd the MAP state of Eq. 11, we need to evaluate
p(y0:K j1:K ) independently for each of the exponentially many trajectories. Consequently,
the quantization problem in Eq. 9 can only be solved approximately.
For accurate approximation, we wish to exploit any inherent independence structure of
the exact posterior. Unfortunately, since z and c are integrated over, all k become coupled
and in general p(1:K jy0:K ) does not possess any conditional independence structure (e.g.,
a Markov chain) that would facilitate eÆcient calculation. Consequently, we will resort to
numerical approximation techniques.

3. Monte Carlo Simulation
Consider a high dimensional probability distribution
1
p(x) = p (x)
Z

52

(13)

Monte Carlo Methods for Tempo Tracking and Rhythm Quantization

0.6

0.6

0.4

0.4

0.2

0.2

−2.2769

0

0

4.6765
−10.5474

ω

ω

2.6972

−0.2

−0.2
−3.2828
−5.0002

−0.4

−0.4

−0.6

−0.8
−0.5

−0.6

0

0.5

1

1.5
τ

2

2.5

3

3.5

(a)

−0.8
−0.5

0

0.5

1

3

3.5

1.5
τ

2

2.5

3

3.5

(b)

0.6

0.4
−0.4593
0.2

−7.9036
−10.3422
6.6343

ω

0

−0.2

−10.1982
0.76292
−2.393

−0.4

−2.7957

−0.6

−0.8
−0.5

Figure 2:

0

0.5

1

1.5
τ

2

2.5

(c)

Example demonstrating the explosion of the number of components to represent the
exact posterior. Ellipses denote the conditional marginals p(k ; !k jc0:k ; y0:k ). (We show
the period in logarithmic scale where !k = log2 k ). In this toy example, we assume
that a score consists only of notes of length and , i.e., k can be either 1=2 or 1.
(a) We start with a unimodal posterior p(0 ; !0 jc0 ; y0 ), e.g., a Gaussian centered at
(; !) = (0; 0). Since we assume that a score can only consist of eight- and quarter
notes, i.e., k 2 f1=2; 1g. the predictive distribution p(1 ; !1jc0:1; y0) is bimodal where
the modes are centered at (0:5; 0) and (1; 0) respectively (shown with a dashed contour
line). Once the next observation y1 is observed (shown with a dashed vertical line around
 = 0:5), the predictive distribution is updated to yield p(1 ; !1 jc0:1 ; y0:1 ). The numbers
denote the respective log-posterior weight of each mixture component. (b) The predictive
distribution p(2 ; !2jc0:1; y0:1) at step k = 2 has now 4 modes, two for each component
of p(1; !1jc0:1; y0:1). (c) The number of components grows exponentially with k.




53

(

Cemgil & Kappen
R
where the normalization constant Z = dxp (x) is not known but p (x) can be evaluated
at any particular x. Suppose we want to estimate the expectation of a function f (x) under
the distribution p(x) denoted as
Z

hf (x)ip(x) = dxf (x)p(x)
e.g., the mean of x under p(x) is given by hxi. The intractable integration can be approximated by an average if we can nd N points x(i) , i = 1 : : : N from p(x)

hf (x)ip(x)  N1

N
X

=1

i

f (x(i) )

(14)

When x(i) are generated by independently sampling from p(x), it can be shown that as N
approaches innity, the approximation becomes exact.
However, generating independent samples from p(x) is a diÆcult task in high dimensions but it is usually easier to generate dependent samples, that is we generate x(i+1) by
making use of x(i) . It is somewhat surprising, that even if x(i) and x(i+1) are correlated
(and provided ergodicity conditions are satised), Eq. 14 remains still valid and estimated
quantities converge to their true values when number of samples N goes to innity.
A sequence of dependent samples x(i) is generated by using a Markov chain that has
the stationary distribution p(x). The chain is dened by a collection of transition probabilities, i.e., a transition kernel T (x(i+1) jx(i) ). The denition of the kernel is implicit, in
the sense that one denes a procedure to generate the x(i+1) given x(i) . The Metropolis
algorithm (Metropolis & Ulam, 1949; Metropolis, Rosenbluth, Rosenbluth, Teller, & Teller,
1953) provides a simple way of dening an ergodic kernel that has the desired stationary
distribution p(x). Suppose we have a sample x(i) . A candidate x0 is generated by sampling from a symmetric proposal distribution q(x0 jx(i) ) (for example a Gaussian centered
at x(i) ). The candidate x0 is accepted as the next sample x(i+1) if p(x0 ) > p(x(i) ). If x0
has a lower probability, it can be still accepted, but only with probability p(x0 )=p(x(i) ).
The algorithm is initialized by generating the rst sample x(0) according to an (arbitrary)
proposal distribution.
However for a given transition kernel T , it is hard to assess the time required to converge
to the stationary distribution so in practice one has to run the simulation until a very large
number of samples have been obtained, (see e.g., Roberts & Rosenthal, 1998). The choice
of the proposal distribution q is also very critical. A poor choice may lead to the rejection of
many candidates x0 hence resulting in a very slow convergence to the stationary distribution.
For a large class of probability models, where the full posterior p(x) is intractable, one
can still eÆciently compute marginals of form p(xk jx k ), x k = x1 : : : xk 1 ; xk+1 ; : : : xK
exactly. In this case one can apply a more specialized Markov chain Monte Carlo (MCMC)
algorithm, the Gibbs sampler given below.
1. Initialize x(0)
1:K by sampling from a proposal q(x1:K )
2. For i = 0 : : : N

1

54

Monte Carlo Methods for Tempo Tracking and Rhythm Quantization

 For k = 1; : : : ; K , Sample

(i)
x(ki+1)  p(xk jx(1:i+1)
(15)
k 1 ; xk+1:K )
In contrast to the Metropolis algorithm, where the new candidate is a vector x0 , the
Gibbs sampler uses the exact marginal p(xk jx k ) as the proposal distribution. At each
step, the sampler updates only one coordinate of the current state x, namely xk , and the
new candidate is guaranteed to be accepted.
Note that, in principle we don't need to sample xk sequentially, i.e., we can choose k
randomly provided that each slice is visited equally often in the limit. However, a deterministic scan algorithm where k = 1; : : : K , provides important time savings in the type of
models that we consider here.
3.1 Simulated Annealing and Iterative Improvement
Now we shift our focus from sampling to MAP state estimation. In principle, one can use the
samples generated by any sampling algorithm (Metropolis-Hastings or Gibbs) to estimate
the MAP state x of p(x) by argmax p(x(i) ). However, unless the posterior is very much
i=1:N
concentrated around the MAP state, the sampler may not visit x even though the samples
x(i) are obtained from the stationary distribution. In this case, the problem can be simply
reformulated to sample not from p(x) but from a distribution that is concentrated at local
maxima of p(x). One such class of distributions are given by pj (x) / p(x)j . A sequence of
exponents 1 < 2 <    < j < : : : is called to be a cooling schedule or annealing schedule
owing to the inverse temperature interpretation of j in statistical mechanics, hence the
name Simulated Annealing (SA) (Aarts & van Laarhoven, 1985). When j ! 1 suÆciently
slowly in j , the cascade of MCMC samplers each with the stationary distribution pj (x) is
guaranteed (in the limit) to converge to the global maximum of p(x). Unfortunately, for this
convergence result to hold, the cooling schedule must go very slowly (in fact, logarithmically)
to innity. In practice, faster cooling schedules must be employed.
Iterative improvement (II) (Aarts & van Laarhoven, 1985) is a heuristic simulated annealing algorithm with a very fast cooling schedule. In fact, j = 1 for all j . The eventual
advantage of this greedy algorithm is that it converges in a few iterations to a local maximum. By restarting many times from dierent initial congurations x, one hopes to nd
dierent local maxima of p(x) and eventually visit the MAP state x . In practice, by using
the II heuristic one may nd better solutions than SA for a limited computation time.
From an implementation point of view, it is trivial to convert MCMC code to SA (or II)
code. For example, consider the Gibbs sampler. To implement SA, we need to construct
a cascade of Gibbs samplers, each with stationary distribution p(x)j . The exact one time
slice marginal of this distribution is p(xk jx k )j . So, SA just samples from the actual
(temperature=1) marginal p(xk jx k ) raised to a power j .
3.2 The Switching State Space Model and MAP Estimation
To solve the rhythm quantization problem, we need to calculate the MAP state of the
posterior in Eq. 11
p(1:K jy0:K )

Z

/ p(1:K ) dz0:K p(y0:K jz0:K ; 1:K )p(z0:K j1:K )
55

(16)

Cemgil & Kappen
This is a combinatorial optimization problem: we seek the maximum of a function p(1:K jy0:K )
that associates a number with each of the discrete congurations 1:K . Since it is not feasible
to visit all of the exponentially many congurations to nd the maximizing conguration
1: K , we will resort to stochastic search algorithms such as simulated annealing (SA) and
iterative improvement (II). Due to the strong relationship between the Gibbs sampler and
SA (or II), we will rst review the Gibbs sampler for the switching state space model.
The rst important observation is that, conditioned on 1:K , the model becomes a linear
state space model and the integration on z0:K can be computed analytically using Kalman
ltering equations. Consequently, one can sample only 1:K and integrate out z . The
analytical marginalization, called Rao-Blackwellization (Casella & Robert, 1996), improves
the eÆciency of the sampler (e.g., see Doucet, de Freitas, Murphy, & Russell, 2000a).
Suppose now that each switch variable k can have S distinct states and we wish to
) ; i = 1 : : : N g. A naive implementation of the
generate N samples (i.e trajectories) f1:(iK
Gibbs sampler requires that at each step k we run the Kalman lter S times on the whole
observation sequence y0:K to compute the proposal p(k j1:(ik) 1 ; k(i+1:1)K ; y0:K ). This would
result in an algorithm of time complexity O(NK 2 S ) that is prohibitively slow when K is
large. Carter and Kohn (1996) have proposed a much more time eÆcient deterministic scan
Gibbs sampler that circumvents the need to run the Kalman ltering equations at each
step k on the whole observation sequence y0:K . See also (Doucet & Andrieu, 2001; Murphy,
2002).
The method is based on the observation that the proposal distribution p(k j ) can
be factorized as a product of terms that either depend on past observations y0:k or the
future observations yk+1:K . So the contribution of the future can be computed a-priori by
a backward ltering pass. Subsequently, the proposal is computed and samples k(i) are
generated during the forward pass. The sampling distribution is given by

p(k j k ; y0:K ) / p(k j k )p(y0:K j1:K )

(17)

where the rst term is proportional to the joint prior p(k j k ) / p(k ;  k ). The second
term can be decomposed as

p(y0:K j1:K ) =
=

Z
Z

dzk p(yk+1:K jy0:k ; zk ; 1:K )p(y0:k ; zk j1:K )

(18)

dzk p(yk+1:K jzk ; k+1:K )p(y0:k ; zk j1:k )

(19)

Both terms are (unnormalized) Gaussian potentials hence the integral can be evaluated
analytically. The term p(yk+1:K jzk ; k+1:K ) is an unnormalized Gaussian potential in zk and
can be computed by backwards ltering. The second term is just the ltering distribution
p(zk jy0:k ; 1:k ) scaled by the likelihood p(y0:k j1:k ) and can be computed during forward
ltering. The outline of the algorithm is given below, see the appendix B.1 for details.
1. Initialize 1:(0)K by sampling from a proposal q(1:K )
2. For i = 1 : : : N

 For k = K 1; : : : ; 0,
56

Monte Carlo Methods for Tempo Tracking and Rhythm Quantization



{ Compute p(yk+1:K jzk ; k(i+1:1)K )
For k = 1; : : : ; K ,
{ For s = 1 : : : S
 Compute the proposal
p(k = sj ) / p(k = s;  k )

Z

dzk p(y0:k ; zk j1:(ik) 1 ; k = s)p(yk+1:K jzk ; k(i+1:1)K )

{ Sample k(i) from p(k j )
The resulting algorithm has a time complexity of O(NKS ), an important saving in terms
of time. However, the space complexity increases from O(1) to O(K ) since expectations
computed during the backward pass need to be stored.
At each step, the Gibbs sampler generates a sample from a single time slice k. In
certain types of \sticky" models, such as when the dependence between k and k+1 is
strong, the sampler may get stuck in one conguration, moving very rarely. This is due to
the fact that most singleton ips end up in low probability congurations due to the strong
dependence between adjacent time slices. As an example, consider the quantization model
and two congurations [: : : k ; k+1 : : : ] = [: : : 1; 1 : : : ] and [: : : 3=2; 1=2 : : : ]. By updating
only a single slice, it may be diÆcult to move between these two congurations. Consider
an intermediate conguration [: : : 3=2; 1 : : : ]. Since the duration (k + k+1 ) increases, all
future quantization locations ck:K are shifted by 1=2. That may correspond to a score that
is heavily penalized by the prior, thus \blocking" the path.
To allow the sampler move more freely, i.e., to allow for more global jumps, one can
sample from L slices jointly. In this case the proposal distribution takes the form
p(k:k+L 1j ) / p(k:k+L 1;  (k:k+L 1)) 
Z
dzk+L 1 p(y0:k+L 1; zk+L 1 j1:(ik) 1 ; k:k+L 1)p(yk+L:K jzk+L 1 ; k(i+L1):K )
Similar to the one slice case, terms under the integral are unnormalized Gaussian potentials
(on zk+L 1 ) representing the contribution of past and future observations. Since k:k+L 1
has S L states, the resulting time complexity for generating N samples is O(NKS L ), thus in
practice L must be kept rather small. One remedy would be to use a Metropolis-Hastings
algorithm with a heuristic proposal distribution q(k:k+L 1jy0:K ) to circumvent exact calculation, but it is not obvious how to construct such a q.
One other shortcoming of the Gibbs sampler (and related MCMC methods) is that the
algorithm in its standard form is inherently oine; we need to have access to all of the
observations y0:K to start the simulation. For certain applications, e.g., automatic score
typesetting, a batch algorithm might be still feasible. However in scenarios that require
real-time interaction, such as in interactive music performance or tempo tracking, online
methods must be used.
3.3 Sequential Monte Carlo
Sequential Monte Carlo, a.k.a. particle ltering, is a powerful alternative to MCMC for
generating samples from a target posterior distribution. SMC is especially suitable for
application in dynamical systems, where observations arrive sequentially.

57

Cemgil & Kappen
The basic idea in SMC is to represent the posterior p(x0:k 1 jy0:k 1 ) at time k 1 by
a (possibly weighted) set of samples fx(0:i)k 1 ; i = 1 : : : N g and extend this representation
to f(x(0:i)k 1 ; x(ki) ); i = 1 : : : N g when the observation yk becomes available at time k. The
common practice is to use importance sampling.
3.3.1 Importance Sampling

Consider again a high dimensional probability distribution p(x) = p (x)=Z with an unknown
normalization constant. Suppose we are given a proposal distribution q(x) that is close to
p(x) such that high probability regions of both distributions fairly overlap. We
P generate
independent samples, i.e., particles, x(i) from the proposal such that q(x)  Ni=1 Æ(x
x(i) )=N . Then we can approximate
1 p (x)
q(x)
(20)
p(x) =
Z q(x)
N

X
 Z1 pq((xx)) N1 Æ(x x(i) )
(21)
i=1
N
X
w(i)

(22)
PN (j) Æ(x x(i) )
j =1 w
i=1
where w(i) = p (x(i) )=q(x(i) ) are the importance weights. One can interpret w(i) as correction factors to compensate for the fact that we have sampled from the \incorrect" distribution q(x). Given the approximation in Eq.22 we can estimate expectations by weighted
averages
N
X
hf (x)ip(x) 
w~ (i) f (x(i) )

where w~ (i) = w(i) =

PN
j

=1

(23)

i

=1 w

(j ) are the normalized importance weights.

3.3.2 Sequential Importance Sampling

Now we wish to apply importance sampling to the dynamical model

p(x0:K jy0:K )

/

K
Y
k

=0

p(yk jxk )p(xk jx0:k 1 )

(24)

where x = fz;  g. In principle one can naively apply standard importance sampling by using
an arbitrary proposal distribution q(x0:K ). However nding a good proposal distribution
can be hard if K  1. The key idea in sequential importance sampling is the sequential
construction of the proposal distribution, possibly using the available observations y0:k , i.e.,

q(x0:K jy0:K ) =

K
Y
k

=0

58

q(xk jx0:k 1 ; y0:k )

Monte Carlo Methods for Tempo Tracking and Rhythm Quantization
Given a sequentially constructed proposal distribution, one can compute the importance
weight recursively as

p (x(0:i)k jy0:k ) p(yk jx(ki) )p(x(ki) jx(0:i)k 1 ; y0:k 1 ) p(y0:k 1 jx(0:i)k 1 )p(x(0:i)k 1 )
=
(25)
q(x(0:i)k jy0:k )
q(x(ki) jx(0:i)k 1 y0:k )
q(x(0:i)k 1 jy0:k 1 )
p(yk jx(ki) )p(x(ki) jx(0:i)k 1 ; y0:k 1 ) (i)
=
wk 1
(26)
q(x(ki) jx(0:i)k 1 y0:k )

wk(i) =

The sequential update schema is potentially more accurate than naive importance sampling since at each step k, one can generate a particle from a fairly accurate proposal
distribution that takes the current observation yk into account. A natural choice for the
proposal distribution is the ltering distribution given as

q(xk jx(0:i)k 1 y0:k ) = p(xk jx(0:i)k 1 ; y0:k )

(27)

In this case the weight update rule in Eq. 26 simplies to

wk(i) = p(yk jx(0:i)k 1 )wk(i) 1
In fact, provided that the proposal distribution q is constructed sequentially and past sampled trajectories are not updated, the ltering distribution is the optimal choice in the sense
of minimizing the variance of importance weights w(i) (Doucet, Godsill, & Andrieu, 2000b).
Note that Eq. 27 is identical to the proposal distribution used in Gibbs sampling at k = K
(Eq 15). At k < K , the SMC proposal does not take future observations into account; so
we introduce discount factors wk to compensate for sampling from the wrong distribution.
3.3.3 Selection

Unfortunately, the sequential importance sampling may be degenerate, in fact, it can be
shown that the variance of wk(i) increases with k. In practice, after a few iterations of
the algorithm, only one particle has almost all of the probability mass and most of the
computation time is wasted for updating particles with negligible probability.
To avoid the undesired degeneracy problem, several heuristic approaches are proposed
in the literature. The basic idea is to duplicate or discard particles according to their
normalized importance weights. The selection procedure can be deterministic or stochastic. Deterministic selection is usually greedy; one chooses N particles with the highest
importance weights. In the stochastic case, called resampling, particles are drawn with a
probability proportional to their importance weight wk(i) . Recall that normalized weights
fw~k(i) ; i = 1 : : : N g can be interpreted as a discrete distribution on particle labels (i).

3.4 SMC for the Switching State Space Model
The SIS algorithm can be directly applied to the switching state space model by sampling
directly from xk = (zk ; k ). However, the particulate approximation can be quite poor if z

59

Cemgil & Kappen
0.6

0.4

0.2

ω

0

−0.2

−0.4

−0.6

−0.8
−0.5

0

0.5

1

1.5
τ

2

2.5

3

3.5

Figure 3: Outline of the algorithm. The ellipses correspond to the conditionals
p(zk jk(i) ; y0:k ). Vertical dotted lines denote the observations yk . At each step
k, particles with low likelihood are discarded. Surviving particles are linked to
their parents.

is high dimensional. Hence, too many particles may be needed to accurately represent the
posterior.
Similar to the MCMC methods introduced in the previous section, eÆciency can be
improved by analytically integrating out z0:k and only sampling from 1:k . In fact, this
form of Rao-Blackwellization is reported to give superior results when compared to standard
particle ltering where both  and z are sampled jointly (Chen & Liu, 2000; Doucet et al.,
2000b). The improvement is perhaps not surprising, since importance sampling performs
best when the sampled space is low dimensional.
The algorithm has an intuitive interpretation in terms of a randomized breadth rst tree
search procedure: at each new step k, we expand N kernels to obtain S  N new kernels.
Consequently, to avoid explosion in the number of branches, we select N out of S  N
branches proportional to the likelihood, See Figure 3. The derivation and technical details
of the algorithm are given in the Appendix C.
The tree search interpretation immediately suggests a deterministic version of the algorithm where one selects (without replacement) the N branches with highest weight. We
will refer to this method as a greedy lter (GF). The method is also known as split-track
lter (Chen & Liu, 2000) and is closely related to Multiple Hypothesis Tracking (MHT)
(Bar-Shalom & Fortmann, 1988). One problem with the greedy selection schema of GF is
the loss of particle diversity. Even if the particles are initialized to dierent locations in z0 ,
(e.g., to dierent initial tempi), mainly due to the discrete nature of the state space of k ,
most of the particles become identical after a few steps k. Consequently, results can not
be improved by increasing the number of particles N . Nevertheless, when only very few
particles can be used, say e.g., in a real time application, GF may still be a viable choice.

60

Monte Carlo Methods for Tempo Tracking and Rhythm Quantization

(i) is optimal. We
Figure 4: A hypothetical situation where neither of the two particles 1:5
would obtain eventually a higher likelihood conguration by interchanging 3
between particles.
3.5 SMC and estimation of the MAP trajectory
Like MCMC, SMC is a sampling method. Hence comments made in Section 3.1 about the
) jy )
eventual suboptimality of estimating the MAP trajectory from particles as arg max p(1:(iK
0:K
also apply here. An hypothetical situation is shown in gure 4.
One obvious solution is to employ the SA \trick" and raise the proposal distribution to
a power p(k j) . However, such a proposal will be peaked on a very few  at each time
slice. Consequently, most of the particles will become identical in time and the algorithm
eventually degenerates to greedy ltering.
An algorithm for estimating the MAP trajectory from a set of SMC samples is recently
proposed in the literature (Godsill, Doucet, & West, 2001). The algorithm relies on the
observation that once the particles x(ki) are sampled during the forward pass, one is left with
N
a discrete distribution dened on the (discrete) supportN
X1:K = K
k=1 Xk . Here Xk denotes
is the support of the ltering distribution a time k and is the Cartesian product between
S
sets. Formally, Xk is the set of distinct samples at time k and is given by Xk = i fx(ki) g.
The distribution p(X1:K jy1:K )3 is Markovian because the original state transition model
is Markovian, i.e., the posterior can be represented exactly by
p(X1:K jy1:K ) /

K
Y

p(yk jXk )p(Xk jXk 1 )
=1
Consequently, one can nd the best MAP trajectory arg max p(X1:K ) by using an algorithm
that is analogous to the Viterbi algorithm for hidden Markov models (Rabiner, 1989).
However, this idea does not carry directly to the case when one applies Rao-Blackwellization. In general, when a subset of the hidden variables
NisK integrated out,Sall time
slices of the posterior p( 1:K jy1:k ) are coupled, where 1:K = k=1 k and k = i fk(i) g.
One can still employ a chain approximation and run Viterbi, (e.g., Cemgil & Kappen,
2002), but this does not guarantee to nd arg max p( 1:K jy1:k ).
On the other hand, because k(i) are drawn from a discrete set, several particles become
identical so k has usually a small cardinality when compared to the number of particles
N . Consequently, it becomes feasible to employ SA or II on the reduced state space 1:K ;
possibly using a proposal distribution that extends over several time slices L.
k

3. By a slight abuse of notation we use the symbol Xk both as a set and as a general element when used
in the argument of a density, p(yk jXk ) means p(yk jxk ) s.t. xk 2 Xk

61

Cemgil & Kappen
) ; i = 1 : : : N g, we
In practice, for nding the MAP solution from the particle set f1:(iK
) )p( (i) ) and apply iterative
propose to nd the best trajectory i = arg maxi p(y0:K j1:(iK
1:K

improvement starting from the initial conguration 1:(iK) .

4. Simulations
We have compared the inference methods in terms of the quality of the solution and execution time. The tests are carried out both on articial and real data.
Given the true notation 1:true
K , we measure the quality of a solution in terms of the
log-likelihood dierence
L = log

p(y0:K j1:K )p(1:K )
true
p(y0:K j1:true
K )p(1:K )

and in terms of edit distance

e(1:K ) =

K
X

(1 Æ(k

ktrue ))

=1
The edit distance e(1:K ) gives simply the number of notes that are quantized wrongly.
k

4.1 Articial data: Clave pattern
(c = [1, 2, 4, 5:5,
The synthetic example is a repeating \son-clave" pattern
7 : : : ]) with uctuating tempo. We repeat the pattern 6 times and obtain a score 1:K with
K = 30.
Such syncopated rhythms are usually hard to transcribe and make it diÆcult to track
the tempo even for experienced human listeners. Moreover, since onsets are absent at
prominent beat locations, standard beat tracking algorithms usually loose track.
Given score 1:K , we have generated 100 observation sequences y0:K by sampling from
the tempo model in Eq. 7. We have parameterized the observation noise variance4 as
Q = k Qa + Qb . In this formulation, the variance depends on the length of the interval
between consecutive onsets; longer notes in the score allow for more tempo and timing
uctuation. For the tests on the clave example we have not used a prior model that reects
true source statistics, instead, we have used the generic prior model dened in Section 2.1
with  = 1.
All the example cases are sampled from the same score (clave pattern). However, due
to the use of the generic prior (that does not capture the exact source statistics well) and a
relatively broad noise model, the MAP trajectory 1: K given y0:K is not always identical to
;i
the original clave pattern. For the i'th example, we have dened the \ground truth" 1:true
K as
the highest likelihood solution found using any sampling technique during any independent
run. Although this denition of the ground truth introduces some bias, we have found
this exercise more realistic as well as more discriminative among various methods when
compared to, e.g.,, using a dataset with essentially shorter sequences where the exact MAP
7

7



>









>

4. The noise covariance parameters were R = 0:022 , Qa = 0:062 I and Qb = 0:022 I . I is a 2  2 identity
matrix.

62

Monte Carlo Methods for Tempo Tracking and Rhythm Quantization
trajectory can be computed by exhaustive enumeration. The wish to stress that the main
aim of the simulations on synthetic dataset is to compare eectiveness of dierent inference
techniques; we postpone the actual test whether the model is a good one to our simulations
on real data.
We have tested the MCMC methods, namely Gibbs sampling (Gibbs), simulated annealing (SA) and iterative improvement (II) with one and two time slice optimal proposal
and for 10 and 50 sweeps. For each onset yk , the optimal proposal p(k j) is computed
always on a xed set, = f0; 1=4; 2=4 : : : 3g. Figure 6 shows a typical run of MCMC.
Similarly, we have implemented the SMC for N = f1; 5; 10; 50; 100g particles. The
selection schema was random drawing from the optimal proposal p(k j) computed using
one or two time slices. Only in the special case of greedy ltering (GF), i.e., when N = 1, we
have selected the switch with maximum probability. An example run is shown in Figure 5.
We observe that on average SMC results are superior to MCMC (Figure 7). We observe
that, increasing the number of sweeps for MCMC does not improve the solution signicantly.
On the other hand, increasing the number of particles seems to improve the quality of the
SMC solution monotonically. Moreover, the results suggest that sampling from two time
slices jointly (with the exception of SA ) does not have a big eect. GF outperforms a
particle lter with 5 particles that draws randomly from the proposal. That suggests that
for PF with a small number of particles N , it may be desirable to use a hybrid selection
schema that selects the particle with maximum weight automatically and randomly selects
the remaining N 1.
We compare inference methods in terms of execution time and the quality of solutions (as
measured by edit distance). As Figure 8 suggests, using a two slice proposal is not justied.
Moreover it seems that for comparable computational eort, SMC tends to outperform all
MCMC methods.

4.2 Real Data: Beatles
We evaluate the performance of the model on polyphonic piano performances. 12 pianists
were invited to play two Beatles songs, Michelle and Yesterday. Both pieces have a relatively
simple rhythmic structure with ample opportunity to add expressiveness by uctuating the
tempo. The original score is shown in Figure 9(a). The subjects had dierent musical education and background: four professional jazz players, four professional classical performers
and four amateur classical pianists. Each arrangement had to be played in three tempo
conditions, three repetitions per tempo condition. The tempo conditions were normal, slow
and fast tempo, all in a musically realistic range and all according to the judgment of the
performer. Further details are reported in (Cemgil et al., 2001).
4.2.1 Preprocessing

The original performances contained several errors, such as missing notes or additional notes
that were not on the original score. Such errors are eliminated by using a matching technique (Heijink, Desain, & Honing, 2000) based on dynamical programming. However, visual
inspection of the resulting dataset suggested still several matching errors that we interpret
as outliers. To remove these outliers, we have extended the quantization model with a two
state switching observation model, i.e., the discrete space consists of (k ; ik ). In this simple

63

Cemgil & Kappen

1

0.8

0.6

0.4

ω

0.2

0

−0.2

−0.4

−0.6

−0.8

−1

0

2

4

6

8
τ

10

12

14

16

Figure 5: Particle ltering on clave example with 4 particles. Each circle denotes the mean
(k(n) ; !k(n) ) where !k(n) = log2 k . The diameter of each particle is proportional
to the normalized importance weight at each generation. '*' denote the true
(; !) pairs; here we have modulated the tempo deterministically according to
!k = 0:3 sin(2ck =32), observation noise variance is R = 0:0252 .

64

Monte Carlo Methods for Tempo Tracking and Rhythm Quantization

0

Log Likelihood

−10

−20
Gibbs
SA
II
GF
Desired

−30

−40

Figure 6:

1

10

20
30
Gibbs Sweep

40

50

Typical runs of Gibbs sampling, Simulated Annealing (SA) and Iterative Improvement
(II) on clave example. All algorithms are initialized to the greedy lter solution. The
annealing schedule for SA was linear from 1 = 0:1 to 33 = 10 and than proceeding deterministically by 34:50 = 1. When SA or II converge to a conguration, we reinitialize
by a particle lter with one particle that draws randomly proportional to the optimal
proposal. Sharp drops in the likelihood correspond to reinitializations. We see that, at
the rst sweep, the greedy lter solution can only be slightly improved by II. Consequently the sampler reinitializes. The likelihood of SA drops considerably, mainly due to
the high temperature, and consequently stabilizes at a suboptimal solution. The Gibbs
sampler seems to explore the support of the posterior but is no able to visit the MAP
state in this run.

65

Cemgil & Kappen

Log Likelihood Difference

0

−5

−10

−15

−20
1 Slice
2 Slice
−25

SA

Gibbs

II

GF

PF

(a) Likelihood Dierence
30

1 Slice
2 Slice

Edit Distance

25
20
15
10
5
0
SA

Gibbs

II

GF

PF

(b) Edit Distance. MCMC results with 10 sweeps are omitted.

Figure 7:

Comparison of inference methods on the clave data. The squares and ovals denote the
median and the vertical bars correspond to the interval between %25 and %75 quantiles.
We have tested the MCMC methods (Gibbs, SA and II) independently for 10 and 50
(shown from left to right). The SMC methods are the greedy lter (GF) and particle lter
(PF). We have tested lters with N = f5; 10; 50; 100g particles independently (shown
from left to right.).

66

Monte Carlo Methods for Tempo Tracking and Rhythm Quantization

SA1

SA2

Median Edit Distance

20

15

PF2−5

PF1−5

PF1−10

10
GF1

II1 PF2−10

GF2

Gi1

Gi2
II2

5

0

PF1−50

PF1−100

PF2−50
PF2−100

Flops (log scale)

Figure 8:

Comparison of execution time in terms of oating point operations. For all methods, the
rst number (1 or 2) denotes the number slices used by the optimal proposal distribution.
For the particle lter (PF), the second number denotes the number of particles. The
dashed lines are merely used to connect related methods.

outlier detection mechanism, each switch ik is a binary indicator variable specifying whether
the onset yk is an outlier or not. We assume that all indicators are independent a-priori
and have a uniform prior. The observation model is given by p(yk jik ; k ) = N (0; Rik ) 5 .
Since the score 1:K is known, the only unknown discrete quantities are the indicators i0:K .
We have used greedy ltering followed by iterative improvement to nd the MAP state
of indicators i0:K and eliminated outliers in our further studies. For many performances,
there were around 2 4 outliers, less than 1% of all the notes. The resulting dataset can
be downloaded from the url http://www.snn.kun.nl/cemgil.
4.2.2 Parameter Estimation

We have trained tempo tracking models with dierent dimensionality D, where D denotes
the dimension of the hidden variable z . In all of the models, we use a transition matrix that
has the form in Eq. 8.
Since the true score is known, i.e., the quantization location ck of each onset yk is given,
we can clamp all the discrete variables in the model. Consequently, we can estimate the
observation noise variance R, the transition noise variance Q and the transition matrix
coeÆcients A from data.
We have optimized the parameters by Expectation-Maximization (EM) for the linear
dynamical systems (Shumway & Stoer, 1982; Ghahramani & Hinton, 1996) using all perfor5. We took Rik =0 = 0:002 and Rik =1 = 2.

67

Cemgil & Kappen
mances of \Yesterday" as training data. Similarly, the score prior parameters are estimated
by frequency counts from the score of \Yesterday" 6 . All tests are carried out on \Michelle".
4.2.3 Results

In Figure 9 we show the result of typesetting a performance with and without tempo
tracking. Due to uctuations in tempo, the quality of the automatically generated score is
very poor. The quality can be signicantly improved by using our model.
Figure 10 shows some tempo tracking examples on Michelle dataset for pianists from
dierent background and training. We observe that in most cases the results are satisfactory.
In Figure 11, we give a summary of test results on Michelle data in terms of the loglikelihood and edit distance as a function of model order and number of particles used for
inference. Figure 11(a) shows that the median likelihood on test data is increasing with
model order. This suggests that a higher order lter is able to capture structure in pianists' expressive timing. Moreover, as for the sythetic data, we see a somewhat monotonic
increase in the likelihood of solutions found when using more particles.
The edit distance between the original score and the estimates are given in Figure 11(b).
Since both pieces are arranged for piano, due to polyphony, there are many onsets that are
associated with the same quantization location. Consequently, many ktrue in the original
score are eectively zero. In such cases, typically, the corresponding inter onset interval
yk yk 1 is also very small and the correct quantization (namely k = 0) can be identied
even if the tempo estimate is completely wrong. As a consequence, the edit distance remains
small. To make the task slightly more challenging, we exclude the onsets with ktrue = 0
from edit distance calculation.
We observe that the extra prediction ability obtained using a higher order model does
not directly translate to a better transcription. The errors are around 5% for all models.
On the other hand, the variance of edit distance for higher order models is smaller. This
suggests that higher order models tend to be more robust against divergence from the
original tempo track.

5. Discussion
We have presented a switching state space model for joint rhythm quantization and tempo
tracking. The model describes the rhythmic structure of musical pieces by a prior distribution over quantization locations. In this representation, it is easy to construct a generic
prior that prefers simpler notations and to learn parameters from a data set. The prior on
quantization locations c0:K translates to a non-Markovian distribution over a score 1:K .
Timing deviations introduced by performers (tempo uctuation, accentuations and motor errors) are modeled as independent Gaussian noise sources. Performer specic timing
preferences are captured by the parameters of these distributions.
Given the model, we have formulated rhythm quantization as a MAP state estimation
problem and tempo tracking as a ltering problem. We have introduced Markov chain
6. The maximum likelihood parameters for a model of dimension D = 3 are found to be: a = 0:072, R =
0:0132 and q = 0:0082 , q1 = 0:0072 and q2 = 0:0502 . The prior p(c) is p(0) = 0:80, p(1=3) = 0:0082,
p(1=2) = 0:15 p(5=6) = 0:0418. Remaining p(c) are set to 10 6 .

68

Monte Carlo Methods for Tempo Tracking and Rhythm Quantization

Michelle
Lennon/McCartney

bb 4 Œ
Œ
Œ
Œ
Œ
& b b 4 ˙ œœ n ˙ œœ ˙ œœ n ˙ œœ ww œ œ œ œœ œœ œœ œœ Œ˙ n œœ ˙Œ œœ
œ
œ
w
? b b b 44
w
˙
˙
˙
w
b ˙
˙
˙
1

Piano

   
  

   
   

6

bb Œ œ ˙
& b b ˙˙
Œ œœ
? bb
bb ˙
˙

œ œ œ
œ n œ˙ œ
˙œ
˙˙
n ˙˙œ
˙

bb
& b b ˙Œ n œœ ˙Œ œœ
œ
œ
? bb
˙
bb ˙

Œ œ ˙
˙˙
Œ œœ

6

11

˙

˙

˙

n˙

˙

n˙

˙ n œ n œœ . œ œœ œw n œ
Œ œ œ. J
œ Œ œœ
˙
œ
n˙
œ nœ nœ

œ œ œ
œ n ˙œ œ
˙œ
˙˙
n ˙œ˙
˙
˙

˙

3

˙ n œ n œ˙ œ œ
Œ œ ˙
˙
n˙

n˙

n˙

      

 
 

      
   

        



   


 

      
 


  
 
           

              




   
            

 
                        
 


  


           


















 
      
 
   
  


 
  



   

   
 
   


      
           

      
                     






    

 






   

10

3

13

17
3

bb
& b b ˙ . n˙.
Œ ˙.
? bb ˙
bb
16

nœ n œ

œ
bb ‰
& b b ˙˙˙ œ œ œœœœ ‰œ œœ
œ
J
? bb
bb
nœ œ
˙
21

bb
& b b n w˙
w
? bb œ
bb

3

j
œ
œ ˙œœ œœ œ ˙œœ œœ œ ˙˙ .. ˙ .
˙

œœ b ˙˙‰ œ œ œœœœ ..
˙
œ ..

œ œ

˙

j
œ œ.
˙˙ ..

œ œ œœ
œ

œ˙ œ œ˙ œ
˙
n˙

˙

œ œ

˙

œ œ

œ nœ

˙

j
œ ww
w

œ œ

œ.

œ˙ œ œ˙ œ
˙
n˙
˙

œ

j
œœ œ

˙
Œ ˙˙ œœ œœ

œ

˙

˙

20

24

  

  
    
  
 

27

26

œ

n ww
w

œ nœ nœ

w

œ

(a) Original Score






































(b) Typesetting without
processing by the model.
Due to uctuations in
tempo, the quality of the
score is poor.

Figure 9:



  
         
  




     
  
       

   

 
  
    
        
  
 
 
   
   
q = 130

6

11

16

3

    
   
 
   







3

 
 



3











 



        



  
 

    









   
 
 
               
   

   


 
 
  

  
  
    
 

  
       
  






  


 

  
  




   

20



24

(c) Typesetting after tempo
tracking and quantization
with a particle lter.

Results of Typesetting the scores.

69



  
  

 
  
  




         
       
 
      
 

           



Cemgil & Kappen

0

0
Estimated
Original

Estimated
Original

−0.4

−0.4
2

log ∆

2

log ∆

k

−0.2

k

−0.2

−0.6

−0.6

−0.8

−0.8

−1

0

10

20

30

τ

40

50

60

−1
−10

70

0

10

20

30

k

τ

40

50

60

70

80

k

(a) Professional Jazz Pianist

(b) Amateur

0

0
Estimated
Original

Estimated
Original

−0.2

−0.2

−0.4
−0.6

2

log ∆

2

log ∆

k

−0.8

k

−0.4

−0.6

−1

−1.2
−1.4

−0.8

−1.6
−1.8

−1
−10

0

10

20

30

τ

40

50

60

70

80

k

0

10

20

30

τ

40

50

60

70

k

(c) Professional Classical Pianist. The
lter temporarily loses track.

Figure 10:

−2

(d) Tracking at twice the rate of the
original tempo.

Examples of ltered estimates
of z0:K = [k ; k ]T from the Beatles data set. Circles
original
denote the mean of p(zk j1:k ; y0:k ) and \x" denote mean p(zk j1: k ; y0:k ) obtained by
SMC. It is interesting to note dierent timing characteristics. For example the classical
pianist uses a lot more tempo uctuation than the professional jazz pianist. Jazz pianist
slows down dramatically at the end of the piece, the amateur \rushes", i.e., constantly
accelerates at the beginning. The tracking and quantization results for (a) and (b)
are satisfactory. In (a), the lter loses track at the last two notes, where the pianist
dramatically slows down. In (c), the lter loses track but catches up again. In (d), the
lter jumps to a metrical level that is twice as fast as the original performance. That
would translate to a duplication in note durations only.

70

Monte Carlo Methods for Tempo Tracking and Rhythm Quantization

500

480

Likelihood

460

440

420

400

380

360

2

3
Model Dimension

4

(a) Likelihood. The dashed horizontal line shows the median
likelihood of the original score of Michelle under each model.
50

45

40

Percent Edit Distance

35

30

25

20

15

10

5

0

2

3
Model Dimension

4

(b) Edit Distance

Figure 11:

SMC results on the test data (108 performances of Michelle). For each model we show
the results obtained with N = 1; 10; 20 and 50 particles. The \-" show the median of
the best particle and \x" denote the median after applying iterative improvement. The
vertical bars correspond to the interval between %25 and %75 quantiles.
71

Cemgil & Kappen
Monte Carlo (MCMC) and sequential Monte Carlo (SMC) to approximate the respective
distributions.
The quantization model we propose is similar to that of (Raphael, 2001a). For transcription, Raphael proposes to compute arg max p(c0:K ; z0:K jy0:K ) and uses a message propagation scheme that is essentially analogous to Rao-Blackwellized particle ltering. To prevent
the number of kernels from explosion, he uses a deterministic selection method, called
\thinning". The advantage of Raphael's approach is that the joint MAP trajectory can
be computed exactly, provided that the continuous hidden state z is one dimensional and
the model is in a parameter regime that keeps the number of propagated Gaussian kernels
limited, e.g., if R is small, thinning can not eliminate many kernels. One disadvantage is
that the number of kernels varies depending upon the features of the ltering distribution;
it is diÆcult to implement such a scheme in real time. Perhaps more importantly, simple extensions such as increasing the dimensionality of z or introducing nonlinearities to
the transition model would render the approach quickly invalid. In contrast, Monte Carlo
methods provide a generic inference technique that allow great exibility in models one can
employ.
We have tested our method on a challenging articial problem (clave example). SMC
has outperformed MCMC in terms of the quality of solutions, as measured in terms of the
likelihood as well as the edit distance. We propose the use of SMC for both problems. For
nding the MAP quantization, we propose to apply iterative improvement (II) to the SMC
solution on the reduced conguration space.
The correct choice of the score prior is important in the overall performance of the
system. Most music pieces tend to have a certain rhythmical vocabulary, that is certain
rhythmical motives reoccur several times in a given piece. The rhythmic structure depends
mostly upon the musical genre and composer. It seems to be rather diÆcult to devise
a general prior model that would work well in a large spectrum of styles. Nevertheless,
for a given genre, we expect a simple prior to capture enough structure suÆcient for good
transcription. For example, for the Beatles dataset, we have estimated the prior by counting
from the original score of \Yesterday". The statistics are fairly close to that of \Michelle".
The good results on the test set can be partially accounted for the fact that both pieces
have a similar rhythmical structure.
Conditioned on the score, the tempo tracking model is a linear dynamical system. We
have optimized several tempo models using EM where we have varied the dimension of
tempo variables z . The test results suggest that increasing the dimensionality of z improves
the likelihood. However, increase in the likelihood of the whole dataset does not translate
directly to overall better quantization results (as measured by edit distance). We observe
that models trained on the whole training data fail consistently for some subjects, especially
professional classical pianists. Perhaps interestingly, if we train \custom" models specically
optimized for the same subjects, we can improve results signicantly also on test cases.
This observation suggests a kind of multimodality in the parameter space where modes
correspond to dierent performer regimes. It seems that a Kalman lter is able to capture
the structure in expressive timing deviations. However, when averaged over all subjects,
these details tend to be wiped out, as suggested by the quantization results that do not
vary signicantly among models of dierent dimensions.

72

Monte Carlo Methods for Tempo Tracking and Rhythm Quantization
A related problem with the edit distance measure is that under an \average" model, the
likelihood of the desired score (e.g., original score of \Michelle") may have a lower likelihood
than a solution found by an inference method. In such cases increasing the likelihood may
even decrease the edit distance. In some test cases we even observe solutions with a higher
likelihood than the original notation where all notes are wrong. In most of these cases, the
tempo trajectory of the solution correspond to the half or twice of the original tempo so
consequently all note durations are halved or doubled (e.g., all whole notes are notated as
half notes, all half notes as quarters e.t.c.). Considering the fact that the model is \self
initializing" its tempo, that is we assume a broad uncertainty a-priori, the results are still
satisfactory from a practical application perspective.
One potential shortcoming of our model is that it takes only timing information of onsets
into account. In reality, we believe that pitch and melodic grouping as well as articulation
(duration between note onsets and osets) and dynamics (louder or softer) provide useful
additional information for tempo tracking as well as quantization. Moreover, current model
assumes that all onsets are equally relevant for estimation. That is probably in general not
true: for example, a kick-drum should provide more information about the tempo than a
ute. On the other hand, our simulations suggest that even from such a limited model one
can obtain quite satisfactory results, at least for simple piano music.
It is somewhat surprising, that SMC, basically a method that samples from the ltering
distribution outperforms an MCMC method such as SA that is specically designed for
nding the MAP solution given all observations. An intuitive explanation for relatively
poorer MCMC results is that MCMC proceeds rst by proposing a global solution and then
tries to improve it by local adjustments. A human transcriber, on the other hand, would
listen to shorter segments of music and gradually write down the score. In that respect,
the sequential update schema of SMC seems to be more natural for the rhythm transcription problem. Similar results, where SMC outperforms MCMC are already reported in the
literature, e.g., in the so-called \Growth Monte Carlo" for generating self-avoiding random
walks (Liu, Chen, & Logvinenko, 2001). It seems that for a large class of dynamical problems, including rhythm transcription, sequential updating is preferable over batch methods.
We note that theoretical convergence results for SA require the use of a logarithmic
cooling schedule. It seems that our cooling schedule was too fast to meet this requirement;
so one has to be still careful in interpreting the poor performance as a negative SA result.
We maintain that by using a richer neighborhood structure in the conguration space (e.g.,
by using a block proposal distribution) and a slower cooling schedule, SA results can be
improved signicantly. Moreover, MCMC methods can be also be modied to operate
sequentially, for example see (Marthi, Pasula, Russell, & Peres, 2002).
Another family of inference methods for switching state space models rely on deterministic approximate methods. This family includes variational approximations (Ghahramani &
Hinton, 1998) and expectation propagation (Heskes, 2002). It remains an interesting open
question whether deterministic approximation methods provide an advantage in terms of
computation time and accuracy; in particular for the quantization problem and for other
switching state space models. A potential application of the deterministic approximation
techniques in a MCMC schema can be in designing proposal distributions that extend over
several time slices. Such a schema would circumvent the burden for computing the optimal
proposal distribution exhaustively hence allowing more global moves for the sampler.

73

Cemgil & Kappen
Our current results suggest the superiority of SMC for our problem. Perhaps the most
important advantage of SMC is that it is essentially an \anytime" algorithm; if we have
a faster computer we can increase the number of particles to make use of the additional
computational power. When computing time becomes short one can decrease the number
of samples. These features make SMC very attractive for real-time applications where one
can easily tune the quality/computation-time tradeo.
Motivated by the practical advantages of SMC and our positive simulation results, we
have implemented a prototype of SMC method in real-time. Our current computer system
(a 800 MHz P3 laptop PC running MS Windows) allows us to use up to 5 particles with
almost no delay even during busy passages. We expect to signicantly improve the eÆciency
by translating the MATLABc constructs to native C code. Hence, the method can be used
as a tempo tracker in an automatic interactive performance system and as a quantizer in
an automatic score typesetting program.

Acknowledgments
This research is supported by the Technology Foundation STW, applied science division
of NWO and the technology programme of the Dutch Ministry of Economic Aairs. We
would like to thank the associate editor Daphne Koller and the anonymous reviewers for
their comments that helped us signicantly to improve the article. We would also like to
thank to Ric Ashley, Peter Desain, Henkjan Honing and Paul Trilsbeek for their suggestions
and contributions in data collection. Moreover we gratefully acknowledge the pianists from
Northwestern University and Nijmegen University for their excellent performances.

Appendix A. A generic prior model for quantization locations c
In traditional western music notation, note durations are generated by recursive subdivisions
starting from a whole note, hence it is also convenient to generate quantization locations
in a similar fashion by regular subdivisions. We decompose a quantization location into an
integer part and a fraction: c = bcc + (c mod 1). For dening a prior, we will only use the
fraction.
The set of all fractions can be generated by recursively subdividing the unit interval
[0; 1). We let S = [si ] denote a subdivision schema, where [si ] is a (nite) sequence of
arbitrary integers (usually small primes such as 2,3 or 5). The choice of a particular S
depends mainly on the assumed time signature. We generate the set of fractions C as
follows: At rst iteration, we divide the unit interval into s1 intervals of equal length and
append the endpoints c0 of resulting intervals into the set C . At each following iteration i,
we subdivide all intervals generated by the previous iteration into si equal parts and append
all resulting endpoints to C . Note that thisQprocedure generates a regular grid where two
neighboring grid points have the distance 1= i si . We denote the iteration number at which
the endpoint c0 is rst inserted to C as the depth of c0 (with respect to S ). This number will
be denoted as d(c0 jS ). It is easy to see that this denition of d coincides with the number
of signicant bits to represent c mod 1 when S = [2; 2; : : : ].
As an illustirative example consider the subdivision S = [3; 2]. At the rst iteration, the
unit interval is divided into s1 = 3 equal intervals, and the resulting endpoints 0, 1=3, and

74

Monte Carlo Methods for Tempo Tracking and Rhythm Quantization
2=3 are inserted into C with depths d(0) = d(1=3) = d(2=3) = 1. At the second iteration,
the new endpoints 1=6, 3=6 and 5=6 are inserted to C and are assigned the depth 2.
Given an S , we can dene a distribution on quantization locations

p(ck jS ) / exp( d(ck mod 1jS ))
If we wish to consider several time signatures, i.e., dierent subdivision schemata, we can
interpret S as a hidden indicator variable and dene
P a prior p(S ). In this case, the prior
becomes a multinomial mixture given by p(ck ) = S p(ck jS )p(S ). For further details and
empirical results justifying such a choice see (Cemgil et al., 2000).

Appendix B. Derivation of two pass Kalman ltering Equations
Consider a Gaussian potential with mean  and covariance  dened on some domain
indexed by x.
1
1
(28)
(x) = Z  N (; ) = Z j2j 2 exp( (x )T  1 (x ))
2
R
where dx(x) = Z > 0. If Z = 1 the potential is normalized. The exponent in Eq. 28 is
a quadratic form so the potential can be written as
1 T
x Kx)
(29)
(x) = exp(g + hT x
2
where
1
K 1 T 1
K= 1
h=  1 
g = log Z + log j j
h K h
2
2 2
To denote a potential in canonical form we will use the notation

(x) = Z  N (; )  [h; K; g]
and we will refer to g, h and K as canonical parameters. Now we consider a Gaussian
potential on (x1 ; x2 )T . The canonical representation is

(x1 ; x2 ) =



h1
h2

 
;

K11 K12
K21 K22

 
;g

In models where several variables are interacting, one can nd desired quantities by applying
three basic operations dened on Gaussian potentials. Those are multiplication, conditioning, and marginalization. The multiplication of two Gaussian potentials on the same index
set x follows directly from Eq. 29 and is given by
0 (x) = a (x)  b (x)
[h0 ; K 0 ; g0 ] = [ha ; Ka ; ga ]  [hb ; Kb ; gb ] = [ha + hb ; Ka + Kb ; ga + gb ]
If the domain of a and b only overlaps on a subset, then potentials are extended to the
appropriate domain by appending zeros to the corresponding dimensions.

75

Cemgil & Kappen
The marginalization operation is given by

(x1 ) =

Z

K12 K221 h2 ; K11

(x1 ; x2 ) = [h1

x2

K12 K221 K21 ; g0 ]

where g0 = g 21 log jK22 =2 j + 21 h2 T (K22 ) 1 h2 and g is the initial constant term of (x1 ; x2 ).
The conditioning operation is given by
(x1 ; x2 = x^2 ) = [h1 K12 x^2 ; K11 ; g0 ]

1 x^T K22 x^2 .
2 2

where g0 = g + hT2 x^2

B.1 The Kalman Filter Recursions
Suppose we are given the following linear model subject to noise
zk = Azk 1 + k
yk = Czk + k
where A and C are constant matrices, k  N (0; Q) and k  N (0; R)
The model encodes the joint distribution
K
Y

p(yk jzk )p(zk jzk 1 )
=1
p(z1 jz0 ) = p(z1 )

p(z1:K ; y1:K ) =

k

(30)
(31)

1
1 T 1
p(z1 ) = [P 1 ; P 1 ; log j2P j
 P ]
2 
   T2 1

TR 1
1
0
C
R
C
C
p(y1 jz1 ) =
;
; log j2Rj
0
R 1C
R 1
2
1
1 T 1
p(y1 = y^1 jz1 ) = [0 + C T R 1 y^1 ; C T R 1 C; log j2Rj
y^ R y^1 ]
2
2 1

   T 1

TQ 1
1
0
A
Q
A
A
p(z2 jz1 ) =
; log j2Qj
0 ;
Q 1A
Q 1
2
:::
B.1.1 Forward Message Passing

Suppose we wish to compute the likelihood

p(y1:K ) =

Z

zK

p(yK jzK ) : : :

Z

z2

p(z3 jz2 )p(y2 jz2 )

Z
z1

p(z2 jz1 )p(y1 jz1 )p(z1 )

7 We can compute this integral by starting from z1 and proceeding to zK . We dene forward
\messages"  as
R
R
7. We let z  dz

76

Monte Carlo Methods for Tempo Tracking and Rhythm Quantization

 1j0 = p(z1 )
 k=1:K
{ kjk = p(yk = y^k jzk )kjk 1
R
{ k+1jk = zk p(zk+1 jzk )kjk
The forward recursion is given by
 1j0 = [P 1 ; P 1; 12 log j2P j
 k = 1:::K

1 T P 1 ]
2

{ kjk = [hkjk ; Kkjk ; gkjk ]
hkjk = C T R 1 y^k + hkjk 1
Kkjk = C T R 1 C + Kkjk 1
gkjk = gkjk 1 21 log j2Rj 12 y^1T R 1 y^k
{ k+1jk = [hk+1jk ; Kk+1jk ; gk+1jk ]
Mk = (AT Q 1 A + Kkjk ) 1
hk+1jk = Q 1 AMk hkjk
Kk+1jk = Q 1 Q 1 AMk AT Q 1
gk+1jk = gkjk 21 log j2Qj + 12 log j2Mk j + 12 hTkjk Mk hkjk
B.1.2 Backward Message Passing

We can compute the likelihood also by starting from yK .

p(y1:K ) =

Z

z1

p(z1 )p(y1 jz1 )

Z

z2

p(z2 jz1 )p(y2 jz2 ) : : :

Z
zK

In this case the backward propagation can be summarized as

 K jK +1 = 1
 k = K :::1
{ kjk = p(yk = y^k jzk )kjk+1
R
{ k 1jk = zk p(zk jzk 1 )kjk
The recursion is given by

 [hK jK +1; KK jK +1; gK jK +1] = [0; 0; 0]
 k = K :::1
{ kjk = [hkjk ; Kkjk ; gkjk ]
hkjk = C T R 1 y^k + hkjk+1
Kkjk = C T R 1 C + Kkjk+1

77

p(zK jzK 1 )p(yK jzK )

Cemgil & Kappen
gkjk = 21 log j2Rj 12 y^kT R 1 y^k + gkjk+1
{ k 1jk = [hk 1jk ; Kk 1jk ; gk 1jk ]
Mk = (Q 1 + Kkjk ) 1
hk 1jk = AT Q 1 Mk hkjk
Kk 1jk = AT Q 1 (Q Mk )Q 1 A
gk 1jk = gkjk 21 log j2Qj + 12 log j2Mk j + 12 h Tkjk Mk hkjk
B.2 Kalman Smoothing
Suppose we wish to nd the distribution of a particular zk given all the observations y1:K .
We just have to combine forward and backward messages as
p(zk jy1:K )

/ p(yk+1:K ; zk ; y1:k )

= p(y1:k ; zk )p(yk+1:K jzk )
= kjk  kjk+1
= [hkjk + hkjk+1 ; Kkjk + Kkjk+1; gkjk + gkjk+1]

Appendix C. Rao-Blackwellized SMC for the Switching State space
Model
We let i = 1 : : : N be an index over particles and s = 1 : : : S an index over states of  . We
denote the (unnormalized) ltering distribution at time k 1 by
(ki) 1 =^ p(y0:k 1; zk 1 j1:(ik) 1 )
Since y0:k 1 are observed, (ki) 1 is a Gaussian potential on zk 1 with parameters Zk(i) 1 
N
((i) ; (i) ). Note that the normalization constant Zk(i) 1 is the data likelihood p(y0:k 1j1:(ik) 1 ) =
R k (1i) k 1
dzk k 1 . Similarly, we denote the ltered distribution at the next slice conditioned on
k = s by

(ksji) =
^

Z

dzk 1 p(yk jzk )p(zk jzk 1 ; k = s)(ki) 1
(32)
= p(y0:k ; zk j1:(ik) 1 ; k = s)
We denote the normalization constant of (ksji) by Zk(sji). Hence the joint proposal on s and
(i) is given by
qk(sji) =

Z

dzk (ksji)  p(k = s; 1:(ik) 1 )
= p(k = s; 1:(ik) 1 ; y0:k )

The outline of the algorithm is given below:
 Initialize. For i = 1 : : : N , (0i) p(y0; x0)

78

Monte Carlo Methods for Tempo Tracking and Rhythm Quantization

 For k = 1 : : : K
{ For i = 1 : : : N , s = 1 : : : S
Compute (ksji) from (ki) 1 using Eq.32.
qk(sji) Zk(sji)  p(k = s; 1:(ik) 1 )
{ For i = 1 : : : N
Select a tuple (sjj )  qk
1:(ik) (1:(jk) 1 ; k = s)
(ki) (ksjj )
P (sjj)
wk(i)
s qk
Note that the procedure has a \built-in" resampling schema for eliminating particles
with small importance weight. Sampling jointly on (sji) is equivalent to sampling a single
s for each i and then resampling i according to the weights wk(i) . One can also check that,
since we are using the optimal proposal distribution of Eq.27, the weight at each step is
given by wk(i) = p(1:(ik) 1 ; y0:k ).

References

Aarts, E. H. L., & van Laarhoven, P. J. M. (1985). Statistical cooling: A general approach to
combinatorial optimization problems. Philips Journal of Research, 40 (4), 193{226.
Agon, C., Assayag, G., Fineberg, J., & Rueda, C. (1994). Kant: A critique of pure quantication.
In Proceedings of the International Computer Music Conference, pp. 52{9, Aarhus, Denmark.
International Computer Music Association.
Andrieu, C., de Freitas, N., Doucet, A., & Jordan, M. I. (2002). An introduction to MCMC for
machine learning. Machine Learning, to appear.
Bar-Shalom, Y., & Fortmann, T. E. (1988). Tracking and Data Association. Academic Press.
Bar-Shalom, Y., & Li, X.-R. (1993). Estimation and Tracking: Principles, Techniques and Software.
Artech House, Boston.
Cambouropoulos, E. (2000). From MIDI to traditional musical notation. In Proceedings of the AAAI
Workshop on Articial Intelligence and Music: Towards Formal Models for Composition, Performance and Analysis, Austin, Texas.
Carter, C. K., & Kohn, R. (1996). Markov Chain Monte Carlo in conditionally Gaussian state space
models. Biometrika, 83 (3), 589{601.
Casella, G., & Robert, C. P. (1996). Rao-Blackwellisation of sampling schemas. Biometrika, 83,
81{94.
Cemgil, A. T., Desain, P., & Kappen, H. J. (2000). Rhythm quantization for transcription. Computer
Music Journal, 24:2, 60{76.
Cemgil, A. T., & Kappen, H. J. (2002). Rhythm quantization and tempo tracking by sequential
Monte Carlo. In Dietterich, T. G., Becker, S., & Ghahramani, Z. (Eds.), Advances in Neural
Information Processing Systems 14. MIT Press.
Cemgil, A. T., Kappen, H. J., Desain, P., & Honing, H. (2001). On tempo tracking: Tempogram
representation and Kalman ltering. Journal of New Music Research, 28:4, 259{273.
Chen, R., & Liu, J. S. (2000). Mixture Kalman lters. J. R. Statist. Soc., 10.
79

Cemgil & Kappen
Dannenberg, R. (1984). An on-line algorithm for real-time accompaniment. In Proceedings of ICMC,
pp. 193{198, San Francisco.
Desain, P., & Honing, H. (1991). Quantization of musical time: a connectionist approach. In Todd,
P. M., & Loy, D. G. (Eds.), Music and Connectionism., pp. 150{167. MIT Press., Cambridge,
Mass.
Desain, P., & Honing, H. (1994). A brief introduction to beat induction. In Proceedings of ICMC,
San Francisco.
Dixon, S., & Cambouropoulos, E. (2000). Beat tracking with musical knowledge. In Horn, W. (Ed.),
Proceedings of ECAI 2000 (14th European Conference on Articial Intelligence), Amsterdam.
Doucet, A., & Andrieu, C. (2001). Iterative algorithms for state estimation of jump Markov linear
systems. IEEE Trans. on Signal Processing, 49 (6), 1216{1227.
Doucet, A., de Freitas, N., & Gordon, N. J. (Eds.). (2001). Sequential Monte Carlo Methods in
Practice. Springer-Verlag, New York.
Doucet, A., de Freitas, N., Murphy, K., & Russell, S. (2000a). Rao-Blackwellised particle ltering
for dynamic Bayesian networks. In Uncertainty in Articial Intelligence.
Doucet, A., Godsill, S., & Andrieu, C. (2000b). On sequential Monte Carlo sampling methods for
Bayesian ltering. Statistics and Computing, 10 (3), 197{208.
Fox, D., Burgard, W., & Thrun, S. (1999). Markov localization for mobile robots in dynamic
environments. Journal of Articial Intelligence Research (JAIR), 11.
Ghahramani, Z., & Hinton, G. (1998). Variational learning for switching state-space models. Neural
Computation, 12 (4), 963{996.
Ghahramani, Z., & Hinton, G. E. (1996). Parameter estimation for linear dynamical systems. (crgtr-96-2). Tech. rep., University of Totronto. Dept. of Computer Science.
Godsill, S., Doucet, A., & West, M. (2001). Maximum a posteriori sequence estimation using Monte
Carlo particle lters. Annals of the Institute of Statistical Mathematics, 52 (1), 82{96.
Gordon, N. J., Salmond, D. J., & Smith, A. F. M. (1993). Novel approach to nonlinear/nonGaussian Bayesian state estimation. In IEE Proceedings Part F, Radar and Signal Processing,
Vol. 140(2), pp. 107{113.
Goto, M., & Muraoka, Y. (1998). Music understanding at the beat level: Real-time beat tracking
for audio signals. In Rosenthal, D. F., & Okuno, H. G. (Eds.), Computational Auditory Scene
Analysis.
Grubb, L. (1998). A Probabilistic Method for Tracking a Vocalist. Ph.D. thesis, School of Computer
Science, Carnegie Mellon University, Pittsburgh, PA.
Hamanaka, M., Goto, M., Asoh, H., & Otsu, N. (2001). A learning-based quantization: Estimation of
onset times in a musical score. In Proceedings of the 5th World Multi-conference on Systemics,
Cybernetics and Informatics (SCI 2001), Vol. X, pp. 374{379.
Heijink, H., Desain, P., & Honing, H. (2000). Make me a match: An evaluation of dierent approaches
to score-performance matching. Computer Music Journal, 24(1), 43{56.
Heskes, T. Zoeter, O. (2002). Expectation propagation for approximate inference in dynamic
Bayesian networks. In Proceedings UAI.
Isard, M., & Blake, A. (1996). Contour tracking by stochastic propagation of conditional density.
In ECCV (1), pp. 343{356.
Large, E. W., & Jones, M. R. (1999). The dynamics of attending: How we track time-varying events.
Psychological Review, 106, 119{159.
Liu, J. S., Chen, R., & Logvinenko, T. (2001). A theoretical framework for sequential importance
sampling with resaampling. In Doucet, A., de Freitas, N., & Gordon, N. J. (Eds.), Sequential
Monte Carlo Methods in Practice, pp. 225{246. Springer Verlag.
80

Monte Carlo Methods for Tempo Tracking and Rhythm Quantization
Longuet-Higgins, H. C. (1987). Mental Processes: Studies in Cognitive Science. MIT Press, Cambridge. 424p.
Marthi, B., Pasula, H., Russell, S., & Peres, Y. (2002). Decayed MCMC ltering. In Proceedings of
UAI.
Metropolis, N., Rosenbluth, A., Rosenbluth, M., Teller, A., & Teller, E. (1953). Equations of state
calculations by fast computing machines. Journal of Chemical Physics, 21, 1087{1091.
Metropolis, N., & Ulam, S. (1949). The Monte Carlo method. Journal of the American Statistical
Assoc., 44(247), 335{341.
Murphy, K. P. (2002). Dynamic Bayesian Networks: Representation, Inference and Learning. Ph.D.
thesis, University of California, Berkeley.
Pressing, J., & Lawrence, P. (1993). Transcribe: A comprehensive autotranscription program.. In
Proceedings of the International Computer Music Conference, pp. 343{345, Tokyo. Computer
Music Association.
Rabiner, L. R. (1989). A tutorial in hidden Markov models and selected applications in speech
recognation. Proc. of the IEEE, 77 (2), 257{286.
Raphael, C. (2001a). A mixed graphical model for rhythmic parsing. In Proc. of 17th Conf. on
Uncertainty in Artif. Int. Morgan Kaufmann.
Raphael, C. (2001b). A probabilistic expert system for automatic musical accompaniment. Journal
of Computational and Graphical Statistics, 10 (3), 467{512.
Roberts, G. O., & Rosenthal, J. S. (1998). Markov Chain Monte Carlo: Some practical implications
of theoretical results. Canadian Journal of Statistics, 26, 5{31.
Scheirer, E. D. (1998). Tempo and beat analysis of acoustic musical signals. Journal of Acoustical
Society of America, 103:1, 588{601.
Shumway, R. H., & Stoer, D. S. (1982). An approach to time series smoothing and forecasting
using the em algorithm. J. Time Series Analysis, 3 (4), 253{264.
Tanizaki, H. (2001). Nonlinear and non-Gaussian state-space modeling with Monte Carlo techniques:
A survey and comparative study. In Rao, C., & Shanbhag, D. (Eds.), Handbook of Statistics,
Vol.21: Stochastic Processes: Modeling and Simulation. North-Holland.
Thom, B. (2000). Unsupervised learning and interactive jazz/blues improvisation. In Proceedings of
the AAAI2000. AAAI Press.
Toiviainen, P. (1999). An interactive midi accompanist. Computer Music Journal, 22:4, 63{75.
Vercoe, B., & Puckette, M. (1985). The synthetic rehearsal: Training the synthetic performer. In
Proceedings of ICMC, pp. 275{278, San Francisco. International Computer Music Association.
Vercoe, B. L., Gardner, W. G., & Scheirer, E. D. (1998). Structured audio: Creation, transmission,
and rendering of parametric sound representations. Proc. IEEE, 86:5, 922{940.

81

