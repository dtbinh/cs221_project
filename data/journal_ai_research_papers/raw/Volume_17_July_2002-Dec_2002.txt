Journal of Articial Intelligence Research 17 (2002) 451-499

Submitted 12/00; published 12/02

Policy Recognition in the Abstract Hidden Markov Model
buihh@cs.curtin.edu.au
svetha@cs.curtin.edu.au
geoff@cs.curtin.edu.au

Hung H. Bui
Svetha Venkatesh
Geo West
Department of Computer Science
Curtin University of Technology
PO Box U1987, Perth, WA 6001, Australia

Abstract

In this paper, we present a method for recognising an agent's behaviour in dynamic,
noisy, uncertain domains, and across multiple levels of abstraction. We term this problem
and view it generally as probabilistic inference on
the stochastic process representing the execution of the agent's plan. Our contributions in
this paper are twofold. In terms of probabilistic inference, we introduce the Abstract Hidden
Markov Model (AHMM), a novel type of stochastic processes, provide its dynamic Bayesian
network (DBN) structure and analyse the properties of this network. We then describe
an application of the Rao-Blackwellised Particle Filter to the AHMM which allows us to
construct an eÆcient, hybrid inference method for this model. In terms of plan recognition,
we propose a novel plan recognition framework based on the AHMM as the plan execution
model. The Rao-Blackwellised hybrid inference for AHMM can take advantage of the
independence properties inherent in a model of plan execution, leading to an algorithm for
online probabilistic plan recognition that scales well with the number of levels in the plan
hierarchy. This illustrates that while stochastic models for plan execution can be complex,
they exhibit special structures which, if exploited, can lead to eÆcient plan recognition
algorithms. We demonstrate the usefulness of the AHMM framework via a behaviour
recognition system in a complex spatial environment using distributed video surveillance
data.
on-line plan recognition under uncertainty

1. Introduction

Plan recognition is the problem of inferring an actor's plan by watching the actor's actions
and their eects. Often, the actor's behaviour follows a hierarchical plan structure. Thus,
in plan recognition, the observer needs to infer about the actor's plans and sub-plans at
dierent levels of abstraction in its plan hierarchy. The problem is complicated by the two
sources of uncertainty inherent in the actor's planning process: (1) the stochastic aspect of
plan renement (a plan can be non-deterministically rened into dierent sub-plans), and
(2) the stochastic outcomes of actions (the same action can non-deterministically result in
dierent outcomes). Furthermore, the observer has to deal with a third source of uncertainty
arising from the noise and inaccuracy in its own observation about the actor's plan. In
addition, we would like our observer to be able to perform the plan recognition task \online" while the observations about the actor's plan are streaming in. We refer to this general
problem as on-line plan recognition under uncertainty.
c 2002 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Bui, Venkatesh & West
The seminal work in plan recognition (Kautz & Allen, 1986) considers a plan hierarchy,
but does not deal with the uncertainty aspects of the problem. As a result, the approach
can only postulate a set of possible plans for the actor, but is unable to determine which
plan is more probable. Since then, the important role of uncertainty reasoning in plan
recognition has been recognised (Charniak & Goldman, 1993; Bauer, 1994; van Beek, 1996),
and Bayesian probability has been argued as the appropriate model (Charniak & Goldman,
1993; van Beek, 1996). The dynamic, \on-line" aspect of plan recognition has only been
recently considered (Pynadath & Wellman, 1995, 2000; Goldman, Geib, & Miller, 1999;
Huber, Durfee, & Wellman, 1994; Albrecht, Zukerman, & Nicholson, 1998). All of this
recent work shares the view that online plan recognition is largely a problem of probabilistic
inference in a stochastic process that models the execution of the actor's plan. While this
view oers a general and coherent framework for modelling dierent sources of uncertainty,
the stochastic process that we need to deal with can become quite complex, especially if we
consider a large plan hierarchy. Thus, the main issue here is the computational complexity
for dealing with this type of stochastic processes, and whether the complexity is scalable to
more complex plan hierarchies.
1.1 Aim and Signicance

In this paper, we demonstrate that the type of plan recognition problems described above
scales reasonably well with respect to the number of levels of abstraction in the plan hierarchy. This is in contrast to the common-sense analysis that more levels in the plan
hierarchy would introduce more variables to the stochastic process, which in turn, results
in exponential complexity w.r.t the number of levels in the hierarchy.
In order to achieve this, we rst assume a general stochastic model of plan execution
that can model the three sources of uncertainty involved. The model for planning with
a hierarchy of abstraction under uncertainty has been developed recently by the abstract
probabilistic planning community (Sutton, Precup, & Singh, 1999; Parr & Russell, 1997;
Forestier & Varaiya, 1978; Hauskrecht, Meuleau, Kaelbling, Dean, & Boutilier, 1998; Dean
& Lin, 1995). To our advantage, we adopt their basic model, known as the abstract Markov
policies (AMP) 1 as our model for plan execution. The AMP is an extension of a policy
in Markov Decision Processes (MDP) that enables an abstract policy to invoke other more
rened policies and so on down the policy hierarchy. Thus, the AMP is similar to a contingent plan that prescribes which sub-plan should be invoked at each applicable state of the
world to achieve its intended goal, except that it can represent both the uncertainty in the
plan renement and in the outcomes of actions. Since an AMP can be described simply in
terms of a state space and a Markov policy that selects among a set of other AMP's, using
the AMP as the model for plan execution also helps us focus on the structure of the policy
hierarchy.
The execution of an AMP leads to a special stochastic process which we called the
Abstract Markov Model (AMM). The noisy observation about the environment state (e.g.,
the eects of action) can then be modelled by making the state \hidden", similar to the
hidden state in the Hidden Markov Models (Rabiner, 1989). The result is an interesting and
novel stochastic process which we term the Abstract Hidden Markov Model. Intuitively, the
1. Also known as options, policies

, or supervisor's

of Abstract Markov Decision Processes

452

policies

.

Policy recognition in the Abstract Hidden Markov Model
AHMM models how an AMP causes the adoption of other policies and actions at dierent
levels of abstraction, which in turn generate a sequence of states and observations. In the
plan recognition task, an observer is given an AHMM corresponding to the actor's plan
hierarchy, and is asked to infer about the current policy being executed by the actor at all
levels of the hierarchy, taking into account the sequence of observations currently available.
This amounts to reversing the direction of causality in the AHMM, i.e. to determine a set
of policies that can explain the sequence of observations at hand. We shall refer to this
problem as policy recognition.
Viewing the AHMM as a type of dynamic Bayesian network (Dean & Kanazawa, 1989;
Nicholson & Brady, 1992), it is known that the complexity of this kind of inferencing in the
DBN depends on the size of the representation of the so-called belief state, the conditional
joint distribution of the variables in the DBN at time t given the observation sequence up
to t (Boyen & Koller, 1998). Thus we can ask the following question: how does the policy
hierarchy aect the size of the belief state representation of the corresponding AHMM?
Generally, for a policy hierarchy with K levels, the belief state would have at least
K variables and thus the size of their joint distribution would be O(exp(K )). However,
the AHMM has a specic network structure that exhibits certain conditional independence
properties among its variables which can be exploited for eÆciency. We rst identify these
useful independence properties in the AHMM and show that there is a compact representation of the special belief state in the case where the state sequence can be correctly observed
(full observability assumption) and the starting and ending time of each policy is known.
Consequently, policy recognition in this case can be performed very eÆciently by updating
the AHMM compact belief state. This partial result, although too restricted to be useful by
itself, leads to an important observation about the general belief state: although it cannot
be represented compactly, it can be approximated eÆciently by a collection of compact special belief states. This makes the inference problem in the AHMM particularly amenable
to a technique called Rao-Blackwellisation (Casella & Robert, 1996) which allows us to
construct hybrid inference methods that combine both exact inference and approximate
sampling-based inference for greater eÆciency. The application of Rao-Blackwellisation to
the AHMM structure reduces the sampling space that we need to approximate to a space
with xed dimension that does not depend on K , ensuring that the hybrid inference algorithm scales well w.r.t K .
The contributions of the paper are thus twofold. In terms of stochastic processes and
dynamic Bayesian networks, we introduce the AHMM, a novel type of stochastic processes,
provide its DBN structure and analyse the properties of this network. We present an application of the Rao-Blackwellised Particle Filter to the AHMM which results in an eÆcient
hybrid inference method for this stochastic model. In terms of plan recognition, we propose
a novel plan recognition framework based on probabilistic inference using the AHMM as the
plan execution model. The complexity of the inference problem is addressed by applying
a range of recently developed techniques in probabilistic reasoning to the plan recognition
problem. Our work illustrates that while the stochastic models for plan execution can be
complex, they exhibit certain special structures that can be exploited to construct eÆcient
plan recognition algorithms.

453

Bui, Venkatesh & West
1.2 Structure of the Paper

The main body of the paper is organised as follows. Section 2 introduces the background
material in dynamic Bayesian networks and probabilistic inference. Section 3 formally denes the abstract Markov policy and the policy hierarchy. Section 4 presents the AHMM,
its DBN representation and conditional independence properties. The algorithms for policy recognition are discussed in Section 5, rst for the special tractable case and then for
the general case. Section 6 presents our experimental results with the AHMM framework,
including a real-time system for recognising people behaviour in a complex spatial environment using distributed video surveillance data. Section 7 provides a comparative review of
related work in probabilistic plan recognition. Finally, we conclude and discuss directions
for further research in Section 8.
2. Background in Probabilistic Inference

The aim of this section is to familiarise readers with some concepts in probabilistic inference
that will be used later on in the paper. In subsections 2.1 and 2.2, we discuss Bayesian
Networks (BN) and Dynamic Bayesian Networks (DBN) in general. In subsection 2.3,
we discuss the Sequential Importance Sampling (SIS) algorithm, a general approximate
sampling-based inference method for dynamic models. Subsections 2.4 and 2.5 introduce
Rao-Blackwellisation, a technique for improving sampling-based methods by utilising certain
special structures of the dynamic model. Later on, Rao-Blackwellisation will be used as our
key computational technique for performing policy recognition.
2.1 Bayesian Networks

The Bayesian network (BN) (Pearl, 1988; Jensen, 1996; Castillo, Gutierrez, & Hadi, 1997)
(also known as probabilistic network or belief network) is a well-established framework for
dealing with uncertainty. It provides a graphical and compact representation of the joint
probability distribution of a set of domain variables X1; : : : Xn in the form of a directed
acyclic graph (DAG) whose nodes correspond to the domain variables. For each node
Xi , the links from the parent nodes P a(Xi ) are parameterised by the conditional probability of that node given the parents Pr(Xi j P a(Xi )). The network structure together
with the parameters
encode a factorisation of the joint probability distribution (JPD)
Q
n
Pr(X1 ; : : : Xn) = i=1 Pr(Xi j P ai). Given a Bayesian network, conditional independence
statements of the form X ? Y j Z (X is independent of Y given Z, where X; Y; Z are variables or sets of variables) can be asserted if X is d-separated from Y by Z in the network
structure, where d-separation is a graph separation concept for DAGs (Pearl, 1988). The
network structure of a BN thus captures certain conditional independence properties among
the domain variables which can be exploited for eÆcient inference.
The main inference task on a Bayesian network is to calculate the conditional probability
of a set of variables given the values of another set of variables (the evidence). There are
two types of computation techniques for doing this. Exact inference algorithms (Lauritzen
& Spiegelhalter, 1988; Jensen, Lauritzen, & Olesen, 1990; D'Ambrosio, 1993) compute
the exact value of the conditional probability required based on analytical transformation
that exploits the conditional independence relationships of the variables in the network.

454

Policy recognition in the Abstract Hidden Markov Model
Approximative inference algorithms (Pearl, 1987; York, 1992; Henrion, 1988; Fung & Chang,
1989; Shachter & Peot, 1989) compute only an approximation of the required probability,
usually obtained either through \forward" sampling (Henrion, 1988; Fung & Chang, 1989;
Shachter & Peot, 1989) (a variance of Bayesian Importance Sampling (Geweke, 1989)), or
through Gibbs (Monte-Carlo Markov-Chain) sampling (Pearl, 1987; York, 1992). These
algorithms have the advantages of simple implementation, can be applied to all types of
network, and can trade o the accuracy in the estimates for computation resources. It is
known that exact inference in BN is NP-hard with respect to the network size (Cooper,
1990), while approximate inference, although scales well with the network size, is NP-hard
with respect to the hard-bound accuracy of the estimates (Dagum & Luby, 1993). In the
light of these theoretical results, approximate inference can be useful in large networks when
exact computation is intractable, but a certain degree of error in the probability estimate
can be tolerated by the application.
2.2 Dynamic Bayesian Networks

To model the temporal dynamics of the environment, the Dynamic Bayesian Network
(DBN) (Dean & Kanazawa, 1989; Nicholson & Brady, 1992; Dagum, Galper, & Horvitz,
1992) is a special Bayesian network architecture for representing the evolution of the domain variables over time. A DBN consists of a sequence of time-slices where each time-slice
contains a set of variables representing the state of the environment at the current time.
A time-slice is in itself a Bayesian network, with the same network structure replicated at
each time-slice. The temporal dynamics of the environment is encoded via the network links
from one time-slice to the next. In addition, each time-slice can contain observation nodes
which model the (possibly noisy) observation about the current state of the environment.
Given a DBN and a sequence of observations, we might want to draw predictions
about the future state variables (predicting), or about the unobserved variables in the
past (smoothing) (Kjaerul, 1992). This problem can be solved using an inference algorithm for Bayesian networks described above. However, if we want to revise the prediction
as the observations arrive over time, reapplying the inference algorithm each time the observation sequence changes could be costly, especially as the sequence grows. To avoid this,
we need to keep the joint distribution of all the variables in the current time-slice, given
the observation sequence up to date. This probability distribution is termed the belief state
(also known as the ltering distribution) and plays an important role in inferencing in the
DBN. All existing inference schemes for the DBN involve maintaining and updating the
belief state (i.e., ltering). When a new observation is received, the current belief state is
rolled over one time-slice ahead following the evolution model, then conditioned on the new
observation to obtain the updated belief state.
An obvious problem with this approach is the size of the belief state that we need to
maintain. It has been noted that while the interaction of the variables in the DBN is
localised, the variables in the belief state can be highly connected (Boyen & Koller, 1998).
This is because the marginalisation of the past time-slices usually destroys the conditional
independence of the current time-slice. When the size of the belief state is large, exact
inference methods like (Kjrul, 1995) is intractable, and it becomes necessary to maintain
only an approximation of the actual belief state, either in the form of an approximate

455

Bui, Venkatesh & West
distribution that can be represented compactly (Boyen & Koller, 1998), or in the form of
a set of weighted samples as in the Sequential Monte-Carlo Sampling methods (Doucet,
Godsill, & Andrieu, 2000b; Kanazawa, Koller, & Russell, 1995; Liu & Chen, 1998).
The most simple case of the DBN where, in each time-slice, there is only a single state
variable and an observation node, is the well-known Hidden Markov Model (HMM) (Rabiner, 1989). Filtering in this simple structure can be solved using dynamic programming in the discrete HMM (Rabiner, 1989), or Kalman ltering in the linear Gaussian
model (Kalman, 1960). More recently, extensions of the HMM with multiple hidden interacting chains such as the Coupled Hidden Markov Models (CHMM) and the Factorial
Hidden Markov Models (FHMM) have been proposed (Brand, 1997; Ghahramani & Jordan,
1997; Jordan, Ghahramani, & Saul, 1997). In these models, the size of the belief state is
exponential in the number of hidden chains. Therefore, the inference and parameter estimation problems become intractable if the number of hidden chains is large. For this reason,
approximate techniques are required. CHMM (Brand, 1997) employs a deterministic approximation that approximates full dynamic programming by keeping only a xed number
of \heads" with highest probabilities. The \heads" are thus chosen deterministically rather
than randomly as in sampling-based methods. FHMM (Ghahramani & Jordan, 1997; Jordan et al., 1997) uses variational approximation (Jordan, Ghahramani, Jaakkola, & Saul,
1999) which approximates the full FHMM structure by a sparsied tractable structure. This
idea is similar to the structured approximation method in (Boyen & Koller, 1998).
Our AHMM can be viewed as a type of Coupled/Factorial HMM since the AHMM
also consists of a number of interacting chains. However the type of interaction in our
AHMM is dierent from the other types of interaction that have been considered (Brand,
1997; Jordan et al., 1997; Ghahramani & Jordan, 1997). This is because the main focus
of the AHMM is the dynamics of temporal abstraction among the chains, rather than the
correlation between them at the same time interval. In addition, each node in the AHMM
has a specic meaning (policy, state, or policy termination status), and the links have a
clear causal interpretation based on the policy selection and persistence model. This is in
contrast to the Coupled/Factorial HMM where the nodes and links usually do not have
any clear semantic/causal interpretation. The advantage is that prior knowledge about the
temporal decomposition of an abstract process can be incorporated in the AHMM more
naturally.
2.3 Sequential Importance Sampling (SIS)

Sequential Importance Sampling (SIS) (Doucet et al., 2000b; Liu & Chen, 1998), also
known as Particle Filter (PF), is a general Monte-Carlo approximation scheme for dynamic
stochastic models. In principle, the SIS method is the same as the so-called Bayesian
Importance Sampling (BIS) estimator
R in the static case (Geweke, 1989). Suppose that we
want to estimate the quantity f = f (x)p(x)dx, i.e., the mean of f (x) where x is a random
variable with density p. Note that if f is taken as the identity function of an event A
then f is simply Pr(A). Let q(x) be an arbitrary2 density function, termed the importance
distribution. Usually, the importance distribution q is chosen so that is it easy to obtain
2. For the weight to be properly dened, the support of q has to be a subset of the support of p.

456

Policy recognition in the Abstract Hidden Markov Model
random samples from it. The expectation under estimation can then be rewritten as:
R [f (x)p(x)=q(x)]q(x)dx Eq f (x)p(x)=q(x)
f = R
[p(x)=q(x)]q(x)dx = Eq p(x)=q(x)
From this expression, the BIS estimator w.r.t q can be obtained:
f  f^BIS =

1

N

PNi=1 f (x(i))w_ (x(i) ) X
N
= f (x(i))w~(x(i) )
1 PN w_ (x(i) )
i=1
i=1

N

where fx(i) g are the N i.i.d samplesPtaken from q(x), w_ (x) = p(x)=q(x) and w~ is the
normalised weight w~(x(i) ) = w_ (x(i) )= i w_ (x(i) ). Note that the normalised weight can be
computed from any weight function w(x) / w_ (x), i.e., the weight function need only be
computed up to a normalising constant factor. R
In the dynamic case, we want to estimate f = x~t f (~xt)p(~xt jo~t ) where x~t = (x0 ; : : : ; xt )
and o~t = (o0; : : : ; ot ) are two sequences of random variables; ot represents the observation
available to us at time t. Often, (~xt ) is a Markov sequence and ot is the observation of xt
as in a HMM. In a DBN, xt corresponds to the set of state variables and ot corresponds to
the set of observations at time-slice t. The SIS method presented here however applies to
the most general case where (~xt ) can be non-Markov, and ot not only depends on xt.
We now can introduce the importance distribution q(~xt jo~t ) to obtain the estimator:
f  f^SIS

=

N
X
f (~
x(i) )w~ (~x(i) )
i=1

t

t

(1)

To ensure that we can obtain sample from q(~xtjo~t ) \online", i.e., to sample a new value
xt for the sequence x~t when the current observation ot arrives, q must be restricted to the
form:
q(~xt jo~t ) = q(~
xt 1 jo~t 1 )q(xt jx~t 1 ; o~t )
With this restriction on q, we can use the weight function w(~xt ) = p(~xt ; o~t )=q(~xt jo~t ) so that
the weight can also be updated \online" using:
w(~xt ) = w(~
xt 1 )p(xt ; ot jx~t 1 ; o~t 1 )=q(xt jx~t 1 ; o~t )
(2)
Let wt = w(~xt )=w(~xt 1 ) be the weight updating factor at time t, and qt = q(xt jx~t 1 ; o~t )
be the sampling distribution used at time t. From (2) we have
wt qt = p(xt ; ot jx~t 1 ; o~t 1 )
(3)
which means that p(xt ; ot jx~t 1 ; o~t 1 ) is factorised into two parts: wt and qt . By choosing dierent factorisations, we obtain dierent forms for qt and thus dierent important
distributions q. For example, when (~xt ; o~t ) is a HMM, qt can be chosen as p(xt jxt 1 )
with wt = p(ot jxt ) as in the likelihood weighting (LW) method, or qt can be chosen as
p(xt jxt 1 ; ot ) with wt = p(ot jxt 1 ) as in the likelihood weighting with evidence reversal (LW-ER) (Kanazawa et al., 1995). In general, the \forward" qt can be chosen as
p(xt jx~t 1 ; o~t 1 ) with the corresponding weight wt = p(ot jx~t ; o~t 1 ). The \optimal" qt , in

457

Bui, Venkatesh & West
the sense discussed in (Doucet et al., 2000b), is chosen as qt = p(xtjx~t 1 ; o~t ) with the
associating wt = p(ot jx~t 1 ; o~t 1 ).
The general SIS approximation scheme is thus as follows. At time t 1, we maintain N
sample sequences fx~(ti)1 g and the N corresponding weight values fw(i) g. When the current
observation ot arrives, each sequence x~(ti)1 is lengthened by a new value x(ti) sampled from
the distribution q(xt jx~(ti)1 ; o~t ). The weight value for x~(ti) is then updated using (2). Once
the new samples and the new weights are obtained, the expectation of any functional f can
be estimated using (1). This procedure can be furthered enhanced with a re-sampling step
and a Markov-chain sampling step (see Doucet et al. (2000b), Doucet, de Freitas, Murphy,
and Russell (2000a)). We do not describe these important improvements of the SIS here.3
2.4 Rao-Blackwellisation

Rao-Blackwellisation is a general technique for improving the accuracy of sampling methods
by analytically marginalising some variables and only sampling the remainder (Casella &
Robert, 1996). In its simplest form, consider the problem of estimating the expectation
E f (x), where x is a joint product of two
P variables r; z. Using direct Monte-Carlo sampling, we obtain the estimator: f^ = N1 N1 f (r(i); z(i) ). Alternatively, a Rao-Blackwellised
estimator can be derived by sampling only the variable r, with the other variable z being
integrated out analytically:
N
X
E f (r; z) = Er h(r)  f^RB = N1 h(r(i) )

1

where h(r) = Ez [f (r; z)jr]. For our convenience, r will be referred to as the Rao-Blackwellising
variable.
The Rao-Blackwellised estimator f^RB is generally more accurate than f^ for the same
number of samples N . This is a direct consequence of the Rao-Blackwell theorem which
gives the relationship between unconditional and conditional variance:
VAR X = VAR[E[X jY ]] + E[VAR[X jY ]]
When applying to the problem of estimating E f (r; z), we have:
VAR f (r; z) = VAR[E[f (r; z)jr]] + E[VAR[f (r; z)jr]]
and thus VAR f (r; z)  VAR[E[f (r; z)jr]] = VAR h(r). This suggests that for direct MonteCarlo sampling, the error of RB-sampling (sample only r and marginalise z) is always
smaller than the error of sampling both r and z for the same number of samples, except in
the degenerated case. For Bayesian Importance Sampling, using the variance convergence
result from (Geweke, 1989), one can also easily prove that as the number of samples tend to
innity, the RB-BIS would generally do better than BIS for the same number of samples.
3. Note that these improvements can be used orthogonal to the Rao-Blackwellisation procedure discussed
subsequently. Our implementation of the policy recognition algorithm in the later sections does include
a re-sampling step, which is crucial for keeping the error of SIS over time under control.

458

Policy recognition in the Abstract Hidden Markov Model
2.5 SIS with Rao-Blackwellisation (RB-SIS)

Since SIS is a form of BIS, Rao-Blackwellisation can also be used to improve its performance (Liu & Chen, 1998; Doucet
et al., 2000b). Let us consider again the problem of
R

estimating the expectation f = f (~xt)p(~xt jo~t ), where each variable xt is the joint product
of two variables (zt ; rt ). We shall restrict ourselves to the case where x~t is Markov and
ot is an observation of xt , i.e., when (~
xt ; o~t ) can be represented by a DBN. In addition,
we only consider f that depends only on the current variable xt , i.e., f is an expectation
over the ltering distribution p(xt jo~t ). For example, if A is a \future" event, i.e., an event
that Rdepends on fxt0 jt0  tg, we can estimate p(Ajo~t ) by letting f (xt) = p(Ajxt ) so that
f = xt p(Ajxt )p(xt jo~t ) = p(Ajo~t ).
R f (zt; rt)p(ztjr~t; o~t),
Applying Rao-Blackwellisation
to
this
setting,
we
can
let
h
(~
r
)
=
t
zt
R
so that f = h = r~t h(~rt )p(~rt jo~t ). Thus, if we use SIS to estimate h , we also obtain an
estimator for f:
N
f  f^RBSIS = h^ SIS = X h(~rt(i) )w~(~rt(i) )
(4)
i=1

The benet of doing this is the increase in the accuracy of the estimator, as we now
only need to sample the variables r~t . The down side is that for each sample r~t , we need
to compute h(~rt ) using some exact inference method. Furthermore, the SIS procedure to
estimate h might require some additional complexity since the sequence r~t is generally nonMarkov, and ot no longer depends only on rt . Overall, in comparison with the normal SIS
estimator f^SIS (Eq. 1), for the same number of samples N , f^RBSIS is more accurate but is
also more computationally demanding to compute.
To see more clearly what is involved in implementing the RB-SIS method, let us look
at the Rao-Blackwellised belief state, i.e., the belief state of the dynamic process when the
Rao-Blackwellising variables can be observed: Rt = p(zt ; rt ; ot jr~t 1 ; o~t 1 ) and its posterior
Rt+ = p(zt jr~t ; o~t ). All the entities needed in the RB-SIS procedure can be computed from
these two distributions. Indeed, the functional h can be rewritten in terms of Rt+ as:
h(~rt ) =

Z

zt

f (zt ; rt )p(zt jr~t ; o~t ) =

Z

zt

f (zt ; rt )Rt+ (zt )

In addition, while performing SIS to estimate h , from Eq. (3), the weight
sampling distribution qt can be computed from Rt :
wt qt = p(rt ; ot jr~t 1 ; o~t 1 ) = Rt (rt ; ot ) =

Z

zt

Rt (zt ; rt ; ot )

(5)
wt

and the
(6)

Thus, computing the RB belief state Rt and its posterior Rt+ is an essential step in
the RB-SIS method. Since we have to maintain an RB belief state for each sample of
the RB variables r~t, it is crucial that this can be done eÆciently using an exact inference
method. If xt is composed of many variables, as in the case of a DBN, our choice of the
Rao-Blackwellising variables should be so that the Rao-Blackwellised belief state can be
maintained in a tractable way. Hence, Rao-Blackwellisation is especially useful when the
set of variables in a DBN can be split into two parts such that conditioning on the rst part
makes the structure of the second part tractable and amenable to exact inference.

459

Bui, Venkatesh & West
Begin
For t = 0; 1; : : :
For each sample i = 1; : : : ; N
Sample rti from Rti (rt jot )
Update weight w i = w i Rti (ot)
Compute the posterior RB bel state Rti = Rti (ztjrti ; ot)
Compute the new RB belief state Rti from Rti
Compute h i from Rti
Compute the estimator f^RBSIS = PNi h i w~ i
End
( )

( )

( )

( )

( )

( )
+

( )

( )

( )
+1

( )
+

=1

( )

( )

( )
+

( )

Figure 1: RB-SIS for general DBN
The general RB-SIS algorithm is given in Fig. 1. For illustrating purpose, we assume
that the \optimal" qt and the corresponding wt are being used (qt = Rt (rt jot ) and wt =
Rt (ot )). At each time point, we need to maintain N samples r~t(i) , i = 1; : : : ; N . For each
sample, in addition to the sample weight w(i) , we also need to store a representation of the
RB belief state corresponding to that sample sequence: R(ti) = p(rt; zt ; ot jr~t(i)1 ; o~t 1 ) and
R(t+i) = p(zt jr~t(i) ; o~t ).
A number of applications of the RB-SIS method (also known as the Rao-Blackwellised
Particle Filter (RBPF)) have been discussed in the literature. A general framework for
using RB-SIS to do inference on DBNs has been presented by Doucet et al. (2000a), Murphy
(2000), Murphy and Russell (2001). However, these authors have mainly focused on the
case where the sequence of the Rao-Blackwellising variables (~rt ) is Markov (for example,
when the RB variables are the root nodes at each time slice). This assumption simplies
the sampling step in the RB procedure since obtaining the sample for the RB variable
at time t + 1 is straightforward. In our previous work (Bui, Venkatesh, & West, 2000),
we introduced a hybrid-inference method for the AHMM in the special case of the statespace decomposition policy hierarchy, which is essentially an RB-SIS method. Note that
when applied to AHMMs, the sequence of Rao-Blackwellising variables that we use does not
satisfy the Markov property. In this case, care must be taken to design an eÆcient sampling
step, especially when the sampling distribution for the next RB variable does not have a
tractable form. The use of non-Markov RB variables also appears in other special models
such as the Bayesian missing data model (Liu & Chen, 1998), and the partially observed
Gaussian state space model (Andrieu & Doucet, 2000) where the RB belief state can be
maintained by a Kalman lter.
Since we have to make the Rao-Blackwellised belief state tractable, the context variables in the framework of context-specic independence (Boutilier, Friedman, Goldszmidt,
& Koller, 1996) can be used conveniently as Rao-Blackwellising variables (Murphy, 2000).
Indeed, since the context variable acts as a mixing gate for dierent Bayesian network structures, conditioning on these variables would simplify the structure of the remaining vari-

460

Policy recognition in the Abstract Hidden Markov Model
ables. Because of this property of the context variables, Boutilier et al. (1996) have suggested
to use them as the cut-set variables in the cut-set conditioning inference method (Pearl,
1988). The cut-set variables play a similar role to the Rao-Blackwellising variables in which
they help to simplify the structure of the remaining network. In Rao-Blackwellised sampling, instead of summing over all the possible values of the cut-set variables which can be
intractable, only a number of representative sampled values are used.
The idea of combining both exact and approximate inference in RB sampling is also
similar to the hybrid inference scheme described by Dawid, Kjrul, and Lauritzen (1995),
however it's unclear if RB sampling can be described using their model of communicating
belief universe. Also, Dawid et al. use hybrid inference mainly to do inference on networks
with a mixture of continuous and discrete variables, as opposed to RB whose goal is to
improve the sampling performance.
3. Abstract Markov Policies

In this section, we formally introduce the AMP concept as originating from the literature
of abstract probabilistic planning with MDPs (Sutton et al., 1999; Parr & Russell, 1997;
Forestier & Varaiya, 1978; Hauskrecht et al., 1998; Dean & Lin, 1995). The main motivation
in abstract probabilistic planning is to scale up MDP-based planning to problems with large
state space. It has been noted that a hierarchical organisation of policies can help reduce
the complexity of MDP-based planning, similar to the role played by the plan hierarchy
in classical planning (Sacerdoti, 1974). In comparison with a classical plan hierarchy, a
policy hierarchy can model dierent sources of uncertainty in the planning process such as
stochastic actions, uncertain action outcomes, and stochastic environment dynamics.
While the work in planning is concerned with nding the optimal policy given some
reward function, our work focuses on policy recognition which is the inverse problem, i.e., to
infer the agent's policies from watching the eects of the agent's actions. The two problems
however share a common element which is the model of a stochastic plan hierarchy. In policy
recognition, although it is possible to derive some information about the reward function
by observing the agent's behaviour, we choose not to do this, thus omitting from our model
the reward function and also the optimality notion. This leaves the model open to tracking
arbitrary agent's behaviours, regardless of whether they are optimal or not.
3.1 The General Model
3.1.1 Actions and Policies

In an MDP, the world is modelled as a set of possible states S , termed the state space. At
each state s, an agent has a set of actions A available, where each action a, if employed, will
cause the world to evolve to the next state s0 via a transition probability a (s; s0). An agent's
plan of actions is modelled as a policy that prescribes how the agent would choose its action
at each state. For a policy , this is modelled by a selection function  : S  A ! [0; 1]
where at each state s,  (s; a) is the probability that the agent will choose the action a. It
is easy to see that, given a xed policy P
, the resulting state sequence is a Markov chain
0
with transition probabilities Pr(s j s) = a  (s; a)a (s; s0). Thus, a policy can also be
viewed as a Markov chain through the state space.

461

Bui, Venkatesh & West
3.1.2 Local Policies

In the original MDP, behaviours are modelled at only two levels: the primitive action
level, and the plan level (policy). We would like to consider policies that select other
more rened policies and so on, down a number of abstraction levels. The idea is to form
intermediate-level abstract policies as policies dened over a local region of the state space,
having a certain terminating condition, and can be invoked and executed just like primitive
actions (Forestier & Varaiya, 1978; Sutton et al., 1999).
Denition 1 (Local policy). A local policy is a tuple  = hS; D; ; i where:
 S is the set of applicable states.
 D is the set of destination states.  : D ! (0; 1] is the stopping probabilities such
that  (d) = 1; 8 d 2 D n S .
  : S  A ! [0; 1] is the selection function. Given the current state s, (s; a) is the
probability that the action a is selected by the policy  at state s.
The set S models the local region over which the policy is applicable. S will be called the
set of applicable states, since the policy can start from any state in S . We shall assume here
that S is discrete, and thus shall not be concerned with the technical details in generalising
the AHMM formulation to the continuous state space case. The stopping condition of the
policy is modelled by a set of possible destination states D and a set of positive stopping
probabilities  (d); d 2 D where  (d) is the probability that the policy will terminate when
the current state is d. It is possible to allow the policy to stop at some state outside of
S , however, for all d 2 D n S we enforce the condition that  (d) = 1, i.e., d is a terminal
destination state. Sometimes, we might only want to consider policies with deterministic
stopping condition. In that case, every destination is a terminal destination: 8d 2 D,
 (d) = 1. Thus, for a deterministically terminating policy, we can ignore the redundant
parameter  , and need only specify the set of destinations D.
Given a starting state s 2 S , a local policy as dened above generates a Markov sequence of states according to its transition model. Each time a destination state d 2 D is
reached, the process stops with probability  (d). Since the process starts from within S ,
but terminates only in one of the states in D, the destination states play the role of the
possible exits out of the local region S of the state space.
When we want to make clear which policy is currently being referred to, we shall use
the subscripted notations S , D ,  ,  to denote the elements of the policy .
Fig. 2 illustrates how a local policy  can be visualised. Fig. 2(a) shows the set of
applicable states S , the set of destinations D, and a chain starting within S and terminating
in D. The Bayesian network in Fig. 2(b) provides the detailed view of the chain from start
to nish. The Bayesian network in Fig. 2(c) is the abstract view of the chain where we are
only interested in its starting and stopping states.
3.1.3 Abstract Policies

The local policy as dened above selects among the set of primitive actions. Similarly, but
more generally, we can dene higher level policies that select among a set of other policies.

462

Policy recognition in the Abstract Hidden Markov Model

π

π
S
s
s
d

d
0

1

2

s

d

T

D

(a)

(b)

(c)

Figure 2: Visualisation of a policy
Denition 2 (Abstract Policy).
Let  be a set of abstract policies. An abstract
policy  over the policies in  is a tuple hS ; D ;  ;  i where:
 S  [2S is the set of applicable states.
 D  [2D is the set of destination states.  : D ! (0; 1] is the set of stopping
probabilities.
  : S   ! [0; 1] is the selection function where  (s; ) is the probability that
 selects the policy  at the state s.
Note the recursiveness in denition 2 that allows an abstract policy to select among a set
of other abstract policies. At the base level, primitive actions are viewed as abstract policies
themselves. Since primitive actions always stop after one time-step, Da  Sa and  (d) =
1 8d 2 Da (Sutton et al., 1999). The idea that policies with suitable stopping condition
can be viewed just as primitive actions is rst made explicit in (Sutton, 1995), which
also introduces the  model for representing the stopping probabilities. Their subsequent
work (Sutton et al., 1999) introduces the abstract policy concept under the name options.
The execution of an abstract policy  is as follows. Starting from some state s, 
selects a policy  2  according to the distribution  (s; :). The selected policy  is then
executed until it is terminated in some state d 2 D . If d is also a destination state of 
(d 2 D ), the policy  stops with probability  (d). If  still continues, a new policy
0 2  is selected by  at d, which will be executed until its termination and so on (Fig. 3).
Some remarks about the representation of an abstract policy are needed here. Let
s 2 [2 S , we denote the subset of policies in  which are applicable at s by (s) =
f 2  j s 2 S g. For an abstract policy  to be well-dened, we have to make sure that
at each state s,  only selects among the policies that are applicable at s. Thus, the
selection function has to be such that  (s; ) > 0 only if  2 (s). This helps to keep
the specication of the selection function to a manageable size, even when the set of all
policies  to be chosen from can be large. In addition, the specication of the selection
function and the stopping probabilities can make use of factored representations (Boutilier,
Dearden, & Goldszmidt, 2000) in the case where the state space is the composite of a set
of relatively independent variables. This ensures that we still have a compact specication

463

Bui, Venkatesh & West

S’

S
s
π

D
d’
d

π’

Figure 3: A chain generated by an abstract policy
of the probabilities conditioned on the state variable, even though the state space can be
of high dimension.
3.1.4 Policy Hierarchy

Using abstract policies as the building blocks, we can construct a hierarchy of abstract
policies as follows:
Denition 3 (Policy hierarchy). A policy hierarchy is a sequence H = (0 ; 1 ; : : : ; K )
where K is the number of levels in the hierarchy, 0 is a set of primitive actions, and for
k = 1; : : : ; K , k is a set of abstract policies over the policies in k 1 .
When a top-level policy K is executed, it invokes a sequence of level-(K-1) policies, each
of which invokes a sequence of level-(K-2) policies and so on. A level-1 policy will invoke
a sequence of primitive actions which leads to a sequence of states. Thus, the execution
of K generates an overall state sequence (s0; s1 ; : : : ; st ; : : :) that terminates in one of the
destination states in DK . When K = 1 this sequence is simply a Markov chain (with
suitable stopping conditions). However, for K  2, it will generally be non-Markovian,
despite the fact that all the policies are Markov, i.e., they select the lower level policies
based solely on the current state (Sutton et al., 1999). This is because knowing the current
state st alone does not provide information about the current intermediate-level policies,
which can aect the selection of the next state st+1. Intuitively, this means that an agent's
behaviour to achieve a given goal is usually non-Markovian, since its choice of actions
depends not only on the current state, but also on the current intermediate intentions of
the agent.
We term the dynamical process in executing a top-level abstract policy K the Abstract
Markov Model (AMM). When the states are only partially observable, the observation can
be modelled by the usual observation model Pr(ot j st ) = !(st; ot ). The resulting process is
termed the Abstract Hidden Markov Model (AHMM) since the states are hidden as in the
Hidden Markov Model (Rabiner, 1989).
The idea of having a higher level policy controlling the lower level ones in an MDP
can be traced back to the work by Forestier and Varaiya (1978), who investigated a two
layer structure similar to our 2-level policy hierarchy with deterministic stopping condition.
Forestier and Varaiya showed that that the sub-process, obtained by sub-sampling the state

464

Policy recognition in the Abstract Hidden Markov Model

(a)

(b)

Figure 4: The environment and its partition
sequence at the time when the level-1 policy terminates, is also Markov, thus the policies
at level 1 simply play the role of an \extended" action. In our framework, given a policy
hierarchy, one can consider a \lifted" model where only the policies from level k up and the
observations at the time points when a policy at level k ends are considered. The level-k
policies can then be considered as primitive actions, and the lifted model can be treated
like a normal model.
3.2 State-Space Region-Based Decomposition

In some cases, the state space or some of its dimensions already exhibit a natural hierarchical
structure. For example, in the spatial domain, the set of ground positions can be divided
into small local spaces such as rooms, corridors, etc. A set of these local spaces can be
grouped together to form a larger space at the higher level (oors, buildings, etc). An
intuitive and often-used method for constructing the policy hierarchy in this case is via
the so-called region-based decomposition of the state space (Dean & Lin, 1995; Hauskrecht
et al., 1998). Here, the state space S is successively partitioned into a sequence of partitions
PK ; PK 1; :::P1 corresponding to the K levels of abstraction, where PK = fS g is the coarsest
partition, and P1 is the nest. For each region Ri of Pi, the periphery of Ri , P er(Ri) is
dened as the set of states not in Ri, but connected to some state in Ri. Let P eri be the
set of all peripheral states at level i: P eri = [Ri2Pi P er(Ri ). Fig. 4(b) shows an example
where the state space representing a building is partitioned into 4 regions corresponding to
the 4 rooms. The peripheral states for a region is shown in Fig 4(a), and Fig 4(b) shows all
such peripheral states.
To construct the policy hierarchy, we rst dene for each region R1 2 P1 a set of abstract
policies applicable on R1 , and having P er(R1) as the destination states. For example, for
each room in Fig 4, we can dene a set of policies that model the agent's dierent behaviours
while it is inside the room, e.g., getting out through a particular door. These policies can
be initiated from inside the room, and terminate when the agent steps out of the room
(not necessarily through the target door since the policy might fail to achieve its intended

465

Bui, Venkatesh & West
target). Note that since P er(R1 ) \ R1 = ;, all the policies dened in this manner have
deterministic stopping conditions.
Let the set of all policies dened be 1. At the higher level P2 , for each region R2 ,
we can dene a set of policies that model the agent's behaviours inside that region with
applicable state space R2 , destination set P er(R2 ), and the constraint that these policies
must use the policies previously dened at level-1 to achieve their goals. An example is a
policy to navigate between the room-doors to get from one building gate to another. Let
the set of all policies dened at this level be 2. Continuing doing this at the higher levels,
we obtain the policy hierarchy H = (0 ; 1 ; 2 ; : : : ; K ). A policy hierarchy constructed
through State-space Region-based Decomposition is termed an SRD policy hierarchy.
An SRD policy hierarchy has the property that the set of applicable states of all the
policies at a given abstraction level forms a partition of the state space. Thus, from the state
sequence (s0 ; : : : ; st ; : : :) resulting from the execution of the top level policy, we can infer
the exact starting and terminating times of all intermediate-level policies. For example, at
level k, the starting/stopping times of the policies in this level are the time indices t's at
which the state sequence crosses over a region boundary: st 1 2 Rk and st 62 Rk for some
region Rk of the partition Pk . Later in section 5.1, we will show that this property helps to
simplify some of the complexity of the policy recognition problem.
3.3 A Policy Hierarchy Example

As an example, consider the task to monitor and predict the movement of an agent through
a building shown in Fig. 5(a). Each room is represented by a 5  5 grid, and two adjacent
rooms are connected via a door in the center of their common edge. The four entrances to
the building are labeled north (N), west (W), south (S) and east (E). In addition, the door
in the center of the building (C) acts like an entrance between the building's north wing
and south wing. At each state (cell), the agent can move in 4 possible directions except
when it is blocked by a wall.
The policy hierarchy to model the agent's behaviour in this environment can be constructed based on region-based decomposition at three levels of abstraction. Firstly, a region
hierarchy is constructed. The partition of the environment consists of the 8 rooms at level 1,
the two wings (north and south) at level 2, and the entire building at level 3. The behaviours
of the agent at level 1 (within each room) is represented by a set of level 1 policies. For
example, in each room, we use 4 level-1 policies to model the agent's behaviours of exiting
the room via the 4 dierent doors. These are essentially four Markov chains within the room
which terminate outside of the room. One way to represent these policies is to specify which
movement action the agent should take given the current position and the current heading.
At the higher level, the agent's behaviours within each wing are specied. For example,
we use 3 level-2 policies in each wing to model the agent's behaviours of exiting the wing
via the 3 wing exits. These policies are built on top of the set of level-1 policies already
dened. They specify which level-1 policies the agent should take to leave the wing at the
intended exit. Finally, at the top level, the agent's behaviours within the entire building
can be specied. For example, we use 4 top-level policies to model the agent's behaviours
of leaving the building via the four building exits N, W, S, E. A sample of these policies
and their parameters is given in Fig. 5(b).

466

Policy recognition in the Abstract Hidden Markov Model
N
Level 1 Policy. (Destination is on the right)

Level 2 Policy (current state: W, destination : C)
0.8

W

Up
0.3

Go to right−door (level 1 policy)

0.2

0.1
0.5

Right

E

Go to back−door (level 1 policy)
0.1

Down
C
W

Right−door
Back−door

Level 3 (current state: W, destination: E)

S

0.9

Prior for top−level policy

Go to C (level 2 policy)
N: 0.25, S: 0.25, E: 0.25, W: 0.25

W
0.1

Go to S (level 2 policy)
(a) The environment
(b) Parameters of the AHMM

Figure 5: An example policy hierarchy
3.4 AMM as a Plan Execution Model

Up to now, we have presented the AMM as a formal plan execution model to be used later
in the plan recognition process. In this subsection, we discuss the expressiveness of the
AMM as a formal plan specication language, and also the suitability of using the AMM
to encode plans in the context of plan recognition. Note that the discussion here focuses on
the representational aspect of the AMM alone. A discussion of the computational aspects
of the AMM/AHMM in comparison with other works in probabilistic plan recognition will
be presented in Section 7.
The AMM is particularly well-suited for representing goal-directed behaviours at different levels of abstraction. Each policy in the AMM can be viewed as a plan trying to
achieve a particular goal. However, unlike a classical plan, a policy species the course of
actions at all applicable states, and is more similar to a contingent plan. The ending of a
policy could either means that the goal has been achieved, or the attempt to achieve the
goal using the current policy has failed. This interpretation of the persistence of a policy
ts into the persistence model of intentions (Cohen & Levesque, 1990): when an intention
ends, there is no guarantee that the intended goal has been achieved. Thus, conceptually,
there are two types of destination states: one corresponds to the intended goal states, and
the other corresponds to unintended failure states resulting from the stochastic nature in
the execution of the plan. Due to its generality, the AMM does not need to distinguish between these two types; both the successful termination states and the unsuccessful ones are
treated the same as possible destination states, albeit with dierent reaching probabilities.4
4. One would expect that an agent would more likely to reach the intended destination state rather a
random failure state.

467

Bui, Venkatesh & West
Using the AMM as a model of plan execution thus allows us to blur the dierence
between planning and re-planning. At the same time, it moves from the recognition of
a classical plan towards the recognition of the agent's intention. Most of the existing
framework for probabilistic plan recognition does not explicitly represent the current state,
and thus, the relationship between states and the adoption and termination of current plans
is ignored (Goldman et al., 1999).5 Thus, it would be impossible to tell if the current plan
has failed and the new plan is an attempt to recover from this failure, or the current plan
has succeeded and the new plan is part of a new higher level goal.
A more expressive language for describing abstract probabilistic plan is the Hierarchical
Abstract Machines (HAM) proposed in (Parr & Russell, 1997; Parr, 1998). In a HAM, the
abstract policy is replaced by a stochastic nite automaton, which can call other machines
at the lower level. Our abstract policies can be written down as machines of this type. Such
a machine would choose one of the machines correspond to the policies at the lower level
and then go back to the start state after the called machines have terminated. The HAM
framework allows for machines with arbitrary nite number of machine states and transition
probabilities,6 thus can readily represent more complex plans such as concatenation of
policies, alternative policy paths, etc. It is possible to represent each machine in HAM
as a policy in our AMM, however with the cost of augmenting the state space to include
the machine states of all the machines in the current call stack. Thus, the size of the
AMM's new state space would be exponential with respect to the number of nested levels
in the HAM's call stack. While this shows in theory the expressiveness of HAM and our
policy hierarchy is the same, performing policy recognition on the HAM-equivalent policy
hierarchy is probably unwise since the state space becomes exponentially large after the
conversion. A better idea would be to represent the internal state of each machine as a
variable in a DBN and perform inference on this DBN structure directly.
The AMM is also closely related to a model for probabilistic plan recognition called the
Probabilistic State-Dependent Grammar (PSDG), independently proposed in (Pynadath,
1999; Pynadath & Wellman, 2000). The PSDG can be described as the Probabilistic
Context Free Grammar (PCFG) (Jelinek, Laerty, & Mercer, 1992), augmented with a
state space, and a state transition probability table for each terminal symbol of the PCFG.
In addition, the probability of each production rule is made state dependent. As a result,
the terminal symbol now acts like primitive actions and the non-terminal symbol chooses its
expansion depending on the current state. Interestingly, the PSDG is directly related to the
HAM language described above, similar to the way production-rule grammars are related
to nite automata. Given a PSDG, we can convert it to an equivalent HAM by constructing
a machine for each non-terminating symbol, and modelling the production rules for each
non-terminating symbol by the automaton.
Our policy hierarchy is equivalent to a special class of PSDG where only production
rules of the form X ! Y X and X ! ; are allowed. The former rule models the adoption
of a lower level policy Y by a higher level policy X , while the latter models the termination
of a policy X . The PSDG model considered in (Pynadath, 1999; Pynadath & Wellman,
2000) allows for more general rules of the form X ! Y1 : : : YmX , i.e., the recursion symbol
5. with the exceptions of (Goldman et al., 1999; Pynadath & Wellman, 2000) which will be discussed in
detail in Section 7.
6. with the constraint that there is no recursion in the calling stack to keep the stack nite.

468

Policy recognition in the Abstract Hidden Markov Model
must be located at the end of the expansion. Thus in a PSDG, a policy might be expanded
into a sequence of policies at the lower level which will be executed one after another before
control is returned to the higher level policy. The implicit assumption here is that when a
policy in the sequence terminates, it always does so at a state where the next policy in the
sequence is applicable. Given this assumption, in the language of the AHMM we can dene
a compound policy k as a policy that simply and orderly executes a sequence of policies at
k 1 ; : : : ;  k 1 , independent of the current state. A PSDG is then equivalent
the lower level (1)
(m)
to an AHMM if compound policies of this form are allowed.
Since the AMM closely follows the models used in abstract probabilistic planning, it can
be used to model and recognise the behaviours of any autonomous agent whose decision
making process is equivalent to an abstract MDP. It is also useful as a formal language
for specifying contingent plans whose execution can then be monitored using the policy
recognition algorithm. The language is also rich enough to specify a range of useful human
behaviours, especially in domains where there is a natural hierarchical decomposition of
the state space. Section 6 presents an application of the AHMM framework to the problem
of recognising people behaviours in a complex spatial environment. Here, each policy of
the AHMM represents the evolution of possible trajectories of people movement while the
person performs a certain task in the environment such as heading towards a door, using
the computer at a certain location, etc. The policies at dierent levels would represent the
evolution of trajectories at dierent levels of abstraction. Due to the existing hierarchy in
the domain, the policies can be constructed using the region-based decomposition of the
state space. The environment is populated with multiple cameras divided into dierent
zones that can provide the current location of the tracking target, albeit a noisy one. The
noisy observations can be readily handled by the observation model in the AHMM. The
policy recognition algorithm can then be applied to infer the person's current policy at
dierent levels in the hierarchy.
One main restriction of the current AHMM model is that we consider only one toplevel policy at a time, thus are unable to model the inter-leaving of concurrent plans.
Another more subtle restriction is the assumption that a high level policy selects the lower
level policies depending only on the current state. If the state space is interpreted as the
states of the external environment, this assumption implies that the actor either has full
observation about the current state, or at least renes its intentions based on the actor's
observation about the current state only (and not the entire observation history). Note that
these restrictions of the AHMM also apply in the case of the PSDG model.
4. Dynamic Bayesian Network Representation

In this section, we describe the Dynamic Bayesian Network (DBN) representation of the
AHMM. The network serves two purposes: (1) as the tool to derive the probabilistic independence property of this stochastic model, and (2) as the computational framework for
the policy recognition algorithms in Section 5.
4.1 Network Construction

At time t, let st represent the current state, tk represent the current policy at level k
(k = 0; : : : ; K ), ekt represent the ending status of tk , i.e., a boolean variable indicating

469

Bui, Venkatesh & West
πk

πk

πk

ek

ek

ek =F

e k-1

e k-1 =T

ek-1 =F

s

s
(a)

s
(b)

(c)

Figure 6: Sub-network for policy termination
whether the policy tk terminates at the current time. These variables would make up the
current time-slice of the full DBN. For our convenience, the notation tall refers to the set of
all the current policies ftK ; : : : ; t0 g. Before presenting the full network, we rst describe
the two sub-structures that model how policies are terminated and selected. The full DBN
can then be easily constructed from these sub-structures.
4.1.1 Policy Termination

From the denition of abstract policies, a level-k policy tk terminates only if the lower level
policy tk 1 terminates, and if so, tk terminates with probability tk (st). In the Bayesian
network representation, the terminating status ekt therefore has three parent nodes: tk , st ,
and etk 1 (Fig. 6(a)).
The parent variable ekt 1 however plays a special role. If ekt 1 = T , meaning the lower
level policy terminates at the current time, Pr(ekt = T j tk ; st) = tk (st) which gives the
conditional probability of ekt given the other two parent variables (Fig. 6(b)). However, if
ekt 1 = F , tk should not terminate and so ekt = F . Therefore, given that ekt 1 = F , ekt is
deterministically determined and is independent of the other two parent variables tk and
st . Using the notion of context-specic independence (CSI) (Boutilier et al., 1996), we can
then safely remove the links from the other two parents to ekt in the context that ekt 1 is
false (Fig. 6(c)).
At the bottom level, since the primitive action always terminates immediately, e0t = T
for all t. Since we are modelling the execution of a single top-level policy K , we can assume
that the top-level policy does not terminate and remains unchanged: eKt = F and tK = K
for all t. Also, note that elt = T ) ekt = T for all k  l, and elt = F ) ekt = F for all k  l.
Thus, at each time t, there exists 0  lt < K such that ekt = T for all k  lt , and ekt = F
for all k > lt . The variable lt is termed the highest level of termination at time t. Knowing
the value of lt is equivalent to knowing the terminating status of all the current policies.
4.1.2 Policy Selection

The current policy tk in general is dependent on the higher level policy tk+1, the previous
state st 1 , the previous policy at the same level tk 1 and its ending status ekt 1 . In the
Bayesian network, tk thus has these four variables as its parents (Fig. 7(a)). This depen-

470

Policy recognition in the Abstract Hidden Markov Model
π k+1
k

π prev

πk

k

eprev

π k+1
k

π prev

πk

(a)

k
π prev

ek = F

ek =T

sprev

sprev

prev

sprev

π k+1
π

k

prev

(b)

(c)

Figure 7: Sub-network for policy selection
dency can be further broken down into two cases, depending on the value of the parent
node ekt 1 .
If the previous policy has not terminated (ekt 1 = F ), the current policy is the same as
the previous one: tk = tk 1 , and the variable tk is thus independent of tk+1 and st 1 .
Therefore, in the context ekt 1 = F , the two links from tk+1 and st 1 to the current policy
can be removed, and the two nodes tk and tk 1 can be merged together (Fig. 7(b)).
If the previous policy has terminated (ekt 1 = T ), the current policy is selected by the
higher level policy with probability Pr(tk j tk+1; st 1 ) = tk+1 (st 1 ; tk ). In this context, tk
is independent of tk 1 and the corresponding link in the Bayesian network can be removed
(Fig. 7(c)).
4.1.3 The Full DBN

The full dynamic Bayesian network can be constructed for all the policy, ending status, and
state variables by putting the sub-networks for policy termination and selection together
(Fig. 8). At the top level, since eKt = F , we can remove the ending status nodes and merge
all the tK into a single node K . At the base level, since e0t = T , we can remove the ending
status nodes and also the links from t0 to t0+1. To model the observation of the hidden
states, an observation layer can be attached to the state layer as shown in Fig. 8.
Suppose that we are given a context where each of the variable ekt is known. We can
then modify the full DBN using the corresponding link removal and node merging rules.
The result is a more intuitive tree-shaped network in Fig. 9, where all the policy nodes
corresponding to the same policy for its entire duration are grouped into one. The grouping
can be done since knowing the value of each ekt is equivalent to knowing the exact duration
of each policy in the hierarchy. One would expect that performing probabilistic inference
on this structure is more simple than that of the full DBN in Fig. 8. In particular, if the
state sequence is known, the remainder of the network in Fig. 9 becomes singly-connected,
i.e., a directed graph with no undirected cycles, allowing inference to be performed with
complexity linear to the size of the network (Pearl, 1988). The policy recognition algorithms
that follow later exploit extensively this particular tractable case of the AHMM.

471

Bui, Venkatesh & West

πK

Level K

Policy

π2

Stop status

e2

Policy

π1

Stop status

e1

Action

π0

State

Observation

Figure 8: The DBN representation of the Abstract Hidden Markov Model

π4

π3

...

π2

...

π1
s

...

...

...

...

...

...

...

...

...

...

...

...

...

...

...

...

Figure 9: Simplied network if the duration of each policy is known (action nodes are
omitted for clarity)

472

Policy recognition in the Abstract Hidden Markov Model
4.2 Conditional Independence in the Current Time-Slice

The above discussion identies a tractable case for the AHMM, but it requires the knowledge
of the entire history of the state and the policy ending status variables. In this subsection,
we focus on the conditional independence property of the nodes in the current time-slice:
st ; t0 ; : : : ; tK . Since these nodes will make up the belief state of any future inference
algorithm for our AHMM, any independence properties among these variables, if exploited,
can provide a more compact representation of the belief state and reduce the inference
complexity.
Due to the way policies are invoked in the AMM, we can make an intuitive remark
that the higher level policies can only inuence what happens at the lower level through the
current level. More precisely, for a level k policy tk , if we know its starting state, the course
of its execution is fully determined, where being determined here means without inuence
from what is happening at the higher levels. Furthermore, if we also know how long the
policy has been executed, or equivalently its starting time, the current state of its execution
is also determined. Thus, the higher level policies can only inuence the current state of
execution of tk either through its starting state or starting time. In other words, if we know
tk together with its starting time and starting state, then the current higher level policies
are completely independent of the current lower level policies and the current state. The
theorem 1 below formally states this in a precise form. Note that the condition obtained
is the strictest: if one of the three conditional variables is unknown, there are examples of
AMMs in which the higher level policies can inuence the lower level ones.
Theorem 1. Let tk and bkt be two random variables representing the starting time and the

starting state, respectively, of the current level-k policy tk : tk = maxft0 < t j ekt0 = T g and
bkt = stk . Let t>k = ftk+1 ; : : : ; tK g denote the set of current policies from level k + 1 up
to K, and t<k = fst ; t0 ; : : : ; tk 1 g denote the set of current policies from level k 1 down
to 0 together with the current state. We have:
t>k ? t<k j tk ; bkt ; tk

(7)

Proof. We sketch here an intuitive proof of this theorem through the use of the Bayesian
network manipulation rules for context-specic independence which have been discussed in
4.1.1 and 4.1.2. An alternative proof that does not use CSI can be found in (Bui et al.,
2000).
We rst note that the theorem is not obvious by looking at the full DBN in Fig. 8.
Therefore, we shall proceed by modifying the network structure in the context that we
know tk .
At time tk , all the policies at level k and below must terminate: eltk = T for all l  k.
Thus we can remove all the links from these policies to the new policies at time tk + 1.
On the other hand, from time tk + 1 until the current time t, all the policies at level k
and above must not terminate: elt0 = F for all l  k, tk + 1  t0 < t. Thus we can group all
the policies at level l  k between time tk + 1 and t into one node representing the current
policy at level l.
These two network manipulation steps result in a network with the structure shown in
Fig. 10. Once the modied network structure is obtained, we can observe that t>k and

473

Bui, Venkatesh & West

k+1

πt

k

πt

k-1

πt
...

...

k

...

State

bt

st

Time

k
τt

t

...

Figure 10: Network structure after being conditioned on tk
are d-separated by tk and bkt in the new structure. Thus t>k and t<k are independent
given tk , bkt and tk .
t<k

5. Policy Recognition

In this section we begin to address the problem of policy recognition in the framework of
the AHMM. We assume that a policy hierarchy is given and is modelled by an AHMM,
however the top level policy and the details of its execution are unknown. The problem is
then to determine the top level policy and other current policies at the lower levels given
the current sequence of observations. In more concrete terms, we are interested in the
conditional probability:
Pr(tK ; : : : ; t0 j o~t 1 )
and especially, the marginals:
Pr(tk j o~t 1 ); for all levels k
Computing these probabilities gives us the information about the current policies at all
levels of abstraction, from the current action (k = 0), to the top-level policy (k = K ),
taking into account all the observations that we have up to date.
In typical monitoring situations, these probabilities need to be computed \online", as
each new observation becomes available. To do this, it is required to update the belief
state (ltering distribution) of the AHMM at each time point t. This problem is generally
intractable unless the belief state has an eÆcient representation that aords a closed form
update procedure. In our case, the belief state is a joint distribution of K + 3 discrete
variables: Pr(tK ; : : : ; t0 ; st ; lt j o~t ). Without any further structure imposed on the belief
state, the complexity for updating it is exponential in K .
To cope with this complexity, one generally has to resort to some form of approximation
to trade o accuracy for computational resources. On the other hand, the analysis of the

474

Policy recognition in the Abstract Hidden Markov Model
AHMM network in the previous section suggests that the problem of inference in the AHMM
can be tractable in the special case when the history of the state and terminating status
variables is known. Motivated by this property of the AHMM, our main aim in this section
is to derive a hybrid inference scheme that combines both approximation and tractable
exact inference for eÆciency. We rst treat the special case of policy recognition where
the belief state of the AHMM has a tractable structure in 5.1. We then present a hybrid
inference scheme for the general case using the Rao-Blackwellised Sequential Importance
Sampling (RB-SIS) method in 5.2.
5.1 Policy Recognition: the Tractable Case

Here, we address the policy recognition problem under two assumptions: (1) the state
sequence can be observed with certainty, and (2) the exact time when each policy starts
and ends is known. More precisely, our observation at time t includes the state history
s~t = (s0 ; : : : ; st ) and the policy termination history ~lt = (l0 ; : : : ; lt ). The belief state that
we need to compute in this case is Bt = Pr(tall ; st ; lt j s~t 1 ; ~lt 1 ) and its posterior after
absorbing the observation at time t: Bt+ = Pr(tall j s~t ; ~lt ).
The rst assumption means that the observer always knows the true current state and is
often referred to as \full observability". When the states are fully observable, we can ignore
the observation layer fot g in the AHMM and thus only have to deal with the AMM instead.
The second assumption means that the observer is fully aware when the current policy
ends and a new policy begins. If the policy hierarchy is constructed from the region-based
decomposition of the state space (subsection 3.2), the termination status can be inferred
directly from the state sequence. Thus for SRD policy hierarchies, only the full observability
condition is needed since the second assumption is subsumed by the rst and can be left
out. Except for SRD policy hierarchies, these two assumptions are usually too restrictive
for the policy recognition algorithm presented here to be useful by itself. However, the
algorithm for this special case will form the exact step in the hybrid algorithm presented in
subsection 5.2 for the general case.
5.1.1 Representation of the belief state

We rst look at the conditional joint distribution Pr(tall ; st j s~t 1; ~lt 1 ). From the termination history ~lt 1 , we can derive precisely the starting time of the current level-k policy:
tk

= maxf0g [ ft0 < tj ekt0 = T g = maxf0g [ ft0 < tj lt0  kg

On the other hand, knowing the starting time together with the state history also gives
us the starting state bkt . Thus, both the starting time and the starting state of tk can be
derived from s~t 1 and ~lt 1 . From Theorem 1, we obtain for all level k:
t>k ? t<k j tk ; s~t 1 ; ~lt 1
In other words, given s~t 1 and ~lt 1 , the conditional joint distribution of ftK ; : : : ; t0 ; st g
can be represented by a Bayesian network with a simple chain structure. We denote this
chain network by Ct  Pr(tall ; st j s~t 1 ; ~lt 1 ) and term it the belief chain for the role it plays
in the representation of the belief state (Fig. 11(a)). If a chain is drawn so that all links

475

Bui, Venkatesh & West

πK

Bt

Ct

π

πk+1
root

K

e

K

e

k+1

k+1

π

πk

π

k

π

k-1

ek
πk-1

e k-1
π1

π

1

π

0

e1

π0

s

s
(a)

(b)

Figure 11: Representation of the belief state
point away from the level-k node, we say that the chain has root at level k. The root of the
chain can be moved from k to another level k0 simply by reversing the links lying between
k and k0 using the standard link-reversal operation for Bayesian networks (Shachter, 1986).
Each node in the belief chain also has a manageable size. In principle, the domain of
tk is k , the set of all policies at level k, and the domain of st is S , the set of all possible
states. When K is large, we basically want to model a larger state space, and the set
of policies to cover this state space is also large. The sizes of these domains would most
likely grow exponential w.r.t. K . However, given a particular state, the number of policies
applicable at that state would remain relatively constant and independent of K . For each
policy tk , we know its starting state bkt , which implies that tk 2 k (bkt ), the set of all
level-k policies applicable at bkt . Thus k (bkt ) can be used as the \local" domain for tk
to avoid the exponential dependency on K . Similarly, the domain for st can be taken as
the set of neighbouring states of st 1 (reachable from st 1 by performing one primitive
action). For a given state, we term the maximum number of relevant objects (applicable
policies/actions, neighbouring states) at a single level the degree of connectivity N of the
domain being modelled. The size of the conditional probability table for each link of the
belief chain is then O(N 2), and the overall size of the belief chain is O(K N 2 ).
We now can construct the belief state Bt from Ct. Since the current terminating status
is solely determined by the current policies and the current state, the belief state Bt can be
factorised into:
Pr(tall ; st ; lt j s~t 1 ; ~lt 1 ) = Pr(lt j tall ; st ) Pr(tall ; st j s~t 1 ; ~lt 1 ) = Pr(lt j tall ; st)Ct
Note that the variable lt is equivalent to the set of variables feKt ; : : : ; e1t g. Thus, the full
belief state Bt can be realised by adding to Ct the links from the current policies and the
current state to the terminating status variables ekt (Fig. 11(b)). The size of the belief state

476

Policy recognition in the Abstract Hidden Markov Model
π

K

π
e

K

k+1

K

e

k+1

π
e

k+1

k

π

k

π

k-1

ek
π

e
k+1

π
π

K

ek

k-1

e k-1
π

1

π

0

e1
(a)

(b)

Figure 12: Belief state updating: from Bt to Bt+
would still be O(K N 2 ). If the state is a composite of many orthogonal variables, a factored
representation can be used so that the size of the belief state representation does not depend
exponentially on the dimensionality of the state space. We discuss factored representations
further under subsection 5.2.2.
5.1.2 Updating the belief state

Since the belief state Bt can be represented by a simple belief network in Fig. 11(b), we can
expect that a general exact inference method for updating the belief state such as (Kjrul,
1995) will work eÆciently. However, this general method works with undirected network
representation of the belief state distribution which can be inconvenient for us later on when
we want to sample from such a distribution. Here, we describe an algorithm that updates
the belief state in the closed form given by the directed network in Fig. 11(b).
Assuming that we have a complete specication of the belief state Bt , i.e., all the parameters for its Bayesian network representation, we need to compute the parameters for
the new network Bt+1 . This is done in two steps, as in the standard \roll-over" of the belief
state of a DBN: (1) absorbing the new evidence st , lt and (2) projecting the belief state
into the next time step.
The rst step corresponds to the instantiation of the variables st , e1t ; : : : ; eKt in the
Bayesian network Bt to obtain Bt+ which is the conditional joint distribution of tK ; : : : ; t0 .
By checking the conditional independence relationships in Fig. 11(b), it is easy to see that
Bt+ again has a simple chain network structure. Thus, conceptually, the problem here is
to update the parameters of the chain Ct so as to absorb the given evidence to form a new
chain Bt+. This can be done by a number of link-reversal steps as follows.
To instantiate st, we rst move the root of the chain Ct to st. The variable st then has
no parents and can be instantiated and deleted from the network (Fig. 12(a)).
To instantiate lt which is equivalent to the value assignment (eKt = F; : : : ; eltt +1 = F; eltt =
T; : : : e1t = T ), starting from k = 1, we iteratively reverse the links from tk 1 to tk and
from tk to ekt (Fig. 12(b)). In algebraic forms, the rst link reversal operation corresponds

477

Bui, Venkatesh & West
to computing the following probabilities:
Pr(tk j st; e1t ; : : : ; ekt 1 ) =
Pr(tk 1 j tk ; st; e1t ; : : : ; ekt 1 ) /

X Pr(k j k 1) Pr(k 1 j s ; e1; : : : ; ek 1)
t

t

t

t

t

tk 1
Pr(tk j tk 1) Pr(tk 1 j st ; e1t ; : : : ; ekt 1)

t

(8)
(9)

and the second link reversal corresponds to:
Pr(tk j st ; e1t ; : : : ; ekt ) / Pr(ekt j tk ; st; ekt 1 ) Pr(tk j st ; e1t ; : : : ; ekt 1)
(10)
Eectively, the k-th link reversal step positions the root of the chain Ct at tk and absorbs
the evidence ekt . By repeating this link reversal operations with k = 1; : : : ; lt + 1, we obtain
a new chain for Bt+ which has root at level lt +1. Note that there is no need to incorporate
the instantiations ekt = F for k > lt + 1 since they are the direct consequences of the
instantiation eltt+1 = F . The parameters of the chain Bt+ are given below. The upward
links remain the same as those of Ct , while the marginal at level lt + 1 and the downward
links are obtained as the results of the link reversal operations above:
Pr(tk+1 j tk ; st ; lt ) = Pr(tk+1 j tk ); k  lt + 1
Pr(tk j st ; lt ) = Pr(tk j st; e1t ; : : : ; ekt ); k = lt + 1
Pr(tk 1 j tk ; st ; lt ) = Pr(tk 1 j tk ; st ; e1t ; : : : ; ekt 1 ); k  lt
In the second step, we continue to compute Ct+1 from Bt+. Since all the policies at
levels higher than lt do not terminate, t>l+1t = t>lt , and we can retain this upper sub-chain
from Bt+ to Ct+1 . In the lower part, for k  lt, a new policy tk+1 is created by the policy
+1 at the state st , and thus a new sub-chain can be formed among the variables <lt with
tk+1
t+1
+1 ; st ) =  k+1 (st ; k ). Note that the domain of the newly-created
parameters Pr(tk+1 j tk+1
t+1
t+1
k
k
node t+1 is  (st ). The new chain Ct+1 is then the combination of these two sub-chains,
which will be a chain with root at level lt + 1 (see Fig. 13). Once we have the chain Ct+1 ,
the new belief state Bt+1 can be obtained by simply adding the terminating status variables
fekt+1 g to Ct+1 .
This completes the procedure for updating the belief state from Bt to Bt+1 , thus allowing
us to compute the belief state Bt at each time step. Although the belief state is the joint
distribution of all the current variables, due to its simple structure, the marginal distribution
of a single variable can be computed easily. For example, if we are only interested in the
current level-k policy tk , the marginal probability Pr(tk j s~t 1 ; ~lt 1 ) is simply the marginal
at the level-k node in the chain Ct, and can be readily obtained from the chain parameters.
The complexity of the belief state updating procedure at time t is proportional to lt
since it only needs to modify the bottom lt levels of the belief state. On the other hand, the
probability that the current policy at level l terminates can be assumed to be exponentially
P
small w.r.t. l. Thus, the average updating complexity at each time-step is O( l l=exp(l))
which is constant-bounded, and thus does not depend on the number of levels in the policy
hierarchy. In terms of the number of policies and states, the updating complexity is linear
to the size of a policy node in the belief chain, thus is linear to the degree of connectivity
of the domain.

478

Policy recognition in the Abstract Hidden Markov Model

πKt

πl +1
t

Ct+1
l

πl

πt+1

t

Bt+
π1t
0

π0

πt+1

t

s

st

t+1

Figure 13: Belief state updating: from Bt+ to Ct+1
5.2 Policy Recognition: The General Case

We now return to the general case of policy recognition, i.e., without the two assumptions of
the previous subsection. This makes the inference tasks in the AHMM much more diÆcult.
Since neither the starting times nor the starting states of the current policies are known
with certainty, theorem 1 cannot be used. Thus, the set of current policies no longer forms
a chain structure as it did in Ct since the conditional independence properties of the current
time-slice no longer hold. We therefore cannot hope to represent the belief state by a simple
structure as we did previously. An exact method for updating the belief state will thus have
to operate on a structure with size exponential in K , and is bound to be intractable when
K is large.
To cope with this complexity, an approximation scheme such as sequential importance
sampling (SIS) (Doucet et al., 2000b; Liu & Chen, 1998; Kanazawa et al., 1995) can be
employed. In our previous work (Bui, Venkatesh, & West, 1999), we have applied an SIS
method known as the likelihood weighting with evidence reversal (LW-ER) (Kanazawa et al.,
1995) to an AHMM-like network structure. However the SIS method needs to sample in the
product space of all the layers of the AHMM and thus becomes less accurate and ineÆcient
with large K . The key to get around this ineÆciency is to utilise the special structure of
the AHMM, particularly, its special tractable case, to keep the set of variables that need to
be sampled to a minimum.
The improvement of the SIS method to achieve this is has been presented in subsection 2.5 in the name of the Rao-Blackwellised SIS (RB-SIS) method. Rao-Blackwellisation
specically allows the marginalisation of some variables analytically and only samples the
remaining variables. As a result, this reduces the averaged error, measured as the variance
of the estimator (Casella & Robert, 1996).

479

Bui, Venkatesh & West
In order to apply RB-SIS to the AHMM, the main problem is to identify which variables should be used as the Rao-Blackwellising variables and should still be sampled, with
the remaining variables being marginalised analytically. The key to choosing the RaoBlackwellising variables, as we have shown in 2.5, is so that if those variables can be observed,
the Rao-Blackwellised belief state becomes tractable. In subsection 5.1, we have demonstrated that if the state history s~t and the terminating status history ~lt can be observed
then the belief state has a simple network structure and can be updated with constant average complexity. Thus, (st ; lt ) can be used conveniently as the Rao-Blackwellising variable
rt . Note that the variables ~lt are the context variables which help to simplify the network
structure of the AHMM, while the state variables s~t help to make the remaining network
singly-connected so that exact inference can operate eÆciently (see subsection 4.1.3).
5.2.1 RB-SIS for AHMM

We now discuss the specic application of RB-SIS to the problem of belief state updating
and policy recognition in the AHMM. Our main objective is to use RB-SIS to estimate the
conditional probability of the policy currently being executed at level-k given the current
sequence of observations Pr(tk+1 j o~t ).
Mapping the RB-SIS general framework in subsection 2.5 to the AHMM structure, the
set of all current variables xt is now the set of current policies, terminating status nodes,
and the current state: xt = (tall ; st; lt ). The probability under estimation Pr(tk+1 j o~t ) can
be viewed as an expectation by letting f (tall ; st; lt ) = Pr(tk+1 jtall ; st ; lt ) so that:
X Pr(k jall ; s ; l ) Pr(all ; s ; l jo~ ) = Pr(k j o~ )
f =
t t
t t t
t+1 t
t
t+1 t
tall ;st ;lt

Using RB-SIS to estimate this expectation, we shall split xt into two sets of variables:
the set of RB variables rt = (st; lt ), and the set of remaining variables zt = tall which is the
set of all the current policies. The functional h, which depends only on the RB variables
and is obtained from f by integrating out the remaining variables (Eq. (5)), now has the
form:
X Pr(k j all ; s ; l ) Pr(all j s~ ; ~l ; o~ ) = Pr(k j s~ ; ~l ) (11)
h(~rt ) = h(~st ; ~lt ) =
t t
t t t
t+1 t
t
t+1 t t
tall

which is the marginal Ct+1 (tk+1 ) from the belief chain at time t + 1.
The RB belief state, which is the belief state of the AHMM when the RB variables are
known, becomes:
Rt = Pr(tall ; st; lt ; ot j s~t 1 ; ~lt 1 ; o~t 1 ) = Pr(tall ; st ; lt ; ot j s~t 1 ; ~lt 1 )
(12)
and is identical to the special belief state Bt discussed in subsection 5.1, except a minor
modication to attach the observation variable ot .
From (11) and (12), both the h function and the RB belief state can be computed
very eÆciently using the exact inference techniques described in 5.1. Thus RB-SIS can be
implemented eÆciently with minimal overhead in exact inference.
The main RB-SIS algorithm for the AHMM is given in Fig. 14. Note that we only need
to sample the RB variables s~t and ~lt . For each sample i, in addition to the weights w(i) ,

480

Policy recognition in the Abstract Hidden Markov Model
Begin
For t = 0; 1; : : :
For each sample i = 1; : : : ; N
Sample sti ; lti from Bti (st; ltj ot )
Update weight w i = w i Bti (ot )
Compute the posterior RB bel state Bti = Bti (tall jsti ; lti ; ot)
Compute the belief chain Ct i from Bti
Compute the new belief state Bti from Ct i
Compute h i = Ct i (tk )
Compute the estimator Pr(tk j o~t)  f^RBSIS = PNi h i w~ i
End
( )

( )

( )

( )

( )

( )

( )
+1

( )

( )
+1

( )
+1

( )
+
( )
+

( )

( )

( )

( )
+1

+1

+1

=1

( )

( )

Figure 14: RB-SIS for policy recognition
B er
t
π

K

e

K

e

k+1

k+1

π
π

k

π

k−1

ek = F
e k−1 = T
π

1

π

0

highest level
of termination lt

e1

s
o

Figure 15: Sampling the Rao-Blackwellising variables in AHMM
we also maintain a parametric representation of the Rao-Blackwellised belief state Bt(i), and
the value of the h function for that sample h(i) . The weights of the samples, together with
the values of the h function can then be combined to yield an approximation for f.
Some details on how we can obtain the new samples at each time step are worth noting
here. Since we are using the optimal sampling distribution qt = Bt(st ; lt j ot ) to sample the

481

Bui, Venkatesh & West
RB variables st and lt , we need to perform the evidence reversal step.7 This can be done
by positioning the root of the belief chain Ct at st and reverse the link from st to ot . This
gives us the network structure for Bter = Bt (st; lt ; tall j ot ) which is exactly the same as Bt
(see Fig. 15), except that the evidence ot has been absorbed into the marginal distribution
of st. The weight wt = Bt(ot ) can also be obtained as a by-product of this evidence reversal
step. In order to sample st and lt from Bter without the need to compute the marginal
distribution for these two variables, we can use forward sampling to sample every variable
of Bter , starting from the root node st and proceeding upward. Since lt by denition is the
highest level of policy termination, the sampling can stop at the rst level k where ekt = F .
We can then assign lt the value k 1. Any unnecessary samples for the policy nodes along
the way are discarded. Once we have the new samples for st and lt , the updating of the
RB belief state from Bt to Bt+1 is identical to the belief state updating procedure described
in 5.1. The h function can then be obtained by computing the corresponding marginal of
the new belief chain Ct+1.
At each time step, the complexity of maintaining a sample (sampling the new RB
variables and updating the RB belief state) is again O(lt ), and thus, on average, bounded
by a constant. The overall complexity of maintaining every sample is thus O(N ) on average.
If a prediction is needed, for each sample, we have to compute h by manipulating the chain
Ct+1 with the complexity O(K ). Thus the complexity at the time step when a prediction
needs to be made is O(NK ).
In comparison with the use of an SIS method such as LW-ER, the RB-SIS has the
same order of computational complexity (the SIS also has complexity O(NK )). However,
while the SIS method needs to sample every layers of the AHMM, the RB-SIS method only
needs to sample two sequences of variables s~t, ~lt , and avoids having to sample the K policy
sequences f~tk g. After Rao-Blackwellisation, the dimension of the sample space becomes
much smaller, and more importantly, does not grow with K . As a result, the accuracy of
the approximation by the RB-SIS method does not depend on the height of the hierarchy
K . In contrast, due to the problems of sampling in high dimensional space, the accuracy of
SIS methods tends to degrade, especially when K is large.
5.2.2 Performing Evidence Reversal with a Factored State Space

In many cases, the state space S is the Cartesian product of many state variables representing relatively independent properties of a state: st = (s1t ; s2t ; : : : ; sM
t ). Since the overall
state space is very large, specifying an action by the usual transition probability matrix is
problematic. It is advantageous in this case to represent the state information in a factored
form, i.e., representing each state variable smt in a separate node rather than lumping them
into a single node st. It has been shown that using factored representations, we can specify
the transition probability of each action in a compact form since an action is likely to aect
only a small number of state variables and the specication of the eects of actions has
many regularities (Boutilier et al., 2000).
7. The term evidence reversal is used in this paper to refer to a general procedure in which the link to
the observation node is reversed prior to sampling (Kanazawa et al., 1995), thus allowing us to sample
according to the optimal sampling distribution qt .

482

Policy recognition in the Abstract Hidden Markov Model
The representation of the belief chain Ct and also the RB belief state Bt can take direct
advantage of this factored representation of actions. Indeed, the chain parameter Ct(st jt0 )
of the link from t0 to st is precisely the transition probability for the action t0 at the
previous state st 1 (note that st 1 is known due to Rao-Blackwellisation). This conditional
distribution can be extracted from the compact factored representation of t0 in the general
form of a Bayesian network of the variables fs1t ; s2t ; : : : ; sM
t g. For our convenience, let us
denote this Bayesian network by F (:jt0 ). This network is usually sparse enough so that exact inference can operate eÆciently. For example, in the special case where fs1t ; s2t ; : : : ; sMt g
are independent given t0 and st 1 , F will be factored completely into the product of M
marginals of smt .
Although factored representations can be used as part of the RB belief state, care must
be taken when performing evidence reversal, i.e. to reverse the link from the state variable
to the observation node. In the procedure for evidence reversal discussed previously (see
Fig. 15), we rst position the root of Ct at the node st, thus need to compute and represent
the distribution Pr(st). In the factored state space case, this becomes a joint distribution
0
of all the state variables fs1t ; s2t ; : : : ; sM
t g. Without conditioning on the current action t ,
m
the factored representation of the state variables fst g cannot be utilised, thus resulting in
complexity exponential in M .
The key to get around this diÆculty is to always keep the specication of the distribution
of the current state conditioned on the current action, not vice versa. Thus, when computing
Bter = Bt (:jot ), we rst position the root of the chain Ct at t0, and then reverse the evidence
from ot to both t0 and st . In algebraic form, we use the following factorisation of the joint
distribution of the current action and state given the current observation:
Pr(t0 ; st jot ) = Pr(stjt0 ; ot ) Pr(t0 jot )
(13)
Fig. 16 illustrates this evidence reversal procedure. In the model depicted here, F can
be an arbitrary Bayesian network. The observation model can be specied by attaching the
observation nodes fo1t ; o2t ; : : :g to the state variables. The overall network representing the
distribution Pr(st ; ot j t0 ) will be denoted by F obs(:jt0 ).
We rst look at the rst term in the RHS of (13). Let F er (:jt0 ; ot ) represent the
distribution Pr(st j t0 ; ot ). Note that F er can be obtained by conditioning F obs(:jt0 ) on the
observation ot . This can be achieved by applying an exact inference method such as the
clustering algorithm (Lauritzen & Spiegelhalter, 1988) on the network F obs(:jt0 ).
For the second term in the RHS of (13), we note that:
Pr(ot j t0 ) =

X Pr(s ; o j 0) = X F obs(s ; o j0)
st

t

t

t

st

t

t

t

This integration can be readily obtained as a by-product when performing the above clustering algorithm on F obs(:jt0 ). Once Pr(ot j t0 ) is known, we can compute Pr(t0 j ot ) by:
Pr(t0 j ot ) / Pr(ot j t0 ) Pr(t0 )
This shows that the belief state after evidence reversal Bter = Bt (:j ot ) still has a simple
structure that exploits the independence relationships between the state variables fsmt g
given the current action t0. Sampling the RB variables from this structure can proceed as

483

Bui, Venkatesh & West

π

0

π

F
s 3t . .
.

2

st

F

0

obs

s 3t

2

st

1

F er
.
. .

1

st

st

2

1

o3t

...
o 4t
2

ot

1

ot

o3t

.. .
o 4t

ot

ot

Belief state before evidence reversal

Belief state after evidence reversal

Figure 16: Evidence reversal with factored state space
follows: Pr(t0 j ot ) is rst used to sample t0; F er (stjt0 ; ot ) is then used to sample st. Once
we have obtained the sample for t0 and st , we can proceed to sample the remaining nodes
in the network Bter to obtain a sample for lt as usual. Finally, we note that the weight
wt = Pr(ot ) can also be computed eÆciently by:
Pr(ot ) =

X Pr(o j 0) Pr(0)
t

t0

t

t

In this evidence reversal procedure, for each value of t0 , we need to perform exact
inference on the structure of F obs (st; ot jt0 ). Thus the complexity of this procedure heavily
depends on the complexity of the network structure of F . However, as we have noted,
due to the nature of the factored representation, F usually has a sparse structure so that
exact inference can be performed eÆciently. For example, in the special case where F
is completely factored into the product of M independent state variables which are then
independently observed, the complexity becomes linear w.r.t. M .
6. Experimental Results

In this section, we present our experimental results with the policy recognition algorithm. In
subsection 6.1, we demonstrate the eectiveness of the Rao-Blackwellised sampling method
for policy recognition by comparing the performance of our Rao-Blackwellised procedure
against likelihood weighting sampling in a synthetic tracking task. In subsection 6.2, we
present an application of the AHMM framework to the problem of tracking human behaviours in a complex spatial environment using distributed video surveillance data.

484

Policy recognition in the Abstract Hidden Markov Model
N
Rm 6

Rm 5

North Wing
25
Rm 4

36
50

Rm 7

62 E

16
Rm 0

W

7
Rm 3
Rm 1

Rm 2

South Wing

S

Figure 17: The environment and a sample trajectory
Destination probabilities
1
west
south
east
north

Probability

0.8

0.6

0.4

0.2

0
0

5

10

15

20

25

30 35
Time

40

45

50

55

60

Figure 18: Probabilities of top-level destinations over time
6.1 Eectiveness of Rao-Blackwellisation

To demonstrate the eectiveness of the Rao-Blackwellised inference method for AHMM, we
again consider the synthetic tracking task in which it is required to monitor and predict
the movement of an agent through the building environment previously discussed in subsection 3.3. The structure of the AHMM used is the same as the one shown in Fig. 5. The
parameters of the policies are chosen manually, and then used to simulate the movement of
the agent in the building. To simulate the observation noise, we assume that the observation of the agent's true position can be anywhere among its 8 neighbouring cells with the
probabilities given by a predened observation model.

485

Bui, Venkatesh & West

0.3
SIS
0.26/sqrt(x)
RB-SIS
0.055/sqrt(x)

std. deviation

0.25
0.2
0.15
0.1
0.05
0
10

20
30
40
Sample size (in 1000)

50

CPU Time (in second)

(a) Sample size and average error
7
6.5
6
5.5
5
4.5
4
3.5
3
2.5
2
1.5
1
0.5
0

SIS
0.035*x
RB-SIS
0.08*x

10

20
30
40
Sample size (in 1000)

50

(b) Sample size and CPU time
0.25
SIS
RB-SIS

std. deviation

0.2

0.15

0.1

0.05

0
0

0.2

0.4

0.6
0.8
1
1.2
CPU time (in second)

1.4

1.6

(c) CPU time and average error
Figure 19: Performance proles of SIS vs. RB-SIS

486

Policy recognition in the Abstract Hidden Markov Model

0.003
SIS
0.00179375
RB-SIS
0.000235286

Efficiency coefficient

0.0025
0.002
0.0015
0.001
0.0005
0
0

5

10

15 20 25 30 35
Sample size (in 1000)

40

45

50

Figure 20: EÆciency coeÆcients of SIS and RB-SIS
We implement the RB-SIS method (with re-sampling) and use the policy hierarchy
specication and the simulated observation sequence as input to the algorithm. In a typical
run, the algorithm can return the probability of the main building exit, the next wing exit,
and the next room-door that the agent is currently heading to. An example track is shown
in Fig. 17. As the observations about the track arrive over time, the prediction probability
distribution of which main building exit the track is heading to is shown in Fig. 18.
To illustrate the advantage of RB-SIS, we also implement an SIS method without RaoBlackwellisation (LW with ER and re-sampling (Kanazawa et al., 1995)) and compare the
performance of the two algorithms. We run the two algorithms using dierent sample population sizes to obtain their performance proles. For a given sample size N , the standard
deviation ((N )) over 50 runs in the estimated probabilities of the top-level policies is used
as the measure of expected error in the probability estimates. We also record the average
time taken in each update iteration.
Fig. 19(a) plots the standard deviation of the two algorithms for dierent
p sample sizes.
The behaviour of the error follows closely the theoretical curve (N ) = c= N , or 2(N ) =
c2 =N , with cSIS  0:26 and cRB SIS  0:055. As expected, for the same number of samples,
the RB-SIS algorithm delivers much better accuracy.
Fig. 19(b) plots the average CPU time (T ) taken in each iteration versus the sample
size. As expected, T (N ) is linear to N , with the RB-SIS taking about twice longer due to
the overhead in updating the RB belief state while processing each sample.
Fig. 19(c) plots the actual CPU time taken versus the expected error for the two algorithms. It shows that for the same CPU time spent, the RB-SIS method still signicantly
reduces the error in the probability estimates.
Note that for each algorithm, the quantity  = 2 (N )T (N ) is approximately constant
since the dependency on N cancels one another out. Thus, this constant can be used as an
eÆciency coeÆcient to measure the performance of the sampling algorithm independent of
the number of samples. For example, if an algorithm has a twice smaller coeÆcient, it can
deliver the same accuracy with half CPU time, or half the variance for the same CPU time.
Fig. 20 plots the eÆciency coeÆcients for both SIS and RB-SIS, with SIS  0:0018 and

487

Bui, Venkatesh & West
RB SIS  0:000235. This indicates a performance gain of almost an order of magnitude
(8 folds) for RB-SIS.

6.2 Application to Tracking Human Behaviours

Using the policy recognition algorithm, we have implemented a real-time surveillance system
that tracks the behaviour of people in a complex indoor environment using surveillance video
data. The environment consists of a corridor, the Vision lab and two oÆces (see Fig. 21).
People enter/exit the scene via the left or the right entrance of the corridor. The system
has six static cameras with overlapping eld of views which cover most of the ground plane
in the scene.
The entire environment is divided into a grid of cells, and the current cell position of
the tracked object acts like the current state in our AHMM. The cameras are calibrated so
that they can return the current position of the tracked object on the ground, however the
returned coordinates are unreliable as the cameras have to deal with noisy video frames and
occlusion of objects in the scene. For more information on how low-level tracking is done
with multiple cameras, readers are referred to (Nguyen, Venkatesh, West, & Bui, 2002).
We assume that the observation of a state can only be in the area surrounding it, thus the
observation model is a matrix specifying the observation likelihood for each cell within a
neighbourhood of the current state.
The policy hierarchy for behaviours in this environment is constructed as follows. First,
we construct the region hierarchy with three levels. At the bottom level, we identify 7
regions of special interest: the corridor, the two oÆces, the areas surrounding the Linux
server, NT server, printer, and the remaining free space in the Vision lab (Fig. 21). At the
higher level, all regions in the Vision lab are grouped together. The top level consists of the
entire environment. The policy hierarchy representing people's behaviors has three levels
corresponding to the three levels of the region hierarchy (see Fig. 23). At the bottom level,
we are interested in the behaviours that take place within each of the 7 regions of interest.
For example, near the Linux server, the person might be using the Linux machine, or simply
passing through that region, leading to two dierent policies. Similar policies are dened
for the NT server region, the printer region, and the two small oÆces. In the corridor
and inside the Vision lab (region 1 and 5), we construct dierent policies corresponding to
the dierent destinations that the person is heading to. Region 5 also has a special policy
representing the \walk-around" behaviour. At the middle level, three policies are dened
for the corridor and oÆce space representing a person's plan of exiting this space by the
left/right entrance or by the door of the Vision lab. We dene only one policy for the Vision
lab to represent the typical behaviour of a lab user (e.g., go to Linux server, followed by
go to printer).8 Finally, for the top level region (the whole environment), we dene two
policies representing a person's leaving the scene via the left/right entrance.
Fig. 21 and 22 show two concurrent trajectories of two dierent people in this environment. Some sample video frames captured by the dierent cameras in the system are shown
in Fig. 24.
With the AHMM model dened above, and a sequence of observations returned by
the cameras, we rst determine the performance proles of RB-SIS and SIS in this real
8. If we consider dierent groups of lab users, each group might give rise to a dierent policy at this level.

488

Policy recognition in the Abstract Hidden Markov Model

Camera 2

Camera 5

Table

Book shelf

Table

Office 1

Office 2
Region 7

Region 2

Book shelf

Camera 3

Camera 4
Region 1

left entrance

right entrance

Corridor
Camera 0

Linux server

time slice 300
Region 3

time slice 150 −> 180

time slice 50

time slice 60

Printer

1111
0000
0000
1111

Vision Lab

Table

Table

Region 5

Region 6
Region 4

NT server

Camera 1

Figure 21: The environment and the trajectory of person 1

489

Bui, Venkatesh & West

Camera 2

Camera 5

Table

Table

Office 1

Book shelf

Office 2
Book shelf

Camera 3

Camera 4

Corridor

left entrance

right entrance

time slice 180

Camera 0
Linux region

time slice 260

Linux server

Table

Vision Lab
Table

(Region 5)

Printer

1111
0000
0000
1111

NT region
Printer region

NT server

Camera 1

Figure 22: The trajectory of person 2

Top level

The environment
2 policies

Middle level

Bottom level

Corridor & offices
3 policies

Corridor
5 policies

Office 1
2 policies

Vision lab
1 policy

Office 2
2 policies

Linux region Printer region Empty space
2 policies
2 policies
4 policies

Figure 23: The region and policy hierarchy

490

NT region
2 policies

Policy recognition in the Abstract Hidden Markov Model

(a)
(b)
Figure 24: (a) Person 1 enters the scene and (b) Person 2 enters the scene.

0.6

0.2

std. deviation

0.5

Efficiency coefficient

RB-SIS
SIS

0.4
0.3
0.2
0.1
0

SIS
0.06
RB-SIS
0.011

0.15

0.1

0.05

0
0

0.2

0.4 0.6 0.8 1 1.2
CPU time (in second)

1.4

1.6

0

(a) Error vs. CPU time

0.2 0.4 0.6 0.8 1 1.2 1.4 1.6
CPU time (in second)

(b) EÆciency coeÆcients

Figure 25: Performance of RB-SIS and SIS with real tracking data

491

Bui, Venkatesh & West
1.4
p(left_e)
p(right_ e)

1.2
Probability

1
0.8
0.6
0.4
0.2
0
0

50

100 150 200 250 300 350 400
Time

Figure 26: The probabilities that person 1 is leaving the scene via the entrances (top level
policies)
environment. The two algorithms behave in a similar way as in the previous experiment
with simulated data. Fig. 25 shows the error curve against the CPU time for the two
algorithms. The eÆciency co-eÆcient for RB-SIS in this case is RB SIS  0:011, and for
SIS is SIS  0:06. This shows that the RB-SIS still performs about 5 times better than
SIS in this domain.
In the surveillance system, the low level tracking module returns the observations at
the rate of approximately two per second. The observation is then passed to the RB-SIS
algorithm which produces the probability estimate of the current policy at dierent levels
in the hierarchy. At the moment, our surveillance system can run in real time using two
AMD 1G machines. Examples of the output returned by the system for the two trajectories
in Fig. 21 and Fig. 22 are given below.
Fig. 26 shows the probabilities that person 1 is exiting the environment by the left
or right entrance (denoted by pleft e and pright e respectively). At the beginning, pleft e
increases when person 1 is heading to the left entrance (see the trajectory in Fig. 21). Then,
pleft e is approximately constant from time slice 50 when person 1 is inside the Vision lab.
This is because only one middle level policy is dened for the Vision lab and his movement
inside the lab is independent of his nal exit/entrance. At time slice 310, pleft e decreases
when person 1 is leaving the lab, turning right, and entering oÆce 2. Then, it increases and
approaches 1 when he is leaving oÆce 2, turning left, and going towards the left entrance.
In contrast, pright e falls quickly to zero during this time.
We now look at the results of querying of the bottom level policies. Fig. 27 shows the
distribution of the possible destinations of person 2 from time slice 180 to time slice 260,
when he is in region 5 (see the trajectory in Fig 22). The probabilities obtained show that
the system is able to correctly detect the \walk-around" behaviour.
The nal result (Fig. 28) shows the inferred behaviours of person 1 when he is at the
Linux server region. Initially, the probabilities for \using Linux server" and for \passing
through" are the same. As the person stays in the same position for an extended period of
time, the system is able to identify the correct behaviour of person 1 as \using the Linux
server".

492

Policy recognition in the Abstract Hidden Markov Model

1.4
p(v_Linux)
p(v_printer)
p(v_NT)
p(w_ around)

1.2
Probability

1
0.8
0.6
0.4
0.2

0
180 190 200 210 220 230 240 250 260
Time

Figure 27: Behaviours of person 2 inside the Vision lab

1.4
p(u_Linux)
p(pass)

1.2
Probability

1
0.8
0.6
0.4
0.2
0
50

100

150
200
Time

250

300

Figure 28: Behaviour of person 1 inside the Linux server region

493

Bui, Venkatesh & West
7. Related Work in Probabilistic Plan Recognition

The case for using probabilistic inference for plan recognition has been argued convincingly
by Charniak and Goldman (1993). However, the plan recognition Bayesian network used
by Charniak and Goldman is a static network. Thus their approach would run into problems when they have to process on-line a stream of evidence about the plan. More recent
approaches (Pynadath & Wellman, 1995, 2000; Goldman et al., 1999; Huber et al., 1994;
Albrecht et al., 1998) have used dynamic stochastic models for plan recognition and thus
are more suitable for doing on-line plan recognition under uncertainty.
Among these, the most closely related model to the AHMM is the Probabilistic StateDependent Grammar (PSDG) (Pynadath, 1999; Pynadath & Wellman, 2000). A comparison of the representational aspect of the two models has been discussed under subsection 3.4.
In terms of algorithms for plan recognition, Pynadath and Wellman only oer an exact
method to deal with the case where the states are fully observable. When the states are
partially observable, a brute-force approach is suggested which amounts to summing over all
possible states. We note that even for the fully observable case, the belief state that we need
to deal with can still be large since the policy starting/ending times are unknown.9 Since
an exact method is used by Pynadath and Wellman, the complexity for maintaining the
belief state would most likely be exponential to the number of levels in the PSDG expansion
hierarchy (i.e., the height of our policy hierarchy). On the other hand, our RB-SIS policy
recognition algorithm can handle partially observable states and the Rao-Blackwellisation
procedure ensures that the sampling algorithm scales well with the number of levels in the
policy hierarchy. Furthermore, as we have noted in subsection 3.4, if we consider compound
policies, the PSDG can be converted to an AHMM. In our framework, a compound policy
k 1 ; : : : ;  k 1 can be represented just as a normal policy, with a slight modication
k = (1)
(m)
to let the variable ek take on values between 1 and m + 1, where the value m + 1 indicates
that the compound policy has terminated. The policy recognition algorithm can then be
modied to also work with this model.
Similar to our AHMM and the PSDG, the recent work by Goldman et al. (1999) also
makes use of a detailed model of the plan execution process. Using the rich language of
probabilistic Horn abduction, they are able to model more sophisticated plan structures
such as interleaved/concurrent plans, partially-ordered plans. However the work serves
mainly as a representational framework, and provides no analysis on the complexity of plan
recognition in this setting.
Other work in probabilistic plan recognition up to date has employed much coarser
models for plan execution. Most have ignored the important inuence of the state of the
world to the agent's planning decision (Goldman et al., 1999). To the best of our knowledge,
none of the work up to date has addressed the problem of partial and noisy observation
of the state. Most, except the PSDG, do not look at the observation of the outcomes of
actions, and assume that the action can be observed directly and accurately. We note that
this kind of simplifying assumptions is needed in previous work so that the computational
complexity of performing probabilistic plan recognition remains manageable. In contrary,
our work here illustrates that although the plan recognition dynamic stochastic model can
9. Of course, if an SRD policy hierarchy is considered then full observability alone is enough.

494

Policy recognition in the Abstract Hidden Markov Model
be complex, they exhibit special types of conditional independence which, if exploited, can
lead to eÆcient plan recognition algorithms.
8. Conclusion and Future Work

In summary, we have presented an approach for on-line plan recognition under uncertainty
using the AHMM as the model for the execution of a stochastic plan hierarchy and its noisy
observation. The AHMM is a novel type of stochastic processes, capable of representing
a rich class of plans and the associating uncertainty in the planning and plan observation
process. We rst analyse the AHMM structure and its conditional independence properties. This leads to the proposed hybrid Rao-Blackwellised Sequential Importance Sampling
(RB-SIS) algorithm for performing belief state updating (ltering) for the AHMM which
exploits the structure of the AHMM for greater eÆciency and scalability. We show that the
complexity of RB-SIS when applied to the AHMM only depends linearly on the number of
levels K in the policy hierarchy, while the sampling error does not depend on K .
In terms of plan recognition, these results show that while the stochastic process for
representing the execution of a plan hierarchy can be complex, they exhibit certain conditional independence properties that are inherent in the dynamics of the planning and acting
process. These independence properties, if exploited, can help to reduce the complexity of
performing inference on the plan execution stochastic model, leading to feasible and scalable
algorithms for on-line plan recognition in noisy and uncertain domains. The scalability of
the algorithm for policy recognition provides the possibility to consider more complex plan
hierarchies and more detailed models of the plan execution process. The key to achieve this
eÆciency, as we have shown in the paper, is a combination of recently developed techniques
in probabilistic inference: compact representations for Bayesian networks (context-sensitive
independence, factored representations), and hybrid DBN inference which can take advantage of these compact representations (Rao-Blackwellisation).
Several future research directions are possible. To further investigate the AHMM, we
would like to consider the problem of learning the parameters of an AHMM from a database
of observation sequences, e.g., to learn the plan execution model by observing multiple
episodes of an agent executing the same plan. The structure of the AHMM suggests that
we can try to learn the model of each abstract policy separately. Indeed, if we can observe
the execution of each abstract policy separately, the learning problem is reduced to HMM
parameter re-estimation for level-1 policies, and simple frequency counting for higher-level
policies. If the observation sequence is a long episode with no clear cut temporal boundary
between the policies, the problem becomes a type of parameter estimation for DBN with
hidden variables, and techniques for dealing with hidden variables such as EM (Dempster,
Laird, & Rubin, 1977) can be applied.
Extensions can be made to the AHMM to make the model more expressive and suitable
for representing more complex agents' plans. For example, a more expressive plan execution
model such as the HAM model (Parr, 1998) can be considered so that state-independent
sequences of policies can be represented. The current model can also be enriched to consider
a set of top-level policies which can be interleaved during their execution. We expect that
these new models would exhibit context-specic independence properties similar to the

495

Bui, Venkatesh & West
AHMM, and Rao-Blackwellised sampling methods for policy recognition in these models
can be derived.
Acknowledgement

We would like to thank the anonymous reviewers for their insightful comments which have
helped improve both the presentation and the contents of this paper. Many thanks to Nam
Nguyen for his implementation of the distributed tracking system used in this paper.
References

Albrecht, D. W., Zukerman, I., & Nicholson, A. E. (1998). Bayesian models for keyhole
plan recognition in an adventure game. User Modelling and User-adapted Interaction,
8 (1{2), 5{47.
Andrieu, C., & Doucet, A. (2000). Particle ltering for partially observed Gaussian state
space models. Tech. rep. CUED-F-INFENG/TR. 393, Signal Processing Group, University of Cambridge, Cambridge, UK.
Bauer, M. (1994). Integrating probabilistic reasoning into plan recognition. In Proceedings
of the Eleventh European Conference on Articial Intelligence.
Boutilier, C., Dearden, R., & Goldszmidt, M. (2000). Stochastic dynamic programming
with factored representations. Articial Intelligence, 121, 49{107.
Boutilier, C., Friedman, N., Goldszmidt, M., & Koller, D. (1996). Context-specic independence in Bayesian networks. In Proceedings of the Twelveth Annual Conference
on Uncertainty in Articial Intelligence.
Boyen, X., & Koller, D. (1998). Tractable inference for complex stochastic processes. In
Proceedings of the Fourteenth Annual Conference on Uncertainty in Articial Intelligence.

Brand, M. (1997). Coupled hidden Markov models for modeling interacting processes. Tech.
rep. 405, MIT Media Lab.
Bui, H. H., Venkatesh, S., & West, G. (1999). Layered dynamic Bayesian networks for
spatio-temporal modelling. Intelligent Data Analysis, 3 (5), 339{361.
Bui, H. H., Venkatesh, S., & West, G. (2000). On the recognition of abstract Markov policies.
In Proceedings of the National Conference on Articial Intelligence (AAAI-2000), pp.
524{530.
Casella, G., & Robert, C. P. (1996). Rao-Blackwellisation of sampling schemes. Biometrika,
83, 81{94.
Castillo, E., Gutierrez, J. M., & Hadi, A. S. (1997). Expert systems and probabilistic network
models. Springer.
Charniak, E., & Goldman, R. (1993). A Bayesian model of plan recognition. Articial
Intelligence, 64, 53{79.
Cohen, P. R., & Levesque, H. J. (1990). Intention is choice with commitment. Articial
Intelligence, 42, 213{261.

496

Policy recognition in the Abstract Hidden Markov Model
Cooper, G. F. (1990). The computational complexity of probabilistic inference using Baysian
belief networks. Articial Intelligence, 42, 393{405.
Dagum, P., & Luby, M. (1993). Approximating probabilistic inference in Bayesian belief
networks is NP-hard. Articial Intelligence, 60, 141{153.
Dagum, P., Galper, A., & Horvitz, E. (1992). Dynamic network models for forecasting. In
Proceedings of the Eighth Annual Conference on Uncertainty in Articial Intelligence,
pp. 41{48.
D'Ambrosio, B. (1993). Incremental probabilistic inference. In Proceedings of the Ninth
Annual Conference on Uncertainty in Articial Intelligence, pp. 301{308.
Dawid, A. P., Kjrul, U., & Lauritzen, S. (1995). Hybrid propagation in junction trees. In
Zadeh, L. A. (Ed.), Advances in Intelligent Computing, Lecture Notes in Computer
Science, pp. 87{97.
Dean, T., & Kanazawa, K. (1989). A model for reasoning about persistence and causation.
Computational Intelligence, 5 (3), 142{150.
Dean, T., & Lin, S.-H. (1995). Decomposition techniques for planning in stochastic domains. In Proceedings of the Fourteenth International Joint Conference on Articial
Intelligence (IJCAI-95).
Dempster, A., Laird, N., & Rubin, D. (1977). Maximum likelihood from incomplete data
via the EM algorithm. Journal of the Royal Statistical Society B, 39, 1{38.
Doucet, A., de Freitas, N., Murphy, K., & Russell, S. (2000a). Rao-Blackwellised particle ltering for dynamic Bayesian networks. In Proceedings of the Sixteenth Annual
Conference on Uncertainty in Articial Intelligence.
Doucet, A., Godsill, S., & Andrieu, C. (2000b). On sequential Monte Carlo sampling methods for Bayesian ltering. Statistics and Computing, 10 (3), 197{208.
Forestier, J.-P., & Varaiya, P. (1978). Multilayer control of large Markov chains. IEEE
Transactions on Automatic Control, 23 (2), 298{305.
Fung, R., & Chang, K. C. (1989). Weighting and integrating evidence for stochastic simulation in bayesian networks. In Proceedings of the Fifth Conference on Uncertainty
in Articial Intelligence.
Geweke, J. (1989). Bayesian inference in econometric models using Monte Carlo integration.
Econometrica, 57 (6), 1317{1339.
Ghahramani, Z., & Jordan, M. I. (1997). Factorial hidden Markov models. Machine Learning, 29, 245{273.
Goldman, R., Geib, C., & Miller, C. (1999). A new model of plan recognition. In Proceedings
of the Fifteenth Annual Conference on Uncertainty in Articial Intelligence.
Hauskrecht, M., Meuleau, N., Kaelbling, L. P., Dean, T., & Boutilier, C. (1998). Hierarchical
solution of Markov decision processes using macro-actions. In Proceedings of the
Fourteenth Annual Conference on Uncertainty in Articial Intelligence.
Henrion, M. (1988). Propagating uncertainty in Bayesian networks by probabilistic logic
sampling. In Lemmer, J., & Kanal, L. (Eds.), Uncertainty in Articial Intelligence 2,
Amsterdam. North-Holland.

497

Bui, Venkatesh & West
Huber, M. J., Durfee, E. H., & Wellman, M. P. (1994). The automated mapping of plans
for plan recognition. In Proceedings of the Tenth Annual Conference on Uncertainty
in Articial Intelligence.
Jelinek, F., Laerty, J. D., & Mercer, R. L. (1992). Basic methods of probabilistic context free grammar. In Laface, P., & Mori, R. D. (Eds.), Recent Advances in Speech
Recognition and Understanding, pp. 345{360. Springer-Verlag.
Jensen, F. (1996). An Introduction to Bayesian Networks. Springer.
Jensen, F., Lauritzen, S., & Olesen, K. (1990). Bayesian updating in recursive graphical
models by local computations. Computational Statistics Quarterly, 4, 269{282.
Jordan, M. I., Ghahramani, Z., Jaakkola, T. S., & Saul, L. K. (1999). An introduction to
variational methods for graphical models. Machine learning, 37 (2), 183{233.
Jordan, M. I., Ghahramani, Z., & Saul, L. K. (1997). Hidden Markov decision trees. In
Mozer, M. C., Jordan, M. I., & Petsche, T. (Eds.), Advances in Neural Information
Processing Systems 9, Cambridge, MA. MIT Press.
Kalman, R. E. (1960). A new approach to linear ltering and prediction problems. Transactions of the American Society of Mechanical Engineering, Series D, Journal of Basic
Engineering, 82, 35{45.

Kanazawa, K., Koller, D., & Russell, S. (1995). Stochastic simulation algorithms for dynamic probabilistic networks. In Proceedings of the Eleventh Annual Conference on
Uncertainty in Articial Intelligence, pp. 346{351.
Kautz, H., & Allen, J. F. (1986). Generalized plan recognition. In Proceedings of the Fifth
National Conference on Articial Intelligence, pp. 32{38.
Kjaerul, U. (1992). A computational scheme for reasoning in dynamic probabilistic networks. In Proceedings of the Eighth Annual Conference on Uncertainty in Articial
Intelligence, pp. 121{129.
Kjrul, U. (1995). dHugin: A computational system for dynamic time-sliced Bayesian
networks. International Journal of Forecasting, 11, 89{111.
Lauritzen, S., & Spiegelhalter, D. (1988). Local computations with probabilities on graphical
structures and their application to expert systems. Journal of the Royal Statistical
Society B, 50, 157{224.
Liu, J. S., & Chen, R. (1998). Sequential Monte Carlo methods for dynamic systems.
Journal of the American Statistical Association, 93, 1032{1044.
Murphy, K., & Russell, S. (2001). Rao-blackwellised particle ltering for dynamic Bayesian
networks. In Doucet, A., de Freitas, N., & Gordon, N. J. (Eds.), Sequential Monte
Carlo Methods in Practice. Springer-Verlag.
Murphy, K. P. (2000). Bayesian map learning in dynamic environments. In Advances in
Neural Information Processing Systems 12, pp. 1015{1021. MIT Press.
Nguyen, N. T., Venkatesh, S., West, G., & Bui, H. H. (2002). Coordination of multiple
cameras to track multiple people. In Proceedings of the Asian Conference on Computer
Vision (ACCV-2002), pp. 302{307.

498

Policy recognition in the Abstract Hidden Markov Model
Nicholson, A. E., & Brady, J. M. (1992). The data association problem when monitoring
robot vehicles using dynamic belief networks. In Proceedings of the Tenth European
Conference on Articial Intelligence, pp. 689{693.
Parr, R. (1998). Hierarchical control and learning for Markov Decision Processes. Ph.D.
thesis, University of California, Berkeley.
Parr, R., & Russell, S. (1997). Reinforcement learning with hierarchies of machines. In
Advances in Neural Information Processing Sytems (NIPS-97).
Pearl, J. (1988). Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference. Morgan Kaufmann, San Mateo, CA.
Pearl, J. (1987). Evidential reasoning using stochastic simulation of causal models. Articial
Intelligence, 32, 245{257.
Pynadath, D. V. (1999). Probabilistic grammars for plan recognition. Ph.D. thesis, Computer Science and Engineering, University of Michigan.
Pynadath, D. V., & Wellman, M. P. (1995). Accounting for context in plan recognition, with
application to traÆc monitoring. In Proceedings of the Eleventh Annual Conference
on Uncertainty in Articial Intelligence.
Pynadath, D. V., & Wellman, M. P. (2000). Probabilistic state-dependent grammars for
plan recognition. In Proceedings of the Sixteenth Annual Conference on Uncertainty
in Articial Intelligence.
Rabiner, L. R. (1989). A tutorial on Hidden Markov Models and selected applications in
speech recognition. Proceedings of the IEEE, 77 (2), 257{286.
Sacerdoti, E. (1974). Planning in a hierarchy of abstraction spaces. Articial Intelligence,
5, 115{135.
Shachter, R. (1986). Evaluating inuence diagrams. Operations Research, 34, 871{882.
Shachter, R. D., & Peot, M. A. (1989). Simulation approaches to general probabilistic
inference on belief networks. In Proceedings of the Fifth Conference on Uncertainty
in Articial Intelligence.
Sutton, R. S. (1995). Td models: Modelling the world at a mixture of time scales. In
Proceedings of the Internation Conference on Machine Learning (ICML-95).
Sutton, R. S., Precup, D., & Singh, S. (1999). Between MDP and semi-MDPs: A framework
for temporal abstraction in reinforcement learning. Articial Intelligence, 112, 181{
211.
van Beek, P. (1996). An investigation of probabilistic interpretations of heuristics in plan
recognition. In Proceedings of the Fifth International Conference on User Modeling,
pp. 113{120.
York, J. (1992). Use of Gibbs sampler in expert systems. Articial Intelligence, 56, 115{130.

499


	
 
			 ! #"$ % 
'&)(+*-,/.00.213( 42*+5'(+*
0

6789:  ;)( .2<
0!(=?>8	%&;A@2<
0.

B$CEDGFEHJI7CEKLB$CNMO-PRQEP3OSMTVUXWOZY\[VM]I7CEK_^`WTbaca]IdGO-P3afegI
M3hE[iFjMlkmP3TbDGI7CEK
n

H:HJFEP3TbHSoqpr[)PtsjIuvQXWIHJI
Mwoyx`kzhEO-[)P3OSM3I2H:TVW|{}OJaFXWMaS~
n

n

QXQEP3[JEIuLTM3I2[NC

WK)[iPRI
M]hXua~yTVCEDEQyO-PRIuLOCNMa

#$`|3

cRiJ$¡ c¢$£$¤¥¢$$§¦$¨ $©#¤«ª

¬c­¯®°±²
³®´¶±A
µ ·­¶´®¸¸¥±2³¹º»½¼r¾?­±
¿ -$$© ¹ÀÁ±'µ Â¶¾²´Ã±ÄÅ±­¶´ÇÆwÈ®±2­¯´® ÉÊ2»¶±Ë­¯´'±²¡Ì2¾rÈ»½¸´Ã¾®²+±
Í ¾Ä-Â»³E¬c­¯®°±²
³®´'¾?®²+±ÅÎr±VÆwÈ
ÏÐ!±2¸§ÈÑÏ¶±2²
ÒÓÔ:ÓSÕÖ×?Ø
ØÕ7Ö¶ÕÙÚÆÈÑÏ¶Ð7±¸¥È
Ï±²
ÛÇÜÝ¾²´®­¶®Ê»¶±2Û]Þ²Ñ¾­È
±

ßáàârã½äå3æã
çJè7é2è7êë#ìrí½îìrê¶é2è!ï]ð¥êÅëÑñè-ï ë+ò¶í½óiô?õîrôrë+ð§êöbé2÷/ìrïÑï ð¥ø¯é7ìë+ð§ôrêÅì?÷§örôù+ð¥ë+ñ¶úÅï]ñ¯ìîrèSûùÑôròöñëRè7úÅüð¥ùÑð/éì?÷
ì ê¶íjë+ñè7ôrùÑè2ë+ð/éìr÷$ùÑè7ï+ò÷«ë
ïJé2÷§è7ìrù+÷§óýï+ñôþ:ð§êöNë+ñè)íð§ïÑé2ùÑð¥úÅð§ê¶ìëÑð¥ôêEü¯ôþèù:ôrõ]è7ê¶ï+èú)û¶÷¥èVé÷§ìï+ï+ð«ø¯èù
ïÿ'ë
r
ñ¶ìïÅû¯è7èê üùÑèîð¥ôò¶ï+÷¥ó ìrù+öòè7í ë+ñ¶ì?ë ë+ñèXï+è7ì?ù
é
ñmôrõ-ëÑñð§ïýé2÷/ìrïÑï ð¥ø¯éì?ë+ð§ôrê üôþèùÅð¥ê ëÑñèXí½è7ï+ð¥öê|ôrõ
ëÑñèGì?÷§örôù+ð¥ë+ñú ïNñ¶ìïÅúÅìrù+öð¥ê¯ì?÷§ð 7è7í ëÑñèXêè7è7ímë+ô ôrûëÑì?ð§ê ð¥êë+è7ù+ü¶ù+èëÑì?û¶÷¥èEé2÷/ìrïÑï ð¥ø¶è7ùÑï7
ÿ Sñ¶èùÑè2õ¡ôrùÑ
è 
ëÑñ	
è òè!ïëÑð¥ôêXô?õRþ:ñèë+ñè7ù-ôrê¶èVúÅð¥öñëñ¶ìîrèAëÑôjí½ð/ï+ü¯è7ê¶ï è)þ:ð«ëÑñGð¥êëÑèùÑüù+èëÑìrûð¥÷§ð¥ëójð§êGôrù
í½è7ù:ë+
ô 
rèè7ü
é÷§ìï+ï+ð«øéìëÑð¥ôê|ï ë+ùÑèêörë+ñ ð§ïÅûèð§êöù
ì?ð/ï è!í ð§êáì öù+ôþ:ð§êöÝêòúiû¯è7ù ô?õúÅìé
ñð§êèE÷¥è!ì?ùÑêð¥ê¶öyôùÚíìë
ì
úÅð§êð¥ê¶öXü¶ì?üèù
ï
ÿ Sñè üò¶ù+üôï+èÅô?õÇëÑñð/ïbü¶ì?üèùbð/ïë+ôGï ë+ò¯í½óGûô?ë+ñ ëÑñèôù+èë+ð/éì?÷§÷§óGì?ê¶í èúÅüð§ùÑð§é7ì?÷§÷¥ó
ëÑñèýüùÑôrû¶÷¥è7ú 
ÿ ð§ùÑï 
ë ]þèÚüùÑôîð§í½èýêò¶úNè7ù+ôò¶ïbùÑè7ï+ò÷¥ëÑïVöð¥îð§êöGð§ê¶ï+ð¥öñëið¥êë+ôGë+ñèjñ¶ì?ù
í½êè!ï+ïbôrõ:ë+ñè
ï+ð¥úÅü÷§ð/é2ð¥ë
ó Ãìré7é2òù
ìréó ë+ù
ìríè
ô yõ¡ôrùîrô?ëÑð¥ê¶öýé2÷/ìrïÑï ð¥ø¶è7ùÑï7
ÿ SñèêXþèVüùÑôîð§í½èiì?êX
è Úéð¥è7ê
ë ë+ô
ü Ãí½ôþ:ê
ìrê¶íüùÑòê
è Eð§ê¶í½ò¯éë+ð§ôrêmñèòùÑð/ïëÑð§
é !"cúÅìrð¥ê¶÷¥óí½èùÑð§îrè7íyõ¡ùÑôrútù+è!é2è7êëVùÑè7ï+ò÷¥ëÑï)ôrêë+ñ¶èÚþ#è!
ì 

÷§è7ìrù+êð§êöì?ê¶íiû¯ôôïëÑð¥êöõ¡ù
ì?úÅèþôrù 
½ï#
ÿ 'ë3ð/ïëÑôAôrò
ù 
êôþ:÷¥è!í½örèÇë+ñèø¶ù
ï ë3ì?ë ëÑèúÅü½ë]ë+ôûòð§÷§íNìîrô?ëÑð¥ê¶ö
é÷§ìï+ï+ð«ø¯èùìïAìÚû¶ìï è)õ¡ôrùÑú)ò÷/ìÚò¶ï+ð§êöÚëÑñèiþè7
ì 
E÷¥è!ì?ùÑêð¥ê¶öÚõ¡ù
ì?úÅèþôrù 
%$¡ë+ñèNôrê¶è)þ:ñð/é
ñÝþSìrïüùÑèî&ð 
ôò¶ï ÷§ó ñð§örñ÷§óÚï+ò¶ééè7ïÑïõ¡ò÷õ¡ôùSíè7é2ð/ï+ð¥ôêÚë+ùÑèèð§ê¶í½ò¶é2ë+ð§ôr(
ê '¶ì?ê¶íýêô?ëSëÑñèï ë+ùÑôrê¶öi÷§è7ìrù+êð§êö)õ¡ùÑìrúNè7þ#ô)ù 

$ìrïVò¯ï ò¶ìr÷Rõ¡ôù)ï ò¯é
ñ é2÷/ìrïÑï ð¥ø¶èù
ïbþ:ð¥ë+ñ ûôôï ë+ð§êö '÷¥*ð 
rèÚìrüüùÑôìé
ñè7+ï 'ÿ ,Áñð§÷¥èÚð¥ëiò¯ï è!ï)ìEþè÷§&÷ .
êôþ:ê
ð§ê¶í½ò¶é2ë+ð§ôrêïÑé
ñèúÅèEüùÑèîð§ôrò¶ï+÷¥ó ï ò¯éé2è!ï+ï õ¡ò÷:ð§êÁô?ëÑñèùýé÷§ìï+ï+è7ïÅôrõAéôrê¶éèü½ëÚùÑèü¶ù+è!ï è7êë
ìëÑð¥ôê¶/
ï Çë+ñò¶ï
ú 
ì 
ð§êöð«ëÚè!ìrï+ó ë+ô ð§úÅü÷§èúÅèêëýì?ê¯í éôrúÅü¶ìrù+
è 01+! ìr÷§ï+ôù+è7÷¥ð§è7ïÅôêáù+è!é2èêë ôrù ê¶èþ ù+è!ï ò÷¥ëÑï
þè örð§îrè ì?ûôròëVü¶ì?ù+ë+ð/é2ò÷/ì?ùVé7ìrï+è7ïAôrõûôôï ë+ð§ê2
ö 
êôþ:ê ìïbü¶ìrù ëÑð«ëÑð¥ôêyûôôï ë+ð§êöGì?ê¶í ù
ì?3
ê 
ð§êöE÷¥ôï+ï
ûôôï ë+ð§êö¶5
ÿ 476½üèùÑð¥úÅèêë
ì?÷:ùÑè7ï+ò÷«ë
ïNôrê|ë+ñð§ù ë8
ó 'ôrêèXí½ôú ì?ð§ê¶/
ï #úÅôï ëÅôrõþ:ñð/é
ñ ù+è!ìrí½ð§÷¥ó ìîìrð¥÷/ì?û÷§
è 
ëÑèê¶íÅëÑô)í½ð/ï ü¶÷§ìóië+ñèì?ûð§÷§ð«ëóNô?9
õ 1+!áë+ôVü¶ù+ô½í½ò¶éè-ï+úÅìr÷¥:÷ ìrééòù
ìë+
è ìrê¶íÅð¥êëÑèùÑüù+èëÑìrû÷¥èí½è7éð§ï+ð¥ôê
éôrúÅúÅð«ë+ë+èè!ïÿ

;7<2=8> ã½ä3?@BA-æã3CD? >
E"FGHFI(JLKM#N8KIOGHFPRQSI2JT9FUPVJW9M#X-YZ7NYJQSI#[G]\SKPPQ_^`G]KaJQ_Y3IK\_[Yb/QSJT9cPdT9KNF	eObY3W#[3T(JdFc2fOQ_bQSG]K\#KI9M
JT#F]YbF]JQgG]K\bFPW9\SJPhG]\SFKab/\_XiP/T#YjUQgI#[kJT#FM9QSPGHbQScQSI9KaJQSY3IlfmYjnF]boYZBFIOPVFc!e`\_F2G]\SKPPQ_^OF]b/P2p.qnKW9F]b
rts Y3TOKNuQwv`xyyy{z#qnbFQScKIvOxyy|{z#}hQSF]JVJVF]b/QSG/Tv{~auzOhfOQ_JV r KG]\SQgI7vOxyyy{zOuG/TOKafOQ_bF r #QSI#[F]bv
xyy3k"T#FPVFcF]JT#Y{MOPoeOKPQSG]K\g\_XbF\SXY3INYJQgI#[lJT#FM#FG]QgPQ_Y3IYZLQSI9M9QSN{QSMOW9K\G]\SKP/PQ_^9F]b/PoQgI9PQSM#F
KI%FI9PVFceO\_FJnQgPBj	QSM#F\_X2KG]GHF]f9JVFM7v`KI9M%ZYb/cK\S\_Xf9bYNFIQSIGHF]b/JKQSIG]KPVFPpDuGT9KafOQ_bFvu#bFWOI9M7v
qLKabJ\_F]JVJ]v r F]Fvhxyy{zuG/T9Kaf`Q_bF r uQSI#[F]bvUxyy3vLJT9KaJ2JT#FQ_b2fmYjnF]bKGHJW9K\g\_XbF\gQ_FP-Y3IJT#F
KaeOQS\gQ_JX%JVYeOW9Qg\SMkfmYJVFIJQSK\g\_XHk\gKab[F!G]\SKPP/Q_^9F]b/P]R)JUTOKP"F]NFIieF]FIYeOPVF]bNFMFH {fmF]b/Qgc2FIJK\g\_X
JT9KaJPW9GT¡KI1FIOPVFc!e`\_FiG]KItPVY3cF]JQSc2FP%emFiKP\SKab[F5KPp:Ybl\SKab[F]b%JT9KI`JT#F5M9KaJK¢W9PVFM1JVY
eOW9Qg\SM£JT#FFI9PFc!eO\SF¤p  Kab/[3QSI#FKI(JW r }hQSF]JVJVF]b/QSG/Tvxyy3¥l¦t"T9FI7vnK¤PQSc2f`\_Fl§(W9FPVJQ_Y3I¨Kab/QgPVFP]v
I9Kc2F\SX2jUT9KaJBQgPRJT#FQSI(JVF]bFPVJnKG]W9PJVY3c2F]b©G]KI%TOKNFoQSIWOPQSI#[!P/W9G/TkK!G]\gKPPQ_^9F]bv(QSI9PJVFKMYZP/QSc2fO\_F
ª

.00. %%`«!;ÑV
;L¬A2
n­3
!¥9J
R®8!	%&%¯¶		r&2%%g°2 ;¯



\_Y{Y{W9fOPdQSIJT#F	M9KaJKuv#KI9MW9PQSI9[!K\_[Yb/Q_JTOcPRPWOG/T%KPBI#FKab/FPVJBI#FQS[3TemYbBG]\gKPPQ_^9F]bPUp  Kab/[3QSI#FKI(JW
r }Q_F]JVJVF]b/QgG/T7vxyy3¥
 ZJVF]b%PVY3c2FYZJT#Flc2Y3PJbFcKab aKaeO\_FkbFGHFI(JPVJWOM9Q_FP2QSI¢NYJQSI9[G]\SKPPQS^OG]KaJQ_Y3IK\_[Yb/QSJT9cP]v
PVY3c2F"KW9JT#Yb/PdT9KNF"fmY3QSI(JVFMY3W9JJT#F"QSI(JVF]bFPVJJVYe9bQSI#[hJT9QSP G]\SKPPQS^OG]KaJQ_Y3IfmYjnF]bdJVY!M9KaJKocQSI9QSI#[#v
KI9MlcYbFof9bFG]QSPF\_XJVYcK FQSI(JVF]bf9bF]JKae`QS\SQ_J)XKG]\_FKabUQgPPW#FoQSIkNYJQSI9[G]\SKPPQS^OG]KaJQ_Y3IK\_[Yb/QSJT9cP
p.qLKW#F]b r s Y3T9KN{Qwv0xyyy{zE	QSM#[F]jLKXv  KM9Q_[3KIvOEUQSGT9Kab/M9PY3I7v r 	
  s KI9Fvxyy3U{Y3c2F!KW#JT9Yb/P
[YF]NFI¤Z.W#bJT#F]bv0KI9MKab[3W9FJT9KaJ!JT9FQSc2fmYbJKI9GHF2YZ"QgIJVF]bfObF]JKaeOQS\SQSJXiTOKPoemF]FIcKab[3QgI9K\SQ_]FM
QSIkJT#FM9FPQ_[3IkYZ JT#FPVFK\_[YbQ_JT9cP]v#KI9MlfOW#JLemFT9QSI9M%JT#FI#F]FMlJVYM#F]NuQSPVFoG]\SKPPQS^9F]b/PLjUQ_JTPJVbY3I#[
G]\SKPP/Q_^OG]KaJQ_Y3IfYjBF]bop.EUQgM#[F]jnKX2F]JnK\D_vxyy3RqLW#JnQSI(JVF]bf9bF]JKaeOQg\SQ_JXK\SPVY[YNF]b/IOPBJT9F	§{W9K\SQ_J)X-YZ
K-c2Y{M9F\Oe{Xf9bYN{QgM9QSI#[KI9PjBF]b/PnJVY2T#Yj¡QSJBQSPBjBY
b {QSI9[#v{KI9Mv{c2Y3PJnQScfYb/JKIJ\_Xv(jUT(X  G]GHYb/MOQSI#[
JVYqLKW#F]b rs Y3T9KN{Qp+xyyy3vLPVJVb/QSN{QSI9[iZ:YbGHY3c2f9bFT9FI9PQ_eOQg\SQ_JX5QSI£NYJQSI#[c2YuM#F\SPQSP-Y3I#FYZ	JT#F
f9b/QgI9G]Q_fOK\f9bYeO\SFcPmbF§{W9Q_b/QSI9[RZ.W#JW#bFdQSI(NFPVJQ_[3KaJQSY3I9P]0UT#F]XhK\gPVY©bFcKab hJT9Ka
J +NYJQgI#["JVFG/TOI9QS§{W#FP
W9PWOK\S\_XbFP/W9\_J©QSIQSI9GHY3cf9bFT#FI9P/Q_eO\_FhG]\SKPPQ_^OF]b/PLJT9KaJUG]KI9I9YJ"FKPQS\_X%emFoPT#Yj	IJVYW9PVF]bP u
 Y3cf9bFT#FI9P/Q_eOQS\SQSJX¤QgP]v©Y3IJT#FiYJT9F]blT9KI9M7v"K£T9Kab/McQSI9QgI#[QSPP/W#F£p.qLW K r  F]Fvh~a#x
 
Q_J!M9F]fFIOM9PY3IfOKab/KcF]JVF]b/PP/W9G/TKPJT#FJ)X(fmFYZ©G]\SKP/PQ_^9F]b/PoWOPVFM7vJT9FK\_[Yb/Q_JTOc QSI9M9WOG]QSI#[kJT#F
G]\SKPP/Q_^9F]b/P]v{JT#FoW9PVF]b©cQgI9QSI#[JT#FY3W#JVfOW#JP]vuF]JGa"dUT#Y3W#[3T%JT#F§{W9KIJQS^OG]KaJQ_Y3I%YZ0QSI(JVF]bf9b/F]JKaeOQS\SQ_J)X
QSPPJQS\S\YfmFI#FMQgIJT#F[FI9F]b/K\RG]KPVFp.qLW K r  F]Fv ~a#xvJT9F]bFKabF%PVY3c2F%G]\SW#FPGHY3cQgI#[lZ:bY3c
JT#F]YbX-KI9M-f9b/KGHJQSGHFLYZcKG/T9QgI#F©\_FKab/I9QSI9[ 8M9KaJK	cQSI9QSI#[	QSI9M9QSG]KaJQgI#[	PVY3cFnfmYJVFI(JQSK\S\_XQSIJVF]b/FPVJQSI#[
bF§{W9Q_bFcFIJP©KI9MGHY3c2f9bY3cQgPVFP©JVYM#F]NuQSPVFKIlF G]Q_FI(JU\_FKab/I9QgI#[ 8cQSI9QgI#[K\_[YbQ_JT9c
 ^9bPVJobF§{W9Q_bFc2FI(JZ:Yb!JT#F%K\_[Yb/Q_JTOc QSPoYe{NuQ_Y3W9P\_X5Q_JP![FI#F]b/K\SQ_KaJQSY3IKaeOQS\gQ_JQ_FP j	Q_JT#Y3W#J
G]\SKPP/Q_^OG]KaJQ_Y3IkPVJVbFI9[JT7v9Q_JLQSPnfY3QgIJ\_FP/PBJVYPFKab/G/TkZ:Yb"QSI(JVF]bFPVJQSI#[c2YuM#F\SPnYZJT9FM9KaJKu  PFGHY3I9M
r  KPG]W#F\wvnxyy {z
bF§{W9Q_bFcFIJ]vcYbFbF\SKaJVFMJVYcQSIOQSI#[#vQSPoJT9FPQ_]FYZLJT#FG]\SKP/PQ_^9F]b/Pp 	YuG  
r  Kaf9f{Xv©xyy3)Z"KG]G]W#bKaJVFvRKiG]\gKPPQ_^9F]bjUQ_JTbFPVJVb/QSGHJVFM£PQ_]F%G]KI¢\_FKMJVY5Z.KPVJVF]b2KI9M
	Y{
G  
M#F]F]fmF]bLW9I9M#F]b/PJKI9M9QSI#[# "T9QSPBQSPBYe(NuQ_Y3W9P\SXI#YJnKIkKaeOPY3\SW#JVFUbW9\_Fv{b/KaJT#F]bLKI%KafOf9bY #QScKaJVFhf9bY {X
Z:YbQSIJVF]b/f9bF]JKaeOQS\gQ_J
X hfOKaJT#Y3\_Y[3QSG-G]KPVFPoFH #QSPVJoQSIijUT9QgG/T7vmZ:YbhFH #Kc2fO\SFvK%\gKab[F2KI9M5W9Ie`K\SKI9GHFM
JVbF]FG]KI emFNF]bXPQSc2fO\SF%JVY¤W9I9M#F]b/PJKI9M p.qLW VK r  F]Fv"~a#x
 UYJVFiJT9KaJQSIJTOQSPFH uKcfO\_Fv
JT#FoKW#JT#YbPLFH {fO\gKQSIJTOKaJ©JT#FJVbF]FQSPLPQSc2f`\_FUemFG]KW9PVFoK\S\mQ_JP©I9Y{M#FPLG]KIkemFoM#FPGHb/QSeFM%W9PQgI#[!Z:F]j
!#"$&%  % "T#F]b/F]ZYbFv3P/QSc2fO\SQgG]Q_JXoQSP K\SPVYoKPPVYuG]QSKaJVFMJVYoKPT#YbJ M#FPGHbQ_f9JQ_Y3I7vaeOW9J W9P/QSI#[	KhfOKab/JQSG]W9\SKab
G]\SKPP"YZ GHY3IOGHF]f9J"bF]f9b/FPVFIJKaJQSY3I7
 JT9Q_bMf`Kab/Kc2F]JVF]bBQg(
I 'OW#FI9G]QgI#[hGHY3cf9bFT#FI9P/Q_eOQS\SQSJXQSP JT#F	I9KaJW#bF©YZmJT#F"K\_[YbQ_JT9)
c  PY3W9JVfOW#J]
+I9PQSM#FRJT#FLe9bY3KM-PGHYfmFBYZOPX{cemY3\SQSGRG]\gKPPQ_^9F]bP]v8PY3c2FnG]\gKPPVFP YZ`GHY3I9GHF]fOJ b/F]f9bFPVFI(JKaJQ_Y3I9P Kaf9fmFKab
JVY5Y *F]b2Ki[bFKaJVF]bGHY3c2Z:YbJ-ZYb2QSI(JVF]bf9bF]JKaJQSY3I7i}hFG]QSPQSY3IJVbF]FPemF\_Y3I9[JVYJT9QSP-PVF]Jkp.qnbFQgcKI7v
#bFQgM9cKI7vo\SPT#FI7v r {JVY3I#Fv0xy +(vJT#Y3W#[3TJT#F]XK\SPVYbKQSPVF!PVY3cF!QSI(JVF]bf9bF]JKaeOQg\SQ_JXf9bYeO\SFc,
P 
s Y3T9KN{Q r {Y3cc2F]b/^9F\SMp+xyy3©§{W#YJVFJTOKaJ
+JT9FLG]\gQ_FIJP.- eOW9P/QSI#FPP0W9PVF]b/P0/uZ:Y3W9I9M-PVY3c2FLQSIJVF]b/FPVJQSI#[	fOKaJVJVF]b/I9P

SQ IJT#FLM#FG]QSPQ_Y3IJVbF]FP]v
e`W#JBJT9F]XM9QSMI#YJLZF]F\JT#FoPVJVbW9GHJW#bF	jnKP©I9KaJW9b/K\ZYbLJT#FcdUT#F]XjnF]bFo\_Y(YuQSI#[ZYb
JT9Y3PVF!J)jBYYb	JT#b/F]F!KaJVJVb/Q_eOW9JVFPUKI9MNaK\SW#FP-p214351LKGHY3c!eOQgI9KaJQ_Y3IYZ[F]Y[b/Kaf`T9QSGKI9M
QgI9M9W9PVJVbQ_FP0jUT#F]b/F	PVY3c2F]JTOQSI#[VQgIJVF]bFPJQSI#[6jLKPLT9Kaf9fmFI9QSI9[#+IKM9MOQ_JQ_Y3I7v3JT9F]XZF\SJ
QSJdjnKPBJVY{Y-\SQgcQ_JQSI#[JT9KaJBJT#F	I9Y{M#FPRQSIKM#FG]QSPQ_Y3IJVbF]FUbF]fObFPVFI(JRb/W9\SFPJT9KaJLK\S\9PVJKabJ
j	Q_JTkJT#F!PKcF!KaJVJVb/Q_eOW9JVFP]7 
 \_JT#Y3W#[3TI9YJ\SQScQ_JQgI#[Z:bY3c KG]\SKPP/Q_^OG]KaJQ_Y3I¢NuQ_F]j"fmY3QSI(J]vdJT#FYb/M9F]b/QSI#[YZhI9Y{M#FPfOb/Q_YbJVY
]G \SKPP/Q_^OG]KaJQ_Y3IG]KIJT9F]bF]ZYb/FcKF!Q_J©W9I9GHY3cZYbJKae`\_FoJVYcQSI#FoK2M#FG]QgPQ_Y3IkJVbF]F8	YJQSGHFJTOKaJ©JT9QSP
f9bYe`\_Fc cQS[3TJT#Y3\SMZYb2KI(XG]\SKPPYZUGHY3I9GHF]f9JbF]fObFPVFI(JKaJQ_Y3I¢QSIJVF][bKaJQSI#[iKI£Yb/M9F]b/QSI#[if9b/Q_Yb
JVYkG]\SKPPQ_^`G]KaJQ_Y39I BM9FG]QSPQ_Y3Ii\SQSPVJP!p.E	Q_NFPVJ]v xy3¥vK\_JVF]b/I9KaJQgI#[M#FG]QSP/Q_Y3IlJVbF]FPp.#bFWOI9M r  KPY3I7v
:<;>=



££½£iwc©

	
ª£

xyyy3v7e9b/KIOG/T9QSI9[2f9bY[b/KcPp  KI9PVY3W#b r  G  \g\_FPVJVF]bv7~av7F]JGaU"T9F]bFFH #QSPVJP]vmT#YjnF]NF]bv7K
JX{fmFLYZ`G]\SKPP/Q_^9F]b/P Y3IjUT9QgG/T-bF\SKaJVFMfOKafmF]b/P Kaf9fmFKabJVYoemFB[FI9F]b/K\S\_X!WOI9KI9QSc2Y3WOPY3IJT#FQSb cQSI9QSI#[
KaeOQS\gQ_JQ_FP  M9QgP VWOI9GHJQ_NFBI9Yb/cK\{ZYbc ZYb/c-W9\SKP"p.} h P]v(KI9M-JT#FQSbdI(W9cF]bY3W9P FH {JVFIOPQ_Y3I9PvJT9KaJdQSP]v
M9QSP VW9IOGHJQ_Y3I9P"YZBGHY3I VWOI9GHJQ_Y3I9P]o+I(JVF]bFPVJQSI#[3\SXFI#Y3W#[3T7v7JT9QgP	QSPhJT#F2G]\SKP/P	j	T9QSG/Tc2YJQ_NaKaJVFM5FKab/\_X
jnYb {Pop.KI9MkK-[bFKaJ©Kc2Y3W9I(JLYZjnYb {PLKaZ:JVF]bjLKab/M9PRY3I%JT#FhjBF\S\  {I#YjU
I    JT9F]YbXYZ0\SFKab/I9QSI#[
p dK\SQSKI(J]vUxy +#vUxy 3vBfOKabJ\_XeFG]KWOPVFYZUJT#FkJVFI9M#FI9GHXT{W9cKIOP-PF]Fc JVYT9KNFJVY5bF]f9bFPVFI(J
uI#YjU\SFM#[FW9PQgI#[PQScQS\gKab/\_XlPT9KafmFM5b/WO\_FPp dK\SQSKI(J]vnxy 3"TOQSPG]\SKPP!QgPoK\SPVYlJT#FM9W9K\ YZLJT#F
Y3I#FQScfO\SQSG]Q_J\SX%W9PFM5e(XqnW VK r  F]Fpw~a#xoJVYlG]KPVJoJT#FQ_bP/Q_]F2c2FKPW#bFZ:YbM#FG]QSPQSY3IiJVb/F]FPp:JVY
PVJKaJVFjUT#F]JT#F]b©JT#FGHY3I9GHF]f9J"bF]fObFPVFI(JVFMQSP©PQgc2fO\_FhYb	I#YJ
JUQSPLY3W#b	KQSc QSIJTOQSPLfOKafmF]b©JVYf9b/YfY3PFhJT9F]YbF]JQSG]K\b/FPW9\_JP"KIOMlKaf9f9bY uQgcKaJQ_Y3IK\_[Yb/QSJT9cP
bF\SKaJVFMiJVY%JT#F-QgI9M9W9GHJQ_Y3IkYZRNF]bXfOKabJQSG]WO\SKabUNYJQSI9[%G]\SKP/PQ_^9F]b/PvOM#b/KjUQSI#[JT9FQ_bUbY{YJPhY3IiP/QSc2fO\_F
b/W9\SFUPVF]JPp.\S#Q Fh} 	dvujUQ_JTJT#FhYe +FGHJQSNFhJV	
Y F]F]flKJVb/KM#F]Y *emF]JjnF]FIPQScfO\SQSG]Q_J)X-KIOMKG]G]W#bKGHX
W#bkKQSc QSP%K\SPVY¢JVY¢f9bYNFJT9KaJ]vQSI JT9F5I{W9c2F]b/Y3W9PkQSI9M9W9GHJQSY3I K\_[Yb/QSJT9cPkK\_bFKM#X f9bYfmY3PVFM
JT#bY3W9[3T#Y3W#JhJT#F-cKG/T9QSI9F\_FKab/IOQSI#[KIOMiM9KaJKkcQgI9QSI#[GHY3cc-W9I9QSJQ_FP]vmPVY3c2F-YZdJT#Fcvmf9bF]NuQ_Y3W9P/\_X
W9PVFMiQSIM9FG]QSPQ_Y3IJVb/F]FP	KI9MM#FG]QSP/Q_Y3Il\SQSPJP"QSI9M9WOGHJQ_Y3I7vOG]KIiemFFKPQS\_XKM9KafOJVFMJVY%GHYfFjUQ_JTJT9QSP
Ye VFGHJQ_NFvaJT#F]bF]e{X\_FKM9QSI9[©JVY"FKPVX DJVY QSc2fO\_FcFIJLp.KI9M!GHY3c2f`KabF7K\_[YbQ_JT9cP] "T#FdI#FH uJ0PFGHJQ_Y3I
f9bFPFIJP"KPVX{I(JT#FPQgPLYZ Y3W9bUGHY3IJVbQ_eOW#JQ_Y3Iv{j	T9QSG/TQgP©M#F]JKQS\_FMlQgIkJT#FbFPVJ©YZ JT#Fof`KafF]b
 < AJä? >

ã½äC àBA:ã3C?

>

 T9QgPBf`KafF]b"QgPBfOb/QSI9G]Q_f`K\S\_X2GHY3I9GHF]b/I#FMljUQ_JT%JT#FoJT#F]YbF]JQgG]K\KI9MkFH ufF]bQSc2FI(JK\7PVJW9M#XYZ0KPVF]J©YZ
"
NYJQSI#[G]\SKP/PQ_^9F]b/P	jUT9QgG/TjBFJT9QgI(QSPh\SQ#F\_XJVY%fObYNuQSM#FKIKG]G]W#b/KaJVFKI9PjBF]boJVYkJT#F2PQScfO\SQSG]Q_J)X
KG]G]W#b/KGHXJVb/KM#F]Y *  M9FG]QSPQ_Y3IGHY3ccQ_JVJVF]FPp.}  "p 	Y{
G  r  KP/G]W#F\wvmxyy 3R}  QSPRQSI#Z:Yb/cK\S\_XJT#F
qnY(Y3\SFKIcWO\_JQSG]\SKPPhFH uJVFI9PQ_Y3I5YZBfmY3\_X{I9Y3cQSK\ M9QSPGHb/QgcQSI9KI(JUZ.W9I9GHJQ_Y3IOP]  M#FG]QSPQ_Y3I5GHY3ccQ_JVJVF]F
GHY3I(JKQSI9PdbW9\_FP]v3FKGT%YZJT9FPVFUemFQSI#[KfOKQ_bhp.cY3I#Y3cQSK\wvNFGHJVYb
 RKGTcY3I#Y3cQSK\9QgPRKGHY3I9MOQ_JQ_Y3I
JT9KaJ]v	jUT#FI¨^ObFM7v©bF]JW#bI9PQ_JPNFGHJVYb  ZJVF]bkFKG/TtcY3I#Y3cQSK\	T9KP%eF]FI1JVFPVJVFM7vUJT#FP/W9c YZ
JT#FbF]JW9b/I#FMNFGHJVYb/PQgP%WOPVFMJVY¨JK FJT#FM#FG]QSP/Q_Y3I7 "TOQSPkKM9M9Q_JQ_NFZ.KPT9Q_Y3IZ:YblGHY3c!eOQgI9QSI#[
b/W9\SFP!QSPKaeOPVFI(JZ:bY3c G]\SKPPQSG]K\BqnY(Y3\_FKI¢G]\SKP/PQ_^9F]b/P!PW9G/T£KP}hFG]QSPQ_Y3I£b/F]FP%p.}	Yb-}hFG]QSP/Q_Y3I
 QgPVJP"p.}  9W9bJT#F]b/c2Yb/FvW9I9\SQ FBJT#FPF©JjnY!\SKaJVJVF]bRG]\SKP/PVFP]v3JT#F"G]\gKPPQ_^9F]bGHY3I(JKQSI9PdKae`PVY3\SW#JVF\_X-I#Y
Yb/M#F]bQSI#[#vI#FQ_JT#F]b Y3I-NaKab/QSKaeO\_FP©p.W9IO\S#Q FB}	v3I9Yb Y3Ic2Y3I9Y3cQSK\SP©p.W9I9\g#Q FB}   ¡T#FIP(W G]Q_FIJ\SX
PcK\g\}  PKabFeOWOQS\_JKI9MKM#F§{W9KaJVFb/FPVJVb/QSGHJQ_Y3IOPoKabFJK FI7v KI#F]j M9Qgc2FI9PQ_Y3I5QSIQgIJVF]bfObF]JQSI#[
JT#FG]\SKPP/Q_^9F]b2QSP-Ye9JKQSI#FMvjUT9QSGT£M9Y(FP2I#YJFH #QSPVJZ:Yb}h Yb2}   hKc2F\_XvnKIX¤FH uKcfO\_FG]KI
PKaJQSPZXcYbFJT9KI%Y3I#Fb/W9\_FvuKI9MK}  G]KIkJT9F]bF]ZYb/FhemFoQSI(JVF]bf9bF]JVFM%e{Xc2FKI9PLYZ0N8KabQ_Y3W9PBb/W9\_F
%<$ %   % p.QSIK2IOKQ_NFoGHY3INF]b/P/Q_Y3IYZ K2}h YbUK2}  QSI(JVY2b/W9\_FPVF]JP]vOKI(X%FH uKc2f`\_FoPKaJQSPV^9FPLFH #KGHJ\_X
Y3I#FlbW9\_F }hFG]QSPQSY3I¨GHY3ccQ_JVJVF]FPbFPVFceO\_FYb[FI#F]b/K\SQS]FlYJT#F]bbW9\_FPVF]JPip  Y3T#FI r #QSI#[F]bv
xyyy3 +I1JT9QSPfOKafmF]bv"JT#FKW#JT#YbP%GHY3IOPQSM#F]bk} 	 PT9KafmFMZ:Yb/cWO\SKP]vUQSI1jUT9QgG/T1JT#FiY3W9JVfOW#J
YZKcY3I#Y3cQSK\"QgPI#YJK¤G]\SKPPp.G]K\S\_FM +fmY3PQSJQ_N2F v©eOW#JKp.I#Y3!I I#F][3KaJQSNFGHY3I#^`M#FI9GHFiQgIJT#F
G]\SKPP/Q_^OG]KaJQ_Y3I2KPRfY3P/Q_JQ_NF  M9F]Z:KW9\SJ G]\gKPPf9bFMOQSGHJPJT#F©YJT#F]bnG]\SKPP]v(G]K\S\_FM VI#F][3KaJQSN2F p:JT9QSPRQSPdK
PVF]JVJQSI9[ojUQ_JT-JjnY!G]\SKPPFP  Y3c2fOW#JQgI#[	JT9F"G]\SKPP YZmKI2YeOPVF]bNaKaJQ_Y3IemY3QS\SP M#YjUIJVYPW9ccQSI#[hJT#F
GHY3I#^OM9FI9GHFPRYZ7JT9FUb/W9\SFPdQ_JBP/KaJQSPV^9FP]v{KI9MJT9FIM#FG]QgM9QSI#[oJT#F	fmY3PQ_JQ_NFUG]\gKPPBQSZJT9F	PW9c QSPd[b/FKaJVF]b
JT9KI¤]F]bY#vdKI9M¤JT#FkI#F][3KaJQ_NFkG]\SKPP-YJT#F]bjUQgPVF}hFG]QSPQ_Y3I£GHY3ccQSJVJVF]FP-Kab/F%Ki[FI#F]b/K\SQSKaJQ_Y3IYZ
JT#FPVFoZ:Yb/c-W9\SKP]vuQSI%jUT9QgG/T%jBFbFcYNFJT#FoPVF]JVJQgI#([  P"GHY3I9PVJVbKQSIJp:J)jBYG]\gKPPVFPBKI9MKW#JT9Yb/Q_]FJT#F
c2FcemF]b/PT9Q_ff9bFM9QSGHJQSY3IJVY2KabeOQ_JVbKabX2G]\SKPPVFP]vuJT#F]b/F]e(X\SFKM9QSI#[JVY2KJVb/W#F	NYJQSI#[G]\SKPPQ_^OF]b"T9QSP
NYJQSI#[kZ.KPT9Q_Y3I5QSPK%Z:FKaJW#bFJT9KaJM#FG]QSP/Q_Y3IiGHY3ccQ_JVJVF]FPPTOKabFjUQ_JTM#FG]QSPQ_Y3IJKaeO\SFPp s Y3T9KNuQ r
{Y3ccF]b^9F\SM7v`xyy3#
 "	YjnF]NF]bv#M#FG]QSPQ_Y3IJKaeO\_FPnG]\SKPPQS^9F]b/PdKabF	eOKPVFMY3IcK VYb/Q_J)X2NYJQSI#[-YZ7JT#F
:<;%$



FH #Kc2fO\_FP-p.KI9MI#YJUYZb/W9\_FPv#YNF]boK2bFPVJVb/QgGHJVFM +jUQSIOM#YjYZ JT9F!M#FPGHb/QSf9JQ_Y3INaKab/QSKaeO\SFP]R"T#F]X
I#FGHFPP/Q_JKaJVFJT#F2PVJVYb/QSI#[%YZRcKI(XlFH #Kc2fO\_FPvmKIOMiJT9F-QSI(JVF]bf9b/F]JKaJQ_Y3I9PhYZdJT#F2M9KaJKkG]KIY3I9\_XlemF
cKM#FJT#bY3W#[3T¤JT9QSP!jUQSI9M9Yjv KG]GHYb/M9QSI9[JVYJT9QSPfmYJVFI(JQSK\S\_X\SKab/[FPVF]J-YZ"FH #Kc2fO\_FP]l}hFG]QSP/Q_Y3I
GHY3ccQSJVJVF]FPb/KaJT#F]bbF]fObFPVFI(J KIF G]Q_FIJjLKX-JVYoFI9GHYuM#F©KNYJQSI#[oc2F]JT#YuM2QSI(JVYoKoPcK\S\{I(WOc!emF]b
YZb/W9\_FP]v3KIOMJT#F©jnKX-KoG]\gKPPdQSP [3Q_NFI2G]KIeFLe9b/Y3W#[3TJe`KG -JVYFKab/\_XjBYb uPdQSIcKGT9QSI#F"\SFKab/I9QSI#[
p  \SKa
b  r qnY3PVjnF\S\wvxyyux  YbFZ:Yb/cK\7M#F]JKQS\gP"KabFf9b/YNuQSM#FMQSIkJT#FI9FH {JUPFGHJQ_Y3I7
 c2Y3I#[lY3W9boJT#F]YbF]JQSG]K\RbFPW9\_JPv7JT9KaJKabFf9b/FPVFIJVFMQSI5JT#F2Z:Y3\S\_Yj	QSI#[PVFGHJQ_Y3I7vjBFfObYNuQSM#F
Z:Yb/cK\9fObY(YZ.PJT9KaJBJT#F	P/QSc2fO\SQgG]Q_JX KG]G]W#b/KGHX-JVb/KM#F]Y *QSPRK\SPVYTOKab/M2JVYKGT9Q_F]NFhZYbn}  v(KPRjBF\S\`KP
Z:Yb0JT#FnGHY3I9PVJVb/WOGHJQ_Y3I!YZ`GHY3c2fO\_FH oNYJVFPQSI(NY3\_NuQSI#[U}o8"T9QSP0\SKPVJb/FPW9\_JP/T#YjUP0JT9KaJ]vjUTOQS\_FdcQ  #QSI#[
 +# jUQ_JTemY{Y3PVJQSI#[f9bYNuQSM#FPUY3I#F!YZJT9Fc2Y3PVJ	fmYjnF]bZ:WO\G]\SKPP/Q_^OG]KaJQ_Y3IlK\S[Yb/Q_JT9cP-p.#b/Q_FMOcKI7v
"hKPVJQ_Fv r "Q_eOPTOQ_b/KI9Qwv~avOf9b/W9I9QgI#[oemY(Y3PVJQgI#[QSPnFPPFIJQSK\g\_XT#FW#b/QgPVJQSG!p  Kab[3QSI#FKI(JW r }Q_F]J 
JVF]b/QSGT7vxyy3¥
"T9FK\_[YbQ_JT9c jBF5f9bYfmY3PVFZ:Yb%JT9F5QgI9M9W9GHJQ_Y3I YZ!}  
v  p:Z:Yb FK 1+I9M9WOGHJQ_Y3I YZ
}hFG]QSPQ_Y3I  Y3ccQ_JVJVF]FPvdT9KPJT#F%ZY3\S\SYjUQSI9[ F]XZ:FKaJW#bFP]i)JW9PVFPbFGHFI(J-b/FPW9\_JP!Y3IfOKab/JQ_JQ_Y3I
emY(Y3PJQSI#[#v3b/KI {QSI9[!\_Y3PPReY{Y3PVJQSI9[pDuG/T9Kaf`Q_bF r uQSI#[F]bvxyy3dKIOMPVY3c2FhKaemY3W#JRf9bW9I9QSI#[oqnY{Y3\_FKI
Z:Yb/cWO\SKP-p s FKab/I9P r  KIOPVY3W#bvxyy3	
 
 ZY3\g\_YjUPhKkPG/T9Fc2F2G]\_Y3PVFJVY  +# & PZYboM#FG]QgPQ_Y3I
JVbF]FPp WOQSI9\SKI7v`xyy +(v9Yb©  }   PnZYb©M#FG]QSP/Q_Y3I\gQSPVJPp UYuG  r  Kaf9f{Xv7xyy3	zuKP©P/W9G/T7vuQ_JLM9Q *mF]b/P
Z:bY3c f9b/F]N{Q_Y3WOPUPVJW9MOQ_FP"QSINYJQSI#[G]\gKPPQ_^9F]bPp:emY(Y3PJQSI#[#v9eOKa[[3QgI#[p.qnbFQScKI7v0xyy|3V	e{XZFKaJW9bFP
PW9GTKP0JT#FnZ:KGHJ JT9KaJ I#Y	c2YuM9Q_^`G]KaJQ_Y3I!QSP0cKM#FBY3I!JT#FnFH #Kc2fO\_F  P M9QSPVJVbQ_eOW#JQ_Y3IM9W9b/QSI#["QSIOM9W9GHJQ_Y3I7
JBQSPBK\SPVY-Y3I#F	Q_Z7Q_JPnM9Q *mF]bFI9GHFPRjUQ_JTJT#F   #BE b/WO\_FUQSI9MOW9GHJQ_Y3IKaf9fObY3KG/T5p  Y3T#FI r #QSI#[F]bv
xyyy3
IcWO\_JQSG]\SKPPKIOMc-W9\_JQS\SKaemF\{f9bYe`\_FcP]v ¡f9bYfmY3PVFPdK!NF]bX2Z:KPJRKI9MP/QSc2fO\_F©PVY3\gW#JQ_Y3I
JVYob/K(I uQSI#[o\_Y3P/P0emY{Y3PVJQSI#[#vYfOJQScK\#QSI-Z.KQ_b/\_X[FI9F]b/K\#G]KPVFP]v{KI9M2KPVXuc2f9JVYJQSG]K\S\SX!Yf9JQScK\{QgI2c2Y3PVJ
YZ7JT#FhbFcKQSIOQSI#[oY3I#FP]dUT#FU[FI#F]bK\Of9b/YeO\_Fc YZ7bK(I {QgI#[!\_Y3PPBemY(Y3PJQSI#[jLKPnf9bF]NuQ_Y3W9P\_XGHY3I VF
G 
JW#bF
M   "hKab/M£pDuG/T9Kaf`Q_bF r uQgI#[F]bvxyy3©"T#Y3W#[3TlY3W#b"b/K(I uQSI#[2\_Y3P/P"emY(Y3PJQSI#[2K\_[Yb/Q_JTOc QSP
I#YJLK\_jLKXuPLYf9JQScK\wv{jnFK\gPVY-P/T#Yj¡JT9KaJLJT#Fh[FI#F]b/K\b/K(I uQSI#[-\_Y3PPnemY(Y3PJQSI#[!fObYeO\_Fc bF\SKaJVFM%JVY
uGT9KafOQ_bF r uQSI9[F]bp+xyy3"QgPUKGHJW9K\S\SXkI9Y
J   "	KabM7v`KI9MG]KIemF!PVY3\SNFMQSIfmY3\_XuI#Y3cQgK\mJQSc2Fv
JT#Y3W#[3TQ_JRPVF]FcPdJVY!b/F§(W9QSbF©JT#FUW9PF"YZGHY3c2fO\_FH 2KI9MJQSc2F DFH ufFIOPQ_NFUK\_[YbQ_JT9cP]vbF\SKaJVFMJVYJT#F
cQSIOQScQ_KaJQ_Y3IlYZ	p.PVXucc2F]JVb/QSGUPW#e`c2Y{MOW9\SKab"Z.W9I9GHJQ_Y3IOP]U"T9QgPUK\SPVY%fOKabJQgK\S\_X VWOPVJQ_^9FPUJT#F-WOPVFYZ
Y3W#bUP/QSc2fO\_FKI9MZ.KPVJUKafOf9bY #QScKaJQSY3IK\_[Yb/Q_JT9cl
"T9F\SKPVJ-PVFGHJQ_Y3I£YZ©JT9QSPfOKafmF]b!fObFPVFI(JP!FH ufmF]b/QSc2FI(JK\dbFP/W9\_JPYe9JKQSI#FMjUQ_J
T  Y3I
JT9Q_b/JX DY3I#FM#Y3cKQSIOP]v	c2Y3PJlYZj	T9QSG/T¡KabFbFKM9QS\_X1KNaKQS\SKaeO\_FKI9MtG]KIemFZ:Y3W9I9MY3ItJT9
F   
bF]fmY3PQ_JVYb/XYZcKG/TOQSI#F\_FKab/IOQSI#[2M9KaJKaeOKPVF%p.qn\gK Fv s F]Y[3T7v r  F]b/vxyy3
+IYb/M9F]b!JVY F]F]f£JT#FfOKafmF]b!PVF\_Z GHY3IJKQgI#FMKI9M¤KPGHY3IOG]QSPVFKI9MbFKM9KaeO\SFKP!fmY3PP/Q_eO\_Fv7jnF
T9KNFGT#Y3PVFI%JVYfOW#JnKIKaf9fmFI9MOQ  KaJBJT#FhFI9MYZJT#FhfOKafmF]bnGHY3I(JKQSI9QgI#[K\S\`f9bY{YZ.PRYZY3W9bBbFP/W9\_JP]

 CÃãã   â
 < æ#C âaCD? > ?¡
 F]J"
! eF2JT9FI(W9cemF]boYZ©G]\SKPPVFP]#	I9\SFPPYJT#F]bjUQgPVFPVfmFG]Q_^9FM7v0KIFH uKcfO\_F$QSPoKlGHY3W#fO\SF$%
p'&)(*!,]+ UjUT9F]bF"
& QSP	KIYeOPF]bN8KaJQSY3IiM#FP/GHb/Q_emFMlYNF]b.¤
- NaKab/QSKaeO\SFP]v`KI9M/!,
+ Q_JPhGHYbbFPfY3IOM9QSI#[G]\gKPP
Kc2Y3I#[10 2( x3(5464646(*!8
7 x:
9 z3JVYFKGTFH #Kc2fO\_Fp'&)(*!,+  QSPKPPVYuG]QSKaJVFMKjnFQ_[3T(J<; pVp'&)(*!,+ Vvb/F]f9bFPVFI(JQSI#[
Q_JPKaf9fmFKab/KI9GHF-f9bYe`KaeOQS\SQ_J)XkjUQ_JTibFPVfmFGHJJVYkK%\_FKab/IOQSI#[P/Kc2fO\_F1=?> jUT9QgG/TijBF2M9QSPfY3PFYZ)@=A>
QSPhQ_JPVF\_ZK%PW#eOPF]JUYZRKjUT#Y3\_F-M#Y3cKQSIijUT9QSGTljnF-M9FI#YJVFCl
B e(NuQ_Y3W9P\SXvOjnF-M#Y%I#YJT9KNFFI(JQ_bF
KG]GHFPPnJVY1B p'=A>EDF%
B  QSI2[FI#F]bK\wvjnFUF]NFI%T9KNFG =?>HGJIKGLB#G p*GM4N3G M9FI#YJVFPRJT9FUG]Kab/M9QSIOK\SQ_JXz3jnF
PW#fOfY3PFhQSIkK\S\JT9KaJLZ:Y3\S\_YjUPLJT9KaJHB QgPnMOQSPGHbF]JVFjUQ_JT^OI9QSJVFG]KabM9QSI9K\SQSJX9 +I%JT#FfOKabJQSG]WO\SKab©G]KPVF
:PORQ



££½£iwc©

	
ª£

jUT#F]b/FA! %t~{v(JT#FLJjnY!G]\SKPPFPKabF"I#YJVFM   p'!,+ %¡ KI9M   p'!,+ % xvKIOM2G]K\S\_FMbFPVfmFGHJQ_NF\SX
JT#FkI#F][3KaJQ_NFKI9M¤fmY3PQ_JQ_NF%G]\SKPP]5"T#F%\_FKab/I9QSI9[iPKc2f`\_FQSPJT#FkW9I9Q_Y3IYZ"JjnYPKc2fO\SFP]vI#YJVFM
=?>KI9
M =A>Bv(GHY3I(JKQSI9QSI#[!bFPVfmFGHJQ_NF\_XJT#FhI#F][3KaJQ_NF	KIOMfmY3PQ_JQ_NF©FH #Kc2fO\SFP] )JnQSPjnYbJTj	T9QS\_F
JVY-JT9QS(I -JT#FUfmY3PQSJQ_NF"FH #Kc2fO\_FPBKPRemF\_Y3I#[3QgI#[oJVY-KPW#eOPF]JdYZ B GHY3IJKQgI9QSI#[-K\S\9fmY3PPQSeO\_FLfmY3PQ_JQ_NF
FH #Kc2fO\_FP]v9WOPW9K\S\_XG]K\S\_FMJT#F  "  3{  	  
 .
 PfOKabJoYZBY3W#bo[Y3K\dQSI5cKGT9QSI#F2\_FKab/IOQSI#[#v7QSPhJT#FI#F]FM5JVYeOWOQS\SMKkb/F\SQSKaeO\_F-Kaf9f9bY uQgcKaJQ_Y3I
JVYJT#F!JVb/W#FG]\SKPP/Q_^OG]KaJQ_Y3IkYZ JT#FFH #Kc2fO\SFP"QS
I Blv9JT9KaJUQSPv9K[Y(YuMKaf9fObY #QScKaJQ_Y3IkYZ JT#FoJKab/[F]J
GHY3I9GHF]f9J]ve{X!W9P/QSI#["Y3I9\SXoJT#FBFH #Kc2fO\SFP0QS"
I =?>n  Y{Y{M-Kaf9f9b/Y #QScKaJQ_Y3I9P PT9K\g\T9KNFLKhT9Q_[3TKG]G]W#b/KGHX
YNF]b Blv{K\_JT9Y3W#[3T2jnF	M#Y!I9YJRT9KNFKG]GHFPPBJVY!JT9QgPd§(WOKIJQ_J)Xv(e`W#Jdb/KaJT#F]bBJVYQ_JPdFPVJQScKaJVY2b Kc2YbF
Yb\_FPPb/F\SQSKaeO\_F%KG]G]W#b/KGHXGHY3c2fOW9JKaeO\_FkYNF]b =?>n FlbF]Z:F]b2JT#FkbFKM#F]bJVYPVJKIOM9Kab/M¢cKG/TOQSI#F
\_FKab/IOQSI#[emY(Y uPp  Q_JG/T9F\S\wvxyy3¥"ZYb	Z:W9bJT#F]bUGHY3I9P/QSM#F]b/KaJQ_Y3IOP"KaemY3W#J"JT9QSPUQSPPW#F  }  GHY3IJKQgI9P
JjnYf`KabJP 



0(p (  P9 ( . j	T#F]bF"FKGT7QSPdK!cY3I#Y3cQSK\p.KGHY3I!
(  . (5464646( (   9  p -emFQSI9[	JT#F"I{W9cemF]b YZmM#FPGHbQ_f9JQ_Y3I
NaKab/QSKae`\_FP]v7FKG/T!#"QSPoKfmY3PQ_JQ_NF2\SQSJVF]b/K\ KI9MFKG/T #"QSPoKI#F][3KaJQ_NF%\SQ_JVF]b/K\vKIOM5FKG/T$  
QgPKiNFGHJVYbQSI!% &(H' 5#YbJT#F%P/KF%YZUbFKM9KaeOQS\gQ_JXv JT9QSPNFGHJVYb/QSK\LI#YJKaJQSY3I£P/T9K\S\demF F]f9J

 PVF]JBYZ7W9I#Yb/M#F]b/FM2fOKQ_b/P	p:YbRb/W9\SFP
W9I9GHJQSY3IYZ`\SQ_JVF]bK\SPYNF]bH0 ( (  ( ( .

JT9bY3W#[3T#Y3W#J©K\S\JT#FfOKafmF]bvuF]NFIZ:Yb©f9bYe`\_FcPBjUQ_JT%Y3I9\_XJ)jBYG]\SKPPVFP]BoI#FocQ_[3T(JLGT#Y{Y3PVF
JVYKM9MlKPQgI#[3\_FbFK\7b/KaJT9F]b"JT9KIlK~ GHY3cfY3I9FIJ"NFGHJVYbQSIJTOKaJ"G]KPVF

}hF]Z:KW9\SJ FGHJVYb )  QSI - 2(x / '   [3KQSI7v7QSIiJT#FJjnYG]\SKPPG]KPFvQ_JQSPPW(G]Q_FI(JhJVY%b/F]fO\SKGHF
) e{XkK2M9F]Z:KW9\SJ"G]\SKPP"QSI0  ( 7 93
#YbKIXiYeOPVF]bNaKaJQ_Y3I%
& KI9M5KIX5c2Y3I#Y3cQgK\*  v7JT#Ff9bYfmY3PQ_JQ_Y3I  &kPKaJQSPV^9FP+  QgPhM9FI#YJVFM
e{X&-,.  "T#F2YfOfY3P/Q_JVFfObYfmY3PQ_JQ_Y3I k
& M#Y{FPoI#YJPKaJQSPVZ:X/  QSPM#FI#YJVFMe{X &1,2
0   u2"T#F
G]\SKPP/Q_^OG]KaJQ_Y3IkYZKI(X%Ye`PVF]bNaKaJQ_Y3I 
& QSP©cKM#FQSIkJT#FoZ:Y3\S\_Yj	QSI#[jnKX nM#F]^OI#F 3  h
+ KP"Z:Y3\S\_Yj	P
3 + %
4
  4
p  (   
&5,6 





"T9FG]\SKPP"KPP/Q_[3I#FMJVY&QSP"JT#FI9

 Kab/[BcK8  " 3  + Q_ZAGKab[ncK8  " 3  + G % xavOKI9M
 Kab/[BcK8  "87 
9J9:<;>A=? @ )  YJT#F]b/jUQSPVF

+ IYJT#F]bBjBYbM9P]v(QSZJT9FUcK8 #QScK\9GHY3c2fmY3I#FI(JRYZ 3  + QSPRWOI9QS§{W#FvJT#FIJT9F	QSI9M9FH -[3Q_NFPBJT#FUG]\gKPP
KPPQS[3I#FMJVYC&{BhJT#F]b/jUQSPVFv{jBFhJKFoJT#FQSI9M#FH YZJT#FocK8 uQgcK\OGHY3c2fmY3I#FI(JLYZ )  GHYbb/FPVfmY3I9M9QSI#[
JVYkJT#F2cK8 #QScK\ GHY3c2fmY3I#FIJYZ 3  +%p:JQ_FPKabF2PVY3\_NFM5e{XK%b/KI9M#Y3cG/T9Y3QSGHF2Kc2Y3I#[kJT#F2cK8 #QScK\
GHY3c2fmY3I#FI(JP
}  GHY3IJKQSIOP-KPW#e7G]\SKP/PojUT9QSGTQSP-Kc2Y3I#[iJT#Fk\SKab[FPVJG]\SKPPVFPYZ"qnY(Y3\SFKI¤Z:Yb/c-W9\SKPJVYiemF
r  KPG]W#F\wv9xyy 3v{T#YjnF]NF]bJT9QSP G]\SKPP QSP \_FPP QSI(JVF]bFPVJQSI9[UZ:bY3c KUf9bKGHJQSG]K\
   \_FKab/IOKaeO\_Fop UYuG  
NuQ_F]j"fmY3QSI(JP/QSI9GHFb/W9\_FPoG]KIemFI(W9cF]bY3W9PoKI9MTOKab/MJVYQSI(JVF]bf9b/F]J] UF]NF]bJT9F\_FPP]v KlPW#e7G]\SKPPYZ
}  p UYuG  r  KP/G]W#F\wvRxyy 3hfObFPVFI(JPoKIQSI(JVF]bFPVJQSI#[kGHY3c2f9b/Y3cQSPVFemF]JjnF]FIbF]f9b/FPVFIJKaJQSY3I9K\
fmYjnF]bKI9M QgIJVF]bfObF]JKaeOQS\SQSJX¨fmYjnF]b +ItJT9QSPG]\SKP/P]vjUT9QSGTQgPlW9PVFM¡e{X !v©FKGT YZJT#F
NFGHJVYbLGHY3c2fmY3I#FIJPRKabF"bFPVJVbQSGHJVFM2JVC
Y 073x (2 (  :x 9KI9MFKG/TcY3I#Y3cQSK\#QSPdf9bFPVFI(JdKaJRc2Y3PVJRY3I9GHF
:PO5:



"T#FkNaK\SW#FP 7xavnuv  xK\g\_Yj I9KaJW#bK\©QSIJVF]b/f9bF]JKaJQ_Y3I9PYZ	JT#Fb/W9\SFP]vemFQSI#[FQ_JT#F]bQSI£Z.KNYbYZ
JT#FGHYbbFPfY3IOM9QSI#[G]\SKPPlp  xvnI#FW#JVb/K\njUQ_JT¤bFPVfmFGHJJVYJT#FG]\SKPPlp.vBYbQSI¢M9QSPVZ.KNYb2YZ	JT#F
GHYbbFPfY3IOM9QSI#[%G]\SKPP2p 7x!"TOQSP	P/W#e7G]\SKPP]vJVYkjUT9QSGTjnFbF\SKaJVF2KPo}   ( 0  ( v7QSP]v7KPjBF2I#Yj
f9bYNFvnP/W *F]bQSI#[JT#FPKc2FlK\_[Yb/QSJT9cQSG%M#b/Kj"eOKG uPKP2} p "	X3Ka^O\ r EUQSNFPVJ]v	xy3¥a|3KI9M} 
p 	Y{
G  r  Kaf9f{Xv7xyy3< RF]NFI%jUQ_JT9Y3W#JRbFPJVb/QSGHJQSI#[JT#FoGHY3c2fmY3I#FI(JPBYZJT#F	NFGHJVYbP]v9YbLjUQ_JT%KIX
bFPVJVbQSGHJQ_Y3I¤JVY5KPVF]J2GHY3I(JKQSI9QSI#[KaJ2\_FKPVJ-Y3I#Fb/FK\BNaK\SW#FvJT9F%GHY3I9PJVb/W9GHJQ_Y3I¤YZUPcK\g\RZ:Yb/c-W9\SKP
jUQ_JT¤P(W G]QSFIJ\_XT9QS[3TKG]G]W#b/KGHX£QSP!TOKab/M7"TOQSP!QSPKiG]\SFKabcYJQ_N8KaJQSY3IZ:Yb-WOPQSI#[T9FW#b/QSPVJQgG]PQSI
M#FG]QSP/Q_Y3IGHY3ccQ_JVJVF]F  P	QSI9M9WOGHJQ_Y3I7
 ?Cãã   âå > @}ßC  C â
d< ABC@BC >
	 zåNßÁææ#AJäåã   #æ C âaC? > %

åä(@

F	I9Yj¡PT#Yj1JT9KaJRe`W9QS\SM9QgI#[	M#FG]QgPQ_Y3IGHY3ccQ_JVJVF]FPBQgPdK!T9KabMK\_[Yb/Q_JTOcQSGLJKP 2jUT9FI2Y3I#FUPVJVbQ_NFP

JVYYe9JKQgIkeYJTP/cK\S\mKI9MlKG]G]W#bKaJVFZYbcW9\gKP]d"T#F]bFoKabFoJ)jBY%W9PW9K\mI#YJQSY3I9PLYZ P/Q_]FojUT9QSGTG]KI
I9KaJW#bK\S\_X%eFW9PVFMlZ:YbM#FG]QSPQ_Y3IGHY3ccQ_JVJVF]FP]	"T#F!^Ob/PVJ"Y3I#F-QSP"JT9F!jUT#Y3\SF!I(WOc!emF]bUYZd\gQ_JVF]b/K\SP©YZ
r  KPG]W9F\wv©xyy {z
JT#FZYb/c-W9\SK¤p.Q_Z©K\SQ_JVF]bK\dQSPfObFPVFI(
J hJQSc2FP]v Q_J!QSPGHY3W9I(JVF
M hJQSc2FPp UYuG  
r  Kaf9f{Xv©xyy3vRJT#FkPVFGHY3I9M¤Y3I#FkQSPJT#FkI{W9c!emF]bYZ"b/W9\_FP!YZ"JT#F%ZYbcW9\gKp s FKab/I9Pv  Qwv
	Y{
G  
RQSJVJ]v r dK\SQSKI(J]v0xy3¥W#bUb/FPW9\_JP"Qgc2fO\_X%JT9KaJhbF][3Kab/M9\_FP/P"YZJT#FbFPVJVb/QSGHJQSY3IlYNF]bJT#F-NaK\SW#FP
YZJT#FNFGHJVYb/P2p.KP	\_Y3I9[KP	JT#F]XKabFF\SFc2FIJP	YZdKPF]JUjUQ_JTG]Kab/M9QSI9K\gQ_J
X t~3vKI9MiK\_bFKM#XkZ:Yb
JjnY G]\SKPPFPf9bYeO\_FcP]vOcQSIOQScQ_QSI9[-JT9FPQ_]FYZdKM9FG]QSPQ_Y3IiGHY3ccQ_JVJVF]F-ZYbhemYJTPQS]FM#F]^OIOQ_JQ_Y3I9P
QSPoKPTOKab/MKPPVY3\_NuQSI#[%jnF\S\  uI#YjU
I   "hKab/M5f9bYe`\_FcP]"T#F]bF]Z:YbFvJT9F-JKP 5QgPoK\SPVYT9Kab/M5Z:Yb
}   ( 0  ( jUQ_JTkJT9FfOKabJQSG]WO\SKabLN8K\SW9F@
P 7xavOuv  xZYb"JT9FNFGHJVYb/P]

! #"%$3'&("á*))%+-, '.0/1"2.43#5" 6.Ý874.:9 Ç<;8" =3?>@A"Ý*)CBAD75"¯6;'.
#
" E"F> HGI    I  %KJML  ON ":PRQSJ %UT  "%<$ WV "%J  %YX I !   $ZT  ] [N !\J ] "! %K]^J  J % _
` " [V  ba  V I  %KT "! !  % cV dJ %eJ   fTgTgJ    (%KJ %    XhJ  I " %   [N ji "fT 
 !  % =?> 1
kÚ36)jl {F]FoJT#F  f9fmFI9M9Q_ 

F%G]KIFKPQg\_XKMOKaf9J!"T#F]Yb/Fc x2JVYiJT#FG]KPVFjUT#F]bFJT9Fb/W9\_FP!KabFbF]fO\gKGHFMe{XjnFQ_[3T(JVFM
} KPKM#NYuG]KaJVFMQSI£eY{Y3PVJVFM  +# ¨pDuG/TOKafOQ_bF r uQgI#[F]bvUxyy3 "UF]bFvnFKG/T JVbF]FlbF]JW9b/I9P2K
G]\SKPPm 0  x3( 7x:93v©KI9M¢FKG/T JVbF]FlQSP[3Q_NFIK5b/FK\LjBFQ_[3T(J2JVY\_F]NF]bKa[FlQ_JPNYJVF¨"T#FPQ_[3I¢YZ
JT#F\gQSI#FKab!GHY3ceOQSI9KaJQSY3I[3Q_NFPJT9FG]\SKPPYZ"KIFH uKcfO\_Fk"T#F2Z:Y3\S\_Yj	QSI#[JT#F]YbFc T#Y3\SM9P!Ka[3KQSI
jUQ_JTkKI(X\SQgcQ_JKaJQ_Y3I9PBY3IJT#Fo\_F]NF]bKa[3QSI#[2GHY(F G]Q_FIJPp.KP"\_Y3I#[2KP©KaJ"\_FKPVJ©Y3I9FI9Y3!I D]F]bY2NaK\SW#FoQSP
KW#JT#YbQ_]FM`v{YbRjUQ_JT9Y3W#JR\SQScQ_JKaJQ_Y3I2Y3IJT#F	GHY{F G]Q_FI(JP]dqnX2JT9QSPvjnF	c2FKIJT9KaJRZ:YbnFKG/T%YZ7JT#F
Kaf9fO\gQSG]KaeO\_F!\gQScQ_JKaJQ_Y3IOPp:YbjUQ_JT#Y3W9JvJT9Ff9b/YeO\_Fc Qg
P   "hKab/M7o"T#FPQ_]FI#YJQ_Y3IQSP	JT#F2PW9cv
YNF]bK\S\mJVbF]FPv9YZ JT#FQ_b"I{W9c!emF]b©YZI#YuM#FP]

#" E"F>onqp
 J % :_` " OV  a  V  I  %KT "! !  % 
%KJ %    XhJ  I " %   [N Wi "fT 
 !  % =?> ]vXhJ  I $  !wJ'TgJ  "
"	  
  %<%KJ  !  !wJ'TgJ  "  J 	2]."% ! 	 3 "% "  !  "%  	   

X  J 3 I jV !\J  "  fT rJ "  J 	(%-ONsPut 	 _
	  I  ! ] aH " 3 J  3  yx dJ    %j]+  N8 
 _ L H   "!4$  J % "$  I   JML jV61
¡T9QS\_FQ_JUQSPUjBF\S\ {I9YjUIJT9KaJ	emY{Y3PVJQSI#[2b/FPW9\_JP	QSIlKb/KafOQSMlM9FGHbFKPQSI#[YZJT#FF]b/bYbUYNF]b =A>

 

 J 	

jUT9QgG/TG]KI%FKPQg\_X2KI9MbKafOQSM9\_XM#bYf%M#Yj	IJVY-]F]bYp.KPn\SY3I#[KPnQ_JBQgPdfmY3PPQ_e`\_Fv"T#F]Yb/Fc ~!PT#YjUP
JT9KaJoKaJVJVFc2f9JPJVYkF G]QSFIJ\_XbFM9W9GHFJT#FPQ_]F-YZRJT#F-NYJVF2jUT#FIemY{Y3PVJQSI#[%}h QSP   "hKab/M7)Z
JT#F	f9bYeO\_Fc QSPdPQScfO\SQ_^9FM-JVYJT#FUJVY-f9b/W9IOQSI#[hYZK!\SKab[FhGHY3I9PQSPJVFIJBNYJVF	YZ} p  Kab[3QSI9FKIJW r
}Q_F]JVJVF]b/QSGT7v7xyy3¥v9JVYYe9JKQSI%KPcK\S\_F]bnGHY3I9PQSPJVFIJp:YbLjUQ_JT%\SQScQSJVFMF]bbYbHNYJVFjUQ_JTbFPVJVbQSGHJVFM
PQ_]Fv#Q_J©QSPLKa[3KQSIkfmY3PP/Q_eO\_Fp.W9PQSI#[-JT#FoPKc2Fob/FM9W9GHJQ_Y3I`dJVYPT#YjtJT9KaJ©JT9QSPne9bQSI#[3?
P   "hKab/M9I9FPP]
:POEz



 n

££½£iwc©

	
ª£

#"%$3'&("á*))%+-, ' .0/1"2.43#5" 6 .Ý874.G=3?>@A"Ý*)) 3 ;'"F.


FI9YjPVJKaJVF-KI9Mkf9bYNF!JT#FoF§{W9Q_NaK\_FI(J©YZ"T#F]YbFc

xj	Q_JTkJT9QSP"I9F]jPQ_]FI#YJQSY3I7

#" E"F>  GI    I  %KJML  [N "-PuQ J %uT  "%<$ WV "%J  %  $ZT  ] [N  $ !  %j] J  J % _` " OV
= > 1 t I % %<$ ! 
 a  V  I  %KT "! !  % UV( J %KJ 	 fTgTgJ    (%KJ %    XhJ  I "%  [N Wi "fT 
 !  % A
I  ! V % H %X I    I  	 
  !#"  !\J  3  I %Wi "fT 
 !  %:J % "T 	     r_ P N8  	
T $ !#"E]  I "  J %j]"
V J % $   J 	 [N 	 $#  J 	
	'P5]  "6 I XhJ  I $    3 "  J a !\J H "! % 1
kÚ36)jl {F]FoJT#F  f9fmFI9M9Q_ 


 

 fObF]N{QSY3W9PjnYb 1p s FKabI9P-F]JK\D_vLxy3¥fObYNFP2KPQScQg\SKabJT#F]YbFc GHY3IOGHF]b/I9QSI#[iJT#FkcQSI9Q 
cQ_KaJQSY3IkYZJT#FPQS]FhYZ K2} 	nO"T9F]YbFc-G]KIemFP/T#YjUI%JVYemFc2YbFo[FI#F]bK\wv9KPLJT#FG]\SKPPLYZ
}   ( 0  ( jUQ_JTkJ)jBYb/W9\_FP©PJVb/QSGHJ\_X%GHY3IJKQSIOP"JT9KaJ"YZ } 	¢j	Q_JTkJjnYc2Y3I9Y3cQSK\SP]
"T9F-PVJKaJVFcFIJYZBUT#F]YbFcP-xav~{v KPhYf9JQScQ_KaJQ_Y3Iif9bYeO\_FcPUjLKPG/T#Y3PVFI5Z:YbhfOW#bF-GHY3I!
NFI9Q_FIOGHFzubF]fO\gKG]QSI#[JT#Fc e{XJT#FQ_bLKPPVYuG]QSKaJVFMkM#FG]QSP/Q_Y3If9b/YeO\_FcPhp.M#FG]QSM#FhjUT#F]JT#F]bnJT#F]bFhFH #QSPVJ
KGHY3I9PQSPJVFIJnZYbcW9\gK!jUT9Y3PVFhP/Q_]FhQgPnI9Y-c2Yb/FhJTOKI%PY3c2F	^9 {FM%JT#bFP/T#Y3\SM`jBY3W9\gMJVb/QSN{QSK\g\_X2cK F
JT#FfObYeO\_FcPLI#YJUY3I9\_#
X   "hKab/M7v9e`W#J"K\SPV
Y    Y3c2f`\_F]JVF

 < ä  C  ?
IlK\_[Yb/Q_JTOcv#}  vOjnKPUf9bF]NuQ_Y3W9P\_Xf9bYfmY3PVFMp 	Y{
G  r  KPG]W9F\wvxyy 3"ZYb	eOW9QS\SMOQSI#[!M#FG]QgPQ_Y3I
HG Y3ccQSJVJVF]FP]¢)Jf9bYuGHF]FM9P2QSI£J)jBYPJKa[FP]"T#Fk^9b/PVJPVJKa[Fle`W9QS\SM9PK5fmYJVFIJQSK\g\_X\SKab[FlP/W#eOPVF]J
YZLM9Q *mF]bFIJb/WO\_FP]vmFKG/TYZRjUT9QgG/T5QSPoKGHJW9K\S\SXiK}   ( 0  ( jUQ_JTY3I9\_XiY3I#F2b/W9\SFIKPFGHY3I9M
PVJKa[Fv Q_Jo[b/KM9WOK\S\_XiG]\gW9PVJVF]b/PoJT9FM#FG]QSPQ_Y3IGHY3ccQ_JVJVF]FP]v W9PQSI9[%JT9Ff9bYfmF]bJ)XiJT9KaJ!JT#FW9I9Q_Y3I5YZ
JjnY!}   ( 0  ( Pj	Q_JT2M9Q *mF]bFI(J bW9\_FPQSPPVJQg\S\uKo}   ( 0  (   JRJT#F©FI9MYZmJT9QSP f9b/Y{GHFM9W9bFvJT#F
W9PVF]bnYe9JKQSIOPRK-PVF]JBYZ}  Pv{KI9MJT#Fhc2Y3PVJLKG]G]W#b/KaJVFY3I#F	QgPBGT#Y3PVFI%KI9Mb/F]JW#b/I#FM7 d {fmF]b/QScFIJK\
bFPWO\_JPM9QgPVfO\SKXhJT9FnKaeOQg\SQ_JXoYZ#+}  JVY	eOWOQS\SMPcK\S\}  P] +I!JT9KaJ fOKafmF]bv8jnFBf9b/YNuQSM#FBKIK\_[YbQ_JT9c
Z:YbR\_FKab/I9QgI#[oM#FG]QSPQ_Y3I2GHY3ccQ_JVJVF]FPBjUT9QSGT2T9KPRKMOQ *F]b/FIJdPVJVbW9GHJW#bF"PQgI9GHF"Q_JeOW9Qg\SM9P0Y3I9\_X-Y3I#FU}  
 YbFof9bFG]QSPF\_Xv QSPLKJT#b/F]FPJKa[F!K\_[Yb/Q_JTOc )JL^9b/PJne`W9QS\SM9PBKPVF]J©YZb/WO\_FPLM#F]b/Q_NFM%Z:bY3c
bFPWO\_JP©Y3IlemY{Y3PVJQSI#[2M#FG]QgPQ_Y3IJVbF]FPpDuGT9KafOQ_bF r uQSI#[F]bvxyy3nJ"JT#FIiG]K\SG]W9\SKaJVFPUJT#FNFGHJVYb/P
W9PQgI#[KP/G/T#Fc2FkM#F]b/QSNFMZ:bY3c EUK(I uQSI#[\SY3PP!emY{Y3PVJQSI#[£pDuG/T9Kaf`Q_bF r uQSI#[F]bvnxyy35J!^OI9K\g\_X
f9b/WOI#FPhJT#F^OI9K\ }   ( 0  ( W9PQSI#[%JjnYlfmY3PPQSeO\_FP/G/T#Fc2F2P KIOKaJW#b/K\ f9b/W9IOQSI#[j	T9QSG/TjnFG]K\S\
+fmFPPQScQSPVJQSG%f9b/WOI9QSI#6
[ uvRKIOM¨f9b/WOI9QSI#[5W9PQSI9[\_Y{G]K\UGHY3INF]b[FIOGHFb/FPW9\_JPlp s FKabI9P r  KI9PY3W#bv
xyy3v jUT9QSGT5jBFG]K\g\ +Yf9JQScQgPVJQSG-f9b/W9IOQSI#6[ uUT#FM#F]Z.KW9\_JNFGHJVYb-QgPoK\_jnKX{PG/T#Y3PFIJVYlemF2JT#F
YeOPVF]b/NFMlM9QSPVJVbQ_eOW#JQ_Y3IYZKc!e`Q_[3W#Y3W9P\SXG]\SKPPQS^9FMkFH uKcfO\_FP]


 B&$*"=+"¶'.r'" ,j<> > 8 7d74"F" 3#.r#"($ kN$5787'"
! 3';S#"%$ 

6. 7#"($

3

u W#fOfY3PFUJT9KaJ©JT#FT(X{fYJT9FPQSPop.I#YJ©I#FGHFPPKabQS\_XKM#FG]QgPQ_Y3IkGHY3ccQ_JVJVF]Fv`Q_J©cQ_[3T(JBemF214351BKM#FG]Q 
PQ_Y3IJVbF]F jnFUe`W9QS\SMbFK\gQ_]FPRK!fOKabJQ_JQ_Y3IYZ7JT#FUM#Y3cKQgI B QSI(JVYM9QSP+Y3QSI(JdPW#e`PVF]JP*) ( (+) . (5464646(+)-,
 Q  KP - - . / /0JT#FoZ.W9I9GHJQ_Y3IlbF]JW#b/I9QgI#[JT9FJVb/W#JTkNaK\SW#FoYZKf9bFMOQSG]KaJV/
F . d}hF]^OI#F

0 "  1 %
0 "  1 %

4
; pVp'&)(*!,+V - -_p'&)(*!,+vm)5"76 ,! +A%98 / /	(
+,  ' @ 1 73254
4
; pVp'&)(*!,+V - -_'p &)(*!,+vm)5"76 ,! + %9
0 8 / /	4
+,  ' 2@ 1 37 254
:PO ;



"

+IkYJT#F]b"jnYb/M9P]v 0   1 bF]f9bFPVFI(JP©JT#FZ:b/KGHJQ_Y3IYZ FH #Kc2fO\_FPLYZ G]\SKPP 80f9bFPVFI(J"QSIkPW#e`PVF]J )5"v
"
KI9M 0  1 bF]fObFPVFI(JPBJT9FhZ:b/KGHJQ_Y3I%YZ0FH uKc2f`\_FPnYZ0G]\SKPPFP %9
0 8f9b/FPVFIJLQSI%PW#eOPF]J )5"3  G]GHYb/MOQSI#[

JVY%uGT9KafOQ_b/F r uQSI#[F]b!p+xyy3vmKjnFK l\_FKab/I#F]b"PT9Y3W9\SMcQSIOQScQ_]F	JT#F!GHb/Q_JVF]bQ_Y3I9

 %

~ 4

 0 " 1 0 " 1 4
 
" 1
4

p+x

+IJT#F%G]KPVF%YZLKM#FG]QSP/Q_Y3IJVbF]Fv JT#FfOKabJQ_JQ_Y3IQSPJT9KaJjUT9QSGTQSPeOW9QS\_JKaJJT#F\SFKNFP-YZ©JT#F
JVbF]FpWOQSI9\SKI7v xyy+(z0QSIJT#FG]KPVFYZnKM#FG]QSPQ_Y3I5\SQgPVJ]vmJT#F2fOKabJQ_JQSY3IQgP	JTOKaJojUT9QSGTQSPheOW9QS\_JhKaJ
FKG/TkbW9\_FvJVY-jUT9QgG/TjnFKM9MJT9F	PW#e`PVF]JBKPPY{G]QSKaJVFM%JVY-JT#FM#F]Z:KWO\_JRG]\SKPPop	Y{G
 r  Kaf9f{Xv7xyy3
uW#fOfY3PFJT9KaJhjBF-FI9GHYuM#F!JT#FM#FG]QSP/Q_Y3IlJVbF]FQSIJT#FZ:Yb/c YZdKP/W#eOPVF]J	YZRc2Y3I#Y3cQgK\SP]vOe{XJK uQSI#[
Z:Yb"FKG/T\_FKaZ JT#F!\_Y[3QgG]K\  6£YZK\S\7KaJVJVb/Q_e`W#JVFP"Z:bY3c JT#F!bY(YJUJVYJT#F!\_FKaZ  FKPW#bQSI#
[ YNF]bhJT#F
JVbF]F  P©\_FKNFP©QSPnF§(WOQ_N8K\SFIJBJVYcFKPW#b
F ¡YNF]b©JT#F	f`KabJQ_JQ_Y3IbFK\SQ_]FM%e{XJT#FPVF]JLYZc2Y3I#Y3cQSK\SP]
"	YjnF]NF]bvdJT#Fkc2Y3I#Y3cQgK\SP!KabF%M9QSP VY3QSI(JZ:bY3c FKGT¢YJT#F]bkp:FKGT¢FH uKcfO\_FP/KaJQSPV^9FPFH uKGHJ\SXY3I#F
c2Y3I#Y3cQSK\ }hW9FiJVY¢JT9QSPf9bYfmF]bJ)Xv"Y3I9\_X PW#eOPVF]JP%G]KI¡emFbFK\gQ_]FM j	Q_JT c2Y3I#Y3cQSK\gP]v©Yb
F§{W9Q_NaK\_FIJ\SXjUQ_JTKJVbF]F!T9KN{QSI9[ n\_FKNFP]
uW9f9fmY3PVF"JT9KaJBjBFh[FI#F]b/K\SQS]FUJT9QSPRYeOPVF]bNaKaJQ_Y3Ie(X2b/Fc2YNuQSI#[JT#FhMOQSP VY3QSIJI9FPPdGHY3I9M9QSJQ_Y3IYNF]b
JT#Fc2Y3I#Y3cQSK\SP] "T#FI¡K¢I(W9cemF]bkYZ-PW9eOPVF]JP%YZYbM#F]
b kpw~ )QSPI#Yj fmY3PP/Q_eO\_FijUQ_JTY3I9\_X 
c2Y3I#Y3cQSK\SP]v"KI9M¡Q_JkKaf9fmFKab/PJT9KaJkJT#FI(WOc!emF]b%YZbFK\SQ_]FMfOKab/JQ_JQ_Y3I9PG]KI¡eFFH ufY3I9FIJQSK\g\_X
\SKab[F]bW9PQgI#[M#FG]QSP/Q_Y3IGHY3ccQ_JVJVF]FPJT9KIM#FG]QSPQ_Y3IJVbF]FP] "UYjBF]NF]bv7JT#FFH ufmFGHJVFMbW9I9I9QSI9[2JQSc2F
QSP%I#YJe`Q_[[F]bkjUT#FI WOPQSI#[M9FG]QSPQ_Y3I1GHY3ccQ_JVJVF]FP]vhPQSI9GHFiJT#F5I(W9cemF]bYZf`KabJQ_JQ_Y3I9PQSP%QSI¨Z.KGHJ
emY3W9I9M#FMe{XJT#F	I{W9cemF]bdYZ7FH uKcfO\_FP]v G =?> G"T{W9P]v(jBFhcKXFH ufFGHJnPVY3c2F	bFM9W9GHJQ_Y3IQSIJT#F	PQ_]F
YZJT#F	ZYbcW9\gKjnF	eOWOQS\SMjUT#FIW9PQSI9[!M#FG]QSPQSY3IGHY3ccQSJVJVF]Fv{j	T9QSG/TQSPBYZQSIJVF]b/FPVJBJVYQSI(JVF]bf9bF]JBJT#F
G]\SKPP/Q_^9F]b©Ye9JKQSI9FM7
 f9fO\SQgG]KaJQ_Y3IYZJT9QSPBf9b/QSI9G]QSfO\_F"QSI QgPBPVJVbKQ_[3TJVZ:YbjLKab/9
M K\SKab[FoM#FG]QSP/Q_Y3IGHY3ccQ_JVJVF]FQSP
eOW9Qg\_JBe{X%[bYjUQgI#[2Q_JVF]b/KaJQ_NF\_Xv`QSIkKJVYf M#Yj	IlZ.KPT9Q_Y3I7v#K2G]W#b/bFIJ©c2Y3I9Y3cQSK\w+IkJT9QSP©c2Y3I9Y3cQSK\wv
JT#F"\SQSJVF]b/K\uKM9M#FM2KaJdJT#F"G]W9bbFI(J PJVF]fQSP JT#F©Y3I#F©j	T9QSG/T2cQSI9QScQS]FPJT#F"G]W9bbFI(	
J 1GHb/QSJVF]b/Q_Y3I7vYNF]b
K\S\mfmY3PPQSeO\_F	KMOM9Q_JQ_Y3I%YZ\SQ_JVF]b/K\gP]v{KIOMk[3Q_NFIJT9KaJ"JT9FI#F]j c2Y3I#Y3cQgK\7M#Y(FPUI#YJ©FH uQgPVJ"K\_bFKM#X%QSI
JT#FnG]W#bbFI(J0M#FG]QgPQ_Y3IGHY3ccQ_JVJVF]Fp.QgIYb/M#F]b JVYUfObF]NFIJ c-W9\_JQ_fO\SFdKM9M9Q_JQ_Y3IOP7YZ9KUPQgI#[3\_FRc2Y3I9Y3cQSK\
"T#

F  GHb/Q_JVF]b/Q_Y3I QSPGHY3c2fOW9JVFM1W9P/QSI#[JT#Flf`KabJQ_JQ_Y3I¨QgI9M9W9GHFMYNF]b =A> e{X¢JT#FiG]W9bbFI(JPVF]JYZ
c2Y3I#Y3cQSK\SPeOW9Qg\_Jlp.Q_Z	J)jBY¤FH uKcfO\_FPPKaJQgPVZX£JT#FP/Kc2Fc2Y3I#Y3cQSK\SP]vnJT#F]X£eF\SY3I#[JVYJT#FiPKc2F
PW#e`PVF]JYZ	JT#FkfOKab/JQ_JQ_Y3I` T#FII9YZ:W#b/JT#F]b2KM9M9Q_JQ_Y3I£YZhK\SQ_JVF]b/K\LM#FGHbFKPFP2JT#
F  N8K\SW9FvBK
I#F]j c2Y3I#Y3cQgK\0QSPhGHbFKaJVFMKI9M5QSIOQ_JQSK\SQ_]FMKa
J {v7KI9MiJT#FI5QSP	[bYjUI5W9P/QSI#[JT9F-PKcFf9bQSI9G]Q_fO\SF
¡T#FI¤I9YZ.W#bJT#F]b!GHb/FKaJQ_Y3I£YZ"Kc2Y3I#Y3cQSK\RM#FGHb/FKPVFP-JT#
F  NaK\SW#Fv JT#FkK\_[Yb/Q_JT9c PVJVYfOP-KI9M
bF]JW#bI9P JT#F"G]W#bbFI(J]v\SKab/[FLM9FG]QSPQ_Y3I2GHY3ccQ_JVJVF]F©jUQ_JTPVJQS\g\(Fcf9JX-NFGHJVYb/P]+IJT#F©Z:Y3\S\_Yj	QSI#[PVJVF]fv

 G]K\SG]WO\SKaJVFPhJT#FPVF-NFGHJVYb/P]U+IKf9bF]NuQ_Y3W9P	Kaf9f9bY3KGTJVYeOWOQS\SM9QSI9[b/WO\_F!PVF]JPhZ:Yb	f9b/YeO\_FcP
jUQ_JT-J)jBYG]\SKP/PVFP"p  Y3T#FI r uQgI#[F]bv#xyyy3v{KI2QSJVF]b/KaJQ_NFL[bYj	QSI#[ Df9b/WOI9QSI#[hK\_[Yb/Q_JT9c QSP M#FP/Q_[3I#FM
pD   #RE3"T#F©b/WO\_F D[bYj	QSI#[oKaf9f9bY3KGTYZ   #RE¨QgPGHF]bJKQSI9\_XG]\_Y3PVF©JVYjUT9Ka<
J 
1M#Y{FP
Z:Yb[bYj	QSI#[lKl}  PQgI9GHFQ_JoYf9JQScQ_]FPo
K  GHb/Q_JVF]b/QSY3I7v7XF]JKI#YJKae`\_FM9Q *mF]bFI9GHFQSPJT9KaJQ_JM#Y{FP
I#YJhGHY3c2fOW#JV
F  YNF]boKfOKabJQ_JQ_Y3IQSI9M9W9GHFMle(XlK%PVF]JUYZbW9\_FP]©EUKaJT9F]bv`JT9FG/T9Y3QSGHFYZB   BE
QSPJVY5[bYj KaJFKG/TPJVF]f¢K %eJ  3 ! lc2Y3I#Y3cQgK\wv f9b/W9I#FQ_J]vdKI9M£JT#FI¤[bYj K5PVFGHY3I9M¢c2Y3I9Y3cQSK\wv
f9b/WOI#FQ_J]vBKI9MPVY5Y3IW9I(JQS\BK5^`I9K\B} h PT9KafmFM¢ZYbcW9\gKQgP-GHY3cfO\_F]JVFKI9M£bF]JW#b/I9FM7 	YJQSGHF
JT9KaJ   #RE K\SPYc2YuM9Q_^9FPJT#FjBFQ_[3T(JYZJT#FFH uKc2f`\_FP]v©QSIKG]GHYb/M9KIOGHFijUQSJT¨qnY(Y3PVJQgI#([  P
PVJKI9MOKab/M9PpDuGT9KafOQ_bF r uQSI#[F]bv7xyy3
:PO

O



 n ,j*; 3 ; 7#"($


££½£iwc©

3 ;'"U"¯(7rE.R3 .r#"%$

	
ª£

'" #"($ B6.d.

y ÇR

*. 7#"($

3

uGT9KafOQ_bF r uQgI#[F]blp+xyy3T9KNFQSI(NFPVJQ_[3KaJVFM¨G]\gKPPQ_^OG]KaJQSY3I¢f9bYeO\_FcPj	T#F]bFkJT#FlKQSc YZhJT#F
f9bYuGHFM9W#b/F!QSPhI#YJUJVYkf9bYN{QgM#F!KIKG]G]W#b/KaJVF2G]\SKPP	ZYboPVY3cF!YeOPVF]b/N8KaJQ_Y3I	EUKaJT9F]bv`JT9F-K\_[YbQ_JT9c
Y3W#JVfOW9JPKlPVF]JYZLNaK\SW#FPp:Y3I9FZYb!FKG/T£G]\SKPPhKI9MjBFFH ufmFGHJJT#FG]\gKPPYZnJT#FYeOPF]bN8KaJQSY3IJVY
bFGHFQ_NF-JT#F\SKab[FPVJ	N8K\gW#F!YZdK\S\DvOJT{W9PUemFQSI9[b/K(I FMT9Q_[3T#F]b	JT9KIK\S\YJT#F]bP]	"TOQSP"Kaf9f9b/Y3KG/T5QSP
fOKabJQgG]W9\SKab/\_XWOPVF]Z:WO\Bj	T#FI¢K5[3Q_NFI¢FH uKcfO\_FlG]KI¢emF\_Y3I#[5JVYc2YbFJTOKI¢Y3I#FG]\SKPPp.c-W9\_JQS\gKaeF\
f9bYe`\_FcPvK¨G]KPVF¤jUT#F]bFjnFFH ufFGHJFKG/T YZJT#FPFG]\SKPPVFPJVY¨bFGHFQ_NFJT#F[bFKaJVFPVJNaK\SW#FP
GHY3c2fOKab/FMJVYJT#FG]\gKPPVFP©JT#F!FH uKc2f`\_FP"M#Y{FP"I#YJ"emF\_Y3I9[-JVY#
"T9F- "	EJ  3 ! %<% b/F]f9bFPVFI(JP©QSI#Z:Yb/cK\S\SX-JT9FI{W9cemF]bnYZ0JQSc2FPLJT#FoT(X(fmYJT#FP/QSPRZ.KQS\SPnJVYb/K(I 
JT#FLG]\SKPP YZ`KI-FH #Kc2fO\_FLT9Q_[3T9F]b0JT9KIKhG]\SKPP JVYjUT9QSGTQSJ M#Y{FP I#YJ eF\SY3I#[# qnF]Z:YbFL[Y3QSI#[hZ:W9bJT#F]bv
jnFh^Ob/PVJn[FI#F]b/K\SQ_]FhY3W#b©G]\SKPP/Q_^OG]KaJQ_Y3I%PVF]JVJQSI#[#v9KIOMbF]f`\SKGHFJT#FhGHY3cc2Y3II#YJKaJQ_Y3I'p &)(*!,+dZ:Yb©KI
FH #Kc2fO\_F	e(XJT#Fhc2YbFh[FI#F]b/K\9Y3I9F'p &)(	!, + "UF]bF*
v !, + m/02 (:x 9 ' QSPRK!NFGHJVYbn[3QSN{QSI9[#vZ:YbBFKGT%G]\gKPP]v
JT#F!cFc!emF]b/PTOQ_fJVYJT#FG]\SKPPp V %QSP"I9YKI9M ]x QSP"XFPLYZ JT#FGHYb/bFPVfmY3I9M9QSI9[-Ye`PVF]bNaKaJQ_Y3
I &{
J!QSPQScfYb/JKIJoJVYI9YJVFJT9KaJJTOQSPPVF]JVJQSI9[QSPc2Yb/F[FI#F]b/K\RJT9KIJT#FWOPW9K\dqLKXFP/QSKI¤PF]JVJQSI#[#v
QSIjUT9QSGTJT#F]bFkG]KI£FH uQgPVJ!FH #Kc2fO\_FPk'p &)(*!,+]!KI9M¡'p &N(*! + ; p.W9PQSI9[JT#F%I#Y3!I DNFGHJVYbI#YJKaJQ_Y3IoZ:Yb
jUT9QgG/
T &1% &  eOW#H
J !,+% 0 ! + ; UE	K(I uQSI#[\_Y3P/PU[FI#F]bK\SQ_]FPhqnKXFPJVYJT9Fc-W9\_JQS\SKaemF\mf9b/YeO\_FcP]vKI9M
fmY3PVJW9\SKaJVFPnJT9KaJ©JT9F]bFoG]KIkeFPVY3c2FFH #Kc2fO\_FPnZ:Yb©jUT9QSGTjnFG]KI9I#YJLf9b/YNuQSM#FK-P/QSI#[3\_FhG]\SKPP©KaJ"K
JQSc2FvuF]NFIQ_ZL2 14351dKI(XYZJT#FoG]\SKPPVFPLJVYjUT9QgG/TJT#FFH uKc2f`\_F	emF\_Y3I9[3PnKab/FhPWOPGHF]f9JQ_eO\SFUJVYKaf9fmFKab
QSI9M9F]fFIOM#FIJ\SX\SKaJVF]bUjUQSJTkJT#FPKc2FYe`PVF]bNaKaJQ_Y3I7
E	K(I {QgI#[\_Y3P/PBqnY{Y3PVJQSI#[-bF]fO\SKGHFPnFKGTkFH uKc2f`\_F-'p &)(	!, +e{XKPVF]JnYZRx ' = @ 'p ! 7x ' = @ dFH uKc2f`\_FP]v
jUT#F]b/F¤x ' = @ M#FI#YJVFP%JT#F "	KccQSI#[jnFQ_[3T(JkYZ !
 +£p J 1.2 1 JT9FI{W9ceF]b%YZ!G]\SKP/PVFP%JVY¤jUTOQSG/T1JT#F
FH #Kc2fO\_FeF\SY3I#[3P RKGTYZJT#FPF-I#F]j FH uKcfO\_FPUQgPUM#FI#YJVFM¢'p &)(	8(
(v7jUT9F]b
F 
kKI9
M lPVfOKIiK\S\
NaK\SW#FPQSE
I 02 (3x (5464646(*!@7t:x 9 . %UT#FM9QSPVJVbQ_eOW#JQ_Y3IiYZLJT#FI#F]j FH uKcfO\_FPQSPbFI#Yb/cK\gQ_]FM7vPVYJT9KaJ
;-pV'p &)(	8(
{V? % (	  @ ,, , + '  ' = @ (	11 @ 1 j	T#FI#F]NF]b !, +- 
/ % xKI9M !, +-/8%¡uvOKI9M2YJT#F]bjUQgPVF
 Y3I9Y3 c QSK\ LYe9JKQSI9FMlZ:bY3c JT#F-\SKab[F-}  v`KI9MlK\g\FH #Kc2fO\_FP	PKaJQSPVZ:X{QgI#[Q_J] F
 K F-PY3c2Fc2
I#YjjBYb !jUQ_JTJT9QSP bFPVJVb/QgGHJVFM-P/W#eOPVF]J YZ9FH #Kc2fO\_FP]vj	T9QS\_FRG]K\gG]W9\SKaJQSI#[hJT#F©GHYbbFPfY3IOM9QSI#["NFGHJVYb
  YZ d#G/T9KafOQSbF r uQSI#[F]bp+xyy3Bf9bYfmY3PVFUK-GHY3PVJnZ:W9IOGHJQ_Y3IjUTOQSG/TjBFPT#Y3W9\gMcQSI9QgcQ_]F"QSI2YbM#F]b
JVYcQgI9QScQ_]FhJT#FbK(I {QgI#[2\_Y3PP]d"TOQSPnZ:W9IOGHJQ_Y3IQSP

 %



4

+ "  

;-pVp'&)(	8(
(V

" 
 $   , =   =   1

4

pw~3

"	F]bFv QSPKJWOI9KaeO\_F©fOKabKc2F]JVF]bdjUT9QgG/T7v3QSI(JW9Q_JQSNF\_XvbF]f9bFPFIJPJT9FUGHY3I#^OM#FIOGHF"QSIJT#F"G/T9Y3QSGHF

YZ(  v`KI9M\_F]NF]bKa[FP	Q_JP	§(WOK\SQ_JXL"T#F!eF]JVJVF]b-  QgPUKaJUG]\SKP/PQ_Z:X{QSI9[2FH uKc2f`\_FP]v9JT#F\SKab[F]b	QgP"G ?G©+I
Y3W#boG]KPVF2T#YjBF]NF]bv0KW#JT#Yb/Q_QgI#[! % 0 xQSPhF§{W9Q_NaK\_FIJhJVYKW#JT#Yb/QSQSI#[GHY3cfY3I9FIJPhZ:Yb   QSI5PVF]JP
07  (2 ( 9Z:Yb"KabeOQSJVb/Kab
X 0dY2b/FK\S\_XGHY3IOPVJVb/KQSIkJT#FGHY3cfY3I9FIJP©YZ   Qg
I 073x (2 (  :x 93vOjnF!T9KNF
G/T9Y3PVFIlJVYYfOJQScQ_]FoJT#FGHbQ_JVF]b/Q_Y3I

 %

4

+ "  

;-pVp'&)(	8(
(V

" 
 $  , =   =   1

p 3

p:JT#F]b/F]ZYbFoZ:Yb/G]QSI9["% xLuG/T9Kaf`Q_bF r uQSI#[F]bp+xyy3©GHY3I+FGHJW#b/FoJT9KaJ©^OI9M9QgI#[!JT#FoYfOJQScK\
NFGHJVYbcQSIOQScQ_QSI9[  QgIF§`£pw~3%p:jUT9QSGTQSP-PQScQS\SKaboJVY5KI  !\J  J $&% TX{fmYJT#FPQSPKG]GHYb/M9QSI#[iJVY
JT#FQ_bhM#F]^OI9QSJQ_Y3I9Pv9Yb [3Q_NFIKf`KabJQSG]W9\SKabUN8K\SW9F!YZ#RvQSP  "	Kab/MijUT#FI!QSP	I#YJ	^9 {FM7vKI9M
jUT#FIJT#FhGHY3c2fmY3I#FIJPnYZ   Kab/FhQSIJT#FPVF]H
J 07!3x (  :x 93R"T#F	ZY3\g\_YjUQgI#[!PVFGHJQ_Y3IkKM9M9bFPPVFPnM9Q_bFGHJ\SX
JT#F-PVF]JVJQSI#[YZB#G/T9KafOQSbF r #QSI#[F]bp+xyy3v7KI9Mf9bFPVFI(JPUGHY3c2f`\_FH uQSJX DJT#F]YbF]JQSGbFPW9\SJP"PT#YjUQSI#[

$

:PO



JT9KaJJT9FcQSI9QScQ_KaJQ_Y3IYZ  QSPoKGHJWOK\S\_XfY3\SX{I#Y3cQSK\wvmeOW#JT9QS[3T9\_XGHY3c2f`\SQSG]KaJVFMJVYKGT9Q_F]NFv K\S\
JT#F5c2YbFZYb%jUT9KaJkQ_J%QSPP/W#f9fmY3PVFM¨JVY¢e9bQSI#[JVY£JT#F5cQSI9QScQ_KaJQ_Y3IYZ  QSI Y3W9b%PVF]JVJQgI#[# 
PVJVb/Q {QSI9[bFP/W9\_JojnFK\SPVYl[3Q_NFv I#YJobF\SKaJVFMJVYlJT#FfOW9bfmY3PVFYZBJT#F2f`KafF]bvQSPJT9KaJ!QSJQSPoKGHJW9K\S\_X
JT#F!cK8 uQScQ_KaJQ_Y3IkY	
Z  j	T9QSG/TQgP   "	Kab/M
"T9FI7vujBFfObFPVFI(J©JT#FKaf9f9bY uQgcKaJQ_Y3IK\_[Yb/QSJT9c jBFT9KNFe`W9QS\_JLKI9MQSc2f`\_Fc2FI(JVFMJVYYf9JQ 
cQ_]FBJT#FLGHY3c2fOW#JKaJQ_Y3IYZ   QSI!Y3W#b0PVF]JVJQgI#[p.GHY3cfY3I9FIJP YZ   QSI!JT#FBPVF]J 073x (2 (  :x 98v{K\_Y3I#[	jUQ_JT
Q_JPBf9bYfmF]bJQ_FP ¡T9QS\_F	jBFhZ:F]F\`JTOKaJBJT#FQSM#FKPnW9PVFMJVY2cQSI9QgcQ_]F ¡QSIJT#FPVF]JVJQSI#[-YZ0uGT9KafOQ_bF r
uQSI9[F]b	p+xyy3nG]KIemFUKMOKaf9JVFMJVYY3W#bLPVF]JVJQSI#[JVY-f9bYN{QgM#FUKIK\S[Yb/Q_JT9c JT9KaJnQgPdK\_jLKXuPBYfOJQScK\wv
Y3W#bK\_[YbQ_JT9c T9KPoJT9FKM#N8KI(JKa[FJVYemFPQgc2fO\_FvmZ.KPVJ]vKI9MK\gPVYkYf9JQScK\ Z:Yb!I{W9c2F]bY3W9PoG]KPFP]
+IlcKI(XYJT#F]bhG]KPVFP]v9jnF!PT9Yj JT9KaJ	Q_J"QSP"PVJQg\S\mKPVX{cf9JVYJQSG]K\S\_X%Yf9JQScK\7KP !oQSI9GHbFKPFP]

	



!"#$&%	'& r

')(*,+-+-.0/

+IkJT#FoG]KPVFjUT#F]b/F	FKGTGHY3c2fmY3I#FI(J©YZ   QSPnbFPVJVb/QSGHJVFMkJVY2JT9FPVF]J 07x3(  :x 93v#G/T9KafOQSbF r #QSI#[F]b
p+xyy3[3Q_NFLK"jLKXJVYG/T#Y{Y3PV
F kJVY	cQSI9QScQS]F £ZYb KIX!fY3P/PQ_eO\_FGT#Y3QSGHFnYZ   .p W9PQSI#[UY3W#b0I#YJKaJQSY3I`<


%

~

x

\SY[21

0 

0 43 (

p +(

jUQSJT9

0 
%

0 
%

4
+ 
4
+ 

"
"

;-pVp'&)(	8(
{V - - 

- /




7 


  -/

;-pVp'&)(	8(
{V - - 

- /




7

- /

%t~ / /"(

p 3

% 7U~ / /	4

pw|3

EUF]fO\SKG]QSI#[2JTOQSPLN8K\gW#FoYZ £
 QSIkF§`	pw~3v`[3Q_NFP"JT#FoZ:Y3\S\_YjUQSI#[2I#F]jFH {f9b/FPPQ_Y3IkZ:Yb

 % 0

0

 ~,5 0  0  (




pD¥

jUQSJT 0 0 %76 +    " ;-pVp'&)(	8(
(V - -  - 
/87   -/ %t/ /n#G/T9KafOQSbF r uQSI#[F]bp+xyy3"b/KQSPVFJT#F!f9bYe
\_Fc Y ZmcQSI9QScQ_QSI#[  K PM#F]^OI#FMQSI-F§{W9KaJQ_Y3I9P"pw~3 KIOMlpD¥ F	I#Yj¨PT9YjJT9KaJdQ_J QSP fmY3\_XuI#Y3cQSK\w

#" E"F> 98 J 6J8TgJMLrJ 3  "% V( a  j V2 J  I H  J  ;: $ "  J 	(%/	=<4] 	?> 5  	;@+ J % 
 !   fTgJ"!6X I  
fT 
 	    % [N    " V % . J jV    I  %  <0 7!x3(  x:9 1
kÚ36)jl {F]FoJT#F  f9fmFI9M9Q_ 
 

I 

/b KaJT9F]b-PVJVbQ#{QgI#[bFPW9\SJ[3Q_NFI¤JT#FGHY3IVFGHJW#bF%YZ	uGT9KafOQ_bF r uQgI#[F]bp+xyy3-QSP!JT9KaJQ_J-QSP
JT#FcK8 #QScQ_KaJQSY3I¤YZ !vRKI9M¢I#YJ2Q_JPcQSI9QgcQ_KaJQ_Y3I7v jUTOQSG/T£QSP1  "	Kab/M TOQS\_F%JT9QSPQSPI#YJ
JT#Ff`W#bfmY3PVFYZLJT#Ff9bFPFIJofOKafmF]bp:jnFKab/FQSI(JVF]bFPVJVFMQSIcQSI9QScQ_QSI#[ hv0jBFT9KNF%G/T#Y3PVFIJVY
[3Q_NFoT#F]bFoK-e9b/QSF]Zf9bY{YZP F]JGTYZJT#FbFP/W9\_J]v{jUT9QSGT%WOPVFPLG]\SKPPQSG]K\bFMOW9GHJQ_Y3I9PnZ:bY3c jBF\S\  {I#YjUI
  "	KabMf9bYeO\SFcP]


#" E"F> A8 " i 'J TgJ L J  3  "% V a  WV J  I H J  ;: $ "  J 	(% 	=<5] 	?>    B	 @ sJ % :_` " O V X I  
 I  fT 
 	    % [N    " V % . J jV    I  %  <07!x3(  x:9 1
kÚ36) ?. 6" 7rAl uF]
F JT#F  f9fmFI9M9Q  m
 

:PODC



 
	



!



££½£iwc©

	
ª£

' 

P f9bF]NuQ_Y3W9P\_XKab/[3W#FM2QSI"T#F]YbFc +#v{cQSI9QgcQ_QSI#[  QSI-JT#F©PVF]JVJQSI9[oYZmuGT9KafOQ_bF r uQgI#[F]bLp+xyy3
G]KIieF-M#Y3I#FYf9JQScK\S\SXv9eOW#JUKaJhJT#FFH {fmFI9PVFYZdGHY3c2fO\_FH lYfOJQScQ_KaJQ_Y3If9bYuGHFM9W#bFPv9jUQ_JTi\SKab[F
GHY3c2fO\SFH uQ_JQSFP]BI#FoG]KIljnY3I9M#F]bUjUT#F]JT#F]b"PWOG/Tf9b/Y{GHFM9W9bFP]v#JVYYf9JQgcQ_]FY3I9\_X%JT#FGHY3c2fOW9JKaJQ_Y3I
YZ   p.KP/cK\S\mfOKabJ©YZ 
vOKabFb/FK\S\_XjnF\S\7jnYbJTJT9FKM9Kaf9JKaJQ_Y3IJVYY3W#bUPVF]JVJQgI#[#v9QSIkjUT9QgG/T
c2YbF!N8K\SW9FPUKabF!KW9JT#Yb/Q_]FM7#
 F-Kab/F!I#Yj [Y3QSI#[JVY%PT#YjJT9KaJhKcWOG/TP/QSc2fO\_F]b"GHY3ceOQSIOKaJVYb/QSK\
f9bYuGHFM9W#b/Fv	jUQSJTtGHY3c2fOKab/KaJQ_NF\SXNF]b/X¡\SYj GHY3c2f`\_FH uQSJXvG]KIte9bQSI#[¢Yf9JQScK\b/FPW9\_JPlQgI¡Z:KQ_b\_X
[FI#F]b/K\PQ_JWOKaJQ_Y3I9P]"T#Fhc2Y3PVJnPQSc2fO\SF©jnKXJVYM#FPGHb/Q_emF"c2Y3PJBYZ7JT#FPFhPQSJW9KaJQ_Y3I9PBQSPdJVYcK FJT#F
Z:Y3\S\_Yj	QSI#[2KPPW9cf9JQ_Y3IkY3IJT#FoFH #Kc2fO\SFP 


p2BKG/TFH uKc2f`\_FW9PVFMJVYGHY3c2fOW#JVF   T9KP©Y3I9\SXY3I#F]xQSIQ_JP"G]\gKPP©NFGHJVYb
]G Kab/F]Z:W9\ bFKMOQSI#[YZBKPPW9c2fOJQ_Y3I¤pUbF]NFK\SPhJT9KaJoQ_J	Qgc2fO\SQ_FP"JT9KaJFKG/T5FH #Kc2fO\_F-emF\_Y3I#[3P
JVYFH uKGHJ\SXY3I#FoG]\SKPPv $ RQ_JLM#Y{FPnI9YJnfObF]NFIJ©KI%YeOPVF]b/N8KaJQ_Y3I%JVYemF	F\SFc2FIJLYZ c2YbFhJT9KIkY3I#F
G]\SKPPvuKPU\_Y3I#[2KP©M9Q *mF]bFI(JnFH #Kc2fO\SFPnP/T9Kab/QSI#[-JT#FPKcFhYe`PVF]bNaKaJQ_Y3IT9KNFM9Q *mF]bFIJLG]\SKPPFPp:JT#F
]xYZmJT#F	G]\SKPPdNFGHJVYbPBQSPRQSI2M9Q *mF]bFI(JdfmY3PQ_JQ_Y3I9PKcY3I#[JT#FPVFUFH uKc2f`\_FP"T#F]bF]Z:YbFv(F]NFIQ_ZQ_J
M#Y{FPRI#YJBQSIJVF][bKaJVFUJT#FUcY3PVJR[FI#F]bK\9Z:FKaJW#bFPdYZmJT#F	b/K(I uQSI#[o\_Y3PPBPVF]JVJQSI#[#v(Y3W#bBKP/PW9c2f9JQSY3I2PVJQS\S\
KW#JT#YbQ_]FPdJVY-GHY3I9PQSM#F]bRf9bYeO\_FcP jUQ_JTI#Y3I]F]bYqLKXFPBYfOJQScWOc UT9QSPdQSPdbFK\S\_XQSI(JVF]bFPVJQSI#[#v{KP
cKI(X!GHY3cc2Y3IO\_XW9PVFM-M9KaJKPVF]JPZ.K\S\(QSIJVYhJT#FLG]KaJVF][YbX-YZ9Y3W#b KPPW9c2fOJQ_Y3I7vaKP ZYb FH uKcfO\_FLcKIX
M9KaJKPVF]JP	YZ JT#	
F   LbF]fmY3PQ_JVYbXYZ  KGT9QSI#F  FKab/I9QgI#[2M9KaJKaeOKPVFkp.qn\gK F!F]J	K\D_vxyy3© QgI9K\S\_Xv
F]NFIQSZJT#FKPP/W9c2f9JQ_Y3IM9Y(FP©I#YJ	T#Y3\SM7vujnFPT#YjJT9KaJUQSIcKI(X%YZ0JT#F!bFcKQSI9QgI#[kp.QgIJVF]bFPJQSI#[(
G]KPVFP]vuY3W#bLKaf9f9b/Y #QScKaJQ_Y3IK\_[Yb/Q_JT9c QSPnKPVX{cf9JVYJQSG]K\S\_XYf9JQgcK\wv{JT9KaJBQSPv(^OIOM9PdPVY3\SW9JQ_Y3I9PRG]\SY3PVF]b
JVYJT#FcQSI9QScK\ONaK\SW#FoYZ KH
P !oQSI9GHb/FKPVFP]
uW9f9fmY3PVFkZYbI#Yj JT9KaJp T#Y3\gM9P] W#b2Ye VFGHJQ_NFQgPJVYG]K\SG]W9\SKaJVFJT#FNFGHJVYb   YZoPVY3c2F
c2Y3I#Y3cQSK
\  FW9PF%JT9FlPT#YbJT9KIOM9P 0 0  ( 0 (  (5464646( 0  ( JVYM#FI9YJVFJT#FlPW9c YZhjBFQS[3TJP2YZ
JT#FFH #Kc2fO\SFP!PKaJQSPZXuQSI#[ oKI9MeF\SY3I#[3QSI#[kbFPVfmFGHJQ_NF\SX' JV YG]\SKPPVFP2 (3x (5464646(*!@7txa FjLKIJJVY
cQSIOQScQ_]
F  KP©f9bYfmY3PVFMQSIlF§O	p 3LuW#f9fmY3PVFjUQ_JT9Y3W#J©\_Y3PP©YZ [FI#F]b/K\gQ_JX%JT9KaJ


  0 (
0 0


46464


0 '  ( (

YJT#F]bj	QSPVFvmbF]Yb/M#F]bJT#FG]\SKPPFPhPY%JTOKaJhJT9F]XlNF]b/Q_Z:XlJT9QSPhKPPVF]b/JQ_Y3I7  Q_NFIY3I9\_XJT#bF]F-fY3P/PQ_eO\_F
NaK\SW#FPoZ:Yb!FKGT¤GHY3c2fmY3I#FI(JYZ   v0JT#FJVFPVJQgI#[lYZ©K\S\  ' fmY3PP/Q_eOQS\SQSJQ_FP"Z:Yb   QSPoFH ufmY3I#FIJQgK\dKI9M
JQSc2F GHY3IOPW9cQSI9[# qLW#JUjBF!G]KIlf9bYfmY3PVFK2NF]bXkZ.KPVJ"Kaf9f9b/Y3KG/T7 F-T9KNF-QSI9M#F]FM

B "F> >  
  x 
kÚ36)jl {]F FoJT#F




	





!:(  




- /






- / 1

 f9fmFI9M9Q_ 
"T{W9P]v(JT#F"Yf9JQgcK\   M#Y{FPRI#YJBemF\_Y3I#[oJVYKPVF]JRYZG]KabM9QSI9K\SQSJX  ' v(eOW9JdJVYKPVF]JRYZG]Kab/MOQSI9K\SQ_J)X
kp'! . oW#bK\_[Yb/Q_JTOc QSPoJT#FI¤PVJVb/KQ_[3T(JVZ:YbjnKabM9PQgc2fO\_XlFH ufO\_Yb/FJT9QSPoPVF]JYZ kp'! . F\_Fc2FI(JP]v
KI9
M F]F]fJT#F-NFGHJVYbT9KNuQSI#[%JT#F\_YjnFPVJN8K\gW#F!YZ ! UYJVFJT9KaJhJT9QSPhGHY3ceOQSI9KaJVYb/QgK\0K\_[YbQ_JT9c
T9KPnJT#FoKM#NaKIJKa[F!JVY-emFKM9Kaf9JKaeO\SFhJVY2c2Yb/Fh[FI9F]b/K\7PVF]JVJQSI#[3PLQSI%jUTOQSG/T 8f`KabJQSG]W9\SKabnNaK\SW#FPLKabF
KW#JT#YbQ_]FMkZYb©JT9FGHY3cfY3I9FIJP©Y+
Z   vuZ:Yb"KIX%^# uF
M 80I9YJLI9FGHFPPKab/QS\SXF§{W9K\JVY {dIkJTOKaJ"G]KPVFv
JT#F!GHY3cfO\_FH #Q_JXkQSP©\SKab[F]bv#eOW#J"\SQScQ_JVFM%JVY k'p ! 1  ( 
"T9F]bFKabFP\SQ_[3T(J\_X¤cYbF[FI#F]bK\UPVF]JVJQSI9[3PQSI¨jUT9QSGTY3W#bK\_[YbQ_JT9c b/FcKQSI9P2YfOJQScK\wvLQSI
 
 0     p   % 0 
 (	 0 "   
 0    V pVp 0 "  
fOKabJQgG]W9\SKabUj	T#FIljnFG]KI5GHF]bJQ_Z:X  
 (	v pVp 0 "
0     p   % 0 
J(	 0 "   
 0    V "	F]bF(v 0   M9FI#YJVFPJT#F2PW9c YZRjnFQ_[3T(JP	YZBJT#F-FH uKc2f`\_FP
emF\_Y3I#[3QSI9[	KaJd\_FKPVJJVYoG]\SKP/P vKI9M 0    M9FI#YJVFP JT#F"PW9c YZ`jBFQ_[3T(JP YZJT#FLFH uKc2f`\_FP emF\_Y3I#[3QSI#[
:PO



KaJ\SFKPVJJVYiG]\gKPP 0v KI9M   emF\_Y3I#[3QgI#[lKaJ\_FKPJJVYiG]\SKP/
P %"TOQSPPT#YjUPJTOKaJ!F]NFI¤ZYb-PVY3c2F
fOKabJQgG]W9\SKabc-W9\_JQg\SKaemF\©G]KPVFP]vUY3W9b%Kaf9fObY #QScKaJQ_Y3I1K\_[Yb/Q_JTOc G]KI1bFcKQSI1Yf9JQScK\w I#FG]KI
jnY3I9M#F]b2Q_Z©JT#FkYf9JQScK\SQ_JXQgPfObFPVF]bNFM¢QSI¤JT#FkW9I#bFPVJVbQSGHJVFM¤c-W9\_JQg\SKaemF\dZ:b/Kc2F]jnYb` FlI#Yj
PT#YjtJT9KaJ]v#Q_ZYf9JQgcK\SQ_J)XQSPnI#YJLf9bFPVF]bNFMv{jnFoG]KIPVJQS\S\`f9bYNFJT#Fo§(W9K\gQ_JXYZY3W#b"K\_[Yb/Q_JTOc Z:Yb
[FI#F]b/K\cW9\SJQS\SKaemF\mG]KPVFP]vOPT9YjUQSI9[KPVX{cf9JVYJQSGYf9JQScK\SQ_JXkKP !oQSIOGHbFKPVFP]
W9b KafOf9bY #QScKaJQSY3I-K\S[Yb/Q_JT9c QSP b/W9IQSI-JT#F©c-W9\_JQS\gKaeF\(G]KPVF©e{X!JVb/KI9PZYb/cQSI#[hJT#FLFH uKc2f`\_FP
KP"Z:Y3\S\_YjUP dFKGTFH #Kc2fO\SF'p &)(	!
 +©ZYb"j	T9QSG/Tx ' = @ 
 xQSP©JVb/KI9PZYb/cFMlQSI(JVYx ' = @ FH uKcfO\_FP]vOTOKNuQSI#[
JT#FPKcFM#FPGHb/Q_fOJQ_Y3
I &{vKIOM5Y3I9\_XY3I9F ]x lQSIJT#FQ_boNFGHJVYbv QSIPW9GTKkjnKX5JT9KaJojBFPfOKI5JT#F
x ' = @ 
 x ]x !YZ`JT9F"Yb/Q_[3QSIOK\uFH uKc2f`\_F UT#FQ_bjnFQ_[3TJBQSPJT#F©Y3I#FUYZJT9F"Yb/Q_[3QSIOK\(FH #Kc2fO\SFv(M9Q_NuQSM#FM
e{Xx ' = @  F!JT#FIb/W9IkY3W9bUK\_[Yb/Q_JTOc Y3IJT9QSP©I9F]jPVF]J"YZ FH uKcfO\_FP"PKaJQgPVZXuQSI#[2KPP/W9c2f9JQ_Y3Ip 
	YjvmPW#fOfY3PFJT9KaJhZYbhKIXlFH #Kc2fO\SF'p &)(	!  + vjnFT9KNF%x @  Z:YbhPVY3cF U"T9F]bF!KabF-JjnY
'=
QSI(JVF]bFPVJQSI9[NFGHJVYb/P-jBFWOPVF"T9F2^9b/PVJoY3I#F%QSP   v JT#FYfOJQScK\NFGHJVYbp:YbKIYf9JQScK\NFGHJVYbH
cQSIOQScQ_QSI9

[  YNF]b%JT#FYb/Q_[3QSIOK\©PVF]JYZhFH uKc2f`\_FP]vnJT#FlPVFGHY3I9MY3I9FQSP   vRJT#FlNFGHJVYb%jnF^OI9M
cQSIOQScQ_QSI9[ YNF]bJT#FJVb/KI9PVZ:Yb/c2FM1PVF]J%YZFH uKcfO\_FP] T9KaJ%jnFijLKIJQSPJVY¤FPJQScKaJVF5JT#F
§{W9K\SQ_J)XY+
Z   jUQ_JT%bFPfFGHJ©JVY2JT9FoYf9JQScK\mNaK\SW#FYZ YNF]bUJT#FYb/Q_[3QgI9K\mPVF]J"YZFH #Kc2fO\SFP]v -p    
W9PQgI#[Y3W9bLI9YJKaJQ_Y3I7R"T9F	Z:Y3\S\_YjUQSI#[JT#F]YbFc [3Q_NFP©KIKIOPVjBF]b©JVY2JTOQSPnf9bYeO\_Fclv(e{X§{W9KI(JQ_ZXuQSI#[
Q_JP"GHY3I(NF]b[FI9GHF-JVYjLKab/M9P -p    

#" E"F>  p  
 

kÚ36)jl {F]FoJT#F



-p   8x  	'   


1

 f9fmFI9M9Q_ 
"T9F]bF]ZYb/Fv"QSIJT#FPVF]JYZK\S\Uf9bYeO\SFcP2Z:YbjUTOQSG/TZ:YbkPVY3c2F  xav    !v©jnFYeOJKQSI
-p  < % p+x  &#p+xV Ap   v{KI9MY3W#bdemY3W9I9M2GHY3I(NF]b[FPBJVYJT#F©Yf9JQgcW9c KP<!©QSI9GHbFKPFPdQSIJT9QSPG]\gKPP
YZf9bYe`\_FcP]"qnXc2FKIOPUYZjnYb/M9P]vY3W#bPQSc2f`\_FKaf9f9bY uQgcKaJQ_Y3IK\S[Yb/Q_JT9c QSP	§{W9Q_JVF!FG]Q_FI(J	Z:Yb
f9bYe`\_FcP©jUQSJTl\SKab[F-I(W9cemF]bUYZdG]\SKP/PVFP] 	YJVFJT9KaJhW9PQSI9[KP\SQS[3TJ\_Xc2Yb/F!QSI(NY3\_NFMfObY(YZv9jnF
GHY3W9\SMT9KNF	bFM9W9GHFMJT#FUGHY3I9PVJKI(J *$>!Z.KGHJVYbLQSI2"T#F]YbFc |oJVYJT9F	P\SQS[3TJ\_X-PcK\S\SF]b *$ 7p+x 3$8 u
	Yjv JVYl^# 5JT#FQSM9FKP]vJT#FZY3\S\SYjUQSI9[kP/W#eOPVFGHJQ_Y3IMOQSPVfO\SKX{PJT9FFH {f`\SQSG]Q_Jp.KI9MP/QSc2fO\_F	PVY3\gW#JQ_Y3I
jUT#FIkJT9F]bF!KabFY3IO\_XJ)jBY%G]\SKPPVFP]

	,$   !

   %   % 
0 0 % 0 ¤
 KI9M 0 (  % 0 ¢bF]f9bFPFIJQSI9[JT#F-ZbKGHJQ_Y3IYZ

#YbJT#FPK F-YZRPQSc2f`\SQSG]Q_J)Xv9bFI9Kc2F
FH #Kc2fO\_FP©Z:bY3c JT#FI#F][3KaJQ_NF!KI9MkfmY3PQSJQ_NFoG]\SKPP©bFPfFGHJQSNF\_XvOPKaJQSPZXuQSI#[ B"T#Fb/W9\_FJVYGT#Y{Y3PVF
  QSPLJT#FZ:Y3\S\_YjUQSI#[(

B "F> > %n t I  AN ! ! fXhJ 3  "!  3 J  %  I  $&!    I  %  "
 !
pN
 I  X  I % 
#%$  ($ '
  % p 7x3(  x
#& # $
5 $  # &  $ '
  % p 7!x3(    % p.2(  x
*
#
$
) (   ##*&$  5 $   % p 7!x3( 7 x     % p.2(    % p  x3(  x
(
(

  % p.2( 7!x    % p  x3(
 ' #% $ #+ & ( ) 
  % p  x3( 7x
#&  '
kÚ36)jl {F]FoJT#F  f9fmFI9M9Q_ 
:PO =



££½£iwc©

	
ª£

 +-,
  kÚf3 "##"($ 

"T#FK\S[Yb/Q_JT9c QSPKP/QSI#[3\_F DfOKP/PK\_[Yb/Q_JT9c £FKGT b/WO\_FQSPkJVFPVJVFM Y3IO\_X Y3I9GHFvoZ:bY3c JT#F^9b/PVJ
b/W9\SFJVYlJT9F\gKPVJoY3I#F#Yb!FKGTfmY3PPQ_e`\_F!b/WO\_Fv7KGHb/Q_JVF]b/Q_Y3I	

pbF]JW#bI9P V"EA  Yb
V 	 !
 8-M#F]fmFI9M9QgI#[oY3Ij	T#F]JT#F]bRJT9F	b/WO\_FUPT#Y3WO\SM2emFUbFcYNFM%YbnI9YJ]d"T#F]bFhKabF	J)jBYNF]b/P/Q_Y3I9P
YZJT9QSP	GHb/Q_JVF]b/QSY3I7""T#F^9b/PVJ"Y3I9Fv`jUTOQSG/TjBFG]K\S
\ +fmFPP/QScQSPVJQgG uvOQSP"e`KPVFMY3IGHY3I(NFIJQ_Y3IOK\0F]b/bYb
cQSIOQScQ_KaJQ_Y3I1"T#FiPVFGHY3I9M¨Y3I9Fv"G]K\S\_FM +YfOJQScQSPVJQgG uvLQgPM#F]b/QSNFMZb/Y3c KfObF]N{QSY3W9P2jnYb Y3I
f9b/WOI9QSI#[M#FG]QSPQSY3!I DJVbF]FP!p s FKabI9P r  KI9PVY3W#bvxyy3





   $ '


&

 FPPQScQSPVJQSGhf9b/WOI9QSI#[-eOW9QS\gM9PBKPVF§(W9FI9GHFYZ}  Zb/Y3c

J T#F!QSIOQ_JQSK\Y3I#F  J	FKG/TPVJVF]fv#jnFbFc2YNF
Y3I#F-b/W9\_FvmPW9GTJT9KaJoQ_JPUb/Fc2YNaK\ e9b/QSI#[3P	JT#F\_YjnFPVJF]bbYboKc2Y3I9[%K\S\0fmY3PPQ_e`\_FbFc2YN8K\gP	YZRb/W9\_F
QSIJT9FG]W#bb/FIJ!}   RKGTJQScFJT#FF]b/bYb!YZLJT#F%G]W#bbFI(J!}  QSPI#YJ![b/FKaJVF]bJT9KIJT#F\SYjnFPVJ
F]bbYbRZY3W9IOMK\_bFKM#Xv

pobF]JW#b/I9PdJVb/W#F"Z:YbRK\S\#bW9\_FPdK\_b/FKM#XJVFPJVFMZ:YbdbFc2YN8K\Dd"T9QSP
f9b/WOI9QSI#[b/F]JW#b/I9P	JT#F2PcK\S\SFPVJ	}  T9KN{QSI9[JT#F2\_YjBFPJhF]b/bYbYZRJT#F2PVF§{W#FI9GHF"TOQSPUfOb/W9I9QSI9[QSP
b/KaJT#F]bhI9KaJW#b/K\Bp.KI9MPQgc2fO\_Fv9KI9Mc2YJQ_NaKaJVFMe{XkJT#FZ.KGHJUJT9KaJ	JT#F!QSI9MOW9GHJQ_Y3IkYZ JT#F\gKab[F!} 
emF]ZYb/FBf9bW9I9QSI#[	M#Y(FP I#YJ \_FKM-JVYKhGHY3INFI(JQ_Y3I9K\#F]b/bYbcQSI9QScQ_KaJQ_Y3I70uWOG/TKhf9bYfmF]bJXQSPbKaJT#F]b
PVF\SM9Y3c QSI +JVYfM#YjUIkKI9Mf9bW9I#2F !QgI9M9W9GHJQ_Y3IK\_[Yb/Q_JT9cP] 9Yb©FH uKc2f`\_Fv{GHY3cc2Y3IM9FG]QSPQ_Y3IJVbF]F
QSI9MOW9GHJQ_Y3IK\S[Yb/Q_JT9cPBQSIJT9QSPnPG/T#FcFQgI9GHYbfmYb/KaJVFUNF]b/XPVYfOT9QgPVJQSG]KaJVFMf9b/W9I9QgI#[!GHb/Q_JVF]bQSKp   E 
p.qnbFQScKIlF]JUK\w_vxy +(v  +# lp W9QgI9\SKI7v7xyy +(V



 
	 $ '


&

s FKab/IOP r KI9PVY3W#blp+xyy3f9bFPFIJKiI9YNF\©K\_[Yb/QSJT9c JVYf9b/WOI#FM#FG]QgPQ_Y3IJVb/F]FP]vdeOKPVFM£Y3I¢K
VJ FPVJYNF]bk\_Y{G]K\g\_XYeOPF]bNFM¨F]bb/Yb/P]¨JPf9bQSI9G]Q_fO\SFQSPP/QSc2fO\_FFKGT QSI(JVF]b/I9K\UI#Y{M9FYZK}h QSP
JVFPVJVFMiY3I9\_XkY3I9GHF-QSIlKemYJVJVY3c W9fZ.KPT9Q_Y3I7v`KI9MljnF!FPVJQgcKaJVF!JT#F\_Y{G]K\F]bbYb	YNF]bJT#F\SFKab/I9QSI#[
FH #Kc2fO\_FPob/FKG/T9QSI9[lJT9QSPI9Y{M#Fv0emF]ZYbFKIOMKaZ:JVF]b!JT#Fb/Fc2YNaK\dYZLJT#FI9Y{M#F)ZnJT#F\SY{G]K\F]b/bYb
KaZ:JVF]bRbFc2YN8K\`QSPI#YJd[b/FKaJVF]bRJT9KI2JT9FU\_YuG]K\#F]bbYbdemF]Z:YbFv3fO\gW9P KofmFI9K\_JX-JVF]b/cv(JT#FI2jnF©bFc2YNF
JT#F-I#Y{M9FKI9MQ_JP	PW#e9JVb/F]Fn"T9FfmFI9K\_JXkJVF]b/c cK FP	JT#F!f9bW9I9QSI#[FPPFIJQSK\g\_XYfOJQScQSPVJQgGav#JT9KaJ
QSP]v7jnF2JVFI9M5JVYYNF]bf9b/W9I9F2JT#F2M#FG]QSPQ_Y3IJVbF]F "	YjnF]NF]bv JT9K(I uPJVYl\_Y{G]K\WOI9Q_Z:Yb/cGHY3INF]b[FIOGHF
bFPWO\_JP]vmKI9M5M9W#F-JVYJT#FZ.KGHJoJT9KaJoGHF]bJKQSIP/W#e G]\SKPPFPUYZnM#FG]QSPQ_Y3IiJVbF]FPKab/F-b/FKPVY3I9KaeO\_Xi\SKab[Fv
s FKab/IOP r  KI9PVY3W9bp+xyy3KabFKaeO\_F%JVYf9bYNFJT9KaJjUQ_JT¢T9Q_[3T¤f9bYeOKae`QS\SQ_J)Xv JT9F%YNF]bf9b/WOI9QSI#[
jUQS\g\0I#YJoemFJVY{YlPVF]NF]bF2jUQ_JT5b/FPVfmFGHJhJVYJT9F2Yf9JQScK\PW9e9JVbF]FYZRJT#FQgI9Q_JQSK\ }o F2bF]Z:F]bJT#F
bFKM#F]bhJVYJT9FQ_bUfOKafmF]b"Z:YbhZ:W#b/JT#F]b"JT#F]YbF]JQgG]K\bFP/W9\_JP]vOI9YJ	I#F]FM#FMT#F]bF©"T9FfmY3QSIJ	QSP"JT9KaJ	e(X
W9PQgI#[JT#F%bFPWO\_JP!YZ s FKab/I9P r KIOPVY3W#blp+xyy3vRjnFG]KI¢Ye9JKQSI£KP/QScQS\SKab!JVFPVJZYb2}   F
Fc2fOTOKPQ_]F-JT9KaJY3W#b	emY3W9IOMicQS[3TJI#YJhFI +YXJT#F2PKcFJT#F]Yb/F]JQSG]K\ f9bYfmF]bJQ_FPhKPhZYboM#FG]QgPQ_Y3I
JVbF]FP]vBemFG]KW9PVFkYZUJT#FG]Kab/MOQSI9K\SQ_J)XbFKPVY3I9PeOb/Q_F '9XY3W9J\SQSI#FM¤emF]ZYbF "UYjBF]NF]bvLPW9GTKJVFPVJQSP
QSI(JVF]bFPVJQSI9[!PQSI9GHF	Q_JBcKX\_FKMFPfFG]QgK\S\_X-JVYNF]bXP/cK\S\9KI9M%QSI(JVF]bf9bF]JKae`\_F"M#FG]QSPQSY3IGHY3ccQSJVJVF]FP]v
jUQ_JTJT#FYe{N{Q_Y3WOP!T#YfmF2JT9KaJJT#FQ_b!KG]G]W#bKGHXjUQS\S\ I#YJ-M#FGHbFKPVFJVY(YcWOG/T7k9W#bJT9F]b/c2YbFv JT#F
fOKafmF]bYZ s FKabI9P r  KI9PVY3W9b%p+xyy3M#Y{FP!I#YJ!GHY3I(JKQSI¤FH {fmF]b/Qgc2FIJK\dbFPW9\_JP F%JT9QS(I iY3W#b
GHb/Q_JVF]bQ_Y3IKP"K2jLKXkJVYJVFPVJ	T#FW#b/QSPJQSG]K\S\_X2JT#FoFH ufmF]b/QSc2FI(JK\mZ:FKPQ_eOQS\gQ_JXYZPVY3cFoYZ0JT#F!bFPW9\_JPLYZ
s FKab/IOP r  KI9PY3W#bhp+xyy3n"T#FUfOb/QSI9G]Q_f`\_FBYZ7Y3W9bBGHb/Q_JVF]bQ_Y3IQSPRFH uKGHJ\SX2JT#F	PKcFhKPBJT#FUYbQ_[3QSI9K\
JVFPVJ2YZ s FKab/I9P r KIOPVY3W#blp+xyy3  VG]KI¢jBFGHY3c2fOKab/FvRjUT#FI¤JVFPVJQSI9[5PY3c2Fkb/W9\_Fp (  KI9M
W9PQgI#[lJT#FFH uKc2f`\_FP!JTOKaJ-PKaJQgPVZXJT9Fb/W9\SFv0JT#FF]bbYb/PemF]ZYb/FKI9M£KaZJVF]b-bFc2YN{QgI#[JT#F%b/W9\SF25
 F]
J  ,    = 1 bF]f9b/FPVFIJnJT#FhF]bbYbnemF]ZYbF	bFc2YN{QSI9[JT#F	b/W9\_Fv(Y3I%JT#Fh\SY{G]K\PKc2fO\SH
F =?> ,    = 1 PKaJQSPZXuQSI#[
c2Y3I#Y3cQSK#\  }hFI#YJV
F nKP JT#FLF]bbYb emF]ZYb/FBbFcYNuQSI#[p (  vPVJQg\S\c2FKP/W#bFM-Y3IJT#F©\_YuG]K\{P/Kc2fO\_F
:PO $



=?> ,    = 1 "T#FIjnF2M#F]^OI#F-JT#F2T#FW#b/QgPVJQSG +fmFI9K\SJX p:f9bY{YZdY3cQ_JVJVFM9Q_JQSPKkbY3W#[3T5W#f9fmF]bemY3W9IOM
YZ s FKab/I9P r  KI9PY3W#bp+xyy3v  FccKx 

 ,    = 1

pD{F]JpVp
(   V  ~3{\_Y[7p -0  \_Y[hx
4

%

pw3

G =A> ,    = 1 G

{F]JpVp
(   V©M#FI9YJVFP	JT9FcK8 #QSc-W9c I{W9ceF]b	YZd\SQ_JVF]b/K\gP©YZdK\S\bW9\_FP"FH #GHF]f9J2p(  ©QgIlJT#F-G]W#b 
bFI(Jn}  v(JT9KaJLKIKabe`Q_JVb/KabX2FH #Kc2fO\_FhGHY3W9\SMPKaJQSPVZ:Xd"T#F	Z:KPVJnG]K\SG]W9\SKae`QS\SQ_J)XYZ   ,  1 QSPRYeOJKQSI#FM
KaJhJT#F!FH ufmFI9PVF!YZBK[bFKaJVF]bob/QgP kYZYNF]bf9bW9I9QSI#[#v`jUT#Y3PVFF *FGHJPhY3I5PVY3c2F-PcK\S\0 M9 = KaJKPVF]JPhjnF]bF
FH ufF]bQSc2FI(JK\S\_XM#b/KcKaJQgGZ:YbJT#F%KG]G]W9b/KGHX+IY3W#b-FH ufF]bQSc2FI(JP]vjUT9QSGT¤GHY3I(JKQSI£NF]bXP/cK\S\
M9KaJKPVF]JPvOjnF!T9KNFG/T#Y3PVFIJVYJW9I9FKfOKab/Kc2F]JVF]bh\SQScQ_JQgI#[JT9FoF *FGHJP	YZ JT9QSP©GHY3ceOQSI9KaJVYb/QgK\W#f 
fmF]bemY3W9I9M7  Yb/F2f9bFG]QSPVF\SX	v FT9KNFG/T#Y3PFI5JVYkWOI9Q_Z:Yb/c\_XkbFPKcfO\_"
F =A>QSI(JVY%Kk\SKab[F]bP/W#eOPVF]J
YZ aFH #Kc2fO\SFP]vLjUT#FIJT#FiQSI9Q_JQSK
\ =A> GHY3I(JKQSI#FM1\_FPPJTOKI aFH #Kc2fO\SFP]qnX¢JT9QSPvBjnF
KabJQ_^`G]QSK\S\_X%QSI9GHbFKPV#
F G =A> ,    = 1 GuKIOMcQScQSGhZYb	JT#F!PcK\g\M#Y3cKQSIOP©I#F]j M#Y3cKQSI9PLjUQ_JTKIQSM#FI(JQ 
G]K\d\SKab/[F]bPQ_]FvjUQSJTiJT9FKM9M9Q_JQ_Y3IOK\emFI#F]^9JPJTOKaJobFKPVY3I9KaeO\SFGHY3c2fOKab/QSPY3I9PcKXemFcKM#F2Y3I
f9b/WOI9QSI#[#
"T9FoN8K\SW9FoYZ 	
pVp (  V©QSP©JT#F]bF]Z:YbF V"A
E  8Q *  ,    = 1    ,  1    

 =

 
< 	

äC

 `>

ãâ

#Y3\S\SYjUQSI9[iKabF%JT#bF]F%FH {fmF]b/Qgc2FIJK\BPVFGHJQ_Y3I9PvdKQSc2FM£KaJJVFPVJQgI#
[  Y3IJT9bF]F%QgPPW#FP]i"T#F
^9b/PJBf9b/FPVFIJPLFH uJVFI9PQSNFhb/FPW9\_JPnY3I%JT#FJVb/KM#F]Y*PQSc2f`\SQSG]Q_J)XKG]G]W#bKGHX2Ye9JKQSI#FMke{X
!v9KI9M
GHY3c2fOKab/FP	JT9FbFP/W9\_JP	jUQ_JTlJT9Y3PVFYe9JKQSI#FMiZYbPVJKaJVF DYZ DJT#F KabJ!K\S[Yb/Q_JT9cP	"T#F-PVFGHY3I9M[Y{FP
Y3I%QSIM9F]f9JTKI9K\SX(]FPnZ:YbBJT#FcQSIOQSI#[ 8QSI(JVF]bf9bF]JKae`QS\SQ_J)XQSPP/W#Fv(KI9MJT#FhJT9Q_b/Mf9bFPVFI(JPnbFPW9\_JPRY3I
I#Y3QSPFoJVY3\_F]b/KI9GHF

 !

" !$3y>?;'¶87

$ 


3

 Ç$

 ufmF]b/QSc2FI(JPijBF]bF¢G]Kabb/QSFM Y3W9JW9P/QSI#[ JT9bF]F¢N8Kab/QgKIJPYZ
 jUQ_JT Yf9JQScQgPVJQSGfOb/W9I9QSI9[

:p Y(vhjUQ_JT1fFP/PQScQSPJQSGkf9b/W9IOQSI#[1p:fvhKI9M1jUQ_JT#Y3W#Jf9b/W9IOQSI#[1p 3  KaeO\_F¢xf9bFPVFI(JPkPVY3c2F5bF 
PW9\SJPY3I¤N8Kab/QSY3W9P!M9KaJKPF]JP]vRc2Y3PVJYZ"jUT9QgG/TjnF]bFJKFI¢ZbY3c JT#F   ob/F]fY3P/Q_JVYbX5YZ"cKG/TOQSI#F
\_FKab/IOQSI#[M9KaJKae`KPVF¨p.qn\gK FF]JK\w_vxyy3 #YbFKG/TtM9KaJKPF]J]vUJT#FF]NFIJWOK\oM9QSPGHbF]JQSKaJQ_Y3I YZ
KaJVJVb/Q_e`W#JVFPjLKPifF]b/ZYb/cFM Z:Y3\S\_Yj	QSI#[f9bF]NuQ_Y3W9PbFGHY3cc2FIOM9KaJQ_Y3I9PiKI9MFH ufmF]b/QSc2FI(JK\!PF]JW#fOP
p.M#F  KabN8K\gT#Y  Y3c2FP r  KP/G]W#F\wv0xyy +("UT#FbFPWO\_JP©jnF]bF!GHY3c2fOW9JVFMW9PQgI#[K2JVF!I DZ:Y3\SMPJVb/KaJQ 
^9FMkGHbY3PP"N8K\SQgM9KaJQ_Y3If9bYuGHFM9W#bF2p W9QSIO\SKI7v`xyy|3n"T#Fo\_FKPVJLF]bb/Yb/PLZYb KabFW9IOM#F]b/\SQSI9FM
Z:Yb	FKGTM9Y3cKQSI7©#YbhJT#FP/K FYZdGHY3c2f`Kab/QSPVY3I9Pv`GHY3\SW9cI /hJT#F]b/
P fmY3QSI(JP©Y3W#J	N8Kab/QSY3W9P"bFP/W9\_JP
Z:Yb-YJT9F]bK\_[Yb/Q_JT9cP]vdQSI(JVFI9M#FM£JVYT#F\_f£[F]JVJQSI#[K[FI#F]b/K\LfOQSGHJW9bFYZUjUT9KaJ2G]KI¢emFJT#FkfmF]b 
Z:Yb/cKI9GHFP!YZBF G]QSFIJ-Kaf9f9bY3KGT#FPjUQSJTM9Q *mF]bFIJoY3W9JVfOW#JPp.M#FG]QgPQ_Y3I\SQSPJP]vJVbF]FP]v GHY3ccQSJVJVF]FP]v
F]JGavOQSIJVF]b/cPnYZF]b/bYb/Pop.KI9M7vujUT#FI%Kaf9fO\gQSG]KaeO\_Fv{PQ_]FPB{Y3cF	YZJT9FcY3PVJLbF\_F]NaKIJnbFPW9\SJPRZ:Yb

 KabFPWOccKab/Q_]FMQgIkJT#F!PG]KaJVJVF]bf`\_YJP"YZ 0Kae`\_F!~{
"T9FiQSI(JVF]bf9bF]JKaJQSY3I YZ KaeO\_F¢xW9P/QSI#[Y3I9\SXF]bbYb/P[3Q_NFP%JT#FiKM9N8KI(JKa[F5JVY jUQ_JT
fmFPPQScQSPVJQSGf9b/W9I9QgI#[#vUK\S\hJT#Fc2Yb/FKP p:f%T9KPkJT#FKM#NaKI(JKa[FYZ-f9bYNuQSM9QgI#[¤PQgc2fO\_F]b
Z:Yb/cWO\SKPhJT9K/
I -p 3v0KI9M5T9KPoKkcW9GT5PQSc2fO\SF]b	f9bW9I9QSI#[PJKa[FJT9K/
I p:Y(E"FP/W9\_JP
K\SPVY5GHY3c2fOKab/FZ.KNYb/Kae`\_XJVY5JT#F /JT#F]
b lb/FPW9\_JP]v eOWOQS\SM9QSI9[%FQSJT#F]b-}  P]v}hUP]vYb-}  Pi"T#F]X
KabF!K\g\7JT#F!c2Yb/FQSI(JVF]bFPVJQSI9[Q_Z0jnF!GHY3c2f`KabF!JT#F!F]bbYb/P"QgIJT#F!\SQS[3TJ©YZ JT#F-PQ_]FP©Ye9JKQgI#FM7B9Yb
JT#F  RGT#6Y lM#Y3cKQSI7v  jUQ_JTifFP/PQScQSPJQSGf9bW9I9QSI#[eFKaJPoQgc2f9bYNFM  h~e{XJ)jBYlfmY3QSI(JP]v
:

$Q



}hY3cKQSI
 W9PVJVb/K\gQSKI
qLK\SKI9GHF
qnbFKPVJ  
qLW#fOK
BG/T#Y
 \gKPP/~
"	FKabJ 
"	FKabJ  
"	FKabJ  "
"	F]fOKaJQ_JQSP
"	Yb/PVF
b/QSP
 KaeYb
 R}¥
 R}hF]NFI
 R}hF]NFIO~
 W9I#[
 Y3(I mx
 Y3(I #~
 Y3I(
BQScK
 Y3\_F
uT{W#JVJ\_F
"QgG]0KG]0Y(F
FT9QgG]\_F~
YJVF
YJVF3x
KNF]ZYb/c
¡QSI#F
}o|

F]bb
x2)4 3¥
~)~ 4 
¥ 4 +|
)| 4 3¥
)~ 4Sx +
~u3x 4¥a|
~+ 4 ¥
~)~ 4&ya
~)~ 4&|3¥
~a2 4 y
2x )4&~|
)4 



-p:Y(

2x )4 
ux34 3y
x )4Sx¥
a2 4 
+)
~ 4 a
2x )4 
~+ 4 + 
)4  +
~)y 4&|ux
)| 4&|3¥
)4&~3¥
~)~ 4 +(¥
~)| 4 +(¥
)| 4&ux
x]2 4&ya
a2 4 +y
x]2 4 
x)| 43¥ 



x34Sx
S4 x
x34Sx
)4&~
3x 4&
x34 
)4Sx
~)4&y
)4&y

+

)4 +

x34¥
x34&y
~)4&y
|)4&y
~)4¥
+ 4Sx
x34 
+ 4Sx
)y 4 
)4&|
)~ 4&~
x34 
3x 4 
)4¥
)~ 4&
3x 4&y
)~ 4 
+ 4&
)4 
)4&~

££½£iwc©

8

3x 4&
x]24 
+ 4
x~)4 +

)4&y

4¥
)4&y
y)4Sx
x]24&y
) 4¥
)4&|
+ 4&|
)4 
)4 +
)| 4Sx
x)| 4 +
)4&
y)4 
) 4 +
+ 4&
)4&y
+ 4Sx
)~ 4 
x + 4+
¥ 4&
)4 
+

)4 
)4&~
|)4&~

x + 4+


-p:f

]F b/b
x|)4 
x + 4¥a|
+ 4 3
3¥ 4Sx +
~3¥ 4&|
~u3x 4Sx¥
x)y 4 +
~u3x 4& 
~a2 4 +5
x)y 4&~ +
2x )4 3¥
)4 



x2)4 
~+ 4&~
x~)4 + 
~ )4S2x 
+)
~ 4 a
2x )4 
~u3x 4 +
)y 4&y
~)| 4Sx¥
 )4 ~
)4&~3¥
~a2 4Sx]
~)| 4¥8
) 4 +3
)y 4&y
~ )4 +(¥
)y 4 +(¥
x¥ 4 a



+

3x 4&|
y)4&y
)4 
4

4 ¥
x34¥
)4 
|)4 
)4 +
¥ 4
)&4 
~)&4 y
)4 ¥
x|)&4 ~
)&4 
¥ S4 x
~)&4 |
)&4 ~
x)&4 ~
+ 4 ¥
)4 
+ &4 ~
x34 
|)4 ¥
+ 4
+ 4
¥ 4
¥ 4
)4 ¥
|)&4 ~
+

	
ª£

8

+ 4Sx
~3¥ 4 
u~ x34 
x)| 4&|
x3x 4Sx
)4 +

ux34 +

~3¥ 4 +
~+ 4&~
x¥ 4 
x]24 +
¥ S4 x
)| 4&|
~u3x 4 
)y 4&~
~)| 4Sx
¥ S4 x
x )4 
|u3x 4 
) 4&y
~)y 4 +
x)~ 4¥
)~ 4 
x¥ 4&|
x3x 4&~
)4 
x + 4&y
x¥ 4 
) 4Sx
x¥ S4 x

-p 3

]F bb
x)4Sx +
x + 4&~y
)| 4&ya
3¥ 4Sx +
u3x 4 +~
~)| 4 +(¥
~u3x 4& 
~)4 +
~a2 4 
2x )4&~y
~a2 4&~|
~a2 4&|3¥
x)| 4&|3¥
~+ 43¥ 
~+ 4&| 
~u3x 4¥8
+)
~ 4 a
2x )4 
u3x 4&a
x)~ 4 a
)~ 4&yy
3¥ 4&| +
+ 4 ux
~ )4 a
 )4Sx
x]2 4 
x)~ 4 a
~a2 4&~ +
¥ 4&y
~)~ 4&|y

8

	

+ 4&
x)4¥
¥ 4¥
¥ 4 ¥
~+ 4&|
+

x¥ 4 
&4 y
~)y 4 
~) 4 +
) 4&
x~)4 
+32
 4&
+)
| 4&~

4

++

x~)4 
x)4 

x + 4
x x34 +
x)~ 4 
)4¥
)4&
x)y 4 
)y 4&y

~+ 4 +
)~ 4¥
y)4 +
~+ 4&
y)4 
~)~ 4&~
~+ 4 
)~ 4 
2x )4&y
x|)4 +
y)4 
x )4&|
+32
 4Sx
+ 4&~
x)y 4&

)4 

+

~|)4¥
u3x 4¥
¥ &4 y
)| 4¥

~)4 +
~u3x 4&y
 )4&
¥ &4 ~
x¥ 4&y
)~ 4Sx
x~)4 
|) 4&y
|)4&
+ 4
+ )4¥
+)
| 4
x) 4&y
~)y 4¥
| )4 
) 4&y
)
~ 4

hJT#F]b
2x )4Sx 4
 0 )
~a2 4Sx @ 0 )
+ 4&y .!( @ )
3¥ 4  42*  0 )
)~ 4  4  
~|)4  @ 0 )
~ux34 G
~~)4  . 0 
~u3x 4& 0 4 
x)y 4&~ 4A 0 
2x )4¥ ( 4  )
)4 G
x)| 4 ux  @ 
~ )43¥  ( . . 
x )4  (
 . )
~ )4Sx .  )
+)
| 4&
| "
x)| 4&||  0 
~)y 4 y ( @ 0 
)~ 4&|3¥ . 0 
~ )4&G
y 

)4  @!(  )
x34¥ .
 @ )
x)4  ( 40 
 )
~)4&| 24 0 )
+ 4  
  
x]24&y   

 )4  .!( @ @
~~)4&"



~ux34&~ @ 0 )

0Kae`\_Fx  ufmF]b/QSc2FI(JK\mbFPWO\_JP©W9PQSI9[1!
3Y I(NFIJQSY3I9P  8 QSP"JT#FjUT#Y3\_FI(W9cemF]bUYZd\SQSJVF]b/K\SP"YZdK%}  v	QSPUQSJP	I{W9ceF]bUYZdb/W9\_FPL9Yb
/hJT#F]bPuv#I(W9cemF]b/PRKab/F	[3Q_NFI%Y3IJT#FhZYb/c F]bbYb PQ_]F v(j	T#F]bFikQSPBQSc2f9b/YNFM  h~%p  ~  n L
,
1
eOW9Qg\SM9QSI#[l}  P]vdPQ_]FQSPJT#FI(WOc!emF]b-YZU\SQ_JVF]b/K\gP%p.}hY3cQSI9[Y3P]vUxyy3 @ QSP  }  eOWOQS\SM9QSI9[l}  P]v
r  Kaf9f(Xv©xyy3 QgP  +# ¤p.#b/KI9
G  r ¡Q_JVJVFI7v"xyy3 tQSP+} 
I#YJKaJQ_Y3IOP!Z:Y3\S\_Yj p UYuG  
eOW9Qg\SM9QSI#[o}  P]vuI#YJKaJQ_Y3IOPRZ:Y3\S\_Y`
j 5p 	Y{
G  r  KPG]W#F\wv7xyy 3 "2QSPU
x  	FKabFPVJ 	FQ_[3T(eYbBb/W9\_FhKI9M
)!QgP  +# lp:f9b/WOI#FM7v#M#F]Z.KW9\_JLfOKab/Kc2F]JVF]bPneOW9Qg\SM9QSI#[}hUP]z9JT#FPQS]FoYZ KJVb/F]F!QSP©Q_JP©j	T#Y3\_FoI(WOc!emF]b
YZI#YuM#FP]


eOW#J	JT#F}  Ye9JKQSI9FMiGHY3I(JKQSI9P	bY3W#[3T9\SX%FQS[3TJhJQSc2FP	ZF]jnF]bo\SQ_JVF]b/K\gP"JT9KI  ~  n 
  P	M#FG]QgPQ_Y3I
\SQSPJ] Z-jBFFH #GHF]f9J  YJVFuv-Y3I K\S\YJT9F]bf9bYe`\_FcPkY3ItjUTOQSG/T¡jnFM9QSPfY3PFiYZ  ~  n  P

$

: :

50

50

45

45

45

40

40

40

35

35

35

30
25
20
15

30
25
20
15

30
25
20
15

10

10

10

5

5

5

0

0
0

5

10

15

20 25 30 35
WIDC(p) err. (%)

40

45

50

0
0

5

10

15

20 25 30 35
WIDC(p) err. (%)

40

45

50

0

100

100

80

80

80

60
40
20

WIDC(Ø) #litterals

100

WIDC(Ø) #litterals

WIDC(o) #litterals

WIDC(Ø) err. (%)

50

WIDC(Ø) err. (%)

WIDC(o) err. (%)



60
40
20

0
20

40
60
WIDC(p) #litterals

80

100

10

15

20 25 30 35
WIDC(o) err. (%)

40

40
60
WIDC(o) #litterals

80

45

50

60
40
20

0
0

5

0
0

20

40
60
WIDC(p) #litterals

80

100

0

20

100

 KaeO\_F!~&huG]KaJVJVF]b/fO\_YJPPW9ccKab/Q_QSI9[	PVY3c2FLbFP/W9\_JP0YZ` KaeO\_FxBZ:Yb JT#FLJT#bF]F.'OKNYb/P YZ 
!vQSI
JVF]b/cPLYZF]bbYbp:^9bPVJLbYjhBKI9MkPQS]F2#p 8nv#PVFGHY3I9MkbYjhv#Y3IkJT#FJT9Q_bJ)XM9KaJKPVF]JPRKGT
fmY3QSI(JoKaeYNF2JT#F  % \SQSI#FM#F]fOQSGHJPoKkM9KaJKPF]JZYboj	T9QSG/TJT#FK\S[Yb/Q_JT9cQSI5KaeOPG]QgPPK
fmF]bZ:Yb/cPLemF]JVJVF]b
bFPWO\_JP]v3jnF"Y3W#JVfmF]bZ:Yb/c  ~  n ¤Y3I2emYJTKG]G]W#bKGHXKI9MPQ_]F QSI9K\g\_Xv3Y3I  YJVFuv9I#YJVFUJT9KaJ

 jUQ_JT5YfOJQScQSPVJQgGf9b/W9I9QgI#[%QgPoP\SQ_[3T(J\_XY3W9JVfF]b/ZYb/cFMe(X  ~  n  e{X~)4 ux kv e`W#JoJT#F
}  Ye9JKQSI9FMlQSP a2N /  JQScFP"PcK\S\SF]b©JT9KIkJT#F!M#FG]QgPQ_Y3Ik\SQSPVJLYZ  ~  n U9)Z jnFM#jBF\g\mY3IJT#F
bFPWO\_JPUYZ  +# {vPQScQS\SKabUGHY3I9G]\gW9PQ_Y3I9PhG]KIemFe9b/Y3W#[3TJ UY3Ix~Y3W9J	YZhxMOKaJKPVF]JPY3IjUT9QSGTjnF
b/KI  +# {v p:f	^OI9M9PPcK\S\_F]bZYbcW9\gKP]vKI9MPVJQS\g\emFKaJP  +# & PKG]G]W#b/KGHXY3Iy%YZnJT#Fc
 §{W9KI(JQ_JKaJQ_NFGHY3c2f`Kab/QSPVY3IYZ 8 Ka[3KQgI9PVJoJT#F2I{W9c!emF]bYZBI9Y{M#FPhYZBJT#F}"PoPT#YjUPhJT9KaJoY3I
+M9KaJKPVF]JPY3W#JhYZRJT9F%x 5p  Y3\_Fv0uT{W#JVJ\_Fvm"QSG] KG]Y{Fv  W9PVJVb/K\SQgKI`vOJT#F2}  PKabFc2YbFJT9KI|
JQSc2FP	PcK\S\SF]bv9jUT9Qg\_FoJT#F]XY3I9\_XQSIOG]W#bUK\SY3PPUQSIKG]G]W#b/KGHXlZ:Yb~YZJT#FcvKI9M\SQgcQ_JVFMkJVY5xa& %
#Yb JT9QSP0\SKaJVJVF]b f9bYeO\_Fc p."QSG] KG]Y{Fv3K	[3\SQSc2fOPFdKaJ  KaeO\_FhxRPT#YjUP0JT9KaJ0JT9FB}  P]vajUQ_JT\_FPPJT9KI
¥b/W9\_FP	Y3I5KNF]b/Ka[Fv F]F]fOPoGHY3c2fOKabKaJQ_NF\_XicY3PVJ	YZBJT#F2QSI#Z:Yb/cKaJQ_Y3IiGHY3IJKQgI#FMQSI}hUPhTOKNuQSI#[
c2YbFUJT9KIKT{W9I9M#b/FM-\SFKNFP]BIcKIXf9b/YeO\_FcP jUT#F]b/F"cQSI9QSI9[QgPPW#FPKabF	GHb/W9G]QSK\wv3P/W9G/TK!PQ_]F
bFM9WOGHJQ_Y3I%jBY3W9\gMemFjBF\g\`jnYbJT%JT#Fp.GHY3c2fOKabKaJQ_NF\_XkP\SQ_[3T(Jd\SY3PPLQSIkKG]G]W#b/KGHXv9emFG]KW9PVFjnF F]F]f
K!P/Q_[3I9Q_^OG]KI(JfOKabJRYZ7JT#FUQSI#Z:Yb/cKaJQSY3I2Y3INF]bXP/cK\S\#G]\SKPP/Q_^9F]b/P]vJT(W9PB\S#Q F\_X-JVY!emFUQgIJVF]bfObF]JKaeO\_F

  n"<74" #E" 72@y;'87 .d.53#"F.

+I5JT#F h}o|M#Y3cKQSI7v7FKG/TFH uKc2f`\_F2T9KPx]keOQSIOKabXlNaKab/QSKaeO\_FP!"T#FJVFI(JTQSPoQ_bb/F\_F]N8KI(JoQSIJT#F
PVJVbY3I9[FPVJPVFI9PVF¨p  Y3TOI7v s Y3T9KN{QDv r 8'9F][F]bvxyy+( "T#FJKab[F]JlGHY3I9GHF]f9J
QSP%K  } h p.K
:



$4z



££½£iwc©

7

 0 6  ( 6 
 4 6   6-
  6  * 6-
 ( 6  
 0 6  .


	
ª£



/x
.

/x


x

/x
@



M#F]Z.KW9\_J ) 

x

/x

x

x
u&y|

(

x

/x
/x



u  3 ¥

 Q_[3W#bFx  }  Ye9JKQSI#FMY3IJT9F }|!M#Y3cKQSIjUQ_JT-p:fdUT#F"^9b/PJdJT#bF]F	b/W9\_FPFH #KGHJ\_X
FI9GHY{M9FJT#FoJKab[F]JhGHY3I9GHF]f9J]v`KIOMkJT#F!Q_bb/F\_F]N8KI(JLN8KabQSKaeO\_FQSP©Kae`PVFIJUZbY3c JT#F}  






4

0


*

	

@



@






*




@

(






*




	
0

	



(



.

	

	


(






4








(



.

	



@




	






	

	

 Q_[3W#bF!~&  aK b/JUYZK}YeOJKQSI#FMY3IJT#F }|M#Y3cKQSIljUQ_JT  +# {  Y3PQ_JQSNF!\SQ_JVF]b/K\gP©\SKaemF\7JT#F
QSIJVF]bI9K\uI#Y{M9FP] 0YoG]\SKPPQSZX!KIYe`PVF]bNaKaJQ_Y3I7vJT#F©\_F]Z:J FM#[FLYZKI#YuM#FLQSP ZY3\S\SYjnFMjUT#FI
KI2YeOPVF]bNaKaJQ_Y3IGHY3I(JKQSI9P	p ` %  JT9F©fY3P/Q_JQ_NF"\SQ_JVF]bK\wv3KI9MJT#F©b/QS[3TJFM#[F	QSP ZY3\g\_YjnFM
YJT#F]bjUQSPFp J 1.2 1dJT#F	\gQ_JVF]b/K\OQgPRI#F][3KaJQ_NFQSI2JT9FUYeOPVF]b/N8KaJQ_Y3Id"T#F"emY3\SMP/§(W9Kab/F	QSPBW9PVFM
JVY%M9QgPVfO\SKXJT#Ff9bFPVFIOGHF!YZJT#F-Q_bbF\_F]NaKI(J"N8KabQSKaeO\_FQSIJT#F!JVb/F]F  I9KQ_NF-GHY3INF]b/P/Q_Y3I
YZ JTOQSPLJVbF]F!QSIkbW9\_FPLZ:Yb"emYJTlG]\SKPPVFP"[FI#F]b/KaJVF
P a2b/W9\_FPv{Z:YbUK2JVYJK\YZ©x¥ay2\SQ_JVF]b/K\gP]

$

: 2;



} 	
 jUQ_JTFKG/Tc2Y3I#Y3cQSK\RGHY3I(JKQSI9QSI9[iKaJc2Y3PVJ-JT#bF]Fk\SQ_JVF]b/K\SPhYNF]b2JT#F^9b/PVJ-I9QSI#FN8Kab/QgKaeO\_FP
p  0 6  ( 6  . p 4 6   6    p  6  * 6  @ ©uW9G/TK2ZYbcW9\gK-QgP©JX{fOQSG]K\S\SX%T9KabMkJVYFI9GHYuM#F
W9PQgI#[K5PcK\S\BM#FG]QSPQSY3IJVbF]F5+IY3W9bFH ufmF]b/QSc2FI(JP!j	Q_JT 
-p:Y(-KI9
M p:fvjBFT9KNF
bFcKa
b FM5JT9KaJoJT#FJKab[F]JoZ:Yb/cWO\SKQSJPVF\_ZRQSPK\ScY3PVJoK\_jnKX{P!KI5F\_Fc2FI(JhYZBJT#F2G]\SKPPQS^9F]beOW9QS\_J]v
KI9MkJT#FQ_bbF\_F]NaKI(JLKaJVJVbQ_eOW#JVFQSP©K\SjnKX{P"Kae`PVFIJ]B QS[3W#bFxoPT#YjUP"KIFH #Kc2fO\SFoYZ }  jUTOQSG/TkjLKP
Ye9JKQSI9FMkY3IlKb/W9I%YZ ! 	YJVFJT9KaJ©JT9FGHY3I9GHF]f9J©bF]JW#bI#FMQSP©K  }  9 Q_[3W#bF!~M9F]fOQSGHJP©K
fOKabJ©YZ K2JVbF]FoYe9JKQgI#FMkY3IJT9QSPLM#Y3cKQSIkjUQ_JT  +# { ¡T9QS\SFhJT9FoJVbF]FKaf9fmFKab/PLJVYemFo§(WOQ_JVFo\SKab[F
Z:YbnJT9FhM#Y3cKQSI7v(I9YJVFhJT9F	f9b/FPVFI9GHFhYZJT#FQ_bbF\_F]NaKI(JRNaKab/QSKaeO\_F	QSIJT9F	JVbF]FvujUTOQSG/T%Q_JBGHY3I(JVb/Q_e`W#JVFP
JVY-FI9\SKab[F	jUT9QS\_F"cK {QSI9[!Q_JRT9KabM#F]bRJVYcQSI#FdI%cKI(X2YJT#F]bnM9Y3cKQSI9P]vjBFhYeOPVF]bNFMfmF]b/PQSPJVFIJ
b/W9\SFP©YbhP/W#e7GHY3I9GHF]f9JP"JT9bY3W#[3TlJT9Fx]GHb/Y3PP DNaK\SQSM9KaJQ_Y3Ilb/W9I9P]"uQScQS\SKab/\_XJVY }o|{v`jUT9FI#F]NF]bUjnF
GHY3W9\SMkcQgI#FUJT#FbFP/W9\_JPBjUQ_JTkKP(W G]Q_FI(J\_XKG]G]W#bKaJV,
F {I#YjU\_FM#[FYZ0JT#FoM#Y3cKQSI7v{JT#FPVFfOKaJVJVF]bI9P
jnF]bF-cY3PVJ	QSI(JVF]bFPVJQgI#[#U#YbFH #Kc2fO\_Fv`JT#F-}  P	Ye9JKQSI9FMlY3IiJT#F  R}hF]NFI5M#Y3cKQSIiGHY3IJKQgI#FM
c2Y3PVJLYZJT9FhJQgc2FhKGHY3ceOQSI9KaJQSY3IYZ0JjnY2b/W9\_FPBjUQ_JTY3I#F\SQ_JVF]b/K\`FKG/T7v#j	T9QSG/TbF]f9b/FPVFIJVFMK-NF]bX
KG]G]W#b/KaJVF!jnKX%JVYG]\gKPPQ_Z:Xy-Y3W#J©YZ JT#F2x]2fmY3PPQ_e`\_F	G]\SKP/PVFP]BIkJT#F YJVFKI9M YJVF3x!M#Y3cKQSI9P]v
jnFK\SPVYYeOPVF]b/NFMGHY3I9PVJKI(JfOKaJVJVF]b/IOP]v0PVY3cF2YZBjUTOQSG/TKabF2jnF\S\ uI#Yj	I¨p.qn\gK FF]J!K\w_vRxyy3oJVY
f9bYN{QgM#FhKNF]b/X%KG]G]W#bKaJVFG]\SKPPQ_^`G]KaJQ_Y3IkZYb"K-JQSI(XP/Q_]F dNFIZ:Yb YJVF3xojUT9F]bFoG]\SKPPQSG]K\mPVJWOM9Q_FP
YZ:JVFI¨bF]fmYbJF]b/bYb/P2YNF]bx~ %v©KI9M1K\Sc2Y3PVJI#F]NF]bKabY3WOI9M x] p "	Y3\_JVFvxyy 3v©jnFYeOPF]bNFM
Y3IcY3PVJ!YZ©JT#Fb/W9I9P!K}  GHY3I(JKQSI9QgI#[KIKG]G]W9b/KaJVFbW9\_FjUQSJTJjnY\gQ_JVF]b/K\SPoY3IO\_Xv0j	Q_JTjUT9QgG/T

-p:fnf9b/YNuQSM#FMkY3IlKNF]b/Ka[F-KIlF]bbYbUW9IOM#F]bx] %

 jnKPK\SPVY%GHY3c2fOKabFMJVY  +# Y3IKbFK\0jBYb\SMM#Y3cKQSIY3IijUT9QgG/TcQSI9QSI#[QgPPW#FPhKabF
KP%GHb/W9G]QSK\"KPG]\SKPPQS^OG]KaJQ_Y3I¨PVJVb/FI#[J9T 5Ka[b/QSG]W9\_JW9bF  I¨FH ufmF]b/QSc2FI(JQSP2emFQSI#[G]Kab/b/Q_FM¨Y3W9JQSI
 KabJQSI9QS§{W#F-e(XJT#F2}}   p.}hF]fOKabJc2FI(JK\R}Q_bFGHJQSY3I5YZ  [b/QSG]W9\SJW#bFKI9M#YbFPVJv0JVYKG/TOQ_F]NF
emF]JVJVF]b-WOI9M#F]b/PVJKIOM9QSI#[kYZ©JT#FeFTOKNuQ_Yb!YZ©Z.Kab/c2F]b/Pv QSIfOKabJQSG]WO\SKabbF][3Kab/MOQSI#[lJT#FQSb!jUQS\g\SQSI#[3I#FP/P
JVY2GHY3IJVbKGHJ"K   ¡p.OKab/cQSI#[0F]bb/Q_JVYb/QgK\  Y3I(JVb/KGHJ hPW9K\`Z.Kab/cQSI#[-GHY3IJVbKGHJP©jUQ_JTFQ_JT#F]bLJT#F
PVJKaJVFp.#b/KIOGHFBYb BW#bYfmFUM9QgMI#YJLGHY3IJKQgIGHY3ccQ_Jc2FI(JPnZYbnJT#FhZ:Kabc2F]bLJVY-PKaJQgPVZX+I%K   "v
FKG/T¢Z.Kab/c2F]b2GHY3ccQ_JP-JVY5KMOKaf9J-KIOM YbG/T9KI9[FkTOQSPKa[bQSG]W9\_JW#bK\dJVFG/TOI9QS§{W#FP-Yb-fObY{MOW9GHJQ_Y3I9P]v
JVYFIOPW#bFP/W9PVJKQSI9Kae`\_FM#F]NF\_YfOcFIJZYb-\_Y{G]K\BKa[b/QSG]W9\SJW#bF%IFH uGT9KI#[F%ZYb-JT9QSP]v T#FbFGHFQSNFP
JT#F[3W9Kab/KI(JVF]F2JVYYe9JKQSI^OIOKI9G]QSK\ T#F\_f5ZYbJT9QgPhGHY3I(JVb/KGHJ]v KI9MJVYeF-JVb/KQSI9FMiJVYI#F]j Ka[bQSG]W9\ 
JW#b/K\ JVFGT9I9QS§{W#FP]uWOG/TKM#Y3cKQgIQSPK[Y(YuM5JVFPVJemFM5JVYF]NaK\SW9KaJVFKcF]JT#Y{M5Y3IJT#F2eOKPQSPYZ
f9bFMOQSGHJKaeOQS\SQSJXKI9M¤QSI(JVF]bf9bF]JKaeOQg\SQ_JXv7emFG]KW9PFYZLJT#FfO\SKGHFYZLWOI9GHF]bJKQSI(JXQSIKa[b/QgG]W9\_JW#bFv KI9M
JT#FkZ.KGHJ2JT9KaJYe9JKQSI9QSI9[iM9KaJKG]KI¢emFkKTOKab/M¢KI9M¢\_Y3I#[JKP  JT#F}}   TOKPJVYemFkKP2K
G 
G]W#b/KaJVFKPfmY3PP/Q_eO\_F-QSIiQSJPf9bFM9QSGHJQSY3I9P	KIOMQgIJVF]bfObF]JKaJQ_Y3I9P]v7JVYlcKI9Ka[FKPemFPVJoKPfY3P/PQ_eO\_F-Q_JP
bF\SKaJQSY3I9PT9Q_f`PjUQ_JTZ:Kabc2F]b/P]v#KI9M%QSIJT#FoG]KPVFYZ   BP]v(JVY2cK FJT#FemFPVJnf9bY3c2YJQSY3IG]Kc2f`KQ_[3I
Z:YbUJT#FPVFI#F]j GHY3I(JVb/KGHJP]  [b/QSG]W9\SJW#bFoQSP"K\SPYNF]bXlPVFI9P/Q_JQ_NFoJVYK VPT#YjLG]KPVF-F *FGHJ  Lf9b/YNuQSM#FM
F]NFIlZ:F]j bF]fObFPVFI(JKaJQ_NFZ.Kab/c2F]b/PLjUQg\S\mT9KNF!P/W#eOPGHb/QSeFMJVYJT#FGHY3I(JVb/KGHJP]vGHY3c2fOKab/KaJQSNF\_XcKIX
YJT#F]b/PUKabF!\S#Q F\SXJVYZ:Y3\S\_Yj
+I5JT9QSPoPVJWOM#XvZ:bY3cJT#FM#FPGHbQ_f9JQ_Y3IYZ ~kN8KabQSKaeO\_FPZ:YbKaemY3W#J!|abF]f9b/FPVFIJKaJQSNFZ:Kabc2F]b/P
PKaJQSPZXuQSI#[JT#FGHb/Q_JVF]b/QgK5JVY¤KM9T#F]b/FJVY¤K   "vRJT#FiKQSc QSPJVY£M#F]NF\_Yf1cY{M#F\gP2ZYb%JT#Y3PVFjUT#Y
KabFKGHJW9K\g\_XjUQg\S\SQSI#[JVYlKM9T#F]bFv7JT#Y3PFI#YJojUQS\S\gQSI#[JVYlKM9T9F]bFvKI9MJT#Y3PVFG]W9bbFI(J\_XiW9IOGHF]bJKQSI7
dKab/QSKae`\_FP2KabFM9KaJKY3IFKG/T1Ka[b/QSG]W9\_JW9b/K\nFH {fO\SY3Q_JKaJQ_Y3Ip.PQS]FvBJVF]bbKQSII9KaJW#bFvn^OI9KIOG]QSK\LM9KaJKuv
JX{fmFYZ f9bYuM9W9GHJQ_Y3Iv{F]JGvOKP"jnF\S\KP	c2YbFfmF]b/PY3I9K\7M9KaJKY3IlJT#FZ.Kab/c2F]b/P!p:FMOW9G]KaJQ_Y3I7v`Z:KcQg\_X
PVJKaJW9PvYe VFGHJQ_NFP]v(fF]bPVY3I9K\#KI9PVjnF]bdJVY!Ko§{W#FPVJQSY3I9I9KQ_bFvF]JGaB"T9QSP bF]f9b/FPVFIJPRKPcK\S\#MOKaJKPVF]J
JVYcQSI#Fv{eOW#J]vuQSI(JVF]bFPVJQSI#[3\SXvJT#FhbFPW9\SJPRYe9JKQgI#FMjnF]bFM9Q *mF]bFI(JRjUT#FIf9bYuGHFPPQgI#[!Q_JnjUQ_JT  +# 
YH
b 
-p:f
:

$5O



££½£iwc©

	
ª£

p'& &:- &E-  J&
$ ! V6p'& $8!	 &:-0
p'& &:- &E-  J&
$ ! V6p'= $5- 
( J&3!]6p'& 
0 
 &38'$58 $  
M#F]Z.KW9\_J ) 

KMOT#F]bF
/x
x
u ~



/x

/x
u&|

KM9T9F]bF
x
x


 Q_[3W#bF/&	"T#F!}  Ye9JKQSI#FMY3IiJT#F-Ka[b/QSG]W9\_JW9b/K\7M9KaJKip.PF]FJVFH uJUZ:YbUJT#F-QSI(JVF]bf9bF]JKaJQ_Y3IYZJT#F
N8Kab/QgKaeO\_FP
FbKI5eYJTK\S[Yb/Q_JT9cPQSI5Kx] DZ:Y3\SMPVJVbKaJQ_^9FMGHbY3PP DN8K\SQgM9KaJQ_Y3IFH {fmF]b/Qgc2FIJ]1
-p:f
Ye9JKQSI9FMK~)4& KNF]b/Ka[F©F]b/bYb I|"Y3W9J0YZx]hb/WOI9P]v8JT#FnP/Kc2Fn}  jLKP QgI9M9W9GHFM7)J QSP0f9bFPVFI(JVFM
QSI- Q_[3W#bF {qnKP/QSG]K\S\_XvaJT9QSP }  f9bYNFP JT9KaJ f9bFM9QSGHJQgI#[UJT#F  KM9T9F]bF2G]\SKPP QSP JT#FnFKPQ_FPVJ JKP v
Z:Y3\S\_YjnFMle{XJT#FfObFM9QSGHJQ_Y3IlYZJT#
F VKM9T9F]b2F G]\SKP/P]©"T#F 
> p.W9I9GHF]bJKQgIlZ.Kab/c2F]b/P©QSP"f9b/FM9QSGHJVFM
Y3I9\_Xe(XJT9FM9F]Z:KW9\SJBNFGHJVYbn"T9QSPnPVF]FcPnb/KaJT9F]b"I9KaJW#b/K\  jUT9F]bFKPnJT#FFH {JVbFcFoeFTOKNuQ_Yb/PBJVFI9M
JVYemFG]\_FKab"JVYM#F]JVF]b/cQSI9Fv#JT#F!W9I9GHF]b/JKQSIJ)X%QgP©JT#FT9Kab/M9FPVJ©JVYf9bFMOQSGHJ]
 +# £p.M#F]Z.KW9\_JfOKab/Kc2F]JVF]b/PoQSI9MOW9GHFMKi}h jUT9QgG/TjLKPK\Sc2Y3PVJJT#FFH #KGHJJVb/KI9PGHbQ_f9JQ_Y3IYZ
b/W9\SF-xav9K-b/W9\SF	jUTOQSG/T%PKXuP©JT9KaJLZ.Kab/c2F]b/PLj	Q_JTkI#YFMOW9G]KaJQ_Y3Ip:jUQ_JT9Y3W#JnKI(XkKa[b/QSG]W9\_JW9b/K\`MOQ_fO\_Y3cK
YbkJVb/KQSI#F]FP/T9Q_fOPKI9M¡I#Y£Y3I#[Y3QSI#[£f9bY VFGHJKabFI#YJj	QS\S\SQSI9[JVY¢KMOT#F]bF "T9QSPb/W9\SFiQSP%c2Y3PVJ\_X
QSI(JVF]bFPVJQSI9[%emFG]KW9PFQ_Jf9bYNFPJT9KaJoFM9W9G]KaJQ_Y3IQgPoKPVJVbY3I#[Z.KGHJVYb!M#F]JVF]b/cQSI9QSI#[%JT#F  KMOT#F]b2F 
KI9PVjnF]b©"T#F}hUPUQSI9MOW9GHFMlK\SPVYGHY3IJKQSI9FMY3I#FYbUJ)jBYkc2YbF!\gQ_JVF]b/K\SP"PF]fOKab/KaJQSI#[JT#F VKM9T9F]b2F 
KI9M 
21G]\SKPPVFPp.KNF]bKa[FF]bbY2b ")| 4¥ vmeOW9JUY3I9\_XkZ:F]j YJT9F]bhJTOQSI#[3PUGHY3WO\SMlemFcQSI#FMlZ:bY3c JT#F
JVbF]FPUYZ  +# {vQSIkJT#F\SQS[3TJ©YZ JT#Fof9b/YeO\_Fc KM9M#b/FPPVFM7
E	W9\_F~¤QgI1 Q_[3W#b/F £M9QSMI#YJT9KNFJT#F5F§(W9QSN8K\_FI(JkQSI JT9F5}"PkQSIOM9W9GHFM7 ¡T9KaJQ_J%P/KXuP
QSP-QSI(JVF]bFPVJQSI#[iZYb-JT#Fk}}  nvemFG]KW9PVF%Q_J!eOb/QSI#[3P!JT#FZ:Y3\S\_YjUQSI#[iGHY3I9G]\SW9PQSY39I Z:Kab/cF]b/P!j	Q_JT#Y3W#J
Y3I#[Y3QSI9[2f9bY VFGHJP]vOKI9MI#YJ"PF\S\SQSI#[-JT#FQ_b©fObY{MOW9GHJPnY3I9\_XJVYKjUT#Y3\_FPK\SF]bv#KabFY3IkJT#,
F uI9Q_Z:FFM#[F
Z:Yb2JT#FQ_b2c2FceF]bPT9Q_f¡p:FQ_JT#F]bQSI VKM9T#F]b/2F uvRYbQSI  KM9T#F]b/2F  ¡Q_JT#Y3W#J-[Y3QSI#[5Z.W#bJT#F]b2QSI(JVY
\_YuG]K\`Ka[bQSG]W9\_JW#bK\OGHY3I9PQgM#F]b/KaJQ_Y3I9PvJT9QSPBb/W9\SFvZ:YbnJT9Fh}}   RI#[3QSI9F]F]b/P]vb/F]f9bFPVFI(JPLKIKG]G]W#bKaJVF
NuQ_F]j YZ JT#FZ.Kab/c2F]b/P"KGHJWOK\S\_XkGHY3IJVbY3\g\SQSI#[JT#FQ_b©FH ufO\_Y3QSJKaJQ_Y3IlGHY3PVJP]vOeFQgI#[FQ_JT#F]b"Z:Yb"Yb	Ka[3KQgI9PVJ
  BP]v#KI9MJT9KaJ©FMOW9G]KaJQ_Y3IfOWOPT#FPnJVYjLKab/M9PUJT#Fc2FceF]bPT9Q_fp.GHY3c!e`QSI9KaJQ_Y3IYZ b/W9\SFPhx!KI9Ml~3v
f9bYe`KaeO\_XemFG]KW9PFQ_J"K\S\_YjUP©JT#Fc JVYPVF]FJT#FZ.W#JW#b/FofYJVFI(JQSK\7emFI#F]^OJPLYZ JT9FGHY3IJVb/KGHJ]vemF]JVJVF]b
JT9KIlQSJP"G]W#bbFI(J"GHY3I9PVJVbKQSIJP

 

'.d"m "#?;'#"($

|c

p.qLKW#F]b r s Y3T9KNuQwvoxyyy{z!hfOQ_JV r  KG]\SQSI7v
x yyy3v3F]NFIGHY3I9PQgM#F]bFMkp.qnKW9F]b r1s Y3T9KN{QDvuxyyy30KP Q_JP0fmYJVFIJQSK\{cKQSI!f9bYeO\SFc d {fmF]b/QScFIJK\
PVJW9MOQ_FPUPT9Yj JT9KaJPW#eOPVJKI(JQSK\0I#Y3QSPVF-\_F]NF\SPhG]KIK\SJVF]b	JT#F-NYJVFJVYJT9FfmY3QSI(JUJT9KaJQ_JPhKG]G]W#b/KGHX
QSP\_YjnF]bJTOKI JT9KaJ%YZKP/QSI#[3\_FlYZQSJPG]\SKP/PQ_^9F]bipDfOQ_JV r  KG]\SQSI7voxyyy3 hfOQ_JV r  KG]\SQSI
p+xyyy3fmY3QSI(JhY3W#JJT#FbF]jBFQS[3TJQSI9[kP/G/T#Fc2F2YZBJT#F2FH #Kc2fO\_FPQSIemY(Y3PJQSI#[kKPeFQgI#[%K%fmYJVFI(JQSK\
bFKPVY3IZYbBJT9QSPemFT9KN{QSYb"T#Y3W#[3T2jnFUM#YI#YJBW9PF"KIX2bF]jnFQ_[3T(JQSI#[!P/G/T#Fc2Fv{jnFUT9KNFG/T9Y3PVFIZ:Yb
JT#F-PK F!YZdGHY3c2f`\_F]JVFI#FPP	JVYKM9M9bFPP"JT9F!emFT9KNuQ_Yb"Y<
Z -p:f"Ka[3KQSI9PVJhI#Y3QSPVFv`KI9MGHY3c2f`KabF
Q_JPb/FPW9\_JP%jUQ_JT¡fmF]b/TOKafOPkJT#FcK VYbQSI9MOW9GHJQ_Y3I¡K\_[Yb/Q_JTOc jUQ_JT¡jUT9QgG/T¡jnFPT9KabFJT9F +JVYf 
M#YjUIKI9M5f9b/WOI#2F kQSI9M9W9GHJQSY3IiPGT#Fc2F   +# p oW9QSI9\SKIv xyy +(UT9QSPPVJW9M#XbF\SQ_FPY3I5JT#F }o|
M#Y3cKQgI7vnQgIjUT9QSGTjnFbF]fO\gKGHFJT#FlYbQ_[3QSI9K\x] G]\SKPPI#Y3QSPVF£p.qnWOIJQSI9F r hQ_eO\_F]JVJ]voxyy~3e(X
NaKab/Q_Y3W9PQSIOGHbFKPQSI#[KcY3W9IJPdYZmG]\gKPPdI#Y3QSPF©b/KI#[3QSI#[oZ:bY3c  JVY +3 e{X2PVJVF]fOPYZ~ %v3YbBN8KabQ_Y3W9P
	Y3QSPVFiTOKI9M9\SQSI9[5QgPKGHb/WOG]QSK\UQSP/PW#FZ:YbemY{Y3PVJQSI#[

:

$$



0.5

0.35

WIDC
C4.5
Bayes

0.45
0.4

0.25

0.35
0.3

error (%)

error (%)

WIDC
C4.5
Bayes

0.3

0.25
0.2
0.15

0.2
0.15
0.1

0.1
0.05

0.05
0

0
0

0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4

0

0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4

class noise (%)
100

attribute noise (%)
110

WIDC
C4.5
Bayes (DC)
Bayes (DT)

90
80

90
80

70

70
size

60
size

WIDC
C4.5
Bayes (DC)
Bayes (DT)

100

50
40

60
50
40

30

30

20

20

10

10

0

0
0

0.05

0.1

0.15

0.2

0.25

0.3

0.35

0.4

0

class noise (%)

0.05

0.1

0.15

0.2

0.25

0.3

0.35

0.4

attribute noise (%)

 Q_[3W#bF,+( R\_YJPkYZJT#F5F]bbYb/Pp.W#fmKIOMP/Q_]FPp.M#Yj	I`YZ 
-p:fv  +# ¢KI9M¡qLKXFPb/W9\_F
Ka[3KQSI9PVJ"NaKab/Q_Y3WOP©G]\SKPP"I#Y3QgPVF\_F]NF\SP!p.\SF]ZJLKIOMKaJVJVb/Q_eOW#JVFI#Y3QSPVFo\_F]NF\SPp:b/Q_[3T(J
SQ I9GHb/FKPQSI#["Kc2Y3WOIJPYZ9KaJVJVb/Q_eOW#JVFBI#Y3QSPVFdQSIJT#FBPKcFdb/KI#[F "T#F }o|"M#Y3cKQSI!T9KPJT#FRKM#NaKI(JKa[F
JT9KaJ2JT#FkJKab[F]JGHY3IOGHF]f9JQSP	{I9YjUI7vBKI9MQ_JT9KPemF]FI£KMOM#bFPPVFM¢QSI¢KPW9eOPVJKI(JQSK\BKcY3W9IJ2YZ
f9bF]NuQ_Y3W9PhFH ufmF]b/QSc2FI(JK\ jBY
b {P] FT9KNFPQSc-W9\SKaJVFMGHYb/bFPVfmY3I9M9QSI9[%M9KaJKPF]JPoY.
Z ux~FH uKc2f`\_FP
FKG/Tv#ZYbnFKG/TI#Y3QgPVFh\SF]NF\w RKG/TP/W9G/T%M9KaJKPVF]JLjLKPBfObY{GHFP/PVFM%e(
X 
-p:fBKI9M  +# {v#W9PQSI9[K
x] DZ:Y3\S!M GHbY3PP DN8K\SQgM9KaJQ_Y3If9b/Y{GHFM9W9bFR Q_[3W#b,
F +M#F]fOQSGHJP©JT9FbFPW9\SJP©Ye9JKQSI#FMlZYb"JT9FF]bbYb/P	KI9M
Z:YbUJT#F!P/Q_]FP"YZ JT#F!G]\gKPPQ_^9F]bP]B"T9FPQ_]FYZK}  QSP"Q_JP©j	T#Y3\_F!I{W9ceF]bUYZ \gQ_JVF]b/K\SP]v9KIOMJT9KaJUYZ
K} QSPUQ_JP©I(WOc!emF]b©YZQSI(JVF]b/I9K\7I#YuM#FP]
¡T9QS\_F JT#FRbFPQSPVJKIOGHFdKa[3KQSI9PVJI#Y3QgPVFdPVF]FcPJVY"emF b/F\SKaJQ_NF\_XhjBF\g\M9QSPVJVb/QSeOW#JVFMhKc2Y3I#H
[ 
-p:f
KI9M  +# 'p 
-p:fUPVF]FcP	JVYfmF]bZ:Yb/c emF]JVJVF]bhZYbhG]\SKPPhI#Y3QSPVFv9j	T9QS\_F  +# PVF]FcP	JVYfmF]bZ:Yb/c
emF]JVJVF]b"Z:Yb"KaJVJVb/Q_eOW#JVFoI#Y3QgPVFv9KfOT#FI#Y3cFI#Y3Ic2YbFQSI(JVF]bFPVJQgI#[2GHY3c2FP©Z:bY3c JT#FPQ_]FPLYZ JT#FoZ:Yb 
c-W9\SKP©QSI9MOW9GHFM7  QSb/PVJ]vuJT#F}  P"T9KNFoNF]bXkPcK\S\mPQ_],
F '`W9GHJW9KaJQ_Y3I9PLGHY3c2f`KabFMJVY2JT#F}"P Z:Yb
G]\SKPP!I#Y3QSPVFPo[b/FKaJVF]bJT9KI¤~a %v0JT9F}"PT9KNFPQ_]FQgI9GHbFKPQSI9[%e{XKZ.KGHJVYb!YZoxa  )~{uFGHY3I9M7v
I#YJVFLJT9KaJ JT#Fnb/KaJQ_YheF]J)jBF]FIJT9FnI{W9ceF]b YZOI#YuM#FP0YZ9JT#FnJKab[F]Jd}ovaKI9M-JT#FnI{W9cemF]bYZ`\gQ_JVF]b/K\SP

$

: C



££½£iwc©

	
ª£

YZnJT#FJKab[F]J!}  QgP{#YbKcK +Yb/QSJXYZLG]\gKPPYb!KaJVJVb/Q_e`W#JVFI#Y3QSPVF\SF]NF\SP]vJT#F2bKaJQ_YemF]JjnF]FI
JT#Fo}"PLeOW9Qg\SMKI9M%JT#Fo}  PLeOW9Qg\_JBQSP 
 {v#jUQSJTKfOKaJT9Y3\_Y[3QSGhG]KPVFoZYbx] KaJVJVbQ_eOW#JVFI#Y3QSPVFvuZ:Yb
jUT9QgG/TJT#Fb/KaJQ_YQgP 
 |{©"T9FPVFbFcKab
{P]v`K\_Y3I#[j	Q_JTJT#FZ.KGHJhJT9KaJ"JT#F-}  P"eOW9Qg\_J©T9KNFKNF]bX
bFKPVY3IOKaeO\_F©PQ_]FLjUT#FIGHY3c2f`KabFM2JVYoJT9KaJ YZJT#FLJKab[F]JR}  ZYbdKI(X-JX{fF©KI9M2\SF]NF\uYZ`I#Y3QSPFvJVFI9M
JVYiP/T#Yj Kl[Y{Y{M¤I#Y3QSPVFT9KI9M9\SQgI#[kZY1
b p:f  f`KabJZ:bY3c JT#FPFGHY3I9PQgM#F]b/KaJQ_Y3I9Pv0[3\SQgc2fOPVFP
KaJoJT#F2}  PY3W#JVfOW9Jhe{
X -p:fhP/T#Yj JT9KaJF]NFIZ:Yb\SKab[F2I#Y3QgPVF2\_F]NF\SP]vQ_JocKIOKa[FPoJVYk^OI9M
GHY3I9GHF]f9JPhPVXuIJKGHJQgG]K\S\_XG]\_Y3PVFJVYJT#FJKab[F]J}  O#YbhFH #Kc2fO\_Fv9Y3I9FYZJT#F!}  PUY3W#JVfOW#JUKa
J a
G]\SKPPI#Y3QSPVFQSPFH #KGHJ\_XJT#FJKab[F]J-}  z K\SPVY#v Q_J!QSP!Y3I9\_X5Z:YbG]\SKPPI#Y3QSPV=
F  x~ p.KI9MKaJVJVb/QSeOW#JVF
I#Y3QSP
F  x| nJT9KaJ	PVY3c2F!}  P©Z:Y3W9I9MM9YI#YJUPVXuIJKGHJQgG]K\S\_XkQSI9G]\SW9M9F	JT#F!JKab[F]J	}  KI(X{cYbF
< ? >
æ

AâaCD? >

E FGHFI(JLKM#N8KIOGHFPRQSI2JT9FUPVJW9M#X-YZ7NYJQSI#[G]\SKPPQ_^`G]KaJQ_Y3IK\_[Yb/QSJT9cPdT9KNF	eObY3W#[3T(JdFc2fOQ_bQSG]K\#KI9M
"
JT#F]YbF]JQgG]K\LbFPW9\_JPG]\_FKab\_XPT#YjUQSI#[JT#FM9QSP/GHb/QScQSIOKaJQ_Y3IfmYjnF]b2YZUFI9PFc!eO\SF%G]\SKP/PQ_^9F]b/P"T9QSP
fOKafmF]b©KM9M#bFP/PVFPnZbY3c K-JT#F]YbF]JQgG]K\7KI9M%Fc2fOQ_b/QgG]K\9fmY3QSI(JBYZNuQ_F]j¡JT#Fo§{W#FPVJQ_Y3I%YZj	T#F]JT#F]bLY3I#F
cQ_[3T(JT9KNFJVY£M9QSPVfmFI9PVFkjUQSJTQSIJVF]b/f9bF]JKaeOQS\gQ_JX£QSIYb/M#F]bJVY F]F]f¡G]\SKPPQ_^`G]KaJQ_Y3I¨PVJVbFI9[JT71+I
Yb/M#F]bnJVYGHYfFhjUQ_JTJT9QSPRf9bYeO\_FclvjnFhT9KNFhGT#Y3PVFI%JVYPVJW9M#XK-G]\SKPPBYZGHY3I9GHF]f9JnbF]f9b/FPVFIJKaJQSY3I9P
bFPVFceO\SQgI#[c-W9\_JQS\gQSI#FKabUM9QgPGHb/QScQgI9KIJUfY3\SX{I#Y3cQSK\SP]vOKM9F§(W9KaJVF2Z:YbocQSI9QgI#[QSPP/W#FPUj	T#FIiM9FK\SQSI#[
jUQ_JT5NYJQgI#[lf9bYuGHFM9W#b/FP]v7jUT9QSGT5jBFM#F]^OI#F2KP}hFG]QSPQSY3I  Y3ccQSJVJVF]FP]%W#boJT9F]YbF]JQSG]K\bFP/W9\_JP
PT#Yj1JTOKaJnPVJVbQ_N{QgI#[oZYbLPQScfO\SQSG]Q_J)X-QgP]v(\SQ FUZ:YbncKI(X2YJT#F]b©G]\SKPPFPRYZGHY3I9GHF]fOJBbF]fObFPVFI(JKaJQ_Y3I9P]v#K
T9Kab/MGHY3c2fOW#JKaJQSY3I9K\3f9b/YeO\_FctjUT9FI!M#FK\SQgI#[©jUQ_JT}  Yb0YJT9F]b GHY3c2f`\_FH oNYJQSI#[UfObY{GHFMOW#bFP]vaKI9M
f9bYNFPhJT#F-T9FW#b/QSPVJQgGoI9KaJW#bFYZdYJT#F]bhbFPW9\_JPUJVbXuQSI#[JVY%f9b/WOI#FKM9Kaf9JQ_NF-emY(Y3PJQSI#[#""T9QgP"fOKafmF]b
f9bYfmY3PVFP!JVYKMOKaf9J-Kif9bF]NuQ_Y3W9PPG/T9Fc2FJVYeOW9Qg\SM5jBFK ¤\_FKab/I#F]b/Pv P/W9G]GHFPPVZ.W9\dZ:Yb-JT#FQSIOM9W9GHJQ_Y3I
YZ"M#FG]QSP/Q_Y3IJVbF]FP-KI9M£M#FG]QSPQSY3I\SQSPVJPv0JVYiJT#F%G]KPFYZ"}   "T9QSPQgP!KI¤Yb/Q_[3QSI9K\RKaf9f9bY3KGT£QSZBjnF
bF]Z:F]b©JVYJT#FoPVJKaJVF DYZ DJT#F KabJK\_[Yb/Q_JTOcPLeOW9QS\gM9QSI#[GHY3c2f`\_FH %NYJVFPUf9bYuGHFM9W#bFPv{W9P/W9K\S\_XjnYb uQSI#[
QSIiJT#FPVJVbY3I#[k\_FKab/I9QgI#[Z:b/Kc2F]jnYb `W#bK\_[Yb/QSJT9cv !vbF\SQSFP"Y3IbFGHFI(JPYbI9F]j bFP/W9\_JP
KaemY3W#J fOKabJQ_JQSY3I!emY{Y3PVJQSI#[#vb/KI {QSI9[	\_Y3PP emY{Y3PVJQSI#[#v3KI9M-f9bW9I9QSI#[#)JGHY3c2FPj	Q_JT!J)jB,
Y '`KNYb/P]v(Y3I#F
jUQ_JT5YfOJQScQSPVJQgGfOb/W9I9QSI9[%KI9M5Y3I9FjUQ_JT5fmFPPQgcQSPVJQSGf9b/WOI9QSI#[#qnYJTYe9JKQSI9FMFH {fmF]b/Qgc2FIJK\g\_X
[Y{Y{M1bFPW9\SJPY3I¨JT9FPQgc2fO\SQSG]QSJX KG]G]W#b/KGHX£JVb/KM#F]Y * v"eOW#Jj	T#F]bFKPYf9JQScQSPJQSGkf9b/W9IOQSI#[G]\_FKab/\SX
Y3W#JVfmF]bZ:Yb/cP	YJT#F]bK\_[Yb/QSJT9cPhQSIJT9F\gQ_[3TJ	YZRJT#FPQ_]F-YZRJT9F-Z:Yb/c-W9\SKP	Ye9JKQSI#FMvfmFPP/QScQSPVJQgG
f9b/WOI9QSI#[hJVFI9M9P JVY!KGT9Q_F]NFhKc2YbF©bFKPY3I9KaeO\_F©JVb/KM9F]Y * v{jUQ_JT2T9QS[3T2KG]G]W#b/KG]Q_FPRYe9JKQSI#FMY3IP/cK\S\
Z:Yb/cWO\SKP]L"T9QSP"QgP"K\S\7JT#F-c2YbF-QSIJVF]b/FPVJQSI#[KP	fmFPPQScQgPVJQSGhf9b/W9IOQSI#[QSP"eOKPFMlY3IKI9KaJW#b/K\0KI9M
PQScfO\_Fhf9b/W9I9QgI#[fObY{GHFMOW#bF

 <

ßÁæ

 > ?    @ 	  O>

ã½â

"T9KI {PhKabFM9W#F!JVYk}}    KabJQSIOQS§(W9Fv	8 n  } p dJKaeO\SQgPPVFc2FI(JhKaJQ_Y3I9K\ M9 RIOPVFQ_[3I#Fc2FI(J
uW#
f F] bQ_FW#b  [bY3I9Y3cQS§{W#FhM9Fh}Q VY3I`RKI9M  QSPVF  FKI!  Y3W9QSPnZ:YbLTOKNuQSI#[-f9bYNuQSM#FMJT#FoKa[b/QSG]WO\_JW#b/K\
M9KaJKuv0ZYb!PJQScWO\SKaJQSI#[kM9QSPG]WOPPQ_Y3I9PhKabY3W9IOM5Y3W#bbFPWO\_JP]vKI9M5Z:Yb!T9KN{QSI9[kKW9JT#Yb/Q_]FMJT9F2fOW#eO\SQ
G]KaJQ_Y3IYZ PVY3c2F!YZ0JT#Fob/FPW9\_JPLYe9JKQgI#FM7"T9K(I uPLJVY  T9c2FM  QSI#Y3W9GT#FoZ:Yb"T9KNuQSI#[2fmY3QSI(JVFMkY3W#J
JT#FUQgIJVF]bFPJBQSI2cQgI9QScQ_QgI#[hP/W#eOc2YuM9W9\SKab Z.W9I9GHJQ_Y3IOP]  QSIOK\S\_XvJT#FhKW#JT#YbdjUQgPT#FPJVYJT9K(I   FM#bY
}hY3cQSI#[Y3PUKI9MJT#Fb/F]N{Q_F]jnF]b/P©Z:Yb"JT#FQSb©N8K\SWOKaeO\_FoPW#[[FPVJQSY3I9P]

:

$




ß

 `>

@RC 

kÚ36)N6)

ß

" 5"Z> 

 ¯c

uQSIOGHF	JT#FoT9KabM9I#FPPBbFPW9\SJPBYZ "T#F]YbFcPhxKI9M-KabFoPVJKaJVFMZ:Yb©JT#FJjnYG]\SKPPFP"G]KPVFv#jnFPT9K\S\
9W PVFJT#FoI#YJKaJQSY3I ,  1 %   ,  1 - x / 7   ,  1 - /mZ:Yb"PVY3c2FoKabe`Q_JVb/KabXbW9\_F-p ,  1 (   ,  1 v#jUT9F]bF   ,  1 - /QSPnJT#F
NaK\SW#FZ:Yb-G]\gKPP  KI9M   ,  1 - x /©QSPoJT#F%N8K\gW#FZ:YbG]\SKPP   u  fmY3PQSJQ_NFNaK\SW#FZ:Yb ,  1 cFKI9P
JT9Ka(
J  ,  1 QSPQSIZ.KNYbYZnG]\SKPP)  kjUT9F]bFKPKI#F][3KaJQ_NF2NaK\SW#F-[3Q_NFPK  ,  1 QSIZ:KNYbYZBG]\gKPP)  u
dK\SW#FhZ:Y
b ,  1 [3Q_NFPB5
K  ,  1 I9FW#JVb/K\9j	Q_JT2bFPVfmFGHJBJVYJT#FhG]\SKPPVFP FhW9PFUK!b/FM9W9GHJQ_Y3I2Z:bY3c JT#F
  "	KabMf9bYeO\SFc   QSIOQScWOc  YNF]
b ip  KabF]X r  Y3T9I9PVY3I7v7xy3¥ay3< 

6> "    QSI9QSc-W9c  YNF]b
u
 " . 7r'"Ç("   GHY3\S\_FGHJQ_Y3IYZ0PW9eOPVF]JPBYZK!^`I9Q_JVF	PF]J>n  fY3P/Q_JQ_NF	QgIJVF][F]b£v

	 3 " .d7 '" R}hY(FP GHY3I(JKQSIKGHYNF]b	YZPQS]FKaJUc2Y3PVJ£v#JT9KaJhQSP]v#KPW9eOPVF]J 
G  G  £v9PW9G/TlJT9KaJUKI(X%F\SFc2FIJUYZ >£emF\_Y3I9[3P©JVYKaJU\_FKPJ"Y3I#Fc2FcemF]b"YZ  


|





GG
jUQ_JT

"T9Fhb/FM9W9GHJQ_Y3IQSPLGHY3I9PJVb/W9GHJVFMlKP©Z:Y3\S\_YjUP Zb/Y3c K   QSIOQScWOc  YNF]b
QgI9PVJKI9GHFjnFoeOW9QS\SM%K
\_FKab/IOQSI#[P/Kc2fO\_F.=?>£P/W9G/T%JT9KaJ"Q_ZJT#F]bFFH uQgPVJP©KGHYNF]bUYZ PQ_]FG  G   YZ >Lv{JT9FIkJT#F]bFFH uQgPVJP
KM#FG]QgPQ_Y3IGHY3ccQSJVJVF]FjUQ_JT G  Gu\gQ_JVF]b/K\SPLGHY3I9PQgPVJVFIJUjUQ_JT =?>Lv9KI9M7v#bFG]Q_fObY{G]K\g\_Xv#Q_Z0JT9F]bFoFH uQgPVJP
KM9FG]QSPQ_Y3IGHY3ccQ_JVJVF]Fj	Q_JT \SQSJVF]b/K\SP"GHY3I9P/QSPVJVFI(J"jUQ_JT =A>nvOJT9FIJT#F]bFFH uQSPJPUKGHYNF]bhYZdP/Q_]F 
YH
Z >n "UFIOGHFv ^`I9M9QSI#[kJT#FPcK\S\_FPJM#FG]QSPQ_Y3IGHY3ccQ_JVJVF]FkGHY3I9PQSPJVFIJj	Q_J
T =?> QSPoF§{W9Q_NaK\_FI(JJVY
^OI9MOQSI#[JT9FP/cK\S\_FPV
J  ZYbojUTOQSG/TJT#F]bFFH #QSPVJPoKPVY3\gW#JQ_Y3IiJVY   QSIOQScWOc  YNF]
b uvKIOM5JT9QSPQSP
QSI(JVb/KGHJKaeO\_FQSZ  % 0 2
 F]J !"M9FI#YJVF5JT#F 
  F\_Fc2FI(JkY
Z 2v	KI9M  "JT#F 
  F\_Fc2FI(JkY1
Z >n FM#F]^OI#F5K¢PVF]J
Y
Z GG"qnY(Y3\_FKI NaKab/QSKaeO\_FPiQSI Y3I9FJVYY3I#F¤GHYbb/FPVfmY3I9M#FI9GHFj	Q_JT JT#F¤F\_Fc2FI(JPY
Z 2vjUT9QgG/T
jnF¢WOPVF¤JVYtM#FP/GHb/Q_emFJT#F¢FH #Kc2fO\_FPiY#
Z =A>n "T#F¢GHYbbFPVfmY3I9M9QgI#[ PVF]J5YZ\SQSJVF]b/K\SPQSPiM9FI#YJVFM
0 ( (  ( ( . (  . (5464646(   (   M93R"T9FP/Kc2fO\_F =?>¢GHY3I(JKQSI9P"JjnYM9QSP VY3QSI(JnPW9eOPVF]JP JT#FPVF]J©YZ fmY3PQ 
JQ_NFhFH uKcfO\_F?
P =?>  v#KI9MJT#FhPF]JBYZI9F][3KaJQ_NFY3I#FA
P =?>  <
 =?>  GHY3IJKQgI9@
P GL> GFH #Kc2fO\SFP]v{M9FI#YJVFM



e{
X $ ( (P$ . (5464646(P$  4   FGHY3I9PVJVb/W9GHJoFKGTfmY3PQ_JQ_NF-FH #Kc2fO\_FPVYkJT9KaJQ_JhFI9GHYuM#FPJT#F2c2FceF]bPT9Q_f
YZ JT#FGHYbbFPfY3IOM9QSI#[-F\_Fc2FI(J"YZ >¢QSIkJT#F!F\_Fc2FI(JP©Y
Z   YbFf9bFG]QgPVF\_Xv


x





GL> GM(P$ 
%



 "#"$ 6
 "#"$ 4
" !7 ' :
"% !'&7 ' :

=A>  GHY3IJKQSIOPUKPQgI#[3\_FoI#F][3KaJQ_NFFH #Kc2fO\SFvOM#F]^OI#FMke{X
"   
$ %
" 4
" (

 uW#f9fmY3PVF	JT#F]bFhFH uQgPVJP©KGHYNF]b(  Y Z >¤PKaJQSPZXuQSI#[ G  G

pwy3



p+x]

£

FGHbFKaJVFKM#FG]QSPQSY3IGHY3ccQ_JVJVF]F
GHY3I9PQgPVJQSI#[YZ
cY3I#Y3cQSK\SPvFKG/TljUQ_JTY3I#Fo\SQ_JVF]b/K\OY3I9\_XKI9MkKPPY{G]QSKaJVFM%JVY2K-fmY3PQ_JQ_NF k R
 KGT
c2Y3I#Y3cQSK\dGHYuM#FP!Y3I9FYZ©JT#FPF]JP!QSI
"T9FM#F]Z.KW9\_J!G]\SKP/P!QSP   ulUT9QSPM#FG]QgPQ_Y3IGHY3ccQ_JVJVF]F



* 



)

QSP	GHY3I9PQSPVJVFI(JUj	Q_JTlJT#FFH uKcfO\_FP"YZ<=A>+ =A> vOYJT#F]b/jUQSPVF!PY3c2FF\SFc2FIJ	YZ >jnY3W9\SMI#YJ	emF
GHYNF]b/FM7dZJT9F]bF	KabF	Y3I9\_XJjnY-N8K\SW9FPRKW#JT#YbQ_]FMZ:YbRJT#F	NFGHJVYb/PLKI9MJT9F]XKab/F  uv{jBFhPQSc2f`\_X
GHbFKaJVFK}  GHY3I9PQSPVJQgI#[YZnY3I#Fc2Y3I9Y3cQSK\ jUQ_JTI9F][3KaJQ_NF\SQ_JVF]bK\SPKPPVYuG]QSKaJVFMJVYKI#F][3KaJQSNF

$

: 2=



££½£iwc©

	
ª£

c2Y3I9Y3cQSK\> 









 /

¨















¨











h

¨


 Q_[3W#bF &n"T#FoPQ  kfmY3PPQ_eO\SFhG]KPVFPUYZ b/W9\_FP]
p:JT#F2NaK\SW#F-ZYboJT9FI#F][3KaJQ_NFG]\SKPPoQgP	[b/FKaJVF]bJT9KI5JT#F2Y3I#FYZBJT#F2fmY3PQ_JQ_NFG]\SKPPzFKG/TYZnJT#F
I#F][3KaJQ_NF-\SQ_JVF]b/K\gPnGHYuM#FPUY3I#FoYZ JT#F!PVF]JP"QgI   R"T#FM#F]Z.KW9\_J©G]\SKP/P"QSP   u
 uW#f9fmY3PVF!I9Yj JT9KaJhJT#F]bF-FH uQSPJPhK%M#FG]QSP/Q_Y3IGHY3ccQ_JVJVF]F jUQ_JTKaJc2Y3PVJ \SQSJVF]b/K\SPhGHY3I9PQSPVJVFI(J
jUQ_JT =A>nd}hFI#YJV5
F  ( ( . (5464646(#  uFKG/Tic2Y3I#Y3cQSK\YZ v#QSIkI#YPVfmFG]Q_^OG	Yb/M#F]bv#KI9
M ( ( . (5464646(   
JT#FQ_bhKPPVYuG]QSKaJVFMN8K\gW#FPUZ:Y)
b kU"T#F-c2Y3I#Y3cQgK\SP"YZ G]KIiemF\_Y3I9[JVY%JT#bF]F!J)X(fmFPhYZdPW#e`PVF]JPUYZ
c2Y3I#Y3cQSK\SP







 cY3I#YJVY3I#Y3W9P	c2Y3I#Y3cQSK\gPp:jUQ_JT#Y3W#J"I9F][3KaJQ_NF!\SQ_JVF]bK\SPv
 cY3I#Y3cQSK\SP©GHY3I(JKQSI9QgI#[2Y3I9\_XkI#F][3KaJQ_NF!\gQ_JVF]b/K\SP]v
 cY3I#Y3cQSK\SP©GHY3I(JKQSI9QgI#[2fmY3PQ_JQ_NFKI9MI9F][3KaJQ_NF\SQSJVF]b/K\SP]
 F]JW9PoG]K\S\ bFPVfmFGHJQ_NF\_X v 
 v  JT9FPVFJT#bF]FG]\SKPPFP]

_Q NFI5JT9KaJoFKG/T¤c2Y3I#Y3cQgK\0YZ
¤G]KI5eF2KPPY{G]QSKaJVFM5JVYlK%fmY3PQ_JQSNFYbKI#F][3KaJQSNF kv7JT#F]bFFH #QSPVJPY3IJT#F2jUT#Y3\SF-PQ_ iG]\SKPPVFPYZ
b/W9\SFP]vuf9bFPVFI(JVFMQSI Q_[3W9bF {
 IXc2Y3I#Y3cQgK\	YZ GHY3I(JKQSI9QgI#[KaJk\SFKPVJY3I#F5fmY3PQ_JQ_NF5\SQ_JVF]b/K\hG]KItY3I9\SX¨emFPKaJQgPV^9FMe(X
fmY3PQ_JQ_NFLFH #Kc2fO\_FP UT#F]bF]Z:YbFv(Q_Z`JT#F]bF"FH #QSPVJPdb/W9\_FP emF\_Y3I#[3QgI#[JVY!G]\SKPP/0Yb hv3jBF	G]KI2bFc2YNF
JT#Fc jUQSJT#Y3W#J \_Y3PQSI#[GHY3I9PQgPVJVFI9GHX9W#bJT9F]b/c2YbFvP/QSI9GHF $  GHY3IJKQgI9P Y3I9\_X-I#F][3KaJQ_NF"\SQ_JVF]bK\SP]vQ_Z9jnF
bFc2YNFJT9FQ_b	I#F][3KaJQSNF\SQ_JVF]bK\SP©Z:bY3c K\S\b/W9\_FP"eF\SY3I#[3QSI#[2JVY%G]\SKPP  p.cK {QSI9[JT#Fc [YJVYG]\gKPP
v{jnFoM#Y2I#YJ©\_Y3PVFGHY3I9PQSPJVFI9GHX  P©K-GHY3IOPVF§(W9FI9GHFv#jBFoG]KIPW9f9fmY3PVFUjUQSJT#Y3W#JL\_Y3PPnYZ[FI#F]bK\SQ_JX
JT9KaJUK\g\mb/W9\_FPLYZ KabF!QSIG]\gKPP©v9vuYb" -
FI#Yj JVbFKaJoQSI9M#F]fmFI9M#FI(J\_X%JjnYlG]KPVFP]vM#F]fmFI9MOQSI#[Y3IjUT#F]JT9F]b	JT#F2M#F]Z.KW9\_JhG]\SKPPhYZ ¤QSP
  2Yb   u













xaUUT#FM#F]Z.KW9\_J-G]\SKPP-QSP   u  IXfmY3PQ_JQSNFFH #Kc2fO\_F%PKaJQSPV^9FPJT#F]bF]Z:YbF%Kic2Y3I9Y3cQSK\RQgI 
UT#F]bF2G]KIFH #QSPVJJjnYlJX{fmFPYZBfmY3PQSJQ_NFFH #Kc2fO\SFP	JT9Y3PVFPKaJQSPVZ:XuQSI#[kKaJ\_FKPVJoY3I#F2b/WO\_FYZ
G]\gKPP©v9KI9MJT#Y3PVFI9YJUPKaJQSPVZ:XuQSI#[KIXG]\SKPP"Rb/W9\SF2p:JT9F]bF]ZYb/F!PKaJQSPVZ:XuQSI#[2KaJU\_FKPVJ©Y3I9Fob/W9\_F
YZG]\SKP/P© $  PKaJQSP^9FP"K\S\7G]\SKP/P©nKI9M  b/WO\_FP]d"T#F]b/F]ZYbFv
,



 = 1 7

 ,

4

G]\gKPP©G]\SKP/P© 




E4

p+xx

1

UT9QSPRP/T#YjUPBJT9KaJ]vuQ_Z7K!fmY3PQSJQ_NF"FH #Kc2fO\_FhI#YJBPKaJQgPVZXuQSI#[KIXG]\gKPPRbW9\_FPjnY3W9\SMPKaJQSPVZ:XK\S\
G]\gKPPh  b/WO\_FP]vOJT9FIQSJUjnY3W9\SMlemF-cQSPG]\SKP/PQ_^9FM7vOjUT9QSGTiQSP	QSc2fmY3PPQSeO\_Foe{XJT#F-GHY3IOPQSPVJVFI9GHX
T(X{fYJT9FPQSP]RUT9QSPL[3Q_NFP	KIQSc2fmYbJKI(J©f9bYfmF]bJ)XvOI9Kc2F\SXJT9KaJ	KIXkfmY3PQ_JQ_NFoFH #Kc2fO\SF!I#YJ

$

: $



P/KaJQSPVZ:X{QSI9[KI(XG]\SKPPndb/WO\_F	G]KI9I9YJLP/KaJQSPVZ:XK\S\`G]\gKPPn  bW9\_FP]  F]JLW9PLG]K\S\<k JT9QSPBf9bYfmF]bJ)X
QgIjUTOKaJ!Z:Y3\S\_Yj	P] FkI#Yj PT9Yj T#Yj JVY5eOW9QS\gMKNaK\SQSM¤PVY3\SW#JQ_Y3IJVY   QSIOQScWOc  YNF]b<
j	Q_JTKaJUc2Y3PVJ kF\_Fc2FI(JP]R#YbhKIXkfmY3PQ_JQSNFhFH #Kc2fO\S	
F $  v



 QSZ $  PKaJQSPV^9FPKaJo\_FKPVJY3I#F2G]\SKP/P	Ub/W9\_FvmG/T#Y{Y3PVFQSI

K PW#eOPVF]JhYZA>1GHYbb/FPVfmY3I9M9QSI#[
k
JVYK2fmY3PQ_JQ_NF\SQSJVF]b/K\YZ PY3c2F!PKaJQSP^9FMG]\SKPP©nb/W9\SFd"T9QSPLPW#e`PVF]J"GHY3IJKQgI9P$  
 QSZH$  M#Y(FPI#YJPKaJQSPZXKI(X¤G]\gKPP-b/W9\_Fv JT#F]b/FFH #QSPVJP-Z:bY3c k PY3c2FG]\SKPP-  b/W9\_F
j	T9QSG/TkQSP©I9YJ"PKaJQSPV^9FM  c2Y3I#[K\g\I9F][3KaJQ_NF!\SQ_JVF]bK\SPnYZ0K2G]\SKPPL  b/W9\_FhjUT9QSGTkQSP©I#YJ
P/KaJQSPV^9FMie(X$  vGT#Y(Y3PFY3I#FjUT9QSGTQSPUfmY3PQ_JQ_NF!Qg
I $  p.G]KW9PQSI#[%Q_J	I9YJUJVYkPKaJQSPVZ:XJT#F
bW9\_FvKI9MJT9FI2G/T#Y{Y3PVF"JT#F"GHYb/bFPVfmY3I9M9QSI9[	F\_FcFIJYZ "T9QgP P/W#eOPVF]J YZ >5GHY3IJKQgI9P
$  
JVF]b/KaJQSI9[%JT9FKaeYNF2f9bYuGHFM9W#bF-Z:YbK\S\fmY3PQSJQ_NFFH #Kc2fO\SFP]v7jBF2YeOJKQSI5K%GHYNF]b!YZ>GHY3I!
P/QSPVJQSI#[YZKaJUc2Y3PJ PW#eOPF]JP©YZ >L
~{UUT#FM#F]Z.KW9\_J"G]\SKPPUQSP   u?$  PKaJQSPV^9FPUK\S\7G]\SKPP©/BKI9Ml  b/W9\_FPd"T#F]bF]Z:YbFv
,



 = 1 7

 ,

4

G]\gKPP©G]\SKP/P© 




E4

p+x~3

1

RNFI5Q_ZJT#F2QSI#F§{W9K\SQ_J)XQSP	I9Yj

PVJVb/QSGHJ]v7Q_J	[3Q_NFPJT#FPKc2F-f9bYuGHFM9W#bFZYbFG]QSFIJ\_XeOW9QS\SM
QgI#[JT#FkPVY3\SW9JQ_Y3IJVY   QSI9QSc-W9c  YNF]b
jUQSJT¤KaJc2Y3PVJ F\_Fc2FI(JP]ve(X¤W9PQSI#[JT#FPKc2F
Kab/[3W9c2FI(JUKPUQSIkJT9Fof9bFGHF]FM9QSI9[G]KPVF
"TOQSPLFI9M9PLJT#F!f9bY{YZYZ"T#F]YbFc xa

kÚ36)N6)

" 5"Z> 

 ¯c

FoW9PVFK-bFM9W9GHJQ_Y3IZ:bY3c

JT9F   "hKab/M%f9bYeO\SFc

~  

   Y3\SYb/KaeOQS\SQSJX kp s FKab/I9PnF]J©K\w_v7xy3¥<

6> "  ~      Y3\_Yb/KaeOQS\gQ_JX u
 " . 7r'"Ç("   ^OI9Q_JVF%PVF]J> % 0 ( ( . (5464646(  4  9kKIOM¤KGHY3\S\_FGHJQ_Y3I¤YZUGHY3I9PJVb/KQSI(JPYNF]b#>nv
 % 0 ! ( (*! . (5464646(*!    93vOPW9GTJT9KaJ  ^m/0x3(/~)(5464646(RGG 9 (*!   >n

	 3 " .d7 '" R}hY(FP©JT9F]bFFH #QSPVJ"K~      Y3\SYb/KaJQ_Y3IlYZ JT#FoF\SFc2FIJP"YZ<>Lv J 1.21BKZ:WOI9GHJQ_Y3I
)
>  0 x3/( ~ 2
9 PW9GTJT9KaJ


|

p  
m/0x3(/~)(5464646(RGG 98(p   ( 1 m! D  p   

%0

p 1 

"T9F"bFM9W9GHJQSY3IQSPRGHY3IOPVJVb/W9GHJVFM%KPdZ:Y3\S\_YjUP  Zb/Y3c K ~      Y3\_Yb/KaeOQg\SQ_JX !QgI9PVJKI9GHFv(jBF	eOW9QS\SM
K \SFKab/I9QSI#[P/Kc2fO\_F =A>PWOG/TJTOKaJBQ_ZJT#F]bF	FH uQSPJPRK~      Y3\_Yb/KaJQ_Y3IYZ7JT#F"F\SFc2FIJPBYZ >nv(JT#FI
!
JT#F]bFFH uQgPVJP!KiM#FG]QSPQ_Y3IGHY3ccQ_JVJVF]FjUQ_JTJ)jBYib/W9\_FP!GHY3I9PQSPVJVFI(J!j	Q_JT=?>Lv KIOM7vbFG]QSf9bYuG]K\S\_Xv0QSZ
JT#F]bF!FH uQSPJP"KM#FG]QSP/Q_Y3IlGHY3ccQSJVJVF]FjUQ_JTJ)jBYb/W9\_FP©GHY3IOPQSPVJVFI(J"jUQ_J
T =?>nv#JT#FIJT#F]bFFH #QSPVJPUK~ 
    Y3\SYb/KaJQ_Y3IYZ JT#FoF\_Fc2FI(JP©Y<
Z >nR9W9bJT#F]b/c2Yb/Fv#JT#F]bFI#F]NF]b"FH #QSPVJP©K2M9FG]QSPQ_Y3IGHY3ccQ_JVJVF]F
jUQ_JTY3I9\_XY3I#Fdb/WO\_FdGHY3I9PQSPJVFIJ0jUQ_J@
T =A>n "	FI9GHFv^OI9MOQSI#[LJT#FRM#FG]QgPQ_Y3IGHY3ccQ_JVJVF]FBj	Q_JToJT#FRP/cK\S\ 
FPVJhI(W9cemF]bUYZb/WO\_FPUGHY3I9P/QSPVJVFI(JUjUQ_J
T =?>¨QSPUKaJ\_FKPVJhKPhTOKab/MlKPPVY3\_NuQSI#[ ~      Y3\_Yb/KaeOQS\gQ_JX uv
KI9MJTOQSP©QSP©QSI(JVb/KGHJKaeO\_FQ_Z  % 0 2
:BC

Q



££½£iwc©

	
ª£

 F]J !"M9FI#YJVF5JT#F 
 ¢F\_Fc2FI(JkYZ2v	KI9M "JT#F 
 ¢F\_Fc2FI(JkYZ1>n FM#F]^OI#F5K¢PVF]J
YZ/GL>HG"qnY{Y3\_FKI N8KabQSKaeO\_FPQSI Y3I#F¢JVYY3I9F¢GHYb/bFPVfmY3I9M#FI9GHF£jUQ_JT JT#F¢F\_Fc2FI(JPYZ >nv-jUT9QgG/T
jnF¢WOPVF¤JVYtM#FP/GHb/Q_emFJT#F¢FH #Kc2fO\_FPiYZ#=A>n "T#F¢GHYbbFPVfmY3I9M9QgI#[ PVF]J5YZ\SQSJVF]b/K\SPQSPiM9FI#YJVFM
0 ( (  ( ( . (  . (5464646( 4  (  4  93 oW#bbFM9W9GHJQSY3ItQSPcKM#FQSI¡JT#FJ)jBYG]\gKPPVFPlZ:b/Kc2F]jnYb "T#F
PKc2f`\_.
F =?>¢GHY3I(JKQSI9P©J)jBY%M9QSP VY3QSI(JnP/W#eOPVF]JP dJT9FPVF]J"YZ fY3P/Q_JQ_NFFH uKcfO\_F
P =?> Rv`KI9MkJT#FPVF]J"YZ
I#F][3KaJQ_NFY3I#F@
P =?> 
 =A>1GHY3IJKQSIOP GL> G`FH #Kc2fO\_FPvM#FI#YJVFMe{
X $ ( (P$ . (5464646(P$   4   FGHY3I9PJVb/W9GHJ
FKG/TifmY3PQ_JQ_NFFH #Kc2fO\_FPYJT9KaJUQ_JLbF]fObFPVFI(JPUKIF\_FcFIJ"Y<
Z >n  YbFfObFG]QSPVF\_Xv



" 4
p+x3
"  ( "  & 
A= >  GHY3I(JKQSI9PGGdFH #Kc2fO\_FP]v	M#FI#YJVFM¡e{XF$ ( (P$ . (5464646(P$      F5GHY3IOPVJVb/W9GHJ%FKG/T I9F][3KaJQ_NF
x









GL> GM(P$ 

%

 6

"   4

FH #Kc2fO\_FPVYJT9KaJUQ_J©FI9GHYuM#FP©FKGTlYZ JT#F!GHY3IOPVJVb/KQSI(JP©YZ 
   YbFf9b/FG]QSPVF\_X 


x





GGM(P$  
%

 
 
#"%"$ 6
#""$ 4
"  : 7 '
"%  : 7& '

p+x +(

¡Q_JT#Y3W#J\SY3PP7YZ{[FI#F]b/K\SQ_J)XvjnFRcKFRZY3W#b0KPPW9c2fOJQ_Y3I9PY3IJT#FdQgI9PVJKI9GHFYZ ~      Y3\_YbKaeOQS\SQ_J)X&

M9W#FoJVYJT#FoZ:KGHJ	JT9KaJUQ_J"QgP©I#YJ"JVb/Q_NuQSK\ 
xaUUT#F]bF	M9Y(FPnI#YJnFH uQSPJBPVY3c2F	F\_Fc2FI(JBYZ >f9b/FPVFIJnQSIK\g\OGHY3I9PVJVbKQSIJPIJT9QSPBG]KPVFhQgI9M#F]FM7v
JT9FJVb/Q_NuQSK\LGHY3\_Yb/KaJQ_Y3I¨GHY3IOPQSPVJP2QSI¢[3QSN{QSI9[JVYY3I9FYZhPWOG/TF\_FcFIJP2Y3I9FlGHY3\_YbvLKI9M¢JT#F
YJT9F]b	GHY3\_Yb"JVYK\S\7YJT#F]b"F\SFc2FIJPUYZ >n
~{


p'*(
J(	8( D8 Cm/0x3(/~)(5464646(RGL> G 9  jUQ_JT  % 0 
KI9M % 0 8v
 & m0x3(/~)(5464646(RGG 9 (,0  ("390 !,+ 6 0  ( 1 9-0 !,+4
p+x23
JT#F]bjUQSPFQgI9M#F]FM7vJT9F]bF2jBY3WO\SM5FH uQgPVJp'*(
 (	8( 8w:m 0x3(/~)(5464646(RGL>HG 9  j	Q_JT % 0 
KI9M  % 0 8
P/W9G/TJTOKaJ
x (/)~ (5464646(RGG 9 (,0  ( "39  !,+  0  ( 1 9  !,+(
p+x|3
 & m03
KIOMlQSIJT9KaJ	G]KPVFv`K2JVbQ_N{QgK\7PVY3\SW#JQ_Y3IkJVY ~      Y3\_YbKaeOQS\SQ_J)X&jBY3W9\gMGHY3I9PQSPVJ"QgI[3Q_NuQSI#[JVY
  Y3I#F!GHY3\_YbhKI9MkJVY  " JT#FoYJT#F]b	Y3I#FvOKI9MlJVY   Y3I#F!GHY3\_YbhKI9MkJVY  1 JT#FYJT9F]bUY3I#F

{ B KG/T¡F\_FcFIJ%YZ"> eF\SY3I#[3PJVYKaJk\_FKPVJ%Y3I#FGHY3IOPVJVb/KQSI(J%QgI  hJT#F]bj	QSPVFv"Q_J%G]KI1emF
b/Fc2YNFM7

+# BKG/TlGHY3IOPVJVb/KQSI(J"GHY3IJKQgI9P©KaJ"\_FKPVJ©J)jBY2F\_FcFIJP©Z:bY3c

>nBJT#F]bjUQSPFhQ_J©G]KIkemFbFc2YNFM7

 uW9f9fmY3PVFJT9F]bFFH uQgPVJPKPVY3\gW#JQ_Y3I¢JVY ~      Y3\_Yb/KaeOQS\gQ_JX u FeOWOQS\SM¤JT#F} 	 j	Q_JT¢JjnY
c Y3I#Y3cQSK\SPnYZLp s FKab/I9P©F]J"K\w_vxy3¥"GHY3I9PQSPJVFIJ©jUQSJTJT9FoFH uKc2f`\_FP]d"T#FIv{jnFoeOW9Qg\SMJ)jBYbW9\_FP
2
e{XiKPPVYuG]QSKaJQSI9[%JT9F-J)jBYic2Y3I#Y3cQSK\gP	JVYlPY3c2Flp.KabeOQ_JVb/Kab/X#UfmY3PQ_JQ_NF-NaK\SW#FUT#F2M#F]Z:KWO\_JhG]\gKPPoQSP
  uBUT9QSPL\_FKM9P©JVYKM#FG]QSPQSY3IGHY3ccQ_JVJVF]Fj	Q_JTJjnYb/WO\_FP©GHY3I9PQSPJVFIJ"j	Q_JT =?>n
 uW9f9fmY3PVFJT9KaJUJT#F]b/FFH uQgPVJPUKM9FG]QSPQ_Y3IGHY3ccQ_JVJVF]F 5j	Q_JTKaJ	c2Y3PJ"JjnYb/WO\_FP"GHY3I9PQgPVJVFIJUjUQ_JT
=?>L
 FI#Yj PT#Yj JT9KaJ2JT#F]bFkFH #QSPVJP2K5NaK\SQSM¢~      Y3\_Yb/KaJQSY3I¨YZUJT9F%F\SFc2FIJPYZ >n F
^9b/PJP/T#Yj JT#b/F]Fl\_FccKPjUTOQSG/T¢PT9K\g\BemFW9PVFM\gKaJVF]bY3I7¢"T#FI7vdjnFlPT#Yj JT9KaJJT#FM#FG]QgPQ_Y3I
GHY3ccQSJVJVF]F%QSP!KGHJW9K\S\_XF§{W9Q_NaK\_FI(JJVYiKi} h j	Q_JTJjnY5c2Y3I#Y3cQSK\gPGHY3I9PQSPJVFIJjUQ_J
T =A>n F
GHY3I9G]\SWOM#FUe{XW9PQSI9[!f9bF]NuQ_Y3W9PRbFPW9\SJP	p s FKab/IOPRF]J©K\w_vmxy3¥BY3IT9Yj¡JVYJVbKI9PVZ:Yb/c JTOQSPR} h¤QSI(JVY
K2NaK\SQSM~      Y3\SYb/KaJQ_Y3IiYZ0JT#F!F\_Fc2FI(JP"Y<
Z >n



:BC6:



 p N "RT   fTgJ"! J %(   % "  J %8a WV   "	 (
 %KJ  J Wi f" T 
 !  ]
  J  I H J  	  "fJ(%	"  !  "%   X    3 "  J  !wJ H "! %j]  
 J  J %  I  T 	  T J "! 	  "fJ 6J  3 "! ! 
  %KJ  J a !\J ] "! % !
"   4 

B "F> >



"

 "4

(

p RbY(YZ PVJVb/KQS[3TJVZ:YbjLKab/M`

B "F> >

jV   "! ! 
 %KJ  J aji "fT 
 !  %K]
J  J %  T 
 .61
p:+I9M#F]FM7v Z:Yb-KI(XN8KabQSKaeO\_Fv JT#F]bFFH uQSPJJjnYifmY3PQSJQ_NFFH #Kc2fO\_FP-T9KNuQSI#[JT#FGHYbb/FPVfmY3I9M9QSI#[
fmY3PQ_JQ_NFo\SQSJVF]b/K\wv#KI9MJT#FGHYbbFPVfmY3I9M9QgI#[-I9F][3KaJQ_NF\SQSJVF]b/K\


 pN R
" T   fTgJ"! J %

% "  J 8% a

B "F> >       "fJ(% Wi "6  !   X   $ !  % 1
kÚ36)jl uW#f9fmY3PVF%JT9KaJ GHY3IJKQgI9PY3I#Fb/W9\SFvjUT#Y3PVFc2Y3I#Y3cQSK\LQSP2G]K\S\_FM  ( £Z"JT#FlM#F]Z.KW9\_J
G]\SKPPnQSP   uvuK\g\#fmY3PQ_JQ_NF"FH #Kc2fO\SFPBPKaJQgPVZX  ( v(jUTOQSG/TQSPdQSc2fmY3PP/Q_eO\_FLe{X  FccK +( JT#F	c2Y3I9Y3cQSK\
jnY3W9\SMemFFc2fOJXv KI9M GHY3WO\SMI#YJemFGHY3IOPQSPVJVFI(J]k)ZLJT#FM9F]Z:KW9\SJG]\SKPP!QgP   uv JT#FI9F][3KaJQ_NF
FH #Kc2fO\_FPhKabFG]\gKPPQ_^9FMe(X  ( KIOMlJT#F]bF]Z:YbF ( uh"T{W9P]vOI#Y%fmY3PQ_JQ_NF!FH uKc2f`\_FPKaJQgPV^9FP  ( 
"  4 
#bY3c  FccK {vFQSJT#F]b  ( % "  ( #"-KI9MI#YkI#F][3KaJQ_NFFH #Kc2fO\_F-G]KIP/KaJQSPVZ:XlQ_J-p.QScfY3P/PQ_eO\_Fv
Yb  ( GHY3IJKQSIOP-KaJ\_FKPVJ-JjnY5I#F][3KaJQ_NF\SQ_JVF]b/K\gP]v KIOMJT#F%GHY3I9PVJVb/KQgIJPK\S\BT9KNFQSI¤GHY3cc2Y3I£JjnY
F\_Fc2FI(JP-YZn
> iUT(W9Pv JT9F%QSIOPVJKI9GHFYZ ~      Y3\_Yb/KaeOQg\SQ_JX QSP!JVbQ_N{QgK\wvjUTOQSG/T£QSP!Qgc2fmY3PPQ_eO\SF
"T9QgPLFI9M9PLJT#FfObY(YZ0YZ  FccK {
F-I#YjP/T#Yj JT9KaJ"JT#F!M9F]Z:KW9\SJLG]\gKPP"YZ 5QSP   un#YbUJT#FPKF!YZ PQSc2f`\SQSG]Q_J)Xv{jnFj"bQ_JVFoJT#F
JjnY5c2Y3I#Y3cQSK\gPoYZ ¢e{/
X  ( KI91
M  . l"T9FM#F]Z.KW9\_J!G]\SKP/P!QSPM#FI#YJVFM 1m 0   uv   )93  KuQSI#[
JT#FKPP/W9c2f9JQ_Y3I5JTOKa
J  %   lQScfO\SQ_FP	JT9KaJ!K\S\I9F][3KaJQ_NFFH #Kc2fO\_FPc-W9PVJP/KaJQSPVZ:XiKaJ!\_FKPJY3I#F
c2Y3I#Y3cQSK\7QSI 







 #W#f9fmY3PVF2JT9KaJ (  KI9M .  u%"T9FI7v0I#YfY3P/Q_JQ_NF2FH #Kc2fO\_FG]KI£PKaJQSPZXFQ_" J T#F]4 b   (
Yb  . 9bY3c JT#F%JjnYfmY3PP/Q_eOQS\SQSJQ_FPYZ  FccK {vY3IO\_XJT#F%^9b/PVJY3I#FkQSP!NaK\SQSM¡p "  (  "
G]KIOI#YJoemFP/KaJQSPV^9FMe{XiKI(XI#F][3KaJQSNF2FH uKc2f`\_F"T{W9P]v  ( KI9M/ . GHY3I(JKQSI5FKG/T¤KaJ\_FKPVJ
J)jBY%I#F][3KaJQ_NF-\SQ_JVF]b/K\SP2

0   (  ":9
0   ( 19




( (

p+x¥
p+x3

. 4

FKabF2QSIJT#FPVFGHY3I9MG]KPVFYZRJVb/Q_NuQSK\SQSJXYZnJT#F2QSI9PVJKI9GHFYZ ~      Y3\_YbKaeOQS\SQ_J)X&uv0PQSI9GHF



cK{QSI9[2JT#F!KPPWOc2f9JQ_Y3I%JT9KaJ 5QgP©GHY3I9PQSPVJVFI(JUQScfO\SQ_FP

&

 #W#f9fmY3PVFJT9KaJ

m0x3(/~)(5464646(RGG 9 (,0  ("39 0 !,+ 6

0  (  1 9- 0 !,+4

p+xy3

 KI9M . 
 u  \S\I#F][3KaJQ_NFFH #Kc2fO\_FPUcW9PJUPKaJQSPVZ:X  (   ( QSP©Z:Yb/GHFM

JVYkemFc2Y3I#YJVY3I#Y3W9PoP/QSI9GHF-YJT#F]bjUQSPFkp:[3Q_NFIJT9KaJE%   	K\S\ I#F][3KaJQ_NF2FH #Kc2fO\_FPhjnY3W9\SM
P/T9KabF!KGHY3cc2Y3II9F][3KaJQ_NF-\gQ_JVF]b/K\wv#JT{W9PUK\g\GHY3I9PVJVb/KQgIJPUjBY3W9\gMlPT9KabFKGHY3cc2Y3IF\_Fc2FI(J
YZ	>nv©KI9M JT#FQSIOPVJKI9GHFlY)
Z ~      Y3\SYb/KaeOQS\SQSJX jBY3WO\SMemFJVb/Q_NuQSK\w  . emFQSI#[PKaJQgPV^9FM
( 

:BC5z



££½£iwc©

	
ª£



e{XKaJ2\_FKPVJ-Y3I#FkfmY3PQ_JQ_NFFH uKcfO\_Fp:YJT9F]bjUQSPVFv ¨jBY3WO\SMemF%F§(WOQ_N8K\SFIJJVY5KPQSI9[3\_F Db/W9\_F
M9FG]QSPQ_Y3I¡GHY3ccQSJVJVF]FvKIOM1jnFZ.K\S\QSIJT#FGHY3IJVb/KMOQSGHJQ_Y3I¡YZ  FccK 3vQ_JGHY3IJKQgI9PKaJ
cY3PVJ	Y3I9F-I#F][3KaJQSNF\gQ_JVF]b/K\w©ZdQ_J	GHY3I(JKQSI9PhFH #KGHJ\_XlY3I#FI#F][3KaJQ_NF\SQ_JVF]bK\wv`Q_JhQSPUP/KaJQSPV^9FMie(X
FH #KGHJ\_XY3I#FLfY3P/Q_JQ_NFRFH #Kc2fO\SFv3KI9M-jBFLG]KIbF]fO\SKGHFLQ_J e(X!JT#F©c2Y3I#YJVY3I#Y3W9P c2Y3I9Y3cQSK\(jUQ_JT
GL>HG)7 xfmY3PQ_JQSNF\SQ_JVF]bK\SPp:jnF%\_FKNFFcf9JXJT9FfmY3PQ_JQ_Y3IYZ"JT#FQgI9Q_JQSK\I#F][3KaJQSNFk\gQ_JVF]b/K\
 Y3I9PVF§{W#FIJ\SXv9PQScQS\gKab/\_X-ZYb  ( v#jBFG]KIPW9f9fmY3PVF	JTOKa
J  . QSPLc2Y3I#YJVY3I#Y3WOP] F!M9QSPJQSI#[3W9QSP/T
J)jBY%G]KPVFP]

"  4



Z G ( G 
 G . GvOI#Y2fmY3PQSJQ_NFFH uKc2f`\_FG]KIPKaJQgPVZX- ( dqnXkZ.KGHJ{v  ( % "  ( #"vOKI9M
I9YI#F][3KaJQ_NFFH #Kc2fO\SFG]KIPKaJQSPZXkQ_J]v9KGHY3I(JVb/KM9QSGHJQSY3Ip 5G]KI9I#YJ"emFGHY3I9P/QSPVJVFI(J
Z G ( G  G . G  . G]KI9I9YJeFFc2f9J)X`z!JT#F]bF]Z:YbFQ_JkGHY3IJKQSIOPK£GHF]b/JKQSItI(WOc!emF]b
YZ-fmY3PQ_JQ_NF5\SQ_JVF]bK\SP] BKG/TtfmY3PQSJQ_NF5FH uKc2f`\_FPKaJQSPVZ:X{QgI#!
[  . cWOPVJK\SPVY¨PKaJQSPZX  ( v
P/QSI9GHF5YJT#F]bjUQgPVF
QSPI#YJlGHY3I9PQgPVJVFIJ]z2uQSI9GHF  ( KI9M  . KabF¤c2Y3I#YJVY3I#Y3W9P+
v  . QSPK
[FI9F]b/K\SQ_KaJQ_Y3I¤YZ  ( v KI9M£KI(XFH uKc2f`\_FPKaJQgPVZXuQSI#[  ( p.QgIfOKabJQgG]W9\SKabv0JT#F%I9F][3KaJQ_NF
FH #Kc2fO\SFPLc-W9PVJ"PKaJQSPZX  . v9KGHY3I(JVb/KM9QgGHJQ_Y3I7





"T9F]bF]ZYb/F%)  un"TOQSP©Z:Yb/GHFPUK\S\fY3P/Q_JQ_NFoFH #Kc2fO\_FPUJVYPKaJQSPZXkKaJ	\_FKPJ"Y3I#FcY3I#Y3cQSK\7YZ
M .  uJGHY3cFP
( 
 iKI9*
 ( % p  FccK +(  \S\I#F][3KaJQ_NFFH uKcfO\_FPc-W9PVJPKaJQgPVZ/
X  . v KI9M5jnFK\SPVYlT9KN/
F G ( G  G . G


"
4

	YfY3P/Q_JQ_NFFH uKcfO\_FG]KIPKaJQgPVZX  . vKIOM  FccK %[3QSNFPFQ_JT#F](
b  ( % "  (  "lp.PKaJQSP^9FM5e(X
I#YkFH #Kc2fO\_Fv7QSc2fmY3PP/Q_eO\_FnY(
b  . GHY3IJKQSIOPoKaJ\_FKPVJJjnYlI#F][3KaJQ_NF\SQSJVF]b/K\SP]vjUT#Y3PVF2GHYbb/FPVfmY3I9M9QSI#[
F\_Fc2FI(JPYH
Z >¡Kab/FPT9KabFMe(X5K\S\dGHY3I9PJVb/KQSI(JP]v0KI9MjBFYeOJKQSIKa[3KQSIJTOKaJJT#FQSIOPVJKI9GHF2YZ ~ 
    Y3\SYb/KaeOQS\SQSJX 2QSPLJVb/Q_NuQSK\w
"T9F]bF]ZYb/Fv ( 
 KI9M . 
 uvKIOMlFKG/T5c2Y3I9Y3cQSK\QgPUPKaJQSP^9FMle{XlKaJh\SFKPVJUY3I#FfmY3PQ_JQ_NF
FH #Kc2fO\_F
QgP!JT{W9PF§(W9QSN8K\_FI(J-JVYK5} 	 jUQ_JTJT#FPKc2F%JjnYc2Y3I#Y3cQSK\gP]vKI9MjnFG]KI¢W9PVF
Kkf9bF]NuQ_Y3W9PPVY3\gW#JQ_Y3Ip s FKab/I9PF]JK\w_vRxy3¥JVYe`W9QS\SMKkN8K\gQSM~      Y3\_Yb/KaJQSY3I72 QSb/PVJ]vjnFG]KI
PW#fOfY3PFdJT9KaJ 2QSP Ka[3KQSIcY3I#YJVY3I#Y3W9PLp s FKab/I9P F]J K\w_v#xy3¥d"T#FI7vaPQSIOGHFRFKG/T-fmY3PQ_JQSNFdFH uKcfO\_F
PKaJQSP^9FP KaJd\_FKPVJ Y3I#F©c2Y3I#Y3cQSK\7p %   v3JT#FIZ:YbK\S\NaKab/QSKae`\_FvJT#F]bFnFH uQgPVJPKc2Y3I#Y3cQSK\(jUT9QgG/T
M#Y{FP"I#YJUGHY3I(JKQSIJT9F!GHYbbFPVfmY3I9MOQSI#[-fY3P/Q_JQ_NF\SQ_JVF]bK\w"T#F!~   Y3\_YbKaJQ_Y3IlQSP©JT9FI

 EUFG]K\S\RJTOKaJ GHY3I(JKQSI9P-J)jBYc2Y3I#Y3cQSK\SP]iuW9f9fmY3PVFJT9KaJ







"87 c(QSI  .j 0 
    m 0  "J9 4


m0x3(/~)(5464646(RGL> G 9 ( p    %


pw~a

 Y3WO\SMJT9QgP!emFQgINaK\SQSM  "T9KaJ-jBY3W9\gMc2FKI£JT9KaJ-JT#F]bF%FH uQgPVJPKiGHY3I9PJVb/KQSI(J !UPWOG/T¤JT9KaJ
 "m !  ( p  "#%  % !  ¨UT9QSPjnY3W9\SMc2FKI JT9KaJJT#FlGHYbb/FPVfmY3I9M9QSI#[I#F][3KaJQSNFlFH uKcfO\_F
PKaJQSP^9FP   vOK2GHY3I(JVb/KM9QgGHJQ_Y3I¤p s FKabI9P©F]JUK\w_vxy3¥L"T9QgPLFI9M9PLJT#FfObY(YZ YZ "T#F]YbFc {

kÚ36)N6)

" 5"Z> 

 ¯c

}hF]^OI#FJT9FoZ:W9IOGHJQ_Y3I





~

  '  ( 
0 (



% & P/W9G/TJTOKaJ

 02(x3(5464646(*!7¨x:9 ( 

- /

%

4 ; pVp'&)(	8(
(V"p 
 (	9 (
+   "

pw~ux

jUQSJT
np 
J(	9

% $  - - 
um  6



m0  / /  $ 


 m0
 --/


6  m
:BC>;

 / /  - -_p 
Rm 

6  m

 p 
 m0 
  

6  m0

  / /.4




>
>

(

>

(

>

(

>
(

>

.

>
4

>


(

>
>

.

>

.

>

4

>

4

.

>

.

>

4

>

4

>
>



>

(

>

>



 -

8?m
m

.

>
4

>


>

(

>
.

>
4

>


>

(

>


>

.

>
>


4



GHY(FG]QSFIJ"YZ 
; pVp'& 	( 8(
{V	QSI
+ /  - 
- / 
- /
  /
~
~
$  x
$  x
$  x
$  x
~J$  
J~ $  
$  x
$  x
~
~
~
$  $
x  $  
x  $  
$  x
$  x
~
$   $	 
~
~
x  $  
x  $  
~J$ 
~J$ 
x  $
x  $
x  $
x  $
~
~







 KaeO\_F/&  3Y PPQSeO\_FiGHY{FG]Q_FI(JPkYZ@;pVp'& (	8(
{V 
 FT9KNF^# uFM Z:YbPT#YbJ >
:x 9up  +v > . %  %v8> 4 %  v8>  % 	 %
(

% 02(x3(5464646(*!7

£[FI#F]b/K\SQ_]FPJT#FJT#bF]FFH {f9b/FPPQ_Y3I9PYZ  QSI5F§{W9KaJQ_Y3I9Ppw~3vLp 3vKI9M
KM#F§{W9KaJVFNaK\SW#FP©Z:YbR8	Yjv`jBF!GT#FGkJT9KaJ 5
 PKaJQSPV^9FP"JT#FPW#eOcY{M9WO\SKab©QSI#F§{W9K\SQ_J)X 
 -  + /   -  /  -  /   - /@(
	YJVFJT9KaJ



pD¥jUQ_JT
pw~~3

Z:YbK\S\LPW#eOPF]JP  
(  0 2( x3(5464646(*!1
7 x:39 ¢"T#F F]X¢QSPJVYFH #KcQSI#FkJT#FGHY{FG]Q_FI(J2YZ	FKGT
;-pVp'&)(	8(
{VvRZ:Yb!FKG/T¢PVF]J02(x3(5464646(*!	7tx:9up  +v  %v  v  JVYjUT9QSGT 
iYb G]KI
emF\_Y3I#[#d KaeO\_F/fObFPVFI(JP©JT#FPVF!GHY{FG]Q_FI(JP] F[F]J"Z:bY3c  KaeO\_F/ 

 -

+ /   - 	 / 7 p  -  /   - /: %
 ~@7 $  7 $    4 ; pVp'& (	8(
{V - -_p 
=m   6  m   5p 
um  6  m   / /	4
+   "
"TOQSPd\SKPVJn§(WOKIJQ_J)XQSP !ZYbLKI(X2fY3P/PQ_eO\_F©GT#Y3QSGHFhYZ d
 d"T9F]bF]ZYb/Fv(cQSIOQScQ_QSI9[ QSIKIX2YZ
Q_JP JT#bF]FLZ:Yb/cP YZOF§`"pw~3v`p 3vKI9MpD¥0emY3QS\SP0M#Yj	IJVYcQSI9QScQSQSI#[ Y3IJT9FLP/W#eOc2YuM9W9\SKab PVXuPVJVFc
p 02(x3(5464646(*! 7 x:9 ( op:jUQSJTJT#F!KM#F§{W9KaJVFNaK\SW#FP"YZ  L"T9QSPLf9b/YeO\_Fc KM9cQSJP©fmY3\_X{I9Y3cQSK\ DJQScF
PVY3\_NuQSI#[-K\_[Yb/Q_JTOcPhp  bY JPG/T9F\wv  YNK PVv r uGT#b/Q VNF]bv`xyuxaz W#F]X{b/KI9I#Fvmxyy3¡T9KaJ©QSPncW9GT
QSI(JVF]bFPVJQSI9[QSPJT9KaJdJT9FUK\_[Yb/Q_JTOcP {I9YjUIKab/FUT9Q_[3T9\SXGHY3c2fO\gQSG]KaJVFMKI9M2JQgc2F"GHY3I9PW9cQSI#[ZYbBJT#F
[FI#F]b/K\ncQSIOQScQ_KaJQ_Y3I5YZ  poW#F]X(bKI9I#FvLxyy3 "	YjnF]NF]bvjUT#FI¤W9PQSI#[JT9FNaK\SW#FYZ ¡
 KP-QSI
F§`!p +("KI9M  KPhQSIF§`pD¥v`JT9FGHYbbFPfY3IOM9QSI#[2Z.W9I9GHJQ_Y3I 5emFGHY3c2FPhPW#eOc2YuM9W9\gKab"PVX{cc2F]JVb/QSG
p  -  / %  -M02(x3(5464646(*!"7 x:9  /:  P2P/W9G/T7vBc2YbFkFG]Q_FI(Jlp.KI9MPQSc2f`\_F]boK\S[Yb/Q_JT9cP-FH #QSPVJ-JVY
cQSIOQScQ_]F  #YbnFH uKc2f`\_FvJT#F]b/FUFH #QSPVJPRK!fmYjnF]bZ:WO\9GHY3c!e`QSI9KaJVYb/QSK\OK\_[Yb/Q_JT9c jBYb
{QSI9[QSI k
 p'!  




pW#F]X{b/KI9I9Fvxyy3 	YJVF!JT9KaJ©JTOQSP"QSP©PVJQg\S\mK2NF]bX\SKab[FGHY3c2f`\_FH uQSJX
:BC

O



££½£iwc©

	
ª£

" 5"Z> 

kÚ36) .?6" 7r * )

 ¯c

"T#FRbFM9W9GHJQ_Y3IQSPcKM9FRZ:bY3c JT#F?  "	Kab/Mf9bYe`\_Fc 3  p.#FQ_[Fv9xyy|3d"TOQSPQSPJT#FBG]\SKP/PQSG]K\
3   f9bYeO\SFc p  KabF]X r  Y3TOI9PVY3I7vLxy3¥ay3vdeOW#JFKG/T£NaKab/QSKaeO\_FKaf9fmFKab/P!QSIFH uKGHJ\SX lG]\SKWOPVFP]
hPQSI#[!K!jBF\g\  {I9YjUIbFM9W9GHJQ_Y3Ip  KabF]X r  Y3TOI9PVY3I7vOxy3¥ay3v#f`Ka[F {vujUQ_JTKIKM9MOQ_JQ_Y3I9K\9P/QSc2fO\_F
[3KM#[F]J]vjnF5G]KItcK FK¤b/FM9W9GHJQ_Y3IZ:bY3c 3  £JVY¢NF]bJVFH tGHYNF]b£p:JT{W9P]vhQSI9M#F]fmFI9M9FIJ%PVF]Jv
Ye9JKQSIOQSI#[	Kh[b/Kaf`
T QgI!jUTOQSG/T-K\S\{NF]bJQSGHFPT9KNF"M#F][bF]FLFQ_JT#F]b {vYbduv3KI9M-Z:YbjUT9QSGT!JT9FL\gKab[FPVJ
QSI9M9F]fFIOM#FIJdPF]Jhp:Z:YbnPKaJQgPV^OKaeO\_F	QSI9PVJKI9GHFPRY%
Z 3  
 3RT9KPRP/Q_]1
F G3 G a~{v{jUT#F]bC
F G3#G3QSPdJT#FhI(WOc!emF]b
YZNF]b/JQSGHFP©Y
Z d#bY3c JT9QgPBf`KabJQSG]W9\SKabn[b/KafOTv{jnFeOW9QS\gMK2PQScfO\_F"bFMOW9GHJQ_Y3I%JVY2Y3W#bLf9bYeO\SFc YZ
cK8 #QScQ_QgI#[  	YJVFRJT9KaJ PQSI9GHFdjnFBKab/FRPVFKab/GT9QSI#[	ZYb KIYeO\SQSN{Q_Y3WOP7TX{fmYJT#FPQSP]vJT#FdYeOPF]bN8KaJQSY3I9P
KabFI#YJ	Qgc2fmYbJKIJ-p:jBFG]KI5PW#f9fmY3PVFoJT9KaJK\S\FH uKc2f`\_FP	TOKNF-JT#FPKcFYeOPF]bN8KaJQSY3I`U"T9KaJhQSP
jUT(XJT#FBb/FM9W9GHJQ_Y3IoY3IO\_XeOW9QS\SMOP7G]\SKPP0NFGHJVYb/P©p:YNF]
b G3 GG]\SKP/PVFPvaFI9GHYuM9QSI#["JT9FBG]\SKPP0c2FceF]bPT9Q_f
YZ`KI(X-YZOJT#FPVF©QSM9FIJQSG]K\{YeOPF]bN8KaJQSY3I9P] "T#F©QSM#FKhQSP JT9KaJJT#F©G]\SKPPFPKabF"QSIY3I#F DJVY DY3I#F	cKaf9fOQSI#[
jUQ_JTkJT9FNF]bJQSGHFP]v`KI9MJT#F]bFKab/FJjnYPVF]JPUYZ G]\gKPP©NFGHJVYb/P	eOW9QS\SJBZ:bY3
c 	
T G3#GNFGHJVYb/P]v{FI9GHYuM9QSI#[oJT#F	NF]bJQSGHFPRYZ  RKG/TY3I#FUQgPdK!G]\SKP/PNFGHJVYbLjUQ_JT2Y3I9\SX
 KPVF]JdjUQSJ
Y3I9F ]x GHYbb/FPVfmY3I9M9QSI#[!JVY-JT9F	NF]bJVFH mv9KI9M%JT#FhbFcKQSIOQSI#[!GHY3c2fmY3I#FI(JPLKabF]F]bY{FP] RKGT
YZ JT#FGHYb/bFPVfmY3I9M9QSI9[-FH #Kc2fO\SFP"T9KNF!jBFQ_[3T(
J 0  

 KkPVF]JjUQSJTG  GONFGHJVYb/PvjUT#F]bF G  GOQSPhJT#FI(WOc!emF]bhYZdFM#[FPYZ- B KG/TY3I#FFI9GHYuM#FPKI

FM9[Fv9KI9MJT9F]bF]ZYb/FhGHY3I(JKQSI9PnJjnY ]xlp.KI9MJT#F	b/FcKQSI9QSI9[!KabF]F]bY{FPdGHYb/bFPVfmY3I9M9QSI9[JVY
JT9FJjnYNF]bJQgGHFP"YZ JT#FFM#[F
 BKG/TYZ JT9FGHYbbFPVfmY3I9M9QgI#[FH uKc2f`\_FP©T9KNFjBFQS[3TJ0  
 Y3IOPQSM#F]bhZYbcW9\gKPpw~3vBp 3	ZYboFH #Kc2fO\SF"T#F]XiKabF2JT#F2PW9c YZRJT9FGHY3IJVb/QSeOW#JQ_Y3IiJVY YZ
JT#FFH #Kc2fO\SFPT9KNuQSI#[jBFQ_[3T(J 0  v0KI9MJT#FFH #Kc2fO\_FPTOKNuQSI#[jnFQ_[3TJ 0  IJT#FPVFG]KPVFPv0jnF
G]KIlb/F]j"b/Q_JVF  W9PQSI9[-JT9F[FI#F]b/QSGFH uf9bFP/PQ_Y39I 

 %    (
pw~ 3
  % 0   $   7p*G3 G:7 9  7p 7¨x  p*G3 G37 9Hp*G3 G37 17 x  $  7p*G3 G:7 9  (Lpw~+(
  % 0   $   p*G3 G:7 9Hpw~     $  7pw~ 	   4
pw~3
"	F]bFv  QSPdJT#FI{W9c!emF]bBYZFM#[FPLT9KNuQSI#[JT#FQ_bBJjnY-NF]b/JQSGHFPLQSIJT#FPVF]JLGHYbbFPVfmY3I9MOQSI#[JVY-JT#F

 x©NaK\SW#FPRQSI    v SQ PJT#FUI{W9cemF]bdYZmFM#[FPRT9KN{QgI#[JT#FQ_bRJjnY!NF]bJQSGHFPnQSIJT#F	PVF]JBGHYbb/FPVfmY3I9M9QSI#[
JVYJT#FC
7 xNaK\SW#FP©QgI    v9KI9M  QSPLJT#FI{W9c!emF]bLYZ FM#[FPUT9KN{QgI#[Y3I#FoYZ0JT9FQ_b©NF]bJQSGHFP"QgIkJT#F  x
PVF]J]vOKIOMJT#FYJT#F]bUY3I#F!QSIkJT#F!
7 xPVF]J] QgPLJT#F!I{W9c!emF]b©YZ  xoNaK\SW#FP©QSI    
uW9f9fmY3PVF	JTOKaJ0 
 0  p214351 0  
 G3#G 4 0  R"T#FIkJT9FcK8 uQgcQ_KaJQ_Y3IkYZ	 QSPLJT#FcK8 #Q 
cQ_KaJQSY3IYZ   v`ZY3\S\SYjnFMe(XkJT#FcK8 uQgcQ_KaJQ_Y3IYZ      KMOcQ_JP"KcK8 uQSc-W9c Z:Yb #%G3 G a~{v

KI9M¢jUQSJT¤JTOQSP-N8K\SW9F%Z:Yb vBQSJG]KI¨eFkPT#YjUI¢JT9KaJcK8 #QScQSQSI#[
  emY3QS\SP-M#YjUI¢JVYcK8 #QScQ_]F
~
 vhJT9KaJlQSP]v	JT#F p:jBFQS[3TJVFM`%I{W9cemF]b%YZ-FM#[FPI#YJZ.K\S\SQgI#[FI(JQ_bF\_XQSI(JVY£JT9F5PF]JlGHYb 
bFPVfmY3I9MOQSI#[JVYJT#F  xkNaK\SW#FP]zLjUT9FI#F]NF]bJT#F 3  5QSI9PVJKIOGHFlQSP2PKaJQSPV^`KaeO\_Fp.KI9M¨W9P/QSI#[5JT#F
fOKabJQgG]W9\SKabLM#F][bF]FPLYZJT9F	NF]bJQgGHFPv9JT9QSPnPVF]J©GHYbbFPfY3IOM9PRJVY2JT9Fh\SKab/[FPVJ©QSI9M#F]fmFI9M#FI(JRPVF]J©Y
Z -

kÚ36)N6)bB^"Z> >





 T#F	f9bY{YZ7YZ7JT9QSPn\_FccKQSPn§(W9QSJVF	PVJVb/KQS[3TJVZ:YbjLKab/M7v{eOW#JdjnF	[3QSNFhQ_JnZ:YbnGHY3c2f`\_F]JVFI#FPP] t
"
 G]KIemF
bF]j"bQ_JVJVFIKP

 %

4
" &

$

:BC



 "  (

pw~|3



jUQSJT

0    , "  1 0    , "  1
% 0 8 (  "   % !7¨" x $ 
(
pw~3¥
  !7 x $ 
jUT9F]bF p 
J(	9%   - 
/?7   -/D uW9f9fmY3PVFZ:YblGHY3IJVbKM9QSGHJQ_Y3I¡JT9KaJkZ:YblPVY3c2F 
  v %
lp 
 (	9 
 u FPQgc2fO\_XfmF]b/c-W#JVFJT#F2JjnYlNaK\SW#FP   - 
/BKIOM   -/Dv0KIOM5jBFPT9Yj JT9KaJoJT9FI#F]j
NaK\SW#F!YZ  KaZJVF]bv   vQSP	I#YJh[bFKaJVF]bJT9KI  eF]Z:YbFfF]bcW#JQgI#[#v  @ 	UT#F!M9Q *mF]bFI9GHFemF]JjnF]FI
  KIOM @ G]KIemFLFKPQS\_XM#FGHY3c2fmY3PVFM2W9P/QSI#[JT#FUI#YJKaJQSY3I ,   " 1 @ p'*( 
um/0 2( x3(5464646(*! l
7 x:9 (O5% 0 
{
KPhJT#F-N8K\SW9F!YZ    k
" p:F§`pw~3¥VhQSI
 @ vmKIOM
 ,   " 1  p'*( 
=m 0 2( x3(5464646(*!.7 x:9 (O % 0 
{	KP	JT9F!NaK\SW#F
YZ    
" p:F§`	pw~3¥VUQSI    F-K\SPVYM#F]^OI9F
( 
 	(  m/0 2( x3(5464646(*! ¨
7 x:9 (O % 0 
 % 0 8(  ,   "  1  %  ,   1     ,    1     , "  1     ,   " 1   4 pw~3
 *
F-M#F]^OI#FoQSIkJT#FPKc2FjLKX  ,   "  1 @  F!YeOJKQSI
  7  @ %   , "  1  7  , "  1 @ 
  4 '   , "     1  7  , "     1 @ 
 4
pw~y3
 (  7& "  d
RbYNuQSI#[2JT9KaJ   7  @  2G]KIemFoYe9JKQSI#FMlKP"ZY3\S\SYjUP]d Q_bPVJ]v
0   7 0 "  
 $  
 , "  1  7  , "  1 @ %
 xH7 $ 
  E4
!A¨
7 x
F-K\SPVYT9KNF  
m0 x3/( ~)(5464646(*! 9 0 
 	(  69 
~ 0 
" $ 
: 7 ~ 0 "  $   : 7 ~ 0   $   
 , "     1  7  , "     1 @ % ~!A0 ¨
$
  



7 x
!A¨
7 x
!A¨
7 x
!
7 x
~0   7 0 "  

%
,$   : 7 $    

!7x
~0   7 0 "  
 $   :
%
8x 7 $ 
  E4
!¨
7 x
"	F]bFUjnF	TOKNFW9PVFUJT9F"Z:KGHJnJT9KaJ    %
  "  k"T9QSPP/T#YjUPBJT9KaJ   7  @  uvuKI9MFI9M9P





JT#FfObY(YZ0YZ  FccKxa

kÚ36)N6)

" 5"Z> 

 ¯c

0YhKNY3QSMGHY3I9Z:W9P/Q_Y3I7v8jBFLG]K\S\   JT#FnNaK\SW#FdYZ GHY3c2fOW#JVFMYNF]b JT#FnJVb/KI9PVZ:Yb/c2FMPVF]J YZ#FH uKc2f`\_FP]v
KI9M  p  ©Z:Yb  m0 (   9KI9M 
 m0    (   9KPhJT#FNaK\SW#FYZRGHb/Q_JVF]bQ_Y3I  WOPQSI#[NFGHJVYb/ h)JQSP
PQScfO\_FhJVYYe9JKQSIlK VP(W G]Q_FI(J 2emY3W9I9M%JVYGT#FGJT9FJT#F]YbFcF!T9KNF

-p   %   p   7
  p    % - p    

4

>  3
LG > G 
 x
4

>  3
GL> G 
 x

0 4  4 $  =    4 $    =  "  "$ (
GL>HG  734   "734   

p a

0 4  4 $  	=     4 $   =  "  "$ 4
 "87 4
  
GL> G  734 


p ux

:BC C


"	F]bFv0 l
4 QSP"JT#FPWOc

££½£iwc©

	
ª£

YZjBFQS[3TJP	YZ JT#F!FH #Kc2fO\_FP	QSIJT#F!Yb/Q_[3QSI9K\PVF]J]v`j	T#Y3PVFNFGHJVYb/PT9KNF
 wp      .p   v`PQSIOGHFoY3W#bUK\_[Yb/QSJT9c QSP©YfOJQScK\wv

]xcKaJG/T9QSI9[JT#FF\_FcFIJPUYZ<>L 	YJVF!JT9KaJ

KI9MjnFYe9JKQgI

-p  


-p    

4

>  3
GL> G 
 x

0 4  4
GL> G



 734

$   =    

 "87 4 
4 



$     =   "  7 $   =   

 "734 4


$    =  " 





"$ 4

qnXkJK{QgI#[2Y3I9\_X%JT#FofmY3PQ_JQ_NFof`KabJ©YZ0JT9Fb/Q_[3T(J T9KI9MPQgM#Fv9KI9MkbFcKab
{QSI9[2JT9KaJ



>  3 (RGL> G 
 3x (  bm >nv&6 "734
   $    =   "   $* ' 4    4 (  
 6 " 7 ? +4 $    =   "  :p JT#Fb/QS[3TJhPW9c
QgPUp'!7 GL> G  $   K I9MJT#F\_F]ZJ©Y3I9FQSP  *p GL> JG 7¨x 5 $av
"

 JT9F!GHY(FG]Q_FIJUYZ*04QSI   QSP 54% 6  734 $  	=   6 "7 ? +4 $   	=   v




jnF[F]J

-p  

-p    

$ GL> *p GGL>p'! G37 7¨GLx>  G  0 4 4

4



>  3
LG > G 
 x
-p     $ 7p p'C!7 7 x9 







-p   

Ox 

	

!7


$

4



>  3
GL>HG 
 x




04 54


(

KP	G]\SKQSc2FM7

kÚ36)N6)bB^"Z> > %
 n

emFGHY3c2FP"QSIJTOKaJUG]KPVF




jUT9F]bF %   - x /

 % 0  $   0  $  (
p ~3
7   - /DB"T#F]bFKabFo^9NFoM9Q *mF]bFI(JLN8K\SW9FPBZ:Ybkv#[3Q_NuQSI#[-b/QSPF	JVYI9QgI#F	M9Q#*F]bFI(J

%
%
%
%
%

, 
 x , 
 , 
7 x , 

7 ~ , 
U
 ~

% p 7x3(  x
% p
7 x3(  
% p
7 x3( 
7 x
% p.2( 
7 x 
% p  x3( 
7 x

(

 %
 
 %
4
:BC


p.2(  x (
% p.2(   % p  3x (  x (
p  3x ( (



 Q 
% 5jUT#F]bF  m 0 7U~)( 7x3(2(x3(/~ 93  m 07x3(2(x3(/~ 93vJT9FN8K\gW#F % 5
 PT#Y3W9\SM5emF
f9bF]Z:F]bbFMkJVYJT#FNaK\SW#F % 17 xQ *iJT9F!GHYbbFPVfmY3I9MOQSI#[QgP©PcK\S\_F]bv#JT9KaJUQSP 

0   $    0   $   
EUFKabb/KI#[3QSI9[2JVF]b/cP©[3Q_NFP0   0   (&


   ä O > æ 

0   $   &   0   $  &  4



p  3 

R"TOQSP©\_FKM9PLJVYJT9Fb/W9\_FYZ JT#F\_FccKu

â

qLKW#F]bv"_v rs Y3T9KNuQwvaEup+xyyy3  IFc2fOQSb/QSG]K\GHY3cfOKab/QSPVY3IYZ9NYJQSI9[hG]\SKP/PQ_^OG]KaJQ_Y3I-K\_[Yb/QSJT9cP
qLKa[[3QSI9[#vOemY(Y3PJQSI#[#v#KI9MNaKab/QSKI(JP] 8 "5 I J  "  2J  3v > vx]6`xy{
qL\SK Fv    _v s F]Y[3T7v "_v r  F]bv  p+xyy3    bF]fmY3PQ_JVYb/X-YZcKG/T9QSI9F	\_FKab/IOQSI#[M9KaJKaeOKPFP]_
  	
   	 "!
$#"%	& $ '  (  $ #
qnbFQScKIv  p+xyy|3LqnKa[[3QgI#[f9b/FM9QSGHJVYb/P] 8 "6 I J 
 0 "  2J 3v <) vx~ `x +3u
qnbFQScKIv  _vR#b/FQSM9cKI7v  
 "_vn\SPT9FI7vE  _v r {JVY3I9Fv    Up+xy +( Q !#"%<%KJ a 
"  J 	 "	 V
*U 3 %<%KJ 	 t V %  KM9PVjnYbJT7
qLW Kuv  _v r  F]F"v + pw~a#xd}hKaJK2cQSI9QSI#[-GHb/Q_JVF]b/QgK!Z:YbLJVbF]F DeOKPVFMkbF][b/FPPQ_Y3IkKI9MkG]\SKPP/Q_^OG]K 
JQSY3I7oI ,© 2 /j V J  3 %-[N  I  @  p  H  "  J 	 "!bQ dN ]V   	/.  fX ! W V23{ PJ %  a] J

P	" ""%  % v`f9fO~30¥ 5|{
qLW9I(JQSI#Fv  _v r hQ_eO\_F]JVJ]vo`p+xyy~3  Z.W#bJT#F]bdGHY3c2f`Kab/QSPVY3IYZmPVfO\SQSJVJQSI#[hb/W9\_FP Z:YbR}hFG]QSPQ_Y3I ©bF]F
QgI9M9W9GHJQ_Y3I 8 "6 I J  1
 0 "  2J 33
v 2v¥ { {
 \SKa
b `v 0_v r qBY3PjBF\S\Dv`Ep+xyyuxoEUW9\SF!QSI9M9WOGHJQ_Y3IjUQ_JT  &
~ PVY3cFbFGHFI(JoQSc2f9b/YNFc2FI(JP]U+I
,© > /j V J 3 % [N  I   54 $   
# "	 G   EJ  376 %<%KJ 	J   "  2J  3vOfOf72x `x|uxa
 Y3T#FIv    _v r uQSI#[F]b
v +Rp+xyyy3  uQSc2f`\_Fv`9KPJ!KI9M  *mFGHJQ_NFE	W9\_F  FKabI#F]b-8
I ,©  _
/j V J  3 % [N  I :
 9    "  J 	 "! Q	4N ]V    <; 
  J a J "! p   ! !wJ 3(  ]v#f9f  5+~{
M#F  Kab/N8K\ST9Y  Y3c2FP]vOn  _v r  KPG]W#F\Dv-p+xyy +(L#}  v9K2PVJVYuG/T9KPVJQgGK\_[Yb/Q_JTOc ZYbU\SFKab/I9QSI#[
M9FG]QSPQ_Y3I\SQgPVJPhjUQ_JT\SQScQ_JVFM5GHY3c2fO\_FH #Q_JX ;   "! %[N 8 "  I  T "  J % "	 V ;   J a J "! p   ! !\J _
3{  H=
v 9>8v`~u?x 5a3~{
}Q_F]JVJVF]b/QSGT7v0  npw~a  IFH {fmF]b/QScFIJK\dGHY3cfOKab/QSPVY3IYZLJT#bF]FcF]JT#Y{MOPoZYb-GHY3I9PVJVb/WOGHJQSI#[
FIOPVFc!e`\_FP YZ`M#FG]QSP/Q_Y3IJVbF]F2P 3qnKa[[3QgI#[#vaeY{Y3PVJQSI9[#v8KI9Mb/KI9M9Y3cQ_KaJQ_Y3I7 8 "5 I J @
  "  2J 33v
>) 8v0x y `2x 3¥(
}hY3cQSI#[Y3Pv 0Rp+xyy3  RbY{GHFP/P DYb/Q_FI(JVFM "UFW9b/QSPVJQSG-Z:Yb  YuM#F\PVF\SFGHJQ_Y3I7-8
I ,© 2 /j V J  3 % [N
I :
 9	A  p  H  "  J 	 "!cQ	dN H   	 8 "6 I J 
  "  6J  33v9f9fx~30¥ `x {
#FQ_[Fv Lp+xyy|3  JT#bFPT9Y3\SMYZ"\SI -¨ZYbKaf9f9b/Y #QScKaJQSI#[iPVF]J-GHYNF]b+B
I ,© > /j V J 3 % [N  I 
2<  ;:Q 8 69 T 
 %eJ $ZT 	  I  t I    [NRQ T 
 $  J 33v9f9f ux +C5ux{
#b/KIOG v U_v r ¡Q_JVJVFI7v(p+xyy3 hPQSI#["K dF]b/c-W#JKaJQ_Y3I©FPVJZ:Yb  JVJVb/QSeOW#JVFdPVF\_FGHJQSY3I!QSI}hFG]QSP/Q_Y3I
"bF]FP]m7
I ,L 2 W V J 3 % [N  I 
 9	A  p  ]  "  J 	 "!AQ	dN H   	 8 "5 I J 
 0 "  2J 3v{f9f
2x ~ `x|au
#bFWOI9M7D
v +-_v r  KPY3I7v  p+xyyy3 "T9FK\_JVF]bI9KaJQSI#[¢M#FG]QSPQSY3I JVbF]F\_FKabI9QSI#[£K\_[Yb/Q_JT9cl +I
,© > /j V J 3 % [N  I E
 9   p  ]  "  J 	 "!^Q	dN H   	 8 "6 I J F
  "  2J 33v{fOfx~ +C`x  {
:BC>=



££½£iwc©

	
ª£

#b/QSFM9cKI7v  _v "hKPVJQ_Fvao_v r "QSeOPT9Q_bKI9QwvHE{pw~a  M9M9QSJQ_NF  Y[3QgPVJQSGREUF][bFPPQSY3I 8K{JKaJQgPVJQSG]K\
Q_F]j YZqnY{Y3PVJQSI#[# ;+ "! % [N 6 "  J %  J % v < 23v' 3¥053¥ +#
 KabF]Xv  _v r  Y3T9I9PVY3I7v}-Lp+xy3¥ay3 Q T 
 $ ] %)"	 Vp  . "6  "rJ !wJ . ]," 3 $ZJ V   I  I    [N
 ,v_ QfT 
 !     %<% RqnF\S\0F\_F]fOT9Y3I#F  KaemYb/KaJVYb/QSFP]
 b Y JP/G/T#F\wv  _v  Y
N K PVv  _v r uG/T9b/Q VNF]bv  up+xyux`"T#FnF\S\SQ_fOPY3QSMoc2F]JT#YuMKI9MQSJP0GHY3I9PF§(W#FIOGHFP
QgIGHY3c!eOQgI9KaJVYb/QSK\7YfOJQScQ_KaJQ_Y3I Q T  J  "    J<" v 9avx|y `xy3¥(
"	Y3\_JVFvBE!	p+xyy 3 F]bX¨PQScfO\_FG]\SKPPQS^OG]KaJQ_Y3Ib/WO\_FP2fmF]bZ:Yb/c jnF\S\©Y3I cY3PVJGHY3cc2Y3IO\_XW9PVFM
MOKaJKPVF]JP] 8 "6 I J  
 0 "  2J 33
v 9	9av| {yuxa
"	X3Ka^O\wv  _v r EUQSNFPVJ]v#Ep+xy3¥a|3  Y3I9PJVb/W9GHJQSI#[-Yf9JQScK\M9FG]QSPQ_Y3I%JVbF]FP©QS.
P   GHY3c2f`\_F]JVF^
 p dN8 K _

©
,


3






H


v

a
A

v
x
2


`


x
(
¥

T " J 	 2 %<%KJ
%
 Y3TOI7v  	
s
r
 "_v Y3TOKNuQwvOE_v  'OF][F]bv s p+xyy +(©bbF\SF]N8KI(J"Z:FKaJW#bFPUKIOMlJT#F!P/W#eOPVF]J"PVF\SFGHJQ_Y3I
fObYeO\_FcRI ,© > /j V J 3 % [N  I :
 9	9  p  ]  "  J 	 "!vQ dN ]V   	 8 "6 I J 1
  "  2J 33v
fOfx~u?x `x~y{
s FKab/IOP]v    _v r  KI9PVY3W#b
v +Up+xyy3   KPVJ]vRqnYJVJVY3c W#f}hFG]QSPQ_Y3I¨"bF]F db/W9IOQSI#[5K\_[Y 
bQ_JT9c jUQSJT UFKab f9JQScK\©[FI9F]b/K\SQ_KaJQ_Y3I +I ,L 2 /W V J  3 %/[N  I  9	A  p  ]  "  J   "!
Q dN ]V   	 8 "6 I J   0 "  2J 3v`f9fO~|y {~3¥¥(
s FKab/IOP]v  _v  Qwv  _v BQ_JVJ]v  _v r dK\SQSKI(J]v  up+xy3¥OI!JT9FB\_FKab/IOKaeOQS\SQ_J)XUYZ#emY{Y3\_FKIZ:Yb/c-W9\SKaF+I
,© > /j V J 3 % ON  I  9   ;Q 8 69 T 
 %eJ $ZT 	  I  t I    ONRQfT 
 $  J  3v9f9f#~ {~y {
s Y3T9KN{QDvL}-_v r {Y3cc2F]b^9F\SMvn}-!p+xyy3 0Kab/[F]JVJQSI#[¨qLW9PQSI9FPPkW9PVF]b/P%jUQ_JT¡}hFG]QSPQSY3It"KaeO\_F
 \SKPPQ_^OF]b/P]a:
I ,L 2 W V J 3 % ON  I  ) p  ]  "  J 	 "!#Q	dN H     .  fX ! W V23{ PJ %  a]
J P	"  ""%  % vOf9f#~ +y {~  {
 KI9PVY3W#bv +_v r  G  \S\_FPVJVF]bvu}-pw~adqBY{Y3PVJQSI9[WOPQSI#[e9b/KI9GT9QSI#[f9bY[b/KcP+5
I ,© > /j V J 3 %
ON  I  9 > %p  H  "  J 	 "!Q dN ]V   	qQfT 
 $  "  J 	 "!  "  2J 3 t I   av f9f ~~a 
~~ +#
 Kab[3QSI#FKI(JW7v#}-_v r }Q_F]JVJVF]b/QgG/T7v#o  p+xyy3¥ db/WOI9QSI#[!KMOKaf9JQ_NFemY(Y3PVJQgI#[#+5
I ,© > /j V J 3 % [N
I :
 9 )  p  H  "  J 	 "!cQ	dN H   	 8 "6 I J 
  "  6J  33v9f9fO~ux?x {~ux{
 Q_JG/T#F\g\wv9op+xyy3¥ 8 "6 I J  
  "  2J 33  G  b/Kj  "hQS\S\D
	Y{
G `vaE_v r  KP/G]W#F\wva{p+xy
y 3OI!\SFKab/I9QSI#["M9FG]QSPQ_Y3IGHY3ccQ_JVJVF]FP]{:
I ,L 2 W V J 3 % ON  I  9 < 
p  H  "  J 	 "!cQ	dN H   	 8 "5 I J 1
  "  6J  33vOf9f( +9x 5+~au  Yb[3KI s KW#Z.cKI9I7
	Y{
G `vE!_v r  Kaf9f{Xv  Rp+xyy3I5JT#F2fmYjnF]boYZLM#FG]QSPQ_Y3I5\SQgPVJP]+8
I ,L 2 W V J 3 % [N  I 7
 9	A 
p  H  "  J 	 "!cQ	dN H   	 8 "5 I J 1
  "  6J  33vOf9f( +9x 5+~au  Yb[3KI s KW#Z.cKI9I7
hfOQSJVv9}_v r  KG]\gQSI7v9Ep+xyyy3  YfOW9\SKabUFI9PVFceO\_Fc2F]JT#YuM9P 9K2P/W#bNF]X
  $   "! [N1; 
  J a dJ"!
p   ! !wJ 3(  
 *" %  "  I v 9	9avx|y `xy{
W#F]X{b/KI9I9Fv  np+xyy3  QgI9QScQ_QgI#[PVX{cc2F]JVb/QSG2PW9eOc2YuM9W9\SKabZ.W9I9GHJQ_Y3I9P 8 "  I  T "  J 
"! ,©  _
33 " T TgJ 33
v 2 < v `x~{
W9QgI9\SKI7v  9E!p+xyy +( Q) 1 A ! 
`  3 "fT	%vNA  T "6 I J  !  "  2J 3  Yb/[3KI s KW#Z.cKI9I
W9QgI9\SKI7v   ELp+xyy|3qLKa[[3QSI#[#v qnY(Y3PJQSI#[iKIOM  +# {l+B
I ,© > /j V J 3 % [N  I 5
 9 >   "  J 	 "!
]

V







p



(
3

]

#
v
9
f

f
`

a
¥
~



u

¥
3
a

u


Q dN  	 ; J a dJ"!  ! !wJ 

:BC%$



EUQgM#[F]jnKXv  _v  KM9Q_[3KI7v }-_v E	QSG/T9KabM9PVY3I7v_v r   s KI#Fv  np+xyy3I(JVF]bf9b/F]JKaeO\_FemY{Y3PVJVFM
IOKQ_NF¤e`KXFP5G]\SKPPQS^OG]KaJQ_Y3I7 +I ,L 2 WV J 3 % [N  I  )  p  H  "  J 	 "! Q	4N ]V    
.  fX ! j V23( PUJ %  a] J  P	"  "
"%  % vOfOfx]#x?`x]+#
EUQSNFPVJ]vOEp+xy3¥  FKabI9QSI#[M#FG]QgPQ_Y3I\SQSPJP] 8 "6 I J   0 "  2J 3v < v`~~y{~+|{
uGT9KafOQ_bFv E "_v #bFW9IOM7v +_v qLKabJ\SF]JVJ]v  _v r  F]Fv  dnp+xyy3qnY{Y3PVJQSI#[JT#F  Kab/[3QSI  K
I9F]j FH ufO\SKI9KaJQ_Y3I ZYb%JT#FlF *mFGHJQ_NFI#FP/PYZ hYJQSI#[£c2F]JT#YuM9P] ;+  "! %/ON)%  "  J %  J % v <" v
x| u?x `x||{
uGT9KafOQ_bFv#E!! U_v r uQSI#[F]bv +p+xyy3R+c2f9bYNFMkemY(Y3PVJQgI#[-K\S[Yb/Q_JT9cPLW9P/QSI#[GHY3I#^OM#FI9GHF DbKaJVFM
fObFM9QSGHJQ_Y3IOP]8
I ,© 2 /j V J  3 % [N  I 7
 9	9 -p  ]  "  J   "! Q dN ]V     Q T 
 $  "  J 	 "!
0 "  2J 3 t I   8v`f9fOa {yuxa
dK\SQSKI(J]v     p+xy +(  JT#F]Yb/XYZdJT#F\SFKab/I9KaeO\_F QfTgT	$ 2J 
"  J 	 % [N  I  ;:Q 8 v <@ vxx +C
xx +~{
dK\SQSKI(J]v    Up+xy 3  FKab/I9QgI#[M9QSP W9I9GHJQ_Y3IOPYZGHY3I VWOI9GHJQ_Y3I9P]¤I ,© > /j V J 3 % [N  I   
p  H  "  J 	 "!   J   Q	dN H   	 ;   J a J "! p   ! !\J 3{  Hv9fOf |a &||{

:

5Q


Journal of Artificial Intelligence Research 17 (2002) 333-361

Submitted 2/2002; published 11/2002

A New Technique for Combining Multiple Classifiers using
The Dempster-Shafer Theory of Evidence
Ahmed Al-Ani
Mohamed Deriche

a.alani@qut.edu.au
m.deriche@qut.edu.au

Signal Processing Research Centre
Queensland University of Technology
GPO Box 2434, Brisbane, Q 4001, Australia

Abstract
This paper presents a new classifier combination technique based on the DempsterShafer theory of evidence. The Dempster-Shafer theory of evidence is a powerful method
for combining measures of evidence from different classifiers. However, since each of the
available methods that estimates the evidence of classifiers has its own limitations, we
propose here a new implementation which adapts to training data so that the overall mean
square error is minimized. The proposed technique is shown to outperform most available
classifier combination methods when tested on three different classification problems.

1. Introduction
In the field of pattern recognition, the main objective is to achieve the highest possible classification accuracy. To attain this objective, researchers, throughout the past few decades,
have developed numerous systems working with different features depending upon the application of interest. These features are extracted from data and can be of different types
like continuous variables, binary values, etc. As such, a classification algorithm used with a
specific set of features may not be appropriate with a different set of features. In addition,
classification algorithms are different in their theories, and hence achieve different degrees
of success for different applications. Even though, a specific feature set used with a specific
classifier might achieve better results than those obtained using another feature set and/or
classification scheme, we can not conclude that this set and this classification scheme achieve
the best possible classification results (Kittler, Hatef, Duin, & Matas, 1998). As different
classifiers may offer complementary information about the patterns to be classified, combining classifiers, in an efficient way, can achieve better classification results than any single
classifier (even the best one).
As explained by Xu et al. (1992), the problem of combining multiple classifiers consists
of two parts. The first part, closely dependent on specific applications, includes the problems
of “How many and what type of classifiers should be used for a specific application?, and
for each classifier what type of features should we use?”, as well as other problems that are
related to the construction of those individual and complementary classifiers. The second
part, which is common to various applications, includes the problems related to the question
“How to combine the results from different existing classifiers so that a better result can be
obtained?”. In our work, we will be concentrating on problems related to the second issue.

c
2002
AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Al-Ani & Deriche

The output information from various classification algorithms can be categorized into
three levels: the abstract, the rank, and the measurement levels. In the abstract level,
a classifier only outputs a unique label, as in the case of syntactic classifiers. For the
rank level, a classifier ranks all labels or a subset of the labels in a queue with the label
at the top being the first choice. This type was discussed by Ho et al. (1994). For the
measurement level, a classifier attributes to each class a measurement value that reflects the
degree of confidence that a specific input belongs to a given class. Among the three levels,
the measurement level contains the highest amount of information while the abstract level
contains the lowest. For this reason, we adopted, in this work, the measurement level.
Kittler et al. (1998) differentiated between two classifier combination scenarios. In the
first scenario, all the classifiers use the same representation of the input pattern. On the
other hand, each classifier uses its own representation of the input pattern in the second
scenario. They illustrated that in the first case, each classifier can be considered to produce an estimate of the same a posteriori class probability. However, in the second case
it is no longer possible to consider the computed a posteriori probabilities to be estimates
of the same functional value, as the classification systems operate in different measurement systems. Kittler et al. (1998) focused on the second scenario, and they conducted
a comparative study of the performance of several combination schemes namely; product,
sum, min, max, and median. By assuming the joint probability distributions to be conditionally independent, they found that the sum rule gave the best results. A well known
approach that has been used in combining the results of different classifiers is the weighted
sum, where the weights are determined through a Bayesian decision rule (Lam & Suen,
1995). An alternative method was presented by Hashem & Schmeiser (1995), where a cost
function was used to minimize the mean square error (MSE) in order to calculate a linear
combination of the corresponding outputs from a number of trained artificial neural networks (ANNs). The expectation maximization algorithm was used by Chen & Chi (1998)
to perform the linear combination. The fuzzy integral has been used by Cho & Kim (1995a,
1995b) to combine multiple ANNs, while (Rogova, 1994; Mandler & Schurmann, 1988) have
used the Dempster-Shafer theory of evidence to combine the result of several ANNs. Many
other combination methods have also been used to combine classifiers, such as bagging and
boosting (Dietterich, 1999), which are powerful methods for diversifying and combining
classification results obtained using a single classification algorithm and a specific feature
set. In bagging, we get a family of classifiers by training on different portions of the training
set. The method works as follows. We first create N training bags. A single training bag
is obtained by taking a training set of size S and sampling this training set S times with
replacement. Some training instances will occur multiple times in a bag, while others may
not appear at all. Next, each bag is used to train a classifier. These classifiers are then
combined. Boosting, on the other hand, is based on multiple learning iterations. At each
iteration, instances that are incorrectly classified are given a greater weight in the next iteration. By doing so, in each iteration, the classifier is forced to concentrate on instances it
was unable to correctly classify in earlier iterations. In the end, all of the trained classifiers
are combined.
In this paper, we will focus on combining classification results obtained using N different
feature sets, f 1 , · · · , f N . Each feature set will be used to train a classifier, and hence there
will be N different classifiers, c1 , · · · , cN . For a specific input x, each classifier cn produces
334

A New Technique for Combining Multiple Classifiers

Feature
Extraction
1

f

1

Classifier

y

1

c1

Combination

x

Feature
Extraction
N

f

N

Classifier

z

yN

cN

Figure 1: A multi-classifier recognition system

a real vector yn = [y n (1), · · · y n (k), · · · y n (K)]T , where K is the number of class labels and
y n (k) corresponds to the degree that cn considers x has the label k. This degree could be
a probability, as in the Bayesian classifier, or any other scoring system. Fig. 1 shows the
block diagram of a multi-classifier recognition system.
Unlike statistical-based combination techniques, the Dempster-Shafer theory of evidence
has the ability to represent uncertainties and lack of knowledge. This is quite important for
the problem of classifier combination, because there is usually a certain level of uncertainty
associated with the performance of each of the classifiers. Since available classifier combination methods based on this theory do not accurately estimate the evidence of classifiers,
this paper attempts to solve this issue by proposing a new technique based on the gradient
descent learning algorithm, which aims at minimizing the MSE between the combined output and the target output of a given training set. Aha (1995) gave the following definition
for learning:
Learning denotes changes in the system that are adaptive in the sense that they
enable the system to do the same task or tasks drawn from the same population
more effectively the next time.
Based on the above, we show that instead of attempting to find an analytical formula which
accurately measures evidence, one can obtain a very good estimate of evidence by just using
appropriate learning procedures, as will be discussed later.
Some basic concepts of the Dempster-Shafer theory of evidence are presented in the
next section. Section three discusses the existing methods for computing evidence. The
proposed combination technique is presented in section four. Section five compares the
proposed algorithm to other conventional methods used by Kittler et al. (1998), the fuzzy
integral, and a previous implementation of the Dempster-Shafer theory. Section six provides
a conclusion to the paper.

2. The Dempster-Shafer Theory of Evidence
The Dempster-Shafer (D-S) theory of evidence (Shafer, 1976) is a powerful tool for representing uncertain knowledge. This theory has inspired many researchers to investigate
335

Al-Ani & Deriche

different aspects related to uncertainty and lack of knowledge and their applications to real
life problem. Today, the D-S theory covers several different models, such as the theory of
hints (Kohlas & Monney, 1995) and the transferable belief model (TBM) (Smets, 1998).
The latter will be adopted in this paper as it represents a powerful tool for combining
measures of evidence.
Let Θ = {θ1 , ....., θK } be a finite set of possible hypotheses. This set is referred to as the
frame of discernment, and its powerset denoted by 2Θ . Following are the basic concepts of
the theory:
Basic belief assignment (BBA). A basic belief assignment m is a function that assigns
a value in [0, 1] to every subset A of Θ and satisfies the following:
X
m(∅) = 0, and
m(A) = 1
(1)
A⊆Θ

It is worth mentioning that m(∅) could be positive when considering unnormalized combination rule as will be explained later. While in probability theory a measure of probability is
assigned to atomic hypotheses θi , m(A) is the part of belief that supports A, but does not
support anything more specific, i.e., strict subsets of A. For A 6= θi , m(A) reflects some ignorance because it is a belief that we cannot subdivide into finer subsets. m(A) is a measure
of support we are willing to assign to a composite hypothesis A at the expense of support
m(θi ) of atomic hypotheses θi . A subset A for which m(A) > 0 is called a focal element.
The partial ignorant associated with A leads to the following inequality: m(A) + m(A) ≤ 1,
where A is the compliment of A. In other words, the D-S theory of evidence allows us
to represent only our actual knowledge without being forced to overcommit when we are
ignorant.
Belief function. The belief function, bel(.), associated with the BBA m(.) is a function
that assigns a value in [0, 1] to every nonempty subset B of Θ. It is called “degree of belief
in B” and is defined by
X
bel(B) =
m(A)
(2)
A⊆B

We can consider a basic belief assignment as a generalization of a probability density function whereas a belief function is a generalization of a probability function.
Combination rule. Consider two BBAs m1 (.) and m2 (.) for belief functions bel1 (.) and
bel2 (.) respectively. Let Aj and Bk be focal elements of bel1 and bel2 respectively. Then
m1 (.) and m2 (.) can be combined to obtain the belief mass committed to C ⊂ Θ according
to the following combination or orthogonal sum formula (Shafer, 1976),
X
m1 (Aj )m2 (Bk )
m(C) = m1 ⊕ m2 (C) =

j,k,Aj ∩Bk =C

1−

X
j,k,Aj ∩Bk =∅

336

,
m1 (Aj )m2 (Bk )

C=
6 ∅

(3)

A New Technique for Combining Multiple Classifiers

The denominator is a normalizing factor, which intuitively measures how much m1 (.) and
m2 (.) are conflicting. Smets (1990) proposed the unnormalized combination rule:
X
∩
m1 (Aj )m2 (Bk ), ∀C ⊆ Θ
(4)
m1 m
2 (C) =
Aj ∩Bk =C

This rule implies that m(∅) could be positive, and in such case reflects some kind of contradiction in the belief state. In this work we will consider that m(∅) = 0 and use the
normalized combination rule. A comparison between normalized and unnormalized combination rules for the problem of combining classifiers will be considered in the future.
Combining several belief functions. The combination rule can be easily extended to
several belief functions by repeating the rule for new belief functions. Thus the pairwise
orthogonal sum of n belief functions bel1 , bel2 , · · · , beln , can be formed as
((bel1 ⊕ bel2 ) ⊕ bel3 ) · · · ⊕ beln =

n
M

beli

(5)

i=1

Notation. According to Smets (2000), the full notation for bel and its related functions is:
Θ<
belY,t
[ECY,t ](w0 ∈ A) = x

where Y represents the agent, t the time, Θ the frame of discernment, < a boolean algebra
of subsets of Θ, w0 the actual world, A a subset of Θ, and ECY,t all what agent Y knows
at t. Thus, the above expression denotes that the degree of belief held by Y at t that w0
belongs to the set A of worlds is equal to x. The belief is based on the evidential corpus
ECY,t held be Y at t.
In practice, many indices can be omitted for simplicity sake. Usually < is the power set
of Θ, which is 2Θ . When bel is defined on 2Θ , < is not explicitly stated. ’w0 ∈ A’ is denoted
as ’A’. Y and/or t are omitted when the values of the missing elements are clearly defined
from the context. Furthermore, EC is usually just a conditioning event. So, bel(A) is one
of the most often used notations (Smets, 2000). In the proposed method, we will adopt the
following notation: beln (θk ), where the agent is the classifier, and the subsets of concern
are the class labels.
It is important to mention that the combination rule given by Eq. 3 assumes that the
belief functions to be combined are independent. Consider that we have certain information
and would like to measure its belief, then we can think of this process as a mapping from
the “original information level” to the “belief level”. Liu & Bundy (1992) explained that
independence in the original information level would lead to independence in the belief level.
But, if two independent belief functions are rooted to the original information level, then
their original information may or may not be independent. For the problem of combining
multiple classifiers, the original information level consists of outputs of the classifiers to be
combined, while the belief level consists of the evidence of these classifiers (or their BBAs).
The assumption that these BBAs are independent, whether obtained from independent or
dependent original information, can hence justify the use of D-S theory. In fact, many

337

Al-Ani & Deriche

existing classifier combination methods assume the classification results of different classifiers to be independent (Mandler & Schurmann, 1988; Hansen & Salamon, 1990; Xu et al.,
1992). Since the classifiers’ evidence plays a crucial role in the combination performance,
there is an increased interest in the proper estimation of such evidence. In the next section,
we discuss how a number of existing classifier combination methods estimate evidence of
classifiers, and in section 4 we present our proposed method.

3. Existing Methods for Computing Evidence
Mandler & Schurmann (1988) proposed a method that transforms distance measures of the
different classifiers into evidence. This was achieved by first calculating a distance between
learning data sets and a number of reference points in order to estimate statistical distributions of intra- and interclass distances. For both, the a posteriori probability function
was estimated, indicating to which degree an input pattern belongs to a certain reference
point. Then, for each class label, the class conditional probabilities were combined into
evidence value ranging between 0 and 1, which was considered as the BBA of that class.
Finally, Dempster’s combination rule was used to combine the BBAs of the different classifiers to give the final result. As explained by Rogova (1994), this method brought forward
questions about the choice of reference vectors and the distance measure. Moreover, approximations associated with estimation of parameters of statistical models for intra- and
interclass distances can lead to inaccurate measure of the evidence.
Xu et al. (1992) used K + 1 classes to perform the classification task, where for the
(K + 1)th class denotes that the classifier has no idea about which class the input comes
from. For each classifier cn , n = 1..N , recognition, substitution, and rejection rates (nr , ns ,
and 1 − nr − ns ) were used as a measure of BBA, mn , on Θ as follows:
1. If the maximum output of a specific classifier belongs to K + 1, then mn has only a
focal element Θ with mn (Θ) = 1.
2. When the maximum output belongs to one of the K classes, mn has two focal elements
θk and θk with mn (θk ) = nr , mn (θk ) = ns . As the classifier says nothing about any
other propositions, mn (Θ) = 1 − mn (θk ) − mn (θk ).
The drawback of this method is again the way evidence is measured. There are two problems
associated with this method. Firstly, many classifiers do not produce binary outputs, but
rather probability like outputs. So, in the first case, it is inaccurate to assign 0 to both
mn (θk ) and mn (θk ). Secondly, this way of measuring evidence ignores the fact that classifiers
normally do not have the same performance with different classes. This had a clear impact
on the performance of this combination method when compared with other conventional
methods especially the Bayesian (Xu et al., 1992).
Rogova (1994) used several proximity measures between a reference vector and a classifier’s output vector. The proximity measure that gives the highest classification accuracy
was later transformed into evidences. The reference vector used was the mean vector, µnk , of
the output set of each classifier cn and each class label k. A number of proximity measures,
dnk , for µnk and yn were considered. For each classifier, the proximity measure of each class

338

A New Technique for Combining Multiple Classifiers

is transformed into the following BBAs:
mk (θk ) = dnk ,

mk (Θ) = 1 − dnk
Y
Y
mk (θk ) = 1 − (1 − dnl ), mk (Θ) =
(1 − dnl )
l6=k

l6=k

The evidence of classifier cn and class k is obtained by combining the knowledge about
θk , thus mk ⊕ mk . Finally, Dempster’s combination rule was used to combine evidences
for all classifiers to obtain a measure of confidence for each class label. Note that the first
combination was performed with respect to the class label (Rogova used the notations k and
k), while in the second one the agent was n. This idea was a promising one. However, the
major drawback is the way the reference vectors are calculated, where the mean of output
vectors may not be the best choice. Also, trying several proximity measures and choosing
the one that gives the highest classification accuracy is itself questionable.

4. The Proposed Combination Technique
In this section we will estimate the value of mn (θk ), which represents the belief in class label
k that is produced by classifier cn . In addition, we will also estimate mn (Θ), which reflects
the ignorance associated with classifier cn . Since the ultimate objective is to minimize the
MSE between the combined classification results and the target output, mn (θk ) and mn (Θ)
will be estimated using an iterative procedure that aims at attaining this objective. We will
first compare yn , which is the output classification vector produced by classifier cn , to a
reference vector, wkn , and the obtained distance will be used to estimate the BBAs. These
BBAs will then be combined to obtain a new output vector, z, that represents the combined
confidence in each class label. wkn will be measured such that the MSE between z and the
target vector, t, of a training dataset is minimized. Note that there are two indices for wkn .
Thus, for class label k, we don’t only consider the value assigned to it by classifier cn , but
rather the whole output vector (values assigned to each class label).
Let the frame of discernment Θ = {θ1 , · · · θk , · · · , θK }, where θk is the hypothesis that
the P
input x is of class k. Considering a BBA, mn , such that mn (θk ) ≥ 0, mn (Θ) =
1− K
k=1 mn (θk ), and mn is 0 elsewhere. Let dn (θk ) be a distance measure and gn the
unnormalized ignorance of classifier cn , then mn (θk ) and mn (Θ) will be estimated according
to the following formulas:
(6)
dn (θk ) = exp(−kwkn − yn k2 )
mn (θk ) =

dn (θk )
K
X

(7)

dn (θk ) + gn

k=1

mn (Θ) =

gn
K
X

(8)

dn (θk ) + gn

k=1

where mn (θk ) and mn (Θ) are the normalized values of dn (θk ) and gn respectively. Similar
to wkn , the minimized MSE will be used to estimate gn .
339

Al-Ani & Deriche

Evidences of all classifiers are combined according to the normalized combination rule
to obtain a measure of confidence of each class label. The k th element of the new combined
vector is given by:
M
z(k) = m(θk ) = m1 (θk ) ⊕ · · · ⊕ mN (θk ) =
mn (θk )
(9)
n∈N

L
For a given classifier cn , let I = {1 · · · N } \ {n}, mI = i∈I mi , then Eq. 9 can be written
as:
z(k) = mI (θk ) ⊕ mn (θk )
(10)
where according to Eq. 3, the combination of two BBAs is:
mj (θk ) ⊕ ml (θk ) =

mj (θk )ml (θk ) + mj (θk )ml (Θ) + mj (Θ)ml (θk )
XX
1−
mj (θp )ml (θq )
p

(11)

q
q6=p

wkn and gn will be initialized randomly, then their values will be adjusted according to a
training dataset so that the MSE of z is minimized.
Err = kz − tk2

(12)

The values of wkn and gn are adjusted according to the formulas:
∂Err
∂wkn [old]
∂Err
gn [new] = gn [old] − β
∂gn [old]

wkn [new] = wkn [old] − α

(13)
(14)

where α and β are the learning rates. The terms ∂Err/∂wkn and ∂Err/∂gn are derived as
follows:
∂Err
∂wkn
∂Err
gn

=
=

∂Err ∂z(k) ∂mn (θk )
∂z(k) ∂mn (θk ) ∂wkn
∂Err ∂z(k) ∂mn (θk )
∂z(k) ∂mn (θk ) ∂gn

340

(15)
(16)

A New Technique for Combining Multiple Classifiers

where,
∂Err
= 2[z(k) − t(k)]
(17)
∂z(k)
("
#
XX
∂z(k)
=
1−
mn (θp )mI (θq ) [mI (θk ) + mI (Θ)] + [mn (θk )mI (θk ) +
∂mn (θk )
p
q
q6=p

"
mn (θk )mI (Θ) + mn (Θ)mI (θk )]

#),
X

mI (θp )

p
p6=k

#2

"
1−

XX
p

mn (θp )mI (θq )

(18)

q
q6=p

X
2 exp(−kwkn − yn k2 )[wkn − yn ][
dn (θp ) + gn ]
p

∂mn (θk )
=−
∂wkn

p6=k

X
[
dn (θp ) + gn ]2

(19)

p

∂mn (θk )
dn (θk )
=−X
∂gn
[
dn (θp ) + gn ]2

(20)

p

Fig. 2 shows a flow chart of these learning procedures. It has been found that adjusting
the values of gn can be achieved during the first few iterations. By continuing the training
to fine-tune the values of wkn until there is no further improvement on the training set, or
we reach a pre-defined maximum number of epochs1 , the result could be further enhanced.
Note that the weight values are adjusted by each pattern (not batch training). We fix the
value of β = 10−6 , while α is first initialized to 5 × 10−4 , and is then changed according to
the value of MSE, as described in the flow chart.
Although the computational cost involved in implementing our technique is higher than
that of other combination methods2 , we only need to perform training once, which can be
done off-line. Then, with the optimal values of wkn and gn , we can perform the on-line
combination, which is comparable to other combination methods.
On the other hand, as indicated in the beginning of this section, we consider a reference
vector, wkn , for each class. This leads to an increase in training time as the number of classes
and/or classifiers increases. An alternative is to consider only using a reference value for
each class, wkn . This will save more than 50% of training time for the case of several
classifiers and classes. Note that the same learning formulas are applicable by replacing wkn
with wkn and yn with ykn . We will refer to these two alternative approaches as DS1 and DS2,
respectively. In the following section, we will compare DS1 and DS2 with other well-known
combination methods.
1. The maximum number of epochs is set to 50 in all experiments described in this paper
2. Training time of most of the experiments conducted in section 5 required less than 3 minutes on a
conventional PC

341

Al-Ani & Deriche

Start
Th
=
Errnew =
Errold =
It_no =
It_nomax=

Randomly initialize
wkn and g n
n =1: N, k =1: K
Initialize learning
rates
-4
-6
α=5∗10 , β=10

error threshold
current MSE
previous MSE
current no. of iterations
max. no. of iterations

For each pattern

It_no=It_no+1
Errold = Errnew

Compute
mn(θk ) and mn(Θ)

Adjust
wkn and g n

Compute
z and Errnew
IF
Yes
Errold -Errnew>Th
α = α∗1.03

No
α = α∗0.7

Yes

IF
It_no<It_nomax
and -4
α > 10
No
End

Figure 2: Training procedure of the proposed technique

It is worth mentioning that although the training procedures of both the proposed
method and the backpropagation algorithm of ANN are based on minimizing the MSE using
iterative approaches, the proposed method and ANN are not similar. The backpropagation
training operates by passing the weighted sum of its input through an activation function,
usually in a multi-layer architecture known as multi-layer perceptron (MLP). Extracting
rules from a trained MLP is a very challenging problem. On the other hand, the training of
the proposed method operates by measuring a distance between a classification vector and
a reference vector. This distance would later be used to measure the belief of each class
label for all classifiers. The final confidence of each class label is obtained by combining
the beliefs of all classifiers. Unlike MLP, the belief of a given class label for each classifier
indicates its contribution towards the final confidence. The reader may refer to (Denoeux,
2000) for a description of an ANN classifier based on the D-S theory.

342

A New Technique for Combining Multiple Classifiers

5. Performance Analysis of Different Combination Methods
The following three classification problems have been considered: texture classification,
classification of speech segments according to their manner of articulation, and speaker
identification. ANNs are used to perform classification for the three problems. For each
case, classifiers will be sorted according to their performance, such that the best classifier
is referred to as c1 , the 2nd best as c2 , and the worst one as cN .
For each problem, we will consider different number of classes, and combine the results of
different number of classifiers, where combining results of the best, the worst and mixtures
of best and worst classifiers will be investigated. For example, if we have five classifiers
and would like to combine two of these, then we will consider combining the best two,
{c1 , c2 }, best one and worst one, {c1 , c5 }, and worst two classifiers, {c4 , c5 }. The following
combination methods were tested: the weighted sum (WS)3 , average (Av), median (Md),
maximum (Mx), majority voting (MV), fuzzy integral (FI) (Cho & Kim, 1995a) 4 , Rogova’s
D-S method (DS0) (Rogova, 1994), and our proposed method with its two alternatives (DS1
& DS2). The training set used to train the ANNs will be used to estimate the confusion
matrix for WS and FI, as well as to estimate the evidence of DS0, DS1, and DS2.
Two measures will be used to compare the performance of the different combination
methods, namely: overall performance and error reduction rate (ERR). The overall performance is the mean of classification accuracy obtained by combining all considered subsets
of 2, · · · , N classifiers. ERR is the percentage of error reduction obtained by combining
classifiers with reference to the best single classifier:
ERR =

ERBSC − ERCC
× 100
ERBSC

(21)

where ERBSC is the error rate of the best single classifier and ERCC is the error rate obtained by combining the considered classifiers. Unlike classification accuracy, ERR clearly
shows how the performance of the combined classifiers improves or deteriorates compared
to the best single classifier. In other words, it shows the merit of performing the combination. We will specifically concentrate on the maximum ERR obtained by combining all
the considered subsets of 2, · · · , N classifiers. In addition, we will also investigate how the
value of ERR gets affected by increasing the number of combined classifiers.
5.1 Texture Classification
Several experiments have been carried out for the classification of texture images. The
textures considered here are: bark, brick, bubbles, leather, raffia, water, weave, wood and
wool (USC, 1981). In order to obtain a better comparison between the different combination
methods, we considered classifying the first two textures, then the first three, the first five
and finally all the nine textures. Additive Gaussian noise, with different signal-to-noise ratio,
has been added to (1024 × 1024) pixels image of each texture class to form the training and
testing sets. 961 patterns were obtained from each image using (64 × 64) windows with an
overlap of 32 pixels.
3. The weights of each classifier are determined according to the classification accuracy of each class label
using the training dataset
4. The reader may refer to Appendix A for a brief description of this method

343

Al-Ani & Deriche

No. of classes
2
3
5
9

SDH1
86.96
84.58
85.10
80.97

SDH2
85.73
84.52
84.62
77.44

SDH3
84.44
83.91
84.34
77.51

SDH4
85.45
86.24
83.46
75.72

En
91.14
89.72
88.84
83.65

Table 1: Texture classification accuracy of the five original classifiers for different number
of class labels

Four nine-feature vectors were calculated using statistics of sum and difference histogram
(SDH) of the co-occurrence matrix with different directions, vertical (SDH1 ), horizontal
(SDH2 ), and the two diagonals (SDH3 and SDH4 ) . For each direction, the features used
were: mean, variance, energy, correlation, entropy, contrast, homogeneity, cluster shade,
and cluster prominence. The fractal dimension (FD) has also been used to form the tenth
feature of each vector. The energy contents of texture images (En) has been used to form
another feature vector using 9 different masks. Again the tenth feature was FD.
Each of these five feature vectors has been used as input to an ANN. The numbers of
training and testing patterns depend upon number of classes considered, i.e. for the case
of two classes, 15376 patterns were used to train the networks and 5766 to test them. The
results obtained are shown in Table 1. Note that as the number of classes increases the
overall accuracy decreases. In addition, the performance of the En classifiers is found to be
better than that of the other four.
No. of classes
2
3
5
9

WS
89.16
88.52
89.60
84.96

Av
89.04
88.39
89.41
84.55

Md
87.66
87.41
87.99
83.37

Mx
90.12
88.86
89.23
82.90

MV
88.09
87.30
87.83
83.23

FI
90.08
88.71
90.28
86.76

DS0
88.70
88.40
89.52
84.87

DS1
90.66
90.21
92.69
89.83

DS2
90.72
90.08
91.50
86.79

Table 2: Overall performance of the various combination methods for different number of
class labels (texture classification)

The overall performance of the tested combination methods for different number of class
labels are shown in Table 2. For the case of 2 classes, it is clear that the overall performances
of DS1 and DS2 are better than that of the other combination methods. When mixtures of
good and bad classifiers are considered, the performance of combination methods, except
for DS1 and DS2, is closer to or worse than that of the best single classifier. This is shown
in Table 3 for the combination of {c1 , c3 , c4 , c5 }, {c1 , c4 , c5 }, {c1 , c5 }, etc5 . When 3 and 5
classes are considered, DS1 performs slightly better than DS2, and both outperform the
other methods. The gap between DS1 and other methods gets wider when all 9 classes are
considered. The superiority of DS1 reflects the advantage of using the whole output vector
in measuring evidences of classifiers.
5. The reader may refer to Appendix B for detailed results of other cases

344

A New Technique for Combining Multiple Classifiers

Classifiers
c1 , c2
c1 , c5
c4 , c5
c1 , c2 , c3
c1 , c2 , c5
c1 , c4 , c5
c3 , c4 , c5
c1 , c2 , c3 , c4
c1 , c2 , c3 , c5
c1 , c2 , c4 , c5
c1 , c3 , c4 , c5
c2 , c3 , c4 , c5
c1 , c2 , c3 , c4 , c5

WS
92.56
91.16
85.07
91.21
91.03
89.80
85.38
89.94
89.70
89.72
88.57
86.07
88.81

Av
92.59
91.12
85.07
91.21
90.81
89.59
85.38
89.70
89.42
89.49
88.45
86.11
88.54

Md
92.59
91.12
85.07
88.92
88.68
86.21
85.47
87.84
87.53
87.37
86.30
85.87
86.63

Mx
92.51
91.09
85.22
91.62
91.48
91.21
85.40
91.47
91.42
91.48
91.09
86.25
91.33

MV
92.51
91.09
85.22
88.92
88.71
86.21
85.48
89.13
89.04
88.94
87.03
86.26
86.59

FI
92.61
91.00
85.07
91.69
91.48
91.24
85.33
91.59
91.29
91.40
90.98
86.13
91.21

DS0
92.40
91.33
85.15
90.81
90.43
88.88
85.22
89.13
88.92
89.00
87.81
85.93
88.10

DS1
92.46
91.62
85.10
92.40
92.47
91.68
85.43
92.21
92.32
92.25
91.78
86.66
92.21

DS2
92.46
91.61
85.12
92.53
92.39
91.78
85.40
92.33
92.42
92.26
91.87
86.80
92.33

Table 3: Classification accuracy of texture images using different combination methods (2
textures)

The best ERR values of WS, FI, DS0, DS1 and DS2 are determined according to Eq.
21. Since WS has been widely used in the literature, and it outperforms other conventional
methods (Av, Md, Mx, and MV), as observed in Table 2, then we will use it as a representative of the conventional methods when performing the comparison with FI, DS0, DS1 and
DS2. Figure 3a shows the ERR values when 2 classes are considered. It is clear that the
maximum ERR values of these five combination methods are very close, ranging between
14% to 16%. They are obtained by combining the best two classifiers for WS, FI and DS0,
while DS1 and DS2 use three classifiers to obtain their maximum ERR. As mentioned
earlier, The performance of the first four individual classifiers is weaker than that of the
En. Notice that, for both DS1 and DS2, there is no significant degradation in ERR as the
number of combined classifiers increases.
For the case of 3 classes, both DS1 and DS2 outperform other combination methods
in terms of the maximum ERR. They achieve values of 17.3% and 19.6% respectively,
compared to 11.4% or less for other methods as shown in Figure 3b. In addition, ERR of
DS1 and DS2 are not affected as the number of combined classifiers increases.
For the case of 5 classes, the maximum ERR values sorted in a descending order are:
DS1 50.7%, DS2 40.2%, FI 31.6%, WS 28.1%, and DS0 23.8%, as shown in Figure 3c. In
addition, ERR values of DS1 improve as the number of combined classifiers increases, DS2
is the second best, while ERR values of other methods degrade as the number of combined
classifiers increases. For the case of 9 classes, the superiority of DS1 becomes clearer, where
as shown in Figure 3d, the maximum ERR value of DS1 is 54% compared to 37.5% or less
for other methods. It is worth mentioning that even though the maximum ERR values of
other methods degrade, they still perform better than the best single classifier. This leads
us to conclude that as the number of classes increases, the performance of most classifier
combination methods gets better overall.

345

Al-Ani & Deriche

20

30

10

20

0

10

−10

0

−20

−10

(a) 2 classes

(b) 3 classes

−20

WS
FI
DS0
DS1
DS2

ERR

−30

50
50
40
40
30
30
20
20
10
10

(c) 5 classes
0

2

2.5

3

3.5

4

4.5

5

(d) 9 classes
2

2.5

3

3.5

4

4.5

5

No. of combined classifiers

Figure 3: ERR of different classifier combination methods obtained by considering different
number of classifiers for the cases: (a) 2 classes, (b) 3 classes, (c) 5 classes, and
(d) 9 classes

Taking all these facts into consideration, we can sort the methods in a descending order
as follows: DS1, DS2, FI, WS, DS0, and the other conventional methods. Thus, in summary,
for the problem of texture classification, our proposed technique with its two alternatives
(DS1 and DS2) clearly outperforms other standard combination methods with an increase
in classification accuracy of about 2 − 7%. For the cases of 2 and 3 classes, there is a little
difference in performance between DS1 and DS2. This is because using reference vectors of
small size, 2 × 1 and 3 × 1, does not make a big impact upon the estimation of evidence
compared to that obtained using a single reference value. As the size of the reference vector
increases, 5 × 1 and 9 × 1 for the other two cases, its impact on estimating the evidence
becomes clearer, which leads to better results, but at the cost of increasing computational
load.
5.2 Speech Segment Classification
Six different input feature sets have been used to classify speech segments according to their
manner of articulation, these were: 13 mel-frequency cepstral coefficients (MFC), 16 log
mel-filter bank (MFB), 12 linear predictive cepstral coefficients (LPC), 12 linear predictive

346

A New Technique for Combining Multiple Classifiers

No. of classes
3
6
9

MFC
88.21
83.16
78.48

MFB
90.98
85.50
83.24

LPC
81.64
74.77
71.64

LPR
80.69
74.06
70.03

WVT
90.64
84.33
81.33

ARP
70.87
62.90
56.66

Table 4: Speech segment classification accuracy of the six original classifiers for different
number of class labels

reflection coefficients (LPR), 10 wavelet energy bands (WVT), and 12 autoregressive model
parameters (ARP). For this experiment, speech was obtained from the TIMIT database
(MIT, SRI, & TI, 1990). Segments of 152 speakers (56456 segments) were used to train
the ANNs, and 52 speakers (19228 segments) to test them. Three cases were considered:
3 classes (vowel, consonant, and silence), 6 classes (vowel, nasal, fricative, stop, glide, and
silence), and finally 9 classes (vowel, semi-vowel, nasal, fricative, stop, closure, lateral,
rhotic, and silence). The classification results for these three cases are summarized in Table
4.
No. of classes
3
6
9

WS
90.80
85.54
83.05

Av
90.41
84.91
82.31

Md
90.20
84.62
81.93

Mx
86.15
81.16
75.63

MV
89.51
84.03
81.00

FI
90.65
85.29
82.73

DS0
90.90
85.18
82.86

DS1
91.57
87.18
85.20

DS2
91.31
86.37
84.22

Table 5: Overall performance of the various combination methods for different number of
class labels (speech segment classification)

The two best individual classifiers are MFB and WVT in all three cases, followed by
MFC then other methods. Unlike texture classifiers that had one good classifier and four,
relatively, weak classifiers, we have here three good classifiers (MFB, MFC and WVT) and
three weak classifiers (LPC, LPR and ARP).
The overall performance values of the various combination methods are displayed in
Table 5. For the case of the 3 classes, it can be seen that the overall performance of DS1 is
better than that of DS2 and they both outperform the other methods. This becomes even
clearer as the number of classes increases (with more than 2% increase in accuracy).
The ERR values for the case of 3 classes are shown in Figure 4a. The maximum ERR
value of DS1 is 23.4%, which is achieved by combining all six classifiers, compared to 20.3%
for DS2 and 19.6% or less for the other methods. The gap between DS1 and the other
methods gets wider when we consider 6 and 9 classes as shown in Figures 4b and 4c.
Because there are more good classifiers in this experiment compared to that of the texture
experiment, the variations of the ERR values when the number of classifiers increases are
found to be smaller. In addition, we can see that as the number classes increases DS1 keeps
its steady and superior performance in terms of ERR with more than 10% increase.
As a summary, DS1 outperforms other methods in terms of overall performance and
ERR measurements. It is followed by DS2, WS, and the rest of the methods.

347

Al-Ani & Deriche

25
25
20
20
15
15
10
10

(b) 6 classes

(a) 3 classes

5
2

3

4

5

6

2

3

4

5

6

25

ERR

20

WS
FI
DS0
DS1
DS2

15

10

(c) 9 classes

5
2

3

4

5

6

No. of combined classifiers

Figure 4: ERR of different classifier combination methods obtained by considering different
number of classifiers for the cases: (a) 3 classes, (b) 6 classes, and (c) 9 classes

5.3 Speaker Identification
Three limited-scope experiments were carried out to perform speaker identification using 2,
3, and 4 speakers. Speech data from the TIMIT database was also used (MIT et al., 1990).
The number of training patterns were 3232, 4481 and 5931 respectively, and the number of
testing patterns were 1358, 1921 and 2542 respectively. The same features used to classify
speech segments according to their manner of articulation were used to identify speakers.
Classification results of the six classifiers are shown in Table 6. The performance of the
individual classifiers are not quite similar to the speech segment problem, where the three
good classifiers are: MFB, MFC and LPC and the three weak classifiers are: LPR, WVT
and ARP.
The overall performance of the various combination methods are shown in Table 7. For
the case of 2 classes, it is clear that the overall performance of most combination methods
is very comparable. The superiority of DS1, and to a lesser degree DS2, becomes clear as
the number of classes increases (more patterns were included to estimate evidence).
Note that, because of the high performance of individual classifiers for the case of 2
classes, a small difference in the performance of combination methods will have great impact
on ERR, which explains the graphs’ fluctuations, as shown in Figure 5a. It can be seen

348

A New Technique for Combining Multiple Classifiers

No. of classes
2
3
4

MFC
94.58
85.84
85.01

MFB
96.17
87.25
85.96

LPC
92.49
82.20
80.84

LPR
89.60
81.00
77.97

WVT
87.80
74.39
70.93

ARP
84.55
73.03
64.59

Table 6: Speaker identification accuracy of the six original classifiers with different number
of speakers
No. of classes
2
3
4

WS
95.53
90.80
83.05

Av
95.50
90.41
82.31

Md
95.26
90.20
81.93

Mx
95.36
86.15
75.63

MV
95.21
89.51
81.00

FI
95.25
90.65
82.73

DS0
95.46
90.90
82.86

DS1
95.48
91.57
85.20

DS2
95.45
91.31
84.22

Table 7: Overall performance of the various combination methods for different number of
class labels (speaker identification)

that both maximum ERR and overall performance of most combination methods are close.
These results do not favor DS1 nor DS2, because they have an additional computational
cost. Let’s now consider the case of 3 classes, Figure 5b shows that the maximum ERR
of DS2 is the highest followed by DS1, and they both outperform the other methods. For
the case of 4 classes, the maximum ERR of DS1 is 30%, compared to 27% or less for other
methods, as shown in Figure 5c. The figure also shows that ERR values of DS2 and WS
are close. However, as the overall performance of DS2 is better than that of WS, DS2 can
be considered as the second best method followed by WS, DS0 and finally FI.
The above results clearly show how the performance of DS1 and DS2 get affected by the
number of training patterns, which is crucial in achieving good estimation of the evidence of
each classifier. This is very clear for the case of 2 speakers. Their performance, however, get
better as the number of speakers and training patterns increase. In other words, DS1 and
DS2 require a larger number of patterns to work properly. Failing to provide such number
of patterns, other conventional methods, such as WS, can achieve similar performance.
The experiments of textures, speech segments and speaker classification show that our
proposed technique clearly outperforms the other methods in terms of overall performance
and ERR, providing that a sufficient number of patterns to estimate evidence of classifiers
exists. Also, among the different combination methods, DS1 and DS2 are the least effected
by the inclusion of weak classifiers. The experiments also show that the BBAs could be
better estimated using reference vectors rather than reference values, especially for large
number of classes.
It is worth mentioning that each one of the combination methods has its own merit.
For example, the MV is very useful combination method when dealing with classifiers that
produce results of the abstract level. When working in the measurement level, other combination methods could have better performance.
The Mx method can provide good results when the performance of the combined classifiers are close. In such case, the classifier with higher confidence can provide better results
349

Al-Ani & Deriche

40
20
35
15
30
10
25
5
20
0

(a) 2 classes

(b) 3 classes

15

−5
2

3

4

5

6

2

3

4

5

6

30

ERR

25

WS
FI
DS0
DS1
DS2

20
15
10

(c) 4 classes

5
2

3

4

5

6

No. of combined classifiers

Figure 5: ERR of different classifier combination methods obtained by considering different
number of classifiers for the cases: (a) 2 classes, (b) 3 classes, and (c) 4 classes

than any individual classifier. This is shown in Tables 11-13 (refer to Appendix B), where
good results are achieved when combining the best two or three classifiers of the speech
segment experiment compared to the best individual classifier. However, if there is a clear
difference in the performance of classifiers, as in the case when considering mixtures of good
and bad classifiers, then using Mx to combine the classification results will not be a good
choice. In case we don’t have any information about the performance of the classifiers, i.e.,
there is no training dataset, the Av and Md methods could provide an attractive choice.
Similar to the findings of (Kittler et al., 1998; Alkoot & Kittler, 1999), the performance of
these two methods are found to be close with slight favor of the Av method. If the classification accuracy of the different classifiers are available, then the WS method represents
a good choice, where it outperforms Av in almost all the conducted experiments. This is
expected, as associating each classifier with a weight that reflects its performance, would
make the better classifier contributes more towards the final decision. If the performance
of the combined classifiers are very close, then combining their results using both the Av
and WS methods would lead to very similar performance, as shown in Tables 11-13 for the
cases of combining the best two and three speech segment classifiers.
The FI and DS0 represent two non-linear combination methods. According to (Cho &
Kim, 1995a), the performance of FI was slightly better than the WS when tested using an
350

A New Technique for Combining Multiple Classifiers

optical character recognition database, which is similar to the results we obtained for the
texture experiments. However, for speech segment classification and speaker identification
experiments, the performance of FI was not as good as that of WS. On the other hand, the
experiments conducted here show that WS slightly outperforms DS0. Note that Rogova
(1994) only compared DS0 to the original classifiers. The main problem with both FI
and DS0 is the appropriate estimation of their parameters. For example, the desired sum
of fuzzy densities affects the combination results of FI, while the choice of the proximity
measure and reference vector plays an important role in the performance of DS0.
DS1 and DS2 differ from DS0 by the appropriate measure of the reference vectors,
and hence the accurate estimation of the evidence of each classifier. This will exploit
the complementary information provided by the different classifiers. In other words, the
accurate estimation of evidence of each classifier will lead to minimizing the MSE of the
combined results, and hence resolving the conflicts between classifiers.

6. Conclusion
We have developed in this work a new powerful classifier combination technique based
on the D-S theory of evidence. The technique, based on adjusting the evidence of different
classifiers by minimizing the MSE of training data, gave very good results in terms of overall
performance and error reduction rate. To test the algorithm, three experiments were carried
out: texture classification, speech segments classification, and speaker identification. All
of the experiments showed the superiority of the proposed technique when compared to
conventional methods, fuzzy integral, and another D-S implementation that uses a different
measure of evidence. We have shown that accurate estimation of the evidence from different
classifiers based on the whole output vectors (DS1) gives the best performance, especially
for higher number of class labels. The only drawback of the algorithm is that training
can be computationally expensive (this is used to accurately estimate the evidence of each
classifier). However, this can be executed off-line, and as such, has no major effect on the
performance of the algorithm. We have also shown that the proposed algorithm can easily
achieve an increase in classification accuracy of the order of 2% to 7% compared to other
combination methods. We believe that with more work on enhancing the technique, the
scheme can form a new framework for pattern classification in the future.

Acknowledgment
The authors wish to thank Dr. J. Chebil and Dr. M. Mesbah for their valuable comments
on the paper. The authors also acknowledge the support of Queensland University of
Technology for the work presented in this paper. Dr. Deriche acknowledges the support of
King Fahd University, Saudi Arabia, where he is currently on leave.

Appendix A. Classifier Combination Based on the Fuzzy Integral
Fuzzy integral is a non-linear combination method defined with respect to a fuzzy measure.
Detailed explanation of classifier combination based on the gλ fuzzy measure can be found
in the work of Cho & Kim (1995a, 1995b).

351

Al-Ani & Deriche

For a finite set of elements, Z, the gλ fuzzy measure (Sugeno, 1977) is defined as the set
function g: 2Z → [0, 1] that satisfies the following conditions:
1. g(∅) = 0, g(Z) = 1,
2. g(A) ≤ g(B) if A ⊂ B,
3. if {Ai }∞
i=1 is an increasing sequence of measurable sets, then limi→∞ g(Ai ) = g(limi→∞ Ai ),
4. g(A ∪ B) = g(A) + g(B) + λg(A)g(B)
for all A, B ⊂ Z and A ∩ B = ∅, and for some λ > −1. Let h : Z → [0, 1] be a fuzzy
subset of Z. The fuzzy integral over Z of the function h with respect to a fuzzy measure g
is defined by



h(z) ◦ g(.) = max min min h(z).g(E)
E⊆Z

=

z∈E

max [min(α, g(Fα ))],

where

α∈[0,1]

Fα = {z|h(z) ≥ α}
Let Z = {z1 , · · · zn }, and suppose that h(z1 ) ≥ h(z2 ) ≥ · · · ≥ h(zn ), (if not, Z is rearranged
so that this relation holds). Then a fuzzy integral e, with respect to a fuzzy measure g over
Z can be computed by
n

e = max[min(h(zi ), g(Ai ))],
i=1

where

Ai = {z1 , · · · zi }
g(A1 ) = g({z1 }) = g 1
g(Ai ) = g i + g(Ai−1 ) + λg i g(Ai−1 ), for 1 < i ≤ n
Q
λ is given by solving: λ + 1 = ni=1 (1 + λg i ), where λ ∈ (−1, ∞) and λ 6= 0. This can be
calculated by solving an (n − 1)st degree polynomial and finding the unique root greater
than −1.
For the problem of combining classifiers, Z represents the set of classifiers, A the object
under consideration for classification, and hk (zi ) is the partial evaluation of the object A for
class ωk . Corresponding to each classifier zi , the degree of importance, g i , that reflects how
good is zi in the classification of class ωk must be given. These densities can be induced
from a training dataset.

352

A New Technique for Combining Multiple Classifiers

Appendix B. Tables of Classification Accuracy for Different Combination
Methods
Classifiers
c1 , c2
c1 , c5
c4 , c5
c1 , c2 , c3
c1 , c2 , c5
c1 , c4 , c5
c3 , c4 , c5
c1 , c2 , c3 , c4
c1 , c2 , c3 , c5
c1 , c2 , c4 , c5
c1 , c3 , c4 , c5
c2 , c3 , c4 , c5
c1 , c2 , c3 , c4 , c5

WS
90.89
89.69
85.05
89.92
89.55
89.05
85.76
89.29
89.07
88.87
88.60
86.45
88.54

Av
90.79
89.57
85.05
89.83
89.39
88.80
85.73
89.07
88.83
88.78
88.38
86.44
88.47

Md
90.79
89.57
85.05
88.04
87.54
86.95
85.49
87.98
87.24
87.34
87.05
86.18
87.06

Mx
90.83
89.68
84.67
90.48
90.23
89.62
84.81
90.17
90.01
90.02
89.39
85.52
89.73

MV
90.17
89.10
84.81
87.77
87.09
86.62
85.49
87.91
87.50
87.61
87.52
86.31
87.03

FI
90.22
88.99
85.13
89.88
89.56
89.26
85.67
89.85
89.58
89.64
89.44
86.36
89.65

DS0
90.81
89.92
85.51
89.59
89.18
88.80
85.91
88.82
88.81
88.66
88.39
86.46
88.29

DS1
91.09
90.45
85.49
91.26
91.12
90.77
87.27
91.44
91.48
91.16
91.31
88.37
91.50

DS2
90.81
90.29
85.44
91.73
91.10
90.73
86.88
91.51
91.53
91.26
91.00
87.20
91.61

Table 8: Classification accuracy of texture images using different combination methods (3
textures)

Classifiers
c1 , c2
c1 , c5
c4 , c5
c1 , c2 , c3
c1 , c2 , c5
c1 , c4 , c5
c3 , c4 , c5
c1 , c2 , c3 , c4
c1 , c2 , c3 , c5
c1 , c2 , c4 , c5
c1 , c3 , c4 , c5
c2 , c3 , c5 , c6
c1 , c2 , c3 , c4 , c5

WS
91.98
91.95
85.14
91.49
90.77
90.61
86.29
90.26
90.14
89.73
90.32
86.41
89.65

Av
91.87
91.74
85.19
91.29
90.50
90.35
86.22
90.03
89.91
89.43
90.06
86.38
89.39

Md
91.87
91.74
85.19
88.78
87.92
87.67
85.40
88.37
88.17
87.62
87.91
85.99
87.27

Mx
90.28
90.72
84.77
90.39
90.34
90.29
85.99
90.12
90.25
90.19
90.50
85.98
90.11

MV
89.89
89.58
84.50
88.60
87.74
87.43
85.64
88.90
89.00
88.45
88.51
85.79
87.81

FI
92.21
91.30
84.94
92.35
91.54
91.41
85.91
91.86
91.83
91.11
91.83
86.15
91.22

DS0
91.45
91.55
85.82
91.08
90.32
90.25
86.98
89.93
90.09
89.41
90.20
87.21
89.51

DS1
93.40
93.27
86.28
94.37
93.66
93.69
89.16
94.48
94.41
93.82
94.50
89.47
94.46

DS2
92.81
92.72
85.36
93.19
92.96
92.90
87.29
93.19
93.26
92.56
93.33
86.97
93.01

Table 9: Classification accuracy of texture images using different combination methods (5
textures)

353

Al-Ani & Deriche

Classifiers
c1 , c2
c1 , c5
c4 , c5
c1 , c2 , c3
c1 , c2 , c5
c1 , c4 , c5
c3 , c4 , c5
c1 , c2 , c3 , c4
c1 , c2 , c3 , c5
c1 , c2 , c4 , c5
c1 , c3 , c4 , c5
c2 , c3 , c4 , c5
c1 , c2 , c3 , c4 , c5

WS
88.45
86.39
79.55
87.10
86.48
85.92
80.27
86.42
85.70
85.79
85.42
81.60
85.33

Av
88.13
85.97
79.40
86.53
85.85
85.32
80.21
85.95
85.11
85.39
84.92
81.44
84.88

Md
88.13
85.97
79.40
84.20
83.66
83.22
79.63
84.56
83.37
84.29
83.06
81.15
83.19

Mx
85.44
82.27
78.74
84.65
84.08
82.97
79.54
84.33
83.91
83.83
83.47
80.75
83.74

MV
85.91
83.00
78.53
84.60
84.17
83.67
79.38
85.16
84.26
84.91
84.08
81.03
83.35

FI
89.78
88.18
79.37
89.51
88.72
88.25
79.97
89.18
88.52
88.52
88.34
81.54
88.02

DS0
89.26
87.10
79.28
87.06
86.92
85.98
79.80
85.96
85.41
85.94
84.81
81.02
84.83

DS1
91.42
90.07
81.22
92.00
92.13
92.01
82.48
92.45
92.02
92.48
92.35
84.70
92.43

DS2
89.20
88.08
79.91
88.59
88.53
88.30
80.89
88.70
88.30
88.66
88.35
82.17
88.65

Table 10: Classification accuracy of texture images using different combination methods (9
textures)

Classifiers
c1 , c2
c1 , c6
c5 , c6
c1 , c2 , c3
c1 , c2 , c6
c1 , c5 , c6
c4 , c5 , c6
c1 , c2 , c3 , c4
c1 , c2 , c3 , c6
c1 , c2 , c5 , c6
c1 , c4 , c5 , c6
c3 , c4 , c5 , c6
c1 , c2 , c3 , c4 ,
c1 , c2 , c3 , c4 ,
c1 , c2 , c3 , c5 ,
c1 , c2 , c4 , c5 ,
c1 , c3 , c4 , c5 ,
c2 , c3 , c4 , c5 ,
c1 , c2 , c3 , c4 ,

c5
c6
c6
c6
c6
c6
c5 , c6

WS
92.34
89.99
81.09
92.63
92.17
89.85
84.98
92.59
92.62
92.25
90.15
88.79
92.75
92.57
92.73
92.14
91.41
91.51
92.62

Av
92.34
88.11
80.65
92.61
91.79
88.79
84.96
92.57
92.47
91.93
89.51
88.42
92.64
92.48
92.50
91.70
91.04
90.98
92.36

Md
92.34
88.11
80.65
92.37
91.83
88.20
84.76
92.42
92.50
91.82
89.34
88.30
92.23
92.30
92.20
91.07
90.63
90.52
92.24

Mx
92.34
83.95
76.19
92.34
85.97
84.17
79.36
91.64
86.94
86.01
84.64
83.25
91.42
86.96
86.93
86.19
85.79
85.73
86.95

MV
92.22
82.64
76.10
92.27
91.60
87.50
84.08
92.04
92.02
91.96
89.84
88.46
92.13
91.92
91.91
90.97
90.41
90.60
91.97

FI
91.84
91.06
82.03
92.36
92.03
89.66
84.89
92.38
92.49
92.14
89.48
88.46
92.49
92.25
92.53
91.71
90.98
91.15
92.38

DS0
92.38
90.92
81.54
92.63
92.27
90.34
84.62
92.61
92.73
92.37
90.12
88.76
92.74
92.56
92.76
92.23
91.46
91.50
92.61

DS1
92.45
91.48
82.29
92.79
92.53
91.92
85.65
92.77
92.78
92.77
91.92
90.51
93.07
92.77
93.03
92.78
92.48
92.67
93.09

Table 11: Classification accuracy of speech segments using different combination methods
(3 classes)

354

DS2
92.29
91.42
82.01
92.67
92.23
91.79
85.36
92.64
92.54
92.49
91.84
89.94
92.81
92.56
92.72
92.46
92.14
92.40
92.64

A New Technique for Combining Multiple Classifiers

Classifiers
c1 , c2
c1 , c6
c5 , c6
c1 , c2 , c3
c1 , c2 , c6
c1 , c5 , c6
c4 , c5 , c6
c1 , c2 , c3 , c4
c1 , c2 , c3 , c6
c1 , c2 , c5 , c6
c1 , c4 , c5 , c6
c3 , c4 , c5 , c6
c1 , c2 , c3 , c4 ,
c1 , c2 , c3 , c4 ,
c1 , c2 , c3 , c5 ,
c1 , c2 , c4 , c5 ,
c1 , c3 , c4 , c5 ,
c2 , c3 , c4 , c5 ,
c1 , c2 , c3 , c4 ,

c5
c6
c6
c6
c6
c6
c5 , c6

WS
86.97
84.30
74.60
88.09
86.48
84.33
79.27
88.03
87.64
86.51
84.61
83.84
87.90
87.57
87.69
86.71
86.36
86.70
87.67

Av
86.95
81.98
73.91
88.08
85.76
82.80
78.73
87.91
87.17
85.84
83.64
83.12
87.87
87.24
87.17
86.00
85.85
85.95
87.33

Md
86.95
81.98
73.91
87.77
86.01
81.88
77.84
87.81
87.26
85.90
83.28
82.84
87.44
86.98
86.91
85.54
85.26
85.18
87.02

Mx
86.46
77.97
70.38
87.11
80.38
78.64
74.07
86.58
82.59
80.54
79.47
79.28
86.01
82.76
82.64
81.21
81.50
81.63
82.76

MV
86.30
76.66
70.20
87.76
85.31
81.24
77.26
87.29
86.95
86.10
83.85
83.05
87.35
86.85
86.96
85.63
85.57
85.23
86.95

FI
86.67
85.01
75.00
87.51
86.49
83.88
78.46
87.67
87.37
86.69
83.97
83.22
87.72
87.36
87.52
86.46
86.10
86.06
87.35

DS0
86.64
84.52
74.20
87.49
86.45
84.56
78.51
87.48
87.25
86.59
84.29
83.56
87.34
87.08
87.32
86.39
85.95
85.81
86.98

DS1
88.12
86.71
76.47
88.73
88.19
87.16
80.17
88.98
88.61
88.47
87.38
86.00
89.15
88.95
88.93
88.64
88.26
88.37
89.14

Table 12: Classification accuracy of speech segments using different combination methods
(6 classes)

355

DS2
87.59
86.39
75.68
88.10
87.50
86.45
79.39
88.09
88.08
87.57
86.68
84.95
88.15
88.11
88.12
87.56
87.38
87.28
88.01

Al-Ani & Deriche

Classifiers
c1 , c2
c1 , c6
c5 , c6
c1 , c2 , c3
c1 , c2 , c6
c1 , c5 , c6
c4 , c5 , c6
c1 , c2 , c3 , c4
c1 , c2 , c3 , c6
c1 , c2 , c5 , c6
c1 , c4 , c5 , c6
c3 , c4 , c5 , c6
c1 , c2 , c3 , c4 ,
c1 , c2 , c3 , c4 ,
c1 , c2 , c3 , c5 ,
c1 , c2 , c4 , c5 ,
c1 , c3 , c4 , c5 ,
c2 , c3 , c4 , c5 ,
c1 , c2 , c3 , c4 ,

c5
c6
c6
c6
c6
c6
c5 , c6

WS
84.58
81.85
70.48
85.41
84.20
82.18
75.94
85.44
85.34
84.48
82.41
81.02
85.52
85.53
85.54
84.60
83.97
84.14
85.32

Av
84.61
78.59
69.04
85.42
83.44
80.26
75.23
85.30
84.97
83.77
81.44
80.51
85.43
85.01
85.16
84.03
83.32
83.48
84.93

Md
84.61
78.59
69.04
85.00
83.53
79.19
74.43
85.20
84.99
83.77
81.03
80.15
84.94
84.41
84.76
83.34
82.74
82.32
84.70

Mx
83.77
71.48
62.87
83.81
74.18
72.32
67.23
83.41
76.49
74.61
73.61
72.74
82.93
77.04
76.62
75.51
75.80
75.40
77.08

MV
83.66
70.50
62.65
85.02
82.70
77.86
73.46
84.96
84.82
83.98
81.49
79.83
84.77
84.53
84.66
83.69
83.16
82.66
84.51

FI
84.06
82.53
71.22
85.00
84.11
81.20
75.30
85.11
85.19
84.58
81.61
80.06
85.45
84.96
85.38
84.17
83.67
83.29
85.07

DS0
84.15
82.51
69.97
85.34
84.01
82.53
75.54
85.15
85.14
84.53
82.44
80.41
85.42
85.00
85.25
84.42
83.91
83.44
85.19

DS1
86.11
84.41
73.24
86.85
86.05
85.10
78.21
87.05
86.79
86.67
85.65
83.86
87.32
87.09
87.11
86.82
86.59
86.55
87.26

Table 13: Classification accuracy of speech segments using different combination methods
(9 classes)

356

DS2
85.60
83.72
71.94
86.15
85.44
84.56
76.92
86.13
86.16
85.86
84.76
82.25
86.32
86.09
86.22
85.78
85.45
85.56
85.23

A New Technique for Combining Multiple Classifiers

Classifiers
c1 , c2
c1 , c6
c5 , c6
c1 , c2 , c3
c1 , c2 , c6
c1 , c5 , c6
c4 , c5 , c6
c1 , c2 , c3 , c4
c1 , c2 , c3 , c6
c1 , c2 , c5 , c6
c1 , c4 , c5 , c6
c3 , c4 , c5 , c6
c1 , c2 , c3 , c4 ,
c1 , c2 , c3 , c4 ,
c1 , c2 , c3 , c5 ,
c1 , c2 , c4 , c5 ,
c1 , c3 , c4 , c5 ,
c2 , c3 , c4 , c5 ,
c1 , c2 , c3 , c4 ,

c5
c6
c6
c6
c6
c6
c5 , c6

WS
96.10
95.38
90.25
96.68
95.81
94.66
92.20
96.90
97.04
95.88
95.88
95.02
96.82
96.10
96.53
95.74
96.39
95.16
96.53

Av
96.10
94.95
90.69
96.68
95.74
94.73
92.13
96.90
96.82
95.88
95.81
94.95
96.75
96.10
96.46
95.67
96.32
95.23
96.61

Md
96.10
94.95
90.69
96.90
95.23
94.37
91.77
96.97
96.97
95.74
95.52
94.30
96.25
95.45
96.17
95.38
95.60
95.02
96.53

Mx
96.10
94.95
90.83
96.97
95.38
95.09
92.64
96.68
96.10
95.16
95.52
94.01
96.53
96.32
95.88
95.60
96.39
95.45
96.17

MV
96.10
94.95
90.83
96.90
95.23
94.51
91.70
96.61
96.53
95.96
95.45
94.30
96.25
95.45
96.10
95.31
95.52
94.95
96.25

FI
95.16
96.25
87.51
96.61
96.17
94.95
91.48
96.61
96.97
96.17
94.95
94.30
96.82
96.25
96.75
95.81
95.96
95.16
95.96

DS0
96.02
95.36
89.32
96.98
95.73
94.62
91.75
97.05
96.91
95.95
95.95
95.14
96.69
96.02
96.47
95.88
96.24
95.14
96.54

DS1
95.51
96.17
88.59
96.91
95.51
96.24
91.16
96.69
96.76
95.80
95.88
94.55
96.76
96.24
96.76
96.02
96.39
95.58
96.54

Table 14: Speaker identification accuracy using different combination methods (2 speakers)

357

DS2
95.80
96.17
88.66
96.54
95.88
96.17
91.16
96.69
96.69
95.80
96.24
94.40
96.61
96.10
96.54
95.95
96.24
95.58
96.39

Al-Ani & Deriche

Classifiers
c1 , c2
c1 , c6
c5 , c6
c1 , c2 , c3
c1 , c2 , c6
c1 , c5 , c6
c4 , c5 , c6
c1 , c2 , c3 , c4
c1 , c2 , c3 , c6
c1 , c2 , c5 , c6
c1 , c4 , c5 , c6
c3 , c4 , c5 , c6
c1 , c2 , c3 , c4 ,
c1 , c2 , c3 , c4 ,
c1 , c2 , c3 , c5 ,
c1 , c2 , c4 , c5 ,
c1 , c3 , c4 , c5 ,
c2 , c3 , c4 , c5 ,
c1 , c2 , c3 , c4 ,

c5
c6
c6
c6
c6
c6
c5 , c6

WS
89.22
88.91
80.37
90.53
90.37
88.70
84.54
91.10
91.25
90.63
90.37
86.88
91.20
91.36
90.99
91.41
91.05
90.37
91.51

Av
89.17
88.55
80.90
90.47
90.58
88.60
84.17
91.10
91.51
90.47
90.32
86.78
91.20
91.31
91.15
91.67
90.99
90.27
91.36

Md
89.17
88.55
80.90
90.32
89.90
87.35
83.60
90.58
91.36
90.47
89.48
85.94
90.58
91.25
90.58
90.99
89.69
89.22
91.78

Mx
88.70
87.61
79.44
89.28
88.65
87.25
83.24
89.59
88.70
88.81
87.87
84.64
89.59
88.96
88.81
88.86
88.34
88.24
88.91

MV
88.91
85.58
77.93
90.06
90.06
86.93
83.34
90.32
90.06
88.39
88.55
84.54
89.59
90.32
90.06
90.47
89.59
88.81
90.89

FI
87.82
89.38
75.90
89.80
89.43
88.29
83.08
90.94
90.89
90.16
89.54
85.79
90.84
90.89
90.73
90.89
89.85
88.96
91.46

DS0
89.22
88.86
79.44
90.47
90.58
88.96
83.86
91.31
91.62
90.58
90.47
86.15
91.72
91.36
91.20
91.46
91.04
89.38
91.46

DS1
89.33
89.90
80.37
90.58
90.32
90.11
84.64
91.78
91.62
90.94
91.57
87.40
91.93
91.93
91.62
91.83
91.83
90.42
91.93

Table 15: Speaker identification accuracy using different combination methods (3 speakers)

358

DS2
89.17
89.95
79.85
91.20
90.21
90.58
85.06
91.51
92.04
90.21
91.46
87.35
91.78
92.40
91.88
92.09
91.41
90.32
91.98

A New Technique for Combining Multiple Classifiers

Classifiers
c1 , c2
c1 , c6
c5 , c6
c1 , c2 , c3
c1 , c2 , c6
c1 , c5 , c6
c4 , c5 , c6
c1 , c2 , c3 , c4
c1 , c2 , c3 , c6
c1 , c2 , c5 , c6
c1 , c4 , c5 , c6
c3 , c4 , c5 , c6
c1 , c2 , c3 , c4 ,
c1 , c2 , c3 , c4 ,
c1 , c2 , c3 , c5 ,
c1 , c2 , c4 , c5 ,
c1 , c3 , c4 , c5 ,
c2 , c3 , c4 , c5 ,
c1 , c2 , c3 , c4 ,

c5
c6
c6
c6
c6
c6
c5 , c6

WS
87.45
84.78
74.00
89.18
87.96
85.60
80.84
89.77
89.26
87.84
87.06
84.74
89.61
89.77
89.26
89.10
88.00
88.99
89.42

Av
87.53
83.79
74.47
89.18
88.08
85.41
80.68
89.85
89.22
87.33
86.74
84.38
89.61
89.73
89.14
89.06
87.88
88.87
89.26

Md
87.53
83.79
74.47
88.24
87.53
83.32
79.58
89.65
88.71
86.90
86.23
84.30
89.02
88.83
88.36
88.20
86.98
87.21
88.91

Mx
87.29
83.40
72.03
88.16
86.35
83.52
77.18
88.04
87.29
86.35
83.99
80.72
88.00
87.45
87.29
86.74
85.21
85.80
87.37

MV
86.98
81.55
71.28
87.92
87.33
83.12
78.76
88.59
88.20
87.10
85.44
83.01
88.47
88.87
88.04
88.36
87.45
87.06
88.24

FI
86.55
85.48
69.83
88.32
87.25
84.66
80.29
89.65
88.75
87.37
86.82
84.07
89.18
89.06
88.55
88.36
87.92
88.00
89.22

DS0
87.69
83.87
71.99
89.10
87.65
84.62
78.80
89.61
88.91
87.65
86.66
83.83
89.61
89.61
89.18
88.95
87.88
87.92
89.54

DS1
87.73
85.37
73.29
89.38
88.08
86.15
81.51
90.17
89.50
88.32
88.16
85.68
90.01
89.93
89.73
89.65
89.38
89.26
89.89

Table 16: Speaker identification accuracy using different combination methods (4 speakers)

359

DS2
87.41
84.78
73.13
88.87
87.41
85.13
80.68
89.61
88.71
87.69
87.14
84.66
89.73
89.50
88.59
88.95
89.02
88.75
89.73

Al-Ani & Deriche

References
Aha, D. (1995). Machine learning. Tutorial presented at The 1995 Artificial Intelligence
and Statistics Workshop.
Alkoot, F., & Kittler, J. (1999). Experimental evaluation of expert fusion strategies. Pattern
Recognition Letters, 20, 1361–1369.
Chen, K., & Chi, H. (1998). A method of combining multiple classifiers through soft competition on different feature sets. Neurocomputing, 20, 227–252.
Cho, S., & Kim, J. (1995a). Combining multiple neural networks by fuzzy integral for robust
classification. IEEE Transactions on Systems, Man and Cybernetics, 25, 380–384.
Cho, S., & Kim, J. (1995b). Multiple networks fusion using fuzzy logic. IEEE Transactions
on Neural Networks, 6, 497–501.
Denoeux, T. (2000). A neural network classifier based on Dempster–Shafer theory. IEEE
Transactions on Systems, Man and Cybernetics, 30, 131–150.
Dietterich, T. (1999). An experimental comparison of three methods for constructing ensembles of decision trees: Bagging boosting and randomization. Machine Learning,
40, 139–158.
Hansen, L., & Salamon, P. (1990). Neural network ensembles. IEEE Transactions on
Pattern Analysis and Machine Intelligence, 12, 993–1001.
Hashem, S., & Schmeiser, B. (1995). Improving model accuracy using optimal linear combinations of trained neural networks. IEEE Transactions on Neural Networks, 6,
792–794.
Ho, T., Hull, J., & Srihari, S. (1994). Decision combination in multiple classifier system.
IEEE Transactions on Pattern Analysis and Machine Intelligence, 16, 66–75.
Kittler, J., Hatef, M., Duin, R., & Matas, J. (1998). On combining classifiers. IEEE
Transactions on Pattern Analysis and Machine Intelligence, 20, 226–239.
Kohlas, J., & Monney, P. (1995). A mathematical theory of hints. An approach to the
Dempster-Shafer theory of evidence. Berlin: Springer–Verlag.
Lam, L., & Suen, C. (1995). Optimal combinations of pattern classifiers. Pattern Recognition
Letters, 16, 945–954.
Liu, W., & Bundy, A. (1992). The combination of different pieces of evidence using incidence
calculus. Tech. rep. RP 599, Dept. of Artificial Intelligence, Univ. of Edinburgh.
Mandler, E., & Schurmann, J. (1988). Combining the classification results of independent
classifiers based on the dempster–shafer theory of evidence. In Gelsema, E., & Kanal,
L. (Eds.), Pattern recognition and artificial intelligence, pp. 381–393. North-Holland.
MIT, SRI, & TI (1990). DARPA TIMIT acoustic-phonetic continuous speech corpus..
http://www.ldc.upenn.edu/doc/TIMIT.html.
Rogova, G. (1994). Combining the results of several neural network classifiers. Neural
Networks, 7, 777–781.
Shafer, G. (1976). A mathematical theory of evidence. Princeton University Press.
360

A New Technique for Combining Multiple Classifiers

Smets, P. (1990). The combination of evidence in the transferable belief model. IEEE
Transactions on Pattern Analysis and Machine Intelligence, 12, 447–458.
Smets, P. (1998). The transferable belief model for quantified belief representation. In
Gabbay, D., & Smets, P. (Eds.), Handbook of defeasible reasoning and uncertainty,
pp. 267–301. Kluwer.
Smets, P. (2000). Data fusion in transferable belief model. In 3rd Intl. Conf. Information
Fusion, pp. 21–33.
Sugeno, M. (1977). Fuzzy measures and fuzzy integrals: a survey. In Gupta, M., Saridis, G.,
& Gaines, B. (Eds.), Fuzzy automata and decision processes, pp. 89–102. Amsterdam:
North-Holland.
USC (1981). USC-SIPI image database.. http://sipi.usc.edu/services/database/.
Xu, L., Krzyzak, A., & Suen, C. (1992). Methods of combining multiple classifiers and their
applications to handwriting recognition. IEEE Transactions on Systems, Man and
Cybernetics, 22, 418–435.

361

	
 	 

 
  !#"%$'&)(+*,,*-/.,0$213.*&

45678 9;:<,*0=?>6
  "9%$!*<,*

@BADCFE)GHIJLKNMONE)OQPRKNSDT%GVUWKNCYXLMZ[8U]\WE)G_^F`
a

EbHVcDUdONUWeU%Tf^hgfiDOkjlCNCNe5M[8gmHVMUWi

npoqr/q/sutvq/wyx)z{or/z{o
]25m]'  	0
      8 5  0
   ¡ D¢£
¤¡¥¡¥¡¥¡¥d¦  5§ '0¨]©_'  	   

|/}~~/ ~/]{}/}/W} }

ª«q¬q®­mq¯oq±² °
¸¹º  »m¼  »  	D     ¸ 	
  ½
¤¡¥¡¥¡¥ÁÀ ¨Â   	  ±¼{Â 		    

~/|~± ³¡~´}~µW¶·¡ ·5
	  d¾¡¿

ÃyÄmÅ¡Æ¹ÇÈVÉ{Æ
ÊbËÌ+Í8ÎÏ?Î{Ð5Ñ)ÎÑ'Ð0Í!Ð5ÒÓÍ)Ï?ÒNÏ?ÎÎÑ'ÔÏ¡ÕËdÓ'ÔÖÐ×¹Î{Ð5Ñ!Ó!Ø#Ù¡ÚÌ+Û¹Ð0ÛDÍ!ÚÜÙ¡Ñ'Ô¡ÚÎDÛ¹Ì+Í'ÕÔ	Ý¡Ð5Ñ'Þ¡ßÊbËÐfàÖÏ?Ì ÒNÍÓ'Ð5Î
Ô?áÓ'ËÐ;Í!ÚÜÙ¡Ñ'Ô¡ÚÎâÛ¹Ì+Í'ÕÔ	Ý¡Ð5Ñ'ÞWÎÑ'Ô¹ÕÐ0Í'Í5ã¡Ó'ËÐmÌ ÒÛ¹ÚÕÓ'Ì Ô¡ÒRÔ?áÍ!ÚÜÙ¡Ñ'Ô¡ÚÎdÛ¹Ð0Í'ÕÑ'Ì Î¹Ó'Ì Ô¡ÒÍ5ãÌ+ÍÎ{Ð5Ñ!á3Ô¡Ñ'àÁÐ0ÛÖÜÞ
ÏäËÐ5ÚÑ'Ì+ÍÓ'Ì+ÕâÜ{Ð0Ï?àåÍ!Ð0Ï?ÑÕËæÏ?ç Ù¡Ô¡Ñ'Ì Ó'ËàDã_ÚÍ!Ì ÒÙvÏäÒÔ	Ý¡Ð5ç±ÎÏ?ÑÏ?àÁÐÓ'Ñ'Ì è5Ð0ÛæÛ¹ÐéÒÌ Ó'Ì Ô¡Ò«Ô?á)Ñ'Úç ÐDêÚÏ?ç Ì ÓÞ
ë ËÌ+ÕËdÌ+ÍÏ?ÒÏ?ç Þè5Ð0ÛÖÌ ÒâÛ¹ÐÓÏ?Ì çßVÊbËÐ]Ô?Ó'ËÐ5ÑÌ àÁÎ{Ô¡Ñ!ÓÏ?ÒÓbÍÓ'Ð5ÎÍ±Ô?áÓ'ËÐmÎÑ'Ô¡Î{ÔÍ!Ð0ÛÖÍ!ÚÜÙ¡Ñ'Ô¡ÚÎdÛ¹Ì+Í'ÕÔ	Ý¡Ð5Ñ'Þ
ÎÑ'Ô¹ÕÐ0Í'Í%Ï?Ñ'ÐÖÓ'ËÐRÛ¹ÐÓ'Ð0ÕÓ'Ì Ô¡ÒæÔ?á]ÍÓÏ	Ó'Ì+ÍÓ'Ì+Õ5Ï?ç ç ÞvÍ!Ì Ù¡ÒÌ é{Õ5Ï?ÒÓ%ÎÑ'Ô¡Î{Ð5Ñ!Ó'Ì Ð0ÍfÔ?á]Í!Ð5ç Ð0ÕÓ'Ð0ÛæÍ!ÚÜÙ¡Ñ'Ô¡ÚÎÍfÏ?ÒÛ
Í!ÚÜÙ¡Ñ'Ô¡ÚÎFÝÌ+Í!ÚÏ?ç Ì è0Ï	Ó'Ì Ô¡ÒìÍÓÏ	Ó'Ì+ÍÓ'Ì+Õ5Ï?ç ç ÞFÍ!Ì Ù¡ÒÌ é{Õ5Ï?ÒÓÎÑ'Ô¡Î{Ð5Ñ!Ó'Ì Ð0ÍÏ?Ñ'ÐÁÚÍ!Ð0ÛíÓ'ÔNÐ5ÒÑ'Ì+ÕËFÓ'ËÐdÛ¹Ð0Í'ÕÑ'Ì Î¹Ø
Ó'Ì Ô¡ÒÍ8Ô?á_Ì ÒÛ¹ÚÕÐ0ÛDÍ!ÚÜÙ¡Ñ'Ô¡ÚÎÍ5ã ë ËÌ ç Ð;Ó'ËÐÝÌ+Í!ÚÏ?ç Ì è0Ï	Ó'Ì Ô¡ÒDÍ!ËÔ ë Í8Í!ÚÜÙ¡Ñ'Ô¡ÚÎRÎÑ'Ô¡Î{Ð5Ñ!Ó'Ì Ð0ÍbÌ ÒRÓ'ËÐ;á3Ô¡Ñ'à
Ô?áÛ¹Ì+ÍÓ'Ñ'Ì ÜÚ¹Ó'Ì Ô¡ÒÍ8Ô?á_Ó'ËÐfÒÚà%Ü{Ð5ÑÍ8Ô?áVÐ×Ï?àÁÎç Ð0Í8Ì ÒDÓ'ËÐ%Í!ÚÜÙ¡Ñ'Ô¡ÚÎÍ5ß±ÊbËÐ%Ï?ÎÎÑ'ÔÏ¡ÕËRÌ+Í8Ì ç ç ÚÍÓ'ÑÏ	Ó'Ð0Û
ÜÞÖÓ'ËÐÑ'Ð0Í!Úç ÓÍbÔ¡Ü¹ÓÏ?Ì ÒÐ0Ûâá3Ô¡Ñ)ÏWàÁÐ0Û¹Ì+Õ5Ï?çÎÑ'Ô¡Üç Ð5àîÔ?á_Ð0Ï?Ñ'ç ÞâÛ¹ÐÓ'Ð0ÕÓ'Ì Ô¡ÒRÔ?á_ÎÏ	Ó'Ì Ð5ÒÓ8Ñ'Ì+Í!ïdÙ¡Ñ'Ô¡ÚÎÍ5ß
ðVñNòó Æ¹Çô8õ]ö]É{Æ÷ô ó
øfùú3ûâü/ýü_þ	ÿDýÿþ?ûûþ?ûùþvüÿ	þ
Wû¹ÿüú3û¹þ	ÿ%ùú5ù	ý_þþþ
ýæü$¹ü	3ý%ú#&fúú#úý3û%ý

ýæüÿ¹ü_þ	ÿ'&(ùûþFúú#úý3û)mþFýÿþFú*þ	ÿþ?û+þ

ü$¹ü	3ý%ú#æû¹ÿü/û)ùý%ÁýÿþDû+ý%ú3û+ú	ý#&.

ý¹û!"ú#¹þ

ú-,-


/û+Áú*þ	ÿþ?û+ú0#,þ1 1#,ýÿþDý¹û23ýÿ¹þDý¹û%ü$ûûú#	þ
ÿþ?ûü_þ;+<
 ùþ
üÿ¹ü_þ	ÿ'=fú*þ	ÿþ?û+"68>7'
? û+¹þ-,A@BBC5DFE®ÿ_þG,H@BBI*,KJ%LL@9M14NO ûPä

 ý¹úQ* ÿ5ú#	 ú#B
 ú3ûdý3
 þ!

Nþ!ùR# ûüü$¹ÿúSùþRüÿRþ?ûûT]þUü_þ	ÿWVX
 úþ û¹
 ÿ
 ü&ú3û¹
 þ	ÿ1;{
Y ü_þ	 úZ	 ý#,	m
 þ
ú*ÿRþíý=¹þmü/ýÿ5ý
Nþ!ÿ5ú#[	þþú#ú#<f
 ÿM þ]\5
 ý3 ú#'<
 ûþ ú ý«ùþ
 ÿ5ú3û+ ú;_
 þ?ý
 ûþ?ýÿM5 ù
ý#¹ÿ5ú#ù
4,ýÖÿMþû/ûþ!)ûþþú#äý#¹
 ÿ5ú# ù
 ú¹
 ÿü$¹
 ÿ5ý% úÁ
 þ
U ýN

 ü	 þ(m
 þ?ú#
 ù* û!,* ùþ^þ! þ ú#S
û+ý%ú3û+ú	ý#äûú#úZ	ý*)üÿ¹ü_þ	ÿ
 úþ?ûF±
 ûþ þ þvû¹
 ÿ
 ü/û!{
, ýFý¹
 þ_
 û¹
 ÿ
 ü]
 ú3û
 ý3 ú#?[ ý% ú#

Nþ!ùR-1`_T úRV'þ	üù ý
 ý#
 ûú3û7( ùþFüÿ¹
 ü$
 ûþ\5
 ý3 ú#'<N

 þ?ý¹û
 ÿþvú3ûdüÿ
 úþ ý¹ûm
 þGæ
1 øfùþ
üÿ¹ü$ûþS
Nþ!ùR#N
 ùý¹ûF_
 þ	þä
 ýüü	3 úþ;+P ùþ^N

 þú	 ý
 üÿ	 þ
a-þ! þ úR
 ýSþ?û ÿ5ú#/
 ú
ü/ý%úþ*)¹
 ÿ
 ü/ûA%
 ú# ùpùú#
 ùvÿ5ú3û+b]:¹ ÿWýÿ ùþ	ÿ
 û! þ	ÿ úc¹
 ÿ
 ýÿp
 ùþ?ýÿ^ú3ûþ?ý¹ûþ]6XdAeTf79M1 $
øfùþdü/ýü_þ	ÿ^¹
 ÿ
 ý
 ú#?[ ý% ú# ú3û%ý¹û^:#%
 û!1(_T#¹
 ÿ5ú# ùä

 û(:¹
 ÿWû¹
 ÿ
 ü`þ! þ ú#y
 ý«ûþ þ ú#-,
%ùú5 ù ýÿþ; ùþ/ä

 ý¹úy
 ú¹ ÿþúþ* û^g ùþRþ
U ü_þ	ÿWVX
 úþyû¹
 ÿ
 ü=ú3û¹
 þ	ÿ=N

 þ! ùR#±
, ýÿþ
þ?û
 ÿ5ú#_
 þpú={
Y þ ú#`J51){
Y þ ú#=D
h üÿþ?ûþ* û!gùþP¹
 ÿ
 ýÿæ
 ùþ?ýÿ^ú3ûþ?ý¹ûþÖÿ5ú3û+b"¹
 ÿ
 ü`þ! þ ú#
üÿ	 þ
4,(
 ùþ<ú3û¹ þ	ÿþ ü/ý% úþ*v
 ÿ5ú3û+bi¹
 ÿ
 ü/û!,) ùþ?úÿpû+ ý% ú3û+ ú	 ý25 ùýÿ5ý þ	ÿ5ú#?[ ý% ú#-,T
 ú3û
 ý3 ú#?[ ýjV
ú#-,kN

 þú	 ý)
 ú* þ	ÿüÿþ! ý% ú#®
 ý®þ! ý
 ý% ú#-±
, ú!úF
 ý3ú3û!
 ûûú#`Q ùþNþ
U ü_þ	ÿ!0 ûÖÿ þäú
ý

ùý¹þ3ùþ4
/û+/5ûýmû+ý%ú3û+ú	ý768ú3û+ÿ5ú#	ú#ý:925ùýÿ5ýþ	ÿ5ú3û+ú	û;%ú#ù

lnmokp qnrMsXt uXvjw(xyZrMsRxGzj{jqMsXrnzj|F}~OuX~WOuXt rnFM%}xG~Wp ~WOuXt rnFv%+~{~W~WKt w(|jp ~Ww(~W!uX~+}kt uXvj~rnp t j~Ku'kTt jt jq~OsX~Os
 MwH{~OsXqn~OsF wHzjn5Mnl'R|jzj{jp t Wp P+nMt p M{jp ~(uK!n	8M5Gn	!7 ¡vjt 'v+MP{~HuX~Wx8uX~+}7t }rnw)Mt jx
 ¡t uXv;zj|PuXr7n¢M2~O£jMw(|jp ~WxWm^ow(rMsX~(xGrn|jvjt x8uXt +uX~+}t w(|jp ~Ww(~W!u'uXt rnrMy$uXvj~)Mp qnrMsXt uXvjw(xFt xgjrMug+nMt p M{jp ~(yZrMs
|jzj{jp t zjxG~nm
¤

*,,*	¥	9	' f9A¦;H§V0 7)g¨{6
  "'©
 
¡ "/ª9j©

~´}~µ 

~/]{}/}



ùþvû¹ÿüú3û¹þ	ÿ®üÿRþ?ûû!1<Y{þú#
üÿúþ?ûRý úRV'þ	üù ýý#ûú3û7(ùþFüÿ¹ü$ûþ
ÿM þ\5
 ý3 ú#'`N

 þ?ý¹û
 ÿþ:¹ ÿÖû¹ ÿ
 ü&ú3û¹þ	ÿ«ú!úäýyþUü_þ	ÿ5ú
Nþ*ý
Nü/ýÿ5ú3û+`%ú#ùyý
ûþ þ
 þ`
 û+WVX/
 ý¹ûþ`\5
 ý3 ú#'N

 þ?ý¹û
 ÿþ1 bú
 ý#,{
Y þ ú# Rüÿ
 úþ?û)3 ú
b ûH+S ùþdÿþ3 ý% þ4H¹
 ÿb1


	

bñ ö)ÄÇô±ö
B÷!ÅÉôÇ®ö



òó õ]ö]É{Æ÷ô ó

È ó õ

 /É{Æ÷ô
ó

øfùú3ûmûþ
 ú#4þ?û ÿ5ú#_
 þ?ûF ùþ2'HSä

 ý¹úv
 û+ þ	ü/ûHk ùþT¹
 þ	ÿ5ýV
 û¹
 ÿ
 üú3û¹
 þ	ÿí
 üÿR þ?ûû!)únV
ú#DýNûþþú#ú*þ	ÿþ?û+úÖû¹ÿü/û!1±øfùþ?ûþA'Hdû+þ	ü/û!,ý¹ûmþý¹ûùþA%ùþAþ?ûÿ5úüú#¹þ
ú
 ú#F
 üÿR þ?ûûfý¹ûûN

 þdý ú#¹ þâþ
U ü_þ	ÿf
 ú*#¹
 þN

 þ*!1

!#"$&% z $ (q '*),+-/.1032)z{o5476	t98;:¬z{¬=<38±xr/o>+?82 @n :A' ² +{¯z{o5B

DC

øfùþ;ý¹û+b&mþUü_þ	ÿWVXúþyû¹ÿü<ú3û¹þ	ÿ®ýÿþ?ûûþ®ú=ùú3û2H¹ÿb&ú _þ	ÿ5ûÁû3ú#ù*#3ÿ


ùþâû¹ÿü3ú3û¹þ	ÿý¹û+b4þþpú`Y{þú#@dýpüÿ¹ü$ûþ5Q68>7'? û+¹þ-,¡@BBC5DE®ÿ_þG,
@BBI9M1FNW
 û+ þ?ý;þ
 úW
 ý;¹ ü úä

 ýN

 þ?ý¹û
 ÿþA:¹
 ÿ)ý+ä

 ý% þäû¹
 ÿ
 üDûþ?ýÿM5 ùäýNûþ þ ú#-,
ùþ	ÿþc
 ùþ7
 ý±
 ú3ûA+
k ùþÖþ
U ü_þ	ÿf
 úp
 ü_þ	ÿ:¹
 ÿMä

 ú /þ
U ú#	 þÁýpþ _þ ú#¹
 þRûþ?ýÿM5 ù38
 ý;
 ÿ
 ý
ÿ5ý¹
 þ=7¹ ü úä

 ýW
 û+ ú#
 û!1 W
_ ûvý
 ûþ\5
 þ þ,^ ùþ&þ	 ú3ûú# 7%
 ùú5 ù û¹
 ÿ
 ü/ûS%
 ú)_
 þ
ûþ þ
 þ3+/:¹ ÿM
  ùþ2
 ýV
 û+ ú#v
 ú3û) þ!:A+S ùþÖþ
U ü_þ	ÿ!]
1 øfùþ2 ý¹û+b ùþdû¹
 ÿ
 ü3ú3û¹
 þ	ÿ
ý#¹
 ÿ5ú# ù
 ú3û+Á
 þ
 ý%	 þH ùþ(þ! þ ú#//
 ÿM þ?ûþ?û ÿ5ú#/
 úf
 ü$ þ* ú3ý#7¹
 ü úä

 ý
 û¹
 ÿ
 ü/û!,j%
 ùú5 ù
ýÿþ^5
 ùýÿ5ý þ	ÿ5ú#	[ þ]5; ùþfüÿ¹ ü_þ	ÿ' ùý%F ùþ!N
 ýÿþ^¹
 ÿÿþg:¹
 ÿHä

 ý*; ýÿ¹
 þ!H!3 ý¹ûûg	 ý¹ûþ?ûT6 ü/ý% úþ* û
%ú# ù¹ ÿ
 ýÿB
 ùþ?ýÿú3ûþ?ý¹ûþ8
, ú< ùþíþ
U ýN

 ü	 þ"ä

 ý¹ú
 ûþ úQ ùú3û7H¹
 ÿbÖ
9 ý ú¹
 ÿÿþP:¹ ÿ
ýG,-¹
 ÿP
/
 û+cO,kRVX ýÿ¹ þ!P!3 ý¹ûû7	 ý¹ûþ?û"#6 ùþ?ý# ù*y
 û þ ûn9MN
1 øýÿ¹
 þ!P!3 ý¹ûûc	 ý¹ûþ?ûâú!þ ú*+
ýNû¹
 ÿ
 üæýÿþ7	 ý þ
A%
 ùú þcRVX ýÿ¹
 þ!^!3 ý¹ûû)	 ý¹ûþ?û%ú¹
 ÿÿþ#F
 ú!þFú*+í
 ý
û¹
 ÿ
 üæýÿþ7	 ý þ
n1
øfùþNü/ýÿ
 ú!3 ýÿÖþ
U ü_þ	ÿWVX
 úþ®û¹
 ÿ
 üQú3û¹
 þ	ÿ& ý¹û+®
b ýÿþ?ûûþ®ú& ùú3ûcH¹
 ÿy
b ý¹ûûN

 þ?û
ùþ&3 ý%$¹ ÿ5ý% ú# P ùþ þ
U ü_þ	ÿv
 ý  ùþ<ý% ý ý
 ý#
 û+v
 ú ÿþ	ü_þ?ý% þ# ÿM
 úB
 ý û¹
 ÿ
 ü
ú3û¹
 þ	ÿp
 ý#¹ ÿ5ú# ù
 %
 ú# ùpý/
 ý¡kúR
 ÿM þ?û(þ?û ÿ5ú#/
 úR
 ü$¹
 ü	3 ý% ú#v
 û¹
 ÿ
 ü/ûA%
 ùú5 ù-

9EGF5HIHKJMLON

QP

OC

SR

TNULGFVWHKJ>EGXUNUXAYVGE
Z7[M\ E*VHKJ>EGXUNUXAYVGE

S^"	úþ*#"3ýÿ¹þ7¹þ	ÿ5ý%¹þ,

]
]

ùý¹þRû

S^"	úþ*#43ýÿ¹þPÿMþ

ùý¹þNýäü$ûú#ú#¹þP/ú3ý¹û)+;ýÿMûTýÿ¹þ!c!3ý¹ûûT	ý¹ûþ;¹þ	ÿ5ý%¹þ`6#ùý¹þNýFû

>_#ý3ûþÖü$ûú#ú#¹þÁÿ5ý%ú#59

ü$ûú#ú#¹þ

S^"	úþ*#"ú#¹þ	ÿ5ûþc:¹ÿ^þ!þú]
/û+)ùþ7ýÿ¹þ!%ü$¹ü	3ý%ú#-,ý
] 8Zjùþ	ÿþUü_þ	ÿû!0¡ûSR þú#¹þg
Nþ?ý¹ûÿþ?û¡ý!þ	üý%/ú3ú#'kþ	ÿ5û+ýý%/ú3ú#',¡ûú
Nü	3ú	ú#'
]

ýÿþâû

ýæýú#ý%/ú3ú#'1

NW þ?ý5 ù ú# þ	ÿ5ý% ú#-,A ùþ` ý¹û+b 2 ùþ û¹
 ÿ
 ü ú3û¹
 þ	ÿ ý#¹
 ÿ5ú# ùh

 ú3ûS+ û¹
 þ?û+"
 þ`¹ÿ

/¹ÿþRü$þ*ú3ý#4¹üú
äýû+ú#û!1cY{þú#&J51 Jþ?ûÿ5ú#_þ?û%ýFùþÿ5ú3û+údûþ?ýÿM5ù®ý#¹ÿ5ú#ù
 YRf,
%ùú5 ù 	 ý _
 þ=
 ûþ +
 û+ ÿM"ä

 ý* ÿM þ?ûS ùý%F
 ýÿþ=¹
 ü úä

 ý)%
 ú# ù ÿþ?ûü_þ"+ ý þ
U ü_þ	ÿ
ûþ þ
 þi¹þ
 þ	ÿ5ý3 ú#?[ ý% ú# ü/ýÿ5ýN

 þ! þ	ÿ1 
Y ú þä

 ý*T ùþpú þ ÿM þ?û	 ýi_
 þ¹
 þ	ÿ ûúä

 ú3 ýÿ,
$ ùyú= þ	ÿMä

 û2g ùþ?úÿc¹ þ	ÿ5ý%¹ þFý&ùþNûþ þ þ<þ?ý%
 ÿþ?û!,- ùþ 2Y«
Y ý#¹
 ÿ5ú# ù
 þ?û ÿ5ú#_
 þ ú
Y þ ú#PJ51 h(	 ý7_
{
 þF
 ûþ2+%
 ûþ þ±
 ýfûä

 ý5
P_
 þ	ÿ-Rú3û+ ú_
 ÿM þ?û$ ùý%
 ýÿþF _þ	ÿþ7+) ùþ8þ
U ü_þ	ÿ
ý¹ûíü$
 þ* ú3ý#¹ ü úä

 ý%
 û+ ú#
 û!1 _T# þ	ÿM
 ý% ú#¹
 þ#
, û¹
 ÿ
 ü ú3û¹
 þ	ÿ 	 ý _
 þ«úN

 ü	 þN

 þ* þ
%ú# ùú ý`. m
 þ?ú#
 ù* þ-0¡¹ þ	ÿ5úæ
 ý#¹ ÿ5ú# ù
 f <Y
, ý¹ûÖú3ûT ùþS	 ý¹ûþäú= ùþDü		3 ú!#p
 ý ý¹ú3 ý%	 þ;Á
f ý% ý
ú
 ú"{
Y þ	ÿ¹ þ	ÿS6 Áý
P_
 þ	ÿ¹ þ	ÿ
YR
%,-J%LL@9M,-%
 ùú5 ù3¹
 þ
 þ	ÿ5ý% þ?ûc
 ü`+" ùÿþ	þP_
 þ?û+W
 û¹
 ÿ
 ü/ûfú
þ!¹
 þ	ÿp
 ú# þ	ÿ5ý% ú#-1

a

`

c

edgf

ba

h*i>j

MC

 } 
	

 	

|/|

!  $&% z 3< 8±xr/o>+?82 @n :A' ² +{¯z{o5Br+/oM: 4 %

 	 

/}





3·0µ {´}

w

	

øfùþ(
 ý	$ ùþ%û¹ÿüSú3û¹þ	ÿNý#¹ÿ5ú#ù
 YRf,3úþNú bú#ÿþ7@%,ú3ûK+âûþ?ýÿM5ù]:¹ÿ)ÿMþ?û
ùý%2
äýjUú
äú#[	þ
  ,	%ùþ	ÿþ$#&%lýÿþÿMþâü$ûú#ú#¹þ?û!,'$% ýÿþP#ý3ûþâü$ûú#ú#¹þ?û!,ý)(æú3û%ý
.- /+
/0 "! n14W
e ú#
 ùQ\5
 ý3 ú#' ÿM þ?û7¹
 þ	ÿ;ä

 ý*& ýÿ¹þ!!3ý¹ûûdþUý
Nü	þ?ûdýBý3#
* ,+
5
P_
 þ	ÿHkRVX ýÿ¹ þ!;
 þ
U ýN

 ü	 þ?û!8
1 øfùþ25
P_
 þ	ÿg¡+ þ	ÿ5ý% þ4RVX ýÿ¹
 þ!(!3 ý¹ûûA	 ý¹ûþ?û!
, ÿþ3 ý% ú#¹
 þT+
ùþ75
P_
 þ	ÿ(¹ þ	ÿþ`ýÿ¹ þ!^!3 ý¹ûû)	 ý¹ûþ?û!/
, ú3û(þ! þ	ÿMä

 ú
 þ5F
 ü/ýÿ5ýN

 þ! þ	ÿ1(	1 ¹
 ÿ^#2
 (<36 (4@9M,
ú
 þvÿM þ?ûA%
 úV
 ùý¹ þRùú#
 ùpûü_þ	 úZ	 ú#'<68## ý3 ûþâý3 ýÿM
 ÿ5ý% þj
9 ûú þP¹
 þ	ÿ5úS8
 þ!¹
 þ	ÿp
 ûú þ
RVX ýÿ¹
 þ!!3 ý¹ûû±þ
U ýN

 ü	 þ]ú3ûkä

 ýþ]ÿþ3 ý% ú#¹
 þ#2¹
 þ	ÿ/. þ
U ü_þ
 ûú#¹
 þ0#6
1 527 ùþg ùþ	ÿ8ùý-,5d
 ûþ þ ú
ýpùú#
 ù7(3 ý
 þ336 (98 @!L:¹ ÿdûä

 ýä

 ý¹ú
 ûn9M,¡
/¹
 ÿþ;¹
 þ
 þ	ÿ5ýb
 ÿM þ?ûT%
 úk_
 þ¹
 þ
 þ	ÿ5ý% þ-,¹
 þ	ÿ5ú
ý3 û+SRVX
 ýÿ¹ þ!T!3 ý¹ûûfú
 û+ ý þ?û!1

V !VOL [M\ X *[NUX#J HK[ML [ V7N VOL

	

:;3<=?>@.ACBDFEHGJI"EHKLM<?>=KNGO@3PCQ=/RS>,T
UWV NMKAIYX[Z\^]O_a`3X Ó'ÑÏ?Ì ÒÌ ÒÙÖÍ!ÐÓ0ãb X b¡Ó'ÑÏ?Ì ÒÌ ÒÙÖÍ!ÐÓ]Í!Ì è5Ð¡ã
\ Î{ÔÍ!Ì Ó'Ì Ý¡Ð ` ÓÏ?Ñ'Ù¡ÐÓ)Õç+Ï¡Í'Íd±c Ð×Ï?àÁÎç Ð0Í5ã _ ÒÐ5ÙÏ	Ó'Ì Ý¡Ð ` ÒÔ¡Ò¹ØÓÏ?Ñ'Ù¡ÐÓ8Õç+Ï¡Í'Ídc±Ð×Ï?àÁÎç Ð0Ídc
e Í!ÐÓ)Ô?á_Ï?ç çÛ¹ÐéÒÐ0Ûâá3Ð0Ï	Ó'ÚÑ'Ð0Í ` Ï	Ó!Ó'Ñ'Ì ÜÚ¹Ó'ÐÝ	Ï?ç ÚÐ0Ídcã?fghe
y
ij > j DkSACS>/Il` Ù¡Ð5ÒÐ5ÑÏ?ç Ì è0Ï	Ó'Ì Ô¡ÒdÎÏ?ÑÏ?àÁÐÓ'Ð5Ñ0ã inm oqp l ãÛ¹ÐáÏ?Úç Ó)Ý	Ï?ç ÚÐ o c
rOsut vxwyyz,{,| ` àÁÌ ÒÌ àÖÏ?ç/Í!ÚÎÎ{Ô¡Ñ!Ó8á3Ô¡Ñ8Ñ'Úç ÐÏ¡Õ5ÕÐ5Î¹ÓÏ?ÒÕÐ,c
}~, r s| ` àÖÏ	×¹Ì àÖÏ?çÒÚà%Ü{Ð5Ñ8Ô?áÑ'Úç Ð0ÍbÌ Òh ~, r Ï?ÒÛ _~   ~, r c
KAxNMKAI)ZC { l~ | f  v,vqz,tHn ` Í!ÐÓ)Ô?áÑ'Úç Ð0Íá3Ô¡Ñ'àÁÐ0ÛRÔ?á }~, r s| Ü{Ð0ÍÓ]ÕÔ¡ÒÛ¹Ì Ó'Ì Ô¡ÒÍ qz,tH c
` o c  =?> Ï?ç çÑ'Úç Ð0ÍbÌ Òh ~, r Ï?ÒÛ _~   ~, r ` s Z o Ó'Ô }~, r s| c6 =

Ì ÒÌ Ó'Ì+Ï?ç Ì è5ÐÕÔ¡ÒÛ¹Ì Ó'Ì Ô¡ÒDÎÏ?Ñ!Ó8Ô?áÓ'ËÐ;Ñ'Úç Ð;Ó'ÔÁÜ{ÐÐ5àÁÎ¹ÓÞ¡ã qz,tH ` s c 
Ì ÒÌ Ó'Ì+Ï?ç Ì è5Ð;Ñ'Úç ÐfêÚÏ?ç Ì ÓÞ¡ãnW ` s c  i
` j c  B@3;3S Ó'ËÐ5Ñ'ÐÏ?Ñ'Ð;Ì àÁÎÑ'Ô	Ý¡Ð5àÁÐ5ÒÓÍÌ Òh ~, r  =
`3 c
 =?> Ï?ç çÑ'Úç Ð0ÍbÌ Òh ~, r ` s Z o Ó'Ô }~, r s| c6 =
`. c
 =?> Ï?ç çfge9 =
`h c
á3Ô¡Ñ'à ÏWÒÐ ë Ñ'Úç Ð;ÜÞdá3Ô¡Ñ'àÁÌ ÒÙÁÏÁÒÐ ë ÕÔ¡ÒÛ¹Ì Ó'Ì Ô¡ÒNÏ¡Í8ÏÁÕÔ¡Ò ÚÒÕÓ'Ì Ô¡ÒRÔ?áÓ'ËÐ
ÕÔ¡ÒÛ¹Ì Ó'Ì Ô¡ÒRá3Ñ'Ô¡à ~, r Ï?ÒÛâá3Ð0Ï	Ó'ÚÑ'Ð1f ã qz,tH ` s c qz,tH ` s cHOf
`3 c
ÕÔ¡àÁÎÚ¹Ó'Ð;Ó'ËÐfêÚÏ?ç Ì ÓÞdÔ?á_ÏWÒÐ ë Ñ'Úç ÐÏ¡Í6W Z ¡ 
¢
`u¤ c
@  ¥ ¦§¡ ¥"¨ rOsut vxwyyz,{,| jnV @ ©WfÌ+Íbç+Ï?Ñ'Ù¡Ð5ÑÓ'ËÏ?¡HÒN£ Ï?ÒÞW ` s cÌ Ò _~   ~, r
jnV @ B
 Ó'ËÐÒÐ ë Ñ'Úç Ð;Ì+Í8Ñ'Ð5ç Ð5Ý	Ï?ÒÓ =
`3ª c
Ñ'Ð5Îç+Ï¡ÕÐmÓ'ËÐ ë Ô¡ÑÍÓbÑ'Úç ÐÌ Ò _~   ~, r ë Ì Ó'ËRÓ'ËÐÒÐ ë Ñ'Úç ÐfÏ?ÒÛ
Ñ'Ð5Ô¡ÑÛ¹Ð5ÑÓ'ËÐÑ'Úç Ð0ÍbÌ Ò _~   ~, r ë Ì Ó'ËDÑ'Ð0Í!Î{Ð0ÕÓbÓ'ÔÁÓ'ËÐ5Ì Ñ)êÚÏ?ç Ì ÓÞ
`3« c
S V9 =?> á3Ð0Ï	Ó'ÚÑ'Ð0Í
` Go i c
S V^ =?> Ñ'Úç Ð0Íá3Ñ'Ô¡à¬ ~, r
` oo c
 ~, r¬ _~   ~, r
` Oo j c S V^ B@3;3S

	bú#ÿþS@%ge%þÿ5ú3û+úT_þ?ý
åûþ?ýÿM5ùæÿMþcû+ÿMú#æý#¹ÿ5ú#ù

­

:¹ÿ%û¹ÿü4ú3û¹þ	ÿ1

( þ ý%	 þ?û2 ùþNþU ü_þ	ÿ2+3 úþNû¹ ÿ ü<ú3û¹ þ	ÿy
 ú&ùþ#&%&®'$%
6 ü	#+þ]Sùþ°¯3V!ýjUú3ûn9Kþ	þûF+P_þ^
äúú
äú#[	þ-,¹ýh#&% 6ü	#+þ]Sùþ
± V!ýjUú3ûn92þ	þûc+3_þS
äýjUú
äú#[	þ-1Nøfùþ#&%&®'$% ûü/ýþíú3ûÖûú
äú3ýÿ2+3ùþ °57d 6 fþþ?ú#¹þ	ÿh5WüV
þ	ÿ5ý%úd;ùýÿ5ýþ	ÿ5ú3û+
 úm
9 ûü/ý þ"u6 ²)ÿ
 û+
ýA
 þ!+!,kJ%LL@9M;
1 øfùþPN

 ü/ýÿ5ú3û+ùþ °57duý
#&%&®'$% ûü/ýþWýSùþ1(³ùþ ÿ5ú3û+ ú;
 ýÿþWý
 ý#5	[ þíúSþ! ý¹ú
 ú"{
Y þ ú#
 ûHJ51 Dý {
, ÿþ?ûü_þ ú#¹
 þ#1
ýÿú4ùþ/ýþ;

'$%

ûü/ýþ,ú/%ùú5ù

`

d 	



h*i 

U`



Q`

~´}~µ 

~/]{}/}







  
#%$ & '(' ) # *
-, #%. /

_T#¹ÿ5ú#ù
 YRf ý%b¹þ?ûvý¹ûíú#ûäúü	/ùþ`
Nü	þ!þ3ÿ5ý¹úúBûþ!
ýiùþ`þ?ý%ÿþ«ûþ! ),
%ùþ	ÿþT þ?ý%
 ÿþ?û
ýÿþ2#ú	ý$ú#ú#ûHû+ÿMþ"ÿ
Lý%+ÿ5ú#	þTýþ?ûAþ?ûÿ5ú#/ú7ùþ
þUýN

 ü	 þ?ûRú S1 ¹ÿ/ú3ûÿþ!þ&68	ý%þ!¹ÿ5ú	ý:9Rý%+ÿ5ú#	þ?û!,þ?ý%ÿþ?ûDùý¹þ"ùþ":¹ÿM


c¹ ÿ

,:¹ÿ)5
Nþ	ÿ5ú	ý_ý%+ÿ5ú#	þ?ûAùþ!vùý¹þ7ùþc:¹ÿM

8
¹ÿ
Á
1 øk":¹ ÿMä

 ý3 ú#	[ þP þ?ý%
 ÿþ;
 û+ ÿM ú#-,$ þ!T ý
 þ?û
6 9 @
9)þþ
ùþ
ú _þ	ÿþ*T
 ý
 þ?ûTm
 ý%+ ÿ5ú#	 þ
 ùý%Ö

 ýüü_þ?ýÿÖú` ùþDü$
 ûú# ú#¹
 þRþ
U ýN

 ü	 þ?ûÁý
6 k
@
9( ùþ
ú _þ	ÿþ*^
 ý
 þ?û)
ýüü_þ?ýÿ5úí
 ú4 ùþ;
 þ!
 ý% ú#¹
 þRþ
U ýN

 ü	 þ?û!1^_ ûþ!^F þ?ý%
 ÿþ?û
ú3û)
 û+ ÿM þæý¹û):#%
 û!


	 	
  
  

"!  
+) # * DC
'(' ) #%0 ") #%0 DC


"
 #
1
 #

 , #%. ýÿþ7¹þþ	ÿ5ý%þ-1
] 	¹ÿTú3ûÿþ!þdý%+ÿ5ú#	þ?û2
 # ,þ?ý%ÿþ?û)ùþc:¹ÿM
3
 #  #%$ ý
 # 4
] 	 ¹ÿ)*ú5ûmý%+ÿ5ú#	þ?û
 # ,ûú
äú3ýÿg+ 	ý5ýæý]N'ÿ5ýú6W@BBJ9M,þ?ý%ÿþ?ûH¡ùþT:¹ÿM



 # a
4 6  #%$65 , %# . 9®%Jíýÿþ;ÿþ?ý%þ=:¹ÿWýkþ?ú#ù*$¹ÿ5ú/ýþâü/ý¹úÿ5ûP6 #%$87 , #%. 9M,_ý`þ?ý%ÿþ?û

 # 8 6 #%$5 , #%. 9®%J;:¹ÿWý-þ?ú#ù*$¹ÿ5úRü/ý¹úÿ5û76, #%.97#%$ 9M1
] 	¹ÿNú*þ!¹þ	ÿ;ýþ ý%+ÿ5ú#	þ?û:
 # ,Kþ?ý%ÿþ?ûRýÿþ"¹þþ	ÿ5ý%þ ý¹ûRú#2
 # mþ	ÿþ]$ùú3ûÿþ!þ
ý *ú5û!,%ÿþ?û#ú ú þ?ý%ÿþ?ûP:ÿ4úDC_þ	ÿþ*":¹ÿM
äû!	
 # 4
6 #%$+5 , #%. 9®%J5,

 # 8 6 #%$5 , #%. 9®%J5,;
 #  #%$ ,/ý<
 # 4
 , #%. 1
(Nü/ýÿ5ý
Nþ!þ	ÿ,R	;úäüÿ5ýúþ2ùþ

øfùþ	ÿþÁú3ûHùþ!¹ÿþ!ú	ý$üü_þ	ÿgýþ^:¹ÿAùþ2ûþ	ÿ+Vÿþþ

	¹ÿNúû+ýþ,

û¹þ?û+þüü_þ	ÿP3ú
äú#âûùQRþUþ	þùþ"5
P_þ	ÿ(ÿ5ý¹úúæþUý
Nü	þ?û!1

a úú<Y{þ	ÿ¹þ	ÿNýÿþpúùþFÿ5ý¹þ_þ!'mþ	þLR1@pý @!LLR,g:¹ÿ
%LäþUý
Nü	þ?û!1]øfùþ75ùúþP (vûù_þdý>Rû+þ$ù4+]ùþ
ûú#[	þcùþ7ý%ýäûþ!%ý4+Sùþdüÿ¹ü$¹ÿú#"bü$ûú#ú#¹þÁþUý
Nü	þ?ûfúùþâûþ!!1
_T#¹ÿ5ú#ù
 YRfåùý¹û7'Hyýú#ú#ýbü/ýÿ5ý
Nþ!þ	ÿ5ûP%ùú5ùBýÿþ]'{ü/ú	ý#<Rý>Rû+þ<5<ùþ
(Qýþ?ûRúùþ4fÁý%ý

û¹þ?û+þ

ýý#ûú/ý%ýíûþ!û)ü3+"J

=<?> @ACBCB;DE

"F E

 ûþ	ÿ1Føfùþ//ÿ5û+dú3û

;68þ!#ý#7ýþíú3û
%O® S,%ùþ	ÿþJ% ú3ûcùþ]5
P_þ	ÿ7Aýÿ¹þ!
!3ý¹ûûþUý
Nü	þ?ûfú ;9H%ùú5ùvúúÿþ#]þþ?û(ùþ7
äúú
äý5
P_þ	ÿ(ýÿ¹þ!^!3ý¹ûûþUý
Nü	þ?û
%ùú5 ù4

 û+(_
 þ7¹þ	ÿþ`5Fþ!¹þ	ÿpû¹ÿü¡18øfùþdûþ«ú3û
68þ!#ý#(ýþÖú3û^J%L*9
 ùú5 ù`þ
%
 þ?û) ùþ5
P_
 þ	ÿ))
 û+ ú#
 û)¹
b þ	üW
 úæ
 þ?ý5 ùyú# þ	ÿ5ý% ú#-f
1 øfùþ7 ü	^K ùþRý#¹
 ÿ5ú# ù

ú3ûdûþ!

ú _þ	ÿþ*Ö
 ÿM þ?û2%
 ú# ùBùú#
 ùþ?û+$
 / ý
 þ?û!í
1 øfùþNÿM þ?ûÖùý¹
 þ] ùþS:¹
 ÿM
 
  ú#
 ûA þ?ý%
 ÿþ?û( ÿ
 )1
5â
 þN

 ü'â
 ÿM þHú# ú#
 û!1
øfùþ;ý#¹
 ÿ5ú# ù
 ú
 ú# ú3ý3 ú#	[ þ?û±ý5 ùþ;ÿM þ?ûú
Lý
øfùþ?úÿ\5
 ý3 ú#'2 ý
 þ?û 6 W±
9 ýÿþmûþ!+T	[ þ	ÿ/#6 û+ þ	ü4@9M1 ^ þmú
 ú# ú3ý3 ú#?[ ý% ú#Ö
 ú3û¡:#m
 þP5d
 ýR
 úR
 ú# þ
#5¹ ü4#6 û+ þ	ü/ûKJ @J9k ùý%8
 û++¹ ü/û%
 ùþ-,%:¹
 ÿbý
 ÿM þ?ûúP ùþH_
 þ?ý
4¹
, ú#b
 ú3ûT#¹
 þ	ÿbü$
 ûûú#	 þF+T8
 ÿ ùþ	ÿ
úN

 üÿ¹ þ/ ùþ?úÿc\5
 ý3 ú#'1 ^ þ?û2	 ý<_
 þäúN

 üÿ¹
 þ&#35&  ú#¹
 þ# ýú" þ?ý%
 ÿþ?ûc ÿ

)14_^: þ	ÿ ùþ//
 ÿ5û+â
 ú# þ	ÿ5ý% ú#-b
, ýæÿM þSú# ú#Q
 ûú3û+ û7f
 ýæûú þS þ?ý%
 ÿþb
, ý%: þ	ÿ ùþFûþ
ú#
 þ	ÿ5ý% ú#Q
 üQ+3'H` þ?ý%
 ÿþ?û!b
, ýBû+3:¹
 ÿ ù-í
1 øfùþíûþ?ýÿM5 ù ú3ûdû+
 û+ þä

 ý% úä
 ú& ùþíûþ
 ûþS ùý%7:¹ ÿ
ý
 ÿM þ?ûfú4 ùþP_
 þ?ý
 #6 û+ þ	ü<h
9 ý¡ þ?ý%
 ÿþ?û^ ÿ
 a#6 û+ þ	ü 5f
9 ýÿþP þ?û+ þ úæ
 þ?ý5 ùyú# þ	ÿ5ý% ú#-1 ¹ ÿ
þ!¹
 þ	ÿ"
 þ!u
 ÿM þ,R
 û+ ÿM þ5]  ú#¹
 þ#í
 ýúR
 ý þ?ý%
 ÿþ2+N
 ÿM þ^$R`#6 û+ þ	ü 9H\5
 ý3 ú#'
äú3û7N

 ü	 þ #6 û+ þ	üC9M1"NOH ùþíû
 üü$¹
 ÿ2A ùþ]
 þ! ÿM þäú3û2¹
 ÿþ?ý% þ	ÿ ùý
Áý
ú#Á
 ú# û]\5
 ý3 ú#'©
 «ú3û/¹ ÿþ?ý% þ	ÿ" ùý  ùþ`\5
 ý3 ú#'Ö
 ý* ÿM þæú
<,( ùþ3H¹
 ÿ5û+ä
 ÿM þæú
ú3ûmÿþ	ü	3 ý
 þ"5S ùþc
 þ! ÿM þ8
1 øfùþWÿM þ?ûmýÿþWÿþ!¹
 ÿMþ	ÿþvú
ý!¹
 ÿMú+
 ùþ?úÿP\5

 ý3 ú#'^
 %1"_AP ùþNþQm
 þ?ý5 ù ú# þ	ÿ5ý% ú#-,
ú3û7¹
 ü/úþBú*+
#6 û+
 þ	ü @@9M1
E ùþ4 ùþâý#¹ ÿ5ú# ù
  þ	ÿMä

 ú
 ý% þ?û!, ùþ2/
 ÿ5û+
 ÿM þÖú
ú3ûA
 ùþdÿM þ2%
 ú# ù4ä

 ýj
U ú


 1
_
 þ þ?ûûýÿ"ú# ú#<#6 úF
 û+ þ	ü=I9g:¹
 ÿýRÿM þT+;_
 þÖú!þíú
ú3ûg
 ùý%f
 ú#A

 û+
 þ
_
/+ 8m
1 øfùþc
 þ!u
 ÿM þÁú3ûúÿÿþ þ! ý*
 ú#k ùþ	ÿþÖþ
U ú3û+ ûýDÿM þ
ú
û5
 ù4 ùý%( ÿM
 þ
ü$
 ûú# ú#¹ þ?ûk	 ùþ(
 þ! ÿM þ;ýÿþ;ýÁû/
 ûþ!	 ÿM
 þmü$
 ûú# ú#¹
 þ?ûk
ý#ý3 ûþmü$
 ûú# ú#¹
 þ?ûk	 ùþA
 þ! ÿM þ

<

>R

"K 2G  = ,IHCJ DC
AP



2G  = ,IHCJ

3

"L  =



`

"MNO, G  =

`

>R

>R

Q





R=<?> A@ CBCB;DE
SMNO, G   =
TMNO, G   =
UMNO, G  =
VL  =
<L  =
MNO, G  =
6W TMNO, G  =
;W

MNO, G   =

L VO\ VOYM[ N

h*i 

	

 } 
	

 	

|/|

W;1K_

 	 

/}





3·0µ {´}

f

 ý{ÿ5ý %,
Áý
P_þ	ÿ¹þ	ÿ,ýäøÿMþ!46W@BB9M,ú3ûKF$ùþ^
äý¹úNû¹ü_þ)$ùú3ûbü/ýü_þ	ÿ1K_^:þ	ÿFùþ^þ! ÿM þú3û
ú!þNú
ú#H
äýäùýüü_þ/ùý%;û+
Nþ^-ùþ%þUú3û+údÿMþ?û)ú
_þN

 þ
úÿÿþþ!ý*(%ú#ùpÿþ?ûü_þ^+Sùú3û^þ!îÿMþ1(YR5ùæÿMþ?ûfýÿþdþ3ú
äúý%þ4ÿ

ÿ5ú
ú#ûÁÿþ!¹ÿMþ	ÿ5úQ6#ú®û+þ	ü9M1íøfùþ;þ?û+ú3mÿþþ!ýþNþûÿþ?û2ùý%
* ý¹ú
 ûc#
ú _þ	ÿþ*fýpÿþþ!ý*ÿM þ?û!1
ýÿþÁýRûü_þ	ÿ5ûþ!g¡#ý3ûþ%ü$ûú#ú#¹þ?ûg

c

þ!ý¹úþFýý#ûú3ûFÿþþ!ýþ,üÿþ?ûþ*þ"5

MNO, G   =

MNO, G   =
3MNO, G  =
MNO, G  =

DC

YRf,ÿMþ(\5ý3ú#'P
Nþ?ý¹ûÿþ1ûþ	ÿ¹þ?ûK'Hdü	ÿü$ûþ?û!-/ÿ5û+!,¹ÿMþmþ!ýý%ú#-,ý
 ú#
 û-%
 ú# ùâùú#
 ùÖü$ þ* ú3ý:¹
 ÿk ùþH
 û+ ÿM ú#
Dùú#ù \5ý3ú#' ÿM þ?ûvú û/
 ûþ\5
 þ*p
 ú# þ	ÿ5ý% ú#
 û!L
1 øfùþ®ý
 ý#
 ûú3ûP ùú3û4\5
 ý3 ú#' N

 þ?ý¹û
 ÿþ®ú
Y{þú#
ûù%û4
 ùý%3:¹ ÿ3 ùþ&/
 ÿ5û+v
 ü	
 ÿü$
 ûþÁ
, ýiN

 þ?ý¹û
 ÿþBý¹ûûú#
 úiú _þ	ÿþ*4
 û+ û3+ # ý3 ûþ
ü$ûú#ú#¹þ?û;ý#ý3 ûþc
 þ!
 ý% ú#¹ þ?û)vü_þ	ÿ:¹
 ÿMl

 þ\5
 ý#]m
 þG,5	A:¹
 ÿ( ùþÁü	
 ÿü$
 ûþT
 úúP ùþ
ûþ?ýÿM5ù3ùþ7N

 þ?ý¹û
 ÿþdú3ûýý* ý%¹ þ!
 û!1
NW/_T#¹ÿ5ú#ù


>R

ûþ-,þ!ýý%ú#7þ?ý%ÿþ?ûý7ùþ?úÿ

=

DC

! 8 zT<38±x;'?z 49<Vzz ² 4>:A+s
øfùú3ûâûþú#þ?ûÿ5ú#_þ?ûâù

+  ÿþþ]ùþ5
P_þ	ÿP)¹þþ	ÿ5ý%þ ÿMþ?û7+yý«ÿþ3ý%ú#¹þ#®û
äý
5
P_þ	ÿP^ú#¹þ	ÿ5ûþFÿMþ?û!1 fþ	ú`ùþFÿMþíûþ!Nú3ûþ?ûúÿ5ý%	þS_þ	ýûþíþUü_þú þUü_þ	ÿûP+
þ!ýý%þDý]3ýÿ¹þRûþ!^8ÿMþ?ûfú3û^ þ?ý¹ûú#	 þ
, ý ûþ-,/þ
U ü_þ	ÿ5úN

 þ* û^þ
/
 û+ ÿ5ý% þPùý%Tùþ	ÿþ
ýÿþfû/ûþ!û¹þ	ÿRûú
äú3ýÿÿM þ?û%
 ùú5 ù;
 ûþý
/
 û+ ùþfûýN

 þfý%+ ÿ5ú#	 þA ý
 þ?ûbýNùý¹
 þ%ûúä

 ú3 ýÿ
üÿþúú#vüÿ¹ü_þ	ÿúþ?û!1

`

c

øfùþcm
 þ?ú#
 ù* þ`¹ þ	ÿ5úí
 ýüüÿ
 ý5 ùæüÿ¹
 ü$
 ûþ:¹
 ÿ^R/ÿM
äý%ú#pÿMþÖû/ûþ!fûþþú#6 Áý
;V
 ý{ÿ5ý %,-J%LLL*9)þþ?û)ú#¹þ	ÿ5ûþdÿMþ?ûý¹û)ùûþPùý%^¹þ	ÿcú#¹þ	ÿ5ûþdûþ!û^ýÿ¹þ!T!3ý¹ûû
_þ	ÿ¹þ	ÿ
þ
U ýN

 ü	þ?û!1bøfùþmýüüÿý5ù-,¹ú
Nü	þ
Nþ*þâú_T#¹ÿ5ú#ù
 2YY23úþâú bú#ÿþAJ5,	ý;ýÿ+V
ý*
 þ	þÁû+ ý% ú3û+ ú	 ý/
 úþ	ü_þþ þA- ùþ%ûþ þ þíÿM þ?û!,	]ú#)þûÿþ?ûKùþTú#¹þ	ÿ5ûú#'-¹þþ	ÿ5ý%þ
û/
 ûþ! û!1

1d

f

`

Q	

:;3<=?>@.ACBD
	EE I	K;3SEHKLMPCSAEHS/;3S/Q AC@3= V
UWV NMKAI  Í!ÐÓ)Ô?áÑ'Úç Ð0Íá3Ô¡ÑbÓ'ËÐ;ÓÏ?Ñ'Ù¡ÐÓ)Õç+Ï¡Í'Í
\ ÓÏ?Ñ'Ù¡ÐÓ)Õç+Ï¡Í'ÍbÐ×Ï?àÁÎç Ð0Í
ij > j DkSACS>/I t wr }~ { ` Ñ'Ð0êÚÌ Ñ'Ð0ÛâÒÚà%Ü{Ð5Ñ)Ô?á_Í!Ð5ç Ð0ÕÓ'Ð0ÛRÑ'Úç Ð0ÍbÌ ÒRÔ¡Ú¹Ó'ÎÚ¹ÓmÍ!ÐÓ " c
KAxNMKAI" Í!ÐÓ8Ô?á_Ñ'Ð5ç+Ï	Ó'Ì Ý¡Ð5ç ÞÖÌ ÒÛ¹Ð5Î{Ð5ÒÛ¹Ð5ÒÓ]Ñ'Úç Ð0Íá3Ô¡ÑbÓ'ËÐ;ÓÏ?Ñ'Ù¡ÐÓ)Õç+Ï¡Í'Í
` o c @ V @.AC@ j ;3@ S$"    ` Ð5àÁÎ¹ÓÞâÍ!ÐÓ)Ô?áVÍ!Ð5ç Ð0ÕÓ'Ð0ÛâÑ'Úç Ð0Ídc
` j c  =?> Ð5Ý¡Ð5Ñ'Þ ~ g \  
=  `3~ c  o
`3 c >SN§S j A t wr }~ { Ó'Ì àÁÐ0Í
`. c
PCS/;3S/Q A á3Ñ'Ô¡à  Ó'ËÐÑ'Úç Ð ë Ì Ó'ËRÓ'ËÐËÌ Ù¡ËÐ0ÍÓ ë Ð5Ì Ù¡ËÓ o   `3~ c ë ËÐ5Ñ'ÐÍ!ÚàÁàÖÏ	Ó'Ì Ô¡ÒDÌ+Í
\ ^\ Ô?áÓÏ?Ñ'Ù¡ÐÓ8Õç+Ï¡Í'ÍbÐ×Ï?àÁÎç Ð0Í8ÕÔ	Ý¡Ð5Ñ'Ð0ÛdÜÞÖÓ'ËÐÑ'Úç Ð
Ô	Ý¡Ð5ÑÓ'ËÐfÍ!ÐÓ 
`h c
\  ÕÔ	Ý¡Ð5Ñ'Ð0ÛdÜÞÖÓ'ËÐfÍ!Ð5ç Ð0ÕÓ'Ð0ÛâÑ'Úç Ð
 =?> Ð5Ý¡Ð5Ñ'Þ ~ g 
=  `3~ c   `3~ c  o
 
`3 c
S/;3@3Dk@ Vj ACS Ó'ËÐfÍ!Ð5ç Ð0ÕÓ'Ð0ÛâÑ'Úç Ðmá3Ñ'Ô¡à 
`u¤ c
jnv
 Ó'ËÐfÍ!Ð5ç Ð0ÕÓ'Ð0ÛâÑ'Úç ÐÌ ÒÓ'ÔÖÍ!ÐÓ "
`3ª c S V >SN§S j A

	bú#ÿþPJ5ge%þÿ5ú3û+úWÿMþÖû/ûþ!fûþþú#æý#¹ÿ5ú#ù
41
h*i>h

~´}~µ 

~/]{}/}

`

WN ü	^+_T#¹ÿ5ú#ù
 2YYpýÿþ;ùþDûþ!T]ýkýÿ¹þ!c!3ý¹ûûWþUý
Nü	þ?û&%Lý`ùþDûþ!T)ÿMþ?û
H1KNO ûgü	mú3ûmýâÿþþíûþ!AVÿMþ?û H,
H18øfùþTûþ	ÿ;ý û+ý%	þ%ü/ýÿ5ý
Nþ!þ	ÿ
þ!
 þ	ÿMä

 ú
 þ?ûùä

 ý*Á
 ÿM þ?û-%
 új_
 þ]ûþ þþP:¹ÿú!ûú#Áúcü	±ûþ! H1 ¹ÿþ!¹þ	ÿÖþUý
Nü	þ
%  ùþ	ÿþäú3ûdý4* þ	ÿ 6 j9M1]NW ú# ú3ý#,$ ùþS ü	d
 ûþ!c
 ûþ þ þBÿM þ?ûÖú3ûÁþN

 ü' #6 û+ þ	ü @9
ý ýH* þ	ÿ;
 ý
 þ?ûRýÿþvûþ!;+@&#6 û+ þ	ü J9M1 %þUR!]
, úB
 þ?ý5 ù ú# þ	ÿ5ý% ú#) ùþ#5¹
 ü #6 û+ þ	ü/û/h
+ 9M,¡
 þDÿM þDú3ûÁýþ&+ ùþ/ ü	Á
 ûþ!]#6 û+ þ	üI9M1 ÿ
 ûþ! H,¡ ùþDÿM þ%
 ú# ù` ùþäùú#
 ùþ?û+
( H ý þWú3ûmûþ þ þ-1 ¹ ÿ;þ?ý5 ùvÿM þ, ( ;ú3ûHN

 ü	 þFû+ ùý%c@ ® 6 j9g ý
 þ?ûmýÿþÖýþ
:¹ ÿäýH ýÿ¹ þ!]!3 ý¹ûûDþ
U ýN

 ü	 þ?û/¹ þ	ÿþ 5 ùú3ûRÿM þ<#6 û+ þ	ü 59M1_^: þ	ÿNÿM þvûþ þ ú#-,g ùþvÿM þ
ú3ûÖþ3 úä

 ú
 ý% þ&ÿ
 ûþ!
#6 û+ þ	üCÖ
9 ý 6 j92 ý
 þ?ûc:¹
 ÿRý ýÿ¹
 þ!;!3 ý¹ûûÖþ
U ýN

 ü	 þ?ûP¹
 þ	ÿþ5
ùþäûþ þ þBÿM þDýÿþíú ÿþN

 þ* þ&5@`#6 û+ þ	ü 9Mí
1 øfùú3ûÁú3û2 ùþS þ* ÿ5ý)
 ü/ýÿ2A ùþäý#¹
 ÿ5ú# ù

%ùú5 ùFþ
 û
 ÿþ?ûH ùý%
 ú" ùþT/
 ÿ5û+;
 ú# þ	ÿ5ý% ú#v
 ý ýÿ¹
 þ!)!3 ý¹ûû;þ
U ýN

 ü	 þ?ûA* ÿ5ú#	 þ2 ùþÖûýN

 þ2 ý
 þ
@ ® 6 j9  @)+P ùþ ( n,R%
 ùú þú/ ùþ^:#%
 úÖ
 ú# þ	ÿ5ý% ú#
 ûF ùþT* ÿ5ú#	 ú#
 ûV
 þ
U ýN

 ü	 þ?û]ýÿþ
ú*¹
 þ	ÿ5ûþüÿ¹ ü$¹ ÿ ú#
 ý5+c ùþ?úÿF¹ þ	ÿ5ý%¹
 þ25â
 üÿþ!
 ú#
 û#â
 ûþ þ þäÿM þ?û!1kNW; ùú3û;
 ý; ùþþ
U ýN

 ü	 þ?û
ý ÿþ?ý&¹
 þ	ÿþQ5=
 þ/¹ ÿP
/¹ ÿþíûþ þ þ®ÿM þ?ûcþ ÿþ?ý¹ûþS ùþ?úÿ
( ]%
 ùú þRÿM þ?ûc¹
 þ	ÿ5ú

 ý*S¹ þ!A¹ þ	ÿþ"ýÿ¹ þ!(!3 ý¹ûûmþ
ä
U ýN

 ü	 þ?ûg%
 ù
 ûþ^m
 þ?ú#
 ù* û;ùý¹
 þ2H_
 þ	þ"þ ÿþ?ý¹ûþ"%ú
 ùý¹ þ
ý/¹
 ÿþ?ý% þ	ÿT5 ùý þP+S_
 þdûþ þ þ«ú ùþc:#%
 úN
 ú# þ	ÿ5ý% ú#
 û!1
NW3 ùþRü		3 ú!#í
 ý ý¹ú3 ý%	 þPÁ
f ý% ý
ú
 ú"{
Y þ	ÿ¹
 þ	ÿ, 2Yp
Y ú3û%úN

 ü	 þN

 þ* þæú«
 ý` þ	ÿ2#5¹
 ü`:¹ ÿ
YRf1 bú#
 ÿþch7
 ú#¹ þ?ûA ùþWü/ûþRþ2±
 ý#¹
 ÿ5ú# ù
 f <Y1RNWF
 ú# û;ú
 þ	ÿH#5¹
 ü¡,Rf <Y]	 ý3 û)YRf ý
ûþ þ
 û( ÿ
 ú# û(_
 þ?ý
  ùþdûú þT_
 þ?û+
 ÿM þT+/_
 þdú!þFú*+; ùþc ü	f
 ûþ! H)
1 økN
 þ
 ý%	 þ
YRf +D
 ú þfýPú _þ	ÿþ*]
 û+ ú#ä
 ý%]
 þ?ý5 ùvú# þ	ÿ5ý% ú#-
, þ
U ýN

 ü	 þ)m
 þ?ú#
 ù* û 6 j)
9 ýÿþWú* ÿR þäý
 ûþæú ùþ7\5

 ý3 ú#'N

 þ?ý¹û
 ÿþc%
 ùú5 ùpú3û)þ
 þpý¹û(:#%
 û!

K
 
T

K K K K K

 



	

,6O 8J 

,6O 8J 
 

"K

 

>R

	

> =VGO

K

K K ;	

 

,



,6O 8J 

,6O 8J @

a

S	

!`
ba

 

DC

&
øfùú3û8ú3ûFùþ%ûý
Nþ^\5ý3ú#'/
Nþ?ý¹ûÿþ%ý¹û]ú"YRf



 
'$%

KK

	 
 '
5 (
$
( -

þUþ	ügùý%gùþ)mþ?ú#ù*ûg$ÿMþfü$ûú#ú#¹þþUý
Nü	þ?û
$ ,-5ùýú]ÿ

ú#þ	ÿ5ý%ú#`+
( -

	 


ýÿþ;2û+ý*Áý«þ\5ýk+<@P	^þþ`5pþUüÿþ?ûûú#
ú#þ	ÿ5ý%ú#-1

ba

øfùþc
äý¹úvÿþ?ý¹û+4:¹ÿ(ùþ7þ?ûÿ5ú#_þFú
Nü	þ
Nþ*ý%ú#pú3ûH+äþûÿþ2ùþcú#¹þ	ÿ5ûú#']búþ

û¹ÿü/ûmþ!¹þ3ùù-,_þ	ýûþcùþdûù¹ÿþUþ!ú#4ú
Nþ73ú
äú#H4ùþÖü		3ú!#äýý¹ú3ý%	þ

G  = ,IHCJ

ü/ýÿ5ýN

 þ! þ	ÿ4 ý
 þyú _T#¹
 ÿ5ú# ù
 YRf ùý +_
 þyûþ!Q6:ùþ<þ!#ý#
ûþ	ÿ¹
 þ	ÿW
, ý#
ýþÖú3û(J%L*9M1gfWþ?ûü/ú#þcùþ2#ý¹ÿ5ý%	þ7ú#¹þ	ÿ5ûú#'SÿMþ?û;ý5ùúþ!¹þ4ùÿù_T#¹ÿ5ú#ù
 f <Y,ùþ
ýüüÿ
 ý5 ùNùý¹ûbý3 û+Á
 û+N

 þAÿ5ý)/
 ý
b û!8
1 øfùþg/
 ÿ5û+ÿ5ý)/
 ýR
b ú3ûk ùý% ùþûýN

 þmÿM þH	 ý;_þAþ!þþ
úPú _þ	ÿþ*b
 ú# þ	ÿ5ý% ú#
 ûk	_T#¹ ÿ5ú# ù
f <Y,%þ?ûü/ú# þg ùþA5 ùý¹
 þ?û8ú7 ùþ 6 j9¡ ý
 þ?û!b
1 øfùþH
/¹ ÿþ
úN

 ü$¹ ÿ ý*Pÿ5ý)/
 ýB
b ú3û7 ùý%D
 ùþ
 ÿ5ú3û+ úN
 ûþ?ýÿM5 ù%
 ú# ù ý«ûä

 ý
 ý
 þ"ä

 ý®
 üÿþ!¹
 þ*
ùþ/þ! þ ú#&m
 û+N

 þ;5R&\5
 ý3 ú#'«
 û¹
 ÿ
 ü/û!Á
1 øfùþ	ÿþ!:¹
 ÿþ/ÿ5úä
 þ
U ü	#¹
 ÿ5ý%+¹
 ÿ«
 ýüü	3 ú	 ý% ú#
 û!,
ýüü	#
 úp
 ý«ûú þ"YRL
f þ
U þ! ú#%
 ú# ùBý`3 ýÿ¹
 þ
:#m
 þQ5®
 ý«ûú þNÿM< 2YY
ýüü_þ?ýÿ5û(+S_
 þÖý/_
 þ!+ þ	ÿWýüüÿ
 ý5 ù-1

DC

ba

 

ba

1G  = ,IHCJ

`

G  = ,IHCJ

! <38±xr/o>+?82 <Vz{qo ² %

q/s±¬

.W¯qU8±qK4>:A+s :#s,4 % z 

q/s±¬

`

$ < 2q

² z

°57d ûü/ý þ;%
 ùú5 ùyú3ûT
 û
 ý#
 ûþ=:¹ÿÖþ!ýý%ú4!3ý¹ûûúZ/þ	ÿÁü_þ	ÿ:¹ÿM
äýþ,Vý&ùþO#&%&®'$%åûü/ýþ;%ùú5ùyú3û2_þ?úFûþ?ýÿM5ùþ

5"ùþdùþÿ5ú3û+úWúùþ;YRf ý#¹ÿ5ú#ù
41
 ý

 ý% ú#Q%
 ú þBû¹ ÿ
 ü/ûdúQ ùþ °57d ûü/ý þ<6 °57dT fþ þ?ú#¹
 þ	ÿJ5Wü_þ	ÿ5ý% ú=;
d ùýÿ+V
ý
 þ	ÿ5ú3û+ ú%, ²)ÿ
 û+
ýA
 þ!+!,HJ%LL@d
9 ûù%
 û7 ùþ?úÿdü_þ	ÿ:¹
 ÿMä

 ý þíú< þ	ÿMä

 û7 #&% æý'$% R,
øfùþýgùú3ûÁûþú#yú3ûT+3!3ýÿ5ú#:4ùþDÿþ3ý%ú#=_þ!'mþ	þ&ùþ



d 	

`

h*i 

U`

`





 } 
	

 	

|/|

 	 

/}





3·0µ {´}

:;3<=?>@.ACBD 
G E IMG j A j [@ V @ V <)EHS>,RS>OPCKLM<?>=KN9Q= V PxAx>KQ AC@3= V
X Z\^]O_ `3X Ó'ÑÏ?Ì ÒÌ ÒÙÁÍ!ÐÓ0ãb X bÓ'ÑÏ?Ì ÒÌ ÒÙÖÍ!ÐÓ)Í!Ì è5Ð¡ã
[
UWV NMKAI
\ Î{ÔÍ!Ì Ó'Ì Ý¡Ð ` ÓÏ?Ñ'Ù¡ÐÓ)Õç+Ï¡Í'Ídc±Ð×Ï?àÁÎç Ð0Í5ã
_ ÒÐ5ÙÏ	Ó'Ì Ý¡Ð ` ÒÔ¡Ò¹ØÓÏ?Ñ'Ù¡ÐÓ)Õç+Ï¡Í'Íd±c Ð×Ï?àÁÎç Ð0Ídc
e Í!ÐÓ)Ô?á_Ï?ç çÛ¹ÐéÒÐ0Ûâá3Ð0Ï	Ó'ÚÑ'Ð0Í ` Ï	Ó!Ó'Ñ'Ì ÜÚ¹Ó'ÐÝ	Ï?ç ÚÐ0Ídc ã?fghe
y
ij > j DkSACS>/I t wr }~ { ` Ñ'Ð0êÚÌ Ñ'Ð0ÛâÒÚà%Ü{Ð5Ñ)Ô?á_Í!Ð5ç Ð0ÕÓ'Ð0ÛRÑ'Úç Ð0Í
Ì ÒDÔ¡Ú¹Ó'ÎÚ¹Ó]Í!ÐÓ " c
l` Ù¡Ð5ÒÐ5ÑÏ?ç Ì è0Ï	Ó'Ì Ô¡ÒdÎÏ?ÑÏ?àÁÐÓ'Ð5Ñ0ã inm oqp l pGo i5i ã¹Û¹ÐáÏ?Úç Ó)Ý	Ï?ç ÚÐ o c
rOsut vxwyyz,{,| ` àÁÌ ÒÌ àÖÏ?ç/Í!ÚÎÎ{Ô¡Ñ!Ó8á3Ô¡Ñ8Ñ'Úç ÐÏ¡Õ5ÕÐ5Î¹ÓÏ?ÒÕÐ,c
}~, r s| ` ÒÚà%Ü{Ð5Ñ)Ô?áÑ'Úç Ð0ÍbÌ ÒRÓ'ËÐÜ{Ð0Ï?à$c
KAxNMKAI" Í!ÐÓ8Ô?á_Ñ'Ð5ç+Ï	Ó'Ì Ý¡Ð5ç ÞÖÌ ÒÛ¹Ð5Î{Ð5ÒÛ¹Ð5ÒÓ]Ñ'Úç Ð0Íá3Ô¡ÑbÓ'ËÐ;ÓÏ?Ñ'Ù¡ÐÓ)Õç+Ï¡Í'Í
` o c @ V @.AC@ j ;3@ S$"    ` Ð5àÁÎ¹ÓÞâÍ!ÐÓ)Ô?áVÍ!Ð5ç Ð0ÕÓ'Ð0ÛâÑ'Úç Ð0Ídc
` j c  =?> Ð5Ý¡Ð5Ñ'Þ ~ g \  
=  `3~ c  o
`3 c >SN§S j A t wr }~ { Ó'Ì àÁÐ0Í
`. c
Õ5Ï?ç ç :;3<=?>@.ACBDFEHG Ó'ÔdÕÔ¡ÒÍÓ'Ñ'ÚÕÓ)ÏWÑ'Úç Ð ë Ì Ó'ËNàÖÏ	×¹Ì àÖÏ?ç

êÚÏ?ç Ì ÓÞW Z
¢ 
 	 

`h c
 =?> Ð5Ý¡Ð5Ñ'Þ ~ g \  ÕÔ	Ý¡¡HÐ5£ Ñ'Ð0ÛdÜÞÖÓ'ËÐfÕÔ¡ÒÍÓ'Ñ'ÚÕÓ'Ð0ÛâÑ'Úç Ð
=  `3~ c   `3~ c  o
 
`3 c
jnv
 Ó'ËÐfÕÔ¡ÒÍÓ'Ñ'ÚÕÓ'Ð0ÛâÑ'Úç Ð;Ì ÒÓ'ÔdÍ!ÐÓ "
`u¤ c S V >SN§S j A

	bú#ÿþPh5FNOþ	ÿ5ý%ú#¹þâû¹ÿü3û+ÿMú#æúùþ7fÁý%ý a
E*V KEGXUNUXAY5XUN



úú]Y{þ	ÿ¹þ	ÿ1

%ùþ	ÿþ#&% ®ú3û/ùþ ,+
4ÁýQ!3ý¹ûûúZ/þ	ÿ]
Nþ?ý¹ûÿ5ú&ùþ3ÿ5ýú#iÁü$ûú#ú#¹þ3	ý¹ûþ?ûSùý%
ýÿþ;!3 ý¹ûûúZ/
 þ«ý¹ûWü$ûú#ú#¹þ,_ý '$% íú3û^ùþ
C0 
Nþ?ý¹ûÿ5ú]ùþÿ5ýú#`]ú¹ÿÿþ#
    1g_îü$ú*ú"ùþ
!3 ý¹ûûúZ/
 þþ!
 ý% ú#¹ þ7	 ý¹ûþ?û!#&% $
   ,ý)'$% 
°57d ûü/ý þNûù%
 ûc!3 ý¹ûûúZ/
 þ	ÿWü_þ	ÿ:¹ 
ÿMä

 "! ý þDú=  þ	ÿMä

 û2g# ý3 ûþDý3 ý ÿM
 ! ÿ5ý%  þh'$% <6 ü	#+ þ&& ùþ
¯3!V ýjU ú3ûn9K ùý%
 ûùS_þWý¹ûA# ý¹ûmü$
 ûûú#	 þ
, ývûþ
 ûú# ú#
 ú#'O
 #&% "6 ü	#+ þ"] ùþ ± !V ýj
U ú3ûn9K ùý%
ûù"_þdý¹û%ùú#
 ùpý¹ûü$
 ûûú#	 þ/#6 ûþ	þ bú#
 ÿþ Nú`{
Y þ ú#`h51 J9M1
øfùþ °57d ûü/ý
 þFú3ûdýüüÿ¹ üÿ5ú3ý% þS:¹
 ÿN

 þ?ý¹û
 ÿ5ú4 ùþíû! þ?ûûP
 û¹
 ÿ
 üú3û¹
 þ	ÿ8
, ûú þ
û¹
 ÿ
 ü/ûK%
 ù
 ûþ1#&% ?®'$% c ÿ5ýþ! «ú3ûF!#
 ûþ^+P ùþTú3ý%
 ý	 ý]_
 þ^ú3û	 ýÿMþäý¹ûg
 ú* þ	ÿþ?û+WV
ú1FdH*¹
 þ	ÿ5ûþ#
, ú* þ	ÿþ?û+ úW
 ÿM þ?û û¹
 ÿ
 ü/ûýÿþA ù
 ûþfû "	 úþ*#Pú3û+ ý* ÿ
  ùþ(ú3ý%
 ýG1
øfù
 ûþRÿM þ?û)%
 ùú5 ù ýÿþ;
/
 û+cú3û+ ý*T ÿ
  ùþ;ú3ý%
 ýþ
 þP ùþRü$
 ú* ûWú3 ùþ °57î
d ûü/ý þ
 ÿ

 ùú5 ù®ý4*¹ þU ù5
%
 ú3ûc
 û+ ÿM þ-1äøfùþNýÿþ?ý3þ	ÿ2 ùþ °57d !
 ÿ¹
 þ]þ
 þ=5y
 ûV
 ÿ
¹
 ü/ûc%
 ú# ù& ùþS_
 þ?û+

 #&% ?®'$% " ÿ5ýþ!
 ý<_
	
 þS
 ûþBý¹ûâý4\5
 ý3 ú#'&N

 þ?ý¹û
 ÿþ/:¹
 ÿN

 ü/ýÿ5ú
 ùþvû! þ?ûûTú _þ	ÿþ* þ?ýÿM

 þ	ÿ5ûP¹ ÿNû¹
 ÿ
 üä

 ú
 þ	ÿ5û!1`NW û¹
 ÿ
 ü
 û+ ÿM ú#-,K ùþý% ý
ý
 ý#
 û+2	 ý= ÿ3+p
 ý5 ùúþ!¹ þ; ùþ;þ?ûúÿþ)#&% ?®'$% ] ÿ5ýþ! 53	
 úúD
 ÿM þ?ûT
 ûú]ú _þ	ÿþ*
ý%
 ýPä

 ú
 úÁ
 ý#¹ ÿ5ú# ùä

 û!,5/ú _þ	ÿþ*8
 ü/ýÿ5ýN

 þ! þ	ÿ;ûþ!+ ú
 ûFV
 ýdûþ þ þ"ý% ý7ä

 ú
 úÖ
 ý#¹
 ÿ5ú# ù

 ÿ^5v
¹
 ýüü	#
 úN
 ýS
 û+W!V ûþ
 ûú# ú#¹ þPý% ýSä

 ú
 úN
 ý#¹
 ÿ5ú# ù
  ùý%^ ý%¹
b þ?ûWú*+/ ùþâý!*Tú _þ	ÿþ*

 ú3û!3 ý¹ûûúZ	 ý% ú#
ä
 û+ û!1
øfùþ°(N

 þ?ý¹û
 ÿþfú; ùþTYRf ý#¹ ÿ5ú# ù
  ùý%g
 þ	þûK+c_
 þ)ä

 ýj
U úä

 ú#	[ þ-, ÿ5úþ?û+cNû¹
 ÿ
 ü/û
 ùý%â

 ýÿþäý¹ûc# ýÿâý¹ûÖü$
 ûûú#	 þ ÿ
  ùþSú3ý%
 ýA ùþ °57d ûü/ý þíú& ùþSúÿþ	 ú#=H ùþS þ!:
 üü_þ	ÿ7¹ ÿM

 þ	ÿ46:%
 ú# ù^#&% pþ\5
 ýF+@!LL
ý '$% pþ\5
 ýF+=L S9M1 ^ þ)
, ùm
 þ!¹
 þ	ÿ,K ùý%P ùþ
ý
 ýRN

 ü	 ý% ú#-
, ý¹ûbúN

 ü	 þN

 þ* þâú_T#¹
 ÿ5ú# ù
 YRf, ú3û
 ü_þ	ÿ:¹
 ÿMN

 þâúP þ	ÿMä

 û #&% %ý





`

`



&	
MC
G_





DC









e

 




S^

`

`

MC





DC



1Z7[M\ E*V [M\ [ML

MC







h*i ¤

`

DC
DC







~´}~µ 

~/]{}/}

' % R,ý¹û%ý¹ûû
Nþæúùþe`°57duýý#ûú3û!,R	ÿ5ý%ùþ	ÿ%úþ	ÿM
äû( #&% ýk'$% úùþâû+%V'	ýþ
$
#&%&®'$% ûü/ýþ1FøfùþNÿþ?ý¹û+ ú3ûcùþíú
Nüÿ¹þQ
Nü	ý%ú#ý8þO^"	úþ&(
Nü	úùþJ
ýþ)%ùú5ùíú3ûFûþíý¹ûmýâûþ?ýÿM5ùvùþÿ5ú3û+úA:¹ÿH
Nü/ýÿ5ú7ùþT\5ý3ú#';VÿMþ?ûK:¹ÿ;ý7ú#¹þ-,*Uþ
ä

 ý¹ú-1 ¹ ÿRý
U þ<ä

 ý¹ú-,¡ ùþ#&%&®'$%åûü/ý þíú3ûÖý¹ûâýüüÿ¹
 üÿ5ú3ý% þNý¹û7 ùþ °57d ûü/ý þ7ùþ
°57u
d ûü/ý þRú3û)
 ýN

 þ#F
 þ\5
 ú# ý þ*)+] ùþP¹
 ÿMä

 ý3 ú#	[ þ#&%&®'$%lûü/ý þP%
 ùþ	ÿþ$% Rý
,(pýÿþ
¹ ÿMä

 ý3 ú#?[ ý% ú#`
 û+ ý* ûT:¹ ÿ ± ý7¯ ýj
U þ?û!_
, ÿþ?ûü_þ ú#¹
 þ#%
1 øfùþ#&%&®'$%Lûü/ý þRý`ùþ °57d
ûü/ý
 þâýÿþâú
 û+ ÿ5ý% þvú`{
Y þ ú#`h51 J/5 bú#
 ÿþ?û íý 5
, ÿþ?ûü_þ ú#¹
 þ#1

	

`

`

	

   /ÅÉÇ÷)Æ÷#

bñ



òó õ]ö]É{Æ÷ô ó

W

D@

VMN

&`



S

Çô8É /ÅÅ

øfùþRúú#]û¹ÿü/û!,	þ?ûÿ5ú#_þæú=Y{þú#&J51 J5,_ÿþ	üÿþ?ûþ*û^ùþ
äý¹ú«û+þ	ü&Kùþâüÿ%V

ü$ûþ=þ?ûÿ5úüú#¹þâúú#æüÿRþ?ûû!1Wøfùú3û%û+þ	ü&¹ÿÿþ?ûü$û)+ùþ;ý%ý"
äúúäû+þ	ü&Fùþ

û+
 ýýÿMRüÿR þ?ûûbR^ þ¹þAú3û¹
 þ	ÿD
 úý% ý%/
 ý¹ûþ?û^68>7f2f79M
1 øfùþA¹
 þ	ÿ5ýþ?ûÿ5úüú#¹þ;únV
ú#vüÿRþ?ûû!,üÿ¹ü$ûþpúùú3ûmü/ýü_þ	ÿ,ú3û(
Nü/ýÿ5ý%	þ2+Sùþdû+ýýÿM4>7f2f üÿRþ?ûû76 ý5ý-,
²]ú3ý% þ! û+b5*VWY ùýü/úÿ, YR
P5 ù-,@BBC9M,k%
 ú# ù û+N

 þRü/ýÿ ú!3 ýÿ5ú# úþ?û)g ùþ ý¹û+b`]û¹ÿü&ú3ûWV
¹ þ	ÿ1
øfùþÖüÿ¹
 ü$
 ûþvþ
U ü_þ	ÿWVX
 úþpû¹
 ÿ
 ü3ú3û¹
 þ	ÿv
 üÿR þ?ûû(
 ûú3û+ û( ùþc:#%
 úN
 û+ þ	ü/û!

U	

d

@%1füÿ	þ


þ	ÿ5û+ýú

J51^ý%ýSþ	ÿ5û+ýúDýpüÿþ	ü/ýÿ5ý%ú#
h51%û¹ÿü3þ!þú#

1%û¹ÿüæû/ûþ!fûþþú#
51%û+ý%ú3û+ú	ý¡5ùýÿ5ýþ	ÿ5ú#[?ý%ú#`8û¹ÿü/û
C51%û¹ÿü4ú3ûý3ú#[?ý%ú#
I*1%û¹ÿüæú*þ	ÿüÿþ!ý%ú#
51%û¹ÿüpþ!ýý%ú#
Y{þú#`h51@%,úû+ÿ5ý%úRû+þ	ü/û7@dý`J5,üÿþ?ûþ*ûfýS
Nþú	ý_üÿ	þ
 ûþpý¹û%ý/	ý¹ûþRû+
:¹ÿäýüü	#
 ú= ùþpüÿ¹ ü$
 ûþþ?û ÿ5úü ú#¹
 þpú ú#N

 þ! ùR#1 øk53 û;:¹ÿíûüü$¹ÿú ûV
¹ÿ
 ü=þ! þ ú# ý«ûþ þ ú#«
 úæ
 û+ þ	ü/ûTä
h ý Sm
 þ	ÿþþ?û ÿ5ú#_
 þpú3þ! ý¹ú±
 ú={
Y þ ú#
 ûTJ51 Jíý
J51 h5,R%
 ùú þ( ùþ%ÿþ?û# ûF
 þ
U ü_þ	ÿWVX
 úþäû¹
 ÿ
 ü"þ! þ ú#F
 ýFûþ þ ú#F
 ýÿþ^3 ú
 þíú"{
Y þnV
ú#3h51 J51 «þ! ùRûývÿþ?û# ûHb
 û+ þ	ü/û
:¹
 ÿ) ùú3ûAä

 ý¹úv
 ýÿþc3 ú
 þFú3{
Y þ ú#
 û)h51 h Rh51 C5,
ÿþ?ûü_þ
 ú#¹
 þ#1
øfùþDüÿ¹
 ü$
 ûþ<þ?û ÿ5úü ú#¹ þDú ú#«
 üÿR þ?ûûdú3ûÁú# þ	ÿ5ý% ú#¹
 þäý®ú* þ	ÿ5ý ú#¹
 þ1/NOd
 ú3ûÁú# þ	ÿ5ý% ú#¹ þ,
ûú
 þcä

 ý*F
 û+ þ	ü/û(ä

 ý
 þ	þ+/_
 þÁÿþ	ü_þ?ý% þ_þ!:¹
 ÿþÖýNûý% ú3û+# ý+¹
 ÿv
 û+ ú#v
 ú3ûH:-1NOf
 ú3û;ý3 û+
ú*
 þ	ÿ5ý ú#¹ þ{
, ý¹ûûä

 úW
 þ
U ü_þ	ÿ!0 û)ú*#¹
 þN

 þ*)
 ú/
/
 û+K ùþ;ü/ùý¹ûþ?ûK ùþüÿ¹
 ü$
 ûþ;þ?û ÿ5úü ú#¹ þ
ú
 ú# üÿR þ?ûû!1 øfùþyþ
U ü_þ	ÿ!0 ûpÿ þBú  ùþBü/ý% úþ*p
 ÿ5ú3û+b ¹
 ÿ
 ü þ! þ ú# ýüü	3 ú	 ý% ú# ú3û
þ?û
 ÿ5ú#_
 þvú`{
Y þ ú#=h51 I*1

@

a

AP

AP

h*i ª

 } 
	

#"$&% z  >o +/x




zw

 	

 	 

|/|

+-  Kq 4>:zs?4  A: '*)

/}

>+?82

tvo





3·0µ {´}

4 4>:A+s

npz ¡z ²

ýÿM#3þ! þ
 ú#&]
 ýÿ ùþ	ÿ
 û!þ	ÿú;¹ÿýÿ«ùþ?ýÿ2ú3ûþ?ý¹ûþ46XdAeTf79%ú3ûWýyú
Nü$¹ÿý*Áý=ú#V
!#^
Nþú	ýüÿ	þ
41^dAeTf ÿ5ú3û+b#ý+¹ÿ5ûWú!þdýÿùþ	ÿû!þ	ÿúRý%+ÿ5ú#	þ?û!,3ú#úäùý%/ú#û!,
ùþ
/
 û+ ý% ú"# ý+¹ ÿ5û!,F	#5R üÿþ?ûûÿþ,8ý
Nþ!ý%$3ú]#ý+¹ÿ5û36 T
äý þ!NýG1#,)@BBC9M1 øfùþ?úÿ
û
 ÿþ	þ
 úä
 ú3û;ü_þ	ÿ:¹ ÿMN

 þpú¹ þ
 þ	ÿ5ýV
 üÿ5ý ú þ75ý% ýS þ ú#æ
 ú4 ùÿþ	þ7ú _þ	ÿþ*f
 û+ ý%¹
 þ?û!1

c



DC

dHþúíýý
Sþ?û+údú:¹ÿM
äý%ú#pýæü/ù*ûú	ýVþUý
äúý%ú#pÿþ?û#û!,ú!úRÿ5ú3û+b"#ýnV
+¹ ÿ5û73 ú#¹b þNý%¹ þ
, ü$
 ûú# ú#¹ þ;# ýä

 ú#«
 ùú3û++¹
 ÿ,-m
 þ?ú#
 ù*!
, ùþ?ú#
 ù*!,k	 ú#
 ýÿþ!+ þíû
/
b ú±
, ý
 ùKRV
ûN

 ü ú#-,R	#5Rvüÿþ?ûû
 ÿþ
, ýpüÿþ!
 ú#
 û;ùþ?ýÿ%
 ý4ý¹û!3 ýÿ^ú3ûþ?ý¹ûþ?û!1
dHþúNÿþ?û#û)K3ý%$¹ÿ5ý%+¹ÿ4þ?û+û!,ú!úNú:¹ÿM
äý%ú#pý%$%ÿ5ú3û+b"#ý+¹ÿ5ûT3ú#b¹þP3úü/ú
üÿ% þ,
 ûþc+ þ	ÿ5ý þ
, ýÿ
P$¹
 þ
 úc# ý+¹
 ÿ5û!1

 c



dHþú
d
ý%pÿþ?û+4þ?û+pÿþ?û#û!,Wú!ú
Nþ?ý¹ûÿþ
Nþ*ûDùþ?ýÿpÿ5ý%þ,cþ!:¹þRV
 ÿ5ú!3 ýÿvù*{ü_þ	ÿÿ¹ü/ù*,cYø ûþ!
Nþ*3þ	üÿþ?ûûú#-,)	ýÿMú3ýyýÿÿ5ù*5ù
äú3ý¹ûvý ú#

ú3û+
 ÿ/
 ý þ?û!1

52ÿ^ý;ý¹ûT+û+ÿMÁý%cþ?ý¹û+^þRÿþþ!ý*Áý

úùþdÿþ?û+(ùþcH¹ÿb,:¹ÿfþ?ý5ù

ú*þ	ÿþ?û+úFû¹ÿü¡,		ýþ

û+ý%¹þ,_P,T,/ý=dT,ÿþ?ûü_þú#¹þ#1

ýíü/ý%+þ	ÿM

_ ý% ý%/
 ý¹ûþS%
 ú# ù<Jhv
 ü/ý% úþ* ûÖÿþ	üÿþ?ûþ* ú'{ü/ú	ýK
Nþú	ýbüÿ5ýúþäúQdAeTf ú3ý%ûú3û!,
þþRý%ùþHNWû+ú#þF:¹ÿFd;ýÿMú#ý¹û!3ýÿ ²)ÿþ!¹þ*ú#Rý fþ?ùý%/ú3ú#ý%ú#-,_ý%¹ÿþ!¡,*dmÿý%ú3ýR,
;ý¹û]
 ûþi:¹ ÿFû¹ ÿ
 ü ú3û¹ þ	ÿ1 øfùþ`ý% ý%/ý¹ûþ«ú3ûäú ®ÿþ?ûü_þíý<5R þ	ü/úþ
äú##ú	ý
dAeTfaý% ý%/
 ý¹ûþâÿþ /þ úí
 ý
 ýdAeTf R!!
 ÿÿþ þâúæ
 ý/¹
 þ
 þ	ÿ5ý
 ü$¹
 ü	3 ý% ú#-
, ûú þâý%$ %L
2
 ý% ùþ	ÿþ ü/ý% úþ*í
 ÿþ¹ ÿMûäÿþ	üÿþ?ûþ*dAeTf ü/ý% úþ* û!1 %þ!¹
 þ	ÿ ùþ þ?ûû!,( ùþ`ý% ý%/
 ý¹ûþ ú3ûS¹
 þ	ÿ
ý
 ý%	 þRûú þDú#Ö
 ú!þ?ûfÿþ¹ ÿMûTHú _þ	ÿþ*T'{
 ü_þ?û2g ùþ/ú3ûþ?ý¹ûþ1 `¹
 ÿþ!¹
 þ	ÿ,k ùþNú!þ
 þ!

 ý% ú#¹ þ&	 ý¹ûþ?û<6 ü/ý% úþ* û]%
 ùF
 ùý¹
 þQdAeTf7ä
9 ýÿþ=í
 ÿ5ý
S# ûþ þ þ ü_þ	ÿ5û+
 ûS	
úú#
 úý3 ûA%
 ú# ùyû+N

 þNû þ ú#¹ þDüÿ	 þä

 û^¹
 ÿc ù
 ûþ/
 ûúþ	ÿþ=5`¹
 þ
 þ	ÿ5ýb
 üÿ5ý ú# ú#
 þ	ÿ5ûÁý¹û
ü$
 þ* ú3ý^dAeTf ü/ý% úþ* û!m
, ý ùþ þæûþ*;:¹
 ÿ/8
 ÿ ùþ	ÿNú*¹
 þ?û+ ú#
 ý% ú#
 û;+< ùþNW
 û+ ú# þ1 øfùú3û
/ú3ý¹ûþ ý% ýBûþ!F
 ú3ûäýüüÿ¹ üÿ5ú3ý% þ:¹ ÿ4dAeTf ÿ5ú3û+b¹
 ÿ
 ü ú3û¹
 þ	ÿ,A	ä
 ú#í
 ú3ûäú
 ýüüÿ¹
 üÿ5ú3ý% þ":¹ ÿ

 þ?ý¹û
N
 ÿ5ú] ùþNû! þ?ûû2(dAeTl
f ÿ5ú3û+b`þ! þ ú#®
 ý=:¹
 ÿdû¹
 ÿ
 ü ü_þ	ÿ:¹
 ÿMä

 ý þRþ?û+ úä

 ý% ú#y
 ú
¹þ
 þ	ÿ5ý¡N

 þú	 ýV
 üÿ5ý ú þ1

&`

OP

/ 



DC

ea

SR






z

'58  54 ' +-/.1032)z{o5476	t98;:¬z{¬ <38±xr/o>+?82

4 4>:A+s

npz ¡z ²

q/s±¬

<Vzz ² 4>:A+s

øfùþÁüÿRþ?ûûAþUü_þ	ÿWVXúþpû¹ÿü4ú3û¹þ	ÿ";ý¹ûü_þ	ÿ:¹ÿM
Nþvý¹û(:#%û!1

	

¹
 ÿ%þ!¹
 þ	ÿý% ý
 ý¹û%ÿM3:¹ÿTýþ?û1(æú3ùþâÿ5ý¹þ;LR1 S+&@!LLR,Vý ý
;
Uþ"5
P_þ	ÿgûþþþ"ü	]ÿMþ?û)þ\5
 ý	+/h51)øfùþ%ÿMþ?û]úþäúSùú3ûmú#þ	ÿ5ý%ú#¹þ%üÿRþ?ûû
mþ	ÿþÁûù^S+ùþ%þUü_þ	ÿg:¹ÿ;ûþþú#FýFú* þ	ÿüÿþ! ý% ú#-8
1 øfùþWú
 ûü_þ ú#/F@ RJ%R
L ÿM þ?ûF:¹ ÿ
þ?ý5ù&ý%ýíû+ý%¹þÿ5ú#¹þ	ÿþ38ÿùþ	ÿ%þUü_þ	ÿ5úN

 þ* û!1)dH ÿþ! þRû¹
 þ?û+ ú#
 û)K ùþN

 þú	 ýV
 þ
U ü_þ	ÿ
ú*#¹þ úùú3ûDû+mþ	ÿþ4+3 úä

 ú#P ùþ35
P_
 þ	ÿ;T þ?ý%
 ÿþ?ûäú ùþpÿM þ$R ý+< ÿ
+æýú&ùþ;¹þþ	ÿ5ý%ú#<]
 ÿM þ?ûT%
 ù
 ûþ þ?ý%
 ÿþ?ûcHyú*#¹
 þDþ
U ü_þ
 ûú#¹
 þDý ¹
 ÿ7
 ÿþ3 ú3ý%	 þ
3ý%$¹ÿ5ý%+¹ÿþ?û+û!1gdH
 ûþ\5
 þ*#,*m
 þfùý¹
 þ%ü_þ	ÿ:¹
 ÿMN

 þùþ)8
 ÿ ùþ	ÿbþ
U ü_þ	ÿ5úN

 þ* û5N
 ú* þ* ú#
 ý#
3ú
äú#ú) ùþA þ?ý%
 ÿþfûü/ý þfýùþ(5
P_
 þ	ÿ
 ú# þ	ÿ5ý% ú#
 û8ú ùþ(ä

 ý¹ú;#5¹
 ü; ùþ^YRf ý#¹
 ÿ5ú# ù

#6 û+
 þ	ü/ûTJVM@J/_T#¹ ÿ5ú# ù
 YRf79M1
NW7 ùú3ûú# þ	ÿ5ý% ú#¹ þ)üÿR þ?ûû!,j ùþ)þ
U ü_þ	ÿ±
 ùý¹û±ûþ þ þ7	¹
 þ]ú* þ	ÿþ?û+ ú2dAeTf ÿ5ú3û+bT¹
 ÿ
 ü/û!
1 øý%	 þ^@
ûù%
 û7 ùþFú þBû¹ ÿ
 ü/û!,¡+¹ þ! ùþ	ÿ;%
 ú# ù< ùþ] ý
 þ?û7q
 (®ýQùþäÿM þíûú#
 úZ	 ý þ1"NW
 ùþNû¹ ÿ

 ü<ú3û¹ þ	ÿ= þ	ÿMä

 ú#æ
 üÿ¹
 ü$
 ûþyú= ùú3ûWü/ýü_þ	ÿ,- ùþ; þ?ý%
 ÿþ?ûdýüü_þ?ýÿ5úv
 ú= ùþ
û+ý%¹þ/_P,

ba<Y«ý#¹ÿ5ú#ù


ý&dT,	ùþf



*AP

?_

h*i «

~´}~µ 

~/]{}/}

1H?LGX 7X HK[M\IZ7[ *NJML E

ú#ú#ûHÿMþ?ûAþ?ûÿ5ú#/úPùþdû¹ÿü/ûmýÿþ7	ýþùþ
+
 n1møfùþcþ?ûÿ5ú#_þ
ú#
 þ	ÿ5ý% ú#¹ þ]üÿR þ?ûûk;
 ý¹ûû! þ?ûû+8:¹ ÿý% ýWý%
 û+ ý%¹
 þ?û Bý/dT,	ú#¡ÿMþ7kùý%ýý
Sþ?û+ú
ý%
 ý3 ú# û7^ #6 û+ ý%¹ þ4_ ý% ý*Ö
9 ú3ûPR
 ú:¹
 ÿMä

 ý% ú#¹
 þäþ
 ùQ:¹
 ÿRú	 úp
 û¹
 ÿ
 ü/û!
, úG1 þ1#b
, ú#
#ý¹ú þ/+P8Z5 ùþ%þ
U ü_þ	ÿ!0 ûg ÿ5ú# þ	ÿ5ú3ý2
 ú* þ	ÿþ?û+ ú
 þ?ûû!
1 52#D
 ý%: þ	ÿ]þ
 ú
 þ	þ	ÿ5úc ùþTä

 ý¹ú-,5
ûþ	ü/ýÿ5ý%
 ú7ä

 ý þ%ý/þä

 ý þü/ý% úþ* û!,*m
 þ	ÿþ%ú* þ	ÿþ?û+ úd
 û¹
 ÿ
 ü/ûKú3û¹
 þ	ÿþ-1H{
Y þ	þT{
Y þ ú#"h51 I
:¹ ÿ^
/¹ ÿþPþ! ý¹ú3 ûA4 ùþdþ
U ü_þ	ÿ!0 ûfú*#¹
 þN

 þ*%
 ú ùú3ûû¹
 ÿ
 ü3ú3û¹
 þ	ÿv
 üÿR þ?ûû!1

	


j



	




 o

	




j

	




o

	




 N§S>,AEHS/;3S/Q ACS  EHKLM<?>=KNMP
 G
Î{ÔÍ!Ì Ó'Ì Ý¡ÐmáÏ?àÁÌ ç ÞâËÌ+ÍÓ'Ô¡Ñ'Þ :h

 o






Ï Ù¡ÐmÔ	Ý¡Ð5Ñ
?
Þ¡Ð0Ï?Ñ
Ü{Ô¹Û¹ÞâàÖÏ¡Í'ÍbÌ ÒÛ¹Ð×âÔ	Ý¡Ð5Ñ 
Ï?Ù¡ÐmÔ	Ý¡Ð5Ñ
Þ¡Ð0Ï?ÑÍ
Ó'Ô?ÓÏ?çÕËÔ¡ç Ð0ÍÓ'Ð5Ñ'Ô¡çÔ	Ý¡Ð5Ñ
ß
Ï?Ù¡ÐmÔ	Ý¡Ð5Ñ
Þ¡Ð0Ï?ÑÍ 
Ü{Ô¹Û¹ÞâàÖÏ¡Í'ÍbÌ ÒÛ¹Ð×âÜ{Ð5ç Ô ë

Ó'Ô?ÓÏ?çÕËÔ¡ç Ð0ÍÓ'Ð5Ñ'Ô¡çÔ	Ý¡Ð5Ñ
ß
éÜÑ'Ì ÒÔ¡Ù¡Ð5ÒâÔ	Ý¡Ð5Ñ
ß
 
Ü{Ô¹Û¹ÞâàÖÏ¡Í'ÍbÌ ÒÛ¹Ð×âÜ{Ð5ç Ô ë

ç ÐáÓ)Ý¡Ð5ÒÓ'Ñ'Ì+ÕÚç+Ï?ÑbËÞÎ{Ð5Ñ!Ó'Ñ'Ô¡ÎËÞ



h

j5h

l r 
: hG
 o rOrz f3e  :hG
: hG
 i l r
h  rOrz f3e  : hG
 ¤1l e : hG
i l
r 

l
o

« h 

ª

«« 

oGi

«« ß « 

oOj

«« ß « 

oGi

«« ß « 

`

¼{ §

øý%	þS@%)NWþpû¹ÿü/û;úùþ7:¹ÿM


>R


 ÿM þ?û!1 ^ þ7ú# ú#
 ûýÿþ7  ú#
 ûAb
 üÿ5úRV
	úü/ý-#ý+¹ÿ5û!1)YR¹ÿü3_@dú3û(:¹ÿT
äýþdü/ý%úþ*û!,/û¹ÿü`_2J;:¹ÿ^þ
äýþdü/ý%úþ*û!,
%ùú þWû¹ ÿ
 ü/û 2@%
, (J5
, ý3d2Á
@ ýÿþ2:¹
 ÿ(ä

 ý þÁý"þä

 ý þÁü/ý% úþ* û!)
1 øfùþÁû¹
 ÿ
 ü/û
ýÿþú
 þ7ÿ
 ú _þ	ÿþ*b
 ý%+ ÿ5ú#	 þ;û/
 ûþ! ûk%
 ú# ù¹
 ÿÿþ?ûü$ú1
 (dü/ýÿ5ýN

 þ! þ	ÿK ý
 þ?û
ú#¹ þD
 ú
S
 (	8
1 øfùþA3 ý¹û+
S
  * * ý¹ú
 ûbú:¹
 ÿMä

 ý% ú#â
 ý%$ ùþ;ûú#
 úZ	 ý þ
 ùþÖÿM þ?û(N

 ü	 þ45 ùþ *  þ?û+!1

DC

X

Y þ	ü/ýÿ5ý% þ#":¹ ÿ%þ?ý5ù`ý%ýíû+ý%¹þ,	mþâùý¹þRú*¹þ?û+ú#ý%þ3%ùú5ùùþdúþvÿMþ?ûýÿþ7ùþ
{
_þ?û+]ú/þ	ÿM
äûF$ùþ °57d ûü/ýþ,úG1 þ1#,*%ùú5ù/$ùþ
 ýÿþ^ûþS+Pþþ)ùþ °57di*¹þUFù5G1
_Aâ
 û+ ý%¹ þ T,¡:¹ ÿdú
 û+ýþ,±ûþ!¹þBÿMþ?ûÁýÿþS<ùþS*¹þUBù5bûù^®ú bú#ÿþ?û «ý ":¹ÿ
ùþ#&%&®'$%åý&ùþ °57d ûü/ý þ
, ÿþ?ûü_þ ú#¹
 þ#N
1 ø(H4g ùþ?ûþNÿM þ?û!, ¯ä
@ ý^¯&J5±
, úú	 ý% þ
ú`
 ùþP	
 ÿþ?û!_
, ýÿþ;3 ú3û+ þ«ú øý%	 þ/J51 ^ ú þ; ùý%2 ùþRþ
U ü_þ	ÿW!V ûþ þ þyû¹
 ÿ
 ü/û 2D
@ ý (J
ýÿþâûú#
 úZ	 ý*!,	f
 ýÿþ%
 ý
/S ù
 ûþ#
 ú;3 ùþP*¹
 þU ù5G]
1 øfùþÖÿþ?ý¹û+3:¹
 ÿWûþ þ ú
þ
U ý#& ù
 ûþ]'H«
 ÿM þ?ûÖý%â
 û+ ý%¹ þ  ýÿþS ùþ?úÿâûúN

 ü	3 ú	 ú#'68
 ûú3û+ ú4H ùÿþ	þS þ?ý%
 ÿþ?û7#9M,
ùþ?úÿF¹ þ
 þ	ÿ5ý3 ú#'368¹ þ	ÿ5úâ
 ÿþ3 ý% ú#¹ þ#;ä

 ý*D
 ü$
 ûú# ú#¹
 þ)	 ý¹ûþ?ûn)
9 ý/ùþ)# ýg ùý%F ùþT
 ûþ/þ?ý%
 ÿþ?û
ýÿþ, ÿ
 
 ùþ7N

 þú	 ýV
 ü$
 ú*A
 úþ!7
, ú
 þ
U ü_þ
 ûú#¹
 þ23 ý%$¹
 ÿ5ý%+¹
 ÿ" þ?û+ û!1

/`

	

`

 

<!4¡qK4>:A'74>: ² q  %

øfùþ&þURpû+þ	üuú

/`

b

T



4 M:qK4>:A+s +- <38±xr/o>+?82;'

qoq ² ¡z{o

ùþyüÿ¹ü$ûþ

þ?ûÿ5úüú#¹þyúú#

DC

üÿRþ?ûûvû+ýÿûÿ


ùþ<ú3û¹þ	ÿþ

û¹ÿü/û!1NW<ùú3ûÖû+þ	ü¡,û+ý%ú3û+ú	ýFú _þ	ÿþþ?ûÖú<ú3û+ÿ5ú#	ú#ûWýÿþS
Nü	þ<:¹ÿ7'H«ü$¹üV

3ý%ú#û!,kùþSýÿ¹þ!DýQùþíÿþ!þ	ÿþþíü$¹ü	3ý%ú#-1íøfùþSýÿ¹þ!Rü$¹ü	3ý%ú#Qûú3û+û7AÿMþ
ü/ý%
 úþ* ûâú!þ®ú*+3 ùþFý
 ý#5	[ þ û¹
 ÿ
 ü$9M,k%
 ùþ	ÿþ?ý¹û7 ùþäÿþ! þ	ÿþ þ
ü$¹
 ü	3 ý% ú#v
 ýÿþâýV
 ý ý¹ú3 ý%	 þ7RVX ýÿ¹
 þ!T!3 ý¹ûûþ
U ýN

 ü	 þ?ûP#6 ý$ ùþâùþ?ý# ù*v
 û þ ûn9M1
ü$ûú#ú#¹þS	ý¹ûþ<6XdAeTf

SR

hoGi

 } 
	


o

j

	




	




 	

 	 

|/|

/}





3·0µ {´}

S/PxA UWV K QS  EHKLM<?>=KNMP
o
: hG
o ª h rOrz f3e  :hG
o ß j5h rOrz 3f e  
j5h : hG
: hG
o ß j5h rOrz f3e  
 i rOrz f3e 
: hG
¤ rOrz f3e : hG
 ¤1l e

l

Ï Ù¡Ð;Ô	Ý¡Ð5Ñ
?
Þ¡Ð0Ï?ÑÍ 
Ó'Ñ'ÞÙ¡ç Ì+ÕÐ5Ñ'Ì+Û¹Ð0ÍÜ{Ð5ç Ô ë
ß
ËÌ Ù¡ËNÛ¹Ð5ÒÍ!Ì ÓÞdç Ì Î{Ô¡ÎÑ'Ô?Ó'Ð5Ì ÒDÜ{Ð5ç Ô ë

Ü{Ô¹Û¹ÞâàÖÏ¡Í'ÍbÌ ÒÛ¹Ð×RÔ	Ý¡Ð5Ñ
ËÌ Ù¡ËNÛ¹Ð5ÒÍ!Ì ÓÞdç Ì Î{Ô¡ÎÑ'Ô?Ó'Ð5Ì ÒDÜ{Ð5ç Ô ë
ÚÑ'Ì+ÕÏ¡ÕÌ+ÛâÜ{Ð5ç Ô ë

Ù¡ç ÚÕÔÍ!Ð;Ü{Ð5ç Ô ë
 
éÜÑ'Ì ÒÔ¡Ù¡Ð5ÒRÔ	Ý¡Ð5Ñ
ß


øý%	þPJ5%ø(Hcùþ`_þ?û+íúþ

#&%&®'$%lýùþQ`°57d

û¹ÿü/ûäúþi:¹ÿvû+ý%¹þ

«« ß « 

o

«« ß « 

T1møfùþ?úÿäü$ûú#ú# ú  ùþ

9	bú#ÿþ?ûíý5,ÿþ?ûü_þú#¹þ#1

ûü/ýþâýÿþP
äýÿb¹þæú

	bú#ÿþ %øfùþ7#&%&®'$%

ûü/ý
 þ®üÿþ?ûþ* ú ùþ
*¹þU ù5vû¹ÿü/ûyúþ
ûú ùþ \5ý3ú#' 
Nþ?ý¹ûÿþ  
#&%&®Ru6 '$% (9%ý%2ý%ývû+ý%¹þ T1  ýjV
 þ3 û 2@ ý (Jþþ ü$ûú#ú#û
_
W
 û¹ ÿ
 ü/ûDûþþþi5ùþ4
NþRV
ú	
 ýí
 þ
U ü_þ	ÿ!v
, ý ;@ ý cJ'H
 ùþâûþ!¹ þ«
 û¹ ÿ
 ü/ûH:¹
 ÿMä

 ú/ ùþ
#&%&®'$% *¹ þ«
U ù5G1

	bú#ÿþQ5%øfùþyûý
Nþ®û¹ÿü/ûFý¹ûvú 	bú#%V
ÿþ
W
 ûù^âúcùþ °` 57d®ûü/ýþmúRV
$#&%&®'$%lûü/ýþ1øfùþ

û+þ?ý`ùþ

5



¼{ §



þ\5ú#ýþþ=Pùþ?ûþ='H

	ý _þ þ?ý¹ûú# úþ-1 NW ùþ
°57dyûü/ýþ]ý(ùú73úþKþú
ü$
 ú* û268LR, L*]
9 ý<6W@!LLR,@!LL*m
9 ÿþ	üÿþV
ûþ*
 ûRÿM þäü$
 ûú# ú#
 ûc%
 ú# ù ûú#
 úZV
 ý þdþ\5
	
 ý-	[ þ	ÿ1

`



DC

ûü/ýþ?û

Y5 ý% ú3û+ ú	 ýú _þ	ÿþ þ?ûWú`ú3û+ ÿ5ú#	 ú#ûA:¹ÿÁýkùþþ?ûÿ5úü+¹ÿ5û;6#ý%+ÿ5ú#	þ?ûn9A_þ!'mþ	þ=ùþ?ûþ
'HFü$¹ü	3ý%ú#ûú3û)þ?û+þ&ûú/ùþ * þ?û+^%ú#ù=B
RþþRû+ý%¹þ46  L L 9M1 ¹ÿTùú3û
ü	
 ÿü$
 ûþ/5N

 þ	ÿ5ú	 ýb
 ý%+ ÿ5ú#	 þ?ûdùý¹ þ]_
 þ	þyü/ýÿú#ú#þ®ú<ü<+=h%Læú*þ	ÿý3ûdû+4ùý%âúyþ!¹þ	ÿ
ú*
 þ	ÿ ýA ùþ	ÿþæýÿþæý%S þ?ý¹û+ yú
 û+ ý þ?û!1_T
/& ùþæý%+ ÿ5ú#	 þ?û;%
 ú# ù ûú#
 úZ	 ý*#Qú _þ	ÿþ*
ú3û+
 ÿ5ú#	 ú#
 û^ ùþ	ÿþíýÿþFý#;
 ý
 û7 ù
 ûþS ùý%P:¹
 ÿM
  ùþS þ?ý%
 ÿþ?ûþ?û ÿ5ú#/
 ú" ùþíû¹
 ÿ
 ü/ûS6: ùþ
üÿ5ú	
 úü/ý# ý+¹ ÿ5ûn9M,%	k
 û
 ý#) ùþ	ÿþ]ýÿþ]ý3 û+) ùþ	ÿý%+ ÿ5ú#	 þ?û-%
 ú# ùÖûú#
 úZ	 ý*#Tú _þ	ÿþ*- ý
 þ
ú3û+
 ÿ5ú#	 ú#
 û!)
1 øfùþ?ûþRý%+ ÿ5ú#	 þ?û%ýÿþ	 ý þ
+*
n_
, ý3ùþP þ?ý%
 ÿþ?û^:¹
 ÿMN

 þ3
ùþ?úÿk ý
 þ?û- ùý%b
 ýÿþH5 ùýÿ5ý þ	ÿ5ú3û+ úF:¹ ÿk ùþHú3û¹
 þ	ÿþRû¹
 ÿ
 ü/ûVýÿþH	 ý þ
+ *  n1

 



B

8' I 1	

DC

EGF5HIHKJMLONUX [N#NULGXOFKN VGE
hoo

DC
EGF5HIHKJMLONUX Z7[ *NJML E

~´}~µ 

~/]{}/}

Y üü$¹ÿú/#ý+¹ÿ5ûÁýÿþ¹þ	ÿ ú
Nü$¹ÿý*)+pý5ùúþ!¹þDü/ý%+þ	ÿM&þ?ûÿ5úüú#û(ùý%ÁýÿþRÿþ?ý¹û+RV
R
ý%	#Q
Nü	þ!þvý ý!þ	üý%	þ:¹ÿ/
Nþú	ý]üÿ5ýúþ,)ý¹û;
Nþú	ý]þUü_þ	ÿûú3û3ú#b¹þíûù¹ÿâÿMþ?û
ýpüÿþ! þ	ÿÿM þ?ûú!úR
 ý¹û^
5 ùæû
 üü$¹
 ÿ ú#¹
 þÁþ!
 úþ þdý¹ûfü$
 ûûú#	 þ/68>c
 þb,k@BBh9M1
NW` ùú3û^H¹ ÿb,$ ùþRÿ þ]
 û+ ý% ú3û+ ú	 ýb
 ý
 ý#
 ûú3ûWú3û^+þ! þ7N

 þ?ý
 ú8
 û
 üü$¹
 ÿ úS# ý+¹
 ÿ5û!,
%ùþ	ÿþ?ý¹ûK ùþ^þ	 ú3ûú#;%
 ùþ! ùþ	ÿF ùþ!%
 ú5_
 þ)
 ûþ/+â
 û
 üü$¹
 ÿ
 ûþ	ÿ0 ûFRþ þ%ú; ùþ%û¹
 ÿ
 ü
þ?û
 ÿ5úü ú#y
 ú3ûc þ!:c+3 ùþNþ
U ü_þ	ÿ!1/NW& ùþdAeTL
f ýüü	3 ú	 ý% ú#& ùþNþ
U ü_þ	ÿd
 ùý¹û7þ	 úþ&%ùþ! ùþ	ÿ
ùþWüÿ¹ ü$
 ûþ]#ý+¹ ÿ5ûýÿþÖúþ	þFú* þ	ÿþ?û+ ú
, ù ÿþ3 ú3ý%	 þ) ùþ!F
 ýÿþT¹
 ÿù þ?ý¹ûú#S ùþ!]	 ý_
 þ

 þ?ý¹û
N
 ÿþ úæ
 üÿ5ý ú þ1^NW øý%	 þ;h5
, þ
U ü_þ	ÿW
 ûþ þ þyû
 üü$¹
 ÿ ú/# ý+¹
 ÿ5ûÁýÿþ;3 ú3û+ þ`þURT+" ùþ
úú#
 úý$dAeTf ÿ5ú3û+b]¹ ÿ
 ü/û!
, þ?ý5 ù=þ?û ÿ5ú#_
 þ"5v
 ýS3 ú3û+Ab
 üÿ5ú	 úü/ý	# ý+¹
 ÿ5û!1

 o

j


 o


j
o

EHKNN§=?>,AC@ V < j Q AC=?>P

i >@ V Q@.N j ; j Q AC=?>P
Î{ÔÍ!Ì Ó'Ì Ý¡ÐmáÏ?àÁÌ ç ÞâËÌ+ÍÓ'Ô¡Ñ'Þ
Ï?Ù¡Ð;Ô	Ý¡Ð5Ñ
Þ¡Ð0Ï?Ñ

ÎÍ!Þ¹ÕËÔÍ!Ô¹ÕÌ+Ï?çÍÓ'Ñ'Ð0Í'Í
ÕÌ ÙÏ?Ñ'ÐÓ!Ó'Ð;Í!àÁÔ¡ïÌ ÒÙ
ËÞÎ{Ð5Ñ!Ó'Ð5ÒÍ!Ì Ô¡Ò
Ô	Ý¡Ð5Ñ ë Ð5Ì Ù¡ËÓ
Î{ÔÍ!Ì Ó'Ì Ý¡ÐmáÏ?àÁÌ ç ÞâËÌ+ÍÓ'Ô¡Ñ'Þ
ËÞÎ{Ð5Ñ!Ó'Ð5ÒÍ!Ì Ô¡Ò
Í!ç Ì Ù¡ËÓ'ç ÞdÌ ÒÕÑ'Ð0Ï¡Í!Ð0Û

 pÕËÔ¡ç Ð0ÍÓ'Ð5Ñ'Ô¡ç
ÒÔ¡Ñ'àÖÏ?çÜÚ¹Ó]Û¹Ð0ÕÑ'Ð0Ï¡Í!Ð0Û 
 pÕËÔ¡ç Ð0ÍÓ'Ð5Ñ'Ô¡ç
Ì ÒÕÑ'Ð0Ï¡Í!Ð0ÛÖÓ'Ñ'Ì Ù¡ç Þ¹ÕÐ5Ñ'Ì+Û¹Ð0ÍÝ	Ï?ç ÚÐ



Ü{Ô¹Û¹ÞâàÖÏ¡Í'ÍbÌ 
Ò Û¹Ð×RÔ	Ý¡Ð5Ñ
Ï?Ù¡Ð;Ô	Ý¡Ð5Ñ
Þ¡0
Ð Ï?ÑÍ



j5h l r



 

 o O
r rz f3e 
 i l r

h rOrz f3e 
 ¤ rOrz f3e
 i l r

Ó'Ô?ÓÏ?ç/ÕËÔ¡ç Ð0ÍÓ'Ð5Ñ'Ô¡ç{Ô	Ý¡Ð5Ñ
ß
Ï?Ù¡Ð;Ô	Ý¡Ð5Ñ
Þ¡Ð0Ï?ÑÍ
Ü{Ô¹Û¹ÞâàÖÏ¡Í'ÍbÌ ÒÛ¹Ð×RÜ{Ð5ç Ô ë

Ó'Ô?ÓÏ?ç/ÕËÔ¡ç Ð0ÍÓ'Ð5Ñ'Ô¡ç{Ô	Ý¡Ð5Ñ
ß
éÜÑ'Ì ÒÔ¡Ù¡Ð5ÒRÔ	Ý¡Ð5Ñ
ß

Ü{Ô¹Û¹ÞâàÖÏ¡Í'ÍbÌ ÒÛ¹Ð×RÜ{Ð5ç Ô ë

ç ÐáÓ)Ý¡Ð5ÒÓ'Ñ'Ì+ÕÚç+Ï?ÑbËÞÎ{Ð5Ñ!Ó'Ñ'Ô¡ÎËÞ

h



Î{ÔÍ!Ì Ó'Ì Ý¡ÐmáÏ?àÁÌ ç ÞâËÌ+ÍÓ'Ô¡Ñ'Þ

Î{ÔÍ!Ì Ó'Ì Ý¡ÐmáÏ?àÁÌ ç ÞâËÌ+ÍÓ'Ô¡Ñ'Þ
ËÞÎ{Ð5Ñ!Ó'Ð5ÒÍ!Ì Ô¡Ò
Û¹Ì+Ï?Ü{ÐÓ'Ð0ÍbàÁÐ5ç ç Ì Ó'ÚÍ

øý%	þPh5)NWþ«û¹ÿü`þ?ûÿ5úüú#ûP6üÿ5ú	úü/ý-#ý+¹ÿ5ûn9fý`ùþ?úÿWû+ý%ú3û+ú	ý5ùýÿ5ýþ	ÿ5úZV

[?ý%ú#û6#ûüü$¹ÿú#ý+¹ÿ5ûn9M1



 <38 >+?82@:A'58 U: K4>:A+
±xr/o

±q

q

s

_

¹þ	ú3ûý3ú#[?ý%ú#/
Nþ!ùR]	ý]_þ)ûþS+Pú3ûý3ú#[	þAùþ^ü	FVý*äû¹ÿü]ú3û¹þ	ÿ
 ùý%3 ùþ< ü	æ

 ùý¹û4 ùþ<:¹
 ÿM
 R
 ÿM þ?û%
 ú# ùuý ýÿ¹
 þ!`!3 ý¹ûûæú  ùþ?úÿ
ûþ\5
 þ*!1gNO)	 ý«
 ý3 û+/_
 þ7
 ûþpý¹û%ýSN

 þ! ùR:¹
 ÿ^
 ú3û
 ý3 ú#?[ úR
 û+ ýýÿM3!3 ý¹ûûúZ	 ý% ú#v
 ÿM þ?û!1
YR¹ ÿ
 ü4
 ú3û
 ý3 ú#?[ ý% ú#-
, ý¹û^þ?û ÿ5ú#_
 þpú4 ùú3ûfûþ ú#-/
, ý#%
 û)
 û)+]N

 ü/ýÿþú3û+ ÿ5ú#	 ú#
 û
2ú _þ	ÿþ*N
 û¹ ÿ
 ü/û!1 øfùþpýüüÿ
 ý5 ù ý¹ûûN

 þ?û; ùþpþ
U ú3û+ þ þ3Á
 ý%S þ?ý¹û+S
 þ35N

 þ	ÿ5ú<6:¹ ÿ
¹ÿMþ	ÿþSú3û ÿþ! þjb
9 ý%+ ÿ5ú#	 þ)_
 þ
U ü_þ	ÿ!0 û)ú* þ	ÿþ?û+F:¹
 ÿmû¹
 ÿ
 üäý
 ý#
 ûú3û!b
1 øfùþfûþ þ þíý%+ ÿ5ú#	 þ
ú3û%ü	#+
 þ=& ùþO¯3!V ýj
U ú3û2F ùþ;ú3ý%¹
 ÿ5ý
4Ö
1 øfùþ ± !V ýj
U ú3ûWÿþ	üÿþ?ûþ* ûÁý!3 ý¹ûû!,$¹
 ÿc
/¹
 ÿþDüÿþ	 ú3ûþ#,
ùþS5
P_
 þ	ÿ2m
 ú
 û+ ý þ?û2m
 ý
 ú#¹ þ<!3 ý¹ûû!1 H ùQúÿþ ú#
 û^H ùþ ± !V ýj
U ú3û]6 ± ! ý ± W
9 ýÿþ
 ûþ=+p

 úú	 ý% þP ùþ/5
P_
 þ	ÿT]
 ú
 û+ ý þ?û!12NW bú#
 ÿþ/C5,-:¹
 ÿÖú
 û+ ý þ,$ ùþO¯3!V ýj
U ú3ûÁÿþ	üÿþ?ûþ* û
( , ùþ ± ! !V ýjU ú3ûKþ þ?ûK!3 ý¹ûû¹ ÿ ýÿR
 ùþ?ýÿKú3ûþ?ý¹ûþ76XdAeTf7±
9 ý ± þ þ?ûK!3 ý¹ûûH. ùþ?ý# ù*0
ý#¹ÿ5ú#ù
4,Wüÿúþ

DC

 8

	

hoOj

 } 
	

 	

|/|

 	 

/}





3·0µ {´}







86 RVWdAeTf79M152H¡:ÿA¹ÿ5ýü/ùûmý%Aùþ ± ! ûúþ,*ùÿþ	þÁÿþ	üÿþ?ûþ*;úþíû¹ÿü/û26 @%, 2J
ý /@9k-dAeTf ü/ý%úþ*û!,ýùþA:ÿùDûù%ûùþý%¹þ^ú3û+ÿ5ú#	ú#c	ùþ;þ*úÿþ;ü$¹ü	3ý%ú#
FdAeTf #6 ýkdAeTf7m
9 ü/ý% úþ* û!)
1 øfùþc¹ ÿ5ýü/ùûfý%( ùþ ± ûúþÖûù  ùþ7ú3û+ ÿ5ú#	 ú#]RVWdAeTf
#6 ýb
 ùþ?ý# ù*f
9 ü/ý% úþ* ûÖú` ùþ; ÿ5ý¹ú
 úF
 ûþ!d
 ý=ùþ/ú3û+ ÿ5ú#	 ú#4m
 ùþ?ý# ù*«
 û þ ûÖú!þ
ú*+/
 ùþâû¹ ÿ
 ü3_2J368ý¹ûùþ43ú
 þj9M1



SR

	bú#ÿþPC5^fÁú3û+ÿ5ú#	ú#ûc)ùþ5
P_þ	ÿ5ûP2dAeTfåü/ý%úþ*û46#ý)dAeTf79dý ùþ?ý#ù* ûSRþû
6#ý]ùþ?ý#ù*9ÖúQþ	ÿM
äû7fý%¹þ<6#úQ¹þ?ýÿ5ûn9M1 W
c ÿ5ýü/ùû 
@%, 
2J5,8ý/@äÿþ	üÿþ?ûþ*Pùþ
ú3û+ÿ5ú#	ú#ûc7dAeTf
ü/ý%úþ*û;_þ#ú`+<ùþ4¹ÿÿþ?ûü$ú û¹ÿü/û!1Bøfùþ
ý¹ûùþ33úþWÿþ	üÿþ?ûþ*û%ùþ?ý#ù*vûS
R þûfú!þFúæû¹ÿü<
2J51

	bú#ÿþI*^fÁú3û+ÿ5ú#	ú#ûc)ùþ5
P_þ	ÿ5ûP2dAeTfåü/ý%úþ*û46#ý)dAeTf79dý

SR

ùþ?ý#
 ù* û þ û
6#ýVùþ?ý#ù*9M,ý¹ûAmþ_ý¹û(ùþcú3û+ÿ5ú#	ú#ûF±ü/ý%úþ*û(:¹ÿfû¹ÿü/û @Áý /JRú
þ	ÿMä

 û^]
 ý%¹ þ3#6 ú3¹ þ?ýÿ5ûn9MÁ
1 øfùþý¹ûùþ`3ú
 þdÿþ	üÿþ?ûþ* ûWùþ?ý# ù*«
 û þûWú!þpú
û¹
 ÿ
 ü @%1

SR

L

L






T	

<L

52B
 ü	
 ÿü$
 ûþ, ùþ]¹ ÿ5ýü/ùû7fû¹ÿü/û @íý /@íú bú#ÿþC«ûù #<ùþ"¹þ	ÿ5ý%¹þ
fü$ûú#ú#¹þ"	ý¹ûþ?û36XdAeTf ü/ý%úþ*ûn9M,]ý ú bú#
 ÿþ3I4ùþ¹ÿ5ýü/ù%û¹ÿü /J«ûù%û#

	

ho 

L

~´}~µ 

~/]{}/}

	bú#ÿþ

5^fÁú3û+ÿ5ú#	ú#ûK±ý-dAeTfîü/ý%úþ*ûmý"ùûþ2þ?ûÿ5ú#_þ/5äü/ý%+þ	ÿMûA_@Wý (J5,ý¹û
 þb
m
 ý¹ûdýb
 ùþ?ý# ù* û þ ûÖý&ù
 ûþäú!þ«ú*+p
 ü/ý%+ þ	ÿM (J<68ý¹ûùþ<3úþj9fú
$
 1
 þ	ÿMä

 û(+ ýk5 ù þ?û+ þ	ÿ¡ ý
 þdú

SR

T=<=D 

2


T	

T	

	L

ùþ"¹þ	ÿ5ý%¹þ4;ü$ûú#ú#¹þ]	ý¹ûþ?û!,%ùþ	ÿþ?ý¹ûPùþ]¹ÿ5ýü/ùû7 2Jæú bú#ÿþ"Cæý @íú bú#ÿþ4I
úú	
 ý% þ ùý%2 ùþ;þ?û ÿ5úü ú#
 û^]
 û¹
 ÿ
 ü/ûT¹
 þ	ÿdü$
 ûú#ú#¹þ	ý¹ûþ?û]6XdAeTflü/ý%úþ*ûn9%ý¹ûTmþbý¹û
û+N

 þ^
 þ!
 ý% ú#¹ þ2	 ý¹ûþ?û2#6 ùþ?ý# ù*N
 úú#
 úý3 ûn9M1 U þ	üF:¹
 ÿg ùþ^¹
 ÿÿþH
 ú3û
 ý3 ú#?[ ý% ú#;V
 û¹
 ÿ
 ü/û
2ä
J ý â
@ ý3 ùþâþ* úÿþ/dAeTf ý`RVWdAeTf ú3û+ ÿ5ú#	 ú#-, bú#
 ÿþ?ûTä
C ý N
I ùý¹
 þ_
 þ	þ
ûúN

 ü	3 úZ/
 þâú¹ ÿMþ	ÿ+Ö
 þ
 ý%	 þý2_
 þ!+ þ	ÿFþ	ÿ5û+ ýú^ ùþA
 ú3û
 ý3 ú#?[ ý% ú#N

 þ! ùR-,5R
 ûù%
 ú

 û+( ùþ7¹ þ	ÿ5ý%¹ þ;
 ü$
 ûú# ú#¹ þ7	 ý¹ûþ?û!1
NWN

 þú	 ýgä

 ý¹ú
 ûcm
 þ]'{
 ü/ú	 ý#<
 ûþS ùþ ± ! ûúþS+«
 ÿþ	üÿþ?ûþ*P ùþ"5
P_
 þ	ÿ7
 ü$
 ûú# ú#¹ þ
 ý¹ûþ?û46XdAeTå
	
f ü/ý% úþ* û!)
, úQ ùú3ûâü/ýü_þ	ÿÁ
9 ú¹
 ÿMþ	ÿP+y
 ÿþ!¹
 þ?ým
 üÿ¹
 ü_þ	ÿ úþ?û7f
 ú þBü/ý%+ þ	ÿM
 ûP:¹ ÿ
û¹
 ÿ
 ü/û$ ùþ?ûþfü/ý% úþ* û!
1 52/ ùþ) ùþ	ÿmùý-, ùþ ± ûúþfú3û8ÿþ?ûþ	ÿ¹
 þS+d
 ÿþ!¹
 þ?ý/
 üÿ¹
 ü_þ	ÿ úþ?û
F ùþ?ûþDûýN

 þRü/ý%+ þ	ÿM
 û/6:¹ ÿ2 ùþ	ÿÁü/ý%+ þ	ÿM
 ûn9(:¹
 ÿ2 ùþ;
 þ!
 ý% ú#¹
 þ/	 ý¹ûþ?û/6 ü/ý% úþ* ûT%
 ú# ùcdAeTf79M1
52 þA	 ùþfýý* ý%¹ þ?ûF ûú ± ! ý ± ý¹û8üÿ¹ ü$ ûþDý%$¹ þfú3û ùý%8 ú/ ú ýÿP!3 ý¹ûûúZ	 ý% ú#
üÿ	 þä

 û^ ùþ;N

 ü/ýÿ5ú3û+=F ùþNýÿþ?ýþ	ÿT ùþ;¹
 ÿ5ýü/ù=]
 ývû¹
 ÿ
 üyý=ùþ¹
 ÿ5ýü/ù=g ùþ
þ*
 úÿþü$¹ ü	3 ý% ú#;
 ú3û
 ý3 ú#	[ þ?û ùþ) ÿ5ý ú#
 ûK
  
 ý%F ùþ ± ! ûúþP#6 ûþ ûú# ú# ú#'$
 #&% *9M,



"

!
 ùþ	ÿþ1% fý
,(Dû+ ý;:¹ ÿK ùþ
ý
 
 ý%K ùþ ± ûúþc6:# ý3 ûþý3 ýÿM
 ÿ5ý% þ°'$% *9M,%
  û! ú# ú# ¹ þÖý4þ! ý% ú#¹ þP	 ý¹ûþ?û%ú ùþÖþ* úÿþÁü$¹ ü	3 ý% ú#-{, ÿþ?ûü_þ ú#¹ þ#1 ¹ ÿWú û+ ý þ,
5
P_
 þ	ÿ5ûH
 ü$
ú3
 ùþ
 ú3û
 ý3 ú#?[ ý% ú#4]
 û¹ ÿ
 ü R
@ ú bú#
 ÿþ/I; ùþDýÿþ?ý"þ	ÿ^ ùþ;ý¹ûùþ`3ú
 þ7` ùþ ±
ûúþ%ÿþ	üÿþ?ûþ*
 ûg ùþ25
P_
 þ	ÿ5ûFkä

 ú3û!3 ý¹ûûúZ/
 þ/ÿ5ý¹ú
 úâ
 ú
 û+ ý þ?ûg±
 û¹
 ÿ
 ü @%1KNW] ùú3ûF;
 ý,
 ùþFûþ

 ûú# ú#
 ú#'y
 ýQ#ý3 ûþíý3 ýÿM
 ÿ5ý% þ	 ý_
 þäþ?û+ úä

 ý% þ:¹
 ÿâü/ý%+ þ	ÿM 2@S ÿ
 bú#
 ÿþ4I*p
1 øfùþ
ûýN

 þDú:¹ ÿMä

 ý% ú#4:¹ ÿWü/ý%+ þ	ÿM (J]	 ý=_
 þ7:«ú bú#
 ÿþ 5V
, ûù%
 úí
 û¹
 ÿ
 ü/û^_â
@ ý (J
ú
 þ	ÿMä

 û(8
 ý%+ ÿ5ú#	 þ;. + ýk5 ù þ?û+ þ	ÿ¡ ý
 þ0#1
øfùþ%üÿ¹
 ü$
 ûþ]ú3û
 ý3 ú#?[ ý% ú#SN

 þ! ùR"	ý"_
 þWýýü þ"+
 ú3û
 ý3 ú#	[ þ%û¹
 ÿ
 ü/û]ý3 û+D
 úS þ	ÿMä

 û
T ý
 þ3ú3û+ ÿ5ú#	 ú#
 ûP2ú3û ÿþ! þ jä

 ú
 ý
 ý%+ ÿ5ú#	 þ?û!1 _T ýüüÿ
 ý5 ùi+ û5 ùi
 ú3û
 ý3 ú#?[ ý% ú#
ú3ûÁüÿþ?ûþ* þBú bú#
 ÿþSB51]e^m
 þ!¹ þ	ÿ,þ/+4/
 ýÿP5 ùýÿd
 ÿþ	üÿþ?ûþ* ý% ú#-±
, ú#d
 ú3ûc
/¹
 ÿþSú "!#T+
N

 ü/ýÿþâûþ!¹ þ	ÿ5ý±
 û¹ ÿ
 ü/û;ú
 þ7
 ú3û
 ý3 ú#?[ ý% ú#-1
NW=¹ þ
 þ	ÿ5ýG
, ú#Ö
 ú3û2c
 þ þ?ûûýÿ` ùý% ± ! ý ± þ þ/'H4¹
 üü$
 ûú# þ;!3 ý¹ûûþ?û!1PNO]
 ýüüÿ%V
üÿ5ú3ý%
 þ, ùþ!3ä

 ý`þ þDý*3'H!3 ý¹ûûþ?û!,¹
 ÿÁþ!¹
 þy
 ý*4'H4ú _þ	ÿþ*W
 ý%+ ÿ5ú#	 þP ý
 þ?û!,	%
 ùú5 ù
 ùþdþ

U ü_þ	ÿ(H43ú#¹b þ2+"N

 ü/ýÿþ1






VL

S	

R












VL



D@

	

L

	

	

"MN

>_




	

	

D^

DC

ho 

 } 
	

 	

|/|

 	 

/}

	bú#ÿþPB5^fÁú3û+ÿ5ú#	ú#4AdAeTf





3·0µ {´}

SR

ü/ý%
 úþ* ûÁýyùþ?ý# ù*æ
 û þ ûT%
 ú# ùæÿþ?ûü_þT+p
 û+ ÿþ?ûûT ý
 þ?û
68#7,ùú#ù-,ý;¹þ	ÿNùú#ù9-:¹ÿFùþþ*úÿþü$¹ü	3ý%ú#Rý/ùþA	¹þfúþRü/ý%+þ	ÿMû!1

	bú#ÿþS@!LR^fÁú3û+ÿ5ú#	ú#P¡dAeTf

SR

ü/ý%úþ*û)ýDùþ?ý#ù*Dû þû%ú#ùRÿþ?ûü_þK+ÖþUþ	ÿM	ú3ûþ

dc

Y øuûþ!N


 þ*^þ	üÿþ?ûûú#p
 úä

 ú3 úN

 þ! þ	ÿ5û26W@!
S
 ¹
 ÿÿþ?ûü$ûA+SLR1@7
 ­ 9M1  ýÿ¹
 þ7ú#V
þ	ÿþþT_þ!'mþ	þ"+ý_ùþ?ý#ù*äýFúü$¹ü	3ý%ú#ûF	ý"_þ^úþ-,5	Hú _þ	ÿþþ?û
ý
/®
 ü/ý%+ þ	ÿM
 ûäýÿþ4¹ þ	ÿ ûä

 ýG
1 ²bý%+ þ	ÿM
 ûS_p
@ ý d2p
@ ýÿþæûþ þ þ ý¹ûNþUR ÿþN

 þ
 ý¹ûþ?û!1 øfùþ"ý¹ûùþ3ú
	
 þäüÿþ?ûþ* ûRùþ?ý# ù*y
 ü_þ	ÿ5û+
 ûâú¹
 ÿÿþ#<þ?û ÿ5ú#_
 þ<5®
 ü/ý%WV
þ	ÿM&d2@

DC



<38±xr/o>+?82 ?s?4¡z{o>2oz 4¡qK4>:A+s 4 % >o +?8±r % @ :A'58±qU:qK4>:A+s




YR¹ÿü3ú3ûý3ú#[?ý%ú#pú3û)¹þ	ÿ4ýý%	þ7:¹ÿ%þUü_þ	ÿWú*þ	ÿüÿþ!ý%ú#3)û¹ÿü`ú3û¹þ	ÿpÿþV
ÿ

bú#
 ÿþ?û7v
C ýIFú#c	 ý<_
 þNûþ	þ< ùý%c ùþ	ÿþäú3û2æ
 ûú#
 úZ	 ý*2ú _þ	ÿþ þ;_
 þ!'m
 þ	þ

&	 g	

DC

û#û!1

hoOh

~´}~µ 

~/]{}/}

SR

dAeTflü/ý%úþ*ûÖýyùþ?ý#ù* û þûWÿþ!ýÿMú"ùþ?úÿÖý%¹þ,¡	Tùý%2ùþ	ÿþNýÿþNûú#úZ	ý*2ú#V
þ	ÿþ þ?ûFý
/ ùþ=þ! þþ ü/ý%+þ	ÿMû!1 bú#ÿþ Búû+ÿ5ý%þ?ûäý ûú
äú3ýÿNþ _þ:¹ÿ]ùþ`+ý
 ù þ?û+ þ	ÿ$ ý
5
 þ?û;ý# ù
 ùpú#;
 ú3ûHbR^ùý%A+ý¡5ùþ?û+þ	ÿVú3û;ýpú
Nü$¹ÿý*mÿ5ú3û+b/#ý+¹ÿ):¹ÿ
ùþ^dAeTf ú3ûþ?ý¹ûþb
1 øfùú3ûk/
 ûþ	ÿ ý% ú#D
 ûù%
 û ùý% ùþ;üÿ	 þ
-dAeTf ÿ5ú3û+bc¹
 ÿ
 ü/þ! þ ú#S	 ý
'{
 ü/ú	 ý#/g_
 þ%û+#¹ þ]5/
 ûúþ	ÿ5úd
 ûú þ) þ?ý%
 ÿþ?ûmý]þ
/
 û+ ÿ5ý% þ?ûg ùþWýüüÿ¹
 üÿ5ú3ý% þ
 þ?ûû
¡ ùþÁû¹ þ?û+ þvýüüÿ
 ý5 ù"%
 ùú5 ùS ÿ5úþ?ûg+;¹
 þ
 þ	ÿ5ý% þÖû¹
 ÿ
 ü"þ?û ÿ5úü ú#
 ûK%
 ùú5 ùíýÿþÁý#
 ú	 ý
  ú#8
 ý/ þ!¹ ÿÿþ3 ý% þ3þ?ý%
 ÿþ?û!1
bú#
 ÿþ=@!L ú3ûâý3 û+ ú* þ	ÿþ?û+ ú8
, ûú þFú#â
 ú3ûP¹
 þ	ÿQú _þ	ÿþ*P ÿ
 ùþ	ÿP	
 ÿþ?û!1 ^ ú þ" ùý%
þ
U þ	ÿM	 ú3ûþ
d 
Y øåûþ!N

 þ*"þ	üÿþ?ûûú#;
 ý¹û]]
 ûþ ý¹ûíý ý%+ ÿ5ú#	 þ«ú ùþ3 ÿ5ý¹ú
 ú<ý% ý
6:%
 ùú5 ùS* ý¹ú
 þ]#D
 ý%+ ÿ5ú#	 þ?ûF ùý%m
 ýÿþ%ý ý¹ú3 ý%	 þ%ý%m
 û+ ý%¹
 þ?ûH_P,  ýd)9M
D þ
U þ	ÿM	 ú3ûþ d 
Y ø
ûþ!N

 þ*^þ	üÿþ?ûûú#-,#; þ	ÿM

d
ÿþ¹
 ÿMúN
 ýpþ5 ùR5 ùýÿMú#¹
 ÿ5ýü/ù*v
 ýÿþPf
 ý ý¹ú3 ý%	 þ2:¹ ÿ
þ?ýÿM#ä
 ÿ5ú3û+b/¹ ÿ
 ü4þ! þ ú#p
 ûú þ^ ùþ!"	 ý_
 þT þ þ jN

 þ?ý¹û
 ÿþ#ä
 úF
 ûü_þ	 ú3ý3 ú#	[ þ"
Nþú	 ý
ú
 û+ ú# ú#
 û!1 bú#
 ÿþ@!L! þ?ýÿM#Sþ
/
 û+ ÿ5ý% þ?û;ûú#
 úZ	 ý*gú _þ	ÿþ þ?ûg_
 þ!'m
 þ	þv
 ý-dAeTî
f ýFý
ùþ?ý#
 ù* û þ ûDú þ	ÿMä

 û;f
 þ
U þ	ÿM	 ú3ûþ
d
Y ø ûþ!N


 þ*Sþ	üÿþ?ûûú# ý
 þ?û!,Fþ
/
 û+ ÿ5ý% ú
ùý%g ùú3ûKN

 þ?ý¹û
 ÿþN

 þ*!
, ú#_
 ý ý¹ú3 ý%	 þ
, ú3û)ýä
 þU þ þ*gú3ûþ?ý¹ûþ%úú	 ý%+¹
 ÿ1 A]
 ú#]
 ý3 û+d
 ûù%
 ûF ùý%!,
ý#
 ù
 ùæú#f
 ú3û(bR^3 ùý%f
 ü/ý%+ þ	ÿM
 û^_d
@ ý=d2@7¹
 þ	ÿcú _þ	ÿþ*)ú3ûþ?ý¹ûþdû
 ü$¹
 ü	3 ý% ú#
 û!,5 ùþ!
_þ?ùý¹ þ7¹ þ	ÿp
 ûúä

 ú3 ýÿM#ä
 ú þ	ÿMä

 û( ùþÖþ
U þ	ÿM	 ú3ûþ
d
Y øuûþ!N


 þ*Tþ	üÿþ?ûûú#v
 üÿ¹
 ü_þ	ÿ'1

>R

	

	

OC



DC

 c

 c

;	
SR

?_

 c



DC

DC

 c



 c

<38±xr/o>+?82 .W¯qU8±qK4>:A+s

NW3¹ÿMþ	ÿT+Fþ!ýý%þùþú3û¹þ	ÿþ ÿ5ú3û+b"¹ÿü/û!,	ùþ;
Nþú	ýþUü_þ	ÿWùý¹û^þ?û+þ=ùþRúþ
û¹
 ÿ
 üæü/ý%+ þ	ÿM
 û)«
 ý«
 úþ	ü_þþ*ûþ!^gIjLäü_þ!¹ü	þ]6 %L4dAeTf ü/ý%úþ*û%ý=J%L]RVWdAeTf
 ý¹ûþ?û( ÿ
  ùþÖûýN
	

 þÖù
 ûü/ú# ý:9M)
1 øfùþWÿþ?û# ûH:¹
 ÿA ùþ?ûþÁü/ý% úþ*û!,û
S
äýÿ5ú#[	þFúvøý%	þ ,ûù
ùý%7 ùþNü/ý%+ þ	ÿM
 ûâýÿþäû! þ?ûû+88
 ú<þ! þ ú&dAeTL
f ü/ý% úþ* û!1S_^$PB%L
)dAeTL
f ü/ý% úþ* û
mþ	ÿþRú!þæú*+F
 ý%T þ?ý¹û+^
 þK ùþ7	¹
 þâü/ý%+ þ	ÿM
 û!%
1 øfùþPþ! þ þyûþ
 ûú# ú#
 ú#' ý
 þ?û36 #&% *9
:¹ ÿÖü/ý%+ þ	ÿM
 ûc_@%, (J5
, ýQd2N
@ ýÿþNûú#
 úZ	 ý*#«
 ùú#
 ùþ	ÿ2 ùý& ùþ; ý
 þ?ûcN

 ü	 þ&& ùþNûþ!
±
 ü/ý% úþ* û(
 ûþ":¹ ÿfû¹ ÿ
 üú3û¹ þ	ÿ1 ¹
 ÿ( ùþ2 ùþ	ÿ('HN
 ü/ý%+ þ	ÿM
 ûA ùþ2 ý
 þ?ûA/(ú _þ	ÿ
ûú#
 úZ	 ý*#1 ^ þ; ùý%2 ùþDý!!
 ÿ5ý` ý
 þ?ûWýÿþDÿþ3 ý% ú#¹
 þ#æ
 ùú#
 ù-,$þ?ûü/ú# þP ùþRÿþ3 ý% ú#¹
 þ#æ
 ùú#
 ù
#ý3 ûþdü$
 ûú# ú#¹ þÖÿ5ý% þu6 '$% *9M;ý]#m
 þ	ÿ&'$% S«ùý¹
 þP_
 þ	þ«
 ý5 ùúþ!¹
 þ`5p
 ûþ þ ú]#m
 þ	ÿT ý
 þ?û
F ùþ¹ þ
 þ	ÿ5ý3 ú#?[ ý% ú# ü/ýÿ5ýN

 þ! þ	ÿ&(	V
, ý%Ö
 ý"
 û+2gþ! þ úv
 û¹
 ÿ
 ü/û)%
 ú# ù=#m
 þ	ÿc¹
 þ	ÿ5ý%¹
 þS
ü$
 ûú# ú#¹ þc	 ý¹ûþ?û!1

#



	





#&%

_@
_2J
2@
(J
d2@
øý%	þ

5I*1  
 51  
J51  
hJ51  
Jh51  

1



DC





ø±ÿ5ý¹úúDûþ!

'$%Öÿ

JC51 
C51 I
B51
@J51 C
51







 



7FSL [  #&% 
B51  
>1  
R@%1 J 
 @%1 J 

I%J51 I 
hC51 L
CB51 J 
 J51 L
*
I 51 





J51 L

ø±þ?û+%ûþ!

'$%

I I*1 

JI*1 h
J%LR1 L
@ 51 L
LR1 L





* 
 





7FSL [ 

2YR
S
äýÿWÿþ?û#û;ý¹úþiiùþ4ÿ5ý¹úú®ûþ!äýi ý
IjL ü_þ	ÿ5û+û=6#% LidAeTf ü/ý%úþ*ûFý J%LRVWdAeTf 	ý¹ûþ?û"ÿ


Nþ?ý¹ûÿþæúþ	ÿM
äû( #&% R,H'$% Ný
7FSL [ %1


ho 







%LR1 L
IjLR1 L
R@%1 
I*1
h51 I

úþ	ü_þþ*Dûþ!S
ùþ ûý
Nþyùûü/ú#ý:9M,

 } 
	





 	

|/|

 	 

/}





3·0µ {´}

$&% z .1032)z{o54 '  + z :#s <38±xr/o>+?82 @n :A' ² +{¯z{o5B


øfùþ)dAeTf

 ý¹ûþû+âúû+ÿ5ý%þ?û¡ùý%bþUü_þ	ÿWVXúþRúú#âú3ûbýDú#þ	ÿ5ý%ú#¹þ;üÿRþ?ûûbúP%ùú5ù
	
ùþÖþUü_þ	ÿ)	 ý35ùý¹þPùþÖÿþ\5þ?û+þ4¹þþ	ÿ5ý3ú#'"ùþdúþvû¹ÿü/ûýùþdû/ûþ!(
ý%+ÿ5ú#	þ?û26: þ?ý%
 ÿþ?ûn9K ùý%m
 ýÿþ2ä

 ýþWý ý¹ú3 ý%	 þ):¹
 ÿmÿM þ^
 û+ ÿM ú#-1NW] ùú3ûF;
 ýí
 ú#]
 ú3û)ü$
 ûûú#	 þ
+Wú þKú _þ	ÿþ*V
 ü/ý%+ þ	ÿM
 ûH#6 û¹ ÿ
 ü/ûn9	 ÿ
  ùþ]ûýN

 þgý% ý%ûþ!!b
1 øfùþ)ûþ þ ú#7R
 þF¹
 ÿ
/¹
 ÿþ
û¹
 ÿ
 ü/û)ÿþ	üÿþ?ûþ* úP ùþ^
 ý/
 û+ ú#F
 ú3ûg þ!:H+ ùþWþ
U ü_þ	ÿ!DR ùþ2þ	 ú3ûú#]þ	ü_þûF$ ù]
ÿM þNüÿþú
 ú#®
 üÿ¹ ü_þ	ÿ úþ?û]683 ú#¹b þS ùþ"5
P_
 þ	ÿPA ÿM
 þíü$
 ûú# ú#¹
 þ?ûdýQùþ]+ þ	ÿ5ý% þ5
P_
 þ	ÿP
#ý3 ûþâü$
 ûú# ú#¹ þ?ûn9M
, ý¹û^m
 þ±
 ý¹ûÁû þ ú#¹ þâüÿ¹
 ü_þ	ÿ úþ?û)3 ú#¹
b þP ùþþ	ÿ5û+ ýý%/
 ú3 ú#',
 þ
U ü_þ þþ?ûû
ýyý
 ú#
 ý%/
 ú3 ú#'3]
 ú þ û¹ ÿ
 ü&þ?û ÿ5úü ú#
 û6X
Y ú#_
 þ	ÿ5û5 ùý%+[
ø?
[ ùú3 ú-,k@BB 9M,k%
 ùú5 ù
þ	ü_þ/S
 ùþ^ þ?ý%
 ÿþ?ûg
 ûþíú/ ùþTú# ú#
 ûKV
 ú þNÿM þ?û!1NWS ùþ%ýüü	3 ú	 ý% ú#Sþ?û ÿ5ú#_
 þ
ú`
 ùú3ûWü/ýü_þ	ÿ,$ ùþ/ä

 ý¹úy
 û þ ú#¹ þDý! þ	ü ý%/
 ú3 ú#'= ÿ5ú# þ	ÿ5ú3ý]m
 þ	ÿþSþ	ÿ5û+ ýý%/
 ú3 ú#'
, ûúN

 ü	3 ú	 ú#'
ýæý
 ú#
 ý%/
 ú3 ú#'1

DC

SR

d



SR

P

²býÿ ú# ú# ú4 ùþdAeTf ÿ5ú3û+b`¹ ÿ ü üÿ	 þ
 ú*+3 ùÿþ	þ]ý% ý«û+ ý%¹ þ?û_ da;ý¹ûP
Nü	þ!þ#
/ý¹ûþ&<ùþNþUü_þ	ÿ!0 û7þ	ÿ5û+ýú]Hùþ/'{ü/ú	ýKú3ý%û+úRüÿRþ?ûû!1 ÿ
 ùþS
äý5ùúþ
 þ?ýÿM
 ú ü$
 ú*;T
 úþ!  ùú3ûNý _þ û] ùþæûþ þ ú#Ö
 û/
 ûþ! û;Á
 ý%+ ÿ5ú#	 þ?û;ùý%íýÿþ3ûþ ú
ú _þ	ÿþ*Ö
 þ
U ü_þ	ÿ5úN

 þ* û!1 `¹ ÿþ!¹ þ	ÿ8
, ý%Pý% ýæû+ ý%¹
 þ"_  ùþäü/ýÿ ú# ú#
 ú"A ùþNþ
U ýN

 ü	 þäûþ!â
 ùý¹û
_þ	þ`
 ûþæý¹û^m
 þG1A_AT ùú3û)ý% ýíû+ ý%¹
 þ ùþ	ÿþRýÿþP#v
 ýS þ! ý%+ ÿ5ú#	 þ?û) ùý%T«ùý¹
 þ_
 þ	þ
 ûþS:¹ ÿ]ÿM þ%ú ú#-

1 øfùþfþ
U ü_þ	ÿ!0 ûgþ	ÿ5û+ ýú2- ùþTä

 ý¹úä
 û¹
 þ?û+ þ"ùý%g ùþcdAeTf
ü$¹
 ü	3 ý% ú#_
 þdü/ýÿ ú# ú#
 þæú*+]'Hv
 û
 ü$¹
 ü	3 ý% ú#
 ûH/
 ý¹ûþ3` ùþRûþU48
 ü/ý% úþ* û!,ä

 ý%
b úí
 ú#
ûú#
 úZ	 ý*#«
 þ?ý¹ûþ	ÿ+«
 ú þäú* þ	ÿþ?û+ úæ
 û¹
 ÿ
 ü/û!í
1 øfùú3ûÁü/ýÿ ú# ú#
 úv
 ÿþ?û# þ®ú®
 ü/ý%+ þ	ÿM
 û
_d
@ ý3_2J51

DC

a

	

>C

_T# þ	ÿM
 ý% ú#¹ þ#,/ü/ýÿú#ú#úS	ý3_þdü_þ	ÿ:¹ÿM
Nþæý3û+Fú4ùþâü/ùý¹ûþ78ü_þ	ÿ:¹ÿM
äúNû+ý%ú3û+ú	ý
5ùýÿ5ýþ	ÿ5ú#[?ý%ú# Pú3û¹þ	ÿþ û¹ÿü/û!,A5i8ÿùþ	ÿíûü	3ú#+ú<ùþ&þ!þþ û¹ÿü/ûäú
ûþ!¹
 þ	ÿ5ý
 ü/ýÿ û/6 þ1 1#,¡ú _þ	ÿþ*ú3ý%ú]_þ!'mþ	þ<
äýþRý=þ
äýþâü/ý%úþ*ûTùý%ÖýÿþÿMþRü$ûú#ú#¹þ
	ý¹ûþ?ûP:¹ ÿP ùþíû¹ ÿ
 ü$%
9 ýQùþQN

 ü/ýÿ5ú«
 ý%+ ÿ5ú#	 þ/ ý
 þ]ú3û+ ÿ5ú#	 ú#
 û^:¹
 ÿP ùþ?ûþäü/ýÿ û!1
_T*æ
 ûú#
 úZ	 ý*^ú _þ	ÿþ þRú3 ùú3û^ú3û+ ÿ5ú#	 ú#ä

 ý3_
 þâü$ þ* ú3ý#v
 ú* þ	ÿþ?û+ úF
 ý¹û%ü/ýÿ^F ùþ
û¹
 ÿ
 üPþ?û ÿ5úü ú#-1kW
_ ûý^/
 ý¹ûú3û¡:¹ ÿbû¹
 ÿ
 üdü/ýÿ ú# ú#
 ú(
 þHä

 ýP
 ûþ]þ?ú# ùþ	ÿû+N

 þAþ! þ þ
û
 üü$¹ ÿ úD
 ÿ5ú3û+b"# ý+¹ ÿT¹ ÿWý*4 ùþ	ÿWý%+ ÿ5ú#	 þ7¹
 ÿWý%+ ÿ5ú#	 þP
P/
 ú
 ý% ú#3%
 ùú5 ùæú3ûü$ þ* ú3ý#
ú*
 þ	ÿþ?û+ ú//
 ý¹ûþ44 ùþdþ
U ú3û+ úD
 þ
U ü_þ	ÿ(bR^ þ¹þ1

DC

DC

OC$¹ÿ7þ!þ®ý3û+"+pý+
äý%úùþDüÿRþ?ûûT)ü/ýÿú#ú#úäþU5V
û¹ü_þcùú3ûAH¹ÿbQ6 YR
f 
%,?Ác ý
P_þ	ÿ¹þ	ÿ,?da>Öÿ5û+ý 	f ú %,-J%LL@9M1
	 ÿ
 ùþ7
Nþ!ùR#ú	ýü$ú*Akúþ!îú#ú3û;ú*þ	ÿþ?û+ú;+Súþcùý%(ùþÁþUü_þ	ÿýüüÿþV

øfùþ	ÿþDùý¹ûT_þ	þyû+
NþRþ

ý
Nü	þäûþ!ûc5®ý4
Nþ!ùR<(ûü_þ	ÿú3ûþ`þ?ýÿMú,-	dú#ûÖüÿþ?ûþ*ý%ú#Bú3û27AùþS
äý¹ú


	ú3ý%þ<ùþíúþyû¹ÿü/û2¹þ	ÿ5ú`
äý*&ýÿ¹þ!P!3ý¹ûû7	ý¹ûþ?û"6:%ú#ù<ÿMþNü$ûú#ú#¹þDÿ5ý%þS
ý%c þ?ý¹û+7J%L S%
9 ý=%ú# ù`# ý3 ûþRü$
 ûú# ú#¹
 þâÿ5ý% þNý¹ûc# ý¹ûWü$
 ûûú#	 þ,	%
 ú# ù` ùþNú* þ* ú#`+¹
b þ	þ	üBú#
_þ# @!L "1 Af
 úp
 ûþ þ úN
 ýNÿM þ
, ú# ûüÿþú ú#\5
 ý3 ú#'F
 ùý¹û((_
 þ	þ4 ùþ7
/
 û+f
 úN

 ü$¹
 ÿ ý*
#ý+¹ ÿ8
1 øfùþA
 þ þ?ûûýÿPú# ú#P:¹ ÿ8ûþ þ úÁ
 ýWÿM þg;
 ý¹û ùý% ùþmþ
U ü_þ	ÿ;
 ý¹û8ý%	 þg+Á
 ÿþ
 ú#	[ þ

 þ ú#
 ûWý
/" þ?ý%
 ÿþ?ûT	
 úú ùþRÿM þ7 ùý%Á
 ýÿþ;N

 þú	 ý#F
 ÿþ?ý¹û+
 ý%	 þ1^NW3 ùú3ûWûþ
 ûþ,
ûù¹
 ÿR
 ÿM þ?ûRýÿþpûú#
 úZ	 ý*#Q
/¹ ÿþpú*
 ú# ú#¹
 þ]
D ú#;	 ý_
 þ ú þÿ
 øý%	 þ&@" ùý%N
 ý]
 ÿM þ?û
ûþ þ
 þ=53 ùþâþ
U ü_þ	ÿÁ
 ùý¹ þDý%c
/
 û+T ùÿþ	þP þ?ý%
 ÿþ?û2þ
 úS ùþRüÿ5ú	 úü/ý_
 ÿ5ú3û+b# ý+¹
 ÿ5û!Á
1 øfùþ
#ýg ùý%F ùþfþ
U ü_þ	ÿgú/]
 ûþ þ]
 û¹
 ÿ
 ü/û%
 ú# ùNýS¹
 ü úä

 ý
 #&%&®'$%îÿ5ý% ú#â
 ú3û)ú
 û+ ÿ5ý% þ5
bú#
 ÿþ?ûA@C @ Á
 úS{
Y þ ú# 1 J5,%
 ùú5 ùRûùi ùþmü$
 ûú# ú#
 ûk ùþ;ü/ý%+ þ	ÿM
 û_@ d2
@ úP ùþ #&%&®'$%
ûü/ý
 þíý<ùþh#&%&®'$% *¹ þU ù53 ûÁú þ&:¹
 ÿý% ýæû+ ý%¹
 þ?û_ dT,k
 þ úæ
 ü$
 ú* û2%
 ú# ù

	





AP

&

P

ho ¤

P

~´}~µ 

~/]{}/}

ùþ^¹üú
äý¹þ	ÿ5ý%¹þÖüÿ¹ü_þ	ÿúþ?û!1NOg	ý]_þ^úþSùý%Hþ)-ùþ%þUü_þ	ÿ]ûþþþíü/ý%+þ	ÿMû
ú3û(#
 ú;4 ùþ#&%&®'$% *¹ þæ
U ù5$	A ùþâûþ þ þæü/ý%+ þ	ÿM
 ûfýÿþP!#
 ûþ7+S ùþ7*¹
 þ«
U ù5G1
)ñ

Ã

ó È

#)Å÷!ÅvôdÆ    Çô3ô±Å>/õ ®ö«ö)È !÷2Æ* ÈVÅö)ÇIBÅ>/õ

 È_ÇÉ 


	

÷ ó

`

/ö)Ç÷!Å¡Æ÷!É

NOvú3û]mþ^bR^ ÿ
 ùþ °57d ýý#ûú3û!,(ùý%pú ¹ÿMþ	ÿ+ ý5ùúþ!¹þ&ùþ=_þ?û+Fÿþ?û#û!,(ùþ
ú3û¹
 þ	ÿþäÿM þ?û)ûù;_þ%ý¹ûg!#ûþWý¹û)ü$ûûú#	þA+Pùþ^+¹üV'þ!:g¹ÿMþ	ÿg-ùþ °57d ûü/ýþ1)øfùú3û

 þ?ý
N
 ûK ùý%)
 ú ùþq#&% ?®'$% T ÿ5ýþ! n
, #&% Áûù_þý¹ûF3 ýÿ¹
 þfý¹ûbü$
 ûûú#	 þ¹
, ýh'$% Áý¹û)û
äý
ý¹ûfü$
 ûûú#	 þ1g
Y úä

 ú3 ýÿM#{
, ú4 ùþ
#&%&®'$%lûü/ý þH
, #&% ûù"_þdý¹û^3 ýÿ¹
 þâý¹ûfü$
 ûûú#	 þ
, ýk'$%lý¹û
ûä

 ýV
 ý¹ûü$
 ûûú#	 þ1
NW ùú3ûH¹ ÿb ùþ3\5
 ý3 ú#'N

 þ?ý¹û
 ÿþ) a#&%&®Ru6 '$%
(9 ûú=¹ þ þ	ÿ5ý3 ú#?[ ý% ú# ü/ýÿ5ýN

 þ! þ	ÿ
(yùý¹û7_ þ	þQþ þ-1íøfùú3ûÖûþ ú#B
 þ
U ü	3 ý¹ú
 û2%
 ù*& ùú3û7\5
 ý3 ú#'&N

 þ?ý¹û
 ÿþäùý¹û7_
 þ	þB
 ûþ þ þ-,bú
N

 ü/ýÿ5ú3û+%
 ú# ù ùþ	ÿF
/¹ ÿþfú*
 ú# ú#¹
 þA\5
 ý3 ú#'PN

 þ?ý¹û
 ÿþ(3 ú#¹
b þ;ýc
 û+WVX/
 ý¹ûþS
Nþ?ý¹û
 ÿþ1 ú*#
 ú
. 
 û+!/
0 ü/ýÿ5ýN

 þ! þ	ÿ j1



MC



/`





5

	



3#"  + 2 M:A'*+ ,+- 4 %
w

qo

s



z

q/s±¬

S8 M:A'74>: ² '


	

z ±o

52ÿþUü_þ	ÿ5úþþ]ú7úDC_þ	ÿþ*¡
Nþú	ýýüü	3ú	ý%ú#ûVúú	ý%þ?û-ùý%ú*ú#ú#û-3ú#b¹þù þUü_þûú#¹þ
ú3ûÖþ!¹þ	ÿ'$%
üÿþúú#®ú<þ	ÿM
äû7ýú#ú#ý #&%
üÿþúú#û7
äýþS5®ýæÿMþpýÿþ"ûþ!8
:¹ÿ2þ	ÿ5û+ýú;ùþâüÿ	þ
 FúÿþúSùþRûþ?ýÿM5ùyú4ùþ#&%&®'$% ûü/ýþ12YRüü$ûþcùý%



	

ùþ^þú#ú#;-û+mü/ýÿ5ý
Nþ!þ	ÿ fú3ûK/ý¹ûþSSùþ):#%údýÿ
Nþ*! ¹ÿmþ!¹þ	ÿäýú#ú#ý
'$%/,H ùþæÿM þpûù¹ þ	ÿ
/¹ ÿþ3ùý pýú#ú#ý#&% þUý
Nü	þ?ûäú¹ÿMþ	ÿS+Q_þ4_þ!+þ	ÿ1 
;ý¹ûþ<®
 û5 ùyÿþ?ý¹û+
 ú
, ú#Á
 ú3ûÁü$
 ûûú#	þ7+3þþNý\5ý3ú#'=
Nþ?ý¹ûÿþh ,¡ûú"ùþ;:#%ú
#&%&®'$%  ÿ5ýþ! 

MC

 ý3ú#'
Nþ?ý¹ûÿþ$

	



 	  #&% 
  '$%

	

'

j1gNO

ú3ûþ?ý¹û++]ûþ7_þ	ýûþcùþâú*ú#ú#¹þÖú*þ	ÿüÿþ!ý%ú#4bü/ýÿ5ý
Nþ!þ	ÿ

ùý¹û;ý3û+Ný;úþWüÿ¹ü_þ	ÿ'S%ùþûþ":¹ÿû¹ÿüú3û¹þ	ÿK5"5ùýú;ùþ

^  2
j1

þ mþc	ý

ý


/¹þRúùþ
#&%&®'$%lûü/ýþâýæûþþ)ùþc¹üú
äýVü$ú*A/ý¹ûþ4pü/ýÿ5ý
Nþ!þ	ÿ
NWi_T#¹ ÿ5ú# ù
 YRf,K ùþ`\5
 ý3 ú#'N

 þ?ý¹û
 ÿþk%,A
 ûú®
 ý<ú _þ	ÿþ*O
 #&%&®'$%  ÿ5ýþ! uú3û/ûþ& #&%&®Ru6 '$% (9M,%
 ùþ	ÿþ
(vú3ûA ùþ7¹
 þ
 þ	ÿ5ý3 ú#?[ ý% ú#p
 ü/ýÿ5ýN

 þ! þ	ÿ1
NOd
 ý û¹ ÿ
 ü ú3û¹ þ	ÿ ý#¹ ÿ5ú# ù
 þN

 ü	#
 ûíþ
U ùý
 û+ ú#¹
 þ ûþ?ýÿM5 ùa6:¹
 ÿvú#d
 ýf
 ü$
 ú*ûíú ùþ
#&%&®'$% ûü/ý þvýÿþ"bR^ ú ýý þj9c ùþ ùþ"'H&N

 þ?ý¹û
 ÿþ?ûOFý ýÿþFþ\5
 ú# ý þ*âú
 ùþpûþ

 ûþ" ùý%D
 þ!¹ þ	ÿ¹ ü úä

 ým
 û+ ú##
 ú` ùþ4*¹
 þU ù5g	 ý_
 þþ! þ þi5
 ûú
ý*
 ùþ7'Hí
 ùþ
 ÿ5ú3û+ ú	 û!DR#] ùþ7 ý
 þ?û( ùý%^

 û+(_
 þdûþ þ þ4:¹
 ÿ%ü/ýÿ5ýN

 þ! þ	ÿ5ûq(vý Öýÿþ
ú _þ	ÿþ*!1KNW4
 ùú3û(	 ý¹ûþ
,  ä

 ú#
 ù*(_
 þÖþ!¹
 þ3_
 þ!+ þ	ÿ^_
 þ	 ý
 ûþdú# ûfú* þ	ÿüÿþ! ý% ú#æ
 ú3û(
/¹
 ÿþâú*
 ú# ú#¹ þ1
e^m
 þ!¹ þ	ÿÖ
, ûú þ&_T#¹ ÿ5ú# ù
 YRf ú3ûvý ùþ
 ÿ5ú3û+ ú4_
 þ?ý
 ûþ?ýÿM5 ùuý#¹
 ÿ5ú# ù
4,) ùþ®ûú#
 ý% ú# ú3û
ú _þ	ÿþ*!1 YR¹
 ÿ
 ü ú3û¹ þ	ÿ ú3ûäý ú# þ	ÿ5ý% ú#¹
 þæüÿR þ?ûû!m
, ü_þ	ÿ:¹
 ÿMä

 ú&
 þ3¹
 ÿ"
/¹
 ÿþ«ú# þ	ÿ5ý% ú#
 û
6:'{
 ü/ú	 ý#`J 9^* ú-5R«ÿM þ?û%ýÿþ;
 û+ ÿM þ=54:¹
 ÿMä

 ú]  ú#
 û)F þ?ý%
 ÿþ?ûÁú3 ùþ
ÿM þ`$R1NW 
 ùú3ûíüÿR þ?ûû!f
, ý ÿM þ`\5
 ý3 ú#' N

 þ?ý¹û
 ÿþyú3û"
 ûþ :¹
 ÿvÿM þ«ûþ þ ú#a6::¹
 ÿ%
 ùú5 ù
 ùþc'H]N


 þ?ý¹û
 ÿþ?û1dý) ýÿþdþ\5
 ú# ý þ*n]
9 ý¹û(m
 þ_
 ý¹û(:¹
 ÿ) ùþdûþ þ ú# þ?ý%
 ÿþ?ûfýùþ?úÿ
  ú#
 û¡ ùý%b
 ùý¹ þ;ùú#
 ùdü$ þ* ú3ý:¹
 ÿ ùþH
 û+ ÿM ú#P
 ùú#
 ùP\5
 ý3 ú#'Á
 ÿM þ?û±úâ
 û/
 ûþ\5
 þ*

ú#
 þ	ÿ5ý% ú#
 û!D:¹ ÿ) ùú3û(
 ûþ
, ÿM þc\5
 ý3 ú#'"N

 þ?ý¹û
 ÿþdú3ûA_
 þ!+ þ	ÿ^ ùýk
  1 þ!^
 û;þ
U ü	3 ý¹ú%
 ù*1
YR
 üü$
 ûþ7 ùý%Tm
 þDùý¹ þNýíü$
 ú*;#6 ýíÿM þj9 lú` ùþ#&%&®'$% ûü/ý þ,$%
 ùþ	ÿþ#&% ý '$%Lýÿþ
ú#
 û2 ÿM
 þäý&#ý3 ûþNü$
 ûú# ú#¹ þ?û!V
, ÿþ?ûü_þ ú#¹
 þ#1 ¹
 ÿâýpûþ þ þ9(` ý
 þ§
, /	 ý<_
 þSþ! þ	ÿMä

 ú
 þ=:¹ ÿ

DC

5

MC

	

DC
DC

	

APS

>R

>R

	

	

	

W

ho ª



 } 
	

 	

 	 

|/|

/}





3·0µ {´}

W

ùú3ûÿMþ ;1ANO^	ý`_þâûù^3ùý%Wýü$ú*û(ùý%Wùý¹þùþRûý
Nþ\5ý3ú#'âý¹û%ÿMþ
ýS3 ú
 þ2þþ45"ùþc:#%ú;8ú#-

W

3úþc

#&%(  &
# %*69B 5 ( 9 '
9B
 B) &#$' %
5
% 5 ( $
' % 5 (
' % 5 (
$

B

NW3ùú3û(8ú#-,
ÿþ	üÿþ?ûþ*û^ùþ5
P_þ	ÿ)KÿMþdü$ûú#ú#¹þ?û))ýäÿMþc%ú#ù3\5ý3ú#')7%ùú5ù
¹ þ	ÿ5ûdþ
U ý#
 Qþ!ý%ú#¹þäþUý
Nü	þ?û!1 H ûþþúpý4ú _þ	ÿþ* <ýþ,-ùþ/¹ÿÿþ?ûü$ú
3 ý
 þ2	 ý_
 þcþ! þ	ÿMä

 ú
 þ]5] ùú3ûH8ú#-18øfùþc3úþ,Rþ!þ	ÿM
äúþ]5]ùú3ûH8ú#-,ÿûûþ?û
ùþ
ýj
U ú3ûý%f
 ü$
 ú* #&% ,  #&% C( ®Ru6 '$%
(;
9 ý4ùþ «ýj
U ú3ûý%f
 ü$
 ú*
 1(	]
1 øfùú3û;ú3ûûù^p
 ú
bú#
 ÿþ2@@%8
1 øfùþ;û#¹ ü_þH	 ùú3û3 ú
 þmú3ûþ\5
 ý5+2 ùþ(\5
 ý3 ú#'c/
 ÿM þ ;,%
 ùú5 ùâþ\5
 ý3 û§#&%&®Ru6 '$%
(9M1

B

	

9B

DC

B

9B

9B

5

W

5

tp

points with same
quality
qg=TP/(FP+g)

R

TP
TP0

-g

	bú#ÿþS@@%

fp

FP

²)ÿ¹ü_þ	ÿúþ?û7;ÿMþ?ûc%ú#ù<ùþFûý
Nþ
\5ý3ú#' '

	bú#ÿþS@J5/`^þ?û4%ú#ùîùú#ùþ?û+3\5ý3ú#'
!þ ú*+&ùþ"_þ?ý

#&%&®Ru6 '$% (9M1

5

úRV
:¹ÿk

WN  ùþ)#&%&®'$% ûü/ýþ,ü$ú*û/%ú#ù ùú#ùþ	ÿ]\5ý3ú#'ùý «ýÿþ ý%$¹þ`ùú3ûS3úþ,;úiùþ
úÿþú# cùþ=üü_þ	ÿSþ!:"¹ÿMþ	ÿ1 ^úþ=ùý%vúiùþk#&%&®'$%
ûü/ýþ=ùþ`+¹üV'þ!:Fú3ûSùþ
üÿþ! þ	ÿÿþ ü/ýÿ4ùþBûü/ýþ ü$ú*ûpú ùý%pü/ýÿpÿþ	üÿþ?ûþ*pÿMþ?û"%ú#ù ùþ&_þ?û+#&%&®'$%
ÿ5ýþ! F
1 øfùú3ûWÿþ?ý¹û+
 úæ
 úú	 ý% þ?ûc ùý%dü$ú*û2ùý%7%ú_þäú!þyú&ùþS_þ?ý
 
û+dý
3 úþDý%$¹
 þS ùþS3 ú
 þ]
 þ\5
 ým
 þ?ú#
 ù* û$ 	
 %
 ùú5 ùyú3ûcþ
 þ=5= ùþ/3 ý¹û+Ö
 ÿM þDú= ùþ/_þ?ý
41PNO
ÿþ	üÿþ?ûþ* þS¹ÿ5ýü/ùú	
 ý#,%/
 ÿ5û+
"5
P_
 þ	ÿK_
 ÿM þ?û!,:äú; ùþ1#&%&®'$% ûü/ý þ)%
 ùþ
ÿ
 ý% ú2 ùþ(3 ú
 þg ÿ
 ü$
 ú*(68L % %
9 úP ùþ(!#Rb5%
 ú3ûþAúÿþ ú#-,%%
 ú_
 þ;ú!þâúP ùþA_
 þ?ý
41
øfùþ7
 þ* þ	ÿ^b
 ÿ ý% ú#«
 ú3û;ü$
 ú*76 1( L*9M;
1 øfùú3ûú3ûú
 û+ ÿ5ý% þvú bú#
 ÿþS@J51
52P ùþA ùþ	ÿ8ùý-,%:¹ ÿ ùþq \5 ý3 ú#'7N

 þ?ý¹û
 ÿþAþ
 þP5
   #&%  3'$%  ùþ;ûú#
 ý% ú#R
 ú3û
ûúä

 ú3 ýÿK	F]
 úþ* ú	 ýG6
1 ²
 ú* ûF%
 ú# ù/ ùþ%ûýN

 þT\5
 ý3 ú#';3 úþ(í
 ýP3 ú
 þ )
6 '$%9 #&%/,
	;
 ú# ûû#¹ ü_þÁú3ûA
 û+ ý*f
 ýFþ\5
 ý$+ j
1 ²
 ú* ûA%
 ú# ùvùú#
 ùþ	ÿA\5
 ý3 ú#'"3 úþWý%$¹
 þ7 ùþc3 ú
 þWú" ùþ
úÿþ
 ú#`F ùþ; þ!:2
 üü_þ	ÿT¹ ÿM
 þ	ÿÁ
1 øfùþRü$
 ú* û^ ùý%T%
 ú¡_
 þRú!þ«ú*+] ùþ;_
 þ?ý
 ýÿþ; ùþ
/ÿ5û+
pü$
 ú* ûmúS ùþ&#&%&®'$% ûü/ý þT:]5í
 ý
R
/¹
 þN

 þ*(k ùþ23 ú
 þ)%
 ú# ù
û#¹
 ü_þ j
, û+ ýÿ ú" ÿ
 ü$
 ú*/68L % %W
9 ú` ùþ/úÿþ ú#`+;
 ýÿMû2 ùþ/#m
 þ	ÿÖÿ5ú#
 ù*2¹
 ÿM
 þ	ÿâ
1 øfùú3û
ú3ûú
 û+ ÿ5ý% þpú bú#
 ÿþ/@h51
 þ!
 ûP ý¹ûûN

 þS ùý%Pm
 þFýÿþ"#5
b ú4:¹
 ÿRýQ¹
 ü úä

 ý)
 ÿM þ/%
 ùú5 ùBú3ûc¹
 þ	ÿB
 ûü_þ	 úZ%1"NW
 ùú3ûF	 ý¹ûþ

, ü/ýÿ5ýN

 þ! þ	ÿ A%
 ú
 ùý¹ þÁýdùú#
 ù/ ý
 þ)%
 ùú þü/ýÿ5ýN

 þ! þ	ÿ(%
 ú
 ùý¹
 þÁý7¹
 þ	ÿN
 ûä

 ý ý
 þ1
øfùþNú*
 þ* ú#y
 ú3û2+`ùþäûýN

 þ;¹ ü úä

 ýb
 ÿM þRú= ùþ#&%&®'$% ûü/ý þ1;_Ac ùþ;/
 ÿ5û+Á
 û+ ý%¹
 þS
ÿM þ^
 û+ ÿM ú#]#ä
 ûú þ) þ?ý%
 ÿþ?û;ýÿþ2
 ûúþ	ÿþFý"
/
 û+m
 üÿ/
 ý%	# ùþ?úÿA\5
 ý3 ú#'ä
 ý¹ûH ùþ



MC




1G  = ,IHCJ
7 D@
7

	

G  = ,IHCJ



9	

	



eHK[ML [M\A\ VO\

7 D@

9	



ho «

 B



 9B

5

~´}~µ 

~/]{}/}

	bú#ÿþS@h5/`^þ?û

	bú#ÿþS@O

 ú#ùQùú#ùþ?û+ \5ý3ú#'kúRV
%
!þvú"ùþc_þ?ý
 :¹ÿ°  #&% 
 '$%/1

	



1	

²g3ýþ
Nþ*



ú*þ	ÿþ?û+ú

ÿþ?û]ú;ùþq#&%&®'$%
ùþc/
 ÿ5û+f
 ú# þ	ÿ5ý% ú#-1

 þ?ýjV
ûü/ýþ%ý%:þ	ÿ

O

ýû+ú#äú3û)ÿ5ý%ùþ	ÿ]ü$5¹ÿ1gY{þ	þ bú#ÿþP@ P:¹ÿmý7'{ü/ú	ý/ü	3ýþ
Nþ*g_ü$þ*ú3ý#Nú*þ	ÿþ?û+ú
 þ?ý%
 ÿþ?û%ú ùþ
#&%&®'$%lûü/ý þ1
øfùþfüÿ5úä

 ýÿ8 ú#/- ùþ?ûþ^þ?ý%ÿþ?ûmú3ûK+_þ)5RS	úúT	#Rbû]û+Pùý%g5/ nV
 ú#¹ þ#D

 ýú2 ùþ	ÿF þ?ý%
 ÿþ?û!{
, ùú#
 ù;\5
 ý3 ú#'R
 ÿM þ?û	 ýS_
 þ(
 û+ ÿM þ-1 HD
 ýúc ú#û!,
û+
 ú#
 û^¹ þ
 þ	ÿ5ý#=
/¹ þäú= ùþ/úÿþ ú#`H ùþ/ þ!:2#m
 þ	ÿP¹
 ÿM
 þ	ÿâ
1 øfùþDÿþ?ý¹û+®
 ú3ûT ùý%cRV
 ú#
 ûT	 ý ÿþ þ ùþ/5
P_
 þ	ÿT
 '$% üÿþú ú#
 û!12e^m
 þ!¹
 þ	ÿ,¡ ùþ!æ
 ÿþ þ ùþ/5
P_
 þ	ÿT
#&%/0 ûfý¹û)m
 þG1AdH
 ûþ\5
 þ*#,5  ú#¹
 þ#v
 ýú; þ?ý%
 ÿþ?û)+í
 ÿM þ?ûA ùý%%
 ýÿþP!#
 ûþ7+] ùþ
 þ!:c#m
 þ	ÿ7¹ ÿM
 þ	ÿ,- ùþNý#¹ ÿ5ú# ù
 %
 úk2_
 þNý%	 þ+`ùþ?úÿÖûü_þ	 ú3ý3 ú#?[ ý% ú#
 ûT
 þ?ýÿþ	ÿc+4 ùþ
 þ!:H
 üü_þ	ÿH¹ ÿM
 þ	ÿ1 52#; ùþWÿM þ?ûF ùý%;
 ùý¹
 þÖùú#
 ùh#&%  ý
 þ{
, ývýÿþÁúS ùþ2
 üü_þ	ÿ)ü/ýÿH¡ ùþ
#&%&®'$%lûü/ý þ/, ùý¹ þâýS5 ùý þP+S ý%¹b þâü/ýÿf
 ú ùþ7
 û+ ÿM ú#48
 ú* þ	ÿþ?û+ úS
 þ!î
 ÿM þ?û!1
bú#
 ÿþP@ dú
 û+ ÿ5ý% þ?û ùþ^ä

 ý¹úSú _þ	ÿþ þ)_
 þ!'m
 þ	þ"\5
 ý3 ú#';N

 þ?ý¹û
 ÿþ?û%ý ùþ):¹
 ÿMN

 þ	ÿ
 þûF+â

 ûþ þH
/¹ ÿþ)¹ þ
 þ	ÿ5ý þ?ý%
 ÿþ?ûg ÿ
a ùþ%ÿ5ú#
 ù*F
 üü_þ	ÿ8ü/ýÿF- ùþ1#&%&®'$% ûü/ý þ;6 ü$
 ú* û
ú
 ùþû+%V'	 ý þ. (Rûü/ý þ0 9M,*%
 ùú þg ùþ(3 ý% þ	ÿ(. üÿþ! þ	ÿ5û!¹
0 ûü_þ	 úZg þ?ý%
 ÿþ?û ÿ
  ùþ( þ!:K#m
 þ	ÿg¹
 ÿM
 þ	ÿ
6 ü$
 ú* ûbú ùþfû+%V'	 ý þ". ;ûü/ý þ0 9M1KNW;	 ý¹ûþ?ûK%
 ùþ mú3û¹
 þ	ÿ;3 ýÿ¹
 þýO(Rú3û¹
 þ	ÿD
 ûä

 ýG,% ùþ;þ _þ
 ý<_
	
 þäû+æ
 úN

 ü$¹ ÿ ý*2 ùý%â
 ú#cä

 ýy
 üÿþ!¹
 þ*7 ùþäý#¹
 ÿ5ú# ù
  ÿ
 ú" ùþ/¹
 ü úä

 ý8
 û+ ú#
þ!¹
 þS%
 ú# ùNý73 ýÿ¹ þ(_
 þ?ý
a%
 úù-1 ^ ú þ
, ùm
 þ!¹
 þ	ÿ,5 ùý%g_T#¹
 ÿ5ú# ù
 YRf ú3û8ùþ
 ÿ5ú3û+ úm
 úN
 ú# ûF
 ý%
 ÿþ
ý&p
 û+ ý% þN

 þ* ûâýÿþ; ÿM
 þ;:¹ ÿdý	 ý¹ûþ?û!D
1 øfùú3ûTN

 þ?ý
 û2 ùý%Ö
 úy
 û+N

 þ,¡	T¹
 þ	ÿ«
 ÿ5ýÿþ/	 ý¹ûþ?û!
, ý
\5
 ý3 ú#'N

 þ?ý¹û
 ÿþc/
 ý¹ûþ4p
 ü/ýÿ5ýN

 þ! þ	ÿ cä

 ýv
 ÿþ?û#
 úp
 ý/_
 þ!+ þ	ÿ(
 ýV
 û+ ú#-1

>R

>R

R

>R

	

*

DC





	





3  .1032 M: ?4 
. U8 K4>:A+ +- 4 %
)z{o #w

	

zs ¡q

W¯q

±q

s

OC

z



S8 M:A'74>: ² '
z ±o

	

¹ ÿ; ùþíü	
 ÿü$
 ûþ/)N

 ü/ýÿ5ú3 ùþFý  N

 þ?ý¹û
 ÿþ?û!8
, ý)#&%&®'$% *¹
 þU ù5K:¹
 ÿRþ?ý5ù
ùþP'H4
Nþ?ý¹ûÿþ?û%ùý¹û^_þ	þ`û+ÿMþ-1%øfùþâüÿRþÿþc;ý¹ûWÿþ	ü_þ?ý%þ`:¹ÿÁû+ý%¹þ?û2_ dT1øfùþ
#&%&®'$%*¹ þU ù53 û;:¹ ÿ] ùþ 3N

 þ?ý¹û
 ÿþ`m
 þ	ÿþ`
 û+ ÿM þ û+Q ùý%]:¹
 ÿ"ú _þ	ÿþ*h
 (ýþ?û

 ý* û¹ ÿ
ä
 ü/û/m
 þ	ÿþ&
 û+ ÿM þ-1 _T
/ ùþ
  ù
 ûþ&#
 úQ  ùþ&*¹
 þU ù5f
 ú  ùþ
#&%&®'$% ûü/ý þSm
 þ	ÿþFûþ þ þ-Pùú3ûÖÿþ?û# þ®úQ*¹
 þU ù53 ûÁüÿþ?ûþ* þQ5= ùþS ùúb<3 ú
 þ?ûÖú
bú#
 ÿþ?ûT@C @ 5m
1 øfùþT ùú]3 ú
 þ?û]ÿþ	üÿþ?ûþ*H ùþ #&%&®'$% *¹
 þp
U ù53 ûK ý¹ú
 þvúS ùþÖûýN

 þT;
 ý
:¹ ÿ%û¹ ÿ
 ü/ûú þ"5" ùþ N

 þ?ý¹û
 ÿþ,:¹
 ÿ 2 ý
 þ?û(_
 þ!'m
 þ	þ`LR1d
@ ý %LR1
bú#
 ÿþ?û7@CVM@ /:¹ ÿWû+ ý%¹ þ?û^_ d þ
/
 û+ ÿ5ý% þ7 ùý%)$ ù3!
 ÿ¹
 þ?ûfý%¹
 ÿþ	þRú ùþP3 ýÿ¹
 þ?û+
 ü/ýÿ)
 ùþ#&%&®'$%Lûü/ý þ,-	^ ùý%2:¹ ÿÖûä


 ý§
 '$%  ý
 þ?ûT ùþ;N

 þ?ý¹û
 ÿþDú3ûWý%	 þP+" û¹
 ÿ
 ü/û

	

	

AP

	
P

DC



h5j*i



P

 } 
	

 	

 	 

|/|

/}





3·0µ {´}

	bú#ÿþS@*5%øfùþ;\5ý3ú#'7 	

þ
Nü	#ú]ùþ

ü/ýÿ5ý
Nþ!þ	ÿ"þû]+



ûþþíü/ý%WV

þ	ÿMû 6ü$ú*ûn9&%ú#ù û
äýh#&%
ý
 þ?û!,%ùúþA\5ý3ú#'þ
Nü	#*V
ú2
 ùþ (âü/ýÿ5ýN

 þ! þ	ÿK%
 ú{
 ú!þ
ý3 û+iä

 ý* ü/ý%+ þ	ÿM
 û%
 ú# ù 3 ýÿ¹ þ
#&%  ý þ?û;6: ÿ
  ùþRÿ5ú# ù*%
 ü/ýÿ
- ùþ1#&%&®'$% ûü/ý þj9 ùý%m
 ùý¹ þ
ý 5
 ùý þ+ _
 þQ
 ûþîú 	
 úRV
úP 
 ú#
 ûKV
 ùú#
 ùS\5
 ý3 ú#'
ÿM þ?û!1

>R

¹ þ	ÿ5ú<
/¹ ÿþFü$
 ûú# ú#¹ þíþ
U ýN

 ü	 þ?û!1<_T!¹
 ÿMú=+& ùþvý
 ý#
 ûú3ûRú ùþFüÿþ!
 ú#
 ûRûþ ú#-,K ùú3û
;ý¹û(ùþdþUü_þþpÿþ?û#!1KNW¹ÿMþ	ÿ)+]
äý%b¹þ7ùþ7ú _þ	ÿþþ7
/¹ÿþc5ú#ûA#"ùþ7þ!:ü/ýÿ(
ùþ#&%&®'$% ûü/ý þâú3ûûù^æ
 ú ùþ?ûþc	
 ÿþ?û!1

DC

	bú#ÿþS@C5%øfùþ

þ!:

#&%&®'$%

ü/ýÿ=ùþ

 ùþ #&%&®'$%

*¹þU ù53ûQ«û¹ÿü/û úRV
þ ûú \5ý3 ú#' N

 þ?ý¹ûÿþ?û
¬#&%&®R6u'$% (9;6: ùúb=3 ú þj9
ý 
 #&%  M'$% 6: ùú
3úþj9 ý%ý% ý û+ ý%¹
 þ _P1  ý%_
 þ3 û
_@ d2@7þ þÖü$
 ûú# ú#
 ûHb
 ûV
¹ÿ
 ü/ûâûþ þ þ5< ùþ"N

 þú	 ý
þ
U ü_þ	ÿf
 ý¹ûfú* þ	ÿþ?û+ úN
 ÿ5ú3û+bS¹
 ÿ
 ü
þ?û
 ÿ5úü ú#
 û!1
ûü/ýþ

P

	bú#ÿþS@I*%øfùþ]þ!:Öü/ýÿ7Aùþ#&%&®'$%

RV
¹þU ù53û ÿþ	üÿþ?ûþ*úuû¹ÿü/û
úþpý%^ý%ýäû+ý%¹þ T1

h5jo

	bú#ÿþS@ 5%øfùþ

	

üÿþ?ûþ*ú

5



 þ!: ü/ýÿ=ùþ#&%&®'$%
*¹þU ù53ûpÿþ	üÿþ?ûþ*ú ûV
¹ÿ
 ü/û8úþRý%Fý%ýÖû+ý%¹þ2dT1

~´}~µ 

~/]{}/}

DC

#&%&®'$%

	

 *¹þUäù53û¡:¹ÿý 
Nþ?ý¹ûÿþ?ûK
äýRûþ	þ
 û
äý
ý úûú#úZ	ý*!,	RúBÿþ?ý3ú#' ú#Rú3ûD
 û+1yøfùþ
äý +¹ÿ5ú#'Q%ú*þ	ÿþ?û+ú û¹ÿü/û"6:ùú3û
!3ý¹ú
 ú3ûÁûüü$¹ÿþyý3û+45«ü/ý%+þ	ÿMû7_@ d2N
@ ûþ þ þ<5= ùþSä

 ý¹ú þ
U ü_þ	ÿn9Wýÿþäû¹ÿü/û
%ú#ùíýRû
äý#ý3ûþ%ü$ûú#ú#¹þfÿ5ý%þT%ùú5 ù]3 úþ%úS ùþWÿ5ý¹
 þÁúS%
 ùú5 ùJ^H¹
 ÿ
b ûg_
 þ!+ þ	ÿ1KNWí
 ýú# ú#-,
:¹ÿNû¹ÿü/û7%ú#ù'$%  L` ùþ" ÿM
 þFü$
 ûú# ú#¹
 þíÿ5ý% þpú
 ÿRþ
U ýN

 ü	 þ?û;
 ý¹ûDý%$'H& úN

 þ?û
3ýÿ¹þ	ÿH:¹ÿmû¹ÿü/û)ú þ/%ú# ùJ^ ùýS%
 ú# ùJ 1 
 ÿ ùþ	ÿM
/¹
 ÿþ,5 þT ùý%H:¹
 ÿmû+ ý%¹
 þ?ûAî
_ ý
ùþ	ÿþfýÿþ)'HPF		¹ þ%û¹ ÿ ü/û)68_2Ö
J ý"d2@9%
 ùú5 ù/3 úþú/ ùþ(
 ýü]_
 þ!'m
 þ	þS ùþ1#&%&®'$%
*¹þU ù53 û!1/NOA ùþJ N

 þ?ý¹û
 ÿþíú
 û+ þ?ýQ1
 SN

 þ?ý¹û
 ÿþSm
 þ	ÿþ"
 ûþBú< ùþäþ
U ü_þ	ÿ5úN

 þ* ûc%
 ú# ù
dAeTfaä

 ý¹ú-
, ý%^ þ?ý¹û+%
 û¹ ÿ
 ü3_2J;3f
 ùý¹
 þP_
 þ	þ3þ! þ þ-1
øfùþ(ú _þ	ÿþþ?û_þ!'mþ	þ;ùþ

5R

P

	 
	

	

bñ

 ÈÆ/õ ôÇ

øfùú3û±ûþú#Rüÿúþ?û
Nü/ýÿ5ú3û+ûý3úbû¡+Wÿþ3ý%þH¹ÿbâúRû¹ÿüú3û¹þ	ÿ,
Nþ?ý¹ûÿþ?û

8ú*þ	ÿþ?û+úþ?ûû!,þ!ýý%ú#3
Nþ?ý¹ûÿþ?ûfý4ú3ûý3ú#[?ý%ú#-1

!#" <38±xr/o>+?82 @n :A' ² +{¯z{o5B
øfùþAþ	þ:¹ÿKûþ	ÿbú*þ	ÿ5ýú#ú#'RúRû¹ÿüú3û¹þ	ÿRú3ûýÿþ?ûûþP57E®ÿ_þY1þ!8ýG16W@BBC9M,





>R



þ?û
 ÿ5ú#/
 úÖ
 ýdû+
 û+ þ
 þ!¹þ#¹ü_þäú/ùþ^> YH5
ÿ¹ü_þ?ýNÿþ?ûþ?ýÿM5ùíüÿ þ268>7^þ¹þ URÿ5ýnV
ú#i:¹ÿ"Y5ý%ú3û+ú	ý&5 "þ?ûn9Rý úùþ«û+û+þ
äû

²  5 ^_ 68>7'? û+¹þ-,2@BBC9Ný `NWf$57Y
6:®
E ÿ_
 þG,$@BBI*,	J%LL@9M1 
²  5 ^_ ÿþ?ý%ûAùþ2þ?ýÿMúcý¹û+bíý¹û;ýRûúþfÿþ3ý%ú#íüÿ	þ
4,{úG1 þ1#,
ý
 ùþ]ý% ýæýÿþíý¹ûûN

 þ<+3_
 þäý ý¹ú3 ý%	 þäú&
 þS ý%	 þ`6 ÿþ3 ý% ú#9M,k%
 ùþ	ÿþ?ý¹û `NW$
f 57Y þUR þû
ùú3û^ ý¹û+b`+4
# úZV ÿþ3 ý% ú#`ý% ý%/
 ý¹ûþ?û!,-%
 ùú5 ù ú3û%ÿþ3 ý% þ=+p
 ý"5
P_
 þ	ÿTg ùþ	ÿc þ?ýÿM
 úS ý¹û+
b û
68W
f þ %ýþ W
f þ?ùý¹ûü_þ,$@BBI*D
ý
 ú3 ý îøk
 ú#
 þ-,-@BBC5D®
E ÿ_
 þ f 	[ þ	ÿ
 û+
b úG,-@BB 9M,
/
 û+#
 ý{
ú"
 ùþT/
 þ"kNW ú#¹ þ  
 ú
 ²)ÿ¹
 ÿ5ý
Sä

 ú468f 	[ þ	ÿ
 û+
b ú
 ÿ5ý %,$J%LL@%D  ý{
 ÿ5ý 
f 	[ þ	ÿ
 û+
b úG,
@BB 59M1
øfùþ2
/
 û+
 úN

 ü$¹ ÿ ý*g þ?ý%
 ÿþ?ûH 
²  5 ^î
_ ý `NW$
f 57Y
, ÿþ3 ý% þ"+; ùú3û]ü/ýü_þ	ÿ,R þ	ÿM
ùþc
 ûþ2
 ùþ
 ÿ5ú3û+ ú	 ûg:¹ ÿfû¹ ÿ
 ü4ú3û¹
 þ	ÿD ùþcN

 þ?ý¹û
 ÿþ?ûA
 ú* þ	ÿþ?û+ ú
 þ?ûû;ýùþÖûþ?ýÿM5 ù
ùþ
 ÿ5ú3û+ ú	 ûäýÿþ`3 ú
 þ ú ûþ	ü/ýÿ5ý% þ®ûþ ú#
 û]_
 þ#71 _ ÿþ3 ý% þ ýüüÿ
 ý5 ù +
 ÿvýüüÿ
 ý5 ù
+æ
 ÿM þäû/
 ûþ!d
 ûþ þ ú#-±
, üÿþ?ûþ* þ ú{
Y þ ú#J51 h5b
, ú3û Wþ!/
 ùýÿM!0 û]6W@BBR@9cH¹
 ÿb& û¹
 ÿ
 ü
û
 üüÿþ?ûûú#-1
^ þP ùý%%
 û+N

 þâýüüÿ
 ý5 ùþ?û)+F
 ý¹ûû+R	 ú3ý% ú#p
 ÿM þÖú ú#	 ý«
 ý3 û+S_
 þ7
 ûþ:¹
 ÿWû¹
 ÿ
 ü
 ý{
ú3û¹
 þ	ÿ1 ¹ ÿæú
 û+ ý þ,) ùþ&&
_ ² )WN 5 )N'VWå
d ý#¹
 ÿ5ú# ù
 6  ý
 û+
b ú
 ÿ5ý %,7J%LL@9M,T%
 ùú5 ù
ýüü	3 úþ?ûý¹ûû+R	
 ú3ý% ú#N
 ÿM þ;ú ú#P+7!3 ý¹ûûúZ	 ý% ú#R
 ÿM þ;ú ú#-,j ü	 ûK!3 ý¹ûûúZ	 ý% ú#R
 ÿM þ?û
%ú# ù
 ýÿ5ý* þ	þíû
 üü$¹ ÿ
 ý/Rþ þ(%
 ú# ùRÿþ?ûü_þ+â
 ýT ýÿ¹
 þ!g!3 ý¹ûû!1NO
 ýÁÿM þ;ûý% ú3ûW/
 þ?û8ý3 û+
ý2
 ûþ	ÿ+V'þ
 þâûú#
 úZ	 ý þg ùÿþ?ûù-,ýD
 ú þP_&² )WN 5 )N'VWB
d ÿM þmú3ûýD
 úþ	ü_þþ*K. 5 ù5b0
HbR^ þ¹þäý%$2 ùþ/ ýÿ¹ þ!P!3 ý¹ûû!,¡%
 ùú5 ù&	 ý<_
 þ;
 úþ!m
 þBý¹ûÖýæû¹
 ÿ
 ü<þ?û ÿ5úü ú#`%
 ú# ù

 ýÿ5ý* þ	þBûú#
 úZ	 ý þ_
, û
 üü$¹ ÿW
 ý&Rþ þ1;
Y úä

 ú3 ýÿM#, ùþ/R/
 ÿMä

 ý% ú#«
 ÿM þ; þ	ü!,
ú*
 ÿR þ;5 Áý
P_
 þ	ÿ¹ þ	ÿ;ý  ý{
 ÿ5ý ;6GJ%LLL*]
9 ýSûþíý¹û]ýc/
 ý¹ûú3ûK:¹
 ÿg ùþ%û¹
 ÿ
 ü]ú3û¹
 þ	ÿ
ý#¹
 ÿ5ú# ù
 úS ùú3û)ü/ýü_þ	ÿ,R ú3 ú#	[ þ?ûK ùþ2ä

 ú
 úä

 ý
 û
 üü$¹
 ÿ)
 ÿþ\5
 úÿþN

 þ*]
 ý¹û;ýN

 þ?ý¹û
 ÿþT%
 ùú5 ù]

 û+
_þdûý% ú3ûW/
 þ5F
 þ!¹ þ	ÿp
 ÿM þÖú¹ ÿMþ	ÿ)+S_
 þdú!þFú ùþâú þR/
 ÿMä

 ý% ú#p
 ÿM þÖûþ!!1
H ùæý%$¹ þ7N

 þ* ú#
 þvýüüÿ
 ý5 ùþ?û(+N
 û¹
 ÿ
 ü4ú3û¹
 þ	ÿí
 þ
U ü	#
 ú#H ùþÖú:¹
 ÿMä

 ý% ú#F
 ý%$
!3 ý¹ûûcN

 þ
P_
 þ	ÿ5ûùúü¡O
1 52
 þH ùþ/ä

 ý¹ú ÿþ?ý¹û+
 û2%
 ù*` ùþ?ûþäýüüÿ
 ý5 ùþ?ûdýÿþ;;
 ú* þ	ÿþ?û+2:¹
 ÿdûV
¹ÿ
 ü`ú3û¹ þ	ÿæ
 ú3ûA ùý%!,3 ú#¹b þ2 ùþP!3 ý¹ûûú	 ý¡!3 ý¹ûûúZ	 ý% ú#p
 ÿM þdú ú#v
 ý#¹
 ÿ5ú# ùä

 ûfû5 ù«ý¹û
 ý{
d 2J6XdA3 ýÿb
Wú#	 þ!+!,-@BB;
9 ý_  6 ú5 ùý3 û+
b úG, `	[ þ! ú %,e^,
 ÿ5ý %,@BC9M, ùþ!"
A
 ûþT ùþ2¹ þ	ÿ5úN
 ý#¹ ÿ5ú# ù
41NW"¹
 þ	ÿ5úN
 ý#¹
 ÿ5ú# ùä

 ûg#/ ùþ^/
 ÿ5û+g þ!u
 ú þäÿM þ?ûgä

 ý

/^

b`
>

d



b`



a

Qd



a

Qa

d

f

b`

b`

a

f

!d

f

&f d

&c



	



` b`

ed

` b`

f

c



d 

f

Ua

Sa

h5j5j

f

d

f



f

 } 
	

 	

|/|

 	 

/}





3·0µ {´}

S^

_þc)ú*þ	ÿþ?û+%ý¹û%û¹ÿü3þ?ûÿ5úü+¹ÿ5û(%ú#ùæû "	úþ*)¹þ	ÿ5ý%¹þ12YR/ûþ\5þ*#FúþvÿMþ?û
ýÿþ«ú
 þÿ
 /
 ú3ý¹ûþ þ
U ýN

 ü	 þ«û/
 ûþ! û!m
, þ1 1#,fû/ûþ!ûíú!ú`# ü$ûú#ú#¹þpþUý
Nü	þ?û
T¹ þ	ÿþ=5v
 üÿþ!
 ú#
 û#v
 ú þvÿM þ?û!;
1 øfùú3û(/
 ú3ý¹û^
 û+ ÿ5ý¹ú
 û( ùþâü$¹
 ü	3ý%ú#:¹ÿÁû¹ÿü
ú3û¹
 þ	ÿä
 úN
 ý7;
 ý/ ùý%m
 ú3ûF
 ý%
 ÿ5ýR:¹
 ÿg ùþWû¹
 ÿ
 üSú3û¹
 þ	ÿN
 üÿR þ?ûûF%
 ùú5 ùNú3û!{
, ú/¹
 þ
 þ	ÿ5ýG,
ý¹úN

 þæý%^ú3û¹ þ	ÿ5úä
 ú* þ	ÿþ?û+ úD
 üÿ¹
 ü_þ	ÿ úþ?ûA8
 û¹
 ÿ
 ü/ûH ùþÖþ* úÿþdü$¹
 ü	3 ý% ú#-1
fþ
 þ*Ö
 ýüüÿ
 ý5 ùþ?û2+v
 û¹ ÿ
 ü&ú3û¹
 þ	ÿ«
 ý¹ú
 ý%2¹
 þ	ÿMä

 ú ùþRüÿ	 þ
 F ùú3ûWú
 ýüV
üÿ¹
 üÿ5ú3ý% þS/
 ú3ý¹û7( ùþFû+ ýýÿM¹ þ	ÿ5ú ý#¹
 ÿ5ú# ù
4p
1 øfùþíÿþ þ*#Qþ!¹
 þ#¹
 ü_þ û¹
 ÿ
 üú3ûWV
¹ þ	ÿF
 ý#¹ ÿ5ú# ùä

 ûAd 2JVWYRf 6  ý{
 ÿ5ý %, 3 ý5 ù-,Rd
> ý ûþ!b,
økR¹ÿ
 û+
b úG,J%LLJ]
9 ý 2YRf 6  ý{
 ÿ5ý %,
þ þ![  ,
3 ý5 ù-,J%LLJ9c
 ûþ; ùþäû+%V'	 ý þ<mþ?ú#
 ù* þQ¹
 þ	ÿ5ú«
 ý#¹
 ÿ5ú# ù
4±
, ûúä

 ú3 ýÿT+3 ùþ/
 þ
úN

 ü	 þN

 þ* þpú4_T#¹ ÿ5ú# ù
 f <Y4þ?û ÿ5ú#_
 þvú ùú3û;ü/ýü_þ	ÿ1
NW
 û+ ý þ<m
 þ?ú#
 ù* ûpü	3 ý ýî
 úN

 ü$¹
 ÿ ý*v
 ÿ þ®ú $5
 û+ ú 6 ÿþ
Y ùýü/úÿþ,@BBCp

9 ý
ý#
 þ	ÿM
 ý% ú þ	 ú3ûú#  ÿþ	þ?û6XYR5 ùýü/úÿþ
Y ú¹

 þ	ÿ,;@BBB9M1 NW
 û+ ý þ<m
 þ?ú#
 ù* û«ùý¹
 þQ_
 þ	þ 
 ûþ
ý3 û+í
 ú4 ýÿ5ú3ý* û( ùþ¹ þ	ÿ5úí
 ý#¹ ÿ5ú# ùå

 úN

 ü	 þN

 þ* þæúp
 ÿM þc þ?ýÿM
 úä
 ýüüÿ
 ý5 ùþ?û%û5 ù«ý¹û
Y  dN ²²
6XdH
 ùþ-,R@BBB9M,  6  þ	þ, A5 ùý
 ý-, i%
_ ÿ
 ú3û!,5@BBV
9 ý7f)_^N  68W
e û-,Y5Rþ	ÿM3 ý-,
+?[ ú#
 úG,K@BB9M1;_  ýÿ5ú3ý*2g ùþ;m
 þ?ú#
 ù* þQ¹
 þ	ÿ5úp
 ý#¹
 ÿ5ú# ù
 ùý¹û2_
 þ	þ&
 ûþyý3 û+p
 ú= ùþ
 ý{
* þUR2FR/
 ÿMä

 ý% ú#æ
 ÿM þdû/
 ûþ!W
 ûþ þ ú#6 Áý
P_
 þ	ÿ¹
 þ	ÿ
 ÿ5ý %,kJ%LLL*9M,¡
 ûþ«ý¹ûWýS/
 ý¹ûú3û
:¹ ÿ) ùþdÿM þÖû/
 ûþ!f
 ûþ þ ú#æ
 ý#¹ ÿ5ú# ù
 2YY"þ?û ÿ5ú#_
 þpú ùú3û;ü/ýü_þ	ÿ1

`

f

;d 	



ba

f (d

`

U	

d

`

d 

f 	

I`

`

>d
c

f

d

`

ed

f

!  z{q('58±oz ' +- ?s?4¡z{oz '74>:#s±rs±z '*'


­

ýÿ5ú#û%ÿMþdþ!ýý%ú#=
Nþ?ý¹ûÿþ?ûWý«ùþÿ5ú3û+ú	û%ùý¹þ_þ	þ

ý¹ú
Nþ

ý%"/ý3ý	úQùþ

ûú#[	þ=dý¹ÿüa6ÿþ!þ	ÿÿþ

+

ú#û/ú3û+ÿ5ú#	ú#ýg5ûýþ?ûû6ÿþ!þ	ÿÿþ+Bý¹û/#ý+¹ÿ

û+úþ4:¹ÿÁû¹ÿü=ú3û¹þ	ÿ,

(i5

ý¹û]#ý+¹ÿ

B-9M1

>7'? û+¹þ-,7@BBC9S%ú#ù

øfùþvüÿ¹ü_þ	ÿúþ?ûT8ú#ûùý%

B
W 
     @E@


P/úþcùþ?ûþ7'H]#ý+¹ÿ5û%ùý¹þ7_þ	þpþURþûú#¹þ#vû+úþQ6:ùþâû+%V'	ýþ V(V!ûü/ýþ*9M1
Y úä


 ú3 ýÿM#,! ùþKm
 þ?ú#
 ù* þdÿþ3 ý% ú#¹ þ]ý!!
 ÿ5ýd
 ùþ
 ÿ5ú3û+ ú%,þ
 þÖý¹û
6

R96
6
R9 56 6
	
R9  6
%9+;
9 ý`ûþ35p
 økR¹ÿ
 û+
b úG, 3 ý5 ù-
, ý  ý{
 ÿ5ý 46GJ%LLL*9M,
 ÿ5ýþ?û( <¹ þ

 þ	ÿ5ý3 ú#' ùþdÿM þS6 6
R9M/
, úG1 þ1#
, ÿM þc¹
 þ	ÿ5ý%¹
 þj%
9 ýpÿþ3 ý% ú#¹
 þdý!!
 ÿ5ý
6
	
R9  6
%9M8
1 øfùú3û]ùþ
 ÿ5ú3û+ ú%
 ú3ûmýâÿþ!:¹
 ÿM
3 ý% ú#]k
 þTk ùþ2N

 þ?ý¹û
 ÿþ?ûA
 ûþFú

²  5 ^_P1
mþ?ûúþ?ûNû5 ù .  þ ú#¹ þ0gN

 þ?ý¹û
 ÿþ?û;Á
 ú* þ	ÿþ?û+ ú
 þ?ûû!]
, û+N

 þ&. û þ ú#¹
 þ0gN

 þ?ý¹û
 ÿþÁ
 úRV
 þ	ÿþ?û+ ú

 þ?ûû;2ú3û¹ þ	ÿþ ü/ý%+ þ	ÿM
 ûS	 ýi_
 þ" ý%¹
b þ ú*+& ùþæý!*!;
, û5 ù ý¹ûäý ú#
 ý%/
 ú3 ú#'
6'. ý®ü/ý%+ þ	ÿM ú3ûäú* þ	ÿþ?û+ ú®
 ú#T ùþ`
 ûþ	ÿS	 ý  û+N

 þ! ùú<%
 ú# ù ú#/+ ùú3û;¹
 ÿíùþ	ÿíýý* ý%¹
 þ0 9
ý
 þ
U ü_þ þþ?ûû"6 ý ü/ý%+ þ	ÿM ú3ûâú* þ	ÿþ?û+ ú`+= ùþ
 ûþ	ÿRú#
 ú#R
 ú3ûRû
 ÿüÿ5ú3ûú"+= ùþ
 ûþ	ÿ *9
6X
Y ú#_
 þ	ÿ5û5 ùý%+[
ø?
[ ùú3 ú-,@BB 9M1

B

B



DE> H B   @E@ ED > H B
MC
  @E@ DE> H B   E@ @

b`

B

  @E@

?	

DE> H

SR

f

DE> H

SR

ed

! <38±xr/o>+?82 W. ¯qU8±qK4>:A+s  z{q('58±oz '
 ýý%ú#4)úþpû¹ÿü/ûfú4ùþQ`°57duûü/ýþ6u²)ÿû+ d	ýAþ!+!,kJ%LL@9%ûù%û^!3ý¹ûWV
ûúZ/þ	ÿ%ü_þ	ÿ:¹ÿM
äýþâú4þ	ÿM
äû^K#ý3ûþRý3ýÿM

¹ÿZ7[M\ E*V/HKJ>EGXUNUXAYV L [N V&'$% h
 !   6ü	#+þ`

ùþ°¯3V!ýjUú3ûn9ùý%gþ	þûF+7_þ^
äúú
äú#[	þ-,¹ýäûþûú#ú#ú#'¹ÿ1NULGFV HKJ>EGXUNUXAYVbL [N V6#&% $

6ü	#+þùþ ± V!ýjUú3ûn9cùý%/þ	þûP+&_þ"
äýjUú
äú#[	þ-1yøfùþ°
` 57dlûü/ýþvú3ûRýüüÿ¹üÿ5ú3ý%"þ]! :¹ÿ

Nþ?ý¹ûÿ5ú]ùþDû!þ?ûûT]û¹ÿü=ú3û¹þ	ÿ,VûúþDû¹ÿü/û)%ùûþ$#&% ?®'$% Sÿ5ýþ!MC ú3û
!#ûþP+"ùþú3ý%ýk	ý=_þPú3û	ýÿMþæý¹ûWúûú#úZ	ý*!1(_T«ýüüÿ¹üÿ5ú3ý%þâýüüÿý5ù`+Fþ!ýRV
ý%úRýâûþ!gúþNû¹ÿü/û)ú3ûF5/ûúcùþWýÿþ?ýþ	ÿFùþ1°
` 57di*¹þUFù5þþ/5
û¹ÿü/ûF%ú#ùSùþT_þ?û+#&% ?®'$% 7ÿ5ýþ!MC ý¹û;ý\5ý3ú#'S
Nþ?ý¹ûÿþT:¹ÿ(
Nü/ýÿ5úPùþÁû!þ?ûû
KúD_
C þ	ÿþ*(þ?ýÿMþ	ÿ5û!1
h5j 

~´}~µ 

~/]{}/}

`

_ #þ	ÿMý%ú#¹þ?û+=ùþvýÿþ?ý&þ	ÿPùþ °57d *¹þU ù5g
Nü	ý%ú# ýÿþ"ùþ	ÿNû+ýýÿM
T
þ!ýý%ú#i
Nþ?ý¹ûÿþ?û;ûþ ú ÿMþþ?ýÿMú,)û5ù ý¹ûDüÿþúú#¹þvý!!ÿ5ý¹ÿ,múùþ3	ý¹ûþ4
ú
Nþ ¡þ "	 úþQ
 û+ ÿ5ý¹ú* ûP ùý%
 þ	þQ+=_
 þS ý%¹
b þ ú*+`ùþFý!*!,Kùþ]ÿ5ýþ!

Nþ?ý¹ûÿþ?û
f _ 68Ö
> þ þ	ÿ, ²bý% þ	ÿ5û+-,
mþ	ÿÿþ	ÿ,(J%LLL*ä
9 ý _T 
 û+ þ %ý% ú# %ý% ú#
 û=68_
2936 mÿ5ý%[úG,
Y5
 ýÿþ?û!,
²þ	ÿþ?úÿ5ýR,	J%LL@9( ùý%^
P/ ú þdý!! ÿ5ýp
 ý4úN

 þc+í
 ý¹ûûþ?ûûfÿþ3 ý% ú#¹
 þdü_þ	ÿ:¹
 ÿMä

 ý þ1
5Wü úä

 ú#	[ þdý!!
 ÿ5ýR
 ú3û!, ùm
 þ!¹ þ	ÿ, ùþH# úä

 ý% þg
 ý5
 û¹
 ÿ
 üPú3û¹
 þ	ÿ1NWR
 ýú# ú#
+/ ùþdýÿþ?ýSþ	ÿA ùþ °57d *¹ þæ
U ù5$\5
 ý3 ú#'"N

 þ?ý¹û
 ÿþ, ùþ	ÿfúN

 ü$¹
 ÿ ý*
 û! þ?ûû)N

 þ?ý¹û
 ÿþ?û
ýÿþÿM þûú#
 úZ	 ý þ768N

 þ?ý¹û
 ÿ5ú2 ùþ)ú3û+ ÿ5ú#	 ú#
 ý*5
 û
 ý
 þ?ûûk_
 ýÖû¹
 ÿ
 ü$9M¹
, ÿM þ(¹
 þ	ÿ5ý%¹
 þ
68N

 þ?ý¹û
 ÿ5úä
 ù 3 ýÿ¹ þâú3û%ýSú3û¹ þ	ÿþ«û¹
 ÿ
 ü$9M
, ÿM þÖûú#	[ þâý«ûú#	[ þ78
 ýNÿM þdûþ!;68N

 þ?ý¹û
 ÿ5ú
ùþDûúN

 ü	3 ú	 ú#'p
 ý=þ	ÿ5û+ ýý%/
 ú3 ú#'"gú3û¹
 þ	ÿþ=bR^ þ¹þj9Md
1 øfùþ?ûþN

 þ?ý¹û
 ÿþ?ûTm
 þ	ÿþ/
 ûþ
+ä
 þ! ý
 ý% þ7 ùþdÿþ?û# ûA ùþ;d 2JVWYRf û¹
 ÿ
 ü3ú3û¹
 þ	ÿv
 ý#¹
 ÿ5ú# ù
6  ý{
 ÿ5ý d
 þ!W
 ýG1#,	J%LLJ9M1



>_ O^
?d

Wd

>R

`

MC
1`/`

b`

e`



f

! <38±xr/o>+?82@:A'58±qU:qK4>:A+s

f ý% ý7
Á
 ú3û
 ý3 ú#?[ ý% ú#/N

 þ! ùRû)ùý¹ þ^_
 þ	þN
 ü/ýÿF_
 û+ ý% ú3û+ ú	 û]ýSý% ýâý
 ý#
 ûú3ûbÿþ?ûþ?ýÿM5 ùS:¹
 ÿHä

 ý*
¹þ?ýÿ5û!1]øfùú3û;ÿþ?ûþ?ýÿM5ù`þ*ÿ5ý%þ«üÿ5ú
äýÿ5ú#/pü	#+ú/þc¹ÿT
/¹ÿþdúþ	ü_þþ*Hýÿ5ú3ý%	þ?û
ý%
 ý¹ú
 û+ä
 ýQþ	ü_þþ*; ýÿ5ú3ý%	 þpú û
 üü$¹
 ÿ;W
 þ
U ü	#¹
 ÿ5ý%+¹
 ÿý% ýBý
 ý#
 ûú3û4#6 ø¹
b þ!,c@BII*D  þ	þ,
52,   þ!b,¡@BB 5D T*%
 ú-,J%LLL*9M1
øfùþP
 ú3û
 ý3 ú#?[ ý% ú#3]
 ý
 ý#
 ûú3ûfÿþ?û# ûWùý¹û!_
, ùm
 þ!¹
 þ	ÿ,-
 ý¹ú
 þ=#p
 ÿþ þ*#«
 û+N

 þDý%+ þ* ú#
%ú# ù ùþFüÿ3 ú# þ	ÿ5ý% ú#Q^ý% ý&ä

 ú
 ú6X;
d ýÿM-,
ý
b ú3 ý,
Y ù

 þ?úþ	ÿMä

 ý-,H@BBB5D ý5
 ý-,
Wÿ5ú
 û+ þ?ú-,
E úþ	ÿ5ûþ,J%LLJ5DÖ
> þ?ú
 Ö
> ÿ5úþ!¹
 þG,$@BBC5D
Y ú
/ , ^
 úÿ5ù
SN

 þV ÿ5ý¹ú#
 ÿþ,
H{ þ?ù þ-,
J%LL@9Mm
1 øfùþT
 ú3û
 ý3 ú#?[ ý% ú#S±
 ý
 ý#
 ûú3û]ÿþ?û# û]üÿ5úä

 ýÿ5ú#D
 ûþ	ÿ¹
 þ?ûA:
 ÿ;ü	
 ÿü$
 ûþ?û!k_þ!+ þ	ÿfú
 û+ ÿ5ý% þ
ùþü/ý%+ þ	ÿM/+7 ùþþSûþ	ÿ¹, þ
 ý%	 þ( ùþ)N

 ü/ýÿ5ú3û+;
 ü/ý%+ þ	ÿM
 û!{
, ú ÿþ?ý¹ûþ;ü/ý%+ þ	ÿMä
 ý! þ	ü ý þ,
ý þ
 ý%	 þ«ü/ý%+ þ	ÿM þú# ú ý û
 üü$¹
 ÿ/:¹
 ÿ W%
 ùý%W!V ú#7\5
 þ?û+ ú#
 û R1 øfùþæÿþ þ*p
 ú* þ	ÿþ?û+F
 ú
ùþ]
 ú3û
 ý3 ú#?[ ý% ú#&f
 ý
 ý#
 ûú3ûÖÿþ?û# û7;
 ý¹ûRûü/ý^
 þQ5& ùþ]: þ¹
 þ	ÿ%
 ùþä

 ú`5
P_
 þ	ÿRý
N

 ü	 þ
U ú#'"Ký% ýSä

 ú
 úR
 ÿþ?û# û!1
fþ?ýþ	ÿ5ûÁú* þ	ÿþ?û+ þyú`N

 ü/ýÿ5ú" ùþ
 ú3û
 ý3 ú#?[ ý% ú#3N

 þ! ùR üÿ¹
 ü$
 ûþ«ú` ùú3ûfü/ýü_þ	ÿT%
 ú# ù
 ùþ	ÿ]û¹ ÿ
 ü/û
 ú3û
 ý3 ú#?[ ý% ú#;N

 þ! ùRûK	 ý;;ùþ(
 ú3û
 ý3 ú#?[ ý% ú#_
 û¹
 ÿ
 ü/ûK_@ d2f
@ ú; ùþ
+
 ú*(H¹ ÿb5 Áý
P_
 þ	ÿ¹ þ	ÿ,  ý{
 ÿ5ý %_
, ýE®þ!+ û5 ùþ	ÿþb6GJ%LLJ9M1

d



c

d


a

d


d
MC 

	

`

R

@c

bñ

Sd

	

P

f

K

ô ó É !ö]Å÷ô ó Å

øfùú3ûÁü/ýü_þ	ÿdüÿþ?ûþ*ûâý3¹þmû¹ÿüQú3û¹þ	ÿBý#¹ÿ5ú#ù


ú*þ!¹ÿ5ý%þ

ú*+3ùþäþQ+«þ

bR^þ¹þ(ú3û¹þ	ÿRüÿRþ?ûû!1bøfùþ(ú3û!ûûú#RýDþ
Nü/úÿ5ú	ýÿþ?û#ûü$ú*ùþfú
Nü$¹ÿýþ

 þ _þ ú#¹ þ%þ
U ü_þ	ÿWVX
 úþNû¹ ÿ
 üSú3û¹
 þ	ÿD
 ú; ùþq#&%&®'$% ûü/ý þ1NO ûFä

 ý¹úä
 ýý* ý%¹
 þ?ûmýÿþ
ùþÖü$
 ûûú#/
 ú3 ú#';+ä
 ú þTbR^ þ¹þÖý%^ú _þ	ÿþ*( þ!¹
 þ3 ûAk¹
 þ
 þ	ÿ5ý3 ú#?[ ý% ú#Q#6 ý5 ùúþ!¹
 þ35]
 ú
ùþk( ü/ýÿ5ýN

 þ! þ	ÿ"c ùþ û¹ ÿ
 ü ú3û¹
 þ	ÿ ý#¹
 ÿ5ú# ù
"9;
 ûþ ú  ùþ«ÿM þ`\5
 ý3 ú#'iN

 þ?ý¹û
 ÿþ
ùý%N
 þ
 û
 ÿþ?û; ùþæú ú#Á
 ùú#
 ù\5
 ý3 ú#' ÿM þ?ûDý3 û+B
 ú ùþæùþ
 ÿ5ú3û+ úF
 û¹
 ÿ
 üiú3û¹
 þ	ÿ
üÿR
 þ?ûû!%
1 øfùþâü/ýü_þ	ÿÁýÿ
 þ?û^ ùý%W
 þ
U ü_þ	ÿ!0 ûWú*#¹
 þN

 þ*Á
 ú` ùþRú ú#p
 üÿR þ?ûûWú3ûT
 þ þ?ûûýÿ
:¹ ÿ%û! þ?ûû+8V
 ý ú#
 ý%	 þ7bR^ þ¹þc¹
 þ
 þ	ÿ5ý% ú#-1
øfùþÖüÿ¹
 ü$
 ûþvþ
U ü_þ	ÿWVX
 úþpû¹
 ÿ
 ü3ú3û¹
 þ	ÿv
 üÿR þ?ûû)
 ûú3û+ û( ùþ7:#%
 úN
 û+ þ	ü/û!
üÿ	 þ
 þ	ÿ5û+
 ýú,%ý% ýcþ	ÿ5û+ ýúW
 ýDüÿþ	ü/ýÿ5ý% ú#-
, û¹
 ÿ
 ü/ú3û¹
 þ	ÿ{
, û¹
 ÿ
 ü
û/
 ûþ!%
 ûþ þ ú#-_
, û+ ý% ú3û+ ú	 ý5 ùýÿ5ý þ	ÿ5ú#?[ ý% ú#=)
 û¹
 ÿ
 ü/û!/
, û¹
 ÿ
 ü3
 ú3û
 ý3 ú#?[ ý% ú#-, ùþ?úÿWúRV
þ	ÿüÿþ! ý% ú#ä
 ýNþ! ý
 ý% ú#-b
1 øfùþ)ä

 ý¹úN
 û+ þ	ü/û!,*þ?û ÿ5ú#_
 þDú/þ! ý¹ú
 ú; ùú3ûbü/ýü_þ	ÿ
, ýÿþ%û¹
 ÿ
 ü
ú3û¹
 þ	ÿN
 ý/ùþfûþ þ ú#S_
 ýdû/
 ûþ!K-ú#¹
 þ	ÿ5ûþfû¹
 ÿ
 ü/û!,:#m
 þ/5 ùþ%û+ ý% ú3û+ ú	 ý5 ùýÿ+V
ý
 þ	ÿ5ú#?[ ý% ú#
 û¹ ÿ
 ü/û¡ ùý%b
 ýû±û
 üü$¹
 ÿ ú(# ý+¹
 ÿ5û+T ùþmú þdû¹
 ÿ
 üþ?û ÿ5úü ú#
 û!1

OC

DC

h5j 

 } 
	

 	

|/|

 	 

/}





3·0µ {´}

YRüü$¹ÿú;#ý+¹ÿ5ûWÿþ	üÿþ?ûþ*fÿþý*%ú:¹ÿM
äý%ú#æý%$Wû¹ÿü/û!,	!,ú3ÿ^¹ü/úú#-,
ùþ?úÿA8 ú#v
 ú3ûmþUR ÿþN

 þ#F
 úN

 ü$¹ ÿ ý*;
 úí
 ü/ý%+ þ	ÿM4þ?û ÿ5úü ú#-,5_
 þ	 ý
 ûþ2 ùþ!F
 ùþ ü" ùþÁþ
U ü_þ	ÿ û
+] ý¹úæ
 ýS
/¹ ÿþPN

 ü	 þ! þP5 ùýÿ5ý þ	ÿ5ú#?[ ý% ú# ý3_þ!+ þ	ÿTþ	ÿ5û+ ýú8
 û¹
 ÿ
 ü/û!1 `¹
 ÿþV
¹ þ	ÿ, ùþ!æ
 ú ÿþ?ý¹ûþ7 ùþdþ
U ü_þ	ÿ!0 ûTRþ þ7 ùý%^ ùþâü/ý%+ þ	ÿM«
 ú3ûfýüüÿ¹
 üÿ5ú3ý% þ7:¹
 ÿ^ ùþâüÿ	 þ

ùý%d
 ùþäú3û2 ÿ
 ú+«
 û+#¹ þ1;NW®
 ýú# ú#-
, û¹
 ÿ
 ü&
 ú3û
 ý3 ú#?[ ý% ú#y
 ùþ ü/ûÁú<þ	ÿ5û+ ýú] ùþ
ÿþ3 ý%
 ú#
 ûùúü/û]ý
/D
 ü/ý%+ þ	ÿM
 ûý"ú#¹
 þ?ûA
 ú3û
 ý
 ú
 ûú#
 ù* ûmú*+; ùþ?úÿûþ
 ûú# ú#
 ú#'ä
 ý"#ý3 ûþÁý3 ýÿM

ÿ5ý%
 þ1
øfùþDüÿþ?ûþ* þBýüüÿ
 ý5 ù<+`þ?û ÿ5úü ú#¹
 þDú ú#&
 ûþ?ûÁþ
U ü_þ	ÿcbR^ þ¹þäý%Ö
 þ!¹
 þ	ÿ®
 û+ þ	ü¡1
52 ÿÖú* þ* ú#=;
 ý¹ûc2+4	
 ú«ývû+
 û+ þ
  ùý%c%
 ú
 ÿþ	ü	3 ý þDþ
U ü_þ	ÿ ûT	W
 ÿ5ý% ùþ	ÿc+p
 üÿ
 úþDý

 þ! ùR#& ùý%P%
N
 ú8
 ùþ üBþ
U ü_þ	ÿ ûdú< ùþ]bR^ þ¹þ]ú3û¹
 þ	ÿy
 üÿR þ?ûû!1"NWQ
 ÿP
 úþ!7,k ùþ
ü$
 ûûú#/
 ú3 ú#'/
 úú; ùþdú ú#F
 üÿR þ?ûûfú3ûfýæ
 ýý* ý%¹
 þP ùú3ûýüüÿ
 ý5 ù-1


a

  
 

Ã®É

ó ô

/õ

ó ÆÅ

&a

øfùú3û$H¹ÿbc;ý¹ûûüü$¹ÿþc5cùþFùþ(dmÿý%ú3ý

ú
 ú3û+ÿ^YR	úþþmýâø±þ5ù#,5YR#¹þú3ý
	ý%ú#-,HYR	úþþvý Y{ü$¹ÿ!,8ýùþ
8þBüÿ þ/fÁý%ý
úú ý
fWþ	ú3ûú#YRüü$¹ ÿK:¹ÿ Aûúþ?ûûHdH
Nü_þ!ú#ú#¹þþ?ûû!_
ÿ¹ü_þ?ý ­ úÿý *þ	ÿüÿ5ú3ûþP6:NYøAVM@BBBV
@@ *B 9M1 E®þ ýÿþ&¹ ÿ5ý% þ!82+ T¹ ÿ5ý Ö
> ÿ5û+ ý 	 úB
  ýuøk
äú3û3ý YR
=:¹ÿ4ùþ?úÿ43ý%$¹ÿ5ý%ú#
úQùþFþUü_þ	ÿ5úN

 þ* ûâú¹ ÿ
 ýÿ ùþ?ýÿ;ú3ûþ?ý¹ûþíÿ5ú3û+b&¹
 ÿ
 üþ! þ ú#-,K+^
 ²þ! þ	ÿ 3 ý5 ù:¹
 ÿDùú3û
3ý%$¹ ÿ5ý% ú#í
 úS ùþÁý
 ý#
 ûú3ûKkú _þ	ÿþ*H\5
 ý3 ú#'/N

 þ?ý¹û
 ÿþ?û!
, ý]+;Á
f úþ! ÿ5ú5 ùS®
E þ!+ û5 ùþ	ÿþb:¹ ÿ
üÿ
 úúR
 ü$
 ú* þ	ÿ5û(+S ùþÖÿþ3 ý% þ4H¹
 ÿp
b ú
 ú3û
 ý3 ú#?[ ý% ú#-1

a

úú3û+ÿ&



O 

c

DC

f





f

>R

a



	

    ÇI ó ÉS/Å

Sd ²þ	ÿþ?úÿ5ýR, `716GJ%LL@9M1;`fþ	úÖÿ5ýbúûK-!3ý¹ûûúZ/þ	ÿ5ûK5Nþ3ú
äúý%ú
ÿþý*2!3ý¹ûûúZ/þ	ÿ5û!17NWWL J * L VGE E X + 1LONUX  7X#[M\x+N VO\A\ X * V,+GV
	WL J GV VMX + * EJ Z NKV?V,+N
 JMLONUF * FVGE*V J/+*Z*VOL V,+GV J/+ 1LONUX  7X#[M\x+N VO\A\ X * V,+GV1Y{üÿ5ú¹þ	ÿ1
d;ýÿM-,Y15>/1#,Ka ýbú3ý, 1Rf1#,(a
d Yùþ?úþ	ÿM
äý-, T1¡6W@BBB9M1 V [MX + * E X +X +*Z7JMLC0 [NUX#J/+Y5X EGF([M\ 
X.-*[NUX#/J +1 `a ¹ÿý`>dý8
äý-1
dA3ýÿb,q²1#,/d Wú#	þ!+!,øc176W@BB9M1 øfùþd2J úú# ý#¹ÿ5ú#ù
41T
[  X +!V V [MCL +(X + * ,,

mÿ5ý%[úG,n²1#,Y5ýÿþ?û!,RdT1#,





P

JCR@ RJh51

ûú
Nü	þ,#ý¹û+!,ý«þO_
C þú#¹þRÿMþPþ?ýÿMþ	ÿ1ANWWL J GV VMX + * E J Z &+H+(F([M\
VOLGX [/+ bE E7J 7X#[NUX#J/+ Z7JML 1LONUX  7X#[M\ x+N VO\A\ X * V,+GV1
fWþQ`%ýþ!,  1#,?dafWþ?ùý¹ûü_þ,  1k6W@BBI9M1)dA3ýûý-ú3û¹þ	ÿ1!T
[  X +!"V V [MCL +(X + * ,#%$j,BBAP@O*C51
f [	f þ	ÿû+búG,-Y1#,d  ý{ÿ5ý %f , P16GJ%LL@9M1& VO\ [NUX#/J +?[M(
\ '&[N)[  X +(X + * 1HY{üÿ5ú¹þ	ÿ1
	ý5ý-, P1;a1#, cWÿ5úû+þ?ú-,c 1 c 1#, d E úþ	ÿ5ûþ,_P1H6GJ%LLJ9M1x+*Z7JMCL 0 [NUX#/J +,Y5X EGF([M\ .X -*[NUX#/J +,X +*I[N[
0 X +(X + * [/+ ,++?.J -\ V  * /
V MX E JMYVOL %1 `a ¹ÿý`>dý8
äý-1
	ý5ý-, P1!
a 1#,3d N'ÿ5ýúG,	>/1 T1F6W@BBJ9M1O52`ùþDùý3úSg*ú5ûWVXýþ ý%+ÿ5ú#	þ?ûWú
þ	ú3ûú#ÿþ	þ7¹þþ	ÿ5ý%ú#-1!T
[  X +!"V V [MCL +(X + * ,0, IOP@!LJ51
	ý5ý-, P1 
a 1#,²]ú3ý%þ!û+b5*VWYùýü/úÿ,Sc 1#,Sd YR
P5ù-,?²1$6W@BBC9M1	 ÿ
 ý%ýP
äúú2+PbR^þ¹þ
ú3û¹þ	ÿ_T¹þ	ÿúþ!71NW 1MYM/
[ +GVGEX +32+?.J -\ V  * !V 'eX E JMYVOL &/[ + 4'&[N4[  X +(X + * 1_T_T_^N

dHùþ-,	E

1	E

1K6W@BBB9M12_

 /J +*Z*VOL ,V +GVJ Z &0

²)ÿþ?ûû!1









h5j5h

~´}~µ 

~/]{}/}

	ÿþ-, ;1#,d Yùýü/úÿþ,
`71  126W@BBC9M1  Uü_þ	ÿ5ú
Nþ*ûS%ú#ù ýþ! $5û+ú ý#¹ÿ5ú#ù
41 NW
W L J GV VMX + * E/J Z NKV ( XALON V V,+Nx+N VOLC+?[NUX#J/+?[M\ J/+*Z*VOL V,+GV J/+/T[ X +!V V [MLC+(X + * 1Ma ý5ùúþ


þ?ýÿMú1

cÁý
P_þ	ÿ¹þ	ÿ,Pf1#,&d  ý{ÿ5ý %f ,P1]6GJ%LLL*9M1 dHR/ÿM
äý%ú# ÿMþ ûþ!û!1 NW WL J GV VMX + * E J Z NKV
 JMFSLON WFSL J H(V [/+  J/+*Z*VOL V,+GVJ/+*WLGX +7X H?\ VGE@J Z,'&[N[ X +(X + * [/+  2+?J.-\ V * V 'eX E JMY 
VOL %1$Y{üÿ5ú¹þ	ÿ1
cÁý
P_þ	ÿ¹þ	ÿ,	f1#,  ý{ÿ5ý %f , P1#,d E®þ!+û5ùþ	ÿþb,-f1k6GJ%LLJ9M1(YR¹ÿüú3ûý3ú#[?ý%ú#-R_ 
Nþ!ùR
ýDýüü	3ú	ý%ú#Rúâü$¹ü	3ý%ú#Rûÿþ	þú1RNW)WL J GV 
V MX + * EbJ Z N KV x+N VOCL +?[NUX#/J +?[M\JML +5E SJ H
/J + x+N VO\A\ X * ,V +N '&[N[ &+?[M\ >EGX EeX + V MX 7X +!V&/[ + 3 S[MCL 0 [ JM\ J *   '  ! #	
 #1
cÁý
P_þ	ÿ¹þ	ÿ,f1#,Id YRf 
%,øc16GJ%LL@9M1q +  \ X +!V '&[N4[  X +(X + *  VOLGYVOnL 1K^` >Rþ	ÿ H û+f bú )NWû+ú#þ,
ù*+ü¡ _j
_ 
äû!1 úÿ¡1 ùÿ1
cWþ!/ùýÿM!,3H	 1g6W@BBR@9M1d;ù5ûúpý
/3
Nü_þ!ú4¹þþ	ÿ5ý3ú#[?ý%ú#û!132+?.J -\ V  * V 7FSX EGXUNUX#/J +
 JMFSCL +?[M\ ,,hCR@PRh%LR1
cT
äý-,  1#,3Ác ýÿ_þ	ÿ,_P1!
a 1#,Wc ÿ¹þ	ÿ,kY1_P1#, d eT3ý%+b5,!
a 1$_P1K6W@BBC9M1dHû+WVþO_C þú#¹þþ?ûûc
ý¹ûûþ?ûû
Nþ*û]ý/
äýý%¹þ
Nþ*Fÿ5ú3û+bP#ý+¹ÿ5û!1  JMFSC
L +?[M\?J Z &0 VOLGX /[ +  JM\A\ V * /V  [ML MX#JM\ J * %,
#! ,@!LJ%L P@!Lh%LR1
eWû-,Af1#,^Y5Rþ	ÿM3ý-,AY1#,d  +[?ú#úG,°5126W@BB9M1 _ ÿþý*"¹þ	ÿ5ú ý#¹ÿ5ú#ù
Yýüü	3úþ
+3þUR7!3ý¹ûûúZ	ý%ú#-1PNWWL J GV V MX + * EJ Z N KV
JML +5E SJ H /J + V [MCL +(X + * ZGL /J 0 ?VIN
 [N V * JMLG.X -*[NUX#/J +1
ýû+búG, ­ 1#,/d  ý{ÿ5ý %f , P1P6GJ%LL@9M1 dA3ý¹ûûúZ	ý%ú# ÿMþ&þ?ýÿMú%ú#ù _&²)` NW5b)` N'VWdT1 NW
WL J * L VGE EbX + 1LONUX  7X#[M\ x+N VO\A\ X * ,V +GV
	WL J GV V MX + * EeJ Z1N K,
V ?,V +N / JMLONUF * FVGE*)V  /J +*Z*VOL ,V +GV /J +
1LONUX  7X#[M\ x+N VO\A\ X * ,V +GV1Y{üÿ5ú¹þ	ÿ1
>Öþ?ú
4,f1	_P1#,a
d >Öÿ5úþ!¹þG,eP1²1k6W@BBC9M1 ­ ú3ûý3ú#[?ý%ú#þ5ùú\5þ?û(:¹ÿ^
äúú;3ýÿ¹þ7ý%ý%/ý¹ûþ?û!
ýS
Nü/ýÿ5ú3û+-1  KL /
[ +KE7[ *NUX#/J +KE /J + 2+?.J -\ V  * V /[ + 3'&[N[q + * X +!V VOLGX + * ,(0,BJhAPRBh51
>Öþþ	ÿ,1#,?²bý%þ	ÿ5û+-,*Nn1#, d mþ	ÿÿþ	ÿ,eP16GJ%LLL*9M1k_Täú*þ!¹ÿ5ý%þ]þ	üg:¹ÿg
#úÿ5ú#þ	ÿ5ú3ý%ÿ5ýbú
7ý%ý
äúú®ý#¹ÿ5ú#ù
äû!1 NW
 (   #	

JML +5E SJ H /J + V7N.[  V [MCL +(X + * 	 FSXA\ MX + *
1FKN/J 0 [NUX 1MY5X GV ?NUL [N V * XVGEZ7JM4L T
J  VO\  VO\ V *NUX#/J +/[ + )V7N S
J  /J 0 OX +?[NUX#/J +1


























>7'? û+¹þ-,KE

1T6W@BBC9M1



Uü	#¹ÿ5ýRF_

1MYM[/+GVGEQX + 2+?J.-\ V * 
V 'eX E



#úü/ý%+þ	ÿM

ý


#ú3û+ÿ5ý%þ!ú3û¹þ	ÿ
+ + * 1 `N ø²)ÿþ?ûû!1

JMYVOL  [/+ )'&[N[3 X (X Ka



>cþb,Nn1k6W@BBh9M1HNWú#¹þdý ;ý¹þ?ûú3ý=þ?ýÿMúNú4
Nþú	ý-ú3ý%ûú3û!1

x+
* ,+ , !,hR@I RhhI*1

ý¹ûûú3û+ý*!1

HIH?\ XV 1LONUX

7X#[M\ N VO\A\ X V GV  OP
ý{ÿ5ý %
d f [	f þ	ÿû+búG,¡Y16W@BB>59M14x+ MF*NUXAYV"3J * X WL J * L [/00 X + * 	"?V ?+(X7FVGE [/+  HIH?\ X [.
f , P1#,!a
NUX#/J +KnE 1  3ú3ûHe^¹ÿH5R-1
ý{ÿ5ý %
f , P1#,
	 3ý5ù-,²1#,F>dý ûf þ!b, T1#,d økR¹ÿû+búG,  1)6GJ%LLJ9M1i_Týüú&!3ý¹ûûúZ	ý%ú# ÿMþ
úú#+dû¹ÿü/ú3û¹þ	ÿ1	NW,WL J GV VMX + * EbJ Z NKV  x+N VOLC+?[NUX#J/+?[M\ J/+*Z*VOL V,+GV
/J + '&[N3
[  X +(X + * 1
ý{ÿ5ý %
f , P1#, Ác ý
P_þ	ÿ¹þ	ÿ,	f1#,!d øÿMþ!,H²16W@BB9M1)_ ÿþþ!ý"#þ	ÿ):¹ÿ^û+ÿMú#¹þRúnV
ú#-1  x+N VO\A\ X * ,V +N  >EON ,V 0&E (KVOXAL HIH?\ X [NUX#/J +KnE , ,!% L PS
 C51
ý{ÿ5ý %
f , P1#,/f þþ![ ,3H	 1#,3d 	 3ý5ù-, ²1F6GJ%LLJ9M1 2` YRf f` þ3ý%ú#ýbû¹ÿü&ú3û¹þ	ÿ`ùÿù
/ÿ5û+WVX¹ÿMþ	ÿcþ?ý%ÿþSû+ÿMú#-1NWWL J GV V MX + * E J ZN KV - VO\ ZON x+N VOCL +?[NUX#/J +?[M4
\  /J +*Z*VOL 
,V +GVGE&/J + x+ MF *NUXAY4
V 3J * X WL J * L /[ 00 X + * 1¡Y{üÿ5ú¹þ	ÿ1














NW



h5j 

 } 
	

 	

 	 

|/|



/}



3·0µ {´}

d  þ!b,  1¡eP1g6W@BB9M1  Uü	#ú#ú"ú3ûý3ú#[?ý%ú# ú=bR^þ¹þSú3ûWV
WL J GV V MX + * E J ZeNKV  XAL EON x+N VOLC+?[NUX#J/+?[M\! J/+*Z*VOL V,+GV&J/+ 2+?J.-\ V * V"'eX E JMYVOL 
[ &[N[ X (X
 þ	þ, ;1#, A5ùýý-, T1S
c 1#,Sd _%ÿú3û!,1 a16W@BB9M1¡>7^þ¹þVX/ý¹ûþSþ?ýÿMúÖúDþUü	#¹ÿ5ý%+¹ÿ
û	úþþ  þ?ýÿMúRÿMþ?ûH+NüÿþúmÿRþ*(	ýÿM	ú¹þú	ú#'1T[ X +!V V [MLC+(X + * , j,	JR@IOP
J>
 LR1
a ýú3ýR,eP1#,!d økú#þ-,eP16W@BBC9M1&52æý«ý#¹ÿ5ú#ù
 :¹ÿ)úDýú*þ	ÿþ?û+úíûþ*þþ?û!1
NWWL J GV V MX + * EJ ,
Z    VOCL +!V7NUX OE&/[ +  >EON ,V 0&E   $j1
a ú5ùý3û+búG,(7` 1-Y1#,`a [	þ!ú %f ,-Nn1#,	e^, 1#,?d  ý{ÿ5ý %f , P16W@BC9M1%øfùþP
#úZVü	ÿü$ûþÖúÿþ
NþRV
ýHþ?ýÿMúæû+û+þ
 _  @*æ
 ý ú#û7þ?û+ú ýüü	3ú	ý%ú#<Qùÿþ	þ"
Nþú	ýg
äý¹úû!1"NW
WL J GV V MX + * E&J Z N KV  X ZON Q[NUX#/J +?[M
\  /J +*Z*VOL ,V +GV&/J + 1LONUX  7X#[M\ x+N VO\A\ X * ,V +GV1S`a ¹ÿý4>dýV
;1#, 52,-eP1  1#,
¹þ	ÿ1FNW 

/+ 3' ) + + * 1



þ	þ,¡eP1




äý-1

²)ÿû+!,>	H1#,Md
V [MLC(+ X + *

	ýAþ!+!,¹øc156GJ%LL@9M1 `)	û+¡!3ý¹ûûúZ	ý%ú#2:¹ÿú
Nüÿþ	ú3ûþbþ*úÿ
Nþ*û!1 T[ X +!V
#,$J%LhAPRJhR@%1


,

K`  d

YR5ùýü/úÿþ, 71 1#,
Yú¹þ	ÿ, ;1k6W@BBB9M1gNW
Nüÿ¹þ$5û+úDý#¹ÿ5ú#ù
äûAûú;RþþVÿ5ý%þ
üÿþúú#û!1  + "
C+ + * , !,$JBI RhhC51

d



T[ X !V V [ML (X

OP


SR
WL J GV V MX EJ Z N KV  XAL EON N VOL ?[NUX#J ?[M\ J *Z*VOL V GV@J ?J \ V V
eX E JMYVOL  [ &[N[ X (X
Yú
/MC,*Y1 1#, ^úÿ5ù
S
NþV 	ÿ5ý¹ú#ÿþ,
a 1#, d H{þ?ùþ-,a1*eP1	6GJ%LL@9M1WL J GV VMX + * E J Z/NKV 2"'4'
#	
  JML +5E SJ H /J +3X EGF([M
\ '&[N)[  X +(X + * 1
økR¹ÿû+búG,  1#,S	3ý5ù-, ²1#,Kd  ý{ÿ5ý %
f , P1-6GJ%LLL*9M16²)ÿþúú#¹þ%ü_þ	ÿ:¹ÿM
äýþ^¡mþ?ú#ù*þFÿþ3ý%ú#¹þ
ý!!ÿ5ý1&NW WL J GV 
V MX + * EJ ZN KV  JMFSLON  WFSL J H(V /[ +  /J +*Z*VOL ,V +GV@/J + WLGX +7X H?\ VGE9J )Z '&[N[
 X +(X + * /[ + 32+?.J -\ V  * "
V 'eX E JMYVOL %1$Y{üÿ5ú¹þ	ÿ1
øb¹þ!, 1E 16W@BII9M1  GH?\ JML [NJML  '&[N[ &+?[M\ >EGX n
E 1g_Tú3û+"E®þ?ûþ!1
T*%ú-,_P1 6GJ%LLL*9M1
3X EGF([M\ .X -*[NUX#/J + Z7JML I[N[ 0 X +(X + * 1
ù*+ü¡ _
_ ))P@%1 
äý%ù-1 úZV
ýû+	ÿ1 þ>

_ 	j*%ú?j_ _T*+*R_%ÿûG_ ­ ú3û  ýÿ¹þ>c¹ÿþ?ýfWþJ%LLLR1 ü-O1
YRf 
%,øc1#,?Á
c ý
P_þ	ÿ¹þ	ÿ,	f1#,?d >Öÿ5û+ý 	f ú %,3c 1k6GJ%LL@9M1)dH
P/úú;ûü_þ	ÿú#[	þFýpûü_þ	ÿú#[	þ

äý5ùúþ;þ?ýÿMúFú ýý#ûú3û^Fùþ]dAeTf ü/ý%úþ*cý%ý%/ý¹ûþ1cNW WL J GV V MX + * E J Z WX *  N 
 /J +*Z*VOL ,V +GV/J + 1LONUX  7X#[M
\ x+N VO\A\ X * ,V +GVeX + V MX 7X +!VQX + WFSL J H(V 1-Y{üÿ5ú¹þ	ÿ1
E®ÿ_þG,Y1g6W@BBI9M13_TBý#¹ÿ5ú#ù
 :¹ÿ
#úZVÿþ3ý%ú#ýKú3û¹þ	ÿ&û¹ÿü/û!1/NW WL J GV V .
X + * E J Z&N KV  XAL EON WFSL J H(V /[ +  /0/HKJ>EGXAF 0 /J + WLGX +7X H?\ VGE J "Z '&[N,[  X +(X + * /[ + ,2+?.J -\ V  * V
'eX E JMYVOL %1$Y{üÿ5ú¹þ	ÿ1
Yú#_þ	ÿ5û5ùý%+[,_P1#, îø[?ùú3ú-,%_P16W@BB 9M1 52äû þú#¹þ^
Nþ?ý¹ûÿþ?ûFVú*þ	ÿþ?û+úþ?ûû)ú;bR^ZV
þ¹þ4ú3û¹þ	ÿ1=NW*
 + *

1x+ C+
/+  /+ ,+ /+ 2+ .-  *
'
/+ 3' ) + + * 1_T_T_^N1²)ÿþ?ûû!1







E®ÿ_þG,¡Y1K6GJ%LL@9M1NWú#¹þ;#úâüÿ¹ÿ5ý
S
äú]:¹ÿ2bR^þ¹þ/ú3û¹þ	ÿ ú =ý%ý%/ý¹ûþ?û!17NW

/+ (' 3 + + * 1	{Y üÿ5ú¹ þ	ÿ1

VO\ [NUX#J ?[M\ &[N[ X (X
E®ÿ_þG,¡Y1#, d f [	f þ	ÿû+búG,kY1K6W@BB9M1âøfùþN  ² þ?ûÿ5úüú#`þ?ýÿMúíüÿ	þ
4/øk;ýÿMûÖý]¹þRV
þ	ÿ5ý
/RþZV'þ!¹þkþú#ú#4gý%ý"
äúúíú3N  ²)1^NWWL J GV VMX + * E  [ * LGF5HIH(V,+NUL VbV,+
T[>E  X +!VO\A\ VG4
E VOCL +!,V +1 Tú#1fT¹ÿ
-1
E®ÿ_þ	Y1#,E®þ!+û5ùþ	ÿþb,Rf1#, ­ þ	ÿbý
/,*_P1Nn1#,5Yúþ!_þ?û!,%_P1#,Ia ýú3ýR,eP1#,>c;ý%b5b¹þG,IH
	 1#, d >7#{þ?ûWV
¹þ-,E 16W@BBC9M1 Wûþ	ÿÁú*þ	ÿ5ýú#ú#'æú4¹þ	ÿ33ýÿ¹þRû	ýþý%ý]
äúú1HNW WL J GV V MX + * E J Z
N K
V /VOCL 0 /[ + JML +5E SJ H /J + T[  X +!4V V [MCL +(X + * 1 Tú#1d;ùþ
Sú#+[1
h5j ¤

Journal of Artificial Intelligence Research 17 (2002) 309-332

Submitted 06/02; published 10/02

An Analysis of Phase Transition in NK Landscapes
Yong Gao
Joseph Culberson

ygao@cs.ualberta.ca
joe@cs.ualberta.ca

Department of Computing Science
University of Alberta
Edmonton, Alberta, Canada, T6G 2H1

Abstract
In this paper, we analyze the decision version of the NK landscape model from the
perspective of threshold phenomena and phase transitions under two random distributions,
the uniform probability model and the fixed ratio model. For the uniform probability
model, we prove that the phase transition is easy in the sense that there is a polynomial
algorithm that can solve a random instance of the problem with the probability asymptotic
to 1 as the problem size tends to infinity. For the fixed ratio model, we establish several
upper bounds for the solubility threshold, and prove that random instances with parameters
above these upper bounds can be solved polynomially. This, together with our empirical
study for random instances generated below and in the phase transition region, suggests
that the phase transition of the fixed ratio model is also easy.

1. Introduction
The NK landscape is a fitness landscape model devised by Kauffman (1989). An appealing
property of the NK landscape is that the “ruggedness” of the landscape can be tuned
by changing some parameters. Over the years, the NK landscape model itself has been
studied from the perspectives of statistics and computational complexity (Weinberger, 1996;
Wright, Thompson, & Zhang, 2000). In the study of genetic algorithms, NK landscape
models have been used as a prototype and benchmark in the analysis of the performance of
different genetic operators and the effects of different encoding methods on the algorithm’s
performance (Altenberg, 1997; Hordijk, 1997; Jones, 1995).
In the field of combinatorial search and optimization, one of the interesting discoveries
is the threshold phenomena and phase transitions. Roughly speaking, a phase transition in
combinatorial search refers to the phenomenon that the probability that a random instance
of the problem has a solution drops abruptly from 1 to 0 as the order parameter of the
random model crosses a critical value called the threshold. Closely related to this phase
transition in solubility is the hardness of solving the problems. There has been strong empirical evidence and theoretical arguments showing that the hardest instances of the problems
usually occur around the threshold and instances generated with parameters far away from
the threshold are relatively easy. Since the seminal work of Cheeseman et al. (Cheeseman, Kanefsky, & Taylor, 1991), many NP-complete combinatorial search problems have
been shown to have the phase transition and the associated easy-hard-easy pattern (Cook
& Mitchell, 1997; Culberson & Gent, 2001; Freeman, 1996; Gent, MacIntyre, Prosser, &

c
2002
AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Gao & Culberson

Walsh, 1998; Kirkpatrick & Selman, 1994; Mitchell, Selman, & Levesque, 1992; Vandegriend
& Culberson, 1998).
In this paper, we analyze the NK landscape model from the perspective of threshold
phenomena and phase transitions. We establish two random models for the decision problem
of NK landscapes and study the threshold phenomena and the associated hardness of the
phase transitions in these two models.
The rest of the paper is organized as follows. In Section 2, we introduce the NK fitness
landscape and our probabilistic models, the uniform probability model and the fixed ratio
model. In Section 3 and Section 4, the threshold phenomena and phase transitions in
NK landscapes are analyzed. For the uniform probability model, we prove that the phase
transition of the uniform probability model is easy in the sense that there is a polynomial
algorithm that can solve a random instance of the problem with the probability asymptotic
to 1 as the problem size tends to infinity. For the fixed ratio model, we establish two upper
bounds for the solubility threshold, and prove that random instances with parameters above
these upper bounds can be solved polynomially. This, together with our empirical study
for random instances generated below and in the phase transition region, suggests that
the phase transition of the fixed ratio model is also easy. In Section 5, we report our
experimental results on typical hardness of the fixed ratio model. In Section 6, we conclude
our investigation and discuss implications of our results.

2. NK Landscapes and their Probabilistic Models
An NK landscape f (x) =

n
P

fi (xi , Π(xi )), is a real-valued function defined on binary strings

i=1

of fixed length, where n > 0 is a positive integer and x = (x1 , · · · , xn ) ∈ {0, 1}n . It is the sum
of n local fitness functions fi , 1 ≤ i ≤ n. Each local fitness function fi (xi , Π(xi )) depends
on the main variable xi and its neighborhood Π(xi ) ⊂ Pk ({x1 , · · · , xn }\{xi }) where Pk (X)
denotes the set of all subsets of size k from X. The most important parameters of an NK
landscape are the number of variables n, and the size of the neighborhood k = |Π(xi )|.
In an NK landscape, the neighborhood Π(xi ) can be chosen in two ways: the random
neighborhood, where the k variables are randomly chosen from the set {x1 , · · · , xn }\{xi },
and the adjacent neighborhood, where k variables with indices nearest to i (modulo n) are
chosen. For example, for any even integer k, the k variables in Π(xi ) can be defined as
x((n+i− k ) mod n) , · · · , x((n+i+ k ) mod n) . Once the variables in the neighborhood are deter2
2
mined, the local fitness function fi is determined by a fitness lookup table which specifies
the function value fi for each of the 2k+1 possible assignments to the variables xi and Π(xi ).
Throughout this paper, we consider NK landscapes with random neighborhoods. To
simplify the discussion, we further assume that the local fitness functions take on binary
values. Given an NK landscape f , the corresponding decision problem is stated as follows:
Is the maximum of f (x) equal to n? An NK landscape decision problem is insoluble if there
is no solution for it.
It has been proved that the NK landscape model is NP complete for k ≥ 2 (e.g.,
Weinberger, 1996; Wright et al., 2000). The proofs were based on a reduction from SAT to
the decision problem of NK landscapes. To study the typical hardness of the NK landscape
decision problems in the framework of thresholds and phase transitions, we introduce two

310

Phase Transition in NK Landscapes

random models. In both of the models defined below, the neighborhood set Π(xi ) of a
variable xi is selected by randomly choosing without replacement k = |Π(xi )| variables
from x\{xi }.
Definition 2.1. The Uniform Probability Model N (n, k, p): In this model, the fitness value
of the local fitness function fi (xi , Π(xi )) is determined as follows: For each assignment
y ∈ Dom(fi ) = {0, 1}k+1 , let fi (y) = 0 with the probability p and fi (y) = 1 with the
probability 1 − p, where this is done for each possible assignment and each local fitness
function independently.
Definition 2.2. The Fixed Ratio Model N (n, k, z): In this model, the parameter z takes
on values from [0, 2k+1 ]. If z is an integer, we specify the local fitness function fi (xi , Π(xi ))
by randomly choosing without replacement z tuples of possible assignments Y = (y1 , · · · , yz )
from Dom(fi ) = {0, 1}k+1 , and defining the local fitness function as follows:

0, if y ∈ Y ;
fi (y) =
1, else.
For a non-integer z = (1 − α)[z] + α[z + 1] where [z] is the integer part of z, we choose
randomly without replacement [(1 − α)n] local fitness functions and determine their fitness
values according to N (n, k, [z]). The rest of the local fitness functions are determined according to N (n, k, [z] + 1).
In the theory of random graphs, there are two related random models G(n, p) where
each of the n(n−1)
possible edges is included in the graph independently with probability
2
p, and G(n, m) where exactly m edges are chosen randomly and without replacement from
the set of n(n−1)
possible edges. It is well known that for most of the monotone graph
2
properties, results proved in G(n, p) (or G(n, m)) also hold asymptotically for G(n, N p)
m
(correspondingly, G(n, N
)) where N = n(n−1)
. However, we cannot expect that similar
2
relations exist between the two random models of NK landscapes defined above unless the
parameter k tends to infinity. As a result, the asymptotic behaviors of the two NK landscape
models are significantly different for fixed k.
We conclude this section by establishing a relation between the decision problem of NK
landscapes and the SAT problem. A decision problem of the NK landscape
f (x) =

n
X

fi (xi , Π(xi )),

i=1

“is the maximum of f (x) equal or greater than n?”, can be reduced to a (k+1)-SAT problem
as follows:
z
V
(1) For each local fitness function fi (xi , Π(xi )), construct a conjunction Ci =
Cij
j=1

of clauses with exactly k + 1 variable-distinct literals from the set of variables {xi , Π(xi )},
where z is the number of zero values that fi takes and Cij is such that for any assignment
yj ∈ {0, 1}k+1 that falsifies Cij , we have fi (yj ) = 0.
n
V
(2) The (k+1)-SAT is the conjunction ϕ =
Ci .
i=1

311

Gao & Culberson

x
0
0
0
0
1
1
1
1

y
0
0
1
1
0
0
1
1

z
0
1
0
1
0
1
0
1

fi
0
1
1
0
1
0
0
1

Clauses
x∨y∨z

x ∨ ȳ ∨ z̄
x̄ ∨ y ∨ z̄
x̄ ∨ ȳ ∨ z

Table 1: A local fitness function and its equivalent 3-clauses.

Table 1 shows an example of the fitness assignment of a local fitness function fi = fi (x, y, z)
and its associated equivalent 3-SAT clauses. It is easy to see that for any assignment s to
the variables x, y, z, fi (s) = 1 if and only if the assignment satisfies the formula
x ∨ y ∨ z, x ∨ ȳ ∨ z̄, x̄ ∨ y ∨ z̄, x̄ ∨ ȳ ∨ z.

3. Analysis of The Uniform Probability Model
In the uniform probability model N (n, k, p), the parameter p determines how many zero
values a local fitness function can take. We are interested in how the solubility and hardness
of the NK landscape decision problem change as the parameter p increases from 0 to 1. It
turns out that for fixed p > 0, the decision problem is asymptotically trivially insoluble.
This is quite similar to the phenomena in the random models of the constraint satisfaction
problem observed by Achlioptas et al. (1997).
To gain some more insight into the problem, we consider the case where p = p(n) is a
function of the problem size n with lim p(n) = 0. Our analysis shows that the solubility of
n

the problem depends on how fast p(n) decreases:
(1) If
1

lim p(n)n 2k+1 = +∞,

(3.1)

n

the problem is still asymptotically trivially insoluble because with the probability asymptotic to 1, there is at least one local fitness function that always has a fitness value 0;
(2) On the other hand if p(n) decreases fast enough, i.e.,
1

lim p(n)n 2k+1 < +∞,

(3.2)

n

the problem can be decomposed into a set of independent sub-problems. In either case the
problem can be solved in polynomial time. The case of (3.1) is not difficult to prove, but
to prove the case of (3.2), we need to make use of the following concepts and results.
Definition 3.1. The connection graph of an NK landscape instance f (x) =

n
P
i=1

is a graph G = G(V, E) satisfying
312

fi (xi , Π(xi ))

Phase Transition in NK Landscapes

(1) Each vertex v ∈ V corresponds to a local fitness function; and
(2)There is an edge between vi , vj if and only if the corresponding local fitness functions
fi , fj share variables, i.e., the neighborhoods Π(xi ) and Π(xj ) of xi and xj have a non-empty
intersection, and both of them have at least one zero value.
Definition 3.2. Let f (x) =

n
P

fi (xi , Π(xi )) be an NK landscape instance with the con-

i=1

nection graph G = G(V, E). Let G1 , · · · , Gl be the connected components of G. Since the
vertices of G correspond to local fitness functions, we can regard Gi as a set of local fitness
functions. For each 1 ≤ i ≤ l, let Ui ⊂ x = (x1 , · · · , xn ) be the set of variables that appear
in the definition of the local fitness functions in Gi .
It is easy to see that (U1 , · · · Ul ) excluding independent vertices forms a disjoint partition
of (a subset of) the variables x = (x1 , · · · , xn ), and that the local fitness functions in Gi
only depend on the variables in Ui . Furthermore, the NK decision problem is soluble if and
only if for each 1 ≤ i ≤ l, there is an assignment si ∈ {0, 1}|Ui | to the variables in Ui such
that for each local fitness function g ∈ Gi , g(s) = 1.
Theorem 3.1 summarizes the result on the uniform probability model.
1

Theorem 3.1. For any p(n) such that lim p(n)n 2k+1 exists, k fixed,there is a polynon

mial time algorithm that successfully solves a random instance of N (n, k, p) with probability
asymptotic to 1 as n tends to infinity.
1

1

Proof: We consider two cases: lim p(n)n 2k+1 = +∞ and lim p(n)n 2k+1 < +∞.
n

(1) The case of lim p(n)n
n

1
2k+1

n

= +∞.

Let Ai be the event that fi (y) = 0 for each possible assignment y ∈ {0, 1}k+1 and let
n
S
A=
Ai be the event that at least one of the Ai ’s occurs. We have
i=1

lim P r{A} = 1 − lim P r{

n→∞

n→∞

n
\

Aci }

i=1

= 1 − lim (1 − p(n)2
n→∞

k+1

)n .

1

It can be shown that if k is fixed and lim p(n)n 2k+1 = +∞, then lim P r{A} = 1. It follows
n
n→∞
that with probability asymptotic to one, there is at least one local fitness function which
takes on values 0 for any possible assignments. We can therefore show that in this case, the
NK decision problem is insoluble by checking the local fitness functions one by one. And
this only takes linear time.
1
(2) The case of lim p(n)n 2k+1 < +∞.
n
Consider an algorithm that first finds the connected components Gi , 1 ≤ i ≤ l of the
connection graph G of the NK model, and then uses brute force to find an assignment
si ∈ {0, 1}|Ui | to the variables in Ui such that for each local fitness function g ∈ Gi ,
g(s) = 1. The time complexity of this algorithm is O(n2 + n ∗ 2M(n,k,p) ) where M(n, k, p) =
max(|Ui |, 1 ≤ i ≤ l) is the maximum size of the subsets (Ui , 1 ≤ i ≤ l) associated with the
313

Gao & Culberson

connected components of the connection graph. To prove the theorem, we only need to show
1
that M(n, k, p) ∈ O(log n). In the following, we will show that for lim p(n)n 2k+1 < +∞,
n
we have
lim P r{M(n, k, p) ≤ 2k + 2} = 1
n→∞

Consider the connection graph G = G(V, E) of the NK model. It is a random graph and
there is an edge between two nodes if and only if the two corresponding local fitness functions
share variables and both of the local fitness functions take at least one zero as their fitness
value. However, under this definition the edge probabilities are not independent. If vx ∈ E
then we know that fx has at least one zero and so the probability that xw is in E is greater
than if there were no other edge on x.
To deal with this we resort to the following proof construction. Let Cm = {v1 , . . . , vm }
be a subset of V of size m. Let π be an ordering (permutation) of v1 . . . vm . We say that
Cm is variable connected with respect to the ordering π, denoted as C(Cm , π), if for each
i, 2 ≤ i ≤ m there is either
1. a j < i such that fπ(j) and fπ(i) share a variable; or
2. a j, 1 ≤ j ≤ i such that the variable xj is one of the k random variables in fi .
Lemma If the induced subgraph G[Cm ] is connected then there exists at least one ordering
π of v1 . . . vm such that C(Cm , π).
As proof, consider the ordering of vertices of any depth first search of a connected
subgraph. In this case, the connections are all by case 1.
The expected number of permutations π for which C(Cm , π) is
Ec = E[|{π : C(Cm , π)}|] = m!Pr{C(Cm , π)}
We then observe
 that the expected number of connected induced graphs on m vertices is
n
less than pm
0 m Ec , where p0 is the probability that fi takes at least one value zero. We
show this value goes to zero in the limit if m ≥ 2k + 2. Finally, since if there is a connected
subgraph on m vertices then there must be one for each i < m, it follows that the largest
connected component has size at most 2k + 1.
For a randomly generated permutation π of Cm , let Ci be the set of the first i vertices
of the permutation. For i ≥ 2 define Pi to be the probability that fπ(i) shares at least one
variable with fπ(j) for some j < i given that C(Ci−1 , π/1, · · · , i − 1). Let P1 = 1. (A one
vertex subgraph is always connected.)
For i > 1 we have Pi = Pr{∃j < i, fπ(i) and fπ(j) share variables, given C(Ci−1 , π) or
one of the k random variables in fπ(i) is in {x1 . . . xm } − {xi }}.
Pr{C(Cm , π)} =

m
Y

Pi .

i=2

Finally, for i > 1 we note that Ci−1 has at most (i − 1)k distinct other variables. If Ci−1
is connected then the number of variables may be less than this. Thus,
n−k(i−1)−m
k

n−1
k

Pi ≤ 1 −
314

.

Phase Transition in NK Landscapes

The combinatorial part reduces to
(n − k(i − 1) − m) . . . (n − k(i − 1) − m − k + 1)
(n − 1) . . . (n − k)


n − ki − m + 1 k
≥
.
n−1
So, Pr{C(Cm , π)} is
≤

m
Y


1−

i=2

n − ki − m + 1
n−1

k !

 !m−1
km + m − 2 k
≤
1− 1−
n−1
 m−1 !
1
∈ O
, m, k fixed.
n


 −m 
Noting that pm
∈
O
n 2k +1 , we see that the expected number of connected subgraphs of
0
size m is bounded by
 
 m−1 !
−m
1
m n
m 2k +1
p0
Ec ∈ O n n
m
n
which goes to zero if m = 2k +2. It follows that M(n, k, p) is less than 2k +2 with probability
asymptotic to 1. This completes the proof.

4. Analysis of The Fixed Ratio Model
As has been discussed in the previous section, the uniform probability model N (n, k, p) of
NK landscapes is asymptotically trivial. Part of the cause of this asymptotic triviality lies in
the fact that if the parameter p does not decrease very quickly with n, then asymptotically
there will be at least one local fitness function that takes the value 0 for all the possible
assignments, making the whole decision problem insoluble. In this section, we study the
fixed ratio model N (n, k, z). In this model, we require that each local fitness function has
fixed number of zero values so that the trivially insoluble situation in the uniform probability
model is avoided. We note that the same idea has been used in the study of the flawless
CSP (Gent et al., 1998).
Recall that in the fixed ratio model, we choose the neighborhood structure for each local
fitness in the same way as in the uniform probability model N (n, k, p). To determine the
fitness value for a local fitness function fi , we randomly without replacement select exactly
z tuples {s1 , · · · , sz } from {0, 1}k+1 , and let fi (sj ) = 0 for each 1 ≤ j ≤ z and fi (s) = 1 for
every other s ∈ {0, 1}k+1 .
For the fixed ratio model, we are interested in how the probability of an instance of
N (n, k, z) being soluble changes as the parameter z increases from 0 to 2k+1 . It is easy to
n
P
see that the property “There exists an assignment x such that f (x) =
fi (xi , Π(xi )) = n”
i=1

315

Gao & Culberson

is monotone in the parameter z — the number of tuples at which a local fitness function takes
zero. Actually, we have the following Lemma on the property of the solubility probability
of the fixed ratio model:
Lemma 4.1. For the fixed ratio model, if z1 > z2 , then
P r{N (n, k, z1 )is soluble} ≤ P r{N (n, k, z2 )is soluble}.
Furthermore, we have

P r{N (n, k, z)is soluble} =

1, if z ≤ 1;
0, if z = 2k+1 .

Based on the above Lemma and in parallel to the study of the threshold phenomena in
other random combinatorial structures such as 3-Coloring of random graphs and random
3-SAT, we suggest the following conjecture:
Conjecture 4.1. There exists a threshold zc such that

1, if z < zc ;
lim P r{N (n, k, z)is soluble} =
n→∞
0, if z > zc .
Conjectures like this are the starting point of the study of phase transition in many
random combinatorial structures such as 3-coloring of random graphs and random SAT,
but the existence of the thresholds is still an open question (Achlioptas, 1999; Cook &
Mitchell, 1997). However, bounding the thresholds has been an important topic in the
study of phase transition (Achlioptas, 1999, 2001; Dubois, 2001; Franco & Gelder, 1998;
Franco & Paul, 1983; Frieze & Suen, 1996; Kirousis, P.Kranakis, D.Krizanc, & Y.Stamation,
1994). In this section, we will establish two upper bounds on the threshold of the parameter
zc , and theoretically prove that random instances generated with the parameter z above
these upper bounds can be solved with probability asymptotic to 1 by polynomial (even
linear) algorithms.
Characterizing the sharpness of the thresholds is also of great interest in the study of
the phase transition. After proving that every monotone graph property has a threshold
behavior (Friedgut & Kalai, 1996), Friedgut (1999) established a necessary and sufficient
condition for a monotone graph property to have sharp threshold, which has been used to
prove the sharpness of the thresholds of 3-colorability and 3-SAT problems (Friedgut, 1999;
Achlioptas, 1999). For the fixed ratio model discussed in this paper, we suspect that it will
exhibit a coarse threshold behavior, and would like to leave a detailed investigation into
this problem as a future research direction.
4.1 The Upper Bound of z = 3.0
The derivation of this upper bound is based on the concept of a conflicting pair of local
fitness functions. We say that two local fitness functions fi and fj conflict with each other
if
1. fi and fj share at least one variable x; and
316

Phase Transition in NK Landscapes

2. For any assignment s ∈ {0, 1}n , we have fi (s)fj (s) = 0.
It is obvious that an instance of the NK decision problem is insoluble if there exists a pair
of conflicting local fitness functions.
Based on the second moment method in the theory of probability (Alon & Spencer,
1992), we can prove the following upper bound result. As it takes linear time to check if
there is a pair of conflicting local fitness functions, we can see that the fixed ratio model
N (n, 2, z) is linearly solvable when z > 3.0.
Theorem 4.1. Define A to be the event that there is a conflicting pair of local fitness
functions in N (n, 2, z). For the fixed ratio model N (n, 2, z) with z = 3.0 + ε, we have
lim P r{A} = 1
n

and thus the problem is insoluble with probability asymptotic to 1.
Proof: Without loss of generality, we may write f as where fi has 4 zeroes in its fitness
value assignment for 1 ≤ i ≤ εn, and 3 zeroes for εn + 1 ≤ i ≤ n. Let Iij be the indicator
function of the event that fi and fj conflicts with each other, i.e.,

1, if fi and fj conflicts with each other;
Iij =
0, else.
P
Iij . We claim that lim P r{S = 0} = 0.
and S =
1≤i,j≤εn

n→∞

By Chebyschev’s inequality, we have
P r{S = 0} ≤ P r{|S − E(S)| ≥ E(S)}
V ar(S)
≤
.
(E(S)2 )

(4.3)

Since for each 1 ≤ i ≤ εn, fi has exactly 4 zeros in its fitness value assignment, we know
that two local fitness function fi , fj , 1 ≤ i, j ≤ εn, conflict with each other if and only if
they have exactly one common variable x such that one of the following is true: (1)fi (s) =
0(or 1), fj (s) = 1(or 0) for all the assignments s such that x = 1(respectively x = 0); and
(2)fi (s) = 1(or 0), fj (s) = 0(or 1) for all the assignments s such that x = 1(respectively x =
0);
Since the probability that two local fitness functions share at least one variable is equal
to


n−2 n−4
1−

2
 2 
n−1 n−1 ,
2
2

we have


P r{Iij = 1} =

1−

1
= Ω( ),
n

!

n−2 n−4
2
 2 
n−1 n−1
2
2

·2

1

8

!2

4

ε > 0, 1 ≤ i, j ≤ εn,

317

(4.4)

Gao & Culberson

and hence,
X

E(S) =

X

E(Iij ) =

1≤i,j≤εn

P r{Iij = 1} ∈ Ω(n).

1≤i,j≤εn

P

We now consider the variance of S. Since S =

Iij , we have

1≤i,j≤εn

P
V ar(S) =

P

V ar(Iij ) + 2

i,j

[E{Iij Ilm } − E{Iij }E{Ilm }]

(i,j)6=(l,m)

.

(E(S))2

Let

P
A1 =

and

P

2
A2 =

V ar(Iij )

i,j

(E(S))2

[E{Iij Ilm } − E{Iij }E{Ilm }]

(i,j)6=(l,m)

(E(S))2

.

It is easy to see that lim A1 = 0. To prove lim A2 = 0, we consider two cases:
n→∞
n→∞
Case 1: i 6= j 6= m 6= l. In this case, the two random variables Iij and Ilm are actually
independent. It follows that E{Iij Ilm } − E{Iij }E{Ilm } = 0.
Case 2: (i, j) 6= (l, m), but they have one in common, say j = l. In this case, we have
 2 !
1
E{Iij Ilm } − E{Iij }E{Ilm } = P r{Iij = 1}P r{Ijm = 1|Iij = 1} − Ω
n
 
 2 !
1
1
= Ω
P r{Ijm = 1|Iij = 1} − Ω
n
n
Given that fi and fj conflict with each other, the conditional probability that fj and fm
conflict with each other is still in Ω( n1 ).
3 pairs of I and I
SincePthere are only Cεn
ij
jm satisfying the condition in Case 2, we know
that
[E{Iij Ilm } − E{Iij }E{Ilm }] is in Ω(n). And therefore, lim A2 = 0. It follows
n→∞

(i,j)6=(l,m)

that

V ar(S)
= 0.
n→∞ (E(S)2 )

lim P r{S = 0} ≤ lim

n→∞

Since the event {S > 0} implies that there exists a conflicting pair of local fitness functions,
the theorem follows.
4.2 2-SAT Sub-problems in N (n, 2, z) and a Tighter Upper Bound
In this subsection, we establish a tighter upper bound z > 2.837 for the threshold of the fixed
ratio model N (n, 2, z) by showing that asymptotically N (n, 2, z) contains an unsatisfiable
2-SAT sub-problem with probability 1 for any value of z greater than 2.873. This also
gives us a polynomial time algorithm which determines that N (n, 2, z) is insoluble with
probability asymptotic to 1 for z > 2.837.
318

Phase Transition in NK Landscapes

Recall from Section 2 that each instance of N (n, 2, z) has an equivalent 3-SAT instance.
The idea is to show that with probability asymptotic to 1, an instance of N (n, 2, z) will
contain a set of specially structured 3-clauses, called a t-3-module (Definition 10.3, Franco
& Gelder, 1998):
M = {M1 , . . . , M3p+2 }, t = 3p + 2,
where
M1 = (ū1 ∨ u2 ∨ z1 , ū1 ∨ u2 ∨ z̄1 );
···
Mp−1 = (ūp−1 ∨ up ∨ zp−1 , ūp−1 ∨ up ∨ z̄p−1 );
Mp = (ūp ∨ ū0 ∨ zp , ūp ∨ ū0 ∨ z̄p );
Mp+1 = (ūp+1 ∨ up+2 ∨ zp+1 , ūp+1 ∨ up+2 ∨ z̄p+1 );
···
M3p−1 = (ū3p−1 ∨ u3p ∨ z3p−1 , ū3p−1 ∨ u3p ∨ z̄3p−1 );
M3p = (ū3p ∨ u0 ∨ z3p , ū3p ∨ u0 ∨ z̄3p )
M3p+1 = (ū0 ∨ u1 ∨ z3p+1 , ū0 ∨ u1 ∨ z̄3p+1 );
M3p+2 = (u0 ∨ up+1 ∨ z3p+2 , u0 ∨ up+1 ∨ z̄3p+2 );
and u1 , · · · , u3p+1 , z1 , · · · , z3p+1 are binary variables. Notice that a t-3-module can be reduced to a 2-SAT problem containing two contradictory cycles and hence is unsatisfiable.
The result is proved in two steps. In the first step, it is shown that for z > 2.837 the
average number of t-3-modules contained in N (n, 2, z) tends to infinity as n increases. In
the second step, we use a result established by Alon and Spencer (1992) on the second
moment method to prove that for z > 2.837 the probability that N (n, 2, z) contains at least
one t-3-module tends to 1.
Let us start with the first step to show that the average number of t-3-modules contained
in N (n, 2, z) tends to infinity as n increases.
Definition 4.1. Given a t-3-module M and an NK landscape instance f =

n
P

fi , k = 2, a

i=1

sequence of local fitness functions
g = (g1 , · · · , gt ) ⊂ (f1 , · · · , fn )
is said to be a possible match(PM) if for each 1 ≤ m ≤ t, the main variable of gm is one of
the three variables that occur in the 3-module Mm . A subsequence (h1 , · · · , hl ) of a possible
match g is legal if for any 1 ≤ m < j ≤ l, hm 6= hj .
Lemma 4.2. Let f (x) =

n
P

fi (xi , Π(xi )) be an instance of N (n, 2, z) and M be a t-3-

i=1

t
module. Then the number of possible matches
 for the t-3-module M is 3 . Further, the
√
number of legal possible matches is Θ ( 3+2 5 )t .

319

Gao & Culberson

Proof: For each 1 ≤ m ≤ t, there are exactly 3 possible choices for gm :
fi1 (xi1 , Π(xi1 )), fi2 (xi2 , Π(xi2 )), fi3 (xi3 , Π(xi3 )),
where xi1 , xi2 , and xi3 correspond to the three variables that occur in the 3-module Mm .
Therefore, there are 3t possible matches for the t-3-module.
To prove the second conclusion, we divide the t-3-module into 3 parts M = (M1 , M2 , M3 ),
where M1 = (Mm , 1 ≤ m ≤ p), M2 = (Mm , p + 1 ≤ m ≤ 3p − 1), and M3 =
(M3p , M3p+1 , M3p+2 ). Letting L1 , L2 , and L3 be the number of legal possible matches for
M1 , M2 , M3 respectively. Since the literals in M1 are variable-distinct from the literals in
M2 , we have that the number of legal possible matches, L, for the t-3-module M satisfies
L1 L2 ≤ L ≤ 27L1 L2 .
We now estimate the order of L1 . To this end, we consider the probability space (Ω, P ),
where Ω is the set of sequences (g1 , · · · , gp ) of local fitness functions that possibly match M1
and P is the uniform probability distribution. Then, the number of legal possible matches
is
L1 = |Ω| · P r{a random sample from Ω is legal}
(4.5)
Let g = (g1 , · · · , gp ) be a random sample from Ω and xgm denote the main variable of the
local fitness function gm , then we have
1
P r{xgm = |um |} = P r{xgm = |um+1 |} = P r{xgm = |zm |} = ,
3
where |u| denotes the variable corresponding to the literal u.
Let Bm , 0 < m ≤ p be the event that the first m local fitness functions g1 , · · · , gm in
the possible match g = (g1 , · · · , gp ) are mutually distinct. Since in M1 only consecutive
3-modules share variables, we have
Bm = {(g1 , · · · , gm ) : gi 6= gi+1 , 1 ≤ i ≤ m − 1}.
Let bm = P r{gm 6= gm−1 | Bm−1 }, m ≥ 2, and b1 = 1. Notice that B1 = Ω. Then, we have
P r{g = (g1 , · · · , gp )is legal} = P r{Bp }
= P r{g1 6= g2 , g2 6= g3 , · · · , gp−1 6= gp }
= P r{B1 }P r{g2 6= g1 | B1 } · P r{g3 6= g2 | B2 } · · · P r{gp 6= gp−1 | Bp−1 }

(4.6)

= b1 b2 · · · bp
Recalling that xgm denotes the main variable of the local fitness function gm , we have
bp = P r{gp−1 6= gp , xgp−1 = |up | | Bp−1 } + P r{gp−1 6= gp , xgp−1 6= |up | | Bp−1 }
= P r{gp−1 6= gp | Bp−1 , xgp−1 = |up |} · P r{xgp−1 = |up | | Bp−1 } +
P r{gp−1 6= gp | Bp−1 , xgp−1 6= |up |} · P r{xgp−1 6= |up | | Bp−1 }
2
ap + (1 − ap )
=
3
1
= 1 − ap ,
3
320

(4.7)

Phase Transition in NK Landscapes

where ap = P r{xgp−1 = |up | | Bp−1 }. For ap , we have
P r{Bp−1 , xgp−1 = |up |}
P r{Bp−1 }
1
=
(P r{Bp−1 , xgp−1 = |up |, xgp−2 = |up−1 |}
P r{Bp−1 }

ap =

+ P r{Bp−1 , xgp−1 = |up |, xgp−2 6= |up−1 |})
(4.8)
1
=
(P r{xgp−1 = |up | | Bp−1 , xgp−2 = |up−1 |} · P r{Bp−1 , xgp−2 = |up−1 |}
P r{Bp−1 }
+ P r{xgp−1 = |up | | Bp−1 , xgp−2 6= |up−1 |} · P r{Bp−1 , xgp−2 6= |up−1 |})


1
1
1
=
P r{Bp−1 , xgp−2 = |up−1 |} + P r{Bp−1 , xgp−2 6= |up−1 |}
P r{Bp−1 } 2
3
The last equation in the above formula is because that given Bp−1 and xgp−2 = |up−1 |
(or xgp−2 6= |up−1 |), we have two (three, respectively) choices in selecting the local fitness
function gp−1 . Consider the two terms P r{Bp−1 , xgp−2 = |up−1 |} and P r{Bp−1 , xgp−2 6=
|up−1 |} in (4.8), we have
P r{Bp−1 , xgp−2 = |up−1 |}
= P r{gp−2 6= gp−1 | Bp−2 , xgp−2 = |up−1 |} · P r{Bp−2 , xgp−2 = |up−1 |}
2
= Pr{xgp−2 = |up−1 | | Bp−2 } · P r{Bp−2 }
3
2
= ap−1 · P r{Bp−2 }
3

(4.9)

and
P r{Bp−1 , xgp−2 6= |up−1 |}
= P r{gp−2 6= gp−1 | Bp−2 , xgp−2 6= |up−1 |} · P r{Bp−2 , xgp−2 6= |up−1 |}
= P r{xgp−2 6= |up−1 | | Bp−2 } · P r{Bp−2 }

(4.10)

= (1 − ap−1 ) · P r{Bp−2 }
By plugging (4.9) and (4.10) into (4.8), we get


P r{Bp−2 } 1
1
1
ap =
ap−1 + (1 − ap−1 ) =
.
P r{Bp−1 } 3
3
3bp−1
This, together with (4.7), gives us
bp = 1 −

1
.
9bp−1

(4.11)

It is not difficult to show that the sequence {bp } is decreasing and lower bounded by 0.
Letting lim bp = b and taking the limit on both sides, we get
p

b=1−
321

1
,
9b

(4.12)

Gao & Culberson

and thus, b =
thus,

√
3± 5
6 .

In our case, b =

√
3+ 5
6

b 1 · · · bp ≥

since b1 = 1. It follows that bp ≥ b =

To prove that the expected number of legal possible matches L1 for M1 is in Θ
√
3+ 5
6

and

√ !p
3+ 5
.
6

From (4.5), we know that the number of legal possible matches is greater than
√ !p
√ !p
3
+
5
3
+
5
3p
=
.
6
2

let αp = bp −

√
3+ 5
6



(4.13)
√ p 
3+ 5
,
2

= bp − b. From (4.11) and (4.12), we have
αp = bp − b =

which means that the series

p
P

bp−1 − b
≤ dαp−1 , 0 < d < 1,
9bbp−1

αm is convergent. It follows that

m=1

(1 +

αp
α1
) · · · (1 +
)
b
b

converges to a finite positive constant c. Therefore,
b1 · · · bp = (b + α1 ) · · · (b + αp )


αp 
α1 
= bp 1 +
··· 1 +
b
b
√ !p
3+ 5
≤c
6

(4.14)

for sufficient large p and some constant c.
we can show that the number of legal possible matches L2 for M2 is in
Similarly,
 √ 2p+2 
3+ 5
Θ
. Recalling that the number of legal possible matches L for the t-3-module
2
satisfies L1 L2 ≤ L ≤ 27L1 L2 , the second conclusion follows.
The following Lemma calculates the probability that a matching local fitness function
implies the matched 3-module.
Lemma 4.3. Given a 3-module x ∨ y ∨ w, x ∨ y ∨ w̄, and a local fitness function g such
that the main variable xg of g is one of the three Boolean variables |x|, |y|, |w|, let z =
2 + α, 0 ≤ α ≤ 1 be the parameter in the fixed ratio model N (n, 2, z). Then the probability
that g contains the 3-module is
!

1
1
6

p0 =
(1 − α) + α
(4.15)
n−1
28
56
2

322

Phase Transition in NK Landscapes

Proof: Since xg is already one of the variables in the 3-module, the probability that
1
the other two variables are also in the 3-module is n−1
.
( 2 )
Now, assume that the variables of the local fitness function g are the same as the
variables in the 3-module. From the definition of the fixed ratio model, g has two zeros
in its fitness value assignment with probability (1 − α), and has three zeros in its fitness
assignment with probability α. Note that the local fitness function g implies the 3-module
x ∨ y ∨ w, x ∨ y ∨ w̄ if and only if
g(x̄, ȳ, w̄) = 0 and

g(x̄, ȳ, w) = 0.

From the definition of the fixed ratio model, this happens with the probability
1
6


8 (1 − α) + 8 α
2

3

The Lemma follows.
With the above preparation, we can now prove that the average number of t-3-modules
contained in N (n, 2, z) tends to infinity.
Theorem 4.2. Let At be the number of t-3-modules contained in N (n, 2, z) and t =
Θ(ln2 n). Then, if z = 2 + α > 2.837,
lim E{At } = ∞.

n→∞

(4.16)

√

Proof: From Lemma 4.2, there are more than ( 3+2 5 )t legal possible matches for a fixed
t-3-module. From Lemma 4.3, we know that each possible legal match g = {g1 , · · · , gt }
implies the t-3-module with probability pt0 . From the proof of Theorem 10.1 in (Franco &
Gelder, 1998), there are
2t−2 nt−1 (n − t + 1)t
(4.17)

n!
1
6
possible t-3-modules, where nt−1 = (n−t+1)!
. Let r = 28
(1 − α) + 56
α , and write p0 =
1
r. We have
(n−1
2 )
E{At } =

=

=

=
=

!t
√
3+ 5
p0 · 2t−2 nt−1 (n − t + 1)t
2
√ !t
1
3+ 5
r · 2t−2 nt−1 (n − t + 1)t ·
t
n−1
2
2
 !t
√ !t t t
n
2 n (n − t + 1)t
1
3+ 5
2

r ·

n−1
n t
2
4(n − t + 1)
2
2
√ !t t t

t
3+ 5
4 n (n − t + 1)t
n
1
r ·
4(n − t + 1)
2
(n(n − 1))t
n−2
 2
√
1
t
(2(3 + 5)r)t (1 − O
),
4n
n
323

(4.18)

Gao & Culberson

where the fourth equation in (4.18) is due to the fact that for any positive integer n and q
2
such that q < n2 , we have nq e−q /2n ≤ nq ≤ nq . It follows that lim E{At } = ∞ if
n→∞

2(3 +

√

5)r > 1.

(4.19)

Solving the inequality (4.19) gives us α > 0.837, that is, z = 2 + α > 2.837. This proves
Theorem 4.2.
Based on the Chebychev’s inequality, to prove that N (n, 2, z) contains t-3-modules with
probability 1, we need to show that the variance of At , the number of contained t-3-modules,
is o(E{At }). For this purpose, we follow Franco and Gelder’s approach (Lemma 4.1, Franco
& Gelder, 1998) to apply the second moment method (Alon & Spencer, 1992):
Lemma 4.4. (Alon & Spencer, 1992, Ch. 4.3 Cor 3.5) Given a random structure(e.g., a
random CNF formula), let W be the set of substructures under consideration, A(w) be the
set of substructures sharing some clauses with w ∈ W . Let Iw = 1 when w is in the random
structure and 0 otherwise. If
(1) elementsP
of W are symmetric;
(2) µ = E{
Iw } → ∞; and
w∈W
P
(3)
P r(w̄ | w) = o(µ), for each w ∈ W ,
w̄∈A(w)

then as n → ∞, the probability that the random structure contains a substructure tends to
1.
To use the above Lemma to study the 2-SAT sub-problem in NK landscapes, we view
the random structure to be a random instance of N (n, 2, z), and W to be the set of all
t-3-modules which are symmetric by their definitions(Sections 5 and 10, Franco & Gelder,
1998).
Theorem 4.3. If z = 2 + α > 2.837, then N (n, 2, z) is asymptotically insoluble with
probability 1.
Proof:
Let At be the number of t-3-modules implied by N (n, 2, z) and t = O(ln2 n).
Theorem 4.2 shows that lim E{At } = ∞. By Lemma 4.4, it is enough to show that for
n→∞
each w ∈ W ,
X
P r(w̄ | w) = o(E{At }),
(4.20)
w̄∈A(w)

where P r(w̄ | w) is the conditional probability that N (n, 2, z) implies the t-3-module w̄
given that it implies w, and A(w) is the set of all t-3-modules sharing some clauses with w.
Suppose that w̄ shares Q, 1 ≤ Q ≤ 2t clauses with w, and that these Q clauses are
distributed among q 3-modules. Further, let q1 be the number of 3-modules whose two
clauses are both shared and q2 = q − q1 the number of 3-modules that only has one clause
shared.
Let T1 be a 3-module in w̄ that shares exactly one clause with a 3-module T2 in w.
We claim that the conditional probability that T1 is implied by N (n, 2, z) given that w is
implied by N (n, 2, z), is
1
1
α + O( ).
(4.21)
6
n
324

Phase Transition in NK Landscapes

Without loss of generality, assume that T2 = {x∨y∨u, x∨y∨ ū} and T1 = {x∨y∨u, x̄∨y∨ ū}.
Since w is implied by N (n, 2, z), there is a local fitness function g = g(|x|, |y|, |u|) that implies
T2 . The conditional probability that T1 is implied, is less than or equal to P1 + P2 where
P1 is the conditional probability that g also implies the clause x̄ ∨ y ∨ ū given that g implies
T2 , and P2 is the conditional probability that the clause x̄ ∨ y ∨ ū is implied by other local
fitness functions. By the definition of N (n, 2, z), we have that P1 = 61 α. Since a local fitness
function implies x̄ ∨ y ∨ ū only if it has the same variables with g = g(|x|, |y|, |u|), we have
that P2 = O( n1 ). The claim is proved. It follows that, for sufficiently large n,
!t−q
√
 q 2
3+ 5
1
q1
P r{w̄ | w} ≤ c
p0
·1 ·
α
(4.22)
2
6
where p0 is defined in Lemma 4.3 and c is a fixed constant.
Let AQ,q,q2 (w) be the set of t-3-modules that share Q clauses with w such that these Q
clauses are distributed over q different 3-modules. As before, q1 is the number of 3-modules
whose two clauses are both shared and q2 = q − q1 the number of 3-modules that only has
one clause shared. We claim that
|AQ,q,q2 (w)| = |A2q,q,0 (w)|6q2 .

(4.23)

where A2q,q,0 (w) is the set of t-3-modules that share all the 2q clauses in the q 3-modules
with w. Let M = {M1 , · · · , Mt } be a t-3-module in which all the clauses Mi , 1 ≤ i ≤ q
are shared with w. Let M = {M1 , · · · , Mt } be a t-3-module in which all the clauses in
Mi , 1 ≤ i ≤ q1 are shared and each of the 3-modules Mi , q1 + 1 ≤ q1 + q2 has only one
clause shared. Since for each of the q2 3-modules, we have 6 ways to choose the non-shared
clauses, there are 6q2 such t-3-modules M in AQ,q,q2 (w) that correspond to one t-3-module
M in A2q,q,0 . The claims follow. From formula (55) and (56) in (Franco & Gelder, 1998)
and (4.23), it follows that
(
O(t) t−q 2(t−q) q2
2 n
6
, q ≤ p + 1,
n2
|AQ,q,q2 (w)| < O(1)
(4.24)
t−q
2(t−q)
q
2
n
6
, q > p + 1.
n 2

6
1
1
Let r = 28
(1 − α) + 56
α , and write p0 = n−1
r. Then, we have
( 2 )
|AQ,q,q2 (w)|P r{w̄ | w}

√
O(t) t−q 2(t−q) q2 3 + 5 t−q 1 q2
≤ 2 2 n
6 (
p0 ) ( α)
n
2
6
√ !t−q
O(t)
1
3+ 5
≤ 2 2t−q n2(t−q)
r

n−1 t−q
n
2

(4.25)

2

√
O(t) 1
(2(3 + 5)r))t−q
n 4n
√
O(t)
≤
E{At }(2(3 + 5)r))−q , q ≤ p + 3
n

≤

and
|AQ,q,q2 (w)|P r{w̄ | w} ≤ O(1)E{At }(2(3 +
325

√

5)r))−q , q > p + 3.

(4.26)

Gao & Culberson

Therefore,
X
X
P r(w̄ | w) =
|AQ,q,q2 (w)|P r{w̄ | w}
Q,q,q2

w̄∈A(w)

=

t
X

t
X
X X
X X O(t)
√
√
−q
E{At }(2(3 + 5)r)) +
O(1)E{At }(2(3 + 5)r))−q .
n
q
q

Q=1 q≤p+3

Q=1 q>p+3

2

2

(4.27)
Since 2(3 +

√

5)r) > 1 for z > 2.837, we have
X
w̄∈A(w)

P r(w̄ | w) ≤

O(t4 )
E{At } + t3 E{At }(4r)−(p+3)
n

(4.28)

= o(E{At }).
This completes the proof of Theorem 4.3.

5. Experiments
Our study of the threshold phenomena in NK landscapes started with an experimental
investigation. Many of the theoretical results in the previous section are motivated by
the observations made in our experiments. In this section, we describe the approach and
methods we used in the experimental study, and report the results and observations we
have made.
In our experiments, an instance of the NK landscape decision problem is converted to an
equivalent 3-SAT problem, and then the 3-SAT problem is solved using Roberto’s relsat—an
enhanced version of the famous Davis-Putnam algorithm for SAT problems implemented in
C ++ . The source code of relsat can be found at http://www.cs.ubc.ca/ hoos/SATLIB/.
In the experiments, we generated random instances of the NK landscape decision problem from the random model N (n, 2, z). As a result, the equivalent SAT problem for each
random NK landscape instance is a 3-SAT problem with n variables and (on average) zn
clauses. By definition, the parameter z is between 0 and 8. For z ≤ 1, the 3-SAT instance
can be solved easily by setting the literals that correspond to the main variables of the
local fitness function to true. As z increases, we get more and more clauses and the 3-SAT
problem becomes more and more constrained. The aims of the experiments are threefold:(1)Investigating if there exists a threshold phenomenon in the random NK landscape
model; (2) Locating the threshold of the parameter z; and (3)Determining if there are any
hard instances around the threshold.
5.1 Experiments on the Fixed Ratio Model
In this part of the experiments, we generate 100 random instances of N (n, 2, z) for each
of the parameters n = 29 · · · 216 and z = 2.71, 2.72, · · · , 3.00. These instances are then
converted to 3-SAT instances and solved by relsat. Figure 1 shows the fraction of insoluble
instances as a function of the parameter z. It can be seen that there exists a threshold
phenomenon and the threshold is around 2.83. This shows that our upper bound z = 2.837
is very tight.
326

Phase Transition in NK Landscapes

1

0.9

0.8

0.7

n=512
n=1024
n=2048
n=4096
n=8192
n=16384
n=32768
n=65536
z=2.84

0.6

0.5

0.4

0.3

0.2

0.1

0
2.7

2.75

2.8

2.85

2.9

2.95

3

Figure 1: Fractions of insoluble instances(Y-axis) as a function of z (X-axis).

In Figure 2, we plot the square root of the average search cost as a function of the
parameter n. The figure indicates that the average search is in O(n2 ) for any parameter
z. We have also observed that more than 99 percent of the insoluble instances are solved
quickly in the preprocessing stage of relsat. This indicates that there must be some “small”
structures that make the instances insoluble. More detailed experimental results can be
found in Gao’s thesis (Gao, 2001).
5.2 Experiments on the 2-SAT sub-Problem
This is the part of the experiments that motivated our theoretical analyses in Section 4.2.
The idea can be explained as follows. Let
f (x) =

n
X

fi (xi , Π(xi ))

i=1

be an instance of the decision problem of NK landscape and
^
^
ϕ = C1 C2 · · · Cn
the equivalent 3-SAT problem where Ci is the set of 3-clauses equivalent to the local fitness
function fi . For each i, there is a set of 2-clauses Di (possibly empty) implied by Ci . For
example, if Ci has three 3-clauses ((x, y, z), (x, ȳ, z), (x, y, z̄)), then the set of 2-clauses Di
would be ((x, z), (x, y)). The conjunction of Di , denoted by ϕ̄, is a 2-SAT problem. It is
obvious that the original 3-SAT problem ϕ is satisfiable only if the 2-SAT sub-problem ϕ̄ is
satisfiable. In the experiment, we generate instances of the NK landscape N (n, 2, z), convert
327

Gao & Culberson

35
z=2.71
z=2.80
z=2.84
z=2.86
z=2.90

30

25

20

15

10

5

0

0

1

2

3

4

5

6

7
4

x 10

Figure 2: Square root of the average search cost (Y-axis, in seconds) as a function of n
(X-axis).

1

0.9

0.8

0.7

n=512
n=1024
n=2048
n=4096
n=8192
n=16384
n=32768
n=65536
z=2.84

0.6

0.5

0.4

0.3

0.2

0.1

0
2.7

2.75

2.8

2.85

2.9

2.95

3

Figure 3: Fractions of insoluble instances(Y-axis) as a function of z (X-axis) for 2-SAT
sub-problems.

them to the equivalent 3-SAT problems, and extract the 2-SAT sub-problems. These 2-SAT

328

Phase Transition in NK Landscapes

40
z=2.71
z=2.80
z=2.84
z=2.86
z=2.90

35

30

25

20

15

10

5

0

0

1

2

3

4

5

6

7
4

x 10

Figure 4: Square root of the average search cost (Y-axis, in seconds) as a function of n
(X-axis) for 2-SAT sub-problems.

problems are then solved by the relsat solver. If the 2-SAT problem is unsatisfiable, then
the original NK landscape instance is also insoluble.
The experimental settings are the same as those in the experiment on the original
problem. The results are shown in Figures 3-4, in parallel to the Figures 1-2 of the results
on the original 3-SAT problems in Section 5.1. We see that the patterns of insoluble fractions
and search cost are similar to those we found in the original 3-SAT problems. There is a
soluble-insoluble phase transition occurring around 2.83, but the fraction of unsatisfiable
instances is lower than the fraction in the original 3-SAT problems.
We also observed that the average search cost for the 2-SAT sub-problems remains the
same as that for the original 3-SAT problems. This tells us that the difficulty of solving a
soluble instance of NK landscape is almost the same as that of solving a 2-SAT problem, and
hence is easy. Therefore, on average the NK landscape N (n, 2, z) is also easy at parameters
below the threshold where almost all of the instances are soluble.

6. Implications and Conclusions
One of the questions that arises about this work is its implications to the design and analysis of genetic algorithms. NK landscapes were initially conceived as simplified models
of evolutionary landscapes which could be tuned with respect to ruggedness and epistatic
interactions (Kauffman, 1989). In the study of genetic algorithms, NK landscape models
have been used as a prototype and benchmark in the analysis of the performance of different genetic operators and the effects of different encoding methods on the algorithm’s

329

Gao & Culberson

performance (Altenberg, 1997; Hordijk, 1997; Jones, 1995). Kauffman (1993) points out
that the parameters that primarily affect a number of ruggedness measures are n and k.
Nevertheless, the fact that for k ≥ 2 the discrete NK landscape is NP-complete (Wright
et al., 2000) when the neighbors are arbitrarily chosen could be construed as implying that
random landscapes with fixed k are in practice hard.
The results in this paper should serve as a cautionary note that this may not be the
case. Our analyses show that for fixed k the uniform probability model is trivially solvable
as the problem size tends to infinity. For the fixed ratio model, we have derived two upper
bounds for the threshold of the solubility phase transition, and proved that the problem
with the control parameter above the upper bounds can be solved in polynomial time with
probability asymptotic to 1 due to the existence of easy sub-problems such as 2-SAT. A
series of experiments has also been conducted to investigate the hardness of the problem
with the control parameters around and below the threshold. From the experiments, we
have observed that the problem is also easy around and below the threshold.
Our proofs hold only for the decision version of the problem where the component functions are discrete on {0, 1}. The proofs are obtained by noticing that the clustering of
functions, or clauses, on selected subsets of variables implies that the overall problem is
decomposable into independent subproblems, or that the problem contains small substructures that identify the solution. The subproblems are the components of the connection
graph defined in Section 3 and the 2-SAT sub-problems studied in Section 4.2. It is currently unclear to us to what extent our analysis can be extended to the optimization version
of the NK model, and we would like to study this problem further in the future.
In response to the question ‘what are the implications for GAs?’ we suggest the following
speculative line of enquiry. For the discrete model we use, the soluble instances are readily
solved by a standard algorithmic approach based on recognizing the components of the
connection graph. (This should not be a surprise for us as it has been pointed out by
Heckendorn, Rana, and Whitley (1999) that ‘Even relatively old algorithms such as DavisPutnam which are deterministic and exact are orders of magnitude faster than GAs’.) 1 A
similar connectivity can be developed for real valued distributions, for example by capping
the minimum value which we allow a sub-function to take. We can speculate that the
clustering imposed by fixed values of k would also generate localized structures when real
values are applied and when considering optimization instead of decision, but perhaps with
fuzzy boundaries. In fact, this observation is just the flip side of limited epistasis. Genetic
algorithms, or their variants such as the probabilistic model-building algorithms (Larranaga
& Lozano, 2001), designed to mimic natural evolution, are supposed to take advantage of
this situation. So, to the extent that NK landscapes are an accurate reflection of the
features exploited by evolutionary algorithms, we pose the following question. Is it possible
to identify these fuzzy components if they exist, and in doing so design an algorithm that
exploits the same landscape features that the evolutionary algorithms do, but far more
efficiently, as we have done for the uniform discrete decision problem?
These landscapes were designed with the intent of studying limited interactions, and our
results can also be seen as a confirmation that indeed limited epistasis leads to easier problems. In another domain, that of the more traditional research into search and optimization,
1. We thanks an anonymous referee for pointing out to us the work of Heckendorn, et al. (Heckendorn
et al., 1999)

330

Phase Transition in NK Landscapes

there is a need for test bed problems with real world connections which are tunable with
respect to difficulty. NK landscapes might have been such a domain for generating 3-SAT
instances. It is disappointing that for restricted k the instances generated are easy with
high probability.

Acknowledgments
This research supported in part by Natural Sciences and Engineering Research Council
Grant No. OGP8053. We thank the anonymous reviewers for their comments.

References
Achlioptas, D. (1999). Threshold Phenomena in Random Graph Colouring and Satisfiability. Ph.D. thesis, Department of Computer Science, University of Toronto, Toronton,
Canada.
Achlioptas, D. (2001). A survey of lower bounds for random 3-sat via differential equations.
Theoretical Computer Science, 265, 159–185.
Achlioptas, D., Kirousis, L., Kranakis, E., Krizanc, D., & Molloy, M. (1997). Random
constraint satisfaction: A more accurate picture. In Proceedings of CP97, pp. 107–
120. Springer.
Alon, N., & Spencer, J. (1992). The Probabilistic Method. Wiley, New York.
Altenberg, L. (1997). Nk fitness landscapes. In Back, T., Fogel, D., & Michalewicz, Z.
(Eds.), Handbook of Evolutionary Computation. Oxford University Press, New York.
Cheeseman, P., Kanefsky, B., & Taylor, W. (1991). Where the really hard problems are. In
Proceedings of the 12th International Joint Conference on Artificial Intelligence, pp.
331–337. Morgan Kaufmann.
Cook, S., & Mitchell, D. (1997). Finding hard instances of the satisfiability problem: A
survey. In Du, Gu, & Pardalos (Eds.), Satisfiability Problem: Theory and Applications,
Vol. 35 of DIMACS Series in Discrete Mathematics and Theoretical Computer Science.
American Mathematical Society.
Culberson, J., & Gent, I. (2001). Frozen development in graph coloring. Theoretical Computer Science, 265 (1-2), 227–264.
Dubois, O. (2001). Upper bounds on the satisfiability threshold. Theoretical Computer
Science, 265 (1-2), 187–197.
Franco, J., & Gelder, A. (1998). A perspective on certain polynomial time solvable classes
of satisfiability. Discrete Applied Mathematics, to appear.
Franco, J., & Paul, M. (1983). Probabilistic analysis of the davis-putnam procedure for
solving satisfiability. Discrete Applied Mathematics, 5, 77–87.
Freeman, J. (1996). Hard random 3-sat problems and the davis-putman procedure. Artificial
Intelligence, 81, 183–198.

331

Gao & Culberson

Friedgut, E. (1999). Sharp thresholds of graph properties and the k-sat problem. J. Amer.
Math. Soc., 1017–1054.
Friedgut, E., & Kalai, G. (1996). Every monotone graph property has a sharp threshold.
Proc. Amer. Math. Soc., 2993–3002.
Frieze, A., & Suen, S. (1996). Analysis of two simple heuristics on a random instance of
k-sat. J. of Algorithm, 20 (2), 312–355.
Gao, Y. (2001). Threshold phenomena in NK landscapes. Master’s thesis, Department of
Computing Science, University of Alberta, Edmonton, Alberta, Canada.
Gent, I., MacIntyre, I., Prosser, P.and Smith, B., & Walsh, T. (1998). Random constraint
satisfaction: Flaws and structure. Tech. rep. APES-08-1998, APES Research Group.
Heckendorn, R., Rana, S., & Whitley, D. (1999). Polynomial time summary statistics for a
generalization of maxsat. In GECCO99: Proceedings of the Genetic and Evolutinary
Computation Conference, pp. 281–288. Morgan Kaufmann.
Hordijk, W. (1997). A measure of landscapes. Evolutionary Computation, 4 (4), 335–360.
Jones, T. (1995). Evolutionary Algorithms, Fitness Landscapes and Search. Ph.D. thesis,
University of New Mexico, Albuquerque, NM.
Kauffman, S. (1989). Adaptation on rugged fitness landscapes. In Stein, D. (Ed.), Lectures
in the Sciences of Complexity, Santa Fe Institute Studies in the Sciences of Complexity,
pp. 527–618. Addison Wesley.
Kauffman, S. (1993). The Origins of Order: Self-organization and Selection in Evolution.
Oxford University Press, Inc.
Kirkpatrick, S., & Selman, B. (1994). Critical behavior in the satisfiability of random
boolean expressions. Science, 264, 1297–1301.
Kirousis, L., P.Kranakis, D.Krizanc, & Y.Stamation (1994). Approximating the unsatisfiability threshold of random formulas. Random Structures and Algorithms, 12 (3),
253–269.
Larranaga, P., & Lozano, J. (2001). Estimation of Distribution Algorithms: A New Tool for
Evolutinary Computation. Kluwer Academic Publishers, New York.
Mitchell, D., Selman, B., & Levesque, H. (1992). Hard and easy distributions of sat problems.
In Proceedings of the 10th Natl. Conf on Artificial Intelligence, pp. 459–465. AAAI
Press.
Vandegriend, B., & Culberson, J. (1998). The Gn,m phase transition is not hard for the
Hamiltonian Cycle problem. Journal of Artificial Intelligence Research, 9, 219–245.
Weinberger, E. D. (1996). Np completeness of kauffman’s NK model, a tunable rugged
fitness landscape. Tech. rep. 96-02-003, Santa Fe Institute, Santa Fe.
Wright, A. H., Thompson, R. K., & Zhang, J. (2000). The computational complexity of NK
fitness functions. IEEE Transactions on Evolutionary Computation, 4 (4), 373–379.

332

Journal of Artificial Intelligence Research 17 (2002) 229-264

Submitted 12/01; published 9/02

A Knowledge Compilation Map
Adnan Darwiche

darwiche@cs.ucla.edu

Computer Science Department
University of California, Los Angeles
Los Angeles, CA 90095, USA

Pierre Marquis

marquis@cril.univ-artois.fr

Université d’Artois
F-62307, Lens Cedex, France

Abstract
We propose a perspective on knowledge compilation which calls for analyzing different compilation approaches according to two key dimensions: the succinctness of the target compilation
language, and the class of queries and transformations that the language supports in polytime.
We then provide a knowledge compilation map, which analyzes a large number of existing target compilation languages according to their succinctness and their polytime transformations and
queries. We argue that such analysis is necessary for placing new compilation approaches within
the context of existing ones. We also go beyond classical, flat target compilation languages based
on CNF and DNF, and consider a richer, nested class based on directed acyclic graphs (such as
OBDDs), which we show to include a relatively large number of target compilation languages.

1. Introduction
Knowledge compilation has emerged recently as a key direction of research for dealing with the
computational intractability of general propositional reasoning (Darwiche, 1999; Cadoli & Donini,
1997; Boufkhad, Grégoire, Marquis, Mazure, & Saı̈s, 1997; Khardon & Roth, 1997; Selman &
Kautz, 1996; Schrag, 1996; Marquis, 1995; del Val, 1994; Dechter & Rish, 1994; Reiter & de
Kleer, 1987). According to this direction, a propositional theory is compiled off-line into a target
language, which is then used on-line to answer a large number of queries in polytime. The key
motivation behind knowledge compilation is to push as much of the computational overhead into
the off-line phase, which is amortized over all on-line queries. But knowledge compilation can serve
other important purposes as well. For example, target compilation languages and their associated
algorithms can be very simple, allowing one to develop on-line reasoning systems for simple software
and hardware platforms. Moreover, the simplicity of algorithms that operate on compiled languages
help in streamlining the effort of algorithmic design into a single task: that of generating the smallest
compiled representations possible, as that turns out to be the main computational bottleneck in
compilation approaches.
There are three key aspects of any knowledge compilation approach: the succinctness of the
target language into which the propositional theory is compiled; the class of queries that can be
answered in polytime based on the compiled representation; and the class of transformations that
can be applied to the representation in polytime. The AI literature has thus far focused mostly on
target compilation languages which are variations on DNF and CNF formulas, such as Horn theories
and prime implicates. Moreover, it has focused mostly on clausal entailment queries, with very little
discussion of tractable transformations on compiled theories.
The goal of this paper is to provide a broad perspective on knowledge compilation by considering
a relatively large number of target compilation languages and analyzing them according to their
succinctness and the class of queries/transformations that they admit in polytime.

c
°2002
AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Darwiche & Marquis

Instead of focusing on classical, flat target compilation languages based on CNF and DNF, we
consider a richer, nested class based on representing propositional sentences using directed acyclic
graphs, which we refer to as NNF. We identify a number of target compilation languages that have
been presented in the AI, formal verification, and computer science literature and show that they
are special cases of NNF. For each such class, we list the extra conditions that need to be imposed
on NNF to obtain the specific class, and then identify the set of queries and transformations that the
class supports in polytime. We also provide cross-rankings of the different subsets of NNF, according
to their succinctness and the polytime operations they support.
The main contribution of this paper is then a map for deciding the target compilation language
that is most suitable for a particular application. Specifically, we propose that one starts by identifying the set of queries and transformations needed for their given application, and then choosing
the most succinct language that supports these operations in polytime.
This paper is structured as follows. We start by formally defining the NNF language in Section 2,
where we list a number of conditions on NNF that give rise to a variety of target compilation languages.
We then study the succinctness of these languages in Section 3 and provide a cross-ranking that
compares them according to this measure. We consider a number of queries and their applications in
Section 4 and compare the different target compilation languages according to their tractability with
respect to these queries. Section 5 is then dedicated to a class of transformations, their applications,
and their tractability with respect to the different target compilation languages. We finally close in
Section 6 by some concluding remarks. Proofs of all theorems are delegated to Appendix A.

2. The NNF Language
We consider more than a dozen languages in this paper, all of which are subsets of the NNF language,
which is defined formally as follows (Darwiche, 1999, 2001a).
Definition 2.1 Let PS be a denumerable set of propositional variables. A sentence in NNFP S is
a rooted, directed acyclic graph (DAG) where each leaf node is labeled with true, false, X or ¬X,
X ∈ P S; and each internal node is labeled with ∧ or ∨ and can have arbitrarily many children.
The size of a sentence Σ in NNFP S , denoted | Σ |, is the number of its DAG edges. Its height is the
maximum number of edges from the root to some leaf in the DAG.
Figure 1 depicts a sentence in NNF, which represents the odd parity function (we omit reference
to variables PS when no confusion is anticipated). Any propositional sentence can be represented
as a sentence in NNF, so the NNF language is complete.
It is important here to distinguish between a representation language and a target compilation
language. A representation language is one which we expect humans to read and write with some
ease. The language of CNF is a popular representation language, and so is the language of Horn
clauses (especially when expressed in rules form). On other hand, a target compilation language does
not need to be suitable for human specification and interpretation, but should be tractable enough
to permit a non-trivial number of polytime queries and/or transformations. We will consider a
number of target compilation languages that do not qualify as representation languages from this
perspective, as they are not suitable for humans to construct or interpret. We will also consider a
number of representation languages that do not qualify as target compilation languages.1
A formal characterization of representation languages is outside the scope of this paper. But for
a language to qualify as a target compilation language, we will require that it permits a polytime
clausal entailment test. Note that a polytime consistency test is not sufficient here, as only one
consistency test on a given theory does not justify its compilation. Given this definition, NNF does
1. It appears that when proposing target compilation languages in the AI literature, there is usually an implicit
requirement that the proposed language is also a representation language. As we shall see later, however, the
most powerful target compilation languages are not suitable for humans to specify or interpret directly.

230

A Knowledge Compilation Map

Decomposability

(a)

(b)

or

or

or

and
A,B

Smoothness

(c)

Determinism

or
and

and

C,D

or

or

or

or

and

and
or

or

or

or

and
or

or

or

A,B
A,B

and

and

and

and

and

and

and

and

and

and

and

and

and

and

and

and

and

and

and

and

and

and

and

and

¬A

B

¬B

A

C

¬D

D

¬C

¬A

B

¬B

A

C

¬D

D

¬C

¬A

B

¬B

A

C

¬D

D

¬C

Figure 1: A sentence in NNF. Its size is 30 and height is 4.
not qualify as a target compilation language unless P=NP (Papadimitriou, 1994), but many of its
subsets do. We define a number of these subsets below, each of which is obtained by imposing
further conditions on NNF.
We will distinguish between two key subsets of NNF: flat and nested subsets. We first consider
flat subsets, which result from imposing combinations of the following properties:
• Flatness: The height of each sentence is at most 2. The sentence in Figure 3 is flat, but the
one in Figure 1 is not.
• Simple-disjunction: The children of each or-node are leaves that share no variables (the
node is a clause).
• Simple-conjunction: The children of each and-node are leaves that share no variables (the
node is a term). The sentence in Figure 3 satisfies this property.
Definition 2.2 The language f-NNF is the subset of NNF satisfying flatness. The language CNF is
the subset of f-NNF satisfying simple–disjunction. The language DNF is the subset of f-NNF satisfying
simple–conjunction.
CNF does not permit a polytime clausal entailment test (unless P=NP) and, hence, does not qualify
as a target compilation language. But its dual DNF does.
The following subset of CNF, prime implicates, has been quite influential in computer science:
Definition 2.3 The language PI is the subset of CNF in which each clause entailed by the sentence
is subsumed by a clause that appears in the sentence; and no clause in the sentence is subsumed by
another.
A dual of PI, prime implicants IP, can also be defined.
Definition 2.4 The language IP is the subset of DNF in which each term entailing the sentence
subsumes some term that appears in the sentence; and no term in the sentence is subsumed by
another term.
There has been some work on representing the set of prime implicates of a propositional theory in
a compact way, allowing an exponential number of prime implicates to be represented in polynomial
space in certain cases—see for example the TRIE representation in (de Kleer, 1992), the ZBDD
representation used in (Simon & del Val, 2001), and the implicit representation based on metaproducts, as proposed in (Madre & Coudert, 1992). These representations are different from the
language PI in the sense that they do not necessarily support the same queries and transformations
231

Darwiche & Marquis

that we report in Tables 5 and 7. They also exhibit different succinctness relationships than the
ones we report in Table 3.
Horn theories (and renamable Horn theories) represent another target compilation subset of CNF,
but we do not consider it here since we restrict our attention to complete languages L only, i.e., we
require that every propositional sentence is logically equivalent to an element of L.
We now consider nested subsets of the NNF language, which do not impose any restriction on
the height of a sentence. Instead, these subsets result from imposing one or more of the following
conditions: decomposability, determinism, smoothness, decision, and ordering. We start by defining
the first three properties. From here on, if C is a node in an NNF, then Vars(C) denotes the set of
all variables that label the descendants of node C. Moreover, if Σ is an NNF sentence rooted at C,
then Vars(Σ) is defined as Vars(C).
• Decomposability (Darwiche, 1999, 2001a). An NNF satisfies this property if for each conjunction C in the NNF, the conjuncts of C do not share variables. That is, if C1 , . . . , Cn are
the children of and-node C, then Vars(Ci ) ∩ Vars(Cj ) = ∅ for i 6= j. Consider the and-node
marked in Figure 1(a). This node has two children, the first contains variables A, B while the
second contains variables C, D. This and-node is then decomposable since the two children do
not share variables. Each other and-node in Figure 1(a) is also decomposable and, hence, the
NNF in this figure is decomposable.
• Determinism (Darwiche, 2001b): An NNF satisfies this property if for each disjunction C
in the NNF, each two disjuncts of C are logically contradictory. That is, if C1 , . . . , Cn are
the children of or-node C, then Ci ∧ Cj |= false for i 6= j. Consider the or-node marked
in Figure 1(b), which has two children corresponding to sub-sentences ¬A ∧ B and ¬B ∧ A.
The conjunction of these two sub-sentences is logically contradictory. The or-node is then
deterministic and so are the other or-nodes in Figure 1(b). Hence, the NNF in this figure is
deterministic.
• Smoothness (Darwiche, 2001b): An NNF satisfies this property if for each disjunction C in the
NNF, each disjunct of C mentions the same variables. That is, if C1 , . . . , Cn are the children of
or-node C, then Vars(Ci ) = Vars(Cj ) for i 6= j. Consider the marked or-node in Figure 1(c).
This node has two children, each of which mentions variables A, B. This or-node is then
smooth and so are the other or-nodes in Figure 1(c). Hence, the NNF in this figure is smooth.
It is hard to ensure decomposability. It is also hard to ensure determinism while preserving decomposability. Yet any sentence in NNF can be smoothed in polytime, while preserving decomposability
and determinism. Preserving flatness, however, may blow-up the size of given NNF. Hence, smoothness is not that important from a complexity viewpoint unless we have flatness.
The properties of decomposability, determinism and smoothness lead to a number of interesting
subsets of NNF.
Definition 2.5 The language DNNF is the subset of NNF satisfying decomposability; d-NNF is the subset satisfying determinism; s-NNF is the subset satisfying smoothness; d-DNNF is the subset satisfying
decomposability and determinism; and sd-DNNF is the subset satisfying decomposability, determinism
and smoothness.
Note that DNF is a strict subset of DNNF (Darwiche, 1999, 2001a). The following decision property
comes from the literature on binary decision diagrams (Bryant, 1986).
Definition 2.6 (Decision) A decision node N in an NNF sentence is one which is labeled with true,
false, or is an or-node having the form (X ∧ α) ∨ (¬X ∧ β), where X is a variable, α and β are
decision nodes. In the latter case, dVar (N ) denotes the variable X.
Definition 2.7 The language BDD is the set of NNF sentences, where the root of each sentence is a
decision node.
232

A Knowledge Compilation Map

or

X1
and

and

X1 ¬ X1
or
and
¬ X2

or

X2
or
and

¬ X3

and
X3

true

and

and

X2

X2
and
¬ X2

X2

X3

X3

1

0

or
and

and
X3

¬ X3

false

Figure 2: On the left, a sentence in the BDD language. On the right, its corresponding binary decision
diagram.

The NNF sentence in Figure 2 belongs to the BDD subset.
The BDD language corresponds to binary decision diagrams (BDDs), as known in the formal
verification literature (Bryant, 1986). Binary decision diagrams are depicted using a more compact
notation though: the labels true and false are denoted by 1 and 0, respectively; and each decision
or
and

and

X

β . The BDD sentence on the left of Figure 2 corresponds to the
node X α ¬X β is denoted by α
binary decision diagram on the right of Figure 2. Obviously enough, every NNF sentence that satisfies
the decision property is also deterministic. Therefore, BDD is a subset of d-NNF.
As we show later, BDD does not qualify as a target compilation language (unless P=NP), but the
following subset does.

Definition 2.8 FBDD is the intersection of DNNF and BDD.
That is, each sentence in FBDD is decomposable and satisfies the decision property. The FBDD language
corresponds to free binary decision diagrams (FBDDs), as known in formal verification (Gergov &
Meinel, 1994a). An FBDD is usually defined as a BDD that satisfies the read-once property: on
each path from the root to a leaf, a variable can appear at most once. FBDDs are also known as
read-once branching programs in the theory literature. Imposing the read-once property on a BDD
is equivalent to imposing the decomposability property on its corresponding BDD sentence.
A more influential subset of the BDD language is obtained by imposing the ordering property:
Definition 2.9 (Ordering) Let < be a total ordering on the variables PS. The language OBDD<
is the subset of FBDD satisfying the following property: if N and M are or-nodes, and if N is an
ancestor of node M , then dVar (N ) < dVar (M ).
Definition 2.10 The language OBDD is the union of all OBDD< languages.
The OBDD language corresponds to the well–known ordered binary decision diagrams (OBDDs)
(Bryant, 1986).
Our final language definition is as follows:
Definition 2.11 MODS is the subset of DNF where every sentence satisfies determinism and smoothness.
233

Darwiche & Marquis

or
and

X

Y

and

Z

and

and

¬X ¬Y ¬Z

Figure 3: A sentence in language MODS.

NNF
CO,

d-NNF

s-NNF

CE, ME

DNNF

f-NNF

VA, IM, CT

BDD

d-DNNF

EQ?

VA, IM

FBDD

EQ?

DNF

sd-DNNF

CNF

EQ

OBDD
SE

OBDD<

EQ, SE

VA, IM, EQ, SE

MODS

IP

CO , CE, EQ, SE, ME

PI

Figure 4: The set of DAG-based languages considered in this paper. An edge L1 → L2 means that
L1 is a proper subset of L2 . Next to each subset, we list the polytime queries supported
by the subset but not by any of its ancestors (see Section 4).

Figure 3 depicts a sentence in MODS. As we show later, MODS is the most tractable NNF subset we
shall consider (together with OBDD< ). This is not surprising since from the syntax of a sentence in
MODS, one can immediately recover the sentence models.
The languages we have discussed so far are depicted in Figure 4, where arrows denote set inclusion.
Table 1 lists the acronyms of all of these languages, together with their descriptions. Table 2 lists
the key language properties discussed in this section, together with a short description of each.

3. On the Succinctness of Compiled Theories
We have discussed more than a dozen subsets of the NNF language. Some of these subsets are well
known and have been studied extensively in the computer science literature. Others, such as DNNF
(Darwiche, 2001a, 1999) and d-DNNF (Darwiche, 2001b), are relatively new. The question now is:
What subset should one adopt for a particular application? As we argue in this paper, that depends

234

A Knowledge Compilation Map

Acronym
NNF
DNNF
d-NNF
s-NNF
f-NNF
d-DNNF
sd-DNNF
BDD
FBDD
OBDD
OBDD<
DNF
CNF
PI
IP
MODS

Description
Negation Normal Form
Decomposable Negation Normal Form
Deterministic Negation Normal Form
Smooth Negation Normal Form
Flat Negation Normal Form
Deterministic Decomposable Negation Normal Form
Smooth Deterministic Decomposable Negation Normal Form
Binary Decision Diagram
Free Binary Decision Diagram
Ordered Binary Decision Diagram
Ordered Binary Decision Diagram (using order <)
Disjunctive Normal Form
Conjunctive Normal Form
Prime Implicates
Prime Implicants
Models

Table 1: Language acronyms.

Property
Flatness
Simple Disjunction
Simple Conjunction
Decomposability
Determinism
Smoothness
Decision
Ordering

Short Description
The height of NNF is at most 2
Every disjunction is a clause, where literals share no variables
Every conjunction is a term, where literals share no variables
Conjuncts do not share variables
Disjuncts are logically disjoint
Disjuncts mention the same set of variables
A node of the form true, false, or (X ∧ α ∨ ¬X ∧ β),
where X is a variable and α, β are decision nodes
Decision variables appear in the same order on any path in the NNF

Table 2: Language properties.

235

Darwiche & Marquis

on three key properties of the language: its succinctness, the class of tractable queries it supports,
and the class of tractable transformations it admits.
Our goal in this and the following sections is to construct a map on which we place different
subsets of the NNF language according to the above criteria. This map will then serve as a guide to
system designers in choosing the target compilation language most suitable to their application. It
also provides an example paradigm for studying and evaluating further target compilation languages.
We start with a study of succinctness2 in this section (Gogic, Kautz, Papadimitriou, & Selman, 1995).
Definition 3.1 (Succinctness) Let L1 and L2 be two subsets of NNF. L1 is at least as succinct
as L2 , denoted L1 ≤ L2 , iff there exists a polynomial p such that for every sentence α ∈ L2 , there
exists an equivalent sentence β ∈ L1 where |β| ≤ p(|α|). Here, |α| and |β| are the sizes of α and β,
respectively.
We stress here that we do not require that there exists a function that computes β given α in
polytime; we only require that a polysize β exists. Yet, our proofs in Appendix A contain specific
algorithms for computing β from α in certain cases. The relation ≤ is clearly reflexive and transitive,
hence, a pre-ordering. One can also define the relation <, where L1 < L2 iff L1 ≤ L2 and L2 6≤ L1 .
Proposition 3.1 The results in Table 3 hold.
An occurrence of ≤ in the cell of row r and column c of Table 3 means that the fragment Lr
given at row r is at least as succinct as the fragment Lc given at column c. An occurrence of 6≤ (or
6≤∗ ) means that Lr is not at least as succinct as Lc (provided that the polynomial hierarchy does
not collapse in the case of 6≤∗ ). Finally, the presence of a question mark reflects our ignorance about
whether Lr is at least as succinct as Lc . Figure 5 summarizes the results of Proposition 3.1 in terms
of a directed acyclic graph.
A classical result in knowledge compilation states that it is not possible to compile any propositional formula α into a polysize data structure β such that: α and β entail the same set of clauses,
and clausal entailment on β can be decided in time polynomial in its size, unless NP ⊆ P/poly
(Selman & Kautz, 1996; Cadoli & Donini, 1997). This last assumption implies the collapse of the
polynomial hierarchy at the second level (Karp & Lipton, 1980), which is considered very unlikely.
We use this classical result from knowledge compilation in some of our proofs of Proposition 3.1,
which explains why some of its parts are conditioned on the polynomial hierarchy not collapsing.
We have excluded the subsets BDD, s-NNF, d-NNF and f-NNF from Table 3 since they do not
qualify as target compilation languages (see Section 4). We kept NNF and CNF though given their
importance. Consider Figure 5 which depicts Table 3 graphically. With the exception of NNF and
CNF, all other languages depicted in Figure 5 qualify as target compilation languages. Moreover, with
the exception of language PI, DNNF is the most succinct among all target compilation languages—we
know that PI is not more succinct than DNNF, but we do not know whether DNNF is more succinct
than PI.
In between DNNF and MODS, there is a succinctness ordering of target compilation languages:
DNNF <

d-DNNF <

FBDD <

OBDD <

OBDD<

< MODS.

DNNF is obtained by imposing decomposability on NNF; d-DNNF by adding determinism; FBDD by
adding decision; and OBDD and OBDD< by adding ordering (w.r.t. any total ordering on PS in the
first case and a specific one in the second case). Adding each of these properties reduces language
succinctness (assuming that the polynomial hierarchy does not collapse).
One important fact to stress here is that adding smoothness to d-DNNF does not affect its succinctness: the sd-DNNF and d-DNNF languages are equally succinct. It is also interesting to compare
2. A more general notion of space efficiency (model preservation for polysize reductions) exists (Cadoli, Donini,
Liberatore, & Schaerf, 1996), but we do not need its full generality here.

236

A Knowledge Compilation Map

L
NNF
DNNF
d-DNNF
sd-DNNF
FBDD
OBDD
OBDD<
DNF
CNF
PI
IP
MODS

NNF
≤
6≤∗
6≤∗
6≤∗
6≤
6≤
6≤
6≤
6≤
6≤
6≤
6≤

DNNF
≤
≤
6≤∗
6≤∗
6≤
6≤
6≤
6≤
6≤
6≤
6≤
6≤

d-DNNF
≤
≤
≤
≤
6≤
6≤
6≤
6≤
6≤
6≤
6≤
6≤

sd-DNNF
≤
≤
≤
≤
6≤
6≤
6≤
6≤
6≤
6≤
6≤
6≤

FBDD
≤
≤
≤
≤
≤
6≤
6≤
6≤
6≤
6≤
6≤
6≤

OBDD
≤
≤
≤
≤
≤
≤
6≤
6≤
6≤
6≤
6≤
6≤

OBDD<
≤
≤
≤
≤
≤
≤
≤
6≤
6≤
6≤
6≤
6≤

DNF
≤
≤
6≤∗
6≤∗
6≤
6≤
6≤
≤
6≤
6≤
6≤
6≤

CNF
≤
6≤∗
6≤∗
6≤∗
6≤
6≤
6≤
6≤
≤
6≤
6≤
6≤

PI
≤
?
?
?
6≤
6≤
6≤
6≤
≤
≤
6≤
6≤

IP
≤
≤
?
?
6≤
6≤
6≤
≤
6≤
6≤
≤
6≤

MODS
≤
≤
≤
≤
≤
≤
≤
≤
≤
?
≤
≤

Table 3: Succinctness of target compilation languages. ∗ means that the result holds unless the
polynomial hierarchy collapses.

NNF
DNNF
sd-DNNF

=

CNF

d-DNNF
DNF

FBDD

PI
OBDD
IP
OBDD<
MODS

Figure 5: An edge L1 → L2 indicates that L1 is strictly more succinct than L2 : L1 < L2 , while
L1 = L2 indicates that L1 and L2 are equally succinct: L1 ≤ L2 and L2 ≤ L1 . Dotted
arrows indicate unknown relationships; for instance, the dotted arrow from DNNF to PI
means that we do not know whether DNNF is at least as succinct as PI. Some of the edges
are conditioned on the polynomial hierarchy not collapsing—see Table 3.

sd-DNNF (which is more succinct than the influential FBDD, OBDD and OBDD< languages) with MODS,
which is a most tractable language. Both sd-DNNF and MODS are smooth, deterministic and decomposable. MODS, however, is flat and obtains its decomposability from the stronger condition
of simple-conjunction. Therefore, sd-DNNF can be viewed as the result of relaxing from MODS the
flatness and simple-conjunction conditions, while maintaining decomposability, determinism and
smoothness. Relaxing these conditions moves the language three levels up the succinctness hierarchy, although it compromises only the polytime test for sentential entailment and possibly the one
for equivalence as we show in Section 4.

237

Darwiche & Marquis

4. Querying a Compiled Theory
In evaluating the suitability of a target compilation language to a particular application, the succinctness of the language must be balanced against the set of queries and transformations that it
supports in polytime. We consider in this section a number of queries, each of which returns valuable information about a propositional theory, and then identify target compilation languages which
provide polytime algorithms for answering such queries. We restrict our attention in this paper to
the existence of polytime algorithms for answering queries, but we do not present the algorithms
themselves. The interested reader is referred to (Darwiche, 2001a, 2001b, 1999; Bryant, 1986) for
some of these algorithms and to the proofs of theorems in Appendix A for others.
The queries we consider are tests for consistency, validity, implicates (clausal entailment), implicants, equivalence, and sentential entailment. We also consider counting and enumerating theory
models; see Table 4. One can also consider computing the probability of a propositional sentence,
assuming that all variables are probabilistically independent. For the subsets we consider, however,
this can be done in polytime whenever models can be counted in polytime.
From here on, L denotes a subset of language NNF.
Definition 4.1 (CO, VA) L satisfies CO (VA) iff there exists a polytime algorithm that maps
every formula Σ from L to 1 if Σ is consistent (valid), and to 0 otherwise.
One of the main applications of compiling a theory is to enhance the efficiency of answering
clausal entailment queries:
Definition 4.2 (CE) L satisfies CE iff there exists a polytime algorithm that maps every formula
Σ from L and every clause γ from NNF to 1 if Σ |= γ holds, and to 0 otherwise.
A key application of clausal entailmentVis in testing equivalence. Specifically, suppose we have a
designVexpressed as a set of clauses ∆d = i αi and a specification expressed also as a set of clauses
∆s = j βj , and we want to test whether the design and specification are equivalent. By compiling
each of ∆d and ∆s to targets Γd and Γs that support a polytime clausal entailment test, we can test
the equivalence of ∆d and ∆s in polytime. That is, ∆d and ∆s are equivalent iff Γd |= βj for all j
and Γs |= αi for all i.
A number of the target compilation languages we shall consider support a direct polytime equivalent test:
Definition 4.3 (EQ, SE) L satisfies EQ (SE) iff there exists a polytime algorithm that maps every
pair of formulas Σ, Φ from L to 1 if Σ ≡ Φ (Σ |= Φ) holds, and to 0 otherwise.
Note that sentential entailment (SE) is stronger than clausal entailment and equivalence. Therefore,
if a language L satisfies SE, it also satisfies CE and EQ.
For completeness, we consider the following dual to CE:
Definition 4.4 (IM) L satisfies IM iff there exists a polytime algorithm that maps every formula
Σ from L and every term γ from NNF to 1 if γ |= Σ holds, and to 0 otherwise.
Finally, we consider counting and enumerating models:
Definition 4.5 (CT) L satisfies CT iff there exists a polytime algorithm that maps every formula
Σ from L to a nonnegative integer that represents the number of models of Σ (in binary notation).
Definition 4.6 (ME) L satisfies ME iff there exists a polynomial p(., .) and an algorithm that
outputs all models of an arbitrary formula Σ from L in time p(n, m), where n is the size of Σ and
m is the number of its models (over variables occurring in Σ).

238

A Knowledge Compilation Map

Notation
CO
VA
CE
IM
EQ
SE
CT
ME

Query
polytime consistency check
polytime validity check
polytime clausal entailment check
polytime implicant check
polytime equivalence check
polytime sentential entailment check
polytime model counting
polytime model enumeration

Table 4: Notations for queries.

L
NNF
DNNF
d-NNF
s-NNF
f-NNF
d-DNNF
sd-DNNF
BDD
FBDD
OBDD
OBDD<
DNF
CNF
PI
IP
MODS

CO
◦
√
◦
◦
◦
√
√
◦
√
√
√
√
◦
√
√
√

VA
◦
◦
◦
◦
◦
√
√

CE
◦
√

◦
√
√
√

◦
√
√
√
√

◦
√
√
√
√

◦
◦
◦
√
√

◦
√
√
√

IM
◦
◦
◦
◦
◦
√
√

SE
◦
◦
◦
◦
◦
◦
◦
◦
◦
◦
√

CT
◦
◦
◦
◦
◦
√
√

ME
◦
√

◦
√
√
√

EQ
◦
◦
◦
◦
◦
?
?
◦
?
√
√

◦
√
√
√

◦
√
√
√
√

◦
◦
√
√
√

◦
◦
√
√
√

◦
◦
◦
◦
√

◦
√
√
√
√

◦
◦
◦
√
√

◦
√
√
√

Table 5: Subsets of the NNF language and their corresponding polytime queries.
and ◦ means “does not satisfy unless P = NP.”

√

means “satisfies”

Table 4 summarizes the queries we are interested in and their acronyms.
The following proposition states what we know about the availability of polytime algorithms for
answering the above queries, with respect to all languages we introduced in Section 2.
Proposition 4.1 The results in Table 5 hold.
The results of Proposition 4.1 are summarized in Figure 4. One can draw a number of conclusions
based on the results in this figure. First, NNF, s-NNF, d-NNF, f-NNF, and BDD fall in one equivalence
class that does not support any polytime queries and CNF satisfies only VA and IM; hence, none
of them qualifies as a target compilation language in this case. But the remaining languages all
support polytime tests for consistency and clausal entailment. Therefore, simply imposing either
of smoothness (s-NNF), determinism (d-NNF), flatness (f-NNF), or decision (BDD) on the NNF language does not lead to tractability with respect to any of the queries we consider—neither of these
properties seem to be significant in isolation. Decomposability (DNNF), however, is an exception and
leads immediately to polytime tests for both consistency and clausal entailment, and to a polytime
algorithm for model enumeration.
239

Darwiche & Marquis

Recall the succinctness ordering DNNF < d-DNNF < FBDD < OBDD < OBDD< < MODS
from Figure 5. By adding decomposability (DNNF), we obtain polytime tests for consistency and
clausal entailment, in addition to a polytime model enumeration algorithm. By adding determinism
to decomposability (d-DNNF), we obtain polytime tests for validity, implicant and model counting,
which are quite significant. It is not clear, however, whether the combination of decomposability and
determinism leads to a polytime test for equivalence. Moreover, adding the decision property on top
of decomposability and determinism (FBDD) does not appear to increase tractability with respect to
the given queries3 , although it does lead to reducing language succinctness as shown in Figure 5. On
the other hand, adding the ordering property on top of decomposability, determinism and decision,
leads to polytime tests for equivalence (OBDD and OBDD< ) as well as sentential entailment provided
that the ordering < is fixed (OBDD< ).
As for the succinctness ordering NNF < DNNF < DNF < IP < MODS from Figure 5, note that
DNNF is obtained by imposing decomposability on NNF, while DNF is obtained by imposing flatness
and simple-conjunction (which is stronger than decomposability). What is interesting is that DNF is
less succinct than DNNF, yet does not support any more polytime queries; see Figure 4. However, the
addition of smoothness (and determinism) on top of flatness and simple-conjunction (MODS) leads to
five additional polytime queries, including equivalence and entailment tests.4
We close this section by noting that determinism appears to be necessary (but not sufficient) for
polytime model counting: only deterministic languages, d-DNNF, sd-DNNF, FBDD, OBDD, OBDD< and
MODS, support polytime counting. Moreover, polytime counting implies a polytime test of validity,
but the opposite is not true.

5. Transforming a Compiled Theory
A query is an operation that returns information about a theory without changing it. A transformation, on the other hand, is an operation that returns a modified theory, which is then operated
on using queries. Many applications require a combination of transformations and queries.
Definition 5.1 (∧C, ∨C) Let L be a subset of NNF. L satisfies ∧C (∨C) iff there exists a polytime
algorithm that maps every finite set of formulas Σ1 , . . . , Σn from L to a formula of L that is logically
equivalent to Σ1 ∧ . . . ∧ Σn (Σ1 ∨ . . . ∨ Σn ).
Definition 5.2 (¬C) Let L be a subset of NNF. L satisfies ¬C iff there exists a polytime algorithm
that maps every formula Σ from L to a formula of L that is logically equivalent to ¬Σ.
If a language satisfies one of the above properties, we will say that it is closed under the corresponding operator. Closure under logical connectives is important for two key reasons. First, it has
implications on how compilers are constructed for a given target language. For example, if a clause
can be easily compiled into some language L, then closure under conjunction implies that compiling
a CNF sentence into L is easy. Second, it has implications on the class of polytime queries supported
by the target language: If a language L satisfies CO and is closed under negation and conjunction,
then it must satisfy SE (to test whether ∆ |= Γ, all we have to do, by the Refutation Theorem,
is test whether ∆ ∧ ¬Γ is inconsistent). Similarly, if a language satisfies VA and is closed under
negation and disjunction, it must satisfy SE by the Deduction Theorem.
3. Deciding the equivalence of two sentences in FBDD, d-DNNF, or in sd-DNNF, can be easily shown to be in coNP.
However, we do not have a proof of coNP-hardness, nor do we have deterministic polytime algorithms for deciding
these problems. Actually, the latter case is quite unlikely as the equivalence problem for FBDD has been intensively
studied, with no such algorithm in sight. Note, however, that the equivalence of two sentences in FBDD can be
decided probabilistically in polytime (Blum, Chandra, & Wegman, 1980), and similarly for sentences in d-DNNF
(Darwiche & Huang, 2002).
4. Given flatness, simple-conjunction and smoothness, we can obtain determinism by simply removing duplicated
terms.

240

A Knowledge Compilation Map

It is important to stress here that some languages are closed under a logical operator, only if the
number of operands is bounded by a constant. We will refer to this as bounded closure.
Definition 5.3 (∧BC, ∨BC) Let L be a subset of NNF. L satisfies ∧BC (∨BC) iff there exists
a polytime algorithm that maps every pair of formulas Σ and Φ from L to a formula of L that is
logically equivalent to Σ ∧ Φ (Σ ∨ Φ).
We now turn to another important transformation:
Definition 5.4 (Conditioning) (Darwiche, 1999) Let Σ be a propositional formula, and let γ be
a consistent term. The conditioning of Σ on γ, noted Σ | γ, is the formula obtained by replacing
each variable X of Σ by true (resp. false) if X (resp. ¬X) is a positive (resp. negative) literal of γ.
Definition 5.5 (CD) Let L be a subset of NNF. L satisfies CD iff there exists a polytime algorithm
that maps every formula Σ from L and every consistent term γ to a formula from L that is logically
equivalent to Σ | γ.
Conditioning has a number of applications, and corresponds to restriction in the literature on
Boolean functions. The main application of conditioning is due to a theorem, which says that Σ ∧ γ
is consistent iff Σ | γ is consistent (Darwiche, 2001a, 1999). Therefore, if a language satisfies CO
and CD, then it must also satisfy CE. Conditioning also plays a key role in building compilers
that enforce decomposability. If two sentences ∆1 and ∆2 are both decomposable (belong to DNNF),
their conjunction ∆1 ∧ ∆2 is not necessarily decomposable since the sentences may share variables.
Conditioning
can be used to ensure decomposability in this case since ∆1 ∧ ∆2 is equivalent to
W
(∆
|
γ)
∧
(∆
1
2 | γ) ∧ γ, where γ is a term covering all variables shared by ∆1 and ∆2 . Note that
Wγ
(∆
|
γ)
∧
(∆
1
2 | γ) ∧ γ must be decomposable since ∆1 | γ and ∆2 | γ do not mention variables
γ
in γ. The previous proposition is indeed a generalization to multiple variables of the well-known
Shannon expansion in the literature on Boolean functions. It is also the basis for compiling CNF into
DNNF (Darwiche, 1999, 2001a).
Another critical transformation we shall consider is that of forgetting (also referred to as marginalization, or elimination of middle terms (Boole, 1854)):
Definition 5.6 (Forgetting) Let Σ be a propositional formula, and let X be a subset of variables
from PS. The forgetting of X from Σ, denoted ∃X.Σ, is a formula that does not mention any variable
from X and for every formula α that does not mention any variable from X, we have Σ |= α precisely
when ∃X.Σ |= α.
Therefore, to forget variables from X is to remove any reference to X from Σ, while maintaining all
information that Σ captures about the complement of X. Note that ∃X.Σ is unique up to logical
equivalence.
Definition 5.7 (FO, SFO) Let L be a subset of NNF. L satisfies FO iff there exists a polytime
algorithm that maps every formula Σ from L and every subset X of variables from PS to a formula
from L equivalent to ∃X.Σ. If the property holds for singleton X, we say that L satisfies SFO.
Forgetting is an important transformation as it allows us to focus/project a theory on a set of
variables. For example, if we know that some variables X will never appear in entailment queries,
we can forget these variables from the compiled theory while maintaining its ability to answer
such queries correctly. Another application of forgetting is in counting/enumerating the instantiations of some variables Y, which are consistent with a theory ∆. This query can be answered by
counting/enumerating the models of ∃X.∆, where X is the complement of Y. Forgetting also has
applications to planning, diagnosis and belief revision. For instance, in the SATPLAN framework,

241

Darwiche & Marquis

Notation
CD
FO
SFO
∧C
∧BC
∨C
∨BC
¬C

Transformation
polytime conditioning
polytime forgetting
polytime singleton forgetting
polytime conjunction
polytime bounded conjunction
polytime disjunction
polytime bounded disjunction
polytime negation

Table 6: Notations for transformations.

L
NNF
DNNF
d-NNF
s-NNF
f-NNF
d-DNNF
sd-DNNF
BDD
FBDD
OBDD
OBDD<
DNF
CNF
PI
IP
MODS

CD
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√

FO
◦
√
◦
◦
◦
◦
◦
◦
•
•
•
√

SFO
√
√
√
√
√
◦
◦
√

◦
√

◦
√
√
√
√
√

•
√

•
√

∧C
√

∧BC
√
◦
√
√

∨C
√
√
√
√

∨BC
√
√
√
√

◦
√
√
•
◦
◦
√

•
◦
◦
√

•
◦
◦
√

•
◦
◦
√

•
•
•
•
√

◦
◦
√
√
√

•
•
•
√

•
•
•

•
√
√

◦
◦
√
√
√
√

•
•
•
•

•
•

¬C
√
◦
√
√
√
?
?
√
√
√
√
•
•
•
•
•

√
Table 7: Subsets of the NNF language and their polytime transformations.
means “satisfies,” •
means “does not satisfy,” while ◦ means “does not satisfy unless P=NP.”

compiling away fluents or actions amounts to forgetting variables. In model-based diagnosis, compiling away every variable except the abnormality ones does not remove any piece of information
required to compute the conflicts and the diagnoses of a system (Darwiche, 2001a). Forgetting has
also been used to design update operators with valuable properties (Herzig & Rifi, 1999).
Table 6 summarizes the transformations we are interested in and their acronyms. The following
proposition states what we know about the tractability of these transformations with respect to the
identified target compilation languages.
Proposition 5.1 The results in Table 7 hold.
One can draw a number of observations regarding Table 7. First, all languages we consider satisfy
CD and, hence, lend themselves to efficient application of the conditioning transformation. As for
forgetting multiple variables, only DNNF, DNF, PI and MODS permit that in polytime. It is important
to stress here that none of FBDD, OBDD and OBDD< permits polytime forgetting of multiple variables.
This is noticeable since some of the recent applications of OBDD< to planning—within the so-called
symbolic model checking approach to planning (A. Cimmati & Traverso, 1997)—depend crucially
242

A Knowledge Compilation Map

on the operation of forgetting and it may be more suitable to use a language that satisfies FO in
this case. Note, however, that OBDD and OBDD< allow the forgetting of a single variable in polytime,
but FBDD does not allow even that. d-DNNF is similar to FBDD as it satisfies neither FO nor SFO.
It is also interesting to observe that none of the target compilation languages is closed under
conjunction. A number of them, however, are closed under bounded conjunction, including OBDD< ,
DNF, IP and MODS.
As for disjunction, the only target compilation languages that are closed under disjunction are
DNNF and DNF. The OBDD< and PI languages, however, are closed under bounded disjunction. Again,
the d-DNNF, FBDD and OBDD languages are closed under neither.
The only target compilation languages that are closed under negation are FBDD, OBDD and OBDD< ,
while it is not known whether d-DNNF or sd-DNNF are closed under this operation. Note that d-DNNF
and FBDD support the same set of polytime queries (equivalence checking is unknown for both)
so they are indistinguishable from that viewpoint. Moreover, the only difference between the two
languages in Table 7 is the closure of FBDD under negation, which does not seem to be that significant
in light of no closure under either conjunction or disjunction. Note, however, that d-DNNF is more
succinct than FBDD as given in Figure 5.
Finally, OBDD< is the only target compilation language that is closed under negation, bounded
conjunction, and bounded disjunction. This closure actually plays an important role in compiling
propositional theories into OBDD< and is the basis of state-of-the-art compilers for this purpose
(Bryant, 1986).

6. Conclusion
The main contribution of this paper is a methodology for analyzing propositional compilation approaches according to two key dimensions: the succinctness of the target compilation language, and
the class of queries and transformations it supports in polytime. The second main contribution
of the paper is a comprehensive analysis, according to the proposed methodology, of more than
a dozen languages for which we have produced a knowledge compilation map, which cross-ranks
these languages according to their succinctness, and the polytime queries and transformations they
support. This map allows system designers to make informed decisions on which target compilation
language to use: after the class of queries/transformations have been decided based on the application of interest, the designer chooses the most succinct target compilation language that supports
such operations in polytime. Another key contribution of this paper is the uniform treatment we
have applied to diverse target compilation languages, showing how they all are subsets of the NNF
language. Specifically, we have identified a number of simple, yet meaningful, properties, including
decomposability, determinism, decision and flatness, and showed how combinations of these properties give rise to different target compilation languages. The studied subsets include some well known
languages such as PI, which has been influential in AI; OBDD< , which has been influential in formal
verification; and CNF and DNF, which have been quite influential in computer science. The subsets
also include some relatively new languages such as DNNF and d-DNNF, which appear to represent
interesting, new balances between language succinctness and query/transformation tractability.

Acknowledgments
This is a revised and extended version of the paper “A Perspective on Knowledge Compilation,”
in Proceedings of the 17th International Joint Conference on Artificial Intelligence (IJCAI’01), pp.
175-182, 2001. We wish to thank Alvaro del Val, Mark Hopkins, Jérôme Lang and the anonymous
reviewers for some suggestions and comments, as well as Ingo Wegener for his help with some of
the issues discussed in the paper. This work has been done while the second author was a visiting
researcher with the Computer Science Department at UCLA. The first author has been partly
243

Darwiche & Marquis

supported by NSF grant IIS-9988543 and MURI grant N00014-00-1-0617. The second author has
been partly supported by the IUT de Lens, the Université d’Artois, the Nord/Pas-de-Calais Région
under the TACT-TIC project, and by the European Community FEDER Program.

Appendix A. Proofs
To simplify the proofs of our main propositions later on, we have identified a number of lemmas that
we list below. Some of the proofs of these lemmas are direct, but we include them for completeness.
Lemma A.1 Every sentence in d-DNNF can be translated to an equivalent sentence in sd-DNNF in
polytime.
Proof: Let α = α1 ∨ . . . ∨ αn be an or-node in a d-DNNF sentence Σ. Suppose that α is not smooth
andWlet V = V
Vars(α). Consider now the sentence Σs obtained by replacing in Σ each such node
n
by i=1 αi ∧ v∈V \Vars(αi ) (¬v ∨ v). Then Σs is equivalent to Σ and is smooth. Moreover, Σs can
be computed in time polynomial in the size of Σ and it satisfies decomposability and determinism. 2
Lemma A.2 Every sentence in FBDD can be translated to an equivalent sentence in FBDD ∩ s-NNF
in polytime.
Proof: Let Σ be a sentence in FBDD and let α be a node in Σ. We can always replace α with (Y ∧α)∨
(¬Y ∧ α), for some variable Y , while preserving equivalence and the decision property. Moreover,
as long as the variable Y does not appear in α and is not an ancestor of α, then decomposability is
also preserved (that is, the resulting sentence is in FBDD). Note here that “ancestor” is with respect
to the binary decision diagram notation of Σ–see left of Figure 2.
Now, suppose that (X ∧ α) ∨ (¬X ∧ β) is an or-node in Σ. Suppose further that the or-node
is not smooth. Hence, there is some Y which appears in Vars(β) but not in Vars(α) (or the other
way around). Since Σ is decomposable, then Y cannot be an ancestor of α (since in that case it
would also be an ancestor of β, which is impossible by decomposability of Σ). Hence, we can replace α with (Y ∧ α) ∨ (¬Y ∧ α), while preserving equivalence, decision and decomposability. By
repeating the above process, we can smooth Σ while preserving all the necessary properties. Finally,
note that for every or-node (X ∧ α) ∨ (¬X ∧ β) in Σ, we need to repeat the above process at most
| Vars(α) − Vars(β) | + | Vars(β) − Vars(α) | times. Hence, the smoothing operation can be performed in polytime.
2
Lemma A.3 If a subset L of NNF satisfies CO and CD, then it also satisfies ME.
Proof: Let Σ be a sentence in L. First, we test if Σ is inconsistent (can be done in polytime). If
it is, we return the empty set of models. Otherwise, we construct a decision-tree representation of
the models of Σ. Given an ordering of the variables x1 , . . . , xn of Vars(Σ), we start with a tree
T consisting of a single root node. For i = 1 to n, we repeat the following for each leaf node α
(corresponds to a consistent term) in T :
a. If Σ | α ∧ xi is consistent, we add xi as a child to α;
b. If Σ | α ∧ ¬xi is consistent, we add ¬xi as a child to α.
The key points are:
• Test (a) and Test (b) can be performed in time polynomial in the size of Σ (since L satisfies
CO and CD).

244

A Knowledge Compilation Map

• Either Test (a) or Test (b) above must succeed (since Σ is consistent).
Hence, the number of tests performed is O(mn), where m is the number of leaf nodes in the final
decision tree (bounded by the number of models of Σ) and n is the number of variables of Σ.
2
Lemma A.4 If a subset of NNF satisfies CO and CD, then it also satisfies CE.
Proof: To test whether sentence Σ entails non-valid clause α, Σ |= α, it suffices to test whether
Σ | ¬α is inconsistent (Darwiche, 2001a).
2
Lemma A.5 Let α and β be two sentences that share no variables. Then α ∨ β is valid iff α is valid
or β is valid.
Proof: α ∨ β is valid iff ¬α ∧ ¬β is inconsistent. Since ¬α and ¬β share no variables, then ¬α ∧ ¬β
is inconsistent iff ¬α is inconsistent or ¬β is. This is true iff α is valid or β is valid.
2
Lemma A.6 Let Σ be a sentence in d-DNNF and let γ be a clause. Then a sentence in d-DNNF
which is equivalent to Σ ∨ γ can be constructed in polytime in the size of Σ and γ.
Wn
Vi−1
Proof: Let l1 , . . . , ln be the literals that appear in clause γ. Then β = i=1 (li ∧ j=1 ¬lj ) is
equivalent to clause γ, is in d-DNNF, and can be constructed in polytime in size of γ. Now let α be
the term equivalent to ¬γ. We have that Σ ∨ γ is equivalent to ((Σ | α) ∧ α) ∨ β. The last sentence
is in d-DNNF and can be constructed in polytime in size of Σ and γ.
2
Lemma A.7 If a subset of NNF satisfies VA and CD, then it also satisfies IM.
Proof: To test whether a consistent term α entails sentence Σ, α |= Σ, it suffices to test whether
¬α ∨ Σ is valid. This sentence is equivalent to ¬α ∨ (α ∧ Σ), to ¬α ∨ (α ∧ (Σ | α)), and to ¬α ∨ (Σ | α).
Since ¬α and Σ | α share no variables, the disjunction is valid iff ¬α is valid or Σ | α is valid (by
Lemma A.5). ¬α cannot be valid since α is consistent. Σ | α can be constructed in polytime since
the language satisfies CD and its validity can be tested in polytime since the language satisfies VA. 2
Lemma A.8 Every CNF or DNF formula can be translated to an equivalent sentence in BDD in
polytime.
Proof: It is straightforward to convert a clause or term into an equivalent sentence in BDD. In order
to generate a BDD sentence corresponding to the conjunction (resp. disjunction) of BDD sentences α
and β, it is sufficient to replace the 1-sink (resp. 0-sink) of α with the root of β.
2
Lemma A.9 If a subset of NNF satisfies EQ, then it satisfies CO and VA.
Proof: true and false belong to every NNF subset. Σ is inconsistent iff it is equivalent to false. Σ is
valid iff it is equivalent to true.
2
Lemma A.10 If a subset of NNF satisfies SE, then it satisfies EQ, CO and VA.
Proof: Sentences Σ1 and Σ2 are equivalent iff Σ1 |= Σ2 and Σ2 |= Σ1 . EQ implies CO and VA
(Lemma A.9).
2

245

Darwiche & Marquis

Lemma A.11 Let Σ be a sentence in d-DNNF and let γ be a clause. The validity of Σ ∨ γ can be
tested in time polynomial in the size of Σ and γ.
Proof: Construct Σ ∨ γ in polytime as given in Lemma A.6 and check its validity, which can be
done in polytime too.
2
Lemma A.12 For every propositional formula Σ and every consistent term γ, we have Σ|γ is
equivalent to
∃Vars(γ).(Σ ∧ γ).
Proof: Without loss of generality, assume that Σ is given by the disjunctively-interpreted set of
its models (over Vars(Σ)). Conditioning Σ on γ leads (1) to removing every model of ¬γ, then
(2) projecting the remaining models so that every variable of γ is removed. Conjoining Σ with γ
leads exactly to (1), while forgetting every variable of γ in the resulting formula leads exactly to (2)
(Lang, Liberatore, & Marquis, 2000).
2
Lemma A.13 Each sentence Σ in f-NNF can be converted into an equivalent sentence Σ∗ in polynomial time, where Σ∗ ∈ CNF or Σ∗ ∈ DNF.
Proof: We consider three cases for the sentence Σ:
1. The root node of Σ is an and-node. In this case, Σ can be turned into a CNF sentence Σ∗ in
polynomial time by simply ensuring that each or-node in Σ is a clause (that is, a disjunction
of literals that share no variables). Let C be an or-node in Σ. Since Σ is flat and its root is
an and-node, C must be a child of the root of Σ and the children of C must be leaves. Hence,
we can easily ensure that C is a clause as follows:
• If we have one edge from C to some leaf X and another edge from C to ¬X (C is valid),
we replace the edge from the root to C by an edge from the root to true.
• If we have more than one edge from C to the same leaf node X, we keep only one of these
edges and delete the rest.
2. The root of Σ is an or-node. Σ can be turned into a DNF sentence Σ∗ in a dual way.5
3. The root of Σ is a leaf node. Σ is already a CNF sentence.
2
Lemma A.14 α is a prime implicant (resp. an essential prime implicant) of sentence Σ iff ¬α is
a prime implicate (resp. an essential prime implicate) of ¬Σ. 6
Proof: This is a folklore result, immediate from the definitions.

2

Proof of Proposition 3.1
The proof of this proposition is broken down into eight steps. In each step, we prove a number of
succinctness relationships between different languages, and then apply transitivity of the succinctness
relation to infer even more relationships. Associated with each step of the proof is a table in which

246

A Knowledge Compilation Map

L

NNF

DNNF

d-DNNF

FBDD

OBDD

OBDD<

DNF

CNF

PI

IP

MODS

sd-DNNF

NNF
DNNF
d-DNNF
FBDD
OBDD
OBDD<
DNF
CNF
PI
IP
MODS
sd-DNNF

≤

≤
≤

≤
≤
≤

≤
≤
≤
≤

≤
≤
≤
≤
≤

≤
≤
≤
≤
≤
≤

≤
≤

≤

≤

≤
≤

≤
≤
≤

≤
≤
≤

≤

≤

≤

≤
≤

≤

≤
≤
≤

≤

Table 8:
L

NNF

DNNF

d-DNNF

FBDD

OBDD

OBDD<

DNF

CNF

PI

IP

MODS

sd-DNNF

NNF
DNNF
d-DNNF
FBDD
OBDD
OBDD<

≤

≤
≤

≤
≤
≤

≤
≤
≤
≤

≤
≤
≤
≤
≤

≤
≤
≤
≤
≤
≤

≤
≤

≤

≤

≤
≤

≤
≤
≤

≤
≤
≤

DNF

6≤

≤

6≤

6≤

≤

≤

CNF

6≤

6≤

6≤

≤

≤

6≤

PI

6≤

6≤

6≤

6≤

≤

6≤

IP
MODS
sd-DNNF

6≤

6≤

6≤

6≤

6≤

≤
≤
≤

≤

Table 9:
we mark all relationships that are proved in that step–we don’t show these marks in the very first
table though.
Table 8: Follows immediately from the language inclusions reported in Figure 4.
Table 9: We can prove both that DNF 6≤ PI and CNF 6≤ IP (this slightly generalizes the results
DNF 6≤ CNF and CNF 6≤ DNF given in (Gogic et al., 1995)).
Vn−1
Let us consider the CNF formula Σn = i=0 (x2i ∨ x2i+1 ). This formula is in prime implicates
form7 (and each clause in Σn is an essential prime implicate of it). Hence its negation ¬Σn is in
prime implicants form (as an easy consequence of Lemma A.14).
Since Quine’s early work (Quine, 1959), we know that the number of essential prime implicants
(resp. prime implicates) of a formula is a lower bound of the number of terms (resp. clauses) that
can be found in any DNF (resp. CNF) representation of it (indeed, any such representation must
include the essential prime). Σn has 2n essential prime implicants. Indeed, this can be easily shown
by induction on n given that (i) every literal occurring in Σn occurs only once, (ii) the set of prime
implicants of any nontautological clause is the set of literals occurring in it (up to logical equivalence),
and (iii) the distribution property for prime implicants (see e.g., (dual of) Proposition 40 in (Marquis,
2000)) which states that IP (α ∧β) = max({PIα ∧PIβ | PIα ∈ IP (α), PIβ ∈ IP (β)}, |=) (up to logical
equivalence). Subsequently, ¬Σn has 2n essential prime implicates (cf. Lemma A.14). Accordingly,
we obtain that both DNF 6≤ PI and CNF 6≤ IP. We also obtain PI 6≤ IP and IP 6≤ PI. Now, it is
well–known that some DNF formulas have exponentially many prime implicants (see the proof of
Proposition 5.1 where we show that IP does not satisfy SFO). Hence, their negations are CNF
5. Note that f-NNF satisfies ¬C and that the negation of a CNF sentence (resp. DNF sentence) can be turned into a
DNF (resp. CNF) in linear time.
6. A prime implicant (resp. a prime implicate) α of Σ is essential iff the disjunction (resp. conjunction) of all prime
implicants (resp. prime implicates) of Σ except α is not equivalent to Σ.
7. The correctness of (the dual of) Quine’s consensus algorithm for computing prime implicants (Quine, 1955)
ensures it, since no clause of Σn is subsumed by another clause and no consensi can be performed since there are
no negated variables.

247

Darwiche & Marquis

L

NNF

DNNF

d-DNNF

FBDD

OBDD

OBDD<

DNF

CNF

PI

IP

MODS

sd-DNNF

NNF
DNNF
d-DNNF
FBDD
OBDD
OBDD<

≤

≤
≤

≤
≤
≤

≤
≤
≤
≤

≤
≤
≤
≤
≤

≤
≤
≤
≤
≤
≤

≤
≤

≤

≤

≤
≤

≤
≤
≤

≤
≤
≤

DNF

6≤

6≤

6≤

6≤

6≤

6≤

≤

6≤

6≤

≤

≤

CNF

6≤

6≤

6≤

6≤

6≤

6≤

6≤

≤

≤

6≤

PI

6≤

6≤

6≤

6≤

6≤

6≤

6≤

6≤

≤

6≤

IP
MODS
sd-DNNF

6≤

6≤

6≤

6≤

6≤

6≤

6≤

6≤

6≤

≤
≤
≤

≤

Table 10:
L

NNF

DNNF

d-DNNF

FBDD

OBDD

NNF
DNNF
d-DNNF

≤

≤
≤

≤
≤
≤

≤
≤
≤

≤
≤
≤

OBDD<
≤
≤
≤

FBDD

6≤

6≤

6≤

≤

≤

≤

OBDD

6≤

6≤

6≤

6≤

≤

≤

OBDD<
DNF
CNF
PI
IP
MODS
sd-DNNF

6≤
6
≤
6
≤
6
≤
6
≤

6≤
6
≤
6
≤
6
≤
6
≤

6≤
6
≤
6
≤
6
≤
6
≤

6≤
6
≤
6
≤
6
≤
6
≤

6≤
6
≤
6
≤
6
≤
6
≤

≤
6
≤
6
≤
6
≤
6
≤

DNF

CNF

PI

IP

MODS

sd-DNNF

≤
≤

≤

≤

≤
≤

≤
≤
≤

≤
≤
≤

≤
6
≤
6
≤
6
≤

6≤
≤
6
≤
6
≤

6≤
≤
≤
6
≤

≤
6
≤
6
≤
≤

≤

≤
≤

≤

Table 11:
formulas having exponentially many prime implicates. Subsequently IP 6≤ DNF and PI 6≤ CNF. The
remaining results in this table follow fromL
the transitivity of ≤.
n−1
Table 10: The parity function On = i=0 xi has linear size OBDD< representations (Bryant,
1986) but only exponential size CNF and DNF representations. The reason is that On has 2n
essential prime implicants (resp. essential prime implicates) and the number of essential prime
implicants (resp. essential prime implicates) of a formula is a lower bound of the size of any of its
DNF (resp. CNF) representation. This easily shows that both CNF 6≤ OBDD and DNF 6≤ OBDD. The
remaining results in this table follow from the language inclusions reported in Figure 4.
Table 11: It is shown in (Darwiche, 2001b) that there is a sentence in d-DNNF which only
has exponential FBDD representations. Accordingly, we have FBDD 6≤ d-DNNF. In (Gergov & Meinel,
1994a), it is shownVthat OBDD 6≤ FBDD. Finally, it is easy to show that OBDD< 6≤ OBDD (for instance,
n
the formula Σn = i=1 (xi ⇔ yi ) has an OBDD< representation of size polynomial in n whenever <
satisfies x1 < y1 < x2 < . . . < xn < yn , while it has an OBDD< representation of size exponential in
n provided that < is s.t. x1 < x2 < . . . < xn < y1 < y2 < . . . < yn ). The remaining results in this
table follow from the language inclusions reported in Figure 4.
Table 12: L’ 6≤∗ L means that L’ 6≤ L unless the polynomial hierarchy PH collapses. The
results in this table follow since the existence of polysize knowledge compilation functions for clausal
entailment implies the collapse of the polynomial hierarchy PH (Selman & Kautz, 1996; Cadoli &
Donini, 1997). Now, if DNNF ≤ CNF, then for each sentence Σ in CNF there exists a polysize equivalent
sentence Γ in DNNF. Therefore, we can test whether a clause is entailed by Σ in polytime by testing
whether the clause is entailed by Γ. This proves the existence of polysize knowledge compilation
functions for clausal entailment, leading to the collapse of the polynomial hierarchy PH. The same
is true for d-DNNF and sd-DNNF since all these languages support a polytime clausal entailment test
(see Proposition 4.1).
Table 13: In (Wegener, 1987) (Theorem 6.2 pp. 436), a family of n2 -variable boolean functions
Σ is pointed out. Provided that every interpretation I over these n2 variables represents a n-vertices
digraph (for every 1 ≤ i, j ≤ n, we have I(xi,j ) = 1 iff (i, j) is an arc of the digraph), Σ(I) = 1 iff the
248

A Knowledge Compilation Map

L

NNF

DNNF

d-DNNF

FBDD

OBDD

OBDD<

DNF

CNF

PI

IP

MODS

sd-DNNF

NNF

≤
6 ∗
≤

≤

≤

≤

≤

≤

≤

≤

≤

≤

≤

≤

≤

≤

≤

≤

≤

≤
6 ∗
≤

≤

≤

≤

≤

≤

DNNF
d-DNNF
FBDD
OBDD
OBDD<
DNF
CNF
PI
IP
MODS

6 ∗
≤

sd-DNNF

6≤∗

6≤
6
≤
6
≤
6
≤
6
≤
6
≤
6
≤

≤
6
≤
6
≤
6
≤
6
≤
6
≤
6
≤
6
≤

6≤
6
≤
6
≤
6
≤
6
≤
6
≤
6
≤

≤
≤
6
≤
6
≤
6
≤
6
≤
6
≤
6
≤

≤
≤
≤
6
≤
6
≤
6
≤
6
≤
6
≤

6 ∗
≤

≤
≤
≤
≤
6
≤
6
≤
6
≤
6
≤

≤
6
≤
6
≤
6
≤

6≤
≤
6
≤
6
≤

6≤
≤
≤
6
≤

≤
6
≤
6
≤
≤

≤

≤
6≤∗

≤

≤

Table 12:
L

NNF

DNNF

d-DNNF

FBDD

OBDD

CNF

PI

IP

MODS

sd-DNNF

≤
6≤∗
6≤∗

≤
≤

≤
≤
≤

≤
≤
≤

≤
≤
≤

OBDD<
≤
≤
≤

DNF

NNF
DNNF
d-DNNF

≤
≤

≤
6≤∗
6≤∗

≤

≤
≤

≤
≤
≤

≤
≤
≤

FBDD

6≤

6≤

6≤

≤

≤

≤

6≤

6≤

6≤

6≤

OBDD

6≤

6≤

6≤

6≤

≤

≤

6≤

6≤

6≤

6≤

OBDD<
DNF
CNF
PI
IP
MODS
sd-DNNF

6≤
6
≤
6
≤
6
≤
6
≤

6≤
6
≤
6
≤
6
≤
6
≤

6≤
6
≤
6
≤
6
≤
6
≤

6≤
6
≤
6
≤
6
≤
6
≤

6≤
6
≤
6
≤
6
≤
6
≤

≤
6
≤
6
≤
6
≤
6
≤

6≤
≤
6
≤
6
≤
6
≤

6≤
6
≤
≤
6
≤
6
≤

6≤
6
≤
≤
≤
6
≤

6≤
≤
6
≤
6
≤
≤

6≤∗

≤

≤
≤

6≤∗

≤

Table 13:
digraph represented by I contains a k-clique of a special kind (k is a parameter of the family). It is
shown that for certain values of k (depending on n), every FBDD representation of Σ has exponential
size. Moreover, it is shown that Σ has only a cubic number of prime implicants. This shows that
FBDD 6≤ IP, hence FBDD 6≤ DNF. Because FBDD satisfies ¬C (see Proposition 5.1),8 it cannot be the
case that ¬Σ has a polynomial size FBDD. Since ¬Σ has only a cubic number of prime implicates, we
obtain that FBDD 6≤ PI, hence FBDD 6≤ CNF. The remaining results in this table follow since FBDD≤
OBDD ≤ OBDD< .
Table 14: Assume that d-DNNF ≤ DNF holds. As a consequence, every sentence Σ in DNF can be
compiled into an equivalent d-DNNF sentence Σ∗ of polynomial size. Now, checking whether a clause
γ is entailed by the CNF sentence Σ is equivalent to checking whether the DNF sentence ¬Σ ∨ γ is
valid. Checking whether (¬Σ) ∗ ∨γ is valid—when (¬Σ)∗ is a d-DNNF sentence and γ is a clause—can
be achieved in polynomial time by Lemma A.11. Therefore, (¬Σ)∗ is a polysize compilation of the
8. That is, a sentence in FBDD can be negated in polytime to yield a sentence in FBDD too.

L

NNF

DNNF

d-DNNF

FBDD

OBDD

NNF
DNNF

≤
≤
6 ∗
≤

≤
≤

≤
≤

≤
≤

OBDD<
≤
≤

d-DNNF

≤
6 ∗
≤
6≤∗

DNF

CNF

PI

IP

MODS

sd-DNNF

≤
6 ∗
≤
6≤∗

≤

≤
≤

≤
≤

≤
≤

≤

≤
≤
6 ∗
≤

≤

≤

≤

FBDD

6≤

6≤

6≤

≤

≤

≤

≤

≤

6≤

6≤

6≤

6≤

OBDD

6≤

6≤

6≤

6≤

6≤

≤

≤

6≤

6≤

6≤

6≤

OBDD<
DNF

6≤

6≤

6≤

6≤

6≤

6≤

≤

6≤

6≤

6≤

6≤

6≤

6≤

6≤

6≤

6≤

6≤

≤

6≤

6≤

≤

CNF

6≤

6≤

6≤

6≤

6≤

6≤

6≤

≤

≤

6≤

PI

6≤

6≤

6≤

6≤

6≤

6≤

6≤

6≤

≤

6≤

IP
MODS

6≤

6≤

6≤

6≤

6≤

6≤

6≤

6≤

6≤

≤

sd-DNNF

6≤∗

6≤
≤

6≤
6≤
6≤
6≤

≤
6≤∗

≤

≤

≤

≤

Table 14:

249

6≤∗

6≤∗

≤

≤

Darwiche & Marquis

L

NNF

DNNF

d-DNNF

FBDD

OBDD

OBDD<

DNF

CNF

PI

IP

MODS

sd-DNNF

NNF
DNNF
d-DNNF

≤
6 ∗
≤
6≤∗

≤
≤
6≤∗

≤
≤
≤

≤
≤
≤

≤
≤
≤

≤
≤
≤

≤
≤
6≤∗

≤
6 ∗
≤
6≤∗

≤

≤
≤

≤
≤
≤

≤
≤
≤

FBDD

6≤

6≤

6≤

≤

≤

≤

6≤

6≤

6≤

6≤

≤

6≤

OBDD

6≤

6≤

6≤

6≤

≤

≤

6≤

6≤

6≤

6≤

≤

6≤

OBDD<
DNF

6≤
6
≤

6≤
6
≤

6≤
6
≤

6≤
6
≤

6≤
6
≤

≤
6
≤

6≤
≤

6≤
6
≤

6≤
6
≤

6≤
≤

≤
≤

6≤
6
≤

CNF
PI

6≤
6
≤

6≤
6
≤

6≤
6
≤

6≤
6
≤

6≤
6
≤

6≤
6
≤

6≤
6
≤

≤
6
≤

≤
≤

6≤
6
≤

≤

6≤
6
≤

IP

6≤

6≤

6≤

6≤

6≤

6≤

6≤

6≤

6≤

≤

≤

6≤

MODS
sd-DNNF

6
≤
6≤∗

6
≤
6≤∗

6≤
≤

6≤
≤

6≤
≤

6≤
≤

6
≤
6≤∗

6
≤
6≤∗

6≤

6≤

≤
≤

6≤
≤

Table 15:
CNF sentence Σ, allowing clausal entailment to be achieved in polynomial time. The existence of
such (¬Σ)∗ for every CNF sentence Σ implies the collapse of the polynomial hierarchy (Selman &
Kautz, 1996; Cadoli & Donini, 1997). Hence, we obtain that d-DNNF 6≤∗ DNF. As a consequence, we
also have d-DNNF 6≤∗ DNNF. Finally, since every d-DNNF sentence can be turned in polynomial time
into an equivalent sd-DNNF sentence by Lemma A.1, we have sd-DNNF ≤ d-DNNF. Moreover, since
d-DNNF ≤ sd-DNNF, we obtain sd-DNNF 6≤∗ DNF, sd-DNNF 6≤∗ DNNF, sd-DNNF ≤ FBDD, sd-DNNF ≤
OBDD, sd-DNNF ≤ OBDD< , FBDD 6≤ sd-DNNF, OBDD< 6≤ sd-DNNF, DNF 6≤ sd-DNNF, CNF 6≤ sd-DNNF, PI
6≤ sd-DNNF and IP 6≤ sd-DNNF.
Table 15: Let us now show that WMODS is not less succinct than PI, IP, sd-DNNF and OBDD.
n
First, let us consider the formula Σ = i=1 xi . Σ can be represented by PI, IP, sd-DNNF and OBDD
formulas of size polynomial in n. Contrastingly, Σ cannot be represented by a MODS formula of
size polynomial in n since Σ has 2n − 1 models over Vars(Σ). Now, it is well-known that the old
good Quine-McCluskey’s algorithm for generating prime implicants from a MODS representation of
a propositional formula Σ runs in time polynomial in the number of models of Σ (Wegener, 1987).
This shows that IP ≤ MODS. As to CNF and OBDD< , it is obvious that a decision tree (or Shannon tree)
for Σ that respects a given total ordering over Vars(Σ) can be generated in polynomial time from a
MODS representation of Σ. Such a decision tree has m 1-leaves where m is the number of models of
Σ over Vars(Σ). Accordingly, it has at most n ∗ m 0-leaves where n = |Vars(Σ)|. Since the set of all
paths from the root of the tree to any 0-leaf can be read as a CNF representation of Σ, we obtain that
CNF ≤ MODS. On the other hand, since reducing a decision tree to derive a corresponding OBDD<
can be done in polynomial time, it follows that an OBDD< representation of Σ can also be generated
from a MODS representation of it. Hence, OBDD< ≤ MODS. The remaining results in this table follow
from the language inclusions reported in Figure 4. 2
Proof of Proposition 4.1
The proof of this proposition is broken down into twelve steps. In each step, we prove a number
of results. Associated with each step of the proof is a table in which we mark all results that are
proved in that step. The table of the last step includes all results declared by this proposition.
Table 16: Every classical CNF or DNF formula can be translated in a straightforward way into
an equivalent f-NNF sentence (with a tree structure) in polytime. Moreover, every NNF sentence
can be translated into an equivalent s-NNF sentence in polytime (Lemma A.1). Given that CO
is NP-hard (resp. VA is coNP-hard) for classical CNF (resp. DNF) sentences, and the inclusion
between the various NNF subsets reported in Figure 4, we obtain the table.
Table 17: SE implies both CO and VA (Lemma A.10). Moreover, since CT implies both CO
and VA, IM implies VA (valid term), and CE implies CO (inconsistent clause), we obtain the
table.

250

A Knowledge Compilation Map

L

CO

VA

NNF

◦

◦

DNNF
d-NNF
d-DNNF
BDD
FBDD
OBDD
OBDD<

CE

IM

EQ

CT

SE

EQ

ME

◦

DNF

◦

CNF
PI
IP
MODS

◦

s-NNF

◦

◦

f-NNF
sd-DNNF

◦

◦

Table 16:

L

CO

VA

CE

IM

CT

SE

NNF

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

◦

DNNF
d-NNF
d-DNNF
BDD
FBDD
OBDD
OBDD<

◦

DNF

◦

CNF
PI
IP
MODS

◦

◦

s-NNF

◦

◦

◦

◦

◦

◦

f-NNF
sd-DNNF

◦

◦

◦

◦

◦

◦

ME

Table 17:

L

CO

VA

CE

IM

CT

SE

NNF
DNNF
d-NNF
d-DNNF
BDD
FBDD
OBDD
OBDD<
DNF
CNF
PI
IP

◦

◦
◦

◦

◦
◦

◦
◦

◦
◦

◦

◦
◦

◦
◦

MODS
s-NNF
f-NNF
sd-DNNF

◦
◦

◦

√

√

◦
◦

◦
◦

EQ

√
◦
◦

◦
◦

Table 18:

251

◦
◦

◦
◦

ME

Darwiche & Marquis

L

CO

VA

CE

IM

CT

SE

NNF

◦
√

◦

◦
√

◦

◦

◦

◦

◦

◦

◦

◦
◦

◦
◦

DNNF
d-NNF
d-DNNF
BDD
FBDD
OBDD
OBDD<
DNF
CNF
PI
IP
MODS
s-NNF
f-NNF
sd-DNNF

◦

√

√

EQ

ME

√

√

◦

◦

◦

√

√

√

√

√

◦
◦
√

◦
◦

◦
◦
√

√
◦
◦

◦
◦

◦
◦

Table 19:
L

CO

VA

CE

IM

CT

SE

ME

NNF

◦
√

◦

◦
√

◦

◦

◦

◦

◦

◦

◦
√

DNNF
d-NNF
d-DNNF
BDD
FBDD
OBDD
OBDD<
DNF
CNF
PI
IP

◦

√

EQ

√

√

√

√

√

√

√

√

√

√

√

√

√

√

√

√

√

√

◦
√

◦

◦

◦

◦

√

◦

√

◦

◦

√

√

◦

√

√
√
√
√
◦
√

√

√

√

s-NNF

◦

◦

◦

◦

◦

◦

◦

f-NNF

◦
√

◦

◦
√

◦

◦

◦

◦
√

MODS

sd-DNNF

√

√

Table 20:
Table 18: A sentence Σ is consistent (resp. valid) iff it has a model (resp. 2n models, where
n = |Vars(Σ)|). Moreover, the number of models of Σ is given by the number of edges outgoing
from the or-node in any MODS representation of Σ. Accordingly, CO, VA and CT can be achieved
in polynomial time when Σ is given by a MODS formula which gives us the table.
Table 19:Because DNNF satisfies CE (Darwiche, 2001a), CE implies CO and MODS ⊆ DNF ⊆
DNNF, IP⊆ DNF and
sd-DNNF ⊆ d-DNNF ⊆ DNNF, we obtain the table.
Table 20: We now use the following results:
CD and CO imply CE (Lemma A.4).
CD and VA imply IM (Lemma A.7).
CD and CO imply ME (Lemma A.3).
All considered NNF subsets satify CD (cf. Proposition 5.1).
If an NNF subset does not satisfy CO it cannot satisfy ME.
It is well-known that FBDD satisfies CO, VA and CT, and that OBDD< satisfies (in addition)
EQ (Gergov & Meinel, 1994a; Bryant, 1992).
Since Σ |= α holds iff Σ ∧ ¬α is inconsistent and since OBDD< satisfies CO, ¬C and ∧BC (cf.
Proposition 5.1), OBDD< also satisfies SE.
252

A Knowledge Compilation Map

L

CO

VA

CE

IM

CT

SE

ME

NNF
DNNF
d-NNF
d-DNNF
BDD
FBDD
OBDD
OBDD<
DNF

◦
√

◦
◦

◦
√

◦
◦

◦
◦

◦
◦

◦
√

√
√
√

√
√
√

◦
√

◦

◦

CNF

◦

◦

◦

PI
IP
MODS
s-NNF
f-NNF
sd-DNNF

√
√
√
√
√

√
√
◦
◦
√

EQ

√
√
√
√
◦
√
√
√
◦
◦

√
√
√
√
◦

√

√
√

◦
√
√

√
√
◦
◦
√

◦
◦

◦
√
√

√
◦
◦

√
√
√
√

◦
◦

◦
◦
√

Table 21:
L

CO

VA

CE

IM

CT

SE

ME

NNF
DNNF

◦
√

◦
◦

◦
√

◦
◦

◦
◦

◦
◦

◦
√

d-NNF
d-DNNF

◦
√

◦

◦
√

◦

◦

◦

◦
√

BDD
FBDD
OBDD
OBDD<
DNF
CNF
PI
IP
MODS
s-NNF
f-NNF
sd-DNNF

◦
√
√
√
√

◦
√
√
√

◦
√
√
√
√

◦
√
√
√

◦
√
√
√

◦
◦
√

◦
◦

◦
◦

◦
√
√
√
√

◦
√
√
◦
◦
√

◦
√
√
√
◦
◦

◦

◦
√
√

√
√
◦
◦
√

EQ

√
√

◦
√

√
◦
◦

◦
◦

◦
◦

◦
◦
√

Table 22:
Obviously enough, any query concerning OBDD is equivalent to the corresponding query concerning OBDD< provided that only one DAG is brought into play. Together with the above
results, we conclude that OBDD satisfies CO, VA and CT. Since this fragment satisfies CD as
well, it satisfies CE, IM and ME in addition. It also satisfies EQ (see Theorem 8.11 from
(Meinel & Theobald, 1998)) but does not satisfy SE (unless P = NP). Indeed, it is known
that checking the consistency of two OBDD< formulas α and β (based on two different variable orderings <) is NP-complete (Lemma 8.14 from (Meinel & Theobald, 1998)). Since OBDD
satisfies ¬C and since α ∧ β is consistent iff α 6|= ¬β, checking sentential entailment for OBDD
formulas is coNP-complete.
These results lead to the table.
Table 21: It is known that IM is satisfied by classical CNF formulas (hence, PI) (in order to
check whether a non-valid clause is implied by a consistent term, it is sufficient to test that they
share a literal). CNF (hence, PI) is also known to satisfy VA. We then obtain the table.
Table 22: Every sentence in CNF or DNF can be turned into an equivalent sentence in BDD in
polytime (Lemma A.8). Hence, a ◦ in a CNF or DNF cell implies a ◦ in the corresponding BDD cell.
Similarly, since BDD ⊆ d-NNF, a ◦ in a BDD cell implies a ◦ in the corresponding d-NNF cell. This
leads to the table.
Table 23: Since EQ implies CO and VA (Lemma A.9), a ◦ in a CO or VA cell implies a ◦ in
the corresponding EQ cell. This leads to the table.
Table 24: By definition, PI satisfies CE and IP satisfies IM. Since PI ⊆ CNF and IP ⊆ DNF,
this implies that both PI and IP satisfy SE. Now, SE implies EQ, hence both PI and IP satisfy EQ
(actually, two equivalent formulas share the same prime implicates and the same prime implicants
(both forms are canonical ones, provided that one representative per equivalence class is considered,
253

Darwiche & Marquis

L

CO

VA

CE

IM

EQ

CT

SE

ME

NNF

◦
√

◦

◦
√

◦

◦

◦

◦

◦

◦

◦

◦

◦
√

d-NNF
d-DNNF

◦
√

◦

◦
√

◦

◦

◦

◦

◦
√

BDD
FBDD
OBDD
OBDD<

◦
√
√
√

◦
√
√
√

◦
√
√
√

◦
√
√
√

◦

◦
√
√
√

◦

√
√

◦
√

◦
√
√
√

◦

◦

◦

◦

◦

◦

DNNF

DNF
CNF
PI
IP
MODS

√
◦

◦

◦
√
√

√
◦

◦
√
√

√
◦

√
√

√

√
√

√
√

s-NNF

◦

◦

◦

◦

◦

◦

◦

◦

f-NNF
sd-DNNF

◦
√

◦

◦
√

◦

◦

◦

◦

◦
√

√

Table 23:

L

CO

VA

CE

IM

EQ

CT

SE

ME

NNF
DNNF
d-NNF
d-DNNF
BDD
FBDD
OBDD
OBDD<
DNF
CNF

◦
√

◦
◦
◦

◦
√

◦
◦
◦

◦
◦
◦

◦
◦
◦

◦
◦
◦

◦
√

◦
√
√
√

◦
√
√
√
√

◦
√
√
√

◦

◦
√
√
√

◦

◦
√
√
√
√

PI
IP
MODS
s-NNF
f-NNF
sd-DNNF

◦
√
◦
√
√
√
√
◦
√

◦
√

◦
√

√

◦
◦
√

√
√

√

√

◦
◦
√

◦
◦

◦
◦

√

◦
√

√
√

√
√

◦
◦
√

◦
◦

◦
√

√
√

Table 24:

254

◦
◦
◦
◦
√
◦
◦

◦
√
◦
◦
√

◦
√

◦
√

√

√
√

◦
◦

◦
◦
√

A Knowledge Compilation Map

L

CO

VA

CE

IM

EQ

CT

SE

ME

NNF
DNNF
d-NNF
d-DNNF
BDD
FBDD
OBDD
OBDD<
DNF
CNF
PI
IP

◦
√

◦
◦
◦

◦
√

◦
◦
◦

◦
◦
◦

◦
◦
◦

◦
◦
◦

◦
√

◦
√
√
√

◦
√
√
√
√

◦
√
√
√

◦

◦

√
√

◦
√
√
√

◦
√
√

◦
√
√
√

◦
◦
√
√

◦
√
√
√
√

MODS
s-NNF
f-NNF
sd-DNNF

◦
√
◦
√
√
√
√

◦
√

◦
√
◦
◦
√
√

◦
√

◦
√
√

◦
√
√
√

√

√

√

√

√

◦
◦
◦
◦
√

√

√

◦
◦
√

◦
◦

◦
◦
√

◦
◦

◦
◦

◦
◦

◦
◦

◦
◦
√

◦
√
√

Table 25:
L

CO

VA

CE

IM

EQ

CT

SE

ME

NNF
DNNF
d-NNF

◦
√

◦
◦
◦
√

◦
√

◦
◦
◦
√

◦
◦
◦

◦
◦
◦
√

◦
◦
◦

◦
√

◦
√
√
√

◦
√
√
√
√

◦
√
√
√

◦

◦

√
√

◦
√
√
√

◦
√

◦
√
√
√

◦
√
√
√
√

◦
◦
√
√
√

◦
◦
◦
◦
√

◦
◦
√
√
√

◦
√
√
√
√

◦
◦
√

◦
◦
√

◦
◦

◦
◦
√

◦
◦

d-DNNF
BDD
FBDD
OBDD
OBDD<
DNF
CNF
PI
IP
MODS
s-NNF
f-NNF
sd-DNNF

◦
√
◦
√
√
√
√
◦
√
√
√

◦
√
√
√
√

◦
◦
√

◦
◦
√

◦
√

◦
√

◦
√
√
√
◦
◦
√

Table 26:
only)). Since PI satisfies CE, it also satisfies CO. Since it satisfies CD as well (cf. Proposition 5.1),
it also satisfies ME (Lemma A.3). Contrastingly, the models counting problem for monotone Krom
formulas (i.e. conjunctions of clauses containing at most two literals and only positive literals)
is #P-complete (Roth, 1996). Such formulas can easily be turned into prime implicates form in
polynomial time (Marquis, 2000), hence PI does not satisfy CT. Now, since the negation of a
formula Σ in prime implicates form is a formula in prime implicants form (cf. Lemma A.14), and
since the number of models of ¬Σ over Vars(Σ) is 2|Vars(Σ)| minus the number of models of Σ over
Vars(Σ), we necessarily have that IP does not satisfy CT. This also imply that IP satisfies VA,
leading to the table.
Table 25: In the proof of Proposition 3.1, we have shown that the prime implicants of Σ can
be computed in polytime from a MODS representation of Σ. As an immediate consequence, since IP
satisfies IM, EQ and SE, we obtain that MODS satisfies IM, EQ and SE, leading to the table.
Table 26: Since d-DNNF satisfies CT (Darwiche, 2001b), it also satisfies VA. Since it satisfies
CD (Proposition 5.1), it also satisfies IM as well (Lemma A.7). Since sd-DNNF ⊆ d-DNNF, these
results follow for sd-DNNF. Hence, we obtain the table.
Table 27: It is known that determining whether the conjunction of two FBDD formulas α1 and α2
is consistent is NP-complete (Gergov & Meinel, 1994b) Moreover, FBDD satisfies ¬C. Since α1 ∧ α2
is inconsistent iff α1 |= ¬α2 , we can reduce the consistency test into an entailment test. Hence, FBDD
does not satisfy SE. Since FBDD ⊆ d-DNNF, d-DNNF does not satisfy SE either. Finally, since every
d-DNNF can be translated into an equivalent sd-DNNF sentence in polytime (Lemma A.1), sd-DNNF
does not satisfy SE either. This leads to the final table above. 2

255

Darwiche & Marquis

L

CO

VA

CE

IM

EQ

CT

SE

ME

NNF
DNNF
d-NNF

◦
√

◦
◦
◦
√

◦
√

◦
◦
◦
√

◦
◦
◦

◦
◦
◦
√

◦
◦
◦

◦
√

◦
√
√
√

◦
√
√
√
√

d-DNNF
BDD
FBDD
OBDD
OBDD<
DNF
CNF
PI
IP
MODS
s-NNF
f-NNF
sd-DNNF

◦
√
◦
√
√
√
√
◦
√
√
√

◦
√
√
√
√

◦
◦
√

◦
◦
√

◦
√

◦

◦
◦

◦
√
√
√

√
√

◦
√
√
√

◦
◦
√

◦
√
√
√

◦
√
√
√
√

◦
◦
√
√
√

◦
◦
◦
◦
√

◦
◦
√
√
√

◦
◦
√

◦
◦
√

◦
◦

◦
◦
√

◦
◦
◦

◦
√
◦
√
√
√
√
◦
√
√
√
◦
◦
√

Table 27:
Proof of Proposition 5.1
The proof of this proposition is broken down into eight steps. Each step corresponds to one of the
transformations, where we prove all results pertaining to that transformation.
• CD. To show that a language L satisfies CD, we want to show that for any sentence Σ ∈ L
and any consistent term γ, we can construct in polytime a sentence which belongs to L and is
equivalent to Σ | γ.
– NNF, f-NNF, CNF and DNF. The property is trivially satisfied by these languages: If Σ
belongs to any of these languages, then replacing the literals of γ by a Boolean constant
in Σ results a sentence in the same language. In the case of DNF (resp. CNF), some
inconsistent terms (valid clauses) may result through conditioning, but these can be
removed easily in polynomial time.
– DNNF. It is sufficient to prove that conditioning preserves decomposability. For every
propositional sentences α, β and every consistent term γ, if α and β do not share variables,
then α|γ and β|γ do not share variables either since Vars(α|γ) ⊆ Vars(α) and Vars(β|γ) ⊆
Vars(β).
– d-NNF and d-DNNF. Since NNF and DNNF satisfy CD, it is sufficient to prove that conditioning preserves determinism, i.e. for every propositional formulas α, β and every consistent
term γ, if α ∧ β |= false, then (α|γ) ∧ (β|γ) |= false. If α ∧ β |= false, then for every term
γ, we have (α ∧ β) ∧ γ |= false. Since (α ∧ β) ∧ γ ≡ ((α ∧ β)|γ) ∧ γ, this implies that
((α ∧ β)|γ) ∧ γ |= false. Since γ is consistent and share no variable with (α ∧ β)|γ, it must
be the case that (α ∧ β)|γ is inconsistent. This is equivalent to state that (α|γ) ∧ (β|γ) |=
false.
– s-NNF and sd-DNNF. Since NNF satisfies CD, and since conditioning preserves decomposability and determinism, all we have to show is that conditioning also preserves smoothness. This follows immediately since for two propositional sentences α, β and a consistent
term γ, we have Vars(α) = Vars(β) only if Vars(α | γ) = Vars(β | γ).
– BDD, FBDD, OBDD and OBDD< . It is well–known that BDD satisfies CD—the conditioning
operation on binary decision diagrams is known as the restrict operation (Bryant, 1986).
To condition a sentence Σ in BDD on a consistent term γ, we replace every node labeled
by a variable in γ by one of its two children, according to the sign of the variable in γ.
The resulting sentence is also a BDD and is equivalent to Σ | γ. The same applies to FBDD,
OBDD and OBDD< .
– PI. The prime implicates of Σ ∧ γ can be computed in polytime when Σ is in prime
implicates form and γ is a term (see Proposition 36 in (Marquis, 2000)). Moreover, since
256

A Knowledge Compilation Map

PI satisfies FO (see below), the prime implicates of ∃Vars(γ).(Σ ∧ γ) can be computed in
polytime. But these are exactly the prime implicates of Σ | γ according to Lemma A.12.
Wn
– IP.
WnLet Σ = i=1 γi be a formula in prime implicants form. It is clear that the formula
( i=1 γi ) | γ is a DNF formula equivalent to Σ | γ. Now, our claim is
Wnthat the formula Σ∗
obtained by keeping only the logically weakest terms γi | γ among ( i=1 γi ) | γ is a prime
implicants formula equivalent to Σ | γ. Removing such terms clearly is truth-preserving.
Since generating Σ∗ requires only O(n2 ) entailment tests among terms, and since such
tests can be easily achieved in polynomial time, we obtain that IP satisfies CD. Now,
how to prove that Σ∗ is in prime implicants form? Since any pair of different terms of
Σ∗ cannot be compared w.r.t. logical entailment, the correctness of Quine’s consensus
algorithm for generating prime implicants shows that it is sufficient to prove that every
consensus among two terms of Σ∗ is inconsistent or entails another term of Σ∗. Let’s
recall that consensus is to DNF formulas what resolution is to CNF formulas. Since Σ
is in prime implicants form, every consensus among two terms of Σ is inconsistent or
entails another term of Σ. What happens to the terms (here, the prime implicants) of Σ
when conditioned by γ? All those containing the negation of a literal of γ are removed
and the remaining ones are shortened by removing from them every literal of γ. Hence,
for every pair of terms γ1 , γ2 of Σ, if there is no consensus between γ1 and γ2 , then
there is no consensus between γ1 |γ and γ2 |γ: conditioning cannot create new consensus.
Now, it remains to prove that no unproductive consensus between terms of Σ can be
rendered productive through conditioning. Formally, let γ1 = γ10 ∧ l and γ2 = γ20 ∧ ¬l be
two prime implicates of Σ s.t. l (resp. ¬l) does not appear in γ10 (resp. γ20 ). There is a
consensus γ10 ∧γ20 between γ1 and γ2 . Let us assume that both γ1 and γ2 have survived the
conditioning: this means that both γ1 |γ and γ2 |γ are consistent. Especially, l belongs to
γ1 |γ and ¬l belongs to γ2 |γ. Accordingly, there is a consensus between γ1 |γ and γ2 |γ. By
construction, this consensus is equivalent to (γ10 |γ)∧(γ20 |γ), hence equivalent to (γ10 ∧γ20 )|γ.
Now, if γ10 ∧ γ20 is inconsistent, then (γ10 ∧ γ20 )|γ is inconsistent as well and we are done.
Otherwise, let us assume that there exists a prime implicant γ3 of Σ s.t. γ10 ∧ γ20 |= γ3
holds. Necessarily, γ3 is preserved by the conditioning of Σ by γ. Otherwise, γ3 would
contain the negation of a literal of γ, but since every literal of γ3 is a literal of γ1 or a
literal of γ2 , γ2 and γ3 would not have both survived the conditioning. Since γ10 ∧ γ20 |= γ3
holds, we necessarily have (γ10 ∧ γ20 )|γ |= γ3 |γ. This completes the proof.
– MODS. Direct consequence of Lemma A.12 and the fact that MODS satisfies ∧BC and FO
(see below).
• FO.
– DNNF and DNF. It is known that DNNF satisfies FO (Darwiche, 2001a). It is also known
that DNF satisfies FO (Lang et al., 2000).
– NNF, s-NNF, f-NNF, d-NNF, BDD and CNF. Let Σ be a sentence in CNF. We now show that
if any of the previous languages satisfies FO, then we can test the consistency of Σ in
polytime. Since CNF does not satisfy CO (see Proposition 4.1), it then follows that none
of the previous languages satisfy FO unless P = NP. First, we note that Σ must also
belong to NNF and f-NNF. Moreover, Σ can be turned into a sentence in BDD in polytime
(Lemma A.8) or a sentence in s-NNF in polytime (see the proof of Lemma A.1). We
also have that Σ can be turned into a sentence in d-NNF in polytime since BDD ⊆ d-NNF.
Suppose now that one of the previous languages, call it L, satisfy FO. We can test the
consistency of Σ in polytime as follows:
∗ Convert Σ into a sentence Σ∗ in L in polytime (as shown above).
∗ Compute ∃Vars(Σ∗).Σ∗, which can be done in polytime by assumption.

257

Darwiche & Marquis

∗ Test the validity of ∃Vars(Σ∗).Σ∗, which can be done in polytime since the sentence
contains no variables—all we have to do is check whether the sentence evaluates to
true.
Finally, note that the definition of forgetting implies that a sentence Γ is consistent iff
∃Vars(Γ).Γ is valid, which completes the proof.
– d-DNNF and sd-DNNF. Follows immediately since none of these languages satisfies SFO
unless P = NP (see below).
– IP. Follows immediately since IP does not satisfy SFO.
– FBDD, OBDD and OBDD< . We will show that if FBDD (resp. OBDD, OBDD< ) satisfies FO,
then for every sentence Γ in DNF, there must exist an equivalent sentence Σ in FBDD (resp.
OBDD, OBDD< ), which size is polynomial in the size of Γ. This contradicts the fact that
FBDD (resp. OBDD, OBDD< ) 6≤ DNF—see Table 3.
Given a DNF Γ consisting of terms γ1 , ..., γn , we can convert each of these terms into equivalent FBDD (resp. OBDD, OBDD< ) sentences α1 , . . . , αn in polytime. Let {v1 , . . . , vn−1 }
be a set of variables that do not belong to P S. Construct a new set of variables
P S 0 = P S ∪ {v1 , . . . , vn−1 }. In case of OBDD and OBDD< , we also assume that these
new variables are earlier than variables P S in the ordering. Consider now the sentence
Σ = ∃{v1 , . . . , vn−1 }.∆1 , with respect to variables P S 0 , where ∆i is inductively defined
by:
∗ ∆i = αi , for i = n, and
∗ ∆i = (αi ∧ vi ) ∨ (∆i+1 ∧ ¬vi ), for i = 1, . . . , n − 1.
Clearly enough, an FBDD (resp. OBDD, OBDD< ) sentence equivalentWto ∆1 can W
be computed
n
n
in time polynomial in the input size. Moreover, we have Σ ≡ i=1 αi ≡ i=1 γi ≡ Γ.
Hence, if FBDD (resp. OBDD, OBDD< ) satisfies FO, then we can convert the DNF sentence Γ
into an equivalent FBDD (resp. OBDD, OBDD< ) which size is polynomial in the size of the
given DNF. This is impossible in general.
– PI. It is known that the prime implicates of ∃X.Σ are exactly the prime implicates of Σ
that do not contain any variable from X (see Proposition 55 in (Marquis, 2000)). Hence,
such prime implicates can be computed in time polynomial in the input size when Σ is
in prime implicates form.
– MODS. Given a MODS formula Σ and a subset X of P S, the formula obtained by removing
every leaf node (and the corresponding incoming edges) of Σ labeled by a literal x or ¬x
s.t. x ∈ X is a MODS representation of ∃X.Σ—this is an easy consequence of Propositions
18 and 20 from (Lang et al., 2000). See also the polytime operation of forgetting on DNNF,
as defined in (Darwiche, 2001a), which applies to MODS, since
MODS ⊆ DNNF, and which can be easily modified so it guarantees that the output is in
MODS when the input is also in MODS.
• SFO.
– DNNF, DNF, PI and MODS. Immediate from the fact that each of these languages satisfies
FO (see above).
– NNF, d-NNF, s-NNF, f-NNF, BDD, OBDD< and CNF. Direct from the fact that ∃x.Σ ≡ (Σ|x) ∨
(Σ|¬x) holds and the fact that any of these fragments satisfies CD and ∨BC.
– OBDD. Direct from the fact that only one OBDD sentence is considered in the transformation
and OBDD< satisfies SFO.
– d-DNNF, sd-DNNF and FBDD. Let α1 and α2 be two FBDD formulas. Let x be a variable
not included in Vars(α1 ) ∪ Vars(α2 ). The formula Σ = (x ∧ α1 ) ∨ (¬x ∧ α2 ) is a FBDD
258

A Knowledge Compilation Map

formula since decomposability and decision are preserved by this construction. Since ∃x.Σ
is equivalent to α1 ∨ α2 , if FBDD would satisfy SFO, it would satisfy ∨BC as well, but
this is not the case unless P = NP (see below). The same conclusion can be drawn for
d-DNNF. Hence, FBDD and d-DNNF do not satisfy SFO unless P = NP. Since every d-DNNF
formula can be turned in polynomial time into an equivalent sd-DNNF formula, we obtain
that sd-DNNF does not satisfy SFO unless P = NP.
– IP. Let us show that the number of prime implicants of ∃x.Σ can be exponentially greater
than the number of prime implicants of Σ. Let Σ0 be the following DNF formula:

Σ0 = 

k _
m
_


(pi ∧ qi,j ) ∨

i=1 j=1

k
^

¬pi .

i=1

Σ0 has (m + 1)k + mk primes implicants (Chandra & Markowsky, 1978). Now, let Σ be
the formula:

Σ=

k _
m
_


(x ∧ pi ∧ qi,j ) ∨ (¬x ∧

i=1 j=1

k
^

¬pi ).

i=1

Since Σ0 can be obtained from Σ by removing in every term of Σ every occurrence of x
and ¬x, Σ0 is equivalent to ∃{x}.Σ (see (Lang et al., 2000)). Now, Σ has only mk + 1
prime implicants; indeed, every term of it is a prime implicant, and the converse holds
since every term is maximal w.r.t. logical entailment and every consensus of two terms
is inconsistent. This completes the proof.
• ∧C.
– NNF, s-NNF, d-NNF, CNF. The property is trivially satisfied by these languages since determinism and smoothness are only concerned with or-nodes. Hence, if α1 , . . . , αn belong to
one of these languages, so is α1 ∧ . . . ∧ αn .
– BDD. It is well–known that the conjunction of two BDDs α and β can be easily computed
by connecting the 1-sink of α to the root of β (see proof of Lemma A.8). The size of the
resulting BDD is just the sum of the sizes of the respective BDDs of α and β. Accordingly,
we can repeat this operation n times in time polynomial in the input size.
– f-NNF. Direct from the fact that f-NNF does not satisfy ∧BC.
– FBDD, OBDD, OBDD< , DNF, PI and IP. It is straightforward to convert a clause into an
equivalent formula in any of these languages in polynomial time. In the proof of Proposition 3.1, we show specific CNF formulas which cannot be turned into an equivalent FBDD
(resp. OBDD, OBDD< , DNF, PI and IP) formulas in polynomial space (see Tables 9 and 10).
Hence, such conversion cannot be accomplished in polynomial time either. This implies
that none of FBDD, OBDD, OBDD< , DNF, PI and IP satisfies ∧C.
– DNNF, d-DNNF and sd-DNNF. Direct from the fact that none of these languages satisfy
∧BC unless
P = NP.
Vn
– MODS. Let Σ = i=1 Σi , where Σi = (xi,1 ∨ xi,2 ), i ∈ 1..n. Each Σi has 3 models over
Vars(Σi ). Since Σ has 3n models, it does not have a MODS representation of size polynomial
in the input size.
• ∧BC.

259

Darwiche & Marquis

– NNF, s-NNF, d-NNF, BDD and CNF. Immediate since each of these languages satisfy ∧C (see
above).
– DNNF, d-DNNF, sd-DNNF, FBDD and OBDD. Checking whether the conjunction of two OBDD<
formulas α1 and α2 (w.r.t. two different variable orderings <) is consistent is NP-complete
(see Lemma 8.14 in (Meinel & Theobald, 1998)). Since OBDD satisfies CO, it cannot satisfy
∧BC unless P = NP. Since OBDD ⊆ FBDD ⊆ d-DNNF ⊆ DNNF, and d-DNNF and DNNF satisfy
CO, none of them can satisfy ∧BC unless P = NP. Finally, since every d-DNNF formula
can be turned in polynomial time into an equivalent smoothed d-DNNF formula and since
sd-DNNF satisfies CO, it cannot be the case that sd-DNNF satisfy ∧BC unless P = NP.
– OBDD< . Well-known fact (Bryant, 1986).
Vn−1
Wn−1
– f-NNF. Let α1 = i=0 (x2i ∨ x2i+1 ) be a CNF formula and α2 = i=0 (x02i ∧ x02i+1 ) a DNF
formula. α1 has 2n essential prime implicants and n essential prime implicates (see the
proof of Proposition 3.1, Table 9). By duality, α2 has n essential prime implicants and 2n
essential prime implicates. Now, α1 and α2 are two f-NNF formulas. By Lemma A.13, we
know that every f-NNF formula β can be turned in polynomial time into a CNF formula or
a DNF formula. If f-NNF would satisfy ∧BC, then a f-NNF formula β s.t. β ≡ α1 ∧α2 could
be computed in time polynomial in the input size. Hence, either a CNF formula equivalent
to α1 ∧ α2 or a DNF formula equivalent to α1 ∧ α2 could be computed in polytime. But
this is impossible since α1 ∧ α2 has n + 2n essential prime implicates and n ∗ 2n essential
prime implicants. Hence every CNF (resp. DNF ) formula equivalent to α1 ∧ α2 has a size
exponential in |α1 | + |α2 |.
Note that in the case where the two f-NNF formulas α1 and α2 into consideration can
be turned in polynomial time into either two CNF formulas or two DNF formulas, then a
f-NNF formula equivalent to α1 ∧ α2 can be computed in time polynomial in the input
size (this is obvious when two CNF formulas are considered and the next item of the proof
shows how this can be achieved when two DNF formulas are considered).
– DNF and MODS. If α1 and α2 are sentences in one of these languages L, then we can construct
a sentence in L which is equivalent to α1 ∧ α2 by simply taking all the conjunctions of one
term from α1 and one term from α2 , while removing redundant literals in the resulting
terms and removing any inconsistent terms in the result. The disjunction of all the
resulting terms is a sentence from L equivalent to α1 ∧ α2 and it has been computed in
polynomial time.
Vk Vm
Wk
– PI. Let α1 = i=1 pi and α2 = i=1 j=1 (¬pi ∨qi,j ). Sentence α1 has one prime implicate
and α2 has m ∗ k prime implicates. But α1 ∧ α2 has (m + 1)k + m ∗ k prime implicates
(Chandra & Markowsky, 1978).
– IP. Let IP (α) be the set of prime implicants for α. We have IP (α1 ∧ α2 ) = max({β1 ∧
β2 | β1 ∈ IP (α1 ), β2 ∈ IP (α2 )}, |=) (up to logical equivalence). See e.g., (dual of) Proposition 40 in (Marquis, 2000).

260

A Knowledge Compilation Map

• ∨C.
– NNF, s-NNF, DNNF and DNF. The property is trivially satisfied by these languages since
decomposability is only concerned with and-nodes, and since every NNF formula can be
turned in polynomial time into an equivalent smoothed NNF formula.
– d-NNF and BDD. Direct consequence from the fact that d-NNF and BDD satisfies both ∧C
and ¬C. Especially, it is well-known that the disjunction of two BDDs α and β can
be easily computed by connecting the 0-sink of α to the root of β (see the proof of
Lemma A.8). The size of the resulting BDD is just the sum of the sizes of the respective
BDDs of α and β. Accordingly, we can repeat this operation n times in time polynomial
in the input size.
– f-NNF. Since f-NNF does not satisfy ∧C but satisfies ¬C, it cannot satisfy ∨C (due to
De Morgan’s laws).
– FBDD, OBDD, OBDD< , CNF, PI, IP and MODS. It is straightforward to convert any term into
an equivalent formula from any of the previous languages in polynomial time. In the
proof of Proposition 3.1, we show specific DNF formulas which cannot be turned into
equivalent FBDD (resp. OBDD, OBDD< , CNF , PI, IP and MODS) formulas in polynomial space
(see Tables 9, 10 and 15). Hence, the conversion cannot be accomplished in polynomial
time either. This implies that none of FBDD, OBDD, OBDD< , CNF, PI, IP and MODS satisfies
∨C.
– d-DNNF and sd-DNNF. Immediate form the fact that none of these classes satisfies ∨BC
unless P = NP (see below).
• ∨BC.
– NNF, d-NNF, DNNF, s-NNF, BDD and DNF. Immediate since each of these languages satisfies
∨C.
– OBDD< . Well-known fact (Bryant, 1986).
– OBDD, FBDD, d-DNNF and sd-DNNF. Checking whether the conjunction of two OBDD< formulas α1 and α2 (w.r.t. two different variable orderings <) is consistent is NP-complete (see
Lemma 8.14 in (Meinel & Theobald, 1998)). Now, α1 ∧ α2 is inconsistent iff ¬α1 ∨ ¬α2
is valid. Since OBDD satisfies ¬C, an OBDD formula equivalent to ¬α1 (resp. ¬α2 ) can
be computed in time polynomial in |α1 | (resp. |α2 |). Since OBDD ⊆ FBDD ⊆ d-DNNF, the
resulting formulas are also FBDD and d-DNNF formulas. If OBDD (resp. FBDD, d-DNNF)
would satisfy ∨BC, then an OBDD (resp. FBDD, d-DNNF) formula equivalent to ¬α1 ∨ ¬α2
could be computed in time polynomial in |α1 | + |α2 |. But since d-DNNF satisfies VA,
this is impossible unless P = NP. Finally, since every d-DNNF formula can be turned in
polynomial time into an equivalent sd-DNNF formula, sd-DNNF cannot satisfy ∨BC unless
P = NP.
– f-NNF. Since f-NNF does not satisfy ∧BC but satisfies ¬C, it cannot satisfy ∨BC (due
to De Morgan’s laws).
– CNF. If α1 and α2 are two CNF sentences, then we can construct a CNF sentence which
is equivalent to α1 ∨ α2 by simply taking all the disjunctions of one clause from α1 and
one clause from α2 , while removing redundant literals inside the resulting clauses and
removing any valid clause in the result. The conjunction of all the resulting clauses is a
CNF sentence equivalent to α1 ∨ α2 , and it has been computed in polynomial time.
– PI. Let PI (α) be the set of prime implicates for sentence α. We have PI (α1 ∨ α2 ) =
min({β1 ∨ β2 | β1 ∈ PI (α1 ), β2 ∈ PI (α2 )}, |=). See Proposition 40 in (Marquis, 2000).

261

Darwiche & Marquis

Vk
Wk Wm
– IP. Let α1 = i=1 pi and α2 = i=1 j=1 (¬pi ∧qi,j ). Sentence α1 has one prime implicant
and α2 has m ∗ k prime implicants. But α1 ∨ α2 has (m + 1)k + m ∗ k prime implicants
(Chandra & Markowsky, 1978).
Vn
– MODS. Let α1 = i=1 xi and α2 = y. Sentence α1 has 1 model over Vars(α1 ) and α2 has
1 model over Vars(α2 ). But α1 ∨ α2 has 2n + 1 models over Vars(α1 ) ∪ Vars(α2 ).
• ¬C.
– NNF, s-NNF, f-NNF, BDD, FBDD, OBDD and OBDD< . The property is obviously satisfied by
NNF. s-NNF also satisfies ¬C since every NNF formula can be turned in polynomial time
into an equivalent s-NNF formula. f-NNF satisfies ¬C since applying De Morgan’s laws
on a f-NNF formula results in a f-NNF formula. Finally, for all the forms of BDDs, it is
sufficient to switch the labels of the sinks to achieve negation (Bryant, 1986).
– CNF. Because the negation of a DNF formula is a CNF formula that can be computed in
polynomial time, if CNF would satisfy ¬C, then it would be possible to turn any DNF
formula into an equivalent CNF formula in polynomial time (by involution of negation).
But we know that it is not possible in polynomial space since CNF 6≤ DNF(see the proof of
Proposition 3.1). Hence, CNF does not satisfy ¬C.
– DNF. Dual of the proof just above (just replace CNF by DNF and vice-versa).
Vn−1
– PI. The formula Σn = i=0 (x2i ∨ x2i+1 ) is in prime implicates form (see the proof of
Proposition 3.1, Table 9). This formula has exponentially many prime implicants, that
are just the negations of the prime implicates of ¬Σn . Since ¬Σn has exponentially many
prime implicates, it cannot be the case that PI satisfies ¬C.
– IP. We just have to take the dual of the above proof (prime implicates case). The formula
Wn−1
Σn = i=0 (x2i ∧x2i+1 ) is in prime implicants form. This formula has exponentially many
prime implicates, that are just the negations of the prime implicants of ¬Σn . Since ¬Σn
has exponentially many prime implicants, it cannot be the case that IP satisfies ¬C.
– DNNF. The negation of any CNF formula can be computed in polynomial time as a DNF
formula, hence as a DNNF formula. If DNNF would satisfy ¬C, then it would be possible
to turn a CNF formula into an equivalent DNNF one (by involution of negation). Because
DNNF satisfies CO, we would have P = NP.
– d-NNF. Following is a procedure for negating a d-NNF sentence ∆:9
∗ Traverse nodes in the DAG of ∆, visiting the children of a node before you visit the
node itself. When visiting a node, construct its negation as follows:
· true is the negation of false.
· false is the negation of true.
· ∧(N10 , . . . , Nk0 ) is the negation of ∨(N1 , . . . , Nk ). Here, Ni0 is the node representing
the negation of Ni .
· ∨(∧(N10 , M1 ), . . . , ∧(Nk0 , Mk )) is the negation of ∧(N1 , . . . , Nk ). Here, Ni0 is the
node representing the negation of Ni , and Mi is a node representing the conjunction N1 ∧ . . . ∧ Ni−1 .
∗ Return the negation of the root of d-NNF ∆.
We can implement the above four steps so that we when we visit a node with k children,
we only construct O(k) nodes and O(k) edges.10 Hence, the procedure complexity is
9. Mark Hopkins pointed us to this procedure.
10. We assume that any or-node (resp. and-node) with less than two children is removed and replaced by its unique
child or by f alse (resp. true) if it has no children. This simplification process is equivalence-preserving and it
can be achieved in time linear in the size of the input DAG.

262

A Knowledge Compilation Map

linear in the size of the original d-NNF. It is easy to check that the result is equivalent to
the negation of the given d-NNF sentence and is also in d-NNF.
– sd-DNNF and d-DNNF. Unknown.
Vn
Sn
– MODS. Σ = Si=1 xi has only one model over i=1 {xi } but its negation ¬Σ has 2n − 1
n
models over i=1 {xi }. Hence MODS cannot satisfy ¬C. 2

References
A. Cimmati, E. Giunchiglia, F. G., & Traverso, P. (1997). Planning via model checking: a decision
procedure for AR. In Proceedings of the 4th European Conference on Planning (ECP’97), pp.
130–142.
Blum, M., Chandra, A. K., & Wegman, M. N. (1980). Equivalence of free Boolean graphs can be
decided probabilistically in polynomial time. Information Processing Letters, 10 (2), 80–82.
Boole, G. (1854). An investigation of the laws of thought. Walton and Maberley, London.
Boufkhad, Y., Grégoire, E., Marquis, P., Mazure, B., & Saı̈s, L. (1997). Tractable cover compilations.
In Proc. of the 15th International Joint Conference on Artificial Intelligence (IJCAI’97), pp.
122–127, Nagoya.
Bryant, R. E. (1986). Graph-based algorithms for Boolean function manipulation. IEEE Transactions on Computers, C-35, 677–691.
Bryant, R. E. (1992). Symbolic Boolean manipulation with ordered binary decision diagrams. ACM
Computing Surveys, 24 (3), 293–318.
Cadoli, M., & Donini, F. (1997). A survey on knowledge compilation. AI Communications, 10,
137–150. (printed in 1998).
Cadoli, M., Donini, F., Liberatore, P., & Schaerf, M. (1996). Comparing space efficiency of propositional knowledge representation formalisms. In Proc. of the 5rd International Conference on
Knowledge Representation and Reasoning (KR’96), pp. 364–373.
Chandra, A., & Markowsky, G. (1978). On the number of prime implicants. Discrete Mathematics,
24, 7–11.
Darwiche, A. (1999). Compiling knowledge into decomposable negation normal form. In Proceedings
of International Joint Conference on Artificial Intelligence (IJCAI’99), pp. 284–289. Morgan
Kaufmann, California.
Darwiche, A. (2001a). Decomposable negation normal form. Journal of the ACM, 48 (4), 608–647.
Darwiche, A. (2001b). On the tractability of counting theory models and its application to belief
revision and truth maintenance. Journal of Applied Non-Classical Logics, 11 (1-2), 11–34.
Darwiche, A., & Huang, J. (2002). Testing equivalence probabilistically. Tech. rep. D–123, Computer
Science Department, UCLA, Los Angeles, Ca 90095.
de Kleer, J. (1992). An improved incremental algorithm for generating prime implicates. In Proc.
of the 10th National Conference on Artificial Intelligence (AAAI’92), pp. 780–785, San Jose,
California.
Dechter, R., & Rish, I. (1994). Directional resolution: the Davis-Putnam procedure, revisited. In
Proceedings of the Fourth International Conference on Principles of Knowledge Representation
and Reasoning (KR’94), pp. 134–145, Bonn.
del Val, A. (1994). Tractable databases: How to make propositional unit resolution complete through
compilation. In Proceedings of the International Conference on Principles of Knowledge Representation and Reasoning (KR’94), pp. 551–561. Morgan Kaufmann Publishers, Inc., San
Mateo, California.
263

Darwiche & Marquis

Gergov, J., & Meinel, C. (1994a). Efficient analysis and manipulation of obdds can be extended to
fbdds. IEEE Transactions on Computers, 43 (10), 1197–1209.
Gergov, J., & Meinel, C. (1994b). On the complexity of analysis and manipulation of Boolean
functions in terms of decision diagrams. Information Processing Letters, 50, 317–322.
Gogic, G., Kautz, H., Papadimitriou, C., & Selman, B. (1995). The comparative linguistics of
knowledge representation. In Proc. of the 14th International Joint Conference on Artificial
Intelligence (IJCAI’95), pp. 862–869, Montreal.
Herzig, A., & Rifi, O. (1999). Propositional belief base update and minimal change. Artificial
Intelligence, 115 (1), 107–138.
Karp, R., & Lipton, R. (1980). Some connections between non-uniform and uniform complexity
classes. In Proc. of the 12th ACM Symposium on Theory of Computing (STOC’80), pp. 302–
309.
Khardon, R., & Roth, D. (1997). Learning to reason. Journal of the ACM, 44 (5), 697–725.
Lang, J., Liberatore, P., & Marquis, P. (2000). Propositional independence—Part I: formula–variable
independence and forgetting. Submitted.
Madre, J. C., & Coudert, O. (1992). A new method to compute prime and essential prime implicants
of boolean functions. In Advanced research in VLSI and parallel systems, Proceedings of the
Brown/MIT conference, pp. 113–128.
Marquis, P. (2000). Consequence finding algorithms, Vol. 5 of Handbook of Defeasible Reasoning
and Uncertainty Management Systems: Algorithms for Uncertain and Defeasible Reasoning.
Kluwer Academic Publishers.
Marquis, P. (1995). Knowledge compilation using theory prime implicates. In Proc. International
Joint Conference on Artificial Intelligence (IJCAI’95), pp. 837–843. Morgan Kaufmann Publishers, Inc., San Mateo, California.
Meinel, C., & Theobald, T. (1998). Algorithms and Data Structures in VLSI Design: OBDD Foundations and Applications. Springer.
Papadimitriou, C. (1994). Computational complexity. Addison–Wesley.
Quine, W. (1955). A way to simplify truth functions. American Mathematical Monthly, 52, 627–631.
Quine, W. (1959). On cores and prime implicants of truth functions. American Mathematical
Monthly, 66, 755–760.
Reiter, R., & de Kleer, J. (1987). Foundations of assumption-based truth maintenance systems:
Preliminary report. In Proceedings of the Fifth National Conference on Artificial Intelligence
(AAAI), pp. 183–188.
Roth, D. (1996). On the hardness of approximate reasoning. Artificial Intelligence, 82 (1-2), 273–302.
Schrag, R. (1996). Compilation for critically constrained knowledge bases. In Proc. of the 13th
National Conference on Artificial Intelligence (AAAI’96), pp. 510–515, Portland, Oregan.
Selman, B., & Kautz, H. (1996). Knowledge compilation and theory approximation. Journal of the
Association for Computing Machinery, 43, 193–224.
Simon, L., & del Val, A. (2001). Efficient consequence finding. In Proc. of the 17th International
Joint Conference on Artificial Intelligence (IJCAI’01), pp. 359–365, Seattle (WA).
Wegener, I. (1987). The complexity of boolean functions. Wiley-Teubner, Stuttgart.

264

Journal of Artificial Intelligence Research 17 (2002) 379-449

Submitted 4/02; published 12/02

Specific-to-General Learning for Temporal Events
with Application to Learning Event Definitions from Video
Alan Fern
Robert Givan
Jeffrey Mark Siskind

AFERN @ PURDUE . EDU
GIVAN @ PURDUE . EDU
QOBI @ PURDUE . EDU

School of Electrical and Computer Engineering
Purdue University, West Lafayette, IN 47907 USA

Abstract
We develop, analyze, and evaluate a novel, supervised, specific-to-general learner for a simple temporal logic and use the resulting algorithm to learn visual event definitions from video
sequences. First, we introduce a simple, propositional, temporal, event-description language called
AMA that is sufficiently expressive to represent many events yet sufficiently restrictive to support
learning. We then give algorithms, along with lower and upper complexity bounds, for the subsumption and generalization problems for AMA formulas. We present a positive-examples–only
specific-to-general learning method based on these algorithms. We also present a polynomialtime–computable “syntactic” subsumption test that implies semantic subsumption without being
equivalent to it. A generalization algorithm based on syntactic subsumption can be used in place of
semantic generalization to improve the asymptotic complexity of the resulting learning algorithm.
Finally, we apply this algorithm to the task of learning relational event definitions from video and
show that it yields definitions that are competitive with hand-coded ones.

1. Introduction
Humans conceptualize the world in terms of objects and events. This is reflected in the fact that
we talk about the world using nouns and verbs. We perceive events taking place between objects,
we interact with the world by performing events on objects, and we reason about the effects that
actual and hypothetical events performed by us and others have on objects. We also learn new
object and event types from novel experience. In this paper, we present and evaluate novel implemented techniques that allow a computer to learn new event types from examples. We show results
from an application of these techniques to learning new event types from automatically constructed
relational, force-dynamic descriptions of video sequences.
We wish the acquired knowledge of event types to support multiple modalities. Humans can
observe someone faxing a letter for the first time and quickly be able to recognize future occurrences
of faxing, perform faxing, and reason about faxing. It thus appears likely that humans use and
learn event representations that are sufficiently general to support fast and efficient use in multiple
modalities. A long-term goal of our research is to allow similar cross-modal learning and use of
event representations. We intend the same learned representations to be used for vision (as described
in this paper), planning (something that we are beginning to investigate), and robotics (something
left to the future).
A crucial requirement for event representations is that they capture the invariants of an event
type. Humans classify both picking up a cup off a table and picking up a dumbbell off the floor
as picking up. This suggests that human event representations are relational. We have an abstract

c 2002 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

F ERN , G IVAN , & S ISKIND

relational notion of picking up that is parameterized by the participant objects rather than distinct
propositional notions instantiated for specific objects. Humans also classify an event as picking
up no matter whether the hand is moving slowly or quickly, horizontally or vertically, leftward or
rightward, or along a straight path or circuitous one. It appears that it is not the characteristics of
participant-object motion that distinguish picking up from other event types. Rather, it is the fact
that the object being picked up changes from being supported by resting on its initial location to
being supported by being grasped by the agent. This suggests that the primitive relations used to
build event representations are force dynamic (Talmy, 1988).
Another desirable property of event representations is that they be perspicuous. Humans can
introspect and describe the defining characteristics of event types. Such introspection is what allows us to create dictionaries. To support such introspection, we prefer a representation language
that allows such characteristics to be explicitly manifest in event definitions and not emergent consequences of distributed parameters as in neural networks or hidden Markov models.
We develop a supervised learner for an event representation possessing these desired characteristics as follows. First, we present a simple, propositional, temporal logic called AMA that is a
sublanguage of a variety of familiar temporal languages (e.g. linear temporal logic, or LTL Bacchus & Kabanza, 2000, event logic Siskind, 2001). This logic is expressive enough to describe a
variety of interesting temporal events, but restrictive enough to support an effective learner, as we
demonstrate below. We proceed to develop a specific-to-general learner for the AMA logic by giving algorithms and complexity bounds for the subsumption and generalization problems involving
AMA formulas. While we show that semantic subsumption is intractable, we provide a weaker syntactic notion of subsumption that implies semantic subsumption but can be checked in polynomial
time. Our implemented learner is based upon this syntactic subsumption.
We next show means to adapt this (propositional) AMA learner to learn relational concepts.
We evaluate the resulting relational learner in a complete system for learning force-dynamic event
definitions from positive-only training examples given as real video sequences. This is not the first
system to perform visual-event recognition from video. We review prior work and compare it to
the current work later in the paper. In fact, two such prior systems have been built by one of the
authors. H OWARD (Siskind & Morris, 1996) learns to classify events from video using temporal,
relational representations. But these representations are not force dynamic. L EONARD (Siskind,
2001) classifies events from video using temporal, relational, force-dynamic representations but
does not learn these representations. It uses a library of hand-code representations. This work adds
a learning component to L EONARD , essentially duplicating the performance of the hand-coded
definitions automatically.
While we have demonstrated the utility of our learner in the visual-event–learning domain, we
note that there are many domains where interesting concepts take the form of structured temporal sequences of events. In machine planning, macro-actions represent useful temporal patterns of
action. In computer security, typical application behavior, represented perhaps as temporal patterns of system calls, must be differentiated from compromised application behavior (and likewise
authorized-user behavior from intrusive behavior).
In what follows, Section 2 introduces our application domain of recognizing visual events and
provides an informal description of our system for learning event definitions from video. Section 3
introduces the AMA language, syntax and semantics, and several concepts needed in our analysis
of the language. Section 4 develops and analyzes algorithms for the subsumption and generalization
problems in the language, and introduces the more practical notion of syntactic subsumption. Sec380

L EARNING T EMPORAL E VENTS

tion 5 extends the basic propositional learner to handle relational data and negation, and to control
exponential run-time growth. Section 6 presents our results on visual-event learning. Sections 7
and 8 compare to related work and conclude.

2. System Overview
This section provides an overview of our system for learning to recognize visual events from video.
The aim is to provide an intuitive picture of our system before providing technical details. A formal
presentation of our event-description language, algorithms, and both theoretical and empirical results appears in Sections 3–6. We first introduce the application domain of visual-event recognition
and the L EONARD system, the event recognizer upon which our learner is built. Second, we describe
how our positive-only learner fits into the overall system. Third, we informally introduce the AMA
event-description language that is used by our learner. Finally, we give an informal presentation of
the learning algorithm.
2.1 Recognizing Visual Events
L EONARD (Siskind, 2001) is a system for recognizing visual events from video camera input—
an example of a simple visual event is “a hand picking up a block.” This research was originally
motivated by the problem of adding a learning component to L EONARD—allowing L EONARD to
learn to recognize an event by viewing example events of the same type. Below, we give a high-level
description of the L EONARD system.
L EONARD is a three-stage pipeline depicted in Figure 1. The raw input consists of a video-frame
image sequence depicting events. First, a segmentation-and-tracking component transforms this
input into a polygon movie: a sequence of frames, each frame being a set of convex polygons placed
around the tracked objects in the video. Figure 2a shows a partial video sequence of a pick up event
that is overlaid with the corresponding polygon movie. Next, a model-reconstruction component
transforms the polygon movie into a force-dynamic model. This model describes the changing
support, contact, and attachment relations between the tracked objects over time. Constructing
this model is a somewhat involved process as described in Siskind (2000). Figure 2b shows a
visual depiction of the force-dynamic model corresponding to the pick up event. Finally, an eventrecognition component armed with a library of event definitions determines which events occurred
in the model and, accordingly, in the video. Figure 2c shows the text output and input of the
event-recognizer for the pick up event. The first line corresponds to the output which indicates
the interval(s) during which a pick up occurred. The remaining lines are the text encoding of the
event-recognizer input (model-reconstruction output), indicating the time intervals in which various
force-dynamic relations are true in the video.
The event-recognition component of L EONARD represents event types with event-logic formulas like the following simplified example, representing x picking up y off of z .

4

P ICK U P (x; y; z ) = (S UPPORTS (z; y ) ^ C ONTACTS (z; y )); (S UPPORTS (x; y ) ^ ATTACHED (x; y ))

This formula asserts that an event of x picking up y off of z is defined as a sequence of two states
where z supports y by way of contact in the first state and x supports y by way of attachment in
the second state. S UPPORTS , C ONTACTS , and ATTACHED are primitive force-dynamic relations.
This formula is a specific example of the more general class of AMA formulas that we use in our
learning.
381

F ERN , G IVAN , & S ISKIND

image
sequence

Segmentation
and Tracking

polygon−scene
sequence

Model
Reconstruction

training
models
event
labels

model
sequence

Event
Learner

Event
Classification

event
labels

learned event
definitions

Figure 1: The upper boxes represent the three primary components of L EONARD’s pipeline. The
lower box depicts the event-learning component described in this paper. The input to the
learning component consists of training models of target events (e.g., movies of pick up
events) along with event labels (e.g., P ICK U P (hand; red; green)) and the output is an
event definition (e.g., a temporal logic formula defining P ICK U P (x; y; z )).
2.2 Adding a Learning Component
Prior to the work reported in this paper, the definitions in L EONARD ’s event-recognition library
were hand coded. Here, we add a learning component to L EONARD so that it can learn to recognize
events. Figure 1 shows how the event learner fits into the overall system. The input to the event
learner consists of force-dynamic models from the model-reconstruction stage, along with event
labels, and its output consists of event definitions which are used by the event recognizer. We take
a supervised-learning approach where the force-dynamic model-reconstruction process is applied
to training videos of a target event type. The resulting force-dynamic models along with labels
indicating the target event type are then given to the learner which induces a candidate definition of
the event type.
For example, the input to our learner might consist of two models corresponding to two videos,
one of a hand picking up a red block off of a green block with label P ICK U P (hand; red; green) and
one of a hand picking up a green block off of a red block with label P ICK U P (hand; green; red)—the
output would be a candidate definition of P ICK U P (x; y; z ) that is applicable to previously unseen
pick up events. Note that our learning component is positive-only in the sense that when learning
a target event type it uses only positive training examples (where the target event occurs) and does
not use negative examples (where the target event does not occur). The positive-only setting is of
interest as it appears that humans are able to learn many event definitions given primarily or only
positive examples. From a practical standpoint, a positive-only learner removes the often difficult
task of collecting negative examples that are representative of what is not the event to be learned
(e.g., what is a typical “non-pickup” event?).
The construction of our learner involves two primary design choices. First, we must choose an
event representation language to serve as the learner’s hypothesis space (i.e., the space of event definitions it may output). Second, we must design an algorithm for selecting a “good” event definition
from the hypothesis space given a set of training examples of an event type.
2.3 The AMA Hypothesis Space
The full event logic supported by L EONARD is quite expressive, allowing the specification of a
wide variety of temporal patterns (formulas). To help support successful learning, we use a more
382

L EARNING T EMPORAL E VENTS

(a)

Frame 0

Frame 1

Frame 2

Frame 13

Frame 14

Frame 20

Frame 0

Frame 1

Frame 2

Frame 13

Frame 14

Frame 20

(b)

(PICK-UP HAND RED GREEN)@{[[0,1],[14,22])}

(c)

(SUPPORTED? RED)@{[[0:22])}
(SUPPORTED? HAND)@{[[1:13]), [[24:26])}
(SUPPORTS? RED HAND)@{[[1:13]), [[24:26])}
(SUPPORTS? HAND RED)@{[[13:22])}
(SUPPORTS? GREEN RED)@{[[0:14])}
(SUPPORTS? GREEN HAND)@{[[1:13])}
(CONTACTS? RED GREEN)@{[[0:2]), [[6:14])}
(ATTACHED? RED HAND)@{[[1:26])}
(ATTACHED? RED GREEN)@{[[1:6])}

Figure 2: L EONARD recognizes a pick up event. (a) Frames from the raw video input with the automatically generated polygon movie overlaid. (b) The same frames with a visual depiction
of the automatically generated force-dynamic properties. (c) The text input/output of the
event classifier corresponding to the depicted movie. The top line is the output and the
remaining lines make up the input that encodes the changing force-dynamic properties.
GREEN represents the block on the table and RED represents the block being picked up.

383

F ERN , G IVAN , & S ISKIND

restrictive subset of event logic, called AMA, as our learner’s hypothesis space. This subset excludes
many practically useless formulas that may “confuse” the learner, while still retaining substantial
expressiveness, thus allowing us to represent and learn many useful event types. Our restriction to
AMA formulas is a form of syntactic learning bias.
The most basic AMA formulas are called states which express constant properties of time intervals of arbitrary duration. For example, S UPPORTS (z; y ) ^ C ONTACTS (z; y ) is a state which tells us
that z must support and be in contact with y . In general, a state can be the conjunction of any number
of primitive propositions (in this case force-dynamic relations). Using AMA we can also describe
sequences of states. For example, (S UPPORTS (z; y ) ^ C ONTACTS (z; y )) ; (S UPPORTS (x; y ) ^
ATTACHED (x; y )) is a sequence of two states, with the first state as given above and the second
state indicating that x must support and be attached to y . This formula is true whenever the first
state is true for some time interval, followed immediately by the second state being true for some
time interval “meeting” the first time interval. Such sequences are called MA timelines since they
are the Meets of Ands. In general, MA timelines can contain any number of states. Finally, we can
conjoin MA timelines to get AMA formulas (Ands of MA’s). For example, the AMA formula

[(S UPPORTS (z; y) ^ C ONTACTS (z; y)) ; (S UPPORTS (x; y) ^ ATTACHED (x; y))] ^
[(S UPPORTS (u; v) ^ ATTACHED (u; v)) ; (S UPPORTS (w; v) ^ C ONTACTS (w; v))]
defines an event where two MA timelines must be true simultaneously over the same time interval.
Using AMA formulas we can represent events by listing various property sequences (MA timelines),
all of which must occur in parallel as an event unfolds. It is important to note, however, that the
transitions between states of different timelines in an AMA formula can occur in any relation to one
another. For example, in the above AMA formula, the transition between the two states of the first
timeline can occur before, after, or exactly at the transition between states of the second timeline.
An important assumption leveraged by our learner is that the primitive propositions used to construct states describe liquid properties (Shoham, 1987). For our purposes, we say that a property is
liquid if when it holds over a time-interval it holds over all of its subintervals. The force-dynamic
properties produced by L EONARD are liquid—e.g., if a hand S UPPORTS a block over an interval
then clearly the hand supports the block over all subintervals. Because primitive propositions are
liquid, properties described by states (conjunctions of primitives) are also liquid. However, properties described by MA and AMA formulas are not, in general, liquid.
2.4 Specific-to-General Learning from Positive Data
Recall that the examples that we wish to classify and learn from are force-dynamic models, which
can be thought of (and are derived from) movies depicting temporal events. Also recall that our
learner outputs definitions from the AMA hypothesis space. Given an AMA formula, we say that
it covers an example model if it is true in that model. For a particular target event type (such as
P ICK U P ), the ultimate goal is for the learner to output an AMA formula that covers an example
model if and only if the model depicts an instance of the target event type. To understand our
learner, it is useful to define a generality relationship between AMA formulas. We say that AMA
formula 	1 is more general (less specific) than AMA formula 	2 if and only if 	2 covers every
example that 	1 covers (and possibly more).1
1. In our formal analysis, we will use two different notions of generality (semantic and syntactic). In this section, we
ignore such distinctions. We note, however, that the algorithm we informally describe later in this section is based on
the syntactic notion of generality.

384

L EARNING T EMPORAL E VENTS

If the only learning goal is to find an AMA formula that is consistent with a set of positiveonly training data, then one result can be the trivial solution of returning the formula that covers
all examples. Rather than fix this problem by adding negative training examples (which will rule
out the trivial solution), we instead change the learning goal to be that of finding the least-general
formula that covers all of the positive examples.2 This learning approach has been pursued for a
variety of different languages within the machine-learning literature, including clausal first-order
logic (Plotkin, 1971), definite clauses (Muggleton & Feng, 1992), and description logic (Cohen &
Hirsh, 1994). It is important to choose an appropriate hypothesis space as a bias for this learning
approach or the hypothesis returned may simply be (or resemble) one of two extremes, either the
disjunction of the training examples or the universal hypothesis that covers all examples. In our
experiments, we have found that, with enough training data, the least-general AMA formula often
converges usefully.
We take a standard specific-to-general machine-learning approach to finding the least-general
AMA formula that covers a set of positive examples. The approach relies on the computation of two
functions: the least-general covering formula (LGCF) of an example model and the least-general
generalization (LGG) of a set of AMA formulas. The LGCF of an example model is the least general
AMA formula that covers the example. Intuitively, the LGCF is the AMA formula that captures the
most information about the model. The LGG of any set of AMA formulas is the least-general AMA
formula that is more general than each formula in the set. Intuitively, the LGG of a formula set is
the AMA formula that captures the largest amount of common information among the formulas.
Viewed differently, the LGG of a formula set covers all of the examples covered by those formulas,
but covers as few other examples as possible (while remaining in AMA).3
The resulting specific-to-general learning approach proceeds as follows. First, use the LGCF
function to transform each positive training model into an AMA formula. Second, return the LGG
of the resulting formulas. The result represents the least-general AMA formula that covers all of
the positive training examples. Thus, to specify our learner, all that remains is to provide algorithms for computing the LGCF and LGG for the AMA language. Below we informally describe
our algorithms for computing these functions, which are formally derived and analyzed in Sections 3.4 and 4.
2.5 Computing the AMA LGCF
To increase the readability of our presentation, in what follows, we dispense with presenting examples where the primitive properties are meaningfully named force-dynamic relations. Rather, our
examples will utilize abstract propositions such as a and b. In our current application, these propositions correspond exclusively to force-dynamic properties, but may not for other applications. We
now demonstrate how our system computes the LGCF of an example model.
Consider the following example model: fa@[1; 4]; b@[3; 6]; c@[6; 6]; d@[1; 3]; d@[5; 6]g . Here,
we take each number (1, . . . , 6) to represent a time interval of arbitrary (possibly varying with the
number) duration during which nothing changes, and then each fact p@[i; j ] indicates that proposition p is continuously true throughout the time intervals numbered i through j . This model can
be depicted graphically, as shown in Figure 3. The top four lines in the figure indicate the time
2. This avoids the need for negative examples and corresponds to finding the specific boundary of the version space
(Mitchell, 1982).
3. The existence and uniqueness of the LGCF and LGG defined here is a formal property of the hypothesis space and is
proven for AMA in Sections 3.4 and 4, respectively.

385

F ERN , G IVAN , & S ISKIND

1

2

a

3

4

a

a

b

b

5

6

b

b
c

d
a^d

d

d

d

; a^b^d ; a^b ; b^d ; b^c^d

Figure 3: LGCF Computation. The top four horizontal lines of the figure indicate the intervals over which the propositions a; b; c and d are true in the model given by
fa@[1; 4]; b@[3; 6]; c@[6; 6]; d@[1; 3]; d@[5; 6]g . The bottom line shows how the model
can be divided into intervals where no transitions occur. The LGCF is an MA timeline,
shown at the bottom of the figure, with a state for each of the no-transition intervals. Each
state simply contains the true propositions within the corresponding interval.
intervals over which each of the propositions a; b; c, and d are true in the model. The bottom line
in the figure shows how the model can be divided into five time intervals where no propositions
change truth value. This division is possible because of the assumption that our propositions are
liquid. This allows us, for example, to break up the time-interval where a is true into three consecutive subintervals where a is true. After dividing the model into intervals with no transitions, we
compute the LGCF by simply treating each of those intervals as a state of an MA timeline, where
the states contain only those propositions that are true during the corresponding time interval. The
resulting five-state MA timeline is shown at the bottom of the figure. We show later that this simple
computation returns the LGCF for any model. Thus, we see that the LGCF of a model is always an
MA timeline.
2.6 Computing the AMA LGG
We now describe our algorithm for computing the LGG of two AMA formulas—the LGG of m
formulas can be computed via a sequence of m 1 pairwise LGG applications, as discussed later.
Consider the two MA timelines: 1 = (a ^ b ^ c); (b ^ c ^ d); e and 2 = (a ^ b ^ e); a; (e ^ d).
It is useful to consider the various ways in which both timelines can be true simultaneously along
an arbitrary time interval. To do this, we look at the various ways in which the two timelines
can be aligned along a time interval. Figure 4a shows one of the many possible alignments of
these timelines. We call such alignments interdigitations—in general, there are exponentially many
interdigitations, each one ordering the state transitions differently. Note that an interdigitation is
allowed to constrain two transitions from different timelines to occur simultaneously (though this is
not depicted in the figure).4
4. Thus, an interdigitation provides an “ordering” relation on transitions that need not be anti-symmetric, but is reflexive,
transitive, and total.

386

L EARNING T EMPORAL E VENTS

(a)

a^b^e
(b)

a^b^c

b^c^d

a

e^d

e

a^b^c a^b^c a^b^c b^c^d
a^b^e
a^b ;

a

e^d

e^d

a

; true ;

d

e
e^d
;

e

Figure 4: Generalizing the MA timelines (a ^ b ^ c); (b ^ c ^ d); e and (a ^ b ^ e); a; (e ^ d). (a)
One of the exponentially many interdigitations of the two timelines. (b) Computing the
interdigitation generalization corresponding to the interdigitation from part (a). States are
formed by intersecting aligned states from the two timelines. The state true represents a
state with no propositions.

Given an interdigitation of two timelines, it is easy to construct a new MA timeline that must be
true whenever either of the timelines is true (i.e., to construct a generalization of the two timelines).
In Figure 4b, we give this construction for the interdigitation given in Figure 4a. The top two
horizontal lines in the figure correspond to the interdigitation, only here we have divided every state
on either timeline into two identical states, whenever a transition occurs during that state in the other
timeline. The resulting pair of timelines have only simultaneous transitions and can be viewed as
a sequence of state pairs, one from each timeline. The bottom horizontal line is then labeled by
an MA timeline with one state for each such state pair, with that state being the intersection of the
proposition sets in the state pair. Here, true represents the empty set of propositions, and is a state
that is true anywhere.
We call the resulting timeline an interdigitation generalization (IG) of 1 and 2 . It should be
clear that this IG will be true whenever either 1 or 2 are true. In particular, if 1 holds along a
time-interval in a model, then there is a sequence of consecutive (meeting) subintervals where the
sequence of states in 1 are true. By construction, the IG can be aligned relative to 1 along the
interval so that when we view states as sets, the states in the IG are subsets of the corresponding
aligned state(s) in 1 . Thus, the IG states are all true in the model under the alignment, showing
that the IG is true in the model.
In general, there are exponentially many IGs of two input MA timelines, one for each possible
interdigitation between the two. Clearly, since each IG is a generalization of the input timelines,
then so is the conjunction of all the IGs. This conjunction is an AMA formula that generalizes the
input MA timelines. In fact, we show later in the paper that this AMA formula is the LGG of the
two timelines. Below we show the conjunction of all the IGs of 1 and 2 which serves as their
LGG.
387

F ERN , G IVAN , & S ISKIND

[(a ^ b); b; e; true; e] ^
[(a ^ b); b; true; e] ^
[(a ^ b); b; true; true; e] ^
[(a ^ b); b; true; e] ^
[(a ^ b); b; true; d; e] ^
[(a ^ b); true; true; e] ^
[(a ^ b); true; e] ^
[(a ^ b); true; d; e] ^
[(a ^ b); a; true; true; e] ^
[(a ^ b); a; true; e] ^
[(a ^ b); a; true; d; e] ^
[(a ^ b); a; d; e] ^
[(a ^ b); a; true; d; e]
While this formula is an LGG, it contains redundant timelines that can be pruned. First, it is
clear that different IGs can result in the same MA timelines, and we can remove all but one copy
of each timeline from the LGG. Second, note that if a timeline 0 is more general than a timeline
, then  ^ 0 is equivalent to —thus, we can prune away timelines that are generalizations of
others. Later in the paper, we show how to efficiently test whether one timeline is more general
than another. After performing these pruning steps, we are left with only the first and next to last
timelines in the above formula—thus, [(a ^ b); a; d; e] ^ [(a ^ b); b; e; true; e] is an LGG of 1 and
2 .
We have demonstrated how to compute the LGG of pairs of MA timelines. We can use this
procedure to compute the LGG of pairs of AMA formulas. Given two AMA formulas we compute
their LGG by simply conjoining the LGGs of all pairs of timelines (one from each AMA formula)—
i.e., the formula
m^
n
^
LGG(i ; 0j )
i j

is an LGG of the two AMA formulas 1 ^    ^ m and 01 ^    ^ 0n , where the i and 0j are
MA timelines.
We have now informally described the LGCF and LGG operations needed to carry out the
specific-to-general learning approach described above. In what follows, we more formally develop
these operations and analyze the theoretical properties of the corresponding problems, then discuss
the needed extensions to bring these (exponential, propositional, and negation-free) operations to
practice.

3. Representing Events with AMA
Here we present a formal account of the AMA hypothesis space and an analytical development of the
algorithms needed for specific-to-general learning for AMA. Readers that are primarily interested in
a high-level view of the algorithms and their empirical evaluation may wish to skip Sections 3 and 4
and instead proceed directly to Sections 5 and 6, where we discuss several practical extensions to
the basic learner and then present our empirical evaluation.
We study a subset of an interval-based logic called event logic (Siskind, 2001) utilized by
L EONARD for event recognition in video sequences. This logic is interval-based in explicitly rep388

L EARNING T EMPORAL E VENTS

resenting each of the possible interval relationships given originally by Allen (1983) in his calculus
of interval relations (e.g., “overlaps,” “meets,” “during”). Event-logic formulas allow the definition
of event types which can specify static properties of intervals directly and dynamic properties by
hierarchically relating sub-intervals using the Allen relations. In this paper, the formal syntax and
semantics of full event logic are needed only for Proposition 4 and are given in Appendix A.
Here we restrict our attention to a much simpler subset of event logic we call AMA, defined
below. We believe that our choice of event logic rather than first-order logic, as well as our restriction
to the AMA fragment of event logic, provide a useful learning bias by ruling out a large number of
“practically useless” concepts while maintaining substantial expressive power. The practical utility
of this bias is demonstrated via our empirical results in the visual-event–recognition application.
AMA can also be seen as a restriction of LTL (Bacchus & Kabanza, 2000) to conjunction and
“Until,” with similar motivations. Below we present the syntax and semantics of AMA along with
some of the key technical properties of AMA that will be used throughout this paper.
3.1 AMA Syntax and Semantics
It is natural to describe temporal events by specifying a sequence of properties that must hold over
consecutive time intervals. For example, “a hand picking up a block” might become “the block
is not supported by the hand and then the block is supported by the hand.” We represent such
sequences with MA timelines5 , which are sequences of conjunctive state restrictions. Intuitively, an
MA timeline is given by a sequence of propositional conjunctions, separated by semicolons, and is
taken to represent the set of events that temporally match the sequence of consecutive conjunctions.
An AMA formula is then the conjunction of a number of MA timelines, representing events that
can be simultaneously viewed as satisfying each of the conjoined timelines. Formally, the syntax of
AMA formulas is given by,
state
MA
AMA

::= true j prop j prop ^ state
::= (state) j (state); MA
// may omit parens
::= MA j MA ^ AMA

where prop is any primitive proposition (sometimes called a primitive event type). We take this
grammar to formally define the terms MA timeline, MA formula, AMA formula, and state. A k MA formula is an MA formula with at most k states, and a k -AMA formula is an AMA formula
all of whose MA timelines are k -MA timelines. We often treat states as proposition sets with
true the empty set and AMA formulas as MA-timeline sets. We may also treat MA formulas as
sets of states—it is important to note, however, that MA formulas may contain duplicate states,
and the duplication can be significant. For this reason, when treating MA timelines as sets, we
formally intend sets of state-index pairs (where the index gives a states position in the formula).
We do not indicate this explicitly to avoid encumbering our notation, but the implicit index must be
remembered whenever handling duplicate states.
The semantics of AMA formulas is defined in terms of temporal models. A temporal model
M = hM; I i over the set PROP of propositions is a pair of a mapping M from the natural numbers
(representing time) to the truth assignments over PROP, and a closed natural-number interval I .
We note that Siskind (2001) gives a continuous-time semantics for event logic where the models
5. MA stands for “Meets/And,” an MA timeline being the “Meet” of a sequence of conjunctively restricted intervals.

389

F ERN , G IVAN , & S ISKIND

are defined in terms of real-valued time intervals. The temporal models defined here use discrete
natural-number time-indices. However, our results here still apply under the continuous-time semantics. (That semantics bounds the number of state changes in the continuous timeline to a countable number.) It is important to note that the natural numbers in the domain of M are representing
time discretely, but that there is no prescribed unit of continuous time represented by each natural
number. Instead, each number represents an arbitrarily long period of continuous time during which
nothing changed. Similarly, the states in our MA timelines represent arbitrarily long periods of time
during which the conjunctive restriction given by the state holds. The satisfiability relation for AMA
formulas is given as follows:




A state s is satisfied by a model hM; I i iff M [x] assigns P true for every x 2 I and P



An AMA formula 1 ^ 2 ^    ^ n is satisfied by M iff each i is satisfied by M.

2 s.

An MA timeline s1 ; s2 ; : : : ; sn is satisfied by a model hM; [t; t0 ]i iff there exists some t00
in [t; t0 ] such that hM; [t; t00 ]i satisfies s1 and either hM; [t00 ; t0 ]i or hM; [t00 + 1; t0 ]i satisfies
s2 ; : : : ; sn .

The condition defining satisfaction for MA timelines may appear unintuitive at first due to the
fact that there are two ways that s2 ; : : : ; sn can be satisfied. The reason for this becomes clear by recalling that we are using the natural numbers to represent continuous time intervals. Intuitively, from
a continuous-time perspective, an MA timeline is satisfied if there are consecutive continuous-time
intervals satisfying the sequence of consecutive states of the MA timeline. The transition between
consecutive states si and si+1 can occur either within an interval of constant truth assignment (that
happens to satisfy both states) or exactly at the boundary of two time intervals of constant truth
value. In the above definition, these cases correspond to s2 ; : : : ; sn being satisfied during the time
intervals [t00 ; t0 ] and [t00 + 1; t0 ] respectively.
When M satisfies  we say that M is a model of  or that  covers M. We say that AMA 	1
subsumes AMA 	2 iff every model of 	2 is a model of 	1 , written 	2  	1 , and we say that 	1
properly subsumes 	2 , written 	2 < 	1 , when we also have 	1 6 	2 . Alternatively, we may state
	2  	1 by saying that 	1 is more general (or less specific) than 	2 or that 	1 covers 	2 . Siskind
(2001) provides a method to determine whether a given model satisfies a given AMA formula.
Finally, it will be useful to associate a distinguished MA timeline to a model. The MA projection
of a model M = hM; [i; j ]i written as MAP(M) is an MA timeline s0 ; s1 ; : : : ; sj i where state sk
gives the true propositions in M (i + k ) for 0  k  j i. Intuitively, the MA projection gives
the sequence of propositional truth assignments from the beginning to the end of the model. Later
we show that the MA projection of a model can be viewed as representing that model in a precise
sense.
The following two examples illustrate some basic behaviors of AMA formulas:
Example 1 (Stretchability). S1 ; S2 ; S3 , S1 ; S2 ; S2 ; : : : ; S2 ; S3 , and S1 ; S1 ; S1 ; S2 ; S3 ; S3 ; S3 are
all equivalent MA timelines. In general, MA timelines have the property that duplicating any state
results in a formula equivalent to the original formula. Recall that, given a model hM; I i, we
view each truth assignment M [x] as representing a continuous time-interval. This interval can
conceptually be divided into an arbitrary number of subintervals. Thus if state S is satisfied by
hM; [x; x]i, then so is the state sequence S ; S ; : : : ; S .
390

L EARNING T EMPORAL E VENTS

Example 2 (Infinite Descending Chains). Given propositions A and B , the MA timeline  =
is subsumed by each of the formulas A; B , A; B ; A; B , A; B ; A; B ; A; B , . . . . This is
intuitively clear when our semantics are viewed from a continuous-time perspective. Any interval
in which both A and B are true can be broken up into an arbitrary number of subintervals where
both A and B hold. This example illustrates that there can be infinite descending chains of AMA
formulas where the entire chain subsumes a given formula (but no member is equivalent to the given
formula). In general, any AMA formula involving only the propositions A and B will subsume .

(A ^ B )

3.2 Motivation for AMA
MA timelines are a very natural way to capture stretchable sequences of state constraints. But
why consider the conjunction of such sequences, i.e., AMA? We have several reasons for this language enrichment. First of all, we show below that the AMA least-general generalization (LGG)
is unique—this is not true for MA. Second, and more informally, we argue that parallel conjunctive constraints can be important to learning efficiency. In particular, the space of MA formulas
of length k grows in size exponentially with k , making it difficult to induce long MA formulas.
However, finding several shorter MA timelines that each characterize part of a long sequence of
changes is exponentially easier. (At least, the space to search is exponentially smaller.) The AMA
conjunction of these timelines places these shorter constraints simultaneously and often captures a
great deal of the concept structure. For this reason, we analyze AMA as well as MA and, in our
empirical work, we consider k -AMA.
The AMA language is propositional. But our intended applications are relational, or first-order,
including visual-event recognition. Later in this paper, we show that the propositional AMA learning algorithms that we develop can be effectively applied in relational domains. Our approach to
first-order learning is distinctive in automatically constructing an object correspondence across examples (cf. Lavrac, Dzeroski, & Grobelnik, 1991; Roth & Yih, 2001). Similarly, though AMA
does not allow for negative state constraints, in Section 5.4 we discuss how to extend our results to
incorporate negation into our learning algorithms, which is crucial in visual-event recognition.
3.3 Conversion to First-Order Clauses
We note that AMA formulas can be translated in various ways into first-order clauses. It is not
straightforward, however, to then use existing clausal generalization techniques for learning. In
particular, to capture the AMA semantics in clauses, it appears necessary to define subsumption and
generalization relative to a background theory that restricts us to a “continuous-time” first-order–
model space.
For example, consider the AMA formulas 1 = A ^ B and 2 = A; B where A and B are
propositions—from Example 2 we know that 1  2 . Now, consider a straightforward clausal
translation of these formulas giving C1 = A(I ) ^ B (I ) and C2 = A(I1 ) ^ B (I2 ) ^ M EETS (I1 ; I2 ) ^
I = S PAN (I1 ; I2 ), where the I and Ij are variables that represent time intervals, M EETS indicates
that two time intervals meet each other, and S PAN is a function that returns a time interval equal
to the union of its two time-interval arguments. The meaning we intend to capture is for satisfying
assignments of I in C1 and C2 to indicate intervals over which 1 and 2 are satisfied, respectively.
It should be clear that, contrary to what we want, C1 6 C2 (i.e., 6j= C1 ! C2 ), since it is easy to
find unintended first-order models that satisfy C1 , but not C2 . Thus such a translation, and other
similar translations, do not capture the continuous-time nature of the AMA semantics.
391

F ERN , G IVAN , & S ISKIND

In order to capture the AMA semantics in a clausal setting, one might define a first-order theory
that restricts us to continuous-time models—for example, allowing for the derivation “if property B
holds over an interval, then that property also holds over all sub-intervals.” Given such a theory ,
we have that  j= C1 ! C2 , as desired. However, it is well known that least-general generalizations relative to such background theories need not exist (Plotkin, 1971), so prior work on clausal
generalization does not simply subsume our results for the AMA language.
We note that for a particular training set, it may be possible to compile a continuous-time background theory  into a finite but adequate set of ground facts. Relative to such ground theories,
clausal LGGs are known to always exist and thus could be used for our application. However,
the only such compiling approaches that look promising to us require exploiting an analysis similar to the one given in this paper—i.e., understanding the AMA generalization and subsumption
problem separately from clausal generalization and exploiting that understanding in compiling the
background theory. We have not pursued such compilations further.
Even if we are given such a compilation procedure, there are other problems with using existing clausal generalization techniques for learning AMA formulas. For the clausal translations of
AMA we have found, the resulting generalizations typically fall outside of the (clausal translations
of formulas in the) AMA language, so that the language bias of AMA is lost. In preliminary empirical work in our video-event recognition domain using clausal inductive-logic-programming (ILP)
systems, we found that the learner appeared to lack the necessary language bias to find effective
event definitions. While we believe that it would be possible to find ways to build this language bias
into ILP systems, we chose instead to define and learn within the desired language bias directly, by
defining the class of AMA formulas, and studying the generalization operation on that class.
3.4 Basic Concepts and Properties of AMA
We use the following convention in naming our results: “propositions” and “theorems” are the key
results of our work, with theorems being those results of the most technical difficulty, and “lemmas”
are technical results needed for the later proofs of propositions or theorems. We number all the
results in one sequence, regardless of type. Proofs of theorems and propositions are provided in the
main text—omitted proofs of lemmas are provided in the appendix.
We give pseudo-code for our methods in a non-deterministic style. In a non-deterministic language functions can return more than one value non-deterministically, either because they contain
non-deterministic choice points, or because they call other non-deterministic functions. Since a nondeterministic function can return more than one possible value, depending on the choices made at
the choice points encountered, specifying such a function is a natural way to specify a richly structured set (if the function has no arguments) or relation (if the function has arguments). To actually
enumerate the values of the set (or the relation, once arguments are provided) one can simply use
a standard backtracking search over the different possible computations corresponding to different
choices at the choice points.
3.4.1 S UBSUMPTION

AND

G ENERALIZATION

FOR

S TATES

The most basic formulas we deal with are states (conjunctions of propositions). In our propositional
setting computing subsumption and generalization at the state level is straightforward. A state S1
subsumes S2 (S2  S1 ) iff S1 is a subset of S2 , viewing states as sets of propositions. From this, we
derive that the intersection of states is the least-general subsumer of those states and that the union
of states is likewise the most general subsumee.
392

L EARNING T EMPORAL E VENTS

3.4.2 I NTERDIGITATIONS
Given a set of MA timelines, we need to consider the different ways in which a model could simultaneously satisfy the timelines in the set. At the start of such a model (i.e., the first time point),
the initial state from each timeline must be satisfied. At some time point in the model, one or more
of the timelines can transition so that the second state in those timelines must be satisfied in place
of the initial state, while the initial state of the other timelines remains satisfied. After a sequence
of such transitions in subsets of the timelines, the final state of each timeline holds. Each way of
choosing the transition sequence constitutes a different interdigitation of the timelines.
Viewed differently, each model simultaneously satisfying the timelines induces a co-occurrence
relation on tuples of timeline states, one from each timeline, identifying which tuples co-occur at
some point in the model. We represent this concept formally as a set of tuples of co-occurring states,
i.e., a co-occurrence relation. We sometimes think of this set of tuples as ordered by the sequence
of transitions. Intuitively, the tuples in an interdigitation represent the maximal time intervals over
which no MA timeline has a transition, with those tuples giving the co-occurring states for each
such time interval.
A relation R on X1      Xn is simultaneously consistent with orderings 1 ,. . . ,n, if,
whenever R(x1 ; : : : ; xn ) and R(x01 ; : : : ; x0n ), either xi i x0i , for all i, or x0i i xi , for all i. We say
R is piecewise total if the projection of R onto each component is total—i.e., every state in any Xi
appears in R.
Definition 1 (Interdigitation). An interdigitation I of a set f1 ; : : : ; n g of MA timelines is a cooccurrence relation over 1      n (viewing timelines as sets of states6 ) that is piecewise total
and simultaneously consistent with the state orderings of each i . We say that two states s 2 i
and s0 2 j for i 6= j co-occur in I iff some tuple of I contains both s and s0 . We sometimes refer to
I as a sequence of tuples, meaning the sequence lexicographically ordered by the i state orderings.
We note that there are exponentially many interdigitations of even two MA timelines (relative to the
total number of states in the timelines). Example 3 on page 396 shows an interdigitation of two MA
timelines. Pseudo-code for non-deterministically generating an arbitrary interdigitation for a set of
MA timelines can be found in Figure 5. Given an interdigitation I of the timelines s1 ; s2 ; : : : ; sm
and t1 ; t2 ; : : : ; tn (and possibly others), the following basic properties of interdigitations are easily
verifiable:
1. For i < j , if si and tk co-occur in I then for all k 0
2.

< k, sj does not co-occur with tk

0

in I .

I (s1 ; t1 ) and I (sm ; tn ).

We first use interdigitations to syntactically characterize subsumption between MA timelines.
Definition 2 (Witnessing Interdigitation). An interdigitation I of two MA timelines 1 and 2
is a witness to 1  2 iff for every pair of co-occurring states s1 2 1 and s2 2 2 , we have that
s2 is a subset of s1 (i.e., s1  s2 ).
The following lemma and proposition establish the equivalence between witnessing interdigitations
and MA subsumption.
6. Recall, that, formally, MA timelines are viewed as sets of state-index pairs, rather than just sets of states. We ignore
this distinction in our notation, for readability purposes, treating MA timelines as though no state is duplicated.

393

F ERN , G IVAN , & S ISKIND

1:

an-interdigitation (f1 ; 2 ; : : : ; n g)

// Input: MA timelines 1 ; : : : ; n
// Output: an interdigitation of f1 ; : : : ; n g

2:
3:

S0 := hhead(1 ); : : : ; head(n )i;
if for all 1  i  n; ji j = 1
then return hS0 i;
0
T := fi such that ji j > 1g;
T 00 := a-non-empty-subset-of (T 0 );

4:
5:
6:
7:
8:

for i := 1 to n
if i 2 T 00
then 0i := rest(i )
else 0i := i ;

9:
10:
12:
12:

return extend-tuple (S0 ; an-interdigitation (f01 ; : : : ; 0n g));

13:

Figure 5: Pseudo-code for an-interdigitation(), which non-deterministically computes an interdigitation for a set f1 ; : : : ; n g of MA timelines. The function head() returns the first
state in the timeline . rest() returns  with the first state removed. extend-tuple(x,I )
extends a tuple I by adding a new first element x to form a longer tuple. a-non-emptysubset-of(S ) non-deterministically returns an arbitrary non-empty subset of S .
Lemma 1. For any MA timeline  and any model M, if M satisfies , then there is a witnessing
interdigitation for MAP(M)  .
Proposition 2. For MA timelines 1 and 2 , 1

1  2 .

 2 iff there is an interdigitation that witnesses

Proof: We show the backward direction by induction on the number of states n in timeline 1 . If
n = 1, then the existence of a witnessing interdigitation for 1  2 implies that every state in 2
is a subset of the single state in 1 , and thus that any model of 1 is a model of 2 so that 1  2 .
Now, suppose for induction that the backward direction of the theorem holds whenever 1 has n
or fewer states. Given an arbitrary model M of an n + 1 state 1 and an interdigitation W that
witnesses 1  2 , we must show that M is also a model of 2 to conclude 1  2 as desired.
Write 1 as s1 ; : : : ; sn+1 and 2 as t1 ; : : : ; tm . As a witnessing interdigitation, W must identify
some maximal prefix t1 ; : : : ; tm of 2 made up of states that co-occur with s1 and thus that are
subsets of s1 . Since M = hM; [t; t0 ]i satisfies 1 , by definition there must exist a t00 2 [t; t0 ] such
that hM; [t; t00 ]i satisfies s1 (and thus t1 ; : : : ; tm ) and hM; I 0 i satisfies s2 ; : : : ; sn+1 for I 0 equal to
either [t00 ; t0 ] or [t00 + 1; t0 ]. In either case, it is straightforward to construct, from W , a witnessing
interdigitation for s2 ; : : : ; sn+1  tm +1 ; : : : ; tm and use the induction hypothesis to then show that
hM; I 0 i must satisfy tm +1; : : : ; tm . It follows that M satisfies 2 as desired.
For the forward direction, assume that 1  2 , and let M be any model such that 1 =
MAP(M). It is clear that such an M exists and satisfies 1 . It follows that M satisfies 2 .
Lemma 1 then implies that there is a witnessing interdigitation for MAP(M)  2 and thus for
1  2 . 2
0

0

0

0

394

L EARNING T EMPORAL E VENTS

3.4.3 L EAST-G ENERAL C OVERING F ORMULA
A logic can discriminate two models if it contains a formula that satisfies one but not the other. It
turns out that AMA formulas can discriminate two models exactly when much richer internal positive event logic (IPEL) formulas can do so. Internal formulas are those that define event occurrence
only in terms of properties within the defining interval. That is, satisfaction by hM; I i depends only
on the proposition truth values given by M inside the interval I . Positive formulas are those that
do not contain negation. Appendix A gives the full syntax and semantics of IPEL (which are used
only to state and prove Lemma 3 ). The fact that AMA can discriminate models as well as IPEL
indicates that our restriction to AMA formulas retains substantial expressive power and leads to
the following result which serves as the least-general covering formula (LGCF) component of our
specific-to-general learning procedure. Formally, an LGCF of model M within a formula language
L (e.g. AMA or IPEL) is a formula in L that covers M such that no other covering formula in
L is strictly less general. Intuitively, the LGCF of a model, if unique, is the “most representative”
formula of that model. Our analysis uses the concept of model embedding. We say that model M
embeds model M0 iff MAP(M)  MAP(M0 ).
Lemma 3.

For any E

2 IP EL, if model M embeds a model that satisfies E , then M satisfies E .

Proposition 4. The MA projection of a model is its LGCF for internal positive event logic (and
hence for AMA), up to semantic equivalence.
Proof: Consider model M. We know that MAP(M) covers M, so it remains to show that
MAP(M) is the least general formula to do so, up to semantic equivalence.
Let E be any IPEL formula that covers M. Let M0 be any model that is covered by MAP(M)—
we want to show that E also covers M0 . We know, from Lemma 1, that there is a witnessing
interdigitation for MAP(M0 )  MAP(M). Thus, by Proposition 2, MAP(M0 )  MAP(M)
showing that M0 embeds M. Combining these facts with Lemma 3 it follows that E also covers
M0 and hence MAP(M)  E . 2
Proposition 4 tells us that, for IPEL, the LGCF of a model exists, is unique, and is an MA
timeline. Given this property, when an AMA formula 	 covers all the MA timelines covered by
another AMA formula 	0 , we have 	0  	. Thus, for the remainder of this paper, when considering
subsumption between formulas, we can abstract away from temporal models and deal instead with
MA timelines. Proposition 4 also tells us that we can compute the LGCF of a model by constructing
the MA projection of that model. Based on the definition of MA projection, it is straightforward to
derive an LGCF algorithm which runs in time polynomial in the size of the model7 . We note that
the MA projection may contain repeated states. In practice, we remove repeated states, since this
does not change the meaning of the resulting formula (as described in Example 1).
3.4.4 C OMBINING I NTERDIGITATION

WITH

G ENERALIZATION

OR

S PECIALIZATION

Interdigitations are useful in analyzing both conjunctions and disjunctions of MA timelines. When
conjoining a set of timelines, any model of the conjunction induces an interdigitation of the timelines
such that co-occurring states simultaneously hold in the model at some point (viewing states as
sets, the the states resulting from unioning co-occurring states must hold). By constructing an
7. We take the size of a model M = hM; I i to be the sum over x 2 I of the number of true propositions in M (x).

395

F ERN , G IVAN , & S ISKIND

interdigitation and taking the union of each tuple of co-occurring states to get a sequence of states,
we get an MA timeline that forces the conjunction of the timelines to hold. We call such a sequence
an interdigitation specialization of the timelines. Dually, an interdigitation generalization involving
intersections of states gives an MA timeline that holds whenever the disjunction of a set of timelines
holds.
Definition 3. An interdigitation generalization (specialization) of a set  of MA timelines is an MA
timeline s1 ; : : : ; sm , such that, for some interdigitation I of  with m tuples, sj is the intersection
(respectively, union) of the components of the j’th tuple of the sequence I . The set of interdigitation
generalizations (respectively, specializations) of  is called IG() (respectively, IS()).
Example 3. Suppose that s1 ; s2 ; s3 ; t1 ; t2 ; and t3 are each sets of propositions (i.e., states). Consider the timelines S = s1 ; s2 ; s3 and T = t1 ; t2 ; t3 . The relation

f hs1; t1 i ; hs2; t1 i ; hs3; t2 i ; hs3; t3 i g
is an interdigitation of S and T in which states s1 and s2 co-occur with t1 , and s3 co-occurs with
t2 and t3 . The corresponding IG and IS members are

s1 \ t1 ; s2 \ t1 ; s3 \ t2 ; s3 \ t3
s1 [ t1 ; s2 [ t1 ; s3 [ t2 ; s3 [ t3

2 IG(fS; T g)
2 IS(fS; T g):

If t1  s1 ; t1  s2 ; t2  s3 ; and t3  s3 , then the interdigitation witnesses S

 T.

Each timeline in IG() (dually, IS()) subsumes (is subsumed by) each timeline in —this is
easily verified using Proposition 2. For our complexity analyses, we note that the number of states
in any member of IG() or IS() is bounded from below by the number of states in any of the
MA timelines in  and is bounded from above by the total number of states in all the MA timelines
in . The number of interdigitations of , and thus of members of IG() or IS(), is exponential in that same total number of states. The algorithms that we present later for computing LGGs
require the computation of both IG () and IS(). Here we give pseudo-code to compute these
quantities. Figure 6 gives pseudo-code for the function an-IG-member that non-deterministically
computes an arbitrary member of IG() (an-IS-member is the same, except that we replace intersection by union). Given a set  of MA timelines we can compute IG() by executing all possible
deterministic computation paths of the function call an-IG-member(), i.e., computing the set of
results obtainable from the non-deterministic function for all possible decisions at non-deterministic
choice points.
We now give a useful lemma and a proposition concerning the relationships between conjunctions and disjunctions of MA concepts (the former being AMA concepts). For convenience here,
we use disjunction on MA concepts, producing formulas outside of AMA with the obvious interpretation.
Lemma 5. Given an MA formula  that subsumes each member of a set  of MA formulas,  also
subsumes some member 0 of IG(). Dually, when  is subsumed by each member of , we have
that  is also subsumed by some member 0 of IS(). In each case, the length of 0 is bounded by
the size of .

396

L EARNING T EMPORAL E VENTS

an-IG-member (f1 ; 2 ; : : : ; n g)

// Input: MA timelines 1 ; : : : ; n
// Output: a member of IG(f1 ; 2 ; : : : ; n g)

return map (intersect-tuple ; an-interdigitation (f1 ; : : : ; n g));
Figure 6: Pseudo-code for an-IG-member, which non-deterministically computes a member of
IG(T ) where T is a set of MA timelines. The function intersect-tuple(I ) takes a tuple I
of sets as its argument and returns their intersection. The higher-order function map(f; I )
takes a function f and a tuple I as arguments and returns a tuple of the same length as I
obtained by applying f to each element of I and making a tuple of the results.
Proposition 6.

The following hold:

1. (and-to-or) The conjunction of a set  of MA timelines equals the disjunction of the timelines
in IS().
2. (or-to-and) The disjunction of a set  of MA timelines is subsumed by the conjunction of the
timelines in IG().
Proof: To prove or-to-and, recall that, for any  2  and any 0 2 IG(), we have that   0 .
W
V
From this it is immediate that ( )  ( IG()). Using a dual argument, we can show that
W
V
V
W
( IS())  ( ). It remains Vto show that ( )  ( ISW()), which is equivalent to showing
that any timeline subsumed by ( ) is also subsumed by ( IS()) (by Proposition 4). Consider
V
any MA timeline  such that   ( )—this implies that each member of  subsumes . Lemma
W
5 then implies that there is some 0 2 IS() such that   0 . From this we get that   ( IS())
as desired. 2
Using and-to-or, we can now reduce AMA subsumption to MA subsumption, with an exponential increase in the problem size.
Proposition 7.
	2 ; 1  2 .

For AMA

	1

and

	2 , 	1

 	2 if and only if for all 1 2 IS(	1) and 2 2

Proof: For the forward direction we show the contrapositive. Assume there is a 1 2 IS(	1 ) and a
2 2 	2 such that W1 6 2 . Thus, there is an MA timeline
 such that   1 but  6 2 . This
W
tells us that   ( IS(	1 )) and that  6 	2 , thus ( IS(	1 )) 6 	2 and by “and-to-or” we get
that 	1 6 	2 .
For the backward direction assume that for all 1 2 IS(	1 ) and 2 2 	2 that 1  2 . This
W
tells us that for each 1 2 IS(	1 ), that 1  	2 —thus, 	1 = ( IS(	1 ))  	2 . 2

4. Subsumption and Generalization
In this section we study subsumption and generalization of AMA formulas. First, we give a
polynomial-time algorithm for deciding subsumption between MA formulas and then show that
deciding subsumption for AMA formulas is coNP-complete. Second we give algorithms and complexity bounds for the construction of least-general generalization (LGG) formulas based on our
397

F ERN , G IVAN , & S ISKIND

MA-subsumes (1 ; 2 )
// Input: 1 = s1 ; : : : ; sm and 2
// Output: 1  2

= t1 ; : : : ; tn

1. if there is a path from v1;1 to vm;n in SG(1 ; 2 ) then return TRUE. For example,
(a)
(b)

(c)

Create an array Reachable(i,j ) of boolean values, all FALSE, for 0
0  j  n.
for i := 1 to m, Reachable(i; 0) := TRUE;
for j := 1 to n, Reachable(0; j ) := TRUE;
for i := 1 to m
for j := 1 to n
Reachable(i; j ) := (ti  sj ^ ( Reachable(i
Reachable(i; j
Reachable(i

if Reachable(m; n) then return TRUE;

 i  m and

1; j ) _
1) _
1; j 1));

2. Otherwise, return FALSE;
Figure 7: Pseudo-code for the MA subsumption algorithm.
defined in the main text.

SG(1 ; 2 ) is the subsumption graph

analysis of subsumption, including existence, uniqueness, lower/upper bounds, and an algorithm for
the LGG on AMA formulas. Third, we introduce a polynomial-time–computable syntactic notion
of subsumption and an algorithm that computes the corresponding syntactic LGG that is exponentially faster than our semantic LGG algorithm. Fourth, in Section 4.4, we give a detailed example
showing the steps performed by our LGG algorithms to compute the semantic and syntactic LGGs
of two AMA formulas.
4.1 Subsumption
All our methods rely critically on a novel algorithm for deciding the subsumption question 1  2
between MA formulas 1 and 2 in polynomial-time. We note that merely searching the possible
interdigitations of 1 and 2 for a witnessing interdigitation provides an obvious decision procedure
for the subsumption question—however, there are, in general, exponentially many such interdigitations. We reduce the MA subsumption problem to finding a path in a graph on pairs of states
in 1  2 , a polynomial-time operation. Pseudo-code for the resulting MA subsumption algorithm is shown in Figure 7. The main data structure used by the MA subsumption algorithm is the
subsumption graph.
Definition 4. The subsumption graph of two MA timelines 1 = s1 ;    ; sm and 2 = t1 ;    ; tn
(written SG(1 ; 2 )) is a directed
graph G = hV; E i with V = fvi;j j 1  i  m; 1  j  ng	.

The (directed) edge set E equals hvi;j ; vi ;j i j si  tj ; si  tj ; i  i0  i + 1; j  j 0  j + 1 .
0

0

0

0

To achieve a polynomial-time bound one can simply use any polynomial-time pathfinding algorithm. In our case the special structure of the subsumption graph can be exploited to determine if
398

L EARNING T EMPORAL E VENTS

the desired path exists in O (mn) time, as the example method shown in the pseudo-code illustrates.
The following theorem asserts the correctness of the algorithm assuming a correct polynomial-time
path-finding method is used.
Lemma 8. Given MA timelines 1 = s1 ; : : : ; sm and 2 = t1 ; : : : ; tn , there is a witnessing
interdigitation for 1  2 iff there is a path in the subsumption graph SG(1 ; 2 ) from v1;1 to
vm;n .
Theorem 9.
mial time.

Given MA timelines 1 and 2 , MA-subsumes(1 ; 2 ) decides 1

 2 in polyno-

Proof: The algorithm clearly runs in polynomial time. Lemma 8 tells us that line 2 of the algorithm
will return TRUE iff there is a witnessing interdigitation. Combining this with Proposition 2 shows
that the algorithm returns TRUE iff 1  2 . 2
Given this polynomial-time algorithm for MA subsumption, Proposition 7 immediately suggests
an exponential-time algorithm for deciding AMA subsumption—by computing MA subsumption
between the exponentially many IS timelines of one formula and the timelines of the other formula.
Our next theorem suggests that we cannot do any better than this in the worst case—we argue that
AMA subsumption is coNP-complete by reduction from boolean satisfiability. Readers uninterested
in the technical details of this argument may skip directly to Section 4.2.
To develop a correspondence between boolean satisfiability problems, which include negation,
and AMA formulas, which lack negation, we imagine that each boolean variable has two AMA
propositions, one for “true” and one for “false.” In particular, given a boolean satisfiability problem
over n variables p1 ; : : : ; pn , we take the set PROPn to be the set containing 2n AMA propositions
Truek and Falsek for each k between 1 and n. We can now represent a truth assignment A to the pi
variables with an AMA state sA given as follows:

sA = fTruei j 1  i  n; A(pi ) = trueg [ fFalsei j 1  i  n; A(pi ) = falseg
As Proposition 7 suggests, checking AMA subsumption critically involves the exponentially
many interdigitation specializations of the timelines of one of the AMA formulas. In our proof, we
design an AMA formula whose interdigitation specializations can be seen to correspond to truth
assignments8 to boolean variables, as shown in the following lemma.
Lemma 10.

Given some n, let 	 be the conjunction of the timelines
n
[
i=1

f(PROPn; Truei; Falsei; PROPn); (PROPn; Falsei; Truei; PROPn)g:

We have the following facts about truth assignments to the Boolean variables p1 ; : : : ; pn :
1. For any truth assignment A, PROPn ; sA ; PROPn is semantically equivalent to a member
of IS(	).
2. For each  2 IS(	) there is a truth assignment A such that   PROPn ; sA ; PROPn .
8. A truth assignment is a function mapping boolean variables to true or false.

399

F ERN , G IVAN , & S ISKIND

With this lemma in hand, we can now tackle the complexity of AMA subsumption.
Theorem 11.

Deciding AMA subsumption is coNP-complete.

Proof: We first show that deciding the AMA-subsumption of 	1 by 	2 is in coNP by providing
a polynomial-length certificate for any “no” answer. This certificate for non-subsumption is an
interdigitation of the timelines of 	1 that yields a member of IS(	1 ) not subsumed by 	2 . Such
a certificate can be checked in polynomial time: given such an interdigitation, the corresponding
member of IS(	1 ) can be computed in time polynomial in the size of 	1 , and we can then test
whether the resulting timeline is subsumed by each timeline in 	2 using the polynomial-time MAsubsumption algorithm. Proposition 7 guarantees that 	1 6 	2 iff there is a timeline in IS(	1 )
that is not subsumed by every timeline in 	2 , so that such a certificate will exist exactly when the
answer to a subsumption query is “no.”
To show coNP-hardness we reduce the problem of deciding the satisfiability of a 3-SAT formula
S = C1 ^  ^ Cm to the problem of recognizing non-subsumption between AMA formulas. Here,
each Ci is (li;1 _ li;2 _ li;3 ) and each li;j either a proposition p chosen from P = fp1 ; : : : ; pn g or
its negation :p. The idea of the reduction is to construct an AMA formula 	 for which we view
the exponentially many members of IS(	) as representing truth assignments. We then construct an
MA timeline  that we view as representing :S and show that S is satisfiable iff 	 6 .
Let 	 be as defined in Lemma 10. Let  be the formula s1 ; : : : ; sm , where

si =

fFalsej j li;k = pj for some kg [
fTruej j li;k = :pj for some kg:

Each si can be thought of as asserting “not Ci .” We start by showing that if S is satisfiable
then 	 6 . Assume that S is satisfied via a truth assignment A—we know from Lemma 10
that there is a 0 2 IS(	) that is semantically equivalent to PROPn ; sA ; PROPn . We show that
PROPn ; sA ; PROPn is not subsumed by , to conclude 	 6  using Proposition 7, as desired.
Suppose for contradiction that PROPn ; sA ; PROPn is subsumed by —then the state sA must be
subsumed by some state si in . Consider the corresponding clause Ci of S . Since A satisfies S
we have that Ci is satisfied and at least one of its literals li;k must be true. Assume that li;k = pj (a
dual argument holds for li;k = :pj ), then we have that si contains Falsej while sA contains Truej
but not Falsej —thus, we have that sA 6 si (since si 6 sA ), contradicting our choice of i.
To complete the proof, we now assume that S is unsatisfiable and show that 	  . Using
Proposition 7, we consider arbitrary 0 in IS(	)—we will show that 0  . From Lemma 10 we
know there is some truth assignment A such that 0  PROPn ; sA ; PROPn . Since S is unsatisfiable
we know that some Ci is not satisfied by A and hence :Ci is satisfied by A. This implies that
each primitive proposition in si is in sA . Let W be the following interdigitation between T =
PROPn ; sA ; PROPn and  = s1 ; : : : ; sm :

fhPROPn; s1 i hPROPn; s2 i    hPROPn; sii hsA; sii hPROPn; sii hPROPn; si+1i    hPROPn; smig

We see that in each tuple of co-occurring states given above that the state from T is subsumed by
the state from . Thus W is a witnessing interdigitation to PROPn ; sA ; PROPn  , which then
holds by Proposition 2—combining this with 0  PROPn ; sA ; PROPn we get that 0  . 2
Given this hardness result we later define a weaker polynomial-time–computable subsumption
notion for use in our learning algorithms.
400

L EARNING T EMPORAL E VENTS

4.2 Least-General Generalization.
An AMA LGG of a set of AMA formulas is an AMA formula that is more general than each
formula in the set and not strictly more general than any other such formula. The existence of
an AMA LGG is nontrivial as there can be infinite chains of increasingly specific formulas all of
which generalize given formulas. Example 2 demonstrated such chains for an MA subsumee and
can be extended for AMA subsumees. For example, each member of the chain P ; Q, P ; Q; P ; Q,
P ; Q; P ; Q; P ; Q; : : : covers 	1 = (P ^ Q); Q and 	2 = P ; (P ^ Q). Despite such complications,
the AMA LGG does exist.
Theorem 12. There is an LGG for any finite set  of AMA formulas that is subsumed by all other
generalizations of .
Proof: Let be the set 	 2 IS(	0 ). Let 	 be the conjunction of all the MA timelines that
generalize while having size no larger than . Since there are only a finite number of primitive
propositions, there are only a finite number of such timelines, so 	 is well defined9 . We show that
	 is a least-general generalization of . First, note that each timeline in 	 generalizes and thus
 (by Proposition 6), so 	 must generalize . Now, consider arbitrary generalization 	0 of .
Proposition 7 implies that 	0 must generalize each formula in . Lemma 5 then implies that each
timeline of 	0 must subsume a timeline  that is no longer than the size of and that also subsumes
the timelines of . But then  must be a timeline of 	, by our choice of 	, so that every timeline of
	0 subsumes a timeline of 	. It follows that 	0 subsumes 	, and that 	 is an LGG of  subsumed
by all other LGGs of , as desired. 2
S

0

Given that the AMA LGG exists and is unique we now show how to compute it. Our first step is to
strengthen “or-to-and” from Proposition 6 to get an LGG for the MA sublanguage.
Theorem 13. For a set  of MA formulas, the conjunction of all MA timelines in IG() is an AMA
LGG of .
Proof: Let 	 be the specified conjunction. Since each timeline of IG() subsumes all timelines
in , 	 subsumes each member of . To show 	 is a least-general such formula, consider an
AMA formula 	0 that also subsumes all members of . Since each timeline of 	0 must subsume all
members of , Lemma 5 implies that each timeline of 	0 subsumes a member of IG() and thus
each timeline of 	0 subsumes 	. This implies 	  	0 . 2
We can now characterize the AMA LGG using IS and IG.
Theorem 14.

S

IG( 	2 IS(	)) is an AMA LGG of the set  of AMA formulas.

Proof: Let  = f	1 ; : : : ; 	n g and E = 	1 _    _ 	n . We know that the AMA LGG of 
must subsume E , or it would fail to subsume one of the 	i . Using “and-to-or” we can represent
W
W
E as a disjunction of MA timelines given by E = ( IS(	1 )) _    _ ( IS(	n )). Any AMA
LGG must be a least-general formula that subsumes E —i.e., an AMA LGG of the set of MA
S
timelines fIS(	)j	 2 g. Theorem 13 tells us that an LGG of these timelines is given by
S
IG( fIS(	)j	 2 g). 2
9. There must be at least one such timeline, the timeline where the only state is true

401

F ERN , G IVAN , & S ISKIND

1:
2:
3:
4:
5:
6:
7:
8:
9:

10:
11:
12:
13:
14:

15:

semantic-LGG(f	1 ; 	2 ; : : : ; 	m g)

// Input: AMA formulas 	1 ; : : : ; 	m
// Output: LGG of f	1 ; : : : ; 	m g

S := fg;
for i := 1 to m
for each  in all-values(an-IS-member (	i ))
if (80 2 S :  6 0 )
then S 0 := f00 2 S j 00  g;
S := (S S 0 ) [ fg;
G := fg;
for each  in all-values(an-IG-member(S ))
if (80 2 G : 0 6 )
then G0 := f00 2 G j   00 g;
G := (G G0 ) [ fg;
V

return (

G)

Figure 8: Pseudo-code for computing the semantic AMA LGG of a set of AMA formulas.
Theorem 14 leads directly to an algorithm for computing the AMA LGG—Figure 8 gives
pseudo-code for the computation. Lines 4-9 of the pseudo-code correspond to the computation
S
of fIS(	)j	 2 g, where timelines are not included in the set if they are subsumed by timelines
already in the set (which can be checked with the polynomial time MA subsumption algorithm).
This pruning, accomplished by the if test in line 7, often drastically reduces the size of the timeline set for which we perform the subsequent IG computation—the final result is not affected by
the pruning since the subsequent IG computation is a generalization step. The remainder of the
S
pseudo-code corresponds to the computation of IG( fIS(	)j	 2 g) where we do not include
timelines in the final result that subsume some other timeline in the set. This pruning step (the if test
in line 12) is sound since when one timeline subsumes another, the conjunction of those timelines
is equivalent to the most specific one. Section 4.4.1 traces the computations of this algorithm for an
example LGG calculation.
Since the sizes of both IS() and IG() are exponential in the sizes of their inputs, the code in
Figure 8 is doubly exponential in the input size. We conjecture that we cannot do better than this,
but we have not yet proven a doubly exponential lower bound for the AMA case. When the input
formulas are MA timelines the algorithm takes singly exponential time, since IS(fg) =  when
 is in MA. We now prove an exponential lower bound when the input formulas are in MA. Again,
readers uninterested in the technical details of this proof can safely skip forward to Section 4.3.
For this argument, we take the available primitive propositions to be those in the set fpi;j j 1 
i  n; 1  j  ng, and consider the MA timelines
and

1 = s1; ; s2; ; : : : ; sn;
2 = s;1 ; s;2 ; : : : ; s;n ;
402

where

L EARNING T EMPORAL E VENTS

and

si; = pi;1 ^    ^ pi;n
s;j = p1;j ^    ^ pn;j :

We will show that any AMA LGG of 1 and 2 must contain an exponential number of timelines.
In particular, we will show that any AMA LGG is equivalent to the conjunction of a subset of
IG(f1 ; 2 g), and that certain timelines may not be omitted from such a subset.
Lemma 15. Any AMA LGG 	 of a set
timelines from IG() with j	0 j  j	j

 of MA timelines is equivalent to a conjunction 	0 of

Proof: Lemma 5 implies that any timeline  in 	 must subsume some timeline 0 2 IG(). But
then the conjunction 	0 of such 0 must be equivalent to 	, since it clearly covers  and is covered
by the LGG 	. Since 	0 was formed by taking one timeline from IG() for each timeline in 	,
we have j	0 j  j	j. 2 We can complete our argument then by showing that exponentially many
timelines in IG(f1 ; 2 g) cannot be omitted from such a conjunction while it remains an LGG.
Notice that for any i; j we have that si; \s;j = pi;j . This implies that any state in IG(f1 ; 2 g)
contains exactly one proposition, since each such state is formed by intersecting a state from 1 and
2 . Furthermore, the definition of interdigitation, applied here, implies the following two facts for
any timeline q1 ; q2 ; : : : ; qm in IG(f1 ; 2 g):
1. q1

= p1;1 and qm = pn;n.

2. For consecutive states qk
and not both i = i0 and j

= pi;j and qk+1 = pi ;j , i0 is either i or i + 1, j 0 is either j or j + 1,
= j0.
0

0

Together these facts imply that any timeline in IG(f1 ; 2 g) is a sequence of propositions starting
with p1;1 and ending with pn;n such that any consecutive propositions pi;j ; pi ;j are different with
i0 equal to i or i + 1 and j 0 equal to j or j + 1. We call a timeline in IG(f1 ; 2 g) square if
and only if each pair of consecutive propositions pi;j and pi ;j have either i0 = i or j 0 = j . The
following lemma implies that no square timeline can be omitted from the conjunction of timelines
in IG(1 ; 2 ) if it is to remain an LGG of 1 and 2 .
0

0

0

0

Lemma 16. Let 1 and 2 be as given above and let 	 = IG(f1 ; 2 g). For any
timelines are a subset of those in 	 that omits some square timeline, we have 	 < 	0 .
V

	0 whose

n 2)! and hence is exponenThe number of square timelines in IG(f1 ; 2 g) is equal to (n (21)!(
n 1)!
tial in the size of 1 and 2 . We have now completed the proof of the following result.

Theorem 17.

The smallest LGG of two MA formulas can be exponentially large.

Proof: By Lemma 15, any AMA LGG 	0 of 1 and 2 is equivalent to a conjunction of the same
number of timelines chosen from IG(f1 ; 2 g). However, by Lemma 16, any such conjunction
n 2)! timelines, and then so must 	0 , which must then be exponentially
must have at least (n (21)!(
n 1)!
large. 2
Conjecture 18.

The smallest LGG of two AMA formulas can be doubly-exponentially large.
403

F ERN , G IVAN , & S ISKIND

We now show that our lower-bound on AMA LGG complexity is not merely a consequence of
the existence of large AMA LGGs. Even when there is a small LGG, it can be expensive to compute
due to the difficulty of testing AMA subsumption:
Theorem 19. Determining whether a formula 	 is an AMA LGG for two given AMA formulas 	1
and 	2 is co-NP-hard, and is in co-NEXP, in the size of all three formulas together.
Proof: To show co-NP-hardness we use a straightforward reduction from AMA subsumption. Given
two AMA formulas 	1 and 	2 we decide 	1  	2 by asking whether 	2 is an AMA LGG of 	1
and 	2 . Clearly 	1  	2 iff 	2 is an LGG of the two formulas.
To show the co-NEXP upper bound, note that we can check in exponential time whether 	1  	
and 	2  	 using Proposition 7 and the polynomial-time MA subsumption algorithm. It remains
to show that we can check whether 	 is not the “least” subsumer. Since Theorem 14 shows that the
LGG of 	1 and 	2 is IG(IS(	1 ) [ IS(	2 )), if 	 is not the LGG then 	 6 IG(IS(	1 ) [ IS(	2 )).
Thus, by Proposition 7, if 	 is not a least subsumer, there must be timelines 1 2 IS(	) and
2 2 IG(IS(	1 ) [ IS(	2 )) such that 1 6 2 . We can then use exponentially long certificates
for “No” answers: each certificate is a pair of an interdigitation I1 of 	 and an interdigitation I2 of
IS(	1 ) [ IS(	2 ), such that the corresponding members 1 2 IS(	) and 2 2 IG(IS(	1 ) [ IS(	2 ))
have 1 6 2 . Given the pair of certificates I1 and I2 , 1 can be computed in polynomial time,
2 can be computed in exponential time, and the subsumption between them can be checked in
polynomial time (relative to their size, which can be exponential). If 	 is the LGG then 	 
IG(IS(	1 ) [ IS(	2 )), so that no such certificates will exist. 2
4.3 Syntactic Subsumption and Syntactic Least-General Generalization.
Given the intractability results for semantic AMA subsumption, we now introduce a tractable generality notion, syntactic subsumption, and discuss the corresponding LGG problem. The use of
syntactic forms of generality for efficiency is familiar in ILP (Muggleton & De Raedt, 1994)—
where, for example,  -subsumption is often used in place of the entailment generality relation.
Unlike AMA semantic subsumption, syntactic subsumption requires checking only polynomially
many MA subsumptions, each in polynomial time (via Theorem 9).
Definition 5. AMA 	1 is syntactically subsumed by AMA 	2 (written 	1
timeline 2 2 	2 , there is an MA timeline 1 2 	1 such that 1  2 .

syn 	2) iff for each MA

Proposition 20. AMA syntactic subsumption can be decided in polynomial time.
Syntactic subsumption trivially implies semantic subsumption—however, the converse does not
hold in general. Consider the AMA formulas (A; B ) ^ (B ; A), and A; B ; A where A and B are
primitive propositions. We have (A; B ) ^ (B ; A)  A; B ; A; however, we have neither A; B 
A; B ; A nor B ; A  A; B ; A, so that A; B ; A does not syntactically subsume (A; B ) ^ (B ; A).
Syntactic subsumption fails to recognize constraints that are only derived from the interaction of
timelines within a formula.
Syntactic Least-General Generalization. A syntactic AMA LGG is a syntactically least-general
AMA formula that syntactically subsumes the input AMA formulas. Here, “least” means that no
404

L EARNING T EMPORAL E VENTS

formula properly syntactically subsumed by a syntactic LGG can syntactically subsume the input
formulas. Based on the hardness gap between syntactic and semantic AMA subsumption, one might
conjecture that a similar gap exists between the syntactic and semantic LGG problems. Proving such
a gap exists requires closing the gap between the lower and upper bounds on AMA LGG shown in
Theorem 14 in favor of the upper bound, as suggested by Conjecture 18. While we cannot yet
show a hardness gap between semantic and syntactic LGG, we do give a syntactic LGG algorithm
that is exponentially more efficient than the best semantic LGG algorithm we have found (that of
Theorem 14). First, we show that syntactic LGGs exist and are unique up to mutual syntactic
subsumption (and hence up to semantic equivalence).
Theorem 21. There exists a syntactic LGG for any AMA formula set  that is syntactically subsumed by all syntactic generalizations of .
Proof: Let 	 be the conjunction of all the MA timelines that syntactically generalize  while
having size no larger than . As in the proof of Theorem 12, 	 is well defined. We show that
	 is a syntactic LGG for . First, note that 	 syntactically generalizes  because each timeline
of 	 generalizes a timeline in every member of , by the choice of 	. Now consider an arbitrary
syntactic generalization 	0 of . By the definition of syntactic subsumption, each timeline  in
	0 must subsume some timeline  in each member  of . Lemma 5 then implies that there is a
timeline 0 of size no larger than  that subsumes all the  while being subsumed by . By our
choice of 	, the timeline 0 must be a timeline of 	. It follows then that 	0 syntactically subsumes
	, and that 	 is a syntactic LGG of  subsumed by all other syntactic generalizations of . 2
In general, we know that semantic and syntactic LGGs are different, though clearly the syntactic
LGG is a semantic generalization and so must subsume the semantic LGG. For example, (A; B ) ^
(B ; A), and A; B ; A have a semantic LGG of A; B ; A, as discussed above; but their syntactic LGG
is (A; B ; true) ^ (true; B ; A), which subsumes A; B ; A but is not subsumed by A; B ; A. Even
so, for MA formulas:
Proposition 22.

For MA  and AMA 	,  syn

	 is equivalent to   	.

Proof: The forward direction is immediate since we already know syntactic subsumption implies
semantic subsumption. For the reverse direction, note that   	 implies that each timeline of 	
subsumes —thus since  is a single timeline each timeline in 	 subsumes “some timeline” in 
which is the definition of syntactic subsumption. 2
Proposition 23.

Any syntactic AMA LGG for an MA formula set  is also a semantic LGG for .

Proof: Now, consider a syntactic LGG 	 for . Proposition 22 implies that 	 is a semantic
generalization of . Consider any semantic LGG 	0 of . We show that 	  	0 to conclude that 	
is a semantic LGG for . Proposition 22 implies that 	0 syntactically subsumes . It follows that
	0 ^ 	 syntactically subsumes . But, 	0 ^ 	 is syntactically subsumed by 	, which is a syntactic
LGG of —it follows that 	0 ^ 	 syntactically subsumes 	, or 	 would not be a least syntactic
generalization of . But then 	  (	0 ^ 	), which implies 	  	0 , as desired. 2
We note that the stronger result stating that a formula 	 is a syntactic LGG of a set  of MA formulas if and only if it is a semantic LGG of  is not an immediate consequence of our results above. At
405

F ERN , G IVAN , & S ISKIND

first examination, the strengthening appears trivial, given the equivalence of   	 and  syn 	
for MA . However, being semantically least is not necessarily a stronger condition than being syntactically least—we have not ruled out the possibility that a semantically least generalization 	 may
syntactically subsume another generalization that is semantically (but not syntactically) equivalent.
(This question is open, as we have not found an example of this phenomenon either.)
Proposition 23 together with Theorem 21 have the nice consequence for our learning approach
that the syntactic LGG of two AMA formulas is a semantic LGG of those formulas, as long as the
original formulas are themselves syntactic LGGs of sets of MA timelines. Because our learning approach starts with training examples that are converted to MA timelines using the LGCF operation,
the syntactic LGGs computed (whether combining all the training examples at once, or incrementally computing syntactic LGGs of parts of the training data) are always syntactic LGGs of sets of
MA timelines and hence are also semantic LGGs, in spite of the fact that syntactic subsumption is
weaker than semantic subsumption. We note, however, that the resulting semantic LGGs may be
considerably larger than the smallest semantic LGG (which may not be a syntactic LGG at all).
Using Proposition 23, we now show that we cannot hope for a polynomial-time syntactic LGG
algorithm.
Theorem 24.

The smallest syntactic LGG of two MA formulas can be exponentially large.

Proof: Suppose there is always a syntactic LGG of two MA formulas that is not exponentially large.
Since by Proposition 23 each such formula is also a semantic LGG, there is always a semantic LGG
of two MA formulas that is not exponentially large. This contradicts Theorem 17. 2
While this is discouraging, we have an algorithm for the syntactic LGG whose time complexity
matches this lower-bound, unlike the semantic LGG case, where the best algorithm we have is
doubly exponential in the worst case. Theorem 14 yields an exponential time method for computing
the semantic LGG of a set of MA timelines —since for a timeline , IS() = , we can simply
conjoin all the timelines of IG(). Given a set of AMA formulas, the syntactic LGG algorithm uses
this method to compute the polynomially-many semantic LGGs of sets of timelines, one chosen
from each input formula, and conjoins all the results.
Theorem 25.
	1 ; : : : ; 	n .

The formula

 2	 IG(f1 ; : : : ; n g) is a syntactic LGG of the AMA formulas

V

i

i

Proof: Let 	 be i 2	i IG(f1 ; : : : ; n g). Each timeline  of 	 must subsume each 	i because
 is an output of IG on a set containing a timeline of 	i —thus 	 syntactically subsumes each 	i .
To show that 	 is a syntactically least such formula, consider a 	0 that syntactically subsumes every
	i . We show that 	 syn 	0 to conclude. Each timeline 0 in 	0 subsumes a timeline Ti 2 	i ,
for each i, by our assumption that 	i syn 	0 . But then by Lemma 5, 0 must subsume a member
of IG(fT1 ; : : : ; Tn g)—and that member is a timeline of 	—so each timeline 0 of 	0 subsumes a
timeline of 	. We conclude 	 syn 	0 , as desired. 2
V

This theorem yields an algorithm that computes a syntactic AMA LGG in exponential time—
pseudo-code for this method is given in Figure 9. The exponential time bound follows from the fact
that there are exponentially many ways to choose 1 ; : : : ; m in line 5, and for each of these there
are exponentially many semantic-LGG members in line 6 (since the i are all MA timelines)—the
product of these two exponentials is still an exponential.
406

L EARNING T EMPORAL E VENTS

1:
2:
3:
4:
5:
6:

syntactic-LGG(f	1 ; 	2 ; : : : ; 	m g)

// Input: AMA formulas f	1 ; : : : ; 	m g
// Output: syntactic LGG of f	1 ; : : : ; 	m g

G := fg;

for each h1 ; : : : ; m i 2 	1      	m

for each  in semantic-LGG(f1 ; : : : ; m g)

7:
8:
9:
10:

V

return (

if (80 2 G : 0 6 )
then G0 := f00 2 G j   00 g;
G := (G G0 ) [ fg;

G)

Figure 9: Pseudo-code that computes the syntactic AMA LGG of a set of AMA formulas.
The formula returned by the algorithm shown is actually a subset of the syntactic LGG given
by Theorem 25. This subset is syntactically (and hence semantically) equivalent to the formula
specified by the theorem, but is possibly smaller due to the pruning achieved by the if statement in
lines 7–9. A timeline is pruned from the set if it is (semantically) subsumed by any other timeline in
the set (one timeline is kept from any semantically equivalent group of timelines, at random). This
pruning of timelines is sound, since a timeline is pruned from the output only if it subsumes some
other formula in the output—this fact allows an easy argument that the pruned formula is syntactically equivalent to (i.e. mutually syntactically subsumed by) the unpruned formula. Section 4.4.2
traces the computations of this algorithm for an example LGG calculation. We note that in our empirical evaluation discussed in Section 6, there was no cost in terms of accuracy for using the more
efficient syntactic vs. semantic LGG. We know this because our learned definitions made errors in
the direction of being overly specific—thus, since the semantic-LGG is at least as specific as the
syntactic-LGG there would be no advantage to using the semantic algorithm.
The method does an exponential amount of work even if the result is small (typically because
many timelines can be pruned from the output because they subsume what remains). It is still an
open question as to whether there is an output-efficient algorithm for computing the syntactic AMA
LGG—this problem is in coNP and we conjecture that it is coNP-complete. One route to settling
this question is to determine the output complexity of semantic LGG for MA input formulas. We
believe that problem also to be coNP-complete, but have not proven this; if that problem is in P,
there is an output-efficient method for computing syntactic AMA LGG based on Theorem 25.
A summary of the algorithmic complexity results from this section can be found in Table 3 in
the conclusions section of this paper.
4.4 Examples: Least-General Generalization Calculations
Below we work through the details of a semantic and a syntactic LGG calculation. We consider the
AMA formulas 	 = (A; B ) ^ (B ; A) and  = A; B ; A, for which the semantic LGG is A; B ; A
and the syntactic LGG is (A; B ; true) ^ (true; B ; A).

407

F ERN , G IVAN , & S ISKIND

4.4.1 S EMANTIC LGG E XAMPLE
The first step in calculating the semantic LGG, according to the algorithm given in Figure 8, is to
compute the interdigitation-specializations of the input formulas (i.e., IS() and IS(	)). Trivially,
we have that IS() =  = A; B ; A. To calculate IS(	), we must consider the possible interdigitations of 	, for which there are three,

f hA; B i ; hB; B i ; hB; Ai g
f hA; B i ; hB; Ai g
f hA; B i ; hA; Ai ; hB; Ai g
Each interdigitation leads to the corresponding member of IS(	) by unioning (conjoining) the states
in each tuple, so IS(	) is

f (A ^ B ); B ; (A ^ B );
(A ^ B );
(A ^ B ); A; (A ^ B ) g:
Lines 5–9 of the semantic LGG algorithm compute the set S , which is equal to the union of the
timelines in IS(	) and IS(), with all subsumed timelines removed. For our formulas, we see that
each timeline in IS(	) is subsumed by —thus, we have that S =  = A; B ; A.
After computing S , the algorithm returns the conjunction of timelines in IG(S ), with redundant
timelines removed (i.e., all subsuming timelines are removed). In our case, IG(S ) = A; B ; A,
trivially, as there is only one timeline in S , thus the algorithm correctly computes the semantic LGG
of 	 and  to be A; B ; A.
4.4.2 S YNTACTIC LGG E XAMPLE
The syntactic LGG algorithm, shown in Figure 9, computes a series of semantic LGGs for MA
timeline sets, returning the conjunction of the results (after pruning). Line 5 of the algorithm, cycles
through timeline tuples from the cross-product of the input AMA formulas. In our case the tuples
in   	 are T1 = hA; B ; A; A; B i and T2 = hA; B ; A; B ; Ai—for each tuple, the algorithm
computes the semantic LGG of the tuple’s timelines.
The semantic LGG computation for each tuple uses the algorithm given in Figure 8, but the
argument is always a set of MA timelines rather than AMA formulas. For this reason, lines 4–
9 are superfluous, as for an MA timeline 0 , IS(0 ) = 0 . In the case of tuple T1 , lines 4–9
of the algorithm just compute S = fA; B ; A; A; B g. It remains to compute the interdigitationgeneralizations of S (i.e., IG(S )), returning the conjunction of those timelines after pruning (lines
10–15 in Figure 8). The set of all interdigitations of S are,

f hA; Ai ; hB; Ai ; hB; B i ; hB; Ai g
f hA; Ai ; hB; B i ; hB; Ai g
f hA; Ai ; hA; B i ; hB; B i ; hB; Ai g
f hA; Ai ; hA; B i ; hB; Ai g
f hA; Ai ; hA; B i ; hA; Ai ; hB; Ai g
By intersecting states in interdigitation tuples we get IG(S ),

f A; true; B ; true; A; B ; true; A; true; B ; true; A; true; true; A; true; A; true g
408

L EARNING T EMPORAL E VENTS

Since the timeline A; B ; true is subsumed by all timelines in IG(S ), all other timelines will be
pruned. Thus the semantic LGG algorithm returns A; B ; true as the semantic LGG of the timelines
in T1 .
Next the syntactic LGG algorithm computes the semantic LGG of the timelines in T2 . Following
the same steps as for T1 , we find that the semantic LGG of the timelines in T2 is true; B ; A. Since
A; B ; true and true; B ; A do not subsume one another, the set G computed by lines 5–9 of the
syntactic LGG algorithm is equal to f A; B ; true; true; B ; A g. Thus, the algorithm computes the
syntactic LGG of  and 	 to be (A; B ; true) ^ (true; B ; A). Note that, in this case, the syntactic
LGG is more general than the semantic LGG.

5. Practical Extensions
We have implemented a specific-to-general AMA learning algorithm based on the LGCF and syntactic LGG algorithms presented earlier. This implementation includes four practical extensions.
The first extension aims at controlling the exponential complexity by limiting the length of the
timelines we consider. Second we describe an often more efficient LGG algorithm based on a
modified algorithm for computing pairwise LGGs. The third extension deals with applying our
propositional algorithm to relational data, as is necessary for the application domain of visual event
recognition. Fourth, we add negation into the AMA language and show how to compute the corresponding LGCFs and LGGs using our algorithms for AMA (without negation). Adding negation
into AMA turns out to be crucial to achieving good performance in our experiments. We end this
section with a review of the overall complexity of our implemented system.
5.1 k-AMA Least-General Generalization
We have already indicated that our syntactic AMA LGG algorithm takes exponential time relative
to the lengths of the timelines in the AMA input formulas. This motivates restricting the AMA
language to k -AMA in practice, where formulas contain timelines with no more than k states.
As k is increased the algorithm is able to output increasingly specific formulas at the cost of an
exponential increase in computational time. In the visual-event–recognition experiments shown
later, as we increased k , the resulting formulas became overly specific before a computational bottleneck is reached—i.e., for that application the best values of k were practically computable and the
ability to limit k provided a useful language bias.
We use a k -cover operator in order to limit our syntactic LGG algorithm to k -AMA. A k -cover
of an AMA formula is a syntactically least general k -AMA formula that syntactically subsumes
the input—it is easy to show that a k -cover for a formula can be formed by conjoining all k -MA
timelines that syntactically subsume the formula (i.e., that subsume any timeline in the formula) .
Figure 10 gives pseudo-code for computing the k -cover of an AMA formula. It can be shown that
this algorithm correctly computes a k -cover for any input AMA formula. The algorithm calculates
the set of least general k -MA timelines that subsume each timeline in the input—the resulting k -MA
formulas are conjoined and “redundant” timelines are pruned using a subsumption test. We note that
the k -cover of an AMA formula may itself be exponentially larger than that formula; however, in
practice, we have found k -covers not to exhibit undue size growth.
Given the k -cover algorithm we restrict our learner to k -AMA as follows: 1) Compute the
k-cover for each AMA input formula. 2) Compute the syntactic AMA LGG of the resulting kAMA formulas. 3) Return the k -cover of the resulting AMA formula. The primary bottleneck of
409

F ERN , G IVAN , & S ISKIND

1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:

12:
13:
14:
15:
17:
18:
19:
20:

V

k-cover(k; 1im i )
V
// Input: positive natural number k , AMA formula 1im i
V
// Output: k -cover of 1im i
G := fg;
for i := 1 to m

:= hP1 ; : : : ; Pn i in all-values(a-k-partition (k; i ))
T
T
 := ( P1 ); : : : ; ( Pn );
if (80 2 G : 0 6 )
then G0 := f00 2 G j   00 g;
G := (G G0 ) [ fg;
V
return ( G)
for each P

a-k-partition (k; s1 ; : : : ; sj )

// Input: positive natural number k , MA timeline s1 ; : : : ; sj
// Output: a tuple of  k sets of consecutive states that partitions s1 ; : : : ; sj

 k then return hfs1g; : : : ; fsj gi;
if k = 1 then return hfs1 ; : : : ; sj gi;
l := a-member-of(f1; 2; : : : ; j k + 1g);
P0 = fs1 ; : : : ; sl g;
if j

return extend-tuple (P0 ; a-k-partition (k

// pick next block size
// construct next block

1; sl+1 ; : : : ; sj ));

Figure 10: Pseudo-code for non-deterministically computing a k-cover of an AMA formula, along
with a non-deterministic helper function for selecting a  k block partition of the states
of a timeline.

the original syntactic LGG algorithm is computing the exponentially large set of interdigitationgeneralizations—the k -limited algorithm limits this complexity as it only computes interdigitationgeneralizations involving k -MA timelines.
5.2 Incremental Pairwise LGG Computation
Our implemented learner computes the syntactic k-AMA LGG of AMA formula sets—however,
it does not directly use the algorithm describe above. Rather than compute the LGG of formula
sets via a single call to the above algorithm, it is typically more efficient to break the computation
into a sequence of pairwise LGG calculations. Below we describe this approach and the potential
efficiency gains.
It is straightforward to show that for both syntactic and semantic subsumption we have that
LGG(	1 ; : : : ; 	m ) = LGG(	1 ; LGG(	2 ; : : : ; 	m )) where the 	i are AMA formulas. Thus, by
recursively applying this transformation we can incrementally compute the LGG of m AMA formulas via a sequence of m 1 pairwise LGG calculations. Note that since the LGG operator is
410

L EARNING T EMPORAL E VENTS

commutative and associative the final result does not depend on the order in which we process the
formulas. We will refer to this incremental pairwise LGG strategy as the incremental approach and
to the strategy that makes a single call to the k-AMA LGG algorithm (passing in the entire formula
set) as the direct approach.
To simplify the discussion we will consider computing the LGG of an MA formula set —the
argument can be extended easily to AMA formulas (and hence to k-AMA). Recall that the syntactic
LGG algorithm of Figure 9 computes LGG() by conjoining timelines in IG() that do not subsume any of the others, eliminating subsuming timelines in a form of pruning. The incremental
approach applies this pruning step after each pair of input formulas is processed—in contrast, the
direct approach must compute the interdigitation-generalization of all the input formulas before any
pruning can happen. The resulting savings can be substantial, and typically more than compensates
for the extra effort spent checking for pruning (i.e. testing subsumption between timelines as the
incremental LGG is computed). A formal approach to describing these savings can be constructed
S
S
based on the observation that both 2IG(f1 ;2 g) IG(fg[ ) and 2LGG(1 ;2 ) IG(fg[ )
can be seen to compute the LGG of  [ f1 ; 2 g, but with the latter being possibly much cheaper
to compute due to pruning. That is, LGG(1 ; 2 ) typically contains a much smaller number of
timelines than IG(f1 ; 2 g).
Based on the above observations our implemented system uses the incremental approach to
compute the LGG of a formula set. We now describe an optimization used in our system to speedup
the computation of pairwise LGGs, compared to directly running the algorithm in Figure 9. Given a
pair of AMA formulas 	1 = 1;1 ^    ^ 1;m and 	2 = 2;1 ^    ^ 2;n , let 	 be their syntactic
LGG obtained by running the algorithm in Figure 9. The algorithm constructs 	 by computing
LGGs of all MA timeline pairs (i.e., LGG(1;i ; 2;j ) for all i and j ) and conjoining the results
while removing subsuming timelines. It turns out that we can often avoid computing many of these
MA LGGs. To see this consider the case when there exists i and j such that 1;i  2;j , we know
LGG(1;i ; 2;j ) = 2;j which tells us that that 2;j will be considered for inclusion into 	 (it may
be pruned). Furthermore we know that any other LGG involving 2;j will subsume 2;j and thus
will be pruned from 	. This shows that we need not compute any MA LGGs involving 2;j , rather
we need only to consider adding 2;j when constructing 	.
The above observation leads to a modified algorithm (used in our system) for computing the
syntactic LGG of a pair of AMA formulas. The new algorithm only computes LGGs between
non-subsuming timelines. Given AMA formulas 	1 and 	2 , the modified algorithm proceeds as
follows: 1) Compute the subsumer set S = f 2 	1 j 90 2 	2 s:t: 0  g [ f 2 	2 j 90 2
	1 s:t: 0  g. 2) Let AMA 	01 (	02 ) be the result of removing timelines from 	1 (	2 ) that are
in S . 3) Let 	0 be the syntactic LGG of 	01 and 	02 computed by running the algorithm in Figure 9
(if either 	0i is empty then 	0 will be empty). 4) Let S 0 be the conjunction of timelines in S that do
not subsume any timeline in 	0 . 5) Return 	 = 	0 ^ S 0 . This method avoids computing MA LGGs
involving subsuming timelines (an exponential operation) at the cost of performing polynomially
many MA subsumption tests (a polynomial operation). We have noticed a significant advantage to
using this procedure in our experiments. In particular, the advantage tends to grow as we process
more training examples. This is due to the fact that as we incrementally process training examples
the resulting formulas become more general—thus, these more general formulas are likely to have
more subsuming timelines. In the best case when 	1 syn 	2 (i.e., all timelines in 	2 are subsuming), we see that step 2 produces an empty formula and thus step 3 (the expensive step) performs no
work—in this case we return the set S = 	2 as desired.
411

F ERN , G IVAN , & S ISKIND

5.3 Relational Data
L EONARD produces relational models that involve objects and (force dynamic) relations between
those objects. Thus event definitions include variables to allow generalization over objects. For
example, a definition for P ICK U P (x; y; z ) recognizes both P ICK U P (hand; block; table) as well as
P ICK U P (man; box; floor). Despite the fact that our k -AMA learning algorithm is propositional, we
are still able to use it to learn relational definitions.
We take a straightforward object-correspondence approach to relational learning. We view the
models output by L EONARD as containing relations applied to constants. Since we (currently)
support only supervised learning, we have a set of distinct training examples for each event type.
There is an implicit correspondence between the objects filling the same role across the different training models for a given type. For example, models showing P ICK U P (hand; block; table)
and P ICK U P (man; box; floor) have implicit correspondences given by hhand; mani, hblock; boxi,
and htable; floori. We outline two relational learning methods that differ in how much objectcorrespondence information they require as part of the training data.
5.3.1 C OMPLETE O BJECT C ORRESPONDENCE
This first approach assumes that a complete object correspondence is given, as input, along with
the training examples. Given such information, we can propositionalize the training models by
replacing corresponding objects with unique constants. The propositionalized models are then given
to our propositional k -AMA learning algorithm which returns a propositional k -AMA formula. We
then lift this propositional formula by replacing each constant with a distinct variable. Lavrac et al.
(1991) has taken a similar approach.
5.3.2 PARTIAL O BJECT C ORRESPONDENCE
The above approach assumes complete object-correspondence information. While it is sometimes
possible to provide all correspondences (for example, by color-coding objects that fill identical
roles when recording training movies), such information is not always available. When only a
partial object correspondence (or even none at all) is available, we can automatically complete the
correspondence and apply the above technique.
For the moment, assume that we have an evaluation function that takes two relational models
and a candidate object correspondence, as input, and yields an evaluation of correspondence quality. Given a set of training examples with missing object correspondences, we perform a greedy
search for the best set of object-correspondence completions over the models. Our method works
by storing a set P of propositionalized training examples (initially empty) and a set U of unpropositionalized training examples (initially the entire training set). For the first step, when P is empty, we
evaluate all pairs of examples from U , under all possible correspondences, select the pair that yields
the highest score, remove the examples involved in that pair from U , propositionalize them according to the best correspondence, and add them to P . For each subsequent step, we use the previously
computed values of all pairs of examples, one from U and one from P , under all possible correspondences. We then select the example from U and correspondence that yields the highest average
score relative to all models in P —this example is removed from U , propositionalized according to
the winning correspondence, and added to P . For a fixed number of objects, the effort expended
here is polynomial in the size of the training set; however, if the number of objects b that appear in a
training example is allowed to grow, the number of correspondences that must be considered grows
412

L EARNING T EMPORAL E VENTS

as bb . For this reason, it is important that the events involved manipulate only a modest number of
objects.
Our evaluation function is based on the intuition that object roles for visual events (as well as
events from other domains) can often be inferred by considering the changes between the initial
and final moments of an event. Specifically, given two models and an object correspondence, we
first propositionalize the models according to the correspondence. Next, we compute ADD and
DELETE lists for each model. The ADD list is the set of propositions that are true at the final
moment but not the initial moment. The DELETE list is the set of propositions that are true at the
initial moment but not the final moment. These add and delete lists are motivated by STRIPS action
representations (Fikes & Nilsson, 1971). Given such ADDi and DELETEi lists for models 1 and 2,
the evaluation function returns the sum of the cardinalities of ADD1 \ ADD2 and DELETE1 \
DELETE2 . This heuristic measures the similarity between the ADD and DELETE lists of the two
models. The intuition behind this heuristic is similar to the intuition behind the STRIPS actiondescription language—i.e., that most of the differences between the initial and final moments of an
event occurrence are related to the target event, and that event effects can be described by ADD and
DELETE lists. We have found that this evaluation function works well in the visual-event domain.
Note, that when full object correspondences are given to the learner (rather than automatically
extracted by the learner), the training examples are interpreted as specifying that the target event
took place as well as which objects filled the various event roles (e.g., P ICK U P (a,b,c)). Rather,
when no object correspondences are provided the training examples are interpreted as specifying the
existence of a target event occurrence but do not specify which objects fill the roles (i.e., the training
example is labeled by P ICK U P rather than P ICK U P (a,b,c)). Accordingly, the rules learned when no
correspondences are provided only allow us to infer that a target event occurred and not which
objects filled the event roles. For example when object correspondences are manually provided the
learner might produce the rule,
"

4 (S UPPORTS (z; y) ^ C ONTACTS (z; y));
P ICK U P (x; y; z ) =
(S UPPORTS (x; y) ^ ATTACHED (x; y))

#

whereas a learner that automatically extracts the correspondences would instead produce the rule,
"

4 (S UPPORTS (z; y) ^ C ONTACTS (z; y));
P ICK U P =
(S UPPORTS (x; y) ^ ATTACHED (x; y))

#

Its worth noting, however, that upon producing the second rule the availability of a single training
example with correspondence information allows the learner to determine the roles of the variables,
upon which it can output the first rule. Thus, under the assumption that the learner can reliably
extract object correspondences, we need not label all training examples with correspondence information in order to obtain definitions that explicitly recognize object roles.
5.4 Negative Information
The AMA language does not allow negated propositions. Negation, however, is sometimes necessary to adequately define an event type. In this section, we consider the language AMA , which is a
superset of AMA, with the addition of negated propositions. We first give the syntax and semantics
of AMA , and extend AMA syntactic subsumption to AMA . Next, we describe our approach to
413

F ERN , G IVAN , & S ISKIND

learning AMA formulas using the above-presented algorithms for AMA. We show that our approach correctly computes the AMA LGCF and the syntactic AMA LGG. Finally, we discuss
an alternative, related approach to adding negation designed to reduce the overfitting that appears to
result from the full consideration of negated propositions.
AMA has the same syntax as AMA, only with a new grammar for building states with negated
propositions:
literal
state

::= true j prop j :3prop
::= literal j literal ^ state

where prop is any primitive proposition. The semantics of AMA
for state satisfaction.

are the same as for AMA except



A positive literal P (negative literal
true (false), for every x 2 I .10

:3P ) is satisfied by model hM; I i iff M [x] assigns P



A state l1 ^    ^ lm is satisfied by model hM; I i iff each literal li is satisfied by hM; I i.

Subsumption. An important difference between AMA and AMA is that Proposition 2, establishing the existence of witnessing interdigitations to MA subsumption, is no longer true for MA .
In other words, if we have two timelines 1 ; 2 2 AMA , such that 1  2 , there need not be an
interdigitation that witnesses 1  2 . To see this, consider the AMA timelines:

1 = (a ^ b ^ c); b; a; b; (a ^ b ^ :  c)
2 = b; a; c; a; b; a; :  c; a; b
We can then argue:
1. There is no interdigitation that witnesses 1  2 . To see this, first show that, in any such
witness, the second and fourth states of 1 (each just “b”) must interdigitate to align with
either the first and fifth, or the fifth and ninth states of 2 (also, each just “b”). But in either
of these cases, the third state of 1 will interdigitate with states of 2 that do not subsume it.
2. Even so, we still have that 1  2 . To see this, consider any model hM; I i that satisfies 1 .
There must be an interval [i1 ; i2 ] within I such that hM; [i1 ; i2 ]i satisfies the third state of 1 ,
that is the state “a.” We have two cases:
(a) The proposition c is true at some point in hM; [i1 ; i2 ]i. Then, one can verify that hM; I i
satisfies both 1 and 2 in the following alignment:

1
2

=
=

(a ^ b ^ c); b;
b;

a;
a; c; a;

b;
b;

(a ^ b ^ :  c)
a; :  c; a; b

10. We note that it is important that we use the notation :3P rather than just :P . In event-logic, the formula :P
is satisfied by a model whenever P is false as some instant in the model. Rather, event-logic interprets :3P as
indicating that P is never true in the model (as defined above). Notice that the first form of negation does not yield a
liquid property—i.e., :P can be true along an interval but not necessarily during all subintervals. The second form of
negation, however, does yield a liquid property provided that P is liquid. This is important to our learning algorithms,
since they all assume states are built from liquid properties.

414

L EARNING T EMPORAL E VENTS

(b) The proposition c is false everywhere in hM; [i1 ; i2 ]i. Then, one can verify that hM; I i
satisfies both 1 and 2 in the following alignment:

1 =
(a ^ b ^ c);
2 =
b; a; c; a;
It follows that 1  2 .

b;
b;

a;
a; :  c; a;

b; (a ^ b ^ :  c)
b

In light of such examples, we conjecture that it is computationally hard to compute AMA
subsumption even between timelines. For this reason, we extend our definition of syntactic subsumption to AMA in a way that provides a clearly tractable subsumption test analogous to that
discussed above for AMA.
Definition 6. AMA 	1 is syntactically subsumed by AMA 	2 (written 	1 syn 	2 ) iff for
each timeline 2 2 	2 , there is a timeline 1 2 	1 such that there is a witnessing interdigitation
for 1  2 .
The difference between the definition here and the previous one for AMA is that here we only need
to test for witnessing interdigitations between timelines rather than subsumption between timelines.
For AMA formulas, we note that the new and old definition are equivalent (due to Proposition 2);
however, for AMA the new definition is weaker, and will result in more general LGG formulas. As
one might expect, AMA syntactic subsumption implies semantic subsumption and can be tested
in polynomial-time using the subsumption graph described in Lemma 8 to test for witnesses.
Learning. Rather than design new LGCF and LGG algorithms to directly handle AMA , we
instead compute these functions indirectly by applying our algorithms for AMA to a transformed
problem. Intuitively, we do this by adding new propositions to our models (i.e., the training examples) that represent the proposition negations. Assume that the training-example models are over the
set of propositions P = fp1 ; : : : ; pn g. We introduce a new set P = fp1 ; : : : ; pn g of propositions
and use these to construct new training models over P [ P by assigning true to pi at a time in a
model iff pi is false in the model at that time. After forming the new set of training models (each
with twice as many propositions as the original models) we compute the least general AMA formula
that covers the new models (by computing the AMA LGCFs and applying the syntactic AMA LGG
algorithm), resulting in an AMA formula 	 over the propositions P [ P . Finally we replace each pi
in 	 with :3pi resulting in an AMA formula 	0 over propositions in P —it turns out that under
syntactic subsumption 	0 is the the least general AMA formula that covers the original training
models.
We now show the correctness of the above transformational approach to computing the AMA
LGCF and syntactic LGG. First, we introduce some notation. Let M be the set of all models over
P . Let M be the set of models over P [ P , such that at any time, for each i, exactly one of pi
and pi is true. Let T be the following mapping from M to M: for hM; I i 2 M, T [hM; I i] is the
unique hM 0 ; I i 2 M such that for all j 2 I and all i, M 0 (j ) assigns pi true iff M (j ) assigns pi
true. Notice that the inverse of T is a functional mapping from M to M. Our approach to handling
negation using purely AMA algorithms begins by applying T to the original training models. In
what follows, we consider AMA formulas over the propositions in P , and AMA formulas over
the propositions in P [ P .
Let F be a mapping from AMA to AMA where for 	 2 AMA , F [	] is an AMA formula
identical to 	 except that each :3pi in 	 is replaced with pi . Notice that the inverse of F is a func415

F ERN , G IVAN , & S ISKIND

tion from AMA to AMA and corresponds to the final step in our approach described above. The
following lemma shows that there is a one-to-one correspondence between satisfaction of AMA
formulas by models in M and satisfaction of AMA formulas by models in M.
Lemma 26. For any model hM; I i 2 M and any 	 2 AMA ,
T [hM; I i].

	 covers hM; I i

iff

F [	] covers

Using this lemma, it is straightforward to show that our transformational approach computes the
AMA LGCF under semantic subsumption (and hence under syntactic subsumption).
Proposition 27.

For any

hM; I i 2 M, let  be the AMA LGCF of the model T [hM; I i].
LGCF of hM; I i, up to equivalence.

F 1 [] is the unique AMA

Then,

Proof: We know that  covers T [hM; I i], therefore by Lemma 26 we know that F 1 [] covers
hM; I i. We now show that F 1[] is the least-general formula in AMA that covers hM; I i. For
the sake of contradiction assume that some 0 2 AMA covers hM; I i but that 0 < F 1 []. It
follows that there is some model hM 0 ; I 0 i that is covered by F 1 [] but not by 0 . By Lemma 26
we have that F [0 ] covers T [hM; I i] and since  is the unique AMA LGCF of T [hM; I i], up to
equivalence, we have that   F [0 ]. However, we also have that T [hM 0 ; I 0 i] is covered by 
but not by F [0 ] which gives a contradiction. Thus, no such 0 can exist. It follows that  is an
AMA LGCF. The uniqueness of the AMA LGCF up to equivalence follows because AMA is
closed under conjunction; so that if there were any two non-equivalent LGCF formulas, they could
be conjoined to get an LGCF formula strictly less than one of them. 2
Below we use the fact that the F operator preserves syntactic subsumption. In particular, given
two MA timelines 1 ; 2 , it is clear that any witnessing interdigitation of 1  2 can be trivially
converted into a witness for F [1 ]  F [2 ] (and vice versa). Since syntactic subsumption is defined
in terms of witnessing interdigitations, it follows that for any 	1 ; 	2 2 AMA , (	1 syn 	2 ) iff
(F [	1 ] syn F [	2 ]). Using this property, it is straightforward to show how to compute the syntactic
AMA LGG using the syntactic AMA LGG algorithm.
Proposition 28.

For any AMA

formulas

	1 ; : : : ; 	m ,

let

	

fF [	1 ]; : : : ; F [	m ]g. Then, F 1[	] is the unique syntactic AMA

be the syntactic AMA LGG of
LGG of f	1 ; : : : ; 	m g.

Proof: We know that for each i, F [	i ] syn 	—thus, since F 1 preserves syntactic subsumption,
we have that for each i, 	i syn F 1 [	]. This shows that F 1 [	] is a generalization of the inputs.
We now show that F 1 [	] is the least such formula. For the sake of contradiction assume that
F 1 [	] is not least. It follows that there must be a 	0 2 AMA such that 	0 <syn F 1 [	] and for
each i, 	i syn 	0 . Combining this with the fact that F preserves syntactic subsumption, we get
that F [	0 ] <syn 	 and for each i, F [	i ]  F [	0 ]. But this contradicts the fact that 	 is an LGG;
so we must have that F 1 [	] is a syntactic AMA LGG. As argued elsewhere, the uniqueness of
this LGG follows from the fact that AMA is closed under conjunction. 2
These propositions ensure the correctness of our transformational approach to computing the
syntactic LGG within AMA . For the case of semantic subsumption, the transformational approach
does not correctly compute the AMA LGG. To see this, recall that above we have given two timelines 1 ; 2 2 AMA , such that 1  2 , but there is no witnessing interdigitation. Clearly under
416

L EARNING T EMPORAL E VENTS

semantic subsumption, the AMA LGG of 1 and 2 is 2 . However, the semantic AMA LGG of
F [1 ] and F [2 ] is not F [2 ]. The reason for this is that since there is no witness to F [1 ]  F [2 ]
(and the F [i ] are MA timelines), we know by Proposition 2 that F [1 ] 6 F [2 ]. Thus, F [2 ]
cannot be returned as the AMA LGG, since it does not subsume both input formulas—this shows
that the transformational approach will not return 2 = F 1 [F [2 ]]. Here, the transformational
approach will produce an AMA formula that is more general than 2 .
On the computational side, we note that, since the transformational approach doubles the number of propositions in the training data, algorithms specifically designed for AMA may be more
efficient. Such algorithms might leverage the special structure of the transformed examples that our
AMA algorithms ignore—in particular, that exactly one of pi or pi is true at any time.
Boundary Negation. In our experiments, we actually compare two methods for assigning truth
values to the pi propositions in the training data models. The first method, called full negation,
assigns truth values as described above, yielding the syntactically least-general AMA formula that
covers the examples. We found, however, that using full negation often results in learning overly
specific formulas. To help alleviate this problem, our second method places a bias on the use of
negation. Our choice of bias is inspired by the idea that, often, much of the useful information for
characterizing an event type is in its pre- and post-conditions. The second method, called boundary
negation, differs from full negation in that it only allows pi to be true in the initial and final moments
of a model (and then only if pi is false). pi must be false at all other times. That is, we only allow
“informative” negative information at the beginnings and ends of the training examples. We have
found that boundary negation provides a good trade-off between no negation (i.e., AMA), which
often produces overly general results, and full negation (i.e., AMA ), which often produces overly
specific and much more complicated results.
5.5 Overall Complexity and Scalability
We now review the overall complexity of our visual event learning component and discuss some
scalability issues. Given a training set of temporal models (i.e., a set of movies), our system does the
following: 1) Propositionalize the training models, translating negation as descried in Section 5.4.
2) Compute the LGCF of each propositional model. 3) Compute the k -AMA LGG of the LGCFs.
4) Return a lifted (variablized) version of the LGG. Steps two and four require little computational
overhead, being linear in the sizes of the input and output respectively. Steps one and three are
the computational bottlenecks of the system—they encompass the inherent exponential complexity
arising from the relational and temporal problem structure.
Step One. Recall from Section 5.3.2 that our system allows the user to annotate training examples with object correspondence information. Our technique for propositionalizing the models was
shown to be exponential in the number of unannotated objects in a training example. Thus, our
system requires that the number of objects be relatively small or that correspondence information
be given for all but a small number of objects. Often the event class definitions we are interested
in do not involve a large number of objects. When this is true, in a controlled learning setting we
can manage the relational complexity by generating training examples with only a small number (or
zero) irrelevant objects. This is the case for all of the domains studied empirically in this paper.
In a less controlled setting, the number of unannotated objects may prohibit the use of our
correspondence technique—there are at least three ways one might proceed. First, we can try to
417

F ERN , G IVAN , & S ISKIND

develop efficient domain-specific techniques for filtering objects and finding correspondences. That
is, for a particular problem it may be possible to construct a simple filter that removes irrelevant
objects from consideration and then to find correspondences for any remaining objects. Second, we
can provide the learning algorithm with a set of hand-coded first-order formulas, defining a set of
domain-specific features (e.g., in the spirit of Roth & Yih, 2001). These features can then be used
to propositionalize the training instances. Third, we can draw upon ideas from relational learning to
design a “truly first-order” version of the k -AMA learning algorithm. For example, one could use
existing first-order generalization algorithms to generalize relational state descriptions. Effectively
this approach pushes the object correspondence problem into the k -AMA learning algorithm rather
than treating it as a preprocessing step. Since it is well known that computing first-order LGGs can
be intractable (Plotkin, 1971), practical generalization algorithms retain tractability by constraining
the LGGs in various ways (e.g., Muggleton & Feng, 1992; Morales, 1997).
Step Three. Our system uses the ideas of Section 5.2 to speedup the k -AMA LGG computation
for a set of training data. Nevertheless, the computational complexity is still exponential in k —thus,
in practice we are restricted to using relatively small values of k . While this restriction did not limit
performance in our visual event experiments, we expect that it will limit the direct applicability
of our system to more complex problems. In particular, many event types of interest may not
be adequately represented via k -AMA when k is small. Such event types, however, often contain
significant hierarchical structure—i.e., they can be decomposed into a set of “short” sub-event types.
An interesting research direction is to consider using our k -AMA learner as a component of a
hierarchical learning system—there it could be used to learn k -AMA sub-event types. We note
that our learner alone cannot be applied hierarchically because it requires liquid primitive events,
but learns non-liquid composite event types. Further work is required (and intended) to construct a
hierarchical learner based perhaps on non-liquid AMA learning.
Finally, recall that to compute the LGG of m examples, our system uses a sequence of m 1
pairwise LGG calculations. For a fixed k , each pairwise calculation takes polynomial time. However, since the size of a pairwise LGG can grow by at least a constant factor with respect to the
inputs, the worst-case time complexity of computing the sequence of m 1 pairwise LGGs is exponential in m. We expect that this worst case will primarily occur when the target event type does not
have a compact k -AMA representation—in which case a hierarchical approach as described above
is more appropriate. When there is a compact representation, our empirical experience indicates
that such growth does not occur—in particular, each pairwise LGG tends to yield significant pruning. For such problems, reasonable assumptions about the amount of pruning11 imply that the time
complexity of computing the sequence of m 1 pairwise LGGs is polynomial in m.

6. Experiments
6.1 Data Set
Our data set contains examples of 7 different event types: pick up, put down, stack, unstack, move,
assemble, and disassemble. Each of these involve a hand and two to three blocks. For a detailed
description and sample video sequences of these event types, see Siskind (2001). Key frames from
sample video sequences of these event types are shown in Figure 11. The results of segmentation,
11. In particular, assume that the size of a pairwise k-AMA LGG is “usually” bounded by the sizes of the k-covers of the
inputs.

418

L EARNING T EMPORAL E VENTS

tracking, and model reconstruction are overlaid on the video frames. We recorded 30 movies for
each of the 7 event classes resulting in a total of 210 movies comprising 11946 frames.12 We
replaced one assemble movie (assemble-left-qobi-04), with a duplicate copy of another (assembleleft-qobi-11) because of segmentation and tracking errors.
Some of the event classes are hierarchical in that occurrences of events in one class contain occurrences of events in one or more simpler classes. For example, a movie depicting a
M OVE (a; b; c; d) event (i.e. a moves b from c to d) contains subintervals where P ICK U P (a; b; c)
and P UT D OWN (a; b; d) events occur. In our experiments, when learning the definition of an event
class only the movies for that event class are used in training. We do not train on movies for other
event classes that may also depict an occurrence of the event class being learned as a subevent.
However, in evaluating the learned definitions, we wish to detect both the events that correspond to
an entire movie as well as subevents that correspond to portions of that movie. For example, given a
movie depicting a M OVE (a; b; c; d) event, we wish to detect not only the M OVE(a; b; c; d) event but
also the P ICK U P (a; b; c) and P UT D OWN (a; b; d) subevents as well. For each movie type in our data
set, we have a set of intended events and subevents that should be detected. If a definition does not
detect an intended event, we deem the error a false negative. If a definition detects an unintended
event, we deem the error a false positive. For example, if a movie depicts a M OVE(a; b; c; d) event,
the intended events are M OVE(a; b; c; d), P ICK U P (a; b; c), and P UT D OWN (a; b; c). If the definition
for pick up detects the occurrence of P ICK U P (c; b; a) and P ICK U P (b; a; c), but not P ICK U P (a; b; c),
it will be charged two false positives as well as one false negative. We evaluate our definitions in
terms of false positive and negative rates as describe below.
6.2 Experimental Procedure
For each event type, we evaluate the k -AMA learning algorithm using a leave-one-movie-out crossvalidation technique with training-set sampling. The parameters to our learning algorithm are k
and the degree D of negative information used. The value of D is either P, for positive propositions
only, BN, for boundary negation, or N, for full negation. The parameters to our evaluation procedure
include the target event type E and the training-set size N . Given this information, the evaluation
proceeds as follows: For each movie M (the held-out movie) from the 210 movies, apply the k AMA learning algorithm to a randomly drawn training sample of N movies from the 30 movies of
event type E (or 29 movies if M is one of the 30). Use L EONARD to detect all occurrences of the
learned event definition in M . Based on E and the event type of M , record the number of false
positives and false negatives in M , as detected by L EONARD . Let FP and FN be the total number
of false positives and false negatives observed over all 210 held-out movies respectively. Repeat the
entire process of calculating FP and FN 10 times and record the averages as FP and FN.13
Since some event types occur more frequently in our data than others because simpler events
occur as subevents of more complex events but not vice versa, we do not report FP and FN directly.
Instead, we normalize FP by dividing by the total number of times L EONARD detected the target
event correctly or incorrectly within all 210 movies and we normalize FN by dividing by the total
12. The source code and all of the data used for these experiments are available as Online Appendix 1, and also from
ftp://ftp.ecn.purdue.edu/qobi/ama.tar.Z.
13. While we did not record the times for our experiments, the system is fast enough to give live demos when N = 29
and k = 3 with boundary negation, giving the best results we show here (though we don’t typically record 29 training
videos in a live demo for other reasons). Some of the less favorable parameter settings (particularly k = 4 and full
negation) can take a (real-time) hour or so.

419

F ERN , G IVAN , & S ISKIND

pick up

put down

stack

unstack

move

assemble

disassemble

Figure 11: Key frames from sample videos of the 7 event types.

420

L EARNING T EMPORAL E VENTS

number of correct occurrences of the target event within all 210 movies (i.e., the human assessment
of the number of occurrences of the target event). The normalized value of FP estimates the probability that the target event did not occur given that it was predicted to occur, while the normalized
value of FN estimates the probability that the event was not predicted to occur given that it did
occur.
6.3 Results
To evaluate our k -AMA learning approach, we ran leave-one-movie-out experiments, as described
above, for varying k , D , and N . The 210 example movies were recorded with color-coded objects to
provide complete object-correspondence information. We compared our learned event definitions to
the performance of two sets of hand-coded definitions. The first set HD1 of hand-coded definitions
appeared in Siskind (2001). In response to subsequent deeper understanding of the behavior of
L EONARD ’s model-reconstruction methods, we manually revised these definitions to yield another
set HD2 of hand-coded definitions that gives a significantly better FN performance at some cost
in FP performance. Appendix C gives the event definitions in HD1 and HD2 along with a set of
machine-generated definitions, produced by the k -AMA learning algorithm, given all training data
for k = 30 and D = BN.
6.3.1 O BJECT C ORRESPONDENCE
To evaluate our algorithm for finding object correspondences, we ignored the correspondence information provided by color coding and applied the algorithm to all training models for each event
type. The algorithm selected the correct correspondence for all 210 training models. Thus, for this
data set, the learning results when no correspondence information is given will be identical to those
where the correspondences are manually provided, except that, in the first case, the rules will not
specify particular object roles, as discussed in section 5.3.2. Since our evaluation procedure uses
role information, the rest of our experiments use the manual correspondence information, provided
by color-coding, rather than computing it.
While our correspondence technique was perfect in these experiments, it may not be suited to
some event types. Furthermore, it is likely to produce more errors as noise levels increase. Since
correspondence errors represent a form of noise and our learner makes no special provisions for
handling noise, the results are likely to be poor when such errors are common. For example, in the
worst case, it is possible for a single extremely noisy example to cause the the LGG to be trivial (i.e.,
the formula true). In such cases, we will be forced to improve the noise tolerance of our learner.
6.3.2 VARYING k

The first three rows of Table 1 show the FP and FN values for all 7 event types for k 2 f2; 3; 4g ,
N = 29 (the maximum), and D = BN. Similar trends were found for D = P and D = N. The
general trend is that, as k increases, FP decreases or remains the same and FN increases or remains
the same. Such a trend is a consequence of our k -cover approach. This is because, as k increases,
the k -AMA language contains strictly more formulas. Thus for k1 > k2 , the k1 -cover of a formula
will never be more general than the k2 -cover. This strongly suggests, but does not prove, that FP
will be non-increasing with k and FN will be non-decreasing with k .
Our results show that 2-AMA is overly general for put down and assemble, i.e. it gives high
FP. In contrast, 3-AMA achieves FP = 0 for each event type, but pays a penalty in FN compared
421

F ERN , G IVAN , & S ISKIND

k D
2 BN

pick up

put down

stack

unstack

move

assemble

disassemble

FP
FN

0
0

0.14
0.19

0
0.12

0
0.03

0
0

0.75
0

0
0

3

BN

FP
FN

0
0

0
0.2

0
0.45

0
0.10

0
0.03

0
0.07

0
0.10

4

BN

FP
FN

0
0

0
0.2

0
0.47

0
0.12

0
0.03

0
0.07

0
0.17

3

P

FP
FN

0.42
0

0.5
0.19

0
0.42

0.02
0.11

0
0.03

0
0.03

0
0.10

3

BN

FP
FN

0
0

0
0.2

0
0.45

0
0.10

0
0.03

0
0.07

0
0.10

3

N

FP
FN

0
0.04

0
0.39

0
0.58

0
0.16

0
0.13

0
0.2

0
0.2

HD1

FP
FN

0.01
0.02

0.01
0.22

0
0.82

0
0.62

0
0.03

0
1.0

0
0.5

HD2

FP
FN

0.13
0.0

0.11
0.19

0
0.42

0
0.02

0
0.0

0
0.77

0
0.0

Table 1: FP and FN for learned definitions, varying both k and D , and for hand-coded definitions.
to 2-AMA. Since 3-AMA achieves FP = 0, there is likely no advantage in moving to k -AMA for
k > 3. That is, the expected result is for FN to become larger. This effect is demonstrated for
4-AMA in the table.
6.3.3 VARYING D

Rows four through six of Table 1 show FP and FN for all 7 event types for D 2 fP; BN; Ng, N = 29,
and k = 3. Similar trends were observed for other values of k . The general trend is that, as the
degree of negative information increases, the learned event definitions become more specific. In
other words, FP decreases and FN increases. This makes sense since, as more negative information
is added to the training models, more specific structure can be found in the data and exploited by
the k -AMA formulas. We can see that, with D = P, the definitions for pick up and put down are
overly general, as they produce high FP. Alternatively, with D = N, the learned definitions are
overly specific, giving FP = 0, at the cost of high FN. In these experiments, as well as others, we
have found that D = BN yields the best of both worlds: FP = 0 for all event types and lower FN
than achieved with D = N.
Experiments not shown here have demonstrated that, without negation for pick up and put down,
we can increase k arbitrarily, in an attempt to specialize the learned definitions, and never significantly reduce FP. This indicates that negative information plays a particularly important role in
constructing definitions for these event types.

422

L EARNING T EMPORAL E VENTS

6.3.4 C OMPARISON

TO

H AND -C ODED D EFINITIONS

The bottom two rows of table 1 show the results for HD1 and HD2 . We have not yet attempted to
automatically select the parameters for learning (i.e. k and D ). Rather, here we focus on comparing
the hand-coded definitions to the parameter set that we judged to be best performing across all event
types. We believe, however, that these parameters could be selected reliably using cross-validation
techniques applied to a larger data set. In that case, the parameters would be selected on a perevent-type basis and would likely result in an even more favorable comparison to the hand-coded
definitions.
The results show that the learned definitions significantly outperform HD1 on the current data
set. The HD1 definitions were found to produce a large number of false negatives on the current
data set. Notice that, although HD2 produces significantly fewer false negatives for all event types,
it produces more false positives for pick up and put down. This is because the hand definitions
utilize pick up and put down as macros for defining the other events.
The performance of the learned definitions is competitive with the performance of HD2 . The
main differences in performance are: (a) for pick up and put down, the learned and HD2 definitions
achieve nearly the same FN but the learned definitions achieve FP = 0 whereas HD2 has significant
FP, (b) for unstack and disassemble, the learned definitions perform moderately worse than HD2
with respect to FN, and (c) the learned definitions perform significantly better than HD2 on assemble
events.
We conjecture that further manual revision could improve HD2 to perform as well as (and perhaps better than) the learned definitions for every event class. Nonetheless, we view this experiment
as promising, as it demonstrates that our learning technique is able to compete with, and sometimes
outperform, significant hand-coding efforts by one of the authors.
6.3.5 VARYING N
It is of practical interest to know how training-set size affects our algorithm’s performance. For this
application, it is important that our method work well with fairly small data sets, as it can be tedious
to collect event data. Table 2 shows the FN of our learning algorithm for each event type, as N is
reduced from 29 to 5. For these experiments, we used k = 3 and D = BN. Note that FP = 0
for all event types and all N and hence is not shown. We expect FN to increase as N is decreased,
since, with specific-to-general learning, more data yields more-general definitions. Generally, FN
is flat for N > 20, increases slowly for 10 < N < 20, and increases abruptly for 5 < N < 10. We
also see that, for several event types, FN decreases slowly, as N is increased from 20 to 29. This
indicates that a larger data set might yield improved results for those event types.
6.3.6 P ERSPICUITY

OF

L EARNED D EFINITIONS

One motivation for using a logic-based event representation is to support perspicuity—in this respect
our results are mixed. We note that perspicuity is a fuzzy and subjective concept. Realizing this,
we will say that an event definition is perspicuous if most humans with knowledge of the language
would find the definition to be “natural.” Here, we do not assume the human has a detailed knowledge of the model-reconstruction process that our learner is trying to fit. Adding that assumption
would presumably make the definitions qualify as more perspicuous, as many of the complex features of the learned definitions appear in fact to be due to idiosyncrasies of the model-reconstruction
process. In this sense, we are evaluating the perspicuity of the output of the entire system, not just
423

F ERN , G IVAN , & S ISKIND

of the learner itself, so that a key route to improving perspicuity in this sense would be to improve
the intuitive properties of the model-reconstruction output without any change to the learner.
While the learned and hand-coded definitions are similar with respect to accuracy, typically the
learned definitions are much less perspicuous. For our simplest event types, however, the learned
definitions are arguably perspicuous. Below we look at this issue in more detail. Appendix C gives
the hand-coded definitions in HD1 and HD2 along with a set of machine-generated definitions. The
learned definitions correspond to the output of our k -AMA learner when run on all 30 training
movies from each event type with k = 3 and D = BN (i.e., our best performing configuration with
respect to accuracy).
Perspicuous Definitions. The P ICK U P (x; y; z ) and P UT D OWN (x; y; z ) definitions are of particular interest here since short state sequences appear adequate for representing these event types—
thus, we can hope for perspicuous 3-AMA definitions. In fact, the hand-coded definitions involve short sequences. Consider the hand-coded definitions of P ICK U P(x; y; z )—the definitions
can roughly be viewed as 3-MA timelines of the form begin;trans;end.14 State begin asserts facts
that indicate y is on z and is not being held by x and end asserts facts that indicate y is being held by
x and is not on z . State trans is intended to model the fact that L EONARD’s model-reconstruction
process does not always handle the transition between begin and end smoothly (so the definition
begin;end does not work well). We can make similar observations for P UT D OWN(x; y; z ).
Figure 15 gives the learned 3-AMA definitions of P ICK U P (x; y; z ) and P UT D OWN (x; y; z )—
the definitions contain six and two 3-MA timelines respectively. Since the definitions consists of
multiple parallel timelines, they may at first not seem perspicuous. However, a closer examination
reveals that, in each definition, there is a single timeline that is arguably perspicuous—we have
placed these perspicuous timelines at the beginning of each definition. The perspicuous timelines
have a natural begin;trans;end interpretation. In fact, they are practically equivalent to the definitions
of P ICK U P (x; y; z ) and P UT D OWN (x; y; z ) in HD2 .15
With this in mind, notice that the HD2 definitions are overly general as indicated by significant
false positive rates. The learned definitions, however, yield no false positives without a significant
increase in false negatives. The learned definitions improve upon HD2 by essentially specializing
the HD2 definitions (i.e., the perspicuous timelines) by conjoining them with the non-perspicuous
timelines. While these non-perspicuous timelines are often not intuitive, they capture patterns in the
events that help rule out non-events. For example, in the learned definition of P ICK U P (x; y; z ) some
of the non-perspicuous timelines indicate that ATTACHED (y; z ) is true during the transition period
of the event. Such an attachment relationship does not make intuitive sense. Rather, it represents a
systematic error made by the model reconstruction process for pick up events.
In summary, we see that the learned definitions of P ICK U P (x; y; z ) and P UT D OWN (x; y; z ) each
contain a perspicuous timeline and one or more non-perspicuous timelines. The perspicuous timelines give an intuitive definition of the events, whereas the non-perspicuous timelines capture nonintuitive aspects of the events and model reconstruction process that are important in practice. We
note that, for experienced users, the primary difficulty of hand-coding definitions for L EONARD is
14. Note that the event-logic definition for P ICK U P(x; y; z ) in HD2 is written in a more compact form than 3-MA, but
this definition can be converted to 3-MA (and hence 3-AMA). Rather, HD1 cannot be translated exactly to 3-MA
since it uses disjunction—it is the disjunction of two 3-MA timelines.
15. The primary difference is that the HD2 definitions contain more negated propositions. The learner only considers a
proposition and its negation if the proposition is true at some point during the training movies. Many of the negated
propositions in HD2 never appear positively, thus they are not included in the learned definitions.

424

L EARNING T EMPORAL E VENTS

to determining which non-perspicuous properties must be included. Typically this requires many
iterations of trial and error. Our automated technique can relieve the user of this task. Alternatively,
we could view the system as providing guidance for this task.
Large Definitions. The S TACK (w; x; y; z ) and U NSTACK (w; x; y; z ) events are nearly identical
to put down and pick up respectively. The only difference is that now we are picking up from and
putting down onto a two block (rather than single block) tower (i.e., composed of blocks y and z ).
Thus, here again we might expect there to be perspicuous 3-AMA definitions. However, we see that
the learned definitions for S TACK (w; x; y; z ) and U NSTACK (w; x; y; z ) in Figures 16 and 17 involve
many more timelines than those for P ICK U P (w; x; y ) and P UT D OWN (w; x; y ). Accordingly, the
definitions are quite overwhelming and much less perspicuous.
Despite the large number of timelines, these definitions have the same general structure as those
for pick up and put down. In particular, they each contain a distinguished perspicuous timeline,
placed at the beginning of each definition, that is conjoined with many non-perspicuous timelines.
It is clear that, as above, the perspicuous timelines have a natural begin;trans;end interpretation
and, again, they are very similar to the definitions in HD 2 . In this case, however, the definitions
in HD2 are not overly general (committing no false positives). Thus, here the inclusion of the
non-perspicuous timelines has a detrimental effect since they unnecessarily specialize the definition
resulting in more false negatives.
We suspect that a primary reason for the large number of non-perspicuous timelines relative
to the definitions of pick up and put down stems from the increased difficulty of constructing
force-dynamic models. The inclusion of the two block tower in these examples causes the modelreconstruction process to produce more unintended results, particularly during the transition periods
of S TACK and U NSTACK . The result is that often many unintuitive and physically incorrect patterns
involving the three blocks and the hand are produced during the transition period. The learner
captures these patterns roughly via the non-perspicuous timelines. It is likely that generalizing the
definitions by including more training examples would filter out some of these timelines, making the
overall definition more perspicuous. Alternatively, it is of interest to consider pruning the learned
definitions. A straightforward way to do this is to generate negative examples. Then with these,
we could remove timelines (generalizing the definition) that do not contribute toward rejecting the
negative examples. It is unclear how to prune definitions without negative examples.
Hierarchical Events. M OVE(w; x; y; z ), A SSEMBLE (w; x; y; z ), and D ISASSEMBLE (w; x; y; z )
are inherently hierarchical, being composed of the four simpler event types. The hand-coded definitions leverage this structure by utilizing the simpler definitions as macros. In this light, it should
be clear that, when viewed non-hierarchically, (as our learner does) these events involve relatively
long state sequences. Thus, 3-AMA is not adequate for writing down perspicuous definitions. In
spite of this representational shortcoming, our learned 3-AMA definitions perform quite well. This
performance supports one of our arguments for using AMA from section 3.2. Namely, given that it
is easier to find short rather than long sequences, a practical approach to finding definitions for long
events is to conjoin the short sequences within those events. Examining the timelines of the learned
3-AMA definitions reveals what we might expect. Each timeline captures an often understandable
property of the long event sequence, but the conjunction of those timelines cannot be considered
to be a perspicuous definition. A future direction is to utilize hierarchical learning techniques to
improve the perspicuity of our definitions while maintaining accuracy.
425

F ERN , G IVAN , & S ISKIND

N

pick up

put down

stack

unstack

move

assemble

disassemble

29
25
20
15
10
5

0.0
0.0
0.01
0.01
0.07
0.22

0.20
0.20
0.21
0.22
0.27
0.43

0.45
0.47
0.50
0.53
0.60
0.77

0.10
0.16
0.17
0.26
0.36
0.54

0.03
0.05
0.08
0.14
0.23
0.35

0.07
0.09
0.12
0.20
0.32
0.57

0.10
0.10
0.12
0.16
0.26
0.43

Table 2: FN for k

= 3, D = BN, and various values of N .

We note, however, that, at some level, the learned definition of M OVE (w; x; y; z ) given in Figure 18 is perspicuous. In particular, the first 3-MA timeline is naturally interpreted as giving the
pre- and post-conditions for a move action. That is, initially x is supported by y and the hand w is
empty and finally x is supported by z and the hand w is empty. Thus, if all we care about is preand post-conditions, we might consider this timeline to be perspicuous. The remaining timelines in
the definition capture pieces of the internal event structure such as facts indicating that x is moved
by the hand. A weaker case can be made for assemble and disassemble. The first timeline in each
of the learned definitions in Figures 19 and 20 can be interpreted as giving pre- and post-conditions.
However, in these cases, the pre(post)-conditions for assemble(disassemble) are quite incomplete.
The incompleteness is due to the inclusion of examples where the model-reconstruction process did
not properly handle the initial(final) moments.

7. Related Work
Here we discuss two bodies of related work. First, we present previous work in visual event recognition and how it relates to our experiments here. Second, we discuss previous approaches to learning
temporal patterns from positive data.
7.1 Visual Event Recognition
Our system is unique in that it combines positive-only learning with a temporal, relational, and
force-dynamic representation to recognize events from real video. Prior work has investigated various subsets of the features of our system—but, to date, no system has combined all of these pieces
together. Incorporating any one of these pieces into a system is a significant endeavor. In this respect, there are no competing approaches to directly compare our system against. Given this, the
following is a representative list of systems that have common features with ours. It is not meant to
be comprehensive and focuses on pointing out the primary differences between each of these systems and ours, as these primary differences actually render these systems only very loosely related
to ours.
Borchardt (1985) presents a representation for temporal, relational, force-dynamic event definitions but these definitions are neither learned nor applied to video. Regier (1992) presents techniques for learning temporal event definitions but the learned definitions are neither relational, force
dynamic, nor applied to video. In addition the learning technique is not truly positive-only—rather,
it extracts implicit negative examples of an event type from positive examples of other event types.
426

L EARNING T EMPORAL E VENTS

Yamoto, Ohya, and Ishii (1992), Brand and Essa (1995), Siskind and Morris (1996), Brand, Oliver,
and Pentland (1997), and Bobick and Ivanov (1998) present techniques for learning temporal event
definitions from video but the learned definitions are neither relational nor force dynamic. Pinhanez
and Bobick (1995) and Brand (1997a) present temporal, relational event definitions that recognize
events in video but these definitions are neither learned nor force dynamic. Brand (1997b) and Mann
and Jepson (1998) present techniques for analyzing force dynamics in video but neither formulate
event definitions nor apply these techniques to recognizing events or learning event definitions.
7.2 Learning Temporal Patterns
We divide this body of work into three main categories: temporal data mining, inductive logic
programming, and finite-state–machine induction.
Temporal Data Mining. The sequence-mining literature contains many general-to-specific (“levelwise”) algorithms for finding frequent sequences (Agrawal & Srikant, 1995; Mannila, Toivonen,
& Verkamo, 1995; Kam & Fu, 2000; Cohen, 2001; Hoppner, 2001). Here we explore a specific-togeneral approach. In this previous work, researchers have studied the problem of mining temporal
patterns using languages that are interpreted as placing constraints on partially or totally ordered
sets of time points, e.g., sequential patterns (Agrawal & Srikant, 1995) and episodes (Mannila et al.,
1995). These languages place constraints on time points rather than time intervals as in our work
here. More recently there has been work on mining temporal patterns using interval-based pattern
languages (Kam & Fu, 2000; Cohen, 2001; Hoppner, 2001).
Though the languages and learning frameworks vary among these approaches, they share two
central features which distinguish them from our approach. First, they all typically have the goal
of finding all frequent patterns (formulas) within a temporal data set—our approach is focused
on finding patterns with a frequency of one (covering all positive examples). Our first learning
application of visual-event recognition has not yet required us to find patterns with frequency less
than one. However, there are a number of ways in which we can extend our method in that direction
when it becomes necessary (e.g., to deal with noisy training data). Second, these approaches all
use standard general-to-specific level-wise search techniques, whereas we chose to take a specificto-general approach. One direction for future work is to develop a general-to-specific level-wise
algorithm for finding frequent MA formulas and to compare it with our specific-to-general approach.
Another direction is to design a level-wise version of our specific-to-general algorithm—where for
example, the results obtained for the k -AMA LGG can be used to more efficiently calculate the
(k + 1)-AMA LGG. Whereas a level-wise approach is conceptually straightforward in a general-tospecific framework it is not so clear in the specific-to-general case. We are not familiar with other
temporal data-mining systems that take a specific-to-general approach.
First-Order Learning In Section 3.3, we pointed out difficulties in using existing first-order
clausal generalization techniques for learning AMA formulas. In spite of these difficulties, it is still
possible to represent temporal events in first-order logic (either with or without capturing the AMA
semantics precisely) and to apply general-purpose relational learning techniques, e.g., inductive
logic programming (ILP) (Muggleton & De Raedt, 1994). Most ILP systems require both positive
and negative training examples and hence are not suitable for our current positive-only framework.
Exceptions include G OLEM (Muggleton & Feng, 1992), P ROGOL (Muggleton, 1995), and C LAU DIEN (De Raedt & Dehaspe, 1997), among others. While we have not performed a full evaluation
427

F ERN , G IVAN , & S ISKIND

Inputs
MA
AMA

Subsumption
Semantic
Syntactic
P
P
coNP-complete P

Semantic AMA LGG
Lower Upper Size
P
coNP EXP
coNP NEXP 2-EXP?

Syntactic AMA LGG
Lower Upper Size
P
coNP EXP
P
coNP EXP

Table 3: Complexity Results Summary. The LGG complexities are relative to input plus output size.
The size column reports the worst-case smallest correct output size. The “?” indicates a
conjecture.
of these systems, our early experiments in the visual-event recognition domain confirmed our belief
that horn clauses, lacking special handling of time, give a poor inductive bias. In particular, many of
the learned clauses find patterns that simply do not make sense from a temporal perspective and, in
turn, generalize poorly. We believe a reasonable alternative to our approach may be to incorporate
syntactic biases into ILP systems as done, for example, in Cohen (1994), Dehaspe and De Raedt
(1996), Klingspor, Morik, and Rieger (1996). In this work, however, we chose to work directly in a
temporal logic representation.
Finite-State Machines Finally, we note there has been much theoretical and empirical research
into learning finite-state machines (FSMs) (Angluin, 1987; Lang, Pearlmutter, & Price, 1998). We
can view FSMs as describing properties of strings (symbol sequences). In our case, however, we are
interested in describing sequences of propositional models rather than just sequences of symbols.
This suggests learning a type of “factored” FSM where the arcs are labeled by sets of propositions
rather than by single symbols. Factored FSMs may be a natural direction in which to extend the
expressiveness of our current language, for example by allowing repetition. We are not aware of
work concerned with learning factored FSMs; however, it is likely that inspiration can be drawn
from symbol-based FSM-learning algorithms.

8. Conclusion
We have presented a simple logic for representing temporal events called AMA and have shown
theoretical and empirical results for learning AMA formulas. Empirically, we’ve given the first
system for learning temporal, relational, force-dynamic event definitions from positive-only input
and we have applied that system to learn such definitions from real video input. The resulting
performance matches that of event definitions that are hand-coded with substantial effort by human
domain experts. On the theoretical side, Table 3 summarizes the upper and lower bounds that
we have shown for the subsumption and generalization problems associated with this logic. In
each case, we have provided a provably correct algorithm matching the upper bound shown. The
table also shows the worst-case size that the smallest LGG could possibly take relative to the input
size, for both AMA and MA inputs. The key results in this table are the polynomial-time MA
subsumption and AMA syntactic subsumption, the coNP lower bound for AMA subsumption, the
exponential size of LGGs in the worst case, and the apparently lower complexity of syntactic AMA
LGG versus semantic LGG. We described how to build a learner based on these results and applied
it to the visual-event learning domain. To date, however, the definitions we learn are neither crossmodal nor perspicuous. And while the performance of the learned definitions matches that of hand428

L EARNING T EMPORAL E VENTS

coded ones, we wish to surpass hand coding. In the future, we intend to address cross-modality by
applying our learning technique to the planning domain. We also believe that addressing perspicuity
will lead to improved performance.

Acknowledgments
The authors wish to thank our anonymous reviewers for helping to improve this paper. This work
was supported in part by NSF grants 9977981-IIS and 0093100-IIS, an NSF Graduate Fellowship
for Fern, and the Center for Education and Research in Information Assurance and Security at
Purdue University. Part of this work was performed while Siskind was at NEC Research Institute,
Inc.

Appendix A. Internal Positive Event Logic
Here we give the syntax and semantics for an event logic called Internal Positive Event Logic
(IPEL). This logic is used in the main text only to motivate our choice of a small subset of this
logic, AMA, by showing, in Proposition 4, that AMA can define any set of models that IPEL can
define.
An event type (i.e., set of models) is said to be internal if whenever it contains any model
M = hM; I i, it also contains any model that agrees with M on truth assignments M [i] where i 2 I .
Full event logic allows the definition of non-internal events, for example, the formula 	 = 3< P
is satisfied by hM; I i when there is some interval I 0 entirely preceding I such that P is satisfied
by hM; I 0 i, thus 	 is not internal. The applications we are considering do not appear to require
non-internal events, thus we currently only consider events that are internal.
Call an event type positive if it contains the model M = hM; [1; 1]i where M (1) is the truth
assignment assigning all propositions the value true. A positive event type cannot require any proposition to be false at any point in time.
IPEL is a fragment of full propositional event logic that can only describe positive internal
events. We conjecture, but have not yet proven, that all positive internal events representable in the
full event logic of Siskind (2001) can be represented by some IPEL formula. Formally, the syntax
of IPEL formulas is given by

E ::= true j prop j E1 _ E2 j 3R E1 j E1 ^R E2 ;
0

where the Ei are IPEL formulas, prop is a primitive proposition (sometimes called a primitive event
type), R is a subset of the thirteen Allen interval relations fs,f,d,b,m,o,=,si,fi,di,bi,ai,oi g (Allen,
1983), and R0 is a subset of the restricted set of Allen relations fs,f,d,=g, the semantics for each
Allen relation is given in Table 4. The difference between IPEL syntax and that of full propositional
event logic is that event logic allows for a negation operator, and that, in full event logic, R0 can
be any subset of all thirteen Allen relations. The operators ^ and ; used to define AMA formulas
are merely abbreviations for the IPEL operators ^f=g and ^fmg respectively, so AMA is a subset of
IPEL (though a distinguished subset as indicated by Proposition 4).
Each of the thirteen Allen interval relations are binary relations on the set of closed naturalnumber intervals. Table 4 gives the definitions of these relations, defining [m1 ; m2 ] r [n1 ; n2 ] for
each Allen relation r . Satisfiability for IPEL formulas can now be defined as follows,
429

F ERN , G IVAN , & S ISKIND

I1
[m1 ; m2 ]
[m1 ; m2 ]
[m1 ; m2 ]
[m1 ; m2 ]
[m1 ; m2 ]
[m1 ; m2 ]
[m1 ; m2 ]

Relation
s
f
d
b
m
o
=

I2
[n1 ; n2 ]
[n1 ; n2 ]
[n1 ; n2 ]
[n1 ; n2 ]
[n1 ; n2 ]
[n1 ; n2 ]
[n1 ; n2 ]

English
starts
finishes
during
before
meets
overlaps
equals

Definition
m1 = n1 and m2
m1  n1 and m2
m1  n1 and m2

 n2
= n2
 n2

m2  n1
m2 = n1 or m2 + 1 = n1
m1  n1  m2  n2
m1 = n1 and m2 = n2

Inverse
si
fi
di
bi
mi
oi
=

Table 4: The Thirteen Allen Relations (adapted to our semantics).

 true is satisfied by every model.
 prop is satisfied by model hM; I i iff M [x] assigns prop true for every x 2 I .
 E1 _ E2 is satisfied by a model M iff M satisfies E1 or M satisfies E2.
 3RE is satisfied by model hM; I i iff for some r 2 R there is an interval I 0 such that I 0 r I
and hM; I 0 i satisfies E .
 E1 ^R E2 is satisfied by model hM; I i iff for some r 2 R there exist intervals I1 and I2 such
that I1 r I2 , S PAN (I1 ; I2 ) = I and both hM; I1 i satisfies E1 and hM; I2 i satisfies E2 .
where prop is a primitive proposition, E and Ei are IPEL formulas, R is a set of Allen relations, and
S PAN (I1 ; I2 ) is the minimal interval that contains both I1 and I2 . From this definition, it is easy to
show, by induction on the number of operators and connectives in a formula, that all IPEL formulas
define internal events. One can also verify that the definition of satisfiability given earlier for AMA
formulas corresponds to the one we give here.

Appendix B. Omitted Proofs
Lemma 1. For any MA timeline  and any model M, if M satisfies  then there is a witnessing
interdigitation for MAP(M)  .
Proof: Assume that M = hM; I i satisfies the MA timeline  = s1 ; : : : ; sn , and let 0 =
MAP(M). It is straightforward to argue, by induction on the length of , that there exists a mapping
V 0 from states of  to sub-intervals of I , such that

 for any i 2 V 0 (s), M [i] satisfies s,
 V 0(s1) includes the initial time point of I ,
 V 0(sn) includes the final time point of I , and
 for any i 2 [1; n 1], we have V 0(si ) meets V 0(si+1) (see Table 4).
430

L EARNING T EMPORAL E VENTS

Let V be the relation between states s 2  and members i 2 I that is true when i 2 V 0 (s). Note
that the conditions on V 0 ensure that every s 2  and every i 2 I appear in some tuple in V (not
necessarily together). Below we use V to construct a witnessing interdigitation W .
Let R be the total, one-to-one, onto function from time-points in I to corresponding states in 0 ,
noting that 0 has one state for each time-point in I , as 0 = MAP(hM; I i). Note that R preserves
ordering in that, when i  j , R(i) is no later than R(j ) in 0 . Let W be the composition V Æ R of
the relations V and R.
We show that W is an interdigitation. We first show that each state from  or 0 appears in a
tuple in W , so W is piecewise total. States from  must appear, trivially, because each appears in a
tuple of V , and R is total. States from 0 appear because each i 2 I appears in a tuple of V , and R
is onto the states of 0 .
It now suffices to show that for any states s before t from , W (s; s0 ) and W (t; t0 ) implies that
s0 is no later than t0 in 0 , so that W is simultaneously consistent. The conditions defining V 0 above
imply that every number in i 2 V (s) is less than or equal to every j 2 V (t). The order-preservation
property of R, noted above, then implies that every state s0 2 V Æ R(s) is no later than any state
t0 2 V Æ R(t) in 0 , as desired. So W is an interdigitation.
We now argue that W witnesses 0  . Consider s 2  and t 2 0 such that W (s; t). By the
construction of W , there must be i 2 V 0 (s) for which t is the i’th state of 0 . Since 0 = MAP(M),
it follows that t is the set of true propositions in M [i]. Since i 2 V 0 (s), we know that M [i] satisfies
s. It follows that s  t, and so t  s. 2

2 IPEL, if model M embeds a model that satisfies E then M satisfies E .
Proof: Consider the models M = hM; I i and M0 = hM 0 ; I 0 i such that M embeds M0 , let
 = MAP(M) and 0 = MAP(M0 ). Assume that E 2 IPEL is satisfied by M0 , we will show that
E is also satisfied by M.
We know from the definition of embedding that   0 and thus there is a witnessing interdigitation W for   0 by Proposition 2. We know there is a one-to-one correspondence between
numbers in I (I 0 ) and states of  (0 ) and denote the state in  (0 ) corresponding to i 2 I (i0 2 I 0 )
Lemma 3. For any E

as si (ti ). This correspondence allows us to naturally interpret W as a mapping V from subsets of
I 0 to subsets of I as follows: for I10  I 0 , V (I10 ) equals the set of all i 2 I such that for some i0 2 I10 ,
si co-occurs with ti in W . We will use the following properties of V ,
0

0

1. If I10 is a sub-interval of I 0 , then V (I10 ) is a sub-interval of I .

2. If I10 is a sub-interval of I 0 , then hM; V (I10 )i embeds hM 0 ; I10 i.

3. If I10 and I20 are sub-intervals of I 0 , and r is an Allen relation, then I10 rI20 iff V (I10 )rV (I20 ).
4. If I10 and I20 are sub-intervals of I 0 , then V (S PAN (I10 ; I20 )) = S PAN (V (I10 ); V (I20 )).

5.

V (I 0 ) = I .

We sketch the proofs of these properties. 1) Use induction on the length of I10 , with the
definition of interdigitation. 2) Since V (I10 ) is an interval, MAP(hM; V (I10 )i) is well defined.
MAP(hM; V (I10 )i)  MAP(hM 0 ; I10 i) follows from the assumption that M embeds M0 . 3) From
Appendix A, we see that all Allen relations are defined in terms of the  relation on the natural
431

F ERN , G IVAN , & S ISKIND

number endpoints of the intervals. We can show that V preserves  (but not <) on singleton sets
(i.e., every member of V (fi0 g) is  every member of V (fj 0 g) when i0  j 0 ) and that V commutes with set union. It follows that V preserves the Allen interval relations. 4) Use the fact that
V preserves  in the sense just argued, along with the fact that S PAN (I10 ; I20 ) depends only on the
minimum and maximum numbers in I10 and I20 . 5) Follows from the definition of interdigitation and
the construction of V .
We now use induction on the number of operators and connectives in E to prove that, if M0
satisfies E , then so must M. The base case is when E = prop, where prop is a primitive proposition,
or true. Since M0 satisfies E , we know that prop is true in all M 0 [x0 ] for x0 2 I 0 . Since W witnesses
  0 , we know that, if prop is true in M 0 [x], then prop is true in all M [x], where x 2 V (x0 ).
Therefore, since V (I 0 ) = I , prop is true for all M 0 [x], where x 2 I , hence M0 satisfies E .
For the inductive case, assume that the claim holds for IPEL formulas with fewer than N operators and connectives—let E1 ; E2 be two such formulas. When E = E1 _ E2 , the claim trivially
holds. When E = 3R E1 , R must be a subset of the set of relations fs,f,d,=g. Notice that E can
be written as a disjunction of 3r E1 formulas, where r is a single Allen relation from R. Thus, it
suffices to handle the case where R is a single Allen relation. Suppose E = 3fsg E1 . Since M0
satisfies E , there must be a sub-interval I10 of I 0 such that I10 s I 0 and hM 0 ; I10 i satisfies E1 . Let
I1 = V (I10 ), we know from the properties of V that V (I 0 ) = I , and, hence, that I1 s I . Furthermore, we know that hM; I1 i embeds hM 0 ; I10 i, and, thus, by the inductive hypothesis, hM; I1 i
satisfies E1 . Combining these facts, we get that E is satisfied by M. Similar arguments hold for
the remaining three Allen relations. Finally, consider the case when E = E1 ^R E2 , where R can
be any set of Allen relations. Again, it suffices to handle the case when R is a single Allen relation
r. Since M0 satisfies E = E1 ^r E2 , we know that there are sub-intervals I10 and I20 of I 0 such that
S PAN (I10 ; I20 ) = I 0 , I10 r I20 , hM 0 ; I10 i satisfies E1 , and hM 0 ; I20 i satisfies E2 . From these facts, and
the properties of V , it is easy to verify that M satisfies E . 2
Lemma 5. Given an MA formula  that subsumes each member of a set  of MA formulas, 
also subsumes some member 0 of IG(). Dually, when  is subsumed by each member of , we
have that  is also subsumed by some member 0 of IS(). In each case, the length of 0 can be
bounded by the size of .
Proof: We prove the result for IG(). The proof for IS() follows similar lines. Let

 =

f1 ; : : : ; ng,  = s1; : : : ; sm, and assume that for each 1  i  n, i  . From Proposition 2, for each i, there is a witnessing interdigitation Wi for i  . We will combine the Wi

into an interdigitation of , and show that the corresponding member of IG() is subsumed by
. To construct an interdigitation of , first notice that, for each sj , each Wi specifies a set of
states (possibly a single state but at least one) from i that all co-occur with sj . Furthermore, since
Wi is an interdigitation, it is easy to show that this set of states corresponds to a consecutive subsequence of states from i —let j;i be the MA timeline corresponding to this subsequence. Now
let j = fj;i j 1  i  ng, and j be any interdigitation of j . We now take I to be the union of
all j , for 1  j  m. We show that I is an interdigitation of . Since each state s appearing in 
must co-occur with at least one state sj in  in at least one Wi , s will be in at least one tuple of j ,
and, hence, be in some tuple of I —so I is piecewise total.
Now, define the restriction I i;j of I to components i and j , with i < j , to be the relation given
by taking the set of all pairs formed by shortening tuples of I by omitting all components except
432

L EARNING T EMPORAL E VENTS

the i’th and the j ’th. Likewise define i;j
k for each k . To show I is an interdigitation, it now suffices
to show that each I i;j is simultaneously consistent. Consider states si and sj from timelines i and
j , respectively, such that I i;j (si ; sj ). Suppose that ti occurs after si in i, and for some tj 2 j ,
I i;j (ti ; tj ) holds. It suffices to show that sj is no later than tj in j . Since I i;j (si ; sj ) and I i;j (ti ; tj ),
i;j
0
0
we must have i;j
k (si ; sj ) and k (ti ; tj ), respectively, for some k and k . We know k  k because
0
si is before ti in i and Wi is simultaneously consistent. If k = k , then sj is no later than tj in j ,
because k must be simultaneously consistent, being an interdigitation. Otherwise, k < k 0 . Then sj
is no later than tj in j , as desired, because Wj is simultaneously consistent. So I is simultaneously
consistent, and an interdigitation of .
Let 0 be the member of IG() corresponding to I . We now show that 0  . We know that
each state s0 2 0 is the intersection of the states in a tuple of some j —we say that s0 derives from
j . Consider the interdigitation I 0 between  and 0 , where I 0 (sj ; s0 ), for sj 2  and s0 2 0 , if and
only if s0 derives from j . I 0 is piecewise total, as every tuple of I 0 derives from some j , and no j
is empty. I 0 is simultaneously consistent because tuples of I 0 deriving from later k must be later in
the lexicographic ordering of I , given the simultaneous consistency of the Wk interdigitations used
to construct each j . Finally, we know that sj subsumes (i.e., is a subset of) each state in each tuple
of j , because each Wk is a witnessing interdigitation to k  , and, hence, subsumes (is a subset
of) the intersection of those states. Therefore, if sj 2  co-occurs with s0 2 0 in I 0 we have that
s0  sj . Thus, I 0 is a witnessing interdigitation for 0  , and by Proposition 2 we have 0  .
The size bound on 0 follows, since, as pointed out in the main text, the size of any member of
IG() is upper-bounded by the number of states in . 2
0

Lemma 8. Given MA timelines 1 = s1 ; : : : ; sm and 2 = t1 ; : : : ; tn , there is a witnessing
interdigitation for 1  2 iff there is a path in the subsumption graph SG(1 ; 2 ) from v1;1 to
vm;n .
Proof: Subsumption
graph SG(1 ; 2 ) is equal to hV; E i with V = fvi;j j 1	  i  m; 1  j  ng

and E = hvi;j ; vi ;j i j si  tj ; si  tj ; i  i0  i + 1; j  j 0  j + 1 . Note that there is a
correspondence between vertices and state tuples—with vertex vi;j corresponding to hsi ; tj i.
For the forward direction, assume that W is a witnessing interdigitation for 1  2 . We
know that, if the states si and tj co-occur in W , then si  tj since W witnesses 1  2 . The
vertices corresponding to the tuples of W will be called co-occurrence vertices, and satisfy the
first condition for belonging to some edge in E (that si  tj ). It follows from the definition of
interdigitation that both v1;1 and vm;n are both co-occurrence vertices. Consider a co-occurrence
vertex vi;j not equal to vm;n , and the lexicographically least co-occurrence vertex vi ;j after vi;j
(ordering vertices
 by ordering
the pair of subscripts). We show that i, j , i0 , and j 0 satisfy the

requirements for vi;j ; vi ;j 2 E . If not, then either i0 > i + 1 or j 0 > j + 1. If i0 > i + 1, then
there can be no co-occurrence vertex vi+1;j , contradicting that W is piecewise total. If j 0 > j + 1,
then since W is piecewise total, there must be a co-occurrence vertex vi ;j +1 : but if i00 < i or
i00 > i0 , this contradicts the simultaneous consistency of W , and if i00 = i, this contradicts the
lexicographically least choice of vi ;j . It follows that every co-occurrence vertex but vm;n has an
edge to another co-occurrence vertex closer in Manhattan distance to vm;n , and thus that there is a
path from v1;1 to vm;n .
For the reverse direction assume there is a path of vertices in SG(1 ; 2 ) from v1;1 to vm;n
given by, vi1 ;j1 ; vi2 ;j2 ; : : : ; vir ;js with i1 = j1 = 1, ir = m; js = n. Let W be the set of state
0

0

0

0

0

0

0

00

00

0

0

433

0

F ERN , G IVAN , & S ISKIND

tuples corresponding to the vertices along this path. W must be simultaneously consistent with the
i orderings because our directed edges are all non-decreasing in the i orderings. W must be
piecewise total because no edge can cross more than one state transition in either 1 or 2 , by the
edge set definition. So W is an interdigitation. Finally, the definition of the edge set E ensures
that each tuple hsi ; tj i in W has the property si  tj , so that W is a witnessing interdigitation for
1  2 , showing that 1  2 , as desired. 2
Lemma 10. Given some n, let 	 be the conjunction of the timelines
n
[
i=1

f(PROPn; Truei; Falsei; PROPn); (PROPn; Falsei; Truei; PROPn)g:

We have the following facts about truth assignments to the Boolean variables p1 ; : : : ; pn :
1. For any truth assignment A, PROPn ; sA ; PROPn is semantically equivalent to a member
of IS(	).
2. For each  2 IS(	) there is a truth assignment A such that   PROPn ; sA ; PROPn .
Proof: To prove the first part of the lemma, we construct an interdigitation I of 	 such that the
corresponding member of IS(	) is equivalent to PROPn ; sA ; PROPn . Intuitively, we construct I
by ensuring that some tuple of I consists only of states of the form Truek or Falsek that agree with
the truth assignment—the union of all the states in this tuple, taken by IS(	) will equal sA . Let
I = fT0 ; T1 ; T2 ; T3 ; T4 g be an interdigitation of 	 with exactly five state tuples Ti . We assign the
states of each timeline of 	 to the tuples as follows:
1. For any k , such that 1  k




 n and A(pk ) is true,

for the timeline s1 ; s2 ; s3 ; s4 = Q; T ruek ; F alsek ; Q, assign each state si to tuple Ti ,
and assign state s1 to T0 as well, and
for the timeline s01 ; s02 ; s03 ; s04 = Q; F alsek ; T ruek ; Q, assign each state s0i to tuple Ti 1 ,
and state s04 to tuple T4 as well.

2. For any k , such that 1  k  n and A(pk ) is false, assign states to tuples as in item 1 while
interchanging the roles of T ruek and F alsek .

It should be clear that I is piecewise total and simultaneously consistent with the state orderings
in 	, and so is an interdigitation. The union of the states in each of T0 , T1 , T3 , and T4 is equal to
PROPn , since PROPn is included as a state in each of those tuples. Furthermore, we see that the
union of the states in T2 is equal to sA . Thus, the member of IS(	) corresponding to I is equal to
PROPn ; PROPn ; sA ; PROPn ; PROPn , which is semantically equivalent to PROPn ; sA ; PROPn , as
desired.
To prove the second part of the lemma, let  be any member of IS(	). We first argue that
every state in  must contain either Truek or Falsek for each 1  k  n. For any k , since 	 contains PROPn ; Truek ; Falsek ; PROPn , every member of IS(	) must be subsumed by PROPn ; Truek ;
Falsek ; PROPn . So,  is subsumed by PROPn ; Truek ; Falsek ; PROPn . But every state in PROPn ;
Truek ; Falsek ; PROPn contains either Truek or Falsek , implying that so does , as desired.
434

L EARNING T EMPORAL E VENTS

Next, we claim that for each 1  k  n, either   Truek or   Falsek —i.e., either all states
in  include Truek , or all states in  include Falsek (and possibly both). To prove this claim, assume,
for the sake of contradiction, that, for some k ,  6 Truek and  6 Falsek . Combining this assumption with our first claim, we see there must be states s and s0 in  such that s contains T ruek but
not F alsek , and s0 contains F alsek but not T ruek , respectively. Consider the interdigitation I of 	
that corresponds to  as a member of IS(	). We know that s and s0 are each equal to the union of
states in tuples T and T 0 , respectively, of I . T and T 0 must each include one state from each timeline
s1 ; s2 ; s3 ; s4 = PROPn ; Truek ; Falsek ; PROPn and s01 ; s02 ; s03 ; s04 = PROPn ; Falsek ; Truek ; PROPn .
Clearly, since s does not include Falsek , T includes the states s1 and s02 , and likewise T 0 includes
the states s2 and s01 . It follows that I is not simultaneously consistent with the state orderings in
s1 ; s2 ; s3 ; s4 and s01 ; s02 ; s03 ; s04 , contradicting our choice of I as an interdigitation. This shows that
either   Truek or   Falsek .
Define the truth assignment A such that for all 1  k  n, A(pk ) if and only if   Truek .
Since,for each k ,   Truek or   Falsek , it follows that each state of  is subsumed by
sA . Furthermore, since  begins and ends with PROPn , it is easy to give an interdigitation of
 and PROPn ; sA ; PROPn that witnesses   PROPn ; sA ; PROPn . Thus, we have that  
PROPn ; sA ; PROPn . 2
Lemma 16. Let 1 and 2 be as given on page 402, in the proof of Theorem 17, and let 	 =
V
IG(f1 ; 2 g). For any 	0 whose timelines are a subset of those in 	 that omits some square
timeline, we have 	 < 	0 .
Proof: Since the timelines in 	0 are a subset of the timelines in 	, we know that 	  	0 . It remains
to show that 	0 6 	. We show this by constructing a timeline that is covered by 	0 , but not by 	.
Let  = s1 ; s2 ; : : : ; s2n 1 be a square timeline in 	 that is not included in 	0 . Recall that each
si is a single proposition from the proposition set P = fpi;j j 1  i  n; 1  j  ng, and that,
for consecutive states si and si+1 , if si = pi;j , then si+1 is either pi+1;j or pi;j +1 . Define a new
timeline  = s2 ; s3 ; : : : ; s2n 2 with si = (P si ). We now show that  6  (so that  6 	), and
that, for any 0 in 	 fg,   0 (so that   	0 ).
For the sake of contradiction, assume that   —then there must be a interdigitation W
witnessing   . We show by induction on i that, for i  2, W (si ; sj ) implies j > i. For the
base case, when i = 2, we know that s2 6 s2 , since s2 6 s2 , and so W (s2 ; s2 ) is false, since
W witnesses subsumption. For the inductive case, assume the claim holds for all i0 < i, and that
W (si ; sj ). We know that si 6 si , and thus i 6= j . Because W is piecewise total, we must have
W (si 1 ; sj ) for some j 0 , and, by the induction hypothesis, we must have j 0 > i 1. Since W is
simultaneously consistent with the sk and sk state orderings, and i 1 < i, we have j 0  j . It
follows that j > i as desired. Given this claim, we see that s2n 2 cannot co-occur in W with any
state in , contradicting the fact that W is piecewise total. Thus we have that  6 .
Let 0 = s01 ; : : : ; s0m be any timeline in 	 fg, we now construct an interdigitation that
witnesses   0 . Note that while  is assumed to be square, 0 need not be. Let j be the smallest
index where sj 6= s0j — since s1 = s01 = p1;1 , and  6= 0 , we know that such a j must exist, and is
in the range 2  j  m. We use the index j to guide our construction of an interdigitation. Let W
be an interdigitation of  and 0 , with exactly the following co-occurring states (i.e., state tuples):
0

0

1. For 1  i  j

1, si+1 co-occurs with s0i .
435

F ERN , G IVAN , & S ISKIND

 i  m, sj co-occurs with s0i.
For j + 1  i  2n 2, si co-occurs with s0m .

2. For j
3.

It is easy to check that W is both piecewise total and simultaneously consistent with the state
orderings in  and , and so is an interdigitation. We now show that W witnesses   0 by
showing that all states in  are subsumed by the states they co-occur with in W . For co-occurring
states si+1 and s0i corresponding to the first item above we have that s0i = si —this implies that s0i
is contained in si+1 , giving that si+1  s0i . Now consider co-occurring states sj and s0i from the
second item above. Since  is square, choose k and l so that sj 1 = pk;l , we have that sj is either
pk+1;l or pk;l+1. In addition, since sj 1 = s0j 1 we have that s0j is either pk+1;l ; pk;l+1 or pk+1;l+1
but that sj 6= s0j . In any of these cases, we find that no state in 0 after s0j can equal sj —this follows
by noting that the proposition indices never decrease across the timeline 0 16 . We therefore have
that, for i  j , sj  s0i . Finally, for co-occurring states si and s0m from item three above, we have
si  s0m , since s0m = pn;n, which is in all states of . Thus, we have shown that for all co-occurring
states in W , the state from  is subsumed by the co-occurring state in 0 . Therefore, W witnesses
  0 , which implies that   0 . 2
Lemma 26. For any model hM; I i 2 M and any 	 2 AMA ,
T [hM; I i].

	 covers hM; I i

iff

F [	] covers

Proof: Recall that M is the set of models over propositions in the set P = fp1 ; : : : ; pn g and that
we assume AMA uses only primitive propositions from P (possibly negated). We also have the
set of propositions P = fp1 ; : : : ; pn g, and assume that formulas in AMA use only propositions in
P [ P and that M is the set of models over P [ P , where for each i, exactly one of pi and pi is
true at any time. Note that F [	] is in AMA and that T [hM; I i] is in M. We prove the lemma via
straightforward induction on the structure of 	—proving the result for literals, then for states, then
for timelines, and finally for AMA formulas.
To prove the result for literals, we consider two cases (the third case of true is trivial). First, 	
can be a single proposition pi , so that 	0 = F [pi ] = pi . Consider any model hM; I i 2 M and let
hM 0 ; I i = T [hM; I i]. The following relationships yield the desired result.

	 covers hM; I i

iff
iff
iff

for each i 2 I , M [i] assigns pi true
for each i 2 I , M 0 [i] assigns pi true
	0 = pi covers T [hM; I i]

(by definition of satisfiability)
(by definition of T )
(by definition of satisfiability)

The second case is when 	 is a negated proposition :3pi —here, we get that 	0 = pi . Let
hM; I i 2 M and hM 0 ; I i = T [hM; I i]. The following relationships yield the desired result.

	 covers hM; I i

iff
iff
iff

for each i 2 I , M [i] assigns pi false
for each i 2 I , M 0 [i] assigns pi true
	0 = pi covers T [hM; I i]

(by definition of satisfiability)
(by definition of T )
(by definition of satisfiability)

This proves the lemma for literals.
16. Note that if
pk+1;l+1 .

 were not required to be square then it is possible for +1 to equal
0

sj

436

sj

—i.e., they could both equal

L EARNING T EMPORAL E VENTS

To prove the result for states, we use induction on the number k of literals in a state. The base
case is when k = 1 (the state is a single literal) and was proven above. Now assume that the lemma
holds for states with k or fewer literals and let 	 = l1 ^    ^ lk+1 and hM; I i 2 M. From the
inductive assumption we know that  = l1 ^  ^ lk covers hM; I i iff F [] covers T [hM; I i]. From
our base case we also know that lk+1 covers hM; I i iff F [lk+1 ] covers T [hM; I i]. From these facts
and the definition of satisfiability for states, we get that 	 covers hM; I i iff F [] ^ F [lk+1 ] covers
T [hM; I i]. Clearly F has the property that F [] ^ F [lk+1 ] = F [	], showing that the lemma holds
for states.
To prove the result for timelines, we use induction on the number k of states in the timeline. The
base case is when k = 1 (the timeline is a single state) and was proven above. Now assume that the
lemma holds for timelines with k or fewer states. Let 	 = s1 ; : : : ; sk+1 and hM; [t; t0 ]i 2 M with
hM 0 ; [t; t0 ]i = T [hM; [t; t0 ]i]. We have the following relationships.

	 covers hM; [t; t0 ]i

iff
iff
iff
iff

there exists some t00 2 [t; t0 ], such that s1 covers hM; [t; t00 ]i and
 = s2 ; : : : ; sk+1 covers either hM; [t00 ; t0 ]i or hM; [t00 + 1; t0 ]i
there exists some t00 2 [t; t0 ], such that F [s1 ] covers hM 0 ; [t; t00 ]i and
F [] covers either hM 0 ; [t00 ; t0 ]i or hM 0 ; [t00 + 1; t0 ]i
F [s1 ]; F [] covers hM 0 ; [t; t0 ]i
F [	] covers hM 0 ; [t; t0 ]i

Where the first iff follows from the definition of satisfiability; the second follows from our inductive
hypothesis, our base case, and the fact that for I  [t; t0 ] we have T [hM; I i] = hM 0 ; I i; the third
follows from the definition of satisfiability; and the fourth follows from the fact that F [s1 ]; F [] =
F [	].
Finally, we prove the result for AMA formulas, by induction on the number k of timelines
in the formula. The base case is when k = 1 (the formula is a single timeline) and was proven
above. Now assume that the lemma holds for AMA formulas with with k or fewer timelines
and let 	 = 1 ^    ^ k+1 and hM; I i 2 M. From the inductive assumption, we know that
	0 = 1 ^    ^ k covers hM; I i iff F [	0 ] covers T [hM; I i]. From our base case, we also
know that k+1 covers hM; I i iff F [k+1 ] covers T [hM; I i]. From these facts and the definition of
satisfiability, we get that 	 covers hM; I i iff F [	0 ] ^ F [k+1 ] covers T [hM; I i]. Clearly F has the
property that F [	0 ] ^ F [k+1 ] = F [	], showing that the lemma holds for AMA formulas. This
completes the proof. 2

Appendix C. Hand-coded and Learned Definitions Used in Our Experiments
Below we give the two sets of hand-coded definitions, HD1 and HD2 , used in our experimental
evaluation. We also give a set of learned AMA event definitions for the same seven event types. The
learned definitions correspond to the output of our k -AMA learning algorithm, given all available
training examples (30 examples per event type), with k = 3 and D = BN. All the event definitions
are written in event logic, where :3p denotes the negation of proposition p.

437

F ERN , G IVAN , & S ISKIND

1

0

4

P ICK U P (x; y; z )

=

P UT D OWN(x; y; z )

=

S TACK (w; x; y; z )

=

U NSTACK (w; x; y; z )

=

M OVE(w; x; y; z )
A SSEMBLE(w; x; y; z )
D ISASSEMBLE(w; x; y; z )

4

4

4

4
4
=
4
=
=

:3x = y ^ :3z = x ^ :3z = y^
C
B S UPPORTED(y ) ^ :3ATTACHED(x; z )^
B 8 2
3 9 C
C
B >
:3ATTACHED(x; y) ^ :3S UPPORTS(x; y)^
>
>
C
B >
>
7
>
C
B >
>
6
S UPPORTS (z; y )^
>
7
>
C
B >
>
6
>
7
>
C
B >
>
6
:
3
S UPPORTED(x) ^ :3ATTACHED(y; z )^ 7 ; >
>
C
B >
>
6
>
>
C
B >
>
5
4
:3S UPPORTS(y; x) ^ :3S UPPORTS(y; z )^
>
>
C
B >
>
>
>
B >
>
:3S UPPORTS(x; z ) ^ :3S UPPORTS(z; x)
= C
C
B <
C
B
B > [2ATTACHED(x; y ) _ ATTACHED(y; z )] ;
3 > C
>
C
B >
ATTACHED(x; y ) ^ S UPPORTS(x; y )^
>
>
C
B >
>
>
6
7
>
C
B >
>
:3S UPPORTS(z; y)^
>
6
7
>
C
B >
>
>
6
7
>
C
B >
>
:
3
S
UPPORTED
(
x
)
^
:
3
A
TTACHED
(
y;
z
)
^
>
6
7
>
C
B >
>
>
>
>
4
5
A
@ >
:
3
S
UPPORTS
(
y;
x
)
^
:
3
S
UPPORTS
(
y;
z
)
^
>
>
>
>
;
:
:3S UPPORTS(x; z ) ^ :3S UPPORTS(z; x)
1
0
:3x = y ^ :3z = x ^ :3z = y^
C
B S UPPORTED(y ) ^ :3ATTACHED(x; z )^
B 8 2
3 9 C
C
B >
A
TTACHED
(
x; y ) ^ S UPPORTS (x; y )^
>
>
C
B >
>
>
C
7
B >
>
6
:
3
S
UPPORTS
(
z;
y
)
^
>
>
C
7
B >
>
6
>
>
C
B >
>
6
7
:
3
S
UPPORTED
(
x
)
^
:
3
A
TTACHED
(
y;
z
)
^
;
>
>
C
B >
>
6
7
>
>
C
B >
>
4
5
:
3
S
UPPORTS
(
y;
x
)
^
:
3
S
UPPORTS
(
y;
z
)
^
>
>
C
B >
>
>
>
B >
>
:
3
S
UPPORTS
(
x;
z
)
^
:
3
S
UPPORTS
(
z;
x
)
= C
C
B <
C
B
B > [2ATTACHED(x; y ) _ ATTACHED(y; z )] ;
3 > C
>
C
B >
A
TTACHED
(
x; y ) ^ :3 S UPPORTS(x; y )^
:
3
>
>
> C
B >
7 >
>
C
B >
>
6 S UPPORTS (z; y )^
>
>
7 > C
B >
6
>
C
B >
>
6 :3S UPPORTED(x) ^ :3ATTACHED(y; z )^ 7 >
>
>
7 > C
B >
6
>
>
A
@ >
4 :3S UPPORTS(y; x) ^ :3S UPPORTS(y; z )^ 5 >
>
>
>
>
;
:
:3S UPPORTS(x; z ) ^ :3S UPPORTS(z; x)
3
2
:3z = w ^ :3z = x ^ :3z = y^
4 P UT D OWN(w; x; y ) ^ S UPPORTS(z; y )^ 5
:ATTACHED(z; y)


:3z = w ^ :3z = x ^ :3z = y^
P ICK U P (w; x; y ) ^ S UPPORTS(z; y ) ^ :ATTACHED(z; y )
:3y = z ^ [P ICK U P(w; x; y); P UT D OWN(w; x; z )]
P UT D OWN(w; y; z ) ^f g S TACK (w; x; y; z )
U NSTACK(w; x; y; z ) ^f g P ICK U P (x; y; z )
<

<

Figure 12: The HD1 event-logic definitions for all seven event types.

438

L EARNING T EMPORAL E VENTS

0

1
:3x = y ^ :3z = x ^ :3z = y^
B
C
(y) ^ :3ATTACHED (x; z )^
B S UPPORTED
C
3
9 C
B 8 2
B >
C
A
TTACHED (x; y ) ^ :3S UPPORTS (x; y )^
:
3
>
>
B >
C
> 6
>
7
>
B >
C
> 6 S UPPORTS (z; y ) ^ C ONTACTS (z; y )^
>
7
>
B >
C
>
>
7
6
>
B >
C
> 6 :3S UPPORTED (x) ^ :3ATTACHED (y; z )^ 7 ^f<;mg >
>
B >
C
>
>
7
6
>
B >
C
>
> 4 :3S UPPORTS (y; x) ^ :3S UPPORTS (y; z )^ 5
>
4
B >
C
>
>
>
P ICK U P (x; y; z ) = B >
= C
<
B
C
S
UPPORTS (x; z ) ^ :3S UPPORTS (z; x)
:
3
3
B
2
C
B >
C
>
A
TTACHED
(
x;
y
)
^
S
UPPORTS
(
x;
y
)
^
>
B >
C
>
> 6
>
7
B >
C
>
>
:
3
S
UPPORTS
(
z;
y
)
^
>
6
7
B >
C
>
> 6
>
7
B >
C
>
>
>
:
3
S
UPPORTED
(
x
)
^
:
3
A
TTACHED
(
y;
z
)
^
6
7
B >
C
> 6
>
>
7
B >
C
>
>
>
4
5
@ >
A
:
3
S
UPPORTS
(
y;
x
)
^
:
3
S
UPPORTS
(
y;
z
)
^
>
>
>
>
;
:
:3S UPPORTS(x; z) ^ :3S UPPORTS(z; x)
0
1
:3x = y ^ :3z = x ^ :3z = y^
C
B
(y) ^ :3ATTACHED (x; z )^
C
B S UPPORTED
3
9 C
B 8 2
C
B >
A
TTACHED (x; y ) ^ S UPPORTS (x; y )^
>
>
C
B >
>
> 6
7
>
C
B >
>
>
S
UPPORTS
(
z;
y
)
^
:
3
7
6
>
C
B >
>
> 6
7
>
C
B >
>
>
:
3
S
UPPORTED
(
x
)
^
:
3
A
TTACHED
(
y;
z
)
^
^
7
6
>
f
<;
m
g
C
B >
>
>
7
> C
> 6
B >
>
5
4
>
:
3
S
UPPORTS
(
y;
x
)
^
:
3
S
UPPORTS
(
y;
z
)
^
4 B>
C
>
>
>
P UT D OWN (x; y; z ) = B >
= C
<
C
B
:
3
S
UPPORTS (x; z ) ^ :3S UPPORTS (z; x)
3
C
B
2
C
B >
>
:
3ATTACHED (x; y) ^ :3S UPPORTS(x; y)^
>
C
B >
>
>
>
6
7
C
B >
>
> 6 S UPPORTS (z; y ) ^ C ONTACTS (z; y )^
>
7
C
B >
>
>
>
6
7
B >
C
>
> 6 :3S UPPORTED (x) ^ :3ATTACHED (y; z )^ 7
>
B >
C
>
>
>
6
7
B >
> C
>
>
4 :3S UPPORTS (y; x) ^ :3S UPPORTS (y; z )^ 5
A
@ >
>
>
>
>
;
:
:3S UPPORTS(x; z) ^ :3S UPPORTS(z; x)

Figure 13: Part I of the HD2 event-logic definitions.

439

F ERN , G IVAN , & S ISKIND

0

1

:3w = x ^ :3y = w ^ :3y = x^
B :3z = w ^ :3z = x ^ :3z = y ^
C
B
C
B S UPPORTED (x) ^ :3ATTACHED(w; y )^
C
B 8 2
9 C
3
B >
C
ATTACHED(w; x) ^ S UPPORTS (w; x)^
>
B >
>
C
> 6
>
B >
7
>
C
:
3
S UPPORTS(y; x)^
>
B >
>
7
>
6
C
> 6
>
B >
7
>
C
S UPPORTS(z; y ) ^ C ONTACTS(z; y )^
>
B >
7
>
6
>
C
> 6
>
B >
7
C
>
:
3
ATTACHED(z; y )^
^
f
mg >
B >
7
6
C
>
>
> 6
>
7
B >
C
>
:
3
S UPPORTED(w) ^ :3ATTACHED(x; y )^ 7
>
B >
6
C
>
>
> 4
>
B >
C
>
5
:3S UPPORTS(x; w) ^ :3S UPPORTS(x; y)^
>
B >
>
>
= C
B <
C
B
C
2 :3S UPPORTS(w; y ) ^ :3S UPPORTS(y; w)
3
B >
C
:3ATTACHED(w; x) ^ :3S UPPORTS(w; x)^
>
B >
C
>
>
B >
C
6
7
>
>
S UPPORTS(y; x) ^ C ONTACTS (y; x)^
>
B >
C
6
7
>
>
>
B >
C
6
7
>
>
>
B >
C
6 S UPPORTS(z; y ) ^ C ONTACTS(z; y )^
7
>
>
>
>
B >
C
6
7
>
>
B >
C
7
> 6 :3ATTACHED(z; y )^
>
>
>
B >
C
6
7
>
>
B >
C
> 6 :3S UPPORTED(w) ^ :3ATTACHED(x; y )^ 7
>
>
>
>
@ >
A
4
5
:3S UPPORTS(x; w) ^ :3S UPPORTS(x; y)^
>
>
>
>
:
;
:3S UPPORTS(w; y) ^ :3S UPPORTS(y; w)
1
0
:3w = x ^ :3y = w ^ :3y = x^
C
B :3z = w ^ :3z = x ^ :3z = y ^
C
B
C
B S UPPORTED(x) ^ :3ATTACHED(w; y )^
9 C
B 8 2
3
C
B >
:3ATTACHED(w; x) ^ :3S UPPORTS(w; x)^
>
C
>
B >
>
C
>
6
B >
7
>
>
C
>
6 S UPPORTS (y; x) ^ C ONTACTS (y; x)^
B >
7
>
>
>
C
>
6
B >
7
>
C
>
B >
7
> 6 S UPPORTS (z; y ) ^ C ONTACTS (z; y )^
>
>
C
>
6
B >
7
C
>
6 :3ATTACHED(z; y )^
B >
7 ^f mg >
>
>
>
C
>
6
B >
7
>
C
>
B >
> 6 :3S UPPORTED(w) ^ :3ATTACHED(x; y )^ 7
>
>
C
>
B >
4
5
:3S UPPORTS(x; w) ^ :3S UPPORTS(x; y)^
>
C
>
B >
>
=
<
C
B
C
B
2 :3S UPPORTS(w; y ) ^ :3S UPPORTS(y; w) 3
C
B >
ATTACHED(w; x) ^ S UPPORTS(w; x)^
>
C
>
B >
>
>
6
C
7
>
B >
>
C
7
>
B >
> 6 :3S UPPORTS(y; x)^
>
>
6
C
7
>
B >
>
6 S UPPORTS (z; y ) ^ C ONTACTS (z; y )^
C
7
>
B >
>
>
>
6
C
7
>
B >
>
C
7
>
B >
> 6 :3ATTACHED(z; y )^
>
>
6
C
7
>
B >
>
C
>
B >
> 6 :3S UPPORTED(w) ^ :3ATTACHED(x; y )^ 7
>
>
>
4
A
5
@ >
:3S UPPORTS(x; w) ^ :3S UPPORTS(x; y)^
>
>
>
>
;
:
:3S UPPORTS(w; y) ^ :3S UPPORTS(y; w)
:3y = z ^ [P ICK U P(w; x; y); P UT D OWN(w; x; z )]
P UT D OWN(w; y; z ) ^f g S TACK (w; x; y; z )
U NSTACK (w; x; y; z ) ^f g P ICK U P (x; y; z )
<;

S TACK(w; x; y; z )

4

=

<;

U NSTACK(w; x; y; z )

M OVE(w; x; y; z )
A SSEMBLE(w; x; y; z )
D ISASSEMBLE(w; x; y; z )

4

=

4
4
=
4
=
=

<

<

Figure 14: Part II of the HD2 event-logic definitions.

440

L EARNING T EMPORAL E VENTS

3 9
0 8 2
S UPPORTED (y ) ^ S UPPORTS (z; y )^
>
>
>
>
>
B >
> 4 C ONTACTS (y; z ) ^ : S UPPORTS(x; y )^
5; >
>
>
B >
>
>
>
B >
>
: ATTACHED(x; y) ^ : ATTACHED(y; z )
=
B <
B
S UPPORTED(y );
B > 2
3 >^
>
B >
S UPPORTED (y ) ^ S UPPORTS (x; y )^
>
>
>
B >
>
>
B >
>
5
4
ATTACHED(x; y ) ^ : S UPPORTS(z; y )^
>
>
>
B >
;
:
B
: C ONTACTS(y; z ) ^ : ATTACHED(y; z9)
B 8
B > S UPPORTED(y );
>
B >

 >
=
B <
S UPPORTED(y ) ^ ATTACHED(x; y )^
B
;
^
B >
ATTACHED(y; z )
>
B >
>
:
;
B
B 8 [S UPPORTED(y ) ^ ATTACHED(x; y )] 9
B < [S UPPORTED(y ) ^ C ONTACTS (y; z )] ; =
B
B
B : [S UPPORTED(y ) ^ ATTACHED(y; z )] ; ; ^
B
B 8 [2S UPPORTED(y ) ^ ATTACHED(x; y )]
3 9
B >
S UPPORTED (y ) ^ S UPPORTS (z; y )^
>
>
B >
>
> 4 C ONTACTS (y; z ) ^ : S UPPORTS(x; y )^
B >
5; >
=
B <
B
:
A
TTACHED
(
x; y ) ^ : ATTACHED(y; z )
^
B >
>
>
B >
[
S
UPPORTED
(
y
)
^
S
UPPORTS
(
z;
y
)]
;
>
>
>
B >
;
B : [S UPPORTED(y ) ^ ATTACHED(x; y )]
9
B 8
B > [S UPPORTED(y ) ^ S UPPORTS (z; y )] ;
>
>
B >
>
>
> [S UPPORTED(y ) ^ ATTACHED(x; y )] ;
B >
B < 2
3 =
B
S
UPPORTED
(
y ) ^ S UPPORTS (x; y )^
B >
>
5 >
@ >
>
> 4 ATTACHED(x; y ) ^ : S UPPORTS(z; y )^
>
>
:
;

3

3

3

3

P ICK U P (x; y; z )

4

=

3

3

3

3

3

3

:3C ONTACTS(y; z ) ^ :3ATTACHED(y; z )

P UT D OWN(x; y; z )

4

=

1
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
A

3 9
0 8 2
S UPPORTED(y ) ^ S UPPORTS(x; y ) ^ ATTACHED(x; y )^
>
>
>
>
> 4 : S UPPORTS(z; y ) ^ : C ONTACTS(y; z )^
>
B >
5; >
>
B >
>
>
=
B <
: ATTACHED(y; z )
B
^
B > S UPPORTED (y );
>
>
B >


>
>
>
B >
S UPPORTED(y ) ^ S UPPORTS (z; y ) ^ C ONTACTS(z; y )^
>
B >
>
>
;
B :
:
S
UPPORTS
(
x; y ) ^ :
A
TTACHED
(
x; y )
B 8 
9

B <
B
 S UPPORTED (y ) ^ ATTACHED(x; y ) ;
 =
@
S UPPORTED (y ) ^ ATTACHED(x; y ) ^ ATTACHED(y; z ) ;
:
;

3
3

3

3

3

S UPPORTED (y )

Figure 15: The learned 3-AMA definitions for P ICK U P (x; y; z ) and P UT D OWN (x; y; z ).

441

1
C
C
C
C
C
C
C
C
C
C
C
C
A

F ERN , G IVAN , & S ISKIND

0 8
>
>
B <
B
B >
B >
B :
B (
B
B
B
B
B (
B
B
B
B
B (
B
B
B
B
B (
B
B
B
B
B (
B
B
B
B
B 8
B <
B
B
B :
B
B (
B
B
B
B
B (
B
B
B
B
B 8
B
B <
B
B
B :
B 8
B
B <
B
B
B :
B
B (
B
B
B
B
B 8
B <
B
B
B :
B
B 8
B >
B >
B <
B
@ >
>
:

h

^

^

^

^

S UPPORTED(y ) ATTACHED(w; x) S UPPORTS(z; y ) C ONTACTS(y; z )
S UPPORTS(x; y )
S UPPORTS(y; x)
C ONTACTS(x; y )
ATTACHED(x; y )

:3

^ :3

^ :3

^ :3

i

;

9
>
>
=

1

C
C
i >^ C
S UPPORTED(y ) ^ S UPPORTED(x) ^ S UPPORTS(y; x) ^ C ONTACTS(x; y ) ^ C ONTACTS(y; z )^
>
; C
C
:3S UPPORTS(x; y) ^ :3ATTACHED(w; x) ^ :3ATTACHED(x; y) ^ :3)ATTACHED(y; z)
C
C
[S UPPORTED(y) ^ ATTACHED(w; x)] ;
C
[S UPPORTED(y) ^ ATTACHED(x; y)] ;
^
C
C
[S UPPORTED(y) ^ S UPPORTED(x) ^ S UPPORTS(y; x) ^ C ONTACTS(x; y)]
)
C
C
[S UPPORTED(y) ^ ATTACHED(w; x)] ;
[S UPPORTED(y) ^ S UPPORTS(x; y) ^ ATTACHED(w; x) ^ ATTACHED(x; y) ^ ATTACHED(y; z)] ; ^ C
C
C
[S UPPORTED(y) ^ S UPPORTED(x)S UPPORTS(y; x)]
)
C
C
[S UPPORTED(y) ^ ATTACHED(w; x)] ;
C
[S UPPORTED(y) ^ S UPPORTED(x) ^ S UPPORTS(x; y) ^ S UPPORTS(y; x) ^ ATTACHED(w; x)] ; ^
C
C
[S UPPORTED(y) ^ S UPPORTED(x) ^ S UPPORTS(y; x)]
)
C
C
[S UPPORTED(y) ^ ATTACHED(w; x) ^ S UPPORTS(z; y) ^ C ONTACTS(y; z)] ;
C
[S UPPORTED(y) ^ ATTACHED(y; z)] ;
^
C
C
[S UPPORTED(y) ^ S UPPORTED(x) ^ S UPPORTS(y; x) ^ C ONTACTS(y; z)] )
C
C
[S UPPORTED(y) ^ ATTACHED(w; x) ^ S UPPORTS(z; y) ^ C ONTACTS(y; z)] ;
C
[S UPPORTED(y) ^ ATTACHED(w; x) ^ ATTACHED(y; z)] ;
^
C
C
[hS UPPORTED(y) ^ S UPPORTED(x) ^ S UPPORTS(y; x)]
i 9
C
S UPPORTED(y ) ^ ATTACHED(w; x) ^ S UPPORTS(z; y ) ^ C ONTACTS(y; z )^
C
=
;
C
:3S UPPORTS(x; y) ^ :3S UPPORTS(y; x) ^ :3C ONTACTS(x; y) ^ :3ATTACHED(x; y)
C
^
C
[S UPPORTED(y) ^ ATTACHED(w; x)] ;
;
C
[S UPPORTED(y) ^ S UPPORTED(x) ^ S UPPORTS(y; x)]
C
)
C
[S UPPORTED(y) ^ ATTACHED(w; x)] ;
C
[S UPPORTED(y) ^ ATTACHED(w; x) ^ S UPPORTS(z; y) ^ C ONTACTS(y; z)] ; ^
C
C
[S UPPORTED(y) ^ S UPPORTED(x)]
C
)
C
[S UPPORTED(y) ^ ATTACHED(w; x)] ;
C
[S UPPORTED(y) ^ ATTACHED(w; x) ^ S UPPORTS(z; y) ^ S UPPORTED(x)] ; ^
C
C
[S UPPORTED(y) ^ S UPPORTED(x)]
C
9
C
[hS UPPORTED(y) ^ ATTACHED(w; x)] ;
i =
C
S UPPORTED(y ) ^ C ONTACTS(y; z ) ^ S UPPORTS(z; y ) ^ S UPPORTED(x)^
C
;
^
C
:3S UPPORTS(x; y) ^ :3ATTACHED(x; y)
;
C
C
[S UPPORTED(y) ^ S UPPORTED(x)]
9
C
S UPPORTED(y );
C
h
i =
C
S UPPORTED(y ) ^ C ONTACTS(y; z ) ^ S UPPORTS(z; y ) ^ S UPPORTED(x)^
^
;
C
:3S UPPORTS(x; y) ^ :3ATTACHED(x; y) ^ :3ATTACHED(y; z)
C
;
C
[S UPPORTED(y) ^ S UPPORTED(x) ^ S UPPORTS(y; x)] )
C
C
[S UPPORTED(y) ^ ATTACHED(w; x)] ;
C
[S UPPORTED(y) ^ C ONTACTS(y; z) ^ S UPPORTED(x)] ; ^
C
C
[S UPPORTED(y) ^ S UPPORTED(x) ^ S UPPORTED(y)x]
9 C
[S UPPORTED(y) ^ ATTACHED(w; x)] ;
= C
C
[hS UPPORTED(y) ^ S UPPORTED(x) ^ S UPPORTS(y; x)] ;
i
^C
S UPPORTED(y ) ^ S UPPORTED(x) ^ S UPPORTS(y; x) ^ C ONTACTS(x; y ) ^ C ONTACTS(y; z )^
; C
C
:3S UPPORTS(x; y) ^ :3ATTACHED(w; x) ^ :3ATTACHED(x; y) ^ :3ATTACHED(y; z)
9 C
S
UPPORTED(y );
> C
h
i
>
= C
S UPPORTED(y ) ^ S UPPORTED(x) ^ S UPPORTS(y; x) ^ S UPPORTS(z; y )^
C
;
C
C
ONTACTS(x; y ) ^ C ONTACTS(y; z )
h
i > A
S UPPORTED(y ) ^ S UPPORTED(x) ^ S UPPORTS(y; x) ^ C ONTACTS(x; y ) ^ C ONTACTS(y; z )^
>
;

[S UPPORTED(y)] ;
h

:3S UPPORTS(x; y) ^ :3ATTACHED(w; x) ^ :3ATTACHED(x; y) ^ :3ATTACHED(y; z)

Figure 16: The learned 3-AMA definition for S TACK (w; x; y; z ).

442

L EARNING T EMPORAL E VENTS

0 8
>
>
B >
>
B >
>
B >
>
B <
B
B >
B >
>
B >
B >
>
>
B >
B :
B
B (
B
B
B
B
B (
B
B
B
B
B
B (
B
B
B
B
B (
B
B
B
B
B 8
B
B >
>
B >
>
B >
B <
B
B >
B >
>
B >
:
B >
B 8
B
B >
>
B >
>
B >
B <
B
B >
B >
>
B >
>
B :
B
B (
B
B
B
B
B 8
B
B >
<
B
B
B >
B :
B
B (
B
B
B
B
B (
B
B
B
B
B
B 8
B >
B <
B
@
>
:

"

#

9

S UPPORTED(x) ^ S UPPORTED(y ) ^ S UPPORTS(y; x)^
>
>
>
;
C ONTACTS(x; y ) ^ C ONTACTS(y; z ) ^ :3S UPPORTS(w; x)^
>
>
>
>
:3S UPPORTS(x; y) ^ :3ATTACHED(w; x) ^ :3ATTACHED(x; y)
>
=
[2S UPPORTED(x) ^ S UPPORTED(y)] ;
3
^
S UPPORTED(x) ^ S UPPORTED(y ) ^ ATTACHED(w; x) ^ S UPPORTS(z; y )^
>
>
>
6 C ONTACTS(y; z ) ^ ATTACHED(w; x) ^ :3S UPPORTS(x; y )^
7 >
>
4
5 >
>
:3S UPPORTS(y; x) ^ :3C ONTACTS(x; y)^
>
;
:3ATTACHED(x; y) ^ :3ATTACHED(y; z)
)
[S UPPORTED(x) ^ S UPPORTED(y) ^ S UPPORTS(y; x)] ;
[S UPPORTED(x) ^ S UPPORTED(y) ^ ATTACHED(w; x) ^ ATTACHED(y; z)] ; ^
[S UPPORTED(x) ^ S UPPORTED(y) ^ ATTACHED(w; x) ^ C ONTACTS(y; z)] )
[S UPPORTED(x) ^ S UPPORTED(y) ^ S UPPORTS(y; x) ^ C ONTACTS(y; z)] ;
[S UPPORTED(x) ^ S UPPORTED(y) ^ ATTACHED(y; z)] ;
^
[S UPPORTED(x) ^ S UPPORTED(y) ^ ATTACHED(w; x) ^ C ONTACTS(y; z)] )
[S UPPORTED(x) ^ S UPPORTED(y) ^ S UPPORTS(y; x) ^ C ONTACTS(x; y)] ;
[S UPPORTED(x) ^ S UPPORTED(y) ^ S UPPORTS(y; x) ^ ATTACHED(x; y)] ; ^
[S UPPORTED(x) ^ S UPPORTED(y) ^ ATTACHED(w; x)] )
[S UPPORTED(x) ^ S UPPORTED(y) ^ S UPPORTS(y; x)] ;
[S UPPORTED(x) ^ S UPPORTED(y) ^ C ONTACTS(y; z)] ; ^
[S UPPORTED(x) ^ S UPPORTED(y) ^ ATTACHED(w; x)]
9
[S UPPORTED(x) ^ S UPPORTED(y) ^ S UPPORTS(y; x)] ;
>
>
>
>
[2S UPPORTED(x) ^ S UPPORTED(y) ^ ATTACHED(w; x)] ;
3 >
=
S UPPORTED(x) ^ S UPPORTED(y ) ^ ATTACHED(w; x) ^ S UPPORTS(z; y )^
^
7 >
6 C ONTACTS(y; z ) ^ ATTACHED(w; x) ^ :3S UPPORTS(x; y )^
5 >
4
>
>
:3S UPPORTS(y; x) ^ :3C ONTACTS(x; y)^
>
;
ATTACHED(x; y ) ^ :3ATTACHED(y; z )
:
3
2
3 9
S UPPORTED(x) ^ S UPPORTED(y ) ^ S UPPORTS(y; x)^
>
>
>
6 C ONTACTS(x; y ) ^ C ONTACTS(y; z )^
7 >
>
4
5; =
:3S UPPORTS(w; x) ^ :3S UPPORTS(x; y)^
^
:3ATTACHED(w; x) ^ :3ATTACHED(x; y)
>
>
>
>
[S UPPORTED(x) ^ S UPPORTED(y) ^ S UPPORTS(y; x)] ;
>
;
[S UPPORTED(x) ^ S UPPORTED(y) ^ ATTACHED(w; x)]
[S UPPORTED(x) ^ S UPPORTED(y) ^ S UPPORTS(y; x) ^ C ONTACTS(y; z)] ; )
[S UPPORTED(x) ^ S UPPORTED(y) ^ S UPPORTS(y; x) ^ ATTACHED(y; z)] ; ^
[S UPPORTED(x) ^ S UPPORTED(y) ^ ATTACHED(w; x)]
9
[S UPPORTED(x) ^ S UPPORTED(y) ^ S UPPORTS(y; x)] ;

 >
=
S UPPORTED(x) ^ S UPPORTED(y ) ^ S UPPORTS(y; x) ^ ATTACHED(y; z )^
^
;
S UPPORTS(x; y ) ^ ATTACHED(w; x) ^ ATTACHED(x; y )
>
;
[S UPPORTED(x) ^ S UPPORTED(y) ^ ATTACHED(w; x)]
)
[S UPPORTED(x) ^ S UPPORTED(y)] ;
[S UPPORTED(x) ^ S UPPORTED(y) ^ S UPPORTS(y; x) ^ ATTACHED(w; x)] ; ^
[S UPPORTED(x) ^ S UPPORTED(y) ^ S UPPORTS(w; x) ^ ATTACHED(w; x)] )
[S UPPORTED(x) ^ S UPPORTED(y) ^ S UPPORTS(y; x)] ;
[S UPPORTED(x) ^ S UPPORTED(y) ^ S UPPORTS(w; x) ^ ATTACHED(w; x)] ; ^
[S UPPORTED(x) ^ S UPPORTED(y) ^ ATTACHED(w; x)]
9
[S UPPORTED(x) ^ S UPPORTED(y) ^ S UPPORTS(y; x)] ;

 >
=
S UPPORTED(x) ^ S UPPORTED(y ) ^ C ONTACTS(y; z )^
;
:3S UPPORTS(x; y) ^ :3ATTACHED(x; y) ^ :3ATTACHED(y; z)
>
;
[S UPPORTED(x) ^ S UPPORTED(y)]

Figure 17: The learned 3-AMA definition for U NSTACK (w; x; y; z ).

443

1
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
A

F ERN , G IVAN , & S ISKIND

0 8
>
>
>
B >
>
B >
>
B >
>
B >
B <
B
B >
B >
>
B >
>
B >
>
B >
>
B >
B :
B 8
B >
B <
B
B
B >
B :
B 8
B >
B <
B
B
B >
B :
B 8
B >
B <
B
B
B >
B :
B 8
B >
B <
B
B
B >
B :
B 8
B >
B <
B
B
B >
B :
B 8
B >
B <
B
@
>
:

2
6
4

S UPPORTED (x) ^ S UPPORTS (y; x) ^ C ONTACTS (y; x)^
:3S UPPORTS(w; x) ^ :3S UPPORTS(z; x) ^ :3C ONTACTS(x; z)^
:3ATTACHED(w; x) ^ :3ATTACHED (y; x) ^ :3ATTACHED (x; z)

3
7
5

S UPPORTED (x);
S UPPORTED (x) ^ S UPPORTS (z; x) ^ C ONTACTS (x; z )^
6
:
4 3S UPPORTS (w; x) ^ :3S UPPORTS (y; x) ^ :3C ONTACTS (y; x)^
:3ATTACHED(w; x) ^ :3ATTACHED9(y; x) ^ :3ATTACHED (x; z)
[S UPPORTED (x) ^ S UPPORTS (y; x)] ; >
=
[S UPPORTED (x) ^ ATTACHED (w; x)] ; > ^
;
S UPPORTED (x)
9
>
S UPPORTED (x);
=
[S UPPORTED (x) ^ ATTACHED (w; x) ^ ATTACHED (x; z )] ; > ^
;
S UPPORTED (x)
9
>
[S UPPORTED (x)] ;
=
[S UPPORTED (x) ^ ATTACHED (x; z )] ; > ^
[S UPPORTED (x) ^ C ONTACTS (x; z )] ;
9
>
S UPPORTED (x);
=
[S UPPORTED (x) ^ ATTACHED (w; x) ^ S UPPORTS (w; x)] ; > ^
;
S UPPORTED (x)
9
>
S UPPORTED (x);
=
[S UPPORTED (x) ^ ATTACHED (w; x) ^ ATTACHED (y; x)] ; > ^
;
S UPPORTED (x)
9
[S UPPORTED (x) ^ C ONTACTS (y; x)] ; >
=
[S UPPORTED (x) ^ ATTACHED (y; x)] ; >
;
S UPPORTED (x)
2

Figure 18: The learned 3-AMA definition for M OVE (w; x; y; z ).

444

3
7
5

;

9
>
>
>
>
>
>
>
>
>
>
=
>
>
>
>
>
>
>
>
>
>
;

1

^

C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
A

L EARNING T EMPORAL E VENTS

0 8
>
>
>
B >
>
>
B >
B >
>
>
B <
B
B
B >
B >
>
B >
>
B >
>
B >
>
B >
:
B
B 8
B >
B >
B >
>
B >
<
B
B
B >
B >
>
B >
>
B :
B 8
B
B >
B <
B
B >
B :
B 8
B
B >
B <
B
B >
B :
B 8
B
B >
B <
B
B >
B :
B 8
B
B >
B <
@
>
:

2

3

9

:3S UPPORTED (x) ^ :3S UPPORTS(z; y) ^ :3S UPPORTS(y; x)^ 7 >
>
>
6
>
:
4 3C ONTACTS (x; y ) ^ :3C ONTACTS (z; y )^
5; >
>
>
>
>
>
:3ATTACHED(w; x) ^ :3ATTACHED (z; y)
=

true
;
2
6
4
2
6
4

3

S UPPORTED (x) ^ S UPPORTED (y ) ^ S UPPORTS (z; y )^
7
S UPPORTS (y; x) ^ C ONTACTS (x; y )^
5
C ONTACTS (z; y ) ^ :3ATTACHED (w; y )
:3S UPPORTED (x) ^ :3S UPPORTS(z; y) ^ :3S UPPORTS(y; x)^
:3C ONTACTS(x; y) ^ :3C ONTACTS(z; y)^
:3ATTACHED(w; x) ^ :3ATTACHED (z; y)

ATTACHED (w; y );
S UPPORTED (y )

9
>
=

true;

3
7
5

;

>
>
>
>
>
>
>
>
>
>
;
9
>
>
>
>
>
=
>
>
>
>
>
;

[S UPPORTED (y) ^ :3ATTACHED (w; x) ^ :3ATTACHED (z; y)] ; > ^
;
S UPPORTED (y )
9
>
true;
=
[S UPPORTED (y) ^ ATTACHED (z; y)] ; > ^
[S UPPORTED (y) ^ C ONTACTS (z; y)] ;
true;
[S UPPORTED (y) ^ S UPPORTS (z; y)C ONTACTS (z; y) ^ ATTACHED (w; x)] ;
S UPPORTED (y )
9
>
true;
=
[S UPPORTED (y) ^ ATTACHED (w; y)ATTACHED (z; y)] ; >
;
S UPPORTED (y )
Figure 19: The learned 3-AMA definition for A SSEMBLE (w; x; y; z ).

445

1

^

^

9
>
=
>
;

^

C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
A

F ERN , G IVAN , & S ISKIND

0 8
>
>
B >
>
B >
>
B >
>
B >
>
B <
B
B >
B >
B >
>
B >
>
B >
>
B >
>
B :
B 8
B >
B >
B <
B
B >
B >
B :
B 8
B >
B >
B <
B
B >
B >
B :
B 8
B >
B >
B <
B
B >
B >
B :
B 8
B >
B >
B <
B
B >
B >
B :
B 8
B <
B
B
B :
B
B 8
B <
B
@
:

3

2

9

S UPPORTED (x) ^ S UPPORTED(y ) ^ S UPPORTS(y; x) ^ S UPPORTS (z; y )^
>
>
7 >
>
6 C ONTACTS (x; y ) ^ C ONTACTS(z; y ) ^ : S UPPORTS(w; x)^
7; >
>
6
>
5 >
4 : S UPPORTS(w; y ) ^ : S UPPORTS(x; y ) ^ : ATTACHED(x; w)^
>
>
=
: ATTACHED(w; y) ^ : ATTACHED(x; y) ^ : ATTACHED(z; y)
^
S UPPORTED(y );
>
>
2
3
>
>
S UPPORTED (y ) ^ : S UPPORTED(x) ^ : S UPPORTS(w; x)^
>
>
>
>
4 : S UPPORTS(z; y ) ^ : S UPPORTS(y; x) ^ : C ONTACTS(x; y )^ 5 ;
>
>
;
: C ONTACTS(z; y) ^ : ATTACHED(x; w) ^ : ATTACHED9(z; y)
[ S UPPORTED (x) ^ S UPPORTED (y )] ;
>

 >
=
S UPPORTED(x) ^ S UPPORTED (y ) ^ S UPPORTS (w; x)^
^
;
S UPPORTS(z; y ) ^ C ONTACTS (z; y ) ^ ATTACHED(x; w)
>
>
;
S UPPORTED(y )
9


S UPPORTED(x) ^ S UPPORTED (y ) ^ S UPPORTS (z; y )^
>
>
;
=
S UPPORTS(y; x) ^ C ONTACTS (x; y ) ^ C ONTACTS(z; y )
^
[ S UPPORTED (x) ^ S UPPORTED (y ) ^ S UPPORTS (y; x) ^ ATTACHED (x; y )] ; >
>
;
S UPPORTED(y )
9
[ S UPPORTED (x) ^ S UPPORTED (y ) ^ S UPPORTS (y; x) ^ C ONTACTS (z; y )] ; >
>


=
S UPPORTED(x) ^ S UPPORTED (y ) ^ S UPPORTS (x; y )^
;
^
S UPPORTS(y; z ) ^ ATTACHED(x; y ) ^ ATTACHED(z; y )
>
>
;
S UPPORTED(y )
9
[ S UPPORTED (x) ^ S UPPORTED (y ) ^ S UPPORTS (y; x)] ;
>
 >

=
S UPPORTED(x) ^ S UPPORTED (y ) ^ S UPPORTS (x; y )^
;
^
S UPPORTS(y; z ) ^ ATTACHED(x; y ) ^ ATTACHED(z; y ) ^ ATTACHED(x; w)
>
>
;
S UPPORTED(y )
9
S UPPORTED(y );
=
[ S UPPORTED (y ) ^ ATTACHED (w; y ) ^ ATTACHED (z; y )] ;
^
;
S UPPORTED(y )
9
S UPPORTED(y );
=
[ S UPPORTED (y ) ^ S UPPORTS (w; y ) ^ ATTACHED (w; y )] ;
;
S UPPORTED(y )

3
3

3
3

3
3

3

3
3

3

3

3
3

3
3

Figure 20: The learned 3-AMA definition for D ISASSEMBLE (w; x; y; z ).

446

1
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
A

L EARNING T EMPORAL E VENTS

References
Agrawal, R., & Srikant, R. (1995). Mining sequential patterns. In Proceedings of the Eleventh
International Conference on Data Engineering, pp. 3–14.
Allen, J. F. (1983). Maintaining knowledge about temporal intervals. Communications of the ACM,
26(11), 832–843.
Angluin, D. (1987). Learning regular sets from queries and counterexamples. Information and
Computation, 75, 87–106.
Bacchus, F., & Kabanza, F. (2000). Using temporal logics to express search control knowledge for
planning. Artificial Intelligence, 16, 123–191.
Bobick, A. F., & Ivanov, Y. A. (1998). Action recognition using probabilistic parsing. In Proceedings of the IEEE Computer Society Conference on Computer Vision and Pattern Recognition,
pp. 196–202, Santa Barbara, CA.
Borchardt, G. C. (1985). Event calculus. In Proceedings of the Ninth International Joint Conference
on Artificial Intelligence, pp. 524–527, Los Angeles, CA.
Brand, M. (1997a). The inverse Hollywood problem: From video to scripts and storyboards via
causal analysis. In Proceedings of the Fourteenth National Conference on Artificial Intelligence, pp. 132–137, Providence, RI.
Brand, M. (1997b). Physics-based visual understanding. Computer Vision and Image Understanding, 65(2), 192–205.
Brand, M., & Essa, I. (1995). Causal analysis for visual gesture understanding. In Proceedings of
the AAAI Fall Symposium on Computational Models for Integrating Language and Vision.
Brand, M., Oliver, N., & Pentland, A. (1997). Coupled hidden Markov models for complex action
recognition. In Proceedings of the IEEE Computer Society Conference on Computer Vision
and Pattern Recognition.
Cohen, P. (2001). Fluent learning: Elucidating the structure of episodes. In Proceedings of the
Fourth Symposium on Intelligent Data Analysis.
Cohen, W. (1994). Grammatically biased learning: Learning logic programs using an explicit antecedent description lanugage. Artificial Intelligence, 68, 303–366.
Cohen, W., & Hirsh, H. (1994). Learning the CLASSIC description logic: Theoretical and experimental results. In Proceedings of the Fourth International Conference on Principles of Knowledge
Representation and Reasoning, pp. 121–133.
De Raedt, L., & Dehaspe, L. (1997). Clausal discovery. Machine Learning, 26, 99–146.
Dehaspe, L., & De Raedt, L. (1996). DLAB: A declarative language bias formalism. In Proceedings
of the Ninth International Syposium on Methodologies for Intelligent Systems, pp. 613–622.
Fikes, R., & Nilsson, N. (1971). STRIPS: A new approach to the application of theorem proving to
problem solving. Artificial Intelligence, 2(3/4).
Hoppner, F. (2001). Discovery of temporal patterns—Learning rules about the qualitative behaviour
of time series. In Proceedings of the Fifth European Conference on Principles and Practice
of Knowledge Discovery in Databases.
447

F ERN , G IVAN , & S ISKIND

Kam, P., & Fu, A. (2000). Discovering temporal patterns for interval-based events. In Proceedings
of the Second International Conference on Data Warehousing and Knowledge Discovery.
Klingspor, V., Morik, K., & Rieger, A. D. (1996). Learning concepts from sensor data of a mobile
robot. Artificial Intelligence, 23(2/3), 305–332.
Lang, K., Pearlmutter, B., & Price, R. (1998). Results of the Abbadingo one DFA learning competition and a new evidence-driven state merging algorithm. In Proceedings of the Fourth
International Colloquium on Grammatical Inference.
Lavrac, N., Dzeroski, S., & Grobelnik, M. (1991). Learning nonrecursive definitions of relations
with LINUS. In Proceedings of the Fifth European Working Session on Learning, pp. 265–
288.
Mann, R., & Jepson, A. D. (1998). Toward the computational perception of action. In Proceedings
of the IEEE Computer Society Conference on Computer Vision and Pattern Recognition, pp.
794–799, Santa Barbara, CA.
Mannila, H., Toivonen, H., & Verkamo, A. I. (1995). Discovery of frequent episodes in sequences.
In Proceedings of the First International Conference on Knowledge Discovery and Data Mining.
Mitchell, T. (1982). Generalization as search. Artificial Intelligence, 18(2), 517–42.
Morales, E. (1997). Pal: A pattern-based first-order inductive system. Machine Learning, 26, 227–
252.
Muggleton, S. (1995). Inverting entailment and Progol. Machine Intelligence, 14, 133–188.
Muggleton, S., & Feng, C. (1992). Efficient induction of logic programs. In Muggleton, S. (Ed.),
Inductive Logic Programming, pp. 281–298. Academic Press.
Muggleton, S., & De Raedt, L. (1994). Inductive logic programming: Theory and methods. Journal
of Logic Programming, 19/20, 629–679.
Pinhanez, C., & Bobick, A. (1995). Scripts in machine understanding of image sequences. In
Proceedings of the AAAI Fall Symposium Series on Computational Models for Integrating
Language and Vision.
Plotkin, G. D. (1971). Automatic Methods of Inductive Inference. Ph.D. thesis, Edinburgh University.
Regier, T. P. (1992). The Acquisition of Lexical Semantics for Spatial Terms: A Connectionist Model
of Perceptual Categorization. Ph.D. thesis, University of California at Berkeley.
Roth, D., & Yih, W. (2001). Relational learning via propositional algorithms: An information extraction case study. In Proeedings of the Seventeenth International Joint Conference on Artificial
Intelligence.
Shoham, Y. (1987). Temporal logics in AI: Semantical and ontological considerations. Artificial
Intelligence, 33(1), 89–104.
Siskind, J. M. (2000). Visual event classification via force dynamics. In Proceedings of the Seventeenth National Conference on Artificial Intelligence, pp. 149–155, Austin, TX.
Siskind, J. M. (2001). Grounding the lexical semantics of verbs in visual perception using force
dynamics and event logic. Journal of Artificial Intelligence Research, 15, 31–90.
448

L EARNING T EMPORAL E VENTS

Siskind, J. M., & Morris, Q. (1996). A maximum-likelihood approach to visual event classification. In Proceedings of the Fourth European Conference on Computer Vision, pp. 347–360,
Cambridge, UK. Springer-Verlag.
Talmy, L. (1988). Force dynamics in language and cognition. Cognitive Science, 12, 49–100.
Yamoto, J., Ohya, J., & Ishii, K. (1992). Recognizing human action in time-sequential images using
hidden Markov model. In Proceedings of the IEEE Conference on Computer Vision and
Pattern Recognition, pp. 379–385.

449

Journal of Articial Intelligence Research 17 (2002) 1-33

Submitted 8/01; published 7/02

A Critical Assessment of
Benchmark Comparison in Planning
Adele E. Howe
Eric Dahlman

Computer Science Department
Colorado State University, Fort Collins, CO 80523

howe@cs.colostate.edu
dahlman@cs.colostate.edu

Abstract
Recent trends in planning research have led to empirical comparison becoming commonplace. The eld has started to settle into a methodology for such comparisons, which
for obvious practical reasons requires running a subset of planners on a subset of problems.
In this paper, we characterize the methodology and examine eight implicit assumptions
about the problems, planners and metrics used in many of these comparisons. The problem assumptions are: PR1) the performance of a general purpose planner should not be
penalized/biased if executed on a sampling of problems and domains, PR2) minor syntactic
dierences in representation do not aect performance, and PR3) problems should be solvable by STRIPS capable planners unless they require ADL. The planner assumptions are:
PL1) the latest version of a planner is the best one to use, PL2) default parameter settings
approximate good performance, and PL3) time cut-os do not unduly bias outcome. The
metrics assumptions are: M1) performance degrades similarly for each planner when run
on degraded runtime environments (e.g., machine platform) and M2) the number of plan
steps distinguishes performance. We nd that most of these assumptions are not supported
empirically; in particular, that planners are aected dierently by these assumptions. We
conclude with a call to the community to devote research resources to improving the state
of the practice and especially to enhancing the available benchmark problems.

1. Introduction
In recent years, comparative evaluation has become increasingly common for demonstrating
the capabilities of new planners. Planners are now being directly compared on the same
problems taken from a set of domains. As a result, recent advances in planning have
translated to dramatic increases in the size of the problems that can be solved (Weld,
1999), and empirical comparison has highlighted those improvements.
Comparative evaluation in planning has been signicantly inuenced and expedited by
the Articial Intelligence Planning and Scheduling (AIPS) conference competitions. These
competitions have had the dual eect of highlighting progress in the eld and providing
a relatively unbiased comparison of state-of-the-art planners. When individual researchers
compare their planners to others, they include fewer other planners and fewer test problems
because of time constraints.
To support the rst competition in 1998 (McDermott, 2000), Drew McDermott dened,
with contributions from the organizing committee, a shared problem/domain denition
language, PDDL (McDermott et al., 1998) (Planning Domain Denition Language). Using

c 2002 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Howe & Dahlman

a common language means that planners' performance can be directly compared, without
entailing hand translation or factoring in dierent representational capabilities.
As a second benet, the lack of translation (or at least human accomplished translation) meant that performance could be compared on a large number of problems and
domains1. In fact, the ve competition planners were given a large number of problems
(170 problems for the ADL track and 165 for the STRIPS track) within seven domains,
including one domain that the planner developers had never seen prior to the competition.
So the rst competition generated a large collection of benchmarks: seven domains used in
the competition plus 21 more that were considered for use. All 28 domains are available
at ftp://ftp.cs.yale.edu/pub/mcdermott/domains/. The second competition added three
novel domains to that set.
A third major benet of the competitions is that they appear to have motivated researchers to develop systems that others can use. The number of entrants went from ve in
the rst competition to 16 in the second. Additionally, all of the 1998 competitors and six
out of sixteen of the 2000 competitors made their code available on web sites. Thus, others
can perform their own comparisons.
In this paper, we describe the current practice of comparative evaluation as it has evolved
since the AIPS competitions and critically examine some of the underlying assumptions
of that practice. We summarize existing evidence about the assumptions and describe
experimental tests of others that had not previously been considered. The assumptions
are organized into three groups concerning critical decisions in the experiment design: the
problems tested, the planners included and the performance metrics collected.
Comparisons (as part of competitions or by specic researchers) have proven to be enormously useful to motivating progress in the eld. Our goal is to understand the assumptions
so that readers know how far the comparative results can be generalized. In contrast to the
competitions, the community cannot legislate fairness in individual researcher's comparative evaluations, but readers may be able to identify cases in which results should be viewed
either skeptically or with condence. Thus, we conclude the paper with some observations
and a call for considerably more research into new problems, metrics and methodologies to
support planner evaluation.
Also in contrast to the competitions, our goal is not to declare a winner. Our goal is
also not to critique individual studies. Consequently, to draw attention away from such a
possible interpretation, whenever possible, we report all results using letter designators that
were assigned randomly to the planners.

2. Planning Competitions and Other Direct Comparisons

Recently, the AIPS competitions have spurred considerable interest in comparative evaluation. The roots of comparative planner evaluation go back considerably further, however.
Although few researchers were able to run side-by-side comparisons of their planners with
1. To solve a particular planning problem (i.e., construct a sequence of actions to transform an initial state to
a goal state), planners require a domain theory and a problem description. The domain theory represents
the abstract actions that can be executed in the environment; typically, the domain descriptions include
variables that can be instantiated to specic objects or values. Multiple problems can be dened for
each domain; problem descriptions require an initial state description, a goal state and an association
with some domain.

2

A Critical Assessment of Benchmark Comparison in Planning

others, they were able to demonstrate performance of their planner on well-known problems, which could be viewed as de facto benchmarks. Sussman's anomaly (Sussman, 1973)
in Blocksworld was the premier planning benchmark problem and domain for many years;
every planner needed to \cut its teeth" on it.
As researchers tired of Blocksworld, many called for additional benchmark problems
and environments. Mark Drummond, Leslie Kaelbling and Stanley Rosenschein organized
a workshop on benchmarks and metrics (Drummond, Kaelbling, & Rosenschein, 1990).
Testbed environments, such as Martha Pollack's TileWorld (Pollack & Ringuette, 1990) or
Steve Hanks's TruckWorld (Hanks, Nguyen, & Thomas, 1993), were used for comparing
algorithms within planners. By 1992, UCPOP (Penberthy & Weld, 1992) was distributed
with a large set of problems (117 problems in 21 domains) for demonstration purposes. In
1995, Barry Fox and Mark Ringer set up a planning and scheduling benchmarks web page
(http://www.newosoft.com/~benchmrx/) to collect problem denitions, with an emphasis
on manufacturing applications. Recently, PLANET (a coordinating organization for European planning and scheduling researchers) has proposed a planning benchmark collection
initiative (http://planet.dfki.de).
Clearly, benchmark problems have become well-established means for demonstrating
planner performance. However, the practice has known benets and pitfalls; Hanks, Pollack
and Cohen (1994) discuss them in some detail in the context of agent architecture design.
The benets include providing metrics for comparison and supporting experimental control.
The pitfalls include a lack of generality in the results and a potential for the benchmarks to
unduly inuence the next generation of solutions. In other words, researchers will construct
solutions to excel on the benchmarks, regardless of whether the benchmarks accurately
represent desired real applications.
To obtain the benets just listed for benchmarks, the problems often are idealized or
simplied versions of real problems. As Cohen (1991) points out , most research papers in
AI, or at least at an AAAI conference, exploit benchmark problems; yet few of them relate
the benchmarks to target tasks. This may be a signicant problem; for example, in a study
of owshop scheduling2 benchmarks, we found that performance on the standard benchmark set did not generalize to performance on problems with realistic structure (Watson,
Barbulescu, Howe, & Whitley, 1999). A study of just Blocksworld problems found that the
best known Blocksworld benchmark problems are atypical in that they require only short
plans for solution and optimal solutions are easy to nd (Slaney & Thiebaux, 2001).
In spite of these diculties, benchmark problems and the AIPS competitions have considerably inuenced comparative planner evaluations. For example, in the AIPS 2000 conference proceedings (Chien, Kambhampati, & Knoblock, 2000), all of the papers on improvements to classical planning (12 out of 44 papers at the conference) relied heavily on
comparative evaluation using benchmark problems; the other papers concerned scheduling,
specic applications, theoretical analyses or special extensions to the standard paradigm
(e.g., POMDP, sensing). Of the 12 classical papers, six used problems from the AIPS98
competition benchmark set, six used problems from Kautz and Selman's distribution of
problems with blackbox (Kautz, 2002) and three added some of their own problems as
well. Each paper showed results on a subset of problems from the benchmark distributions
2. Scheduling is an area related to planning in which the actions are already known, but their sequence still
needs to be determined. Flowshop scheduling is a type of manufacturing scheduling problem.

3

Howe & Dahlman

(e.g., Drew McDermott's from the rst competition) with logistics, blocksworld, rocket and
gripper domains being most popular (used in 11, 7, 5 and 5 papers, respectively). The availability of planners from the competition was also exploited; eight of the papers compared
their systems to other AIPS98 planners: blackbox, STAN, IPP and HSP (in 5, 3, 3 and 1
papers, respectively).

3. Assumptions of Direct Comparison
A canonical planner evaluation experiment follows the procedure in Table 1. The procedure
is designed to compare performance of a new planner to the previous state of the art and
highlight superior performance in some set of cases for the new planner. The exact form
of an experiment depends on its purpose, e.g., showing superiority on a class of problem or
highlighting the eect of some design decision.
1. Select and/or construct a subset of planner domains
2. Construct problem set by:
 running large set of benchmark problems
 selecting problems with desirable features
 varying some facet of the problem to increase diculty (e.g., number of blocks)
3. Select other planners that are:
 representative of the state of the art on the problems OR
 similar to or distinct from the new planner, depending on the point of the comparison or advance of the new planner OR
 available and able to parse the problems
4. Run all problems on all planners using default parameters and setting an upper limit
on time allowed
5. Record which problems were solved, how many plan steps/actions were in the solution
and how much CPU time was required to either solve the problem, fail or time out
Table 1: Canonical comparative planner evaluation experiment.
The protocol depends on three selections: problems, planners and evaluation metrics.
It is simply not practical or even desirable to run all available planners on all available
problems. Thus, one needs to make informed decisions about which to select. A purpose
of this paper is to examine the assumptions underlying these decisions to help make them
more informed. Every planner comparison does not adopt every one of these assumptions,
but the assumptions are ones commonly found in planner comparisons. For example, those
comparisons designed for a specic purpose (e.g., to show scale-up on certain problems
or suitability of the planner for logistics problems) will carefully select particular types of
problems from the benchmark sets.
4

A Critical Assessment of Benchmark Comparison in Planning

Problems Many planning systems were developed to solve a particular type of planning
problem or explore a specic type of algorithmic variation. Consequently, one would expect
them to perform better on the problems on which and for which they were developed. Even
were they not designed for a specic purpose, the test set used during development may have
subtly biased the development. The community knows that planner performance depends
on problem features, but not in general, how, when and why. Researchers tend to design
planners to be general purpose. Consequently, comparisons assume that
the performance of a general-purpose planner should not be penalized/biased if
executed on a sampling of problems and domains (problem assumption 1).

The community also knows that problem representation inuences planner performance.
For example, benchmark problem sets include many versions of Blocksworld problems, designed by dierent planner developers. These versions vary in their problem representation,
both minor apparently syntactic changes (e.g., how clauses are ordered within operators,
initial conditions and goals, and whether any information is extraneous) and changes reecting addition of domain knowledge (e.g., what constraints are included and whether
variables are typed). Consequently, comparisons assume that
syntactic representational modications either do not matter or aect each planner equally (problem assumption 2).

PDDL includes a eld, :requirements, for the capabilities required of a planner to solve
the problem. PDDL1.0 dened 21 values for the :requirements eld; the base/default requirement is :strips, meaning STRIPS derived add and delete sets for action eects. :adl
(from Pednault's Action Description Language) requires variable typing, disjunctive preconditions, equality as a built-in predicate, quantied preconditions and conditional eects
in addition the :strips capability. Yet, many planners either ignore the :requirements
eld or reject the problem only if it species :adl (ignoring many of the other requirements
that could also cause trouble). Thus, comparisons assume that
problems in the benchmark set should be solvable by a STRIPS planner unless
they require :adl (problem assumption 3).

Planners The wonderful trend of making planners publicly available has led to a dilemma
in determining which to use and how to congure them. The problem is compounded by the
longevity of some of these planner projects; some projects have produced multiple versions.
Consequently, comparisons tend to assume that
the latest version of the planner is the best (planner assumption 1).

These planners may also include parameters. For example, the blackbox planner allows the
user to dene a strategy for applying dierent solution methods. Researchers expect that
parameters aect performance. Consequently, comparisons assume that
default parameter settings approximate good performance (planner assumption
2).
5

Howe & Dahlman

Experiments invariably use time cut-os for concluding planning that has not yet found
a solution or declared failure. Many planners would need to exhaustively search a large space
to declare failure. For practical reasons, a time out threshold is set to determine when to
halt a planner, with a failure declared when the time-out is reached. Thus, comparisons
assume that
if one picks a suciently high time-out threshold, then it is highly unlikely that
a solution would have been found had slightly more time been granted (planner
assumption 3).

Metrics Ideally, performance would be measured based on how well the planner does

its job (i.e., constructing the `best' possible plan to solve the problem) and how eciently
it does so. Because no planner has been shown to solve all possible problems, the basic
metric for performance is the number or percentage of problems actually solved within the
allowed time. This metric is commonly reported in the competitions. However, research
papers tend not to report it directly because they typically test a relatively small number
of problems.
Eciency is clearly a function of memory and eort. Memory size is limited by the
hardware. Eort is measured as CPU time, preferably but not always on the same platform
in the same language. The problems with CPU time are well known: programmer skill
varies; research code is designed more for fast prototyping than fast execution; numbers in
the literature cannot be compared to newer numbers due to processor speed improvements.
However, if CPU times are regenerated in the experimenter's environment then one assumes
that
performance degrades similarly with reductions in capabilities of the runtime
environment (e.g., CPU speed, memory size) (metric assumption 1).

In other words, an experimenter or user of the system does not expect that code has been
optimized for a particular compiler/operating system/hardware conguration, but it should
perform similarly when moved to another compatible environment.
The most commonly reported comparison metric is computation time. The second most
is number of steps or actions (for planners that allow parallel execution) in a plan. Although
planning seeks solutions to achieving goals, the goals are dened in terms of states of the
world, which does not lend itself well to general measures of quality. In fact, quality is likely
to be problem dependent (e.g., resource cost, amount of time to execute, robustness), which
is why number of plan steps has been favored. Comparisons assume that
number of steps in a resulting plan varies between planner solutions and approximates quality (metric assumption 2).

Any comparison, competitions especially, has the unenviable task of determining how to
trade-o or combine the three metrics (number solved, time, and number of steps). Thus,
if number of steps does not matter, then the comparison could be simplied.
We converted each assumption into a testable question. We then either summarized the
literature on the question or ran an experiment to test it.
6

A Critical Assessment of Benchmark Comparison in Planning

3.1 Our Experimental Setup
Some of the key issues have been examined previously, directly or indirectly. For those,
we simply summarize the results in the subsections that follow. However, some are open
questions. For those, we ran seven well known planners on a large set of 2057 benchmark
problems. The planners all accept the PDDL representation, although some have built-in
translators for PDDL to their internal representation and others rely on translators that we
added. When several versions of a planner were available, we included them all (for a total
of 13 planners). The basic problem set comprises the UCPOP benchmarks, the AIPS98 and
2000 competition test sets and an additional problem set developed for a specic application.
With the exception of the permuted problems (see the section on Problem Assumption
2 for specics), the problems were run on 440 MHz Ultrasparc 10s with 256 Megabytes
of memory running SunOS 2.8. Whenever possible, versions compiled by the developers
were used; when only source code was available, we compiled the systems according to the
developers' instructions. The planners written in Common Lisp were run under Allegro
Common Lisp version 5.0.1. The other planners were compiled with GCC (EGCS version
2.91.66). Each planner was given a 30 minute limit of wall clock time3 to nd a solution;
however, all times reported are run times returned by the operating system.
3.1.1 Planners

The planners are all what have been called primitive-action planners (Wilkins & desJardins,
2001), planners that require relatively limited domain knowledge and construct plans from
simple action descriptions. Because the AIPS98 competition required planners to accept
PDDL, the majority of planners used in this study were competition entrants or are later
versions thereof 4 . The common language facilitated comparison between the planners without having to address the eects of a translation step. The two exceptions were UCPOP and
Prodigy; however, their representations are similar to PDDL and were translated automatically. The planners represent ve dierent approaches to planning: plan graph analysis,
planning as satisability, planning as heuristic search, state-space planning with learning
and partial order planning. When possible, we used multiple versions of a planner, and not
necessarily the most recent. Because we conducted this study over some period of time (almost 1.5 years), we froze the set early on; we are not comparing the performance to declare
a winner and so did not think that the lack of recent versions undermined the results of
testing our assumptions.

IPP (Koehler, Nebel, Homann, & Dimopoulos, 1997) extends the Graphplan (Blum &

Furst, 1997) algorithm to accept a richer plan description language. In its early versions,
this language was a subset of ADL that extends the STRIPS formalism of Graphplan
to allow for conditional and universally quantied eects in operators. Until version 4.0,
negation was handled via the introduction of new predicates for the negated preconditions
3. We used actual time on lightly loaded machines because occasionally a system would thrash due to
inadequate memory resulting in little progress over considerable time.
4. We used the BUS system as the manager for running the planners (Howe, Dahlman, Hansen, Scheetz, &
von Mayrhauser, 1999), which was implemented with the AIPS98 competition planners. This facilitated
the running of so many dierent planners, but did somewhat bias what was included.

7

Howe & Dahlman

and corresponding mutual exclusion rules; subsequent versions handle it directly (Koehler,
1999). We used the AIPS98 version of IPP as well as the later 4.0 version.
SGP (Sensory Graph Plan) (Weld, Anderson, & Smith, 1998) also extends Graphplan to
a richer domain description language, primarily focusing on uncertainty and sensing. As
with IPP, some of this transformation is performed using expansion techniques to remove
quantication. SGP also directly supports negated preconditions and conditional eects.
SGP tends to be slower (it is implemented in Common Lisp instead of C) than some of the
other Graphplan based planners. We used SGP version 1.0b.
STAN (STate ANalysis) (Fox & Long, 1999) extends the Graphplan algorithm in part by
adding a preprocessor (called TIM) to infer type information about the problem and domain.
This information is then used within the planning algorithm to reduce the size of the search
space that the Graphplan algorithm would search. STAN also incorporated optimized data
structures (bit vectors of the planning graph) that help avoid many of the redundant calculations performed by Graphplan. Additionally, STAN maintains a wave front during graph
construction to track remaining goals and so limit graph construction. Subsequent versions
incorporated further analyses (e.g., symmetry exploitation) and an additional simpler planning engine. Four versions of STAN were tested: the AIPS98 competition version, version
3.0, version 3.0s and a development snapshot of version 4.0.
blackbox (Kautz & Selman, 1998) converts planning problems into Boolean satisability
problems, which are then solved using a variety of dierent techniques. The user indicates
which techniques should be tried in what order. In constructing the satisability problem,
blackbox uses the planning graph constructed as in Graphplan. For blackbox, we used
version 2.5 and version 3.6b.
HSP (Heuristic Search Planner) (Bonet & Gener, 1999) is based on heuristic search. The
planner uses a variation of hill-climbing with random restarts to solve planning problems.
The heuristic is based on using the Graphplan algorithm to solve a relaxed form of the
planning problem. In this study, we used version 1.1, which is an algorithmic renement of
the version entered into the AIPS98 competition, and version 2.0.
Prodigy 5 (The Prodigy Research Group, 1992) combines state-space planning with backward chaining from the goal state. A plan under construction consists of a head-plan of
totally ordered actions starting from the initial state and a tail-plan of partially ordered
actions related to the goal state. Although not ocially entered into the competition, informal results presented at the AIPS98 competition suggested that Prodigy performed well
in comparison to the entrants. We used Prodigy version 4.0.
UCPOP (Barrett, Golden, Penberthy, & Weld, 1993) is a Partial Order Causal Link
planner. The decision to include UCPOP was based on several factors. First, it does
not expand quantiers and negated preconditions; for some domains, the expansion from
grounding operators can be so great as to make the problem insolvable. Second, UCPOP
is based on a signicantly dierent algorithm in which interest has recently resurfaced. We
used UCPOP version 4.1.
5. We thank Eugene Fink for code that translates PDDL to Prodigy.

8

A Critical Assessment of Benchmark Comparison in Planning

Source
# of Domains # of Problems
Benchmarks
50
293
AIPS 1998
6
202
AIPS 2000
5
892
Developers
1
13
Application
3
72
Table 2: Summary of problems in our testing set: source of the problems, the number of
domains and problems within those domains.
3.1.2 Test Problems

Following standard practice, our experiments require planners to solve commonly available
benchmark problems and the AIPS competition problems. In addition, to test our assumptions about the inuence of domains (assumption PR1) and representations of problems
(assumption PR2), we will also include permuted benchmark problems and some other application problems. This section describes the set of problems and domains in our study,
focusing on their source and composition.
The problems require only STRIPS capabilities (i.e., add and delete lists). We chose this
least common denominator for several reasons. First, more capable planners can still handle
STRIPS requirements; thus, this maximized the number of planners that could be included
in our experiment. Also, not surprisingly, more problems of this type are available. Second,
we are examining assumptions of evaluation, including the eect of required capabilities on
performance. We do not propose to duplicate the eort of the competitions in singling out
planners for distinction, but rather, our purpose is to determine what factors dierentially
aect planners.
The bulk of the problems came from the AIPS98 and AIPS 2000 problem sets and
the set of problems distributed with the PDDL specication. The remaining problems
were solicited from several sources. The source and counts of problems and domains are
summarized in Table 2.
Benchmark Problems The preponderance of problems in planning test sets are \toy
problems": well-known synthetic problems designed to test some attribute of planners.
The Blocksworld domain has long been included in any evaluation because it is well known,
can have subgoal interactions and supports constructing increasingly complex problems
(e.g., towers of more blocks). A few benchmark problems are simplied versions of realistic
planning problems, e.g., the at tire, refrigerator repair or logistics domains. We used the
set included with the UCPOP planner. These problems were contributed by a large number
of people and include multiple encodings of some problems/domains, especially Blocksworld.
AIPS Competitions: 1998 and 2000 For the rst AIPS competition, Drew McDermott solicited problems from the competitors as well as constructing some of his own, such
as the mystery domain, which had semantically useless names for objects and operators.
Problems were generated for each domain automatically. The competition included 155
problems from six domains: robot movement in a grid, gripper in which balls had to be
9

Howe & Dahlman

moved between rooms by a robot with two grippers, logistics of transporting packages, organizing snacks for movie watching, and two mystery domains, which were disguised logistics
problems.
The format of the 1998 competition required entrants to execute 140 problems in the
rst round. Of these problems, 52 could not be solved by any planner. For round two, the
planners executed 15 new problems in three domains, one of which had not been included
in the rst round.
The 2000 competition attracted 15 competitors in three tracks: STRIPS, ADL and
a hand-tailored track. It required performance on problems in ve domains: logistics,
Blocksworld, parts machining, Freecell (a card game), and Miconic-10 elevator control.
These domains were determined by the organizing committee, with Fahiem Bacchus as the
chair, and represented a somewhat broader range. We chose problems from the Untyped
STRIPS track for our set.
From a scientic standpoint, one of the most interesting conclusions of both competitions was the observed trade-os in performance. Planners appeared to excel on dierent
problems, either solving more from a set or nding a solution faster. In 1998, IPP solved
more problems and found shorter plans in round two; STAN solved its problems the fastest;
HSP solved the most problems in round one; and blackbox solved its problems the fastest
in round one. In 2000, awards were given to two groups of distinguished planners across
the dierent categories of planners (STRIPS, ADL and hand tailored), because according
to the judges, \it was impossible to say that any one planner was the best"(Bacchus, 2000);
TalPlanner and FF were in the highest distinguished planner group. The graphs of performance do show dierences in computation time relative to other planners and to problem
scale-up. However, each planner failed to solve some problems, which makes these trends
harder to interpret (the computation time graphs have gaps).
The purpose of these competitions was to showcase planner technology at which they
succeeded admirably. The planners solved much harder problems than could have been
accomplished in years past. Because of this trend in planners handling increasingly dicult
problems, the competition test sets may become of historical interest for tracking the eld's
progress.
Problems Solicited from Planner Developers We also asked planner developers what
problems she had used during development. One developer, Maria Fox, sent us a domain
(Sodor, which is a logistics application) and set of problems that they had used. We would
have included other domains and problems had we received any others.
Other Applications The Miconic elevator domain from the AIPS2000 competition was
derived from an actual planning application. The domain and problems were extremely
simplied (e.g., removing the arithmetic).
To add another realistic problem to the comparison, we included one other planning application to the set of test domains: generating cases to test a software interface. Because
of the similarities between software interface test cases and plans, we developed a system,
several years ago, for automatically generating interface test cases using an AI planner.
The system was designed to generate test cases for the user interface to Storage Technology's robot tape library (Howe, von Mayrhauser, & Mraz, 1997). The interface (i.e., the
commands in the interface) was coded as the domain theory. For example, the mount com10

A Critical Assessment of Benchmark Comparison in Planning

mand/action's description required that a drive be empty and had the eect of changing
the position of the tape being mounted and changing the status of the tape drive. Problems
described initial states of the tape library (e.g., where tapes were resident, what was the
status of the devices and software controller) and goal states that a human operator might
wish to achieve.
At the time, we found that only the simplest problems could be generated using the
planners available. We included this application in part because we knew it would be a
challenge. As part of the test set, we include three domain theories (dierent ways of
coding the application involving 8-11 operators) and twenty-four problems for each domain.
We included only 24 because we wanted to include enough problems to see some eect, but
not too many to overly bias the results. These problems were relatively simple, requiring
the movement of no more than one tape coupled with some status changes, but they were
still more dicult than could be solved in our original system.

3.2 Problem Assumptions
General-purpose planners exhibit dierential capabilities on domains and sometimes even
problems within a domain. Thus, the selection of problem set would seem to be critical
to evaluation. For example, many problems in benchmark sets are variants of logistics
problems; thus, a general-purpose planner that was actually tailored for logistics may appear
to be better overall on current benchmarks. In this section, we will empirically examine
some possible problem set factors that may inuence performance results.

Problem Assumption 1: To What Extent Is Performance of General Purpose
Planners Biased Toward Particular Problems/Domains? Although most planners
are developed as general purpose, the competitions and previous studies have shown that
planners excel on dierent domains/problems. Unfortunately, the community does not yet
have a good understanding of why a planner does well on a particular domain. We studied
the impact of problem selection on performance in two ways.
First, we assessed whether performance might be positively biased toward problems
tested during development. Each developer6 was asked to indicate which domains they used
during development. We then compared each planner's performance on their development
problems (i.e., the development set) to the problems remaining in the complete test set
(rest). We ran 2x2 2 tests comparing number of problems solved versus failed in the
development and test sets. We included only the number solved and failed in the analysis
as timed-out problems made no dierence to the results7.
The results of this analysis are summarized in Table 3; Figure 1 graphically displays the
ratio of successes to failures for the development and other problems. All of the planners
except C performed signicantly better on their development problems. This suggests that
these planners have been tailored (intentionally or not) for particular types of problems and
that they will tend to do better on test sets biased accordingly. For example, one of the
6. We decided against studying some of the planners in this way because the representations for their
development problems were not PDDL.
7. One planner was the exception to this rule; in one case, the planner timed out far more frequently on
non-development problems.

11

Howe & Dahlman

Development
Planner Sol. Fail
A
48
56
B
42
34
C
30
0
G
43
35
H
52
9
I
113
20
J
114
24
K
37
56
L
63
32

Rest
Sol. Fail
2
P
207 1026 51.70 0.001
226 929 51.27 0.001
549 16
0.13 0.722
233 924 49.56 0.001
234 655 91.41 0.001
328 920 187.72 0.001
388 949 157.62 0.001
203 987 27.82 0.001
358 846 52.13 0.001

Table 3: 2 results comparing outcome on development versus other problems.
planners in our set, STAN, was designed with an emphasis on logistics problems (Fox &
Long, 1999).

Figure 1: Histogram of ratios of success/failures for development and other problems for
each of the planners.
The above analysis introduces a variety of biases. The developers tended to give us short
lists that probably were not really representative of what they actually used. The set used
is a moving target, rather than stationary as this suggests. The set of problems included
in experimentation for publication may be dierent still. Consequently, for the second
part, we broadened the question to determine the eect of dierent subsets of problems on
12

A Critical Assessment of Benchmark Comparison in Planning

n
5
10
20
30

0
0
0
0
0

1
1
3
0
0

2
2
0
0
0

3
0
0
0
0

Rank Dominance
4 5 6 7
5 7 10 4
4 10 6 7
1 3 8 7
1 1 9 6

8 9 10 Total Pairs
10 18 21
78
5 23 20
78
11 8 40
78
9 8 44
78

Table 4: Rank dominance counts for 10 samples of domains with domain sizes (n) of ve
through 30.
performance. For each of 10 trials, we randomly selected n domains (and their companion
problems) to form the problem set. We counted how many of these problems could be
solved by each planner and then ranked the relative performance of each planner. Thus,
for each value of n, we obtained 10 planner rankings. We focused on rankings of problems
solved for two reasons: First, each domain includes a dierent number of problems, making
the count of problems variable across each of the trials. Second, relative ranking gets to the
heart of whether one planner might be considered to be an improvement over another.
We tested values of 5, 10, 20 and 30 for n (30 is half of the domains at our disposal).
To give a sense of the variability in size, at n = 5, the most problems solved in a trial
varied from 11 to 64. To assess the changes in rankings across the trials, we computed rank
dominance for all pairs of planners; rank dominance is dened as the number of trials in
which planner x's rank was lower than planner y's (note: ties would count toward neither
planner). The 13 planners in our study resulted in 78 dominance pairings. If the relative
ranking between two planners is stable, then one would expect one to always dominate the
other, i.e., have rank dominance of 10.
Table 4 shows the number of pairs having each value (0-10) of rank dominance for the
four values for n. For a given pair, we used the highest number as the rank dominance for
the pair, e.g., if one always has a lower rank, then the pair's rank dominance is 10 or if
both have ve, then it is ve. Because of ties, the maximum can be less than ve. The
data suggest that even when picking half of the domains, the rankings are not completely
stable: in 56% of the pairings, one always dominates, but 22% have a 0.3 or greater chance
of switching relative ranking. The values degrade as n decreases with only 27% always
dominating for n = 5.

Problem Assumption 2: How Do Syntactic Representation Dierences Aect
Performance? Although it is well known that some planners' performance depends on

representation (Joslin & Pollack, 1994; Srinivasan & Howe, 1995), two recent developments
in planner research suggest that the eect needs to be better understood. First, a common
representation, i.e., PDDL, may bias performance. Some planners rely on a pre-processing
step to convert PDDL to their native representation, a step that usually requires making
arbitrary choices about ordering and coding. Second, an advantage of planners based on
Graphplan is that they are supposed to be less vulnerable to minor changes in representa13

Howe & Dahlman

Planner
A
B
C
D
E
F
G
H
I
J
K
L
M

All None Subset
65 315
30
70 295
45
318 74
18
202 169
39
111 132
167
112 138
160
70 295
45
91 290
29
109 134
167
150 124
136
60 305
45
112 284
14
212 148
50

Table 5: The number of problems for which the planners were able to solve all, none or
only a subset of the permutations.
tion. Although the reasoning for the claim is sound, the exigencies of implementation may
require re-introduction of representation sensitivity.
To evaluate the sensitivity to representation, ten permutations of each problem in the
AIPS2000 set were generated, resulting in 4510 permuted problems. The permutations were
constructed by randomly reordering the preconditions in the operator denitions and the
order of the denitions of the operators within the domain denition.
We limited the number of problems in this study because ten permutations of all problems would be prohibitive. We selected the AIPS2000 problems for attention because this
was the most recently developed benchmark set. Even within that set, not all of the domains
were permuted because some would not result in dierent domains under the transformation we used. For the purposes of this investigation, we limited the set of modications to
permutations of preconditions and operators because these were known to aect some planners and because practical considerations limited the number of permutations that could be
executed. Finally, for expediency, we ran the permutations on a smaller number of faster
platforms because it expedited throughput and computation time was not a factor in this
study.
To analyze the data, we divided the performance on the permutations of the problems
into three groups based on whether the planner was able to solve all of the permutations,
none of the permutations or only a subset of the permutations. If a planner is insensitive to
the minor representational changes, then the subset count should be zero. From the results
in Table 5, we can see that all of the planners were aected by the permutation operation.
The susceptibility to permuting the problem was strongly planner dependent (2 = 1572:16,
P < 0:0001), demonstrating that some planners are more vulnerable than others.
By examining the number in the Subset column, one can assess the degree of susceptibility. All of the planners were sensitive to reorderings, even those that relied on Graphplan
14

A Critical Assessment of Benchmark Comparison in Planning

0
0
165
166
152
145
0
0
138
130
0
13
169

35
8
216
196
199
185
8
46
169
160
8
24
212

0
0
163
139
157
150
0
0
138
130
0
16
149

0
0
2
0
0
0
0
0
0
0
0
0
2

255
268
561
279
384
376
276
285
441
502
240
421
372

8
0
197
180
168
165
0
17
139
130
0
13
180

Pre.
8

0
0
169
164
162
157
0
0
138
130
0
19
168

Pre.
Safety
Strips
Typing

0
0
5
3
1
0
0
0
0
0
0
0
0

9

A
B
C
D
E
F
G
H
I
J
K
L
M

Feature

Axioms
Cond. E.
Dis. Pre.
Equality

Planner

0
0
160
139
149
145
0
0
138
130
0
13
151

Table 6: The number of problems claiming to require each PDDL feature solved by each
planner.

methodology. The most sensitive were E, F, I and J (which included some Graphplan based
planners and in which 40% of the problems had mixed results on the permutations) with C
and L being least sensitive (3-4% were aected).

Problem Assumption 3: Does Performance Depend on PDDL Requirements
Features? The planners were all intended to handle STRIPS problems. Some of the

problems in the test set claim to require features other than STRIPS; one would expect
that some of the planners would not be able to handle those problems. In addition, those
planners that claim to be able to handle a given feature may not do as well as other planners.
Table 6 shows the eects of feature requirements on the ability to solve problems. The data
in this table are based on the features specied with the :requirements list in the PDDL
denition of the domain.
We did not verify that the requirements were accurate or necessary; thus, the problem
may be solvable by ignoring a part of the PDDL syntax that is not understood, or the
problem may have been mislabeled by its designer. This is evident in cases where a planner
that does not support a given feature still appears to be able to solve the corresponding
problem. Some planners, e.g., older versions of STAN, will reject any problem that requires
more than STRIPS without trying to solve it; an ADL problem that only makes use of
STRIPS features would not be attempted.
As guidance on which planner to use when, these results must be viewed with some
skepticism. For example, it would appear based on these results that planner I might be
15

Howe & Dahlman

a good choice for problems with conditional eects as it was able to solve many of these
problems. This would be a mistake, since that planner cannot actually handle these types
of problems. In these cases, the problems claim to require ADL, but in fact, they only make
use of the STRIPS subset.
Clearly, certain problems can only be solved by specic planners. For instance, C and
M are the only planners that are able to handle safety constraints, while based on the data,
only C, D and E appear to handle domain axioms. About half the planners had trouble
with the typed problems. Some of the gaps appear to be due to problems in the translation
to native representation.

3.3 Planners

Publicly available, general-purpose planners tend to be large programs developed over a
period of years and enhanced to include additional features over time. Thus, several versions
are likely to be available, and those versions are likely to have features that can be turned
on/o via parameter settings.
When authors release later versions of their planning systems, the general assumption is
that these newer versions will outperform their predecessors. However, this may not be the
case in practice. For instance, a planner could be better optimized toward a specic class
of problem which then in turn hurts its performance on other problems. Also, advanced
capabilities, even when unused, may incur overhead in the solution of all problems.
So for comparison purposes, should one use the latest version? First, we tested this
question in a study comparing multiple versions of four of the planners. Second, each
planner relies on parameter settings to tune its performance. Some, such as blackbox, have
many parameters. Others have none. Comparisons tend to use the default or published
parameter settings because few people usually understand the eects of the parameters
and tuning can be extremely time consuming. So does this practice undermine a fair
comparison?
Planner Assumption 1: Is the Latest Version the Best? In this study, we compared
performance of multiple versions of four planners (labeled for this section with W, X, Y and
Z, with larger version numbers indicating subsequent versions). We considered two criteria
for improvement: outcome of planning and computation time for solved problems. The
outcome of planning is one of: solved, failed or timed-out. On each criterion, we statistically
analyzed the data for superior performance of one of the versions. The outcome results for
all the planners are summarized in Table 7. As the table shows, rarely does a new version
result in more problems being solved. Only Z improved the number of our test problems
solved in subsequent versions.
To check for whether the dierences in outcome are signicant, we ran 2x3 2 tests with
planner version as independent variable and outcome as dependent. Table 8 summarizes
the results of the 2 analysis. For Z, we compared each version to its successor only. The
dierences are signicant except for Y and the transition from Z 2 to 3 (this was expected
because these two versions were extremely similar).
Another planner performance metric, which we evaluated, was the speed of solution. For
this analysis, we limited the comparison to just those problems that were solved by both
versions of the planner. We then classied each problem by whether the later version solved
16

A Critical Assessment of Benchmark Comparison in Planning

Planner Version Solved Failed Timeout  Solved?
W
1
286
664
533
W
2
255
1082
147
+
X
1
502
973
3
X
2
441
940
103
+
Y
1
387
750
339
Y
2
382
771
329
+
Z
1
240
1043
201
Z
2
276
959
248
*
Z
3
268
963
252
+
Z
4
421
878
184
*
Table 7: Version performance: counts of outcome and change in number solved.
old
new
Planner Version Version 2
P
W
1
2
320.96 .0001
X
1
2
98.84 .0001
Y
1
2
.46
.79
Z
1
2
10.96 .004
Z
2
3
.158 .924
Z
3
4
48.50 .0001
Table 8: 2 results comparing versions of the same planner.
the problem faster, slower, or in the same time as the preceding version. From the results
in Table 9, we see that all of the planners improved in the average speed of solution for
subsequent versions, with the exception of Z (transition from the 1 to 2 versions). However,
Z did increase the number of problems solved between those versions.
Planner Old New Faster Slower Same Total
W
1
2
161
61
30
252
X
1
2
295
126
0
421
Y
1
2
222
82
53
357
Z
1
2
84
121
30
235
Z
2
3
131
84
53
268
Z
3
4
115
92
21
228
Table 9: Improvements in execution speed across versions. The Faster column counts the
number of cases in which the new version solved the problem faster; Slower species
those cases in which the new version took longer to solve a given problem.
17

Howe & Dahlman

Planner Assumption 2: Do Parameter Settings Matter to a Fair Comparison?

In this planner set, only three have obvious, easily manipulable parameters: Blackbox, HSP
and UCPOP. blackbox has an extensive set of parameters that control everything from
how much trace information to print to the sequence of solver applications. HSP's function
can be varied to include (or not) loop detection, change the search heuristic and vary the
number paths to expand. For UCPOP, the user can change the strategies governing node
orderings and aw selection.
We did not run any experiments for this assumption because not all of the planners
have parameters and because it is clear from the literature that the parameters do matter.
Blackbox relies heavily on random restarts and trying alternative SAT solvers. In Kautz
and Selman (1999), the authors of blackbox carefully study aspects of blackbox's design and
demonstrate dierential performance using dierent SAT solvers; they propose hypotheses
for the performance dierences and are working on better models of performance variation.
At the heart of HSP is heuristic search. Thus, its performance varies depending on
the heuristics. Experiments with both HSP and FF (a planner that builds on some ideas
from HSP) have shown the importance of heuristic selection in search space expansion,
computation time and problem scale up (Haslum & Gener, 2000; Homann & Nebel,
2001).
As with HSP, heuristic search is critical to UCPOP's performance. A set of studies have
explored alternative settings to the aw selection heuristics employed by UCPOP (Joslin &
Pollack, 1994; Srinivasan & Howe, 1995; Genevini & Schubert, 1996), producing dramatic
improvements on some domains with some heuristics. As Pollack et al. (1997) conrmed,
a good default strategy could be derived, but its performance was not the best under some
circumstances.
Thus, because parameters can control fundamental aspects of algorithms, such as their
search strategies, the role of parameters in comparisons cannot be easily dismissed.

Planner Assumption 3: Are Time Cut-os Unfair? Planners often do not admit

to failure. Instead, the planner stops when it has used the allotted time and not found
a solution. So setting a time threshold is a requirement of any planner execution. In
a comparison, one might always wonder whether enough time was allotted to be fair {
perhaps the solution was almost found when execution was terminated.
To determine whether our cut-o of 30 minutes was fair, we examined the distribution
of times for declared successes and failures8. Across the planners and the problem set, we
found that the distributions were skewed (approximately log normal with long right tails)
and that the planners were quick to declare success or failure, if they were going to do so.
Table 10 shows the max, mean, median and standard deviation for success and failure times
for each of the planners. The dierences between mean and median indicate the distribution
skew, as do the low standard deviations relative to the observed max times. The max time
shows that on rare occasions the planners might make a decision within 2 minutes of our
cut-o.
8. We separated the two because we usually observed a signicant dierence in the distributions of time to
succeed and time to fail { about half the planners were quick to succeed and slow to fail, the other half
reversed the relationship.

18

A Critical Assessment of Benchmark Comparison in Planning

Planner
A
B
C
D
E
F
G
H
I
J
K
L
M

Successes
Max Mean Median
667.9 34.0
1.3
1608.5 38.5
0.5
1455.4 89.9
1.6
481.0 17.8
1.1
1076 26.2
0.1
1282.4 44.4
0.1
1456.2 44.6
0.7
657.7 29.58
1.4
1713.8 115.4
0.2
1596.5 43.6
4.3
1110.5 31.0
0.32
1611.9 54.4
2.0
1675.3 53.4
1.45

Sd
98.7
182.8
244.6
77.4
126.8
126.8
188.5
80.6
303.1
127.4
121.8
180.9
196.5

Failures
Max Mean Median
1116.4 44.9
4.9
1692.0 45.6
17.8
1.4
0.4
0.13
713.6 26.3
1.1
1622.8 286.9
260.6
1188.4 22.3
0.2
1196.5 43.8
16.7
1080.6 93.8
1.4
50.6
5.1
4.9
1796 11.0
11.0
1298.8 27.7
12.1
847.1 124.1
68.4
1.6
0.9
0.8

Sd
128.8
96.8
0.4
122.6
189.1
104.8
78.5
162.1
6.3
57.9
65.2
164.8
0.4

Table 10: Max, mean, median and standard deviations (Sd) for the computation times to
success and failure for each planner.

What this table does not show, but the observed distributions do show, is that very
few values are greater than half of the time until the cut-o. Figures 2 and 3 display
the distributions for planner F, which had means in the middle of the set of planners and
quite typical distributions. Consequently, at least for these problems, any cut-o above 15
minutes (900 seconds) would not signicantly change the results.

300

200

100

0
0

104 208 312 416 520 624 728 832 936 1040 1144 1248
success.time

Figure 2: Histogram of times, in seconds, for planner F to succeed.
19

Howe & Dahlman

600

400

200

0
0

96

192 288 384 480 576 672 768 864 960 1056 1152
fail.time

Figure 3: Histogram of times, in seconds, for planner F to fail.

3.4 Performance Metrics

Most comparisons emphasize the number of problems solved and the CPU time to completion as metrics. Often, the problems are organized in increasing diculty to show scale-up.
Comparing based on these metrics leaves a lot open to interpretation. For example, some
planners are designed to nd the optimal plan, as measured by number of steps in either
a parallel or sequential plan. Consequently, these planners may require more computation.
Thus, by ignoring plan quality, these planners may be unfairly judged. We also hypothesize
that the hardware and software platform for the tests can vary the results. If a planner is
developed for a machine with 1GB of memory, then likely its performance will degrade with
less. A key issue is whether the eect is more or less uniform across the set of planners.
In this section, we examine these two issues: execution platform and eect of plan
quality.

Metric Assumption 1: Does Performance Vary between Planners When Run
on Dierent Hardware Platforms? Often when a planner is run at a competition or

in someone else's lab, the hardware and software platforms dier from the platform used
during development. Clearly, slowing down the processor speed should slow down planning,
requiring higher cut-os. Reduction in memory may well change the set of problems that
can be solved or increase the processing time due to increased swapping. Changing the
hardware conguration may change the way memory is cached and organized, favoring
some planners' internal representations over others. Changing compilers could also aect
the amount and type of optimizations in the code. The exact eects are probably unknown.
The assumption is that such changes aect all planners more or less equally.
To test this, we ran the planners on a less powerful, lower memory machine and compared
the results on the two platforms: the base Sun Ultrasparc 10/440 with 256mb of memory
and Ultrasparc 1/170 with 128mb of memory. The operating system and compilers were
the same versions for both machines. The same problems were run on both platforms. We
followed much the same methodology as in the comparison of planner versions: comparing
on both number of problems solved and time to solution. Table 11 shows the results as
measured by problems solved, failed or timed-out for each planner on the two platforms.
20

A Critical Assessment of Benchmark Comparison in Planning

Planner Platform Solved Failed Timed-Out 2
p % Reduction
A
Ultra 1
94
383
27
Ultra 10
95
389
20 1.09 .58
1
B
Ultra 1
121
346
37
Ultra 10
121
353
30 0.80 .67
0
C
Ultra 1
354
7
143
Ultra 10
367
7
130 0.85 .65
4
D
Ultra 1
218
59
227
Ultra 10
217
59
228 0.01 .998
-.4
E
Ultra 1
280
145
79
Ultra 10
284
150
70 0.66 .72
1
F
Ultra 1
277
155
72
Ultra 10
284
154
66 0.35 .84
2
G
Ultra 1
120
347
37
Ultra 10
121
352
31 0.57 .75
1
H
Ultra 1
116
350
38
Ultra 10
122
338
44 0.80 .67
7
I
Ultra 1
265
201
38
Ultra 10
274
201
29 1.36 .51
3
J
Ultra 1
280
220
4
Ultra 10
285
217
2 0.73 .69
2
K
Ultra 1
108
370
26
Ultra 10
108
368
28 0.08 .96
0
L
Ultra 1
149
339
16
Ultra 10
150
341
13 0.32 .85
1
M
Ultra 1
250
65
189
Ultra 10
258
66
180 0.35 .84
3
Table 11: Number of problems solved, failed and timed-out for each planner on the two
hardware platforms. Last column is the percentage reduction in the number
solved from the faster to slower platforms.

21

Howe & Dahlman

Planner
A
B
C
D
E
F
G
H
I
J
K
L
M

Faster
# Mean 
92
5.18
120
4.02
294
31.89
177
11.02
275
2.68
271
14.86
117
5.02
115
6.86
261
25.73
280
42.24
107
15.26
148
16.81
194
32.72

Slower
Sd  # Mean 
30.76 1
10.01 0
101.71 60
0.29
82.82 39
0.23
12.27 1
72.44 0
17.17 1
25.24 0
119.97 0
138.16 0
75.42 0
98.54 1
139.73 56
0.30

Sd 
0.14
0.14

0.18

Same Total
1
1
0
1
4
6
2
1
4
0
1
0
0

94
121
354
217
280
277
120
116
265
280
108
149
250

Table 12: Improvements in execution speed moving from slower to faster platform. Counts
only problems that were solved on both platforms. For faster and slower, the
mean and standard deviation (Sd) of dierence is also provided.
As before, we also looked at change in time to solution. Table 12 shows how the time
to solution changes for each planner. Not surprisingly, faster processor and more memory
nearly always lead to better performance. Somewhat surprisingly, the dierence is far less
than the doubling that might be expected; the mean dierences are much less than the
mean times on the faster processor (see Table 10 for the mean solution times).
Also, the eect seems to vary between the planners. Based on the counts, the Lisp-based
planners appear to be less susceptible to this trend (the only ones that sometimes were faster
on the slower platform). However, the advantages are very small, aecting primarily the
smaller problems. We think that this eect is due to the need to load in a Lisp image
at startup from a centralized server; thus, computation time for small problems will be
dominated by any network delay. Older versions of planners appear to be less sensitive to
the switch in platform.
In this study, the platforms make little dierence to the results, despite a more than
doubling of processor speed and doubling of memory. However, the two platforms are
underpowered when compared to the development platforms for some of the planners. We
chose these platforms because they diered in only a few characteristics (processor speed
and memory amount) and because we had access to 20 identically congured machines. To
really observe a dierence, 1GB9 of memory or more may be needed.
Recent trends in planning technology have exploited cheap memory: translations to
propositional representations, compilation of the problems and built-in caching and memory
management techniques. Thus, some planners are designed to trade-o memory for time;
9. We propose this gure because it is the amount requested by some of the participants in the AIPS 2000
planning competition.

22

A Critical Assessment of Benchmark Comparison in Planning

these planners will understandably be aected by memory limitations for some problems.
Given the results of this study, we considered performing a more careful study of memory
by articially limiting memory for the planners but did not do so because we did not have
access to enough suciently large machines to likely make a dierence and because we could
not devise a scheme for fairly doing so across all the planners (which are implemented in
dierent languages and require dierent software run-time environments).
Another important factor may be memory architecture/management. Some planners
include their own memory managers, which map better to some hardware platforms than
to others (e.g., HSP uses a linear organization that appears to t well with Intel's memory
architecture).

Metric Assumption 2: Do the Number of Plan Steps Vary? Several researchers

have examined the issue of measuring plan quality and directing planning based on it, e.g.,
(Perez, 1995; Estlin & Mooney, 1997; Rabideau, Englehardt, & Chien, 2000). The number
of steps in a plan is a rather weak measure of plan quality, but so far, it is the only one
that has been widely used for primitive-action planning.
We expect that some planners sacrice quality (as measured by plan length) for speed.
Thus, ignoring even this measure of plan quality may be unfair to some planners. To
check whether this appears to be a factor in our problem set, we counted the plan length
in the plans returned in output and compared the lengths across the planners. Because
not all of the planners construct parallel plans, we adopted the most general denition:
sequential plan length. We then compared the plan lengths returned by each planner on
every successfully solved problem.
We found that 11% of the problems were solved by only one planner (not necessarily the
same one). The planners found equal length solutions for 62% of those that remained (493
problems). We calculated the standard deviation (SD) of plan length for solutions to each
problem and then analyzed the SDs. We found that the minimum observed SD was 0.30,
the maximum was 63.30, the mean was 2.43 and the standard deviation was 5.45. Thirteen
cases showed SDs higher than 20. Obviously, these cases involved fairly long plans (up to
165 steps); the cases were for problems from the logistics and gripper domains.
To check whether some planners favored minimal lengths, we counted the number of
cases in which each planner found the shortest length plan (ties were attributed to all
planners) when there was some variance in plan length. Table 13 lists the results. Most
planners nd the shortest length plans on about one third of these problems. Planner F
was designed to optimize plan length, which shows in the results. With one exception, the
older planners rarely nd the shortest plans.

4. Interpretation of Results and Recommendations
The previous section presented our summarization and analysis of the planner runs. In
this section, we reect on what those results mean for empirical comparison of planners; we
summarize the results and recommend some partial solutions. It is not possible to guarantee
fairness and we propose no magic formula for performing evaluations, but the state of the
practice in general can certainly be improved. We propose three general recommendations
and 12 recommendations targeted to specic assumptions.
23

Howe & Dahlman

Planner Count
A
178
B
169
C
0
D
161
E
5
F
319
G
171
H
176
I
222
J
0
K
159
L
151
M
283
Table 13: Number of plans on which each planner found the shortest plan. The data only
include problems for which dierent length plans were found.
Many of the targeted recommendations amount to requesting problem and planner developers to be more precise about the requirements for and expectations of their contributions.
Because the planners are extremely complex and time consuming to build, the documentation may be inadequate to determine how a subsequent version diers from the previous or
under what conditions (e.g., parameter settings, problem types) the planner can be fairly
compared. With the current positive trend in making planners available, it behooves the
developer to include such information in the distribution of the system.
The most sweeping recommendation is to shift the research focus away from developing
the best general-purpose planner. Even in the competitions, some of the planners identied
as superior have been ones designed for specic classes of problems, e.g., FF and IPP. The
competitions have done a great job of exciting interest and encouraging the development
and public availability of planners that incorporate the same representation.
However, to advance the research, the most informative comparative evaluations are
those designed for a specic purpose { to test some hypothesis or prediction about the
performance of a planner10. An experimental hypothesis focuses the analysis and often
leads naturally to justied design decisions about the experiment itself. For example, Homann and Nebel, the authors of the Fast-Forward (FF) system, state in the introduction to
their JAIR paper that FF's development was motivated by a specic set of the benchmark
domains; because the system is heuristic, they designed the heuristics to t the expectations/needs of those domains (Homann & Nebel, 2001). Additionally, in part of their
evaluation, they compare to a specic system on which their own system had commonalities
and point out the various advantages or disadvantages of their design decisions on specic
10. Paul Cohen has advocated such an experimental methodology for all of articial intelligence based on
hypotheses, predictions and models in considerable detail; see Cohen (1991, 1995).

24

A Critical Assessment of Benchmark Comparison in Planning

problems. Follow-up work or researchers comparing their own systems to FF now have a
well-dened starting point for any comparison.

Recommendation 1: Experiments should be driven by hypotheses. Re-

searchers should precisely articulate in advance of the experiments their expectations about how their new planner or augmentations to an existing planner add
to the state of the art. These expectations should in turn justify the selection
of problems, other planners and metrics that form the core of the comparative
evaluation.
A general issue is whether the results are accurate. We reported the results as they are
output by the planners. If a planner stated in its output that it had been successful, we
took it at face value. However, by examining some of the output, we determined that some
claims of successful solution were erroneous { the proposed solution would not work. The
only way to ensure that the output is correct is with a solution checker. Drew McDermott
used a solution checker in the AIPS98 competition. However, the planners do not all
provide output in a compatible format with his checker. Thus, another concern with any
comparative evaluation is that the output needs to be cross-checked. Because we are not
declaring a winner (i.e., that some planner exhibited superior performance), we do not think
that the lack of a solution checker casts serious doubt on our results. For the most part, we
have only been concerned with factors that cause the observed success rates to change.

Recommendation 2: Just as input has been standardized with PDDL, output
should be standardized, at least in the format of returned plans.

Another general issue is whether the benchmark sets are representative of the space of
interesting planning problems. We did not test this directly (in fact, we are not sure how
one could do so), but the clustering of results and observations by others in the planning
community suggest that the set is biased toward logistics problems. Additionally, many of
the problems are getting dated and no longer distinguish performance. Some researchers
have begun to more formally analyze the problem set, either in service of building improved
planners (e.g., Homann & Nebel, 2001) or to better understand planning problems. For
example, in the related area of scheduling, our group has identied distinctive patterns in
the topology of search spaces for dierent types of classical scheduling problems and has
related the topology to performance of algorithms (Watson, Beck, Barbulescu, Whitley, &
Howe, 2001). Within planning, Homann has examined the topology of local search spaces
in some of the small problems in the benchmark collection and found a simple structure
with respect to some well-known relaxations (Homann, 2001). Additionally, he has worked
out a partial taxonomy, based on three characteristics, for the analyzed domains. Helmert
has analyzed the computational complexity of a subclass of the benchmarks, transportation
problems, and has identied key features that aect the diculty of such problems (Helmert,
2001).

Recommendation 3: The benchmark problem sets should themselves be eval-

uated and over-hauled. Problems that can be easily solved should be removed.
Researchers should study the benchmark problems/domains to classify them
25

Howe & Dahlman

into problem types and key characteristics. Developers should contribute application problems and realistic versions of them to the evolving set.
The remainder of this section describes other recommendations for improving the state
of the art in planner comparisons.

Problem Assumption 1: Are General Purpose Planners Biased Toward Particular Problems/Domains? The set of problems on which a planner was developed
can have a strong eect on the performance of the planner. This can be either the eect
of unintentional over-specialization or the result of a concerted eort on the part of the
developers to optimize their system to solve a specic problem. With one exception, every
planner fared better on the tailored subset of problems (training set). Consequently, we
must conclude that the choice of a subset of problems may well aect the outcome of any
comparison.
A fair planner comparison must account for likely biases in the problem set. Good
performance on a certain class of problems does not imply good performance in general.
A large performance dierential for planners with a targeted problem domain (i.e., do well
on their focus problems and poorly on others) may well indicate that the developers have
succeeded in optimizing the performance of their planner.
Recommendation 4: Problem sets should be constructed to highlight the
designers' expectations about superior performance for their planner, and they
should be specic about this selection criteria.
On the other hand, if the goal is to demonstrate across the board performance, then
our results at randomly selecting domains suggests that biases can be mitigated.
Recommendation 5: If highlighting performance on \general" problems is
the goal, then the problem set should be selected randomly from the benchmark
domains.

Problem Assumption 2: How Do Syntactic Representation Dierences Aect
Performance? Many studies, including this, have shown that planners may be sensitive

to representational features. Just because representations can be translated automatically
does not mean that performance will be unaected. Just because an algorithm should
theoretically be insensitive to a factor does not mean that in practice it is. All of the
planners showed some sensitivity to permuted problems, and the degree of sensitivity varied.
This outcome suggests that translators and even minor variations on problem descriptions
impact outcome and should be used with care, especially when the sensitivity is not the
focus of the study and some other planner is more vulnerable to the eect.
Recommendation 6: Representation translators should be avoided by using
native versions of problems and testing multiple versions of problems if necessary.
With many planner developers participating in the AIPS competitions, this should become
less of an issue.
More importantly, researchers should be explicitly testing the eect of alternative phrasings of planning problems to determine the sensitivity of performance and to separate the
eects of advice/tuning from the essence of the problem.
26

A Critical Assessment of Benchmark Comparison in Planning

Recommendation 7: Studies should consider the role of minor syntactic vari-

ations in performance and include permuted problems (i.e., initial conditions,
goals, preconditions and actions) in their problem sets because they can demonstrate robustness, provide an opportunity for learning and protect developers
from accidentally over-tting their algorithm to the set of test problems.

Problem Assumption 3: Does Performance Depend on PDDL Requirements
Features? The planners did not perform quite as advertised or expected given some

problem features. This discrepancy could have many possible causes: problems incorrectly
specied, planners with less sensitivity than thought, solutions not being correct, etc. For
example, many of the problems in the benchmark set were not designed for the competitions
or even intended to be widely used and so may not have been specied carefully enough.

Recommendation 8: When problems are contributed to the benchmark set,
developers should verify that the requirements stated in the description of each
problem correctly reect the subset of features needed. Planner evaluators
should then use only those problems that match a planner's capabilities.

Depending on the cause, the results can be skewed, e.g., a planner may be unfairly
maligned for being unable to solve a problem that it was specically designed not to solve.
The above recommendation addresses gaps in the specication of the problem set, but some
mismatches between the capabilities speciable in PDDL and those that planners possess
remain.

Recommendation 9: Planner developers should develop a vocabulary for
their planner's capabilities, as in the PDDL ags, and specify the expected
capabilities in the planner's distribution.

Planner Assumption 1: Is the Latest Version the Best? Our results suggest that

new versions run faster, but often do not solve more problems. Thus, the newest version may
not represent the \best" (depending on your denition) performance for the class of planner.
Some competitions in other elds, e.g., the automatic theorem proving community, require
the previous year's best performer to compete as well; this has the advantage of establishing
a baseline of performance as well as allowing a comparison to how the focus may shift over
time.

Recommendation 10: If the primary evaluation metric is speed, then a newer

version may be the best competition. If it is number of problems solved or if one
wishes to establish what progress has been made, then it may be worth running
against an older version as well. If recommendation 9 has been followed, then
evaluators should select a version based on this guidance.

Planner Assumption 2: What Are the Eect of Parameter Settings? Perfor-

mance of some planners does vary with the parameter settings. Unfortunately, it often is
dicult to gure out how to set the parameters properly, and changing settings makes it
dicult to compare results across experiments. Generally, this is not an issue because the
27

Howe & Dahlman

developers and other users tend to rely on the default parameter settings. Unfortunately,
sometimes the developers exploit alternative settings in their own experiments, complicating
later comparison.

Recommendation 11: If a planner includes parameters, the developer should
guide users in their settings. If they do not, then the default settings should be
used by both the developers and others in experiments to facilitate comparison.

Planner Assumption 3: Are Time Cut-os Unfair? We found little benet from
increasing time cut-os beyond 15 minutes for our problems.

Recommendation 12: If total computation time is a bottleneck, then run the

problems in separate batches, incrementally increasing the time cut-o between
runs and including only unresolved problems in subsequent runs. When no
additional problems are solved in a run, stop.

Metric Assumption 1: Do Alternative Platforms Lead to Dierent Performance? In our experiments, performance did not vary as much as we expected. This
result suggests that researchers in general are not developing for specic hardware/software
congurations, but recent trends suggest otherwise, at least with regards to memory. Again,
because these systems are research prototypes, it behooves the developer to be clear about
his/her expectations and anyone subsequently using the system to accommodate those requests in their studies.

Recommendation 13: As with other factors in planner design, researchers

must clearly state the hardware/software requirements for their planners, if the
design is based on platform assumptions. Additionally, a careful study of memory versus time trade-os should be undertaken, given the recent trends in memory exploitation.

Metric Assumption 2: Do the Number of Plan Steps Vary? They certainly can.

If one neglects quality measures, then some planners are being penalized in eorts to declare
a best planner.

Recommendation 14: To expedite generalizing across studies, reports should
describe performance in terms of what was solved (how many of what types),
how much time was required and what were the quality of the solutions. Tradeos should be reported, when possible, e.g., 12% increase in computation time
for 30% decrease in plan length. Additionally, if the design goal was to nd an
optimal solution, compare to other planners with that as their design goal.

Good metrics of plan quality are sorely needed. The latest specication of the PDDL
specication supports the denition of problem-specic metrics (Fox & Long, 2002); these
metrics indicate whether total-time (a new concept supported by specication of action
durations) or specied functions should be minimized or maximized. This addition is an
excellent start, but general metrics other than just plan-length and total-time are also
needed to expedite comparisons across problems.
28

A Critical Assessment of Benchmark Comparison in Planning

Recommendation 15: Developing good metrics is a valuable research contri-

bution. Researchers should consider it a worthwhile project, conference organizers and reviewers should encourage papers on the topic, and planner developers
should implement their planners to be responsive to new quality metrics (i.e.,
support tunable heuristics or evaluation criteria).

5. Conclusions

Fair evaluation and comparison of planners is hard. Many apparently benign factors exert
signicant eects on performance. Superior performance of one planner over another on
a problem that neither was intentionally designed to solve may be explained by minor
representational features. However, comparative analysis on general problems is of practical
importance as it is not practical to create a specialized solution to every problem.
We have analyzed the eects of experiment design decisions in empirical comparison of
planners and made some recommendations for ameliorating the eects of these decisions.
Most of the recommendations are common sense suggestions for improving the current
methodology.
To expand beyond the current methodology will require at least two substantive changes.
First, the eld needs to question whether we should be trying to show performance on
planning problems in general. A shift from general comparisons to focused comparisons (on
problem class or mechanism or on hypothesis testing) could produce signicant advances in
our understanding of planning.
Second, the benchmark problem sets require attention. Many of the problems should be
discarded because they are too simple to show much. The domains are far removed from
real applications. It may be time to revisit testbeds. For example, several researchers in
robotics have constructed an interactive testbed for comparing motion planning algorithms
(Piccinocchi, Ceccarelli, Piloni, & Bicchi, 1997). The testbed consists of a user interface for
dening new problems, a collection of well-known algorithms and a simulator for testing
algorithms on specic problems. Thus, the user can design his/her own problems and compare performance of various algorithms (including their own) on them via a web site. Such a
testbed aords several advantages over the current paradigm of static benchmark problems
and developer conducted comparisons, in particular, replicability and extendability of the
test set. Alternatively, challenging problem sets can be developed by modifying deployed
applications (Wilkins & desJardins, 2001; Engelhardt, Chien, Barrett, Willis, & Wilklow,
2001).
In recent years, the planning community has signicantly improved the size of planning
problems that can be solved in reasonable time and has advanced the state of the art in
empirical comparison of our systems. To interpret the results of empirical comparisons
and understand how they should motivate further development in planning, the community
needs to understand the eects of the empirical methodology itself. The purpose of this
paper is to further that understanding and initiate a dialogue about the methodology that
should be used.

29

Howe & Dahlman

Acknowledgments
This research was partially supported by a Career award from the National Science
Foundation IRI-9624058 and by a grant from Air Force Oce of Scientic Research F4962000-1-0144. The U.S. Government is authorized to reproduce and distribute reprints for
Governmental purposes notwithstanding any copyright notation thereon. We are most
grateful to the reviewers for the careful reading of and well-considered comments on the
submitted version; we hope we have done justice to your suggestions.

References

Bacchus,
F.
(2000).
AIPS-2000
planning
competition.
http://www.cs.toronto.edu/aips2000/SelfContainedAIPS-2000.ppt.
Barrett, A., Golden, K., Penberthy, S., & Weld, D. (1993). UCPOP User's Manual. Dept.
of Computer Science and Engineering, University of Washington, Seattle, WA. TR
93-09-06.
Blum, A. L., & Furst, M. L. (1997). Fast planning through planning graph analysis. Articial
Intelligence Journal, 90 (1-2), 225{279.
Bonet, B., & Gener, H. (1999). Planning as heuristic search: New results. In Proceedings
of the Fifth European Conference on Planning (ECP-99) Durham, UK.
Chien, S., Kambhampati, S., & Knoblock, C. A. (Eds.)(2000). Proceedings of the Fifth
International Conference on Articial Intelligence Planning and Scheduling (AIPS
2000). AAAI Press, Breckenridge, CO.
Cohen, P. R. (1991). A survey of the eighth national conference on articial intelligence:
Pulling together or pulling apart? AI Magazine, 12 (1), 16{41.
Cohen, P. R. (1995). Empirical Methods for Articial Intelligence. MIT Press.
Drummond, M. E., Kaelbling, L. P., & Rosenschein, S. J. (1990). Collected notes from the
benchmarks and metrics workshop. Articial intelligence branch FIA-91-06, NASA
Ames Research Center.
Engelhardt, B., Chien, S., Barrett, T., Willis, J., & Wilklow, C. (2001). The data-chaser
and citizen explorer benchmark problem sets. In Proceedings of the Sixth European
Conference on Planning (ECP 01) Toledo, Spain.
Estlin, T. A., & Mooney, R. J. (1997). Learning to improve both ecicency and quality of
planning. In Proceedings of the Fifteenth International Joint Conference on Articial
Intelligence, pp. 1227{1233, Nagoya, Japan.
Fox, M., & Long, D. (1999). The ecient implementation of the plan-graph in STAN.
Journal of Articial Intelligence Research, 10, 87{115.
Fox, M., & Long, D. (2002). PDDL2.1: An extension to PDDL for expressing temporal
planning domains. Available at http://www.dur.ac.uk/d.p.long/pddl2.ps.gz.
30

A Critical Assessment of Benchmark Comparison in Planning

Genevini, A., & Schubert, L. (1996). Accelerating partial-order planners: Some techniques
for eective search control and pruning. Journal of Articial Intelligence Research, 5,
95{137.
Hanks, S., Nguyen, D., & Thomas, C. (1993). A beginner's guide to the truckworld simulator. Dept. of Computer Science and Engineering UW-CSE-TR 93-06-09, University
of Washington.
Hanks, S., Pollack, M. E., & Cohen, P. R. (1994). Benchmarks, test beds, controlled
experimentation and the design of agent architectures. AI Magazine, 17{42.
Haslum, P., & Gener, H. (2000). Admissible heuristics for optimal planning. In Proceedings of the Fifth International Conference on Articial Intelligence Planning and
Scheduling (AIPS 2000), pp. 140{149, Breckenridge, CO. AAAI Press.
Helmert, M. (2001). On the complexity of planning in transportation domains. In 6th
European Conference on Planning (ECP'01), Lecture Notes in Articial Intelligence,
New York, Springer-Verlag.
Homann, J. (2001). Local search topology in planning benchmarks: An empirical analysis.
In Proceedings of the 17th International Joint Conference on Articial Intelligence
Seattle, WA, USA.
Homann, J., & Nebel, B. (2001). The FF planning system: Fast plan generation through
heuristic search. Journal of Articial Intelligence Research, 14, 253{302.
Howe, A. E., Dahlman, E., Hansen, C., Scheetz, M., & von Mayrhauser, A. (1999). Exploiting competitive planner performance. In Proceedings of the Fifth European Conference
on Planning, Durham, UK.
Howe, A. E., von Mayrhauser, A., & Mraz, R. T. (1997). Test case generation as an AI
planning problem. Automated Software Engineering, 4 (1), 77{106.
Joslin, D., & Pollack, M. (1994). Least-cost aw repair: A plan renement strategy for
partial-order planning. In Proceedings of the Twelfth National Conference on Articial
Intelligence, pp. 1004{1009, Seattle, WA.
Kautz, H., & Selman, B. (1998). BLACKBOX: A new approach to the application of
theorem proving to problem solving. In Working notes of the AIPS98 Workshop on
Planning as Combinatorial Search, Pittsburgh, PA.
Kautz,
H.
blackbox:
a SAT technology planning system.
http://www.cs.washington.edu/homes/kautz/blackbox/index.html.
Kautz, H., & Selman, B. (1999). Unifying SAT-based and graph-based planning. In Proceedings of the Sixteenth International Joint Conference on Articial Intelligence, Stockholm, Sweden.
Koehler, J. (1999). Handling of conditional eects and negative goals in IPP. Tech. rep.
128, Institute for Computer Science, Albert Ludwigs University, Freiburg, Germany.
31

Howe & Dahlman

Koehler, J., Nebel, B., Homann, J., & Dimopoulos, Y. (1997). Extending planning graphs
to an ADL subset. In Proceedings of the Fourth European Conference in Planning.
McDermott, D., Ghallab, M., Howe, A., Knoblock, C., Ram, A., Veloso, M., Weld, D., &
Wilkins, D. (1998). The Planning Domain Denition Language.
McDermott, D. (2000). The 1998 AI planning systems competition. AI Magazine, 21 (2),
35{56.
Penberthy, J. S., & Weld, D. S. (1992). UCPOP: a sound, complete, partial order planner
for adl. In Proceedings of the Third International Conference on Knowledge Representation and Reasoning, pp. 103{114.
Perez, M. A. (1995). Learning Search Control Knowledge to Improve Plan Quality. Ph.D.
thesis, Carnegie-Mellon University.
Piccinocchi, S., Ceccarelli, M., Piloni, F., & Bicchi, A. (1997). Interactive benchmark for
planning algorithms on the web. In Proceedings of IEEE International Conference on
Robotics and Automation.
Pollack, M. E., & Ringuette, M. (1990). Introducing the Tileworld: Experimentally evaluating agent architectures. In Proceedings of the Eight National Conference on Articial
Intelligence, pp. 183{189, Boston, MA.
Pollack, M., Joslin, D., & Paolucci, M. (1997). Flaw selection strategies for partial-order
planning. Journal of Articial Intelligence Research, 6, 223{262.
Rabideau, G., Englehardt, B., & Chien, S. (2000). Using generic prferences to incrementally
improve plan quality. In Proceedings of the Fifth International Conference on Articial
Intelligence Planning and Scheduling (AIPS 2000), Breckenridge, CO.
Slaney, J., & Thiebaux, S. (2001). Blocks world revisited. Articial Intelligence Journal,
125 (1-2), 119{153.
Srinivasan, R., & Howe, A. E. (1995). Comparison of methods for improving search eciency
in a partial-order planner. In Proceedings of the 14th International Joint Conference
on Articial Intelligence, pp. 1620{1626, Montreal, Canada.
Sussman, G. A. (1973). A computational model of skill acquisition. Tech. rep. Memo no.
AI-TR-297, MIT AI Lab.
The Prodigy Research Group (1992). PRODIGY 4.0; the manual and tutorial. School of
Computer Science 92-150, Carnegie Mellon University.
Watson, J., Barbulescu, L., Howe, A., & Whitley, L. D. (1999). Algorithm performance and
problem structure for ow-shop scheduling. In Proceedings of the Sixteenth National
Conference on Articial Intelligence (AAAI-99), Orlando, FL.
Watson, J., Beck, J., Barbulescu, L., Whitley, L. D., & Howe, A. (2001). Toward a descriptive model of local search cost in job-shop scheduling. In Proceedings of Sixth
European Conference on Planning (ECP'01), Toledo, Spain.
32

A Critical Assessment of Benchmark Comparison in Planning

Weld, D., Anderson, C., & Smith, D. (1998). Extending graphplan to handle uncertainty
and sensing actions. In Proceedings of the Fifteenth National Conference on Articial
Intelligence Madison, WI.
Weld, D. S. (1999). Recent advances in AI planning. AI Magazine, 20 (2), 93{122.
Wilkins, D. E., & desJardins, M. (2001). A call for knowledge-based planning. AI Magazine,
22 (1), 99{115.

33

Journal of Artificial Intelligence Research 17 (2002) 289-308

Submitted 6/02; published 10/02

A Unified Model of Structural Organization in
Language and Music
Rens Bod

RENS@ILLC.UVA .NL

Institute for Logic, Language and Computation
University of Amsterdam, Nieuwe Achtergracht 166
1018 WV Amsterdam, THE NETHERLANDS, and
School of Computing, University of Leeds
LS2 9JT Leeds, UK

Abstract
Is there a general model that can predict the perceived phrase structure in language and
music? While it is usually assumed that humans have separate faculties for language and
music, this work focuses on the commonalities rather than on the differences between these
modalities, aiming at finding a deeper "faculty". Our key idea is that the perceptual system
strives for the simplest structure (the "simplicity principle"), but in doing so it is biased by the
likelihood of previous structures (the "likelihood principle"). We present a series of dataoriented parsing (DOP) models that combine these two principles and that are tested on the
Penn Treebank and the Essen Folksong Collection. Our experiments show that (1) a
combination of the two principles outperforms the use of either of them, and (2) exactly the
same model with the same parameter setting achieves maximum accuracy for both language
and music. We argue that our results suggest an interesting parallel between linguistic and
musical structuring.

1. Introduction: The Problem of Structural Organization
It is widely accepted that the human cognitive system tends to organize perceptual information
into hierarchical descriptions that can be conveniently represented by tree structures. Tree
structures have been used to describe linguistic perception (e.g. Wundt, 1901; Chomsky,
1965), musical perception (e.g. Longuet-Higgins, 1976; Lerdahl & Jackendoff, 1983) and
visual perception (e.g. Palmer, 1977; Marr, 1982). Yet, little attention has been paid to the
commonalities between these different forms of perception and to the question whether there
exists a general, underlying mechanism that governs all perceptual organization. This paper
studies exactly that question: acknowledging the differences between the perceptual
modalities, is there a general model that can predict the perceived tree structure for sensory
input? In studying this question, we will use an empirical methodology: any model that we
might hypothesize will be tested against manually analyzed benchmarks such as the
linguistically annotated Penn Treebank (Marcus et al. 1993) and the musically annotated
Essen Folksong Collection (Schaffrath, 1995). While we will argue for a general model of
structural organization in language, music and vision, we will carry out experiments only with
linguistic and musical benchmarks, since no benchmark of visual tree structures is currently
available, to the best of our knowledge.
Figure 1 gives three simple examples of linguistic, musical and visual information with their
corresponding tree structures printed below (these examples are resp. taken from Martin et al.
1987, Lerdahl & Jackendoff, 1983, and Dastani, 1998).

©2002 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

BOD

List the sales of products in 1973
S
NP
NP
NP
V

DT

PP
N

P

PP
N

P

N

List the sales of products in 1973

Figure 1: Examples of linguistic, musical and visual input with their tree structures
Thus, a tree structure describes how parts of the input combine into constituents and how
these constituents combine into a representation for the whole input. Note that the linguistic
tree structure is labeled with syntactic categories, whereas the musical and visual tree
structures are unlabeled. This is because in language there are syntactic constraints on how
words can be combined into larger constituents (e.g. in English a determiner can be combined
with a noun only if it precedes that noun, which is expressed by the rule NP → DT N), while
in music (and to a lesser extent in vision) there are no such restrictions: in principle any note
may be combined with any other note.
Apart from these differences, there is also a fundamental commonality: the perceptual input
undergoes a process of hierarchical structuring which is not found in the input itself. The main
problem is thus: how can we derive the perceived tree structure for a given input? That this
problem is not trivial may be illustrated by the fact that the inputs above can also be assigned
the following, alternative tree structures:
S

NP
PP

NP
V

DT

N

P

PP
N

P

N

List the sales of products in 1973

Figure 2: Alternative tree structures for the inputs in Figure 1
These alternative structures are possible in that they can be perceived. The linguistic tree
structure in Figure 1 corresponds to a meaning which is different from the tree in Figure 2.
The two musical tree structures correspond to different groupings into motifs. And the two
visual structures correspond to different visual Gestalts. But while the alternative tree
structures are all possible, they are not plausible: they do not correspond to the structures that
are actually perceived by the human cognitive system.
The phenomenon that the same input may be assigned different structural organizations is
known as the ambiguity problem. This problem is one of the hardest problems in modeling
human perception. Even in language, where a phrase-structure grammar may specify which
words can be combined into constituents, the ambiguity problem is notoriously hard (cf.
Manning & Schütze, 1999). Charniak (1997: 37) argues that many sentences from the Wall
Street Journal have more than one million different parse trees. The ambiguity problem for
290

A UNIFIED MODEL OF STRUCTURAL ORGANIZATION IN LANGUAGE AND MUSIC

musical input is even harder, since there are virtually no constraints on how notes may be
combined into constituents. Talking about rhythm perception in music, Longuet-Higgins and
Lee (1987) note that "Any given sequence of note values is in principle infinitely ambiguous,
but this ambiguity is seldom apparent to the listener.".
In the following Section, we will discuss two principles that have traditionally been proposed
to solve ambiguity: the likelihood principle and the simplicity principle. In Section 3, we will
argue for a new integration of the two principles within the data-oriented parsing framework.
Our hypothesis is that the human cognitive system strives for the simplest structure generated
by the shortest derivation, but that in doing so it is biased by the frequency of previously
perceived structures. In Section 4, we go into the computational aspects of our model. In
Section 5, we discuss the linguistic and musical test domains. Section 6 presents an empirical
investigation and comparison of our model. Finally, in Section 7, we give a discussion of our
approach and go into other combinations of simplicity and likelihood that have been proposed
in the literature.

2. Two principles: Likelihood and Simplicity
How can we predict from the set of all possible tree structures the tree that is actually
perceived by the human cognitive system? In the field of visual perception, two competing
principles have traditionally been proposed to govern structural organization. The first, initiated
by Helmholtz (1910), advocates the likelihood principle: perceptual input will be organized
into the most probable structure. The second, initiated by Wertheimer (1923) and developed by
other Gestalt psychologists, advocates the simplicity principle: the perceptual system is
viewed as finding the simplest rather than the most probable structure (see Chater, 1999, for
an overview). These two principles have also been used in linguistic and musical structuring.
In the following, we briefly review these principles for each modality.
2.1 Likelihood
The likelihood principle has been particularly influential in the field of natural language
processing (see Manning and Schütze, 1999, for a review). In this field, the most appropriate
tree structure of a sentence is assumed to be its most likely structure. The likelihood of a tree
is computed from the probabilities of its parts (e.g. phrase-structure rules) which are in turn
estimated from a large manually analyzed language corpus, i.e. a treebank. State-of-the-art
probabilistic parsers such as Collins (2000), Charniak (2000) and Bod (2001a) obtain around
90% precision and recall on the Penn Wall Street Journal treebank (Marcus et al. 1993).
The likelihood principle has also been applied to musical perception, e.g. by Raphael (1999)
and Bod (2001b/c). As in probabilistic natural language processing, the most probable musical
tree structure can be computed from the probabilities of rules or fragments taken from a large
annotated musical corpus. A musical benchmark which has been used by some models is the
Essen Folksong Collection (Schaffrath, 1995).
Also in vision science, there is a huge interest in probabilistic models (e.g. Hoffman, 1998;
Kersten, 1999). Mumford (1999) has even seen fit to declare the Dawning of Stochasticity.
Unfortunately, no visual treebanks are currently available.
2.2 Simplicity
The simplicity principle has a long tradition in the field of visual perception psychology (e.g.
Restle, 1970; Leeuwenberg, 1971; Simon, 1972; Buffart et al. 1983; van der Helm, 2000). In
291

BOD

this field, a visual pattern is formalized as a constituent structure by means of a visual coding
language based on primitive elements such as line segments and angles. Perception is
described as the process of selecting the simplest structure corresponding to the "shortest
encoding" of a visual pattern.
The notion of simplicity has also been applied to music perception. Collard et al. (1981) use
the coding language of Leeuwenberg (1971) to predict the metrical structure for four preludes
from Bach's Well-Tempered Clavier. More well-known in music perception is the theory
proposed by Lerdahl and Jackendoff (1983). Their theory contains two kinds of rules: "wellformedness rules" and "preference rules". The role of well-formedness rules is to define the
kinds of formal objects (grouping structures) the theory employs. What grouping structures a
listener actually hears, is then described by the preference rules which describe Gestaltpreferences of the kind identified by Wertheimer (1923), and which can therefore also be seen
as an embodiment of the simplicity principle.
Notions of simplicity also exist in language processing. For example, Frazier (1978) can be
viewed as arguing that the parser prefers the simplest structure containing minimal
attachments. Bod (2000a) defines the simplest tree structure of a sentence as the structure
generated by the smallest number of subtrees from a given treebank.

3. Combining Likelihood and Simplicity
The key idea of the current paper is that both principles play a role in perceptual organization,
albeit rather different ones: the simplicity principle as a general cognitive preference for
economy, and the likelihood principle as a probabilistic bias due to previous perceptual
experiences. Informally stated, our working hypothesis is that the human cognitive system
strives for the simplest structure generated by the shortest derivation, but that in doing so it is
biased by the frequency of previously perceived structures (some other combinations of
simplicity and likelihood will be discussed in Section 7). To formally instantiate our working
hypothesis, we first need a model that defines the set of possible structures of an input. In this
paper, we have chosen for a model that defines the set of phrase-structures for an input on
the basis of a treebank of previously analyzed input, and which is known as the Data-Oriented
Parsing or DOP model (see Bod, 1998; Collins & Duffy, 2002). DOP learns a grammar by
extracting subtrees from a given treebank and combines these subtrees to analyze fresh input.
We have chosen DOP because (1) it uses subtrees of arbitrary size, thereby capturing nonlocal dependencies, and (2) it has obtained very competitive results on various benchmarks
(Bod, 2001a/b; Collins & Duffy, 2002). In the following, we first review the DOP model and
discuss the use of the likelihood and simplicity principles by this approach. Next, we show how
these two principles can be combined to instantiate our working hypothesis.
3.1 Data-Oriented Parsing
In this Section, we illustrate the DOP model with a linguistic example (for a rigorous definition
of DOP, the reader is referred to Bod, 1998). We will come back to some musical examples
in Section 5. Suppose we are given the following extremely small linguistic treebank of two
trees for resp. she wanted the dress on the rack and she saw the dog with the telescope
(actual treebanks contain tens of thousands of trees, cf. Marcus et al. 1993):

292

A UNIFIED MODEL OF STRUCTURAL ORGANIZATION IN LANGUAGE AND MUSIC

S

S

NP

VP

she V

NP

she

wanted

on the

PP
NP

saw the

NP

dress P

VP
V

PP

NP
the

VP

NP

NP

P

dog with the telescope

rack

Figure 3: An example treebank
The DOP model can parse a new sentence, e.g. She saw the dress with the telescope, by
combining subtrees from this treebank by means of a substitution operation (indicated as ¡):

°

S

the

VP

NP

°

NP

PP
NP

P

dress

S

=

with the telescope

she

VP

she

PP
NP

V

VP

NP

VP

PP
NP

V
saw the

saw

P

NP

dress with the telescope

Figure 4: Parsing a sentence by combining subtrees from Figure 3
Thus the substitution operation combines two subtrees by substituting the second subtree on
the leftmost nonlexical leaf node of the first subtree (the result of which may be combined
with a third subtree, etc.). A combination of subtrees that results in a tree structure for the
whole sentence is called a derivation. Since there are many different subtrees, of various
sizes, there are typically also many different derivations that produce, however, the same tree;
for instance:

°

S

NP
the

VP

NP
she

VP
V
saw

dress

P

VP

NP
she

PP
NP

S

=

NP

VP
V

with the telescope

PP
NP

P

NP

saw the dress with the telescope

Figure 5: A different derivation which produces the same parse tree
293

BOD

The more interesting case occurs when there are different derivations that produce different
parse trees. This happens when a sentence is ambiguous; for example, DOP also produces
the following alternative parse tree for She saw the dress with the telescope:

°

S
NP

VP

she V

V
saw

°
P

S

=

PP

NP

NP

with the telescope

NP

VP

she V

NP

saw
NP
the

PP

PP

NP
the

dress

dress

P

NP

with the telescope

Figure 6: A different derivation which produces a different parse tree
3.2 Likelihood-DOP
In Bod (1993), DOP is enriched with the likelihood principle to predict the perceived tree
structure from the set of possible structures. This model, which we will call Likelihood-DOP,
computes the most probable tree of an input from the occurrence-frequencies of the subtrees.
The probability of a subtree t, P(t), is computed as the number of occurrences of t, | t |, divided
by the total number of occurrences of treebank-subtrees that have the same root label as t.
Let r(t) return the root label of t. Then we may write:
P(t) =

|t|

Σ t': r(t')= r( t)

| t' |

The probability of a derivation t1¡...¡tn is computed by the product of the probabilities of its
subtrees ti:
P(t1¡...¡tn ) =

Π i P(ti)

As we have seen, there may be different derivations that generate the same parse tree. The
probability of a parse tree T is thus the sum of the probabilities of its distinct derivations. Let
tid be the i-th subtree in the derivation d that produces tree T, then the probability of T is given
by
P(T) =

ΣdΠ i P(tid)

294

A UNIFIED MODEL OF STRUCTURAL ORGANIZATION IN LANGUAGE AND MUSIC

In parsing a sentence s, we are only interested in the trees that can be assigned to s, which we
denote by Ts. The best parse tree, Tbest, according to Likelihood-DOP is then the tree which
maximizes the probability of Ts:
Tbest = arg max P(Ts)
Ts

Thus Likelihood-DOP computes the probability of a tree as a sum of products, where each
product corresponds to the probability of a certain derivation generating the tree. This
distinguishes Likelihood-DOP from most other statistical parsing models that identify exactly
one derivation for each parse tree and thus compute the probability of a tree by only one
product of probabilities (e.g. Charniak, 1997; Collins, 1999; Eisner, 1997). Likelihood-DOP's
probability model allows for including counts of subtrees of a wide range of sizes: everything
from counts of single-level rules to counts of entire trees.
Note that the subtree probabilities in Likelihood-DOP are directly estimated from their
relative frequencies in the treebank-trees. While the relative-frequency estimator obtains
competitive results on several domains (Bonnema et al. 1997; Bod, 2001a; De Pauw, 2000), it
does not maximize the likelihood of the training data (Johnson, 2002). This is because there
may be hidden derivations which the relative-frequency estimator cannot deal with. 1 There
are estimation procedures that do take into account hidden derivations and that maximize the
likelihood of the training data. For example, Bod (2000b) presents a Likelihood-DOP model
which estimates the subtree probabilities by a maximum likelihood re-estimation procedure
based on the expectation-maximization algorithm (Dempster et al. 1977). However, since the
relative frequency estimator has so far not been outperformed by any other estimator (see
Bod et al. 2002b), we will stick to the relative frequency estimator for the current paper.
3.3 Simplicity-DOP
Likelihood-DOP does not do justice to the preference humans display for the simplest
structure generated by the shortest derivation of an input. In Bod (2000a), the simplest tree
structure of an input is defined as the tree that can be constructed by the smallest number of
subtrees from a treebank. We will refer to this model as Simplicity-DOP. Instead of
producing the most probable parse tree for an input, Simplicity-DOP thus produces the parse
tree generated by the shortest derivation consisting of the fewest treebank-subtrees,
independent of the probabilities of these subtrees. We define the length of a derivation d,
L(d), as the number of subtrees in d; thus if d = t1¡...¡tn then L(d) = n. Let d T be a derivation
which results in parse tree T, then the best parse tree, Tbest, according to Simplicity-DOP is
the tree which is produced by a derivation of minimal length:
Tbest = arg min L(d Ts )
Ts

As in Section 3.2, Ts is a parse tree of a sentence s. For example, given the treebank in Figure
3, the simplest parse tree for She saw the dress with the telescope is given in Figure 5, since
1 Only if the subtrees are restricted to depth 1 does the relative frequency estimator coincide with the

maximum likelihood estimator. Such a depth-1 DOP model corresponds to a stochastic context-free
grammar. It is well-known that DOP models which allow subtrees of greater depth outperform depth-1
DOP models (Bod, 1998; Collins & Duffy, 2002).

295

BOD

that parse tree can be generated by a derivation of only two treebank-subtrees, while the
parse tree in Figure 6 (and any other parse tree) needs at least three treebank-subtrees to be
generated. 2
The shortest derivation may not be unique: it can happen that different parse trees of a
sentence are generated by the same minimal number of treebank-subtrees (also the most
probable parse tree may not be unique, but this never happens in practice). In that case we
will back off to a frequency ordering of the subtrees. That is, all subtrees of each root label
are assigned a rank according to their frequency in the treebank: the most frequent subtree (or
subtrees) of each root label gets rank 1, the second most frequent subtree gets rank 2, etc.
Next, the rank of each (shortest) derivation is computed as the sum of the ranks of the
subtrees involved. The derivation with the smallest sum, or highest rank, is taken as the final
best derivation producing the final best parse tree in Simplicity-DOP (see Bod, 2000a).
We performed one little adjustment to the rank of a subtree. This adjustment averages the
rank of a subtree by the ranks of its own sub-subtrees. That is, instead of simply taking the
rank of a subtree, we compute the rank of a subtree as the (arithmetic) mean of the ranks of
all its sub-subtrees (including the subtree itself). The effect of this technique is that it
redresses a very low-ranked subtree if it contains high-ranked sub-subtrees.
While Simplicity-DOP and Likelihood-DOP obtain rather similar parse accuracy on the
Wall Street Journal and the Essen Folksong Collection (in terms of precision/recall -- see
Section 6), the best trees predicted by the two models do not quite match. This suggests that a
combined model, which does justice to both simplicity and likelihood, may boost the accuracy.
3.4 Combining Likelihood-DOP and Simplicity-DOP: SL-DOP and LS-DOP
The underlying idea of combining likelihood and simplicity is that the human perceptual system
searches for the simplest tree structure (generated by the shortest derivation) but in doing so it
is biased by the likelihood of the tree structure. That is, instead of selecting the simplest tree
per se, our combined model selects the simplest tree from among the n likeliest trees, where n
is our free parameter. There are of course other ways to combine simplicity and likelihood
within the DOP framework. A straightforward alternative would be to select the most
probable tree from among the n simplest trees, suggesting that the perceptual system is
searching for the most probable structure only from among the simplest ones. We will refer to
the first combination of simplicity and likelihood (which selects the simplest among the n
likeliest trees) as Simplicity-Likelihood-DOP or SL-DOP, and to the second combination
(which selects the likeliest among the n simplest trees) as Likelihood-Simplicity-DOP or LSDOP. Note that for n=1, Simplicity-Likelihood-DOP is equal to Likelihood-DOP, since there is
only one most probable tree to select from, and Likelihood-Simplicity-DOP is equal to
Simplicity-DOP, since there is only one simplest tree to select from. Moreover, if n gets large,
SL-DOP converges to Simplicity-DOP while LS-DOP converges to Likelihood-DOP. By
varying the parameter n, we will be able to compare Likelihood-DOP, Simplicity-DOP and
several instantiations of SL-DOP and LS-DOP.

2 One might argue that a more straightforward metric of simplicity would return the parse tree with the

smallest number of nodes (rather than the smallest number of treebank-subtrees). But such a metric is
known to perform quite badly (see Manning & Schütze, 1999; Bod, 2000a).

296

A UNIFIED MODEL OF STRUCTURAL ORGANIZATION IN LANGUAGE AND MUSIC

4. Computational Issues
Bod (1993) showed how standard chart parsing techniques can be applied to Likelihood-DOP.
Each treebank-subtree t is converted into a context-free rule r where the lefthand side of r
corresponds to the root label of t and the righthand side of r corresponds to the frontier labels
of t. Indices link the rules to the original subtrees so as to maintain the subtree's internal
structure and probability. These rules are used to create a derivation forest for a sentence
(using a chart parser -- see Charniak, 1993), and the most probable parse is computed by
sampling a sufficiently large number of random derivations from the forest ("Monte Carlo
disambiguation", see Bod, 1998). While this technique has been successfully applied to parsing
the ATIS portion in the Penn Treebank (Marcus et al. 1993), it is extremely time consuming.
This is mainly because the number of random derivations that should be sampled to reliably
estimate the most probable parse increases exponentially with the sentence length (see
Goodman, 2002). It is therefore questionable whether Bod's sampling technique can be scaled
to larger domains such as the Wall Street Journal (WSJ) portion in the Penn Treebank.
Goodman (1996) showed how Likelihood-DOP can be reduced to a compact stochastic
context-free grammar (SCFG) which contains exactly eight SCFG rules for each node in the
training set trees. Although Goodman's method does still not allow for an efficient computation
of the most probable parse (in fact, the problem of computing the most probable parse in
Likelihood-DOP is NP-hard -- see Sima'an, 1996), his method does allow for an efficient
computation of the "maximum constituents parse", i.e. the parse tree that is most likely to have
the largest number of correct constituents. Unfortunately, Goodman's SCFG reduction method
is only beneficial if indeed all subtrees are used, while maximum parse accuracy is usually
obtained by restricting the subtrees. For example, Bod (2001a) shows that the "optimal"
subtree set achieving highest parse accuracy on the WSJ is obtained by restricting the
maximum number of words in each subtree to 12 and by restricting the maximum depth of
unlexicalized subtrees to 6. Goodman (2002) shows that some subtree restrictions, such as
subtree depth, may be incorporated by his reduction method, but we have found no reduction
method for our optimal subtree set.
In this paper we will therefore use Bod's subtree-to-rule conversion method for LikelihoodDOP, but we will not use Bod's Monte Carlo sampling technique from derivation forests, as
this turned out to be computationally prohibitive. Instead, we will use the well-known Viterbi
optimization algorithm for chart parsing (cf. Charniak, 1993; Manning & Schütze, 1999) which
allows for computing the k most probable derivations of an input in cubic time. Using this
algorithm, we will estimate the most probable parse tree of an input from the 10,000 most
probable derivations, summing up the probabilities of derivations that generate the same tree.
Although this approach does not guarantee that the most probable parse tree is actually found,
it is shown in Bod (2000a) to perform at least as well as the estimation of the most probable
parse by Monte Carlo techniques on the ATIS corpus. Moreover, this approach is known to
obtain significantly higher accuracy than selecting the parse tree generated by the single most
probable derivation (Bod, 1998; Goodman, 2002), which we will therefore not consider in this
paper.
For Simplicity-DOP, we also first convert the treebank-subtrees into rewrite rules just as
with Likelihood-DOP. Next, the simplest tree, i.e. the shortest derivation, can be efficiently
computed by Viterbi optimization in the same way as the most probable derivation, provided
that we assign all rules equal probabilities, in which case the shortest derivation is equal to the
most probable derivation. This can be seen as follows: if each rule has a probability p then the
probability of a derivation involving n rules is equal to p n, and since 0<p<1 the derivation with
297

BOD

the fewest rules has the greatest probability. In our experiments in Section 6, we give each
rule a probability mass equal to 1/R, where R is the number of distinct rules derived by Bod's
method. As mentioned in 3.3, the shortest derivation may not be unique. In that case we
compute all shortest derivations of an input and then apply our ranking scheme to these
derivations. The ranks of the shortest derivations are computed by summing up the ranks of
the subtrees they involve. The shortest derivation with the smallest sum of subtree ranks is
taken to produce the best parse tree.
For SL-DOP and LS-DOP, we compute either n likeliest or n simplest trees by means of
Viterbi optimization. Next, we either select the simplest tree among the n likeliest ones (for
SL-DOP) or the likeliest tree among the n simplest ones (for LS-DOP). In our experiments, n
will never be larger than 1,000.

5. The Test Domains
As our linguistic test domain we used the Wall Street Journal (WSJ) portion in the Penn
Treebank (Marcus et al. 1993). This portion contains approx. 50,000 sentences that have been
manually annotated with the perceived linguistic tree structures using a predefined set of
lexico-syntactic labels. Since the WSJ has been extensively used and described in the
literature (cf. Manning & Schütze, 1999; Charniak, 2000; Collins, 2000; Bod, 2001a), we will
not go into it any further here.
As our musical test domain we used the European folksongs in the Essen Folksong
Collection (Schaffrath, 1995; Huron, 1996), which correspond to approx. 6,200 folksongs that
have been manually enriched with their perceived musical grouping structures. The Essen
Folksong Collection has been previously used by Bod (2001b) and Temperley (2001) to test
their musical parsers. The current paper presents the first experiments with Likelihood-DOP,
Simplicity-DOP, SL-DOP and LS-DOP on this collection. The Essen folksongs are not
represented by staff notation but are encoded by the Essen Associative Code (ESAC). The
pitch encodings in ESAC resemble "solfege": scale degree numbers are used to replace the
movable syllables "do", "re", "mi", etc. Thus 1 corresponds to "do", 2 corresponds to "re", etc.
Chromatic alterations are represented by adding either a "#" or a "b" after the number. The
plus ("+") and minus ("-") signs are added before the number if a note falls resp. above or
below the principle octave (thus -1, 1 and +1 refer al to "do", but on different octaves).
Duration is represented by adding a period or an underscore after the number. A period (".")
increases duration by 50% and an underscore ("_") increases duration by 100%; more than
one underscore may be added after each number. If a number has no duration indicator, its
duration corresponds to the smallest value. Thus pitches in ESAC are encoded by integers
from 1 to 7 possibly preceded or followed by symbols for octave, chromatic alteration and
duration. Each pitch encoding is treated as an atomic symbol, which may be as simple as "1"
or as complex as "+2#_.". A pause is represented by 0, possibly followed by duration
indicators, and is also treated as an atomic symbol. No loudness or timbre indicators are used
in ESAC.
Phrase boundaries are indicated by hard returns in ESAC. The phrases are unlabeled (cf.
Section 1 of this paper). Yet to make the ESAC annotations readable for our DOP models,
we added three basic labels to the phrase structures: the label "S" to each whole song, the
label "P" to each phrase, and the label "N" to each atomic symbol. In this way, we obtained
conventional tree structures that could directly be employed by our DOP models to parse new
input. The use of the label "N" distinguishes our annotations from those in previous work (Bod,
298

A UNIFIED MODEL OF STRUCTURAL ORGANIZATION IN LANGUAGE AND MUSIC

2001b/c) where we only used labels for song and phrase ("S" and "P"). The addition of "N"
enhances the productivity and robustness of the musical parsing model, although it also leads
to a much larger number of subtrees.
As an example, assume a very simple melody consisting of two phrases, (1 2) (2 3), then its
tree structure is given in Figure 7.
S
P

P

N

N

N

N

1

2

2

3

Figure 7: Example of a musical tree structure consisting of two phrases
Subtrees that can be extracted from this tree structure include the following:
S
P
N

P
P

N

N

N

N

2

3

3

1

Figure 8: Some subtrees that can be extracted from the tree in figure 7
Thus the first subtree indicates a phrase starting with a note 1, followed by exactly one other
(unspecified) note, with the phrase itself followed by exactly one other (unspecified) phrase.
Such subtrees can be used to parse new musical input in the same way as has been explained
for linguistic parsing in Section 3.

6. Experimental Evaluation and Comparison
To evaluate our DOP models, we used the blind testing method which randomly divides a
treebank into a training set and a test set, where the strings from the test set are parsed by
means of the subtrees from the training set. We applied the standard PARSEVAL metrics of
precision and recall to compare a proposed parse tree P with the corresponding correct test
set parse tree T as follows (cf. Black et al. 1991):
# correct constituents in P

# correct constituents in P

Precision =

Recall =

# constituents in P

# constituents in T

A constituent in P is "correct" if there exists a constituent in T of the same label that spans the
same atomic symbols (i.e. words or notes).3 Since precision and recall can obtain rather
3 The precision and recall scores were computed by using the "evalb" program (available via

http://www.cs.nyu.edu/cs/projects/proteus/evalb/)

299

BOD

different results (see Bod, 2001b), they are often balanced by a single measure of
performance, known as the F-score (see Manning & Schütze, 1999):
F-score =

2 × Precision × Recall
Precision + Recall

For our experiments, we divided both treebanks (i.e. the WSJ and the Essen Folksong
Collection) into 10 training/test set splits: 10% of the WSJ was used as test material each time
(sentences ≤ 40 words), while for the Essen Folksong Collection test sets of 1,000 folksongs
were used each time. For words in the test set that were unknown in the training set, we
guessed their categories by using statistics on word-endings, hyphenation and capitalization
(cf. Bod, 2001a); there were no unknown notes. As in previous work (Bod, 2001a), we limited
the maximum size of the subtrees to depth 14, and used random samples of 400,000 subtrees
for each depth > 1 and ≤ 14.4 Next, we restricted the maximum number of atomic symbols in
each subtree to 12 and the maximum depth of unlexicalized subtrees to 6. All subtrees were
smoothed by the technique described in Bod (1998: 85-94) based on simple Good-Turing
estimation (Good, 1953).
Table 1 shows the mean F-scores obtained by SL-DOP and LS-DOP for language and
music and for various values of n. Recall that for n=1, SL-DOP is equal to Likelihood-DOP
while LS-DOP is equal to Simplicity-DOP.

n
1
5
10
11
12
13
14
15
20
50
100
1,000

SL-DOP

LS-DOP

(simplest among n likeliest)

(likeliest among n simplest)

Language

Music

Language

Music

87.9%
89.3%
90.2%
90.2%
90.2%
90.2%
90.2%
90.2%
90.0%
88.7%
86.8%
85.6%

86.0%
86.8%
87.2%
87.3%
87.3%
87.3%
87.2%
87.2%
86.9%
85.6%
84.3%
84.3%

85.6%
86.1%
87.0%
87.0%
87.0%
87.0%
87.0%
87.0%
87.1%
87.4%
87.9%
87.9%

84.3%
85.5%
85.7%
85.7%
85.7%
85.7%
85.7%
85.7%
85.7%
86.0%
86.0%
86.0%

Table 1: F-scores obtained by SL-DOP and LS-DOP for language and music

4 These random subtree samples were not selected by first exhaustively computing the complete set of

subtrees (this was computationally prohibitive). Instead, for each particular depth > 1 we sampled
subtrees by randomly selecting a node in a random tree from the training set, after which we selected
random expansions from that node until a subtree of the particular depth was obtained. We repeated
this procedure 400,000 times for each depth > 1 and ≤ 14.

300

A UNIFIED MODEL OF STRUCTURAL ORGANIZATION IN LANGUAGE AND MUSIC

The Table shows that there is an increase in accuracy for both SL-DOP and LS-DOP if the
value of n increases from 1 to 11. But while the accuracy of SL-DOP decreases after n=13
and converges to Simplicity-DOP (i.e. LS-DOP at n=1), the accuracy of LS-DOP continues
to increase and converges to Likelihood-DOP (i.e. SL-DOP at n=1). The highest accuracy is
obtained by SL-DOP at 11 ≤ n ≤ 13, for both language and music. Thus SL-DOP outperforms
both Likelihood-DOP and Simplicity-DOP, and the selection of the simplest structure out of
the top likeliest ones turns out to be a more promising model than the selection of the likeliest
structure out of the top simplest ones. According to paired t-testing, the accuracy
improvement of SL-DOP at n=11 over SL-DOP at n=1 (when it is equal Likelihood-DOP) is
statistically significant for both language (p<.0001) and music (p<.006).
It is surprising that SL-DOP reaches highest accuracy at such a small value for n. But it is
even more surprising that exactly the same model (with the same parameter setting) obtains
maximum accuracy for both language and music. This model embodies the idea that the
perceptual system strives for the simplest structure but in doing so it only searches among a
few most probable structures.
To compare our results for language with others, we also tested SL-DOP at n=11 on the
now standard division of the WSJ, which uses sections 2 to 21 for training (approx. 40,000
sentences) and section 23 for testing (2416 sentences ≤ 100 words) (see e.g. Manning &
Schütze, 1999; Charniak, 2000; Collins, 2000). On this division, SL-DOP achieved an F-score
of 90.7% while the best previous models obtained an F-score of 89.7% (Collins, 2000; Bod,
2001a). In terms of error reduction, SL-DOP improves with 9.6% over these other models. It
is common to also report the accuracy for sentences ≤ 40 words on the WSJ, for which SLDOP obtained an F-score of 91.8%.
Our musical results can be compared to Bod (2001b/c), who tested three probabilistic
parsing models of increasing complexity on the same training/test set splits from the Essen
Folksong Collection. The best results were obtained with a hybrid DOP-Markov parser:
80.7% F-score. This is significantly worse than our best result of 87.3% obtained by SL-DOP
on the same splits from the Essen folksongs. This difference may be explained by the fact that
the hybrid DOP-Markov parser in Bod (2001b/c) only takes into account context from higher
nodes in the tree and not from any sister nodes, while the DOP models presented in the
current paper take any subtree into account of (almost) arbitrary width and depth, thereby
covering a larger amount of musical context. Moreover, as mentioned in Section 5, the models
in Bod (2001b/c) did not use the label "N" for notes; instead, a Markov approach was used to
parse new sequences of notes.
It would also be interesting to compare our musical results to the melodic parser of
Temperley (2001), who uses a system of preference rules similar to Lerdahl and Jackendoff
(1983), and which is also evaluated on the Essen Folksong Collection. But while we have
tested on several test sets of 1,000 randomly selected folksongs, Temperley used only one test
set of 65 folksongs that was moreover cleaned up by eliminating folksongs with irregular
meter (Temperley, 2001: 74). It is therefore difficult to compare our results with Temperley's;
yet, it is noteworthy that Temperley's parser correctly identified 75.5% of the phrase
boundaries. Although this is lower than the 87.3% obtained by SL-DOP, Temperley's parser is
not "trained" on previously analyzed examples like our model (though we note that
Temperley's results were obtained by tuning the optimal phrase length of his parser on the
average phrase length of the Essen Folksong Collection).
It should perhaps be mentioned that while parsing models trained on treebanks are widely
used in natural language processing, they are still rather uncommon in musical processing.
301

BOD

Most musical parsing models, including Temperley's, employ a rule-based approach where the
parsing is based on a combination of low-level rules -- such as "prefer phrase boundaries at
large intervals" -- and higher-level rules -- such as "prefer phrase boundaries at changes of
harmony". The low-level rules are usually based on the well-known Gestalt principles of
proximity and similarity (Wertheimer, 1923), which prefer phrase boundaries at larger
intervallic distances. However, in Bod (2001c) we have shown that the Gestalt principles
predict incorrect phrase boundaries for a number of folksongs, and that higher-level
phenomena cannot alleviate these incorrect predictions. These folksongs contain a phrase
boundary which falls just before or after a large pitch or time interval (which we have called
jump-phrases) rather than at such intervals -- as would be predicted by the Gestalt principles.
Moreover, other musical factors, such as melodic parallelism, meter and harmony, predict
exactly the same incorrect phrase boundaries for these cases (see Bod, 2001b/c for details).
We have conjectured that such jump-phrases are inherently memory-based, reflecting idiomdependent pitch contours (cf. Huron, 1996; Snyder, 2000), and that they can be best captured
by a memory-based model that tries to mimic the musical experience of a listener from a
certain culture (Bod, 2001c).

7. Discussion and Conclusion
We have seen that our combination of simplicity and likelihood is quite rewarding for linguistic
and musical structuring, suggesting an interesting parallel between the two modalities. Yet, one
may question whether a model which massively memorizes and re-uses previously perceived
structures has any cognitive plausibility. Although this question is only important if we want to
claim cognitive relevance for our model, there appears to be some evidence that people store
various kinds of previously heard fragments, both in language (Jurafsky, 2002) and music
(Saffran et al. 2000). But do people store fragments of arbitrary size, as proposed by DOP?
In his overview article, Jurafsky (2002) reports on a large body of psycholinguistic evidence
showing that people not only store lexical items and bigrams, but also frequent phrases and
even whole sentences. For the case of sentences, people not only store idiomatic sentences,
but also "regular" high-frequency sentences.5 Thus, at least for language there is some
evidence that humans store fragments of arbitrary size provided that these fragments have a
certain minimal frequency. And this suggests that humans need not always parse new input by
the rules of a grammar, but that they can productively re-use previously analyzed fragments.
Yet, there is no evidence that people store all fragments they hear, as suggested by DOP.
Only high-frequency fragments seem to be memorized. However, if the human perceptual
faculty needs to learn which fragments will be stored, it will initially need to keep track of all
fragments (with the possibility of forgetting them) otherwise frequencies can never
accumulate. This results in a model which continuously and incrementally updates its fragment
memory given new input -- which is in correspondence with the DOP approach, and also with
some other approaches (cf. Daelemans, 1999; Scha et al. 1999; Spiro, 2002). While we
acknowledge the importance of a rule-based system in acquiring a fragment memory, once a
substantial memory is available it may be more efficient to construct a tree by means of
already parsed fragments than constructing it entirely by means of rules. For many cognitive
5 These results are derived from differences in reaction times in sentence recognition where only the

frequency of the (whole) test sentences is varied, while all other variables, such as lexical frequency,
bigram frequency, plausibility, syntactic/semantic complexity, etc., are kept constant.

302

A UNIFIED MODEL OF STRUCTURAL ORGANIZATION IN LANGUAGE AND MUSIC

activities it is advantageous to store results, so that they can immediately be retrieved from
memory, rather than computing them each time from scratch. This has been shown, for
example, for manual reaches (Rosenbaum et al. 1992), arithmetic operations (Rickard et al.
1994), word formation (Baayen et al. 1997), to mention a few. And linguistic and musical
parsing may be no exception to this.
It should be stressed that the experiments reported in this paper are limited in at least two
respects. First, our musical test domain is rather restricted. While a wide variety of linguistic
treebanks is currently available (see Manning & Schütze, 1999), the number of musical
treebanks is extremely limited. There is thus a need for larger and richer annotated musical
corpora covering broader domains. The development of such annotated corpora may be timeconsuming, but experience from natural language processing has shown that it is worth the
effort, since corpus-based parsing systems dramatically outperform grammar-based parsing
systems. A second limitation of our experiments is that we have only evaluated the parse
results rather than the parse process. That is, we have only assessed how accurately our
models can mimic the input-output behavior of a human annotator, without investigating the
process by which an annotator arrived at the perceived structures. It is unlikely that humans
process perceptual input by computing 10,000 most likely derivations using random samples of
400,000 subtrees – as we did in the current paper. Yet, for many applications it suffices to
know the perceived structure rather than the process that led to that structure. And we have
seen that our combination of simplicity and likelihood predicts the perceived structure with a
high degree of accuracy.
There have been other proposals for integrating the principles of simplicity and likelihood in
human perception (see Chater, 1999 for a review). Chater notes that in the context of
Information Theory (Shannon, 1948), the principles of simplicity and likelihood are identical. In
this context, the simplicity principle is interpreted as minimizing the expected length to encode
a message i, which is −log2 p i bits, and which leads to the same result as maximizing the
probability of i. If we used this information-theoretical definition of simplest structure in
Simplicity-DOP, it would return the same structure as Likelihood-DOP, and no improved
results would be obtained by a combination of the two. On the other hand, by defining the
simplest structure as the one generated by the smallest number of subtrees, independent of
their probabilities, we created a notion of simplicity which is provably different from the notion
of most likely structure, and which, combined with Likelihood-DOP, obtained improved results.
Another integration of the two principles may be provided by the notion of Minimum
Description Length or MDL (cf. Rissanen, 1978). The MDL principle can be viewed as
preferring the statistical model that allows for the shortest encoding of the training data. The
relevant encoding consists of two parts: the first part encodes the model of the data, and the
second part encodes the data in terms of the model (in bit length). MDL is closely related to
stochastic complexity (Rissanen, 1989) and Kolmogorov complexity (Li and Vitanyi, 1997),
and has been used in natural language processing for estimating the parameters of a stochastic
grammar (e.g. Osborne, 1999). We will leave it as an open research question as to whether
MDL can be successfully used for estimating the parameters of DOP's subtrees. However,
since MDL is known to give asymptotically the same results as maximum likelihood estimation
(MLE) (Rissanen, 1989), its application to DOP may lead to an unproductive model. This is
because the maximum likelihood estimator will assign the training set trees their empirical
frequencies, and assign 0 weight to all other trees (see Bonnema, 2002 for a proof). This
would result in a model which can only generate the training data and no other strings.
Johnson (2002) argues that this may be an overlearning problem rather than a problem with
303

BOD

MLE per se, and that standard methods, such as cross-validation or regularization, would seem
in principle to be ways to avoid such overlearning. We will leave this issue to future
investigation.
The idea of a general underlying model for language and music is not uncontroversial. In
linguistics it is usually assumed that humans have a separate language faculty, and Lerdahl and
Jackendoff (1983) have argued for a separate music faculty. This work does not propose that
these separate faculties do not exist, but wants to focus on the commonalities rather than on
the differences between these faculties, aiming at finding a deeper "faculty" which may hold
for perception in general. Our hypothesis is that the perceptual system strives for the simplest
structure but in doing so it only searches among the likeliest structures.

Acknowledgements
Thanks to Aline Honingh, Remko Scha, Neta Spiro, Menno van Zaanen and three anonymous
reviewers for their excellent comments. A preliminary version of this paper was presented as
a keynote talk at the LCG workshop ("Learning Computational Grammars", Tübingen, 2001).

References
Baayen, R. H., Dijkstra, T. & Schreuder, R. (1997). Singular and Plurals in Dutch: Evidence
for a Parallel Dual-Route Model. Journal of Memory and Language, 37, 94-117.
Black, E., Abney, S., Flickinger, D., Gnadiec, C., Grishman, R., Harrison, P., Hindle, D.,
Ingria, R., Jelinek, F., Klavans, J., Liberman, M., Marcus, M., Roukos, S., Santorini, B.
& Strzalkowski, T. (1991). A Procedure for Quantitatively Comparing the Syntactic
Coverage of English, In Proceedings DARPA Speech and Natural Language
Workshop, Pacific Grove, Morgan Kaufmann.
Bod, R. (1993). Using an Annotated Language Corpus as a Virtual Stochastic Grammar. In
Proceedings AAAI-93, Menlo Park, Ca.
Bod, R. (1998). Beyond Grammar: An Experience-Based Theory of Language. Stanford:
CSLI Publications (Lecture notes number 88).
Bod, R. (2000a). Parsing with the Shortest Derivation. In Proceedings COLING-2000,
Saarbrücken, Germany.
Bod, R. (2000b). Combining Semantic and Syntactic Structure for Language Modeling. In
Proceedings ICSLP-2000, Beijing, China.
Bod, R. (2001a). What is the Minimal Set of Fragments that Achieves Maximal Parse
Accuracy? In Proceedings ACL'2001, Toulouse, France.
Bod, R. (2001b). A Memory-Based Model for Music Analysis. In Proceedings International
Computer Music Conference (ICMC'2001), Havana, Cuba.
Bod, R. (2001c). Memory-Based Models of Melodic Analysis: Challenging the Gestalt
Principles. Journal of New Music Research, 31(1), 26-36. (available at
http://staff.science.uva.nl/~rens/jnmr01.pdf)
304

A UNIFIED MODEL OF STRUCTURAL ORGANIZATION IN LANGUAGE AND MUSIC

Bod, R., Hay, J. & Jannedy, S. (Eds.) (2002a). Probabilistic Linguistics. Cambridge, The
MIT Press. (in press)
Bod, R., Scha, R. & Sima'an, K. (Eds.) (2002b). Data-Oriented Parsing. Stanford, CSLI
Publications. (in press)
Bonnema, R. (2002). Probability Models for DOP. In Bod et al. (2002b).
Bonnema, R., Bod, R. & Scha, R. (1997). A DOP Model for Semantic Interpretation, In
Proceedings ACL/EACL-97, Madrid, Spain.
Buffart, H., Leeuwenberg, E. & Restle , F. (1983). Analysis of Ambiguity in Visual Pattern
Completion. Journal of Experimental Psychology: Human Perception and
Performance. 9, 980-1000.
Charniak, E. (1993). Statistical Language Learning, Cambridge, The MIT Press.
Charniak, E. (1997). Statistical Techniques for Natural Language Parsing, AI Magazine,
Winter 1997, 32-43.
Charniak, E. (2000). A Maximum-Entropy-Inspired Parser. In Proceedings ANLPNAACL'2000, Seattle, Washington.
Chater, N. (1999). The Search for Simplicity: A Fundamental Cognitive Principle? The
Quarterly Journal of Experimental Psychology, 52A(2), 273-302.
Chomsky, N. (1965). Aspects of the Theory of Syntax, Cambridge, The MIT Press.
Collard, R., Vos, P. & Leeuwenberg, E. (1981). What Melody Tells about Metre in Music .
Zeitschrift für Psychologie. 189, 25-33.
Collins, M. (1999). Head-Driven Statistical Models for Natural Language Parsing, PhDthesis, University of Pennsylvania, PA.
Collins, M. (2000). Discriminative Reranking for Natural Language Parsing, In Proceedings
ICML-2000, Stanford, Ca.
Collins, M. & Duffy, N. (2002). New Ranking Algorithms for Parsing and Tagging: Kernels
over Discrete Structures, and the Voted Perceptron. In Proceedings ACL'2002,
Philadelphia, PA.
Daelemans, W. (1999). Introduction to Special Issue on Memory-Based Language
Processing. Journal of Experimental and Theoretical Artificial Intelligence 11(3),
287-296.
Dastani, M. (1998). Languages of Perception. ILLC Dissertation Series 1998-05, University
of Amsterdam.
Dempster, A., Laird, N. & Rubin, D. (1977). Maximum Likelihood from Incomplete Data via
the EM Algorithm, Journal of the Royal Statistical Society, 39, 1-38.

305

BOD

De Pauw, G. (2000). Aspects of Pattern-matching in Data-Oriented Parsing, In Proceedings
COLING-2000, Saarbrücken, Germany.
Eisner, J. (1997). Bilexical Grammars and a Cubic-Time Probabilistic Parser, In Proceedings
Fifth International Workshop on Parsing Technologies, Boston, Mass.
Frazier, L. (1978). On Comprehending Sentences: Syntactic Parsing Strategies. PhD.
Thesis, University of Connecticut.
Good, I. (1953). The Population Frequencies of Species and the Estimation of Population
Parameters, Biometrika 40, 237-264.
Goodman, J. (1996). Efficient Algorithms for Parsing the DOP Model, In Proceedings
Empirical Methods in Natural Language Processing, Philadelphia, PA.
Goodman, J. (2002). Efficient Parsing of DOP with PCFG-Reductions. In Bod et al. 2002b.
von Helmholtz, H. (1910). Treatise on Physiological Optics (Vol. 3), Dover, New York.
Hoffman, D. (1998). Visual Intelligence. New York, Norton & Company, Inc.
Huron, D. (1996). The Melodic Arch in Western Folksongs. Computing in Musicology 10, 223.
Johnson, M. (2002). The DOP Estimation Method is Biased and Inconsistent. Computational
Linguistics, 28, 71-76.
Jurafsky, D. (2002). Probabilistic Modeling in Psycholinguistics: Comprehension and
Production. In Bod et al. 2002a. (available at http://www.colorado.edu/ling/jurafsky/
prob.ps)
Kersten, D. (1999). High-level vision as statistical inference. In Gazzaniga , S. (Ed.), The New
Cognitive Neurosciences, Cambridge, The MIT Press.
Leeuwenberg, E. (1971). A Perceptual Coding Language for Perceptual and Auditory
Patterns. American Journal of Psychology. 84, 307-349.
Lerdahl, F. & Jackendoff, R. (1983). A Generative Theory of Tonal Music. Cambridge, The
MIT Press.
Li, M. & Vitanyi, P. (1997). An Introduction to Kolmogorov Complexity and its
Applications (2nd ed.). New York, Springer.
Longuet-Higgins, H. (1976). Perception of Melodies. Nature 263, 646-653.
Longuet-Higgins, H. and Lee, C. (1987). The Rhythmic Interpretation of Monophonic Music.
Mental Processes: Studies in Cognitive Science, Cambridge, The MIT Press.
Manning, C. & Schütze, H. (1999). Foundations of Statistical Natural Language
Processing. Cambridge, The MIT Press.
Marcus, M., Santorini, B., & Marcinkiewicz, M. (1993). Building a Large Annotated Corpus
of English: the Penn Treebank, Computational Linguistics 19(2).
306

A UNIFIED MODEL OF STRUCTURAL ORGANIZATION IN LANGUAGE AND MUSIC

Marr, D. (1982). Vision. San Francisco, Freeman.
Martin, W., Church, K. & Patil, R. (1987). Preliminary Analysis of a Breadth-first Parsing
Algorithm: Theoretical and Experimental Results. In Bolc, L. (Ed.), Natural Language
Parsing Systems, Springer Verlag, Berlin.
Mumford, D. (1999). The dawning of the age of stochasticity. Based on a lecture at the
Accademia Nazionale dei Lincei. (available at http://www.dam.brown.edu/people/
mumford/Papers/Dawning.ps)
Osborne, M. (1999). Minimal description length-based induction of definite clause grammars
for noun phrase identification. In Proceedings EACL Workshop on Computational
Natural Language Learning. Bergen, Norway.
Palmer, S. (1977). Hierarchical Structure in Perceptual Representation. Cognitive
Psychology, 9, 441-474.
Raphael, C. (1999). Automatic Segmentation of Acoustic Musical Signals Using Hidden
Markov Models. IEEE Transactions on Pattern Analysis and Machine Intelligence,
21(4), 360-370.
Restle , F. (1970). Theory of Serial Pattern Learning: Structural Trees. Psychological
Review, 86, 1-24.
Rickard, T., Healy, A. & Bourne Jr., E. (1994). On the cognitive structure of basic arithmetic
skills: Operation, order and symbol transfer effects. Journal of Experimental
Psychology: Learning, Memory and Cognition, 20, 1139-1153.
Rissanen, J. (1978). Modeling by the shortest data description. Automatica, 14, 465-471.
Rissanen, J. (1989). Stochastic Complexity in Statistical Inquiry. Series in Computer
Science - Volume 15. World Scientific, 1989.
Rosenbaum, D., Vaughan, J., Barnes, H. & Jorgensen, M. (1992). Time course of movement
planning: Selection of handgrips for object manipulation. Journal of Experimental
Psychology: Learning, Memory and Cognition, 18, 1058-1073.
Saffran, J., Loman, M. & Robertson, R. (2000). Infant Memory for Musical Experiences.
Cognition, 77, B16-23.
Scha, R., Bod, R. & Sima'an, K. (1999). Memory-Based Syntactic Analysis. Journal of
Experimental and Theoretical Artificial Intelligence, 11(3), 409-440.
Schaffrath, H. (1995). The Essen Folksong Collection in the Humdrum Kern Format. D.
Huron (ed.). Menlo Park, CA: Center for Computer Assisted Research in the
Humanities.
Shannon, C. (1948). A Mathematical Theory of Communication. Bell System Technical
Journal. 27, 379-423, 623-656.
Sima'an, K. (1996). Computational Complexity of Probabilistic Disambiguation by means of
Tree Grammars. In Proceedings COLING-96, Copenhagen, Denmark.
307

BOD

Simon, H. (1972). Complexity and the Representation of Patterned Sequences as Symbols.
Psychological Review. 79, 369-382.
Snyder, B. (2000). Music and Memory. Cambridge, The MIT Press.
Spiro, N. (2002). Combining Grammar-based and Memory-based Models of Perception of
Time Signature and Phase. In Anagnostopoulou, C., Ferrand, M. & Smaill, A. (Eds.).
Music and Artificial Intelligence, Lecture Notes in Artificial Intelligence, Vol. 2445,
Springer-Verlag, 186-197.
Temperley, D. (2001). The Cognition of Basic Musical Structures. Cambridge, The MIT
Press.
Wertheimer, M. (1923). Untersuchungen zur Lehre von der Gestalt. Psychologische
Forschung 4, 301-350.
Wundt, W. (1901). Sprachgeschichte und Sprachpsychologie. Engelmann, Leipzig.

308

Journal of Artificial Intelligence Research 17 (2002) 57-81

Submitted 12/01; published 8/02

A Logic for Reasoning about Upper Probabilities
Joseph Y. Halpern
Riccardo Pucella

halpern@cs.cornell.edu
riccardo@cs.cornell.edu

Department of Computer Science
Cornell University
Ithaca, NY 14853
http://www.cs.cornell.edu/home/halpern

Abstract
We present a propositional logic to reason about the uncertainty of events, where the
uncertainty is modeled by a set of probability measures assigning an interval of probability
to each event. We give a sound and complete axiomatization for the logic, and show that
the satisfiability problem is NP-complete, no harder than satisfiability for propositional
logic.

1. Introduction
Various measures exist that attempt to quantify uncertainty. For many trained in the use
of probability theory, probability measures are an obvious choice. However, probability
cannot easiliy capture certain situations of interest. Consider a simple example: suppose
we have a bag of 100 marbles; we know 30 are red and we know the remaining 70 are
either blue or yellow, although we do not know the exact proportion of blue and yellow. If
we are modeling the situation where we pick a ball from the bag at random, we need to
assign a probability to three different events: picking up a red ball (red-event), picking up
a blue ball (blue-event), and picking up a yellow ball (yellow-event). We can clearly assign
a probability of .3 to red-event, but there is no clear probability to assign to blue-event or
yellow-event.
One way to approach this problem is to represent the uncertainty using a set of probability measures, with a probability measure for each possible proportion of blue and yellow
balls. For instance, we could use the set of probabilities P = {µα : α ∈ [0, .7]}, where
µα gives red-event probability .3, blue-event probability α, and yellow-event probability
.7 − α. To any set of probabilities P we can assign a pair of functions, the upper and lower
probability measure, that for an event X give the supremum (respectively, the infimum) of
the probability of X according to the probability measures in P. These measures can be
used to deal with uncertainty in the manner described above, where the lower and upper
probability of an event defines a range of probability for that event.1 (This example can
be viewed as giving a frequentist interpretation of upper probabilities. Upper probabilities
can also be given a subjective interpretation, for example, by considering the odds at which
someone would be willing to accept or reject a bet (Smith, 1961; Walley, 1991).)
1. Note that using sets of probability measures is not the only way to model this situation. An alternative
approach, using inner measures, is studied by Fagin and Halpern (1991).

c
2002
AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Halpern & Pucella

Given a measure of uncertainty, one can define a logic for reasoning about it. Fagin,
Halpern and Megiddo (1990) (FHM from now on) introduce a logic for reasoning about
probabilities, with a possible-worlds semantics that assigns a probability to each possible
world. They provide an axiomatization for the logic, which they prove sound and complete
with respect to the semantics. They also show that the satisfiability problem for the logic,
somewhat surprisingly, is NP-complete, and hence no harder than the satisfiability problem
for propositional logic. They moreover show how their logic can be extended to other notions
of uncertainty, such as inner measures (Fagin & Halpern, 1991) and Dempster-Shafer belief
functions (Shafer, 1976).
In this paper, we describe a logic for reasoning about upper probability measures, along
the lines of the FHM logic. The logic allows reasoning about linear inequalities involving
upper probabilities measures. Like the logics considered in FHM, our logic is agnostic
as to the interpretation of upper probabilities, whether frequentist or subjectivist. The
main challenge is to derive a provably complete axiomatization of the logic; to do this, we
need a characterization of upper probability measures in terms of properties that can be
expressed in the logic. Many semantic characterizations of upper probability measures have
been proposed in the literature. The characterization of Anger and Lembcke (1985) turns
out to be best suited for our purposes. Even though we are reasoning about potentially
infinite sets of probability measures, the satisfiability problem for our logic remains NPcomplete. Intuitively, we need guess only a small number of probability measures to satisfy
any given formula, polynomially many in the size of the formula. Moreover, these probability
measures can be taken to be defined on a finite state space, again polynomial in the size of
the formula. Thus, we need to basically determine polynomially many values—a value for
each probability measure at each state—to decide the satisfiability of a formula.
The rest of this paper is structured as follows. In Section 2, we review the required
material from probability theory and the theory of upper probabilities. In Section 3, we
present the logic and an axiomatization. In Section 4, we prove that the axiomatization is
sound and complete with respect to the natural semantic models expressed in terms of upper
probability spaces. Finally, in Section 5, we prove that the decision problem for the logic is
NP-complete. The proofs of the new, more technical results are given in Appendix A. To
make the paper self-contained, we also review Anger and Lembcke’s results in Appendix B.

2. Characterizing Upper Probability Measures
We start with a brief review of the relevant definitions. Recall that a probability measure
is a function µ : Σ → [0, 1] for Σ an algebra of subsets of Ω (that is Σ is closed under
complements and unions), satisfying µ(∅) = 0, µ(Ω) = 1, and µ(A ∪ B) = µ(A) + µ(B) for
all disjoint sets A, B in Σ.2 A probability space is a tuple (Ω, Σ, µ), where Ω is a set, Σ is
an algebra of subsets of Ω (the measurable sets), and µ is a probability measure defined on
Σ. Given a set P of probability measures, let P ∗ be the upper probability measure defined
2. If Ω is infinite, we could also require that Σ be a σ-algebra (i.e., closed under countable unions) and that
µ be countably additive. Requiring countable additivity would not affect our results, since we show that
we can take Ω to be finite. For ease of exposition, we have not required it.

58

A Logic for Reasoning about Upper Probabilities

by P ∗ (X) = sup{µ(X) : µ ∈ P} for X ∈ Σ.3 Similarly, P∗ (X) = inf{µ(X) : µ ∈ P} is
the lower probability of X ∈ Σ. A straightforward derivation shows that the relationship
P∗ (X) = 1−P ∗ (X) holds between upper and lower probabilities, where X is the complement
of X in Ω. Because of this duality, we restrict the discussion to upper probability measures
in this paper, with the understanding that results for lower probabilities can be similarly
derived. Finally, an upper probability space is a tuple (Ω, Σ, P) where P is a set of probability
measures on Σ.
We would like a set of properties that completely characterizes upper probability measures. In other words, we would like a set of properties that allow us to determine if a
function f : Σ → R (for an algebra Σ of subsets of Ω) is an upper probability measure,
that is, whether there exists a set P of probability measures such that for all X ∈ Σ,
P ∗ (X) = f (X).4
One approach to the characterization of upper probability measures is to adapt the
characterization of Dempster-Shafer belief functions; these functions are known to be the
lower envelope of the probability measures that dominate them, and thus form a subclass
of the class of lower probability measures. By the duality noted earlier, a characterization
of lower probability measures would yield a characterization of upper probability measures.
The characterization of belief functions is derived from a generalization of the following
inclusion-exclusion principle for probabilities (obtained by replacing the equality with an
inequality):
µ(

n
[

n
X
(−1)i−1 (

Ai ) =

i=1

i=1

X

µ(

J⊆{1,... ,n}
|J|=i

\

Aj )).

j∈J

It seems reasonable that a characterization of lower (or upper) probability measures
could be derived along similar lines. However, as is well known, most properties derivable
from the inclusion-exclusion principle (which include most of the properties reported in the
literature) are insufficient to characterize upper probability measures. Huber (1981, p. 257)
and Walley (1991, p. 85) give examples showing the insufficiencies of such properties.
To give a sense of the insufficiency of simple properties, consider the following “inclusionexclusion”–style properties, some of which are taken from (Walley, 1991). To simplify the
statement of these properties, let P −1 = P ∗ and P +1 = P∗ .
P P
i T
(1) P ∗ (A1 ∪ · · · ∪ An ) ≤ ni=1 |I|=i (−1)i+1 P (−1) ( j∈I Aj ),
(2) P∗ (A1 ∪ · · · ∪ An ) ≥

Pn P
i=1

|I|=i (−1)

i+1 P (−1)i+1 (

T

j∈I

Aj ),

(3) P∗ (A ∪ B) + P∗ (A ∩ B) ≤ P∗ (A) + P ∗ (B) ≤ P ∗ (A ∪ B) + P ∗ (A ∩ B),
3. In the literature, the term upper probability is sometimes used in a more restricted sense than here. For
example, Dempster (1967) uses the term to denote a class of measures which were later characterized as
Dempster-Shafer belief functions (Shafer, 1976); belief functions are in fact upper probability measures
in our sense, but the converse is not true (Kyburg, 1987). In the measure theory literature, what we call
upper probability measures are a special case of upper envelopes of measures, which are defined as the
sup of sets of general measures, not just probability measures.
4. It is possible to define a notion of upper probability over an arbitrary set of subsets of Ω, not necessearily
an algebra, by simply requiring that f coincides with P ∗ on its domain, for some set P of probability
measures. See Walley (1991) for details.

59

Halpern & Pucella

(4) P∗ (A) + P∗ (B) ≤ P∗ (A ∪ B) + P ∗ (A ∩ B) ≤ P ∗ (A) + P ∗ (B),
(5) P∗ (A) + P∗ (B) ≤ P∗ (A ∩ B) + P ∗ (A ∪ B) ≤ P ∗ (A) + P ∗ (B).
Note that without the alternation between upper probabilities and lower probabilities,
(1) and (2) would just be the standard notions of subadditivity and superadditivity, respectively. While subadditivity and superadditivity hold for upper and lower probabilities,
respectively, (1) and (2) are stronger properties. It is easily verified that all five properties
hold for upper probability measures. The question is whether they completely characterize
the class of upper probability measures. We show the inherent incompleteness of these
properties by proving that they are all derivable from the following simple property, which
is by itself insufficient to characterize upper probability measures:
(6) If A ∩ B = ∅, then P ∗ (A) + P∗ (B) ≤ P ∗ (A ∪ B) ≤ P ∗ (A) + P ∗ (B).
Proposition 2.1: Property (6) implies properties (1)-(5).
Observe that our property (6) is already given by Walley (1991, p. 84), as properties (d)
and (e). The following example shows the insufficiency of Property (6). Let P be the set
of probability measures {µ1 , µ2 , µ3 , µ4 } over Ω = {a, b, c, d} (with Σ containing all subsets
of Ω) defined on singletons by
µ1 (b) =

1
4

µ1 (c) =

1
4

µ1 (d) =

1
4

µ2 (a) = 0 µ2 (b) =

1
8

µ2 (c) =

3
8

µ2 (d) =

1
2

3
8

µ3 (c) = 0

µ3 (d) =

1
2

µ1 (a) =

1
4

µ3 (a) =

1
8

µ3 (b) =

µ4 (a) =

3
8

µ4 (b) = 0 µ4 (c) =

1
8

µ4 (d) = 12 ,

and extended by additivity to all of Σ. This defines an upper probability measure P ∗ over
Σ. Consider the function υ : Σ → [0, 1] defined by
 ∗
P (X) +  if X = {a, b, c}
υ (X) =
P ∗ (X)
otherwise.
We claim that the function υ , for small enough  > 0, satisfies property (6), but cannot be
an upper probability measure.
Proposition 2.2: For 0 <  < 18 , the function υ satisfies property (6), but is not an
upper probability measure. That is, we cannot find a set P 0 of probability measures such
that υ = (P 0 )∗ .
This example clearly illustrates the need to go beyond the inclusion-exclusion principle
to find properties that characterize upper probability measures. As it turns out, various
complete characterizations have been described in the literature (Lorentz, 1952; Huber,
1976, 1981; Williams, 1976; Wolf, 1977; Giles, 1982; Anger & Lembcke, 1985; Walley, 1991).
Most of these characterizations are obtained by considering upper and lower expectations,
rather than working directly with upper and lower probabilities. Anger and Lembcke (1985)
60

A Logic for Reasoning about Upper Probabilities

give a characterization in terms of upper and lower probabilities. Since their characterization
is particularly well-suited to the logic presented in the next section, we review it here.
The characterization is based on the notion of set cover. A set A is said to be covered
n times by a multiset {{A1 , . . . , Am }} of sets if every element of A appears in at least
n sets from A1 , . . . , Am : for all x ∈ A, there exists distinct i1 , . . . , in in {1, . . . , m} such
that for all j ≤ n, x ∈ Aij . It is important to note here that {{A1 , . . . , Am }} is a multiset, not a set; the Ai ’s are not necessarily distinct. (We use the {{ }} notation to denote
multisets.) An (n, k)-cover of (A, Ω) is a multiset {{A1 , . . . , Am }} that covers Ω k times
and covers A n + k times. For example, {{1, 2}, {2, 3}, {1, 3}} covers {1, 2, 3} 2 times, and
{{{1, 2}, {2, 3}, {1, 3}, {2}, {2}}} is a (2,2) cover of ({2}, {1, 2, 3}).
The notion of (n, k)-cover is the key concept in Anger and Lembcke’s characterization
of upper probability measures.
Theorem 2.3: (Anger & Lembcke, 1985) Suppose that Ω is a set, Σ is an algebra of subsets
of Ω, and υ : Σ → R. Then there exists a set P of probability measures with υ = P ∗ if and
only if υ satisfies the following three properties:
UP1. υ(∅) = 0,
UP2. υ(Ω) = 1,
UP3. for all natural numbers m, n, k and all subsets A1P
, . . . , Am in Σ, if {{A1 , . . . , Am }}
is an (n, k)-cover of (A, Ω), then k + nυ(A) ≤ m
i=1 υ(Ai ).
Proof: We reproduce a proof of this result in Appendix B.
Note that UP1 is redundant in the presence of UP2 and UP3. Indeed, {{Ω, ∅}} is a
(0, 1)-cover of (Ω, Ω), and applying UP3 yields υ(∅) + υ(Ω) = 1. Since UP2 states that
υ(Ω) = 1, this means that υ(∅) = 0. A further consequence of UP3 is that if A ⊆ B, then
υ(A) ≤ υ(B), since {{B}} is a (1, 0)-cover of (A, Ω). Therefore, for all A ∈ Σ, υ(A) ∈ [0, 1].
We need to strengthen Theorem 2.3 in order to prove the main result of this paper,
namely, the completeness of the axiomatization of the logic we introduce in the next section.
We show that if the cardinality of the state space Ω is finite, then we need only finitely
many instances of property UP3. Notice that we cannot derive this from Theorem 2.3
alone: even if |Ω| is finite, UP3 does not provide any bound on m, the number of sets to
consider in an (n, k) cover of a set A. Indeed, there does not seem to be any a priori reason
why the value of m, n, and k can be bounded. Bounding this value of m (and hence of n
and k, since they are no larger than m) is one of the key technical results of this paper, and
a necessary foundation for our work.
Theorem 2.4: There exist constants B0 , B1 , . . . such that if Ω is a finite set, Σ is an
algebra of subsets of Ω, and υ : Σ → R, then there exists a set P of probability measures
such that υ = P ∗ if and only if υ satisfies the following properties:
UPF1. υ(∅) = 0,
UPF2. υ(Ω) = 1,
UPF3. for all integers m, n, k ≤ B|Ω| and all sets A1 , P
. . . , Am , if {{A1 , . . . , Am }}
is an (n, k)-cover of (A, Ω), then k + nυ(A) ≤ m
i=1 υ(Ai ).
61

Halpern & Pucella

Property UPF3 is significantly weaker than UP3. In principle, checking that UP3
holds for a given function requires checking that it holds for arbitrarily large collections of
sets, even if the underlying set Ω is finite. On the other hand, UPF3 guarantees that if Ω is
finite, then it is in fact sufficient to look at collections of size at most B|Ω| . This observation
is key to the completeness result.
Theorem 2.4 does not prescribe any values for the constants B0 , B1 , . . . . Indeed, the
proof found in Appendix A relies on a Ramsey-theoretic argument that does not even
provide a bound on the Bi ’s. We could certainly attempt to obtain such bounds, but
obtaining them is completely unnecessary for our purposes. To get completeness of the
axiomatization of the logic introduced in the next section, it is sufficient for there to exist
finite constants B0 , B1 , . . . .

3. The Logic
The syntax for the logic is straightforward, and is taken from FHM. We fix a set Φ0 =
{p1 , p2 , . . . } of primitive propositions. The set Φ of propositional formulas is the closure
of Φ0 under ∧ and ¬. We assume a special propositional formula true, and abbreviate
¬true as false. We use p to represent primitive propositions, and ϕ and ψ to represent
propositional formulas. A term is an expression of the form θ1 l(ϕ1 ) + · · · + θk l(ϕk ), where
θ1 , . . . , θk are reals and k ≥ 1. A basic likelihood formula is a statement of the form t ≥ α,
where t is a term and α is a real. A likelihood formula is a Boolean combination of basic
likelihood formulas. We use f and g to represent likelihood formulas. We use obvious
abbreviations where needed, such as l(ϕ) − l(ψ) ≥ a for l(ϕ) + (−1)l(ψ) ≥ a, l(ϕ) ≥ l(ψ)
for l(ϕ) − l(ψ) ≥ 0, l(ϕ) ≤ a for −l(ϕ) ≥ −a, l(ϕ) < a for ¬(l(ϕ) ≥ a) and l(ϕ) = a for
(l(ϕ) ≥ a) ∧ (l(ϕ) ≤ a). Define the length |f | of the likelihood formula f to be the number
of symbols required to write f , where each coefficient is counted as one symbol. Let LQU be
the language consisting of likelihood formulas. (The QU stands for quantitative uncertainty.
The name for the logic is taken from (Halpern, 2002).)
In FHM, the operator l was interpreted as either “probability” or “belief” (in the sense
of Dempster-Shafer). Under the first interpretation, a formula such as l(ϕ) + l(ψ) ≥ 2/3
would be intereted as “the probability of ϕ plus the probability of ψ is at least 2/3”. Here
we interpret l as upper probaiblity. Thus, the logic allows us to make statements about
inequalities involving upper probabilities.
To capture this interpretation, we assign a semantics to formulas in LQU using an upper
probability space, as defined in Section 2. Formally, an upper probability structure is a
tuple M = (Ω, Σ, P, π) where (Ω, Σ, P) is an upper probability space and π associates with
each state (or world) in Ω a truth assignment on the primitive propositions in Φ0 . Thus,
π(s)(p) ∈ {true, false} for s ∈ Ω and p ∈ Φ0 . Let [[p]]M = {s ∈ Ω : π(s)(p) = true}.
We call M measurable if for each p ∈ Φ0 , [[p]]M is measurable. If M is measurable then
[[ϕ]]M is measurable for all propositional formulas ϕ. In this paper, we restrict our attention
to measurable upper probability structures. Extend π(s) to a truth assignment on all
propositional formulas in a standard way, and associate with each propositional formula
the set [[ϕ]]M = {s ∈ Ω : π(s)(ϕ) = true}. An easy structural induction shows that [[ϕ]]M

62

A Logic for Reasoning about Upper Probabilities

is a measurable set. If M = (Ω, Σ, P, π), let
M |= θ1 l(ϕ1 ) + · · · + θk l(ϕk ) ≥ α iff θ1 P ∗ ([[ϕ1 ]]M ) + · · · + θk P ∗ ([[ϕk ]]M ) ≥ α
M |= ¬f iff M 6|= f
M |= f ∧ g iff M |= f and M |= g.
Note that LQU can express lower probabilities: it follows from the duality between upper
and lower probabilities that M |= −l(¬ϕ) ≥ β − 1 iff P∗ ([[¬ϕ]]M ) ≥ β.5
Consider the following axiomatization AXup of upper probability, which we prove sound
and complete in the next section. The key axioms are simply a translation into LQU of the
characterization of upper probability given in Theorem 2.3. As in FHM, AXup is divided
into three parts, dealing respectively with propositional reasoning, reasoning about linear
inequalities, and reasoning about upper probabilities.
Propositional reasoning
Taut. All instances of propositional tautologies in LQU (see below).
MP. From f and f =⇒ g infer g.
Reasoning about linear inequalities
Ineq. All instances of valid formulas about linear inequalities (see below).
Reasoning about upper probabilities
L1. l(false) = 0.
L2. l(true) = 1.
L3. l(ϕ) ≥ 0.
W
V
L4. l(ϕ1 ) + · · · + l(ϕm ) − nl(ϕ) ≥ k if ϕ ⇒ J⊆{1,... ,m}, |J|=k+n j∈J ϕj and
W
V
6
J⊆{1,... ,m}, |J|=k j∈J ϕj are propositional tautologies.
L5. l(ϕ) = l(ψ) if ϕ ⇔ ψ is a propositional tautology.
The only difference between AXup and the axiomatization for reasoning about probability
given in FHM is that the axiom l(ϕ ∧ ψ) + l(ϕ ∧ ¬ψ) = l(ϕ) in FHM, which expresses
the additivity of probability, is replaced by L4. Although it may not be immediately
obvious, L4 is the logical analogue of SUP3. To see this,
T first note that {{A1 , . . . , Am }}
covers
A
m
times
if
and
only
if
A
⊆
J⊆{1,... ,m}, |J|=n j∈J Aj . Thus, the formula ϕ ⇒
W
V
ϕ
says
that
ϕ
(more
J⊆{1,... ,m}, |J|=k+n j∈J j
Wprecisely, the setVof worlds where ϕ is true)
is covered k +n times by {{ϕ1 , . . . , ϕn }}, while J⊆{1,... ,m}, |J|=k j∈J ϕj says that the whole
space is covered k times by {{ϕ1 , . . . , ϕn }}; roughly speaking, the multiset {{ϕ1 , . . . , ϕn }}
is an (n, k)-cover of (ϕ, true). The conclusion of L4 thus corresponds to the conclusion of
5. Another approach, more in keeping with FHM, would be to interpret l as a lower probability measure.
On the other hand, interpreting l as an upper probability measure is more in keeping with the literature
on upper probabilities.
6. Note that, according to the syntax of LQU , ϕ1 , . . . , ϕm must be propositional formulas.

63

Halpern & Pucella

UP3. Note that in the same way that UP1 follows from UP2 and UP3, axiom L1 (as
well as L3) follows from L2 and L4.
Instances of Taut include all formulas of the form f ∨ ¬f , where f is an arbitrary
formula in LQU . We could replace Taut by a simple collection of axioms that characterize
propositional reasoning (see, for example, (Mendelson, 1964)), but we have chosen to focus
on aspects of reasoning about upper probability.
As in FHM, the axiom Ineq includes “all valid formulas about linear inequalities.” An
inequality formula is a formula of the form a1 x1 + · · · + an xn ≥ c, over variables x1 , . . . , xn .
An inequality formula is said to valid if it is true under every possible assignment of real
numbers to variables. To get an instance of Ineq, we replace each variable xi that occurs
in a valid inequality formula by a primitive likelihood term of the form l(ϕi ) (naturally each
occurence of the variable xi must be replaced by the same primitive likelihood term l(ϕi )).
As with Taut, we can replace Ineq by a sound and complete axiomatization for Boolean
combinations of linear inequalities. One such axiomatization is given in FHM.

4. Soundness and Completeness
A formula f is provable in an axiom system AX if f can be proven using the axioms and
rules of inferences of AX. AX is sound with respect to a class M of structures if every
formula provable in AX is valid in M (i.e., valid in every structure in M); AX is complete
with respect to M if every formula valid in M is provable in AX.
Our goal is to prove that AXup is a sound and complete axiomatization for reasoning
about upper probability (i.e., with respect to upper probability structures). The soundness
of AXup is immediate from our earlier disscussion. Completeness is, as usual, harder. Unfortunately, the standard technique for proving completeness in modal logic, which involves
considering maximal consistent sets and canonical structures (see, for example, (Popkorn,
1994)) does not work. We briefly review the approach, just to point out the difficulties.
The standard approach uses the following definitions. A formula σ is consistent with
an axiom system AX if ¬σ is not provable from AX. A finite set of formulas {σ1 , . . . , σn }
is consistent with AX if the formula σ1 ∧ · · · ∧ σn is consistent with AX; an infinite set
of formulas is consistent with AX if all its finite subsets are consistent with AX. F is
a maximal AX-consistent set if F is consistent with AX and no strict superset of F is
consistent with AX. If AX includes Taut and MP, then it is not hard to show, using
only propositional reasoning, that every AX-consistent set of formulas can be extended to
a maximal AX-consistent set.
To show that AX is complete with respect to some class M of structures, we must show
that every formula that is valid in M is provable in AX. To do this, it is sufficient to show
that every AX-consistent formula is satisfiable in some structure in M. Typically, this is
done by constructing what is called a canonical structure M c in M whose states are the
maximal AX-consistent sets, and then showing that a formula σ is satisfied in a world w
in M c iff σ is one of the formulas in the canonical set associated with world w.
Unfortunately, this approach cannot be used to prove completeness here. To see this,
consider the set of formulas
F 0 = {l(ϕ) ≤

1
, n = 1, 2, . . . } ∪ {l(ϕ) > 0}.
n
64

A Logic for Reasoning about Upper Probabilities

This set is clearly AXup –consistent according to our definition, since every finite subset
is satisfiable in an upper probability structure and AXup is sound with respect to upper
probability structures. It thus can be extended to a maximal AXup –consistent set F .
However, the set F 0 of formulas is not satisfiable: it is not possible to assign l(ϕ) a value
that will satisfy all the formulas at the same time. Hence, F is not satisfiable. Thus, the
canonical model approach, at least applied naively, simply will not work.
We take a different approach here, similar to the one taken in FHM. We do not try to
construct a single canonical model. Of course, we still must show that if a formula f is
AXup -consistent then it is satisfiable in an upper probability structure. We do this by an
explicit construction, depending on f . We proceed as follows.
By a simple argument, we can easily reduce the problem to the case where f is a
conjunction of basic likelihood formulas and negations of basic likelihood formulas. Let
N
p1 , . . . , pN be the primitive propositions that appear in f . Observe that there are 22
inequivalent propositional formulas over p1 , . . . , pN . The argument goes as follows. Let an
atom over p1 , . . . , pN be a formula of the form q1 ∧ . . . ∧ qN , where qi is either pi or ¬pi .
There are clearly 2N atoms over p1 , . . . , pN . Moreover, it is easy to see that any formula
N
over p1 , . . . , pN can be written in a unique way as a disjunction of atoms. There are 22
such disjunctions, so the claim follows.
Continuing with the construction of a structure satisfying f , let ρ1 , . . . , ρ22N be some
canonical listing of the inequivalent formulas over p1 , . . . , pN . Without loss of generality, we assume that ρ1 is equivalent to true, and ρ22N is equivalent to false. Since every propositional formula over p1 , . . . , pN is provably equivalent to some ρ, it follows
that f is provably equivalent to a formula f 0 where each conjunct of f 0 is of the form
θ1 l(ρ1 ) + · · · + θ22N l(ρ22N ) ≥ β. Note that the negation of such a formula has the form
θ1 l(ρ1 ) + · · · + θ22N l(ρ22N ) < β or, equivalently, (−θ1 )l(ρ1 ) + · · · + (−θ22N )l(ρ22N ) > −β.
Thus, the formula f gives rise in a natural way to a system of inequalities of the form:
θ1,1 l(ρ1 ) + · · · + θ1,22N l(ρ22N )
...
θr,1 l(ρ1 ) + · · · + θr,22N l(ρ22N )
0 l(ρ ) + · · · + θ 0
θ1,1
1
N l(ρ22N )
1,22
..
.
0
θs,1 l(ρ1 ) + · · · + θ0 2N l(ρ22N )
s,2

≥ α1
..
..
.
.
≥ αr
> β1
..
..
.
.
> βs .

(1)

We can express (1) as a conjunction of inequality formulas, by replacing each occurrence
of l(ρi ) in (1) by xi . Call this inequality formula f .
If f is satisfiable in some upper probability structure M , then we can take xi to be the
upper probability of ρi in M ; this gives a solution of f . However, f may have a solution
without f being satisfiable. For example, if f is the formula l(p) = 1/2 ∧ l(¬p) = 0, then
f has an obvious solution; f , however, is not satisfiable in an upper probability structure,
because the upper probability of the set corresponding to p and the upper probability of the
set corresponding to ¬p must sum to at least 1 in all upper probability structures. Thus,
we must add further constraints to the solution to force it to act like an upper probability.
UP1–UP3 or, equivalently, the axioms L1–L4, describe exactly what additional constraints are needed. The constraint corresponding to L1 (or UP1) is just x1 = 0, since
65

Halpern & Pucella

we have assumed ρ1 is the formula false. Similarly, the constraint corresponding to L2 is
N
x22N = 1. The constraint corresponding to L3 is xi ≥ 0, for i = 1, . . . , 22 . What about
L4? This seems to require an infinite collection of constraints, just as UP3 does.7
This is where UPF3 comes into play. It turns out that, if f is satisfiable at all, it
is satisfiable in a structure with at most 2N worlds, one for each atom over p1 , . . . , pN .
Thus, we need to add only instances of L4 where k, m, n < B2N and ϕ1 , . . . , ϕm , ϕ are all
among ρ1 , . . . , ρ22N . Although this is a large number of formulas (in fact, we do not know
exactly how large, since it depends on B2N , which we have not computed), it suffices for our
purposes that it is a finite number. For each of these instances of L4, there is an inequality
of the form a1 x1 + · · · + a22N x22N ≥ k. Let fˆ, the inequality formula corresponding to f ,
be the conjunction consisting of f , together with all the inequalities corresponding to the
relevant instances of L4, and the equations and inequalities x1 = 0, x22N = 1, and xi ≥ 0
N
for i = 1, . . . , 22 , corresponding to axioms L1–L3.
Proposition 4.1: The formula f is satisfiable in an upper probability structure iff the
inequality formula fˆ has a solution. Moreover, if fˆ has a solution, then f is satisfiable in
an upper probability structure with at most 2|f | worlds.
Theorem 4.2: The axiom system AXup is sound and complete for upper probability structures.
Proof: For soundness, it is easy to see that every axiom is valid for upper probability
structures, including L4, which represents UP3.
For completeness, we proceed as in the discussion above. Assume that formula f is not
satisfiable in an upper probability structure; we must show that f is AXup –inconsistent.
We first reduce f to a canonical form. Let g1 ∨ · · · ∨ gr be a disjunctive normal form
expression for f (where each gi is a conjunction of basic likelihood formulas and their
negations). Using propositional reasoning, we can show that f is provably equivalent to this
disjunction. Since f is unsatisfiable, each gi must also be unsatisfiable. Thus, it is sufficient
to show that any unsatisfiable conjunction of basic likelihood formulas and their negations is
inconsistent. Assume that f is such a conjunction. Using propositional reasoning and axiom
N
L5, f is equivalent to a likelihood formula f 0 that refers to 22 propositional formulas, say
ρ1 , . . . , ρ22N . Since f is unsatisfiable, so is f 0 . By Proposition 4.1, the inequality formula
fˆ0 corresponding to f 0 has no solution. Thus, by Ineq, the formula ¬f 00 that results by
replacing each instance of xi in fˆ0 by l(ρi ) is AXup –provable. All the conjuncts of f 00 that
are instances of axioms L1–L4 are AXup –provable. It follows that ¬f 0 is AXup –provable,
and hence so is ¬f .

5. Decision Procedure
Having settled the issue of the soundness and completeness of the axiom system AXup ,
we turn to the problem of the complexity of deciding satisfiability. Recall the problem of
7. Although we are dealing with only finitely many formulas here, ρ1 , . . . , ρ22N , recall that the formulas
ϕ1 , . . . , ϕm in L4 need not be distinct, so there are potentially infinitely many instances of L4 to deal
with.

66

A Logic for Reasoning about Upper Probabilities

satisfiability: given a likelihood formula f , we want to determine if there exists an upper
probability structure M such that M |= f . As we now show, the satisfiability problem is
NP-complete, and thus no harder than satisfiability for propositional logic.
For the decision problem to make sense, we need to restrict our language slightly. If
we allow real numbers as coefficients in likelihood formulas, we have to carefully discuss
the issue of representation of such numbers. To avoid these complications, we restrict our
language (in this section) to allow only integer coefficients. Note that we can still express
rational coefficients by the standard trick of “clearing the denominator”. For example, we
can express 32 l(ϕ) ≥ 1 by 2l(ϕ) ≥ 3 and l(ϕ) ≥ 23 by 3l(ϕ) ≥ 2. Recall that we defined
|f | to be the length of f , that is, the number of symbols required to write f , where each
coefficient is counted as one symbol. Define ||f || to be the length of the longest coefficient
appearing in f , when written in binary. The size of a rational number ab , denoted || ab ||,
where a and b are relatively prime, is defined to be ||a|| + ||b||.
A preliminary result required for the analysis of the decision procedure shows that if a
formula is satisfied in some upper probability structure, then it is satisfied in a structure
(Ω, Σ, P, π), which is “small” in terms of the number of states in Ω, the cardinality of the
set P of probability measures, and the size of the coefficients in f .
Theorem 5.1: Suppose f is a likelihood formula that is satisfied in some upper probability
structure. Then f is satisfied in a structure (Ω, Σ, P, π), where |Ω| ≤ |f |2 , Σ = 2Ω (every
subset of Ω is measurable), |P| ≤ |f |, µ(w) is a rational number such that ||µ(w)|| is
O(|f |2 ||f || + |f |2 log(|f |)) for every world w ∈ Ω and µ ∈ P, and π(w)(p) = false for every
world w ∈ Ω and every primitive proposition p not appearing in f .
Theorem 5.2: The problem of deciding whether a likelihood formula is satisfiable in an
upper probability structure is NP-complete.
Proof: For the lower bound, it is clear that a given propositional formula ϕ is satisfiable iff
the likelihood formula l(ϕ) > 0 is satisfiable, therefore the satisfiability problem is NP-hard.
For the upper bound, given a likelihood formula f , we guess a “small” satisfying structure
M = (Ω, Σ, P, π) for f of the form guaranteed to exist by Theorem 5.1. We can describe
such a model M in size polynomial in |f | and ||f ||. (The fact that π(w)(p) = false for
every world w ∈ Ω and every primitive proposition p not appearing in f means that we
must describe π only for propositions that appear in f .) We verify that M |= f as follows.
Let l(ψ) be an arbitrary likelihood term in f . We compute [[ψ]]M by checking the truth
assignment of each s ∈ Ω and seeing whether this
P truth assignment makes ψ true. We then
replace each occurence of l(ψ) in f by maxµ∈P { s∈[[ψ]]M µ(s)} and verify that the resulting
expression is true.

6. Conclusion
We have considered a logic with the same syntax as the logic for reasoning about probability, inner measures, and belief presented in FHM, with uncertainty interpreted as the upper
probability of a set of probability measures. Under this interpretation, we have provided
a sound and complete axiomatization for the logic. We further showed that the satisfiability problem is NP-complete (as it is for reasoning about probability, inner measures, and
67

Halpern & Pucella

beliefs), despite having to deal with probability structures with possibility infinitely many
states and infinite sets of probability measures. The key step in the axiomatization involves
finding a characterization of upper probability measures that can be captured in the logic.
The key step in the complexity result involves showing that if a formula is satisfiable at all,
it is satisfiable in a “small” structure, where the size of the state space, as well as the size
of the set of probability measures and the size of all probabilities involved, are polynomial
in the length of the formula.
Given the similarity in spirit of the results for the various interpretations of the uncertainty operator (as a probability, inner measure, belief function, and upper probability),
including the fact that the complexity of the decision problem is NP-complete in all cases,
we conjecture that there is some underlying result from which all these results should follow.
It would be interesting to make that precise.
In FHM, conditional probabilities as well as probabilities are investigated. We have not,
in this paper, discussed conditional upper probabilities. The main reason for this is that,
unlike probability, we cannot characterize conditional upper probabilities in terms of (unconditional) upper probabilities. Thus, our results really tell us nothing about conditional
upper probabilities. It might be of interest to consider a logic that allows conditional upper probabilities as primitive likelihood terms (that is, allows likelihood terms of the form
l(ϕ | ψ)). While there is no intrinsic difficult giving semantics to such a language, it is far
from clear what an appropriate axiomatization would be, or the effect of this extension on
complexity.
Finally, it is worth noting that the semantic framework developed here and in FHM
is in fact rich enough to talk about gambles (that is, real-valued functions over the set
of states) and the expectation of such gambles. Expectation functions can be defined for
the different measures of uncertainty, including upper probabilities, and it is not difficult to
extend the FHM logic in order to reason about expectation. One advantage of working with
expectation functions is that they are typically easier to characterize than the corresponding
measures; for instance, the characterization of expected upper probabilities is much simpler
than that of upper probabilities (Huber, 1981; Walley, 1981, 1991). However, getting a
complete axiomatization is quite nontrivial. We refer the reader to (Halpern & Pucella,
2002) for more details on this subject. We remark that Wilson and Moral (1994) take as
their starting point Walley’s notion of lower and upper previsions. They consider when
acceptance of one set of gambles implies acceptance of another gamble. Since acceptance
involves expectation, it cannot be expressed in the logic considered in this paper; however,
it can be expressed easiliy in the logic of (Halpern & Pucella, 2002).

Acknowledgments
A preliminary version of this paper appears in Uncertainty in Artificial Intelligence, Proceedings of the Seventeenth Conference, 2001. Thanks to Dexter Kozen, Jon Kleinberg, and
Hubie Chen for discussions concerning set covers. Vicky Weissman read a draft of this paper
and provided numerous helpful comments. We also thank the anonymous UAI and JAIR
reviewers for their useful comments and suggestions. This work was supported in part by
NSF under grants IRI-96-25901 and IIS-0090145, and ONR under grants N00014-00-1-03-

68

A Logic for Reasoning about Upper Probabilities

41, N00014-01-10-511, and N00014-01-1-0795. The first author was also supported in part
by a Guggenheim and a Fulbright Fellowship while on sabbatical leave; sabbatical support
from CWI and the Hebrew University of Jerusalem is also gratefully acknowledged.

Appendix A. Proofs
Proposition 2.1: Property (6) implies properties (1)-(5).
Proof: We introduce the following auxiliary properties to help derive the implications:
(7) P∗ (A) + P∗ (B) ≤ P∗ (A ∪ B) + P ∗ (A ∩ B).
(8) P∗ (A) + P∗ (B) ≤ P∗ (A ∩ B) + P ∗ (A ∪ B).
(9) P∗ (A ∪ B) + P∗ (A ∩ B) ≤ P∗ (A) + P ∗ (B).
(10) If A ∩ B = ∅, then
P∗ (A) + P∗ (B) ≤ P∗ (A ∪ B) ≤ P∗ (A) + P ∗ (B) ≤ P ∗ (A ∪ B) ≤ P ∗ (A) + P ∗ (B).
Using these properties, we show the following chain of implications:

(6) =⇒ (10)

(10) =⇒ (9) =⇒ (3)
(10) =⇒ (7) =⇒ (4)
(10) =⇒ (8) =⇒ (5)

(4), (5) =⇒ (1), (2).

The implication (4), (5) =⇒ (1), (2) follows easily by mutual induction on n. The
base case is the following instances of properties (4) and (5): P∗ (A ∪ B) ≥ P∗ (A) + P∗ (B) −
P ∗ (A ∩ B) and P ∗ (A ∪ B) ≤ P ∗ (A) + P ∗ (B) − P∗ (A ∩ B). The details are left to the reader.
We now prove the remaining implications.
(9) =⇒ (3): Since (9) is already one of the inequalities in (3), it remains to show that
it implies the other inequality in (3), that is, P∗ (A)+P ∗ (B) ≤ P ∗ (A∪B)+P ∗ (A∩B).
P ∗ (A ∪ B) + P ∗ (A ∩ B) = 1 − P∗ (A ∪ B) + 1 − P∗ (A ∩ B)
= 1 − P∗ (A ∩ B) + 1 − P∗ (A ∪ B)
= 2 − (P∗ (A ∩ B) + P∗ (A ∪ B))
= 2 − (P∗ (B ∩ A) + P∗ (B ∪ A))
≥ 2 − (P∗ (B) + P ∗ (A))
= 1 − P∗ (B) + 1 − P ∗ (A)
= P ∗ (B) + P∗ (A).

69

Halpern & Pucella

(7) =⇒ (4): Since (7) is already one of the inequalities in (4), it remains to show that
it implies the other inequality in (4), that is, P∗ (A∪B)+P ∗ (A∩B) ≤ P ∗ (A)+P ∗ (B).
P ∗ (A) + P ∗ (B) = 1 − P∗ (A) + 1 − P∗ (B)
= 2 − (P∗ (A) + P∗ (B))
≥ 2 − (P∗ (A ∪ B) + P ∗ (A ∩ B))
= 1 − P∗ (A ∪ B) + 1 − P ∗ (A ∩ B)
= 1 − P∗ (A ∩ B) + 1 − P ∗ (A ∪ B)
= P ∗ (A ∩ B) + P∗ (A ∪ B).
(8) =⇒ (5): Since (8) is already one of the inequalities in (5), it remains to show that
it implies the other inequality in (5), that is, P∗ (A∩B)+P ∗ (A∪B) ≤ P ∗ (A)+P ∗ (B).
P ∗ (A) + P ∗ (B) = 1 − P∗ (A) + 1 − P∗ (B)
= 2 − (P∗ (A) + P∗ (B))
≥ 2 − (P∗ (A ∩ B) + P ∗ (A ∪ B))
= 1 − P∗ (A ∩ B) + 1 − P ∗ (A ∪ B)
= 1 − P∗ (A ∪ B) + 1 − P ∗ (A ∩ B)
= P ∗ (A ∪ B) + P∗ (A ∩ B).
For the next implications, given A, B, let Z = A ∩ B.
(10) =⇒ (9):
P∗ (A ∪ B) = P∗ ((A − Z) ∪ B)
≤ P∗ (A − Z) + P ∗ (B)

[since (A − Z) ∩ B = ∅]

≤ P∗ ((A − Z) ∪ Z) − P∗ (Z) + P ∗ (B)
= P∗ (A) + P ∗ (B) − P∗ (A ∩ B).
(10) =⇒ (7):
P∗ (A ∪ B) = P∗ ((A − Z) ∪ B)
≥ P∗ (A − Z) + P∗ (B)
≥ P∗ ((A − Z) ∪ Z) − P ∗ (Z) + P∗ (B)
= P∗ (A) + P∗ (B) − P ∗ (A ∩ B).
(10) =⇒ (8):
P ∗ (A ∪ B) = P ∗ ((A − Z) ∪ B)
≥ P ∗ (A − Z) + P∗ (B)
≥ P∗ ((A − Z) ∪ Z) − P∗ (Z) + P∗ (B)
= P∗ (A) + P∗ (B) − P∗ (A ∩ B).
70

A Logic for Reasoning about Upper Probabilities

(6) =⇒ (10): Again, since (6) already comprises two of the inequalities in (10), it
remains to show that it implies the other two, that is, if A ∩ B = ∅, then
P∗ (A) + P∗ (B) ≤ P∗ (A ∪ B) ≤ P ∗ (A) + P∗ (B).
First, we show that P∗ (A) + P∗ (B) ≤ P∗ (A ∪ B). Using (6), we know that
P ∗ (A ∩ B) + P∗ (A) ≤ P ∗ ((A ∩ B) ∪ A) = P ∗ (B).
In other words, P ∗ (A ∩ B) ≤ P ∗ (B) + P∗ (A). From this, we derive that
P∗ (A ∪ B) = 1 − P ∗ (A ∪ B)
= 1 − P ∗ (A ∩ B)
≥ 1 − (P ∗ (B) − P∗ (A))
= 1 − P ∗ (B) + P∗ (A)
= P∗ (B) + P∗ (A).
Second, we show that P∗ (A ∪ B) ≤ P ∗ (A) + P∗ (B). Using (6), we know that
P ∗ (A ∩ B) + P ∗ (A) ≥ P ∗ ((A ∩ B) ∪ A) = P ∗ (B).
(The last equality follows from the fact that (A ∩ B) ∪ A = B when A ∩ B = ∅.) In
other words, P ∗ (A ∩ B) ≥ P ∗ (B) − P ∗ (A). From this, we derive that
P∗ (A ∪ B) = 1 − P ∗ (A ∪ B)
= 1 − P ∗ (A ∩ B)
≤ 1 − (P ∗ (B) − P ∗ (A))
= 1 − P ∗ (B) + P ∗ (A)
= P∗ (B) + P ∗ (A).
Proposition 2.2: For 0 <  < 18 , the function υ satisfies property (6), but is not an
upper probability measure. That is, we cannot find a set P 0 of probability measures such
that υ = (P 0 )∗ .
Proof: We are given 0 <  < 81 . It is easy to check mechanically that υ satisfies (6).
We now show that there is no set P 0 such that υ = (P 0 )∗ . By way of contradiction,
assume there is such a P 0 . By the properties of sup, this means that there is a µ ∈ P 0 such
that µ({a, b, c}) > 43 , since υ ({a, b, c}) = 34 +  > 34 . Consider this µ in detail. Since µ ∈ P,
we must have for all X ∈ Σ, X 6= {a, b, c}, that µ(X) ≤ (P 0 )∗ (X) = P ∗ (X). In particular,
µ({a, b}), µ({b, c}), µ({a, c}) ≤ 21 . Therefore,
3
µ({a, b}) + µ({b, c}) + µ({a, c}) ≤ .
2

(2)

However, from standard properties of probability, it follows that
µ({a, b}) + µ({b, c}) + µ({a, c}) = 2µ({a, b, c}) > 2 ×
71

3
3
= ,
4
2

Halpern & Pucella

which contradicts (2). Therefore, µ, and therefore P 0 cannot exist, and υ is not an upper
probability measure.
Theorem 2.4: There exists constants B0 , B1 , . . . such that if Σ is an algebra of subsets
of Ω and υ is a function υ : Σ → R, then there exists a set P of probability measures such
that υ = P ∗ if and only if υ satisfies the following properties:
UPF1. υ(∅) = 0,
UPF2. υ(Ω) = 1,
UPF3. for all integers m, n, k ≤ B|Ω| and all sets A1 , P
. . . , Am , if {{A1 , . . . , Am }}
is an (n, k)-cover of (A, Ω), then k + nυ(A) ≤ m
i=1 υ(Ai ).
Proof: In view of Theorem 2.3, we need only show that there exist constant B0 , B1 , . . .
such that a function υ satisfies UP3 iff it satisfies UPF3. Clearly, UP3 always implies
UPF3, so it is sufficient to show that there exists B0 , B1 , . . . such that UPF3 implies
UP3.
We need some terminology before proceeding. An exact (n, k)-cover of (A, Ω) is a cover
C of A with the property that every element of A appears in exactly n + k sets in C, and
every element of Ω − A appears in exactly k sets in C. Thus, while an (n, k)-cover of (A, Ω)
can have many extra sets, as long as the sets cover A at least n + k times and Ω k times,
an exact cover has only the necessary sets, with the right total number of elements. An
exact (n, k)-cover C of (A, Ω) is decomposable if there exists an exact (n1 , k1 )-cover C1 and
an exact (n2 , k2 )-cover C2 of (A, Ω) such that C1 and C2 form a nontrivial partition of C,
with n = n1 + n2 and k = k1 + k2 . Intuitively, an exact cover C is decomposable if it
can be split into two exact covers. It follows easily by induction that for any exact (n, k)cover, there exists a (not necessarily unique) finite set of nondecomposable exact covers
C1 , . . . , Cm
Pm(ni , ki )-cover, such that the Ci ’s a nontrivial partition of C
P, mwith Ci an exact
with n = i=1 ni and k = i=1 . (If C is itself nondecomposable, we can take m = 1 and
C1 = C.) One can easily verify that if C is an exact (n, k)-cover of (A, Ω) and C 0 ⊆ C is
an exact (n0 , k 0 )-cover of (A, Ω) with n0 + k 0 < n + k, then C is decomposable.
The following lemma highlights the most important property of exact covers from our
perspective. It says that for any set A ∈ Σ, there cannot be a “large” nondecomposable
exact cover of (A, Ω).
Lemma A.1: There exists a sequence B10 , B20 , B30 , . . . such that for all A ⊆ Ω, every exact
0
0
(n, k)-cover of (A, Ω) with n > B|Ω|
or k > B|Ω|
is decomposable.
Proof: It is clearly sufficient to show that for any finite Ω we can find a B|Ω| with the
required properties. Fix a Ω. Given A ⊆ Ω, we first show that there exists NA such that
if n > NA or k > NA , every exact (n, k)-cover of (A, Ω) is decomposable. Suppose for the
sake of contradiction that this is not the case. This means that we can find an infinite
sequence C1 , C2 , . . . such that Ci is a nondecomposable exact (ni , ki )-cover of (A, Ω), with
either n1 < n2 < . . . or k1 < k2 < . . . .
To derive a contradiction, we use the following lemma, known as Dickson’s Lemma
(Dickson, 1913).
72

A Logic for Reasoning about Upper Probabilities

Lemma A.2: Every infinite sequence of d-dimensional vectors over the natural
numbers contains a monotonically nondecreasing subsequence in the pointwise
ordering (where x ≤ y in the pointwise ordering iff xi ≤ yi for all i).
Proof: It is straightforward to prove by induction on k that if k ≤ d, then
every infinite sequence of vectors x1 , x2 , . . . contains a subsequence xi1 , xi2 , . . .
such that xij1 , xij2 , . . . is a nondecreasing sequence of natural numbers for all
j ≤ k. The base case is immediate from the observation that every infinite
sequence of natural numbers contains a nondecreasing subsequence. For the
inductive step, observe that if xi1 , xi2 , . . . is a subsequence such that xij1 , xij2 , . . .
is a nondecreasing sequence of natural numbers for all j ≤ k, then the sequence
1
2
xik+1
, xik+1
, . . . of natural numbers must have a nondecreasing subsequence. This
determines a subsequence of the original sequence with the appropriate property
for all j ≤ k + 1.
Let S1 , . . . , S2|Ω| be an arbitrary ordering of the 2|Ω| subsets of Ω. We can associate
C
C
with any cover C a 2|Ω| -dimensional vector xC = (xC
1 , . . . , x2|Ω| ), where xi is the number
of times the subset Si of Ω appears in the multiset C. The key property of this association
0
is that if C 0 and C are multisets, then C 0 ⊆ C iff xC ≤ xC in the pointwise ordering.
Consider the sequence of vectors xC1 , xC2 , . . . associated with the sequence C1 , C2 , . . .
of nondecomposable exact covers of (A, Ω). By Lemma A.2, there is a nondecreasing subsequence of vectors, xCi1 ≤ xCi2 ≤ · · · . But this means that Ci1 ⊆ Ci2 ⊆ · · · . Since
n1 < n2 < . . . or k1 < k2 < . . . , every cover in the chain must be distinct. But any pair
of exact covers in the chain is such that Ci ⊆ Ci+1 , meaning Ci+1 is decomposable, contradicting our assumption. Therefore, there must exist an NA such that any exact (n, k)-cover
of A with n > NA or k > NA is decomposable.
0
= max{NA : A ⊆ {1, . . . , |Ω|}}. It is easy to see that this choice
Now define B|Ω|
works.
0 , for N = 1, 2, . . . , where B 0 is as
To get the constants B1 , B2 , . . . , let BN = 2N BN
N
in Lemma A.1. We now show that UPF3 implies UP3 with this choice of B1 , B2 , . . . .
Assume that UPF3 holds. Fix Ω. Suppose that C = {{A1 , .P
. . , Am }} is an (n, k)-cover
of (A, Ω) with |C| = m. We want to show that k + nυ(A) ≤ m
i=1 υ(Ai ). We proceed as
follows.
The first step is to show that, without loss of generality, C is an exact (n, k)-cover of
(A, Ω). Let Bi consist of those states s ∈ Ai such that either s ∈ A and s appears in
more than n + k sets in A1 , . . . , Ai−1 or s ∈ Ω − A and s appears in more than k sets in
A1 , . . . , Ai−1 . Let A0i = Ai − Bi . Let C 0 = {{A01 , . . . , A0m }}. It is easy to check that C 0 is
an exact (n, k)-cover of (A, Ω). For if s ∈ A, then s appears in exactly n + k sets in C 0 (it
appears in A0j iff Aj is among the first n + k sets in C in which s appeared) and, similarly,
if s ∈ Ω − A, then s appears in exactly k sets in C 0 . Clearly if UP3 holds for C 0 , then it
holds for C, since υ(A0i ) ≤ υ(Ai ) for i = 1, . . . , m. Thus, we can assume without loss of
generality that C is an exact (n, k)-cover of A.
We can also assume without loss of generality that no set in C is empty (otherwise,
we can simply remove the empty sets in C; the resulting set is still an (n, k)-cover of
(A, Ω)). There are now two cases to consider. If max(m, n, k) ≤ B|Ω| , the desired result

73

Halpern & Pucella

follows from UPF3. If not, consider a decomposition of C into multisets C1 , . . . , Cp ,
where Ch is an exact (nh , kh )-cover of (A, Ω) and is not further decomposable. We claim
that max(|Ch |, nh , kh ) ≤ B|Ω| for h = 1, . . . , p. If nh > B|Ω| or kh > B|Ω| , then it is
immediate from Lemma A.1 that Ch can be further decomposed, contradicting
the fact
P
that Ch is not decomposable. And if |Ch | > B|Ω| , then observe that X∈Ch |X| ≥ |Ch |.
0 , there must be some s ∈ Ω which appears in at least 2B 0
Since |Ch | > B|Ω| = 2|Ω|B|Ω|
|Ω|
0 or k > B 0 .
sets in Ch . Since Ch is an exact (nh , kh )-cover, it follows that either nh > B|Ω|
h
|Ω|
But then, by Lemma A.1, Ch is decomposable, again a contradiction.
Now we can apply UPF3 to each of C1 , . . . , Ck to get
X
υ(X) − nh υ(A) ≥ kh .
X∈Ch

Since the Ch ’s form a decomposition of C, we have


p
p
X
X
X


kh
υ(X) − nh υ(X) ≥
X∈Ch

h=1

⇒

⇒

p
X
h=1



m
X

p
p
X
X
υ(Ai ) − (
nh )υ(A) ≥
kh

i=1

Pp

h=1





X

X∈Ch

υ(X) −

p
X

h=1

By decomposition, n = h=1 nh and k =
showing that UP3 holds, as desired.

nh υ(A) ≥

h=1

p
X

kh

h=1

h=1

Pp

h=1 kh ,

and therefore

Pm

i=1 υ(Ai ) − nυ(A)

≥ k,

Proposition 4.1: The formula f is satisfiable in an upper probability structure iff the
inequality formula fˆ has a solution. Moreover, if fˆ has a solution, then f is satisfiable in
an upper probability structure with at most 2|f | worlds.
Proof: Assume first that f is satisfiable. Thus there is some upper probability structure
M = (Ω, Σ, P, π) such that M |= f . As in Section 4, let p1 , . . . , pN be the primitive propositions that appear in f , and let ρ1 , . . . , ρ22N be some canonical listing of the inequivalent
formulas over p1 , . . . , pN . Without loss of generality, we assume that ρ1 is equivalent to
true, and ρ22N is equivalent to false. Define the vector x∗ by letting x∗i = P ∗ ([[ρi ]]M ),
N
for 1 ≤ i ≤ 22 . Since M |= f , it is immediate that x∗ is a solution to the inequality
2N

formula f . Moreover, since ρ1 = false and ρ2
= true, it follows that x∗1 = 0 (since
P ∗ ([[false]]M ) = P ∗ (∅) = 0) and x∗2N = 1 (since P ∗ ([[true]]M ) = P ∗ (Ω) = 1). Final2
ly, consider a conjunct of fˆ corresponding to an instance of L4; suppose it has the form
xi1 + · · · xW
Since this conjunct appears
in fˆ, it must be the case that
im − nxim+1 ≥ k. V
W
V
(ρim+1 ⇒ J⊆{1,... ,m}, |J|=k+n J⊆{1,... ,m}, j∈J ρij ) ∧ ( |J|=k j∈J ρij ) is a propositional tautology. Thus, it follows that [[ρi1 ]]M , . . . , [[ρim ]]M is an (n, k)-cover for ([[ρim+1 ]]M , [[true]]M ).
It follows from UP3 that
P ∗ ([[ρi1 ]]M ) + · · · + P ∗ ([[ρim ]]M ) − nP ∗ ([[ρ]]M ) ≥ k.
74

A Logic for Reasoning about Upper Probabilities

Thus, x∗ is a solution to the inequality formulas corresponding to L4. Hence, x∗ is a solution
to fˆ.
For the converse, assume that x∗ is a solution to fˆ. We construct an upper probability
structure M = (S, E, P, π) such that M |= f as follows. Let p1 , . . . , pN be the primitive
propositions appearing in f . Let S = {δ1 , . . . , δ2N } be the atoms over p1 , . . . , pN . Let E be
the set of all subsets of S. As observed earlier, every propositional formula over p1 , . . . , pn
is equivalent to a unique disjunction of atoms. Thus, we can get a canonical collection
ρ1 , . . . , ρ22N of inequivalent formulas over p1 , . . . , pn by identifying each formula ρi with a
different element of E, where ρ1 corresponds to the empty set and ρ22N corresponds to all
of S. Define a set function υ by taking υ({δi1 , . . . , δij }) = x∗i if ρi is the disjunction of the
atoms δi1 , . . . , δij . Let π(δ)(ρ) = true iff δ ⇒ ρ.
It is now sufficient to show that υ is an upper probability (of a set P of probability
measures), since then it is clear that (S, E, P, π) |= f (since x∗ is a solution to fˆ, the system
of inequalities derived from formula f ). To do this, by Theorem 2.4, it suffices to verify
UPF1, UPF2, and UPF3, using B2N in UPF3, since |S| = 2N .
UPF1: υ(∅) = x∗1 = 0.
UPF2: υ(S) = x∗2N = 1.
2

UPF3: Suppose that A and A1 , . . . , Am are in E and satisfy the premises of property UPF3, with k, m, n ≤ B2N . Let ρi1 , . . . , ρim , ρim+1 be the canonical
to A1 , . . . , AmW, A, respectively. Clearly,
A ⊆
V
S formulas corresponding
T
iff
ρ
⇒
ρ
A
i
i
i
m+1
j
J⊆{1,...
J⊆{1,... ,m}, |J|=k+n j∈J
S ,m}, |J|=k+n Tj∈J j is a
propositional tautology and similarly Ω ⊆ J⊆{1,... ,m}, |J|=k j∈J Aij iff
W
V
Pm
J⊆{1,... ,m}, |J|=k j∈J ρij is a propositional tautology. Thus,
j=1 xij −
ˆ
x
≥ k is one of the inequality formulas in f . Thus, it follows that
Pim+1
m
∗
∗
≥ k, as desired. By our definition of υ, we therefore have
j=1 xij − xiP
m+1
k + nυ(A) ≤ m
i=1 υ(Ai ), and so UPF3 holds.
Theorem 5.1: Suppose f is a likelihood formula that is satisfied in some upper probability
structure. Then f is satisfied in a structure (Ω, Σ, P, π), where |Ω| ≤ |f |2 , Σ = 2Ω (every
subset of Ω is measurable), |P| ≤ |f |, µ(w) is a rational number such that ||µ(w)|| is
O(|f |2 ||f || + |f |2 log(|f |)) for every world w ∈ Ω and µ ∈ P, and π(w)(p) = false for every
world w ∈ Ω and every primitive proposition p not appearing in f .
Proof: The first step in the proof involves showing that if P is a set of probability measures
defined on an algebra Σ of a finite space Ω, we can assume without loss of generality that
for each set X ∈ Σ, there is a probability measure µX ∈ P such that µX (X) = P ∗ (X)
(rather than P ∗ (X) just being the sup of µ(X) for µ ∈ P).
Lemma A.3: Let P be a set of probability measures defined on an algebra Σ over a finite set
Ω. Then there exists a set P 0 of probability measures such that, for each X ∈ Σ, P ∗ (X) =
(P 0 )∗ (X); moreover, there is a probability measure µX ∈ P 0 such that µX (X) = P ∗ (X). In
addition, for any interpretation π, if M = (Ω, Σ, P, π) and M = (Ω, Σ, P 0 , π), then for all
likelihood formulas f , M |= f iff M 0 |= f .

75

Halpern & Pucella

Proof: Since Σ is finite, to show that P 0 exists, it clearly suffices to show that, for each
X ∈ Σ, there is a probability measure µX such that µX (X) = P ∗ (X) and, if P 0 = P ∪{µX },
then P ∗ (Y ) = (P 0 )∗ (Y ) for all Y ∈ Σ.
Given X, if there exists µ ∈ P such that µ(X) = P ∗ (X), then we are done. Otherwise,
we construct a sequence µ1 , µ2 , . . . of probability measures in P such that limi µi (X) =
P ∗ (X) and, for all Y ∈ Σ, the sequence µi (Y ) converges to some limit. Let X1 , . . . , Xn
be an enumeration of the sets in Σ, with X1 = X. We inductively construct a sequence of
measures µm1 , µm2 , . . . in P for m ≤ n such that µmi (Xj ) converges to a limit for i ≤ k
and limi→∞ µmi (X) = P ∗ (X). For m = 1, we know there must be a sequence µ11 , µ12 , . . .
of measures in P such that µ1i (X) converges to P ∗ (X). For the inductive step, if m < n,
suppose we have constructed an appropriate sequence µm1 , µm2 , . . . . Consider the sequence
of real numbers µmi (Xm+1 ). Using the Bolzano-Weierstrass theorem (Rudin, 1976) (which
says that every sequence of real numbers has a convergent subsequence), this sequence has
a convergent subsequence. Let µ(m+1)1 , µ(m+1)2 , . . . be the subsequence of µm1 , µm2 , . . .
which generates this convergent subsequence. This sequence of probability measures clearly
has all the required properties. This completes the inductive step.
Define µX (Y ) = limi→∞ µni (Y ). It is easy to check that that µX is indeed a probability
measure, that µX (X) = P ∗ (X), and if P 0 = P ∪ {µX }, that P ∗ (Y ) = (P 0 )∗ (Y ) for all
Y ∈ Σ. This shows that an appropriate set P 0 exists.
Now, given π, let M = (Ω, Σ, P, π) and M 0 = (Ω, Σ, P 0 , π). A straightforward induction
on the structure of f shows that M |= f iff M 0 |= f . For the base case:
(Ω, Σ, P, π) |= a1 l(ϕ1 ) + · · · + an l(ϕn ) ≥ a
⇔ a1 P ∗ ([[ϕ1 ]]M ) + · · · + an P ∗ ([[ϕn ]]M ) ≥ a
⇔ a1 (P 0 )∗ ([[ϕ1 ]]M 0 ) + · · · + an (P 0 )∗ ([[ϕn ]]M 0 ) ≥ a
⇔ (Ω, Σ, P 0 , π) |= a1 l(ϕ1 ) + · · · + an l(ϕn ) ≥ a.
The others cases are trivial.
Just as in FHM, to prove Theorem 5.1, we make use of the following lemma which
can be derived from Cramer’s rule (Shores, 1999) and simple estimates on the size of the
determinant (see also (Chvátal, 1983) for a simpler variant):
Lemma A.4: If a system of r linear equalities and/or inequalities with integer coefficients
each of length at most l has a nonnegative solution, then it has a nonnegative solution with at
most r entries positive, and where the size of each member of the solution is O(rl +r log(r)).
Continuing with the proof of Theorem 5.1, suppose that f is satisfiable in an upper
probability structure. By Proposition 4.1, the system fˆ of equality formulas has a solution,
so f is satisfied in a upper probability structure with a finite state space. Thus, by Lemma A.3, f is satisfied in a structure M = (Ω, Σ, P, π) such that for all X ∈ Σ, there exists
µX ∈ P such that µX (X) = P ∗ (X).
As in the completeness proof, we can write f in disjunctive normal form. Each disjunct
g is a conjunction of at most |f | − 1 basic likelihood formulas and their negations. Since
M |= f , there must be some disjunct g such that M |= g. Suppose that g is the conjunction
of r basic likelihood formulas and s negations of basic likelihood formulas. Let p1 , . . . , pN
76

A Logic for Reasoning about Upper Probabilities

be the primitive formulas appearing in f . Let δ1 , . . . , δ2N be the atoms over p1 , . . . , pN .
As in the proof of completeness, we derive a system of equalities and inequalities from g.
It is a slightly more complicated system, however. Recall that each propositional formula
over p1 , . . . , pN is a disjunction of atoms. Let ϕ1 , . . . , ϕk be the propositional formulas that
appear in g. Notice that k < |f | (since there are some symbols in f , such as the coefficients,
that are not in the propositional formulas). The system of equations and inequalities we
construct involve variables xij , where i = 1, . . . , k and j = 1, . . . , 2N . Intuitively, xij
represents µ[[ϕi ]]M ([[δ j ]]M ), where µ[[ϕi ]]M ∈ P is such that µ[[ϕi ]]M ([[ϕi ]]M ) = P ∗ ([[ϕi ]]M ). Thus,
the system includes k < |f | equations of the following form,
xi1 + · · · + xi2N = 1,
for i = 1, . . . , k. Since µ[[ϕi ]]M ([[ϕi ]]M ) ≥ µ([[ϕi ]]M ) for all µ ∈ P, if Ei is the subset of
W
{1, . . . , 2N } such that ϕi = j∈Ei δj , the system includes k 2 − k inequalities of the form
X
X
xij ≥
xi 0 j ,
j∈Ei

i0

j∈Ei

i0 .

for each pair i,
such that i 6=
For each conjunct in g of the form θ1 l(ϕ1 ) + · · · +
θn l(ϕk ) ≥ α, there is a corresponding inequalityP
where, roughly speaking, we replace l(ϕi )
by µ[[ϕi ]]M ([[ϕ]]M ).8 Since µ[[ϕi ]]M corresponds to j∈Ei xij , the appropriate inequality is
k
X

θi

i=1

X

xij ≥ α.

j∈Ei

Negations of such formulas correspond to a negated inequality formula; as before, this is
equivalent to a formula of the form
−(

k
X
i=1

θi

X

xij ) > −α.

j∈Ei

Notice that there are at most |f | inequalities corresponding to the conjuncts of g. Thus,
altogether, there are at most k(k − 1) + 2|f | < |f |2 equations and inequalities in the
system (since k < |f |). We know that the system has a nonnegative solution (taking
xij to be µ[[ϕi ]]M ([[δ j ]]M )). It follows from Lemma A.4 that the system has a solution
x∗ = (x∗11 , . . . , x∗12N , . . . , x∗k1 , . . . , x∗k2N ) with t ≤ |f |2 entries positive, and with each entry
of size O(|f |2 ||f || + |f |2 log(|f |)).
We use this solution to construct a small structure satisfying the formula f . Let I =
{i : x∗ij is positive, for some j}; suppose that I = {i1 , . . . , it0 }, for some t0 ≤ t. Let
M = (S, E, P, π) where S has t0 states, say s1 , . . . , st0 , and E consists of all subsets of S. Let
π(sh ) be the truth assignment corresponding to the formula δih , that is, π(sh )(p) = true
if and only if δih ⇒ p (and where π(sh )(p) = false if p does not appear in f ). Define
P = {µj : 1 ≤ i ≤ k}, where µj (sh ) = x∗ih j . It is clear from the construction that M |= f .
Since |P| = k < |f |, |S| = t0 ≤ t ≤ |f |2 and µj (sh ) = x∗ih j , where, by construction, the size
of x∗ih j is O(|f |2 ||f || + |f |2 log(|f |)), the theorem follows.
8. For simplicity here, we are implicitly assuming that each of the formulas ϕi appears in each conjunct of
g. This is without loss of generality, since if ϕi does not appear, we can put it in, taking θi = 0.

77

Halpern & Pucella

Appendix B. Proof of the Characterization of Upper Probabilities
To make this paper self-contained, in this appendix we give a proof of Theorem 2.3. The
proof we give is essentially that of Anger and Lembcke (1985). Walley (1991) gives an
alternate proof along somewhat similar lines. Note that the functional g̃ we define in our
proof corresponds to the construction in Walley’s Natural Extension Theorem, which is
needed in his version of this result.
Theorem 2.3: Suppose that Ω is a set, Σ is an algebra of subsets of Ω, and υ : Σ → R.
Then there exists a set P of probability measures with υ = P ∗ if and only if υ satisfies the
following three properties:
UP1. υ(∅) = 0,
UP2. υ(Ω) = 1,
UP3. for all integers m, n, k and all subsets A1 , . . . , A
Pm in Σ, if {{A1 , . . . , Am }}
is an (n, k)-cover of (A, Ω), then k + nυ(A) ≤ m
i=1 υ(Ai ).
Proof: The “if” direction of the characterization is straightforward. Given P = {µi }i∈I a
set of probability measures, we show P ∗ satisfies UP1-UP3.
UP1: P ∗ (∅) = sup{µi (∅)} = sup{0} = 0
UP2: P ∗ (Ω) = sup{µi (Ω)} = sup{1} = 1
S
T
UP3: GivenSA1 , . . . , Am and
T A such that A ⊆ J⊆{1,... ,m},|J|=k+n j∈J Aij and
Ω ⊆ J⊆{1,... ,m},|J|=k j∈J Aij , then for any i we have kµi (Ω) + nµi (A) ≤
Pm
P
Pm
µi (Aj ), that is kP+ nµi (A) ≤ m
j=1 µi (Aj ) ≤ supi { j=1 µi (Aj )} ≤
Pj=1
m
m
∗ (A ). But sup {k+nµ (A)} = k+n sup {µ (A)} =
j
i
i
i
i
j=1 supi {µi (Aj )} =
j=1 P P
∗ (A ), as required.
k + nP ∗ (A), so k + nP ∗ (A) ≤ m
P
j
j=1
As for the “only if” direction, we first prove a general lemma relating the problem to the
Hahn-Banach Theorem. Some general definitions are needed. Suppose that we are given a
space W and an algebra F of subsets of W . Let K be the vector space generated by the
indicator functions 1X defined by

0 if x 6∈ X
1X (x) =
1 if x ∈ X,
for X ∈ F. A sublinear functional on K is a mapping c : K → R such that c(αh) = αc(h)
for α ≥ 0 and c(h1 + h2 ) ≤ c(h1 ) + c(h2 ) for all h1 , h2 . A sublinear functional is increasing
if h ≥ 0 implies c(h + h0 ) ≥ c(h0 ) for all h0 ∈ K. The following result is a formulation of the
well-known Hahn-Banach Theorem (see, for example, (Conway, 1990)).
Theorem (Hahn-Banach): Let K be a vector space over R, and let g be a sublinear
functional on K. If M is a linear subspace in K and λ : M → R is a linear functional such
that λ(x) ≤ g(x) for all x in M, then there is a linear functional λ0 : K → R such that
λ0 |M = λ and λ0 (x) ≤ g(x) for all x in K.
Lemma B.1: Let g : F → [0, 1] be such that g(W ) = 1 and suppose that there is an
increasing sublinear functional g̃ on K such that
78

A Logic for Reasoning about Upper Probabilities

1. g̃(1K ) = g(K) for K ∈ F;
2. g̃(h) ≤ 0 if h ≤ 0;
3. g̃(−1) ≤ −1 (where g̃(α) is identified with g̃(α1W )).
Then g is an upper probability measure.
Proof: We show that g is an upper probability by exhibiting a set {µX : X ∈ Σ} of
probability measures, with the property that µX (X) = g(X) and µX (Y ) ≤ g(X) for Y 6= X.
Each probability measure µX is constructed through an application of the Hahn-Banach
Theorem.
Given X ∈ F, define the linear functional λ on the subspace generated by 1X by
λ(α1X ) = αg̃(1X ). We claim that λ(h) ≤ g̃(h) for all h in the subspace. Since the elements
of the subspace have the form α1X , there are two cases to consider: α ≥ 0 and α < 0.
If α ≥ 0, then λ(α1X ) = αg̃(1X ) = g̃(α1X ), since g̃ is sublinear. Moreover, 0 = g̃(0) =
g̃(−1X + 1X ) ≤ g̃(−1X ) + g̃(1X ), so g̃(−1X ) ≥ −g̃(1X ). Thus, if α > 0, then
λ(−α1X ) = −αg̃(1X ) ≤ αg̃(−1X ) = g̃(−α1X ).
Now, by the Hahn-Banach Theorem, we can extend λ to a linear functional λ0 on all of
K such that λ0 (h) ≤ g̃(h) for all h. We claim that (a) λ0 (1Y ) ≥ 0 for all Y ∈ K and (b)
λ0 (1) = 1. For (a), note that λ0 (−1Y ) ≤ g̃(−1Y ) ≤ 0 by assumption, so λ0 (1Y ) ≥ 0. For
(b), note that λ0 (1) ≤ g̃(1) = g(W ) = 1 and that λ0 (1) = −λ0 (−1) ≥ −g̃(−1) ≥ 1 (since
g̃(−1) ≤ −1, by assumption).
Define µX (Y ) = λ0 (1Y ). Since λ0 (1W ) = 1, µX (W ) = 1. If Y and Y 0 are disjoint, it is
immediate from the linearity of λ that µX (Y ∪ Y 0 ) = µX (Y ) + µX (Y 0 ). By construction,
µX (Y ) ≤ g̃(1Y ) = g(Y ) for any Y 6= X, and µX (X) = λ(1X ) = g̃(1X ) = g(X). Bottom
line: there is a probability measure µX dominated by g such that µX (X) = g(X).
Take P = {µX : X ∈ Σ}. Since for any X we have that µX (X) = g(X) and
µX (Y ) ≤ g(X) (if Y 6= X), we have P ∗ (X) = µX (X) = g(X). Therefore, g = P ∗ .
The main result follows by showing how to construct, from a function υ satisfying the
properties of Theorem 2.3, a sublinear functional c on K with the required properties.
Suppose that g : Σ → R is a function satisfying UP1-UP3. As we show in the discussion
after Theorem 2.3 in the text, UP1-UP3 show that the range of g is in fact [0, 1].PSince g
m
satisfies UP3, if {{K1 , . . . , Km }} is an (n, k)-cover
Pm of (K, Ω), we have k +ng(K) ≤ i=1 Ki .
This is equivalent
to saying that k + n1K ≤ Pi=1 1Ki . Hence, for all K1 , . . . , Km such that
P
m
k + n1K ≤ m
1
i=1 Ki , we have k + ng(K) ≤
i=1 g(Ki ), or equivalently
m

k
1X
− +
g(Ki ) ≥ g(K).
n n

(3)

i=1

This observation motivates the following definition of the functional g̃ : K → R ∪
{−∞, ∞}:
(
)
m
m
k
1X
k
1X
g̃(h) = inf − +
g(Ki ) : m, n, k ∈ N, m, n > 0, K1 , . . . , Km ∈ F, − +
1Ki ≥ h .
n n
n n
i=1

i=1

Our goal now is to show that g̃ satisfies the conditions of Lemma B.1.
79

Halpern & Pucella

• It is almost immediate from the definitions that g̃ is increasing: if h ≥ 0 and − nk +
1 Pm
k
1 Pm
0
0
i=1 1Ki ≥ h + h , then − n + n
i=1 1Ki ≥ h .
n
• To see that g̃ is sublinear, note that it is easy to see using the properties of inf that
g̃(h1 + h2 ) ≤ g̃(h1 ) + g̃(h2 ). To show that g̃(αh) = αg̃(h) for α ≥ 0, first observe that
the definition of g̃ is equivalent to
(
)
m
m
X
X
inf −β +
βi g(Ki ) : m ∈ N, β, βi ∈ R+ , K1 , . . . , Km ∈ F − β +
βi 1Ki ≥ h .
i=1

i=1

Consider first the case α > 0. Then
(
)
m
m
X
X
g̃(αh) = inf −β +
βi g(Ki ) : − β +
βi 1Ki ≥ αh
i=1

= inf

(

−β +

m
X
i=1

= α inf

(

i=1

)
m
1X
β
βi 1Ki ≥ h
βi g(Ki ) : − +
α α

β
1
− +
α α

i=1

m
X
i=1

)
m
β
1X
βi g(Ki ) : − +
βi 1Ki ≥ h
α α
i=1

= αg̃(h).
For α = 0, it is clear from the definition of g̃ that g̃(1∅ ) ≤ g(∅). From (3) it follows
that g̃(1∅ ) ≥ g(∅), and hence g̃(0) = g̃(1∅ ) = g(∅) = 0.
• It is immediate from the definition of g̃ that g̃(1K ) ≤ g(K) for K ∈ F; the fact that
g̃(1K ) = g(K) now follows from (3).
• It is immediate from the definition that g̃(−1) ≤ −1.
• If h ≤ 0, then −h ≥ 0; since g̃ is increasing, g̃(h) ≤ g̃(−h + h) = g̃(0), and since g̃ is
sublinear, g̃(0) = 0.
Since the conditions of Lemma B.1 are satisfied, g is an upper probability measure.

References
Anger, B., & Lembcke, J. (1985). Infinitely subadditive capacities as upper envelopes of
measures. Zeitschrift für Wahrscheinlichkeitstheorie und Verwandte Gebiete, 68, 403–
414.
Chvátal, V. (1983). Linear Programming. W. Freeman and Co., San Francisco, Calif.
Conway, J. B. (1990). A Course in Functional Analysis (Second edition). No. 96 in Graduate
Texts in Mathematics. Springer-Verlag.
Dempster, A. P. (1967). Upper and lower probabilities induced by a multivalued mapping.
Annals of Mathematical Statistics, 38 (2), 325–339.

80

A Logic for Reasoning about Upper Probabilities

Dickson, L. E. (1913). Finiteness of the odd perfect and primitive abundant numbers with
n distinct prime factors. American Journal of Mathematics, 35 (4), 413–422.
Fagin, R., & Halpern, J. Y. (1991). Uncertainty, belief and probability. Computational
Intelligence, 7 (3), 160–173.
Fagin, R., Halpern, J. Y., & Megiddo, N. (1990). A logic for reasoning about probabilities.
Information and Computation, 87 (1,2), 78–128.
Giles, R. (1982). Foundations for a theory of possibility. In Gupta, M. M., & Sanchez, E.
(Eds.), Fuzzy Information and Decision Processes, pp. 183–195. North-Holland.
Halpern, J. Y. (2002). Reasoning about uncertainty. Book manuscript.
Halpern, J. Y., & Pucella, R. (2002). Reasoning about expectation. In Proc. Eighteenth
Conference on Uncertainty in Artificial Intelligence (UAI 2002).
Huber, P. J. (1976). Kapazitäten statt Wahrscheinlichkeiten? Gedanken zur Grundlegung
der Statistik. Jber. Deutsch. Math.-Verein, 78, 81–92.
Huber, P. J. (1981). Robust Statistics. Wiley Interscience.
Kyburg, Jr., H. E. (1987). Bayesian and non-Bayesian evidential updating. Artificial Intelligence, 31, 271–293.
Lorentz, G. G. (1952). Multiply subadditive functions. Canadian Journal of Mathematics,
4 (4), 455–462.
Mendelson, E. (1964). Introduction to Mathematical Logic. Van Nostrand, New York.
Popkorn, S. (1994). First Steps in Modal Logic. Cambridge University Press, Cambridge;
New York.
Rudin, W. (1976). Principles of Mathematical Analysis (Third edition). McGraw-Hill.
Shafer, G. (1976). A Mathematical Theory of Evidence. Princeton University Press, Princeton, NJ.
Shores, T. (1999). Applied Linear Algebra and Matrix Analysis (Second edition). McGrawHill.
Smith, C. A. B. (1961). Consistency in statistical inference and decision. Journal of the
Royal Statistical Society, Series B, 23, 1–25.
Walley, P. (1981). Coherent lower (and upper) probabilities. Manuscript, Dept. of Statistics,
University of Warwick.
Walley, P. (1991). Statistical Reasoning with Imprecise Probabilities. Chapman and Hall.
Williams, P. M. (1976). Indeterminate probabilities. In Przelecki, M., Szaniawski, K., &
Wójciki, E. (Eds.), Formal Methods in the Methodology of Empirical Sciences, pp.
229–246.
Wilson, N., & Moral, S. (1994). A logical view of probability. In Proc. 11th European
Conference on Artificial Intelligence (ECAI-94), pp. 71–95.
Wolf, G. (1977). Obere und Untere Wahrscheinlichkeiten. Doctoral dissertation, Eidgenössischen Technischen Hochschule, Zurich. (Diss. ETH 5884).

81

Journal of Articial Intelligence Research 17 (2002) 171-228

Submitted 3/02; published 9/02

Towards Adjustable Autonomy for the Real World
scerri@isi.edu
pynadath@isi.edu
tambe@usc.edu

Paul Scerri
David V. Pynadath
Milind Tambe
Information Sciences Institute and Computer Science Department
University of Southern California
4676 Admiralty Way, Marina del Rey, CA 90292 USA

Abstract

Adjustable autonomy refers to entities dynamically varying their own autonomy, transferring decision-making control to other entities (typically agents transferring control to
human users) in key situations. Determining whether and when such transfers-of-control
should occur is arguably the fundamental research problem in adjustable autonomy. Previous work has investigated various approaches to addressing this problem but has often
focused on individual agent-human interactions. Unfortunately, domains requiring collaboration between teams of agents and humans reveal two key shortcomings of these previous
approaches. First, these approaches use rigid one-shot transfers of control that can result in
unacceptable coordination failures in multiagent settings. Second, they ignore costs (e.g.,
in terms of time delays or eects on actions) to an agent's team due to such transfers-ofcontrol.
To remedy these problems, this article presents a novel approach to adjustable autonomy, based on the notion of a transfer-of-control strategy. A transfer-of-control strategy
consists of a conditional sequence of two types of actions: (i) actions to transfer decisionmaking control (e.g., from an agent to a user or vice versa) and (ii) actions to change an
agent's pre-specied coordination constraints with team members, aimed at minimizing
miscoordination costs. The goal is for high-quality individual decisions to be made with
minimal disruption to the coordination of the team. We present a mathematical model
of transfer-of-control strategies. The model guides and informs the operationalization of
the strategies using Markov Decision Processes, which select an optimal strategy, given an
uncertain environment and costs to the individuals and teams. The approach has been
carefully evaluated, including via its use in a real-world, deployed multi-agent system that
assists a research group in its daily activities.
1.

Introduction

Exciting, emerging application areas ranging from intelligent homes (Lesser et al., 1999), to
routine organizational coordination (Pynadath et al., 2000), to electronic commerce (Collins
et al., 2000a), to long-term space missions (Dorais et al., 1998) utilize the decision-making
skills of both agents and humans. These new applications have brought forth an increasing
interest in agents' adjustable autonomy (AA), i.e., in entities dynamically adjusting their own
level of autonomy based on the situation (Mulsiner & Pell, 1999). Many of these exciting
applications will not be deployed unless reliable AA reasoning is a central component. With
AA, an entity need not make all decisions autonomously; rather it can choose to reduce its
own autonomy and transfer decision-making control to other users or agents, when doing so
c 2002 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Scerri, Pynadath & Tambe
is expected to have some net benet (Dorais et al., 1998; Barber, Goel, & Martin, 2000a;
Hexmoor & Kortenkamp, 2000).
A central problem in AA is to determine whether and when transfers of decision-making
control should occur. A key challenge is to balance two potentially conicting goals. On the
one hand, to ensure that the highest-quality decisions are made, an agent can transfer control to a human user (or another agent) whenever that user has superior decision-making
expertise.1 On the other hand, interrupting a user has high costs and the user may be
unable to make and communicate a decision, thus such transfers-of-control should be minimized. Previous work has examined several dierent techniques that attempt to balance
these two conicting goals and thus address the transfer-of-control problem. For example,
one technique suggests that decision-making control should be transferred if the expected
utility of doing so is higher than the expected utility of making an autonomous decision
(Horvitz, Jacobs, & Hovel, 1999). A second technique uses uncertainty as the sole rationale
for deciding who should have control, forcing the agent to relinquish control to the user
whenever uncertainty is high (Gunderson & Martin, 1999). Yet other techniques transfer
control to a user if an erroneous autonomous decision could cause signicant harm (Dorais
et al., 1998) or if the agent lacks the capability to make the decision (Ferguson, Allen, &
Miller, 1996).
Unfortunately, these previous approaches to transfer-of-control reasoning and indeed
most previous work in AA, have focused on domains involving a single agent and a single
user, isolated from interactions with other entities. When applied to interacting teams of
agents and humans, where interaction between an agent and a human impacts the interaction with other entities, these techniques can lead to dramatic failures. In particular,
the presence of other entities as team members introduces a third goal of maintaining coordination (in addition to the two goals already mentioned above), which these previous
techniques fail to address. Failures occur for two reasons. Firstly, these previous techniques
ignore team related factors, such as costs to the team due to incorrect decisions or due to
delays in decisions during such transfers-of-control. Secondly (and more importantly), these
techniques use one-shot transfers-of-control, rigidly committing to one of two choices: (i)
transfer control and wait for input (choice H ) or (ii) act autonomously (choice A). However,
given interacting teams of agents and humans, either choice can lead to costly failures if the
entity with control fails to make or report a decision in a way that maintains coordination.
For instance, a human user might be unable to provide the required input due to a temporary communication failure; this may cause an agent to fail in its part of a joint action,
as this joint action may be dependent on the user's input. On the other hand, forcing a
less capable entity to make a decision simply to avoid miscoordination can lead to poor
decisions with signicant consequences. Indeed, as seen in Section 2.2, when we applied a
rigid transfer-of-control decision-making to a domain involving teams of agents and users,
it failed dramatically.
Yet, many emerging applications do involve multiple agents and multiple humans acting
cooperatively towards joint goals. To address the shortcomings of previous AA work in such
domains, this article introduces the notion of a transfer-of-control strategy. A transfer-ofcontrol strategy consists of a pre-dened, conditional sequence of two types of actions: (i)
1. While the AA problem in general involves transferring control from one entity to another, in this paper,
we will typically focus on interactions involving autonomous agents and human users.

172

Towards Adjustable Autonomy for the Real World
actions to transfer decision-making control (e.g., from an agent to a user or vice versa);
(ii) actions to change an agent's pre-specied coordination constraints with team members,
rearranging activities as needed (e.g., reordering tasks to buy time to make the decision).
The agent executes such a strategy by performing the actions in order, transferring control to
the specied entity and changing coordination as required, until some point in time when the
entity currently in control exercises that control and makes the decision. Thus, the previous
choices of H or A are just two of many dierent and possibly more complex transfer-ofcontrol strategies. For instance, an ADAH strategy implies that an agent initially attempts
to make an autonomous decision. If the agent makes the decision autonomously the strategy
execution ends there. However, there is a chance that it is unable to make the decision
in a timely manner, perhaps because its computational resources are busy with higher
priority tasks. To avoid miscoordination the agent executes a D action which changes the
coordination constraints on the activity. For example, a D action could be to inform other
agents that the coordinated action will be delayed, thus incurring a cost of inconvenience
to others but buying more time to make the decision. If it still cannot make the decision, it
will eventually take action H , transferring decision-making control to the user and waiting
for a response. In general, strategies can involve all available entities and contain many
actions to change coordination constraints. While such strategies may be useful in singleagent single-human settings, they are particularly critical in general multiagent settings, as
discussed below.
Transfer-of-control strategies provide a exible approach to AA in complex systems
with many actors. By enabling multiple transfers-of-control between two (or more) entities,
rather than rigidly committing to one entity (i.e., A or H ), a strategy attempts to provide the
highest quality decision, while avoiding coordination failures. In particular, in a multiagent
setting there is often uncertainty about whether an entity will make a decision and when it
will do so, e.g., a user may fail to respond, an agent may not be able to make a decision as
expected or a communication channel may fail. A strategy addresses such uncertainty by
planning multiple transfers of control to cover for such contingencies. For instance, with the
ADH strategy, an agent ultimately transfers control to a human to attempt to ensure that
some response will be provided in case the agent is unable to act. Furthermore, explicit
coordination-change actions, i.e., D actions, reduce miscoordination eects, for a cost, while
better decisions are being made. Finally, since the utility of transferring control or changing
coordination is dependent on the actions taken afterwards, the agent must plan a strategy
in advance to nd the sequence of actions that maximizes team benets. For example,
reacting to the current situation and repeatedly taking and giving control as in the strategy
ADHADH : : : may be more costly than planning ahead, making a bigger coordination
change, and using a shorter ADH strategy. We have developed a decision theoretic model
of such strategies, that allows the expected utility of a strategy to be calculated and, hence,
strategies to be compared.
Thus, a key AA problem is to select the right strategy, i.e., one that provides the
benet of high-quality decisions without risking signicant costs in interrupting the user and
miscoordination with the team. Furthermore, an agent must select the right strategy despite
signicant uncertainty. Markov decision processes (MDPs) (Puterman, 1994) are a natural
choice for implementing such reasoning because they explicitly represent costs, benets and
uncertainty as well as doing lookahead to examine the potential consequences of sequences
173

Scerri, Pynadath & Tambe
of actions. In Section 4, a general reward function is presented for an MDP that results in an
agent carefully balancing risks of incorrect autonomous decisions, potential miscoordination
and costs due to changing coordination between team members. Detailed experiments were
performed on the MDP, the key results of which are as follows. As the relative importance
of central factors, such as the cost of miscoordination, was varied the resulting MDP policies
varied in a desirable way, i.e., the agent made more decisions autonomously if the cost of
transferring control to other entities increased. Other experiments reveal a phenomenon not
reported before in the literature: an agent may act more autonomously when coordination
change costs are either too low or too high, but in a \middle" range, the agent tends to act
less autonomously.
Our research has been conducted in the context of a real-world multi-agent system,
called Electric Elves (E-Elves) (Chalupsky, Gil, Knoblock, Lerman, Oh, Pynadath, Russ,
& Tambe, 2001; Pynadath et al., 2000), that we have used for over six months at the
University of Southern California, Information Sciences Institute. The E-Elves assists a
group of researchers and a project assistant in their daily activities, providing an exciting
opportunity to test AA ideas in a real environment. Individual user proxy agents called
Friday (from Robinson Crusoe's servant Friday) act in a team to assist with rescheduling
meetings, ordering meals, nding presenters and other day-to-day activities. Over the course
of several months, MDP-based AA reasoning was used around the clock in the E-Elves,
making many thousands of autonomy decisions. Despite the unpredictability of the user's
behavior and the agent's limited sensing abilities, the MDP consistently made sensible
AA decisions. Moreover, many times the agent performed several transfers-of-control to
cope with contingencies such as a user not responding. One lesson learned when actually
deploying the system was that sometimes users wished to inuence the AA reasoning, e.g.,
to ensure that control was transferred to them in particular circumstances. To allow users
to inuence the AA reasoning, safety constraints are introduced that allow users to prevent
agents from taking particular actions or ensuring that they do take particular actions.
These safety constraints provide guarantees on the behavior of the AA reasoning, making
the basic approach more generally applicable and, in particular, making it more applicable
to domains where mistakes have serious consequences.
The rest of this article is organized as follows. Section 2 gives a detailed description of the
AA problem and presents the Electric Elves as a motivating example application. Section
3 presents a formal model of transfer-of-control strategies for AA. (Readers not interested
in the mathematical details may wish to skip over Section 3.) The operationalization of
the strategies via MDPs is described in Section 4. In Section 5, the results of detailed
experiments are presented. Section 6 looks at related work, including how earlier AA work
can be analyzed within the strategies framework. Section 7 gives a summary of the article.
Finally, Section 8 outlines areas where the work could be extended to make it applicable to
more applications.
2.

Adjustable Autonomy { The Problem

The general AA problem has not been previously formally dened in the literature, particularly for a multiagent context. In the following, a formal denition of the problem is given
so as to clearly dene the task for the AA reasoning. The team, which may consist entirely
174

Towards Adjustable Autonomy for the Real World
of agents or include humans, has some joint activity, . Each entity in the team works
cooperatively on the joint activity. The agent, A, has a role, , in the team. Depending
on the specic task, some or all of the roles will need to be performed successfully in order
for the joint activity to succeed. The primary goal of the agent is the success of  which
it pursues by performing . Performing  requires that one or more non-trivial decisions
are made. To make a decision, d, the agent can draw upon n other entities from a set
E = fe1 : : : en g, which typically includes the agent itself. Each entity in E (e.g., a human
user) is capable of making decision d. The entities in E are not necessarily part of the
team performing . Dierent agents and users will have diering abilities to make decisions
due to available computational resources, access to relevant information, etc. Coordination
constraints, , exist between  and the roles of other members of the team. For example,
various roles might need to be executed simultaneously or in a certain order or with some
combined quality or total cost. A critical facet of the successful completion of the joint task
, given its jointness, is to ensure that coordination between team members is maintained,
i.e.,  are not violated. Thus, we can describe an AA problem instance with the tuple:
hA; ; ; ; d; E i.
From an AA perspective, the agent can take two types of actions for a decision, d.
First, it can transfer control to an entity in E capable of making that decision. In general,
there are no restrictions on when, how often or for how long decision-making control can
be transferred to a particular entity. Typically, the agent can also transfer decision-making
control to itself. In general, we assume that when the agent transfers control, it does not
have any guarantee on the exact time of response or exact quality of the decision made by
the entity to which control is transferred. In fact, in some cases it will not know whether
the entity will be able to make a decision at all or even whether the entity will know it has
decision-making control, e.g., if control was transferred via email, the agent may not know
if the user actually read the email.
The second type of action that an agent can take is to request changes in the coordination constraints, , between team members. A coordination change gives the agent
the possibility of changing the requirements surrounding the decision to be made, e.g., the
required timing, cost or quality of the decision, which may allow it to better fulll its responsibilities. A coordination change might involve reordering or delaying tasks or it may
involve changing roles, or it may be a more dramatic change where the team pursues  in
a completely dierent way. Changing coordination has some cost, but it may be better
to incur this cost than violate coordination constraints, i.e., incur miscoordination costs.
Miscoordination between team members will occur for many reasons, e.g., a constraint that
limits the total cost of a joint task might be violated if one team member incurs a higher
than expected cost and other team members do not reduce their costs. In this article, we
are primarily concerned with constraints related to the timing of roles, e.g., ordering constraints or requirements on simultaneous execution. This in turn, usually requires that the
agent guards against delayed decisions although it can also require that a decision is not
made too soon.
Thus, the AA problem for the agent, given a problem instance, hA; ; ; ; d; E i, is to
choose the transfer-of-control or coordination-change actions that maximizes the overall
expected utility of the team. In the remainder of this section we describe a concrete, real175

Scerri, Pynadath & Tambe
world domain for AA (Section 2.1) and an initial failed approach that motivates our solution
(Section 2.2).

2.1 The Electric Elves
This research was initiated in response to issues that arose in a real application and the
resulting approach was extensively tested in the day-to-day running of that application.
The Electric Elves (E-Elves) is a project at USC/ISI to deploy an agent organization in
support of the daily activities of a human organization (Pynadath et al., 2000; Chalupsky
et al., 2001). We believe this application to be fairly typical of future generation applications involving teams of agents and humans. The operation of a human organization
requires the performance of many everyday tasks to ensure coherence in organizational
activities, e.g., monitoring the status of activities, gathering information and keeping everyone informed of changes in activities. Teams of software agents can aid organizations
in accomplishing these tasks, facilitating coherent functioning and rapid, exible response
to crises. A number of underlying AI technologies support the E-Elves, e.g., technologies
devoted to agent-human interactions, agent coordination, accessing multiple heterogeneous
information sources, dynamic assignment of organizational tasks, and deriving information
about organization members (Chalupsky et al., 2001). While these technologies are useful,
AA is fundamental to the eective integration of the E-Elves into the day-to-day running
of a real organization and, hence, is the focus of this paper.
The basic design of the E-Elves is shown in Figure 1(a). Each agent proxy is called
Friday (after Robinson Crusoes' man-servant Friday) and acts on behalf of its user in the
agent team. The design of the Friday proxies is discussed in detail in (Tambe, Pynadath,
Chauvat, Das, & Kaminka, 2000) (where they are referred to as TEAMCORE proxies).
Currently, Friday can perform several tasks for its user. If a user is delayed to a meeting,
Friday can reschedule the meeting, informing other Fridays, who in turn inform their users.
If there is a research presentation slot open, Friday may respond to the invitation to present
on behalf of its user. Friday can also order its user's meals (see Figure 2(a)) and track the
user's location, posting it on a Web page. Friday communicates with users using wireless
devices, such as personal digital assistants (PALM VIIs) and WAP-enabled mobile phones,
and via user workstations. Figure 1(b) shows a PALM VII connected to a Global Positioning
Service (GPS) device, for tracking users' locations and enabling wireless communication
between Friday and a user. Each Friday's team behavior is based on a teamwork model,
called STEAM (Tambe, 1997). STEAM encodes and enforces the constraints between roles
that are required for the success of the joint activity, e.g., meeting attendees should arrive at
a meeting simultaneously. When a role within the team needs to be lled, STEAM requires
that a team member is assigned responsibility for that role. To nd the best suited person,
the team auctions o the role, allowing it to consider a combination of factors and assign
the best suited user. Friday can bid on behalf of its user, indicating whether its user is
capable and/or willing to ll a particular role. Figure 2(b) shows a tool that allows users
to view auctions in progress and intervene if they so desire. In the auction in progress, Jay
Modi's Friday has bid that Jay is capable of giving the presentation, but is unwilling to do
so. Paul Scerri's agent has the highest bid and was eventually allocated the role.

176

Towards Adjustable Autonomy for the Real World

Friday

Friday

Friday

Friday

(a)

(b)

Figure 1: (a) Overall E-Elves architecture, showing Friday agents interacting with users.
(b)Palm VII for communicating with users and GPS device for detecting their
location.

177

Scerri, Pynadath & Tambe
AA is critical to the success of the E-Elves since, despite the range of sensing devices,
Friday has considerable uncertainty about the user's intentions and even location; hence,
Friday will not always have the appropriate information to make correct decisions. On the
other hand, while the user has the required information, Friday cannot continually ask the
user for input, since such interruptions are disruptive and time-consuming. There are four
decisions in the E-Elves to which AA reasoning is applied: (i) whether a user will attend a
meeting on time; (ii) whether to close an auction for a role; (iii) whether the user is willing
to perform an open team role; and (iv) if and what to order for lunch. In this paper, we
focus on the AA reasoning for two of those decisions: whether a user will attend a meeting
on time and whether to close an auction for a role. The decision as to whether a user will
attend a meeting on time is the most often used and most diÆcult of the decisions Friday
faces. We briey describe the decision to close an auction and later show how an insight
provided by the model of strategies led to a signicant reduction in the amount of code
required to implement the AA reasoning for that decision. The decision to volunteer a user
for a meeting is similar to the earlier decisions, and omitted for brevity; the decision to order
lunch is currently implemented in a simpler fashion and is not (at least as yet) illustrative
of the full set of complexities.
A central decision for Friday, which we describe in terms of our problem formulation,
hA; ; ; ; d; E i, is whether its user will attend a meeting at the currently scheduled meeting time. In this case, Friday is the agent, A. The joint activity, , is for the meeting
attendees to attend the meeting simultaneously. Friday acts as proxy for its user, hence
its role, , is to ensure that its user arrives at the currently scheduled meeting time. The
coordination constraint, , between Friday's role and the roles of other Fridays is that they
occur simultaneously, i.e., the users must attend at the currently scheduled time. If any
attendee arrives late, or not at all, the time of all the attendees is wasted; on the other
hand, delaying a meeting is disruptive to users' schedules. The decision, d, is whether the
user will attend the meeting or not and could be made by either Friday or the user, i.e.,
E = fuser; Fridayg. Clearly, the user will be often better placed to make this decision.
However, if Friday transfers control to the user for the decision, it must guard against miscoordination, i.e., having the other attendees wait, while waiting for a user response. Some
decisions are potentially costly, e.g., incorrectly telling the other attendees that the user
will not attend, and Friday should avoid taking them autonomously. To buy more time for
the user to make the decision or for itself to gather more information, Friday could change
coordination constraints with a D action. Friday has several dierent D actions at its disposal, including delaying the meeting by dierent lengths of time, as well as being able to
cancel the meeting entirely. The user can also request a D action, e.g., via the dialog box in
Figure 5(a), to buy more time to make it to the meeting. If the user decides a D is required,
Friday is the conduit through which other Fridays (and hence their users) are informed.
Friday must select a sequence of actions, either transferring control to the user, delaying or
cancelling the meeting or autonomously announcing that the user will or will not attend,
to maximize the utility of the team.
The second AA decision that we look at is the decision to close an auction for an open
role and assign a user to that role.2 In this case, the joint activity, , is the group research
2. There are also roles for submitting bids to the auction but the AA for those decisions is simpler, hence
we do not focus on them here.

178

Towards Adjustable Autonomy for the Real World

(a)

(b)

Figure 2: (a) Friday transferring control to the user for a decision whether to order lunch.
(b) The E-Elves auction monitoring tool.
meeting and the role, , is to be the auctioneer. Users will not always submit bids for the
role immediately; in fact, the bids may be spread out over several days, or some users might
not bid at all. The specic decision, d, on which we focus is whether to close the auction
and assign the role or continue waiting for incoming bids. Once individual team members
provide their bids, the auctioneer agent or human team leader decides on a presenter based
on that input (E = fuser; auctioneer agentg). The team expects a willing presenter to do
a high-quality research presentation, which means the presenter will need some time to
prepare. Thus, the coordination constraint,  is that the most capable, willing user must
be allocated to the role with enough time to prepare the presentation. Despite individually
responsible actions, the agent team may reach a highly undesirable decision, e.g., assigning
the same user week after week, hence there is advantage in getting the human team leader's
input. The agent faces uncertainty (e.g., will better bids come in?), costs (i.e., the later
the assignment, the less time the presenter has to prepare), and needs to consider the
possibility that the human team leader has some special preference about who should do
a presentation at some particular meeting. By transferring control, the agent allows the
human team leader to make an assignment. For this decision, a coordination-change action,
D, would reschedule the research meeting. However, relative to the cost of cancelling the
meeting, the cost of rescheduling is too high for rescheduling to be a useful action.

2.2 Decision-Tree Approach
One logical avenue of attack on the AA problem for the E-Elves was to apply an approach
used in a previously reported, successful meeting scheduling system, in particular CAP
(Mitchell, Caruana, Freitag, McDermott, & Zabowski, 1994). Like CAP, Friday learned
user preferences using C4.5 decision-tree learning (Quinlan, 1993). Friday recorded values
of a dozen carefully selected attributes and the user's preferred action (identied by asking
179

Scerri, Pynadath & Tambe
the user) whenever it had to make a decision. Friday used the data to learn a decision
tree that encoded its autonomous decision making. For AA, Friday also asked if the user
wanted such decisions taken autonomously in the future. From these responses, Friday
used C4.5 to learn a second decision tree which encoded its rules for transferring control.
Thus, if the second decision tree indicated that Friday should act autonomously, it would
take the action suggested by the rst decision tree. Initial tests with the C4.5 approach
were promising (Tambe et al., 2000), but a key problem soon became apparent. When
Friday encountered a decision for which it had learned to transfer control to the user, it
would wait indenitely for the user to make the decision, even though this inaction caused
miscoordination with teammates. In particular, other team members would arrive at the
meeting location, waiting for a response from the user's Friday, but they would end up
completely wasting their time as no response arrived. To address this problem, if a user
did not respond within a xed time limit (ve minutes), Friday took an autonomous action.
Although performance improved, when the resulting system was deployed 24/7 it led to
some dramatic failures, including:
1. Example 1: Tambe's (a user) Friday incorrectly cancelled a meeting with the division
director because Friday over-generalized from training examples.
2. Example 2: Pynadath's (another user) Friday incorrectly cancelled the group's weekly
research meeting when a time-out forced the choice of an (incorrect) autonomous
action.
3. Example 3: A Friday delayed a meeting almost 50 times, each time by 5 minutes.
It was correctly applying a learned rule but ignoring the nuisance to the rest of the
meeting participants.
4. Example 4: Tambe's Friday automatically volunteered him for a presentation, but he
was actually unwilling. Again Friday over-generalized from a few examples and when
a timeout occurred it took an undesirable autonomous action.
Clearly, in a team context, rigidly transferring control to one agent (user) failed. Furthermore, using a time-out that rigidly transferred control back to the agent, when it was
not capable of making a high-quality decision, also failed. In particular, the agent needed
to better avoid taking risky decisions by explicitly considering their costs (example 1), or
take lower cost actions to delay meetings to buy the user more time to respond (example 2
and 4). Furthermore, as example 3 showed, the agent needed to plan ahead, to avoid taking
costly sequences of actions that could be replaced by a single less costly action (example
3). In theory, using C4.5 Friday might have eventually been able to learn rules that would
successfully balance costs and deal with uncertainty and handle all the special cases and so
on, but a very large amount of training data would be required.
3.

Strategies for Adjustable Autonomy

To avoid rigid one-shot transfers of control and allow team costs to be considered, we
introduce the notion of a transfer-of-control strategy, which is dened as follows:
180

Towards Adjustable Autonomy for the Real World
Denition 3.1 A transfer-of-control strategy is a pre-dened, conditional sequence of two

types of actions: (i) actions to transfer decision-making control (e.g., from an agent to
a user or other agents, or vice versa) and (ii) actions to change an agent's pre-specied
coordination constraints with team members, aimed at minimizing miscoordination costs.

The agent executes a transfer-of-control strategy by performing the specied actions in
sequence, transferring control to the specied entity and changing coordination as required,
until some point in time when the entity currently in control exercises that control and
makes the decision. Considering multi-step strategies allows an agent to exploit decisionmaking sources considered too risky to exploit without the possibility of retaking control.
For example, control could be transferred to a very capable but not always available decision
maker then taken back if the decision was not made before serious miscoordination occurred.
More complex strategies, potentially involving several coordination changes, give the agent
the option to try several decision-making sources or to be more exible in getting input from
high-quality decision makers. As a result, transfer-of-control strategies specically allow an
agent to avoid costly errors, such as those enumerated in the previous section.3
Given an AA problem instance, hA; ; ; ; d; E i , agent A can transfer decision-making
control for a decision d to any entity ei 2 E , and we denote such a transfer-of-control
action with the symbol representing the entity, i.e., transferring control to ei is denoted as
ei . When the agent transfers decision-making control, it may stipulate a limit on the time
that it will wait for a response from that entity. To capture this additional stipulation,
we denote transfer-of-control actions with this time limit, e.g., ei (t) represents that ei has
decision-making control for a maximum time of t. Such an action has two possible outcomes:
either ei responds before time t and makes the decision, or it does not respond and decision
d remains unmade at time t. In addition, the agent has some mechanism by which it
can change coordination constraints (denoted D) to change the expected timing of the
decision. The D action changes the coordination constraints, , between team members.
The action has an associated value, Dvalue , which species its magnitude (i.e., how much
the D has alleviated the temporal pressure), and a cost, Dcost , which species the price paid
for making the change. We can concatenate such actions to specify a complete transferof-control strategy. For instance, the strategy H (5)A would specify that the agent rst
relinquishes control and asks entity H (denoting the H uman user). If the user responds
with a decision within ve minutes, then there is no need to go further. If not, then the
agent proceeds to the next transfer-of-control action in the sequence. In this example, this
next action, A, species that the agent itself make the decision and complete the task.
No further transfers of control occur in this case. We can dene the space of all possible
strategies with the following regular expression:

S = (E  R)((E  R) + D)

(1)

where (E  R) is all possible combinations of entity and maximum time.
For readability, we will frequently omit the time specications from the transfer-ofcontrol actions and instead write just the order in which the agent transfers control among
3. In some domains, it may make sense to attempt to get input from more than one entity at once, hence
requiring strategies that have actions that might be executed in parallel. However, in this work, as a rst
step, we do not consider such strategies. Furthermore, they are not relevant for the domains at hand.

181

Scerri, Pynadath & Tambe
the entities and executes Ds (e.g., we will often write HA instead of H (5)A). If time
specications are omitted, we assume the transfers happen at the optimal times,4 i.e.,
the times that lead to highest expected utility. If we consider strategies with the same
sequence of actions but dierent timings to be the same strategy, the agent has O(jE jk )
possible strategies to select from, where k is the maximum length of the strategy and jE j
is the number of entities. Thus, the agent has a wide range of options, even if practical
considerations lead to a reasonable upper bound on k and jE j. The agent must select the
strategy that maximizes the overall expected utility of .
In the rest of this section, we present a mathematical model of transfer-of-control strategies for AA and use that model to guide the search for a solution. Moreover, the model
provides a tool for predicting the performance of various strategies, justifying their use
and explaining observed phenomena of their use. Section 3.1 presents the model of AA
strategies in detail. Section 3.2 reveals key properties of complex strategies, including dominance relationships among strategies. Section 3.3 examines the E-Elves application in the
light of the model, to make specic predictions about some properties that a successful
AA approach reasoning for that application class will have. These predictions shape the
operationalization of strategies in Section 4.

3.1 A Mathematical Model of Strategies
The transfer-of-control model presented in this section allows calculation of the expected
utility (EU) of individual strategies, thus allowing strategies to be compared. The calculation of a strategy's EU considers four elements: the likely relative quality of dierent
entities' decisions; the probability of getting a response from an entity at a particular time;
the cost of delaying a decision; and the costs and benets of changing coordination constraints. While other parameters might also be modeled in a similar manner, our experience
with the E-Elves and other AA work suggests that these parameters are the critical ones
across a wide range of joint activities.
The rst element of the model is the expected quality of an entity's decision. In general,
we capture the quality of an entity's decision at time t with the functions EQ = fEQde (t) :
R ! Rg. The quality of a decision reects both the probability that the entity will make an
\appropriate" decision and the costs incurred if the decision is wrong. The expected quality
of a decision is calculated in a decision theoretic way, by multiplying the probability of each
outcome, i.e., each decision, by the utility of that decision, i.e., the cost or benet of that
decision. For example, the higher the probability that the entity will make a mistake, the
lower the quality, even lower if the mistakes might be very costly. The quality of decision
an entity will make can vary over time as the information available to it changes or as it has
more time to \think". The second element of the model is the probability that an entity
will make a decision if control is transferred to it. The functions, P = fP>e (t) : R ! [0; 1]g,
represent continuous probability distributions over the time that
the entity e will respond.
R t0 ei
That is, the probability that ei will respond before time t0 is 0 P> (t)dt.
The third element of the model is a representation of the cost of inappropriate timing
of a decision. In general, not making a decision until a particular point in time incurs some
4. The best time to transfer control can be found, e.g., by dierentiating the expected utility equation in
Section 3.1 and solving for 0.

182

Towards Adjustable Autonomy for the Real World
cost that is a function of both the time, t, and the coordination constraints, , between
team members. As stated earlier, we focus on cases of constraint violations due to delays
in making decisions. Thus, the cost is due to the violation of the constraints caused by
not making a decision until that point in time. We can write down a wait-cost function :
W = f (; t) which returns the cost of not making a decision until a particular point in time
given coordination constraints, . This miscoordination cost is a fundamental aspect of our
model given our emphasis on multiagent domains. It is called a \wait cost" because it models
the miscoordination that arises while the team \waits" for some entity to make the ultimate
decision. In domains like E-Elves, the team incurs such wait costs in situations where (for
example) other meeting attendees have assembled in a meeting room at the time of the
meeting, but are kept waiting without any input or decision from Friday (potentially because
it cannot provide a high-quality decision, nor can it get any input from its user). Notice
that dierent roles will lead to dierent wait cost functions, since delays in the performance
of dierent roles will have dierent eects on the team. We assume that there is some
point in time, , after which no more costs accrue, i.e., if t   then f (; t) = f (; ).
At the deadline, , the maximum cost due to inappropriate timing of a decision has been
incurred. Finally, we assume that, in general, until , the wait cost function is nondecreasing, reecting the idea that bigger violations of constraints lead to higher wait costs.
The nal element of the model is the coordination-change action, D, which moves the agent
further away from the deadline and hence reduces the wait costs that are incurred. We
model the eect of the D by letting W be a function of t Dvalue (rather than t) after
the D action and as having a xed cost, Dcost , incurred immediately upon its execution.
For example, in the E-Elves domain, suppose at the time of the meeting, Friday delays the
meeting by 15 minutes (D action). Then, in the following time period, it will incur the
relatively low cost of not making a decision 15 minutes before the meeting (t Dvalue ),
rather than the relatively high cost of not making the decision at the time of the meeting.
Other, possibly more complex, models of a D action could also be used.
We use these four elements to compute the EU of an arbitrary strategy, s. The utility
derived from a decision being made at time t by the entity in control is the quality of the
entity's decision minus the costs incurred from waiting until t, i.e., EUedc (t) = EQdec (t)
W (t). If a coordination-change action has been taken it will also have an eect on utility.
Until a coordination change of value Dvalue is taken at some time , the incurred wait cost
is W (). Then, between  and t, the wait cost incurred is W (t Dvalue ) W ( Dvalue ).
Thus, if a D action has been taken at time  for cost Dcost and with value Dvalue , the
utility from a decision at time t (t > ) is: EUedc (t) = EQdec (t) W () W ( Dvalue ) +
W (t Dvalue) Dcost. To calculate the EU of an entire strategy, we multiply the response
probability mass function's value at each instant by the EU of receiving a response at that
instant, and then integrate over the products. Hence, the EU for a strategy s given a
problem instance, hA; ; ; ; d; E i , is:
Z 1
h
A;;;

;d;E
i
EUs
=
P (t)EUedc (t) :dt
(2)
0 >
If a strategy involves several actions, we need to ensure that the probability of response
function and the wait-cost calculation reect the control situation at that point in the
strategy. For example, if the user, H , has control at time t, P> (t) should reect H's
183

Scerri, Pynadath & Tambe

W (0)

EUAd = EQdA (0)
EUed
d
EUeA

=

=



Z

0
Z T

0

EUedDeA =

P>(t)  (EQde (t)
P>(t)  (EQde (t)

W (t)):dt +
W (t)):dt +

1
P>(t)  (EQde (t)


Z

1

Z

T

R

(3)

W (D)):dt (4)

P>(t):dt  (EQda (T )

W (T )) (5)

d
0
0 P> (t)(EQe (t) W (t)):dt +
d
 P>(t)(EQe (t) W () + W ( Dvalue ) W (t Dvalue ) Dcost ):dt +
R1
d
T P> (t)(EQA (t) W () + W ( Dvalue ) W (T Dvalue ) Dcost ):dt

(6)

RT

Table 1: General AA EU equations for sample transfer of control strategies.
probability of responding at t, i.e., P>H (t0 ). To this end, we can break the integral from
Equation 2 into separate terms, with each term representing one segment of the strategy,
e.g., for a strategy UA there would be one term for when U has control and another for
when A has control.
Using this basic technique for writing down EU calculations, we can write down the
specic equations for arbitrary transfer-of-control strategies. Equations 3-6 in Table 1
show the EU equations for the strategies A, e , eA and e DeA respectively. The equations
assume that the agent, A, can make the decision instantaneously (or at least, with no delay
signicant enough to aect the overall value of the decision). The equations are created by
writing down the integral for each of the segments of the strategy, as described above. T
is the time when the agent takes control from e , and  is the time at which the D occurs.
One can write down the equations for more complex strategies in the same way. Notice
that these equations make no assumptions about the particular functions.
Given that the EU of a strategy can be calculated, the AA problem for the agent reduces
to nding and following the transfer-of-control strategy that will maximize its EU. Formally,
the agent's problem is:

Axiom 3.1 For a problem hA; ; ; ; d; E i , the agent must select s 2 S such that 8s0 2
S; s0 6= s; EUshA;;;;d;E i  EUsh0A;;;;d;E i

184

Towards Adjustable Autonomy for the Real World

5
0
-5
0.1

w 0.2

0.3

0.4

1.2
0.8p

Figure 3: Graph comparing the EU of two strategies, H DA (solid line) and H (dashed line)
given a particular instantiation of the model with constant expected decisionmaking quality, exponentially rising wait costs, and Markovian response probabilities. p is a parameter to the P>(t) function, with higher p meaning longer
expected response time. w is a parameter to the W (t) function with higher w
meaning more rapidly accruing wait costs.

3.2 Dominance Relationships among Strategies
An agent could potentially nd the strategy with the highest EU by examining each and
every strategy in S, computing its EU, and selecting the strategy with the highest value. For
example, consider the problem for domains with constant expected decision-making quality,
exponentially rising wait costs, and Markovian response probabilities. Figure 3 shows a
graph of the EU of two strategies (H DA and H ) given this particular model instantiation.
Notice that, for dierent response probabilities and rates of wait cost accrual, one strategy
outperforms the other, but neither strategy is dominant over the entire parameter space.
The EU of a strategy is also dependent on the timing of transfers of control, which in turn
depend on the relative quality of the entities' decision making. Appendix I provides a more
detailed analysis.
Fortunately, we do not have to evaluate and compare each and every candidate in an
exhaustive search to nd the optimal strategy. We can instead use analytical methods
to draw general conclusions about the relative values of dierent candidate strategies. In
particular, we present three Lemmas that show the domain-level conditions under which
particular strategy types are superior to others. The Lemmas also lead us to the, perhaps
surprising, conclusion that complex strategies are not necessarily superior to single-shot
strategies, even in a multi-agent context; in fact, no particular strategy dominates all other
strategies across all domains.
Let us rst consider the AA subproblem of whether an agent should ever take back
control from another entity. If we can show that, under certain conditions, an agent should
always eventually take back control, then our strategy selection process can ignore any
strategies where the agent does not do so (i.e., any strategies not ending in A). The agent's
goal is to strike the right balance between not waiting indenitely for a user response and not
185

Scerri, Pynadath & Tambe
taking a risky autonomous action. Informally, the agent reasons that it should eventually
make a decision if the expected cost of continued waiting exceeds the dierence between the
user's decision quality and its own. More formally, the agent should eventually take back
decision-making control i, for some time t:
Z 
P> (t0 )W (t0 ):dt0 W (t) > EQdU (t) EQdA (t)
(7)
t

where the left-hand side calculates the future expected wait costs and the right-hand side
calculates the extra utility to be gained by getting a response from the user. This result
leads to the following general conclusion about strategies that end with giving control back
to the agent:
Lemma 1: If s 2 S isRa strategy ending with e 2 E , and s0 is sA, then EUsd0 > EUsd i
8e 2 E; 9t <  such that t P>(t0 )W (t0 ):dt0 W (t) > EQde (t) EQdA(t)
Lemma 1 says that if, at any point in time, the expected cost of indenitely leaving
control in the hands of the user exceeds the dierence in quality between the agent's and
user's decisions, then strategies which ultimately give the agent control dominate those
which do not. Thus, if the rate of wait cost accrual increases or the dierence in the
relative quality of the decision-making abilities decreases or the user's probability of response
decreases, then strategies where the agent eventually takes back control will dominate. A
key consequence of the Lemma (in the opposite direction) is that, if the rate that costs accrue
does not accelerate, and if the probability of response stays constant (i.e., Markovian), then
the agent should indenitely leave control with the user (if the user had originally been
given control), since the expected wait cost will not change over time. Hence, even if the
agent is faced with a situation with potentially high total wait costs, the optimal strategy
may be a one-shot strategy of handing over control and waiting indenitely, because the
expected future wait costs at each point in time are relatively low. Thus, Lemma 1 isolates
the condition under which we should consider appending an A transfer-of-control action to
our strategy.
We can perform a similar analysis to identify the conditions under which we should
include a D action in our strategy. The agent has incentive in changing coordination
constraints via a D action due to the additional time made available for getting a highquality response from an entity. However, the overall value of a D action depends on
a number of factors (e.g., the cost of taking the D action and the timing of subsequent
transfers of control). We can calculate the expected value of a D by comparing the EU of a
strategy with and without a D. The D is useful if and only if the increased expected value
of the strategy with it is greater than its cost, Dcost .
Lemma 2: if sR2 S has no D and s0 is s with a D included at t then EUsd0 > EUsd i
R
P> (t0 )W (t):dt0
P>(t0 )W (tjD):dt0 > Dcost
We can illustrate the consequences of Lemma 2 by considering the specic problem model
of Appendix I (i.e., P> (t) =  exp t , W (t) = ! exp!t , EQde (t) = c, and candidate strategies
d i ( ! )! exp ( !) (1 exp !Dvalue ) >
eA and e DA). In this case, EUedDA > EUeA
Dcost. Figure 4 plots the value of the D action as we vary the rate of wait cost accumulation,
w, and the parameter of the Markovian response probability function, p. The graph shows
186

Towards Adjustable Autonomy for the Real World

Value
0.16
0.12
0.08
0.04
0
-0.04
0.1 0.2
w0.3 0.4 0.5

1
0.75
0.5 p
0.25

Figure 4: The value of D action in a particular model (P> (t) =  exp
and EQde (t) = c).

t ,

W (t) = ! exp!t ,

that the benet from the D is highest when the probability of response is neither too low
nor too high. When the probability of response is low, the user is unlikely to respond,
even given the extra time; hence, the agent will have incurred Dcost with no benet. A
D also has little value when the probability of response is high, because the user will likely
respond shortly after the D, meaning that it has little eect (the eect of the D is on the
wait costs after the action is taken). Overall, according to Lemma 2, at those points where
the graph goes above Dcost , the agent should include a D action, and, at all other points, it
should not. Figure 4 demonstrates the value of a D action for a specic subclass of problem
domains, but we can extend our conclusion to the more general case as well. For instance,
while the specic model has exponential wait costs, in models where wait costs grow more
slowly, there will be fewer situations where Lemma 2's criterion holds (i.e., where a D will
be useful). Thus, Lemma 2 allows us to again eliminate strategies from consideration, based
on the evaluation of its criterion in the particular domain of interest.
Given Lemma 2's evaluation of adding a single D action to a strategy, it is natural to
ask whether a second, third, etc. D action would increase EU even further. In other words,
when a complex strategy is better than a simple one, is an even more complex strategy even
better? The answer is \not necessarily".

8K 2 N; 9W 2 W; 9P 2 P; 9EQ 2 EQ such that the optimal strategy
D actions.
Informally, Lemma 3 says that we cannot x a single, optimal number of D actions,
because for every possible number of D actions, there is a potential domain (i.e., combination
Lemma 3:

has K

of a wait-cost, response-probability, and expected-quality functions) for which that number
of D actions is justied by being optimal. Consider a situation where the cost of a D was
a function of the number of Ds to date (i.e., the cost of the K th D is f (K )). For example,
in the E-Elves' meeting case, the cost of delaying a meeting for the third time is much
higher than the cost of the rst delay, since each delay is successively more annoying to
other meeting participants. Hence, the test for the usefulness of the K th D in a strategy,
187

Scerri, Pynadath & Tambe
given the specic model in Appendix I, is:

!

exp Æ exp! T )
(8)
f (K ) < !(exp Dvalue! 1)  ( exp ÆT
Æ
Æ
Depending on the nature of f (K ), Equation 8 can hold for any number of Ds, so, for any
K , there will be some conditions for which a strategy with K Ds is optimal. For instance,
in Section 5.3, we show that the maximum length of the optimal strategy for a random
conguration of up to 25 entities is usually less than eight actions.
Equation 8 illustrates how the value of an additional D can be limited by changing Dcost ,
but Lemma 3 also shows us that other factors can aect the value of an additional D. For
example, even with a constant Dcost , the value of an additional D depends on how many
other D actions the agent performs. Figure 4 shows that the value of the D depends on the
rate at which wait costs accrue. If the rate of wait cost accrual accelerates over time (e.g.,
for the exponential model), a D action slows that acceleration, rendering a second D action
less useful (since the wait costs are now accruing more slowly). Notice also that Ds become
valueless after the deadline, when wait costs stop accruing.
Taken together, Lemmas 1-3 show that no particular transfer-of-control strategy dominates all others across all domains. Moreover, very dierent strategies, from single-shot
strategies to arbitrarily complex strategies, are appropriate for dierent situations, although
the range of situations where a particular transfer-of-control action provides benet can be
quite narrow. Since a strategy might have very low EU for some set of parameters, choosing
the wrong strategy can lead to very poor results. On the other hand, once we understand
the parameter conguration of an intended application domain, Lemmas 1-3 provide useful
tools for focusing the search for an optimal transfer-of-control strategy. The Lemmas can
be used o-line to substantially reduce the space of strategies that need to be searched to
nd the optimal strategy. However, in general there may be many strategies and nding
the optimal strategy may not be possible or feasible.

3.3 Model Predictions for the E-Elves
In this section, we use the model to predict properties of a successful approach to AA in
the E-Elves. Using approximate functions for the probability of response, wait cost, and
expected decision quality, we can calculate the EU of various strategies and determine the
types of strategies that are going to be useful. Armed with this knowledge, we can predict
some key properties of a successful implementation.
A key feature of the E-Elves is that the user is mobile. As she moves around the environment, her probability of responding to requests for decisions changes drastically, e.g., she is
most likely to respond when at her workstation. To calculate the EU of dierent strategies,
we need to know P>(t), which means that we need to estimate the response probabilities
and model how they change as the user moves around. When Friday communicates via a
workstation dialog box, the user will respond, on average, in ve minutes. However, when
Friday communicates via a Palm pilot the average user response time is an hour. Users
generally take longer to decide whether they want to present at a research meeting, taking
approximately two days on average. So, the function P>(t) should have an average value
of 5 minutes when the user in her oÆce, an average of one hour when the user is contacted
via a Palm pilot and an average of two days when the decision is whether to present at a
188

Towards Adjustable Autonomy for the Real World
research meeting. It is also necessary to estimate the relative quality of the user, EQdU (t),
and Friday's decision making, EQdA (t). We assume that the user's decision-making EQdU (t)
is high with respect to Friday's, EQdA (t). The uncertainty about user intentions makes it
very hard for Friday to consistently make correct decisions about the time at which the user
will arrive at meetings, although its sensors (e.g., GPS device) give some indication of the
user's location. When dealing with more important meetings, the cost of Friday's errors
is higher. Thus, in some cases, the decision-making quality of the user and Friday will be
similar, i.e., EQUd (t)  EQAd (t); while in other cases, there will be an order of magnitude
dierence, i.e., EQUd (t)  10  EQAd (t). The wait cost function, W (t), will be much larger for
big meetings than small and increase rapidly as other attendees wait longer in the meeting
room. Finally, the cost of delays, i.e., Dcost , can vary by about an order of magnitude. In
particular, the cost of rescheduling meetings varies greatly, e.g., the cost of rescheduling
small informal meetings with colleagues is far less than rescheduling a full lecture room at
5 PM Friday.
The parameters laid out above show how parameters vary from decision to decision. For
a specic decision, we use Markovian response probabilities (e.g., when the user is in her
oÆce, the average response time is ve minutes), exponentially increasing wait costs, and
constant decision-making quality (though it changes from decision to decision) to calculate
the EU of interesting strategies. Calculating the EU of dierent strategies using the values
for dierent parameters shown above allows us to draw the following conclusions (Table 5
in Section 5.3 presents a quantitative illustration of these predictions):

 The strategy e should not be used, since for all combinations of user location and
meeting importance the EU of this strategy is very low.

 Multiple strategies are required, since for dierent user locations and meeting importance dierent strategies are optimal.

 Since quite dierent strategies are required when the user is in dierent locations, the
AA reasoning will need to change strategies when the user changes location.

 No strategy has a reasonable EU for all possible parameter instantiations, hence always
using the same strategy will occasionally cause dramatic failures.

 For most decisions, strategies will end with the agent taking a decision, since strategies
ending with the user in control generally have very low EU.

These predictions provide important guidance about a successful solution for AA in the
E-Elves. In particular, they make clear that the approach must exibly choose between
dierent strategies and adjust depending on the meeting type and user location.
Section 2.2 described the unsuccessful C4.5 approach to AA in E-Elves and identied
several reasons for the mistakes that occurred. In particular, rigidly transferring control to
one entity and ignoring potential team costs involved in an agent's decision were highlighted
as reasons for the dramatic mistakes in Friday's autonomy reasoning. Reviewing the C4.5
approach in the light of the notion of strategies, we see that Friday learned one strategy and
stuck with that strategy. In particular, originally, Friday would wait indenitely for a user
response, i.e., it would follow strategy e , if it had learned to transfer control. As shown later
189

Scerri, Pynadath & Tambe
in Table 5, this strategy has a very low EU. When a xed-length timeout was introduced,
Friday would follow strategy e (5)A. Such a strategy has high EU when EQUd (t)  EQAd (t)
but very low EU when EQUd (t)  10  EQAd (t). Thus, the model explains a phenomenon
observed in practice.
On the other hand, we can use the model to understand that C4.5's failure in this case
does not mean that it will never be useful for AA. Dierent strategies are only required
when certain parameters (like probability of response or wait cost) change signicantly. In
applications where such parameters do not change dramatically from decision to decision,
one particular strategy may always be appropriate. For such applications, C4.5 might learn
the right strategy just with a small amount of training data and perform acceptably well.
4.

Operationalizing Strategies with MDPs

We have formalized the problem of AA as the selection of the transfer-of-control strategy with the highest EU. We now need an operational mechanism that allows an agent to
perform that selection. One major conclusion from the previous section is that dierent
strategies dominate in dierent situations, and that applications such as E-Elves will require mechanism(s) for selecting strategies in a situation-sensitive fashion. In particular,
the mechanism must exibly change strategies as the situation changes. The required mechanism must also represent the utility function specied by our expected decision qualities,
EQ, the costs of violating coordination constraints, W, and our coordination-change cost,
Dcost. Finally, the mechanism must also represent the uncertainty of entity responses and
then look ahead over the possible responses (or lack thereof) that may occur in the future.
MDPs are a natural means of performing the decision-theoretic planning required to nd
the best transfer-of-control strategy. MDP policies provide a mapping between the agent's
state and the optimal transfer of control strategy. By encoding the parameters of the model
of AA strategies into the MDP, the MDP eectively becomes a detailed implementation of
the model and, hence, assumes its properties. We can use standard algorithms (Puterman,
1994) to nd the optimal MDP policy and, hence, the optimal strategies to follow in each
state.
To simplify exposition, as well as to illustrate the generality of the resulting MDP, this
section describes the mapping from AA strategies to the MDP in four subsections. In
particular, Section 4.1 provides a direct mapping of strategies to an abstract MDP. Section
4.2 lls in state features to enable a more concrete realization of the reward function, while
still maintaining a domain-independent view. Thus, the section completely denes a general
MDP for AA is potentially reusable across a broad class of domains. Section 4.3 illustrates
an implemented instantiation of the MDP in E-Elves. Section 4.4 addresses further practical
issues in operationalizing such MDPs in domains such as E-Elves.

4.1 Abstract MDP Representation of AA Problem
Our MDP representation's fundamental state features capture the state of control:

 controlling-entity is the entity that currently has decision-making control.
 ei -response is any response ei has made to the agent's requests for input.
190

Towards Adjustable Autonomy for the Real World
Original State Action
Destination State
ectrl time
ectrl ei -response
time
ej
tk
ei
ei
yes
tk+1
ej
tk
ei
ei
no
tk+1
ei
tk
wait
ei
yes
tk+1
ei
tk
wait
ei
no
tk+1
ei
tk
D
ei
no
tk Dvalue

Probability
1
1

R tk+1 ei
tkR P> (t)dt
tk+1 ei
tk P> (t)dt
R tk+1
ei
tkR P> (t)dt
tk+1 ei
tk P> (t)dt

1

Table 2: Transition probability function for AA MDP. ectrl is the controlling-entity.



time is the current time, typically discretized and ranging from 0 to our deadline,
 | i.e., a set ft0 = 0; t1 ; t2 ; : : : ; tn = g.

If ei -response is not null or if time = , then the agent is in a terminal state. In the former
case, the decision is the value of ei -response.
We can specify the set of actions for this MDP representation as = E [fD; waitg. The
set of actions subsumes the set of entities, E , since the agent can transfer decision-making
control to any one of these entities. The D action is the coordination-change action that
changes coordination constraints, as discussed earlier. The \wait" action puts o transferring control and making any autonomous decision, without changing coordination with the
team. The agent should reason that \wait" is the best action when, in time, the situation
is likely to change to put the agent in a position for an improved autonomous decision or
transfer-of-control, without signicant harm. For example, in the E-Elves domain, at times
closer to a meeting, users can generally make more accurate determinations about whether
they will arrive on time, hence it is sometimes useful to wait when the meeting is a long
time o.
The transition probabilities (specied in Table 2) represent the eects of the actions as
a distribution over their eects (i.e., the ensuing state of the world). If, in a state with
time = tk , the agent chooses an action that transfers decision-making control to an entity,
ei , other than the agent itself, the outcome is a state with controlling-entity = ei and
time = tk+1 . There are two possible outcomes for ei -response: either the entity responds
with a decision during this transition (producing a terminal state), or it does not, and we
derive the probability distribution over the two from P. The \wait" action has a similar
branch, except that the controlling-entity remains unchanged. Finally, the D action occurs
instantaneously, so there is no time for the controlling entity to respond, but the resulting
state eectively moves to an earlier time (e.g., from tk to tk Dvalue ).
We can derive the reward function for this MDP in a straightforward fashion from
our strategy model. Table 3 presents the complete specication of this reward function.
In transitions that take up time, i.e., transferring control and not receiving a response
(Table 3, row 1) or \wait" (Table 3, row 2), the agent incurs the wait cost of that interval.
In transitions where the agent performs D, the agent incurs the cost of that action (Table 3,
row 3). In terminal states with a response from ei , the agent derives the expected quality of
that entity's decision (Table 3, row 4). A policy that maximizes the reward that an agent
expects to receive according to this AA MDP model will correspond exactly to an optimal
191

Scerri, Pynadath & Tambe
controlling-entity time ei -response Action
ej
tk
no
ei
ei
tk
no
wait
ei
tk
no
D
ei
tk
yes

Reward

W (k + 1) W (k)
W (k + 1) W (k)
Dcost
EQdei (tk )

Table 3: Reward function for AA MDP.
transfer-of-control strategy. Note that this reward function is described in an abstract
fashion|for example, it does not specify how to compute the agent's expected quality of
decision, EQAd (t).

4.2 MDP Representation of AA Problem within Team Context
We have now given a high-level description of an MDP for implementing the notion of
transfer-of-control strategies for AA. The remainder of this section provides a more detailed
look at the MDP for a broad class of AA domains (including the E-Elves) where the agent
acts on behalf of a user who is lling a role, , within the context of a team activity, .
The reward function compares the EU of dierent strategies, nding the optimal one for
the current state. To facilitate this calculation, we need to represent the parameters used
in the model. We introduce the following state features to capture the aspects of the AA
problem in a team context:

 team-orig-expect- is what the team originally expected of the fullling of .
 team-expect- is the team's current expectations of what fullling the role  implies.
 agent-expect- is the agent's (probabilistic) estimation for how  will be fullled.
 \other  attributes" encapsulate other aspects of the joint activity that are aected
by the decision.

When we add these more specic features to the generic AA state features already
presented, the overall state, within the MDP representation of a decision d, is a tuple:

hcontrolling-entity; team-orig-expect-; team-expect-; agent-expect-; -status;
ei -response; time; other  attributesi
For example, for a meeting scenario, team-orig-expect- could be \Meet at 3pm", teamexpect- could be \Meet at 3:15pm" after a user requested a delay, and agent-expect- could
be \Meet at 3:30pm" if the agent believes its user will not make the rescheduled meeting.
The transition probability function for the AA MDP in a team context includes our
underlying AA transition probabilities from Table 3, but it must also include probabilities
over these new state features. In particular, in addition to the temporal eect of the
D action described in Section 4.1, there is the additional eect on the coordination of .
The D action changes the value of the team-expect- feature (in a domain-dependent but
192

Towards Adjustable Autonomy for the Real World
deterministic way). No other actions aect the team's expectations. The team-orig-expect-
feature does not change; we include it to simplify the denition of the reward function. The
transition probabilities over agent-expect- and other -specic features are domain-specic.
We provide an example of such transition probabilities in Section 4.3.
The nal part of the MDP representation is the reward function. Our team AA MDP
framework uses a reward function that breaks down the function from Table 3 as follows:

R(s; a) = f (team-orig-expect-(s); team-expect- (s); agent-expect- (s);
-status (s); time(s); a)
X
=
EQde (time(s))  e -response

(9)

e 2E nfAg

1 f1 (k team-orig-expect- (s) team-expect- (s) k)
21 f21 (time(s))
22 f22 (k team-expect-(s) agent-expect-(s) k)
+3 f3 (-status (s)) + 4 f4 (a)

(10)

The rst component of the reward function captures the value of getting a response from
a decision-making entity other than the agent itself. Notice that only one entity will actually
respond, so only one e -response will be non-zero. This corresponds to the EQed (t) function
used in the model and the bottom row of Table 3. The f1 function reects the inherent
value of performing a role as the team originally expected, hence deterring the agent from
taking costly coordination changes unless they can gain some indirect value from doing
so. This corresponds to Dcost from the mathematical model and the third row of Table 3.
The f21 corresponds to the second row of Table 3, so it represents the wait cost function,
W (t), from the model. This component encourages the agent to keep other team members
informed of the role's status (e.g., by making a decision or taking an explicit D action),
rather than causing them to wait without information. Functions f22 and f3 represent
the quality of the agent's decision, represented by QAd (t). The standard MDP algorithms
compute an expectation over the agent's reward, and an expectation over this quality will
produce the desired EQAd (t) from the fourth row of Table 3. The rst quality function, f22 ,
reects the value of keeping the team's understanding of how the role will be performed in
accordance with how the agent expects the user to actually perform the role. The agent
receives most reward when the role is performed exactly as the team expects, but because of
the uncertainty in the agent's expectation, errors are possible. f22 represents the costs that
come with such errors. The second quality component, f3 , inuences overall reward based
on the successful completion of the joint activity, which encourages the agent to take actions
that maximize the likelihood that the joint activity succeeds. The desire to have the joint
task succeed is implicit in the mathematical model but must be explicitly represented in the
MDP. The component, f4 , augments the rst row from Table 3 to account for additional
costs of transfer-of-control actions. In particular, f4 can be broken down further as follows:
(

f4 (a) =

q(e ) if a 2 E
0
otherwise
193

(11)

Scerri, Pynadath & Tambe
The function q(e ) represents the cost of transferring control to a particular entity, e.g., the
cost of a WAP phone message to a user. Notice, that these detailed, domain-specic costs
do not appear directly in the model.
Given the MDP's state space, actions, transition probabilities, and reward function,
an agent can use value iteration to generate a policy P : S ! that species the optimal
action in each state (Puterman, 1994). The agent then executes the policy by taking the
action that the policy dictates in each and every state in which it nds itself. A policy
may include several transfers of control and coordination-change actions. The particular
series of actions depends on the activities of the user. We can then interpret this policy as
a contingent combination of many transfer-of-control strategies, with the strategy to follow
chosen depending on the user's status (i.e., agent-expect-).

4.3 Example: The E-Elves MDPs
An example of an AA MDP is the generic delay MDP, which can be instantiated for any
meeting for which Friday may act on behalf of its user. Recall the decision, d, is whether
to let other meeting attendees wait for a user or to begin their meeting. The joint activity,
, is the meeting in which the agent has the role, , of ensuring that its user attends the
meeting at the scheduled time. The coordination constraints, , are that the attendees
arrive at the meeting location simultaneously and the eect of the D action is to delay or
cancel the meeting.
In the delay MDP's state representation, team-orig-expect- is originally-scheduledmeeting-time, since attendance at the originally scheduled meeting time is what the team
originally expects of the user and is the best possible outcome. team-expect- is timerelative-to-meeting, which may increase if the meeting is delayed. -status becomes statusof-meeting. agent-expect- is not represented explicitly; instead, user-location is used as
an observable heuristic of when the user is likely to attend the meeting. For example, a
user who is away from the department shortly before a meeting should begin is unlikely to
be attending on time, if at all. With all the state features, the total state space contains
2800 states for each individual meeting, with the large number of states arising from a very
ne-grained discretization of time.
The general reward function is mapped to the delay MDP reward function in the following way.
(

g(N; ) if N < 4
(12)
1
otherwise
where N is the number of times the meeting is rescheduled and g is a function that takes
into account factors like the number of meeting attendees, the size of the meeting delay and
the time until the originally scheduled meeting time. This function eectively forbids the
agent from ever performing 4 or more D actions.
In the delay MDP, the functions, f21 and f22 , both correspond to the cost of making the
meeting attendees wait, so we can merge them into a single function, f2 . We expect that
such a consolidation is possible in similar domains where the team's expectations relate to
f1 =

194

Towards Adjustable Autonomy for the Real World
the temporal aspect of role performance.
(

f2 =

h(late; ) if late > 0
0
otherwise

(13)

where late is the dierence between the scheduled meeting time and the time the user
arrives at the meeting room. late is probabilistically calculated by the MDP based on the
user's current location and a model of the user's behavior.
8
>
<

r + ruser if the user attends
f3 = > r
if the meeting takes place, but the user does not attend
: 0
otherwise

(14)

The value, r , models the inherent value of , while the value ruser models the user's
individual value to .
f4 was given previously in Equation 11. The cost of communicating with the user
depends on the medium which is used to communicate. For example, there is higher cost
to communicating via a WAP phone than via a workstation dialog box.
When the users are asked for input, it is assumed that, if they respond, their response
will be \correct", i.e., if a user says to delay the meeting by 15 minutes, we assume the
user will arrive on time for the re-scheduled meeting. If the user is asked while in front of
his/her workstation, a dialog like the one shown in Figure 5 is popped up, allowing the user
to select the action to be taken. The expected quality of the agent's decision is calculated
by considering the agent's proposed decision and the possible outcomes of that decision.
For example, if the agent proposes delaying the meeting by 15 minutes, the calculation of
the decision quality includes the probability and benets that the user will actually arrive
15 minutes after the originally scheduled meeting time, the probability and costs that the
user arrives at the originally scheduled meeting time, etc.

(a)

(b)

Figure 5: (a) Dialog box for delaying meetings. (b) A small portion of the delay MDP.
The delay MDP also represents probabilities that a change in user location (e.g., from
oÆce to meeting location) will occur in a given time interval. Figure 5(b) shows a portion
195

Scerri, Pynadath & Tambe
of the state space, showing only the user-response, and user location features. A transition
labeled \delay n" corresponds to the action \delay by n minutes". The gure also shows
multiple transitions due to \ask" (i.e., transfer control to the user) and \wait" actions, where
the relative probability of each outcome is represented by the thickness of the arrow. Other
state transitions correspond to uncertainty associated with a user's response (e.g., when the
agent performs the \ask" action, the user may respond with specic information or may
not respond at all, leaving the agent to eectively \wait"). One possible policy produced
by the delay MDP, for a subclass of meetings, species \ask" in state S0 of Figure 5(b)
(i.e., the agent gives up some autonomy). If the world reaches state S3, the policy species
\wait". However, if the agent then reaches state S5, the policy chooses \delay 15", which
the agent then executes autonomously. In terms of strategies, this sequence of actions is
H D.
Earlier, we described another AA decision in the E-Elves, namely whether to close an
auction for an open team role. Here, we briey describe the key aspects of the mapping
of that decision to the MDP. The auction must be closed in time for the user to prepare
for the meeting, but with suÆcient time given for interested users to submit bids and for
the human team leader to choose a particular user. team-orig-expect- (s) is that a highquality presenter be selected with enough time to prepare. There is no D action, hence
team-expect- (s) = team-orig-expect- (s). agent-expect-(s) is whether the agent believes it
has a high-quality bid or believes such a bid will arrive in time for that user to be allocated
to the role. The agent's decision quality, EQdA (t), is a function of the number of bids that
have been submitted and the quality of those bids, e.g., if all team members have submitted
bids and one user's bid stands out, the agent can condently choose that user to do the
presentation. Thus, -status is primarily the quality of the best bid so far and the dierence
between the quality of that bid and the second-best bid. The most critical component of
the reward function from Equation 10 is the 2 component, which gives reward if the agent
fullls the users' expectation of having a willing presenter do a high-quality presentation.

4.4 User-Specied Constraints
The standard MDP algorithms provide the agent with optimal policies subject to the encoded probabilities and reward function. Thus, if the agent designer has access to correct
models of the entities' (e.g., human users in the E-Elves) decision qualities and probabilities of response, then the agent will select the best possible transfer-of-control strategy.
However, it is possible that the entities themselves have more accurate information about
their own abilities than does the agent designer. To exploit this knowledge, an entity could
communicate its model of its quality of decision and probability of response directly to
the agent designer. Unfortunately, the typical entity is unlikely to be able to express its
knowledge in the form of our MDP reward function and transition probabilities. An agent
could potentially learn this additional knowledge on its own through its interactions with
the entities in the domain. However, learning may require an arbitrarily large number of
such interactions, all of which will take place without the benet of the entities' inside
knowledge.
As an alternative, we can provide a language of constraints that allows the entities to
directly and immediately communicate their inside information to the agent. Our constraint
196

Towards Adjustable Autonomy for the Real World

Figure 6: Screenshot of the tool for entering constraints. The constraint displayed forbids
not transferring control (i.e., forces transfer) ve minutes before the meeting if the
teammates have previously been given information about the user's attendance
at the meeting.
language provides the entities a simple way to inform the agent of their specic properties
and needs. An entity can use a constraint to forbid the agent from entering specic states or
performing specic actions in specic states. Such constraints can be directly communicated
by a user via the tool shown in Figure 6. For instance, in the gure shown the user is
forbidding the agent from autonomous action ve minutes before the meeting. We dene
such forbidden-action constraints to be a set, Cfa , where each element constraint is a
boolean function, cfa : S  A !ft; f g. Similarly, we dene forbidden-state constraints to
be a set, Cfs , with elements, cfs : S !ft; f g. If a constraint returns t for a particular domain
element (either state or state-action pair, as appropriate), then the constraint applies to the
given element. For example, a forbidden-action constraint, cfa , forbids the action a from
being performed in state s if and only if cfa (s; a) = t.
To provide probabilistic semantics, suitable for an MDP context, we rst provide some
notation. Denote the probability that the agent will ever arrive in state sf after following
 s jP ). Then, we dene the semantics of
a policy, P , from an initial state si as Pr(si !
f
 s jP ) = 0. The semantics given to a
a forbidden-state constraint cfs as requiring Pr(si !
f
 s ^P (s )=ajP ) = 0
forbidden-action constraint, cfa , is a bit more complex, requiring Pr(si!
f
f
(i.e., cfa forbids the agent from entering state sf and then performing action a). In some
cases, an aggregation of constraints may forbid all actions in state sf . In this case, the
conjunction allows the agent to still satisfy all forbidden-action constraints by avoiding sf
(i.e., the state sf itself becomes forbidden). Once a state, sf , becomes indirectly forbidden
in this fashion, any action that potentially leads the agent from an ancestor state into
sf likewise becomes forbidden. Hence, the eect of forbidding constraints can propagate
backward through the state space, aecting state/action pairs beyond those which cause
immediate violations.
197

Scerri, Pynadath & Tambe
The forbidding constraints are powerful enough for the entity to communicate a wide
range of knowledge about their decision quality and probability of response to the agent.
For instance, some E-Elves users have forbidden their agents from rescheduling meetings
to lunch time. To do so, the users provide a feature specication of the states they want
to forbid, such as meeting-time =12 PM. Such a specication generates a forbidden-state
constraint, cfs , that is true in any state, s, where meeting-time =12 PM in s. This constraint
eectively forbids the agent from performing any D action that would result in a state where
meeting-time =12PM. Similarly, some users have forbidden autonomous actions in certain
states by providing a specication of the actions they want to forbid, e.g., action 6=\ask".
This generates a forbidden-action constraint, cfa , that is true for any state/action pair,
(s; a), with a 6=\ask". For example, a user might specify such a constraint for states
where they are in their oÆce, at the time of a meeting because they know that they will
always make decisions in that case. Users can easily create more complicated constraints
by specifying values for multiple features, as well as by using comparison functions other
than = (e.g., 6=, >).
Analogous to the forbidding constraints, we also introduce required-state and requiredaction constraints, dened as sets, Crs and Cra , respectively. The interpretation provided
to the required-state constraint is symmetric, but opposite to that of the forbidden-state
 s jP ) = 1. Thus, from any state, the agent must eventually reach a
constraint: Pr(si !
f
 s ^P (s )=ajP ) = 1.
required state, sf . Similarly, for the required-action constraint, Pr(si!
f
f
The users specify such constraints as they do for their forbidding counterparts (i.e., by specifying the values of the relevant state features or action, as appropriate). In addition, the
requiring constraints also propagate backward. Informally, the forbidden constraints focus
locally on specic states or actions, while the required constraints express global properties
over all states.
The resulting language allows the agent to exploit synergistic interactions between its
initial model of transfer-of-control strategies and entity-specied constraints. For example,
a forbidden-action constraint that prevents the agent from taking autonomous action in a
particular state is equivalent to the user specifying that the agent must transfer control to
the user in that state. In AA terms, the user instructs the agent not to consider any transferof-control strategies that violate this constraint. To exploit this pruning of the strategy
space by the user, we have extended standard value iteration to also consider constraint
satisfaction when generating optimal strategies. Appendix II provides a description of a
novel algorithm that nds optimal policies while respecting user constraints. The appendix
also includes a proof of the algorithm's correctness.
5. Experimental Results

This section presents experimental results aimed at validating the claims made in the previous sections. In particular, the experiments aim to show the utility of complex transfer-ofcontrol strategies and the eectiveness of MDPs as a technique for their operationalization.
Section 5.1 details the use of the E-Elves in daily activities and Section 5.2 discusses the
pros and cons of living and working with the assistance of Fridays. Section 5.3 shows some
characteristics of strategies in this type of domain (in particular, that dierent strategies
198

Towards Adjustable Autonomy for the Real World
are used in practice). Finally, Section 5.4 describes detailed experiments that illustrate
characteristics of the AA MDP.

5.1 The E-Elves in Daily Use
The E-Elves system was heavily used by ten users in a research group at ISI, between June
2000 and December 2000.5 The Friday agents ran continuously, around the clock, seven
days a week. The exact number of agents running varied over the period of execution, with
usually ve to ten Friday agents for individual users, a capability matcher (with proxy),
and an interest matcher (with proxy). Occasionally, temporary Friday agents operated on
behalf of special guests or other short-term visitors.
Daily Counts of Exchanged Messages
No. of Messages

300
250
200
150
100
50
0
Jun Jul Aug Sep Oct Nov Dec
Date

Figure 7: Number of daily coordination messages exchanged by proxies over a seven-month
period.
Figure 7 plots the number of daily messages exchanged by the Fridays over seven months
(June through December, 2000). The size of the daily counts reects the large amount of
coordination necessary to manage various activities, while the high variability illustrates
the dynamic nature of the domain (note the low periods during vacations and nal exams).
Figure 8(a) illustrates the number of meetings monitored for each user. Over the seven
months, nearly 700 meetings where monitored. Some users had fewer than 20 meetings,
while others had over 250. Most users had about 50% of their meetings delayed (this includes
regularly scheduled meetings that were cancelled, for instance due to travel). Figure 8(b)
shows that usually 50% or more of delayed meetings were autonomously delayed. In this
graph, repeated delays of a single meeting are counted only once. The graphs show that the
5. The user base of the system was greatly reduced after this period due to personnel relocations and
student graduations, but it remains in use with a smaller number of users.

199

User Delays vs. Autonomous Delays

Meetings Monitored vs. Meetings Delayed
400
350
300
250
200
150
100
50
0

140

Number of Meetings

ito

ramanan

tambe

nair

scerri

modi

pynadath

jungh

Total Delays
Human Delays

120

Monitored
Delayed

kulkarni

Number of Meetings

Scerri, Pynadath & Tambe

100
80
60
40
20
0
1

Users

2

3

4

5

6

7

8

Users

(a)

(b)

Figure 8: (a) Monitored vs. delayed meetings per user. (b) Meetings delayed autonomously
vs. by hand.
agents are acting autonomously in a large number of instances, but, equally importantly,
humans are also often intervening, indicating the critical importance of adjustable autonomy
in Friday agents.
For a seven-month period, the presenter for USC/ISI's TEAMCORE research group
presentations was decided using auctions. Table 4 shows a summary of the auction results.
Column 1 (\Date") shows the dates of the research presentations. Column 2 (\No. of
Bids") shows the total number of bids received before a decision. A key feature is that
auction decisions were made without all 9 users entering bids; in fact, in one case, only
4 bids were received. Column 3 (\Best bid") shows the winning bid. A winner typically
bid < 1; 1 >, i.e., indicating that the user it represents is both capable and willing to
do the presentation | a high-quality bid. Interestingly, the winner on July 27 made a
bid of < 0; 1 >, i.e., not capable but willing. The team was able to settle on a winner
despite the bid not being the highest possible, illustrating its exibility. Finally, columns
4 (\Winner") and 5 (\Method") show the auction outcome. An `H' in column 5 indicates
the auction was decided by a human, an `A' indicates it was decided autonomously. In ve
of the seven auctions, a user was automatically selected to be presenter. The two manual
assignments were due to exceptional circumstances in the group (e.g., a rst-time visitor),
again illustrating the need for AA.
Date
No. of bids Best bid Winner Method
Jul 6, 2001
7
1,1
Scerri
H
Jul 20, 2001
9
1,1
Scerri
A
Jul 27, 2001
7
0,1
Kulkarni
A
Aug 3, 2001
8
1,1
Nair
A
Aug 3, 2001
4
1,1
Tambe
A
Sept 19, 2001
6
-,Visitor
H
Oct 31, 2001
7
1,1
Tambe
A
Table 4: Results for auctioning research presentation slot.
200

Towards Adjustable Autonomy for the Real World
5.2 Evaluating the Pros and Cons of E-Elves Use
The general eectiveness of the E-Elves is shown by several observations. During the
E-Elves' operation, the group members exchanged very few email messages to announce
meeting delays. Instead, Fridays autonomously informed users of delays, thus reducing the
overhead of waiting for delayed members. Second, the overhead of sending emails to recruit
and announce a presenter for research meetings was assumed by agent-run auctions. Third,
a web page, where Friday agents post their users' location, was commonly used to avoid
the overhead of trying to track users down manually. Fourth, mobile devices kept users
informed remotely of changes in their schedules, while also enabling them to remotely delay
meetings, volunteer for presentations, order meals, etc. Users began relying on Friday so
heavily to order lunch that one local \Subway" restaurant owner even suggested: \. . . more
and more computers are getting to order food. . . so we might have to think about marketing
to them!!". Notice that this daily use of the E-Elves by a number of dierent users occurred
only after the MDP implementation of AA replaced the unreliable C4.5 implementation.
However, while the agents ensured that users spent less time on daily coordination (and
miscoordination), there was a price to be paid. One issue was that users felt they had
less privacy when their location was continually posted on the web and monitored by their
agent. Another issue was the security of private information such as credit card numbers
used for ordering lunch. As users adjusted to having agents monitor their daily activities,
some users adjusted their own behavior around that of the agent. One example of such
behavior was some users preferring to be a minute or two early for a meeting lest their
agent decide they were late and delay the meeting. In general, since the agents never made
catastrophically bad decisions most users felt comfortable using their agent and frequently
took advantage of its services.
The most emphatic evidence of the success of the MDP approach is that, since replacing
the C4.5 implementation, the agents have never repeated any of the catastrophic mistakes
enumerated in Section 2.2. In particular, Friday avoids errors such as error 3 from Section
2.2 by selecting a strategy with a single, large D action, because it has a higher EU than a
strategy with many small Ds (e.g., DDDD). Friday avoids error 1, because the large cost
associated with an erroneous cancel action signicantly penalizes the EU of a cancellation.
Friday instead chooses the higher-EU strategy that rst transfers control to a user before
taking such an action autonomously. Friday avoids errors such as errors 2 and 4 by selecting
strategies in a situation-sensitive manner. For instance, if the agent's decision-making
quality is low (i.e., high risk), then the agent can perform a coordination-change action to
allow more time for user response or for the agent itself to get more information. In other
words, it exibly uses strategies like e DeA, rather than always using the e (5)A strategy
discussed in Section 2.2. This indicates that a reasonably appropriate strategy was chosen
in each situation. Although the current agents do occasionally make mistakes, these errors
are typically on the order of transferring control to the user a few minutes earlier than may
be necessary. Thus, the agents' decisions have been reasonable, though not always optimal.6
6. The inherent subjectivity in user feedback makes a determination of optimality diÆcult.

201

Scerri, Pynadath & Tambe
5.3 Strategy Evaluation
The previous section looked at the application of the MDP approach to the E-Elves but did
not address strategies in particular. In this section, we specically examine strategies in the
E-Elves. We show that Fridays did indeed follow strategies and that the strategies followed
were the ones predicted by the model. We also show how the model led to an insight that,
in turn, led to a dramatic simplication in one part of the implementation. Finally, we show
that the use of strategies is not limited to the E-Elves application by showing empirically
that, for random congurations of entities, the optimal strategy will have more than one
transfer-of-control action in 70% of cases.
Figure 9 shows a frequency distribution of the number of actions taken per meeting
(this graph omits \wait" actions). The number of actions taken for a meeting corresponds
to the length of the part of the strategy followed (the strategy may have been longer, but
a decision was made so the actions were not taken). The graph shows both that the MDP
followed complex strategies in the real world and that it followed dierent strategies at
dierent times. The graph bears out the model's predictions that dierent strategies would
be required of a good solution to the AA problem in the E-Elves domain.
Table 5 shows the EU values computed by the model and the strategy selected by
the MDP. Recall that the MDP explicitly models the users' movements between locations,
while the model assumes that the users do not move. Hence, in order to do an accurate
comparison between the model and the MDP's results, we focus on only those cases when
the user's location does not change (i.e., where the probability of response is constant).
These EU values were calculated using the parameter values set out in Section 3.3. Notice,
that the MDP will often perform Ds before transferring control to buy time to reduce
uncertainty. The model is an abstraction of the domain, so such D actions, like changes
in user location, are not captured. Except for a slight discrepancy in the rst case the
match between the MDP's behavior and the model's predictions is exact, provided that we
ignore the D actions at the beginning of some MDP strategies. Thus, despite the model
being considerably abstracted from the domain there is high correlation between the MDP
policies and the model's suggested strategies. Moreover, general properties of the policies
that were predicted by the model were borne out exactly. In particular, recall that the model
predicted dierent strategies would be required, that strategy e would not be used, and that
generally strategies ending in A would be best | all properties of the MDP policies.
The model predicts that if parameters do not vary greatly then it is suÆcient to nd
a single optimal strategy and follow that strategy in each situation. The MDP for the
decision to close an auction is an instance of this for the E-Elves. The same pattern of
behavior is followed every time an open role needs to be lled by the team. This consistency
arises because the wait cost is the same (since the meetings are the same) and because
the pattern of incoming bids is reasonably consistent (variations in individuals' behavior
cancel each other out when we look at the team as a whole). The model predicts that
when parameters do not change, we can nd the optimal strategy for those parameters
and execute that strategy every time. However, since the MDP had worked eectively for
the meeting AA, an MDP was also chosen for implementing the auction AA. When it was
realized that the parameters do not vary greatly, we concluded the MDP could be replaced
with a simple implementation of the optimal strategy. To verify this hypothesis, we replaced
202

Towards Adjustable Autonomy for the Real World

No. of meetings

No. of actions per meeting
200
180
160
140
120
100
80
60
40
20
0
0

2

4
6
8
No. of actions

10

12

Figure 9: The frequency distribution of the number of steps taken in an AA strategy for
the meeting scenario. If no actions were taken for a meeting, the meeting was
cancelled before Friday started AA reasoning.

Location
A
e
eA e DA MDP
Small meeting, active participant
oÆce
14.8 -277 41.9 42.05 DDe DA
not @ dept. 14.8 -6E7 31.4 28.0 DDeA
@ meet loc. 14.8 -2E5 39.2 39.1
eA
Large meeting, passive participant
oÆce
14.6 -7E12 30.74 30.65 DDeA
not @ dept. 14.6 -2E17 14.6 7.7
DDeA
@ meet loc. 14.5 -7E14 25.1 23.5
eA
Table 5: EU values for the simple strategies as calculated from the model. The last column
shows the strategy actually followed by the MDP.

203

Scerri, Pynadath & Tambe
Date No. Bids MDP eA
7/20/00
9
25% 26%
7/27/00
7
14% 20%
8/3/00
8
29% 23%
Table 6: Auction results. The \MDP" column shows the percentage of available auction
time remaining when the MDP chose to close the auction. The \eA" column
shows the percentage of available auction time remaining when the strategy eA,
with EQde (t) proportional to the number of bids received (\No. Bids" column),
would have closed the auction.

the general MDP code with three simple lines of code implementing the eA strategy, which
we determined to be optimal for the particular parameters of the problem. Using log les
recorded during the actual auctions reported in (Scerri, Pynadath, & Tambe, 2001), we
experimentally veried that both the MDP and the eA strategy produced the same result.
Table 6 shows the percentage of available auction time remaining (e.g., if the auction was
opened four days before the role should be performed, closing the auction one day before
would correspond to 25%) when the MDP version and the eA version of the code closed
the auction. The number of bids is used to estimate the agent's expected decision quality.
The timing of the auction closing is close, certainly within just a few hours. The result
is not precisely the same for the MDP and strategy implementations, because the MDP
implementation was more reactive to incoming bids than the strategy implementation.
To conrm that the need for strategies was not a phenomenon unique to the particular
settings of the E-Elves, an experiment was run with randomly generated congurations
of entities. The wait cost for each conguration increased exponentially, with the rate of
accrual varying from conguration to conguration. The congurations contained between
3 and 25 entities, with randomly chosen Markovian response probabilities and randomly
chosen, but constant, decision-making quality. The cost and value of a D action was also
randomly selected. In each conguration, there was an agent that could respond instantly,
but with lower decision quality than any of the other entities. For each conguration, the
optimal transfer-of-control strategy was found. Figure 10(a) shows the percentage of optimal
strategies (z-axis) that were of each length (y-axis \jOpt. Strat.j"), separated according to
the rate at which wait costs accrued (x-axis, \Wait Cost Param"). The gure shows that
if the rate at which the wait cost accrues is very low, most optimal strategies are of length
one, with the agent just handing control to the entity with the highest decision-making
quality. When the rate of wait cost accrual is high, most strategies are of length two,
with the agent briey giving the best decision maker an opportunity to make the decision
but taking back control and acting before the wait costs became too high. For intermediate
values of the wait cost parameter, there was considerably more variation in the length of the
optimal strategy. Figure 10(b) shows the percentage of optimal strategies for each length
when the wait cost parameter is 0.12 (i.e., a slice through Figure 10(a)). Hence, strategies
often contained several transfers of control and several coordination changes. Thus, this
experiment shows that complex transfer-of-control strategies are useful, not only in E-Elves,
204

Towards Adjustable Autonomy for the Real World
but in a range of domains, especially those in which wait costs are neither negligible nor
accruing too fast.
Strategy Lengths for w = 0.12
35

% of Opt. Strats.

30
25
% of Opt. Strats.

100
90
80
70
60
50
40
30
20
10
01

2

20
15
10

3

|Opt. Strat.|

4

5

6

7

8 0

0.35 0.4
0.25 0.3
0.15 0.2
0.1
Wait
Cost
Param
0.05

5
0
1

(a)

2

3

4
5
|Opt. Strat.|

6

7

8

(b)

Figure 10: (a) Percentage of optimal strategies having a certain length, broken down according to how fast wait costs are accruing. (b) Percentage of optimal strategies
having certain length for wait cost parameter = 0.12.
Thus, we have shown that the MDP produces strategies and that Friday follows these
strategies in practice. Moreover, the strategies followed are the ones predicted by the model.
Of practical use, when we followed a prediction of the model, i.e., that an MDP was not
required for auctions, we were able to substantially reduce the complexity of one part of the
system. Finally, we showed that the need for strategies was not specically a phenomenon
of the E-Elves domain.

5.4 MDP Experiments
Experience using the MDP approach to AA in the E-Elves indicates that it is eective
at making reasonable AA decisions. However, in order to determine whether MDPs are
a generally useful tool for AA reasoning, more systematic experiments are required. In
this section, we present such systematic experiments to determine important properties of
MDPs for AA. The MDP reward function is designed to result in the optimal strategy being
followed in each state.
In each of the experiments, we vary one of the  parameters that are the weights of the
dierent factors in Equation 10. The MDP is instantiated with each of a range of values
for the parameter and a policy produced for each value. In each case, the total policy is
dened over 2800 states. The policy is analyzed to determine some basic properties of that
policy. In particular, we counted the number of states in which the policy species to ask,
to delay, to say the user is attending and to say the user is not attending. The statistics
show broadly how the policy changes as the parameters change, e.g., whether Friday gives
up autonomy more or less when the cost of a coordination change is increased. The rst
aim of the experiments is to simply conrm that policies change in the desired and expected
way when parameters in the reward function are changed. For instance, if Friday's expected
decision quality is increased, there should be more states where it makes an autonomous
205

Scerri, Pynadath & Tambe
decision. Secondly, from a practical perspective it is critical to understand how sensitive the
MDP policies are to small variations in parameters, because such sensitivity would mean
that any small variations in parameter values can signicantly impact MDP performance.
Finally, the experiments reveal some interesting phenomena.
The rst experiment looks at the eect of the 1 parameter from Equation 10, represented in the delay MDP implementation by the team repair cost (function g from Equation
12), on the policies produced by the delay MDP. This parameter determines how averse Friday should be to changing coordination constraints. Figure 11 shows how some properties
of the policy change as the team repair cost value is varied. The x-axis gives the value of
the team repair cost, and the y-axis gives the number of times that action appears in the
policy. Figure 11(a) shows the number of times Friday will ask the user for input. The
number of times it will transfer control exhibits an interesting phenomenon: the number
of asks has a maximum at an intermediate value for the parameter. For the low values,
Friday can \condently" (i.e., its decision quality is high) make decisions autonomously,
since the cost of errors is low, hence there is less value to relinquishing autonomy. For
very high team repair costs, Friday can \condently" decide autonomously not to make a
coordination change. It is in the intermediate region that Friday is uncertain and needs
to call on the user's decision making more often. Furthermore, as the cost of delaying the
meeting increases, Friday will delay the meeting less (Figure 11(b)) and tell the team the
user is not attending more often (Figure 11(d)). By doing so, Friday gives the user less time
to arrive at the meeting, choosing instead to just announce that the user is not attending.
Essentially, Friday's decision quality has become close enough to the user's decision quality
that asking the user is not worth the risk that they will not respond and the cost of asking
for their input. Except for a jump between a value of zero and any non-zero value, the
number of times Friday says the user is attending does not change (Figure 11(c)). The
delay MDP in use in the E-Elves has the team repair cost parameter set at two. Around
this value the policy changes little, hence slight changes in the parameter do not lead to
large changes in the policy.
In the second experiment, we vary the 2 parameter from Equation 10, implemented
in the delay MDP by the variable team wait cost (function h from Equation 13). This is
the factor that determines how heavily Friday should weigh dierences between how the
team expects the user will fulll the role and how the user will actually fulll the role. In
particular, it determines the cost of having other team members wait in the meeting room
for the user. Figure 12 shows the changes to the policy when this parameter is varied (again
the x-axis shows the value of the parameter and the y-axis shows the number of times the
action appears in the policy). The graph of the number of times the agent asks in the
policy (Figure 12(a)), exhibits the same phenomena as when the 1 parameter was varied,
i.e., increasing and then decreasing as the parameter increases. The graphs show that, as
the cost of teammates' time increases, Friday acts autonomously more often (Figure 12(bd)). Friday asks whenever the potential costs of asking are lower than the potential costs
of errors it makes { as the cost of time waiting for a user decision increases, the balance
tips towards acting. Notice that the phenomenon of the number of asks increasing then
decreasing occurs in the same way that it did for the 1 parameter; however, it occurs for a
slightly dierent reason. In this case, when waiting costs are low, Friday's decision-making
quality is high so it acts autonomously. When the waiting costs are high, Friday cannot
206

Towards Adjustable Autonomy for the Real World

Number of delays in policy

68
66
64
62
60
58
56
54
52
50
48

# delays

# asks

Number of asks in policy

0

2
4
6
8
"Team repair cost" weight

140
130
120
110
100
90
80
70
60
50
40
30

10

0

(a)

Number of Not Attending messages in policy
# Not Attending

# attending

140
135
130
125
120
115
110
105
100
95
90
2
4
6
8
"Team repair cost" weight

10

(b)

Number of Attending messages in policy

0

2
4
6
8
"Team repair cost" weight

10

70
60
50
40
30
20
10
0
0

(c)

2
4
6
8
"Team repair cost" weight

(d)

Figure 11: Properties of the MDP policy as team repair cost is varied.

207

10

Scerri, Pynadath & Tambe
aord the risk that the user will not respond quickly, so it again acts autonomously (despite
its decision quality being low). Figure 12(b) shows that the number of delay actions taken
by Friday increases, but only in states in which the meeting has already been delayed twice.
This indicates that the normally very expensive third delay of the same meeting starts to
become worthwhile if the cost of having teammates wait in the meeting room is very high.
In the delay MDP, a value of 1 is used for 2 . The decision to transfer control (i.e., ask)
is not particularly sensitive to changes in the parameter around this value|again, slight
changes will not have a signicant impact.
Number of Asks in policy

Number of Delays in policy

70
# delays

# asks

50
40
30

100
80
60
40
20
0

20
0

2

4

6

8

10

0

"Cost of teammates time" weight

4

6

8

10

(b)

Number of Not Attending messages in policy
30
# Not Attending

Number of Attending messages in policy
260
240
220
200
180
160
140
120
100
80
0

2

"Cost of teammates time" weight

(a)

# Attending

Total
1st Delay
2nd Delay
3rd Delay

120

60

2
4
6
8
10
"Cost of teammates time" weight

25
20
15
10
5
0
0

(c)

2
4
6
8
10
"Cost of teammates time" weight

(d)

Figure 12: Properties of the MDP policy as teammate time cost is varied. (b) shows the
number of times the meeting is delayed in states where it has not yet been
delayed, where it has been delayed once already, and where it has been delayed
twice already.
In the third experiment, the value of the 3 , the weight of the joint task, was varied
(Figure 13). In the E-Elves, the value of the joint task includes the value of the user to the
meeting and the value of the meeting without the user. In this experiment, the value of the
208

Towards Adjustable Autonomy for the Real World
meeting without the user is varied. Figure 13 shows how the policy changes as the value of
the meeting without the user changes (again the x-axis shows the value of the parameter
and the y-axis shows the number of times the action appears in the policy). These graphs
show signicantly more instability than for the other  values. These large changes are a
result of the simultaneous change in both the utility of taking key actions and the expected
quality of Friday's decision making, e.g., the utility of saying the user is attending is much
higher if the meeting has very low value without that user. In the current delay MDP, this
value is set at 0.25, which is in a part of the graph that is very insensitive to small changes
of the parameter.
In the three experiments above, the specic E-Elves parameters were in regions of the
graph where small changes in the parameter do not lead to signicant changes in the policy.
However, there were regions of the graphs where the policy did change dramatically for small
changes in a parameter. This indicates that in some domains, with parameters dierent to
those in E-Elves, the policies will be sensitive to small changes in the parameters.

180
160
140
120
100
80
60
40
20
0
-10

Number of delays in policy
120
100
# delays

# asks

Number of asks in policy

80
60
40

-8

-6
-4
-2
0
Joint activity weight

20
-10

2

-8

(a)

Number of Not Attending messages in policy
20
# not attending

# attending

180
160
140
120
-8

-6
-4
-2
0
Joint activity weight

2

(b)

Number of Attending messages in policy
200

100
-10

-6
-4
-2
0
Joint activity weight

15
10
5
0
-10

2

(c)

-8

-6
-4
-2
Joint activity weight

0

2

(d)

Figure 13: Properties of the MDP policy as the importance of a successful joint task is
varied.
209

Scerri, Pynadath & Tambe
The above experiments show three important properties of the MDP approach to AA.
First, changing the parameters of the reward function generally lead to the changes in the
policy that are expected and desired. Second, while the value of the parameters inuenced
the policy, the eect on the AA reasoning was often reasonably small, suggesting that small
errors in the model should not aect users too greatly. Finally, the interesting phenomena of
the number of asks reaching a peak at intermediate values of the parameters was revealed.
The three previous experiments have examined how the behavior of the MDP changes
as the parameters of the reward function are changed. In another experiment, a central
domain-level parameter aecting the behavior of the MDP, i.e., the probability of getting a
user response and the cost of getting that response (corresponding to f4 ), is varied. Figure
14 shows how the number of times Friday chooses to ask (y-axis) varies with both the
expected time to get a user response (x-axis) and the cost of doing so (each line on the
graph represents a dierent cost). The MDP performs as expected, choosing to ask more
often if the cost of doing so is low and/or it is likely to get a prompt response. Notice
that, if the cost is low enough, Friday will sometimes choose to ask the user even if there
is a long expected response time. Conversely, if the expected response time is suÆciently
high, Friday will assume complete autonomy. This graph also shows that there is a distinct
change in the number of asks at some point (depending on the cost), but outside this change
point the graphs are relatively at. The key reason for the fairly rapid change in the number
of asks is that often the dierence between the quality of Friday's and the user's decision
making is in a fairly small range. As the mean response time increases, the expected wait
costs increase, eventually becoming high enough for Friday to decide to act autonomously
instead of asking.

# Asks

Number of Asks in Policy
70
60
50
40
30
20
10
0
0.01

Cost = 0.0001
Cost = 0.2
Cost = 1.0

0.1
1
10
Mean Response Time

100

Figure 14: Number of ask actions in policy as the mean response time (in minutes) is varied.
The x-axis uses a logarithmic scale.
We conclude this section with a quantitative illustration of the impact constraints have
on strategy selection. In this experiment, we merged user-specied constraints from all the
E-Elves users, resulting in a set of 10 distinct constraints. We started with an unconstrained
210

Towards Adjustable Autonomy for the Real World

Figure 15: (a) Number of possible strategies (logarithmic). (b) Time required for strategy
generation.
instance of the delay MDP and added these constraints one at a time, counting the strategies
that satised the applied constraints. We then repeated these experiments on expanded
instances of the delay MDP, where we increased the initial state space by increasing the
frequency of decisions (i.e., adding values to the time-relative-to-meeting feature). This
expansion results in three new delay MDPs, which are articial, but are inuenced by the
real delay MDP. Figure 15a displays these results (on a logarithmic scale), where line A
corresponds to the original delay MDP (2760 states), and lines B (3320 states), C (3880
states), and D (4400 states) correspond to the expanded instances. Each data point is a
mean over ve dierent orderings of constraint addition. For all four MDPs, the constraints
substantially reduce the space of possible agent behaviors. For instance, in the original
delay MDP, applying all 10 constraints eliminated 1180 of the 2760 original states from
consideration, and reduced the mean number of viable actions per acceptable state from
3.289 to 2.476. The end result is a 50% reduction in the size (log10 ) of the strategy space.
On the other hand, constraints alone did not provide a complete strategy, since all of the
plots stay well above 0, even with all 10 constraints. Since none of the individual users were
able/willing to provide 10 constraints, we cannot expect anyone to add enough constraints
to completely specify an entire strategy. Thus, the MDP representation and associated
policy selection algorithms are still far from redundant.
The constraints' elimination of behaviors also decreases the time required for strategy
selection. Figure 15b plots the total time for constraint propagation and value iteration over
the same four MDPs as in Figure 15a (averaged over the same ve constraint orderings).
Each data point is also a mean over ve separate iterations, for a total of 25 iterations
per data point. The values for the zero-constraint case correspond to standard value iteration without constraints. The savings in value iteration over the restricted strategy space
dramatically outweigh the cost of pre-propagating the additional constraints. In addition,
the savings increase with the size of the MDP. For the original delay MDP (A), there is
a 28% reduction in policy-generation time, while for the largest MDP (D), there is a 53%
reduction. Thus, the introduction of constraints can provide dramatic acceleration of the
agent's strategy selection.

211

Scerri, Pynadath & Tambe
6.

Related Work

We have discussed some related work in Section 1. This section adds to that discussion.
In Section 6.1, we examine two representative AA systems { where detailed experimental
results have been presented { and explain those results via our model. This illustrates the
potential applicability of our model to other systems. In Section 6.2, we examine other AA
systems and other areas of related work, such as meta-reasoning, conditional planning and
anytime algorithms.

6.1 Analyzing Other AA Work Using the Strategy Model
Goodrich, Olsen, Crandall, and Palmer (2001) report on tele-operated teams of robots,
where both the user's high-level reasoning and the robots' low-level skills are required to
achieve some task. Within this domain, they have examined the eect of user neglect on
robot performance. The idea of user neglect is similar to our idea of entities taking time
to make decisions; in this case, if the user \neglects" the robot, the joint task takes longer
to perform. In this domain, the coordination constraint is that user input must arrive so
that the robot can work out the low-level actions it needs to perform. Four control systems
were tested on the robot, each giving a dierent amount of autonomy to the robot, and the
performance was measured as user neglect was varied.
Although quite distinct from the E-Elves system, mapping Goodrich's team of robots
to our AA problem formulation provides some interesting insights. This system has the
interesting feature that the entity the robot can call on for a decision, i.e., the user, is also
part of the team. Changing the autonomy of the robot eectively changes the nature of
the coordination constraints between the user and robot. Figure 16 shows the performance
(y-axis) of the four control policies as the amount of user neglect was increased (x-axis).
The experiments showed that higher robot autonomy allowed the operator to \neglect" the
robot more without as serious an impact on its performance.
The notion of transfer-of-control strategies can be used to qualitatively predict the same
behavior as was observed in practice, even though Goodrich et al. (2001) did not use the
notion of strategies. The lowest autonomy control policy used by Goodrich et al. (2001)
was a pure tele-operation one. Since the robot cannot resort to its own decision making,
we represent this control policy with a strategy U , i.e., control indenitely in the hands
of the user. The second control policy allows the user to specify waypoints and on-board
intelligence works out the details of getting to the waypoints. Since the robot has no highlevel decision-making ability, the strategy is simply to give control to the user. However,
since the coordination between the robot and user is more abstract, i.e., the coordination
constraints are looser, the wait cost function is less severe. Also the human is giving less
detailed guidance than in the fully tele-operated case (which is not as good according to
(Goodrich et al., 2001)), hence we use a lower value for the expected quality of the user
decision. We denote this approach Uw p to distinguish it from the fully tele-operated case.
The next control policy allows the robot to choose its own waypoints given that the user
inputs regions of interest. The robot can also accept waypoints from the user. The ability
for the robot to calculate waypoints is modeled as a D, since it eectively changes the
coordination between the entities, by removing the user's need to give waypoints. We model
this control policy as the strategy U DU . The nal control policy is full autonomy, i.e., A.
212

Towards Adjustable Autonomy for the Real World
Performance

A

UDU
U wp

U

Neglect

(a)
Goodrich robot operation EU
60
40
EU

20
0
-20
-40
-60
2

1.5

(b)

1
p

0.5

0

Figure 16: Goodrich at al's various control strategies plotted against neglect. (a) Experimental results. Thinner lines represent control systems with more intelligence
and autonomy. (b) Results theoretically derived from model of strategies presented in this article (p is the parameter to the probability of response function).
Robot decision making is inferior to that of the user, hence the robot's decision quality is less
than the user's. The graphs of the four strategies, plotted against the probability of response
parameter (getting smaller to the right, to match \neglect" in the Goodrich et al graph) is
shown in Figure 16. Notice that the shape of the graph theoretically derived from our model,
shown in Figure 16(b), is qualitatively the same as the shape of the experimentally derived
graph, Figure 16(a). Hence, the theory predicted qualitatively the same performance as
was found from experimentation.
A common assumption in earlier AA work has been that if any entity is asked for a
decision it will make that decision promptly, hence strategies handling the contingency
213

Scerri, Pynadath & Tambe
of a lack of response have not been required. For example, Horvitz's (1999) work using
decision theory is aimed at developing general, theoretical models for AA reasoning for a
user at a workstation. A prototype system, called LookOut, for helping users manage their
calendars has been implemented to test these ideas (Horvitz, 1999). Although such systems
are distinctly dierent from E-Elves, mapping them to our problem formulation allows us to
analyze the utility of the approaches across a range of domains without having to implement
the approach in those domains.
A critical dierence between Horvitz's work and our work is that LookOut does not
address the possibility of not receiving a (timely) response. Thus, complex strategies are
not required. In the typical case for LookOut, the agent has three options: to take some
action, not to take the action, or to engage in dialog. The central factor inuencing the
decision is whether the user has a particular goal that the action would aid, i.e., if the user
has the goal, then the action is useful, but if he/she does not have the goal, the action is
disruptive. Choosing to act or not to act corresponds to pursuing strategy A.7 Choosing
to seek user input corresponds to strategy U . Figure 17(a) shows a graph of the dierent
options plotted against the probability the user has the goal (corresponds to Figure 6 in
Horvitz (1999)). The agent's expected decision quality, EQdA (t) is derived from Equation
2 in Horvitz (1999). (In other words, Horvitz's model performs more detailed calculations
of expected decision quality.) Our model then predicts the same selection of strategies as
Horvitz does, i.e., choosing strategy A when EQdA (t) is low, U otherwise (assuming that
only those two strategies are available). However, our model further predicts something
that Horvitz did not consider, i.e., that if the rate at which wait costs accrue becomes
non-negligible then the choice is not as simple. Figure 17(b) shows how the EU of the two
strategies changes as the rate of wait costs accruing is increased. The fact that the optimal
strategy varies with wait cost suggests that Horvitz's approach would not immediately be
appropriate for a domain where wait costs were non-negligible, e.g., it would need to be
modied in many multi-agent settings.

6.2 Other Approaches to AA
Several dierent approaches have been taken to the core problem of whether and when to
transfer decision-making control. For example, Hexmoor examines how much time the agent
has to do AA reasoning (Hexmoor, 2000). Similarly, in the Dynamic Adaptive Autonomy
framework, a group of agents allocates votes amongst themselves, hence dening the amount
of inuence each agent has over a decision and thus, by their denition, the autonomy of
the agent with respect to the decision (Barber, Martin, & Mckay, 2000b). For the related
application of meeting scheduling Cesta, Collia, and D'Aloisi (1998) have taken the approach
of providing powerful tools for users to constrain and monitor the behavior of their proxy
agents, but the agents do not explicitly reason about relinquishing control to the user.
While at least some of this work is done in a multiagent context, the possibility of multiple
transfers of control is not considered.
Complementing our work, other researchers have focused on issues of architectures for
AA. For instance, an AA interface to the 3T architecture (Bonasso, Firby, Gat, Kortenkamp,
7. We consider choosing not to act an autonomous decision, hence categorize it in the same way as autonomous action

214

Towards Adjustable Autonomy for the Real World

Horvitz’s EU Calculations with Wait Cost
1

EU

0
-1
-2
0

0.2
0.4
0.6
0.8
Probability User has Goal

1

(a)

Horvitz’s EU Calculations with Wait Cost
0.4

EU

0.2
0
-0.2
-0.4
-0.6
0

0.05 0.1 0.15 0.2 0.25 0.3

(b)

w

Figure 17: EU of dierent agent options. The solid (darkest) line shows the EU taking
an autonomous action, the dashed (medium dark) line shows the EU of autonomously deciding not to act and the dotted line shows the EU of transferring
control to the user. (a) Plotted against the probability of user having goal, no
wait cost. (b) plotted against wait cost, xed probability of user having goal.
Miller, & Slack, 1997) has been implemented to solve human-machine interaction problems
experienced in a number of NASA projects (Brann, Thurman, & Mitchell, 1996). The
experiences showed that interaction with the system was required all the way from the
deliberative layer through to detailed control of actuators. The AA controls at all layers
are encapsulated in what is referred to as the 3T's fourth layer { the interaction layer
215

Scerri, Pynadath & Tambe
(Schreckenghost, 1999). A similar area where AA technology is required is for safety-critical
intelligent software, such as for controlling nuclear power plants and oil reneries (Musliner
& Krebsbach, 1999). That work has resulted in a system called AEGIS (Abnormal Event
Guidance and Information System) that combines human and agent capabilities for rapid
reaction to emergencies in a petro-chemical rening plant. AEGIS features a shared task
representation that both the users and the intelligent system can work with (Goldman,
Guerlain, Miller, & Musliner, 1997). A key hypothesis of the work is that the model needs
to have multiple levels of abstraction so that the user can interact at the level they see t.
Interesting work by Fong, Thorpe, and Baur (2002) has extended the idea of tele-operated
robotics by re-dening the relationship between the robot and user as a collaborative one,
rather than the traditional master-slave conguration. In particular, the robot treats the
human as a resource that can perform perceptual or cognitive functions that the robot
determines it cannot adequately perform. However, as yet the work has not looked at the
possibility that the user is not available to provide input when required, which would require
the robot perform more complex transfer-of-control reasoning.
While most previous work in AA has ignored complex strategies for AA, there is work
in other research elds that is potentially relevant. For example, the research issues addressed by elds such as mixed-initiative decision-making (Collins, Bilot, Gini, & Mobasher,
2000b), anytime algorithms (Zilberstein, 1996), multi-processor scheduling (Stankovic, Ramamritham, & Cheng, 1985), meta-reasoning (Russell & Wefald, 1989), game theory (Fudenberg & Tirole, 1991), and contingency plans (Draper, Hanks, & Weld, 1994; Peot &
Smith, 1992) all have, at least supercial, similarities with the AA problem. However, it
turns out that the core assumptions and focus of these other research areas are dierent
enough that the algorithms developed in these related elds are not directly applicable to
the AA problem.
In mixed-initiative decision making a human user is assumed to be continually available
(Collins et al., 2000b; Ferguson & Allen, 1998), negating any need for reasoning about the
likelihood of response. Furthermore, there is often little or no time pressure or coordination
constraints. Thus, while the basic problem of transferring control between a human and
agent is common to both mixed-initiative decision making and AA, the assumptions are
quite dierent leading to distinct solutions. Likewise, other related research elds make
distinctly dierent assumptions which lead to distinctly dierent solutions. For instance,
contingency planning (Draper et al., 1994; Peot & Smith, 1992) deals with the problem of
creating plans to deal with critical developments in the environment. Strategies are related
to contingency planning in that they are plans to deal with the specic contingency of an
entity not making a decision in a manner that maintains coordination. However, in contingency planning, the key diÆculty is in creating the plans. In contrast, in AA, creating
strategies is straightforward and the key diÆculty is choosing between those strategies. Our
contribution is in recognizing the need for strategies in addressing the AA problem, instantiating such strategies via MDPs, and the development of a general, domain-independent
reward function that leads to an MDP choosing the optimal strategy for a particular situation.
Similarly, another related research area is meta-reasoning (Russell & Wefald, 1989).
Meta-reasoning work looks at online reasoning about computation. A type of meta-reasoning,
most closely related to AA, chooses between sequences of computations with dierent ex216

Towards Adjustable Autonomy for the Real World
pected quality and running time, subject to the constraint that choosing the highest-quality
sequence of computations is not possible (because it takes too long) (Russell & Wefald,
1989). The idea is to treat computations as actions and \meta-reason" about the EU of
doing certain combinations of computation and (base-level) actions. The output of metareasoning is a sequence of computations that are executed in sequence. AA parallels metareasoning if we consider reasoning about transferring control to entities as reasoning about
selecting computations, i.e., we think of entities as computations. However, in AA, the
aim is to have one entity make a high-quality decision, while in meta-reasoning, the aim is
for a sequence of computations to have some high quality. Moreover, the meta-reasoning
assumption that computations are guaranteed to return a timely result if executed, does
not apply in AA. Finally, meta-reasoning looks for a sequence of computations that use a
xed amount of time, while AA reasons about trading o extra time for a better decision
(possibly buying time with a D action). Thus, algorithms developed for meta-reasoning are
not applicable to AA.
Another research area with conceptual similarity to AA is the eld of anytime algorithms (Zilberstein, 1996). An anytime algorithm quickly nds an initial solution and then
incrementally tries to improve the solution until stopped. The AA problem is similar when
we assume that the agent itself can make an immediate decision, because the problem then
has the property that a solution is always available (an important property of an anytime
algorithm). However, this will not be the case in general, i.e., the agent will not always have
an answer. Furthermore, anytime algorithms do not generally need to deal with multiple,
distributed entities, nor do they have the opportunity to change coordination (i.e., using a
D action).
Multi-processor scheduling looks at assigning tasks to nodes in order to meet certain
time constraints (Stankovic et al., 1985). If entities are thought of as \nodes", then AA
is also about assigning tasks to nodes. In multiprocessor scheduling, the quality of the
computation performed on each of the nodes is usually assumed to be equal, i.e., the nodes
are homogeneous. Thus, reasoning that trades o quality and time is not required, as it is in
AA. Moreover, deadlines are externally imposed for multi-processor scheduling algorithms,
rather than being exibly reasoned about as in AA. Multi-processor scheduling algorithms
can sometimes deal with a node rejecting a task because it cannot fulll the time constraints
or network failures. However, while the AA problem focuses on failure to get a response
as a central issue and load balancing as an auxiliary issue, multi-processor scheduling has
the opposite focus. The dierence in focus leads to algorithms being developed in the
multiprocessor scheduling community that are not well suited to AA (and vice versa).
7.

Conclusions

Adjustable autonomy is critical to the success of real-world agent systems because it allows
an agent to leverage the skills, resources and decision-making abilities of other entities,
both human and agent. Previous work has addressed AA in the context of single-agent
and single-human scenarios, but those solutions do not scale to increasingly complex multiagent systems. In particular, previous work used rigid, one-shot transfers of control that
did not consider team costs and, more importantly, did not consider the possibility of costly

217

Scerri, Pynadath & Tambe
miscoordination between team members. Indeed, when we applied a rigid transfer-of-control
approach to a multi-agent context, it failed dramatically.
This article makes three key contributions to enable the application of AA in more
complex multiagent domains. First, the article introduces the notion of a transfer-of-control
strategy. A transfer-of-control strategy consists of a conditional sequence of two types
of actions: (i) actions to transfer decision-making control and (ii) actions to change an
agent's pre-specied coordination constraints with team members, aimed at minimizing
miscoordination costs. Such strategies allow agents to plan sequences of transfer-of-control
actions. Thus, a strategy allows the agent to transfer control to entities best able to make
decisions, buy more time for decisions to be made and still avoid miscoordination | even
if the entity to which control is transferred fails to make the decision. Additionally, we
introduced the idea of changing coordination constraints as a mechanism for giving the
agent more opportunity to provide high-quality decisions, and we showed that such changes
can, in some cases, be an eective way of increasing the team's expected utility.
The second contribution of this article is a mathematical model of AA strategies that
allows us to calculate the expected utility of such strategies. The model shows that while
complex strategies are indeed better than single-shot strategies in some situations, they are
not always superior. In fact, our analysis showed that no particular strategy dominates
over the whole space of AA decisions; instead, dierent strategies are optimal in dierent
situations.
The third contribution of this article is the operationalization of the notion of transferof-control strategies via Markov Decision Processes and a general reward function that
leads the MDP to nd optimal strategies in a multiagent context. The general, domainindependent reward function should allow our approach to potentially be applied to other
multi-agent domains. We implemented, applied, and tested our MDP approach to AA reasoning in a real-world application supporting researchers in their daily activities. Daily use
showed the MDP approach to be eective at balancing the need to avoid risky autonomous
decisions and the potential for costly miscoordination. Furthermore, detailed experiments
showed that the policies produced by the MDPs have desirable properties, such as transferring control to the user less often when the probability of getting a timely response is low.
Finally, practical experience with the system revealed that users require the ability to manipulate the AA reasoning of the agents. To this end, we introduced a constraint language
that allows the user to limit the range of behavior the MDP can exhibit. We presented an
algorithm for processing such constraints, and we showed it to have the desirable property
of reducing the time it takes to nd optimal policies.
8.

Future Work

The model of AA presented in this article is suÆciently rich to model a wide variety of
interesting applications. However, there are some key factors that are not modeled in the
current formulation that are required for some domains. One key issue is to allow an agent
to factor the AA reasoning of other agents into its own AA reasoning. For instance, in
the Elves domain, if one agent is likely to decide to delay a meeting, another agent may
wait until that decision and avoid asking its user. Conversely, if an agent about to take
back control of a decision knows another agent is going to continue waiting for user input,
218

Towards Adjustable Autonomy for the Real World
it might also continue to wait for input. Such interactions will substantially increase the
complexity of the reasoning an agent needs to perform. In this article, we have assumed
that the agent is nding a transfer-of-control strategy for a single, isolated decision. In
general, there will be many decisions to be made at once and the agent will not be able to
ignore the interactions between those decisions. For example, transferring control of many
decisions to a user, reduces the probability of getting a prompt response to any of them.
Reasoning about these interactions will add further complexity to the required reasoning of
the agent.
Another focus of future work will be generalizing the AA decision making to allow other
types of constraints | not just coordination constraints | to be taken into account. This
would in turn require generalization of the concept of a D action to include other types
of stop-gap actions and may lead to dierent types of strategies an agent could pursue.
Additionally, transfer-of-control actions could be generalized to allow parts of a decision
to be transferred, e.g., to allow input to be received from a user without transferring total
control to him/her, or allow actions that could be performed collaboratively. Similarly, if
actions were reversible, the agent could make the decision but allow the user to reverse
it. We hope that such generalizations would improve the applicability of our adjustable
autonomy research in more complex domains.
Acknowledgments

This research was supported by DARPA award no. F30602-98-2-0108. The eort is being
managed by Air Force Research Labs/Rome site. This article unies, generalizes, and significantly extends approaches described in our previous conference papers (Scerri et al., 2001;
Scerri, Pynadath, & Tambe, 2002; Pynadath & Tambe, 2001). We thank our colleagues,
especially, Craig Knoblock, Yolanda Gil, Hans Chalupsky and Tom Russ for collaborating
on the Electric Elves project. We would also like to thank the JAIR reviewers for their
useful comments.

219

Scerri, Pynadath & Tambe
Appendix A: An Example Instantiation of the Model

In this Appendix, we present a detailed look at one possible instantiation of the AA model.
We use that instantiation to calculate the EU of commonly used strategies and show how
that EU varies with parameters such as the rate of wait cost accrual and the time at which
transfers of control are performed. In this instantiation, the agent, A, has only one entity to
call on for a decision (i.e., the user U ), hence E = fA; U g. For W (t), we use the following
function:
(

!t t  
W (t) = !! exp
exp! otherwise

(15)

The exponential wait cost function reects the idea that a big delay is much worse than
a small one. A polynomial or similar function could have also been used but an exponential
was used since it makes the mathematics cleaner. For the probability of response we use:
P>(t) =  exp t . A Markovian response probability reects an entity that is just as likely
to respond at the next point in time as they were at the previous point. For users moving around a dynamic environment, this turns out to be a reasonable approximation. The
entities' decision-making quality is constant over time, in particular, EQdA (t) =  and for
EQdU (t) =  . Assuming constant decision-making quality will not always be accurate in a
dynamic environment since information available to an entity may change (hence inuencing
their ability to make the decision) however, for decisions involving static facts or preferences
decision-making quality will be relatively constant. The functions are a coarse approximation of a range of interesting applications, including the E-Elves. Table 7 shows the resulting
instantiated equations for the simple strategies (For convenience we let Æ =  !). Figures
18(a) and (b) show graphically how the EU of the eA strategy varies along dierent axes (w
is the parameter to the wait cost function, higher w means faster accruing wait costs and
p is the parameter to the response probability function, higher p means faster response).
Notice how the EU depends on the transfer time (T) as much as it does on  (the user's
decision quality). Figure 18(d) shows the value of a D (as discussed earlier).
Figure 18(c) compares the EU of the e DeA and e strategies. The more complex the
transfer-of-control strategy (i.e., the more transfers of control it makes), the atter the
EU graph when plotted against wait cost (w) and response probability (p) parameters. In
particular, the fall-o when the wait costs are high and the probability of response low is
not so dramatic for the more complex strategy.

Appendix B: Constraint Propagation Algorithm and its Correctness

In Section 4.4, we examined the need for user-specied constraints in conjunction with
our MDP-based approach to strategies. We must thus extend the standard MDP policy
evaluation algorithms to support the evaluation of strategies while accounting for both the
standard quantitative reward function and these new qualitative constraints. This appendix
provides the novel algorithm that we developed to evaluate strategies while accounting for
220

Towards Adjustable Autonomy for the Real World

5
4.5
4
3.5
3
0

20
15
10
5
0
-5

1.5
0.1

w 0.2

0.3

0.5

1 p

0

10

(a)

T20

30

40

(b)
Value
0.16
0.12
0.08
0.04
0
-0.04

5
0
-5
0.1

w 0.2

0.3

4

20
16
12
beta
8

0.4

1.2
0.8p

0.1 0.2
w0.3 0.4 0.5

(c)

1
0.75
0.5 p
0.25

(d)

Figure 18: Equation 17, i.e., strategy eA plotted against (a) ! (i.e., w, the rate at which
wait costs accrue) and  (i.e., p the likelihood of response) and (b) T (transfer
time)and beta (the user's decision quality). (c) Comparing strategies e DeA and
e (dotted line is e ). (d) The value of a D.

221

Scerri, Pynadath & Tambe


EUed t = exp Æ !(
Æ
d t = ! exp
EUeA

T Æ( 

1) + exp

Æ

1)

!
+
Æ

T (

)

(16)

!
+
Æ

(17)

EUedDeAt =
(18)
!
D
value
! (exp Æ 1) +  (1 exp  ) + ! exp
(exp T Æ exp Æ ) +
Æ
Æ
(Dcost  )(exp T exp  ) + ! exp! (exp !Dvalue 1)(exp  exp T )
exp T (Dcost  + !(exp! exp!( Dvalue ) + exp!(T Dvalue ) ))
Table 7: Instantiated AA EU equations for simple transfer of control strategies.
both. We also present a detailed proof that our algorithm's output is the correct strategy
(i.e., the strategy with the highest expected utility, subject to the user-specied constraints).
In the standard MDP value iteration algorithm, the value of a strategy in a particular
state is a single number, an expected utility U . With the addition of our two types of
constraints, this value is now a tuple hF; N; U i. F represents a strategy's ability to satisfy
the forbidding constraints; therefore, it is a boolean indicating whether the state is forbidden
or not. N represents a strategy's ability to satisfy the necessary constraints; therefore, it
is the set of requiring constraints that will be satised. As in traditional value iteration,
U is the expected reward. For instance, if the value of a state, V (s) = htrue; fcrs g; 0:3i,
then executing the policy from state s will achieve an expected value of 0.3 and will satisfy
required-state constraint crs . However, it is not guaranteed to satisfy any other requiredstate, nor any required-action, constraints. In addition, s is forbidden, so there is a nonzero
probability of violating a forbidden-action or forbidden-state constraint. We do not record
which forbidding constraints the policy violates, since violating any one of them is equally
bad. We do have to record which requiring constraints the policy satises, since satisfying
all such constraints is preferable to satisfying only some of them. Therefore, the size of the
value function grows linearly with the number of requiring constraints, but is independent
of the number of forbidding constraints.
Following the form of standard value iteration, we initialize the value function over
states by considering the immediate value of the strategy in the given state, without any
lookahead. More precisely:

V 0 (s)

*

_

c2Cfs

+

c(s); fc 2 Crs jc(s)g ; RS (s)

(19)

Thus, the state s is forbidden if any forbidden-state constraints immediately apply, and
it satises those required-state constraints that immediately apply. As in standard value
iteration, the expected utility is the value of the reward function in the state.
222

Towards Adjustable Autonomy for the Real World
In value iteration, we must dene an updated value function V t+1 as a renement
of the previous iteration's value function, V t . States become forbidden in V t+1 if they
violate any constraints directly or if any of their successors are forbidden according to V t .
States satisfy requirements if they satisfy them directly or if all of their successors satisfy
the requirement. To simplify the following expressions, we dene S 0 to be the set of all
successors: fs0 2 S jMssa 0 > 0g. The following expression provides the precise denition of
this iterative step:
*

_
_
_
max
c(s) _
c(s; a) _
F 0;
a2A c2C
t
0
0
0
c2Cfa V (s )=hF ;N ;U 0 i;s0 2S 0
fs
\
fc 2 Crsjc(s)g [ fc 2 Cra jc(s; a)g [ N 0;
V t (s0 )=hF 0 ;N 0 ;U 0 i;s0 2S 0
+
X
RS (s) + R(s; a) + Mssa 0 U 0
(20)
V t (s0 )=hF 0 ;N 0 ;U 0 i;s0 2S 0
Just as in standard value iteration, this iterative step species a maximization over all possible choices of action. However, with our two additional components to represent the value
of the strategy with respect to the constraints, we no longer have an obvious comparison
function to use when evaluating candidate actions. Therefore, we perform the maximization
using the following preference ordering, where x  y means that y is preferable to x:
ht; N; U i  

f; N 0; U 0 
hF; N; U i  
F; N 0  N; U0
hF; N; U i  F; N; U 0 > U

V t+1 (s)

In other words, satisfying a forbidden constraint takes highest priority, satisfying more
requiring constraints is second, and increasing expected value is last. We dene the optimal
action, P (s), as the action, a, for which the nal V (s) expression above is maximized.
Despite the various set operations in Equation 20, the time complexity of this iteration
step exceeds that of standard value iteration by only a linear factor, namely the number
of constraints, jCfs j + jCfa j + jCrsj + jCra j. The eÆciency derives from the fact that the
constraints are satised/violated independently of each other. The determination of whether
a single constraint is satised/violated requires no more time than that of standard value
iteration, hence the overall linear increase in time complexity.
Because expected value has the lowest priority, we can separate the iterative step of
Equation 20 into two phases: constraint propagation and value iteration. During the
constraint-propagation phase, we compute only the rst two components of our value function, hF; N; i. The value-iteration phase computes the third component, h; ; U i, as in
standard value iteration. However, we can ignore any state/action pairs that, according
to the results of constraint propagation, violate a forbidding constraint (ht; N; i) or requiring constraint (hf; N  Crs [ Cra ; i). Because of the component-wise independence of
Equation 20, the two-phase algorithm computes an identical value function as the original,
single-phase version (over state/action pairs that satisfy all constraints).
In the rest of this Appendix we provide a proof of the correctness of the modied value
iteration policy. Given a policy, P , constructed according to the above algorithm, we must
223

Scerri, Pynadath & Tambe
show that an agent following P will obey the constraints specied by the user. If the agent
begins in some state, s 2 S , we must prove that it will satisfy all of its constraints if and only
if V (s) = hf; Cra [ Crs ; U i. We prove the results for forbidding and requiring constraints
separately.

Theorem 1 An agent following policy, P , with value function, V , generated as in Section 4.4, from any state s 2 S will violate a forbidding constraint with probability zero if
and only if V (s) = hf; N; U i (for some U and N ).
Proof: We prove the theorem by induction over subspaces of the states, classied by

how \close" they are to violating a forbidding constraint. More precisely, we partition the
state space, S , into subsets, Sk , dened to contain all states that can violate a forbidding
constraint after a minimum of k state transitions. In other words, S0 contains those states
that violate a forbidding constraint directly; S1 contains those states that do not violate
any forbidding constraints themselves, but have a successor state (following the transition
probability function, P ) that does (i.e., a successor state in S0 ); S2 contains those states
that do not violate any forbidding constraints, nor have any successors that do, but who
have at least one successor state that has a successor state that does (i.e., a successor state
in S1 ); etc. There are at most jS j nonempty subsets in this mutually exclusive sequence. To
make this partition exhaustive, the special subset, S1 , contains all states from which the
agent will never violate a forbidding constraint by following P . We rst show, by induction
over k, that 8s 2 Sk (0  k  jS j), V (s) = ht; N; U i, as required by the theorem.
Basis step (S0): By denition, the agent will violate a forbidding constraint in s 2 S0 .
Therefore, either 9c 2 Cfs such that c(s) = t or 9c 2 Cfa such that c(s; P (s)) = t, so we
know, from Equation 20, V (s) = ht; N; U i.
Inductive step (Sk ; 1  k  jS j): Assume, as the induction hypothesis, that 8s0 2
Sk 1 , V (s0 ) = ht; N 0 ; U 0 i. By the denition of Sk , each state, s 2 Sk , has at least one
successor state, s0 2 Sk 1 . Then, according to Equation 20, V (s) = ht; N; U i, because the
disjunction over S 0 must include s0 , for which F 0 = t.
Therefore, by induction, we know that for all s 2 Sk (0  k  jS j), V (s) = ht; N; U i.
We now show that 8s 2 S1 , V (s) = hf; N; U i. We prove, by induction over t, that, for any
state, s 2 S1, V t (s) = hf; N; U i.
Basis step (V 0 ): By denition, if s 2 
S1 , there cannot exist any c 2 Cfs such that
c(s) = t. Then, from Equation 19, V 0 (s) = f; N 0 ; U 0 .
Inductive step (V t ; t > 0): Assume, as the
 inductive
hypothesis, that, for any s0 2 S1 ,

V t 1 (s0 ) = hf; N 0 ; U 0 i. We know that V t (s) = f; N t ; U t if and only if all three disjunctions
in Equation 20 are false. The rst is false, as described in the basis step. The second term
is similarly false, since, by the denition of S1, there cannot exist any c 2 Cfa such that
c(s; P (s)) = t. In evaluating the third term, we rst note that S 0  S1. In other words,
all of the successor states of s are also in S1 (if successor s0 2 Sk for some nite k, then
s 2 Sk+1). Since all of the successors are in S1 , we know, by the inductive hypothesis, that
the disjunction over V t 1 in all these successors
is false. Therefore, all three disjunctive


terms in Equation 20 are false, so V t (s) = f; N t ; U t .
Therefore, by induction, we know that for all s 2 S1 , V (s) = hf; N; U i. By the denition
of the state partition, these two results prove the theorem as required. 2
224

Towards Adjustable Autonomy for the Real World
Theorem 2 An agent following policy, P , with value function, V , generated as described
in Section 4.4, from any state s 2 S will satisfy each and every requiring constraint with
probability one if and only if V (s) = hF; Cra [ Crs ; U i (for some U and F ).
Proof Sketch: The proof parallels that of Theorem 1, but with a state partition, Sk ,
where k corresponds to the maximum number of transitions before satisfying a requiring
constraint. However, here, states in S1 are those that violate the constraint, rather than

satisfy it. Some cycles in the state space can prevent a guarantee of satisfying a requiring
constraint within any xed number of transitions, although the probability of satisfaction
in the limit may be 1. In our current constraint semantics, we have decided that such a
situation fails to satisfy the constraint, and our algorithm behaves accordingly. Such cycles
have no eect on the handling of forbidding constraints, where, as we saw for Theorem 1,
we need consider only the minimum -length trajectory. 2
The proofs of the two theorems operate independently, so the policy-specied action will
satisfy all constraints, if such an action exists. The precedence of forbidding constraints
over requiring ones has no eect on the optimal action in such states. However, if there
are conicting forbidding and requiring constraints in a state, then the preference ordering
causes the agent to choose a policy that satises the forbidding constraint and violates
a requiring constraint. The agent can make the opposite choice if we simply change the
preference ordering from Section 4.4. Regardless of the choice, from Theorems 1 and 2,
the agent can use the value function, V , to identify the existence of any such violation and
notify the user of the violation and possible constraint conict.
References

Barber, K., Goel, A., & Martin, C. (2000a). Dynamic adaptive autonomy in multi-agent
systems. Journal of Experimental and Theoretical Articial Intelligence, 12 (2), 129{
148.
Barber, K. S., Martin, C., & Mckay, R. (2000b). A communication protocol supporting
dynamic autonomy agreements. In Proceedings of PRICAI 2000 Workshop on Teams
with Adjustable Autonomy, pp. 1{10, Melbourne, Australia.
Bonasso, R., Firby, R., Gat, E., Kortenkamp, D., Miller, D., & Slack, M. (1997). Experiences with an architecture for intelligent reactive agents. Journal of Experimental
and Theorectical Articial Intelligence, 9 (1), 237{256.
Brann, D., Thurman, D., & Mitchell, C. (1996). Human interaction with lights-out automation: A eld study. In Proceedings of the 1996 Symposium on Human Interaction and
Complex Systems, pp. 276{283, Dayton, USA.
Cesta, A., Collia, M., & D'Aloisi, D. (1998). Tailorable interactive agents for scheduling
meetings. In Lecture Notes in AI, Proceedings of AIMSA'98, No. 1480, pp. 153{166.
Springer Verlag.
Chalupsky, H., Gil, Y., Knoblock, C., Lerman, K., Oh, J., Pynadath, D., Russ, T., & Tambe,
M. (2001). Electric Elves: Applying agent technology to support human organizations.
In International Conference on Innovative Applications of AI, pp. 51{58.
225

Scerri, Pynadath & Tambe
Collins, J., Bilot, C., Gini, M., & Mobasher, B. (2000a). Mixed-initiative decision-support
in agent-based automated contracting. In Proceedings of the International Conference
on Autonomous Agents (Agents'2000).
Collins, J., Bilot, C., Gini, M., & Mobasher, B. (2000b). Mixed-initiative decision support
in agent-based automated contracting. In Proceedings of the International Conference
on Autonomous Agents (Agents'2000), pp. 247{254.
Dorais, G., Bonasso, R., Kortenkamp, D., Pell, B., & Schreckenghost, D. (1998). Adjustable
autonomy for human-centered autonomous systems on mars. In Proceedings of the
First International Conference of the Mars Society, pp. 397{420.
Draper, D., Hanks, S., & Weld, D. (1994). Probabilistic planning with information gathering
and contingent execution. In Hammond, K. (Ed.), Proc. Second International Conference on Articial Intelligence Planning Systems, pp. 31{37, University of Chicago,
Illinois. AAAI Press.
Ferguson, G., Allen, J., & Miller, B. (1996). TRAINS-95 : Towards a mixed-initiative
planning assistant. In Proceedings of the Third Conference on Articial Intelligence
Planning Systems, pp. 70{77.
Ferguson, G., & Allen, J. (1998). TRIPS : An intelligent integrated problem-solving assistant. In Proceedings of Fifteenth National Conference on Articial Intelligence(AAAI98), pp. 567{573, Madison, WI, USA.
Fong, T., Thorpe, C., & Baur, C. (2002). Robot as partner: Vehicle teleoperation with collaborative control. In Workshop on Multi-Robot Systems, Naval Research Laboratory,
Washington, D.C.
Fudenberg, D., & Tirole, J. (1991). Game Theory. The MIT Press, Cambridge, Massachusetts.
Goldman, R., Guerlain, S., Miller, C., & Musliner, D. (1997). Integrated task representation for indirect interaction. In Working Notes of the AAAI Spring Symposium on
Computational Models for Mixed-Initiative Interaction.
Goodrich, M., Olsen, D., Crandall, J., & Palmer, T. (2001). Experiments in adjustable
autonomy. In Hexmoor, H., Castelfranchi, C., Falcone, R., & Cox, M. (Eds.), Proceedings of IJCAI Workshop on Autonomy, Delegation and Control: Interacting with
Intelligent Agents.
Gunderson, J., & Martin, W. (1999). Eects of uncertainty on variable autonomy in maintainance robots. In Agents'99 Workshop on Autonomy Control Software, pp. 26{34.
Hexmoor, H. (2000). A cognitive model of situated autonomy. In Proceedings of PRICAI2000, Workshop on Teams with Adjustable Autonomy, pp. 11{20, Melbourne, Australia.
Hexmoor, H., & Kortenkamp, D. (2000). Introduction to autonomy control software. Journal
of Experiemental and Theoretical Articial Intelligence, 12 (2), 123{128.
Horvitz, E. (1999). Principles of mixed-initiative user interfaces. In Proceedings of ACM
SIGCHI Conference on Human Factors in Computing Systems (CHI'99), pp. 159{166,
Pittsburgh, PA.
226

Towards Adjustable Autonomy for the Real World
Horvitz, E., Jacobs, A., & Hovel, D. (1999). Attention-sensitive alerting. In Proceedings of
Conference on Uncertainty and Articial Intelligence (UAI'99), pp. 305{313, Stockholm, Sweden.
Lesser, V., Atighetchi, M., Benyo, B., Horling, B., Raja, A., Vincent, R., Wagner, T., Xuan,
P., & Zhang, S. (1999). The UMASS intelligent home project. In Proceedings of the
Third Annual Conference on Autonomous Agents, pp. 291{298, Seattle, USA.
Mitchell, T., Caruana, R., Freitag, D., McDermott, J., & Zabowski, D. (1994). Experience
with a learning personal assistant. Communications of the ACM, 37 (7), 81{91.
Mulsiner, D., & Pell, B. (1999). Call for papers: AAAI spring symposium on adjustable
autonomy. www.aaai.org.
Musliner, D., & Krebsbach, K. (1999). Adjustable autonomy in procedural control for
reneries. In AAAI Spring Symposium on Agents with Adjustable Autonomy, pp.
81{87, Stanford, California.
Peot, M. A., & Smith, D. E. (1992). Conditional nonlinear planning. In Hendler, J. (Ed.),
Proc. First International Conference on Articial Intelligence Planning Systems, pp.
189{197, College Park, Maryland. Morgan Kaufmann.
Puterman, M. L. (1994). Markov Decision Processes. John Wiley & Sons.
Pynadath, D., Tambe, M., Arens, Y., Chalupsky, H., Gil, Y., Knoblock, C., Lee, H., Lerman,
K., Oh, J., Kamachandran, S., Rosenbloom, P., & Russ, T. (2000). Electric-elves:
Immersing and agent organization in a human organization. In Proceedings of the
AAAI Fall Symposium on Socially Intelligent Agents { The Human in the Loop.
Pynadath, D., & Tambe, M. (2001). Revisiting Asimov's rst law: A response to the call to
arms. In Intelligent Agents VIII Proceedings of the International workshop on Agents,
Theories, Architectures and Languages (ATAL'01).
Quinlan, J. R. (1993). C4.5: Programs for machine learning. Morgan Kaufmann, San
Mateo, CA.
Russell, S. J., & Wefald, E. (1989). Principles of metareasoning. In Brachman, R. J.,
Levesque, H. J., & Reiter, R. (Eds.), KR'89: Principles of Knowledge Representation
and Reasoning, pp. 400{411. Morgan Kaufmann, San Mateo, California.
Scerri, P., Pynadath, D., & Tambe, M. (2001). Adjustable autonomy in real-world multiagent environments. In Proceedings of the Fifth International Conference on Autonomous Agents (Agents'01), pp. 300{307.
Scerri, P., Pynadath, D., & Tambe, M. (2002). Why the elf acted autonomously: Towards
a theory of adjustable autonomy. In First International Joint Conference on Autonomous Agents and Multi-Agent Systems (AAMAS'02).
Schreckenghost, D. (1999). Human interaction with control software supporting adjustable
autonomy. In Musliner, D., & Pell, B. (Eds.), Agents with Adjustable Autonomy,
AAAI 1999 Spring Symposium Series, pp. 116{119.
Stankovic, J., Ramamritham, K., & Cheng, S. (1985). Evaluation of a exible task scheduling algorithm for distributed hard real-time system. IEEE Transactions on Computers, 34 (12), 1130{1143.
227

Scerri, Pynadath & Tambe
Tambe, M. (1997). Towards exible teamwork. Journal of Articial Intelligence Research
(JAIR), 7, 83{124.
Tambe, M., Pynadath, D. V., Chauvat, N., Das, A., & Kaminka, G. A. (2000). Adaptive
agent integration architectures for heterogeneous team members. In Proceedings of
the International Conference on MultiAgent Systems, pp. 301{308.
Zilberstein, S. (1996). Using anytime algorithms in intelligent systems. AI Magazine, 17 (3),
73{83.

228

Journal of Artificial Intelligence Research 17 (2002) 363–378

Submitted 5/02; published 11/02

Competitive Safety Analysis: Robust Decision-Making in
Multi-Agent Systems
moshet@ie.technion.ac.il

Moshe Tennenholtz
Faculty of Industrial Engineering and Management
Technion – Israel Institute of Technology
Haifa 32000, Israel

Abstract
Much work in AI deals with the selection of proper actions in a given (known or unknown) environment. However, the way to select a proper action when facing other agents
is quite unclear. Most work in AI adopts classical game-theoretic equilibrium analysis to
predict agent behavior in such settings. This approach however does not provide us with
any guarantee for the agent. In this paper we introduce competitive safety analysis. This
approach bridges the gap between the desired normative AI approach, where a strategy
should be selected in order to guarantee a desired payoff, and equilibrium analysis. We show
that a safety level strategy is able to guarantee the value obtained in a Nash equilibrium,
in several classical computer science settings. Then, we discuss the concept of competitive
safety strategies, and illustrate its use in a decentralized load balancing setting, typical to
network problems. In particular, we show that when we have many agents, it is possible
to guarantee an expected payoff which is a factor of 8/9 of the payoff obtained in a Nash
equilibrium. Our discussion of competitive safety analysis for decentralized load balancing
is further developed to deal with many communication links and arbitrary speeds. Finally,
we discuss the extension of the above concepts to Bayesian games, and illustrate their use
in a basic auctions setup.

1. Introduction
Deriving solution concepts for multi-agent encounters is a major challenge for researchers
in various disciplines. The most famous and popular solution concept in the economics
literature is the Nash equilibrium. Although Nash equilibrium and its extensions and modifications are powerful descriptive tools, and have been widely used in the AI literature
(Rosenschein & Zlotkin, 1994; Kraus, 1997; Sandholm & Lesser, 1995), their appeal from
a normative AI perspective is somewhat less satisfactory.1 We wish to equip an agent with
an action that guarantees some desired outcome, or expected utility, without relying on
other agents’ rationality.2 This paper shows that, surprisingly, the desire for obtaining a
guaranteed expected payoff, where this payoff is of the order of the value obtained in a
1. If we restrict ourselves to cases where there exists an equilibrium in dominant strategies, as is done in
some of the CS literature (Nisan & Ronen, 1999), then the corresponding equilibrium is appealing from
a normative perspective. However, such cases rarely exist.
2. Maximizing expected payoff when facing a set of possible environment behaviors is fundamental to AI.
In particular, it is discussed in the context of game trees, in the context of planning with incomplete
information, where we need to obtain a desired goal regardless of the initial configuration, as well as
in the context of reinforcement learning, where we wish to maximize expected payoff when the actual
model (selected from a set of possible models in adversarial way) is initially unknown. (Russell & Norvig,
1995).
c
°2002
AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Tennenholtz

Nash equilibrium, is achievable in various classical computer science settings. Our results
are inspired by several interesting examples for counter-intuitive behaviors obtained by following Nash equilibria and other solution concepts (Roth, 1980; Aumann, 1985). One of
the most interesting and challenging examples has been introduced by Aumann (Aumann,
1985). Aumann presented a 2-person 2-choice (2 × 2) game g, where the safety-level (probabilistic maximin) strategy of the game is not a Nash equilibrium of it, but it does yield
the expected payoff of a Nash equilibrium of g. This observation may have significant positive ramifications from an agent’s design perspective. If a safety-level strategy of an agent
guarantees an expected payoff that equals its expected payoff in a Nash equilibrium, then
it can serve as a desirable robust protocol for the agent! Given the above, we are interested
in whether an optimal safety level strategy leads to an expected payoff similar to the one
obtained in a Nash equilibrium of simple games that represent basic variants of classical
computer science problems. As we show, this is indeed the case for 2 × 2 games capturing
simple variants of the classical load balancing and leader election problems. A more general
question refers to more general 2 × 2 games. We show that if the safety-level strategy is a
(strictly) mixed one, then its expected payoff is identical to the expected payoff obtained in
a Nash equilibrium in any generic non-reducible 2 × 2 game. We also show that this is no
longer necessarily the case if we have a pure safety-level strategy. In addition, we consider
general 2-person set-theoretic games (which naturally extend 2 × 2 leader election games)
and show that if a set-theoretic game g possesses a strictly mixed strategy equilibrium then
the safety level value for a player in that game equals the expected payoff it obtains in
that equilibrium. Following this, we define the concept of C-competitive safety strategies.
Roughly speaking, a strategy will be called a C-competitive safety strategy, if it guarantees
an expected payoff that is C1 of the expected payoff obtained in a Nash equilibrium. We
show that in an extended decentralized load balancing setting a 9/8-competitive strategy
exists, when the number of players is large. We also discuss extensions of this result to more
general settings. In particular, we deal with the cases of arbitrary number of communication
lines, and arbitrary different speeds of communication. We show that a ratio of 4/3 can be
obtained when we allow arbitrary speeds in two communication lines connecting source to
target. We also consider the notion of a k-regular network, where k is the ratio between
the average communication speed and the lowest speed of communication (in a given set
of communication lines), and show that a k-competitive safety strategy exists for general
k-regular networks. Then, we discuss C-competitive strategies in the context of Bayesian
games. In particular we show the existence of an e-competitive safety strategy for a classical
first-price auctions setup.
Imagine an agent designed to deal with the communication of a user with different
targets. Selecting routes for messages in a multi-agent system is a non-trivial task. The
efficiency of the agent depends on the actions selected by other users (and their agents)
that try also to communicate with similar targets. In such cases, game-theoretic analysis
can identify the Nash equilibria that may emerge in that setting. However, adopting the
strategy prescribed by a Nash equilibrium may be quite dangerous for our agent. Other
agents may fail to choose strategies prescribed by that equilibrium, and as a result the
outcome of our agent can be quite poor. It would have been much better if the agent could
have guaranteed similar payoff (to the one obtained in a Nash equilibrium) without relying
on other agents’ behavior. In computational settings, where (machine and other) failures
364

Competitive Safety Analysis

are possible, and rationality assumptions about participants’ behavior should be minimized,
a safety-level strategy has a special appeal, especially when it yields a value that is close to
the expected payoff obtained in a Nash equilibrium.
Previous work has been concerned with comparing the payoffs that can be obtained
by an optimal centralized (and Pareto-efficient) controller to the expected payoffs obtained
in the Nash-equilibria of the corresponding game (Koutsoupias & Papadimitriou, 1999).3
That work is in the spirit of competitive analysis, a central topic in theoretical computer
science (Borodin & El-Yaniv, 1998). Our work can be considered as suggesting a complementary approach, comparing the safety-level value to the agent’s expected payoff in a Nash
equilibrium.
The rest of this paper is organized as follows. In Section 2 we provide some basic
definitions and notations. In sections 3 and 4 we deal with simple variants of the load
balancing and the leader election problems. We use these as examples for showing that
safety-level strategies can be quite competitive and attractive, leading to the value of a
Nash equilibrium. This is generalized in section 5 to the context of general 2 × 2 games. A
discussion of another extension dealing with set-theoretic games is discussed in section 6. In
section 7 we deal with several settings of decentralized load balancing, with increasing level
of complexity. In particular we show the existence of desired competitive safety strategies
for settings with many agents and many possible routes. Section 8 illustrates the use of
competitive safety analysis in games with incomplete information.

2. Basic Definitions and Notations
A game is a tuple G = hN = {1, . . . , n}, {Si }ni=1 , {Ui }ni=1 i, where N is a set of n players,
Si is a finite set of pure strategies available to player i, and Ui : Πni=1 Si → < is the payoff
function of player i. Given Si , we denote the set of probability distributions over the
elements of Si by ∆(Si ). An element t ∈ ∆(Si ) is called a mixed strategy of player i. It
is called a pure strategy if it assigns probability 1 to an element of Si , and it is called a
strictly mixed strategy if it assigns a positive probability to each element in Si . A tuple
t = (t1 , . . . , tn ) ∈ Πni=1 ∆(Si ) is called a strategy profile. We denote by Ui (t) the expected
payoff of player i given the strategy profile t. A strategy profile t = (t1 , . . . , tn ) is a Nash
equilibrium if ∀i ∈ N , Ui (t) ≥ Ui (t1 , t2 , . . . , ti−1 , t0i , ti+1 , . . . , tn ) for every t0i ∈ Si . The Nash
equilibrium t = (t1 , . . . , tn ) is called a pure strategy Nash equilibrium if ti is a pure strategy
for every i ∈ N . The Nash equilibrium t = (t1 , . . . , tn ) is called a strictly mixed strategy
Nash equilibrium if for every i ∈ N we have that ti is a strictly mixed strategy. Given a
game g and a mixed strategy of player i, t ∈ ∆(Si ), the safety level value obtained by i when
choosing t in the game g, denoted by val(t, i, g), is the minimal expected payoff that player
i may obtain when employing t against arbitrary strategy profiles of the other players. A
strategy t0 of player i for which val(., i, g) is maximal is called a safely-level strategy (or
a probabilistic maximin strategy) of player i. Hence, a safety-level strategy for agent i,
ssaf e ∈ ∆(Si ) satisfies that
ssaf e ∈ argmaxs∈∆(Si ) min(s1 ,s2 ,...,si−1 ,si+1 ,...,sn )∈Πj6=i Sj Ui (s1 , s2 , . . . , si−1 , s, si+1 , . . . , sn )
3. This work has been extended in e.g. (Roughgarden, 2001; Roughgarden & Tardos, 2002).

365

Tennenholtz

A strategy e ∈ Si dominates a strategy f ∈ Si if for every (s1 , s2 , . . . , si−1 , si+1 , . . . , sn ) ∈
Πj6=i ∆(Sj ) we have Ui (s1 , . . . , sj−1 , e, sj+1 , . . . , sn ) ≥
Ui (s1 , . . . , sj−1 , f, sj+1 , . . . , sn ), with a strict inequality for at least one such tuple. A
game is called non-reducible if there do not exist e, f ∈ Si , for some i ∈ N , such that
e dominates f . A game is called generic if for every i ∈ N , pair of strategies e, f ∈ Si ,
and (s1 , s2 , . . . , si−1 , si+1 , . . . , sn ) ∈ Πj6=i Sj , we have that Ui (s1 , . . . , si−1 , e, si+1 , . . . , sn ) =
Ui (s1 , . . . , si−1 , f, si+1 , . . . , sn ) only if e and f coincide. In a generic game different strategies of player i, assuming a fixed strategy profile for the rest of the players, should lead
to different payoffs. This property simply says that in a fixed environment (captured by
a strategy profile of the rest of the players), different strategies of player i should lead to
somewhat different payoffs (e.g. as a result of their costs, outcomes, etc.) A game is called
a 2 × 2 game if n = 2 and |S1 | = |S2 | = 2.

3. Decentralized Load Balancing
In this section we consider decentralized load balancing, where two rational players need to
submit messages in a simple communication network: a network of two parallel communication lines e1 , e2 connecting nodes s and t. Each player has a message that he needs to
deliver from s to t, and he needs to decide on the route to be taken. The communication line
e1 is a faster one, and therefore the value of transmitting a single message along e1 is X > 0
while the value of transmitting a single message along e2 is αX for some 0.5 < α < 1.4 Each
player needs to decide on the communication line to be used for sending its message from
s to t. If both players choose the same communication line then the value for each one of
them drops in a factor of two (a player will obtain X2 if both players choose e1 , and a player
will obtain αX
2 if both players choose e2 ). In a matrix form, this game can be presented as
follows:
Ã
!
X/2, X/2
X, αX
M=
αX, X
αX/2, αX/2
Proposition 1 The optimal safety-level value for a player in the decentralized load balancing game equals its expected payoff in the strictly mixed strategy equilibrium of that game.
Proof: Consider the following equations for the probability to choose e1 in a symmetric
equilibrium, where each player selects e1 with probability p and e2 with probability 1 − p.
This equation is derived from the fact that in a Nash equilibrium every strategy in the
support should lead to identical expected payoffs. Notice that by solving this equation we
will also prove the existence of a strictly mixed strategy Nash equilibrium.
p

X
X
+ (1 − p)X = pαX + (1 − p)α
2
2

Hence, p X2 + X − pX = pαX + α X2 − pα X2 , and X − α X2 = pα X2 + p X2 . This implies that
p=

2−α
1+α

4. Notice that here and later in the paper, X is a constant. The important factor is the ratio between the
payoffs.

366

Competitive Safety Analysis

Notice that 0 < p < 1 as required. The safety level mixed strategy satisfies the following
equation. This equation is derived from the fact that the expected payoff of a (mixed)
safety-level strategy should be identical for any strategy of the other player.
p

X
X
+ (1 − p)αX = pX + (1 − p)α
2
2

Hence, p X2 +αX −pαX = pX +α X2 −αp X2 . This implies that pX −αp X2 +pαX −p X2 =
) = αX
and therefore that p( X+αX
2
2 . We get:
p=

αX
2 ,

α
1+α

Notice that the above Nash equilibrium is different from the safety level strategy. However,
consider the expected payoff obtained by the Nash equilibrium and by the safety level
strategy: The Nash value is:
2−αX
2α − 1
+
X
1+α 2
1+α
The safety level value is:
1
α X
+
αX
1+α 2
1+α
We will show that these values coincide. It is enough to show that:
2α − 1
α
2−α
+
= 1.5
2(1 + α)
1+α
1+α
α
The above however trivially holds since both sides equal 1.5 1+α
2
Notice that the above proposition shows that an agent can guarantee itself an expected
payoff that equals its payoff in a Nash equilibrium of the decentralized load balancing
game. This is obtained using a strategy that differs from the agent’s strategies in the Nash
equilibria of that game (which do not provide that guarantee). Notice that if the players
could have used a mediator/correlation devise, and play the game repeatedly, then the
mediator could have directed them to the use of strategies leading to a payoff that is higher
than the one guaranteed by the safety-level strategy. The use of such mediator/correlation
devise, as well as the discussion of repeated games, is beyond the scope of this paper.

4. Leader Election: Decentralized Voting
In a leader election setting, the players vote about the identity of the player who will take
the lead on a particular task. A failure to obtain agreement about the leader is a bad
output, and can be modelled as leading to a 0 payoff. Assume that the players’ strategies
are either “vote for 1” or “vote for 2”, denoted by a1 , a2 respectively, then Ui (aj , ak ) > 0,
where i, j, k ∈ {1, 2}, and j = k. Notice that this setting captures various forms of leader
election, e.g. when a player prefers to be selected, when it prefers the other player to be
selected, etc. In a matrix form, this game can be presented as follows (where a, b, c, d > 0):
Ã

M=

a, b
0, 0
367

0, 0
c, d

!

Tennenholtz

Proposition 2 The optimal safety-level value for a player in the leader election game equals
its expected payoff in the strictly mixed strategy equilibrium of that game.
Proof: In a strictly mixed Nash equilibrium we have that the probability q of choosing a1
by player 2 should satisfy:
qU1 (a1 , a1 ) = (1 − q)U1 (a2 , a2 )
The above equality is implied by the fact that any pure strategy in the support of the
mixed strategy for an agent, in a Nash equilibrium, should yield the same expected payoff
(otherwise, deviation will be rational.) Hence, the above equality captures the fact that the
strategy of player 2 in equilibrium should be selected in a way that the utility for agent 1
when using either a1 or a2 will be the same.
Similarly, the probability p of choosing a1 by player 1 should satisfy
pU2 (a1 , a1 ) = (1 − p)U2 (a2 , a2 )
Hence, a strictly mixed strategy Nash equilibrium exists, where q =

U1 (a2 ,a2 )
U1 (a1 ,a1 )+U1 (a2 ,a2 )

and

U2 (a2 ,a2 )
U2 (a1 ,a1 )+U2 (a2 ,a2 )

As can be seen from the above equations a strictly mixed strategy
p=
equilibrium exists. Consider now w.l.o.g player 1. The expected payoff it obtains in the
)U1 (a2 ,a2 )
above equilibrium is qU1 (a1 , a1 ) = UU11(a(a11,a,a11)+U
Player 1’s safety level strategy satisfies
1 (a2 ,a2 )
0
the following, where p is the probability of choosing a1 :
p0 U1 (a1 , a1 ) = (1 − p0 )U1 (a2 , a2 )
Hence, p0 =

U1 (a2 ,a2 )
U1 (a1 ,a1 )+U1 (a2 ,a2 ) Notice
)U1 (a2 ,a2 )
.
p0 U1 (a1 , a1 ) = UU11(a(a11,a,a11)+U
1 (a2 ,a2 )

that p0 = q. The safety level value will be there-

We get that the Nash equilibrium and safety level
fore:
strategies are different, but their expected payoffs for the players coincide.
2
Notice that the above proposition shows that a agent can guarantee itself an expected
payoff that equals its payoff in a Nash equilibrium of the leader election game.5 As in the
decentralized load balancing game, this is obtained using a strategy that differs from the
agent’s strategies in the Nash equilibria of that game (which do not provide that guarantee).

5. Safety Level in General 2 × 2 Games
The results presented in the previous sections refer to 2-person 2-choice variants of central problems occurring in computational contexts. Given the encouraging results in the
framework of these basic settings, we wish to consider two types of extensions:
1. Generalize the results to a broader family of simple games.
2. Generalize the results to more general CS-related settings, dealing in particular with
games with many players, as found in load-balancing settings.
5. The reader should not confuse the fact that p0 = q with similarity between safety-level and Nash equilibrium. Indeed, p0 refers to the probability of choosing a1 by player 1, while q refers to the probability
of choosing that action by player 2.

368

Competitive Safety Analysis

In this section we deal with the first point. Later, and in particular in section 7, we will
deal with the second one. It is of interest to see whether our results in sections 3-4 can
be extended to other forms of 2 × 2 games. Notice that the load balancing and the leader
election settings can be represented as non-reducible generic 2 × 2 games. The same is true
with regard to the game presented by Aumann:
Ã

M=

2, 6
6, 0

4, 2
0, 4

!

Non-reducible generic games are an attractive concept. Having dominated strategies in the
game do not add to the understanding of the interaction, since these strategies can be safely
ignored. The fact a game is generic is also quite appealing: it is quite natural to assume that
a pair of actions should lead to different outcomes when we fix the rest of the environment.
We can show:
Theorem 1 Let G be a 2 × 2 non-reducible generic game. Assume that the optimal safety
level value of a player is obtained by a strictly mixed strategy, then this value coincides with
the expected payoff of that player in a Nash equilibrium of G.
Proof: Denote the strategies available to the players by a1 , a2 . Use the following notation: a = U1 (a1 , a1 ), b = U1 (a1 , a2 ), c = U1 (a2 , a1 ), d = U1 (a2 , a2 ), e = U2 (a1 , a1 ), f =
U2 (a1 , a2 ), g = U2 (a2 , a1 ), h = U2 (a2 , a2 )
In a matrix form, the above will be presented as:
Ã

M=

a, e
c, g

b, f
d, h

!

If a strictly mixed strategy Nash equilibrium exists then it should satisfy that:
qa + (1 − q)b = qc + (1 − q)d
and
pe + (1 − p)g = pf + (1 − p)h
where p and q are the probabilities for choosing a1 by players 1 and 2, respectively. We get
that we should have qa + b − qb = qc + d − qd, which implies that q(a − b − c + d) = d − b.
Similarly, we get that we should have pe + g − pg = pf + h − ph, which implies that
p(e − g − f + h) = h − g. Hence, in a strictly mixed strategy Nash equilibrium we should
have:
d−b
q=
a−b−c+d
and
h−g
p=
e−g−f +h
Notice that since the game is generic then d 6= b. If d > b then if q is not strictly in between
0 and 1 then c > a which will contradict non-reducibility. If d < b then in if q is not strictly
in between 0 and 1 then a > c, which also contradicts non-reducibility. Similarly, since the
game is generic then h 6= g. If h > g then if p is not strictly in between 0 and 1 then f > e
369

Tennenholtz

which will contradict non-reducibility. If h < g then in if p is not strictly in between 0 and
1 then e < f , which also contradicts non-reducibility. Given the above we get that p and q
define a strictly mixed strategy equilibrium of G. Consider now the safety level strategy of
player 1. If player 1 chooses a1 with probability p0 then it satisfies that:
p0 a + (1 − p0 )c = p0 b + (1 − p0 )d
This implies that we need to have p0 a+c−p0 c = p0 b+d−p0 d, which implies p0 (a−c−b+d) =
d − c. Hence, we have
d−c
p0 =
a−c−b+d
and
a−b
1 − p0 =
a−c−b+d
Compute now the expected payoff for player 1 in the strictly mixed Nash equilibrium, given
a−c
, we have that:
that 1 − q = a−b−c+d
qa + (1 − q)b =

da − cb
(d − b)a + (a − c)b
=
a−b−c+d
a−b−c+d

The expected payoff of the safety level strategy for player 1 will be:
p0 a + (1 − p0 )c =

(d − c)a + (a − b)c
da − cb
=
a−b−c+d
a−b−c+d

Hence, we get that the expected payoffs of the Nash equilibrium and the safety level strategies for player 1 coincide. The computation for player 2 is similar.
2
5.1 The Case of Pure Safety-Level Strategies
The reader may wonder whether the previous result can be also proved for the case where
there are no restrictions on the structure of the safety-level strategy of the game g. In several
AI contexts, the discussion is on pure maximin strategies, where probabilistic behavior is
not considered. Of course, probabilistic maximin strategies are more powerful, and in many
cases the best safety level is obtained only by a mixed strategy and not by a pure one.
However, it will be of interest to consider the case where the safety-level strategy is a pure
one. As we now show, there exists a generic non-reducible 2 × 2 game g, where the optimal
safety level strategy for a player is pure, and the expected payoff for that player is lower than
the expected payoff for that player in all Nash equilibria of g. Consider a game g, where
U1 (1, 1) = 100, U1 (1, 2) = 40, U1 (2, 1) = 60, U1 (2, 2) = 50, and U2 (1, 1) = 100, U2 (1, 2) =
210, U2 (2, 1) = 200, U2 (2, 2) = 90. In a matrix form this game looks as follows:
Ã

M=

100, 100
60, 200

40, 210
50, 90

!

It is easy to check that g is generic and non-reducible. In particular, there are no dominated
strategies, and the payoffs obtained by each player for different strategy profiles are different
from one another. The game has no pure Nash equilibria. In a strictly mixed strategy
370

Competitive Safety Analysis

equilibrium the probability q of choosing a1 by player 2 should satisfy 100q + 40(1 − q) =
60q+50(1−q), i.e. that 60q+40 = 10q+50, q = 0.2. In that equilibrium the probability that
player 1 will choose a1 is p = 0.5, and the expected payoff of player 1 is 100q+40(1−q) = 52.
The safety-level strategy for player 1 is to perform a2 , guaranteeing a payoff of 50, given
that (a2 , a2 ) is a saddle point in a zero-sum game where the payoffs of player 2 are taken to
be the complement to 0 of player 1’s original payoffs. Hence, the value of the safety level
strategy for player 1 is 50 < 52.
2

6. Beyond 2 × 2 Games
The leader election game is an instance of a more general set of games: set-theoretic games.
In a set theoretic game the sets of strategies available to the players are identical, and the
payoff of each player is uniquely determined by the set of strategies selected by each player.
For example, in a 2-person set-theoretic game we will have that U1 (s, t) = U1 (t, s), U2 (s, t) =
U2 (t, s) for every s, t ∈ S1 = S2 . Notice that set-theoretic games are very typical to voting
contexts. In a typical voting context we care about the votes, but not about the indentity
of the voters. We can prove the following:
Proposition 3 Given a 2-person set theoretic game g with a strictly mixed strategy Nash
equilibrium, then the value of an optimal safety level strategy of a player equals its expected
payoff in that equilibrium.
Proof: Let S = S1 = S2 = {s1 , s2 , . . . , sl }. Let t = (t1 , t2 ) be a strictly mixed strategy
Nash equilibrium. Denote the tuple of probabilities associated with ti by (pi1 , . . . , pil ) (i ∈
{1, 2}, |S1 | = |S2 | = l). In a strictly mixed Nash equilibrium we have that the expected
payoff of player 1 is:
Σlj=1 p2j U1 (se , sj ) (∗)
for every 1 ≤ e ≤ l. Consider now a strategy f of player 1 that assigns probability p2j to
strategy sj . Then, for every strategy se selected by player 2, the expected payoff of f is
given by
Σlj=1 p2j U1 (sj , se ) = Σlj=1 p2j U1 (se , sj ) = (∗)
This implies that the safety level strategy for player 1 yields an expected payoff that is
identical to the expected payoff for player 1 in the above equilibrium. Similar reasoning can
be applied for player 2.
2

7. Competitive Safety Strategies
Let S be a set of strategies. Consider a family of games (g1 , g2 , . . . , gj , . . .) where i is a
player at each of them, its set of strategies at each of these games is S, and there are j
players, in addition to i, in gj . As an example, consider a family of decentralized load
balancing settings. The (n − 1)-th game in this extended load-balancing setting will consist
of n players, one of them is i. The players submit their messages along e1 and e2 . The
payoff for player i when participating in an n-person decentralized load balancing game is
X
αX
k (resp. k ) if he has chosen e1 (resp. e2 ) and additional k − 1 participants have chosen
371

Tennenholtz

that communication line. A mixed strategy t ∈ ∆(S) will be called a C-competitive safety
strategy if there exists some constant C > 0, such that
nash(i, gj )
≤C
j→∞ val(t, i, gj )
lim

where nash(i, gj ) is the lowest expected payoff player i might obtain in some equilibrium
of gj , and val(t, i, gj ) is the expected payoff guaranteed for i by choosing t in the game gj .
The extended decentralized load balancing setting 6 is a typical and basic network problem.
If C is small, a C-competitive safety strategy for that context will provide a useful protocol
of behavior. We can show:
Theorem 2 There exists a 9/8-competitive safety strategy for the extended decentralized
load-balancing setting.
Proof: Consider the following strategy profile for the players in an n-person decentralized
1
load balancing game: players {1, 2, . . . , d 1+α
ne} will choose e1 , and the rest will choose
e2 . W.l.o.g we assume that i = 1 is the player for which we will make the computation of
expected payoffs. It is easy to verify that the above strategy profile is an equilibrium of the
game, with an expected payoff for player i that is bounded above by
X(1 + α)
(∗∗)
n
Intuitively, this equilibrium is obtained by partitioning the players in a way where the payoff
for using the communication lines are (almost) equal. Consider now the following strategy
α
1
t for player i: select e1 with probability 1+α
and select e2 with probability 1+α
. Notice
that t (if adopted by all participants) is not a Nash equilibrium. However, we will show
that it is a competitive safety strategy for small C > 0 . Consider an arbitrary number of
participants n, where β(n − 1) of the other (i.e. excluding player i) n − 1 participants use
e2 while the rest use e1 , for some arbitrary 0 ≤ β ≤ 1. The expected payoff obtained using
t will be:
1
αX
α
X
+
1 + α β(n − 1) + 1 1 + α (1 − β)(n − 1) + 1
This value is greater or equal to:
1
αX
α
X
+
1 + α βn + 1 1 + α (1 − β)n + 1
The above equals

·

1
1
Xα
+
1 + α βn + 1 (1 − β)n + 1

¸

Simplifying the above we get:
Xα
n+2
(∗ ∗ ∗)
1 + α (1 + βn)(n − βn + 1)
6. Here and later the term extended load-balancing setting refers to a family of games as above.

372

Competitive Safety Analysis

Dividing (**) by (***) we get that the ratio is:
(1 + α)2 (β − β 2 )n2 + n + 1
α
n(n + 2)
When n approaches infinity the above ratio approaches
(1 + α)2
(β − β 2 )
α
Given that 0.5 ≤ α < 1 and 0 ≤ β ≤ 1 we get that the above ratio is bounded by 9/8 as
desired.
2
7.1 Extensions: Arbitrary Speeds and m Links
In this section we generalize the result obtained in the context of decentralized load balancing to the case where we have m parallel communication lines leading from source to target.
The value obtained by the agent (w.l.o.g. agent 1) when submitting its message along line
i
i, where ni agents have decided to submit their messages through that line is given by X·α
ni ,
where 1 = α1 ≥ α2 ≥ · · · ≥ αm > 0. Our extension enables us to handle the general binary
case where 0 < α < 1, as well as to discuss cases where a safety level strategy can be very
effective in the general m-lines situation. Using the ideas developed for the case m = 2, we
can now show:
Σm α Σm Π

α

j6=i j
Theorem 3 There exists a i=1mi2 Πi=1
–competitive safety strategy for the extended
m α
i=1 j
decentralized load-balancing setting, when we allow m (rather than only 2) parallel communication lines, and arbitrary αi ’s.

Proof: Following the ideas of the previous theorem, there exists an equilibrium where agent
1 obtains at most (X/n)Σm
i=1 αi . Intuitively, in this equilibrium the players are distributed
in a way where the payoff for using the different communication lines are (almost) identical.
In particular, agents {1, 2, . . . , d Σmα1 αi ne}, where α1 = 1 will be assigned to communication
i=1
line 1, and hence agent 1’s payoff will be as prescribed.
Consider the following strategy for each of the agents: choose communication line i with
probability
Πj6=i αj
m
Σi=1 Πj6=i αj
Given the above, the expected payoff of agent i can be minimized (using similar ideas
to the ones in the proof of Theorem 2), by splitting the other agents equally among the
communication lines. Hence, the expected payoff of the agent is at least:
Σm
i=1

αi XΠj6=i αj
m2 X Πm
j=1 αj
=
n
m
m
(1 + m )Σi=1 Πj6=i αj
m + n Σi=1 Πj6=i αj

Hence, the ratio between the expected payoff in the Nash equilibrium and the expected
payoff that can be guaranteed is bounded by:
Σm
m+n m
i=1 Πj6=i αj
(Σ
α
)
i=1 i
2
m n
Πm
j=1 αj
373

Tennenholtz

The above implies, when n is large the existence of an

m
Σm
i=1 αi Σi=1 Πj6=i αj
–competitive
m2 Πm
j=1 αj

strategy.
2
In the general binary case, where α1 = 1, and α2 = α, where 0 < α ≤ 1, the above
implies the existence of an
(1 + α)2
4α
competitive strategy.
Corollary 1 Given an extended load balancing setting, where m = 2, with arbitrary speeds
of the communication lines (0 < α ≤ 1), there exists a 43 -competitive strategy.
2

2

Proof: To see the above notice that 1 + α < (1+α)
if and only if α < 1/3 and that (1+α)
4α
4α
is decreasing in the interval (0, 1]. Hence, by considering a strategy prescribed by the above
theorem when α ≥ 1/3 and selecting e1 otherwise, we are guaranteed a ratio of at most
1 + 1/3 = 4/3.
2
Consider now the general m-links (i.e. m parallel communication lines) case. The
Σ m αi
average network quality (or speed), Q, can be defined as i=1
m . A network will be called
Q
k-regular if αm ≤ k. Many networks are k-regular for small k. For example, if αm ≥ 0.5 as
before, then the network is 2-regular regardless of the number of edges.
Corollary 2 Given a k-regular network, there exists a k-competitive safety strategy for the
extended decentralized load-balancing setting, when we allow m (rather than only 2) parallel
edges.
Proof: To show the above, observe that
m
Σm
Q Σm
i=1 αi Σi=1 Πj6=i αj
i=1 Πj6=i αj
=
m2 Πm
α
m
Πm
j=1 j
j=1 αj

The latter is smaller or equal to
Q m
=k
m αm
as desired.
2
Together, Theorem 3 and corollaries 1 and 2 extend the results on decentralized load
balancing to the general case of m parallel communication lines.

8. Competitive Safety Analysis in Bayesian Games
The results presented in the previous sections refer to games with complete information.
The games we have studied in this context refer to fundamental settings in the AI and game
theory intersection, and deal with issues such as congestion. In this section, we show that
our ideas can be applied to games with incomplete information as well.
In a game with incomplete information the payoff for a player given the behavior of the
set of players is private information of that player. In order to illustrate competitive safety
analysis in games with incomplete information, we have chosen to consider a very basic
mechanism, the first-price auction. The selection of first-price auction is not an accident.
374

Competitive Safety Analysis

Auctions are fundamental to the theory of economic mechanism design7 , and among the
auctions that do not possess a dominant strategy, assuming the independent private value
model, first-price auctions are probably the most common ones.
We consider a setting where a good g is put for sale, and there are n potential buyers.
Each such buyer has a valuation (i.e. maximal willingness to pay) for g that is drawn from
a uniform distribution on the interval of real numbers [0, 1]. This valuation is the private
information that the agent has. The exact valuation is known only to the agent, while the
distribution on agent valuations are commonly known. The valuations are assumed to be
independent from one another. In a first price auction, each potential buyer is asked to
submit a bid for the good g. We assume that the bids of a buyer with valuation v is a
number in the interval [0, v].8 The good will be allocated to the bidder who submitted the
highest bid (with a lottery to determine the winner in a case of a tie). The auction setup can
be defined using a Bayesian game.9 In this game the players are the potential bidders, and
the payoff of a player with valuation v is v−p if he wins the good and pays p, and 0 if he does
not get the good. As the reader can see, the distinguished feature of such games is that the
player’s utility function depends on the agent’s private valuation, and therefore it is known
only to it. The equilibrium concept can be also extended to the context of Bayesian games.
In the auction setup an agent’s strategy is a function from its valuations to monetary bids.
A strategy profile will be in equilibrium if an agent’s strategy is the best response against
the other agents’ strategies given the distribution on these agents’ valuations. In particular,
in equilibrium of the above game the bid of a player with valuation v is (1 − n1 )v.
n
Given the above, the expected payoff of an agent with valuation v, will be vn . As before,
the question is whether we can guarantee a payoff that is proportional to the expected payoff
in equilibrium.
Before discussing an appropriate strategy, we should emphasize a formal issue with
regard to competitive safety strategies in Bayesian games. Notice that in our definition
of competitive safety strategies, we assume that the player’s competitive action should be
independent of the number of players. On the other hand, as suggested by the equilibrium
analysis above, behavior in first-price auction may heavily depend on the number of players.
In order to address this issue, we make use of the revelation principle, discussed in the
economic mechanism design literature. The revelation principle tells us that one can replace
the above-mentioned first-price auction with the following auction: each bidder will be asked
to reveal his valuation, and the good will be sold to the bidder who reported the highest
valuation; if agent i who reported valuation v 0 will turn out to be the winner then he will
be asked to pay (1 − n1 )v 0 . In this mechanism a player will submit bids in between 0 and
n
n−1 v. It turns out that reporting the true valuation is an equilibrium of that auction, and
that it will yield (in equilibrium) the same allocation, payments, and expected utility to
the participants, as the original auction. It is convenient to consider the above revelation
mechanism, since when facing any number of participants, a bidder’s strategy in equilibrium
will always be the same.
7. For a general discussion of mechanism design see (Mas-Colell, Whinston, & Green, 1995), Chapter 23,
and (Fudenberg & Tirole, 1991), Chapter 7).
8. In general, buyers may submit bids that are higher than their valuations, but these strategies are dominated by other strategies, and their existence will not effect the equilibrium discussed in this paper.
9. A formal definition and exposition of Bayesian games can be found in (Fudenberg & Tirole, 1991).

375

Tennenholtz

Given the above, a first-price auction setup will be identified with a family of (Bayesian)
games (g1 , g2 , . . .) where gj is the Bayesian game associated with (the revelation mechanism
of) first-price auction with j +1 potential buyers. The definition of C-competitive strategies
can now be applied to the above context as well.
Theorem 4 There exists an e-competitive strategy for the first-price auction setup.
Proof: When player 1 with valuation v submits the bid b in an auction with additional
n − 1 players, its worst case payoff is
Z

n−1
b
n

v2 =0

Z

dv2

n−1
b
n

v3 =0

dv2 · · ·

Z

n−1
b
n

vn =0

(v −

n−1
b)dvn
n

The above says that in order to win, player i’s bid should be higher than the other players’
n
bids. Each player’s bid in the revelation mechanism is however at most n−1
times its
n−1
valuation, and therefore we should integrate over valuations that are at most n times
player i’s bid. If agent i will be the winner then he will gain v − n−1
n b when he bids b and
his valuation is v (given the rules of the revelation mechanism). The above is maximized
when
d
n − 1 n − 1 n−1
(v −
b)(
b)
=0
db
n
n
n−1 , i.e. when b = v.
Hence, the expected value is maximized when (n − 1)vbn−2 = n−1
n nb
We therefore get that the safety-level strategy coincides in this case with the equilibrium
strategy. The expected payoff in equilibrium can be shown to be v n /n. The expected payoff
guaranteed by the above strategy will be

(

n − 1 n−1 1
v)
v
n
n

The ratio between the safety level value and the equilibrium value is therefore bounded
n
1
above by ( n−1
n ) , which is greater or equal to e , and approaches it when the number of
players approaches infinity.
2
An interesting observation is that in the above theorem, the safety-level strategy is
identical to the equilibrium strategy. This connection occurs although the game is not a
0-sum game. It is interesting to observe that since we consider revelation mechanisms then
the safety-level strategy turns out to be independent of the number of participants. Our
result can also be obtained if we consider standard first-price auctions, rather than the
revelation mechanisms associated with them; nevertheless, this will require us to allow a
player to choose its action knowing the number of potential bidders (as in the corresponding
equilibrium analysis).

9. Discussion
Some previous work in AI has attempted to show the potential power of decision-theoretic
approaches that do not rely on classical game-theoretic analysis. In particular, work in theoretical computer science on competitive analysis has been extended to deal with rationality
constraints (Tennenholtz, 2001), in order to become applicable to multi-agent systems. We
376

Competitive Safety Analysis

introduced competitive safety analysis, bridging the gap between the normative AI/CS approach and classical equilibrium analysis. We have shown that the observation, due to
Aumann, that safety-level strategies may yield the value of a Nash equilibrium in games
that are not zero-sum, provides a powerful normative tool for computer scientists and AI
researchers interested in protocols for non-cooperative environments. We have illustrated
the use and power of competitive safety analysis in various contexts. We have shown general
results about 2 × 2 games, as well as about games with many participants, and introduced
the use of competitive safety analysis in the context of decentralized load balancing, leader
election, and auctions. Notice that our work is concerned with a normative approach to
decision making in multi-agent systems. We make no claims as for the applicability of this
approach for descriptive purposes, i.e. for the prediction of how people will behave in the
corresponding situations. Although there exists much literature on the failure of Nash equilibrium, it is still the most powerful concept for action prediction in multi-agent systems.
The setting of decentralized load balancing discussed as part of this paper is central to game
theory and its applications.10 Given the importance of this setting from a CS perspective,
providing robust agent protocols for that setting is a major challenge to work in multiagent systems. In order however to build robust protocols, relying on standard equilibrium
analysis might not be satisfactory, and safety guarantees are required. Our work suggests
protocols and analysis for providing such guarantees, bridging the gap between classical
AI/decision-theoretic reasoning and equilibrium analysis in game theory.

Acknowledgements
This work has been carried out when the author was on a sabbatical leave with the computer
science department at Stanford university. A preliminary version of this paper appears in
the proceedings of AAAI-2002.

References
Aumann, R. (1985). On the non-transferable utility value: A comment on the Roth-Shaper
examples. Econometrica, 53 (3), 667–677.
Borodin, A., & El-Yaniv, R. (1998). On-Line Computation and Competitive Analysis. Cambridge
University Press.
Fudenberg, D., & Tirole, J. (1991). Game Theory. MIT Press.
Koutsoupias, E., & Papadimitriou, C. (1999). Worst-Case Equilibria. In STACS.
Kraus, S. (1997). Negotiation and cooperation in multi-agent environments. Artificial Intelligence,
94, 79–97.
Mas-Colell, A., Whinston, M., & Green, J. (1995). Microeconomic Theory. Oxford University Press.
Monderer, D., & L.S.Shapley (1996). Potential games. Games and Economic Behavior, 14, 124–143.
Nisan, N., & Ronen, A. (1999). Algorithmic mechanism design. Proceedings of STOC-99.
10. See the literature on potential and congestion games, e.g. (Monderer & L.S.Shapley, 1996; Rosenthal,
1973).

377

Tennenholtz

Rosenschein, J. S., & Zlotkin, G. (1994). Rules of Encounter. MIT Press.
Rosenthal, R. (1973). A class of games possessing pure-strategy nash equilibria. International
Journal of Game Theory, 2, 65–67.
Roth, A. E. (1980). Values for games without side payments: Some difficulties with current concepts.
Econometrica, 48 (2), 457–465.
Roughgarden, T. (2001). The price of anarchy is independent of the network topology. In Proceedings
of the 34th Annual ACM Symposium on the Theory of Computing, pp. 428–437.
Roughgarden, T., & Tardos, E. (2002). How bad in selfish routing?. Journal of the ACM, 49 (2),
236–259.
Russell, S., & Norvig, P. (1995). Artificial Intelligence: A Modern Approach. Prentice Hall.
Sandholm, T. W., & Lesser, V. (1995). Equilibrium Analysis of the Possibilities of Unenforced
Exchange in Multiagent Syustems. In Proc. 14th International Joint Conference on Artificial
Intelligence, pp. 694–701.
Tennenholtz, M. (2001). Rational Competitive Analysis. In Proc. of the 17th International Joint
Conference on Artificial Intelligence, pp. 1067–1072.

378

Journal of Artificial Intelligence Research 17 (2002) 265–287

Submitted 10/01; published 9/02

When do Numbers Really Matter?
Hei Chan
Adnan Darwiche

hei@cs.ucla.edu
darwiche@cs.ucla.edu

Computer Science Department
University of California, Los Angeles
Los Angeles, CA 90095, USA

Abstract
Common wisdom has it that small distinctions in the probabilities (parameters) quantifying a belief network do not matter much for the results of probabilistic queries. Yet,
one can develop realistic scenarios under which small variations in network parameters can
lead to significant changes in computed queries. A pending theoretical question is then to
analytically characterize parameter changes that do or do not matter. In this paper, we
study the sensitivity of probabilistic queries to changes in network parameters and prove
some tight bounds on the impact that such parameters can have on queries. Our analytic
results pinpoint some interesting situations under which parameter changes do or do not
matter. These results are important for knowledge engineers as they help them identify
influential network parameters. They also help explain some of the previous experimental
results and observations with regards to network robustness against parameter changes.

1. Introduction
A belief network is a compact representation of a probability distribution (Pearl, 1988;
Jensen, 2001). It consists of two parts, one qualitative and the other quantitative. The
qualitative part of a belief network (called its structure) is a directed acyclic graph in
which nodes represent domain variables and edges represent direct influences between these
variables. The quantitative part of a belief network is a set of conditional probability tables
(CPTs) that quantify our beliefs in such influences. Figure 1 depicts the structure of a
belief network and Figure 2 depicts its CPTs.1
Automated reasoning systems based on belief networks have become quite popular recently as they have enjoyed much success in a number of real-world applications. Central to
the development of such systems is the construction of a belief network (hence, a probability distribution) that faithfully represents the domain of interest. Although the automatic
synthesis of belief networks—based on design information in certain applications and based
on learning techniques in others—has been drawing a lot of attention recently, mainstream
methods for constructing such networks continue to be based on traditional knowledge engineering (KE) sessions involving domain experts. One of the central issues that arise in
such KE sessions is the assessment of impact that changes in network parameters may have
on probabilistic queries of interest.
Consider for example the following common method for constructing belief networks in
medical diagnosis applications (Coupé, Peek, Ottenkamp, & Habbema, 1999). First, the
1. This specific network and its CPTs are distributed with the evaluation version of the commercial HUGIN
system at http://www.hugin.com/.
c
°2002
AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Chan & Darwiche

Fire

Smoke

Tampering

Alarm

Leaving

Report

Figure 1: A belief network structure.

Fire
true
false

θx|u
.01
.99

Fire
true
true
false
false

Smoke
true
false
true
false

θx|u
.9
.1
.01
.99

Alarm
true
true
false
false

Leaving
true
false
true
false

θx|u
.88
.12
.001
.999

Fire
true
true
true
true
false
false
false
false

Tampering
true
false

θx|u
.02
.98

Tampering
true
true
false
false
true
true
false
false

Alarm
true
false
true
false
true
false
true
false

θx|u
.5
.5
.99
.01
.85
.15
.0001
.9999

Leaving
true
true
false
false

Report
true
false
true
false

θx|u
.75
.25
.01
.99

Figure 2: The CPTs of the belief network shown in Figure 1.

network structure is developed. Next, parameters are estimated by non-experts using a
combination of statistical data and qualitative influences available from textbook materials.
Finally, medical experts are brought in to evaluate the network and fine-tune its parameters.
One method of evaluation is to pose diagnostic scenarios to the network, and compare the
results of such queries to those expected by the experts. For example, given some set of
symptoms e, and two potential diagnoses y and z, the network may give us the conclusion
that Pr (y | e)/Pr (z | e) = 2, while a domain expert may believe that the ratio should
be no less than 4. Assuming that the network structure is correct, a central question is
then: which network parameters should be changed to give us the correct ratio, and by how
much?
To automate the task of identifying such parameter changes, we have recently developed a belief network tool, called SamIam (Sensitivity Analysis, Modelling, Inference And
266

When do Numbers Really Matter?

Figure 3: A screen shot of SamIam performing sensitivity analysis on the belief network
shown in Figure 1.

More)2 . One of its feature is sensitivity analysis, which allows domain experts to fine-tune
network parameters in order to enforce constraints on the results of certain queries. Users
can specify the constraint that they want to enforce, and SamIam will automatically decide whether a given parameter is relevant to this constraint, and if it is, will compute the
minimum amount of change to that parameter which is needed to enforce the constraint.
The technical details of our approach to sensitivity analysis are the subject of Section 2.
As we experimented with SamIam, we ran into scenarios that we found to be surprising
at first glance. Specifically, there were many occasions in which queries would be quite
sensitive to small variations in certain network parameters. Consider the scenario in Figure 3
for one example, which corresponds to the network detailed in Figures 1 and 2. Here, we
have evidence e = report, smoke: people are reported to be evacuating a building, but there
is no evidence for any smoke. This evidence should make tampering more likely than fire,
and the given belief network does indeed reflect this with Pr (tampering | e) = .50 and
Pr (fire | e) = .03. We wanted, however, the probability of tampering to be no less than .65.
Hence, we asked SamIam to identify parameter changes that can enforce this constraint,
and it made two recommendations:
1. either decrease the probability of a false report, Pr (report | leaving), from its current
value of .01 to ≤ .0047,
2. SamIam is developed by the UCLA Automated Reasoning Group.
http://reasoning.cs.ucla.edu/.

267

Its web page is at

Chan & Darwiche

2. or increase the prior probability of tampering from its current value of .02 to ≥ .036.
Therefore, the distinctions between .02 and .036, and the one between .01 and .0047, do
really matter in this case as each induces an absolute change of .15 on the probabilistic query
of interest. Note also that implicit in SamIam’s recommendations is that the parameters
of variables Fire, Smoke, Leaving, and Alarm are irrelevant to enforcing this constraint, i.e.
no matter how much we change any of these parameters, we would not be able to enforce
our desired constraint.
This example shows that the absolute change in a query can be much larger than the
absolute change in the corresponding parameters. Later, we will show an example where
an infinitesimal change to a network parameter leads to a change of .5 to a corresponding
query. We also show examples in which the relative change in the probability of a query is
larger than the corresponding relative change in a network parameter. One wonders then
whether there is a different method for measuring probabilistic change (other than absolute
or relative), which allows one to non-trivially bound the change in a probabilistic query in
terms of the corresponding change in a network parameter.
To answer this and related questions, we conduct in Section 3 an analytic study of the
partial derivative of a probabilistic query Pr (y | e) with respect to some network parameter
θx|u . Our study leads us to three main results:
1. a bound on the derivative in terms of Pr (y | e) and Pr (x | u) only, which is independent of any other aspect of the given belief network;
2. a bound on the sensitivity of queries to infinitesimal changes in network parameters;
3. a bound on the sensitivity of queries to arbitrary changes in network parameters.
The last bound in particular shows that the amount of change in a probabilistic query can
be bounded in terms of the amount of change in a network parameter, as long as change is
understood to be the relative change in odds. This result has a number of practical implications. First, it can relieve experts from having to be too precise when specifying certain
parameters subjectively. Next, it can be important for approximate inference algorithms
that pre-process network parameters to eliminate small distinctions in such parameters, in
order to increase the efficiency of inference (Poole, 1998). Finally, it can be used to show
that automated reasoning systems based on belief networks are robust and, hence, suitable
for real-world applications (Pradhan, Henrion, Provan, Del Favero, & Huang, 1996).
Section 4 is indeed dedicated to exploring the implications of the above bounds, where
we provide an analytic explanation of why certain parameter changes don’t matter. We
finally close in Section 5 with some concluding remarks. Proofs of all theorems are given in
Appendix A.

2. The Tuning of Network Parameters
We report in this section on a tool that we have been developing, called SamIam, for finetuning network parameters (Laskey, 1995; Castillo, Gutiérrez, & Hadi, 1997; Jensen, 1999;
Kjærulff & van der Gaag, 2000; Darwiche, 2000). Given a belief network, some evidence
e, which is an instantiation of variables E in the belief network, and two events y and z of
variables Y and Z respectively, where Y, Z 6∈ E, our tool can efficiently identify parameter
changes needed to enforce the following types of constraints:
268

When do Numbers Really Matter?

Difference: Pr (y | e) − Pr (z | e) ≥ ²;
Ratio: Pr (y | e)/Pr (z | e) ≥ ².
These two constraints often arise when we debug belief networks. For example, we can
make event y more likely than event z, given evidence e, by specifying the constraint,
Pr (y | e) − Pr (z | e) ≥ 0, or we can make event y at least twice as likely as event z, given
evidence e, by specifying the constraint, Pr (y | e)/Pr (z | e) ≥ 2. We will discuss next how
one would enforce the two constraints, but we need to settle some notational conventions
and technical preliminaries first.
Variables are denoted by upper-case letters (A) and their values by lower-case letters (a).
Sets of variables are denoted by bold-face upper-case letters (A) and their instantiations
are denoted by bold-face lower-case letters (a). For a variable A with values true and false,
we use a to denote A = true and a to denote A = false. The CPT for variable X with
parents U defines a set of conditional probabilities of the form Pr (x | u), where x is a value
of variable X, u is an instantiation of parents U, and Pr (x | u) is a probability known as a
network parameter and denoted by θx|u . We finally recall a basic fact about belief networks.
The probability of some instantiation x of all network variables X equals the product
of all network parameters that are consistent with that instantiation. For example, the
probability of instantiation fire, tampering, smoke, alarm, leaving, report in Figure 1 equals
.01 × .98 × .9 × .99 × .12 × .01, which is the product of network parameters (from Figure 2)
that are consistent with this instantiation.
2.1 Binary Variables
We first consider the parameters of a binary variable X, with two values x and x and,
hence, two parameters θx|u and θx|u for each parent instantiation u. We assume that for
each variable X and parent instantiation u we have a meta parameter τx|u , such that
θx|u = τx|u and θx|u = 1 − τx|u . Therefore, our goal is then to determine the amount of
change to the meta parameter τx|u which would lead to a simultaneous change in both θx|u
and θx|u . We use the meta parameter τx|u because it is not meaningful to change only θx|u
or θx|u without changing the other since θx|u + θx|u = 1.
First we observe that the probability of an instantiation e, Pr (e), is a linear function
in any network parameter θx|u in a belief network (Russell, Binder, Koller, & Kanazawa,
1995; Castillo et al., 1997). In fact, the probability is linear in any meta parameter τx|u .
Theorem 2.1 The derivative of Pr (e) with respect to the meta parameter τx|u is given by:
∂Pr (e)
Pr (e, x, u) Pr (e, x, u)
=
−
,
∂τx|u
θx|u
θx|u

(1)

when θx|u 6= 0 and θx|u 6= 0.3 We will designate the derivative as constant αe .
In Theorem 2.1, αe = Pr (e, x, u)/θx|u − Pr (e, x, u)/θx|u is a constant in terms of both
θx|u and θx|u (and consequently, τx|u ) since Pr (e, x, u) = Kx θx|u and Pr (e, x, u) = Kx θx|u ,
3. If either of the previous parameters is zero, we can use the differential approach by Darwiche (2000) to
compute the derivative directly.

269

Chan & Darwiche

where Kx = Pr (u)Pr (e | x, u) and Kx = Pr (u)Pr (e | x, u) are constants in terms of both
θx|u and θx|u . By substituting y, e and z, e for e in Theorem 2.1, we get:
αy,e =

∂Pr (y, e)
∂τx|u

=

Pr (y, e, x, u) Pr (y, e, x, u)
−
;
θx|u
θx|u

(2)

αz,e =

∂Pr (z, e)
∂τx|u

=

Pr (z, e, x, u) Pr (z, e, x, u)
−
.
θx|u
θx|u

(3)

Now, if we want to enforce the Difference constraint, Pr (y | e) − Pr (z | e) ≥ ², it
suffices to ensure that Pr (y, e) − Pr (z, e) ≥ ²Pr (e). Suppose that the previous constraint
does not hold, and we wish to establish it by applying a change of δ to the meta parameter
τx|u . Such a change leads to a change of αe δ in Pr (e). It also changes Pr (y, e) and Pr (z, e)
by αy,e δ and αz,e δ, respectively. Hence, to enforce the Difference constraint, we need to
solve for δ in the following inequality:
[Pr (y, e) + αy,e δ] − [Pr (z, e) + αz,e δ] ≥ ²[Pr (e) + αe δ].
Rearranging the terms, we get the following result.
Corollary 2.1 To satisfy the Difference constraint, we need to change the meta parameter τx|u by δ, such that:
Pr (y, e) − Pr (z, e) − ²Pr (e) ≥ δ[−αy,e + αz,e + ²αe ],
where the α constants are defined by Equations 1, 2 and 3.
We can similarly solve for parameter changes δ that enforce the Ratio constraint,
Pr (y | e)/Pr (z | e) ≥ ², in the following inequality:
[Pr (y, e) + αy,e δ]/[Pr (z, e) + αz,e δ] ≥ ².
Rearranging the terms, we get the following result.
Corollary 2.2 To satisfy the Ratio constraint, we need to change the meta parameter τx|u
by δ, such that:
Pr (y, e) − ²Pr (z, e) ≥ δ[−αy,e + ²αz,e ],
where the α constants are defined by Equations 2 and 3.
For both the Difference and Ratio constraints, the solution of δ, if any, is always in
one of two forms:
• δ ≤ q, for some computed q < 0, in which case the new value of meta parameter τx|u
must be in the interval [0, p + q].
• δ ≥ q, for some computed q > 0, in which case the new value of meta parameter τx|u
must be in the interval [p + q, 1].
270

When do Numbers Really Matter?

Note that p is the current value of meta parameter τx|u (before the change). For many
parameters, these intervals are empty and, therefore, there is no way we can change these
meta parameters to enforce the constraint.
The question now is how to solve these inequalities, efficiently, and for all meta parameters. Note that there may be more than one possible parameter change that would enforce
the given constraint, so we need to identify all such changes. With either Corollary 2.1
or 2.2, we can easily solve for the amount of change needed, δ, once we know the following
probabilities: Pr (e), Pr (y, e), Pr (z, e), Pr (e, x, u), Pr (e, x, u), Pr (y, e, x, u), Pr (y, e, x, u),
Pr (z, e, x, u), and Pr (z, e, x, u). This leads to the following complexity of our technique.
Corollary 2.3 If we have an algorithm that can compute Pr (i, x, u), for a given instantiation i, and all family instantiations x, u of every variable X, in time O(f ), then we can
solve for Corollaries 2.1 and 2.2 for all parameters in time O(f ). We do this by running
the algorithm three times, once with i = e, and then with i = y, e, and finally with i = z, e.
Recall that the family of a variable X is the set containing X, and its parents U in the
belief network.
The join-tree algorithm (Jensen, Lauritzen, & Olesen, 1990) and the differential approach (Darwiche, 2000) can both compute Pr (i, x, u), for a given instantiation i and all
family instantiations x, u of every variable X in O(n exp w) time. Here, n is the number of
variables in the belief network, and w is the width of a given elimination order. SamIam
uses the differential approach, and thus its running time to identify all possible parameter
changes in a network is also O(n exp w). Note that this is also the time needed to answer
one of the simplest queries, that of computing the probability of evidence e.
2.2 Multi-Valued Variables
Our results can be easily extended to multi-valued variables, as long as we assume a model
for changing co-varying parameters when one of them changes (Darwiche, 2000; Kjærulff &
van der Gaag, 2000). After the parameter θx|u changes, we need to use a scheme to change
the other parameters, θxi |u for all xi 6= x, in order to ensure the sum-to-one constraint.
The most common way to do this is to use the proportional scheme. In this scheme,
we change the other parameters so that the ratios between them remain the same. For
example, suppose we have three parameters θx1 |u = .6, θx2 |u = .3 and θx3 |u = .1. After
θx1 |u changes to .8, the other two parameter values will be changed to θx2 |u = .3(.2/.4) = .15
and θx3 |u = .1(.2/.4) = .05 accordingly. We now define the meta parameter τx|u such that it
simultaneously changes all parameters according to the proportional scheme. We can then
obtain a linear relation between Pr (e) and τx|u , and the partial derivative is given by:
∂Pr (e)
Pr (e, x, u)
=
−
τx|u
θx|u

P

xi 6=x Pr (e, xi , u)

P

xi 6=x θxi |u

.

This is very similar to the result in Theorem 2.1, in the way that we have grouped all the
values xi 6= x into the value x. We can then use Corollaries 2.1 and 2.2 to solve for the
Difference and Ratio constraints.
We now present another example to illustrate how the results above are used in practice.

271

Chan & Darwiche

Example 2.1 Consider again the network in Figure 3. Here, we set the evidence such that
we have smoke, but no report of people evacuating the building, i.e. e = smoke, report. We
then got the posteriors Pr (fire | e) = .25 and Pr (tampering | e) = .02. We thought in this
case that the posterior on fire should be no less than .5 and asked SamIam to recommend
the necessary changes to enforce the constraint, Pr(fire | e) − Pr (fire | e) ≥ 0. There were
five recommendations in this case, three of which could be ruled out based on qualitative
considerations:
1. increase the prior on fire to ≥ .03 (from .01);
2. increase the prior on tampering to ≥ .80 (from .02);
3. decrease Pr (smoke | fire) to ≤ .003 (from .01);
4. increase Pr (leaving | alarm) to ≥ .923 (from .001);
5. increase Pr (report | leaving) to ≥ .776 (from .01).
Clearly, the only sensible change here is either to increase the prior on fire, or to decrease
the probability of having smoke without a fire.
This example and other similar ones suggest that identifying such parameter changes
and their magnitudes is inevitable for developing a faithful belief network, yet it is not trivial
for experts to accomplish this task by visual inspection of the belief network, often due to
its size and complexity. Sensitivity analysis tools such as SamIam can help facilitate this
by identifying important parameters that need to be fine-tuned in order to satisfy certain
constraints. Of course, if we are given multiple constraints, we need to be cautious when
implementing a recommendation made by SamIam due to one constraint, because this may
result in violating other constraints. In this case, the parameter changes recommended
by SamIam should be used to help experts in focusing their attention on the relevant
parameters.
Moreover, the previous examples illustrate the need to develop more analytic tools to
understand and explain the sensitivity of queries to certain parameter changes. There is
also a need to reconcile the sensitivities exhibited by our examples with previous experimental studies demonstrating the robustness of probabilistic queries against small parameter
changes in certain application areas, such as diagnosis (Pradhan et al., 1996). We address
these particular questions in the next two sections.

3. The Sensitivity of Probabilistic Queries to Parameters Changes
Our starting point in understanding the sensitivity of a query Pr (y | e) to changes in a
meta parameter τx|u is to analyze the derivative ∂Pr (y | e)/∂τx|u . In our analysis, we
assume that X is binary, but Y and all other variables in the network can be multi-valued.
The following theorem provides a simple bound on this derivative, in terms of Pr (y | e)
and Pr (x | u) only. We then use this simple bound to study the effect of changes to meta
parameters on probabilistic queries.

272

When do Numbers Really Matter?

6
pd bound 4
0.8

2
0

0.6
0.4

0.2
0.4
Pr(x| u)

Pr(y|e)

0.2

0.6
0.8

Figure 4: The plot of the upper bound on the partial derivative ∂Pr (y | e)/∂τx|u , as given
in Theorem 3.1, against Pr (x | u) and Pr (y | e).

Theorem 3.1 If X is a binary variable in a belief network, then:4
¯
¯
¯ ∂Pr (y | e) ¯
Pr (y | e)(1 − Pr (y | e))
¯
¯
.
¯≤
¯
¯ ∂τx|u ¯
Pr (x | u)(1 − Pr (x | u))

The bound in Theorem 3.1 is tight, and we will show later an example for which the
derivative assumes the above bound exactly. The main point to note about this bound is
that it is independent of any given belief network.5
The plot of this bound against Pr (x | u) and Pr (y | e) is shown in Figure 4. A number
of observations are in order about this plot:
• For extreme values of Pr (x | u), the bound approaches infinity, and thus a small
absolute change in the meta parameter τx|u can have a big impact on the query
Pr (y | e).
• On the other hand, the bound approaches 0 for extreme values of the query Pr (y | e).
Therefore, a small absolute change in the meta parameter τx|u will have a small effect
on the absolute change in the query.
One of the implications of this result is that if we have a belief network where queries
of interest Pr (y | e) have extreme values, then such queries will be robust against small
changes in network parameters. This of course assumes that robustness is understood to
4. This theorem and all results that follow requires that τx|u 6= 0 and τx|u 6= 1, since we can only use the
expression in Equation 2.1 under these conditions.
5. Note that we have an exact closed form for the derivative ∂Pr (y | e)/∂τx|u (Darwiche, 2000; Greiner,
Grove, & Schuurmans, 1997), but that form includes terms which are specific to the given belief network.

273

Chan & Darwiche

X

Y

E

Figure 5: The network used in Example 3.1.

be a small change in the absolute value of the given query. Interestingly enough, if y is a
disease which is diagnosed by finding e—that is, the probability Pr (y | e) is quite high—
then it is not surprising that such queries would be robust against small perturbations to
network parameters. This seems to explain some of the results by Pradhan et al. (1996),
where robustness have been confirmed for queries with Pr (y | e) ≥ .9.
Another implication of the above result is that one has to be careful when changing
parameters that are extreme. Such parameters are potentially very influential and one
must handle them with care.
Therefore, the worst situation from a robustness viewpoint materializes if one has extreme parameters with non-extreme queries. In such a case, the queries can be very sensitive
to small variations in the parameters.
Example 3.1 Consider the network structure in Figure 5. We have two binary nodes, X
and Y with respective parameters θx , θx and θy , θy . We assume that E is a deterministic
binary node where the value of E is e iff X = Y . This dictates the following CPT for E:
Pr (e | x, y) = 1, Pr (e | x, y) = 1, Pr (e | x, y) = 0 and Pr (e | x, y) = 0. The conditional
probability Pr (y | e) can be expressed using the root parameters θx and θy as:
Pr (y | e) =

θx θy
.
θx θy + θx θy

Since ∂θx /∂τx = 1 and ∂θx /∂τx = −1, the derivative of Pr (y | e) with respect to the meta
parameter τx is given by:
∂Pr (y | e)
∂τx

=
=

(θx θy + θx θy )θy − θx θy (θy − θy )
(θx θy + θx θy )2
θy θy
.
(θx θy + θx θy )2

This is equal to the upper bound given in Theorem 3.1:
Pr (y | e)(1 − Pr (y | e))
Pr (x)(1 − Pr (x))

=
=

(θx θy )(θx θy )
θx θx (θx θy + θx θy )2
θy θy
.
(θx θy + θx θy )2

Now, if we set θx = θy , the derivative becomes:
∂Pr (y | e)
1
=
,
∂τx
4θx θx
274

When do Numbers Really Matter?

and as θx (or θx ) approaches 0, the derivative approaches infinity. Finally, if we set θx =
θy = ², we have Pr (y | e) = .5, but if we keep θy and θy constant and change τx from ² to
0, we get the new result Pr (y | e) = 0.
Example 3.1 then illustrates three points. First, it shows that the bound in Theorem 3.1
is tight, i.e. we can construct a belief network that assumes the bound. Second, it gives an
example network for which the derivative ∂Pr (y | e)/∂τx|u tends to infinity, and therefore we
cannot bound the derivative by any constant. Finally, it shows that an infinitesimal absolute
change in a meta parameter (changing τx from ² to 0) can induce a non-infinitesimal absolute
change in some query (Pr (y | e) changes from .5 to 0). The following theorem, however,
shows that this is not possible if we consider a relative notion of change.
Theorem 3.2 Assume that τx|u ≤ .5 without loss of generality.6 Suppose that ∆τx|u is an
infinitesimal change applied to the meta parameter τx|u , leading to a change of ∆Pr (y | e)
to the query Pr (y | e). We then have:
¯
¯
¯
¯
¯ ∆τ ¯
¯ ∆Pr (y | e) ¯
x|u
¯
¯
¯
¯
¯.
¯ Pr (y | e) ¯ ≤ 2 ¯¯ τ
x|u ¯

For a function f (x), the quantity:
(f (x) − f (x0 ))/f (x0 )
,
(x − x0 )/x0
(x−x0 )→0
lim

is typically known as the sensitivity of f to x at x0 . Therefore, Theorem 3.2 shows that the
sensitivity of Pr (y | e) to τx|u is bounded.
As an example application of Theorem 3.2, consider Example 3.1 again. The change
of τx from ² to 0 amounts to a relative change | − ²/²| = 1. The corresponding change of
Pr (y | e) from .5 to 0 amounts to a relative change of | − .5/.5| = 1. Hence, the relative
change in the query is not as great from this viewpoint.7
The relative change in Pr (y | e) may be greater than double the relative change in τx|u
for non-infinitesimal changes because the derivative ∂Pr (y | e)/∂τx|u depends on the value
of τx|u (Darwiche, 2000; Jensen, 1999). Going back to Example 3.1, if we set θx = .5 and
θy = .01, we obtain the result Pr (y | e) = .01. If we now increase τx to .6, a relative change
of 20%, we get the new result Pr (y | e) = 0.0149, a relative change of 49%, which is more
than double of the relative change in τx .
The question now is: Suppose that we change a meta parameter τx|u by an arbitrary
amount (not an infinitesimal amount), what can we say about the corresponding change in
the query Pr (y | e)? We have the following result.
Theorem 3.3 Let O(x | u) denote the odds of x given u: O(x | u) = Pr (x | u)/(1 − Pr (x |
u)), and let O(y | e) denote the odds of y given e: O(y | e) = Pr (y | e)/(1 − Pr (y | e)).
Let O0 (x | u) and O0 (y | e) denote these odds after having applied an arbitrary change to
6. For a binary variable X, if τx|u > .5, we can instead choose the meta parameter τx|u without loss of
generality.
7. If we consider the meta parameter τx = 1 − ² instead, the relative change in τx will then amount to
²/(1 − ²). But Theorem 3.2 will not be applicable in this case (assuming that ² is close to 0) since the
theorem requires that the chosen meta parameter be no greater than .5.

275

Chan & Darwiche

the meta parameter τx|u where X is a binary variable in a belief network. If the change is
positive, then:
O(x | u)
O0 (y | e)
O0 (x | u)
≤
≤
;
O0 (x | u)
O(y | e)
O(x | u)
or if it is negative, then:
O0 (x | u)
O0 (y | e)
O(x | u)
≤
≤ 0
.
O(x | u)
O(y | e)
O (x | u)
Combining both results, we have:
| ln(O0 (y | e)) − ln(O(y | e))| ≤ | ln(O0 (x | u)) − ln(O(x | u))|.
Theorem 3.3 means that the relative change in the odds of y given e is bounded by the
relative change in the odds of x given u, if X is a binary variable.8 Note that the result
makes no assumptions whatsoever about the structure of the given belief network.
To illustrate this theorem, we go back to Example 2.1. We intend to increase the
posterior Pr (fire | e) from .25 to .5, for e = smoke, report. The log-odds change for the
query is thus ∆lo(Pr (y | e)) = | ln(O0 (y | e)) − ln(O(y | e))| = 1.1. There were five
recommendations made by SamIam and we can calculate the log-odds change, ∆lo(τx|u ) =
| ln(O0 (x | u)) − ln(O(x | u))| for each parameter change:
1. increase the prior on fire to ≥ .03 (from .01): ∆lo(τx|u ) = 1.1;
2. increase the prior on tampering to ≥ .80 (from .02): ∆lo(τx|u ) = 5.3;
3. decrease Pr (smoke | fire) to ≤ .003 (from .01): ∆lo(τx|u ) = 1.2;
4. increase Pr (leaving | alarm) to ≥ .923 (from .001): ∆lo(τx|u ) = 9.4;
5. increase Pr (report | leaving) to ≥ .776 (from .01): ∆lo(τx|u ) = 5.8.
Therefore, we can see that all the recommended parameter changes satisfy Theorem 3.3,
i.e. the log-odds change of the query is bounded by the log-odds change of the parameter.
An interesting special case of Theorem 3.3 is when X is a root node and X = Y . From
basic probability theory, we have:
O(x | e) = O(x)

Pr (e | x)
.
Pr (e | x)

As the ratio Pr (e | x)/Pr (e | x) is independent of Pr (x), the ratio O(x | e)/O(x) is also
independent of this prior. Therefore, we can conclude that:
O0 (x | e)
O0 (x)
=
.
O(x | e)
O(x)

(4)

This means we can find the exact amount of change needed for a meta parameter τx in
order to induce a particular change on the query Pr (x | e). There is no need to use the
more expensive technique of Section 2 in this case.
8. We recently expanded our results to multi-valued variables, where we arbitrarily change parameters
0
θx|u to new values θx|u
, for all values x. The resulting bound is: | ln(O0 (y | e)) − ln(O(y | e))| ≤
0
0
ln(maxx θx|u /θx|u ) − ln(minx θx|u
/θx|u ) (Chan & Darwiche, 2002).

276

When do Numbers Really Matter?

Example 3.2 Consider the network in Figure 3. Suppose that e = report, smoke. Currently, Pr (tampering) = .02 and Pr (tampering | e) = .50. We wish to increase the conditional probability to .65. We can compute the new prior probability Pr 0 (tampering) using
Equation 4:
.65/.35
Pr 0 (tampering)/(1 − Pr 0 (tampering))
=
,
.50/.50
.02/.98
giving us Pr 0 (tampering) = .036, which is equal to the result we obtained using SamIam
in Section 1. Both the changes to Pr (tampering) and Pr (tampering | e) bring a log-odds
difference of .616.
Theorem 3.3 has a number of implications. First, given a particular query Pr (y | e) and
a meta parameter τx|u , it can be used to bound the effect that a change in τx|u will have on
the query Pr (y | e). Going back to Example 3.2, we may wish to know what is the impact
on other conditional probabilities if we apply the change making Pr 0 (tampering) = .036.
The log-odds changes for all conditional probabilities in the network will be bounded by
.616. For example, currently Pr (fire | e) = .029. Using Theorem 3.3, we can find the range
of the new conditional probability value Pr 0 (fire | e):
¯ Ã
!
µ
¶¯
¯
.029 ¯¯
Pr 0 (fire | e)
¯
− ln
¯ln
¯ ≤ .616,
¯
1 − P r0 (fire | e)
.971 ¯

giving us the range .016 ≤ Pr 0 (fire | e) ≤ .053. The exact value of Pr 0 (fire | e), obtained
by inference, is .021, which is within the computed bounds.
Second, Theorem 3.3 can be used to efficiently approximate solutions to the Difference
and Ratio problems we discussed in Section 2. That is, given a desirable change in the
value of query Pr (y | e), we can use Theorem 3.3 to immediately compute a lower bound
on the minimum change to meta parameter τx|u needed to induce the change. This method
can be applied in constant time and can serve as a preliminary recommendation, as the
method proposed in Section 2 is much more expensive computationally.
Third, suppose that SamIam was used to recommend parameter changes that would
induce a desirable change on a given query. Suppose further that SamIam returned a
number of such changes, each of which is capable of inducing the necessary change. The
question is: which one of these changes should we adopt? The main principle applied
in these situations is to adopt a “minimal” change. But what is minimal in this case? As
Theorem 3.3 reveals, a notion of minimality which is based on the amount of absolute change
can be very misleading. Instead, it suggests that one adopts the change that minimizes the
relative change in the odds, as other queries can be shown to be robust against such a
change in a precise sense.
For example, we are given two parameter changes, one from .1 to .15, and another from
.4 to .45. Both these changes give us the same absolute change of .05. However, the first
change has an log-odds change of .462, while the second one has an log-odds change of .205.
Therefore, two parameter changes that give us the same absolute change can have different
amounts of log-odds change.
On the other hand, two parameter changes that give us the same relative change can
also have different amounts of log-odds change. For example, we are given two parameter
changes, one from .1 to .2, and another from .2 to .4. Both these changes double the original
277

Chan & Darwiche

parameter value. However, the first change has a log-odds change of .811, while the second
one has a log-odds change of .981.
Finally, the result can be used to obtain a better intuitive understanding of parameter
changes that do or do not matter, a topic which we will discuss in the next section.

4. Changes that (Don’t) Matter
We now return to a central question: When do changes in network parameters matter and
when do they not matter? As we mentioned earlier, there have been experimental studies
investigating the robustness of belief networks against parameter changes (Pradhan et al.,
1996). But we have also shown very simple and intuitive examples where networks can
be very sensitive to small parameter changes. This calls for a better understanding of the
effect of parameter changes on queries, so one can intuitively sort out situations in which
such changes do or do not matter. Our goal in this section is to further develop such
an understanding by looking more closely into some of the implications of Theorem 3.3.
We start first by highlighting the difference between this theorem and previous results on
sensitivity analysis.
4.1 Network-Specific Sensitivity Analysis
One of the main differences between our results and other sensitivity analysis approaches
is that we do not need to know the belief network, and hence, do not need to perform
inference. To clarify this difference, we compare it with the sensitivity function approach
(van der Gaag & Renooij, 2001), which computes the sensitivity function that relates a
query, f (x), and a parameter, x, in the form:
f (x) =

a·x+b
,
c·x+d

where a, b, c, d are constants that depend on the given network and are computed by
performing inference as suggested by van der Gaag and Renooij (2001).
Going back to Example 2.1, we can express the query Pr (fire | smoke, report) as a
function of the parameter x = Pr (smoke | fire). The function is given by:
f (x) =

0.003165
,
0.9684 · x + 0.003165

and we plot this function in Figure 6. We can see that at the current parameter value .01,
the query value is .25, but if we decrease it to .003, the query value increases to .5, which
is one of the suggested parameter changes by SamIam.
However, we can find a bound on the relations between the query and the parameter
using Theorem 3.3, without doing inference on the network (and without knowing the
network). For example, by changing the current parameter value from .01 to .003, the new
query value will be within the bounds of .09 and .53. On the other hand, if we want the
query value to increase to .5, we have to at least decrease the parameter value from .01 to
.003, or increase it to .03.
278

When do Numbers Really Matter?

___

___

Pr(fire|smoke, report)

Pr(fire| smoke, report)
1

0.5

0.8

0.4
0.6
0.3
0.4

0.2

0.2

0.1
___

0.2

0.4

0.6

0.8

1

___

Pr(smoke, fire)

0.005

0.01

0.015

0.02

Pr(smoke, fire)

Figure 6: The plot of the query Pr (fire | smoke, report) against the parameter Pr (smoke |
fire). The second graph shows a magnification of the first graph for the region
where Pr (smoke | fire) is between 0 and .02.

4.2 Assuring Query Robustness
One of the important issues we have yet to settle is: “What does it mean for a parameter
change to not matter?” One can think of at least three definitions. First, the absolute
change in the probability Pr (y | e) is small. Second, the relative change in the probability
Pr (y | e) is small. Third, relative change in the odds O(y | e) is small. The first notion is
the one most prevalent in the literature, so we shall adopt it in the rest of this section.
Suppose we have a belief network for a diagnostic application and suppose we are concerned about the robustness of the query Pr (y | e) with respect to changes in network
parameters. In this application, y is a particular disease and e is a particular finding which
predicts the disease, with Pr (y | e) = .9. Let us define robustness in this case to be an
absolute change of no more than .05 to the given query. Now, let X be a binary variable in
the network and let us ask: What kind of changes to the parameters on X are guaranteed
to keep the query within the desirable range? We can use Theorem 3.3 easily to answer this
question. First, if we are changing a parameter by δ, and if we want the value of the query
to remain ≤ .95, we must ensure that:
| ln((p + δ)/(1 − p − δ)) − ln(p/(1 − p))| ≤ | ln(.95/.05) − ln(.9/.1)| = .7472,
where p is the current value of the parameter. Similarly, if we want to ensure that the query
remains ≥ .85, we want to ensure that:
| ln((p + δ)/(1 − p − δ)) − ln(p/(1 − p))| ≤ | ln(.85/.15) − ln(.9/.1)| = .4626.
Figure 7 plots the permissible change δ as a function of p, the current value of the
parameter. The main point to observe here is that the amount of permissible change
depends on the current value of p, with smaller changes allowed for extreme values of p.
It is also interesting to note that it is easier to guarantee the query to stay ≤ .95 than to
guarantee that it stays ≥ .85. In general, it is more likely for a parameter change to reduce
279

Chan & Darwiche

δ

0.15
0.1
0.05

0.2

0.4

0.6

0.8

1

p

−0.05
−0.1
−0.15

Figure 7: The amount of parameter change δ that would guarantee the query Pr (y | e) = .9
to stay within the interval [.85, .95], as a function of the current parameter value
p. The outer envelope guarantees the query to remain ≤ .95, while the inner
envelope guarantees the query to remain ≥ .85.

δ

0.04

0.02

0.2

0.4

0.6

0.8

1

p

−0.02

−0.04

Figure 8: The amount of parameter change δ that would guarantee the query Pr (y | e) = .6
to stay within the interval [.55, .65], as a function of the current parameter value
p. The outer envelope guarantees the query to remain ≤ .65, while the inner
envelope guarantees the query to stay in ≥ .55.

the value of a query which is close to 1 (and to increase the value of a query which is close
to 0). Finally, if we are increasing the parameter, then a parameter value close to .4 will
allow the biggest absolute change. But if we are decreasing the parameter, then a value
close to .6 will allow the biggest absolute change.
Now let us repeat the same exercise but assuming that the initial value of the query
is Pr (y | e) = .6, yet insisting on the same measure of robustness. Figure 8 plots the
280

When do Numbers Really Matter?

8
6

∆lo

4

0.8

2
0

0.6
Pr’(x| u)

0.4

0.2
0.4
Pr(x| u)

0.2

0.6
0.8

Figure 9: The plot of the log-odd difference, ∆lo = | ln(O0 (x | u)) − ln(O(x | u))|, against
Pr (x | u) and Pr 0 (x | u).

∆lo

∆lo

∆lo

6

4

6

5

5

3

4
3

4
3

2

2

2

1

1
0.2

0.4

0.6

0.8

1

p′

1
0.2

0.4

0.6

0.8

1

p′

0.2

0.4

0.6

0.8

1

p′

Figure 10: The plots of the log-odd difference, ∆lo = | ln(O0 (x | u)) − ln(O(x | u))|, against
the new parameter value p0 = Pr 0 (x | u). The figures correspond to different
initial values of the parameter, p = Pr (x | u) = .1, .5, .9, respectively.

permissible changes δ as a function of p, the current value of the parameter. Again, the
amount of permissible change becomes smaller as the probability p approaches 0 or 1. The
other main point to emphasize is that the permissible changes are now much smaller than
in the previous example, since the initial value of the query is not as extreme. Therefore,
this query is much less robust than the previous one.
More generally, Figure 9 plots the log-odds difference, | ln(O0 (x | u)) − ln(O(x | u))|,
against Pr (x | u) = p and Pr 0 (x | u) = p + δ, and Figure 10 shows cross-sections of Figure 9
for three different values of p. Again, the plots explain analytically why we can afford more
absolute changes to non-extreme probabilities (Pradhan et al., 1996; Poole, 1998).
281

Chan & Darwiche

From Figure 10, we also notice that although the plot is symmetric for p = .5, it is not
for both p = .1 and p = .9, i.e. absolute changes of ∆p and −∆p give us different amounts
of log-odds change. For example, changing the parameter from .1 to .05 give us a larger
log-odds change than changing the parameter from .1 to .15. We also notice that the plots
for p = .1 and p = .9 are mirror images of each other. Therefore, the log-odds change is the
same for complementary parameter changes on θx|u and θx|u .
We close this section by emphasizing that the above figures identify parameter changes
that guarantee keeping queries within certain ranges. However, if the belief network has
specific properties, such as a specific topology, then it is possible for the query to be robust
against parameter changes that are outside the identified bounds.

5. Conclusion
In this paper, we presented an efficient technique for fine-tuning the parameters of a belief
network. The technique suggests minimal changes to network parameters which ensure
that certain constraints are enforced on probabilistic queries. Based on this technique, we
have experimented with some belief networks, only to find out that these networks are
more sensitive to parameter changes than previous experimental studies seem to suggest.
This observation leads us to an analytic study on the effect of parameter changes, with the
aim of characterizing situations under which parameter changes do or do not matter. We
have reported on a number of results in this direction. Our central result shows that belief
networks are robust in a very specific sense: the relative change in query odds is bounded
by the relative change in the parameter odds. A closer look at this result, its meaning,
and its implications provides interesting characterizations of parameter changes that do
or do not matter, and explains analytically some of the previous experimental results and
observations on this matter.

Acknowledgments
A shorter version of this paper appeared in Proceedings of the 17th Conference on Uncertainty in Artificial Intelligence (UAI-01), pp. 65–74. This work has been partially supported
by NSF grant IIS-9988543, MURI grant N00014-00-1-0617, and by DiMI grant 00-10065.

Appendix A. Proofs
Theorem 2.1 The derivative of Pr (e) with respect to the meta parameter τx|u is given
by:
Pr (e, x, u) Pr (e, x, u)
∂Pr (e)
=
−
,
∂τx|u
θx|u
θx|u

when θx|u 6= 0 and θx|u 6= 0.
282

When do Numbers Really Matter?

Proof From Russell et al. (1995), the semantics of the first derivative of Pr (e) with respect
to parameter θx|u is given by:9
∂Pr (e)
Pr (e, x, u)
=
,
∂θx|u
θx|u
if θx|u 6= 0, and:
Pr (e, x, u)
∂Pr (e)
=
,
∂θx|u
θx|u
if θx|u 6= 0. Because θx|u = τx|u and θx|u = 1 − τx|u , we have:
∂Pr (e)
∂τx|u

=

∂Pr (e) ∂Pr (e)
−
∂θx|u
∂θx|u

=

Pr (e, x, u) Pr (e, x, u)
,
−
θx|u
θx|u

if θx|u 6= 0 and θx|u 6= 0.2
Theorem 3.1 If X is a binary variable in a belief network, then:
¯
¯
¯ ∂Pr (y | e) ¯
Pr (y | e)(1 − Pr (y | e))
¯
¯
.
¯
¯≤
¯ ∂τx|u ¯
Pr (x | u)(1 − Pr (x | u))

Proof From Darwiche (2000), the derivative ∂Pr (y | e)/∂θx|u is equal to:
∂Pr (y | e)
Pr (y, x, u | e) − Pr (y | e)Pr (x, u | e)
.
=
∂θx|u
Pr (x | u)
Since:

∂Pr (y | e)
∂Pr (y | e) ∂Pr (y | e)
,
=
−
∂τx|u
∂θx|u
∂θx|u

we have:
∂Pr (y | e)
∂τx|u
=
=

Pr (y, x, u | e) − Pr (y | e)Pr (x, u | e) Pr (y, x, u | e) − Pr (y | e)Pr (x, u | e)
−
Pr (x | u)
Pr (x | u)
Pr (y, x, u | e) − Pr (y | e)Pr (x, u | e) − Pr (x | u)(Pr (y, u | e) − Pr (y | e)Pr (u | e))
.
Pr (x | u)(1 − Pr (x | u))

In order to find an upper bound on the derivative, we would like to bound the term
Pr (y, x, u | e)−Pr (y | e)Pr (x, u | e). Since, Pr (y, x, u, e) ≤ Pr (y, u, e) and Pr (y, x, u, e) ≤
Pr (x, u, e), we have:
Pr (y, x, u | e) − Pr (y | e)Pr (x, u | e) ≤ Pr (y, x, u | e) − Pr (y | e)Pr (y, x, u | e)
= Pr (y, x, u | e)Pr (y | e)
≤ Pr (y, u | e)Pr (y | e).
9. We allow the notations ∂Pr (e)/∂θx|u and ∂Pr (e)/∂θx|u by assuming Pr (e) as functions of θx|u and θx|u ,
even though it is not allowed in belief networks to change only θx|u or θx|u .

283

Chan & Darwiche

Therefore, the upper bound on the derivative is given by:
∂Pr (y | e)
Pr (y, u | e)Pr (y | e) − Pr (x | u)(Pr (y, u | e) − Pr (y | e)Pr (u | e))
≤
,
∂τx|u
Pr (x | u)(1 − Pr (x | u))
which is equal to the following term:
Pr (y | e)Pr (y, u | e) Pr (y | e)Pr (y, u | e)
+
Pr (x | u)
1 − Pr (x | u)
(1 − Pr (x | u))Pr (y | e)Pr (y, u | e) + Pr (x | u)Pr (y | e)Pr (y, u | e)
=
Pr (x | u)(1 − Pr (x | u))
Pr (y, u | e)Pr (y | e) − Pr (x | u)(P r(y, u | e) − Pr (y | e)Pr (u | e))
=
.
Pr (x | u)(1 − Pr (x | u))
Since Pr (y, u | e) ≤ Pr (y | e) and Pr (y, u | e) ≤ Pr (y | e), the upper bound on the
derivative is given by:
∂Pr (y | e)
∂τx|u

≤
≤
=

Pr (y | e)Pr (y, u | e) Pr (y | e)Pr (y, u | e)
+
Pr (x | u)
1 − Pr (x | u)
Pr (y | e)Pr (y | e) Pr (y | e)Pr (y | e)
+
Pr (x | u)
1 − Pr (x | u)
Pr (y | e)(1 − Pr (y | e))
.
Pr (x | u)(1 − Pr (x | u))

In order to find a lower bound on the derivative, we note that Pr (y | e) = 1 − Pr (y | e),
and thus ∂Pr (y | e)/∂τx|u = −∂Pr (y | e)/∂τx|u . Therefore, we can get our lower bound by
finding the upper bound on the derivative ∂Pr (y | e)/∂τx|u and multiplying by −1:
∂Pr (y | e)
∂τx|u

≥ −

Pr (y | e)(1 − Pr (y | e))
Pr (x | u)(1 − Pr (x | u))

= −

Pr (y | e)(1 − Pr (y | e))
.
Pr (x | u)(1 − Pr (x | u))

Combining the upper bound and the lower bound, we have:
¯
¯
¯ ∂Pr (y | e) ¯
Pr (y | e)(1 − Pr (y | e))
¯
¯
.2
¯
¯≤
¯ ∂τx|u ¯
Pr (x | u)(1 − Pr (x | u))

Theorem 3.2 Assume that τx|u ≤ .5 without loss of generality. Suppose that ∆τx|u is an
infinitesimal change applied to the meta parameter τx|u , leading to a change of ∆Pr (y | e)
to the query Pr (y | e). We then have:
¯
¯
¯
¯
¯ ∆τ ¯
¯ ∆Pr (y | e) ¯
x|u
¯
¯
¯
¯
¯.
¯ Pr (y | e) ¯ ≤ 2 ¯¯ τ
x|u ¯

284

When do Numbers Really Matter?

Proof Because ∆τx|u is infinitesimal, from Theorem 3.1:
¯
¯
¯ ∆Pr (y | e) ¯
¯
¯
¯
¯
¯ ∆τx|u ¯

¯
¯
¯ ∂Pr (y | e) ¯
¯
¯
' ¯
¯
¯ ∂τx|u ¯

≤

Pr (y | e)(1 − Pr (y | e))
.
Pr (x | u)(1 − Pr (x | u))

Arranging the terms, we have:
¯
¯
¯ ∆Pr (y | e) ¯
¯
¯
¯ Pr (y | e) ¯

¯

¯

≤

1 − Pr (y | e) ¯¯ ∆τx|u ¯¯
¯
¯
1 − Pr (x | u) ¯ τx|u ¯

≤

1 ¯¯ ∆τx|u ¯¯
¯
¯
.5 ¯ τx|u ¯

¯

=

¯

¯
¯
¯ ∆τ ¯
x|u ¯
¯
2¯
¯,
¯ τx|u ¯

since Pr (x | u) = τx|u ≤ .5.2
Theorem 3.3 Let O(x | u) denote the odds of x given u: O(x | u) = Pr (x | u)/(1−Pr (x |
u)), and let O(y | e) denote the odds of y given e: O(y | e) = Pr (y | e)/(1 − Pr (y | e)).
Let O0 (x | u) and O0 (y | e) denote these odds after having applied an arbitrary change to
the meta parameter τx|u where X is a binary variable in a belief network. If the change is
positive, then:
O(x | u)
O0 (y | e)
O0 (x | u)
≤
≤
;
0
O (x | u)
O(y | e)
O(x | u)
or if it is negative, then:
O0 (x | u)
O0 (y | e)
O(x | u)
≤
≤ 0
.
O(x | u)
O(y | e)
O (x | u)
Combining both results, we have:
| ln(O0 (y | e)) − ln(O(y | e))| ≤ | ln(O0 (x | u)) − ln(O(x | u))|.

Proof We obtain this result by integrating the bound in Theorem 3.1. In particular, if
0
we change τx|u to τx|u
> τx|u , and consequently Pr (y | e) changes to Pr 0 (y | e), we can
separate the variables in the upper bound on the derivative in Theorem 3.1, integrate over
the intervals, and yield:
Z Pr 0 (y|e)
Pr (y|e)

dPr (y | e)
≤
Pr (y | e)(1 − Pr (y | e))

Z τ0
x|u
τx|u

dτx|u
.
τx|u (1 − τx|u )

This gives us the solution:
ln(Pr 0 (y | e)) − ln(Pr (y | e)) − ln(1 − Pr 0 (y | e)) + ln(1 − Pr (y | e))
0
0
≤ ln(τx|u
) − ln(τx|u ) − ln(1 − τx|u
) + ln(1 − τx|u ),
285

Chan & Darwiche

and after taking exponentials, we have:
0 /(1 − τ 0 )
τx|u
Pr 0 (y | e)/(1 − Pr 0 (y | e))
x|u
≤
,
Pr (y | e)/(1 − Pr (y | e))
τx|u /(1 − τx|u )

which is equivalent to:

O0 (x | u)
O0 (y | e)
≤
.
O(y | e)
O(x | u)

Similarly, we can separate the variables in the lower bound on the derivative in Theorem 3.1, integrate over the intervals, and yield:
Z Pr 0 (y|e)
Pr (y|e)

dPr (y | e)
≥−
Pr (y | e)(1 − Pr (y | e))

Z τ0
x|u
τx|u

dτx|u
.
τx|u (1 − τx|u )

This gives us the solution:
ln(Pr 0 (y | e)) − ln(Pr (y | e)) − ln(1 − Pr 0 (y | e)) + ln(1 − Pr (y | e))
0
0
≥ − ln(τx|u
) + ln(τx|u ) + ln(1 − τx|u
) − ln(1 − τx|u ),
and after taking exponentials, we have:
τx|u /(1 − τx|u )
Pr 0 (y | e)/(1 − Pr 0 (y | e))
≥ 0
0 ),
Pr (y | e)/(1 − Pr (y | e))
τx|u /(1 − τx|u
which is equivalent to:

O0 (y | e)
O(x | u)
≥ 0
.
O(y | e)
O (x | u)

0
Therefore, we have the following inequality if τx|u
> τx|u :

O(x | u)
O0 (y | e)
O0 (x | u)
≤
≤
.
O0 (x | u)
O(y | e)
O(x | u)
0
On the other hand, if we now change τx|u to τx|u
< τx|u , we can instead integrate from
to τx|u . The integrals will satisfy these two inequalities:

0
τx|u

Z Pr (y|e)
Pr 0 (y|e)

Z Pr (y|e)
Pr 0 (y|e)

Z τx|u

dPr (y | e)
Pr (y | e)(1 − Pr (y | e))

≤

dPr (y | e)
Pr (y | e)(1 − Pr (y | e))

≥ −

0
τx|u

dτx|u
;
τx|u (1 − τx|u )

Z τx|u
0
τx|u

dτx|u
.
τx|u (1 − τx|u )

We can solve for the inequalities similarly and get the result:
O0 (x | u)
O0 (y | e)
O(x | u)
≤
≤ 0
.
O(x | u)
O(y | e)
O (x | u)
0
0
Combining the results for both τx|u
> τx|u and τx|u
< τx|u , we have:

| ln(O0 (y | e)) − ln(O(y | e))| ≤ | ln(O0 (x | u)) − ln(O(x | u))|.2
286

When do Numbers Really Matter?

References
Castillo, E., Gutiérrez, J. M., & Hadi, A. S. (1997). Sensitivity analysis in discrete Bayesian
networks. IEEE Transactions on Systems, Man, and Cybernetics, 27, 412–423.
Chan, H., & Darwiche, A. (2002). A distance measure for bounding probabilistic belief
change. In Proceedings of the Eighteenth National Conference on Artificial Intelligence
(AAAI), pp. 539–545.
Coupé, V. M. H., Peek, N., Ottenkamp, J., & Habbema, J. D. F. (1999). Using sensitivity analysis for efficient quantification of a belief network. Artificial Intelligence in
Medicine, 17, 223–247.
Darwiche, A. (2000). A differential approach to inference in Bayesian networks. In Proceedings of the 16th Conference on Uncertainty in Artificial Intelligence (UAI), pp.
123–132.
Greiner, R., Grove, A., & Schuurmans, D. (1997). Learning Bayesian nets that perform
well. In Proceedings of the 13th Conference on Uncertainty in Artificial Intelligence
(UAI), pp. 198–207.
Jensen, F. V., Lauritzen, S., & Olesen, K. (1990). Bayesian updating in recursive graphical
models by local computation. Computational Statistics Quarterly, 4, 269–282.
Jensen, F. V. (1999). Gradient descent training of bayesian networks. In Proceedings of the
Fifth European Conference on Symbolic and Quantitative Approaches to Reasoning
with Uncertainty (ECSQARU), pp. 190–200.
Jensen, F. V. (2001). Bayesian Networks and Decision Graphs. Springer-Verlag, Inc., New
York.
Kjærulff, U., & van der Gaag, L. C. (2000). Making sensitivity analysis computationally
efficient. In Proceedings of the 16th Conference on Uncertainty in Artificial Intelligence
(UAI), pp. 317–325.
Laskey, K. B. (1995). Sensitivity analysis for probability assessments in Bayesian networks.
IEEE Transactions on Systems, Man, and Cybernetics, 25, 901–909.
Pearl, J. (1988). Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference. Morgan Kaufmann Publishers, Inc., San Mateo, California.
Poole, D. (1998). Context-specific approximation in probabilistic inference. In Proceedings
of the 14th Conference on Uncertainty in Artificial Intelligence (UAI), pp. 447–454.
Pradhan, M., Henrion, M., Provan, G., Del Favero, B., & Huang, K. (1996). The sensitivity
of belief networks to imprecise probabilities: an experimental investigation. Artificial
Intelligence, 85, 363–397.
Russell, S., Binder, J., Koller, D., & Kanazawa, K. (1995). Local learning in probabilistic
networks with hidden variables. In Proceedings of the Fourteenth International Joint
Conference on Artificial Intelligence (IJCAI), pp. 1146–1152.
van der Gaag, L. C., & Renooij, S. (2001). Analysing sensitivity data from probabilistic networks. In Proceedings of the 17th Conference on Uncertainty in Artificial Intelligence
(UAI), pp. 530–537.

287

Journal of Articial Intelligence Research 17 (2002) 83135

Submitted 10/01; published 08/02

Monitoring Teams by Overhearing:
A Multi-Agent Plan-Recognition Approach

galk@cs.biu.ac.il

Gal A. Kaminka
Computer Science Department
Bar Ilan University
Ramat Gan 52900, Israel

pynadath@isi.edu
tambe@usc.edu

David V. Pynadath
Milind Tambe
Computer Science Department and Information Sciences Institute
University of Southern California
4676 Admiralty Way
Los Angeles, CA 90292, USA

Abstract

Recent years are seeing an increasing need for on-line monitoring of teams of cooperating agents, e.g., for visualization, or performance tracking. However, in monitoring
deployed teams, we often cannot rely on the agents to always communicate their state
to the monitoring system. This paper presents a non-intrusive approach to monitoring by
overhearing, where the monitored team's state is inferred (via plan-recognition) from teammembers' routine communications, exchanged as part of their coordinated task execution,
and observed (overheard) by the monitoring system. Key challenges in this approach include the demanding run-time requirements of monitoring, the scarceness of observations
(increasing monitoring uncertainty), and the need to scale-up monitoring to address potentially large teams. To address these, we present a set of complementary novel techniques,
exploiting knowledge of the social structures and procedures in the monitored team: (i)
an ecient probabilistic plan-recognition algorithm, well-suited for processing communications as observations; (ii) an approach to exploiting knowledge of the team's social behavior to predict future observations during execution (reducing monitoring uncertainty);
and (iii) monitoring algorithms that trade expressivity for scalability, representing only
certain useful monitoring hypotheses, but allowing for any number of agents and their
dierent activities to be represented in a single coherent entity. We present an empirical
evaluation of these techniques, in combination and apart, in monitoring a deployed team
of agents, running on machines physically distributed across the country, and engaged in
complex, dynamic task execution. We also compare the performance of these techniques
to human expert and novice monitors, and show that the techniques presented are capable
of monitoring at human-expert levels, despite the diculty of the task.
1. Introduction
Recent years have seen tremendous growth of applications involving distributed multi-agent
teams, formed of agents that collaborate on a specic joint task (e.g., Jennings, 1995; Pechoucek, Marik, & Stepankova, 2000, 2001; Kumar & Cohen, 2000; Kumar, Cohen, &
Levesque, 2000; Horling, Benyo, & Lesser, 2001; Lenser, Bruce, & Veloso, 2001; Barber &
Martin, 2001). This growth has led to increasing need for monitoring techniques that allow a

c 2002 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Kaminka, Pynadath, & Tambe
synthetic agent or human operator to monitor and identify the state of the distributed team.
Previous work has discussed the critical role of monitoring in visualization (e.g., Ndumu,
Nwana, Lee, & Collis, 1999), in identifying failures in execution (e.g., Horling et al., 2001),
in providing advice to improve performance (e.g., Aiello, Busetta, Dona, & Serani, 2001),
and in facilitating collaboration between the monitoring agent and the members of the team
(e.g., Grosz & Kraus, 1996).
This paper focuses on monitoring cooperative agent teams by overhearing their internal communications.

This allows a human operator or a synthetic agent to monitor the

coordinated execution of a task, by listening to the messages team-members exchange with
each other.

It contrasts with previous techniques that are impractical in settings where

direct observations of the team members are unavailable (e.g., when team-members are
physically distributed away from the observer), or in large-scale applications composed of

already-deployed

agents that are dynamically integrated to jointly execute a task.

For example, one common technique,

report-based monitoring, requires

each monitored

team-member to communicate its state to the monitoring agent at regular intervals, or at
least whenever the team-member changes its state. Such reporting provides the monitoring
agent with accurate information on the state of the team. Unfortunately, report-based monitoring suers from several diculties in monitoring large deployed teams of interest in the
real-world (see Section 2 for a detailed discussion): First, it requires intrusive modications
to the behavior of agents, such that they report their state as needed by the dierent monitoring applications. However, since agents are already deployed, such repeated modications
to the behavior of the agents are dicult to implement and complex to manage.

In par-

ticular, legacy and proprietary systems are notoriously expensive to modify (for instance,
consider the notorious modications to address the Year 2000 bug, also known as Y2K).
Second, the bandwidth requirements of report-based monitoring (which relies on communication channels) can be unrealistic (Jennings, 1993, 1995; Grosz & Kraus, 1996; Pechoucek
et

al., 2000, 2001; Vercouter, Beaune, & Sayettat, 2000). In addition, network delays and

unreliable or lossy communication channels are a key concern with report-based monitoring
approaches.
We therefore advocate an alternative monitoring approach, based on multi-agent keyhole
plan-recognition (Tambe, 1996; Huber & Hadley, 1997; Devaney & Ram, 1998; Intille &
Bobick, 1999; Kaminka & Tambe, 2000).

In this approach, the monitoring system infers

the unobservable state of the agents based on their observable actions, using knowledge of
the plans that give rise to the actions. This approach is non-intrusive, requiring no changes
to agents' behaviors; and it allows for changes in the requested monitoring information.
It assumes access to knowledge of plans that may explain observable actionhowever this
knowledge is readily available to the monitoring system as we assume it is deployed in a
collaborative environment. Indeed, in some cases, the monitoring system may be deployed
by the human operator of the team. An additional benet of a plan-recognition approach
is that it can rely on inference to compensate for occasional communication losses, and can
therefore be robust to communication failures.
In general, the only observable actions of agents in a distributed team are their

routine

communications, which the agents exchange as part of task execution (Ndumu et al., 1999).
Fortunately, the growing popularity of agent integration tools (Tambe, Pynadath, Chauvat,
Das, & Kaminka, 2000; Martin, Cheyer, & Moran, 1999) and agent communications (Finin,

84

Monitoring Teams by Overhearing
Labrou, & Mayeld, 1997; Reed, 1998) increases standardization of aspects of agent communications, and provides increasing opportunities for observing and interpreting inter-agent
communications.

We assume that monitored agents are truthful in their messages, since

they are communicating to their teammates; and that they are not attempting to deceive
the monitoring agent or prevent it from overhearing (as it is deployed by the human operator of the team).

Given a (possibly stochastic) model of the plans that the agents may

be executing, a monitoring system using plan-recognition can infer the current state of the
agents from such observed routine messages.
However, the application of plan-recognition techniques for overhearing poses signicant
challenges. First, a key characteristic of the overhearing task is the scarcity of observations.
Explanations for overheard messages (i.e., the observed actions) can sometimes be fairly easy
to disambiguate, but uncertainty arises because there are relatively few of them to observe:
team members cannot and do not in practice continuously communicate among themselves
about their state (Jennings, 1995; Grosz & Kraus, 1996). Thus team-members change their
state while keeping quiet. Another key characteristic of overhearing is that the observable
actions are inherently
agent that

listening.

multi-agent actions :

sends the messages.

When agents communicate, it is only a single

The others implicitly act their role in the communications by

Yet despite the scarcity of observable communications, and the multi-agent nature

of the observed actions, a monitoring system must infer the state of all agents in the team,
at all times. Previous investigations of multi-agent plan-recognition (Tambe, 1996; Devaney
& Ram, 1998; Intille & Bobick, 1999; Kaminka & Tambe, 2000) have typically made the
assumption that all changes to the state of agents have an observable eect: Uncertainty
resulted from ambiguity in the explanations for the observed actions. Furthermore, these
investigations have addressed settings where observable actions were individual (each action
is carried out by a single agent).
In addition to these challenges that are unique to overhearing, a monitoring system must
address additional challenges stemming from the use of monitoring in service of visualization.

The representation and algorithms must support soft real-time response; reasoning

must be done quickly to be useful for visualization.

Furthermore, real-world applications

demand techniques that can scale up as the number of agents increases, for monitoring large
teams. However, many current representations for plan-recognition are computationally intense (e.g., Kjærul, 1992), or only address single-agent recognition tasks (e.g., Pynadath
& Wellman, 2000). Multi-agent plan-recognition investigations have typically not explicitly
addressed scalability concerns (Devaney & Ram, 1998; Intille & Bobick, 1999).
This paper presents Overseer, an implemented monitoring system capable of monitoring large distributed applications composed of previously-deployed agents.

Overseer

builds on previous work in multi-agent plan-recognition (Tambe, 1996; Intille & Bobick,
1999; Kaminka & Tambe, 2000) by utilizing knowledge of the relationships between agents
to understand how their decisions interact. However, as previous techniques proved insucient, Overseer includes a number of novel multi-agent plan-recognition techniques that
address the scarcity of observations, as well as the severe response-time and scale-up requirements imposed by realistic applications. Key contributions include: (i) a

linear time

probabilistic plan-recognition representation and associated algorithms, which exploit the
nature of observed communications for eciency; (ii) a method for addressing unavailable
observations by exploiting knowledge of the

social procedures
85

of teams to eectively predict

Kaminka, Pynadath, & Tambe
(and hence eectively monitor) future observations during normal and failed execution, thus
allowing inference from lack of such observations; and (iii) YOYO*, an algorithm that uses

team-hierarchy )

knowledge of the team organizational structure (

to model the agent team

(with all the dierent parallel activities taken by individual agents) using a single structure,
instead of modeling each agent individually. YOYO* sacrices some expressivity (the ability
to accurately monitor the team in certain coordination failure states) for signicant gains in
eciency and scalability.
We present a rigorous evaluation of Overseer's dierent monitoring techniques in one
of its application domains and show that the techniques presented result in signicant boosts
to Overseer's monitoring accuracy and eciency, beyond techniques explored in previous
work. We evaluate Overseer's capability to address lossy observations, a key concern with
report-based monitoring. Furthermore, we evaluate Overseer's performance in comparison
with human expert and novice monitors, and show that Overseer's performance is comparable to that of human experts, despite the diculty of the task, and Overseer's reliance
on computationally-simple techniques. One of the key lessons that we draw in Overseer
is that a combination of computationally-cheap multi-agent plan-recognition techniques, exploiting knowledge of the expected structures and interactions among team-members, can
be competitive with approaches which focus on accurate modeling of individual agents (and
may be computationally expensive).
This paper is organized as follows.

Section 2 presents the motivation for the design

of Overseer, using examples from an actual distributed application in which Overseer
was applied.

Section 3 presents a novel single-agent plan-recognition representation and

associated algorithms, particularly suited to monitoring an agent based on its observed
communications. Section 4 explores several methods Overseer uses to address uncertainty
in using this representation for monitoring a team of agents. Section 5 presents YOYO*,
which allows ecient reasoning using the methods previously discussed. Section 6 presents
an evaluation of the dierent techniques incorporated in YOYO*. Section 7 contrasts the
techniques presented with previous related investigations, and nally, Section 8 concludes
and presents our plans for future work. In addition, several appendices present all pseudocode for algorithms discussed in the text, and portions of the data used in our experiments,
for those readers who may wish to replicate the experiments.

2. Motivation and Illustrative Examples
Several considerations, based on our experience with actual distributed applications, have
directed us towards the plan-recognition approach we advocate in this paper. We present
these considerations in the context of an illustrative complex distributed application, which
we also use for evaluating Overseer in Section 6. In this application, a distributed team of
11 to 20 agents executes a simulation of an evacuation of civilians from a threatened location.
The integrated system allows a human commander to interactively provide locations of the
stranded civilians, safe areas for evacuation and other key points. Simulated helicopters then
y a coordinated mission to evacuate the civilians, relying on various information agents to
dynamically obtain information about enemy threats, (re)plan routes to avoid threats and
obstacles, etc. The distributed team is composed of diverse agents from four dierent research groups: A Quickset multi-modal command input agent (Cohen, Johnston, McGee,

86

Monitoring Teams by Overhearing
Oviatt, Pittman, Smith, Chen, & Clow, 1997), a Retsina route planner (Payne, Sycara,
Lewis, Lenox, & Hahn, 2000), the Ariadne information agent (Knoblock, Minton, Ambite, Ashish, Modi, Muslea, Philpot, & Tejada, 1998) and eight synthetic helicopter pilots
(Tambe, Johnson, Jones, Koss, Laird, Rosenbloom, & Schwamb, 1995).
The agents were not designed to work together on this taskthey were already built
and deployed prior to the creation of the team. The team is integrated using Teamcore
(Tambe et

al., 2000), which accomplishes integration by wrapping each agent with a

proxy that maintains collaboration with other agents (via their own proxies). The proxies
and agents form a team, jointly executing a distributed application described by a

oriented program.

team-

Such a program consists of:



A team hierarchy, where a team decomposes into subteams, and sub-subteams.



A plan hierarchy, which contains team plans that decompose into subteam plans



Assignment of teams from the team hierarchy to plans in the plan hierarchy.

As an example, Figure 1-a shows a part of the team/subteam hierarchy used in the
evacuation-domain (described below).

Here, for instance, TRANSPORT is a subteam of

FLIGHT-TEAM, itself a subteam of TASK-FORCE. Figure 1-b shows an abbreviated planhierarchy for the same domain.

High-level team plans, such as

compose into other team plans, such as

Process-Orders,

Evacuate,

typically de-

and, ultimately, into leaf-level

plans that are executed by individuals. Temporal transitions are used to constrain the order of execution of plans. There are teams assigned to execute the plans, e.g., the TASK
FORCE team jointly executes Evacuate, while only the TRANSPORT subteam executes
the Transport-Operations (Transport-Ops) step.

The team-oriented program for

this application consists of about 40 team-plans. Some plans may get executed repeatedly
though, so each agent may execute up to hundreds of plan steps as part of the execution of
a single team-oriented program.
To execute the team-oriented program, each proxy uses a domain-independent teamwork
model, called STEAM (Tambe, 1997).

The teamwork model automatically generates the

communication messages required to ensure appropriate coordination among the proxies.
For instance, STEAM requires that if an agent privately obtains a belief

bel

that terminates

a team plan, then that agent should send a message to the rest of the team to terminate that
team plan, along with the private belief

bel

that led to that termination. To avoid jamming

the communication channels with a ood of messages about every single plan, STEAM
chooses to communicate selectively. Thus, whereas communicating about the initiation and
termination of each and every plan would have led to 2000 or more messages generated in
one run, only about 100 messages get exchanged in any one run when using STEAM (Tambe
et

al., 2000).
Figure 2 displays some of the messages exchanged among team members in the evac-

uation application, through the use of STEAM. The rst message is sent from a proxy
called teamquickset

to members of a team TEAM-EVAC (another name for TASK

FORCE). The content of this message indicates that the team should terminate a plan
called

determine-number-of-helos.

The second message is sent from a proxy called

87

Kaminka, Pynadath, & Tambe

TASK FORCE

EVACUATE [TASK FORCE]

.....
GET ORDERS
ROLE

FLIGHT
TEAM

ESCORT

ROUTE
PLANNER

TRANSPORT

ESCORT ESCORT

TRANSPORT ...

LEAD

DIVISION 1

FOLLOW

PROCESS
ORDERS
[TASK FORCE]

EXECUTE
MISSION
[TASK FORCE]

LANDING
ZONE
MANEUVERS
[FLIGHT TEAM]

FLY-FLIGHT
PLAN
GET
ORDERS
[FLIGHT TEAM]
[GET ORDERS]
FLY-CONTROL
ROUTE....
[FLIGHT TEAM]

(a)

.....

....
ESCORT
TRANSPORT
OPERATIONS OPERATIONS
[ESCORT]
[TRANSPORT]

(b)

Figure 1: Portions of the team-hierarchy (a) and plan-hierarchy (b) used in our domain.
Dotted lines show temporal transitions.

team_auto2 to members of a subteam TEAM-ESCORT-FOLLOW (a subteam of ESCORTS). The content of this message indicates that the subteam should establish commitment to a plan named

prepare-to-execute-mission.

The online appendix presents sample

logs of the overheard messages from complete runs, as well as the plan and team hierarchies
for the evacuation application.
As discussed in Section 1, the capability for automatically monitoring the progress of
the team is critical.

This need for team monitoring is further amplied in distributed

settings, since a human operator in one place cannot directly observe the agents executing
in a remote location.

For instance, in trial runs of the evacuation simulation application

described above, monitoring sometimes required a series of frantic phone calls among human
operators in dierent states, trying to verify the successful execution of the system as it was
operating.

And even when this agent team was co-located on multiple computers in one

room, the diversity of agents made it extremely dicult for an observer to automatically
monitor the state of the team just from observing the dierent agent output screens.
Overseer was built to provide such monitoring by tracking the routine communica-

tions among the agents (Figure 2).

Using plan-recognition, it allows humans and agents

to query about the present and future likely plans of the entire team, its subteams and
individualsto monitor progress, compute likelihoods of failure, etc. However, given that
the agent team communicates selectively about the plans being executed, Overseer's planrecognition faces signicant uncertainty. Furthermore, Overseer must be able to answer
queries on-line, and must therefore work eciently.

As discussed later, addressing these

challenges has required several novel team-based plan-recognition techniques to be developed.
Several considerations have led us away from report-based monitoring for this and other
Teamcore applications. First, report-based monitoring requires that agents' code be mod-

ied to communicate the reports needed for monitoring; as monitoring requirements change

88

Monitoring Teams by Overhearing

Log Message Received; Fri Sep 17 18:27:54 1999:
Logging Agent: teamquickset
Message==> tell
:content teamquickset terminate-jpg constant determine-number-of-helos
number-of-helos-determined *yes* 4 4 98 kqml_string
:receiver TEAM-EVAC 9 kqml_word
:reply-with nil 3 kqml_word
:team TEAM-EVAC 9 kqml_word
:sender teamquickset 12 kqml_word
:kqml-msg-id 21547+tsevet.isi.edu+7 22 kqml_word
Log Message Received; Fri Sep 17 18:30:35 1999:
Logging Agent: TEAM_auto2
Message==> tell
:content TEAM_auto2 establish-commitment prepare-to-execute-mission
58 kqml_string
:receiver TEAM-ESCORT-FOLLOW 18 kqml_word
:reply-with nil 3 kqml_word
:team TEAM-ESCORT-FOLLOW 18 kqml_word
:sender TEAM_auto2 10 kqml_word
:kqml-msg-id 20752+dui.isi.edu+16 20 kqml_word
Figure 2: Example KQML messages used as observations by Overseer.

89

Kaminka, Pynadath, & Tambe
from one application to the next, so does the information needed about each agent.

Un-

fortunately, the agents and their proxies are already deployed in several government laboratories and universities.

Modifying the agents at each deployed location is problematic

and intrusivemodications interfere with carefully designed timing specications of given
tasks, requiring further modications by other agent developers. The distributed nature of
Teamcore implies that there is no centralized server which controls the behavior of the

agents, but instead changes are required in the dierent proxy types.

Indeed, in general,

modifying legacy and proprietary applications (including the integration architecture) is of
course known to be a dicult process, and so a solution that requires constant modications
to the agents and architecture will not scale up.
A second important consideration was the computational and bandwidth requirements of
report-based monitoring. As has been repeatedly noted in the literature, one cannot expect
agents to be able to communicate continuously and fully monitor all other agents (e.g.,
Jennings, 1993, 1995; Grosz & Kraus, 1996; Pechoucek et al., 2001; Vercouter et al., 2000).
In a team of 11 (used as an example in this paper), regularly scheduled state reports from the
agents at the required temporal resolution would require approximately 50,000 messages to
be sent during a 15-minute run, with the number nearly doubling when we reach 20 agents.
If we instead have the 11 agents only report on state changes, announcing plan initiation
and termination, approximately 2,000 messages have to be sent.

However, this is still an

order-of-magnitude more than the normal 100 messages or so that are exchanged by the
11 agents as part of routine execution. Even if the network could support the bandwidth
necessary for report-based monitoring, there is also a signicant computational burden on
the monitoring system to process all the incoming reports.
On the other hand, a plan-recognition approach seemed like a natural t for the task.
First, it doesn't require any changes in the behavior of the monitored agents, and is thus
very suitable for monitoring agents that are already deployed. Second, it doesn't add any
computational burdens to the monitored agents or the network, since it uses only what
observations are already available. Third, the main knowledge source plan-recognition systems typically rely ona plan libraryis in fact easily available in accessible form to the
monitoring system from the team-oriented program which is used to integrate the agents,
since the operator deploying the monitoring system is assumed to be the one to describe
the integration team-oriented program in the rst place. Thus plan-recognition's sometimes
criticized assumption of a correct plan-library is in fact satised fully in this monitoring
application.
Note that this assumption holds even if agents are not all using the same integration architecture: The only knowledge we rely on is a (possibly stochastic) model of how
components of execution t together, and the communications that are used to integrate
them. Therefore, while this paper focuses on team-oriented programs (described above), the
techniques introduced appear generalizable to other types of representation languages for
distributed systems, such as TÆMS (Decker, 1995), team-oriented programming (Tidhar,
1993a) and others. Furthermore, the plan-library need not contain implemetation details
only the names of the key steps. Thus even agents utilizing radically-dierent representations
than a plan-hierarchy can be monitored, as long as they have execution states corresponding
to the team-oriented program (which they have to have in any case in order to coordinate
with other team-members).

90

Monitoring Teams by Overhearing
Monitoring by overhearing poses unique challenges as previously discussed. However, it
also oers unique opportunities for plan recognition. We had earlier stated our assumption
that agents are truthful in their communications, and do not seek to deceive their teammates
or the monitoring system, nor prevent overhearing in any way (e.g., encryption).

This

assumption is justied as the monitoring system is deployed by the operator of the monitored
agents, or by an agent team-member. Failures of the team to coordinate (e.g., due to clock
asynchrony or unintentional erroneous messages) will therefore cause corresponding failures
in monitoring. However, we do not make additional assumptions about the messages beyond
those that are made by the monitored agents themselves.
This assumption allows a plan-recognition system to treat observations with certainty:
When a message is overheard terminating plan
certainty that indeed the plan
plan recognition ambiguity.

X

X,

the monitoring system can infer with

is no longer executed. However, this does not eliminate

First, multiple instantiations of plan

X

may exist, and the

message does not specify which one was terminated. Second, upon termination of the plan,
the monitored team-member must often choose between multiple alternative plan steps to
follow

X,

and yet this choice is not evident in the observations.

Indeed, the diculty

of monitoring by overhearing is demonstrated by human monitoring performance: Novice
human monitors have managed to only achieve approximately 60% accuracy on average.

3. Monitoring a Team of Agents as Separate Individuals
In this section, we present a representation and associated baseline algorithms to support
overhearing based on the plan-hierarchy and team-hierarchy.

We begin by making an as-

sumption of agent independence, where observations and beliefs about one agent's state of
execution have no bearing on our beliefs about another agent's state. This assumption can
be contrasted with another: If we assume instead that team-members are successful in their
coordination, then knowing that one agent has begun executing a joint plan would naturally increase the likelihood that its teammates have begun as well, as agents would not be
considered independent. In fact, successful teamwork

requires

interdependency among the

agents (Grosz, 1996).
However, an initial assumption of agent independence provides a baseline of comparison,
as it more closely follows current approaches to multi-agent plan recognition, which often
assume that observations about each individual agent are continuously available.

Later

sections (Sections 4 and 5) will highlight the unique challenges tackled in monitoring by
overhearing, and will take agent interdependencies into account.
We thus begin by maintaining a separate plan recognizer for each agent.

Each recog-

nizer observes only those messages that its respective agent sends. On the basis of these
observations, the recognizer maintains a probabilistic estimate of the state of execution of
the various plans the agent may be currently executing. Knowledge of the plans assigned to
agents and their team memberships is available in our application from the plan-hierarchy
and team-hierarchy of the team-oriented program used in constructing the monitored application.
Section 3.1 presents the language we use for the probabilistic representation of a teamoriented program.

We exploit various independence properties within team-oriented pro-

grams to achieve a compact representation of the possible plan states of the agents. Sec-

91

Kaminka, Pynadath, & Tambe
tion 3.2 presents an algorithm for updating the recognizer's beliefs about the agents' plan
states upon the observation of a message.

This algorithm performs the update with an

eciency gained by exploiting the particular semantics of communicated messages, namely
that each such message is an observation that indicates the initiation/termination of a par-

with certainty.

ticular plan

Section 3.3 presents an algorithm for updating the recognizer's

beliefs about the agents' plan states when

no

message has been observed. In the absence

of any such evidence, this algorithm eciently updates the recognizer's beliefs by using a
temporal model of the agents' plan execution that makes a strong Markovian assumption.
Finally, Section 3.4 presents the overall recognition procedure, as well as an illustration and
complexity analysis of that procedure.

3.1 Plan-State Representation
We address uncertainty in monitoring through a probabilistic model that supports quantitative evaluation of the recognized plan hypotheses. Since we are monitoring these agents
through the duration of their execution, we use a time series of plan-state variables.

At

each point in time, the agent's plan state is the state of the team-oriented program that it
is currently executing, i.e., a path from root to leaf in the team-oriented program tree. We
represent the plans in the program by a set of boolean random variables,
variable

Xt

represent our beliefs about the agent's actual state at time
all variables

fXt g.

X

fXt g, where each

t. We then
t as a probability distribution over

is true if and only if the agent is actively executing plan

at time

The distribution takes into account dependencies among the dierent

plans in the team-oriented program (e.g., parent-child relationships), as well as the temporal dependencies between the plan state at times

t

and

t + 1.

To simplify the dependency

done(X; t), that are
1 and its execution has terminated at

structure, it is useful to introduce additional boolean random variables,
true if and only if plan
time

t.

X

was executed at time

t

There are a number of possible representations for capturing the distribution and performing inference over these variables.

However, the generality of the plan hierarchy, the

dynamic nature of the domain, and the requirements of the task eliminate most existing approaches from consideration. For instance, we could potentially generate a DBNDynamic
Belief Network (Kjærul, 1992)to represent the probabilistic distribution over the plan
variables. To do so, we include nodes representing all of the plan variables,
representing

done(X; t).

Xt ,

as well as

The links among these nodes represent the structure of the plan

hierarchy (e.g., parent-child relationships, temporal constraints), and we can ll in the conditional probability tables accordingly. We also represent the temporal progress of the team
by including nodes for the variables at the next time slice,
nodes to the

Xt+1

on those links.

Xt+1 .

We add links from the

Xt

nodes and represent the dynamics in the conditional probability tables

For each transition from a node

Xt

to a node

Yt+1 (X

6= Y ), we would

also add binary nodes indicating the observation of a message along that transition. Thus,
for a plan hierarchy with

O (4M

M

plan nodes, the corresponding DBN representation will have

+ M 2 ) = O(M 2 ) binary random variables.

The standard DBN inference algorithms maintain a belief state,
posterior probability distribution over the variables in time slice,

t,

bt ,

representing the

conditioned on all of

the observations made so far (from time 0t). These inference algorithms can update the

92

Monitoring Teams by Overhearing
belief state to incorporate new evidence about any variables,
the next time-tick's belief state,

bt+1 .

Xt ,

and they can also compute

We can extract the desired probability over plan-

state variables by examining the posterior probabilities stored in

bt .

Given the dependency

structure of our plan model, the space and time complexity of performing inference using
M 2 for a
this DBN (either incorporating a single observation, or computing bt+1 ) is O

(2 )

single agent.
This DBN method is not suciently ecient to support on-line monitoring in real-world
domains, since on each and every time step, the recognizer must perform an inferential
step of exponential computational complexity.

There exist

single-agent

plan-recognition

techniques that avoid the exponential complexity of DBNs by using a representation and
inference algorithms aimed at the particular properties of the plan-recognition task (e.g.,
Pynadath & Wellman, 2000).

Such specialized representations avoid the full generality

of DBNs, while still capturing a broad class of interesting planning agent models.

Given

a specialized representation, the single-agent plan-recognition algorithms can exploit the
particular structure of the plan models to achieve ecient online inference.
Drawing our inspiration from the success of this work in single-agent domains, we adopt
a similar methodology in our multi-agent domain.

In other words, we have developed a

novel plan-recognition representation more suited to capturing team-oriented programs. The
structural assumptions we make in this representation support ecient inference with our
specialized algorithms, as well as more naturally supporting an extension to represent interagent dependencies (as discussed in Section 4).
We represent the team-oriented plan as a directed graph, whose vertices are plans, and
whose edges signify temporal and hierarchical decomposition transitions between plans:
Children edges denote hierarchical decomposition of a plan into sub-plans.

Sibling edges

denote temporal orderings between plans. Following the structure of the plan hierarchy, the
variables

fXt g form a directed connected graph, such that each node Xt has at most one

hierarchical-decomposition incoming transition from a parent node (representing its parent
plan), and any number of temporal incoming transitions from plans that precede it in order

of execution. The graph may contain multiple nodes for a single plan, if the plan is the potential child of multiple parent plans. The node may have any number of temporal outgoing
transitions to immediate successor sibling nodes (representing plans that may follow it in
order of execution), and any number of hierarchical-decomposition outgoing transitions to
the node's
plan

Xt .

rst

children (i.e., those that will be executed rst by a decomposition of the

The graph forms a tree along hierarchical decomposition transitions, so that no

plan can have itself as a descendent. On the other hand, there may be cycles along temporal
transitions (to siblings). In other words, a plan may have an outgoing temporal transition
to itself (meaning that it can be selected for execution again upon termination), or to a
node that has a temporal path leading back to the plan (meaning that it is the rst node
in a temporal sequence of plans that may be executed repeatedly). It may also have two
alternative temporal paths leading indirectly from one node to another.
To perform inference with this representation, we borrow the standard DBN inference
algorithms' notion of a belief state,

bt .

As in the DBN case, the belief state represents the

posterior probability distribution over the variables in time slice, t, conditioned on all of the
observations made so far. In addition, for each plan, we distinguish between a state of actual
execution and a

blocked

state, indicating that execution has terminated, but execution of

93

Kaminka, Pynadath, & Tambe
a successor has not yet begun (perhaps because the agent is in the process of sending a
message).

bt (X; block )

Thus,

is our belief that

X

has terminated, but the agent has not

bt (X; :block ) is then our belief at time t that the monitored
X , which has not yet terminated. More precisely, we dene
Pr(Xt ; done(X; t + 1)jE ) and bt (X; :block)  Pr(Xt ; :done(X; t + 1)jE ),

begun execution of a successor;
agent is currently executing


E again denotes all of the evidence we have received so far. If the recognizer observes

bt (X; block )
where

a message from an agent at time

t,

it updates its previous belief state,

bt+1 ,

the evidence into its new belief state,

bt+1 ,

by incorporating

according to the method described in Section

3.2. If it does not observe a message from an agent at time
new belief state,

bt ,

t,

it propagates belief into its

using the method described in Section 3.3 to simulate plan execution

over time.

3.2 Belief Update with Observed Message
While observing team communications, the recognizer can expect to occasionally receive
evidence in the form of messages (sent by an individual agent member) that identify either
plan initiation or termination.

In incorporating this evidence, we exploit the assumption

that the agents are truthful in their messages. In other words, if we observe an initiation
message for a plan,

X,

at time

t,

a termination message for a plan,

then

X,

Xt

is true with certainty.

at time

t,

then

Likewise, if we observe

done(X; t + 1)

is true with certainty.

More precisely, the algorithms presented in this section are specialized to exploit the prop-


, either Pr(Xt j
; E ) = 1 or
Pr(done(X; t)j
; E ) = 1, for any possible previously observed evidence, E .
erty of observed communications, where for any observation

Though messages are assumed truthful, there still remains ambiguity.
message uniquely species the relevant

First, while a

plan, it does not uniquely specify the relevant node.

In other words, the recognizer is still unsure about which particular
refers to, since the graph may contain multiple

Xt

Xt

node the message

nodes consistent with the message. Fur-

thermore, when a message announces termination of a plan (even with no ambiguity about
the corresponding node), there still remains ambiguity about the next plan selected by the
agent.
The observations available in the overhearing tasks of immediate interest to us fall into
this level of ambiguity. In our evacuation scenario example, there are two nodes corresponding to the plan

land-troops,

because there is one instance of

land-troops

for picking up

the people to be transported and another for dropping them o. If the recognizer observes
a message indicating that an agent has initiated execution of

land-troops,

then there is

ambiguity about which of the two instances is currently relevant. Furthermore, there may
exist ambiguity about which plan the agent will select after terminating

land-troops.

Algorithm 1 presents the pseudo-code for the complete procedure for incorporating evidence from observations.

Incorporating Evidence of an Observed Initiation Message (lines 38)

Suppose

t, we have observed a message, msg, that corresponds to initiation. If only one
X , is consistent with msg, then we know, with certainty, that the agent is executing X ,

that, at time
plan,

regardless of whatever evidence we have previously observed. Therefore, we can simply set
our belief that

Xt

is true to be 1.0. If multiple plans are consistent with

msg, we distribute

the unit probability over each consistent plan, weighted by our prior belief in seeing the given

94

Monitoring Teams by Overhearing
Algorithm 1 Incorporate-Evidence(msg m, beliefs b, plans M )
0
1: Initialize distributions b ; bt+1
0:0 for all plans in M
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:

plans X 2 M consistent with m do
m is an initiation message then
for all plans W that precede X do
b0 (X; :block )
b0 (X; :block ) + bt (W; block )wx wx
else {m is a termination message}
for all plans Y 2 M that succeed X do
b0 (Y; :block )
b0 (Y; :block ) + bt (X; block )xy xy
Normalize distribution b0
for all plans X 2 M with b0 > 0 do
bt+1 (X; :block )
b0 (X; :block )
(X; b0(X; :block ); b; M )
tmp
X
while parent(tmp) 6= null do
bt+1 (parent(tmp); :block )
bt+1 (parent(tmp); :block ) + bt+1 (tmp; :block )
tmp
parent(tmp)
for all
if

Propagate-Down

message. This prior belief depends on all predecessor plans of

X

that may have terminated

prior to seeing this message.
To support the computation of the beliefs over transitions from predecessor plans to
successors, as well as the beliefs of seeing a message for a given transition, Overseer stores
two parameters:



and

.

The former is the probability of entering a successor plan,

given that predecessor plan,

W,

has just completed:

wx

X,

 Pr(Xt jWt; done(W; t + 1)).
+1

The latter is the probability of seeing a message, given that the agent took the specied
transition:

wx

 Pr(msgt jWt ; done(W; t + 1); Xt ).
+1

We can use previous runs to acquire

 and , by producing a frequency count over transitions
runs (see Section 4.2 for more discussion of the use of  in

suitable values for these parameters,
and messages seen during those
Overseer).

msg, at time t, we wish to
distribute the unit probability over all plans, X , (in the unblocked state) that are consistent
with msg. We can derive our new belief in plan X at time t + 1 as follows:
Therefore, given the observation of an initiation message,

msg; Xt+1 jE )
Pr(Xt+1 jmsg; E ) = Pr(Pr(
msg jE )
The denominator is simply a normalization factor, and it is the same for all candidate plans,

X.

Therefore, we ignore it in this derivation, and focus on only the numerator, which we

X Pr(
X
+ Pr(

can expand over all possible predecessor plans,

/

W,

and possible termination states of

msg; Xt+1 ; Wt ; done(W; t + 1)jE )

W

W

msg; Xt+1 ; Wt ; :done(W; t + 1)jE )

95

W:

Kaminka, Pynadath, & Tambe
The second term is 0, since we cannot proceed from

W

to

X

if

W

has

not

terminated.

In the second term, we can expand the joint probability into its component conditional
probabilities:

/

X[Pr(
W

msg jWt ; done(W; t + 1); Xt+1 ; E )

 Pr(Xt jWt; done(W; t + 1); E )
+1

 Pr(Wt ; done(W; t + 1)jE )]
We assume that the probability of sending a message and the distribution over plan transitions obey a Markov property, so that they are independent of the plan history before
time

t,

given the current plan at time

t.

Thus, the rst two conditional probabilities are

independent of our previous history of observations. The third is exactly our previous belief
that

W

is blocked:

/

X[Pr(
W

msg jWt ; done(W; t + 1); Xt+1 ) Pr(Xt+1 jWt ; done(W; t + 1))

 bt(W; block)]

X

The rst two conditional probabilities are exactly our parameters,

/

W



and

:

wx wx bt (W; block )

(1)

Lines 45 of Algorithm 1 perform exactly the derived summation of Equation 1 (the
normalization step is carried out on line 9 (see below). A similar procedure is followed when
a message is observed indicating the termination of
that the agent was executing
successor. Thus, for each of

X

(lines 68). In such a case, we know

X in the previous time step but that it has moved
X 's potential successor plans Y , we set our belief

on to some
in

Y

to be

proportional to a transition probability, similar to that for the initiation message:

msg; Yt+1 jE )
Pr(Yt+1 jmsg; E ) = Pr(Pr(
msg jE )
The denominator is again a normalization factor that we ignore. We can expand the numerator over possible states of

X 's

execution:

/ Pr(msg; Yt

+1

; Xt ; done(X; t + 1)jE )

+ Pr(msg; Yt+1 ; :Xt ; done(X; t + 1)jE )
+ Pr(msg; Yt+1 ; Xt ; :done(X; t + 1)jE )
+ Pr(msg; Yt+1 ; :Xt ; :done(X; t + 1)jE )
96

Monitoring Teams by Overhearing
Only the rst term is nonzero, since the others correspond to states of execution that are
inconsistent with the observed message:

/ Pr(msg; Yt

+1

; Xt ; done(X; t + 1)jE )

We can rewrite this joint probability as a product of conditional probabilities:

/ Pr(msgjXt ; done(X; t + 1); Yt ; E )
 Pr(Yt jXt ; done(X; t + 1); E )
 Pr(Xt ; done(X; t + 1)jE )
+1

+1

We again use our Markovian assumptions to simplify the conditional probabilities, and we
rewrite the third probability using our belief state:

/ Pr(msgjXt ; done(X; t + 1); Yt ) Pr(Yt jXt ; done(X; t + 1))
 bt (X; block)
+1

+1

Finally, we rewrite the rst two conditional probabilities using our parameters,



and

/xy xy bt (X; block)

:
(2)

Lines 78 of Algorithm 1 perform exactly the derived summation of Equation 2.

Normalization of the sum (line 9).

Line 9 normalizes the sum to recapture a well-

formed probability distribution. Note that the normalization step must take into account
the fact that evidence may be incorporated for plan steps where one is an ancestor of
anotherin which case the evidence for the ancestor plan is probabilistically redundant.
The more specic evidence (for the descendent plan) will be more useful for visualization,
as it is more accurate.

Propagation of Evidence (lines 1016)

Finally, the recalculated beliefs are set (line

11) and then the changes are recursively propagated down the decomposition hierarchy to
the plan's children (line 12), via the call to Algorithm 2. In addition, the recalculated beliefs
are propagated up to the plan's ancestors in the decomposition hierarchy (lines 1316), since
evidence of a child plan being active is evidence of its parent being active as well. We assume
here that we have no knowledge about the relative likelihood of the child plans, so we treat
each as equally likely.

If we had additional knowledge about these likelihoods, we could

easily exploit it in our Propagate-Down algorithm.

Algorithm 2 Propagate-Down(plan Y , probability , beliefs b, plans M )
1:
2:
3:
4:
5:

fc j c 2 M; c rst child of Y g
= j C j
for all plans c 2 C do
bt (Y; :block )
bt (Y; :block ) + 0
C
0

+1

+1

Propagate-Down(c; 0; b; M )

97

Kaminka, Pynadath, & Tambe
3.3 Belief Update with No Observation
In overhearing tasks, there is a great deal of uncertainty about when agents complete the
execution of their plan steps, since agents do not necessarily send messages upon every
termination or initiation of a plan. Therefore, if no messages are observed at time t, then the

t +1 must be calculated based on the possibility that the agents may

system's beliefs for time

have initiated or terminated plans without sending any messages. To support the necessary
belief update, we need a model of plan execution that provides us with a probability of plan
termination over time (i.e.,

Pr(done(X; t))).

In principle, this probability distribution can

be arbitrarily complex, and its structure may vary enormously from domain to domain, and
even from plan to plan within the same domain. In some domains, obtaining an accurate
model of this distribution requires complex knowledge acquisition from domain experts or
else a complex learning process on the part of the agent. In addition, an accurate model
may be too complex to support ecient online inference.
Overseer instead uses a temporal model that supports both ecient inference and

simple parameter estimation procedures. Overseer models the duration of a (leaf ) plan,

X , as an exponential random variable. In other words, the probability of the plan completing
 time units increases as 1 e X . The single parameter, X , corresponds
to 1/(mean duration of X ), which we can easily acquire from domain experts or previous
execution within

runs. As for inference, the exponential random variable has a Markovian property, in that
the probability of the plan's completion between times

t

Pr(done(X; t + 1)jXt )  1
independent

of how long the agent has been executing

and

t+1

is

e x ;

X

before time t. This strong assump-

tion may not fully hold in some real-world domains, but it is often a good approximation.
Also, the error associated with this approximation may be acceptable, given the enormous
gain in inferential eciency (as we show in the remainder of this section).
These eciency gains manifest themselves when Overseer rolls the model forward
in time to compute its belief state for the next time slice. Given the exponential random
variable as a model of plan duration, the probability of completion of a leaf plan is a constant,

1

e x ,

for each plan

X.

For plans with children, the probability of completion is exactly

the probability of completion of its last child (according to the temporal ordering of the
children).
Having computed the probability of plan termination, Overseer then evaluates which
plan the agent may execute next. It examines the possible successors and, for each, computes the probability of taking the corresponding transition, conditioned on the fact that no

1

xy ),

message was observed (

and on the prior probability of taking this message (xy ).

Again, as mentioned in Section 3.2, Overseer makes a Markovian assumption that the
plan history before time

t

does not aect the likelihood of the various transitions. Given

this assumption, it can combine the two parameters,

98



and

,

to get the desired conditional

Monitoring Teams by Overhearing
probability of the transition, given that we observed no message:

Pr(Yt+1 jXt ; done(X; t + 1); :msgt )
(X; t + 1); Yt+1 ) Pr(Yt+1 jXt ; done(X; t + 1))
= Pr(:msgt jXt ; done
Pr(:msgt jXt ; done(X; t + 1))
(1 xy )xy
=
Pr(:msgt jXt ; done(X; t + 1); Zt+1 ) Pr(Zt+1 jXt ; done(X; t + 1))

X
(1
=X
(1
Z

Z

= (1

xy )xy

xz )xz

xy )xy
X

(3)

The normalizing denominator,
sors,

Y,

X ,

is the sum of the numerator over all possible succes-

which we can pre-compute o-line. We can use the value of

likelihood that the agent will send a message upon terminating plan
special case when

X

require

X

= 0, Equation 3 is not well-dened, as all

X to determine
X at time t. In

the
the

possible transitions from

a message. In this case, the agent cannot have begun execution of any successor,

even though it has completed execution of

X . X

our belief that the agent is no longer executing
message (i.e., it is in a blocked state).
agent is executing one of

X 's

is therefore the probability mass signifying

X

at time

t + 1,

and is not waiting for a

In other words, it is our increased belief that the

immediate successors at time

t + 1,

given that we have seen

no message.
Algorithm 3 presents the pseudo-code for the process of propagating the probabilities
forward in time when a message is not observed. First, it initializes all the values to 0 (lines
15).

The process continues by going over all plans

X

2 M,

in post-order we

explore

children plans (i.e., plans reachable by hierarchical decomposition transitions) before their
parents, and sibling plans in order of execution. For each plan, the algorithm executes four
stages: (1) It determines the plan's outgoing probabilities (lines 710); (2) it determines

x ,

the outgoing probability mass that is propagated along the outgoing temporal transitions
without being blocked by waiting for a message (lines 1112); (3) it propagates

x

along

the non-blocked temporal outgoing transitions (lines 1320); and nally (4) it computes our
belief that the agent will execute the plan at the next time-tick

bt+1 (X; :block )

or will be

blocking (lines 2122). The remainder of this section explains these four stages in detail.

Calculating the outgoing probability outx (lines 710).

outx

In Algorithm 3, the variable

represents the total temporal outgoing probability from plan,

X,

given our belief that

X at time t. If a plan X is a leaf, then we derive its temporal
outx , from the temporal model discussed previously, given our belief
that the agent is currently executing X (lines 78). If X is a parent, lines 910 are, in fact,
redundant: They serve only to remind the reader that for a parent, Y , outy follows from
Y 's children when they execute line 20. This depends critically on the post-order traversal
of the plan-hierarchy: the outgoing probability of a parent Y is derived from the outgoing
the agent was executing
outgoing probability,

probabilities of its last hierarchical-decomposition children, and thus all children's outgoing
probabilities must be calculated before their parents'.

99

Kaminka, Pynadath, & Tambe
Algorithm 3 Propagate-Forward(beliefs b, plans M )
plans X 2 M do
bt+1 (X; :block )
0:0
bt+1 (X; block )
0:0
outx
0:0
x
0:0
for all plans X 2 M in post-order
for all

1:
2:
3:
4:
5:
6:

if

7:
8:

X is a leaf

bt (X; :block )(1

outx

else

9:

then

{X is a parent}

do

{children in temporal order before parents}

e x ) {calculate probability of X terminating at time t}

outx is known { because post-order guarantees all children set it in line 20}
for all temporal outgoing transitions Tx!y from X do
x
x + (1 xy )xy
if x > 0 then {some transition can be taken}
for all temporal outgoing transitions Tx!y from X do

outx (1 xy )xy
if Tx!y leads to a successor plan Y then
bt+1 (Y; :block )
bt+1 (Y; :block ) + 
(Y; ; b; M )
else {Tx!y is a terminating transition}
outparent(x)
outparent(x) + (1 xy )xy {parent's outgoing probability is its chil-

10:
11:
12:
13:
14:
15:
16:
17:

Propagate-Down

18:
19:
20:

dren's}

bt+1 (X; block )
bt+1 (X; block ) + outx x
bt+1 (X; :block )
bt+1 (X; :block ) outx

21:
22:

Determining the non-blocked outgoing probability x (lines 1112).
ability,

x

is the sum over all possible values of the numerator in Equation 3 (i.e., over all

temporal outgoing transitions originating in
in line 21,

X;

The prob-

x

X ),

as illustrated in the derivation. As we see

is critical for calculating the belief that the agent has terminated execution of

but has not yet begun execution of a successor (i.e., the belief

bt+1 (X; block )

that the

agent is blocking).

Propagating x along temporal outgoing transitions (lines 1320).
key component in the propagation. For every temporal outgoing transition
seer calculates

,

This is the

Tx!y ,

Overseer's belief in the joint event of (i) the agent having completed execution of

the agent taking the transition

TX !Y ,

observable message. The calculation of



X,

(ii)

and (iii) the agent doing so without sending out an



is derived as follows:

= Probability that X is done ^ no message was observed ^ agent chose Tx!y
= Pr(done(X; t)jXt ) Pr(:msgjXt ; done(X; t)) Pr(Yt+1 jXt ; done(X; t); :msgt )
= outx  x  (1 xy )xy
x
= outx  (1 xy )xy
(4)

If the transition

Y 's

Over-

a temporary variable that holds the probability mass corresponding to

Tx!y

future state (at time

leads to a successor plan

t

+ 1)

Y

(lines 1618), then

as temporal incoming probability.



is added to

Since decomposition

is assumed to be immediate, this incoming probability is propagated (added) to

100

Y 's

rst

Monitoring Teams by Overhearing
children (Algorithm 2). If there are multiple rst children, then they denote alternative plan
decompositions for a single agent, and we compute the probability over them by dividing
the probability incoming to the parent among them. If any children have rst child plans
of their own, we distribute this new incoming probability in turn, using the same method.
Only in the next time-step does the algorithm propagate from rst children to the next
child, in order of execution.

The reason for this is that we assume that all plans take at

least a single time step to complete.

Tx!y

X has
 is added to X 's parent's outgoing probability outparent(x) so that it may be used when propagating parent(x)'s temporal
If the transition

is the special-case termination transition (line 1920), then

no successors. In this case, the outgoing temporal probability

outgoing probability along its own temporal outgoing transitions. Note again that the postorder traversal of the plan-hierarchy guarantees that all children are explored before their
parents, thus

outparent(x)

is fully computed by the time the algorithm reaches

parent(x).

Computing X 's new blocked and non-blocked probabilities (lines 2122).
that the outgoing probability mass has been propagated to

X 's

only steps remaining involve re-calculation of Overseer's belief in

X 's

blocked and non-

blocked states. The total temporal outgoing probability (whether blocked or not) is
must be subtracted from future belief that the agent is executing
that left

outx

bt (X; :block )

x .

Now

children and siblings, the

X.

outx ;

it

The probability mass

but is blocking on a message that was not observed by Overseer is

It is added to

X 's

future blocked state.

3.4 Discussion
The overhearing approach outlined in this section maintains a separate plan-recognition
mechanism for each agent, ignoring any inter-agent dependencies. Using an array of individual models (Figure 3) that are updated with the passage of time, or as messages are
observed, the state of a team is taken to be the combination of the most likely state of each
individual agent. Algorithm 4 embodies this approach: It is called every time tick, collects
all messages that are observed, and updates the state of the agents.
EVACUATE [TASK FORCE]

PROCESS
ORDERS
[TASK FORCE]

.....

EXECUTE
MISSION
[TASK FORCE]

PROCESS
ORDERS
[TASK FORCE]
LANDING
ZONE
MANEUVERS
[FLIGHT TEAM]

FLY-FLIGHT
PLAN
GET
ORDERS
[FLIGHT TEAM]
[GET ORDERS]
FLY-CONTROL
ROUTE....
[FLIGHT TEAM]

EVACUATE [TASK FORCE]

LANDING
ZONE
MANEUVERS
[FLIGHT TEAM]

FLY-FLIGHT
PLAN
GET
ORDERS
[FLIGHT TEAM]
[GET ORDERS]

....

FLY-CONTROL
ROUTE....
[FLIGHT TEAM]

ESCORT
TRANSPORT
OPERATIONS OPERATIONS
[ESCORT]
[TRANSPORT]

.....

EXECUTE
MISSION
[TASK FORCE]

....
ESCORT
TRANSPORT
OPERATIONS OPERATIONS
[ESCORT]
[TRANSPORT]

Figure 3: Array of single-agent recognizersone for each agent.
As an illustration of the operation of this algorithm, consider the example domain of
the evacuation scenario. Overseer begins with a belief that the agent is executing its top-

Process-Orders) at time 0 (i.e., b0 (Evacuate; :block ) = 1:0,
b0 (P rocessOrders; :block ) = 1:0). If Overseer observes a message about the initiation of
Fly-Flight-Plan by one of the helicopters, then it applies Incorporate-Evidence (Algolevel plan (and its rst child,

101

Kaminka, Pynadath, & Tambe
Algorithm 4 Array-Overseer(beliefs b, plan-hierarchy
1:
2:
3:
4:
5:

Agents a 2 A do
if A message ma from a was observed then
Incorporate-Evidence(ma; b; M [a])
else {No message was sent by a }
Propogate-Forward(b; M [a])

array

M [],

agents

A)

for all

rithm 1). From the plan-hierarchy (Figure 1b) it is known that

Process-Orders cannot be a

possible current or future plan of the agent, and that the helicopter in question is executing

Fly-Flight-Plan,

i.e.,

bt (P rocessOrders; :block ) = 0, bt (F lyF lightP lan; :block ) = 1:0.
Fly-Flight-Plan's rst children, of which there is

This probability mass is propagated to

one, and thus the belief in this child is set to 1.0 as well.
After some time passes and no message is observed, there is uncertainty as to whether

Fly-Flight-Plan

Landing-Zone-Maneuvers are active, as both are possible future
states, and the duration of Fly-Flight-Plan is uncertain. Overseer would still assign
a probability of 1.0 to the top-level plan Evacuate. However, some probability mass from
Fly-Flight-Plan would be propagated every time-tick to Landing-Zone-Maneuvers by
and

Propagate-Forward (Algorithm 3). For each such propagation, the incoming temporal

probability mass being added to the belief in the execution of

Landing-Zone-Maneuvers

would be propagated to its rst children immediately. Assuming that the helicopter agent
is free to select either

Transport-Operations

or

Escort-Operations,

the incoming proba-

bility would be split evenly and added to the prior belief in each of the two rst children.
In the same temporal propagation step, any outgoing belief from these rst children would
be propagated via their own outgoing temporal transitions.
The inference procedure described by Algorithms 14 exploits the particular structure of
our representation in ways that more general existing algorithms cannot. The pseudo-code
demonstrates that for a single monitored agent, both types of belief updates have a time
complexity

linear

M,
O (M N ).

in the number of plans and transitions in

agents, the space and time complexity of Algorithm 4 is

i.e.,

O (M ).

Thus for

N

We gain this eciency (compared to an approach such as DBN) from two sources. First,
we make a Markovian assumption that the probability of observing a message depends on
only the relevant plan being active, independently of execution history. With this assumption, we can incorporate evidence, based on only our beliefs at time

t.

Second, we make

another Markovian assumption in the temporal model, allowing our propagation algorithm
to reason forward to time

t

+1

based on only our beliefs at time

t,

without regard for

previous history.

4. Monitoring a Team by Overhearing
The previous section has outlined an ecient plan-recognition mechanism that is particularly
suitable for monitoring a single agent based on its communications. Monitoring a team was
achieved by monitoring each member of the team independently of the others. Unfortunately,
although the time complexity of this approach is acceptable, its monitoring (recognition)
results are poor.

The evaluation in Section 6.1 provides more details, but, in short, the

average accuracy using this approach over all experiments was

102

less than 4%.

Monitoring Teams by Overhearing
The main cause for this low accuracy is the scarcity of observations, one of the identifying
characteristics of monitoring by overhearing. As previously discussed, agents often switch
their state unobservably (i.e., without sending a message). Therefore, the monitoring system
critically needs to estimate correctly the times at which agents switch state.

Since some

agents rarely communicate (i.e., there are very few observations about them), variance in
their temporal behavior (with respect to the system's predictions) tends to cause large errors
in monitoring.
To address this issue, we bring back for discussion the agent independence assumption
which we have made in the previous section. After all, team-members do not communicate
independently of each other:

Communication in a team is an action that is intended to

change the state of a listener (Cohen & Levesque, 1990).
message may still change their state upon

receiving

Agents that only rarely

a message.

send

a

In other words, although

observed messages are used in the previous section to update the belief in the state of
the sender, they could also be used to update the state of any listeners.

To do this, the

monitoring system must know about the relationships between the team-members.
Knowledge of the social structures enables additional sophisticated forms of monitoring.
For instance, in order to maintain their social structures, team-members communicate with
each other predictably, during particular points in the execution of a task. Such predictions
of future observable behaviorcommunicationscan be used to further reduce the uncertainty. However, it is often the case that while it can be dicult to correctly predict that
a specic agent will communicate at a specic point in task execution, it is easy to predict
that some team-member will. Knowledge of the procedures employed by a team to maintain
its social structures can be very useful allows a monitoring system to make such predictions.
To reason about the eects of communications on receivers, and about future observable behavior of team-members, a monitoring system must utilize knowledge of the social structures and social procedures used by team-members to maintain these structures.
Such exploitation of social knowledge for monitoring is called Socially-Attentive Monitoring
(Kaminka & Tambe, 2000). This section discusses these concepts in detail.

4.1 Exploiting Social Structures
While computationally cheap, the approach described earlier proved insucient in the evacuation domain.

In monitoring by overhearing tasks, the monitoring system must address

scarce observations, as agents rarely communicate all at the same time. Indeed, in the evacuation application, only a single message was observed (on average) for every 20 combined
individual state changes.
Under such challenging conditions, a system for monitoring by overhearing must come
to rely extensively on its ability to estimate when agents change their internal state without sending a message.

The representation presented earlier used a simple, but ecient,

temporal model to do this, based on the estimated average duration of plans. However, we
have found high variance in the actual duration of plan execution, compared to the duration
predicted by the average-duration model:



Plan execution times vary depending on the

external environment.

For instance, when

all the agents in the team are running on a local network, their response times to queries

103

Kaminka, Pynadath, & Tambe
may be shorter than when communicating across continents. Indeed, latency times in
the Internet vary greatly, and are dicult to predict.



Plan execution times vary depending on
instance, the

traveling

when a plan-step is executed internally.

For

plans, used repeatedly within the given evacuation team-

oriented program, take anywhere from 15 seconds to almost two minutes to execute,
depending on the particular route being followed.



Plan execution times vary depending on

the outcome of a plan-step.

For instance, when

the route-planner is functioning correctly, it responds within a few seconds. However,
when it crashes it does not return an answer at all, and the other agents wait for a
relatively long time before relying on a time-out to decide that it had failed.

This problem can be addressed in principle by a more expressive model of execution duration,
for instance taking into account the internal execution context. However, in practice, such
a model would likely be much more expensive computationally, as it would need to rely
on knowledge of previous and future steps, breaking the Markovian assumption (e.g., to
determine duration based on

when a plan-step is executed,

an improved temporal model

would have to reason about the likelihood that a given instance of the plan-step is the
second instance, as opposed to a third). As applications grow in scale in the real world, an
increasingly more complex temporal model would have to be continuously rened to cover
the increasingly complex temporal behavior of agents.

Fortunately, a temporal model is

only one way in which a monitoring system can estimate the times in which agents change
their internal state unobservedly.
An alternative method for estimating unobserved state changes is to utilize known dependencies between agents to exploit evidence about the state of one agent to infer the state
of another. In particular, it is often true in team settings that one agent would send a message

intending

to aect the state of all its receivers in a particular way. Thus in principle,

under the assumption that the receivers do change their state predictably, an observation
of such a message can be used as evidence in the inference of the sender's state, as well as
all receivers', i.e., the state of all team-members. We can trade the agent independence assumption made earlier with an assumption of successful coordination. This is a reasonable
assumption in team settings, given that agents are actively attempting to maintain their
teamwork with such communications (Tambe, 1997; Kumar et

al., 2000; Dunin-Keplicz &

Verbrugge, 2001).
The eects of a message on a receiver are dependent on the relationship between the
sender and the receiver (where we take such a relationship to be described by a mathematical
relation between the possible states of the sender and the receiver). In principle, such relationships underly

social structures structures of interactions between agents that make the

decisions of one team-member dependent, to some predictable degree, on those of its teammates. Using knowledge of these dependencies, a monitoring agent may use observations of
a communication action by an agent to infer the possible state of another.
One simple example of such a structure is common in many teams (e.g., Jennings, 1993;
Kinny, Ljungberg, Rao, Sonenberg, Tidhar, & Werner, 1992), and indeed is present also
in our application:

roles

that govern which team-members undertake what tasks in service

104

Monitoring Teams by Overhearing
of the team goal. Such roles ideally bias the decision mechanism of the team-members towards making decisions that are appropriate for their roles. Thus knowledge of the roles of
team-members can be useful to counter the uncertainty faced by a monitoring agent. For
instance, suppose the monitoring agent knows that in the evacuation application, a particular team-member is to choose

Landing-Zone-Maneuvers

Transport-Ops,

rather than

Escort-Ops,

as a child of

(because the team-member belongs to the TRANSPORT team,

rather than the ESCORT team). This knowledge can reduce the uncertainty the monitoring agent hasunder the assumption that the team-member did not incorrectly choose an

inappropriate

plan for its role. Overseer in fact uses knowledge of roles in such a manner

to alleviate uncertainty. This monitoring use of role information has been used in previous
work (Tambe, 1996; Intille & Bobick, 1999), discussed in Section 7.
However, a much more important social structure exists in teams. Agents in teams work

together, as team-member are ideally in agreement

about their joint goals and plans (Cohen

& Levesque, 1991; Levesque, Cohen, & Nunes, 1990; Jennings, 1995; Grosz & Kraus, 1996,
1999; Tambe, 1997; Rich & Sidner, 1997; Lesh, Rich, & Sidner, 1999; Kumar & Cohen,
2000; Kumar et al., 2000). This phenomenonsometimes called

team coherence

(Kaminka

& Tambe, 2000)holds at dierent levels in the team. Agents in an atomic subteam work
together on the plans selected for the subteam, subteams work together with sibling subteams
on higher level joint plans, etc. Individual agents may still choose their own execution, but
they do so in service of agreed-upon joint plans. Provided the monitoring agent knows what
plans are to be jointly executed by which subteams, and what transitions are to be taken
together by which subteams, it can use coherence as a heuristic, preferring hypotheses in
which team-members are in agreement about their joint plans, over hypotheses in which
they are in disagreement.
For example, suppose that the entire team is known to be executing

Fly-Flight-Plan

(Figure 1-b). Now, a message from one member of the TRANSPORT subteam is observed,
indicating that it has begun execution of the

Transport-Ops plan step.

Since this plan step

is to be jointly executed by all members of the TRANSPORT subteam (and only them),
we can use coherence to prefer the hypothesis that the other subteam members have also

Transport-Ops. Furthermore, since this plan-step is in service of the
Landing-Zone-Maneuvers plan, which is to be jointly executed by the TRANSPORT and
initiated execution of

ESCORT subteams, we can prefer the coherent hypothesis that team-members of ESCORT
are executing

Landing-Zone-Maneuvers.

Now, based on their known role, we can now come

back down the plan-hierarchy and infer that members of the ESCORT subteam are executing

Escort-Ops,

etc.

This knowledge of the expected relationships, and in particular knowledge of which plans
are joint to team-members (i.e., are subject to coherence), is part of the specication of a
distributed applicationand can thus be provided to an overhearing system by the designer
or operator. In fact, it is often readily available, since it is used by the agents themselves
in their coordination.

For instance, we have earlier discussed the assumption that team-

oriented programs are available to the monitoring agent, and that these hold knowledge
about what plans in the hierarchy are to be executed by which (sub)teams is encoded in the
plan-hierarchy. The team hierarchy contains the knowledge about what subteam/agent is
part of another subteam.

105

Kaminka, Pynadath, & Tambe
Coherence can be a very powerful heuristic. It assumes non-failing cases, where teammembers successfully maintain their joint execution of particular plans. Under this assumption, evidence about a decision made by one team-member inuences (through coherence),
our belief of what its team-mates have decided. And lacking such evidence, coherence prefers
hypotheses in which at least the team-members have made joint decisions. For instance, suppose a transition from a team plan is to be taken only by the TRANSPORT team. Under
non-failure circumstances, there are only two coherent hypotheses considering this transition: Either all members of TRANSPORT took the transition, or none did. Evidence for
one member, supporting one of these hypotheses, can be used to infer the state of the other
members.
The signicance of this property of coherence is that if the monitoring system can reduce
the uncertainty for even one agent, then this reduction will be amplied through the use
of the coherence heuristic to apply to the other agents as well.

The use of the coherence

heuristic can thus lead to a signicant boost in monitoring accuracy, since the number of
hypotheses underlying any further (probabilistic) disambiguation is cut down dramatically.
Section 6.1 provides an in-depth evaluation of the use of coherence and knowledge of roles
to select plan recognition hypotheses in Overseer.
The use of coherence signicantly increases the time complexity of the computation.
At the very least, it requires setting inter-agent links in the array of plan recognizers used
by Overseer (Section 3.4), such that these links represent a probabilistic association between plans that are to be executed jointly (in contrast with the temporal and hierarchic
decomposition transitions used thus far). For instance, if a specic plan
jointly by agents

A

(representing agent

and

A's

B,

N

N

execution of a plan

X)

and the variable

O (M N 2 )

N (N
2

XtB

1)

(representing

M,

XtA
agent B 's

such inter-agent links be-

agents, for each one of the joint plans (of which there are at most

agents, and the array of recognizers

is of size

is to be executed

then such a link would be constructed between the variable

execution of the same plan). In general, there would be
tween

X

M [],

M ).

Thus given

where each individual agent's plan-hierarchy

the run-time complexity of an exact-inference algorithm would be at least

and quite likely much worse (since in general there is an exponential number of

coherent and non-coherent hypotheses to select from).

In the next section (Section 5.1),

we describe a highly scalable (in the number of agents) representation for reasoning about
coherent hypotheses.

4.2 Exploiting Procedures that Maintain Social Structures
A monitoring system can exploit knowledge of the procedures agents use to maintain their
social structures to alleviate some of the uncertainty resulting from the scarceness of observations. For instance, if the monitoring system could accurately predict

future observable

behavior of monitored agents, then while it has not observed the predicted behavior, the
monitoring system may infer that the agents have not reached the state associated with the
predicted behavior. Thus such predictions can be used to eliminate monitoring hypotheses,
by setting an individual agent's

XY

probabilities to reect a prediction that a message will

be transmitted by the agent as its execution of

X

terminates and it initiates

Y.

For instance,

in our own application, the Ariadne information agent is queried for possible threats before
each route is followed in the evacuation. It may therefore be possible to predict that before

106

Monitoring Teams by Overhearing
each route is taken by the helicopters, a message will be sent by the Ariadne agent to its
teammates; thus while no such message is observed, the Ariadne agent can be inferred to
have not yet executed this step. Furthermore, under the assumption of coherence (discussed
above), the monitoring system may further infer that all team-members have not yet executed this step, i.e., a new route was not taken by the team.

Such inference is obviously

dependent on the system's observational capabilities, but we have found it to be useful even
under lossy observations by the monitoring system (see Section 6.2).
However, in general, such specic individual predictions can be dicult to make. Teammembers are often engaged in joint tasks, which require many agents to tackle a problem
together. In these settings, predicting individual communications may be impossible. For
instance, consider a distributed search problem in which a target solution is to be found
somewhere in the search-space; dierent areas of the search space are divided amongst the
agents, with the understanding that the rst to nd the target will communicate with the
others. It would be dicult to accurately predict which one of the agents will communicate
(nd the target), since if we could predict that, we could focus all agents' eorts on that area
alone. Yet it is easy to predict that at least one agent will nd the target and communicate.
Similarly, in the evacuation application, it may be dicult to predict which helicopter will
reach the civilians rstbut it is easy to predict that one of them will, and will then
communicate their location.
Indeed, teams utilize

social procedures

or

conventions

(Jennings, 1993) by which team-

members maintain their relationships with one another. Removal of the agent independence
assumption allows the monitoring system to exploit knowledge of such procedures, by making predictions as to the behavior of team-members in coordinating with one another. For
instance, knowledge of the failure-recovery procedures used by a team to recover from coordination failures allows the monitoring system to predict the future behavior of team-members
in case of failed execution. Similarly, knowledge of the communication procedures used by
the team (as part of its team-members' coordination) allows predicting future observable
messagesfuture interactions between team-memberswithout necessarily specifying a particular individual agent that will carry them out.
For example, suppose Overseer overhears a message indicating that the ight team has

Fly-Flight-Plan (Figure 1-b). After some time has passed, it is
now possible that the team is either still executing Fly-Flight-Plan, or it has terminated
it already and begun joint execution of Landing-Zone-Maneuvers. However, if Overinitiated joint execution of

seer knows that at least one team-member will explicitly communicate after terminating

Fly-Flight-Plan and before initiating Landing-Zone-Maneuvers, then while such communications are not observed, the monitoring system can eliminate the possibility that the team
is executing the latter, eliminating any uncertainty in this case (only

Fly-Flight-Plan

is

possible).
We leave discussion of how technically a social procedure of the form at least one teammember will communicate when its subteam will take this transition from
converted into
team-wide



XY

X

to

Y

can be

values to the next section, where we present a technique for representing

probabilities in a way that allows ecient reasoning. In the remainder of this

section, we address instead how knowledge of such social procedures may be acquired.
Social procedures of communications may be simple per-case rules, or may involve
complex algorithms.

For instance, Jennings (1993) suggests using heuristic application-

107

Kaminka, Pynadath, & Tambe
dependent rules to determine communication decisions.

STEAM (Tambe, 1997) instead

uses a decision-theoretic procedure that considers the cost of communication and the cost
of miscoordination in the decision to communicate. Other procedures have been proposed
as well (e.g., Cohen & Levesque, 1991; Jennings, 1995; Rich & Sidner, 1997).

However,

regardless of their complexity, a key point is that a monitoring system does not necessarily
have to have full knowledge of these procedures in order to exploit them for predictions: it
only needs to approximate their outcome, since it can use a combination of techniques to
combat plan-recognition ambiguity, rather than relying just on one technique.
The decisions of social procedures can be acquired by learning from previous runs of
the system.

Although a detailed exploration of appropriate learning mechanisms is out-

side the scope of this paper, we provide a strict demonstration of the feasibility of learning
social procedures by simple rote-learning, which proved eective in generating a useful communications model that signicantly reduced the uncertainty in monitoring the evacuation
application.

This simple mechanism records during execution which plans are explicitly

communicated about, and whether they were initiated or terminated. The learned rules are
eective immediately, and are stored for future monitoring of the same task.
Figures 4ad present the results from using of this rote-learning mechanism in four
dierent runs on the same tasks.

The X-axis denotes observed communication message-

exchanges as the task progresses.

Overall, between 22 and 45 exchanges take place in a

run, each exchange including between one and a dozen broadcast messages in which agents
announce termination or initiation of a plan. The Y-axis shows the number of hypotheses
considered by Overseer after seeing each message, without using any probabilistic temporal
knowledge. Thus greater uncertainty about which hypothesis is correct would be reected
by higher values on the Y-axis. At the beginning of task execution, all possible plans are
considered possible, since we ignore temporal knowledge in this graph. As progress is made
on the task, less and less steps remain possible before the end is reached, and so we expect
to see a gradual (non-monotonic) decline as we move along the X-axis. A technique that
successfully eliminates hypotheses from considerations results in Y-axis values

lower

than

those of this baseline execution curve.
In Figure 4, the line marked

No Learning

shows this baseline (i.e., no predictions, and

with the learning component turned o ). The baseline shows that a relatively high level of
ambiguity exists, since the system cannot make any predictions about future states of the
agents, other than that they are possible. When the learning technique is applied on-line
(i.e., any message seen is immediately used for future predictions), some learned experience is
immediately useful, and ambiguity is reduced somewhat (the line marked

On-Line Learning ).

However, some exchanges are either encountered late during task execution, or are seen only
once. Those cannot be eectively used to reduce the ambiguity of the monitoring system on
the rst run. However, the third line (

After Learning )

presents the number of hypotheses

considered when a fully-learned model is used. Here, the model was learned on run G, then
applied without any modications in the other runs of the system. As can be seen, it shows
a signicantly reduction in the number of hypotheses considered by Overseer.

Further

evaluation of the use of communications predictions is presented in Sections 6.1 and 6.2;
however, a full exploration of the use of learning for this task is beyond the scope of this
paper.

108

Monitoring Teams by Overhearing

25

No learning
On-line learning
Using previously learned predictions

20

Number of Recognized Plans

Number of Recognized Plans

25

15
10
5
0

No learning
On-line learning
Using previously learned predictions

20
15
10
5
0

0

5

10
15
20
25
30
35
Observed Communication Exchanges

40

45

0

5

(a) Learning in experiment C

25

No learning
On-line learning
Using previously learned predictions

20

40

45

40

45

(b) Experiment E

Number of Recognized Plans

Number of Recognized Plans

25

10
15
20
25
30
35
Observed Communication Exchanges

15
10
5
0

No learning
On-line learning
Using previously learned predictions

20
15
10
5
0

0

5

10
15
20
25
30
35
Observed Communication Exchanges

40

45

0

(c) Experiment G

5

10
15
20
25
30
35
Observed Communication Exchanges

(d) Experiment I

Figure 4: Learning of communication decisions in dierent experiments.

109

Kaminka, Pynadath, & Tambe
4.3 Discussion
A key characteristic of monitoring by overhearing tasks is the scarcity of observations available to the monitoring system.

Fortunately, the observations available to the monitoring

system can often be viewed as observations of

multi-agent actions :

The sender of the message

not only changes its own state, but often also intends to change the state of the recipients
(Cohen & Levesque, 1990).

Thus even a single observation can be used as evidence for

inferring the state of both sender and receivers. This stands in contrast to previous work,
which addressed monitoring of multiple

single-agent

actions.

In monitoring a team, the monitoring system can use knowledge of social structures and
procedures to exploit information about the activities of one team-member, in hypothesizing about the activities of another team-member. These techniques are not specic to the
representation presented earlier. For instance, an increased belief in one agent's execution
of a plan

X

based on evidence for a teammate's execution of

X

can be also used by con-

structing appropriate probabilistic links between nodes representing these beliefs in a large
DBN representing the two agents. If we start with the DBN representation as discussed in
Section 3.1, we can replicate the single-agent network (containing

N

separate agents. The number of nodes is then

O (M N ),
2

M

plans) for each of the

since we represent the plans and

transitions for each individual agent. We can also introduce the appropriate inter-agent links
to capture the inter-agent dependencies represented by our model of teamwork. However,
upon introducing such links, the computational complexity of performing DBN inference
M 2N .
explodes to O

(2

)

Obviously, such social reasoning can be computationally expensive, even with the efcient representation described earlier.

The next section provides details of an ecient

mechanism for reasoning about a team using information about role and coherence, and utilizing communications predictions. Using this mechanism, the techniques described in this
section have resulted in an accuracy of up to 97% (84% average across all experiments)
compared to average 4% without the use of social knowledge. Sections 6.1 and 6.2 present
a detailed discussion of these results.

5. Plan-Recognition for Overhearing
The previous section has outlined socially-attentive monitoring techniques, alleviating the
uncertainty in monitoring a team of agents by exploiting knowledge of the social structures
and social procedures of the monitored team. It discussed using

nance

coherence

and

role mainte-

to exploit knowledge of the ideal agreement of agents that specic plans be executed

together, and that other specic plans are assigned to agents fullling their roles. Furthermore, it discussed disambiguation based on predictions of future observable behavior, based
on knowledge of the social procedures employed by team-members. These disambiguation
heuristics eliminate many (incorrect) hypotheses from being considered. However, reasoning
using these techniques can be computationally expensive.
This section presents an ecient algorithm, building on the representation previously
presented, which facilitates scalable monitoring by overhearing of large teams. The key idea
here is to represent only those hypotheses which the heuristics would have considered valid,
eliminating from consideration plans and transitions that would be considered illegal with
the heuristics. Relying on the team-hierarchy for bookeeping, all coherent hypotheses are

110

Monitoring Teams by Overhearing
represented using a single recognizer instead of an array of recognizers, oering considerable
scalability in team monitoring. However, since the algorithm can no longer represent certain
hypotheses, this scalability comes at the expense of expressivity.

We discuss the scalable

representation and the trade-o it oers below.

5.1 Ecient Reasoning with Team Coherence
Coherence is a very strong constraint, since for a team of agents there are only a linear
number (O

(M ) where M

is the size of the plan-hierarchy) of coherent hypotheses, but an

exponential number of incoherent hypotheses (O

(M N ) where N is the number of agents; the

proof is in Appendix A). We can exploit this property by designing monitoring algorithms
that reason only about the linear number of coherent hypotheses, and therefore oer better
scalability as the number of agents increases. Such algorithms may not be able to reason
about incoherent hypotheses, and are therefore less expressive. However, Section 6 demonstrates that the level of accuracy even with such limited expressiveness is sucient for our
purposes.

Furthermore, algorithms that reason only about coherent hypotheses may still

be able to detect incoherent hypotheses, representing a failure state in which two or more
team-members are in disagreement with each other.
We begin by presenting the YOYO* algorithm, an ecient technique for reasoning about
coherent hypotheses (Algorithm 5). YOYO* replaces the array-based algorithm described
earlier (Algorithm 4). Similarly to it, YOYO* is called every time tick.

If no message is

observed, the state of the entire team is propagated forward in time. Otherwise, all observed
messages are collected together and used as evidence for the (dierent) plans implied by these
messages.
YOYO*'s key novelty is that it relies on a

single

plan-hierarchy that is used to represent

all team-members together (regardless of their number), instead of an array of such structures. In other words, each variable
teams associated with

X

at time

t.

X

Xt

represents Overseer's belief that

all agents

in the

(as described in the team-oriented program) are executing the plan

Thus YOYO* makes extensive use of the information associating plans and

transitions in

M

with teams and subteams in

H,

the team-hierarchy. The team hierarchy

plays a critical bookeeping role in this respect, since it maintains the knowledge critical for
correctly applying coherence in the single recognizer.
This key distinction between YOYO* and the array-based approach causes a subtle,
but critical, dierence in the way probabilities are propagated along transitions. In a planhierarchy

M

of an individual agent, part of an array of such models, each outgoing transition

represented a hierarchical decomposition or temporal step that the agent is allowed to take.
Alternative outgoing transitions therefore represent alternative paths of execution available
to the agent.

On the other hand, in a plan-hierarchy

M

used by YOYO*, alternative

outgoing transitions tagged by dierent subteams (that are not ancestors of one another)
represent not a decision point for the agent, but alternative paths of execution as decided
by the agents' roles and team-memberships.
This creates a critical dierence in how the values of
Where previously (in Section 3) the value of
agent will take a transition

X

!

Y

xy

XY

and

XY

are to be interpreted.

referred to the probability that a specic

(given that it has terminated execution of

YOYO* it refers to the probability that an entire team will take the transition

111

X ),

in

together.

Kaminka, Pynadath, & Tambe

Algorithm 5 YOYO*(plan-hierarchy M , team-hierarchy H , beliefs b)
1:
2:
3:
4:
5:
6:
7:

8:
9:
10:
11:
12:
13:
14:

if

no new messages are observed then

Team-Propagate-Forward(b, M )

else

Initialize distributions b0 ; bt+1 0 for all plans U 2 M . ; Initialize I; E to be empty sets.
for all Messages mi do
I
I [ fX j X 2 M; mi is a an initiation message; X consistent with mi g
E
E [ fY j Y 2 M; mi is a termination message; Y consistent with mi g
plans X 2 I do
teammsg (X ) {T is the agent sending the message initiating X }
for all plans W 2 M that precede X , where the transition W ! X is allowed for T do
b0 (X; :block )
b0 (X; :block ) + bt (W; block )wx wx
for all plans X 2 E do
T
teamm sg (X ) {T is the agent sending the message terminating X }
for all plans Y 2 M; Y 2
= I that succeed X , where the transition X ! Y is allowed for T

for all

T

do

15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:

b0 (Y; :block )

b0 (X; :block ) + bt (X; block )xy xy
Normalize distribution b0 taking teams into account
for all plans X where b0 (X; :block ) > 0 do
bt+1 (X; :block )
b0 (X; :block )
(X; b0 (X; :block ); b; M )
T
team(X )
P
X
while parent(P ) 6= null do
bt+1 (parent(P ); :block )
bt+1 (P; :block )
if team(parent(P )) = parentteam (T ) then
(parent(P ); T; P; b)
T = parentteam (T )
P
parent(P )

Team-Propagate-Down

Scale

112

Monitoring Teams by Overhearing
YOYO* is unable to represent hypotheses in which some team-members take one transition,
and others do notunless these two dierent groups of members form dierent subteams
that are represented in the team-hierarchy, and the dierent transitions are tagged as being
allowed for the dierent subteams.
The value of

XY

is also interpreted dierently, in a very critical way.

Where in the

previous sections it was taken to represent the probability that a specic individual will
communicate when a transition
the probability that

X

!Y

is taken, in YOYO* its value represents instead

one or more team-members will communicate

when the transition is

taken by the team. Thus it no longer refers to individual agents, but to a (sub-)team. In
this way, YOYO* solves the issue of how to represent predictions of the type at least one
team-member will communicate when this step is reached, discussed previously.
For

example,

suppose

Landing-Zone-Maneuvers

YOYO*

sets

the

belief

that

the

is

executing

the

p. Landing-Zone-Maneuvers, in
Escort-Ops and Transport-Ops, to be executed by mem-

plan-step to some probability

YOYO*, has two (rst) children:

bers of th ESCORT and TRANSPORT subteams, respectively.
agent case, the probability

team

p

Unlike in the individual

should not be divided among these two children, but should

be duplicated to them: A belief that the entire team is executing

Landing-Zone-Maneuvers
Transport-Ops,

implies an equally-likely belief that the TRANSPORT subteam is executing
and that the ESCORT subteam is executing

Escort-Ops.

We explain YOYO*'s operation

in detail below:

No message is observed (lines 12).

Since no observations are available, the state of the

entire team is jointly propagated forward in time by calling Team-Propagate-forward
(Algorithm 7, Appendix A). This is a slightly modied version of the propagate-forward
(Algorithm 3) that takes dierent subteams into account in propagating beliefs: Given some
total outgoing probability (either to a sibling or child transition), if the outgoing transitions
are to be taken by dierent teams where one team is not an ancestor of another (such as
the TRANSPORT and ESCORT sub-teams), the same total probability would be used for
each transition, instead of splitting the outgoing probability between the transitions. Appropriately, Team-Propagate-forward relies on a modied version of the PropagateDown algorithm (Algorithm 2), called Team-Propagate-Down (Algorithm 6, Appendix

A).

This latter algorithm is also used in the incorporation of evidence (lines 327).

run-time complexity of the propagation process is

O (M ).

One or more messages are observed (lines 37).

The

If one or more messages are ob-

served (since YOYO* is a single algorithm monitoring multiple potential message senders,
more than one message may be observed at once), YOYO* begins to incorporate these observations into the maintained beliefs about the team. This process is somewhat similar to
the Incorporate-Evidence algorithm, described earlier (Algorithm 1), but takes into account multiple observations (since all

N

agents may have sent a message). Multiple messages

(from dierent agents) may all refer to the same plan, but YOYO* must not incorporate
evidence for them multiple times.
The simple loop (lines 57) builds the set

I

(of initialized plans) and

plans) by going over all incoming messages that have arrived at time
complexity of this process (in the worst case) is

113

O (N ).

E
t.

(of terminated
The run-time

Here, YOYO* does better than the

Kaminka, Pynadath, & Tambe
array approach, since multiple messages always cause multiple updates in the array, but in
YOYO*, multiple messages may all refer to a single plan, thus triggering a single update.

Incorporating evidence about initiated and terminated plans (lines 815).
each one of these plans
prior belief in

X

in

I

(line 8), YOYO* now sets the new belief

b0 ,

For

weighted by any

X 's initiation (lines 1011), similarly to how this is done in the incorporate-

evidence algorithm (Algorithm 1), but taking into account the team implied by the sender

of the processed message (line 9).
(teammsg

This is done by a lookup into

M

using the sender

(mi )): Only transitions in M that T is allowed to take are followed.

any transition that is allowed to be taken by a super-team of

T

T

By denition,

is allowed for

T.

A similar

process is then done with any termination messages (lines 1215), but of course looking at
possible successors of any plans consistent with the messages.

However, since we do not

want to cause updates in both line 11 and line 15 in cases where a termination message and
an initiation message refer to the same transition, the loop over the plans

Y

(line 14) skips

any plans which have already been addressed in the previous step. Overall, the run-time
complexity of this process is

O (M ).

Normalizing the temporary distribution b0 (line 16).
b0

The temporary distribution

resulting from the processing of initiation and termination messages is normalized, in a

similar fashion to the analogous step in algorithm 1. However, the process must take into
account not only the plan-hierarchy in question, but also the team-hierarchy. Unlike a typical
normalization procedure, evidence for two dierent plans, selected by two dierent teams,
may not necessarily compete with each other, and therefore may not necessarily require
normalization. For instance, if two messages are observed, one implying that team

A

has

P , and another implying that team B has initiated execution
Q are both children of a joint parent J (executed jointly by the
then the same normalized likelihood (1.0) should be assigned to P and

initiated execution of plan
of plan

Q,

then if

(and

and

A; B ),
J but this will

two subteams

Q

P

be assigned to it by the propagation steps described below). The

run-time complexity of this process is

O (M ) .

Propagating the evidence up and down M (lines 1727).

First, the beliefs are set

for each plan implied by the observations, and its children (lines 1819). Then, the team
that is to execute this plan is determined by a lookup into

M

using

team(X )

T

(line 20). Now

YOYO* begins to propagate the evidence up to the plan's parents (lines 2126). Any belief
in the child plan is propagated and added to the belief in its parent (line 23).

However,

(P )) is to be executed by a super-team of the current team T ,

if the parent plan (parent

then any change to its probability must be propagated to its other children, that are to be
executed by other (subteams). Thus the upward propagation is alternated with downward

1

propagation along hierarchical decomposition transitions . This downward step is executed
whenever the team that is responsible for joint execution of the parent plan is no longer
the current subteam being considered (T ), but its parent team in the team-hierarchy
given by

parentteam (T )

H,

(lines 2426). When this condition is satised, any change in the

beliefs about the parent plan must be propagated down to any children it has that are to be
executed by other subteams. This is done via the Scale algorithm (Algorithm 8, Appendix
A).
1. This alternating upward-downward propagation is the origin for YOYO*'s name.

114

Monitoring Teams by Overhearing
The downward propagation (line 25) implements a subtle but critical step: It re-aligns
any beliefs YOYO* maintains about subteams other than those implied by the message so
that these beliefs are made coherent with existing evidence. The Scale procedure, which
re-distributes the new state probability of a parent among its children, such that each child
gets scaled based on its relative weight in the parent.

The end result is that the state

probabilities of the children are made to sum up to the state probability of the parent. The
process is recursive, but never re-visits a subtree, since it is only carried out for hierarchicaldecomposition transitions that were not previously updated.
Once this downward propagation is done, YOYO* updates the current team to be its

parentteam

parent in the team-hierarchy, in line 26. Note that the call to
in the team-hierarchy

H,

rather than the plan-hierarchy

M.

downward propagation took place, the temporary variable
hierarchical decomposition in

M

(line 27).

Each iteration through the loop begun on line 17 is

reects a lookup

Finally, regardless of whether

P

O (M

is updated to climb up the

+ H ) since in the worst case

both the plan-hierarchy and team-hierarchy are traversed. However, this loop many repeat
(in the worst case) for each of the plans in the plan-hierarchy, and thus overall, the run-time
complexity of this process is

O (M (M

An example run of YOYO*.

+ H )) = O(M 2 + M H ).

The following example illustrates YOYO*'s inference

upon an observation of a message. Suppose a single member of the TRANSPORT subteam
communicates that it is initiating the

Transport-Ops

plan. Upon observing this message,

YOYO* looks up the sender, to determine what transitions can be taken by it (line 8). It then
proceeds to determine the new beliefs in team

T 's execution of the Transport-Ops plan (lines

910, then 16), and incorporates these new beliefs to reect a much increased belief that the

Transport-Ops and its children (lines 1819). Since
Landing-Zone-Maneuvers, is not null, YOYO* enters the loop in lines

TRANSPORT subteam is executing
this plan's parent,

2227. First, it increases the belief in the execution of the parent (line 23). Then, it checks
the condition on line 24: Indeed, the team that is to execute

Landing-Zone-Maneuvers is
Landing-Zone-Maneuvers

TEAM-FLY-OUT, the parent of the TRANSPORT subteam (i.e.,

is to be executed jointly by the TRANSPORT and ESCORT subteams).
fore calls the Scale procedure (line 25) to re-adjust
children subtrees.

Transport-Ops

Landing-Zone-Maneuvers

YOYO* there-

Landing-Zone-Maneuvers'

other

has two hierarchical-decomposition children:

(which YOYO* has already updated) which is to be executed by the

Escort-Ops, which is to be executed by the ESCORT subteam.
Landing-Zone-Maneuvers to Escort-Ops, increasing YOYO*'s
team is executing the Escort-Ops plan. This process re-aligns
had about the likelihood that Escort-Ops was being executed

TRANSPORT subteam, and
Scale climbs

down

from

beliefs that the ESCORT
any prior beliefs YOYO*

with current evidence, in eect updating beliefs about the plans executed by the ESCORT
subteam, based on a single observation made of a member of the TRANSPORT team. The
process now repeats this loop until the entire set of beliefs is updated and aligned with
respect to the observed message.

5.2 Scalability in the Number of Agents
YOYO* oers signicant computational advantages when compared to the individual representation (array) approach. YOYO* requires only a

115

single, fully-expanded plan-hierarchy

Kaminka, Pynadath, & Tambe
to represent the entire team.

This hierarchy is

a union

of all the individual agent plan-

hierarchies, containing all transitions and plans, tagged by the subteams that are allowed
to execute them.

M

In addition YOYO* uses a single copy of the team hierarchy.

is the size of the plan-hierarchy,

H

is the size of the team-hierarchy, and

N

Suppose

the number

of agents in the team. When agents are added to the monitored team, the team hierarchy
grows by one new node that represents the new agent, and is connected to the appropriate

+ H ). Since
grows with N , we could write it O (M + N ) (compare to the array approach: O (M N ),

sub-team in the team hierarchy. YOYO*'s space complexity is therefore

H

O (M

Algorithm 4).
To analyze YOYO*'s run-time complexity, we have to consider the behavior of Algorithm
5 separately in cases where no communications are observed, and in cases where at least
one message is observed.

If no messages are observed, then an update takes the form of

a single call to Team-Propagate-Forward (Algorithm 7), an

O (M )

process.

This is

clearly a best-case scenario for YOYO*. If one agent communicates, then YOYO* would
have to go through

O (M

M

and

+ H ) = O(M + N ).

H

in its upward-downward propagation process only once, thus

The worst case scenario for YOYO* occurs if all agents send messages, and each one of
these

N

messages refers to a dierent plan (messages about the same plans would be merged

in lines 57). In this case, there would be up to

M

dierent plans for which evidence exists,

and each one of them would require a separate update through lines 1727. Thus YOYO*'s
run-time complexity in this case is

O (N

+ M + M + M (M + H )) = O(N + M 2 + M H ) = O(N + M 2 + M N )

Clearly, this worst-case cannot be continuously sustained by a monitored team, since agents
cannot continuously communicate about their state. We thus believe that the average case
in real-world domains with

many

agents would be much closer to the

O (M

+ N)

case

presented earlier (see Section 6.4 for empiric evaluation). In any case, YOYO*'s complexity
compares favorably with a procedure reasoning about coherent hypotheses using an array
of recognizers, an

O (M N 2 )

process (at least), even if only one agent communicates (Section

4.1).

5.3 Discussion
YOYO* explicitly represents a team as a single coherent entity. Its space and run-time requirements are preferable to the array based approach when the number of agents grow, and
it considerably simplies reasoning about coherence and communications predictions. On
the other hand, YOYO* sacrices the capability to represent failing team activities (incoherent hypotheses), where one team-member is executing one team-plan while its teammate
is executing another.

This does

not

at all mean that individual actions taken by agents

are somehow locked together in synchronous execution, or that individual agents must all
execute the same individual action at the same time. For instance, two team-members

A; B

that are each executing a completely dierent path of execution at the same time (i.e., plan
steps

A1 ; :::; Ak

and

an overall joint plan

B1 ; :::; Bl ) can be easily represented by a plan hierarchy that includes
J , having two rst hierarchical decomposition children, A1 and B1 , to

116

Monitoring Teams by Overhearing
be selected by

A and B , respectively. A1 would have an outgoing temporal transition to A2 ,
B1 would have an outgoing temporal transition to B2 , etc. Since J is to

etc. and similarly

be executed by the two team-members jointly, any initial evidence for any one of the agent
executing any of its individual plans would be used by YOYO* as evidence for the other
team-member having begun its own parallel execution of its own individual execution path.
Further evidence about one agent executing its own individual actions would only increase
the likelihood that the other agent is continuing its own execution, at its own pace. However,
it would be impossible for YOYO* to correctly represent a monitoring hypothesis in which

A
of

is executing some child of

J.

J , Ai ,

while

B

is executing some plan that is not

J,

nor a child

Given the results of the evaluation we conducted (Section 6), which demonstrated the

importance of coherence in accurate visualization, the tradeo of expressivity vs. scalability
is justied: Overseer's accuracy was much improved due to the use of coherence.

Although YOYO* sacrices the capability to reason about certain failure (incoherence)
hypotheses, it is still capable of supporting failure-detection, an important secondary goal of
visualization. In earlier work, we have shown the merits of coherence in service of detecting
disagreements in a team, in particular demonstrating that coherent monitoring leads to
sound centralized disagreement detection, and may lead to sound and complete disagreement
detection under specic circumstances (Kaminka & Tambe, 2000). As YOYO* is in fact a
very ecient way to reason about coherent hypotheses, it provides a good basis for providing
sound disagreement detection results.

A concern about the generality of the technique may be raised based on YOYO*'s reliance on the team-hierarchy.

However, we believe it is reasonable to expect that large,

complex, real-world multi-agent systems of the type targeted by this paper would have
an organizational hierarchy of some sort associated with them (see, for instance,

Tidhar,

1993b). Human organizations certainly demonstrate the emergence of such hierarchies, especially as the organizations grow larger (e.g., big corporations, government organizations)
or tackle mission-critical tasks (e.g., military organizations). In addition, team-hierarchies
for computational agents are critical for planning, for maintaining network and system security, etc. Thus we believe our use of a team-hierarchy is not a weakness in our approach, as
organizational structures will become as wide-spread in computational multi-agent systems
as they already are in human multi-agent systems. Indeed, it may be possible to gradually
learn a team-hierarchy for a given coordinated team for the purpose of monitoring; however,
discussion of this possibility is outside the scope of this paper.

Indeed, using a team-hierarchy, we can apply our assumption of coherence to other representations and algorithms as well. For instance, if we start with the DBN representation
of the team from Section 4.3, we can unify the multiple random variables used to represent the separate agents into a single random variable for an overall team/subteam. As in
YOYO*, the size of the representation grows with the size of the plan hierarchy, and not
the number of agents. Thus, the number of nodes will be the same as for the single-agent
case,

O (M 2 ),

as discussed in Section 3.1.

However, again, the complexity of inference in
2
O M .

answering plan-recognition queries will still be exponential in the number of nodes,

117

(2 )

Kaminka, Pynadath, & Tambe
6. Evaluation
This section presents a detailed evaluation of the dierent contributions contained within
Overseer. We begin by exploring the relative contribution of each technique to the success

of Overseer as a whole (Section 6.1).

We then focus on evaluating Overseer's use of

communications predictions with respect to lossless and lossy observations (Section 6.2).
We then present a comparison of Overseer's performance with that of human experts
and non-experts (Section 6.3). Finally, we empirically evaluate YOYO*'s scalability in our
application domain (Section 6.4).

6.1 Accuracy Evaluation
The rst part of the evaluation tests the contribution of the dierent techniques in Overseer to the successful recognition of the correct state of the team-members. Figure 5 com-

pares the average accuracy for a sample of our actual runs, marked A through J (X-axis).
In each such 1020-minute run, the team executed its task completely. At dierent points
during the execution, the

actual

state of the system was compared to the state

predicted

by Overseer, where the prediction was taken to be the current most-likely hypothesis.
Each run had 2245 such comparisons (data-points). The percentage of correct monitoring
hypotheses for each run across those comparisons is given in the 0-1 (0-100%) range, on the
Y-axis.
1
0.9

Temporal

Average Accuracy

0.8

Coherent
Coherent,
Temporal

0.7
0.6
0.5

Coherent, Comm

0.4

Coherent,
Temporal, Comm

0.3
0.2
0.1
0
A

B

C

D

E

F

G

H

I

J

Evaluation Run
Figure 5: Percent accuracy in sample runs.

The accuracy when using the individual models with no coherence (as in Section 3) is
presented in the leftmost bar (marked

Temporal )

in each group (Figure 5), and is clearly

very low. This approach is a straightforward attempt at monitoring multiple agents by monitoring each individual, without considering the interactions between them, as described in
Section 3.

The next bar presents the monitoring accuracy when only coherence is used

to rule out hypotheses (Section 5.1), with ties broken randomly. The next bar to the right

Coherent, Temporal ) presents the results of combining both coherence and the probabilistic
temporal model (Sections 3 and 5.1). Then, the bar marked (Coherent, Comm ) shows the
(

eects of combining the use of coherence with the use of predictions based on knowledge of

118

Monitoring Teams by Overhearing
the communication procedures used by the team (Section 4.2). Here, the communications
predictions were used to restrict the set of coherent hypotheses considered, with ties bro-

Coherence, Temporal, Comm )

ken randomly. The remaining bar (

presents the monitoring

accuracy in each run using the combination of all techniques.
The results presented in Figure 5 demonstrate the eectiveness of the socially-attentive
monitoring techniques we presented.

First, the results show that the coherence heuristic

brings the accuracy up by 1530% without using any probabilistic reasoning. This boost in
performance is a particularly interesting result, because of the relation between the coherence
technique and previous techniques explored in the literature (Tambe, 1996; Intille & Bobick,
1999). Previous work has successfully used the relationships between agents to increase the
accuracy of monitoring. The boost in Overseer's accuracy based on the use of role and
teamwork relationships conrms the results from previous investigations.

However, the

results also demonstrate that the technique is not sucient in this domain.
Overseer adds a number of novel techniques not addressed in previous work.

The

Coherent,

rst such technique combines coherence with a temporal model of plan-duration (

Temporal ),

and it results in signicant increases to the accuracy, because the probabilistic

temporal information now allows Overseer to better handle the lack of observations. A
possible alternative, which we explore in this evaluation, is to rely instead on the communications predictions to rule out hypotheses about future states that may or may not have

Coherent, Comm ).

been reached (

It is therefore interesting to compare the performance of

Coherent, Temporal ) and (Coherent, Comm ) bars.

these two techniques by comparing the (

In almost all runs the average accuracy when using coherence and communications predictions is signicantly higher than when using coherence and the temporal model. This is
despite the fact that the more eective coherence technique uses arbitrary (random) selection
among the available hypotheses: The reason for this is that in many cases the communication predictions are powerful enough to rule out all hypotheses but one or two, signicantly
decreasing the uncertainty of the agents' plan-horizons. Thus even a random selection stands
a better chance than a more informed (by a temporal model) selection among many more
(1020) hypotheses.
However, runs J and B show a reversal of this trend compared to the other runs. Figures
6ab show the accumulative number of errors as task execution progresses during run I
(Figure 6-a) and during run J (Figure 6-b). An error is dened as a failure to choose the
correct hypothesis as the most likely one (i.e., the most likely hypothesis does not reect
the true state of the agent/team). Each message exchange corresponds to one to a dozen
messages communicated by the agents, establishing or terminating a plan. In the two gures,
a lower slope means better performance (less errors). The line marked

Coherent

shows the

accumulative number of errors if only coherence is used to select the correct hypothesis
most such choices turn out to be erroneous since a random choice is made among the
competing hypotheses. The line marked

Coherent, Temporal

shows the results using both

coherence and the temporal model to choose the most likely hypothesis. Similarly, the line
marked

Coherent, Comm

shows the results using both coherence and the communications

predictions. Finally, the remaining line displays the results of using the combined technique,
using coherence, the temporal model, and the communications predictions.
In Figure 6-a, we see that the two techniques (

Coherent, Temporal and Coherent, Comm )

have almost equal slopes and result in almost equal number of errors at the end of run I,

119



7HPSRUDO



&RKHUHQW

























&RKHUHQW

&RKHUHQW




2EVHUYHG 0HVVDJH ([FKDQJHV

7HPSRUDO
&RPP










7HPSRUDO

&RPP



&RKHUHQW

&RKHUHQW
















&RPP



&RKHUHQW

&RKHUHQW









$FFXPXODWLYH  (UURUV

&RKHUHQW








$FFXPXODWLYH  (UURUV

Kaminka, Pynadath, & Tambe

7HPSRUDO
&RPP

2EVHUYHG 0HVVDJH ([FKDQJHV

(a) Run I

(b) Run J

Figure 6: Accumulative number of errors in runs I and J.

though from Figure 5 we know that due to the alleviated uncertainty, the use of communications predictions leads to overall higher probability of success (i.e., the

Coherent, Comm

technique results in fewer alternative hypotheses, and thus has a better chance of being correct). However, in Figure 6-b we see that in run J the situation has changed dramatically.
First, we see that the two lines are no longer similar. The line marked

Coherent, Comm

has

greater slope than in run I, indicating that the communications predictions are not able to
reduce the uncertainty, resulting in lower average accuracy. Second, we see that the temporal model results in many less errors, as evidenced by the much slower-rising slope of the
line marked

Coherent, Temporal.

Thus in this case, the actual duration of plans matched

the temporal model more accurately than in other runs.
In trying to understand this dierence between runs J, B and the other runs of the
system, we discovered that runs J and B involved relatively more failures on the part of
team-members, including agents crashing or not responding at all.

The communications

predictions, however, were learned based on successful runsand thus did not correctly
predict the communication messages that would result as the team detected and recovered
from the failures. Thus the uncertainty was not alleviated, and the arbitrary selection was
made among relatively many hypotheses. This explains the relatively lower accuracy of the
(

Coherent, Comm)

technique in run J and B. This clearly shows a limitation of the simple

learning approach we took, and we intend to address it in future work.

However, there

are other factors that inuence the accuracy of the communication models, since this lower
accuracy did not occur in other runs where failures have occurred.
The results of the

Coherent, Temporal

technique vary as well.

We have been able to

determine that failures cause a relative increase in the relative accuracy of the

Temporal

Coherent,

technique. However, variance in the results is due to additional factors. In run C,

for instance, this technique results in relatively higher accuracy, but no failure has occurred.
Certainly, the mission specications themselves dier between runs, machine loads cause the
mission execution to run slower or faster, etc. The great variance in the temporal behavior
of the system was the principal reason for our using the communication prediction.
variance is obvious in the graphs.

120

This

Monitoring Teams by Overhearing
In summary, despite the variance in the results of the

Coherent, Temporal

technique (due

to variance in the temporal behavior of the system and the simplicity of the temporal model),
and the possible sensitivity of the

Coherent, Comm

technique to learned predictions, it is

clear that the two techniques work well in combination, building on the coherence heuristic,
and compensating for each other's weaknesses. In all runs, the combined technique

Temporal, Comm

Coherent,

was superior to either technique alone. Its performance varied between

72% accuracy (Run E) to 97% (Run I). The average accuracy across all runs of this allcombination technique was 84%, resulting in very signicant increases in accuracy compared
to the initial solution with which we began our investigation (less than 4%), and to human
novice performance (see Section 6.3).

Thus the communications predictions need not be

perfect, and the temporal knowledge need not be precise, in order to be useful.

6.2 Evaluating the Use of Communications Predictions
One key question about the use of the communications predictions is their sensitivity to loss
of observations. The ecacy of the technique (see Figure 5) stems from its capability to make
inferences based on an expected

future

observation. The predictions used in the previous

section assumed no observation loss, i.e., if a prediction stated that a particular message
was to be observed, than the probability assigned to this prediction was 1.0. But in settings
involving lossy observation streams, such inference will prove incorrect, as Overseer will
wait for the observation and will therefore not correctly monitor the actual state of teammembers.
To evaluate the predictions' sensitivity to observation loss, we chose three of the experimental runs, E, I, and J, which represent the extreme performance results of Overseer:
Run E had the lowest accuracy (72%), Run I had the highest (97%), and run J showed an
interesting reverse in relative performance of the
(see Figure 5).

Coherent, Temporal

and

Coherent, Comm

For each of these runs, we simulated observation loss at a rate of 10%,

repeating each trial three times with dierent random seeds. In other words, we ran a total
of 9 trials, in which a random 10% of the messages to be observed by Overseer were
not observable to Overseer (though they still reached the evacuation team-members
team-performance was identical to the original settings).

We then set the predictions to

appropriately use 90%10% settings: each expected message was predicted to appear with
0.9 probability (as opposed to 1.0 probability originally).
The results of these experiments are presented in Figure 7. For each of the three dierent
runs, two bars are presented. The left (shaded) bar shows the original results as presented in
the previous section (i.e., with no observation loss, and no treatment of possible loss in the
predictions). The right bar shows the average accuracy achieved by Overseer on the three
trials (for each run) in which 10% of the observations were not observable to Overseer.
The error-bars on the right bar mark the minimum and maximum accuracy values achieved
in the three trials for each run. Run I's error-bars are unseen since all three trials resulted
in the same accuracy.
There are a number of promising conclusions that can be drawn from these results.
First, in both runs E and I, Overseer's average accuracy dropped by less than 8%, i.e.,
the performance of Overseer dropped by less than the level of loss introduced. Indeed,
in run E, in which the original performance was the poorest, there was almost no change

121

Kaminka, Pynadath, & Tambe

Average Accuracy

1
0.8
0.6
0.4
0.2
0

Run E

Run I

Run J

Figure 7: Comparison of average accuracy results with 0% and 10% observation losses.

in performance. Performance in run J did drop by slightly more than 10%, and that can
be at least partially explained by run J's previously discussed failures to exploit the communications predictions. Thus one promising conclusion to be drawn from these results is
that Overseer's performance can degrade gracefully, at a rate comparable to the rate of
degradation to Overseer's input.
A second conclusion is that Overseer's performance under observation-loss settings is
fairly invariant. Again, both run E and I, which can be considered normative, show very
little (if any) variance from one trial to the next, despite the change in the selection of
observations to be made unobserved from one trial to the next. Even run J, which is not
a representative of the normative runs, shows little variance with respect to its average
accuracy under observation loss.

This result suggests that while there may be a drop in

performance with observation loss (as expected), Overseer performs consistently under
varying lossy settings.

6.3

Overseer and Human Monitoring by Overhearing

Another important facet to the evaluation of Overseer examines its performance in comparison to that of novice and expert monitors of the evacuation application. This evaluation
sheds some light on the diculty of the monitoring task, and demonstrates that Overseer's performance is comparable (sometimes higher, sometimes lower) to human expert

performance, and signicantly better than that of novices.
To conduct this evaluation, we examined the same three runs representatives of Overseer's bounds on performance discussed above (runs E, I, and J). The rst author of this

paper served as an expert monitor, having as much experience in overhearing in the evacua-

122

Monitoring Teams by Overhearing
2

tion application as possible (and specically in the actual test runs E, I and J) . We established a group of novice monitors, made up from ve subjects who were generally familiar
with hierarchical control structures but unfamiliar with either monitoring by overhearing or
with the evacuation application or its component agents. Each subject was presented with
printed books (one for each run) containing the overheard messages (in human-readable
form), the same messages overheard by Overseer under optimal (lossless) conditions. As
reference material, each subject was given a copy of the plan-hierarchy, team-hierarchy, and
the same average duration information available to Overseer (the parameter

 for dierent

leaf plans). For each overheard message, a second line of print indicated the time passed
since overhearing the message, and the subject was asked to write down their best estimate
for the agents' current state (i.e., after the message was overheard and the specied time
passed). If they felt dierent agents or dierent sub-teams had dierent states, they were to
specify what each agent or subteam is doing. We emphasize that the subjects were presented
with exactly the same runs on which Overseer was evaluated.
The actual test process began with a short explanation of the task, with a full explanation of the plan-hierarchy (including answering any questions the subjects had about the
semantics of dierent transitions, etc.), and with a short test run which allowed each subject to use the plan-hierarchy and team hierarchy (but without providing any feedback as
to the subject's accuracy). Then, once all questions had been answered, the subjects were
presented with the test books and were given unlimited time to complete them, in any order
(though once started on a book, they were required to nish it). Subjects were not allowed to
look forward at the next message before completing their answer, nor to go back and change
their previous answers. They were encouraged to seek assistance in locating plans (in the
plan-hierarchy) consistent with messages, but no information was provided as to which plan
may be correct if two or more plans were consistent. After all subjects nished with all runs,
the test books were taken together and a score was computed. Each correct prediction was
awarded a 1, incorrect prediction a 0same standard used in scoring Overseer's accuracy. A non-specic answer (i.e., it was somewhere in the sub-tree of

Fly-Flight-Plan)

was considered to be an incorrect prediction, as subjects were repeatedly instructed that a
specic answer was required.
The results of the test are presented in Figure 8.

As in previous graphs, the Y-axis

denotes percentage of accurate monitoring hypotheses across all the data-points in a run
(2245, depending on the run). The X-axis has three categories, for the three dierent runs.
For each run, the left bar (marked Novices) presents the average accuracy achieved by
the novice monitors, the middle bar (marked Experts) presents the accuracy achieved by
the human expert monitor, and the nal bar (YOYO*) re-prints the results presented in
Figure 5 above. The results show that the average accuracy of the novices is clearly inferior
to that of the expert monitor and to Overseer. Overseer's performance is above that
of the human expert in runs I and J. However, the human expert does much better than
Overseer in run E.

We draw several conclusions from these results. First, the monitoring task Overseer
faced in the evacuation application is not trivial: The novices failed to achieve more than
2. We have had to settle for one expert since training an expert in this task is very time consuming and
requires much familiarity with the internals of the evacuation application as well as the TEAMCORE
architecture.

123

Kaminka, Pynadath, & Tambe
70% on average (in their best run), and generally performed signicantly worse (by 15%
and more) than a human expert. Second, Overseer's performance in dierent runs was
comparable to that of the human expert (sometimes better, sometimes worse).

However,

Overseer's performance tended to follow the same trend as the novices. In other words,
Overseer's accuracy tended to go up and down on dierent runs in a similar manner

to that of the average novice human monitor, while the expert's accuracy remained fairly
constant across all runs.

1

0.8

Novices

0.6

Experts
0.4

YOYO*
0.2

0

I

J

E

Figure 8: Accuracy of human novice and expert monitors compared to Overseer.

6.4 Evaluating YOYO*'s Trading of Expressivity for Scalability
We examine a key trade-o between the expressivity and eciency involved in the planrecognition techniques we have presented. From the accuracy discussion above, it is clear
that coherence is a useful heuristic. YOYO* takes an extreme approach, strictly ruling out
reasoning about incoherences.

It is impossible for YOYO*, for instance, to represent an

incoherence in which two team-members are in disagreement about the plan executed by
the common team. It may thus be impossible for YOYO* to explicitly represent hypotheses associated with communication losses and delays, which cause such incoherences.

An

approach in which each individual is represented separately allows for such representation,
and in this respect is more expressive. However, with a few failure-checks in place,

is able to detect many incoherences, as previously discussed.

YOYO*

On the other hand, YOYO* oers signicant computational scalability with respect to
the number of agents monitored. Analysis of YOYO*'s complexity (in contrast to the array

124

Monitoring Teams by Overhearing
approach) was already presented in Section 5.2, and we follow it here with empirical evaluation. Figure 9 reports on the space requirement of YOYO* and the array-based approach
in three dierent domains: the evacuation domain, where YOYO* has been evaluated and
deployed, and two additional domains in which we have built multi-agent teamsModSAF
(Tambe et al., 1995; Calder, Smith, Courtemanche, Mar, & Ceranowicz, 1993) and RoboCup
(Tambe, Adibi, Al-Onaizan, Erdem, Kaminka, Marsella, & Muslea, 1999; Marsella, Adibi,
Al-Onaizan, Kaminka, Muslea, Tallis, & Tambe, 2001). YOYO* is currently being evaluated
in these domains, and while it has not yet been fully deployed there, we believe the partial
existing implementations are sucient to provide robust projections of the space savings
achieved in these domains.

We believe that such projected savings of implementation in

these two domains could provide a rough guide as to the savings that designers could expect
from deploying YOYO* in additional domains.
For each domain, Figure 9 compares the space requirements of the array-based approach
(left bar) with those of YOYO* (right bar).

In addition, the dark-shaded region on top

of each bar shows the space required for representing each additional agent in the two
approaches, under the assumption that no additional plans are added to the plan-hierarchy
as more agents are added. As discussed above, this assumption is favorable to the arraybased representation. The gure shows the signicant space savings achieved by YOYO*.
First, in representing the teams in their current size, YOYO*'s space requirements are
signicantly smaller.

Furthermore, YOYO*'s savings really shine when we examine the

scalability of the two approaches.

While the array-based approach requires at least the

amount of space shown in the gure as darkly-shaded area, YOYO*'s requirements grow
by one node with each additional agent. Its space requirements for representing additional
agents are so small, that they don't show in the gure.

Number of Nodes

900

600

Each
Additional
Agent

300

Current
Application

0

Array

YOYO*

Evacuation (11 Agents)

Array

YOYO*

RoboCup (11 Agents)

Array

YOYO*

ModSAF (3 Agents)

Figure 9: Empirical savings in applying YOYO* in the evacuation and other domains.
Earlier, in Section 5.2, we have analyzed YOYO*'s worst case run-time complexity, but
argued that this worst case behavior is very extreme, and cannot be sustained in practice
since it involves continuous communications among all agents, the infeasibility of which

125

Kaminka, Pynadath, & Tambe
provided the motivation for exploring a plan-recognition approach.

As further evidence

for the average case, consider the evacuation application, where agents communicate on
average once every 20 state changes. In this application, agents communicate in parallel in
4 or 5 exchanges (out of dozens), but in all cases but one, such parallel communications all
referred to the same plan, thus still requiring only a single update in YOYO* (see discussion
in Section 5.2). Only once during task execution would 3 agents (out of 11) be expected to
communicate in parallel about dierent plans, a scenario still dierent than YOYO*'s worst
case scenario.
The average length of task execution in this domain is approximately 900 time-ticks.
The array approach would update the state of each agent, at each time tick, whether a
message would appear or not.

Thus its average complexity per time-tick is the same as

its worst-case, which is at least

O (M N 2 ).

For YOYO*, the average complexity would be

signicantly dierent: 899 out of 900 time-ticks it would result in an

O (M + H ) process, and

only one time (out of 900) it would be result in a process three times as expensive (updating
the state of 3 dierent agents). The worst case scenario did not occur at all in any of the
dierent runs.

7. Related Work
Aiello et al. (2001) present several benets to overhearing agent conversations. They suggest
that the overhearer may infer the intent of the agents engaged in conversations, and oer
specic suggestions for improving the agents' performance.

For instance, overhearing a

conversation between two agents about a keyword search on the web, the overhearer may
suggest alternative keywords to conduct the same search.

This work is closely related to

our research on Overseer, and indeed points out several potential additional benets of
overhearing technology. However, in contrast to our work, Aiello et al. do not address the
problem of intent- or plan-recognition. They do not present algorithms for inferring plans,
nor for disambiguating recognized plans.
Overseer diers from most previous work on plan-recognition in being focused on

monitoring multiple agents, not a single agent.

While previous work in multi-agent plan

recognition has either focused on exploiting explicit teamwork reasoning (e.g.,

Tambe,

1996), or explicitly reasoning about uncertainty when recognizing multi-agent plans (e.g.,
Devaney & Ram, 1998; Intille & Bobick, 1999), a key novelty in Overseer is that it
eectively blends these two threads together. We provide a detailed discussion below.
Like Overseer,
for inferring
heuristic.

RESCteam

team plans

RESCteam

(Tambe, 1996) reasons explicitly about team intentions

from observations, similarly to Overseer's use of the coherence

uses coherence to restrict the space requirements of the plan-library

used, similarly to YOYO*.

However, Overseer uses a more advanced teamwork model

(e.g., it can predict failure states and recovery actions), uses knowledge about procedures
used by a team (i.e., communication decisions), and also explicitly reasons about uncertainty
and time, allowing it to answer queries related to the likelihood of current and future team
plans (issues not addressed in

RESCteam ).

Indeed,

RESCteam

does not explicitly represent

ordering constraints between plans, and does not address scarce observations: It assumes
that observations are available that account for possible changes in the state of each of the
observed agents.

126

Monitoring Teams by Overhearing
Work such as (Devaney & Ram, 1998; Intille & Bobick, 1999) focuses on explicitly
addressing uncertainty in plan recognition in multi-agent contexts, but does not exploit
explicit notions of teamwork. Devaney and Ram (1998) use pattern matching to recognize
team-tactics in military operations. Their approach relies on team-plan libraries, veried by
domain experts, that combine the team- and plan-hierarchies; the organizational knowledge
is not explicitly represented in their technique.

Similarly, Intille and Bobick (1999) rely

entirely on coordination constraints among agents to recognize team-tactics in football, and
in this sense use a socially-attentive technique that prefers hypotheses in which agents are
maintaining their roles. Intille and Bobick's work uses a single structure for each dierent
recognized tactic. Both investigations use position trace data of the monitored human teams.
Our work diers from (Devaney & Ram, 1998; Intille & Bobick, 1999) in several ways.
First, these previous investigations have been applied in settings where observations are continuously available about each monitored agent. In contrast, Overseer is targeted towards

overhearing,

where limited observations are available, both in time, and in the number of

agents actually observed. Overseer introduces a number of novel techniques (such as the
communications predictions) which are useful in such settings. A second important dierence is the underlying representation used in reasoning. We introduce a novel representation
particularly suited for monitoring by overhearing, while Intille and Bobick rely on standard
belief networks, constructed in a particular way to support reasoning about spatial/temporal
coordination. Finally, the explicit use we make of teamwork and organizational structure
(the team-hierarchy) enables YOYO* in principle to reason about coordination and teamwork failures, where the previous monitoring techniques would fail to recognize the team's
actions (Intille & Bobick, 1999).
Huber (1996) reports on the use of probabilistic plan recognition in service of observationbased coordination in the Net-trek domain, and shows that agents using plan recognition
for coordination outperform agents using communications for coordination.

Huber takes

coordination to be cooperative actions on the part of the self- interested agents, e.g., joining
an agent in attacking a common enemy. Huber's work does not exploit any knowledge of
relationships between the agents to limit the computation or increase the accuracy. Huber's
system does allow for some uncertainty caused by missing observations, but in contrast to
our work, does not introduce specialized mechanisms (such as ours) to explicitly address
these.
Plan Recognition Bayesian Networks (PRBNs) (Charniak & Goldman, 1993) provide a
very general model for plan events, evidence, and inference. However, a PRBN is a static
Bayesian network, so it must include nodes for all plans and observations throughout the
execution of the plans. Therefore, instead of representing only the events of a single time
step (as in the DBNs described in Section 3.1), it must include nodes over all time steps.

M , over a nite time horizon
2
of T steps, the number of nodes in the network will be O (T N M ). Inference will have a
2
T
NM
space/time complexity exponential in the number of nodes, O (2
), which is prohibitive
over the lengths of execution found in our example domains (e.g., T = 900).
Therefore, for

N

agents, executing a plan hierarchy of size

The representation used by YOYO* is related to existing approaches to the modeling
of stochastic processes, in particular those used for probabilistic plan recognition.

The

representation we present perhaps most closely resembles Hidden Markov Models (HMMs)
(Rabiner, 1989), used for plan-recognition in (Han & Veloso, 1999). One could, in theory,

127

Kaminka, Pynadath, & Tambe
represent the plan state of a team of agents within the unconstrained state space of an
HMM. However, the HMM state space would have to represent all possible combinations
of the individual plan states of the agents, so the size of the HMM state space would be
exponential in the number of agents and plans. Thus, the standard algorithms for HMM
inference would not be able to exploit the structure of the plan and team hierarchies, nor the
particular forms of evidence (as described in Section 3.2), in the way that we do in YOYO*.
Generalized versions of the HMM model (Ghahramani & Jordan, 1997; Jordan, Ghahramani,
& Saul, 1997) could more compactly represent the same state space as in YOYO*, but exact
inference is intractable for these models. These models have more ecient algorithms for
approximate inference, but these would have diculty with the determinism present in our
planning models.
Pynadath and Wellman report on the Probabilistic State-Dependent Grammar (PSDG)
model (2000) that avoids the full complexity of DBN inference by making simplifying assumptions appropriate for plan recognition. However, while PSDG can incorporate broader
classes of inference than YOYO*, it is intended for single-agent plan recognition, and does
not support concurrency in a general enough fashion for multi-agent plan recognition.
Goldman, Geib and Miller (1999) develop a conceptual model for Bayesian plan recognition which does include, as one of its key novelties, the ability to infer the plans of a single
agent from lack of observation of its action. However, Goldman et al. deal with a dierent
issue altogether than the one our communications predictions address.

Their framework

looks at a sequence of observations, in which an observation may be missing, but observations of actions following it appear. Their framework then allows inference that plans that
should have given rise to the missing observation can be ruled out as recognition hypotheses.

In contrast, our approach uses the communications predictions to make inference of

plan-steps that did not

yet

occur. Overseer probabilistically expects the predictions to

come true, and does not infer additional information from a missing (predicted) observation
that is followed by another. In addition, our approach is fully implemented and deployed in
multi-agent settings, rather than single agent.
A complementary line of work (in the context of the TEAMCORE architecture) has
focused on

intended

plan-recognition for monitoring, where team-members may adapt their

communications such that monitoring is made easier (Tambe et

al., 2000).

This work

(i) reduced, but did not eliminate uncertainty, and (ii) did not present any methods to
address uncertainty, as we do here, However, it presents an interesting future direction for
Overseer's development.

8. Summary and Future Work
This paper introduced monitoring by overhearing, a technique that will be increasingly
important with the growing need to monitor agent systems, particularly distributed or deployed. We presented Overseer, a system for monitoring teams by overhearing the routine
communications team-members exchange as part of the execution of their joint tasks. Monitoring by overhearing, while being a plan-recognition task, presents characteristic challenges
not previously addressed. These include the scarcity of observations compared to the rate
of change in agent's state, and the fact that agents are not individually observable, as the
observations are essentially of multi-agent actions. In addition to these, familiar challenges

128

Monitoring Teams by Overhearing
such as demanding response times and maintaining performance in face of a scale-up in the
number of monitored agents, are also present.
To address these challenges, Overseer employs a number of novel techniques, which
exploit knowledge of the relationships between the agents to alleviate uncertainty and increase eciency of monitoring: (i) An ecient probabilistic algorithm for plan-recognition,
particularly suited for monitoring communications; (ii) YOYO*, an approach for ecient
maintenance of recognition of coherent hypotheses; and (iii) use of social structures and
procedures, e.g., team coherence and communications to maintain coherence, to alleviate
uncertainty. To demonstrate the generality of these techniques, we have discussed the potential use of these techniques with representations other than a plan-hierarchy, in particular
DBNs (Kjærul, 1992).
We provided an in-depth empirical evaluation of these techniques in one of the domains
in which Overseer is applied. The evaluation carefully examines the contribution of each
technique to the overall recognition success, and demonstrates that these techniques work
best together, as they complement relative weaknesses of each other. The paper also presented an evaluation of the scalability of YOYO*, and its performance under conditions of
observation loss. Finally, we presented a comparison of Overseer's performance with that
of human expert and novice monitors, and demonstrated that Overseer performance is
comparable to that of human experts, despite the diculty of the monitoring task.
Several opportunities for future research directions arise from the experimental results.
First, the use of rote-learning to predict when messages will be observed (provided as feasibility demonstration), proved eective for normative runs. However, the simple mechanism
was damaging when rare patterns of communications arose, as some of the experiments have
shown. In-depth exploration of the role of learning is therefore one of the directions we hope
to pursue in the future.

In addition, learning mechanisms that can derive plan-hierarchy

and team-hierarchy structures from records of conversations are also of much interest.

Acknowledgements
This paper is based in part on an Agents-2001 paper by the same authors (Kaminka, Pynadath, & Tambe, 2001). Parts of this research were carried out while the rst author was
a Post Doctorate Fellow at the Computer Science Department, Carnegie Mellon University.
We thank Manuela Veloso for her enthusiastic support of this project at Carnegie Mellon
University, and we thank Yves Lespérance, Victor Lesser, George Bekey, Je Rickel, and
Dan O'Leary for useful comments. Oshra Kaminka deserves special thanks for her help in
analyzing and processing the data. This research was supported by DARPA awards F3060298-2-0108, F30602-98-2-0135, and F30602-00-2-0549, managed by the Air Force Research
Labs/Rome site.

Appendix A. Additional algorithms and proofs
This appendix contains the pseudo-code for all algorithms described in the paper, for which
pseudo-code was not provided in the body of the text itself. These include the modications
to the propagation procedures necessary for propagation within YOYO*. In addition, we

129

Kaminka, Pynadath, & Tambe
provide a proof that the number of coherent hypotheses for
the plan-library

M.

N

agents is linear in the size of

A.1 The Number of Incoherent and Coherent Hypotheses
Let

Mi

be the monitoring plan-library for agent

i; 1

 i  N.

monitoring system reasons about monitoring hypotheses in

Mi

as the nite set of all possible plans agent

i

Mi .

When monitoring agent

i,

a

In other words, we can view

may be executing. Given a query as to the

agent's current state by the monitoring system, the plan-recognition algorithm picks some

ki

Mi as hypotheses
mi where jmi j = ki .

specic members of

of hypotheses

as to the current state of the agentcall these sets

To construct an overall team hypothesis, the monitoring system must combine the individual hypotheses to form a hypothesis for the team's state. For each agent i, the monitoring
system chooses one individual hypothesis

hi

2 mi. The combination of these forms the team

state hypothesis. If there is no uncertainty about the state of any of the agent, i.e.,
for all

i,

then one team hypothesis exists.

ki

=1

However, if uncertainty exists about the state

agents, then clearly, the process of selecting individual hypotheses becomes combinatorial
in nature, as all possible combinations of all individual hypotheses are possible in principle.
Let us consider how many coherent hypotheses exist. If we restrict ourselves to coherent
hypotheses, then the selection of individual hypotheses for each agent are constrained such
that the selections are in agreementthe same individual hypothesis is selected for each
agent. Given a selection of an individual state hypothesis
must choose

h1

=

h2

=

h2
h3

2m

=

:::

2 for the second agent,

=

hN .

h3

2m

h1

2m

1 for the rst agent, we

3 for the third agent, etc., such that

Since there are not more than

k1

 jM j individual
1

state

hypotheses for the rst agent, it follows that the number of coherent team-state hypotheses
is bounded by

jM j, i.e., the size of the plan library for the agents.
1

coherent hypotheses is bounded by

In fact, the number of

minki since only members of mmin ki can be matched

m. In contrast, by denition, all other
k1  k2  k3  :::  kN (min ki ) of these

with members of the other individual hypothesis sets,
team-state hypotheses are incoherent. There will be
hypotheses.

A.2 YOYO* Propagation Algorithms (Section 5.1)
The algorithms presented in this section support those presented in the main text of the
paper, and are provided here for completeness.

Some of them may contain a step which

iterates over all teams that can take an outgoing transition (e.g., line 1 of algorithm 6, or
line 13 of algorithm 7). This step requires some further clarication: When iterating over
all outgoing teams that meet the condition, the algorithm consults the team-hierarchy to
carry out the iteration only for the

topmost

teams (in terms of the team-hierarchy) that

meet the condition. For instance, in our application domain, the team TASK-FORCE has
(among others) two subteams TRANSPORTS and ESCORTS. If a transition is allowed
to be taken by TRANSPORTS only, then an iteration over all teams that are allowed to
take the transition will not consider either ESCORTS or TASK-FORCE. However, if the
transition allows TASK-FORCE, then the iteration step will take place only onceit will
be executed once for the team TASK-FORCE, which is the parent team for TRANSPORTS
and ESCORTS.

130

Monitoring Teams by Overhearing

Algorithm 6 Team-Propagate-Down(plan Y , probability , beliefs, b, plans M )
1:

for all

Y

2:
3:
4:
5:
6:

teams T who are allowed to take an outgoing hierarchical-decomposition transition from

do

fc j c 2 M; c rst child of Y; c is to be taken by team T g
= j CT j
for all plans c 2 CT do
bt+1 (Y; :block )
bt+1 (Y; :block ) + 0
(c; 0 ; b; M )

CT
0

Team-Propagate-Down

Algorithm 7 Team-Propagate-Forward(team-hierarchy H , beliefs b, plans M )
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:

22:
23:

plans X 2 M do
bt+1 (X; :block )
0:0
bt+1 (X; block )
0:0
outx
0:0
x
0:0
for all plans X 2 M in post-order
for all

if

X is a leaf

outx

else

then

bt (X; :block )(1

{X is a parent}

do

{children in temporal order before parents}

e x ) {calculate probability of X terminating at time t}

outx is known { because post-order guarantees all children set it in line 21}
for all temporal outgoing transitions Tx!y from X do
x
x + (1 xy )xy
for all teams E who are allowed to take a temporal outgoing transition do
if x > 0 then {some transition can be taken}
for all temporal outgoing transitions Tx!y from X to be taken by E do

outx (1 xy )xy
if Tx!y leads to a successor plan Y then
bt+1 (Y; :block )
bt+1 (Y; :block ) + 
(Y; ; b; M )
else {Tx!y is a terminating transition}
outparent(x)
outparent(x) + (1 xy )xy {parent's outgoing probability is its chil-

Team-Propagate-Down
dren's}

bt+1 (X; block )
bt+1 (X; block ) + outx x
bt+1 (X; :block )
bt+1 (X; :block ) outx

131

Kaminka, Pynadath, & Tambe
Algorithm 8 below may require some clarications. First, it is important to note that the
plans

Y

(line 1) are traversed in pre-orderparents before children. The scaling calculation

depends on the parent having the scaled probability. Second, the iteration over sub-plans

Y

essentially captures all plans in the subtree rooted in the parent plan

in the subtree rooted by

P 's

child

X,

X 's

except for those

which already has been adjusted by YOYO* prior to

the call to this algorithm. In fact, the use of
sure that any of

P,

X 's

team

siblings, that are alternatives to

X

T

to scale only other plans makes

for the team

T,

do not get scaled.

This is correct because this procedure is called when incorporating evidence for

X

(rather

than any of its siblings).

Algorithm 8 Scale(parent plan P , team T , child plan X , beliefs b)
1:
2:
3:

subplans Y of P , where team(Y ) 6= T , in pre-order do
bt (Y;:block)
b (parent(Y ); :block )
bt+1 (Y; :block )
bt+1 (Y; :block )+ bt (parent
(Y );:block) t+1
bt (Y;block)
bt+1 (Y; block )
bt+1 (Y; block )+ bt (parent(Y );:block) bt+1 (parent(Y ); :block )

for all

References
Ontological overhearing. In Intelligent Agents VIII, Proceedings of the international workshop on Agents, Theories,
Architectures, and Languages (ATAL-2001).

Aiello, M., Busetta, P., Dona, A., & Serani, L. (2001).

Barber, K. S., & Martin, C. E. (2001). Dynamic reorganization of decision-making groups. In

Proceedings of the Fifth International Conference on Autonomous Agents (Agents-01),
pp. 513520. ACM Press.

Calder, R. B., Smith, J. E., Courtemanche, A. J., Mar, J. M. F., & Ceranowicz, A. Z. (1993).

Modsaf behavior simulation and control. In Proceedings of the Third Conference on
Computer Generated Forces and Behavioral Reresentation Orlando, Florida. Institute
for Simulation and Training, University of Central Florida.

Charniak, E., & Goldman, R. P. (1993). A Bayesian model of plan recognition.

Intelligence, 64 (1), 5379.

Articial

Cohen, P. R., Johnston, M., McGee, D., Oviatt, S., Pittman, J., Smith, I., Chen, L., & Clow,
J. (1997). Quickset: Multimodal interaction for distributed applications. In

Proceedings

of the Fifth Annual International Multimodal Conference (Multimedia '97), pp. 3140.
Cohen, P. R., & Levesque, H. J. (1990). Rational interaction as the basis for communication.

In Cohen, P. R., Morgan, J., & Pollack, M. E. (Eds.),

Intentions in Commu-

nication, Systems Development Foundation Benchmark Series, chap. 12, pp. 221255.
MIT Press.

Nous, 35.
Decker, K. (1995). Environment Centered Analysis and Design of Coordination Mechanisms.

Cohen, P. R., & Levesque, H. J. (1991). Teamwork.

Ph.D. thesis, Department of Computer Science, University of Massachusetts, Amherst.
Devaney, M., & Ram, A. (1998). Needles in a haystack: Plan recognition in large spatial

Proceedings of the Fifteenth National Conference
on Articial Intelligence (AAAI-98), pp. 942947 Madison, WI.
domains involving multiple agents. In

132

Monitoring Teams by Overhearing
Dunin-Keplicz, B., & Verbrugge, R. (2001).

The role of dialogue in collective problem

Proceedings of fth International Symposium on the Logical Formalization
of Commonsense Reasoning (Commonsense 2001), pp. 89104.
solving. In

Finin, T., Labrou, Y., & Mayeld (1997). KQML as an agent communication language. In
Bradshaw, J. (Ed.),

Software Agents. MIT Press.

Ghahramani, Z., & Jordan, M. I. (1997). Factorial hidden Markov models.

29, 245275.

Goldman, R. P., Geib, C. W., & Miller, C. A. (1999).
In

Machine Learning,

A new model of plan recognition.

Proceedings of the Conference on Uncertainty in Articial Intelligence (UAI-1999)

Stockholm, Sweden.
Grosz, B. (1996). Collaborating systems.

AI Magazine, 17 (2).

Grosz, B. J., & Kraus, S. (1999). The evolution of SharedPlans. In Wooldridge, M., & Rao,
A. (Eds.),

Foundations and Theories of Rational Agency, pp. 227262.

Grosz, B. J., & Kraus, S. (1996). Collaborative plans for complex group actions.

Intelligence, 86, 269358.

Articial

Han, K., & Veloso, M. (1999). Automated robot behavior recognition applied to robotic soccer. In

Proceedings of the IJCAI-99 Workshop on Team Behavior and Plan-Recognition.

Also appears in Proceedings of the 9th International Symposium of Robotics Research
(ISSR-99).
Horling, B., Benyo, B., & Lesser, V. (2001).

Using self-diagnosis to adapt organizational

Proceedings of the Fifth International Conference on Autonomous Agents
(Agents-01), pp. 529536.
Huber, M. J. (1996). Plan-Based Plan Recognition Models for the Eective Coordination of
Agents Through Observation. Ph.D. thesis, University of Michigan.
structures. In

Huber, M. J., & Hadley, T. (1997). Multiple roles, multiple teams, dynamic environment:

Proceedings of the First International Conference on Autonomous Agents (Agents-97), pp. 332339 Marina del Rey,
Autonomous netrek agents. In Johnson, W. L. (Ed.),
CA. ACM Press.

Intille, S. S., & Bobick, A. F. (1999). A framework for recognizing multi-agent action from

In Proceedings of the Sixteenth National Conference on Articial
Intelligence (AAAI-99), pp. 518525. AAAI Press.
visual evidence.

Jennings, N. R. (1993). Commitments and conventions: the foundations of coordination in
multi-agent systems.

Knowledge Engineering Review, 8 (3), 223250.

Jennings, N. R. (1995). Controlling cooperative problem solving in industrial multi-agent
systems using joint intentions.

Articial Intelligence, 75 (2), 195240.

Jordan, M. I., Ghahramani, Z., & Saul, L. K. (1997).

Hidden Markov decision trees.

Mozer, M. C., Jordan, M. I., & Petsche, T. (Eds.),

Processing Systems, Vol. 9, p. 501. The MIT Press.

In

Advances in Neural Information

Kaminka, G. A., Pynadath, D. V., & Tambe, M. (2001). Monitoring deployed agent teams.

Proceedings of the Fifth International Conference on Autonomous Agents (Agents01), pp. 308315.
In

133

Kaminka, Pynadath, & Tambe
Kaminka, G. A., & Tambe, M. (2000).
monitoring.

Robust multi-agent teams via socially-attentive

Journal of Articial Intelligence Research, 12, 105147.

Kinny, D., Ljungberg, M., Rao, A., Sonenberg, E., Tidhar, G., & Werner, E. (1992). Planned
team activity.

In Castelfranchi, C., & Werner, E. (Eds.),

Articial Social Systems,

Lecture notes in AI 830, pp. 227256. Springer Verlag, New York.
Kjærul, U. (1992).

A computational scheme for reasoning in dynamic probabilistic net-

Proceedings of the Conference on Uncertainty in Articial Intelligence (UAI1992), pp. 121129 San Mateo, CA. Morgan Kaufmann.

works. In

Knoblock, C. A., Minton, S., Ambite, J. L., Ashish, N., Modi, P. J., Muslea, I., Philpot,
A. G., & Tejada, S. (1998).

Modeling Web sources for information integration.

In

Proceedings of the Fifteenth National Conference on Articial Intelligence (AAAI-98).
Kumar, S., & Cohen, P. R. (2000). Towards a fault-tolerant multi-agent system architecture.

Proceedings of the Fourth International Conference on Autonomous Agents (Agents00), pp. 459466 Barcelona, Spain. ACM Press.
In

Kumar, S., Cohen, P. R., & Levesque, H. J. (2000). The adaptive agent architecture: Achiev-

Proceedings of the Fourth International Conference on Multiagent Systems (ICMAS-00), pp. 159166 Boston, MA.
ing fault-tolerance using persistent broker teams. In
IEEE Computer Society.

Lenser, S., Bruce, J., & Veloso, M. (2001).
tonomous legged soccer robots. In

Cmpack: A complete software system for au-

Proceedings of the Fifth International Conference

on Autonomous Agents (Agents-01), pp. 204211. ACM Press.

Lesh, N., Rich, C., & Sidner, C. L. (1999). Using plan recognition in human-computer collaboration. In

Proceedings of the Seventh International Conference on User Modelling

(UM-99) Ban, Canada.

Levesque, H. J., Cohen, P. R., & Nunes, J. H. T. (1990). On acting together. In

of the Eigth National Conference on Articial Intelligence (AAAI-90)

Proceedings

Menlo-Park,

CA. AAAI Press.
Marsella, C. S., Adibi, J., Al-Onaizan, Y., Kaminka, G. A., Muslea, I., Tallis, M., & Tambe,
M. (2001). On being a teammate: Experiences acquired in the design of robocup teams.

Journal of Autonomous Agents and Multi-Agent Systems, 4 (12).
Martin, D. L., Cheyer, A. J., & Moran, D. B. (1999).

The open agent architecture: A

framework for building distributed software systems.

13 (1-2), 92128.

Applied Articial Intelligence,

Ndumu, D. T., Nwana, H. S., Lee, L. C., & Collis, J. C. (1999). Visualizing and debugging

Proceedings of the Third International Conference
on Autonomous Agents (Agents-99). ACM Press.
distributed multi-agent systems. In

Payne, T. R., Sycara, K., Lewis, M., Lenox, T. L., & Hahn, S. (2000).

Varying the user

Proceedings of the Fourth International
Conference on Autonomous Agents (Agents-00), pp. 412418.
interaction within multi-agent systems.

In

Pechoucek, M., Marik, V., & Stepankova, O. (2000).

Role of acquaintance models in an

agent-based production planning. In Klusch, M., & Kerschberg, L. (Eds.),

134

Cooperative

Monitoring Teams by Overhearing
Information Agents IV, Proceedings of the Fourth International Workshop (CIA-2000),
No. 1860 in LNAI, pp. 179190. Springer Verlag.
Pechoucek, M., Marik, V., & Stepankova, O. (2001). Towards reducing communication trac
in multi-agent systems.

Journal of Applied System Studies.

Pynadath, D. V., & Wellman, M. P. (2000). Probabilistic state-dependent grammars for plan
recognition. In

Proceedings of the Conference on Uncertainty in Articial Intelligence

(UAI-2000), pp. 507514.

Rabiner, L. R. (1989). A tutorial on Hidden Markov Models and selected applications in

Proceedings of the IEEE, 77 (2), 257286.
Reed, C. (1998). Dialogue frames in agent communications. In Proceedings of the Third
International Conference on Multiagent Systems (ICMAS-98), pp. 246253.
speech recognition.

Rich, C., & Sidner, C. L. (1997).

COLLAGEN: When agents collaborate with people.

Proceedings of the First International Conference on Autonomous Agents (Agents-97), pp. 284291 Marina del Rey, CA. ACM Press.
Tambe, M. (1996). Tracking dynamic team activity. In Proceedings of the National Conference on Articial Intelligence (AAAI).
Tambe, M. (1997). Towards exible teamwork. Journal of Articial Intelligence Research,
7, 83124.
In Johnson, W. L. (Ed.),

Tambe, M., Adibi, J., Al-Onaizan, Y., Erdem, A., Kaminka, G. A., Marsella, S. C., &
Muslea, I. (1999). Building agent teams using an explicit teamwork model and learning.

Articial Intelligence, 111 (1), 215239.

Tambe, M., Johnson, W. L., Jones, R., Koss, F., Laird, J. E., Rosenbloom, P. S., & Schwamb,
K. (1995).

16 (1).

Intelligent agents for interactive simulation environments.

AI Magazine,

Tambe, M., Pynadath, D. V., Chauvat, N., Das, A., & Kaminka, G. A. (2000). Adaptive

In Proceedings of
the Fourth International Conference on Multiagent Systems (ICMAS-00), pp. 301308

agent integration architectures for heterogeneous team members.
Boston, MA.

Tidhar, G. (1993a). Team oriented programming: Preliminary report. Tech. rep. 41, Australian Articial Intelligence Institute, Melbourne, Australia.
Tidhar, G. (1993b). Team oriented programming: Social structures. Tech. rep. 47, Australian
Articial Intelligence Institute, Melbourne, Australia.
Vercouter, L., Beaune, P., & Sayettat, C. (2000).

Towards open distributed information

Working Notes of
the AAAI-2000 Workshop on Agent-Oriented Information Systems (AOIS-2000), pp.

systems by the way of a multi-agent conception framework.
2938.

135

In

Journal of Artificial Intelligence Research 17 (2002) 35-55

Submitted 12/01; published 8/02

Inferring Strategies for Sentence Ordering in Multidocument
News Summarization
Regina Barzilay
Noemie Elhadad
Kathleen R. McKeown

regina@cs.columbia.edu
noemie@cs.columbia.edu
kathy@cs.columbia.edu

Columbia University, Computer Science Department
1214 Amsterdam Ave
New York, 10027, NY, USA

Abstract
The problem of organizing information for multidocument summarization so that the
generated summary is coherent has received relatively little attention. While sentence
ordering for single document summarization can be determined from the ordering of sentences in the input article, this is not the case for multidocument summarization where
summary sentences may be drawn from different input articles. In this paper, we propose
a methodology for studying the properties of ordering information in the news genre and
describe experiments done on a corpus of multiple acceptable orderings we developed for
the task. Based on these experiments, we implemented a strategy for ordering information
that combines constraints from chronological order of events and topical relatedness. Evaluation of our augmented algorithm shows a significant improvement of the ordering over
two baseline strategies.

1. Introduction
Multidocument summarization poses a number of new challenges over single document summarization. Researchers have already investigated issues such as identifying repetitions or
contradictions across input documents and determining which information is salient enough
to include in the summary (Barzilay, McKeown, & Elhadad, 1999; Carbonell & Goldstein,
1998; Elhadad & McKeown, 2001; Mani & Bloedorn, 1997; McKeown, Klavans, Hatzivassiloglou, Barzilay, & Eskin, 1999; Radev & McKeown, 1998; White, Korelsky, Cardie, Ng,
Pierce, & Wagstaff, 2001). One issue that has received little attention is how to organize
the selected information so that the output summary is coherent. Once all the relevant
pieces of information have been selected across the input documents, the summarizer has
to decide in which order to present them so that the whole text makes sense. In single
document summarization, one possible ordering of the extracted information is provided by
the input document itself. However, Jing (1998) observed that, in single document summaries written by professional summarizers, extracted sentences do not always retain their
precedence orders in the summary. Moreover, in the case of multiple input documents, this
does not provide a useful solution: information may be drawn from different documents and
therefore, no single document can provide an ordering. Furthermore, the order between two
pieces of information can change significantly from one document to another.
In this paper, we provide a corpus based methodology for studying ordering. Our goal
was to develop a good ordering strategy in the context of multidocument summarization
c
2002
AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Barzilay, Elhadad & McKeown

targeted for the news genre. The first question we addressed is the importance of ordering. We conducted experiments which show that ordering significantly affects the reader’s
comprehension of a text. Our experiments also show that although there is no single ideal
ordering of information, ordering is not an unconstrained problem; the number of good orderings for a given text is limited. The second question addressed was the analysis and use
of data to infer a strategy for ordering. Existing corpus based methods, such as supervised
learning, are not easily applicable to our problem in part because of lack of training data.
Given that there are multiple possible orderings, a corpus providing one ordering for each
set of information does not allow us to differentiate between sentences which must be together and sentences which happen to be together. This led us to develop a corpus of data
sets, each of which contains multiple acceptable orderings of a single text. Such a corpus
is expensive to construct and therefore, does not provide enough data for pure statistical
approaches. Instead, we used a hybrid corpus analysis strategy that first automatically identifies commonalities across orderings. Manual analysis of the resulting clusters led to the
identification of constraints on ordering. Finally, we evaluated plausible ordering strategies
by asking humans to judge the results.
Our set of experiments together suggests an ordering algorithm that integrates constraints from an approximation of the temporal sequence of the underlying events and
relatedness between content elements. Our evaluation of plausible strategies measured the
usefulness of a Chronological Ordering algorithm used in previous summarization systems
(McKeown et al., 1999; Lin & Hovy, 2001) as well as an alternative, original strategy,
Majority Ordering. Our evaluation showed that the two ordering algorithms alone do not
yield satisfactory results. The first, Majority Ordering, is critically linked to the level of
similarity of information ordering across the input texts. When input texts have different
orderings, however, the algorithm produces unpredictable and unacceptable results. The
second, Chronological Ordering produces good results when the information is event-based,
and therefore, is temporally sequenced. When texts do not refer to events, but describe
states or properties, this algorithm falls short.
Our automatic analysis revealed that topical relatedness is an important constraint;
groups of related sentences tend to appear together. Our algorithm combines Chronological
Ordering with constraints from topical relatedness. Evaluation shows that the augmented
algorithm significantly outperforms either of the simpler methods alone. This strategy can
be characterized as bottom-up since final ordering of the text emerges from how the data
groups together, whether by related content or by chronological sequence. This contrasts
with top-down strategies such as RST (Moore & Paris, 1993; Hovy, 1993), schemas (McKeown, 1985) or plans (Dale, 1992) which impose an external, rhetorically motivated ordering
on the data.
In the following sections, we first show that the way information is ordered in a summary
can critically affect its overall quality. We then give an overview of our summarization
system, MultiGen. We next describe the two naive ordering algorithms and evaluate
them, followed by a study of multiple orderings produced by humans. This allows us
to determine how to improve the Chronological Ordering algorithm using cohesion as an
additional constraint. The last section describes the augmented algorithm along with its
evaluation.
36

Sentence Ordering in Multidocument News Summarization

2. Impact of Ordering on the Overall Quality of a Summary
Even though the problem of ordering information for multidocument summarization has
received relatively little attention, we hypothesize that good ordering is crucial to produce
summaries of quality. The consensus architecture of the state of the art summarizers consists
of a content selection module in which the salient information is extracted and a regeneration
module in which the information is reformulated into a fluent text. Ideally, the regeneration
component contains devices that perform surface repairs on the text by doing anaphora
resolution, introducing cohesion markers or choosing the appropriate lexical paraphrases.
Our claim in this paper is that the multidocument summarization architecture needs an
explicit ordering component. If two pieces of information extracted by the content selection
phase end up together but should not, in fact, be next one to another, surface devices will
not repair the impaired flow of information in the summary. An ordering strategy would
help avoid this situation.
It is clear that ordering cannot improve the output of earlier stages of a summarizer,
among them content selection1 ; however, finding an acceptable ordering can enhance user
comprehension of the summary and, therefore, its overall quality. Of course, surface devices
are still needed to smooth the output summary, but this is out of the scope of this paper (but
see (Schiffman, Nenkova, & McKeown, 2002)). In this section we show that the quality of
ordering has a direct effect on user comprehension of the summary. To verify our hypothesis,
we performed an experiment, measuring the impact of ordering on the user’s comprehension
of summaries.
We selected ten summaries produced by the Columbia Summarization system (McKeown, Barzilay, Evans, Hatzivassiloglou, Kan, Schiffman, & Teufel, 2001). It is composed
of a router and two underlying summarizers — MultiGen and DEMS (Difference Engine
for Multidocument Summarization). Depending on the type of input articles to be summarized, the router selects the appropriate summarizer. We evaluated this system through the
Document Understanding Conference 2001 (DUC) 2 evaluation, where summaries produced
by several systems were graded by human judges according to different criteria, among
them how well the information contained in the summary is ordered. To actually identify a
possible impact of ordering on comprehension, we selected only summaries where humans
judged the ordering as poor.3 For each summary, we manually reordered the sentences
generated by the summarizer, using the input articles as a reference. When doing so, we
did not change the content — all the sentences in the reordered summaries were the same
ones as in the originally produced summaries. This process yields ten additional reordered
summaries and thus, overall our collection contains twenty summaries.
Two subjects other than the authors participated in this experiment. Each summary
was read by one participant without having access to the input articles. We distributed the
summaries among the judges so that none of them read both an original summary and its
reordering. They were asked to grade how well the summary could be understood, using
the ratings “Incomprehensible,” “Somewhat comprehensible” or “Comprehensible”.
1. No information is added or deleted once the content selection is performed.
2. http://www-nlpir.nist.gov/projects/duc/
3. The selected summaries were produced by the DEMS system. We didn’t select any summary produced
by MultiGen because it implemented our ordering algorithm at the time. DEMS on the other hand,
had no specific ordering strategy implemented and thus provided us with the appropriate type of data.

37

Barzilay, Elhadad & McKeown

The results are shown in Figure 14 . Seven original summaries were considered incomprehensible by their judge, two were somewhat comprehensible, and only one original summary
was fully comprehensible. The reordered summaries obtained better grades overall — five
summaries were fully comprehensible, two were somewhat comprehensible, while three remained incomprehensible. To assess the statistical significance of our results, we applied
the Fisher exact test to our data set, conflating “Incomprehensible” and “Somewhat comprehensible” summaries into one category to obtain a 2x2 table. This test is adapted to
our case because of the reduced size of our data set. We obtained a p-value of 0.07 (Siegal
& Castellan, 1988), which means that if reordering is not, in general, helpful, there is only
a 7% chance that doing reordering anyway would produce a result this different in quality
from the original ordering. This experiment indicates that a good ordering can improve the
overall comprehensibility of a summary.
Summary set
d13
d19
d24
d31
d32
d39
d45
d50
d54
d56

Original
Incomprehensible
Somewhat comprehensible
Incomprehensible
Somewhat comprehensible
Incomprehensible
Incomprehensible
Incomprehensible
Incomprehensible
Incomprehensible
Comprehensible

Reordered
Incomprehensible
Comprehensible
Comprehensible
Comprehensible
Somewhat comprehensible
Incomprehensible
Incomprehensible
Comprehensible
Somewhat comprehensible
Comprehensible

Figure 1: Impact of ordering on the user comprehension of summaries.

In the case of some low-scoring summaries, it is clear that poor ordering is the likely
culprit. For instance, readers can easily identify that grouping the two following sentences
is an unsuitable choice and could be misleading. “Miss Taylor’s health problems started with
a fall from a horse when she was 13 and filming the movie National Velvet. The recovery of
Elizabeth Taylor, near death two weeks ago with viral pneumonia, was complicated by a yeast
infection, her doctors said Friday.” But in other cases, when information in a summary is
poorly ordered and readers cannot make sense of the text, we observed through interviews
with the readers that they tend to blame it on content selection rather than on ordering,
even if the content is not the issue. Thus, the issue of ordering is not isolated; it can affect
the overall quality of a summary.

3. MultiGen Overview
Our framework is the MultiGen system (McKeown et al., 1999), a multidocument summarizer which has been trained and tested on news articles. MultiGen is part of the
Columbia Summarization System. It operates on a set of news articles describing the same
4. The set names are the ones used in the DUC evaluation.

38

Sentence Ordering in Multidocument News Summarization

event, creating a summary which synthesizes common information across documents. The
system runs daily over real data within Newsblaster 5 , a tool which collects news articles
from multiple sources, organizes them into topical clusters and provides a summary for each
of the clusters.
In the case of multidocument summarization of articles about the same event, source
articles can contain both repetitions and contradictions. Extracting all the similar sentences would produce a verbose and repetitive summary, while extracting only some of the
similar sentences would produce a summary biased towards some sources. MultiGen uses
a comparison of extracted similar sentences to select the appropriate phrases to include in
the summary and reformulates them as new text.
MultiGen consists of an analysis and a generation component. The analysis component (Hatzivassiloglou, Klavans, & Eskin, 1999) identifies units of text which convey similar
information across the input documents using statistical techniques and shallow text analysis. Once similar text units are identified, we cluster them into themes. Themes are sets of
sentences from different documents that contain repeated information and do not necessarily contain sentences from all the documents (see two examples of themes in Figure 2). For
each theme, the generation component (Barzilay et al., 1999) identifies phrases which are
in the intersection of the theme sentences and selects them as part of the summary. The
intersection sentences are then ordered to produce a coherent text. At the end, for each
theme there will be a single corresponding generated output sentence in the summary. In
the following section, we describe different strategies for ordering the output sentences to
obtain a quality summary.
Theme 1
Mr. Salvi, 24, apparently killed himself in his prison cell last November.
The state wouldn’t execute him for killing two abortion clinic workers in 1994, so John
C. Salvi III took his own life.
John C. Salvi III, who was convicted of killing two people in a shooting spree on two
abortion clinics in 1994, killed himself in prison.
Theme 2
His attorneys said he attempted suicide twice before in prison.
His lawyers said that he twice had tried to commit suicide in jail, a charge authorities
have denied.
Figure 2: Two themes with their corresponding sentences. Theme 2 contains sentences from only
two articles, while Theme 1 contains sentences from three input articles.

4. Naive Ordering Algorithms Are Not Sufficient
When producing a summary, any multidocument summarization system has to choose in
which order to present the output sentences. In this section, we describe two algorithms
5. http://www.cs.columbia.edu/nlp/newsblaster

39

Barzilay, Elhadad & McKeown

for ordering sentences suitable for multidocument summarization in the news genre. The
first algorithm, Majority Ordering (MO), relies only on the original orders of sentences
in the input documents. The second one, Chronological Ordering (CO), uses time-related
features to order sentences. This strategy was originally implemented in MultiGen and
followed by other summarization systems (Radev, Jing, & Budzikowska, 2000; Lin & Hovy,
2001). In the MultiGen framework, ordering sentences is equivalent to ordering themes,
and we describe the algorithms in terms of themes. This makes sense because, ultimately,
the summary will be composed of a sequence of sentences, each one constructed from the
information in one theme. Our evaluation shows that these methods alone do not provide
an adequate strategy for ordering.
4.1 Majority Ordering
4.1.1 The Algorithm
In single document summarization, the order of sentences in the output summary is typically
determined by their order in the input text. This strategy can be adapted to multidocument
summarization. Consider two themes, T h 1 and T h2 ; if sentences from T h1 precede sentences
from T h2 in all input texts, then presenting T h 1 before T h2 is likely to be an acceptable
order. To use the majority ordering algorithm when the order between sentences from T h 1
and T h2 varies from one text to another, we must augment the strategy. One way to define
the order between T h1 and T h2 is to adopt the order occurring in the majority of the
texts where T h1 and T h2 occur. This strategy defines a pairwise order between themes.
However, this pairwise relation is not necessarily transitive. For example, given the themes
T h1 , T h2 and T h3 and the following situation: T h1 precedes T h2 in a text, T h2 precedes
T h3 in the same text or in another text, and T h 3 precedes T h1 in yet another text; there is a
conflict between the orders (T h1 , T h2 , T h3 ) and (T h3 , T h1 ). Since transitivity is a necessary
condition for a relation to be called an order, this relation does not form an order.
We, therefore, have to expand this pairwise relation to provide a total order. In other
words, we have to find a linear ordering between themes which maximizes the agreement
between the orderings provided by the input texts. For each pair of themes, T h i and T hj ,
we keep two counts, Ci,j and Cj,i ; Ci,j is the number of input texts in which sentences from
T hi occur before sentences from T hj , and Cj,i is the same for the opposite order. The weight
of a linear order (T hi1 , . . . , T hik ) is defined as the sum of the counts for every pair C il ,im ,
such that il ≤ im and l, m ∈ {1 . . . k}. Stating this problem in terms of a directed graph
where nodes are themes, and a vertex from T h i to T hj has the weight Ci,j , we are looking
for a path with maximal weight which traverses each node exactly once (see Figure 3). We
call such a graph a precedence graph.
The problem of finding a path with maximal weight has been addressed by Cohen,
Schapire, and Singer (1999) in the task of learning orderings. They adopt a two-stage
approach. In the first stage, given a training corpus of ordered instances and a set of
features describing them, a binary preference function is learned. In the second stage, new
instances are ordered so that agreement with the learned preference function is maximized.
To do so, Cohen et al. (1999) represent the preference function as a directed, weighted
graph. Our precedence graph can be seen as such a graph where the preference function
40

Sentence Ordering in Multidocument News Summarization

T h11 → T h12 → T h13
T h23 → T h22 → T h24
T h34 → T h31 → T h32 → T h33

Th 1
2

2

1

Th 2
2
1

1

Th 3

1
1

1

Th 4
Figure 3: Three input theme orderings and their corresponding precedence graph. T h ji is the
sentence part of the theme T hi in the input ordering j.

between the nodes T hi and T hj is Ci,j . The orderings from the input articles provide us
directly with a preference function and, therefore, we do not need to learn it.
Unfortunately this problem is NP-complete; Cohen et al. (1999) prove it by reducing
from CYCLIC-ORDERING (Galil & Megido, 1977). However, using a modified version
of topological sort provides us with an approximate solution. For each node, we assign a
weight equal to the sum of the weights of its outgoing edges minus the sum of the weights
of its incoming edges. We first pick up the node with maximum weight, ordering it ahead
of the other nodes, delete it and its outgoing edges from the precedence graph and update
properly the weights of the remaining nodes in the graph. We then iterate through the
nodes until the graph is empty. Cohen et al. (1999) show that this algorithm produces a
tight approximation of the optimal solution. Currently MultiGen uses an implementation
of this algorithm for its ordering component.
Figures 4 and 5 show examples of produced summaries. One feature of this strategy is
that it can produce several orderings with the same weight. This happens when there is a
tie between two opposite orderings. In this situation, this strategy does not provide enough
constraints to determine one optimal ordering; an ordering is chosen randomly among the
orders with maximal weight.
4.1.2 Evaluation
We asked three human judges (not including ourselves) to classify the quality of the order
of information in 25 summaries produced using the MO algorithm into three categories—
Poor, Fair and Good. We use an operational definition of a Poor summary as a text whose
41

Barzilay, Elhadad & McKeown

The man accused of firebombing two Manhattan subways in 1994 was convicted Thursday after the jury
rejected the notion that the drug Prozac led him to commit the crimes.
He was found guilty of two counts of attempted murder, 14 counts of first-degree assault and two counts
of criminal possession of a weapon.
In December 1994, Leary ignited firebombs on two Manhattan subway trains. The second blast injured 50
people – 16 seriously, including Leary.
Leary wanted to extort money from the Transit Authority.
The defense argued that Leary was not responsible for his actions because of ”toxic psychosis” caused by
the Prozac.

Figure 4: A summary produced using the Majority Ordering algorithm, graded as Good.

Hemingway, 69, died of natural causes in a Miami jail after being arrested for indecent exposure.
A book he wrote about his father, ”Papa: A Personal Memoir,” was published in 1976.
He was picked up last Wednesday after walking naked in Miami.
”He had a difficult life.”
A transvestite who later had a sex-change operation, he suffered bouts of drinking, depression and drifting,
according to acquaintances.
”It’s not easy to be the son of a great man,” Scott Donaldson, told Reuters.
At the time of his death, he lived in the Coconut Grove district where he was well-known to its Bohemian
crowd.
He had been due to appear in court later that day on charges of indecent exposure and resisting arrest.
He sometimes went by the name of Gloria and wore women’s clothes.
The cause of death was hypertension and cardiovascular disease.
Taken to the Miami-Dade Women’s Detention Center, he was found dead in his cell early on Monday,
spokeswoman Janelle Hall said.
He was booked into the women’s jail because he had a sex-change operation, Hall added.

Figure 5: A summary produced using the Majority Ordering algorithm, graded as Poor.

readability would be significantly improved by reordering its sentences. A Fair summary
is a text which makes sense, but reordering of some sentences can yield a better readability. Finally, a summary which cannot be further improved by any sentence reordering is
considered a Good summary.
The judges were asked to grade the summaries taking into account only the order in
which the information is presented. To help them focus on this aspect of the texts, we
resolved dangling references beforehand. Figure 13 shows the grades assigned to the summaries — three summaries were graded as Poor, 14 were graded as Fair, and eight were
graded as Good. We are showing here the majority grade that is selected by at least two
judges. This was made possible because in our experiments, judges had strong agreement;
they never gave three different grades to a summary.
The MO algorithm produces a small number of Good summaries, but most of the
summaries were graded as Fair. For instance, the summary graded Good shown in Figure 4
orders the information in a natural way; the text starts with a sentence summary of the
event, then the outcome of the trial is given, a reminder of the facts that caused the trial
and a possible explanation of the facts. Looking at the Good summaries produced by
MO, we found that it performs well when the input articles follow the same order when
42

Sentence Ordering in Multidocument News Summarization

presenting the information. In other words, the algorithm produces a good ordering if the
input articles’ orderings have high agreement.
On the other hand, when analyzing Poor summaries, we observed that the input texts
have very different orderings. By trying to maximize the agreement of the input texts’
orderings, MO produces a new ordering that does not occur in any input text. The ordering
is, therefore, not guaranteed to be acceptable. An example of a new produced ordering is
given in Figure 5. The summary would be more readable if several sentences were moved
around. An example of a better ordering is given in Figure 6. In this summary, the
three sentences related to the fact that the subject had a sex-change operation are grouped
together, while in the one produced by the majority ordering algorithm, they are scattered
throughout the summary.

Hemingway, 69, died of natural causes in a Miami jail after being arrested for indecent exposure.
The cause of death was hypertension and cardiovascular disease.
He was picked up last Wednesday after walking naked in Miami.
He had been due to appear in court later that day on charges of indecent exposure and resisting arrest.
Taken to the Miami-Dade Women’s Detention Center, he was found dead in his cell early on Monday,
spokeswoman Janelle Hall said.
He was booked into the women’s jail because he had a sex-change operation, Hall added.
A transvestite who later had a sex-change operation, he suffered bouts of drinking, depression and drifting,
according to acquaintances.
He sometimes went by the name of Gloria and wore women’s clothes.
”He had a difficult life.”
”It’s not easy to be the son of a great man,” Scott Donaldson, told Reuters.
At the time of his death, he lived in the Coconut Grove district where he was well-known to its Bohemian
crowd.
A book he wrote about his father, ”Papa: A Personal Memoir,” was published in 1976.

Figure 6: One possible better ordering for the summary graded as Poor.

This algorithm can be used to order sentences accurately if we are certain that the
input texts follow similar organizations. This assumption may hold in limited domains
where documents have a fixed organization of the information. However, in our case, the
input texts we are processing do not have such regularities. Looking at the daily statistics of
Newsblaster which collects clusters of related articles to be synthesized into one summary,
we notice that the typical cluster size is seven. But every day there are several clusters
which contain more than 20 and up to 70 articles to be summarized into single summaries 6 .
With such a big number of input articles, we cannot assume that they will all have similar
ordering of the information. MO’s performance critically depends on the agreement of
orderings in the input texts; we, therefore, need an ordering strategy which can fit any
input data. From here on, we will focus only on the Chronological Ordering algorithm and
techniques to improve it.

6. These giant clusters correspond to the “hot topics” of the day in the news.

43

Barzilay, Elhadad & McKeown

4.2 Chronological Ordering
4.2.1 The Algorithm
Multidocument summarization of news typically deals with articles published on different
dates, and articles themselves cover events occurring over a wide range of time. Using
chronological order in the summary to describe the main events helps the user understand
what has happened. It seems like a natural and appropriate strategy. As mentioned earlier,
in our framework, we are ordering themes; using this strategy, we, therefore, need to assign
a date to themes. To identify the date an event occurred requires a detailed interpretation
of temporal references in articles. While there have been recent developments in disambiguating temporal expressions and event ordering (Wiebe, O’Hara, Ohrstrom-Sandgren, &
McKeever, 1998; Mani & Wilson, 2000; Filatova & Hovy, 2001), correlating events with the
date on which they occurred is a hard task. In our case, we approximate the theme time
by its first publication time; that is, the first time the theme has been reported in our set
of input articles (see Figure 7). It is an acceptable approximation for news events; the first
publication time of an event usually corresponds to its occurrence in real life. For instance,
in a terrorist attack story, the theme conveying the attack itself will have a date previous
to the date of the theme describing a trial following the attack.
Theme 5
Oct 5, 11:35am

Oct 6, 6:13am
Oct 5, 10:20am

Hours after the crash, U.S. officials said that the tragedy had been
caused by an S-200 missile fired by Ukraine during military exercises
on the Crimean Peninsula.
U.S. officials said immediately after the crash that they had evidence
the passenger jet was hit by a Ukrainian missile.
But U.S. officials said that the crash had been caused by an S-200
missile fired mistakenly by Ukrainian forces during military exercises
on the Crimean Peninsula.

Figure 7: A theme with its corresponding sentences. The time theme is shown underlined; it is the
earliest publication time of the sentences.

Articles released by news agencies are marked with a publication time, consisting of a
date and a time with two fields (hour and minutes). Articles from the same news agency
are thus guaranteed to have different publication times. This is also quite likely for articles
coming from different news agencies. During the development of MultiGen, we processed
hundreds of articles, and we never encountered two articles with the same publication time.
Thus, the publication time serves as a unique identifier over articles. As a result, when two
themes have the same publication time, it means that they both are reported for the first
time in the same article.
Our Chronological Ordering (CO) algorithm takes as input a set of themes and orders
them chronologically whenever possible. Each theme is assigned a date corresponding to
its first publication. To do so, we select for each theme the sentence that has the earliest
publication time. We call it the time stamp sentence and assign its publication time as
44

Sentence Ordering in Multidocument News Summarization

the time stamp of the theme. This establishes a partial order over the themes. When two
themes have the same date (that is, they are reported for the first time in the same article)
we sort them according to their order of presentation in this article. This results in a total
order over the input themes. Figures 8 and 9 show examples of summaries produced using
CO.
One of four people accused along with former Pakistani Prime Minister Nawaz Sharif has agreed to testify
against him in a case involving possible hijacking and kidnapping charges, a prosecutor said Wednesday.
Raja Quereshi, the attorney general, said that the former Civil Aviation Authority chairman has already
given a statement to police.
Sharif’s lawyer dismissed the news when speaking to reporters after Sharif made an appearance before a
judicial magistrate to hear witnesses give statements against him. Sharif has said he is innocent.
The allegations stem from an alleged attempt to divert a plane bringing army chief General Pervez Musharraf
to Karachi from Sri Lanka on October 12.

Figure 8: A summary produced using the Chronological Ordering algorithm graded as Good.

Thousands of people have attended a ceremony in Nairobi commemorating the first anniversary of the
deadly bombings attacks against U.S. Embassies in Kenya and Tanzania.
Saudi dissident Osama bin Laden, accused of masterminding the attacks, and nine others are still at large.
President Clinton said, ”The intended victims of this vicious crime stood for everything that is right about
our country and the world”.
U.S. federal prosecutors have charged 17 people in the bombings.
Albright said that the mourning continues.
Kenyans are observing a national day of mourning in honor of the 215 people who died there.

Figure 9: A summary produced using the Chronological Ordering algorithm graded as Poor.

4.2.2 Evaluation
Following the same methodology we used for the MO algorithm evaluation, we asked three
human judges (not including ourselves) to grade 25 summaries generated by the system
using the CO algorithm applied to the same collection of input texts. The results are
shown in Figure 13: ten summaries were graded as Poor, eight were graded as Fair and
seven were graded as Good.
Our first suspicion was that our approximation deviates too much from the real chronological order of events and, therefore, lowers the quality of sentence ordering. To verify
this hypothesis, we identified sentences that broke the original chronological order and restored the ordering manually. Interestingly, the displaced sentences were mainly background
information. The evaluation of the modified summaries shows no visible improvement.
When comparing Good (Figure 8) and Poor (Figure 9) summaries, we notice two phenomena: first, many of the badly placed sentences cannot be ordered based on their temporal occurrence. For instance, in Figure 9, the sentence quoting Clinton is not one event
in the sequence of events being described, but rather, a reaction to the main events. A
tool assigning time stamps would assign to this sentence the date at which Clinton made
his statement. This is also true for the sentence reporting Albright’s reaction. Assigning
45

Barzilay, Elhadad & McKeown

a date to a reaction, or more generally to any sentence conveying background information,
and placing it into the chronological stream of the main events does not produce a logical
ordering. The ordering of these themes is, therefore, not covered by the CO algorithm. Furthermore, some sentences cannot be assigned any time stamp. For instance, the sentence,
“The vast, sparsely inhabited Xinjiang region, largely desert, has many Chinese military
and nuclear installations and civilian mining.” describes a state rather than an event and,
therefore, trying to describe it in temporal terms is invalid. Thus the ordering cannot be
improved at the temporal level.
The second phenomenon we observed is that Poor summaries typically contain abrupt
switches of topics and are generally incoherent. For instance, in Figure 9, quotes from
US officials (third and fifth sentences) are split, and sentences about the mourning (first
and sixth sentences) appear too far apart in the summary. Grouping them together would
increase the readability of the summary. At this point, we need to find additional constraints
to improve the ordering.

5. Improving the Ordering: Experiments and Analysis
In the previous section, we showed that using naive ordering algorithms does not produce
satisfactory orderings. In this section, we investigate through experiments with humans
how to identify patterns of orderings that can improve the algorithm.
5.1 Collecting a corpus of multiple orderings
Sentences in a text can be ordered in a number of ways, and the text as a whole will still
convey the same meaning. But the majority of possible orders are likely to be unacceptable because they break conventions of information presentation. One way to identify these
conventions is to find commonalities among different acceptable orderings of the same information. Extracting regularities in several acceptable orderings can help us specify ordering
constraints for a given input type. There is no naturally occurring existing collection of
summaries for multiple documents that we aware of 7 . But even such a collection would not
be sufficient since we want to analyze a collection of multiple summaries over the same set
of articles. We created our own collection of multiple orderings produced by different humans. Using this collection, we studied common behaviors and mapped them to strategies
for ordering.
Our collection of multiple orderings, along with our test corpus is available at
http://www.cs.columbia.edu/~noemie/ordering/. We collected ten sets of articles for
this collection. Each set consisted of two to three news articles reporting the same event.
For each set, we manually selected the intersection sentences, simulating MultiGen 8 . On
average, each set contained 8.8 intersection sentences. The sentences were cleaned of explicit references (for instance, occurrences of “the President” were resolved to “President
Clinton”) and connectives, so that participants would not use them as clues for ordering.
Ten subjects participated in the experiment, and they each built one ordering per set of
7. In a recent attempt, NIST for the DUC conference collected sets of articles to summarize and one
summary per set.
8. We performed a manual simulation to ensure that ideal data was provided to the subjects of the experiments.

46

Sentence Ordering in Multidocument News Summarization

intersection sentences. Each subject was asked to order the intersection sentences of a set
so that they form a readable text. Overall, we obtained 100 orderings, ten alternative
orderings per set. Figure 10 shows the ten alternative orderings collected for one set.
Participant
Participant
Participant
Participant
Participant
Participant
Participant
Participant
Participant
Participant

1
2
3
4
5
6
7
8
9
10

D
D
D
D
D
D
D
D
D
D

BGIHFCJAE
GBICFAJEH
BIGFJAEHC
CFGIBJAHE
GBIHFJACE
GIBFCEHJA
BGIFCHEJA
BCFGIEHAJ
GIBEHFAJC
BGICFAJEH

Figure 10: Multiple orderings for one set in our collection. A, B, . . . J stand for sentences. Underlined are automatically identified blocks.

We first observed that a surprisingly large portion of the orderings are different. Out
of the ten sets, only two sets had some identical orderings (in one set, two orderings were
identical while in the other set, there were two pairs of identical orderings). This variety
in the produced orderings can be interpreted as suggesting that not all the orderings were
actually valid or that the task was maybe too hard for the subjects to allow them to
produce reasonable orderings. In fact, all the subjects were satisfied with the orderings
they produced. Furthermore, we manually went through all the 100 orderings, and all
appeared to be valid. In other words, there are many acceptable orderings given one set of
sentences. This confirms the intuition that we do not need to look for a single ideal total
ordering but rather construct an acceptable one.
Looking at these various orderings, one might also conclude that any ordering would
do just as well as any other. One piece of evidence against this statement is that, as
shown in section 2, some orderings yield incomprehensible texts and thus should be avoided.
Furthermore, for a text with n sentences, there are n! possible orderings, but only a small
fraction of those are actually valid orderings. One way to validate this claim would be to
enumerate all the possible orderings of a single text and evaluate each one of them. This
would be doable for very small texts (a text of 5 sentences has 120 possible orderings)
but not for texts of a reasonable size. A more feasible way to validate our claim is to get
multiple orderings of the same text from a large number of subjects. We asked subjects to
order one text of eight sentences. There is a maximum of 40,320 possible orderings for these
sentences. While 50 subjects participated, we only obtained 21 unique orderings, showing
that the number of acceptable orderings does not grow as fast as the number of participants.
We can conclude that only a small fraction of all possible orderings of the information in a
text contains orderings that render a readable text.
47

Barzilay, Elhadad & McKeown

5.2 Analysis
The several alternative orderings produced for a single summary exhibit commonalities.
We noticed that, within the multiple orderings of a set, some sentences always appear
together. They do not appear in the same order from one ordering to another, but they
share an adjacency relation. From now on, we refer to them as blocks. For each set, we
identify blocks by automatically clustering sentences across orderings. We use as a distance
metric between two sentences, the average number of sentences that separate them over all
orderings. In Figure 10, for instance, the distance between sentences D and G is 2. The
blocks identified by clustering are: sentences B, D, G and I; sentences A and J; sentences
C and F; and sentences E and H.
We observed that all the blocks in the experiment correspond to clusters of topically
related sentences. These blocks form units of text dealing with the same subject. In
other words, all valid orderings contain blocks of topically related sentences. The notion
of grouping topically related sentences is known as cohesion. As defined by Hasan (1984),
cohesion is a device for “sticking together” different parts of the text. Studies show that
the level of cohesion has a direct impact on reading comprehension (Halliday & Hasan,
1976). Therefore, good orderings are cohesive; this is what makes the summary readable.
Conversely, the evaluation of the CO algorithm showed that the summaries that were judged
invalid contain abrupt switches of topic. In other words, orderings that are not cohesive
are graded poorly. There is a correlation between the quality of the ordering and cohesion.
Incorporating cohesion constraint into our ordering strategy by opportunistically grouping
sentences together would be beneficial. Cohesion is achieved by surface devices, such as
repetition of words and coreferences. We describe next how we include cohesion in the CO
algorithm based on these surface features.

6. The Augmented Algorithm
Disfluencies arise in the output of the CO algorithm when topics are distributed over the
whole text, violating cohesion properties (McCoy & Cheng, 1991). A typical scenario is
illustrated in Figure 11. The inputs are texts T 1 , T2 , T3 (ordered by publication time). A1 ,
A2 and A3 belong to the same theme, whose intersection sentence is A, and similarly for
B and C. The themes A and B are topically related, but C is not related. Summary S 1 ,
based only on chronological clues, contains two topical shifts; from A to C and back from
C to B. A better summary would be S2 , which keeps A and B together.
6.1 The Algorithm
Our goal is to remove disfluencies from the summary by grouping together topically related
themes. The main technical difficulty in incorporating cohesion in our ordering algorithm is
to identify and to group topically related themes across multiple documents. In other words,
given two themes, we need to determine if they belong to the same cohesion block. For a
single document, topical segmentation (Hearst, 1994) could be used to identify blocks, but
this technique is not a possibility for identifying cohesion between sentences across multiple
documents. Segmentation algorithms typically exploit the linear structure of an input text;
in our case, we want to group together sentences belonging to different texts.
48

Sentence Ordering in Multidocument News Summarization

T1

T2

T3

S1

S2

A1
...
C1

C2
...
A2
B2

A3
B3
...
C3

A

A

C

B

B

C

Figure 11: Input texts T1 T2 T3 are summarized by the Chronological Ordering (S1 ) or by the Augmented algorithm (S2 ).

Our solution consists of the following steps. In a preprocessing stage, we segment each
input text (Kan, Klavans, & McKeown, 1998) based on word distribution and coreference
analysis, so that given two sentences within the same text, we can determine if they are
topically related. Assume the themes A and B exist, where A contains sentences (A 1 . . . An ),
and B contains sentences (B1 . . . Bm ). Recall that a theme is a set of sentences conveying
similar information drawn from different input texts. We denote #AB to be the number of
pairs of sentences (Ai , Bj ) which appear in the same text, and #AB + to be the number of
sentence pairs which appear in the same text and are in the same segment.
In the first stage, for each pair of themes A and B, we compute the ratio #AB + /#AB
to measure the relatedness of two themes. This measure takes into account both positive
and negative evidence. If most of the sentences in A and B that appear together in the same
texts are also in the same segments, it means that A and B are highly topically related. In
this case, the ratio is close to 1. On the other hand, if among the texts containing sentences
from A and B, only a few pairs are in the same segments, then A and B are not topically
related. Accordingly, the ratio is close to 0. A and B are considered related if this ratio is
higher than a predetermined threshold. We determined experimentally its value to be 0.6.
This strategy defines pairwise relations between themes. A transitive closure of this
relation builds groups of related themes and, as a result, ensures that themes that do not
appear together in any article but which are both related to a third theme will still be
linked. This creates an even higher degree of relatedness among themes. Because we use a
threshold to establish pairwise relations, the transitive closure does not produce elongated
chains that could link together unrelated themes. We are now able to identify topically
related themes. At the end of the first stage, they are grouped into blocks.
In a second stage, we assign a time stamp to each block of related themes using the
earliest time stamp of the themes it contains. We adapt the CO algorithm described in 4.2.1
to work at the level of the blocks. The blocks and the themes correspond to, respectively,
themes and sentences in the CO algorithm. By analogy, we can easily show that the
adapted algorithm produces a complete order of the blocks. This yields a macro-ordering
of the summary. We still need to order the themes inside each block.
In the last stage of the augmented algorithm, for each block, we order the themes it
contains by applying the CO algorithm to them. Figure 12 shows an example of a summary
produced by the augmented algorithm.
49

Barzilay, Elhadad & McKeown

This algorithm ensures that cohesively related themes will not be spread over the text
and decreases the number of abrupt switches of topics. Figure 12 shows how the Augmented
algorithm improves the sentence order compared with the order in the summary produced
by the CO algorithm in Figure 9; sentences quoting US officials are now grouped together,
and so are the descriptions of the mourning.
Thousands of people have attended a ceremony in Nairobi commemorating the first anniversary of the
deadly bombings attacks against U.S. Embassies in Kenya and Tanzania. Kenyans are observing a national
day of mourning in honor of the 215 people who died there.
Saudi dissident Osama bin Laden, accused of masterminding the attacks, and nine others are still at large.
U.S. federal prosecutors have charged 17 people in the bombings.
President Clinton said, ”The intended victims of this vicious crime stood for everything that is right about
our country and the world”. Albright said that the mourning continues.

Figure 12: A summary produced using the Augmented algorithm. Related sentences are
grouped into paragraphs.

6.2 Evaluation
Following the same methodology used to evaluate the MO and the CO algorithms, we asked
the judges to grade 25 summaries produced by the Augmented algorithm. Results are shown
in Figure 13.
The manual effort needed to compare and judge system output is extensive considering
that each human judge had to read three summaries for each input set as well as skim the
input texts to verify that no misleading information was introduced in the summaries. We
collected a corpus of 25 sets of articles for evaluation. Overall, there were 75 summaries to
be evaluated. The size of our corpus is comparable with the collection used for the DUC
evaluation (30 sets of articles). This evaluation shows a significant improvement in the
quality of the orderings from the CO algorithm to the Augmented algorithm. To assess the
significance of the improvement, we used the Fisher exact test, conflating Poor and Fair
summaries into one category (p-value of 0.04). The augmented algorithm also shows an
improvement over the MO algorithm (p-value of 0.07).

Majority Ordering
Chronological Ordering
Augmented Ordering

Poor
3
10
3

Fair
14
8
8

Good
8
7
14

Figure 13: Evaluation of the the Majority Ordering, the Chronological Ordering and the Augmented Ordering.

50

Sentence Ordering in Multidocument News Summarization

7. Related Work
Finding an acceptable ordering has not been studied before in domain independent text
summarization. In single document summarization, summary sentences are typically arranged in the same order that they were found in the full document, although Jing (1998)
reports that human summarizers do sometimes change the original order. In multidocument
summarization, the summary consists of fragments of text or sentences that were selected
from different texts. Thus, there is no complete ordering of summary sentences that can be
found in the original documents.
In domain dependent summarization, it is possible to establish possible orderings a
priori. A valid ordering is traditionally derived from a manual analysis of a corpus of
texts in the domain, and it typically operates over a set of semantic concepts. A semantic
representation of the information is usually available as input to the ordering component.
For instance, in the specific domain of news on the topic of terrorist attacks, summaries
can be constructed by first describing the place of the attack, followed by the number of
casualties, who the possible perpetrators are, etc.
Another alternative when ordering information, still in the domain dependent framework, is to use a more data driven approach, which produces a more flexible output. A
priori defined simple ordering strategies are combined together by looking at a set of features from the input. Elhadad and McKeown (2001) use such techniques to produce patient
specific summaries of technical medical articles. Examples of features which influence the
ordering are presence of contradiction or repetition, relevance to the patient characteristics,
or type of results being reported. A linear combination of these features assigns a weight to
each semantic predicate to be included in the output, allowing them to be ordered. In this
case, the features are domain dependent and have been identified through corpus analysis
and interviews with physicians. In the case of a domain independent system, it would be
an entire new challenge to define and compute such a set of features.
Producing a good ordering of information is also a critical task for the generation community, which has extensively investigated the issue (McKeown, 1985; Moore & Paris, 1993;
Hovy, 1993; Bouayad-Agha, Power, & Scott, 2000; Mooney, Carberry, & McCoy, 1990). One
approach is top-down, using schemas (McKeown, 1985) or plans (Dale, 1992) to determine
the organizational structure of the text. This approach postulates a rhetorical structure
which can be used to select information from an underlying knowledge base. Because the
domain is limited, an encoding can be developed of the kinds of propositional content that
match rhetorical elements of the schema or plan, thereby allowing content to be selected
and ordered. Rhetorical Structure Theory (RST) allows for more flexibility in ordering content by establishing relations between pairs of propositions. Constraints based on intention
(e.g., Moore & Paris, 1993), plan-like conventions (e.g., Hovy, 1993), or stylistic constraints
(e.g., Bouayad-Agha et al., 2000) are used as preconditions on the plan operators containing
RST relations to determine when a relation is used and how it is ordered with respect to
other relations. Another approach (Mooney et al., 1990) is bottom-up and is used to group
together stretches of text in a long, generated document by finding propositions that are
related by a common focus. Since this approach was developed for a generation system, it
finds related propositions by comparisons of proposition arguments at the semantic level.
51

Barzilay, Elhadad & McKeown

In our case, we are dealing with a surface representation, so we find alternative methods
for grouping text fragments.
A more recent approach by Duboue and McKeown (2001) has been implemented to
automatically estimate constraints on information ordering in the medical domain, at the
content planning stage. Using a collection of semantically tagged transcripts written by
domain experts, Duboue and McKeown (2001) identify basic adjacency patterns contained
within a plan, as well as their ordering. MultiGen generates summaries of news on any
topic. In such an unconstrained domain, it would be impossible to enumerate the semantics
for all possible types of sentences which could match the elements of a schema, a plan or
rhetorical relations. For instance, Duboue and McKeown build their content planner based
on a set of 29 semantic categories; in our case, there is no such regularity in the input
information. Furthermore, it would be difficult to specify a generic rhetorical plan for a
summary of news. Instead, content determination in MultiGen is opportunistic, depending
on the kinds of similarities that happen to exist between a set of news documents. Similarly,
we describe here an ordering scheme that is opportunistic and bottom-up, depending on
the cohesion and temporal connections that happen to exist between selected text.
Our ordering component takes place after the content selection of the information in
a pipeline architecture, in contrast to generation systems, where usually the ordering and
the content selection come in tandem. This separation might come at a cost — if there is
no good ordering to the given extracted information, it is not possible to go back to the
content selection to extract new information. In summarization, content selection is driven
by salience criteria. We believe that the same ordering strategy should work with different
content selectors, independently of their salience criteria. Therefore, we choose to keep the
two components, selection and ordering, as two separate modules.

8. Conclusion and Future Work
In this paper we investigated information ordering constraints in multidocument summarization in the news genre. We evaluated two alternative ordering strategies, Chronological
Ordering (CO) and Majority Ordering (MO). Our experiments show that MO performs well
only when all input texts follow similar organization of the information. In the domains
where this constraint holds, MO would be an appropriate and highly effective strategy. But
in the news genre we cannot make this assumption; thus it is not an appropriate solution.
The Chronological Ordering (CO) algorithm can provide an acceptable solution for many
cases, but is not sufficient when summaries contain information that is not event based.
Our experiments, using a corpus that we collected of multiple alternative summaries each of
multiple documents, show that cohesion is an important constraint contributing to ordering.
Moreover, they also show that appropriate ordering of information is critical to allow for
easy comprehension of the summary and that it is not the case that all possible orderings of
information are acceptable. We developed an operational algorithm that integrates cohesion
as part of the CO algorithm, and implemented it as part of the MultiGen summarization
system. Our evaluation of the system shows significant improvement in summary quality.
While in this paper we focused on augmenting the CO algorithm, we believe that MO
is a promising strategy and should not be neglected. It is clear that different forms of
summarization are useful in different situations, depending on the intended purpose of
52

Sentence Ordering in Multidocument News Summarization

the summary and on the types of documents summarized. For our future work, we plan
to build on the approach we used for the DUC 2001 evaluation, where we developed a
summarizer that would use different algorithms for summary generation depending on the
type of input text. We suspect that ordering strategies may differ also, depending on
the type of summary. Our work will first investigate whether we can use our augmented
algorithm for other summary types. If the algorithm does not yield good orderings, we will
investigate through corpus analysis other summary type specific constraints. We suspect
that our augmented algorithm may apply, for instance, to biographical summaries, since
the information being summarized is a mixture of event-based information that can be
chronologically ordered along with descriptive information about the person. It is unclear
whether it can apply to other types of summaries such as summaries of different events,
since pieces of information may not be temporally related to each other. We also plan to
identify the types of summaries which would benefit from using the MO algorithm or an
augmented version of it (the same way the CO algorithm was augmented with the cohesion
constraint).

9. Acknowledgments
This work was partially supported by DARPA grant N66001-00-1-8919, a Louis Morin
scholarship and a Viros scholarship. We thank Eli Barzilay for providing help with the
experiments interface, Michael Elhadad for the useful discussions and comments, and all
the many voluntary participants in the experiments. Our initial work on the problem was
presented at the Human Language Technologies Conference (San Diego, 2001). We also
thank the anonymous reviewers of HLT and JAIR for their comments.

References
Barzilay, R., McKeown, K., & Elhadad, M. (1999). Information fusion in the context of
multi-document summarization. In Proc. of the 37th Annual Meeting of the Assoc. of
Computational Linguistics.
Bouayad-Agha, N., Power, R., & Scott, D. (2000). Can text structure be incompatible with
rhetorical structure?. In Proceedings of the First International Conference on Natural
Language Generation (INLG’2000), Mitzpe Ramon, Israel.
Carbonell, J., & Goldstein, J. (1998). The use of mmr, diversity-based reranking for reordering documents and producing summaries. In Proceedings of the 21st Annual
International ACM SIGIR Conference on Research and Development in Information
Retrieval.
Cohen, W., Schapire, R., & Singer, Y. (1999). Learning to order things. Journal of Artificial
Intelligence, 10, 243–270.
Dale, R. (1992). Generating Referring Expressions: Constructing Descriptions in a Domain
of Objects and Processes. MIT Press, Cambridge, MA.
Duboue, P., & McKeown, K. (2001). Empirically estimating order constraints for content
planning in generation. In Proceedings of the ACL/EACL 2001.
53

Barzilay, Elhadad & McKeown

Elhadad, N., & McKeown, K. (2001). Generating patient specific summaries of medical
articles. In Proceedings of the NAACL 2001 Workshop on Automatic Summarization.
Filatova, E., & Hovy, E. (2001). Assigning time-stamps to event-clauses. In Proceedings of
the AACL/EACL 2001 Workshop on Temporal and Spatial Information Processing.
Galil, Z., & Megido, N. (1977). Cyclic ordering is np-complete. Theoretical Compter Science,
5, 179–182.
Halliday, M., & Hasan, R. (1976). Cohesion in English. Longman.
Hasan, R. (1984). Reading Comprehension, chap. Coherence and Cohesive Harmony.
Hatzivassiloglou, V., Klavans, J., & Eskin, E. (1999). Detecting text similarity over short
passages: Exploring linguistic feature combinations via machine learning. In Proceedings of the Joint SIGDAT Conference on Empirical Methods in Natural Language
Processing and Very Large Corpora.
Hearst, M. (1994). Multi-paragraph segmentation of expository text. In Proceedings of the
32th Annual Meeting of the Association for Computational Linguistics.
Hovy, E. (1993). Automated discourse generation using discourse structure relations. Artificial Intelligence, 63. Special Issue on NLP.
Jing, H. (1998). Summary generation through intelligent cutting and pasting of the input
document. Tech. rep., Columbia University.
Kan, M.-Y., Klavans, J., & McKeown, K. (1998). Linear segmentation and segment
relevence. In Proceedings of 6th International Workshop of Very Large Corpora
(WVLC-6).
Lin, C.-Y., & Hovy, E. (2001). Neats: A multidocument summarizer. In Proceedings of the
Document Understanding Workshop (DUC).
Mani, I., & Bloedorn, E. (1997). Multi-document summarization by graph search and
matching. In Proceedings of the Fifteenth National Conference on Artificial Intelligence.
Mani, I., & Wilson, G. (2000). Robust temporal processing of news. In Proceedings of the
38th Annual Meeting of the Association for Computational Linguistics.
McCoy, K., & Cheng, J. (1991). Focus of attention: Constraining what can be said next.
In Paris, C., Swartout, W., & Mann, W. (Eds.), Natural Language Generation in
Artificial Intelligence and Computational Linguistics. Kluwer Academic Publishers.
McKeown, K. (1985). Text Generation: Using Discourse Strategies and Focus Constraints
to Generate Natural Language Text. Cambridge University Press, England.
McKeown, K., Barzilay, R., Evans, D., Hatzivassiloglou, V., Kan, M., Schiffman, B., &
Teufel, S. (2001). Columbia multi-document summarization: Approach and evaluation.
In Proceedings of the Document Understanding Workshop (DUC).
McKeown, K., Klavans, J., Hatzivassiloglou, V., Barzilay, R., & Eskin, E. (1999). Towards
multidocument summarization by reformulatin: Progress and prospects. In Proceedings of the Seventeenth National Conference on Artificial Intelligence.
54

Sentence Ordering in Multidocument News Summarization

Mooney, D., Carberry, S., & McCoy, K. (1990). The generation of high-level structure for
extended explanations. In Proceedings of the International Conference on Computational Linguistics (COLING–90), pp. 276–281, Helsinki.
Moore, J., & Paris, C. (1993). Planning text for advisory dialogues: Capturing intentional
and rhetorical information. Journal of Computational Linguistics, 19 (4).
Radev, D., Jing, H., & Budzikowska, M. (2000). Centroid-based summarization of multiple documents: sentence extraction, utility-based evaluation, and user studies. In
Proceedings of the ANLP/NAACL 2000 Workshop on Automatic Summarization.
Radev, D., & McKeown, K. (1998). Generating natural language summaries from multiple
on-line sources. Computational Linguistics, 24(3), 469–500.
Schiffman, B., Nenkova, A., & McKeown, K. (2002). Experiments in multidocument summarization. In Proceedings of the HLT Conference.
Siegal, S., & Castellan, N. J. (1988). Non-Parametric statistics for the behavioural sciences.
McGraw Hill.
White, M., Korelsky, T., Cardie, C., Ng, V., Pierce, D., & Wagstaff, K. (2001). Multidocument summarization via information extraction. In Proceedings of the HLT Conference.
Wiebe, J., O’Hara, T., Ohrstrom-Sandgren, T., & McKeever, K. (1998). An empirical
approach to temporal reference resolution. Journal of Artificial Intelligence, 9, 247–
293.

55

