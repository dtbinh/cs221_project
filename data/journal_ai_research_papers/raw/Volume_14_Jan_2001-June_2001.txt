Journal of Articial Intelligence Research 14 (2001) 105{136

Submitted 3/00; published 4/01

Partial-Order Planning with Concurrent Interacting Actions
Craig Boutilier

cebly@cs.toronto.edu

Department of Computer Science
University of Toronto
Toronto, ON, M5S 3H8, Canada

Ronen I. Brafman

brafman@cs.bgu.ac.il

Department of Computer Science
Ben-Gurion University
Beer Sheva, Israel 84105

Abstract

In order to generate plans for agents with multiple actuators, agent teams, or distributed controllers, we must be able to represent and plan using concurrent actions with
interacting eects. This has historically been considered a challenging task requiring a
temporal planner with the ability to reason explicitly about time. We show that with
simple modications, the
action representation language can be used to represent
interacting actions. Moreover, algorithms for partial-order planning require only small
modications in order to be applied in such multiagent domains. We demonstrate this fact
by developing a sound and complete partial-order planner for planning with concurrent interacting actions, POMP, that extends existing partial-order planners in a straightforward
way. These results open the way to the use of partial-order planners for the centralized
control of cooperative multiagent systems.
STRIPS

1. Introduction
In order to construct plans for agents with multiple actuators (such as multi-armed robots),
agent teams, or controllers distributed throughout an environment, we must be able to
model the eects and interactions of multiple actions executed concurrently, and generate plans that take these interactions into account. A viable solution to the basic
multiagent/multi-actuator planning (MAP) problem must include economical action descriptions that are convenient to specify and are easily manipulable by planning algorithms,
as well as planning methods that can deal with the interactions generally associated with
concurrent actions.
Surprisingly, despite the interest in multiagent applications|for instance, in robotics
(Donald, Jennings, & Rus, 1993; Khatib, Yokoi, Chang, Ruspini, Holmberg, Casal, &
Baader, 1996) and distributed AI (e.g., see the various proceedings of the International
Conference on Multiagent Systems)|and the large body of work on distributed multiagent
planning, very little research addresses this basic problem of planning in the context of
concurrent interacting actions. Researchers in distributed AI have considered many central
issues in multiagent planning and multiagent interaction, but much existing research is
concerned mainly with problems stemming from the distributed nature of such systems,
such as task decomposition and resource allocation (Durfee & Lesser, 1989; Wilkins &
Myers, 1998; Stone & Veloso, 1999), obtaining local plans that combine to form global plans

c 2001 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Boutilier & Brafman

(Durfee & Lesser, 1991; Ephrati, Pollack, & Rosenschein, 1995), minimizing communication
needs (Wolverton & des Jardins, 1998; Donald et al., 1993), and so on. As opposed to this
form of distributed planning, our focus in this paper is on centralized planning for agent
teams (or distributed actuators).
Representation of concurrent actions has been dealt with by various researchers in the
knowledge-representation community (e.g., Lin & Shoham, 1992; Reiter, 1996; de Giacomo,
Lesperance, & Levesque, 1997; Moses & Tennenholtz, 1995; Pinto, 1998). Of particular
note are the action languages Ac (Baral & Gelfond, 1997) and C (Giunchiglia & Lifschitz,
1998) which enable the specication of concurrent interacting actions and employ a nonmonotonic override mechanism to deduce the eects of a set of actions with conicting
eects. Finally, a number of contemporary planners can handle concurrent noninteracting
actions to a certain degree|examples include Graphplan (Blum & Furst, 1995), and IPP
(Koehler, 1998), which extends Graphplan to handle resource constraints, and more recently
OBDD-based planners such as MBP (Cimatti, Giunchiglia, Giunchiglia, & Traverso, 1997)
and UMOP (Jensen & Veloso, 2000)|while Knoblock (1994) provides a good discussion of
the issue of parallelizing serial plans.
Despite these advances, one often sees in the planning community suggestions that
temporal planners are required to adequately deal with concurrent interacting actions. For
example, in his discussion of parallel execution plans, Knoblock (1994) asserts:
To handle these cases [of interacting actions] requires the introduction of an
explicit representation of time, such as that provided in temporal planning systems.
A similar perspective seems implicit in the work on parallel action execution presented by
Lingard and Richards (1998). Certainly time plays a role in planning|in any planner the
idea that sequences of actions occur embodies an implicit notion of time. However, we
disagree that time in centralized multiagent planning must be dealt with in a more explicit
fashion than in single-agent planning. The main aim of this paper is to demonstrate that the
MAP problem can be solved using very simple extensions to existing (single-agent) planners
like UCPOP (Penberthy & Weld, 1992). We provide a representation and MAP algorithm
that requires no explicit representation of time. This is not to deny that explicit temporal
representations are useful in planning|for many problems these may be necessary|but
we do not think this is the key bottleneck in planning the activities of multiagent teams.
Specically, we view temporal issues to be orthogonal to the main concerns facing multiagent
planning.
The central issue in multiagent planning lies in the fact that individual agent actions
do interact. Sometimes planning is hindered as a result of action interaction: action X of
agent 1 might destroy the intended eect of action Y of agent 2 if executed concurrently. For
example, in a half-duplex communication line, we cannot allow simultaneous transmission
of messages from both sides. In such a case, a planning algorithm has to make sure that
X and Y are not executed at the same time. More interesting is the fact that planning
often benets as a result of action interaction: action X of agent 1 might only achieve an
intended eect if agent 2 performs action Y concurrently. For example, opening a typical
door requires two simultaneous actions: turning the knob and pushing the door. In military
activities, dierent units may have to coordinate their actions in order to be eective (e.g.,
106

Planning with Concurrent Interacting Actions

turn on engines or lights simultaneously, or attack at the same time). Similar situations
arise in a variety of domains. In such cases, a planning algorithm has to ensure that the
appropriate actions are executed at the same time. An action representation that makes
these interactions explicit and a planning algorithm that can, as result of these interactions,
prescribe that certain actions must or must not be executed concurrently are some of the
main features of any multiagent planner. Temporal representations may play a role in the
scheduling of such actions, but are not strictly necessary for reasoning about the eects of
interaction (or lack thereof).
To illustrate some of these issues, consider the following example which will be discussed
in detail later in the paper: two agents must move a large set of blocks from one room to
another. While they could pick up each block separately, a better solution would be to use
an existing table in the following manner. First, the agents put all blocks on the table,
then they each lift one side of the table. However, they must lift the table simultaneously;
otherwise, if only one side of the table is lifted, all the blocks will fall o. Having lifted
the table, they must move it to the other room. There they put the table down. In fact,
depending on the precise goal and eects of actions, it may be better for one agent to drop
its side of the table, causing all of the blocks to slide o at once. Notice how generating
this plan requires the agents to coordinate in two dierent ways: rst, they must lift the
table together so that the blocks do not fall; later, one of them (and only one) must drop
its side of the table to let the blocks fall.
Since the actions of distinct agents interact, we cannot, in general, specify the eects of
an individual's actions without taking into account what other actions might be performed
by other agents at the same time. That truly concurrent actions are often desirable precludes
the oft-used trick of \interleaving semantics" (Reiter, 1996; de Giacomo et al., 1997). Agents
lifting a table on which there are a number of items must do so simultaneously or risk the
items sliding from the table, perhaps causing damage. Interleaving individual \lift my side
of table" actions will not do.
One way to handle action interactions is to specify the eects of all joint actions directly.
More specically, let Ai be the set of actions available to agent i (assuming n agents labeled
1 : : :n), and let the joint action space be A1  A2      An . We treat each element of this
space as a separate action, and specify its eects using our favorite action representation.1
The main advantage of this reduction scheme is that the resulting planning problem can
be tackled using any standard planning algorithm. However, it has some serious drawbacks
with respect to ease of representation. First, the number of joint actions increases exponentially with the number of agents. This has severe implications for the specication and
planning process. Second, this reduction fails to exploit the fact that a substantial fraction of the individual actions may not interact at all, or at least not interact under certain
conditions. We would like a representation of actions in multiagent/multi-actuator settings
that exploits the independence of individual action eects to whatever extent possible. For
instance, while the lift actions of the two agents may interact, many other actions will not
(e.g., one agent lifting the table and another picking up a block). Hence, we do not need
1. Our discussion will center on the STRIPS action representation, but similar considerations apply to other
representations such as the situation calculus (McCarthy & Hayes, 1969; Reiter, 1991) and dynamic Bayes
nets (Dean & Kanazawa, 1989; Boutilier & Goldszmidt, 1996).

107

Boutilier & Brafman

to explicitly consider all combinations of these actions, and can specify certain individual
eects separately, combining the eects \as needed."
Joint actions also cause problems for the planning process itself: their use in the context
of most planners forces what seems to be an excessive degree of commitment. Whenever
the individual action of some agent can accomplish a desired eect, we must insert into our
plan a joint action, thereby committing all other agents to specic actions to be executed
concurrently, even though the actual choices may be irrelevant. For these reasons, we desire
a more \distributed" representation of actions.
We are therefore faced with the following two problems:
1. The representation problem: how do we naturally and concisely represent interactions
among concurrently executed actions.
2. The planning problem: how do we plan in the context of such a representation.
In this paper, we show how the STRIPS action representation can be augmented to
handle concurrent interacting actions and how existing nonlinear planners can be adapted
to handle such actions. In fact, it might come as a surprise that solving both problems
requires only a small number of changes to existing nonlinear planners, such as UCPOP
(Penberthy & Weld, 1992).2 The main addition to the STRIPS representation for action a
is a concurrent action list: this describes restrictions on the actions that can (or cannot) be
executed concurrently in order for a to have the specied eect (indeed, a can have a number
of dierent conditional eects depending on which concurrent actions are applied). In order
to handle this richer language, we must make a number of modications to \standard"
partial-order planners: (a) we add equality (respectively, inequality) constraints on action
orderings to enforce concurrency (respectively, nonconcurrency) constraints; and (b) we
expand the denition of threats to cover concurrent actions that could prevent an intended
action eect.
We emphasize that we deal with the problem of planning the activities of multiple agents
or agents with multiple actuators in a centralized fashion, as opposed to distributed planning. Our model assumes that one has available a central controller that can decide on an
appropriate joint plan and communicate this plan to individual agents (or actuators). While
distributed planning is an important and dicult problem, it is not the problem addressed
in this work. We also assume that some mechanism is available by which individual agents
can ensure that the execution of their concurrent plans are synchronized. Again, while an
issue of signicance and subtlety, it is not a task we consider in this paper.
We note that planning with parallel actions has been addressed in some detail by Lingard
and Richards (1998). Specically, they provide a very general framework for understanding
constraint-posting, least-commitment planners that allow for concurrent action execution.
However, as mentioned above, their work takes an explicit temporal view of the problem
and focuses primarily on issues having to do with action duration. Furthermore, while
multiagent planning could presumably be made to t within their model, this seems not
to be their main motivation. In fact, the planning algorithms they discuss deal with the
issue of ensuring that parallel actions do not have negative synergistic eects, and explicitly
2. Moreover, other planning algorithms (e.g., Blum & Furst, 1995; Kautz & Selman, 1996) should prove
amenable to extension to planning with concurrent interacting actions using similar ideas.

108

Planning with Concurrent Interacting Actions

exclude the possibility of positive synergy. In our work, we abstract away from the temporal
component and focus precisely on planning in the presence of such synergies, both positive
and negative.
In the following section we describe our STRIPS-style representation for concurrent,
interacting actions and multiagent plans. In Section 3 we describe the Partial-Order Multiagent Planning algorithm (POMP), a modied version of the UCPOP algorithm that can be
used to generate plans for multiagent teams or multiactuator devices. Section 4 illustrates
the POMP algorithm on an extended example. In Section 5 we discuss the soundness and
completeness of the POMP algorithm. We conclude in Section 6 with a discussion of some
issues raised by this work.

2. Representing Concurrent Actions and Plans

We begin by considering the representation of concurrent actions and partially ordered plans
using a simple extension of traditional planning representations. We rst describe a standard action representation based on the STRIPS model, specically that used by UCPOP
(Penberthy & Weld, 1992). We then describe the extension of this representation to represent concurrent interacting actions and its semantics, and nally describe the representation
and semantics of partially ordered multiagent plans.

2.1 The STRIPS Action Representation

Variants of the STRIPS action representation language (Fikes & Nilsson, 1971) have been
employed in many planning systems. We assume a nite set of predicates and domain
objects (generally typed) that characterize the domain in question. States of this system
are truth assignments to ground atomic formulae of this language. A state is represented
as a set (or conjunction) of those ground atoms true in that state, such as
f

OnTable(B 1); Holding(A; B 2)g

thus embodying the closed world assumption (Reiter, 1978). Actions induce state transitions
and can be viewed as partial mappings from states to states. An action A is represented
using a precondition and an eect, each a conjunction of literals (sometimes referred to
as the precondition or eect list). If a state does not satisfy the conjunction of literals
in the precondition list, the eect of applying the action is undened. Otherwise, the
state resulting from performing action A is determined by deleting from the current state
description all negative literals appearing in the eect list of A and adding all positive
literals appearing in the eect list.
As an example, the action of picking up a particular block B from the oor is described
in Figure 1, using the usual LISP-style notation of many planning systems. This action can
be executed when the agent's hand is empty and block B is clear and on the oor. After
the action is executed, the agent's hand is no longer empty (it holds B ), and B is not on
the oor.
Since the action of picking up a block from a location is essentially the same, regardless
of the particular block and location, a whole class of such actions can be described using an
action schema or operator with free variables denoting the object to be picked up and the
109

Boutilier & Brafman

(define (action pickup-block-B-from-floor)
:precondition (and (on floor B) (handempty) (clear B))
:effect
(and (not (handempty)) (not (on floor B)) (holding B))))

Figure 1: The Pickup-block-B-from-oor action
(define (operator pickup)
:parameters
(?x ?y)
:precondition (and (on ?x ?y) (handempty) (clear ?x) (not (= ?x ?y)))
:effect
(and (not (handempty)) (not (on ?x ?y)) (holding ?x))))

Figure 2: The Pickup action schema
pickup location. An action schema specication is similar to the specication of a single
action except for the use of free variables. The precondition list of an action schema can
contain, along with predicates (or more precisely, proposition \schemata"), equality and
inequality constraints on the variables.
Figure 2 illustrates an action schema for the pickup action. It has two variables, ?x and
?y , which stand for the object being picked up and the location of the object, respectively.
The precondition list includes the requirements that ?x be on ?y , that the hand is empty,
that ?x is clear, and that ?x and ?y designate dierent objects (i.e., one cannot pickup an
object from atop itself).
The STRIPS representation can be enhanced, obtaining a more expressive language that
allows for a form of universal quantication in the action description (e.g., as in UCPOP
Penberthy & Weld, 1992). In addition, conditional eects can be captured using a when
clause consisting of an antecedent and a consequent. The semantics of the action description
is similar to the original semantics except that in states s that satisfy the preconditions of
the action and the antecedent of the when clause, the actual eect of the action is the union
of the \standard" eect specied in the eect list and the consequent of the when clause.
The when clause does not change the expressiveness of the language|each conditional
action description can be expressed using separate non-conditional actions in the classic
STRIPS representation to capture each when clause. However, it allows for a more economical and natural specication of actions. For example, in the classic STRIPS blocks world,
after putting some block B1 on a destination block B2 , block B2 is no longer clear. However,
after putting B1 on the table, the table remains clear. Hence, a dierent putdown schema is
required to describe moving a block to the table. Using a when clause, we can use a single
schema with a conditional eect that modies the standard eect of the action in case the
destination is not the table (i.e., the when clause will state that when the destination is not
the table, it will become unclear). In addition, conditional eects may allow us to postpone
commitment during planning (e.g., we may decide to put a block down, but we don't have
to commit to whether the destination is the table or not).

2.2 Representing Concurrent Actions in STRIPS

The introduction of concurrent interacting actions requires us to address two issues specic
to the multiagent setting: who is performing the action, and what other actions are being
110

Planning with Concurrent Interacting Actions

(define (operator pickup)
:parameters
(?a1 ?x ?y)
:precondition (and (on ?x ?y)(handempty ?a1) (clear ?x)(not (= ?x ?y)))
:concurrent
(not (and (pickup ?a2 ?x ?y) (not (= ?a1 ?a2))))
:effect
(and (not (handempty ?a1)) (not (on ?x ?y)) (holding ?a1 ?x)))

Figure 3: The multiagent Pickup schema
performed at the same time. First, we deal with the identity of the performing agent by
introducing an agent variable to each action schema. When the schema is instantiated, this
variable is bound to a constant denoting the particular agent that is carrying out the action.
Second, we must take into account the fact that for an action to have a particular eect,
certain actions may or may not be performed concurrently. We capture such constraints by
adding a concurrent action list to the existing precondition and eect lists in the specication of an action. The concurrent action list is a list of action schemata and negated action
schemata, some of which can be partially instantiated. If an action schema A0 appears in
the concurrent action list of an action A then an instance of schema A0 must be performed
concurrently with action A in order to have the intended eect. If an action schema A0
appears negated in the concurrent action list of an action A then no instance of schema A0
can be performed concurrently with action A if A is to have the prescribed eect.
The concurrent action list is similar to the precondition list in the following sense:
when the constraints it species on the environment in which the action is performed are
satised, the action will have the eects specied in the eect list. Notice that positive
action schemata are implicitly existentially quantied|one instance of that schema must
occur concurrently|whereas negated action schema are implicitly universally quantied|
no instance of this schema should be performed concurrently.
A schema A0 appearing in the concurrent action list of schema A can be partially instantiated or constrained: if A0 contains free variables appearing in the parameter list of A, then
these variables must be instantiated as they are instantiated in A. In addition, constraints
that restrict the possible instantiations of the schema A can appear within the concurrent
action list. This can be seen in the description of the multiagent setting version of the action
pickup shown in Figure 3. The multiagent pickup schema has an additional parameter, ?a1,
signifying the performing agent. Its list of preconditions and eects is similar to that of the
single-agent pickup schema, but it also has the concurrent action list:
(not (and (pickup ?a2 ?x ?y) (not (= ?a1 ?a2))))

The \not" prex restricts the set of actions that can be performed concurrently with any
instance of the schema Pickup(?a1; ?x; ?y ). In particular, we disallow concurrent execution
of any instance of the schema Pickup(?a2; ?x; ?y ) such that ?a2 is dierent from ?a1. That
is, no other agent should attempt to pickup the object ?x at the same time.
Using this representation, we can represent actions whose eects are modied by the
concurrent execution of other actions. For example, suppose that when agent a1 lifts up
one side of a table all blocks on it are dumped onto the oor as long as no other agent
a2 lifts the other side; but if some agent a2 does lift the other side of the table then the
eect is simply to raise the side of the table. Clearly, we can distinguish between these two
111

Boutilier & Brafman

(define (operator lower)
:parameters
(?a1 ?s1)
:precondition (and (holding ?a1 ?s1) (raised ?s1))
:effect
(and (not (raised ?s1))
(forall ?x
(when ((ontable ?x)
(not (and (lower ?a2 ?s2)(not (= ?s1 ?s2)))))
(and (onfloor ?x) (not (ontable ?x)))))))

Figure 4: The Lower action schema
cases using the concurrency conditions (not (lift ?a2 ?side)) and (lift ?a2 ?side).
However, treating them as standard concurrency conditions essentially splits the action into
two separate actions with similar eects. As in single-agent representations, we can treat
such \modiers" using a when clause; but now, the antecedent of the when clause has two
parts: a list of additional preconditions and a list of additional concurrency conditions. The
general form of the when clause is now (when antecedent effect), where the antecedent
itself consists of two parts: (preconditions concurrency-constraints). The latter list
has the same form as that of the concurrent-action list, and similar semantics. Thus,
whenever the precondition part of the antecedent is satised in the current state and the
concurrency condition is satised by the actions executed concurrently, the actual eect of
the action is obtained by conjoining the standard eect with the consequent of the when
clause.
The syntax of when clauses is illustrated in the table-lowering action described in Figure 4. Notice that this operator contains a universally quantied eect, that is, an eect
of the form (forall ?x (effect ?x)). This allows us to state that the conditional eect,
described by the when clause, applies to any object ?x that satises its precondition (e.g., to
every object on the table in this case). The use of universally quantied conditional eects
in nite domains is well understood (see Weld's (1994) discussion). However, to simplify
our presentation, we do not treat it formally in this paper.
When we lower one side of the table, that side is no longer raised. In addition, if there
is some object on the table, then lowering one side of the table will cause that object to fall,
as long as the other side of the table is not being lowered at the same time. Here, we use
universal quantication to describe the fact that this will happen to any object that is on
the table. Notice that in the concurrent part of the antecedent we see a constrained schema
again. It stipulates that the additional eect (i.e., the objects falling to the oor from the
table) will occur if no instance of the schema lower(?a2; ?s2) is executed concurrently, where
?s1 is dierent than ?s2.3
An action description can have no when clause, one when clause, or multiple when
clauses. In the latter case, the preconditions of all the when clauses must be disjoint.4
One might insist that the set of when clauses be exhaustive as well; however, we do not
3. In certain cases we might also insist that ?a1 6=?a2, if agents can perform only one action at a time.
But an agent with multiple eectors (to take one example) might be able to lower one or both sides
concurrently. See below for more on this.
4. In the case of multiple clauses, the disjointness restriction can be relaxed if the eects are independent,
much like in a Bayes net action description (Boutilier & Goldszmidt, 1996).

112

Planning with Concurrent Interacting Actions

require this. If no when clause is satised when an action is performed, we assume that the
\additional" eect is null; that is, the eect of the action is simply that given by the main
eect list. When we discuss the when clauses of a specic action in our formal denitions
below, we will generally assume the existence of an implicit when clause whose precondition
consists of the negation of preconditions of the explicitly specied when clauses, and whose
eect list is empty. This allows our denitions to be stated more concisely.5

2.3 The Semantics of Concurrent Action Specications

The semantics of individual actions is, of course, dierent in our multiagent setting than in
the single-agent case. It is not individual actions that transform one state of the world into
another state of the world. Rather it is joint actions that dene state transitions. Joint
actions describe the set of individual actions (some of which could be no-ops) performed by
each of the agents; that is, they are n-tuples of individual actions.
Given a joint action a = ha1 ;    ; ani, we refer to the individual actions ai as the elements
of a. We say that the concurrent action list of an element ai of a is satised with respect
to a just when, for every positive schema A in this list, a contains some element aj (j 6= i)
which is an instance of A, and for every negative schema A0 in the list, none of the elements
aj (1  j  n) is an instance of A0. Ignoring for the moment the existence of when clauses,
we can dene the notion of joint action consistency in a straightforward manner:

Denition Let a = a1; ; an be a joint action where no individual action ai contains a
h



i

when clause. We say a is consistent if





The precondition lists pi of each ai are jointly (logically) consistent (i.e., they do
not contain a proposition and its negation).
The eect lists ei of each ai are jointly consistent.
The concurrent action list of each element of a is satised w.r.t. a.

Given a state s, a consistent joint action a = ha1;    ; an i can be executed in s if the
precondition lists of all elements of a are satised in s. The resulting state t is obtained by
taking the union of the eect lists of each of the elements of a and applying it to s, as in
the single-agent case. In fact, a consistent joint action a can be viewed as a single-agent
action whose preconditions are the union of the preconditions of the various ai and whose
eects are the union of the eects of the ai .
Notice that under this semantics, a joint action is inconsistent if some individual action
a causes Q to be true, and another b causes Q to be false. It is the responsibility of the
axiomatizer of the planning domain to recognize such conicts and either state the true
eect when a and b are performed concurrently (by imposing conditional eects with concurrent action conditions) or to disallow concurrent execution (by imposing nonconcurrency
conditions).6
5. We do not assume that such a clause is ever explicitly constructed for planning purposes|it is merely a
conceptual device.
6. One can easily preprocess actions descriptions in order to check for consistency. If actions a and b are
discovered to have conicting eects, but the specication allows them to be executed concurrently,
an algorithm could automatically add a nonconcurrency constraint to each action description, thus

113

Boutilier & Brafman

With when clauses the denition of consistency is a bit more involved. Consistent joint
actions without when clauses can be applied consistently at all possible states (if they are
applicable at all). In contrast, joint actions with when clauses may be consistent when
applied at some states, but inconsistent at others. Given a joint action a = ha1 ;    ; ani
and a specic state s, exactly one when clause of each action ai will be satised; that is,
just one clause will have its preconditions and concurrency constraints satised.7 Thus the
joint action and the state together determine which conditional eects are selected.

Denition Given a joint action a = a1; ; an and state s, the active when clause wi of
h



i

ai relative to s and a is the (unique) when clause that is satised by s and a (i.e.,
whose preconditions are satised by s and whose concurrency constraints are satised
by a).

We thus relativize the notion of consistency in this case.

Denition Let a = a1; ; an be a joint action (where individual actions ai may contain
h



i

when clauses). Let s be some state, let wi be the active when clause for ai (w.r.t. s,
a), and let wi have preconditions wpi, concurrency constraints wci, and eects wei.
We say a is consistent at state s if:





The precondition lists pi and active when-preconditions wpi of each ai are mutually consistent.
The eect lists ei and active when-eects wei of each ai are mutually consistent.
The concurrent action list of each element of a is satised w.r.t. a.

Note that we do not require that the concurrent action lists in the when clauses be satised,
since they are \selected" by a. Note also that this denition reduces to the \whenless"
denition if the individual actions have no when clauses|an action is consistent with respect
to s i it is consistent in the original sense.
Given a state s, a joint action a = ha1 ;    ; ani (involving when clauses) that is consistent
with respect to s can be executed in s if the precondition lists of all elements of a are satised
in s. The resulting state t is obtained by taking the union of the eect lists of each of the
elements of a, together with the eect lists of each of the active when clauses, and applying
it to s.
Several interesting issues arise in the specication of actions for multiple agents. First,
we assume throughout the rest of the paper that each agent can perform only one action
at a time, so any possible concurrent actions must be performed by distinct agents. This
allows our action descriptions to be simpler than they otherwise might. When a single
agent can perform more than one action at a time, it can be captured using a group of
\agents" denoting its dierent actuators. If these agents can only perform certain actions
preventing problems from arising during the planning process. This would be valid only if a and b could
not, in fact, be (meaningfully) performed concurrently. If they can, then it is important that the domain
axiomatizer specify what the true interacting eect is (e.g., maybe action a dominates). We note that
this automatic inconsistency detection and repair admits a certain additional degree of convenience in
domain specication.
7. We assume an implicit when clause corresponding to the negation of explicitly stated clauses as described
above.

114

Planning with Concurrent Interacting Actions

concurrently, this can be captured by adding extra concurrency constraints. More generally,
dierent agents may have dierent capabilities, and it would be useful to have the ability
to explicitly specify these capabilities in the form of constraints on the types of actions that
dierent agents can execute. One way to handle such constraints is via a preprocessing
step that augments the action descriptions with additional preconditions or concurrency
conditions that capture these constraints. An alternative is to alter the planning algorithm
to take such constraints into account explicitly. When these are simple constraints|for
instance, the fact that there are n agents might imply that only n actions can be executed
concurrently|this can be done in a simple and ecient manner. This is the approach
we take in the planning algorithm we develop in Section 3. However, when the capability
constraints are complex, the former method seems better.
Another issue that must be addressed is the precise eect of a joint action, one of
whose individual actions negates some precondition of a concurrently executed individual
action. We make no special allowances for this, simply retaining the semantics described
above. While this does not complicate the denition of joint actions, we note that some
such combinations may not make sense. For example, the concurrent writing of variable p
to q and variable q to p in a computer program might be seen as each action destroying
the preconditions of the other; yet the net eect of the individual actions is simply a swap
of values. Hence, in certain circumstances, it may be acceptable to describe the actions
this way, and in others this may not be the true eect of the joint action. Again, we can
treat this issue in several ways: we can allow the specication of such actions and design
the planner so that it excludes such combinations when forming concurrent plans unless an
explicit concurrency condition is given (this means the axiomatizer need not think about
such interactions); or we can allow such combinations, in general, but explicitly exclude
problematic cases by adding nonconcurrency constraints.
Finally, an undesirable (though theoretically unproblematic) situation can arise if we
provide \incongruous" concurrency lists. For example, we may require action a to be concurrent with b in order to have a particular eect, while b may be required to be nonconcurrent
with a (this can span a set of actions with more than two elements, naturally). Hence, a and
b cannot occur together in a consistent joint action, and we would not be able to achieve
the intended eect of a. Although the planner will eventually \recognize" this fact, such
specications can lead to unnecessary backtracking during the planning process. Again,
this is something that is easily detected by a preprocessor, and we will generally assume
that concurrency lists are congruous.

2.4 Concurrent Plan Representation
Before moving on to discuss the planning process, we describe our representation for multiagent plans, which is a rather straightforward extension of standard single-agent, partially
ordered plan representations. A (single-agent) nonlinear plan consists of: (1) a set of action
instances; (2) various strict ordering constraints using the relations < and > on the ordering of these actions; and (3) codesignation and non-codesignation constraints on the values
of variables appearing in these actions, forcing them to have the same or dierent values,
respectively (Weld, 1994; Penberthy & Weld, 1992). A plan of this sort represents its set of
possible linearizations, the set of totally ordered plans formed from its action instances that
115

Boutilier & Brafman

do not violate any of the ordering, codesignation, and non-codesignation constraints.8 We
say a plan is consistent if it has some linearization. The set of linearizations can be seen as
the \semantics" of a nonlinear plan in some sense. A (consistent) nonlinear plan satises a
goal set G, given starting state s, if any linearization is guaranteed to satisfy G.
A concurrent nonlinear plan for n agents (labeled 1; : : :n) is similar: it consists of a set
of action instances (with agent arguments, though not necessarily instantiated) together
with a set of arbitrary ordering constraints over the actions (i.e., <; >; = and 6=) and the
usual codesignation and non-codesignation constraints. Unlike single-agent nonlinear plans,
we allow equality and inequality ordering constraints so that concurrent or nonconcurrent
execution of a pair of actions can be imposed. Our semantics must allow for the concurrent
execution of actions by our n agents. To this end we extend the notion of a linearization:
Denition Let P be a concurrent nonlinear plan for agents 1; : : :n. An n-linearization of
P is a sequence of joint actions A1;    Ak for agents 1; : : :n such that
1. each individual action instance in P is a member of exactly one joint action Ai ;
2. no individual action occurs in A1 ;    Ak other than those in P , or individual
No-op actions;
3. the codesignation and non-codesignation constraints in P are respected; and
4. the ordering constraints in P are respected. More precisely, for any individual
action instances a and b in P , and joint actions Aj and Ak in which a and b
occur, any ordering constraints between a and b are true of Aj and Ak ; that is,
if af<; >; =; 6=gb, then j f<; >; =; 6=gk.
In other words, the actions in P are arranged in a set of joint actions such that the ordering
of individual actions satises the constraints, and \synchronization" is ensured by no-ops.
Note that if we have a set of k actions (which are allowed to be executed by distinct
agents) with no ordering constraints, the set of linearizations includes the \short" plan
with a single joint action where all k actions are executed concurrently by dierent agents
(assuming k  n), a \strung out" plan where the k actions are executed one at a time by a
single agent, with all others doing nothing (or where dierent agents take turns doing the
individual actions), \longer" plans stretched out even further by joint no-ops, or anything
in between.

Example Suppose our planner outputs the following plan for a group of three agents: the
set of actions is

f

a(1); b(2); c(2); d(3); e(1); f (2)

g

with the ordering constraints

e(1) = b(2); c(2) = d(3); a(1) < e(1); d(3) < f (2)

f

6

g

Here, the numerical arguments denote the agent performing the action. Joint actions
involve one action for each of the three agents. A simple 3-linearization of this plan|
depicted as the rst linearization in Figure 5, and using N to denote no-ops for the
8. Concurrent execution has also been considered in this context for non-interacting actions; see Knoblock's
discussion of this issue (Knoblock, 1994).

116

Planning with Concurrent Interacting Actions

Time

1

2

3

4

5

Time

1

2

3

Agent 1

a

e

N

N

N

Agent 1

a

e

N

Agent 2

N

b

c

N

f

Agent 2

c

b

f

Agent 3

N

N

N

d

N

Agent 3

N

d

N

Linearization 1

Linearization 2

Figure 5: Two possible linearizations of a partially ordered multiagent plan
corresponding agents|is:
(1) (2) (3)i h (1) (2) (3)i

ha

;N

;N

; e

;b

;N

; hN

(1) (2) (3)i
;c

;N

; hN

(1) (2) (3)i
;N

;d

; hN

(1) (2) (3)i
;f

;N

We can insert additional tuples of the form hN (1); N (2); N (3)i in any location we
wish. Another possible 3-linearization (the second in Figure 5) is:

a(1); c(2); N (3) ; e(1); b(2); d(3) ; N (1); f (2); N (3)

h

i h

i h

i

In fact, this is the shortest 3-linearization of the plan.
The denition of n-linearization requires that no agent perform more than one action at
a time. This conforms with the assumption we made in the last section, though the denition could quite easily be relaxed to allow this. Because of no-ops, our n-linearizations do
not correspond to shortest plans, either in the concurrently on nonconcurrently executed
senses of the term. However, it is a relatively easy matter to \sweep through" a concurrent nonlinear plan and construct some shortest n-linearization, one with the fewest joint
actions, or taking the least amount of \time." Though we do not have an explicit notion
of time, the sequence of joint actions in an n-linearization implicitly determines a time line
along which each agent must execute its individual actions. The fact that concurrency and
nonconcurrency constraints are enforced in the linearizations ensure that the plan is coordinated and synchronized. We note that in order to execute such a plan in a coordinated
fashion the agents will need some synchronization mechanism. This issue is not dealt with
in this paper.

3. Planning with Concurrent Actions

In Figure 6, we present the POMP algorithm, a version of Weld's POP algorithm (Weld,
1994) modied to handle concurrent actions. To keep the discussion simple, we begin
by describing POMP without considering conditional action eects. Below we describe
the simple modications required to add conditionals (i.e., to build the analog of CPOP).
Though we do not discuss universal quantication in this paper, our algorithm could easily
be extended to handle universally quantied eects in much the same way as Penberthy
and Weld's (1992) full UCPOP algorithm.
117

Boutilier & Brafman

POMP(hA; O; L; NC;B i,agenda )
Termination: If agenda is empty, return hA; O; L; NC;B i.
Goal Selection: Let hQ; Aneed i be a pair on the agenda . (Aneed is an action and Q is a conjunct from its
precondition list.)
Action Selection: Let Aadd = Choose an action one of whose eects unies with Q subject to the constraints in B . (This may be a newly instantiated action from  or an action that is already in A
and can be ordered consistently prior to Aneed). If no such action exists, then return failure. Let
Q A g. Form B by adding to B any codesignation constraints that are needed
L = L [ fAadd !
need
in order to force Aadd to have the desired eect. Let O = O [ fAadd < Aneed g. If Aadd is newly
instantiated, then A = A [ fAadd g and O = O [ fA0 < Aadd < A g (otherwise, let A = A).
Concurrent Action Selection: If Aadd is newly instantiated then apply the following steps to all positive
actions conc in its concurrent list: Let Aconc = Choose a newly instantiated action from  or an
action that is already in A and can be ordered consistently concurrently with Aadd. Make sure that
there is a free agent that can perform this action concurrently with Aadd and any other concurrently
scheduled actions. If no such action exists then return failure. Let O = O [ fAconc = Aneedg. If
Aconc is newly instantiated, then A = A [ fAadd g and O = O [ fA0 < Aconc < A g (otherwise,
let A = A). If aadd is the agent variable in Aadd and aconc is the agent variable in Aconc , then
add aadd 6= aconc to B , as well as all similar non-codesignation constraints for actions A such that
A = Aadd 2 O.
Re-apply this step to Aconc , if needed.
For every negative action A conc in Aadd concurrent list let NC = NC [ fA conc 6= Aadd g. Add to
B any codesignation constraints associated with A conc .
Updating of Goal State: Let agenda = agenda , fhQ; Aneedig.
If Aadd is newly instantiated, then add fhQj ; Aaddig to agenda for every Qj that is a logical precondition of Aadd. Add the other preconditions to B . If additional concurrent actions were added, add
their preconditions as well.
Causal Link Protection: For every action At that might threaten a causal link Ap !R Ac perform one of
(a) Demotion: Add At < Ap to O .
(b) Weak Promotion: Add At  Ac to O . If no agent can perform At concurrently with Ac , add
At > Ac, instead.
If neither constraint is consistent, then return failure.
Nonconcurrency Enforcement For every action At that threatens a nonconcurrency constraint A 6= A
(i.e., At is an instance of the schema A that does not violate any constraint in B ) add a consistent
constraint, either
(a) Demotion: Add At < A to O .
(b) Promotion: Add At > A to O .
If neither constraint is consistent, then return failure.
Recursive Invocation: POMP(hA ; O ; L ; NC ; B i,agenda' )
0

0

0

0

0

0

0

1

0

0

0

0

1

0

0

0

:

0

:

:

0

0

0

0

0

0

0

0

0

0

0

0

0

Figure 6: The Partially Ordered Multiagent Planning algorithm

118

Planning with Concurrent Interacting Actions

We assume the existence of a function MGU(Q; R; B ) which returns the most general
unier of the literals Q and R with respect to the codesignation constraints in B . This is
used wherever unication of action schemata is required (see the Action Selection step in
Figure 6 and our discussion of NC-threats below). The algorithm has a number of input
variables: the set A contains all action instances inserted into the plan so far; the set O
contains ordering constraints on elements of A; the set L contains causal links; the set
NC contains nonconcurrency constraints; and the set B contains the current codesignation
constraints. The set NC does not appear in the POP algorithm and contains elements of
the form A 6= a, where A 2  is an action schema and a is an action instance from A.
Intuitively, a nonconcurrency constraint of this form requires that no action instance a0
that matches the schema A subject to the (non) codesignation constraints should appear
concurrently with a in the plan.
The agenda is a set of pairs of the form hQ; Ai, listing preconditions Q that have not
been achieved yet and the actions A that require them. Initially, the sets L, NC , and B
are empty, while A contains the two ctitious actions A0 and A1 , where A0 has the initial
state propositions as its eects and A1 has the goal state conditions as its preconditions.
The agenda contains all pairs hQ; A1 i such that Q is one of the conjuncts in the description
of the goal state. This specication of the initial agenda is identical to that used in POP
(Weld, 1994). Finally, we note that the choose operator, which appears in the Action
Selection and Concurrent Action Selection steps, denotes nondeterministic choice.
Again, this device is just that used in POP to make algorithm specication independent of
the search strategy actually used for planning. Intuitively, a complete planner will require
one to search over nondeterministic choices, backtracking over those that lead to failure.
Many of the structures and algorithmic steps of POMP correspond exactly to those
used in POP. Rather than describe these in detail, we focus our discussion on the elements
of POMP that dier from POP. Apart from the additional data structure NC mentioned
above, one key dierence is the additional Concurrent Action Selection step in POMP,
which takes care of the concurrency requirements of each newly instantiated action.
One nal key distinction is the notion of a threat used in POMP, which is more general
than that used by POP. Much like POP, given a plan hA; O; L; NC i, we say that At
Q A when O [ fA  A < A g is consistent, and A has :Q
threatens the causal link Ap !
c
p
t
c
t
as an eect. Threats are handled using demotion (much like in POP), or weak promotion.
The latter diers from the standard promotion technique used in POP: it allows At to be
ordered concurrently with Ac , not just after Ac .9
Apart from handling conventional threats in a dierent manner, we have another form of
threat in concurrent plans, namely, NC-threats . We say that action instance At threatens the
nonconcurrency constraint A 6= Ac if O [ fAt = Ac g is consistent and At is an instantiation
of A that does not violate any of the codesignation constraints. Demotion and promotion
can be used to handle NC-threats, just as they do more conventional threats. Notice that
although the set NC contains negative (inequality) constraints, they will ultimately be
grounded in the set of positive constraints in O. Following the approach suggested by Weld
9. If we wish to exclude actions that negate some precondition of another concurrent action (see discussion
in Section 2), we must use O [ fAp  At  Ac g in the denition of threat, and we must change weak
promotion to standard promotion.

119

Boutilier & Brafman

(1994), we do not consider an action to be a threat if some of its variables can be consistently
instantiated in a manner that would remove the threat.
The POMP algorithm must check for the consistency of ordering constraints in several
places: in Action Selection where an action chosen to achieve an eect must be consistently ordered before the consumer of that eect; in Concurrent Action Selection
where each concurrency requirement added to the plan must be tested for consistency; and
in Nonconcurrency Enforcement where demotion or promotion is used to ensure that
no nonconcurrency requirements are violated. The consistency testing of a set of ordering
constraints is very similar to that employed in POP (see Weld (1994) for a nice discussion), with one key dierence: the existence of equality (=) and inequality (6=) ordering
constraints as opposed to simple strict inequalities (i.e., < and >). However, with minor
modications, standard consistency-checking algorithms for strict ordering constraints can
be used. Equality can be dealt with by simply \merging" actions that must occur concurrently (i.e., treating them as a single action for the purposes of consistency testing).
Inequalities are easily handled by assuming all actions occur at dierent points whenever
possible. Non-strict inequalities (i.e.,  and ) do not arise directly in our algorithm
(though these two can be easily dealt with). We refer to Ghallab and Alaoui (1989) for
further details on processing such constraints.
The POMP algorithm as described can easily be modied to handle conditional eects,
just as the POP algorithm can be extended to CPOP. The main fact to note is that in the
action selection phase, we can use an action whose conditional eects achieve the chosen
subgoal. In that case, we do not just add the preconditions of the selected action to the
agenda, but also the antecedent of the particular conditional eect (this to ensure that
the action has this particular eect). We handle the additional concurrency conditions in
the antecedent much like the regular concurrency conditions. As in the CPOP algorithm,
we must consider the possibility that a particular conditional eect of an added action
threatens an established causal link. In this case, we can, aside from using the existing
threat resolution techniques, consider a form of confrontation , where we add the negation
of the conditional eect's antecedent to the agenda. Again, we have several ways to do
this: we could add the negation of some literal in the antecedent's condition to the agenda;
but we can also add a concurrent action to negate a negative concurrency condition in the
antecedent, or post a nonconcurrency constraint to oset a positive concurrency constraint
in the antecedent. The details of such steps are straightforward and look similar to those
involved in the unconditional algorithm.

4. An Example of the POMP Algorithm
In this section, we formalize the example alluded to in the introduction and describe the
construction of a concurrent plan for this problem using the POMP algorithm.
In the initial state, two agents, Agent1 and Agent2, are located in Room1, together with
a table and a set of blocks scattered around the room. Their goal is to ensure that all of
the blocks are in Room2 and the table is on the oor. In order to simplify this example, we
assume there is only one block B , we omit certain natural operators, and we simplify action
descriptions. In order to compactly represent the multiple block version of this, we would
require the introduction of universal quantication. As shown by Weld (1994), this can
120

Planning with Concurrent Interacting Actions

be done with little diculty. Intuitively, the agents should gather the blocks in the room
(in this case only one), put them on the table, carry the table to the other room, dump
the blocks from the table, and then put the table down. While this is not the best plan
for a single block, it illustrates how such a plan would be constructed for multiple blocks
(in which case this strategy is better than that of agents making multiple trips carrying
individual blocks). We use the following actions:







Pickup(a; b): agent a picks up a block b
PutDown(a; b): agent a puts block b on the table
ToTable(a; s): agent a moves to side s (left, right) of the table
MoveTable(a; r): agent a moves to room r with the table
Lift(a; s): agent a lifts side s of the table
Lower(a; s): agent a lowers side s of the table

The a variables are of type agent , b variables are of type block , r variables are of type room ,
and s variables are of type table-side. (We omit other natural actions since they won't be
used in the plan of interest.)
The domain is described using the following predicates:









OnTable(b): block b is on the table
OnFloor(b): block b is on the oor
AtSide(a; s): agent a is at side s (left, right) of the table
Up(s): side s of the table is raised
Down(s): side s of the table is on the oor
InRoom(x; r): object x (agent, block, table) is in room r
HandEmpty(a): the hand of agent a is empty
Holding(a; x): agent a is holding x (block, side of table)

The operator descriptions are dened in Figure 7.
The initial state of our planning problem is:
InRoom(B; Room1); OnFloor(B ); InRoom(Agent1; Room1); InRoom(Agent2; Room1);
InRoom(Table; Room1); Down(LeftSide); Down(RightSide)g

f

The goal propositions are:
InRoom(B; Room2); OnFloor(B ); Down(LeftSide); Down(RightSide)g

f

We now consider how a concurrent nonlinear plan for this multiagent planning problem
might be generated by POMP.
121

Boutilier & Brafman

(define (operator pickup)
:parameters
(?a1 ?x)
:precondition (and (inroom ?a1 ?r1) (inroom ?x ?r1)
(handempty ?a1) (onfloor ?x))
:concurrent
(and (not (pickup ?a2 ?x)) (not (= ?a1 ?a2)))
:effect
(and (not (handempty ?a1)) (not (onfloor ?x)) (holding ?a1 ?x)))
(define (operator putdown)
:parameters
(?a1 ?x)
:precondition
(and (inroom ?a1 ?r1) (inroom ?x ?r1) (inroom Table ?r1)
(holding ?a1 ?x))
:concurrent
(not (lift ?a2 ?s1))
:effect
(and (not (holding ?a1 ?x)) (ontable ?x) (handempty ?a1)))
(define (operator totable)
:parameters
(?a1 ?s1)
:precondition (and (inroom ?a1 ?r1) (inroom Table ?r1) (not (atside ?a2 ?s1)))
:concurrent
(and (not (totable ?a2 ?s1)) (not (= ?a1 ?a2)))
:effect
(atside ?a1 ?s1))

(define (operator movetable)
:parameters
(?a1 ?r1)
:precondition (holding ?a1 Table)
:concurrent
(and (movetable ?a2 ?r1) (not (= ?a1 ?a2)))
:effect
(and (inroom ?r1 Table) (inroom ?r1 ?a1)
(when ((ontable ?x) ()) (inroom ?r1 ?x))))
(define (operator lower)
:parameters
(?a1 ?s1)
:precondition (and (holding ?a1 ?s1) (up ?s1))
:concurrent
(and (not (lift ?a2 ?s2)) (not (= ?a1 ?a2)) (not (= ?s1 ?s2)))
:effect
(and (not (up ?s1))(down ?s1) (not (holding ?a1 ?s1))
(when ((and (ontable ?x) (up ?s2) (not (= ?s1 ?s2)))
(and (not (lower ?a2 ?s2)) (not (= ?a2 ?a1))))
(and (onfloor ?x) (not (ontable x))))))
(define (operator lift)
:parameters
(?a1 ?s1)
:precondition (and (atside ?s1 ?a1) (down ?s1) (down ?s2) (not (= ?s1 ?s2)))
:concurrent
(and (not (lower ?a2 ?s2)) (not (= ?a1 ?a2)) (not (= ?s1 ?s2)))
:effect
(and (not (down ?s1)) (up ?s1) (holding ?a1 ?s1)
(when ((and (ontable ?x) (down ?s2) (not (= ?s1 ?s2)))
(and (not (lift ?a2 ?s2))))
(and (onfloor ?x) (not (ontable x))))))

Figure 7: The table movers domain

122

Planning with Concurrent Interacting Actions

Suppose that InRoom(B; Room2) is the rst goal selected. This can be achieved by performing A1 = MoveTable(a1; Room2) via its conditional eect (note that a1 is an agent variable, so there is no commitment to which agent performs this action).10 We must add both
Holding(a1; Table) and OnTable(B ) to the agenda and insert the appropriate causal links.
In addition, the concurrent list forces us to add the action A2 = MoveTable(a2; Room2) to
the plan together with the non-codesignation constraint a1 6= a2. The ordering constraint
A1 = A2 is added as well. When we add A2, we must add its precondition Holding(a2; Table)
to the agenda as well. The structure of the partially constructed plan might be viewed as
follows:11
InRoom(Block, R2)

A1

GOAL

MoveTable(a1,R2)

A2

C

MoveTable(a2,R2)

Next, we choose the subgoal OnTable(B ) from the agenda (which we just added). We
add the action A3 = PutDown(a3; B ) to the plan with the appropriate ordering constraint
A3 < A1; its preconditions are added to the agenda and a causal link is added to L. In
addition, we must add to NC the nonconcurrency constraint not(Lift(a; s)): no agent can
lift any side of the table while the block is being placed on it if the desired eect is to be
achieved.
InRoom(Block, R2)

OnTable(Block)

A3
PutDown(a3,Block)

A1

MoveTable(a1,R2)

GOAL

C

A2

MoveTable(a2,R2)

10. We do not pursue the notion of heuristics for action selection here; but we do note that this action is
a plausible candidate for selection in the multi-block setting. If the goal list asserts that a number of
blocks should be in the second room, the single action of moving the table will achieve all of these under
the appropriate conditions (i.e., all the blocks are on the table). If action selection favors (conditional)
actions that achieve more goals or subgoals, this action will be considered before the actions needed for
\one by one" transport of the blocks by the individual agents. So this choice is not as silly as it might
seem in the single-block setting.
11. In the plan diagrams that follow, we indicate actions as Ai with the name of the action below it. Variables
are indicated by lower-case names (we do not indicate co-designation constraints in the diagrams). An
arrow from one action to another denotes a causal link (from producer to consumer), labeled by the
proposition being produced. Large arrows labeled with a C (resp. NC) denote concurrency (resp.
nonconcurrency) constraints between actions. We use left-to-right ordering to denote the temporal
ordering of actions, if such constraints exist.

123

Boutilier & Brafman

Now we choose the subgoal Holding(a1; Table). This can be achieved using A4 =
Lift(a1; s1), with the ordering constraint A4 < A1 . All the preconditions are added to
the agenda, but no concurrency conditions are added (yet!) for this action, since we do not
yet need to invoke the conditional eects of that action induced by simultaneous lifting of
the other side of the table:
Holding(a1,Table)

A4
Lift(a1,LS)

InRoom(Block, R2)

NC OnTable(Block)

A3

A1

PutDown(a3,Block)

GOAL

MoveTable(a1,R2)
C

A2

MoveTable(a2,R2)

We now note that the conditional eect of A4 poses a threat to the causal link A3 ontable
!
A1; this is because lifting a single side of the table will dump the block from the table. In
addition, the nonconcurrency constraint associated with A3 , that no lifting be performed
concurrently with A3 , is threatened by A4 (an NC-threat), as indicated in the plan diagram
above. The confrontation strategy is used to handle the rst threat, and the action A5 =
Lift(a4; s2) scheduled concurrently with A4 . The constraints s1 6= s2 and a4 6= a1 are also
imposed. This ensures that the undesirable eect will not occur. We resolve the NC threat
by ordering A3 before A4 .12 The resulting partially completed plan is now free of threats:
Holding(a1,Table)

A4
Lift(a1,LS)

InRoom(Block, R2)
OnTable(Block)

A3
PutDown(a3,Block)

C

A1

MoveTable(a1,R2)

GOAL

C

A5

A2

Lift(a2,RS)

MoveTable(a2,R2)

Next, we choose the subgoal Down(LeftSide). This is achieved using the action A6 =
Lower(a1; LeftSide) and its preconditions are added to the agenda. In a completely similar
way, A7 = Lower(a2; RightSide) is added to achieve Down(RightSide) (again, we anticipate
the unication of these agent variables).
12. In anticipation of a subsequent step, we use variable a2 in the plan diagram instead of a4, since they
will soon be unied. To keep things concrete, we have also replaced s1 and s2 with particular sides of
the table, LeftSide and RightSide, to make the discussion a bit less convoluted.

124

Planning with Concurrent Interacting Actions

A6
Lower(a1,LS)
Down(LS)

A4

Holding(a1,Table)

Lift(a1,LS)
OnTable(Block)

InRoom(Block, R2)

A3

A1

PutDown(a3,Block) C

MoveTable(a1,R2)

GOAL

C

A5

A2

Lift(a2,RS)

MoveTable(a2,R2)

A7

Down(RS)

Lower(a2,RS)

We now choose to work on the preconditions of A6 and A7 . Both of the preconditions,
Up(s) and Holding(a; s), are eects of Lift, so we use A4 and A5 as their producers. At this
stage, both A6 and A7 are constrained to follow A4 and A5 , but there are no constraints
on the relative ordering of A6 and A7 themselves. We also see that both A6 and A7
\potentially" threaten the causal link A3 ontable
!
A1; that is, they each have a conditional
eect that would cause the block to fall from the table. There are several ways to resolve
these two threats, including confrontation. We choose strict promotion, and order both A6
and A7 to occur after A1 and A2 .
Holding(a1,LS)
Up(a1,LS)

A4

A6
Lower(a1,LS)

Holding(a1,Table)

Down(LS)

Lift(a1,LS)
OnTable(Block)

A

3

PutDown(a3,Block)

C

A5
Lift(a2,RS)

InRoom(Block, R2)

A1

MoveTable(a1,R2)

GOAL

C

A2

MoveTable(a2,R2)

Down(RS)

A7
Lower(a2,RS)
Up(a2,RS)
Holding(a2,RS)

Now, we choose the subgoal OnFloor(B ), which is a conditional eect of the Lower
action. We choose to accomplish it using an existing action, A6 . In order to obtain the
desired eect, we ensure the antecedent of the when clause for this eect holds: this involves
adding the conditions of the antecedent (OnTable(B ) and Up(LeftSide)) to the agenda, and
imposing the nonconcurrency constraint of the antecedent, namely, that no concurrent
Lower action can take place. This constraint is threatened by the action A7 , so we order
125

Boutilier & Brafman

A6 before A7 by posting the constraint A6 < A7.13 The conditions of the antecedent,
OnTable(B ) and Up(LeftSide), can use A3 and A5 as the producers, respectively.
OnTable(Block)
Holding(a1,LS)
Up(a1,LS)

A4

A6
Lower(a1,LS)

Holding(a1,Table)

Down(LS)
OnFloor(Block)

Lift(a1,LS)
OnTable(Block)

A

3

PutDown(a3,Block)

C

InRoom(Block, R2)

A1

MoveTable(a1,R2)

GOAL

C
Holding(a2,Table) A
2
Lift(a2,RS)
MoveTable(a2,R2)

A5

Down(RS)

A7
Up(a2,RS)

Lower(a2,RS)

Holding(a2,RS)

The only unsolved subgoal is the precondition of the initial PutDown(a3; B ) action
(others, such as Down(LeftSide) for the Lift action, are produced by the initial state). We
don't illustrate it, but it is a simple matter to introduce the Pickup(a3; B ) action before
PutDown(a3; B ).
We now have the following plan: rst, the block is picked up and put on the table by
some agent a3 (either of Agent1 or Agent2 can do this). This is followed by two concurrent
lift actions and two concurrent move actions which get the table to the other room with the
block on top. Next, we have a single lower action, which makes the block fall o, followed
by another lower action which ensures that both sides of the table are on the oor. We
note that the plan does not care which of the agents (the one who lifts the LeftSide or the
RightSide) initially puts the block on the table.14

5. Soundness and Completeness of the POMP Algorithm
We say that a planning algorithm is sound if it generates only plans that are guaranteed
to achieve the goals posed to it; a complete algorithm is guaranteed to generate a plan if
a successful plan exists.15 In the case of concurrent nonlinear plans, we will say that an
algorithm is sound if each n-linearization of the plan produced for a given problem will
reach a goal state, and an algorithm is complete if it successfully generates a concurrent
nonlinear plan whenever there is a sequence of joint actions (i.e., an n-linearization of some
13. The other ordering A7 < A6 could have been used to resolve this threat; but it would cause an \unresolvable" threat to the conditions of the antecedent, which require that the other side remain up. It is,
of course, only \unresolvable" in the sense that it would require the agents to pick up the block, etc.,
essentially introducing a cycle in the plan.
14. Further examples of MAP problems, the plans produced by POMP, and code implementing the POMP
algorithm can be obtained at http://www.cs.bgu.ac.il/ishayl/project/.
15. For formal denitions of these concepts, we refer the reader to (Penberthy & Weld, 1992).

126

Planning with Concurrent Interacting Actions

concurrent plan) that achieves the goal from the initial state. We now show that the POMP
algorithm is both sound and complete.
The soundness proof is straightforward. Suppose that the generated plan is not sound.
Thus, some n-linearization of the plan does not achieve the goal or some required subgoal
(i.e., a precondition of one of the plan's actions). Because of the agenda mechanism, it
is clear that for each needed goal or precondition there exists an action in the plan that
achieves that subgoal (goal or precondition). Moreover, there is an explicit causal link in
the plan for that particular subgoal as well as an ordering constraint requiring that the
producing action to appear prior to the consuming action (or the goal). Any n-linearization
of a plan is another plan obtained from the original plan by adding new, consistent, strict
(i.e. <; >) ordering constraints. Recall that the original plan's ordering constraints must
have been consistent, otherwise it would not constitute a solution, and that there were no
threats. Clearly, by adding new strict ordering constraints we cannot cause any new threats
to causal links or violate a nonconcurrency constraint. Hence, the resulting n-linearization
respects all causal links of the original plan and all ordering constraints of the original plan.
To complete the proof, we must be convinced that POMP actually considers all possible,
relevant interactions between actions. Consider some eect P of an action a needed by some
action b which is ordered after a. Given the semantics of actions, there are only two reasons
why P will not hold prior to the execution of b: (1) some action c between a and b (possibly
concurrent with a) has an eect :P ; or (2) a did not actually have P as an eect. Case (1)
contradicts the fact that there are no threats (in our extended sense, covering the possibility
of c occurring concurrently with a) in the context of this plan. Case (2) implies that either
P is an eect of a subject to some concurrency or nonconcurrency condition that is violated
in this n-linearization. Any such problem would have been taken care of by the Action
Selection or Nonconcurrency Enforcement steps (and by the ordering constraints).
Thus it should be clear that any n-linearization of a plan produced by POMP does in fact
achieve all its goals; that is, POMP is sound.
The completeness proof rests on three key elements:
1. A reduction from multiagent planning problems to single agent planning problems.
2. The fact that POMP can solve a multiagent planning problem i POP can solve the
single agent planning problem obtained via this reduction.
3. The fact that POP is sound and complete (Penberthy & Weld, 1992).
First, we show how given a multiagent planning problem, a similar single agent planning
problem can be obtained. We shall refer to the generated problem as the equivalent single
agent planning problem (or the ESA problem). This reduction has the property that a plan
for the multiagent planning problem exists if and only if a plan for the ESA problem exists.
In the introduction, we discussed such a reduction via the use of joint actions. Here, we will
use a similar idea, but with a little more care so that both POMP and POP will perform
similar steps in the solution of the original problem and the ESA problem, respectively.
Combining these results with the fact that POP is sound and complete, we can deduce that
POMP is sound and complete as well.
127

Boutilier & Brafman

In the discussion below, we ignore conditional eects to avoid undue and, for the most
part, uninteresting complications. The extension of the arguments to deal with conditional
eects is straightforward. We rst recall the following facts relevant to our argument:
(a) POP and POMP are nondeterministic planning algorithms and, although there
are various ways of making them deterministic, this issue is orthogonal to the
proof. Thus, in showing the correspondence between POP and POMP alluded to
in point (2) above, we can utilize the exibility awarded to us by each planner's
use of nondeterministic choice. In particular, it is sucient to show that for a
given solution path for one planner, a similar solution path exists for the other.
(b) The choice of the next agenda element to work on is immaterial for both POP
and POMP|it can aect the running time (e.g., by causing backtracking) but
not the existence of a solution. Hence, we are exible in ordering the subgoals
achieved, as long as we respect causality (i.e., we cannot achieve a goal that is
derived from a precondition of an action that was not introduced yet).
(c) By introducing additional ordering constraints consistent with current constraints
in a valid plan, we obtain a valid plan for the given problem.
(d) The precise order in which actions and ordering constraints are inserted does
not aect the validity of the solution. In fact, as is well known in the planning
community, one can postpone the threat resolution step without aecting the
soundness or completeness of the algorithm, as long as all threats are eventually
resolved.
Our proof will proceed in two stages. In the rst stage, we will limit ourselves to a
restricted set of planning problems for which we can show the connections with POP in a
straightforward fashion. We then relax this restriction to show the correspondence between
the two planners in the general case.
Recall that in Section 2.3 we suggested a possible restriction on the set of actions one
is allowed to execute concurrently, namely, that no two actions a and b are permitted to
occur concurrently if one's eects negate any of the other's preconditions. We remarked
that this concurrent, non-clobbering condition, if not enforced in the action specication
itself, is easily enforced by the POMP algorithm if we modify the denition of a threat and
use promotions instead of weak promotions to resolve threats. Let us restrict attention, for
the time being, to domains respecting this condition.
We rst note the following fact. Let M be some POMP plan, and consider some nlinearization of M in which a1 and a2 occur concurrently, but where M is such that no
future actions require the eects produced by the concurrent execution of these actions.
That is, actions a1 and a2 are not forced to occur concurrently by plan M . In this case,
any similar n-linearization in which a1 is ordered before a2 , or vice versa, and no other
ordering constraints are violated (some such linearization must exist) will also achieve the
goal. The only case in which this might not happen is when one of a1 or a2 clobbers the
other's preconditions; but this has been explicitly disallowed in our restricted setting (by
the imposition of a nonconcurrency constraint or \precondition").
128

Planning with Concurrent Interacting Actions

Now consider the ESA problem, where the actions available to the agent are as follows:
for each individual action a that has no concurrency constraints in the multiagent problem,
we create an action corresponding to the joint action where a is performed by its \owning"
agent, and no-ops are executed by every other agent; and for each individual action a that
has concurrency conditions, requiring that actions b1;    bk be executed concurrently, we
create an action corresponding to the joint action where a and each of the bi are performed,
but no other actions apart from no-ops are performed.16 We note that nonconcurrency
constraints are ignored in the ESA problem denition.
Clearly, if a joint action sequence exists for a given problem, there also exists a concurrent nonlinear plan for that problem. In addition, by the argument above involving
the assumption that no concurrent action clobber another's precondition, it is also easy
to see that, if a concurrent nonlinear plan can be found for a problem, there also exists a
concurrent nonlinear plan in which the only concurrency constraints involve actions whose
specication requires the concurrent execution of another action (or set of actions) in order
to obtain a particular eect. This implies that, should a problem be solvable, it is solvable
by a sequence of joint actions of the type constructed above, using only single-agent individual actions together with a set of no-ops, or at most involving minimal sets of interacting
actions. In other words, a concurrent nonlinear plan exists for a given problem i a plan for
the ESA problem exists. We note that the structure of any solution for the ESA problem
(or any linearization of a nonlinear single-agent plan for the ESA problem) is very specic:
actions occur concurrently only if they are forced to. In other words, solutions to the ESA
problem are strung out plans, in which agents \take turns" performing their actions.
Next, we want to show that (in our restricted setting) POMP's solution path for a given
planning problem and POP's solution path for its ESA problem resemble each other. This
becomes apparent once we combine POMP's action selection and concurrent action selection
steps. We obtain a step that is equivalent to the action selection step of POP for the ESA
problem (i.e., whenever POMP chooses an action which requires another concurrent action,
the required concurrent action is immediately inserted as well; this is equivalent to inserting
the proper ESA action). In fact, now POP and POMP look almost identical, except for
POMP's Nonconcurrency Enforcement step. However, because of the fashion in which
the ESA problem was dened, all nonconcurrency constraints are automatically \imposed"
in the plan produced by POP since they refer to dierent joint actions. Any linearization
of these joint actions enforces the nonconcurrency of all joint actions. Therefore, the only
(single-agent) actions that can occur together in POP's solution to the ESA problem are
those that have to occur together and on which there is no nonconcurrency constraint. (In
fact, on these actions there is an explicit concurrency constraint.)17
The above argument demonstrates that POP and POMP generate \identical" sets of
plans, except for two small dierences. First, POMP's semantics allows for concurrent
execution of certain actions, even though they need not be executed concurrently in order
16. It is important to note that a single action schema gives rise to n individual actions, one for each
agent (e.g., Lift(Agent1; s) and Lift(Agent2; s) are distinct actions, and separate joint actions for these
will be created). Similarly, when the concurrency conditions involve action schemata, any permitted
combination of agent instantiations will give rise to a distinct joint action.
17. This assumes that concurrency lists are congruous, as described in Section 2; but if, not, a simple
redenition of the ESA problem can be given so that no \incongruous" concurrent actions are admitted.

129

Boutilier & Brafman

to solve the problem, while POP (for the ESA problem) cannot generate plans that admit
this. However, this dierence cannot aect the completeness argument (since it means that
POMP is more exible than POP).18 Second, POMP commits to a particular ordering of
actions for which there is a nonconcurrency constraint, while POP will not make such a
commitment if both orderings are consistent. However, if both are consistent (and remain
unordered in the nal plan for the ESA problem) then the choice POMP makes cannot
impact the solution (and POMP can produce either alternative if the ordering does matter).
Now, using the fact that POP is sound and complete, the virtual equivalence of POMP and
POP steps, and our facts about strung out plans and the ESA problem, we see that POMP
is sound and complete for the special case where concurrent actions do not destroy each
other's preconditions.
Finally, we wish to remove the restrictions placed on concurrent actions, and admit
problems where a concurrent action can clobber the precondition of another. We note that
problems of this type exist that cannot be solved by a strung out plan in the sense dened
above. For instance, consider the following problem. We have two actions:


Action a: Precondition P ; eect Q



Action b: Precondition :Q; eect :P

Actions a and b have no nonconcurrency constraints, thus they are not required to be
concurrent to have their specied eects when considered in isolation. Suppose our initial
state is fP; :Qg and the goal state is f:P; Qg. The only plan that achieves this goal requires
that a and b be executed concurrently. If we order one before the other, we will destroy the
ability to perform the second, and the goal will not be reachable. Thus, POMP can solve
this problem while POP could not solve the ESA problem (as formulated above).
To deal with the more general case, we extend the construction of the ESA problem by
including (in addition to the actions used in the restricted case) a joint action in the ESA
problem for any set of actions A satisfying the following conditions:


Each element of A is permitted to be executed concurrently (but need not be forced
to be concurrent).



Each element of A clobbers the precondition of some other element of A.



No element of A can be removed without destroying this property.

In other words, we create a joint action corresponding to the concurrent execution of each
element of such a set A. We'll call these \self-clobbering" joint actions. It should be evident
that a concurrent nonlinear plan exists for an arbitrary multiagent planning problem i there
exists a sequence of joint actions (allowing self-clobbering actions) that solve the problem,
and hence (by the soundness and completeness of POP) i POP can nd a plan for this
generalized ESA problem. We have already seen that POMP can emulate any step of POP
18. This additional exibility impacts only the soundness of POMP (and is addressed above). In fact, we
could have used the current line of reasoning as part of an integrated soundness and completeness proof
based on the POP/POMP correspondence, in which case, we would need to explain why this last point
does not hinder the soundness of POMP.

130

Planning with Concurrent Interacting Actions

involving actions other than self-clobbering actions. We simply have to show that POMP
can emulate POP's introduction of self-clobbering actions to show completeness.
Let A be some self-clobbering joint action. We claim that POP is complete (for the
generalized ESA problem) if it only ever considers adding A to an incomplete plan when
each of its elements ai 2 A has an eect that satises some subgoal on the agenda. Suppose,
to the contrary, that ai 2 A has no consumer on the current agenda. Then either A is not
necessary in a successful plan (since some subset of the actions in A can be used), or the
actions that consume the eects of some ai have not yet been introduced. We can discount
the former case by considering only executions of POP that do not use this action. POP
will be complete even if this action is never considered, since it is able to introduce the
individual components (or concurrent subsets) of A that do produce the necessary eects.
We can discount the latter case, since there must be a valid execution of POP that introduces
the (ultimate) consumers of each element of ai before introducing A. Thus, without loss of
generality, we assume that each element ai 2 A satises some subgoal on the agenda if A is
introduced by POP.
Now suppose POP introduces a self-clobbering action A. Since all ai 2 A satisfy some
agenda item, POMP can simulate this step as follows: introduce each ai in turn to satisfy
some agenda item, postponing threat resolution among the ai ; resolve the self-threats among
the ai through weak promotion in the Causal Link Protection step (so that we impose
ordering constraint ai  aj for ai that threatens aj ). In the example above, for instance,
once actions a and b are added to achieve subgoals Q and :P , respectively, the only way
to resolve the mutual threat is by weak promotion of both actions; that is, we impose a  b
and b  a. In other words, they are forced to be concurrent. Thus any introduction of
a self-clobbering joint action by POP (under the assumptions stated above) has a strong
correspondence with a sequence of possible steps in POMP. Since POP can always nd
a plan under these assumptions, so can POMP. Thus the completeness of POMP in the
general case of arbitrary multiagent planning problems is demonstrated.

6. Concluding Remarks
One often nds assertions in the planning literature that planning with interacting actions
is an inherently problematic aair, requiring substantial extension to existing single-agent
planning representations and algorithms. Thus, it is somewhat surprising that only minor
changes are needed to enable the STRIPS action representation language to capture interacting actions, and that relatively small modications to existing nonlinear planners are
required to generate concurrent plans. Our solution involves the addition of a concurrent
action list to the standard action description, specifying which actions should or should
not be scheduled concurrently with the current action in order to achieve a desired eect.
The POP planner is augmented by two steps: one which handles the insertion of required
concurrent actions, and one which handles threats emanating from the potential concurrent
execution of two interfering actions. In addition, explicit reasoning with equality and inequality constraints is introduced. Because of the strong resemblance between our solution
for the multiagent case and the solution for the single agent case, little overhead is incurred
when actions do not interact. In fact, in the extreme case of non-interacting actions, both
our extension to STRIPS and to POP reduce to their single-agent equivalents.
131

Boutilier & Brafman

There is a close connection between our specication method and Knoblock's (1994)
approach to generating parallel execution plans. Knoblock adds to the action description a
list that describes the resources used by the action: actions that require the same resource
(e.g., access to a database) cannot be scheduled at the same time. Hence, Knoblock's
resource list actually characterizes one form of nonconcurrency constraint.19 In fact, we
believe that certain nonconcurrency constraints are more naturally described using such a
resource list than with the general method proposed here|augmenting our language with
such lists should not prove dicult.
The treatment of concurrent actions in the specication languages Ac (Baral & Gelfond, 1997) and C (Giunchiglia & Lifschitz, 1998) has many features in common with our
extension of STRIPS (although C , in particular, is a very expressive language with many
additional features). These languages allow the use of complex actions|which are sets of
primitive actions|analogous to the ability we provide to combine a number of elements
into a joint action. Typically, complex actions inherit their eects from the primitive actions contained in them. However, explicit specication of the eects of complex actions is
possible, overriding this inheritance. This overriding mechanism can extend to an arbitrary
number of levels (e.g., an action a can have some eect, which is overridden when a and b
are performed concurrently, but this eect is itself overridden when c is performed as well,
etc.). In these action description languages, an implicit view of time is adopted, much like
in our treatment, and concurrent actions are assumed to be performed simultaneously. Until quite recently, there were no tools for actually synthesizing plans for domains described
in languages such as C . However, recent progress in model-based techniques had led to
a number of new algorithms, including a SAT encoding for the language C (Giunchiglia,
2000).
When the eects of one agent's actions depend on the actions performed by other agents
at the same time, action specication becomes a complex task. The STRIPS representation is
useful because it admits a relatively simple planning algorithm. However, despite STRIPS's
semantic adequacy and its ability, in principle, to represent any set of actions, verifying that
a domain description is accurate becomes more dicult when interactions must be taken into
account. Consequently, we believe that the use of dynamic Bayes nets, in conjunction with
conditional outcome (or probability) trees (Boutilier & Goldszmidt, 1996), can provide a
more natural and concise representation of actions in multiagent settings. This specication
technique makes clear the inuence of dierent context conditions on an action's eects,
and allows one to exploit the independence of dierent eects. While this representation
can be used for stochastic domains, dynamic Bayes nets oer these advantages even in the
case of purely deterministic actions. The POMP algorithm naturally extends to this form
of domain description, and a more complete treatment of this issue would be an interesting
direction for future research.
While adapting existing nonlinear planners to handle interacting actions is conceptually
simple, we expect that the increase in domain complexity will inevitably lead to poor computational performance. Indeed, in our experiments with the POMP algorithm, we have
found that performance is greatly aected by the ordering of agenda items. Hence, adequate
heuristics for making the various choices the planner is faced with|namely, choosing sub19. In principle, any nonconcurrency constraint can be handled in this manner by introducing ctitious
resources.

132

Planning with Concurrent Interacting Actions

goals, choosing actions that achieve them, and choosing threat-resolution strategies|will
become even more critical. Of course, the same issues are central for single-agent nonlinear
planners, though we anticipate that the multiagent case with its interacting actions will
require dierent, or additional, heuristics.
An interesting topic for future work would be extending newer planning algorithms
such as Graphplan (Blum & Furst, 1995) to handle our multiagent representation language.
Indeed, the model-based algorithm of Cimatti, et al. (1997) seems to oer promising developments in this direction. Naturally, all representational issues raised in this paper arise
regardless of the particular planning algorithm used, although with dierent implications.
For example, the question of whether or not to allow for concurrent actions that destroy
one another's preconditions aected which threat removal operators were valid in POMP,
whereas in Graphplan they would aect the denition of interfering actions (and consequently, the question of which actions are considered mutually exclusive).
Finally, we note that the approach we have considered is suitable for a team of agents
with a common set of goals. It assumes that some central entity generates the plan, and
that the agents have access to a global clock or some other synchronization mechanism
(this is typically the case for a single agent with multiple eectors, and applies in certain
cases to more truly distributed systems). An important research issue is how such plans
can be generated and executed in a distributed fashion, and how their execution should
be coordinated and controlled. This is an important question to which some answers have
emerged in the DAI literature (des Jardins, Durfee, Ortiz Jr., & Wolverton, 1999; Grosz,
Hunsberger, & Kraus, 1999; des Jardins & Wolverton, 1999; Boutilier, 1996, 1999; Brafman,
Halpern, & Shoham, 1998) and the distributed systems literature (Fagin, Halpern, Moses,
& Vardi, 1995).

Acknowledgments
Thanks to the referees for their suggestions on the presentation of these ideas and to Mike
Wellman for his helpful comments. We also thank Daniel Fogel, Ishay Levy, and Igor Razgon
for their implementation of the POMP algorithm. Boutilier was supported by NSERC Research Grant OGP0121843, and the NCE IRIS-II program Project IC-7. Brafman was supported by Paul Ivanier Center for Robotics and NCE IRIS-II program Project IC-7. Much
of this work was undertaken while both authors were at the University of British Columbia,
Department of Computer Science. Preliminary results in this paper were presented in
\Planning with Concurrent Interacting Actions," Proceedings of the Fourteenth National
Conference on Articial Intelligence (AAAI-97), Providence, RI, pp.720{729 (1997).

References
Baral, C., & Gelfond, M. (1997). Reasoning about eects of concurrent actions. Journal of
Logic Programming, 85{117.
Blum, A. L., & Furst, M. L. (1995). Fast planning through graph analysis. In Proceedings
of the Fourteenth International Joint Conference on Articial Intelligence, pp. 1636{
1642 Montreal.
133

Boutilier & Brafman

Boutilier, C. (1996). Planning, learning and coordination in multiagent decision processes.
In Proceedings of the Sixth Conference on Theoretical Aspects of Rationality and
Knowledge, pp. 195{210 Amsterdam.
Boutilier, C. (1999). Sequential optimality and coordination in multiagent systems. In
Proceedings of the Sixteenth International Joint Conference on Articial Intelligence,
pp. 478{485 Stockholm.
Boutilier, C., & Goldszmidt, M. (1996). The frame problem and Bayesian network action
representations. In Proceedings of the Eleventh Biennial Canadian Conference on
Articial Intelligence, pp. 69{83 Toronto.
Brafman, R. I., Halpern, J. Y., & Shoham, Y. (1998). On the knowledge requirements of
tasks. Articial Intelligence, 98 (1-2), 317{350.
Cimatti, A., Giunchiglia, E., Giunchiglia, F., & Traverso, P. (1997). Planning via model
checking: A decision procedure for AR. In Proceedings of the Fourth European Conference on Planning (ECP'97), pp. 130{142 Toulouse.
de Giacomo, G., Lesperance, Y., & Levesque, H. J. (1997). Reasoning about concurrent
execution, prioritized interrupts, and exogenous actions in the situation calculus. In
Proceedings of the Fifteenth International Joint Conference on Articial Intelligence,
pp. 1221{1226 Nagoya.
Dean, T., & Kanazawa, K. (1989). Persistence and probabilistic projection. IEEE Trans.
on Systems, Man and Cybernetics, 19 (3), 574{585.
des Jardins, M. E., Durfee, E. H., Ortiz Jr., C. L., & Wolverton, M. J. (1999). A survey of
research in distributed continual planning. AI Magazine, 20 (4), 13{22.
des Jardins, M. E., & Wolverton, M. J. (1999). Coodinating a distributed planning system.
AI Magazine, 20 (4), 13{22.
Donald, B. R., Jennings, J., & Rus, D. (1993). Information invariants for cooperating
autonomous mobile robots. In Proceedings of the International Symposium on Robotics
Research Hidden Valley, PA.
Durfee, E. H., & Lesser, V. R. (1989). Negotiating task decomposition and allocation using
partial global planning. In Huhns, M., & Gasser, L. (Eds.), Distributed AI, Vol. 2.
Morgan Kaufmann.
Durfee, E. H., & Lesser, V. R. (1991). Partial global planning: A coordination framework for distributed hypothesis formation. IEEE Transactions on System, Man, and
Cybernetics, 21 (5), 1167{1183.
Ephrati, E., Pollack, M. E., & Rosenschein, J. S. (1995). A tractable heuristic that maximizes global utility through plan combination. In Proceedings of the First International Conference on Multiagent Systems, pp. 94{101 San Francisco.
134

Planning with Concurrent Interacting Actions

Fagin, R., Halpern, J. Y., Moses, Y., & Vardi, M. Y. (1995). Reasoning about Knowledge.
MIT Press, Cambridge, MA.
Fikes, R., & Nilsson, N. (1971). STRIPS: A new approach to the application of theorem
proving to problem solving. Articial Intelligence, 2 (3{4), 189{208.
Ghallab, M., & Alaoui, A. M. (1989). Managing eciently temporal relations through
indexed spanning trees. In Proceedings of the Eleventh International Joint Conference
on Articial Intelligence, pp. 1297{1303 Detroit.
Giunchiglia, E. (2000). Planning as satisability with expressive action languages: Concurrency, constraints and nondeterminism. In Proceedings of the Seventh International
Conference on Principles of Knowledge Representation and Reasoning (KR'00), pp.
657{666 Breckenridge, CO.
Giunchiglia, E., & Lifschitz, V. (1998). An action language based on causal explanation:
Preliminary report. In Proceedings of the Fifteenth National Conference on Articial
Intelligence, pp. 623{630 Madison, WI.
Grosz, B. J., Hunsberger, L., & Kraus, S. (1999). Planning and acting together. AI
Magazine, 20 (4), 13{22.
Jensen, R. M., & Veloso, M. M. (2000). OBDD-based universal planning for synchronized
agents in non-deterministic domains. Journal of Articial Intelligence Research, 13,
189{226.
Kautz, H., & Selman, B. (1996). Pushing the envelope: Planning, propositional logic, and
stochastic search. In Proceedings of the Thirteenth National Conference on Articial
Intelligence, pp. 1194{1201 Portland, OR.
Khatib, O., Yokoi, K., Chang, K., Ruspini, D., Holmberg, R., Casal, A., & Baader, A.
(1996). Force strategies for cooperative tasks in multiple mobile manipulation systems.
In Giralt, G., & Hirzinger, G. (Eds.), Robotics Research 7, The Seventh International
Symposium, pp. 333{342. Springer-Verlag, Berlin.
Knoblock, C. A. (1994). Generating parallel execution plans with a partial-order planner.
In Proceedings of the Second International Conference on AI Planning Systems, pp.
98{103 Chicago.
Koehler, J. (1998). Planning under resource constraints. In Proceedings of the Thirteenth
European Conference on Articial Intelligence, pp. 489{493 Brighton, UK.
Lin, F., & Shoham, Y. (1992). Concurrent actions in the situation calculus. In Proceedings
of the Tenth National Conference on Articial Intelligence, pp. 590{595 San Jose.
Lingard, A. R., & Richards, E. B. (1998). Planning parallel actions. Articial Intelligence,
99 (2), 261{324.
McCarthy, J., & Hayes, P. (1969). Some philosophical problems from the standpoint of
articial intelligence. Machine Intelligence, 4, 463{502.
135

Boutilier & Brafman

Moses, Y., & Tennenholtz, M. (1995). Multi-entity models. Machine Intelligence, 14, 63{88.
Penberthy, J. S., & Weld, D. S. (1992). UCPOP: A sound, complete, partial order planner for
ADL. In Proceedings of the Third International Conference on Principles of Knowledge
Representation and Reasoning (KR'92), pp. 103{114 Cambridge, MA.
Pinto, J. (1998). Concurrent actions and interacting eects. In Proceedings of the Sixth
International Conference on Principles of Knowledge Rerpresentation and Reasoning
(KR'98), pp. 292{303 Trento.
Reiter, R. (1978). On closed world databases. In Gallaire, H., & Minker, J. (Eds.), Logic
and Databases, pp. 55{76. Plenum, New York.
Reiter, R. (1991). The frame problem in the situation calculus: A simple solution (sometimes) and a completeness result for goal regression. In Lifschitz, V. (Ed.), Articial
Intelligence and Mathematical Theory of Computation (Papers in Honor of John McCarthy), pp. 359{380. Academic Press, San Diego.
Reiter, R. (1996). Natural actions, concurrency and continuous time in the situation calculus. In Proceedings of the Fifth International Conference on Principles of Knowledge
Representation and Reasoning (KR'96), pp. 2{13.
Stone, P., & Veloso, M. M. (1999). Task decomposition, dynamic role assignment, and lowbandwidth communication for real-time strategic teamwork. Articial Intelligence,
110 (2), 241{273.
Weld, D. S. (1994). An introduction to least commitment planning. AI Magazine, 15 (4),
27{61.
Wilkins, D. E., & Myers, K. L. (1998). A multiagent planning architecture. In Proceedings of
the Fourth International Conference on AI Planning Systems, pp. 154{162 Pittsburgh.
Wolverton, M. J., & des Jardins, M. (1998). Controlling communication in distributed planning using irrelevance reasoning. In Proceedings of the Fifteenth National Conference
on Articial Intelligence, pp. 868{874 Madison, WI.

136

Journal of Artificial Intelligence Research 14 (2001) 303–358

Submitted 10/00; published 6/01

GIB: Imperfect Information in a Computationally
Challenging Game
Matthew L. Ginsberg

ginsberg@cirl.uoregon.edu

CIRL
1269 University of Oregon
Eugene, OR 97405 USA

Abstract
This paper investigates the problems arising in the construction of a program to play the
game of contract bridge. These problems include both the difficulty of solving the game’s
perfect information variant, and techniques needed to address the fact that bridge is not, in
fact, a perfect information game. Gib, the program being described, involves five separate
technical advances: partition search, the practical application of Monte Carlo techniques to
realistic problems, a focus on achievable sets to solve problems inherent in the Monte Carlo
approach, an extension of alpha-beta pruning from total orders to arbitrary distributive
lattices, and the use of squeaky wheel optimization to find approximately optimal solutions
to cardplay problems.
Gib is currently believed to be of approximately expert caliber, and is currently the
strongest computer bridge program in the world.

1. Introduction
Of all the classic games of mental skill, only card games and Go have yet to see the appearance of serious computer challengers. In Go, this appears to be because the game is
fundamentally one of pattern recognition as opposed to search; the brute-force techniques
that have been so successful in the development of chess-playing programs have failed almost utterly to deal with Go’s huge branching factor. Indeed, the arguably strongest Go
program in the world (Handtalk) was beaten by 1-dan Janice Kim (winner of the 1984 Fuji
Women’s Championship) in the 1997 AAAI Hall of Champions after Kim had given the
program a monumental 25 stone handicap.
Card games appear to be different. Perhaps because they are games of imperfect information, or perhaps for other reasons, existing poker and bridge programs are extremely
weak. World poker champion Howard Lederer (Texas Hold’em, 1996) has said that he would
expect to beat any existing poker program after five minutes’ play.†1 Perennial world bridge
champion Bob Hamman, seven-time winner of the Bermuda Bowl, summarized the state of
bridge programs in 1994 by saying that, “They would have to improve to be hopeless.”†
In poker, there is reason for optimism: the gala system (Koller & Pfeffer, 1995), if
applicable, promises to produce a computer player of unprecedented strength by reducing
the poker “problem” to a large linear optimization problem which is then solved to generate
a strategy that is nearly optimal in a game-theoretic sense. Schaeffer, author of the world
1. Many of the citations here are the results of personal communications. Such communications are indicated simply by the presence of a † in the accompanying text.
c
°2001
AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Ginsberg

champion checkers program Chinook (Schaeffer, 1997), is also reporting significant success
in the poker domain (Billings, Papp, Schaeffer, & Szafron, 1998).
The situation in bridge has been bleaker. In addition, because the American Contract
Bridge League (acbl) does not rank the bulk of its players in meaningful ways, it is difficult
to compare the strengths of competing programs or players.
In general, performance at bridge is measured by playing the same deal twice or more,
with the cards held by one pair of players being given to another pair during the replay and
the results then being compared.2 A “team” in a bridge match thus typically consists of
two pairs, with one pair playing the North/South (N/S) cards at one table and the other
pair playing the E/W cards at the other table. The results obtained by the two pairs are
added; if the sum is positive, the team wins this particular deal and if negative, they lose
it.
In general, the numeric sum of the results obtained by the two pairs is converted to
International Match Points, or imps. The purpose of the conversion is to diminish the
impact of single deals on the total, lest an abnormal result on one particular deal have an
unduly large impact on the result of an entire match.
Jeff Goldsmith† reports that the standard deviation on a single deal in bridge is about 5.5
imps, so that if two roughly equal pairs were to play the deal, it would not be surprising if one
team beat the other by about this amount. It also appears that the difference between an
average club player and an expert is about 1.5 imps (per deal played); the strongest players
in the world are approximately 0.5 imps/deal better still. Excepting gib, the strongest
bridge playing programs appear to be slightly weaker than average club players.
Progress in computer bridge has been slow. An incorporation of planning techniques into
Bridge Baron, for example, appears to have led to a performance increment of approximately
1/3 imp per deal (Smith, Nau, & Throop, 1996). This modest improvement still leaves
Bridge Baron far shy of expert-level (or even good amateur-level) performance.
Prior to 1997, bridge programs generally attempted to duplicate human bridge-playing
methodology in that they proceeded by attempting to recognize the class into which any
particular deal fell: finesse, end play, squeeze, etc. Smith et al.’s work on the Bridge Baron
program uses planning to extend this approach, but the plans continue to be constructed
from human bridge techniques. Nygate and Sterling’s early work on python (Sterling &
Nygate, 1990) produced an expert system that could recognize squeezes but not prepare for
them. In retrospect, perhaps we should have expected this approach to have limited success;
certainly chess-playing programs that have attempted to mimic human methodology, such
as paradise (Wilkins, 1980), have fared poorly.
Gib, introduced in 1998, works differently. Instead of modeling its play on techniques
used by humans, gib uses brute-force search to analyze the situation in which it finds itself.
A variety of techniques are then used to suggest plays based on the results of the brute-force
search. This technique has been so successful that all competitive bridge programs have
switched from a knowledge-based approach to a search-based approach.
GIB’s cardplay based on brute-force techniques was at the expert level (see Section 3)
even without some of the extensions that we discuss in Section 5 and subsequently. The
weakest part of gib’s game is bidding, where it relies on a large database of rules describing
2. The rules of bridge are summarized in Appendix A.

304

GIB: Imperfect information in a computationally challenging game

the meanings of various auctions. Quantitative comparisons here are difficult, although the
general impression of the stronger players using GIB are that its overall play is comparable
to that of a human expert.
This paper describes the various techniques that have been used in the gib project, as
follows:
1. Gib’s analysis in both bidding and cardplay rests on an ability to analyze bridge’s
perfect-information variant, where all of the cards are visible and each side attempts
to take as many tricks as possible (this perfect-information variant is generally referred
to as double dummy bridge). Double dummy problems are solved using a technique
known as partition search, which is discussed in Section 2.
2. Early versions of gib used Monte Carlo methods exclusively to select an action based
on the double dummy analysis. This technique was originally proposed for cardplay
by Levy (Levy, 1989), but was not implemented in a performance program before
gib. Extending Levy’s suggestion, gib uses Monte Carlo simulation for both cardplay
(discussed in Section 3) and bidding (discussed in Section 4).
3. Section 5 discusses difficulties with the Monte Carlo approach. Frank et al. have
suggested dealing with these problems by searching the space of possible plans for
playing a particular bridge deal, but their methods appear to be intractable in both
theory and practice (Frank & Basin, 1998; Frank, Basin, & Bundy, 2000). We instead
choose to deal with the difficulties by modifying our understanding of the game so
that the value of a bridge deal is not an integer (the number of tricks that can be
taken) but is instead taken from a distributive lattice.
4. In Section 6, we show that the alpha-beta pruning mechanism can be extended to deal
with games of this type. This allows us to find optimal plans for playing bridge end
positions involving some 32 cards or fewer. (In contrast, Frank’s method is capable
only of finding solutions in 16 card endings.)
5. Finally, applying our ideas to the play of full deals (52 cards) requires solving an
approximate version of the overall problem. In Section 7, we describe the nature of
the approximation used and our application of squeaky wheel optimization (Joslin &
Clements, 1999) to solve it.
Concluding remarks are contained in Section 8.

2. Partition search
Computers are effective game players only to the extent that brute-force search can overcome
innate stupidity; most of their time spent searching is spent examining moves that a human
player would discard as obviously without merit.
As an example, suppose that White has a forced win in a particular chess position,
perhaps beginning with an attack on Black’s queen. A human analyzing the position will
see that if Black doesn’t respond to the attack, he will lose his queen; the analysis considers
places to which the queen could move and appropriate responses to each.
305

Ginsberg

A machine considers responses to the queen moves as well, of course. But it must also
analyze in detail every other Black move, carefully demonstrating that each of these other
moves can be refuted by capturing the Black queen. A six-ply search will have to analyze
every one of these moves five further ply, even if the refutations are identical in all cases.
Conventional pruning techniques cannot help here; using α-β pruning, for example, the
entire “main line” (White’s winning choices and all of Black’s losing responses) must be
analyzed even though there is a great deal of apparent redundancy in this analysis.3
In other search problems, techniques based on the ideas of dependency maintenance (Stallman & Sussman, 1977) can potentially be used to overcome this sort of difficulty. As an
example, consider chronological backtracking applied to a map coloring problem. When a
dead end is reached and the search backs up, no information is cached and the effect is to
eliminate only the specific dead end that was encountered. Recording information giving
the reason for the failure can make the search substantially more efficient.
In attempting to color a map with only three colors, for example, thirty countries may
have been colored while the detected contradiction involves only five. By recording the
contradiction for those five countries, dead ends that fail for the same reason can be avoided.
Dependency-based methods have been of limited use in practice because of the overhead
involved in constructing and using the collection of accumulated reasons. This problem has
been substantially addressed in the work on dynamic backtracking (Ginsberg, 1993) and its
successors such as relsat (Bayardo & Miranker, 1996), where polynomial limits are placed
on the number of nogoods being maintained.
In game search, however, most algorithms already include significant cached information
in the form of a transposition table (Greenblatt, Eastlake, & Crocker, 1967; Marsland, 1986).
A transposition table stores a single game position and the backed up value that has been
associated with it. The name reflects the fact that many games “transpose” in that identical
positions can be reached by swapping the order in which moves are made. The transposition
table eliminates the need to recompute values for positions that have already been analyzed.
These collected observations lead naturally to the idea that transposition tables should
store not single positions and their values, but sets of positions and their values. Continuing
the dependency-maintenance analogy, a transposition table storing sets of positions can
prune the subsequent search far more efficiently than a table that stores only singletons.
There are two reasons that this approach works. The first, which we have already mentioned, is that most game-playing programs already maintain transposition tables, thereby
incurring the bulk of the computational expense involved in storing such tables in a more
general form. The second and more fundamental reason is that when a game ends with one
player the winner, the reason for the victory is generally a local one. A chess game can be
thought of as ending when one side has its king captured (a completely local phenomenon);
a checkers game, when one side runs out of moves. Even if an internal search node is evaluated before the game ends, the reason for assigning it any specific value is likely to be
independent of some global features (e.g., is the Black pawn on a5 or a6?). Partition search
exploits both the existence of transposition tables and the locality of evaluation for realistic
games.
3. An informal solution to this is Adelson-Velskiy et al.’s method of analogies (Adelson-Velskiy, Arlazarov,
& Donskoy, 1975). This approach appears to have been of little use in practice because it is restricted
to a specific class of situations arising in chess games.

306

GIB: Imperfect information in a computationally challenging game

X X
O
O
X

!
!!
!
!

!

O moves

aa

@

@
@

aa
aa

X X
O O
O
X

X X
O
O O X

X X
O
O
O
X

X X O
O
O
X

X X X
O O
O
X

X X X
O
O O X

X X X
O
O
O
X

X X O
O X
O
X

Figure 1: A portion of the game tree for tic-tac-toe

This section explains these ideas via an example and then describes them formally.
Experimental results for bridge are also presented.
2.1 An example
Our illustrative examples for partition search will be taken from the game of tic-tac-toe.
A portion of the game tree for this game appears in Figure 1, where we are analyzing a
position that is a win for X. We show O’s four possible moves, and a winning response
for X in each case. Although X frequently wins by making a row across the top of the
diagram, α-β pruning cannot reduce the size of this tree because O’s losing options must
all be analyzed separately.
Consider now the position at the lower left in the diagram, where X has won:
X X X
O O
O
X

(1)

The reason that X has won is local. If we are retaining a list of positions with known
outcomes, the entry we can make because of this position is:
X X X
? ? ?
? ? ?

(2)

where the ? means that it is irrelevant whether the associated square is marked with an X, an
O, or unmarked. This table entry corresponds not to a single position, but to approximately
36 because the unassigned squares can contain X’s, O’s, or be blank. We can reduce the
game tree in Figure 1 to:
307

Ginsberg

X X
O
O
X

!
!!
!
!

!

X X
O O
O
X

O moves

a
@ aa
aa
@
@
a

X X
O
O O X

X X
O
O
O
X

X X O
O
O
X

@

@
@

X X X
? ? ?
? ? ?

Continuing the analysis, it is clear that the position

X X O
O X
O
X

X X
? ? ?
? ? ?

(3)

is a win for X if X is on play.4 So is
X ? ?
?
?
? ? X

and the tree can be reduced to:
X X
O
O
X






X X
? ? ?
? ? ?

O moves

HH
H
HH

X ? ?
?
?
? ? X

X X X
? ? ?
? ? ?

X ? ?
? X ?
? ? X

Finally, consider the position
X X
?
? ? X

(4)

where it is O’s turn as opposed to X’s. If O moves in the second row, we get an instance of
X X
? ? ?
? ? ?

while if O moves to the upper right, we get an instance of
X ? ?
?
?
? ? X
4. We assume that O has not already won the game here, since X would not be “on play” if the game were
over.

308

GIB: Imperfect information in a computationally challenging game

Thus every one of O’s moves leads to a position that is known to be a win for X, and we
can conclude that the original position (4) is a win for X as well. The root node in the
reduced tree can therefore be replaced with the position of (4).
These positions capture the essence of the algorithm we will propose: If player x can
move to a position that is a member of a set known to be a win for x, the given position is
a win as well. If every move is to a position that is a loss, the original position is also.
2.2 Formalizing partition search
In this section, we present a summary of existing methods for evaluating positions in game
trees. There is nothing new here; our aim is simply to develop a precise framework in which
our new results can be presented.
Definition 2.2.1 An interval-valued game is a quadruple (G, pI , s, ev), where G is a finite
set of legal positions, pI ∈ G is the initial position, s : G → 2G gives the immediate
successors of a given position, and ev is an evaluation function
ev : G → {max, min} ∪ [0, 1]
Informally, p0 ∈ s(p) means that position p0 can be reached from p in a single move, and
the evaluation function ev labels internal nodes based upon whose turn it is to play (max or
min) and values terminal positions in terms of some element of the unit interval [0, 1].
The structures G, pI , s and ev are required to satisfy the following conditions:
1. There is no sequence of positions p0 , . . . , pn with n > 0, pi ∈ s(pi−1 ) for each i and
pn = p0 . In other words, there are no “loops” that return to an identical position.
2. ev(p) ∈ [0, 1] if and only if s(p) = Ø. In other words, ev assigns a numerical value to
p if and only if the game is over. Informally, ev(p) = max means that the maximizer
is to play and ev(p) = min means that the minimizer is to play.
We use 2G to denote the power set of G, the set of subsets of G. There are two further
things to note about this definition.
First, the requirement that the game have no “loops” is consistent with all modern
games. In chess, for example, positions can repeat but there is a concealed counter that
draws the game if either a single position repeats three times or a certain number of moves
pass without a capture or a pawn move. In fact, dealing with the hidden counter is more
natural in a partition search setting than a conventional one, since the evaluation function
is in general (although not always) independent of the value of the counter.
Second, the range of ev includes the entire unit interval [0, 1]. The value 0 represents
a win for the minimizer, and 1 a win for the maximizer. The intermediate values might
correspond to intermediate results (e.g., a draw) or, more importantly, allow us to deal with
internal search nodes that are being treated as terminal and assigned approximate values
because no time remains for additional search.
The evaluation function ev can be used to assign numerical values to the entire set G
of positions:
309

Ginsberg

Definition 2.2.2 Given an interval-valued game (G, pI , s, ev), we introduce a function
evc : G → [0, 1] defined recursively by

 ev(p),

evc (p) = maxp0 ∈s(p) evc (p0 ),

minp0 ∈s(p) evc (p0 ),

if ev(p) ∈ [0, 1];
if ev(p) = max;
if ev(p) = min.

The value of (G, pI , s, ev) is defined to be evc (pI ).
To evaluate a position in a game, we can use the well-known minimax procedure:
Algorithm 2.2.3 (Minimax) For a game (G, pI , s, ev) and a position p ∈ G, to compute
evc (p):
if ev(p) ∈ [0, 1] return ev(p)
if ev(p) = max return maxp0 ∈s(p) minimax(p0 )
if ev(p) = min return minp0 ∈s(p) minimax(p0 )
There are two ways in which the above algorithm is typically extended. The first involves the introduction of transposition tables; we will assume that a new entry is added
to the transposition table T whenever one is computed. (A modification to cache only
selected results is straightforward.) The second involves the introduction of α-β pruning.
Incorporating these ideas gives us the algorithm at the top of the next page.
Each entry in the transposition table consists of a position p, the current cutoffs [x, y],
and the computed value v. Note the need to include information about the cutoffs in the
transposition table itself, since the validity of any particular entry depends on the cutoffs
in question.
As an example, suppose that the value of some node is in fact 1 (a win for the maximizer) but that when the node is evaluated with cutoffs of [0, 0.5] a value of 0.5 is returned
(indicating a draw) because the maximizer has an obviously drawing line. It is clear that
this value is only accurate for the given cutoffs; wider cutoffs will lead to a different answer.
In general, the upper cutoff y is the currently smallest value assigned to a minimizing
node; the minimizer can do at least this well in that he can force a value of y or lower.
Similarly, x is the currently greatest value assigned to a maximizing node. These cutoff
values are updated as the algorithm is invoked recursively in the lines responsible for setting
vnew , the value assigned to a child of the current position p.
Proposition 2.2.4 Suppose that v = αβ(p, [x, y]) for each entry (p, [x, y], v) in T . Then if
evc (p) ∈ [x, y], the value returned by Algorithm 2.2.5 is evc (p).

310

GIB: Imperfect information in a computationally challenging game

Algorithm 2.2.5 (α-β pruning with transposition tables) Given an interval-valued
game (G, pI , s, ev), a position p ∈ G, cutoffs [x, y] ⊆ [0, 1] and a transposition table T
consisting of triples (p, [a, b], v) with p ∈ G and a ≤ b, v ∈ [0, 1], to compute αβ(p, [x, y]):
if there is an entry (p, [x, y], z) in T return z
if ev(p) ∈ [0, 1] then vans = ev(p)
if ev(p) = max then
vans := 0
for each p0 ∈ s(p) do
vnew = αβ(p0 , [max(vans , x), y])
if vnew ≥ y then
T := T ∪ (p, [x, y], vnew )
return vnew
if vnew > vans then vans = vnew
if ev(p) = min then
vans := 1
for each p0 ∈ s(p) do
vnew = αβ(p0 , [x, min(vans , y)])
if vnew ≤ x then
T := T ∪ (p, [x, y], vnew )
return vnew
if vnew < vans then vans = vnew
T := T ∪ (p, [x, y], vans )
return vans

2.3 Partitions
We are now in a position to present our new ideas. We begin by formalizing the idea of a
position that can reach a known winning position or one that can reach only known losing
ones.
Definition 2.3.1 Given an interval-valued game (G, pI , s, ev) and a set of positions S ⊆ G,
we will say that the set of positions that can reach S is the set of all p for which s(p)∩S 6= Ø.
This set will be denoted R0 (S). The set of positions constrained to reach S is the set of
all p for which s(p) ⊆ S, and is denoted C0 (S).
These definitions should match our intuition; the set of positions that can reach a set S
is indeed the set of positions p for which some element of S is an immediate successor of p,
so that s(p) ∩ S 6= Ø. Similarly, a position p is constrained to reach S if every immediate
successor of p is in S, so that s(p) ⊆ S.
Unfortunately, it may not be feasible to construct the R0 and C0 operators explicitly;
there may be no concise representation of the set of all positions that can reach S. In
practice, this will be reflected in the fact that the data structures being used to describe
311

Ginsberg

the set S may not conveniently describe the set R0 (S) of all situations from which S can
be reached.
Now suppose that we are expanding the search tree itself, and we find ourselves analyzing a particular position p that is determined to be a win for the maximizer because the
maximizer can move from p to the winning set S; in other words, p is a win because it is
in R0 (S). We would like to record at this point that the set R0 (S) is a win for the maximizer, but may not be able to construct or represent this set conveniently. We will therefore
assume that we have some computationally effective way to approximate the R0 and C0
functions, in that we have (for example) a function R that is a conservative implementation
of R0 in that if R says we can reach S, then so we can:
R(p, S) ⊆ R0 (S)
R(p, S) is intended to represent a set of positions that are “like p in that they can reach
the (winning) set S.” Note the inclusion of p as an argument to R(p, S), since we certainly
want p ∈ R(p, S). We are about to cache the fact that every element of R(p, S) is a win
for the maximizer, and certainly want that information to include the fact that p itself has
been shown to be a win. Thus we require p ∈ R(p, S) as well.
Finally, we need some way to generalize the information returned by the evaluation
function; if the evaluation function itself identifies a position p as a win for the maximizer,
we want to have some way to generalize this to a wider set of positions that are also wins.
We formalize this by assuming that we have some generalization function P that “respects”
the evaluation function in the sense that the value returned by P is a set of positions that
ev evaluates identically.
Definition 2.3.2 Let (G, pI , S, ev) be an interval-valued game. Let f be any function with
range 2G , so that f selects a set of positions based on its arguments. We will say that
f respects the evaluation function ev if whenever p, p0 ∈ F for any F in the range of f ,
ev(p) = ev(p0 ).
A partition system for the game is a triple (P, R, C) of functions that respect ev such
that:
1. P : G → 2G maps positions into sets of positions such that for any position p, p ∈
P (p).
2. R : G × 2G → 2G accepts as arguments a position p and a set of positions S. If
p ∈ R0 (S), so that p can reach S, then p ∈ R(p, S) ⊆ R0 (S).
3. C : G × 2G → 2G accepts as arguments a position p and a set of positions S. If
p ∈ C0 (S), so that p is constrained to reach S, then p ∈ C(p, S) ⊆ C0 (S).
As mentioned above, the function P tells us which positions are sufficiently “like” p that
they evaluate to the same value. In tic-tac-toe, for example, the position (1) where X has
won with a row across the top might be generalized by P to the set of positions
X X X
? ? ?
? ? ?

312

(5)

GIB: Imperfect information in a computationally challenging game

as in (2).
The functions R and C approximate R0 and C0 . Once again turning to our tic-tac-toe
example, suppose that we take S to be the set of positions appearing in (5) and that p is
given by
X X
O O
O
X

so that S can be reached from p. R(p, S) might be
X X
? ? ?
? ? ?

(6)

as in (3), although we could also take R(p, S) = {p} or R(p, S) to be
X X
O O
O
X

X X

X

X

∪ ? ? ? ∪ ? ? ?
? ?

?

? ? ?

although this last union might be awkward to represent. Note again that R and C are
functions of p as well as S; the set returned must include the given position p but can
otherwise be expected to vary as p does.
We will now modify Algorithm 2.2.5 so that the transposition table, instead of caching
results for single positions, caches results for sets of positions. As discussed in the introduction to this section, this is an analog to the introduction of truth maintenance techniques
into adversary search. The modified algorithm 2.3.3 appears in Figure 2 and returns a pair
of values – the value for the given position, and a set of positions that will take the same
value.
Proposition 2.3.4 Suppose that v = αβ(p, [x, y]) for every (S, [x, y], v) in T and p ∈ S.
Then if evc (p) ∈ [x, y], the value returned by Algorithm 2.3.3 is evc (p).
Proof. We need to show that when the algorithm returns, any position in Sans will have
the value vans . This will ensure that the transposition table remains correct.
To see this, suppose that the node being expanded is a maximizing node; the minimizing
case is dual. Suppose first that this node is a loss for the maximizer, having value 0.
In showing that the node is a loss, we will have examined successor nodes that are in sets
denoted Snew in Algorithm 2.3.3; if the maximizer subsequently finds himself in a position
from which he has no moves outside of the various Snew , he will still be in a losing position.
Since Sall = ∪Snew , the maximizer will lose in any position from which he is constrained to
next move into an element of Sall . Since every position in C(p, Sall ) has this property, it
is safe to take Sans = C(p, Sall ). This is what is done in the first line with a dagger in the
algorithm.
The more interesting case is where the eventual value of the node is nonzero; now in
order for another node n to demonstrably have the same value, the maximizer must have
no new options at n, and must still have some move that achieves the value vans at n.
The first condition is identical to the earlier case where vans = 0. For the second, note
that any time the maximizer finds a new best move, we set Sans to the set of positions that
313

Ginsberg

Algorithm 2.3.3 (Partition search) Given a game (G, pI , s, ev) and (P, R, C) a partition
system for it, a position p ∈ G, cutoffs [x, y] ⊆ [0, 1] and a transposition table T consisting
of triples (S, [a, b], v) with S ⊆ G and a ≤ b, v ∈ [0, 1], to compute αβ(p, [x, y]):
if there is an entry (S, [x, y], z) with p ∈ S return hz, Si
if ev(p) ∈ [0, 1] then hvans , Sans i = hev(p), P (p)i
if ev(p) = max then
vans := 0
Sall := Ø
for each p0 ∈ s(p) do
hvnew , Snew i = αβ(p0 , [max(vans , x), y])
if vnew ≥ y then
T := T ∪ (Snew , [x, y], vnew )
return hvnew , Snew i
if vnew > vans then hvans , Sans i = hvnew , Snew i
Sall := Sall ∪ Snew
if vans = 0 then Sans = C(p, Sall )
†
else Sans = R(p, Sans ) ∩ C(p, Sall )
† ‡
if ev(p) = min then
vans := 1
Sall := Ø
for each p0 ∈ s(p) do
hvnew , Snew i = αβ(p0 , [x, min(vans , y)])
if vnew ≤ x then
T := T ∪ (Snew , [x, y], vnew )
return hvnew , Snew i
if vnew < vans then hvans , Sans i = hvnew , Snew i
Sall := Sall ∪ Snew
if vans = 1 then Sans = C(p, Sall )
else Sans = R(p, Sans ) ∩ C(p, Sall )
‡
T := T ∪ (Sans , [x, y], vans )
return hvans , Sans i
Figure 2: The partition search algorithm

314

GIB: Imperfect information in a computationally challenging game

we know recursively achieve the same value. When we complete the maximizer’s loop in
the algorithm, it follows that Sans will be a set of positions from which the maximizer can
indeed achieve the value vans . Thus the maximizer can also achieve that value from any
position in R(p, Sans ). It follows that the overall set of positions known to have the value
vans is given by R(p, Sans ) ∩ C(p, Sall ), intersecting the two conditions of this paragraph.
This is what is done in the second daggered step in the algorithm.
2.4 Zero-window variations
The effectiveness of partition search depends crucially on the size of the sets maintained in
the transposition table. If the sets are large, many positions will be evaluated by lookup.
If the sets are small, partition search collapses to conventional α-β pruning.
An examination of Algorithm 2.3.3 suggests that the points in the algorithm at which
the sets are reduced the most are those marked with a double dagger in the description,
where an intersection is required because we need to ensure both that the player can make
a move equivalent to his best one and that there are no other options. The effectiveness of
the method would be improved if this possibility were removed.
To see how to do this, suppose for a moment that the evaluation function always returned
0 or 1, as opposed to intermediate values. Now if the maximizer is on play and the value
vnew = 1, a prune will be generated because there can be no better value found for the
maximizer. If all of the vnew are 0, then vans = 0 and we can avoid the troublesome
intersection. The maximizer loses and there is no “best” move that we have to worry about
making.
In reality, the restriction to values of 0 or 1 is unrealistic. Some games, such as bridge,
allow more than two outcomes, while others cannot be analyzed to termination and need
to rely on evaluation functions that return approximate values for internal nodes. We can
deal with these situations using a technique known as zero-window search (originally called
scout search (Pearl, 1980)). To evaluate a specific position, one first estimates the value
to be e and then determines whether the actual value is above or below e by treating any
value v > e as a win for the maximizer and any value v ≤ e as a win for the minimizer. The
results of this calculation can then be used to refine the guess, and the process is repeated.
If no initial estimate is available, a binary search can be used to find the value to within
any desired tolerance.
Zero-window search is effective because little time is wasted on iterations where the
estimate is wildly inaccurate; there will typically be many lines showing that a new estimate
is needed. Most of the time is spent on the last iteration or two, developing tight bounds
on the position being considered. There is an analog in conventional α-β pruning, where
the bounds typically get tight quickly and the bulk of the analysis deals with a situation
where the value of the original position is known to lie in a fairly narrow range.
In zero-window search, a node always evaluates to 0 or 1, since either v > e or v ≤ e.
This allows a straightforward modification to Algorithm 2.3.3 that avoids the troublesome
cases mentioned earlier.
315

Ginsberg

2.5 Experimental results
Partition search was tested by analyzing 1000 randomly generated bridge deals and comparing the number of nodes expanded using partition search and conventional methods.
In addition to our general interest in bridge, there are two reasons why it can be expected
that partition search will be useful for this game. First, partition search requires that the
functions R0 and C0 support a partition-like analysis; it must be the case that an analysis of
one situation will apply equally well to a variety of similar ones. Second, it must be possible
to build approximating functions R and C that are reasonably accurate representatives of
R0 and C0 .
Bridge satisfies both of these properties. Expert discussion of a particular deal often
will refer to small cards as x’s, indicating that it is indeed the case that the exact ranks of
these cards are irrelevant. Second, it is possible to “back up” x’s from one position to its
predecessors. If, for example, one player plays a club with no chance of having it impact
the rest of the game, and by doing so reaches a position in which subsequent analysis shows
him to have two small clubs, then he clearly must have had three small clubs originally.
Finally, the fact that cards are simply being replaced by x’s means that it is possible to
construct data structures for which the time per node expanded is virtually unchanged from
that using conventional methods.
Perhaps an example will make this clearer. Consider the following partial bridge deal
in which East is to lead and there are no trumps:

♠
♥
♦
♣
♠
♥
♦
♣

—
—
AK
—

10
A
—
—

♠
♥
♦
♣
♠
♥
♦
♣

AQ
—
—
—

KJ
—
—
—

An analysis of this situation shows that in the main line, the only cards that win tricks
by virtue of their ranks are the spade Ace, King and Queen. This sanctions the replacement
of the above figure by the following more general one:
316

GIB: Imperfect information in a computationally challenging game

♠
♥
♦
♣
♠
♥
♦
♣

—
—
xx
—

x
x
—
—

♠
♥
♦
♣
♠
♥
♦
♣

AQ
—
—
—

Kx
—
—
—

Note first that this replacement is sound in the sense that every position that is an
instance of the second diagram is guaranteed to have the same value as the original. We
have not resorted to an informal argument of the form “Jacks and lower tend not to matter,”
but instead to a precise argument of the form, “In the expansion of the search tree associated
with the given deal, Jacks and lower were proven never to matter.”
Bridge also appears to be extremely well-suited (no pun intended) to the kind of analysis
that we have been describing; a chess analog might involve describing a mating combination
and saying that “the position of Black’s queen didn’t matter.” While this does happen,
casual chess conversation is much less likely to include this sort of remark than bridge
conversation is likely to refer to a host of small cards as x’s, suggesting at least that the
partition technique is more easily applied to bridge than to chess (or to other games).
That said, however, the results for bridge are striking, leading to performance improvements of an order of magnitude or more on fairly small search spaces (perhaps 106 nodes).
The deals we tested involved between 12 and 48 cards and were analyzed to termination, so
that the depth of the search varied from 12 to 48. (The solver without partition search was
unable to solve larger problems.) The branching factor for minimax without transposition
tables appeared to be approximately 4, and the results appear in Figure 3.
Each point in the graph corresponds to a single deal. The position of the point on the
x-axis indicates the number of nodes expanded using α-β pruning and transposition tables,
and the position on the y-axis the number expanded using partition search as well. Both
axes are plotted logarithmically.
In both the partition and conventional cases, a binary zero-window search was used to
determine the exact value to be assigned to the hand, which the rules of bridge constrain
to range from 0 to the number of tricks left (one quarter of the number of cards in play).
As mentioned previously, hands generated using a full deck of 52 cards were not considered
because the conventional method was in general incapable of solving them. The program was
run on a Sparc 5 and PowerMac 6100, where it expanded approximately 15K nodes/second.
The transposition table shares common structure among different sets and as a result, uses
approximately 6 bytes/node.
The dotted line in the figure is y = x and corresponds to the breakeven point relative to
α-β pruning in isolation. The solid line is the least-squares best fit to the logarithmic data,
and is given by y = 1.57x0.76 . This suggests that partition search is leading to an effective
reduction in branching factor of b → b0.76 . This improvement, above and beyond that
317

Ginsberg

107

p

1.57x0.76

105

Partition
103

10

p p

p

p

p
p p
p p pp p p
p
p
p pp p
p p p pp p p p p p p p p p p pp p
p p pp pppppppppp pp pppppppp ppppppppp p p pppp pp ppp p
pp p p p p p p
p pppp p p p pp p p p p pp ppp p p p p p p p
ppp p ppp pppp pppp pppp p pp ppppp pppppp pp p pppp ppp p pp p
p
p pp p p p p p p p pp p p p p pp p p pp p p p p
pp p p p pp pppppppp ppppp ppppp pppppppppp pp ppp p pp ppp p ppp p p p p p p p p
p p p p p p p p pp p p
p p p p ppppp p p pp pp pppppppp p p p p p p p p p p p
pp p pppppppppppppppp ppppppp pppp pp ppp ppppp pppppp pp p p p pp pp pp p p pp
p p
p p p pppp ppp p pp p ppppp pp p p p p p p p p p p
p ppp pp pp pppppp pppppp ppppppppppp pp p ppp pp p p p p ppp p ppp p p p
p
p
p
p pppp pp pppp p p p ppppp p p p p pp p p p p p
p pp pppppppppppppppppppppp pppp p pp pp p p p p pp p p
p
p
p
p
p
p
p
pppp p p p p p pp
p p p p p p ppp p p

p

10

103

105

107

Conventional
Figure 3: Nodes expanded as a function of method
provided by α-β pruning, can be contrasted with α-β pruning itself, which gives a reduction
when compared to pure minimax of b → b0.75 if the moves are ordered randomly (Pearl,
1982) and b → b0.5 if the ordering is optimal.
The method was also applied to full deals of 52 cards, which can be solved while expanding an average of 18,000 nodes per deal.5 This works out to about a second of cpu
time.

3. Monte Carlo cardplay algorithms
One way in which we might use our perfect-information cardplay engine to proceed in a
realistic situation would be to deal the unseen cards at random, biasing the deal so that it
was consistent both with the bidding and with the cards played thus far. We could then
analyze the resulting deal double dummy and decide which of our possible plays was the
strongest. Averaging over a large number of such Monte Carlo samples would allow us to
deal with the imperfect nature of bridge information. This idea was initially suggested by
Levy (Levy, 1989), although he does not appear to have realized (see below) that there are
problems with it in practice.
Algorithm 3.0.1 (Monte Carlo card selection) To select a move from a candidate set
M of such moves:
5. The version of gib that was released in October of 2000 replaced the transposition table with a data
structure that uses a fixed amount of memory, and also sorts the moves based on narrowness (suggested
by Plaat et al. (Plaat, Schaeffer, Pijls, & de Bruin, 1996) to be rooted in the idea of conspiracy search
(McAllester, 1988)) and the killer heuristic. While the memory requirements are reduced, the overall
performance is little changed.

318

GIB: Imperfect information in a computationally challenging game

1. Construct a set D of deals consistent with both the bidding and play of the deal thus
far.
2. For each move m ∈ M and each deal d ∈ D, evaluate the double dummy result of
making the move m in the deal d. Denote the score obtained by making this move
s(m, d).
3. Return that m for which

P

d s(m, d)

is maximal.

The Monte Carlo approach has drawbacks that have been pointed out by a variety of
authors, including Koller† and others (Frank & Basin, 1998). Most obvious among these
is that the approach never suggests making an “information gathering play.” After all,
the perfect-information variant on which the decision is based invariably assumes that the
information will be available by the time the next decision must be made! Instead, the
tendency is for the approach to simply defer important decisions; in many situations this
may lead to information gathering inadvertently, but the amount of information acquired
will generally be far less than other approaches might provide.
As an example, suppose that on a particular deal, gib has four possible lines of play to
make its contract:
1. Line A works if West has the ♠Q.
2. Line B works if East has the ♠Q.
3. Line C defers the guess until later.
4. Line D (the clever line) works independent of who has the ♠Q.
Assuming that either player is equally likely to hold the ♠Q, a Monte Carlo analyzer
will correctly conclude that line A works half the time, and line B works half the time. Line
C, however, will be presumed to work all of the time, since the contract can still be made
(double dummy) if the guess is deferred. Line D will also be concluded to work all of the
time (correctly, in this case).
As a result, gib will choose randomly between the last two possibilities above, believing
as it does that if it can only defer the guess until later (even the next card), it will make
that guess correctly. The correct play, of course, is D.
We will discuss a solution to these difficulties in Sections 5–7; although gib’s defensive
cardplay continues to be based on the above ideas, its declarer play now uses stronger techniques. Nevertheless, basing the card play on the algorithm presented leads to extremely
strong results, approximately at the level of a human expert. Since gib’s introduction, all
other competitive bridge-playing programs have switched their cardplay to similar methods, although gib’s double dummy analysis is substantially faster than most of the other
programs and its play is correspondingly stronger.
We will describe three tests of GIB’s cardplay algorithms: Performance on a commercially available set of benchmarks, performance in a human championship designed to
highlight cardplay in isolation, and statistical performance measured over a large set of
deals.
319

Ginsberg

For the first test, we evaluated the strength of gib’s cardplay using Bridge Master (BM),
a commercial program developed by Canadian internationalist Fred Gitelman. BM contains
180 deals at 5 levels of difficulty. Each of the 36 deals on each level is a problem in declarer
play. If you misplay the hand, BM moves the defenders’ cards around if necessary to ensure
your defeat.
BM was used for the test instead of randomly dealt deals because the signal to noise ratio is far higher; good plays are generally rewarded and bad ones punished. Every deal also
contains a lesson of some kind; there are no completely uninteresting deals where the line
of play is irrelevant or obvious. There are drawbacks to testing gib’s performance on nonrandomly dealt deals, of course, since the BM deals may in some way not be representative
of the problems a bridge player would actually encounter at the table.
The test was run under Microsoft Windows on a 200 MHz Pentium Pro. As a benchmark,
Bridge Baron (BB) version 6 was also tested on the same deals using the same hardware.6
BB was given 10 seconds to select each play, and gib was given 90 seconds to play the entire
deal with a maximum Monte Carlo sample size of 50.7 New deals were generated each time
a play decision needed to be made.
These numbers approximately equalized the computational resources used by the two
programs; BB could in theory take 260 seconds per deal (ten seconds on each of 26 plays),
but in practice took substantially less. Gib was given the auctions as well; there was no
facility for doing this in BB. This information was critical on a small number of deals.
Here is how the two systems performed:
Level
1
2
3
4
5
Total

BB
16
8
2
1
4
33
18.3%

GIB
31
23
12
21
13
100
55.6%

Each entry is the number of deals that were played successfully by the program in question.
Gib’s mistakes are illuminating. While some of them involve failing to gather information, most are problems in combining multiple chances (as in case D above). As BM’s deals
get more difficult, they more often involve combining a variety of possibly winning options
and that is why GIB’s performance falls off at levels 2 and 3.
At still higher levels, however, BM typically involves the successful development of
complex end positions, and gib’s performance rebounds. This appeared to happen to BB
as well, although to a much lesser extent. It was gratifying to see gib discover for itself the
complex end positions around which the BM deals are designed, and more gratifying still
to witness gib’s discovery of a maneuver that had hitherto not been identified in the bridge
literature, as described in Appendix B.
6. The current version is Bridge Baron 10 and could be expected to perform guardedly better in a test such
as this. Bridge Baron 6 does not include the Smith enhancements (Smith et al., 1996).
7. GIB’s Monte Carlo sample size is fixed at 50 in most cases, which provides a good compromise between
speed of play and accuracy of result.

320

GIB: Imperfect information in a computationally challenging game

Experiments such as this one are tedious, because there is no text interface to a commercial program such as Bridge Master or Bridge Baron. As a result, information regarding
the sensitivity of gib’s performance to various parameters tends to be only anecdotal.
Gib solves an additional 16 problems (bringing its total to 64.4%) given additional
resources in the form of extra time (up to 100 seconds per play, although that time was
very rarely taken), a larger Monte Carlo sample (100 deals instead of 50) and hand-generated
explanations of the opponents’ bids and opening leads. Each of the three factors appeared
to contribute equally to the improved performance.
Other authors are reporting comparable levels of performance for gib. Forrester, working
with a different but similar benchmark (Blackwood, 1979), reports8 that gib solves 68% of
the problems given 20 seconds/play, and 74% of them given 30 seconds/play. Deals where
gib has outplayed human experts are the topic of a series of articles in the Dutch bridge
magazine IMP (Eskes, 1997, and sequels).9 Based on these results, gib was invited to
participate in an invitational event at the 1998 world bridge championships in France; the
event involved deals similar to Bridge Master’s but substantially more difficult. Gib joined
a field of 34 of the best card players in the world, each player facing twelve such problems
over the course of two days. Gib was leading at the halfway mark, but played poorly on
the second day (perhaps the pressure was too much for it), and finished twelfth.
The human participants were given 90 minutes to play each deal, although they were
penalized slightly for playing slowly. GIB played each deal in about ten minutes, using a
Monte Carlo sample size of 500; tests before the event indicated little or no improvement
if gib were allotted more time. Michael Rosenberg, the eventual winner of the contest and
the pre-tournament favorite, in fact made one more mistake than did Bart Bramley, the
second place finisher. Rosenberg played just quickly enough that Bramley’s accumulated
time penalties gave Rosenberg the victory. The scoring method thus favors GIB slightly.
Finally, gib’s performance was evaluated directly using records from actual play. These
records are available from high levels of human competition (world and national championships, typically), so that it is possible to determine exactly how frequently humans make
mistakes at the bridge table. In Figure 4, we show the frequency with which this data
indicates that a human declarer, leading to the nth trick of a deal, makes a mistake that
causes his contract to become unmakeable on a double-dummy basis. The y axis gives the
frequency of the mistakes and is plotted logarithmically; as one would expect, play becomes
more accurate later in the deal.
We also give similar data for gib, based on large sample of deals that gib played against
itself. The error profiles of the two are quite similar.
Before turning to defensive play, let me point out that this method of analysis favors gib
slightly. Failing to make an information gathering play gets reflected in the above figure,
since the lack of information will cause gib to make a double-dummy mistake subsequently.
But human declarers often work to give the defenders problems that exploit their relative
lack of information, and that tactic is not rewarded in the above analysis. Similar results
for defensive play appear in Figure 5.
8. Posting to rec.games.bridge on 14 July 1997.
9. http://www.imp-bridge.nl

321

Ginsberg

0.1

human
GIB

0.01
P(err)
0.001

0.0001

0

2

4

6
trick

8

10

12

Figure 4: Gib’s performance as declarer

0.1

human
GIB

0.01

P(err) 0.001

0.0001

1e-05

0

2

4

6
trick

8

Figure 5: Gib’s performance as defender

322

10

12

GIB: Imperfect information in a computationally challenging game

There are two important technical remarks that must be made about the Monte Carlo
algorithm before proceeding. First, note that we were cavalier in simply saying, “Construct
a set D of deals consistent with both the bidding and play of the deal thus far.”
To construct deals consistent with the bidding, we first simplify the auction as observed,
building constraints describing each of the hands around the table. We then deal hands
consistent with the constraints using a deal generator that deals unbiased hands given
restrictions on the number of cards held by each player in each suit. This set of deals is
then tested to remove elements that do not satisfy the remaining constraints, and each of the
remaining deals is passed to the bidding module to identify those for which the observed bids
would have been made by the players in question. (This assumes that gib has a reasonable
understanding of the bidding methods used by the opponents.) The overall dealing process
typically takes one or two seconds to generate the full set of deals needed by the algorithm.
Now the card play must be analyzed. Ideally, gib would do something similar to what it
does for the bidding, determining whether each player would have played as indicated on any
particular deal. Unfortunately, it is simply impractical to test each hypothetical decision
recursively against the cardplay module itself. Instead, gib tries to evaluate the probability
that West (for example) has the ♠K (for example), and to then use these probabilities to
weight the sample itself.
To understand the source of the weighting probabilities, let us consider a specific example. Suppose that in some particular situation, gib plays the ♠5. The analysis indicates
that 80% of the time that the next player (say West) holds the ♠K, it is a mistake for West
not to play it. In other words, West’s failure to play the ♠K leads to odds of 4:1 that he
hasn’t got it.
These odds are now used via Bayes’ rule to adjust the probability that West holds the
♠K at all. The probabilities are then modified further to include information revealed by
defensive signalling (if any), and the adjusted probabilities are finally used to bias the Monte
P
P
Carlo sample. The evaluation d s(m, d) in Algorithm 3.0.1 is replaced with d wd s(m, d)
where wd is the weight assigned to deal d. More heavily weighted deals thus have a larger
impact on gib’s eventual decision.
The second technical point regarding the algorithm itself involves the fact that it needs
to run quickly and that it may need to be terminated before the analysis is complete. For the
former, there are a variety of greedy techniques that can be used to ensure that a move m
P
P
is not considered if we can show d s(d, m) ≤ d s(d, m0 ) for some m0 . The algorithm also
uses iterative broadening (Ginsberg & Harvey, 1992) to ensure that a low-width answer
is available if a high-width search fails to terminate in time. Results from the low- and
high-width searches are combined when time expires.
Also regarding speed, the algorithm requires that for each deal in the Monte Carlo
sample and each possible move, we evaluate the resulting position exactly. Knowing simply
that move m1 is not as good as move m2 for deal d is not enough; m1 may be better than m2
elsewhere and we need to compare them quantitatively. This approach is aided substantially
by the partition search idea, where entries in the transposition table correspond not to single
positions and their evaluated values, but to sets of positions and values. In many cases,
m1 and m2 may fall into the same entry of the partition table long before they actually
transpose into one another exactly.
323

Ginsberg

4. Monte Carlo bidding
The purpose of bidding in bridge is twofold. The primary purpose is to share information
about your cards with your partner so that you can cooperatively select an optimal final
contract. A secondary purpose is to disrupt the opponents’ attempt to do the same.
In order to achieve this purpose, a wide variety of bidding “languages” have been developed. In some, when you suggest clubs as trumps, it means you have a lot of them. In
others, the suggestion is only temporary and the information conveyed is quite different.
In all of these languages, some meaning is assigned to a wide variety of bids in particular
situations; there are also default rules that assign meanings to bids that have no specifically
assigned meanings. Any computer bridge player will need similar understandings.
Bidding is interesting because the meanings frequently overlap; there may be one or
more bids that are suitable (or nearly so) on any particular set of cards. Existing computer
programs have simply matched possible bids against large databases giving their meanings,
searching for that bid that best matches the cards that the machines hold. World champion
Chip Martel reports† that human experts take a different approach.10,11
Although expert bidding is based on a database such as that used by existing programs,
close decisions are made by simulating the results of each candidate action. This involves
projecting how the bidding is likely to proceed and evaluating the play in one of a variety of
possible final contracts. An expert gets his “judgment” from a Monte Carlo-like simulation
of the results of possible bids, often referred to in the bridge-playing community as a Borel
simulation (so named after the first player to describe the method). Gib takes a similar
tack.
Algorithm 4.0.2 (Borel simulation) To select a bid from a candidate set B, given a
database Z that suggests bids in various situations:
1. Construct a set D of deals consistent with the bidding thus far.
2. For each bid b ∈ B and each deal d ∈ D, use the database Z to project how the auction
will continue if the bid b is made. (If no bid is suggested by the database, the player
in question is assumed to pass.) Compute the double dummy result of the eventual
contract, denoting it s(b, d).
3. Return that b for which

P

d s(b, d)

is maximal.

As with the Monte Carlo approach to card play, this approach does not take into account
the fact that bridge is not played double dummy. Human experts often choose not to make
bids that will convey too much information to the opponents in order to make the defenders’
task as difficult as possible. This consideration is missing from the above algorithm.12
10. The 1994 Rosenblum Cup World Team Championship was won by a team that included Martel and
Rosenberg.
11. Frank suggests (Frank, 1998) that the existing machine approach is capable of reaching expert levels of
performance. While this appears to have been true in the early 1980’s (Lindelöf, 1983), modern expert
bidding practice has begun to highlight the disruptive aspect of bidding, and machine performance is no
longer likely to be competitive.
12. In theory at least, this issue could be addressed using the single-dummy ideas that we will present in
subsequent sections. Computational considerations currently make this impractical, however.

324

GIB: Imperfect information in a computationally challenging game

There are more serious problems also, generally centering around the development of
the bidding database Z.
First, the database itself needs to be built and debugged. A large number of rules need
to be written, typically in a specialized language and dependent upon the bridge expertise
of the author. The rules need to be debugged as actual play reveals oversights or other
difficulties.
The nature and sizes of these databases vary enormously, although all of them represent
very substantial investments on the part of the authors. The database distributed with
meadowlark bridge includes some 7300 rules; that with q-plus bridge 2500 rules
comprising 40,000 lines of specialized code. Gib’s database is built using a derivative of the
Meadowlark language, and includes about 3000 rules.
All of these databases doubtless contain errors of one sort or another; one of the nice
things about most bidding methods is that they tend to be fairly robust against such problems. Unfortunately, the Borel algorithm described above introduces substantial instability
in gib’s overall bidding.
To understand this, suppose that the database Z is somewhat conservative in its actions.
The projection in step 2 of Algorithm 4.0.2 now leads each player to assume its partner bids
conservatively, and therefore to bid somewhat aggressively to compensate. The partnership
as a whole ends up over compensating.
Worse still, suppose that there is an omission of some kind in Z; perhaps every time
someone bids 7♦, the database suggests a foolish action. Since 7♦ is a rare bid, a bidding system that matches its bids directly to the database will encounter this problem
infrequently.
Gib, however, will be much more aggressive, bidding 7♦ often on the grounds that
doing so will cause the opponents to make a mistake. In practice, of course, the bug in the
database is unlikely to be replicated in the opponents’ minds, and gib’s attempts to exploit
the gap will be unrewarded or worse.
This is a serious problem, and appears to apply to any attempt to heuristically model
an adversary’s behavior: It is difficult to distinguish a good choice that is successful because
the opponent has no winning options from a bad choice that appears successful because the
heuristic fails to identify such options.
There are a variety of ways in which this problem might be addressed, none of them
perfect. The most obvious is simply to use gib’s aggressive tendencies to identify the bugs
or gaps in the bidding database, and to fix them. Because of the size of the database, this
is a slow process.
Another approach is to try to identify the bugs in the database automatically, and to be
wary in such situations. If the bidding simulation indicates that the opponents are about
to achieve a result much worse than what they might achieve if they saw each other’s cards,
that is evidence that there may be a gap in the database. Unfortunately, it is also evidence
that gib is simply effectively disrupting its opponents’ efforts to bid accurately.
Finally, restrictions could be placed on gib that require it to make bids that are “close”
to the bids suggested by the database, on the grounds that such bids are more likely to
reflect improvements in judgment than to highlight gaps in the database.
All of these techniques are used, and all of them are useful. Gib’s bidding is substantially
better than that of earlier programs, but not yet of expert caliber.
325

Ginsberg

The bidding was tested as part of the 1998 Baron Barclay/OKBridge World Computer
Bridge Championships, and the 2000 Orbis World Computer Bridge Championship. Each
program bid deals that had previously been bid and played by experts; a result of 0 on any
particular deal meant that the program bid to a contract as good as the average expert
result. A positive result was better, and a negative result was worse.
There were 20 deals in each contest; although card play was not an issue, the deals were
selected to pose challenges in bidding and a standard deviation of 5.5 imps/deal is still a
reasonable estimate. One standard deviation over the 20 deal set could thus be expected
to be about 25 imps.
Gib’s final score in the 1998 bidding contest was +2 imps; in the 2000 contest it was +9
imps. In both cases, it narrowly edged out the expert field against which it was compared.13
The next best program in 1998, Blue Chip Bridge, finished with a score of -35 imps, not
dissimilar from the -37 imps that had been sufficient to win the bidding contest in 1997.
The second place program in 2000 (once again Blue Chip Bridge) had a score of -2 imps.

5. The value of information
In previous sections of this paper, we have described Monte Carlo methods for dealing with
the fact that bridge is a game of imperfect information, and have also described possible
problems with this approach. We now turn to ways to overcomes some of these difficulties.
For the moment, let me assume that we replace bridge with a {0, 1} game, so that we
are interested only in the question of whether declarer makes his contract. Overtricks or
extra undertricks are irrelevant. At least as a first approximation, bridge experts often look
at hands this way, only subsequently refining the analysis.
If you ask such an expert why he took a particular line on a deal, he will often say
something like, “I was playing for each opponent to have three hearts,” or “I was playing
for West to hold the spade queen.” What he is reporting is that set of distributions of the
unseen cards for which he was expecting to make the hand.
At some level, the expert is treating the value of the game not as zero or one (which
it would be if he could see the unseen cards), but as a function from the set of possible
distributions of unseen cards into {0, 1}. If we denote this set of distributions by S, the
value of the game is thus a function
f : S → {0, 1}
We will follow standard mathematical notation and denote the set {0, 1} by 2 and denote
the set of functions f : S → 2 by 2S .
It is possible to extend max and min from the set {0, 1} to 2S in a pointwise fashion, so
that, for example
min(f, g)(s) = min(f (s), g(s))
(7)
for functions f, g ∈ 2S and a specific situation s ∈ S. The maximizing function is defined
similarly.
13. This is in spite of the earlier remark that GIB’s bidding is not of expert caliber. GIB was fortunate in
the bidding contests in that most of the problems involved situations handled by the database. When
faced with a situation that it does not understand, GIB’s bidding deteriorates drastically.

326

GIB: Imperfect information in a computationally challenging game

As an example, suppose that in a particular situation, there is one line of play f that
wins if West has the ♠Q. There is another line of play g that wins if East has exactly
three hearts. Now min(f, g) is the line of play that wins just in case both West has the ♠Q
and East has three hearts, while max(f, g) is the line of play that wins if either condition
obtains.
It is important to realize that the set 2S is not totally ordered by these max and min
functions, like the unit interval is. Instead, 2S is an instance of a mathematical structure
known as a lattice (Grätzer, 1978, and Section 6). At this point, we note only that we can
extend Definition 2.2.1 to any set with maximization and minimization operators:
Definition 5.0.3 A game is an octuple (G, V, pI , s, ev, f+ , f− ) such that:
1. G is a finite set of possible positions in the game.
2. V is the set of values for the game.
3. pI ∈ G is the initial position of the game.
4. s : G → 2G gives the successors of a given position.
5. ev : G → {max, min} ∪ V gives the value for terminal positions or indicates which
player is to move for nonterminal positions.
6. f+ : P(V ) → V and f− : P(V ) → V are the combination functions for the maximizer
and minimizer respectively.
The structures G, V , pI , s and ev are required to satisfy the following conditions (unchanged
from Definition 2.2.1):
1. There is no sequence of positions p0 , . . . , pn with n > 0, pi ∈ s(pi−1 ) for each i and
pn = p0 . In other words, there are no “loops” that return to an identical position.
2. ev(p) ∈ V if and only if s(p) = Ø.
This definition extends Definition 2.2.1 only in that the value set and combination
functions have been generalized. A such, Definition 5.0.3 includes both “conventional”
games in which the values are numeric and the combination functions are max/min, and
our more general setting where the values are functional and the combination functions
combine them as described above.
As usual, we can use the maximization and minimization functions to assign a value to
the root of the tree:
Definition 5.0.4 Given a game (G, V, pI , s, ev, f+ , f− ), we introduce a function evc : G →
V defined recursively by

 ev(p),

evc (p) =

f {evc
 +

(p0 )|p0

∈ s(p)},
f− {evc (p0 )|p0 ∈ s(p)},

if ev(p) ∈ V ;
if ev(p) = max;
if ev(p) = min.

The value of (G, V, pI , s, ev, f+ , f− ) is defined to be evc (pI ).
327

Ginsberg

The definition is well founded because the game has no loops, and it is straightforward
to extend the minimax algorithm 2.2.3 to this more general formalism. We will discuss
extensions of α-β pruning in the next section.
To flesh out our previous informal description, we need to instantiate Definition 5.0.3.
We do this by having the value of any particular node correspond to the set of positions
where the maximizer can win:
1. The set G of positions is a set of pairs (p, Z) where p is a position with only two of
the four bridge hands visible (i.e., a position in the “single dummy” game), and Z is
that subset of S (the set of situations) that is consistent both with p and with the
cards that were played to reach p from the initial position.
2. The value set V is 2S .
3. The initial position pI is (p0 , S), where p0 is the initial single-dummy position.
4. The successor function is described as follows:
(a) If the declarer/maximizer is on play in the given position, the successors are
obtained by enumerating the maximizer’s legal plays and leaving the set Z of
situations unchanged.
(b) If the minimizer is on play in the given position, the successors are obtained by
playing any card c that is legal in any element of Z and then restricting Z to
that subset for which c is in fact a legal play.
5. Terminal nodes are nodes where all cards have been played, and therefore correspond
to single situations s, since the locations of all cards have been revealed. For such a
terminal position, if the declarer has made his contract, the value is S (the entire set
of positions possible at the root). If the declarer has failed to make his contract, the
value is S − {s}.
6. The maximization and minimization functions are computed pointwise, so that
f+ (U, V ) = U ∪ V
and
f− (U, V ) = U ∩ V
Given an initial single-dummy situation p corresponding to a set S of situations, we will
call the above game the (p, S) game.
Proposition 5.0.5 Suppose that the set of situations for which the maximizer can make
his contract is T ⊆ S. Then the value of the (p, S) game is T .
It is natural to view T as an element of 2S ; it is the function mapping points in T to 1
and points outside of T to 0.
Proof. The proof proceeds by induction on the depth of the game tree. If the root node
p is also terminal, then S = {s} and the value is clearly set correctly (to s or Ø) by the
definition of the (p, S) game.
328

GIB: Imperfect information in a computationally challenging game

If p is nonterminal, suppose first that it is a maximizing node. Now let s ∈ S be some
particular situation. If the maximizer can win in s, then there is some successor (p0 , S 0 )
to (p, S) where the maximizer wins, and hence by the inductive hypothesis, the value of
(p0 , S 0 ) is a set U with s ∈ U . But since the maximizer moves in p, the value assigned to
(p, S) is a superset of the value assigned to any subnode, so that s ∈ evc (p, S) = T .
If, on the other hand, the maximizer cannot win in s, then he cannot win in any child
of s. If (pi , Si ) are the successors of (p, S) in the game tree, then again by the inductive
hypothesis, we must have s 6∈ evc (pi , Si ) for each i. But
evc (p, S) = ∪i evc (pi , Si )
so that s 6∈ evc (p, S) = T .
For the minimizing case, suppose that the maximizer wins in s. Then the maximizer
must win in every successor of s, so that s ∈ evc (pi , Si ) for each such successor and therefore
s ∈ evc (p, S). Alternatively, if the minimizer wins in s, he must have a legal winning option
so that s 6∈ evc (pi , Si ) for some i and therefore s 6∈ evc (p, S).
Unfortunately, Proposition 5.0.5 is in some sense exactly what we wanted not to prove:
it says that our modified game computes the set of situations in which it is possible for the
maximizer to make his contract if he has perfect information about the opponents’ cards,
not the set of situations in which it is possible for him to make his contract given his actual
state of incomplete information.
Before we go on to deal with this, however, let me look at an example in some detail.
The example we will use is similar to that of Section 3 and involves a situation where the
maximizer can make his contract if either West has the ♠Q or East has three hearts. I will
denote by S the set of situations where West has the ♠Q, and by T the set where East has
three hearts. It’s possible to tie in the “defer the guess” example from Section 3 as well, so
I will do that also. Here is the game tree for the game in question:

min q



A
 A
T
A
q
Aq

S
1

0

q max
P
@PPP
PP
@
P
@ max PPP
@q
Pq min
min q
A
A
A

 A
 A
S A T
S
T


A
A
A
Aq min q
Aq min q
Aq
q
C
C
0
1
1
1


S C T S C T
C
C
q Cq
q Cq





1

0

0

1

At the root node, the maximizer has four choices. If he makes the move on the left
(playing for S, as it turns out), the minimizer then moves in a situation where the maximizer
wins if S holds and loses if T holds. For the second move, where the maximizer is essentially
playing for T , the reverse is true.
In the third case, the maximizer defers the guess. We suppose that he is on play again
immediately, forced to commit between playing for S and playing for T . In the last case,
he wins independent of whether T or S obtains.
329

Ginsberg

In the Monte Carlo setting, the above tree will actually be split based on the element of
the sample in question. In some cases, S will be true and we will examine only this subtree:
q max
P
PP

@
PP


@
PP


PP

@
PPq min
@q max
min q
min q


A



 A

S
S
S


A
Aq min q
q
q
min q


1
0
1


S
S
q
q

1

0

The maximizer can win by making any move other than the second. In the cases where T
obtains, we examine:
q max
P
PP

@
PP


@
PP


PP

@
PPq min
@q max
q 
min 
min q
A
A
A
A
 A
AT
AT
AT

A
A
A
A
Aq
Aq min q
Aq min
Aq
C
C
0
1
1
CT
CT
C
C
Cq
Cq

0

1

Here, the maximizer can win by making any move other than the first. In all cases, both
of the last two moves win for the maximizer, since this approach cannot recognize the fact
that the third move simply defers the guess while the fourth wins outright.
Now let us return to the situation where we include information about the sets that it
is possible to play for. Here is the tree again:
q max
P
@PPP
PP

@
PP


@
PP
@q max
Pq min
min q
min q
A
A
A
A
 A
 A


S A T
S A T
S
T


A
A
A
A
Aq
Aq min q
Aq min q
Aq
q
q
C
C
1
0
0
1
1
1


S C T S C T
C
C
q Cq
q Cq



1

0

0

1

The first thing that we need to do is to realize that the terminal nodes should not be
labelled with 1’s and 0’s but instead with sets where the maximizer can win. This produces:
330

GIB: Imperfect information in a computationally challenging game

q max
P
@PPP
PP

@
PP


@
PP
q 
@q max
Pq min
min 
min q
A
A
A
A


 A
 A
S A T
S A T
S
T


A
A
A
A
q
Aq
q
Aq min q
Aq min q
Aq
S∪T
S
T
S∪T
S∪T
S∪T
C
C


S C T S C T
C
C
q Cq
q Cq



S∪T

S

T

S∪T

To understand the labels, consider the two leftmost fringe nodes. The leftmost node gets
labelled with T “for free” because T is eliminated by the fact that the minimizer chose S.
Since the maximizer wins in S, the maximizer wins in all cases.
For the second fringe node, S is included by virtue of the minimizer’s moving to T ; T
is not included because the minimizer actually wins on this line. Hence the label of T for
the node in question. This analysis assumes that S and T are disjoint; if they overlap, the
labels become slightly more complex but the overall analysis is little changed.
Backing up the values one step gives us:
q max
P
PP

@

PP

@
PP



@ max PPP

S 
T q
q
@q
Pq S ∪ T
A
A
A
A
 A
 A
 A
 A




A
A
A
A
S 
q
Aq
q
Aq
q
Aq T
q
Aq
S∪T
S
T
S∪T
S∪T
S∪T
C
C
 C
 C
 C
 C
q Cq
q Cq
S∪T

S

T

S∪T

The minimizer, playing with perfect information, always does as best he can. The first
interior node’s label of S, for example, means that the maximizer wins only if S actually is
the case.
Of course, our definitions thus far imply that the maximizer is playing with perfect
information as well, and we can back up the rest of the tree to get:
qS ∪T
P
PP

@
PP


PP
@


PP

@
PPq S ∪ T
S 
T q
@q S ∪ T
q 
A
A
A
A
 A
 A
 A
 A




A
A
A
A
S 
Aq
Aq
Aq T
Aq
q
q
q
q
S∪T
S
T
S∪T
S∪T
S∪T
C
C
 C
 C
 C
 C
q Cq
q Cq
S∪T

331

S

T

S∪T

Ginsberg

0.1

declare
defend

0.01

P(err) 0.001

0.0001

1e-05

0

2

4

6
trick

8

10

12

Figure 6: Defense vs. declarer play for humans
As before, the maximizer “wins” with either of the last two options.
Before we address the fact that the players do not in fact have perfect information,
let me point out that in most bridge analyses, imperfect information is assumed to be an
issue for the maximizer only. The defenders are assumed to be operating with complete
information for at least the following reasons:
1. In general, there is a premium for declaring as opposed to defending, so that both
sides want to declare. Typically, the pair with greater assets in terms of high cards
wins the “bidding battle” and succeeds in becoming the declaring side, so that the
overall assets available to the defenders in terms of high cards are generally less than
those available to the declarer. This means that the defenders will generally be able
to predict each other’s hands with more accuracy than the declarer can.
2. The defenders can signal, conveying to one another information about the cards they
hold. (As an example, play of an unnecessarily high card often indicates an even
number of cards in the suit being played.) They are generally assumed to signal only
information that is useful to them but not to declarer, once again improving their
collective ability to play as if they had perfect information.
3. After the first two or three tricks, defenders’ play is typically closer to double dummy
than is the declarer’s. This is shown in Figure 6, which contrasts the quality of human
play as defender with the quality of human play as declarer; we make more mistakes
declaring than defending as of trick four. (This figure is analogous to Figures 4 and
5.)
332

GIB: Imperfect information in a computationally challenging game

There are some deals where it is important for declarer to exploit uncertainty on the part
of the defenders, but these are definitely the exception as opposed to the rule.
This suggests that Proposition 5.0.5 is doing a reasonable job of modeling the defenders’
cardplay, but the combination function for the maximizer needs to be modified to reflect
the imperfect-information nature of his task.
To understand this, let us return to our putative expert, who suggested at the beginning
of this section that he might be playing for West to hold the spade queen. What he might
say in a bit more detail is, “I could play for each opponent to hold exactly three hearts, or
I could play for West to hold the spade queen. The latter was the better chance.”
This suggests that the value assigned to the position by the maximizer is not a single
set of situations (those in which he can make the contract), but a set S of sets of situations.
Each set S ∈ S corresponds to one set of situations that the maximizer could play for, given
his incomplete knowledge of the positions of the opposing cards.
Extending the notation used earlier in this section, we will denote the set of sets of
S
S
situations by 22 . The maximizer’s combination function on 22 is given by
max(F, G) = F ∪ G

(8)

where each of F and G are sets of sets of situations. This says that if the maximizer is on
play in a situation p, and he has one move that will allow him to select from a set F of
things to “play for” and another move that will allow him to select from a set G, then his
choice at p is to select from any element of F ∪ G.
The minimizer’s function is a bit more subtle. Suppose that at a node p, the minimizer
can move to a successor with value F = {Fi }, or to a successor with value G = {Gi }. What
value should we assign to p?
Since the minimizer has perfect information, he will always guarantee that the maximizer
achieves the minimum value for the actual situation. Whatever element of Fi ∈ F or Gj ∈ G
is eventually selected by the maximizer, the eventual value of p will be the minimum of Fi
and Gj . In other words
min({Fi }, {Gj }) = {min(Fi , Gj )}
(9)
where the individual minima are computed using the perfect information rule (7).
Definition 5.0.6 Let G be the set of positions in an imperfect information game, a set of
pairs (p, Z) where p is a position from the point of view of the maximizing player and Z is
the set of perfect information positions consistent with p. The imperfect information game
for G is the game (G, V, pI , s, ev, f+ , f− ) where:
S

1. The value set V is 22 .
2. The initial position pI is (p0 , S), where p0 is the initial imperfect information position
and S is the set of all perfect information positions consistent with it.
3. The successor function is described as follows:
(a) If the maximizer is on play in the given position, the successors are obtained by
enumerating the maximizer’s legal plays and leaving the elements of the set Z of
situations unchanged.
333

Ginsberg

(b) If the minimizer is on play in the given position, the successors are obtained by
making playing any card c that is legal in any element of X and then restricting
Z to those situations for which c is in fact a legal play.
4. Terminal nodes are nodes where all cards have been played, and therefore correspond to
single situations s. For such a terminal position, if the declarer has made his contract,
the value is ({s}, {S}). If the declarer has failed to make his contract, the value is
({s}, {S − {s}}).
5. The maximization and minimization functions are given by (8) and (9) respectively.
Theorem 5.0.7 Suppose that the value of the imperfect information game for G is T .
Then a set of positions T is a subset of an element of T if and only if the maximizer has
a strategy that wins in every element of T , assuming that the minimizer plays with perfect
information.
Proof. Once again, the proof proceeds by induction on the depth of the game tree. And
once again, the case where p is a terminal position is handled easily by the definition. For
the inductive case, we consider the maximizer and minimizer separately.
For the maximizer, suppose that there is some set T of situations that satisfies the
conditions of the theorem, so that the maximizer has a strategy that caters to all of the
elements of T . Then the first move of that strategy will be some single move to a position
pi that is a successor of p and that caters to the elements of T . Thus if the value of the
successful child is F, T is a subset of some F ∈ F by the inductive hypothesis. Thus if the
value of the original game is G, T is a subset of an element of G by virtue of (8).
Alternatively, if T is a set for which the maximizer has no such strategy, then clearly the
maximizer cannot have a strategy after making any of the moves to the successor positions
pi . This means that no superset U ⊇ T in any evc (pi ), and thus no superset of T in evc (p)
either.
The minimizing case is not really any harder. Suppose first that the maximizer has no
strategy for succeeding in every situation in T . Then the minimizer (playing with perfect
information) must have some move to a position pi with value Fi such that T is not a subset
of any element of Fi . Now if Fi = {Ti }, recall that
min({Ti }, {Ui }) = {Ti ∩ Uj },
and T 6⊆ Ti for each i. Thus T 6⊆ Ti ∩ Uj for each i and j, and there is no V ⊇ T with
V ∈ min({Ti }, {Ui })
For the last case, suppose that the maximizer does have a strategy for succeeding in
every situation in T . That means that after any move for the minimizer, the maximizer will
still have a strategy that succeeds in T , so that if pi are the successors of p and evc (pi ) = Ti ,
then there is a Ti ∈ Ti with T ⊆ Ti . Now T ⊆ ∩i Ti ∈ min(Ti ) = evc (p). Thus evc (p)
contains an element that is a superset of T .
Using this result, we can in theory compute exactly the set of things we might play for
given a single-dummy bridge problem. Before we turn to the issues involved in doing so in
practice, however, let me repeat the example of this section using the imperfect information
technique. Here is the game tree again with values assigned to the terminal nodes:
334

GIB: Imperfect information in a computationally challenging game

q max
P
@PPP
PP

@
PP


@
PP
q 
@q max
Pq min
min 
min q
A
A
A
A


 A
 A
S A T
S A T
S
T


A
A
A
A
q
Aq
q
Aq min q
Aq min q
Aq
{S ∪ T }
{S}
{T }
{S ∪ T }
{S ∪ T } {S ∪ T }
C
C


S C T S C T
C
C
q Cq
q Cq



{S ∪ T }

{S} {T }

{S ∪ T }

Backing up past the minimizer’s final move gives us:
q max
P
PP

@
PP


@
PP



@ max PPP {S ∪ T }
{S} q
{T } q
@q
Pq
A
A
A
A
 A
 A
 A
 A




A
A
A {T }
A
{S} 
Aq
Aq
Aq
Aq
q
q
q
q
{S ∪ T }
{S}
{T }
{S ∪ T }
{S ∪ T } {S ∪ T }
C
C
 C
 C
 C
 C
q Cq
q Cq
{S ∪ T }

{S} {T }

{S ∪ T }

And we can now complete the analysis to finally get:
q {S, T, S ∪ T }
P
@PPP
PP
@

PP


@
PP {S ∪ T }
{S} 
{T } q
q 
@q {S, T }
Pq
A
A
A
A
 A
 A
 A
 A




A
A {T }
A
A
{S} 
q
q
Aq
q
Aq
Aq
q
Aq
{S ∪ T }
{S}
{T }
{S ∪ T }
{S ∪ T } {S ∪ T }
C
C
 C
 C
 C
 C
q Cq
q Cq



{S ∪ T }

{S} {T }

{S ∪ T }

Note the difference in the values assigned to the maximizer’s third and fourth choices at
the first ply. The third choice has value {S, T }, indicating clearly that the maximizer will
need to subsequently decide whether to play for S or for T . But the fourth choice has value
{S ∪ T } indicating that both possibilities are catered to.
The value assigned to the root contains some redundancy (which we will deal with in
Section 7), in that one of the maximizer’s choices (S∪T ) dominates the others. Nevertheless,
this value clearly indicates that the maximizer has an option available at the root that caters
to both situations.
335

Ginsberg

C
C

C

C

C
Cq min

AQQ
 
  A QQ

A
Q
Aq
Qq
q

q

m1

m2

m3

m4

C
Cq min
S
 S

S
Sq min
q
m2
A
 A

A
q
q Aq

m1

m3

m4

Figure 7: Equivalent games?

6. Extending alpha-beta pruning to lattices
The results of the previous section allow us to deal with imperfect information in theory.
Unfortunately, computing the value in theory is hardly the same as computing it in practice.
Some ideas, such as transposition tables and partition search, can fairly obviously be applied
to games with values taken from sets more general than total orders. But what about α-β
pruning, the linchpin of high-performance adversary search algorithms? The answer here is
far more subtle.
6.1 Some necessary definitions
Let us begin by considering the two small game trees in Figure 7, where the minimizer is
on play at the nonfringe nodes and none of the mi is intended to be necessarily terminal.
Are these two games always equivalent?
We would argue that they are. In the game on the left, the minimizer needs to select
among the four options m1 , m2 , m3 , m4 . In the game on the right, he needs to first select
whether or not to play m2 ; if he decides not to, he must select among the remaining
options. Since the minimizer has the same possibilities in both cases, we assume that the
values assigned to the games are the same.
From a more formal point of view, the value of the game on the left is f− (m1 , m2 , m3 , m4 ),
while that of the game on the right is f− (m2 , f− (m1 , m3 , m4 )) where we have abused notation somewhat, writing mi for the value of the node mi as well.
Definition 6.1.1 A game will be called simple if for any x ∈ v ⊆ V ,
f+ {x} = f− {x} = x
and also
f+ (v) = f+ {x, f+ (v − x)}
and
f− (v) = f− {x, f− (v − x)}

336

GIB: Imperfect information in a computationally challenging game

We have augmented the condition developed in the discussion of Figure 7 with the
assumption that if a player’s move in a position p is forced (so that p has a unique successor),
then the value before and after the forced move is the same.
Proposition 6.1.2 For any simple game, there are binary functions ∧ and ∨ from V to
itself that are commutative, associative and idempotent 14 and such that
f+ {v0 , . . . , vm } = v0 ∨ · · · ∨ vm
and
f− {v0 , . . . , vm } = v0 ∧ · · · ∧ vm
Proof. Induction on m.
When referring to a simple game, we will typically replace the functions f+ and f− by
the equivalent binary functions ∨ and ∧. We assume throughout the rest of this section
that all games are simple.15
The binary functions ∨ and ∧ now induce a partial order ≤, where we will say that x ≤ y
if and only if x ∨ y = y. It is not hard to see that this partial order is reflexive (x ≤ x),
antisymmetric (x ≤ y and y ≤ x if and only if x = y) and transitive. The operators ∨
and ∧ behave like greatest lower bound and least upper bound operators with regard to the
partial order.
We also have the following:
Proposition 6.1.3 Whenever S ⊆ T , f+ (S) ≤ f+ (T ) and f− (S) ≥ f− (T ).
In other words, assuming that the minimizer is trying to reach a low value in the partial
order and the maximizer is trying to reach a high one, having more options is always good.
6.2 Shallow pruning
We are now able to investigate α-β pruning in our general framework. Let us begin with
shallow pruning, shown in Figure 8.
The idea here is that if the minimizer prefers x to y, he will never allow the maximizer
even the possibility of selecting between y and the value of the subtree rooted at T . After
all, the value of the maximizing node in the figure is y ∨ evc (T ) ≥ y ≥ x, and the minimizer
will therefore always prefer x.
In order for the usual correctness proof for (shallow) α-β pruning to hold, we need the
following condition to be satisfied:
Definition 6.2.1 (Shallow α-β pruning) A game G will be said to allow shallow α-β pruning for the minimizer if
x ∧ (y ∨ T ) = x
(10)
14. A binary function f is called idempotent if f (a, a) = a for all a.
15. We also assume that the games are sufficiently complex that we can find in the game tree a node with
any desired functional value, e.g., a ∧ (b ∨ c) for specific a, b and c. Were this not the case, none of our
results would follow. As an example, a game in which the initial position is also terminal surely admits
pruning of all kinds (since the game tree is empty) but need not satisfy the conclusions of the results in
this section.

337

Ginsberg

C

C

C
Cq min
S
 S

S max
Sq
q

x
A
 A

A
Aq
q

y

T

Figure 8: T can be pruned (shallowly) if x ≤ y
for all x, y, T ∈ V with x ≤ y. The game will be said to allow shallow α-β pruning for the
maximizer if
x ∨ (y ∧ T ) = x
(11)
for all x, y, T ∈ V with x ≥ y. We will say that G allows shallow pruning if it allows shallow
α-β pruning for both players.
The definition basically says that the backed up value at the root of the game tree is
unchanged by pruning the maximizing subtree in the figure.
As we will see shortly, the expressions (10) and (11) describing shallow pruning are
identical to what are more typically known as absorption identities.
Definition 6.2.2 Suppose V is a set and ∧ and ∨ are two binary operators on V . The
triple (V, ∧, ∨) is called a lattice if ∧ and ∨ are idempotent, commutative and associative,
and satisfy the absorption identities in that for any x, y ∈ V ,
x ∨ (x ∧ y) = x

(12)

x ∧ (x ∨ y) = x

(13)

We also have the following:
Definition 6.2.3 A lattice (V, ∧, ∨) is called distributive if ∧ and ∨ distribute with respect
to one another, so that
x ∨ (y ∧ z) = (x ∨ y) ∧ (x ∨ z)

(14)

x ∧ (y ∨ z) = (x ∧ y) ∨ (x ∧ z)

(15)

Lemma 6.2.4 Each of (12) and (13) implies the other. Each of (14) and (15) implies the
other.
Proof. These are well known results from lattice theory (Grätzer, 1978).
Proposition 6.2.5 (Ginsberg & Jaffray, 2001) For a game G, the following conditions
are equivalent:
338

GIB: Imperfect information in a computationally challenging game

C

C

C
Cr min
S r max
 S
 r min
 
 SSr max
r


x
A
 A

A
Ar
r

y

T

Figure 9: T can be pruned (deeply) if x ≤ y
1. G allows shallow α-β pruning for the minimizer.
2. G allows shallow α-β pruning for the maximizer.
3. G allows shallow pruning.
4. (V, ∧, ∨) is a lattice.
Proof.16 We show that the first and fourth conditions are equivalent; everything else follows
easily.
If G allows shallow α-β pruning for the minimizer, we take x = a and y = T = a ∨ b in
(10). Clearly x ≤ y so we get
a ∧ (y ∨ y) = a ∧ y = a ∧ (a ∨ b) = a
as in (13).
For the converse, if x ≤ y, then x ∧ y = x and
x ∧ (y ∨ T ) = (x ∧ y) ∧ (y ∨ T )
= x ∧ (y ∧ (y ∨ T ))
= x∧y
= x.
6.3 Deep pruning
Deep pruning is a bit more subtle. An example appears in Figure 9.
As before, assume x ≤ y. The argument is as described previously: Given that the
minimizer has a guaranteed value of x at the upper minimizing node, there is no way that
a choice allowing the maximizer to reach y can be on the main line; if it were, then the
maximizer could get a value of at least y.
16. The proofs of this and Proposition 6.3.2 are due to Alan Jaffray.

339

Ginsberg

♣

r max
@
@ r min
@
@ r max
♦
@
@
@r min
♥
@
@r

♣

0

Figure 10: The deep pruning counterexample
Definition 6.3.1 (Deep α-β pruning) A game G will be said to allow α-β pruning for the
minimizer if for any x, y, T, z1 , . . . , z2i ∈ V with x ≤ y,
x ∧ (z1 ∨ (z2 ∧ · · · ∨ (z2i ∧ (y ∨ T ))) · · ·) =
x ∧ (z1 ∨ (z2 ∧ · · · ∨ z2i ) · · ·).
The game will be said to allow α-β pruning for the maximizer if
x ∨ (z1 ∧ (z2 ∨ · · · ∧ (z2i ∨ (y ∧ T ))) · · ·) =
x ∨ (z1 ∧ (z2 ∨ · · · ∧ z2i ) · · ·).
We will say that G allows pruning if it allows α-β pruning for both players.
As before, the prune allows us to remove the dominated node (y in Figure 9) and all of its
siblings.
The fact that a game allows shallow α-β pruning does not mean that it allows pruning
in general, as is shown by the following counterexample. The example involves a game with
one card that is known to both players; only the suit of the card matters. The game tree
appears in Figure 10.
In this tree, a node labelled with a suit symbol is terminal and means that the maximizer
wins if and only if the suit of the card matches the given symbol. So at the root of the given
tree, the maximizer (whose turn it is to play) can choose to “turn over” the card, winning
if and only if it’s a club, or can defer to the minimizer. The minimizer can choose to turn
the card (losing just in case it’s a diamond – the suit symbols refer to the maximizer’s
result), or hand the situation back to the maximizer. If the maximizer defers yet again,
the minimizer can either turn over the card, losing if it’s a club, or simply declare victory
(presumably his choice).
There is one other wrinkle in this game. At any point in the game, the maximizer can
change the card from either a diamond or a spade to a club.
Now let’s consider the game itself. At ply 4, the minimizer will obviously choose to win
the game. Thus at ply 3, the maximizer will need to choose ♥, winning just in case the
card is a heart. But this means that at ply 2, the minimizer will win the game, since if the
card is not a diamond he will move to the left (and win at once) while if the card is not a
heart he can win by moving to the right. (Remember that the minimizer knows the suit
340

GIB: Imperfect information in a computationally challenging game

of the card.) The upshot of this is that the maximizer wins the overall game if and only if
the card in question is a club. A formal analysis proceeds similarly, labelling the nodes as
follows:
r♣ = ♣ ∨ 0
@

@r0 = ♦ ∧ ♥
@
@ r♥ = ♥ ∨ 0
@
@
@r 0 = ♣ ∧ 0
♥
@
@r

♣
♦

♣

0

Note, incidentally, that the maximizer’s ability to change the card does not help him win
the game.
Now suppose that we apply deep pruning to this game. The ply four node is one where
the minimizer can force a value of at most ♣, suggesting that the siblings of the bottom ♣
node can be pruned. But doing so produces the following tree:
r♣ ∨ ♦
@

@r♦ = ♦ ∧ 1
@
@ r1 = ♥ ∨ ♣
@
@
@r ♣
♥
@
@r pruned?

♣
♦

♣

If the maximizer reaches ply 3, he can win by changing the card to a club if need be.
Of course, the minimizer won’t let the maximizer reach ply 3; at ply 2, he’ll move left
so that the maximizer wins only if the card is a diamond. That means that the maximizer
wins at the root just in case the card is either a club or a diamond.
A partial graph of the values for this game is as follows:
r
1

 


r
r
r♦
r
♣
♥
Q
♠

A

Q
 
Q A
Q A 
Q
Q
A
r


0
where we have included the crucial fact that x ∧ y = 0 if x 6= y (since the minimizer knows
the card) and ♥ ∨ ♣ = 1 because the maximizer can invoke his special rule. Other least
upper bounds are not shown in the diagram. The maximizing function ∨ moves up the
figure; the minimizing function ∧ moves down.
The deep prune fails because we can’t “push” the value ♣ ∧ 0 past the ♥ to get to the
♣ near the root. Somewhat more precisely, the problem is that
♥ = ♥ ∨ (♣ ∧ 0) 6= (♥ ∧ ♣) ∨ (♥ ∧ 0) = 0
This suggests the following:
341

Ginsberg

Proposition 6.3.2 (Ginsberg & Jaffray, 2001) For a game G, the following conditions
are equivalent:
1. G allows α-β pruning for the minimizer.
2. G allows α-β pruning for the maximizer.
3. G allows pruning.
4. (V, ∧, ∨) is a distributive lattice.
Proof. As before, we show only that the first and fourth conditions are equivalent. Since
pruning implies shallow pruning (take i = 0 in the definition), it follows that the first
condition implies that (V, ∧, ∨) is a lattice.
From deep pruning for the minimizer with i = 1, we have that if x ≤ y, then for any
z 1 , z2 , T ,
x ∧ (z1 ∨ (z2 ∧ (y ∨ T ))) = x ∧ (z1 ∨ z2 )
Now take y = T = x to get
x ∧ (z1 ∨ (z2 ∧ x)) = x ∧ (z1 ∨ z2 )

(16)

It follows that each top level term in the left hand side of (16) is greater than or equal to
the right hand side; specifically
z1 ∨ (z2 ∧ x) ≥ x ∧ (z1 ∨ z2 ).

(17)

We claim that this implies that the lattice in question is distributive.
To see this, let u, v, w ∈ V . Now take z1 = u ∧ w, z2 = v and x = w in (17) to get
(u ∧ w) ∨ (v ∧ w) ≥ w ∧ ((u ∧ w) ∨ v)

(18)

But v ∨ (u ∧ w) ≥ w ∧ (v ∨ u) is an instance of (17), and combining this with (18) gives us
(u ∧ w) ∨ (v ∧ w) ≥ w ∧ ((u ∧ w) ∨ v)
≥ w ∧ w ∧ (v ∨ u)
= w ∧ (v ∨ u)
This is the hard direction; w ∧ (v ∨ u) ≥ (u ∧ w) ∨ (v ∧ w) for any lattice because
w ∧ (v ∨ u) ≥ u ∧ w and w ∧ (v ∨ u) ≥ v ∧ w individually. Thus w ∧ (v ∨ u) = (u ∧ w) ∨ (v ∧ w),
and deep pruning implies that the lattice is distributive.
For the converse, if the lattice is distributive and x ≤ y, then
x ∧ (z1 ∨ (z2 ∧ (y ∨ T ))) = (x ∧ z1 ) ∨ (x ∧ z2 ∧ (y ∨ T ))
= (x ∧ z1 ) ∨ (x ∧ z2 )
= x ∧ (z1 ∨ z2 )
where the second equality is a consequence of the fact that x ≤ (y∨T ), so that x = x∧(y∨T ).
This validates pruning for i = 1; deeper cases are similar.
Finally, note that in games where this result applies, we can continue to use Algorithms
2.2.5 or 2.3.3 without modification, since the prunes that they endorse continue to be sound
as the game tree is expanded.
342

GIB: Imperfect information in a computationally challenging game

6.4 Application to imperfect information
In order to apply these ideas to games of imperfect information treated as in Section 5, we
need to show that the value set introduced there is a (hopefully distributive) lattice.
S
To do this, recall that there is redundant information in an arbitrary element F of 22 ,
since if F contains both T and U with T ⊆ U (in other words, the maximizer can play
for either T or for U but U is properly better), the set T can be removed from F without
affecting the maximizer’s options in any interesting way. This suggests the following:
S

Definition 6.4.1 Let F ∈ 22 for an arbitrary set S. We will say that F is reduced if
there are no T, U ∈ F with T ⊆ U . We will say that F1 is a reduction of F2 if F1 is reduced
and F1 ⊆ F2 .
S

Lemma 6.4.2 Every F ∈ 22 has a unique reduction.
Proof. This is immediate; just remove the subsumed elements from F.
.
We will denote the reduction of F by r(F).
Armed with this definition, we can now modify Definition 5.0.6 in the obvious way,
replacing the value set V with the set of reduced elements of V and the maximizing and
minimizing functions (8) and (9) with the reduced versions thereof, so that
max(F, G) = r(F ∪ G)

(19)

min({Fi }, {Gj }) = r({Fi ∩ Gj })

(20)

and
Remember that we typically write ∨ for max and ∧ for min.
Proposition 6.4.3 Given the above definitions, (V, ∨, ∧) is a distributive lattice.
Proof. We need to show that max and min as defined above are commutative, associative,
and idempotent, that they distribute with respect to one another, and that the absorption
identity (12) is satisfied. Since the reduction operator clearly commutes with the initial
definitions of max and min, commutativity, associativity and distributivity are obvious, as
is the fact that ∨ is idempotent. To see that ∧ is idempotent, we have
F ∧ F = r({min(Fi , Fj )}) = r({Fi ∩ Fj })
but each element of the set on the righthand side is a subset of Fi ∩ Fi so
F ∧ F = r({Fi }) = r(F) = F.
For the absorption identity, we need to show that
F ∨ (F ∧ G) = F
But
F ∧ G = r{Fi ∩ Gj }
343

Ginsberg

so
F ∨ (F ∧ G) = r(F ∨ r{Fi ∩ Gj })
= r({Fi } ∪ {Fi ∩ Gj })
= r({Fi })
= r(F)
= F
since, once again, each element of F ∧ G is subsumed by the corresponding Fi .
It follows that an implementation designed to compute the value of an imperfect information game as described by Theorem 5.0.7 can indeed use α-β pruning to speed the
computation.
6.5 Bridge implementation
Given this body of theory, we implemented a single-dummy version of gib’s double-dummy
search engine. Not surprisingly, the most difficult element of the implementation was buildS
ing efficient data structures for the manipulation of elements of 22 .
To handle this, we represented each element of S as a conjunction. We first identified
one of the two hidden hands H, and then for each card c, would write c if c were held by
H and ¬c if c were not held by H. An element of 2S was then taken to be a disjunctive
S
combination of these conjunctions, and an element of 22 was taken to be a list of such
disjunctions. The advantage of this representation was that logical inference could be used
to construct the reduction of any such list.
In order to make this inference as efficient as possible, the disjunctions themselves were
represented as binary decision diagrams, or bdd’s (Lind-Nielsen, 2000). There are a variety
of public domain implementations of bdd’s available, and we used one provided by LindNielsen (Lind-Nielsen, 2000).17
The resulting implementation solves small endings (perhaps 16 cards left in total) quickly
but for larger endings, the running times come to be dominated by the bdd computations;
this is hardly surprising, since the size of individual bdds can be exponential in the size
of S (the number of possible distributions of the unseen cards). We found that we were
generally able to solve 32-card endings in about a minute, but that the running times were
increasing by two orders of magnitude as each additional card was added.
This is both good news and bad news. Viewed positively, the performance of the system
as constructed is far superior to the performance of preceding attempts to deal with the
imperfect information arising in bridge. Frank et.al, for example, are only capable of solving
single suit combinations (13 cards left, give or take) using an algorithm that appears to take
several minutes to run (Frank, Basin, & Matsubara, 1998). They subsequently improve the
performance to an average time of 0.6 seconds (Frank et al., 2000), but are still restricted to
problems that are too small to be of much use to a program intended to play the complete
game.
17. We tried a variety of non-bdd based implementations as well. The bdd-based implementation was far
faster than any of the others.

344

GIB: Imperfect information in a computationally challenging game

That’s the good news. The bad news is that a program capable only of solving an 8card ending in a minute is inappropriate for production use. Gib is a production program,
expected to play bridge at human speeds. Another approach was therefore needed.

7. Solving single-dummy problems in practice
7.1 Achievable sets
The key to practical application of the ideas in the previous section is the realization that
when it comes time to make a play, a single element of F must be selected: if you can play
for West to have the ♠Q or for each player to have three hearts but cannot cater to both
possibilities simultaneously, you eventually have to actually make the choice.
Definition 7.1.1 Suppose that the value of the imperfect information game for G is F.
Given a specific A ⊆ S, we will say that A is achievable if there is some F ∈ F for which
A ⊆ F.
In other words, the set A of situations is achievable if the maximizer has a plan that wins
for all elements of A.
Definition 7.1.2 Given a set S of situations, a payoff function for S is any function
f : 2S → IR such that f (U ) ≤ f (T ) whenever U ⊆ T .
The payoff function evaluates potential achievable sets.
Definition 7.1.3 Let G be a game and S the associated set of situations. If f is a payoff
function for S, a solution to G under f is any achievable set A for which f (A) is maximal.
In practice, we need not find the actual value of the game; finding a solution to G under
an appropriate payoff function suffices. In bridge, the payoff function is presumably the
probability that the cards are dealt as in the set A; this function clearly increases with
increasing set size as required by Definition 7.1.2 and can be evaluated in practice using the
Monte Carlo sample of Section 3.
Instead of finding the solution to an imperfect information game, suppose instead that
we have a Monte Carlo sample for the game consisting of a set of situations S = {si } that
is ordered as i = 0, . . . , n. We can now produce an achievable set A as follows:
Algorithm 7.1.4 To construct a maximal achievable set A from a sequence hs0 , . . . , sn i of
situations:
1. Set A = Ø.
2. For i = 0, . . . , n, if A ∪ {si } is achievable, set A = A ∪ {si }.
The algorithm constructs the achievable set in a greedy fashion, gradually adding elements
of S to A until no more can be added.
Definition 7.1.5 Given a game G and a sequence S of situations, the achievable set induced by S for G is the set constructed by Algorithm 7.1.4.
345

Ginsberg

From a computational point of view, the expensive step in the algorithm is determining
whether or not the set A ∪ {si } is achievable. This is relatively straightforward, however,
since the focus on a specific set effectively replaces the game G with a new game with
values in {0, 1}. At any particular node n, if expanding n demonstrates that A ∪ {si } is
not achievable, the value of the game is zero. If expanding n indicates that A ∪ {si } is
achievable once n is reached, then the value of the node n is one. Although the search space
is unchanged from that of the original imperfect information game as in Definition 5.0.6,
there is no longer any need to manipulate complex values, and the check for achievability
is therefore tractable in practice.
Let me illustrate this by returning to our usual example of Section 5. Here is the fully
evaluated tree once again:
q {S ∪ T }
P
@PPP
PP
@
PP


@
PP {S ∪ T }
{S} q
{T } q
@q {S, T }
Pq
A
A
A
A
 A
 A
 A
 A




A
A
A {T }
A
{S} 
q
Aq
q
Aq
q
Aq
q
Aq
{S ∪ T }
{S}
{T }
{S ∪ T }
{S ∪ T } {S ∪ T }
C
C
 C
 C
 C
 C
q Cq
q Cq




{S ∪ T }

{S} {T }

{S ∪ T }

Note that we have replaced the value at the root with its reduction.
Now suppose that we view the set of positions as containing only two elements, s ∈ S
and t ∈ T . Presumably West holds the ♠Q in s, and East holds three hearts in t. If the
ordering chosen is hs, ti, then we first try to achieve {s}. In this context, a node n is a win
for the maximizer if either the maximizer can indeed win at n or s is no longer possible (in
which case the maximizer’s ability to achieve {s} is undiminished). The game tree becomes:
q max
P
PP

@
PP


@
PP



@ max PPP

q
@q
Pq min
min 
min q
A
A
A
A


 A
 A
S A T
S A T
S
T


A
A
A
A
q
Aq
q
Aq min q
Aq min q
Aq
1
1
0
1
1
1
C
C


S C T S C T
C
C
q Cq
q Cq
1

1

0

1

All of the T branches are wins for the maximizer (who is concerned with s only), and the
S branches are wins just in case the maximizer does indeed win (as he does if he guesses
right at either of the first two plies). Backing up the values gives us:
346

GIB: Imperfect information in a computationally challenging game

q1
P
PP

@
PP


@
PP


PP

@

PPq 1
1
0q
q
@q 1
A
A
A
A


 A
 A
S A T
S A T
S
T


A
A
A
A
0 q
q
Aq
q
Aq
Aq 1
q
Aq
1
1
0
1
1
1
C
C


S C T S C T
C
C
q Cq
q Cq
1

1

0

1

This indicates (correctly) that the maximizer can achieve s provided that he doesn’t decide
to play for T at the root of the tree. Note that this analysis is a straight minimax, allowing
S
fast algorithms to be applied while avoiding the manipulation of elements of 22 described
in the previous section.
Now we add t to our achievable set, which thus becomes {s, t}. The maximizer wins
only if he really does win (and not just because he isn’t interested in T any more), and the
basic tree becomes:
q max
P
PP

@

PP

@
PP



@ max PPP

q
@q
Pq min
min 
min q
A
A
A
A


 A
 A
S A T
S A T
S
T


A
A
A
A
Aq min q
Aq min q
Aq
q
Aq
q
1
0
0
1
1
1
C
C


S C T S C T
C
C
q Cq
q Cq
1

0

0

1

Backing up the values gives:
q1
P
PP

@

PP

@
PP


PP

@

PPq 1
0 q
0q
@q 0
A
A
A
A


 A
 A
S A T
S A T
S
T


A
A
A
A
0 q
q
Aq
q
Aq
Aq 0
q
Aq
1
0
0
1
1
1
C
C


S C T S C T
C
C
q Cq
q Cq
1

0

0

1

The maximizer can achieve the extended result only by making the rightmost move, as
desired.
What if the rightmost branch did not exist, so that the maximizer were unable to
combine his chances? Now the value of the root node in the above tree is 0, so that {s, t} is
not achievable. The maximal achievable set returned by the algorithm would be S; had the
347

Ginsberg

ordering been ht, si instead, an alternative maximal achievable set of T would have been
returned instead.
In any event, we have:
Proposition 7.1.6 Given a game G and a sequence S of situations, let A be the achievable
set induced by S for G. Then no proper superset of A in S is achievable.
Proof. This is straightforward. For any element s ∈ S − A, we know that U ∪ {s} is not
achievable for some U ⊆ A. Thus A ∪ {s} is not achievable as well.
Algorithm 7.1.4 allows us to construct maximal achievable sets relative to our Monte
Carlo sample; recall that we are taking our sequence S of situations to be any ordering
of the sample itself. In practice, however, it is important not to focus too sharply on the
sample itself, lest the eventual achievable set constructed overfit irrelevant probabilistic
characteristics of that sample. This can be accomplished by replacing the simple union in
step 2 of the algorithm with some more complicated operation that captures the idea of
“situations that are either like si or like those already in A.” In bridge, for example, A might
be all situations where West has two or three hearts, and si might be some new situation
where West has four hearts. The generalized union would be situations where West has
two, three or four hearts. If this more general set is not achievable, another attempt could
be made with the simple union. If we denote the “general union” by ⊕, Algorithm 7.1.4
becomes:
Algorithm 7.1.7 To construct an achievable set A from a sequence hs0 , . . . , sn i of situations:
1. Set A = Ø.
2. For i = 0, . . . , n:
(a) If A ⊕ {si } is achievable, set A = A ⊕ {si }.
(b) Otherwise, if A ∪ {si } is achievable, set A = A ∪ {si }.
This algorithm can be used in practice to find achievable sets that are either maximal
or effectively so over the set of all possible instances, not just those appearing in the Monte
Carlo sample.
7.2 Maximizing the payoff
It remains to find not just maximal achievable sets, but ones that approximate the solution
to the game in question given a particular payoff function.
To understand how we do this, let me draw an analogy between the problem we are trying
to solve and resource-constrained project scheduling (rcps). In rcps, one has a list of tasks
to be performed, together with ordering constraints saying that certain tasks need to be
performed before others. In addition, each task uses a certain quantity of various resources;
there are limitations on the availability of any particular resource at any particular time.
As an example, building an aircraft wing may involve fabricating the top and bottom flight
surfaces, building the aileron, and attaching the two. It should be clear that the aileron
348

GIB: Imperfect information in a computationally challenging game

cannot be attached until both it and the wing have been constructed. Building each section
may involve the use of three sheetmetal workers, but only five may be available in general.
The goal in an rcps problem is typically to minimize the length of the schedule (often
called the makespan) without exceeding the resource limits. In building a wing, it is more
efficient (and more cost effective) to build it quickly than slowly.
Many production scheduling systems try to minimize makespan by building the schedule
from the initial time forward. At each point, they select a task all of whose predecessors
have been scheduled, and then schedule that task as early as possible given the previously
scheduled tasks and the resource constraints. Scheduling the tasks in this way produces a
locally optimal schedule that may be improved by modifying the order in which the tasks
are selected for scheduling.
One method for finding an appropriate modification to the selection order is known as
squeaky wheel optimization, or swo (Joslin & Clements, 1999). In swo, a locally optimal
schedule is examined to determine which tasks are scheduled most suboptimally relative to
some overall metric; those tasks are deemed to “squeak” and are then advanced in the task
list so that they are scheduled earlier when the schedule is reconstructed. This process is
repeated, producing a variety of candidate solutions to the scheduling problem at hand; one
of these schedules is typically optimal or nearly so.
Applying swo to our game-playing problem is relatively straightforward.18 When we
use Algorithm 7.1.7 to construct an achievable set, we also construct as a byproduct a list of
sample elements to which that achievable set cannot be extended; moving elements of this
list forward in the sequence of hs0 , . . . , sn i will cause them to be more likely to be included
in the achievable set A if the algorithm is reinvoked. The weights assigned to the failing
sequence elements can be constructed by determining how representative each particular
element is of the remainder of the sample.
Returning to our example, suppose that the set S (where West has the ♠Q) has a single
representative s1 in the Monte Carlo sample (presumably this means it is unlikely for West
to hold the card in question), while T has five such representatives t1 , t2 , t3 , t4 and t5 .
Suppose also that the initial ordering of the six elements is hs1 , t4 , t2 , t1 , t5 , t3 i.
Assuming that the maximizer loses his rightmost option (so that he cannot cater to S
and T simultaneously), the maximal achievable set corresponding to this ordering is S. An
examination now reveals that all of the ti ’s could have been achieved but weren’t; in swo
terms, these elements of the sample “squeak.”
At the next iteration, the priorities of the ti ’s are increased by moving them forward in
the sequence, while the priority of s1 falls. Perhaps the new ordering is ht4 , t2 , s1 , t1 , t5 , t3 i.
This ordering can be easily seen to lead to the maximal achievable set T ; S ∪ T is still
unachievable. But the payoff assigned to T is likely to be much better than that assigned
to S (a probability of 0.8 instead of 0.2, if the Monte Carlo sample itself is unweighted). It
is in this way that swo allows us to find a globally optimal (or nearly so) achievable set.
18. Squeaky wheel optimization was developed at the University of Oregon; the patent application for the
technique has been allowed by the U.S. Patent and Trademark Office. The University’s interests in swo
are licensed exclusively to On Time Systems, Inc. for use in scheduling and related applications, and to
Just Write, Inc. for use in bridge-playing systems.

349

Ginsberg

7.3 Results
Our implementation of gib’s cardplay when declarer is based on the ideas described above.
(As a defender, a direct Monte Carlo approach appears preferable because enough information is typically available about declarer’s hand to make the double-dummy assumption
reasonably valid.) The implementation is fast enough to conform to the time requirements
placed on a production program (roughly one cpu minute to play each deal).
Evaluating the impact of these ideas on gib’s cardplay is difficult, since declarer play is
already the strongest aspect of its game. In extended matches between the two versions of
gib, the approach based on the ideas described here beats the Monte-Carlo based version
by approximately 0.1 imps/deal, but there is a great deal of noise in the data because most
of the swings correspond to differences in bidding or defensive play. It is possible to remove
some of these differences artificially (requiring the bidding to be identical both times the
deal is played, for example), but defensive differences remain. Nevertheless, gib is currently
a strong enough player that the 0.1 imps/deal difference is significant.
The situation on problem deals, such as those from the par contests or from the Gitelman
sets, is much clearer. In addition, many of the deals that gib gets “wrong” are in fact deals
that gib plays correctly but that the problem composers play incorrectly (Gitelman or, in
the case of the par contests, Swiss bridge expert Pietro Bernasconi). In the following table,
we have been generous with all parties, deeming a line to be correct if it is not clearly
inferior to another. Let me point out that the designers of the problems are attempting to
construct deals where there is a unique solution (the “answer” to the test they are posing
the solver), so that a deal with multiple solutions is in fact one that the composer has
already misanalyzed.
Source
BM level 1
level 2
level 3
level 4
level 5
1998 par contest
1990 par contest

size
36
36
36
36
36
12
18

BB
16
8
2
1
4
0
0

GibMC
31
23
12
21
13
5
8

GibSWO
36
34
34
31
28
11
14

composer
35
34
34
34
34
12
17

ambiguous
0
1
2
4
5
2
3

The rows are in order of increasing difficulty; it was universally felt among the human
competitors that the deals in the 1990 par contest were far more difficult than those in
1998. The columns are as follows:
Source
Size
BB
GibMC
GibSWO
composer
ambiguous

is the source from which the problems were obtained.
is the number of problems available from this particular source.
gives the number of problems solved correctly by Bridge Baron 6.
gives the number solved correctly by gib using a Monte Carlo approach.
gives the number solved correctly by gib using swo and achievable sets.
gives the number solved correctly by the composer (in that the intended
solution was the best one available).
gives the number misanalyzed by the composer (in that multiple solutions
exist).
350

GIB: Imperfect information in a computationally challenging game

Note, incidentally, that gib’s performance is still less than perfect on these problems.
The reason is that gib’s sample may be skewed in some way, or that swo may fail to find
a global optimum among the set of possible achievable sets.

8. Conclusion
8.1 GIB compared
Other programs Gib participated in both the 1998 and the 2000 World Computer
Bridge Championships. (There was no 1999 event.) Play was organized with each machine
playing two hands and the competitors being trusted not to cheat by “peeking” at partner’s
cards or those of the opponents.19
Each tournament began with a complete round robin among the programs, with the top
four programs continuing to a knockout phase. The matches in the round robin were quite
short, and it was expected that bridge’s stochastic element would keep any program from
being completely dominant.
While this may have been true in theory, in practice gib dominated both round robins,
winning all of its matches in 1998 and all but one in 2000. The round robin results from
the 2000 event were as follows:20

Gib
WBridge
Micro
Buff
Q-Plus
Blue Chip
Baron
Meadowlark

Gib
–
6
9
4
13
1
4
3

WB
14
–
1
7
4
13
2
0

Micro
11
19
–
2
5
5
7
0

Buff
16
13
18
–
8
0
15
0

Q-Plus
7
16
15
12
–
9
6
9

Chip
19
7
15
20
11
–
9
0

Baron
16
18
13
5
14
11
–
6

M’lark
17
20
20
20
11
20
14
–

Total
100
99
91
70
66
59
57
18

Each match was converted first to imps and then to victory points, or VPs, with the two
competing programs sharing the 20 VPs available in each match. The first entry in the
above table indicates that gib beat wbridge by 14 VPs to 6; the fourth that gib lost
to q-plus bridge by 7 VPs to 13. (This is gib’s only loss ever to another program in
tournament play.)
In the 1998 knockout phase, gib beat Bridge Baron in the semifinals by 84 imps over 48
deals. Had the programs been evenly matched, the imp difference could be expected to be
normally distributed, and the observed 84 imp difference would be a 2.2 standard deviation
19. Starting with the 2001 event, each computer will handle only one of the four players, although there
is still no attempt to prevent the (networked) computers from transmitting illegal information between
partners.
20. There were eight competitors in the event:
gib (www.gibware.com), Hans Leber’s q-plus
(www.q-plus.com), Tomio and Yumiko Uchida’s micro bridge (www.threeweb.ad.jp/˜mcbridge),
Mike Whittaker and Ian Trackman’s blue chip bridge (www.bluechipbridge.co.uk), Rod Ludwig’s meadowlark bridge (rrnet.com/meadowlark), bridge baron (www.bridgebaron.com), and
two newcomers: Doug Bannion’s bridge buff (www.bridgebuff.com) and Yves Costel’s wbridge
(ourworld.compuserve.com/homepages/yvescostel).

351

Ginsberg

event. Gib then beat Q-Plus Bridge in the finals by 63 imps over 64 deals (a 1.4 standard
deviation event). In 2000, it beat Bridge Buff by 39 imps over 48 deals in the semifinals
(a 1.0 standard deviation event) and then beat wbridge by 101 imps over 58 deals (a 2.6
standard deviation event). The finals had been scheduled to run 64 deals, but wbridge
conceded after 58 had been played.
The most publicized deal from the final was this one, an extremely difficult deal that both
programs played moderately well. Gib reached a better contract and was aided somewhat
by wbridge’s misdefence in a moderately complex situation.
♠
♥
♦
♣
♠
♥
♦
♣

KQ9
AQJ
96432
86

10 6
10 9 2
10
A J 10 9 5 3 2

♠
♥
♦
♣
♠
♥
♦
♣

8732
753
AKQJ85
—

AJ54
K864
7
KQ74

When wbridge played the North-South cards and gib was East-West, North opened
1♦ and eventually played in three notrump, committing to taking nine tricks. The gib East
started with four rounds of diamonds as South discarded two clubs and . . . ?
Looking at all four hands, the contract is cold; South can discard another club and East
has none to play. There are thus nine tricks: four in each of hearts and spades, and the
diamond nine.
Give East a club, however, and the contract rates to be down no less than four since
the defense will be able to take at least four club tricks. WBridge decided to play safe,
keeping the ♣KQ and discarding a heart. There are now only eight tricks and the contract
was down one.
The bidding and play were more interesting when gib was N-S. North opened 1NT,
showing 11–14 HCP without four hearts or spades unless exactly three cards were held in
every other suit. East overcalled a natural 2♦ and South cue bid 3♦, showing weakness in
diamonds and asking North to bid a 4-card heart or spade suit if he had one.
North has no good bid at this point. Bidding 3NT with five small diamonds rates to be
wrong and 4♣ is clearly out of the question. Gib’s simulation suggested that 3♠ (ostensibly
showing four of them) was the least of evils. South raised to 4♠, and East doubled, ending
the auction.
East led a top diamond, and shifted to the ♥3, won by North’s ♥Q. Gib now cashed
the ♥J and led the ♣6, which East chose (wrongly) to ruff. WBridge now led the ♦K as
East, which was ruffed with the ♠J. Gib was now able to cash the ♠AK to produce:
352

GIB: Imperfect information in a computationally challenging game

♠
♥
♦
♣
♠
♥
♦
♣

Q
A
962
8

—
—
—
A J 10 9 5 3

♠
♥
♦
♣
♠
♥
♦
♣

8
7
QJ85
—

5
K8
—
KQ4

Knowing the position exactly, gib needed five more tricks with North to lead. It ruffed
a diamond, returned to the ♥A and drew East’s trump with the ♠Q. Now a club forced an
entry to the South hand, where the ♥K provided the tenth trick.
Humans Gib played a 14-deal demonstration match against human world champions Zia
Mahmood and Michael Rosenberg21 in the AAAI Hall of Champions in 1998, losing by a
total of 6.4 imps (a 0.3 standard deviation event). Early versions of gib also played on
OKBridge, an internet bridge club with some 15,000 members.22 After playing thousands
of deals against human opponents of various levels, gib’s ranking was comparable to the
OKBridge average.
It is probable that neither of these results is an accurate reflection of gib’s current
strength. The Mahmood-Rosenberg match was extremely short and gib appeared to have
the best of the luck. The OKBridge interface has changed and the gib ‘OKbots’ no longer
function. The performance figures there are thus somewhat outdated, predating various
recent improvements including all of the ideas in Sections 5–7. More interesting information
will become available starting in late July of 2001, when gib, paired with Gitelman and his
regular partner Brad Moss, will begin a series of 64-deal matches against human opponents
of varying skill levels.
8.2 Current and future work
Recent work on gib has focused on its weakest areas: defensive cardplay and bidding. The
bidding work has been and continues to be primarily a matter of extending the existing
bidding database, although gib’s bidding language is also being changed from Standard
American (a fairly natural system) to a variant of an artificial system called Moscito developed in Australia.23 Moscito has very sharply defined meanings, making it ideal for use
21. Mahmood and Rosenberg have won, among other titles, the 1995 Cap Volmac World Top Invitational
Tournament. As remarked earlier, Rosenberg would also go on after the GIB match to win the Par
Competition in which GIB finished 12th.
22. http://www.okbridge.com
23. Gib’s version of Moscito is called Moscito Byte.

353

Ginsberg

by a computer program, and is an “action” system, working hard to make the opponents’
bidding as difficult as possible.
With regard to defensive cardplay, the key elements of high level defense are to make it
hard for partner to make a mistake while making it easy for declarer to do so. Providing gib
with these abilities will involve an extra level of recursion in the cardplay, as each element
of the Monte Carlo sample must now be considered from other players’ points of view, as
they generate and then analyze their own samples. These ideas have been implemented but
currently lead to small performance degradations (approximately 0.05 imps/deal) because
the computational cost of the recursive analyses require reducing the size of the Monte
Carlo sample substantially. As processor speeds increase, it is reasonable to expect these
ideas to bear significant fruit.
In 1997, Martel, a computer scientist himself, suggested that he expected gib to be the
best bridge player in the world in approximately 2003.† The work appears to be roughly on
schedule.
8.3 Other games
I have left essentially untouched the question of to what extent the basic techniques we have
discussed could be applied to games of imperfect information other than bridge.
The ideas that we have presented are likely to be the most applicable in games where
the perfect information variant is tractable but computationally challenging, and the assumption that one’s opponents are playing with perfect information is a reasonable one.
This suggests that games like hearts and other trick-taking games will be amenable to our
techniques, while games like poker (where it is essential to realize and exploit the fact that
the opponents also have imperfect information) are likely to need other approaches.

Acknowledgments
A great many people have contributed to the gib project over the years. In the technical
community, I would like to thank Jonathan Schaeffer, Rich Korf, David Etherington, Bart
Massey and the other members of cirl. In the bridge community, I have received invaluable
assistance from Chip Martel, Rod Ludwig, Zia Mahmood, Andrew Robson, Alan Jaffray,
Hans Kuijf, Fred Gitelman, Bob Hamman, Eric Rodwell, Jeff Goldsmith, Thomas Andrews
and the members of the rec.games.bridge community. The work itself has been supported
by Just Write, Inc., by DARPA/Rome Labs under contracts F30602-95-1-0023 and F3060297-1-0294, and by the Boeing Company under contract AHQ569. To everyone who has
contributed, whether named above or not, I owe my deepest appreciation.

Appendix A. A summary of the rules of bridge
We give here a very brief summary of the rules of bridge. Readers wanting a more complete
description are referred to any of the many excellent texts available (Sheinwold, 1996).
Bridge is a card game for four players, who are split into two pairs. Members of a single
pair sit opposite one another, so that North-South form one pair and East-West the other.
354

GIB: Imperfect information in a computationally challenging game

The deck is distributed evenly among the players, so that each deal involves giving each
player a hand of 13 cards. The game then proceeds through a bidding and a playing phase.
The playing phase consists of 13 tricks, with each player contributing one card to each
trick in a clockwise fashion. The player who plays first to any trick is said to lead to that
trick. The highest card of the suit led wins the trick (Ace is high and deuce low), unless a
trump is played, in which case the highest trump wins the trick. The person who leads to a
trick is free to lead any card he wishes; subsequent players must play a card of the suit led
if they have one, and can play any card they choose if they don’t. The winner of one trick
leads to the next; the person who leads to the first trick (the opening leader) is determined
during the bidding phase of the game.
The object of the card play phase is always for your partnership to take as many tricks
as possible; there is no advantage to one partner’s taking a trick over another, and the order
in which the tricks are taken is irrelevant. After the opening leader plays the first card to
the first trick, the player to his left places his cards face up on the table so that all of the
other players can see them. This player is called the dummy, and when it is dummy’s turn
to play, dummy’s partner (who can see the partnership’s combined assets) selects the card
to be played. Dummy’s partner is called the declarer and the members of the other pair
are called the defenders.
The purpose of the bidding phase is to identify trumps and the declarer, and also the
contract, which will be described shortly. The opening leader is identified as well, and is
the player to the declarer’s left.
During the bidding phase, various contracts are proposed. The dealer has the first
opportunity to propose a contract and subsequent opportunities are given to each player
in a clockwise direction. Each player has many opportunities to suggest a contract during
this phase of the game, which is called the auction. Each partnership is required to explain
the meanings of their actions during the auction to the other side, if requested.
Each contract suggests a particular trump suit (or perhaps that there not be a trump
suit at all). Each player suggesting a contract is committing his side to winning some particular number of the 13 available tricks. The minimum commitment is 7 tricks, so there
are 35 possible contracts (each of 4 possible trumps, or no trumps, and seven possible commitments, from seven to thirteen tricks). These 35 contracts are ordered, which guarantees
that the bidding phase will eventually terminate.
After the bidding phase is complete, the side that suggested the final contract is the
declaring side. Of the two members of the declaring side, the one who first suggested the
eventual trump suit (or no trumps) is the declarer. Play begins with the player to the
declarer’s left leading to the first trick.
After the hand is complete, there are two possible outcomes. If the declaring side took
at least as many tricks as it committed to taking, the declaring side receives a positive
score and the defending side an equal but negative score. There are substantial bonuses
awarded for committing to taking particular numbers of tricks; in general, the larger the
commitment, the larger the bonus. There are small bonuses awarded for winning tricks
above and beyond the commitment.
If the declaring side failed to honor its commitment, it receives a negative score and
the defenders receive an equal but positive score. The overall score in this case (where the
355

Ginsberg

declarer “goes down”) is generally smaller than the overall score in the case where declarer
“makes it” (i.e., honors his commitment).

Appendix B. A new ending discovered by GIB
This deal occurred during a short imp match between gib and Bridge Baron.
♠
♥
♦
♣
♠
♥
♦
♣

96
QJ85
AQ3
K J 10 8

KQJ875
943
7
642

♠
♥
♦
♣
♠
♥
♦
♣

43
A72
J 10 6 2
AQ73

A 10 2
K 10 6
K9854
95

With South (gib) dealing at unfavorable vulnerability, the auction went P–2♠–X–P–3NT–
all pass. (P is pass and X is double.) The opening lead was the ♠K, ducked by gib, and
Bridge Baron now switched to a small heart. East won the ace and returned to spades, gib
winning.
Gib cashed all the hearts, pitching a small club from its hand. It then tested the
diamonds, learning of the bad break and winning the third diamond in hand. It then led
the ♦9 in the following position:
♠
♥
♦
♣
♠
♥
♦
♣

—
—
—
K J 10 8

Q
—
—
? ? ?

♠
♥
♦
♣
♠
♥
♦
♣

—
—
J
A??

10
—
98
9

When gib pitched the ten of clubs from dummy (it had been aiming for this ending all
along), the defenders were helpless to take more than two tricks independent of the location
of the club queen. At the other table, Bridge Baron let gib play in 2♠ making exactly, and
gib picked up 12 imps.
356

GIB: Imperfect information in a computationally challenging game

References
Adelson-Velskiy, G., Arlazarov, V., & Donskoy, M. (1975). Some methods of controlling the
tree search in chess programs. Artificial Intelligence, 6, 361–371.
Bayardo, R. J., & Miranker, D. P. (1996). A complexity analysis of space-bounded learning
algorithms for the constraint satisfaction problem. In Proceedings of the Thirteenth
National Conference on Artificial Intelligence, pp. 298–304.
Billings, D., Papp, D., Schaeffer, J., & Szafron, D. (1998). Opponent modeling in poker. In
Proceedings of the Fifteenth National Conference on Artificial Intelligence, pp. 493–
499.
Blackwood, E. (1979). Play of the Hand with Blackwood. Bobbs-Merrill.
Eskes, O. (1997). GIB: Sensational breakthrough in bridge software. IMP, 8 (2).
Frank, I. (1998). Search and Planning under Incomplete Information: A Study Using Bridge
Card Play. Springer-Verlag, Berlin.
Frank, I., & Basin, D. (1998). Search in games with incomplete information: A case study
using bridge card play. Artificial Intelligence, 100, 87–123.
Frank, I., Basin, D., & Bundy, A. (2000). Combining knowledge and search to solve singlesuit bridge. In Proceedings of the Sixteenth National Conference on Artificial Intelligence, pp. 195–200.
Frank, I., Basin, D., & Matsubara, H. (1998). Finding optimal strategies for imperfect
information games. In Proceedings of the Fifteenth National Conference on Artificial
Intelligence, pp. 500–507.
Ginsberg, M. L. (1993). Dynamic backtracking. Journal of Artificial Intelligence Research,
1, 25–46.
Ginsberg, M. L., & Harvey, W. D. (1992). Iterative broadening. Artificial Intelligence, 55,
367–383.
Ginsberg, M. L., & Jaffray, A. (2001). Alpha-beta pruning under partial orders. In Games
of No Chance II. To appear.
Grätzer, G. (1978). General Lattice Theory. Birkhäuser Verlag, Basel.
Greenblatt, R., Eastlake, D., & Crocker, S. (1967). The greenblatt chess program. In Fall
Joint Computer Conference 31, pp. 801–810.
Joslin, D. E., & Clements, D. P. (1999). Squeaky wheel optimization. Journal of Artificial
Intelligence Research, 10, 353–373.
Koller, D., & Pfeffer, A. (1995). Generating and solving imperfect information games. In
Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence,
pp. 1185–1192.
Levy, D. N. (1989). The million pound bridge program. In Levy, D., & Beal, D. (Eds.),
Heuristic Programming in Artificial Intelligence, Asilomar, CA. Ellis Horwood.
Lind-Nielsen, J. (2000). BuDDy: Binary Decision Diagram package. Tech. rep., Department of Information Technology, Technical University of Denmark, DK-2800 Lyngby,
Denmark.
357

Ginsberg

Lindelöf, T. (1983). COBRA: The Computer-Designed Bidding System. Gollancz, London.
Marsland, T. A. (1986). A review of game-tree pruning. J. Intl. Computer Chess Assn.,
9 (1), 3–19.
McAllester, D. A. (1988). Conspiracy numbers for min-max searching. Artificial Intelligence,
35, 287–310.
Pearl, J. (1980). Asymptotic properties of minimax trees and game-searching procedures.
Artificial Intelligence, 14 (2), 113–138.
Pearl, J. (1982). A solution for the branching factor of the alpha-beta pruning algorithm
and its optimality. Comm. ACM, 25 (8), 559–564.
Plaat, A., Schaeffer, J., Pijls, W., & de Bruin, A. (1996). Exploiting graph properties of game
trees. In Proceedings of the Thirteenth National Conference on Artificial Intelligence,
pp. 234–239.
Schaeffer, J. (1997). One Jump Ahead: Challenging Human Supremacy in Checkers.
Springer-Verlag, New York.
Sheinwold, A. (1996). Five Weeks to Winning Bridge. Pocket Books.
Smith, S. J., Nau, D. S., & Throop, T. (1996). Total-order multi-agent task-network planning for contract bridge. In Proceedings of the Thirteenth National Conference on
Artificial Intelligence, Stanford, California.
Stallman, R. M., & Sussman, G. J. (1977). Forward reasoning and dependency-directed
backtracking in a system for computer-aided circuit analysis. Artificial Intelligence,
9, 135–196.
Sterling, L., & Nygate, Y. (1990). PYTHON: An expert squeezer. J. Logic Programming,
8, 21–40.
Wilkins, D. E. (1980). Using patterns and plans in chess. Artificial Intelligence, 14, 165–203.

358


	
 
			 ! #"$ % 
'&)(*,+.-//!(102-346574/-

CEDGFIHJH

89:;< =,-?>
/!(@A:	%&=B3?>
/!(

KMLNPOQOQROGSUTWVYX$Z[F]\_^MHGN`X$ZaKML?NPOcbdF]OGFfegN,Z[RhiOjCEDGeghlkGSiD
m

F]kGenRX$ZgR?opTqF]N`egorD

sfu2
t vxwzy{u$|~}2

2f2$[i$f$$6x$#2

G 
v r$vx ¢¡ ¤£f¤¥
§f¨
©ª«x¨¬­®{9¯© °±²¨ª­³~±±²¨
¨´,§<¨!µ!¶,·¹¸¹´

$¤¦i$f$$6x$#2

º9»x¼½¼¾À¿ ª1¨Áµ?Âª«´f§f¨ªÃÀÄ¹ÅÆ

ÇÉÈ,Ê½ËÌÍgÎ¤Ë
ÏÑÐ`ÒÐ9Ó6Ô?Õ6Ö×Ð`Ø¹ÙÒqÐ9ÚØ½Û²ÜØÝ1Ð~Ý1ÞÐBØ½Û²ßà½Õ6ÖÝ6ÞáÀÖÔ]Ý1Ð!Ô
ÞÙÖ.âxÜÐ9ÓÝ6ÞØÝfØ¹Õ6Ð,ÜÓ Ð!ÒqÖÙYÝ1ÞÐ`ã[ãåäÛ.Ø¹ÙÙÖ²Ùß
1Ó æÓÝ6ÐáGçè2Ö²éÐnÝ1ÞÐê,ëìíÓ1æÓÝ6ÐáGî¹ã[ãGÕ1Ð9Û²ÖÐ9Ó2à½ÙPï7àÕ1ðñØ¹Õ
ÒBÓÝ
ØÝ6Ð#Ó1äØ½ÔÐ#Ó1Ð9Ø¹Õ
Ô
Þ$îÜÓ1Ö²Ùß~ØfÞÐÜÕ6ÖÓ Ý1Ö.ÔgÝ6ÞØÝ
Ð!ÓÝ6Ö²áòØÝ6Ð9Ó<ßàØ½Û$ÒÖÓ Ý6Ø½ÙÔ?Ð!Ó<×æqÖß½ÙàÕ1ÖÙßòÒÐ9Û²ÐÝ1Ð`ÛÖÓ Ý6Ó9ç#ó]ÙÛ²Öé½Ðiê~ëì]ô Ó<ÞÐÜÕ6ÖÓ Ý1Ö.Ô¹îà½ÜÕfáÀÐÝ1ÞàÒGÒàÐ9Ó
Ùà½Ý,ØÓ1Ó1ÜáÀÐPïØÔÝ6Ó]Ý1àY×ÐlÖÙÒÐä¤ÐÙÒÐÙxÝ9çBÏÑÐ)ÖÙxÝ1Õ6àÒÜÔ?ÐlØWÙàÚÐÛÓ1Ð9Ø½Õ6Ô
ÞõÓ Ý1Õ
ØÝ6ÐßæqÝ6ÞØÝ`Ô?àá)×ÖÙÐ9Ó
ÞÖÛÛö÷Ô?ÛÖ²ái×ÖÙßGð<ÖÝ6ÞøÓ æÓ Ý1ÐáòØ¹Ý1Ö.ÔlÓ1Ð9Ø½Õ6Ô
Þ2î$Ø¹ÙÒÑðÐÀÓ1ÞàðMÞàðùà½Ý1ÞÐ9Õ`äàðÐÕ1ï7ÜÛgÞÐ9ÜÕ1Ö.Ó Ý1Ö.ÔiÖÙï7àÕ1áòØö
Ý6Ö²àÙ{ÔØ½Ùø×¤ÐYÐúxÝ6Õ6ØÔÝ6Ð9ÒøØ½ÙÒåÜÓ1Ð9ÒøÝ1àíäÕ1ÜÙÐqÝ6ÞÐûÓ1Ð9Ø½Õ6Ô
ÞøÓ1äØÔ?Ð½çüã[ãýðØÓPÝ6ÞÐûálàxÓÝÀÓ ÜÔÔ?Ð!Ó1Ó ï7ÜÛ
Ø½ÜÝ1àáÀØ¹Ý1Ö.Ô)äÛØ½ÙÙÐÕ`Ø¹Ý,Ý6ÞÐÀÕ1Ð!Ô?Ð9ÙÝ`þfÿìëxö òäÛ.Ø¹ÙÙÖ²ÙßGÔ?àáÀäÐÝ1Ö²Ý1Öà½Ù$çlÏ ÐÀÕ6ÐÚÖÐð Ý6ÞÐÀÕ1Ð!Ó ÜÛ²Ý6Ó
à½ï¤Ý6ÞÐ~Ôà½áÀä¤Ð?Ý1Ö²Ý1Öà½Ù2îßÖ²ÚÐ]ÒØÝ
Ø,ï7à½Õ#à¹Ý1ÞÐÕr×¤ÐÙÔ
ÞáòØ¹Õ6éiÒàáÀØ½Ö²ÙÓîØ¹ÙÒÀÖÙÚ½Ð!ÓÝ6Ö²ßxØÝ1ÐñÝ6ÞÐfÕ6Ð9ØÓ àÙÓ[ï7à½Õ
Ý6ÞÐ`Õ1ÜÙÝ6Ö²áÀÐ`ä¤ÐÕ1ï7à½Õ6áòØ¹ÙÔÐ~à½ï[ã[ã Ôà½áÀäØ½Õ1Ð!ÒòÝ1àWê,ëì[ç

	 ËÌ]Î¤Ë 
!#"$%'&()+*",-$').!/"0$12"3$4#51/47698"1:;4#1/8<"$>=&?><@84A1B8<*C=&ED9#"1/1/4#1/5
$%*F$%%G;$HIJ/4#$K4#1/8<-"$%L4#$JG;"4M1/A*'N/O/E%=;P1/)Q",D/D/="8R$S4M1TDB#"1T51-",4#=1H
IJ/U6B-$%V",D/DB="8-E)K"$WN/A=DXNEY:*?ZK#O/G["1BNE\/O-$%.]_^``acbc^``deRHUf_1E4AV$%G'4#1/",DB",DX
=1Thg?ikjklmklnWjop$*c$%%Gq]rZK#OBGtsu\/O-$%bV^``aeRb9*N/$8<-4AYXNT"
1)vDB#"1w51R",4A=1
%8-B1/4#xcOY9"$%Ny=1hz9{A|,}/}/~}:?%|RzBb:)k/4#8-h)K"$GhO/8Ry&"$%/"1
"1*h=%8-B1/4#xcOF1=)S1
",/4#$U4MG
HIS4AUDB",DX$%",%N;"?)S/=A.$-4A$U=&$%",-8R
<=-$/",<691/NhB4#$",D/D/="8R
Yc*wG;",F4#15;4#1!G
=P<@84A1:h]r\=snV=15bW^``cL"GhYB/"G
DB",4b/l",-b9sn"GPYB8-:b
^``deU"1/NYc*P<F%1/N/4#1/54A%=L8<=DXK)S4AG
=K<cDB$$4AKDBM"1/1/4#15k#"15O/",5$J]rE=c/Ab,okYXb
mk=,XG;"1B1bcsv?4#G;=D=OBA=$b/^``d:Bg?",1s[L1=YBA=F8bB^``d:j1/N-$%=1VbcFG;4AVbs#Nb^``c
okYbB,eRH
IJ/$%8<=1BNw",DBD/="8-T4#$Sz9{A|,}/}/~}:w|k|r~((|~({~rr ?G;=cNVb:)SB4#8-%-"1/$M",%$D9#"1/1/4#1/5
%=;D/-=D=$-4A4A=1/"$",4#$_6",YB4##4A¡*!]rL"O%hsF#G;"1b^``¢eRH.f£1TDB",-4#8O/#",KL4M$KL=DX?/",
"N,"1/8<$4#13w$%",%w=&",h=&D/=DX=$4A4#=1/"U"$%=1/4M15!$%*F$%%G;$8",*3N/4#8<A*0=y%=
DB#"1B1/4#15w$%*c$%G;$EA*F4#15w=1/4M$?%8-/1=#=5*H;f£1¤&r"8<bP"O%'"1/N¥cMG;"1¦]_^```e?D/-N/4#8<%N
/",k$%",-8R>=1>D9#"1/1/4#1/5yG;=cNB$)S4##XYX8<=G
h$ODX%§9O=OB$YX8"O/$PP$",%P=&P",-S4#1
D/=DX=$4#4A=1/""$%=1/4M15;$%*F$%%G;$)S4M#X"N"1B8<PGhOB8-¨&r"$%%SB"1>4#1TDB#"1B1/4#15y$%*F$%%G;$H
j©B4A-N¥1/)ª",D/DB="8-C4#$'F«<¬F~M<r~r­®¯«|,%­<!z9{7|}/}/~}:¨"$hD/=DX=$%N°Y:*3Z.=1
"1/N±g<1
]_^``cb²^```eRHf£1/4#$k",D/D/="8R0"wOR4#$%4#8?&rO/1/8<4A=14#$SN/-4AN&(=G+$%DX847698",4A=1!=&²
DB#"1B1/4#15S4M1/$%"1/8<K"1/NyO/$%N&=5OB4#N/4#15kK$%",-8-;=O5K$%",%J$%DB"8<Hj$NG
=1/$%-",%N
Yc*'E$%*F$%%Gt\U\]r$=&=\/"$%_³¯\=)K",-N9eJ",?DB#"1/1B4#15h8<=G;D4#4A=1T",JjSf_l.:³¡,FbB/4#$
",D/D/-="8-¨D/-=N¨%=
YXE8<=G
DX4A4AHf_1T&"8<b9\\C=O%DX&=-G
N¨"M9/E=J&rO/#A*;"O%=G'",4#8
$%*F$%%G;$L"1BN)."$P1=G;4#1/",%NQ´K_µ,¬zC¶©·P~M<r~(}c¬F~MRF«¸T¹S«(ºµ,»;|,}9­R«'¹K{A|,}/}/~}:!¼B ¯«»t",L
8<=G
DX4A4A=1VH

½  -//!(g¤ %%9¾!=6P
=K¿B?
.Àg
!²;f
ÂÁ¤:!	%&%¯Ã		½&?%2%MÄ? =Ã

Å

2f$ÆÈÇi¤¦

f_1ym?Fl±]rZ.=1Âsvg<1b/^``eRb:5="N/4#$%"1/8<$U",.$%4#G'",%NyY:*P",DBD/=4#G;",4M15k$%=MO4A=1
A150%=¨"w#"",4A=10=&²yDB#"1B1/4#15
"$%É]rZ.=1bWnV=c-4#1B8$bXs©g<1b^``deRHhÊ/4MAh\U\
O/$%$SP$"G;P#"",4A=1¨&=kN/-4AF4#15
4A$S/O-4#$%4M8$b4ASN/47X-$&=G+m?FlË4#1>"1:O/GhYX=&²4#Gy³
DX="1:ÂN"4##$Hf£$²YB"$JO-4#$4#8.%8-/1/4Mx:Ok8"1
YXJ$%1'"$"1'",D/DBM4#8",4A=1y=&Vg?iSjlÂmlÂnjko
%=P/J#"",4A=1HIJ/4M$U*c4AMN/$5="BNB4#$%"1/8<J$4#G;",%$/",b:4#1'N/47X1/8<J%=PmEFlSÌÍ$²$%4#G'",%$b
N=L1=-A*P=1;"1'4#1/NDX1/N1B8<."$$-O/G
D/4A=1VH\U\O/$%$²"ENB47-1²$%",R8-
%8R/1/4#xcO/"1;mEFlb
1/"G
#*!"1Ë«<}º<µ,%­R«-¸Lºµ,»©=&/4M#7³¯8#4#GhYB4#1/5bB8<=GPY94#1/4#15wA=F8""1/N$%*F$%%G;",4#8y$%",-8RHy\4M1/"#A*b
4AkG
DBA=*c$?"D=)-&O/WD/-O/1B4#15
%8-B1/4#xcOhB",$%#8<$"T$%=&²D/-=G;4#$4#1/5;$O/88<$$%=R$k%=T"8R
$%",-8R1=FNb"1BN0"1/=?D/-O/1/4M15
%8-/1B4#x:O/h/",E8O$=OY/-"1B8-$)S-h4A?",D/DX",-$k/",
$%=G
E5="W/"$YX1¨"8-/4#N¨%=:='",-A*H²Z.=>%8R/1/4#xcO$",E=Y/"4M1N¨"$J"
$4#N/<X8<J=&
YB"$%hO-4#$4#8kG;=cNVH
Î.=1B8<-1/4#15E/S$%",R8-T$%%-",%5*;B",\U\34#$ÂYB"$%N;=1Vb:).SG'",yS&=#A=)S4#15HUjvA=Â=&
8#"$$-4#8"DB#"1/1/4M15'",D/D/-="8-$b#4ADB",4#"7³=RN?DB#"1/1/4M15]rÏ08jk##$%%hsªiJ=$%1:YB#4#%b²^``F^e
=
DB#"1B1/4#155-",DB±"1/"A*F$4#$¨]rZK#O/GÐsÑ\BO-$%b^``deRbK",-¨51-4#8wD/=Y9AGÒ$%=AF4#15¤G
=FN/$b
NA=DXN&=#A=)S4#15T$%=G
'=4#8"²8<=1B8<D/b"1BN%$%%N3=13<F"G
D9A$E&=GÑ'#4#%-",O
",&%).",RN/$Hf£10=OL",D/DB="8-bW<cDB#=-4#15;4#N"w=&/O-4#$%4M8h$%",R8-bV/
4#$E1=¨$O/8R8A",
N/4#$4#1/8<4A=1YX¯).13NA=DBG;1L"1/N0%$%4M15HIS
$%",-8-¥$%%-",%5*b"$?).#"$?
DB-O/1/4#1/5
%8-B1/4#xcO$b",w51-4#8G
=FN/$PB",/"TY1CG
=4A,",%NCY:*=Y9$%F4#15><"G
DBA$Hj#$%=b
N$4#51hN84M$4A=1/$)-JG;"N.=1yY9"$4#$=&98",&rO/:<cDX-4MG
1",4#=1HIS/4#$4#1%-=cN/OB8<$4#1:%=?
$%*F$%%GÓ"
YB4#"$S%=)K",-N/$kP<"G
DBA$kO/$%N!&(=k%$%4#15'NBO-4#15;N/A=DBG
1:HKh).P%$4#15
=O"A5=-4A/G'$E=1°"!-"15=&KN/=G;"4#1/$E=&%1CO/$%N¥4M1'D9#"1/1/4#1/5TM4A%-",OHTIJ-=O5=O
LD9",Db/)h)S4##X-&(k%=N=G;"4M1/$/",",L&x:O/1A*¨O/$N>4#1¨#4A%-",O/bB"1/N¨%="$%F$
&=Gp$-O/8-N=G;"4#1B$b"$KR«<}9­»;|,-ÔRHf_1P/.N#=DBG
1:DBB"$%b,)KO/$%NhYX1/8-/G'",?<F"G
D9A$
&=GÕÖk××ØÙwÚÛ7ÜXbÝKÛ(Þß¡àF×áUÞâRÛrãBb9ä.â-åãBbBä.â-åçæ/æØRâb,èÞéåM×êårß-×bë>Ü×ê¯ØRâ%ÜXbëTæXâ-åMÙØb"1/N>ìUåAâØáÞâ-Ûrã
N=G;"4M1/$HUÊ/1wN/$8<-4AYB4M15L=O"A5=-4#/G;$K4#1?DB",DXb:).E4#1/N/4M8",%S?DX=4#1:$Â)S/k/=$%
%$%4#1/5
<F"G
D9A$DB#"*N!"
-=AE&(=kN$4A51¨N84M$4A=1¨G;",F4#15H
l#"1/1/4#1/5h4#$.F1=)S1w%=
YX?l.FlXjSÎKí²³¯8<=G
DBA%E1¨4#1T4A$K$4MG
DBA$%&(=RGq]rZ*F#"1/N/b^``î:eRH
IJcO/$b4#1hK51-"8"$%b4#$1=?<@84A1:U"#5=-4A/G;4M8ÂG
=FNHf¡4#$&=K).=)k/4#A
%=>A=c=!&=L"A5=-4ABG;$?/",L",y<@84A1:L",LA"$%E=1¤-$%%-4#8<%N$O/YX8M"$$%$HIW=¨$%=G

<F%1:b
/4#$4#N"/"$YX1¥DBO/-$ONYc*3DX=$4#1/5!$%¨$%*F1"8<4M8"K$%%-4#8<4#=1/$P%=0wDB#"1/1B4#15¨"$%
$%DX847698",4#=1/$]rZ.*F#"1/NbK^``î:eRH¥?O",D/D/="8R°4#$h8<=G
DBAG;1",*¥%=/4M$H>í"G;4#1/4M15¨
<4#$%4#15YX1/8-BG;",F$bF=1?691/N/$./",/*bB4#1/NNVbcN=
1=<FDBA=4#./&rO/#<FD/$$-4Ac4#¯*;=&
O/1/N/-A*F4#15EDB#"1B1/4#15L&=-G;"M4#$G¨HUIJ=O5*wN=1/=&rO/769M/"1*=Y:F4A=O/$-4A54MN$%*F1:"8<4#8"X<³
$%%-4M8<4A=1/$b"#G;=$%Â1=1=&XGÈ4#$UDB",4#8OB#",-A*PB",-NHf£1;"MG
=$%²"#F=&XJ<4#$%4M15?Y1B8-/G;",-
N=G;"4M1/$b"¥1=1F³=D/4#G'"KDB#"1±8"1b4#1ÉD/R4#1/84ADB#bY¨51/-",%N24#1ÉDX=A*F1=G;4M"4MG
H2ï$4#15
hY1B8-/G;",-c$k&(=?4#1/$DB4A-",4A=1¨NBO-4#15;N/A=DBG
1:b9).y/"yYX1!",YB#P%=T8<=G
O/D)S4#!"
OR4#$%4#8yG
=FN/",h4#$L1=LDB=,",YBA*0<@84A1:bY9OLN=c$L).=).#G;DB4A-4#8"MA*>=1¥"!#",5
8#"$$S=&D9#"1/1/4#1/5"$c$H.IJ/4#$8M"$$J4#1/8MO/N$"#G
=$S"#X=&UP8O-1SDB#"1/1/4M15hYX1/8R/G;",F$H
f_1O/4#4AA*bk"A5=-4A/G'$<cD9A=4A²k$4#G
DB#K$%-O/8<OkO/1/N-#*c4#1/5k$J"$%F$H?O²=1/5=4#15
).=¥4#$h8<=1/8<-1NC)S4A¥691/NB4#15>"&(=-G'"8R/",-"8<%-4A",4#=1É=&J/",¤ð%$4#G
DB#ñ>$%%-O/8<O/b²"1/N
Yc*T&(=RG;"#4A4#1/5hh8#"$$=&DB#"1/1B4#15"$%c$S/",S\U\É).=c$J)#X=1VH
c8<4#=1!54A$J"
$8RG;",4#8Lc4A)v=1!\\.ÌÍ$J$*c$%%Gò",-8-/4#%8<ObB"1/N!F8<4A=1!óy4#1:%=FN/O/8<$
=O.1=",4A=1/"8<=11:4A=1/$.&=KFISiJf_l.yN=G'"4#1/$H²c8<4A=1/$Âîh%=y¢LN$-8<-4AYXSY9"$%kO/-4#$%4#8
%8-B1/4#xcObV$%",-8R"A5=-4A/G>bX"1BN¤D/-O/1/4M15'G
=FN/$bX$D8<4#A*Hc8<4A=1¥d$/=)S$E=)ô
"A5=-4#/G;$E",;<F%1/NN¥%=!N")k4Ajk?nÊN=G;"4#1B$Hc*F$%%GõDX&=-G;"1/8<;4#$L"#OB",%N34#1

ö÷

ø 9ù>ú~¦20ûÀ$7ü`$22

Å

$#ù#ý!þ2Fý

c8<4A=1ËcbKN/G
=1/$%%-",4M15/",'\U\u51-",%$w$%=#O/4A=1/$y<F%G
A*C&"$'4#1±"3#",-5>-"15>=&
DB#"1B1/4#15YX1/8-/G'",N=G'"4#1/$HUf_1¨=-N%='4M##O/$%%R",%=O/J4#1OB4A4A=1/$.=1¨Pc4#1BN=&U$%%-OB8<O
/",¨\U\ÿ8"1<FDBA=4#w$OB88<$$%&rO/#A*b$%8<4#=1Ê"M$%=É54A$T<F"G;DBA$w=&hN=G'"4#1/$)S0
G
=FN>4#$#$$J",D/D/-=D/-4#",%H²\U4#1/"MA*b%='8#",-4#&(*LDX&=-G;"1/8<EN/47X1/8<$JY¡)1\U\¦"1/N
mEFlbc/?$8<4A=1¨N$8<-4#Y$."y1:OBGPYXK=&W<FDX-4#G
1:$Â).LG;"N?4#1w=-NK%=
$%4MG;",%?)S/4#8R=&
E1)v"A5=-4#/G;4#8S%8-/1/4Mx:O$K4#$.G
=$%O/$&O/HE$/=)[8<=1/18<4#=1/$.%=-#",%NT)=-",K
DX=4#1:$4M1h/%<c²)kK*h",DBDBA*b"1/Ny=c4#)¦=Â8<=1/1/8<4A=1/$4#1;c8<4A=1`cH²F8<4A=1¨^
=O#4M1$K=OS8O-1J"1:O/P=&$%",-8RH

 ÊË

U


	 



ÇÉÌÎ ÂË 2Î¤ËfÌ

I=
54AE?"NS"1T=F4A)[=&\U\.ÌÍ$J$%*F$%%Gt",R8-/4A%8<O/b/\U4A5O
^E$=)S$=)[\\.ÌÍ$kG
=$%
&rO/1/N/"G
1:"X%8-B1/4#xcO$J",P",--"15NH

Relaxed GRAPHPLAN
Goal Distance
State
Helpful Actions
Task Specification

Solution / "Fail"



Enforced Hill-climbing

\U4A5O;^ \\.ÌÍ$SYB"$%P$%*F$%%Gt",R8-/4A%8<O/H
IJ/k&rO/1/N/"G;1"O-4M$%4#8%8R/1/4#xcOk4M1\U\C4#$Â-#"cN¨g?ikjklmklnWjoPbF)S/4M8-))S4##9N<³
$8<-4#Y.4#1F8<4A=1îHUIS%8R/1/4#xcO.5$8"#ANh=1*h$%",R8-
$%",%KYc*w«<}ºµ,%­R«-¸L:~({{ ®%­{~»;~(}cb
=OU$%",-8R"#5=-4A/G¨HIJ/4#$4#$W"k&=).",RNh$%",R8-/4#1/5S154#1/b%=YXN$-8<-4AYXNL4#1yc8<4A=1
acHgE4A1
"y$%",%b/M"cN!g?ikjklmklnWjoQ4#1/&(=-G'$ÂE$%",R8-¨)S4#w"5="VNB4#$%"1/8<$%4#G;",%b9"1/NT"N/N/47³
4A=1/"MA*y)S4A'"$%K=&D/=G'4#$4#15h$O/88<$$%=R$Â&=K$",%bc/PF«{ zºR¬F{V|­r~µ,}b%=hYXN$8<-4AYXN
4#1°F8<4A=1C¢cH>ïkDX=13%-G'4#1/",4A=1b1&=-8<NC/4##7³¯8M4#GPY94#15'4#P=O%D9O$P"$%=#O4A=1¥DB#"1b=
DX=$B",S4A/"$J&r"4#ANVH
?1L%=DP=&F²YB"$Â",-8-B4A%8<O.$=)k1L4#1L\U4A5O-J^,b)./"4#1:%5-",%Nh"J&)3=D/4#G;4#",4A=1/$



%='8<=DXL)S4#¨$%DX84#"8"$%$JB",S",=$%PNBO-4#15%$%4#1/5



f£&L"3D9#"1/1/4#1/50"$28<=1"4M1/$$",%$&=G

)S/4#8R¦5="k4#$O/1"8R/",YBAC]rN"N21BN/$b

N/<691N¨4#1>c8<4A=1>acHçeRbB1T1&=-8<N>/4#M7³¯8#4#GhYB4#15L8"1T&r"4#X%=y691BNw"
$=#O4A=1HUf_1w/",



8"$b9";8<=G
D9A%POR4#$%4#8$%",-8R>154#1/L4#$4#1:=N>%='$%=#LE"$%T&=Gt$8<-",8RH
f_1yKD/$1/8<K=&B5="=-N/-4#15$b,1&=-8<N
/4M#7³¯8#4#GhYB4#1/5K$=G
4#G
$U)K"$%%$Â"?A=U=&94#G

"8R/4AF4#155="#$PB",1N°%=!YXw8",N¥&=y#",%h=1VH>I)=%8-/1B4#x:O/$P%*F4#15!%="=4MN



B4#$J",L4#1:%5-",%N




¶k¸¸«-¸¤µ|,{¸«<{#«r~µ,}/bK4#1:%=cNBO/8<NÉ4#12c8<4A=12¢cHçcbK8O$
=O/;Y/-"1/8R$y)S->$%=G

5="/"$J",D/D9",1#*YX1>"8R/4AN>%=c=;",-#*H
IST:µ|,{J|c«<}9¸|w%8R/1/4#xcOb"N/",D/%NC&=G



)=-3Y:*

"1/"0E=c/A¨]_^``eRbÂ&N/$

/E5="#$K%=
EDB#"1B1.4M1w"1T=RNJN%-G;4M1NT"$"yD/<³D/=F8<$$E]c8<4A=1¢cHçcHçeRH

öö

Å

 
U

  

gËÍË¯  Í

 

 Ë 

2f$ÆÈÇi¤¦

Ê

\=S4M1%=FN/O/84M15\U\.ÌÍ$YB"$-4#8?%8-/1B4#x:O/$bF)L8<=1/$-4#NJ$4#G;DBALFIJiJf_l.'DBM"1/1/4#15h"$%F$b/"$).
4#1:%=FN/O/8<NTYc*w\U4A$k"1/N¨ok4M#$$%=13]_^`dc^eRHJ?OJ1=",4#=1/$S",h"$&(=MA=)S$H

,+

å  !"u$#&%(')½ *

¶Õ$%",%

.-

Q~MP|k²}/~r¯«P«.µ%ºL{7µ-~­-|,{U|µ,»

h"$-$O/G
E/",k"#X=DX-",%=k$8RG;","",E5=O/1/N/Nb/4H HAb/).E=1/A*w"AT",Y=O/P|­r~µ,}H

å  !"u0/1%(')½v!23,45"u *

76

¶ôFIJiJf_l."8<4A=1

68

96 ;:

!~MP|wrR~çz9{#«

96 ;: 96

]Mz9%«] e |¸¸c] e ¸«<{M] e%e

96

<
GB -IH

=6> 96
.-A@
JHKML

F«%«z9%«] ey|,«
F«DB8<=1/N/4A4#=1/$
µ_º

>

WF«h«R¬F{7.µ%ºh|Rzz9{ ,~(}c>|'R~}:{#«P¼

CBED

Vµ?|,}!|µ,»

L

.> <

R}¥F«J²RS­R|«

Fj

]

%e

96 cb

96

|¸¸] e%e ?¸«{#] e

¬F}9¸«rÂ}«¸

6
< ON

«S<|, yc| h"8-/4#$


96 edf+
<

z9«] e
µ«<

96 gdh+i>

F«<«?z9%«] e

96

¤|,}9¸>¸«{7] eh~(hF«LNA%

C|¸¸] e

%¹K¼3|­r~µ,}µw|'<|¯«~(L¸:«r²}«-¸¨|²ºµ,{({Aµ

PRQTSTUWVYX Z+:T[96\ ]8_^ Z+a`
]

?6
96 F> <

K|¸¸:] eh~(hF«?"NBN!#4#$yµ_º

#4#$µ_ºS«E|­r~µ,} Â«|­<w-«~(}c
|h«Uµ_º?|µ,»

~M«

7+A-EH

JF«|­r~rµ,}°~M<|~r¸!µ-«L",D/DB#4M8",YBAT~(}

!k

W«y«R¬F{7kµ_º

|Rzz{  ,~}:>|'« ¬B«<}9­«µ_ºL»;µ,«yc|,}¥µ,}X«y|­r~µ,}µ¨|'|¯«h~(E%«-­¬F-~ «<{ T¸:«r²}«-¸¨|

PRQTSTUWVYX Z+J:T[96 ( :OlOlOl":m6onp\ ]8 PRQ"SqUrVYX PRQ"SqUrV!X Z+:T[96 ( :OlOlOlT:m6ons ( \ ;:T[96"n\ ;l
]

%e

å  !"uftu%wv ¥ 2#wyx~3qz *
;> g
«.µ%ºh|­r~µ,} .|,}9¸

]

]

%e

%e

|{}8 Z~::F
I


¶ÕDBM"1/1/4#15"$%



¯«~(}B~r~|,{<|¯« |,}¸

È]

eP~M|wr~Íz{A«

.-

¯«?µ|,{  T|,%««hµ%ºP|µ,»

<

R~

F«<«

q~Mh«

q

?OJ/O-4#$%4M8G;=cN¨4M$YB"$%N¨=13%«{7| c«¸hz{7|,}B}/~(}cT|-ÔRbB)k/4#8-¨",-PN<691N¨"$J&(=##=)S$H

å  !"u%w ¤¥    fv ¥ 2#'rwyx,3qz * Yk
|{ M{
M{W8 Z~9::F F> <
~  8$  Q 96 ;: 96 ;:F = 96 ;:

I{8 Z~:=:F .-H

´K~ ,«}C|
z9{A|,}/}/~}:0|-Ô

#"",4A=1

.µ_º

Ó~(L¸:«r²}«-¸¨|

:]

u]

] e |¸¸c] e

e

e

~r

t]

Ue

WF«P<³

96 ;: 96 eDE~,

]Mz9«] e |¸¸F] e ¸«{M] e%e

f_1).=-N/$b=1y=Y/"4#1/$y#"FN0DB#"1/1B4#15'"$!Yc*4A51=R4#15'/yN/A%
#4#$%$=&"M"8<4A=1B$H
lÂM"1/$",P$4MG
DBA?$%xcO1/8<$J=&"8<4A=1B$J4#1T=OJ&-"G
).=H

å !"u01%wv
[96 ( :OlOlOlq:m6on\
mj

¥ 2

* Yk
~

{8 Z~::F .mj 8
T> - T-> < I&
 d RP Q"SqUrVYX =:m
O {¡> ¢
k
q a{ M{,-

´K~ ,«}|>z9{A|,}/}/~}:É|RÔ

Lµ_ºL|­r~µ,}E~}

k

]

Ñc|²<µ,{ ,«<?«L|RÔ ²~ «

|­r~rµ,}0« ¬B«}9­R«h~(P­-|,{{A«-¸¨|h#"FN¨DB#"1°µ

Fºµ,

e v¶òDB#"1[~(!|« ¬/«}9­R«

~r­

Â~ Õ~r²µ,{ «PF«h«<{A| :|r~rµ}

q£

ö

]

µ_º

hekcµ,{A¸ S¶}

ø 9ù>ú~¦20ûÀ$7ü`$22

Ç ¨©&¨ª)Ç 
¤ ¥§¦ 7

f©«

ÍgÊøÍ

²

Å

$#ù#ý!þ2Fý

7¬QÊË ¢ÍË nÌ

B]Ì ÊË Î





f_1
/4#$$%8<4#=1b).S4#1:%=cNBO/8<KJYB"$%J/O-4#$%4M8.G;=cN
OB$%N;4#1
\U\.Hf£²4#$²N-4#NyY:*y",D/DBA*F4#15
g?ikjklmklnWjo%=P#"FN;D9#"1/1/4#1/5k"$%F$H²IJ/J$O/#4#15?5="9NB4#$%"1/8<J$4#G;",%$.N=P1=bF#4A
mEFlJÌÍ$E$4#G;",%$bA*0=13"1¥4M1/NDX1/N1/8<y"$$OBG
D/4A=1H
D/=;/",P/;O-4#$4#8y8<=Gy³
DBO",4#=1¨4#$KDX=A*c1/=G;4#"bc54AP$%=G;L1=4A=1/$K=1>/=)QN/4M$%"1/8<E$%4#G'",%$S8"1¨YX?D/S8"O4#=O/$b
"1/N>N/$8<-4AYXE=)QLG
=FN>8"1>YXL4#G;DBAG
1:%NT<@84A1:A*H
Î.=1B$4#N?;O/-4#$%4#8hG
=FN¤/",P4#$?O/$N4#1¤m?Flÿ]rZ=1/hstg<1b^``eRHgE4A13"

­{8 Z~:=:F

DB#"1B1/4#15"$%

t]

+

UeRbm?lv$%4#G;",%$?&=L"8R3$%",%

{  8 Z~  :;+:F
¯+ ®
° A±³²

$%",-8RT?$%=#O4A=1A15w=&V"$%
"8-B4A$S/L5="#$$%",4#15'=OJ&=G

]

Ë/",L4M$k-"8-N34M10"w&=)K",-N

eRbB4H HAb:?A15w=&W"h#"FNwDB#"1'/",

,{® °

.HKjk$k8<=G
DBO4M15
L=D/4MG;"V$%=#O/4A=1>A15>%=

)S/4M8-
).=O/#NG;",k"1"N/G;4#$$-4AYBAOR4#$%4#8

4M$

B³¯/",-N0]rZ.*c#"1BNb9^``î:eRbFm?l¥$%4MG;",%

4#$"
-=O5>",D/D/-=4#G;",4A=1TYB"$N¨=1!8<=G
D9O4#15yL&=#A=)S4#15y).4A5:"#O/$H

BED|+
³¾ ¿ µÀÂÁFÃÄGÅ ÆÃ

´ Qqµ¶¸·X ® B i8º¼ ¹» µ
»½ Ë


4A&

Á pÇÈ Ã

4A&

] Ve

"N/N + 0

=)S4M$%

Á ´ Qqµ¶¸·X ®  É)8 µÊ
] Xe

D/ + 0

^

]_^e

mEFl["$$-O/G
$E&r"8<$E%=>YX
"8-/4#N34#1/NDX1/N/1A*>4M1/;$%1/$%
/",E/
)4A5:E=&K"¨$%
=&V&r"8<$

°

"1T"8<4A=1ÌÍ$KDB8<=1/N/4A4#=1/$

$%",%ÌÍ$O-4M$%4#8k$%4#G;",%P4M$

°

4#$²$%4#G;",%NT"$.hR¬F»Q=&V/4#1BN/4AF4#N/O/"c).4A5$H²IJ

· Z+ ³8 ´ Qqµ¶¸·X ®  ]8Ì Ã Î ´ Qqµ¶¸·X ® ¶
Í
] Âe

] e

]

e

]e

j$$O/G'4#15E&r"8<$%=hYXS"8-/4#Nw4M1/NDX1/N1:A*b/4#$ÂO-4#$4#84A51=$ÂDX=$4A4AS4M1%-"8<4#=1/$
/",8"1T=F88OHÎ.=1/$-4#N.?&(=##=)S4#1/5h$=-<"G
DBADB#"1B1/4#15L"$9b)S/k/?4M1/4A4#"9$%",%

oÏ ( :;Ï - 

4#$KG
DB¯*bB/E5="#$S",

O

bB"1BNTP",PE&(=MA=)S4M15yP"8<4A=1B$

1/"G


2 Ï
u2 Ï
u 2 
u

8
(

-

:
):
ÐT¡:ÑoÏ ( :
ÐT¡:ÑoÏ - :
¸: TI:
|
]D/-

8
8

"N/N

NMe

]



]

e

e




]

mEFlJÌÍ$k).4A5,"#Oh8<=G;DBO",4A=10$OBA$S4#1

e

/"F4#15)4A5:=1b"1/N!"8R05="B"F4#15

).4A5¯).=HLj$$O/G;4M15'&r"8<$%=wYX"8-/4AN4M1/NDX1/N1:A*b/yN/4#$"1/8<h=&Â4M1/4A4#"$%",%
%=">5="Â$%",%w4#$E&=;$4#G;",%N°%=>&(=O/HTYcF4A=O/$A*bV/=).bU;"$%34#$E$=A",Y9A;4#1
=1/A*P$%DB$b/"$

W2 Ï
u

( "1/N

2 Ï
u



- $B",EED/8<=1BN/4A4A=1


Hf_1¨=-N/%=;",h"88<=O/1:S=&

Z~9:;+:F

$O/8RDX=$4A4A
4#1:%-"8<4A=1B$bV=OP4MN"T4#$?%=!$%",yg?iSjlÂmlÂnjkoÿ=1;"$c$']

eRbU"1/N

<F%-"8<h"1¥<cDBM4#84AE$%=#O4#=1bW4H HAbW">#"FNDB#"1HE1'8"13/13O/$%
/4M$EDB#"1¤&=hO/-4#$%4#8



,"#O/",4A=1H
')S4##$%'4#1¤/;1<ch$%8<4A=1/",P/4#$E",D/D/-="8-34#$?&"$4AY9A Pg?iSjlÂmlÂnjko
8"1>YX?D/=1>%='$=AL#"FN¨"$%F$S4M1TD=#*c1=G'4#"B4MG
H

ÂÒ#}v

 uÓÑvx23Ô1u2v ¥    0x,3qz3

¥ 2 #w

nV.O/$²<"G;4#1/S=)[g?ikjklmklnWjoYB"$)S1'4#Â4#$²$%",-%N'=1w"LDBM"1/1/4#15?"$%
B",N=c$
1=8<=1"4#1É"1:*3NA%T#4#$%$HwTY/R4A<§B*0c4#)ÿYB"$4#8'1=",4A=1/$=&¨g?iSjlÂmlÂnjko
"A5=-4#/Gq]rZK#O/Gòsô\BO-$%bW^``deRH

"Õ

ö

Å

2f$ÆÈÇi¤¦

O

j©D9#"1/1/4#1/5¨5-",DBC4#$h"0N/4A-8<%Nb#"*NÉ5R",DB¥B",8<=1:"4#1/$¯).=¤c4M1/N/$L=&k1=cN/$ Eº<|­
}9µ¸:«Â"1/N!|­r~µ,}>}9µ¸:«RHIJS#"*-$."A%-1/",%kY¡)1&r"8<"1/N"8<4A=1M"*-$b:)SS=1S&r"8<
"1/N¤"8<4A=13M"*E%=5G;",;OD"¤r~(»'«;¯«£z9HPf_10y6B-$%4#G

$%%DWbV1:O/GhYXEFb);/"
&"8<y#"*y8<=$D=1BN/4#15¨%=4#1B4A4#"$%",%T"1/N3/"8<4A=1C#"*
8<=-$%DX=1/N/4#15¨%=0"#

µ

"8<4A=1/$J/",J",L",D/DBM4#8",YBA?4#1wL4#1/4#4#"9$",%HÂf_1T"8-!$-OYB$%xcO1:.4MG
E$%%D

µ

#"*J=&"#&r"8<$K/",J8"1TDX=$$4AY9A*yYEG;"N/%ROE4#1
/",S",-LDX=$$4AYB#*;",D/DB#4#8",Y9A?54A1¨=$%P&"8<$H

b/).L/"L

4MG
E$%%DB$b/"1/NwE#"*J=&"M"8<4#=1/$

?1/>8<-O/84#"K/4M15¤/",g?iSjlÂmlÂnjkoÑN=c$y)S1ÉY9O/4##N/4M15!¨D9#"1/1/4#1/5!5-",DB24#$y

F
6

96:m6 

4#1&1/8<
=&?»y¬r¬/|,{K« ­{¬cR~µ,}!-#",4A=1/$HjÿD9"4AL=&"8<4A=1/$w]

­6"

GOO/"#A*<F8MO/$4AbB4#& 
"1/N

U~}B¯«<º«<«<b94H HAbB4A&=1P"8<4A=10NA%$k"
D/8<=1/NB4A4A=1T=k"1"N/N

Br:FBr
¡B
96¸:m6o
6"

<X8<=&V=HÂjvD9"4A=&W&"8<$L]
4A&."8-C"8<4A=1C",hA

,Br

"8-B4A$

µ×Ê

e?",h4#G
'$%%DC>4#$LG'",N

#e²","4#G
?$%%D

^
/",h"8R/4A$

MH3jòDB"4A=&k"8<4A=1B$T]

×µ Ö
µIÖ

y4#$.G;",N¨GOO/"MA*y<F8#OB$4Ab

É4#$L<8#O/$-4A
=&K"8-É"8<4A=1¥",A

Meh",y"04#G;w$%%D

µGÊ

^;/",

¤4#$yG;",NÉGOO/"##*<F8#OB$4Ab

6

4A&T"8<4A=1/$y4#1:%&bU=
4A&*¥/"3­-µ,»kz«r~(}:3}«-«-¸Rb4H HAb4#&J$%=G
wD/8<=1/N/4#4A=13=&
<8#O/$4Ak=&W$%=G
D/8<=1BN/4A4A=1
=&
"1:*w<8#O/$-4A=1T#",4A=1B$",S"#H

vWvxu2fuW3T!"uh#ÙØ M{A8 Z~Y::F
Ø =Û <
vWvxuguÔFÜ
TN
Ý
L
!k
TN
Aµ Þ
«

¹

¶

4#$

H²IJkDB#"1/1B4#15E5-",DB=&W"P#"FN"$'N=c$1=K8<=1:"4#1

q

Ò]

JHKML

m

e>R«>|«<{A| c«¸3¼

«{Y> ×K ×Ú

%¹.¼|-Ô ±¼|,¯«-¸°µ}

'´

Yk q-

~{({W}9µ.»;|,-Ô|}/ EzF|~(yµ_º²º|­hµ,y|­r~µ,}h|,L»¬r¬/|,{{  >« :­{¬cR~ ,«

J¶¹

L®

IJ/Jl²=DX=$4A4#=1
4#$"$4##*hD/-=1;Yc*y4#1/N/O/8<4#=1y=.JND/
=&XSDB#"1/1/4M15k5R",DBH

|«­R|« wr~(»'«;¯«£zFH'?1/#*4#1:%&-4#15T"8<4A=1/$L",-;G;",N3GOO/"U<8#O/$4#;",E4#G


$%%D!FH.jk$JL",P1/=;NA%L<X8<$b91/=
DB"4AJ=&U"8<4A=1/$k4#1%-&($H
R}9¸¬­r~ «'­R|« ;r~»'«y<¯«¡z

r~(»'«
¯«¡z

µcß

^,HlP4#1/N/OB8<4A=1!:*:DX=$-4#$bX
&r"8<$L",

1=?<8#O/$4A
"$?4#?"8R/4A-$?=1/
4#G
y$%%D3""N3",
1=H\=GÑ/4M$4#k&=#A=)S$/",L1=

à

DB"4A=&"8<4A=1B$J/"$J8<=G
DX4#1/5;1N/$HÂIS*N=1=J4#1:%&(-E4AH

1¤$%",%N0=1¤"wDB#"1/1/4M15
"$%bVgEiSjlÂmlÂnWjo<F%1/N/$DB#"1B1/4#15
5-",D90M"*?Y:*
#"*.O/1:4#9"L&r"8<.#"*.4M$²"8RNw/",8<=1:"4#1/$."#/5="&r"8<$bF"1/N'4#1')S/4#8R'1=P¯).=5="9&r"8<$
",
G;",N0<8#O/$4#H (

F",4#15w&(-=G+B",?M"*bV"w8OR$4AYB"8c).",RN0$",-8-"A5=R4A/GÑ4#$

4#1:=NHÂI=y691/N¨"yDBM"1T&(=J";$=&&r"8<$S",SM"*
",?#"*

µrÊ

µcÊ

µiÖ

Fb/4#1/4A4M"#4AL$%=&U$%A8<%N!"8<4#=1/$

^L%=wPG
DB¯*>$%HSIS1b/&=k"8R0&"8<bX8<=1/$4#N/k"#V"8R/4AF4#15w"8<4A=1/$",k#"*

^?=1?",&(%Sk=/J"1/NT$%A8<k6B-$%.=1?/",J4#$.1=K<8#O/$4A=&"1:*"8<4#=1T/",/"$

"A"N/*0YX1°$%A8<%NH¨f£&K'<4#$%$h$O/8R¥"1C"8<4A=1bUD/=F8<N3)S4#1/<ch&"8<H¨f£&1=b

YB"8-:%-"8-
%=LJ#"$&"8<Â"1BN
%*%=P"8-/4#S4A)S4A
"ENB47-1²"8<4A=1VHf£&X"1;"8-/4#c4#1/5L"8<4A=1
/"$YX1$A8<%N0&(=?"8-¤&r"8<b108<=#A8<?D/8<=1/NB4A4A=1/$S=&Â"#$%y"8<4A=1/$%=¨G;",
OD¨"
1)[$%=&&r"8<$=1E4#G
E$%%D¨",R#4AHFOB88<NT)S1T&r"8<J#"*S

°

L4#1/4A4M"9$%",%

°

4#$

"8RNbF)S?1=y"8-/4#c4#1/5h"8<4A=1/$K1Nw%=yYXk$%#8<%NH?1#"FN"$c$b1=YB"8-:%-"8-c4M15
=F88O-$J4#1!gEiSjlÂmlÂnWjohÌÍ$S$%",-8R!"A5=R4A/G¨H

vWvxu2fuW3T!"uÙ/hØ M{A8 Z~Y::F
Ø =Û < .k
vWvxuguÔFÜ
«

¹

¶

Ò]

q

JHKML

e>R«>|«<{A| c«¸3¼

~{({W}« «<-|­<Ô,r_|­Ô

-

«{Y> ×K ×Ú

%¹.¼|-Ô ±¼|,¯«-¸°µ}

'´

J¶¹

gB

ZK"8c%-"8F4#15T=1/#*=F88O-$k4A&"#V"8-B4A-$k&(=";&r"8<

L®

",P<F8#OB$4AL=&²$%=G;P"A"N*

$%A8<%N0"8<4A=1H4Al²=DX=$4A4#=1^,b9).PF1=)p/",k1/='<8#O/$4A=1B$K<F4#$b9"1/N!:O/$bB/",k/4#$

á(âã!ä¸åoæeçè"éÐêäëFéìíîëðïOñòÂéðë;å?óñJòZñwëFéÐê"ñwô
õTìZêoñå=ìZêoñìë;çö÷îçÂøTòZæFù(ñðå=ìZæeóñèoåoçæ;íúù(ëFóoíúñAûýüríúèoþ1ÿoèTòZç9ìwõáÐâ



ö

ø 9ù>ú~¦20ûÀ$7ü`$22

×B

N=c$k1/=/",DBD1VHSjkM$%=b4#&

µcÊ

^P$OD/DX=4#1/54AH

µ

34#$k4#1!5R",DBM"*

Å

$#ù#ý!þ2Fý

bX1y4#$S",EA"$%=1y"8-/4#?4M1!#"*

à

/4#Ah
",YX=
",5O/G
1:",4A=14#$$OF@w84A1&=?$-=)S4M15lÂ=DX=$4A4A=10cbV4AkN=c$?1=?%#
O/$.GhOB8-T",YX=O)k/",.4M$Â"8<O/"##*;5=4#15=1w)S1=1$",$Jg?iSjlÂmlÂnjkov=1T"h"$%')k4A=O
NA%#4#$%$HC/",'/",D/DX1/$
4M$y/4#$H2g?4A12¨"$%±4#$
$%=#",YB#bÂ>D9#"1/1/4#1/5!5-",DB¦5$
<F%1/NNCO/14M²$%=G
w&"8<y#"*4#$P"8-/N°B",8<=1:"4#1/$"#²/'5="#$HIJ13/8O/-$4A
$%",-8Rh$",$WYc*E$%A8<4#1/5k"8-B4A-$&(=Â5="#$",WB4#$VAHUIJU69-$%W",%%G
DB$OB88<N/$b"1/N
1)p5="#$?",h$%OD!=1/h4#G;P$%%D0",-#4AHjk5"4#1bL69-$%S$%#8<4A=1!=&²"8R/4A-$$O/88<NB$b
"1/N$%=¨&=bO/14M/;4#1/4A4#"$%",%'4M$?"8-NVH;IJ:OB$bV$%",-8RDX&(=RG;$=1/A*"¨$-4#15A
$%).D
=h
5-",DBVbW$%",4#1/5¨&(=GÑ/
%=D¥#"*h5=4#15>N=)S1¤%=>;4M1/4A4#"#"*b"1/N8<=##8<$P"
#"FNDB#"1=1w4#$Â)K"*Hf£1DB",4#8OB#",b/kD/-=c8<N/O/S",$K=1/#*
D=#*c1=G'4#"/4#G;k4#1?$4A
=&UE"$%H

xû

#0Ø {8 Z~9:=:F
V- H
V >e ~     -

 u2v  }

«

ô]

{Aµ,}::«<|¸¸!{ ~(Sµ%º'|,}/ !|­r~rµ,}C~(

zFµ,{ ,}9µ,»y~|,{U~(}

vWvxuguÔFÜ

k

T

JHKML
×K ×Ú Ø =Û <

UeP-«h|
µ,{ ,|<{#«P%«{7| :«¸;¼
WF«}Ë´

|,}9¸

J¶¹

¹

ZKO/4##NB4#15KDB#"1B1/4#155-",D94M$DX=A*F1=G;4M"4#1

=&V4#G;k$%%DB$.YBOB4#AS]rZK#O/G

T> <

%¹K¼¤|,-Ô

¶

{

~({{F²}9¸0|Tµ,{ ¬r~µ,}Éµ

V W ~   W 
b

F«%«hF«P{#«<}:Tµ_ºL«

b

X

"1/N

X
R ~Z

b,)S

4#$K1:OBGPYX

sQ\BO-$%bX^``deRHok=)Lb4#1=OK8"$%k%="X1cO/GhY


	

4#$h"1¥OD/DXPM4#G;4AE%=1cO/GhYP=&4#G
'$%%D9$H>IJ/4#$P4#$

~}°r~»'«

=&W"8<4#=1/$

O/$%LYX8"O/$",&%h/4M$L1:OBGPYXP=&

4#G
k$%%DB$./"$ÂYX1'YBO/4#Ab"MB"8<4A=1/$.",D/DX",",K$%=G
#"*K4#1'S5-",D9H?)S4#$b4#$
"
#"*

µ

µcÊ

)S/L1=;1)Q"8<4#=1>8<=G
$S4M1b4H HAbB"8<4A=1>M"*

a ~

/"G;"N';D/=F8<$$h$%%=D¥-4#5L")."*HF4#G;4#M",-A*b"8<4A=1¥M"*

 ~Z Ê
V  ~   « 

"8<4A=13M"*
4#1

b

F"1/N

µ

^E4#$J4#N1:4#8"%='"8<4A=1#"*

j$/"$4#$K$%=A,",YBAbc/4#$.4#G
D9#4A$²B",K"MB5="#$",-?8<=1:"4#1N¨4M1'&r"8<J#"*

µ

H

bc)k/4#8-).=O/#N

).=O/#N3Y;4MN14M8"%=

^,bW4MG
DBA*F4#15;%RG;4#1/",4A=1VHPIJy5-",DB¤Y9O/4##N/4M15
DB/"$%
4#$?cO/$?DX=A*F1=G;4#"

H



Î.=1B8<-1/4#15yDB#"1<c%R"8<4A=1¤DB/"$% SÊ4A¤lÂ=DX=$4A4A=10cbV$%",-8-¤%R"-$%$Lh5R",DB

&=Gt%=D0%=YX=%%=G¨b8<=#A8<4#1/5"'$S=&²"8-B4Ac4M15'"8<4A=1/$","8-¤#"*HkcA8<4#15"8-/4AR$

 V  ~ ß  ? ;

&="$%Â=&&r"8<$4M$

;]

V  ~ ß  

e Ujv$%=&X&r"8<$K/"$Â",KG
=$%.$4A

bG;"4#G;"

1cO/GPYXh=&SN/4#$%4M1/8<L&r"8<$4M13w5-",DBH0jk1C"8-B4Ac4M15"8<4A=1É8"1CYX'&=O/1/N¥%="8RÉ&"8<y4#1

 m ~

8<=1/$%"1:.4#G
SO/$-4#15LkDB#"1/1B4#15?5-",DBHj$²1:OBGPYXÂ=&VM"*-$%=PYXSA=c=Nw",.4#$
$%",-8R!4#$KDX=A*F1=G;4M"4M1TPN$4#NTDB",-"G
%R$H

Z~9:;+:F

c",-4#15'g?iSjlÂmlÂnjkop=1¨"y$%=A,",YBAE$%",-8R>$%",%E"$%]
4#G
b)S4APIJ=Gÿ^

°

,[ / :OlOlOl":s ( \
¿
Fj

"JM"cNL$=#O4A=1

$%A8<%NC4#1¥DB",-"#A",4#G
$%%D

µ

bU"1BN

 °

e*c4##N/$

Rb,)S"8R

;]

à

eRb

4M1'DX=A*F1=G;4#"

4#$/$%V=&/"8<4#=1/$

4M$E1cO/GhYXP=&
69-$%L&r"8<M"*y8<=1"4#1B4#15

"#X5="#$Hj$)h",P4#1:%$%%N>4M1>"1¨$%4#G'",4A=1¨=&.« ¬B«<}Br~|,{$%=#O/4A=1¨A15b).PN<61?=O
OR4#$%4#8"$J&=#A=)S$H

· Z+ ³8
] ²e

Ì
F
 / Å  Å Ms (

]óe

IJ/¨$%4#G;",4A=1É,"#O$;=Y/"4#1NÉ/4M$y)."*É",-b.=1¦=O
%$%4#15<"G
DB#$b.OB$O/"#A*°A=).
/"13mEFlSÌÍ$?$%4#G;",%$']ríx:OB",4A=1/$;^
"1/N3eRb"$E<F%-"8<4#15!"TD9#"10",$h"88<=O/1:L=&.DX=$4A4A
4#1:%-"8<4A=1/$hYX¯).1C&"8<$H3Î.=1/$-4#Nh",5"4M1¥T$=-P<"G
DBA&(=G

oÏ ( :;Ï - 

$%8<4A=1Vb/G
D/¡*T4M1/4A4#"$%",%bB¡)=5="#$

q

bB"1/N¨/P"8<4A=1/$



ö

wYX54#1/1/4#1/5w=&S/4#$

Å

2f$ÆÈÇi¤¦

:
):
ÐT¡:ÑoÏ ( :
ÐT¡:ÑoÏ - :
¸: TI:

1/"G


2 Ï
u2 Ï
u 2 
u

]D/-

8
(

8

-

8

"N/N

NMe

]



]

e

e




]

e

c",-4#15g?ikjklmklnWjoÿ=1¥'4#1B4A4#"U$%",%b;5="#$h",'8<=1:"4#1N¥4M1&"8<h#"*h¯).=b

2 Ï

2 Ï

8"O/$4M15h$%#8<4A=1w=& u
( "1/N u
#"*=1/b)k/4#8-4#$"8-/4AN¤)k4A


2 Ï o\

- 4#1"8<4#=1wM"*=1H²IJB4#$²*F4A#N/$?1)Ê5=" Õ",K&r"8<

H?IJh$O/#4#15;DBM"1!4#$
Rb
u
u
u
( b u
-

W2 

¡[Ð W2 ¯:. 2 Ï

54AF4#15
O/$/L8<=8<S5="N/4#$%"1B8<E$%4#G;",%L/bB"$SNB4#$%4#1/8<.&=GtmEFlJÌÍ$$4#G;",%L&=OH

ÂÒ / 'gu ¥  "u

 I2"'}"!"u

 rw 

yO/$%g?ikjklmklnWjoPÌÍ$?O/-4#$%4#8$%4MG;",%$bXíÂxcO/",4A=1ócbX4#1>"'5N*>$%%R",%5*b%='YXP4#1:%=,³
N/O/8<N'4#1'c8<4A=1'acH#^,bc/",ÂN/=:$²1/=²",k4A$ÂN84#$4A=1B$UYB"8y=1/8<4A²/"$²G;"N/G¨H\=GÈ=O
<FDR4A1/8<²)S4#E-O/1/1B4#15./4#$W$%-",%5*L=1L=O/W%$%4#1/5J<F"G;DBA$b/4#$W)=F$VYX$%W)S1LN/4M$%"1/8<
$%4#G'",%$S",L8"O4#=O/$b/4H HAbB"$SA=)Q"$JD=$-$4AYBAHUj$J"A"N*T$"4#NVbF"1°µRzr~»
|{/$%x:O/14#"W$%=#OF³
4A=1>8"1!1=JYXE$%*c1:$4#N¨<@84A1:A*H²/",J=1'­R|,}N/=;4#$J",D/DB#*'$%=G
L%8R/1/4#xcO$%=G;",
g?ikjklmklnWjoË-O-1
"$²$/=²$%=#O4#=1/$"$²DX=$$4#YBAHWZ.A=)Lb).SN$8<R4AYXK$=G
)."*c$Â=&N=4#15
/",H
IJ6BR$%k%8R/1/4#xcO
4#$E"TYBOB4#A_³¯4#1!&(",O-
=&g?ikjklmklnWjoÈ"1/N¤1B$O$E"¨G;4M1/4#G;"#4#¯*
8<-4A%R4A=1T&(=SL#"FN¨DBM"1HIJE¯).='=/J%8-/1B4#x:O/$J",PO/-4#$%4#8=D/4MG;4A",4A=1/$H

#%$'&($)+*-,.,/10325476'890;:

|Û.<=<

IJE=R4A54#1/"Vg?ikjklmklnWjoÕ"#5=-4A/G©G;",$S<c%1B$4APO/$E=&$%=,³¯8"MAN

Â¹$H²IJ/$%L",

N/O/G'GP*¨"8<4A=1/$k/",?$4#G
D9A*DB=DB",5",%&"8<$&=Gò=1/P&r"8<#"*?%=1<FHk\=?"8-0&r"8<

B

É/",h5$y4#1/$%%N¥4#1%=0$%=G
&"8<#"*b²"o?P?lp8<=-$%DX=1/N/4#1/5w%=0/",h&"8<4#$P4#1B$%%N
4#1:%=¨;"8<4A=13M"*h",E/;$"G
;4#G;y$%DVH
IJ/4#$EoEL?l[B"$E1=¨=L<X8<P/"1"NBN/4#15

B

7B
µcÊ

bX"1/N1/==?D/-8<=1/N/4A4A=1!/"1

>	

8<=1/$4MNN

Hk1D-&(=-G'4#15;YB"8-:)K",-N¤$%",-8RbXyo?LElÂ$?",

O/$%SM4AP"1:*w=/"8R/4AbX4H HAbB=1/L)."*>=&G;",F4#15'"'&"8<k%-OP",k4#G


%='$4MG
DBA*;D04A%-OE&=G©4MG


^,H

4#$

MÛ-<=<

f_1ygEiSjlÂmlÂnWjohb.4#G
DB#G
1",4#=1PO/$%$"$U"kN/&"O/#V

gB

h4#$";oEL?l¦DB$%1:&(=S"8R/4AF4#15;"
&r"8<

µ³Ö

Â¹KR®²-<OR4#$%4#8,b4H HAb4#&

bF1!/4#$oEL?lË4#$8<=1/$4#N/Nw6B-$%bYX&=

eB

²D9#"1/1V%R4A$V$%A8<4M15J=ð_"#ñS"8<4#=1/$V/","8-/4#

HE1L#"FNE"$%F$b,ÂoEL?l$_³

6B-$JO-4#$4#8S1B$O$J"
G'4#1/4#G;"M4A¯*'8<R4A%-4A=1T&=JL-O-1NTDBM"1¨"$J&=#A=)k$H

q JHKML
"> <
vWvxu2fuW3T!"u0tCØ Z~Y::F
.Û <=<
o>
×K iÚ Ø gÛ
<
q 6
vWvxuguÔFÜ
 6D@ ­6D@B A
6
GC
B
C
°
,B

C
|6
Fµ E C =B
«¨]

eÉ-«É|Ê«<{A| :«-¸Ê¼

Â¹.R®²Rr%|¯«¯  ÂF«z{7|,}0c|k´

J¶k¹

k¹

%¹K¼È|-Ô

¶

Õ«r¬FR}/

k q- ?

~­<Q~(<µ,{ |:<{#«

W~(}:«

~{({­-µ}B|,~}¤«|­<T|­r~µ,}|»;µ<

µ,}9­«

nVWOB$V"$$O/G;²²=D/DX=$4#%b4H HAb=1Â"8<4A=1

/",gEiSjlÂmlÂnWjop691/N/$Hh/"
ok=)Lb/w"8<4A=1

"1/N

!B"$PYX1¥$A8<%NÉ",#"*

[ / O: lOlOlT:s ( \
µ :DC
Fµ E C
B
GC ß

K=c88O/-$¯)k4#8<4#1L²DB#"1
L&(=k$%=G
P#"*-$

')k4A

0%=0"8R/4A¨$%=G
&"8<

/H

±",y#"*

^,H

j$/?"#5=-4A/Gª4#$KO/$4#1/5P?o?P?lÂ$_³69-$%$%-",%5*b//4#$K4#G;DB#4A$B",./E4#$1/=oEL?lÉ&=
&r"8<

°8<=1:"4#1N¤4#10"8<4A=1¤#"*

$%A8<%N!&(=k"8-/4AF4#15

S=)k4#$%bXyo?LEl

H

f_1!8<=1:%-"N/4#8<4#=1>%='B4#$b/"8<4A=10#"*

YX8"O/$%L"8<4A=1

76 °

1=?"8<4A=1

).=O/#N0/"
YX1

?B

wN=:$k4#1/NN!8<=1"4#1"'oEL?l2&(=k&"8<

y"A"N*w",D/DX",-$J4#1¨"8<4A=1!#"*

q£



H.jk$

!5$k"N/NN¨Yc*

6

H.IJB4#$4#$

:b/4#J",D/DX",-$4#1

ø 9ù>ú~¦20ûÀ$7ü`$22

&r"8<k#"*

µß GHIC
^

?B
µ M L µrß

HIJ/&(=-bB"'oEL?lË&(=

O-1Vb)S4##9YXL4#1/$%%N¨4M1%=;"8R!"8<4A=1#"*

Å

$#ù#ý!þ2Fý

µ)ß JHKC

¤4#$S4M1/$%%N>4M1>"8<4A=1!M"*

^

^,H

/b9"1/NVbB4#1

à

#%$'&($'&ON>6'47476QP(RTS;:(UVXWYRT8%60:Z6QP
4A'",YX=",5O/G;1",4A=1Vb4A&.)8"1¥"8-B4A"¨&r"8<LYc*O/$4#15¨">oEL?lb).'$=OB#NN=

\[

/",HIJhxcO$%4#=14#$bB)S/4M8-!"8R/4AE$=OB#N¨).8R=:=$h)S/11=wo?P?l4#$S""4#M",YBA 3f¡?4#$
8<"4#1BA*"¨5=c=FN34#N"w%=!$%#8<P"13"8-B4AP)S/=$%yD/8<=1/N/4#4A=1/$?$%Gq%=!Yð_"$%*FñFH'\-=G
y5-",DB0YBOB4##N/4#1/5
DB/"$%bX).y8"1¤=YB"4#1¤"w$-4#G
DBAG
"$O-h&=?
N/47@8O/#¯*¨=&"1¤"8<4A=1VÌÍ$
D/8<=1BN/4A4A=1/$K"$S&(=##=)S$H

96 ³8 Ã Ì Á ¿ µZÀ  µ F
È +0

N/47@8O/#¯*9] e

4#$JG;GPYX=&UE&r"8<k#"*k",J4#G;L$%%D

D/-

µ

]î:e

IJ/PN/47@8OBA¯*w=&U"8-¤"8<4A=108"1>YXP$%k)S1>4Ak4#$K6B-$S4#1/$%-%N>4#1:%='L5R",DBHKO/-4#15
DB#"1°<F%-"8<4A=1b&"84#1/50"0&r"8<
&(=y)S/4M8-C1=o?LElô4#$h""4M#",YBAb).T1±$4#G
D9A*$%A8<
"1
"8-B4Ac4M15P"8<4A=1)S4A;G'4#1/4#G;"FN/4A@8O/A¡*HUIS/4#$OR4#$%4#8K).=F$²).#B4#1'$4AO/",4A=1B$)SS
",P$-"V)K"*F$J%='"8R/4AL=1/L&"8<b9YBO$%=G
P)."*c$k1N>A$$J<=S/"1¨=-$H

#%$'&($^]`_JPZ:Z6Qa9bdc(We:Kfg6'b9WYhT8%6QijhY:(6aTb
j$$O/G
Ég?iSjlÂmlÂnjko

@

/"$0$%%ANQ&(=¤"¦D9",-"#AL$

µ


=&;"8-/4#-$",0"¦4#G;°$%%D

µß

4H HAbW"8R/4AF4#15!"8<4#=1/$hB"'YX13$A8<%N¥&=h"M5="#$P",h4#G
'$%D

^,H¨jk$P)",'=1/#*

4#1:%$%%N°4#1$%xcO14M"²$%=#O4#=1A15b)'$4##U/"w">8-/=4#8<'=13/=)È%=#4#1",-4#/'"8³

76Dk

4A=1/$H?c=G
y#4#1/",-4A",4A=1/$k8"1¤A"N!%=T$=-%D9#"1/$JB"1=/-$HSf£&Â"10"8<4A=1

6o)Dl



"yD/8<=1BN/4A4A=1

>=&"1=/S"8<4A=1

×

¡b1T).EN=
1=J1NT%=;4#1B8#O/N

."N/N/$

¨4M1/L1)v$%

,6

=&Â&r"8<$E%=¨YX
"8-/4#N=1y4#G

$%%D3",R#4AbX54A1¤/",E).
$%%R4#8<k=O/-$%A$?%=¨<F8O%

=6 

YX&(=-

H²ISSxcO$%4A=1w1=)4#$bc=)N=h)k691/N"P#4#1/",-4A",4A=1'=&k"8<4A=1B$B",.G;4M1/4#G;4A$

[

±³²

=OS1/)[&"8<k$% IJL8<=$D=1BN/4#15yN84#$4#=1TD/=YBAG©4M$

B³¯8<=G
DB#%H

å  !"udmhØ gn²ZopqsrtsrvuMo1pwn±xt7p±
yzr{|pw}%r(o1pwn±
<
A~
B~
B0~Þ  : ¸:OlOlOs l":" ~î
[B ( ;:OlOlOl":FB s ( m ~ w\
1~[
snR(² o1pqsrtsrFu%opwnRx
± t7p± y7r{pw}MrZopwnR± e± ²
Tx   u2v  }º/
û
p^{y(u%oyM
vWvxuguÔFÜ
nZ² opqsrtt7p
± yzr{r{|{MrMB± By%qy)± o
Ï_8 ]: 
J~
uB} Þ  : ¸:OlOlOlo:"  î
B U E B Q
U :5 DO
Å

Ã



B
Q

B
B

H

~
[
Ê
U
Ç + 0
´
g~
´ ×8 + Å  0 ´ i8Ù + Å  0
D 
D 
  
U 5:   
P 
´ 
D
l

´
«

g?4#1'"E$%

p¸:«<}9µ¯««º<µ,{{Aµ

p=&-#"cNwFIJiJf_l.h"8<4A=1B$Â"1/N;"LD=$-4A4A4#1:%5

&rO/1/8<4A=1

^ -

<F8O4#15;/L$%x:O/1/8<

~(}chz9%µ<{#«<»

CHUf£$/S"E=1<³%=,³=1/

>$OB8-°/",PT1cO/GPYXL=&kO/1/$",4#$%6BND/8<=1BN/4A4A=1/$L)S1

]_^e

]

e K4M$J",SG
=$%

·y«-­~¸,~(}c

[~(

W®%­-µ,»kz9{#«¯«

ÏGhYR$/4ADÉ4#$y=Ycc4A=OB$H°m",-N/1$-$
4#$D/=1¦Y:*°%-"1/$%&=-G;",4A=1É&=G
q]rí²1Qs

t]

?e?"1BN0"TDX=$4#4A4M1%5

4A=1

^ -

] ] Fe

]

FB4#A="8-Vbh^`d,aeRHòg?4A1v"ÉN/4A-8<%NË5R",DB

Cb
xcO$%4A=1¤4#$bVN=:$?/y<F4#$$E"=1/<³%=,³=1'&rO/1/8³

$O/8R±/",

]

e

] Feh)S1/]

e

+"1BN±$O/8-¦/",

e%e

I="!54A1ÉN/4#8<%N¥5R",DBb).TN/<691"0$%y=&S"8<4A=1B$"$y&=#A=)S$H0\=
"8-±1=FN

E5-",D9b)hN<691L"1>"8<4#=1!4#1T=OJ$

HÂ\=$4#G
DBM4#84A¯*
=&UD/-$%1",4#=1b)h4#N1:4A&(*

"8<4A=1/$S)S4AT4#J8<=$%DX=1/N/4M15
1=cN/$H²IW='Y54M1T)S4AbF).P$%JD/-]
;HTIJ1VbW&=P"8-CN5¤]

e

4#1

hb).8<",%T1)ªA=54#8"²&r"8<$


H

q£

e

v"N/NV]

e

y&=S"#

"1/N

&=

b

Å

2f$ÆÈÇi¤¦

	

ï$4#15¨/$%;1)ÈA=54M8"&"8<$b).;1=)ª"N O/$%E"#D/-8<=1/N/4A4A=1¤"1/N¥"N/N3#4#$$k%=!<cD/-$$
;8<=1/$%-"4#1:B",L4#$?54A1¤Yc*yN50]

U :5

U

FeRH'F"*0"8<4#=1

k

4#$?=-N/N¤YX&(=
"8<4A=1



">#4M1",-4A",4A=1VHhw1N%=!$4MGhO/M",%
;N/47X1/8<
YX¯).13/;DX=$4A4A=1/$=&

0"1BN

!4#1

U

H;I=

N=¤/4#$b)>N<61=O/;"8<4A=1/$
4#1É"0)."*C$-O/8-É/",
/wY94A55
/4#$N/47X1/8<¨4#$bÂ¨G
=
O/1/$-",4#$_6BND/8<=1/NB4A4A=1/$E",E)S/1<F8O4#1/5/?M4#1",-4A",4#=1H\4#-$%bF)¨ð_DBOB1/4#$/ñh"#

=
Å
´ Â`  + 0

"8<4A=1/$S/",S",E=RNN¨YX&=
D/-]

´ e8
e

ÊDB]

   Å  0

Bb/Yc*w54Ac4M15yGò"1>OB1/$",4#$_69NTD/8<=1/N/4#4A=1H

e

4A'B4#$ÂN<61/4A4A=1b"8<4#=1/$

+

D/8<=1BN/4A4A=1

´

Q e8 Q `­T  + Å  0  ´ D 
1 ° 
°

aB Q

´ D@G:

&=

Â"NBNV] Fe

=RNNY&=

v"N/NV] Fe

"1/N

;4A$%#&

)k4##/"k?O/1/$-",4#$_6BN

b/)S/4MAE=$%h=-NN>",&%)S4##X5k/4#$JDB8<=1/N/4A4#=1¨"N/NN>Yc*

P1cO/GhYX=&O/1B$",4#$_6BNTDB8<=1/N/4A4#=1/$.)L5kP4#$K<"8<A*

] FeRH

c8<=1BN/A*bc)¨ð_54AE")K",-N/ñh%="8R¨"8<4A=1w/",4#$=-NN3-«º<µ%«

U

Yc*wA%4M15
=$%P"8<4#=1/$S"N/N¨";D/8<=1/N/4#4A=1T=&
"NBNW]

´ ³8
e

["N/NV]

Å
D G:
´ c` P  + 0 ´ @
7 Ê B U Ê
e

&=

IJ/",)."*bF))S4##B"<F"8<A*

e

HE$4#G;DBA*
N=/4#$

b/)S/4M8-T).=O/#NT=)k4#$%E5='O/1B$",4#$_6BNVH

²DB]

] ]

U

BHIJcO/$b

U ³8
e

D/]

U Â`E P  + Å  0  ´ Dl¡
e

Å
P  + 0
&B

^eÂOB1/$",4#$_69N;D/8<=1BN/4A4A=1/$b1/"G
A*y

&r"8<$J&=S"#V"8<4A=1B$<F8<DBJ=$%LB",S",L=-N/N¨YX&(=-

U

H

FOBG;G;4#15>O/D¥w1:O/GhYXL=&JO/1/$-",4#$_6BNDB8<=1/N/4A4#=1/$E).5&(="!#4M1",-4A",4A=1
",-4#L",

Ì

Å  Ã
+ 0

B Q ß  Ê B U Ê
] ] Fe

] ]

e

B Q Ê B U ß  ¡  m  ß
Å+  0 Ã
1~EW8 ~ ß  ¡  m ß
 U :5 eD
U
Å

Å


+

0

+

0
+ :OlOlOlT:;+

]8

Ì

^e%e

] ] Fe

PcO/$JN/<691?=OS1)QD=$-4A4AE4#1:%5
\U4#1/"MA*bF)LG;",h$O?/",S"8<4#=1/$

]

ÊD/] e

"N/NW]

jA%=5bB"
M4#1",-4A",4#=1

B

]

B

4#1:%=

&(=]

Fe

PHÂPN=

BÌÍ$D/8<=1/NB4A4A=1F³K"1/N

U

ÌÍ$

Å
Å
U c`|o+ ( + 0 O: lOlOlT:;+ + #0 ( 
~ 

U e8
e

^e

^eRH

#(

(

Q Â`|o+ (+ Å  0 O: lOlOlT:;+ + Å # 0 (  :

Q ³8

D/] e

e%e

5S=-NNTYX&=L"8<4A=1/$

/4#$kYc*!4#1/$%-4#15'1)uA=54#8"ð%$",&¯*Fñ¨&r"8<$
"N/N>M4#$%H

]

b).

"N/NV]

e

=&=OS"8<4A=1B$JA"N/$K%='",JG;=$%

O/1B$",4#$_6BNwD/-8<=1/N/4A4A=1B$.4#&

"1/NP=1/A*E4A& 
$",4#$%6B$VxcO/4AG
1:$V&=U"SN/4A-8<%NL=D/4#G'"#4#1/",",-"1/5G
1H²Ycc4#=O/$A*b

~ 

P"8<4#=1>$%S"1/N

à

8"1>YXL8<=G
D9O%N>4#1TDX=A*F1=G;4#"4#G;H

?O/¤$=AÉDBODX=$%°)S4Au#4#1",R4A4#152"1ô"8<4#=1ô$%4#1u"Ê8<-"4#1u=-N34#$0%=v"8-B4A2"
$G;"MA;1:OBGPYX
=&EO/1/$",4M$_6BNÉD/8<=1BN/4A4A=1/$bÂ)S/4M8-b.4#1ÉO-1b.G;4A5:'A"N±%=°"3$=%<³
#"FNT$%=#O4A=1VH -

IS:O/$b:).E",E8<"4#1/A*1=K)S4###4M15L%=yDB"*?D/-4#8</",K691BN/4#15P"1T=DB4#G;"

#4#1/",-4A",4A=1
=&Wk"8<4A=1B$.4M$Â#4A#*%=y8<=$%b"88<=-N/4M15P%=yIJ=G

cH²IJ-k",?"P&)G
F³

=FN/$k/=)Õ=18"1¤",D/DB=4#G;",%y$O/8R"w#4#1",R4A",4A=1bBM4Ah4#1:%=FN/O/84#1/5;"1=RN-4#158<=1/$%%-"4#1:

6 E 6

,6

&(="8R"8<4A=1

6 

kB",Â"N/N/$"?D/-8<=1/N/4A4A=1y=&X"1="8<4A=1

b"1/N
%*F4#15?%=L#4M1",-4A

P"8<4#=1/$S$OB8->B",SG;"1:*w=&/$%P8<=1/$%%R"4#1$k",PG
HK?O-4#1/5
=OJ<FDR4#G
1:",4A=1/$b).
&=O/1/NT/",JD9",-"#AX"8<4A=1/$k"N/N/4#1/5"8R>=ÌÍ$JD/8<=1BN/4A4A=1/$K=F88OS$=
-",A*T4#1T=OJ%$4#15
"$%F$J/",S1!",D/D/-=4#G;",4#15;4M$1=J).=>E<X=HPcO/$J$4#G;DBA*'#4M1",-4AE"#V"8<4#=1/$
4#1TP=-NJ*w5k$A8<%NbB8"O/$-4#15
"#G
=$%k1=;8<=G
DBO",4#=1/"=R"N",k"#H

qâã!ìçê"æ(èoíîôAóñÂåoæFìZñwôeêoñòZñÂìZêëmìrè"ç÷úå ]æ(øTìZ÷îþMëFíëFéìZ÷úæ(åMíú÷îå"ñwëFòZ÷¢¡wëmìZ÷úæ(åoçÂëmìrñðë;éêMìZ÷úþAñÂç9ìZñðøMôTæOñðç¤£¦¥§¦ ;èëFòëFåOìZñðñcìZê"ñ
òZñðçè"íúìZ÷úå\³  òZñðíîë©T¨ ñwôgçæ;íúè"ìZ÷úæ(ågìZæ³óñGæ(ø"ìZ÷úþMëFíýõ;Âª êo÷úéê1rª æ(èoíîô«;  ÷úù.ñGèoçcë;ågë(ôTþA÷îçç÷úó"íîñGê"ñðè"òZ÷úç9ìZ÷úé(â
q£



ø 9ù>ú~¦20ûÀ$7ü`$22

ÂÒýt­¬«®&5  r .¯¹}&2

Å

$#ù#ý!þ2Fý

r ou

¥ }

  ½

;/";4#G
DBAG;1%N=O?=)S1¤R$4A=10=&Kg?ikjklmklnWjoPb/4#5/A*T=D/4#G;4#N&=E$%=AF4#15w<³
#"FN3DBM"1/1/4#15w"$%F$HTf¡P<cDB#=4A$L'&"8<h/",P'DB#"1/1/4M15T5-",DB3=&"!#"FN"$%3N=c$
1=S8<=1:"4#1"1*w<F8MO/$4A=1¨-#",4A=1/$L]rlÂ=DX=$4A4A=1^eRH?OJ4#G
D9AG
1:",4A=1¨4#$J"#$=;/4A5/A*=D³
4#G;4#N!&=k-D",%NBA*!$%=AF4#15'DB#"1/1/4M15
"$%F$?)S/4#8R!"#$/",y$"G
y$%?=&Â"8<4A=1/$

M{ ®  8 Z~  :;+:F

"$%F$

ô]

eK"$kN$8<-4AYXNT",JPY54M1/1/4#15=&/4#$$%8<4A=1VH

°



l#"1/1/4#1/5"$>$%DX847698",4A=1/$SO/$O/"##*8<=1:"4#1$=G
P=DX-",%=$8-G'","FbX"1BN>"'$%k=&8<=1F³
$%"1:$Hf£1/$"14#",4M15/y$-8-G;",">)S4A0
8<=1/$%"1:$E*F4A#N/$k;"8<4A=1/$?%=¨/"$9H
?O
$%*F$%%G4#1B$%"14M",%$²"#F=DX-",%=Â$8RG;","h4#1y"E)."*
$O/8-yB",Â"#b"1/N;=1/A*b"8R/",YBAS"8<4#=1/$
",EYBOB4#AHiJ"8R/",YB4##4#¯*w=&"1>"8<4#=1>LG
"1B$/",b/)S/1¨$O/88<$$4#A*w",DBDBA*F4#15=DR",%=-$
%=
E4#1/4#4#"9$",%bB"#=&WL"8<4#=1ÌÍ$KD/8<=1/NB4A4A=1/$.",D/DX",1OB"#A*H²E1TY9O/4##N')S/",
).?8"MB?8<=1/18<4#c4A¡*'5-",D9HIJ/4#$Â5-",DBT8<=1/$4#$$Â=&¯).=yM"*-$bF=1E8<=1:"4#1/4#1/5"#]"8-³
",YBAek"8<4A=1B$bW"1/N0
=L"MK]-"8-/",YB#ek&"8<$Hy\=Gq"8-3"8<4A=1VbV;",yDX=4#1:%-$%=
"#.D/8<=1BN/4A4A=1/$b²"N/NC<8<$"1/NÉNA%¨<X8<$HCj#.=&k\U\.ÌÍ$;8<=G
D9O",4A=1/$
",T<@84#1A*
4#G
D9AG
1:%NO/$-4#15PB4#$Â5R",DBT$%%-O/8<O-HU\/=E$OYB$%xcO1:A*;N$8<R4AYXN'4#G
D9AG
1:",4A=1'=&
#"FNg?ikjklmklnWjoPb).L=1/#*1N¨/L4#1&=-G;",4A=1¨",YX=OKD/8<=1BN/4A4A=1/$K"1/N!"N/NT<8<$H
j$K"PM"cNDB#"1/1B4#15?5-",DBwN=c$.1/=8<=1:"4#1T"1*;<8#O/$-4A=1;M",4A=1/$bcS=1BA*;4#1&=-G;"³
4A=1¨=1/P1N/$S%=;D/$1S4#J",P)SB",)8"#;{A|, «<h»'«<»'-«-R~Íz9RbX4H HAb/&=J"8-&"8<k=
"8<4A=1b:S1cO/GhYÂ=&/6B-$%²M"*",Â)S/4#8R;4A²",D/DX",-$²4M1
J5-",D9HÎ"#AN
=1;"14#1:%-G
<³

 { ®  8 Z~  :;+:F
Ë
B
M6
µ

N/4#",%"$

]

eRbc=O²-$-4A=1
=&Wg?iSjlÂmlÂnjko8<=G
D9O%$²$S#"*.G
GhYR$/4ADB$

Yc*O/$-4#15?J&=#A=)S4#156/FDX=4#18<=G
D9O",4A=1HIJJM"*G;GPYX-$B4ADB$=&"#F&"8<$."1/N;"8<4#=1/$
",4#1/4A4#"M4AN%=

H\=."8-w"8<4A=1bcS4M$Â"#$%=h"P8<=O/1:%bc)S/4#8R;4#$²4#1B4A4#"#4AN%=FH²IJ1b

MBEDE+

&r"8<J#"*Sy4#$.YBOB4#A4MG
DB#4#84#A*hYc*$%4#15yE#"*kG
GPYX-$-/4ADw=&"#&r"8<$
4#G
)S1¤"w&r"8<
1cO/GPYX=&

µ

J6

4M$.691/4#$/Nb"#V"8<4A=1/$k$8-/N/O/ANT&=k$%%D

µWß

µ

/"P4#S#"*G
GhYR$/4AD

b/"1/NT4A"N/N/$b/4A&W1=J"A-"N*'D/-$%1b/",-EDBOK%=;L#4M$%=&U$8RN/O/ANw&r"8<$&=J

µß

1<FK&"8<#"*S",K4#G
?$%%D
$%%D

¥4#$?"wD/8<=1BN/4A4A=1

"8-$;T%="

cÌÍ$hDB8<=1/N/4A4#=1/$b !4#$hDBOh%=¤"0#4#$L=&S$8RN/O/ANC"8<4A=1/$&=h/w8O-1y#"*H

jk&(%"
&"8<#"*
$%%=

§B
6

35$L4#$M"*LG
GhYX-$/4AD0$%bW"#U"8<4A=1B$k=&)S/4#8R

5
4A
8<=O/1:%'4#1B8<G
1:%NH¥j$
$%=:=1É"$y>8<=OB1%
&=;"1±"8<4A=1

°%=;FH²íÂ"8R

^,HÂm"F4#15691/4#$-N;)S4#"8<4A=1¨M"*

µ

b/"#$8RN/O/ANw&r"8<$",

^E/"L4AG
GhYX-$/4ADT$%bB"1BNw$=
=1H²IJ?D/=F8<$$8<=1:4#1cO$JO/1:4#X"#5="#$J/"

"0#"*;G
GhYX-$/4#D°A=)y/"1

Ë

H0f¡y$=OB#N3YXT1=4#8<NÉw/",/4#$hc4A)ª=&SD9#"1/1/4#1/5

5-",DB!YBO/4#MN/4#158<=$%DX=1/N/$S8A=$%A*w%='h8<=G
DBO",4A=1!=&L).4A5:S,"#O$J4#1!m?FlHBIS=$%
8"13YX'8<=G;DBO%NYc*",D/DBA*F4#15T'"8<4#=1/$h4M1#"*-$"$P",YX=bUO/DXNB",4#15T)4#5L,"#O$h"1/N
D/=D9",5",4#15ES8R/"15$Â"8-4#G
J"1;"8<4A=18<=G
$Â4M1b"1/N;$%%=DBDB4#15?)S1'1=L8-/"1/5$²=F88O
4#1
"LM"*H²m"F4#15?691B4#$NJ-#"cN;-$4A=1
=&DB#"1B1/4#155-",DB
Y9O/4##N/4M15b"P$4#G;4#M",-A*E%-4AF4#"
-$4#=1¨=&gEiSjlÂmlÂnWjohÌÍ$S$%=#O/4A=1T<c%R"8<4A=1!G
8R/"1/4#$-Gt4#$4#1:=NHKFL\4#5OPcH
f_1/$%%"N=&²DBO%4M15'"#W5="#$?4#1%=P%=D#"*E4#10g?ikjklmklnWjoô$%¯*FAb"1/N!1!DB=DB"³
5",4#15E/GN=)k1yY:*O/$4#15?oEL?lÂ$%³6B-$%b"8R;5="
",

¶

ÌÍ$K69-$%#"*

"8-0#"*

µ

µ

¶

iÏ°

4#$U$4#G
DB#*EDBO4#1:%=L"?5="/$%

HÂIJ1bF-?4M$"h&=%³¯1<FJA=c=D¨N=)S1T&=G

b9"1!"8-B4Ac4M15'"8<4A=1!)S4A>#"*kG
GhYX-$/4#D

µÂÊ

XA=F8",%N

?%=D>%=
/?4M1/4A4#"#"*HÂjK
^E5$$%A8<%N&=J"8-&"8<4#1

w8<=$%DX=1/N/4M15T5="$%HTf£&K'4#$PG
='B"13=1w$O/8-°"8-/4#b"!YX$%L=1w4#$EDB4#8-N
"88<=-N/4M15¤%=>N/47@8OBA¯*¥/O-4#$%4M8,H¥IJwD/8<=1/NB4A4A=1/$y",¨DBO/4#1:%=4A
8<=-$%DX=1/N/4#15
5="Â$$Hí"8-°4#G
;"1¥"8<4#=1¥4#$L$A8<%NbU"#U=&4A$L"N/N/$P",'G;",N¥%-O'",P4#G
$

µrÊ

^,H²IJ?G;",J",K4#G;

µ

µ

"1/N

D/-1$"8R/4A-$K%=yYX$A8<%NT&(=K&r"8<$K/",",E"A"N*'%-O

q£;±

Å

2f$ÆÈÇi¤¦

²³µ´1¶F·¢¸ ;¹º©ºº©¹D»½¼ ³
¾¿ ·¸xÀ©ÁGÂÃlÄ ÛØæÐÕ1öáÀÐ9á)×¤ÐÕ
Ó ÞÖäÆÅ ÁÇT¸@¶ÉÈ
Ê¦²³µË ´1¼ ¶F²³µ·¢¸´ »¹©º©ºº©¹
¼ ³
²³µ´ Ø¹ÛÛ ÁJÂ ¾ ¿ ¹ Á Ùà½Ý<áÀØ½Õ1éÐ9Ò $ Ø¹ÝÝ6Ö²áÀÐ ¶ ¼ ³
Ó Ð9Û²Ð!ÔÝfØ¹ÙQØ½Ô?Ý1Öà½Ùs)
Ì ð<Ö²Ý1Þ ÁGÂÍ¦Î\Î Å'Ì Ç Ø¹ÙÒYÛØæÐÕñáÀÐái×Ð9Õ6Ó1ÞÖä ¶(Ï îµÌô Ó<ÒÖwÐWÔ?ÜÛÝæY×Ð9Ö²ÙßòáÀÖÙÖáÀØ½Û
²Q³Ñ´ Ø½Û²ÛeÒ Â«ÓµÔÖÕ Å'Ì Ç r¹ ÛØæÐÕ1öáÀÐái×Ð9Õ6Ó1ÞÖäÆÅ"Ò ÇB¸ × ¹TÒWÙà¹Ý<áòØ¹Õ6é½Ð9Ò 2 Ø¹ÝñÝ1ÖálÐ ¶eÏ 
¼ ³
¾ Û.Øæ½Ð9Õ ö'áÀÐái×Ð9Õ6Ó1ÞÖäÑØÙÚ ·¸ ¾ Û.Øæ½ÐÕ1ö'álÐ9á)×¤ÐÕ
Ó ÞÖ²äzØÙÚ7Û À Ò È
Ê²Q³ÑË ´ ¼ Ø½²Q³ÑÛ²Ûe´ Ò ÂsÍÎÎ Å'Ì Ç ¼ ³
áòØ½Õ1éJÒ Ø½Ó ¤$ ØÝñÝ1ÖáÀÐ9Ó ¶(Ï `
 Ø¹ÙÒ ¶
Q
²
Ñ
³
´
¼
ÊË
Ê¼ ¦²³µË ´ ¼ ²³µ´
Ê¦Ë


¸

\U4A5O-E iJ#"FN>DBM"1T<c%-"8<4#=1

µ]Ê

"1:*:)K"*H>Ï0",F4#15!",h4#G


Â

^'"$$O/G
$P/",h"8<4#=1/$h",-#4#1/",-4AN4#1/;=-Nh*5

$%A8<%N JjôD/8<=1/NB4A4A=1>B",k)K"$?"8-/4AN0Yc*>"1¤"8<4A=1¤""N4M$k1=?8<=1/$4MNN!"$?"1)
5="H

Ü

U

Ç

  ÝíÍ[Ì ÍË




 

TÞ© ÐßÎ Ð


°

¯

Fà

È 

f_1¨/4#$J$8<4A=1bB).P4#1:%=FN/O/8<L\U\.ÌÍ$JYB"$h$%",-8R!"A5=R4A/G¨HhN/4#$-8O/$$KP"#5=-4A/G¨ÌÍ$J=,³
4#8"VD/=DX4A$K5",RN/4#15
8<=G
DB#%1$$bB"1BN>N-4AL\U\.ÌÍ$J=-"#$%",-8-$%%-",%5*H
f_1Ê!69-$%Tm?Fl

R$4A=1ô]rZ.=1!s

g<X1/bh^``eRbEmEFlS^0"$T)."$¨OB$%N4#12/0jkf£lK:³

^``8<=G
DX4A4A=1b$",-8-C$%%-",%5*¥4M$P">,",-4#",4#=13=&J/4#M7³¯8#4#GhYB4#15b"A)K"*F$$%A8<4#15=1
YX$%L$O/88<$-$%=L%=>;$",%'4AL4#$E8O-1#*!&r"84#15H
Z.8"O/$%'$%",%"MO/",4A=1/$E",;8<=$A*bW).
"#$%=>8R=$%
%=>O/$;A=c8"U$%",R8-b4#10;=DXy%=¨"8-¥5="²$%",%$E)S4#"$?&(),"#O/",4#=1/$E"$
DX=$$4AY9AHh$%%AN&=P">N/4A1:L$%",-8R3"A5=-4#/G¨bW"1[ð_1/&(=-8<NBñ¨&(=RGõ=&.B4##7³¯8#4MGPYB4M15b
)S/4M8-v8<=GhYB4#1$¨A=F8"E"1/N[$*c$%%G'",4#8$%",-8RHòIJ$%%R",%5*[4#$¨G
=4A,",%NvYc*Ë3$-4#G
DBA
$%%-OB8<OE/",J/L$%",-8-$%DB"8<$S=&=O/J%$%4#15
YX1/8R/G;",F$K%1/N¨%=w/"H

)Ò#`¬òÔ u2vo5   MyE ¥¥'á 5 ¥ '} £  #w
=4#15¨DBM"1/1/4#15Y:*0O-4M$%4#8h&(=)K",-N$%",R8-b;$%",-8R3$%DB"8<;4#$?/;$%DB"8<
=&K"#U"8-B",YBA
$%",%$b:%=5Â)k4A4AO-4M$%4#8"#OB",4A=1HUoS=)Lb,"#O/",4#1/5$%",%$4#1=O%$%4#1/5YX1/8RF³
G;",F$E)S4#;OR4#$%4#8yN<691/N¤Y:*íÂxcO/",4A=1°ócb=1
=&%1¥691/N/$/",h;$OBA4#15T$%",-8R
$%DB"8<$",S$4MG
DBA4#1
$%%RO/8<Obc$%DX847698"#A*bB",ÂA=F8"/G;4#1/4MG;"?"1/N
DB#",%"OB$%1/N;%=PYJ$-G;"#H
\=S"1:*T$%",-8-$%",%b/L1/<cJ$%",%P)S4AT$%%-4#8<#*'YX%%SOR4#$%4#8S"#OB",4A=1>4#$KO/$OB"#A*;=1/#*
"w&()ô$%%D9$E")K"*¦]r"10<F"G
D9Ay&(=?/4#$?4#$yèÞéåM×êårß-×EN=G;"4M1N$-8<-4AYXN4M1¤c8<4#=13cH#^,H#^eRH
?O?4#N"w4#$k%=TD-&(=-Gò<FB"O/$%4Ay$%",-8R¤&(=?YX%%L$%",%$HLIJ"A5=-4ABGÓ4M$k$/=)S104#1
\U4A5OPócH
n4A/4M#7³¯8#4#GhYB4#1/5b"A5=R4A/G

N/DB4#8<%N24M1¦\U4A5O¤ó3$%",$=Ow4#1±04#1/4A4#"$",%H

+

IJ1VbV&"84M15>"1¥4#1:%-G
NB4#",%;$%",-8R¥$%",%

.b">8<=G;DBA%;Y/-"N¤6B-$L$%",-8-°$%",4#1/5>=O

q£

÷

ø 9ù>ú~¦20ûÀ$7ü`$22

Å

$#ù#ý!þ2Fý

â
äãå
æ ·¸èç
é=ê(ë"ì'ÊGä¤í ÐÅ æÕ1ï7Ç
à½Õ6¸ × á °×¼ Õ6Ð9³ ØÒÝ1ÞXîÕ
ÓÝfÓ1Ð9Ø½Õ6Ô
Þqï7à½ÕfØÀÓÝ
ØÝ6Ð æ%ï ð<Ö²Ý1Þ Å æ%ï Ç ã Å æ Ç
í
í
ë ² Ùà½ÜàòÝ1Ó1äÜÜÔ
ÝvÞûñ Ó ãÝ6Ø½Ø¹Ö²Ý1ÛÐPñ îÔ9ÓØ¹Ý1Ùûàä ×ÐBï7àÜÙÒ>ð êZÊ¦Ë
Ê¦ØÒË ÒY¼ ë Ý1² ÞÐPØÔÝ1Öà½ÙÓñà½ÙYÝ1ÞÐ`äØ¹Ý1ÞûÝ1à æ%ï ØÝñÝ1ÞÐ`Ð9ÙÒûà¹ïÝ1ÞÐPÔÜÕ6Õ1Ð9ÙÝñäÛ.Ø¹Ù
æ ·¢¸ æ ï
¼
Ê¦Ë é=ê(ë"ì'Ê
ÖÙÖÝ6ÖØ½Û²Ö ÐBÝ6ÞÐPÔ?ÜÕ1Õ6ÐÙxÝñäÛØ½ÙûÝ1àlÝ1ÞÐ`Ð9áÀäÝæqäÛ.Ø¹Ù


¸

\U4A5O-Pó ÂIJE1&=-8<N>B4##7³¯8#4MGPYB4M15P"A5=-4#/G¨H

&=G

+

a+J

Q4#$4#1:=NH0IS/4#$?691BN/$LT8A=$%$hYX%%y$O/88<$$%=b²4H HAb/w1",-$%$",%

)S4A

$%%-4M8<A*LYX%%²,"#O/",4A=1b=&r"4##$Hf_1J#",%%²8"$%b:)S=AK"A5=-4#/Gu&"4M#$b4#1K&(=RG


+ |+

8"$%byDB",¤&(-=G
5="W$",%

°

Ê%=

U4#$?"N/NN¤%=¨
8O-1EDBM"1b"1/N$%",-8R34#$?4A%-",%NH13"

"'$%",%h)S4AT,"#O/",4A=1!

°

4#$K"8RNb9$",-8-$%%=DB$H

?O/U4MG
DBAG
1:",4A=1=&Y/"Nh6B-$U$",-8-;$",4#15?=OU&=G

+

¤4#$U$%"1/NB",-Nb)S-K$",%$

a+

",;DBh4#1"x:OO/HT?1;$",-8-C4A%-",4A=13G
=$h
69-$%L$%",%

U&(-=Gõ'xcOObU"1/N

+

,"#O/",%$4ALYc*0RO/1/1/4#1/5¨g?ikjklmklnWjoPHf¡&K"MO/",4A=134#$PYX%%P/"1¥/",P=&

]+J

$O/88<NB$H.-)S4#$%bFP$-O/88<$$%=-$J=&

.bU$%",-8R

",PDBOK%=;L1BN¨=&/Px:O/OH²iJDX",%N!$",%$

",;"=4#NN3Yc*!D94#15>">/"$-¤",YBA
=&.c4#$-4A%N¤$%",%$P4#1G;G
=*H
f£&1=>1)$",%$P8"13YX
"8RN!"1:*cG;=b/Y/"N/T6B-$%J$",-8-!&"4#M$H

)Ò /óòYu}«2

¥

  

3T3

f£&K4M1¤=14A%R",4A=1Y/"N/6B-$L$%",-8-°&=P">YX%%h$",%&r"4##$bW131&=-8<N°/4##7³¯8M4#GPY94#15
$%%=DB$S)S4A=O/691/N/4M15
"'$%=#O/4A=1HKIJ/4#$8"10/",D/DX1¨YX8"O/$%h=1/8<P1/&(=-8<N/4##A³¯8#4#GhYB4#15/"$
8-/=$%1%=!4#1B8#O/Ny"1"8<4A=1¥4M1/
DB#"1bV4AL1/L",$L/4M$EN84#$4A=10YB"8-9H;IS;G
=FN4#$
&=L=1BA*8<=G
D9A%L=1¨"$%F$J)kL1=
&r","#A*w)J=15;N/84#$4A=1/$8"1!YXLG;"NH²IJ$P",
L"$c$B",SN='1=J8<=1:"4#1Ëð%N"N>1/NB$HÍñ

å !"u ôy% å $ d¬À#  * Ø Z~::F
¢
mj
+ 8 PR"Q SqUrVYX =:m
-Fö õ )&d PRQTSTUWVYX Z+:m .«L]

-

,+

e¨-«¨|wz9{7|}/}/~}:¥|,-Ô °¶Ó|¯«

.k

1/NË~ ª~rS~(;%«-|­<F|<{#«¨|,}9¸0}µ>« ¬/«}9­R«Tµ%º|­r~µ,}|­<~« «'F«y:µ|,{Bº%µ,»
]

heL|,}¸

]

Me

ÿ~(T­-|{({#«¸3|>N"N

Y> - q-ý> ¢½õE 

~r k~ r«

J~

o",O-"##*bB"
"$%¨4#$J8"MAN>N"NF³1BN¨&(-P4A&4#SN=c$J1=S8<=1:"4#1!"1:*¨N"N>1BN>$%",%$H.
G;",-L/",UYX4#15kN/"NF³1/N&(-K4MG
DB#4A$$%=A,",YB4##4#¯*b,"$U=)S4#$K4#1/4#4#"$%",%J4#$%A&).=O/#N
"A"N/*YXL"
N"N!1/NH

vWvxu2fuW3T!"uf}Ø { 8 Z~::F
r<
vWvxuguÔFÜ
,+18 PR"Q SqUrVYX =:m 
«

~{({®%­{~(»'<~}:

ÿ]

-RL M{

e
-«
|Pz{7|,}B}/~(}c>|RÔ

~{({Â}9¸¨|'<µ,{¬r~rµ,}

(º

(>

õ~(¸«-|¸,®«<}9¸?º«-« F«}°«<}ºµ,%­R«¸

jk$-$O/G
h1&(=R8<N0B4##7³¯8#4MGPYB4M15N/=:$?1="8-¤/h5="HEIJ/1!).
/"
$%=G
y4#1:%%³

G
N/4M",%$%",%

]

heRb ÿYX4#1/5;
8O1:SD9#"1b)ShY/"N6B-$k$%",-8R8"1

1=J4#G;D/=P=1¨L$4AOB",4A=1H²ok=)Lb

· Z+ Ö
] ²e

'"$J$%",-8R!/"$J1/=S$%%=D/DXNT*HÂf£&W/L)K"$S"

q£

ö

Å

_+
· Z+  R8
?+

DB",&(-=G
=Y/"4#1

+J

3%=h$%=G
5="$%",%

]

e

E_· Z+

t

$=)S4#15y/",

2f$ÆÈÇi¤¦

(bc1w8<=G
DBA%kY/"N;6B-$%Â$",-8-w).=O/#Ny691BN
/",.DB",b

] ²eRb"1/N3%RG;4#1/",%D=$-4A4AA*H>FO/8R¥">D9",°8"1°&=1/=P<4#$%b

à

±4#$";N/"N¨1/N>$%",%4#1¨8<=1:%-"N/4#8<4A=1>%=;P"$$-O/G
D/4A=1VH

·

G;",0/",PlÂ=DX=$4A4A=10î!=MN/$?=1/A*0)S1

· Z+ ]8

1cO/GPYX-$W4#1/8#O/NB4#15Fb,)S

,&df+

] ²e 47

4#$E"¨&rO/1/8<4A=1¤&=Gq$",%$P%=!1B",O-"

.HUIJ²DB=DX=$4A4A=1L4MN14A6B$V"S8M"$$W=&D9#"1/1/4#1/5

"$%F$)SL).y8"1$",&A*>",D/D9A*1/&(=-8<N0/4#M7³¯8#4#GhYB4#15H.ïk1/&(=OB1/",%A*b94#k4#$kl.FlXjSÎKí²³¯/",-N
%='N84MNE)Sk"y54A1>DBM"1/1/4#15h"$%TYXA=15$%=;B",S8#"$$H

å  !"ud÷hØ

«ø °øiÛ Z@Køvø

«·

¶k·

k·P®

{h8 Z~:=:F A{
°ø °ø×Û @JKøBø

g?4#1>"
DB#"1B1/4#15"$%

xû

 u2v  }

vWvxuguÔFÜ

t

·y«-­~¸,~(}cy·

ô]

¶k·

UeRb94#$

·P®

N

~(}cPz9_µ:<{#«<»

\[

ÈN"N³1/N¨&

ùTø

Ê~(¹.¼F¹¶

q-

®_­Rµ,»kz9{#«¯«

m",-N/1$$4#$
D/-=1¦Yc*±DX=A*F1=G;4#"##*N/O/84#1/53lÂnWjoEFjI

A{

°
~
~ ( 8 ~Ù`|T6¦ú8}[¸:=:vÁ;û ÃÄ

N84#$-4A=1TD/=YB#Gÿ=&U)S/

È4#$$%=#",YB#

$-4#G
DBA*°"N/N¦"1±=DX-",%=%=
4#1/4#4#"X$%",%H

6ú
{ ( 8 Z~ ( ::F

jkD/DBA*F4#15

<

v¸«}9µ¯«y«º<µ,{{Aµ

]rZ.*F#"1/NbE^``î:e

°

/

%=
LD/-=YBAGª=&N84#N/4#1/5?íÂj?íÂok³¯\ikíÂíSH

/",4M$y<c8O",Y9A!4#1±"#S$%",%$b"1/N±<³$",YB#4#$/$


96 ÂbA\F

"N/NV] e

7{

%=!"1:*¤$%",%
"8-B",YBA;4#1



tA"NB$?YB"80%=¨;4#1/4#4#"$",% L"#&"8<$P/",L8"1

SYX8<=G
P%-OP",PG
=NVb9"1/N¨/=$%P4#1Th4#1/4A4#"X$%",%",P"N/N/NHÂok=)Lb//PG
=FN/476BN
D/=Y9AG

]

E{

eK4M$JN"NF³1/N>&(L4A

{ (
M{ (

È4M$$%=A,",YBAH²\=G+A&%='-4A5:b/4A&

×{

1/N'&(bc14AÂ4#$$%=A,",YBAb)k/4#8-'4#G
DB#4#$U/",

Õ4#$Â$%=#",YB#b:"$)/"?1=Â"N/N/N'"1:*;1)

{

DX=$$4AY94##4A¡*;=&"8-B4#15'/P5="HS\/=GòR4A5S%=wA&b94#& ª4#$S$=A",Y9AbB1"#$%=w4#$

a

$"G
$%=#O4#=1¨DB#"1

4#$SN"NF³

{ (
,

;HJE1L8"1!/1bB&=Gò"MV$%",%$?4#1

%=;h4#1/4A4#"$%",%h)S4ATP1/)[=DX-",%=b/"1/N¨<F8O4#1/5

bBYc*¨

b9"8-B4Ah/L5="WYc*¨5=4#15'YB"8

ô",&%H

ÏGPYX-$-/4AD>4#1¨lKFlXjSÎKí2&=#A=)S$K&=GtE&r"8<SB",SlÂnjkoEFjIQ"1BN>4A$J8<=G
D9AG
1:S",
YX=L4#1ElKFlXjSÎKíJHjC1=1F³¯N%RG;4#1/4#$4#8"#5=-4A/G/",N84#N$/²8<=G
DBAG
1:V=&F?íÂjíokk³

,+

\UiSííÊ"1BN!/",?1N/$k=1/A*¨DX=A*F1=G;4M"$%DB"8<y8"1YX$%DX8476BN>"$&=#A=)k$Hg?O$-$k"w$%",%

ü

+

.H

-4A&*4M1DX=A*F1=G;4M"$%D9"8<
/",

Ê4#$"8-B",YBA
&=GÑ;4#1/4#4#"W$%",%H
\/O/bVR4A&(*!/",

h5="8"1/1/=SYXE"8-/N!&=G

KH.f£&U/4#$J"#5=-4A/G+$O/88<N/$b4AJ&=#A=)S$J/",kP4#1B$%"1/8<

4#$K1=JN"N³1/Nw&(

°

$4#1/8<

+

+

C8<=1/$%4#O%$"
N"NT1/NH²IS/4#$.4#G
DB#4#$²/",J?íÂj?íÂok³¯\ikíÂí

4#$4#1¨ol.ljSÎíJbB"1/N!1/8<L4#1¨lKFlXjSÎKíJH

à

IJ/=O5).8"1¥1/=L<@84A1:A*N84#N
)kh">54A13"$%34M$LN"NF³1/N3&(bw",

­

"$4##*0%$",YBA$-OF@84A1:h8<-4#%-4#">4#13#4#%-",OH

=/1/$$%=13"H¥],ehN<61'"!1/=4A=1

=&² ,»»'«rR~­KDB#"1B1/4#15L"$c$b)k/4#8-w4#$K$OF@w84A1.&=KN/"NF³1/Nw&(-1$$bFYBOK8<=,³¯ol³¯8<=G
DB#%H
IJ*
"#$=L54AS"PD=#*c1=G'4#"F$OF@84A1:Â8<-4#%-4A=1
&=$%*FG;G
%-*HUIS/4#$4#$bc=).bc*
%-4AF4#"H
m",-N/A*?"1*E=&/8O-1VYX1/8R/G;",F$&rO/769M#$X4AHE=c/A"1/NPmk=,G;"1/1],"e/".N/<691N

k

1=4A=1B$=&~(} ,«<<r~<{#«DB#"1/1/4M15L"$%F$

°

k

$O@84A1:.&=N"NF³1/Nw&1$$bF"1BN~} «<R«h|­r~µ,}

°

$OF@w84A1&=?4M14#YB4##4A¡*b9O/1BN8<-"4#1¤$%%-4M8<4A=1/$HEIJ<4#$%%1/8<y=&Â4#1:-$%
"8<4A=1B$bV"1/N
$OF@w84A1k8<-4A%-4#";&(=h"NBN/4A4A=1/"V$%%-4#8<4#=1/$bB8"10YXPN84#N/N!4#1¨DX=A*F1=G;4M"X4#G
HJÏ0"1*
YX1/8-BG;",P"$c$²N/=b4#1&"8<b:&OB769#=$%S8<-4#%-4#"?"1/N
8"1
cO/$U<@84A1:A*hYKD/-=1;N"N³1/N
&H

q£T£

ø 9ù>ú~¦20ûÀ$7ü`$22

Å

$#ù#ý!þ2Fý

?1/k8<=O/#N"N=D/.E=:BAÂ"1/NwmS=,G;"1/1VÌÍ$ÂG
=FN=A=5*b"1/NO/$%kS<4#$%%1/8<k=&V4#1:-$%
"8<4A=1/$K%=
-8<=51/4ALN"NF³1BNT&(?"$%F$H²f£&W/%$&"4#M$b:=1/L8<=O/#Nw1TG
DB#=*"yN/4A1:

W

$%",-8R!$%%R",%5*¨/"1¨1&=-8<N>/4M#7³¯8#4#GhYB4#1/5HVh/"P¡)=;-"$%=1/$J&=L}9µ5=4#15
/4M$)."*



íÂ1y"G
=15$%=OWYX1/8R/G;",F$bK",."$%c$/",UN=k1/=8<=1:"4#14#1R$%"8<4A=1B$bYBO
",-P1#$$SN"N³1/N¨&Hj1¨<"G
DBAL4#$JwìUåAâ<ØáUÞâ-Ûã
N/=G;"4#1b)S/E1&=-8<N
B4##7³¯8#4MGPYB4M15PA"N/$J%=;<F8<MA1S$O/A$H



í1&=-8<N¥/4M#7³¯8#4#GhYB4#1/5w8"1°=&(%1CxcO/4A%'$OB88<$$%&rO/#A*¤$%=A"$%c$h/",N=8<=1:"4#1CN"N
1BN/$b"$K4A.N/=:$1=K18<$$-",-4#A*;58"O5:J4#1=1HÂí²F"G
D9A$Â&=K/",J",?8<=1"4M1N¨4#1
/Pë¨Ü/×ê¯ØRâ_Ü!"1/N¨ëTæXâ-åMÙØN=G;"4#1B$bF)S/4#8RT)L)k4##XA=c=w",S4M1!c8<4A=1!cHçcH#^,H

IJS=YB$%,",4A=1
/",&(=RG;$²SYB"$4#$&=Â=O/Â)K"*
=&N"#4#1/5E)S4A;8<=G
D9A%1$$4#$J&=#A=)³
4#15Hf£&B1&=-8<N;/4M#7³¯8#4#GhYB4#1/5J8"1;1=²$%=AJ"?D9#"1/1/4#1/5S"$%b:4AO/$-O/"#A*E&r"4##$*yx:OB4#8FA*H²?1
8"13/1¥$4#G;DBA*$)S4A8-3%=">N/4A1:P$%",R8-¥"#5=-4A/G¨H/"'<FDX-4#G
1:%N)S4A3-"1F³
N=G;4#4#15;1&=-8<N0/4##A³¯8#4#GhYB4#15b"1/N0N=4#15w";$",k)k1!=1/",%%G
DBk&r"4#ANHkIJ/4#$kN/4#N/1Ì 
A"N¨%=;8<=1:F4#1/84#15y$-O/A$H²IJ/=O5T)E%R4AN¨";#",5E,",-4A¡*=&-"1/N/=G;4A",4A=1¨$%%R",%54A$b/).
N/4#N!1=J691BN!";D9#"1/1/4#1/5"$!4#1¨=O%$%4#1/5N=G;"4M1/$)S-P=1h-"1/N=G;4#N>$%",-kN/4#N!$4A5,³
1/4768"1A*YX%%S/"1!LD/F4A=O/$K=1/bB4H HAb9"M",%%G
D/$$OFXN¨&=G©P$-"G
LD/=Y9AG;$H
IJw"$%F$y/",y1&=-8<N±/4##A³¯8#4#GhYB4#15¨N=c$y1=$=AT-4A5:")."*É",-T",DBDB",1:A*¥$%=¤&rO/#²=&
N"N¨1BN/$/",J=1/P8"1!1=k"=4#N!=$%PN"N!1/N/$",k-"1/N=G¨H/"h&=P",R"15N

O

=OJ=-"#$%",-8-$%%-",%5*¨4#1¨\U\±"$J&=#A=)S$

^,HS=;1/&(=-8<N/4##A³¯8#4#GhYB4#15POB14#P5="W4#$K"8RN>=kL"A5=-4#/G

&"4M#$H

cHJf£&²1&=-8<N¤/4#M7³¯8#4#GhYB4#15y&r"4#ANbX$%F4AD0*:B4#15TN=1y$%=&r",E"1/N0%*>%=¨$%=Ay"$%
Yc*;"8<=G
DBA%?O-4M$%4#8$%",-8RT"A5=-4A/G>Hf_1;/8O-1.4#G
DB#G
1",4#=1b/4M$Â4#$Â)S/",
ikO/$$%X"1/N¨ok=F4A5!]_^``aeK%RGt«-«¸ T-«<r®²R$%",-8RHÂIJB4#$K$%%-",%5*¨$4#G
D9A*
<cD9"1/N/$
"MV$%",-8R!1=FN$KYc*w4#1B8<"$4#15y=-N/J=&U5="WN/4#$"1/8<E$%4#G;",4#=1H
I=>$O/G;G;",R4Ab\\O/$$k1/&(=-8<NB4##7³¯8#4MGPYB4M15;"$?
YB"$%
$%",R8-3G
/=cNb"1/N"T8<=G
D9A%
YX$%_³6B-$h"A5=-4#/Gq%=¤N")S4A°=$%T$%DX84#"Â8"$%$)S/'1&=-8<NC/4##A³¯8#4#GhYB4#15T/"$h-O/1
4#1:%=;";N"N¨1BN>"1/N¨&r"4#ANH

Fàdþ 2Î
	 Dÿ ×2Ê

ý ¨

Ì   

U



 U

f_1±/4#$
$%8<4#=1bK)!4M1%=FN/O/8<T¡)=CO-4#$4#8w%8-/1/4Mx:O$;/",'8"1bK4#1±D/R4#1/84ADB#bY¨O/$N±%=



D/-OB1?L$%",-8R!$%DB"8<h4#1¨"1*T&=)K",-N>$%",%$%DB"8<P$%",R8-!"#5=-4A/G

gÚ

^,H

«<{ zº¬F{S|­r~µ,};$%A8<$w"3$%=&?D/=G;4#$-4#15¤$O/88<$$%=R$;%=°"¥$%",-8-Ê$%",%Hjk$'))S4##

N/G
=1/$%%-",%04#1Ëc8<4#=1ËcHçócb!/O-4#$%4M8w4M$'8<-O/84M"&(=\\.ÌÍ$DX&(=RG;"1/8<>=1ËG;"1*
N/=G;"4#1/$H

cH¶k¸¸«-¸
µ|{¸«<{#«r~µ,}w8O$=OY/R"1/8-$J)SE$%=G
P5="V/"$J",D/D9",1#*'YX1¨"8-/4#N
%=c=C",-A*H[I$%4#15°O/-4#$%4#8,b.).&=O/1/N±B",w4A8"12*F4A#NË$"F4#15$'=12"$%F$/",
8<=1:"4#1!5="V=-NR4#15$b"1/N>B"$J1=
<X8<S=1¨"$%F$JB",SN=1Ì H

q£oÕ

Å

2f$ÆÈÇi¤¦

Z.=T%8-B1/4#xcO$",-k=Y/"4M1NT"$."$4#N/S<X8<=&WO/$4#1/5g?iSjlÂmlÂnjkoQ"$"hO/-4#$%4#8J$%47³
G;",%=U4#1?ÂG'"1/1N/$8<-4AYXN?4#1hc8<4#=1LîHUjk#$=bYX=E=&FGpN=L}9µD/$%-Â8<=G
DBA%1/$$
=&J"1:*3*cDX=4#8"²&=)K",-N¥$",-8-H!f£1¥8<=1:%<c=&=Oy$%",-8R°"A5=R4A/G¨b)w4#1:%5-",%
G©$OB8-¨/",/*'D/-OB1k/L$%",-8-!$%DB"8<L4#1wL$4M15A1&(=R8<N>/4##A³¯8#4#GhYB4#15?%*
4#$k1=k8<=G
D9A%h4#1!51-""1*c)K"*
4A&1&(=R8<N!/4#M7³¯8#4#GhYB4#15E&r"4#ANVH

mÒ#
y

2Ô ¥ 45ouc3
+
¡+

¤¥

I=T"¨$",%

°

°

)S/4M8-

"1/N¤8<=G
DBA%#*wO/-1>G+=,¥N/OR4#15
YX$%_³6B-$S$%",-8Rb

É]Z+²eS=&"8<4#=1/$?/",L$%GÑ%=TYX
G
=$%?D/=G;4M$4#15'"G;=15¨

.b)
N<61"T$%

"8<4A=1/$U",D/D9#4#8",YBA4#1

KHIJ/%8R/1/4#xcO4M$NR4ANPYc*P/"c4M15"8A=$%A=c=P",U.#"FNPD9#"1/$

/",;g?iSjlÂmlÂnjko

<F%-"8<$=1C$%",-8-É$%",%$y4#1¥=O%$%4#15"$%c$H0Î.=1/$4MNLä.â-åçæ/æØRâ

N=G;"4M1bW"$L4AE)K"$POB$%N4#1¤!^``!jSf_l.D9#"1/1/4#1/5w8<=G
DX4A4#=1H
IJ;",'¯).=>=c=G;$bj
"1/N¨ZbB"1/N¨"'8<"4#1>1cO/GhYK=&YB"##$bc)k/4#8-¨",-L"#4#1T=c=G©jp4M1/4A4#"##*;"1/N¨$/"#XYXEG
=N
4#1:%=T=:=GõZHVIJ/D9#"1/1?8<=1%-=#$L"T=YX=b)S/4M8-¤8-/"1/5$E=c=G;$?c4M"/
"1/N!)S/4#8R¨/"$J¡)=w5-4AD/DX-$.%=

2Y5oz

=

2





}u

=DR",%=b

YB"#M$HÂíÂ"8R!5R4AD/DXJ8"1!=MN¨=1/A*w=1PY9"#",

 vxu

"4#G
HJyA=c=>","w$G;"#W"$%>)S/h'YB"##$kGhO/$SYXhG
=N¤4#1%==c=G+ZHVF"*>/P=YX=

2JY5"z
 #vxu2

/"$k"A"N*

N0OD!YX=!YB"##$b/4H HAb4#1>h8O-1k$%",-8-¤$%",%bh=YX=k4#$k4#1¨=c=G+jhb

 }u

"1/N¨"8R05-4AD/DX=#N/$J=1LYB"#HÂIJh",Lh",D/DB#4#8",Y9AE"8<4A=1/$4#1T/4#$J$",%
=c=GÿZbc=



%=

=1/k=&V/SYB"#M$²YB"8-4#1:%=P=c=GªjPHFIJk#"FN$%=MO4A=1/",=O/.O/-4#$%4#8

<F%-"8<$k4M$KL&=#A=)k4#15H

E 



}u



2
2





juZ

b

 vxu

YB"#^?ZvA&b

 vxu

YB"#MZ-4#5

? Ö

IJ/4M$S4#$k"'DB",R"#AV-#"cNDB#"18<=1/$4#$4#15'=&Â¯).=w4MG
h$%%D9$HkIJ/h"8<4A=1¤$%?$%A8<%N¤",?



6B-$P4#G
T$%%D¦8<=1:"4#1/$w=1/A*¥"8<4#=1°B",yG'",$
$%1/$%T4#1°¨$%",%¨",yB"1/Nb z
} u  %=
=c=G©ZHE&=EDBO-$-OSL4MN"P=&$%%R4#8<4#15E"8<4A=1>8R=4#8<L4#1T"1:*'DB#"1B1/4#15$%",%
%=>=1/#*=$'"8<4A=1/$P/",P",'$A8<%N¥4#13y6B-$%E4MG
;$%%D¥=&K'#"FNDB#"1H
w8"#
$%''"8<4A=1/$L/",h$%Gq%=!YX
AD/&rO/Hyf_1;",YX=<F"G
D9A;$%",%bU/4#$E$%%R",%5*38O$
N=)S1¨EY/R"1/8-/4M15y&"8<%=&(-=G©E%=;=1/H
c=G;4#G
$b$%%-4M8<4#15J=1$A&F%=S=1/A*?."8<4A=1/$W/",",-Â$%A8<%NYc*/Â#"FNLD9#"1/1
8"1¨YX?%=:=;GO/8RH.Î.=1/$-4#NK?&(=MA=)S4M15
Ý.ÛÞFß£àc×áÞâ-Ûrã
<"G
DBAHKF"*w)LOB$%?E)M9F1=)S1
D/-$%1",4#=1)k4A!&=O=DX-",%=-$b

3O½5"z  c 3O5"z J2 Y5"z  2
2Y5oz  2
b

b

8<=1:%=#$P"$4#15#-=Y=h",-G¨bU"1/N;=DX-",%=R$h8"1¥Y;OB$%N3%=
"1==1b

 c 3O5"z

">Y9A=c8-B",P'",RG
ÎbW"1BNYBA=F8F$Pj

">YB#=c8-&(=G
4#$L/=#N/4#15



 u

"1==1b



2   #u
3q½5oz

"1BN

 HIShD9#"1/1

=1;Y9A=c8-¤=1%=D°=&

"!YBA=F8&=Gq/'",YBAb=

=1%=0;",YB#Hf_1/4A4#"MA*b'",-G

2

4#$L=MN/4#15TYBA=F8

"1/N3ZÈ",;=13/'",YBAHwIJ;5="4#$L%=$%"8¥jª=1:%=ZHUF",%N3=1¥/4#$

$%",%b#"FN°g?iSjlÂmlÂnjkoÿ)S4#MWO/-10=1
=OE=&.
&(=MA=)S4M15/
4#G

$%%D3=DB4#G;"
$%=#O/4A=1/$H

E  2  ½ #u  $
 2JY5"z  2 
Î

 3q½5oz

j

juZ

b

b

 Ö

=

q£;

ø 9ù>ú~¦20ûÀ$7ü`$22

E  3q½5oz

 2JY5"z  2
 3q½5oz

Îj

$#ù#ý!þ2Fý



b



j

Å

b

juZ

 Ö

=

E  3q½5oz

 2JY5"z  2
 3q½5oz

h


ÎZ
j

b

b

juZ

 Ö

j#F=&9/$%J",J,"#4#N#"FN;$%=MO4A=1/$b"$4#1J#"",4A=1
4A²N/=:$²1/=²G;",%%Â/",
Î¦=1%=
j=Z¦NA%$.&r"8<$./",).?$%4##91NHUf¡&Î24#$=1jhbc)?8"11/=
"1/N>4#&UÎ4#$K=1Zb/)h8"1>1=

3O5"z

jQ=1:%=Z"1:*cG
=-H

2JY5"z  2

3q½5oz

4#15

jv"1:*cG;=b

IJ/?6B-$%J"8<4A=14#1T"8-!#"FN¨DB#"1¨4M$=1/A*w4#1/$%%N>%=;5J-4#NT=&ÂÎb/4H HAb/&(-EL=YX=
",-G¨b/"1BN¨&(-=G

LDX=4#1:.=&F4A)[=&E#"FN¨DB#"1B1b"#X=&EP$",4#15;"8<4A=1B$JN=

v	



_=YWHUIS:O/$Â#"FN$%=MO4A=1;<F%-"8<%N¨G;4#5Yk"1*;=&WS-",YX=HÂf¡&V4A./",D/DX1/$

%=TYXhy$%8<=1/N¤=?/4#-N!=1/b/1).
A=$%yDB",0%=¨"1=DB4#G;"U$%=#O4#=1!Yc*>$%%R4#8<4#15
=O-$A$S%=h8<=-$%DX=1/N/4#1/5;"8<4A=1/$b

3O½5oz

ÎQju=

É]Z+²e.=&UADB&O/X"8<4A=1B$%="
$%",%I+É"$J&=#A=)S$H

$%

Z+ ³8$T6,

É] ²e

JÏ ( Z+
°

mkb

3O½5oz

Î[ZkHXIJ-&(=b9)yN<691/L

96 ³df+:	 96 
Ï ( Z+ 8  

DB] e

] e

] ²e

]ae

] ²e?N1=%$P;$%L=&.5="#$EB",P4#$E8<=1/$%%RO/8<%N3Yc*-#"cNCg?iSjlÂmlÂnjkoª",

4#G
;$%DË^

=1wA²""N¥=&K'4#1/4#4#"U#"*

°

Z~  :;+:F

)S13$%",-%N¥=1/;"$%2]

eRHwf_1

).=-N/$b).L8<=1/$4#N/J"$SADB&O/"8<4A=1/$S"#X=$%L",D/D9#4#8",YBA=1$bB)S/4#8R¨"N/N¨",SA"$%=1/E5="
",?6B-$%k4#G

$%%DVH?f_10
",Y=
Ý.ÛÞFß£àc×áÞâ-Ûrã¨<"G
DBAbX&4#15wy=YX=?",-GÑ4#$k"G;=15
$%¨5="M$bÂ)SB4#8-C8"O/$%$;"M/w/>$%",4#1/5¤"8<4#=1/$y%=YXw#D/&OB4#1C¨4#1B4A4#"Â$",%b

É]KeRHÊf£1¦",YX=±ä.â-åçæBæUØRâ
<"G
DB#b./!G
=FN/47698",4A=12N=:$1=

4H HAb%=3YX>AG
1:$'=&
8-B"15h"1:*:B4#15H

IJ/1=4#=1=&AD/&rO//"8<4A=1B$$/",$K$%=G
?$4#G'4##",-4A4#$)S4A)S/",K)vÏ8-G
=%k8"##$

k

º<| ,µ,«¸'|­r~µ,}k]rÏ08kRG
=%bV^``¢cb^```eRb/4M1
k8<=1:%<F.=&V8<=G;DBO4#15P%«R«¸, 
«%«<-~rµ,}
%|RzB&=wO/-4#$%4#8>$%4#G;",4A=1VHQf_1Ë"É1cO$#b.5-N*¦5$-$4A=1Ë5-",DB/$YB"88R/"4#1Ê&=G
w5="#$O/14M²&r"8<$",-"8RNC/",y",w8<=1:"4#1NC4#1¥w8O/1:h$%",%H¤jkG;=15$%=
/4#1/5$bE5-",DBB$D/=c4#N/L"1>$%4#G'",4A=1¨=&)S/4#8R>"8<4A=1/$JG'4A5SYLOB$%&OB4M1¨5%4#15'8#=$%



¢

!k

%=!/;5=" hIS=$%;",D/DBM4#8",YBAy=1$P)S/4#8R3",'G
GhYX-$E=&K0« «­r~ «;R¬B_|Rz9bU)S/4#8R34#$
PG'4#1/4#G;"8<=$%S$-OY/5-",DB¨"8R/4AF4#15
P5="#$H

IJ/4#$P"#$%="$4#G;4M#",-4A¡*YX¯).1°#D/&OB"8<4A=1/$O-4#$4#8
"1/N°)S/",P4#$Pc1/=)S1C"$

.k

«<{#« |}9­R«W&=G[#4A%-",O-S]roSYXb,?4#G
=DX=O/A=$bs¦E=c/Abc^``deRHÎ.=1/$4MNV"SÝKÛ(Þß¡àF×áÞâ-Ûrã
"$%0)S
cO/1/N-N/$S=&.YBA=F8F$?",
=1¤
",YB#y4M1/4A4#"##*b9YBO/k
5="Â4#$=1/A*!%=>$"8¤=1

É]KeJ)S4##4#10/4#$?8"$%
8<=1:"4#1¤=1/A*>/y$-4#15A

YBA=F8j=1¤%=D=&"1/=EYBA=F8!ZHIJ
$%
"8<4A=1

2J!5oz  2

jhb/=)S4M15")."*C"#=$%T",D/DBM4#8",YBA'"8<4#=1/$yG
=F4#15¤",=O/1/N°YBA=F8F$h/",

",01=G
1:4A=1NÊ4#1±/!5="bS4H HAbÂ=)S4#15°")K"*Ë"M=$%¤"8<4A=1/$/",",-04A-A,"1H
IJ;G'"4#13N/47X1/8<
YX¡)1¥'ADB&O/U"8<4A=1B$POR4#$%4#8y"1/N/'8<=1/8<D/h=&.-A"1B8<'4#$
/",kA,"1/8<h4#1!hOB$O/"V$%1B$%P&-$S%=)SB",k4#$JOB$%&OB&(=?$%=AF4#15
/P)S=#L"$%HSZ.4#15

m

ADB&O/b=1TE=JB"1/NbF&-$K%=;$%=G
/4M15hB",J4#$KO/$%&rO/~(}0F«P}« ¯«£z9HÂIJB4#$K/"$K
N/4#$-"N"1:",5/",k/#D/&OBX/4#15$k1N0%=YXL8<=G;DBO%N0&(="8-¤$%",R8-$%",%bXYBOk

q£;

Å

2f$ÆÈÇi¤¦

"N,"1",5EB",DX=$$4#YBA*&",KA$$/4#15$.",?AD/&rO/F/"1T",A,"1:Hf£1=OK$%DX847698S$%4#15b
).5AD/&rO/"8<4#=1/$&=&("1:*:)K"*bc"$²"?$4#N.<X8<²=&B-OB1/1/4#15k#"FN;g?iSjlÂmlÂnjkohH
?8<=1/8#O/N/J/4#$$OYB$%8<4#=1
)S4A"1;<"G
DBA$=)k4#15E/",KAD/&rO/F"8<4A=1/$D/-OB1/4#15EN=c$
}9µUDB$%
8<=G
DB#%1$$bW"1BN"&)ôG;",-c$?=1¤;8O/1:?4M1%5-",4#=1¤=&y%8R/1/4#xcO
4#1:%=
=OS$%",R8-!"#5=-4A/G¨H



$)Æ$)°aYSÑWe:ZWYbTW(0\0

f_1/
&(=##=)S4#1/5$=-<"G
DB#b;AD/&rO/"8<4A=1/$LO/-4#$%4#8PD/-O/1/$S=OL"M$=#O4A=1/$k&=G

;:

×,

K$%",%$%DB"8<HÂF"*PK4#1/4A4M"$%",%4#$

q

"8<4A=1/$

1/"G


2
u2
u 2
u 2
u 2
u 2



u



8
8
8
8



8

-

N(e
e

]

(



"N/N

]

-



b"1/NhK",/&=#A=)S4#15

o:
):
¸: ;R:Ñ

ÐT : ;R:

¸: T   :

¸:  ,: ; 
ÐTe:  ,:

¸: T  :

]D/-

(



b/5="#$",-

e

]

e

]

e

]

8

e

]

e



f_1/4#$PDB#"1/1/4M15"$9bU",'¡)=)."*c$h=&J"8-/4#c4#1/5¨G;4M$$4#15T5="

2 



2  

2 

« 

PH>?1'=&./$%b

%=0YX
( b²NA%$w=y5=" wH¤IJ=y=1b u
- bU1/N/$DB8<=1/N/4A4#=1
"8-B4AN>69-$%JYc* u
b9"1/N!:O/$k4#1:=A$SO/$-4#15> µPDB#"1/1/4M15
"8<4A=1/$S4M1/$%%"N>=&Jµ,}X«S4M1¨

u

<

6B-$8"$%HÂiS#"FNTg?ikjklmklnWjov8<=51/4#$=1BA*
J69-$%"#%-1/",4Ab"$K4AÌÍ$k=1BA*y4#G

$%%D>=DB4#G;"=1HIJL$%J=&5="#$k",JP$4M15A?4#G
L$%%D8<",%N!Yc*w5-",DB>8<=1/$%-O/8<4A=1>4M$

Ï (  G8h :_
] Ke

IJ/4M$K54A$JO/$¡)=wAD/&rO/"8<4A=1/$b91/"G
A*

 G8$ Wu 2  ( : u2  ( 

É] Ke

2 

?1?=&$%b u
( b/N=c$1=8"O/$%L"1:*w$%",%P%-"1/$4A4#=14#1wL4M1/4A4#"9$%",%HIJ/=/=1b
b²A"N/$h%=0/w$%",%T)S/'=1/#* t4#$h%-OH¤IW=0/4#$$%",%b²).T=Y/"4#1°w$-"G
w$=&
u

2 

k
W2 

(

W2 

ADB&O/U"8<4A=1B$b8<=1:"4#1/4M15b",5"4#1Vb u
( "1/N u
( HwIJ/4#$E4MG
bW;6B-$%L"8<4A=1C8"O/$%$h1=
$%",%¨%-"1B$4A4A=1b)k/4#Aw¨$%8<=1/NÉ=1¨A"NB$
O/$YB"8C%=¨4#1/4A4M"$%",%HÉmkAD/&rO/"8<4#=1/$

 u 2  - uW2  

cO/$S8O$S=OJ$%=#O4#=1/$K&(-=GtP$",%$%D9"8<P=&U/4#$<"G
DB#L"$%H.hG;",T/",k
"$%'4M$N"N³1/N'&

2  - °
u

°

=1/?8"1T"A)K"*F$."8-



Y:*;",D/D9A*c4M15 u 2 

v"1BN

b

b

b"1/N

"1/NT/",S=1P8"1>"$-4#A*G'",PE"$%¨4#1:4AY9A?)S4A=O8R/"154#15'EYX/"F4A=H

f_1IJiJf_l.ÉN/=G;"4#1/$bK=1¤8<=O/#N2=4#8"MA*±=-8<=G;0/4#1/8<=G;DBA%1$$'=&PADB&O/

"8<4A=1/$yDB-O/1/4#1/5¨Y:*C8<=1/$4#NR4#15!1=y=1/#*w6B-$%#"FN¥D9#"1C/",'g?iSjlÂmlÂnjko

61/N/$b

YBO8<=G
DBO4M15!"c4#1BN3=&JO/1/4#=13=;"M²#"FN°DB#"1/$P/",
gEiSjlÂmlÂnWjot8<=O/MN¥DX=$$4#YBA*

+
] ~  

691/NVbJ)S1"#A=)S4#15É1=1Ê4#G
$%%Dv=DB4#G;"DB#"1/$HÏ!=DB84#$%A*b4#1Ê"±$%",-8-v$",%

Z~  :;+:F
Ï Ä  

8<=1/$4MN/-#"cNw"$%¤]
4#$h"8-/NHF"5="$%

× ~   Ê

&r"8<SA

.b

eRHÂíF%1/Nw?#"FNwDB#"1/1/4M15L5-",DBTO/1:4#9&"8<A

W",w%=DC&r"8<
A%=

Ï Ä  G 8 
=Ï°
µ

^EN=)S1T%='&"8<S#^,b/)Sb",J"8R!A

"Õ



ÂH¤IJ1VbDB=c8<N°&=G

bB"
$%

=&5="#$J4#$K51R",%N

ø 9ù>ú~¦20ûÀ$7ü`$22

MÏ° #(

"$E;OB1/4A=1¤=&

7Ï= #(

&r"8<L4#1

Ï

Å

$#ù#ý!þ2Fý

µ

)S4A0;D/-8<=1/N/4A4A=1B$k=&K"#"8<4A=1B$L4#1A

/",L"N/N3",LA"$L=1

HhïSDX=10%-G;4#1B",4A=1bN<691y"$EADB&O/"#"8<4A=1/$?/",L"N/N¤",EA"$%?=1
&r"8<E4#1

+

( HTf£h8"1°Y
DB=1°/",bU/4#$P)."*b'$%",4M15"8<4A=1B$L=&J"#=DB4#G;"Â$=#O4A=1/$L&(=G

",P8<=1B$4#NN¨/AD/&rO/HUmS=)b4#1¨"#X=O?FIJiJf_l.%$4#15;N=G;"4M1/$bFP8<=G
D9A%LG
=FN
"A)K"*F$S$%#8<$h|,{{",D/DB#4#8",Y9A"8<4#=1/$S"$J/AD/&rO/H

$)Æ$'&b9:ZW98%hY:Z6Qa9bK6'b9:%adcZWYhT8%P!


j$²/"$Â"#"N*Y1
1/=%N'",²S*yY54M1/1/4#15=&/4#$²$%8<4#=1b).S4#1:%5-",%k#D/&OBc"8<4#=1/$
D/-OB1/4#154#1:%=J=O$%",-8-y"A5=R4A/GvYc*E=1/A*?",D/DBA*F4#15J4#WN/O-4M15K$4M15A1&=-8<N/4##7³¯8M4#GPY94#15
%*bUA"F4#15¨/'8<=G
DBA%YX$%_³6B-$%L$",-8-°"A5=-4A/G

+

$%",%

O/1/8-B"15NË]r$%Tc8<4A=1°aeRHT\/"84#1/5"

°N/OR4#15LY/-"N6B-$%K$%",-8RT&(="YX%%J$%",%L4#11&(=R8<NwB4##7³¯8#4MGPYB4M15b)EA=c=;=1/#*

"É]Z+²eRHPIS/4#$k1/N-$k=OE4#G
D9AG
1:",4A=1!=&1&=-8<N¤/4##7³

",?=$%
$O/88<$-$%=-$?51-",%N3Y:*

8#4#GhYB4#1/5L4#1/8<=G
DB#%J1'=1w4#1:4AYB#DB#"1/1/4M15E"$%F$HmS=)b/4M1'"#B=OÂ%$%4M15hN=G'"4#1/$b
L"$c$S/",S8"1/1=SYL$=AN>Yc*1/&(=-8<N/4##A³¯8#4#GhYB4#15POB$4#15
ADB&O/X"8<4A=1B$JD/-OB1/4#15y",
<"8<A*T=$%L/",k8"1/1=JYXL$%=AN>Y:*w1&=-8<N!/4M#7³¯8#4#GhYB4#1/5L"1*c)."*H

mÒ /4Ñ  

  

Óüu2 ³¥ å¥ "u

IJ¨$%8<=1BNÉD/-O/1/4M15>%8-B1/4#xcOT/",
)¨4#1:%=FN/O/8<T4#1C/4#$y$%8<4A=124#$yG
=4A,",%NÉY:*°¨=Y³
$%,",4A=1B",P4#1$%=G
'DB#"1/1/4M15wN/=G;"4#1/$?-'",;5="Â=-N-4#1/5T8<=1B$%%-"4#1:$b"$P/"$LYX1
8<=51/4#N>Yc*TxcO/4A%h";1:OBGPYXJ=&U$%",R8--$4#1TPDB"$%]f£-"1/4sÈÎK15b^`d:-O/G'G
=1/N



spÎO-4Ab/^``c =$#4#1;s[iJ="8-VbX^``,eRHÂf£1'=O²<FDR4#G
1:$=1;"$%F$)S4A
5="B=-N-4#1/5L8<=1F³
$%%-"4M1$bF\U\.ÌÍ$KYB"$%E",-8-B4A%8<O?$%=G
4#G;$K)."$%%NT"yA=.=&V4#G
?"8-B4Ac4M15h5="M$K/",.1/NN
%=!YX'8",-N¥&=h#",%=1HTw&=N#=DN¥"!OR4#$%4#8y%=04#1&=-Gq$%",-8R°",YX=OP5="
=-NR4#15$H
IJ/h8#"$$-4#8"W<"G
DB#h&="DB#"1B1/4#15'N/=G;"4#1>)k4A!5="=-N/-4#15'8<=1B$%%-"4#1:$?4#$S/h).#
F1=)S1ÝKÛ(ÞFß£àc×áUÞâ-ÛãBH"*¨).h/"h-LYBA=F8F$Sjhb9Z["1BN0Î=1!P",Y9AP4#1/4#4#"#A*b"1/N!)."1:
%=É$%"8ÊG

$O/8-Ê/",w).0/"Zt=1Ê%=DË=&yÎb."1BNËjõ=1Ë%=D=&PZH?Y:F4A=O/$#*b

4#$;1/=GO/8-2D=4M1'4M1¦$%"8F4#15CjÓ=12Z

6BR$%HÊok=)PbJ4#G;",54#1>"¥&(=-).",-NË$%",-8R/4#153D9#"1/1

R+

8<=1&=1:%N')S4#'"P$",-8-w$%",%

Ï

T	

+

.b:)kS$%=G;S5=" [/"$ O/$%²YX1'"8R/4ANbF4H HAb $-O/A%N

«6

&=Gq$%=G
'=h$%",%Y:*¤",D/DB#*c4#1/5w"1°"8<4A=1

Ï¯D
|Ï

w)S4A

$4AOB",4A=1°M4AB4#$h4M$b)."$
4#h"05=:=FNÉ4#N"%="8-/4A

[

96

É"NBNW] eRH'/",L=1'8"1°"$%¤4#13"

«[

+R4A5y1=)

ò
$/=O/#N¥$=G
T=

5="KYX"8R/4ANC6B-$ t?Oy"1/$%).
4#$h4M1/$%DB4A-NY:*¥8<1y).=3=&E=:BA"1BN°mk=,XG'"1/1

&Ï
Ï

],"eRb)S/4M8-±",5O$;/",;"8-/4#c4#1/5
1=
YX¨"8-/4#N¦)S4A/=O
N$%%=*c4#1/5

Ñ$=O/MN¥YX¨DX=$%%DX=1NÉ4A&S/¨G;"4#1/4M15!5="#$8"1

q",5"4#1H2&8<=O-$%b691/N/4M15!=O",Y=O/B4#$
4#1:=A$

$%=AF4#15¥-G;"4#1/4#1/53DB#"1/1B4#15"$%Hpmk=).b)¤8"1",-4A0",T"°*¦$4MG
DBA>Y9O
=OL%$4#15>N=G;"4M1/$

°

­+
)
RÏ ZÏD 96 ­6
Ó]

3N] ek4#1

O

.H0IJwG
=FN¥).w",-wO/$-4#15!4#$"$$4#G
DB#'"$/4#$

R+

f£&²#"FN$%=MO4A=1DB#"1b 
bX/",Lg?iSjlÂmlÂnjkoÈ51-",%$?&=

b/",ENA%$

4#1

$O/D/-4#$-4#15A*T"88O-",%w",D/D/=F4#G'",4A=1¤Y:*O/$-4#15T
#"FNDBM"1¤/",

g?ikjklmklnWjo©51-",%$y&=h/w$%",%

6D 

°

+

$%",-8R!$%D9"8<bB4H HAbBN=;1/=J51-",%"1*T$O/88<$$=-$J%=
¸«{A«r~rµ,}wO-4M$%4#8,H

§6

KbX8<=1:"4#1/$?"1¤"8<4A=1

+

cÌÍ$?1=1F³-#"cN-$4#=19eRbX10)G
=

cb

2&=GÓ

KHh8"#B4#$G
=FN¨'|¸¸«¸;:µ|,{

nWO/$P<cG;DB#4A&*/OR4#$%4#8
)k4Aw",Y=¨Ý.ÛÞFß£àc×áÞâ-Ûrã0<F"G;DBAHF"*3'D9#"1/1

B	

/"$

O/$%E"8-B4AN

6À

76 À

]rjPbÍZJeRbVY9Ok)k4A

]rZb ÎJe$4##Y4M15&r"#$%bV4H HAb)
",;4#10
$4#O/",4A=1

"Õ¦

Å

2f$ÆÈÇi¤¦

)S-LjÕ4M$=1>%=D=&²Zkb9"1/N>Z["1/N0Îv",P$"1/N/4#15
=1>P",YB#HIJE-#"cN$%=#O4#=1T/",
g?ikjklmklnWjoQ61/N/$K%=;/4M$$4AO/",4A=1¨4M$E&=#A=)k4#15H

E    3O½5oz $
 2JY5"z  2 $
juZ

Z

 3q½5oz
W6 À

b

b

$ Ö

ZQÎ

IJS5="

%	

  3O½5oz

]rjhbÍZeRbc)S/4M8-;/"$ %OB$%²YX1'"8R/4ANbc5$N/A%N;Yc*yJ6BR$%²"8<4A=1

ZHcÎ.=1/$x:O1:A*b).J"M4A/",
D/-OB1kB4#$ÂDX=$$-4AYB4##4#¯*y&(-=G

3O5"z

j

4M15LjÊ=1%=PZÉR4A5²1/=)¦)K"$²D/-=YB",YBA*"EYB"N
4#N"Fbc"1/N

E$%",-8-¨$DB"8<b/)S/4M8-$O/A$K4#1T"y$%=#O/4A=1wDB#"1w/",

=1:%=TÎË6BR$%H

3O½5oz

$JZ

n4A'4#1¥;D/8<NB4#15!$O/YB$%8<4A=1b)w8<=1/8#O/N/;)S4A3"1¥<F"G;DBA'$/=)S4#1/5>/",PDB-O/1/4#1/5
$%",-8RÉ$%",%$
4#13/G;"1/1/N$-8<-4AYXN3",YX=TN=c$h1=D/$8<=G
D9A%1$$b²"1BN¥)S4#¥"
&)[G;",F$=1¨=O/S8O1:J$%",-8R!"A5=R4A/Gt4#G;DBAG
1:",4A=1H

$'&($)°aYSÑWe:ZWYbTW(0\0


f_1¨E&=#A=)k4#15
$G;"#X<"G
DB#b=1L=&UE5="#$P»¬c<YX?N/$%%=*N%G
DX=-",-4MA*'4#1T=-N/J%=
"8-B4A/=5="H0IJ/4#$E-1/N-$PD9#"1/1/4#1/5w"$¥O/1/$%=#",YB#
)S13=1/w4#$hO/$4#1/5>
"N/NN'5="9N/A4A=1'/O-4#$%4M8,HUF"*
k4#1B4A4#"$%",%?4#$²G;D/¯*bcS5="M$",

O

",L/E&(=##=)S4#1/5y"8<4#=1/$

1B"G


W2 
uW2 
u

:
):
8
¸: ; R:

8 Ð;R:  : ;R
u2 
uW2 

j#V$%=#O/4A=1/$%=/4#$"$%>1/N!%=w",D/DBA*

|

; :

]DB

"NBN

b"1/N'

NMe

]

e

]

e

PbO/$%

t",&%b9"1/N!<³$%",YBM4#$



hHIJ

8<-O/84M"DX=4#1V/²4#$/", Ê»¬c<YX%G
DX=-",-4#A*N$%%=*NHIJ²"N/N/NE5=":N/A4A=1LO/-4#$%4#8
4#$k1=k"NxcO/",%h&(=?$O/8R>DB#"1B1/4#15y"$%F$HSIJ/L<F"G;DBAP4#$kN"NF³1/N!&(-b"1/N!=1h8"1"$4##*
G;",L/P$8<1/",-4#=;4#1-4AYBA?)S4A/=O8-/"154M15;EYX/"c4A=S=&hO-4#$4#8,H
ï1/#4Ah&(=E#D/&OBW"8<4A=1/$bX8<=G;DBA%1$$?8"11=YXh-5"4#1N0Y:*$%=G
=)Õ1cO/G
R",4#15
"#XM"cN¨D9#"1/$K%='";$-4AO/",4A=1HUf_1¨L",YX=h<F"G;DBAb)S1

4;hTSz0W
 $'&($'&b9:ZW98%hY:Z6Qa9bK6'b9:%adcZWYhT8%P!

$%4#M

bF1>"#-#"cNTD9#"1/$8<=1:"4#1

Wu 2 wb/NA4M15-PH



#

u/"$JY1¨"8R/4ANYBO

4#$


O/$%hh"N/N/N!5="UNA4#=1!OR4#$%4#8L4M1!")."*!$4#G;4M#",J%=wh4#1:%5-",4A=10=&yADB&O/
"8<4A=1/$KO/-4#$%4#8,HUj$4#1BN/4#8",%N'",Kk*;YX54#1/1B4#15E=&V?$%8<4A=1Vbc4A.4#$.4#1%5R",%Nw4M1%=
$4#1/5AÂ1&=-8<Ny/4#M7³¯8#4#GhYB4#15.%*LB",U$",-8-
N=c$b"1/Ny8<=G
DB#%A*EO-1Nh=,wNBO-4#15SY$_³6B-$%
$%",-8RbB4#1¨8"$P1&=-8<N>/4M#7³¯8#4#GhYB4#1/5PN/4#N/1VÌ KG'",P4A%=;E5="H
¤"#$%=¥OB$%!"1=w5="k=-N-4#1/5%8-/1/4Mx:ObK",1Ê&=GÐ#4A%-",O-Hv?1/>=&E
G
=$%w8<=G;G
=1",D/D/-="8-$%=CN/"#4#153)k4A¦5="=-NR4#15$;4#$'%*F4#153%=C8<=51/4A0G

4#1

"¤D/DB=c8<$-$4#150DB/"$%b"1/NÉ1¦O/$w/GÒ%=D/-O/1w&-"8<4A=1/$
=&k>$%",-8R¦$%DB"8<>NBO-4#15

J

DB#"1B1/4#15]f£-"1/4s©ÎK1/5bU^`d:²ÎK1/5Tsÿf£-"1/4bU^``c =$#4#10s

iJ="8RbÂ^``,eRHhIS/4#$4#$?"#$%=


YB"$-4#8yD/-4#1B84ADBAO/1/N-#*c4#1/5';$%=,³¯8"MAN[ð_5="Â",51BN/"ñ!",D/DB="8-2]rL=:/#bÂ^``eRH\/=
=O.$%*c$%G¨b).k/"4MG
DBAG
1:%N
"P$-#4A5:A*$-4#G
DB#4A6BNPR$4A=1;=&Xk5="9",51BN/"P"A5=R4A/G¨b
"1/NTO/$%?4A.%=
&O/.1//"1/8<?DX&=-G;"1/8<Hj[-*$=-.$OBG;G;",*
=&)S/",K/",D/DX1/$.4#$./4#$H

"Õ



ø 9ù>ú~¦20ûÀ$7ü`$22

Å

$#ù#ý!þ2Fý

f_1¥"¨D/-D/=F8<$$4#15¨D9/"$%b;DB#"1B1PA=c=c$P",h"#ÂDB"4A-$?=&5="#$"1/N3N/84#N$P/O-4#$%4M8"#A*
)S/-4#$"1w=-N-4#1/5P8<=1/$%%-"4M1.YX¯).1/G¨H²jS&%)K",-N/$bc5="X$%4#$Â$%D9#4AÂ4#1:%=
"E%="##*h=-N/N;$%-4#$=&$OYB$%$U-$%DX8<4#15E$%S=-N-4#1/5$HIJ/$%S",J/1
&(N;%=L1&=-8<N

?Ï ( :OlOlOlT:;Ï?n
aÏ (
+
MÏ ( `Ï
iÏ ( g` Ï - `?Ï 4

/4#M7³¯8#4#GhYB4#154#1¦"1¦4#1B8<G
1:"JG;"1/1HËl²-84#$%A*bK4A&

É4#$y!=-NNË$%-4A$
=&

Ï

$OY9$%$bF1&=-8<N¨/4##A³¯8#4#GhYB4#15E5$K69-$%K$%",%N¨=1T?=-4#54#1/"X4#1/4A4M"B$%",%P"1BN

¡+

).=c$K=O/b/$%",-8->1/N/$4#1T$%=G
E$%",%

C$",4#$%&*c4M15h/E5="#$4#1

1T8"#ANw",5"4#1w=11/)$",4#15$%",%

3"1BN/#",-55="$%

$",4#$&(*F4#15/4#$b$%",R8-
5$²$",%N
&=K5="#$

Yk

( H²f¡&W/",

HÂí1&(=R8<NwB4##7³¯8#4MGPYB4M15L4#$

- H²\=G

"y$%",%

b"1/Ny$%=E=1HUIJ4#1B8<G
1:"b=

|c«<}9¸|®_¸,~ ,«<}Bb9DBM"1/1/4#15yD/-=c8<$$S8"1!YXP",D/D9#4ANT%="1:*¨DB#"1B1b/4#1¨DB-4#1/84AD9Abc"1BN>D/$$
8<=G
DB#%1$$²=1BA*P=1N"NF³1/N
&J"$c$]rE=:BAsvmk=,XG'"1/1b:,"eRb/4H HAb:",5"4#1b).S/"
"11//"1/8<G
1:?/",?A=$%$8<=G
DBA%1$-$4M1>51-"HIJcO/$b9)yO/$%h5="",51BN/"w=1/A*¨4#1
1&=-8<N>/4M#7³¯8#4#GhYB4#1/5bA"F4#15
/P8<=G
DBA%PY$_³6B-$%$%",-8R>DBB"$%LO/1/8R/"15NH
IJ/L5="",51BN/";%8R/1/4#xcOL*F4A#N/$KRO/14MG
L$"F4#15$k4#1>N=G'"4#1/$)S/L",L=-N/-4#15
8<=1/$%%R"4#1$wYX¯).105="#$Hôf_12=O/w%$4#15É$O/4A%bJ/$%",/¤ÝKÛ(Þß¡àF×áÞâ-Ûrã±"1/NÊ

H

~%«

<

µ,R{A¸,Hf£1¥DB#"1/1/4M15T"$%c$h)S4A/=OL=-NR4#15>8<=1/$%%R"4#1$b/$%-4#$L=&J$OY9$%$P8<=#M",DB$%$

4#1:%="$4#15AP1%*bX$O/8R!B",k",51/N/"wG
8-B"1/4#$G+N=:$1=8-/"15y"1:*:/4M15'-HJIJ
-O/1:4#G
?",1&(=SED/<³D/-=c8<$$S4A$%A&)."$k15A8<4AYB#L4#1¨"#X=OJ<FDX-4#G
1:$H

¬ %ñË
$  &


Ê, 

(' ª

ËEÇ

c=w&",b).y/"y$%%R4#8<%N0=O-$%A$%=wDB#"1/1B4#15;"$%F$?$%DX8476BN4#1!/$4MG
DBAIJiJf_l.>#"1F³
5O/",5HL)S4##1=)Q$=)[=)[=O/J",D/D/="8R!8"1¨YX?<c%1BNN¨%=;N"X)S4#¨jk?nË]rlN/1B"O/Ab
^``eS"$%F$bG;=PD/-84#$%A*b/)k4A>jk?nÉ$OY9$%S=&²l?nv]rÏ08kRG
=%?"HAb^``eS/",
)K"$O/$N24#120,1/NË4#1:%-1/",4A=1/"SDB#"1/1B4#15$%*F$%%G;$w8<=G
DX4A4A=1p]rZK"88R:O/$b,eRHuIJ/4#$
4#1:=A$'N/"#4#15)S4#±",YB4A%-",-*°&rO/1/8<4A=1³¯$%*cGhYX=K&(-¨6B-$%
=RNA=54M8T&(=-GO/#",b"1/N¦)S4A

O

8<=1/N/4#4A=1/"X<X8<$HK?O/<c%1/$-4A=1¨).=w4M$JN/4AF4#NNT4#1:%=
E&=#A=)k4#15y&(=O/S$OYB",-"$

^,HSjkD/DB#*w"
DBD/=F8<$$4#1/5y",DBD/="8-!%='hjk?nCN=G;"4#1>"1BN¨"$%>N$8<R4AD/4A=1b8<=G
D94##4#15
/P$%DX8476BNT"$%TN=)S1>4#1:%='"yD/=DX=$4#4A=1/"X1=-G;"V&(=-G>H
cHSí²c%1BN±!O/-4#$%4#8w,"#O/",4A=1É=&?DBM"1/1/4#15¤$%",%$%=¥N")k4AÉ$%!1/=-G;"K&=-G
8<=1B$%%-O/8<$H

	
	

ócHSjN O/$%EDB-O/1/4#1/5h%8R/1/4#xcO$H
îHSjN O/$%L$",-8-G
8-/"1B4#$G;$H

ôWÒ#}vWv  2#vxu5  3q3T'rwý24  $v

 yx~3qz

¥ 2 #w

\U\.ÌÍ$ED/D/-=c8<$$-4#15wDB/"$%
4#$?"#G
=$L4#N1:4#8"%=¨
G
=FN=A=5*0/",L/"$?YX1NA=DXN
&=JLf_lÂl2DB#"1/1/4M15$*c$%%G>HÂ\=kN/"4##$b).L&JE"N/S%=;P)=w/",ÌÍ$SY1!N=1
w]rE=:BASsômk=,XG;"1B1b9,,YeRb"1/N¨54AE=1/#*EY9"$4#8?D/-4M1/84ADBA$.H
IJ/0D9#"1/1T$%",$¨)k4A"°D9#"1/1/4#1/5¥"$%$%DX847698",4A=1Ê54A1v4M1Ë/¤$-OYB$%T=&hl?n
N<691/NÉ&(=;/!jSf_l.c³¡,DB#"1/1B4#15¤8<=G
DX4A4A=1[]rZK"88-cO/$bS,eRHIJ>4#1/DBOy4#$
"3$%;=&
=DX-",%=h$-8-G;","Fb'4M1/4A4#"U$%",%bU"1/N3"¨5="Â&(=RGhO/M"FH;IJ;4#1/4#4#"$",%4#$L$-4#G
DBA*"¨$%
=&5=O/1BN!",%=G;$b"1/N!P5="&=-GO/#";4#$k"1",-YB4A%-",*w6BR$%J=-N?A=54#8"W&(=RGhO/M";O/$4#1/5;

|6

#",4#=1/"Â$%*FGhY=M$PN<691/N3&=hDB#"1/1B4#15T"$%Hj1*=DX-",%=y$8-/G;"

"ÕÖ±

!4#$hN/<691N3Yc*3"

Å

2f$ÆÈÇi¤¦

#4#$=&DB",-"G
%-$b/"hDB8<=1/N/4A4#=1bc"1BNw"
M4#$%Â=&<X8<$H²f_1/$%"1:4#",4#15y?DB",-"G;%-$K*c4##N/$b

	

O/$%?#4AyIJiJf_l.¨"$%c$E",-yOB$O/"#A*¨$%DX84769NbBy"8<4A=1/$?%=Ty$8RG;"FHLIJD/8<=1BN/4A4A=1

,+

4#$"1¤",YB4A%-",-*](69-$%=-NeJ&(=RGhO/M"FHk\=L"1¤"8<4A=10%=TYXh",D/DBM4#8",YBAP4M1!"w54A1¤$%",%

­+

4#1/$"14#",4#=1T=&B4#$K&(=RGhO/M"
GhO/$YL$-",4#$_6BN¨4#1

µ

KHÂíÂ"8R><X8<

)+* / O: lOlOlT: * -n , B]/.  ]96e;:"NBN  ]96e;:N/  ]96e%e
* / :OlOlOlT: * 0n , ", SJ<X8<Â DB",-"G;%-$b.  ]96e²4#$S<8<.8<=1/N/4A4A=1 °

mkb

&=-GhOB#"

°

96

"1/N0"N/N

.b4A$

4#1>L#4#$%/"$JL&=-G

",5"4#1b"1'",YB4A%-",-*

96

] ek"1/N¤N ] ek",y",%=G'4#8y"N/N"1BN0N/A%h<X8<$bV-$%DX8<4AA*H?IJ

",%=G;4#8S<8<$K",$%$=&VO/1/4#1/$"14#",%N'",%=G;$bF4H HAbM",4A=1/"B$*cGhYX=#$²8<=1:"4#1/4#15P",-4M",YBA$H

µ

1.  ]96eE4#$P"#OB",%NH

IJy$%G;"1:4#8$E",/",bV4A&"104M1/$%"1:4#",%N¤"8<4A=14#$k<c8O%NVbV1bX&="8R3$4#1/5AP<X8<

.   ]96eL=#N/$P4#1w8O1:P$%",%b1¥8<=-$%DX=1/N/4#1/5T4M1/$%"1:4#", 4A=1/$P=&./",%=G;$4#1

4#1¥#4M$%b"1/N°&=h"8RC4M1/$%"1:4#",4A=13=&J4#$LDB",-"G;%-$bUT8<=1/N/4A4A=1
f£&

"N/N

96

96

] e",E"N/NNT%=yE$%",%bB"1/NwE4#1B$%"14M",4A=1/$.=&",%=G;$S4#1N/ ] e",EG;=NT&=G

P$",%H

f_1'\U\.ÌÍ$ÂO/-4#$%4#8G;=cNVb"8-T$4#1/5A$%",%k,"#O/",4#=1'8"1'4M1=AS=O/$"1/NB$=&=DX-",%=
",D/DBM4#8",4A=1/$

°

YBO/4##NB4#15'/M"cN°DB#"1/1B4#15¨5-",DBVb=1w1/N/$P%=N%RG;4#1'"M",D/D9#4#8",YBA

"8<4A=1/$'",;"8-Ë$4#15AT&r"8<'#"*H±!-&(=>4M1$%
/><=-;%=38<=G
DB4##w/>=DX-",%=
N$8<R4AD/4A=1/$.N=)S1¨4#1:%=y"yGO/8-¨$-4#G
DBA.D/=DX=$4#4A=1/"B1/=-G;"&(=RG¨b$O/8-TB",JO-4#$4#8J,"7³

6

O/",4A=108"10YX4#G;DBAG
1:%N><@84#1A*HL?Ok691/"1=-G;"&=-G+"8<4#=1/$
&=-G;",H

Â

96

l²-8<=1/N/4A4A=1 DB] e

O

96 ;:
96 ;:

96 ;:
96 ;:

 96 ;:

 96 ;:  96

;/"/h&=#A=)S4#15

96 32
96 32

]DB / ] e "N/N / ] e N / ] e%e

íX8<$

]DB ( ] e "N/N ( ] e N ( ] e%e
H
H
H
]DB

] e "N/N

] e N

] e%e

IJ/kD/-8<=1/N/4A4A=14#$."$=&5=O/1/Nw",%=G;$HÂn4A)S4#$b?<X8<K8<=1BN/4A4A=1/$D/

 96

] e=&

$4#1/5AS<X8<$",?$%%-4M8<%N'%=yYXk5-=O/1/Nw",%=G;$H²E"#$%=D/-$%1.5="$%",%E"$"h$.=&
",%=G;$HEIJcO/$b).y8<=G;DB4#A")K"*0*:B4#15'<8<D/?
8<=1/N/4#4A=1/"V<X8<$HhÎ.=G;DB4##4#1/5;")K"*
!#=54#8"&=-GhOB#",!4#1:=A$;%R"1/$%&=-G;4#15¤G

4#1:%=3o\.bÂ)SB4#8-¦8"OB$%$'"12<cDX=11:4#"

YBA=)ËOD4#1
51-"Hf_1;=O/Â%$%4#1/5PN=G;"4#1B$b=)bF).S&=O/1/N
B",Â/4#$²%-"1/$%&=-G;",4A=18"1
YXPN=1h4#1¨"$%=1B",YBAL4#G;HÎ.=1B8<-1/4#15
/h8<=1/N/4#4A=1/"<X8<$b=$%h8"11=SYXL8<=G
D94#AN
")K"*w)S4A/=O"1=/.<FDX=11:4#"BY9A=)ODVbc54A1w/",K))K"1K%=yD/$%-$%=MO4A=1'#15H
IJ/4M$
)."$wD/-=1ÊY:*¦okYXh],eRHôj$').)k4##J$%bk8<=1/N/4A4A=1B"<8<$¨8"1Ê<@84#1A*±YX
4#1:%5-",%NÉ4#1:%==Oy"A5=-4#/G;4#8
&-"G
).=b²$%=!/w4M$h1=01N°&(=
8<=G
DB4M#4#15¨G

O

")K"*H

IJL8<=G;DB4##",4A=1TDB=c8<$-$D/=F8<N/$J"$&=#A=)S$

^,HS%-G'4#1;D/-N/4#8",%$E/",h",T|r~­bU4#1¤$%1/$%
/",h1=¨=DX-",%=h/"$P"1<8<h=1
/G¨HkFO/8R>D/NB4#8",%$S","'8<=G;G;=1!DB/1=G
1=14#1¨YX1/8-BG;",T"$%F$HJjk1!<F"G;DBA

[ V [54

",-Sy]r4#1F³¯84A¡*

q

[ V

eU&r"8<$K4#1;èUÞéå#×êårß-×Â"$%c$ Uj1:*;A=c8",4#=1

@[4

)k4A/4#1¨/$"G;84A¡*

$%"*F$bc=&V8<=O-$%bFA=F8",%N

E=O/5=Oh)k=APD9#"1/1/4#1/5
D/=F8<$$HSy8<=51B4A$",4#8

DBN/4#8",%$Yc*¨"
$4#G
D9AE$%)D!=?"#X=DX-",%=k$8RG;","FH

"Õ

<÷

ø 9ù>ú~¦20ûÀ$7ü`$22

Å

$#ù#ý!þ2Fý

q

cHSI-"1/$&(=-Gò"#X&(=RGhO/M",L4#1%=;xcO/"1:476B%³&L?o\HIJ/4#$K4#$S$OYN/4AF4#NN4#1%=
/P$%%DB$

]r"eTlÂ<³¯1=-G'"#4A
"#UA=54#8"U&=-GO/#",Hy\=#A=)S4#15!g?",1°"1/NL1=YB#=c8-C]_^``deRb/4#$
DB=c8<$-$E<cD9"1/N/$L"#Âx:O/"1:476BR$bW"1/N%R"1/$#",%$L1/5",4A=1/$H'1/N3O/D3)S4A¤&=%³

	

	

GO/#",?/",",EG;"N/ODT=OK=&8<=1 %OB1/8<4A=1/$bFN/4#$ %O/1B8<4A=1/$b"1BNw",%=G'$8<=1"4#1B4#15
,",-4#",Y9A$H

]Yef_1/$%"1:4#",%E"#9DB",-"G
%R$H²IJ/4#$4#$.$4#G
DB#*N=1/kYc*'4#1/$"14#",4M15h"#B=DX-",%=J"1/N
<X8<'D9",-"G
%-$')S4A±"#¡*:DX>8<=1/$-4#$%%1:'8<=1/$%"1:$'=1/>",&(%>=HËIJ
DB=c8<$-$G'",$;O/$%w=&SF1=)kAN5T",Y=O/y$",4#8wD/N/4#8",%$b²4#1¥/T$1/$%T/",y
4M1/$%"1:4#",%Nw&(=-GO/#",8"1T=&(%1wYXk$-4#G
DB#4A6BN>]rE=c/AJsQmk=,G;"1/1b/,,YeRHÂ\/=

7 6

<"G
DB#bV4A&Â"14#1/$"14#",%N$",4#8D/N/4#8",%>]

eS=F88O-$?4#1¤"T&=-GhOB#"Fb"1/N0/",

1 6

4M1/$%"1:4#",4A=1'4M$J}9µ98<=1"4M1N4M1
k4M1/4A4#"$%",%bF10]

4;hTSz0W

H

]r8eTI-"1/$&(=-G

e8"1YSDB#"8<N')S4A

&=-GhOB#",'4#1:%=0?o\.HIJB4#$P4#$PDX=$%%DX=1N¥O/1:4#²",&%
4#1/$%"1:4#",4A=1VbYX<³

8"OB$%;4A?8"1¤Y
8<=$%#*bV$%=>4A?$=O/#NYX",DBDB#4AN%=>"$E$G;"#&=-GhOB#",
"$?D=$-$4AYBAH
f_1É"!&rO/##*¤4M1/$%"1:4#",%NC&(=-GO/#"Fb²4#4#$#4A#*/",
G;"1*°$%",4#8w=
=1<³)K"*¥DBN/47³
8",%P=c88O-1/8<$8"1¨YXDB#"8<NTYc*
&=-GO/#"
$%%RO/8<OH

:Z8ZRTW

=

4hTSz0W

bc$O/A4M15h4#1T"yGO/8-¨$4MG
DBA

Q	

ócHS\U4#1B"#A*bX4A&
?ok\Ë=&"1:*!&=-GO/#"'8<=1:"4#1/$EG;=hB"1=1/yNB4#$ O/1/8<b108<=-<³
$D=1BN/4#15
<X8<b=DX-",%=bX=?5="8<=1BN/4A4A=1!5$E$%DB#4AkOD04M1>yG;"1/1D/=DX=$%N!Y:*
gE",1"1/N¨P1=YBA=F8]_^``deRH

ôWÒ /_ ¤¥ 
¥1=)

Ó 4vqy­vGe4Ñ¡8!xòYu# J our ¥ l¬ |  5 T3

  

$=)

=)q=O!$%DX84#"M4AN[g?iSjlÂmlÂnjko

4#G
DB#G
1",4#=1b"$>)."$>N/$8<-4AYXN4#1

c8<4A=1ËîHçócbS4#$8-/"1/5NË%=CN"k)S4A¦j?nô8<=1/$%%-O/8<$HQZKO/4##N/4M15¤=1¦=OT1=-G;"M4AN±"$%
D/-$%1",4#=1bB4AJ$O@8<$%=;",8",L=&U8<=1/N/4A4A=1B"X<8<$H

9($'&($);:GWeSµh=<TW!>/Sµh9bTbT6'b?A@>8%hBC¤0ED.6Q:A=aTb=>¤6":Z6Qa9bThTSGF4747W(PZ:M0
?O1B8<=cN/4M15h=&DB#"1B1/4#15h5-",DBTYBO/4M#N/4#15P&(=J-#"cNT"$c$J"MG
=$%J4#G;G;N/4#",%A*'8",--4A$=
%=Éjk?nu"8<4A=1/$w4#1±0",YX=0D/=DX=$4A4A=1B"1=-G;"S&(=-G>Hp?1!$4MG
DBA*É1N/$'%=°D"1

9¢

"N/N/4#4A=1/"#"*G
GhYX-$/4#Dw,"#OP&(=S"M« «-­K=&"1!"8<4A=1HKIJh#"*G
GPYX-$-/4AD¨=&"1
<X8<S4#1/N/4M8",%$K6B-$%#"*J)SE"#4#$K<8<S8<=1BN/4A4A=1/$.DBMO/$Â/L8<=$%DX=1/N/4M15h"8<4A=1VÌÍ$
D/8<=1BN/4A4A=1/$",KD/$1HI=?8<=G;DBO%K$%G
GhYX-$/4AD4#1:%5-$4#1y"1y<@84A1:G;"1/1b,).

 96

DT"L8<=O/1:%&=Â"8R'<X8<

4D0D/

µ

6

=&"1'"8<4A=1

:bc)S/4M8-y5$.4#1/8<G
1:%N;"8R'4MG
S"L8<=1/NB4A4A=1

¡ED

] eYX8<=G
$SDB$%1:b|,}9¸P"8-4#G
h";D/8<=1BN/4A4A=1

   96 O ß  96 O

 96

96

!D/-] e=&Uh8<=-$%DX=1/N/4#15

"8<4A=1±YX8<=G
$yDB$%1:HCIJ/w<X8<;5$;4#$
#"*'G;GPYX-$B4ADC$;"$;$%=c=1±"$
4A$
8<=O/1:%
"8R$

D/-

] e

D/-] e

H.IJ?<8<ÌÍ$"N/NT<X8<$k"NBN

] eK",E/1>$8-/N/O/ANT&=JL1<F

#"*HÂIJEDB=c8<$-$J4#$J4A%R",%N>O/1:4#"#X5="#$k",L"8RN>?69-$%4#G
H

9($'&($'&H:GWeSµh=<TW!>/Sµh9bIFJ<9:Z8%hTP(:Z6aTbKD.6Q:+A°aTbB>96":Z6aTbTh9SLF4747W(PZ:%0
IJw#"FN°DB#"1°<c%-"8<4#=1CG;8-/"1/4M$G

&(=
jnvNB47R$P&=G

4A$yIJiJf_l.¥8<=O/1:%DB",y4#1

G
#*>¯).=¨#4A%AN"4##$H?f_1/$%%"N0=&$A8<4#15T"8-/4#c4#1/5w"8<4A=1B$bXy<c%-"8<4#=1G
8-/"1B4#$G
$%A8<$?"8R/4AF4#15'<X8<$HP?1/8<"1!<X8<

µ

76

=&Â"8<4A=1

"Õ

ö

;4#$$%A8<%NbX"#=&Â4A$S<8<E8<=1/N/4#4A=1/$

Å

6

DB#OB$

2f$ÆÈÇi¤¦

 96

:ÌÍ$PD/8<=1/NB4A4A=1/$?1N¥%=>YX
DBOL4#1:%=>4Ah8<=$%DX=1/N/4M155="$%$HTjS&%)K",-N/$b1=

=1/A*¨/h<X8<ÌÍ$E=)k10"NBN!<X8<$L"N/N

] eS",-G;",-N

:(8ZRTW
FC c6

"N/NNw&r"8<$K=&"#9<X8<$/",",y~(»kz9{~«¸,bB4H HAbc/=$%?<8<$ ;=& P)k4A'DB

6

A 96 ³d

 96

",/h4#G;hYX4#15bYBO"#$%=w
] e

¦D/-

] e]r4#1

DB",4M8O/#",b/4M$U)S4##cYXSO/1B8<=1/N/4A4A=1B"<X8<$Â=& cb)k/4#8-
B"k"1;G
D/¯*y<X8<8<=1/NB4A4A=19eRH

ôWÒýt 4  hvWv   #wyx  5 #/M r 3
Z.=;D/RO/1/4#15k%8-/1B4#x:O/$&(-=Gÿc8<4A=1'¢E"$4#A*8",*y=%=P"8<4A=1/$Â)S4A
8<=1/N/4#4A=1/"c<8<$H

9($^]M$)+VXWYS	Y47RTS

_XP(:Z6aTb¤0

\=kFISiJf_l.b).?N<691N"$./AD/&rO//"#",D/DB#4M8",YBAS"8<4A=1B$."8R/4AF4#15",.A"$=15="",.4#G

$%%D±^,b8<&¡HLc8<4A=1¢cH#^,HE\=?=OEjn±1/=-G;"&(=-G>b9).$-4#G
DBA*T8-B"15y/4#$k%=|{({|Rzz9{~­-|{A«

k

9¢

.k

|­r~rµ,}/c| ~}:h|}w|Rzz/«|,~(}c;« «-­c||­<~« «J|Jµ|,{B|Vr~»'«.¯«£zT^,b)S/"1h<8<J|Rzz«|,R
474A$K<X8<k8<=1/N/4#4A=1¨4#$J$",4M$_6BN¨4#1Th8O1:J$%",%H

 96 ³d0+N2

96 edf+:õ µ 

Z+ ³8$T6,

É] ²e

D/-] e

DB

] e

T"N/N

 96 =
aÏ ( Z+ O8Ù
 
] e

] Âe

]¢e

9($^]M$'&_&>B>9W!>A@aMhTSlN>WYSµWe:Z6aTb

?+

-4#54#1/"#A*b).J8OU=,T"E$%",%

¤

>	

"
5=" pB",S/"N

9¢

+

04A&/=1=&9P|­r~µ,}U$%A8<%N
&=M"cNyDBM"1h%=

0N/A%N

O/$%YX1>"8R/4ANb8<&¡H.F8<4A=1!¢cHçcH.h1=)Q$4#G
D9A*;",y"$J8<-4A%-4#=1¨

« ?«­y/",w",!$%A8<%NË&='>-#"cN2DB#"1bK4H HAbÂ"°$%",%4M$;8O'=,[4A&=1=&/!<X8<$

9

	

$%A8<%N!&(=k4A$#"FN>$%=MO4A=1¨NA%$S"
5=" p/",S/"$ %O/$Y1!"8-/4ANVH

ôWÒ4   'r½  x,vx2c3" ouc3
\U4#1/"##*bB&=1B",YB#4#15'$",-8-¤"A5=-4#/G;$k%=w/"1BN/AP=O/kD/-=D=$-4A4A=1/"Vj?n±1=-G;"&=-G¨b
4AK4#$.$OF@84A1:.%=
N<691k|¯«Pr%|,}R~rr~µ,}yºR¬F}9­r~rµ,}BHÂ\=)K",-N¨$%",-8Rb1=
G;",%%J4A&V4AKN=c$
/4#M7³¯8#4#GhYB4#15bYX$%_³6B-$y$",-8-b.=;)SB",$%=:b."A)K"*F$;&r"8<$;"38<=G;DBA%A*C$%DX8476BNÉ$%",-8R
$%",%H 4

f£²8"1
&=8<=G
DBO%<"8<A*K<8<$Â=&9<F8O4#1/5?"E8<=1:%<FÂNDX1/N1:"8<4#=1H

\=##=)S4#1/5'E=c/AJ"HM]_^``deRbX)PN/<691L=Ojk?nC$%",%%-"1/$4A4#=1T&O/1B8<4A=1
$%",%$"1/N¨jnC1=-G'"X&(=-Gò"8<4A=1/$J%=$%",%$b9"$J&(=##=)S$H

PRQTS Z+:m6 ]8_^ Z+a` Z+:m6 cbQP Z+:m6
]

]

e

y]

e%e

O/1/N<61N

¤]

e

PRQTS

b9G'",D/DB4#15

96 edf+

4A&DB] e

=)S4#$

)S4A

 Z+:m6 ]8
y]

e

D/-

ûÁ
, + 0SR ®

"N/N

 96

] e

"1BN

P¤]Z+:m6e]8

D/-

û
, + Á 0SR ®

 96 El

N ] e

TTâU)êo÷úç×êoæ;íôTçi÷ äìZê"ñA÷îå"÷ ìZ÷ëFí)ç9ìëFìZñM÷úç³éæ(þAøoíúñìZñíúïçøñðéð÷WVoñwôIë;åoô¡ë;íúí)ëFéìZ÷úæ(å"çeëFòZñôTñìZñòZþA÷úåo÷úç9ìZ÷úé(õÆªÂêo÷úéê>ª)ñMóæFìZê

ë;ççè"þAñ(â

"ÕO£

ø 9ù>ú~¦20ûÀ$7ü`$22

XU ¨¡$ÌÞ_nÌMÍ  Îp&¬  )Í ¡fÍË

Å

$#ù#ý!þ2Fý



'/"'4#G
D9AG
1:%N¤;G
=FN=A=5*0D/$%1:%N34#1¤/
D/8<N/4#1/5T$8<4A=1/$L4#1

u

UH *

f_1¤/4#$

$%8<4A=1VbW).;"MO/",%''D-&(=-G'"1/8<
=&/;$O/#4#15TDB#"1/1B4#15T$%*c$%G¨HíG
DB4A-4M8"NB",">4#$

q

N/4AF4#NNT4#1:%=
h$OYB","$

^,HSISL\U\±$%*c$%G©%=:=TDB",-J4#1TE&rO/#A*'"O/%=G;",%N>%-"8-¨=&/P,1/N>4#1:%-1/",4A=1B"XDB#"1F³
1B4#15?$%*c$%G;$²8<=G
DX4A4A=1Vb8",-4AN=O²"A=1/5$4#NK)S4Ayjkf£lK:³¡,L4#1yZ.8-1-4#N5bFÎ.=7³
=R"N=HkF4A)Õh-$O/A$bNG
=1/$%-",4#15w\\.ÌÍ$5=c=cN-O/1:4#G
"1/N!$%=MO4A=10A15
YX/"c4#=4#1¥T8<=G
DX4A4A=1H>¨"#$=54AT$%=G
T4#1:O/4A4A=1B$E=1¥)k*3\U\pYB"$
)K"*>4#JN=:$H
cHS\/=GÓ=Ok=)S10<cDX-4MG
1$b9).hDB$%1:k$%=G
=&²$OBA$J/",)./"y=Y/"4#1N04#1
N/=G;"4#1/$B",V)-1=WOB$%NL4#1E/ÂjSf_l.c³¡,S8<=G
DX4A4A=1VH\U4A-$%b)Y/-4A<§9*k$O/G'G;",-4A
=O/;691/NB4#15$;4#12$%=G
G;=N=G'"4#1/$
)S/!\U\ô).=c$).#HvIJ1b.%=É4###O/$%-",%T=O
4M1O/4#4A=1/$E=1¥'"$=1/$P&=h\U\.ÌÍ$DX&(=RG;"1/8<bW).w54A"!&()ÿ<F"G
D9A$L=&JN=G'"4#1/$
)kEP",DBD/="8-!4#$JA$$",DBD/=D/-4M",%H
ócHJ¤61/"#A*±D/-$%1¨"ÉN"4##NÊ8<=G;DB",-4#$%=1Ê=&\\.ÌÍ$TDX&=-G;"1/8<0%=±/",T=&hmEFlb4#1
/$%1/$;/",P).'4#1:$%4A5",%w)S/4M8-3N/4A1B8<$EYX¯).1°\U\["1/N°m?lQA"N¥%=!)S/4M8-
DX&=-G;"1B8<E$O/A$H

÷Ò#xû  4 ¯Ov¡' á /!Y!YY«v

 u'+ZÂ3O  &
} 3òYu}&2  "!"u

¥ 2 #w

\=G+Ï",R8-%='jSDB-4#V,Fbh,1/N>4M1%-1B",4A=1/"DBM"1/1/4#15y$%*F$%%G;$k8<=G
DX4A4A=1b=5"1B4AN
Yc*>\/"/4AGÑZK"88-cO/$bX)K"$8",--4AN>=O/4#1!P51/-"U$%%4#15=&²hjkf_l.:³¡,T8<=1&1/8<y4#1
Z.81/-4#N5bJÎ.=A=-"N/=HCIJ/T)!¯).=¥G;"4#1C%-"8-c$b.=1¨&=;&rO/#A*:³¯"O%=G;",%NÉDBM"1/1-$b
"1/NË=1!&=T/"1/NF³"4##=N¦DBM"1/1-$H[Z.=Ë%-"8F$T).0NB4Ac4MNN±4#1:%=36B0DB",$b"8R=1
8<=1/8<-1/NE)S4AE"JNB47-1DBM"1/1/4#15KN=G;"4M1H?OV\U\¨$%*F$%%Gv%=c=?DB",V4#1?/²&OB#A*S"O%=G'",%N
%-"8-9H²f_1w?8<=G
DX4A4A=1bF\U\°NG;=1/$%%-",%Nw-O/1:4#G
kYX/"F4A=K$ODX-4A=%=B",.=&W?=
&rO/#A*¤"O%=G;",4#8'DB#"1/1/-$L"1/N°)."$h&=5-"1%Nuð-g-=ODCj©NB4#$%4#15OB4#$N0DX&=-G;"1/8<
lÂM"1/1/4#15!c*F$%%G;ñ°]rZ."88R:OB$ystok"Ob,^eRH¨f£P"#$%=>).=13/wF8-B4#1/N/ALjk)K",-N3&=L'6B-$%
DB#"8<T4#1¥wÏ04#8<=1/4M8!^0íÂA,",%=
N=G;"4#1bUjn%R"8H0f_1°/4#$P$8<4A=1b).Y/R4A<§B*¤D/$%1:
LN/","'8<=#A8<%N>4#1T/E&O/MA*'"O%=G;",%N!%-"8b9"1BNT54Ab/&="8-0N=G;"4#1b$%=G;L4#1OB4A4A=1/$
=10"$%=1/$k&(=E\U\.ÌÍ$?YX/"F4A=HIJP-"N$-=O/#N!Y")K",
/",y8<=G
DX4A4A=10G;"N
1=¦N/4M$%4#1/8<4A=1ÊYX¯).1v=D/4MG;"E"1/N[$O/Y=DB4#G;"kDB#"1/1R$bSDBO/%4#15É%=50-O/1:4#G

8O$K&=KYX=5-=ODB$Hf_1wk%<F%=y"8->N/=G;"4#1bc)L$",%E)S/4#8R'DBM"1/1-$&(=OB1/N'=DB4#G;"
$%=#O/4A=1/$b"1/Ny)k/4#8-
NB4#N/1Ì HlDB#"1/1B4#15S"$9bc"#FDB#"1/1/-$)S54A1;/"A&"1;=ORO/1/1/4#1/5
4#G
h=1"Ta,TÏmkyl1:4#O/G+fff.)S4A°^g?ZÕG;"4#1!G;G
=*HSf£&²1=w$%=#O4A=1!)."$k&=O/1/N>)k4A/4#1
$%P$%=O-8<EYX=O/1BN/$bFEDB#"1B1)."$kN8#",NT%=w/"P&"4##NT=1¨L$D8<4#E"$%9H

[

$)Æ$)]\TW

èUÞéå#×êårß-×

Nah96'b

IJ.6BR$%U¯).=LN=G;"4#1/$/",Â)O/$N
4#1J8<=G
DX4A4A=1).JèÞéåM×êårß-×"1/N
ÝKÛ(Þß¡àF×áÞâ-Ûrã
N=G;"4M1/$HVÂ6B-$%VA=c=?",V²&=-G
HIJ/4#$4M$V"8#"$$4M8"N=G;"4#1Vb4#1:=AF4#15K²%-"1B$%DX=",4A=1

^ âU)êoñ×çæ(èTòZéðñ×éðæqô"ñi÷îçëwù(ëF÷îíîëFóoíúñ³÷úå ë;åRæ(å"íú÷îå"ñ³ëFøoøñðåoô"÷¨õë;åoôéwë;åRóñiô"æ5ªÂåoíúæ.ë;ô"ñwôäòZæ;þuìZê"ñÆ`_æ;þAñðøë© (ñiëFì
êOììZøba cd5c ª%ª%ªGâ ÷îåTä æFòZþMëFìZ÷úöâ è"åo÷Wýe äòZñð÷úó"è"ò "â ôTñc5f×êoæhgþMë;å"åicgâ êOìZþAíâ

"ÕTÕ

Å

2f$ÆÈÇi¤¦

=&KDB"8$hF4#"T%-O/8-c$L"1BN3"4ADBM"1$H
\U4A5O
î!$-=)S$L;-O/1:4#G

8O-$E=&K=$%;DBM"1/1-$
/",J).P",Y9AE%='$8"AP%=;YB4A55S4M1/$%"1/8<$J4M1TL8<=G
DX4A4A=1H

10000
FF
HSP2
System-R
GRT
Mips
STAN

1000

100
sec.

j

10

1

0.1



16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42
problem size

\U4A5OEî kiSO/1:4#G
K8O$U=1
#",-5KèUÞéå#×êårß-×4M1/$%"1/8<$U&=U=$%J$47hDB#"1/1R$W/",²8<=OB#Ny$8"A
OD¨%=;G¨HIJ4#G
L4#$$-=)S1>=1>";A=5",-4#/G;4#8?$8"AH

IJ/LèÞéå#×êåß-×K"$%c$S)-L$OYN/4AF4#NN4#1%=
¡)=$%$J=&U4#1/$%"1B8<$bE"$%*T"1/N¨LB",-N
=1$HIJ=$%?DB#"1B1-$./",JN/4#Nw).#X=1¨"#X=&E"$%*T4#1/$%"1B8<$K)h"#$%=y-O/1w=1¨LB",-N
$%HIJ$%yDB#"1B1-$k);\U\.bVmEFl¤]rZ.=1Pstg<1b²^``cbÂ^```eRbc*F$%%Gy³¯iLbgEiIt]riS<³
&r"1/4#N/4#$s

ü

#"B","$b^```eRbÏ04ADB$y]ríÂNA,"G
DVb,eRbW"1/N3FIjoò]rnV=15>sª\=bÂ^```c\=3s



nV=1/5b9,^eRH.IJ)=
=YB$",4#=1/$J8"1>YXLG;"N/

^,HF*c$%%G
³¯ipN=c$J$4#51/47698"1:A*;).=-$%LB"1¨L=SDB#"1/1R$H
cHSISTY%%
D9#"1/1-$h"#.YX/">xcO/4A%T$4#G;4M#",b)S4AÉ\U\p"1/N±Ï04ADB$h%1/N/4M15%=YXw
&r"$%%$%H
ok=%;"#$%=T/",E4#G;$",-y$-=)S1¤=1"TA=5",R4A/G;4#8h$8"AbW$=w).
",¨}9µUA=c=F4#15T",L#4#1",
4#G
TèÞéåM×êårß-×DB#"1/1/-$H¤ÎK=1/8<-1/4#1/5$%=#O/4A=1¥D9#"1°#15b).TN/=01=y$=)©"!695OTH
ok=1?=&E$/=)S1wDB#"1B1-$5O/",-"1:%$J?OR1NwDB#"1/$%=
YXk=D/4MG;"HUf¡KOR1/$.=OK/",
FIjkov691/N/$?$=%$%KDBM"1/$Â=1TG
=$K4M1/$%"1/8<$HÂc*F$%%Gy³¯iÊ61/N/$.$4A51/4768"1A*;#=15D9#"1/$
/"1/;=-$b-"154#1/5¨&(=G

bk

lk

k

^d, Ñ%=0¢F^ õ=&SFIjohÌÍ$EDB#"13#15/$bV)k4A"1¥"-",5=&

ik

î wH.IJLA15B$=&\U\.ÌÍ$JD9#"1/$",L)k4A/4#1¨`d

lk

lk

%=^^a ©=&²FIjkohÌÍ$JDBM"1¨A15/$b)k4A¨"1

"R",5'A15=&S^a wHhÎ.=1B8<-1/4#15\\.ÌÍ$?5=c=cN0-OB14#G;PYX/"F4A=b).h/4M1¨/",
",

O

G;"4#1BA*'¡)=;-"$%=1/$J&=J/",

"ÕÖ

ø 9ù>ú~¦20ûÀ$7ü`$22

Å

$#ù#ý!þ2Fý

^,HJf_1'"M/4A%-",4A=1B$²=&1&=-8<N'B4##7³¯8#4MGPYB4M15bYB"N
69-$%²$%",-8R;61/N/$²"h$%",%k)k4A
YX%%
,"#O/",4#=1",K*'$-G;"#BN/D//$?]rG
=4A,",4#15P=O/.$%",R8-¨"A5=-4#/G¨b:8<&£Hc8<4A=1TacH#^eRHÂf_1
G;=$%S8"$%$bBL1<FY%%k$O/88<$$%=k4#$",SND/^,b94H HAb/"
N/4A8<=1/HÂIJE",h$%=G

8"$$²)S-J$/"##=).$%YX%%Â$O/88<$$=4#$",ÂN/D/;cb:"1/N;=1/A*P-*h-",-A*hYB"N
69-$%J1N/$J%=;5='N=)S1¨%='NDB!ócHÂIJ$E=YB$%,",4A=1/$J",-P4#1/NDX1/N/1.=&"$T$-4AH
cHSIS;AD/&rO/U"8<4A=1/$hO-4M$%4#8D/-O/1/$E#",5;&-"8<4A=1/$L=&./'$%",-8R¥$%DB"8<HwnV=c=c4M15>",
/k$%",%$./",K\U\1/8<=O/1:%-$.N/O-4#1/5L$%",-8-Vb:=1/#*YX¡)1îh"1BNaEDX-8<1:Â=&V"M/=&V"
$",%ÌÍ$S$O/88<$-$%=-$).E8<=1/$4#N/NTAD/&rO/4#1w=O<cDX-4MG
1$b:)S4#T?%1/N1/8<*/",
/P#",5J/E"$%9b9LA$$SAD/&rO/$O/88<$$%=R$Jh",H
IJ/4#$"3=-4#8"k1/=%%=CYX!G;"N=12!6B-$%=YB$%,",4A=1Hv4A208<=G'G
=1



D/-$%1",4#=1P=&BèUÞéå#×êårß-×W"$%F$bÂ&=#A=)S4#15k8"1PYXÂDB=1HUnV YXÂ.G;"F4MG;"N/4M$%"1/8<
YX¯).1¨¯).=#=c8",4A=1B$b4H HAb/L1cO/GhYK=&UG
="8<4A=1/$J"
G;=YB4#A?1N/$%=
",h%=
5J&=G
=1KA=F8",4A=1P%=?"1=Hï$4#15k"kO/-4#$%4#8²&O/1B8<4A=1L/","$$4A51B$W%="8-
$%",%.KA15h=&/"1
µRzr~»;|,{c#"FN$%=MO4A=1w"$/O/-4#$%4#8J"#O/b:?N/4#$"1/8<k=&W"8-¨$%",%?%=y?1<c.YX%%

l ß

,"#O/",%NP$",%.4#$WG;"F4MG;"

^,HIJcO/$b"1h"A5=-4ABG[/",WOB$%NL1&=-8<Nh/4##7³¯8M4#GPY94#15²)S4#L"1

=-"8A?&rO/1/8<4A=1'O-1B4#15LEA1/5'=&W"1w=D/4MG;"B-#"cNT$%=MO4A=1;).=O/#NYXkDX=A*F1=G;4M"=1

/HÂf£1w?YX1/8-BG;",F$""4#M",YBAb

$%"1/NB",-NTèÞéå#×êåß-×-D/$%1:",4A=1/$bF54A1¨"1¨O/D/DX#4#G'4AÂ%=

	

G
=YB4MA$8"1y-"8-
"1:*hA=F8",4A=1y"88<$$4AY9AK%=/Gô4#1

O/$%=1$%%DVb4H HAb/KG'"F4#G'":N/4M$%"1/8<

"8ª^,HLjk#$=bX\U\.ÌÍ$EOR4#$%4#8LOB$O/"#A*3¸µ«S61/N>=D/4MG;"b=L8A=$%

4#1=$%y"$%F$?4#$?8<=1/$%"1:A*

%=w=D/4#G;"b9#"FN$=#O4A=1/$Sb$O/8R!B",k1&=-8<N0/4##A³¯8#4#GhYB4#15y"#G
=$%1E1N/$k%=

" ß =^ 8vy$%DB$S""NVH

A=c=wG;=E/"1

[

$)Æ$'&\TW

ÝKÛ(Þß¡àF×áÞâ-Ûrã

NahT6"b

IJÝKÛ(ÞFß£àc×áUÞâ-Ûã4#$Â=1k=&/kYX$%²F1=)S1'YX1/8R/G;",yDBM"1/1/4#15LN/=G;"4#1/$b:)SSkD9#"1/1

×

1N/$.%=y",R"15E"hY9O/1/8-=&WY9A=c8-c$K4#1:%=y"$D84A6BN'5="XDX=$4#4A=1b:OB$4#15"P=YX=",-G¨H

O/$%

#4AhhèUÞéå#×êårß-×k"$%F$bXh8<=G;D4#4A=14M1/$%"1/8<$k)-N/4#c4#N/N¨4#1%=T"'$k=&²"$-4AbX"1/N!=&
/",-N/=1/$HP\U4A5O
aw$=)S$?y-O/1:4#G
y8O$?=&yDB#"1/1R$J/",L$8"#N%=¨/yB",-N
=1$H
c*F$%%Gy³¯i+$8"A$;G;=$%;$%%"N/4##*¥%=3>ÝKÛ(Þß¡àF×áÞâ-Ûrã3"$%F$;O/$N¦4#1C>8<=G
DX4A4A=1VHCf_1
DB",4M8O/#",b4A4#$KE=1BA*D9#"1/1K/",J8"1$%=A'|,{{:=&U=$E"$%c$HÂm?ly$%=A$S$%=G
L=&
$G;"MAÂ4#1/$"1/8<$bF"1/N'\U\¥$=A$",YX=O¯).=hB4A-N/$=&/k$%Hf£&V\U\3$O/88<N/$=1w"14#1B$%"1/8<b

l

14ASN=c$S$%=wx:OB4A%L&r"$%H\=k<"G
DB#b9\U\¦$%=A$S=1P=&/P$4A<³¡a,"$%F$k4#1¥^ çd;$%8<=1BN/$b

¸l

)S-LF*c$%%G
³¯iQ1N/$J` çóF^h$%8<=1/N/$H²oS=1E=&E-EDB#"1/1R$²691BN/$.=D/4#G;"XDBM"1/$HÂ?1

ik

ik

J"$c$/",ÂmEFlLG;"1/",5$%=h$%=Abc4A$²D9#"1/$",k)S4A/4#1
`d %=^dd =&Wc*c$%Gy³¯iLÌÍ$ÂDB#"1

lk

A15B$b)k4A¥"1C"-",5T=&L^aó wH?13/'"$%F$PB",\U\[G;"1B",5$h%=¤$%=Ab4A$PDB#"1/$h",

lk

lk

)S4AB4#1¨ó

lk

%=!^ ©=&²F*c$%%G
³¯iLÌÍ$DBM"1¨A15/$b/"-",5
`¢ wH

Z.*C<cDX-4#G;14#1/5!)S4AÉN/4A1:y8<=1F6B5O-",4#=1/$y=&k\U\.b)¨&=O/1/N°/",
¨YX/"c4#==&
\U\u=1¦$>"$%F$'4#$;M",5A*ÉN/O¨%=¥/>5="J=-N/-4#15OR4#$%4#8$y&=G
N/4#$"1/8<T$%4#G;",%$;",-T1/=;$%=¤5=:=FN
$4#1/5A
",-G

°

°

c8<4#=1Ë¢cHçcH[g="

TDBM"1/1y5-",YB$
"0)S=#wY9O/1/8-C=&kYBA=F8F$y)S4AÉ4A$

"1/N¥14AP4M$E'#D/&OB"8<4#=1/$PO/-4#$%4#8

°

)S1'",-G

=#N/$E"¨Y9A=c8-9b"#

DX=$4A4A=1B$S)S/y
",-Gõ8<=O/#N0DX=$$4AY9A*TDBO
YBA=F8!",-;O/$O/"##*>8<=1/$4#N-N#D/&OBHEIJ
5="",51/N/"]c8<4#=1¤¢cHçcHçeRbW=1/h=LB"1/NbXN/4AF4#N$J/h"$%F$?4#1:%=T$-G;"#W$-OY/"$%F$b"1/N
"N/NNh5="cNA4A=1T]c8<4A=1y¢cHçeWD/1:$/ÂDB#"1B1W&=GpDBO%4#15SYBA=F8F$V=1:%=?$"8F$)k

"ÕÖ

Å

2f$ÆÈÇi¤¦

10000
FF
HSP2
System-R
1000

100

sec.

j

10

1

0.1

0.01

¸

18

20

22

24

26

28

30

32
34
36
problem size

38

40

42

44

46

48

50

\U4A5OPa kiSO/1:4#G
.8O$=1hM",5.ÝKÛ(Þß¡àF×áÞâ-ÛrãE4#1/$%"1B8<$W&=/=$%/D9#"1/1-$W/",U8<=O/#N



$8"AKODh%=G

\U\bmEFlcb"1/N
c*F$%%Gy³¯iPHIJ4MG
4#$$=)S1"1"A=5",-4#/G;4#8²$-8"AH

$%=G
YBA=F8¤YX1",¥$4##1N/$P%=!YX'G
=NH>mk=).b²4#1¥$=G
'8"$%$y"8-B4Ac4M15>5="#$
&=Gt",-M4AJ1:%-4A$J4#1>L5="",51/N/"'8O/$J=,5="#$k/",k",h$%4##""NVH.ok=k").",=&U
YBA=F8F$/",²4AU)S4#M1Ny%=L$%"8-h&=²"8-B4Ac4M15?5="#$""Nb/.D9#"1/1G;4A5:UDBO8O1:
YBA=F8F$?=1:%=>$%"8F$L/",E1N¤%=¨YX
N/4#$-"$$%GhYBAN0#",%L=1Hhf¡&/",E/",D/DX1/$)S4A0%=c=>G;"1*
YBA=F8F$

°

)k/4#8-wNDX1/N/$.G
=?=JA$-$R"1/N=G;A*'=1/L$%DX847698J"$w"1/NwE"8<4A=1B$K/",

DB#"1B18R=c=$%$

°

13
DB#"1/1/8"11=?61/N¤4A$)."*=OE=&;$4AOB",4A=1¤",5"4#1HhIS$%

",LDB=YB",YBA*'P4#1/$"1/8<$/",S\U\±8<=O/MN/1Ì $%=AP4M1TP8<=G
DX4A4A=1VH

[

$)Æ$^]m\TW3n po +q Na1hT6'b
ß 9Øã ÛØ

f_1;

n rß o9ØãsqÛ(ØKN=G'"4#1bkDB#"1/1/Â4#$²&r"84#15"LYBOB1/8-'=&=Y7	_8<$%=YS)=N=1)S4A;"h$%

1	
7	

=&UG;"8-/4M1$b4H HAbEDBM"1/14#$.xcO/4ANw%='8<",%h"

Æ	

_=Y>$8RN/O/#?4M1)k/4#8-T/=Y _8<$k$/"#

YXS"$$4#51N'%=G;"8-/4M1$HIJ8<=G
DX4A4A=1;-D/$%1:",4A=1wG;",$KO/$%S=&V"$4#G;DBA&=-GÈ=&
xcO/"14A6BNP8<=1/NB4A4A=1/"<8<$H²\/=<"G
DB#b,4#&/"1P=Y %8<U5$DB"4#1:%NPNVb/1hB",4#$4A$1)
8<=A=b"1/N&=K"M98<=A=R$B",K4#4#$.8O1:A*
DB"4M1%NT4#1bc4AK4#$1/==&VB",K8<=#=K"1:*FG
=H.?1BA*
"0$OYB$%P=&D9#"1/1-$P4#13w8<=G
DX4A4A=1°8<=O/#N¥B"1/N/A;B4#$LF4#1/N¥=&J8<=1/N/4A4A=1B"<8<$H
IJ4#-O/1:4#G
E8O$J",-P$=)S1>4#1¨\U4A5O-P¢cH
jkDB",&(-=G

=$DBM"1/1-$h"A"N*¥$1bU)¨/"wRO/14MG
'8O$y4#1C\U4A5OT¢>&=f£ll

&=t #MN=YBAysÓc=t -bÂ,eRH\\Q=O%DX%³

]rE=c/A"HAbJ^``deRbÂl²=D9lÂ#"1b"1/NCZK?l#"1]rm

&=-G;$k=/.D9#"1/1-$²Y:*'G'"1*;=RN-$=&WG;",51/4AOBN

°

G
GhYXÂ/",.4#G
4#$.$=)k1'=1T"

A=5",-4#/G;4#8$8"AHÂÎ.=1/8<-1B4#15?$%=#O4A=1A15Vb\\.ÌÍ$UDBM"1/$%1/N%=EYK$#4#5A*L#=15U/"1y





ø 9ù>ú~¦20ûÀ$7ü`$22

Å

$#ù#ý!þ2Fý

10000
FF
HSP2
Mips
IPP
PropPlan
BDDPlan

1000

100

sec.

j

10

1

0.1

0.01

¸

2

4

6

8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50
problem size

\U4A5OP¢ kiSO/1:4#G
P8O/$J=1

n rß oØã+qÛ(Ø4#1B$%"1/8<$J&==$%PD9#"1/1-$KB",8<=O/MN>/"1/N/#L8<=1F³

N/4A4A=1/"<X8<$HIS4#G
L4#$$/=)S1¨=1!";A=5",-4ABG;4#8?$8"AH

DB#"1B$-O-1NwYc*'E=SDB#"1/1R$Â=1TL$-G;"#A4#1/$"1/8<$HD/4MG;"BD9#"1/$K",E&=O/1/NwY:*

lk

Ï04ADB$bFl²=D9lÂ#"1bF"1/N¨ZK??lÂ#"1H²\U\.ÌÍ$DBM"1w#15/$K",?)S4A/4M1^d,a ª=&?=D/4#G;"XA1/5/$b

lk

)S4A
"1'"-",5?=&U^^¢ wH?1/A*m?l¥$%=G
4MG
$U691/NB$A=15²DBM"1/$U/"1;\U\.bYX4#15E4#1
"L-"15

lk

&=Gò¢

ik

%=^^d

bk

=&\U\ÌÍ$SDB#"1¨A1/5/$bB`î

=1!"-",5H

iS$%DX=1/$4AYB#w&='/>=O$%"1/NB4#15-O/1:4#G
¨YX/"c4#=;=&L\U\u=1¦

n rß o9ØãsqÛ(ØwN=G;"4M1¦4#$b

",D/DB",-1A*bBLAD/&rO/X"8<4A=1/$kO-4M$%4#8,HÏ!"$-O-4#15b&=k$=G
L<"G
DBAL$%",%$bBLDX-8<1:_³
",5y=&$OB88<$$%=-$/",?).8<=1B$4#NN0ADB&O/b/)
O/$-O/"#A*T&=O/1/N04AS)K"$E8A=$%%=>'DX-8<1:b
4H HAb=1/A*¨¡)=T=O=&²"cO/1/N/N!",D/D9#4#8",YBAh"8<4A=1/$k)y8<=1/$4MNNY:*¨DB#"1B1HS\=?<c³
"G
DB#b:"#=&X?¢ódE$%",%$./",.\U\3A=c=c$²",&(=.$%=AF4#15E=1k=&Xk$4#<³¡a,L"$%F$B"aó,ó,
$O/88<$-$%=-$J"A%=5/bB)S/EL$O/G

=&U"#F«{ zºR¬F{$O/88<$$=-$S4#$K=1BA*Td,¢¢ócH.jk#$=b/EYX%%

$O/88<$-$%=-$bc$4#G;4#M",%=hSèUÞéå#×êårß-×N=G;"4#1b:#4A",$B"#A=)ËND//$HUZ."N;6B-$%²$%",R8-w1
5=c$
NDXh/"1C-w$%%D9$h=1C

n pß o9Øã+qÛØy"$%F$y4#1¥/w8<=G
DX4A4#=1°$OB4A%H\4M1/"#A*bU4#1

"T&)<cDX-4MG
1$).;-"1¤&=E%$%4#15¨B",bW
5="²",51BN/"¨ADXN0Y:*¤",YX=OE"T&"8<%=yT4#1
%-G;$J=&RO/1/1/4#1/5P4#G
H

[

$)Æ$#u\TW(v

IJ

v

â<ØØßØÛ#Û

NahT6"b

âØØßØÛ#ÛN=G;"4#1¨&=-G;"M4A$J";$%=M4A"4AL8",-N>5"G
P/",8<=G
$k)S4A¨Ï04#8<=$%=&S4#1/N=)S$H

IJw#",5$%h"$%F$h1:%NC4#13/w8<=G
DX4A4#=1Ë]r$4A0^ó!4M1¥\U4A5O¨deE8<=-$%DX=1/N¥N/4#8<A*¤%=
$%=G
S"7³).=-#N;$4#N
"$%F$b)SB4#A4#1yS$-G;"#A"$%F$b:S",kA$$²8",-NB$%=PYXJ8<=1/$4MNNH
\U4A5Ohd
$=)k$E-O/1:4#G
E8O-$J=&UE&=OJYX$%DX&=-G;4#15DB#"1B1-$H



Å

2f$ÆÈÇi¤¦

10000
FF
HSP2
Mips
STAN
1000

100

sec.

j

10

1

0.1

0.01



2

3

4

\U4A5Ohd kiSO/1:4#G
²8O-$V=1

v

5

6

7

8
9
problem size

10

11

12

13

â<ØØßØÛ#Û"$%F$V&=W/=$%²DB#"1B1-$X/",W$-8"ANE%=SY94A55W4#1/$"1/8<$H

IJ4#G
E4#$J$-=)S1>=1>";A=5",-4#/G;4#8?$8"AH

\-=G5=O/D
=&9&=O²YX$%_³¯$-8"#4#15?DB#"1B1-$U$=)S1
4#1
\U4A5OSd:bcm?Fl.?4#$UJ$#=).$%b
)S/4MAKFIjo24#$&r"$%%$%DBM"1/1H\\04#$51-"MA*h$%8<=1BNyDB#"8<b"1/Ny/"$"E#==&9",R4#",4A=1y4#1
4A$K-OB1/1/4#15P4#G
$H?1wE=/J/"1/Nb\U\°4M$K?=1/A*;DBM"1/1K/",4#$K8",DB",YBAE=&$%=AF4#15
"7³).=-#N!"$%F$b$-4A^ócHJf£?$%=A$k&(=Ok=OS=&²6Bh$OB8-"$%c$HSoS=1/P=&y$=)S1>DBM"1/1-$
5O/",-"1:%$'&=O/1/N3DB#"1/$P%=!YX;=D/4#G'"b"1/NC1=1'=&$/=)S1¥DB#"1/1R$ENG
=1/$%%R",%$
$ODX-4#=.DX&=-G;"1B8<L8<=1/8<-1/4#1/5y$=#O4A=1¨A1/5HFIjkopD/=FN/O/8<$O/1B18<$$",-4MA*A=1/5D9#"1/$
4#1¨"y&)[8"$%$H.l²84#$A*bF=1¨E"$%F$/",JYX=¨mEFl¦"1/N¨\U\±G;"1B",5L%=;$%=AbBmEFlSÌÍ$KDB#"1

bk

lk

A15B$P",;)k4A/4#1"!-"15'=&Sdî q%=°^¢

lk

=&\U\ÌÍ$hDB#"1¥A15/$bU"R",5¨`a TH>E1"$%F$

lk

lk

$%=ANwYc*;YX=Ï04ADB$"1/NT\U\bFDBM"1'A15B$Â=&WÏ04ADB$.",)S4A/4M1¢` È%=¨^ ÿ=&W\U\ÌÍ$KA1/5/$b

k

lk

"R",5w^^ wH.\=?IjoPb/L-"15P4M$J¢a

lk

lk

%=óF^ wb9)S4A^^ ©=1!"R",5H

Î.=1B8<-1/4#15L\U\.ÌÍ$-O/1:4#G
YX/"F4A=bSYB4#5E",-4M",4A=1'4#1;-O/1/1/4M15k4MG
S"$)#B"$Â4A$8",DB"³
YB4#M4A¯*L=&$%=AF4#15E#",5"$c$YX=
$%G%=E$O/AU&=Gu)K"*=R"#/$%",-8R;"A5=-4#/Gô4#$
",-"1/5NH?=YB$%NT&=#A=)k4#15HIJ=$%"$%F$K/",K5$%=ANwY:*'1&(=R8<N¨/4##7³¯8M4#GPY94#15
",E=$B",J",L$%=ANT&r"$%H.c=G;4#G
$b=)bB$%DX84#"#A*
=1TLM",5"$%F$b1&=-8<N
/4#M7³¯8#4#GhYB4#15-O/1B$k4#1:%=T"N"N01/N0$4AOB",4A=1C]r1/=w8",-NB$8"10YXhG;=N"1:*cG
=-eRHLIJ1b
DB#"1B1;$%",$'&(=G

$8<-",8-2)S4A¦8<=G;DBA%>YX$%_³6BR$%
$%",-8-Vb)S/4#8RÉ",$G
=->4#G
b.YBO

8"1C$%=A;YB4#5!4#1/$%"1B8<$PxcO/4A%;M4#",YBA*bW"$8"13YX'$1¥=1¥;"$%F$P=&J$-4A!^ócH>mkAD/&rO/"8³

	k

4A=1/$S)=-c$G
=FN-",%A*T).#b9$A8<4#15'",-=O/1/N0d t=&","4##",YBAh"8<4A=1/$bX"1/N>/PYX%%
$O/88<$-$%=-$S",-LO/$O/"##*'8A=$%b/Y9OJ$%=G
4#G;$J#4AL",SN/D//$K=&G
=E/"1a
$%%DB$H





ø 9ù>ú~¦20ûÀ$7ü`$22

[ $)Æ$xw\TW

Å

$#ù#ý!þ2Fý

Nah96'b

-y

ë0årßÞ /årß

IJ²691/"N=G'"4#1LO/$%NP4#1E.8<=G
DX4A4A=1L8<=G
$&=GQ"S"7³).=-#NL",D/D9#4#8",4A=1b)SÂG;=F4#15
$%xcO1/8<$U=&A,",%=-$1Ny%=EYXKDB#"1/1NVHWIJ$%xcO1/8<$",JNBO%=L"M:F4#1/NB$=&9$%%-4M8<4A=1/$b
#4A/",U

ü

f_lÂ$1N%=?Y.$%Nh6B-$HI=&=-GO/#",%."#=&B$%K$%%-4M8<4A=1/$b,8<=G
DBA<P6B-$%

=-N?D/-8<=1/N/4A4A=1B$k",;OB$%N¤4#10yD/$%1:",4A=1¦]rE=c/ALstF8R:OB$%%bW,eRHyjk$?=1/#*"
&)2DB#"1B1-$²8<=O/MN;/"1/N/#JJ&rO/#j?n-D/$%1:",4A=1bckN/=G;"4#1
)K"$$-OYN/4AF4#NN4#1%=h
"$4AhIJiJf_l.>"1/N¥cf_ÏlnWíô]r8<=1/N/4A4#=1/"<8<$Re8M"$$%$by&rO/#jk?n¦8#"$-$bV"1/N¤"101
G
=S<cD/-$$4AJ8#"$-$)SJ1cO/G
R4#8"8<=1/$%%-"4M1$]S1cO/GPYX=&XDB"$$15-$²4#1y/JA,",%=
",y"!4#G;eE1NN°%=¤YX'8<=1/$4#N/NH>¨$=)ÿ/'-O/1:4#G
w8O$h&(=wDB",4#84#DB"1$h4#1

-y

h&O/Mjk?nC8#"$$4#1>\U4A5OcH.f_1>N/4A1B8<L%='hD/F4A=O/$JN/=G;"4#1/$bBPë0årßÞ /årßkN/=G;"4#1
)K"$-O/1=1¨$4A%E",Jjkf£lK:³¡,Fb9O/$-4#15Pîa,'ÏmkLl14#OBG

fff²G;"8R/4#1$K)S4#Ta¢yÏ0Z.*:%hG;"4#1

G
G
=-*H

10000
FF
IPP
PropPlan
1000

100

sec.

j

10

1

0.1

0.01

¸

1

3

5

7

9

11

13

15
17
problem size

19

21

23

25

27

29

{zÂÛ(Ø-|~}Fê¯ÞâK"$%c$K&=.=$%?DB#"1/1/-$²)SB4#8-w/"1/N/#N;&OB#Bj?n

\U4A5OP kiSO/1:4#G
8O$.=1

Ï4#8<=1B4#8
^;N=G;"4M1TD/$%1:",4A=1HIJ4#G
L4#$$-=)S1>=1>";A=5",-4#/G;4#8?$8"AH

\U\Õ=O%DX&=-G;$T¯).=3=;&rO/#jk?nQDB#"1/1R$h4#1C%-G'$y=&$%=MO4A=1C4#G
H°f¡
GO/$%
YX1=4M8<Nb=).b/",f£llu"1/N¥lÂ=DBlÂM"1351-",%TD/-=,",YBA*¤=D/4#G;"ÂDB#"1/$hb$O/8R
/",L=1/;1N/$E%=¨YX;8",&rO/U)S1NB4A8<A*08<=G
DB",-4#1/5w/=$%;-O/1B1/4#154#G
$H'?1¤'=
/"1/NVb\U\.ÌÍ$EDB#"1B$k",yxcO/4A%y8A=$%y%=T=D/4#G;"=10$%
4#1/$"1/8<$bXYX4#15')k4A/4#14#1"w-"1/5=&

lk

k

G;"4#G;"##*w^óó ÿ=&=D/4#G'"B$%=#O/4A=1'A1/5/$²%=y4#1/$%"1/8<$.$%=ANYc*;l²=DBl#"1b^^^
=1>"-",5H

IJ/;#",5
,",-4#",4A=1¤=&K\U\ÌÍ$P-O/1/1B4#15'4MG
$E4#$E",D/DB",-1A*¤N/Oy%=>/;$"G

DB1/=G
1=1
"$",-4M",4A=14M1

v

O

â<ØØßØÛ#ÛU4#$ J$%=G
4MG
$bX"$?)=YB$%NVb1/&(=-8<N¤/4M#7³¯8#4#GhYB4#1/5h-OB1/$S4#1:%=

;±

Å

2f$ÆÈÇi¤¦

"TN"N¤1/Nb)k/4#8-08"O/$%$P"w$)S4A8-0%=¨YX$%_³6BR$%$",-8-b$%=AF4#15'/
"$%4#1¤G
=-4MG
bYBO

lk

#4M",YBA*HUIJ?AD/&rO//"8<4A=1B$DX-8<1:",5E",$*A=),"#O$=1w"-",5b9",-=O/1/N0^a wb/"1/N

\	

Y/"N/¨6B-$k$%",-8R!R",A*¨5=c$N/Dk/"1&(=Ok=S69$%%D9$bB)S/P#",5yG;" %=-4A¯*¨=&
LYX%%S$-O/88<$$%=-$k#4AE",SNDB^,H

÷Ò / 'gu}


¬gn2}&2 ¥ 3

}u2v 

f_1T/4#$J$%8<4#=1b)PD/$%1:J$%=G
L=&E$-O/A$K/",J).P/"L=Y/"4#1/N>4#1¨N=G;"4M1/$K/",).
1=O/$%N34#13'jkf£lK:³¡,8<=G;D4#4A=1Hw'54Aw$%=G
G;=;<"G
DBA$P=&KN/=G;"4#1/$E)k
\U\C)=F$).#b"1/NbF%=;4#M#O/$%%-",%=OJ4#1:O/4A4#=1/$Â=1>E"$%=1/$K&=S\U\.ÌÍ$YX/"F4A=b"#$=;$%=G

<"G
DBA$=&UN=G;"4M1/$)S-?\U\±4#$SA$$J",D/DB=D/-4#",%H
\=,"#O/",4#=1b:).-"1T\\¥=1T"h8<=##8<4A=1w=&,Y1B8-/G;",-
DB#"1/1/4M15LN=G;"4#1B$b:4#1B8#O/N/4#1/5
"#:N=G;"4#1/$V&(=Gp.jSf_l.:³-^``k"1/NjSf_l.c³¡,k8<=G
DX4A4#=1/$b,"1/NP$%1yG
=-N=G;"4M1/$&=G
E#4A%R",OHl²84M$%A*bcEN=G;"4#1/$.4#1=O$O/4A%).EÖk××ØÙwÚÛ7ÜXbc¯).=;ÝKÛ(ÞFß£àc×áUÞâ-Ûã:$]/<³

d }
q ÛMÛrãFÞ ØRâb v âØØßØÛMÛb v â-åãécØbä.â-årã9b²äKâ-åçæ=
=}0y9ÞåbVèÞéåM×êårß-×bWë0årßÞ-y/åß%³¯jk?n²bVë0årßÞ-y/åß%³£cf£Ï0lÂníJbXëåßÞ-y/årß%³£FIJiSf£lKbXë¤Þl|å(Øbëwæâ-å#ÙØb
ë>Ü×ê¯ØRâ%ÜXb n ßp9
o Øã+q ÛØbJìåAâØáÞâ-ÛrãBb"1/Nì×¯æUH!f_1/$%"1B8<$h).w4A",1É&(-=G DBO/YB#4#$/NN/4#$_³
"1/N¤&=O%³=DX-",%=EDB$%1:",4A=19eRbWÝ.â-å(Ø ¯ß ,×RØáÞâ-ÛrãBbVÝ

æØRâb

%-4AY9O4A=1/$b&=GÓ
#4A%-",O-b=LG;=cN/4A6BN!%=¨$/=)$8"#4M15YX/"c4#=H 3

IJ4#G
$k&=L\\Ë).

G
"$O/N0=10">cD9",-8hïA%-"0^T-O/1B1/4#15'",Lóa,¨Ï0mSb)k4A"TG;"4M10G;G
=*>=&Ka¢Ï0Z.*:%$H
iSOB1/1/4#15?4#G;$²/",²).k$-=)Ë&(==D9#"1/1-$U).J",1w=1'S$"G
G;"8-B4#1b:4#&1=Â=F³
)S4M$%P4#1/NB4#8",%N!4#1!P%<FHS&=O/1/N>B",\U\¦$/=)S$k<c%-G
A*>8<=G
DX4A4ADX&=-G;"1/8<
=1É^¢;=&Ây,wN=G;"4M1/$S#4M$%%N",YX=HE?1¯).=¨Ý.ÛÞFß£àc×áÞâ-Ûrãc$b9ëTæXâ-å#ÙwØb9"1/N¤ë>Ü×ê¯ØRâ%ÜXbX4A
$%4#MW$=)S$$",4#$%&*c4M15'YX/"c4A=H?c=G
<"G
DBA$k/",E/"
1=YX1OB$%N4M1>yjSf_l.c³¡,



8<=G
DX4A4A=1!",



IS
Ök××ØÙwÚÛ7Ü¤=G;"4#1Hy\U\$%=A$Paw=&.'ó,T"$%F$L4#10;jkf£lK:³-^``T%$%L$-O/4A%
4#1
#$$U/"16BJ$%8<=1BN/$b)S/KK6BK=-$²",-4A²O/1/$=A",Y9Ab,=²/"S$D84A698",4A=1
-=-$HIJS=1/A*=ÂDBM"1/1).SF1=)Ë=&B",8"1'$=AS"1:*
=&/SÖk×-×RØÙwÚÛÜy"$c$.4#$
f_lÂlHIJE#",%$.R$4A=1Tf_lÂl²îHÍy$%=#$K=1/A*;&=OK=&WE-*$G;"M94#1B$%"1/8<$bF",F4#15
OD
%=^w=OR$kRO/1/1/4#1/5
4#G
HE\U\ÌÍ$LDB#"1!#15/$?",bV4#1%-G;$=&²
1cO/GhY=&Â"8<4A=1B$b

	k

lk

$-=%J/"1>f£llJÌÍ$4#G;P$%%D>=D/4MG;"X=1$b/R"154#15
&=Gò`, ª%=T`¢ wH

d }



IS
ÝâRå(Ø ß ,×ØáUÞâ-Ûã¨=G;"4M1HPIJ/4M$k4#$?"¨8#"$-$4#8"UN=G;"4#1Vb)k

À Æ	

=Y _8<$E1N¤%=¨YX

%R"1/$%DX=%N¤O/$4#1/5"TY/-4#&8"$%HE1PyY/-4A&r8"$%y4#$?G
=Nb"w8<=1BN/4A4A=1/"<X8<

7	

&=-8<$E"#=Y %8<$E4#1/$4MNLY/-4A&r8"$%%=¨G
=
)S4#4AHE\-=GÑ=O$-O/4A%bXf£ll²îHÍw"$4##*
$=A$h"$c$)S4A

À H

7	

Qa;=Y %8<$bXYBOk&"4M#$J%=¨$%=Ay"1:*>"$%>)S/

7	

À L

d:H?\\.b=1

/h=E/"1BNb$=A$1/w^^³=Y %8<$E"$%F$?4#10A$$k/"1"T$%8<=1BNHEE1!h"$%F$

bk

k

lk

B",.f_lÂl±$=A$bFDB#"1wA15/$.=&W\U\C",?)S4A/4M1î ÿ%=¨^^^ ÿ=&Wf_lÂlSÌÍ$.#15/$b`` ÿ=1
"-",5H



ISäKâ-årã3=G;"4#1H3IJ/0^``¤8<=G
DX4A4#=1°&",ONC69T4M1/$%"1/8<$H3\/=
$%T"$%F$b
/;&"$%$%LDB#"1B1/4#15wG
8-/"1B4#$Gõ).
c1/=)=&K&=GÑ'#4#%-",O
4#$E"¨R$4A=1¤=&Sg?iUI
B",K4M$Â1/B"1/8<Nw)S4Aw"$-4#G
DBASc4#1BN;=&N/=G;"4#1wNDX1/N1:ÂF1=)S#N5b$OD/DBM4AN
Yc*;

qâíúíCVoíúñðçðõ?ëFåô òë;åôTæ(þ ÷úåoç9ìëFåoéðñ  ;ñðåoñÐòëFìZæ;òZçä æFòë;íúí?ôTæ(þMë;÷úå"çðõgëmòZñaëwù(ëF÷îíîëFóoíúña÷îåë;å&æ(åoíú÷úåoñaëFøe
øñðåoô"÷¨âC)U êoñ¤ (ñðå"ñòëFìZæFòZçðõ"ìZæ (ñìZê"ñòMªÂ÷ ìZêgôTñðçéòZ÷úø"ìZ÷úæ;åoçæ;ä¸æ(èTò)òë;åoô"æ(þA÷¢¡wëmìZ÷úæ(åç9ìòëFìZñ ;÷îñçðõëmòZñJë;íúçæAëwù;ë;÷úíîë;ó"íîñJëFì
êOììZøba cd5c ª%ª%ªGâ ÷îåTä æFòZþMëFìZ÷úöâ è"åo÷WeýäòZñð÷úó"è"ò "â ôTñc5f×êoæhgþMë;å"åicgie!ôTæ(þMë;÷úå"çðâ êOìZþAíâ



÷

ø 9ù>ú~¦20ûÀ$7ü`$22

l

Å

$#ù#ý!þ2Fý

¸l l ¸l
pl pl ¸l l

¸l

OB$%HÂf£S$%=#$JL"$c$4#1^ Í,îb¢ ç¢ócbXF^ çóacbU^` ç`'"1BN¥^^ ç¢a$%8<=1/N/$S=1!"'ó,Ïmk

ü

l1:4#O/GÎ.A-=1hG;"8R/4#1.)S4A¢îEÏZ.*c%JG;"4#1G
G
=*']riS&"1/4MN/4#$Us
\U\C$%=A$.E$"G
"$%F$K)S4A/4M1; #^acb/

¸l

#"/""$bc,eRH

î:d:b9 #^^,bV^ ç`óy"1/N0^` çaî;$%8<=1/N/$bc-$%DX8<4AA*H

lk

lk

lk

l#"1>A1/5/$K=&\\±",-L)S4A/4M1w` ©%=!^ó` ©=&²g?iUIEÌÍ$kA15/$bV^^ t=1>"-",5H



IS!ä.â-åçæ/æØRâ?=G;"4#1bWOB$%N¤4#10>^``¨8<=G
DX4A4A=1VHPIJ
1cO/GPYX?=&K$%",%$E/",L\U\
,"#O/",%$hYX&(=-
O-1/4M15¨"1=D/4#G;"Â$%x:O/14#"Â$%=#O4A=14M$
{ ~}«-|,L4#1¤'$-4A;=&K

pl

"$w/HÂIJEY94A55$%Sjkf£lK:³-^``y<"G
DBAE5$$%=AN!4#1¨ #^¢;$%8<=1BN/$H



IS
ìåAâØáÞâ-Ûrãh=G;"4#1VH²IJ=-4A54#1/"B"$%;&=-GO/#",%NwY:*FO/",KiSO/$$9"$%F$.DB#"1F³
1/%=P691/N;=O/=)Ë%=hDB#"8<"E§9",4AH²E=c/AÂ"1BNmk=,XG'"1/1],"e.G
=FN/4769N

"$>$O/8->/",S"1!",-YB4A%-",*T1cO/GPYX=&

À

4A$S1N>%=;YXED9#"8<NHÂf_lÂl.ócHçcbBO/$4M15


pl pl
À L

l

5="",51/N/"L%8-/1/4Mx:Obc$%=A$ÂP^,bcb:"1/Nwó³4AJ"$%F$Â4M1; Ícbc çF^,b"1/N!^ çóóP$%8<=1BN/$b
-$%DX8<4AA*bYBOh<FB"O/$%$yG
G
=*¥$%=O-8<$y"$y$%=c=1É"$
M",5J"$%F$b/",F4#15;A$-$/"1>"
%1:¨=&"
$%8<=1/N!)S1

pl

îH¤\U\p$8"A$%=GhO/8R

À H

Ë¢cb9$%4##X$%=AF4#15y;^³4#

"$>4#1> çóó$%8<=1/N/$H\U\.ÌÍ$SD9#"1>A15B$J",b=1>L"$c$k/",Sf_lÂlÊG;"1/",5$k%=$=Ab
xcO/"##*A=15;4M1T%-G;$J=&P1cO/GhYX=&"8<4A=1B$H

\	

j$Â)K"$Â"A-"N*;$"4#Nb=O4#1:O/4A4#=1;4#$/",kG'" _=-4#¯*
=&S8O/1:A*
","4##",YBASY1B8-/G;",-
DB#"1B1/4#15!N/=G;"4#1/$

°

",A"$/=$%¨D/$1%NCYc*¥=O
N=G;"4M1C8<=MA8<4A=1

°

",-Éð%$-4#G
DBAñ4#1

$%%-OB8<Ob"1/N3B",4A4#$LB4#$h$-4#G
DB#4M84A¯*)S/4#8R¥G;",$GÒ$%=A,",YBA$%=!"$4MA*Y:*3"5N*
"A5=-4#/Gÿ$-O/8-w"$K\\.HI=y4M##O/$%%R",%J=OK4#1OB4A4A=1/$b)E1=)Ë54AEN/","h&=K"h&)N/=G;"4#1/$Â/",
/"h"
A$$S$4#G
DB#$%%RO/8<OHÂIS*",P&=P8-B"#A154#1/5&=S\U\.H

$'&($)]\TW
[

ë>Ü×ê¯ØRâ_Ü

h9b=>

ëTæXâ-å#ÙØ

NahT6"b¤0

IJë¨Ü/×ê¯ØRâ_ÜË"1/NËëwæâ-å#ÙØTN/=G;"4#1/$
).0O/$%N24M1¦!jkf_l.:³-^``°8<=G
DX4A4A=1HvZ.=",
,",-4#",4A=1/$=&.
èÞéå#×êårß-×EN=G;"4#1Vb)ky
",;"N/NB4A4A=1/"8<=1/$%%-"4M1$?=1¤;8",D9"84A¯*
=&."8-/4M8AbV"1/NbW4M1D9",4#8O/#",b=1¤/;"G
=O/1:E=&Â&rO/",L4#$E","4##",Y9AHhZ.=3N=G'"4#1/$
",E8A=$%#*'#",%NVbc/=1BA*'N/47X1/8<?YX4#15h/",J4#1TëTæXâ-å#ÙØbc&rOX4A%G;$K8"1¨YXk%R"1/$%DX=%N
YX¯).1y¯).=LA=F8",4A=1/$b4A&B=1K=&B=$%/"$UG
=-.B"1y=1$O/8-y4A%G>Hf_1y\4#5OJ`cb)8<=G
D9",
\U\.ÌÍ$J$OBA$=1¨YX=>N=G'"4#1/$K%=;/",SDX=%N¨Yc*T)pÏ8-G
=%&=JPï1DX=D>$%*F$%%G
]rÏ08kRG
=%b^```eRH

-?

f_1/$%"1/8<$Â",JJ$"G;&(=²YX=;N/=G;"4#1/$U4#1
\U4A5O-S`cHUiS$O/A$U&=

},zFµRz
/"kYX1y",1

Yc*Ï08-G
=%²=1;"Ló,PÏmkSl14MO/Gy³ff)=F$%",4A=1]rÏ8-G
=%bX^```eRHÂjÊN/"$
4#1BN/4#8",%$
/",J/L"$%T8<=O/#N/1Ì YXL$%=#N¨Y:*wP8<=-$%DX=1/N/4#1/5hDBM"1/1H

u

4#1

¸

?1/.1NB$W%=?YX8",&rO/c)S1h8<=G
DB",-4M15k/-OB1/1/4#154MG
$U4#1P\U4A5O-K` O/1/#4A\\.b8<=FNN

lt	 

bï1DX=D¨4#$Â)S-4A%%1T4#1

H²IJcO/$bF?",D/DB",-1K-O/1:4#G
?$ODX-4#=-4A¯*y=&\\C4#1T\U4A5OE`4#$

1=S$-4A51/47698"1:HÂ?1¨L8<=1:%-",*bïk1/D=D>$G;$J%='$=AE$%L"$T8<=MA8<4A=1/$JG;=E#4#",Y9A*

³

/"1¨\U\

/4A.691/N/$.$%=#O/4A=1/$.%=
&(=O/Kë>Ü/×ê¯ØRâ_Ü>"1/NwLëTæXâ-å#ÙØJ4#1/$%"1B8<$K)S/4#8Rw\U\ÉN=c$1=

O

G;"1/",5k%=P$%=AH²ok=1J=&XSDB#"1/1R$4M$²$ODX-4A=²4M1y%-G;$²=&X$%=#O/4A=1;A15B$ U?1'ë¨Ü/×ê¯ØRâ_Üb

lk

lk

lk

\U\0-"15$)S4#/4#1yaa u%=;^a u=&ïk1/D=DWÌÍ$A15/$b/^ó ô=1
"-",5bF=1;ëTæXâ-åMÙØb\\¤R"15$

lk

)S4AB4#1wîa

	k

lk

%=!^a, wbX`ó

=1>"-",5H

/4#1w/",\\.ÌÍ$YX/"F4A=J=1$%h¯).=wN/=G;"4#1/$J4M$SN/OP%='#",5P"G
=OB1k=&²N"N
1/N/$U4#1hK8<=$%DX=1/NB4#15k$",%K$DB"8<$

°

).%-4ANh%=?-"1/N=G;4#.\U\.ÌÍ$$%",-8R
$%%-",%5*bRO/1/1/4#1/5

4A=1/ë>Ü×ê¯ØRâ_Üw"1/Nwëwæâ-å#ÙØJ$O/4A$HUiJ5",RN/A$$.=&V-"1/N/=G;4A",4A=1$%%-",%5*').%-4ANbc=1
E"$%F$JB",J=-4A54#1B"\U\±8<=O/MN/1Ì $%=AP$",-8-!1/NN¨OD¨YX4#15
$%OB8¨4#1¨"
N"N¨1BNH²"N



ö

Å

¢¤r£­¤¥¤ ¦ ®r¯±°r²
rr­¤­¤  ®r®r¯±¯±°¸°´·
rr­¤­¤  ®r®r¯±¯±°°¸¶µ
rr­¤­¤  ®r®r¯±¯±°°¸¾º
rr­¤­¤  ®r®r¯±¯±°°¹¼
rr­¤­¤  ®r®r¯¬¯¬²x²°²
rr­¤­¤  ®r®r¯¬¯¬²½²x´·
rr­¤­¤  ®r®r¯¬¯¬²x²½¶µ
rr­¤­¤  ®r®r¯¬¯¬²x²½¾º
rr­¤­¤  ®r®r¯¬¯¬²x²x¹¼
rr­¤­¤  ®r®r¯¯·S·»°²
rr­¤­¤  ®r®r¯¯··S´·
rr­¤­¤  ®r®r¯¯·S·¶µ
rr­¤­¤  ®r®r¯¯·S·¾º
rr­¤­¤  ®r®r¯¯·S·S¹¼
r­¤ ®r¯±´°

¸

2f$ÆÈÇi¤¦

0 p  lWW ¡~¡
¢¤§ °r¨ª³ ´© ¥«¢¬©  µ ¥ ¢¬°r§ ¨ª³ °¶©
´r·»³³ ´²
¹¶ °r°r³³ °·¹µ
¯¯
¯¯
¯¯
¯¯
¯¯
¯¯
¯´r³ ´
¯¹
¯¯
²³ ¶ ¯¯ ²² ¯¯ °r³ °¸µ ¯¯
´¸²x¾¸ºS°r·»³³ ²² ²x²x¾¹
¯
²½º»³ ´ ¯
¾ ¯ °r³ ¼¹ ¯¯
²x´r³ ² ¯
µ ¯ °r³ ºS° ¯
¾º °r³ ¶r² ¯
·²·»²³³ ¹µ ¯
¯¯
¯¯
¯¯
¯¯
¯¯
¯°r³ ¶
¶¾ °r°r³³ °¸¹¸·µ
¾r´r³³ °¹
¼¼ °r°r³³ °¸°rµ²
²°r³³ ¼¶
·S°r³ ¹ ²x¶¶ °r°r³³ °·S¾´

¥¢¬©  µ ¥
²x°¶
¯
¯¯
¯¯
¯¯

¼¯
¯

¹ ¯¯
¶¯

x² ´ ¯¯
¯¯

¶º ¯
µº
²¶²

0 p  l 	 ¡~¡
¢¤§ °r¨ª³ ¶© ¥«¢¬©  µ ¥ ¢¬°r§ ¨ª³ °¶ © «¥ ¢¤©  µ ¥
²x´rµ»³³ ¼µ
¹¶ °r°r³³ °·¼º ²x°¶
²x´r¼r³³ ¼· ¯ ²½¼º ¯ °r³ °¶ ¯¯ ²x° ¯¯
µ²x´r·»³³ µµ ¯ ²x°¹ ¯ °r°r³³ ¶²x¾° ¯ ²x²x°° ¯
ºS¼r·»³³ °¼ ²x²¼² °r³ °¾ ¯
¯
¼
¹¹r¼r³³ °´ ¯ ²½²½·µ ¯ °r°r³³ ·S²x°¾ ¯ ²x²x°° ¯
¹º
·²x¶r¶rµ»³³³ ¾°· ²x¾´µ ´r°r°r³³³ ´¼¸·S¹¼·
¶¯
¯
¯
¯
¾¸·S·¶r·»·»³³³ ¹º² ²½²¾º² °r´r³³ ¼²¼² ¯ ²x´¼ ¯
²x´¸µµ»µ»³³ º° ²x²x¾¹ ¾¶´r´r³³ °²x¼¼ ·S²x¶´
·S¶r°r³³ ¹µ ²½¶µ °r·»³ °¸³ ·º
¼¶
²x¾r·»³³ ¶¹ ²x¶º °r°r³³ ºS²x¾¹ ²x°µ
²²³³ ¾µ ²¶² °r°r³³ °´¹°
µ
¶
²½º»³ º ²½· ²³ ¹¾ ²²

\U4A5OP` kiSO/1/1B4#154#G
$"1/N$%=#O4#=1PA15h$OBA$V=1.jSf_l.:³-^``ë>Ü×ê¯ØRâ_Ü"1/Nëwæâ-å#ÙØ
$O/4A%$H

1/N/$K",E"&x:O/1KDB1/=G
1=1w4#1'/?ë>Ü/×ê¯ØRâ_ÜT"1BNwëTæXâ-åMÙØJN/=G;"4#1/$bc)S-bc&=K<F"G;DBAb
"104#G
DX="1:J/4#8Ah8"1!-OB1>=Ok=&&OH.f_1>B",k$%1/$b9h"$%F$k4#1!$%N=G;"4#1/$S/"
"
G
=
8<=G
D9A<$%%-OB8<O/"10=$%
4#1¤"TA=k=&=EYX1/8-BG;",>N=G;"4M1/$bX)S"$%F$
",N"NF³1/N'&(HDX1/N/4#1/5LG
=J=KA$$R"1/N=G;A*=1;"$;$%%-O/8<O-S"1/N'$A8<%N'"8<4A=1B$b
\U\8"1¤4AE$%=A
ë>Ü×ê¯ØRâ%Ü"1/N¤ëTæXâ-å#ÙwØE"$%F$ExcO/4A%&"$%bW=E&"4#M$b4H HAb1/8<=O/1:%-$E"TN"N
1/NÉ$%",%>)k4AC1&(=R8<N±/4##7³¯8M4#GPY94#15HI*F4#150%=$%=A¨T"$%F$y)S4AÉ8<=G
DB#%¨Y$_³6B-$%
$%",-8R></"O/$%$SG
G
=*w$%=OR8<$J&=S#",5S4M1/$%"1/8<$H

$'&($'&H:Gh9b=>|a cZ_J\¿©b¤0:ÑhTb¤P(W(0
[

?Oy#"$%y<"G
DBATN=G;"4M1°4#$y1=
"08#"$$4M8"D9#"1/1/4#1/5>YX1/8-/G'",9HI=¤54A¨"1É<F"G
D9A=&
"¤DB#"1B1/4#15"$%C8<=MA8<4A=1É)S-T\U\ª«|,{{  ¨1B8<=O/1%R$;N/47@8OBA4A$b).>8<",%N2"¤D9#"1/1/4#1/5
N=G;"4M138<=1"4M1/4#15!B",-N3-"1BN=G

JÀEócHç¢cH

FjIÿ4#1/$%"1/8<$HT\U4A5O/!^!$-=)S$P-O/1:4#G
;8O-$P&=h\U\.b

f_lÂl²îHÍFb9"1/N>ZKnWjSÎKPZ

IJ/."$c$²4M1\U4A5O/^E",-J$%=A,",YBAJFjI±4#1/$%"1B8<$U/",)--"1/N=G;#*L51-",%N;"88<=RNF³

l

4#15
%=L6BcN8#"O/$%<³¯A1/5>G
=FNV)S4#¨î çó
4#G;$S"$SG'"1*>8#"OB$%$S"$S",-4M",YBA$P]rÏ04A8-/#b
c#G'"1bsËnW$xcObB^``eRHÂik"1/N=Gu4#1/$%"1B8<51R",4A=1
"1/N%-"1/$M",4A=1y$%=&(¡).",-%=?l?n

7

/";YX=¤Y13D/=F4#NN0Yc*

O/$$4Uik4#1"1/1H'?O?6B5O-y$-=)S$L-O/1/1/4M15'4#G;$E&(=hjI4#1F³

$%"1/8<$)S4#0acbU^Fb²^acbV,Fbacb"1/N¤ó,",-4M",YBA$bB6Bh"$c$=&²"8R$4AH

ü

"MO$S&=?"$%F$k=&

S$-"G
S$4Ak",SN/4#$DB#"*N'4#1yO-1b:4H HAb:"#NB","LDX=4#1:$YXA=)Q^L=1;c³¯"4#$Â$/=)2RO/1/1/4#1/5
4#G
$&=?a,",-4#",YB#P"$%F$b"1/N¤$%=w=1HEIJ=O5yN/","T$%4M$k$G'"#bh=Y9$%,",4A=10%=wYX

T£

ø 9ù>ú~¦20ûÀ$7ü`$22

Å

$#ù#ý!þ2Fý

1000
FF
IPP
BLACKBOX
100

10
sec.

j

1

0.1

0.01
5

10

15

20
#variables

25

30

ÁÂ¬ÃlÄªÅÆÇÈÊÉOËÄCÌbÍÂÏÎÆÐÄªÅÑiÆ5ÒÓ/ÔiÅQÁÁÕÊÖr×Ø×?ÕÙiÌCÚ{ÛQÜBÝÞ#ßÛJà À ÕÊáâªÆ5ÌãÅhÄCÌãÔlÌâ!Ù0ÅhÚ`ÅÙiÌCÚªÔlÎ¿äÊÝå
ÂÏÌCÒæÍÙiÌCÐ~Æ5ÒJáÂ¬ÍâçÙiÌ"ÂxÌCÐ~ÅÆ5ÙiÒÂÏÌCÃèÌÄCÎEésÆÅ#ÔiÓÑ0Ù0ÅhÂÏÙ0é!êÏÆ5Òë
ÎÙiÚªÆEÂÏÒJÐê¬Æ5Ù0Å5ÉÁÁìÐÙiÌNÔlÌCêÏíÒæÔlêÏÑiÆîÍâªÆîÒhÎÙiêÏêïÂÏÌCÒÍÙiÌCÐ~Æ5ÒÕ!ÙiÌCÚ"ÍðáÔ`ÔiÓÍâªÆEé!Â¬ÃiÃiÆÅJÔlÌªÆ5Ò5ëØÖp×ñ×AÙiÌCÚ
ÛQÜBÝÞQßîÛ#à À ÒÐÙiê¬ÆîÎ&ÄCÐâçésÆÍæÍæÆÅ5ÕCáÂ¬Íâ{ÍâCÆÍæÆ5ÌCÚªÆ5ÌCÐ~íÍâCÙ0ÍÛQÜÝÞQßÛJà À ÂÏÒJÓ/ÙiÒæÍæÆ5ÒÍë
åJâCÆÆ5ÌCÐ~ÔÚ!ÂÏÌªÃ#ÔiÓÊÍâªÆäÊÝå3ÂÏÌCÒæÍÙiÌCÐ~Æ5ÒÂÏÒsÍâªÆòÓ/ÔlêÏê¬ÔáÂÏÌªÃªëÝOÌîÔió+ÆÅÙ0ÍæÔiÅÐ~ÔiÅÅÆ5Òó+ÔlÌ!ÚCÒsÍæÔÙiÒÒÂÏÃlÌCÂÏÌªÃ
ÙèÍæÅhÄªÍâ{Ñ0ÙiêÏÄªÆÍæÔÙèÑ0Ù0ÅhÂÏÙ0é!êÏÆiÕáOâCÂÏÐhâ{ÎÙ0ôiÆ5ÒOÙiêÏêsÐêÏÙiÄCÒæÆ5ÒQÍæÅÄªÆÍâCÙ0ÍJÐ~ÔlÌbÍÙiÂÏÌçÍâªÆÅÆ5ÒæósÆ5Ð~ÍÂ¬ÑiÆêxÂ¬ÍæÆÅhÙiêë
àÌCÐ~ÆÙèÑ0Ù0ÅhÂÏÙ0éê¬ÆâCÙiÒQésÆÆ5ÌçÙiÒÒÂ¬ÃlÌªÆ5Ú=ÕCÂ¬ÍÒQÑ-ÙiêxÄªÆÂÏÒõCöÊÆ5ÚïëòåJâªÆÃiÔlÙiê=ÂxÒ#âCÙ5ÑÊÂÏÌªÃÙiêÏêïÐêÏÙiÄ!ÒæÆ5ÒQÍæÅhÄªÆiëòÖrÍ
ÂÏÒOÌªÔiÍOÒÄCÅóCÅhÂÏÒhÂÏÌªÃ&ÍâCÙ0ÍOÛQÜBÝÞ#ßÛJà À ÚCÔbÆ5Òé+Æ5ÒÍëQÝOÓ/ÍæÆÅÙiêÏê¸Õ!ÍâCÂÏÒJó!êÏÙiÌCÌªÆÅOÄCÒæÆ5ÒäªÝå;ÍæÆ5ÐâCÌªÔlê¬ÔiÃií
Ó/ÔiÅîÒæÔlê¬ÑÊÂÏÌªÃ{ÍâªÆÍÙiÒôÒë÷øÁCÔiÅîÖp×ñ×;ÙiÌ!Ú1ÁÁØÕBÍâªÆ`ÒæÆ5Ù0ÅhÐâ3ÒæóÙiÐ~Æ`ÂÏÒÍâªÆ`Òó!ÙiÐ~ÆÔiÓQÙiêÏêó!Ù0ÅÍÂÏÙiêòÍæÅhÄªÍâ
ÙiÒÒÂÏÃlÌCÎÆ5ÌbÍÒë1ùÄªÆ{ÍæÔ(Æ~öÊÐêÏÄ!ÒÂ¬ÔlÌúÅÆ5êÏÙ0ÍÂ¬ÔlÌCÒ5ÕÖr×Ø×uÐÙiÌKÅhÄCê¬ÆãÔlÄªÍûbÄ!Â¬ÍæÆÎ`ÙiÌ	íüÒÄCÐhâKÙiÒÒhÂ¬ÃlÌCÎÆ5ÌbÍÒ
Æ5Ù0Åhê¬íiÕiáOâªÆ5ÌèÂ¬Í?õÌCÚCÒÍâªÆíEÐÙiÌ=ýWÍé+ÆQÐ~ÔlÎó!êÏÆÍæÆ5Úïë?ÁÁÕiÔlÌèÍâªÆQÔiÍâªÆÅòâCÙiÌ!ÚïÕiÚªÔbÆ5ÒÌCÔÒhÄCÐhâ&ÅÆ5ÙiÒæÔlÌ!ÂÏÌªÃªÕ
ÙiÌCÚèÃiÆÍÒòêÏÔlÒæÍÂÏÌ&ÍâªÆ#Æ~öósÔlÌªÆ5ÌbÍÂÏÙiêÊÒæÆ5Ù0ÅhÐâÒæó!ÙiÐ~ÆiÕbÄCÒÂÏÌªÃÙâªÆ5ÄªÅÂÏÒæÍÂÏÐñÍâCÙ0ÍòÎÆÅÆ5ê¬íîÍæÆ5êÏêÏÒÂ¬ÍâªÔáìÎÙiÌ	í
Ñ0Ù0ÅhÂÏÙ0é!ê¬Æ5ÒQÂ¬ÍQáÂxêÏê!ÒæÍÂxêÏêÌCÆÆ5Ú{ÍæÔÙiÒÒÂ¬ÃlÌÍæÅhÄªÍâ{Ñ0ÙiêÏÄªÆ5ÒÍæÔªÕ!Ä!ÌCÙ5áQÙ0ÅÆÔiÓÍâCÆÂxÌ	ÍæÆÅhÙiÐ~ÍÂÏÔlÌCÒQÍâCÙ0ÍJÎÂ¬ÃlâbÍÕ
ÙiÌCÚNÎÔlÒæÍJêÏÂ¬ôiÆ5ê¬íãáÂÏêÏê¸ÕbÔÊÐÐÄªÅ5ë
ÖpÌNÐ~ÔlÌbÍæÅhÙiÒæÍJÍæÔ`ÎÔlÒæÍJÔiÓÍâªÆÐÄªÅÅhÆ5Ì	Í#ésÆ5ÌCÐâCÎÙ0Åôó!êÏÙiÌCÌ!ÂÏÌªÃEÚCÔlÎÙiÂÏÌCÒÕÊõ+ÌCÚCÂÏÌªÃèÙÌªÔlÌÊþ¸Ôió!ÍÂÏÎÙiê
ÒæÔlêÏÄCÍÂ¬ÔlÌüÍæÔ1ÍâªÆ{ó!êÏÙiÌCÌ!ÂÏÌªÃ"ÍÙiÒôÒãÄCÒæÆ5ÚKâªÆÅÆNÂÏÒçÿ !þðâCÙ0ÅhÚïëKÁÁýÒésÆ5âCÙ5ÑÊÂ¬ÔiÅÔlÌIÍâªÆ5ÒÆçÍÙiÒæôÒ`ÒÄªóªþ
ósÔiÅÍÒèÔlÄªÅÂÏÌbÍÄCÂ¬ÍÂÏÔlÌ3ÍâCÙ0ÍÁÁýÒÆ ãÐÂÏÆ5ÌCÐ~íüÂxÒ&Ú!ÄªÆ{ÍæÔ(ÍâªÆNÂÏÌCâªÆÅhÆ5Ì	ÍèÒÂÏÎóêÏÂÏÐÂ¬Í»í(ÔiÓOÍâªÆçóêÏÙiÌCÌCÂÏÌCÃ
ésÆ5ÌCÐhâ!ÎÙ0ÅôÊÒë

		!"#%$&	('")+*-,/.'10324356789$&:;5-<$&%$&1=?>@AB;CD;EF>@	FGH$I	6J>>IABF
8K>IL$I	FGMJE<$N%$I1:F		O
P!QR

S6TU<U<VWYXZX\[^]`_ba+_bc
d1egfihkj-lZmonplqr+stmFjBrvuxwzy{r+|Fr~}Bbr4m1

àÌªÆèÔiÓØÍâªÆûbÄªÆ5ÒÍÂ¬ÔlÌCÒÍâCÙ0ÍÍâªÆÙiÄªÍâªÔiÅÒâ!Ù5ÑiÆésÆÆ5Ì(ÙiÒæôiÆ5Ú(ÎÔlÒæÍÓ/ÅÆ5ûÄªÆ5ÌbÍê¬í"Ù0ÍÍâªÆÝÖp×äþ 0ÈiÈiÈ
ó!êÏÙiÌ!ÌCÂÏÌªÃÐ~ÔlÎósÆÍÂ¬ÍÂ¬ÔlÌÂxÒÍâCÂÏÒÉÖ»ÓsÁÁ(ÂÏÒòÒæÔEÐê¬ÔlÒæÆ5ê¬í&ÅÆ5êÏÙ0ÍæÆ5Ú`ÍæÔäª×Õ	ÍâªÆ5ÌáâbíèÚªÔbÆ5ÒñÂ¬ÍósÆÅÓ½ÔiÅÎuÒæÔ
Î&ÄCÐhâ{ésÆÍæÍæÆ@Å LÁÁKÄCÒæÆ5ÒQÍâªÆÒÙiÎÆéÙiÒÂÏÐÂÏÚªÆ5ÙiÒ#ÙiÒ#ÐêÏÙiÒhÒÂÏÐÙi1ê äÊ×?ÕÓ/ÔiÅáQÙ0ÅhÚçÒæÆ5Ù0ÅhÐâNÂÏÌ{ÒæÍÙ0ÍæÆîÒó!ÙiÐ~ÆiÕ
ÙiÌCÚâªÆ5ÄCÅhÂÏÒæÍÂÏÐØÆÑ0ÙiêÏÄCÙ0ÍÂ¬ÔlÌéíEÂÏÃlÌªÔiÅhÂÏÌªÃÚªÆ5êÏÆÍæÆJêÏÂÏÒæÍÒ SÛÔlÌªÆÍ Æ sÌªÆÅÕ!Ç bëñåJâCÆQÚ!Â +ÆÅhÆ5ÌCÐ~Æ5ÒêÏÂ¬Æ
ÂÏÌ"ÍâªÆEáQÙ5íGÁÁìÆ5ÒæÍÂÏÎ`Ù0ÍæÆ5ÒOÃiÔlÙiêÚCÂxÒæÍÙiÌCÐ~Æ5ÒÕ+ÍâªÆèÒæÆ5Ù0ÅhÐhâ ÒæÍæÅÙ0ÍæÆÃiíiÕ=ÙiÌCÚLÁÁýÒóCÅhÄCÌ!ÂÏÌªÃÍæÆ5Ðhâ!ÌCÂÏûÄªÆ5Òë
åÔîÔiéCÍÙiÂÏÌãÙó!ÂxÐ~ÍÄªÅÆ#ÔiÓïáâCÂxÐhâÌªÆá7ÍæÆ5ÐhâCÌ!ÂÏûbÄCÆíÊÂ¬Æ5êÏÚCÒáâ!ÂÏÐhâ`ó+ÆÅhÓ½ÔiÅhÎ`ÙiÌCÐ~ÆJÅÆ5ÒÄ!ê¬ÍÒÕláÆOÐ~ÔlÌCÚ!ÄCÐ~ÍæÆ5Ú
ÙÌÄCÎîésÆÅQÔiÓBÆ~öÊósÆÅhÂÏÎÆ5ÌbÍÒáâªÆÅÆÍâªÔlÒÆÍæÆ5ÐhâCÌCÂxûbÄªÆ5Ò#Ð~ÔlÄ!êÏÚé+ÆÍÄªÅÌªÆ5ÚÔlÌçÙiÌCÚ{<Ô  ÂxÌCÚªÆósÆ5ÌCÚªÆ5ÌbÍê¬í
ÔiÓÆ5ÙiÐhâ7ÔiÍâªÆÅ5
ë ÒÂÏÌªÃ(ÙiêÏê#Ð~ÔlÎEé!ÂÏÌCÙ0ÍÂÏÔlÌCÒÔiÓÍæÆ5ÐhâCÌCÂxûbÄªÆ5Ò5ÕØáÆNÎÆ5ÙiÒÄªÅhÆ5ÚIÅhÄCÌbÍÂÏÎÆçÙiÌCÚIÒæÔlêxÄªÍÂ¬ÔlÌ
ê¬Æ5ÌªÃiÍâ`ósÆÅÓ½ÔiÅÎÙiÌCÐ~ÆJÔlÌãÙîêÏÙ0ÅÃiÆÒæÆÍñÔiÓsó!êxÙiÌCÌCÂÏÌªÃésÆ5ÌCÐâCÎÙ0ÅôèÍÙiÒæôÊÒëÖpÌÍâCÂÏÒØÒæÆ5Ð~ÍÂ¬ÔlÌïÕáØÆÚªÆ5ÒÐ~ÅhÂÏé+Æ
ÍâªÆÆ~öÊósÆÅhÂÏÎÆ5ÌbÍÙiê=ÒæÆÍÄCó=ÕÙiÌCÚ"ÒÄCÎÎÙ0Å9Â ÆÔlÄªÅJõ+ÌCÚCÂÏÌªÃlÒ5ëòåJâªÆÅhÙá ÚCÙ0ÍÙãÙiÌCÚ"ÚCÆÍÙiÂÏê¬Æ5ÚçÃiÅhÙ0óâCÂÏÐÙiê
ÅÆóCÅhÆ5ÒæÆ5Ì	ÍÙ0ÍÂÏÔlÌCÒ#ÔiÓÍâªÆÅÆ5ÒÄ!ê¬ÍÒJÙ0ÅÆÙÑ-ÙiÂÏêxÙ0é!ê¬ÆÂÏÌçÙiÌçÔlÌ!êÏÂÏÌªÆÙ0óCósÆ5ÌCÚCÂ¬ö+ë
"9"A 3¡¢Z£1¤z¥`¢Z¦-§©¨3ª4«Y¢§/¬3¡

­(ÆÓ/ÔÊÐÄCÒæÆ5ÚÔlÄªÅÂÏÌbÑiÆ5ÒæÍÂ¬ÃlÙ0ÍÂ¬ÔlÌ`ÔlÌ`ÁÁýÒòôiÆíÓ/Æ5Ù0ÍÄªÅÆ5ÒÕÂëWÆië¬Õ	áÆJÅÆ5ÒæÍæÅÂÏÐ~ÍæÆ5ÚÔlÄªÅñÆ~öósÆÅhÂÏÎÆ5Ì	ÍÒÍæÔEÍâªÆ

ÁÁNé!ÙiÒÆØÙ0ÅhÐâCÂ¬ÍæÆ5Ð~ÍÄªÅÆiÕiÅÙ0ÍâªÆÅÍâ!ÙiÌîÍÙ0ôÊÂÏÌªÃÂÏÌ	ÍæÔÙiÐÐ~ÔlÄCÌbÍ?ÙiêxêlÔiÓ!ÁÁýÒÌªÆáúÍæÆ5ÐâCÌCÂÏûÄªÆ5Òë?ËJÆ5ÎÆ5ÎEésÆÅ
ÍâCÙ0ÍÁÁØýÒ?é!ÙiÒÆØÙ0ÅhÐâCÂ¬ÍæÆ5Ð~ÍÄªÅÆ6SÐ~Ó»ëñäÆ5Ð~ÍÂÏÔlÌ®bBÂÏÒ=ÍâCÆñÆ5ÌªÓ/ÔiÅhÐ~Æ5Ú&âCÂÏêÏê¤þðÐêxÂÏÎîéÂÏÌªÃQÙiê¬ÃiÔiÅhÂ¬ÍâCÎNÕ-ÄCÒhÂÏÌªÃJÁÁýÒ
ÃiÔlÙiêñÚ!ÂÏÒæÍÙiÌCÐ~Æ5ÒÆ5ÒÍÂÏÎÙ0ÍæÆ5ÒÕÙiÌCÚ(óCÅÄCÌCÂÏÌªÃÍâªÆ`ÒÆ5Ù0ÅhÐhâúÒæó!ÙiÐ~Æ`áOÂ¬Íâ ÍâªÆ`âªÆ5êÏóCÓ/Ä!ê?ÙiÐ~ÍÂÏÔlÌCÒîâªÆ5ÄCÅhÂÏÒæÍÂÏÐ0ë
åJâªÆÙiÚ!ÚCÂ¬ÍÂ¬ÔlÌCÙiê?ÍæÆ5ÐâCÌCÂÏûÄªÆ5ÒÂÏÌbÍæÆÃiÅhÙ0ÍæÆ5Ú3ÚCÆ5ÙiêáÂ¬Íâ(ÒæósÆ5ÐÂÏÙiêÐÙiÒæÆ5Ò5ÕÂëWÆië¬Õ=ÍâCÆÙiÚCÚªÆ5Ú ÃiÔlÙiêñÚCÆ5ê¬ÆÍÂ¬ÔlÌ
âªÆ5ÄªÅÂÏÒæÍÂÏÐÙiÌCÚÍâªÆ#ÃiÔlÙiêÙ0ÃiÆ5ÌCÚCÙÙ0ÅÆOÐ~ÔlÌCÐ~ÆÅhÌªÆ5ÚáOÂ¬ÍâèÃiÔlÙiêªÔiÅhÚªÆÅÂÏÌªÃlÒÕlÙiÌCÚÍâªÆJÐ~ÔlÎó!ê¬ÆÍæÆé+Æ5ÒÍpþõ!ÅhÒæÍ
ÒæÆ5Ù0ÅhÐâãÒÆÅÑiÆ5ÒØÙiÒÙôÊÂÏÌCÚèÔiÓ=ÒhÙ0Ó½ÆÍ»íÌªÆÍñáâCÆ5Ìê¬ÔÊÐÙiê!ÒæÆ5Ù0ÅhÐâãâ!ÙiÒòÅhÄCÌ`ÂÏÌ	ÍæÔ&ÙîÚªÆ5ÙiÚ`Æ5ÌCÚïëñÞÔlÌCÒhÂÏÚªÆÅhÂÏÌCÃ
ÙiêÏêbÍæÆ5ÐhâCÌ!ÂÏûbÄCÆ5Ò?ÂxÌCÚªÆósÆ5ÌCÚªÆ5ÌbÍê¬íáØÔlÄCêxÚîÃlÂ¬ÑiÆ#ÄC#Ò  ÷ ¯±°² ÚC9Â +ÆÅÆ5ÌbÍ?ó!êÏÙiÌCÌªÆÅ?Ð~ÔlÌÊõ!ÃlÄªÅÙ0ÍÂ¬ÔlÌCÒëÝOÒ?Æ5ÙiÐâ
ÔiÓ=ÍâªÆÒæósÆ5ÐÂÏÙiêÐÙiÒæÆÍæÆ5ÐhâCÌCÂxûbÄªÆ5ÒØíÊÂ¬Æ5êÏÚCÒØÒÙ5ÑÊÂÏÌªÃlÒØÔlÌCê¬íÂÏÌãÙEÒhÎÙiêÏê!ÒhÄªé!ÒæÆ6Í /é+ÆÍ»áØÆÆ5Ì ² ÙiÌCÚ ° ñÔiÓïÔlÄªÅ
0È`ÚCÔlÎÙiÂÏÌCÒÕCêxÙ0ÅÃiÆîÃiÅÔlÄCó!Ò#ÔiÓÍâªÔlÒæÆ °² Ð~ÔlÌÊõ!ÃlÄCÅhÙ0ÍÂ¬ÔlÌCÒ#áÔlÄCêÏÚNé+Æ5â!Ù5ÑiÆîÆ~öªÙiÐ~Íê¬íçÍâªÆEÒÙiÎÆîÔlÌ"ÍâªÆ
ÎFÙ ³æÔiÅhÂ¬Í»íÔiÓ+ÔlÄCÅØÚªÔlÎÙiÂxÌCÒ´ë ­(ÆÚªÆ5ÐÂxÚªÆ5ÚÍæÔèÐ~ÔlÌCÐ~Æ5Ì	ÍæÅÙ0ÍæÆOÔlÌÁÁØýÒÎÔiÅÆOÓ/Ä!ÌCÚCÙiÎÆ5ÌbÍÙiêªÍæÆ5Ðhâ!ÌCÂÏûÄªÆ5Òë
åJâªÆÚ!Â +ÆÅhÆ5ÌCÐ~Æ5Ò#ésÆÍðáÆÆ5Ì"ÐêÏÙiÒhÒÂÏÐÙi1ê äÊ×ÙiÌCÚ"Á?ÁýÒé!ÙiÒæÆÙ0ÅhÐâCÂ¬ÍæÆ5Ð~ÍÄªÅÆEÙ0ÅÆÍâªÆÓ/ÔlêÏê¬ÔáÂÏÌªÃªÉ
Ç0?ë ÔlÙiêØÚCÂxÒæÍÙiÌCÐ~ÆÆ5ÒæÍÂxÎÙ0ÍæÆ5ÒÉ&áâCÂÏê¬µ
Æ äÊ×Ù0óCóCÅÔöÊÂÏÎ`Ù0ÍæÆ5ÒÅÆ5êÏÙ-öÊÆ5Ú3ÒÔlêÏÄªÍÂ¬ÔlÌ(ê¬Æ5ÌCÃiÍâCÒéí(Ð~ÔlÎèþ
óÄªÍÂÏÌªÃÐ~ÆÅÍÙiÂÏÌNáØÆ5Â¬ÃlâbÍJÑ0ÙiêÏÄªÆ5ÒÕCÁÁKÆ~öÊÍæÅhÙiÐ~ÍÒOÆ~öó!êxÂÏÐÂ¬ÍQÅÆ5êÏÙ-öÊÆ5ÚNÒæÔlêÏÄCÍÂ¬ÔlÌCÒÕªÐ~ÓrëØäÆ5Ð~ÍÂ¬ÔlÌ ² ë
ëäÊÆ5Ù0ÅhÐhâIÒæÍæÅÙ0ÍæÆÃiíÉ{áâCÂxê¬Æ`ÐêÏÙiÒÒhÂÏÐÙiê äÊ×HÆ5Îó!ê¬ÔíÊÒèÙGÑ-Ù0ÅhÂxÙ0ÍÂ¬ÔlÌüÔiÓOÒæÍÙiÌCÚ!Ù0ÅhÚúâ!ÂÏêÏê¤þðÐêÏÂxÎîé!ÂxÌªÃªÕ
ÁÁIÄCÒÆ5Ò#Æ5ÌªÓ/ÔiÅhÐ~Æ5Ú"âCÂxêÏê¤þðÐêÏÂÏÎEé!ÂÏÌCÃÙiÒJáQÙiÒÂÏÌbÍæÅÔÊÚCÄCÐ~Æ5Ú{ÂÏÌLäÆ5Ð~ÍÂÏÔlv
Ì ¶ë
Æ äÊ× Æ~öÊó!ÙiÌCÚCÒÙiêÏêÐhâCÂxêÏÚªÅÆ5Ì"ÔiÓñÙiÌ	íGÒæÆ5Ù0ÅhÐâ(ÌªÔÚCÆiÕsÁÁ7Æ~öóÙiÌCÚCÒ
· ë×ñÅhÄCÌCÂxÌªÃÍæÆ5Ðhâ!ÌCÂÏûÄªÆiÉáâ!ÂÏê¬
ÔlÌ!ê¬íãÍâCÔlÒæÆîÐhâ!ÂÏêÏÚªÅÆ5ÌÍâCÙ0ÍOÙ0ÅÆîÐ~ÔlÌCÒÂxÚªÆÅÆ5ÚçâªÆ5ê¬ó!Ó/ÄCê¸ÕÐ~ÓrëØäÆ5Ð~ÍÂ¬ÔlÌ ° ëÏÇ0ë
­(ÆèâCÙ5ÑiÆèÂÏÎóê¬Æ5ÎÆ5ÌbÍæÆ5ÚçÆ~öósÆÅhÂxÎÆ5Ì	ÍÙiêÐ~ÔÚCÆîáâªÆÅhÆÆ5ÙiÐhâGÔiÓÍâªÆ5ÒæÆèÙiê¬ÃiÔiÅhÂ¬Íâ!ÎÂÏÐÚCÂ sÆÅÆ5ÌCÐ~Æ5ÒOÂÏÒ
Ù0ÍæÍÙiÐhâCÆ5Ú`ÍæÔîÙÒáÂ¬ÍÐhâ=ÕlÍÄªÅhÌCÂxÌªÃÍâªÆJÌªÆáIÍæÆ5Ðhâ!ÌCÂÏûÄªÆ#ÔlÌÔiÅñ<Ô ëåJâªÆ#Æ5Â¬ÃlâbÍòÚCÂ sÆÅÆ5ÌbÍòÐ~ÔlÌÊõ!ÃlÄªÅÙ0ÍÂ¬ÔlÌCÒ
ÔiÓïÍâªÆÒáÂ¬ÍÐhâCÆ5ÒòíÊÂ¬Æ5êÏÚÆ5Â¬ÃlâbÍØÚ!Â +ÆÅhÆ5Ì	ÍñâCÆ5ÄªÅhÂÏÒæÍÂxÐQó!êÏÙiÌCÌªÆÅÒ-ë ­ âªÆ5Ì`Ùiêxê!ÒæáÂÏÍÐhâªÆ5ÒØÙ0ÅÆÔlÌïÕbÍâªÆÅhÆ5ÒÄCê¬Ípþ
ÂÏÌªÃçóêÏÙiÌCÌªÆÅÂÏÒÆ~öÊÙiÐ~Íê¬í1ÁÁýÒEé!ÙiÒæÆ`Ù0ÅhÐâCÂ¬ÍæÆ5Ð~ÍÄªÅhÆi¸
ë ­ Â¬Íâ1ÙiêÏêñÒæáÂ¬ÍÐâªÆ5Ò<Ô ÕÔlÄCÅîÂÏÌbÍæÆ5Ì	ÍÂ¬ÔlÌ3áÙiÒîÍæÔ
ÂÏÎÂÏÍÙ0ÍæÆÐêxÙiÒÒÂÏÐÙi1ê äÊ×?ÕCÂëWÆië¬ZÕ äÊ×ÇÙiÒJÂ¬ÍQáQÙiÒJÄCÒæÆ5ÚçÂxÌãÍâCÆÝÖp×äbþh!Ç Ð~ÔlÎósÆÍÂ¬ÍÂ¬ÔlÌïëñÞÔlÌCÐ~ÆÅÌCÂÏÌªÃ
ÍâªÆÃiÔlÙiêÚCÂÏÒæÍÙiÌCÐ~ÆÆ5ÒæÍÂxÎÙ0ÍæÆ5ÒÒæáOÂ¬ÍÐhâNÙiÌ!Ú{ÍâªÆóCÅhÄCÌ!ÂÏÌªÃîÍæÆ5ÐâCÌCÂÏûÄªÆ5ÒJÒáÂ¬ÍÐhâ=ÕªáØÆÂÏÎó!ê¬Æ5ÎÆ5ÌbÍæÆ5Ú{ÍâªÆ
ÔiÅhÂ¬ÃlÂxÌCÙiêbÎÆÍâªÔÚ!ÒëÞÔlÌ!Ð~ÆÅhÌCÂÏÌªÃOÍâªÆ#ÒæÆ5Ù0ÅhÐâÒæÍæÅhÙ0ÍæÆÃiíiÕ	áÆ#ÄCÒæÆ5Ú&ÍâªÆÓ½Ôlêxê¬ÔáÂxÌªÃOÒÂxÎó!ê¬ÆâCÂÏêÏê¤þðÐêxÂÏÎîéÂÏÌªÃ
ÚªÆ5ÒÂÏÃlÌïÉ
¹ Ýê¬áQÙ5íÊÒÒæÆ5êÏÆ5Ð~ÍJÔlÌªÆésÆ5ÒæÍ#ÆÑ0ÙiêÏÄCÙ0ÍæÆ5ÚNÒhÄCÐÐ~Æ5ÒÒæÔiÅOÅhÙiÌCÚªÔlÎêÏíië
P!QQ

º+WY»&¼x½¾cFWX4¿6_bXZ_bÀ~W¼ÂÁgTYX\ÃÄZÀ~TYÅÆÄ4S?_bÅZÀÂÁg»&¼~ÁgÇvÈ~_WÀ~Ç©Ä
¹ ßÆÆóLÙÎÆ5ÎÔiÅhíÔiÓ?ó!ÙiÒæÍOÒæÍÙ0ÍæÆ5ÒJÍæÔ`ÙÑiÔlÂÏÚ"Ð~íÊÐê¬Æ5ÒOÂÏÌ{ÍâªÆâCÂÏêxê¤þðÐêÏÂÏÎEé!ÂÏÌªÃîó!Ù0Íâïë
¹ ÞQÔlÄCÌ	ÍÍâªÆÌbÄ!ÎîésÆÅñÔiÓÐ~ÔlÌCÒæÆ5ÐÄªÍÂ¬ÑiÆÍÂÏÎÆ5ÒQÂÏÌ`áâCÂÏÐâÍâªÆÐhâ!ÂÏêÏÚÔiÓÙEÌªÔÊÚªÆÚªÔbÆ5ÒÌªÔiÍQÂÏÎóCÅhÔÑiÆ

ÍâCÆãâªÆ5ÄªÅÂÏÒæÍÂÏÐèÆ5ÒæÍÂxÎÙ0ÍæÆiëçÖ»ÓQÍâCÙ0ÍèÐ~ÔlÄCÌbÍæÆÅEÆ~öªÐ~ÆÆ5ÚCÒ&ÙNÍâªÅhÆ5ÒâªÔlêÏÚïÕÍâªÆ5ÌúÅÆ5ÒæÍÙ0ÅÍÕáâªÆÅhÆÍâªÆ
ÍâCÅÆ5ÒâªÔlêÏÚçÂxLÒ èÍÂÏÎÆ5Ò#ÍâCÆîÂÏÌCÂ¬ÍÂxÙiêÒæÍÙ0ÍæÆiýÒOÃiÔlÙiêBÚ!ÂÏÒæÍÙiÌCÐ~ÆÆ5ÒæÍÂxÎÙ0ÍæÆië

¹ ßÆÆóNÑÂxÒÂ¬ÍæÆ5ÚçÌªÔÊÚªÆ5Ò#ÂÏÌçÎÆ5ÎÔiÅíÙiÐ~ÅhÔlÒÒJÅÆ5ÒÍÙ0ÅÍ#ÍæÅhÂÏÙiêÏÒ#ÂxÌ{ÔiÅhÚªÆÅJÍæÔ`ÙÑiÔlÂÏÚNÎ&ÄCê¬ÍÂ¬óê¬ÆÐ~ÔlÎó!ÄÊþ

ÍÙ0ÍÂÏÔlÌNÔiÓ?ÍâªÆîâªÆ5ÄªÅÂÏÒæÍÂÏÐOÓ½ÔiÅOÍâªÆÒÙiÎÆEÒæÍÙ0ÍæÆië

Öpo
Ì äÊ×Ç0ÕÒæÔlÎÆÎÔiÅÆÑ0Ù0ÅhÂÏÙ0ÍÂÏÔlÌCÒÔiÓïÅÆ5ÒæÍÙ0ÅhÍñÍæÆ5Ðhâ!ÌCÂÏûÄªÆ5ÒñÙ0ÅÆÂÏÎó!êÏÆ5ÎÆ5Ì	ÍæÆ5Ú=ëBÖpÌósÆÅhÒæÔlÌCÙiê!Ð~ÔlÎèþ
Î ÄCÌCÂÏÐÙ0ÍÂ¬ÔlÌáÂ¬ÍâÛQêÏÙiÂlÛÔlÌªÆÍ?ÙiÌCÚÉOÆ5Ð~ÍæÔiÅ{ÆsÌCÆÅ5ÕáÆØÚCÆ5ÐÂÏÚªÆ5ÚÌªÔiÍBÍæÔOÂÏÎÂÏÍÙ0ÍæÆÍâªÔlÒæÆñÑ0Ù0ÅhÂÏÙ0ÍÂÏÔlÌCÒÊ
&
áâCÂxÐhâ"ÙsÆ5Ð~Íé+Æ5â!Ù5ÑÊÂ¬ÔiÅÔlÌCêÏí{ÂxÌ"ÙÓ/ÆáHÒæósÆ5ÐÂÏÙiê=ÐÙiÒæÆ5ÒÊ ÙiÌCÚ ÄCÒæÆÍâªÆ&ÒÂÏÎóê¬Æ5ÒæÍJósÔlÒÒÂÏé!ê¬ÆÚªÆ5ÒÂ¬ÃlÌLÂÏÌÊþ
ÒæÍæÆ5ÙiÚïË
ë ­(ÆÐ~ÔlÎó!Ù0ÅÆ5ÚúÍâªÆósÆÅÓ/ÔiÅhÎÙiÌCÐ~ÆÔiÓ#ÔlÄCÅEÂÏÎóê¬Æ5ÎÆ5ÌbÍÙ0ÍÂ¬ÔlÌ áÂ¬Íâ1ÙiêxêñÒæáÂÏÍÐhâªÆ5ÒÍÄCÅhÌªÆ5Ú1<Ô 
ÍæÔGÍâªÆ`ósÆÅÓ/ÔiÅhÎÙiÌCÐ~Æ`ÔiLÓ äÊ×OÇ0ÕÅhÄCÌCÌCÂxÌªÃ{ÍâªÆ`ó!êxÙiÌCÌªÆÅhÒÔlÌA!Ç LÄCÌ	Í»íbósÆ5ÚKäÊåJËJÖp×ä(ÚªÔlÎÙiÂÏÌC¸
Ò /ÍâªÆ
ÂÏÌªóÄªÍòÅÆ5ûÄCÂ¬ÅÆ5ÚãÓ/ÔiÅ äÊ×OÇ ë ÌöªÐ~ÆóCÍ#ÂÏÌ`Ó/ÔlÄªÅQÚªÔlÎÙiÂÏÌ!ÒÕbÍâCÆOÍÙiÒæôÊÒ#ÒæÔlê¬ÑiÆ5ÚáÆÅÆÍâªÆÒÙiÎÆÓ½ÔiÅQésÔiÍâ
ó!êÏÙiÌ!ÌªÆÅhÒëÖrt
Ì ÍZÎ@ÏÏÐ@Ï@ÑgÑ+ÙiÌCt
Ú Ò´ÓÔÖÕØ×!ÙÕAÐ&×ÕbÔlÄªÅòó!êÏÙiÌ!ÌªÆÅòÒæÔlê¬ÑiÆ5ÚãÎÔiÅÆJÍÙiÒæôÊÒÕÙ0óCó!Ù0ÅÆ5ÌbÍê¬íÚCÄªÆ#ÍæÔ&ÂÏÎó!ê¬Æ~þ
ÎÆ5ÌbÍÙ0ÍÂ¬ÔlÌ"ÚCÆÍÙiÂÏêÏÒÉòÍâCÔlÄªÃlx
â äÊ×ÇÚ!ÂÏÚçÌªÔiÍJÑÊÂÏÒÂ¬ÍJÎÔiÅÆîÒæÍÙ0ÍæÆ5ÒOÍâCÙiÌçÔlÄªÅOó!êÏÙiÌCÌCÆÅ#ÔlÌçÍâªÆîÒÎ`ÙiêÏê¬ÆÅ
ÍÙiÒæôÊÒÕòÂ¬ÍEÅhÙiÌüÔlÄªÍEÔiÓJÎÆ5ÎÔiÅí1ÔlÌüÍâªÆ{êÏÙ0ÅÃiÆÅ&ÍÙiÒæôÊÒëLÖp±
Ì ÚMÕ9Î@ÏÛ#ÓFÎ&ÑAÜ ÙiÌCÞ
Ú Ý6ß<àYÓÕÕÍâªÆÅÆ5ÒæÍÙ0ÅhÍÂÏÌªÃ
ÍæÆ5Ðhâ!ÌCÂÏûÄªÆ5ÒEÒÆÆ5Î ÍæÔ ÎÙ0ôiÆçÙ"ÚC9Â +ÆÅÆ5Ì!Ð~ÆiÉ&Öp±
Ì ÚMÕ9Î@ÏÛ#ÓFÎ&ÑAÜ!´Õ äª×Ç`ÐÙiÌ!ÌªÔiÍ&ÒÔlê¬ÑiÆ`ÍÙiÒæôÊÒ&áÂ¬ÍâúÎÔiÅÆ
ÍâCÙiÌçÔlÌCÆÍÂ¬ÅÆésÆ5ÐÙiÄCÒæÆÂ¬ÍJÙiê¬áQÙ5íÊÒ#ÅÆ5ÒÍÙ0ÅÍÒJésÆÓ/ÔiÅÆÃiÆÍæÍÂÏÌªÃ`Ðê¬ÔlÒÆÍæÔÍâªÆÃiÔlÙi¾ê /ÔlÄCÅJó!êÏÙiÌCÌCÆÅQÒÔlê¬ÑiÆ5Ò
ÍÙiÒæôÊÒ&áÂ¬ÍâüÄªó3ÍæÔ · ÍÂ¬ÅÆ5IÒ ÕáâªÆÅhÆ5ÙiÒ&Âxá
Ì Ý6ß<àYÓÕÔlÄªÅ&ÂxÎó!ê¬Æ5ÎÆ5ÌbÍÙ0ÍÂ¬ÔlÌúÐÙiÌüÌCÔiÍ&Ð~ÔiósÆáÂ¬ÍâüÎÔiÅÆ
ÍâCÙio
Ì ¶Ú!ÂÏÒÐÒÓ/ÔiÅòÍâªÆÒÙiÎÆ#ÅÆ5ÙiÒæÔl\
Ì AäÊ×OÇ#ÒæÔlê¬ÑiÆ5ÒÍÙiÒæôÊÒòáOÂ¬ÍâÄªóÍæ®
Ô âÚCÂxÒÐIÒ ëÝOê¬ÍæÔiÃiÆÍâCÆÅ5ÕÂxÌÎÔlÒæÍ
ÐÙiÒæÆ5ÒÍâªÆÅÆ&ÂÏÒÙÐê¬ÔlÒæÆ&Ð~ÔiÅÅÆ5ÒæósÔlÌCÚCÆ5ÌCÐ~ÆésÆÍðáÆÆ5ÌGÍâªÆîésÆ5âCÙÑÂ¬ÔiÅOÔi{Ó äÊ×ÇEÙiÌCÚNÔlÄªÅÐ~ÔlÌÊõ!ÃlÄCÅhÙ0ÍÂ¬ÔlÌ
áÂ¬ÍâGÙiêÏêÒæáÂÏÍÐhâªÆ5ÒÍÄªÅhÌCÆ5ÚL<Ô ëÖpÌGÙiÌbíLÐÙiÒÆiÕ=ÔlÄªÅÆ~öósÆÅhÂxÎÆ5Ì	ÍÒóCÅhÔÑÊÂÏÚªÆEÄ!ÒæÆÓ/Ä!êÂÏÌ!ÒÂ¬ÃlâbÍÒOÂÏÌbÍæÔ{ÍâªÆ
ósÆÅÓ/ÔiÅhÎÙiÌCÐ~ÆÔiÓÆ5ÌªÓ/ÔiÅhÐ~Æ5ÚKâCÂÏêxê¤þðÐêÏÂÏÎEé!ÂÏÌªÃçÐ~ÔlÎóÙ0ÅÆ5ÚKÍæÔ1Ù ÒÂÏÎó!êÏÆ`ÒæÍæÅhÙiÂ¬ÃlâbÍæÓ/ÔiÅáÙ0ÅÚIâCÂÏêÏê¤þðÐêxÂÏÎîéÂÏÌªÃ
ÒæÍæÅhÙ0ÍæÆÃiíië
åÔÔiéCÍÙiÂÏÌ`ÚCÙ0ÍÙÊÕbáÆÒæÆÍØÄªó`ÙêÏÙ0ÅhÃiÆJÆ~öÊÙiÎó!ê¬ÆJÒÄCÂÏÍæÆiÕ	Ð~ÔlÌ	ÍÙiÂxÌCÂÏÌªÃÙÍæÔiÍÙiêÔi3Ó  · ó!êÏÙiÌ!ÌCÂÏÌªÃÍÙiÒæôÊÒ
Ó/ÅÔlÎuÔlÄªÅ 0ÈésÆ5ÌCÐhâ!ÎÙ0ÅôèÚªÔlÎÙiÂÏÌCÒ5ë?ÝÒØÒhÙiÂÏÚÙ0ÍñÍâCÆJésÆÃlÂÏÌCÌCÂÏÌCÃOÔiÓäÆ5Ð~ÍÂÏÔl¸
Ì Cë ÕÔlÄªÅØÚªÔlÎ`ÙiÂÏÌCÒáÆÅÆ
ã ×N×IÏ@äËåÑKæïÕÍ»áØ6
Ô çÑzÓ~Ðè+×ÛMÓFÎ&ÑÜb¾Ò /ÍâªÅhÆÆ~þsÙiÌCÚîÓ½ÔlÄCÅæþ¸ÔiósÆÅhÙ0ÍæÔiÅÅhÆóCÅÆ5ÒæÆ5ÌbÍÙ0ÍÂ¬ÔlYÌ Õ çÎ&ÕzÏ@é%ÐIß<×IÏÛ#ÓFÎ&ÑAÜ!<Õ ç(êÑgÑØë
Ü~ÓFìFÏIÎ5Õ ÍZÎ@ÏÏÐ@Ï@ÑgÑÕ ÍÂÎIÕAÜbÔ+Ï`
Õ íÎ&ÕÜ!Õ íÎ&ÕCîZî#ÏIÎ5MÕ Ý?ß<à/ÓÕ#Õ Ò´ÓÔÖÕg×!ÙÕÐ&×#Õ ï\ÕAÐ@ÓàÕAÐæþðÝOùÜñMÕ ï4ÕAÐ@ÓàZÕÐæþräÖ ðG×ñBÜ ÌJÕ
ï4ÕAÐ@ÓàZÕAÐæþräÊåËJÖp×ä++Õ ïñÓbòFÕzÏZÕ ïËî"Î&ÕØä¸Ï+Õ ïxæZ×!Ù%ÏIÎæïYÕ óYÐôYÏÜ"êÑzÏ3Õ ÚMÕ9Î@ÏÛ#ÓFÎ&ÑAÜ!ÕÙiÌCá
Ú ÚM×%îë?ÖpË
Ì Ý?ß<à/ÓÕÕÊÍâªÆÅÆ
áÆÅv
Æ LÍÙiÒæôÒ Ê · ÍæÔìÇÈ(ÚCÂÏÒÐÒ&ÍæÔ(ésÆçÎÔÑiÆ5~Ú ÊAÂÏÌüÍâªÆçÔiÍâªÆÅÚªÔlÎ`ÙiÂÏÌCÒÕáÆNÄCÒæÆ5ÚüÓ/ÅÔlÎ · È ÍæÔ ° 
ÚCÂ sÆÅÆ5ÌbÍîÂÏÌCÒÍÙiÌCÐ~Æ5ÒëNÝÒîÑiÆÅí1ÒhÎÙiêÏêòÂÏÌ!ÒæÍÙiÌCÐ~Æ5Ò&Ù0ÅÆãêÏÂÏôiÆ5ê¬íLÍæÔGóCÅÔÊÚCÄCÐ~ÆãÌªÔlÂÏÒæí(ÚCÙ0ÍÙÊÕáÆ`ÍæÅhÂ¬Æ5Ú3ÍæÔ
Ù5ÑiÔlÂxÚ1ÍâªÔlÒæÆ`ébíGÅÆ ³æÆ5Ð~ÍÂÏÌªÃçÍÙiÒæôÊÒÍâCÙ0ÍîáØÆÅÆãÒæÔlê¬ÑiÆ5Ú(éíGÁÁøÂÏÌ(êÏÆ5ÒÒÍâCÙiÌ1~È õCNÒæÆ5Ð~ÔlÌCÚCÒëãåJâCÂÏÒáQÙiÒ
ósÔlÒÒÂ¬éê¬ÆÂÏÌGÙiêÏêBÚªÔlÎ`ÙiÂÏÌCÒJéÄª`Í ïÓòÕzÏÕïáâªÆÅhÆEÙiêÏêBÍÙiÒæôÒÂÏÌLÍâªÆèÝÖp×äþh!Ç ãÒhÄCÂ¬ÍæÆîÃiÆÍÒæÔlê¬ÑiÆ5Ú ÂÏÌLÙ0Í
ÎÔlÒæÍ~È õÈ · ÒæÆ5Ð~ÔlÌCÚCÒëèÖpÌ ÍâªÆÍðáv
Ô çÑzÓÂÐè~×!Û#ÓFÎ&ÑAÜNÅÆóCÅhÆ5ÒæÆ5Ì	ÍÙ0ÍÂÏÔlÌCÒÕ=áÆÅhÙiÌCÚCÔlÎê¬íNÃiÆ5ÌªÆÅÙ0ÍæÆ5Ú(ÍÙiÒæôÊÒ
áÂ¬Ío
â âÍæÔ`Ç âé!ê¬ÔÊÐôÊÒÕÄCÒÂÏÌªÃÍâªÆJÒÍÙ0ÍæÆÃiÆ5ÌªÆÅhÙ0ÍæÔiÅóCÅÔÑÂxÚªÆ5Úèébµ
í öiÔlâ!ÌãäÊêÏÙiÌªÆí&ÙiÌCÚãäíÊê¬ÑÊÂ¬Æ#åJâCÂ¬ÆéÙiÄÊö
0ÈiÈªÇ ë ÖrÌ ã ×&×IÏ@ä÷åbÑKæ3ÙiÌCø
Ú íÎ&ÕAÜ!Õ?áØÆÄCÒæÆ5ÚúÍâªÆãÝOÖp×äbþh!Ç GÂÏÌCÒÍÙiÌCÐ~Æ5ÒÕ?ó!êÏÄCÒÙGÌÄCÎîésÆÅEÔiÓ#ÅhÙiÌÊþ
ÚªÔlÎêÏíÃiÆ5ÌCÆÅhÙ0ÍæÆ5ÚGÔlÌªÆ5ÒOÒhÂÏÎÂÏêÏÙ0ÅJÂxÌ"Ò9Â ÆEÍæÔ`ÍâªÆEé!Â¬ÃiÃiÆ5ÒæÍÆ~öªÙiÎó!ê¬Æ5ÒOÂÏÌNÍâªÆ&Ð~ÔlÎósÆÍÂ¬ÍÂ¬ÔlÌLÒÄCÂ¬ÍæÆ5Òë#ÖpÌ
íÎ&ÕùîZî#ÏIÎ5ÕÔlÄªÅèÍÙiÒæôÒÐ~ÔlÌbÍÙiÂÏÌªÆ5ÚKÓ/ÅÔlÎ ÇÈ Íæ
Ô ¶Gé!ÙiêÏêÏÒEÍæÔ ésÆãÍæÅhÙiÌ!ÒæósÔiÅÍæÆ5Úïë(ÖpÌúÍâCÆÅhÆ5ÎÙiÂÏÌCÂÏÌC4
Ã 
Ð~ÔlÎósÆÍÂ¬ÍÂ¬ÔlÌ"ÚªÔlÎÙiÂÏÌCÒ5ÕªáØÆ&ÄCÒæÆ5ÚçÍâªÆEêÏÙ0ÅÃiÆÅOÂxÌCÒæÍÙiÌCÐ~Æ5ÒÔiÓ?ÍâCÆÅÆ5ÒæósÆ5Ð~ÍÂ¬ÑiÆîÐ~ÔlÎó+ÆÍÂÏÍÂ¬ÔlÌ"ÒÄ!Â¬ÍæÆ5ÒëñÖpÌ
çÎ&ÕzÏ@é%ÐIß<×IÏÛ#ÓFÎ&ÑAÜ`ÙiÌCú
Ú ç(êÑgÑÜ~ÓFìFÏIÎ5ÕÊáØÆÅÙiÌCÚªÔlÎê¬í`ÃiÆ5ÌªÆÅhÙ0ÍæÆ5Ú"Ù0ÅhÔlÄCÌCú
Ú ¶0ÈêÏÙ0ÅÃiÆÍÙiÒæôÊÒÕCáOÂ¬Íâ ÇÈÍæo
Ô 0È
Ôi~é ³æÆ5Ð~ÍÒÕÙiÌCÚìÇ ² Íæñ
Ô  ² ê¬ÔÊÐÙ0ÍÂ¬ÔlÌCÒÕÅÆ5ÒæósÆ5Ð~ÍÂ¬ÑiÆ5ê¬íiëãÖrá
Ì ÍÂÎ&ÕAÜbÔ+ÏÕ?Ó/ÅÔlÎ ÇÍæÔüÇ ² Ð~ÔlÎóCÅÆ5ÒhÒæÔiÅhÒîâ!ÙiÚ(ÍæÔ
P!Qû

S6TU<U<VWYXZX\[^]`_ba+_bc

ésÆ`Æ~öªÐhâCÙiÌCÃiÆ5ÚïÕñÂÏÌøÚMÕ9Î@ÏÛ#ÓFÎ&ÑAÜ!ÕQÇãÍæÔ · ÈGáâªÆÆ5êxÒîÌªÆÆ5ÚªÆ5ÚüÍæÔGésÆ`ÅÆó!êxÙiÐ~Æ5ÚïÕÙiÌCÚúÂxÌøÚM×îÕÇÈGÍæÔ¶
ê¬ÔÊÐÙ0ÍÂ¬ÔlÌCÒJÌCÆÆ5ÚªÆ5ÚçÍæÔésÆÑÊÂÏÒÂ¬ÍæÆ5ÚïëCü
ÁªÔiÅÆ5ÙiÐâ ÔiÓòÍâªÆîÆ5ÂÏÃlâ	ÍÐ~ÔlÌÊõ!ÃlÄªÅÙ0ÍÂ¬ÔlÌCÒOÔiÓñÒæáÂ¬ÍÐâªÆ5ÒÕ+áØÆEÅhÙiÌLÍâªÆEÅhÆ5ÒæósÆ5Ð~ÍÂ¬ÑiÆEóêÏÙiÌCÌªÆÅJÔlÌGÆ5ÙiÐâ
ÔiÓÍâªÆLÍÙiÒæôÊÒÂxÌìÔlÄªÅÆ~öÊÙiÎó!ê¬ÆLÒhÄCÂ¬ÍæÆië;åJâCÔlÒæÆGÐ~ÔlÌªõ!ÃlÄªÅhÙ0ÍÂ¬ÔlÌ!Ò`ÄCÒÂxÌªÃ1ÅhÙiÌCÚCÔlÎ9Â Æ5ÚAâCÂÏêÏê¤þðÐêxÂÏÎîéÂÏÌªÃ
áÆÅÆÅhÄCÌGõ!ÑiÆÍÂxÎÆ5ÒÔlÌ(Æ5ÙiÐâ1ÍÙiÒæô+ÕÙiÌCÚ ÍâCÆÅÆ5ÒÄCê¬ÍÒÙÑiÆÅhÙ0ÃiÆ5ÚüÙ0Ó½ÍæÆÅáQÙ0ÅhÚCÒ5ëåJâªÔlÄªÃlâGõ!ÑiÆÍæÅÂÏÙiêÏÒ
ÎÂ¬ÃlâbÍÒæÔlÄ!ÌCÚçêÏÂ¬ôiÆîÙ`ÒÎÙiêÏêïÌÄCÎEé+ÆÅOâªÆÅ@Æ Ê7áQÙ5íçÍæÔÔãÒÎ`ÙiêÏêïÂ¬Ó?áØÆáÆÅÆEÍæÔãÐ~ÔlÎó!Ù0ÅhÆîÚCÂ sÆÅÆ5ÌbÍJâCÂÏêÏê¤þ
ÐêÏÂÏÎEé!ÂÏÌCÃ{ÒÍæÅhÙ0ÍæÆÃlÂ¬Æ5ÒÓ/ÔiÅèäªÝåmóCÅÔié!êÏÆ5ÎÒÕ=Ó/ÔiÅÆ~öªÙiÎó!ê¬@Æ Ê7ÍâCÆ`ÌbÄ!ÎîésÆÅÒæÆÆ5ÎÆ5Ú3ÍæÔ"ésÆÅÆ5ÙiÒæÔlÌ!Ù0é!ê¬Æ
ÍæÔ3ÄCÒ5ÉÅhÆ5ÎÆ5ÎîésÆÅÍâCÙ0ÍÕ#ÂÏÌüÍâªÆ"ó!êÏÙiÌCÌCÂxÌªÃ"Ó/ÅhÙiÎÆáÔiÅô+ÕÙiêÏê#â!ÂÏêÏê¤þðÐêÏÂxÎîé!ÂxÌªÃçÍæÅhÂÏÙiêÏÒÒÍÙ0ÅÍÓ½ÅhÔlÎ ÍâªÆ
ÒÙiÎÆNÒÍÙ0ÍæÆiëåJâªÆçÑ0Ù0ÅhÂÏÙiÌCÐ~ÆçÍâ!Ù0ÍáØÆçÓ/ÔlÄCÌCÚKésÆÍ»áØÆÆ5ÌìÚ!Â +ÆÅhÆ5Ì	ÍÍæÅhÂxÙiêÏÒèáÙiÒ`ÄCÒÄCÙiêÏêÏí3ê¬Ôá ÂÏÌüÔlÄªÅ
ÍæÆ5ÒæÍÂÏÌCÃ3ÅhÄCÌ!ÒëAåÔúÐ~ÔlÎó!ê¬ÆÍæÆ"ÍâCÆ"Æ~öÊó+ÆÅÂÏÎÆ5ÌbÍÒ`ÂÏÌìÙ3ÅÆ5ÙiÒæÔlÌCÙ0éê¬Æ"ÍÂÏÎÆiÕáÆGÅÆ5ÒæÍæÅhÂÏÐ~ÍæÆ5Ú7ÎÆ5ÎÔiÅí
Ð~ÔlÌCÒÄ!ÎóCÍÂ¬ÔlÌ3ÍæÔK!Ç 4ðGÛíbÍæÆiÕñÙiÌ!ÚúÍÂxÎÆãÐ~ÔlÌCÒhÄCÎóCÍÂ¬ÔlÌ3ÍæÔI!Ç ¶0ÈGÒÆ5Ð~ÔlÌCÚCÒ ÊAÄ!ÒÄCÙiêÏê¬íiÕÂ¬ÓJÁÁ;ÌCÆÆ5ÚCÒ
ÎÔiÅÆ"ÍÂÏÎÆçÔiÅãÎÆ5ÎÔiÅíKÔlÌìÙ(ó!êxÙiÌCÌCÂÏÌªÃGÍÙiÒæôIÔiÓÅÆ5ÙiÒæÔlÌCÙ0éê¬Æ"Ò9Â ÆiÕÍâªÆ5Ì7Â¬ÍÚªÔÆ5ÒÌïýWÍ`ÎÙiÌ!Ù0ÃiÆNÍæÔ
ÒæÔlê¬ÑiÆLÂ¬Í`Ù0Í`ÙiêÏê¸ë7ÝÒÒÙiÂÏÚìÙ0ÍãÍâªÆNésÆÃlÂÏÌCÌ!ÂÏÌªÃGÔiÓÍâCÆLÒæÆ5Ð~ÍÂ¬ÔlÌ=ÕØÍâªÆLÅhÙ5á ÚCÙ0ÍÙ1ÂÏÒ`Ù5Ñ0ÙiÂÏêÏÙ0é!ê¬ÆNÂxÌìÙiÌ
ÔlÌCêÏÂxÌªÆ&Ù0ó!ó+Æ5Ì!ÚCÂ¤ösÕ+ÙiÐÐ~ÔlÎóÙiÌCÂ¬Æ5Ú éíLÚªÆÍÙiÂÏêÏÆ5ÚLÃiÅÙ0ó!âCÂÏÐÙiê?ÅÆóCÅhÆ5ÒæÆ5Ì	ÍÙ0ÍÂÏÔlÌCÒý
ë OÆÅÆiÕ=áÆÒÄCÎ`ÎÙ0Åh9Â Æ
ÍâªÆ#ÅÆ5ÒhÄCê¬ÍÒÕlÙiÌCÚÚ!ÂÏÒÐÄCÒÒ?ÍâªÆJÎÔlÒæÍòÂÏÌbÍæÆÅÆ5ÒæÍÂÏÌªÃÔié!ÒÆÅÑ-Ù0ÍÂÏÔlÌCÒ´ë ­(ÆJÆ~öÊÙiÎ`ÂÏÌªÆ5ÚèÍâªÆJÚCÙ0ÍÙîÒæÆó!Ù0ÅhÙ0ÍæÆ5ê¬í
Ó/ÔiÅÆ5ÙiÐâNÚªÔlÎÙiÂxÌïÕÙiÒQÔlÄCÅQÙiêÏÃiÔiÅhÂ¬ÍâCÎÂxÐJÍæÆ5Ðhâ!ÌCÂÏûÄªÆ5ÒÍðíó!ÂÏÐÙiêÏê¬íãÒâªÔáøÒÂxÎÂÏêÏÙ0ÅØé+Æ5â!Ù5ÑÊÂ¬ÔiÅQÓ½ÔiÅ#ÙiêÏêÍÙiÒæôÊÒ
áÂ¬Íâ!ÂÏÌ`ÙèÚªÔlÎÙiÂxÌïëÖrÌÐ~ÔlÌ	ÍæÅÙiÒæÍÕCÍâªÆÅÆÐÙiÌ{ésÆOÆ5ÒhÒæÆ5Ì	ÍÂxÙiê+Ú!Â +ÆÅhÆ5ÌCÐ~Æ5ÒQÂÏÌ`ÍâCÆésÆ5âCÙÑÂÏÔiÅØÔiÓÍâªÆÒÙiÎÆ
ÍæÆ5Ðhâ!ÌCÂÏûÄªÆáâªÆ5ÌçÂ¬ÍJÂxÒJÙ0óCó!êÏÂÏÆ5ÚãÍæÔ`ÍÙiÒæôÒÓ½ÅhÔlÎ ÚCÂ sÆÅÆ5ÌbÍJÚªÔlÎÙiÂÏÌCÒ5ë
"9"Øþ ÿ?¬3¦3¦3¤z¦



¤z¥`¢

ªÁ ÔiÅQÔlÄªÅØÅhÄCÌCÌCÂxÌªÃÍÂÏÎÆOÂxÌ	ÑiÆ5ÒæÍÂÏÃlÙ0ÍÂ¬ÔlÌïÕÊÂ¬ÓïÙîÐ~ÔlÌÊõ!ÃlÄCÅhÙ0ÍÂ¬ÔlÌ`Ú!ÂÏÚÌªÔiÍñõÌCÚ`ÙEÒæÔlêÏÄªÍÂÏÔlÌó!êÏÙiÌ`ÍæÔ&ÙîÃlÂ¬ÑiÆ5Ì
ÍÙiÒæô+ÕªáØÆÒÆÍ#ÍâªÆÅÆ5ÒæósÆ5Ð~ÍÂ¬ÑiÆÅhÄCÌCÌ!ÂÏÌªÃîÍÂxÎÆÑ-ÙiêÏÄCÆOÍæÔÍâªÆÍÂxÎÆêxÂÏÎÂ¬ÍØÔiÓÇ!¶0ÈÒæÆ5Ð~ÔlÌ!ÚCÒÉSÒæÔlÎÆÍÂÏÎÆ5ÒÕ
ÙçÐ~ÔlÌÊõ!ÃlÄCÅhÙ0ÍÂ¬ÔlÌ(ÐÙiÌ(ÍæÆÅhÎ`ÂÏÌCÙ0ÍæÆÓSÙiÒæÍæÆÅáÂ¬ÍâCÔlÄªÍõÌCÚCÂÏÌCÃãÙ{ó!êÏÙiÌ=ÕïÓ½ÔiÅÆ~öªÙiÎó!êÏÆèÙiÌ1Æ5ÌªÓ½ÔiÅÐ~Æ5Ú(âCÂÏêÏê¤þ
ÐêÏÂÏÎEé!ÂÏÌCÃ(ó!êÏÙiÌCÌªÆÅ`ÅhÄCÌCÌCÂxÌªÃ1ÂÏÌbÍæÔúÙ3ÚCÆ5ÙiÚÆ5ÌC/Ú ë]ÖrÌÍâªÆGÓ½ÔlêÏêÏÔáÂÏÌCÃªÕØáÆGÚCÆ5ÒÂ¬ÃlÌCÙ0ÍæÆLÆ5ÙiÐhâ ÒæáÂ¬ÍÐâ
Ð~ÔlÌÊõ!ÃlÄCÅhÙ0ÍÂ¬ÔlÌLébí · ê¬ÆÍæÍæÆÅhÒ5
É HÒæÍÙiÌCÚ!ÒOÓ/ÔiÅâªÆ5ê¬óCÓSÄCê=ÙiÐ~ÍÂ¬ÔlÌ!ÒOÔlÌ=Õ HÌ	ÒÍÙiÌCÚCÒOÓ½ÔiÅÆ5ÌªÓ/ÔiÅhÐ~Æ5ÚGâCÂÏêÏê¤þ
ÐêÏÂÏÎEé!ÂÏÌCÃEÔlÌï
Õ æÁ ÒæÍÙiÌ!ÚCÒ#Ó/ÔiÅJÁ?ÁKÆ5ÒÍÂÏÎÙ0ÍæÆ5Ò#ÔlÌïëÖrÓÙÒæáÂ¬ÍÐâçÂÏÒQÍÄªÅhÌªÆ5Ú<Ô ÕCÍâªÆÅÆ5Òó+Æ5Ð~ÍÂÏÑiÆê¬ÆÍæÍæÆÅ
ÂÏÒÅÆó!êxÙiÐ~Æ5ÚLéí"
Ù ÊÉÁÁØýÒéÙiÒæÆÙ0ÅhÐhâCÂÏÍæÆ5Ð~ÍÄªÅÆÂÏÒÐ~ÔlÌÊõ!ÃlÄªÅÙ0ÍÂ¬Ôl
Ì H`ÌØÁ ÊÕïÔlÄC6Å äÊ×OÇEÂÏÎ`Â¬ÍÙ0ÍÂ¬ÔlÌ
ÂÏ
Ò ÊÕ!ÙiÌC
Ú HÊÕCÓ/ÔiÅJÆ~öªÙiÎó!ê¬ÆiÕCÂÏÒ#â!ÂÏêÏê¤þðÐêÏÂxÎîé!ÂxÌªÃáÂ¬ÍË
â äÊ×ìÃiÔlÙiêÚCÂÏÒæÍÙiÌ!Ð~Æ5Ò#ÙiÌCÚNâªÆ5ê¬ó!Ó/ÄCê
ÙiÐ~ÍÂ¬ÔlÌCÒJóCÅhÄCÌCÂxÌªÃªë?ÁCÔiÅOÙ&õ!ÅhÒÍQÂxÎóCÅÆ5ÒÒhÂ¬ÔlÌ`ÔiÓÔlÄªÅ#ÅÄCÌCÌCÂÏÌCÃîÍÂÏÎÆÅhÆ5ÒÄCê¬ÍÒÕªÒæÆÆÍâCÆîÙ5ÑiÆÅhÙ0ÃiÆ5ÚLÑ0ÙiêÏÄªÆ5Ò
ósÆÅJÚªÔlÎÙiÂÏÌ"ÂÏÌçÁÂ¬ÃlÄªÅÆÇiÇ0ë
ÁÂ¬ÃlÄªÅhÆOÇiÇÒâªÔáOÒÕ0Ó½ÔiÅ?Æ5ÙiÐhâèÚªÔlÎÙiÂxÌîÙiÌCÚEÆ5ÙiÐhâèÐ~ÔlÌÊõ!ÃlÄCÅhÙ0ÍÂ¬ÔlÌïÕ0ÍâªÆÙ5ÑiÆÅhÙ0ÃiÆ5ÚèÅhÄ!ÌCÌCÂÏÌªÃ#ÍÂxÎÆñÔÑiÆÅ
ÙiêÏêÂÏÌCÒæÍÙiÌCÐ~Æ5ÒÂÏÌ`ÍâCÙ0ÍÚCÔlÎÙiÂÏÌïëÝOÒÍâªÆÂÏÌCÒæÍÙiÌ!Ð~Æ5ÒØÂÏÌ`Æ5ÙiÐhâ{ÚªÔlÎÙiÂxÌ`Ù0ÅÆÌªÔiÍØÙiêxê!ÍâªÆÒÙiÎÆÒ9Â ÆiÕé!ÄªÍ
Íðíó!ÂÏÐÙiêxê¬íÒÐÙiê¬ÆÓ½ÅhÔlÎ ÒÎ`ÙiêÏê¬ÆÅ?ÍæÔOÑiÆÅíEêÏÙ0ÅÃiÆÍÙiÒæôÒ5ÕlÙ5ÑiÆÅhÙ0ÃlÂÏÌCÃÔÑiÆÅòÙiêÏê	ÅhÄCÌCÌCÂxÌªÃ#ÍÂÏÎÆ5ÒÂÏÒÕ0ÔiÓ!Ð~ÔlÄCÅhÒæÆiÕ
ÙèÑiÆÅí{Ð~ÅhÄCÚªÆÙ0ó!óCÅÔ5öªÂÏÎÙ0ÍÂÏÔlÌãÔiÓ?ÅhÄCÌbÍÂÏÎÆésÆ5âCÙÑÂ¬ÔiÅëòåJâªÆÚCÙ0ÍÙÂÏÌçÁÂ¬ÃlÄªÅhÆèÇiÇóCÅÔÑÊÂÏÚªÆ5Ò#ÙèÃiÆ5ÌCÆÅhÙiê
ÂÏÎó!ÅÆ5ÒÒÂ¬ÔlÌüÔiÓÔlÄªÅÅÄCÌ	ÍÂxÎÆçÅÆ5ÒÄCêÏÍÒósÆÅÚªÔlÎÙiÂÏÌïÕQÙiÌCÚIÃlÂÏÑiÆ5Ò`Ù1Ó/Æá âCÂxÌ	ÍÒÔlÌÍâªÆNó!âCÆ5ÌªÔlÎÆ5ÌCÙ
ÍâCÙ0ÍÎÂ¬ÃlâbÍ&é+ÆãóCÅÆ5ÒæÆ5ÌbÍèÂÏÌ3ÍâCÆÚCÙ0ÍÙÊëúÞQÔlÎó!Ù0ÅÆiÕÓ/ÔiÅèÆ~öÊÙiÎóê¬ÆiÕÍâªÆÑ-ÙiêÏÄCÆ5ÒEÔlÌüÍâªÆÅhÂ¬ÃlâbÍèâCÙiÌCÚ
ÒÂÏÚC@Æ Ê7ÍâªÔlÒæÆóêÏÙiÌCÌªÆÅhÒÄCÒÂÏÌªÃâCÆ5ê¬óCÓSÄCêïÙiÐ~ÍÂ¬ÔlÌCÒ ÊAÍæÔ`ÍâªÔlÒæÆEÔlÌ"ÍâCÆEê¬ÆÓ/ÍâCÙiÌCÚLÒÂÏÚª@Æ ÊAÍâªÔlÒæÆó!êxÙiÌCÌªÆÅhÒ
Æ~öÊó!ÙiÌCÚCÂÏÌCÃ{ÙiêxêòÒæÔlÌCÒÔiÓ#ÒæÆ5Ù0ÅÐhâüÌªÔÚCÆ5ÒëÖp
Ì çÎ&ÕzÏ@é%ÐIß<×IÏÛMÓFÎIÑAÜLÙiÌCÞ
Ú ç6êbÑgÑAÜ~ÓFìFÏIÎ5ÕBÍâªÆÅhÂ¬ÃlâbÍâCÙiÌCÚ3ÒÂÏÚªÆ
Ñ0ÙiêÏÄªÆ5ÒèÙ0ÅÆçâCÂ¬ÃlâªÆÅÕé!ÄªÍèÂÏÌKÙiêÏÎÔlÒæÍèÙiêÏêÔiÍâªÆÅÚªÔlÎÙiÂxÌCÒÕÍâªÆíüÙ0ÅÆçÐ~ÔlÌCÒÂÏÚªÆÅÙ0é!ê¬í1ê¬ÔáØÆÅ5ëúåJâCÂÏÒ&ÂÏÒ
Æ5ÒæósÆ5ÐÂÏÙiêÏêÏí1ÍæÅhÄªÆ{Ó/ÔiÅÍâªÆçÍðáÔ(ÅhÂ¬ÃlâbÍÎÔlÒæÍÐ~ÔlêÏÄ!ÎÌCÒÕòÒâCÔáÂÏÌCÃGÑ0ÙiêÏÄªÆ5Ò&Ó/ÔiÅó!êÏÙiÌ!ÌªÆÅhÒ&ÄCÒÂÏÌªÃ âªÆ5ê¬ó!Ó/ÄCê
ÙiÐ~ÍÂ¬ÔlÌCÒÙiÌCÚçÆ5ÌªÓ/ÔiÅhÐ~Æ5ÚNâCÂxêÏê¤þðÐêÏÂÏÎEé!ÂÏÌCÃªëBåJâCÂÏÒ#ÂxÌCÚCÂÏÐÙ0ÍæÆ5ÒQÍâCÙ0ÍÍâªÆÎÙiÂÏÌçÒæÔlÄCÅhÐ~Æ5Ò#ÔiÓósÆÅÓ½ÔiÅÎÙiÌCÐ~ÆêÏÂ¬Æ

!Y*B$IF;;	<75#Ö) ";C#O@#$I		7Ë%$N>I>@>I:FO@G®FG3>!73®56>I87F$I;;#G	FA%$&>@		FG-ý>&8~O@	FB%%$&$I	<>&7?>@""ý!H$N:C>IH	67b#A$N%$&$O@@$&;ù$&$NJ;®$I;	v>L$I$	x@$&>I	;ù$&;J	;
$&3$# %&N% 11# 	F8K>IL$&D :	F"g' 8ùJ:FO 7F(%*) F>&b+ L$I	F	,%+,
' 7>@L$&C	F !;9
P!û.-

º+WY»&¼x½¾cFWX4¿6_bXZ_bÀ~W¼ÂÁgTYX\ÃÄZÀ~TYÅÆÄ4S?_bÅZÀÂÁg»&¼~ÁgÇvÈ~_WÀ~Ç©Ä

9	:;:;<>=?A@CB
M @CN,OQPG:;RN.ST@CUGV H NEW$:
M @CN,OQPG:;RN.ST@CUGV L NEW$:
M STZ[<>\]O>^E:_<&R6NES;@`U
Ma @C@`U,N.b&<>S
3 S;S;<&Z`U,<&cEO><>< @C@
3d STZ`U
d STZCWAWe<&S
7g N.^JcEfAZCNE:_h;Z Z`O>:
i ZCO>N.fAZ`OVj95k g
i ZCO>N.fAZ`OVmlGn ipo6g 4
i ZCO>N.fAZ`OVml,qrn o l
i N*sYZC<
i WAS;ZC=t<
i BG:_h;<&S;B
lAOQuA<&U a @[<
qZCST<>RN.ST@CU
q:;W

/0DED RG/1F H/ û
L$F -.K
-AF K.D KAF HEI
L$F <L R
KEI,F R*H
P!QAFXI P
D H QAF -.K
P,F RJI
û.HAF R*K
RûA5F PFR
D IJ-AF -.P,F K D
P,F R D
-AF F- P
R*HAF - û
RQAFXI*L
D HEI,FXIJD HEI,F H.L$F D.D

H /2D /
FRJ3 I
P,FXIJH
QAF Q D
I,F QJL
HA5F P*L
LEKAF -EI
IJHAFX!I Q
DED ûAFXIJH
D 5F P D
RJI,F -EI
D F- P,F - û
D IJ-AF -.P,F - D
P,F FH P
-AF F- P
K ûA5F PFR
û.-AFXI.I
D H D FD P
DED -AF H Q
-AF QFP

/
45/

K /
D 46F D 3 H.-AF D.D
IJKA5F PJDED K$F PJL
D I,F RL
I D 5F PFR
I P,F K.ûûAF D Q
D F -.HAF û D
DED.D F L R
I*L$5F PJH
D F û.H
D FXIJH
-AF -FP
Q D F LEH
Q.KAF - D
D L D F <L P
D P D F H.L
-AF RJI

ûFP,F ûEI
AQ F HR
Q.-AF -FP

K.KAFXI D
H D F F- P
I*L$F D I
H D F Qû
DED IAF -YI
D I,F D K
KAF5P!û
RûAF RR
D F- PAF IJL
P,F <L R
L$F QJL
-AF F- P
QFP,F Qû
R D F K.D LEH$F I û
DED û$F PFP
P,F LYI

7L<R,/2F Q / D
D FL D
D 5F P D
D IJ-$F -EQ D F ûEFI R,F HYI
-AF QEI
DED IAF -ED FD R
D IJ-$F -EH.K$F QFQ
D L PAF I D
D F HEI
D F L.L
-AF F- P
<L R,F F- û
RJIA5F RJH
RR,F I Q
D P D FD H
P,F FL Q

7/
3

PJ-$F PEI
-AF .Q H

D -$F D H
D IJ-$F -ED PJK$F I.L PAF FK Q
-AF K û
ûEIAF D -AF FL Q
RQ$F QP
H û$F FK û
D P!Q$F PQ
-AF Q.K
D F- D
-AF F- P
!I Q$F LGI
ûEIAF PJL
H Q$F P.H
D -EIAF <K R
-AFXFI R

7545/

PJ-$F H.L
-$F PR
P.IAF D û

D IJ-$F -ED P!Q$F LYLEH$F ûFû
D F QFQ
D Q$5F RJH
-$F D R
LeF L R
D -$F D Q
ûEIAF LGI
-$F IEI
-$F K.L
-$F - P
D Q$F I.K
QEIAF D H
D PAF P.H
ûR,F L D
-$F D I

D 7	K$48F û.3 L
K$F DED
LE-$F KYI
D IJ-$F -ED L D F -.L
L D F LEL
PA5F RFR
D.D 5F RJH
-$F DED
PA5F RJD.D F û.L
!I û$F -E-$F I.K
-$F HEK
-$F -P
PJK$F K P
Q.K$F P D
D H$5F RFR
QEIAF K.L
-$F -<R

ÁÂ¬ÃlÄCÅÆÇiÇ0ÉØÝOÑiÆÅhÙ0ÃiÆ5ÚNÅÄCÌCÌCÂÏÌCÃEÍÂÏÎÆó+ÆÅJÚCÔlÎÙiÂÏÌçÓ/ÔiÅÙiêÏêsÆ5Â¬ÃlâbÍÐ~ÔlÌÊõÃlÄªÅhÙ0ÍÂ¬ÔlÌCÒQÔiÓÒæáOÂ¬ÍÐhâªÆ5Ò5ë
ÂÏÌúÍâªÆçóCÅhÄ!ÌCÂÏÌªÃNÍæÆ5ÐâCÌCÂÏûÄªÆ{ÙiÌCÚüÍâªÆçÒæÆ5Ù0ÅhÐâìÒæÍæÅhÙ0ÍæÆÃiíÖÊAê¬ÔÔiôÂxÌªÃ(Ù0Í&ÍâCÆÅÂ¬Ãlâ	ÍÎÔlÒæÍvH`Ì(ÙiÌCÚ
H?ÌñÁ  Ð~ÔlêÏÄCÎÌCÒ5Õáâ!ÂÏÐhâ3ÔlÌCê¬í(ÚCÂ sÆÅEÂÏÌ3ÍâªÆÃiÔlÙiêÚ!ÂÏÒæÍÙiÌCÐ~ÆãÆ5ÒæÍÂÏÎÙ0ÍæÆiÕÍâªÔlÒÆãÍ»áØÔ(Ð~ÔlÌÊõ!ÃlÄCÅhÙ0ÍÂ¬ÔlÌ
Ñ0ÙiêÏÄªÆ5Ò&Ù0ÅÆÄ!ÒÄCÙiêÏê¬í Ðê¬ÔlÒæÆÍæÔ Æ5ÙiÐhâKÔiÍâªÆÅÕòÐ~ÔlÎó!Ù0ÅÆ5ÚúÍæÔ ÍâªÆãÔiÍâCÆÅ&Ð~ÔlÌÊõÃlÄªÅhÙ0ÍÂ¬ÔlÌCÒ&ÂÏÌúÍâªÆ{ÒÙiÎÆ
ÚªÔlÎÙiÂxÌïë
åÔKó!ÄªÍÔlÄªÅ{Ôié!ÒæÆÅÑ0Ù0ÍÂ¬ÔlÌCÒÔlÌ ÙKÒæÔlêÏÂÏÚé!ÙiÒÂÏÒÕáØÆ(ê¬ÔÔiôiÆ5ÚïÕÓ/ÔiÅ{Æ5ÙiÐhâ]ÚCÔlÎÙiÂÏÌïÕJÙ0ÍçÆ5ÙiÐâ ó!ÙiÂ¬Å
ÔiÓèÐ~ÔlÌÊõ!ÃlÄªÅhÙ0ÍÂÏÔlÌCÒçÂÏÌ ÍÄªÅhÌ=ÕOÙiÎÔlÄCÌbÍÂÏÌªÃIÍæÔ 0x
È wzy(|{ ü ¯ ¶ ° ÈIó!ÙiÂ¬ÅÒãÔiÓ&ó!êÏÙiÌ!ÌªÆÅ{ó+ÆÅhÓ½ÔiÅhÎ`ÙiÌCÐ~Æ5Òë
ÁªÔiÅãÆ5ÙiÐhâÒhÄCÐhâKó!ÙiÂÏÅ5ÕòáÆNÚªÆ5ÐÂÏÚªÆ5ÚKáâCÆÍâªÆÅÔlÌªÆNÐ~ÔlÌÊõ!ÃlÄCÅhÙ0ÍÂ¬ÔlÌIósÆÅÓ/ÔiÅhÎÆ5ÚKÒÂ¬ÃlÌ!Â¤õÐÙiÌbÍê¬í1ésÆÍæÍæÆÅ
ÍâCÙiÌøÍâCÆ1ÔiÍâªÆÅNÔlÌªÆië åBÔìÚCÆ5ÐÂÏÚªÆ1ÒÂ¬ÃlÌ!Â¤õÐÙiÌCÐ~ÆiÕáÆ3Ð~ÔlÄCÌbÍæÆ5ÚøÍâªÆ3ÌÄCÎEé+ÆÅçÔiÓèÍÙiÒæôÊÒNÍâ!Ù0ÍNÔlÌªÆ
Ð~ÔlÌÊõ!ÃlÄCÅhÙ0ÍÂ¬ÔlÌ ÒæÔlê¬ÑiÆ5Ú ÓSÙiÒæÍæÆÅ5ý
ë ­(ÆÓ½ÔlÄ!ÌCÚ"Íâ!ÂÏÒÍæÔçé+ÆèÙçÎÔiÅÆèÅÆ5êxÂÏÙ0é!ê¬Æ&Ð~ÅhÂ¬ÍæÆÅhÂ¬ÔlÌGÍâCÙiÌ Íâ!ÂÏÌªÃlÒêÏÂ¬ôiÆ
ÍâªÆGÚCÂ sÆÅÆ5ÌCÐ~ÆNésÆÍðáÆÆ5ÌAÅhÄCÌCÌ!ÂÏÌªÃ ÍÂÏÎÆ5Ò`Ó½ÔiÅÆ5ÙiÐhâAÍÙiÒæô+ë;ÝÒÍÙiÒæôÊÒÃiÅÔá ÂÏÌÒh9Â ÆiÕQÅhÙ0ÍâªÆÅÍâCÙiÌ
ésÆ5ÂÏÌªÃúÍÙ0ôiÆ5ÌøÓ½ÅhÔlÎ ÙúósÔió!Ä!êÏÙ0ÍÂ¬ÔlÌ7áÂ¬ÍâõÌCÂ¬ÍæÆ ÎÆ5ÙiÌøÒ9Â ÆiÕó!Ù0ÅhÙiÎÆÍæÅhÂÏÐGÒæÍÙ0ÍÂÏÒæÍÂÏÐÙiêó!ÅÔÐ~Æ5Ú!ÄªÅÆ5ÒÕ
êÏÂ¬ôiÆÐ~ÔlÎó!ÄCÍÂÏÌªÃèÐ~ÔlÌÊõÚªÆ5ÌCÐ~ÆÂÏÌbÍæÆÅÑ0ÙiêÏÒÓ½ÔiÅQÅhÄCÌbÍÂÏÎÆÚCÂ sÆÅÆ5ÌCÐ~Æ5Ò5ÕÎÙ0ôiÆûÄªÆ5ÒæÍÂÏÔlÌCÙ0é!ê¬ÆÙiÒÒÄCÎóCÍÂ¬ÔlÌCÒ
Ù0ésÔlÄªÍJÍâªÆ&ÚCÂÏÒæÍæÅÂ¬é!ÄªÍÂ¬ÔlÌãÔiÓòÚCÙ0ÍÙÊë ­(ÆîÍâÄCÒOÄCÒæÆ5ÚNÍâCÆÓ½Ôlêxê¬ÔáÂxÌªÃÌªÔlÌÊþ¸ó!Ù0ÅÙiÎÆÍæÅhÂÏÐÒÍÙ0ÍÂÏÒæÍÂÏÐÙiêBÍæÆ5ÒæÍÕ
ôÊÌªÔáÌ ÙiÒÍâªÆ ÍðáÔ0þ¸ÍÙiÂÏê¬Æ5ÚøÒhÂ¬ÃlÌÍæÆ5Ò
Í ¸äªÂ¬ÆÃiÆ5(ê ~}ELë öªëJÞQÙiÒæÍæÆ5êÏêxÙiÌïÕî!Ç bë ÝÒÒÄCÎÆLÍâCÙ0Í{ésÔiÍâ
ó!êÏÙiÌ!ÌªÆÅhÒÕÝ ÙiÌCÚKÛÕó+ÆÅhÓ½ÔiÅhÎ Æ5ûbÄ!ÙiêÏê¬í(ÔlÌKÙ"ÃlÂÏÑiÆ5ÌIÚªÔlÎÙiÂÏÌïëGåJâªÆ5ÌïÕÃlÂ¬ÑiÆ5ÌIÙLÅhÙiÌCÚCÔlÎ ÂÏÌ!ÒæÍÙiÌCÐ~Æ
Ó/ÅÔlÎ ÍâCÆÚªÔlÎ`ÙiÂÏÌïÕÍâªÆOó!ÅÔié!Ù0é!ÂÏêxÂ¬Íðí&ÍâCÙ0Í#ÛÂÏÒØÓSÙiÒæÍæÆÅQÍâCÙiÌãÝ;ÒâªÔlÄCêÏÚ`ésÆÆ5ûÄCÙiê+ÍæÔEÍâªÆóCÅÔiéÙ0é!ÂÏêÏÂ¬Í»í
ÍâCÙ0ÍÝmÂÏÒJÓSÙiÒæÍæÆÅÍâCÙiÌ"ÛësåÙ0ôiÆ&ÍâCÂÏÒOÙiÒÍâCÆEÌÄCêÏêïâbíbósÔiÍâªÆ5ÒÂxÒë OÌCÚCÆÅÍâCÙ0Íâ	íósÔiÍâªÆ5ÒÂÏÒ5Õ!Â¬ÓÝmÙiÌCÚ
Û ésÆ5âCÙ5ÑiÆ&ÚCÂ sÆÅÆ5ÌbÍê¬í`ÔlÌLÙiÌ"ÂÏÌCÒÍÙiÌCÐ~ÆiÕCÍâªÆ5ÌNÛøÂxÒ#Ó/ÙiÒÍæÆÅOÍâCÙiÌ"Ý áOÂ¬ÍâçóCÅÔiéÙ0é!ÂÏêÏÂ¬Í»
í | ëQåJâbÄ!ÒÕªÍâªÆ
ÍÙiÒæôÊÒQáâªÆÅÆÛ7ÂxÒñÓSÙiÒæÍæÆÅJÙ0ÅÆÚCÂÏÒæÍæÅÂ¬é!ÄªÍæÆ5ÚÔÑiÆÅJÍâªÆÍÙiÒæôÊÒQáÂ¬ÍâÚCÂ sÆÅÆ5Ì	ÍØésÆ5âCÙ5ÑÊÂ¬ÔiÅ#ÙiÐÐ~ÔiÅhÚCÂÏÌCÃEÍæÔÙ
ÛQÂÏÌªÔlÎÂxÙiêÚCÂxÒæÍæÅhÂ¬é!ÄCÍÂ¬ÔlÌáÂ¬Í
â  ¯  ëØÞQÔlÎó!ÄªÍæÆÍâªÆóCÅÔié!Ù0éÂÏêÏÂ¬Í»í&ÔiÓBÍâªÆÔié!ÒæÆÅÑiÆ5Ú{ÔlÄªÍÐ~ÔlÎÆÄ!ÌCÚªÆÅ
ÍâªÆÌÄCêÏêsâbíbósÔiÍâªÆ5ÒÂxÒÕªÂëWÆië¬ÕCÂ¬ÓBÍâCÆÅÆ| Ù0ÅÆ (ÍÙiÒæôÊÒ#áâªÆÅhÆÝ ÙiÌCÚçÛAésÆ5âCÙÑiÆîÚCÂ sÆÅÆ5ÌbÍê¬íiÕªÙiÌC
Ú ÍÙiÒæôÊÒ
P!û

D

S6TU<U<VWYXZX\[^]`_ba+_bc

áâªÆÅhÆîÛ;ÂÏÒJÓ/ÙiÒæÍæÆÅÕÍâªÆ5ÌGÐ~ÔlÎó!ÄCÍæÆîÍâªÆEóCÅÔié!Ù0é!ÂxêÏÂ¬ÍðíÍâCÙ0ÍÕsÙiÐÐ~ÔiÅhÚCÂÏÌCÃÍæÔÙ`é!ÂÏÌªÔlÎ`ÂÏÙiê=ÚCÂÏÒÍæÅhÂ¬é!ÄªÍÂÏÔlÌ
Í üó+ÔlÒhÂ¬ÍÂ¬ÑiÆ`ÔlÄCÍÐ~ÔlÎÆ5Ò`Ù0ÅÆ{ÔiéCÍÙiÂxÌªÆ5ÚKÂÏ
Ì 7ÍæÅhÂxÙiêÏÒë(ÖrÓÍâCÙ0ÍèóCÅÔiéÙ0é!ÂÏêÏÂ¬Í»í1ÂÏÒ
áÂ¬Í1
â  ¯ | ÕÙ0ÍèêÏÆ5ÙiÒæp
ê¬Æ5ÒÒÔiÅ#Æ5ûÄCÙiê+ÍâCÙi4
Ì õÈªÇ0ÕCÍâªÆ5ÌÅÆ ³æÆ5Ð~Í#ÍâªÆÌbÄ!êÏê!âbíbósÔiÍâªÆ5ÒhÂÏÒQÙiÌCÚ{ÒÙ5íãÍâCÙ0ÍJÛósÆÅÓ/ÔiÅhÎÒÒÂ¬ÃlÌ!Â¤õÐÙiÌbÍê¬í
ésÆÍæÍæÆÅÍâCÙiÌ ÝîëBäíÊÎÎÆÍæÅhÂxÐÙiêÏê¬íiÕsÚªÆ5ÐÂÏÚªÆEáâªÆÍâªÆÅÝmósÆÅÓ/ÔiÅhÎÒÒÂ¬ÃlÌCÂ¬õÐÙiÌ	ÍêÏíésÆÍæÍæÆÅÍâCÙiÌ Û"ë ­(Æ
ÅÆ5ÎÙ0ÅhôÍâCÙ0ÍÂÏÌîÙiêÏêÚªÔlÎÙiÂxÌCÒ=Æ~öªÐ~ÆóC#Í ïñÓbòFÕ
ÏÍâªÆÍÙiÒæôÊÒ?áâªÆÅÆØÍðáÔÐ~ÔlÌªõ!ÃlÄªÅhÙ0ÍÂ¬ÔlÌ!ÒBésÆ5âCÙÑiÆ5ÚEÆ5ûÄCÙiêÏêÏí
áÆÅÆEÆ~öªÙiÐ~Íê¬íNÍâCÔlÒæÆEÍâ!Ù0ÍÐ~ÔlÄCêxÚ"ÌªÔiÍOé+Æ&ÒæÔlê¬ÑiÆ5ÚLébíçÆ5ÂÏÍâªÆÅOÔiÓñÍâªÆEÐ~ÔlÌÊõÃlÄªÅhÙ0ÍÂ¬ÔlÌCÒ5ëJÖrÌ ° $È  ÔiÓòÍâªÆ
ÐÙiÒæÆ5Ò#áOâªÆÅÆáØÆÓ/ÔlÄCÌCÚÍâCÙ0Í#ÔlÌªÆÐ~ÔlÌÊõÃlÄªÅhÙ0ÍÂ¬ÔlÌ{ÛAósÆÅÓ½ÔiÅÎÆ5ÚãÒhÂ¬ÃlÌCÂ¤õÐÙiÌbÍê¬íésÆÍæÍæÆÅ#ÍâCÙiÌçÙiÌCÔiÍâªÆÅ
Ð~ÔlÌÊõ!ÃlÄCÅhÙ0ÍÂ¬ÔlÌïÕ=Û áÙiÒÓ/ÙiÒæÍæÆÅÔl
Ì ,sÂÏÌCÒæÍÙiÌ!Ð~Æ5ÒOáOÂ¬Íâ ÚCÂ sÆÅÆ5Ì	ÍésÆ5âCÙÑÂ¬ÔiÅëÖrá
Ì â.Ç ÕÛ;áQÙiÒÓSÙiÒæÍæÆÅ
ÔlÌNÙiêÏê=é!ÄªÍQÔlÌªÆîÒÄ!ÐhâNÂÏÌ!ÒæÍÙiÌCÐ~Æië
­(ÆèÙ0ÅÆîóÙ0ÅÍÂÏÐÄCêÏÙ0Åê¬íÂxÌ	ÍæÆÅÆ5ÒÍæÆ5Ú"ÂÏÌ"ó!ÙiÂ¬ÅhÒJÝmÙiÌ!Ú"ÛøÔiÓòÐ~ÔlÌÊõÃlÄªÅhÙ0ÍÂ¬ÔlÌCÒáâªÆÅÆ&ÛøÅÆ5ÒÄ!ê¬ÍÒ#Ó/ÅÔlÎ
Ý éí1ÍÄªÅhÌCÂxÌªÃçÔlÌªÆ`ÔiÓÍâªÆãÒæáOÂ¬ÍÐhâªÆ5ÒEÔlÌïÕê¬Æ5ÙÑÂÏÌCÃ"ÍâªÆÍðáÔLÔiÍâCÆÅhÒèÄCÌCÐhâ!ÙiÌªÃiÆ5Úïë"ùÆ5ÐÂÏÚCÂxÌªÃ"Ù0ésÔlÄªÍ
ÒÂ¬ÃlÌ!Â¤õÐÙiÌbÍñÂÏÎóCÅhÔÑiÆ5ÎÆ5ÌbÍÂxÌ`ÒÄCÐâãÐÙiÒÆ5ÒQÍæÆ5êÏêÏÒñÄ!ÒØÙ0ésÔlÄªÍØÍâªÆOÆ sÆ5Ð~ÍQÍâCÙ0ÍÍâªÆOÅhÆ5ÒæósÆ5Ð~ÍÂ¬ÑiÆÍæÆ5ÐâCÌCÂÏûÄªÆ
âCÙiÒOÔlÌ"ósÆÅÓ/ÔiÅhÎÙiÌ!Ð~ÆîÂÏÌ"ÙÚªÔlÎÙiÂxÌïëJåJâªÆÅÆEÙ0ÅÆ!Ç `ó!ÙiÂ¬ÅÒJÔiÓòÐ~ÔlÌÊõ!ÃlÄCÅhÙ0ÍÂ¬ÔlÌCÒáâªÆÅÆEÔlÌªÆEÒæáOÂ¬ÍÐhâGÂÏÒ
ÍÄªÅhÌCÆ5Ú{ÔlÌïëñÁÂ¬ÃlÄªÅÆ!Ç ÒâªÔáOÒ#ÔlÄªÅ#õÌ!ÚCÂÏÌªÃlÒQÂÏÌ{ÍâªÆ5ÒÆîÐÙiÒæÆ5Òë

U,NE=t^.Z[f
95:T:;<>=?$@[B
M @[N,OQP,:;R6NES;@`UGV H N.We:
M @[N,OQP,:;R6NES;@`UGV L N.We:
M S;ZC<(\]O&^.:;<>RN.ST@CU
Ma @C@CU,NEb><&S
3 STST<>Z`U,<c.O(<&< @[@
3d STZCU
d STZ[WAW<>S
7g NE^.c.fAZ`N.:mhTZ ZCO&:
i Z`O(NEfAZCO(V9	k g
i Z`O(NEfAZCO(Vjl,n ipo8g 4
i Z`O(NEfAZCO(VjlAqrn o l
i N*sGZC<
i WASTZC=<
i B,:_h;<>STB
l,OQuA<U a @C<
qZCS;<&R6NES;@`U
q:;W

3
4
7
/2 / 
/  4 7  / 57  4 2/ / 
/ 3 7  / 57  3 2/  / 
/  3 
4  / 84  3

 /  //      

/ / /
/  
 /
/ /
/ / / /
  /
/
/
/
        / / / /
   
/
  / / / /    
    /       

   
/ /    /      
  
       
   
      
   
  
     

  
 
/      

 
     /      

ÁÂ¬ÃlÄªÅÆÇ!ÉOåJâªÆÆsÆ5Ð~ÍQÔiÓïÍÄªÅhÌCÂxÌªÃÔlÌãÙEÒÂÏÌªÃlêÏÆÒæáÂ¬ÍÐâïÕ	ôiÆÆóÂÏÌªÃîÍâCÆÔiÍâªÆÅhÒÄCÌCÐâCÙiÌªÃiÆ5ÚïëØäªÄCÎÎÙ-þ
Åh9Â Æ5Ú ÂÏÌNÍæÆÅÎÒÔiÓØÒÂ¬ÃlÌ!Â¤õÐÙiÌbÍê¬íçÂÏÎóCÅÔÑiÆ5Ú"ÔiÅÚCÆÃiÅhÙiÚªÆ5ÚLÅhÄCÌCÌCÂxÌªÃÍÂÏÎÆ&ósÆÅÓ/ÔiÅhÎÙiÌCÐ~Æ
ó+ÆÅOÚªÔlÎÙiÂÏÌïÕªÙiÌCÚNó+ÆÅJÒáÂ¬ÍÐhâ"Ð~ÔlÌÊõ!ÃlÄªÅhÙ0ÍÂÏÔlÌïë
ÁÂ¬ÃlÄªÅhÆE!Ç EÂÏÒòÍæÔ&ésÆÄCÌCÚªÆÅÒæÍæÔbÔÊÚ`ÙiÒØÓ/ÔlêÏê¬ÔáOÒëÖ»ÍÒâªÔáOÒñÔlÄªÅÅÆ5ÒÄ!ê¬ÍÒÓ/ÔiÅØÍâªÆæÁÊÕHÌ	ÊÕÙiÌ!ÚH
ÒæáÂÏÍÐhâªÆ5ÒÕ+áâCÂxÐhâNésÆ5Ð~ÔlÎÆ&ÙiÐ~ÍÂ¬ÑiÆÂÏÌçÍÄªÅÌ"Ó/ÅÔlÎ êÏÆÓ½ÍOÍæÔãÅhÂÏÃlâ	ÍëÁCÔiÅÆ5ÙiÐâGÔiÓÍâªÆ5ÒæÆèÒæáÂ¬ÍÐâªÆ5ÒÕ+ÍâªÆÅÆ
Ù0ÅÆèÓ/ÔlÄªÅÐ~ÔlÌÊõ!ÃlÄªÅhÙ0ÍÂÏÔlÌCÒÔiÓñÍâªÆèÍðáÔçÔiÍâªÆÅ5ÕïéÙiÐôÃiÅÔlÄCÌCÚïÕ=ÒáÂ¬ÍÐhâCÆ5ÒÕïÚCÂÏÒæó!êxÙ5íiÆ5ÚGébí"Ó½ÔlÄªÅÐ~ÔlêÏÄ!ÎÌCÒ
P!ûFP

º+WY»&¼x½¾cFWX4¿6_bXZ_bÀ~W¼ÂÁgTYX\ÃÄZÀ~TYÅÆÄ4S?_bÅZÀÂÁg»&¼~ÁgÇvÈ~_WÀ~Ç©Ä

ÂÏÌÍâªÆÍÙ0é!ê¬ÆiëÖpÌ{Æ5ÙiÐhâ"Ð~ÔlêÏÄCÎÌïÕÍâªÆésÆ5âCÙÑÂ¬ÔiÅQÔiÓÍâªÆÅÆ5ÒæósÆ5Ð~ÍÂ¬ÑiÆé!ÙiÐhôbÃiÅÔlÄ!ÌCÚçÐ~ÔlÌÊõ!ÃlÄªÅÙ0ÍÂ¬ÔlÌáÂ¬Íâ
ÍâªÆGÙiÐ~ÍÂ¬ÑiÆGÒáÂ¬ÍÐhâ7ÍÄªÅhÌCÆ5ÚìÔ<;ÂÏÒãÐ~ÔlÎó!Ù0ÅÆ5Ú7ÍæÔúÍâCÆ"ésÆ5âCÙ5ÑÊÂ¬ÔiÅãáÂ¬ÍâìÍâCÆLÙiÐ~ÍÂ¬ÑiÆ(ÒæáÂÏÍÐhâìÍÄCÅhÌªÆ5Ú
ÔlÌïë(ÖrÓósÆÅÓ/ÔiÅhÎÙiÌCÐ~Æ{ÂÏÒ&ÂÏÎóCÅhÔÑiÆ5ÚKÒÂ¬ÃlÌCÂ¬õÐÙiÌ	ÍêÏíiÕÍâªÆ{ÍÙ0é!ê¬Æ{ÒâªÔáOÒ
Ù >ÊÕñÂ¬ÓÂ¬ÍèÂÏÒèÒÂ¬ÃlÌ!Â¤õÐÙiÌbÍê¬í
ÚªÆÃiÅhÙiÚCÆ5ÚïÕBÍâªÆãÍÙ0é!ê¬ÆÒâCÔáÒE
Ù ÊÕÙiÌCÚ(ÔiÍâªÆÅháÂÏÒæÆÍâªÆãÅÆ5ÒæósÆ5Ð~ÍÂ¬ÑiÆÍÙ0éê¬ÆÆ5ÌbÍæÅí(ÂÏÒÆ5ÎóCÍ»íiëÁCÔiÅ
Æ~öªÙiÎó!ê¬ÆiÕsÐ~ÔlÌCÒÂÏÚCÆÅÍâªÆ&ÍæÔió(ê¬ÆÓ½ÍÐ~ÔiÅhÌªÆÅ5Õ+áâªÆÅhÆîÍâª0
Æ æÁ {ÒæáOÂ¬ÍÐhâGÂÏÒÙiÐ~ÍÂÏÑiÆiÕ=ÙiÌCÚ"ÍâCÆîé!ÙiÐhôbÃiÅÔlÄ!ÌCÚ
Ð~ÔlÌÊõ!ÃlÄCÅhÙ0ÍÂ¬ÔlÌ3Âxz
Ò ÊÕÂëWÆië¬Õ?âCÂÏêÏê¬þðÐêÏÂÏÎEé!ÂÏÌªÃãáÂ¬ÍâªÔlÄªÍEâªÆ5ê¬óCÓSÄCêÙiÐ~ÍÂ¬ÔlÌCÒ5ë"×ñêÏÙiÌ!ÌªÆÅîÝ¿ÂÏ1
Ò ÊÕ
ÄCÒÂxÌª
Ã äÊ× ÚCÂÏÒæÍÙiÌCÐ~Æ5Ò5ÕØÙiÌCÚIóêÏÙiÌCÌªÆÅÛ ÂÏ
Ò OÁ ÊÕòÄ!ÒÂÏÌªÃ(ÁÁmÚCÂÏÒæÍÙiÌ!Ð~Æ5ÒëIÛOýÒó+ÆÅhÓ½ÔiÅhÎ`ÙiÌCÐ~ÆNÂÏÒ
ÒÂ¬ÃlÌ!Â¤õÐÙiÌbÍê¬í`ésÆÍæÍæÆÅJÍâCÙiÌ"ÝîýÒÕÂÏÌCÚCÂÏÐÙ0ÍæÆ5Ú{éí{
Ù >tÊë
åJâCÆJê¬ÆÓ½ÍÎÔlÒæÍòÓ/ÔlÄªÅòÐ~ÔlêÏÄCÎÌ!ÒÂÏÌÁÂ¬ÃlÄªÅÆ!Ç îÒâªÔáÔlÄªÅòÅÆ5ÒÄ!ê¬ÍÒÓ½Ôi¾Å äÊ×úÚCÂÏÒæÍÙiÌ!Ð~Æ#Æ5ÒæÍÂÏÎÙ0ÍæÆ5ÒñÑiÆÅæþ
ÒÄCÒQÁÁKÚCÂÏÒæÍÙiÌ!Ð~ÆÆ5ÒÍÂÏÎÙ0ÍæÆ5ÒëØÞQêÏÆ5Ù0Åhê¬íiÕÊÍâªÆêÏÙ0ÍæÍæÆÅJÆ5ÒæÍÂxÎÙ0ÍæÆ5Ò#Ù0ÅÆÒÄªósÆÅhÂÏÔiÅØÂÏÌÔlÄªÅJÚªÔlÎ`ÙiÂÏÌCÒÕÊÂÏÌÍâªÆ
ÒæÆ5ÌCÒÆÍâCÙ0ÍÕÊÓ/ÔiÅØÆ5ÙiÐâ{é!ÙiÐôÃiÅÔlÄCÌCÚÐ~ÔlÌÊõ!ÃlÄCÅhÙ0ÍÂ¬ÔlÌïÕÍâªÆésÆ5âCÙÑÂÏÔiÅØÃiÆÍÒQÒÂ¬ÃlÌ!Â¤õÐÙiÌbÍê¬íÂÏÎóCÅÔÑiÆ5Ú`ÂÏÌË
ÍæÔãÇÈEÚªÔlÎÙiÂÏÌ!ÒëÖrÌÐ~ÔlÌbÍæÅhÙiÒæÍÕÊÍâªÆÅhÆOÙ0ÅÆOÔlÌCê¬µ
í ¶ÐÙiÒæÆ5ÒÙiê¬ÍæÔiÃiÆÍâªÆÅQáâªÆÅhÆJósÆÅÓ½ÔiÅÎÙiÌCÐ~ÆJÃiÆÍÒØáØÔiÅÒæÆië
åJâªÆèÒÂ¬ÃlÌ!Â¤õÐÙiÌCÐ~Æ5ÒOÙ0ÅÆûbÄCÂÏÍæÆEÒÐÙ0ÍæÍæÆÅÆ5Ú1ÔÑiÆÅÍâªÆÚªÔlÎÙiÂxÌCÒÙiÌCÚGé!ÙiÐhôbÃiÅhÔlÄCÌCÚ Ð~ÔlÌÊõ!ÃlÄªÅÙ0ÍÂ¬ÔlÌCÒÕsÂÏÌÊþ
ÚCÂÏÐÙ0ÍÂxÌªÃEÍâ!Ù0ÍJÙê¬ÔiÍQÔiÓÍâªÆÒÂÏÃlÌCÂ¤õÐÙiÌCÐ~Æ5ÒÅÆ5ÒhÄCê¬ÍÓ½ÅÔlÎ¿ÂxÌ	ÍæÆÅhÙiÐ~ÍÂÏÔlÌCÒQésÆÍðáÆÆ5ÌçÍâªÆÍæÆ5ÐhâCÌ!ÂÏûbÄCÆ5ÒQÍâCÙ0Í
ÔÊÐÐÄªÅÔlÌCê¬íüÂÏÌüÍâªÆNÐ~ÔlÌ	ÍæÆ~öÊÍÔiÓÐ~ÆÅÍÙiÂÏÌIÚªÔlÎ`ÙiÂÏÌCÒëüÁªÔiÅÆ~öªÙiÎó!ê¬ÆiÕØó+ÆÅhÓ½ÔiÅhÎ`ÙiÌCÐ~ÆçÂÏÒèÂÏÎóCÅÔÑiÆ5ÚIÂÏÌ
ç(êÑgÑAÜÂÓFìFÏIÎîáâªÆ5Ì3ÍâªÆ`éÙiÐôÃiÅÔlÄCÌCÚúÐ~ÔlÌÊõ!ÃlÄªÅhÙ0ÍÂÏÔlÌúÚªÔÆ5ÒîÌCÔiÍEÄCÒæÆâªÆ5ê¬óCÓSÄCêÙiÐ~ÍÂ¬ÔlÌ!ÒÕé!ÄªÍîÚªÆÃiÅÙiÚªÆ5Ú
áâªÆ5Ì`ÍâªÆéÙiÐôÃiÅÔlÄCÌCÚãÐ~ÔlÌÊõ!ÃlÄªÅhÙ0ÍÂÏÔlÌ`ÄCÒæÆ5ÒâCÂÏêxê¤þðÐêÏÂÏÎEé!ÂÏÌªÃOáÂ¬ÍââCÆ5ê¬óCÓSÄCêªÙiÐ~ÍÂ¬ÔlÌCÒëòåâCÂÏÒôÊÂÏÌCÚÔiÓïésÆ~þ
âCÙÑÂ¬ÔiÅÐÙiÌLÌCÔiÍésÆÔié!ÒæÆÅhÑiÆ5Ú"ÂÏÌLÙiÌ	í{ÔiÍâªÆÅÚªÔlÎÙiÂÏÌ=ëåJâCÆÅÆîÙ0ÅÆ ² ÚªÔlÎÙiÂxÌCÒJáâCÆÅÆósÆÅÓ/ÔiÅhÎÙiÌCÐ~Æ
ÂÏÒQÂÏÎó!ÅÔÑiÆ5Ú{ÂÏÌ{ÙiêÏê+é!ÄªÍÔlÌªÆé!ÙiÐhôbÃiÅÔlÄ!ÌCÚçÐ~ÔlÌÊõ!ÃlÄªÅÙ0ÍÂ¬ÔlÌïëòÝOóCó!Ù0ÅÆ5ÌbÍê¬í`ÂÏÌãÍâªÆ5ÒæÆÐÙiÒÆ5ÒJÒæÔlÎÆÂÏÌbÍæÆÅæþ
ÙiÐ~ÍÂ¬ÔlÌúésÆÍðáÆÆ5Ì3ÍâªÆ`ÍæÆ5ÐhâCÌCÂxûbÄªÆ5ÒîÔÐÐÄCÅhÒîÔlÌ!ê¬íGÂxÌ(ÔlÌªÆãÒó+Æ5ÐÂ¬õÐÐ~ÔlÌÊõ!ÃlÄªÅÙ0ÍÂ¬ÔlÌïË
ë ­(Æ`ÅÆ5Î`Ù0Åô ÍâCÙ0Í
ÔiÓ/ÍæÆ5Ì{ÅhÄCÌCÌCÂxÌªÃÍÂÏÎÆ5ÒáÂ¬ÍâÁÁýÒQÆ5ÒæÍÂÏÎÙ0ÍæÆ5Ò#Ù0ÅÆÔlÌCêÏíÙ&êxÂ¬ÍæÍê¬ÆésÆÍæÍæÆÅQÍâCÙiÌáÂ¬Í÷
â äÊ×JýÒÆ5ÒæÍÂÏÎ`Ù0ÍæÆ5ÒÕ
ÂëWÆië¬ÕésÆ5âCÙ5ÑÊÂ¬ÔiÅñÃiÆÍÒQÂÏÎóCÅÔÑiÆ5ÚãÅÆ5êÏÂxÙ0é!ê¬í&ÔÑiÆÅ#ÙiêÏê!ÂxÌCÒæÍÙiÌCÐ~Æ5ÒÕé!ÄªÍñÔlÌCê¬íéíÙîÒÎÙiêxêCÓSÙiÐ~ÍæÔi(Å /ÍæÔèÃiÆÍQÙiÌ
ÂÏÚªÆ5ÙÔiÓ+ÍâCÙ0ÍÕ	Ð~ÔlÎóÙ0ÅÆ#ÍâªÆJÚCÂ sÆÅÆ5ÌCÐ~Æ5Ò?ésÆÍðáÆÆ5Ì`ÙÑiÆÅhÙ0ÃiÆÅÄCÌCÌCÂÏÌCÃJÍÂÏÎÆ5ÒÂÏÌèÁÂ¬ÃlÄªÅhÆÇiÇ0ÕbÓ½ÔiÅòÐ~ÔlÌªõ!Ã0þ
ÄªÅhÙ0ÍÂÏÔlÌCÒQáâªÆÅÆÔlÌ!ê¬íãÍâCÆîÚCÂÏÒæÍÙiÌ!Ð~ÆÆ5ÒæÍÂÏÎÙ0ÍæÆîÐâCÙiÌªÃiÆ5IÒ ëÖpx
Ì ¶ÚªÔlÎÙiÂÏÌ!ÒÕCÁÁØýÒÆ5ÒæÍÂÏÎÙ0ÍæÆ5ÒOÂÏÎóCÅhÔÑiÆ
ósÆÅÓ/ÔiÅhÎÙiÌCÐ~ÆçÐ~ÔlÌCÒÂxÒæÍæÆ5Ì	ÍêÏí3ÔÑiÆÅÙiêÏêé!ÙiÐôÃiÅÔlÄCÌ!ÚIÐ~ÔlÌÊõ!ÃlÄªÅhÙ0ÍÂÏÔlÌCÒÕØÂxÌCÚCÂÏÐÙ0ÍÂÏÌCÃLÙ ÅÆ5Ùiê#ÙiÚªÑ0ÙiÌbÍÙ0ÃiÆ
ÔiÓòÍâªÆÚC9Â +ÆÅÆ5ÌbÍOÚ!ÂÏÒæÍÙiÌCÐ~Æ&Æ5ÒæÍÂÏÎÙ0ÍæÆ5Ò5ëÖrÌ íÎ&ÕCîîMÏIÎSÚªÆ5ÒÐ~ÅhÂÏé+Æ5ÚLÂÏÌ(äÆ5Ð~ÍÂ¬ÔlÌ ° ëÏÇ Õ=Ó/ÔiÅÆ~öªÙiÎó!êÏÆiÕáÆ
Ó/ÔlÄCÌCÚKÍâªÆNÓ/ÔlêÏê¬ÔáÂÏÌªÃªëIÖrÓÍâªÆçÅÔiésÔiÍ`ÂÏÒ`ÂÏÌKÅÔÔlÎ ÝîÕØÙiÌCÚâªÔlêxÚCÒèÔlÌCê¬íüÔlÌªÆNé!ÙiêxêÕñÁÁýÒãâªÆ5ÄCÅhÂÏÒæÍÂÏÐ
óCÅÆÓ/ÆÅhÒó!ÂxÐôÊÂÏÌªÃ{Äªó1ÙiÌªÔiÍâªÆÅéÙiêÏêÔÑiÆÅ&ÎÔÑÊÂÏÌªÃ{ÍæÔNÅÔÔlÎ ÛÕBÂëWÆië¬ÕïÍâªÆóÂÏÐôÊÂÏÌªÃçÙiÐ~ÍÂ¬ÔlÌ1êÏÆ5ÙiÚCÒÍæÔ"Ù
ÒæÍÙ0ÍæÆáOÂ¬Íâé+ÆÍæÍæÆÅÆÑ-ÙiêÏÄ!Ù0ÍÂ¬ÔlÌï
ë }OÔáÕCÂ¬ÓÍâªÆÅÆÙ0ÅÆ  é!ÙiêxêÏÒQê¬ÆÓ½Í#ÂÏÌÅÔÔlÎ¿ÝEÕªÍâªÆ5x
Ì äÊ×JýÒ#âªÆ5ÄCÅhÂÏÒæÍÂÏÐ
Æ5ÒæÍÂÏÎ`Ù0ÍæÆÔiÓQó!ÂÏÐôÊÂÏÌªÃNÄCó1ÙiÌªÔiÍâªÆÅîéÙiêÏêÂÏÒ ² 0 ÕBáâ!ÂÏê¬ÆèÍâªÆÆ5ÒæÍÂxÎÙ0ÍæÆÔiÓ#ÎÔÑÊÂÏÌªÃçÍæÔLÅÔÔlÎ ÛmÂÏÒ
· ]Ç0ëåJâbÄ!ÒÕ+ÂÏÓ?ÍâCÆÅÆÙ0ÅÆ&Ù0Íê¬Æ5ÙiÒæÍ ² é!ÙiêÏêÏÒOê¬ÆÓ/ÍOÂÏÌLÅÔÔlÎ ÝEÕsÎÔÑÊÂÏÌªÃãÍæÔÅhÔbÔlÎ Û]ÃiÆÍÒÙãésÆÍæÍæÆÅ
ÆÑ0ÙiêÏÄCÙ0ÍÂ¬ÔlÌïëØäªÄCÎÎÂÏÌCÃ&Äªó"áØÆ5Â¬ÃlâbÍÒÕ äÊ×IÔÑiÆÅÆ5ÒæÍÂÏÎ`Ù0ÍæÆ5ÒOÍâCÆÄCÒæÆÓSÄCêÏÌªÆ5ÒÒQÔiÓ?ÍâªÆîÎÔÑÊÂÏÌªÃÙiÐ~ÍÂ¬ÔlÌïë
ÞÔlÎó!Ù0ÅhÂÏÌªÃâ!ÂÏêÏê¤þðÐêÏÂxÎîé!ÂxÌªÃîÑiÆÅhÒhÄCÒJÆ5ÌªÓ/ÔiÅhÐ~Æ5ÚGâCÂÏêÏê¬þðÐêÏÂÏÎEé!ÂÏÌªÃªÕÂëWÆië¬Õê¬ÔÔiôÊÂÏÌªÃÙ0ÍÍâªÆÓ/ÔlÄªÅOÐ~ÔlêÏÄ!ÎÌCÒ
ÂÏÌLÍâªÆèÎÂÏÚCÚCêÏÆÔiÓñÁÂ¬ÃlÄªÅÆ{!Ç ÕïÍâªÆ&Ôié!ÒæÆÅÑ0Ù0ÍÂ¬ÔlÌ ÂÏÒOÍâCÂÏÒëåJâªÆ&ÚCÂ sÆÅÆ5ÌbÍÒæÆ5Ù0ÅÐhâGÍæÆ5ÐhâCÌ!ÂÏûbÄCÆ&ÂÏÒÙé!Â¬Í
ûÄªÆ5ÒæÍÂ¬ÔlÌCÙ0éê¬ÆñáâCÆ5ÌÍâªÆé!ÙiÐôÃiÅÔlÄCÌ!Ú&Ð~ÔlÌªõ!ÃlÄªÅhÙ0ÍÂ¬ÔlÌ&ÚªÔÆ5ÒÌCÔiÍ?ÄCÒÆâªÆ5êÏóCÓ/Ä!êlÙiÐ~ÍÂ¬ÔlÌCÒÕ0é!ÄCÍBÔiÍâªÆÅáOÂÏÒæÆiÕ
Æ5ÌªÓ/ÔiÅhÐ~Æ5ÚKâCÂÏêÏê¬þðÐêÏÂÏÎEé!ÂÏÌªÃíÂÏÆ5êÏÚCÒÆ~öªÐ~Æ5êÏê¬Æ5ÌbÍ&ÅÆ5ÒÄCê¬ÍÒ5v
ë ­ Â¬ÍâªÔlÄªÍèâªÆ5ê¬óCÓSÄCêòÙiÐ~ÍÂÏÔlÌCÒÕósÆÅÓ/ÔiÅhÎÙiÌCÐ~ÆãÃiÆÍÒ
ÚªÆÃiÅhÙiÚCÆ5ÚãÙiêÏÎÔlÒæÍØÙiÒQÎÙiÌbíÍÂÏÎÆ5ÒÙiÒQÂ¬ÍòÃiÆÍÒ#ÂÏÎó!ÅÔÑiÆ5ÚïÕbáâªÆÅÆ5ÙiÒ5ÕbáÂÏÍâ`âªÆ5ê¬ó!Ó/ÄCê!ÙiÐ~ÍÂ¬ÔlÌCÒÕÆ5ÌªÓ/ÔiÅhÐ~Æ5Ú
âCÂÏêxê¤þðÐêÏÂÏÎEé!ÂÏÌªÃÂÏÎóCÅhÔÑiÆ5ÒósÆÅÓ/ÔiÅhÎÙiÌ!Ð~ÆÒÂ¬ÃlÌCÂ¤õ+ÐÙiÌ	Íê¬í ÂÏÌìÇ ° ÔiÓ#ÔlÄªý
Å 0ÈLÚªÔlÎÙiÂÏÌCÒ5ÕBésÆ5ÂÏÌªÃNÚªÆÃiÅÙiÚªÆ5Ú
ÔlÌCê¬íÂÏ¸
Ì ÍÂÎ&ÕAÜÖÔ+Ï#ë ­(ÆÚCÅhÙ5á7ÍðáÔèÐ~ÔlÌ!ÐêÏÄCÒÂ¬ÔlÌ!Òë?ÁÂ¬ÅÒæÍÕbáOâªÆÍâªÆÅñÔlÌCÆOÔiÅÍâªÆÔiÍâªÆÅÒÆ5Ù0ÅhÐhâ{ÒæÍæÅhÙ0ÍæÆÃiíÂÏÒ
ÙiÚªÆ5ûÄCÙ0ÍæÆQÚªÆósÆ5ÌCÚCÒsÑiÆÅíÎ&ÄCÐhâEÔlÌÍâCÆØÚªÔlÎÙiÂxÌïëBÝIÒÂÏÎó!ê¬ÆÆ~öªÙiÎó!ê¬ÆòÓ/ÔiÅBÍâ!Ù0ÍÂÏÒBÍâª¾Æ Ý6ß<àYÓÕ	ÚCÔlÎÙiÂÏÌïÕ
áâªÆÅhÆèâ!ÂÏêÏê¤þðÐêÏÂxÎîé!ÂxÌªÃÙiê¬áQÙ5íÊÒÅÆ5ÒæÍÙ0ÅÍÒé+ÆÓ/ÔiÅÆÂ¬ÍÐÙiÌ(ÅÆ5ÙiÐâ1ÍâªÆèÃiÔlÙiKê ÊAÔlÌ1ÙiêÏêó!Ù0ÍâCÒÍæÔçÍâCÆÃiÔlÙiêÕ
ÍâªÆÅÆÙ0ÅÆÆ~öÊó+ÔlÌCÆ5Ì	ÍÂÏÙiêxê¬íÎÙiÌbíãÒæÍÙ0ÍæÆÍæÅhÙiÌ!ÒÂ¬ÍÂ¬ÔlÌCÒñáâªÆÅÆÍâªÆÒæÔlÌ{âCÙiÒQÌªÔèésÆÍæÍæÆÅQÆÑ-ÙiêÏÄ!Ù0ÍÂ¬ÔlÌÍâCÙiÌ
ÍâªÆÓ/Ù0ÍâCÆÅ5ëäÊÆ5Ð~ÔlÌCÚïÕ0ÍâªÆÅÆÂÏÒÙiÌ&ÂÏÌbÍæÆÅhÙiÐ~ÍÂ¬ÔlÌEésÆÍðáÆÆ5ÌEÆ5ÌCÓ½ÔiÅhÐ~Æ5ÚèâCÂxêÏê¤þðÐêÏÂÏÎEé!ÂÏÌCÃØÙiÌCÚ&âªÆ5ê¬óCÓSÄCêlÙiÐ~ÍÂÏÔlÌCÒ
óCÅhÄ!ÌCÂÏÌªÃ{ÍâCÙ0Í&ÔÐÐÄCÅhÒîÐ~ÔlÌCÒhÂÏÒæÍæÆ5ÌbÍê¬í1ÙiÐ~ÅÔlÒÒ&ÙiêÏÎÔlÒæÍ&ÙiêÏêòÔiÓ#ÔlÄCÅîó!êÏÙiÌ!ÌCÂÏÌªÃçÚªÔlÎÙiÂxÌCÒëçåJâCÂÏÒîÐÙiÌúésÆ
Æ~öÊó!êÏÙiÂÏÌªÆ5Ú1ébí1ÍâCÆ`Æ sÆ5Ð~Í&Íâ!Ù0ÍEÍâªÆãóCÅhÄCÌ!ÂÏÌªÃçÍæÆ5Ðhâ!ÌCÂÏûÄªÆãâCÙiÒEÔlÌúÍâªÆãÚC9Â +ÆÅÆ5ÌbÍEÒÆ5Ù0ÅhÐhâKÒæÍæÅhÙ0ÍæÆÃlÂÏÆ5Òë
P!û.H

S6TU<U<VWYXZX\[^]`_ba+_bc

ÖpÌìâCÂÏêÏê¬þðÐêÏÂÏÎEé!ÂÏÌªÃªÕâªÆ5ê¬óCÓSÄCêQÙiÐ~ÍÂ¬ÔlÌCÒóCÅhÄCÌCÂxÌªÃLó!ÅÆÑiÆ5Ì	ÍÒ`ÍâªÆNó!êxÙiÌCÌªÆÅèÓ½ÅhÔlÎ ê¬ÔÔiôÂÏÌCÃ1Ù0ÍÍæÔbÔúÎÙiÌ	í
ÒÄªósÆÅ +ÄªÔlÄCÒ`ÒhÄCÐÐ~Æ5ÒÒæÔiÅhÒNÔlÌ Æ5ÙiÐhâ;ÒhÂÏÌªÃlê¬Æ ÒæÍÙ0ÍæÆ(ÍâCÙ0ÍNÙKó!Ù0Íâ ÃiÔÆ5ÒçÍâªÅhÔlÄªÃlâïë åâCÂÏÒÒÙ5ÑiÆ5Ò"ÍÂÏÎÆ
óCÅÔiósÔiÅÍÂÏÔlÌCÙiêªÍæÔ&ÍâªÆêÏÆ5ÌªÃiÍâÔiÓ=ÍâCÆó!Ù0ÍâïëòåâªÆÆ sÆ5Ð~ÍÒÔlÌãÆ5ÌCÓ½ÔiÅhÐ~Æ5ÚâCÂÏêxê¤þðÐêÏÂÏÎEé!ÂÏÌªÃÙ0ÅÆÎEÄCÐâ{ÎÔiÅÆ
ÚªÅhÙiÒÍÂÏÐ0ë1åJâªÆÅÆiÕØâªÆ5ê¬óCÓSÄCêòÙiÐ~ÍÂ¬ÔlÌ!ÒèóCÅhÄCÌªÆ5ÒEÔlÄªÍÄCÌCÌCÆ5Ð~Æ5ÒÒÙ0Åí3ÒhÄCÐÐ~Æ5ÒÒæÔiÅhÒèÔiÓOÆ5ÙiÐhâìÒÍÙ0ÍæÆNÚCÄªÅhÂÏÌCÃLÙ
éCÅÆ5ÙiÚCÍâõ!ÅhÒæÍ#ÒæÆ5Ù0ÅhÐâïÕ!ÂëWÆië¬ÕÂ¬Í#ÐÄªÍÒJÚªÔáÌ{ÍâªÆéCÅhÙiÌ!ÐhâCÂÏÌCÃ&ÓSÙiÐ~ÍæÔiÅ5ÕCíÊÂ¬Æ5êÏÚ!ÂÏÌªÃ&ó+ÆÅhÓ½ÔiÅhÎ`ÙiÌCÐ~ÆÒæósÆÆ5ÚCÄªó!Ò
Æ~öÊó+ÔlÌCÆ5Ì	ÍÂÏÙiêïÂxÌ{ÍâªÆîÚªÆóCÍâ!ÒQÍâCÙ0ÍÙ0ÅÆÆ5Ì!Ð~ÔlÄCÌ	ÍæÆÅhÆ5Úïë
­(ÆîõÌCÙiêÏê¬íÐ~ÔlÎó!Ù0ÅÆ&Ð~ÔlÌCÒÂÏÚCÆÅhÙ0ÍÂ¬ÔlÌçÔiÓÙiêÏê=ÙiÐ~ÍÂÏÔlÌCÒJÑiÆÅhÒhÄCÒÐ~ÔlÌCÒhÂÏÚªÆÅhÙ0ÍÂ¬ÔlÌNÔiÓ?ÔlÌ!ê¬í{ÍâªÆîâªÆ5ê¬ó!Ó/ÄCê
ÔlÌªÆ5Òë1ÜBÔbÔiôúÙ0ÍÍâªÆãÅÂ¬Ãlâ	ÍÎÔlÒæÍEÓ/ÔlÄªÅÐ~ÔlêÏÄCÎ`ÌCÒîÔiÓÁÂ¬ÃlÄªÅÆ !Ç ë1åJâªÆÔié!ÒæÆÅÑ0Ù0ÍÂ¬ÔlÌKÂÏÒ&ÒÂÏÎóê¬í ÍâCÙ0Í
âªÆ5ê¬ó!Ó/ÄCê?ÙiÐ~ÍÂ¬ÔlÌCÒEÙ0ÅÆÅÆ5ÙiêÏêÏíLâªÆ5ê¬ó!Ó/ÄCê Ê7ÍâªÆíNÂÏÎó!ÅÔÑiÆósÆÅÓ/ÔiÅhÎÙiÌCÐ~ÆÒhÂ¬ÃlÌCÂ¤õÐÙiÌbÍê¬í"ÂxÌ(ÙiêÏÎÔlÒæÍÙiêÏêÔiÓ
ÔlÄªÅèó!êÏÙiÌ!ÌCÂÏÌªÃ"ÚCÔlÎÙiÂÏÌCÒë1åâCÂÏÒîÂxÒEÆ5Òó+Æ5ÐÂxÙiêÏê¬í(ÍæÅhÄªÆÓ/ÔiÅÍâªÔlÒæÆ{é!ÙiÐôÃiÅÔlÄCÌ!ÚIÐ~ÔlÌÊõ!ÃlÄªÅhÙ0ÍÂÏÔlÌCÒEÄ!ÒÂÏÌªÃ
Æ5ÌªÓ/ÔiÅhÐ~Æ5Ú1âCÂxêÏê¤þðÐêÏÂÏÎEé!ÂÏÌCÃªÕ!ÚCÄªÆÍæÔçÍâªÆÒhÙiÎÆÂÏÌbÍæÆÅhÙiÐ~ÍÂ¬ÔlÌ(ÍâCÙ0ÍîáØÆâCÙÑiÆÔlÄªÍêÏÂxÌªÆ5Ú Ù0é+ÔÑiÆiëÖrÌ3ÒæÔlÎÆ
ÚªÔlÎÙiÂxÌCÒÕâCÆ5ê¬óCÓSÄCêÙiÐ~ÍÂ¬ÔlÌCÒEóCÅhÄCÌ!ÂÏÌªÃçÂÏÎósÔlÒæÆ5ÒÙ"ÑiÆÅí(ÅhÂ¬ÃlÂxÚ(ÅÆ5ÒæÍæÅhÂxÐ~ÍÂ¬ÔlÌ1ÔlÌ3ÍâªÆãÒæÆ5Ù0ÅÐhâüÒæó!ÙiÐ~ÆiÉÂÏÌ
óYÐôYÏÜ/êÑzÏÕÙiÒ&ÒÙiÂÏÚ3ÂxÌúäÆ5Ð~ÍÂ¬ÔlÌ ëÏÇ0ë · ÕòáÆ`Ó/ÔlÄCÌCÚ1Íâ!Ù0ÍEÒæÍÙ0ÍæÆ5ÒèÐÙiÌKâCÙ5ÑiÆ{âÄCÌCÚªÅÆ5Ú!ÒÔiÓÒÄCÐÐ~Æ5ÒÒÔiÅhÒÕ
áâªÆÅhÆÔlÌCê¬íãÙ0ésÔlÄªÍ A¿ÔiÓÍâCÔlÒæÆîÙ0ÅÆÐ~ÔlÌCÒhÂÏÚªÆÅÆ5ÚNâCÆ5ê¬óCÓSÄCêëBÖpÌçÔiÍâªÆÅOÚªÔlÎÙiÂÏÌCÒ5ÕªÔlÌCê¬íãÙÓ½Æá;ÙiÐ~ÍÂÏÔlÌCÒ
Ù0ÅÆQóCÅhÄ!ÌªÆ5ÚïÕ0êÏÂ¬ôiÆØÂx®
Ì Ý6ß<àYÓÕÕ0áâCÆÅÆÙ0ÍÎÔlÒÍ?ÍâCÅÆÆ#ÙiÐ~ÍÂ¬ÔlÌCÒÙ0ÅÆ#Ù0óCó!êÏÂxÐÙ0é!ê¬ÆñÂÏÌEÆ5ÙiÐhâ`ÒæÍÙ0ÍæÆiÕláâCÂxÐhâèÙ0ÅÆ
ÙiêÏêÐ~ÔlÌCÒÂÏÚªÆÅhÆ5ÚNâªÆ5ê¬óCÓSÄCêïÂÏÌLÎÔlÒæÍOÔiÓÍâªÆEÐÙiÒæÆ5Ò5ë ÌòÑiÆ5Ì Ù`ÒhÎÙiêÏê=ÚªÆÃiÅhÆÆEÔiÓÅÆ5ÒÍæÅhÂÏÐ~ÍÂ¬ÔlÌLÚªÔbÆ5ÒOÄCÒÄCÙiêxê¬í
ê¬Æ5ÙiÚ7ÍæÔüÙüÒÂ¬ÃlÌ!Â¤õÐÙiÌbÍ`ÂÏÎóCÅhÔÑiÆ5ÎÆ5ÌbÍÂxÌìósÆÅÓ/ÔiÅhÎÙiÌCÐ~Æië]ÖpÌ7ÍðáÔüÚªÔlÎ`ÙiÂÏÌCÒLÕ çÎ&ÕzÏ@é%ÐIß<×IÏÛ#ÓFÎ&ÑAÜIÙiÌCÚ
ç(êÑgÑAÜÂÓFìFÏIÎ5ÕâCÆ5ê¬óCÓSÄCê!ÙiÐ~ÍÂ¬ÔlÌ!ÒÐÙiÌ{ó!ÅhÄCÌªÆOÔlÄªÍQÍæÔbÔÎÙiÌbí`ósÔlÒÒÂÏé!ÂÏêÏÂ¬ÍÂÏÆ5ÒÕlÂëWÆië¬ÕÍâªÆíãÐÄªÍ#ÙáÙíÒæÔlêxÄªÍÂ¬ÔlÌ
ó!Ù0ÍâCÒ5ëQåâCÂÏÒJâCÙ0ó!ó+Æ5Ì!Ò#ésÆ5ÐÙiÄCÒæÆÍâªÆÅhÆiÕÍâªÆîÅÆ5êÏÙ-öÊÆ5Ú"ó!êxÙiÌNÐÙiÌLÂÏÃlÌªÔiÅÆÍâCÂxÌªÃlÒJÍâCÙ0ÍÙ0ÅÆEÐ~ÅÄCÐÂÏÙiêïÓ/ÔiÅ
ÒæÔlê¬ÑÊÂÏÌªÃÍâªÆèÅÆ5Ùiê?ÍÙiÒæô+ëèÞÔlÌ!ÒÂÏÚªÆÅÍâªµ
Æ çÎ&ÕzÏ@é%ÐIß<×IÏÛMÓFÎIÑAÜ!ÕïéCÅhÂÏÆ !íNÚªÆ5ÒÐ~ÅhÂÏé+Æ5ÚGÂÏÌ1äÆ5Ð~ÍÂ¬Ôl
Ì Cë Õ=áOâªÆÅÆ
Ôi~é ³æÆ5Ð~ÍÒÌªÆÆ5Ú(ÍæÔçésÆÎÔÑiÆ5Ú1ÄCÒÂxÌªÃçÙ{éCÅhÂ¬ÆÓSÐÙiÒæÆi®
ë ­AâªÆ5ÌCÆÑiÆÅÍâªÆéCÅhÂÏÆÓ/ÐÙiÒæÆÂxÒÎÔÑiÆ5ÚïÕÙiêÏê?Ôi~é ³æÆ5Ð~ÍÒ
ÂÏÌCÒhÂÏÚªÆÂ¬ÍÙ0ÅÆÎÔÑiÆ5Ú{áOÂ¬Íâ`Â¬Íéí`ÙEÐ~ÔlÌ!ÚCÂ¬ÍÂ¬ÔlÌCÙiê!Æ +Æ5Ð~Íë }ÔáÕÊÍâªÆÅÆ5êÏÙ-öÊÆ5Ú`óêÏÙiÌCÌªÆÅÌªÆÑiÆÅJÌªÆÆ5ÚCÒØÍæÔ
ÍÙ0ôiÆOÙiÌbíèÔi~é ³æÆ5Ð~ÍñÔlÄªÍÔiÓsÍâªÆJé!ÅhÂ¬ÆÓSÐÙiÒæ@Æ Ê7ÍâªÆJÚªÆ5êÏÆÍæÆJÆ +Æ5Ð~ÍÒÒÙíÍâCÙ0ÍñÎÔÑÂÏÌCÃÙiÌÔi~é ³æÆ5Ð~ÍñÎÆ5ÙiÌCÒñÍâªÆ
Ôi~é ³æÆ5Ð~ÍOÂÏÒÌªÔê¬ÔlÌªÃiÆÅÙ0ÍJÍâªÆîÒæÍÙ0ÅhÍOê¬ÔÊÐÙ0ÍÂ¬ÔlÌïëòÖrÃlÌªÔiÅhÂxÌªÃÍâCÂÏÒÕªôiÆÆóÂÏÌªÃÔi~é ³æÆ5Ð~ÍÒÂÏÌCÒÂÏÚCÆOÍâªÆîéCÅhÂ¬ÆÓSÐÙiÒæÆ
ÌªÆÑiÆÅâbÄªÅhÍÒë
"9"9 «-ªÖ¬-§/¤-¦#¢Z¦  § 

­(ÆãÙiêxÒæÔNÂÏÌbÑiÆ5ÒæÍÂ¬ÃlÙ0ÍæÆ5Ú1ÍâCÆÆ+Æ5Ð~ÍÒEÍâCÙ0ÍîÁÁýÒîÌCÆáuÍæÆ5ÐhâCÌ!ÂÏûbÄCÆ5ÒâCÙ5ÑiÆãÔlÌ1ÒæÔlêÏÄCÍÂ¬ÔlÌ(ê¬Æ5ÌªÃiÍâïë{ÞÔlÎèþ

ó!Ù0ÅhÂxÌªÃÍðáÔçÐ~ÔlÌÊõ!ÃlÄªÅÙ0ÍÂ¬ÔlÌCÒÝuÙiÌCÚGÛOÕsáÆEÍæÔÔiô"ÙiÒÍâªÆèÚCÙ0ÍÙÒæÆÍÍâªÆîÅÆ5Òó+Æ5Ð~ÍÂÏÑiÆ&ÒæÔlêxÄªÍÂ¬ÔlÌGê¬Æ5ÌªÃiÍâ
Ó/ÔiÅÍâªÔlÒæÆÍÙiÒôÒîÍâCÙ0ÍésÔiÍâ1Ý ÙiÌCÚ1ÛmÎÙiÌCÙ0ÃiÆ5Ú3ÍæÔ"ÒæÔlê¬Ñi@Æ ÊAÔiébÑÊÂ¬ÔlÄCÒêÏíiÕBÍâªÆÅÆÂxÒÌªÔiÍÎ&ÄCÐhâ3ó+ÔlÂxÌ	Í
ÂÏÌKÐ~ÔlÎó!Ù0ÅÂÏÌªÃ(ÒæÔlêÏÄªÍÂÏÔlÌIê¬Æ5ÌªÃiÍâKáâªÆ5ÌKÔlÌCÆçó!êÏÙiÌCÌªÆÅÐÙiÌìÌCÔiÍèõÌCÚKÙ(ÒæÔlêÏÄªÍÂÏÔlÌüÙ0ÍãÙiêÏêá
ë ­(Æ"ÍâªÆ5Ì
Ð~ÔlÄCÌbÍæÆ5Ú`ÍâCÆOÌÄCÎîésÆ
Å "ÔiÓïÍÙiÒæôÒñáâªÆÅÆOÝøÙiÌCÚ`ÛIésÆ5âCÙÑiÆ5Ú`ÚC9Â +ÆÅÆ5ÌbÍê¬íiÕÙiÌCÚÍâªÆÌbÄ!ÎîésÆ	Å èáOâªÆÅÆ
ÛýÒÒæÔlêÏÄªÍÂÏÔlÌ"áQÙiÒÒâªÔiÅÍæÆÅÕ=ÙiÌCÚ ÚªÆ5ÐÂÏÚªÆ5ÚGÙ0ésÔlÄªÍÒÂ¬ÃlÌCÂ¤õ+ÐÙiÌCÐ~ÆEêÏÂÏôiÆ&ÚªÆ5ÒhÐ~ÅhÂ¬ésÆ5ÚLÂxÌ"ÍâªÆêÏÙiÒÍÒÆ5Ð~ÍÂ¬ÔlÌïë
ÁÂ¬ÃlÄªÅÆÇ · ÒâªÔáOÒ#ÔlÄªÅJÅÆ5ÒhÄCê¬ÍÒ#ÂÏÌ{ÍâªÔlÒÆîÐÙiÒæÆ5ÒJáOâªÆÅÆÙÒÂxÌªÃlê¬ÆÒæáÂ¬ÍÐâNÂÏÒQÍÄªÅÌªÆ5Úïë
åJâCÆEÚCÙ0ÍÙãÂÏÌ"ÁÂ¬ÃlÄªÅhÆ`Ç · Ù0ÅhÆEÔiÅÃlÙiÌ!9Â Æ5ÚLÂxÌçÍâªÆîÔiéÑÊÂ¬ÔlÄCÒÎÙiÌCÌªÆÅÙiÌCÙiê¬ÔiÃiÔlÄCÒOÍæÔÁÂ¬ÃlÄCÅÆ`!Ç ëOÝ
õ!ÅhÒÍ&ÃlêxÙiÌCÐ~ÆNÙ0ÍÍâªÆçÍÙ0é!êÏÆçÍæÆ5êÏêÏÒÄCÒèÍâCÙ0ÍãÁ?ÁýÒÌCÆá ÍæÆ5ÐhâCÌ!ÂÏûbÄCÆ5ÒÙ0ÅÆNÙiêÏÒæÔ1ÄCÒÆÓ/ÄCêÓ/ÔiÅ`ÒâªÔiÅhÍæÆ5ÌCÂÏÌªÃ
ÒæÔlêÏÄCÍÂ¬ÔlÌ`ê¬Æ5ÌCÃiÍâ`ÂÏÌãÐ~ÔlÎó!Ù0ÅhÂÏÒÔlÌÍæ
Ô äÊ×OÇ0ÕbéÄªÍñÌªÔiÍÙiÒÄ!ÒæÆÓ/Ä!êCÙiÒñÍâCÆí`Ù0ÅÆÓ/ÔiÅQÂÏÎóCÅÔÑÂxÌªÃÅhÄCÌbÍÂÏÎÆ
ésÆ5âCÙ5ÑÊÂ¬ÔiÅ5ëÜ=ÆÍÄCÒòÓ/ÔÊÐÄCÒòÔlÌ`ÍâªÆOê¬ÆÓ/ÍÎÔlÒæÍñÓ½ÔlÄªÅÐ~ÔlêÏÄCÎÌ!ÒÖÕ äÊ×úÚ!ÂÏÒæÍÙiÌCÐ~ÆJÆ5ÒÍÂÏÎÙ0ÍæÆ5ÒØÑiÆÅhÒÄCÒØÁ?Á3ÚCÂÏÒpþ
ÍÙiÌCÐ~ÆEÆ5ÒæÍÂÏÎÙ0ÍæÆ5ÒëåJâªÆÔié!ÒÆÅÑ-Ù0ÍÂÏÔlÌCÒJÙ0ÅÆÍâ!Ù0ÍÕ!áÂ¬Íâ{Æ5ÌCÓ½ÔiÅhÐ~Æ5ÚLâCÂÏêÏê¬þðÐêÏÂÏÎEé!ÂÏÌªÃîÂxÌ{ÍâªÆé!ÙiÐhôbÃiÅÔlÄ!ÌCÚïÕ
ÁÁìÆ5ÒæÍÂxÎÙ0ÍæÆ5ÒÔiÓ/ÍæÆ5ÌGÅÆ5ÒÄCêÏÍÂÏÌ"ÒhâªÔiÅÍæÆÅóêÏÙiÌCÒÕ+ÙiÌCÚNÍâCÙ0ÍÍâªÆÅÆ&Ù0ÅÆ&ÍðáÔÚªÔlÎ`ÙiÂÏÌCÒJáOâªÆÅÆîÒæÔlêxÄªÍÂ¬ÔlÌ
ê¬Æ5ÌªÃiÍâ!ÒÙ0ÅÆ`ÂÏÎóCÅÔÑiÆ5Ú3ÙiÐ~ÅÔlÒÒîÙiêxêé!ÙiÐôÃiÅÔlÄCÌCÚúÐ~ÔlÌÊõ!ÃlÄªÅÙ0ÍÂ¬ÔlÌCÒëãÞÔlÌ!Ð~ÆÅhÌCÂÏÌªÃ{ÍâªÆãÒæÆ5Ð~ÔlÌCÚ1ÔiéÒæÆÅæþ
Ñ0Ù0ÍÂ¬ÔlÌïÕÍâCÂÏÒEÂÏÒîÚCÄCÆÍæÔLó!ÅÔiósÆÅÍÂ¬Æ5ÒÔiÓJÍâCÆãÚªÔlÎÙiÂxÌ1ÍâCÙ0Í&Á?ÁýÒèâªÆ5ÄªÅÂÏÒæÍÂÏÐèÅÆ5Ð~ÔiÃlÌ!9Â Æ5ÒÕé!Äªý
Í äÊ×ýÒ
ÚªÔÆ5ÒÌïýWÍëËJÆ5ÐÙiêxêªáâCÙ0ÍáÆJÔié!ÒæÆÅhÑiÆ5ÚÙ0ésÔlÄªÍÍâª®
Æ íÎIÕCîZî#ÏIÎÚªÔlÎÙiÂÏÌÂÏÌèÍâCÆJóCÅÆ5Ð~Æ5ÚCÂxÌªÃÒæÆ5Ð~ÍÂ¬ÔlÌïMë ­ Â¬Íâ
ÍâªÆNÅhÔié+ÔiÍãÒæÍÙiÌCÚCÂÏÌCÃ1ÂÏÌKÅÔÔlÎ8ÝEÕñâªÔlêÏÚCÂxÌªÃ ÔlÌCê¬íüÔlÌªÆNé!ÙiêÏê¸ÕñÍâªÆGÁ?ÁmâCÆ5ÄªÅhÂÏÒæÍÂxÐãÃlÂÏÑiÆ5Òó!ÂÏÐhôÂxÌªÃ1Äªó
P!ûJL

º+WY»&¼x½¾cFWX4¿6_bXZ_bÀ~W¼ÂÁgTYX\ÃÄZÀ~TYÅÆÄ4S?_bÅZÀÂÁg»&¼~ÁgÇvÈ~_WÀ~Ç©Ä

3
4
7
U,NE=t^.Z[f
/
2
/
/


4
7

/
7
5
4
/
2
/
/


3
7

/
7
5
3
/
2
/
/


3
95:T:;<>=?$@[B
  
 
  
4 / 84 3




 
M @[N,OQP,:;R6NES;@`UGV H N.We:
       
M @[N,OQP,:;R6NES;@`UGV L N.We:

 
M S;ZC<(\]O&^.:;<>RN.ST@CU
 
Ma @C@CU,NEb><&S
S3 T<><O(<&@[@


 



S3 TZ`U,c.<
/
/       
d STZCU
    
d STZ[WAW<>S
/
/
^7 .fAN.Z
 /      

g NEc.Z`:mhTZCO&:




i Z`O(NEfAZCO(V9	k g
  
  
i Z`O(NEfAZCO(Vjl,n ipo8g 4 /   
 
i Z`O(NEfAZCO(VjlAqrn o l        
i N*sGZC<
/ / / /
i WASTZC=<
i B,:_h;<>STB
l,OQuA<U a @C<

 
qZCS;<&R6NES;@`U

/
q:;W
ÁÂ¬ÃlÄªÅÆÇ · ÉOåJâªÆÆsÆ5Ð~ÍQÔiÓïÍÄªÅhÌCÂxÌªÃÔlÌãÙEÒÂÏÌªÃlêÏÆÒæáÂ¬ÍÐâïÕ	ôiÆÆóÂÏÌªÃîÍâCÆÔiÍâªÆÅhÒÄCÌCÐâCÙiÌªÃiÆ5ÚïëØäªÄCÎÎÙ-þ
Åh9Â Æ5ÚÂÏÌèÍæÆÅÎÒòÔiÓsÒÂ¬ÃlÌCÂ¬õÐÙiÌ	ÍêÏíEÂÏÎó!ÅÔÑiÆ5ÚÔiÅØÚªÆÃiÅhÙiÚªÆ5ÚãÒæÔlêÏÄªÍÂ¬ÔlÌêÏÆ5ÌªÃiÍâósÆÅÓ/ÔiÅhÎÙiÌCÐ~Æ
ó+ÆÅOÚªÔlÎÙiÂÏÌïÕªÙiÌCÚNó+ÆÅJÒáÂ¬ÍÐhâ"Ð~ÔlÌÊõ!ÃlÄªÅhÙ0ÍÂÏÔlÌïë
ÍâªÆé!ÙiêÏêòÙLésÆÍæÍæÆÅèÆÑ-ÙiêÏÄ!Ù0ÍÂ¬ÔlÌ3Íâ!ÙiÌúÎÔÑÂxÌªÃ"ÍæÔGÅÔÔlÎ ÛëåJâªÆ¸äÊ×HâªÆ5ÄªÅÂÏÒæÍÂÏÐÚªÔÆ5ÒÌïýWÍ&ÚªÔGÍâCÂÏÒë
åJâªÆÅhÆÓ½ÔiÅÆiÕbÄCÒÂÏÌªÃÍâª`Æ äÊ×úâªÆ5ÄªÅhÂxÒæÍÂÏÐØÅÆ5ÒÄCê¬ÍÒÂxÌê¬ÔlÌªÃiÆÅòó!êxÙiÌCÒëòÞÔlÌCÐ~ÆÅhÌCÂxÌªÃÍâªÆQõ!ÅhÒæÍÔiéÒæÆÅÑ0Ù0ÍÂ¬ÔlÌïÕ
ÂÏÎó!ÅÔÑiÆ5ÚãÒæÔlêÏÄªÍÂ¬ÔlÌ`ê¬Æ5ÌªÃiÍâCÒñáâªÆ5ÌÆ5ÌCÓ½ÔiÅhÐ~Æ5ÚâCÂÏêxê¤þðÐêÏÂÏÎEé!ÂÏÌªÃÂÏÒñÂxÌÍâªÆéÙiÐôÃiÅÔlÄCÌCÚïÕáÆOÚªÔ&ÌªÔiÍØâCÙÑiÆ
ÙÃiÔbÔÊÚ Æ~öÊó!êÏÙiÌCÙ0ÍÂ¬ÔlÌLÓ/ÔiÅÍâCÂÏÒëÖrÍÒÆÆ5ÎÒÍâCÙ0ÍÍâªÆèÃiÅÆÆ5ÚªíLáÙíLÂÏÌGáâCÂxÐhâLÆ5ÌªÓ½ÔiÅÐ~Æ5Ú(âCÂÏêÏê¤þðÐêxÂÏÎîéÂÏÌªÃ
é!ÄCÂxêÏÚCÒÂ¬ÍÒ#ó!êÏÙiÌ!Ò#ÂÏBÒ ³æÄ!ÒæÍ#ésÆÍæÍæÆÅÒÄCÂ¬ÍæÆ5ÚNáâªÆ5ÌçÚCÂÏÒÍÙiÌCÐ~ÆÆ5ÒæÍÂÏÎÙ0ÍæÆ5ÒOÙ0ÅÆîÐÙiÄªÍÂÏÔlÄCÒÕCÂëWÆië¬Õ!êÏÔáë
ÞÔlÌ!ÒÂÏÚªÆÅãÍâªÆLÓ/ÔlÄªÅçÐ~ÔlêÏÄCÎ`ÌCÒ`ÂÏÌ7ÍâªÆ ÎÂÏÚCÚ!ê¬ÆçÔiÓEÁÂ¬ÃlÄªÅhÆúÇ · ÕOâ!ÂÏêÏê¤þðÐêÏÂxÎîé!ÂxÌªÃLÑiÆÅÒÄCÒÆ5ÌªÓ/ÔiÅhÐ~Æ5Ú
âCÂÏêxê¤þðÐêÏÂÏÎEé!ÂÏÌªÃªëEåJâªÆÅÆÙ0ÅÆãÎÙiÌ	í(ÐÙiÒæÆ5ÒîáâªÆÅÆÍâCÆ`ÚCÂ sÆÅÆ5ÌbÍÒæÆ5Ù0ÅhÐhâúÒæÍæÅhÙ0ÍæÆÃií(ÅÆ5ÒhÄCê¬ÍÒÂÏÌ(ÒâCÔiÅÍæÆÅ
ó!êÏÙiÌ!ÒMë ­(Æõ!ÃlÄªÅÆÍâCÙ0ÍÍâCÂÏÒ#ÂÏÒ#ÚCÄCÆÍæÔÍâCÆîÚCÂ sÆÅÆ5ÌbÍóêÏÙ0ÍæÆ5ÙiÄçésÆ5âCÙ5ÑÊÂ¬ÔiÅ#ÍâCÙ0Í#ÍâCÆÒæÆ5Ù0ÅhÐhâLÎÆÍâªÔÊÚCÒ
Æ~öªâCÂ¬é!Â¬ÍÕÂëWÆië¬ÕÊÍâªÆ5Â¬ÅQésÆ5âCÙ5ÑÊÂ¬ÔiÅQÂÏ
Ì Ù0ÍQÅÆÃlÂ¬ÔlÌCÒÔiÓ=ÍâªÆÒæÆ5Ù0ÅÐhâçÒæó!ÙiÐ~Æi¾ë ÌñÌªÓ/ÔiÅhÐ~Æ5Ú{âCÂÏêÏê¬þðÐêÏÂÏÎEé!ÂÏÌªÃÆ5Ì	ÍæÆÅÒ
Ùúó!êÏÙ0ÍæÆ5ÙiÄAÒæÔlÎÆáâªÆÅhÆiÕJósÆÅÓ½ÔiÅÎÒ`Ð~ÔlÎóê¬ÆÍæÆGÒÆ5Ù0ÅhÐhâAÓ/ÔiÅ{ÙúÒæÍÙ0ÍæÆ áÂ¬Íâ7ésÆÍæÍæÆÅãÆÑ0ÙiêÏÄCÙ0ÍÂ¬ÔlÌ=ÕÙiÌCÚ
ÙiÚCÚCÒQÍâCÆîÒâªÔiÅÍæÆ5ÒÍ#ó!Ù0ÍâçÍæÔÍâCÙ0ÍOÒæÍÙ0ÍæÆÍæÔ`Â¬ÍÒÐÄªÅÅÆ5ÌbÍ#ó!êÏÙiÌ{óCÅhÆ~õCö+Më ­ âªÆ5ÌNâCÂxêÏê¤þðÐêÏÂÏÎEé!ÂÏÌCÃÆ5Ì	ÍæÆÅÒÙ
ó!êÏÙ0ÍæÆ5ÙiÄ=ÕÂ¬ÍQÒæÍæÅÔlêxêÏÒñÙ0ÅÔlÄ!ÌCÚãÎÔiÅÆOÔiÅQê¬Æ5ÒÒØÅhÙiÌCÚCÔlÎê¬íiÕÊÄCÌ	ÍÂxê!Â¬ÍâCÂ¬ÍÒÙEÒæÍÙ0ÍæÆáÂÏÍâésÆÍæÍæÆÅQÆÑ-ÙiêÏÄ!Ù0ÍÂ¬ÔlÌïÕ
ÔiÅãâ!ÙiÒÆ5ÌªÔlÄªÃlâÔiÓÂÏÍÙiÌCÚìÅÆ5ÒÍÙ0ÅÍÒë7ÝêÏê#ÍâCÆ"ÙiÐ~ÍÂ¬ÔlÌCÒ`ÔlÌÂ¬Í?Ò ³æÔlÄªÅhÌCÆíúÍæÔ1ÍâCÆNésÆÍæÍæÆÅãÒæÍÙ0ÍæÆ Ù0ÅÆ
ôiÆóCÍÂÏÌüÍâªÆõÌ!ÙiêØóêÏÙiÌïë(ÖpÌ ïñÓbòFÕzÏÕØÍâªÆçó!âªÆ5ÌCÔlÎÆ5ÌªÔlÌKÂÏÒ&ÍâCÂÏÒë3Ö»ÓÙLóêÏÙiÌCÌªÆÅèÐhâªÔÔlÒæÆ5ÒÍæÔ(ÅhÆ5ÒæÆÍ
ÍâªÆÐ~ÔlÄCÌbÍæÆÅÔlÌ Íâª¡
Æ  OÞQË é+ÆÓ/ÔiÅÆèÂ¬ÍÐhâªÔÔlÒæÆ5ÒÍæÔçÅhÆáÂÏÌCÚLÍâªÆÎÔÑÊÂ¬x
Æ SÂÏÌCÂÏÍÂÏÙiêÏê¬íiÕsÌªÆ5Â¬ÍâªÆÅâªÆ5ÄCÅhÂÏÒæÍÂÏÐ
ÎÙ0ôiÆ5Ò#ÙèÚCÂÏÒÍÂÏÌCÐ~ÍÂ¬ÔlÌ`é+ÆÍ»áØÆÆ5Ì{ÍâCÆ5ÒæÆOÍ»áØÔÙiÐ~ÍÂÏÔlÌCIÒ ÕÊÍâªÆ5Ì{Â¬ÍQâCÙiÒÍæÔ&ÅhÆ5ÒæÆÍQÍâªÆÐ~ÔlÄ!Ì	ÍæÆÅJÙ0ÃlÙiÂÏÌ=ëòåJâªÆ
Æ5ÌªÓ/ÔiÅhÐ~Æ5Ú3â!ÂÏêÏê¤þðÐêÏÂxÎîé!ÂxÌªÃó!êÏÙiÌ!ÌªÆÅhÒÙiê¬áQÙ5íÊÒÅhÆ5ÒæÆÍîÍâªÆãÐ~ÔlÄCÌ	ÍæÆÅEõ!ÅhÒÍëãåJâªÆâ!ÂÏêÏê¤þðÐêÏÂxÎîé!ÂxÌªÃ`ó!êxÙiÌCÌªÆÅhÒÕ
P!ûEI

S6TU<U<VWYXZX\[^]`_ba+_bc

ÔlÌ7ÍâªÆ"ÔiÍâªÆÅ{âCÙiÌCÚ=Õ#ÅhÙiÌCÚªÔlÎêÏíüÐâªÔbÔlÒÆLÆ5Â¬ÍâCÆÅãÔiÅhÚCÆÅhÂÏÌªÃ(áÂÏÍâìÆ5ûÄCÙiêó!ÅÔié!Ù0é!ÂÏêxÂ¬Íðíië ÝOÒÒÙiÂÏÚ7ÂÏÌ
äÆ5Ð~ÍÂ¬Ôl
Ì ë · ëÏÇ0ÕâCÂÏêÏê¤þðÐêxÂÏÎîéÂÏÌªÃèáÙiÒÃlÂ¬ÑiÆ5ÌLõ!ÑiÆèÍæÅhÂ¬Æ5ÒÔlÌGÆ5ÙiÐhâ(ÍÙiÒôÕBÙiÌ!ÚLÅhÆ5ÒÄCê¬ÍÒÙ5ÑiÆÅhÙ0ÃiÆ5Ú=ë&ÖpÌLõ!ÑiÆ
ÍæÅhÂ¬Æ5Ò5ÕÙ0ÅÔlÄ!ÌCÚìâCÙiê¬ÓÔiÓÍâªÆ"ÒæÔlêxÄªÍÂ¬ÔlÌCÒÄCÒÆNÍâªÆ"Ð~ÔiÅÅhÆ5Ð~Í`ÔiÅhÚªÆÅÂÏÌªÃªÕØÒhÄCÐhâÍâCÙ0ÍÕQÓ½ÔiÅÙiêÏê#ÍÙiÒæôÊÒÕQÍâªÆ
Ù5ÑiÆÅÙ0ÃiÆîÑ0ÙiêÏÄªÆÂÏÒQê¬ÔáÆÅ#ÍâCÙiÌ{ÍâªÆÐ~ÔiÅÅÆ5Òó+ÔlÌ!ÚCÂÏÌªÃEÑ-ÙiêÏÄCÆOÓ/ÔiÅ#ÍâªÆÆ5ÌªÓ/ÔiÅhÐ~Æ5ÚçâCÂÏêÏê¬þðÐêÏÂÏÎEé!ÂÏÌªÃó!êxÙiÌCÌªÆÅhÒë
ÁÂÏÌCÙiêxê¬íiÕbáÆÐ~ÔlÎó!Ù0ÅÆÐ~ÔlÌCÒhÂÏÚªÆÅhÙ0ÍÂ¬ÔlÌÔiÓBÙiêxê+ÙiÐ~ÍÂÏÔlÌCÒQÑiÆÅhÒÄCÒQÐ~ÔlÌCÒhÂÏÚªÆÅhÙ0ÍÂ¬ÔlÌãÔiÓBÔlÌ!ê¬íÍâªÆâªÆ5ê¬ó!Ó/ÄCê
ÔlÌªÆ5ÒÕ	ÅÆ5ÒÄCê¬ÍÒÚªÆóÂÏÐ~ÍæÆ5ÚÂÏÌ&ÍâªÆ#ÅhÂ¬ÃlâbÍÎÔlÒæÍÓ/ÔlÄªÅòÐ~ÔlêÏÄ!ÎÌCÒ?ÔiÓ+ÁÂ¬ÃlÄCÅÆ!Ç ëòÞQÔlÎÂÏÌªÃÙé!Â¬ÍÄCÌªÆ~öÊósÆ5Ð~ÍæÆ5ÚïÕ
ÍâªÆÅÆèÂÏÒOÔlÌCê¬íçÔlÌªÆèÒÂÏÌCÃlê¬ÆîÐÙiÒæÆèáâªÆÅhÆEÒæÔlêÏÄCÍÂ¬ÔlÌ"ê¬Æ5ÌCÃiÍâ"ósÆÅÓ/ÔiÅhÎÙiÌCÐ~Æ&ÂÏÒÚªÆÃiÅhÙiÚªÆ5ÚGéíçÍÄªÅhÌCÂÏÌCÃÔlÌ
âªÆ5ê¬ó!Ó/ÄCêØÙiÐ~ÍÂ¬ÔlÌCÒëKåJâCÂxÒ&ÂxÌCÚCÂÏÐÙ0ÍæÆ5Ò&ÍâCÙ0ÍÍâªÆNÙiÐ~ÍÂÏÔlÌCÒèÔlÌKÍâªÆNÒâªÔiÅhÍæÆ5ÒæÍèó!Ù0ÍâIÍæÔ(ÍâªÆ{ÃiÔlÙiêJÙ0ÅÆiÕÂÏÌ
ÓSÙiÐ~ÍÕÊÄ!ÒÄCÙiêÏê¬íÐ~ÔlÌCÒhÂÏÚªÆÅÆ5ÚãâªÆ5ê¬óCÓSÄCKê ÊAÄ!ÌCê¬Æ5Ò2Ò GbÒæÔlêxÄªÍÂ¬ÔlÌóÙ0ÍâCÒØÙ0ÅhÆOÍâªÅhÔáÌÙ5áQÙ5íiÕ!ÙiÒQÂÏÒÒæÔlÎÆÍÂxÎÆ5Ò
ÍâªÆÐÙiÒæÆãÔlÌ!ê¬íGÂxÌ1Íâª÷
Æ ç¾ÎIÕzÏ@éÐIß<×@ÏÛMÓFÎ&ÑÜGÙiÌCÞ
Ú ç6êbÑgÑAÜ~ÓFìFÏIÎîÚCÔlÎÙiÂÏÌCÒz
ë ¢Ä!Â¬ÍæÆÍâªÆ`ÔiÍâCÆÅEáQÙ5í3Ù0ÅhÔlÄCÌCÚ
ÍâCÙiÌúÔlÌªÆãÒhâªÔlÄCêÏÚ(Íâ!ÂÏÌªô+ÕóCÅÄCÌCÂÏÌªÃ{ÍâªÆÒæÆ5Ù0ÅhÐâüÒó!ÙiÐ~Æ`áÂÏÍâ3âªÆ5ê¬ó!Ó/ÄCêÙiÐ~ÍÂÏÔlÌCÒèÒæÔlÎÆÍÂÏÎÆ5Ò&ê¬Æ5ÙiÚCÒîÍæÔ
ÒÂ¬ÃlÌ!Â¤õÐÙiÌbÍê¬íGÒhâªÔiÅÍæÆÅEÒÔlêÏÄªÍÂ¬ÔlÌ(óêÏÙiÌCÒÕ=Æ5Òó+Æ5ÐÂxÙiêÏê¬íGáâªÆ5Ì(ÍâªÆÄCÌCÚªÆÅê¬íÂxÌªÃÒÆ5Ù0ÅhÐhâüÎÆÍâªÔÊÚ3ÂÏÒîâCÂÏêÏê¤þ
ÐêÏÂÏÎEé!ÂÏÌCÃªëåJâªÔlÄCÃlâÍâCÂÏÒòÎ`Ù5íÒæÔlÄCÌ!Úèó!Ù0ÅhÙiÚªÔöÊÂÏÐÙiê¸Õ	ÍâªÆÅÆÂÏÒòÙÒhÂÏÎó!ê¬ÆQÆ~öÊó!êÏÙiÌCÙ0ÍÂÏÔlÌÍæÔEÂ¬ÍëñÞÔlÌ!ÒÂÏÚªÆÅ
áâCÙ0ÍáÆÒÙiÂÏÚ Ù0ésÔÑiÆ`Ù0ésÔlÄªÍÍâªÆèó!êxÙ0ÍæÆ5ÙiÄ é+Æ5â!Ù5ÑÊÂ¬ÔiÅÔiÓØâCÂxêÏê¤þðÐêÏÂÏÎEé!ÂÏÌCÃªÕCÅhÙiÌCÚªÔlÎ`ê¬í"ÙiÚCÚCÂxÌªÃÙiÐ~ÍÂÏÔlÌCÒ
ÍæÔ{ÍâªÆèÐÄªÅÅÆ5ÌbÍOóêÏÙiÌLÂxÌ"ÍâªÆèÒæÆ5Ù0ÅhÐâ Ó½ÔiÅÙãésÆÍæÍæÆÅÒæÍÙ0ÍæÆiëÖ»ÓØÒÄCÐhâGÙ{ÒæÆ5Ù0ÅhÐâ Æ5ÌªÃlÂÏÌªÆ&ÂÏÒOÙ0ÅÎÆ5ÚGáÂ¬Íâ
ÍâªÆâCÆ5ê¬óCÓSÄCêbÙiÐ~ÍÂÏÔlÌCÒñÒÄ!ÐÐ~Æ5ÒÒæÔiÅhÒØÐhâªÔlÂÏÐ~ÆiÕbÓ½ÔÊÐÄCÒÂxÌªÃÂ¬ÍòÂÏÌbÍæÔÍâªÆÚCÂÏÅÆ5Ð~ÍÂ¬ÔlÌèÔiÓsÍâªÆ#ÃiÔlÙiêÏÒÕÊÂ¬ÍòÎÂÏÃlâ	ÍáÆ5êÏê
ÍÙ0ôiÆEêÏÆ5ÒÒJÒæÍæÆó!ÒJÍæÔõÌCÚ{ÍâªÆáQÙ5íç<Ô 1Ùèó!êxÙ0ÍæÆ5ÙiÄïë

£¤¥¦¨§_©«ª,¦¨¬®­°¯8±A²

åJâªÆ(ÎÔlÒÍ{ÂxÎósÔiÅÍÙiÌ	ÍçÐ~ÔlÌCÌCÆ5Ð~ÍÂ¬ÔlÌCÒ{ÔiÓîÍâCÆ ÁÁ Ù0óCóCÅhÔlÙiÐhâøÍæÔìÎÆÍâCÔÚªÔlêÏÔiÃlÂ¬Æ5ÒÅÆósÔiÅÍæÆ5ÚøÂÏÌAÍâªÆ
êÏÂ¬ÍæÆÅÙ0ÍÄªÅÆÙ0ÅÆÍâªÆîÓ½ÔlêÏêÏÔáÂÏÌCÃªÉ
¹ äÊ×ýÒé!ÙiÒÂxÐÂÏÚªÆ5Ù{ÔiÓ#Ó/ÔiÅáQÙ0ÅhÚ1ÒæÍÙ0ÍæÆ{Òæó!ÙiÐ~Æ`ÒÆ5Ù0ÅhÐhâüÙiÌCÚ3âCÆ5ÄªÅhÂÏÒæÍÂxÐEÆÑ0ÙiêÏÄCÙ0ÍÂÏÔlÌ(ébí1ÂÏÃlÌªÔiÅhÂÏÌªÃ
ÚCÆ5ê¬ÆÍæÆîêÏÂÏÒÍÒÉS ÛØÔlÌCÆÍ?^ Æï ÌªÆÅ5Õ=Ç!b ë

¹ åâªÆèÑÂ¬ÆáHÔiÓØÔlÄªÅâªÆ5ÄªÅhÂÏÒÍÂÏÐîÙiÒÙ{ÒæósÆ5ÐÂÏÙiê?ÐÙiÒæÆÔiÓËÝ×{×ñÜÝ} SÛQêÏÄCÎk ÁCÄªÅhÒæÍÕØÇ!¶bÕ
ÙiÌ!ÚNÂ¬ÍÒJÐ~ÔlÌCÌCÆ5Ð~ÍÂ¬ÔlÌçÍæÔo äÊ×JýÒâªÆ5ÄªÅhÂÏÒÍÂÏÐÎÆÍâªÔÊÚïë
¹ åâªÆÒhÂÏÎÂÏêÏÙ0ÅÂ¬Íðí&ÔiÓ=ÍâªÆâªÆ5ê¬ó!Ó/ÄCê!ÙiÐ~ÍÂ¬ÔlÌCÒQâªÆ5ÄªÅhÂxÒæÍÂÏÐ#ÍæÔµðGÐùOÆÅÎÔiÍæÍýÒ#ÓSÙ5ÑiÔiÅÆ5ÚçÙiÐ~ÍÂ¬ÔlÌ!Ò6pÇ! ° Õ
ÙiÌ!ÚçÍæÔ`Â¬ÅÅhÆ5ê¬ÆÑ-ÙiÌ!Ð~ÆÚªÆÍæÆ5Ð~ÍÂ¬ÔlÌ"ÎÆ5ÐhâCÙiÌCÂxÒÎÒÉ }OÆé+Æ5ê=ÆÍÙiêë¬ÕBÇ!bâ ë
¹ åâªÆçÂÏÌCÒæó!ÂÏÅhÙ0ÍÂ¬ÔlÌúÔiÓÍâªÆNÙiÚCÚCÆ5ÚKÃiÔlÙiêJÚªÆ5ê¬ÆÍÂ¬ÔlÌKâªÆ5ÄCÅhÂÏÒæÍÂÏÐãéí3áÔiÅôüÚCÔlÌªÆ{ébíüßÔbÆ5â!ê¬ÆÅÙiÌCÚ
O Ô<ï ÎÙiÌCÌá0 ÈiÈiÈiÙÖ ÕïÙiÌCÚçÍâCÆÙiÚCÙ0óCÍÂ¬ÔlÌçÔiÓÍâªÆÃiÔlÙiêÙ0ÃiÆ5ÌCÚCÙÙ0ó!óCÅÔlÙiÐhâ S ßÔÆ5âCê¬ÆÅ5Õ=Ç!b ë
¹ åâªÆ`ÙiÚCÙ0óCÍÂÏÔlÌ(ÔiÓQÖr×Ø×JýÒÝùÜóCÅhÆóCÅÔÊÐ~Æ5ÒÒÂÏÌªÃ{ó!â!ÙiÒæÆ\SßÔÆ5âCê¬ÆÅ Ô<ïÎÙiÌCÌïÕM0ÈiÈiÈ0é/ÕÂÏÌÊþ
Òó!Â¬ÅÆ5Ú{éíÂxÚªÆ5ÙiÒ#Ó/ÅÔlÎ  Ù< Æ5ÌLÙiÌCÚNßÌªÔiéê¬ÔÐhô4p Ç!bâ ë
­(ÆLâ!Ù5ÑiÆLÚ!ÂÏÒÐÄCÒÒÆ5ÚIÙiêÏê#ÔiÓÍâªÆ5ÒæÆ"Ð~ÔlÌ!ÌªÆ5Ð~ÍÂ¬ÔlÌCÒãÂÏÌIÍâªÆNÅhÆ5ÒæósÆ5Ð~ÍÂ¬ÑiÆ"ÒæÆ5Ð~ÍÂ¬ÔlÌ!Ò`Ùiê¬ÅÆ5ÙiÚCíië äÔ3êÏÆÍ`ÄCÒ
Ó/ÔÐÄCÒÔlÌ1ÙNÐ~ÔlÌCÌªÆ5Ð~ÍÂÏÔlÌ(ÍâCÙ0ÍîâCÙiÒEÌªÔiÍíiÆÍîésÆÆ5Ì(ÎÆ5ÌbÍÂ¬ÔlÌªÆ5Ú=ëÖ»Íâ!ÙiÒésÆÆ5Ì(ÅÆ5Ð~ÔiÃlÌCÂ9 Æ5ÚúÙ0Ó½ÍæÆÅEÍâªÆ
õ!ÅhÒÍó!êÏÙiÌCÌCÂxÌªÃÐ~ÔlÎó+ÆÍÂÏÍÂ¬ÔlÌ1Ù0ÍîÝOÖr×QäbþhÇ!ç
 Íâ!Ù0ÍÍâªÆ`ÎÙiÂxÌ(ésÔiÍæÍê¬Æ5ÌªÆ5Ðô(ÂÏÌ
 äÊ×OÇÂÏÒÍâªÆÅhÆ5Ð~ÔlÎèþ

ó!ÄªÍÙ0ÍÂÏÔlÌ"ÔiÓòÍâCÆ&âªÆ5ÄCÅhÂÏÒæÍÂÏÐÔlÌLÆ5ÙiÐâ(ÒÂÏÌªÃlêÏÆEÒæÆ5Ù0ÅhÐâ ÒæÍÙ0ÍæÆiëå#áÔãÅÆ5Ð~Æ5ÌbÍÙ0óCóCÅÔlÙiÐâªÆ5ÒÙ0ÅÆèé!ÙiÒæÆ5ÚLÔlÌ
ÍâªÆèÔié!ÒæÆÅhÑ-Ù0ÍÂ¬ÔlÌGÍâCÙ0ÍÍâªÆ&ÅÆósÆ5Ù0ÍæÆ5Ú ÅÆ5Ð~ÔlÎóÄªÍÙ0ÍÂ¬ÔlÌ ÂÏÒÌªÆ5Ð~Æ5ÒÒÙ0Åhí"ésÆ5ÐÙiÄCÒæÆäª×Ç&ÚªÔbÆ5ÒÓ/ÔiÅáQÙ0ÅhÚ
ÒæÆ5Ù0ÅhÐâKáÂ¬ÍâüÙGÓ½ÔiÅáQÙ0ÅhÚüâªÆ5ÄªÅhÂxÒæÍÂÏÐ0ÕÂëWÆië¬Õ?ÍâªÆçÚCÂ¬ÅÆ5Ð~ÍÂ¬ÔlÌ!ÒîÔiÓÒÆ5Ù0ÅhÐhâIÙiÌCÚKâªÆ5ÄCÅhÂÏÒæÍÂÏÐ`Ù0ÅÆ{ÍâªÆÒhÙiÎÆië
åJâªÆ{ÙiÄªÍâªÔiÅÒEÔi`Ó äÊ×HÍâCÆ5ÎÒæÆ5ê¬ÑiÆ5ÒèÒæÍÂÏÐhô3ÍæÔ ÍâªÆ5Â¬ÅèâªÆ5ÄªÅÂÏÒæÍÂÏÐ0Õé!ÄªÍ&ÐhâCÙiÌCÃiÆçÍâªÆÒÆ5Ù0ÅhÐhâIÚCÂÏÅÆ5Ð~ÍÂ¬ÔlÌïÕ
ÃiÔlÂÏÌªÃãé!ÙiÐôáQÙ0ÅhÚCÒOÓ½ÅÔlÎ ÍâªÆEÃiÔlÙiê?Âxv
Ì äÊ×þ¸
Å SÛØÔlÌCÆ6Í  Æ ïÌªÆÅ5Õ!Ç bëåJâ!ÂÏÒ#áQÙ5íiÕsÍâªÆíNÌªÆÆ5ÚLÍæÔ
P!û.K

º+WY»&¼x½¾cFWX4¿6_bXZ_bÀ~W¼ÂÁgTYX\ÃÄZÀ~TYÅÆÄ4S?_bÅZÀÂÁg»&¼~ÁgÇvÈ~_WÀ~Ç©Ä

Ð~ÔlÎó!ÄCÍæÆáØÆ5ÂÏÃlâ	ÍÑ0ÙiêÏÄªÆ5ÒÔlÌCê¬íGÔlÌCÐ~ÆiÕÆ5ÒÍÂÏÎÙ0ÍÂÏÌªÃçÆ5ÙiÐâ3ÓSÙiÐ~ÍýÒ&ÚCÂÏÒæÍÙiÌCÐ~Æ`ÍæÔNÍâªÆ`ÂÏÌ!Â¬ÍÂÏÙiêÒæÍÙ0ÍæÆiÕÙiÌCÚ
ÔlÌCê¬íÒÄCÎ¿ÍâCÆáØÆ5Â¬ÃlâbÍÒÄCóNÓ½ÔiÅOÙÒæÍÙ0ÍæÆEêÏÙ0ÍæÆÅÚCÄªÅhÂxÌªÃ&ÒÆ5Ù0ÅhÐhâïë y
ËÆÓ/ÙiÌCÂxÚCÂÏÒQÙiÌC
Ú  êÏÙiâCÙ5Ñ0Ùi
Ò p!Ç bÂÏÌbÑiÆÅÍ#ÍâªÆÚCÂ¬ÅhÆ5Ð~ÍÂ¬ÔlÌÔiÓÍâªÆÉäÊ×ìâCÆ5ÄªÅhÂÏÒæÍÂxÐOÂÏÌ!ÒæÍæÆ5ÙiÚïë#­ âCÂÏê¬Æ
äÊ×KÐ~ÔlÎó!ÄªÍæÆ5ÒQÚCÂÏÒÍÙiÌCÐ~Æ5ÒñÃiÔlÂxÌªÃîÓ/ÅÔlÎ ÍâªÆOÐÄCÅÅÆ5ÌbÍÒæÍÙ0ÍæÆÍæÔáÙ0ÅhÚ!ÒØÍâCÆOÃiÔlÙiêÕ Ëå7ÃiÔbÆ5ÒQÓ/ÅÔlÎ ÍâªÆ
ÃiÔlÙiêØÍæÔ"Æ5ÙiÐhâüÓSÙiÐ~ÍëNåJâªÆÓSÄCÌCÐ~ÍÂÏÔlÌ(ÍâCÙ0ÍîÍâCÆ5Ì1Æ~öÊÍæÅhÙiÐ~ÍÒÕÓ/ÔiÅîÆ5ÙiÐhâKÒæÍÙ0ÍæÆ{ÚCÄªÅÂÏÌªÃ{Ó½ÔiÅháÙ0ÅhÚúÒæÆ5Ù0ÅhÐâïÕ
ÍâªÆ&ÒæÍÙ0ÍæÆ5ÒOâCÆ5ÄªÅhÂÏÒæÍÂxÐÆ5ÒæÍÂÏÎÙ0ÍæÆiÕ+ÄCÒæÆ5ÒJÍâCÆîóCÅÆÐ~ÔlÎó!ÄªÍæÆ5ÚGÚCÂÏÒæÍÙiÌCÐ~Æ5ÒÙiÒáÆ5êÏê=ÙiÒÒæÔlÎÆ&ÂÏÌªÓ/ÔiÅhÎÙ0ÍÂ¬ÔlÌ
ÔlÌçáâ!ÂÏÐhâ{ÓSÙiÐ~ÍÒáOÂÏêÏêóCÅÔié!Ù0é!êÏí`ésÆÙiÐhâCÂÏÆÑiÆ5Ú"ÒÂÏÎ&ÄCê¬ÍÙiÌCÆÔlÄCÒê¬íië
ÖpÌ	ÍæÆÅhÆ5ÒæÍÂÏÌªÃlê¬íiÕªÁÁüÅÆ5Ð~ÔlÎó!ÄCÍæÆ5ÒÕCêÏÂ¬ôi6Æ äª×ÕªÍâCÆâCÆ5ÄªÅhÂÏÒæÍÂxÐJÓ/ÅÔlÎ¿ÒÐ~ÅhÙ0ÍÐâçÔlÌ{Æ5ÙiÐhâLÒæÆ5Ù0ÅhÐhâçÒÍÙ0ÍæÆiÕ
é!ÄªÍJÌCÆÑiÆÅÍâªÆ5ê¬Æ5ÒÒÔlÄªÍæósÆÅÓ/ÔiÅhÎÒ#ÍâªÆîÔiÍâªÆÅOÙ0óCó!ÅÔlÙiÐhâªÆ5Ò5ëÝÒJáÆîâCÙÑiÆEÒæÆÆ5ÌLÂÏÌLäÆ5Ð~ÍÂ¬Ôl4
Ì ë · Õ!ÍâCÂxÒJÂÏÒ
Ó/ÔiÅJÍâªÆîÎÔlÒÍ#ó!Ù0ÅÍÚCÄCÆÍæÔãÁ?ÁýÒÒæÆ5Ù0ÅhÐâ"ÒæÍæÅhÙ0ÍæÆÃiíçÙiÌCÚNÍâªÆîâªÆ5ê¬ó!Ó/ÄCê+ÙiÐ~ÍÂ¬ÔlÌCÒóCÅhÄCÌ!ÂÏÌªÃîÍæÆ5ÐâCÌCÂÏûÄªÆië

³´¤¶µ¶¯8·5¸ §;¹5ºG»m¯8·¼©½·5¬¿¾z¹
ª,§_¯¯À²

­(ÆâCÙÑiÆóCÅÆ5ÒæÆ5ÌbÍæÆ5Ú(ÙiÌ(Ù0óCóCÅÔlÙiÐâ(ÍæÔçÚªÔlÎÙiÂÏÌ ÂÏÌ!ÚªÆósÆ5ÌCÚªÆ5ÌbÍó!êÏÙiÌ!ÌCÂÏÌªÃãÍâCÙ0ÍÕ=Ù0ÍÍâªÆèÍÂÏÎÆèésÆ5ÂÏÌªÃªÕ
ÔlÄªÍæósÆÅÓ/ÔiÅhÎÒÙiêÏêòÆ~öÊÂÏÒÍÂÏÌªÃ{ÍæÆ5ÐhâCÌCÔlê¬ÔiÃií(ÔlÌ(ÍâªÆ`Î`ÙFp³ ÔiÅhÂÏÍðí ÔiÓQÍâªÆÐÄªÅÅÆ5ÌbÍê¬í Ù5Ñ0ÙiÂÏêÏÙ0é!êÏÆé+Æ5Ì!ÐhâCÎÙ0Åhô
ÚªÔlÎÙiÂxÌCÒë#lö ÄCÒæÍØêÏÂ¬ôiÆJÍâªÆOáØÆ5êxêCôÊÌªÔáÌ¸ äª×ÇÒíÒæÍæÆ5ÎNÕÂ¬ÍñÅÆ5êÏÂ¬Æ5ÒòÐ~ÔlÎó!ê¬ÆÍæÆ5ê¬íÔlÌ`Ó½ÔiÅáQÙ0ÅhÚãÒæÍÙ0ÍæÆÒó!ÙiÐ~Æ
ÒæÆ5Ù0ÅhÐâ(ÙiÌCÚGâªÆ5ÄªÅhÂÏÒÍÂÏÐÆÑ0ÙiêÏÄCÙ0ÍÂ¬ÔlÌLÔiÓØÒÍÙ0ÍæÆ5Òébí"ÂÏÃlÌªÔiÅhÂÏÌªÃÚªÆ5ê¬ÆÍæÆèêÏÂÏÒæÍÒ5ë? ÌCêÏÂ¬ôiÆ® äª×Õ+ÍâªÆèÎÆÍâªÔÊÚ
ÄCÒæÆ5Ò`ÙÞ ËÝ×{ ×ñÜÝ}þðÒæÍ»íê¬ÆLÙiê¬ÃiÔiÅhÂ¬ÍâCÎ ÍæÔ(õÌCÚIÙiÌÆ~öó!êxÂÏÐÂ¬Í&ÅÆ5êÏÙ-öÊÆ5ÚìÒæÔlêÏÄªÍÂÏÔlÌKÍæÔ3Æ5ÙiÐhâ7ÒæÆ5Ù0ÅhÐâ
ÒæÍÙ0ÍæÆiëGåJâªÔlÒæÆÒæÔlêÏÄªÍÂ¬ÔlÌ!ÒÃlÂ¬ÑiÆ{Ù"ÎÔiÅÆ{ÐÙ0ÅÆÓSÄCêòÆ5ÒÍÂÏÎÙ0ÍÂ¬ÔlÌúÔiÓJÙ"ÒæÍÙ0ÍæÆiýÒÚ!Âã
 ÐÄCê¬Í»íiëçÝOÒ&ÙLÒÆ5Ð~ÔlÌCÚ
ÎÙFæ³ ÔiÅOÚCÂ9+ ÆÅÆ5Ì!Ð~ÆÍæÔ¸ äÊ×?ÕCÔlÄªÅÒæíÒÍæÆ5Î Æ5Îóê¬ÔíÊÒJÙ`ÌCÔÑiÆ5ê?ê¬ÔÐÙiêBÒæÆ5Ù0ÅhÐhâGÒæÍæÅhÙ0ÍæÆÃiíiÕïÐ~ÔlÎEé!ÂÏÌCÂxÌªÃâCÂÏêÏê¤þ

Ð êÏÂÏÎEé!ÂÏÌCÃáÂ¬ÍâÐ~ÔlÎó!ê¬ÆÍæÆJÒæÆ5Ù0ÅhÐâïëÁÂÏÌCÙiêÏê¬íiÕiÍâCÆJÎÆÍâªÔÊÚÎÙ0ôiÆ5ÒòÄCÒæÆ#ÔiÓ+ósÔáÆÅÓSÄCêÊâªÆ5ÄªÅhÂÏÒÍÂÏÐñó!ÅhÄCÌCÂÏÌCÃ
ÍæÆ5Ðhâ!ÌCÂÏûÄªÆ5ÒÕªáâCÂxÐhâçÙ0ÅÆéÙiÒæÆ5ÚçÔlÌçÆ~öªÙiÎÂÏÌCÂxÌªÃèÅÆ5êÏÙ-öÊÆ5ÚNÒæÔlêÏÄªÍÂÏÔlÌCÒë
ÝÒ&áØÆ{âCÙ5ÑiÆçÎÆ5ÌbÍÂ¬ÔlÌªÆ5ÚüÆ5Ù0ÅhêxÂ¬ÆÅ5ÕÔlÄªÅèÂÏÌ	ÍÄ!Â¬ÍÂ¬ÔlÌ3ÂxÒîÍâCÙ0Í&ÍâªÆÅÆ5ÙiÒæÔlÌCÒ&Ó/ÔiÅÁ?ÁýÒ&Æ ãÐÂ¬Æ5Ì!Ð~í3êÏÂ¬Æ
ÂÏÌ ÒæÍæÅhÄ!Ð~ÍÄªÅhÙiê?óCÅÔiósÆÅÍÂ¬Æ5ÒÍâCÙ0ÍÍâªÆÐÄCÅÅÆ5ÌbÍóêÏÙiÌCÌCÂÏÌCÃ`ésÆ5ÌCÐhâ!ÎÙ0ÅôÊÒOÍæÆ5Ì!Ú ÍæÔNâCÙ5ÑiÆiëèÝOÒÙçÎ`Ù0ÍæÍæÆÅ
ÔiÓÓ/ÙiÐ~ÍÕ?ÍâªÆÒÂÏÎó!êÏÂÏÐÂ¬Í»íçÔiÓØÍâCÆé+Æ5Ì!ÐhâCÎÙ0ÅhôÒûÄCÂ¬ÍæÆÂÏÎ`ÎÆ5ÚCÂÏÙ0ÍæÆ5ê¬íLÎÆÆÍÒÍâªÆÆíiÆiÕ?ÔlÌCÐ~ÆÔlÌªÆ`ÍæÅhÂ¬Æ5Ò
ÍæÔKê¬ÔbÔiôIÓ/ÔiÅ{Â¬ÍëøÖ»ÍÒâªÔlÄCêxÚìésÆ"Ðê¬Æ5Ù0ÅÍâCÙ0ÍÍâªÆ íÎIÕCîZî#ÏIÎÍÙiÒæôÊÒÕJáâCÆÅÆLÒæÔlÎÆ"é!ÙiêÏêxÒ`ÌªÆÆ5Ú7ÍæÔúésÆ
ÍæÅhÙiÌCÒó+ÔiÅhÍæÆ5ÚúÓ/ÅÔlÎ ÔlÌªÆçÅhÔbÔlÎ ÍæÔ1ÙiÌªÔiÍâCÆÅ5ÕØÆ~öªâCÂ¬éÂ¬ÍEÙ ÍæÔiÍÙiêÏêÏíúÚCÂ sÆÅÆ5ÌbÍÒæÆ5Ù0ÅhÐhâÒæó!ÙiÐ~ÆNÒæÍæÅhÄ!Ð~ÍÄªÅÆ
ÍâCÙiÌïÕ	Ó½ÔiÅØÆ~öÊÙiÎóê¬ÆiÕ	âCÙ0ÅhÚèÅÙiÌCÚªÔlÎ äÊÝåÂÏÌCÒæÍÙiÌCÐ~Æ5Ò5ëåâªÆÅÆÓ/ÔiÅÆiÕ	Â¬ÍýÒòÂxÌ	ÍÄCÂÏÍÂ¬ÑiÆ5ê¬íEÄ!ÌCÒÄªÅó!ÅhÂÏÒÂÏÌCÃ#ÍâCÙ0Í
ÚCÂ sÆÅÆ5ÌbÍîÒæÆ5Ù0ÅhÐâúÎÆÍâªÔÚ!ÒîÙ0ÅÆÙ0óCóCÅÔióCÅÂÏÙ0ÍæÆÓ/ÔiÅîÍâªÆãÓ½ÔiÅhÎÆÅîÍÙiÒæôÊÒîÍâ!ÙiÌúÙ0ÅÆãÍæÅhÙiÚCÂ¬ÍÂÏÔlÌCÙiêÏê¬íGÄCÒæÆ5Ú
Ó/ÔiÅÍâCÆêÏÙ0ÍæÍæÆÅëñåJâªÆOÆ ãÐÂ¬Æ5ÌCÐ~íÔiÓ?ÁÁ3ÔlÌ{ÎÙiÌbíÔiÓ=ÍâªÆésÆ5ÌCÐâCÎÙ0ÅôÊÒØÐÙiÌésÆÒæÆÆ5Ì{ÙiÒØóÄªÍæÍÂÏÌªÃEÍâCÙ0Í
Ôié!ÒæÆÅhÑ-Ù0ÍÂ¬ÔlÌNÍæÔÍâªÆîÒÄCÅÓ/ÙiÐ~Æië
åÔãÎÙ0ôiÆEÆ~öóêÏÂÏÐÂ¬Í#ÍâªÆ&â	íósÔiÍâªÆ5ÒæÆ5ÒOÒæÍÙ0ÍæÆ5ÚLÙ0ésÔÑiÆiÕáÆEâCÙÑiÆ&ÂxÌ	ÑiÆ5ÒæÍÂÏÃlÙ0ÍæÆ5Ú"ÍâªÆEÒæÍÙ0ÍæÆ&Òó!ÙiÐ~Æ5ÒÔiÓ
ÍâªÆó!êxÙiÌCÌCÂÏÌªÃ&ésÆ5ÌCÐhâ!ÎÙ0ÅôÊÒëÁªÔlêÏê¬ÔáÂÏÌªÃÁªÅÙiÌªôãÆÍOÙiê`ë p!Ç bâÕ!áÆîâCÙÑiÆîÐ~ÔlêÏê¬Æ5Ð~ÍæÆ5Ú"Æ5Îó!Â¬ÅÂÏÐÙiêsÚCÙ0ÍÙÊÕ
ÂÏÚªÆ5ÌbÍÂ¬Ó/íÂxÌªÃãÐâCÙ0ÅhÙiÐ~ÍæÆÅhÂÏÒÍÂÏÐ&ó!Ù0ÅhÙiÎÆÍæÆÅhÒÓ/ÔiÅÚCÂ sÆÅÆ5ÌbÍôÂÏÌ!ÚCÒJÔiÓó!êÏÙiÌCÌ!ÂÏÌªÃÍÙiÒæôÊÒÕ=êÏÂÏôiÆ&ÍâCÆèÚCÆ5ÌCÒÂ¬Í»í
ÙiÌCÚçÒgÂ ÆÔiÓêÏÔÐÙiêïÎÂxÌCÂÏÎÙ&ÙiÌCÚ{ó!êÏÙ0ÍæÆ5ÙiÄ!ÒJÂÏÌ{ÍâªÆÒæÆ5Ù0ÅÐhâ"Òó!ÙiÐ~ÆiëñåJâCÂxÒâ!ÙiÒJê¬Æ5ÙiÚNÄCÒQÍæÔãÙÍÙ-öÔlÌCÔlÎîí
Ó/ÔiÅ#ó!êÏÙiÌCÌCÂxÌªÃEÚªÔlÎ`ÙiÂÏÌCÒÕÊÚCÂ¬ÑÊÂÏÚCÂÏÌCÃÍâªÆ5Î éíãÍâªÆÚªÆÃiÅhÆÆÔiÓÐ~ÔlÎó!êÏÆ~öÊÂ¬Í»í`ÍâCÙ0Í#ÍâCÆÅÆ5ÒæósÆ5Ð~ÍÂ¬ÑiÆÍÙiÒæô+ýÒ
ÒæÍÙ0ÍæÆîÒó!ÙiÐ~Æ5ÒQÆ~öÊâ!Â¬é!Â¬ÍáÂ¬ÍâÅÆ5ÒæósÆ5Ð~ÍQÍæÔÅÆ5êÏÙ-öÊÆ5Ú{ÃiÔlÙiê=ÚCÂxÒæÍÙiÌCÐ~Æ5Òë ðLÔlÒæÍ#ÔiÓBÍâCÆÐÄªÅÅÆ5ÌbÍQé+Æ5Ì!ÐhâCÎÙ0Åhô
ÚªÔlÎÙiÂxÌCÒØÙ0ó!ó!Ù0ÅÆ5ÌbÍê¬íésÆ5ê¬ÔlÌªÃîÍæÔèÍâª
Æ æÒÂÏÎó!ê¬Æ>Å îó!Ù0ÅÍÒÔiÓ=ÍâCÙ0ÍÍÙ-öÔlÌCÔlÎî
í A<Ô ïÎÙiÌCÌ=ÂÕ 0ÈiÈªÇ ¾ë ­(Æ
ÙiêÏÒæÔÙ0ó!óCÅÔlÙiÐhâÔlÄªÅòâ	íósÔiÍâªÆ5ÒæÆ5ÒÓ/ÅÔlÎuÙÍâCÆÔiÅÆÍÂÏÐÙiêªósÔlÂÏÌbÍÔiÓÑÊÂ¬ÆáÕláOâªÆÅÆQáØÆJÎÆ5ÙiÒÄªÅÆ#ÍâªÆJÚCÆÃiÅÆÆ
ÔiÓÂxÌ	ÍæÆÅhÙiÐ~ÍÂÏÔlÌEÍâ!Ù0Í?ÓSÙiÐ~ÍÒÂÏÌ&Ùó!êÏÙiÌCÌCÂxÌªÃJÍÙiÒæôEÆ~öÊâCÂÏé!Â¬ÍÕ0ÙiÌCÚèÚªÅhÙ5áIÐ~ÔlÌCÐêxÄCÒÂ¬ÔlÌCÒBÔlÌèÍâªÆQÒæÆ5Ù0ÅhÐhâÒó!ÙiÐ~Æ
ÒæÍæÅhÄ!Ð~ÍÄªÅÆ`Ó/ÅÔlÎ ÍâCÙ0Íë àÄCÅîÃiÔlÙiêQÂÏÌ1Íâ!Ù0ÍEÅÆ5ÒÆ5Ù0ÅhÐhâüÂÏÒEÍæÔGÚªÆÑÊÂÏÒæÆãÙLÎÆÍâCÔÚ3ÍâCÙ0Í&ÙiÄCÍæÔlÎÙ0ÍÂÏÐÙiêÏê¬í
ÚªÆ5ÐÂÏÚCÆ5Ò#áâCÂÏÐâ{ó!Ù0ÅÍ#ÔiÓ?ÍâªÆÍÙ-öÊÔlÌªÔlÎEíNÙÃlÂ¬ÑiÆ5Ìçó!êxÙiÌCÌCÂÏÌªÃ&ÍÙiÒæô{ésÆ5ê¬ÔlÌªÃlÒQÍæÔªë
ÖpÌ1ÍâCÙ0Í&Ð~ÔlÌ	ÍæÆ~öÊÍÕÍâªÆÅÆãÙ0ÅÆãÒæÔlÎÆ`ÅÆ5ÎÙ0ÅhôÒîÍæÔ"ésÆ`ÎÙiÚªÆ`ÔlÌ1áâCÙ0Í&ÝÖó!êxÙiÌCÌCÂÏÌªÃ{ÅÆ5ÒÆ5Ù0ÅhÐhâüÂÏÒ
âªÆ5ÙiÚCÂxÌªÃ Ó½ÔiÅ5ë7àÄªÅósÔlÂÏÌ	ÍèÔiÓÑÂÏÆá ÂÏÒèÍâCÙ0ÍÍâªÆçÃiÔlÙiêOÂÏÌKÍâªÆ{õ!Æ5êxÚIÒâªÔlÄCêÏÚKÌªÔiÍésÆçÍæÔ3ÚCÆÑiÆ5ê¬ÔióÙ

Á¨ÂÃ.'g13	OI%$NH76	!>	ÂÃ.Ä$&-$I	6>IF>@	6>&8ÂG>I	E<OI:F	O¾MH$NG?F>G5Åg'/>I	6ÆÇ´T+b	FH,Ä>ÈÈJÉ(Ê
P!ûR

S6TU<U<VWYXZX\[^]`_ba+_bc

ÍæÆ5Ðhâ!ÌªÔlê¬ÔiÃií"Íâ!Ù0ÍáÔiÅôÊÒáØÆ5êÏêÔlÌGôÂxÌCÚCÒJÔiÓñÍÙiÒæôÒÔlÌªÆÐÙiÌGÆ~öÊóCÅÆ5ÒÒOáÂ¬ÍâLó!êÏÙiÌCÌ!ÂÏÌªÃêÏÙiÌªÃlÄ!Ù0ÃiÆ5Òë
åJâCÂxÒèáÂÏêÏêQâCÙ0ÅhÚ!ê¬í3ésÆNósÔlÒÒÂÏé!ê¬ÆiÕñÙiÒ`ÆÑiÆ5ÌÒÂÏÎó!ê¬ÆçêÏÙiÌªÃlÄCÙ0ÃiÆ5ÒãÙiÒ{äªåJËJÖp×äüÐÙiÌÆ~öóCÅhÆ5ÒÒNÿ Cþðâ!Ù0ÅhÚ
óCÅÔiéê¬Æ5ÎÒ#êÏÂ¬ôiÆEäªÝåÂë ­Aâ!Ù0ÍÎÂ¬ÃlâbÍJésÆósÔlÒÒÂ¬é!êÏÆiÕâªÔáØÆÑiÆÅÕÂÏÒ#ÍæÔãÚªÆÑÂxÒæÆÙÍæÆ5Ðhâ!ÌªÔlê¬ÔiÃiíçÍâCÙ0ÍJáÔiÅôÊÒ
áÆ5êÏêsÔlÌNÍâªÔlÒÆÍÙiÒæôÊÒJÍâCÙ0
Í Ë&GÌ`ésÆÒæÔlêÏÑiÆ5ÚçÆ ãÐÂ¬Æ5ÌbÍê¬íiëòÖpÌçó!Ù0ÅÍÂxÐÄCêÏÙ0Å5ÕªÂ¬ÓÙó!êÏÙiÌ!ÌCÂÏÌªÃEÍÙiÒæôNÚªÔÆ5ÒJÌªÔiÍ
Ð~ÔlÌCÒæÍÂÏÍÄªÍæÆÎEÄ!ÐhâçÔiÓÙóCÅÔiéê¬Æ5Î ÍæÔ`ÙiÌNÄCÌCÂxÌªÓ½ÔiÅÎÆ5ÚãâÄCÎÙiÌçÒÔlê¬ÑiÆÅ5ÕªÍâªÆ5ÌNÂÏÍQÌCÆ5Â¬ÍâªÆÅJÒâªÔlÄ!êÏÚ{ÚªÔÒæÔ
ÍæÔÔlÄªÅó!êxÙiÌCÌCÂÏÌªÃÙiêÏÃiÔiÅhÂ¬ÍâCÎÒ5ë ­ Â¬ÍâLÍâªÆEÁÁ7ÒæíÒÍæÆ5ÎçÕáÆEÙiêÏÅÆ5ÙiÚªíNÒæÆÆ5Î ÍæÔâ!Ù5ÑiÆèÙãÎÆÍâCÔÚ"ÍâCÙ0Í
ÙiÐÐ~ÔlÎó!êxÂÏÒâªÆ5Ò?ÍâCÂÏÒ?ûÄCÂ¬ÍæÆáØÆ5êÏê¸Õ0Ù0Íê¬Æ5ÙiÒÍ?Ó/ÔiÅÒæÆ5ûÄªÆ5Ì	ÍÂxÙiêbóêÏÙiÌCÌCÂÏÌCÃÂÏÌäÊåJËJÖp×äîÙiÌCÚèÝùÜñ<ë ­AâCÂxê¬ÆØÁÁ
ÂÏÒ#ÌªÔiÍ#óÙ0ÅÍÂÏÐÄCêÏÙ0Åê¬íáÆ5êÏêïÒÄCÂ¬ÍæÆ5Ú{Ó/ÔiÅÒæÔlêÏÑÂÏÌCÃ&ÅÙiÌCÚªÔlÎ äÊÝå]ÂxÌCÒæÍÙiÌCÐ~Æ5ÒÕCÂÏÍÆ5ÙiÒhÂÏê¬í{ÒæÔlê¬ÑiÆ5ÒJÂÏÌbÍÄCÂ¬ÍÂÏÑiÆ5ê¬í
ÒÂÏÎó!ê¬ÆîÍÙiÒôÒêxÂ¬ôiÆEÍâC\
Æ íÎ&ÕCîZî#ÏIÎÙiÌCñ
Ú Ò´ÓÔÖÕg×ÙÕAÐ&×ÔlÌªÆ5ÒÕBÙiÌ!ÚGÂxÒáØÆ5êÏêÒÄ!Â¬ÍæÆ5ÚGÓ½ÔiÅÙ{ÌÄCÎîésÆÅÔiÓÔiÍâªÆÅ
ÚªÔlÎÙiÂxÌCÒáâªÆÅhÆèõÌCÚCÂÏÌCÃÙLÌªÔlÌÊþ¸ÔióCÍÂÏÎ`ÙiêÒæÔlêÏÄªÍÂ¬ÔlÌ3ÂÏÒÌªÔiÍ`ÿ !þðâCÙ0ÅhÚïëåJâCÂÏÒÒhâªÆ5ÚCÒÙNÐ~ÅÂ¬ÍÂÏÐÙiêòêÏÂÏÃlâ	Í
ÔlÌ1ÍâCÆ`óCÅÆ5Ú!ÂÏÐ~ÍÂ¬ÔlÌCÒÔiÓJßÙiÄCHÍ `ÙiÌCÚüäÊÆ5êÏÎÙiÌ p!Ç bÕòáOâªÔ"ÒÄCÒó+Æ5Ð~ÍæÆ5Ú1ÍâCÙ0Íîó!êxÙiÌCÌCÂÏÌªÃ{ÍæÆ5ÐâCÌªÔlê¬ÔiÃií
áÂÏêxê!ésÆ5Ð~ÔlÎÆÒÄCó+Æ(Å ÄªÔlÄCÒésÆ5ÐÙiÄCÒæÆÔiÓ?ÍâªÆÓSÙiÒæÍJÙiÚªÑ0ÙiÌCÐ~ÆÔiÓÍâCÆÒæÍÙ0ÍæÆîÔiÓ?ÍâªÆÙ0ÅÍJÂÏÌ{ó!ÅÔiósÔlÒÂ¬ÍÂ¬ÔlÌCÙiê
ÅÆ5ÙiÒæÔlÌ!ÂÏÌªÃçÒæíÊÒæÍæÆ5ÎÒë&åJâªÆÎÆÍâªÔÊÚCÒÚªÆÑiÆ5ê¬ÔiósÆ5Ú ÍâªÆÅÆÙ0ÅÆÒhÄªÅÆ5ê¬í"Ä!ÒæÆÓ/Ä!êBÓ/ÔiÅÒæÔlê¬ÑÊÂÏÌªÃNäÊÝåëïåJâªÆí
ÎÂ¬ÃlâbÍÕQâªÔáÆÑiÆÅ5ÕJÌªÔiÍésÆNÙ0óCó!ÅÔióCÅhÂÏÙ0ÍæÆçÓ/ÔiÅÍâªÆ"Íðíó!ÂÏÐÙiêÒÍæÅhÄCÐ~ÍÄªÅÆ5ÒÔiÓÍÙiÒôÒ`ÍâCÙ0Í`ÝOÖ&óêÏÙiÌCÌCÂÏÌCÃ
ÒâªÔlÄ!êÏÚé+ÆÂxÌ	ÍæÆÅÆ5ÒÍæÆ5Ú"ÂÏÌïë

Í ¸A²·5¯¨Î1§_¦¨¬
Ï6ÐÑ¦«·8ªAº
Jå âCÂxÒ#Ù0ÅÍÂÏÐê¬ÆîÂxÒÙiÌNÆ~öÊÍæÆ5ÌCÚªÆ5ÚLÙiÌCÚNÅhÆÑÂÏÒÆ5ÚçÑiÆÅhÒÂ¬ÔlÌNÔiÓòÙó!Ù0ósÆÅ®AOÔ<sÎ`ÙiÌCÌïÕ/0ÈiÈiÈÖJÍâCÙ0ÍâCÙiÒJésÆÆ5Ì
ó!ÄªéêÏÂÏÒâªÆ5ÚÙ0ÍQÖä~ðLÖæäbþðÈiÈÊëòåâªÆÙiÄCÍâªÔiÅhÒáÂÏÒâ`ÍæÔèÍâCÙiÌªô`ÛQêÏÙiÂ+ÛÔlÌªÆÍJÙiÌCÚ÷Æ5Ð~ÍæÔiÅ?ÆsÌªÆÅQÓ/ÔiÅQÍâªÆ5Â¬Å
âªÆ5ê¬óIÂÏÌIÒÆÍæÍÂÏÌªÃ(ÄªóIÍâªÆçÆ~öÊósÆÅhÂÏÎÆ5ÌbÍÒèÔlÌKÍâªÆNÐ~ÔlÎó!Ù0ÅÂÏÒæÔlÌKÔiÓÁ?ÁáÂÏÍâ äÊ×?Më ­(ÆNÍâCÙiÌCô ö	ÄCÒÒÂ
ËÂxÌ	ÍÙiÌªÆ5ÌÓ½ÔiÅóCÅÔÑÂxÚCÂÏÌªÃ3Ä!ÒáÂ¬Íâ7ÒæÔiÓ/ÍðáQÙ0ÅÆ ÍæÔúÐ~ÅÆ5Ù0ÍæÆ ÅhÙiÌCÚCÔlÎ äÊÝå ÂÏÌCÒæÍÙiÌ!Ð~Æ5ÒãÂÏÌÍâªÆL×ØùùÜ
êÏÙiÌªÃlÄ!Ù0ÃiÆiÕÙiÌCÚÙiÐôÊÌªÔáê¬Æ5ÚªÃiÆÍâªÆÙiÌªÔlÌ	íÊÎÔlÄCÒØÅÆÑÊÂ¬ÆáÆÅ5ýÒØÐ~ÔlÎ`ÎÆ5Ì	ÍÒ5ÕáOâCÂÏÐhâãâªÆ5ê¬ósÆ5ÚÂÏÎóCÅÔÑiÆOÍâªÆ
ó!Ù0ósÆÅ5ë

¥¦ÒQ¦±A¦¨·	¸Ó¦¨º

ÝÌCÚªÆÅhÒæÔlÌ=ÕÞëBËîë¬ÕäªÎÂ¬ÍâïÕ?ùEë´ÌJë¬Õ# ­(Æ5êÏÚ=Õ?ù&ëäsë¾pÇ!bëGÞÔlÌCÚ!Â¬ÍÂ¬ÔlÌCÙiêÆsÆ5Ð~ÍÒèÂÏÌÞÅhÙ0óâªó!êÏÙiÌïë
ÖpÌLäÊÂxÎÎÔlÌCÒÕªËîë¬¨Õ  Æ5ê¬ÔlÒæÔª/Õ ð3ë¬Õ/ äÊÎÂÏÍâïÕ!ä+ëBAÌñÚ!ÒëùÕÔÖÕ×JËØ>Ø(Ù,ÚÌeÛ,Ü¡×QÝÞßÓØtàÞß¶á&Ì¨Þ_Ø*Õ&Ì,ÞÚ×,Ì«G
â ×,ÌJÝ*Ø*ÕØ*Ì«Ë&Øã×GÌ0ätÕÞÚ å	Ë*ÚjGÀá&Ì¨Þ_ØCÚ`ÛØÌ«ËØÔÖæGÌÌ¨ÚÌeÛxç¨èYÜÞ_Ø*éÜxêäáÔç«ëQì,í*îÕ+óCó=ë ²²Yï ¶ · ëÝOÝÝÖ
×ñÅÆ5ÒÒZÕ ðLÆ5ÌCê¬Ôã×?Ù0Åhôë
ÛQÙiÐÐhâÄCÒÕÁØë 0ÈiÈiÖÈ 6ë ç¨ð¨ñÜJØ*Þ×QÝ	Ô5òtòtóÝ*×GÕÞßÓØ2äáÔç«ôõAõAõtÔÖæGÌÌ¨ÚÌeÛ â ×Géö ØJÞÚÞÚj×GÌCësåJâªÆQÝOÖr×QäbþðÈiÈ
×ØêÏÙiÌCÌ ÷xÌªÃÞQÔlÎósÆ(Í ÷¬(Í ÷¬ÔlÌ"ÞÔlp
Î ÷ÏÍæÆÆië
ÛQÙiÐÐhâÄCÒÕ øë¬`Õ ù}ÙiÄïÕù&
ë 0ÈiÈªÇ ë åJâª
Æ 0ÈiÈiÈÝOÖó!êÏÙiÌCÌ ÷xÌªÃúÒæíÊÒæÍæÆ5ÎÒ"Ð~ÔlÎósÆ(Í ÷¬(Í ÷¬ÔlÌïû
ë ú8ßÓØ1äá
üýJÛ$EþÚÌØ~5ë øCÔiÅÍâCÐ~ÔlpÎ ÷ÏÌCÃªë
ÛQêÏÄCÎçÕlÝEë	Üñë¬©Õ øCÄªÅÒæÍÖÕ ðúë	Üòë p!Ç ¶bÀë øCÙiÒÍñó!êÏÙiÌ!Ì ÷ÏÌªÃOÍâªÅÔlÄªÃlâóêÏÙiÌCÌ ÷ÏÌCÃÃiÅhÙ0ó!â`ÙiÌCÙiê¬íÊ(Ò ÷ÏÒëCÖpã
Ì Ô2ÕQ×Gë

ËØ>Ø>ÙGÚÌÛGÜ×QÝÞßÓØ ÿ*àÞßãá&Ì¨Þ_Ø*Õ&Ì,ÞÚ×,Ì«G ×GÚÌ¨Þ â ×GÌ.Ý*Ø*ÕØ*Ì«Ë&Ø ×GÌäÕÞÚ å	ËJÚ,«á&Ì¨Þ_Ø[ÚæÛeØ*Ì«Ë&Øêá â äá&ë
ìî ÕóCó=ëïÇ ° · °.ï Ç °² Ëð"ÔlÌbÍæÅÆ5ÙiêÕsÞQÙiÌCÙiÚCÙÊëðLÔiÅÃlÙiÌLßÙiÄªÓSÎÙiÌCÌïë
ÛQêÏÄCÎçÕ-ÝîëÜòë¬ÕF!ø ÄªÅhÒæÍÕ<ð3ëÜòëÖpÇ!bâëÓCø ÙiÒæÍBóêÏÙiÌCÌÏ÷ ÌCÃØÍâªÅhÔlÄªÃlâó!êÏÙiÌCÌ¨Ï÷ ÌªÃÃiÅhÙ0ó!âîÙiÌ!Ùiê¬íÒ>÷ÏÒëAäÕÞÚ å	ËJÚG
á&Ì«Þ_Ø[ÚæÛeØ*Ì«Ë&Ø Õ6ì$Bõ pÇdþbÕ"bâ< ï ë
ÛÔlÌªÆÍÕJÛë¬Õ¾ ÆïÌªÆÅ5ÕEë`pÇ!bë±äª×JÉOÆ5ÄªÅ>Ï÷ ÒæÍ(x÷ ÐçÒæÆ5Ù0ÅhÐhâó!êÏÙiÌCÌCÆÅ5ëIÖrÌäáÔÖç¨ëQìAíÔ2`GÌ¨ÌÚÌÛ
â ×,éöØ*ÞÚÞÚ×GçÌ ×	¬÷ ÍæÍÒæé!ÄªÅhÃlâïÕª×+ÝEë
P!ûQ

º+WY»&¼x½¾cFWX4¿6_bXZ_bÀ~W¼ÂÁgTYX\ÃÄZÀ~TYÅÆÄ4S?_bÅZÀÂÁg»&¼~ÁgÇvÈ~_WÀ~Ç©Ä

ÛÔlÌªÆÍÕñÛë¬ÕkÆsÌCÆÅ5ÕîëLpÇ!bë3×ØêÏÙiÌCÌ÷xÌªÃNÙiÒâªÆ5ÄªÅ>÷xÒæÍ(÷ÏÐÒæÆ5Ù0ÅÐhâïÉ}OÆá¿ÅÆ5ÒÄ!ê¬ÍÒë"ÖpÌüÛ÷xÄCÌCÚªÔªÕ
äsë¬"Õ  øªÔ5ös3Õ ðúMë AÌØÚCÒùë Õ Ø(ËØÌ¨ÞäÙ	GGÌ«ËØÜÚÌ0äátÔÖæGÌÌÚÌeÛ
,ÞßÖðÓÕQ×ö Ø(GÌ â ×GÌJÝJØÕ(ØÌË&Øp×,Ì
Ô2`,ÌÌÚÌeÛê â Ô ìAìîùÄCÅhâCÙiÎçZÕ ßëäóC&Å ÷ÏÌªÃiÆÅæmþ  ÆÅhêxÙ0Ãªë
ÛÔlÌªÆÍÕÊÛOë¬ÂÕ pÆ sÌªÆÅ©Õ E/ë 0ÈiÈªÇ ëB×ØêÏÙiÌCÌ ÷ÏÌCÃÙiÒâªÆ5Äª&Å ÷ÏÒæ(Í ÷ÏÐQÒæÆ5Ù0ÅhÐâï6ë äÕÞÚ åË*ÚjGÓá&Ì¨Þ_Ø*CÚæÛeØÌË&Ø~½ë øªÔiÅhÍâÊþ
Ð~Ôl
Î ÷ÏÌªÃªë
ÛÔlÌªÆÍÕÛë¬Õ?Ü=ÔÆ>Å ÷ÏÌCÐÒBÕ èë¬´Õ  Æ ïÌªÆÅ5´Õ î{ë p!Ç bâë`Ý ÅÔié!Ä!ÒæÍÙiÌCÚ(ÓSÙiÒæÍÙiÐ~(Í ÷¬ÔlÌ1ÒæÆ5êÏÆ5Ð~(Í ÷¬ÔlÌ1ÎÆ5ÐâCÙ-þ
¨Ì ÷ÏÒÎ Ó/ÔiÅó!êÏÙiÌC¨Ì ÷ÏÌªÃªëîÖpÌ Ô2ÕQ×JËØ>Ø>ÙGÚÌÛGÜ¶×QÝpÞß Øÿ*àÞßAÞÚ×GÌG â ×GÌ.Ý*Ø*ÕØ*Ì«Ë&Ø×QÝpÞß ØäéØÕÚË&GÌ
äÜ>Ü*×JË*Új,ÞÚj×GÌÝ*×GÕtäÕÞÚ å	Ë*ÚjG«á&Ì¨Þ_Ø*CÚ`ÛØÌ«ËØ¶êäääá&ëìQîÕªó!ó=ë âÇ ²Yï â!Ç "ë ðLÖpå]×òÅÆ5ÒhÒë
ÛíêxÙiÌCÚªÆÅ5ÕQåë p!Ç  ² ëøåJâªÆNÐ~ÔlÎóÄªÍÙ0(Í ÷¬ÔlÌCÙiêJÐ~ÔlÎó!ê¬Æ~ö ÷¬ÍðíKÔiÓóCÅÔiósÔl(Ò ÷¬(Í ÷¬ÔlÌ!Ùiê#äªåJËJÖp×äúó!êxÙiÌCÌ ÷ÏÌªÃªë
ätÕÞÚ å	Ë*ÚjGá&Ì«Þ_Ø[ÚæÛeØ*Ì«Ë&ØÕ ,ìBpÇ ï bÕÇ ° ¶ ï 0È ² ë
ÞQâªÆ5ÌCÃªÕ öCë¬bÕ ÖrÅhÙiÌ ÷¸Õ-ßë0ÛZë p!Ç bë+àÅhÚªÆ&Å ÷ÏÌªÃJóCÅhÔié!ê¬Æ5ÎÒÄªéCÃiÔlÙiêÏÒ5ëbÖpÌä>Å ÷ÏÚCâ!Ù0ÅhÙiÌïEÕ }Eë	ä+Âë AÌñÚïùë eÕ Ô2ÕQ×Gë

Ë Ø>Ø>ÙGÚÌÛGÜ×QÝÞßÓØ ÿAÿ,Þßãá&Ì¨Þ_Ø*Õ&Ì,ÞÚ×,Ì«G ×GÚÌ¨Þ â ×GÌ.Ý*Ø*ÕØ*Ì«Ë&Ø ×GÌäÕÞÚ å	ËJÚ,«á&Ì¨Þ_Ø[ÚæÛeØ*Ì«Ë&Øêá â äá&ë
íeìîÕóCó=ëZ · Ç ï  · ° ùOÆÍæÅhÔA÷¬ÍÕðLÖëðLÔiÅÃlÙiÌLßÙiÄªÓSÎÙiÌCÌïë
ùÅhÄCÎÎÔlÌCÚïÕðúë¬Õ/ ÞQÄªÅÅ>Ï÷ ÆiÕCßëBpÇ!bë6ÔlÙiêBÔiÅhÚCÆÅ>Ï÷ ÌªÃpÏ÷ ÌNó!Ù0ÅÍ(÷ÏÙiêÏêÏíãÔiÅhÚCÆÅÆ5ÚNó!êxÙiÌCÒëñÖpÌGäÊÅ>÷ÏÚCâCÙ-þ
ÅÙiÌïÕ¨E
} ë+ä+ëBAÌØÚïëùÕÔÖÕ×JËØ>Ø(Ù,ÚÌeÛ,Ü¡×QÝ ÞßÓØ¡ÿAÿ,Þßxá&Ì¨Þ_ØÕÌ«,ÞÚj×GÌ«G  ×GÚÌ«Þ â ×GÌ.Ý*Ø*ÕØ*Ì«Ë&Ø×,Ì1äÕÞÚ å	ËJÚG
á&Ì«Þ_Ø[ÚæÛeØ*Ì«Ë&Ø¶êá  â äá&ëTíeìî ÕCó!ó=ëZ ° È ï  ° ¶ãùÆÍæÅÔAÏ÷ ÍÕð"ÖdëðLÔiÅÃlÙiÌ"ßîÙiÄªÓ/Î`ÙiÌCÌïë
ÌñÚCÆ5ê¬ô-ÙiÎó=Õ!ä+ë-0ÈiÈiÈÖëOÆ5ÄªÅ>x÷ ÒæÍ(Ï÷ ÐÒæÆ5Ù0ÅhÐâ"ó!êxÙiÌCÌÏ÷ ÌªÃEá¬÷ ÍâçÛQùùÒëñÖpÌ â äá&	ë z×GÕ .Ü>ßÓ×&ö ÔÖð Eë
ÌòÑiÆ5Ì=Õsä+ë¬ÕY äÊâÏ÷ ê¬ÔlÙiÐâïÕèëBpÇ!bâ<¶bë
} ×þðÐ~ÔlÎó!êÏÆÍæÆ5ÌªÆ5ÒÒOÔiÓÒÆÑiÆÅhÙiêÙ0ÅhÅhÙiÌªÃiÆ5ÎÆ5ÌbÍóCÅhÔié!ê¬Æ5ÎÒëØåBÆ5Ðâïë
ÅhÆó=ë ² · ÕùÆó!Ù0ÅÍÎÆ5Ì	ÍJÔiÓñÞÔlÎó!ÄªÍæÆÅOäÊÐ*¬÷ Æ5Ì!Ð~ÆiÕOÙ,Ï÷ Ó/ÙÊÕCÖpÒæÅhÙ0Æ5ê¸ë
ø¬÷ ôiÆ5ÒÕªËë~ÌJë¬ÕÂ }x÷ êÏÒÒæÔlÌïÕî} ë1pÇ!bâÇëñäÊåJËÖr×Qä+ÉbÝ]ÌCÆáAÙ0óCó!ÅÔlÙiÐhâÍæÔèÍâªÆÙ0óCó!ê Ï÷ ÐÙ0Í(Ï÷ ÔlÌÔiÓBÍâCÆÔiÅÆ5Î
ó!ÅÔÑÓÏ÷ ÌªÃÍæÔó!ÅÔié!ê¬Æ5Î¿ÒæÔlêÏÑÏ÷ ÌCÃªë
ätÕÞÚ å	Ë*ÚjGá&Ì«Þ_Ø[ÚæÛeØ*Ì«Ë&Ø Õ½lô ÕBÇ! ï 0Èbë
øªÔö+Õðúë¬ÕHÜ=ÔlÌCÃªÕCùEë-pÇ!bëØåJâªÆÙiÄªÍæÔlÎÙ0Í(Ï÷ Ðx÷ ÌªÓ½ÆÅhÆ5ÌCÐ~ÆOÔiÓ?ÒæÍÙ0ÍæÆÏ÷ ÌbÑ0Ù0Å>Ï÷ ÙiÌbÍÒx÷ ÌãÍ(x÷ Îçë ×GðÓÕÌ«G6×QÝ
ätÕÞÚ å	Ë*ÚjGá&Ì«Þ_Ø[ÚæÛeØ*Ì«Ë&Ø ØÜ*Ø(,ÕQË*	ß Õiì Õ · ° â Öï ² ÊÇ0ë
øªÔö+Õ#ðúë¬Õ´¿ÜBÔlÌªÃªÕ?ù&ë0ÈiÈªÇëËOíéCÅ>Ï÷ Ú3äÊå?Ýî} É=ÖpÚªÆ5ÌbÍ(¬÷ Ó/íÏ÷ ÌCÃNÙiÌCÚ1ÎÙiÌCÙ0ÃAx÷ ÌªÃ"Ð~ÔlÎEé¨Ï÷ ÌCÙ0ÍæÔiÅ>x÷ ÙiêÔióªþ
Í(x÷ ÎpÏ÷ ÒÙ0Í(¬÷ ÔlÌ(ÒhÄªéªþ¸óCÅÔiéê¬Æ5ÎÒtÏ÷ Ì ó!êÏÙiÌ!ÌÏ÷ ÌªÃªëEÖrÌÔ2ÕQ×.Ë&Ø>Ø>ÙGÚÌeÛGÜ¶×ÝpÞßÓØÿ JÞß1á&Ì¨Þ_Ø*Õ&Ì«AÞÚ×GÌG  ×GÚÌ¨Þ
â ×,ÌJÝ*Ø*ÕØ*Ì«Ë&Øã×GÌväÕÞÚ å	ËJÚGÀá&Ì¨Þ_Ø*CÚ`ÛØÌ«ËØêá  â äá&ëõ,ÿèî äÆ5Ù0ÍæÍê¬ÆiÕ"­1ÙiÒâx÷ ÌªÃiÍæÔlÌïÕ1äªÝîë"ð"ÔiÅhÃlÙiÌ
ßîÙiÄªÓ/Î`ÙiÌCÌïëÝOÐÐ~Æó!ÍæÆ5Ú"Ó/ÔiÅJó!Äªéê Ï÷ ÐÙ0Í(¬÷ ÔlÌïë
øªÅhÙiÌCôÕMöªë¬Õ?ÞQâCÆÆ5ÒæÆ5ÎÙiÌïÕB×?ë¬ÕM äÍÄªÍHiÕ´öCë{pÇ!bâët­ âªÆ5Ì(ÃiÅhÙÑ¬÷ Í»í Ó/Ù,Ï÷ êxÒÉÜ=ÔÊÐÙiêÒæÆ5Ù0ÅhÐhâ3ÍæÔiósÔlê¬ÔiÃiíië
 ×GðÓÕÌ«G×ÝäÕÞÚ å	ËJÚ,«á&Ì¨Þ_Ø[ÚæÛeØ*Ì«Ë&Ø ØÜ*Ø>GÕË	ß Õ!ÕY ²  ï ÊÇ0ë
Ù<Æ5ÌïÕÛëOÞë¬Õ ßÌªÔié!ê¬ÔÊÐô+ÕÞëÉpÇ!bâë ÞÔlÎEé¨Ï÷ ÌÏ÷ ÌCÃúÍâªÆ(Æ~öÊóCÅÆ5ÒhÒ(¬÷ ÑiÆ5ÌªÆ5ÒÒ{ÔiÓÞQ×à× á¬÷ Íâ
ÍâCÆNÆãÐ*¬÷ Æ5ÌCÐ~íüÔiÓÉÅhÙ0ó!âªóêÏÙiÌïëüÖrÌäÍæÆÆ5ê¸Õ#ä+ë¬Õ{ ÝêÏÙiÎp¸÷ ÕØËëAÌØÚCÒëùÕ"Ø(ËØÌ¨Þä	Ù YGÌË&ØÜxÚÌ
äáÔ2`,ÌÌÚÌeÛ 
àÞß ÖðÓÕ×&ö Ø>GÌ â ×GÌJÝJØÕ(ØÌ«ËØ×GÌÔÖæGÌÌÚÌeÛê  â Ô  ì Qî Õ6  ÔlêëòÇ · ² {ÔiÓó5Ø>ËJÞðÓÕØ
×,Þ_ØÜÚÌzäÕÞÚ å	Ë*ÚjGá&Ì«Þ_Ø[ÚæÛeØ*Ì«Ë&Ø ÕªóCó=ëÊÇ ï  ·· åBÔlÄCêÏÔlÄCÒæÆiÕªø ÅhÙiÌ!Ð~ÆiësäóCÅ&Ï÷ ÌªÃiÆÅæþm
  ÆÅhêxÙ0Ãªë
OÔ<sÎÙiÌ!ÌïÕMöCë0ÈiÈiÈÖëGÝ âCÆ5ÄªÅ>Ï÷ ÒæÍ(x÷ ÐèÓ½ÔiÅèÚªÔlÎÙ,Ï÷ ÌýÏ÷ ÌCÚªÆósÆ5ÌCÚªÆ5ÌbÍó!êÏÙiÌCÌ¨Ï÷ ÌªÃçÙiÌCÚ¬÷ ÍÒîÄCÒÆÏ÷ Ì1ÙiÌúÆ5ÌÊþ
Ó/ÔiÅhÐ~Æ5ÚKâÏ÷ êxê¤þðÐê Ï÷ ÎEé¨Ï÷ ÌªÃÙiê¬ÃiÔiÅ>¬÷ Íâ!ÎçëçÖrÌÔÖÕ×JËØ>Ø(Ù,ÚÌeÛ,Üx×ÝãÞßÓØxÿ,ô$Þßvá&Ì¨Þ_Ø*Õ&Ì,ÞÚ×,Ì«Gç¨èGéöÓ×YÜ&ÚðÓé
×,ÌüØ*Þß×.ÙA×Gæ×(Û,ÚmØÜÝ×GÕá&Ì¨Þ_ØCÚ`ÛØÌ¨Þ
ç¨èYÜÞ_Øé Üãêá>çÓüzá>ç«ëõAõî ÕCóCóBëÂÊÇ °.ï bâbëBäó!Å>Ï÷ ÌªÃiÆÅæþm  ÆÅêÏÙ0Ãªë
P!ûû

S6TU<U<VWYXZX\[^]`_ba+_bc
OÔ<sÎÙiÌ!ÌïÕ©öªë0ÈiÈªÇëïÜBÔÐÙiêCÒÆ5Ù0ÅhÐhâ`ÍæÔió+ÔlêÏÔiÃií Ï÷ ÌèóêÏÙiÌCÌ÷ÏÌCÃésÆ5ÌCÐhâ!ÎÙ0ÅôÊÒÉÝÌèÆ5Îó¨÷¬Å&÷ÏÐÙiêÊÙiÌCÙiê¬íÊÒ(÷ÏÒë

ÖpÌÑÔ2ÕQ×JËØ>Ø>ÙGÚÌÛGÜ1×QÝÞßÓØ0ÿ.Þßýá&Ì«Þ_ØÕÌ«,ÞÚj×GÌ«G" ×GÚÌ¨Þ â ×,ÌJÝ*Ø*ÕØ*Ì«Ë&Ø×,ÌäÕÞÚ å	Ë*ÚjG5á&Ì¨Þ_ØCÚ`ÛØÌ«ËØ
êá â äá&ë(õ,ÿîOäÆ5Ù0ÍæÍê¬Æi~Õ ­1ÙiÒâ ÷xÌªÃiÍæÔlÌï~Õ äÊÝE©ë ðLÔiÅÃlÙiÌ{ßÙiÄªÓSÎÙiÌCÌ=ë+ÝÐÐ~ÆóCÍæÆ5Ú{Ó/ÔiÅñó!Äªéê ÷ÏÐÙ0Í(÷¬ÔlÌïë
$Ôl# êÏêÏÚªÔié!êÏÆÅ5ÕÊä+ë¬ZÕ mä%Í Ôi# ÅÅ~Õ Eë þð×?-ë 0ÈiÈiÖÈ ëØäÔlê¬ÓÑ ÷ÏÌªÃ&ÍâªÆÆ5Ì	Í,Ù ÷ÏêxÎÆ5Ì	ÍQóCÅhÔié!ê¬Æ5Î ÷ÏÌãÍâª
Æ ÄªÆ5ÌbÍÐÙiêÏÐÄ!êÏÄCÒ
Ä!(Ò ÷ÏÌªÃ¨é ÷xÌCÙ0ÅíãÚCÆ5*Ð ÷Ï(Ò ÷¬ÔlÌN¨Ú ÷ÏÙ0ÃiÅhÙiÎÒëØÖr0
Ì ÔÖÕ×JË&Ø&Ø(ÙGÚÌeÛGÜ×QÝÞß Ø &
ÚÕ&ÜÞ
á&Ì¨Þ_ØÕÌ«,ÞÚj×GÌ«, â ×,ÌJÝ*Ø*ÕØ*Ì«Ë&Ø
×,Ì â ×,éöðÓÞmAÞÚ×GÌG8óÀ×(ÛAÚËê â óîëØåBÔ`Ù0ó!ó+Æ5Ù0Åë
ÖrÅhÙiÌ ÷ÕòßëÛë¬Õ  ÞQâªÆ5ÌªÃª{Õ öCLë p!Ç bâëIäÊÄCéCÃiÔlÙiêÔiÅhÚªÆ>Å ÷ÏÌCÃGÙiÌCÚüÃiÔlÙiêJÙiÄCÃlÎÆ5Ì	ÍÙ0(Í ÷ÏÔlÌKÓ½ÔiÅâªÆ5ÄC>Å ÷ÏÒæ(Í ÷ÏÐ
ó!ÅÔié!ê¬Æ5Î ÒæÔlê¬ÓÑ ÷ÏÌªÃªëÖr÷
Ì ðLÐùÆÅhÎÔiÍæÍ/Õ öª1ë AÌñÚ=ùë Õ Ô2ÕQ×.Ë&Ø>Ø>ÙGÚÌeÛGÜ×QÝÞß Øÿ$õ,Þßpá&Ì¨Þ_Ø*Õ&Ì,ÞÚ×,Ì«G ×GÚÌ¨Þ
â ×,ÌJÝ*Ø*ÕØ*Ì«Ë&Ø×GÌxäÕÞÚ å	ËJÚGá&Ì¨Þ_Ø*CÚ`ÛØÌ«ËØ¡êá â äá&ëTí'îÕÊóCó=ë+ÇÈª!Ç  ï ÇbÈ  ² ð1÷xêÏÙiÌïÕ	ÖrÍÙiê¬íi~ë ð"ÔiÅhÃlÙiÌ
ßîÙiÄªÓ/Î`ÙiÌCÌïë
öiÔlÌ!ÒÒæÔlÌïÕJ×?ë¬`
Õ ÙiÒêÏÄ!ÎçÕJ×?ë¬?Õ  Û Ùi# ÐhôÒÍæ(Å Ôl# ÎçÕÞ6ë 0ÈiÈiÖÈ ëu×ØêÏÙiÌCÌ ÷xÌªÃ(þÙ3ÅhÙiÌ!ÚªÔlp
Î ÷9Æ5Ú7Ù0óCóCÅÔlÙiÐâïë
ätÕÞÚ å	Ë*ÚjGá&Ì«Þ_Ø[ÚæÛeØ*Ì«Ë&Ø8Õ ÿAÿ"pÇ ÕÇ ï ë
öiÔlÒhê ÷ÏÌïÕñù&ë¬¾Õ  ËÔlÙiÐhâïL
Õ öC#ë ­ `ë p!Ç 0ÖÈ ëAÝ ÍâCÆÔiÅÆ(Í ÷ÏÐÙiêÙiÌ!Ùiê¬í>Ò ÷ÏÒ&ÔiÓÐ~ÔlÌ ³ÄCÌCÐ~(Í ÷ÏÑiÆ~þ¸ÃiÔlÙiêJóCÅÔiéê¬Æ5ÎÒë
ätÕÞÚ å	Ë*ÚjGá&Ì«Þ_Ø[ÚæÛeØ*Ì«Ë&ØÕ à¨ÿ0/Õ bâ ï ÇÈ ° ë
ßÙiÎEé!âCÙiÎóÙ0(Í ÷Õäsë¬Õ×Ù0ÅôiÆÅ5ÉÕ Ìë¬ÉÕ  ÜBÙiÎEéCÅÆ5ÐhâbÍÉÕ ÌJ
ë p!Ç bâë OÌCÚCÆÅhÒæÍÙiÌCÚ ÷xÌªÃüÙiÌ!ÚøÆ~öÍæÆ5Ì!Ú ÷ÏÌªÃ
ÅhÙ0ó!âªó!êxÙiÌïëãÖpÌüäÊÍæÆÆ5êÕäsë¬´Õ  ÝêÏÙip
Î ÷¸Õ?Ëî¾ë AÌñÚCÒ5ùë )Õ Ø(Ë&Ø*Ì¨ÞäÙ	YGÌË&ØÜãÚÌýäáÔ2`GÌ¨ÌÚÌÛ

à¨Þß
2ðÓÕQ×&öØ(GÌ â ×,ÌJÝ*Ø*ÕØ*Ì«Ë&Ø¡×,ÌÔ2`,ÌÌÚÌeÛê â Ô ìQî¨Õ  ÔlêëBÇ · ² Ôi

Ó ó5Ø>ËJÞðÓÕ(Ø ×,Þ_ØÜÚÌzäÕÞÚ å	ËJÚG
á&Ì«Þ_Ø[ÚæÛeØ*Ì«Ë&ØÕCóCó=Zë  ° È ï bâ<åBÔlÄ!ê¬ÔlÄCÒæÆiÕ øªÅÙiÌCÐ~Æiësäó!>Å ÷ÏÌªÃiÆÅæmþ  ÆÅêÏÙ0Ãªë
ßÙiÄªHÍ ibÕ Eë¬Õ AäÆ5êxÎÙiÌïÕiÛ~ë p!Ç bë Ì ÷¬Ó/Óí ÷ÏÌªÃOäÊÝåQþ¸éÙiÒæÆ5ÚèÙiÌCÚîÃiÅÙ0ó!âÊþ¸é!ÙiÒæÆ5ÚEó!êÏÙiÌ!Ì ÷ÏÌªÃªëiÖp¡
Ì Ô2ÕQ×.Ë&Ø>Ø>ÙGë
ÚÌeÛ,Ü×ÝÞßÓØ ÿGÞßãá&Ì¨Þ_ØÕÌ«,ÞÚj×GÌ«, ×GÚÌ«Þ â ×GÌJÝJØÕ(ØÌË&Ø ×GÌäÕÞÚ å	ËJÚG«á&Ì«Þ_Ø[ÚæÛeØ*Ì«Ë&Øêá â äá&ëìAìî-Õ
ó!ó=ë · !Ç  ï · ¶äÊÍæÔÐhôâªÔlêxÎçÕ+äáÆ5ÚªÆ5ÌïZë ðLÔiÅÃlÙiÌ"ßîÙiÄªÓ/Î`ÙiÌCÌïë
ßÙiÄªHÍ i´Õ îë=ÝEë¬-Õ  äÆ5êxÎÙiÌïÕ=Û{ë p!Ç  ° ë`×ñÄ!Òâ ÷ÏÌªÃÍâªÆÆ5ÌbÑiÆ5ê¬ÔiósÆiÉ×ñêÏÙiÌ!Ì ÷ÏÌªÃªÕsóCÅÔiósÔl(Ò ÷Ï(Í ÷¬ÔlÌCÙiê?ê¬ÔiAÃ ÷ÏÐ0Õ
ÙiÌ!ÚÒæÍæÔÐâCÙiÒæ(Í ÷ÏÐQÒæÆ5Ù0ÅÐhâïëCÖpp
Ì ÔÖÕ×JË&Ø&Ø(ÙGÚÌeÛ,Ü×QÝÞßÓØÿ+*AÞß,,ÞÚj×GÌ«G â ×,ÌJÝ*Ø*ÕØ*Ì«Ë&Øt×ÝÞßÓØÖäéØÕÚË&GÌ
äÜ>Ü*×JË*Új,ÞÚj×GÌÝ*×GÕtäÕÞÚ å	Ë*ÚjG«á&Ì¨Þ_Ø*CÚ`ÛØÌ«ËØ¶êäääá&ëì&îÕªó!ó=ëïÇi!Ç  ²Yï !Ç 0ÈªÇ03ë ð"Öpå]×òÅhÆ5ÒÒë
ßÔÆ5âCê¬ÆÅ5Õ öCBë p!Ç bëäÔlê¬ÓÑ ÷ÏÌªÃÐ~ÔlÎóê¬Æ~öóêÏÙiÌCÌ ÷ÏÌCÃEÍÙiÒæôÊÒOÍâªÅÔlÄªÃlâçÆ~öÊÍæÅhÙiÐ~(Í ÷¬ÔlÌ"ÔiÓÒÄªéCóCÅhÔié!ê¬Æ5ÎÒëÖpÌ
ä ÷ÏÎÎÔlÌCÒ5ÕòËë¬5Õ  Æ5êÏÔlÒæÔªÕ ðúë¬Õ  äÊp
Î ÷¬ÍâïÕØäsë AÌØÚCÒùë 2Õ ÔÖÕ×JË&Ø&Ø(ÙGÚÌeÛGÜ1×ÝÞß Øà¨Þßá&Ì¨Þ_Ø*Õ&Ì,ÞÚ×,Ì«G
â ×,ÌJÝ*Ø*ÕØ*Ì«Ë&Øã×GÌ0ätÕÞÚ å	Ë*ÚjGÀá&Ì¨Þ_ØCÚ`ÛØÌ«ËØÔÖæGÌÌ¨ÚÌeÛxç¨èYÜÞ_Ø*éÜxêäáÔç«ëQì,í*îÕ+óCó=ë °  ï+° ëÝOÝÝÖ
×ñÅÆ5ÒÒZÕ ðLÆ5ÌCê¬Ôã×?Ù0Åhôë
ßÔÆ5âCê¬ÆÅ5+Õ öªë¬+Õ <Ô ïÎÙiÌCÌ=+Õ öª/ë 0ÈiÈiÈiÖÙ ëàÌ`ÅÆ5ÙiÒæÔlÌCÙ0é!êÏÆÙiÌCÚÓ/ÔiÅhÐ~Æ5Ú`ÃiÔlÙiê!ÔiÅhÚCÆ>Å ÷ÏÌªÃlÒòÙiÌ!ÚÍâªJÆ ÷¬ÅØÄCÒæÆ
÷xÌ(ÙiÌ1Ù0ÃiÆ5ÌCÚCÙ-þðÚª&Å ÷¬ÑiÆ5Ì(ó!êÏÙiÌ!Ì ÷ÏÌªÃÙiê¬ÃiÔi>Å ÷¬ÍâCÎN-ë  ×GðÓÕÌ«G	×QÝätÕÞÚ å	Ë*ÚjG6á&Ì¨Þ_Ø*CÚæÛeØÌË&Ø.ØÜJØ(GÕËß	Õ
ÿ,ôlÕ ··  ï ·  ° ë
ßÔÆ5âCê¬ÆÅ5Õ öªë¬Õ  O<Ô sÎ`ÙiÌCÌïLÕ öª`ë 0ÈiÈiÈ0"é ë àÌìÍâª1
Æ ÷ÏÌCÒæÍÙiÌb(Í ÷ÏÙ0(Í ÷¬ÔlÌÔiÓÝùÜÔió+ÆÅÙ0ÍæÔiÅh
Ò ÷ÏÌbÑiÔlê¬ÓÑ ÷ÏÌªÃ
Ù0Åh¨é ÷¬ÍæÅhÙ0Åíõ!ÅÒæÍpþ¸ÔiÅhÚªÆÅOÓ½ÔiÅhÎ&ÄCêÏÙiÒ5ë#Ör
Ì ÔÖÕ×JË&Ø&Ø(ÙGÚÌeÛGÜ/ â äá&ë(õAõ0z×GÕ.Ü&ß×&ö×,ÌØ213ØÜ&ðÓ`ÞÜÚÌ
Ô2`,ÌÌÚÌeÛ	4
çËßÓØ>ÙGðÓ[ÚÌeÛxGÌ«Ùpò¡ØÜ&ÚæÛ,ÌCë
ßÔÆ5âCê¬ÆÅ5~Õ öªë¬Õ }ÆésÆ5êÕÛOë¬ÂÕ O<Ô sÎ`ÙiÌCÌïÂÕ öªë¬+Õ  tù ÷ÏÎÔiósÔlÄCê¬ÔlÒ5+Õ &"ë p!Ç bâ´ë ÌòöÍæÆ5Ì!Ú ÷ÏÌªÃó!êxÙiÌCÌ ÷ÏÌªÃÃiÅÙ0ó!âCÒ
ÍæÔ(ÙiÌKÝùÜ;ÒÄªé!ÒæÆÍëGÖpÌKäÍæÆÆ5ê¸ÕØä+ë¬MÕ  ÝêÏÙip
Î ÷ÕËîë AÌØÚCÒùë Õ Ø>Ë&Ø*Ì¨ÞäÙ	YGÌË&ØÜ¶ÚÌäá¡ÔÖæGÌë
Ì¨ÚÌeÛ5
½àÞß-2ðÕ×&ö Ø>GÌ â ×GÌ.Ý*Ø*ÕØ*Ì«Ë&Ø¡×GÌ1Ô2`,ÌÌÚÌeÛê â Ô ìQî¨Õ  ÔlêëBÇ · ² `ÔiÓ ó6Ø(ËJÞðÓÕ(Ø6×,Þ_ØÜÚÌ
ätÕÞÚ å	Ë*ÚjGá&Ì«Þ_Ø[ÚæÛeØ*Ì«Ë&ØÕªóCó=ë bâ · ï ¶ãåBÔlÄCêÏÔlÄCÒæÆi¨Õ øªÅÙiÌCÐ~Æië+äóC&Å ÷ÏÌªÃiÆÅæmþ  ÆÅhêxÙ0Ãªë

H.-.-

º+WY»&¼x½¾cFWX4¿6_bXZ_bÀ~W¼ÂÁgTYX\ÃÄZÀ~TYÅÆÄ4S?_bÅZÀÂÁg»&¼~ÁgÇvÈ~_WÀ~Ç©Ä

ßÔÆ5âCê¬ÆÅ5Õöªë¬Õ¾ äÊÐhâÄCÒæÍæÆÅÕßë?0ÈiÈiÈÖëøÌØê¬ÆÑ0Ù0ÍæÔiÅãÐ~ÔlÌbÍæÅÔlêÙiÒãÙ(ó!êÏÙiÌCÌ¨÷ÏÌªÃGóCÅÔié!ê¬Æ5ÎNëIÖrÌ7Þ#â÷¬Æ5ÌïÕ
äsë¬ÕñßÙiÎEé!âCÙiÎó!Ù0Í(÷¸ÕòËë¬Õ¾ ßÌªÔiéê¬ÔÐhôÕØÞëAÌØÚCÒëùÕÔ2ÕQ×JËØ>Ø>ÙGÚÌÛGÜz×QÝxÞßÓØAÞßá&Ì¨Þ_Ø*Õ&Ì,ÞÚ×,Ì«G
â ×,ÌJÝ*Ø*ÕØ*Ì«Ë&Ø×GÌäÕÞÚ åË*ÚjGGá&Ì¨Þ_Ø*CÚæÛeØÌË&Ø
Ô2`GÌ¨ÌÚÌÛç¨èYÜÞ_Ø*éÜêäáÔç¨ë(õAõ&î-ëÝÝOÝOÖï×òÅÆ5ÒÒ5FÕ ðLÆ5ÌCê¬Ô
×Ù0Åô+ë
Ü=ÔlÌCÃªÕÊù&ë¬ZÕ  øªÔ5ösZÕ ðú1ë p!Ç bë Ìã*Ð ÷¬Æ5ÌbÍ ÷xÎó!ê¬Æ5ÎÆ5ÌbÍÙ0(Í ÷¬ÔlÌãÔiÓ=ÍâªÆó!êÏÙiÌãÃiÅhÙ0ó!
â ÷ÏÌÒæÍÙiÌïë Ó×GðÓÕÌ«G8×QÝ
ätÕÞÚ å	Ë*ÚjGá&Ì«Þ_Ø[ÚæÛeØ*Ì«Ë&ØØÜ*Ø(,ÕQË*ß	Õ ÿeõ-/Õ bâ ï Çi!Ç ¶ë
ðGÐÝOêÏêÏÆ5ÒæÍæÆÅ5ÕCù&ë!ÝEë¬Õ mËJÔlÒæÆ5Ìbé!ê ÷ÏÍæÍÕÊù&Bë p!Ç ÊÇ ë#äíÊÒæÍæÆ5ÎÙ0(Í ÷ÏÐÌCÔlÌCê ÷ÏÌªÆ5Ù0Åó!êÏÙiÌ!Ì ÷ÏÌªÃªë?Örz
Ì Ô2ÕQ×.Ë&Ø>Ø>ÙGÚÌeÛGÜ

×ÝtÞß Øì,ÞßAÞÚ×GÌG â ×GÌJÝJØÕ(ØÌ«ËØ×ÝtÞß ØäéØÕÚjË>GÌxätÜ&Ü×JËJÚ,ÞÚj×GÌ Ý×,ÕätÕÞÚ å	Ë*ÚjGá&Ì¨Þ_ØCÚ`ÛØÌ«ËØ
êäääá&ëQìAÿîÕªóCó=ë ° · ²Yï+° · ãÝÌCÙiâªÆJ÷ÏÎçÕÞ#ÝîëZðLÖrå ×òÅÆ5ÒhÒë
ðGÐùOÆÅÎÔiÍæÍÕùEëpÇ! ° ë Ý âªÆ5ÄCÅ>Ï÷ ÒæÍ(Ï÷ Ð"Æ5ÒæÍ(Ï÷ ÎÙ0ÍæÔiÅçÓ/ÔiÅçÎÆ5ÙiÌCÒpþ¸Æ5Ì!ÚCÒ{ÙiÌCÙiê¬íÊÒ(÷ÏÒ÷ÏÌ7ó!êÏÙiÌCÌ÷xÌªÃªë ÖpÌ
Ô2ÕQ×.Ë&Ø>Ø>ÙGÚÌeÛGÜv×QÝ1ÞßÓ7Ø *AÕQÙýá&Ì«Þ_ØÕÌ«,ÞÚj×GÌ«G â ×GÌJÝJØÕ(ØÌË&Øv×GÌäÕÞÚ å	Ë*ÚjGÖá&Ì«Þ_Ø[ÚæÛeØ*Ì«Ë&ØxÔ2`GÌ¨ÌÚÌÛ
ç«èEÜÞ_Øé ÜãêäáÔÖç¨ëQ5ì &î ÕCó!ó=ëïÇ ²  ï Ç ² ësÝÝÝÖQ×òÅÆ5ÒhÒÕðLÆ5ÌCê¬Ô×Ù0Åô+ë
ðGÐùOÆÅÎÔiÍæÍÕù&ë¬ÕòÆÍ`Ùiêë?pÇ!bë ú8ß Ø¶Ô	òtòó ÔÖæGÌÌ¨ÚÌeÛvò ×GépGÚÌò Øjå
ÌÚÞÚ×,Ìó8GÌeÛAð .Ûe~Ø ë7åJâªÆ
ÝOÖp×äbþ×ØêÏÙiÌCÌx÷ ÌªÃÞQÔlÎósÆÍ(¬÷ Í(¬÷ ÔlÌ"ÞÔlÎpÏ÷ ÍæÆÆië
ðGÐùOÆÅÎÔiÍæÍÕØù&ëE
  ëLpÇ!bëáÒ(Ï÷ ÌCÃLÅÆÃiÅhÆ5ÒÒ(¬÷ ÔlÌÊþðÎ`Ù0ÍÐhâüÃiÅhÙ0ó!âCÒ&ÍæÔ(Ð~ÔlÌbÍæÅÔlê#ÒæÆ5Ù0ÅhÐâx÷ Ì3ó!êxÙiÌCÌÏ÷ ÌªÃªë
ätÕÞÚ å	Ë*ÚjGá&Ì«Þ_Ø[ÚæÛeØ*Ì«Ë&Ø Õ8ÿ$õ,´ì pÇdþbÕòÇiÇiÇ ï Ç!¶ë
ð0¬÷ ÍÐhâªÆ5êxêÕù&ë¬ÕñäÆ5êÏÎÙiÌ=ÕÛë¬Õ Ü=ÆÑiÆ5ÒhûbÄªÆiÕ#Eë´öCëpÇ!bëvÙ0ÅhÚ3ÙiÌ!Ú1Æ5ÙiÒæí1Úx÷ ÒæÍæÅ>¬÷ é!ÄCÍ(¬÷ ÔlÌCÒÔiÓäÊÝå
ó!ÅÔié!ê¬Æ5ÎÒ5ë	ÖpÌ¡Ô2ÕQ×JËØ>Ø>ÙGÚÌÛGÜ×QÝ2ÞßÓØÿ$õGÞ/
ß AÞÚ×GÌG â ×GÌJÝJØÕ(ØÌ«ËØ×ÝÖÞß Ø	äéØ*Õ&ÚjË>GÌätÜ&Ü×JËJÚAÞÚ×GÌ
Ý*×GÕätÕÞÚ å	Ë*ÚjGá&Ì«Þ_Ø[ÚæÛeØ*Ì«Ë&Ø¶êäääá&ëìGô*-î ÕªóCó=ë ² ¶ Öï ²Ö° ¶çäÊÙiÌvölÔlÒæÆiÕ+ÞQÝEëZð"Öpå]×ñÅÆ5ÒÒë
}OÆé+Æ5ê¸ÕJÛOë(0ÈiÈiÈÖë àÌ7ÍâªÆLÐ~ÔlÎó«Ï÷ êÏÙ0é¨Ï÷ ê]¬÷ ÍðíKÙiÌCÚ7Æ~öóCÅhÆ5ÒÒ(¬÷ ÑiÆLó+ÔáØÆÅÔiÓóCÅhÔió+ÔlÒ>¬÷ Í(¬÷ ÔlÌCÙiê#óêÏÙiÌCÌÏ÷ ÌCÃ
Ó/ÔiÅhÎÙiê]Ï÷ ÒÎÒë! ×GðÓÕ&ÌG×QÝätÕÞÚ å	Ë*ÚjGá&Ì«Þ_Ø[ÚæÛeØ*Ì«Ë&Ø ØÜ*Ø(,ÕQË*	ß Õÿ,lô Õ/bâÇ ï · Ç!¶ë
}OÆé+Æ5ê¸ÕÛë¬ÕªùtÏ÷ ÎÔiósÔlÄCê¬ÔlÒÕ5èë¬ÕÂßÔÆ5âCê¬ÆÅÕ+öªë1pÇ!bâëÖrÃlÌªÔiÅ>Ï÷ ÌªÃ ¬÷ ÅÅÆ5êÏÆÑ-ÙiÌbÍñÓSÙiÐ~ÍÒ#ÙiÌCÚÔiósÆÅhÙ0ÍæÔiÅhÒÖÏ÷ Ì
óêÏÙiÌîÃiÆ5ÌCÆÅhÙ0Í(¬÷ ÔlÌïëªÖpÌäÍæÆÆ5êÕbä+ë¬ÕAÝOêÏÙiÎ÷ ÕiËëZAÌñÚCÒ5ëùÕ5Ø(ËØÌ¨Þä	Ù GGÌ«ËØÜ2ÚÌpäáÔÖæGÌÌÚÌeÛ 
Óà¨Þß
2ðÓÕQ×&öØ(GÌ â ×,ÌJÝ*Ø*ÕØ*Ì«Ë&Ø¡×,ÌÔ2`,ÌÌÚÌeÛê  â 
Ô  ì Qî Õ¨  ÔlêëBÇ · ² ÔiÓ
ó5Ø>ËJÞðÓÕ(Ø ×,Þ_ØÜÚÌzäÕÞÚ å	ËJÚG
á&Ì«Þ_Ø[ÚæÛeØ*Ì«Ë&Ø ÕCóCó=ë ··  ï · ¶0È{åBÔlÄ!ê¬ÔlÄCÒæÆiÕªø ÅÙiÌCÐ~Æiësäó!Å>Ï÷ ÌªÃiÆÅæþm  ÆÅêÏÙ0Ãªë
×?Æ5ÚCÌCÙiÄCêÏÍÕ`ÌJëJ×?ëÉpÇ!bë ÝùÜñÉLÌöÊó!ê¬ÔiÅ>x÷ ÌªÃ3ÍâªÆ(Îpx÷ ÚCÚCê¬ÆLÃiÅÔlÄCÌCÚ ésÆÍðáÆÆ5Ì äÊåËJÖp×äÙiÌCÚ ÍâªÆ
Ò>¬÷ ÍÄCÙ0Í(¬÷ ÔlÌNÐÙiêxÐÄCêÏÄCÒëñÖrÌNÛÅhÙiÐâCÎÙiÌïÕËë¬ÕÜBÆÑiÆ5ÒûÄªÆiÕYEëYöªë¬Õ/mËJÆJ¬÷ ÍæÆÅÕ!ËëBAÌØÚCÒëùÕ½ÔÖÕÚÌ«ËJÚ"öæØÜ
×Ý Ì	× 12æØ>ÙJÛe8Ø ØTö«Õ(ØÜ*Ø*Ì¨Þm,ÞÚj×GÌ GÌ«9Ù Ø>YÜ×GÌ¨ÚÌe5Û Ô2ÕQ×.Ë&Ø>Ø>ÙGÚÌeÛGÜ×QÝvÞßÓØÿYÜÞ á&Ì¨Þ_Ø*Õ&Ì,ÞÚ×,Ì«G
â ×,ÌJÝ*Ø*ÕØ*Ì«Ë&Øxê  ëQí$ì-î ÕCóCó=ë ·  ²Yï ·· Ç&åBÔiÅhÔlÌ	ÍæÔªÕïàtî} ëYð"ÔiÅÃlÙiÌLßÙiÄªÓSÎÙiÌCÌïë
ËJÆÓSÙiÌÏ÷ Ú¨Ï÷ ÒÕòÖdë¬Õ{   êÏÙiâCÙ5Ñ0ÙiÒÕÖëpÇ!bë±ËåÉñÙ(ÚªÔlÎ`Ù,Ï÷ ÌÏ÷ ÌCÚªÆósÆ5ÌCÚCÆ5Ì	ÍèâªÆ5ÄªÅ>x÷ ÒæÍ(Ï÷ ÐãÓ½ÔiÅäªåJËJÖp×ä
áÔiÅhêÏÚ!Òîé!ÙiÒÆ5Ú3ÔlÌúÃiÅÆÆ5Úªí1ÅhÆÃiÅÆ5ÒÒ(¬÷ ÔlÌúÍÙ0é!ê¬Æ5Ò5ë"ÖpÌúÛÖÏ÷ ÄCÌ!ÚªÔªÕäsë¬ÕM°ªø Ô5ösÕ{ðúëAÌØÚCÒëùÕØ>Ë&Ø*Ì¨Þ
ä	Ù GGÌ«Ë&ØÜÚÌäáÔÖæGÌÌÚÌeÛ 
:,Þ-ß ÖðÓÕ×&ö Ø(,Ì â ×GÌJÝJØÕ(ØÌ«ËØ×GÌ1Ô2`GÌ¨ÌÚÌÛê  â ;Ô  ì$ìî ùÄªÅâCÙiÎçÕ
ßë+äÊóCÅ>Ï÷ ÌªÃiÆÅþm  ÆÅhêÏÙ0Ãªë
ËJÆÓSÙiÌÏ÷ Ú¨Ï÷ ÒÕ?Öë¬Õ#°  êÏÙiâ!Ù5Ñ0ÙiÒÕòÖdë0ÈiÈiÈÖëáÌòöóê¬ÔA¬÷ Í(Ï÷ ÌªÃNÒÍÙ0ÍæÆNÐ~ÔlÌCÒæÍæÅhÙ,Ï÷ ÌbÍÒ¡Ï÷ ÌüâªÆ5ÄªÅ>Ï÷ ÒÍ(Ï÷ ÐÒæÍÙ0ÍæÆ~þðÒæóÙiÐ~Æ
óêÏÙiÌCÌÏ÷ ÌCÃªëBÖpÌLÞQâ¬÷ Æ5Ì=Õªä+ë¬ÕCßîÙiÎîé!â!ÙiÎó!Ù0Í(÷ ÕªËë¬Õ/HßÌªÔié!ê¬ÔÊÐô+ÕÞë-AÌØÚCÒëùÕ«ÔÖÕ×JËØ>Ø(Ù,ÚÌeÛ,Ü ×QÝÞß Ø
AÞßá&Ì¨Þ_Ø*Õ&Ì,ÞÚ×,Ì«G â ×GÌJÝJØÕ(ØÌË&Øã×GÌäÕÞÚ å	Ë*ÚjGÀá&Ì¨Þ_Ø[ÚæÛeØ*Ì«Ë&ØÔÖæGÌÌÚÌeÛxç¨èYÜÞ_Øé ÜêäáÔç«ëõAõî Õ
ó!ó=ë · ° · ï · â-ÈÊëïÝOÝÝÖQ×òÅhÆ5ÒÒÕZðLÆ5ÌCê¬Ô`×Ù0Åô+ë
H.- D

S6TU<U<VWYXZX\[^]`_ba+_bc

ËÄ!ÒÒæÆ5êÏêÕÊä+ë¬Õ©}OÔiÅÑÓ÷¬ÃªÕÊ×ë"pÇ!¶bëäÕÞÚ å	Ë*ÚjGÓá&Ì«Þ_Ø[ÚæÛeØ*Ì«Ë&Ø%ä¼ü×JÙ$Ø*Õ&ÌäöAöÕQ×J$Ëß	ë?×òÅÆ5ÌbÍ(÷ÏÐ~Æ~þ%ÙiêÏêÕ
ÌØÌªÃlê¬ÆáÔbÔÊÚLÞQ]ê ÷sÒ5Õ }6öªë
Óä ÷¬ÆÃiÆ5ê¸Õbä+ë¬bÕ }îbë öCëbÞQÙiÒæÍæÆ5êÏêÏÙiÌ=ÖÕ öªZë p!Ç b<ë ×GÌGö GÕQ,épØJÞÕ&ÚjËtçÞm,ÞÚ]ÜÞÚË*Ü8Ý*×GÕÞßÓØ>=tØß+.Új×GÕQ,çËJÚjØ*Ì«Ë&ØÜ
0Ì!ÚçÆ5Ú ÷¬(Í ÷¬Ôl/Ì ë ðLÐ ÅÙ5á#%þ ÷ÏêÏêë
äÊêÏÙiÌCÆíi?Õ öªë¬LÕ  åJâ ÷ÏÆé!ÙiÄÊösÕä+(ë 0ÈiÈªÇ ë ÛQê¬ÔÊÐôÊÒ{áØÔiÅêÏÚAÅÆÑ ÷x(Ò ÷¬ÍæÆ5Úïë äÕÞÚ åË*ÚjG2á&Ì«Þ_Ø[ÚæÛeØ*Ì«Ë&ØÕ ÿGô5iÕ
Çi!Ç  ï !Ç ¶ · ë

H.-FP

Journal of Articial Intelligence Research 14 (2001) 167{203

Submitted 12/99; published 04/01

What's in an Attribute?
Consequences for the Least Common Subsumer

Ralf Kusters

kuesters@ti.informatik.uni-kiel.de

Institut f
ur Informatik und Praktische Mathematik
Christian-Albrechts-Universit
at zu Kiel
24098 Kiel
Germany

Alex Borgida

borgida@cs.rutgers.edu

Department of Computer Science
Rutgers University
Piscataway, NJ 08855
USA

Abstract

Functional relationships between objects, called \attributes", are of considerable importance in knowledge representation languages, including Description Logics (DLs). A study
of the literature indicates that papers have made, often implicitly, dierent assumptions
about the nature of attributes: whether they are always required to have a value, or whether
they can be partial functions. The work presented here is the rst explicit study of this
dierence for subclasses of the Classic DL, involving the same-as concept constructor.
It is shown that although determining subsumption between concept descriptions has the
same complexity (though requiring dierent algorithms), the story is dierent in the case
of determining the least common subsumer (lcs). For attributes interpreted as partial
functions, the lcs exists and can be computed relatively easily; even in this case our results
correct and extend three previous papers about the lcs of DLs. In the case where attributes
must have a value, the lcs may not exist, and even if it exists it may be of exponential size.
Interestingly, it is possible to decide in polynomial time if the lcs exists.
1. Introduction

Knowledge representation systems based on Description Logics (DLs) have been the subject of continued attention in Articial Intelligence, both as a subject of theoretical studies
(Borgida, 1994; Baader, 1996; Baader & Sattler, 2000; Giacomo & Lenzerini, 1996; Calvanese, Giacomo, & Lenzerini, 1999b) and in applications (Artale, Franconi, Guarino, &
Pazzi, 1996; Brachman, McGuinness, Patel-Schneider, & Borgida, 1999; McGuinness &
Patel-Schneider, 1998). More impressively, DLs have found applications in other areas involving information processing, such as databases (Borgida, 1995; Calvanese, Lenzerini,
& Nardi, 1999), semi-structured data (Calvanese, Giacomo, & Lenzerini, 1998, 1999a),
information integration (Calvanese, Giacomo, Lenzerini, Nardi, & Rosati, 1998; Borgida
& Kusters, 2000), as well as more general problems such as conguration (McGuinness
& Wright, 1998) and software engineering (Borgida & Devanbu, 1999; Devanbu & Jones,
1997). In fact, wherever the ubiquitous term \ontology" is used these days (e.g., for proc 2001 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

 steres, Borgida
Ku

viding the semantics of web/XML documents), DLs are prime contenders because of their
clear semantics and well-studied computational properties.
In Description Logics, one takes an object-centered view, where the world is modeled as
individuals, connected by binary relationships (here called roles), and grouped into classes
(called concepts). For those more familiar with Predicate Logic, objects correspond to
constants, roles to binary predicates, and concepts to unary predicates. In every DL system,
the concepts of the application domain are described by concept descriptions that are built
from atomic concepts and roles using the \constructors" provided by the DL language. For
example, consider a situation where we want a concept describing individual cars that have
had frequent (at least 10) repairs, and also record the fact that for cars, their model is the
same as their manufacturer's model. Concepts can be thought of as being built up from
(possibly nested) simpler noun-phrases, so the above concept, called Lemon in the sequel,
might be captured as the conjunction of
(objects that are Cars)
(things all of whose model values are in concept Model)
(things all of whose madeBy values are in concept Manufacturer)
(things whose model value is the same as the model of the madeBy attribute)
(things with at least 10 repairs values)
(things all of whose repairs values are RepairReport).
Using the syntax of the classic language, we can abbreviate the above, while emphasizing
the term-like nature of descriptions and the constructors used in each:
(and Car
(all model Model)
(all madeBy Manufacturer)
(same-as (model) (madeBy Æ model))
(at-least 10 repairs)
(all repairs RepairReport))
So, for example, the concept term (at-least n p) has constructor at-least, and denotes
objects which are related by the relationship p to at least n other objects; in turn, (all p
C) has as instances exactly those objects which are related by p only to instances of C.
Finally, we present the same concept in a mathematical notation which is more succinct
and preferred in formal work on DLs:
Lemon := Car u
8model:Model u
8madeBy:Manufacturer u
madeBy # (model Æ madeBy) u
 10 repairs u
8repairs:RepairReport

Unlike preceding formalisms, such as semantic networks and frames (Quillian, 1968; Minsky,
1975), DLs are equipped with a formal semantics, which can be given by a translation into
168

What's in an Attribute?

rst-order predicate logic (Borgida, 1994), for example. Moreover, DL systems provide their
users with various inference capabilities that allow them to deduce implicit knowledge from
the explicitly represented knowledge. For instance, the subsumption algorithms allow one to
determine subconcept-superconcept relationships: C is subsumed by D (C v D) if and only
if all instances of C are also instances of D, i.e., the rst description is always interpreted
as a subset of the second description. For example, the concept Car obviously subsumes the
concept description Lemon, while (at-least 10 repairs) is subsumed by (at-least 8 repairs).
The traditional inference problems for DL systems, such as subsumption, inconsistency
detection, membership checking, are by now well-investigated. Algorithms and detailed
complexity results for realizing such inferences are available for a variety of DLs of diering
expressive power | see, e.g., (Baader & Sattler, 2000) for an overview.
1.1 Least Common Subsumer

The least common subsumer (lcs) of concepts is the most specic concept description subsuming the given concepts. Finding the lcs was rst introduced as a new inference problem
for DLs by Cohen, Borgida, and Hirsh (1992). One motivation for considering the lcs is to
use it as an alternative to disjunction. The idea is to replace disjunctions like C1 t    t C
by the lcs of C1; : : : ; C . Borgida and Etherington (1989) call this operation knowledge-base
vivication. Although, in general, the lcs is not equivalent to the corresponding disjunction,
it is the best approximation of the disjunctive concept within the available language. Using
such an approximation is motivated by the fact that, in many cases, adding disjunction
would increase the complexity of reasoning.1
As proposed by Baader et al. (Baader & Kusters, 1998; Baader, Kusters, & Molitor,
1999), the lcs operation can be used to support the \bottom-up" construction of DL knowledge bases, where, roughly speaking, starting from \typical" examples an lcs algorithm
is used to compute a concept description that (i) contains all these examples, and (ii) is
the most specic description satisfying property (i). Baader and Kusters have presented
such an algorithm for cyclic ALN -concept descriptions; ALN is a relatively simple language allowing for concept conjunction, primitive negation, value restrictions, and number
restrictions. Also, Baader et al. (1999) have proposed an lcs algorithm for a DL allowing
existential restrictions instead of number restrictions.
Originally, the lcs was introduced as an operation in the context of inductive learning
from examples (Cohen et al., 1992), and several papers followed up this lead. The DLs
considered were mostly sublanguages of Classic which allowed for same-as equalities, i.e.,
expressions like (same-as (madeBy) (model Æ madeBy)). Cohen et al. proposed an lcs
algorithm for ALN and a language that allows for concept conjunction and same-as, which
we will call S . The algorithm for S was extended by Cohen and Hirsh (1994a) to CoreClassic, which additionally allows for value restrictions (see (Cohen & Hirsh, 1994b) for
experimental results). Finally, Frazier and Pitt (1996) presented an lcs algorithm for full
Classic.
n

n

1. Observe that if the language already allows for disjunction, we have lcs(C1 ; : : : ; Cn )  C1 t    t Cn . In
particular, this means that, for such languages, the lcs is not really of interest.

169

 steres, Borgida
Ku

1.2 Total vs. Partial Attributes

In most knowledge representation systems, including DLs, functional relationships, here
called attributes (also called \features" in the literature), are distinguished as a subclass
of general relationships, at least in part because functional restrictions occur so frequently
in practice2 . In the above example, clearly madeBy and model are meant to be attributes,
thus making unnecessary number restrictions like (and (at-most 1 madeBy) (at-least
1 madeBy)). In addition, distinguishing attributes helps identify tractable subsets of DL
constructors: in Classic, coreferences between attribute chains (as in the above examples)
can be reasoned with eÆciently (Borgida & Patel-Schneider, 1994), while if we changed to
roles, e.g., allowed (same-as (repairs) (ownedBy Æ repairsPaidFor)), the subsumption problem becomes undecidable (Schmidt-Schau, 1989).
Whereas the distinction between roles and attributes in DLs is both theoretically and
practically well understood, we have discovered that another distinction, namely the one between attributes being interpreted as total functions (total attributes ) and those interpreted
as partial functions (partial attributes ), has \slipped through the cracks" of contemporary
research. A total attribute always has a value in \the world out there", even if we do not
know it in the knowledge base currently. A partial attribute may not have a value. This
distinction is useful in practice, since there is a dierence between a car possibly, but not
necessarily, having a CD player, and the car necessarily having a manufacturer (which just
may not be known in the current knowledge base). The latter is modeled by dening the
attribute madeBy to be a total attribute. Note that with madeBy being a total attribute,
every individual in the world of discourse (not only cars) must have a ller for madeBy.
Since, however, no structural information is provided for llers of madeBy of non-car individuals, all implications drawn about these llers are trivial. Thus, making madeBy a total
attribute seems reasonable in this case. A car's CD player, on the other hand, should be
modeled by a partial attribute to express the fact that cars are not required to have a CD
player. To indicate that a particular car does have a CD player, one would have to add the
description (at-least 1 CDplayer).
1.3 New Results

As mentioned above, in conjunction with the same-as constructor, roles and attributes
behave very dierently with respect to subsumption. The main objective of this paper is to
show that the distinction between total and partial attributes induces signicantly dierent
behaviour in computing the lcs, in the presence of same-as. More precisely, the purpose of
this paper is twofold.
First, we show that with respect to the complexity of deciding subsumption there is no
dierence between partial and total attributes. Borgida and Patel-Schneider (1994) have
shown that when attributes are total, subsumption of classic concept descriptions can
be decided in polynomial time. As shown in the present work, slight modications of the
algorithm proposed by Borgida and Patel-Schneider suÆce to handle partial attributes.
2. Readers coming from the Machine Learning community should be aware of the dierence between our
\attributes" (functional roles) and their \attributes", which are components of an input feature vector
that usually describes an exemplar.

170

What's in an Attribute?

Moreover, these modications do not change the complexity of the algorithm. Thus, partial
and total attributes behave very similarly from the subsumption point of view.
Second, and this is the more surprising result of this paper, the distinction between
partial and total attributes does have a signicant impact on the problem of computing the
lcs. Previous results on sublanguages of classic show that if partial attributes are used,
the lcs of two concept descriptions always exists, and can be computed in polynomial time.
If, however, only total attributes are involved, the situation is very dierent. The lcs need
no longer even exist, and in case it exists its size may grow exponential in the size of the
given concept descriptions. Nevertheless, the existence of the lcs of two concept descriptions
can be decided in polynomial time.
Specically, in previous work (Cohen et al., 1992; Cohen & Hirsh, 1994a; Frazier &
Pitt, 1996) concerning the lcs computation in classic, constructions and proofs have been
made without realizing the dierence between the two types of attributes. Without going
into details here, the main problem for lcs is that merely nite graphs have been employed,
making the constructions applicable only for the partial attribute case. In addition to xing
these problems, this paper also presents the proper handling of inconsistent concepts in the
lcs algorithm for classic presented by Frazier and Pitt (1996).
Although our results about subsumption are not as intriguing, the proofs to show the
results on the lcs make extensive use of the corresponding subsumption algorithms, which
is one reason we present them beforehand in this paper.
Returning to the general dierences between the cases of total and partial attributes,
one could say that the fundamental cause for the dierences lies in the same-as constructor,
whose semantics normally requires that (i) the two chains of attributes each have a value,
and (ii) that these values coincide. In the case of total attributes, same-as obeys the principle
C v u # v implies C v u Æ w # v Æ w
where u,v, and w are sequences of total attributes, e.g., (madeBy Æ model), because condition
(i) is ensured by the total aspect of all the attributes. In the case of partial attributes, the
above implication does not hold, because w, and hence u Æ w, is no longer guaranteed to have
a value, implying that the same-as restriction may not hold. Clearly, this implication aects
the results of subsumption. As far as lcs is concerned, a certain graph (representing the lcs
of the two given concepts) may be innite in the case of total attributes, thus jeopardizing
the existence of the lcs.
The more general signicance of our result is that knowledge representation language
designers and users need to explicitly check at the beginning whether they deal with total or partial attributes because the choice can have signicant eects. Although in some
situations total attributes are convenient, to guarantee the existence of attributes without
having to resort to number restrictions, our results show that they can have drawbacks.
All things considered, requiring all attributes to be total appears to be less desirable. Concerning classic, the technical results in this paper support the use of partial attributes
because these ensure the existence of the lcs and its computation in polynomial time as
well as the eÆcient decision of subsumption. Moreover, the current implementation of the
classic subsumption algorithm does not require major changes in order to handle partial
attributes.
171

 steres, Borgida
Ku

The outline of this paper is as follows: In the following section, the basic notions necessary for our investigations are introduced. Then, in the two subsequent sections, subsumption and lcs computation in classic with partial attributes is investigated. More precisely,
in Section 3 we oer a subsumption algorithm for the sublanguage classic of classic,
which contains all main classic-constructors; in Section 4, we present an lcs algorithm
for classic concept descriptions, along the lines of that proposed by Cohen and Hirsh
(1994a), and formally prove its correctness, thereby resolving some shortcomings of previous
lcs algorithms, which did not handle inconsistencies properly. Finally, Section 5 covers the
central new result of this paper, i.e., the lcs computation in presence of total attributes.
For this section, we restrict our investigations to the sublanguage S of classic in order to
concentrate on the changes caused by going from partial to total attributes. Nevertheless,
we strongly conjecture that all the results proved in this section can easily be extended to
classic and classic using similar techniques as the one employed in the two previous
sections.
2. Formal Preliminaries

In this section, we introduce the syntax and semantics of the description languages considered in this paper and formally dene subsumption and equivalence of concept descriptions.
Finally, the least common subsumer of concept descriptions is specied.
Denition 1 Let C , R, and A be disjoint nite sets representing the set of concept names,
the set of role names, and the set of attribute names. The set of all classic -concept
descriptions over C , R, and A is inductively dened as follows:
 Every element of C is a concept description (concept name, like Car).
 The symbol > is a concept description (top concept, denoting the universe of all
objects).
 If r 2 R is a role and n  0 is a nonnegative integer, then  n r and  n r are concept
descriptions (number restrictions, like  10 repairs).
 If C and D are concept descriptions, then C u D is a concept description (concept
conjunction).




If C is a concept description and r is a role or an attribute, then
description (value restriction, like 8madeBy:Manufacturer).

8r:C

is a concept

If k; h  0 are non-negative integers and a1 ; : : : ; a ; b1 ; : : : ; b 2 A are attributes, then
Æ    Æ a # b1 Æ    Æ b is a concept description (same-as equality, like madeBy #
model Æ madeBy). Note that the two sequences may be empty, i.e., k = 0 or h = 0.
The empty sequence is denoted by ".
k

a1

k

h

h

Often we dispense with Æ in the composition of attributes. For example, the sequence
a1 Æ   Æ a is simply written as a1    a . Moreover, we will use 8r1    r :C as abbreviation
of 8r1:8r2    8r :C , where we have 8":C in case n = 0, and this denotes C .
As usual, the semantics of classic is dened in a model-theoretic way by means of
interpretations.
k

n

k

n

172

What's in an Attribute?

Denition 2 An interpretation I consists of a nonempty domain I and an interpretation
function I . The interpretation function assigns extensions to atomic identiers as follows:





The extension of a concept name E is some subset E I of the domain.
The extension of a role name r is some subset rI of I  I .

The extension of an attribute name a is some partial function aI from I to I , i.e.,
if (x; y1 ) 2 aI and (x; y2 ) 2 aI then y1 = y2 .
Given roles or attributes r , we use (r1    r )I to denote the composition of the binary
relations rI . If n = 0 then the result is "I , which denotes the identity relation, i.e., "I :=
f(d; d) j d 2 I g. For an individual d 2 I , we dene rI (d) := fe j (d; e) 2 rI g. If the r 's
are attributes, we say that (r1    r )I is dened for d i (r1    r )I (d) 6= ;; occasionally,
we will refer to (r1    r )(d)I as the image of d under (r1    r )I (d).
The extension C I of a concept description C is inductively dened as follows:
 >I := I ;
i

n

i

i

n

n

n

n

( n r)I := fd 2 I j cardinality(fe 2 I j (d; e) 2 rI g)  ng;
( n r)I := fd 2 I j cardinality(fe 2 I j (d; e) 2 rI g)  ng;
(C u D)I := C I \ DI ;
(8r:C )I := fd 2 I j rI (d)  C I g where r is a role or an attribute;
(a1    a # b1    b )I := fd 2 I j (a1    a )I and (b1    b )I are dened for d
and (a1    a )I (d) = (b1    b )I (d)g:
Note that in the above denition attributes are interpreted as partial functions. Since the
main point of this paper is to demonstrate the impact of dierent semantics for attributes,
we occasionally restrict the set of interpretations to those that map attributes to total
functions. Such interpretations are called t-interpretations and the attributes interpreted
in this way are called total attributes in order to distinguish them from partial ones.
We stress, as remarked in the introduction, that in the denition of (a1    a # b1    b )I ,
a1    a and b1    b must be dened on d in order for d to satisfy the same-as restriction.
Although this is the standard semantics for same-as equalities, one could also think of
relaxing this restriction. For example, the same-as condition might be specied to hold if
either both paths are undened or both images are dened and have identical values. A
third denition might be satised if even just one of the paths is undened. Each of these
denitions of the semantics of same-as might lead to dierent results. However, in this
paper we only pursue the standard semantics.
The subsumption relationship between concept descriptions is dened as follows.
Denition 3 A concept description C is subsumed by the concept description D (C v D
for short) if and only if for all interpretations I , C I  DI . If we consider only total
interpretations, we get t-subsumption: C v D i C I  DI for all t-interpretations I .






k

h

k

h

k

h

k

k

h

t

173

h

 steres, Borgida
Ku

Having dened subsumption, equivalence of concept descriptions is dened in the usual way:
 D if and only if C v D and D v C . T-equivalence C  D is specied analogously.
As already mentioned in the introduction, the main dierence between partial and total
attributes with respect to subsumption is that u # v v u Æ w # v Æ w holds for all attribute
chains u; v; w, whereas it is not necessarily the case that u # v v u Æ w # v Æ w.
Finally, before introducing the lcs operation formally and concluding this section, we
comment on the expressive power of classic , since (syntactically) classic lacks some
common constructors. Although classic , as introduced here, does not contain the bottom
concept ? explicitly, it can be expressed by, e.g., ( 1 r) u ( 0 r). We will use ? as an
abbreviation for inconsistent concept descriptions. Furthermore, primitive negation, i.e.,
negation of concept names, can be simulated by number restrictions. For a concept name
E one can replace every occurrence of E by ( 1 r ) and the negation :E of E by ( 0 r )
where r is a new role name. Finally, for an attribute a the following equivalences hold:
( n a)  ? for n  2; ( 1 a)  (a # a); ( 0 a)  >; ( n a)  > for n  1; and
( 0 a)  (8a:?). These show that we do not lose any expressive power by not allowing
for number restrictions on attributes. Still, full classic is somewhat more expressive than
classic . This is mainly due to the introduction of individuals (also called nominals) in
classic. For the sake of completeness we give the syntax of the full classic language.3
This requires a further set, O, representing the set of individual names. Then we can dene
two additional concept constructors
 fe1 ; :::; e g, for individuals e 2 O (enumeration as in fF all; Summer; Springg)
 p : e for a role or attribute p, and an individual e (lls as in currentSeason : Summer).
In a technical report, Kusters and Borgida (1999) extend some of the results presented in
this work to full classic, in the case when individuals have a non-standard semantics.
The least common subsumer of a set of concept descriptions is the most specic concept
subsuming all concept descriptions of the set:
Denition 4 The concept description D is the least common subsumer (lcs) of the concept
descriptions C1 ; : : : ; C (lcs(C1 ; : : : ; C ) for short) i i) C v D for all i = 1; : : : ; n and ii)
for every D0 with that property D v D0 . Analogously, we dene lcs (C1 ; : : : ; C ) using v
C

t

t

E

E

E

m

i

n

n

i

t

instead of v.

n

t

Note that the lcs of concept descriptions may not exist, but if it does, by denition it is
uniquely determined up to equivalence. In this sense, we may refer to the lcs.
In the following two sections, attributes are always interpreted as partial functions; only
in Section 5 do we consider total attributes.
3. Characterizing Subsumption in

classic

In this section we modify the characterization of t-subsumption for Classic, as proposed
by Borgida and Patel-Schneider (1994), to handle the case of partial attributes. We do
3. Even here we are omitting constructs dealing with integers and other so-called \host individuals", which
cannot have roles of their own and can only act as role/attribute llers.

174

What's in an Attribute?

so in detail, because the tools used for deciding subsumption are intimately related to the
computation of lcs.
T-subsumption in Classic is decided by a multi-part process. First, descriptions are
turned into description graphs. Next, description graphs are put into canonical form, where
certain inferences are explicated and other redundancies are reduced by combining nodes
and edges in the graph. Finally, t-subsumption is determined between a description and a
canonical description graph.
In order to \inherit" the proofs, we have tried to minimize the necessary adjustments to
the specication in (Borgida & Patel-Schneider, 1994). For this reason, roughly speaking,
attributes are treated as roles unless they form part of a same-as equality. (Note that
attributes participating in a same-as construct must have values!) To some extent, this
will allow us to adopt the semantics of the original description graphs, which is crucial for
proofs. However, the two dierent occurrences of attributes, namely, in a same-as equality
vs. a role in a value-restriction, require us to modify and extend the denition of description
graphs, the normalization rules, and the subsumption algorithm itself.
In the following, we present the steps of the subsumption algorithm in detail. We start
with the denition of description graphs.
3.1 Description Graphs

Intuitively, description graphs reect the syntactic structure of concept descriptions. A
description graph is a labeled, directed multigraph, with a distinguished node. Roughly
speaking, the edges (a-edges ) of the graph capture the constraints expressed by same-as
equalities. The labels of nodes contain, among others, a set of so-called r-edges, which
correspond to value restrictions. Unlike the description graphs dened by Borgida and
Patel-Schneider, here the r-edges are not only labeled with role names but also with attribute
names. (We shall comment later on the advantage of this modication in order to deal with
partial attributes.) The r-edges lead to nested description graphs, representing the concepts
of the corresponding value restrictions.
Before dening description graphs formally, in Figure 1 we present a graph corresponding
to the concept description Lemon dened in the introduction. We use G(Manufacturer),
G(Model), as well as G(RepairReport) to denote description graphs for the concept names
Manufacturer, Model, and RepairReport. These graphs are very simple; they merely consist
of one node, labeled with the corresponding concept name. In general, such graphs can
be more complex since a value restriction like 8r:C leads to a (possibly complex) nested
concept description C .
Although number restrictions on attributes are not allowed, r-edges labeled with attributes, like model and madeBy, always have the restriction [0; 1] in order to capture the
semantics of attributes. Formally, description graphs, nodes, and edges are dened mutually
recursively as follows:
Denition 5 A description graph G is a tuple (N; E; n0 ; l), consisting of a nite set N of
nodes; a nite set E of edges (a-edges); a distinguished node n0 2 N (root of the graph);
and a function l from N into the set of labels of nodes. We will occasionally use the notation
G:N odes, G:Edges, and G:root to access the components N , E and n0 of the graph G.
175

 steres, Borgida
Ku

f>g

madeBy

f>g

RepairReport)

G(

madeBy

repairs

model

[10; 1]

Model)

G(

model [0; 1]

fCar >g
;

madeBy [0; 1]

Manufacturer)

G(

Figure 1: A description graph for Lemon, where the large node is the root of the graph
An a-edge is a tuple of the form (n1 ; a; n2 ) where n1 , n2 are nodes and a is an attribute
name.
A label of a node is dened to be ? or a tuple of the form (C; H ), consisting of a nite
set C of concept names (the atoms of the node) and a nite set H of tuples (the r-edges of
the node). Concept names in a description graph stand for atomic concept names and >.
We will occasionally use the notation n:Atoms and n:REdges to access the components C
and H of the node n.
An r-edge is a tuple, (r; m; M; G0 ), consisting of a role or attribute name, r; a min, m,
which is a non-negative integer; a max, M , which is a non-negative integer or 1; and a
(recursively nested) description graph G0 . The graph G0 will often be called the restriction
graph of the node for the role r. We require the nodes of G0 to be distinct from all the nodes
of G and other nested description graphs of G. If r is an attribute, then we require: m = 0
and M 2 f0; 1g.

Given a description graph G and a node n 2 G:N odes, we dene Gj to be the graph
(N; E; n; l); Gj is said to be rooted at n. A sequence p = n0a1 a2    a n with k  0 and
(n 1; a ; n ) 2 G:Edges, i = 1; : : : ; k, is called path in G from the node n0 to n (p 2 G
for short); for k = 0 the path p is called empty; w = a1    a is called the label of p (the
empty path has label "); p is called rooted if n0 is the root of G. Occasionally, we write
n0 a1    a n 2 G omitting the intermediate nodes.
Throughout this work we make the assumption that description graphs are connected.
A description graph is said to be connected if all nodes of the graph can be reached by a
rooted path and all nested graphs are connected. The semantics of description graphs (see
Denition 6) is not altered if nodes that cannot be reached from the root are deleted.
In order to merge description graphs we need the notion of \recursive set of nodes" of
a description graph G: The recursive set of nodes of G is the union of the nodes of G and
the recursive set of nodes of all nested description graphs of G.
Just as for concept descriptions, the semantics of description graphs is dened by means
of an interpretation I . We introduce a function  which assigns an individual of the domain
of I to every node of the graph. This ensures that all same-as equalities are satised.
n

k

n

i

i

i

k

k

k

k

k

176

What's in an Attribute?

Denition 6 Let G = (N; E; n0 ; l) be a description graph and let I be an interpretation.
An element, d, of I is in GI , i there is some total function, , from N into I such
that
1.

d

= (n0);

2 N , (n) 2 nI ; and
3. for all (n1 ; a; n2 ) 2 E we have ((n1 ); (n2 )) 2 aI .
The extension nI of a node n with label ? is the empty set. An element, d, of I is in nI ,
2. for all

where

( ) = (C; H ), i

l n

2 C , we have d 2 B I ; and
for all (r; m; M; G0 ) 2 H ,

1. for all
2.

n

B

(a) there are between m and M elements, d0 , of the domain such that
and
(b) d0 2 G0I for all d0 such that (d; d0 ) 2 rI .

(d; d0 ) 2 rI ;

Cohen and Hirsh (1994a) dened the semantics of description graphs in a dierent way,
avoiding the introduction of a total function . The problem with their denition is,
however, that it is only well-dened for acyclic graphs, which, for example, excludes sameas equalities of the form " # spouse Æ spouse, or even p # p Æ q.
The semantics of the graphs proposed by Borgida and Patel-Schneider (1994) is similar
to Denition 6. However, in that paper a-edges captured not only same-as equalities but
also all value restrictions on attributes. Still, in the context of partial attributes, we could
not dene the semantics of description graphs by means of a total function  since some
attributes might not have llers. Specifying the semantics of description graphs in terms
of partial mappings  would make the denition even longer. Furthermore, the proofs in
(Borgida & Patel-Schneider, 1994) would not carry over as easily. Therefore, in order to
keep  a total function, value restrictions of attributes are initially always translated into redges. The next section will present the translation of concept descriptions into description
graphs in detail.
Having dened the semantics of description graphs, subsumption and equivalence between description graphs (e.g., H v G) as well as concept descriptions and description
graphs (e.g., C v G) is dened in the same way as subsumption and equivalence between
concept descriptions.
3.2 Translating Concept Descriptions into Description Graphs

Following Borgida and Patel-Schneider (1994), a classic concept description is turned
into a description graph by a recursive process. In this process, nodes and description
graphs are often merged.
Denition 7 The merge of two nodes, n1  n2 , is a new node n with the following label:
if n1 or n2 have label ?, then the label of n is ?. Otherwise if both labels are not equal to
?, then n:Atoms = n1:Atoms [ n2:Atoms and n:REdges = n1:REdges [ n2:REdges.
177

 steres, Borgida
Ku

If G1 = (N1 ; E1 ; n1 ; l1 ) and G2 = (N2 ; E2 ; n2 ; l2 ) are two description graphs with disjoint
recursive sets of nodes, then the merge of G1 and G2 , G := G1 G2 = (N; E; n0 ; l), is dened
as follows:

3.

:= n1  n2;
N := (N1 [ N2 [ fn0 g) n fn1 ; n2 g;
E := (E1 [ E2 )[n1 =n0 ; n2 =n0 ], i.e., E is the union of E1 and E2 where every occurrence

4.

l n

1.
2.

n0

of n1 ; n2 is substituted by n0 ;

( ) := l1(n) for all n 2 N1 n fn1g; l(n) := l2 (n) for all n 2 N2 n fn2 g; and l(n0) is

dened by the label obtained by merging n1 and

n2 .

Now, a classic -concept description C can be turned into its corresponding description
G(C ) by the following translation rules.
1. > is turned into a description graph with one node n0 and no a-edges. The only atom
of the node is > and the set of r-edges is empty.
2. A concept name is turned into a description graph with one node and no a-edges. The
atoms of the node contain only the concept name and the node has no r-edges.
3. A description of the form ( n r) is turned into a description graph with one node and
no a-edges. The node has as its atoms > and it has a single r-edge (r; n; 1; G(>))
where G(>) is specied by the rst translation rule.
4. A description of the form ( n r) is turned into a description graph with one node
and no a-edges. The node has as its atom > and it has a single r-edge (r; 0; n; G(>)).
5. A description of the form a1    a # b1    b is turned into a graph with pairwise
distinct nodes n1; : : : ; n 1; m1; : : : ; m 1, the root m0 := n0, and an additional node
n = m := n; the set of a-edges consists of (n0 ; a1 ; n1 ), (n1 ; a2 ; n2 ); : : : ; (n 1 ; a ; n )
and (m0; b1 ; m1 ), (m1; b2 ; m2 ), : : :, (m 1; b ; m ), i.e., two disjoint paths which coincide on their starting point, n0, and their nal point, n. (Note that for p = 0 the rst
path is the empty path from n0 to n0 and for q = 0 the second path is the empty path
from n0 to n0.) All nodes have > as their only atom and no r-edges.
6. A description of the form 8r:C , where r is a role, is turned into a description graph
with one node and no a-edges. The node has the atom f>g and it has a single r-edge
(r; 0; 1; G(C )).
7. A description of the form 8a:C , where a is an attribute, is turned into a description
graph with one node and no a-edges. The node has the atom f>g and it has a single
r-edge (a; 0; 1; G(C )). (In the work by Borgida and Patel-Schneider, the concept
description 8a:C is turned into an a-edge. As already mentioned, this would cause
problems for attributes interpreted as partial functions when dening the semantics
by means of  as specied in Denition 6.)

graph

p

p

p

q

q

q

p

q

178

q

q

p

p

What's in an Attribute?

8. To turn a description of the form C u D into a description graph, construct G(C ) and
G(D ) and merge them.
Figure 1 shows the description graph built in this way for the concept Lemon of our example.
It can easily be veried that the translation preserves extensions:
Theorem 1 A concept description C and its corresponding description graph G(C ) are
equivalent, i.e.,C I = G(C )I for every interpretation I .
The main diÆculty in the proof of this theorem is in showing that merging two description
graphs corresponds to the conjunction of concept descriptions.
Lemma 1 For all interpretations I , if n1 and n2 are nodes, then (n1  n2 )I = nI1 \ nI2 ; if
I
G1 and G2 are description graphs then (G1  G2 )I = GI
1 \ G2 .
The proof of the preceding statement is rather simple and like the one in (Borgida & PatelSchneider, 1994).
3.3 Translating Description Graphs to Concept Descriptions

Although the characterization of subsumption does not require translating description
graphs back to concept descriptions, this translation is presented here to show that concept descriptions and description graphs are equivalent representations of classic concept
descriptions. In subsequent sections, we will in fact need to turn graphs into concept descriptions.
The translation of a description graph G can be specied in a rather straightforward
recursive denition. The main idea of the translation stems from Cohen and Hirsh (1994a),
who employed spanning trees to translate same-as equalities. A spanning tree of a (connected) graph is a tree rooted at the same node as the graph and containing all nodes of the
graph. In particular, it coincides with the graph except that some a-edges are deleted. For
example, one possible spanning tree T for G in Figure 1 is obtained by deleting the a-edge
labeled madeBy, whose origin is the root of G.
Now, let G be a connected description graph and T be a spanning tree for it. Then,
the corresponding concept description C is obtained as a conjunction of the following
descriptions:
1. C contains (i) a same-as equality v # v for every leaf n of T , where v is the label
of the rooted path in T to n; and (ii) a same-as equality v1 Æ a # v2 for each a-edge
(n1 ; a; n2) 2 G:Edges not contained in T , where v is the label of the rooted path to
n in T , i = 1; 2.
2. for every node n in T , C contains a value restriction 8v:C , where v is the label of
the rooted path in T to n, and C denotes the translation of the label of n, i.e., C is
a conjunction obtained as follows:
 every concept name in the atoms of n is a conjunct in C ;
 for every r-edge (r; m; M; G0 ) of n, C contains (a) the number restrictions (mr)
and ( M r) (in case r is a role and M 6= 1) and (b) the value restriction 8r:C 0 ,
where C 0 is the recursively dened translation of G0 .
G

G

i

i

G

n

n

n

n

n

G

G

179

 steres, Borgida
Ku

In case the set of atoms and r-edges of n is empty, dene C := >.
Referring to the graph G in Figure 1, C contains the same-as equalities model Æ madeBy #
model Æ madeBy and madeBy # model Æ madeBy. Furthermore, if n0 denotes the root of G,
C has the value restrictions 8":C , 8model:>, and 8model madeBy:>, where C
corresponds to Lemon as dened in the introduction, but without the same-as equality. Note
that, although in this case the same-as equality model Æ madeBy # model Æ madeBy is not
needed, one cannot dispense with 1.(i) in the construction above, as illustrated by the following example: Without 1.(i), the description graph G(a # a) would be turned into the
description >, which is not equivalent to a # a since the same-as equality requires that the
path a has a value, which may not be the case.
It is easy to prove that the translation thus dened is correct in the following sense
(Kusters & Borgida, 1999).
n

G

n0

G

n0

Lemma 2 Every connected description graph G is equivalent to its translation C , i.e., for
all interpretations I : GI = C I .
G

G

3.4 Canonical Description Graphs

In the following we occasionally refer to \marking a node incoherent"; this means that the
label of this node is changed to ?. \Marking a description graph as incoherent" means that
the description graph is replaced by the graph G(?) corresponding to ?, i.e., the graph
consisting only of one node with label ?.
One important property of canonical description graphs is that they are deterministic,
i.e., every node has at most one outgoing edge (a-edge or r-edge) labeled with the same
attribute or role name. Following Borgida and Patel-Schneider (1994), in order to turn a
description graph into a canonical graph we need to merge a-edges and r-edges. In addition,
dierent from their work, it might be necessary to \lift" r-edges to a-edges.
To merge two a-edges (n; a; n1) and (n; a; n2 ) in a description graph G, replace them
with a single new edge (n; a; n0 ) where n0 is the result of merging n1 and n2. In addition,
replace n1 and n2 by n0 in all other a-edges of G.
In order to merge two r-edges (r; s1 ; k1 ; G1 ), (r; s2 ; k2 ; G2 ) replace them by the new r-edge
(r; max(s1 ; s2 ); min(k1 ; k2 ); G1  G2 ).
To lift up an r-edge (a; m; M; G ) of a node n in a concept graph G with an a-edge
(n; a; n1 ), remove it from n:REdges, and augment G by adding G :N odes to G:N odes,
G :Edges to G:Edges, as well as adding (n; a; G :Root) to G:Edges. A precondition for
applying this transformation is that M = 1, or M = 0 and G corresponds to the graph
G(?). The reason for this precondition is that if an r-edge of the form (a; 0; 0; G ) is lifted
without G being inconsistent, the fact that no a-successors are allowed is lost. Normalization rule 5 (see below) will guarantee that this precondition can always be satised.
A description graph G is transformed into canonical form by exhaustively applying the
following normalization rules. A graph is called canonical if none of these rules can be
applied.
1. If some node in G is marked incoherent, mark the description graph as incoherent.
(Reason: Even if the node is not a root, attributes corresponding to a-edges must always
a

a

a

a

a

a

a

180

What's in an Attribute?

have a value (since they participate in same-as equalities), and this value cannot belong to the

)
2. If some r-edge in a node has its min greater than its max, mark the node incoherent.
(Reason: 2
1
)
3. Add > to the atoms of every node, if absent.
4. If some r-edge in a node has its restriction graph marked incoherent, change its max
to 0. (Reason: ( 0 )
.)
5. If some r-edge in a node has a max of 0, mark its restriction graph as incoherent.
(Reason: See 4.)
6. If some r-edge is of the form (r; 0; 1; G0 ) where G0 only contains one node with empty
set of atoms or with the atoms set to f>g and no r-edges, then remove this r-edge.
(Reason:
.)
7. If some node has two r-edges labeled with the same role, merge the two edges, as
described above. (Reason:
(
).)
8. If some description graph has two a-edges from the same node labeled with the
same attribute, merge the two edges, as described above. (Reason:
(
).)
9. If some node in a graph has both an a-edge and an r-edge for the same attribute, then
\lift up the r-edge" if the precondition is satised (see above). (Reason: The value
restrictions imposed on attributes that participate in same-as equalities must be made explicit
and gathered at one place similar to the previous to cases.)
We need to show that the transformations to canonical form do not change the semantics
of the graph. The main diÆculty is in showing that the merging processes and the lifting
preserve the semantics. The only dierence from (Borgida & Patel-Schneider, 1994) is that
in addition to merging r-edges and a-edges we also need to lift up r-edges. Therefore,
we omit the proofs showing that merging edges preserves extensions. The proofs of the
following two lemmas are routine and quite similar to the one of Lemma 5.
Lemma 3 Let G = (N; E; n0 ; l) be a description graph with two mergeable a-edges and let
G0 = (N 0 ; E 0 ; n0 ; l0 ) be the result of merging these two a-edges. Then, G  G0 .
empty set.



r u



r  ?

r

 8r:?

8r:>  >

8r:C u 8r:D  8r: C u D

8a:C u 8a:D 

8a: C u D

Lemma 4 Let n be a node with two mergeable r-edges and let n0 be the node with these
edges merged. Then, nI = n0I for every interpretation I .
Lemma 5 Let G = (N; E; n0 ; l) be a description graph with node n and a-edge (n; a; n00 ).
Suppose n has an associated r-edge (a; m; M; G ). Provided that the precondition for lifting
r-edges is satised and that G0 = (N 0 ; E 0 ; n0 ; l0 ) is the result of this transformation, then
G  G0 .
Proof. It is suÆcient to show that GIj = G0 Ij , since only the label of n is changed in G0
a

and only n obtains an additional a-edge, which points to the graph G not connected to
n

n

a

181

 steres, Borgida
Ku

RepairReport

G

fModel >g
;

model

repairs

model

[10; 1]

fCar >g
;

madeBy

fManufacturer >g
;

Figure 2: The canonical description graph for Lemon, where the left-most node is the root.
the rest of G0 . W.l.o.g. we therefore may assume that n is the root of G, i.e., n = n0. Let
d 2 GI . Thus, there is a function  from N into I as specied in Denition 6 and an
individual e such that d = (n), e = (n00), and (d; e) 2 aI . This implies e 2 GI . Hence,
there exists a function 0 from G :N odes into I for G and e satisfying the conditions in
Denition 6. Since the sets of nodes of G and G are disjoint, we can dene 00 to be the
union of  and 0, i.e., 00 (m) := (m) for all nodes m in G and 00(m) := 0(m) for all
nodes m in G . Since, by construction, for the additional a-edge (n; a; G :Root) 2 E 0 we
have (00(n); 00 (G :Root)) 2 aI , it follows that all conditions in Denition 6 are satised
for d and G0, and thus, d 2 G0I .
Now let d 2 G0I . Thus, there is a function 00 from N 0 into I according to Denition 6.
Let e := 00(G :Root) = 00(n00). Let G00 be the description graph we obtain from G0 by
deleting the nodes corresponding to G , which is the same graph as G without the r-edge
(a; m; M; G ). If we restrict 00 to the nodes of G00 , then it follows d 2 G00I . Furthermore,
restricting 00 to the nodes of G yields e 2 GI . In particular, G can not be marked
incoherent. Then, our precondition ensures M = 1. Thus, since e is the only a-successor of
d, we can conclude d 2 GI .
ut
a

a

a

a

a

a

a

a

a

a

a

a

a

Having dealt with the issue of merging and lifting, it is now easy to verify that \normalization" does not aect the meaning of description graphs.
Theorem 2 If G is a description graph and G0 is the corresponding canonical description
graph, then G  G0 .

As an example, the canonical description graph of the graph given in Figure 1 is depicted
in Figure 2.
3.5 Subsumption Algorithm

The nal part of the subsumption process is checking to see if a canonical description graph
is subsumed by a concept description. As in Borgida and Patel-Schneider (1994), where
attributes are total, it turns out that it is not necessary to turn the potential subsumer
into a canonical description graph. The subsumption algorithm presented next can also be
considered as a characterization of subsumption.
182

What's in an Attribute?

Algorithm 1 (Subsumption Algorithm) Given a concept description D and description graph G = (N; E; n0 ; l), subsumes?(D; G) is dened to be true if and only if one of the
following conditions hold:
1. The description graph
2.

D

3.

D

4.

D

5.

D

G

is marked incoherent.

is a concept name or >, and D is an element of the atoms of n0 .

is ( n r) and i) some r-edge of n0 has r as its role, and min greater than or equal
to n; or ii) n = 0.

is ( n r) and some r-edge of n0 has r as its role, and max less than or equal to n.
is

   a # b1    b

, and there are rooted paths with label
in G ending at the same node.
a1

n

m

a1

a

n

and

b1

b

m

is 8r:C , for a role r, and either (i) some r-edge of n0 has r as its role and G0
as its restriction graph with subsumes?(C; G0 ); or (ii) subsumes?(C; G(>)). (Reason:
8r:>  >.)
7. D is 8a:C , for an attribute a, and (i) some a-edge of G is of the form (n0 ; a; n0 ), and
subsumes?(C; (N; E; n0 ; l)); or (ii) some r-edge of n0 has a as its attribute, and G0 as
its restriction graph with subsumes?(C; G0 ); or (iii) subsumes?(C; G(>)).

6.

D

8.

D

is E u F and both subsumes?(E; G) and subsumes?(F; G) are true.

There are only two dierences between this algorithm and the one for total attributes presented by Borgida and Patel-Schneider (see also Algorithm 2). First, in the partial attribute
case, given D = 8a:C , one needs to look up the value restriction either in some a-edge or
some r-edge of G, since attributes can label both a-edges and r-edges. (In the total attribute
case, attributes can only label a-edges so that examining r-edges was not necessary.) The
second and most important distinction is the treatment of same-as equalities. As shown in
the above algorithm, with D = a1    a # b1    b one only needs to check whether there
exist two paths labeled v := a1    a and w := b1    b leading the same node in G. In the
total attribute case, however, it suÆces if there exist prexes v0 and w0 of v and w with this
property, as long as the remaining suÆxes are identical.
Soundness and completeness of this algorithm is stated in the following theorem.
Theorem 3 Let C , D be classic descriptions. Then, C v D i subsumes?(D; G ),
where G is the canonical form of G(C ).
The soundness of the subsumption algorithm, i.e., the if direction in the theorem stated
above, is pretty obvious. As in (Borgida & Patel-Schneider, 1994), the main point of the
only-if direction (proof of completeness) is that the canonical graph G is deterministic,
i.e., from any node, given a role or attribute name r, there is at most one outgoing r-edge
or a-edge with r as label. We point the reader to (Borgida & Patel-Schneider, 1994) for
the proof, since it is almost identical to the one for total attributes already published there.
These proofs reveal that, for the if direction of Theorem 3, description graphs need not be
normalized. Thus, one can also show:
n

m

n

m

C

C

C

183

 steres, Borgida
Ku

Remark 1 Let G be some (not necessarily normalized description graph) and let
concept description. Then, subsumes?(D; G) implies G v D.

D

be a

classic

Borgida and Patel-Schneider argue that the canonical description graph G of a concept
description C can be constructed in time polynomial in the size of C . Furthermore, Algorithm 1 runs in time polynomial in the size of G and D. It is not hard to see that the
changes presented here do not increase the complexity. Thus, soundness and completeness
of the subsumption algorithm provides us with the following corollary.
Corollary 1 Subsumption for classic concept descriptions C and D, where attributes
are interpreted as partial functions, can be decided in time polynomial in the size of C and
D.
4. Computing the LCS in

classic

In this section, we will show that the lcs of two classic concept descriptions can be stated
in terms of a product of canonical description graphs. A similar result has been proven by
Cohen and Hirsh (1994a) for a sublanguage of classic , which only allows for concept
names, concept conjunction, value restrictions, and same-as equalities. In particular, this
sublanguage does not allow for inconsistent concept descriptions (which, for example, can be
expressed by conicting number-restrictions). Furthermore, the semantics of the description
graphs provided by Cohen and Hirsh restricts the results to the case when description graphs
are acyclic. This excludes, for example, same-as equalities of the form  # spouse Æ spouse.
In the following, we rst dene the product of description graphs. Then, we show that
for given concept descriptions C and D, the lcs is equivalent to a description graph obtained
as the product of G and G . Our constructions and proofs will be quite close to those in
(Cohen & Hirsh, 1994a).
C

D

4.1 The Product of Description Graphs

A description graph represents the constraints that must be satised by all individuals in the
extension of the graph. Intuitively, the product of two description graphs is the intersection
of these constraints|as the product of nite automata corresponds to the intersection of the
words accepted by the automata. However, in the denition of the product of description
graphs special care has to be taken of incoherent nodes, i.e., nodes labeled with ?. Also,
since attributes may occur both in r-edges and a-edges, one needs to take the product
between restriction graphs of r-edges, on the one hand, and the original graphs G1 or G2
(rooted at certain nodes), on the other hand.
Denition 8 Let G1 = (N1 ; E1 ; n1 ; l1 ) and G2 = (N2 ; E2 ; n2 ; l2 ) be two description graphs.
Then, the product G := G1  G2 := (N; E; n0 ; l) of the two graphs is recursively dened as
follows:
1.
2.
3.

:= N1  N2 ;
n0 := (n1 ; n2 );
E :=f((n; n0 ); a; (m; m0 )) j (n; a; m) 2 E1 and (n0 ; a; m0 ) 2 E2 g;
N

184

What's in an Attribute?

4. Let n 2 N1 and n0 2 N2 . If l1 (n) = ?, then let l((n; n0 )) := l2 (n0 ) and, analogously,
if l2 (n0 ) = ?, then l((n; n0 )) := l1 (n). Otherwise, for l1 (n) = (S1 ; H1 ) and l2 (n0 ) =
(S2 ; H2), dene l((n; n0)) := (S; H ) where
(a)
(b)

S

:= S1 \ S2;

:=
(
(
)
(
)
) j (r; p1 ; q1 ; G1 ) 2 H1 , (r; p2 ; q2 ; G2 ) 2 H2 g [
f(a; 0; 1; G1 m  G2 ) j (n; a; m) 2 E1 , (a; p2 ; q2 ; G2 ) 2 H2 g [
f(a; 0; 1; G1  G2 m ) j (a; p1 ; q1 ; G1 ) 2 H1 , (n ; a; m) 2 E2 g.
H

0

0

0

f r; min p1 ; p2 ; max q1 ; q2 ; G1  G2
0

j

0

0

0

0

j

0

According to this denition, if in the tuple (n; n0) some node, say n, is incoherent, then
the label of (n; n0 ) coincides with the one for n0. The reason for dening the label in this
way is that lcs(?; C )  C for every concept description C . This has been overlooked by
Frazier and Pitt (1996), thus making their constructions and proofs only hold for concept
descriptions that do not contain inconsistent subexpressions.
Note that G, as dened here, might not be connected, i.e., it might contain nodes that
cannot be reached from the root n0. Even if G1 and G2 are connected this can happen
because all tuples (n1; n2 ) belong to the set of nodes of G regardless of whether they are
reachable from the root or not. However, as already mentioned in Section 3.1 we may
assume G to be connected.
Also note that the product graph can be translated back into a classic concept
description since the product of two description graphs is once again a description graph.
4.2 Computing the LCS

We now prove the main theorem of this subsection, which states that the product of two
description graphs is equivalent to the lcs of the corresponding concept descriptions.
Theorem 4 Let C1 and C2 be two concept descriptions, and let G1 and G2 be corresponding
canonical description graphs. Then, C 1  2  lcs(C1 ; C2 ).
G

G

Let G := G1  G2 . We will only sketch the proof showing that C subsumes C1 and,
by symmetry, also C2 (see (Kusters & Borgida, 1999) for details). By construction, if there
are two rooted paths to a common node in G, then G1 has corresponding paths leading to
the same node as well. Thus, by Theorem 3, the same-as equalities in C subsume the ones
in C1 . Now, let T be a spanning tree of G, (m1; m2 ) be a node in G, and v be the label of
the rooted path in T to (m1 ; m2 ). Then, by construction it follows that there exists a rooted
path in G1 to m1 labeled v. Furthermore, a rather straightforward inductive proof shows
that the concept description E corresponding to the label of (m1 ; m2 ) subsumes G1 j .
This implies 8v:E w G1 . As a result, we can conclude G w G1 .
The more interesting part of the proof is to show that C is not only a common subsumer
of C1 and C2, but the least common subsumer.
We now show by induction over the size of D, C1, and C2 that if D subsumes C1 and
C2 , then D subsumes C : We distinguish dierent cases according to the denition of
\subsumes?". Let G1 = (N1 ; E1 ; n1; l1 ) be the canonical description graph of C1, G2 =
(N2 ; E2 ; n2; l2 ) be the canonical description graph of C2 , and G = (N; E; n0 ; l) = G1  G2 .
In the following, we assume that C1 v D and C2 v D; thus, subsumes?(D; G1) and
Proof.

G

G

m1

G

G

185

 steres, Borgida
Ku

?(D; G2). We show that subsumes?(D; G). Then, Remark 1 implies G v D, and
thus, C v D. Note that one cannot use Theorem 3 since G might not be a canonical
description graph.
1. If G is incoherent, then there is nothing to show.
2. If D is a concept name, >, or a number-restriction, then by denition of the label of
n0 it is easy to see that subsumes?(D; G).
3. If D is v # w, then there exist nodes m1 in G1 and m2 in G2 such that there are two
paths from n1 to m1 with label v and w, respectively, as well as two paths from n2 to
m2 with label v and w. Then, by denition of G it is easy to see that there are two
paths from n0 = (n1; n2 ) to (m1 ; m2) with label v and w, respectively. This shows
subsumes?(D; G).
4. If D is 8r:C , r a role or attribute, then one of several cases applies:
(i) n1 and n2 have r-edges with role or attribute r, and restriction graphs G01 and G02 ,
respectively, such that subsumes?(C; G01 ) and subsumes?(C; G02 );
(ii) without loss of generality, n1 has an a-edge pointing to m1 with attribute r, such
that subsumes?(C; G01 ), where G01 := G1 j ; and n2 has an r-edge with restriction
graph G02 such that subsumes?(C; G02 ).
In both cases (i) and (ii), subsumes?(C; G01  G02 ) follows by induction. Furthermore,
by denition of G there is an r-edge with role r and restriction graph G01  G02 for n0.
This implies subsumes?(D; G).
(iii) n1 and n2 have a-edges with attribute r leading to nodes m1 and m2 , respectively. Then, subsumes?(C; G1 j ) and subsumes?(C; G2 j ). By induction, we know
subsumes?(C; G1 j
 G2 j ). It is easy to see that Gj(
 G2 j . Fur) = G1 j
thermore, by denition there is an a-edge with attribute r from (n1; n2 ) to (m1 ; m2 )
in G. This shows subsumes?(D; G).
(iv) (without loss of generality) n1 has no r-edge and no a-edge with role or attribute
r . This implies subsumes?(C; G(>)), which also ensures subsumes?(D; G).
5. If D is E u F , then by denition of the subsumption algorithm, subsumes?(E; G1 ) and
subsumes?(E; G2 ) hold. By induction, we have subsumes?(E; G), and analogously,
subsumes?(F; G). Thus, subsumes?(D; G).
ut
As stated in Section 3.5, a canonical description graph for a classic concept description
can be computed in time polynomial in the size of the concept description. It is not hard
to verify that the product of two description graphs can be computed in time polynomial in
the size of the graphs. In addition, the concept description corresponding to a description
graph can be computed in time polynomial in the size of the graph. Thus, as a consequence
of Theorem 4 we obtain:
subsumes
G

m1

m1

m1

m2

m2

m1 ;m2

m1

m2

Corollary 2 The lcs of two classic concept descriptions always exists and can be computed in time polynomial in the size of the concept descriptions.
186

What's in an Attribute?

j , j 6= i

j , j 6= i

i

a

a

a

i

a

Figure 3: The canonical description graph for D , without node labels.
i

As intimated in (Cohen et al., 1992), this statement does not hold for sequences of concept
descriptions. Intuitively, generalizing the lcs algorithm to sequences of, say, n concept descriptions, means computing the product of n description graphs. The following proposition
shows that the size of such a product graph may grow exponentially in n. Thus, the lcs
computed in this way grows exponentially in the size of the given sequence. However, this
does not imply that this exponential blow-up is unavoidable. There might exist a smaller,
still equivalent representation of the lcs. Nevertheless, we can show that the exponential
growth is inevitable.
Proposition 1 For all integers n  2 there exists a sequence D1 ; : : : ; D of classic
concept descriptions such that the size of every classic concept description equivalent to
lcs(D1 ; : : : ; D ) is at least exponential in n where the size of the D 0 s is linear in n.
Proof. As in Cohen et al. (1992), for a given n, dene the concept descriptions D as
follows:
D := u (" # a ) u u (a # a a ) u (" # a a )
6=
6=
n

n

i

i

i

j

j

i

j

i

i

i

j

i

i

where a1 ; : : : ; a denote attributes. The canonical description graph for D is depicted in
Figure 3. Using Algorithm 1 it is easy to see that D v v # w i the number of a 0 s in v and
the number of a 0 s in w are equal modulo 2 where v; w are words over fa1 ; : : : ; a g. This
implies that
D1 ; : : : ; D v v # w
i for all 1  i  n the number of a 0s in v and
(1)
0
the number of a s in w are equal modulo 2.
Let s  f1; : : : ; ng be a non-empty set. We dene v := a    a k where i1 <    < i
are the elements of s and w := a 3 a 3    a k 3 with a 3 := a a a . Now let E be the lcs
of D1 ; : : : ; D , and let G be the corresponding canonical description graph with root n0.
From (1) we know that E v v # w for every s  f1; : : : ; ng. Algorithm 1 implies that
the paths from n0 in G labeled v and w exist and that they lead to the same node q .
Assume there are non-empty subsets s; t of f1; : : : ; ng, s 6= t, such that q = q . This would
imply E v v # v in contradiction to (1). Thus, s 6= t implies q 6= q . Since there are
2 1 non-empty subsets of f1; : : : ; ng, this shows that G contains at least 2 1 nodes.
The fact that the size of G is linear in the size of E completes the proof.
ut
This proposition shows that algorithms computing the lcs of sequences are necessarily worstcase exponential. Conversely, based on the polynomial time algorithm for the binary lcs
operation, an exponential time algorithm can easily be specied employing the following
identity lcs(D1 ; : : : ; D )  lcs(D ; lcs(D 1 ; lcs(   lcs(D2 ; D1 )   ).
n

i

i

i

i

n

n

i

i

i1

s

i1

s

n

i2

i

j

i

j

j

k

j

E

s

s

E

s

s

s

s

s

t

s

n

E

E

n

n

n

187

t

t

n

 steres, Borgida
Ku

Corollary 3 The size of the lcs of sequences of classic concept descriptions can grow
exponentially in the size of the sequences and there exists an exponential time algorithm for
computing the lcs.
5. The LCS for Same-as and Total Attributes

In the previous sections, attributes were interpreted as partial functions. In this section,
we will present the signicant changes in computing the lcs that occur when considering
total functions instead of partial functions. More precisely, we will look at a sublanguage
S of classic that only allows for concept conjunction and same-as equalities, but where
we have the general assumption that attributes are interpreted as total functions.
We restrict our attention to the language S in order to concentrate on the changes
caused by going from partial to total functions. We strongly conjecture, however, that the
results represented here can easily be transfered to classic by extending the description
graphs for S as in Section 4.
First, we show that in S the lcs of two concept descriptions does not always exist.
Then, we will present a polynomial decision algorithm for the existence of an lcs of two
concept descriptions. Finally, it will be shown that if the lcs of two concept descriptions
exists, then it might be exponential in the size of the given concept descriptions and it can
be computed in exponential time.
In the sequel, we will simply refer to the lcs by lcs. Since throughout the section
attributes are always assumed to be total, this does not lead to any confusion.
Once again, it may be useful to keep in mind that for total (though not partial) attributes
we have (u # v) v (u Æ w # v Æ w) for any u; w; v 2 A, where A is the set of nite words
over A, the nite set of attribute names. Indeed, all the dierences between partial and
total attributes shown in this section nally trace back to this property.
t

t

t

t

t

5.1 The Existence of the LCS

In this subsection, we prove that the lcs of two concept descriptions in S does not always
exist. Nevertheless, there is always an innite representation of the lcs, which will be used
in the next subsection to characterize the existence of the lcs.
To accomplish the above, we return to the graph-based characterization of t-subsumption
proposed by Borgida and Patel-Schneider (1994), and modied for partial attributes in Section 3. For a concept description C , let G denote the corresponding canonical description
graph, as dened in Section 3.4. Its semantics is specied as in Section 3.1, although now
the set of interpretations is restricted to allow attributes to be interpreted as total functions
only.
Since S contains no concept names and does not allow for value-restrictions, the nodes
in G do not contain concept names and the set of r-edges is empty. Therefore, G can
be dened by the triple (N; E; n0 ) where N is a nite set of nodes, E is a nite set over
N  A  N , and n0 is the root of the graph.
As a corollary of the results of Borgida and Patel-Schneider, subsumption C v D of
concept descriptions C and D in S can be decided with the following algorithm, which also
provides us with a characterization of t-subsumption.
C

C

C

t

188

What's in an Attribute?

G

C0 :

D0 :

c

G
a

a

b

b

d

d
c

Figure 4: The canonical graphs for C0 and D0
Algorithm 2 Let C , D be concept descriptions in S , and G = (N; E; n0 ) be the canonical
description graph of C . Then, subsumes ?(D; G ) is dened to be true if and only if one
of the following conditions hold:
C

t

1.

C

is v # w and there are words v0 ; w0 ; u 2 A such that v = v0 u and w = w0 u, and
there are rooted paths in G labeled v0 and w0 , respectively, ending at the same node.

D

C

) and subsumes ?(D2 ; G ) are true.
Apart from the additional constructors handled by Algorithm 1, Algorithm 2 only diers
from Algorithm 1 in that, for total attributes, as considered here, it is suÆcient if prexes
of rooted paths v and w lead to a common node, as long as the remainder in both cases is
the same path.
2.

D

is D1 u D2 and both subsumes ?(D1 ; G
t

C

t

C

Theorem 5 There are concept descriptions in S such that the lcs of these concept descriptions does not exist in S .

This result corrects the statement of Cohen et al. (1992) that the lcs always exists, a
statement that inadvertently assumed that attributes were partial, not total.
As proof, we oer the following S -concept descriptions, which are shown not to have an
lcs:
C0 := a # b;
D0 := a # ac u b # bc u ad # bd:
The graphs for these concepts are depicted in Figure 4.
The following statement shows that an lcs E of C0 and D0 would satisfy a condition
which does not have a \regular structure". This statement can easily be veried using
Algorithm 2.
E v v#w
i v = w or there exists a nonnegative integer n and u 2
A such that v = ac du and w = bc du or vice versa.
Given this description of the lcs of C0 and D0 , one can show, again, by employing Algorithm 2, that no nite description graph can be equivalent to E . However, we omit this
elementary proof here, because the absence of the lcs also follows from Theorem 6, where
innite graphs are used to characterize the existence of an lcs. Note that in the partial
attribute case, the lcs of C0 and D0 is equivalent to a # a u b # b, a result that can be
t

n

189

n

 steres, Borgida
Ku

obtained by the lcs algorithm presented in the previous section. The corresponding (nite) description graph consists of a root and two additional nodes, where the root has two
outgoing edges leading to the two nodes and labeled a and b, respectively.
To state Theorem 6, we rst introduce innite description graphs and show that there
always exists an innite description graph representing the lcs of two S -concept descriptions.
An innite description graph G is dened, like a nite graph, by a triple (N; E; n0 )
except that the set of nodes N and the set of edges E may be innite. As in the nite case,
nvn0 2 G means that G contains a path from n to n0 labeled with the word v 2 A . The
semantics of innite graphs is dened as in the nite case. Furthermore, innite graphs are
translated into concept descriptions as follows: take an (innite) spanning tree T of G, and,
as in the nite case, for every edge of G not contained in it, add to C a same-as equality.
Note that in contrast to the partial attribute case, C need not contain same-as equalities of
the form v # v since, for total attributes, v # v  >. Still, C might be a concept description
with an innite number of conjuncts (thus, an innite concept description). The semantics
of such concept descriptions is dened in the obvious way. Analogously to Lemma 2, one
can show that an (innite) graph G and its corresponding (innite) concept description C
are equivalent, i.e., C  G.
We call an (innite) description graph G deterministic if, and only if, for every node n
in G and every attribute a 2 A there exists at most one a-successor for n in G. The graph
G is called complete if for every node n in G and every attribute a 2 A there is (at least)
one a-successor for n in G. Clearly, for a deterministic and complete (innite) description
graph, every path is uniquely determined by its starting point and its label.
Algorithm 2 (which deals with nite description graphs G ) can be generalized to deterministic and complete (innite) description graphs G in a straightforward way. To see
this, rst note that a (nite) description graph coming from an S -concept description is
canonical i it is deterministic in the sense just introduced. Analogously, a deterministic
innite graph can be viewed as being canonical. Thus, requiring (innite) graphs to be
deterministic satises the precondition of Algorithm 2. Now, if in addition these graphs are
complete, then (unlike the condition stated in the subsumption algorithm) it is no longer
necessary to consider prexes of words because a complete graph contains a rooted path
for every word. More precisely, if v0 and w0 lead to the same node, then this is the case for
v = v 0 u and w = w0 u as well, thus making it unnecessary to consider the prexes v 0 and w0
of v and w, respectively. Summing up, we can conclude:
Corollary 4 Let G = (N; E; n0 ) be a deterministic and complete (innite) description
G

G

G

G

G

C

graph and

v; w

2 A. Then,
Gv v#w
i
t

n0 vn

2 G and n0wn 2 G for some node n:

We shall construct an (innite) graph representing the lcs of two concept descriptions in S
as the product of the so-called completed canonical graphs. This innite representation of
the lcs will be used later to characterize the existence of an lcs in S , i.e., the existence of a
nite representation of the lcs.
We now dene the completion of a graph. Intuitively, a graph is completed by iteratively
adding outgoing a-edges labeled with an attribute a for every node in the graph that does
not have such an outgoing a-edge. This process might extend a graph by innite trees. As
an example, the completion of G (cf. Figure 4) is depicted in Figure 5 with A = fa; b; c; dg.
C0

190

What's in an Attribute?

G

1
C :
0

a

d



c

c

b

b

d

a

a

b

c

d

a

b

c

d

...
...
Figure 5: The complete graph for C0
Formally, completions are dened as follows: Let G be an (innite) description graph.
The graph G0 is an extension of G if for every node n in G and for every attribute a 2 A
such that n has no outgoing edges labeled a, a new node m is added, as well as an edge
(n; a; m ). Now, let G0 ; G1 ; G2 ; : : : be a sequence of graphs such that G0 = G and G +1 is
an extension of G ; for i  0. If G = (N ; E ; n0), then
[ [
G1 := (
N;
E ; n0 )
n;a

i

n;a

i

i

i

i

0

i

0
construction, G1
i

i

i

is called the completion of G. By
is a complete graph. Furthermore, if
1
G is deterministic, then G is deterministic as well. Finally, it is easy to see that a graph
and its extension Sare equivalent. Thus, by induction, G1  G.
The nodes in 1 N , i.e., the nodes in G1 that are not in G, are called tree nodes; the
nodes of G are called non-tree nodes. By construction, for every tree node t in G1 there is
exactly one direct predecessor of t in G1, i.e., there is exactly one node n and one attribute
a such that (n; a; t) is an edge in G1 ; n is called a-predecessor of t. Furthermore, there is
exactly one youngest ancestor n in G of a tree node t in G1; n is the youngest ancestor of
t if there is a path from n to t in G1 which does not contain non-tree nodes except for n.
Note that there is only one path from n to t in G1. Finally, observe that non-tree nodes
have only non-tree nodes as ancestors.
Note that the completion of a canonical description graph is always complete and deterministic.
In the sequel, let C , D be two concept descriptions in S , G = (N ; E ; n ), G =
(N ; E ; n ) be their corresponding canonical graphs, and G1 , G1 be the completions of
G , G . The products G := G  G and G
1 := G1  G1 are specied as in Denition 1.
As usual, we may assume G and G1 are connected, i.e., they only contain nodes that are
reachable from the root (n ; n ); otherwise, one can remove all those nodes that cannot be
reached from the root without changing the semantics of the graphs.
We denote the product G1  G1 by G1 instead of G1 (or G1) because otherwise
this graph could be confused with the completion of G. In general, these graphs do not
t

i

i

C

D

C

D

D

C

D

C

C

D

C

D

C

D

191

D

C

D

C

C

D

 steres, Borgida
Ku

coincide. As an example, take the products G  G and G1  G1 (see Figure 4 for the
graphs G and G ). The former product results in a graph that consists of a root with
two outgoing a-edges, one labeled a and the other one labeled b. (As mentioned before, this
graph corresponds to the lcs of C0 and D0 in the partial attribute case.) The product of
the completed graphs, on the other hand, is a graph that is obtained as the completion of
the graph depicted in Figure 6 (the innite trees are omitted for the sake of simplicity).
As an easy consequence of the fact that G  G1 and Corollary 4, one can prove the
following lemma.
C0

Lemma 6

C0

D0

C

C

C0

D0

D0

C

v v # w i n
t

C

vn

2 G1 and n
C

C

wn

2 G1 for a node n in G1 .
C

C

But then, by the construction of G1 we know:
Proposition 2 C v
for a node n in G1 .

t

v

# w and D v v # w i (n
t

C

) 2 G1 and (n

; nD vn

C

)

; nD wn

2 G1

In particular, G1 represents the lcs of the concept descriptions C and D in the following
sense:
Corollary 5 The (innite) concept description C 1 corresponding to G1 is the lcs of C
and D, i.e., i) C; D v C 1 and ii) C; D v E 0 implies C 1 v E 0 for every S -concept
description E 0 .
G

t

t

G

t

G

5.2 Characterizing the Existence of an LCS

Let C , D be concept descriptions in S and let the graphs G , G , G, G1 , G1, and G1
be dened as above.
We will show that G1 not only represents a (possibly innite) lcs of the S -concept
descriptions C and D (Corollary 5), but that G1 can be used to characterize the existence
of a nite lcs. The existence depends on whether G1 contains a nite or an innite number
of so-called same-as nodes.
Denition 9 A node n of an (innite) description graph H is called a same-as node if
C

there exist two direct predecessors of
may be labeled dierently.)

a

n

in

H.

D

(The a-edges leading to

c

c

c

d

d

d


b

d

d

d

c

c

c

Figure 6: A subgraph of G1  G1
C0

192

D0

C

n

D

from these nodes

What's in an Attribute?

For example, the graph depicted in Figure 6 contains an innite number of same-as nodes.
We will show that this is a suÆcient and necessary condition for the lcs of C0 and D0 not
to exist.
It is helpful to observe that same-as nodes in G1 have one of the forms (g; f ), (f; t),
and (t; f ), where g and f are non-tree nodes and t is a tree node. There cannot exist a
same-as node of the form (t1; t2 ), where both t1 and t2 are tree nodes, since tree nodes
only have exactly one direct predecessor, and thus (t1; t2 ) does. Moreover, if G1 has an
innite number of same-as nodes, it must have an innite number of same-as nodes of the
form (f; t) or (t; f ), because there only exist a nite number of nodes in G1 of the form
(g; f ). For this reason, in the following lemma we only characterize same-as nodes of the
form (f; t). (Nodes of the form (t; f ) can be dealt with analogously.) To state the lemma,
recall that with n0un1vn2 2 H , for some graph H , we describe a path in H labeled uv
from n0 to n2 that passes through node n1 after u (i.e., n0un1 2 H and n1vn2 2 H ); this
is generalized the obvious way to interpret n0u1n1u2n2u3n3 2 H .
G

1

(nC ; nD )
v

w

(h1 ; p0 )

x

(h2 ; p0 )

G

..
.

6=
6
1=

v
h

w
h2

..
.x

(e1 ; q0 )

(e2 ; q0 )
a

e1

6=

e2

a
n

= (f; t)

Figure 7: same-as nodes in G1
Lemma 7 Given a node f in G and a tree-node t in G1 , the node n = (f; t) in G1 is a
same-as node i
C




D

there exist nodes (h1 ; p0 ), (h2 ; p0 ) in G, h1 6= h2 ;
there exist nodes (e1 ; q0 ), (e2 ; q0 ) in G1 , where e1 , e2 are distinct nodes in G and
q0 is a node in G1 ; and
there exists an attribute a 2 A and v; w; x 2 A , v 6= w, where A is the set of attributes
in C ,
C

D



such that

(n

C

) (

) (

) ( ) and (n

) ( ) ( )
For the direct successors (h01 ; p00 ) and (h02 ; p00 ) of (h1 ; p0 )

; nD v h1 ; p0 x e1 ; q0 a f; t

C

) (

; nD w h2 ; p0 x e2 ; q0 a f; t

are paths in G1 (see Figure 7).
and (h2 ; p0 ) in this paths, we, in addition, require p00 to be a tree node in G1 .4
D

4. Note that since G
1 is deterministic, the successors of (h1 ; p0 ) and (h2 ; p0 ) in the two paths must in fact
be of the form (; p00 ).

193

 steres, Borgida
Ku

The if direction is obvious. We proceed with the only-if direction and assume that
is a same-as node in G1. Let p0 be the (uniquely determined) youngest ancestor of t in
G1 . In particular, p0 is a node in G and there exists p0 xq0 at in G1 with a 2 A and
x 2 A such that the successor of p0 in this path is a tree node in G .
Since n is a same-as node and t can only be reached via q0 and the attribute a, there
must exist e1 , e2 in G , e1 6= e2 , with (e1 ; q0 )a(f; t); (e2 ; q0)a(f; t) 2 G1. Since G1 is
connected, there are paths from (n ; n ) to (e1 ; q0) and (e2 ; q0). Every path from n to q0
must pass through p0 and the suÆx of the label of this path is x. Consequently, there exist
nodes h1 ; h2 in G such that (h1 ; p0 )x(e1 ; q0 )a(f; t) and (h2 ; p0)x(e2 ; q0)a(f; t) are paths
in G1. In particular, xa is a label of a path from h1 to f in G , and the label xa only
consists of attributes contained in C . If h1 = h2, then this, together with the fact that G
is deterministic, would imply e1 = e2 . Hence, h1 6= h2 . Let v, w be the labels of the paths
from (n ; n ) to (h1 ; p0 ) and (h2 ; p0), respectively. As G is deterministic and h1 6= h2, it
follows that v 6= w.
ut
The main results of this section is stated in the next theorem. As a direct consequence of
this theorem, we obtain that there exists no lcs in S for the concept descriptions C0 and
D0 of our example.
Proof.
n

D

D

D

D

C

C

D

D

C

C

C

C

D

Theorem 6 The lcs of C and D exists i the number of same-as nodes in G1 is nite.

We start by proving the only-if direction. For this purpose, we assume that G1
contains an innite number of same-as nodes and show that there is no (nite) lcs for C
and D in S .
As argued before, we may assume that G1 contains an innite number of same-as nodes
of the form (f; t) or (t; f ), where t is a tree node and f is a non-tree node. More precisely,
say G1 contains for every i  1 nodes n = (f ; t ) such that f is a node in G and t is
a tree node in G1. According to Lemma 7, for every same-as node n there exist nodes
h1 ; h2 ; e1 ; e2 in G , p0 in G , and q0 in G1 as well as a 2 A and x 2 A with the
properties required in Lemma 7.
Since G and G are nite description graphs, the number of tuples of the form
h1 ; h2 ; e1 ; e2 ; f ; a is nite. Thus, there must be an innite number of i's yielding
the same tuple h1; h2 ; e1 ; e2 ; f; a. In particular, h1 6= h2 and e1 6= e2 are nodes in G and
there is an innite number of same-as nodes of the form n = (f; t1 ). Finally, as in the
lemma, let v, w be the label of paths (in G) from (n ; n ) to (h1 ; p0 ) and (h2 ; p0 ).
Now, assume there is an lcs E of C and D in S . According to Corollary 5, E  C 1 .
Let G be the nite canonical graph for E with root n0. By Proposition 2 and Lemma 7
we know E v vx a # wx a. From Algorithm 2 it follows that there are words v0, w0 , and u
such that vx a = v0 u and wx a = w0 u, where the paths in G starting from n0 labeled v0 ,
w0 lead to the same node in G .
If u 6= ", then u = u0a for some word u0. Then, Algorithm 2 ensures E v vx # wx .
However, by Lemma 7 we know that the words vx and wx lead to dierent nodes in
G
1 , namely, (e1 ; q0 ) and (e2 ; q0 ), which, with Proposition 2, leads to the contradiction
E  G
1 6v vx # wx . Thus, u = ".
As a result, for every i  1 there exists a node q in G such that n0vx aq and n0wx aq
are paths in G . Because G is a nite description graph, there exist i; j  1, i 6= j , with
Proof.

i

i

i

i

C

D

;i

;i

;i

;i

C

C

;i

;i

i

i

;i

D

;i

i

D

i

D

;i

;i

i

i

C

i

C

;i

D

t

G

E

t

i

i

i

i

E

E

t

i

;i

t

i

i

;i

i

i

E

i

i

E

194

E

i

i

i

i

What's in an Attribute?

= q . By Algorithm 2, this implies E v vx a # wx a. On the other hand, the path in
starting from (n ; n ) with label vx a leads to the node n and the one for wx a leads
to n . Since n 6= n , Proposition 2 implies E 6v vx a # wx a, which is a contradiction. To
sum up, we have shown that there does not exist an lcs for C and D in S .
This shows that there is no lcs of C , D in S which completes the proof of the only-if
direction.
We now prove the if direction of Theorem 6. For this purpose, we assume that G1 has
only a nite number of same-as nodes. Note that every same-as node in G1 has only a
nite number of direct predecessors. To see this, two cases are distinguished: i) a node of
the form (g1 ; g2 ) in G has only predecessors in G; ii) if t is a tree node and g a non-tree node,
then a predecessor of (g; t) in G1 is of the form (g0 ; t0) where t0 is the unique predecessor
(tree or non-tree node) of t and g0 is a non-tree node. Since the number of nodes in G
and G is nite, in both cases we only have a nite number of predecessors. But then, the
spanning tree T of G1 coincides with G1 except for a nite number of edges because, if T
does not contain a certain edge, then this edge leads to a same-as node. As a result, C 1
is an S -concept description because it is a nite conjunction of same-as equalities. Finally,
Corollary 5 shows that C 1 is the lcs of C and D.
ut
If v # w is a conjunct in C 1 , then v and w lead from the root of G1 to a same-as node.
As mentioned before, same-as nodes are of the form (f; g); (f; t), or (t; f ), where t is a tree
node and f; g are non-tree nodes. Consequently, v and w must be paths in G or G .
Thus, they only contain attributes occurring in C or D.
qi

G
1

j

t

C

j

i

D

i

j

i

i

j

t

i

j

j

C

D

G

G

G

C

D

Corollary 6 If the lcs of two concept description C and D in S exists, then there is a
concept description in S only containing attributes occurring in C or D that is equivalent
to the lcs.

Therefore, when asking for the existence of an lcs, we can w.o.l.g. assume that the set of
attributes A is nite. This fact will be used in the following two subsections.
5.3 Deciding the Existence of an LCS

From the following corollary we will derive the desired decision algorithm for the existence
of an lcs of two concept descriptions in S . To state the corollary we need to introduce the
language L C (q1 ; q2) := fw 2 A j there is a path from the node q1 to q2 in G labeled wg.
Since description graphs can be viewed as nite automata, such a language will be regular.
Moreover, let aA denote the set faw j w 2 Ag for an attribute a 2 A, where A is a nite
alphabet.
G

C

Corollary 7 G1 contains an innite number of same-as nodes i either
(i) there exist nodes (h1 ; p0 ), (h2 ; p0 ) in G as well as nodes f , e1 , e2 in G , and attributes
a; b 2 A such that
C

1.

h1

6= h2 , e1 6= e2 ;

2.

p0

does not have a b-successor in G ;

3.

(e1 ; a; f ), (e2 ; a; f ) are edges in G

D

C

; and
195

 steres, Borgida
Ku

4.

(

LGC h1 ; e1

) \ L C (h2 ; e2 ) \ bA is an innite set of words;
G

or
(ii) the same statement as (i) but with r^oles of C and

D

switched.

We rst prove the only-if direction. Assume that G1 contains an innite number
of same-as nodes. Then, w.l.o.g., we nd the conguration in G1 described in the proof
of Theorem 6. This conguration satises the conditions 1. and 3. stated in the corollary.
If, for i 6= j , the words x and x coincide, we can conclude n = n because G1 is a
deterministic graph. However, by denition, n 6= n . Hence, x 6= x . Because A is nite,
we can, w.l.o.g., assume that all x 's have b 2 A as their rst letter for some xed b. Thus,
condition 4. is satised as well. According to the conguration, the b-successor of (; p0 ) in
G
1 is of the form (; p00 ) where p00 is a tree node. Thus, p0 does not have a b-successor in
G , which means that condition 3. is satised.
We now prove the if direction of the corollary. For this purpose, let bx 2 L C (h1 ; e1 ) \
L C (h2 ; e2 ) \ bA . Since p0 has no b-successor in G it follows that there are tree nodes
t; t0 in G1 such that p0 bxtat0 2 G1 . Thus, we have (h1 ; p0 )bx(e1 ; t)a(f; t0 ) 2 G
1 and
0

(h2 ; p0 )bx(e2 ; t)a(f; t ) 2 G1. Since e1 6= e2, we can conclude (e1 ; t) 6= (e2 ; t). This means
that (f; t0) is a same-as node. Analogously, for by 2 L C (h1 ; e1 ) \ L C (h2 ; e2 ) \ bA there
are tree nodes s; s0 in G1 such that p0bysas0 2 G1 and (f; s0) is a same-as node in G1.
Since bx and by both start with b, and the b-successor of p0 in G1 is a tree node, x 6= y
implies s0 6= t0. Hence, (f; t0) and (f; s0) are distinct same-as nodes. This shows that if the
set L C (h1 ; e1 ) \ L C (h2 ; e2 ) \ bA is innite, G1 must have an innite number of same-as
nodes.
ut
For given nodes (h1 ; p0), (h2 ; p0 ) in G, attributes a; b 2 A, nodes f; e1; e2 2 G the conditions 1. to 3. in Corollary 7 can obviously be checked in time polynomial in the size of the
concept descriptions C and D. As for the last condition, note that an automaton accepting
the language L C (h1 ; e1 ) \ L C (h2 ; e2 ) \ bA can be constructed in time polynomial in the
size of C . Furthermore, for a given nite automaton it is decidable in time polynomial in
the size of the automaton if it accepts an innite language (see the book by Hopcroft and
Ullman (1979) for details). Thus, condition 4. can be tested in time polynomial in the size
of C and D as well. Finally, since the size of G and G is polynomial in the size of C and D,
only a polynomial number of congurations need to be tested. Together with Corollary 7
these complexities provide us with the following corollary.
Proof.

i

j

i

i

j

j

i

j

i

D

G

G

D

D

D

G

D

G

D

D

G

G

C

G

G

C

Corollary 8 For given concept descriptions C and D in S it is decidable in time polynomial
in the size of C and D whether lcs of C and D exists in S .
5.4 Computing the LCS

In this subsection, we rst show that the size of an lcs of two S -concept descriptions may
grow exponentially in the size of the concept descriptions. This is a stronger result than
that presented for partial attributes, where it was only shown that the lcs of a sequence of
concept descriptions in S can grow exponentially. Then, we present an exponential time lcs
algorithm for S -concept descriptions.
196

What's in an Attribute?

GC 0

:

GDk

:

a

c

c



a

b

a

d

d

c

c

b

a


d

d

k

Figure 8: The canonical description graphs for C 0 and D

k

In order to show that the lcs may be of exponential size, we consider the following
example, where A := fa; b; c; dg.We dene
0 := a # b;
C
D
:= u=1 ac # ad u u=1 bc # bd u ac a # bc a:
The corresponding canonical description graphs G 0 and G k are depicted in Figure 8.
A nite graph representing the lcs of C 0 and D is depicted in Figure 9 for k = 2.
This graph can easily be derived from G10  G1k . The graph comprises two binary trees
of height k, and thus, it contains at least 2 nodes. In the following, we will show that
there is no canonical description graph G k (with root n0) representing the lcs E of C 0
and D with less than 2 nodes. Let x 2 fc; dg be a word of length k over fc; dg, and let
v := axa, w := bxa. Using the canonical description graphs G 0 and G k it is easy to see
that C 0 v v # w and D v v # w. Thus, E v v # w. By Algorithm 2, this means that
there are words v0; w0 ; u such that v = v0 u, w = w0 u, and there are paths from n0 labeled
v 0 and w0 in G k leading to the same node in G k . Suppose u 6= ". Then, Algorithm 2
implies E v ax # bx. But according to G , D 6v ax # bx. Therefore u must be the empty
k

k

i

k

i

i

i

i

k

k

i

D

C

k

D

C

k

E

k

k

k

k

D

C

t

t

k

t

k

E

k

E

t

D

a

c

t

b

d

d

c

2
c

d

a

c

a

a

d

d

a

a

c

a

d

a

c

a

Figure 9: A nite graph representing the lcs of C 0 and D2
197

 steres, Borgida
Ku

word ". This proves that in G k there is a path from n0 labeled axa for every x 2 fc; dg .
Hence, there is a path for every ax. Now, let y 2 fc; dg be such that x 6= y. If the paths
for ax and ay from n0 in G k lead to the same node, then this implies E v ax # ay in
contradiction to C 0 6v ax # ay. As a result, ax and ay lead to dierent nodes in G k . Since
fc; dg contains 2 words, this shows that G k has at least 2 nodes. Finally, taking into
account that the size of a canonical description graph of a concept description in S is linear
in the size of the corresponding description we obtain the following theorem.
k

E

k

E

k

t

t

k

E

k

k

E

Theorem 7 The lcs of two S -concept descriptions may grow exponentially in the size of
the concepts.

The following (exponential time) algorithm computes the lcs of two S -concept descriptions
in case it exists.
Algorithm 3
Input: concept descriptions C , D in S , for which the lcs exists in S ;
Output: lcs of C and D in S ;
1. Compute G0 := G

G

C

D

;

2. For every combination

 of nodes (h1 ; p0 ), (h2 ; p0) in G = G  G , h1 6= h2 ;
 a 2 A, e1 ; e2 ; f in G , e1 6= e2 , where (e1 ; a; f ) and (e2 ; a; f ) are edges in G
C

D

C

extend G0 as follows: Let G
in

C

h1 ;t

,G

h2 ;t

be two trees representing the (nite) set of words

0
L := @L C (h1 ; e1 ) \ L C (h2 ; e2 ) \
G

[

G

b

62succ(

p0

)

1 (
f"g; if a 62 succ(p0)
bA A [

;

;

otherwise

where succ(p0 ) := fb j p0 has a b-successorg and the set of nodes of G 1 , G 2 , and
G0 are assumed to be disjoint. Now, replace the root of G 1 by (h1 ; p0 ), the root of
G 2 by (h2 ; p0 ), and extend G0 by the nodes and edges of these two trees. Finally,
add a new node n for every word v in L, and for each node of the trees G 1 and
G 2 reachable from the root of G 1 and G 2 by a path labeled v , add an edge with
label a from it to n . The extension is illustrated in Figure 10.
h ;t

h ;t

h ;t

h ;t

v

h ;t

h ;t

h ;t

h ;t

v

3. The same as in step 2, with r^oles of C and D switched.
4. Compute the canonical graph of G0 , which is called G0 again. Then, output the concept
description C 0 of G0 .
G

Proposition 3 The translation
of C and D.

CG0

of the graph G0 computed by Algorithm 3 is the lcs E
198

What's in an Attribute?

0

G

(h1 ; p0 )

(h2 ; p0 )

b

a

b

a

b

n

a
c

a

a
c

a

bc

n
d

a

a

d

bad

n

Figure 10: The extension at the nodes (h1 ; p0), (h2 ; p0 ) in G0 where L = fb; bc; badg
It is easy to see that if there are two paths in G0 labeled y1 and y2 leading from
the root (n ; n ) to the same node, then G1 contains such paths as well. Consequently,
(E  )G1 v G0.
Now, assume E v y1 # y2, y1 6= y2. By Proposition 2 we know that there are paths
in G1 labeled y1 and y2 leading to the same node n. W.l.o.g, we may assume that n is a
same-as node in G1. Otherwise, there exist words y10; y2 0; u with y1 = y10u, y2 = y20u such
that y10 and y20 lead to a same-as node. If we can show that G0 contains paths labeled y10
and y20 leading to the same node, then, by Algorithm 2, this is suÆcient for G0 v y1 # y2.
So let n be a same-as node. We distinguish two cases:
1. If n is a node in G = G  G , then the paths for y1 and y2 are paths in G. Since G
is a subgraph of G0 this holds for G0 as well. Hence, C 0 v y1 # y2.
2. Assume n is not a node in G. Then, since n is a same-as node, we know that n is of the
form (f; t) or (t; f ) where f is a non-tree node and t is a tree node. By symmetry, we
may assume that n = (f; t). Now it is easy to see that there exist nodes h1 ; h2 ; e1 ; e2 in
G , p0 in G , and a tree node q0 in G1 as well as a 2 A and x; v; w 2 A as specied
in Lemma 7 such that y1 = vxa and y2 = wxa. But then, with h1 ; h2 ; e1 ; e2 ; p0; f and
a the preconditions of Algorithm 3 are satised and x 2 L. Therefore, by construction
of G0 there are paths labeled y1 and y2, respectively, leading from the root to the same
node.
ut
We note that the product G of G and G can be computed in time polynomial in the
size of C and D. Furthermore, there is only a polynomial number of combinations of nodes
(h1 ; p0 ), (h2 ; p0) in G, e1 ; e2 ; f in G , a 2 A. Finally, the nite automaton for L can be
computed in time polynomial in the size of C and D. In particular, the set of states of this
automaton can polynomially be bounded in the size of C and D. If L contained a word
longer than the number of states, the accepting path in the automaton contains a cycle. But
then, the automaton would accept innitely many words, in contradiction to the assumption
that L is nite. Thus, the length of all words in L can be bounded polynomially in the
size of C and D. In particular, this means that L contains only an exponential number of
words. Trees representing these words can be computed in time exponential in the size of
C and D .
Proof.

C

t

D

t

t

t

C

D

G

C

D

D

C

D

C

199

t

 steres, Borgida
Ku

Corollary 9 If the lcs of two S -concept descriptions exists, then it can be computed in time
exponential in the size of the concept descriptions.
6. Conclusion

Attributes | binary relations that can have at most one value { have been distinguished
in many knowledge representation schemes and other object-centered modeling languages.
This had been done to facilitate modeling and, in description logics, to help identify tractable
sets of concept constructors (e.g., restricting same-as to attributes). In fact, same-as restrictions are quite important from a practical point of view, because they support the modeling
of actions and their components (Borgida & Devanbu, 1999).
A second distinction, between attributes as total versus partial functions, had not been
considered so essential until now. This paper has shown that this distinction can sometime
have signicant eects.
In particular, we have rst shown that the approach for computing subsumption of
Classic concepts with total attributes, presented by Borgida and Patel-Schneider (1994),
can be modied to accommodate partial attributes, by treating partial attributes as roles
until they participate in same-as restrictions, in which case they are \converted" to total attributes. As a result, we obtain polynomial-time algorithms for subsumption and
consistency checking in this case also.
In the case of computing least common subsumers, which was introduced as a technique
for learning non-propositional descriptions of concepts, we rst noted that several of the
papers in the literature (Cohen & Hirsh, 1994a; Frazier & Pitt, 1996) (implicitly) used
partial attributes, when considering Classic. Furthermore, these papers used a weaker
version of the \concept graphs" employed in (Borgida & Patel-Schneider, 1994), which
make the results only hold for the case of same-as restrictions that do not generate \cycles".
Furthermore, the algorithm proposed by Frazier and Pitt (1996) does not handle inconsistent
concepts, which can easily arise in Classic concepts as a result of conicts between lower
and upper bounds of roles.
Therefore, we have provided an lcs algorithm together with a formal proof of correctness
for a sublanguage of Classic with partial attributes, which allows for same-as equalities
and inconsistent concepts | the algorithm and proofs can easily be extended to full Classic
(Kusters & Borgida, 1999). In this case, the lcs always exists, and it can be computed in
time polynomial in the size of the two initial concept descriptions. As shown by Cohen et al.
(1992), there are sequences of concept descriptions for which the lcs may grow exponentially
in the size of the sequence.
To complete the picture, and as the main part of the paper, we then examined the
question of computing lcs in the case of total attributes. Surprisingly, the situation here
is very dierent from the partial attribute case (unlike with subsumption). First, for the
language S the lcs may not even exist. (The existence of the lcs mentioned by Cohen et al.
(1992) is due to an inadvertent switch to partial semantics for attributes.) Nevertheless,
the existence of the lcs of two concept descriptions can be decided in polynomial time. But
if the lcs exists, it may grow exponentially in the size of the concept descriptions, and hence
the computation of the lcs may take time exponential in the size of the two given concept
descriptions.
200

What's in an Attribute?

As an aside, we note that it has been pointed out by Cohen et al. (1992) that concept
descriptions in S correspond to a nitely generated right congruence. Furthermore, in this
context the lcs of two concept descriptions is the intersection of right congruences. Thus,
the results presented in this paper also show that the intersection of nitely generated
right congruences is not always a nitely generated right congruence, and that there is a
polynomial algorithm for deciding this question. Finally, if the intersection can be nitely
generated, then the generating system may be exponential and can be computed with
an exponential time algorithm in the size of the generating systems of the given right
congruences.
The results in this paper therefore lay out the scope of the eect of making attributes
be total or partial functions in a description logic that supports the same-as constructor.
Moreover, we correct some problems and extend results in the previous literature.
We believe that the disparity between the results in the two cases should serve as a
warning to other researchers in knowledge representation and reasoning, concerning the
importance of explicitly considering the dierence between total and partial attributes.
Acknowledgments

The authors wish to thank the anonymous reviewers for their helpful comments. This
research was supported in part by NSF Grant IRI-9619979. It was carried out while the
rst author was at the Rutgers University and the RWTH Aachen.
References

Artale, A., Franconi, E., Guarino, N., & Pazzi, L. (1996). Part-Whole Relations in ObjectCentered Systems: An Overview. Data & Knowledge Engineering, 20 (3), 347{383.
Baader, F. (1996). A Formal Denition for the Expressive Power of Terminological Knowledge Representation Languages. Journal of Logic and Computation, 6 (1), 33{54.
Baader, F., & Kusters, R. (1998). Computing the Least Common Subsumer and the Most
Specic Concept in the Presence of Cyclic ALN -Concept Descriptions. In Herzog,
O., & Gunter, A. (Eds.), Proceedings of the 22nd Annual German Conference on
Articial Intelligence, KI-98, Vol. 1504 of Lecture Notes in Computer Science, pp.
129{140 Bremen, Germany. Springer{Verlag.
Baader, F., Kusters, R., & Molitor, R. (1999). Computing Least Common Subsumers in
Description Logics with Existential Restrictions. In Dean, T. (Ed.), Proceedings of the
16th International Joint Conference on Articial Intelligence (IJCAI'99), pp. 96{101
Stockholm, Sweden. Morgan Kaufmann Publishers.
Baader, F., & Sattler, U. (2000). Tableaux Algorithms for Description Logics. In Proceedings of the International Conference on Automated Reasoning with Analytic Tableaux
and Related Methods (TABLEAUX 2000), Vol. 1847 of Lecture Notes in Artical Intelligence, pp. 1{18 University of St. Andrews, Scotland.
201

 steres, Borgida
Ku

Borgida, A. (1994). On The Relationship Between Description Logic and Predicate Logic.
In Proceedings of the Third International Conference on Information and Knowledge
Management (CIKM'94), pp. 219{225 Gaithersburg, Maryland. ACM Press.
Borgida, A. (1995). Description logics in data management. IEEE Trans. on Knowledge
and Data Engineering, 7 (5), 671{682.
Borgida, A., & Devanbu, P. (1999). Adding more "DL" to IDL: towards more knowledgeable
component inter-operability. In Proceedings of the 1999 International Conference on
Software Engineering, pp. 378{387 Los Angeles, CA USA. ACM.
Borgida, A., & Etherington, D. (1989). Hierarchical Knowledge Bases and EÆcient Disjunctive Reasoning. In Brachman, R., & H.J. Levesque, R. R. (Eds.), Proceedings
of the 1st International Conference on Principles of Knowledge Representation and
Reasoning (KR'89), pp. 33{43 Toronto, Canada. Morgan Kaufmann Publishers.
Borgida, A., & Kusters, R. (2000). What's not in a name: Some Properties of a Purely
Structural Approach to Integrating Large DL Knowledge Bases. In Baader, F., &
Sattler, U. (Eds.), Proceedings of the 2000 International Workshop on Description
Logics (DL2000), No. 33 in CEUR-WS Aachen, Germany. RWTH Aachen.
Borgida, A., & Patel-Schneider, P. (1994). A Semantics and Complete Algorithm for Subsumption in the CLASSIC Description Logic. Journal of Articial Intelligence Research, 1, 277{308.
Brachman, R., McGuinness, D., Patel-Schneider, P., & Borgida, A. (1999). \Reducing"
CLASSIC to Practice: Knowledge Representation Theory Meets Reality. Articial
Intelligence, 114 (1{2), 203{237.
Calvanese, D., Giacomo, G. D., & Lenzerini, M. (1998). What can Knowledge Representation do for Semi-Structured Data?. In Proceedings of the 16th National Conference
of the American Association for Articial Intelligence, AAAI-98, pp. 205{210. AAAI
Press/The MIT Press.
Calvanese, D., Giacomo, G. D., & Lenzerini, M. (1999a). Modeling and Querying SemiStructured Data. Network and Information Systems, 2 (2), 253{273.
Calvanese, D., Giacomo, G. D., & Lenzerini, M. (1999b). Reasoning in Expressive Description Logics with Fixpoints based on Automata on Innite Trees. In Dean, T. (Ed.),
Proceedings of the 16th International Joint Conference on Articial Intelligence (IJCAI'99), pp. 84{89 Stockholm, Sweden. Morgan Kaufmann Publishers.
Calvanese, D., Giacomo, G. D., Lenzerini, M., Nardi, D., & Rosati, R. (1998). Description
Logic Framework for Information Integration. In Cohn, A., Schubert, L., & Shapiro, S.
(Eds.), Proceedings of the 6th International Conference on the Principles of Knowledge
Representation and Reasoning (KR-98), pp. 2{13 Trento, Italy. Morgan Kaufmann
Publishers.
Calvanese, D., Lenzerini, M., & Nardi, D. (1999). Unifying Class-Based Representation
Formalisms. Journal of Articial Intelligence Research, 11, 199{240.
202

What's in an Attribute?

Cohen, W. W., & Hirsh, H. (1994a). Learnability of description logics with equality constraints. Machine Learning, 17 (2/3), 169{199.
Cohen, W. W., & Hirsh, H. (1994b). Learning the CLASSIC Description Logic: Theoretical and Experimental Results. In Doyle, J., Sandewall, E., & Torasso, P. (Eds.),
Proceedings of the Fourth International Conference on Principles of Knowledge Representation and Reasoning (KR'94), pp. 121{133 Bonn, Germany. Morgan Kaufmann
Publishers.
Cohen, W., Borgida, A., & Hirsh, H. (1992). Computing Least Common Subsumers in Description Logics. In Swartout, W. (Ed.), Proceedings of the 10th National Conference
on Articial Intelligence, pp. 754{760 San Jose, CA. MIT Press.
Devanbu, P., & Jones, M. (1997). The Use of Description Logics in KBSE Systems. ACM
Transactions on Software Engineering and Methodology (TOSEM), 6 (2), 141{172.
Frazier, M., & Pitt, L. (1996). Classic learning. Machine Learning Journal, 25, 151{193.
Giacomo, G. D., & Lenzerini, M. (1996). TBox and ABox reasoning in expressive description logics. In Aiello, L., Doyle, J., & Shapiro, S. (Eds.), Proceedings of the 5th
International Conference on Principles of Knowledge Representation and Reasoning
(KR'96), pp. 316{327 Boston, USA. Morgan Kaufmann Publishers.
Hopcroft, J., & Ullman, J. (1979). Introduction to Automata Theory. Addison-Wesley Publ.
Co.
Kusters, R., & Borgida, A. (1999). What's in an Attribute? Consequences for the Least
Common Subsumer. Tech. rep. DCS-TR-404, Rutgers University, USA. Available via
ftp://ftp.cs.rutgers.edu/pub/technical-reports/.
McGuinness, D., & Patel-Schneider, P. (1998). Usability Issues in Knowledge Representation Systems. In Proceedings of the 15th National Conference on Articial Intelligence
(AAAI-98) and of the 10th Conference on Innovative Applications of Articial Intelligence (IAAI-98), pp. 608{614 Menlo Park. AAAI Press.
McGuinness, D., & Wright, J. (1998). An industrial strength Description Logic-based
congurator platform. IEEE Intelligent Systems, 13 (4), 66{77.
Minsky, M. (1975). A framework for representing knowledge. In Winston, P. (Ed.), The
Psychology of Computer Vision McGraw-Hill, New York.
Quillian, M. (1968). Semantic memory. In Minsky, M. (Ed.), Semantic Information Processing, pp. 216{270 Cambridge, Mass. MIT Press.
Schmidt-Schau, M. (1989). Subsumption in KL-ONE is undecidable. In Brachman, R. J.
(Ed.), Proceedings of the 1st International Conference on Principles of Knowledge
Representation and Reasoning (KR'89), pp. 421{431 Toronto, Ont. Morgan Kaufmann
Publishers.
203

Journal of Articial Intelligence Research 14 (2001) 1-28

Submitted 2/00; published 1/01

On Reachability, Relevance, and Resolution in the Planning
as Satisability Approach
Ronen I. Brafman

brafman@cs.bgu.ac.il

Department of Computer Science, Ben-Gurion University
P.O.Box 653, Beer-Sheva 84105, Israel

Abstract

In recent years, there is a growing awareness of the importance of reachability and
relevance-based pruning techniques for planning, but little work specically targets these
techniques. In this paper, we compare the ability of two classes of algorithms to propagate
and discover reachability and relevance constraints in classical planning problems. The rst
class of algorithms operates on SAT encoded planning problems obtained using the linear
and Graphplan encoding schemes. It applies unit-propagation and more general resolution steps (involving larger clauses) to these plan encodings. The second class operates at
the plan level and contains two families of pruning algorithms: Reachable-k and Relevantk . Reachable-k provides a coherent description of a number of existing forward pruning
techniques used in numerous algorithms, while Relevant-k captures dierent grades of backward pruning. Our results shed light on the ability of dierent plan-encoding schemes to
propagate information forward and backward and on the relative merit of plan-level and
SAT-level pruning methods.
1. Introduction

The success of the planning as satisability (PAS) approach (Kautz & Selman, 1992, 1996)
has led to various attempts to rene the initial methods used and to improve our understanding of its performance. In particular, various methods for generating formulas from
planning instances have been compared (Ernst, Millstein, & Weld, 1997), and various systematic alternatives to the original stochastic method have been examined (e.g., Bayardo
& Schrag, 1997; Li & Anbulagan, 1997). Still, many issues surrounding this approach are
poorly understood. In particular, little is known about the inuence of the encoding method
on performance.
Concentrating on the two encoding methods proposed by Kautz and Selman (1996), the
linear and the Graphplan-based encodings, we examine their inuence on the ability to
propagate reachability and relevance information via unit propagation and, more generally,
k -clause resolution. We do so by comparing the pruning ability of these techniques to that
of a class of algorithms for reachability and relevance analysis that operate on the original
problem formulation: Reachable-k and Relevant-k. Reachable-k is a simplied variant of
a similar algorithm for state pruning in Markov decision processes (Boutilier, Brafman, &
Geib, 1998), while Relevant-k is a natural counterpart used for relevance analysis. Both
algorithms provide a coherent framework for discussing dierent grades of reachability and
relevance-based pruning methods that appear in the literature.
Our work is motivated by the growing role that forward and backward pruning methods
play in current planning algorithms and the important role of propagation techniques in

c 2001 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Brafman

all SAT solvers used in the planning as satisability approach. Unit propagation plays
a central role in the Davis-Putnam algorithm (Davis & Putman, 1960) and many of its
osprings (e.g., Crawford & Auton, 1993; Freeman, 1995; Gomes, Selman, & Kautz, 1998;
Li & Anbulagan, 1997) and it is used as a preprocessing step when stochastic methods are
applied. Moreover, a limited form of binary propagation is used in Crawford's Compact
program for simplifying CNF formulas which is utilized in the Blackbox planner (Kautz
& Selman, 1999). Our results shed some light on the relationship between these pruning
techniques.
The paper is organized as follows. Section 2 provides background material, describing
the basic ideas of the PAS framework and the Graphplan algorithm. In Section 3, we
discuss Reachable-k , an algorithm for performing reachability analysis, and compare its
ability to prune possible actions to that of k-clause resolution. In Section 4 we describe
Relevant-k which is similar to Reachable-k and is applied to relevance analysis. Again, we
compare it to methods based on resolution. In Section 5 we empirically compare the results
of various methods for k = 1; 2. We conclude with a discussion of future and related work
in Section 6. Proofs appear in the appendix, but their main arguments are described in the
body of the paper.
2. Background

The Graphplan algorithm (Blum & Furst, 1997) and the Satplan algorithm (Kautz
& Selman, 1996) have profoundly altered the direction of research within the planning
community. Two of the main concepts studied in this paper, reachability analysis and plan
encodings, have become central to current planning research thanks to these planners. We
briey discuss these planners, and in particular, their aspects pertaining to our topic.

2.1 Reachability Analysis in Graphplan
The purpose of reachability analysis is to discover unreachable states of the world and
infeasible actions, i.e., actions that cannot be performed in the course of a successful plan.
By discovering such actions ahead of time, we reduce the space that needs to be searched to
nd a valid plan. In principle, full edged reachability analysis requires forward search in
the space of possible states. This is a very expensive operation, and instead, we can opt for
sound, but incomplete methods. Such methods do not discover all the actions that can be
ruled out. However, any action that they rule out is infeasible and need not be considered
when searching for a plan.
The Graphplan planner provides a good example of the utility of approximate reachability analysis. Graphplan has two main stages: In the rst stage, approximate reachability analysis is conducted, yielding a data-structure called the planning graph which
represents a sound, but incomplete, approximation of the set of states reachable from the
initial state. In the second stage, Graphplan searches for a plan over this structure.
Graphplan's planning graph construction algorithm presents a particularly good tradeo
between computational complexity and pruning power, and its utility in pruning the search
space is attested to by the planner's good performance.
The planning graph construction algorithm can be viewed as generating a list of annotated sets. The odd elements in this list contain sets of propositions. The even elements
2

Reachability, Relevance, and Resolution

in this list contain sets of actions. Each such set is annotated with mutual exclusion constraints on its members. Intuitively, the i action set contains the list of actions that could
be performed at the i step of a concurrent action plan (i.e., a plan allowing for concurrent
execution of actions that do not interfere with each other). The i proposition set contains
propositions that could hold after i 1 (sets of concurrent) actions have been performed.
The mutual exclusion constraints circumscribe these sets by indicating that certain pairs of
actions or propositions cannot occur at the same time at a particular stage. Hence, if the
propositions p; q appear in the i proposition set, then it is possible (or more accurately
{ the algorithm does not rule out the possibility) that an i-step plan applied at the initial
state could lead to a world in which p and/or q hold. However, if p and q are marked
mutually exclusive then we know that p and q cannot hold together after some i-step plan
has been performed.
The sets are constructed as follows: The rst proposition set contains the propositions
that hold at the initial state. The rst action set contains the actions that can be performed
at the initial state. In general, the i set of propositions contains the eects of actions in
the i-1 action set, and the i action set contains actions whose preconditions appear in
the i-1 set of propositions, provided that their preconditions are not marked as mutually
exclusive. Mutual exclusion constraints are added as follows: Two actions are marked
mutually exclusive at the i action set if their preconditions are marked mutually exclusive
at the i-1 . Clearly, if all the preconditions of these actions cannot hold at this time
point, we cannot perform both actions together at this time point. Another reason for
marking actions as mutually exclusive is if they conict. That is, if one action destroys a
precondition or an eect of the other action. Two propositions at the i proposition set
are marked mutually exclusive if all pairs of actions in the i-1 action set that have them
as eects are mutually exclusive. When that is the case, there is no way for us to achieve
both of these propositions together at this stage.
The initial construction of the planning graph is terminated once all goal propositions
appear in the last proposition set. At that point, Graphplan performs a form of regressionbased search on the planning-graph structure. If this search fails, the planning graph is
extended by one additional layer of actions and one additional layer of propositions and
searched again. For more details, see the article by Blum and Furst (1997).
th

th

th

th

th

th

th

th

th

th

th

th

2.2 The Planning as Satisability Approach
The Planning as Satisability approach (PAS for short), works as follows: given a planning
problem and a bound n on the size of the plan, the plan encoder generates a propositional
formula in conjunctive normal form. This formula has the following property: it is satisable
i the planning problem has a solution with at most n time steps. Intuitively, the formula
is composed of propositions describing the state of the world throughout the execution of
an n-step plan.
The propositional language on top of which the formula is dened contains a proposition
for each possible aspect of the world at each time point. For example, suppose we are looking
at the blocks' world domain where states are described using the on and clear relations.
In that case, for any pair of blocks x; y, and any time point 0  t  n we shall introduce
a proposition pon( ) which corresponds to x being on top of y at time t. Similarly, for
x;y;t

3

Brafman

every block x and time point 0  t  n, we shall introduce a proposition pclear( ) which
corresponds to x being clear at time t.
A truth assignment to the language described above can be viewed as describing the state
of the world during the execution of an n-step plan. For instance, if pon( 3) is assigned
true , then block A is on top of block B at time 3. Of course, most truth assignments
to this language would not correspond to anything resembling the true state of the world
during the execution of an actual plan. For example, both on(A,B) and on(B,A) could
be assigned true . The goal of the encoding scheme is to generate a formula such that any
assignment satisfying this formula will correspond to the true state of the world during
the execution of an actual plan that achieves the desired goal. Each axiom in this formula
places some constraint on the value of these propositions so that the combined eect of
these constraints is to ensure that the resulting formula has precisely the desired truth
assignments. For example, one type of axiom will be a conjunction of all the propositions
corresponding to the initial state. Any truth assignment satisfying this axiom must ensure
that these propositions hold at time 0. Another class of axioms could state that if some
action a is performed at time t then the world at time t 1 must satisfy the preconditions
of a. In the next sections we discuss two of the central plan encodings in more detail.
Once an appropriate formula has been generated, it is simplied using various well
known techniques. In particular, all simpliers employ a unit-resolution step (Genesereth
& Nilsson, 1987). Unit resolution (also known as unit propagation ) works as follows: To
satisfy a CNF formula, we must satisfy each of its clauses. In particular, if one of the
clauses contains a single literal (such a clause is known as a unit clause ) we immediately
know that the variable appearing in this clause must be assigned an appropriate value. Any
clause containing the same literal will be satised now, and it can be removed from the
formula. Any clause c containing the negation of that literal can be resolved against this
unit clause, and the resulting clause (which is smaller than c) can replace c. For example,
suppose we have the formula (p) ^ (:q _:p) ^ (r _ p). The rst disjunct, (p) is a unit clause.
Hence, p must be assigned true . This makes the third clause, (r _ p), satised. The second
clause is now resolved with the rst clause, and we replace (:q _ :p) by (:q). We now
have a new unit clause, (:q), and so the proposition q must be assigned the value false . If
we had additional clauses containing q or :q, we could remove them, or simplify them, as
appropriate.
After simplication, we apply our favorite algorithm for nding satisfying assignments,
and if one is attained, a decoder is used to obtain an actual plan from this solution. If we
do not nd a satisfying assignment, we increase the value of n (the size of the plan), and
try again.
Finally, we note that the Blackbox planner (Kautz & Selman, 1999) combines PAS
with Graphplan's reachability analysis. It constructs a planning graph, and uses it to
generate a particular plan encoding.
x;t

A;B;

3. Reachability and Resolution

Reachability and relevance analysis form an essential part of successful modern planning
algorithms. The most notable example of reachability analysis is Graphplan's planning
graph (Blum & Furst, 1997), and many recent planners employ either reachability analysis
4

Reachability, Relevance, and Resolution

(e.g., Bonet, Loerincs, & Gener, 1997), relevance analysis (e.g., McDermoot, 1996; Nebel,
Dimopoulos, & Koehler, 1997), or both (Kambhampati, Parker, & Lambrecht, 1997). The
importance of reachability and relevance analysis has been noted in the context of decisiontheoretic planning as well. For example, Boutilier and Dearden (1994) employ relevance
analysis to reduce the state-space, and Boutilier, Brafman, and Geib (1998) describe a
general method for reachability analysis for MDPs. Below, we discuss this method in a
simplied form suitable for classical planning problems described using the Strips representation language (Fikes & Nilsson, 1971). In Section 4, we present a counterpart of this
method for performing relevance analysis and relate these algorithms to k-clause resolution
in the context of SAT-encoded planning problems.

3.1 Propagating Reachability Information
Reachable-k (Boutilier, Brafman, & Geib, 1998) is an algorithm for estimating the states
reachable from a given initial state. As formulated, it is quite general and applies to domains with non-deterministic actions and conditional eects. In Figure 1, we present a
simplied version of that algorithm, Reachable-k , which deals with deterministic, unconditional actions represented in the Strips representation language. A prolog implementation
of Reachable-k is available at www.cs.bgu.ac.il/~pdm.
An important reason for our interest in Reachable-k is its similarity to the inuential planning graph construction of the Graphplan planner (Blum & Furst, 1997). In
fact, it generalizes the ideas behind Graphplan's planning graph, which is equivalent to
Reachable-2. We use A to denote the set of actions feasible i steps from the initial state,

S to denote the corresponding set of propositions, and C S to denote constraints on these
propositions, such that if fp1 ; : : : ; p g 2 C S  then these propositions cannot co-occur after

i steps. C A denotes similar constraints on actions. Here,  2 fL; P g, where L is used when
we restrict our attention to linear action sequences, and P is used when we allow concurrent
non-conicting actions (i.e., actions that do not destroy each others' eects or preconditions
and whose preconditions are not constrained not to co-occur). Of course, for k = 1 the sets


C S and C A are empty for all i  0. (Actually, as dened, C A
is not empty even when
k = 1, but it plays no real part in the algorithm, and it should be ignored). Finally, note
that in this description, the set of possible actions contains all actions of the form noop[l],
where l is a literal.
When k = 2, S and A represent the propositional and action levels of Graphplan's
planning graph, and C S and C A hold their respective mutual exclusion constraints.
We have not stated a termination condition for Reachable-k, but one can be formulated
based on the content of S or the index i itself. In the PAS framework, where the number
of time-steps is xed, one would opt for the second alternative. Reachable-k gives us sets
of actions and propositions, A ; S , that could occur after the performance of j actions (or
j sets of concurrently non-conicting actions) from the initial state. It is easy to see that
Reachable-k is sound in the following sense:
i

i

i

m

i

i

i

L
i

i

i

i

P
i

i

i

j

j

Theorem 1 If a set of propositions or actions is excluded by Reachable-k at time j then

there is no feasible plan in which, at time j , these propositions hold or, respectively, these
actions appear.
5

Brafman

= literals that hold in the initial state.



S0



C S0

= fg.

= actions all of whose preconditions are in S0 .
 C AL
0 = ffai ; aj gjai ; aj 2 A0 ; i 6= j; neither ai nor aj are noops or aj is a noop whose eect
is destroyed by ai g.
 C AP = ffai ; aj gjai ; aj 2 A0 ; i 6= j; and ai deletes a precondition or an eect of aj g.


A0

0

We dene Si ; Ai inductively as follows:
i = literals that appear in the eects of Ai 1 .
 C Si = l-tuples of literals, where l  k , appearing in Si such that some subset of any set
of actions from Ai 1 that has these literals appearing among their eects, appears in C Ai 1
(where  2 fL; P g as appropriate).


S

i = actions whose preconditions appear in Si and no subset of their preconditions appears
in C Si .
 C AL
i = ffal ; aj gjal ; aj 2 Ai ; l 6= j; neither al nor aj are noops, or aj is a noop whose eect is
destroyed by al g.
 C APi = ffaj1 ; : : : ; ajl gjl  k; aj1 ; : : : ; ajl 2 Ai ; jm 6= jn for m 6= n; and either (1) ajm
deletes a precondition or an eect of ajn for some m 6= n or (2) some subset of the union of
preconditions of aj1 ; : : : ; ajl appears in C Si g.


A

Figure 1: The Reachable-k Algorithm
Sometimes, all actions that can be executed at a particular time point in which p holds
have :p as an eect. In that case, we can ignore the noop[p] action, as it will not be part
of any useful plan.1 However, as formulated, p will appear in Reachable-k 's next level. We
denote by Reachable -k a variant in which noop[p] does not appear in such a case.
The computational complexity of Reachable-k is O(njAjjLj E + njLjjAj ), where n is
the number of levels we generate, jAj is the number of possible actions, jLj is the size of the
propositional language used, and E is the maximal number of actions that have a particular
shared eect. A more detailed explanation appears in Appendix B.
Example: To illustrate the parallel action version of Reachable-k, we use the following
planning domain: There are four propositions, p1 ; p2 ; p3 ; p4 . Intuitively, we can think of
them as representing a binary counter with 4 bits. There are 4 actions, each of which
increases the counter by one at dierent states. In this domain only a single non-noop
action is applicable at each state. a1 changes the least-signicant bit, a2 changes the next
bit, a3 changes the third bit, and a4 changes the most signicant bit. a is applicable only
if the rst i 1 bits are one. More specically the actions are:
k

k

k

i

1. For some planning algorithms, e.g., in the PAS approach, it may be necessary to leave the noops in.

6

Reachability, Relevance, and Resolution

a1

Precondition:

:

a2

Precondition:

p1

a3

Precondition:

p

p

a4

Precondition:

p

p

p1

; eect:

p1

.

^ : 2; eect: : 1 ^ 2.
1 ^ 2 ^ : 3 ; eect: : 1 ^ : 2 ^ 3 .
1 ^ 2 ^ 3 ^ : 4 ; eect: : 1 ^ : 2 ^ : 3 ^
p

p

p

p

p

p

p

p

p

p
p

p

p4

.

We compare Reachable-1 and Reachable-2 using the initial state: :p1 ^:p2 ^:p3 ^:p4 ,
which corresponds to a binary representation of 0. We concentrate on the (more interesting)
parallel action version of the algorithm, and we shall not mention noops explicitly or obvious
mutual exclusion constraints between propositions and their negations.
In the context of Reachable-1, C S and C A are empty, for all practical purpose. We
start with S0 = f:p1 ; :p2 ; :p3 ; :p4 g; Only the action aecting the rst bit is applicable, and
A0 = fa1 g (and all the relevant noops); We now have S1 = fp1 ; :p1 ; :p2 ; :p3 ; :p4 g. Because
the preconditions for both a1 and a2 appear in S1 , we have that A1 = fa1 ; a2 g. Consequently
S2 = fp1 ; :p1 ; p2 ; :p2 ; :p3 ; :p4 g. Now, we can also apply a3 , and we have A2 = fa1 ; a2 ; a3 g;
S3 = fp1 ; :p1 ; p2 ; :p2 ; p3 ; :p3 ; :p4 g. Finally, at this stage all preconditions of a4 appear as
well, and A3 = fa1 ; a2 ; a3 ; a4 g.
Next, consider Reachable-2. Again, S0 = f:p1 ; :p2 ; :p3 ; :p4 g, C S0 is empty, and A0 =
fa1 g. In the next step we have: S1 = fp1; :p1 ; :p2; :p3; :p4g, with no interesting constraints
in C S1 , and A1 = fa1 ; a2 g. However, now C A contains (a1 ; a2 ), which are interfering
actions. S2 = fp1 ; :p1 ; p2 ; :p2 ; p3 ; :p3 ; :p4 g, as in the case of k = 1. However, C S2 contains
(p1 ; p2 ). This follows from the fact that the only actions in A1 capable of producing p1 are
a1 and noop[p1 ], and the only action in A1 capable of producing p2 is a2 . a2 interferes
with both a1 an noop[p1]. Therefore, because C S2 contains (p1 ; p2 ), a3 is not applicable
at this stage. Hence, A2 = fa1 ; a2 g, which is one action less than the set A2 in Reachable1. S3 = S2 = fp1 ; :p1 ; p2 ; :p2 ; p3 ; :p3 ; :p4 g. However, now C S3 does not contain (p1 ; p2 )
(because noop[p2] can be used to achieve p2 , and it does not conict with, e.g., noop[p1]).
Therefore, A3 = fa1 ; a2 ; a3 g.
To see how k = 3 improves our ability to prune over k = 2, suppose that S0 =
fp1 ; p2; :p3; :p4 g (i.e., the counter's value is 0011) and consider k = 2 rst. We have
A0 = a3 and S1 = f:p1; p1; :p2 ; p2 ; :p3 ; p3 ; :p4 g, with (p1 ; p3 ); (p1 ; :p2 ); (:p1 ; p2 ) and
(p2 ; p3 ) in C S1 . Each of these mutual exclusion relations stems from the fact that a3
is mutually exclusive with noop[p1] and noop[p2 ]. Therefore, A1 = fa1 ; a3 g. Again
S2 = S1 = f:p1; p1; :p2 ; p2 ; :p3 ; p3 ; :p4 g, but now C S2 contains (p1 ; p2 ) only, and so
A2 = fa1 ; a2 ; a3 g. Now, C S3 is empty, and so A3 = fa1 ; a2 ; a3 ; a4 g. However, if k = 3,
C S1 contains the ternary constraint (p1 ; p2 ; p3 ). This ternary constraint remains in C S2 as
well, and in C S3 . Because it is in C S3 for k = 3, we have that a4 62 A3 .
i

i

i

3.2 k-Clause Resolution and Reachability
-clause resolution (or propagation) refers to the resolution of pairs of clauses one of whose
length is k at most. The k = 1 variant, i.e., unit propagation, is an integral part of all
major algorithms for generating satisfying assignments.
We wish to compare the type of reachability information derived by performing k-clause
resolution on SAT-encoded planning problems, with the information obtained by running
k

7

Brafman

the Reachable-k algorithm. By reachability information we mean constraints on the set of
actions possible at a time point or constraints on world states (in the form of, e.g., sets of
unreachable propositions or k-tuples of propositions). Hence, for example, a constraint of
the form a(t) _ a0 (t) implies that one of the actions a or a0 must appear at time t in the
plan. A constraint of the form :a(t) _:a0(t) implies that one of the actions a or a0 must not
appear in the plan. Similar constraints on the propositions holding at a time point can also
be derived. In principle, such constraints reduce our search space and could help us attain
a solution more quickly. However, the eectiveness of such deduced constraints depends
on the precise algorithm used. Moreover, comparison over a very large class of constraints
seems quite diÆcult. Therefore, in this article we concentrate on a very concrete class of
reachability information of the form :a(t), i.e., the action a cannot be performed at any
state reachable via t steps. These are powerful constraint which can be utilized eectively
by almost all planners (perhaps with the exception of partial-order planners). Consequently,
we shall say that an algorithm Alg1 generates more reachability information than another
algorithm Alg2 if whenever Alg2 is able to determine that some action a cannot be performed
at some time t, Alg1 is able to reach this conclusion as well, and in addition, there are such
conclusions which Alg1 can reach but which Alg2 cannot reach. Hence, Alg1 generates a
strict superset of the constraints on actions (of the type we are interested in) generated
by the other algorithm. Note that this does not mean that Alg1 is better than Alg2 on
every instance, only that it is always as good, and in some cases better. In this section
we shall compare the pruning ability of the two Reachable-k variants and two encoding
methods discussed by Kautz and Selman (1996):2 the linear encoding and the Graphplan
encoding.
3.2.1 Linear Plan Encoding

The linear plan encoding (Kautz & Selman, 1992) is a simple and natural method for
translating a planning problem into a formula that is satisable i there is a valid plan of
length n (for some given n). The clauses in the linear plan encoding fall into the following
classes:
1. an action implies its preconditions prior to its execution;
2. an action implies its eects following its execution;
3. an action does not aect any other proposition (frame axioms);
4. there is at least one action at each time point;
5. there is at most one action at each time point.
Because we have explicit frame axioms, noops are not needed in the linear encoding (as
opposed to the Graphplan encoding). In addition, the formula contains unary clauses
describing the initial and goal states. However, for the purpose of analyzing reachability
eects, we exclude the description of the goal state (which plays a role in relevance analysis).
Consider the mechanism by which resolution can yield reachability information: Given
the propositions that hold at the initial state, we can derive the negation of actions whose
2. The third (state-based) encoding method cannot be generated automatically.

8

Reachability, Relevance, and Resolution

preconditions do not hold using unit propagation on axioms of class 1. Propagating these
unit clauses with the appropriate instance of axiom class 4, we will obtain a disjunction
of all actions that can be executed at the rst time point. So far, this is identical to
what Reachable -k provides. To propagate this information forward, we can resolve these
action disjunctions with axioms of class 2 and 3. This, however, requires binary resolution
(discussed below). Hence, except for the unlikely case in which a single action is possible,
there is no more that we can derive using unit propagation alone. Reachable -1, on the
other hand, can provide us with a list of all possible eects of these actions and possibly
prune out future actions whose preconditions do not appear in this list. We conclude:
Lemma 1 In the context of the linear encoding, Reachable -1 yields more reachability in-

formation than unit propagation.

Example: Consider a blocks' world domain with a single action schema move(object,source,

destination).3 Its preconditions are: on(object,source), clear(object), clear(destination)
and its eects are: on(object,destination), clear(source), :on(object,source), : clear
(destination) (except when the destination is the table which is always clear). If we have k
stacks of blocks initially, k2 actions can be performed at the initial state (i.e., moving a block
from the top of a stack to the top of another stack or the table). This will be discovered by
both algorithms. In particular, unit propagation will yield a disjunction of all these actions.
We know that all blocks that are 2 or more blocks below the top cannot participate in
the second move action. Reachable-1 will nd this out due to the fact that they are not
clear. Suppose that A is one such block. All initially feasible move actions participate in
a frame axiom of the form move(o,s,d)^:clear(A; 0) ! :clear(A; 1), which, in clausal
form is :move(o,s,d)_clear(A; 0) _ :clear(A; 1). Resolving against :clear(A; 0), we
have :move(o,s,d)_:clear(A; 1). If we could deduce :clear(A; 1), we could rule out all
actions that have it as a precondition. But if we are restricted to unit propagation, this
requires deducing move(o,s,d) for some initially feasible action, and we cannot make such
a deduction.
If we propagated information forward using axioms of class 2 and 3 and used binary
resolution (as discussed before Lemma 1), we now have a set of disjunctions of the possible
eects (including frame eects) of the initially allowable actions. The number of such
disjuncts is O(e ), where e is the maximal number of eects of an action and m is the
number of actions that can be executed initially. In some cases, these disjunctions could
contain a single literal, e.g., when all initially allowable actions leave some proposition
unchanged. When one of these disjunctions contains only literals that are negations of
some action's precondition, we can deduce the negation of this action by resolving with
axioms of class 1.
Example: In the example considered above we would generate a disjunction of the form
move(o1 ; s1 ; d1 ) _ move(o2 ; s2 ; d2 ) _ move(o3 ; s3 ; d3 ), containing all instances of the move
action for time 0 whose negations have not been deduced. As discussed above, for all such
actions, we can obtain a clause of the form :move(o ; s ; d )_:clear(A; 1). Once we resolve
these binary clauses against the clause above, we obtain a unary clause :clear(A; 1), that
m

i

i

i

3. In fact, since we use plain Strips, we need three action schemas: one for moving a block to a block, one
for moving a block to a table, and one from moving a block from the table. However, as this does not
aect our analysis, we stick to a single move action in this and the following examples.

9

Brafman

can be used in conjunction with class 1 axioms to deduce the negations of step 2 actions
whose preconditions include clear(A; 1).
As we saw, the eect disjunctions discussed above allow us to rule out certain propositions or combinations of propositions. These are analogous to mutual exclusion constraints.
These mutual exclusion constraints can be used to prune actions. For example, if we deduce :p1 _    _ :p and all the p are preconditions of some action a, we can deduce :a
using binary resolution (by resolving precondition axioms with this disjunction). However,
as we show below, binary resolution has trouble propagating even binary mutual exclusion
constraints forward. We believe that this is generally true, i.e., k-clause resolution will have
trouble propagating k-ary constraints. We can show the following:
m

i

Lemma 2 Reachable-2 and binary resolution (in the case of the linear encoding) are incomparable.

We prove this by providing two examples. One in which Reachable-2 is able to prune
an action that binary resolution cannot, and one in which the converse hold.
First, consider the 4-bit counter with initial value 0000 (i.e., :p1; :p2 ; :p3 ; :p4 ). After four steps we obtain the following: S4 = f:p1 ; p1 ; :p2 ; p2 ; :p3 ; p3 ; :p4 g and C S4 =
f(p1 ; p3 ); (p2 ; p3)g. Therefore, A4 = fa1 ; a2 ; a3 g. This implies that S5 = S4 . We claim
that (p2 ; p3 ) 2 C S5 as well, which means that a4 62 A5 . To see this, consider all pairs of
actions that have p2 and p3 as eects. They are: (a2 ; a3 ); (a2 ; noop[p3]); (noop[p2 ]; a3 ), and
(noop[p2]; noop[p3 ]). (a2 ; a3 ) is a pair of real actions, which are always mutually exclusive
in the linear encoding. The preconditions of (a2 ; noop[p3]) are mutually exclusive according
to C S4 , and so are the preconditions of (noop[p2]; noop[p3]). Finally, (noop[p2]; a3 ) are
interfering actions. We conclude that (p2 ; p3 ) 2 C S5 and a4 62 A5 .
When we run a binary resolution procedure on the linear encoding of this problem,
we could not deduce a4 62 A5 . This stems from the fact that ternary resolution is needed
to propagate the mutual exclusion of p2 and p3 . Recall that we obtain mutual exclusion
constraints by resolving against a disjunction of actions that have not been ruled out. In
the above case, at time 4 we would have the following disjunction: a41 _ a42 _ a43 _ noop[:p1] _
   _ noop[6= p4]. Our goal is to deduce :p52 _ :p53 using :p42 _ :p43 and the various axioms.
To do this, we will try to deduce either :p52 _:p53 from each of the actions in the disjunction.
It is easy to deduce :p52 from a43 and :p52 from a42 . However, we believe that it is impossible
to deduce :p52 _ :p53 from a41 and from some of the noops.4 The reason for this is that such
a deduction involves the use of frame axioms, which are ternary. If we know that, e.g., :p42
holds, we apply unit resolution to the frame axioms and obtain a binary clause. However,
here we only know :p42 _ :p43. Once we resolve this against a frame axiom we remain with
a ternary clause. To get our desired result we must resolve two such ternary clauses.
Finally, let us see an example in which we use binary resolution to derive a ternary
constraint. By denition, Reachable-2 cannot derive such constraints. Suppose that the
initial state is :p; :q; :r. We have four actions: a1 has p; r as eects, a2 has q; r as eects,

a3 has p; q as eects, and a4 has p; q; r as preconditions. Using Reachable -2 we deduce that
a1; a2; a3 are possible at time 0. We get as their possible eects p; q; r; :p; :q; :r (recall
4. The fact that the deduction is impossible has been veried. What we are hypothesizing here is the reason
for it.

10

Reachability, Relevance, and Resolution

that we must include all noop actions in Reachable-k in order to capture frame eects). No
strict subset of p; q; r can appear in the set of constraints C S1 . Since we deal with binary
constraints only, the set fp; q; rg does not appear in C S1 . Therefore, we will consider a4
possible at time 1, although, in fact, it is impossible. Using binary resolution, we would
have obtained the constraint :p _ :q _ :r (referring to time 1) which would have enabled
us to deduce that a4 is impossible at time 1.
3.2.2 The Graphplan Encoding

The Graphplan encoding diers from the linear encoding by its ability to consider multiple
concurrent (non-interfering) actions, allowing one to obtain shorter plans which, in turn,
can reduce the search space size. It constructs the following sets of clauses:
1. An action implies its preconditions;
2. An eect implies one of the actions that has this eect;
3. There is at least one action at each time-point;
4. Two conicting actions cannot occur together.
Besides the obvious ability to consider multiple parallel (non-interfering) actions, the important dierence between the Graphplan and Linear encoding is in axiom class 2 (referred
to in (Ernst et al., 1997) as explanatory frame axioms.) Clauses in this class will contain
positive occurrences of action literals and negative occurrences of state literals.
As in the linear case, using unit propagation we can infer which actions cannot be
applied at the initial state. Using axioms of class 2, we can propagate this information forward, deducing the negation of all eects that cannot be produced by the initially allowable
actions. This information enables us to exclude actions whose preconditions cannot be produced. This forward propagation is essentially identical to Reachable-1. We can informally
conclude:

Lemma 3 In the context of the

encoding, unit propagation and Reachable-1
yield the same reachability information, if we ignore the explicit constraints appearing in
axiom class 4. If we use these constraints, unit propagation can yield more reachability
information.
Graphplan

To be precise we have to carefully dene the notion of reachability constraints in the context
of the Graphplan encoding. For example, in the Graphplan encoding we can derive a
constraint that says that one of a group of actions must appear in the plan. This constraint
will not necessarily rule out any action because the Graphplan encoding permits multiple
actions at the same time point.5 However, in the linear encoding such a constraint will
immediately rule out all other actions because only a single action is allowed at each time
point. As we mentioned earlier, in this paper we concentrate on strict exclusion constraints
5. However, because actions that interfere with each other cannot occur concurrently, if we know that action
a will occur then we can deduce that any action a that interferes with a will not occur. This is precisely
where class 4 axioms enter the picture.
0

11

Brafman

which lead to an immediate reduction in the search space by ruling out the need for certain
actions at certain time points.
When k > 1, the mechanism remains the same. But now, axioms of class 4 can play
a more prominent role because we can use them to exclude actions in more cases than
before. However, the same problem of propagating mutual exclusion constraints forward
which we had with the linear encoding reappear here. Consequently, k-clause resolution in
the context of the Graphplan encoding and Reachable-k are incomparable.
4. Relevance and Resolution

Relevance analysis is a complex task and it can be performed to various degrees. For
instance, considering the last action level, one can exclude actions that do not produce a
literal in the goal. However, some actions producing a goal literal can also be irrelevant.
For example, consider a blocks' world planning problem in which the color of the blocks
is specied as part of the goal. As observed by Nebel, Dimopoulos, and Koehler (1997), a
paint-block action is still, intuitively, irrelevant if the initial and nal colors of the blocks
are the same. However, it does have a goal literal as an eect.
In this section, we formulate an algorithm for relevance analysis, called Relevant-k .
Relevant-k does not perform the deeper relevance analysis needed to determine that the
paint-block action is irrelevant in the above example. Rather, Relevant-k is similar in its
motivation and form to Reachable-k , and it has a similar soundness property. Relevant-k
prunes the search space by excluding states from which the goal is not reachable within a
given number of steps and actions that are not useful for achieving the goal state within a
given number of steps.
Relevant-1 is similar to a number of existing components of existing planners, such
as McDermott's greedy regression graph (McDermoot, 1996) and Nebel, Dimopoulos, and
Koehler's And-Or trees (Nebel et al., 1997). Relevant-k generalizes these ideas to arbitrary
levels of interactions, taking into consideration mutual-exclusion constraints that relevant
states must satisfy. Relevant-k is slightly more complicated then Reachable-k because the
Strips formalism allows incomplete description of goal states, and propagating this partial information raises some diÆculties. Naturally, if the goal state is partially specied,
fewer constraints are available to start with, and so fewer constraints will be derived. The
algorithm is described in Figure 2. We are not aware of a similar, general formulation of
these ideas. Therefore, it is worthwhile going over the central points of this algorithm,
concentrating on the more interesting and complex case in which parallel actions are allowed. However, before we do this, we point out an important assumption we shall make
on the action representation used: No proposition symbol shall appear only in the preconditions or only in the eects of an action. This restriction is not diÆcult to enforce, as any
Strips-based domain representation can be transformed into a description in which this
assumptions is satised. For example, if p is a precondition of action a that does not appear
in the eect of a, we can simply add it to the eect, as we know that it must hold after
the action is executed. If p appears in the eect of a but neither p nor :p appear in the
preconditions of a, we can decompose a into two versions of the a action, one in which p is
a precondition and one in which :p is a precondition. Note that in the worst case, such a
transformation can cause an exponential blow-up in the number of actions.
12

Reachability, Relevance, and Resolution

r contains all actions that are useful and safe w.r.t. the goal.
 A0 contains Ar0 and all noops that are safe w.r.t. the goal.


A0

contains all pairs of interfering actions in A0 .
We dene Ri ; Si ; Ari ; Ai inductively as follows:
 Ri is the union of preconditions of actions in Ari 1 .


C A0



S

i is the union of preconditions of actions in Ai 1 .

i contains sets S of literals such that S  Si , jS j  k and for any set of actions A  Ai 1
whose preconditions contain S it is the case that A 2 C Ai 1 .
 Ari contains all actions that are useful w.r.t. Ri but no subset of their eects is contained in
C Si .
 Ai contains Ari and all noops useful w.r.t. Si .
 C Ai contains all action sets A such that A  Ai and either (1) A contains two interfering
actions, or (2) Some subset of the set of eects of A is in C Si .



CS

Action descriptions must contain the same set of propositional symbols in their precondition and
eect lists.

Figure 2: The Relevant-k Algorithm
For k = 1 the algorithm is quite simple (and identical in the parallel and linear cases). In
that case, we can ignore the sets S ; C S ; A and C A (as they are degenerate) and consider
the sets R and A only. Starting with the goal literals, at each stage we have a set of
literals from which we construct the next set of actions. This action set contains actions
with an eect in the current literal set. However, if all the goal eects of an action are all
part of its preconditions, we can ignore that action as irrelevant. Next, a new literal set is
constructed, containing the set of preconditions of the current set of actions, and we repeat
the process with this new set.
When k > 1, the picture becomes a bit more complicated. We start with the set
of relevant actions, A . These are actions that achieve one of the desired literals. In
particular, A0 contains only actions that have one of the goal literals as an eect (but not
as a precondition). If the goal is partially specied, literals that are not part of it could hold
in the previous time step. Hence, we include the appropriate noop actions in a larger set,
A , which contains both A and noops that do not destroy needed propositions. A subset
of the actions in A is mutually exclusive if it contains interfering actions or actions whose
eects are mutually exclusive. Given the set A 1 , we generate the set R , which includes
the preconditions of A 1 . The set S is dened as the set of preconditions of actions in A .
If the goal is a completely specied state, there is no the sets R and S and the sets A
and A are identical, and so we need not distinguish between them.
i

i

i

i

r
i

i

r
i

r

r
i

i

i

r
i

r
i

i

i

i

i

i

13

i

r
i

Brafman

To facilitate the description of the Relevant-k algorithm, it would be useful to add a
few simple denitions. First, we wish to revise the denition of interfering actions in the
context of the Relevant-k algorithm. We say that actions a; a0 interfere with each other if
some eect of a conicts with some precondition or eect of a0 or (and this is beyond the
previous denition of this term) if their preconditions are inconsistent. An action a is useful
w.r.t. (with respect to) some literal l if a is the noop action preserving l or l is an eect,
but not a precondition, of a. a is useful w.r.t. some set of literals if it is useful w.r.t. one of
the set's elements. A set A of actions is safe w.r.t. some set of S of literals if no action in
A has an eect that negates an element of S .
Relevant-k embodies the intuitions described above. Note that an increased index corresponds to points earlier in time. The denition of the sets S ; R ; A ; A is quite intuitive:
S contains the preconditions of the actions in the previous A , and R contains the preconditions of actions in A . A contains actions that have a useful, but not mutually exclusive,
eects. A is dened much like A , but w.r.t. S rather than R . The set C S contains
literals that are mutually exclusive at a particular point. A set L of literals is mutually
exclusive if any set of relevant actions that have L among their preconditions are mutually
exclusive. The set C A contains mutually exclusive sets of actions. A set of actions A is
mutually exclusive if it contains interfering actions or if the set of its eects is mutually
exclusive.
Example: In order to illustrate the Relevant-k algorithm, we shall once again use the counter
example used in Section 3.1, starting with a three bit counter and using the propositions,
p1 ; p2 ; p3 . Each of the actions a1 ; a2 ; a3 can change the value of a single bit from 0 to 1,
provided the values of the lower bits are 1.
We start with the nal state f:p1 ; :p2 ; p3 g and k = 1. Since the nal state is fully
specied, there is no distinction between the sets S and R and between A and A . A0
contains the action a3 and the three relevant noops. S1 contains fp1 ; :p1 ; p2 ; :p2 ; p3 ; :p3 g,
A1 now contains a1 ; a2 ; a3 , and the appropriate noops, and the remaining sets look the
same.
If k = 2, A0 and S1 are as in the k = 1 case. However, C S1 contains (:p1 ; p2 ) and
(p1 ; :p2 ), which implies that a2 cannot be applied. Hence, A1 contains a1 and a3 , but not
a2 , unlike the case of k = 1. The action a2 would be introduced only in the next step.
Next, consider a partially specied goal, such as fp3 ; p2 g and with k = 2. A0 =
fa2 ; noop[p2]; noop[p3]g because a2 has p2 as an eect, and a2 does not destroy p3; whereas
a1 , for example, does not have an eect in the goal. A0 would now contain A0 as well as
the noops for p1 and :p1 . R1 = fp1 ; p2 ; :p2 ; p3 g and S1 = fp1 ; :p1 ; p2 ; :p2 ; p3 g. Next, A1
contains fa1 ; a2 g, etc.
Finally, suppose we have four bits, and the goal state is f:p1 ; :p2 ; p3 ; p4 g (i.e., the
counter's bit value is 1100). If k = 2, A0 contains a3 and S1 = fp1 ; :p1 ; p2 ; :p2 ; p3 ; :p3 ; p4 g.
However, C S1 contains pairs such as (:p1 ; :p3 ); (:p2 ; :p3 ) and others. A1 contains a1 ; a3
and some noops. S2 = S1 , but now, C S2 does not contain (:p1 ; :p3 ), it does contain
(:p2 ; :p3 ), though, and that precludes action a4 from being in A2 . In the next step, we
have S3 = S2 = S1 , and C S3 no longer contains (:p2 ; :p3 ). This implies that we can
add a4 to A3 because its eects are no longer mutually exclusive. So overall, we have
A0 = fa3 g; A1 = fa1 ; a3 g; A2 = fa1 ; a2 ; a3 g, and A3 = fa1 ; a2 ; a3 ; a4 g. However, if k = 3, at
i

i

i

i

i

r
i

r
i

i

r
i

r
i

i

i

i

i

i

i

i

r
i

i

r

r

r

14

Reachability, Relevance, and Resolution

we would still have a mutual exclusion constraint on (:p1 ; :p2 ; :p3 ), which would not
allow us to add a4 . Hence, when k = 3, A3 = fa1 ; a2 ; a3 g.
We can prove the following soundness results:
C S3

Theorem 2 Let

be some state from which the goal is reachable using an m-step plan
(where each step can contain a number of non-interfering actions). Then (1) the set of
literals satised in s is a subset of S , no subset of which is in C S , and (2) there exists
an m-step plan for reaching the goal from s such that if A is the set of actions in the plan
v steps before last then A  A and no subset of A is in C A .
s

m

m

v

v

A corollary of this theorem is:

Corollary 1 For any initial state s from which the goal is reachable and any minimal (in
the number of operators) plan P = A0 ; : : : A00 (where the steps are numbered backwards) for
reaching the goal from s, we have A0  A and C A does not contain any subset of A0 .
m

i

i

i

i

The complexity of Relevant-k is O(jAj jLj + jLj
jAj), where jAj is the number of
actions, jLj is the number of proposition in the language, and m is the maximal number
of preconditions of an action. For more details, see Appendix B.
We now compare the amount of relevance information that can be propagated backwards
using k-clause resolution and the goal literals as opposed to Relevant-k . Consider unit
propagation rst. In the context of the linear encoding, we see that all actions that destroy
some goal condition will be ruled out. However, actions that are irrelevant because they
produce irrelevant eects will not be pruned.6 On the other hand, Relevant-1 prunes both
actions that destroy some goal literal and actions that are simply irrelevant. There is a
slightly degenerate case in which all actions but one destroy some goal proposition. In that
case, using unit propagation we will be able to deduce the previous state. Consequently, we
have:
k

k

k
mp

p

Lemma 4 In the context of the linear encoding, unless there is a single safe, nal action,

unit propagation yields less relevance information than Relevant-1.

In the context of the Graphplan encoding the situation is often worse, and unit propagation prunes even less than in the linear encoding. The goal propositions appear only in
class 2 (eect) axioms. Propagating them against these axioms, we obtain disjunctions of
positive action propositions explaining a particular goal proposition. If we assume that all
literals have more than one explanation, we see that no new unit clauses emerge. Consequently, we can prune nothing.
Example: Consider the blocks' world domain once again. Suppose that there are three
blocks A,B, and C, and that the goal is on(A,B). Clearly, any action that moves block C
or moves another block on top of block C is irrelevant as a last action. When we consider
the Graphplan encoding, the only unit clause we have is on(A,B,t) (where t is the last
time point). We can resolve it against the eect axiom that lists the the possible causes for
on(A,B,t). Aside from the noop action, there are actions such as moving A from C to B
6. In general, proving that an action should be ruled out means that we have shown that in all models, i.e.,
all plans, this action does not appear. We cannot expect to be able to do this for an irrelevant action
since it could possibly be inserted into the plan without aecting it.

15

Brafman

and moving A from the Table to B. This yields a new ternary clause and no additional unit
clauses. There are no other axioms in which on(A,B,t) appears negated.
Notice that we have no means of excluding actions that destroy one of the goal literals.
For example, if our goal was clear(A,t), we would not want the action move(B,C,A,t-1) as
a last action. However, as above, all that we can deduce from clear(A,t) is: move(B,A,C,t1)_move(B,A,Table,t-1)_ move(C,A,B,t-1)_move(C,A,Table,t-1)_ noop[clear(A; t 1)].
If we could use binary resolution at this stage, we could deduce the negation of any action
with the eect :clear(A,t), because any such action would be mutually exclusive from
any of the above ve actions.
If a goal literal l has a single explanation it must be a noop action (which implies that
there is no \real" operator that has it as an eect). In that case, we would be able to deduce
that this noop action must hold, and using the precondition axioms, we would deduce that
l must hold at the previous step. Using the mutex axioms (class 4) we could deduce the
negation of any action that destroys l. However, we cannot deduce the negation of any
action that does not interact with l, whether it is simply irrelevant or it destroys some
other goal literal.
Example: Consider a domain such as the Rocket domain, where a rocket can have fuel,
but there is no action for fueling a rocket. Suppose that the rocket has fuel in the goal
state. Hence, fuel(t) holds. Since the explanation axiom for fuel is a binary clause (i.e.,
:fuel(t) _ noop[fuel(t 1)]. Resolving this axiom with the fact fuel(t), we derive a new
unit clause noop[fuel(t 1)]. Using the precondition axioms, we can derive fuel(t-1).
Using the mutex axiom, we can derive an action such as fly(t-1), one of whose eects is
:fuel(t 1). Notice, though, that we cannot deduce the negation of an action that does
not interact with the proposition fuel, whether or not it is irrelevant. For example, if fuel
is the only proposition in the goal, then an action such as loading the rocket, which does
not aect the value of the proposition fuel need not be considered for the nal action of
the plan. However, as before, there is no way of deducing :load(t 1).
Because no action can produce fuel the same reasoning would apply to any step, and
we will be able to deduce the fact that fuel holds at each time point during the plan.
Using this fact, we will be able to prune out all actions that have :fuel as a precondition.
Relevant-1 will not be able to do so: If a has :fuel as a precondition but a has an eect
that is relevant at some point, a will be considered a relevant action.7

Lemma 5 In the context of the

encoding, if there is an action for changing the value of every literal, then unit propagation yields less relevance information than
Relevant-1.
Graphplan

Some actual values appears in Section 5. In particular, in the examples we looked at,
the Graphplan encoding could not prune any action. This follows from the (quite typical)
fact that in these domains, each of the facts that hold at the nal state can be achieved
by a number of actions. Hence, unit propagation can deduce only disjunctions of possible
7. Of course, in this particular domain we do not have an action whose precondition is :fuel, but the
observation is still valid. For example, we may have a maintenance action which can be performed only
when the rocket is without fuel.

16

Reachability, Relevance, and Resolution

actions, none of which are a unit clause. Since we have no way of deducing negated actions,
propagation stops at this point.
The general case is similar. In the linear encoding, having obtained a disjunction of
allowable actions, we can generate a disjunction of allowable preconditions. This information
is propagated backwards much like the forward case. Yet, as in the k = 1 case, all we can
expect is a form of backwards reachability analysis from the goal state, rather than true
relevance analysis. Again, Relevant-k is likely to do a much better job here, because it
takes explicit relevance issues into account. However, as in the case of reachability analysis,
because of the ability of k-clause resolution to yield constraints of order greater than k, we
cannot show that Relevant-k is always better.
In the context of the Graphplan encoding, we will generate disjunctions of relevant
actions, from which disjunctions of relevant preconditions can be deduced, etc. However,
irrelevant actions will not be excluded explicitly (since more than one action is allowed at
each step) and we will only conclude that some relevant action must appear. Nor can we
exclude actions that destroy a goal proposition. Again, because we can deduce constraints
of order greater than k via k-clause resolution, we cannot provide a general result here.
Finally, we note that (1) the Graphplan planner does not incorporate relevance analysis, but Mea-Graphplan, a more recent variant, does (Kambhampati et al., 1997), as
well as IPP (Nebel et al., 1997). (2) Ernst, Millstein, and Weld (1997) discuss an enhanced
version of the Graphplan encoding which contains eects axioms as well (i.e., axioms of
the form action ! eect). In terms of the ability to propagate reachability and relevance
information, we see an added ability to rule out actions that destroy needed propositions
(as in the linear encoding.)
5. Empirical Evaluation

In the previous sections we attempted to understand the mechanisms by which resolution
yields reachability and relevance information and to compare them to a natural class of
direct reachability and relevance algorithms. As we noted, the relationship is not always
that of subsumption, and it is of interest to examine the actual pruning abilities of these
algorithms. In this section we describe the performance of these algorithms on a number
of standard planning problems. Because of the limited number of domains used, caution
should be exercised in interpreting these results. However, some interesting results emerge.
Our rst set of experiments examined the performance of unary methods on large blocks
world and logistics domain problems. We used the blocks' world problems bw-dir.a/b/c/d
from the Satplan distribution8 involving 9/11/15/19 blocks, respectively, and (minimal)
plans of length 6/9/14/18. The logistics' domain problems are based on instances described
in (Brafman & Hoos, 1999) involving 8 packages and 3 cities, with minimal plans of size
6/10/16, respectively. SAT-encodings were generated using the Medic program (Ernst
et al., 1997). We used the crse options to obtain a linear encoding and the erpe options
to obtain a Graphplan-like encodings. However, the encoding obtained via the erpe options contain explicit eect axioms, as in the linear encoding. These axiom improve the
Graphplan-encoding's ability to propagate relevance information.
8. These instances are part of the UCPOP distribution, maintained by the University of Washington, or
from http://www.research.att.com/ kautz/blackbox/index.html, the BlackBox home page.

17

Brafman

log.a
log.b
log.c
bw.a
bw.b
bw.c
bw.d

j j
A

4565
5941
8021
3888
10890
44100
116964

Reach Rel R+R U-rch(l) U-rel(l)
2922 617 3476
401
38
3517 680 3905
442
20
5051 2782 6214
600
32
1697 408 2105
639
300
3565 830 4395
1201
440
12818 2394 15212
3141
840
26963 5238 32201
6482
5114

Table 1: Pruning Eects of Unary Methods. jAj is the number of possible actions in
the course of a minimal length plan. The following entries hold the number of
actions pruned using: Reachable-1, Relevant-1, both combined, unit propagation
on linear encoding using initial state, and using the nal state. Unit propagation
in the Graphplan encoding using the nal state yielded no pruning. Execution
times for the Reach/Relevant algorithms are  0:01 seconds except for bw.c (0.03
sec.), and bw.d (0.07 sec.).
In this set of experiments we measured the number of potential actions eliminated by
the following algorithms: Reachable-1, Relevant-1, Reachable-1 and Relevant-1 combined,
reachability analysis via unit-resolution using the initial state, and relevance analysis via
unit-resolution using the goal state. We did not consider the Graphplan encoding for the
following reasons:
(1) Unit-propagation in the Graphplan encoding yields as much information as Reachable1. (2) For our particular experiments (and in most other cases), unit-resolution based on
the nal state in the Graphplan encoding prunes little, if any, actions because for each
fact appearing in the goal state there are a number of potential producing actions. (3)
The version of the Graphplan-encoding produced by Medic is basically equivalent to the
linear-encoding in terms of relevance information because it contains explicit eect axioms.
The actual numbers appear in Table 1. The rst column provides the size of the set of
actions for the minimal plan length. The following columns provide the number of actions
pruned by the various methods tested. It is evident that Reachable-1 is extremely eective.
Relevance analysis seems much less useful, although Relevant-1 does prune a non-negligible
number of actions. The results for unit-resolution are quite disappointing, although in line
with our theoretical analysis. Recalling that unit-resolution in the Graphplan encoding
is equivalent to Reachable-1, we see that there is a much greater potential for pruning in
the Graphplan encoding. Another interesting observation is that there is little overlap
between the reachability and relevance analysis. This stems from the fact that the pruning
eect of these algorithms is often quite shallow: most of the pruning is done on the very
rst steps (in reachability) or very last steps (in relevance). Finally, we note that the
k = 1 algorithms are quite fast: Unit propagation is an important heuristic in all SAT
solution algorithms based on the David-Putnam algorithm (Davis & Putman, 1960), and
it is extremely fast, with negligible running times (i.e., < 0:01 seconds). Not surprisingly,
18

Reachability, Relevance, and Resolution

bw-sm.a
bw-sm.b
bw-sm.c
log-sm.a
log-sm.b
log-sm.c
hanoi-3
hanoi-4
hanoi-5

j j
A

18
48
100
18
42
66
38
68
110

Rch1 Rch2 Rel1/2 rch1(l) rch2(l) rch1(gp) rch2(gp) rel1/2(l/g)
21
22
8
15
22
21
22
4
68
70
44
44
74
68
70
6
199
204
184
96
210
199
204
12
39
57
8
14
49
39
44
1
111
165
18
36
141
111
126
3
196
292
26
58
244
196
220
5
94
97
21
36
117
94
118
9
224
230
34
66
281
224
280
14
450
460
50
108
558
450
551
20

Table 2: Eects of Unary and Binary Methods. jAj is the number of possible actions per step . The following columns hold the number of actions pruned during
the course of a minimal-length (or longer) plan using Reachable-1, Reachable-2,
Relevant-1 and 2 (which yield the same value), unit propagation on the linear
encoding using initial state, binary propagation on the linear encoding using initial state, unit propagation on the Graphplan encoding using initial state, and
binary propagation on the Graphplan encoding using initial state. The nal
column correspond to propagation using the goal state. All methods (i.e., unit
and binary) on both encodings yielded the same values.
Reachable-1 and Relevant-1 are also extremely fast. Execution times for these algorithms
were less than  0:01 seconds, except for bw.c (0.03 sec.), and bw.d (0.07 sec.), for which
these amount to a small fraction of the running times required by modern SAT algorithms.9
The next set of experiments, shown in Table 2, introduces binary pruning methods
as well. Here, we were limited by the slow performance of our prolog implementation of
Reachable-2 and the Medic encoder (Ernst et al., 1997). We looked at blocks world problems involving 3,4, and 5 blocks, respectively, and we looked at logistics domain problems
involving one package and two cities, three packages and two cities, and three packages and
three cities. In addition, we looked at three hanoi-tower problems with 3,4, and 5 disks.
There are a number of points worth mentioning:



In two domains (blocks' world and hanoi), Reachable-2 is only slightly more useful
than Reachable-1. In the logistics domain, on the other hand, Reachable-2 is much
more eective. However, we must remember that Reachable-2 yields mutual exclusion
constraints which we did not measure. These constraints can be quite useful and they
have an important role in the Graphplan planner.



No clear winner emerges. In the blocks-world domain, binary resolution in the linear
encoding prunes more than Reachable-2, whereas in the logistics domain, Reachable2 prunes more. Interestingly, binary resolution in the Graphplan-encoding is less

9. These experiments were conducted on a PC with a PentiumII-200 processor.

19

Brafman

Time
Reach-1
Reach-2
U-Res(lin)
B-Res(lin)
U/B-Res(gp)

1 2 3 4 5 6 7 8 9 10
1 2 3 4 5 6 7 8 9 10
1 2 2 3 3 3 4 4 4 4
1 16 16 16 16 16 16 16 16 16
1 2 2 3 3 4 4 5 5 6
1 2 3 4 5 6 7 8 9 10

11
11
5
16
6
11

12
12
5
16
7
12

13
13
5
16
7
13

14
14
5
16
8
14

15
15
5
16
8
15

16
16
6
16
9
16

Table 3: Reachability Analysis in a 16-bit Counter. Shown are the number of unpruned actions per time step. Rows correspond to Reachable-1, Reachable-2, unit
resolution on the linear encoding, binary resolution on the linear encoding. The
last row corresponds to unit and binary resolution on the Graphplan encoding,
which had identical eect.
eective than in the linear encoding. However, the Graphplan-encoding allows for
shorter plans, and consequently, smaller search spaces. Therefore, the Graphplanencoding is still likely to be more eÆcient.



Relevant-2 has no advantage over relevant-1. In fact, this behavior was observed when
using resolution as well: unit and binary resolution on both the linear and Graphplan
encodings pruned the same amount of actions. Consequently, we present them in one
column. Indeed, we see from both sets of experiments reported in Tables 1 and 2,
that relevance analysis contributes little. One obvious reason is that the goal state is
often incomplete and much less constrained than the initial state (at least explicitly).
Therefore, the algorithms have diÆculty deriving relevance constraints. However,
one's intuition seems to indicate that this should not be the case, at least not to
the extent observed. There should be means of providing better relevance analysis,
although they may require more sophisticated derivation of state constraints.



As predicted, relevance analysis is much more useful at the state-space level than at
the truth-assignment level.



As expected, the Graphplan encoding is typically better than the linear encoding.

Finally, we ran some tests on a 16 bit version of the counter domains described in
the text. This is a very constrained domain in which only a single action is applicable
at each state and we wanted to see how much of this would be discovered by the algorithms. The results are shown in Tables 3 and 4, where the number of permisable actions
is given as a function of the the time step. Table 3 presents the results for forward pruning
using Reachable-1, Reachable-2, and unit and binary propagation using the Graphplan
and linear encodings. Table 4 presents the results for backward pruning using Relevant-1,
Relevant-2, and unit and binary propagation using the linear encodings.

20

Reachability, Relevance, and Resolution

Time
Rel1/2,U/B-Res(gp)
U-Res(l)
B-Res(l)

1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
1 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16
1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9

Table 4: Relevance Analysis in a 16-bit Counter. Shown are the number of unpruned
actions per time step. The (identical) results for Reachable-1, Reachable-2, unitresolution on the Graphplan encoding, and binary-resolution on the Graphplan
encoding appear in the rst row. The next rows correspond to unit and binary
resolution on the linear encoding, respectively.

6. Conclusion

We have shown a connection between the scheme used to encode planning instances and the
ability to propagate reachability and relevance information from the initial and nal steps
to other time points. We hope that these results will serve to improve our understanding of
the factors contributing to the performance of dierent encoding methods. In addition, we
provided a crisp and general formulation of a class of reachability and relevance algorithms
that appear in various forms in dierent planning algorithms. We compared the pruning
ability of resolution-based propagation methods which operate on encoded plans, to that of
the Reachable-k and Relevant-k algorithms which operate at the plan level. Our empirical
results show a complex picture, where no clear winner emerges. However, it seems that
when the domain is constrained (making parallel actions less useful) binary methods have
little advantage over unary methods. In addition, they show that relevance analysis is best
conducted at the plan level. For SAT-based planning algorithms, this would suggest the use
of a simple plan-level relevance analysis stage prior to the plan encoding. This observation
is conrmed by recent results reported by Do, Srivastava, and Kambhampati (2000).
In (Brafman, 1999), we pointed out that binary clauses form a large fraction of the
clauses in SAT-encoded planning problems. Given our results regarding the utility of binary
resolution, a natural idea is to augment standard clause simplication techniques (e.g., unit
propagation) with some limited form of binary clause preprocessing. Initial results presented
there indicated the utility of this idea: In instances where unit clauses could be derived from
this form of binary resolution, nice reductions in running time were demonstrated. When
unit clauses were not derivable via this method, only a small overhead was incurred. A
more principled, systematic, and eÆcient technique based on these ideas is investigated in
(Brafman, 2000).
This work is among the rst attempts to theoretically analyze dierent encoding schemes.
We have concentrated on one particular aspect of such encodings, i.e., their ability to propagate concrete state information backwards and forwards. Naturally, this attempt is a-priori
limited in its scope, as this ability is only one factor inuencing the performance of various
algorithms, and its inuence is probably more signicant in systematic methods based on
the David-Putnam procedure than in methods based on stochastic local search.
21

Brafman

Other authors have considered some of the ideas presented here, too. Kautz and Selman
(1999) discuss the relation between Graphplan's mutex constraint and a restricted form
of binary propagation. In particular they show that mutex computation is a limited form
of negative binary propagation. In mutex propagation, two assertions of mutual exclusion
yield a new one. Of course, each mutual exclusion statement is equivalent to a binary
clause (e.g., either action a is not performed or action b is not performed), hence we can
view this process as a limited form of binary propagation: From f:p _ :qg and fp _ :rg
deduce f:q _ :rg. Graphplan performs this operation, but in an incomplete manner. In
addition, they tested additional limited inference methods such as the failed literal strategy
(attempting to prove that a particular literal is inconsistent using unit propagation) and the
binary failed literal strategy (attempting to prove that a binary clause is inconsistent using
unit propagation). These methods do not directly correspond to the methods considered
in this paper. More closely related is one of the options in the Medic system for encoding
planning problems: a simple inference method which is referred to as simple data-ow
analysis (Ernst et al., 1997). This method is basically an instance of Reachable-1.
Haslum and Gener (2000) present a parametrized class of admissible heuristics functions H . There is an interesting and important relation between the heuristic function
generation technique discussed in that paper and the parameterized class of reachability
analysis algorithms discussed in this paper. When a heuristic function assigns 1 to some
state s this means it believes that goal is not reachable from s. If the heuristic function is
admissible, then in fact, this is true. Thus, admissible heuristic functions provide a sound
tool for pruning { the goal is not reachable from any state to which they assign the value
1. In fact, the derivation of the heuristic functions of class H is closely related to our
computation of Reachable-k. In both cases, instead of analyzing actual states, we analyze
subsets of states of size k and their interactions. However, in designing heuristic functions,
a greater emphasis is put on the distance from the current state to a state in which some
set of literals appears without mutual exclusion constraints (i.e., the indices of the sets S
and C S ).
Finally, a recent paper by Do, Srivastava, and Khambhampati (2000) examines encoded
planning problems generated by the Blackbox planner. Blackbox utilizes mutual exclusion constraints derived from Graphplan's planning graph. The authors show that
these constraints are useful, despite the fact that they increase the size of the encoding.
In addition, the authors examine the utility of adding explicit mutual-exclusion constraints
stemming from (state-space based) relevance analysis. These constraints appear to improve
the planner's performance. In fact, it seems that the constraints described by Do, Srivastava, and Kambhampati (2000) are more powerful than those generated by Relevant-2. We
believe that Relevant-k can and should be strengthened, and we hope to examine this issue
more closely in the future.
k

k

i

i

Acknowledgments

I wish to thank Craig Boutilier and Chris Geib for valuable discussions on reachability analysis and the anonymous reviewers for very useful and detailed comments. I am particularly
grateful to Olga Rozenfeld who implemented the algorithms in Prolog, suggested the use of
22

Reachability, Relevance, and Resolution

the counter example for illustrating the algorithms, and provided important corrections to
previous drafts. This work was supported in part by the Paul Ivanier Center for Robotics
Research and Production Management.
Appendix A. Proofs

Theorem 1 If a set of propositions or actions is excluded by Reachable-k at time j then

there is no feasible plan in which, at time j , these propositions hold, or, respectively, these
actions appear.

Proof: This is immediate: Consider any valid plan and the states of the world during the
execution of this plan. It is straightforward to show that both appear within the sets
and S without being constrained by virtue of this being a valid plan.

Ai

i

Lemma 1 In the context of the linear encoding, Reachable -1 yields more reachability information than unit propagation.

Proof: Given the denitions used earlier on, a more formal statement of this lemma is as
follows: Let k be some integer denoting the length of a plan. Let A
1 be the set of

actions pruned by Reachable -1 up to the k-th level given some planning domain and initial
state. Let A
be the set of actions that are pruned by unit-resolution on the linear
encoding of this planning domain using k steps (i.e., actions for which we can deduce a unit
clause containing the negation of their corresponding variable), but without a goal state
supplied. Then A
, and for some planning instances A
.
1A
1A
First let us consider unit resolution. The unit clauses that are available initially correspond to the propositions that hold at the initial state. The only axioms in which propositions denoting the state at time 0 appear are those of class 1 (precondition axioms) and 3
(frame axioms). However, the clauses in class 3 are ternary and contain at most one such
proposition. These ternary frame clauses can yield a unit clause only if we are able to rule
out all actions but one, which we cannot, at this stage. Therefore, unit clauses can only
be derived by resolving the current unit clauses with class 1 clauses. Such resolutions can
yield new unit clauses containing negated actions. These negated actions can be resolved
against clauses containing positive action variables. Such variables appear only in class 4
(at-least-one-action) axioms.
Now there are two cases to consider. First, suppose that we have been able to rule out
all actions but one. Using the frame and eect axioms, we can derive the state at time 1.
Our situation now is analogous to that in which we were at time 0 with knowledge of the
initial state. Since Reachable -1 puts us in the same position, our claim follows (using a
simple inductive argument). Next, suppose that we cannot rule out all actions but one. In
that case, we have no new unit clauses, and so unit propagation stops. Reachable -1 will be
able to rule out all actions ruled out by the unit propagation process. Moreover, if all the
actions that are not ruled out have some common eect, that eect can be deduced using
Reachable- -1, and it can rule out actions that require its negation as a precondition. This
type of information is not obtained via unit propagation.
reach

u

res

reach

u

res

reach

23

u

res

Brafman

Lemma 3 In the context of the

Graphplan encoding, unit propagation and Reachable-1
rule out the same sets of actions, if we ignore the explicit constraints appearing in axiom
class 4. If we use these constraints, unit propagation can yield more reachability information.

Proof: First, suppose we ignore the mutex axioms of class 4. Using unit propagation, we

deduce the negation of those actions whose preconditions are violated at time 0. Negated
action literals can be resolved against class 2 (eect explanation) axioms. If we have been
able to rule out all explanations of some time 1 proposition, we can deduce its negation
in this manner. The same mechanism will allow us to exclude this variable when using
Reachable-1. Similarly, negated action literals can be resolved against class 3 (at-least-oneaction) axioms, but this yields no more information. Those time 1 variables we can deduce
can be used to rule out time 1 actions.
Notice the following. If we can deduce p at time 1, then one of the actions that produce p
must hold at time 0. This information is not explicit in the Reachable-1 algorithm (although
it appear in the Graphplan's planning graph in the form of edges). However, it cannot
be used to rule out other actions if we are restricted to unit resolution.
Class 4 axioms can make a dierence in the above case. Suppose we have been able
to conclude that a particular action a that produces p must occur (i.e., by deducing p and
ruling out all its causes except a). In that case, all actions that are mutually exclusive
with a cannot occur. These actions may not aect p at all, and their negation need not
necessarily be derivable using Reachable-1.

Theorem 2 Let

s be some state from which the goal is reachable using an m-step plan
(where each step can contain a number of non-interfering actions). Then (1) the set of
literals satised in s is a subset of S , no subset of which is in C S , and (2) there exists
an m-step plan for reaching the goal from s such that if A is the set of actions in the plan
v steps before last then A  A and no subset of A is in C A .
m

m

v

v

Proof: Recall that we assume that any proposition appearing in the eects of an action

appears in its preconditions as well. We can always enforce this requirement by converting
an action that does not satisfy it into an a set of actions that satisfy it.
Our proof proceeds by induction on the number of steps by which the goal is reachable.
Let S be some state from which the goal G is reachable by a single step. Let A be the set
of actions in such a one-step plan for reaching G from S . By denition, A does not contain
interfering actions. In addition, we know that if G is reachable from S by performing A
then the preconditions of A and G n Eects-Of (A) must hold in S .
First, suppose to the contrary that for some literal l 2 S , we have that l 62 S1 . Notice
that by denition of A0 , we have that S1 contains all literals that are consistent with
G. Therefore, l must be inconsistent with G, i.e., :l 2 G. Since l 2 S , there must be
some action a 2 A with the precondition l and the eect :l (otherwise, l would hold after
performing A). Such an action would be in A0 and its preconditions, l among them, would
be in S1 . We conclude that S  S1 .
Next, we want to show that there is a one-step plan for reaching G from S all of whose
actions are in A0 . From the discussion above we see that the plan A for reaching G from
r

24

Reachability, Relevance, and Resolution

contains an action from A0 for changing the value of every proposition l that holds in
S and that is inconsistent with G. Clearly, none of these actions can have an eect that
is inconsistent with G. Let A0  A denote the set of such actions. By applying A0 at S
we transform all literals inconsistent with G to their value in G and we do not destroy the
value of any literal consistent with G. Since A0  A, it constitutes a valid plan (i.e., its
actions do not interfere with each other) that achieves G. By denition, A0  A0 .
To conclude the proof of the base step, we must show that no subset of S is in C S1 .
Suppose, to the contrary that some subset S 0 of S is in C S1 . We have seen that for any
such S 0 , there is some set of actions A0  A such that A0  A0 and each l 2 S 0 is either
a precondition of some action in A0 or l is consistent with G and is not destroyed by A0 .
Denote by A00 the set consisting of A0 and any noop[] corresponding to those l 2 S 0 that
are not preconditions of an element in A0 . By denition of A0 , we have that A00 2 A0 .
However, if S 0 2 C S1 then A00 2 C A0 which implies that A00 contains interfering actions.
We claim that this is impossible. First, all the eects of A00 are either in G or consistent
with G, by construction. In addition, all the preconditions of A00 are in S 0 and therefore in
S . Because S is an actual state of the world, it cannot contain conicting literals. Hence,
0
S 62 C S1 .
Next, suppose that we have established our inductive hypothesis for all i < m and let
us prove that it holds for i = m. Hence, let S be some state for which there exists an mstep plan A = A1 ; : : : ; A for attaining G. Let S +1 denote the state obtained by applying
A1 to S . We know that there is an m
1 step plan for achieving G from S +1 . By our
+1
inductive hypothesis, S satises the conditions of the Theorem. In particular, we know
that S +1  S 1 and no subset of S +1 is in C S 1 . To complete our proof it would be
suÆcient to show that S +1 is reachable by a one-step plan A0 whose actions are in A but
not in C A . The proof is similar to the base case.
r

S

m

m

m

m

m

Corollary 1 For any initial state s from which the goal is reachable and any minimal (in
the number of operators) plan P = A0 ; : : : A00 (where the steps are numbered backwards) for
reaching the goal from s, we have A0  A and C A does not contain any subset of A0 .
m

i

i

i

i

Proof: An inspection of the proof of the previous theorem shows that in every step we

have found some subset of the set of actions in each candidate plan that satised the
relevant conditions. In particular, consider a minimal plan, all its elements must satisfy
these conditions.

Lemma 4 In the context of the linear encoding, unless there is a single safe, nal action,
unit propagation yields less relevance information than Relevant-1.

Initially, our only unit clauses are goal literals. We can resolve then against the eect
axioms only. This would yield negation of various actions (i.e., unsafe actions). These
negated action literals can be resolved only against the action disjunction (axiom class 4).
However, if there is more than one safe nal action, we will not obtain a unit clause from
this disjunction, and there is nothing farther that we can do. The same information, and
more, is easily obtainable from Relevant-1.
25

Brafman

Lemma 5 In the context of the

Graphplan encoding, if there is an action for changing the value of every literal, then unit propagation yields less relevance information than
Relevant-1.

Proof: See text prior to this Lemma.
Appendix B. The Complexity of Reachable-k and Relevant-k

The computational complexity of Reachable-k is O(njAjjLj E + njLjjAj ), where n is the
number of levels we generate, jAj is the number of possible actions, jLj is the size of the
propositional language used, and E is the maximal number of actions that have a particular
shared eect. As we explain below, the complexity is dominated by the time required to
produce the sets C S and C A .
The set of possible eects, S , is produced in O(jAj m ) steps, where m is the maximal
number of eects.
C S requires examining all l -tuples of elements in S , for l  k , and there are at most
O (jLj ) such elements. For each such tuple we have to nd the set of actions that produce
it. This can be done quickly, provided we maintained pointers to these actions. The number
of such sets of actions is O(E ) (since no more than k actions are needed). For each such
set of actions we must check whether some subset of it is a member of C A 1 . Given an
appropriate representation of C A 1 , this can be done in time O(jAj). To accomplish this,
we can use a binary tree whose leafs correspond to bit vectors. The depth of this tree is
jAj and its size is O(jC A 1j). Finally, we need to maintain C S as a similar tree of bitvectors. This can be done in O(jLj ) (or, if C S is small, at a lower cost). The overall cost
of producing C S is O(jLj jE j jAj).
To produce the set A , we go over all actions and check whether their preconditions
appear in S . This requires O(jAj  m ) steps (assuming a bit-vector representation of S ),
where m is the maximal number of preconditions of an action. We also have to check
whether the preconditions appear in C S . Since jA j  jAj and we can check whether a
subset of the set of preconditions appears in C S in time O(jLj), this requires O(jAjjLj)
steps.
Finally, we need to produce the C A . This requires generating all subsets of A of size
k or less, taking O (jAj ) steps. For each such subset we must check whether its preconditions contain an element of C S . Again, provided an appropriate data-structure for C S
is maintained, this can be done in O(jLj) for each set of preconditions. As in the case of
C S , we assumed C A is maintained as a tree of bit-vectors, which can be generated in time
O (jAj ). The overall complexity of this step is O (jLjjAj ).
Note that for small values of k other data-structures are likely to provide better performance.
Next, we address Relevant-k. Our analysis is under the assumption that the same
set of variables appear in the preconditions and eects of each operator. As we noted,
transforming a set of operators that do not satisfy this property into a set of operators that
satisfy it may cause an exponential blow-up in the worst case.
The complexity of Relevant-k is O(jAj jLj + jLj m jAj), where jAj is the number of
actions, jLj is the number of proposition in the language, and m is the maximal number of
k

i

k

k

i

i

e

i

e

i

k

K

i

i

i

i

k

k

i

i

k

i

i

p

i

p

i

i

i

i

i

k

i

i

i

k

k

k

k

k

k
p

p

26

Reachability, Relevance, and Resolution

preconditions of an action. The analysis is quite similar to the case of Reachable-k, and we
ignore the sets R and A which are subsets of the larger S and A and whose generation
contributes constant factors:
The set of preconditions, S , is produced in O(jAj  m ) steps.
To compute C S , we iterate over O(jLj ) sets of literals. For each such set we examine
all sets of actions that have it as preconditions, and there are at most O(m ) such sets. For
each such set of actions, we need to check that it is not in C A 1 . Each such check can be
performed in O(jAj) steps. The overall complexity of this step is O(jLj m jAj).
To produce the set A , we go over all actions useful for S , which require O(jLjE ) (where
as before, E is the maximal number of actions that have a particular eect). For each action,
we check whether its eects are in C S . Since we need to perform this check at most once
for every action, the overall complexity of O(jLjE + jLjjAj).
Finally, we need to produce the sets C A . Interfering actions can be pre-computed with
the cost amortized over all steps. In any case, their computation requires no more than
2
O (mjAj ) steps, where m is the maximal sum of preconditions and eects for an action.
Next, we have to examine the eects of all l-tuples of actions, where l  k, and see whether
these eects have a subset in C S . This takes O(jAj jLj) steps.
Again, for small values of k (and in particular, k = 1; 2) a tighter analysis is possible.
r
i

i

i

i

i

p

k

i

k
p

i

k

i

k
p

i

i

i

k

i

References

Bayardo, R. J., & Schrag, R. C. (1997). Using CSP look-back techniques to solve real-world
SAT instances. In Proc. AAAI-97, pp. 203{208.
Blum, A., & Furst, M. L. (1997). Fast planning through planning graph analysis. Articial
Intelligence, 90, 281{300.
Bonet, B., Loerincs, G., & Gener, H. (1997). A robust and fast action selection mechanism
for planning. In Proc. AAAI-97, pp. 714{719.
Boutilier, C., Brafman, R. I., & Geib, C. (1998). Structured reachability analysis for markov
decision processes. In Proc. of 14th Conference on Uncertainty in AI, pp. 24{32.
Boutilier, C., & Dearden, R. (1994). Using abstractions for decision theoretic planning with
time constraints. In Proc. of AAAI'94, pp. 1016{1022.
Brafman, R. I. (1999). Reachability, relevance, resolution, and the planning as satisability
approach. In IJCAI'99, pp. 976{981.
Brafman, R. I., & Hoos, H. H. (1999). To encode or not to encode - i: linear planning. In
IJCAI'99, pp. 988{993.
Brafman, R. I. (2000). A simplier for propositional formulas with many binary clauses.
Tech. rep. 00-04, Dept. of Computer Science, Ben-Gurion University.
Crawford, J., & Auton, L. D. (1993). Experimental results on the cross-over point in
satisability problems. In Proc. AAAI'93, pp. 21{27.
27

Brafman

Davis, M., & Putman, H. (1960). A computing procedure for quantication theory. Journal
of the ACM, 7, 201{215.
Do, M. B., Srivastava, B., & Kambhampati, S. (2000). Investigating the eect of relevance
and reachability constraints on sat encodings of planning. In Proc. of the Fifth Intl.
Conf. on AI Planning and Scheduling Systems.
Ernst, M. D., Millstein, T. D., & Weld, D. S. (1997). Automatic SAT-compilation of
planning problems. In Proceedings of the International Joint Conference on Articial
Intelligence.
Fikes, R., & Nilsson, N. (1971). Strips: A new approach to the application of theorem
proving to problem solving. Articial Intelligence, 2 (3{4), 189{208.
Freeman, J. W. (1995). Improvements to Propositional Satisability Search Algorithms.
Ph.D. thesis, U. Pennsylvania Dept. of Computer and Information Science.
Genesereth, M. R., & Nilsson, N. J. (1987). Logical Foundations of Articial Intelligence.
Kaufmann, Los Altos, CA.
Gomes, C. P., Selman, B., & Kautz, H. (1998). Boosting combinatorial search through
randomization. In Proc. of 15th Nat. Conf. AI, pp. 431{437.
Haslum, P., & Gener, H. (2000). Admissible heuristics for optimal planning. In Proc. of
the Fifth Intl. Conf. on AI Planning and Scheduling Systems, pp. 140{149.
Kambhampati, S., Parker, E., & Lambrecht, E. (1997). Understanding and exending graphplan. In Proc. 4th European Conf. on Planning, pp. 260{272.
Kautz, H., & Selman, B. (1992). Planning as satisability. In Proc. of the 10th European
Conf. on AI, pp. 359{363.
Kautz, H., & Selman, B. (1996). Pushing the envelope: Planning, propositional logic, and
stochastic search. In Proc. of the 13th National Conference on AI (AAAI'96), pp.
1194{1201.
Kautz, H., & Selman, B. (1999). Unifying sat-based and graph-based planning. In Proc.
16th Intl. Joint Conf. on AI (IJCAI'99), pp. 318{325.
Li, C. M., & Anbulagan (1997). Heuristics based on unit propagation for satisability
problems. In Proc. IJCAI-97.
McDermoot, D. (1996). A heuristic estimator for means-ends analysis in planning. In Proc.
3rd Int. Conf on AI Planning Systems, pp. 142{149.
Nebel, B., Dimopoulos, Y., & Koehler, J. (1997). Ignoring irrelevant facts and operators in
plan generation. In Proc. 4th European Conf. on Planning.

28

Journal of Articial Intelligence Research 1 (2001) 231-252

Submitted 3/00; published 5/01

Technical Paper Recommendation: A Study in Combining
Multiple Information Sources
Chumki Basu

cbasu@cs.rutgers.edu

Haym Hirsh

hirsh@cs.rutgers.edu

Department of Computer Science, Rutgers University, 110 Frelinghuysen Road,
Piscataway NJ 08854-8019 and
Telcordia Technologies, Inc., 445 South Street,
Morristown NJ 07960-6438
Department of Computer Science, Rutgers University, 110 Frelinghuysen Road,
Piscataway NJ 08854-8019

William W. Cohen

wcohen@whizbang.com

Craig Nevill-Manning

nevill@cs.rutgers.edu

WhizBang! Labs, WhizBang Labs - East, 4616 Henry Street,
Pittsburgh PA 15213

Department of Computer Science, Rutgers University, 110 Frelinghuysen Road,
Piscataway NJ 08854-8019

Abstract

The growing need to manage and exploit the proliferation of online data sources is opening up new opportunities for bringing people closer to the resources they need. For instance,
consider a recommendation service through which researchers can receive daily pointers to
journal papers in their elds of interest. We survey some of the known approaches to the
problem of technical paper recommendation and ask how they can be extended to deal
with multiple information sources. More specically, we focus on a variant of this problem
{ recommending conference paper submissions to reviewing committee members { which
oers us a testbed to try dierent approaches. Using WHIRL { an information integration system { we are able to implement dierent recommendation algorithms derived from
information retrieval principles. We also use a novel autonomous procedure for gathering
reviewer interest information from the Web. We evaluate our approach and compare it
to other methods using preference data provided by members of the AAAI-98 conference
reviewing committee along with data about the actual submissions.

1. Introduction
We can dene the paper recommendation problem as follows:
Given a representation of my interests, nd me relevant papers.

In fact, if we replace papers in the above denition with the name of some other artifact
of choice, we have yet another instantiation of a recommendation problem. What then
makes paper recommendation all that interesting?
231

Basu, Hirsh, Cohen, & Nevill-Manning

The ability to automatically lter a large set of papers and nd those that are most
aligned with one's research interests has its advantages. With the growing number of
publications, many of them online, it is dicult to keep up with the latest research, even
if it's within one's eld. With the timeliness of information becoming all the more critical,
it is also desirable for a paper to reach its target audience with minimal latency. Although
a straightforward approach to nding relevant papers may look for close matches between
a person's interests and a paper's content, what is less clear is how to represent both the
interests of the researchers and the contents of the papers.
Another feature that sets paper recommendation apart is that there is a variant problem
which must be dealt with on a regular basis by numerous conference chairs. Conferences
oer a venue where a large number of fairly specic papers must be distributed to a smaller
number of reviewers, all within a very tight timeframe. Even with the scope of the problem
being constrained to some degree by topic, conference organizers and/or reviewers still must
expend a great deal of time and eort before they can begin the reviewing process. This
would suggest that there can be real value in nding ways of automating the ltering process
that would make it less burdensome to the potential consumers.
We consider algorithms for recommending focused sets of technical papers. We use
conference reviewing as a platform to explore a series of questions relating to the recommendation process. There has been new interest in the AI community for this problem
recently since it was proposed as a \challenge" task at IJCAI-97 (Geller, 1997). Our focus
on conference reviewing turns out to be a natural choice since we can obtain data about a
set of papers, i.e., the conference submissions, and we can also obtain information about
the preferences of a set of reviewers for these submissions. In the following section, we discuss related work that addresses the conference reviewing problem. We also consider how
other work in the area of recommender systems { e.g., recommending articles to newsgroup
readers or recommending Web pages to Web site visitors { can contribute to this task.
However, our focus is on varying the sources of information in our data representations,
thereby allowing us to formulate dierent recommendation algorithms based on how we recombine these sources when computing similarity. We show that there is indeed a dierence
in performance when we vary the amount and source of data, compared to the baseline of
using a single source of information in our data representations. We also compare these
recommendation algorithms against each other, against collaborative ltering, and against
the random assignment of papers to reviewers. We apply our methods to experimental data
involving reviewer preferences and conference abstracts for the AAAI-98 conference. 1

2. What We Know about Paper Recommendation
We already know that by recommending papers to reviewers, and more generally, to the
arbitrary researcher, we are trying to be selective in choosing those papers that will ultimately reach the consumer based on relevance to interests or expertise. However, nding
papers for conference reviewers is necessarily a more complex task, since papers may be
assigned to reviewers based on other criteria. For instance, reviewer load balancing and
conict-resolution of reviewer-author aliations may be two such criteria. In addition, the
1. The data were obtained with permission from AAAI, the AAAI reviewers, and when appropriate, from
the authors of the submitted papers.

232

Technical Paper Recommendation: A Study in Combining Multiple Information Sources

reviewer's own reviewing preferences may be inuenced by considerations such as a paper's
readability and novelty. For example, a preference for novelty may lead a reviewer to choose
a paper simply because it is not relevant to his or her interests.
Our methods are not suited to address these latter issues for a number of reasons. First,
for condentiality purposes, we lack information related to the author identity or aliation
of the submitted conference papers. Secondly, since constraint-satisfaction is not our main
concern { we are primarily interested in nding the best papers for each person without
regard to whether multiple people receive the same paper { we do not incorporate other
criteria into our selection procedure. We also do not have a way to represent the \novelty"
of a paper with respect to any consumer, and thereby do not have a means for recognizing
it. Finally, our methods do not distinguish between the notion of interest and expertise
with respect to reviewers. For the more general recommendation problem, the researcher
may want to retrieve papers in areas outside of his or her expertise, in which case a separate
representation for each would be needed.
Previous work in the area of assigning conference papers to reviewers had approached
the problem as one of content-based information retrieval. Dumais and Nielsen (1992) used
data provided by 15 members of the reviewing committee for the HYPERTEXT '91 conference. These reviewers not only submitted abstracts of their papers and/or interests, but also
provided complete relevance assessments for the 117 papers submitted to the conference.
Using an information retrieval method known as latent semantic indexing (LSI), they compared the reviewer abstracts with the submissions, ranking the submissions from most to
least similar to each reviewer. From their results, they noticed, based on the performance
metric that evaluates the number of relevant articles returned in the Top 10, that they
could achieve an average of 48% improvement using their automated methods compared to
random assignment of articles to reviewers.
While these results are encouraging, we believe that the widespread availability of online
resources introduces opportunities for exploring some new issues. What if the reviewers
weren't asked to supply interest information? Can the process of gleaning reviewer interest
data be automated with simple methods? How well do we do at retrieving relevant papers
using this \approximation" of reviewer interests? The automatic collection of reviewer
interest information from the Web, which eectively removes the reviewer from loop, is a
novel aspect of our research.
Yarowsky and Florian (1999) attempted a similar task for the ACL'99 conference. However, their primary focus was on classication { the assignment of every paper to exactly
one of six conference committees. They used 92 papers which were submitted to the ACL
conference in electronic form and also requested committee members to provide representative papers. When the number of papers returned by these members was insucient, they
augmented the collection with other papers downloaded from online sources. They used
content-based retrieval (within the context of the vector-space model (Salton, 1989)) as one
of their routing strategies. The main algorithm rst computed a centroid for each reviewer
based on representative papers and then computed a centroid for each committee as the
sum of its reviewer centroids. Then, each paper was classied (assigned to a committee) by
computing its cosine similarity with the committee centroids and choosing the one with the
highest rank. Amongst other approaches, they experimented with a Naive Bayes classier
and the assessment of similarity between reviewing committee members and authors cited
233

Basu, Hirsh, Cohen, & Nevill-Manning

in the papers. Based on their system performance relative to human judges on the same
task (evaluated against the actual assignments provided by the program chair of the conference), they extrapolated that automated methods could be as eective as human judges,
especially in cases where the judges may be less experienced.
When we are dealing with large conferences with several hundred papers covering a variety of areas, the information load is even greater for conference organizers and reviewers
alike. In these cases, getting evaluative relevance judgments for all submitted (or even accepted) papers from the reviewers is not feasible. (As an example, for the AAAI conference,
reviewers do not even have to state their preferences for all the papers they can potentially
review. Instead, they can stop scanning the list as soon as they have lled up their quota
of \bids"{ papers they expressed interest in reviewing.) Therefore, we focus on building
an extensible framework for recommendation { dening a process whereby we can systematically incorporate more information in formulating recommendation algorithms, for the
purpose of generating better recommendations.
Content-based information retrieval, also known as content-based ltering, is a popular
recommendation method: consider systems that recommend Web pages such as Syskill &
Webert (Pazzani & Billsus, 1997). There are a number of other systems such as WebWatcher
and Fab that do content-based ltering, mainly as part of a hybrid approach that also
involves collaborative ltering. Whereas content-based ltering looks only at the contents
of an artifact (e.g., the words on a Web page), collaborative ltering will also consider the
opinions of other like-minded people with respect to these artifacts. Collaborative ltering
has been used to recommend NetNews articles (Konstan, Miller, Maltz, Herlocker, Gordon,
& Riedl, 1997), movies (Hill, Stead, Rosenstein, & Furnas, 1995; Basu, Hirsh, & Cohen,
1998), music (Cohen & Fan, 2000; Shardanand & Maes, 1995), and even jokes (Gupta,
Digiovanni, Narita, & Goldberg, 1999). Since both content-based and collaborative methods
use data that are orthogonal to one another, there are opportunities to come up with hybrid
approaches that use combinations of the data. Our own work on movie recommendation
provides another example of how to design a hybrid system. Hybrid systems exploit data
from multiple sources with the expectation that they can do better by compensating for
the limiting factor of data sparseness associated with any single source.
In our current study, we would like to identify dierent sources of information to describe
both papers and reviewers, with the expectation that the individual pieces themselves, along
with knowledge of how to combine them, can make a dierence in the recommendations.
Although we do share the common goal of combining data from multiple sources with the
hybrid recommendation approaches, the algorithms that we develop are strictly contentbased. For evaluative purposes, we also compare our algorithms against the results of
applying collaborative ltering methods to the set of reviewer preferences.

3. Representing Papers and Reviewers
Our approach to recommendation is to represent each entity using a variety of information
sources, to enumerate dierent combinations of these sources, and to evaluate the eectiveness of these combinations using ranked-retrieval methods. For the paper recommendation
problem, we have two types of entities | papers and their consumers (reviewers, in our
case). For each entity, we can represent the salient features of that entity as a sequence
234

Technical Paper Recommendation: A Study in Combining Multiple Information Sources

of one or more information sources. In addition, we also need another type of information
source that relates a reviewer to a paper, namely, the reviewers' actual preferences for the
papers. We begin with a discussion of our choice of information sources | some of these
choices are based on data that are typically used to assign papers to reviewers, and are
usually provided explicitly by the papers' authors, while other choices rely more on implicit
knowledge mined from the semi-structured data available on the Web.

3.1 Paper Information Sources

All of our experiments were based on a compilation of submitted abstracts obtained from
AAAI for the AAAI-98 conference. There were 466 papers submitted to this conference.
AAAI gave us a collection of 256 papers to use in our experiments | the abstracts of 144
accepted papers and the abstracts of 112 papers that had been rejected but whose authors
had granted AAAI permission to provide the abstract for this work. Also excluded were
any papers that had been authored by any of the authors of this paper.
For each submission we obtained its title, abstract, and a set of user-assigned keywords
from a prespecied list. Therefore, each paper has associated with it a set of three information sources all of which were provided by the papers' authors. Although one may consider
the body of the paper as another source, this information was not available to the reviewers
(nor us), so we do not use it as a source.

3.2 Reviewer Information Sources

So far, we have seen an example where an entity such as a paper can be represented by
multiple information sources mainly because it is composed of distinct units such as a title,
abstract, etc. However, there is another case where we may want to multiply-represent an
entity. Consider trying to automatically compose a representation of a reviewer's interests.
We may try rst to go to the reviewer's home page. From there, we may decide to look
around for the reviewer's papers. Each of these sources can oer a dierent point-of-view
of the reviewer's interests, and therefore, can be considered as a separate unit. We focus on
these sources { the reviewer's entry-level home page and the papers that are referenced from
the home page { as a substitute for asking the reviewer to provide interest information.
We believe both home pages and online papers are credible information sources since it
is likely that a fair number of conference reviewers have stated their research interests in
either or both sources. Since one of our paper information sources is the paper abstract,
we decided to represent the reviewer as an \abstract of interests". In the case of home
pages, the entire text of the reviewers's entry-level home page was taken as an abstract of
the reviewer's interests. In the case of PostScript les, we dene an abstract to be the rst
300 words extracted from the paper.
We extracted all of this information from the Web using pre-existing utilities. To nd
reviewers' home pages, we fed the names and aliations of the members of the review
committee into Ahoy,2 a home page nding engine (Shakes, Langheinrich, & Etzioni, 1997).
When Ahoy returned at least one match, we supplied the URL as a starting point for
w3mir,3 an HTTP service that retrieves les from the contents of Web sites. We used
2. http://ahoy.cs.washington.edu:6060.
3. http://www.math.uio.no/janl/w3mir.

235

Basu, Hirsh, Cohen, & Nevill-Manning

w3mir to download only HTML les and PostScript les accessible from the entry-level
home page and residing on the same site.4 Since all of a person's papers may not directly
be available from one site, we additionally retrieved cross-references to other sites which
contained PostScript les, also using w3mir. The PostScript les were then converted to
ASCII using PreScript (Nevill-Manning, Reed, & Witten, 1998).
All PostScript les retrieved for a reviewer are treated uniformly. Although it would
be desirable to attempt to do so in future work, we make no attempt to determine the
timeliness of a paper, especially with respect to a reviewer's current interests. We also do
not distinguish between journal papers, conference papers, and even lecture notes. It is
for this reason that we do not attempt to do any detailed analysis of the contents of these
les (e.g., to automatically extract titles, abstracts, etc.). Instead, we rely on heuristics
such as looking at the rst N words to approximate a paper's abstract. Although detailed
analysis is likely to be valuable in the paper recommendation process, our immediate goal
is to obtain a gross sense of the usability of various sources of semi-structured information.

3.3 Reviewer Preferences
To evaluate our queries we need some \ground truth" | some set of data specifying what
papers each reviewer had selected as suitable for him or her to review. With this information,
we can evaluate how dierent approaches perform in making the same choices. We note that
this is only an approximation to the full set of abstracts that the reviewer might have liked
| the reviewing process only requires a reviewer to nd some minimum quota of papers,
and once that quota is reached, a reviewer need not look at other papers to nd more. We
view this optimistically as yielding a close approximation to what a reviewer's full set of
preferences would be, since reviewers are able to peruse abstracts by keywords and often
attempt to inspect at least the subset of papers labeled by keywords in the areas in which
they are knowledgeable.
In our experiments ground truth comes from the actual preferences stated by 122 (of
the 230) AAAI-98 reviewers who gave AAAI permission to release their preference information for the papers we considered in this work. We point out that this data only reects
the reviewers' initial preferences for reviewing. We do not have data on what papers the
reviewers actually received following the AAAI reviewer assignment process.
Of course, one potential limitation of this data is that it is based only on a portion of data
that may not be representative of the entire data for the conference. For example, we have
preference data for approximately half of all of the reviewers and are predicting preferences
for a collection of papers whose distribution is skewed towards the accepted papers. There is
also the issue of whether AAAI researchers are representative of the much larger community
of researchers at large. (We can ask a similar question of the user populations of other
conferences as well). However, we consider these as acceptable limitations resulting from
our use of conference reviewing as a platform for paper recommendation.
4. At the moment, we focus on PostScript for convenience, but there is no reason to limit ourselves to just
one le format; the main constraint is being able to extract the words from a document.

236

Technical Paper Recommendation: A Study in Combining Multiple Information Sources

4. Recommendation Methodology

In this section, we examine both collaborative and content-based methods of recommendation. These methods allow us to explore the use of dierent subsets of the data described
in the previous section.

4.1 Recommending with Reviewer and Paper Information Sources

In the following sections, we outline a content-based recommendation framework that uses
data describing the papers as well as data describing the reviewers to make recommendations. The reviewer preference data is then used for evaluation purposes, but not as input
to the recommendation process.
In order to locate papers that closely match reviewer interest data we rely on ad hoc
similarity metrics commonly used in the information retrieval community. We will describe
these methods further in the section on WHIRL. In brief, for each reviewer we compare
the given reviewer representation with the appropriate paper information source(s). Each
of these comparisons can be implemented as a query that returns a rank-ordered list of
papers. We can consequently compute precision at Top N , or the proportion of the papers
returned that were actually preferred by the reviewer, for each query. Our nal score for
each query is the average of this value, computed over a subset of 50 reviewers (from the
larger set of reviewers who gave us their permission).
Our recommendation algorithms take dierent paper and reviewer information sources
as inputs. Since our data can be plotted along two dimensions, let Reviewer be the set of
information sources describing reviewers and Paper the set of information sources describing
papers. We can construct a Reviewer  Paper matrix where each entry in this matrix is
a score measuring the eectiveness of using the respective sources, (Reviewer ; Paper ), to
compute similarity between reviewers and papers when performing a ranked-retrieval. For
instance, given the paper and reviewer representations we have described, we can construct
a 2  3 matrix, which gives us 6 possible evaluations or scores. We will refer to this matrix
as the recommendation sources matrix.
Conceptually, we can extend the recommendation sources matrix along each dimension,
by considering combinations of the rows and columns. We refer to the augmented matrix
as the source combinations matrix. We can now dene a recommendation algorithm as
a combination method or procedure applied to one or more rows/columns of the source
combinations matrix. This introduces another dimension for comparison { the combination
method itself { which we consider by looking at replicates of the source combinations matrix.
Now, we can pose the following questions for experimental analysis:
i

j

 Do recommendation algorithms that incorporate more information lead to better performance?
 If so, does the method of combining data used by the algorithm make a dierence?
4.1.1 WHIRL

For all of our queries, we use WHIRL, a system specically designed for informationintegration tasks (Cohen, 1998b; Cohen & Hirsh, 1998). For these tasks, it is often necessary to manipulate in a general way information obtained from many heterogeneous online
237

Basu, Hirsh, Cohen, & Nevill-Manning

sources, each potentially having its own data organization and terminology. In particular,
WHIRL makes it possible to integrate information that can be decomposed and represented
in a clean, modular way. For example, we would like to have information about home pages
and PostScript papers represented separately, using the information integration tool to
resolve these sources of information.
WHIRL is a conventional DBMS that has been extended to use ad hoc similarity metrics
developed in the information retrieval community. Using these metrics, it can reason about
pieces of text culled from heterogeneous sources based on the similarity of values rather than
on strict equality. WHIRL computes similarity using the \vector-space" representation to
model text (Salton, 1989). Each text object is represented by a vector of term weights
(where the terms have been stemmed using Porter's algorithm (Porter, 1980)) based on
the TFIDF weighting scheme. Similarity between two vectors is computed using the cosine
similarity metric. The answers to a query are presented by rank-ordering the generated
tuples, with tuples having more similar pairs of attribute elds appearing rst.
For example, using WHIRL, we can pose the following query:
SELECT Reviewer.Name, Paper.ID
FROM Paper AND Reviewer
WHERE Reviewer.Descriptor SIM Paper.Abstract

This query will return a list of reviewer names and paper IDs for papers whose abstracts
were similar to the reviewer's interest descriptor. Rather than returning only those tuples for
which the descriptor and abstract elds are identical, as would be performed by a traditional
database join, this query returns Name and ID pairs for those tuples whose elds contain
similar terms, ordered according to decreasing value of similarity. The advantage of doing
ad hoc joins without requiring the textual elds to be identical to one another is important
when the text comes from multiple sources and thereby may use dierent terminology. It is
also important from the perspective of comparing the relative importance of dierent elds
to one another in an ecient way.
To use WHIRL all data must be stored in the form of WHIRL relations. For our
data we constructed two relations, each one representing dierent information sources. For
each conference submission, we form a Paper relation containing its id, abstract, keywords,
and title. For every reviewer, we form a Reviewer relation which contains a single tuple
with attributes representing the reviewer's name and some representation of the reviewer's
interests (for example, based on the reviewer's home page).
So far, we have discussed how we can use WHIRL to formulate queries involving a single
information source for both reviewers and papers. However, an advantage of the WHIRL
approach lies in the simplicity with which we can extend these queries to incorporate multiple sources. The primary advantage of using WHIRL in our work is the ease with which
we can measure the impact of conjunctive queries incorporating data from multiple sources.
We form conjunctive queries by adding multiple conditions to a WHERE clause:
SELECT Reviewer.Name, Paper.ID
FROM Paper AND Reviewer
WHERE Reviewer.Descriptor SIM Paper.Abstract
AND Reviewer.Descriptor SIM Paper.Keywords
238

Technical Paper Recommendation: A Study in Combining Multiple Information Sources

When a WHIRL WHERE clause contains multiple conditions, the similarity scores
of the individual conjuncts are combined by taking their product as though they were
independent probabilities. Since similarity scores are not independent probabilities, we
only use it as a convenient way to combine scores, albeit one that oers a straightforward
approach to combination which has been previously studied (Cohen, 1998a). In the above
query, WHIRL would assign a score that reects both the similarity of the submitted
paper's abstract and the reviewer's descriptor, as well as the similarity of the submitted
paper's keywords and the reviewer's descriptor.
4.1.2 Combining Information Sources by Query Expansion

What does it mean for a recommendation algorithm to combine data from multiple information sources? This means enumerating the information sources that can be used as possible
inputs to the algorithm, and then dening a way to use these sources to compute similarity.
For instance, suppose we look at 1 reviewer source and 2 paper sources for a given collection
of reviewers and papers. To decide whether a paper is likely to interest the reviewer, we
can compute the similarity between the reviewer source and each of the paper sources and
combine the two similarity scores. Alternatively, we can compute a single similarity score
by rst combining the two paper sources into a single representation and then computing
its similarity with respect to the reviewer source.
The idea of combining two sources into a single representation can be implemeted by
appending terms from the sources. In information retrieval, terms from relevant sources
are often appended to a baseline representation of a query during the process of query
reformulation. This is usually referred to as query expansion. Since our methods bear a
resemblance to query expansion, we make this analogy. These expansion methods will be
further described in the following sections. Of course, we do not have prior knowledge
of the relevance of our sources, and in this sense, we dier from the information retrieval
implementation of query expansion.
When we compare the relative performance of recommendation algorithms, we have
multiple dimensions along which to compare the results. We can dierentiate the results
based on the methods used to combine the data and compute similarity or we can dierentiate between the results based on which information sources were used in the comparison.
In other words, on the same set of inputs, does one method of query expansion perform
better than another? If we want to compare the merit of a single source, we can consider
two groups of algorithms { those that include a given source as input to the algorithm, and
those that exclude this source. If we simply count the number of times algorithms that
include this source outperform algorithms that exclude it, we can determine the relative
merit of the source.
4.1.3 The Concatenation Method

One way to \add" information from a new data source is to append the terms appearing in
the source to the original WHIRL query. For this type of query, we always have a single
WHIRL conjunct but each of the textual elds appearing in the conjunct can \grow" with
the addition of new terms. We call this method, queryConcat.
239

Basu, Hirsh, Cohen, & Nevill-Manning

Suppose, for example, that we start with the base query from the previous section that
only compares reviewer descriptors with paper abstracts. Now, suppose we want to compare
reviewer descriptors not only to the paper abstracts but also to the paper keywords. One
way to do this is to use the queryConcat method. We form a new eld representing the
union of the words appearing in the paper abstract and paper keywords elds which we can
substitute in the original query. Let Paper.Descriptor = Paper.Abstract [ Paper.Keywords.
Our new query is:
SELECT Reviewer.Name, Paper.ID
FROM Paper AND Reviewer
WHERE Reviewer.Descriptor SIM Paper.Descriptor

Similarly, we can replace Paper.Descriptor in the WHERE clause to represent dierent
combinations of the elds, Paper.Abstract, Paper.Keywords and Paper.Title using the union
operator.
4.1.4 The Conjunction Method

As we previously stated, an important motivation for using WHIRL is its ability to execute
conjunctive queries, which we can also use to combine information sources in the recommendation process. For this type of query, instead of adding terms to any particular text eld,
we add conjuncts to the original WHERE. We refer this method of reformulating queries
as queryConjunct.
We enumerate the query combinations that we considered for queryConjunct as follows.
Using the same sources as for queryConcat, we can begin the queries as before,
SELECT Reviewer.Name, Paper.ID
FROM Paper AND Reviewer
WHERE

but now, replacing the body of the WHERE clause with the following:
A: Reviewer.Descriptor SIM Paper.Abstract
K: Reviewer.Descriptor SIM Paper.Keywords
T: Reviewer.Descriptor SIM Paper.Title
AK: Reviewer.Descriptor SIM Paper.Abstract
AND Reviewer.Descriptor SIM Paper.Keywords
AT: Reviewer.Descriptor SIM Paper.Abstract
AND Reviewer.Descriptor SIM Paper.Title
KT: Reviewer.Descriptor SIM Paper.Keywords
AND Reviewer.Descriptor SIM Paper.Title
AKT: Reviewer.Descriptor SIM Paper.Abstract
AND Reviewer.Descriptor SIM Paper.Keywords
AND Reviewer.Descriptor SIM Paper.Title

We assign the labels, A (abstract), K (keywords), and T (title) to the queries to identify
the paper sources used. (We use these labels in a comparable fashion for the queryConcat
method, representing the information sources that are concatenated together.)
240

Technical Paper Recommendation: A Study in Combining Multiple Information Sources

For each of the above queries, we can also vary the source of data used to represent the
reviewers. The rst variant accounts for the case where the reviewer's descriptor contains the
words from the reviewer's home page; the second accounts for the case where the descriptor
contains the union of the rst 300 words extracted from each PostScript le obtained from
the reviewer's Web pages.
We decided to try yet another combination to see whether using both representations
for reviewers would improve performance. For simplicity, we chose to test this hypothesis
with an expanded conjunctive query involving a single extra conjunct. We constructed
a Reviewer table that contains two attributes: Papers (consisting of the abstracts of the
reviewer's PostScript papers) and Homepage (consisting of the reviewer's home page). We
then ran each of the above queries, but now with an additional conjunct appearing in each
WHERE clause:
Reviewer.Homepage SIM Paper.Keywords

We chose to use Keywords as the Paper.Descriptor based on our intuitions that a paper's
keywords and a reviewer's homepage would have a greater number of words in common.

4.2 Recommending with Reviewer Preferences

Since we have evaluations from the reviewers on a common set of papers, one approach
for recommending papers would be to take this information and use it for collaborative
ltering. We note that for the actual conference reviewing problem, collaborative ltering
as a method for assigning papers may not be practical. Although we have the benet of
using all of the preferences for a set of reviewers in our study, this information will generally
not be available to the reviewers as they are making their selections, thereby making it more
dicult to base predictions on the preferences of others. Nevertheless, it is worthwhile to
measure the impact of using reviewer preferences for the purpose of recommending papers.
The recommendation methodology for the collaborative ltering approaches is implemented as follows: each reviewer is presented with a recommended paper in an online
manner. After the paper is presented the reviewer tells the system if the paper was relevant. If it was, then the paper is assigned a rating of 1 and the paper is said to be rated
positively. If the paper was not relevant, it is assigned a rating of 0 and is said to be rated
negatively. Let Rating (R; P ) represent the rating that has been assigned to paper P by
reviewer R. When the paper is not relevant, the reviewer also provides a single relevant
paper as a positive example in order to condition future recommendations. Since we know
which papers were liked by the reviewers, we can simulate this process with the data that
we have. We experiment with two collaborative ltering algorithms: kNN (Hill et al., 1995;
Cohen & Fan, 2000) and Extended Direct Bayes (Cohen & Fan, 2000). We let P1 ,P2 ,...,P ,1
represent the papers that have been previously rated by the reviewer in t , 1 trials. The
kNN algorithm uses the following distance metric to locate other reviewers, R , closest to
the current reviewer with respect to the papers that have already been rated:
t

i

Dist(R; R0) = jRating (R; P1) , Rating (R0; P1)j + ::: + jRating (R; P ,1) , Rating (R0; P ,1)j
t

t

We can then compute a score for an arbitrary paper, P , with respect to the ratings of
the k closest reviewers, R1,...,R , as follows:
k

241

Basu, Hirsh, Cohen, & Nevill-Manning

Score(P ) = Rating (R1; P ) + ::: + Rating (R ; P )
k

According to the above methodology, the highest scoring paper will be presented to the
reviewer as the next recommendation.
Extended Direct Bayes can be viewed as an ad hoc extension of a direct Bayesian approach to recommendation. We dene R(P ; P ) to represent the Laplace-corrected estimate
of the prior probability that the reviewer will give P a positive rating. (R(P ; P ) can be
thought of as measuring the \relatedness" between two papers.) Now consider an arbitrary
trial t and let P1 ,P2,...,P ,1 represent the papers that have been rated positively by the
reviewer on previous trials and consider an arbitrary trial t.
We can now use the following scoring function to rank each paper P :
i

j

j

i

j

t

Score(P ) = 1 , ((1 , R(P; P1))  :::  (1 , R(P; P ,1)))
t

The subtrahend in the above expression represents the probability that P is not related
to any P (assuming that the P 's are independent).
i

i

4.3 Evaluation Methodology

In the following sections, we evaluate the performance of our recommendation algorithms.
For collaborative ltering, we compute recommendations for a reviewer until we run out
of positive examples to use as feedback. For each reviewer's list of recommendations, we
measure precision in the Top N ; this gives us the proportion of the items returned in the
Top N for a given reviewer that were actually preferred by the reviewer. Although it is
possible to use other evaluation metrics, we compute precision at dierent levels of papers
returned since it is well-suited to the conference reviewing task. Since a reviewer may get a
list of about 10 papers to review, we would like to simulate this by recommending the Top
10 papers returned by our methods. By computing precision, we measure the percentage of
papers in this list that would have matched the reviewer's preferences. This metric is also
commonly used in the literature. For instance, Dumais and Nielsen (1992) mostly used this
measure, i.e., the number of relevant articles in the Top 10, when reporting their results
since this constituted a reasonable reviewer load. We additionally report results of precision
at Top 30. For the kNN algorithm, we set k = 10 for our experiments.
Our recommendation algorithms can be seen as a choice of a query expansion method
crossed against a choice of the input data sources. For each of the methods queryConjunct
and queryConcat, we ran 3  7 queries detailed in the previous section. This resulted in 21
runs per reviewer, per method. Each run returned an ordered list of paper IDs. For each run,
we again measure precision in the Top N (for N = 10 and N = 30). In our discussion, we
refer to a run using abstracts based on a reviewer's papers as a p run. Similarly, h runs will
be based on a reviewer's home page. Finally, ph runs combine both sources of information
(using the extra conjunct). The results we will report represent precision values averaged
across the reviewers. In order for us to compare performance across dierent information
sources, we need to do our evaluation using the same population of reviewers. Not all of
the reviewers who provided preference data had home pages and/or papers available online.
Therefore, we performed a set of runs using 50 reviewers randomly chosen from the set of
242

Technical Paper Recommendation: A Study in Combining Multiple Information Sources

Source(s)
p(Top10)
h(Top10)
ph(Top10)
p(Top30)
h(Top30)
ph(Top30)

A
0.248
0.210
0.334
0.194
0.169
0.245

K
0.260
0.284
0.304
0.201
0.217
0.219

T
0.234
0.232
0.332
0.177
0.183
0.233

AK
0.266
0.288
0.312
0.198
0.226
0.224

AT
0.274
0.270
0.342
0.195
0.199
0.241

KT
0.308
0.320
0.286
0.220
0.232
0.211

AKT
0.330
0.332
0.374
0.232
0.232
0.249

Table 1: Average Precision Scores at Top 10 and Top 30 Papers Returned using queryConjunct.
reviewers who had both home pages and papers available online, and report results averaged
across these 50 reviewers.
As we mentioned earlier, reviewer choices may be inuenced by a variety of factors
ranging from a person's curiosity to a paper's readability. Many of these factors are dicult
to model. Furthermore, human judges may assign papers to reviewers according to criteria
other than relevance of paper contents to reviewer interests, and their individual opinions
may vary. Therefore, it is highly unlikely that our proposed methods will achieve 100%
precision. Unfortunately, given the nature of the problem, we have not been able to get
an assessment of how human judges would have done at the same task. Nevertheless, we
can evaluate our recommendation framework built on content-based information retrieval
principles and compare relative performance to other reasonable baseline approaches.

5. Results
There are a number of questions we would like to keep in mind as we analyze the results.
In the course of our experiments we vary both the amount of information input to our
algorithms and the method of query expansion used by the algorithms. One of the questions
we would like to answer is what algorithm or set of algorithms is most suited to the task
at hand? We also ask whether the choice of inputs results in measurable dierences in
performance. The tabulation of results which provides the basis for analyzing our contentbased algorithms is presented in Table 1 and Table 2. The baseline method against which we
compare all algorithms is random assignment. This method assigns each reviewer a random
collection of papers. With this method, we can expect a precision of 7.0%. In other words,
this means that if we were to select papers randomly, on average, each reviewer would like
fewer than 1 out of 14 of the papers selected.
Table 1 and Table 2 are replicates of the source combinations matrix we had discussed
earlier. Since we ran two trials for Top N papers returned, each table is actually the
concatenated representation of the matrices for the Top 10 and Top 30 experiments. In
the rst three rows of Table 1 and Table 2, we report precision gures of the Top 10
papers returned for the queryConjunct method and the queryConcat method, respectively.
243

Basu, Hirsh, Cohen, & Nevill-Manning

Precision at Top 10 and Top 30
0.4
’compare.dat’
x

0.38
0.36
0.34
queryConjunct method

0.32
0.3
0.28
0.26
0.24
0.22
0.2
0.18
0.16
0.15

0.2

0.25
0.3
queryConcat method

0.35

0.4

Figure 1: A Comparison of Two Query Methods
Similarly, we show the results for Top 30 papers returned in the bottom three rows of the
tables. Since we can view the rows as representing the reviewer sources used in a query and
the columns representing the paper sources, we can measure the impact of adding data in
two ways. By reading across a row, across groups of columns representing N information
sources, we can gauge how the results vary as more paper data are included in the queries.
Similarly, by reading down a column, we can gauge the dierences in the results as more
reviewer data are included in the queries.
Given this information, what can we say about the performance of our recommendation
algorithms that used dierent methods of query expansion? We can compare the relative
performance of the two methods queryConjunct and queryConcat based on the values listed
in Table 1 and Table 2. Note that in all cases performance of these methods exceeds
that of random selection, with accuracies a factor 2 to 5 times better. In Figure 1, we
record this information as a data point for every query that uses two or more sources of
information (since the methods dier in how they combine data from two or more sources,
it is meaningless to plot points that refer to queries using a single source). In this gure, the
x-axis represents queries expanded using the queryConcat method and the y-axis represents
queries expanded using the queryConjunct method. If a point falls on the x = y line, then
the two methods yielded the same performance for a query using the same information
sources. All points that fall in the area above the x = y line mark those queries where
queryConjunct had higher precision than queryConcat. The data reveal that in almost all
cases, queryConjunct had higher precision than queryConcat, thereby making queryConjunct
the dominant of the two query expansion methods and the preferred method of the two for
the task at hand.
Our expectation is that as we increase the source data we should notice an increase
in precision. Specically, we note that for queryConjunct, the query that uses the most
information for a paper submission in a majority of cases performs statistically signicantly
244

Technical Paper Recommendation: A Study in Combining Multiple Information Sources

Source(s)
p(Top10)
h(Top10)
ph(Top10)
p(Top30)
h(Top30)
ph(Top30)

A
0.248
0.210
0.258
0.194
0.169
0.197

K
0.260
0.284
0.272
0.201
0.217
0.212

T
0.234
0.232
0.242
0.177
0.183
0.180

AK
0.264
0.226
0.262
0.202
0.179
0.203

AT
0.266
0.226
0.260
0.202
0.179
0.203

KT
0.276
0.308
0.300
0.201
0.199
0.209

AKT
0.266
0.222
0.274
0.209
0.184
0.211

Table 2: Average Precision Scores at Top 10 and Top 30 Papers Returned using queryConcat.
better5 than queries that use less information and in no case performs statistically signicantly worse.
We should note that adding information will not always lead to monotonically better
results. Notice that for queryConjunct, in the case of Top 30 papers returned, hKT is indistinguishable from hAKT. We also note that phT performs better (though not statistically
signicantly better) than phKT. There are similar cases for queryConcat. How do we explain these gaps? If these are indeed gaps, i.e., they are true statistical dierences, then we
may consider as an explanation that adding information may also be increasing the amount
of noise in our representations. Consider, for example, that keywords from a xed list can
often be a poor match to the real subject matter of a paper. In these special cases, the use
of keywords as a source could lead to a degradation in retrieval performance.
Analogous to our analysis of the paper sources, we can now examine any column of
Table 1 or Table 2 and measure the eect of adding more information to the reviewer representation. For queryConjunct, a majority of the time, we nd that queries incorporating
more information (ph entries) perform statistically signicantly better than single source
queries (p and h entries).
So far, we have illustrated how we can move across groups of columns or blocks of
rows in the source combinations matrix, adding sources to the queries until there is no
improvement. How signicant are the gains that we can realize when we do this? Focusing
on queryConjunct, for every reviewer source, we consider queries that contained data from
a single paper source and had the lowest precision. We pair each of these queries with the
corresponding query in the same row of the matrix that made use of all of the paper sources
and report the resulting improvement in precision in Table 3. For the Top 10 results, we
note that in the best case, we can gain an improvement in precision of 58% when going from
a single-source to a multi-source query, and for the Top 30 results, we gain an improvement
5. All comparisons between two queries Qi and Qj were made using a two-tailed sign test. Specically, we
consider the set Rij of reviewers r for which precision(Qi ; r) 6= precision(Qj ; r) and then estimate the
probability
pij = P rob(precision(Qi ; r ) > precision(Qj ; r ) j r 2 Rij )
We consider a dierence to be statistically signicant if one can reject with condence > 0.95 the null
hypothesis that pij was generated by j Rij j independent ips of a fair coin.

245

Basu, Hirsh, Cohen, & Nevill-Manning

Single-Source Queries Improvement After Adding Two Sources
pT(Top 10)
41%
hA(Top 10)
58%
phK(Top 10)
23%
pT(Top 30)
31%
hA(Top 30)
37%
phK(Top 30)
14%

Table 3: A Comparision of Single-Source vs. Multi-Source Queries.
Methods(s)

Top 10 Top 30
kNN
0.294 0.154
ExtendedDirectBayes 0.300 0.129

Table 4: Average Precision Scores at Top 10 and Top 30 Papers Returned using Collaborative Filtering Methods.
of 37%. These results do support our intuitions that by incorporating more information in
our queries, the quality of the retrieval results improves. Since we have a dierent paper
source for the single-source queries in each row of Table 3, we also note that the impact of
any given paper source is dependent on the reviewer representation that we use.
Can we still come up with an assessment of which sources are signicant for the conference reviewing task? For queryConjunct, we present a series of gures (Figure 2 to Figure 6)
that illustrate the impact of each source by plotting precision values of queries that exclude
the source along the x-axis and precision values of queries that include the source along the
y-axis (for both N = 10 and N = 30). If a point falls on the x = y line, then the queries
have exactly the same performance | the choice of source is irrelevant. All points that fall
in the area above the x = y line mark those queries that had higher precision compared to
their query counterparts which did not contain the source.
By simply counting the number of times the queries that include a source outperform
the queries that did not include the source, we have one way of ranking the sources in
decreasing order of importance. In this case, queries that include the abstract source for
papers and the home page source for reviewers have the highest rates of success (when
compared to the other information sources for papers and reviewers, respectively).
Now, the natural question to ask is whether the trends that we noticed for queryConjunct
also hold for queryConcat. The answer is no, which also means that queryConcat does not
give us a denitive answer to the question of whether more information is really better.
Just as we have noticed that query performance is linked to both the reviewer and paper
sources, we also nd that it is linked to the query expansion method.
246

Technical Paper Recommendation: A Study in Combining Multiple Information Sources

Precision at Top 10 and Top 30
0.4
’A.dat’
x

0.38
0.36
0.34

Queries with Abstract

0.32
0.3
0.28
0.26
0.24
0.22
0.2
0.18
0.16
0.15

0.2

0.25
0.3
Queries without Abstract

0.35

0.4

Figure 2: The Role of Abstract as an Information Source

Precision at Top 10 and Top 30
0.4
’K.dat’
x

0.38
0.36

Queries with Keywords

0.34
0.32
0.3
0.28
0.26
0.24
0.22
0.2
0.18
0.16
0.15

0.2

0.25
0.3
Queries without Keywords

0.35

0.4

Figure 3: The Role of Keywords as an Information Source

247

Basu, Hirsh, Cohen, & Nevill-Manning

Precision at Top 10 and Top 30
0.4
’T.dat’
x

0.38
0.36
0.34

Queries with Titles

0.32
0.3
0.28
0.26
0.24
0.22
0.2
0.18
0.16
0.15

0.2

0.25
0.3
Queries without Titles

0.35

0.4

Figure 4: The Role of Title as an Information Source

Precision at Top 10 and Top 30
0.4
’P.dat’
x

0.38
0.36

Queries with Reviewer Papers

0.34
0.32
0.3
0.28
0.26
0.24
0.22
0.2
0.18
0.16
0.15

0.2

0.25
0.3
Queries without Reviewer Papers

0.35

0.4

Figure 5: The Role of Papers as an Information Source

248

Technical Paper Recommendation: A Study in Combining Multiple Information Sources

Precision at Top 10 and Top 30
0.4
’H.dat’
x

0.38

Queries with Reviewer Homepages

0.36
0.34
0.32
0.3
0.28
0.26
0.24
0.22
0.2
0.18
0.16
0.15

0.2

0.25
0.3
Queries without Reviewer Homepages

0.35

0.4

Figure 6: The Role of Homepage as an Information Source
In Table 4, we show the results of the collaborative ltering runs. We report averages
of the precision values computed for the Top N (for N =10 and N =30) papers returned
based on the reviewer recommendation lists. Since we stop recommending after we have
exhausted the set of positive examples for a reviewer, the reviewer recommendation lists are
of varying lengths. In those cases where the size of the list is less than N , we still compute
precision at Top N , assuming the remaining items are incorrect predictions. Both methods
for collaborative ltering exceed random selection by a signicant margin.
For Top 10 papers returned, the collaborative recommendation methods are competitive with the best performance of queryConcat. This is already an interesting observation,
since not only do the methods dier, but each method is using dierent data to make recommendations. We can further state than when we use queryConjunct and all information
sources to recommend 10 papers, on average almost four papers coincide with the reviewer's
preferences. Compared to random selection, collaborative ltering, and queryConcat, this
method yields more papers of interest to reviewers.
In summary, what have we learned from our experiments? We have found that within
the context of peer reviewing of papers, we can make the recommendation process less
\people intensive". Most recommendation systems require their users to provide samples
of their preferences which are then used to extrapolate future behaviors. Collaborative
methods go even further by using preference information across multiple users to predict
the preferences of a single user. By automatically collecting reviewer interest information
from Web sources and precomputing similarities between these proles and paper content,
we require less input from the reviewers. Furthermore, our content-based retrieval methods
can exceed the performance of collaborative methods in this task.
We also believe that our recommendation framework provides an extensible way of
formulating queries that provides more control over the information content of the queries.
We can control not only how much information we include in our queries but also how we
incorporate that information. As new data become available, we can evaluate which data
249

Basu, Hirsh, Cohen, & Nevill-Manning

sources and/or combinations are more eective, thereby ne-tuning the query formulation
process.

6. Related Work on Query Reformulation

Since our work on expanding queries using WHIRL can be viewed as a type of query
reformulation, we review some related work in the information retrieval community on this
topic. Salton (1989) describes the process of query reformulation as that of \moving" a
given query towards the relevant items and away from the nonrelevant ones. In the context
of the vector-space model of retrieval, this means that given a query expression of the form
(Salton, 1997):
Q 0 = (q 1 ; q 2 ; :::; qt)

where q is a number between 0 and 1 representing the weight assigned to term , we want
to arrive at a new query expression:
i

i

Q 0 = (q 1 ; q 2 ; :::; qt)
0

0

0

0

such that the weights are adjusted so that new terms can be introduced into the vector
representation, while other terms can eectively be removed by reducing their respective
weights to 0.
Harman (1992) describes the operational procedure underlying this process as the merging of document and query vectors. More specically, this means that query terms not in
the original query but appearing in the relevant documents are added to the initial query
expression. The expansion occurs using both positive and negative weights, depending on
whether the terms appears in a relevant or non-relevant document.
The above description assumes that we have relevance judgments for documents that
the system can return. Practically speaking, this type of information is hard to come by.
Therefore, people have been seeking to compensate for this lack of information by expanding
queries using a variety of techniques such as the use of thesauri and relevance feedback. In
the latter case, query reformulation is part of an iterative and interactive process whereby
users are presented with the results of a retrieval and are asked to supply feedback regarding
the relative importance of the results.
Comparing our approach with these methods of query reformulation, we make a couple of
observations. First, query reformulation can be driven by knowledge we have precomputed
about a data colection. Given that entities such as papers have abstracts, keywords, and
titles, does it make sense to vary the amount of this information in the queries? If we have
the equivalent of Table 3 for a collection, we can do a table lookup at run time to determine
which formulations are the most promising.
We note that the way we construct queries for the queryConjunct method combines
aspects of both the Boolean and vector-space models of query formulation into a hybrid approach. In the case of Boolean queries, relevance feedback can lead to new query expressions
consisting of term conjuncts such as (Salton, 1997):
(Term AND Term AND Term )
Notice that if we replace any Term with Vector in the above expression, we have a
query expression formulated according to our queryConjunct method.
i

j

i

k

i

250

Technical Paper Recommendation: A Study in Combining Multiple Information Sources

7. Conclusions

In this paper, we have shown that we can collect information about reviewers automatically
from the Web, and we can use it as a part of a recommendation framework to route papers
to reviewers. We treat the problem as one of decomposing reviewer interest and paper
contents into information sources, and then of combining the information sources using
dierent query formulations. In our experiments, we compared two ways of formulating
queries using content-based information retrieval and one collaborative approach. We have
found that the recommendation algorithm using conjunctive queries outperforms the other
approaches. We have also looked at using dierent subsets of the information sources in our
algorithms, and in the case of our optimal algorithm, we found that using more information
generally lead to better performance.
In a practical setting, the recommendation method of choice is likely to depend on a
number of factors ranging from the availability of information to ease of use. On the one
hand, our framework provides a more exible alternative to simple keyword-based searches
and a less intrusive alternative to collaborative methods. On the other hand, our methods
assume that we can obtain data that are reliable, accurate, and timely. Based on our results,
we are optimistic that the Web can provide credible information sources that can be used
successfully in the recommendation process.

8. Acknowledgments

We extend our thanks to AAAI, the AAAI reviewers, the AAAI paper authors, members
of the Rutgers Machine Learning Research Group, and the reviewers of this paper for their
inputs in this work.
We note that the following are the property of their respective companies as listed:
WHIRL (AT&T Labs { Research), LSI (Telcordia Technologies, Inc.).

References

Basu, C., Hirsh, H., & Cohen, W. (1998). Recommendation as classication: Using social
and content-based information in recommendation. In Proceedings of AAAI-98.
Cohen, W. (1998a). Integration of heterogeneous databases without common domains using
queries based on textual similarity. In Proceedings of ACM SIGMOD-98.
Cohen, W. (1998b). The whirl approach to information integration. In IEEE Intelligent
Systems. IEEE Press.
Cohen, W., & Fan, W. (2000). Web-collaborative ltering: Recommending music by crawling the web. In Proceedings of WWW-2000.
Cohen, W., & Hirsh, H. (1998). Joins that generalize: Text classication using whirl. In
Proceedings of KDD-98.
Dillon, M., & Desper, J. (1980). Automatic relevance feedback in boolean retrieval systems.
Journal of Documentation, 36.
251

Basu, Hirsh, Cohen, & Nevill-Manning

Dumais, S., & Nielsen, J. (1992). Automating the assignment of submitted manuscripts to
reviewers. In Proceedings of ACM SIGIR-92.
Geller, J. (1997). Challenge: How ijcai 1999 can prove the value of ai by using ai. In
Proceedings of IJCAI-97.
Gupta, D., Digiovanni, M., Narita, H., & Goldberg, K. (1999). Jester 2.0: A new lineartime collaborative ltering algorithm applied to jokes. In Workshop on Recommender
Systems at ACM SIGIR-99.
Harman, D. (1992). Relevance feedback revisited. In Proceedings of ACM SIGIR-92.
Hill, W., Stead, L., Rosenstein, M., & Furnas, G. (1995). Recommending and evaluating
choices in a virtual community of use. In Proceedings of CHI-95.
Konstan, J., Miller, B., Maltz, D., Herlocker, L., Gordon, L., & Riedl, J. (1997). Grouplens:
Applying collaborative ltering to usenet news.. Vol. 40.
Nevill-Manning, C., Reed, T., & Witten, I. (1998). Extracting text from postscript. Software
Practice and Experience, 28 (5).
Pazzani, M., & Billsus, D. (1997). Learning and revising user proles: The identication of
interesting web sites. Machine Learning, 27, 313{331.
Porter, M. (1980). An algorithm for sux stripping. Program, 14, 130{137.
Salton, G. (1989). Automatic Text Processing. Addison Wesley.
Salton, G. (1997). Improving retrieval performance by relevance feedback. In Readings in
Information Retrieval.
Shakes, J., Langheinrich, M., & Etzioni, O. (1997). Dynamic reference sifting: a case study
in the homepage domain. In Proceedings of WWW-97.
Shardanand, U., & Maes, P. (1995). Social information ltering: Algorithms for automating
\word of mouth". In Proceedings of CHI-95.
Yarowsky, D., & Florian, R. (1999). Taking the load o the conference chairs: towards a
digital paper-routing assistant. In Proceedings of the 1999 Joint SIGDAT Conference
on Empirical Methods in NLP and Very-Large Corpora.

252

Journal of Articial Intelligence Research 14 (2001) 53-81

Submitted 8/00; published 3/01

Conict-Directed Backjumping Revisited
Xinguang Chen

xinguang@cs.ualberta.ca

Peter van Beek

vanbeek@uwaterloo.ca

Department of Computing Science, University of Alberta
Edmonton, Alberta, Canada T6G 2H1
Department of Computer Science, University of Waterloo
Waterloo, Ontario, Canada N2L 3G1

Abstract

In recent years, many improvements to backtracking algorithms for solving constraint
satisfaction problems have been proposed. The techniques for improving backtracking algorithms can be conveniently classied as look-ahead schemes and look-back schemes. Unfortunately, look-ahead and look-back schemes are not entirely orthogonal as it has been
observed empirically that the enhancement of look-ahead techniques is sometimes counterproductive to the eects of look-back techniques. In this paper, we focus on the relationship
between the two most important look-ahead techniques|using a variable ordering heuristic and maintaining a level of local consistency during the backtracking search|and the
look-back technique of conict-directed backjumping (CBJ). We show that there exists a
\perfect" dynamic variable ordering such that CBJ becomes redundant. We also show
theoretically that as the level of local consistency that is maintained in the backtracking
search is increased, the less that backjumping will be an improvement. Our theoretical
results partially explain why a backtracking algorithm doing more in the look-ahead phase
cannot benet more from the backjumping look-back scheme. Finally, we show empirically
that adding CBJ to a backtracking algorithm that maintains generalized arc consistency
(GAC), an algorithm that we refer to as GAC-CBJ, can still provide orders of magnitude
speedups. Our empirical results contrast with Bessiere and Regin's conclusion (1996) that
CBJ is useless to an algorithm that maintains arc consistency.

1. Introduction

Constraint satisfaction problems (CSPs) are a generic problem solving framework. A constraint satisfaction problem consists of a set of variables, each associated with a domain of
values, and a set of constraints. Each of the constraints is expressed as a relation, dened
on some subset of the variables, denoting the consistent value assignments that satisfy the
constraint. A solution to a CSP is an assignment of a value to every variable, in such a way
that every constraint is satised.
Constraint satisfaction problems are usually solved by search methods, among which
the backtracking algorithm and its improvements are widely used. The techniques for
improving backtracking algorithms can be conveniently classied as look-ahead schemes
and look-back schemes (Dechter, 1992). Look-ahead schemes are invoked whenever the
algorithm is preparing to extend the current partial solution. Look-ahead schemes include
the functions that choose the next variable to be instantiated, choose the next value to
give to the current variable, and reduce the search space by maintaining a certain level of
local consistency during the search (e.g., Bacchus & van Run, 1995; Bessiere & Regin, 1996;
c 2001 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Chen & van Beek

Haralick & Elliott, 1980; McGregor, 1979; Nadel, 1989; Sabin & Freuder, 1994). Lookback schemes are invoked whenever the algorithm encounters a dead-end and prepares for
the backtracking step. Look-back schemes include the functions that decide how far to
backtrack by analyzing the reasons for the dead-end (backjumping) and decide what new
constraints to record so that the same conicts do not arise again later in the search (e.g.,
Bruynooghe, 1981; Dechter, 1990; Frost & Dechter, 1994; Gaschnig, 1978; Prosser, 1993b;
Schiex & Verfaillie, 1994).
A backtracking algorithm can be a hybrid of both look-ahead and look-back schemes
(Prosser, 1993b). In this paper, we focus on the relationship between the two most important look-ahead techniques|using a variable ordering heuristic and maintaining a level of
local consistency during the backtracking search|and the look-back technique of conictdirected backjumping (CBJ) (Prosser, 1993b). Unfortunately, these look-ahead and lookback schemes are not entirely orthogonal as it can be observed in previous experimental
work that as the level of consistency that is maintained in the backtracking search is increased and as the variable ordering heuristic is improved, the eects of CBJ are diminished
(Bacchus & van Run, 1995; Bessiere & Regin, 1996; Prosser, 1993a, 1993b). For example, it
can be observed in Prosser's (1993b) experiments that, given a static variable ordering, increasing the level of local consistency maintained from none to the level of forward checking,
diminishes the eects of CBJ. Bacchus and van Run (1995) observe from their experiments
that adding a dynamic variable ordering (an improvement over a static variable ordering)
to a forward checking algorithm diminishes the eects of CBJ. In their experiments the
eects are so diminished as to be almost negligible and they present an argument for why
this might hold in general. Bessiere and Regin (1996) observe from their experiments that
simultaneously increasing the level of local consistency even further to arc consistency and
further improving the dynamic variable ordering heuristic diminishes the eects of CBJ
so much that, in their implementation, the overhead of maintaining the data structures for
backjumping actually slows down the algorithm. They conjecture that when arc consistency
is maintained and a good variable ordering heuristic is used, \CBJ becomes useless".
In this paper, we present theoretical results that deepen our understanding of the relationship between look-ahead techniques and the CBJ look-back technique. We show that
there exists a \perfect" dynamic variable ordering for the chronological backtracking algorithm such that CBJ becomes redundant. The more that a variable ordering heuristic is
consistent with the \perfect" heuristic, the less chance CBJ has to reduce the search eort.
We also show that CBJ and an algorithm that maintains strong k-consistency in the backtracking search are incomparable in that each can be exponentially better than the other.
This result is rened by introducing the concept of backjump level in the execution of a
backjumping algorithm and showing that an algorithm that maintains strong k-consistency
never visits more nodes than a backjumping algorithm that is allowed to backjump at most
k levels. Thus, as the level of local consistency that is maintained in the backtracking search
is increased, the less that backjumping will be an improvement. Together, our theoretical
results partially explain why a backtracking algorithm doing more in the look-ahead phase
cannot benet more from the backjumping look-back scheme. Our results also extend the
partial ordering of backtracking algorithms presented by Kondrak and van Beek (1997) to
include backtracking algorithms and their CBJ hybrids that maintain levels of local con54

Conflict-Directed Backjumping Revisited

sistency beyond forward checking, including the important algorithms that maintain arc
consistency.
We also present empirical results that show that, although the eects of CBJ may
be diminished, adding CBJ to a backtracking algorithm that maintains generalized arc
consistency (GAC), an algorithm that we refer to as GAC-CBJ, can still provide orders
of magnitude speedups. Our empirical results contrast with Bessiere and Regin's (1996)
conclusion that CBJ is useless to an algorithm that maintains arc consistency.

2. Background

In this section, we formally dene constraint satisfaction problems, and briey review local
consistency and the search tree explored by a backtracking algorithm.

2.1 Constraint Satisfaction Problems
Denition 1 (CSP) An instance of a constraint satisfaction problem is a tuple P =
(V ; D; C ), where1
 V = fx1; : : :; xng is a nite set of n variables,
 D = fdom(x1); : : :; dom(xn)g is a set of domains. Each variable x 2 V is associated with a nite domain of possible values, dom(x). The maximum domain size
maxx2V jdom(x)j is denoted by d,

 C = fC1; : : :; Cmg is a nite set of m constraints or relations. Each constraint C 2 C
is a pair (vars(C ); rel(C )), where

{ vars(C ) = fxi1 ; : : :; xiri g is an ordered subset of the variables, called the con-

straint scope or scheme, the size of vars(C ) is known as the arity of the constraint. If the arity of the constraint is equal to 2, it is called a binary constraint.
A non-binary constraint is a constraint with arity greater than 2. The maximum
arity of the constraints in C , maxC 2C jvars(C )j, is denoted by r,
{ rel(C ) is a subset of the Cartesian product dom(xi1 )  dom(xiri ) that species
the allowed combinations of values for the variables in vars(C ). An element of
the Cartesian product dom(xi1 )      dom(xiri ) is called a tuple on vars(C ).
Thus, rel(C ) is often regarded as a set of tuples over vars(C ).

In the following, we assume that for any variable x 2 V , there is at least one constraint
C 2 C such that x 2 vars(C ). By denition, a tuple over a set of variables X = fx1; : : :; xkg
is an ordered list of values (a1 ; : : :; ak ) such that ai 2 dom(xi ), i = 1; : : :; k. A tuple over X
can also be regarded as a set of variable-value pairs fx1 a1 ; : : :; xk ak g. Furthermore,
a tuple over X can be viewed as a function t : X ! [x2X dom(x) such that for each variable
x 2 X , t[x] 2 dom(x). For a subset of variables X 0  X , we use t[X 0] to denote a tuple over
X 0 by restricting t over X 0. We also use vars(t) to denote the set of variables for tuple t.
1. Throughout the paper, we use n, d, m, and r to denote the number of variables, the maximum domain
size, the number of constraints, and the maximum arity of the constraints in the CSP, respectively.

55

Chen & van Beek

An assignment to a set of variables X is a tuple over X . We say an assignment t to X
is consistent with a constraint C if either vars(C ) 6 X or t[vars(C )] 2 rel(C ). A partial
solution to a CSP is an assignment to a subset of variables. We say a partial solution is
consistent if it is consistent with each of the constraints. A solution to a CSP is a consistent
partial solution over all the variables. If no solution exists, the CSP is said to be insoluble.
A CSP is empty if either one of its variables has an empty domain or one of its constraints
has an empty set of tuples. Obviously, an empty CSP is insoluble. Given two CSP instances
P1 and P2 , we say P1 = P2 if they have exactly the same set of variables, the same set of
domains and the same set of constraints; i.e., they are syntactically the same.

Denition 2 (projection) Given a constraint C and a subset of variables S  vars(C ),
the projection S C is a constraint, where vars(S C ) = S and rel(S C ) = ft[S ] j t 2
rel(C )g.
Denition 3 (selection) Given a constraint C and an assignment t to a subset of variables X  vars(C ), the selection tC is a constraint, where vars(t C ) = vars(C ) and
rel(tC ) = fs j s[X ] = t and s 2 rel(C )g.
2.2 Local Consistency

An inconsistency is a consistent partial solution over some of the variables that cannot be
extended to additional variables and so cannot be part of any global solution. If we are
using a backtracking search to nd a solution, such an inconsistency can lead to a dead end
in the search. This insight has led to the denition of properties that characterize the level
of consistency of a CSP and to the development of algorithms for achieving these levels
of consistency by removing inconsistencies (e.g., Mackworth, 1977a; Montanari, 1974), and
to eective backtracking algorithms for nding solutions to CSPs that maintain a level of
consistency during the search (e.g., Gaschnig, 1978; Haralick & Elliott, 1980; McGregor,
1979; Sabin & Freuder, 1994).
Mackworth (1977a) denes three properties of binary CSPs that characterize local consistencies: node, arc, and path consistency. Mackworth (1977b) generalizes arc consistency
to non-binary CSPs.

Denition 4 (arc consistency) Given a constraint C and a variable x 2 vars(C ), a
value a 2 dom(x) is supported in C if there is a tuple t 2 rel(C ), such that t[x] = a. t
is then called a support for fx ag in C . C is arc consistent if for each of the variables
x 2 vars(C ), and each of the values a 2 dom(x), fx ag is supported in C . A CSP is arc

consistent if each of its constraints is arc consistent.
Freuder (1978) generalizes node, arc, and path consistency, to k-consistency.

Denition 5 (k-consistency) A CSP is k-consistent if and only if given any consistent
partial solution over k , 1 distinct variables, there exists an instantiation of any kth variable
such that the partial solution plus that instantiation is consistent. A CSP is strongly kconsistent if it is j -consistent for all 1  j  k.
56

Conflict-Directed Backjumping Revisited

For binary CSPs, node, arc and path consistency correspond to one-, two- and threeconsistency, respectively. However, the denition of k-consistency does not require the CSP
to be binary and arc consistency is not the same as two-consistency for non-binary CSPs.
A strongly n-consistent CSP has the property that any consistent partial solution can be
successively extended to a full solution of the CSP without backtracking.

2.3 Search Tree and Backtracking Algorithms

The idea of a backtracking algorithm is to extend partial solutions. At each stage, an uninstantiated variable is selected and assigned a value from its domain to extend the current
partial solution2 . Constraints are used to check whether such an extension may lead to a
possible solution of the CSP and to prune subtrees containing no solutions based on the
current partial solution. During a backtracking search, the variables can be divided into
three sets: past variables (already instantiated), current variable (now being instantiated),
and future variables (not yet instantiated). A dead-end occurs when all values of the current variable are rejected as not leading to a full solution. In such a case, some instantiated
variables become uninstantiated ; i.e., they are removed from the current partial solution.
This process is called backtracking. If only the most recently instantiated variable becomes
uninstantiated then it is called chronological backtracking ; otherwise, it is called backjumping. A backtracking algorithm terminates when all possible assignments have been tested
or a certain number of solutions have been found.
A backtracking search may be seen as a search tree traversal. In this approach we
identify tuples (assignments of values to variables) with nodes: the empty tuple is the root
of the tree, the rst level nodes are 1-tuples (representing an assignment of a value to a
single variable), the second level nodes are 2-tuples, and so on. The levels closer to the
root are called shallower levels and the levels farther from the root are called deeper levels.
Similarly, the variables corresponding to these levels are called shallower and deeper. We
say that a backtracking algorithm visits a node in the search tree if at some stage of the
algorithm's execution the current partial solution identies the node. The nodes visited
by a backtracking algorithm form a subset of all the nodes belonging to the search tree.
We call this subset, together with the connecting edges, the backtrack tree generated by a
backtracking algorithm.
The backtracking algorithm conict-directed backjumping (CBJ) (Prosser, 1993b) maintains a conict set for every variable. Every time an instantiation of the current variable
xi is in conict with an instantiation of some past variable xh , the variable xh is added to
the conict set of xi . When there are no more values to be tried for the current variable xi ,
CBJ backtracks to the deepest variable xh in the conict set of xi . At the same time, the
variables in the conict set of xi , with the exception of xh , are added to the conict set of
xh , so that no information about conicts is lost.
Throughout the paper we refer to the following backtracking algorithms (see Kondrak
& van Beek, 1997; Prosser, 1993b for detailed explanations and examples of most of these
algorithms): chronological backtracking (BT), backjumping (BJ) (Gaschnig, 1978), conictdirected backjumping (CBJ) (Prosser, 1993b), forward checking (FC) (Haralick & Elliott,
1980; McGregor, 1979), forward checking and conict-directed backjumping (FC-CBJ)
2. Throughout this paper, we assume that a static value ordering is used in the backtracking search.

57

Chen & van Beek

(Prosser, 1993b), maintaining arc consistency (MAC) (Gaschnig, 1978; Sabin & Freuder,
1994), and maintaining arc consistency and conicted-directed backjumping (MAC-CBJ)
(Prosser, 1995).

3. Variable Ordering Heuristics and Backjumping

In this section, we present theoretical results that deepen our understanding of the relationship between the look-ahead technique of using a variable ordering heuristic and the
look-back technique of CBJ.
In previous work, Kondrak and van Beek (1997) show that, given the same deterministic
static or dynamic variable ordering heuristic, CBJ never visits more nodes than BT. Bacchus
and van Run (1995) show that BJ, a restricted version of CBJ, visits exactly the same nodes
as BT if the fail-rst dynamic variable ordering heuristic is used. Previous empirical work
shows that the number of nodes that CBJ saves depends on the variable ordering heuristic
used (Bacchus & van Run, 1995; Bessiere & Regin, 1996; Prosser, 1993b).
We show that, given a CSP and a variable ordering for CBJ, there exists a \perfect"
variable ordering for the chronological backtracking algorithm (BT) such that BT never
visits more nodes than CBJ. The more that a variable ordering heuristic is consistent with
the \perfect" heuristic, the less chance CBJ has to reduce the search eort.
We rst consider the case of insoluble CSPs. When CBJ is applied to an insoluble CSP,
it always backjumps from a dead-end state; i.e., it does not terminate or backjump from a
situation in which a solution of the CSP was found.

Lemma 1 Given an insoluble CSP and a variable ordering for CBJ, there exists a variable

ordering for BT such that BT never visits more nodes than CBJ to show that no solution
exists.

Proof In the backtrack tree generated by CBJ under the variable ordering, let the last

backjump that terminates the execution of CBJ be from variable xj to the root of the
backtrack tree. We choose xj to be the rst variable for BT. For each value a in the domain
of xj , if the current node in the backtrack tree for CBJ is consistent (not a leaf node), the
next variable chosen to be instantiated after assigning a to xj is the variable that backjumps
to xj and causes the assignment xj a to be revoked. The entire variable ordering for
BT can be worked out in a similar, recursive manner. For this variable ordering for BT to
be well-dened, it remains to show that if the current node in the backtrack tree for CBJ
is inconsistent (a leaf node), the corresponding node in the backtrack tree for BT is also
inconsistent (and therefore no next variable needs to be chosen). We show that the variables
skipped in the variable ordering constructed for BT are irrelevant to the dead-end states
encountered by CBJ. Suppose at a stage we have ordered the variables to be instantiated
for BT as xj1 ; : : :; xjk , and for value a 2 dom(xjk ) we choose the next variable xjk+1 as
the variable which backjumps to the current variable xjk in the CBJ backtrack tree. We
prove by induction that the conict set of xjk+1 used in the backjumping is subsumed by
fxj1 ; : : :; xjk g. k = 1 is the case of the last backjump that terminates the execution of CBJ.
The hypothesis is true because the conict set of xj1 is an empty set. Suppose it is true for
the case of k > 1. Because xjk+1 backjumps to xjk , the conict set of xjk+1 is merged in the
conict set of xjk . From the inductive assumption, the conict set of xjk is subsumed by
58

Conflict-Directed Backjumping Revisited

fxj1 ; : : :; xjk,1 g, and thus the conict set of xjk+1 is subsumed by fxj1 ; : : :; xjk g. Therefore,
the hypothesis holds for the case of k + 1. If CBJ nds out that instantiation xjk a is
inconsistent with the assignments of some past variables which are added to the conict
set of xjk , BT is also able to nd out the inconsistency because the conict set of xjk is
subsumed by fxj1 ; : : :; xjk,1 g. Thus, the variable ordering for BT is well-dened.
For soluble CSPs, we further distinguish the problem between nding one solution and
nding all solutions.

Lemma 2 Given a CSP and a variable ordering for CBJ to nd the rst solution, there

exists a variable ordering for BT such that BT never visits more nodes than CBJ to nd
the rst solution.

Proof Without loss of generality, let fx1 a1; : : :; xn an g be the rst solution found. A

variable ordering for BT can be constructed in the following way. The rst variable chosen
for BT is x1 as it is the rst variable in the path from the root to the solution in the CBJ
backtrack tree. Because we assume a static value ordering in the backtracking search, all
values in the domain of x1 that precede value a1 must be rejected by CBJ and BT before
value a1 is used to instantiate x1 . Furthermore, because fx1 a1 ; : : :; xn an g is the
rst solution encountered by CBJ under the above variable ordering and value ordering,
the instantiation of x1 with a value preceding a1 leads to an insoluble subproblem and
eventually CBJ backjumps from a deeper variable to x1 to revoke that assignment. Note
that x1 cannot be skipped by a backjump from a deeper variable because x1 is on the rst
level of the search tree and there is a solution for the CSP. Assigning x1 with each of the
values that precede a1 in its domain leads to insoluble subproblems and the instantiation
order for BT can be arranged as in Lemma 1. Whenever xk is instantiated with value ak ,
xk+1 is chosen to be the next variable, as it follows xk in the path from the root to the
solution in the CBJ backtrack tree. Again, all values in the domain of xk+1 that precede
ak+1 in the value ordering must be rejected by CBJ and BT before ak+1 is assigned to
xk+1. The instantiation of xk+1 with each of these values leads to an insoluble subproblem
and eventually CBJ backjumps from a deeper variable to xk+1 . Similarly, xk+1 cannot
be skipped by a backjump from a deeper variable because otherwise at least one of the
assignments to x1 ; : : :; xk must be changed so that fx1 a1 ; : : :; xn an g is not the
rst solution encountered by CBJ. In each of these insoluble subproblems, the instantiation
order for BT can be arranged as in Lemma 1. Finally, xn is instantiated with an and BT
nds the solution.
When CBJ is used to nd all solutions, special steps must be taken to handle the conict sets. The problem here is that the conict sets of CBJ are meant to indicate which
instantiations are responsible for some previously discovered inconsistency. However, after
a solution is found, conict sets cannot always be interpreted in this way. It is the search
for other solutions, rather than an inconsistency, that causes the algorithm to backtrack.
We need to dierentiate between two causes of CBJ backtracks: (1) detecting an inconsistency, and (2) searching for other solutions. In the latter case, the backtrack must be
always chronological; that is, to the immediately preceding variable. A simple solution is to
remember the number of solutions found so far when a variable is chosen to be instantiated,
59

Chen & van Beek

and later when a dead-end state is encountered at this level, we compare the recorded number with the current number of solutions. A dierence indicates that some solutions have
been found in this interval of search, and forces the algorithm to backtrack chronologically.
Otherwise the algorithm performs a normal backjumping by analyzing the conict set of
the current variable.

Lemma 3 Given a CSP and a variable ordering for CBJ to nd all solutions, there exists
a variable ordering for BT such that BT never visits more nodes than CBJ to nd all
solutions.
Proof Let the rst solution found by CBJ be fx1

a1; : : :; xn an g in the order of
x1 ; : : :; xn. We rst construct the variable ordering for BT as it is applied to nd the rst

solution. However, because BT follows a strict chronological backtracking, it will inevitably
visit all the nodes fx1 a1 ; : : :; xj ,1 aj ,1 ; xj a0j g, where 1  j  n and a0j comes
after aj in the domain of xj . If CBJ skips any of these nodes, for example, from a deeper
level variable xh to xj ,1 , while the instantiations of x1 ; : : :; xj have not been changed, BT
will possibly visit more nodes than CBJ. We will show this cannot happen by induction
on the distance between the current level j and the deepest level n. After CBJ has found
the solution at level n, it will try other values for xn and eventually backtrack to xn,1 . So
the nodes at level n cannot be skipped. Suppose it is true for the case of level j + 1 and
now we consider the case of level j . Because xj aj was not skipped in the backjumping,
if aj is the last value in its domain, CBJ will backtrack to xj ,1 because the number of
solutions has been changed. So it is true for the case of j . Otherwise CBJ will change
the instantiation of xj to the next value in its domain. Let the current partial solution be
t = fx1 a1; : : :; xj,1 aj,1; xj a0j g. If the subtree rooted by t contains solutions,
from the inductive hypothesis, CBJ will not skip this node because it is on level j . If
the subtree rooted by t contains no solution, there exists a backjump from a deeper level
variable xh to escape this subtree. Could it jump beyond xj such that t is skipped? In that
case, the conict set of xh is subsumed in fx1 ; : : :; xj ,1 g. From the denition of conict
set, we know that the current instantiations of the variables in the conict set cannot lead
to a solution. However the current instantiations of fx1 ; : : :; xj ,1 g do lead to a solution,
fx1 a1; : : :; xn ang. That is a contradiction. So the conict set of xh must contain
xj and thus the node t at level j cannot be skipped. After all the values in the domain
of xj have been tried, CBJ will chronologically backtrack to xj ,1 because the number of
solutions has changed. Thus, xj ,1 aj ,1 will not be skipped. The hypothesis is true for
the case of any level j . Then we construct the variable ordering for BT in the following way:
If the current partial solution t = fx1 a1 ; : : :; xj ,1 aj ,1 ; xj a0j g cannot be extended
to a solution, we construct a variable ordering for the insoluble subproblem. If t can be
extended to a solution, we construct a variable ordering for BT as the case of nding the
rst solution in this subproblem, and recursively apply the above steps until a backjump
to level xj changes the instantiation xj a0j . Under the above variable ordering, BT will
never visit more nodes than CBJ.

Theorem 4 Given a CSP and a variable ordering for CBJ, there exists a variable ordering

for BT such that BT never visits more nodes than CBJ in solving the CSP.
60

Conflict-Directed Backjumping Revisited

x1 + x2  x3
x1 + x3 > x5 + 1
x2 , x4  x5
x1 ; :: : ;x5 2 f0; 1; 2g

x1

0

CBJ backtrack tree

x2

2

x3

x3

x3
3

x4

x4

x5

x4

x5

x5
4

x5

x5

x4

x5

x4

x4
5

p

p p
x1

x2

0

p p p

BT backtrack tree
2

x3

x3

x3
3

x5

x5

x5

x5

x5

x5
4

x4

x4

x4
5

p

p p

p p p

Figure 1: An illustration of the variable ordering constructed for BT from a CBJ backtrack
tree (for the CSP shown upper left).

Proof Follows from Lemmas 1, 2, and 3.
Example 1 Figure 1 shows the BT backtrack tree based on the variable ordering constructed
from the execution of CBJ to solve a CSP under a (hypothetical) dynamic variable ordering.
The rst solution found by CBJ is fx1 0; x2 0; x3 2; x5 0; x4 0g. Thus, BT
rst instantiates x1 and x2 to 0. The node fx1 0; x2 0; x3 0g and fx1 0; x2
0; x2 1g in the CBJ backtrack tree lead to insoluble subproblems. The variable ordering
for BT at each of these nodes is constructed as in the case of insoluble CSPs. For example,
in the CBJ backtrack tree, the last backjump to revoke the node fx1 0; x2 0; x3 0g
61

Chen & van Beek

is from x5 to x3 , so the next variable instantiated in BT at this node is x5 . Under such an
ordering, BT avoids instantiating x4 and visits fewer nodes than CBJ. Then BT instantiates
x3 to 2, x5 to 0, and x4 to 0, and nds the rst solution.
We have shown that there exists a \perfect" variable ordering such that CBJ becomes
redundant. Of course, the \perfect" ordering would not be known a priori, and in practice,
the primary goal in designing variable ordering heuristics is not to simulate the execution of
CBJ, but to reduce the size of the overall backtrack tree. As an example, the popular failrst heuristic selects as the next variable to be instantiated the variable with the minimal
remaining domain size (the size of the domain after removing values that are in conict
with past instantiations) as this can be shown to minimize the size of the overall tree under
certain assumptions. A secondary eect, however, is that variables that have conicts with
past instantiations are likely to be instantiated sooner, thus approximating the \perfect"
ordering and diminishing the eects of backjumping.

4. Maintaining Consistency and Backjumping

In this section, we present theoretical results that deepen our understanding of the relationship between the look-ahead technique of maintaining a level of local consistency during
the backtracking search and the look-back technique of CBJ.
In previous work, Kondrak and van Beek (1997) show that, given the same deterministic
static or dynamic variable ordering heuristic, CBJ never visits more nodes than BT and
FC-CBJ never visits more nodes than FC. Prosser (1993a) shows that the removal of an
inconsistent value from the domain of a variable can diminish the eects of CBJ and that
CBJ can visit fewer nodes than an algorithm that combines CBJ with the discovery and
removal of some inconsistent values. Previous empirical work shows that the number of
nodes that CBJ saves depends on the level of local consistency maintained (Bacchus & van
Run, 1995; Bessiere & Regin, 1996; Prosser, 1993b).
We extend the partial ordering of backtracking algorithms presented by Kondrak and
van Beek (1997) to include backtracking algorithms and their CBJ hybrids that maintain
levels of local consistency beyond forward checking, including the important algorithms that
maintain arc consistency. We show that CBJ and an algorithm that maintains strong kconsistency in the backtracking search are incomparable in that each can be exponentially
better than the other. This result is rened by using the concept of backjump level in
the execution of a backjumping algorithm and showing that an algorithm that maintains
strong k-consistency never visits more nodes than a backjumping algorithm that is allowed
to backjump at most k levels. Thus, as the level of local consistency that is maintained in
the backtracking search is increased, the less that backjumping will be an improvement.
In Section 4.1, we consider the backjumping algorithms and dene the series of algorithms BJk . In Section 4.2, we consider the look-ahead algorithms that maintain a level of
local consistency and dene the series of algorithms MCk . Finally, in Section 4.3, we consider the relationships between the backjumping and the look-ahead algorithms and their
hybrids. The reader who is not interested in the technical proofs of the results should jump
directly to this section.
62

Conflict-Directed Backjumping Revisited

x1

x1 + x2  x3
x1 + x3 > x5 + 1
x2 , x4  x5
x1 ; : : : ; x5 2 f0; 1; 2g

0

x2

1

x3

d=3
x4

x5

3

x5
d=1

x4

2

d=2
d=1

4
5

p p

Figure 2: An illustration of backjump levels in a CBJ backtrack tree (for the CSP shown
upper right).

4.1 Backjump Level and BJk

To analyze the inuence of the level of consistency on the backjumping, we need the notion of
backjump level. Informally, the level of a backjump is the distance, measured in backjumps,
from the backjump destination to the \farthest" dead-end.

Denition 6 (backjump level, Kondrak & van Beek, 1997) The denition of back-

jump level is recursive:
1. A backjump from variable xi to variable xh is of level 1 if it is performed directly from a
dead-end state in which every value of xi fails a consistency check.
2. A backjump from variable xi to variable xh is of level d  2, if all backjumps performed
to variable xi are of level less than d, and at least one of them is of level d , 1.

Example 2 Figure 2 shows the backjump levels in an example CBJ backtrack tree. There is

a one-level backjump from x5 to x3 because every value in the domain of x5 fails a consistency
check. Then CBJ nds two solutions for the problem and thus it chronologically backtracks
from x4 to x5 , and later to x3. The backjumps are of level one and two respectively. At last
there is a three-level backjump from x3 to x2 .
By classifying the backjumps performed by a backjumping algorithm into dierent levels,
we can now weaken CBJ into a series of backjumping algorithms which perform limited
levels of backjumps. BJk is a backjumping algorithm which is allowed to perform at most
k-level backjumps and it chronologically backtracks when a j -level backjump for j > k is
encountered3 . BJn is equivalent to CBJ, which performs unlimited backjumps, and BJ1 is
3. BJk is only of theoretical interest since in practice one would use CBJ rather than articially prevent
backjumping; i.e., one has to actually add code to prevent backjumping.

63

Chen & van Beek

equivalent to Gaschnig's (1978) BJ, which only does the rst level backjumps or backjumps
from dead-ends.
One may immediately conclude that BJk+1 is always better than BJk because it does one
more level of backjumps. However, to be more precise, we need to justify that a situation
where BJk may skip a node visited by BJk+1 does not exist. Similar to a result by Kondrak
and van Beek (Theorem 11, 1997), we can show that:

Theorem 5 BJk visits all the nodes that BJk+1 visits.
4.2 Maintaining Strong k-consistency (MCk )

Although backtracking algorithms that maintain arc consistency (or a truncated form of arc
consistency called forward checking) during the search have been well-studied, a backtracking algorithm that maintains strong k-consistency (MCk ) has never been fully addressed in
the literature. In order to study the relationship between BJk and MCk , we need to specify
precisely the MCk algorithms.
A generic scheme to maintain a level of local consistency in a backtracking search is to
perform at each node in the search tree one full cycle of consistency achievement. A consistency achievement algorithm is applied to the CSP which is induced by the current partial
solution. If, as a result, the induced CSP becomes empty after applying the consistency
algorithm, the instantiation of the current variable is a dead-end and should be rejected.
If the resulting CSP is not empty, the instantiation of the current variable is accepted and
the search continues to the next level.
The simplest form of an induced CSP is to restrict the domains of the instantiated
variables to have only one value and leave the set of constraints unchanged. This idea can
be traced back to Gaschnig's (1978) implementation of MAC, referred to as DEEB; i.e.,
Domain Element Elimination with Backtracking. However, in order to establish a relation
between BJk and MCk , we need a more restricted denition of the induced CSP, where the
constraints in the induced CSP are the selections and projections of the constraints in the
original CSP with respect to a partial solution.

Denition 7 (induced CSP) Given a consistent partial solution t of a CSP P , the CSP
induced by t, denoted by P jt , has all the variables in P except those instantiated by t,
the domain of each variable is the same as in P , and for each constraint C in P where
vars(C ) 6 vars(t), there is a constraint C 0 = vars(C),vars(t) (t[vars(C )\vars(t)](C )) in P jt.
Example 3 Consider the graph coloring problem and the corresponding CSP shown in
Figure 3. The original CSP has four variables, x1 ; : : :; x4, where x1 ; x2; x3 2 fr; g; bg and
x4 2 frg, and ve binary constraints, x1 =
6 x2, x1 =6 x3, x2 =6 x3, x2 =6 x4 and x3 =6 x4.
Given a partial solution t = fx1 g; x2 bg, the CSP induced by t, P jt , has two variables,
x3 and x4 , and the unary and binary constraints shown in Figure 4.
The maintaining strong k-consistency algorithm (MCk ) at each node in the backtrack
tree applies a strong k-consistency achievement algorithm to the CSP induced by the

current partial solution. Under such an architecture, FC can be viewed as maintaining
one-consistency, and for binary CSPs, MAC can be viewed as maintaining strong twoconsistency.
64

Conflict-Directed Backjumping Revisited

An algorithm enforcing strong k-consistency on a CSP instance should detect and remove
all those inconsistencies t = fx1 a1 ; : : :; xj aj ,1 g where 1  j  k and t is consistent
but cannot be consistently extended to some j th variable xj . To remove an inconsistency,
we make it inconsistent in the resulting CSP by removing values from domains, removing
inconsistent tuples from existing constraints, or adding new constraints to the CSP.
We use the concept of a k-proof-tree in characterizing the tuples that are removed by a
strong k-consistency achievement algorithm.

Denition 8 (k-proof-tree) A k-proof-tree for a partial solution t over at most k vari-

ables in a CSP is a tree in which each node is associated with a partial solution over at most
k variables in the CSP, where (1) the root of the k-proof-tree is associated with t, and (2)
each leaf node of the k-proof-tree is inconsistent in the CSP, and (3) each non-leaf node s
of the k-proof-tree is consistent in the CSP, and the children of s at the next level are nodes
s0 [ fx a1g; : : :; s0 [ fx alg such that s0  s, x 62 vars(s), and dom(x) = fa1 ; : : :; al g.

Example 4 Figure 3 shows a three-proof-tree (more than one is possible) for t = fx1 gg

in the given graph coloring problem. Each non-leaf node, including the root t, is consistent,
and each leaf node is inconsistent in the CSP. Since we have constructed a three-prooftree for the tuple t it cannot be part of a solution to the CSP and a strong 3-consistency
achievement algorithm would remove it.
In general, if a k-proof-tree for an inconsistency in a CSP can be constructed, an algorithm achieving strong k-consistency would deduce and remove the inconsistency. After
applying a strong k-consistency achievement algorithm on the CSP, if all the children of
a node in the k-proof-tree are inconsistent in the resulting CSP, that node is also inconsistent in the resulting CSP because one of its subtuples cannot be consistently extended
to an additional variable. Because all the leaf nodes in the k-proof-tree are inconsistent in
the original CSP, in a bottom-up manner the inconsistency of the root of the tree can be
deduced and removed from the resulting CSP. As a special case, if a k-proof-tree for the
empty inconsistency in a CSP can be constructed, the CSP will be empty after enforcing
strong k-consistency since every way to extend a variable has been shown to lead to an
inconsistency (and therefore, each value would be removed from the domain resulting in the
empty domain). On the other hand, after a CSP has been made strongly k-consistent, if a
partial solution t over at most k variables is inconsistent in the resulting CSP, a k-proof-tree
for t in the original CSP can be constructed. If t is inconsistent in the original CSP, the
k-proof-tree contains the single node t. Otherwise, t or a subtuple t0 of t cannot be extended
to an additional variable x; i.e., all the partial solutions t0 [ fx a1 g; : : :; t0 [ fx al g,
where dom(x) = fa1; : : :; alg, are inconsistent in the resulting CSP. Then we can construct
the k-proof-tree recursively for each of those inconsistencies. As a special case, if a CSP
is empty after enforcing strong k-consistency, a k-proof-tree for the empty inconsistency in
the original CSP can be constructed.
The following lemmas (Lemma 6 to Lemma 8) reveal some basic properties about induced CSPs and strong k-consistency enforcement on induced CSPs, which are used in the
proofs of Theorem 10 and Theorem 14.

65

Chen & van Beek

x2

6=
x1

r;g; b

6=

6=

r;g; b

6=

r

x4

x1

g

x1
x2

g
g

x1 ;x2 ; x3 2 fr; g;bg; x4 2 frg
C (x1 ;x2 ) : x1 6= x2
C (x1 ;x3 ) : x1 6= x3
C (x2 ;x3 ) : x2 6= x3
C (x2 ;x4 ) : x2 6= x4
C (x3 ;x4 ) : x3 6= x4

6=

r;g; b
x3

x1
x2

g
r

x2
x4

r
r

x1
x2
x3

g
b
r

x3
x4

r
r

x1
x2

g
b

x1
x2
x3

g
b
g

x1
x2
x3

g
b
b

Figure 3: A three-proof-tree for fx1 g g in the graph coloring problem. All leaf nodes in
the proof-tree are inconsistent in the CSP.

Lemma 6 Given a CSP P and two partial solutions t and t0 of P , if t  t0, then P jt0 =
(P jt )jt0,t .
Proof Clearly P jt0 and (P jt)jt0,t have the same set of variables and the same set of domains.

Because vars(C ),vars(t0 ) t0 C = vars(C ),vars(t0 ) t0 ,t (vars(C ),vars(t) t C ), for each constraint
C in P , the same selection and projection are made in P jt0 and (P jt )jt0,t. Therefore, P jt0
and (P jt )jt0,t have the same set of constraints.

Lemma 7 Given a CSP P and a consistent partial solution t of P , if (i) P is empty after
achieving strong k-consistency, or (ii) there exists a variable x 2 vars(t) such that the value
t[x] is removed from the domain of x when achieving strong k-consistency on P , then P jt
is empty after achieving strong k-consistency,

Proof We rst show that, given a consistent partial solution t of a CSP P , and a k-proof-

tree T for an inconsistency s in P , there is a corresponding well-dened k-proof-tree Tt for
the inconsistency s0 = s[vars(s) , vars(t)], in the induced CSP P jt , provided s does not
66

Conflict-Directed Backjumping Revisited

x3 2 fr; g; bg; x4 2 frg
C (x3 ) : f(r); (b)g
C (x3 ) : f(r); (g)g
C (x4 ) : f(r)g
C (x3 ; x4 ) : x3 6= x4


x3

r

x3
x4

r
r

x3

g

x3

b

Figure 4: Proof-tree for the empty inconsistency in the CSP P jt induced by t = fx1
g; x2 bg constructed from the proof-tree for fx1 g g in the CSP P shown in
Figure 3.
contain any assignments that are inconsistent with the assignments in t. Tt is constructed
from T in three steps (see Figure 4 for an example): (Step 1) Remove from T all nodes and
their descendants which contain assignments that are inconsistent with the assignments in
t. (Step 2) Replace each remaining node t0 in T with the node t00 = t0 [vars(t0) , vars(t)];
i.e., remove those variables which occur in t and thus do not occur in P jt . If t0 is not a
leaf node in T , then by denition t0 is consistent in P . It is possible that the corresponding
node t00 in Tt is inconsistent in P jt . Should this be the case, we make t00 into a leaf node by
removing all of its descendants. If t0 is a leaf node in T , then by denition t0 is inconsistent
in P ; i.e., there exists a constraint C in P such that t0 does not satisfy C . It must be
the case that vars(C ) 6 vars(t) (since vars(C )  vars(t) contradicts the fact that t0 is
inconsistent with C and t is consistent and therefore consistent with C , but t0 and t agree on
their assignments by Step 1). Hence, there is a corresponding constraint C 0 in P jt which is
the selection and projection of C in P . Now, it is easy to verify that the corresponding node
t00 is also inconsistent with C 0 and is therefore a well-dened leaf node. (Step 3) Remove all
subsumed nodes from T , where node t2 is subsumed by node t1 if t2 is a (necessarily only)
child of t1 and vars(t2)  vars(t1). All children of a subsumed node t2 are made children
of the parent of t2 .
Now, suppose P is empty after achieving strong k-consistency. Then there is a k-prooftree for the empty inconsistency in P and we can construct a k-proof-tree for the empty
inconsistency in P jt . Therefore, P jt is empty after achieving strong k-consistency. Suppose
there exists a variable x 2 vars(t), such that the value t[x] is removed from the domain of
x when achieving strong k-consistency on P . Then there is a k-proof-tree for fx t[x]g in
P and we can construct a k-proof-tree for the empty inconsistency in P jt. Therefore P jt is
empty after achieving strong k-consistency.

67

Chen & van Beek

Lemma 8 Given a CSP P and an assignment fx ag, a 2 dom(x), if the induced CSP
P jfx ag is empty after achieving strong (k , 1)-consistency, then the value a is removed
from the domain of x when achieving strong k-consistency on P .

Proof Suppose P jfx ag is empty after achieving strong (k , 1)-consistency. Thus, there is
a (k , 1)-proof-tree for the empty inconsistency in P jfx ag . We now convert the (k , 1)proof-tree to a k-proof-tree for fx ag in P . Each node t in the original (k , 1)-proof-tree
is replaced by t [ fx ag. Thus, the root of the tree becomes fx ag. Furthermore,
if t is not a leaf node in the original (k , 1)-proof-tree; i.e., t is consistent in P jfx ag , it
is easy to verify that t [ fx ag is consistent in P . If t is a leaf node in the original
(k , 1)-proof-tree; i.e., t is inconsistent in P jfx ag, there is a constraint C 0 in P jfx ag such

that t does not satisfy C 0. Let C 0 be the selection and projection of the constraint C in P .
Thus, t [ fx ag does not satisfy the constraint C in P and is therefore inconsistent in P .
Hence, we have constructed a k-proof-tree for fx ag in P and thus a would be removed
from the domain of x when achieving strong k-consistency on P .

MCk extends the current node if the CSP induced by the current partial solution is not
empty after achieving strong k-consistency. The node is thus called a k-consistent node.

Denition 9 (k-consistent node) A node t in the search tree is a k-consistent node if
the CSP induced by t is not empty after enforcing strong k-consistency. A node which is
not k-consistent is called k-inconsistent.

Lemma 9 If node t is k-consistent, its ancestors are also k-consistent.
Proof Let t0 be one of t's ancestors. Because t0  t, from Lemma 6, P jt = (P jt0 )jt,t0 . Thus,
P jt is an induced subproblem of P jt0 . From Lemma 7, if P jt is not empty after achieving
strong k-consistency, P jt0 is not empty either after achieving strong k-consistency. Thus, t0
is k-consistent.

The following theorem applies to the case of nding all solutions.

Theorem 10 If MCk visits a node, then its parent is k-consistent. If a node is k-consistent,
then MCk visits the node.

Proof The rst part is true because MCk would not branch on this node if its parent was
found k-inconsistent. We prove the second part by induction on the depth of the search tree.
The hypothesis is trivial for j = 1. Suppose it is true for j > 1 and we have a k-consistent
node t at level j + 1. Let the current variable be x. From Lemma 9, t's parent t0 at level
j is k-consistent. Thus, MCk will visit t0 . From Lemma 6, P jt = (P jt0 )jfx t[x]g. Because
(P jt0 )jfx t[x]g is not empty after achieving strong k-consistency, from Lemma 7, value t[x]
will not be removed from the domain of x when achieving strong k-consistency in P jt0 . As
a consequence, MCk will visit t.

A necessary and sucient condition for MCk to visit a node t is that t's parent is kconsistent and the value assigned to the current variable by t has not been removed from
its domain when enforcing strong k-consistency on t's parent.
68

Conflict-Directed Backjumping Revisited

Theorem 11 Given a CSP and a variable ordering, MCk visits all the nodes that MCk+1

visits.

Proof Follows from Theorem 10 and Lemma 7.
4.3 Relationship Between BJk and MCk

Kondrak and van Beek (1997) have shown that for binary CSPs, BJ (BJ1 ) visits all the
nodes that FC (MC1) visits, and FC-CBJ (MC1-CBJ) and CBJ are incomparable. We
extend their partial ordering of backtracking algorithms to include the relationship between
MCk , BJk , and MCk -CBJ, 1  k  n. All of our results are for the case of general CSPs;
i.e., they are not restricted to binary CSPs.
We begin by characterizing an important property of the CBJ algorithm.

Lemma 12 If CBJ performs a one-level backjump from a deeper variable xi to a shallower
variable xh , the node th at the level of xh is one-inconsistent.

Proof Let Si be the conict set of xi used in the backjumping in which xh is the deepest variable. We show that xi will experience a domain wipe out when enforcing oneconsistency on the induced CSP P jth [Si ] . Each node ti at the level of xi is a leaf node;
i.e., ti is inconsistent in P . Suppose ti does not satisfy constraint C where xi 2 vars(C )
and vars(C )  Si [ fxi g. The selection of C in P jth [Si ] , which constrains only one variable
fxig, should prohibit value ti [xi] of xi. Thus, xi will experience a domain wipe out when
enforcing one-consistency on P jth [Si ] . Note that P jth is an induced subproblem of P jth [Si ] .
From Lemma 7, P jth is empty after enforcing one-consistency. Thus, th at the level of xh
is one-inconsistent.
Lemma 13 If CBJ performs a k-level backjump from a deeper variable xi to a shallower
variable xh , the current node th at the level of xh is k-inconsistent.
Proof Let Si be the current conict set of xi in which xh is the deepest variable. We show
that if there is a k-level backjump from xi to xh , then P jth [Si ] is empty after enforcing strong

k-consistency and thus th is k-inconsistent. The proof is by induction on k. k = 1 is true
from Lemma 12. Suppose the hypothesis is true for the case of k , 1 but it is not true for
the case of k; i.e., there is a k-level backjump from xi to xh , but the induced CSP P jth [Si ]
is not empty after enforcing strong k-consistency. So there is at least one value a left in the
domain of xi after enforcing strong k-consistency on P jth [Si ] . We know that the node ti at
the level of xi instantiating xi with a is either incompatible with th (i.e., it is a leaf node)
or is l-level backjumped from some deeper variable xj , for some 1  l < k (see Figure 5).
However, ti cannot be a leaf node as otherwise a would be removed from the domain of xi
when enforcing strong k-consistency. Let Sj be the conict set of xj . From the hypothesis,
the induced CSP P jti [Sj ] is empty after achieving strong l-consistency. Because value a is
not removed from the resulting CSP, from Lemma 8, the induced CSP P jth [Si ][fxi ag is not
empty after achieving strong (k , 1)-consistency. Because ti [Sj ]  th [Si ] [ fxi ag, the
induced CSP P jti [Sj ] is not empty after achieving strong (k , 1)-consistency. That leads to
a contradiction. Thus P jth [Si ] is empty after achieving strong k-consistency and th at the
level of xh is k-inconsistent.
69

Chen & van Beek

th

xh
k-level backjumping

:::

ti

conict set Si xi

l-level backjumping, l < k

:::

conict set Sj xj

Figure 5: A scenario in the CBJ backtrack tree used in the proof of Lemma 13.

Theorem 14 Given a CSP and a variable ordering, BJk visits all the nodes that MCk
visits.

Proof The proof is by induction on the level of the search tree. If MCk visits a node at
level j in the search tree, BJk visits the same node. j = 1 is trivial. Suppose that it is true
for the case of j > 1 and we have a node t visited by MCk at level j + 1. We know both
MCk and BJk visit t's parent at level j . The only chance that t may be skipped by BJk is
that BJk backjumps from some deeper variable xi at level i to a shallower variable xh at
level h, such that h < j + 1 < i. Thus, the node at level h is k-inconsistent (by Lemma 13).
Since the node at level h is an ancestor of t and we know t's parent is k-consistent from
Lemma 9, the node at level h is k-consistent. That is the contradiction. Therefore, BJk
visits t at level j + 1.
MCk can be combined with backjumping, namely MCk -CBJ, provided the conict sets
are computed correctly after achieving strong k-consistency on the induced CSPs.

Theorem 15 Given a CSP and a variable ordering, MCk visits all the nodes that MCk-CBJ

visits.

Proof Because MCk-CBJ behaves exactly the same as MCk in the forward phase of a

backtracking search, it is easy to verify that MCk -CBJ visits a node t only if t's parent
is k-consistent and the value assigned to the current variable by t was not removed from
its domain when achieving strong k-consistency on t's parent. Therefore, MCk -CBJ never
visits more nodes than MCk does.
In Figure 6, we present a hierarchy in terms of the size of the backtrack tree for BJk ,
MCk , and MCk -CBJ. If there is a path from algorithm A to algorithm B in the gure,
we know that A never visits more nodes than B does. For example, MCk never visits
more nodes than BJj , for all j  k. Otherwise, there are instances to show A may be
exponentially better than B, and vice versa.
70

Conflict-Directed Backjumping Revisited

BJn
(CBJ)

..
.

+1

BJk

BJk

MCn

MCn -CBJ

..
.

..
.

+1

MCk

+1 -CBJ

MCk

MCk

MCk -CBJ

..
.

..
.

..
.

BJ

1

MC

1

MC -CBJ

(BJ)

(FC)

(FC-CBJ)

1

Figure 6: A hierarchy for BJk , MCk , and MCk -CBJ in terms of the size of the backtrack
tree.
As the following example shows, for any xed integer k < n, there exists a CSP instance
such that CBJ visits exponentially fewer nodes than an algorithm that maintains strong
k-consistency in the backtracking search4.

Example 5 Given a xed integer k, we can construct a binary CSP with n + k +2 variables,
x1 ; : : :; xn,k+1; y1; : : :; yk+1 ; xn,k+2; : : :; xn+1, where dom(xi ) = f1; : : :; ng for 1  i  n +1
and dom(yj ) = f1; : : :; kg for 1  j  k + 1. The constraints are: xi =
6 xj , for i =6 j , and
yi =
6 yj , for i =6 j . The problem consists of two separate pigeon-hole subproblems, one over

variables x1; : : :; xn+1 and the other over variables y1 ; : : :; yk+1 , and is insoluble. As we can
see, the pigeon-hole problem is highly locally consistent. The rst subproblem is strongly nconsistent and the second is strongly k-consistent. Under the above static variable ordering,
4. Independently, Bacchus and Grove (1999) present a similar example to show that given a xed k, CBJ
may be exponentially better than an algorithm called MIkC , which essentially maintains k-consistency
in the backtracking search.

71

Chen & van Beek

a backtracking algorithm maintaining strong k-consistency would not encounter a dead-end
until xn,k+1 is instantiated. Then it would nd that the subproblem of xn,k+2 ; : : :; xn+1
is not strongly k-consistent. Thus, the algorithm will backtrack before it reaches the second
pigeon-hole subproblem. It will explore nk!! nodes at level n , k + 1 of the search tree and
thus take an exponential number of steps to nd the problem is insoluble. CBJ does not
encounter a dead-end at the level of xn,k+1 and it continues to the second pigeon-hole
problem. Eventually it will nd the second-pigeon hole problem is insoluble and backjump
to the root of the search tree. The total number of nodes explored is bounded by a constant,
O((k + 1)k), for a xed k. Therefore, CBJ can be exponentially better than an algorithm
maintaining strong k-consistency.
Example 5 also shows that, although MCk visits fewer nodes than BJk by Theorem 14,
BJk+1 can be exponentially better than MCk . However, BJk+1 can be better than MCk
only if there is a (k + 1)-level backjump that is not also a chronological backtrack. To see
that this is true, suppose that on a particular instance all (k + 1)-level backjumps are also
chronological backtracks (i.e., the backjump is to the immediately preceding variable in the
variable ordering and only that single variable becomes uninstantiated and is removed from
the current partial solution). In this case, the freedom to backjump one additional level
rather than chronologically backtrack does not make a dierence and BJk+1 is eectively
BJk and thus cannot be better than MCk . Thus, BJk+1 can be better than MCk only
if there is a (k + 1)-level non-chronological backjump. We note, however, that since the
number of backjumps of level k +1 is less than or equal to the number of backjumps of level
k, as k increases this gets more and more unlikely. Thus, as the level of local consistency
that is maintained in the backtracking search is increased, the less that backjumping will
be an improvement.
Consider Example 5 again. At each level of the backtrack tree for MCk , the instantiation
of each of the past variables removes one distinct value from the domain of the current
variable (recall that MCk never instantiates the variable y1 as it reaches a dead-end at
xn,k+1 ). If we were to maintain conict sets for the variables, the conict set for the current
variable would include all of its past variables and thus when a dead-end is encountered
by the algorithm, any backjump computed from the conict sets would also necessarily be
a chronologically backtrack. Thus, as this example shows, MCk -CBJ and MCk can visit
exactly the same nodes and consequently BJk+1 can be exponentially better than MCk CBJ. Furthermore, because MCk,1 -CBJ can reach the second pigeon-hole problem without
encountering a dead-end, it can nally retreat from the second pigeon-hole problem to the
root of the search tree by backjumps. Thus, MCk,1 -CBJ may be exponentially better
than MCk -CBJ. In particular, this shows the surprising result that MAC-CBJ can visit
exponentially more nodes than FC-CBJ.
Finally, as the following example shows, for any xed integer k < n, there exists a CSP
instance such that an algorithm that maintains strong k-consistency in the backtracking
search visits exponentially fewer nodes than CBJ.

Example 6 Consider the CSP as dened in Example 5, but searched with the static variable
ordering y1 ; : : :; yk ; x1; : : :; xn+1 ; yk+1 .

72

Conflict-Directed Backjumping Revisited

5. Empirical Evaluation of Adding CBJ to GAC

In this section, we report on experiments that examined the eect of adding CBJ to a
backtracking algorithm that maintains generalized arc consistency (GAC), an algorithm
that we refer to as GAC-CBJ. Previous work has shown the importance of algorithms that
maintain arc consistency (e.g., Sabin & Freuder, 1994; Bessiere & Regin, 1996). We show
that adding CBJ to a backtracking algorithm that maintains generalized arc consistency
can speed up the algorithm by several orders of magnitude on hard, structured problems.
Previous empirical studies of adding CBJ to a backtracking algorithm that maintains a
level of local consistency have led to mixed conclusions. Adding CBJ to forward checking,
a truncated form of arc consistency, has been shown to give improvements but not always
signicant ones. Prosser (1993b) observes that with a static variable ordering, FC-CBJ is
about three times faster than FC on the Zebra problem. Smith and Grant (1995) observe
that with a dynamic variable ordering, adding CBJ to FC led to signicant savings but
only on hard random problems that occur in the easy region. Bacchus and van Run (1995)
observe that with a dynamic variable ordering, adding CBJ to FC only led to at most a
5% improvement on the Zebra problem, n-Queens problems, and random binary problems.
Bayardo and Schrag (1996, 1997) show that adding CBJ to the well-known Davis-Putnam
algorithm, the SAT version of forward checking, can be a signicant improvement on hard
random and real-world 3-SAT problems.
Adding CBJ to an algorithm that maintains full arc consistency has received less attention in the literature. In the one study that we are aware of, Bessiere and Regin (1996)
observe that adding CBJ to MAC (the binary version of GAC) actually slows down the
algorithm on random binary problems due to the overhead of maintaining the conict sets.
They conjecture that \when MAC and a good variable ordering heuristic are used, CBJ
becomes useless".
Our empirical results lead us to dier with Bessiere and Regin's conclusion about the
usefulness of adding CBJ to an algorithm that maintains full arc consistency. In our implementation we were able to signicantly reduce the overhead of maintaining the conict sets
through the use of additional data structures5. On problems where adding CBJ does not
lead to many savings in nodes visited, our implementation of CBJ also does not degrade performance by any signicant factor. We demonstrate the improvement by re-doing Bessiere
and Regin's (1996) experiments on random binary problems. We then show through experiments in two structured domains that GAC-CBJ can sometimes improve GAC by several
orders of magnitude on hard instances.
In our experiments, we ran both GAC and GAC-CBJ on each instance of a problem
and recorded the CPU times. Comparing CPU times is appropriate as the underlying code
for GAC and GAC-CBJ is identical, with GAC-CBJ containing only additional code to
maintain the conict sets and to determine how far to jump back. Two dynamic variable
orderings were used: the popular dom+deg heuristic which chooses the next variable with
the minimal domain size and breaks ties by choosing the variable with the maximum degree
(the number of the constraints that constrain that variable) and the dom/deg heuristic
proposed by Bessiere and Regin (1996) which chooses the next variable with the minimal
5. See the online appendix for the source code and a description of the key data structures in our implementations of GAC and GAC-CBJ.

73

Chen & van Beek

value of the domain size divided by its degree. All experiments were run on 400 MHz
Pentium II's with 256 Megabytes of memory.

5.1 Random Problems

The run time performance of GAC and GAC-CBJ were compared on sets of randomly
generated binary CSPs. A set of random problems is dened by a 5-tuple (n; d; r; m; t),
where n is the number of the variables, d is the uniform domain size, r is the uniform arity
of the constraints, m is the number of randomly generated constraints, and t is the uniform
tightness or number of tuples in each constraint. In each case, the constraint tightness t
was chosen so that approximately half of the instances in the population were insoluble;
i.e., the instances were from the phase transition region.
Table 1: Eect of domain size on average time (seconds) to solve random instances from
(50; d; 2; 95; t). Each set contained 100 random instances. Both GAC-CBJ and
GAC used the dom/deg variable ordering.

d GAC-CBJ GAC
5
0:0027 0:0030
10
0:026
0:027
0:10
0:10
15
20
0:41
0:41
25
0:79
0:78
30
2:46
2:47
35
3:82
3:80
10:98
10:75
40

ratio
0:90
0:96
1:00
1:00
1:01
1:00
1:01
1:02

Bessiere and Regin (1996) examine the eect of domain size on the average time to
solve random instances from (50; d; 2; 95; t) (see Figure 5 (right) in Bessiere & Regin, 1996).
With their implementation of CBJ, adding CBJ steadily worsens performance as domain
size increases until at d = 40 MAC-CBJ is about 1.7 times slower than MAC alone. With our
implementation, the dierence in performance between GAC-CBJ and GAC was negligible
on these problems (see Table 1).
The remaining sets of random problems that Bessiere and Regin used in their experiments to compare the performance of MAC-CBJ and MAC are now too simple to provide
a meaningful comparison as they can be solved in less than 0.01 seconds on a 400 MHz
Pentium II computer. Thus, we chose harder sets of random binary problems. On each
instance we ran both GAC and GAC-CBJ and recorded the CPU times. Here we report
the average ratio of the CPU times (GAC over GAC-CBJ). Each set contained 100 random
instances. On the rst set of problems, (150; 5; 2; 750; 19), the average ratio for the dom+deg
variable ordering was 0.90 and the average ratio for the dom/deg variable ordering was 0.88.
On the second set of problems, (150; 5; 2; 1500; 21), the average ratios for both the dom+deg
74

Conflict-Directed Backjumping Revisited

and dom/deg variable orderings was 0.93. In other words, on average GAC was a little over
10% faster than GAC-CBJ on these problems.

5.2 Planning Problems

Planning, where one is required to nd a sequence of actions from an initial state to a goal
state, can be formulated as a CSP. In the formulation we used in our experiments, each
state is modeled by a collection of variables and the constraints enforce the assignments of
variables to represent a consistent state or a valid transition between states. (See Kautz &
Selman, 1992; van Beek & Chen, 1999 for more details on the formulation of planning as a
CSP.)
Table 2: Time (seconds) to solve instances of the grid planning problem. The absence of an
entry indicates that the problem was not solved within 72000 seconds (20 hours)
of CPU time.
dom+deg
GAC GAC-CBJ
0.66
0.68

1
2 762.47
3
.
4
.
.
5

dom/deg
GAC GAC-CBJ
1.58
0.86

33.33 3965.10
.

1753.13

.

.
.
.

321.17

.
.
.

In the experiments we used all 130 instances used in the First AI Planning Systems
Competition, June 6{9, 1998. The instances come from ve dierent domains: gripper,
mystery, mprime, logistics, and grid. In the experiments we report, both GAC and GACCBJ were based on AC3 (Mackworth, 1977a) as this was found to give the best performance.
For the gripper, mystery, and mprime domains, each of the instances could be solved
in under 25 seconds by both GAC and GAC-CBJ. On these easy problems, the increased
overhead of CBJ rarely led to savings, and overall GAC was 10-15% faster than GAC-CBJ.
Table 2 shows the comparison between GAC and GAC-CBJ in solving the 5 instances
of the grid problems. GAC-CBJ showed improvement on the grid problems. For example,
it solved problem 4 in about half an hour, but GAC failed to nd a solution in 20 hours.
Table 3 shows the comparison between GAC and GAC-CBJ in solving the 30 instances
of the logistics problem. On about one third of the instances, GAC-CBJ improved on GAC.
For example, on instances 18, 20 and 27, GAC-CBJ ran several orders of magnitude faster
than GAC, and on instance 15, GAC exhausted the 20 hours time limit but GAC-CBJ found
a solution within 3 minutes. GAC-CBJ and GAC performed similarly on easier instances
and sometimes GAC-CBJ was about 10% slower than GAC.

75

Chen & van Beek

Table 3: Time (seconds) to solve instances of the logistics planning problem. The absence
of an entry indicates that the problem was not solved within 72000 seconds (20
hours) of CPU time.
dom+deg
GAC
GAC-CBJ
0.03
0.03
0.03
0.05

1
2
3
10.91
4
0.16
5
1.51
6
36.49
7
0.08
0.15
8
9
0.30
.
10
11
0.04
12
0.11
13
0.54
14
0.63
15
.
16
12.49
17
264.46
18 15382.82
1.29
19
20 6268.16
0.66
21
22
.
23
.
24
0.08
25
34.03
26
.
27 12239.26
28
.
29
.
30
.

0.86

dom/deg
GAC
GAC-CBJ
0.03
0.03
0.03
0.06

9.63

0.81

35.77

16.76

182.51
.
0.42
12.32
0.32 261.33
1165.54 15157.71

8540.58
0.41
0.32
1184.67

0.17
1.54

16.86

0.08
0.15
0.33
.
0.05
0.13
0.57
0.64

1.37

27.66

0.14
1.54
0.08
0.14
0.32
.
0.05
0.11
0.54
0.64

1.33

0.18
1.57
0.09
0.16
0.33
.
0.05
0.11
0.56
0.68

1.31

6125.87

28.55

47.06 12105.62

47.76

0.70
.
.
0.09
13.03
.
.
.
.

76

0.68
.
.
0.08
11.58
.
.
.
.

0.74
.
.
0.09
12.10
.
.
.
.

Conflict-Directed Backjumping Revisited

5.3 Crossword Puzzle Problems

Crossword puzzle generation, where one is required to ll in a grid with words from a
dictionary, can be formulated as a CSP. In the formulation we used in our experiments, each
of the unknown words is represented by a variable which takes values from the dictionary.
Binary constraints enforce that intersecting words agree on their intersecting letter and
that a word from the dictionary appears at most once in a solution. Figure 7 shows an
example 5  5 crossword puzzle grid. A CSP model of this grid has 10 variables, 21 binary
\intersection" constraints, and 13 \not equals" constraints.
1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

Figure 7: A crossword puzzle.
In the experiments we used 50 grids and two dictionaries for a total of 100 instances of
the problem that ranged from easy to very hard. For the grids, we used 10 instances at each
of the following sizes: 55, 1515, 1919, 2121, and 2323. For the dictionaries we used
the UK dictionary, which collects about 220,000 words and in which the largest domain for a
word variable contains about 30,000 values, and the Linux dictionary, which collects 45,000
words and in which the largest domain for a word variable has about 5,000 values. In the
experiments we report, both GAC and GAC-CBJ were based on AC7 (Bessiere & Regin,
1997) as this was found to give the best performance (see Sillito, 2000 for a discussion of
integrating AC7 into backtracking search).
Figure 8 shows approximate cumulative frequency curves for the empirical results, where
we are plotting the ratio of the time taken to solve an instance by GAC over the time
taken to solve the instance by GAC-CBJ. Thus, for example, we can read from the curve
representing the dom+deg variable ordering that for approximately 85% of the tests adding
CBJ had little eect and that for the remaining 15% of the tests it led to orders of magnitude
improvements. We can also read from the curves the 0, 10, . . . , 100 percentiles of the data
sets (where the value of the median is the 50th percentile or the value of the 50th test). The
crossover point, where GAC-CBJ starts to perform as well as or better than GAC occurs
around the 35th percentile. Tables 4 and 5 examine the data more closely by showing the
77

Chen & van Beek

1000

ratio (GAC / GAC-CBJ)

dom+degree
dom/degree

100

10

1

0.1
10

20

30

40

50
test

60

70

80

90

100

Figure 8: Eect on execution time of GAC of adding conict-directed backjumping (GACCBJ). A curve represents 100 tests on instances of the crossword puzzle problem
where the tests are ordered by the ratio of time taken to solve the instance by
GAC over time taken to solve the instance by GAC-CBJ.
actual times to solve the instances where GAC performed best and the instances where
GAC-CBJ performed best.
Table 4: GAC versus GAC-CBJ on instances of the crossword puzzle problem. The ten
best improvements in time (seconds) of GAC over GAC-CBJ to solve an instance
are presented.
dom+deg
rank GAC GAC-CBJ
1
1.21
1.35
2
1.10
1.20
3
6.12
6.53
4
0.78
0.81
5 110.23
114.52
68.67
71.28
6
7
47.16
48.42
8
32.69
33.63
9
25.17
26.08
21.37
10 20.73
78

dom/deg
GAC GAC-CBJ
1.11
1.23
0.95
1.02
1.16
1.24
56.66
60.36
1.30
1.37
4.86
5.11
0.22
0.23
14.23
14.76
74.38
77.52
7.43
7.67

Conflict-Directed Backjumping Revisited

Table 5: GAC versus GAC-CBJ on instances of the crossword puzzle problem. The ten
best improvements in time (seconds) of GAC-CBJ over GAC to solve an instance
are presented. The absence of an entry indicates that the problem was not solved
within 36000 seconds (10 hours) of CPU time.
dom+deg
dom/deg
rank GAC GAC-CBJ GAC GAC-CBJ
1
.
37.85
.
54.60
2
.
41.43 10311.32
33.43
3
.
67.07
.
225.92
4
.
82.58
.
244.81
.
276.00
.
308.04
5
.
542.80
.
374.72
6
7
.
939.71
.
832.68
8 2716.86
115.87
.
1486.43
9
390.91
34.90
.
1890.24
10
.
3336.37
.
3411.83

In summary, on some of the smaller, easier crossword puzzle instances GAC was slightly
faster than GAC-CBJ, on many of the puzzles there was no noticeable dierence, and on
some of the larger, harder puzzles GAC-CBJ was orders of magnitude faster than GAC.

6. Conclusion

In this paper, we presented three main results. First, we showed that the choice of dynamic
variable ordering heuristic can weaken the eects of the backjumping technique. Second,
we showed that as the level of local consistency that is maintained in the backtracking
search is increased, the less that backjumping will be an improvement. Together these
results partially explain why a backtracking algorithm doing more in the look-ahead phase
cannot benet more from the backjumping look-back scheme and they extend the partial
ordering of backtracking algorithms presented by Kondrak and van Beek (1997) to include
backtracking algorithms and their CBJ hybrids that maintain levels of local consistency
beyond forward checking. Third, and nally, we showed that adding CBJ to a backtracking
algorithm that maintains generalized arc consistency can (still) speed up the algorithm by
several orders of magnitude on hard, structured problems. Throughout the paper, we did
not restrict ourselves to binary CSPs.

Acknowledgements
The authors wish to thank the referees for their careful reading of a previous version of
the paper and their helpful comments. The nancial support of the Canadian Government
through their NSERC program is gratefully acknowledged.
79

Chen & van Beek

References

Bacchus, F., & Grove, A. (1999). Looking forward in constraint satisfaction algorithms.
Unpublished manuscript.
Bacchus, F., & van Run, P. (1995). Dynamic variable ordering in CSPs. In Proceedings of the
First International Conference on Principles and Practice of Constraint Programming,
pp. 258{275, Cassis, France. Available as: Springer Lecture Notes in Computer Science
976.
Bayardo Jr., R. J., & Schrag, R. (1996). Using CSP look-back techniques to solve exceptionally hard SAT instances. In Proceedings of the Second International Conference
on Principles and Practice of Constraint Programming, pp. 46{60, Cambridge, Mass.
Available as: Springer Lecture Notes in Computer Science 1118.
Bayardo Jr, R. J., & Schrag, R. C. (1997). Using CSP look-back techniques to solve realworld SAT instances. In Proceedings of the Fourteenth National Conference on Articial Intelligence, pp. 203{208, Providence, RI.
Bessiere, C., & Regin, J.-C. (1996). MAC and combined heuristics: Two reasons to forsake
FC (and CBJ?) on hard problems. In Proceedings of the Second International Conference on Principles and Practice of Constraint Programming, pp. 61{75, Cambridge,
Mass.
Bessiere, C., & Regin, J.-C. (1997). Arc consistency for general constraint networks: Preliminary results. In Proceedings of the Sixteenth International Joint Conference on
Articial Intelligence, pp. 398{404, Nagoya, Japan.
Bruynooghe, M. (1981). Solving combinatorial search problems by intelligent backtracking.
Information Processing Letters, 12, 36{39.
Chen, X. (2000). A Theoretical Comparison of Selected CSP Solving and Modeling Techniques. Ph.D. thesis, University of Alberta.
Dechter, R. (1990). Enhancement schemes for constraint processing: Backjumping, learning,
and cutset decomposition. Articial Intelligence, 41, 273{312.
Dechter, R. (1992). Constraint networks. In Shapiro, S. C. (Ed.), Encyclopedia of Articial
Intelligence, 2nd Edition, pp. 276{285. John Wiley & Sons.
Freuder, E. C. (1978). Synthesizing constraint expressions. Comm. ACM, 21, 958{966.
Frost, D., & Dechter, R. (1994). Dead-end driven learning. In Proceedings of the Twelfth
National Conference on Articial Intelligence, pp. 294{300, Seattle, Wash.
Gaschnig, J. (1978). Experimental case studies of backtrack vs. Waltz-type vs. new algorithms for satiscing assignment problems. In Proceedings of the Second Canadian
Conference on Articial Intelligence, pp. 268{277, Toronto, Ont.
Haralick, R. M., & Elliott, G. L. (1980). Increasing tree search eciency for constraint
satisfaction problems. Articial Intelligence, 14, 263{313.
Kautz, H., & Selman, B. (1992). Planning as satisability. In Proceedings of the 10th
European Conference on Articial Intelligence, pp. 359{363, Vienna.
80

Conflict-Directed Backjumping Revisited

Kondrak, G., & van Beek, P. (1997). A theoretical evaluation of selected backtracking
algorithms. Articial Intelligence, 89, 365{387.
Mackworth, A. K. (1977a). Consistency in networks of relations. Articial Intelligence, 8,
99{118.
Mackworth, A. K. (1977b). On reading sketch maps. In Proceedings of the Fifth International Joint Conference on Articial Intelligence, pp. 598{606, Cambridge, Mass.
McGregor, J. J. (1979). Relational consistency algorithms and their application in nding
subgraph and graph isomorphisms. Inform. Sci., 19, 229{250.
Montanari, U. (1974). Networks of constraints: Fundamental properties and applications to
picture processing. Inform. Sci., 7, 95{132.
Nadel, B. A. (1989). Constraint satisfaction algorithms. Computational Intelligence, 5,
188{224.
Prosser, P. (1993a). Domain ltering can degrade intelligent backtracking search. In Proceedings of the Thirteenth International Joint Conference on Articial Intelligence,
pp. 262{267, Chambery, France.
Prosser, P. (1993b). Hybrid algorithms for the constraint satisfaction problem. Computational Intelligence, 9, 268{299.
Prosser, P. (1995). MAC-CBJ: Maintaining arc consistency with conict-directed backjumping. Research report 177, University of Strathclyde.
Sabin, D., & Freuder, E. C. (1994). Contradicting conventional wisdom in constraint satisfaction. In Proceedings of the 11th European Conference on Articial Intelligence,
pp. 125{129, Amsterdam.
Schiex, T., & Verfaillie, G. (1994). Nogood recording for static and dynamic constraint
satisfaction problems. International Journal on Articial Intelligence Tools, 3, 1{15.
Sillito, J. (2000). Improving and Estimating the Cost of Backtracking Algorithms for CSPs..
MSc thesis, University of Alberta, 2000.
Smith, B. M., & Grant, S. A. (1995). Sparse constraint graphs and exceptionally hard problems. In Proceedings of the Fourteenth International Joint Conference on Articial
Intelligence, pp. 646{651, Montreal.
van Beek, P., & Chen, X. (1999). CPlan: A constraint programming approach to planning.
In Proceedings of the Sixteenth National Conference on Articial Intelligence, pp.
585{590, Orlando, Florida.

81

Journal of Artificial Intelligence Research 14 (2001) 137-166

Submitted 9/00; published 4/01

Reasoning within Fuzzy Description Logics
Umberto Straccia

straccia@iei.pi.cnr.it

I.E.I - C.N.R., Via G. Moruzzi, 1
I-56124 Pisa (PI), ITALY

Abstract
Description Logics (DLs) are suitable, well-known, logics for managing structured
knowledge. They allow reasoning about individuals and well defined concepts, i.e. set
of individuals with common properties. The experience in using DLs in applications has
shown that in many cases we would like to extend their capabilities. In particular, their
use in the context of Multimedia Information Retrieval (MIR) leads to the convincement
that such DLs should allow the treatment of the inherent imprecision in multimedia object
content representation and retrieval.
In this paper we will present a fuzzy extension of ALC, combining Zadeh’s fuzzy logic
with a classical DL. In particular, concepts becomes fuzzy and, thus, reasoning about
imprecise concepts is supported. We will define its syntax, its semantics, describe its
properties and present a constraint propagation calculus for reasoning in it.

1. Introduction
The representation of uncertainty and imprecision has received a considerable attention in
the Artificial Intelligence community in an attempt to extend existing knowledge representation systems to deal with the imperfect nature of real world information (which is likely
the rule rather than an exception). An impressive work has been carried out in the last
decades, resulting in a number of concepts being investigated, a number of problems being
identified and a number of solutions being developed (Bacchus, 1990; Dubois & Prade, 1996;
Kruse, Schwecke, & Heinsohn, 1991; Pearl, 1988).
For most knowledge representation formalisms, First-Order Logic (FOL) has been the
basis: its basic units –individuals, their properties, and the relationship between them–
naturally capture the way in which people encode their knowledge. Unfortunately, it is
severely limited both (i) by its ability to represent our uncertainty about the world –due
to lack of knowledge about the real world a fact can only estimated to be true to e.g.
a probability degree; and (ii) by its ability to represent inherently imprecise knowledge–
indeed, there are concepts, like hot, for which no exact definition exists and, thus, a fact
like “35◦ Celsius is hot”, rather being true or false, has a truth-value in between true and
false.
In the last decade a substantial amount of work has been carried out in the context of
Description Logics (DLs).1 DLs are a logical reconstruction of the so-called frame-based
knowledge representation languages, with the aim of providing a simple well-established
Tarski-style declarative semantics to capture the meaning of the most popular features of
structured representation of knowledge. A main point is that DLs are considered as to be
1. Description Logics have also been referred to as Terminological Logics, Concept Logics, KL-ONE-like
languages. The web page of the description logic community is found at address http://dl.kr.org/dl.
c
°2001
AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Straccia

attractive logics in knowledge based applications as they are a good compromise between
expressive power and computational complexity.
Nowadays, a whole family of knowledge representation systems has been build using DLs,
which differ with respect to their expressiveness, their complexity and the completeness of
their algorithms, and they have been used for building a variety of applications (Peltason,
1991; Brachman, 1992; Baader & Hollunder, 1991a; Horrocks, 1998).
Experience in using DLs in applications has also shown that in many cases we would
like to extend the representational and reasoning capabilities of them. In particular, the use
of DLs in the context of Multimedia Information Retrieval (MIR) points out the necessity
of extending DLs with capabilities which allow the treatment of the inherent imprecision
in multimedia object representation and retrieval (Meghini & Straccia, 1996; Meghini, Sebastiani, & Straccia, 1997, 1998). In fact, classical DLs are insufficient for describing real
multimedia retrieval situations, as the retrieval is usually not only a yes-no question: (i) the
representations of multimedia objects’ content and queries which the system (and the logic)
have access to are inherently imperfect; and (ii) the relevance of a multimedia object to a
query can thus be established only up to a limited degree. Because of this, we need a logic
in which, rather than deciding tout court whether a multimedia object satisfies a query or
not, we are able to rank the retrieved objects according to how strongly the system believes
in their relevance to a query.
To this end, we will extend DLs with fuzzy capabilities. The choice of fuzzy set theory
as a way of endowing a DL with the capability to deal with imprecision is not uncommon
(da Silva, Pereira, & Netto, 1994; Tresp & Molitor, 1998; Yen, 1991) and can be motivated
• from a semantics point of view, as fuzzy logics capture the notion of imprecise concept,
i.e. a concept for which a clear and precise definition is not possible. Fuzzy concepts
play a key role in e.g. content descriptions of multimedia objects (most of human’s
concepts are imprecise). For instance, in the context of images, the (semantic) content
of an image region r may be described by means of a fuzzy statement like “r is about
a Ferrari” and establish that this sentence has truth-value 0.8, i.e. r is likely about a
Ferrari;
• from a proof theoretical point of view, as there exist well-known techniques for reasoning in fuzzy logics (Chen & Kundu, 1996; Lee, 1972; Xiachun, Yunfei, & Xuhua,
1995).
In the following we will present a quite general fuzzy DL, in the sense that it is based on
the DL ALC, a significant and expressive representative of the various DLs. This allows
us to adapt it easily to the different DLs presented in the literature. Another important
point is that we will show that the additional expressive power has no impact from a
computational complexity point of view. This is certainly important as the nice tradeoff between computational complexity and expressive power of DLs contributes to their
popularity.
Note that our fuzzy extension for the management of imprecise knowledge is complementary to other DL extensions for the management of uncertainty, e.g. probabilistic extension
(Heinsohn, 1994; Jäger, 1994; Koller, Levy, & Pfeffer, 1997; Sebastiani, 1994) with some exceptions like shown by Hollunder (1994) where a possibilistic DL has been considered. Even
138

Reasoning within Fuzzy DLs

though these probabilistic extensions enlarge the applicability of DLs they do not address
the issue of reasoning about individuals and imprecise concepts, as imprecise knowledge and
uncertain knowledge are “orthogonal” (Dubois & Prade, 1994). Moreover, reasoning in a
probabilistic framework is generally a harder task, from a computational point of view, than
the relative non probabilistic case and in most cases a complete axiomatization is missing
(Halpern, 1990; Roth, 1996). As a consequence, the computational problems have to be
addressed carefully (Koller et al., 1997).
We will proceed as follows. In the following section we first introduce ALC. In Section 3
we extend ALC to the fuzzy case and discuss some properties in Section 4, while in Section 5
we will present a constraint propagation calculus for reasoning in it. Section 6 concludes
and presents some topics for further research.

2. A Quick Look to ALC
The specific DL we will extend with fuzzy capabilities is ALC, a significant representative
of DLs. At first, we will introduce classical ALC, while in Section 3 our fuzzy extension of
ALC will be presented.
We assume three alphabets of symbols, called primitive concepts (denoted by A), primitive roles (denoted by R) and individuals (denoted by a and b).2
2.1 Concept and Role
Concepts are expressions that collect the properties, described by means of roles, of a set of
individuals. From a FOL point of view, concepts can be seen as unary predicates, whereas
roles are interpreted as binary predicates.
A concept (denoted by C or D) of the language ALC is build out of primitive concepts
according to the following syntax rules:
C, D −→

>|
⊥|
A|
C u D|
C t D|
¬C|
∀R.C|
∃R.C

(top concept)
(bottom concept)
(primitive concept)
(concept conjunction)
(concept disjunction)
(concept negation)
(universal quantification)
(existential quantification).

2.2 Interpretation
DLs have a clean, model-theoretic semantics, based on the notion of interpretation. An
interpretation I is a pair I = (∆I , ·I ) consisting of a non empty set ∆I (called the domain)
and of an interpretation function ·I mapping different individuals into different elements of
∆I (called unique name assumption), primitive concepts into subsets of ∆I and primitive
roles into subsets of ∆I × ∆I . The interpretation of complex concepts is defined as usual:
2. Through this work we assume that every metavariable has an optional subscript or superscript.

139

Straccia

>I
⊥I
(C u D)I
(C t D)I
(¬C)I
(∀R.C)I
(∃R.C)I

=
=
=
=
=
=
=

∆I
∅
C I ∩ DI
C I ∪ DI
∆I \ C I
{d ∈ ∆I : ∀d0 .(d, d0 ) 6∈ RI or d0 ∈ C I }
{d ∈ ∆I : ∃d0 .(d, d0 ) ∈ RI and d0 ∈ C I }.

Note that each concept C and role R can be mapped into an equivalent open first-order
formula FC (x) and FR (x, y), respectively:
F> (x) = T

(1)

F⊥ (x) = F

(2)

FA (x) = A(x)

(3)

FR (x, y) = R(x, y)

(4)

FCuD (x) = FC (x) ∧ FD (x)

(5)

FCtD (x) = FC (x) ∨ FD (x)

(6)

F¬C (x) = ¬FC (x)

(7)

F∀R.C (x) = ∀y.¬FR (x, y) ∨ FC (y)

(8)

F∃R.C (x) = ∃y.FR (x, y) ∧ FC (y),

(9)

where T and F are two formulae representing the truth-value “true” and “false”, respectively
(e.g. T = p ∨ ¬p and F = p ∧ ¬p, for some letter p).
Two concepts C and D are said to be equivalent (denoted by C ≡ D) when C I = DI
for all interpretations I. Note that, e.g. > ≡ ¬ ⊥; C u D ≡ ¬(¬C t ¬D), and (∃R.C) ≡
(¬∀R.¬C).
2.3 Assertion
An assertion (denoted by α) is an expression of type a:C (“a is C”, also “a is an instance of
C”), or an expression of type (a, b):R (“(a, b) is R”, also “(a, b) is an instance of R”). For
instance, tom:Tall u Student asserts that Tom is a tall student, whereas (tim, tom):Friend
asserts that Tom is a friend of Tim. A primitive assertion is either an assertion of the
form a:A, where A is a primitive concept, or an assertion of the form (a, b):R. From a
semantics point of view, an interpretation I satisfies a:C (resp. (a, b):R) iff aI ∈ C I (resp.
(aI , bI ) ∈ RI ).
2.4 Terminological Axiom
A terminological axiom (denoted by τ ) is either a concept specialisation or a concept definition. A concept specialisation is an expression of the form A<·C, where A is a primitive
concept and C is a concept. A specialisation allows stating the existence of a specialisation (“more specific than”) relation between concepts. For instance, Ferrari<·SportCar u
140

Reasoning within Fuzzy DLs

∃Ownedby.CarFanatic states that a Ferrari is a sport car that is owned by a car fanatic.
On the other hand, a concept definition is an expression of the form A: = C, where
A is a primitive concept and C is a concept. A concept definition allows stating the
equivalence between concepts. For instance, Tennis: = SportKind u (∃HasSportTool.>) u
(∀HasSportTool.TennisRacket) states that tennis is identified by a kind of sport having a
tennis racket as a sport tool. From a semantics point of view, an interpretation I satisfies a
concept specialisation A<·C iff AI ⊆ C I . Similarly, an interpretation I satisfies a concept
definition A: = C iff AI = C I .
2.5 Knowledge Base, Entailment and Subsumption
A finite set K of assertions and terminological axioms will be called a Knowledge Base (KB).
With KA we will denote the set of assertions in K, whereas with KT we will denote the set
of terminological axioms in K, also called a terminology. A KB K is purely assertional if
KT = ∅. Further, we will assume that a terminology KT is such that no concept A appears
more than once on the left hand side of a terminological axiom τ ∈ KT and that no cyclic
definitions are present in KT .3
We will say that an interpretation I satisfies (is a model of ) a KB K iff I satisfies each
element in K. A KB K entails an assertion α (denoted by K |= α) iff every model of K
also satisfies α. Furthermore, let KT be a terminology and let C, D be two concepts. We
will say that D subsumes C with respect to (w.r.t.) KT (denoted by C vKT D) iff for every
model I of KT , C I ⊆ DI holds.
The problem of determining whether K |= α is called entailment problem; the problem of determining whether C vKT D is called subsumption problem; and the problem of
determining whether K is satisfiable is called satisfiability problem.
It is well known (Buchheit, Donini, & Schaerf, 1993a; Donini, Lenzerini, Nardi, &
Schaerf, 1994; Nebel, 1990) that in ALC
K |= (a, b):R iff (a, b):R ∈ K
K |= a:C iff K ∪ {a:¬C} is not satisfiable
C v∅ D iff a:C |= a:D, for a new a
0

C vKT D iff C v∅ D

0

(10)
(11)
(12)
(13)

where C 0 and D0 are build from C and D by expanding the terminology KT to KT00 and
substituting every primitive concept occurring in C or D, which is defined in KT00 , with its
defining term in KT00 . The expansion of a KB K works as follows (Nebel, 1990).
1. Elimination of concept specialisation: each concept specialisation A<·C ∈ KT is replaced with a concept definition A: = C u A∗ , where A∗ is a new primitive concept.
A∗ stands for the absent part of the definition of A. Let KT0 be the terminology, which
is obtained by replacing all concept specialisation by concept definitions.
3. We will say that A directly uses primitive concept B in KT , if there is τ ∈ KT such that A is on the left
hand side of τ and B occurs in the right hand side of τ . Let uses be the transitive closure of the relation
directly uses in KT . KT is cyclic iff there is A such that A uses A in KT .

141

Straccia

2. Expansion of KT0 : every defined concept (i.e. the first argument of a concept definition)
which occurs in the defining term of a concept definition (i.e. the second argument of
a concept definition) is substituted by its defining term. This process is iterated until
there remain only undefined concepts in the second arguments of concept definitions.
This yields a terminology KT00 .
3. Expansion of KA : every primitive concept occurring in KA which is defined in KT00 is
0 .
substituted by its defining term in KT00 . This yields KA
0 |= α0 , where α0 is obtained by
The transformation has the nice property that K |= α iff KA
replacing every primitive concept occurring in α, which is defined in KT00 , with its defining
term in KT00 . While this allows us to restrict our attention to purely assertional KBs only,
it is worth noting that the expansion process can be exponential (Nebel, 1988).
From (10)–(13), it follows that the above problems can be reduced to the satisfiability
problem. There exists a well known technique based on constraint propagation solving this
problem (Schmidt-Schauß & Smolka, 1991; Buchheit, Donini, & Schaerf, 1993b; Donini
et al., 1994).
We conclude with an example.

Example 1 Consider the following terminology KT .
SportKind
<·
SportTool
<·
IndividualSport <·
TeamSport
<·
Basketball
<·
TennisRacket
<·
Basket
:=

Tennis

>
>
SportKind
SportKind
SportTool
SportTool
SportKindu
(∃KindOfSport.>)u
(∀KindOfSport.TeamSport)u
(∃HasSportTool.>)u
(∀HasSportTool.Basketball)
: = SportKindu
(∃KindOfSport.>)u
(∀KindOfSport.IndividualSport)u
(∃HasSportTool.>)u
(∀HasSportTool.TennisRacket)

Suppose that there are two video sequences v1, v2, which are about basket and tennis, respectively. We may represent the semantic content of them through
Kv1 = {v1:Video u ∃About.Basket}
Kv2 = {v2:Video u ∃About.Tennis}.
Consider K = KT ∪ Kv1 ∪ Kv2 . If we are interested in retrieving videos about sport, we may
query K through the query concept Q = Video u ∃About.SportKind and the answer will be
the list containing both v1 and v2, as K |= v1:Q and K |= v2:Q hold.
142

Reasoning within Fuzzy DLs

On the other hand, if we are looking for individual sport videos, then, given the query
concept Q0 = Video u ∃About.∃KindOfSport.IndividualSport, it follows that only video v2 will
be retrieved. In fact, K|=
6 v1:Q0 and K |= v2:Q0 hold.
2

3. A Fuzzy DL
Our fuzzy extension directly relates to Zadeh’s work on fuzzy sets (Zadeh, 1965). A fuzzy set
S with respect to an universe U is characterised by a membership function µS : U → [0, 1],
assigning an S-membership degree, µS (u), to each element u in U . µS (u) gives us an
estimation of the belonging of u to S. Typically, if µS (u) = 1 then u definitely belongs to
S, while µS (u) = 0.8 means that u is “likely” to be an element of S. Moreover, according to
Zadeh, the membership function has to satisfy three well known restrictions: for all u ∈ U
and for all fuzzy sets S1 , S2 with respect to U
µS1 ∩S2 (u) = min{µS1 (u), µS2 (u)}
µS1 ∪S2 (u) = max{µS1 (u), µS2 (u)}
µS1 (u)
= 1 − µS1 (u) ,
where S1 is the complement of S1 in U . Alternative restrictions on membership functions
have been proposed in the literature, but it is not our aim to investigate them here (the
interested reader may consult e.g. Dubois & Prade, 1980).
A justification of the choice of the min and the max was given by Bellman and Giertz
(1973), which have shown that under certain reasonable conditions min and max are the
unique possible choice for set intersection and set union, respectively.
When we switch to fuzzy logics, the notion of degree of membership µS (u) of an element
u ∈ U w.r.t. the fuzzy set S over U is regarded as the truth-value of the statement “u is
S”. Accordingly, in our fuzzy DL, (i) a concept C, rather than being interpreted as a
classical set, will be interpreted as a fuzzy set and, thus, concepts become imprecise; and,
consequently, (ii) the statement “a is C”, i.e. a:C, will have a truth-value in [0, 1] given by
the degree of membership of being the individual a a member of the fuzzy set C.
3.1 Fuzzy Interpretation
A fuzzy interpretation is now a pair I = (∆I , ·I ), where ∆I is, as for the crisp case, the
domain, whereas ·I is an interpretation function mapping
1. individuals as for the crisp case, i.e. aI 6= bI , if a 6= b;
2. a concept C into a membership function C I : ∆I → [0, 1];
3. a role R into a membership function RI : ∆I × ∆I → [0, 1].
If C is a concept then C I will naturally be interpreted as the membership degree function
of the fuzzy concept (set) C w.r.t. I, i.e. if d ∈ ∆I is an object of the domain ∆I then
C I (d) gives us the degree of being the object d an element of the fuzzy concept C under
the interpretation I. Similarly for roles. Additionally, the interpretation function ·I has to
satisfy the following equations: for all d ∈ ∆I ,
143

Straccia

>I (d)
⊥I (d)
(C u D)I (d)
(C t D)I (d)
(¬C)I (d)
(∀R.C)I (d)
(∃R.C)I (d)

=
=
=
=
=
=
=

1
0
min{C I (d), DI (d)}
max{C I (d), DI (d)}
1 − C I (d)
inf d0 ∈∆I {max{1 − RI (d, d0 ), C I (d0 )}}
supd0 ∈∆I {min{RI (d, d0 ), C I (d0 )}}.

These equations are the standard interpretation of conjunction, disjunction, negation and
quantification, respectively (see Lee, 1972; Tresp & Molitor, 1998).
Note that the semantics of ∃R.C
(∃R.C)I (d) = supd0 ∈∆I {min{RI (d, d0 ), C I (d0 )}}

(14)

is the result of viewing ∃R.C as the open first order formula ∃y.FR (x, y) ∧ FC (y) (see (9))
and the existential quantifier ∃ is viewed as a disjunction over the elements of the domain.
Similarly,
(∀R.C)I (d) = inf d0 ∈∆I {max{1 − RI (d, d0 ), C I (d0 )}}

(15)

is related to the open first order formula ∀y.¬FR (x, y) ∨ FC (y) (see (8)), where the universal
quantifier ∀ is viewed as a conjunction over the elements of the domain.
We will say that two concepts C and D are said to be equivalent (denoted by C ∼
= D)
when C I = DI for all interpretations I. As for the crisp non fuzzy case, dual relationships
between concepts hold: e.g. > ∼
= ¬ ⊥, (C u D) ∼
= ¬(¬C t ¬D) and (∀R.C) ∼
= ¬(∃R.¬C).
3.2 Fuzzy Assertion
A fuzzy assertion (denoted by ψ) is an expression having one of the following form hα ≥ ni
or hα ≤ mi, where α is an ALC assertion, n ∈ (0, 1] and m ∈ [0, 1). From a semantics point
of view, a fuzzy assertion hα ≤ ni constrains the truth-value of α to be less or equal to n
(similarly for ≥). Consequently, e.g. hv1:Video u ∃About.Basket ≥ 0.8i states that video v1 is
likely about basket. Formally, an interpretation I satisfies a fuzzy assertion ha:C ≥ ni (resp.
h(a, b):R ≥ ni) iff C I (aI ) ≥ n (resp. RI (aI , bI ) ≥ n). Similarly, an interpretation I satisfies
a fuzzy assertion ha:C ≤ ni (resp. h(a, b):R ≤ ni) iff C I (aI ) ≤ n (resp. RI (aI , bI ) ≤ n).
Two fuzzy assertions ψ 1 and ψ 2 are said to be equivalent (denoted by ψ 1 ∼
= ψ 2 ) iff they are
satisfied by the same set of interpretations. Notice that the combination of both ha:C ≥ mi
and ha:C ≤ ni, with m ≤ n, restricts the truth-value of a:C in between [m, n]. Moreover,
ha:¬C ≥ ni ∼
= ha:C ≤ 1 − ni. A primitive fuzzy assertion is a fuzzy assertion involving a
primitive assertion.
One might wonder why we do not allow expressions of the form hα > ni or the form
hα < ni. The reason simply relies on the observation that it is quite hard to imagine
situations in which we are able to assert such strict >, < relations. So we will leave them
out for ease.4
4. Of course, the whole can easily be extended in case we would like to consider these two types of assertions
too.

144

Reasoning within Fuzzy DLs

Note that in the work of Straccia (1998), no fuzzy assertion of the form hα ≤ ni is
allowed.
3.3 Fuzzy Terminological Axiom
Fuzzy terminological axioms we will consider are a natural extension of classical terminological axioms to the fuzzy case. From a syntax point of view, a fuzzy terminological axiom
(denoted by τ̃ ) is either a fuzzy concept specialisation or a fuzzy concept definition. A fuzzy
concept specialisation is an expression of the form A≺·C, where A is a primitive concept
and C is a concept. On the other hand, a fuzzy concept definition is an expression of the
form A:≈ C, where A is a primitive concept and C is a concept. From a semantics point of
view, we consider the natural extension of classical set inclusion to the fuzzy case (Zadeh,
1965). A fuzzy interpretation I satisfies a fuzzy concept specialisation A≺·C iff
∀d ∈ ∆I , AI (d) ≤ C I (d),

(16)

whereas I satisfies a fuzzy concept definition A:≈ C iff
∀d ∈ ∆I , AI (d) = C I (d).

(17)

Note that in the work of Straccia (1998) a fuzzy specialisation is “non-standard”. Indeed, Straccia (1998) considered fuzzy specialisations of the form hA → C ≥ ni where
(A → C)I = mind∈∆I {max{1 − AI (d), C I (d)}}. A drawback of this formulation is that
it is not clear where the n in hA → C ≥ ni comes from, i.e. who defines the value n and
how it is determined. We prefer to rely here on the standard interpretation of fuzzy subsets.
3.4 Fuzzy Knowledge Base, Fuzzy Entailment and Fuzzy Subsumption
A fuzzy knowledge base is a finite set of fuzzy assertions and fuzzy terminological axioms.
As for the crisp case, with ΣA we will denote the set of fuzzy assertions in Σ, with ΣT we
will denote the set of fuzzy terminological axioms in Σ (the terminology), if ΣT = ∅ then Σ
is purely assertional, and we will assume that a terminology ΣT is such that no concept A
appears more than once on the left hand side of a fuzzy terminological axiom τ̃ ∈ ΣT and
that no cyclic definitions are present in ΣT .
An interpretation I satisfies (is a model of ) a set of fuzzy Σ iff I satisfies each element
of Σ. A fuzzy KB Σ fuzzy entails a fuzzy assertion ψ (denoted by Σ|≈ψ) iff every model of
Σ also satisfies ψ.
Furthermore, let ΣT be a terminology and let C, D be two concepts. We will say
that D fuzzy subsumes C w.r.t. ΣT (denoted by C ¹ΣT D) iff for every model I of ΣT ,
∀d ∈ ∆I , C I (d) ≤ DI (d) holds.
Finally, given a fuzzy KB Σ and an assertion α, it is of interest to compute α’s best
lower and upper truth-value bounds. To this end we define the greatest lower bound of
α w.r.t. Σ (denoted by glb(Σ, α)) to be sup{n : Σ|≈hα ≥ ni}. Similarly, we define the
least upper bound of α with respect to Σ (denoted by lub(Σ, α)) to be inf{n : Σ|≈hα ≤ ni}
(sup ∅ = 0, inf ∅ = 1). Determining the lub and the glb is called the Best Truth-Value Bound
(BTVB) problem.
145

Straccia

4. Some Properties
In this section we discuss some properties of our fuzzy logic. Several properties described
by Straccia (2000b) for the propositional case are easily extended to our first order case too.
4.1 Concept Equivalence
∼ C u>=
∼ C, C t > =
∼ >, Cu ⊥=⊥,
∼ Ct ⊥=
∼ C,
The first ones are straightforward: ¬> =⊥,
∼
∼
∼
∼
¬¬C = C, ¬(C uD) = ¬C t¬D, ¬(C tD) = ¬C u¬D, C1 u(C2 tC3 ) = (C1 uC2 )t(C1 uC3 )
and C1 t (C2 u C3 ) ∼
= (C1 t C2 ) u (C1 t C3 ). For concepts involving roles, we have ∀R.C ∼
=
∼
∼
∼
¬∃R.¬C, ∀R.> = >, ∃R. ⊥=⊥ and (∀R.C) u (∀R.D) = ∀R.(C u D). Please, note that we
and
do not have C u ¬C ∼
6
=⊥
=⊥, nor we have C t ¬C ∼
= > and, thus, (∃R.C) u (∀R.¬C) ∼
I
(∃R.C) t (∀R.¬C) 6∼
= > hold. In general we can only say that (C u ¬C) (d) ≤ 0.5, for any
interpretation I and d ∈ ∆I and, similarly, (C t ¬C)I (d) ≥ 0.5, i.e. lub(∅, a:¬C u C) = 0.5
and glb(∅, a:¬C t C) = 0.5, respectively.
4.2 Entailment Relation
Of course, Σ|≈hα ≥ ni iff glb(Σ, α) ≥ n, and similarly Σ|≈hα ≤ ni iff lub(Σ, α) ≤ n hold.
Concerning roles, note that Σ|≈h(a, b):R ≥ ni iff h(a, b):R ≥ mi ∈ Σ with m ≥ n. Therefore,
glb(Σ, R(a, b)) = max{n : hR(a, b) ≥ ni ∈ Σ}

(18)

while the same is not true for the ≤ case. While h(a, b):R ≤ mi ∈ Σ and m ≤ n imply
Σ|≈h(a, b):R ≤ ni, the converse is false (e.g. {ha:∀R.A ≥ 1i, hb:A ≤ 0i}|≈h(a, b):R ≤ 0i)).
Furthermore, from Σ|≈ha:C ≤ ni iff Σ|≈ha:¬C ≥ 1 − ni,
1 − lub(Σ, C(a)) =
=
=
=
=

1 − inf{n : Σ|≈ha:C ≤ ni}
sup{1 − n : Σ|≈ha:C ≤ ni}
sup{n : Σ|≈ha:C ≤ 1 − ni}
sup{n : Σ|≈ha:¬C ≥ ni}
glb(Σ, a:¬C).

follows. Therefore,
lub(Σ, a:C) = 1 − glb(Σ, a:¬C),

(19)

i.e. lub can be determined through glb (and vice-versa). The same reduction to glb does
not hold for lub(Σ, (a, b):R) as (a, b):¬R is not an expression of our language.5
Modus ponens on concepts is supported: if m > 1−n then {ha:C ≥ mi, ha:¬C t D ≥ ni}|≈
ha:D ≥ ni holds.
Modus ponens on roles is supported: if m > 1 − n then {h(a, b):R ≥ mi, ha:∀R.D ≥ ni}
|≈ha:D ≥ ni and {ha:∃R.C ≥ mi, ha:∀R.D ≥ ni} |≈ha:∃R.(C u D) ≥ min{n, m}i hold. Moreover, {ha:∀R.C ≥ mi, ha:∀R.D ≥ ni} |≈ha:∀R.(C u D) ≥ min{n, m}i holds.
Modus ponens on specialisation is supported. The following degree bounds propagation
through a taxonomy is supported. If C ¹Σ D then (i) Σ ∪ {ha:C ≥ ni}|≈ha:D ≥ ni; and
(ii) Σ ∪ {ha:D ≤ ni}|≈ha:C ≤ ni hold.
5. Of course, lub(Σ, (a, b):R) = 1 − glb(Σ, (a, b):¬R) holds, where (¬R)I (d, d0 ) = 1 − RI (d, d0 ).

146

Reasoning within Fuzzy DLs

Note that, according to Straccia (1998)
if m > 1 − n then {ha:A ≥ mi, hA → C ≥ ni}|≈ha:C ≥ ni.
A drawback of the above property is that whatever the degree m is (as long as m > 1 − n),
from ha:A ≥ mi and hA → C ≥ ni we infer ha:C ≥ ni, where n is a priori fixed value.
4.3 Soundness of the Semantics
Our fuzzy semantics is sound w.r.t. crisp semantics. In fact, let Σ be a fuzzy KB in which
no h(a, b):R ≤ ni occurs. We leave these fuzzy assertions out, as role negation is not present
in crisp ALC. Let us consider the following transformation ](·) of fuzzy assertions into
assertions, where ](·) takes the “crisp” assertional part of a fuzzy assertion:
]hα ≥ ni 7→ α
]ha:C ≤ ni 7→ a:¬C.
We extend ](·) to fuzzy terminological axioms as follows: ]τ̃ = τ . Finally, ]Σ = {]ψ : ψ ∈
Σ} ∪ {]τ̃ : τ̃ ∈ ΣT }.
It is quite easily to verify that
Proposition 1 Let Σ be a fuzzy KB in which no h(a, b):R ≤ ni occurs and let ψ be a fuzzy
assertion hα ≥ ni. If Σ|≈hα ≥ ni then ]Σ |= ]ψ (i.e. there cannot be fuzzy entailment
without entailment in ALC).
a
Proof: Consider a classical interpretation I satisfying ]Σ. I is also a fuzzy interpretation
such that C I (d) ∈ {0, 1}, RI (d, d0 ) ∈ {0, 1} hold. By induction on the structure of a
concept C it can be shown that I (classically) satisfies a:C iff C I (aI ) = 1. Similarly for
roles. Therefore, I is a fuzzy interpretation satisfying Σ. By hypothesis, I satisfies hα ≥ ni
and n > 0. Therefore, the truth-value of α under I is 1, i.e. I satisfies α. 2
For the general case, Σ has to be satisfiable as h(a, b):R ≤ ni may introduce an inconsistency,
e.g. {h(a, b):R ≤ 0.3i, h(a, b):R ≥ 0.4i}|≈ha:A ≥ 1i, but {(a, b):R} 6|= a:A}.
The converse of Proposition 1 does not hold in general.
Example 2 Let Σ be the set Σ = {ha:A t B ≤ 0.6i, ha:A ≥ 0.3i}. It follows that ]Σ =
{a:¬(A t B), a:A} which is unsatisfiable. Therefore, it can easily be verified that ]Σ |= a:B,
but Σ |≈
6 ha:B ≥ ni, for all n > 0.
2
Once we restrict the attention to normalised fuzzy assertions, a converse relation follows
immediately (Lee, 1972; Straccia, 2000b).
Indeed, we say that a fuzzy assertion ψ is KB-normalised iff
1. if ψ is hα ≥ ni then n > 0.5;
2. if ψ is hα ≤ ni then n < 0.5.
We say that a fuzzy assertion ψ is query-normalised iff
147

Straccia

1. if ψ is hα ≥ ni then n ≤ 0.5;
2. if ψ is hα ≤ ni then n ≥ 0.5.
Note that the definitions for KB-normalisation and query-normalisation are dual. The
following proposition follows from (Lee, 1972; Straccia, 2000b) and relies on the fact that
hα ≥ ni and hα ≤ mi are together inconsistent, if n > 0.5 and m < 0.5. In particular,
Straccia (2000b) shows that if Σ and ψ are a normalised fuzzy propositional KB and a
query-normalised fuzzy proposition, then Then Σ|≈ψ iff ]Σ |= ]ψ. The proof is given
by showing that from a deduction proving Σ|≈ψ a deduction proving ]Σ |= ]ψ can be
build and vice-versa. The extension to our case is straightforward as e.g. for n, m > 0.5,
ha:∀R.C ≥ ni,h(a, b):R ≥ mi|≈hb:C ≥ ni iff a:∀R.C, (a, b):R |= b:C holds (the other firstorder cases involving ∀ and ∃ are similar).
Proposition 2 Let Σ be a fuzzy KB in which no h(a, b):R ≤ ni occurs and each ψ ∈ Σ is
KB-normalised. Let ψ be a query-normalised fuzzy assertion. Then Σ|≈ψ iff ]Σ |= ]ψ. a
Example 3 Let Σ be the set Σ = {ha:A u B ≤ 0.4i, ha:A ≥ 0.6i}. Let ψ be ha:B ≤ 0.7i.
Each fuzzy assertion in Σ is KB-normalised and ψ is query-normalised. It follows that
]Σ = {a:¬(A u B), a:A} and ]ψ = a:¬B. It is easily verified that Σ|≈ψ and that ]Σ |= ]ψ,
thereby confirming Proposition 2.
2
4.4 Subsumption
At first, as for the classical case and with the same method seen before, subsumption
between two concepts C and D w.r.t. a terminology ΣT , i.e. C ¹ΣT D, can be reduced to
the case of an empty terminology, i.e. C 0 ¹∅ D0 .
Example 4 Suppose we have two images i1 and i2 each being a snapshot of the car traffic
on a major street of an European city. An underlying image analysis tool recognizes, among
all the recognised objects, that in image i1 there is a Ferrari, while in image i2 there is a
Porsche. Furthermore, a semantic image indexing tool establishes that, to some degree n
image i1 is about a Ferrari, whereas to some degree m image i2 is about a Porsche. Please
note that, as a weight of a keyword in text is a quantitative description of the aboutness of
the text w.r.t. the keyword, a truth-degree gives a quantitative description of the aboutness
of an images w.r.t. an object, i.e. the aboutness is handled as an imprecise concept. So, let
us consider
Σ = {hi1:∃About.Ferrari ≥ 0.6i, hi2:∃About.Porsche ≥ 0.8i,
Ferrari≺·Car, Porsche≺·Car}.
where the axioms specify that both a Ferrari and a Porsche are a car. According to the
expansion process, Σ will be replaced by
Σ0 = {hi1:∃About.Ferrari ≥ 0.6i, hi2:∃About.Porsche ≥ 0.8i,
Ferrari:≈ Car u Ferrari∗ , Porsche:≈ Car u Porsche∗ },
which will be simplified to
148

Reasoning within Fuzzy DLs

Σ00 = {hi1:∃About.(Car u Ferrari∗ ) ≥ 0.6i,
hi2:∃About.(Car u Porsche∗ ) ≥ 0.8i}.
Now, if we are looking for images which are about cars, then from Σ we may infer that Σ |≈
hi1:∃About.Car ≥ 0.6i and Σ|≈hi2:∃About.Car ≥ 0.8i. Furthermore, it is easily verified that
Σ00 |≈ hi1:∃About.Car ≥ 0.6i and Σ00 |≈hi2:∃About.Car ≥ 0.8i hold as well. Indeed, for any
fuzzy assertion ψ, Σ|≈ψ iff Σ00 |≈ψ holds.
2
We conclude this section with the analogue of Example 1 for the fuzzy case..
Example 5 Consider the terminology KT and the query concept Q in Example 1. Let
us define ΣT as the fuzzy KB derived from KT in which each terminological axiom τ has
been replaced with the fuzzy terminological axiom τ̃ . Moreover, let us suppose that an
underlying semantic video indexing tool furnishes the following semantic descriptions of the
two videos v1 and v2.
Σv1 = {hv1:Video ≥ 1i, hv1:∃About.Basket ≥ 0.9i}
Σv2 = {hv2:Video ≥ 1i, hv2:∃About.Tennis ≥ 0.6i},
i.e. video v1 is about basket with degree 0.9, whereas video v2 is about tennis with degree
0.6. Let us consider Σ = ΣT ∪ Σv1 ∪ Σv2 . It is easily verified that glb(Σ, v1:Q) = 0.9,
whereas glb(Σ, v2:Q) = 0.6 hold. Therefore, video v1 will be ranked before video v2 after
the retrieval process.
2

5. Decision Algorithms in Fuzzy ALC
Deciding whether Σ|≈hα ≥ ni or Σ|≈hα ≤ mi requires a calculus. Without loss of generality
we will consider purely assertional fuzzy KBs only.
We will develop a calculus in the style of the constraint propagation method, as this
method is usually proposed in the context of DLs (Buchheit et al., 1993a). The calculus
extends the fuzzy propositional calculus described by Chen and Kundu (1996) and by
Straccia (2000b) to our fuzzy DL case. We first address the entailment problem, then the
subsumption problem and finally the BTVB problem. Both the subsumption problem and
the BTVB problem will be reduced to the entailment problem.
5.1 A Decision Procedure for the Entailment Problem
Consider a new alphabet of ALC variables. An interpretation is extended to variables by
mapping these into elements of the interpretation domain. An ALC object (denoted by w)
is either an individual or a variable.6
A constraint (denoted by α) is an expression of the form w:C or (w, w0 ):R, where w, w0
are objects, C is an ALC concept and R is a role. A fuzzy constraint (denoted by ψ) is an
expression having one of the following four forms: hα ≥ ni, hα > ni, hα ≤ ni, hα < ni. Note
that assertions and fuzzy assertions are constraints and fuzzy constraints, respectively.
6. In the following, if there is no ambiguity, ALC variables and ALC objects are called variables and objects,
respectively.

149

Straccia

The definitions of satisfiability of a constraint, a fuzzy constraint, a set of constraints,
a set of fuzzy constraints, primitive constraint and primitive fuzzy constraint are obvious.
It is quite easily verified that the fuzzy entailment problem can be reduced to the
unsatisfiability problem of a set of fuzzy constraints:
Σ|≈hα ≥ ni

iff

Σ ∪ {hα < ni} not satisfiable

(20)

Σ|≈hα ≤ ni

iff

Σ ∪ {hα > ni} not satisfiable.

(21)

Our calculus, determining whether a finite set S of fuzzy constraints is satisfiable or not, is
based on a set of constraint propagation rules transforming a set S of fuzzy constraints into
“simpler” satisfiability preserving sets Si until either all Si contain a clash (indicating that
from all the Si no model of S can be build) or some Si is completed and clash-free, that is,
no rule can be further be applied to Si and Si contains no clash (indicating that from Si a
model of S can be build).
A set of fuzzy constraints S contains a clash iff it contains either one of the constraints in
Table 1 or S contains a conjugated pair of fuzzy constraints. Each entry in Table 2 says us
hw:⊥ ≥ ni, where n > 0
hw:> ≤ ni, where n < 1
hw:⊥ > ni, hw:> < ni, hw:C < 0i, hw:C > 1i
Table 1: Clashes

hα ≥ ni
hα > ni

hα < mi hα ≤ mi
n≥m
n>m
n≥m
n≥m

Table 2: Conjugated Pairs
under which condition the row-column pair of fuzzy constraints is a conjugated pair. Given
a fuzzy constraint ψ, with ψ c we indicate a conjugate of ψ (if there exists one). Notice that
a conjugate of a fuzzy constraint may be not unique, as there could be infinitely many. For
instance, both ha:C < 0.6i and ha:C ≤ 0.7i are conjugates of ha:C ≥ 0.8i.
Concerning the rules, for each connective u, t, ¬, ∀, ∃ there is a rule for each relation ≥, >
, ≤, <, i.e. there are 20 rules. The rules have the form:
Φ → Ψ if Γ

(22)

where Φ and Ψ are sequences of fuzzy constraints and Γ is a condition. A rule fires only
if the condition Γ holds, if the current set S of fuzzy constraints contains fuzzy constraints
matching the precondition Φ and the consequence Ψ is not already in S. After firing, the
constraints from Ψ are added to S. The rules are the following:
150

Reasoning within Fuzzy DLs

(¬≥ )

hw:¬C ≥ ni → hw:C ≤ 1 − ni

(¬> )

hw:¬C > ni → hw:C < 1 − ni

(¬≤ )

hw:¬C ≤ ni → hw:C ≥ 1 − ni

(¬< )

hw:¬C < ni → hw:C > 1 − ni

(u≥ )

hw:C u D ≥ ni → hw:C ≥ ni, hw:D ≥ ni

(u> )

hw:C u D > ni → hw:C > ni, hw:D > ni

(t≤ )

hw:C t D ≤ ni → hw:C ≤ ni, hw:D ≤ ni

(t< )

hw:C t D < ni → hw:C < ni, hw:D < ni

(t≥ )

hw:C t D ≥ ni → hw:C ≥ ni | hw:D ≥ ni

(t> )

hw:C t D > ni → hw:C > ni | hw:D > ni

(u≤ )

hw:C u D ≤ ni → hw:C ≤ ni | hw:D ≤ ni

(u< )

hw:C u D < ni → hw:C < ni | hw:D < ni

(∀≥ )

hw1 :∀R.C ≥ ni, ψ c → hw2 :C ≥ ni
if ψ is h(w1 , w2 ):R ≤ 1 − ni

(∀> )

hw1 :∀R.C > ni, ψ c → hw2 :C > ni
if ψ is h(w1 , w2 ):R < 1 − ni

(∃≤ )

hw1 :∃R.C ≤ ni, ψ c → hw2 :C ≤ ni
if ψ is h(w1 , w2 ):R ≤ ni

(∃< )

hw1 :∃R.C < ni, ψ c → hw2 :C < ni
if ψ is h(w1 , w2 ):R < ni

(∃≥ )

hw:∃R.C ≥ ni → h(w, x):R ≥ ni, hx:C ≥ ni
if x new variable and there is no w0 such that both
h(w, w0 ):R ≥ ni and hw0 :C ≥ ni are already in the constraint set

(∃> )

hw:∃R.C > ni → h(w, x):R > ni, hx:C > ni
if x new variable and there is no w0 such that both
h(w, w0 ):R > ni and hw0 :C > ni are already in the constraint set

(∀≤ )

hw:∀R.C ≤ ni → h(w, x):R ≥ 1 − ni, hx:C ≤ ni
if x new variable and there is no w0 such that both
h(w, w0 ):R ≥ 1 − ni and hw0 :C ≤ ni are already in the constraint set

(∀< )

hw:∀R.C < ni → h(w, x):R > 1 − ni, hx:C < ni
if x new variable and there is no w0 such that both
h(w, w0 ):R > 1 − ni and hw0 :C < ni are already in the constraint set
151

(23)

Straccia

Examples of rule instances are the following:
(∀≥ )

ha:∀R.C ≥ 0.7i, h(a, b):R ≥ 0.6i ⇒ hb:C ≥ 0.7i
ψ is h(a, b):R ≤ 0.3i
ψ c = h(a, b):R ≥ 0.6i is a conjugate of ψ

(∃< )

ha:∃R.C < 0.8i, h(a, b):R ≥ 0.9i ⇒ hb:C < 0.8i
ψ is h(a, b):R < 0.8i
ψ c = h(a, b):R ≥ 0.9i is a conjugate of ψ

(∃≥ )

ha:∃R.C ≥ 0.8i ⇒ h(w, x):R ≥ 0.8i, hx:C ≥ 0.8i
x new variable

(∀< )

ha:∀R.C < 0.8i ⇒ h(w, x):R > 0.2i, hx:C < 0.8i
x new variable.

A set of fuzzy constraints S is said to be complete if no rule is applicable to it. Any complete
set of fuzzy constraints S2 obtained from a set of fuzzy constraints S1 by applying the above
rules (23) is called a completion of S1 . Due to the rules (t≥ ), (t> ), (u≤ ) and (u< ), more
than one completion can be obtained. These rules are called nondeterministic rules. All
other rules are called deterministic rules.
It is easily verified that the above calculus has the termination property, i.e. any completion of a finite set of fuzzy constraints S can be obtained after a finite number of rule
applications.
Example 6 Let us consider the following fuzzy KB:
Σ = {ha:∃R.D ≥ 0.7i, ha:∀R.C ≥ 0.4i, h(a, b):R ≥ 0.5i, hb:C ≥ 0.2i, hb:D ≥ 0.3i}
Let α be the assertion a:∃R.(D u C), let ψ be the fuzzy assertion hα ≥ 0.4i, whereas let ψ 0 be
the fuzzy assertion hα ≥ 0.5i. It is easily verified that Σ|≈ψ, whereas Σ |≈
6 ψ 0 . We show that
0
Σ |≈
6 ψ , by verifying that there is a clash-free completion of S = Σ ∪ {ha:∃R.(D u C) < 0.5i}
(precisely, there are two of them).
By applying rules (23), we have the following sequences.
(1)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
(9)
(10)

ha:∃R.D ≥ 0.7i
ha:∀R.C ≥ 0.4i
h(a, b):R ≥ 0.5i
hb:C ≥ 0.2i
hb:D ≥ 0.3i
ha:∃R.(D u C) < 0.5i
h(a, x):R ≥ 0.7i, hx:D ≥ 0.7i
hx:C ≥ 0.4i
hb:D u C < 0.5i
hx:D u C < 0.5i
Ω1 | Ω 2
152

Hypothesis:S

(∃≥ ) : (1)
(∀≥ ) : (2), (7)
(∃< ) : (3), (6)
(∃< ) : (6), (7)

Reasoning within Fuzzy DLs

where the two sequences Ω1 and Ω2 are defined as follows: for Ω1 we have the two sequences
(11) hb:D < 0.5i (u< ) : (9)
(12) hx:D < 0.5i (u< ) : (10)
(13) clash
(7), (12)

(14) hx:C < 0.5i (u< ) : (10)
(15) clash-free

and for Ω2 we have the two sequences
(16) hb:C < 0.5i (u< ) : (9)
(17) hx:D < 0.5i (u< ) : (10)
(18) clash
(7), (17)

(19) hx:C < 0.5i (u< ) : (10)
(20) clash-free

2
Example 7 Consider Example 4 and let us prove that Σ00 |≈h(∃About.Car)(i1) ≥ 0.6i. We
prove the above relation by verifying that all completions of S = Σ00 ∪ {hi1:∃About.Car < 0.6i}
contain a clash. In fact, we have the following sequence.
(1)
(2)
(3)
(4)
(5)
(6)
(7)

hi1:∃About.(Car u Ferrari∗ ) ≥ 0.6i
Hypothesis:S
hi2:∃About.(Car u Porsche∗ ) ≥ 0.8i
hi1:∃About.Car < 0.6i
h(i1, x):About ≥ 0.6i, hx:(Car u Ferrari∗ ) ≥ 0.6i (∃≥ ) : (1)
hx:Car < 0.6i
(∃< ) : (3), (4)
(u) : (4)
hx:Car ≥ 0.6i, hx:Ferrari∗ ≥ 0.6i,
clash
(5), (6)

2
Proposition 3 A finite set of fuzzy constraints S is satisfiable iff there exists a clash free
completion of S.
a
Proof:
⇒ .) Given the termination property, it is easily verified, by case analysis, that the
above rules are sound, i.e. if S1 is satisfiable then there is a satisfiable completion S2
of S1 and, thus, S2 contains no clash. For instance, let us show that the (∀≥ ) rule is
sound. Assume I is an interpretation satisfying hw1 :∀R.C ≥ ni and h(w1 , w2 ):R ≥ mi,
where m > 1 − n. Let us show that I satisfies hw2 :C ≥ ni. Since I satisfies hw1 :∀R.C ≥ ni
it follows that max{1 − RI (w1 I , w2 I ), C I (w2 I )} ≥ n. But, RI (w1 I , w2 I ) ≥ m and, thus,
1 − RI (w1 I , w2 I ) ≤ 1 − m < n. As a consequence, C I (w2 I ) ≥ n follows, i.e. I satisfies
hw2 :C ≥ ni.
⇐ .) Suppose that there exists a clash free completion S 0 of S. We build from S 0 an
interpretation I satisfying S 0 and, as S ⊆ S 0 , I satisfies S. I is called canonical model.
For any primitive constraint α ∈ S 0 , we collect its lower and upper bound restrictions
in S 0 as follows: let
N ≥ [α] = {n : hα ≥ ni ∈ S 0 }
N > [α] = {n : hα > ni ∈ S 0 }
N ≤ [α] = {n : hα ≤ ni ∈ S 0 }
N < [α] = {n : hα < ni ∈ S 0 }.
153

Straccia

We have to define I such that for each constraint α, I satisfies the constraints collected
in the sets N (·) [α]: given N ≥ [α], the truth value n of α under I has to be such that
n ≥ max N ≥ [α], whereas w.r.t. N > [α], the truth value n of α under I has to be such that
n ≥ max N > [α] + ², for a ² > 0. Similarly, for the other cases, for instance, w.r.t. N < [α],
the truth value n of α under I has to be such that n ≤ max N > [α] − ², for a ² > 0. The
two tables below
N ≥ [α] N > [α]
glb[α, ²]
∅
∅
0
0
∅
6= ∅
n +²
6= ∅
∅
n
0
6= ∅
6= ∅
if n > n then n else n0 + ²
N ≤ [α] N < [α]
∅
∅
∅
6= ∅
6= ∅
∅
6= ∅
6= ∅

lub[α, ²]
1
m0 − ²
m
if m < m0 then m else m0 − ²

define for any α ∈ S 0 and ² > 0, lub[α, ²] and glb[α, ²], the lower and upper bound constraints
which I has to satisfy. In the tables, with n, n0 , m, m0 we indicate max N ≥ [α], max N > [α],
min N ≤ [α] and min N < [α], respectively. In each table we distinguish between the four cases
where the sets are empty (no constraints) or not. For instance, if for a constraint w:A, only
hw:A ≥ 0.3i, hw:A > 0.4i, hw:A ≤ 0.5i and hw:A < 0.6i are in S 0 , then according to the first
table bellow (row 4), for a ² > 0, glb[w:A, ²] = 0.4 + ², whereas lub[w:A, ²] = 0.5.
We will define I such that AI (wI ) = glb[w:A, ²]. To make sure that glb[w:A, ²] ≤
I
A (wI ) ≤ lub[w:A, ²], we have to choose an ² > 0 small enough such that glb[w:A, ²] ≤
lub[w:A, ²], i.e. 0.4 + ² ≤ 0.5. The existence of such an ² > 0 is guaranteed by the fact that
S 0 is clash-free. An additional condition that the choice of such an ² has to satisfy concerns
the case of a constraint α of type (w, w0 ):R. Let us show the problem with an example.
Suppose S 0 is {h(w, w0 ):R > 0.3i, hw:∀R.B ≥ 0.6i, hw0 :B ≤ 0.5i}. Therefore, according to
the above tables, glb[(w, w0 ):R, ²1 ] = 0.3 + ²1 , lub[(w, w0 ):R, ²1 ] = 1, glb[w0 :B, ²2 ] = 0
and lub[w0 :B, ²2 ] = 0.5. So, it seems that it is sufficient to choose an ²1 > 0 such that
0.3 + ²1 ≤ 1, which is indeed not the case. In fact, hw:∀R.B ≥ 0.6i and hw0 :B ≤ 0.5i
introduces an upper bound on (w, w0 ):R, i.e. the truth-value of (w, w0 ):R under I has to be
less or equal to 0.4 = 1 − 0.6. That is, we have to choose an ²1 > 0 such that 0.3 + ²1 ≤ 0.4.
Otherwise, the truth-value of w0 :B under I has to be greater or equal to 0.6, contradicting
lub[w0 :B, ²2 ] = 0.5. Again, the existence of such an ² is guaranteed as S 0 is clash-free.
Summing up: since S 0 is clash-free, it follows that for each primitive constraint α, there
is ²[α] > 0 such that
glb[α, ²[α]] ≤ lub[α, ²[α]]
where if α is (w, w0 ):R then
for
for
for
for

each
each
each
each

hw:∀R.C
hw:∀R.C
hw:∃R.C
hw:∃R.C

≥ ni,
> ni,
≤ ni,
< ni,

if
if
if
if

hw0 :C
hw0 :C
hw0 :C
hw0 :C

≥ ni 6∈ S 0
> ni 6∈ S 0
≤ ni 6∈ S 0
< ni 6∈ S 0
154

then
then
then
then

glb[α, ²[α]] ≤ 1 − n;
glb[α, ²[α]] < 1 − n;
glb[α, ²[α]] ≤ n;
glb[α, ²[α]] < n.

(24)

Reasoning within Fuzzy DLs

Now, consider the following interpretation I such that
1. the domain ∆I is the set of objects appearing in S 0 ;
2. wI = w, for all w ∈ ∆I ;
3. >I (wI ) = 1 and ⊥I (wI ) = 0, for all w ∈ ∆I ;
4. AI (wI ) = glb[w:A, ²[w:A]], for all primitive concepts A and for all w ∈ ∆I ; and
5. RI (wI , w0 I ) = glb[(w, w0 ):R, ²[(w, w0 ):R]], for all roles R and for all w, w0 ∈ ∆I .
We show, on induction on the structure of fuzzy constraints ψ ∈ S 0 , that I satisfies S 0 .
Case hw:A > ni: By definition, AI (wI ) = glb[w:A, ²[w:A]] > n and, thus, I satisfies
hw:A > ni. The cases ≥, ≤ and < are similar.
Case h(w, w0 ):R ≥ ni: By definition, RI (wI , w0 I ) = glb[(w, w0 ):R, ²[(w, w0 ):R]] ≥ n and,
thus, I satisfies h(w, w0 ):R ≥ ni. The cases >, ≤ and < are similar.
Case hw:C u D ≥ ni: From hw:C u D ≥ ni ∈ S 0 and S 0 completed, hw:C ≥ ni ∈ S 0 and
hw:D ≥ ni ∈ S 0 follows. By induction, I satisfies both hw:C ≥ ni and hw:D ≥ ni and, thus,
I satisfies hw:C u D ≥ ni. The cases >, ≤ and < are similar.
The cases involving ¬C and C t D can be shown similarly.
Case hw:∀R.C ≥ ni: Let α be (w, w0 ):R and consider hw0 :C ≥ ni. It follows that, either (i)
hw0 :C ≥ ni ∈ S 0 ; or (ii) hw0 :C ≥ ni 6∈ S 0 . Case (i): by induction, I satisfies hw0 :C ≥ ni and,
thus, max{1 − RI (w, w0 ), C I (w0 )} ≥ C I (w0 ) ≥ n. Case (ii): by construction RI (w, w0 ) =
glb[(w, w0 ):R, ²[(w, w0 ):R]] and RI (w, w0 ) ≤ 1−n (see Equation 24). It follows that max{1−
RI (w, w0 ), C I (w0 )} ≥ 1−RI (w, w0 ) ≥ n. Therefore, inf w0 ∈∆I max{1−RI (w, w0 ), C I (w0 )} ≥
n, i.e. I satisfies hw:∀R.C ≥ ni.
The cases hw:∀R.C > ni, hw:∃R.C ≤ ni and hw:∃R.C < ni can be shown similarly.
Case hw:∃R.C ≥ ni: Since S 0 is complete, both h(w, w0 ):R ≥ ni and hw0 :C ≥ ni are in
S 0 . By induction, I satisfies both h(w, w0 ):R ≥ ni and hw0 :C ≥ ni. As a consequence,
min{RI (w, w0 ), C I (w0 )} ≥ n follows and, thus, supw0 ∈∆I min{RI (w, w0 ), C I (w0 )} ≥ n, i.e.
I satisfies hw:∃R.C ≥ ni.
The cases hw:∃R.C > ni, hw:∀R.C ≤ ni and hw:∀R.C < ni can be shown similarly. 2
The following example shows how such an interpretation is build.
Example 8 Let us consider Example 6 and the fuzzy assertion ψ 0 . We have shown that
Σ |≈
6 ψ 0 by constructing two clash-free completions from S. Let us consider the clash-free
completion S1 in branch Ω1 :
S1 = Σ ∪ { ha:∃R.(D u C) < 0.5i, h(a, x):R ≥ 0.7i, hx:D ≥ 0.7i, hx:C ≥ 0.4i,
hb:D u C < 0.5i, hx:D u C < 0.5i, hb:D < 0.5i, hx:C < 0.5i}
We show that S1 is satisfiable by building an interpretation as described in the proof of
Proposition 3. Accordingly, for ²i > 0,
155

Straccia

glb[(a, b):R, ²1 ]
glb[b:C, ²2 ]
glb[b:D, ²3 ]
glb[(a, x):R, ²4 ]
glb[x:D, ²5 ]
glb[x:C, ²6 ]

=
=
=
=
=
=

0.5
0.2
0.3
0.7
0.7
0.4

lub[(a, b):R, ²1 ]
lub[b:C, ²2 ]
lub[b:D, ²3 ]
lub[(a, x):R, ²4 ]
lub[x:D, ²5 ]
lub[x:C, ²6 ]

=
=
=
=
=
=

1
1
0.5 − ²3
1
1
0.5 − ²6 .

Therefore, we can freely choose ²2 , ²4 and ²5 , whereas ²3 and ²6 have to be such that
0.3 ≤ 0.5 − ²3 and 0.4 ≤ 0.5 − ²6 . As both h(a, b):R ≥ 0.5i and ha:∀R.C ≥ 0.4i are in
S1 , while hb:C ≥ 0.4i 6∈ S1 , we have the additional restriction on the choice of ²1 (see
Equation 24) that glb[(a, b):R, ²1 ] ≤ 0.6. But, glb[(a, b):R, ²1 ] = 0.5 ≤ 0.6, for every ²1 and,
thus, the choice of ²1 is also free. A solution to the ²i is e.g. ²i = 0.1 and, thus, let I be the
following interpretation:
1. the domain ∆I is the set {a, b, x};
2. wI = w, for all w ∈ ∆I ;
3. >I (wI ) = 1 and ⊥I (wI ) = 0, for all w ∈ ∆I ;
4. C I (b) = 0.2, DI (b) = 0.3, DI (x) = 0.7 and C I (x) = 0.4 (in all other cases, AI (w) =
0); and
5. RI (a, b) = 0.5 and RI (a, x) = 0.7 (in all other cases, R0 I (w, w0 ) = 0).
Now, it is easily verified that I satisfies S1 and S.

2

From a computational complexity point of view, the fuzzy entailment problem can be proven
to be a PSPACE-complete problem, as is the classical entailment problem.
Proposition 4 Let Σ be a fuzzy KB and let ψ be a fuzzy assertion. Determining whether
Σ|≈ψ is a PSPACE-complete problem.
a
Proof: We have seen that termination of the above algorithm is guaranteed. Additionally,
for a crisp KB K, define ΣK = {hα ≥ 1i : α ∈ K}. By definition, each ψ ∈ ΣK is KBnormalised and hα ≥ 0.5i is query-normalised. Then from Proposition 2 it follows that
K |= α iff ΣK |≈hα ≥ 0.5i. From the PSPACE-completeness of the entailment problem in
crisp ALC (Schmidt-Schauß & Smolka, 1991), PSPACE-hardness of the fuzzy entailment
problem follows. Unfortunately, our algorithm, as it is, requires exponential space due a
well know problem inherited from the crisp case. Indeed, it easily verified that a completion
of S = {x:C}, where C is the concept
(∃R.A11 ) u (∃R.A12 ) u ∀R.((∃R.A21 ) u (∃R.A22 ) u . . . ∀R.((∃R.An1 ) u (∃R.An2 )) . . .)
contains at least 2n + 1 variables. In order to require polynomial space, Schmidt-Schauß
and Smolka (1991) introduced the so-called trace rule (T ∃) for the ∃ operator. The (T ∃)
rule modifies the (∃) rule as shown below.
156

Reasoning within Fuzzy DLs

(∃)

(T ∃)

w:∃R.C → (w, x):R, x:C
if x new variable and there is no w0 such that both (w, w0 ):R and w0 :C
are already in the actual constraint set
w:∃R.C → (w, x):R, x:C
if x new variable and no (w, w0 ):R0 is already in the actual set of constraints.

The difference between the (∃) rule and the (T ∃) is that the latter is applied only once
for an object w. We are thus compelled to make a nondeterministic choice amongst the
constraints of the form w:∃R.C. Furthermore, it is convenient to apply a trace rule only if
none of the other (u), (t), (¬) and (∀) rules are applicable.
We say that a set of constraints S 0 is a trace of a set S if S 0 obtained from S by
application of the rules where the (∃) has been replaced by (T ∃). Schmidt-Schauß and
Smolka (1991) have shown that a set of constraints S = {x:C} is satisfiable iff no trace S 0
of S contains a clash. As the size of a trace S 0 of S is bounded polynomially by the size of
S, polynomial space is sufficient to prove satisfiability.
The above trace rule works if we start from a constraint set of the form {x:C}. In
the general case, we have to rely on so-called pre-completions (Baader & Hollunder, 1991b;
Donini et al., 1994). A set of constraints S 0 is said to be a pre-completion of a given set
of constraints S, if it is obtained from S by the application of the (u), (t), (¬) and (∀)
rules, and none of these rules is applicable to S 0 (the size of S 0 is polynomially bounded
by the size of S). As a consequence of this “pre-processing” step, all role relationships
(w, w0 ):R ∈ S 0 can be ignored, i.e. removed from S 0 , because they no longer carry any
additional information. Now, in a second step we can apply the method above by checking
whether no trace from S 0 contains a clash. In summary, a set of constraints S is satisfiable
iff there is a pre-completion S 0 of S such that no trace S 00 of S 0 contains a clash.
In the fuzzy case, similar trace rules can easily be defined. For instance, the correspondent trace rule of the (∃≥ ) rule is
(T ∃≥ )

hw:∃R.C ≥ ni → h(w, x):R ≥ ni, hx:C ≥ ni
if x new variable and no h(w, w0 ):R0 ≥ mi is already in
the actual set of fuzzy constraints.

The trace rules correspondent to the rules (∃> ), (∀≤ ) and (∀< ) are defined similarly. By
proceeding as for the crisp case, it can be shown that (i) a set of fuzzy constraints S
is satisfiable iff there is a pre-completion S 0 of S such that no trace S 00 of S 0 contains a
clash; and (ii) the size of a trace S 00 of S is bounded polynomially by the size of S. As a
consequence, the satisfiability problem is in PSPACE, which completes the proof. 2
This result establishes an important property about our fuzzy DL. In effect, it says that no
additional computational cost has to be paid for the major expressive power.
5.2 A Decision Procedure for the Subsumption Problem
In this section we address the subsumption problem, i.e. deciding whether C ¹ΣT D, where
C and D are two concepts and Σ is a fuzzy terminology. As we have seen (see Example 4),
157

Straccia

C ¹ΣT D can be reduced to the case of an empty terminology by applying the KB expansion
process. So, without loss of generality, we can limit our attention to the case C ¹∅ D.
At first, an analogue to relation (12) holds. In fact, it can easily be shown that
Proposition 5 Let C and D be two concepts. It follows that C ¹∅ D iff for all n > 0
ha:C ≥ ni|≈ha:D ≥ ni, where a is a new individual.
a
Proof:
⇒ .) Assume that C ¹∅ D holds. Suppose to the contrary that ∃n > 0 such that
ha:C ≥ ni |≈
6 ha:D ≥ ni. Therefore, there is an interpretation I and an n > 0 such that
C I (aI ) ≥ n and DI (aI ) < n. But, from the hypothesis n ≤ C I (aI ) ≤ DI (aI ) < n follows.
Absurd.
⇐ .) Assume that for all n > 0, ha:C ≥ ni|≈ha:D ≥ ni holds. Suppose to the contrary
that C 6¹∅ D holds. Therefore, there is an interpretation I and d ∈ ∆I such that C I (d) >
DI (d) ≥ 0. Let us extent I to a such that aI = d and consider n = C I (d) > 0. Of course,
I satisfies ha:C ≥ ni. Therefore, from the hypothesis it follows that I satisfies ha:D ≥ ni,
i.e. DI (d) ≥ n = C I (d) > DI (d). Absurd. 2
How can we check whether for all n > 0 ha:C ≥ ni|≈ha:D ≥ ni holds? A solution to this
problem, restricted to the propositional case, is given by Straccia (2000a). Indeed, it is
shown that
Proposition 6 (Straccia, 2000a) Let p and q be two propositions, 0 < n1 ≤ 0.5 and
1 ≥ n2 > 0.5. It follows that for all n > 0, hp ≥ ni|≈hq ≥ ni iff for both m ∈ {n1 , n2 },
hp ≥ mi|≈hq ≥ mi holds.
a
The above proposition establishes that, at the propositional level, in order to check whether
hp ≥ ni|≈hq ≥ ni holds for all n, it is sufficient to check the entailment relation with respect
to two values n1 , n2 . The first being less or equal than 0.5, while the second being greater
than 0.5, respectively. This is due to the fact that for given values n, n0 ≤ 0.5, any proof of
hp ≥ ni|≈hq ≥ ni can be converted into a proof for hp ≥ n0 i|≈hq ≥ n0 i and vice-versa. The
case where n, n0 > 0.5 is similar.
The above proposition can be extended to our fuzzy DL as well.
Lemma 1 Let C and D be two concepts, 0 < n, n0 ≤ 0.5 and let a be an individual. It
follows that ha:C ≥ ni|≈ha:D ≥ ni iff ha:C ≥ n0 i|≈ha:D ≥ n0 i.
a
Proof:
It is enough to show that S = {ha:C ≥ ni, ha:D < ni} is satisfiable iff S 0 =
{ha:C ≥ n0 i, ha:D < n0 i} is satisfiable.
⇒ .) Assume that S is satisfiable. So, there is a clash-free completion S̃ of S. With
S̃[n/n0 ] we indicate the set of fuzzy constraints obtained from S̃, by replacing any value n
in S̃ with n0 and any value 1 − n in S̃ with 1 − n0 , respectively. We will show that S̃[n/n0 ]
is a clash-free completion of S 0 and, thus, S 0 is satisfiable.
Let r1 , . . . , rk , k ≥ 0 be the sequence of inference rule applications, which applied to S
get S̃. Let S̃0 = S, let S̃k = S̃ and for 1 ≤ i ≤ k let S̃i be the set of fuzzy constraints
obtained from S̃i−1 by the application of the ri rule to S̃i−1 .
By induction on k, we show that (i) the sequence of inference rules r1 , . . . , rk can be
applied to S 0 as well; (ii) for S̃ 0 0 = S 0 , S̃ 0 k = S̃ 0 and S̃ 0 i the set of fuzzy constraints obtained
158

Reasoning within Fuzzy DLs

from S̃ 0 i−1 by the application of the ri rule to S̃ 0 i−1 , we have that S̃ 0 i = S̃i [n/n0 ] and, thus,
S̃ 0 = S̃ 0 k = S̃k [n/n0 ] = S̃[n/n0 ]; and (iii) if S̃k is a clash-free completion of S then S̃ 0 k is a
clash-free completion of S 0 as well.
case k = 0: No rule is applicable to S and S̃0 = S is a completion of S. By case analysis, (i) it is easily verified that no rule is applicable to S 0 and (ii) S 0 = S̃ 0 0 =
S̃0 [n/n0 ] = S[n/n0 ]. (iii) So, S̃ 0 0 is a completion of S 0 . We show that S̃ 0 0 is clashfree. Assume to the contrary that S̃ 0 0 , i.e. S 0 contains a clash. As a consequence,
S 0 = {ha:C ≥ n0 i, ha:C < n0 i}. But then, S is {ha:C ≥ ni, ha:C < ni}, contrary to the
assumption that S is clash-free.
induction step: by case analysis on the rule rk . We limit our presentation to the (∀≥ )
rule as for the other the proof is similar.
If rk is (∀≥ ) then it can be verified that there are hw:∀R.C 0 ≥ ni and h(w, w0 ):R > 1 − ni
in S̃k−1 such that hw0 :C 0 ≥ ni 6∈ S̃k−1 and hw0 :C 0 ≥ ni ∈ S̃k . By induction, S̃k−1 [n/n0 ] =
S̃ 0 k−1 and, thus, both hw:∀R.C 0 ≥ n0 i and h(w, w0 ):R > 1 − n0 i are in S̃ 0 k−1 , while
hw0 :C 0 ≥ n0 i 6∈ S̃ 0 k−1 . Therefore, (i) rule rk is applicable to S̃ 0 k−1 and hw0 :C 0 ≥ n0 i ∈
S̃ 0 k ; (ii) so, S̃ 0 k = S̃k [n/n0 ]; (iii) from S̃ 0 k = S̃k [n/n0 ] and, as S̃k is a completion
of S, by case analysis, it is easily verified that no rule is further applicable to S̃ 0 k .
Therefore, S̃ 0 k is a completion of S 0 . Let us show that S̃ 0 k is clash free. Assume to
the contrary that S̃ 0 k contains a clash. If one of the cases in Table 1 holds, then from
S̃ 0 k = S̃k [n/n0 ] it follows easily that there is a clash in S̃k as well, which is contrary to
assumption that S̃k is clash-free. On the other hand, if there is a conjugated pair of
fuzzy constraints in S̃ 0 k (see Table 2), then one of the following three pairs is in S̃ 0 k :
(a) hα ≥ n0 i and hα < n0 i; (b) hα ≤ 1 − n0 i and hα > 1 − n0 i; and (c) hα < n0 i and
hα > 1 − n0 i (note that n, n0 ≤ 0.5). Again, as S̃ 0 k = S̃k [n/n0 ], it follows that there is
a conjugated pair in S̃k as well, which is contrary to assumption that S̃k is clash-free.
⇐ .) Can be proven similarly to ⇒ .). 2
By proceeding as for Lemma 1 it can be shown that
Lemma 2 Let C and D be two concepts, 1 ≥ n, n0 > 0.5 and let a be an individual. It
follows that ha:C ≥ ni|≈ha:D ≥ ni iff ha:C ≥ n0 i|≈ha:D ≥ n0 i.
a
From Lemma 1 and Lemma 2 it follows that
Proposition 7 Let C and D be two concepts, 0 < n1 ≤ 0.5, 1 ≥ n2 > 0.5 and let a be
an individual. It follows that for all n > 0 ha:C ≥ ni|≈ha:D ≥ ni iff for both m ∈ {n1 , n2 },
ha:C ≥ mi|≈ha:D ≥ mi holds.
a
As a consequence, the subsumption problem can be reduced to the entailment problem for
which we have a decision algorithm.
159

Straccia

5.3 A Decision Procedure for the BTVB Problem
We address now the problem of determining glb(Σ, α) and lub(Σ, α). This is important, as
computing, e.g. glb(Σ, α), is in fact the way to answer a query of type “to which degree is
α (at least) true, given the (imprecise) facts in Σ?”.
Without loss of generality, we will assume that all concepts are in NNF (Negation Normal
Form). Straccia (2000b) has shown that, in case of fuzzy propositional logic, from a set Σ of
fuzzy propositions of the form hp ≥ ni and hp ≤ ni, where p is a proposition, it is possible
to determine a finite set N Σ ⊂ [0, 1], where |N Σ | is O(|Σ|), such that glb(Σ, q) ∈ N Σ ,
i.e. the greatest lower bound of a proposition q w.r.t. Σ has to be an element of N Σ .
Therefore, glb(Σ, q) can be determined by computing the greatest value n ∈ N Σ such that
Σ|≈hq ≥ ni. An easy way to search for this n is to order the elements of N Σ and then
to perform a binary search among these values by successive entailment tests. Dually,
as lub(Σ, q) = 1 − glb(Σ, ¬q) holds, the lub can either be computed from the glb or, as
lub(Σ, q) ∈ 1 − N Σ , where 1 − N Σ = {1 − n : n ∈ N Σ }, we can compute it by determining
the smallest value in 1 − N Σ .

Proposition 8 (Straccia, 2000b) Let Σ be a set of fuzzy propositions in NNF and let q
be a proposition. Then glb(Σ, q) ∈ N Σ and lub(Σ, q) ∈ 1 − N Σ , where
NΣ

= {0, 0.5, 1} ∪
{n : hp ≥ ni ∈ Σ} ∪
{1 − n : hp ≤ ni ∈ Σ}

1 − N Σ = {1 − n : n ∈ N Σ }.
a
The above Proposition 8 can easily be extended our fuzzy description logic case. Essentially,
the quantifiers do not change the possible values of glb(Σ, F ) and lub(Σ, F ).
Proposition 9 Let Σ be a set of fuzzy assertions in NNF and let α be an assertion. Then
glb(Σ, α) ∈ N Σ and lub(Σ, α) ∈ 1 − N Σ , where
NΣ

= {0, 0.5, 1} ∪
{n : hα ≥ ni ∈ Σ} ∪
{1 − n : hα ≤ ni ∈ Σ}

1 − N Σ = {1 − n : n ∈ N Σ }.
a
Proof: Let us show that glb(Σ, α) ∈ N Σ . Let m be glb(Σ, α). By definition, if m = 0 then
S = Σ ∪ {hα < ni} is satisfiable for any n > 0 and 0 ∈ N Σ . Otherwise, m > 0 is the largest
value such that S = Σ ∪ {hα < mi} is not satisfiable. Let us mark each sub-expression in α
with a ∗ , so that we can trace the components of the query assertion α during a deduction.
160

Reasoning within Fuzzy DLs

Consider a completion S 0 of S. Starting from hα < mi, by applying the rules of inference,
only ∗ marked expressions of type hα0 < mi or hα0 > 1 − mi can appear in S 0 . Furthermore,
as S is not satisfiable, S 0 contains a clash, i.e. the value m is the largest value such that all
completions S 0 of S contain a clash. Let us analyse S 0 . As S 0 contains a clash, then either
(i) there is a clash according to Table 1, or (ii) there is a clash according to Table 2. If
(i) is the case, i.e. there is ψ ∈ S 0 which is a clash, then we have to distinguish between
two cases: (a) ψ is not marked with ∗ and (b) ψ is marked with ∗ . In the former case, S 0
contains a clash independently of the value m and, thus, the largest possible value m for
which S 0 contains a clash is 1. In the latter case, as m > 0, either ψ = hw:⊥ > 1 − mi or
ψ = hw:> < mi which are both clashes for any value of m. As a consequence, the largest
possible value m for which S 0 contains a clash according to Table 1 is 1. Assume (ii) is the
case, i.e. a conjugated pair of fuzzy constraints ψ and ψ 0 is in S 0 . Similarly to the previous
case, we have to distinguish the cases for which ψ and ψ 0 are marked with ∗ . There are four
cases:
(a) ψ = hα ≥ ki and ψ 0 = hα0 ≤ k 0 i are in S 0 , none is marked with ∗ and k > k 0 .
Therefore, S 0 contains a clash for any value of m and, thus, the largest choice is 1;
(b) ψ = hα ≥ ki and ψ 0 = hα0 < mi are in S 0 , only ψ 0 is marked with ∗ and k ≥ m.
Therefore, S 0 contains a clash for any value of m ≤ k and, thus, the largest choice for m is
k. It is easily verified by case analysis on the rules that from ψ ∈ S 0 , k ∈ N Σ follows;
(c) ψ = hα ≤ ki and ψ 0 = hα0 > 1 − mi are in S 0 , only ψ 0 is marked with ∗ and k ≤ 1−m.
Therefore, S 0 contains a clash for any value of m ≤ 1 − k and, thus, the largest choice for
m is 1 − k. It is easily verified by case analysis on the rules that from ψ ∈ S 0 , 1 − k ∈ N Σ
follows;
(d) ψ = hα < mi and ψ 0 = hα0 > 1 − mi are in S 0 , both are marked with ∗ and m ≤ 1−m.
Therefore, S 0 contains a clash for any value of m ≤ 0.5 and, thus, the largest choice for m
is 0.5.
Summing up, we have proved that the largest possible value for m is such that m ∈
2

N Σ.

The algorithms computing glb(Σ, α) and lub(Σ, α) are described in Table 3. For instance,
by a binary search on N Σ , the value of glb(Σ, α) can be determined in at most log |N Σ |
fuzzy entailment tests.

6. Conclusions and Future Work
In this work, we have presented a quite general fuzzy extension of the DL ALC, a significant
and expressive representative of the various DLs. Our fuzzy DL enables us to reason in
presence of imprecise ALC concepts, i.e. fuzzy ALC concepts. From a semantics point of
view, fuzzy concepts are interpreted as fuzzy sets i.e. given a concept C and an individual
a, C(a) is interpreted as the truth-value of the sentence “a is C”. From a syntax point of
view, we allow to specify lower and upper bounds of the truth-value of C(a). Complete
algorithms for reasoning in it have been presented, that is, we have devised algorithms for
solving the entailment problem, the subsumption problem as well as the best truth-value
bound problem.
161

Straccia

Algorithm M ax(Σ, α)
Set M in := 0 and M ax := 2.
1. Pick n ∈ N Σ \ {0} such that M in < n < M ax. If there is no such n, then
set glb(Σ, α) := M in and exit.
2. If Σ|≈hα ≥ ni then set M in = n, else set M ax = n. Go to Step 1.
Algorithm M in(Σ, α)
Set M in := 0 and M ax := 2.
1. Pick n ∈ (1 − N Σ ) \ {0} such that M in < n < M ax. If there is no such n,
then set lub(Σ, α) := min{M ax, 1} and exit.
2. If Σ|≈hα ≤ ni then set M ax = n, else set M in = n. Go to Step 1.

Table 3: Algorithms M ax(Σ, α) and M in(Σ, α)

An important point concerns computational complexity. The complexity result shows
that the additional expressive power has no impact from a computational complexity point
of view.
The extension of DLs to the management of vagueness is not new (Tresp & Molitor,
1998; Yen, 1991). Yen was the first, to the best of my knowledge, introducing vagueness
into a simple DL. His language has two interesting points not included into our language.
Firstly, it allows the definition of vague concepts by means of explicit membership functions
over a domain, e.g. LowPressure:≈ domain(AirPressure); membershipf x(λp.low(p)). Here
the domain over p ranges is given by AirPressure. λp.low(p) determines the membership
degree of being a pressure p low. Secondly, the language allows concept modifiers, like Very
or Slightly, by means of which concepts like “very low pressure” can be defined through
VeryLowPressure:≈ Very(LowPressure). This last idea has been generalised to ALC by Tresp
and Molitor (1998) where a certain type of concept modifiers are allowed. Strictly speaking, the language defined by Tresp and Molitor is more expressive, as we do not consider
concept modifiers. From a semantics point of view, the extension to Tresp and Molitor’s
language is quite straightforward. But, the cost that we have to pay for this increasing
expressive power is that, from a computational complexity and algorithms point of view,
things changes radically. Indeed, according to Tresp and Molitor for each “completion” a
linear optimisation problem is generated (set of inequations of the form op1 (t1 )Rop2 (t2 ) or
op1 (t1 )Rf (op2 (t2 )), where ti is a truth-value variable, R ∈ {≤, ≥, =, opi ∈ {id, mi }, with
id(t) the identity and mi (t) is a modifier function over truth-value variables, respectively,
and f ∈ {min, max}-derived from the semantics of the connectors u, t) and then solved for
the best value. Then, the minimum among all computed solutions is taken. The solutions
can be computed by relying on methods from the domain of linear programming, e.g. the
162

Reasoning within Fuzzy DLs

simplex method (Papadimitriou & Steiglitz, 1982). While it is possible to devise a similar
approach for our fuzzy DL as well, we have seen that this is not necessary.
Both aspects considered by Tresp and Molitor and by Yen, although interesting, are
not crucial w.r.t. how we model logic-based multimedia information retrieval, where underlaying text, image and video analysis tools provide us fuzzy assertions e.g. of the form
ha:∃About.C ≥ ni from which we may infer ha:∃About.D ≥ mi.
This work can be used as a basis both for extending existing DL based systems and for
further research. In this latter case, there are several open points. For instance, it is not clear
yet how to reason both in case of fuzzy specialisation of the general form C≺·D and in the
case cycles are allowed in a fuzzy KB. Another interesting topic for further research concerns
the semantics of fuzzy connectives. Of course several other choices for the semantics of the
connectives u, t, ¬, ∃, ∀ can be considered. While for a huge number of proposals given in
the literature their impact from a semantics point of view is well understood, the question
how they impact from a computational complexity and algorithms point of view remains
still open.

Acknowledgements
I would like to thank the three anonymous reviewers for their helpful comments on an early
version of this paper. This is an extension and revision of the paper appeared in AAAI-98.

References
Baader, F., & Hollunder, B. (1991a). KRIS: Knowledge representation and inference system,
system description. ACM SIGART Bulletin, 2, 8–14.
Baader, F., & Hollunder, B. (1991b). A terminological knowledge representation system
with complete inference algorithm. In Proc. of the Workshop on Processing Declarative
Knowledge, PDK-91, No. 567 in Lecture Notes in Artificial Intelligence, pp. 67–86.
Springer-Verlag.
Bacchus, F. (1990). Representing and Reasoning with Probabilistic Knowledge. The MIT
Press.
Bellman, R., & Giertz, M. (1973). On the analytic formalism of the theory of fuzzy sets.
Information Sciences, 5, 149–156.
Brachman, R. J. (1992). “reducing” CLASSIC to practice: Knowledge representation meets
reality. In Proc. of the 3rd Int. Conf. on the Principles of Knowledge Representation
and Reasoning (KR-92), pp. 247–258. Morgan Kaufmann, Los Altos.
Buchheit, M., Donini, F. M., & Schaerf, A. (1993a). Decidable reasoning in terminological
knowledge representation systems. In Proc. of the 13th Int. Joint Conf. on Artificial Intelligence (IJCAI-93), pp. 704–709 Chambery, France. Morgan Kaufmann, Los
Altos.
163

Straccia

Buchheit, M., Donini, F. M., & Schaerf, A. (1993b). Decidable reasoning in terminological
knowledge representation systems. Journal of Artificial Intelligence Research, 1, 109–
138.
Chen, J., & Kundu, S. (1996). A sound and complete fuzzy logic system using Zadeh’s
implication operator. In Ras, Z. W., & Maciek, M. (Eds.), Proc. of the 9th Int. Sym.
on Methodologies for Intelligent Systems (ISMIS-96), No. 1079 in Lecture Notes in
Artificial Intelligence, pp. 233–242. Springer-Verlag.
da Silva, R. M., Pereira, A. E. C., & Netto, M. A. (1994). A system of knowledge representation based on formulae of predicate calculus whose variables are annotated
by expressions of a fuzzy terminological logic. In Proc. of the 5th Int. Conf. on Information Processing and Managment of Uncertainty in Knowledge-Based Systems,
(IPMU-94), No. 945 in Lecture Notes in Computer Science. Springer-Verlag.
Donini, F. M., Lenzerini, M., Nardi, D., & Schaerf, A. (1994). Deduction in concept languages: From subsumption to instance checking. Journal of Logic and Computation,
4 (4), 423–452.
Dubois, D., & Prade, H. (1980). Fuzzy Sets and Systems. Academic Press, New York, NJ.
Dubois, D., & Prade, H. (1994). Can we enforce full compositionality in uncertainty calculi?.
In Proc. of the 11th Nat. Conf. on Artificial Intelligence (AAAI-94), pp. 149–154
Seattle, Washington.
Dubois, D., & Prade, H. (1996). Approximate and commonsense reasoning: From theory to
practice. In Ras, Z. W., & Maciek, M. (Eds.), Proc. of the 9th Int. Sym. on Methodologies for Intelligent Systems (ISMIS-96), No. 1079 in Lecture Notes in Artificial
Intelligence, pp. 19–33. Springer-Verlag.
Halpern, J. Y. (1990). An analysis of first-order logics of probability. Artificial Intelligence
Journal, 46, 311–350.
Heinsohn, J. (1994). Probabilistic description logics. In de Mantara, R. L., & Pool, D.
(Eds.), Proceedings of the 10th Conference on Uncertainty in Artificila Intelligence,
pp. 311–318.
Hollunder, B. (1994). An alternative proof method for possibilistic logic and its application to terminological logics. In 10th Annual Conference on Uncertainty in Artificial
Intelligence Seattle, Washington. R. Lopez de Mantaras and D. Pool.
Horrocks, I. (1998). Using an expressive description logic: Fact or fiction?. In Proc. of the
8th Int. Conf. on the Principles of Knowledge Representation and Reasoning (KR-98).
Jäger, M. (1994). Probabilistic reasoning in terminological logics. In Proceedings of KR94, 5-th International Conference on Principles of Knowledge Representation and
Reasoning, pp. 305–316 Bonn, FRG.
164

Reasoning within Fuzzy DLs

Koller, D., Levy, A., & Pfeffer, A. (1997). P-CLASSIC: A tractable probabilistic description
logic. In Proc. of the 14th Nat. Conf. on Artificial Intelligence (AAAI-97), pp. 390–
397.
Kruse, R., Schwecke, E., & Heinsohn, J. (1991). Uncertainty and Vagueness in Knowledge
Based Systems. Springer-Verlag, Berlin, Germany.
Lee, R. C. T. (1972). Fuzzy logic and the resolution principle. Journal of the ACM, 19 (1),
109–119.
Meghini, C., Sebastiani, F., & Straccia, U. (1997). Modelling the retrieval of structured
documents containing texts and images. In Proceedings of the First European Conference on Research and Advanced Technology for Digital Libraries, No. 1324 in Lecture
Notes in Computer Science, pp. 325–344 Pisa, Italy.
Meghini, C., Sebastiani, F., & Straccia, U. (1998). Mirlog: A logic for multimedia information retrieval. In Crestani, F., Lalmas, M., & van Rijsbergen, C. (Eds.), Logic and
Uncertainty in Information Retrieval: Advanced models for the representation and
retrieval of information, Vol. 4 of The Kluwer International Series On Information
Retrieval, chap. 7, pp. 151–185. Kluwer Academic Publishers, Boston, USA.
Meghini, C., & Straccia, U. (1996). A relevance terminological logic for information retrieval.
In Proceedings of the 19th Annual International ACM SIGIR Conference on Research
and Development in Information Retrieval (ACM SIGIR-96), pp. 197–205 Zurich,
Switzerland.
Nebel, B. (1988). Computational complexity of terminological reasoning in BACK. Artificial
Intelligence, 34, 371–383.
Nebel, B. (1990). Reasoning and revision in hybrid representation systems. Springer, Heidelberg, FRG.
Papadimitriou, C. H., & Steiglitz, K. (1982). Combinatorial Optimization: Algorithms and
Complexity. Prentice-Hall, Englewood Cliffs, New Jersey.
Pearl, J. (1988). Probabilistic Reasoning in Intelligent Systems: Networks of Plausible
Inference. Morgan Kaufmann, Los Altos.
Peltason, C. (1991). The BACK system – an overview. SIGART Bulletin, 2 (3), 114–119.
Roth, D. (1996). On the hardness of approximate reasoning. Artificial Intelligence Journal,
82, 273–302.
Schmidt-Schauß, M., & Smolka, G. (1991). Attributive concept descriptions with complements. Artificial Intelligence, 48, 1–26.
Sebastiani, F. (1994). A probabilistic terminological logic for modelling information retrieval. In Proceedings of SIGIR-94, 17th ACM International Conference on Research
and Development in Information Retrieval, pp. 122–130 Dublin, IRL. Published by
Springer Verlag, Heidelberg, FRG.
165

Straccia

Straccia, U. (1998). A fuzzy description logic. In Proc. of the 15th Nat. Conf. on Artificial
Intelligence (AAAI-98), pp. 594–599 Madison, USA.
Straccia, U. (2000a). A note on the relationship between fuzzy logic and four-valued logic.
Technical report B4-22-10-2000, Istituto di Elaborazione dell’Informazione, Consiglio
Nazionale delle Ricerche, Pisa, Italy.
Straccia, U. (2000b). Reasoning and experimenting within Zadeh’s fuzzy propositional logic.
Technical report 2000-b4-011, Istituto di Elaborazione dell’Informazione, Consiglio
Nazionale delle Ricerche, Pisa, Italy.
Tresp, C., & Molitor, R. (1998). A description logic for vague knowledge. In Proc. of the
13th European Conf. on Artificial Intelligence (ECAI-98) Brighton (England).
Xiachun, C., Yunfei, J., & Xuhua, L. (1995). The rationality and decidability of fuzzy
implications. In Proc. of the 14th Int. Joint Conf. on Artificial Intelligence (IJCAI95), pp. 1910–1911 Montreal, Canada. MK.
Yen, J. (1991). Generalizing term subsumption languages to fuzzy logic. In Proc. of the 12th
Int. Joint Conf. on Artificial Intelligence (IJCAI-91), pp. 472–477 Sydney, Australia.
Zadeh, L. A. (1965). Fuzzy sets. Information and Control, 8 (3), 338–353.

166

Journal of Articial Intelligence Research 14 (2001) 359{389

Submitted 10/00; published 6/01

Conditional Plausibility Measures and Bayesian Networks
Joseph Y. Halpern

Cornell University, Computer Science Department
Ithaca, NY 14853
http://www.cs.cornell.edu/home/halpern

halpern@cs.cornell.edu

Abstract

A general notion of algebraic conditional plausibility measures is dened. Probability
measures, ranking functions, possibility measures, and (under the appropriate denitions)
sets of probability measures can all be viewed as dening algebraic conditional plausibility
measures. It is shown that algebraic conditional plausibility measures can be represented
using Bayesian networks.

1. Introduction
Pearl (1988) among others has long argued that Bayesian networks (that is, the dags without the conditional probability tables) represent important qualitative information about
uncertainty regarding conditional dependencies and independencies. To the extent that this
is true, Bayesian networks should make perfect sense for non-probabilistic representations
of uncertainty. And, indeed, Bayesian networks have been used with  rankings (Spohn,
1988) by Darwiche and Goldszmidt (1994). It follows from results of Wilson (1994) that
possibility measures (Dubois & Prade, 1990) can be represented using Bayesian networks.
The question I address in this paper is \What properties of a representation of uncertainty are required to be able to represent the uncertainty using a Bayesian network?" This
question too has been addressed in earlier work, see (Darwiche, 1992; Darwiche & Ginsberg,
1992; Friedman & Halpern, 1995; Wilson, 1994), although the characterization given here
is somewhat dierent. Shenoy and Shafer (1990) consider a related question|essentially,
what is required of a representation of uncertainty so that marginals can be computed using
\local computations" of the type used in Bayesian networks|and provide axioms sucient
to guarantee that this is possible.
Here I represent uncertainty using plausibility measures, as in (Friedman & Halpern,
1995). To answer the question, I must examine general properties of conditional plausibility
as well as dening a notion of plausibilistic independence. Unlike earlier papers, I enforce a
symmetry condition in the denition of conditional independence, so that, for example, A is
independent of B i B is independent of A. While this property holds for probability, under
the asymmetric denition of independence used in earlier work it does not necessarily hold
for other formalisms. There are also subtle but important dierences between this paper
and (Friedman & Halpern, 1995) in the notion of conditional plausibility. The denitions
here are simpler but more general; particular attention is paid here to conditions on when
the conditional plausibility must be dened.
The major results here are a general condition, simpler than that given in (Friedman &
Halpern, 1995; Wilson, 1994), under which a conditional plausibility measure satises the
c 2001 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Halpern

semi-graphoid properties (which means it can be represented using a Bayesian network).
Conditions are also given that suce for a Bayesian network to be able to quantitatively
represent a plausibility measure; more precisely, conditions are given so that a plausibility
measure can be uniquely reconstructed given conditional plausibility tables for each node in
the Bayesian network. Conditions for quantitative representation by Bayesian networks do
not seem to have been presented in the literature for representations of uncertainty other
than probability (for which the conditions are trivial). A minor additional condition also
suces to guarantee that d-separation in the network characterizes conditional independence. All these conditions clearly apply to  rankings and possibility measures. Perhaps
more interestingly, they also apply to sets of probabilities under a novel representation of
such sets as a plausibility measure. This novel representation (and the associated notion of
conditioning) is shown to have some natural properties not shared by other representations.
The rest of the paper is organized as follows. In Section 2, I discuss conditional plausibility measures. Section 3 introduces algebraic conditional plausibility measures, which
are ones where there is essentially an analogue to + and . (Putting such an algebraic
structure on uncertainty is not new; it was also done in (Darwiche, 1992; Darwiche & Ginsberg, 1992; Friedman & Halpern, 1995; Weydert, 1994).) Section 4 discusses independence
and conditional independence in conditional plausibility spaces, and shows that algebraic
conditional plausibility measures satisfy the semi-graphoid properties. Finally, in Section 5,
Bayesian networks based on (algebraic) plausibility measures are considered. Combining
the fact that algebraic plausibility measures satisfy the semi-graphoid properties with the
results of (Geiger, Verma, & Pearl, 1990), it follows that d-separation in a Bayesian network G implies conditional independence for all algebraic plausibility measures compatible
with G; a weak richness condition is shown to yield the converse. The paper concludes in
Section 6. Longer proofs are relegated to the appendix.

2. Conditional Plausibility

2.1 Unconditional Plausibility Measures

Before getting to conditional plausibility measures, it is perhaps best to consider unconditional plausibility measures. The basic idea behind plausibility measures is straightforward.
A probability measure maps subsets of a set W to [0; 1]. Its domain may not consist of
all subsets of W ; however, it is required to be an algebra. (Recall that an algebra F over
W is a set of subsets of W containing W and closed under union and complementation,
so that if U; V 2 F , then so are U [ V and U .) A plausibility measure is more general; it
maps elements in an algebra F to some arbitrary partially ordered set. If Pl is a plausibility
measure, then we read Pl(U ) as \the plausibility of set U ". If Pl(U )  Pl(V ), then V is at
least as plausible as U . Because the ordering is partial, it could be that the plausibility of
two dierent sets is incomparable. An agent may not be prepared to say of two sets that
one is more likely than another or that they are equal in likelihood.
Formally, a plausibility space is a tuple S = (W; F ; Pl), where W is a set of worlds, F
is an algebra over W , and Pl maps sets in F to some set D of plausibility values partially
ordered by a relation D (so that D is reexive, transitive, and anti-symmetric) that
contains two special elements >D and ?D such that ?D D d D >D for all d 2 D; these
are intended to be the analogues of 1 and 0 for probability. As usual, the ordering is dened
360

Conditional Plausibility Measures and Bayesian Networks

<D by taking d1 <D d2 if d1 D d2 and d1 6= d2 . I omit the subscript D from D , <D , >D
and ?D whenever it is clear from context.
There are three requirements on plausibility measures. The rst two are obvious analogues of requirements that hold for other notions of uncertainty: the whole space gets
the maximum plausibility and the empty set gets the minimum plausibility. The third
requirement says that a set must be at least as plausible as any of its subsets.
Pl1. Pl(;) = ?D .
Pl2. Pl(W ) = >D .
Pl3. If U  U 0 , then Pl(U )  Pl(U 0 ).
(In Pl3, I am implicitly assuming that U; U 0 2 F . Similar assumptions are made throughout.)
All the standard representations of uncertainty in the literature can be represented as
plausibility measures. I briey describe some other representations of uncertainty that will
be of relevance to this paper.
Sets of probabilities: One common way of representing uncertainty is by a set of probability measures. This set is often assumed to be convex (see, for example, (Campos & Moral,
1995; Cousa, Moral, & Walley, 1999; Gilboa & Schmeidler, 1993; Levi, 1985; Walley, 1991)
for discussion and further references), however, convex sets do not seem appropriate for representing independence assumptions, so I do not make this restriction here. For example,
if a coin with an unknown probability of heads is tossed twice, and the tosses are known to
be independent, it seems that a reasonable representation is given by the set P0 consisting
of all measures  , where  (hh) = 2 ;  (ht) =  (th) = (1 , );  (tt) = (1 , )2 .
Unfortunately, P0 is not convex. Moreover, its convex hull includes many measures for
which the coin tosses are not independent. It is argued in (Cousa et al., 1999) that a set
of probability measures is behaviorally equivalent to its convex hull. However, even if we
accept this argument, it does not follow that a set and its convex hull are equivalent insofar
as determination of independencies goes.
There are a number of ways of viewing a set P of probability measures as a plausibility
measure. One uses the lower probability P , dened as P (U ) = inf f(U ) :  2 Pg. Clearly
P satises Pl1{3. The corresponding upper probability P  , dened as P  (U ) = supf :  2
Pg = 1 , P (U ), is also clearly a plausibility measure.
Both P and P  give a way of comparing the likelihood of two subsets U and V of W .
These two ways are incomparable; it is easy to nd a set P of probability measures on W
and subsets U and V of W such that P (U ) < P (V ) and P  (U ) > P  (V ). Rather than
choosing between P and P  , we can associate a dierent plausibility measure with P that
captures both. Let DP ;P  = f(a; b) : 0  a  b  1g and dene (a; b)  (a0 ; b0 ) i b  a0 .
This puts a partial order on DP ;P  ; clearly ?DP P  = (0; 0) and >DP P  = (1; 1). Dene
PlP ;P  (U ) = (P (U ); P  (U )). Thus, PlP ;P  associates with a set U two numbers that can
be thought of as dening an interval in terms of the lower and upper probability of U . It
is easy to check that PlP ;P  (U )  PlP ;P  (V ) if the upper probability of U is less than or
equal to the lower probability of V . PlP ;P  satises Pl1{3, so it is indeed a plausibility
measure, but one which puts only a partial order on events.
;

361

;

Halpern

The trouble with P , P  , and even PlP ;P  is that they lose information. For example,
it is not hard to nd a set P of probability measures and subsets U; V of W such that
(U )  (V ) for all  2 P and (U ) < (V ) for some  2 P , but P (U ) = P (V ) and
P  (U ) = P  (V ). Indeed, there exists an innite set P of probability measures such that
(U ) < (V ) for all  2 P but P (U ) = P (V ) and P  (U ) = P  (V ). If all the probability
measures in P agree that U is less likely than V , it seems reasonable to conclude that U is
less likely than V . However, none of P , P  , or PlP ;P  will necessarily draw this conclusion.
Fortunately, it is not hard to associate yet another plausibility measure with P that
does not lose this important information. For technical convenience that will become clear
later, assume that there is some index set I such that P = fi : i 2 I g. Thus, for example,
if P = f1 ; : : : ; n g, then I = f1; : : : ; ng. Let DI = [0; 1]I , that is, the functions from I to
[0; 1], with the pointwise ordering, so that f  g i f (i)  g(i) for all i 2 I .1 It is easy to
check that ?D is the function f : I ! [0; 1] such that f (i) = 0 for all i 2 I and >D is the
function g such that g(i) = 1 for all i 2 I . For U  W , let fU be the function such that
fU (i) = i (U ) for all i 2 I . For example, for the set P0 of measures representing the two
coin tosses (which is indexed by IR), the set W can be taken to be fhh; ht; tt; thg. Then,
for example, ffhhg () =  (hh) = 2 and ffht;ttg () = 1 , .
It is easy to see that f; = ?D and fW = >D . Now dene PlP (U ) = fU . Thus,
PlP (U )  PlP (V ) i fU (i)  fV (i) for all i 2 I i (U )  (V ) for all  2 P . Clearly PlP
satises Pl1{3. Pl1 and Pl2 follow since PlP (;) = f; = ?D and PlP (W ) = fW = >D ,
while Pl3 follows since if U  V then (U )  (V ) for all  2 P . PlP captures all the
information in P (unlike, say, P , which washes much of it away by taking infs).
This way of associating a plausibility measure with a set P of probability measures
generalizes: it provides a way of associating a single plausibility measure with any set of
plausibility measures; I leave the straightforward details to the reader.
Possibility measures: A fuzzy measure (or a Sugeno measure ) f on W (Wang & Klir,
1992) is a function f : 2W 7! [0; 1], that satises Pl1{3. (That is, it is less general than a
plausibility measure only in that it requires the range to be [0; 1] rather than an arbitrary
partially ordered set.) A possibility measure Poss on W is a special case of a Sugeno measure;
it is a function mapping subsets of W to [0; 1] such that Poss(W ) = 1, Poss(;) = 0, and
Poss(U ) = supw2U (Poss(fwg)), so that Poss(U [ V ) = max(Poss(U ); Poss(V )) (Dubois &
Prade, 1990). Clearly a possibility measure is a plausibility measure.
Ranking functions: An ordinal ranking (or -ranking or ranking function )  on W (as
dened by (Goldszmidt & Pearl, 1992), based on ideas that go back to (Spohn, 1988))
is a function mapping subsets of W to IN  = IN [ f1g such that (W ) = 0, (;) =
1, and (U ) = minw2U ((fwg)), so that (U [ V ) = min((U ); (V )). Intuitively, a
ranking function assigns a degree of surprise to each subset of worlds in W , where 0 means
unsurprising and higher numbers denote greater surprise. It is easy to see that if  is a
ranking function on W , then (W; 2W ; ) is a plausibility space, where x IN  y if and only
if y  x under the usual ordering on the natural numbers. One standard view of a ranking
I

I

I

I

I

I

1. In the conference version of this paper (Halpern, 2000), D , the range of the plausibility measure, was
taken to be functions from to [0; 1], not from the index set I to [0; 1]. The dierence is mainly cosmetic,
but this representation makes the range independent of , so that the same plausibility values can be
used for any set of probability measures indexed by I .
I

P

P

362

Conditional Plausibility Measures and Bayesian Networks

function, going back to Spohn, is that a ranking of k can be associated with a probability
of k , for some xed (possibly innitesimal) . Note that this viewpoint justies taking
(W ) = 0, (;) = 1, and (U [ V ) = min((U ); (V )).

2.2 Conditional Plausibility Measures

Since Bayesian networks make such heavy use of conditioning, my interest here is not just
plausibility measures, but conditional plausibility measures (cpm's). Given a set W of
worlds, a cpm maps pairs of subsets of W to some partially ordered set D. I write Pl(U jV )
rather than Pl(U; V ), in keeping with standard notation for conditioning. In the case of
a probability measure , it is standard to take (U jV ) to be undened in (V ) = 0. In
general, we must make precise what the allowable second arguments are. Thus, I take
the domain of a cpm to have the form F  F 0 where, intuitively, F 0 consists of those sets
in F on which it makes sense to condition. For example, for a conditional probability
measure dened in the usual way from an unconditional probability measure , F 0 consists
of all sets V such that (V ) > 0. (Note that F 0 is not an algebra|it is not closed under
complementation.) A Popper algebra over W is a set F F 0 of subsets of W  W satisfying
the following properties:
Acc1. F is an algebra over W .
Acc2. F 0 is a nonempty subset of F .
Acc3. F 0 is closed under supersets in F ; that is, if V 2 F 0 , V  V 0 , and V 0 2 F , then
V 0 2 F 0.
(Popper algebras are named after Karl Popper, who was the rst to consider formally
conditional probability as the basic notion (Popper, 1968). De Finetti (1936) also did some
early work, apparently independently, taking conditional probabilities as primitive. Indeed,
as Renyi (1964) points out, the idea seems to go back as far as Keynes (1921).)
A conditional plausibility space (cps ) is a tuple (W; F ; F 0 ; Pl), where F F 0 is a Popper
algebra over W , Pl : F  F 0 ! D, D is a partially ordered set of plausibility values, and Pl
is a conditional plausibility measure (cpm) that satises the following conditions:
CPl1. Pl(;jV ) = ?D .
CPl2. Pl(W jV ) = >D .
CPl3. If U  U 0 , then Pl(U jV )  Pl(U 0 jV ).
CPl4 Pl(U jV ) = Pl(U \ V jV ).
CPl1{3 are the obvious analogues to Pl1{3. CPl4 is a minimal property that guarantees
that when conditioning on V , everything is relativized to V . It follows easily from CPl1{4
that Pl(jV ) is a plausibility measure on V for each xed V . A cps is acceptable if it satises
Acc4. If V 2 F 0 , U 2 F , and Pl(U jV ) 6= ?D , then U \ V 2 F 0 .
363

Halpern

Acceptability is a generalization of the observation that if Pr(V ) 6= 0, then conditioning on
V should be dened. It says that if Pl(U jV ) 6= ?D , then conditioning on V \ U should be
dened.
CPl1{4 are rather minimal requirements. For example, they do not place any constraints
on the relationship between Pl(U jV ) and Pl(U jV 0 ) if V 6= V 0 . One natural additional
condition is the following.
CPl5. If V \ V 0 2 F 0 and U; U 0 2 F , then Pl(U jV \ V 0 )  Pl(U 0 jV \ V 0 ) i Pl(U \ V jV 0 ) 
Pl(U 0 \ V jV 0 ).
It is not hard to show that CPl5 implies CPl4.
Lemma 2.1: CPl5 implies CPl4.
Proof: Since clearly Pl(U \ V jV ) = Pl(U \ V \ V jV ), by CPl5 it follows that Pl(U jV \ V ) =
Pl(U \ V jV \ V ), and hence Pl(U jV ) = Pl(U \ V jV ).
CPl5 does not follow from CPl1{4 (indeed, as shown below, the standard notion of
conditioning for lower probabilities satises CPl1{4 but not CPl5). A cps that satises
CPl5 is said to be coherent. Although I do not assume CPl5 here, it in fact holds for all
plausibility measures to which one of the main results applies (see Lemma 3.5).
In any case, CPl5 is certainly not the only coherence that might be required. For
example, it may seem reasonable to require that if V and V 0 are disjoint, then it is not the
case that both Pl(U jV [ V 0 ) > Pl(U jV ) and Pl(U jV [ V 0 ) > Pl(U jV 0 ). Similarly, we may
want to require that it not be the case that Pl(U jV [ V 0 ) < Pl(U jV ) and Pl(U jV [ V 0 ) <
Pl(U jV 0 ).2 Coming up with a reasonable set of coherence conditions remains a topic for
future work. The only properties needed for the results of this paper are CPl1{4.
The notion of cps considered here is closely related to that dened in (Friedman &
Halpern, 1995). There, a cps is taken to be a family fW; DV ; PlV ) : V  W; V 6= ;g of
plausibility spaces, where each plausibility measure PlV satises Pl1{3 and has domain 2W
and an analogue of CPl5 holds: PlV \V 0 (U )  PlV \V 0 (U 0 ) i PlV 0 (U \ V )  PlV 0 (U 0 \ V ). To
distinguish the denition of cps given in this paper from that given in (Friedman & Halpern,
1995), I call the latter an FH-cps. There is no analogue to Acc1{4 in (Friedman & Halpern,
1995); F is implicitly taken to be 2W , while F 0 is implicitly taken to be 2W , f;g. This is
an inessential dierence between the denitions. More signicantly, note that in an FH-cps,
(W; DV ; PlV ) is a plausibility space for each xed V , and thus satises Pl1{3. However,
requiring CPl1{3 is a priori stronger than requiring Pl1{3 for each separate plausibility
space. Pl1 requires that Pl(;jV ) = ?D , but the elements ?D may be dierent for each
V . By way of contrast, CPl1 requires that Pl(?jV ) must be the same element, ?D , for all
V . Similar remarks hold for Pl2. Nevertheless, as is shown below, there is a construction
that converts an FH-cps to a coherent cps.
I now consider some standard ways of getting a cps starting with an unconditional
representation of uncertainty.
Denition 2.2: A cps (W; F ; F 0 ; Pl) extends an unconditional plausibility space (W; F ; Pl0 )
if Pl(U jW ) = Pl0 (U ). (W; F ; F 0 ; Pl) is standard if F 0 = fU : Pl(U ) 6= ?g.
All the constructions below result in standard cps's.
V

V

2. I think an anonymous referee of this paper for suggesting this condition.

364

Conditional Plausibility Measures and Bayesian Networks

Ranking functions: Given an unconditional ranking function , there is a well-known
way of extending it to a conditional ranking function:
(
(U \ V ) , (V ) if (V ) 6= 1,
(U jV ) = undened
if (V ) = 1.

This is consistent with the view that if (V ) = k, then (V ) = k , since then (U jV ) =
(U \V ),(V ). It is easy to check that this denition results in a coherent cps.
Possibility measures: There are two standard ways of dening a conditional possibility
measure from an unconditional possibility measure Poss. To distinguish them, I write
Poss(U jV ) for the rst approach and Poss(U jjV ) for the second approach. According to the
rst approach,
8
>
< Poss(V \ U ) if Poss(V \ U ) < Poss(V ),
if Poss(V \ U ) = Poss(V ) > 0,
Poss(U jV ) = > 1
: undened if Poss(V ) = 0.
The second approach looks more like conditioning in probability:
(
V \ U )=Poss(V ) if Poss(V ) > 0,
Poss(U jjV ) = Poss(
undened
if Poss(V ) = 0.
It is easy to show that both denitions result in a coherent cps. (Many other notions of
conditioning for possibility measures can be dened; see, for example (Fonck, 1994). I focus
on these two because they are the ones most-often considered in the literature.)
Sets of probabilities: For a set P of probabilities, conditioning can be dened for all
the representations of P as a plausibility measure. But in each case there are subtle choices
involving when conditioning is undened. For example, one denition of conditional lower
probability is that P (U jV ) is inf f(U jV ) : (V ) 6= 0g if (V ) 6= 0 for all  2 P , and is
undened otherwise (i.e., if (V ) = 0 for some  2 P ). It is easy to check that P dened
this way gives a coherent cpm, as does the corresponding denition of P  . The problem
with this denition is that it may result in a rather small set F 0 for which conditioning
is dened. For example, if for each set V 6= W , there is some measure  2 P such that
(V ) = 0 (which can certainly happen in some nontrivial examples), then F 0 = fW g. As
a consequence, the cps dened in this way is not acceptable (i.e., does not satisfy Acc4) in
general.
The following denition gives a lower probability which is dened on more arguments:
(
inf f(U jV ) : (V ) 6= 0g if (V ) 6= 0 for some  2 P ,
P (U jV ) = undened
if (V ) = 0 for all  2 P .
It is easy to see that this denition agrees with the rst one whenever the rst is dened and
results, in general, in a larger set F 0 . Moreover, the resulting cps is acceptable. However,
the second denition does not satisfy CPl5. For example, suppose that W = fa; b; cg and
P = f; 0 g, where (a) = (b) = 0, (c) = 1, 0(a) = 2=3, 0(b) = 1=3, and 0(c) = 0.
365

Halpern

Taking V = fa; bg, U = fag, and U 0 = fbg, it is easy to see that according to the second
denition, P (U \ V jW ) = P (U 0 \ V jW ) = 0, but P (U jV ) > P (U 0 jV ).
For PlP , there are two analogous denitions. For the rst, PlP (U jV ) is dened only if
(V ) > 0 for all  2 P , in which case PlP (U jV ) is fU jV , where fU jV (i) = i(U jV ). This
denition gives a coherent cps, but again, in general, not one that is acceptable. In this
paper, I focus on the following denition, which does result in an acceptable cps.
First extend DI by allowing functions which have value  (intuitively,  denotes undened). More precisely, let DI0 consist of all functions f from I to [0; 1][fg such that f (i) 6= 
for at least one i 2 I . The idea is to dene PlP (U jV ) = fU jV , where fU jV (i) = i (U jV )
if i (V ) > 0 and  otherwise. (Note that this agrees with the previous denition, which
applies only to the situation where (V ) > 0 for all  2 P .) There is a problem though,
one to which I have already alluded. CPl1 says that f;jV must be ? for all V . Thus, it
must be the case that f;jV1 = f;jV2 for all V1 ; V2  W . But if i 2 P and V1 ; V2  W are
such that i (V1 ) > 0 and i(V2 ) = 0, then f;jV1 (i) = 0 and f;jV2 (i) = , so f;jV1 6= f;jV2 . A
similar problem arises with CPl2.
To deal with this problem DI0 must be slightly modied. Say that f 2 DI0 is equivalent
to ?D if f (i) is either 0 or * for all i 2 I ; similarly, f is equivalent to >D if f (i) is
either 1 or * for all i 2 I . (Since, by denition, f (i) 6=  for at least one i 2 I , an
element cannot be equivalent to both >D and ?D .) Let DI be the same as DI0 except
that all elements equivalent to ?D are identied (and viewed as one element) and all
elements equivalent to >D are identied. More precisely, let DI = f?D ; >D g [ ff 2 D0 :
f is not equivalent to >D or ?D g. Dene the ordering  on DI by taking f  g if one of
the following three conditions holds:
 f = ?D ,
 g = >D ,
 neither f nor g is ?D or >D and for all i 2 I , either f (i) = g(i) =  or f (i) 6= ,
g(i) 6= , and f (i)  g(i).
Now dene
8? 
if (V ) 6= 0 for some  2 P and
>
D
>
>
(V ) 6= 0 implies (U jV ) = 0 for all  2 P ,
<
if 9 2 P ((V ) 6= 0) and 8 2 P ((V ) 6= 0 ) (U jV ) = 1),
PlP (U jV ) = > >D
>
if (V ) = 0 for all  2 P ,
>
: undened
fU jV
otherwise.
I

I

I

I

I

I

I

I

I

I

I

I

I

I

I

I

It is easy to check that this gives a coherent cps.
Plausibility measures: The construction for PlP can be used to convert any FH-cps
to a cps. I demonstrate the idea by showing how to construct a conditional plausibility
measure from an unconditional plausibility measure. Given an unconditional plausibility
space (W; F ; Pl) with range D, an FH-cps is constructed in (Friedman & Halpern, 1995) by
dening Pl(U jV ) = Pl(U \ V ). Thus, DV = fd 2 D : d  Pl(V )g and >D = Pl(V ). This
is not a cps because CPl2 is not satised, but it is an FH-cps, since Pl1{3 is satised for
each xed V , and so is CPl5. As observed in (Friedman & Halpern, 1995), this is in fact
V

366

Conditional Plausibility Measures and Bayesian Networks

the FH-cps extending Pl that makes the minimal number of comparisons, in the sense that
if Pl0 is an FH-cps extending Pl and Pl(U jV )  Pl(U 0 jV ), then Pl0 (U jV )  Pl0 (U 0 jV ).
To get a cps, let D0 = f(d; V ) : V  W; d  Pl(V ); Pl(V ) > ?D g. Say that (d; V ) is
equivalent to ?D if d = ?D ; say that (d; V ) is equivalent to >D if d = Pl(V ). Now let
D = f?D ; >D g [ ff 2 D0 : f is not equivalent to >D or ?D g. Then dene d D d0
for d; d0 2 D i d = ?D , d0 = >D , or there is some V  W such that d = (d1 ; V ),
d0 = (d2 ; V ), and d1 D d2 . Finally, for U; V 2 F , dene
8
>
(Pl(U \ V ); V ) if ?D < Pl(U \ V ) < Pl(V ),
>
< >D 
if Pl(U \ V ) = Pl(V ) > ?D ,
Pl(U jV ) = > ? 
if Pl(U \ V ) = ?D , Pl(V ) > ?D ,
D
>
: undened
if Pl(V ) = ?D .
I leave it to the reader to check that Pl is a coherent cpm. It is important that Pl(U jV ) is
undened if Pl(V ) = ?D ; if we tried to extend the construction to V such that Pl(V ) = ?D ,
then we would have >D = ?D . This issue did not arise in (Friedman & Halpern, 1995),
since there were separate plausibility spaces for each choice of V .

3. Algebraic Conditional Plausibility Measures

To be able to carry out the type of reasoning used in Bayesian networks, it does not suce to
just have conditional plausibility. We need to have analogues of addition and multiplication.
More precisely, there needs to be some way of computing the plausibility of the union of
two disjoint sets in terms of the plausibility of the individual sets and a way of computing
Pl(U \ V jV 0 ) given Pl(U jV \ V 0 ) and Pl(V jV 0 ).

Denition 3.1: A cps (W; F ; F 0 ; Pl) where Pl has range D is algebraic if it is acceptable
and there are functions  : D  D ! D and 
 : D  D ! D such that the following

properties hold:
Alg1. If U; U 0 2 F are disjoint and V 2 F 0 then Pl(U [ U 0 jV ) = Pl(U jV )  Pl(U 0 jV ).
Alg2. If U 2 F , V \ V 0 2 F 0 , then Pl(U \ V jV 0 ) = Pl(U jV \ V 0 ) 
 Pl(V jV 0 ).
Alg3. 
 distributes over ; more precisely, a 
 (b1      bn ) = (a 
 b1 )      (a 
 bn )
if (a; b1 ); : : : ; (a; bn ); (a; b1      bn ) 2 DomPl (
) and (b1 ; : : : ; bn ); (a 
 b1 ; : : : ; a 

bn ) 2 DomPl(), where DomPl() = f(Pl(U1 jV ); : : : ; Pl(Un jV )) : U1; : : : ; Un 2 F are
pairwise disjoint and V 2 F 0 g and DomPl (
) = f(Pl(U jV \ V 0 ); Pl(V jV 0 )) : U 2
F ; V \ V 0 2 F 0g.3 (See below for a discussion of DomPl() and DomPl(
). In the
sequel, I omit the subscript Pl if it is clear from context.)
Alg4. If (a; c); (b; c) 2 Dom(
), a 
 c  b 
 c, and c 6= ?, then a  b.
3. In the conference version of this paper, Dom( ) was taken to consist only of pairs, not tuples of arbitrary
nite length, and distributivity was considered only for terms of the form a (b b0 ). The more general
version considered here is slightly stronger. The reason is that it is possible that (a; b1
b)
Dom( ) even though (a; b1
b ) = Dom( ) for k n. Note also that only left distributivity is
required here.







  




  

k

2




367



n

2

Halpern

I sometimes refer to the cpm Pl as being algebraic as well.
It may seem more natural to consider a stronger version of Alg4 that applies to all pairs
in D  D, such as
Alg40 . If a 
 c  b 
 c and c 6= ?, then a  b.
However, as Proposition 3.2 below shows, by requiring that Alg3 and Alg4 hold only for
tuples in Dom() and Dom(
) rather than on all tuples in D  D, some cps's of interest
become algebraic that would otherwise not be. Intuitively, we care about 
 mainly to the
extent that Alg1 and Alg2 holds, and Alg1 and Alg2 apply only to tuples in Dom() and
Dom(
), respectively. Thus, it does not seem unreasonable that Alg4 be required to hold
only for these tuples.

Proposition 3.2: The constructions for extending an unconditional probability measure,
ranking function, possibility measure (using either Poss(U jV ) or Poss(U jjV )), and the plausibility measure PlP dened by a set P of probability measures to a cps result in algebraic
cps's.4
Proof: It is easy to see that in each case the cps is acceptable. It is also easy to nd
appropriate notions of 
 and  in the case of probability measures, ranking functions, and
possibility measures using Poss(U jjV ). For probability, clearly  and 
 are essentially +
and ; however, since the range of probability is [0; 1], a  b must be dened as max(1; a + b),
and Alg3 holds only for Dom() = f(a1 ; : : : ; ak ) : a1 +    + ak  1g; there is no constraint on
Dom(); it is [0; 1]  [0; 1]. For ranking,  and 
 are min and +; there are no constraints
on Dom(min) and Dom(+). For Poss(U jjV ),  is max and 
 is ; again, there are no
constraints on Dom(max) and Dom(). I leave it to the reader to check that Alg1{4 hold

in all these cases.
For Poss(U jV ),  is again max and 
 is min. There are no constraints on Dom(max);
however, note that (a; b) 2 Dom(min) i either a < b or a = 1. For suppose that (a; b) =
(Poss(U jV \ V 0 ); Poss(V jV 0 ), where U 2 F and V \ V 0 2 F 0 . If Poss(U \ V \ V 0 ) =
Poss(V \ V 0 ) then a = Poss(U jV \ V 0 ) = 1; otherwise, Poss(U \ V \ V 0 ) < Poss(V \ V 0 ), in
which case a = Poss(U jV \ V 0 ) = Poss(U \ V \ V 0 ) < Poss(V \ V 0 )  Poss(V jV 0 ) = b. It
is easy to check Alg1{3. While min does not satisfy Alg40 |certainly min(a; c) = min(b; c)
does not in general imply that a = b|Alg4 does hold. For if min(a; c)  min(b; c) and
a = 1, then clearly b = 1. Alternatively, if a < c, then min(a; c) = a and the only way that
a  min(b; c), given that b < c or b = 1, is if a  b.
Finally, for PlP ,  and 
 are essentially pointwise addition and multiplication. But
there are a few subtleties. As in the case of probability, Dom() consists of sequences
which sum to at most 1 for each index i. Care must also be taken in dealing with ?D and
>D . More precisely, Dom() consists of all tuples (f1; : : : ; fn) such that either
I

I

1(a). fj 6= >D ; j = 1; : : : ; n,
I

1(b). if fj ; fk 6= ?D for 1  j; k  n, then fj (i) =  i fk (i) = , for all i 2 I , and
I

4. Essentially the same result is proved in (Friedman & Halpern, 1995) for all cases but PlP .

368

Conditional Plausibility Measures and Bayesian Networks

1(c). Pfj :f 6=?  ;f (i)6=g fj (i)  1
or
2. there exists j such that fj = >D and fk = ?D for k 6= j ;
Dom(
) consists of pairs (f; g) such that either one of f or g is in f?D ; >D g or neither
f nor g is in f?D ; >D g and g(i) 2 f0; g i f (i) = . The denition of  is relatively
straightforward. Dene f  >D = >D  f = >D and f  ?D = ?D  f = f . If
f; g \ f?D ; >D g = ;, then f  g = h, where h(i) = min(1; f (i) + g(i)) (taking a +  =
 + a =  and min(1; ) = ). In a similar spirit, dene f 
 >D = >D 
 f = f
and f 
 ?D = ?D 
 f = ?D ; if ff; gg \ f?D ; >D g = ;, then f 
 g = h, where
h(i) = f (i)  g(i) (taking   a = a   =  if a 6= 0 and   0 = 0   = 0). It is important
that   0 = 0 and    = , since otherwise Alg3 may not hold. For example, according
to Alg3,
j

D

I

j

I

I

I

I

I

I

I

I

I

I

I

I

I

I

I

I

I

I

I

I

((1=2; ; 1=2)
(a; 0; b))((1=2; ; 1=2))
(a; 0; b)) = ((1=2; ; 1=2)(1=2; ; 1=2))
(a; 0; b) = (a; 0; b)
(since (1=2; ; 1=2)(1=2; ; 1=2) = >D ) and, similarly, ((1=2; ; 1=2)
(a; ; b))((1=2; ; 1=2))

(a; ; b)) = (a; ; b). Since   0 = 0 and    = , these equalities hold. I leave it to the
reader to check that, with these denitions, Alg1{4 hold (although note that the restrictions
to Dom() and Dom(
) are required for both Alg3 and Alg4 to hold).
Conditional lower probability is not algebraic. For example, it is not hard to construct
pairwise disjoint sets U1 , V1 , U2 , and V2 and a set P of probability measures such that
P (Ui) = P (Vi) (and P  (Ui) = P  (Vi )) for i = 1; 2, but P (U1 [ U2 ) 6= P(V1 [ V2). That
means there cannot be a function  in the case of lower probability.5
For later convenience, I list some simple properties of algebraic cpms that show that ?
and > act like 0 and 1 with respect to addition and multiplication. Let Range(Pl) = fd :
Pl(U jV ) = d for some (U; V ) 2 F  F 0 g.
I

Lemma 3.3: If (W; F ; F 0 ; Pl) is an algebraic cps, then d  ? = ?  d = d for all d 2

Range(Pl).

Proof: Suppose that d = Pl(U jV ). By Alg1, it follows that
d = Pl(U jV ) = Pl(U [ ;jV ) = Pl(U jV )  Pl(;jV ) = d  ?:
A similar argument shows that d = ?  d.
Lemma 3.4: If (W; F ; F 0 ; Pl) is an algebraic cps then, for all d 2 Range(Pl),
(a) d 
 > = d;
5. For readers familiar with Dempster-Shafer belief functions (Shafer, 1976), they provide another example
of a plausibility measure. There are two well-known ways of dening conditioning for belief functions
(see (Fagin & Halpern, 1991)), one using Dempster's rule of combination and the other treating belief
functions as lower probabilities. Neither leads to an algebraic cps, which is why I have not discussed
belief functions in this paper.

369

Halpern

(b) if d 6= ?, then > 
 d = d;
(c) if d 6= ?, then ? 
 d = ?;
(d) if (d; ?) 2 Dom(
), then > 
 ? = d 
 ? = ? 
 ? = ?.

Proof: Suppose that d = Pl(U jV ). By Alg2, CPl2, and CPl4, it follows that
d = Pl(U jV ) = Pl(U \ V jV ) = Pl(U jV ) 
 Pl(V jV ) = d 
 >:
Similarly, if d =
6 ?, then U \ V 2 F 0 (by Acc4), so
d = Pl(U jV ) = Pl(U \ V jV ) = Pl(U \ V jU \ V ) 
 Pl(U \ V jV ) = > 
 d:
If d =
6 ?, then by Alg2, CPl1, and CPl4
? = Pl(?jV ) = Pl(?jU \ V ) 
 Pl(U jV ) = ? 
 d:
Finally, if (d; ?) 2 Dom(
), then there exist U; V; V 0 such that V \V 0 2 F 0 , Pl(U jV \V 0 ) = d
and Pl(V jV 0 ) = ?. By Alg2, Pl(U \ V jV 0 ) = Pl(U jV \ V 0 ) 
 Pl(V jV 0 ) = d 
 ?. By CPl3,
Pl(U \ V jV 0 )  Pl(V jV 0 ) = ?, so Pl(U \ V jV 0 ) = ?. Thus, d 
 ? = ?. Replacing U
with V \ V 0 , the same argument shows that > 
 ? = ?; replacing U with ;, we get that
? 
 ? = ?.
I conclude this section by showing that a standard algebraic cps that satises one other
minimal property must also satisfy CPl5. Say that 
 is monotonic if d  d0 and e  e0 then
d 
 e  d0 
 e0 . A cpm (cps) is monotonic if 
 is.

Lemma 3.5: A standard algebraic monotonic cps satises CPl5.
Proof: Suppose that (W; F ; F 0 ; Pl) is a standard algebraic cps and that V \ V 0 2 F 0 . If
Pl(U jV \ V 0 )  Pl(U 0 jV \ V 0 ), then it follows from Alg2 and monotonicity that
Pl(U \ V jV 0 ) = Pl(U jV \ V 0 ) 
 Pl(V jV 0 )  Pl(U 0 jV \ V 0 ) 
 Pl(V jV 0 ) = Pl(U 0 \ V jV 0 ):
For the opposite implication, suppose that Pl(U \ V jV 0 )  Pl(U 0 \ V jV 0 ). Then, by Alg2,
Pl(U jV \ V 0 ) 
 Pl(V jV 0 )  Pl(U 0 jV \ V 0 ) 
 Pl(V jV 0 ):
(1)
Since V \V 0 2 F 0 and the cps is standard, it must be the case that Pl(V \V 0 ) =
6 ?. Hence (by
0
0
0
CPl3), Pl(V ) =
6 ?; moreover, Pl(V jV ) =6 ? (otherwise Pl(V \ V ) = Pl(V jV 0) 
 Pl(V 0 ) =
?). Thus, by applying Alg4 to (1), it follows that Pl(U jV \ V 0)  Pl(U 0jV \ V 0).

4. Independence

How can we capture formally the notion that two events are independent? Intuitively, it
means that they have nothing to do with each other|they are totally unrelated; the occurrence of one has no inuence on the other. None of the representations of uncertainty
that we have been considering can express the notion of \unrelatedness" (whatever it might
370

Conditional Plausibility Measures and Bayesian Networks

mean) directly. The best we can do is to capture the \footprint" of independence on the
notion. For example, in the case of probability, if U and V are unrelated, it seems reasonable to expect that learning U should not aect the probability of V and symmetrically,
learning V should not aect the probability of U . \Unrelatedness" is, after all, a symmetric
notion.6 The fact that U and V are probabilistically independent (with respect to probability measure ) can thus be expressed as (U jV ) = (U ) and (V jU ) = (V ). There is a
technical problem with this denition: What happens if (V ) = 0? In that case (U jV ) is
undened. Similarly, if (U ) = 0 then (V jU ) is undened. It is conventional to say that,
in this case, U and V are still independent. This leads to the following formal denition.

Denition 4.1: U and V are probabilistically independent (with respect to probability measure ) if (V ) =
6 0 implies (U jV ) = (U ) and (U ) 6= 0 implies (V jU ) = (V ).
This does not look like the standard denition of independence in texts, but an easy
calculation shows that it is equivalent.
Proposition 4.2: The following are equivalent:
(a) (U ) 6= 0 implies (V jU ) = (V ),
(b) (U \ V ) = (U )(V ),
(c) (V ) 6= 0 implies (U jV ) = (U ).
Thus, in the case of probability, it would be equivalent to say that U and V are independent with respect to  if (U \ V ) = (U )(V ) or to require only that (U jV ) = (U )
if (V ) 6= 0 without requiring that (V jU ) = (V ) if (U ) 6= 0. However, these equivalences do not necessarily hold for other representations of uncertainty. The denition of
independence I have given here seems to generalize more appropriately.7
The denition of probabilistic conditional independence is analogous.
Denition 4.3: U and V are probabilistically independent given V 0 (with respect to probability measure ) if (V \ V 0 ) 6= 0 implies (U jV \ V 0 ) = (U jV 0 ) and (U \ V 0 ) 6= 0 implies
(V jU \ V 0) = (V jV 0).
It is immediate that U and V are (probabilistically) independent i they are independent
conditional on W .
The generalization to conditional plausibility measures (and hence to all other representations of uncertainty that we have been considering) is straightforward.
Denition 4.4: Given a cps (W; F ; F 0 ; Pl), U; V 2 F are plausibilistically independent
given V 0 2 F (with respect to the cpm Pl), written IPl (U; V jV 0 ), if V \ V 0 2 F 0 implies
Pl(U jV \ V 0 ) = Pl(U jV 0 ) and U \ V 0 2 F 0 implies Pl(V jU \ V 0 ) = Pl(V jV 0 ).
6. Walley (1991) calls the asymmetric notion irrelevance and denes U being independent of V as U is
irrelevant to V and V is irrelevant to U . Although my focus here is independence, irrelevance is an
interesting notion in its own right; see (Cozman, 1998; Cozman & Walley, 1999).
7. Another property of probabilistic independence is that if U is independent of V then U is independent
of V . This too does not follow for the other representations of uncertainty, and Walley (1991) actually
makes this part of his denition. Adding this requirement would not aect any of the results here,
although it would make the proofs somewhat lengthier, so I have not made it part of the denition.

371

Halpern

We are interested in conditional independence of random variables as well as in conditional independence of events. All the standard denitions extend to plausibility in a
straightforward way. A random variable X on W is a function from W to the reals. Let
R(X ) be the set of possible values for X (that is, the set of values over which X ranges). As
usual, X = x is the event fw : X (w) = xg. If X = fX1 ; : : : ; Xk g is a set of random variables
and x = (x1 ; : : : ; xk ), let X = x be an abbreviation for the event X1 = x1 \ : : : \ Xk = xk .
A random variable is measurable with respect to cps (W; F ; F 0 ; Pl) if X = x 2 F for all
x 2 R(X ). For the rest of the paper, I assume that all random variables X are measurable and that R(X ) is nite for all random variables X . Random variables X and Y are
independent with respect to plausibility measure Pl if the events X = x and Y = y are
independent for all x 2 R(X ) and y 2 R(Y ). More generally, given sets X, Y, and Z of
random variables, X and Y are plausibilistically independent given Z (with respect to Pl),
denoted IPlrv (X; YjZ), if IPl (X = x; Y = xjZ = z) for all x, y, and z. (Note that I am using
IPl for conditional independence of events and IPlrv for conditional independence of random
variables.) If Z = ;, then IPlrv (X; YjZ) if X and Y are unconditionally independent, that
is, if IPl (X = x; Y = xjW ) for all x, y; if either X = ; or Y = ;, then IPlrv (X; YjZ) is taken
to be vacuously true.
Now consider the following four properties of random variables, called the semi-graphoid
properties (Pearl, 1988), where X, Y, and Z are pairwise disjoint sets of variables.
CIRV1. If IPlrv (X; YjZ) then IPlrv (Y; XjZ).

CIRV2. If IPlrv (X; Y [ Y0 jZ) then IPlrv (X; YjZ).

CIRV3. If IPlrv (X; Y [ Y0 jZ) then IPlrv (X; YjY0 [ Z).

CIRV4. If IPlrv (X; YjZ) and IPlrv (X; Y0 jY [ Z) then IPlrv (X; Y [ Y0 jZ).
It is well known that CIRV1{4 hold for probability measures. The following result
generalizes this. The proof is not dicult, although care must be taken to show that the
result depends only on the properties of algebraic cpms.

Theorem 4.5: CIRV1{4 hold for all algebraic cps's.
Proof: See the appendix.
Theorem 4.5, of course, is very dependent on the denition of conditional independence
given here. Other notions of independence have been studied in the literature for specic
representations of uncertainty. Perhaps the most common denition tries to generalize the
observation that if U and V are probabilistically independent, then (U \ V ) = (U )  (V ).
Zadeh (1978) considered this approach in the context of possibility measures, calling it
noninteraction, but it clearly makes sense for any algebraic cpm.

Denition 4.6: U and V do not interact given V 0 (with respect to the algebraic cpm Pl),
denoted NI Pl (U; V jV 0 ), if V 0 2 F 0 implies that Pl(U \ V jV 0 ) = Pl(U jV 0 ) 
 Pl(V jV 0 ).8
8. Shenoy (1994) denes a notion similar in spirit to noninteraction for random variables.

372

Conditional Plausibility Measures and Bayesian Networks

Fonck (1994) shows that noninteraction is strictly weaker than independence for a number of notions of independence for possibility measures. The following result shows that
independence implies noninteraction for all algebraic cpms.

Lemma 4.7: If (W; F ; F 0 ; Pl) is an algebraic cps, then IPl(U; V jV 0) implies NI Pl(U; V jV 0 ).
Proof: Suppose that V 0 2 F 0 and IPl(U; V jV 0) holds. If V \ V 0 2 F 0 then, from Alg2, it
follows that

Pl(U \ V jV 0 ) = Pl(U jV \ V 0 ) 
 Pl(V jV 0 ) = Pl(U jV 0 ) 
 Pl(V jV 0 ):
On the other hand, if V \ V 0 2= F 0 , then by Acc4, Pl(V jV 0 ) = ?. By CPl3, Pl(U \ V jV 0 ) = ?,
and by Lemma 3.3, Pl(U jV 0 ) 
 Pl(V jV 0 ) = ?. Thus, Pl(U \ V jV 0 ) = Pl(U jV 0 ) 
 Pl(V jV 0 ).
What about the converse to Lemma 4.7? The results of Fonck show that it does not hold
in general|indeed, it does not hold for Poss(U jV ). So what is required for noninteraction
to imply independence? The following lemma provides a sucient condition.

Lemma 4.8: If (W; F ; F 0 ; Pl) is a standard algebraic cps that satises Alg40, then NI Pl(U; V jV 0)
implies IPl (U; V jV 0 ).
Proof: Suppose that V \ V 0 2 F 0 and NI Pl(U; V jV 0). Then by Alg2,
Pl(U \ V jV 0 ) = Pl(U jV \ V 0 ) 
 Pl(V jV 0 ):
(2)
By Acc3, V 0 2 F 0 , so NI Pl (U; V jV 0 ) implies
Pl(U \ V jV 0 ) = Pl(U jV 0 ) 
 Pl(V jV 0 ):
(3)
Since V \ V 0 2 F 0 and (W; F ; F 0 ; Pl) is standard, Pl(V \ V 0 ) =
6 ?. Since Pl(V \ V 0) =
Pl(V jV 0 ) 
 Pl(V 0 ), it follows from Lemma 3.4 that Pl(V jV 0 ) =
6 ?. So, by Alg40 , (2),
0
0
and (3), it follows that Pl(U jV \ V ) = Pl(U jV ). An identical argument shows that
Pl(V jU \ V 0 ) = Pl(V jV 0 ) if U \ V 0 2 F 0 . Thus, IPl(U; V jV 0 ).
Lemmas 4.7 and 4.8 show why noninteraction and independence coincide for conditional
probability dened from unconditional probability, ranking functions, and possibility measures using Poss(U jjV ). Moreover, they suggest why they do not coincide in general. Since
neither Poss(U jV ) nor PlP satisfy Alg40 , it is perhaps not surprising that in neither case
does noninteraction imply conditional independence. (We shall shortly see an example in
the case of PlP ; Fonck (1994) gives examples in the case of Poss(U jV ).) Indeed, noninteraction may not even imply conditional independence for an arbitrary conditional probability
measure, as the following example shows.
Example 4.9: Suppose that W = fa; bg, F = 2W , F 0 = F , f;g, (a) = 1, (b) = 0, but
(bjb) = 1. It is easy to see that fbg is not independent of itself, but fbg does not interact
with fbg, since (b) = (b)  (b). Nevertheless, it is not hard to check that this conditional
probability measure  is algebraic and, in fact, satises Alg40 . However, it is not standard,
since fbg 2 F 0 although (b) = 0.
373

Halpern

It is easy to see that the assumption of standardness is necessary in Lemma 4.8. For
suppose that (W; F ; F 0 ; Pl) is an arbitrary nonstandard algebraic cps for which > 6= ?.
Since (W; F ; F 0 ; Pl) is nonstandard, there must exist some U 2 F 0 such that Pl(U jW ) = ?.
But then
? = Pl(;jW ) = Pl(;jU ) 
 Pl(U jW ) = ? 
 ?:
Thus
Pl(U jW ) = ? = ? 
 ? = Pl(U jW ) 
 Pl(U jW );
so NI Pl(U; U jW ). But Pl(U jU ) = > 6= ? = Pl(U ), so IPl (U; U jW ) does not hold.
In general, Theorem 4.5 does not hold if we use NI Pl rather than IPl . That is, Alg1{4
do not suce to ensure that CIRV1{4 hold for NI Pl . Besides noninteraction, a number of
dierent approaches to dening independence for possibility measures (Campos & Huete,
1999a, 1999b; Dubois, Fari~nas del Cerro, Herzig, & Prade, 1994; Fonck, 1994) and for sets
of probability measures (Campos & Huete, 1993; Campos & Moral, 1995; Cousa et al.,
1999) have been considered. In general, Theorem 4.5 does not hold for them either. It is
beyond the scope of this paper to discuss and compare these approaches to that considered
here, but it is instructive to consider independence for sets of probability measures in a
little more detail, especially for the representation PlP .
De Campos and Moral (1995) dene what the call type-1 independence. U and V
are type-1 independent conditional on V 0 with respect to P if U and V are independent
conditional on V 0 with respect to every  2 P . It is easy to check that type-1 independence
is equivalent to noninteraction in the context of sets of probability measures. Thus, by
Lemma 4.7, IPlP (U; V jV 0 ) implies that U and V are type-1 independent conditional on
V 0 (and similarly for random variables). However, the converse does not necessarily hold,
because the two approaches treat conditioning on events that have probability 0 according
to some (but not all) of the measures in P dierently. To see this, consider an example
discussed by de Campos and Moral. Suppose a coin is known to be either double-headed or
double-tailed and is tossed twice. This can be represented by P = f0 ; 1 g, where 0 (hh) =
1 and 0 (ht) = 0 (th) = 0 (tt) = 0, while 1 (tt) = 1 and 1 (ht) = 1 (th) = 1 (hh) = 0.
Let X1 and X2 be the random variables representing the outcome of the rst and second
coin tosses, respectively. Clearly there is a functional dependence between X1 and X2 , but
it is easy to check that X1 and X2 are type-1 independent with respect to P . Moreover,
noninteraction holds: NI Pl(X1 = i; X2 = j ) holds for i; j 2 fh; tg. On the other hand,
IPlP (X1 ; X2 ) does not hold. For example, fX1=h(1) = 0 while fX1=hjX2 =h(1) = .9
The dierence between noninteraction (i.e., type-1 independence) and the denition of
independence used in this paper in the context of sets of probability measures can be summarized as follows. U and V do not interact with respect to P if U and V are independent
9. As Peter Walley [private communication, 2000] points out, this example is somewhat misleading. The
denition of independence with respect to PlP produces the same counterintuitive behavior as type-1
independence if the probabilities are modied slightly so as to make them positive, i.e., when there is
\almost functional dependence" between the two variables. For example, suppose that the coin in the
example is known to either land heads with probability :99 or :01 (rather than 1 and 0, as in the example).
Let 00 and 01 be the obvious modications of 0 and 1 required to represent this situation, and let
0 = 00 ; 01 . It is easy to check that X1 and X2 continue to be type-1 independent, and noninteraction
continues to hold, but now IPl (X1 ; X2 ) also holds. The real problem is that this representation of
uncertainty does not enable learning.
P

f

g

P0

374

Conditional Plausibility Measures and Bayesian Networks

with respect to all measures  2 P . On the other hand, U and V are independent with
respect to P if (1) U and V are independent for all measures  2 P such that (U ) > 0 and
(V ) > 0 and (2) (U ) = 0 i (V ) = 0 for all  2 P . The denition of independence used
here is thus more restrictive; it does not ignore the measures that give U or V probability 0
when determining independence. The dierence between the two approaches is illustrated
in the example in the previous paragraph.
As the variant of the example considered in Footnote 9 shows though, neither denition
can completely claim to represent the intuition that if U is independent of V , then learning
U gives no information about V . If the coin in the example is known to land heads with
probability either .99 or .01, then seeing the rst coin toss land heads certainly seems to
give information about the second coin toss, even though both denitions would declare
the events independent. However, the denition of independence used here does have the
advantage of leading to an algebraic cps, which means, as is shown in the next section, that
using it leads to a representation of sets of probability measures that can be represented as
a Bayesian network.

5. Bayesian Networks

Throughout this section, I assume that we start with a set W of possible worlds characterized
by a set X = fX1 ; : : : ; Xn g of n binary random variables. That is, a world in W is a tuple
(x1 ; : : : ; xn ) with xi 2 f0; 1g, and Xi (x1 ; : : : ; xn ) = xi ; that is, the value of Xi in world
w = (x1 ; : : : ; xn ) = wi.10 The goal of this section is to show that many of the tools of
Bayesian network technology can be applied in this setting. The proofs of the main results
all proceed in essentially the same spirit as well-known results for probabilistic Bayesian
networks (see (Geiger & Pearl, 1988; Geiger et al., 1990; Verma, 1986)).

5.1 Qualitative Bayesian Networks

As usual, a (qualitative) Bayesian network (over X ) is a dag whose nodes are labeled by
variables in X . The standard notion of a Bayesian network representing a probability
measure (Pearl, 1988) can be generalized in the obvious way to plausibility.
Denition 5.1: Given a qualitative Bayesian network G, let ParG(X ) be the parents of the
random variable X in G; let DesG (X ) be all the descendants of X , that is, X and all those
nodes Y such that X is an ancestor of Y ; let NDG (X ), the nondescendants of X , consist
of X , DesG (X ). Note that all ancestors of X are nondescendants of X . The Bayesian
network G is compatible with the cps (W; F ; F 0 ; Pl) (or just compatible with Pl, if the other
components of the cps are clear from context) if IPlrv (X; NDG (X )jPar(X )), that is, if X is
conditionally independent of its nondescendants given its parents, for all X 2 X .
There is a standard way of constructing a Bayesian network that represents a probability measure (Pearl, 1988). I briey review the construction here, since it works without
change for an algebraic cpm. Given an algebraic cpm Pl, let Y1 ; : : : ; Yn be a permutation of the random variables in X . Construct a qualitative Bayesian network GPl;hY1 ;:::;Y i
n

10. The assumption that the random variables are binary is just for ease of exposition. It is easy to generalize
the results to the case where (X ) is nite for each X ; there is no need to assume that (X ) is a
subset of the reals.
R

i

i

375

R

i

Halpern

as follows: For each k, nd a minimal subset of fY1 ; : : : ; Yk,1 g, call it Pk , such that
IPlrv (fY1 ; : : : ; Yk,1 g; Yk jPk ). Then add edges from each of the nodes in Pk to Yk . Verma
(1986) shows that this construction gives a Bayesian network that is compatible with Pl in
the case that Pl is a probability measure; his proof depends only on CIRV1{4. Thus, the
construction works for algebraic cpms.

Theorem 5.2: GPl;hY1 ;:::;Y i is compatible with Pl.
Proof: For ease of notation in the proof, I write G instead of GPl;hY1 ;:::;Y i . Note that
Y1 ; : : : ; Yn represents a topological sort of G; edges always go from nodes in fY1 ; : : : ; Yk,1g
n

n

to Yk . It follows that G is acyclic; i.e., it is a dag. The construction guarantees that
Pk = ParG(Yk ) and that IPlrv (fY1 ; : : : ; Yk,1g; Yk jParG(Yk )). It follows from results of (Verma,
1986) (and is not hard to verify directly) that IPlrv (NDG (Yk ); Yk jParG (Yk )) can be proved
using only CIRV1{4. The result now follows from Theorem 4.5.

5.2 Quantitative Bayesian Networks

A qualitative Bayesian network G gives qualitative information about dependence and independence, but does not actually give the values of the conditional plausibilities. To provide
the more quantitative information, we associate with each node X in G a conditional plausibility table (cpt) that quanties the eects of the parents of X on X . A cpt for X gives,
for each setting of X 's parents in G, the plausibility that X = 0 and X = 1 given that
setting. For example, if X 's parents in G are Y and Z , then the cpt for X would have an
entry denoted dX =ijY =j \Z =k for all (i; j; k) 2 f0; 1g3 . As the notation is meant to suggest,
dX =ijY =j \Z =k = Pl(X = ijY = j \ Z = k) for the plausibility measure Pl represented by
G.11 For each xed j and k, we assume that x0jk  x1jk = >. A quantitative Bayesian
network is a pair (G; f ) consisting of a qualitative Bayesian network G and a function f
that associates with each node X in G a cpt for X .

Denition 5.3: A quantitative Bayesian network (G; f ) represents Pl if G is compatible

with Pl and the cpts agree with Pl, in the sense that, for each random variable X , the entry
dX =ijY1 =j1 ;:::;Y =j in the cpt is Pl(X = ijY1 = j1 \: : :\Yk = jk ) if Y1 = j1 \: : :\Yk = jk 2 F 0 .
(It does not matter what dX =ijY1 =j1 ;:::;Y =j is if Y1 = j1 \ : : : \ Yk = jk 2= F 0 .)
k

k

k

k

Given a cpm Pl, it is easy to construct a quantitative Bayesian network (G; f ) that
represents Pl: simply construct G that is compatible with Pl as in Theorem 5.2 and dene
f appropriately, using Pl. The more interesting question is whether there is a unique
algebraic cpm determined by a quantitative Bayesian network. As stated, this question is
somewhat undetermined. The numbers in a quantitative network do not say what  and

 ought to be for the algebraic cpm.
A reasonable way to make the question more interesting is the following. Recall that,
for the purposes of this section, I have taken W to consist of the 2n worlds characterized by
the n binary random variables in X . Let PLD;;
 consist of all standard cps's of the form
(W; F ; F 0 ; Pl), where F = 2W , so that all subsets of W are measurable, the range of Pl is
11. Of course, if the random variables are not binary, i; j; k have to range over all possible values for the
random variables.

376

Conditional Plausibility Measures and Bayesian Networks

D, and Pl is algebraic with respect to  and 
. Thus, for example, PLIN  ;min;+ consists
of all conditional ranking functions on W dened from unconditional ranking functions by
the construction in Section 2. Since a cps (W; F ; F 0 ; Pl) 2 PLD;;
 is determined by Pl, I
often abuse notation and write Pl 2 PLD;;
.
With this notation, the question becomes whether a quantitative Bayesian network
(G; f ) such that the entries in the cpts are in D determines a unique element in PLD;;
. As
I now show, the answer is yes, provided (D; ; 
) satises some conditions. Characterizing
the conditions on (D; ; 
) required for this result turns out to be a little subtle. Indeed,
it is somewhat surprising how many assumptions are required to reproduce the simple
arguments that are required in the case of probability.

Denition 5.4: (D; ; 
) is a BN-compatible domain (with respect to PLD;;
) if there
are sets D(
)  D  D and D()  D [ D2 [ D3 [ : : : satisfying the following properties:
BN1.  and 
 are commutative and associative.
BN2. For all d 2 D, (>; d); (?; d) 2 D(
), (?; d) 2 D(), > 
 d = d, ? 
 d = ?, and
?  d = d.
BN3. 
 distributes over ; more precisely, a 
 (b1      bn ) = (a 
 b1 )      (a 
 bn ) if
(a; b1 ); : : : ; (a; bn ); (a; b1    bn) 2 D(
) and (b1 ; : : : ; bn ); (a 
 b1 ; : : : ; a 
 bn ) 2 D();
moreover, (a1    an ) 
 b = a1 
 b    an 
 b if (a1 ; : : : ; an ); (a1 
 b; : : : ; an 
 b) 2
D() and (a1      an; b); (a1 ; b); : : : ; (an ; b) 2 D(
).
BN4. If (a; c); (b; c) 2 D(
), a 
 c  b 
 c, and c =
6 ?, then a  b.
BN5. If (d1 ; : : : ; dk ) 2 D() and d1      dk  d, then there exists (d01 ; : : : ; d0k ) 2 D()
such that (d01 ; d); : : : ; (d0k ; d); (d01      d0k ; d) 2 D(
), di = d0i 
 d, for i = 1; : : : ; k,
and d1     dk = (d01      d0k ) 
 d.
BN6. D() is closed under permutations and prexes, so that if (x1 ; : : : ; xk ) 2 D() and
 is a permutation of (1; : : : ; k), then (x(1) ; : : : ; x(k) ) 2 D() and if k0  k, then
(x1 ; : : : ; xk0 ) 2 D(); moreover D()  D.
BN7. If (d1 ; : : : ; dk ); (d01 ; : : : ; d0m ) 2 D(), (di ; d0j ) 2 D(
) for i = 1; : : : ; k, j = 1; : : : ; m,
then (d1 
 d01 ; : : : ; d1 
 d0m ; : : : ; dk 
 d01 ; : : : ; dk 
 d0m ) 2 D().
BN8. If (d1 ; : : : ; dk ) 2 D() and k0  k, then d1      dk0  d1      dk .
Note that all the representations of uncertainty we have considered so far have associated
with them BN-compatible domains. Indeed, the denitions of D(), D(
), , and 
 in
each case are given in the proof of Proposition 3.2. For example, for PL[0;1];max;min, the
set of conditional possibility measures determined by unconditional possibility measures,
D() = [0; 1]  [0; 1], while D(
) consists of all pairs (a; b) 2 [0; 1]  [0; 1] such that a < b
or a = 1. I leave it to the reader to check that, in all these cases, BN1{8 hold.
Given a tuple x = (x1 ; : : : ; xn ) 2 [0; 1]n , let dX ;G;x denote the value dX =x jPar (X )=y ,
where y is the restriction of x to the variables in ParG (Xi ).
i

377

i

i

G

i

Halpern

Denition 5.5: If (D; ; 
) is BN-compatible, then a quantitative Bayesian network (G; f )
is (D; ; 
)-representable if the values of the cpts for G lie in D and the following properties
hold:
R1. For every node X in G and every setting y of ParG (X ), (dX =0jPar (X )=y ; dX =1jPar (X )=y ) 2
Dom() and
dX =0jPar (X )=y  dX =1jPar (X )=y = >:
G

G

G

G

R2. Suppose Y1 ; : : : ; Yn is a topological sort of the nodes in G. Then for all y 2 f0; 1gn
and all 1  j < k  n, (dY ;G;y ; dY +1 ;G;y 
    
 dY ;G;y ) 2 D(
) and (dY ;G;y 
    

dY ,1 ;G;y ; dY ;G;y ) 2 D(
).
j

k

j

k

j

k

R1 is the obvious analogue of the requirement in the probabilistic case that the entries
of the cpt for X , for a xed setting of X 's parents, add up to 1. R2 essentially says that
certain terms (the ones required to compute the plausibility of Y = y for Y = hY1 ; : : : ; Yn i)
are required to be in D(
), so that it makes sense to take their product. Since D(
) =
[0; 1]  [0; 1] in the case of probability, there is no need to make this requirement explicit.
However, it is necessary for other representations of uncertainty.
The following result shows that, as the name suggests, there is a unique cpm that
represents a representable quantitative Bayesian network.

Theorem 5.6 : If (G; f ) is (D; ; 
)-representable, then there is a unique cpm Pl 2
PLD;;
 such that (G; f ) represents Pl.
5.3 D-Separation

Just as in the case of probability, conditional independencies can be read o the Bayesian
network using the criterion of d-separation (Pearl, 1988). Recall that a set X of nodes
in G = (V; E ), is d-separated from a set Y of nodes by a set Z of nodes in G, written
d-sep G (X; YjZ), if, for every X 2 X, Y 2 Y, and a trail from X to Y (that is, a sequence
(X0 ; : : : ; Xk ) of nodes in G such that X0 = X , Xk = Y and either (Xi ; Xi+1 ) or (Xi+1 ; Xi )
is a directed edge in G) and a node Xi on the trail with 0 < i < k such that either:
(a) Xi 2 Z and there is an arrow leading into Xi and an arrow leading out (i.e., either
(Xi,1 ; Xi ); (Xi ; Xi+1 ) 2 E or (Xi ; Xi,1 ); (Xi+1 ; Xi ) 2 E
(b) Xi 2 Z and Xi is a tail-to-tail node (i.e., (Xi ; Xi,1 ); (Xi ; Xi+1 ) 2 E )
(c) Xi is a head to head node (i.e., (Xi,1 ; Xi ); (Xi+1 ; Xi ) 2 E ), and neither Xi nor any
of its descendants are in Z.
Let G;Pl consist of all statements of the form IPlrv (X; NDG (X )jParG (X )). Let PLD;;

be an arbitrary collection of cps's of the form (W; F ; F 0 ; Pl) where all components other
than Pl are xed, and the plausibility measures Pl all have the same range D of plausibility
values. Consider the following three statements:
1. d-sep G (X; YjZ).
2. IPlrv (X; YjZ) is provable from CIRV1{4 and G;Pl.
378

Conditional Plausibility Measures and Bayesian Networks

3. IPlrv (X; YjZ) holds for every plausibility measure in PLD;;
 compatible with G.
The implication from 1 to 2 is proved in (Geiger et al., 1990; Verma, 1986).

Theorem 5.7: (Geiger et al., 1990; Verma, 1986) If d-sep G(X; YjZ), then IPlrv (X; YjZ) is
provable from CIRV1{4 and G;Pl.

It is immediate from Theorem 4.5 that the implication from 2 to 3 holds for algebraic
cpms.
Corollary 5.8: If IPlrv (X; YjZ) is provable from CIRV1{4 and G;Pl, then IPlrv (X; YjZ)
holds for every algebraic cpm Pl compatible with G.
Finally, the implication from 3 to 1 for probability measures is proved in (Geiger & Pearl,
1988; Geiger et al., 1990). Here I generalize the proof to algebraic plausibility measures.
Notice that to prove the implication from 3 to 1, it suces to show that if X is not dseparated from Y by Z in G, then there is a plausibility measure Pl 2 PLD;;
 such that
IPlrv (X; Y jZ) does not hold. To guarantee that such a plausibility measure exists in PLD;;
,
we have to ensure that there are \enough" plausibility measures in PLD;;
 in the following
technical sense.

Denition 5.9: A BN-compatible domain (D; ; 
) is rich if there exist d; d0 2 D such
that (1) (d; d0 ) 2 D(), (2) d  d0 = > and (3) if x = x1 
 : : : 
 xk , where each xi is either
d or d0 and k < n, then (d; x), (x; d), (d0 ; x), and (x; d0 ) are all in D(
) (intuitively, D(
)

contains all products involving d and d0 of length at most n).

All the domains for the cps's we have considered are easily seen to be rich.

Theorem 5.10: Suppose that plausibility measures in PLD;;
 take values in a rich BNcompatible domain. Then if IPlrv (X; YjZ) holds for every plausibility measure in PLD;;

compatible with G, then d-sep G (X; YjZ).
I remark that independence and d-separation for various approaches to representing sets
of probability measures using Bayesian networks are discussed by Cozman (2000b, 2000a).
However, the technical details are quite dierent from the approach taken here.

6. Conclusion

I have considered a general notion of conditional plausibility that generalizes all other standard notions of conditioning in the literature, and examined various requirements that
could be imposed on conditional plausibility. One set of requirements, those that lead to
algebraic cps's, was shown to suce for the construction of Bayesian networks. Further
assuming that the range D of the plausibility measure is a BN-compatible domain suces
for all the more quantitative properties of Bayesian networks to hold and for d-separation
to characterize the independencies. It should also be clear that standard constructions like
belief propagation in Bayesian networks (Pearl, 1988) can also be applied to algebraic cps's
with ranges that are BN-compatible, since they typically use only basic properties of conditioning, addition, and multiplication, all of which hold in BN-compatible domains (using
379

Halpern

 and 
). In particular, these results apply to sets to probability measures, provided that

they are appropriately represented as plausibility measures. The particular representation
of sets of probability measures advocated in this paper was also shown to have a number of
other attractive properties.
The results of this paper show that Alg1{4 are sucient conditions for representing
a measure of uncertainty that is acceptable as a Bayesian network. They may not be
necessary. It would be interesting to see if other natural conditions also suce. Similarly, I
have focused only on acceptable cps's, that is, ones that satisfy Acc1{4. Acc3 and Acc4 are
nontrivial conditions; it would be of interest to see to what extent they could be weakened
while still being able to prove results in the spirit of this paper. I leave these questions to
future research.

Appendix A. Proofs

In this section I give the proofs of Theorems 4.5, 5.6, and 5.10. I repeat the statement of
the results for the convenience of the reader.

Lemma A.1: Suppose that (W; F ; F 0 ; Pl) is a cps, A1 ; : : : ; An is a partition of W , X; A1 ; : : : ; An 2
F , and Y 2 F 0 . Then
Pl(X jY ) = fi:A \Y 2F 0 g Pl(X jAi \ Y ) 
 Pl(Ai jY ):12
i

Proof: Using an easy induction argument, it follows from Alg1 that
Pl(X jY ) = ni=1 Pl(X \ Ai jY ):
If Ai \ Y 2= F 0 , then it follows from Acc4 that Pl(Ai jY ) = ?. Thus, by CPl3, Pl(X \ Ai jY ) =
?. Using Lemma 3.3, it follows that
Pl(X jY ) = fi:A \Y 2F 0 g Pl(X \ Ai jY ):
If Ai \ Y 2 F 0 , then it follows from Alg2 that Pl(X \ Ai jY ) = Pl(X jAi \ Y ) 
 Pl(Ai jY ).
i

Thus,

Pl(X jY ) = fi:A \Y 2F 0 g Pl(X jAi \ Y ) 
 Pl(Ai jY );
i

as desired.

Theorem 4.5: CIRV1{4 hold for all algebraic cps's.
Proof: CIRV1 is immediate from the fact that independence is symmetric.
For CIRV2, suppose that IPlrv (X; Y [ Y0 jZ). We must show IPlrv (X; YjZ). That is, we
must show that IPl (X = x; Y = yjZ = z), for all x, y, and z. This requires showing two

things.

0 , then Pl(X A Y ) Pl(A Y ) = Pl(X A Y ) by Alg2. Thus, the terms
12. Notice that if A Y
arising on the right-hand side of the equation in Lemma A.1 are in Dom( ). This means that there is
no need to put in parentheses; is associative on terms in Dom( ).
i \

2 F

j

i \




ij

\

ij







380

Conditional Plausibility Measures and Bayesian Networks

2(a). If X = x \ Z = z 2 F 0 , then
Pl(Y = yjX = x \ Z = z) = Pl(Y = yjZ = z):
2(b). If Y = y \ Z = z 2 F 0 , then
Pl(X = xjY = y \ Z = z) = Pl(X = xjZ = z):
For 2(a), suppose that Pl(X = x \ Z = z) 2 F 0 . From IPl (X; Y [ Y0jZ), it follows that
IPl (X = x; Y = y \ Y0 = y0jZ = z) for all y0 . Hence
Pl(Y = y \ Y0 = y0 jX = x \ Z = z) = Pl(Y = y \ Y0 = y0 jZ = z)

(4)

for all y0 2 R(Y0 ). From (4) it follows that

y0 Pl(Y = y \ Y0 = y0 jX = x \ Z = z) = y0 Pl(Y = y \ Y0 = y0 jZ = z):
Thus,
Pl([y0 Y = y \ Y0 = y0 jX = x \ Z = z) = Pl([y0 Y = y \ Y0 = y0 jZ = z):
Since [y0 (Y = y \ Y0 = y0 ) = Y = y, 2(a) holds.
For 2(b), from IPlrv (X; Y [ Y0 jZ), it follows that if Y = y \ Y0 = y0 \ Z = z 2 F 0 , then
Pl(X = xjY = y \ Y0 = y0 \ Z = z) = Pl(X = xjZ = z):

(5)

From (5) and Lemma A.1, it follows that
Pl(X = xjY = y \ Z = z)
= fy0 :Y=y\Y0 =y0 \Z=z2F 0 g Pl(X = xjY = y \ Y0 = y0 \ Z = z) 
 Pl(Y0 = y0 jY = y \ Z = z)
= fy0 :Y=y\Y0 =y0 \Z=z2F 0 g Pl(X = xjZ = z) 
 Pl(Y0 = y0 jY = y \ Z = z):
(6)
0
0
0
0
0
By Acc4, it follows that if Y = y \ Y = y \ Z = z 2= F , then Pl(Y = y jY = y \
Z = z) = ?. Thus, by Lemma 3.3, Alg1, CPl2, and CPl4,

fy0:Y=y\Y0=y0\Z=z2F 0 gPl(Y0 = y0 jY = y \ Z = z)
= y0 Pl(Y0 = y0 jY = y \ Z = z)
= Pl(W jY = y \ Z = z)
= >:

(7)

The next step is to apply distributivity (Alg3) to the last line of (6). To do this, we
must show that certain tuples are in Dom() and Dom(
), respectively. Since
(Pl(X = xjY = y \ Y0 = y0 \ Z = z); Pl(Y0 = y0 jY = y \ Z = z) 2 Dom(
);
from (5) it follows that
(Pl(X = xjZ = z); Pl(Y0 = y0 jY = y \ Z = z)) 2 Dom(
):
381

Halpern

If fyi0 1 ; : : : ; yi0 g = fy0 2 R(Y0 ) : Y = y \ Y0 = y0 \ Z = z 2 F 0 g, then clearly
k

(Pl(Y0 = y0i1 jY = y \ Z = z); : : : ; Pl(Y0 = y0i jY = y \ Z = z) 2 Dom():
k

Moreover, using (5) again and Alg2, it follows that
Pl(X = xjZ = z) 
 Pl(Y0 = y0i jY = y \ Z = z) = Pl(X = x \ Y0 = y0i jY = y \ Z = z):
k

k

Thus, (Pl(X = xjZ = z)
Pl(Y0 = y0i1 jY = y\Z = z); : : : ; Pl(X = xjZ = z)
Pl(Y0 = y0i jY = y\
Z = z) 2 Dom(). Finally, since (7) shows that fy0:Y=y\Y0=y0\Z=z2F 0g = > and, by the
proof of Lemma 3.4, (d; >) 2 Dom(
) for all d 2 Range(Pl), it follows that
k

(Pl(XjZ = z); fy0 :Y=y\Y0 =y0 \Z=z2F 0 g Pl(Y0 = y0 jY = y \ Z = z)) 2 Dom(
):
It now follows, using Alg3, (7), and Lemma 3.4, that

fy0:Y=y\Y0=y0\Z=z2F 0gPl(X = xjZ = z) 
 Pl(Y0 = y0 jY = y \ Z = z)
= Pl(X = xjZ = z) 
 (fy0 :Y=y\Y0 =y0 \Z=z2F 0 g Pl(Y0 = y0 jY = y \ Z = z))
= Pl(X = xjZ = z) 
 >
= Pl(X = xjZ = z):
Thus, from (6), it follows that Pl(X = xjY = y \ Z = z) = Pl(X = xjZ = z). This com-

pletes the proof of 2(b) and CIRV2.
For CIRV3, suppose that IPlrv (X; Y [ Y0 jZ). We must show that IPlrv (X; YjY0 [ Z). This
again requires showing two things:
3(a). If X = x \ Y0 = y0 \ Z = z 2 F 0 , then
Pl(Y = yjX = x \ Y0 = y0 \ Z = z) = Pl(Y = yjY0 = y0 \ Z = z):
3(b). If Y = y \ Y0 = y0 \ Z = z 2 F 0 , then
Pl(X = xjY = y \ Y0 = y0 \ Z = z) = Pl(X = xjY0 = y0 \ Z = z):
For 3(a), suppose that X = x\Y0 = y0 \Z = z 2 F 0 . Thus, by Acc3, X = x\Z = z 2 F 0 .
Since IPlrv (X; Y [ Y0 jZ), it follows that
Pl(Y = y00 \ Y0 = y0 jX = x \ Z = z) = Pl(Y = y00 \ Y0 = y0 jZ = z)
for all y00 2 R(Y). Applying Alg2 to each side of (8), it follows that
Pl(Y = yjY0 = y0 \ X = x \ Z = z) 
 Pl(Y0 = y0 jX = x \ Z = z)
= Pl(Y = yjY0 = y0 \ Z = z) 
 Pl(Y0 = y0 jZ = z):
Thus, to prove 3(a), it follows from Alg4 that it suces to show that
Pl(Y0 = y0 jX = x \ Z = z) = Pl(Y0 = y0 jZ = z) 6= ?:
382

(8)

Conditional Plausibility Measures and Bayesian Networks

But by (8) and Alg1, it follows that
Pl(Y0 = y0 jX = x \ Z = z)
= y00 2R(Y) Pl(Y = y00 \ Y0 = y0 jX = x \ Z = z)
= y00 2R(Y) Pl(Y = y00 \ Y0 = y0 jZ = z)
= Pl(Y0 = y0 jZ = z);
as desired. Moreover, since X = x \ Y0 = y0 \ Z = z 2 F 0 , it follows from Acc4 that
Pl(Y0 = y0 jZ = z) 6= ?.
For 3(b), suppose that Y = y \ Y0 = y0 \ Z = z 2 F 0 . Since IPlrv (X; Y [ Y0 jZ), it follows
that
Pl(X = xjY = y \ Y0 = y0 \ Z = z) = Pl(X = xjZ = z):
Thus, to prove 3(b), it suces to show that
Pl(X = xjY0 = y0 \ Z = z) = Pl(X = xjZ = z):
(9)
Recall that we are assuming that IPlrv (X; Y [ Y0 jZ). By CIRV2, it follows that IPlrv (X; Y0 jZ).
Thus, (9) is immediate from 2(b) (since Y = y \ Y0 = y0 \ Z = z 2 F 0 implies that Y0 = y0 \
Z = z 2 F 0).
Finally, consider CIRV4. Suppose that IPlrv (X; YjZ) and IPlrv (X; Y0 jY [ Z). We must
show that IPlrv (X; Y [ Y0 jZ). As usual, this requires showing two things:
4(a). If Y = y \ Y0 = y0 \ Z = z 2 F 0 , then
Pl(X = xjY = y \ Y0 = y0 \ Z = z) = Pl(X = xjZ = z):
4(b). If X = x \ Z = z 2 F 0 , then
Pl(Y = y \ Y0 = y0 jX = x \ Z = z) = Pl(Y = y \ Y0 = y0 jZ = z):
Both 4(a) and 4(b) are straightforward. For 4(a), suppose that Y = y\Y0 = y0 \Z = z 2
F 0 . Since IPlrv (X; Y0 jY [ Z), it follows that
Pl(X = xjY = y \ Y0 = y0 \ Z = z) = Pl(X = xjY = y \ Z = z):
And since IPlrv (X; YjZ), it follows that
Pl(X = xjY = y \ Z = z) = Pl(X = xjZ = z):
Thus we have 4(a).
For 4(b), suppose that X = x \ Z = z 2 F 0 . There are now two cases to consider. If
Pl(Y = yjX = x \ Z = z) 6= ? then, by Acc4, X = x \ Y = y \ Z = z 2 F 0 . Moreover, by
Alg2,
Pl(Y = y\Y0 = y0 jX = x\Z = z) = Pl(Y0 = y0 jX = x\Y = y\Z = z)
Pl(Y = yjX = x\Z = z):
(10)
Since IPlrv (X; Y0 jY [ Z), it follows that
Pl(Y0 = y0 jX = x \ Y = y \ Z = z) = Pl(Y0 = y0 jY = y \ Z = z):
383

Halpern

And since IPlrv (X; YjZ), it follows that Pl(Y = yjX = x \ Z = z) = Pl(Y = yjZ = z). Plugging this into (10) and applying Alg2 again gives
Pl(Y = y \ Y0 = y0 jX = x \ Z = z)
= Pl(Y0 = y0 jY = y \ Z = z) 
 Pl(Y = yjZ = z)
= Pl(Y = y \ Y0 = y0 jZ = z);
as desired.
Now if Pl(Y = yjX = x \ Z = z) = ?, then by CPl3, it follows that Pl(Y = y \
Y0 = y0 jX = x\Z = z) = ?. Moreover, since IPlrv (X; YjZ), it follows that Pl(Y = yjZ = z) =
?. Applying CPl3, we get that Pl(Y = y \ Y0 = y0 jZ = z) = ?. Thus, again 4(b) holds.

Theorem 5.6: If (G; f ) is (D; ; 
)-representable then there is a unique cpm Pl 2
PLD;;
 such that (G; f ) represents Pl.
Proof: Given (G; f ), suppose without loss of generality that X = hX1 ; : : : ; Xn i is a topo-

logical sort of the nodes in G. I now dene the plausibility measure Pl determined by (G; f ).
I start by dening Pl(G;f ) on sets of the form X = x.
It easily follows from Alg2 that if Pl 2 PLD;;
 and Pl(X1 = x1 \ : : : \ Xn,1 = xn,1 ) 6=
?, then
Pl(X = x) = Pl(Xn = xn jX1 = x1 \ : : : \ Xn,1 = xn,1 )

Pl(Xn,1 = xn,1 jX1 = x1 \ : : : \ Xn,2 = xn,2 )

(11)
   
 Pl(X2 = x2jX1 = x1 ) 
 Pl(X1 = x1):
Thus, an algebraic plausibility measure satises an analogue of the chain rule for probability.
(Since 
 in D is assumed to be associative, no parentheses are required here. However, even
without this assumption, it follows easily from Alg2 that 
 is in fact associative on tuples
(a; b; c) of the form (Pl(U1 jU2 ); Pl(U2 jU3 ); Pl(U3 jU4 )), where U1  U2  U3  U4 , which are
the only types of tuples that arise in (11). Associativity will be more of an issue below.)
If Pl is compatible with G, then in fact
Pl(X = x) = Pl(Xn = xn j \X 2Par (X ) Xj = xj )

Pl(Xn,1 = xn,1 j \X 2Par (X ,1) Xj = xj )

(12)
   
 (X1 = x1):
(If ParG (Xk ) = ;, then Pl(Xk = xk j\X 2Par (X ) Xj = xj ) is just taken to be Pl(Xk = xk ).)
It is clear from (12) that Pl(G;f ) (X = x) must be dX ;G;x 
    
 dX1 ;G;x.
Note that every subset of W can be written as a disjoint union of events of the form
X = x. Thus, if U 2 F , dene
Pl(G;f ) (U ) = fx:X=xU gdX ;G;x 
    
 dX1 ;G;x:
For conditional plausibilities, suppose that Pl(G;f ) (V ) 6= ?, so that V 2 F 0 . Let
fx1 ; : : : ; xk g = fx : X = x  V g. It follows easily from BN6, BN7, R1, and R2 that
(Pl(G;f ) (X = x1 ); : : : ; Pl(G;f ) (X = xk )) 2 D(). Thus, by BN8, if X = x  V , then
Pl(G;f ) (X = x)  Pl(G;f ) (V ). By BN5, for each j , there exists dX=x jV such that
(dX=x jV ; Pl(G;f ) (V )) 2 D(
) and dX=x jV 
 Pl(G;f ) (V ) = Pl(G;f ) (X = x);
j

n

G

j

j

G

G

n

k

n

n

j

j

j

384

Conditional Plausibility Measures and Bayesian Networks

it follows from BN4 that dX=x jV is the unique element in D with this property. Moreover,
by BN5, (dX=x1 jV ; : : : ; dX=x jV ) 2 D(). Dene Pl(G;f ) (U jV ) = fx:X=xU \V g dX=xjV
(where Pl(G;f ) (;jV ) is taken to be ?). Note for future reference that it follows from BN5
that (Pl(G;f ) (U jV ); Pl(G;f ) (V )) 2 D(
) and
Pl(G;f ) (U jV ) 
 Pl(G;f ) (V ) = Pl(G;f ) (U \ V ):
(13)
This completes the denition of Pl(G;f ) . It remains to check that it is an algebraic cpm
that is represented by (G; f ). Thus, we must check that Alg1{4 and CPl1{4 hold. Alg1
is immediate from the denitions and BN1 and BN2 (BN2 is necessary for the case that
one of the disjoint sets is empty); Alg3 is immediate from BN3 and Alg4 is immediate
from BN4. For Alg2, note that if Pl(G;f ) (V ) 6= ? and Pl(G;f ) (V 0 ) 6= ? then, by (13),
Pl(G;f ) (U \ V jV 0 ) 
 Pl(G;f ) (V 0 ) = Pl(G;f ) (U \ V \ V 0 ) and
(Pl(G;f )(U jV \ V 0 ) 
 Pl(G;f ) (V jV 0 )) 
 Pl(G;f ) (V 0 )
= Pl(G;f )(U jV \ V 0 ) 
 (Pl(G;f ) (V jV 0 ) 
 Pl(G;f ) (V 0 ))
= Pl(G;f ) (U jV \ V 0 ) 
 Pl(G;f ) (V \ V 0 )
= Pl(G;f ) (U \ V \ V 0 ):
(Note that the associativity of 
 is being used here.) Thus, by BN4,
Pl(G;f ) (U \ V jV 0 ) = Pl(G;f )(U jV \ V 0 ) 
 Pl(G;f ) (V jV 0 ):
CPl1 is immediate by denition (the empty sum is taken to be ?). For CPl2, note that
by (13), Pl(G;f ) (W jV ) 
 Pl(G;f ) (V ) = Pl(G;f ) (V ). Since > 
 Pl(G;f ) (V ) = Pl(G;f ) (V ) by
BN2, it follows from BN4 that Pl(G;f ) (W jV ) = >. CPl3 follows readily from the denitions
together with BN1, BN6, and BN7. CPl4 also follows by denition.
Next we must show that (G; f ) represents Pl(G;f ) . The rst step is to show that
Pl(G;f ) (X = xjParG (X ) = z) = dX =xjPar (X )=z . Note that by (13),
Pl(G;f ) (X = xjParG (X ) = z) 
 Pl(G;f ) (ParG (X ) = z) = Pl(G;f ) (X = x \ ParG (X ) = z):
By denition,
Pl(G;f ) (X = x \ ParG (X ) = z) = fx:X=x0(X =x\Par (X )=~y)g Pl(G;f ) (X = x0 ):
Each term in the \sum" on the right is the \product" of terms; indeed, the sum is over all
possible products that include dX =yjPar (X )=z as one of the terms and a term dY =yjPar (Y )=z0
for each Y 2 ParG (X ), where y is the component of z corresponding to Y . By using BN1,
BN3, R1, and R2, it is not hard to show that
Pl(G;f ) (X = y \ ParG (X ) = z)
= f:X=x0 (X =x\Par (X )=~y) Pl(G;f ) (X = x0 )
(14)
= dX =xjPar =z 
 Pl(G;f ) (ParG (X ) = z):
It now follows from BN4 that Pl(G;f ) (X = xjParG (X ) = z) = dX =xjPar (X )=z .
To show that Pl(G;f ) (X = xjNDG (X ) = ~y \ ParG (X ) = z) = dX =xjPar (X )=z , it suces
to show that
Pl(G;f ) (X = x \ NDG (X ) = ~y \ ParG (X ) = z)
(15)
= dX =xjPar (X )=z 
 Pl(G;f ) (NDG (X ) = ~y \ ParG (X ) = z);
j

k

G

G

G

G

G

G

G

G

G

385

Halpern

for then the result follows by BN5. (15) can be shown much like (14), but now the commutativity of 
 (BN1) is essential. That is, the expressions for Pl(G;f ) (X = x \ NDG (X ) =
~y \ ParG (X ) = z) and dX =xjPar (X )=z 
 Pl(G;f ) (NDG (X ) = ~y \ ParG(X ) = z) involve
the same terms, but not necessarily in the same order. With commutativity, they can be
permuted so that they are in the same order.
Similar arguments, which I leave to the reader, show that Pl(G;f ) (NDG (X ) = ~yjX =
x \ ParG (X ) = z) = Pl(G;f )(NDG(X ) = ~yjParG (X ) = z). Thus, (G; f ) represents Pl(G;f ) .
G

Theorem 5.10: Suppose that (D; ; 
) is a rich BN-compatible domain. Then if IPlrv (X; YjZ)
holds for every plausibility measure in PLD;;
 compatible with G, then d-sep G (X; YjZ).
Proof: Suppose that X is not d-separated from Y by Z in G. Then there is some X 2 X
and Y 2 Y such that X is not d-separated from Y by Z in G. I construct a cpm in
Pl 2 PLD;;
 such that IPlrv (X; Y jZ) does not hold, using the techniques of (Geiger et al.,

1990).
As shown in (Geiger et al., 1990, Lemma 9), if X is not d-separated from Y in G, there
exists a subgraph G0 of G such that
1. G0 includes all the nodes in G but only a subset of the edges in G,
2. X is not d-separated from Y by Z in G0 .
3. the edges E 0 in G0 consist only of those specied below:
(a) a trail q from X to Y ,
(b) for every head-to-head node Xi on the trail q, there is a directed path pi in G0 to
a node in Z; moreover, the paths pi do not share any nodes and the only node
that pi shares with q is Xi .
Note that every node in G0 has either 0, 1, or 2 parents in G0 . Let (G0 ; f ) be a quantitative
Bayesian network such that for each node in X in G0 with no parents in G0 , the cpt f (X )
is such that dX =0 = d and dX =1 = d0 . If a node X in G0 has one parent, say X 0 , then the
cpt f (X ) is such that dX =ijX 0 =j is > if i = j and ? if i 6= j . Finally, if X has two parents,
say X 0 and X 00 , the cpt f (X ) is such that dX =kjX 0 =i\X 00 =k is > if k = i  j ( mod2) and is ?
otherwise. Since d  d0 = > and BN2 guarantees that >  ? = >, the construction satises
R1. The richness of D guarantees that R2 holds. By Theorem 5.6, there is a (unique)
plausibility measure in Pl 2 PLD;;
 that is represented by (G0 ; f ). It is easy to check that
Pl is compatible with G as well. There are three cases to consider:
 Suppose that X has no parents in G0. Then it is easy to see that IPlrv (X; YjZ) for all
Y and Z (and, in particular, if Y = NDG(X ) and Z = ParG(X )).
 Suppose that X has one parent in G0, say X 0 . Then it is easy to see that IPlrv (X; YjZ)
holds for all Y and Z such that X 0 2 Z. Since X 0 is a parent of X in G, again
IPlrv (X; NDG(X )jParG(X )) must hold.
 Finally, if X has two parents in G0, say X 0 and X 00 , then it is easy to see that
IPlrv (X; YjZ) holds for all Y and Z such that fX 0 ; X 00 g  Z. Since X 0 and X 00 are
parents of X in G, again IPlrv (X; NDG (X )jParG (X )) must hold.
386

Conditional Plausibility Measures and Bayesian Networks

Acknowledgments
A preliminary version of this paper appears in Uncertainty in Articial Intelligence, Proceedings of the Sixteenth Conference, 2000. I thank Serafn Moral, Fabio Cozman, Peter
Walley, and the anonymous referees of both the UAI and journal version of the paper for
very useful comments. This work was supported in part by the NSF, under grants IRI-9625901 and IIS-0090145.

References

Campos, L., & Huete, J. F. (1993). Independence concepts in upper and lower probabilities. In Bouchon-Meunier, B., Valverde, L., & Yager, R. R. (Eds.), Uncertainty in
Intelligent Systems, pp. 85{96. North-Holland, Amsterdam.
Campos, L., & Huete, J. F. (1999a). Independence concepts in possibility theory: Part I.
Fuzzy Sets and Systems, 103 (1), 127{152.
Campos, L., & Huete, J. F. (1999b). Independence concepts in possibility theory: Part II.
Fuzzy Sets and Systems, 103 (3), 487{505.
Campos, L., & Moral, S. (1995). Independence concepts for sets of probabilities. In
Proc. Eleventh Conference on Uncertainty in Articial Intelligence (UAI '95), pp.
108{115.
Cousa, I., Moral, S., & Walley, P. (1999). Examples of independence for imprecise probabilities. In Proc. First Intl. Symp. Imprecise Probabilities and Their Applications.
Cozman, F. G. (1998). Irrelevance and independence relations in Quasi-Bayesian networks.
In Proc. Fourteenth Conference on Uncertainty in Articial Intelligence (UAI '98),
pp. 89{96.
Cozman, F. G. (2000a). Credal networks. Articial Intelligence, 120 (2), 199{233.
Cozman, F. G. (2000b). Separation properties of setes of probability measures. In Proc. Sixteenth Conference on Uncertainty in Articial Intelligence (UAI 2000).
Cozman, F. G., & Walley, P. (1999). Graphoid properties of epistemic irrelevance and
independence. Unpublished manuscript.
Darwiche, A. (1992). A Symbolic Generalization of Probability Theory. Ph.D. thesis, Stanford University.
Darwiche, A., & Ginsberg, M. L. (1992). A symbolic generalization of probability theory.
In Proceedings, Tenth National Conference on Articial Intelligence (AAAI '92), pp.
622{627.
Darwiche, A., & Goldszmidt, M. (1994). On the relation between kappa calculus and probabilistic reasoning. In Proc. Tenth Conference on Uncertainty in Articial Intelligence
(UAI '94), pp. 145{153.
387

Halpern

Dubois, D., Fari~nas del Cerro, L., Herzig, A., & Prade, H. (1994). An ordinal view of
independence with applications to plausible reasoning. In Proc. Tenth Conference on
Uncertainty in Articial Intelligence (UAI '94), pp. 195{203.
Dubois, D., & Prade, H. (1990). An introduction to possibilistic and fuzzy logics. In
Shafer, G., & Pearl, J. (Eds.), Readings in Uncertain Reasoning, pp. 742{761. Morgan
Kaufmann, San Francisco, Calif.
Fagin, R., & Halpern, J. Y. (1991). A new approach to updating beliefs. In Bonissone, P.,
Henrion, M., Kanal, L., & Lemmer, J. (Eds.), Uncertainty in Articial Intelligence 6,
pp. 347{374. Elsevier Science Publishers, Amsterdam.
Finetti, B. d. (1936). Les probabilites nulles. Bulletins des Science Mathematiques (premiere
partie), 60, 275{288.
Fonck, P. (1994). Conditional independence in possibility theory. In Proc. Tenth Conference
on Uncertainty in Articial Intelligence (UAI '94), pp. 221{226.
Friedman, N., & Halpern, J. Y. (1995). Plausibility measures: a user's guide. In
Proc. Eleventh Conference on Uncertainty in Articial Intelligence (UAI '95), pp.
175{184.
Geiger, D., & Pearl, J. (1988). On the logic of causal models. In Proc. Fourth Workshop
on Uncertainty in Articial Intelligence (UAI '88), pp. 136{147.
Geiger, D., Verma, T., & Pearl, J. (1990). Identifying independence in bayesian networks.
Networks, 20, 507{534.
Gilboa, I., & Schmeidler, D. (1993). Updating ambiguous beliefs. Journal of Economic
Theory, 59, 33{49.
Goldszmidt, M., & Pearl, J. (1992). Rank-based systems: A simple approach to belief
revision, belief update and reasoning about evidence and actions. In Principles of
Knowledge Representation and Reasoning: Proc. Third International Conference (KR
'92), pp. 661{672. Morgan Kaufmann, San Francisco, Calif.
Halpern, J. Y. (2000). Conditional plausibility measures and Bayesian networks. In
Proc. Sixteenth Conference on Uncertainty in Articial Intelligence (UAI 2000), pp.
247{255. To appear, Journal of A.I. Research.
Keynes, J. M. (1921). A Treatise on Probability. Macmillan, London.
Levi, I. (1985). Imprecision and uncertainty in probability judgment. Philosophy of Science,
52, 390{406.
Pearl, J. (1988). Probabilistic Reasoning in Intelligent Systems. Morgan Kaufmann, San
Francisco, Calif.
Popper, K. R. (1968). The Logic of Scientic Discovery (revised edition). Hutchison,
London. The rst version of this book appeared as Logik der Forschung, 1934.
388

Conditional Plausibility Measures and Bayesian Networks

Renyi, A. (1964). Sur les espaces simples de probabilites conditionelles. Annales de l'Institut
Henri Poincare, Nouvelle serie, Section B, 1, 3{21. Reprinted as paper 237 in Selected
Papers of Alfred Renyi, III: 1962{1970, Akademia Kiado, 1976, pp. 284{302.
Shafer, G. (1976). A Mathematical Theory of Evidence. Princeton University Press, Princeton, N.J.
Shenoy, P. P. (1994). Conditional independence in valuation based systems. International
Journal of Approximate Reasoning, 10, 203{234.
Shenoy, P. P., & Shafer, G. (1990). An axiomatic framework for Bayesian and belief-function
propagation. In Shachter, R., Levitt, T., Kanal, L., & Lemmer, J. (Eds.), Uncertainty
in Articial Intelligence 4, pp. 169{198.
Spohn, W. (1988). Ordinal conditional functions: a dynamic theory of epistemic states.
In Harper, W., & Skyrms, B. (Eds.), Causation in Decision, Belief Change, and
Statistics, Vol. 2, pp. 105{134. Reidel, Dordrecht, Netherlands.
Verma, T. (1986). Causal networks: semantics and expressiveness. Technical report R{103,
UCLA Cognitive Systems Laboratory.
Walley, P. (1991). Statistical Reasoning with Imprecise Probabilities, Vol. 42 of Monographs
on Statistics and Applied Probability. Chapman and Hall, London.
Wang, Z., & Klir, G. J. (1992). Fuzzy Measure Theory. Plenum Press, New York.
Weydert, E. (1994). General belief measures. In Proc. Tenth Conference on Uncertainty in
Articial Intelligence (UAI '94), pp. 575{582.
Wilson, N. (1994). Generating graphoids from generalized conditional probability. In
Proc. Tenth Conference on Uncertainty in Articial Intelligence (UAI '94), pp. 583{
591.
Zadeh, L. A. (1978). Fuzzy sets as a basis for a theory of possibility. Fuzzy Sets and Systems,
1, 3{28.

389

Journal of Artificial Intelligence Research 14 (2001) 205-230

Submitted 12/00; published 5/01

Domain Filtering Consistencies
Romuald Debruyne

Romuald.Debruyne@emn.fr
Member of the Coconut group
Ecole des Mines de Nantes,
La Chantrerie, 4, Rue Alfred Kastler, 44307 Nantes Cedex 3 - France

Christian Bessière

bessiere@lirmm.fr

Member of the Coconut group
LIRMM - CNRS UMR 5506, 161 rue Ada, 34392 Montpellier Cedex 5 - France

Abstract
Enforcing local consistencies is one of the main features of constraint reasoning. Which
level of local consistency should be used when searching for solutions in a constraint network
is a basic question. Arc consistency and partial forms of arc consistency have been widely
studied, and have been known for sometime through the forward checking or the MAC
search algorithms. Until recently, stronger forms of local consistency remained limited to
those that change the structure of the constraint graph, and thus, could not be used in
practice, especially on large networks. This paper focuses on the local consistencies that
are stronger than arc consistency, without changing the structure of the network, i.e., only
removing inconsistent values from the domains. In the last five years, several such local
consistencies have been proposed by us or by others. We make an overview of all of them,
and highlight some relations between them. We compare them both theoretically and
experimentally, considering their pruning efficiency and the time required to enforce them.

1. Introduction
There are more and more applications in artificial intelligence that use constraint networks
(CNs) to solve combinatorial problems, ranging from design to diagnosis, resource allocation
to car sequencing, natural language understanding to machine vision. Finding a solution in
a constraint network involves looking for a set of value assignments, one for each variable,
so that all the constraints are simultaneously satisfied (Meseguer, 1989; Tsang, 1993). This
task is NP-hard and many exponential time algorithms have been proposed to solve this
problem. These algorithms, which make a systematic exploration of the search space, all
have backtracking as a basis. As long as the unassigned variables have values consistent
with the partial instantiation, they extend it by assigning values to variables. Otherwise,
a dead-end is reached and some previous assignments have to be changed before going on
with the partial instantiation extension. The explicit constraints of the network together
induce some implicit constraints. Since basic search algorithms do not record these implicit
constraints, they waste time by repeatedly detecting the local inconsistencies caused by
them. Filtering techniques are essential to reduce the size of the search space and so to
improve the efficiency of search algorithms. They can be used during a preprocessing step to
remove once and for all some local inconsistencies that otherwise would have been repeatedly
found during search (Dechter & Meiri, 1994). They can also be maintained during search.
c
°2001
AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Debruyne & Bessière

Search algorithms differ in the kind of local consistency they achieve after each choice
of a value for a variable. Most of them enforce partial arc consistency, going from forward
checking (FC,Golomb & Baumert, 1965; Haralick & Elliott, 1980), which only removes the
values directly arc inconsistent with the last assignment, to really full look-ahead (RFL,
Gaschnig, 1974), which achieves full arc consistency. Arc consistency (AC) and partial
forms of arc consistency are widely used for two reasons. First, they have low space and
time complexities, while path consistency and higher levels of k-consistency, which were
for a long time the only other options, are prohibitive and can change the structure of the
network. Moreover, until 1995, more pruningful local consistencies seemed uninteresting
since experimental evaluations of search algorithms showed that the limited local consistency
used by forward checking was the best choice (Nadel, 1988; Kumar, 1992; Bacchus & van
Run, 1995). This conclusion is not surprising since the comparisons were made on very
small and easy constraint networks. On such problems, the additional cost of pruning more
values could not be outweighed by the search savings.
However, the harder a constraint network is, the more useful filtering techniques are.
More recent works (Bessière & Régin, 1996; Sabin & Freuder, 1994; Grant & Smith, 1996)
testing search algorithms at the threshold (Cheeseman, Kanefsky, & Taylor, 1991), where
most of the hard problems are expected to be, show that using more pruningful local
consistencies can be worthwhile. Their conclusion is that maintaining arc consistency during
search (MAC), namely achieving AC both after the choice of a value for a variable and after
the refutation of such a choice, outperforms forward checking on hard problems. The good
behavior of MAC is even more significant on large problems, especially when domains are
large. It is conceivable that on very difficult instances, maintaining an even more pruningful
local consistency may pay off. Obviously, such an algorithm would waste seconds on easy
CNs but it would save many minutes (hours ?) on very hard problems, reducing the set of
pathological CNs on which search is really prohibitive.
In this paper we study the local consistencies as preprocessing filtering techniques. This
is a preliminary work before trying to determine which local consistency is the most advantageous to be maintained during search. In the last five years, many new local consistencies
have been proposed. In the remaining of this paper, we focus our attention on those that
leave unchanged the structure of the network since they are the only able to be used on large
CNs. In addition to an overview of these local consistencies that only remove inconsistent
values, we both compare, theoretically and experimentally, their pruning efficiency and the
time needed to enforce them.

2. Definitions and Notations
A network of binary constraints P = (X , D, C) is defined by a set X = {i, j, . . . } of n
variables, each taking value in its respective finite domain Di , Dj , . . . elements of D, and a
set C of e binary constraints. d is the size of the largest domain. A binary constraint Cij
is a subset of the Cartesian product Di × Dj that denotes the compatible pairs of values
for i and j. We denote Cij (a, b) = true to specify that ((i, a), (j, b)) ∈ Cij . We then say
that (j, b) is a support for (i, a) on Cij . Checking whether a pair of values is allowed by
a constraint is called a constraint check . With each CN we associate a constraint graph
in which nodes represent variables and arcs connect pairs of variables that are constrained
206

Domain Filtering Consistencies

explicitly. c is the number of 3-cliques in the constraint graph and g is the maximum degree
of a node in the constraint graph. The neighborhood of i is the set of variables adjacent to i
in the constraint graph. A domain D0 = {Di0 , Dj0 , . . .} is a sub-domain of D = {Di , Dj , . . .}
if ∀i, Di0 ⊆ Di . An instantiation I of a set of variables S is a set of value assignments
{Ij }j∈S , one for each variable belonging to S, s.t. ∀j ∈ S, Ij ∈ Dj . An instantiation I of
S satisfies a constraint Cij if {i, j} 6⊆ S or Cij (Ii , Ij ) is true. An instantiation is consistent
if it satisfies all the constraints. A pair of values ((i, a), (j, b)) is path consistent if for all
k ∈ X s.t. j 6= k 6= i 6= j, this pair of values can be extended to a consistent instantiation
of {i, j, k}. (j, b) is a path consistent support for (i, a) if (a, b) ∈ Cij and ((i, a), (j, b)) is
path consistent. A solution of P = (X , D, C) is a consistent instantiation of X . A value
(i, a) is consistent if there is a solution I such that Ii = a, and a CN is consistent if it has
at least one solution. We denote by P |Di ={a} the CN obtained by restricting Di to {a} in
P . If LC is a local consistency, a CN P is not LC-consistent iff LC does not hold on P .
A CN P is LC-inconsistent iff we cannot obtain a LC-consistent constraint network by
deletion of some local inconsistencies in P . If a local consistency LC is used to detect the
inconsistency of instantiations no longer than 1, we can say that a CN P = (X , D, C) is
LC-inconsistent iff there is no sub-domain D0 of D such that LC holds on (X , D0 , C).

3. The Local Consistencies Studied
Filtering techniques can be used to detect the inconsistency of a CN, and under some
assumptions, they can ensure a backtrack-free search (Freuder, 1982, 1985). However,
their usual purpose is not to find a solution in a constraint network. They remove some
local inconsistencies and so delete some regions of the search space that do not contain
any solution. The resulting CN is equivalent to the initial one since the set of solutions
is unchanged, but if substantial reductions are made the search becomes easier. In this
section we review the basis of arc consistency, k-consistency, restricted path consistency,
and inverse consistencies. Furthermore, we extend the idea of restricted path consistency
to k-restricted path consistency and Max-restricted path consistency. We propose a new
class of local consistencies called singleton consistencies. We also show a property of path
inverse consistency that can be used to have an optimal worst case time complexity in a
path inverse consistency algorithm (Debruyne, 2000).
Arc consistency The most widely used local consistency is arc consistency. It is based
on the notion of support. A value is viable as long as it has at least one compatible value in
the domain of each neighboring variable. An AC algorithm has to remove the values that
have no support on a constraint. As in most of the filtering techniques, the value deletions
have to be propagated through the network since they can lead to the arc inconsistency of
some values that were previously viable.
k-consistency A consistent instantiation of length k-1 is k-consistent (i.e., (k-1, 1)consistent in the formalism of Freuder, 1985) if it can be extended to any additional k th
variable. The time and space complexities of enforcing k-consistency are polynomial with
the exponent dependent on k. If k ≥ 3, the constraints have to be represented in extension
to store the (k-1)-tuples deleted, and the structure of the network can be changed. This
leads to huge space requirements and subsequently important cpu time costs. In practice,
207

Debruyne & Bessière

only 2-consistency, which is arc consistency in binary CNs, can be used. Although path
consistency (PC, namely 3-consistency) cannot be used on large CNs, our experiments will
involve strong path consistency (namely enforcing both arc and path consistency) because
PC has been widely studied.
Restricted path consistency The aim of Berlandier when he proposed restricted path
consistency (RPC, Berlandier, 1995) was to remove more inconsistent values than AC
while avoiding the drawbacks of path consistency. Even the most efficient PC algorithms
have to try to extend all the pairs of values (even those between two variables that are
not neighbors) to any third variable. The basis of RPC is to avoid most of this prohibitive
work. RPC performs only the most pruningful path consistency checks, namely those able
to directly delete a value. In addition to AC, an RPC algorithm checks the path consistency
of the pairs of values ((i, a), (j, b)) such that (j, b) is the only support for (i, a) in Dj . If such
a pair is path inconsistent, its deletion would lead to the arc inconsistency of (i, a). Thus
(i, a) can be removed. These few additional path consistency checks allow detecting more
inconsistent values than AC without having to delete any pair of values, and so leaving
unchanged the structure of the network.
k-restricted path consistency We can extend the idea of RPC to a more pruningful
local consistency. If RPC holds, the values that have only one support on a constraint are
such that this support is path consistent. Checking the path consistency of more supports
can remove even more values without falling into the traps of PC. k-restricted path consistency (k-RPC, Debruyne & Bessière, 1997a) looks for a path consistent support on a
constraint for the values that have at most k supports on this constraint. RPC is 1-RPC
and AC corresponds to 0-RPC. If k-RPC holds, to achieve (k+1)-RPC we only have to
check the values that have exactly (k+1) supports on a constraint and to propagate their
possible deletion. So, it is possible to achieve AC, RPC, 2-RPC and so on, each time reusing
previous filtering effort. This adaptive enforcement can be stopped as soon as each value
has at least one path consistent support on each constraint, the constraint network being
d-RPC where d is the size of the largest domain. Indeed, if after achieving k-RPC all the
values have at most k supports on each constraint, k 0 -RPC holds for all k 0 > k.
Max-restricted path consistency A constraint network is Max-restricted path consistent (Max-RPC, Debruyne & Bessière, 1997a) if all the values have at least one path
consistent support on each constraint, whatever is the number of supports. From the pruning efficiency point of view, Max-RPC is an upper bound for k-RPC. Achieving Max-RPC
involves deleting all the k-restricted path inconsistent values for all k. However, achieving
Max-RPC can be less expensive than enforcing a high level of k-RPC. As opposed to MaxRPC, to achieve k-RPC we have to look for the values that have at most k supports on a
constraint to know the values for which a path consistent support has to be found. This
can be expensive if k is great, the algorithm having to look for k+1 supports for each value
on each constraint. Unconditionally looking for a path consistent support avoids this costly
extra work.
k inverse consistency The aim of Freuder and Elfe when they proposed inverse consistency (Freuder & Elfe, 1996) was to achieve high order local consistencies with a good space
complexity. A k-consistency algorithm removes the instantiation of length k-1 that cannot
208

Domain Filtering Consistencies

be extended to any k th variable. It requires O(nk−1 dk−1 ) space to keep track of the deleted
instantiations. Space requirements are no longer a problem with k inverse consistency ((1,
k-1)-consistency), which removes the values that cannot be extended to a consistent instantiation including any k-1 additional variables. Its linear space complexity would allow using
it on large CNs. However, its worst case time complexity is polynomial with the exponent
dependent on k, which restricts its use to small values of k.
Path inverse consistency The first level of k inverse consistency removing more values
than AC is path inverse consistency (PIC, k = 3). By definition, (i, a) is path inverse
consistent if it can be extended to all the 3-tuples of variables containing i. However, as
said in (Freuder & Elfe, 1996), not all the 3-tuples need to be checked to enforce PIC. Only
one of the tuples (i, j, k) and (i, k, j) has to be checked. Moreover, if i is linked to neither j
nor k, (i, a) can be deleted because of (i, j, k) only if all the values of j or k are path inverse
inconsistent. In such a case, checking (i, j, k) is useless since PIC detects the inconsistency
of the network when processing j or k.
Neighborhood inverse consistency Since k inverse consistency is polynomial with the
exponent dependent on k, checking the k inverse consistency of all the values is prohibitive if
k is great. However, if the variables are not uniformly constrained, it would be worthwhile to
adapt the level of k inverse consistency to the number of constraints involving them, focusing
filtering effort on the most constrained variables (as it is done for adaptive consistency
Dechter & Pearl, 1988). This is the basis of neighborhood inverse consistency (NIC, Freuder
& Elfe, 1996), which removes the values that cannot be extended to a consistent instantiation
including all the neighboring variables. We have to point out that the behavior of NIC
is dependent on the structure of the constraint graph. If two variables i and j are not
neighbors, we can add a universal constraint allowing all the pairs of values (a, b) ∈ Di × Dj
between i and j. The resulting CN is equivalent to the initial one since it has the same set of
solutions. However, as opposed to the other filterings studied in this paper, NIC is affected
by this change since it can remove more values. Obviously, this process increases time
complexity. On complete constraint networks, NIC tries to extend all the values to a whole
solution, namely deleting all the globally inconsistent values (named variable completability
in Freuder, 1991). This is a far more difficult task than looking for one solution. To be cost
effective, NIC has to be used only on sparse CNs, where the degree of the variables is small.
Singleton consistencies If a value (i, a) is consistent, the constraint network obtained
by restricting Di to the singleton {a} is consistent. Singleton consistencies are a class of
filtering techniques based on this remark. To detect the inconsistency of a value (i, a), a
singleton consistency filtering technique checks whether a given local consistency can detect
the possible inconsistency of P |Di ={a} . For example, singleton arc consistency (SAC, Debruyne & Bessière, 1997b) deletes the values (i, a) such that P |Di ={a} has no arc consistent
sub-domain.1 SAC has been inspired by the strong path consistency algorithm proposed
by McGregor(McGregor, 1979). A SAC algorithm is obtained by omitting the deletions

1. Any AC algorithm can be used to know whether enforcing AC on P |Di ={a} leads to a domain wipe out,
but a lazy approach (such as LAC7 Schiex, Régin, Gaspin, & Verfaillie, 1996) is sufficient.

209

Debruyne & Bessière

•

A binary CN is (i, j)-consistent iff ∀i ∈ X , Di 6= ∅ and any consistent instantiation of i variables can be extended to a consistent instantiation including
any j additional variables.

•

A value a
b ∈ Dj s.t.
consistent.
non empty

•

A pair of values ((i, a), (j, b)) is path consistent iff ∀k ∈ X , there exists c ∈ Dk
s.t. Cik (a, c) and Cjk (b, c), otherwise it is path inconsistent. A CN is path
consistent ((2, 1)-consistent) iff no path inconsistent pair of values is allowed.

•

A binary CN is strongly path consistent iff it is node consistent, arc consistent
and path consistent.

•

A binary CN is path inverse consistent iff it is (1, 2)-consistent i.e.,
∀(i, a)∈D ∀j, k∈X s.t. j 6= i 6= k 6= j, ∃(j, b)∈D and ∃(k, c)∈D s.t.
Cij (a, b) ∧ Cik (a, c) ∧ Cjk (b, c)

•

A binary CN is neighborhood inverse consistent iff ∀(i, a)∈D, (i, a) can be
extended to a consistent instantiation including the neighborhood of i.

•

A binary CN is restricted path consistent iff
∀i ∈ X , Di is a non empty arc consistent domain and,
∀(i, a) ∈ D, for all j ∈ X s.t. (i, a) has an unique support b in Dj ,
for all k ∈ X linked to both i and j, ∃c ∈ Dk s.t. Cik (a, c) ∧Cjk (b, c).

•

A binary CN is k-restricted path consistent iff
∀i ∈ X , Di is a non empty arc consistent domain and,
∀(i, a) ∈ D, for all Cij ∈ C s.t. (i, a) has at most k supports in Dj ,
∃b ∈ Dj s.t. Cij (a, b) and
∀k ∈ X linked to both i and j, ∃c ∈ Dk s.t. Cik (a, c) ∧Cjk (b, c).

•

A binary CN is max-restricted path consistent iff
∀i ∈ X , Di is a non empty arc consistent domain and,
∀(i, a) ∈ D, for all Cij ∈ C,
∃b ∈ Dj s.t. Cij (a, b) and
∀k ∈ X linked to both i and j, ∃c ∈ Dk s.t. Cik (a, c) ∧Cjk (b, c).

•

A binary CN P is singleton arc consistent iff ∀i ∈ X , Di 6= ∅ and ∀(i, a) ∈ D,
P |Di ={a} has an arc consistent sub-domain.

•

A binary CN P is singleton restricted path consistent iff ∀i ∈ X , Di 6= ∅ and
∀(i, a) ∈ D, P |Di ={a} has a restricted path consistent sub-domain.

∈ Di is arc consistent iff, ∀j ∈ X s.t. Cij ∈ C, there exists
Cij (a, b). A domain Di is arc consistent iff, ∀a ∈ Di , (i, a) is arc
A CN is arc consistent ((1, 1)-consistent) iff ∀Di ∈ D, Di is a
arc consistent domain.

Figure 1: The mentioned local consistencies.
210

Domain Filtering Consistencies

Name of
the algorithm
AC7 (Bessière, Freuder, & Régin, 1999)
RPC2 (Debruyne & Bessière, 1997a)
Max RPC1 (Debruyne & Bessière, 1997a)
PC5 (Singh, 1995)
PC8 (Chmeiss & Jégou, 1996)
PIC1 (Freuder & Elfe, 1996)
PIC2 (Debruyne, 2000)
NIC1 (Freuder & Elfe, 1996)
SAC1 (Debruyne & Bessière, 1997b)
SRPC1 (Debruyne & Bessière, 1997b)
(∗)

Worst case
time complexity
O(ed2 )(∗)
O(en + ed2 + cd2 )(∗)
O(en + ed2 + cd3 )(∗)
O(n3 d3 )(∗)
O(n3 d4 )
O(en2 d4 )
O(en + ed2 + cd3 )(∗)
O(g 2 (n + ed)dg+1 )
O(en2 d4 )
O(en + n2 (e + c)d4 )

Worst case
space complexity
O(ed)
O(ed + cd)
O(ed + cd)
O(n3 d2 )
O(n2 d)2
O(n)
O(ed + cd)
O(n)
O(ed)
O(ed + cd)

optimal worst case time complexity.
Table 1: The most efficient algorithms achieving the mentioned local consistencies.3

of pairs of values in that algorithm. Many other singleton consistencies can be considered
since any local consistency can be used to detect the possible inconsistency of the CNs
P |Di ={a} with (i, a) ∈ D. If a local consistency can be enforced in a polynomial time, the
corresponding singleton consistency also has a polynomial worst case time complexity.
The formal definitions of the local consistencies studied in this paper are presented in
Figure 1. Table 1 recalls the time and space complexities of the most efficient algorithms
enforcing them. The worst case time complexity of SAC1, SRPC1, and NIC1 have not been
proved to be optimal.

4. Relations between PIC, RPC and Max-RPC
To highlight the relations between PIC, RPC and Max-RPC, let us show a property of path
inverse consistency. As shown in (Debruyne, 2000), if we assume that the constraint network
is arc consistent, enforcing PIC requires checking even less 3-tuples than those mentioned in
(Freuder & Elfe, 1996). If (i, a) is arc consistent, it can be extended to any 3-tuple (i, j, k)
such that there is no constraint between j and k. Indeed, (i, a) has a support (j, b) on Cij
and a support (k, c) on Cik , and since j is not linked to k, ((i, a), (j, b), (k, c)) is consistent.
Furthermore, (i, a) can be extended to (i, j, k) if there is no constraint between i and k
(resp. between i and j). Indeed, (i, a) has a support b in Dj (resp. c in Dk ) and this value
being arc consistent too, it has a support c in Dk (resp. b in Dj ). So, ((i, a), (j, b), (k, c))
is consistent. Consequently, if the constraint network is arc consistent, the only 3-tuples
that have to be checked to achieve PIC correspond to the 3-cliques of the constraint graph.

2. However a O(n2 d2 ) data structure is required for the constraint representation.
3. See Section 2 for a definition of n, d, e, c, and g.

211

Debruyne & Bessière

0 support

1 support
a

k

b
a

i
(A)

j

a

b

i

a

a

b

b

AC, RPC, PIC, and
Max-RPC delete (i,a)

(B) RPC, PIC, and Max-RPC
delete (i,a) because its unique support
is not path consistent

2 supports

2 supports
a

b
c
a
b

k

b

a

i

j

k

i

b
c

b

a
b
c

a

a
a

j

j

l

b

(C) (i, a) is RPC-consistent w.r.t. C ij
b u t PIC and Max-RPC
delete this value

(D) (i, a) is RPC-co nsistent w.r.t. C ij
and PIC-consistent w.r.t. C ij but
Max -RPC d eletes th is v alu e

A forbidden pair of values.

Figure 2: Examples showing the relations between PIC, RPC and Max-RPC.
Furthermore, the definition of PIC shows that any constraint network involving less than
three variables is path inverse consistent, even though it is not arc consistent.

Property 1 A CN is path inverse consistent iff
• it involves less than three variables, or
• it is arc consistent and for each value (i, a) in D, for any 3-clique {i, j, k},
(i, a) can be extended to a consistent instantiation of {i, j, k}.
This property allows us to see the relations between PIC, RPC and Max-RPC. If a
value (i, a) has no support on a constraint Cij , the three local consistencies delete this
arc inconsistent value (see Figure 2A). If (i, a) has only one support b in Dj , PIC, RPC,
and Max-RPC delete (i, a) because of Cij if ((i, a), (j, b)) is path inconsistent (see Figure
2B). The difference between these three local consistencies appears if (i, a) has at least two
supports on Cij . In such a case, (i, a) is restricted path consistent w.r.t. Cij but PIC can
delete it if there is a 3-clique {i, j, k} such that all the supports of (i, a) in Dj are path
inconsistent because of k (see Figure 2C). So, PIC is more pruningful than RPC. But it
212

Domain Filtering Consistencies

often deletes only few additional values because the supports of a value are seldom all path
inconsistent because of the same third variable. Max-RPC is far more pruningful since it
deletes (i, a) because of Cij if all its supports in Dj are path inconsistent, even if they are
not path inconsistent because of the same third variable (see Figure 2D).

5. Pruning Efficiency
5.1 Qualitative Study
To compare the pruning efficiency of the local consistencies presented above, we use the
transitive relation “stronger” introduced in (Debruyne & Bessière, 1997b). A local consistency LC is stronger than another local consistency LC 0 if in any CN in which LC holds,
LC 0 holds too. Consequently, if LC is stronger than LC 0 , any algorithm achieving LC
deletes at least all the values removed by an algorithm achieving LC 0 . For instance, since
by definition of restricted path consistency RPC is stronger than AC, an RPC algorithm
removes at least all the arc inconsistent values. A local consistency LC is strictly stronger
than another local consistency LC 0 if LC is stronger than LC 0 and there is at least one CN
in which LC 0 holds and LC does not.
Theorem 1 Restricted path consistency is strictly stronger than AC.
Proof By definition of restricted path consistency, RPC is stronger than arc consistency.
Figure 3a shows that there exists a constraint network on which AC holds and RPC does
not. Therefore, RPC is strictly stronger than AC. 2
Theorem 2 If k > k 0 ≥0, k-RPC is strictly stronger than k 0 -RPC.
Proof The proof that k-RPC is stronger than k 0 -RPC if k > k 0 ≥0 is trivial. Figure 3g
shows that there exists a constraint network on which k 0 -RPC holds and k-RPC (k > k 0 ≥0)
does not. Therefore, k-RPC is strictly stronger than k 0 -RPC if k > k 0 ≥0. 2
Theorem 3 Max-RPC is strictly stronger than k-RPC, ∀k ≥0.
Proof The proof that Max-RPC is stronger than k-RPC ∀k ≥0 is trivial. Figure 3g shows
that for any k ≥0 there exists a constraint network on which k-RPC holds and Max-RPC
does not. Therefore, Max-RPC is strictly stronger than k-RPC ∀k ≥0. 2
Theorem 4 If |X | ≥3, path inverse consistency is strictly stronger than restricted path
consistency.
Proof From property 1, PIC is stronger than AC if |X | ≥3. Now, consider a value (i, a)
having only one support (j, b) on Cij . If PIC holds, for any third variable k, (i, a) can be
extended to a consistent instantiation I including {i, j, k} and since b is the only support of
(i, a) in Dj , Ij = b. So ((i, a), (j, b)) is path consistent and (i, a) is restricted path consistent
w.r.t. Cij . Furthermore, Figure 3b shows that there exists a constraint network on which
213

Debruyne & Bessière

RPC holds and PIC does not. Therefore, path inverse consistency is strictly stronger than
restricted path consistency if |X | ≥3. 2
Theorem 5 If |X | ≥3, max-restricted path consistency is strictly stronger than path inverse
consistency.
Proof Suppose there is a max-restricted path consistent CN P with a value (i, a) which
is not path inverse consistent. Since the CN is max-restricted path consistent, it is also
arc consistent by definition of max-restricted path consistency. Thus, because of property
1 we know there exist two variables j and k such that {i, j, k} is a clique in the constraint
graph and (i, a) cannot be extended to a consistent instantiation on {i, j, k}. As a result,
none of the supports of (i, a) on Cij is path consistent, which contradicts the assumption
that the CN P is max-restricted path consistent. Furthermore, Figure 3i shows that there
exists a constraint network on which path inverse consistency hold and max-restricted path
consistency does not. Therefore, if |X | ≥3, max-RPC is strictly stronger 2
Theorem 6 Singleton arc consistency is strictly stronger than Max-RPC.
Proof Suppose that there exists a CN P with a singleton arc consistent value (i, a) that
is not max-restricted path consistent. Let j ∈ X be a variable such that (i, a) has no
path consistent support in Dj . For each support b of (i, a) in Dj , there exists a variable k
such that 6 ∃c ∈ Dk such that Cik (a, c) ∧ Cjk (b, c). Therefore, all the values of Dj are arc
inconsistent w.r.t. P |Di ={a} and (i, a) is not singleton arc consistent. So, SAC is stronger
than Max-RPC. Figure 3e shows that there exists a constraint network on which Max-RPC
holds and SAC does not. Therefore, SAC is strictly stronger than Max-RPC. 2
Theorem 7 Neighborhood inverse consistency is strictly stronger than max-restricted path
consistency.
Proof Let (i, a) be any value of a neighborhood inverse consistent CN P . There exists a
consistent instantiation I including i and its neighborhood s.t. Ii = a. For any Cij ∈ C, Ij
is a path consistent support of (i, a). Indeed, let k be any third variable. If k is linked to i,
((i, a), (j, Ij ), (k, Ik )) is a consistent instantiation since P is neighborhood inverse consistent.
Otherwise, there are two cases: First, if k is not linked to j, ((i, a), (j, Ij ), (k, c)) is consistent
∀c ∈ Dk ; Second, if ∃Cjk ∈ C, there exists a consistent instantiation I 0 of j and its neighborhood s.t. Ij0 = Ij and ((i, a), (j, Ij0 ), (k, Ik0 )) is consistent. So, (i, a) is max-restricted path
consistent. Furthermore, Figure 3d shows that there exists a constraint network on which
Max-RPC holds and NIC does not. Therefore, NIC is strictly stronger than Max-RPC. 2

Theorem 8 Strong path consistency is strictly stronger than singleton arc consistency.
Proof Consider a problem that is strong path consistent. Any pair of values can be extended to any third variable. Furthermore, since the problem is strong path consistent, it
is also arc consistent and a sub-problem obtained by restricting a domain Di to a singleton
214

Domain Filtering Consistencies

{(i, a)} can be made arc consistent. The initial problem is therefore singleton arc consistent.
Figure 3c shows that there exists a constraint network on which SAC holds and strong PC
does not. Therefore, strong PC is strictly stronger than SAC. 2
Theorem 9 Singleton restricted path consistency is strictly stronger than singleton arc
consistency.
Proof Singleton restricted path consistency is stronger than singleton arc consistency since
RPC is stronger than AC. Figure 3d shows that there exists a constraint network on which
SAC holds and SRPC does not. Therefore, SRPC is strictly stronger than SAC. 2
The stronger relation does not induce a total ordering. Some local consistencies are
incomparable.
Theorem 10
1. If |X | ≥3, path inverse consistency and k-restricted path consistency are incomparable.
2. Neighborhood inverse consistency and singleton arc consistency are incomparable.
3. Neighborhood inverse consistency and strong path consistency are incomparable.
4. Neighborhood inverse consistency and singleton restricted path consistency are incomparable.
Proof
1. cf. Figure 3h and Figure 3j.
2. cf. Figure 3d and Figure 3e.
3. cf. Figure 3d and Figure 3e.
4. cf. Figure 3e and Figure 3f.
Figure 4 summarizes the relations between the local consistencies. There is an arrow
from LC to LC 0 iff LC is strictly stronger than LC 0 . A crossed line between two local
consistencies means that they are not comparable w.r.t. the “stronger” relation. When
LC is not stronger than LC 0 (LC 0 is strictly stronger than LC, or LC and LC 0 are not
comparable), a CN in which LC holds and LC 0 does not can be found in Figure 3. Obviously,
the stronger relation is transitive. In Figure 4 we omit the transitivity arcs.

215

Debruyne & Bessière

(a)

(d)

AC

(b)

RPC

SAC
Strong PC
SAC

NIC Strong PC
Max-RPC
NIC
SRPC

(c)

PIC
2-RPC

RPC
RP C

SRPC
NIC

(e)

SAC

SAC NIC
SAC NIC

NIC
Max-RPC

Strong PC

Strong PC
SRPC

k+ 1

k+ 1

k+ 1

k+ 1

(f)

SRPC

NIC

(h)

2-R PC

PIC

...

in A

B

(g)

(i)

PIC
PIC

2-RP C
Max-RPC

The domain of a variable.
A forbidden pair of values.
A is not stronger than B (B deletes the value

k+1

k-RPC
k-RPC

(j)

Max-RPC
k'-RPC if k'>k>0

S RP C

Strong PC

on this A consistent network)

Figure 3: Some CNs proving the “not stronger” relations between some of the mentioned
local consistencies.

216

Domain Filtering Consistencies

SRPC
Strong PC

NIC
SAC
Max-RPC
k-RPC
(k>1)

RPC

PIC
AC

A
A

B : A is strictly stronger than B.
B : A and B are incomparable w.r.t. the stronger relation.
Figure 4: Relations between the mentioned local consistencies.

5.2 Experimental Evaluation
Figure 4 does not give any quantitative information. A local consistency LC can remove
more values than another local consistency LC 0 on most of the CNs even though it is
incomparable with LC because of some particular CNs. When they are comparable, it does
not show if a local consistency is far more pruningful than another or if it performs only
few additional value deletions. To have some quantitative information about the pruning
efficiency of these local consistencies, we performed an experimental evaluation. The aim of
this evaluation is to show how pruningful a local consistency is on random CNs, with a fixed
number of variables and values, when the number of constraints and the constraint tightness
217

Debruyne & Bessière

.01
.01

.1

.2

.3

.4

.5

.6

.7

.8

.9

1

Tightness

.1
.2
.3
D
.4 e
n
.5 s
i
.6 t
y

AC

.7

Max-RPC

RPC
PIC
2-RPC

SAC
Strong PC

.8

SRPC
NIC
Variable
completability

.9

1
Figure 5: The T0 bounds for random CNs having 40 variables and 15 values in each domain.

are changing. We used the random uniform CN generator of (Frost, Bessière, Dechter, &
Régin, 1996) which produces instances according to the Model B (Prosser, 1996). It involves
four parameters: n the number of variables, d the common size of the initial domains, p1
the proportion of constraints in the network (the density p1=1 corresponds to the complete
graph) and p2 the proportion of forbidden pairs of values in a constraint (the tightness).
The generated problems have 40 variables and 15 values in each domain. For each local
consistency and each density p1, two particular values of the tightness have been determined.
On the one hand, T0 (p1) is the tightness such that the local consistency does not delete any
value on 50% of the CNs generated with p1 for density. For values of tightness lower than
T0 (p1), the local consistency seldom deletes many values. On the other hand, Tall (p1) is the
tightness such that the local consistency finds the inconsistency of 50% of the CNs generated
with density p1. On constraint networks with tighter constraints, the local consistency
often removes all the values. For all the mentioned local consistencies, the values T0 (p1)
218

Domain Filtering Consistencies

.01
.01

.1

.2

.3

.4

.5

.6

.7

.8

.9

1

Tightness

.1
.2
.3
.4
.5
.6

D
e
n
s
i
t
y

AC
RPC
PIC
2-RPC
Max-RPC

.7

SAC
Strong PC

.8

SRPC
NIC
Variable
completability

.9
1

Figure 6: The Tall bounds for random CNs having 40 variables and 15 values in each domain.

and Tall (p1) for any density p1 are given in Figure 5 and Figure 6 respectively. We also
show these bounds for the variable completability filtering which removes all the globally
inconsistent values, and thus is the strongest filtering we can have when we limit filtering to
the domains. To determine the T0 and Tall bounds, 300 CNs have been generated for each
(density, tightness) pair. This explains why the generated problems are relatively small.
As already proved theoretically, PIC is stronger than RPC. Their pruning efficiencies
are closed. RPC deletes most of the path inverse inconsistent values and is halfway between
AC and Max-RPC in terms of pruning efficiency. k-RPC with k > 1 is incomparable
with PIC with regard to the stronger relation. However, Figure 5 and Figure 6 show that
2-RPC is more pruningful than PIC. SAC and strong PC have almost the same pruning
efficiency. Their T0 limits merge and their Tall limits show a slight difference. This confirms
the similitude between SAC and strong PC pointed out in Section 3. Although SRPC and
strong PC are not comparable w.r.t. the stronger relation, SRPC removes is more pruningful
than strong PC. As predicted in (van Beek, 1994), these polynomial filterings have more
219

Debruyne & Bessière

.0 1

.1

.2

.3

.4

.5

.6

.7

.8

.9

1

Tightness

AC
RPC
PIC
2-RPC
Ma x - RP C
SAC
Str ong PC

SR PC
NIC
Varia ble
c ompletability

Figure 7: The T0 (black points) and Tall (white points) bounds for random CNs having 40
variables, 15 values in each domain, and density 1.

difficulties to delete inconsistent values on dense problems with loose constraints. On sparse
CNs, the polynomial local consistencies studied are close to variable completability, whereas
on very dense CNs, Figure 5 and Figure 6 show a large range of tightnesses between them and
variable completability. NIC behaves very differently since on complete constraint networks
it corresponds to variable completability. So, on dense CNs, NIC is far more pruningful
than the other local consistencies. On CNs generated with a density lower than .28 NIC
is less pruningful than SRPC, strong PC and SAC. The more important the propagation
through the network is, the closer T0 and Tall are. If a filtering (such as AC) uses a very
local property to delete inconsistent values, there is a large set of CNs on which it removes
some but not all the values. More pruningful local consistencies consider a more important
part of the network to know whether a value is consistent or not. So, they seldom delete
few values. On most of the CNs, they do not delete any value, or detect inconsistency: the
propagation of the first value deletions often leads to a domain wipe out.

6. Time Efficiency
6.1 Radio Link Frequency Assignment Problems
An experimental evaluation has been done on the radio link frequency assignment problems
described in (Cabon, de Givry, Lobjois, Schiex, & Warners, 1999), namely the instances
of the CELAR4 named Scen01 to Scen11, and the GRAPH instances generated using the
GRAPH generator at Delft University named Graph01 to Graph14. In these problems we
have to assign frequencies to a set of radio links defined between pairs of sites in order to
avoid interferences5 . These problems have from 200 to 916 variables and there are 40 values
in average in each domain. The constraints are binary and have a cost of violation specified
4. We thanks the Centre d’Electronique de l’Armement (France).
5. See http://www-bia.inra.fr/T/schiex/Doc/CELARE.html for a more detailed presentation of these
problems.

220

Domain Filtering Consistencies

Scen02
Scen03
Scen11

AC7
0.27
0.58
0.89

RPC2
0.7
1.55
2.53

PIC2
4.38
9.13
13.79

Max-RPC1
6.33
14.21
25.84

SAC1
45.5
99.49
144.3

SRPC1
434.93
946.31
1362.18

NIC1
10.45
26.58
time out

Table 2: Cpu time performances on some RLFAP instances on which all the local consistencies studied hold.

by a level from 0 to 4. The level 0 corresponds to hard constraints, and levels from 1 to 4
have a decreasing cost of violation. For each problem ScenXX (resp. GraphXX), we call
ScenXX.3, ScenXX.2, ScenXX.1 and ScenXX.0 (resp. GraphXX.3, GraphXX.2, GraphXX.1
and GraphXX.0) the problems of satisfaction obtained by considering the problem ScenXX
(resp. GraphXX) with only the constraints of level 0 to 3, 0 to 2, 0 to 1, and 0 respectively.
In this experimental evaluation, we consider both the cpu time performances and the
percentage of values deleted by the local consistencies studied. The algorithms used are AC7
(Bessière, Freuder, & Régin, 1995), RPC2 (Debruyne & Bessière, 1997a), PIC2 (Debruyne,
2000), Max-RPC1 (Debruyne & Bessière, 1997a), the singleton arc consistency algorithm
of (Debruyne & Bessière, 1997b) (SAC1) based on AC6, a SRPC algorithm based on RPC2
(SRPC1), and the NIC algorithm proposed in (Freuder & Elfe, 1996) (NIC1) using FCCBJ (Prosser, 1993) (as in Freuder & Elfe, 1996) with dom+deg dynamic variable ordering
heuristic (minimal domain first, in which ties are broken by choosing the variable with the
highest degree in the constraint graph Frost & Dechter, 1995; Bessière & Régin, 1996). All
these algorithms have been modified to stop as soon as a domain wipe out occurs. We do
not show results on strong PC in this section because on these large problems it requires
often more than our 2 hours time out limit. These algorithms have been tested on each
ScenXX, Scen XX.X, GraphXX, and GraphXX.X problem using a Sun UltraSparc IIi 440
Mhz. For sake of clarity, we only show the results on some representative problems.
6.1.1 Results on problems on which all the studied local consistencies hold
(cf. Table 2)
If all the local consistencies studied hold on a constraint network, all the corresponding
filtering algorithms are useless. They waste time to check whether the local consistencies
hold without deleting any inconsistent value. On these problems, the stronger the local
consistency is, the more important is the time wasted.
We can see the consequence of the exponential worst case time complexity of NIC1. On
most of these problems, NIC1 requires a reasonable cpu time. But as we can see on the
problem Scen11, a combinatorial explosion can lead to really prohibitive cpu time for NIC1.
6.1.2 Results on arc inconsistent problems (cf. Table 3)
When arc consistency is sufficient to detect the inconsistency of the problem, stronger local
consistencies are not always more costly. On Figure 3 we can see that Max-RPC1 has
often the best cpu time performances and on Graph06 for example, AC7 is one of the
221

Debruyne & Bessière

Scen07
Graph07
Scen08
Graph06

AC7
0.42
0.11
0.75
0.48

RPC2
0.43
0.14
0.48
0.27

PIC2
0.44
0.12
0.73
0.44

Max-RPC1
0.09
0.16
0.4
0.26

SAC1
0.59
0.24
0.52
0.27

SRPC1
0.47
0.14
0.47
0.27

NIC1
1.89
1.08
time out
10.13

Table 3: Cpu time performances on some arc inconsistent RLFAP instances.

Scen06.1
Scen09.1
Graph04
Graph10
Graph06.1
Graph12.1

cpu time
% of DV
cpu time
% of DV
cpu time
% of DV
cpu time
% of DV
cpu time
% of DV
cpu time
% of DV

AC7
0.27
7.88
0.8
22.48
0.81
4.97
1.43
1.43
0.39
14.96
0.73
10.42

RPC2
0.48
8.33
1.52
25.79
2.07
6.67
3.32
1.62
0.81
17.69
1.35
12.23

PIC2
0.96
17.85
1.87
29.79
18.65
6.95
37.7
1.68
0.9
100
2.83
15.28

MaxRPC1
2.04
19.7
5.88
31.03
25.39
10.35
51.42
5.42
0.8
100
5.41
100

SAC1
66.32
42.47
167.85
35.86
2238.13
18.44
3984.13
9.53
6.69
100
9.47
100

SRPC1
227.13
42.57
568.08
35.86
time out
?
time out
?
3.21
100
32.12
100

NIC1
time out
?
318.38
31.57
101.77
13.14
2033.39
7.35
8.54
100
3.97
100

Table 4: Cpu time performances and percentages of values deleted by the local consistencies
studied (% of DV) on some RLFAP instances.

most expensive local consistencies. When enforcing AC requires propagation to find the
arc inconsistency of the problem, a stronger local consistency can wipe out a domain more
quickly than AC7.
On these constraint networks, all the algorithms used have very low cpu time requirements, except NIC1, which can be very expensive on some instances, such as Scen08.
6.1.3 Results on the other problems (cf. Table 4)
On many of the RLFAP problems the local consistencies do not delete the same sets of
inconsistent values. We can see an important difference between the pruning efficiencies
especially on the problems ScenXX.1 and GraphXX.1.
Obviously, on most of these problems, the more pruningful the local consistency is, the
more important is the time required. We can see this on the problems Scen06.1 and Scen09.1
for example. However, AC7, RPC2, PIC2, and Max-RPC1 have cpu time performances in
the same order of magnitude while SAC1, SRPC1, and NIC1 are often far more expensive.
222

Domain Filtering Consistencies

This is especially obvious on Graph04 and Graph10. However, it is difficult to say which
is the most interesting local consistency on these problems since even if SAC1, and SRPC1
are costly, we can see on Scen06.1 and Graph04 that they can be far more pruningful.
These problems highlight that NIC1 is not very stable. It sometimes shows good performances, but an exponential explosion can lead to a prohibitive cost on some instances.
When NIC1 requires a reasonable time, its pruning efficiency is closer to the one of MaxRPC1 than to the one of SAC1. These results confirm that if the neighborhoods of the
variables are not small, NIC1 can be really prohibitive.
On Graph06.1, PIC2 (and obviously the algorithms enforcing a stronger local consistency) finds the inconsistency of the problem whereas AC7, and RPC2 remove only a part
of the inconsistent values. We can see a similar behavior on Graph12.1 where Max-RPC1
wipes out a domain whereas AC7, RPC2 and PIC2 do not find the inconsistency of the
problem. On these instances, Max-RPC1 is the best choice.
6.2 Randomly Generated Problems
The random uniform CN generator of section 5.2 is used to compare the cpu time required
to enforce the local consistencies. We have to point out that NIC has not been designed
to be used on uniform CNs but to adapt filtering effort to the degree of the variables in
the constraint graph. So, NIC would have better performances on non-uniform CNs than
those presented in this section. The generated problems have 200 variables and 30 values
in each initial domain. Figure 8 shows the results on CNs with density of .02. These CNs
are relatively sparse since the variables have four neighbors on average. Figure 9 presents
performances at density .15 (the variables have 30 neighbors on average). Because of the
set of parameters, there are no flawed variables (MacIntyre, Prosser, Smith, & Walsh,
1998) in the generated problems.6 In addition to the algorithms of the previous section, we
use a strong path consistency algorithm based on PC8 (Chmeiss & Jégou, 1996) and AC6.
This algorithm stops as soon as a domain wipe out occurs or as soon as a constraint no
longer allows any pair of values. In addition to the percentage of deleted values and cpu
time performances, Figure 8 and Figure 9 show the cpu time to number of deleted values
ratio for each tightness where the local consistency removes at least one value on average.
For each tightness, 50 instances were generated. Figure 8 and Figure 9 show mean values
obtained on a Pentium II-266 Mhz with 32 Mb of memory under Linux.
As observed in (Gent, MacIntyre, Prosser, Shaw, & Walsh, 1997) for arc consistency,
the filtering algorithms tested have a complexity peak. For low values of the tightness, they
easily prove that the values are locally consistent, and when constraints are very tight, they
quickly wipe out a domain. Each local consistency has a phase transition where most of
the hardest problems for an algorithm achieving this local consistency tend to occur.
6.3 Experiments on Sparse CNs
Even on sparse CNs (see Figure 8), the cpu time results are so different between the algorithms (7h 48min for strong PC at its peak when AC7 requires at most .22 seconds on
average) that a logarithmic scale has to be used. Strong PC is really prohibitive, even for
6. In Section 5.2,the tightness reaching 1, there was obviously flawed variables for some sets of parameters.

223

Debruyne & Bessière

low values of tightness. SRPC and SAC have bad cpu time to number of deleted values
ratios, except SAC on CNs having very tight constraints because the SAC algorithm used
is based on AC6 which can be more efficient than AC7 on such problems. On these sparse
CNs, NIC has often better cpu time performances than SAC but it does not remove more
values than Max-RPC. Consequently, NIC has a bad cpu time to number of deleted values
ratio. Unlike strong PC, SRPC, SAC, and NIC, the cpu time requirements of AC7, PIC2,
RPC2 and Max-RPC are of the same order of magnitude. The cpu time to number of
deleted values ratios of these four last filterings are also very close, with a little advantage
for PIC2. Although PIC is stronger than RPC, PIC2 can be less expensive than RPC2 on
sparse CNs. If there are few 3-cliques in the constraint graph, PIC2 does not require far
more cpu time than AC7 whereas RPC2 is about two times as expensive as AC7 since it
looks for two supports for each value on each constraint.
6.4 Experiments on more Dense CNs
On more dense CNs (see Figure 9), the complexity peaks of AC7, RPC2, PIC2, and MaxRPC stay close to each other. PIC2 is less worthwhile since it deletes few additional values
compared to RPC2 while its cpu time requirements are close to those of Max-RPC. MaxRPC has one of the best cpu time to number of deleted values ratios. As soon as RPC
leads to a domain wipe out, the cpu time performances of SRPC and RPC2 merge. Indeed,
the SRPC algorithm used enforces RPC2 before checking the restricted path consistency of
the sub-problems P |Di ={a} for each (i, a) ∈ D. If all the values of a domain are restricted
path inconsistent, the RPC preprocessing finds the global inconsistency of the problem and
the SRPC algorithm stops. SRPC is less expensive than strong PC although it is more
pruningful. These two filterings remain the most expensive. NIC is the most pruningful
local consistency on these CNs. Hence, on a large range of tightnesses, NIC has the best
cpu time to number of deleted values ratio. However, on some instances, NIC cannot avoid
the combinatorial explosion. Although NIC requires “only” fifteen minutes on average
at tightness .52, more than two hours are required on some instances. It is conceivable
that instances on which NIC requires far more cpu time exist for this set of parameters.
Obviously, the set of CNs on which NIC is prohibitive grows when the density increases.
The results on SAC have a lower standard deviation. SAC never requires more than fifty
two minutes on the problems generated for these experiments.
6.5 Discussion
What can we conclude from these results? Strong PC is by far the least interesting filtering
technique. Compared to SAC, which removes most of the strong path inconsistent values,
strong PC is really prohibitive.7 Achieving SAC or SRPC is costly as long as these two
local consistencies do not delete any value. Obviously, although SAC and SRPC are more
expensive than Max-RPC on almost all the generated problems, we cannot say that it is
better to use Max-RPC. Indeed, at density .15 for example, Max-RPC is useless for

7. We can point out that when the path consistency of a constraint can be expressed without explicitly
storing the set of forbidden tuples, path consistency can be used (e.g., temporal networks Allen, 1983,
constraint networks Smith, 1992).

224

Domain Filtering Consistencies

1E+5

n=200, d=30, and p1=.02

cpu time (in sec.)

7h48m in

1E+4

16m in15sec
Stron g PC

1E+3

2min3 6sec

1E+2
SR PC
9.33s ec
1E+1
SA C

NI C

1E+0

Ma x-R PC

PI C2

1 E -1

R PC 2
0.36s ec
0. 37s ec

AC 7

0.22s ec
1 E- 2
0.24s ec

Tig htne ss

1 E -3

1
10 0

5

10

15

20

25

30

35

40

45

50

55

60

65

70

75

80

85

40

45

50

55

60

65

70

75

80

85

50

55

60

65

70

75

80

85

90

95

99

Percentage of values deleted

Tightness
0
1
1E+2

5

10

15

20

25

30

35

90

95

99

cpu time to number of deleted values ratio
1 E -1

1E+1

SRPC

1E+0

Strong PC

1E -2

AC 7
SAC
P IC 2

1E -1
Ma x-RP C
RP C2

NIC

1E -3

1 E -2

1 E -3

1E -4
1 E -4

1 E -5

1E -5

1 E -6

75

80

85

90

95

Tightness

1E -7
1

5

10
AC 7

15

20
25
R PC 2

30
35
PIC 2

40

45

Max-R PC

SA C

SRPC

Strong PC

90

95

99

N IC

Figure 8: Experimental evaluation on random CNs with n=200, d=30, and p1=.02.
225

Debruyne & Bessière

1E+5

cpu time (in sec.)

n=200, d=30, and p1=.15
12h40m in
3h53 m in

1E+4

39m in43 sec

Strong PC
1E+3

15min 21sec

SRPC
1E+2
SA C
NIC
8.63 sec
1E+1
Ma x -RP C
2. 44s ec

6.25s ec
R PC 2

1E+0

P IC 2

1. 11s ec

AC 7
1 E -1

1 E -2

Tightness

1E -3
1
100

10

5

15

20

25

30

35

40

45

50

55

60

65

70

75

80

85

90

95

99

Percentage of values deleted
Tightness

0
1
1E+2

5

10

15

20

25

30

35

40

45

50

55

60

65

70

75

80

60

65

70

75

80

85

90

95

99

95

99

cpu time to number of deleted values ratio

R PC 2

1E+1

1 E -2

SRPC
AC7

SA C
1E+0

1 E -3

1 E- 1

P IC 2

1 E -2

1E -4
Strong PC
N IC

1 E -3

1 E -5

1 E -4

1 E -5

Max-R PC

1E -6

1 E- 6

65

70

75

80

85

Tightness

90

1 E -7

1

5

10
AC7

15

20
R PC 2

25

30

35

PIC 2

40

45

50

Max-R PC

55

SA C

SRPC

85

Strong PC

90

N IC

Figure 9: Experimental evaluation on random CNs with n=200, d=30, and p1=.15.
226

Domain Filtering Consistencies

tightnesses lower than .63 since it does not delete any value, while for SRPC the limit is .57
of tightness. Furthermore, for singleton consistencies we can argue that the algorithm used
to achieve them is not optimal. An algorithm reusing part of the filtering performed on
P |Di ={a} to process other sub-problems P |Dj ={b} , ((i, a) and (j, b) belonging to D) would
improve cpu time performances. However, the cpu time to number of deleted values ratios of
SAC and SRPC algorithms are often among the worst ones, especially on sparse CNs. SAC
and SRPC are so expensive that it is hardly likely that enhancements of these algorithms
could lead them to be the most worthwhile filterings. On sparse uniform CNs, NIC is not
the best choice. Compared to Max-RPC, it does not delete enough values to offset the
additional cpu time cost. Furthermore, NIC cannot be used on dense CNs since its cpu
time requirements become greater than those of a search algorithm. So, NIC has to be used
only on “relatively” dense CNs, as those of Figure 9 on which NIC is worthwhile on average
(although on some instances a combinatorial explosion cannot be avoided). On very dense
CNs, the worst case time complexity of Max-RPC and PIC2 is close to the one of the best
path consistency algorithm (O(en + ed2 + cd3 ) against O(n3 d3 )). However, the experiments
underline that achieving Max-RPC and PIC2 is far less expensive in practice. Compared
to RPC2 and Max-RPC, PIC2 is not a good solution in-between. The cpu time to number
of deleted values ratios of RPC2 and Max-RPC are better than the one of PIC2 (except on
very sparse CNs on which PIC2 can be less expensive than RPC2). Indeed, PIC2 deletes
only few additional values compared to RPC2, while its cpu time performances are close to
those of Max-RPC.
Cpu time performances are even more essential when the aim is to maintain a local consistency during search. Maintaining a local consistency during search requires to repeatedly
propagate the choice of a value for a variable (namely the restriction of a domain to a
singleton) or the refutation of a value. To be worthwhile, a local consistency has to require
less time to detect that a branch of the search tree does not lead to a solution than a search
algorithm to explore this branch. So, maintaining a local consistency during search can
outperform MAC on hard problems only if this local consistency is more pruningful than
AC while requiring only a little additional cpu time. With regard to this criterion, we can
discard strong PC, SAC, SRPC, and NIC on dense CNs because they are too expensive. It
is conceivable that we can find instances on which maintaining these consistencies during
search outperforms MAC, but the more expensive the maintained local consistency is, the
more seldom the problems on which MAC is outperformed will be. On sparse CNs, NIC is
not prohibitive, but it deletes only few additional values compared to Max-RPC and it has
therefore a bad cpu time to number of deleted values ratio. Finally, The most promising
local consistencies are RPC and Max-RPC. If we exclude arc consistency, RPC is the least
expensive local consistency we studied. Furthermore, the RPC algorithms delete most of
the path inverse inconsistent values. Although Max-RPC is far more pruningful than arc
consistency, experiments show that in practice, Max-RPC has very good cpu time results.
Therefore, it seems very likely that maintaining RPC or Max-RPC during search could
outperform MAC on very hard problems.
To confirm these results, an algorithm called Quick that maintains an adaptation of
Max-RPC has been compared to MAC. The results of these experiments (Debruyne, 1999)
show that Quick has better cpu time performances than MAC on large and hard randomly
generated CNs that are relatively sparse. More interestingly, Quick has a more impor227

Debruyne & Bessière

tant stability than MAC (the cpu time performances of Quick have a very low standard
deviation). It would be very interesting to propose efficient algorithms that maintain the
local consistencies studied in this paper and to compare these algorithms. Such a study
would allow us to know whether during search, the more advantageous local consistencies
remain RPC and Max-RPC as during a preprocessing step. First results on the effect of
maintaining SAC during search are given in (Prosser, Stergiou, & Walsh, 2000).

7. Conclusion
In this paper we extended the idea of restricted path consistency to k-RPC and MaxRPC, which are more pruningful local consistencies. We proposed a new class of local
consistencies called singleton consistencies. We studied these new local consistencies and
the other local consistencies that alike can be used on large CNs while removing more values
than arc consistency. We showed some relations between them and we compared both
theoretically and experimentally their pruning and time efficiencies. The most pruningful
are neighborhood inverse consistency and singleton restricted path consistency. However,
SRPC is expensive in time and the exponential worst case time complexity of NIC makes it
unusable on dense CNs. If we are looking for a local consistency that would advantageously
be maintained during search, RPC and Max RPC seem to be the most promising local
consistencies. Indeed, they are relatively inexpensive and far more pruningful than arc
consistency.

8. Acknowledgements
We would like to thank Toby Walsh for his suggestions for improving the presentation of
the figures in Section 5.

References
Allen, J. (1983). Maintaining Knowledge about Temporal Intervals. Communications of
the ACM, 26(11), 832–843.
Bacchus, F., & van Run, P. (1995). Dynamic variable ordering in csps. In Proceedings of
CP-95, Cassis, France, pp. 258–275.
Berlandier, P. (1995). Improving domain filtering using restricted path consistency. In
Proceedings of IEEE CAIA-95.
Bessière, C., Freuder, E., & Régin, J. (1995). Using inference to reduce arc-consistency
computation. In Proceedings of IJCAI-95, Montréal, Canada, pp. 592–598.
Bessière, C., Freuder, E., & Régin, J. (1999). Using constraint metaknowledge to reduce
arc consistency computation. Artificial Intelligence, 107(1), 125–148.
Bessière, C., & Régin, J. (1996). MAC and combined heuristics: Two reasons to forsake FC
(and CBJ?) on hard problems. In Proceedings of CP-96, Cambridge MA, pp. 61–75.
228

Domain Filtering Consistencies

Cabon, C., de Givry, S., Lobjois, L., Schiex, T., & Warners, J. (1999). Radio link frequency
assignment benchmarks. CONSTRAINTS, 4(1), 79–89.
Cheeseman, P., Kanefsky, B., & Taylor, W. (1991). Where the really hard problems are. In
Proceedings of IJCAI-91, Sydney, Australia, pp. 294–299.
Chmeiss, A., & Jégou, P. (1996). Two new constraint propagation algorithms requiring
small space complexity. In Proceedings of IEEE ICTAI-96, Toulouse, France, pp.
286–289.
Debruyne, R. (1999). A strong local consistency for constraint satisfaction. In Proceedings
of IEEE ICTAI-99, Chicago IL, pp. 202–209.
Debruyne, R. (2000). A property of path inverse consistency leading to an optimal algorithm. In Proceedings of ECAI-00, Berlin, Germany, pp. 88–92.
Debruyne, R., & Bessière, C. (1997a). From restricted path consistency to max-restricted
path consistency. In Proceedings of CP-97, Linz, Austria, pp. 312–326.
Debruyne, R., & Bessière, C. (1997b). Some practicable filtering techniques for the constraint satisfaction problem. In Proceedings of IJCAI-97, Nagoya, Japan, pp. 412–417.
Dechter, R., & Meiri, I. (1994). Experimental evaluation of preprocessing algorithms for
constraint satisfaction problems. Artificial Intelligence, 68, 211–241.
Dechter, R., & Pearl, J. (1988). Network-based heuristics for constraint-satisfaction problems. Artificial Intelligence, 34, 1–38.
Freuder, E. (1982). A sufficient condition for backtrack-free search. Journal of the ACM,
29(1), 24–32.
Freuder, E. (1985). A sufficient condition for backtrack-bounded search. Journal of the
ACM, 32(4), 755–761.
Freuder, E. (1991). Completable representations of constraint satisfaction problems. In
Proceedings of KR-91, Cambridge MA, pp. 186–195.
Freuder, E., & Elfe, C. (1996). Neighborhood inverse consistency preprocessing. In Proceedings of AAAI-96, Portland OR, pp. 202–208.
Frost, D., Bessière, C., Dechter, R., & Régin, J. (1996). Random uniform csp generators.
In http://www.ics.uci.edu/˜ frost/csp/generatotr.html.
Frost, D., & Dechter, R. (1995). Look-ahead value ordering for constraint satisfaction
problems. In Proceedings of IJCAI-95, Montréal, Canada, pp. 572–578.
Gaschnig, J. (1974). A constraint satisfaction method for inference making. In Proceedings
of the 12th Annual Allerton Conf. Circuit System Theory, U.I.L., Urbana-Champaign
IL, pp. 866–874.
229

Debruyne & Bessière

Gent, I., MacIntyre, E., Prosser, P., Shaw, P., & Walsh, T. (1997). The constrainedness of
arc consistency. In Proceedings of CP-97, Linz, Austria, pp. 327–340.
Golomb, S., & Baumert, I. (1965). Backtrack programming. Journal of the ACM, 12(4),
516–524.
Grant, S., & Smith, B. (1996). The phase transition behaviour of maintaining arc consistency. In Proceedings of ECAI-96, Budapest, Hungary, pp. 175–179.
Haralick, R., & Elliott, G. (1980). Increasing tree search efficiency for constraint satisfaction
problems. Artificial Intelligence, 14, 263–313.
Kumar, V. (1992). Algorithms for constraint satisfaction problems: A survey. AI Magazine,
13(1), 32–44.
MacIntyre, E., Prosser, P., Smith, B., & Walsh, T. (1998). Random constraint satisfaction:
theory meets practice. In Proceedings of CP-98, Pisa, Italy, Vol. 19, pp. 325–339.
McGregor, J. (1979). Relational consistency algorithms and their application in finding
subgraph and graph isomorphisms. Information Sciences, 19, 229–250.
Meseguer, P. (1989). Constraint satisfaction problems: An overview. AICOM, 2, 3–17.
Nadel, B. (1988). Tree search and arc consistency in constraint satisfaction algorithms. in
L. Kanal and V. Kumar, editors, Search in Artificial Intelligence, Springer-Verlag,
287–342.
Prosser, P. (1993). Hybrid algorithms for the constraint satisfaction problem. Computational
Intelligence, 9(3), 268–299.
Prosser, P. (1996). An empirical study of phase transition in binary constraint satisfaction
problems. Artificial Intelligence, 81, 81–109.
Prosser, P., Stergiou, K., & Walsh, T. (2000). Singleton consistencies. In Proceedings of
CP-00, Singapore, pp. 353–368.
Sabin, D., & Freuder, E. (1994). Contradicting conventional wisdom in constraint satisfaction. In Proceedings of ECAI-94, Amsterdam, Netherlands.
Schiex, T., Régin, J., Gaspin, C., & Verfaillie, G. (1996). Lazy arc consistency. In Proceedings of AAAI-96, Portland OR, pp. 216–221.
Singh, M. (1995). Path consistency revisited. In Proceedings of IEEE ICTAI-95, Washington
D.C.
Smith, B. (1992). How to Solve the Zebra Problem, or Path Consistency the Easy Way. In
Proceedings of ECAI-92, pp. 36–37.
Tsang, E. (1993). Foundations of Constraint Satisfaction. London, Academic Press.
van Beek, P. (1994). On the inherent level of local consistency in constraint networks. In
Proceedings of AAAI-94, Seattle WA, pp. 368–373.

230


	
 
			 ! #"$ % 
'&)(*,+.-//!(1032465'( /4

789:;  <)( ->=
??!@BA9	%&<C4>=
/!(

DFEHGJILKMKJNOEQPSR8TUILVMR8WR
XZY\[^]Q_a`MW
X_cbBEdN
efIgNXaR>ILW8WYihjVJ_]QNakgILVMW>]ml

IgNOn)Eokqpr]QsQR>_aR>EHG\etNOEus;]Q_v_]Q_

wSx#y{z|}~3xyC#|B#

v$aHZ3vO$3#3

  ¡
¢£¤u¥ ¦¨§© >£ª«
¬B¤
v
­H '®Z£'¯O¥ ¦±°²¥³¨®ª´£µ >¡C¶·«> «
 >¸¹3 6º{»£'¥BS§¼¾½¿À¿{ÁÂ ¿¿½Á
 Ä#ÅÇÆÈ~ÉÄ#|Êfz}x
Ã 
v ¡
¢£¤u¥ ¦¨§© >£ª«
¬B¤
­H '®Z£'¯O¥ ¦±°²¥³¨®ª´£µ >¡C¶·«> «
 >¸¹3 6º{»£'¥BS§¼¾½¿À¿{ÁÂ ¿¿½Á
$y}z'
Ï

Ï

ÐÄxZ#Ñ

Ë3{v8Ì¨Í.ÎvHZ3vO$3#3

Ì¨$33Ò$3O)Î·Íµ3$ÍÔÓ Î··ÍOv

v ¡
¢£Ö Õ £g×¡ ¡
ØaÙÛÚÜÞÝ©Ú8¦>¥B¡³ Ö £¬¸­)Â À>½ßà{ÁÈ×¡ >¡
¸¨áQ ¡³ Ö ¤

âäã,åæ´çèOéæ
êÈë)ì1íîïñð1íòBðQóôîõ¨ì1ëöëõ
òB÷·öòBõ6ø.òð1øÔîùì;îBóOúòõ ð6øÔò÷÷Ôûüîýì ë8õ1öòBý÷ëLþÿòõ î
ö ´ëøÔì1øÔîùJúõ6îë8ì6ì ë!ì
úî÷Ôûùî
	©ø.òB÷ð6ø	©ë¨ò÷îõ6øð6í	±ìaóôîõù´øÔùîù{ð1õ6î÷úî÷ø>øÔë8ì#òBõ6ëù÷Ôøë÷Ôû)ð6îLîõÐì ø	©ú÷Ôûîù ðíòöë
òBõ
òBù{ð1ë8ë8ìÐîB
ó 
ù ´ø
ù ±úî÷ø >øÔë8ì¨ï;øð6íøùÿ
ò îùì ð6òù{ðÐó
ò ð6îõQîõ¨
ò >îùìð
òBù{ðQì 		±òùJîBóaîú´ð6ø	±ò÷!
"¨ëõ6$
ë #ù÷Ôø ë÷Ô
û %	©ë8òù
ì #ù÷Ôë8ì6ìì 
î 	©&
ë 

î 	©ú÷Ô(
ë '´øð
û ÷Ôòì1ì1ë8)
ì î÷Ô÷Ôòúì 
ë  %)ï;íëõ6ëoð1í*
ë >î÷÷.òBúì ë!+
ì î,
ù 
ì1ø ëõ6
ë uòõ1&
ë -/.102-,-3.4-+5,-7698+:;î;
õ -/.1:<2-;>=¨ùð6ø÷·î?
õ ù÷ë!ì1ì#ð6íë8ì1&
ë î÷Ô÷Ôòúì1ë8ìÐòBõ6ëoì1íîï;ù
ð6îgíî÷ 7òBù@
û >îù{ð1õ6î÷ úî÷Ôø @
û ´ë!ì ø ùë8>
õ 	@ì ?
ð 
íîî{ì ëýë>ðïÐëëù±ì 
í©úë8õ óôîõ 	±ò
ù >;
ë òBõ
òBù{ð1ë8ë8ìaòB
ù 
ë Aøë8ù{9

ð >

î 	©
ú ð6òð6øî
ù
B>CEDGF æ´çH;I2J¨éæKLH F
MNPO!QRNPSUTVWXQZY([(\,NPV^]?Y(Q_\,`baLc2d,Y`fe1\ggh`PNfWZ\[(NbdVSd,O*\Y([(NijWZNf\,`NPV[kQ_`P`PNbl,Q_VWXQEWXdV[(\,NPVnmR\,Vo4TVhWXQZY([(\,NPVpa
[(NbQ_SZqsrtVu[(vNPS@c2d,Ywjxjc2QyS(v7d
cz[(v\[ThVWXQZY([(\,NPV[ou{YQZQ_eS|TVWXQZY[(\,NPV[oj}srtV/\~WXdV[kY(d`P`PQ_e3Sk[kdpWv\,S([(NPW
SkopSk[kQ_mc@Nb[(v~ThVWXQZY([(\,NPV[o\,SsmEdpe7Q_`bQ_e~{oR\$gh\Y([(Nf\,`P`boyd,{hSkQZY(\{h`bQ\Y(w,de7Q_WZNfS(NbdVEgYdWXQ_S(S_xOd,Y
QX7\,mEgh`bQxgj`P\,VS*WZ\,Vu{Qd,{[(\,NPVQ_euQXWZNbQ_V[(`bod,Y|c@Nb[(vuT\,`PNb[olTh\Y\,V[kQZQ_S_xh{hT7[sY\YQ_`bo{d,[(v>q
2`P\,VVNPVld,QZYuSk[kdWv\,Sk[(NPWe7dmR\,NPVhSc@Nb[(vTVhWXQZY([(\,NPV[oNPSRvh\YeNPVS(dmEQWZ\,SkQ_S&7@*;a
v\YeRd,Y9QZ,Q_V~ThVe7Q_WZNPe\{j`bQ,xSkQZQ)\gh\,ehNPmRNb[kYNPdT|S(Nb[(SNbw`fNPSZxp_,]\,e\,VhNx\,V7wS_xzsdVe7dV>x
_,,qNb,Q_V1[(v\[Nb[NPSv\Ye [kd¡ijVhe\,V d,gh[(NPmR\,`)gh`P\,Vd,Ygd`PNPWXo,x^NP[NfSVh\[(T7Y\,`)[kdu[kY(o[kd¡ijVe
dV7Q[(v\[NPS¡¢tl,dde Q_V7dTlv£pqrtV[(vQy{Q_Sk[d,O2\,`f`?gdS(SNb{h`bQc&d,Y`PehSZx[(vNPSc2dT`femRQ_\,V4v\_pNPV7l¡\,V
\,`bl,d,YNP[(vm¤[(vh\[NfSUlT\Y\,V[kQZQ_e¥[kd{QO\,Sk[\,Ve¦[kd gYdeThWXQ\gd`fNPWXo4[(v\[NPSUYQ_\,SkdV\{h`bo§WZ`bdSkQ
[kdu[(v7Qd,g[(NPm~\,`?gd`PNfWXo,q¨V7Od,Y([(TVh\[kQ_`bo,x>c2QRSv7d
c©v7QZYQy[(vh\[STWv4\,V4\,`bl,d,YNb[(vmªNPSTV`PNPw,Q_`boud,Y_x
NPV§SkdmEQ¡WZ\,SkQ_SZxNPmEgdS(SNb{h`bQ,q|v7QNfmEgh`PNPWZ\[(NPdV4O!d,Y\,`bl,d,YNP[(vm¤e7QZ,Q_`Pd,ghmEQ_V[yNPSU[(v\[e7QZ,Q_`bd,gQZYS
S(v7dTh`Pe¡V7d,[|cs\,Sk[kQU[(NPmRQc2d,Y(wpNPV7l[kdc&\Ye{d,[(v¡lT\Y\,V[kQZQ_S\[@dVWXQ,q
|vQ~gh\Y([(NfWZT`P\Y$m~\[(v7Q_mR\[(NPWZ\,`smEdpe7Q_`PS$c2Q¡WXdVWXQ_V[kY\[kQudV¥NPV1[(vhNPSUgj\gQZYy\Y(Q/«1¬­®¯° ±²X³
´Zµ!¶µ ¯·1¸j­t¯ ´ ² ¶¶ ² ¶§¹ «º» ¶¼ \,Ve§¸p¬,­¾½ µ ¬¿¿À¥¯Á ¶ ²X­¾°G¬ÁZ¿b²¡«1¬,­®,¯°1±² ´_µf¶¾µ ¯·¦¸j­k¯ ´ ² ¶¶ ² ¶¦¹ »Â9«3º» ¶¼ q
Ã4QWXdVhS(NPe7QZY{d,[(vE[(vQ@Sk[kY\,Nblv[kOd,Y(c&\YeRY(QZgYQ_SkQ_V[(\[(NPdVSd,O>Ä2S2\,VheR&ÅÄ9SZx\,VeRS(ThWZWZNPVWX[
Y(QZgYQ_SkQ_V[(\[(NPdVSZxpS(NPVWXQ[(v7QWXdmEgj`bQXpNP[oEd,OijVehNPV7lgd`PNPWZNbQ_S9NPS9mEQ_\,ST7Y(Q_eV7d,[2NPV~[kQZYmRS2d,O^[(v7QS(NbÆZQ
d,O)[(v7QSkopSk[kQ_mux{jT7[|NPV¡[kQZYmRS|d,O?[(v7Q$S(NbÆZQd,O)[(v7QE­(²¸j­(² ¶ ²X·h½L¬,½ µ ¯·1d,O)[(v7Q$SkoS([kQ_muq
|vQZY(Q|v\,S){QZQ_VE\S(NblVhNijWZ\,V[?{dpe7oUd,Oc2d,Yw$dVEv7Q_TYNPSk[(NPWZS+Od,Y9S(TWZWZNfVWX[(`boUYQZgY(Q_SkQ_V[kQ_eEÄ2S
SkQZQ~Ç&dT7[(Nf`PNbQZY_x>ÄQ_\,V>x+È\,V7wpSZx9_,,];Çs`bo[(v7Q,x9_,,uOd,YS(T7Y,QZoSq~dmRQEd,O2[(vNfSc2d,Y(wl,Y(d
cS

É  -//!(O %%jÊ!<6L
<sËC>
&ÌO
!:Q
9Í9!	%&%Î		&>%3%fÏ> <Î

Ð 38·?Ñ>Ò©Ëv{v8Ì¨Í.Î·Ò^ÑjÓÔ

$33Ò$3

dT7[d,O[(v7Q|Q_VlNPV7QZQZYNPVl[kY\,eNb[(NbdV/SkQZQ,xOd,YQXp\,mRgh`bQ,x@S(Nb[(S(Nbwp`PNPS+\,VeEÕ\,VÖ|doj×ØSt_,,Ù\Y([(NfWZ`bQ*dV
OQ_\[(T7Y(QXaL{h\,SkQ_emEQZ[(v7dpeS?c@vhNPWvEe7QZgQ_VehS?dV~Q_mEghNbYNPWZ\,`QZNPeQ_VWXQ*[kdQZ\,`PT\[kQ@\,`bl,d,YNb[(vmRSZq+ÃÚvNP`bQ
[(v7QZY(Qy\Y(Qyd,{pNbdTSe7Y\_c@{h\,W(wpS[kd[(vNfS@\ggYd\,Wv>xdT7Yc2d,Y(w/\YlT7Q_S@[(vh\[[(vNfS@mR\
o/{Q[(v7QmEdSk[
\ggYd,gYNP\[kQcs\_o3[kd~,QZYNbOou[(v7QyT\,`fNb[o¡d,O\,V\ggY(d
pNPm~\[(NbdV3\,`bl,d,YNb[(vmuxh\[`bQ_\,Sk[NbO)dV7QUcs\,V[(S
[kd~e7dRS(d~NPV¡Y(Q_\,SkdVh\{h`bQ[(NPmEQ,q
|vQ|S(\,mEQ|gYd,{h`bQ_mRS+[(v\[gj`P\lT7Q|\ggYd_7NPmR\[(NbdVE\,`bl,d,YNb[(vmRS)Od,Y9TVWXdmRgY(Q_S(SkQ_eYQZgY(Q_SkQ_V[(\Ga
[(NbdVS*WZ\YY(o~d,QZY@[kdR[(v7QS(ThWZWZNPVWX[*Y(QZgYQ_SkQ_V[(\[(NPdVSZx7\,Ve¡[(v7QWXdmEghY(Q_S(S(NbdVuNfV[kY(dpeTWXQ_Ss\,eehNb[(NbdV\,`
WXdmEgh`PQXpNb[o,q9Û7d,YQXp\,mEgj`bQ,xNbO[(vQZY(QUNPS*V7dRWXdmRghT7[(\{h`bQ\ghgY(d_7NPmR\[(NPdV¡d,O+[(vQd,g[(NPmR\,`>gd`PNfWXo~NPV
[(v7QTVWXdmEghY(Q_S(SkQ_eWZ\,SkQ,x>[(v7Q_VWXdmEgY(Q_SS(NbdVc@NP`P`^Vd,[Wv\,V7l,Q[(vNPS_qd
c&QZ,QZY_xNb[NPS@Q_\,S(o3[kdijVe
[(v7Qd,g[(NPm~\,`gd`fNPWXoEO!d,Y|\,VuNfVpijVNb[kQXavd,YNbÆZdVROT`P`PoEd,{hSkQZY(\{h`bQÄÜÇ&Q_`P`PmR\,V>x>_,Ý,xo,QZ[Þ;a
v\YeßghY(d
\{h`bo¥v\Ye7QZY~[(v\,Vàgd`bopV7dmRNP\,`&[(NPmEQ$[kd1ijVeà\ggYd_7NPmR\[kQ_`bond,g[(NPmR\,`|gd`fNPWZNbQ_SuNPV
[(NPmEQmEQ_\,S(T7Y(Q_e~NPVE[(v7Q@SNbÆZQ|d,O[(v7Q@NPVghT7[?NbO[(v7Q@NPV7gjT7[;NPS;Y(QZgYQ_SkQ_V[kQ_eS(TWZWZNPVhWX[(`bo¡S(QZQQ_WX[(NbdVÝq
ád,[kQ~[(v\[$[(v7QZY(Q~\YQ~[c&dNfV[kQZY(ghY(QZ[(\[(NbdVS[kd3ijVeNfV7lu\,V¦\ggYd_7NPmR\[(NbdV>}ijVeNPVl\3gd`fNPWXo
c@Nb[(v\,`PT7QWZ`bdS(Q[kdE[(v\[|d,O+[(v7Qd,g[(NPmR\,`gd`PNPWXo,xpd,Y@SNPmEgh`boRWZ\,`fWZT`P\[(NPV7lE\¡°¬¿âh²U[(v\[|NPS*WZ`PdSkQ[kd
[(v7Qd,g[(NPm~\,`j\,`PT7Q,q)rãOc&QWZ\,Vue7d$[(vQOd,YmEQZY*\,VeuWZ\,V¡QZ\,`PT\[kQgd`PNPWZNPQ_SZx[(v7Q_V¡c&QWZ\,VuWXQZY([(\,NPV`Po
e7d[(v7Q$`P\[k[kQZY
q@|v7QZY(QZOd,Y(Q,xc2QySkdmEQZ[(NPmRQ_SS(vd
cÜ[(v\[[(vQ$`P\[k[kQZYWZ\,VV7d,[{QUe7dV7Q,xd,YWZ\,VhV7d,[{Q
e7dV7QNfV¡[(NPmEQgd`bopV7dmRNP\,`NPV¡[(v7Q$S(NbÆZQd,O+[(v7QUNPV7gjT7[ThV`bQ_S(S*SkdmRQZ[(vNPV7lRTVh`PNbw,Q_`bo~NfS*[kYT7Qq
|vQWXdmEgh`PQXpNb[oWZ`P\,S(S&p@säWXdVhS(NPSk[(Sd,O[(v7dSkQ `P\,V7lT\l,Q_SY(Q_WXd,lVhNbÆ_\{h`bQ{oå\n+T7YNPV7l
mR\,WvNPV7Qu[(v\[TSkQ_SRdVh`bo/æ+ç?EmEQ_mEd,Y(onO!d,YSkdmEQ/gd`bopV7dmRNf\,`æ?x2c@vQZY(QuçßNPSE[(v7QS(NbÆZQud,O[(v7Q
NPV7gjT7[Zq/Ç&Q_WZ\,TSkQ¡Q_\,Wv¥[(NPmRQSk[kQZg¥TSkQ_Sy\[EmEdSk[ydV7Q¡TVNb[d,OmEQ_mEd,Y(o,xéèÈ&p@s@x+[(vdT7lv
c&QRe7duV7d,[wVd
cêc@v7QZ[(vQZY[(v\[NPS\¡gY(d,gQZYNPVWZ`PThS(NbdV/d,Y$\,V Q_T\,`fNb[o,qÇ&Q_WZ\,TSkQ,xlNP,Q_V4\u`PNPmRNb[
dV [(v7QE\,mEdTV[d,O2mRQ_mEd,Y(oThSkQ_e>x>[(v7QZY(QE\Y(QEdVh`bo/QXpgdVQ_V[(NP\,`f`bo/mR\,VoWXdVpijlT7Y\[(NbdVSd,O2[(v\[
mEQ_mEd,Yo3gdS(S(Nb{j`bQ$cNb[(v \iQ_eiVNb[kQ\,`bghv\{QZ[Zx^&7@*zèëÞ|qyrã[NPSV7d,[wVd
c@V4cv7QZ[(v7QZY
[(vNPS@NPS*\EgY(d,gQZY@NfVWZ`PTS(NPdV~d,Y\,V/Q_T\,`PNb[oQ_Nb[(vQZY_x\,`b[(v7dT7lv3Nb[@NPSswpV7d
cV/[(v\[@zí ì

9Þ@q2|vTSZx

\&p@sav\YeVQ_S(S9YQ_S(T`b[&S(\_opSs[(v\[s[(v7QgY(d,{h`bQ_méNPS&\ggh\Y(Q_V[(`bo~Vd,[2[kY\,WX[(\{j`bQ,x7{hT7[s\,V¡Þ;a
v\YehV7Q_S(SsY(Q_S(Th`b[*S(\_opS|[(v\[@[(v7QgY(d,{j`bQ_mäNPS*WXQZY([(\,NPVh`boV7d,[@[kY\,WX[(\{h`bQ,q
Ö@Q_SkQ_\YWvQZYSs\,`PSkdWXdVS(NPe7QZY2gY(d,{h`PQ_mRS;[(v\[s\Y(Q;aWXdmEgh`PQZ[kQTVhe7QZY2`bd,lS(gh\,WXQd,Y&d,[(v7QZY*vNblvh`bo
Y(Q_Sk[kYNPWX[kQ_eEY(Q_eThWX[(NbdVSq)Û7d,Y9QX7\,mEgh`PQ,x[(v7Q|gd`PNPWXoUQXpNPS([kQ_VWXQ|gY(d,{j`bQ_mëO!d,Y2NPVpijVNP[kQXav7d,YNbÆZdVyÄ2S
NPS;aWXdmEgj`bQZ[kQ¡)\gh\,ehNPmRNb[kYNPdT|S(Nb[(S(NPw`PNfSZx^_,,q|vNPSNPSTSkQZOT`NPVO!d,Ym~\[(NbdV>xh{Q_WZ\,TS(QyNb[NPS
l,Q_V7QZY\,`f`bo~[(v7dTlv[*[(v\[|aWXdmEgh`bQZ[kQUgY(d,{h`bQ_m~S2\Y(Q$V7d,[*S(TS(WXQZg[(NP{h`bQ[kd~S(NblVNbijWZ\,V[sSkgQZQ_epaT7g¡pNP\
gh\Y\,`f`bQ_`PNbÆ_\[(NbdV^qÛ7d,Y\RmEd,Y(Q$[(v7d,Y(dT7lv/ehNPS(WZTS(SNbdV¡d,O;;aWXdmEgh`PQZ[kQ_V7Q_S(SZxSkQZQYQZQ_V`P\_cUxh@dd
,QZY
x
êÖT7ÆZÆZd7x_,,Ýq
Ã4Q3\,`fSkd4wVd
cî[(v\[Ráïèï&7@*|x2S(d1
\,Vo3\Y(lTmEQ_V[d,Y{Q_`PNPQZO+[(vh\[©í ì

&p@sêc&dT`PeàNfmEgh`bo1
á|qà|vTSZx
í
í
áðNPmRgh`PNbQ_S*[(vh\[êí ì sp@s|qEÛ7d,YQ_`P\{d,Y\[(NPdVS@d,O9[(vNPS

WXdmEgh`PQXpNb[o[(vQZd,Y(o¡gYNPmEQZY
xSkQZQ$\,VouWXdmEgh`PQXpNb[o[(vQZd,Y(o¡[kQX[ZxhSTWv\,S|)\gh\,eNPmRNP[kYNbdT>x_,Gñ7q
rtV [(vNPSgh\gQZY_x>c&QRS(v7dcê[(v\[[(v7QZY(QRNPS\uV7Q_WXQ_SS(\Y(o[kY\,e7QXaLdòà{QZ[c&QZQ_V4YTVVhNPV7l~[(NfmEQlT\Yka
\,V[kQZQ_Sy\,Vhe1gQZY(Od,YmR\,VWXQElT\Y\,V[kQZQ_SyOd,Y$\,Vo4l,Q_V7QZY\,`&&ÅÄz\gghY(d_7NPmR\[(NbdV§\,`bl,d,YNb[(vhmôó
TV`PQ_S(SU

áëd,YE
sp@s|q¥?\{j`bQlNb,Q_S\,V§d
,QZY(pNbQZcäd,O|dT7YyY(Q_S(Th`b[(SZqÚád,[kQ¡[(v\[
í
í
\,S(S(ThmRNPV7l¡éí ì áðd,Yéí ì sp@s&@[(vNfS[kQ_`P`PSTS[(v\[[(v7QZYQNfSV7du\,`bl,d,YNb[(vmô[(v\[YTVSNPV

[(NPmEQEgd`bopV7dmRNf\,`?NPV [(vQRS(NbÆZQEd,Os[(v7QEY(QZgYQ_SkQ_V[(\[(NPdV4d,Os[(v7QR&ÅÄß[(v\[ijVeS\ugd`PNPWXo3[(v\[
NPSWZ`bdSkQ¡[kd d,g[(NPm~\,`?õZ¯­3²X°,²X­¾À

µ · ¶ ½L¬· ´ ²Xq1rã[Ee7dQ_SEVd,[S\_o¦[(vh\[yO\,Sk[E\,`bl,d,YNP[(vmRSyc@NP`P`9gY(dpeTWXQ
O\YkaLO!YdmaLd,g[(NPmR\,`9G\,`fT7Q_SOd,Yy\,`f`9&ÅÄ9S_][(v7QZY(Q\Y(Qm~\,Vo1NPVhSk[(\,VWXQ_Scv7QZY(Q~[(vQ\,`bl,d,YNP[(vmRS
\,`bY(Q_\,eoNPVTSkQd,Y{Q_NPV7l¡e7QZ,Q_`bd,gQ_ec@NP`P`{Qy{d,[(vO\,Sk[\,Ve4WZ`bdSkQ,q$Ã4QRS(NPmEgh`Po¡WZ\,V^×ö[lT\Y\,V[kQZQ
[(v\[|[(vQU\,`bl,d,YNb[(vhmRSsc@NP`P`;¬¿÷9¬À ¶

ijVheu\RWZ`bdSkQXaL[kdaLd,g[(NfmR\,`^gd`PNPWXoThNPW(wp`bo,q

ø_ù

ú



Q~vÉ'z ´Å

ÔC

Ëv·hûûË7ü3ÍÌQhýÍ{Í.Î þL8$>Î$ÿ{Ë3

y{#y{|}$}z~v

+\Y[(NP\,`>d,{hSkQZYG\{hNf`PNb[o





Sk[(\[(NbdV\Yo

_a\gg^q



ç

[(NfmEQXae7QZgQ_Ve7Q_V[



Sk[(\[(NbdV\Yo



ÛT`P`d,{hS(QZY(G\{jNP`PNb[o
Sk[(\[(NbdV\Yo
Sk[(\[(NbdV\Yo

 a\gg^q
_
_a\gg^q
 a\gg^q
_
 a\gg^q
_

ç




[(NfmEQXae7QZgQ_Ve7Q_V[

[(NfmEQXae7QZgQ_Ve7Q_V[

\{d,QXa\_l7qj\,`PT7Q
ç



vhNPSk[kd,Y(oae7QZgQ_Ve7Q_V[

~vÊñÐÉz}8Å

Ðy~ ÐÉZÊ

ç



Sk[(\[(NbdV\Yo

¨V7d,{jSkQZY(\{hNP`PNb[o


	

x~vy{z ~

á
á

V7d,[@ThV`bQ_S(Ss í á
V7d,[@ThV`bQ_S(Ss í &p@s
V7d,[@ThV`bQ_S(Ss í á
TVhWXdmEghT7[(\{h`PQ

\,e\,VN>QZ[\,`qbx_,,


ç

_a\gg^q


@Ç&á
ç

a\,eeNb[(Nb,Q\ghg^q

V7d,[@ThV`bQ_S(Ss í

a\,eeNb[(Nb,Q\ghg^q
ç

V7d,[@ThV`bQ_S(Ss í
V7d,[@ThV`bQ_S(Ss í

á

;av\Ye
Þ;av\Ye

+\{h`bQR}2\YehV7Q_S(S*Od,Y|gh\Y([(Nf\,`P`bo~\,Ve/OT`f`boRd,{hSkQZYG\{h`PQÄ9S





ÈÐ#y{~zÊñ·}z~|

#y{z|}{z |ÿ3#Ä

|v7Q¡Sk[(\[kQud,O|[(vQ¡\Y[ycNb[(v¦YQ_SkgQ_WX[$[kd1sÅÄëgd`PNPWXoaijVehNPV7l/\,`bl,d,YNP[(vmRSyNPSy[(v\[[(v7QZY(Qu\Y(Q
[(v7Y(QZQ$[ogQ_S@d,O\,`bl,d,YNb[(vmRSNPV3TS(QUd,YTVe7QZY@NfV,Q_Sk[(NPl\[(NbdV>}sQXp\,WX[\,`bl,d,YNP[(vmRSZx\ggY(d
pNPm~\[(NbdVSZx
\,Ve

v7Q_T7YNfSk[(NPWZSZqð;7\,WX[¡\,`bl,d,YNb[(vm~S\[k[kQ_mEgh[[kd§ijVeåQXp\,WX[uSkd`PT[(NbdVSZqÚrtVå[(v7Q3ijVNb[kQXavd,YNbÆZdV

WZ\,SkQ_SZx[(v7QZoåYTVåNPV

c&d,YSk[taWZ\,SkQ4[(NPmRQ\[¡`bQ_\,Sk[¡QXpgdVQ_V[(NP\,`NPV

[(v7Q v7d,YNbÆZdVÜ\,S(S(Tm~NPV7l§\nSk[kY\,NPlv[kOd,Y(cs\YeåYQZgY(Q_SkQ_V[(\[(NbdV

[(v7Q S(NbÆZQd,O[(v7Q &ÅÄî\,Ve

d,O[(v7Q &ÅÄ&q&rãV

[(v7QNfVpijVNb[kQ

¡d,O

v7d,YNPÆZdV>x?[(vQZo¦e7dVd,[$V7Q_WXQ_S(S\YNP`bo4v\,`b[Zx){hT[$WZ\,V§{QSk[kd,ggQ_e1cv7Q_V1[(v7Qgd`PNPWXo NPS$c@Nb[(vNPV

d,g[(NPm~\,`\ Wv7Q_W(w\{h`bQ/WXdVehNb[(NbdVjq4ggY(d
pNPm~\[(NbdV§\,`Pl,d,YNb[(vmRSWXdVS([kYTWX[E\ggY(d
pNfmR\[(NbdVS$[kd

c@v\[2[(v7Q@QX7\,WX[s\,`bl,d,YNb[(vm~S;ijVe^qsp\,mEgj`bQ_Sd,O>[(vNfS9NPVWZ`fTe7Q*l,YNPe7aL{h\,SkQ_eRmEQZ[(vdeS_x\,TSkwY(Q_Wv[Zx



_,]>M^d,Q tdo,x_,p]ÃÚvNb[kQ,x+_,pq¡Q_T7YNPSk[(NfWZS|WXdmEQ$NfVu[c&d

\_,d,YSZ}s[(v7dS(QU[(v\[WXdVSk[kYTWX[d,Y

ijVe \,WX[(T\,`9gd`PNPWZNbQ_S[(v\[UWZ\,V4{QEQZ\,`PT\[kQ_e>x?\,Ve [(v7dSkQR[(vh\[SkgQ_WZNbO!o\umEQ_\,VSd,OsWvddS(NfV7l/\,V
\,WX[(NbdV1Od,Y|QX7\,mEgh`bQ,x;¢kmEdSk[|`fNbw,Q_`boRSk[(\[kQ_£xjc@vNPWvedVd,[&opNbQ_`Pegd`PNPWZNbQ_S2[(v\[|WZ\,V¡{QQZG\,`fT\[kQ_e
TS(NfV7l[(v7QSk[(\,Ve\Ye>x`PNPV7Q_\Y|\,`Pl,QZ{Y\GaL{h\,SkQ_e3mEQZ[(v7dpeSZq

|vQ*{Q_S([WZT7Y(Y(Q_V[;QXp\,WX[&\,`bl,d,YNb[(vhmêNPSNPVWXYQ_mEQ_V[(\,`pghYTVNPVlrt&?c@NP[(vgdNfV[taL{h\,S(Q_eRNPmEgYd
,QXa

"!
#!>v\,V7l7x_,,q@M?Nb[k[(mR\,V>×ØS\,V\,`bopS(NPS*d,O;[(vQc@Nb[(V7Q_SS|\,`bl,d,YNb[(vhm MNP[k[(mR\,V>x
ÄQ_\,V>x>%$\Q_`P{h`PNPV7l7x^_,,Ý]s\,SS(\,Ve7Y\px&$\Q_`b{h`fNPV7l7xhMNb[k[(mR\,V^x?_,,ÝSk[(NP`P`>\ghgh`PNbQ_SZ}&|vNPS@\,`bl,da
mEQ_V[y vh\,V7l7xhM^QZQ,x>

YNb[(vhmðY(Q_TNbY(Q_S>QXpgdV7Q_V[(NP\,`[(NPmRQ2NPV[(vQ9c&d,YSk[?WZ\,S(Q,q)@v7Q9TVeQZY`bopNPV7ls[(v7QZd,Y(od,O7[(v7Q_S(Q2\,`bl,d,YNP[(vmRS
ÃÚNb[(V7Q_S(SZx+rt?xQZ[(WqOd,Y$NfVpijVNb[kQXavd,YNbÆZdV WZ\,SkQ_Sye7QZgQ_VeSdV¦Ç&Q_`P`fmR\,V>×ØS\,Ve¥dVeNPwj×ØSc&d,Y(w dV

\,`PT7Q2NP[kQZY\[(NbdVOd,Y)Ä9S+\,Vey&ÅÄ9SsÇ&Q_`P`PmR\,V>xp_,Ý]ppdVeNbwx_]7pmR\,`P`bc&ddeUÚdVehNbwjx

('

_ q
|vQ{Q_Sk[ywVd
c@VnO\,mRNP`bo4d,O\ggY(d
pNPm~\[(NbdV¥\,`bl,d,YNb[(vm~S$NPSywpV7d
cVn\,Sl,YNPe§mRQZ[(v7dehSZq4|v7Q
{h\,S(NfWENPe7Q_\/NPS[kdTSkQR\/ijVNb[kQEl,YNPe4d,OsgdNPV[(SUNPV [(v7Q~{Q_`PNPQZO2Skgh\,WXQ[(v7QSkgj\,WXQRd,O|\,`P`)gY(d,{j\{hNP`PNb[o
eNPS([kYNb{hT7[(NPdVSd
,QZYy[(v7QSk[(\[kQ_Syd,O*[(v7Q&ÅÄßó

[(vNPS$NPS[(v7QTVe7QZY`PoNPVlSkgj\,WXQ~Od,YU[(v7Q\,`bl,da

YNb[(vhmRSmEQ_V[(NPdV7Q_e1\{d
,Q[kd3e7QXijV7QE\ugd`PNfWXo,qEÅVhWXQE[(v7QRl,YNPe gdNPV[(S\Y(QRWv7dSkQ_V>x+\,`P`)d,O2[(vQ_SkQ
\,`bl,d,YNP[(vmRS|TS(QG\,`fT7QUNb[kQZY\[(NPdV/dV/[(vQUgdNPV[(S*[kd~d,{[(\,NfV3\Rgd`PNfWXoOd,Y@[(v7dS(QU{Q_`PNbQZO+Sk[(\[kQ_SZx[(v7Q_V
NPV[kQZY(gd`P\[kQ[kd[(v7QUcv7d`bQ{Q_`PNbQZO)Skgh\,WXQ,q|@v7Q$eNbòQZY(Q_VhWXQUNPVu[(v7Qy\,`bl,d,YNb[(vhmRS@`PNPQ_S@NPVu[(vQ$WvdNPWXQ$d,O
l,YNPegdNPV[(SZqsVEQX7WXQ_`P`bQ_V[S(T7Y,QZoy\ggQ_\YS;NfVy\,TSkwY(Q_Wv[Zx_,q|v7Q_SkQ|\,`Pl,d,YNb[(vmRS;\YQ|WZ\,`P`bQ_e

*)
ø

Ð 38·?Ñ>Ò©Ëv{v8Ì¨Í.Î·Ò^ÑjÓÔ

$33Ò$3

\ggYd_7NPmR\[(NbdV \,`bl,d,YNP[(vmRS{Q_WZ\,TSkQ[(v7QZo \ggY(d
pNfmR\[kQ[(v7QEgY(dpWXQ_S(Sd,O9\,`PT7QENb[kQZY\[(NbdV>x>c@vNfWv
[(v7QQX7\,WX[@\,`bl,d,YNb[(vmRS|\,`Pl,d,YNb[(vmRS*WZ\YY(odT[|QXp\,WX[(`Po,q
Q_T7YNPS([(NPWZS9[(vh\[sedVd,[2opNbQ_`PeQ_\,S(NP`boEQZ\,`PT\[kQ_e¡gd`PNfWZNbQ_S9\Y(QS(TY(,QZo,Q_euNPV Ls\,S(S(\,VeY\px>_,,q
|v7Q_S(Q\Y(Qd,O[kQ_V¡,QZY(o~Q_\,S(o~[kdRNPmEgj`bQ_mEQ_V[Zx\,Ve¡NPVWZ`fTe7Q@[kQ_WvVNPT7Q_SsS(TWv¡\,SE¢kmEdSk[*`PNbw,Q_`boRS([(\[kQ_£
WvddS(NfV7l4\Sk[(\[kQucNb[(v¦[(vQ¡vhNblv7Q_Sk[$gY(d,{h\{hNf`PNb[o OY(dm
SkopSk[kQ_m

c2QZY(QOT`P`bod,{hSkQZY(\{h`bQx;\,VenmRNPVhNPm$ThmªQ_V[kY(d,go

[(v7Q¡{Q_`PNbQZO*Sk[(\[kQ,x2\,Vhen\,WX[(NfV7l4\,SyNPO|[(v7Q
Wv7ddSNPV7l3[(vQ\,WX[(NbdV§[(v\[ylNb,Q_Sy[(v7Q

mEdSk[/NfV7O!d,YmR\[(NbdVÚ\{dT7[u[(v7Q1WZT7Y(YQ_V[/Sk[(\[kQqªÅ[(v7QZYSue7QZgQ_Ve

dVî¢t,d,[(NfV7l7xØ£Úc@v7QZY(Q1S(QZ,QZY\,`

v7Q_T7YNPSk[(NPWZS&d,Y@d,gh[(NbdVS*\Y(QUWXdm${hNPVQ_e>q
|vQZY(Q\Y(QUv7Q_TYNPSk[(NPWZS&{h\,S(Q_eudV¡ijVNP[kQvhNPSk[kd,YNbQ_Ssd,Y@d,[(v7QZYTS(Q_Ssd,O?iVNb[kQ\,mEdTV[(S|d,O)mEQ_mEd,Y(o
c@Nb[(vhNPVU[(vQ|\,`bl,d,YNb[(vmîLpdVeNbwx7_]p2`P\[kÆ_mR\,V>xj_,]p\,VSkQ_V^xh_,,\pxj_,,G{^]pMThSkQ_V\pxMNLxpNb[ta


$

$

[(NPV7l,QZY
xhÃ4Q_`P`PS_xjd`feS(mRNb[(v^x_,,]>3Q_T`PQ_\,T>x Nfmux \Q_`b{h`fNPV7l7xh*\,S(S(\,Ve7Y\px?_,,]>3Q_Th`bQ_\,T>x

+$ ,$ \Q_`b{j`PNPV7l7x_,,];+Q_S(v7wpNPV>xQ_T`bQ_\,T^x?-$ \Q_`b{j`PNPV7l7x;_,,]\,VSkQ_V¦äÛQ_V7l7x
(././.p]0$NPmuxÄQ_\,V>x©Q_T`bQ_\,T>x1(././.q|á@dVQUd,O)[(v7Q_SkQyWXdmEQ_S@cNb[(vugY(dd,OS*d,O;WZ`bdSkQ_V7Q_S(S_xhQX7WXQZg[

+Q_S(v7wpNPV>x Nfmux?

Od,Y9SkdmEQ|d,O>\,VSkQ_V>×ØS9c2d,Ywjq;Û7d,Y2[(v7Q|Y(Q_Sk[Zx[(v7Q|[kY\,eQXaLdòuvh\,S;{QZQ_VRmR\,e7Q|{QZ[c2QZQ_V~O\,Sk[2SkQ_\YWvhNPV7l
[(v7Y(dTlvugd`PNPWXo~Skgj\,WXQU\,VeulT\Y\,V[kQZQ_SZq

3254 }y6´}{y{ ~
798Sx#z|;:H$Qy
rtVEpQ_WX[(NbdV;xc&QslNb,Q*O!d,YmR\,`pe7QXijVNb[(NPdVSd,OÄ2S\,VeE&ÅÄ9S;\,Vhe$gd`PNfWZNbQ_SZ],[c&daLghv\,S(Q*[kQ_ma
gd,Y\,`pÇs\_o,Q_S9VQZ[(S|
 |ÇsáS;\Y(Q*e7QXijV7Q_eNPVRQ_WX[(NbdVRÝq)rtVRQ_WX[(NbdV;' xc&Q|e7QXijV7Q<Z a\ghgY(d_7NPmR\[(NPdVS

\,Ve\,eeNb[(Nb,Q\ggY(d
pNfmR\[(NbdVSZx\,VeSv7d
cÚ\Y(Q_`f\[(NbdVS(vNPgR{QZ[c&QZQ_V~[(v7Q[c&dy[ogQ_S2d,O^\ggYd_7NPmR\Ga

{hNP`fNb[oROd,YÄ9S|\,Vhe/&ÅÄ9SZq
Ã4Q~S(QZgh\Y\[kQR[(v7QRWXdmRgh`bQX7Nb[oY(Q_S(T`b[(SOd,YijVNP[kQXav7d,YNbÆZdVgd`PNPWXo3\ghgY(d_7NPmR\[(NPdV O!Y(dmª[(vdSkQ
Od,Y2NPVpiVNb[kQXav7d,YNPÆZdV$gd`PNfWZNbQ_SZqQ_WX[(NbdVRñ$WXdV[(\,NPVhS9V7dV\ghgY(d_7NPmR\{jNP`PNb[oUY(Q_S(Th`b[(S;Od,Y;ijVNb[kQXavd,YNbÆZdV
&ÅÄgd`PNfWZNbQ_SZ]Q_WX[(NbdV3ÙWXdV[(\,NPVS|VdV\ggY(d
pNfmR\{hNP`PNP[oO!d,YNPVpijVNP[kQXav7d,YNbÆZdV&ÅÄgd`PNa
WZNbQ_SZq;`b[(v7dT7lvNb[NfS?YQ_`P\[(Nb,Q_`bo$Q_\,Sko$[kdijVeyd,g[(NPmR\,`pÄ¦gd`PNPWZNPQ_SZxc&Q|WXdVS(Nfe7QZY\ggY(d
pNfmR\[(NPV7l
Ä

gd`PNPWZNPQ_S*NPVQ_WX[(NbdVÝxjS(NfVWXQ[(v7Q$STWZWZNPVWX[(`boY(QZgYQ_SkQ_V[kQ_eWZ\,SkQ,x\[`bQ_\,Sk[ZxjNPS|gYd
\{h`bo¡v\Ye

[kd~\gghY(d_7NPmR\[kQ,q
dmRQ@d,O[(v7QmRd,Y(Q@[kQ_WvVNPWZ\,`hgY(dd,OS2\Y(Q@NPVWZ`fTe7Q_eENPVR\ghgQ_VheNPWXQ_SNPVRd,Ye7QZY9[kdymR\w,Q[(v7Q@{dpe7o
d,O&[(v7QEgh\gQZYmEd,Y(QEY(Q_\,e\{j`bQ,qE@dc2QZ,QZY_x)SkdmEQEghY(dd,OSOY(dmªd,[(v7QZYgh\gQZYS\Y(QRS(w,QZ[(Wv7Q_e§NPV [(v7Q
{deo4d,O|[(v7Q¡gh\gQZYyNfV¦d,YeQZYy[kd4mEd,[(NPG\[kQ¡{d,[(vn[(v7QYQ_S(T`b[(Sy\,Ven[(v7Q¡gY(dd,OSyV7QZc@`Po4gY(Q_SkQ_V[kQ_e
v7QZY(Q,q

=)C;>?@&F

KæKLH F å

ád,[kQ[(v\[¡Ä2S¡\Y(QNPVåO\,WX[¡SkgQ_WZNP\,`|WZ\,S(Q_Sd,OsÅÄ2SZq|vQWXdmEgh`PQXpNb[oàd,OijVeNfV7l1\,Ve
\ggYd_7NPmR\[(NPV7l¡d,g[(NfmR\,`+gd`fNPWZNbQ_Se7QZgQ_VeSdV4[(v7QEd,{hS(QZY(G\{jNP`PNb[o/d,O9[(v7QRS(oSk[kQ_m/xSkdudT7YY(Q_ST`b[(S
\Y(QUS(QZl,Y(QZl\[kQ_e3{od,{hSkQZY(\{hNP`PNP[o,qd
c&QZ,QZY_xhdV7Q$SkQZ[|d,O)e7QXijVNb[(NPdVSsS(TpWXQ_SZq

21 :H$y}z3É'ÉÅBA;	Ð|ByDC·	É
Ï

CFE  z|z~v:üy{~0|B|B|

$y{Ñ3~

ðgh\Y[(NP\,`P`bod,{hSkQZYG\{h`PQ\Y(w,d
e7Q_WZNPS(NPdV~gYdWXQ_S(SsÅÄs9eQ_S(WXYNb{Q_S9\yWXdV[kY(d`P`bQ_e¡Sk[kdpWv\,S([(NPW

G

SkopSk[kQ_m{o~NP[(S9Sk[(\[kQ_S*\,Ve[(v7QWXdVSkQ_T7Q_VWXQ_S&d,O\,WX[(NbdVS2dV[(v7QS(oSk[kQ_m/q;r[&NPS9e7Q_Vd,[kQ_e\,S&\$[(T7gh`bQ
í

HJILK / INMOIQPOINRSIUTINVxhc@v7QZYQ
W H xMÈ\,VeXPÈ\Y(QijVhNb[kQSkQZ[(S*d,O


¶ ½L¬½² ¶ x)¬ ´ ½ µ ¯· ¶

DY
ø

\,Vhe¦¯Á ¶ ²X­¾°G¬,½ µ ¯· ¶ ]

ÔC

Ëv·hûûË7ü3ÍÌQhýÍ{Í.Î þL8$>Î$ÿ{Ë3
ú

W K /[Z HÚNPSs[(v7Q µ · µ ½ µ ¬¿ ¶ ½L¬,½²]
W &R }\H^]_M]`Hbadc .eI_SfNPS)[(v7Q ¶ ½L¬,½²½­k¬· ¶¾µ ½ µ ¯·õ¾âp· ´ ½ µ ¯·xc@v7QZY(QRZK\IUg
ILKDhb)NfS;[(v7Q*gY(d,{j\{hNP`PNb[o
[(vh\[Sk[(\[kQOK h NPSY(Q_\,Wv7Q_e4OY(dm
Sk[(\[kQOKRdV4\,WX[(NbdVignO!d,YQZ,QZYojK Z Hz\,Vejg Z M]^Q_NP[(v7QZY
kml"n3o*pqZR KrIUgqILKDbh  í xhNbO+\,WX[(NbdVXgWZ\,V/{Q\ggh`fNbQ_edV/Sk[(\[kQsKx7d,YkltnuovpqRZK\IUg
ILKDhb í .]
W T }/HwaxP NPS&[(v7Q¯Á ¶ ²Z­°¬,½ µ ¯·$õ¾âp· ´ ½ µ ¯·x7cv7QZY(Q97T K 2NPS9[(vQd,{jSkQZY(\[(NbdV¡mR\,e7QNPVS([(\[kQyKx (
V }qHz]^M5a|{ NPS[(v7Q¡­(²X÷9¬­k±yõâp· ´ ½ µ ¯,·x^c@v7QZYQsV KrIUpg NfS[(vQEY(QZc&\Ye l\,NPV7Q_e {o3[(\wpNPV7l
W 3
\,WX[(NPdVX
g NPVuSk[(\[kQsK q
rãO|Sk[(\[kQ_SE\,Ve§d,{hSkQZY(\[(NbdVS\Y(Q¡NPe7Q_V[(NPWZ\,`x)NqöQ,q}P
H \,Ve~3
©
T NPSU[(v7QNfe7Q_V[(NP[o4OTVWX[(NbdVÚd,Y
í
\{hN k
 Q_WX[(NbdVjxh[(vQ_V/[(v7QÄðNPSWZ\,`P`bQ_e~õâp¿¿Àu¯Á ¶ ²X­¾°G¬ÁZ¿b²ZqV7d,[(v7QZYSkgQ_WZNP\,`WZ\,S(QyNPSUâp·j¯Á ¶ ²X­¾°G¬ÁZ¿b²

«3º» ¶ xc@v7QZY(Q*[(vQ@SkQZ[d,Od,{hSkQZYG\[(NbdVhSWXdV[(\,NfVSdV`PoUdV7Q|Q_`PQ_mEQ_V[ZxNqöQ,qNPVQZ,QZYoRSk[(\[kQ@[(v7QS(\,mEQ
d,{hSkQZYG\[(NbdV3NPS*mR\,e7Q,xh\,Vheu[(v7QZY(QZOd,Y(Q[(v7Qd,{jSkQZY(\[(NbdVuOTVWX[(NbdVuNPS@WXdVSk[(\,V[Zq

H]Hà[(\{h`PQ_SZxdVQOd,Y&Q_\,Wvu\,WX[(NbdV>q2@dc2QZ,QZY_x7c&Qc@NP`P`
\,`PSkd1ehNPS(WZTS(SymEd,Y(Q/STWZWZNPVWX[EY(QZghY(Q_SkQ_V[(\[(NbdVSZ}uNPVngh\Y([(NfWZT`P\Y_x@½÷9¯,³P¸qp
 ¬ ¶ ²½²@ ¸7¯­t¬,¿< ¬À² ¶ ·²_½ ¶

 |Çsáqh|v7Q_S(Qc@NP`P`j{Qe7QXijV7Q_euNfV3Q_WX[(NbdV3Ýq
2132 H: ~vÉ'z z|3#ÄH: yv7 ~vy{Êñ3 |
ád,YmR\,`P`Po,xÄ9Ss\Y(QY(QZgY(Q_S(Q_V[kQ_e{o

ägd`PNPWXo4e7Q_SWXYNb{Q_SUv7dcÈ[kd \,WX[Ee7QZgQ_VehNPV7l/dV§d,{hSkQZY(\[(NbdVS_qÃ4Q/eNfSk[(NPV7lTNfS(v [(v7Y(QZQ[ogQ_S$d,O
gd`PNPWZNbQ_S_q

W

 l


¶ ½L¬,½ µ ¯·j¬,­ÀR¸p¯¿ µ´ À
[kd\,V3\,WX[(NbdV>q

_GëNPS\OTVWX[(NbdV^ l &} P-aMx>mR\gghNPVl~Q_\,Wv d,{jSkQZY(\[(NbdV

Od,Y

½ µ ~
 ²X³k±²ã¸7²X·j±²X·h½$¸p¯,¿ µ´ Àq NPS\ OTVhWX[(NbdVq§
 }OP] a M xUmR\ggjNPV7lQ_\,Wvëgh\,NbY
 d,{jSkQZY(\[(NbdV>x[(NPmRQ*2[kd~\,V3\,WX[(NbdV^q
W  µf¶ ½L¯­¾ÀG³k±²ã¸7²X·j±²X·h½h¸p¯¿ µ´ Ày
@NPS+\@OTVWX[(NPdVyq}eP<aMx,mR\ghghNPV7l|Q_\,WvyijVNb[kQ&SkQ_T7Q_VWXQ

W



d,O)d,{hS(QZY(G\[(NPdVS*[kd~\,V/\,WX[(NPdV>q

ád,[(NPWXQu[(v\[Zx2O!d,YE\,VàTV7d,{jSkQZY(\{h`bQÄ|x\ vNPS([kd,Y(oaeQZgQ_Vhe7Q_V[$gd`PNPWXo1NPSyQ_TNb\,`bQ_V[y[kd1\
[(NPmEQXaeQZgQ_Vhe7Q_V[sdV7Q,q
Ö@Q_WXQ_V[\,`bl,d,YNb[(vm~NPW¡e7QZ,Q_`bd,ghmEQ_V[Rv\,SRNfVWZ`PTe7Q_e¥WXdVSNPe7QZY\[(NbdV¥d,OijVhNb[kQumEQ_mEd,Y(ongd`PNPWZNbQ_S
\,Sc2Q_`f`s\,VSkQ_V^x)_,,G{x_,,\p]?MThSkQ_V\pxMNxpNb[k[(NfV7l,QZY_xhÃ4Q_`f`PSZx^äd`PeS(m~Nb[(v>x?_,,]+3Q_Th`bQ_\,T>x

$NPm/x&$\Q_`P{h`PNPV7l7xäs\,S(S(\,VeY\px;_,,]?Q_T`bQ_\,T>x>+Q_S(v7wpNPV>x0$NPm/x$\Q_`b{j`PNPV7l7x+_,,]?+Q_S(v7wpNPV>x
Q_T`bQ_\,T>x>%U
$ \Q_`b{h`PNPVl7x_,,]^\,VhSkQ_V4 Û7Q_Vl7x0(././p. ]+U$ NPmuxjÄQ_\,V>x^3Q_Th`bQ_\,T>x0(././. q@v7Q_SkQ
\Y(Q/gd`PNfWZNbQ_Sy[(v\[R\Y(Q3\,`P`Pd
c&Q_eSkdmEQuiVNb[kQu\,mEdTV[Ed,OmEQ_mEd,Y(o]|S(TpWZNPQ_V[E\,`P`bdc&\,VhWXQ_SRc&dT`Pe

Q_V\{h`PQS(ThWv¥\gd`fNPWXo4[kd4S(NPmyT`P\[kQ¡\3OT`P`&vNPSk[kd,Yoae7QZgQ_VeQ_V[gd`PNfWXo4d
,QZY~\ijVNP[kQv7d,YNPÆZdV>x;d,Y

kTheNPWZNbdTS`bo,qÅV7Q3\YNP\,V[
d,OijVNb[kQumEQ_mEd,Yo¦gd`PNPWZNbQ_S_xc@vNPWvnc2Q/WZ\,`P`)õ¾­(²²y· µ ½²~²E¯,­À/¸p¯¿ µ´_µ ² ¶L ipQ_SE[(v7Q/\,mRdTV[Ed,O
mEQ_mEd,Yo ¬¸j­ µ ¯,­ µ q
d,Y(Q O!d,YmR\,`P`bo,x@\nOY(QZQijVNb[kQ mEQ_mEd,Y(oågd`fNPWXoàc@Nb[(v [(v7QijVNb[kQ SkQZ[
d,OUmRQ_mEd,Y(o S([(\[kQ_S
Od,Y~&ÅÄ%G
H9INMOIQPOINRSIUTINVENPSE\ OTVWX[(NbdVw&à}P]
a M] x2m~\gghNPV7l Q_\,Wv
í
 S¡q¢¤£L¥"¦0¥"§(¨L¥&©m¨Qª¬«®­v¯°£Q±v²¦³"´Q¨L¥"«®£Q­v²1µD³"£S±(¨L±v«®¶®«®²·¥"«¹¸º¨Q¶®¶¼»J½*£¦º²1­*£Q¥&¨S½*½J¨L­»<µ/£N¾1¦³
¥"£À¿ÁÃÂq²º¡qÄ6­»µD³"£S±(¨L±v«®¶®«®²·¥"«¹¸º¨Q¶®¶¼»
£S±*²¦³"´Q¨Q±v¶®¦¤¿ÁÃÂ¸N¨L­J±/¦+¥"Å*³"­*¦N½«®­¥"£}£S­v¦+¾+«¼¥"§½D¦¥"¦³"©«®­v«®²·¥"«®¸+£S±*²¦³"´S¨U¥"«®£S­v²
¾+«®¥"§m£Q­v¶¼»m¨Ãµ/£S¶¼»D­v£Q©«Æ¨L¶(«®­v¸³"¦º¨Q²¦
«®­«¼¥"²+²«®Çº¦S¡
gQZYv\ghS\¦[(NfmEQXae7QZgQ_Ve7Q_V[Rgd`PNPWXo,x*d,Y[kdnThSkQ`bQ_SSmEQ_mRd,Y(omEd,Y(Q

vÈ
ø

Ð 38·?Ñ>Ò©Ëv{v8Ì¨Í.Î·Ò^ÑjÓÔ

$33Ò$3

 d,{hSkQZYG\[(NbdV^x&mEQ_mRd,Y(onS([(\[kQ*gh\,NbY~[kd¦\ gh\,NbY  \,WX[(NbdV^xsmRQ_mEd,Y(o¥Sk[(\[kQ*q
 WZ\,V/{QSkQZQ_V3\,S\yijVNb[kQ/¢kS(WXY\[(Wv£mEQ_mEd,Y(o,q

@v7Q/SkQZ[Rd,OmEQ_mEd,Y(o

Sk[(\[kQ_S

Û7YQZQiVNb[kQ@mEQ_mRd,Y(oRgd`PNPWZNbQ_S9WZ\,V\,`fSkd$S(Nfm$T`f\[kQSk[(\[(NbdVh\Y(oRgd`PNPWZNbQ_S_]\,`P`v\YeV7Q_SSY(Q_S(Th`b[(SOd,Y

Sk[(\[(NbdVh\Y(ogd`PNfWZNbQ_S\ggh`bo[kduO!Y(QZQRijVNb[kQmEQ_mEd,Y(ogd`PNPWZNbQ_S\,Sc&Q_`P`qEÇ&Q_WZ\,TSkQ~dV7Q~WZ\,V1WXdVSNPe7QZY
\¥OY(QZQ ijVNb[kQ mEQ_mEd,Yo



X Ê

H#]w


gd`PNPWXoà[kdå{Q4\àSk[(\[(NPdV\Y(oågd`PNfWXod
,QZY[(v7Q1Sk[(\[kQ¦Skgj\,WXQ

( UÉ µ ½À

â¸¸7²Z­§Á(¯âp·j± å
¶ ¹ã´ ¯ ¸j¿P²
· µ ½² ~² R¯­¾Àu¸p¯¿ µ´Zµ ² ¶

´ ¿b¬ 
¶ ¶
÷2²X¿¿

ÌË

~²Ê~Á²X­ ¶  µ ¸©­k² ¶ âp¿½ ¶¼

õX¯,­

x¬,¿!¿

¯ ·j¬­¾À4¸7¯¿ µ´Zµ ² ¶ p¯¿±õZ¯­õ­(²²
¶ ½L¬,½ µ 
|v7Q/\,eG\,V[(\l,Q_S~d,OOY(QZQuijVNP[kQ¡mRQ_mEd,Y(ongd`fNPWZNbQ_S\ggQ_\YRNPV

¬ ¶
[(v7Q3WXdVhSk[(\,V[(Sd,O[(v7Q/\,`bl,d,YNP[(vmRSZxs\,VeNPVàS(gQ_WZNf\,`x9gYd,{h\{h`bon`P\Y(l,Q,x*S(T7{>WZ`P\,S(S(Q_Sd,OsÅÄ2SZx
c@v7QZYQ@\ijVhNb[kQ|\,mEdTV[9d,O^mEQ_mRd,Y(oES(TpWXQ_S2O!d,Y&\,VRd,g[(NfmR\,`gd`PNPWXo,q)|v7QmR\ÆZQNPVhSk[(\,VWXQ_S9STWv\,S

/'

W
s\,`P`PTm/×ØS|mR\ÆZQW
s\,`P`fTmux^_, ]MNb[k[(mR\,V^x_,Gñ|\YQ$S(TWv/QX7\,mEgh`bQ_S_}9W
*\,`P`PTmu×ØS@mR\ÆZQ
Y(Q_TNbY(Q_SsdVh`bo{jNb[*d,O+mRQ_mEd,Y(o[kdEijVeu\,V3d,g[(NPmR\,`gd`PNPWXo,q

JG

HJILK / INMOIQPOINRSIUTINV*{Q\~&ÅÄ|q
ä½­k¬ºÍ_² ´ ½L¯,­À;4
Î ¯tõ$¿b²Z·Ï½ ÐôõZ¯­G NfS@\~S(Q_T7Q_VhWXQUd,OSk[(\[kQ_S[Î ízÑ / I Ñ ( I Ñ - IÒÒÒ*I ÑÓ ÐÕÔB.px
*
H
*

@
c
h
v
P
N

W

v
k
S
(
[
\Y([(Sc@NP[(v3[(v7QNPVNP[(NP\,`Sk[(\[kQd,O×
G x^NqöQ,q Ñ / í K / qÃ4QRThSkQyØ0ÙpKG|[kdue7Q_V7d,[kQ[(v7Q
ÑÖ Z
SkQZ[|d,O)`bQ_V7l,[(v7aÚ¡
 [kY\*k Q_WX[kd,YNbQ_S|cvNPWv¡Q_Vhe/NPVuSk[(\[kQK q
|vQuQXgQ_WX[kQ_eYQZc&\Yed,{[(\,NPV7Q_eNfVàSk[(\[kQ^
K \O![kQZYQXp\,WX[(`Pow
 Sk[kQZghSRTVhe7QZYEgd`PNPWXoð
 NfSE[(v7Q
Y(QZcs\Ye/d,{h[(\,NPV7Q_e3NfVU
K {o¡[(\wNfV7l~[(v7Q$\,WX[(NbdVS(gQ_WZNbihQ_e¡{o) xjc2Q_Nblv[kQ_e{o¡[(v7Q$gY(d,{h\{hNf`PNb[o~[(v\[
K NPS*\,WX[(T\,`P`boY(Q_\,Wv7Q_e3\O[kQZYu S([kQZghSZx
$
 NPS&\ySk[(\[(NbdV\Y(o
W V KrIL&IU  í V KrIU ·pT K kk
Û +ÌÝÞSß¼à¼à¼à ß Ý¬Ü á!0 o*â á+ l 0vã ÖuÙ ä ( XR  ÑqÖå ( IU ·7T  ÑqÖå ( kQI ÑÖ x7NbO0
MQZ[

í



gd`PNfWXo,x

Ü oDâ l ÖçÙ ä ( ZR  Ñ Öå ( IU·T7 ÑÖå ( QINèéz
QI ÑÖ x&NbOJÚNPSE\
+æÝ Þ ß¼à¼à¼à ß Ý¬á!0
á+ 0 ã
[(NfmEQXae7QZgQ_Ve7Q_V[*gd`PNPWXo,x7\,Ve
W VKrIL&IU í +ÌÝ Þ ß¼à¼à¼à ß Ý Ü á 0 oDâ á + l 0 VKrIU·T7 Ñ / 
ÛÛÛQT7 Ñ ÙkkÃÛ ã ÖçÙ ä ( RZ Ñ Öå ( IU·T7 Ñ / 
ÛÛÛQTp Ñ Öå ( kQI Ñ Ö x
NPO¤4NPS*\~vNPSk[kd,Y(oae7QZgQ_Ve7Q_V[sgd`PNPWXo,q
W VKrIL&IU

í

VKrIU·TpKQILkmÛ

©sÅÄðm~\_o/{Q_v\
,QyeNbòQZY(Q_V[(`bo/TVhe7QZY@d,g[(NfmR\,`gd`PNfWZNbQ_S*Od,YQ_\,Wv[ogQyd,Ogd`PNPWXo,q|v7Q

Q

T\,`PNb[oud,O2\gd`fNPWXouNPSe7QZ[kQZYmRNPVQ_e/{o3Nb[(S@¸7²X­õZ¯­ R¬· ´ ²Xx?NqöQ,qj{o/[(v7QQXpgQ_WX[kQ_eYQZc&\YehS\,WZWXYT7Q_e
{o NP[ZqRÃ4QeNfSk[(NPV7lTNfS(v3{QZ[c2QZQ_V§eNòQZY(Q_V[gQZY(Od,YmR\,VhWXQRmEQZ[kYNPWZSOd,Y$sÅÄ2S[(v\[UYTV Od,Y$\
ijVNP[kQVTm${QZY*d,O)S([kQZghS|\,Veu[(vdSkQ[(v\[|YTVuNPVe7QXiVNb[kQ_`bo,q

t uê
S

G
Àë G-ë

 ·GìIU
å
(
ÜFÖuí îä / í Ü lUo*p 7V KrINèUIUq@LÅ[(vQZY&c&d,Y(wR\,S(STmEQ_S2[(v\[2[(vQv7d,YNbÆZdV~NPS¸p¯¿À^Uë G,ëöx7NPVhSk[kQ_\,e~d,O
ë G-ë q2@vNPSse7dQ_S|V7d,[@Wv\,V7l,Q[(v7Q$WXdmEgh`bQX7Nb[od,O;\,Vod,O)dT7Y|gYd,{h`bQ_mRSZq
W @v7Q3NPVpiVNb[kQXav7d,YNPÆZdV ½L¯½L¬¿± µ!¶X´ ¯âp·h½²(±3¸²X­õX¯­SR ¬· ´ ² lNb,Q_SY(QZcs\YeSEd,{[(\,NfV7Q_eàQ_\Y`PNPQZY~NPV
[(vQ3gY(dpWXQ_S(S\¦vNblvQZYRc2Q_NPlv[[(v\,Vå[(vdSkQ3d,{[(\,NfV7Q_eå`P\[kQZY
qÚÛd,Y.ïð-ï
x*[(v7Q[kd,[(\,`
ð^aeNPS(WXdTV[kQ_euY(QZcs\Ye/NfS|e7QXijV7Q_eu\,Ss¸7²X­õ1ñuò ·GIU  í ÜÖuó ä / Ü lNovp ð Ö ÛV K\INèUIU q
W @v7QNPV7ijVNb[kQXav7d,YNbÆZdV/¬°²Z­t¬DÏ ²s¸7²X­õX¯,­QR ¬· ´ ²Nf- S9[(v7Q`PNPmRNP[;d,O^\,`P`hYQZc&\YehSd,{( [(\,NPVQ_e~c@NP[(vNPVç
S([kQZghS@eNPNPeQ_e~{o¡ç;x7O!d,Y|ç4l,dNfV7lE[kd~NPVpiVNb[o} ¸7²X­õ&ôL
õ ·GìIU  í `PNfm÷ö/ø ó ö ¸7²X­õÊh ·GkI çÃIU q
ù¬¡qúû¥"§v«®²+¶®«¹©«¼¥6«®²+­v£Q¥6½D¦ü(­*¦N½rý¬¥"§*¦°µ/¦³ûÌ£L³"©m¨Q­*¸º¦Ã«®²¤½D¦ü(­*¦N½9¨L²6¨¶®«¹©O«®­*ûº¡
W

9

@v7Q 9· µ ½²Z³ p¯­ µ ¯,·/¸7²Z­!õZ¯­ R¬· ´ ²¡¯kõ¬¸p¯¿ µ´ À ¦Od,Y&ÅÄ
NPS[(v7QQXpgQ_WX[kQ_e S(Thmïd,O
YQZc&\YehS>Y(Q_WXQ_Nb,Q_e$eT7YNPVl&[(vQ)ihYSk[
XSk[kQZghS{oOd`P`bd
cNPV7ls[(v7Qgd`PNPWXo )xGNLqöQ,qbxZ¸7²Z­!õ 
 í

ø
ø

ÔC

Ëv·hûûË7ü3ÍÌQhýÍ{Í.Î þL8$>Î$ÿ{Ë3
ú

`bQZ[ÿë
þ {Q\,Vogd`PNPWXon[ogQ,x*Q_NP[(v7QZY
þ9³ã°G¬,¿âh²~G\,` ^·Gêd,O<G TVhe7QZY[(v7Q
mEQZ[kYNfW@WvdSkQ_Vj2NPS2[(v7Qm~\GpNPm~\,`gQZY(Od,YmR\,VWXQd,O\,Vo~gd`fNPWXo3d,O^[ogQ[þ4Od,Y<GxpNqöQ,q\,` >·Gê í
mR\G o
¸7²Z­!õ;·GìIUxc@v7QZY(Q
uNPS*[(vQSkQZ[|d,O;\,`P`0þngd`PNPWZNbQ_SZq
Û+d,YS(NPmEgh`fNPWZNb[o,xhc2Qy\,S(S(TmEQ$[(v\[[(v7Q$S(NPÆZQë G-ëpd,O9\&ÅÄG
NfS@e7QZ[kQZYm~NPV7Q_e/{ou[(v7QyS(NbÆZQ
MQZ[R¸7²Z­!õð{Q3\,Vod,O[(v7Q_S(QgQZY(Od,YmR\,VWXQmEQZ[kYNPWZSZx|\,Vhe

Sk[(\[(NbdVh\Y(o,x[(NPmRQXae7QZgQ_Ve7Q_V[Zx>d,YUvNPSk[kd,Yoae7QZgQ_VeQ_V[Zqy|v7Q









	



ç1d,ONb[(SSk[(\[kQSkgh\,WXQ,q*Ã4Q\,S(S(TmEQ$[(v\[@[(vQZY(Q$\Y(QyV7dmRd,Y(Q$\,WX[(NbdVhS|[(v\,VSk[(\[kQ_SZx\,Ve/[(vh\[Q_\,Wv

Sk[(\[kQy[kY\,VS(NP[(NbdVugY(d,{j\{hNP`PNb[oNPS@lNb,Q_V\,S\~{hNPV\Y(oOY\,WX[(NbdV/cNb[(vuç¦{jNb[(S|\,Ve3Q_\,WvY(QZcs\Ye3NPS\,V
NPV[kQZl,QZYUd,O*\[$mRdSk[çà{hNb[(S_q|vNfSNPSV7d/Y(Q_\,`9Y(Q_Sk[kYNfWX[(NbdV>xS(NfVWXQR\,eeNPVl/TV7Y(Q_\,Wv\{h`bQ1¢keThmRmUop£
Sk[(\[kQ_S/\,`f`bd
c@S¡dVQ[kdThSkQ4mEd,Y(Q4{hNb[(SOd,Yu[kY\,VS(NP[(NbdVåghY(d,{h\{hNP`fNb[(NbQ_S~\,VheÚY(QZc&\YeSZq`PSkd7xNb[uNPS
Sk[kY\,NPlv[kOd,Y(cs\Ye¦[kd [kY\,VhSkO!d,Ym

·GìIL

Y(QZcs\YeSSTWv[(v\[9G\,`>

·GILq

\,Ve/Vd,[*dV/\,`^

Ã4QWXdVS(NPe7QZYUgY(d,{h`bQ_m

G c@Nb[(vnV7dVpaNPV[kQZl,QZYY(QZcs\YeS$[kd^Gìhc@Nb[(vnNPV[kQZl,QZY
Û\,` ^·G h IL+Od,YSkdmEQWXdVSk[(\,V[ e7QZgQ_VeNPVl@dV`boydV3·GìIL

\&ÅÄ
í







NfVSk[(\,VWXQ_SU[(v\[U\Y(QRYQZgY(Q_SkQ_V[kQ_e¦NPV¦\/Sk[kY\,Nblv[kOd,Y(c&\Ye1cs\_o,q¡ésÅa

]3ç¦[(\{h`bQ_SOd,Y[(v7Q$[kY\,VS(NP[(NbdVuOTVWX[(NbdVndV7Q

ÄÚcNb[(v/ç¦S([(\[kQ_SNfS@Y(QZghY(Q_SkQ_V[kQ_e3{o/\~SkQZ[d,O;ç

[(\{h`bQEOd,YQ_\,Wv§\,WX[(NbdVj\,Ve4\uSNPmRNP`P\Y[(\{h`bQEOd,Y[(v7QEY(QZcs\Ye4OTVWX[(NPdV\,Vhe O!d,Y[(v7QEd,{jSkQZY(\[(NbdV
OTVWX[(NbdV>q?Ã4Q*\,S(S(TmEQ&[(v\[+[(v7QsVTm${QZY?d,Oj\,WX[(NbdVS)\,Ve$[(v7Q&VTm${QZYd,O{hNP[(S?V7QZQ_eQ_e$[kdSk[kd,Y(QsQ_\,Wv

Ù

[kY\,VSNb[(NbdVgY(d,{h\{hNf`PNb[od,YsY(QZcs\Ye¡e7dQ_S*V7d,[2QX7WXQZQ_euç;xpSkdES(TWv\yY(QZghY(Q_SkQ_V[(\[(NbdVY(Q_ThNbY(Q_SRç * 
{hNb[(S_q|vhNPSWZ\,V{QmEdehNihQ_e/[kdu\,`P`Pd
cÜç

{hNb[(Sc@Nb[(v7dT[Wvh\,V7lNPV7l[(v7QWXdmEgh`bQX7Nb[o3Y(Q_S(T`b[(S_q/rtV

[(v7Q|S(\,mRQ&cs\_o,xSk[(\[(NbdV\Yo$gd`PNPWZNPQ_S?WZ\,VE{Q&Q_VWXdpe7Q_eE\,S`PNPS([(S?cNb[(vyçQ_V[kYNbQ_S_x\,Ve[(NPmEQXae7QZgQ_VeQ_V[

i]uç4[(\{h`PQ_SZq

gd`PNPWZNbQ_S&Od,Y@v7d,YNPÆZdVuç1\,S*ç

Û7d,Y*Q_\,Wv¡[ogQd,OsÅÄ@xQ_\,Wv¡[ogQd,O^gd`PNfWXo,x\,VeQ_\,Wv¡[ogQd,O^gQZY(Od,YmR\,VWXQmEQZ[kYNPW[(v7Q

Ê

°G¬,¿âh²|¸j­k¯ÁX¿P² ªNPSZx

C

z 


\u&ÅÄ|x?\¡gQZYO!d,Ym~\,VWXQRmEQZ[kYNPWu!ijVhNb[kQXav7d,YNbÆZdV^x^[kd,[(\,`eNPSWXdTV[kQ_e^x^d,YU\_,QZY\l,QgQZYka
Od,YmR\,VhWXQxj\,Veu\Egd`PNfWXo~[ogQ~Sk[(\[(NbdV\Yo,xh[(NPmEQXaeQZgQ_Vhe7Q_V[Zx7d,YvNPSk[kd,Y(oae7QZgQ_Ve7Q_V[x

3ÉÐÉ·}

[(v7QR\,`PT7QEd,O&[(v7QR{Q_Sk[gd`PNfWXo3d,Os[(v7Q~SkgQ_WZNijQ_e[ogQ~ThVe7QZY[(v7QRlNP,Q_V1gQZY(Od,YmR\,VWXQ

mRQZ[kYNPWq

UÉ µf¶ ½²X·

|v7Q¸7¯¿ µ´ À/²

Ê

´ ²*¸j­t¯ÁX¿P²

NPSZx

C \RsÅÄ@xh\gQZY(O!d,YmR\,VWXQmEQZ[kYNfWx\,Ve/\Egd`PNPWXo[ogQ,x
ÄÐzÄÐ c@v7QZ[(v7QZY[(v7QE\,`PT7Qyd,O2[(vQy{Q_Sk[gd`PNPWXoud,O&[(v7QESkgQ_WZNihQ_e[ogQRTVe7QZY[(v7QElNb,Q_V gQZY(Od,Yka
m~\,VWXQUmEQZ[kYNfWNPS*l,Y(Q_\[kQZYp
.q
z 



)C

â¨çHK

èaã2KKµæ

rtVghY(QZNPdTS&c2d,Y(w )\gh\,eNPmRNP[kYNbdT¡ë|S(Nb[(S(NPw`PNfSZxh_,,Ùx_,]hTVehv7Q_V7wx7d`feS(mRNb[(v^xë`P`bQ_Vpa

+(././.p];\,e\,VN)QZ[\,`qbx9_,,x)Nb[cs\,S

e7QZY_x_,];TVevQ_V7wjx?d`PeS(mRNP[(v>x>MTSkQ_Vh\pxä`f`bQ_Ve7QZY_x

S(v7dc@V¡[(v\[*[(v7Qgd`PNfWXoEQXpNPS([kQ_VWXQgY(d,{h`PQ_méNfS*WXdmEghT7[(\[(NbdVh\,`P`bo~NPV[kY\,WX[(\{h`PQO!d,Y|mEdS([*G\YNf\[(NbdVS
d,O&ÅÄ9S_xhd,Y@QZ,Q_VTVeQ_WZNPe\{h`bQOd,YSkdmRQ$NPVpiVNb[kQXav7d,YNPÆZdVuWZ\,SkQ_SZq|Û7d,YQXp\,mRgh`bQ,xhc&Q$Sv7d
c&Q_e
[(v\[[(v7Q¡Sk[(\[(NbdV\Yo¦gd`PNPWXo4QX7NPSk[kQ_VWXQgY(d,{j`bQ_mRS$O!d,YE&ÅÄ9Syc@NP[(v¦d,YEc@NP[(v7dT7[$VQZl\[(Nb,QuY(QXa
cs\YeS\Y(QRá;aWXdmEgj`bQZ[kQ,q&dmEghT[(NPV7l¡\,V4d,g[(NPmR\,`)gd`PNfWXo3NPS\[U`bQ_\,Sk[\,SUv\Ye4\,Se7Q_WZNfeNPV7l[(v7Q
QX7NPSk[kQ_VWXQgY(d,{h`bQ_m/qrtVSk[kQ_\,e§d,O|\,SkwpNPV7lO!d,Y\,V¦d,gh[(NPmR\,`gd`PNfWXo,xc&QmRNPlv[cNPS(v1[kdWXdmEghT7[kQ¡\
gd`PNPWXo4[(v\[ENPS$lT\Y\,V[kQZQ_e¥[kd4v\_,Q/\\,`PT7Q[(v\[ENPSy\[`PQ_\,Sk[E\`P\Yl,QOY\,WX[(NbdVnd,O|[(vQd,gh[(NPmR\,`
\,`PT7Q,q

ø

Ð 38·?Ñ>Ò©Ëv{v8Ì¨Í.Î·Ò^ÑjÓÔ

$33Ò$3

WXdmEghT7[(NfV7l4S(TWvå\4V7Q_\Y`bo§d,g[(NPmR\,`sgd`PNPWXo§NPSEWZ\,`P`bQ_e\,Vw_
a
ï
x?c@v7QZY(QRNPVheNPWZ\[kQ_S[(v7QET\,`PNb[o3d,O&[(v7QE\ggY(d
pNPm~\[(NbdV4NPV[(v7Q
Od`P`bd
cNPV7lc&\
o,q9M^QZ[
{Qs\gd`PoV7dm~NP\,`aL[(NPmEQ&\,`bl,d,YNb[(vhmëc@vNPWv$Od,YQZ,QZY(oEsÅÄG
WXdmEgjT7[kQ_S
\,V^þ^aLgd`PNPWXo ·Gëq|ád,[(NPWXQy[(v\[@¸7²X­õ)·GìI ·ë
G k G\,` ·ê
G |O!d,YQZ,QZY(oX
G q||v7QU\,`bl,d,YNb[(vm
NPS*WZ\,`P`PQ_e/\,V³k¬¸¸­t¯¬É µ R
 ¬,½ µ ¯·¥NbOOd,Y|QZ,QZY(ousÅÄG x
G\,` ·ê
G ¤ 
é ¸²X­õ)·GìI y·ê
G k FOÒ
G\,` ^·ë
G 
ïgd`boVdmRNP\,`aL[(NPmRQ\,`bl,d,YNP[(vm

y.

\ggYd_7NPmR\[(NbdVàOd,Y







!

"

%

#

$

%

!

%
%

% 
%

#

%

%

LQZQ,x?Q,qöl7qbx+)\gh\,ehNPmRNb[kYNPdT>x;_,Gñ3Od,YmEd,Y(QRe7QZ[(\,NP`PQ_e4e7QXijVNb[(NPdVSZq¦@gghY(d_7NPmR\{hNf`PNb[o/ehNPSk[(NPVpa

`Za\ggYd_7NPmR\{h`bQOd,Y@\,`P`1x7Od,Y
WXQZY([(\,NPVOxd,Y9Od,Y9V7dyTV`bQ_SS; í á&qád,[kQ@[(v\[9[(vNPSe7QXiVNb[(NbdVyd,O0Z
 a\gghY(d_7NPmR\[(NbdVRY(Q_ThNbY(Q_S
[(v\[G\,` ·Gê9Ô.pqrãO\gd`fNPWXo¡c@Nb[(v/gdS(NP[(Nb,QUgQZY(Od,YmR\,VWXQUQXpNPS([(SZxj[(vh\,VQZ,QZYo3\ggY(d
pNfmR\[(NbdV
\,`bl,d,YNP[(vm
opNbQ_`PehS|S(TWv\~gd`PNPWXo,x{Q_WZ\,ThSkQ$\gd`PNPWXo¡c@Nb[(v3gQZYO!d,Ym~\,VWXQ÷
. d,YS(mR\,`P`bQZYWZ\,VV7d,[\g7a
lTNPSv7Q_SsáaWXdmEgh`bQZ[kQghY(d,{h`bQ_mRS_}+|vQZY(Q\Y(QgY(d,{h`PQ_mRS&c@vNPWv\YQ
#

gY(d
pNfmR\[kQ\Ugd`fNPWXo$cNb[(vRgdS(Nb[(NP,Q|gQZY(O!d,YmR\,VWXQ,q)@Q_VWXQ,x7\,VoR\ggY(d
pNfmR\[(NbdV~S([kY\,Nblv[kO!d,Y(cs\Ye`Po
Skd`b,Q_S@[(v7Qe7Q_WZNPSNbdV¡gY(d,{h`PQ_muq

iZa\ghgY(d_7NPmR\[(NPdV O!d,Y\Y({jNb[kY\Y(oX .pq$rãO9[(vQZY(QRNPS\
wG \,Ve dT7[kghT7[(Ss\,VZa\ghgY(d_7NPmR\[(NPdVd,O
[(v7Q\,`PT7Q,xjNPVu[(NPmEQgd`bopV7dmRNf\,`>NPV¡[(v7QUS(NPÆZQd,OÃG
[(vQ_V/c&QUS(\_ou[(vQgY(d,{h`PQ_mäv\,S@\»@¯¿ÀG·¯( µ ¬¿³
µ R² s¸¸j­k¯¬É µ R¬,½ µ ¯·
´ p²Ê~² ¹ »
¼ qprãO[(v7Q\,`Pl,d,YNb[(vméYTVhS&NfV[(NfmEQgd`PoV7dm~NP\,`jNfV[(vQS(NbÆZQ
d,OÃG
\,Vhe ( x[(v7QUSWv7Q_mEQ$NPS*\ âp¿¿ÀE»|¯¿À·j¯( µ ¬¿³
 ² &¸¸j­t¯DÉ µ E ¬½ µ ¯· ´ p ²~ ² ¹ )» ¼ q`P`
µ R
V4\ggY(d
pNfmR\[(NbdV4S(Wv7Q_mEQEopNbQ_`PeS\,V

gd`bopV7dmRNP\,`aL[(NfmEQ@\,`bl,d,YNP[(vm
*)

(

'&

[(vh\[&dV¡NPVghT7[2sÅÄ

,+

( )-+

0/

.

d,O[(v7Q9+pSWXdVSk[kYThWX[kQ_e

(

1)

2+

/

( )-+

v7QZYQ\Y(QÛ+2?pSZ]c&QSk[(\[kQ[(v7Q3[(vQZd,Y(Q_mRSNPV[kQZYm~S~d,O2?pS

{Q_WZ\,TSkQ[(v\[*lNP,Q_S|Sk[kY(dV7l,QZY*YQ_S(T`b[(S*NPV¡SkdmRQWZ\,SkQ_SZxh\,Ve¡{Q_WZ\,TS(Qc&Qe7dRV7d,[sQXpgh`PNPWZNP[(`bo~\,V\,`boÆZQ
[(v7QUWXdmRgh`bQX7Nb[o¡NPV¡[kQZYmRS|d,O
.

( q

rãO)[(v7QZY(Q$NfS|\Rgd`bopV7dmRNP\,`baL[(NPmEQ\,`bl,d,YNb[(vm

ÃG  í \,` >·Gêk*c@NP[(v
¬¸¸­t¯¬É µ R¬,½ µ ¯·à¬¿¼Ï¯­ µ ½Ë
5

d,O

5

5

Ô Ô

[(v\[@dT[kghT7[(S@\,V\ggY(d
pNfmR\[(NbdV>x43jxh[kd[(v7Q\,`PT7Q

ébx[(v7Q_V3c2QUS\_ou[(v\[[(v7QgY(d,{j`bQ_mäv\,S@\O³t¬±± µ ½ µ °²
rtV¦[(vQWXdV[kQX[d,O@sÅÄ2SZx)QXpNPS([kQ_VWXQd,O\
 a\,eeNP[(Nb,Q\gghY(d_7NPmR\[(NbdV§\,`bl,d,YNb[(vhm \,Ven\


63

5

9+ \Y(QEd,O[kQ_V4Q_ThNbG\,`PQ_V[ZqE|vNfSm~Nblv[S(QZQ_m

S(T7Y(ghYNPS(NPVl~[kduY(Q_\,e7QZYSc@v7d/\Y(QRmRd,Y(QEO\,m~NP`PNP\Y

c@Nb[(vÚYQZc&\YeWXYNb[kQZYNP\n[(v\[v\_,Q¦iQ_eðTggQZY/\,Veð`bd
c&QZY3{dTVheSdVð[(v7Q1gQZY(Od,YmR\,VWXQ d,OE\
Skd`PT[(NbdV>xOd,YEQXp\,mRgh`bQ,x[(v7QughY(d,{h\{hNP`fNb[o4d,OY(Q_\,WvhNPV7l4\ l,d\,`|Sk[(\[kQ,q¥rtV¥[(v7Q_SkQ/WZ\,SkQ_SZx&[(v7Q¡ipQ_e
{dTVeSdVågQZY(O!d,YmR\,VWXQuc@NP`f`slNb,QeNbòQZY(Q_V[EY(Q_S(Th`b[(SZq

d
c&QZ,QZY_x|c&Q\YQ3\,ee7Y(Q_SS(NPV7l4[(v7QWZ\,SkQ

c@v7QZYQU[(v7QZY(QNPSV7d¬$¸­ µ ¯­ µ T7ggQZY@{dTVheudV3[(vQ$gQZY(Od,YmR\,VWXQ$d,O;gd`PNPWZNbQ_SZxhQZ,Q_V [(v7dT7lv[(v7QZY(Q
\Y(QUWXdmRghT7[(\{h`bQTggQZY&{dTVheS&dVu[(v7QgQZY(Od,YmR\,VWXQd,O)\Egd`PNPWXoO!d,Y@Q_\,Wv µ · ¶ ½L¬· ´ ²

DË

8 x~3y{Ê  ^¯­¦»Â9«º» ¶ ÷ µ ½z·j¯·h³·²tÏ¬,½ µ °²à­k²Z÷9¬­k± ¶ ¬·j± *¬,½u­(²¸­k² ¶ ²X·j½L¬,½ µ ¯,· ¶ â·±²X­
S
· µ ½²X³Ú¯­ µuê ¯·ð½L¯,½L¬¿¯­3½L¯,½L¬¿± µf¶Z´ ¯âp·h½²±  ¬·j± µ ·D· µ ½²X³Ú¯­ µçê ¯·ð½L¯,½L¬¿± µ!¶X´ ¯âp·h½²(±n­(²X÷9¬,­t±~~²Z½³
­ µ´Z¶Lsµ õy½p²X­(²²LÉ µ!¶ ½ ¶ ¬;³t¬±± µ ½ µ °,²R¬¸¸­t¯¬É µ R¬,½ µ ¯·  ½p²X·¦÷2² ´ ¬,·§±²Z½²Z­Q µ ·² µ ·¸p¯,¿À·j¯( µ ¬¿9½ µ ~²
÷°p²_½p²X­y½p²X­(² µ!¶ ¬¸p¯,¿ µ´ À÷ µ ½y¸7²Z­!õZ¯­SR¬· ´ ²÷Ï,­(²(¬½²X­$½p¬· /Ë
: y{~O~q7 |vQ[(v7QZd,Y(Q_m O!d`P`Pd
c@S@O!Y(dm [c&d~O\,WX[(SZ}t
slNb,Q_V\~sÅÄG c@Nb[(vu\,`PT7Q xjc2QyWZ\,V
ü
WXdVSk[kYTWX[\,V7d,[(v7QZY9sÅÄÎ\G
cNb[(vG\,`fT7QÎ°Û
 TSk[;{o$myT`b[(Nbgj`boNfV7l\,`P`Y(QZcs\YeS9NPVy[(v7Q*O!d,YmEQZY
(
&ÅÄ¥{o 7
Î ]> 9ThVe7QZY&[(v7Q_SkQY(QZc&\YemRQZ[kYNPWZS2c2QWZ\,VijVe\y`Pd
c&QZY&{dTVheRdV NPO^Nb[2NPS&V7d,[<.pq
87

/

,9

;:

5

5

5

|vQ|WXdmEghT7[(\[(NbdVRd,Oj[(v7Q`bd
c&QZY{dTVe>x=<xdVR[(v7Q*G\,`fT7Q*d,O

5

eQZgQ_VheS)dVE[(v7Q*Y(QZcs\YeRmRQZ[kYNPWq

Ç&Q_WZ\,TSkQ*[(v7QZYQs\YQ|V7dV7QZl\[(Nb,Q*Y(QZcs\YeSZxNfVUd,YeQZY;O!d,Y)[(v7QsQXpgQ_WX[kQ_eRY(QZc&\Ye$[kd{Q&gdS(Nb[(Nb,QsNPVy[(v7Q
ijVNP[kQXav7d,YNbÆZdVuWZ\,SkQ,x\,V/\,WX[(NbdVc@Nb[(v¡gdS(NP[(Nb,QY(QZcs\Ye3myTSk[*{Q[(\w,Q_Vc@Nb[(vuV7dVÆZQZY(dRgY(d,{j\{hNP`PNb[o

>

ú

ÔC

Ëv·hûûË7ü3ÍÌQhýÍ{Í.Î þL8$>Î$ÿ{Ë3

{o[(vQ`P\,Sk[$Sk[kQZg^q&dVSNPe7QZYdV`bo Y(Q_\,Wv\{h`bQSk[(\[kQ_S$d,O*[(v7QsÅÄ+x?\,Vhe¦`bQZ[1?¦{QE[(v7Q`Pd
c&Q_Sk[

 7q*|vQ_V 

V7dV7ÆZQZYd¦[kY\,VSNb[(NbdVàgYd,{h\{hNP`PNP[on[kd¦dV7Qd,O[(v7Q_SkQSk[(\[kQ_SZx"@

[(v7Qv7d,YNbÆZdV>x*\,VeA¦[(v7QS(m~\,`P`bQ_Sk[

V7dV7ÆZQZYd~Y(QZcs\Ye>x\,Ve3SkQZ[*< í ? A
B?
NfS@\~`Pd
c&QZY{dTVe/dV/[(v7Q$gY(d,{h\{hNf`PNb[od,O\,WX[(T\,`P`bo
Y(Q_\,WvNPV7l3\,Vo gh\Y([(NPWZTh`P\YSk[(\[kQ\O[kQZYC@§Sk[kQZghSNbO&[(vNPSgY(d,{j\{hNP`PNb[o3NPSVdV7ÆZQZY(dx)NPV4gh\Y([(NfWZT`P\Y\
Sk[(\[kQ*c@NP[(v$YQZc&\YeDAq?rãO[(v7QsY(QZcs\YeEmEQZ[kYNfW2NPS)eNfS(WXdTV[kQ_e>x[(v7Q_VE`bQZ[E<
í

GFH?h

NPSs[(v7Q$eNPS(WXdTV[*O\,WX[kd,Y_q
ád
cªWXdVS(NPeQZYR[(v7Q3NPV7ijVNb[kQXav7d,YNbÆZdVàTVe7QZYR\§Sk[(\[(NbdV\Yongd`PNfWXo,q
gY(dpWXQ_S(SZx\,Ve

 x,c@v7QZY(Q Z · .eI_Sf
A

F

|vNfSENPVeTWXQ_S~\1\Yw,d


[(v7Q gd`fNPWXov\,S¡V7dV7ÆZQZY(d¥Y(QZcs\YeÚNbO[(v7QZYQ NfS\nV7dV7ÆZQZYdnghY(d,{h\{hNP`fNb[o¥gh\[(v

[kd\

Y(QZcs\YeV7deQ,xNqöQ,qbxp\ySk[(\[kQO!Y(dmc@vNfWv[(v7QZY(QNfS2\$gdS(Nb[(Nb,QXaLY(QZcs\Ye\,WX[(NbdVgdSS(Nb{h`bQ,q)|vNfS9NPS9[kYT7Q



NbO;\,VedV`bouNbO)[(v7QZY(QyNPS\~V7dV7ÆZQZYdaLgY(d,{h\{hNf`PNb[o ¶¾µ ¸j¿P²ygh\[(v¥NfS(Nb[(NPV7l~Q_\,Wv V7dpe7QU\[mEdSk[dVWXQ
[kd~\EYQZc&\Ye3V7deQ,q2pTWv3\gh\[(v3\,WZWXYTQ_S*Y(QZcs\Ye/\[`PQ_\,Sk[I< í
GFH?h J AEOd,Y@Sk[(\[(NbdV\Yogd`PNPWZNPQ_SZq

í qí

pNfVWXQ;Sk[(\[(NbdV\Y(ogd`PNPWZNPQ_Svh\_,Q\,`PT7Q_S>{dTVhe7Q_e{o[(v7Q[(NPmRQXae7QZgQ_Ve7Q_V[\,VhevNPSk[kd,Yoae7QZgQ_Ve7a
Q_V[U\,`PT7Q_SOd,Y$NPV7ijVNb[kQXav7d,YNbÆZdV4&ÅÄ9SZx+[(vNPSU`bd
c&QZY${dTVhe O!d,Y$[(v7Q~Sk[(\[(NbdVh\Y(o4G\,`fT7QEd,O*[(v7Q
&ÅÄ

NPS*\,`PSkdR\R`Pd
c&QZY@{dTVeOd,Y|d,[(v7QZY@gd`PNfWZNbQ_SZq

V7dVpaV7QZl\[(Nb,QY(QZcs\YeSNPS p
. x*[(v7Q_V \
a\,eeNP[(Nb,Q\ghgY(d_7NPmR\[(NPdVnWZ\,VhV7d,[Y(QZ[(T7YVn\gdSNb[(Nb,Q~\,`PT7Q,q1?d4e7QZ[kQZYmRNfV7Q~c@vQZ[(v7QZY[(v7QZY(QuNPS
\ugd`PNPWXoc@Nb[(v Y(QZcs\Ye4l,YQ_\[kQZYU[(v\,Vi/
. O!d,YU\/lNb,Q_V¦sÅÄ+xWXdmEgjT7[kQ \,Ve4[(v7Q_V¦SkQZ[yuÎ S(TWv
G q*|v7Q
[(v\[[Î 9é~ p
. xNqöQ,qbx&Î Ù xj\,Vhe3YThVu[(v7Qs a\,eheNb[(Nb,Qy\ggY(d
pNPm~\[(NbdV3\,`bl,d,YNb[(vmîdV^Î\
Û)NPV\,`f`bo,x&Vd,[kQ[(v\[NbO[(v7Q3\,`PT7Q3d,O\¦&ÅÄéc@Nb[(v

=<

K&

&ÅÄ

'&

0<

L

v\,S*gdS(Nb[(Nb,Q\,`PT7QNbO+\,VeudV`PoNbO+[(v7Q\ggYd_7NPmR\[(NbdVuYQZ[(T7YVS*\EgdS(NP[(Nb,QG\,`PTQ,q

M

ád,[kQ|[(v\[;[(vNfS;e7dQ_S;Vd,[WXdV[kY\,ehNPWX[[(v7Q*TVeQ_WZNPe\{hNP`fNb[oY(Q_ST`b[+d,O\,e\,VNpQZ[9\,`Lq7t_,,q2|v7Q
gY(d,{j`bQ_mÈ[(v\[*[(v7QZo¡gY(d,Q_e/TVeQ_WZNPe\{h`bQNPSsc@vQZ[(v7QZY|\R&ÅÄcNb[(vuV7dV7gdS(Nb[(NP,QYQZc&\YehS*v\,S

×.

.

\¡vNPSk[kd,Yoae7QZgQ_VeQ_V[d,Y[(NfmEQXae7QZgQ_Ve7Q_V[\,`PT7Qyd,O pqÃ4Q,×öYQR\,SkwNfV7l~c@vQZ[(v7QZYNb[vh\,S\,`PT7Q'&

NPV[(v7QV7dVpaV7QZl\[(Nb,QY(QZcs\Ye WZ\,SkQ,]^\,VS(c2QZYNfV7l~[(vNfST7Q_Sk[(NbdV¥QZ,Q_V1NbO)c&QEm$T`P[(Nbgh`bo[(v7QyY(QZc&\YeS

éU
*e7dQ_S@V7d,[@\,VSkc&QZY|[(v7Q_NPY|T7Q_S([(NbdV>q

{o

3 2 ^¯­»Â9«º» ¶ ÷ µ ½ s¬½2­(²¸­k² ¶ ²X·j½L¬,½ µ ¯,· ¶ ¬·±·j¯·³ã·²"Ï ¬,½ µ °²$­(²X÷9¬­k± ¶L ½p ²»Âs³
«3º»°¬¿âh²y¸j­t¯ÁX¿P²Ê
âp·j±²Z­9· µ ½²Z³tp¯­ µuê ¯,· ¯­ µ ·D· µ ½²X³Ú¯­ µçê ¯· ½L¯,½L¬,¿*± µf¶Z´ ¯âp·h½²±1­(²X÷9¬­k± µf¶ ³
¬±± µ ½ µ °²E¬¾¸¸j­k¯¬É µ R¬ÁX¿P² µ õ$¬·j±¡¯·h¿À µ õ½7²X­(²E²UÉ µ!¶ ½ ¶ ¬E»
yõZ¯­y½¬,½;»Â9«3º»ß°G¬¿âh²|¸j­k¯ÁX¿P²Ê;Ë
w

~vy~ÉÉ$yÅ67

/

-9

( )-+



'qPq
ya\,eeNb[(NP,Q@\ggY(d
pNfmR\[(NbdV

ád,[kQ*[(v\[+[(v7Q*WXd,Y(d`P`P\Y(oeQZgQ_VheSdVh`bodVÛ\,WX[(S@t
?\,Veu O!Y(dmÜ[(v7Q&gY(dd,O7d,Oj@v7QZd,Y(Q_m
|vTSZx\,VoEd,g[(NPm~NbÆ_\[(NbdVEgYd,{h`bQ_mëc@Nb[(vR[(v7dSkQ@ghY(d,gQZY([(NbQ_S)c@NP`f`vh\_,Q\
NbO+\,VeudV`bo¡NbO+Nb[|v\,S|\R2?q

:

q7

·G

y
.
Ù
Ù
dT7[kghT[(S6.pqÅ[(v7QZY(c@NfSkQ,x
lNb,Q_V÷xNb[Wv7ddS(Q_SÎ|STWvU[(v\[Î
Ô x\,Ve[(vTS+Î é[ ztréÎ
v7d`PehSZq;M^QZ[
y
·

r
Î
ë
G


@
q



á
,
d
k
[

Q
(
[

v

\
[

·

ë
G
*

P
N
&
S
(
[
7
v

Q

\

g

g
(
Y


d
p

f
N
R
m

\
[(NbdV¡[kdE[(v7Q\,`PT7Qd,OG
OdTVe{o
í
õ
YTVhVNPV7lE\,`bl,d,YNP[(vm
$q|v7Q_V ¡NfS|\,V_a\ggY(d
pNfmR\[(NbdV/[kdÎ
xhS(d
NPS@\,V^Za\gghY(d_7NPmR\[(NbdV3[kd

üy{~O~
M^QZ[ 5 í
\,`  ëx^\,Vhe`PQZ[	ê{Q\gd`PoV7dm~NP\,`aL[(NPmEQ a\,eheNb[(Nb,Q\ggY(d
pNfmR\[(NbdV\,`bl,da
YNb[(vhmuq&Û)NbYSk[Zxh[(v7Q$9+3WXdmEghT7[kQ_S	<E\,SNPV/|v7QZd,YQ_m
qP$\,Ve3Wv7Q_W(wpSc@v7QZ[(v7QZY 5 í pq*rO;Skd7xNb[

'

L

D&

3



$

5

.

P

5

.ON

0&

5

Q

K3

5

q

pTggdSkQ,xNPVhSk[kQ_\,e>x[(v\[uc2Q1vh\_,Q¦\à2?

O!d,Yud,gh[(NPmR\,`gd`PNPWZNbQ_SOd,Y/[(vNPSgY(d,{j`bQ_muqMQZ[

·GIU{Q\,Vn\,`Pl,d,YNb[(vm [(v\[e7Q_mEdVSk[kY\[kQ_S$[(vhNPSZqMQZ[ í G\,` ^·Gêx\,Ve y·GìIU.eÒ Ý í jq
Ô Ô - q¡rO í ./[(Ù v7Q_V í Ù .\,Ve1Ù c&QWZ\,Vn
Sk[kd,g^qu2`PSkQRc&QWv7ddS(Q\,VSTWv¦[(v\[
Ù
téG
Ô éix7lNbpNPV7l q&pNPVhWXQ - õ x7\,Ve - õ NPSsgd`boVdmRNP\,`S(NbÆZQ\,VeuNPS&gd`bopV7dmRNP\,`a
[(NPmEQWXdmEghT7[(\{h`PQRNPVë G-
ë S(NPVhWXQ  NfS[(v7QRdT7[kgjT7[d,O y·GìIU.eÒ Ýkx;c&QWZ\,V¦Wv7ddSkQOXï - Ù õ x)\,Ve
YTV ·GìIUG
 q2@vNPSslNb,Q_S\; a\,eeNb[(Nb,Q\ghgY(d_7NPmR\[(NPdV>q


5

|vTS

N

5

S3

5

5



R

3

;3

5

T



N

N

D3





M

VU

Ð 38·?Ñ>Ò©Ëv{v8Ì¨Í.Î·Ò^ÑjÓÔ



$33Ò$3

Za\ggYd_7NPmR\{h`bQ Od,Y3SkdmEQ§WZ\,VVd,[3v\_,Q§\9+q||v7QZY(QZOd,Y(Q,x

gY(d,{j`bQ_m

[(v\[3NPSuV7d,[

\,Vo3m$Th`b[(Nbgh`PNfWZ\[(Nb,QV7dV\gghY(d_7NPmR\{hNf`PNb[oY(Q_S(T`P[@opNbQ_`PeS|\,V \,eehNb[(Nb,QUV7dVh\ggY(d
pNPm~\{hNP`PNb[oYQ_S(T`b[Zq
d
c&QZ,QZY_x\,VE\,eheNb[(Nb,QsV7dV\gghY(d_7NPmR\{hNf`PNb[oY(Q_ST`b[+dV`boUS(vd
c@S)[(v\[;[(vQZY(Q*NPS;V7d9+x\,`P[(v7dT7lv

Za\ggYd_7NPmR\[(NbdVuOd,Y@SkdmRQipQ_eq

[(v7QZY(Q$mRNblv[*{Q\,V

H F[Z â\oçH]K^

WCYX

èaã&KKæ_ãHça`K F Kµæ

?

HçKfe7H Fhg

bZdc

>

iKj

,g

å

|vNfSSkQ_WX[(NbdV§O!dpWZTSkQ_SUdV4ijVhNb[kQXav7d,YNbÆZdV1gd`fNPWZNbQ_SZq¡Ç&Q_WZ\,TSkQ[(v\[$NPS$WXdVS(NPS([kQ_V[$[(v7Y(dT7lv7dT[[(v7Q
SkQ_WX[(NbdV^xc&Q|e7dV7d,[QXpgh`PNPWZNP[(`bomEQ_V[(NbdVRNb[NPVQ_\,WvR[(v7QZd,YQ_muq;@dc2QZ,QZY_x7\,S2pQ_WX[(NbdV~ÙS(vd
c@SZx[(v7QZY(Q
\Y(QUSNblVNijWZ\,V[*WXdmEghT7[(\[(NPdV\,`^eNòQZY(Q_VWXQ_S|{QZ[c2QZQ_V/ijVNb[kQXa\,Ve3NPVpijVNP[kQXav7d,YNbÆZdV¡WZ\,`PWZT`f\[(NbdVSZq
|vQgd`PNPWXo¥QX7NPSk[kQ_VWXQ gYd,{h`bQ_m

Od,Yu&ÅÄ9Sc@Nb[(v

V7QZl\[(Nb,Q4\,Ve

V7dVpaVQZl\[(Nb,Q Y(QZc&\YeS

[Za\gghY(d_7NPmR\[(NbdV^q@rãO\~gd`PNPWXo¡c@NP[(v/gdS(Nb[(Nb,Q$gQZY(O!d,YmR\,VWXQUQX7NPSk[(S_xj[(v7Q_VQZ,QZY(o
}.
WZ\,VV7d,[R\ghgY(d_7NPmR\[kQ/\ gd`PNfWXo1c@Nb[(vngdS(Nb[(Nb,Q¡gQZY(Od,YmR\,VWXQ,q¥Q_VWXQ,x2[(vQ/e7Q_WZNPS(NbdVngYd,{h`bQ_m
NPS
Sk[kY\,NPlv[kOd,Y(cs\Ye`bo/Skd`P,Q_e{o\,VoX_
 a\ggY(d
pNPm~\[(NbdV>q|v7QZY(QZOd,Y(Q,xc&QWXdVhWXQ_V[kY\[kQ~dVsÅÄ2S
c@Nb[(v V7dV7aV7QZl\[(Nb,QRY(QZcs\YeS_qyÖ@Q_S(T`b[(SOd,Y&ÅÄ9ScNb[(v4TV7Y(Q_S([kYNPWX[kQ_eY(QZcs\YeS\Y(QRSk[(\[kQ_e§\,S
WXd,Y(d`P`f\YNbQ_SZq/&dVS(Nfe7QZYU\,V_
 a\ggY(d
pNfmR\[(NbdV¦\,`Pl,d,YNb[(vm [(vh\[Zx+dVnNPV7gjT7[\3&ÅÄ G c@Nb[(v
V7dVpaVQZl\[(Nb,QY(QZcs\YeSZx7dT[kghT7[(S|\Egd`PNfWXoO î
d,O)[ogQ`2
þ q9|vQ_V/Nb[|v7d`PehSs[(v\[
¸7²X­õ·GIU î Ü
Ô téG °ZÛ G\,` ·ê
G QÒ
Ã4QihYS([2WXdVS(Nfe7QZY9[(v7QT7Q_Sk[(NbdVd,O^c@v7QZ[(vQZY&\,Vd,g[(NPmR\,`Sk[(\[(NbdVh\Y(oEgd`PNPWXoEWZ\,V{QZ
 a\gghY(d_a
NPmR\[kQ_e1O!d,Yy&ÅÄ9ScNb[(v4V7dVpaV7QZl\[(NP,Q~Y(QZcs\YeSZqr[$NPSwpV7d
c@V MNb[k[(mR\,V^x2_,Gñ7]9TVevQ_V7w
QZ[|\,`qbx(././
. &[(v\[s[(v7QY(Q_`f\[kQ_eue7Q_WZNPS(NbdVgY(d,{j`bQ_mNfS&á;aWXdmRgh`bQZ[kQ,qÃ4QNPVhWZ`PTe7Q\yS(w,QZ[(Wvud,O?[(v\[
NPSV7d,[STNb[kQ_eO!d,Y

\ggYd_7NPmR\[(NbdV\,`Pl,d,YNb[(vmðopNbQ_`PehS>S(TWv$\*gd`PNPWXo,x{Q_WZ\,ThSkQ9\*gd`PNPWXoc@Nb[(vgQZY(Od,YmR\,VhWXQ *d,Y?S(m~\,`P`bQZY

k

gY(dd,O)v7QZY(Q,xS(NPVhWXQ`P\[kQZY|gY(dd,OS*{hTNP`fe~dV/NP[Zq9|v7QOd,YmR\,`^e7QZ[(\,Nf`PS*WZ\,V/{QOdTVeuNPVuggQ_VeNUq

8Sx~3y{Ê  ¹ )µ ½½·R¬· 
« âp·j±(p²X·7®å²Z½R¬,¿ÌË 
p² ¶ ½L¬,½ µ ¯·j¬,­À1¸p¯¿ µ´ À ²UÉ µf¶ ½²X· ´ ²
¼
¸j­k¯ÁX¿P²ÊÜ
 õZ¯­»Â9«3º» ¶ ÷ µ ½/·j¯,·³·²"Ï¬½ µ °,²$­k²Z÷9¬­t± ¶$µ!¶ á@³ ´ ¯(¸j¿b²_½²¬Ë
: y{~O~q7 Q_m${QZYS(vNbgUNfVUáNfSSk[kY\,NPlv[kOd,Y(cs\Ye>x{Q_WZ\,TSkQs\|gd`PNPWXoWZ\,V${Q2lT7Q_S(SkQ_ey\,Ve$QZG\,`fT\[kQ_e
ü
NPVgd`bopV7dmRNf\,`[(NfmEQ,q??dS(vd
c§á;avh\YeV7Q_S(S_x
c&QY(Q_eTWXQ9[(v7Q9á;aWXdmEgh`PQZ[kQ2S(\[(NPSkij\{hNP`PNP[o@ghY(d,{h`bQ_m
[kdåNb[ZqÈM^QZ[ ) ( IÒÒÒ¬I q
ö {Q STWvð\àOd,YmyT`P\nc@Nb[(v \YNP\{h`PQ_S ( IÒÒÒDI 
ö \,VeðWZ`P\,ThSkQ_S
I( ÒÒÒDI Ó x&cv7QZY(Q3WZ`P\,ThSkQ í  õ +(Nß 0 õ +Ô-Sß 0 õ +Ô4Sß 0 EO!d,Y Ö Z Ö I Ö qÚÃ4QS(\
oà[(v\[
\YNP\{h`bQ
Ö ¬¸¸7²¬­ ¶µ · ÷ µ ½ ¶¾µ Ï ·âe . ¹ ­(² ¶ ¸1^Ë  ¼ NbO Ö Y(Q_Skgq Ö )NPS\U`PNb[kQZY\,`NfV q)Ã NP[(v7dT7[
`bdS(S|d,O;l,Q_V7QZY\,`PNb[o,xhc&QU\,S(S(ThmEQ[(v\[QZ,QZY(ouG\YNP\{h`bQ\ggQ_\YS\[mEdSk[@dVWXQ$NPV/Q_\,WvWZ`P\,TSkQ,q&|v7Q
NPe7Q_\NPS[kd4WXdVS([kYTWX[$\&ÅÄÈ
G  Uv\
NPVl3dV7Q¡Sk[(\[kQO!d,YQ_\,Wv¥\ggQ_\Y\,VhWXQd,O|\G\YNP\{h`bQ
ml

on

Bz

v]wx4y
~

0u :=:V:

pVqVqdrts

o{

|{

~

~[

}{













~[

{

(



{



'
V{



{

|{

[{

O

~[

z

NPV\WZ`f\,TSkQ,q|v7QySkQZ[d,Od,{hSkQZY(\[(NbdVSNPS[(v7QESkQZ[d,OG\YNP\{h`bQ_SZq9\,Wv \,WX[(NbdV4WXd,Y(Y(Q_SkgdVehS|[kdu\,V

\,S(S(NPlVmEQ_V[d,O&\~\,`PT7Qy[kdu\\YNP\{j`bQ,q@v7Q$[kY\,VS(Nb[(NbdVOTVWX[(NbdVNPSe7QZ[kQZYmRNPVhNPSk[(NPWq|v7Q$gY(dpWXQ_S(S
Sk[(\Y([(S+c@NP[(vU[(v7Q2ihYS([\YNP\{h`bQ2NPVU[(vQ9ihYSk[?WZ`P\,ThSkQ,q?rãO7[(v7Qs\,WX[(NbdVEWvdSkQ_VNPVU\WXQZY([(\,NPVySk[(\[kQ*S(\[(NPSkihQ_S
[(v7QWXd,Y(Y(Q_SkgdVeNfV7lu`PNb[kQZY\,`x?[(v7Q~ghY(dWXQ_SSgY(dpWXQZQ_eSU[kd[(v7QRihYSk[\YNP\{j`bQRd,Os[(v7QVQX[yWZ`P\,TSkQ,x+d,Y

Ø©NbO\,`P`+WZ`P\,TSkQ_Sc&QZY(QEWXdVS(NPe7QZYQ_e>qrãO[(v7Q\,WX[(NbdV4e7dQ_SV7d,[

c@Nb[(vY(QZcs\Ye¥y[kd¡\~ijV\,`+S(NPVw/Sk[(\[kQ

S(\[(NPS(O!o[(v7QR`PNb[kQZY\,`Lx>[(v7QEgY(dpWXQ_S(SgYdWXQZQ_eS[kd3[(v7QRV7QXp[G\YNf\{h`bQd,O2[(vQRWZ`P\,TSkQ,x^d,YUc@Nb[(vY(QZcs\Ye

.¡[kd/\uS(NPVwSk[(\[kQ

RqyéS(NPV7wSk[(\[kQRc@NP`f`?V7QZ,QZYU{QE`bQZO[ZqE|v7Qgh\Y([(NP[(NbdVd,O2[(v7QRS([(\[kQ~Skgh\,WXQRNPV[kd

d,{hSkQZYG\[(NbdV¦WZ`P\,S(SkQ_SUlT\Y\,V[kQZQ_SU[(v\[U[(v7QRS(\,mEQ~\,SS(NblVmEQ_V[UNPSm~\,e7QROd,YQZ,QZY(o4\ggQ_\Y\,VWXQRd,O

mGÈ >Q_T\,`PS~Nò

[(v7QS(\,mEQ~\YNP\{j`bQ,q@v7QZY(QZOd,Y(Q,x?[(vQ~\,`PT7QRd,O
Y(Q_eThWX[(NbdVuNPS|NPVuggQ_VeNb~Uq

z

6zàNPSS\[(NPStij\{h`PQ,q¡@v7QROd,YmR\,`
M



ÔC

Ëv·hûûË7ü3ÍÌQhýÍ{Í.Î þL8$>Î$ÿ{Ë3
ú

.pqurãm~mEQ_eNP\[kQ_`bo c&Q~l,QZ[y[(v7Q

ád,[kQ[(vh\[y\,`P`gd`fNPWZNbQ_Sv\
,QQXpgQ_WX[kQ_e¦YQZc&\Ye¦d,O*Q_Nb[(v7QZY¡Rd,Y

*

V7dV\ghgY(d_7NPmR\{jNP`PNb[o/Y(Q_S(T`P[O!d,Yy&ÅÄ9SZx?QZ,Q_V§NbOs\,`P`;[kY\ tQ_WX[kd,YNPQ_S$v\
,QV7dV7aV7QZl\[(Nb,Q~gQZY(Od,Yka
mR\,VWXQ,q

8Sx~3y{Ê

32 ²Z½
. F÷ï\Ë ·¯¸½ µ R¬¿
³k¬¸¸­t¯¬É µ R¬ÁZ¿b² µ õU¬·j±¡¯·¿À µ õ|

ml

­(²X÷9¬­k± ¶$µ!¶

:üy{~O~q7

D

n



Ë

@v7QS([(\[(NbdV\Y(o\,`PT7Qd,OU\¥&ÅÄäWZ\,VÚ{QWZ\,`fWZT`P\[kQ_eÚNPV

{hNPVh\Y(o§SkQ_\YWv

"Ï

¶ ½L¬,½ µ ¯·j¬,­À@¸p¯¿ µ´ À9õZ¯­&»Â9«3º» ¶ ÷ µ ½ E·j¯,·³·² ¬½ µ °,²
í á

)

gd`PoV7dm~NP\,`*[(NPmEQ{o

TS(NPV7l4\,Våd,Y\,WZ`bQ3Od,YR[(v7QSk[(\[(NbdV\Yongd`PNfWXo¦QX7NPSk[kQ_VWXQgY(d,{h`bQ_m

\

Od,YsÅÄ2SZq

G }$

|v7QVTmU{QZYsd,O^{hNP[(S2[kd{QWZ\,`PWZT`P\[kQ_euNPS&gd`bopV7dmRNP\,`jNPV[(v7QS(NbÆZQd,O q V7d
cNPV7ly[(v7QG\,`PTQ,xc&Q
WZ\,V¡[kY(o[kd$ih\,Vu\,WX[(NbdV¡Od,Y|\,Vd,{jSkQZY(\[(NbdV>q;rãO^[(v7QmEdpeNihQ_e&ÅÄSk[(NP`f`j\,WvNbQZ,Q_S*[(v7Q\,`PT7Q
WZ\,`PWZT`f\[kQ_e1{QZO!d,YQ,x?c&QWZ\,V§WXdV[(NPVT7Qc@Nb[(v4[(v7QV7QX[$d,{hSkQZY(\[(NbdV>x)TV[(NP`;\3S([(\[(NbdV\Y(o gd`PNPWXo NPS
OdTVeRcvNPWvv\,S2[(v7Qd,g[(NPmR\,`hgQZYO!d,Ym~\,VWXQ,q|vNPS9\,`bl,d,YNb[(vmYTVhS9NPV~gd`PoV7dm~NP\,`7[(NPmEQc@Nb[(v\,V
d,Y\,WZ`bQySkd`bpNPV7lR[(vQ$Sk[(\[(NbdVh\Y(ougd`PNPWXoQXpNPS([kQ_VWXQUgYd,{h`bQ_mîOd,YsÅÄ2SZqpNPVhWXQ[(v7QUd,Y\,WZ`bQ$NPSNPV
á?xh{o¡|v7QZd,Y(Q_mîñ7qPxh[(v7QU\,`Pl,d,YNb[(vmÈYThVS*NPV¡gd`bopV7dmRNP\,`[(NPmEQNPO?

í á@q
Za\gghY(d_7NPmR\[kQ_S$[(v7Q~d,gh[(NPmR\,`

[(v\[s
ïéqÃ4Q~S(vd
cê[(v\[[(vhNPSNPmEgh`PNPQ_S@[(v\[ í á{o
S(v7dc@NPV7l v7dcä[kd1Skd`b,Q¡[(v7QuáaWXdmEgh`bQZ[kQughY(d,{h`bQ_m
q¦SENPV¦[(vQugY(dd,O|d,O|vQZd,Y(Q_m
ñ7qPx
lNb,Q_V\,VRNPVSk[(\,VhWXQ d,O
xc2Q@WXdVhSk[kYTWX[9\U&ÅÄÈ
G  >q|v7Q*dV`boWvh\,V7l,Q@[kd[(vQ|Y(QZcs\Ye
ád
cx;\,S(STmEQR[(v\[CäNPS\3gd`PoV7dm~NP\,`aL[(NPmEQE\,`bl,d,YNb[(vm

;Rc@NP[(v^.

Sk[(\[(NbdVh\Y(ogd`PNfWXo/O!d,YS(dmEQ

B

v]wx4y

"z

z

v]wx4y

OTVWX[(NbdV3d,O;[(v7Q$sÅÄðWXdVS([kYTWX[kQ_eNPV/[(v7Q$gY(dd,O)d,O9|v7QZd,Y(Q_m
c@Nb[(v¦gdS(Nb[(Nb,QRgQZY(Od,YmR\,VhWXQ_SZq3ád
cÈY(QZcs\Ye

ñ7qPNPS|[kd¡mR\w,QNb[@\&ÅÄ

NPSUd,{[(\,NPV7Q_enNbO*Sk[(\[kQ

ïNfSUY(Q_\,Wv7Q_e>x\,Ve¦Y(QZcs\Ye

yØNPSsY(Q_\,WvQ_e>q9Q_VWXQ NPS*S(\[(NPSkij\{h`bQNbO+\,Ve¡dV`boNbOGÈ >sv\,Ss\,`PT7Q
q
( å
S(S(TmRQ;[(v\[^gd`PNPWXoENPS[(v7QdT7[kgjT7[>d,Op[(v7Q}Z
 a\gghY(d_7NPmR\[(NbdVU\,`bl,d,YNb[(vm Uq?rO yNPS^S(\[(NPSkij\{h`bQ,x
[(v7Q_V¸7²Z­!õ;·GÈ QIUyÔäté~
 }Û ( å - í  qEÇ&Q_WZ\,TSkQE[(vQEgQZYO!d,Ym~\,VWXQd,O9QZ,QZY(ogd`PNPWXo/Od,Y
GÈ ENPSyQ_Nb[(v7QZY3uNbO NfSEV7d,[RS(\[(NPSti\{h`bQ,xd,Y ( å - NbO NPSES\[(NPStij\{h`PQ,x9Nb[O!d`f`bd
c@S[(vh\[;ðv\,S
gQZY(Od,YmR\,VWXQ ô~NbOs\,Ve¦dV`bo4NbO àNPSS\[(NPStij\{h`PQ,q/pd7x+NPV¦d,Ye7QZY$[kde7Q_WZNPeQ
x+c2Q¡WZ\,V
Z
WXdVSk[kYTWX[JGÈ xjYTV¡[(v7Q$\ggY(d
pNPm~\[(NbdV/\,`bl,d,YNP[(vm
ÜdV3Nb[Zx7[(\w,QyNb[(S|dT7[kgjT7[m4\,Ve3WZ\,`fWZT`P\[kQ
¸7²Z­!õ;·é
G  >QIU qy|v\[dT7[kghT7[S(v7dc@Sc@v7QZ[(v7QZY ¦NPSNPV
q`P`?[(v7Q_SkQESk[kQZghS\Y(Qgd`bopV7dmRNP\,`a




(

å-

NPSsd,{[(\,NPV7Q_e3NbOSk[(\[kQ

.

1z

z

.

h

z

z

.

	z

&

tz

K&



"z

.

Pz

z

0z

v]wx4y



z

z

[(NPmEQ{dTVhe7Q_e¡WXdmEghT7[(\[(NbdVhSZqrã[*O!d`P`Pd
c@S*[(vh\[

v]wx4y

v]wx4y

NPS|NPVu@x\,Ve/v7Q_VWXQ

í

á|q

M

ÅOWXdT7YSkQ,x&[(v7Q/S(\,mRQ/V7dV\ggYd_7NPmR\{hNP`fNb[o Y(Q_S(Th`b[Ev7d`PeSyOd,Y~&ÅÄ9Sc@NP[(v¥gdSNb[(Nb,Qu\,Ve
V7QZl\[(Nb,Q$Y(QZcs\YeSZq

w



~vy~ÉÉ$yÅl

R¬ÁX¿P²

À.

²_½

7
n

µ õU¬·j±u¯·¿À

Xïî\Ë
áË

)·À¯¸½



µ õ|
í



µ R¬¿ ¶ ½L¬,½ µ ¯·j¬­¾À¸p¯¿ µ´ À$õZ¯­y»Â9«3º» ¶µ!¶

³k¬¸¸j­k¯¬É µ ³

¨S(NPV7l[(v7QS\,mEQghY(dd,Os[kQ_WvVNPT7Q\,Sy\{d
,Q,xc&QWZ\,V¥S(vd
cé[(v\[$[(vQ~\,`PT7QNfSUV7dV\ghgY(d_7Na
mR\{h`PQ,x7[kdd7q

w

~vy~ÉÉ$yÅl
¯·¿À

µ õ@
í



l

Ë

á

n

6. Fyï\Ë p²

²_½

D

(

¶ ½L¬½ µ ¯·¬­À°G¬¿âh²9õX¯­»Â9«3º» ¶µf¶

³k¬¸¸­t¯¬É µ R¬ÁZ¿b²

µ õ¬·±

äS(NfmRNP`P\YU\YlTmEQ_V[yWZ\,V§{QTSkQ_e¦[kdSv7d
cé[(v\[\/gd`PNPWXo c@Nb[(v¦gQZY(O!d,YmR\,VWXQ~\[`bQ_\,Sk[y[(v7Q
\_,QZY\l,Qyd,O;\,`P`^gQZYO!d,Ym~\,VWXQ_S*Od,Y@\~sÅÄ


WZ\,VV7d,[{QWXdmRghT7[kQ_e3NfV¡gd`PoV7dm~NP\,`[(NPmEQ,xhThV`bQ_S(S

á@q)ád,[kQ@[(vh\[NPV[(v7Q|gYdd,Ojd,O|vQZd,Y(Q_mêñ7qPx[(v7Q*dV`bo$gQZYO!d,Ym~\,VWXQ*l,Y(Q_\[kQZY9[(vh\,VEd,YQ_T\,`

í
[kdR[(v7Q$\_,QZY\l,Qyd,O+\,`f`gQZYO!d,Ym~\,VWXQ_S|NPSs[(v\[@d,O)\,V/d,g[(NPmR\,`>gd`PNfWXo,q



Ð 38·?Ñ>Ò©Ëv{v8Ì¨Í.Î·Ò^ÑjÓÔ

w

 p²2õZ¯¿!¿b¯÷ µ ·Ï/¬­(²E² _â µ °¬¿b²Z·h½"Ë
Ë 7²X­(²4²UÉ µ!¶ ½ ¶ ¬/¸p¯,¿À·j¯( µ ¬¿³ã½ µ ~²1¬¿¼Ï¯­ µ ½r ½p¬,½&õX¯­¬Ï µ °,²X·»Â9«3º»%G ´ ¯(¸jâ7½² ¶ ¬
¬ ¶ ¸7²Z­!õZ¯­SE¬,· ´ ²9Ï,­(²(¬,½²Z­½p¬·¯­² Zâ¬¿½L¯½p²¬°,²X­k¬¬Ï²
¶ ½L¬,½ µ ¯·j¬­¾À¸p¯¿ µ´ Àâ·±²X­÷° µ´ ÷G
L
½
,
¬
½

¯
j
·

¬
¾
­
$
À
7
¸
X
²

­
X
õ
,
¯
Q
­

R

¬
·
R
²
t
¯
9
õ

G
Ë
¶
µ
´
Ë í á9Ë

~vy~ÉÉ$yÅl
p

$33Ò$3

!

(

#

(

!

u

|vTSZxQZ,Q_VRWZ\,`PWZTh`P\[(NPV7l\gd`PNPWXoc@v7dS(Q&gQZY(Od,YmR\,VhWXQ&NPS)\{d
,Q\_,QZY\l,Q@NfS+`fNbw,Q_`bo[kd{QsNPV7OQ_\,S(Nb{h`bQ,q
Ã4QV7dcð[(T7YV[kd[(NPmEQXae7QZgQ_VeQ_V[&gd`PNPWZNbQ_SZq)|v7Q[(NPmEQXaeQZgQ_Vhe7Q_V[&gd`PNPWXoEQX7NPSk[kQ_VWXQghY(d,{h`bQ_m
Od,Y@&ÅÄ9SNPSswVd
c@Vu[kd~{Qá;aWXdmRgh`bQZ[kQ,xh\,SNPSs[(v7QUSk[(\[(NPdV\Y(odV7Q,q

8Sx~3y{Ê

(



çË 

ml 
¹ « âp·j± p²X·7®1²Z½¬¿ u
âp·j¯Á ¶ ²X­¾°G¬ÁX¿P²«3º» ¶µ!¶ á|
 ³ ´ ¯ @¸¿b²_½²

/

¬Ë

:V:V:

(

¼

p²/½ µ ~²Z³t±²ã¸7²X·±²X·h½s¸p¯¿ µ´ Àn²UÉ µf¶ ½²X·

)\gh\,eNfmRNb[kYNbdT¦\,Ve§@S(Nb[(S(Nbwp`PNPSRt_,,$ghY(d
,Q_e¥\[(v7QZd,Y(Q_m

Ê

´ ²$¸j­k¯ÁX¿P² äõZ¯­

S(NPmRNf`P\Y[kd |v7QZd,Y(Q_m

ñ7q Ùq4|v7Q_NbY

Ä2S$vh\,e¦dV`Po VdVpaLgdS(Nb[(Nb,QRYQZc&\YehSZx+\,Vhe1[(v7Q_NbY$O!d,Ym$T`f\[(NbdV1d,O*[(v7Q¡e7Q_WZNPSNbdV4gY(d,{j`bQ_m
c@v7QZ[(vQZYU[(v7QZY(QNPS\3gd`fNPWXocNb[(v4gQZY(Od,YmR\,VWXQ
[(v7Q_NbYSZx9TSkQ_S~\ Y(Q_eTWX[(NbdVnOY(dm

v]wx4y

cs\,S

.pq/@v7QRgY(dd,Os{o4TVevQ_V7wQZ[y\,`qbx}(././.px`PNbw,Q

q¥Ã4Q3mEdpeNbOo1[(vNPSyY(Q_ehTWX[(NbdV¥[kd1S(v7dcî[(v\[R\,Vàd,gh[(NPmR\,`

[(NPmEQXaeQZgQ_Vhe7Q_V[sgd`PNPWXoNPS|v\Ye¡[kd~\ggY(d
pNfmR\[kQQZ,Q_V/Od,Y@TVd,{hSkQZY(\{h`bQÄ2SZq

8Sx~3y{Ê  ²Z½Ã.  ï©\Ë ·À/¯¸½ µ R¬¿;½ µ ~²Z³t±²ã¸7²X·±²X·h½)¸p¯¿ µ´ ÀõX¯­âp·j¯Á ¶ ²Z­°¬ÁX¿P²U«º» ¶
÷ µ ½¡
 ·¯·³ã·²"Ï¬,½ µ °,²$­k²Z÷9¬­k± ¶yµ!¶ ³k¬¸¸j­k¯¬É µ R¬ÁZ¿b² µ õU¬,·j±u¯·¿À µ õ@ í áË
:üy{~O~q7 Ã4Q/lNb,Q\ Y(Q_eTWX[(NbdV¥OY(dm
c@NP[(v§[(vQ/O!d`f`bd
c@NfV7lghY(d,gQZY([(NbQ_SZq¥Û7d,Y\1O!d,YmyT`P\
c@Nb[(vÿÐ
WZ`P\,TS(Q_S2c&QS(v7dcßv7d
cð[kdRWXdVhSk[kYTWX[*\,VuTV7d,{jSkQZY(\{h`bQÄFG
 >2c@Nb[(v\,`PT7QNbO NPS
S(\[(NPSkij\{h`bQ,x\,Vec@Nb[(vG\,`fT7QOï
t9ébG
 NbO §NPSVd,[S\[(NPStij\{h`PQ,q|vQZY(QZO!d,YQ,x\,Vj_ a\ggY(d
pNPm~\[(NbdV
ml

o

}

n

T)

,z

v]wx4y

.

z

z

\z

WXdT`Pe¦{Q~TSkQ_e¦[kdeNPS([(NPV7lTNPSv{QZ[c2QZQ_V¥S(\[(NPSkij\{h`bQ~\,Vhe¦TVS\[(NPStij\{h`PQyOd,YmyT`P\,S$NPV1gd`bopV7dmRNP\,`

[(NPmEQ,q
Û7d,YsOd,YmyT`P\1z?xc2QihYS([9S(v7dc

mGÈ >;OY(dmc@vNPWv G  >
sGÈ >;S(Nfm$T`f\[kQ_S;[(v7Q

v7dcÚ[kdyWXdVS([kYTWX[2\,V¡TVd,{hSkQZY(\{h`bQ

z

c@NP`f`{Q|WXdVS([kYTWX[kQ_e>q@|vQ*O!d,Ym~\,`7gY(Q_SkQ_V[(\[(NbdV\ggQ_\YSNPVEggQ_VeNyÇq
Od`P`bd
cNPV7luSk[kY\[kQZl,o,qus[[(v7QRihYSk[Sk[kQZgxdV7QRd,Os[(v7Q
c@Nb[(v¡ghY(d,{h\{hNP`fNb[o

Ó

Xè

( q2s[Sk[kQZg

Ð

.

z

z

WZ`P\,TSkQ_S$NPSWv7dS(Q_V§TVhNbO!d,YmR`bo/\[UY\,Ve7dm

_è&NPS*e7QZ[kQZYmRNfV7Q_e>q9Ç&Q_WZ\,TSkQ$[(v7Q

Úx[(v7QU\,SS(NblVmEQ_V[*d,O)G\YNP\{h`bQ

gY(dpWXQ_S(S*NPS*ThV7d,{hSkQZY(\{h`bQ,xpNb[*NPSslT\Y\,V[kQZQ_eu[(vh\[*Q_\,Wv/\YNP\{j`bQl,QZ[(S@[(v7QS(\,mEQ\,S(SNblVmEQ_V[|NPV¡\,`P`
WZ`P\,TS(Q_SZx;{Q_WZ\,TSkQ¡Nb[(SU\,`PT7Q¡NPSye7QZ[kQZYmRNfV7Q_e¦NPV§[(v7Q¡S(\,mEQuSk[kQZg^qrãO@\WZ`f\,TSkQ¡NPS$S\[(NPStihQ_e§{o¦[(vNPS
\,S(S(NPlVmEQ_V[Zx\ijV\,`>Sk[(\[kQ$c@NP`P`{QY(Q_\,WvQ_e>q9rãO+Vd,[Zxh\,VuQZY(Y(d,YSk[(\[kQUc@Nf`P`h{QY(Q_\,Wv7Q_e>q

`G

yG ( IÒÒÒDIUG Ó d,O<G xS(TWv4[(v\[[(v7QRNPVhNb[(NP\,`+Sk[(\[kQ
d,O}G
 >*NPS|[(v7Q$NPVhNb[(NP\,`>Sk[(\[kQyd,OÃG ( xj[(v7Q$NPVhNb[(NP\,`>Sk[(\[kQ$d,O}G Ö ( NPS@[(v7QijVh\,`^Sk[(\[kQ÷ØÜd,OÃG Ö x\,Ve
Y(QZcs\Yen$NPS@l\,NPV7Q_eNbO)[(v7QiV\,`Sk[(\[kQd,O}G
NPS|Y(Q_\,Wv7Q_e>q|v7QUQZYY(d,YS([(\[kQ_Sd,O2\,`P`^[(v7QsG Ö S\Y(Q
Ó
NPe7Q_V[(NihQ_e¡\,S\RTVNPT7QS(NPV7wSk[(\[kQ Rq
ád
cx+WXdVSk[kYThWX[
.

.

zOY(dm

Ð

-

WXd,ghNbQ_S

¡ 



z

¢



1

?dNP`f`PTSk[kY\[kQ[(vQ$WXdVSk[kYTWX[(NbdV>xNPV/Û)NblT7Y(Qc&QUlNb,Qy\,V3QX7\,mEgh`PQU&ÅÄÚWXdVS(NPSk[(NfV7lRd,O\

}G

Wvh\,NPV3d,O;ñ¡WXd,ghNbQ_Sd,O Èz|d,{[(\,NPVQ_e3Od,Y[(vQUOd,Ym$Th`P\z

í
|v7Qe\,S(v7Q_e\Y(Y(d
cS2NPVheNPWZ\[kQ|\[kY\,VS(Nb[(NbdV~c@Nb[(vEghY(d,{h\{hNP`fNb[o

f[{ (
{
4  { * £1o{ (  { -  { * q

( q|v7Q@e7d,[k[kQ_e Y(Q_SkgqSkd`PNfej+\Y(Y(dc@S

.Y(Q_S(g^q+
q|vQy\,- WX[(NbdVhSWXd,YY(Q_SkgdVe[kd\,S(SNblVmEQ_V[(S
[kdR[(v7QUG\YNf\{h`bQ_SZq
rãO 4NPSS(\[(NPStij\{j`bQ,x[(v7Q_V\R[(NPmRQXae7QZgQ_Ve7Q_V[|gd`PNPWXouS(NPmyT`P\[(NPVlÐ - Y(QZgQZ[(Nb[(NbdVS|d,O9\,Vo/S\[(NPSta
\Y(QygY(d,{h\{jNP`PNb[o $[kY\,VSNb[(NbdVSdV\,WX[(NPdV
\z

OoNPVl\,S(S(NPlVmEQ_V[vh\,SgQZY(Od,YmR\,VhWXQqrãOz§NPSV7d,[S\[(NPStij\{h`PQ,x[(vQ_VThVe7QZY\,Vo\,S(S(NblVmRQ_V[\[

_ù

ú

¤­¸§ ¸ ¨

ÔC

Ëv·hûûË7ü3ÍÌQhýÍ{Í.Î þL8$>Î$ÿ{Ë3

¤  §¸ ¨

¤¦¹O§ ¸ ¨

¤¦¥O§ ¸ ¨
°³²

°[±
©«ª­¬®«ª

¶±

¤­¸§ ¨

¤  § ¨

¤¦¹O§ ¨

¶!²

¤¦¥O§ ¨

¯

°³´

1

¶|´

°µ
¶·µ

1
1
1

Û)NblT7Y(QR}9VuQX7\,mEgh`bQThV7d,{hSkQZY(\{h`bQÄåOd,Y"z
í

f{ (


{

4


{

* ³£4o{ (


{



{

* 

ÐªWZ`P\,TS(Q_S2d,O

`bQ_\,Sk[sdV7Qd,O^[(vQ

[z3NfS2V7d,[*S(\[(NfStihQ_e>q;Q_VWXQ,x7[(v7QgY(d,{h\{jNP`PNb[oy[(vh\[sThVe7QZYs\,Vo[(NPmEQXa

yØd,OÃGé >sNPSsYQ_\,Wv7Q_eNPS*\[mEdS([é Ó ( q2sdVSkQ_T7Q_V[(`Po,x[(v7Q
(  Ó
å Ó q;|vNPS9gY(d,{7a
gY(d,{j\{hNP`PNb[o$[(vh\[9[(v7QijV\,`jSk[(\[kQd,O+G
 >9NPSYQ_\,Wv7Q_e¡NPS2\[&mEdS([t¤é
Ó
å Ó ïêt9éx
\{hNP`fNb[o¡Q_T\,`PS[(v7Q$QXpgQ_WX[kQ_e3YQZc&\Ye^qpNPVhWXQUOd,Y`P\Yl,Q$Q_V7dTlvXÐ
Nb[v7d`feS|[(v\[
e7QZgQ_Ve7Q_V[sgd`PNPWXo~[(vQijV\,`>Sk[(\[kQ

z

.



z

»º

-º

[(v7Q[(vQZd,Y(Q_mäOd`P`bd
cSZq

M

ád,[kQ[(vh\[2[(v7Q[(NPmEQXae7QZgQ_VeQ_V[gd`PNfWXoyQX7NPSk[kQ_VhWXQ@gY(d,{j`bQ_mêOd,Y&sÅÄ2S9c@NP[(v~V7dVpaVQZl\[(Nb,Q

(././.q&|vQWZ`f\,S(S*áM¦WXdVS(NPSk[(S&d,O+[(v7dSkQ`P\,VlT\l,Q_S

Y(QZcs\YeS*NPSsáM>aWXdmEgj`bQZ[kQ~ThVev7Q_V7w~QZ[|\,`qbx
Y(Q_WXd,lVNPÆ_\{h`bQ {o

V7dVe7QZ[kQZYmRNPVNPS([(NPW3+T7YNPVlnmR\,WvNPV7Q_S¡[(vh\[¡ThSkQ4\¥Y(Q_\,epaLdV`bo

\,eeNP[(NbdV\,`jY(Q_\,epaLc|YNP[kQ[(\gQ_Ssc@Nb[(v

NPV7ghT[~[(\gQ1\,Ve

R`Pd,l9ç?9[(\gQWXQ_`f`PSZq)r[*NPS&wpV7d
cV[(vh\[|áM¦èåà\,Ve¡[(v\[*áM

NPSgYd,gQZY`bo/WXdV[(\,NfV7Q_e1NPV4sp@s|q¨Vh`PNbw,Q[(v7QRWZ\,SkQRd,OsSk[(\[(NbdVh\Y(ogd`PNfWZNbQ_SZx\ggY(d
pNPm~\{hNP`PNb[o
d,O)[(NPmEQXae7QZgQ_VeQ_V[sgd`PNPWZNbQ_SsNPS@v\Ye7QZY*[(v\,V/[(v7Qgd`PNPWXoRQX7NPSk[kQ_VhWXQgY(d,{h`PQ_m

TV`bQ_S(S*áM í ásq
¨V7d,{hSkQZYG\{hNf`PNb[o/NfS\¡SkgQ_WZNP\,`+WZ\,SkQEd,O2gh\Y([(NP\,`?d,{hSkQZY(\{hNP`fNb[o,qQ_VWXQ,x>c&Qyl,QZ[[(vQS\,mEQEV7dVpa

\ggYd_7NPmR\{hNP`fNb[oRYQ_S(T`b[sOd,Y@&ÅÄ9SZxhQZ,Q_V/Od,Y@TV7Y(Q_S([kYNPWX[kQ_e¡Y(QZcs\YeSZq

w

~vy~ÉÉ$yÅl

É µ R¬ÁX¿P²
w

~vy~ÉÉ$yÅl
¬·j±u¯,·¿À


. yï\Ë ·Ày¯¸½ µ E¬,¿½ µ ~²X³k±²¸7²Z·j±²Z·h½h¸p¯¿ µ´ À&õZ¯­&»Â9«3º» ¶sµ!¶ ³k¬¸¸j­k¯³
µ õ| í áË
ï \Ë p ²y½ µ R ²Z³t±²¸7²Z·j±²X·j½2°¬¿â²y¯tõ»Â9«º» ¶µ!¶  ³k¬¸¸j­k¯¬É µ R¬ÁZ¿b² µ õ
 ²_½. yz
í á9Ë


n

½

n

²_½

¼

D

)

µ õ$¬·j±¡¯·¿À

µ õ|

D

(

ád,[kQu[(v\[[(v7QgY(dd,O|d,O|vQZd,Y(Q_m

ñ7q3\,SS(TmEQ_e¥\[kd,[(\,`sQXgQ_WX[kQ_e¥Y(QZcs\Ye¥WXYNb[kQZYNbdV>q |v7Q

eNPSWXdTV[kQ_enY(QZcs\Ye¥WXYNb[kQZYNbdV§NfSy\,`fSkd4TSkQZOT`2NfV¦[(v7QijVhNb[kQv7d,YNbÆZdV>q1?d Sv7d
cä[(v7Q¡Y(Q_ST`b[UOd,YR\

*)


Ð 38·?Ñ>Ò©Ëv{v8Ì¨Í.Î·Ò^ÑjÓÔ

Xð å Ó + ö

$33Ò$3

eNPSWXdTV[kQ_eRY(QZc&\Ye~WXYNb[kQZYNbdV>xc&Q@dV`PoyV7QZQ_e~[kd$Wv\,V7l,Q[(v7Q|Y(QZcs\Ye~NfVE[(v7Q|gYdd,Od,O>|v7QZd,Y(Q_m


\,SOd`P`bd
cSZ}T`b[(Nbgj`bo¡[(v7QyijV\,`+Y(QZcs\Ye {o

¢

ðNPS[(v7QEeNPSWXdTV[O\,WX[kd,Y_x+Ð

(10 x>c@v7QZY(Q

ñ7q
[(v7Q

VTmU{QZY*d,O;WZ`P\,TS(Q_SZx\,Veuç4[(v7QVTm${QZY*d,O+\YNP\{j`bQ_Ssd,O?[(vQO!d,Ym$T`f\¾z?q
)\gh\,eNfmRNb[kYNbdTð\,Vheß|S(Nb[(SNbw`fNPS4t_,,/ghY(d
,Q_e[(v\[\àghY(d,{h`bQ_m

,QZYoÚSNPmRNP`P\Yu[kd

vNPSk[kd,Yoa

e7QZgQ_Ve7Q_V[sgd`PNPWXo~QX7NPSk[kQ_VhWXQUNPS*&7@*;aWXdmEgh`PQZ[kQ,q

8Sx~3y{Ê





v

L

ÌË 
¬Ë

ml
» ¬¸p¬± µ
( ¶¾µ ½ ¶¾µ ®G¿ µ!¶ ¾pVqÄÃ4ÅÆs «4â·± p²X·®4²Z½¬,¿ Tu
À¿
¹ @
µ ½­ µ ¯âÂÁ
±²ã¸7²X·j±²X·h½¸p¯¿ µ´ À/² !µ ¶ ½²Z· ´ ²|¸­t¯ÁZ¿b² zõZ¯­»Â9«3º» ¶µ!¶ &p@s@³ ´ ¯ ¸j¿b²_½²

UÉ



(

:V:=:

(

¼

p² µf¶ ½L¯­À³

d,{hS(QZY(G\[(NPdVS
9Ü öÖuä ( Ö q*Ã4Q@e7dV7d,[;\,ee7Y(Q_SS?[(vQ|WZ\,SkQ*d,OjS(ThWZWZNPVWX[(`boYQZgY(Q_SkQ_V[kQ_egd`PNPWZNbQ_S
Od,Y&ÅÄ9Sv7QZYQ,q+Û7d,Y2\,VR\,V\,`bopS(NPS+d,Oh[(vQ_NbYWXdmEgh`bQX7Nb[o,xSkQZQ|TVev7Q_Vwjx\(././.,\pqyrãO
x[(vNPS
?d¦e7Q_S(WXYNb{Q\1vd,YNbÆZdV¥çßvNPS([kd,Y(oaeQZgQ_Vhe7Q_V[gd`PNPWXo¦O!d,Y~\¦&ÅÄ©c@Nb[(v

QXpgh`PNPWZNb[(`Po[(\w,Q_SSkgh\,WXQ










&

NPSQXgdV7Q_V[(NP\,`Skgh\,WXQ,q)|v7QZY(QZOd,Y(Q,xc2QsWZ\,VV7d,[+QXpgQ_WX[+[(v\[)\|gd`bopV7dmRNP\,`baL[(NPmEQ\,`bl,d,YNP[(vmßdT7[kgjT7[(S
\|vNfSk[kd,Y(oae7QZgQ_Ve7Q_V[>gd`fNPWXo,x
\,VeUc2QYQ_Sk[kYNPWX[WXdVhS(NPe7QZY\[(NPdV[kd|gd`bopV7dmRNP\,`aL[(NfmEQ;\,`bl,d,YNb[(vm~S[(v\[
\ggYd_7NPmR\[kQ~[(vQvNPS([kd,Y(oaeQZgQ_Vhe7Q_V[E°¬¿â²ó
e7QZgQ_Ve7Q_V[gd`PNPWXoUó

[(v7Qd,g[(NPmR\,`9gQZY(O!d,YmR\,VWXQ~TVhe7QZYU\,Vo¦vNPSk[kd,Yoa

d,O^\$&ÅÄ|qpÇsT7Y\l,d7xpe7QÖ@dT7l,Q_mEdV[Zxp\,Vhep`PNfS(SkQ_V7w,d~t_,,Ù2WXdVS(Nfe7QZY(Q_e

[(v7Q WZ`P\,S(Sd,O$sÅÄ2Sc@Nb[(v

\¦{dTVeåd,O1Ç¦dV

[(vQVTm${QZYd,O$S([(\[kQ_SuWXd,Y(Y(Q_SkgdVeNfV7l1[kdà\,V

d,{hSkQZYG\[(NbdV^xc@vQZY(Q9[(v7Q2Y(QZcs\YeSWXd,YY(Q_SkgdVe7Q_e[kd[(v7Q2gY(d,{h\{hNf`PNb[od,O7Y(Q_\,WvhNPV7l\|ipQ_eUSkQZ[?d,O7l,d\,`
Sk[(\[kQ_S@\,Vhe[(vTS)c&QZY(Qs{dTVe7Q_e${o
q;|v7QZoyS(v7d
c&Q_e[(v\[;Od,Y;\,Vo$ipQ_eCÇx,[(v7Q*d,gh[(NPmR\,`pvNPSk[kd,Yoa
e7QZgQ_Ve7Q_V[gd`PNPWZNPQ_SO!d,Y&ÅÄ9S$NPV1[(vhNPSUWZ`P\,SS$WZ\,V§{Q~\ggY(d
pNfmR\[kQ_e¦[kdc@Nb[(vhNPV4\,V§\,eheNb[(Nb,Q

÷q$Ã4Q~S(v7dc2Q_e1NfV9Y(d,gdS(Nb[(NbdVj'q¹[(v\[sÅÄzvNPSk[kd,Y(oae7QZgQ_Ve7Q_V[ehNPS(WXdTV[kQ_e d,Y
O
v\
,QEgd`PoV7dm~NP\,`aL[(NPmEQy\ggY(d
pNfmR\[(NbdV S(WvQ_mEQ_SRY(d,gdS(NP[(NbdV
' q¹ x&¬ ¶ ¿¯,· 
Ï ¬ ¶ ½7 ²X­(²¬,­k²~·j¯¬
¸j­ µ ¯,­ µ Á(¯âp·j± ¶ ¯·¦² µ ½p
 ²X­U½7 ²$·âeR Á²X­$¯kõ ¶ ½L¬,½² ¶ ¸7²X­¯Á ¶ ²X­¾°G¬,½ µ ¯·¦¯­$½p ²$­k²Z÷9¬­k± ¶ q
WXdVSk[(\,V[

[kd,[(\,`aLY(QZcs\Yeà\,`PT7Q¡gYd,{h`bQ_mRSy[(v\[RWZ\,V¥{Qu\ggY(d
pNfmR\[kQ_e¥[kd4c@Nb[(vNfV§\,V\,eheNb[(Nb,Q¡WXdVSk[(\,V[

ád,[(NPWXQ,x?vd
c&QZ,QZY_x?[(vh\[|v7QZd,Y(Q_mªñ7qP,e7dQ_SVd,[lNb,QRTSNPVO!d,Ym~\[(NbdV \{dT[[(vQRWZ`P\,S(SkQ_Sd,O

&ÅÄ9Ss[(vh\[|Ç&TY\l,dEQZ[|\,`qt_,,ÙsWXdVSNPe7QZY(Q_e>}Ç&Q_WZ\,TS(Qd,O?[(v7QY(Q_S([kYNPWX[(NbdVSs\,S(S(dWZNP\[kQ_e/c@Nb[(v
[(v7Qgj\Y\,mEQZ[kQZYIÇxdT7Yv\YeV7Q_SSsY(Q_S(T`b[(S*edRV7d,[@WXdV[kY\,eNPWX[|[(vQ_NbY*Y(Q_S(T`P[Zq
Û)NPV\,`f`bo,xc&QSv7d
c[(v\[$[(vQvNPS([kd,Y(oaeQZgQ_Vhe7Q_V[\,`PT7Q~d,O|&ÅÄ9S$c@Nb[(v¦VdVpaV7QZl\[(Nb,QY(QXa

Za\ghgY(d_7NPmR\{j`bQnThVe7QZY [kd,[(\,`EQXpgQ_WX[kQ_eëd,Y1ehNPS(WXdTV[kQ_eÜY(QZc&\YeSZxETV`bQ_SS í
a\,eeNP[(Nb,Q\ghgY(d_7NPmR\[(NPdVnThVe7QZY[(v7Q

cs\YeS4NPS V7d,[

&7@*|qn&dVhSkQ_TQ_V[(`bo,x9[(v7Q¡G\,`PTQ¡vh\,SEV7d2?§d,Y
S(\,mEQ$\,S(S(TmEgh[(NbdV>q

|vQvNfSk[kd,Y(oae7QZgQ_Ve7Q_V[~gd`PNPWXo¥QX7NPSk[kQ_VWXQ gY(d,{j`bQ_m

Od,Yu&ÅÄ9Sc@Nb[(v

V7dVpaVQZl\[(Nb,Q4Y(QXa


(././.q*Q_VWXQ,xh{Q_WZ\,TS(QUáM§NPS|\EghY(d,gQZY@S(T7{>WZ`P\,S(Ssd,O

cs\YeS|NPS@áM^aWXdmEgh`bQZ[kQ¡TVhev7Q_V7wQZ[\,`qbx

&7@*|x\ggYd_7NPmR\{hNP`fNb[oEd,O?[(v7QvNPSk[kd,Yoae7QZgQ_VeQ_V[&G\,`fT7QNfS

¶ ½­ µ´ ½¿Àv\Ye7QZY*[(v\,V¡[(vQgd`fNPWXo

QX7NPSk[kQ_VWXQghY(d,{h`bQ_muq

8Sx~3y{Ê

q. yï\Ë p²m µ!¶ ½L¯­¾À³t±²¸7²Z·j±²X·j½?°¬¿â²¯tõ2»Â9«3º» ¶ ÷ µ ½E·j¯,·³·²"Ï¬½ µ °,²
­(²X÷9¬­k± ¶$µ!¶ ³k¬¸¸­t¯¬É µ R
 ¬ÁZ¿b² µ õU¬·j±¡¯·¿À µ õ| í &p@sË
:üy{~O~q7 |v7Q|vhNPSk[kd,Y(oae7QZgQ_Ve7Q_V[;G\,`fT7Q*d,O^\&ÅÄ~G WZ\,VR{Q|WZ\,`PWZT`P\[kQ_eTS(NPVl{hNPV\Y(oySkQ_\YWv
d
,QZY2[(v7Q@vNfSk[kd,Y(oae7QZgQ_Ve7Q_V[?gd`PNPWXo$QXpNfSk[kQ_VWXQ*gY(d,{j`bQ_muq)|v7Q*VThmU{QZY;d,O{hNb[(S)[kd{Q|WZ\,`PWZT`f\[kQ_eRNPS
gd`bopV7dmRNP\,`NPV[(v7Q|S(NPÆZQ*d,O1
G q;|v7QZY(QZOd,Y(Q,x{o|v7QZd,Y(Q_mëñ7qPp. x[(vNPS;WZ\,`PWZTh`P\[(NbdVRWZ\,VE{QsgQZY(Od,YmEQ_e
NPVgd`bopV7dmRNP\,`?[(NPmEQETS(NfV7l\usp@sðd,Y\,WZ`PQ,qyrãO2 í
&p@s@x^Nb[O!d`f`bd
c@S[(vh\[[(v7QRvNPSk[kd,Yoa
e7QZgQ_Ve7Q_V[sG\,`fT7Qd,O;\R&ÅÄFG
WZ\,V/{Q²U
É ¬ ´ ½¿À¡WZ\,`PWZT`P\[kQ_e/NfV¡gd`PoV7dm~NP\,`[(NPmEQ,q
|vQ S(QZ[
d,OU[kYT7Q4T\,V[(NihQ_eÚÇ&dd`bQ_\,VÚOd,YmyT`P\Q NPSdV7Q4d,OU[(vQ S([(\,Ve\YeÚ&7@*
WXdmEgh`PQZ[kQ&SkQZ[(S_q+?dWXdVhWZ`PTe7Q& í sp@s O!Ydmz\,VsZ
 a\gghY(d_7NPmR\[(NbdV$d,O[(v7QsvNPS([kd,Y(oaeQZgQ_Vhe7Q_V[
ml

q

n

²_½

D

(

BÈYÉ x4y

DY


ÔC

Ëv·hûûË7ü3ÍÌQhýÍ{Í.Î þL8$>Î$ÿ{Ë3
ú

\,`PT7QRgYd,{h`bQ_mux?c2QTSkQ\3[kY\,VSkOd,YmR\[(NPdV1d,O|NPVS([(\,VWXQ_Sd,O*ÈYÉ

.

(././.{q

[kdsÅÄ2SUS(NfmRNP`P\Y[kd[(v7Q

x4y

gY(dd,O+d,O+|vQZd,Y(Q_mäñ7qP ~NfV1TVhev7Q_V7wx
|vQySkQZ[CÈYÉ

x4y

WZ\,V{QNPV[kQZYgY(QZ[kQ_e \,S\[c&daLgh`P\_o,QZYUl\,mEQ,}9`P\
o,QZYR$SkQZ[(S[(vQyQX7NPSk[kQ_V[(NP\,`P`Po

ESkQZ[(S@[(v7QUTVhNb,QZYS(\,`P`Po~Th\,V[(NijQ_e¡G\YNf\{h`bQ_SZq2`P\_o,QZYyc@NPVS*NPO
[(v7Q\,`b[kQZYV\[(NfV7lyWv7dNPWXQ_S*e7QZ[kQZYmRNPV7Q\yS\[(NPSkOoNPVl$\,S(S(NPlVmEQ_V[2[kd[(v7QO!d,Ym$T`f\px\,Vegh`f\_o,QZYm$
 c@NPVS
NbO^[(vQe7QZ[kQZYmRNPVQ_e\,SS(NblVmEQ_V[*NPSsV7d,[|S(\[(NPS(O!opNPV7l7q;ßOd,YmyT`P\NPSsNPV
NbO+\,VedV`boNbO^gh`P\
o,QZYU
v\,S\Rc@NPVhVNPV7lESk[kY\[kQZl,o,q|vNPS|mRQ_\,VS@gj`P\_o,QZYyUv\,S\RY(Q_S(gdVhSkQ[kdQZ,QZYo/Wv7dNPWXQyd,O)gh`P\
o,QZY[
 xSkd
[(v\[@NfV¡[(v7QQ_Ve¡[(v7QUO!d,YmyT`P\yc@Nf`P`{QS\[(NPStihQ_e>q
|vQ,QZYSNbdV¦cv7QZY(Qgh`P\_o,QZY;
 mR\w,Q_SY\,Vedm Wv7dNPWXQ_SE\,Ve§gh`P\
o,QZY¡×ØSl,d\,`sNPS$[kd c@NPV¦c@Nb[(v
(
gY(d,{j\{hNP`PNb[o
WXd,YY(Q_SkgdVeS2[kd
 ¶ ½L¯ ´ p
 ¬ ¶ ½ µ´$¶ ¬,½ µ!¶ & ¬Á µ ¿ µ ½Àpxhc@vNPWvNPS&\,`PSkd&7@*àWXdma
T\,V[(NbihQ_e¡G\YNP\{h`bQ_SZx\,Vheugh`P\
o,QZY

BÈDÉ x4y

}&

w

gh`bQZ[kQ,q)|v7Q*NPVhSk[(\,VWXQ_S+d,O

w

É x4y

\Y(QsOd,Ym$Th`P\,S+c@vNPWv$\Y(Q*T\,V[(NihQ_e\,`b[kQZYV\[(NfV7l`boc@Nb[(v$QX7NPSk[kQ_V[(NP\,`

É x4y

T\,V[(NbihQZYS1Ê1\,Ve4Y\,Vedm¤T\,V[(NbihQZYSYË?qu|v7QRmEQ_\,VNfV7l/d,Os[(v7Q~Y\,Ve7dm
\,Vå\,SS(NblVmEQ_V[R[kd§[(v7Q/Y(Q_SkgQ_WX[(Nb,QG\YNP\{h`bQ/NPS~Wv7dSkQ_V
Sk[kdpWv\,S([(NPWÇ&dd`PQ_\,V/Od,Ym$Th`P\
Ì

NPS*NPV
w

ÊÍ{

í

Ë{

(

-

ÊÍ{

Ë{

4

[(v7QZY(QQX7NPSk[(S"Ï (

Od,Y|Y\,Vhe7dm$Ï -

V§Y\,Ve7dm

rãO1Ìïv\,S

QXpNPS([(SIÏ 4

O!d,Y|Y\,Ve7dm$Ï *

T\,V[(NbihQZYSZx*[(v7Q_V

[(v7Q Sk[kY\[kQZl,o

OY(dm


.eI_



qß

ÒÒÒ
*

Îz

NbO+\,Vhe¡dV`bo¡NbO

É x4y

T\,V[(NihQZYËàNPS[(v\[

TVNbOd,YmR`Po§\[RY\,Vhe7dm

_V/T (c ) ( IÒÒÒDI Lö&NPS*[kYT7QÊf

qZqZq·Ð

ÄÏ Ñz

Ï

·Ï

&

-

( q

÷
 å (

d,Ogh`P\
o,QZY e7QZ[kQZYm~NPV7Q_S\§SkQZ[¡d,O

Ò

¢ _V/T (c ) ( IÒÒÒDI Qp
ö *NPSs[kYT7QÊf y \,S(S(NPlVmEQ_V[(S|S(\[(NPSkOo q
Û7Ydm
[(v7QEgY(dd,O9d,O2rã í
&p@s{o4pv\,mRNPYEt_,/Nb[O!d`f`bd
c@S[(v\[UO!d,YQZ,QZY(o &7@*
SkQZ[ Ü\,VeuWXdVSk[(\,V[
Ô [(v7QZYQNPS*\gd`boVdmRNP\,`aL[(NPmRQ@Y(Q_eThWX[(NbdV 3OY(dm z[kd

S(TWv¡[(v\[
Od,Y|QZ,QZY(ouNPVSk[(\,VhWXQ \,Ve¡Od,YmyT`P\ ; > í

Ò

Ò
Ò
E
(
[
7
v

Q

O

d
P
`
b
`

d
@
c
P
N
7
V
E
l
7
v

d
f
`

e
Z
S
q
(
W rãO Z $x[(v7Q_V ( Od,Y|Y\,Vedm - ÒÒÒ _V/T vc  ( IÒÒÒ¬I Q7ö &NfS*[kYT7QÊf ztmé å xh\,Ve
W NPO §Z ì Ux7[(vQ_V ( O!d,Y@Y\,Ve7dm - ÒÒÒ _V/T (c  ( IÒÒÒ*I L7ö sNPSs[kYTQÊf+ï å q
\,S(S(NPlVmEQ_V[(S[kdKz?qU@v7Q$[kQZYm

d,O)[(v7Q_SkQ

|Ð

Ò

Ï Ñz

Ï

·Ï

\&

( £¡mEQ_\,VS[(v\[mEd,Y(Q[(v\,V

P

Ó




-{

{



{

Ò

z



YÓ

o{

ÊÍ{

Ë{

BÊ4Ï

$Ï

·Ð

ÄÏ Ñz

'ÖHÏ

×Ï

·Ð

ÄÏ Ñz



É x4y

w

zÔ

Ô

Ô

Ï

·Ï

Ï

·Ï

]Õ

&

]Õ

|vNfS|mEQ_\,VS@[(v\[gj`P\_o,QZYyQ_Nb[(v7QZYv\,S\~Sk[kY\[kQZl,oTVe7QZY|cvNPWv3S(v7Qc@NfVS*c@Nb[(v/,QZY(o/vNblv3gY(d,{7a
\{hNP`fNb[o,xd,Y[(v7QygY(d,{h\{hNf`PNb[o¡d,OcNPVVNPVlTVe7QZY\,VoSk[kY\[kQZl,oNPS,QZY(oSmR\,`P`qÃ4QRS(v7dcëvd
cë[kd
[kY\,VS(O!d,Ym

\uS([kdWv\,Sk[(NPWEÇ&dd`bQ_\,V4Od,Ym$Th`P\}ÌÜNfV[kd/\usÅÄðcNb[(v \u`P\Y(l,QRvNPS([kd,Y(oaeQZgQ_Vhe7Q_V[

[yc@NPVSZq

\,`PT7QNbO?gh`P\_o,QZYyv\,S@\cNPVVNPVlySk[kY\[kQZl,o,xj\,Ve/\~m$TWv/S(mR\,`f`bQZY*G\,`fT7QNbOgj`P\_o,QZY

Û+d,Y\,VNPVSk[(\,VWXQ
xc@vQZY(Q ªNPS/\¥Od,YmyT`P\¥c@NP[(vÚçêG\YNf\{h`bQ_S
í
(
- ÒÒÒ d,O
I( ÒÒÒ*I qöhx@c2Q WXdVSk[kYThWX[\n&ÅÄ-Gé |R\,SO!d`P`Pd
c@SZqz|v7Q3Yd`bQ3d,Ogh`f\_o,QZY NPS[(\w,Q_V {o
[(v7QEWXdV[kY(d`P`bQZYd,O9[(vQyghY(dWXQ_SSZqU
S([kY\[kQZl,od,O2gh`P\
o,QZYRyeQZ[kQZYmRNPV7Q_S\gd`PNPWXoud,O2[(v7QEWXdV[kY(d`f`bQZY_x
\,Ve¦NPWXQ~,QZYS(\pq/9`f\_o,QZY/
 \ggQ_\YS$\,SUgYd,{h\{hNP`PNfSk[(NPW$[kY\,VS(Nb[(NPdVSNPV4[(vQ~gY(dpWXQ_S(SZq¡|v7Q~gY(dpWXQ_S(S
G  |&v\,S&[(v7Y(QZQSk[(\l,Q_S_q9|v7QihYS([&Sk[(\l,Q$WXdVS(NPSk[(Ssd,O?dV7QSk[kQZg^q9@v7QghY(dWXQ_SS*Wv7ddSkQ_S|TVhNbO!d,YmR`bo
È
\[yY\,Ve7dm
dV7Qd,O|[(v7Q~\YNP\{j`bQ_S$\,Vhe§\,Vn\,S(S(NblVhmEQ_V[$[kd4Nb[Zx;\,Ve§S([kd,Y(Q_Sy[(v7Q~\YNP\{h`PQ\,Ve§[(v7Q
\,S(S(NPlVmEQ_V[Zq2d,Y(QOd,YmR\,`P`bo,x7OY(dmä[(vQUNPVNb[(Nf\,`S([(\[kQsK / xhdV7Qd,O)[(v7QUSk[(\[kQ_S¢ Ö?í £t
è ç;x
e
.
I
_



P
N
$
S
(
Y
_
Q
,
\

W
7
v
_
Q
^
e
9
x
_
Q
,
\

W

v
@
c
b
N
(
[
§
v

g
(
Y
,
d
h
{

\
h
{
f
N
P
`
b
N

[
à
o

p



G
?
ç


n
q

r

[
P
N

S
7
V
,
d

[
,
d
h
{
k
S
Z
Q

Y
G


\
h
{
P
`

Q
@
c
h
v
P
N

W
§
v
G


\
YNP\{h`bQ
Z
\,S(S(NPlVmEQ_V[|c&\,SSk[kd,YQ_e/{ou[(v7QUgYdWXQ_S(S_qsd
c&QZ,QZY_xc@v7Q_VQZ,QZY[(v\[G\YNP\{h`bQU\ghgQ_\YS|`P\[kQZY_x[(v7Q
¡Ì

{

|{

ÊÍ{

Ë{

Îz

É x4y

w

¡Ì

fÌ

fÌ

Ø{

Ï

Ù

Ï





Ú



gY(dpWXQ_S(SWv7Q_WwS[(v\[[(v7QNfVNb[(NP\,`P`Po4ipQ_eå\,S(S(NPlVmEQ_V[~NPS~Wv7dSkQ_V

\l\,NPV>qðrãO[(v7Q/gd`PNPWXonlNb,Q_S¡\

~.pq§|v7QZY(QNPS
;K ö(ò x;d,Y`PQ_S(SUOd,YmR\,`f`bo,x;[(v7Q

eNòQZY(Q_V[$\,S(SNblVmEQ_V[UeT7YNPV7lu[(v7QSkQ_WXdVe¥Sk[(\l,Q,x;[(v7QgY(dpWXQ_S(S$vh\,`b[(Sc@NP[(v1Y(QZcs\Ye
\ e7QZ[kQZYmRNfVNPSk[(NPWR[kY\,VS(Nb[(NPdV1[kd4\ijV\,`&Sk[(\[kQ¡c@vNPWv¦c&Q¡Y(QZO!QZY[kd \,S

Û

±²¬±4²X·j± Sk[(\[kQ,q¦rãO2S(ThWv4\,V1NPVhWXdVS(NPSk[kQ_VhWXo/dWZWZTYSeT7YNfV7l~[(v7Q[(vNPYe Sk[(\l,Q,x[(v7QEghY(dWXQ_SSv\,`b[(S

vÈ


Ð 38·?Ñ>Ò©Ëv{v8Ì¨Í.Î·Ò^ÑjÓÔ

$33Ò$3

lÞ

Ô
¸

ä

Ô

/

9% fÏ6

¸

ä

Ô

(



ä

à"à"à
/

à"àÚà

ÔÜ

ä
(


y}9|v7QihYSk[*Sk[(\l,QUd,OÃGÈ |q

Û)NblT7YQ

fÌ

X.\,Ve3Vd,[(NPWXQ_S@[(vh\[[(v7Q$gd`PNPWXo ´ p²¬,½ ¶ q|v7QZY(QUNfS@\e7QZ[kQZYmRNPVhNPSk[(NPW[kY\,VSNb[(NbdV/[kd¡\
S(NPVw~Sk[(\[kQc@vNfWvc2QYQZO!QZYs[kdR\,SJK  ô  x7d,Y|`bQ_S(SsOd,YmR\,`P`PoR\,S½p²s¸7²X·j¬,¿½À/Á(¯¬É/{Q_WZ\,TSkQ[(v7Qgh`P\
o,QZY
SkQ_V[2[(vQZY(QWZ\,VVd,[2Y(QXaLQ_V[kQZY*[(v7Ql\,mEQ`P\[kQZY_q$rãOQZ,Q_V[(T\,`P`PoR[(v7Q@cv7d`bQ@Od,YmyT`P\NfS9gh\,SSkQ_e>xQ_NP[(v7QZY
Y(QZcs\Ye¡d,YUY(QZc&\Yeiu
. NPSd,{[(\,NfV7Q_e4e7QZgQ_Ve7Q_V[dV4c@v7QZ[(vQZY[(v7QROd,Ym$Th`P\c&\,S$S(\[(NPStihQ_e d,Y$V7d,[Zq
|v7QihYS([ySk[(\l,Q/NfSyS(w,QZ[(Wv7Q_eNfVnÛ)NblTY(Q
 q¦rãVn[(vNPSy\,Ve¥[(v7Q¡Od`P`bdc@NPV7l3ihlT7Y(Q_SZxeh\,S(v7Q_e¥\Y(Y(dc@S
c@Nb[(v3Y(QZcs\Ye

Û

Õ

Y(QZgYQ_SkQ_V[Y\,Vhe7dm

[kY\,VS(NP[(NbdVS¡\,`P`sd,O@Q_T\,`sgY(d,{j\{hNP`PNb[o,xNbY(Y(QZl\Ye`bQ_S(S$d,O[(vQ¡\,WX[(NPdVWv7dS(Q_Vjx

Skd`PNfe\YY(d
c@SY(QZgY(Q_SkQ_V[e7QZ[kQZYmRNfVNPSk[(NPW$[kY\,VSNb[(NbdVSWXd,Y(Y(Q_S(gdVheNPV7l[kdu[(v7QR\,WX[(NbdV/?YT7Qx+\,Ve

X.3Û\,`PSkQq

e7d,[k[kQ_e\Y(Y(d
cS*Y(QZgY(Q_S(Q_V[@eQZ[kQZYmRNPVNfSk[(NPW[kY\,VS(Nb[(NPdVS*WXd,Y(Y(Q_SkgdVehNPV7ly[kdR[(v7QU\,WX[(NbdV

Ö

|vQS(Q_WXdVeuSk[(\l,QSk[(\Y([(S@NPVQ_\,Wvud,O?[(v7QSk[(\[kQ_S~¢Ø{ ^í Ï£\,Ve¡v\,Ssç4Sk[kQZgjSZx7eT7YNPVlUc@vNfWv¡\,V
\,S(S(NPlVmEQ_V[@[kd~[(vQU\YNP\{h`bQ_SP{ ( |{ |{ uNPS*ihQ_e>q*MQZ["
e7Q_V7d,[kQ$[(v7QUgj\Y([|d,O;[(v7Q$gY(dpWXQ_S(SZ×
Õ Ý
SkQ_WXdVeSk[(\l,QeT7YNfV7lc@vNPWv~Nb[2NPS9\,S(STmEQ_e[(v\[9\,`PT7Q*ÏsNPS9\,S(SNblV7Q_e[kdU\YNP\{h`bQI{ Õ q)rO^\UG\YNP\{h`bQ

I IÒÒÒ*I qö

Ö

{

ß

NPS?QXpNPS([kQ_V[(NP\,`f`boUT\,V[(NbihQ_e>x[(v7Q_Vy[(v7Q*\,S(S(NblVhmEQ_V[;NPS?[(v7Q*\,WX[(NbdVENPV

rãO?\\YNP\{h`bQ*{

Ö



.eI_



Wv7dSkQ_VE{o[(v7Qsgd`PNPWXo,q

NPS&Y\,Vhe7dmR`boT\,V[(NihQ_e^x[(vQ_V¡[(v7Q\,S(S(NblVhmEQ_V[*NPS*Wv7dSkQ_VTVNbOd,YmR`boE\[|Y\,Ve7dm

{oE[(v7QghY(dWXQ_SSZxNfVe7QZgQ_Ve7Q_V[;d,O>[(v7Q\,WX[(NbdVd,O>[(v7Qgd`PNfWXo,q?rtV~[(vQSkQ_WXdVe¡Sk[(\l,Q,x7Nb[&NPS2d,{hSkQZY(\{h`bQ
c@vNfWvà\,S(S(NPlVmEQ_V[ycs\,SRmR\,eQu[kd1QZ,QZY(onG\YNf\{h`bQ,qnrO[(v7QuG\YNP\{h`bQu\,S(S(NPlVmEQ_V[yOY(dm

[(vQ¡ihYSk[

Sk[(\l,Qe7dQ_SsV7d,[2WXdNPVhWZNPe7Q@cNb[(v~[(vQ\,S(SNblVmEQ_V[2mR\,eQ[kdy[(v\[sG\YNP\{h`bQ@ehT7YNPV7lU[(v7QSkQ_WXdVheS([(\l,Q,x

*
V4{Q/[(v7QVTm${QZYRd,OY\,Vedm

.pq9MQZ[
O

[(v7Q[kY\ tQ_WX[kd,Y(o¡dV3c@vNPWv¡[(v\[@v\ggQ_VS&Q_VehS|NPV¡[(v7Qe7Q_\,e/Q_Ve/Sk[(\[kQ$[(v\[|opNbQ_`PeS&Y(QZcs\Ye

T\,V[(NbihQZYSEd,O1Ìqð9,QZY(oSk[kY\[kQZl,od,Ogh`f\_o,QZY 3e7QZ[kQZYm~NPV7Q_S

\,S(S(NPlVmEQ_V[(SZq9,QZY(o3\,S(S(NPlVmEQ_V[yo{ (

Ï

í

Od,Ym

(

IÒÒÒDI 
ö
|{

Qöp@NPVeTWXQ_SGç§[kY\*tQ_WX[kd,YNPQ_SZ}|ç§vh\_,Q[(v7Q

Ò

Ï

í

K / I Öfí Ö DI c ( I ( f"IÒÒÒ*IDc Ö I Ö f"IÒÒÒ*IDc qö
I Löf
Od,Y×è í
(ILIÒÒÒvIkç?+[(v\[9gh\,S(SSk[(\l,Q[c@Nb[(v7dT[;Y(Q_\,WvNfV7l[(v7Q@e7Q_\,eRQ_VeRSk[(\[kQ\,VeRWXdV[(NPVTQ*c@Nb[(v
[(v7QUihYSk[@S([(\[kQUd,O;[(v7Q$[(vNbYe/S([(\l,Q,x\,Ve3ç1[(v\[e7Q_\,epaLQ_VeNPV/Sk[(\l,Q
 q||v7QU`f\[k[kQZYç1[kY\*t Q_WX[kd,YNPQ_S
[(v\[@edRV7d,[|Y(Q_\,Wv3Sk[(\l,QE
' \Y(Qd,O)[(v7QOd,Ym
K / I ÖPí Ö IDc ( I ( f"IÒÒÒ¬IDc Ö _I é Ö f"ILK
Od,Y`è í
(ILIÒÒÒvk
I ç?qyWZWXd,YeNPVl`bo,x+é
G  @v\,SçXÛ\ U[kY\*t Q_WX[kd,YNPQ_S[(v\[Y(Q_\,Wv4[(v7QE[(vNPYeS([(\l,Q,q
|v7QS([kYTWX[(T7Y(Qd,O)Sk[(\l,QE
 NPS*Skw,QZ[(Wv7Q_e3Od,Y 4 í E. NPV/Û)NblT7YQ_' q
|vQ[(vNPYe S([(\l,Q¦Wv7Q_WwS/c@v7QZ[(v7QZY zNPS¡S(\[(NPStihQ_e {oå[(v\[¡[kY\*k
 Q_WX[kd,Y(o×ØS3\,S(S(NPlVmEQ_V[Zq©|v7Q
|{

Ï

|{

Ï

{

·Ï

{

{

·Ï

·Ï

{

fÌ

{

¡Ï

·Ï

=Þ^ßà

Ò

P{

z

gY(dpWXQ_S(S?gh\,S(SkQ_S)SkQ_T7Q_V[(NP\,`P`bo[(v7YdT7lvU[(vQ9c@v7d`PQ9Od,Ym$Th`P\@Wv7Q_W(wpNPV7lQ_\,WvE`PNP[kQZY\,`NPVUQ_\,WvEWZ`P\,ThSkQ9Od,Y


ø

ú

ÔC

Ëv·hûûË7ü3ÍÌQhýÍ{Í.Î þL8$>Î$ÿ{Ë3



9%!Ï
6

Ô

Ô
ä

ä

ä

ß/



ß/

Ô
ä

Oå

9%!Ï
6C/

å

ß(

å

ß(
¥

ß(

å

l

!áâØã

å

9!%!Ï
6H(

y'}9|v7QSkQ_WXdVhe3Sk[(\l,Q$d,O¤GÈ |} S4 ß /

Û)NblT7YQ

ß(

¹

Ô
ä

Oå

¥

¸

Ô

Oå

¹

Ô

Ô
ä

ß/


Ô

/

Oå

Ô

ä

ä

ß/
¸

ä

¹

fÌ

\,V\,S(SNblVmEQ_V[^[kd|[(v7Q;YQ_SkgQ_WX[(Nb,Q\YNP\{h`bQ,q 4

O!d,Y@[(v7QUT\,V[(NbihQZY*gY(QXiË{ (

\

|v7Q;WZ\,SkQ9d,O7\



ÊÍ{

-

Ë{

4

* q

ÊÍ{

Ï

´ p²(¬,½ µ · s¸p¯¿ µ´ ÀGx,NqöQ,qbxdV7Q[(v\[?\,VSkc&QZYS
eT7YNPV7l[(v7Q|[(vNPYeESk[(\l,Q@cNb[(vR\,V7d,[(v7QZY&\,S(S(NblVhmEQ_V[9[(v\,VEipQ_eReTYNPV7l[(v7Q@S(Q_WXdVe~Sk[(\l,Q,x7myTSk[{Q
¢tghTVhNPS(v7Q_e£pq+ÃÚv7Q_V7QZ,QZYs[(v7QG\YNf\{h`bQWXd,YY(Q_SkgdVeNPVl[kd$[(vQNPVhNb[(NP\,`xS([kd,Y(Q_e¡\,S(S(NblVmRQ_V[s\ggQ_\YS
[(v7QgYdWXQ_S(S*Wv7Q_W(wpS|[(vh\[|[(v7QSk[kd,Y(Q_e3\,S(S(NblVmRQ_V[*NPS*WXdVSNPSk[kQ_V[*c@Nb[(v¡[(v7QWZT7YY(Q_V[*\,S(SNblVmEQ_V[Zq;rO

XRd,Y@Y(QZcs\YeX.NPS*d,{[(\,NfV7Q_e>x

QZ,Q_V[(T\,`P`bo¡[(v7Q$c@v7d`bQOd,YmyT`P\Egh\,SSkQ_S|[(v7Q$Wv7Q_WwNPVl7xjQ_Nb[(vQZY@Y(QZcs\Ye

e7QZgQ_VeNfV7l¡dV1c@v7QZ[(vQZY[(v7QROd,YmyT`P\ucs\,SUS(\[(NfStihQ_e¦\,Vhe4[(v7QRgd`PNPWXocs\,SUV7d,[yWv7Q_\[(NPVl7x?d,YyV7d,[Zq
M^QZ[
~
Õ

ß

Ý

{Qu[(v\[NPVhSk[(\,VWXQ/d,O[(v7Q/[(vhNbYeàSk[(\l,Qc@v7QZY(Q3NP[RNPSRWvQ_W(w,Q_e

c@v7QZ[(v7QZY0{
Õ

\,`bcs\_opSl,QZ[(S

\,S(S(NPlVmEQ_V[Ï
qàrã[RNPSQ_S(S(Q_V[(NP\,`f`bo¦[(v7QS(\,mEQ/e7QZ[kQZYm~NPVNPSk[(NfW~gYdWXQ_S(S~\,SRe7QXijV7Q_eàNfV¥[(v7QugY(dd,Od,O
|v7QZd,YQ_mäñ7qPx{hT7[*cv7Q_V7QZ,QZY@\,V/\,SS(NblVmEQ_V[*[kd~\E`PNP[kQZY\,`>WXdV[(\,NfVNPV7lD{

;K

V7d,[l,QZ[\,SS(NblVmEQ_V[	Ï[(v7Q$ghY(dWXQ_SS|l,dQ_S[kd¡Sk[(\[kQ

K

Õ

NfS*\,Skw,Q_e/Od,Y_xNbO{
Õ

e7dQ_S

=æçÎÞè|ékqÅ[(v7QZY(c@NfSkQ,x[(v7QygY(dpWXQ_S(Sl,dQ_S[kd¡Sk[(\[kQ

bNPSd,{[(\,NfV7Q_e>]

=Þßàq/rO*[(vQ\,S(S(NPlVmEQ_V[yWv7dSkQ_V§{o1[(vQ~gd`PNPWXo4S(\[(NPSkihQ_e1[(v7QOd,Ym$Th`P\px?YQZc&\Ye

m.pq

d,[(v7QZY(cNPSkQ[(v7QY(QZcs\Ye/NfS

9Gé |UNPSySkw,QZ[(WvQ_eNPVnÛ+NPlT7Y(Q~ñ7q4ád,[kQu[(v\[y[(v7Que\,S(v7Q_en\Y(Y(dc@S

|vQd,QZY\,`P`sSk[kYTWX[(TY(Qd,O
Y(QZgYQ_SkQ_V[Y\,Vhe7dm

fÌ

[kY\,VS(NP[(NbdVS¡\,`P`sd,O@Q_T\,`sgY(d,{j\{hNP`PNb[o,xNbY(Y(QZl\Ye`bQ_S(S$d,O[(vQ¡\,WX[(NPdVWv7dS(Q_Vjx

Skd`PNfe§\Y(Yd
c@SyY(QZgYQ_SkQ_V[Ee7QZ[kQZYmRNPVNPS([(NPWE[kY\,VSNb[(NbdVSyWXd,Y(Y(Q_SkgdVehNPV7l3[kd [(v7Qu\,WX[(NbdVà?YT7Q,xed,[k[kQ_e
\Y(Y(dc@SY(QZgY(Q_SkQ_V[e7QZ[kQZYmRNPVhNPSk[(NPW[kY\,VhS(Nb[(NbdVS@WXd,Y(Y(Q_SkgdVeNfV7lR[kd[(v7Q$\,WX[(NbdV Û\,`fSkQ,x\,Vhee7d,[taeh\,S(v
\Y(Y(dc@S*Y(QZghY(Q_SkQ_V[|[kY\,VS(NP[(NbdVSs[(v\[@\YQO!d,YWXQ_e^xc@v\[kQZ,QZY[(v7QUWvdNPWXQd,O)\,WX[(NbdV>q

c@Nb[(v$G\YNP\{h`bQ_S
ö \,Ves|V Y\,Ve7dmëTh\,V[(NijQZYSZx,\,Ve
Z
( I - IÒÒÒ*I q
WXdVS(Nfe7QZY×GÈ |q;Ç2Q_WZ\,ThSkQ@[(v7Q@[(vNbYeESk[(\l,QNPSe7QZ[kQZYmRNPVNPS([(NPWx,[(v7Q|gYdWXQ_S(S9v\,SÀGç`Û &[kY\*tQ_WX[kd,YNPQ_SZx
çÛ*
d,O)c@vhNPWvuYQ_\,Wv Sk[(\l,Q
' qsád
cUx\,S(STmEQ[(v\[1
 NPS\Rgd`PNPWXo,xcvNPWv3NPS ´ ¯,· ¶µ!¶ ½²Z·h½|c@NP[(vu[(v7Q
D¡ ¦×¸N¨L­¨Q¶®²£J³"¦º¯Ê¨U³t½y¥"§v¦À«®­¬¥"¦Ú³t¨Q¸¥"«®£S­÷±/¦¥¾&¦º¦º­`¥"§v¦Àµ*³"£¸º¦º²²}¨L­(½_¥"§v¦×µ/£S¶®«®¸»÷¨Q²}¨L­÷«®­¥"¦³t¨Q¸Ú¥"«¹´S¦µ*³"££Lû0²·»D²·¥"¦º©[ý
¾+§v¦Ú³"¦°¥"§v¦°µ/£Q¶¹«®¸»9µ*³"¦²¦º­¥"²¨Àµ*³"££Qû ¨Q­(½J¥"§v¦°µD³"£¸º¦º²²6¸Ú§*¦º¸Úª¬²0«¼¥"²+¸º£Q³³"¦¸¥"­v¦º²²º¡
&dVhS(NPe7QZY)\@Od,YmyT`P\-Ì

w

É x4y

{

fÌ

|{

|{

Ò

Ò

ê 4ë



Ð 38·?Ñ>Ò©Ëv{v8Ì¨Í.Î·Ò^ÑjÓÔ



ì ±í=î

î
ð

î



ìÎÿ íbï

î
ï

ð

±ñ ó

ôOõ·ö÷øù^úû#ü ôOý\þ
ó

ì ±#íÍï

ï

$33Ò$3

±ñ ±

ô^õö÷øùú^û#ü ôOý·ö î|ï
ï


ð

ÿ ñ±


ô^õö÷øùú^û#ü ôOý
ò

ò

±ñ ó

±ñ ±

ì

ò ÿ ñ±



ì

ô^õö÷øùú^û#ü ôOý


	




ÃG

Û)NblTY(Qñ7}9ëSkw,QZ[(Wv3d,O éfÌ|q

d,{hSkQZYG\[(NbdVhS)O!Y(dm©[(v7Q*çuSk[kQZghSeTYNPV7l[(v7Q|SkQ_WXdVe~Sk[(\l,Q,xNqöQ,qbxc@v7Q_V7QZ,QZYNP[NPS¢k\,Skw,Q_e£[kdUlNb,Q|\,V
\,S(S(NPlVmEQ_V[@[kd¡\~\YNP\{h`PQeT7YNPV7lE[(v7Qy[(vNbYe3Sk[(\l,Qx^Nb[edQ_SSkd¡\,WZWXd,YeNPV7l[kd[(v7QUd,{hS(QZY(G\[(NPdVS
eT7YNPV7l[(v7Q~SkQ_WXdVe§Sk[(\l,Q\,Vhe4[(v7QZY(QZOd,Y(Q~Nb[\,SS(NblVS[(vQRS(\,mEQR\,`PT7QE[kdQZ,QZY(o4\ggQ_\Y\,VWXQRd,O*\

Ù ß ô qÇ&Q_WZ\,TS(Q

}é å

d,O[(v7Q[kY\*t
 Q_WX[kd,YNPQ_Ss[(v\[
'WXd,Y(Y(Q_S(gdVhe/[kd¡\S(\[(NfSkO!opNPV7l\,S(S(NblVmRQ_V[\,Ve3\Y(QWXdV[(NPVTQ_eTVhe7QZY@[(vNfS|gd`PNPWXo
[kd¡Sk[(\[kQ;K
c@v7QZY(Q$[(v7QZouY(Q_WXQ_Nb,QY(QZcs\YejqQ_VWXQ,x[(v7QyvhNPSk[kd,Y(oae7QZgQ_Ve7Q_V[|\,`PT7Qd,O×GÈ |@NPS
( Ûtmé å Û*
é~ å q
í
Û7d,Y
ì
x2\,VNPVhWXdVS(NPSk[kQ_V[/d,Y ´ 7
 ²(¬,½ µ ·Ï gd`PNfWXo1dV È
G  |ymR\_o¥v\
,Q3gQZY(Od,YmR\,VWXQ
Z
å
l,Y(Q_\[kQZY[(vh\,Vn9é 
q|v7QZY(QZOd,Y(Q,x>c&QEv\_,QE[kdugQZY(Od,Ymô\ghY(d,{h\{hNP`fNb[ou\,mEgh`fNijWZ\[(NbdV\,SNPV[(v7Q
gY(dd,Od,O|v7QZd,Y(Q_mñ7qs[(v\[?ghTVNPSv7Q_S>Wv7Q_\[(NfV7l7q?Ã4Q&WXdVSk[kYThWX[G~
Ù  |O!Y(dm  WXd,ghNbQ_SG IÒÒÒ*IUGÙ
d,O0é
G  @*[(v7Q|QX7\,WX[2\,`PT7Q*d,O+ cNP`P`{Q|e7QZ[kQZYmRNPVQ_eR`P\[kQZY¾xS(TWvR[(v\[9[(v7QNPVNb[(NP\,`pSk[(\[kQ(d,O0GpÙ  |
NPS[(v7QRNfVNb[(NP\,`+Sk[(\[kQ~d,O<G ( x\,Ve [(v7Q~NfVNb[(NP\,`+Sk[(\[kQRd,O<G Ö ( NPS[(vQijV\,`;Sk[(\[kQOK
~d,O<G Ö qErO&NPV
SkdmEQUY(QZgQZ[(Nb[(NbdVu\R[kY\*t
 Q_WX[kd,Y(o/NfS*WZ\,T7lv[Wv7Q_\[(NfV7l7xh[(v7Q_V3Nb[@NPS*SkQ_V[@[kd~[(v7Q3¢tgQ_V\,`b[o{d
p£R\,Vhe/NPS
V7d,[9WXdV[(NPVT7Q_eRNPVR[(v7Q|Od`P`bd
cNPV7lY(QZgQZ[(Nb[(NbdVS_q?Q_VWXQ,xNP[WZ\,VV7d,[2WXd`f`bQ_WX[9\,VomRd,Y(Q|Y(QZcs\YeSZq)d,Y(Q
Od,YmR\,`P`bo,x7[(vQSk[(\[kQ_SK
;d,O)\,`f`[(v7QyG Ö S|\YQUNPe7Q_V[(NihQ_eu\,S|\~TVNPT7QS(NPV7wSk[(\[kQUd,OÃG~
Ù  |q
å
rãO
)
x
(
[
7
v
_
Q
¥
V
P
N
¦
V
_
Q
,
\

W
¥
v
(
Y

d

T
h
V
e


,
d

Y
(
Y
Z
Q

g
Z
Q
(
[
b
N
(
[
b
N

d
j
V


)
x
X
Q
p


g
_
Q
X
W
k
[
_
Q
§
e

Y
Z
Q
&
c

\

Y
h
e
S
ª
[


é

WZ\,V§{Q
Z
å
WXd`P`bQ_WX[kQ_e^xh\,Ve/v7Q_VhWXQ[(v7Q\,`PT7Qd,O°Gp
Ù  |sNPS Û té q
&dVhS(NPe7QZY@\~O!d,Ym$T`f\ ëZ ì
q*|v7Q_V/\V7dVpaWv7Q_\[(NPV7lgd`fNPWXoOd,Y[G
Ù  |*v\,SgQZY(Od,YmR\,VWXQ
å
`bQ_S(Ss[(vh\,VyÛ¬
q&*v7Q_\[(NPV7lgd`PNPWZNbQ_S&mR\
o¡vh\_,Q{QZ[k[kQZY|gQZY(Od,YmR\,VWXQ_SZq;Ã4Q$WZ`P\,NPmé[(v\[|Od,Y|\,`P`+
x
[(v7Q|\,`PT7Q*d,O0G~
Ù  @)NPS\[&mEdSk[À<Û å G ç;q;|vQ*gY(dd,ONfS;\,V~NPVehTWX[(NbdVdV  q2&dVhS(NPe7QZY}G (  |x
c@vNfWvv\,S)[(v7Q|S(\,mRQ*G\,`PTQs\,SÃÈ
G  |q;Q_VWXQ,x[(v7Q*\,`PT7Q&d,O1G (  |?NPS;\[mRdSk[|q;S;\,VENPVheTWX[(Nb,Q
vogd,[(v7Q_S(NfSZx`PQZ[&TSs\,S(STmEQ[(v\[Gp
Ù  |2v\,S&G\,`fT7Q\[*mEdS([`ÛQ å G ç;q;rãV[(v7QNPVheTWX[(Nb,QSk[kQZg^x
c&Q$WXdVS(Nfe7QZY9G~Ù
G  ||O!d`P`Pd
c&Q_e/{oGÙ  |q@S(S(TmEQU[(v\[\~gd`fNPWXo Wv7Q_\[(SdV
(  @xNqöQ,qÈ
d,O[(v7Q $\,SS(NblVmEQ_V[(SZqÛ7Y(dmª[(v7Qyçn[kY\*t
 Q_WX[kd,YNbQ_S[(v\[WXd,Y(Y(Q_SkgdVe[kdu\,V\,SS(NblVmEQ_V[Zx>\[`bQ_\,Sk[
NPS|[kY\ggQ_euOd,Y@Wv7Q_\[(NfV7lTVhe7QZY|\RWvQ_\[(NPV7l~gd`PNfWXo,x\,Ve/\[mRdSk[|çå
é m~\_oud,{[(\,NPV/Y(QZc&\YeX q
|v7Q_V [(vQEY(QZc&\Ye4d,{[(\,NPV7Q_e¦NPV [(v7QihYS([YdTVe4NPS\[UmRdSk[y å
÷Û - + ö ö  å - (10 x?\,Ve [(vQEY(QZc&\YeS
\YNP\{h`bQNPV

~

Ì

Y(Q_\,WvS([(\l,Q

Z

]Õ

x7\UOY\,WX[(NbdVd,OmRd,Y(Q[(vh\,V

É x4y

w

VÞ^ßà

fÌ

]Õ

&

Ì

w

]Õ

É x4y

fÌ

]Õ

fÌ

fÌ

fÌ

=Þ^ßà

¢

=æfçÎÞè|é

"Ì

w

fÌ

É x4y

]Õ

&

fÌ

0Ì

w

]Õ

*&

É x4y

fÌ

]Õ

]Õ 

fÌ

fÌ

fÌ

fÌ

]Õ

fÌ

¢

fÌ

fÌ





fÌ

Ò

]Õ

U>>





ÔC

Ëv·hûûË7ü3ÍÌQhýÍ{Í.Î þL8$>Î$ÿ{Ë3
ú

é - ö  -


d,{[(\,NPVQ_eNPV/[(v7Q$Od`P`bdc@NPV7l~Y(dTVeS@\Y(QymyT`b[(NPgh`PNbQ_e{o¦

*

- ö  -


x{Q_WZ\,ThSkQ$\O!Y\,WX[(NbdV3d,O

d,O

[(v7Q[kY\ kQ_WX[kd,YNbQ_S@\Y(QSkQ_V[*[kdE[(v7QgQ_V\,`b[o{d_q¨S(NfV7l[(v7QNPVeTWX[(NPdVvogd,[(v7Q_SNPSZxpc2Qd,{h[(\,NPV¡[(v7Q

°GÙ (  |sThVe7QZYm O!d,Y\,V/\Y({hNb[kY\Y(oq
yÛçå
é 
 j<é 
çÛ*
GçÛ*  Û_\,`L·GÙ7 |k

yÛçå
é 
 j<é 
å
çÛ*
GçÛ*  ÛrsÛv wGç 


¤Û* å
wG çé   Û  ç  sÛ*Gç å 

¤Û* å
wG ç

Od`P`bd
cNPV7lET7ggQZYs{dTVeO!d,Y[(v7QgQZY(Od,YmR\,VWXQd,O

 ·GÙ

¸7²Z­!õ 7

QIU

( fÌ|
¢





r å
r å




]Õ





fÌ

Ò



]Õ



Ò





í



Ò

]Õ





fÌ

¢

]Õ

]Õ

T





Ò

]Õ

T



Z

|vNfSWXdmEgj`bQZ[kQ_S[(v7QENPVeTWX[(NPdV3Sk[kQZg^qQ_VWXQ,x^c&Q$ghY(d
,Q_e [(v\[Zx>Od,YTÌéì

ÃG~Ù |&NfS|\[@mEdSk[sÛ* å wGç;q

[(v7Q\,`PT7Qd,O

]Õ

fÌ

9,Q_V[(T\,`f`bo,xc2Q¦vh\_,Q1[kdàih



[(v7Q¦WXdVhSk[(\,V[(S_qîÃ4Q¦WvddSkQ

lT\Y\,V[kQZQ_S[(v\[




w

]Õ

]Õ

x

\,VeO!d,YQZ,QZY(o

É x4y

X

S(TWvß[(v\[

Õ

åå

.
&

.

méG¤Ûtmé å ¤ é å F.eÒ

t

s¡S(TWvu[(v\[



Ò

- î
q
|vNPS
(

&

áQX[Zxc&QUWv7ddS(Q

GçïsÛkté¤Ûté å ¤é~ å QÒ
[(v\[WXdVS(NPSk[(S/d,OÚ
 YQZgQZ[(NP[(NbdVS¡d,OGé @\,S3e7Q_S(WXYNb{Q_e
]Õ

]Õ

Gé!  |¡{Q4[(vQ1&ÅÄ
\{d,Q,q
¡ NPS|`PNPVQ_\Y|NPV¡[(v7QUVTm${QZY
xç;x7d,O)\YNP\{h`PQ_Ssd,O ß\,Veuv7Q_VWXQU`fNPV7Q_\Y|NPV¡[(v7Q$`bQ_V7l,[(v¡d,O x
ÚWZ\,V3{Q[kY\,VhSkO!d,YmEQ_eu[kd È
G !  |sNPV¡gd`bopV7dmRNf\,`j[(NfmEQ,q|v7Q\{d
,QUQ_Sk[(NPmR\[kQ_S@lT\Y\,V[kQZQU[(v\[
\,`PT7Qd,O"
G !  |2Od,Y ÜZ ì
È
ÛD å wG ç ï té ¤ÛDsÛ té å [Ò
|v7QYNPlv[tav\,VheSNPe7Qd,O[(vNfS*NPV7Q_T\,`PNb[o~NPSs\E`bd
c&QZY|{dTVeOd,Y@\,VZ
 a\gghY(d_7NPmR\[(NbdV¡d,O+[(v7Q\,`PT7Q
d,O é
G !  @2O!d,Y Z
qQ_VWXQ,x
x[(v7Q_V È
G !  |&v\,S*\,`PT7QÔÛ té å xh\,Vhe
W NPO Z
x[(v7Q_V È
G !  |&v\,S*\,`PT7QÜ
ï téG °Û*sÛ té å q
W NPO ÜZ ì
Q_VWXQ,x*\4gd`boVdmRNP\,`aL[(NPmRQ_
 a\ggY(d
pNfmR\[(NbdVàd,O[(v7Q/\,`PT7Qud,O È
G !  |S(vd
c@SEcv7QZ[(v7QZY îNPSENPV
M^QZ[

fÌ

fÌ

Ç&Q_WZ\,TSkQ

EÌ

Ì

\Ì

fÌ

fÌ

fÌ

	Ì

	Ì

w

É x4y

]Õ



]Õ



É x4y

w

EÌ

w

É x4y

fÌ

EÌ

w

É x4y

fÌ

]Õ

]Õ

fÌ

'Ì

q

É x4y
w

&dVhWZ`PTeNPVl7x?`bQZ[CÈ{Q\,Vo1SkQZ[NPV§&p@s@q?|v7QZYQRQXpNfSk[(S$\gd`bopV7dmRNP\,`aL[(NfmEQOTVhWX[(NbdV¡Ó
c@vNfWv mR\ghSQZ,QZYoNPVhSk[(\,VWXQ¾{¦d,O©[kd3\¡{dTVhe7Q_e3QZYY(d,YSk[kdpWv\,Sk[(NfWEO!d,Ym$T`f\}Ó;o{>

 å

QZY(Y(d,Y

]Õ

\,Ve4YQ_eTWXQ_STé[kd

G

\ggYd_7NPmR\[kQ|\,`PT7Q*d,O È! fÌ
Ô

w

É x4y

q?Y\,VSkOd,YmkÌÔ¡NfV[kd/[(vQ&ÅÄ

xdV7Q@WZ\,V\,VSkc&QZYU¢·Ì
Ô

Z

[(NPmEQ,q@vNPS*S(v7dc@S*[(v\["ÜNfS*NPVu|x\,Ve3WXdVSkQ_T7Q_V[(`Po¡

w

É x4y$#

í

£\,VheRv7Q_VWXQP{

&7@*|q

e2

n

²Z½

6

(

U>VU

Ô

c@Nb[(v

fÌÔq¡¨SNPV7lu[(v7Q

Z

_a

ÚNPVEgd`bopV7dmRNP\,`

J. ~ï \Ë p² µ!¶ ½L¯­¾À³t±²¸7²Z·j±²X·j½$°¬¿â²¯tõ»Â9«3º»
³k¬¸¸­t¯¬É µ R ¬ÁZ¿b² µ õU¬·j±¡¯·¿À µ õ| í &p@sË

~vy~ÉÉ$yÅl
­(²X÷9¬­k± ¶$µ!¶

w

Gé! 

Ì

í

¶

M

iÏ²Z·²X­k¬¿

÷ µ ½

Ð 38·?Ñ>Ò©Ëv{v8Ì¨Í.Î·Ò^ÑjÓÔ

>

%)CYj

$33Ò$3

å

2g

s\,`PWZTh`P\[(NPV7l4[(v7Q3ijVNb[kQXavd,YNbÆZdVàgQZY(Od,YmR\,VWXQ3d,OSk[(\[(NbdV\Y(oàgd`PNfWZNbQ_SRNPSRNfV

\ghMÈTVev7Q_Vw

(././.x7c@vNPWvNPS2\S(T7{>WZ`P\,S(S;d,O[(v7QWZ`f\,S(S&d,O>gd`PoV7dm~NP\,`7[(NPmEQWXdmEghT[(\{h`bQ@OTVWX[(NPdVSZq)|v7Q

QZ[s\,`qbx

Sk[(\[(NbdVh\Y(oEgd`PNPWXoQXpNfSk[kQ_VWXQgY(d,{h`bQ_m

O!d,YsÄ2S2NfS2S(vd
c@V~[kd${Qav\Ye~{o~)\gh\,ehNPmRNb[kYNPdTR\,Ve

|S(NP[(S(Nbwp`PNPSt_,,ÙxOY(dmÈc@vNPWv¡Nb[sO!d`P`Pd
c@Ss[(v\[siVeNPV7ly\,Vud,g[(NPm~\,`S([(\[(NbdV\Y(ogd`PNPWXoROd,Y|Ä2S
NPSs;avh\Ye>q9dENb[sNPSsV7d,[*S(T7Y(gYNPS(NPV7l[(vh\[s\ghgY(d_7NPmR\[(NfV7lU[(v7Qd,g[(NfmR\,`gd`fNPWXoRNPSs\,`PSkd;av\Ye>q;Ã4Q
NPVWZ`fTe7Qy[(v7QROd`P`bd
cNPV7l[(v7QZd,Y(Q_m

{Q_WZ\,TS(QRNb[\,`P`bdc@STS[kd/ghY(Q_SkQ_V[dV7QR\,SkgQ_WX[d,Os[(v7QEY(Q_ehTWX[(NbdV

¹

TSkQ_e3NPV¡[(v7QgY(dd,O+d,O+|vQZd,Y(Q_m

Ýq RNfVuNPSkd`P\[(NbdV^q

8Sx~3y{Ê 1 p²¸j­k¯ÁX¿P²Ê ¯tõ÷³k¬±± µ ½ µ °²u¬¸¸j­t¯DÉ µ E¬½ µ ·Ï§½p²¡¯¸½ µ R¬¿
«3º» ¶µ!¶ |³Ú
 ¬­k±\Ë
(



¶ ½L¬,½ µ ¯·j¬­¾À¸p¯¿ µ´ À$õZ¯­

|vQghY(dd,O?S(v7d
cSs[(vNPS&O!d,Y*[(vQWZ\,S(Qd,O?V7dVpaVQZl\[(Nb,QY(QZcs\YeSZ]7[(v7QTVY(Q_Sk[kYNPWX[kQ_e¡WZ\,SkQOd`P`bdc@S

'q¹x[(vNPS$S(v7d
cSU[(v\[yijVheNPV7l/\m$Th`b[(Nbgh`PNfWZ\[(Nb,QR\ggY(d
pNfmR\[(NbdV

NPmRmRQ_eNP\[kQ_`bo,q3Ç&o¦9Y(d,gdS(Nb[(NbdV

S(Wv7Q_mEQOd,Y|[(vNPS|gY(d,{h`bQ_mÈNPS@\,`PSkdR;avh\Ye>q

:üy{~O~q7
~

&dVS(Nfe7QZY@[(v7Qy;aWXdmEgj`bQZ[kQ$ghY(d,{h`bQ_m'&)(*>}*lNb,Q_V \Ç&dd`bQ_\,V WZNbYWZTNb[
 #

o{>



\,VeNPV7ghT[P{xNPS
~

Ç&dd`bQ_\,V4WZNbYWZTNP[\,Ve Nb[(SNPV7gjT7[@WZ\,V {QyS(QZQ_V4\,S\¡eNPY(Q_WX[kQ_e \,WXoWZ`PNfW$l,Y\ghv>q9\,Wv


.
_.$d,Y\Y(Q[(v7QNPVghT7[l\[kQ_SZx7cvNPWvY(QZgYQ_SkQ_V[s[(v7Q{hNb[(S&d,O^[(vQ@ipQ_e¡NPV7ghT[ /[kd[(v7Q
WZNbYWZThNb[Zq)rãV7gjT7[2l\[kQ_S@v\_,QNPVhe7QZl,Y(QZQ_p
. q`f`áÅ l\[kQ_S@vh\_,QNPVeQZl,Y(QZQyx\,Vhe\,`f`áÄÜ\,VheuÅÖ
l\[kQ_S|v\
,QNPVe7QZl,YQZQ[
 q|vQZY(QNfS2dVQl\[kQvh\_pNPV7lydT7[(e7QZl,Y(QZQ`p. q|vhNPS9l\[kQNfS&WZ\,`f`bQ_e[(v7QdT[kghT7[
l\[kQ,xhOY(dmäcvNPWv¡[(vQY(Q_S(T`P[&d,O)[(v7QWXdmRghT7[(\[(NbdVud,O;WZNbYWZTNb[
dV/NfV7ghT7[ WZ\,V/{QYQ_\,e>q
Û7Ydm
S(ThWv¦\3WZNbYWZTNb[
x+\,V§Ä
G WZ\,V1{Q~WXdVS([kYTWX[kQ_en\,SOd`P`bd
cSZqÇ&Q_WZ\,TS(Q~[(v7Q{h\,S(NPW
í
V7dpe7QUYQZgY(Q_SkQ_V[(S\l\[kQ,x^\,Ve3QZ,QZY(o3l\[kQEv\,SdV7Qyd,O;[(v7Q$[ogQ_SáÄyxÅÖxáÅx d,Yyq|v7Q

l\[kQ_S*d,O^[ogQ

{

~

{

~

NPe7Q_\yd,O?[(v7QWXdVSk[kYThWX[(NbdVuNPS&,QZY(o¡S(NPmRNP`f\Y2[kdEdV7QS(vd
c@VuNPV4)\gh\,eNfmRNb[kYNbdT¡ë|S(NP[(S(Nbwp`PNPSZx_,,Ùx

c&Q`bQ_\
,QdT[9[kQ_WvhVNPWZ\,`e7QZ[(\,NP`PSZq;S2\,VNPVNP[(NP\,`7S(NPmEgj`PNbOoNPVl\,S(STmEg[(NbdV^x\,S(S(TmRQ@[(v\[&[(v7QWZNPYWZTNb[
v\,SV7d¡áÅzl\[kQ_S_qU9\,Wv l\[kQyd,O2[(v7QWZNbYWZTNb[{Q_WXdmEQ_S\S([(\[kQEd,O[(v7QEÄ@q@v7QyS([(\Y([Sk[(\[kQ

G

NPS@[(v7QUdT7[kgjT7[|l\[kQ,qÖ@QZ,QZYSkQy\,`P`^Q_e7l,Q_Sd,O)[(v7QyWZNbYWZTNb[Zq*Q_VWXQ,x\R[kY\,VSNb[(NbdV3NfV
l\[kQENPV

`bQ_\,eS@O!Y(dmô\

[kddV7Qyd,ONb[(S@ghY(Q_e7Q_WXQ_S(Skd,YSZqë[kY\,VhS(Nb[(NbdV3O!Y(dmô\,V4ÅÖÜl\[kQeQZgQ_VheS|dV[(v7Q\,WX[(NbdV
~

i.¡Nb[(S`bQZO[gY(Q_e7Q_WXQ_S(S(d,YNPSY(Q_\,Wv7Q_e^x\,VedV4\,WX[(NbdVàENb[(SYNblv[

\,Ve NPSe7QZ[kQZYmRNPVNPS([(NPWqUÅV \,WX[(NbdV
gY(Q_eQ_WXQ_S(Skd,Y9NPSY(Q_\,Wv7Q_e^q)
dV4[(v7QR\,WX[(NPdV>qEÃ

[kY\,VhS(Nb[(NbdVyOY(dm©\,VRáÄÚl\[kQNPS;gYd,{h\{hNP`PNfSk[(NPW\,Ve~e7dQ_S9V7d,[9e7QZgQ_Ve

NP[(v4gY(d,{h\{jNP`PNb[o

[(v7QYNblv[*ghY(Q_e7Q_WXQ_S(Skd,YNPSsY(Q_\,WvQ_e>q

-

(

[(v7QR`bQZO[gY(Q_e7Q_WXQ_S(S(d,YUNPSY(Q_\,Wv7Q_e>x?\,Vhe4c@Nb[(vgY(d,{j\{hNP`PNb[o

-

(

&dV[(NPVT7Q/WXdVS(Nfe7QZYNPV7l \1WZNbYWZTNb[c@Nb[(v7dT[áÅäl\[kQ_S_qårãO\,VNfV7ghT7[l\[kQ/c@NP[(v¥G\,`PTQ1/NPS

÷.RNPS|YQ_\,Wv7Q_e>xV7d
Y(QZcs\YeRNPSl\,NPV7Q_e>xcvNPWv~mR\w,Q_S[(v7Q@[kd,[(\,`hQXpgQ_WX[kQ_eRY(QZcs\YeRV7d,[(NfWXQ_\{h`boES(mR\,`P`PQZY;[(v\,VEd,[(v7QZY(cNPSkQ,q
rãO
 > í
x[(vQ_VE[(v7Q|\,WX[(NbdVS9WZ\,VE{QsWv7dSkQ_VR\[;[(vQÅÖl\[kQ_S2Skd[(v\[;QZ,QZY(o[kY\*kQ_WX[kd,Y(oY(Q_\,WvQ_S
Y(Q_\,Wv7Q_e>xj\`P\Y(l,Q$gdSNb[(Nb,QY(QZcs\Ye3NfS*l\,NPV7Q_e>xj\,Ve3NbO)\,VNPV7ghT7[sl\[kQyc@Nb[(vu\,`PT7Q
~

o{

\,VNPV7ghT7[*l\[kQyc@Nb[(v3G\,`fT7Q~]NbO)[(vNPS@WXdVheNb[(NbdV/vd`PeSZx[(vQ_VNb[m$TS([@{Q[(v\[

~

[(v7QUÄ

o{> í

q@Q_VWXQ,x

vh\,S|\E`P\Y(l,QgdS(NP[(Nb,QG\,`PTQNbO?\,Ve/dV`bo¡NbO ~ o{ í
q
rãO9[(v7QRWZNPYWZTNb[v\,SáÅël\[kQ_SZx+c2QRV7QZQ_e [kduYQ_mEQ_mU{QZY[(v7QEgj\YNb[od,O2[(vQRVTm${QZYd,O2áÅ

*

l\[kQ_SdV Q_\,Wv4[kY\ kQ_WX[kd,Y(o,qrO2[(v7Qgh\YNb[oNPSQZ,Q_V>xQZ,QZY(o[(vhNPV7l¡l,dQ_SU\,Se7Q_S(WXYNP{Q_e\{d
,Q,qyrO2[(v7Q
gh\YNP[oRNPS2dehe>x[(v7Q_V[(v7QY(d`bQd,OáÄ\,Vhe¡ÅÖ

.

l\[kQ_S|NfS9Skc@NP[(Wv7Q_e>xp\,Ve[(v7QY(d`bQ@d,O $\,Ve|l\[kQ_S

°

NPSS(c@Nb[(WvQ_e>q?rãO\áÅàl\[kQNPSY(Q_\,Wv7Q_e^x[(v7Q*gj\YNb[oy{hNb[NfS jNbggQ_e>q?Û7d,Y9QZ,QZY(oEl\[kQNPV[(v7Q@WZNPYWZTNb[Zx
c&QV7dcÚ[(\w,Q[c&dÄSk[(\[kQ_SZ}9dV7QOd,YsQZ,Q_V¡\,VedV7QOd,YsdeheRgh\YNP[o,qQ_VWXQ,xNbO,+zNPS2[(v7QS(QZ[&d,O
l\[kQ_SNPV
~

x7[(v7QÄ

] .eI_

vh\,S@Sk[(\[kQ_S-+





qs|v7QSk[(\[kQ$[kY\,VS(Nb[(NPdV¡OTVhWX[(NbdVuNPS

U>

ú

ÔC

Ëv·hûûË7ü3ÍÌQhýÍ{Í.Î þL8$>Î$ÿ{Ë3

.//
//
//

( x

//
-

//
í

NbO NPS\,V§ÅÖl\[kQ\,Vheuæ
\,Veæ

//

RZkKrIæQIUgqI
K h Iæ h k

K
.d,Y¡KNPS\,V¦áÄÈl\[kQ
í
h
h





,
x
æ
æ

x
,
\

V

e
K
P
N
*
S

g
YQ_e7Q_WXQ_S(Skd,YJgd,OÃK]
í
í
NbOKNPS\,V§ÅÖl\[kQ\,Vheuæ í

d,Y¡KNPS\,V¦áÄÈl\[kQ
\,Veæ í 
. x,æ í æ h x\,VeK h NPS*gYQ_e7Q_WXQ_S(Skd,YJ.Rd,O°K]
NbO
K NPS\,V§ÅÖl\[kQ\,Vheuæ í 
d,Y¡KNPS\,V¦áÄÈl\[kQ
\,Veæ í 
. x,æ í æ
!h x\,VeK¬hNPS*gYQ_e7Q_WXQ_S(Skd,YUd,O°K]
NbOy 
K NPS\náÅïl\[kQ4\,VeBK h NfS\§gY(Q_e7Q_WXQ_SSkd,Yd,OsK \,Ve
æqh í
u
é æ?]
NbO+
K NPS&\,VNfV7ghT7[l\[kQd,Y&[(v7QS(NPV7wESk[(\[kQ,x\,VeKDh NPS9[(vQS(NPVw

x

//

0

//
-

//
//
//

( x

x

//
//
//
//
//1

x

Sk[(\[kQ,q

 í 2°í Ù

ád
cc&Q|v\
,Q*[kdSkgQ_WZNbO!o[(vQ*Y(QZc&\YeOTVhWX[(NbdV>qrãOj\,VENfV7ghT7[?l\[kQ*c@Nb[(vyG\,`fT7Q&NfS?Q_VhWXdTV[kQZYQ_e

*

¢

dV1\¡[kY\ kQ_WX[kd,Y(o c@v7QZYQy[(vQEgh\YNb[o3d,OsáÅël\[kQ_S$NPSQZ,Q_V>x[(vQ_V Y(QZc&\Ye

¢

( NPSd,{[(\,NfV7Q_e>x

së ëNfS;[(v7Q@S(NPÆZQ@d,O>WZNbYWZTNP[ q;|v7Q|S(\,mRQ@Y(QZcs\Ye~NfS;d,{[(\,NPV7Q_eNbO\,V~NPV7gjT7[)l\[kQc@NP[(vEG\,`fT7QJ.
*
l\[kQ_S|NPS&dpee>q;`f`hd,[(v7QZY*[kY\*tQ_WX[kd,YNPQ_S
d,{[(\,NPV/Y(QZc&\Yep
.q
|vTSQ_\,Wv1[kY\*t
 Q_WX[kd,YoY(Q_WXQ_NP,Q_SY(QZcs\Ye Q_Nb[(v7QZY_.d,Yy í 2°í Ù ( q$|v7QZY(Q\Y(QR\[mEdSk[y í 2°í [kY\Ga
c@v7QZYQ

~

~

NPS&Q_VWXdTV[kQZY(Q_e¡dV¡\y[kY\ kQ_WX[kd,Y(ocv7QZY(Q[(v7Qgh\YNb[oRd,O?áÅ

¢

¢

kQ_WX[kd,YNbQ_SO!d,YQ_\,Wvgd`PNPWXo,q*rãO\Rgd`PNfWXo¡Wv7ddSkQ_S[(v7Q$WXd,Y(YQ_WX[\,`PT7Q_S@O!d,Y\,`P`[(v7Q$l\[kQ_SNfVud,Ye7QZY[kd
gY(d,Q~[(v\[
 > í
O|\,V1d,gh[(NPmR\,`
Ù ( qÅ[(x)v7NPQZV4Y(cd,[(NPSkv7Q,QZxYy[(v7c2Q$d,YQXeSUgQ_NbO WX[kQ_e >G \,í`fT7QUNPx)S[(\v7[Q_V1`bQ_\,[(vS([9Q~ QXí p2°gí Q_Ù WX[kQ_( e¦( Gí 2°\,`fí T7ÔBQR/d,3
gd`PNPWXo¡NPS9 í 2°í

`bd
c&QZY[(v\,V
Ù
Ù
(
(
 í 2°í xjNqöQ,qbxh\[@mEdS([J í 2°í é/ q
|vTSZxNPO@\,Và\ggY(d
pNfmR\[(NbdV¥\,`bl,d,YNb[(vhm
 d,O@[(vQd,gh[(NPmR\,`
Ù ( éNfS$ cd,NbYÀ[(vïNPV§ í \,2°Vàí Ù\,e(eéNb[( Nb,qQ¡Ç&WXodVNPVSkSk[(g\,VQ_WX[O[(Nb§
gd`PNPWXo,x
NP[^c@NP`P`Q_Nb[(v7QZYlNb,Q9\*\,`PT7QÔ í 2°í
dVd,O[(v7QdT[kghT7[Zx
dV7QWZ\,V¡NPmRmEQ_eNf\[kQ_`boRe7QZ[kQZYmRNfV7Q@c@vQZ[(v7QZY
  í
q2|vThSZx\,Voÿ
 a\,eehNb[(Nb,Q\ghgY(d_7NPmR\[(NPdV~Od,Y
~

¢

¢

~

o{

¢

o{

¢

¢

¢

¢

Ú

¢

¢

¢

~

¢

¢

o{

[(vNPSsghY(d,{h`bQ_mämyTSk[*[(\w,Qy\[@`bQ_\,Sk[|gd`bopV7dmRNf\,`j[(NfmEQ,q

rtVÛ+NPlT7Y(Q*Ýx\,VQXp\,mEgj`bQ&WZNPYWZTNb[+\,Vey[(v7Q*Ä4[kdc@vNfWvyNb[+NfS?[kY\,VSkOd,YmEQ_ey\Y(QslNb,Q_V>q;,QZY(o
l\[kQ¡d,O*[(v7QWZNPYWZTNb[UNfS[kY\,VS(O!d,YmRQ_e¦[kd[c&dS([(\[kQ_Sd,O*[(v7QÄ|}+dV7QWXd,go1Od,Y¡²Z°²X·àgj\YNb[o4d,O

*

áÅàl\[kQ_S2gh\,S(SkQ_e~dVE[(v\[9[kY\ tQ_WX[kd,Y(o3NfVeNPWZ\[kQ_e{oE\[(vNPVdT7[(`fNPV7Q*d,O[(v7Q@Sk[(\[kQ\,VeEdV7QWXd,go

*

Od,Yy¯_±±gh\YNb[o¡d,OáÅßl\[kQ_Sgh\,S(S(Q_e/dV/[(vh\[[kY\ kQ_WX[kd,Y(o¦NPVheNPWZ\[kQ_e/{ou\R[(vNfW(wudT7[(`PNfV7Qd,O;[(v7Q
Sk[(\[kQq©S(d`PNPe3\YY(d
cêNPVehNPWZ\[kQ_S@[(vQ$dT7[(WXdmRQyd,O2\,WX[(NbdVÚ¢kWv7ddSkQE[(v7Q`bQZO[@gY(Q_eQ_WXQ_S(Skd,Y£px>\,Ve \
e\,S(vQ_ey\YY(d
cNPVheNPWZ\[kQ_S?[(v7QsdT7[(WXdmEQ*d,Oj\,WX[(NPdV4¢kWv7ddSkQ|[(v7Q&YNblv[)gY(Q_e7Q_WXQ_SSkd,Y£pq;Äd,[k[kQ_eR\Y(Y(dc@S
NPVehNPWZ\[kQR\/[kY\,VhS(Nb[(NbdV c@NP[(v4gY(d,{h\{jNP`PNb[o

-

(

dV§\,Vo4\,WX[(NbdV>q¡|v7QWZNbYWZTNb[NfV1Û)NblT7Y(Q~Ý3v\,S\,`PT7Q

*

q||v7QUgd`fNPWXo,xhc@vhNPWv/Wv7ddSkQ_S[(v7QUYNPlv[|ghY(Q_e7Q_WXQ_S(Skd,YNPVu[(vQ$Sk[(\Y([(NfV7l~Sk[(\[kQ,xopNbQ_`PeS*[kY\ tQ_WX[kd,YNPQ_S
c@vNfWvu\,`P`Q_VeuNfVu\,V/NPV7ghT[2l\[kQ$c@Nb[(v¡\,`PT7QE\,Ve¡c@vhNPWv¡[(v7QZYQZO!d,Y(Qd,{h[(\,NPVS*[(v7Qd,gh[(NPmR\,`\,`PT7Q,q
M

|vQZY(Q¦v\
,Q¦{QZQ_VSkQZ,QZY\,`Y(Q_WXQ_V[\gghY(d_7NPmR\[(NbdV\,`bl,d,YNb[(vm~S/NPV[kY(dehTWXQ_eðOd,YSk[kYThWX[(T7Y(Q_e
Ä2SZx^mR\,Vo/d,O9cvNPWv\Y(QES(T7Y,QZo,Q_eNfV¥Ç&dT7[(Nf`PNbQZYQZ[\,`Lqbx)_,,qy3d,YQyYQ_WXQ_V[c&d,Y(w3NPVhWZ`PTe7Q_S

$d`P`bQZY\,Ve/)\Y(Yy(././.@\,Vev7Q_T7YNPS([(NPWSkQ_\YWvNPVu[(v7Q$Skgh\,WXQUd,O
(././. &\,VeO$ NPmêQZ[s\,`qj(././. q2Ã vhNP`bQ|[(v7Q_S(Q\,`bl,d,YNP[(vmRS

\E\YNP\,V[|d,O)gd`PNPWXo¡Nb[kQZY\[(NbdVu{o

ijVNP[kQ@WXdV[kYd`P`bQZYS9{oR\,VSkQ_V\,VeÛQ_V7l

\Y(Qd,O![kQ_VàvhNblv`boQXòQ_WX[(NP,Q/NPV¦YQ_eTWZNPV7l3[(v7Q\,S(omEgh[kd,[(NPW¡WXdmEgh`bQX7Nb[o1\,Vhen\,WX[(Th\,`2YTV1[(NPmRQ_S$d,O
gd`PNPWXo~WXdVhSk[kYTWX[(NbdV^x7[(v7QZo\,`f`YTV¡NPV¡[(NPmEQQXpgdV7Q_V[(Nf\,`>NPV¡[(v7QS(NbÆZQd,O+[(v7QUSk[kYTWX[(T7Y(Q_eY(QZgYQ_SkQ_Vpa
[(\[(NbdV>xd,YdòQZYdVh`bo/c&Q_\wgQZY(Od,YmR\,VWXQlT\Y\,V[kQZQ_SZqÃ4QRS(vd
cê[(v\[QXpgdV7Q_V[(Nf\,`;\,SkomRg[kd,[(NPW

S(WvQ_mEQ¡[(v\[$ghY(dehTWXQ_Sy_
 a\ggY(d
pNPm~\[(NbdVS$O!d,Y\,`P`
qÛ7d,Y[(vNPSZxjc2QWXdVS(Nfe7QZYÄ9SY(QZgY(Q_S(Q_V[kQ_e{oX|ÇsáSEÇ&dT7[(NP`PNPQZY_xjÄQ_\Ye7Q_V^xÈd`PeS(Æ_mRNPe7[Zx
WXdmEgh`PQXpNb[o1NPSyV7Q_WXQ_S(S(\Y(o¦O!d,Y\,Vo§\,`bl,d,YNb[(vm

_,,Ýq¨V[(NP`Vd
cxjc2Qv\_,Qe7Q_S(WXYNb{Q_eu[(v7Q$S([(\[kQy[kY\,VS(Nb[(NbdV/OTVhWX[(NbdV/Od,YÄ9S{o/\~OThVWX[(NbdV

U>

Ð 38·?Ñ>Ò©Ëv{v8Ì¨Í.Î·Ò^ÑjÓÔ

3
3 3 33 3 3
33 3 3 3 3  3 3 3 3 3 3 3 3 3 3 3 3
3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 33 3 3 3 3 3
3 333333333
333333 3333
3
3
3
33333333
3
3
3
3
33333 333
33333
3
3
3
3
3
3
33333 33
3
3
3
3
3
3
3
3
3
3
3
33 3 3 3 3 £ 3 3 3 3 3 3 3
3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
3
3
3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 33 33 3 3 3 3 3 3 3
3 3 3 3 3 3 3 3 3 3 3 3 33 3 3 3 3 3 3 3 3
3333333333333333
3 33 3
3 333 3
3333333333333333
33
3
3333333333333333
333
3 3 3 3 3 3 3 3 3 3 3 3 3333 3
33 3 3 3 3 3 3£ 3 33 3 3 3 3 3 3 3 3 3
33 3 3 3 3 3 3 3 3 3 3 3 3 3
3 3 3 3 3 3 3 3 33 3 3 3 3 3 3 3 3 3 33 3 3 3 3 3 3 3 3
3 3 3 33 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
3 33 3 3 3 3 3 3 3 3 3 3 3 3 3
3 3 3 3 3 3 3 3 3 3 3 3 3333 3 3
3
3
3
3
33333333
3
333
3
3333
333333333 3 3333333333333
333
33333333
3

.



.

5

$33Ò$3

5
5

7
4

4

7

7

5

5

4

7

ï

8

6
î

5
6
6

î

6

*

Û)NblT7Y(QUÝ}ßWZNbYWZTNP[Zx[(v7QÄåNb[&NfS9Y(Q_ehTWXQ_e~[kd7x\,Vhe~[(v7Q[kY\ kQ_WX[kd,YNbQ_S*\,WZWXd,YeNPV7ly[kdE\,Vd,gh[(NPmR\,`
gd`fNPWXo~Od,Y|[(v7QÄ

RZK\IUg
ILK¬hf[(v\[EWXdmEghT7[kQ_Sy[(v7QgY(d,{j\{hNP`PNb[o d,O|Y(Q_\,WvhNPV7l Sk[(\[kQK¬hOY(dm Sk[(\[kQKuTVhe7QZY$\,WX[(NbdVwgjq
Ã4Q\,S(S(TmEQ_e3[(v\[@[(vQU[kY\,VSNb[(NbdVuOTVWX[(NbdV3c&\,SY(QZgYQ_SkQ_V[kQ_eQXpgh`PNPWZNb[(`Po,q2ä½÷9¯³f¸q¬ ¶ ²R½²¸p¯­k¬¿
 ¬À² ¶ ·²Z½y |ÇsáNfS\¡S(ThWZWZNPVWX[Y(QZgY(Q_S(Q_V[(\[(NbdVd,O&\,V4Äðd,YsÅÄ@q2\,Wv4Sk[(\[kQEd,O2[(v7Q

SkopSk[kQ_m
NPSeQ_S(WXYNb{Q_e{o \u,Q_WX[kd,Y$d,O&\,`PT7Q_SWZ\,`f`bQ_e 2âh²Z·h½ ¶ qád,[kQR[(v\[$NbO9Q_\,Wv1d,Osç~j
ö Sk[(\[kQ_SZq4WX[(NbdVhS\YQeQ_S(WXYNb{Q_e/{o/[(v7QQXòQ_WX[[( v7T7QZoQ_Vv[(S\
,NPQ S
[c&daL\,`PT7Q_e>x>[(v7Q_V[(v7QSkopSk[kQ_m
v\,S_
dV4Q_\,Wvj
 T7Q_V[{omEQ_\,VhSd,O&[c&d3e\[(\/Sk[kYTWX[(T7Y(Q_SZqR@v7QZo\YQR\/e7QZgQ_Ve7Q_VWXol,Y\ghv4\,Ve¦\uSkQZ[
}9

d,O|OTVWX[(NbdVhSQ_VWXdpe7Q_e¥\,SWXdVeNb[(NbdVh\,`gY(d,{j\{hNP`PNb[o [(\{h`bQ_SZx;e7Q_WZNPSNbdV¦[kYQZQ_SZx\YNb[(vmRQZ[(NPW~e7Q_WZNfS(NbdV
eNP\l,Y\,mRSZx7d,Y@NPVuS(dmEQd,[(v7QZYe\[(\RSk[kYThWX[(T7Y(Q,q

|vQUe7QZgQ_Ve7Q_VWXol,Y\ghvNPS|\eNbY(Q_WX[kQ_e\,WXoWZ`PNfWl,Y\ghv3c@Nb[(v/Vde7Q_S|gh\Y([(Nb[(NbdVQ_e/NPV[kd~[c&d¡SkQZ[(S

3

( IÒÒÒDI (ö
|3

\,Ve

h( IÒÒÒDI öh
3

|3

R¾xs[(v7Q

qÚ@v7QuihYS([RSkQZ[~d,OV7dpe7Q_SRYQZgY(Q_SkQ_V[(SR[(v7QSk[(\[kQ\[[(NPmEQ

mR §q;|v7QQ_e7l,Q_S2\YQ@OY(dm©[(v7Q@ihYSk[2SkQZ[9d,O^V7dp e7 Q_S9[kdU[(v7QSkQ_WXdVe \,SkoVhWv7Y(dVdTS
m j T7Q_V[+\[;[(NfmEQÀR /&ThVe7QZY)\,WX[(NbdV
gEe7QZgQ_VeS9gY(d,{h\{jNP`PNPSk[(NfWZ\,`P`bodV[(v7Q@\,`PT7Q_S2d,O>[(v7QgY(Q_e7Q_WXQ_SSkd,YS2d,O rÙh NfVR[(vNPS9l,Y\ghv>q|ád,[kQ[(v\[




SkQ_WXdVe\[9[(NfmEQ



Í



d,Y)c@Nb[(vNfV[(v7Q*SkQ_WXdVeSkQZ[|SkopVWv7Y(dV7dTS¾q)@v7Q9\,`PT7Q&d,Oh[(v7Q



3

[(v7QSkopVWvY(dV7dTS2Q_e7l,Q_S*myTSk[&O!d,YmÈ\eNbYQ_WX[kQ_e>x\,WXopWZ`PNPWl,Y\ghv¡NPVd,Ye7QZYsOd,Ys[(v7Qe7QZgQ_Ve7Q_VWZNbQ_S9[kd

{QQZG\,`PTh\[kQ_e>qy|v7QgY(d,{j\{hNP`PNb[(NPQ_S9\Y(QSkgQ_`P`PQ_eRdT7[Zx7Od,Y*Q_\,Wv\,WX[(NbdV>xNPV[(v7QWXd,Y(Y(Q_S(gdVheNPV7lye\[(\

Ùh

XghqÃ4QUc@NP`P`NPVehNPWZ\[kQ[(v\[$Sk[kdpWv\,S([(NPW
sOTVWX[(NbdV¡{o (Ùq
` |ÇsáSZqrtV3O\,WX[Zx>[(v7Q$ijV\,`
|ÇsáWXdVhSk[kYTWX[kQ_e/NfV~[(v7QgYdd,O^d,O+|v7QZd,Y(Q_mîÝq¹ vh\,Ss,QZY(o`P\Yl,QYQZc&\YehS2cvNPWv¡\Y(QWXdmEgjT7[kQ_e
NPmEgj`PNPWZNb[(`bo]sNPV¥[(NPmEQ/gd`bopV7dmRNf\,`&NfVà[(v7Q3S(NPÆZQ/d,O[(v7Q
 |Çsá$x9dV7Q3WZ\,V QXpgh`PNPWZNb[(`Po¦WXdmEghT7[kQ\,Vo
NPVehNbNfeT\,`^Á µ ½d,O^[(vQY(QZcs\Ye>q@vNPS9vh\,S2[(vQQXòQ_WX[*d,OmR\wpNPV7l$[(v7Qgd,[kQ_V[(NP\,`+°G¬¿âh²d,O^[(vQ[
 |Çsá
Sk[kYThWX[(T7Y(QOd,YP3

\,Ve

Ó

Ã4QEmR\w,QRV7d¡\,S(S(ThmEg[(NbdVS\{dT7[[(vQySk[kYTWX[(T7Y(Qyd,OY(QZcs\YeSO!d,Y

[kdd~`P\Y(l,Q[kd~c|YNb[kQe7dc@Vuc@Nb[(v¡gd`bopV7dmRNf\,`P`boRmR\,Vo¡{hNb[(SZq

8Sx~3y{Ê 132
:üy{~O~q7

µ ·

u

p²¸j­k¯ÁZ¿b² ¯tõ`³t¬±± µ ½ µ °,²R¬¸¸­t¯¬É µ R¬,½ µ ·Ï1¬,·À/¯¸½ µ E¬,¿
:9³­(²¸­k² ¶ ²X·j½L¬,½ µ ¯,· µf¶ 9Þ@³tp¬­t±rË
(



¬·3«3º»

(

@v7Ql,Q_V7QZY\,`Sk[kY\[kQZl,oNPSSNPmRNP`P\Y[kdu[(v7QEgY(dd,Od,Os|v7QZd,Y(Q_m

¶ ½L¬,½ µ ¯·j¬­¾ÀE¸7¯¿ µ´ ÀõZ¯­

ÝqPqyÃ4QRlNb,QE\¡Y(Q_ehTWX[(NbdV

|Çsá@a

OY(dmé[(v7QÞ;aWXdmEgh`PQZ[kQS(TWZWZNPVWX[sWZNbYWZThNb[2\,`PT7QgY(d,{j`bQ_mé[kdy[(vQghY(d,{h`bQ_méOd,YsÄ9S*NPV

Y(QZgYQ_SkQ_V[(\[(NPdV>q;VRNfVSk[(\,VWXQsd,O[(v7Q@S(TWZWZNfVWX[;WZNbYWZTNb[)\,`PT7QsgY(d,{j`bQ_mêNPS;\Ç&dd`PQ_\,V~WZNbYWZThNb[<; [(v\[
e7Q_S(WXYNb{Q_S&\~WZNbYWZTNb[
~



\,Vheu\,V/NPV7ghT[{?xNqöQ,q=;¥e7Q_S(WXYNb{Q_S&\,V3NPVSk[(\,VWXQd,O)[(v7Q/¢ j\[(£~WZNbYWZTNb[&\,`PT7Q

U>_ù

ÔC

Ëv·hûûË7ü3ÍÌQhýÍ{Í.Î þL8$>Î$ÿ{Ë3
ú

gY(d,{j`bQ_muq)Ã4QWZ\,Vu\,S(S(TmEQ[(v\[*NPV
|v7Q_V3QZ,QZY(o3l\[kQENPV

~

xpQ_\,Wvul\[kQNPSs\ygY(Q_e7Q_WXQ_S(S(d,Y&[kdR\[*mEdS([&[c2dEd,[(vQZY*l\[kQ_SZq *

v\,S@OdT7YV7Q_Nblv{d,YSZx[c2d¡d,Oc@vhNPWv3dT7[kghT7[[(v7QyNfV7ghT7[*[kd
~

c@vNfWvl,QZ[|[(v7QdT7[kgjT7[sd,O

~

~

x\,Ve[c&dd,O

\,S|NfV7ghT7[NbO[(vQZY(Q\Y(QO!QZc&QZY@V7Q_NPlv{d,YSZx[(v7QmRNfS(S(NPV7lV7Q_Nblv{d,YSs\Y(Q

9.qsdVS(NPe7QZY)\l\[kQmè>d,O q;7\_oU[(vh\[;[(v7QsdT7[kghT7[)d,OjVQ_Nblv{d,YS¤.\,VeusNPS
[(v7QNPV7ghT[[kdl\[kQèxp\,Vhe~[(v7QdT7[kghT[2d,O^l\[kQ[;
è NPS&NPV7ghT[[kdEV7Q_Nblv{d,YSÀ$\,Ve'qá@dcxp[(v7QWZNPYWZTNb[
; dV1NfV7ghT7[EèUILdT[kghT7[(SR>/IL
K x+c@v7QZY(QEl\[kQ?/NPS[(v7Qÿ   V7Q_Nblv{d,Yd,O&l\[kQ èx?\,VeiK~Q_VWXdpe7Q_S
[(v7Q[ogQ$d,O2l\[kQ
è áÄyx?ÅÖxáÅx&p. x^\,Vhen
q@v7QyNfe7Q_\NfS[kduWXdVS([kYTWX[O!Y(dm \,V Ä
G \,S@NPV[(v7QgY(dd,Od,O?@v7QZd,Y(Q_mîÝqPq9d
c&QZ,QZY_xhc&Qe7dENb[*S(TWZWZNfVWX[(`bo,qQ_VWXQ,x7c2QWXdVhSk[kYTWX[sOY(dm
;¦\s|Çsá@aLY(QZgY(Q_S(Q_V[(\[(NbdVd,O^\,VÄwÈ
G ;q9|vQ@\,WX[(NbdVS&d,O+È
G ;\YQ$. \,VexOd,Y&Wv7ddSNPV7l
V7Q_Nblv{d,Y`u
. d,Os[(v7Q~WZT7YY(Q_V[$Sk[(\[kQXaLl\[kQ,xd,YY(Q_S(gQ_WX[(NP,Q_`bo,x?V7Q_NPlv{d,Y~q|v7QRSk[(\[kQ_S$d,Oé
G ;\Y(Q
[(T7gh`PQ_SèUI æ6INRSIN
V 9c@v7QZY(Q9)è NfS2\$l\[kQd,O xæuNfS[(v7Qgh\YNb[oE{hNb[ó \,SsNPV~[(v7QghY(dd,O>d,O^@v7QZd,Y(Q_mäÝqPx
RNPS$[(v7Q[ogQd,O|l\[kQ(è x\,Ve3
V NPS$TSkQ_e§O!d,Y\3Y\,Ve7dm {hNb[Zq39,QZY(o1l\[kQuVThmU{QZYyè NPS$lNb,Q_VnNPV
{hNPVh\Y(o1TS(NPVluó
S(\_o¦ó
|{hNP[(SZq1|v7Q_V>x)[(v7Q
 |Çsáïv\,S z'Xj T7Q_V[(Ssè ( INè - IÒÒÒ¬INè @tI æ6INRSINV q1MQZ[
I( - IÒÒÒDI A@I CBI vNI {Q[(v7QuSk[kdWv\,Sk[(NPWOTVWX[(NbdVhS$[(vh\[WZ\,`fWZT`P\[kQè"h( INè"h- IÒÒÒ¬INèth@ I æqhINRÚh·INV(h q1|v7Q
S(NPmRgh`bQ_Sk[*NPS
Od,Y@[(v7Q_
 T7Q_V[JV h [(v\[NPS|TSkQ_e3\,S|Y\,Vedmä{hNb[|NbO+OY(dm Sk[(\[kQ÷è í è ( ÛÛÛUè @?[(v7QUV7QXp[
Sk[(\[kQNPS@Wv7dSkQ_VTVNbOd,YmR`Po~\[Y\,Ve7dmäOY(dmîdVQUd,O;[(v7Q$[c&dgYQ_e7Q_WXQ_S(Skd,YS@d,O;l\[kQ÷s
è NPV q*|vNPS
v\ggQ_VSNbO2[(v7QE[ogQ@
R d,O&l\[kQ @è NfSáÄÈ\,Ve [(v7QEgh\YNP[oæ¦NPS_p. x^d,YUNbOÀR NfSÅÖ \,Veæ¦NPSEqErtV
[(v7Q_SkQWZ\,SkQ_S_xV h e7QZ[kQZYm~NPV7Q_SsNb[(S&G\,`fT7Q_$
. d,Y{o; NbgghNPVlU\WXdNPV>q2Å[(v7QZYc@NPSkQ,xV h Q_T\,`PSq9ád,[(NPWXQ
[(v\[mV(
h NPS|NPVhe7QZgQ_Ve7Q_V[2d,O+[(v7QU\,WX[(NbdV^q
|vQOTVWX[(NPdVS
Od,Y*[(v7Q[j
 T7Q_V[(S h eQZ[kQZYmRNPV7Q[(v7Q{hNP[(S2d,O+[(v7QV7QXp[*Sk[(\[kQ_SZq9rãO6&R NPSs\,VuáÄ
\,Ve[(v7Qgh\YNP[oEæ¦NPSQZ,Q_V>x>[(vQ_Vð¢tY\,Ve7dmR`Po£\gY(Q_e7Q_WXQ_S(S(d,Yd,O9l\[kQ|
è NPSWvdSkQ_V>q3¢kÖ\,Ve7dmR`bop£
mEQ_\,VSv7QZYQ~[(v\[[(v7QY\,Ve7dm¤{hNb[÷V h e7QZ[kQZYmRNPVQ_Sc@v7QZ[(vQZYyghY(Q_e7Q_WXQ_S(Skd,Y
. d,YyghY(Q_e7Q_WXQ_S(Skd,YuNPS


h NPSu[(vQ {hNb[ud,OD7xc@vQZY(Qå>/ILK ¡NPSu[(vQ4dT7[kghT7[/d,OE;ÈdVNPV7ghT7[4èUINV h q
WvdSkQ_V>qïQ_VWXQ,x
WZWXd,YeNPV7l`Po,xrR h í 
K NPS[(v7Q@[ogQ|d,O>[(v7QWv7dSkQ_Vl\[kQ,x7\,Veæ h í æY(Q_mR\,NPVhSTVWv\,V7l,Q_e>q;|v7QS(\,mEQ
v\ggQ_VS*NPO6*
R NPS*\,VÅÖ\,Veu[(vQgh\YNb[oUæNPS*dpee>q;rãO¤sR NPS|\~áÅx7[(v7QZY(QUNPSsdVh`bodVQgY(Q_e7Q_WXQ_SSkd,Y
d,O0(
è x\,VeR[(v\[2dV7QmyTSk[9{QWv7dSkQ_VOd,Y×è"h \,Ve RÚh q;|v7Q|gj\YNb[o{hNP[æqh NPS°j NPggQ_e[kd+$é æq;rãO
R NfS\,V
ÅÖ \,VeR[(vQ@gh\YNP[oæNPS9QZ,Q_V>x[(v7Q_VRdV\,WX[(NbdVOg Z
.e_I  xp[(v7QgY(Q_e7Q_WXQ_SSkd,YÀg d,O>l\[kQ+è NfSWv7dS(Q_V>q


Q_VWXQ,x rh NPS[(v7Q
{hNb[d,OF7x)c@vQZY(Q>/IL
K NfS[(v7QRdT[kghT7[d,OG;ðdV¦NPV7gjT7[RèUIUpg q/WZWXd,YeNfV7l`bo,x
R h í EK \,Veæ h í æq@v7QyS\,mEQEv\ggQ_VSNbO}@R NPS\,V áÄÈ\,Ve[(v7Qygh\YNb[oRæ1NPSdpee>q@Q_VhWXQ,x^[(v7Q
SkQZ[)[kd\ijWX[(Nb[(NbdThS?l\[kQ

~

~

~



Ó

·Ó

·Ó

·Ó

IÓ

·Ó

·Ó

D

Ò

Ò

~

Ó

3

-3

Õ

Õ

Õ




,

[3

Õ

OTVWX[(NbdVÓ

WZ\,Vu{QWZ\,`PWZTh`P\[kQ_e/\,S|Od`P`bdc@SZq

Õ

z'#Ð}

7  R

èUIæINRQINV(h·IUg

. R
}x#Z
èUIUg \ILK
ZÉ|Bäz7 R
R
}x#Z
èUINV h /ILK
ZÉ|Bäz7 R í áÅ
}x#Z WZ\,`PWZT`f\[kQ;*èUIU
.  í >/ILK
ZÉ|B  í
  {hNP[*d,O$
~²}Ð} [(v7Q
z






í

ÅÖ\,Veæ



í &d,Yy í áÄê\,Vheæ í
WZ\,`PWZT`f\[kQ;*
7 í
> G]
 í ÅÖ\,VeEæ í

&d,Y í áÄê\,Veæ í
WZ\,`PWZT`f\[k
Q ;*
 í
>  

.

¿




|vQS([(\[kQ

¿

NPS\uS(NfV7w3Sk[(\[kQRcvNPWv NPSY(Q_\,Wv7Q_e4OY(dmª[(v7QRNPVghT7[l\[kQ_Sc@Nb[(vNfV3dV7QRS([kQZg¦\,Ve

_R h d,O)[(v7QUVQX[|Sk[(\[kQ$d,Y|l\[kQ$NfS|WZ\,`PWZT`P\[kQ_e3\,WZWXd,YeNPV7l`Po,q
H ¡qúû/¥"§*«®²&«®²1­v£L¥&¥"§*¦6¸º¨Q²¦Sý*¨Q­v½:I«®²
¥"§*¦©m¨KJD«¹©ÀÅv©j£QÅ*¥L½*¦¯Q³"¦º¦6£Qû¨Ã¯Ê¨L¥"¦Qý¾1¦¤¸º¨Q­<³"¦ºµ*¶Æ¨L¸º¦¥"§*¦¸«®³"¸Åv«¼¥1±»<£Q­v¦+¾+«¼¥"§
©m¨MJD«®©Å*©b£SÅD¥L½*¦º¯L³"¦º¦ù¨Q­v½_²«¹Ç¦<¨L¥°©£S²·¥¶¹£QN¯ I9¶Æ¨U³"¯S¦³NP¡ O¬«®­v¸ºQ¦ I-RTS U:S ýr²Åv¸t§`¨m²Åv±v²·¥"«¼¥"ÅD¥"«¹£Q­_¾+«¹¶®¶­v£L¥ÃK¨ V\¦º¸¥
¥"§v¦°¨Q²·»D©µ*¥"£L¥"«¹¸¤¸º£S©µ*¶¹¦WJ*«¼¥»m£Qûq¨Q­»J£Qûe£SÅ*³¨L¶¹¯Q£Q³"«¼¥"§v©²º¡

c@vNfWvuNPS|VQZ,QZY@`bQZO[Zq9|v7Q[ogQ

*)

U>

Ð 38·?Ñ>Ò©Ëv{v8Ì¨Í.Î·Ò^ÑjÓÔ

$33Ò$3

(Ù

ÅVQUWZ\,V3\,`PS(dRS(NPmyT`P\[kQ[(v7QUWZNPYWZTNb[G;àO!d,Y|OTVWX[(NPdVKÓ $NfV¡[(v7QU\{d
,Qy\,`bl,d,YNb[(vmî{ou\
ád,[kQ[(v\[ZxNPVl,Q_V7QZY\,`x|WZNbYWZTNP[(S~WZ\,V

v\_,Q4mEd,Y(Q[(v\,V

|Çsá$q

dV7Q3dT7[kgjT7[ZqßÃ4Q WXdVS(NPe7QZY[(vNPSmEd,Y(Q

l,Q_V7QZY\,`mEdeQ_`^v7QZY(Q,q

YX °,²X­¾À¯_¯¿P²(¬·
/ µ ¬¿)½ µ ~²DË

wSÉ3z'Ê



´_µ ­ ´ â µ ½ ´ ¬,·uÁ² ¶¾µ âp¿b¬,½²(±RÁZÀ$¬

µ ·~¸7¯¿À·j¯

:üy{~O~q7

(
u

Z9  ½L¯U÷° µ´ 

S

µ ½ ´ ¬·3Á²½­k¬· ¶ õX¯­ ~²(±

0h

Ã4Q3Skw,QZ[(Wv[(v7QuWXdVSk[kYTWX[(NbdVNPeQ_\pqnMQZ[E[ï{Qu\4WZNbYWZThNb[$cNb[(vnçÚNfV7ghT7[yl\[kQ_S~\,Ve¥ç

IÒÒÒ*I Lö

dT7[kghT[l\[kQ_SZqu|v7QEdT7[(WXdmRQ~d,O*[(v7Q~WZNPYWZTNb[dV¦\,Vo1NPV7gjT7[Ï (
·Ï  NPSThS(T\,`P`boWZ\,`PWZT`P\[kQ_e§\,S
Od`P`bd
cSZqRs[ihYS([ZxWZ\,`PWZT`P\[kQ~[(v7QEdT7[(WXdmEQd,O&\,`P`)l\[kQ_S$[(v\[l,QZ[$NPV7ghT7[dV`Po3OY(dm
NPV7gjT7[l\[kQ_S_q
áQX[ZxWZ\,`PWZT`P\[kQy[(v7Q$dT7[(WXdmEQyd,O\,`P`^l\[kQ_S[(v\[l,QZ[[(vQ_NbYNPVghT7[(S*dV`PoOY(dm

[(v7dSkQyl\[kQ_Scv7dSkQ

dT7[(WXdmEQNPSE\,`bY(Q_\,e7o¥WZ\,`PWZT`f\[kQ_e>x2\,VeåSkd4dV>qà|vNPSyopNbQ_`PeS\,VàQ_VTmEQZY\[(NbdVàd,O[(v7Qul\[kQ_SRd,O\
WZNbYWZThNb[NPV4[kd,gd`bd,lNPWZ\,`d,Ye7QZY_x)NqöQ,qbx)S(TWv1[(v\[U[(v7Q~dT7[(WXdmEQd,Os\/l\[kQWZ\,V¦{QWZ\,`PWZT`P\[kQ_e¦c@v7Q_V
\,`P`>[(vQdT7[(WXdmEQ_Sd,O)l\[kQ_S@c@NP[(v/\RS(mR\,`f`bQZY|NPVe7QXu\Y(QU\,`PY(Q_\,e7o¡WZ\,`PWZT`P\[kQ_e>q&Ã4Q$\,SS(TmEQ[(v\[[(v7Q

tIÒÒÒ¬I l

IÒÒÒ¬I (ö

l\[kQ_S&\Y(Q*Q_VThmEQZY\[kQ_e~NfV[(vNPS)cs\_o,x\,VheE[(v\[<\ (
]\ y\Y(Q@[(v7Q|NPV7ghT[?l\[kQ_SZxp\,VeE[(vh\[^\A@
]\
\Y(Q[(v7QEd,[(v7QZYl\[kQ_S_xc@v7QZYQ$[(v7QRSmR\,`P`bQ_Sk[NPVeQX/d,O&\l\[kQRc@vhNPWv NPSV7Q_Nb[(vQZY\,V dT[kghT7[V7d,Y\,V

mR\G^çÃk
I ç h  Úq
|Çsá ØäSNPm$Th`P\[(NPV7l_[ï\,SOd`P`bdc@SZq^Øîv\,SE\jT7Q_V[$Od,YQZ,QZY(o§l\[kQud,O
[xhS(\
oÿjT7Q_V[(S ( IÒÒÒDI l q&|v7Q{h\,SNPWNPe7Q_\ENPS|[(v\[mjTQ_V[(S ( IÒÒÒ¬I (ö¡Y(QZgYQ_SkQ_V[*[(vQ$NPV7gjT7[2l\[kQ_S
d,OQ[qrãVdV7Qy[(NPmEQSk[kQZg^xG\,`fT7Q_S\Y(Q$ghY(d,gh\l\[kQ_eO!Ydmï[(vQyNPVghT7[@V7dpe7Q_S
( IÒÒÒ*I ö [(v7Y(dT7lv\,`P`
l\[kQUV7dpe7Q_S r@h IÒÒÒ¬I lh x\,Ve¡[(v7QdT7[kghT7[(SsWXd,ghNPQ_e¡[kd rh IÒÒÒ*I rö h n q@v7Qe7QZgQ_Ve7Q_VWXoEl,Y\gjvuv\,Ss[(v7Q
(
Od`P`bd
cNPV7lQ_e7l,Q_S\,WZWXd,YeNPVlu[kdu[(v7Q4¢tc@NbY(Q_S(£d,O2[(v7QRWZNbYWZTNP[G[qUrãO2\,V4NfV7ghT7[l\[kQ`\ Ö t
è ç?
dT7[kghT[(S2\,VNPV7ghT[;[kd$l\[kQa\ x[(v7Q_V~c&Q@l,QZ[*\,VQ_e7l,QO!Y(dm
k
[
d

h
;
q
ã
r
>
O
(
[
7
v

Q

d
7
T
k
[
h
g
7
T
2
[
,
d

O
U
\
7
V

d
7
V
aNPV7ghT7[
Ö
l\[kQa\ Ö çï è}ï
K ;NPS2NPV7ghT[[kdUl\[kQa\ x[(v7Q_V~c&Ql,QZ[&\,VQ_e7l,QO!Y(dm h [kd h qÛ)NPVh\,`P`bo,x[(v7QV7dpe7Q_S
h( IÒÒÒ¬I öh n Sk[(\,Ve3O!d,Y|[(vQG\,`fT7Q{hNb[(SZq;rãO+l\[kQb\ gYdeThWXQ_Ss[(v7Q`Lè [(vudTÖ [kghT7[*{hNb[Zx7[(vQ_V/[(v7QZY(QNfS|\,V
Q_e7l,QOY(dm
h [kd rÖh q9Ç&Q_WZ\,TS(QU[(v7QWZNbYWZTNb[c[êv\,S|V7d`bdd,gx[(vQl,Y\ghv/NfS*`bdd,gaLO!Y(QZQ,x7[kdd7q
h( IÒÒÒDI lh e7QZgQ_VeudV3[(v7QUOTVWX[(NbdVhS|WZ\,`PWZT`P\[kQ_e3{o
|vQOThVWX[(NbdVS|\,SSkdWZNf\[kQ_e3[kd[(v7QUV7dpe7Q_S
h O!d,Yè í (ILIÒÒÒ*kI ç h xpc@vNfWv
[(v7QY(Q_SkgQ_WX[(Nb,Ql\[kQ\,Vheu\Y(Q\,S*O!d`f`bd
c@S_q)2\,Wvud,O?[(v7Q\,`PT7QV7deQ_S
Ö
Sk[(\,VehS9Od,Ys[(v7QNPVghT7[{hNP[(SZxvh\,S9QX7\,WX[(`boRdV7QgY(Q_eQ_WXQ_S(Skd,Y_xpc@v7dS(Q@\,`PT7QNfS2WXd,ghNPQ_eNPV[kd rh qQ_VWXQ,x
Ö
Ö NPS*[(v7QUdV7QXaLgh`P\,WXQyNPe7Q_V[(Nb[o¡OTVWX[(NbdV>x Ö   í c@Nb[(vughY(d,{h\{hNP`fNb[o3xjO!d,Y9è í (ILIÒÒÒ*kI ç h qsá@dc
c&QUWXdVS(NPeQZY|[(v7QUV7dpe7Q_S*cvNPWvuWXdmRQUOY(dmîNPV[kQZYV\,`l\[kQ_Sd,O+[(v7QUWZNbYWZThNb[ZqrãO\ Ö NPS|\,V3áÄël\[kQ,x
[(v7Q_V
Ö  6I d í edjx^cv7QZY(Q ¦\,Vefd\Y(QE[(v7QEgY(Q_eQ_WXQ_S(Skd,YSd,O&l\[kQ`\ Ö qyrOQ\ Ö NPS\,V¦ÅÖ©l\[kQ,x
[(v7Q_V
dx\,Ve/NbO\ Ö NPS|\EáÅðl\[kQ,xj[(v7Q_V
Ö  6I d í
Ö   í x\,`P`cNb[(v¡gY(d,{h\{jNP`PNb[o3q
Ç&o[(vNfS?WXdVS([kYTWX[(NbdV>x,Nb[+Od`P`bd
cS[(v\[)[(v7Q
 |Çsáb
Ø S(NPmyT`P\[kQ_S?[(v7QsÇ&dd`bQ_\,VWZNbYWZTNb[,[q)ád,[(NPWXQ
[(v\[$[(v7Q~VTmU{QZYd,O<
 T7Q_V[(Sd,O<é
Ø NPS\[ymEdSk[$[(v7Q~e7dT7{j`bQEd,Os[(v7QVTm${QZYUd,O&l\[kQ_Syd,Oc[q¡|v7Q
[kY\,VS(O!d,Ym~\[(NbdVuOY(dmg[ë[kdz
Ø WZ\,V/{QgQZY(Od,YmEQ_euNfV¡gd`PoV7dm~NP\,`[(NPmEQ,q
V¡QXp\,mRgh`bQd,O?\EÇ&dd`bQ_\,V/WZNbYWZTNb[*\,Ve¡[(v7Qy
 |Çsáz[kdEc@vNPWvuNb[*NPS&[kY\,VSkOd,YmEQ_eu\,S@e7Q_S(WXYNb{Q_e
NPV7gjT7[2l\[kQ$Q_Th\,`PSP í
ád
cx2c2Que7QXiV7Q\
P3



|3

3

|3

"3

3

|3

D3

|3

|3

Y



3



3

	

13 

3

13 



|3

3 

Y3

P3

|3

3

C3

Ó

]Ó

2Ó

o{

KÓ

o{

{0£

{

o{

{

¾{

KÓ



o{

{

PM

\{d
,QyNPSslNb,Q_V/NPVuÛ)NblTY(QUÙq

ád
cx>c&QWZ\,V4WXdVSk[kYTWX[OY(dmô[(v7QyWZNPYWZTNb[D;[(vh\[NPS\¡S(TWZWZNPVhWX[@Y(QZgYQ_SkQ_V[(\[(NPdV d,O9\WZNPYWZTNb[

jTQ_V[(SJè ( INè - IÒÒÒ¬INè@tIæ6INRSINVR\,S\,`bYQ_\,e7oeQXijV7Q_e>xgj`PTS*\,eeNP[(NbdV\,`&jT7Q_V[(S*Od,Y
[(v7Q$l\[kQ_Sd,OP;sxjTS(NfV7lE[(v7QU[kQ_WvVNPT7Q$O!Y(dm
[(v7Q$\{d,QEs`f\,NPmuqs?\wpNPV7lR[(vQ$\,WX[(NbdV^h
g xj[(v7QUgj\YNb[o
æxp[(v7Ql\[kQ[ogQ[R2\,Vhe¡[(v7QY\,Ve7dmÈ{hNP[ÀV h NfV[kdR\,WZWXdTV[Zxc&QWZ\,V/WXdVSk[kYThWX[<Ø
ó
\,WZWXd,YehNPV7l[kd
[(v7Qye7Q_S(WXYNbgh[(NbdV¡d,O;OThVWX[(NbdV
\{d,Qó
Skd~[(v\[Jj
 T7Q_V[ rWh h WXdV[(\,NPVS[(v7Q{hNb[e7Q_S(WXYNb{Q_e¡{ou[(v7Q
OTVWX[(NbdV
è ( INè - IÒÒÒDINW
è @"I æ6INRSINV \{d
,Q,q2á@d,[(NPWXQ[(v\[s[(v7QOTVWX[(NbdV h Od,Y h h NPS&e7QZgQ_Ve7Q_V[9dV`Po
dV[(v7QgY(Q_e7Q_WXQ_SSkd,YS&d,O^[(v7Ql\[kQd,Oi;§Y(QZghY(Q_SkQ_V[kQ_e{o Wh h xp[(v7Q9j
 T7Q_V[(SæINRQINV(hpI \,Vhe~[(v7Q\,WX[(NbdVjg q
~

ÿ|Çsá Ø
\

J

c@Nb[(v

KÓ

}Ó

J

P3 

Õ

}Ó 

Õ

Y3 

DY

U>

3 

ú

ÔC

Ëv·hûûË7ü3ÍÌQhýÍ{Í.Î þL8$>Î$ÿ{Ë3

dT7[kgjT7[
l\[kQ

dT7[kgjT7[
l\[kQ

s

3 3333 3 3
3 3333 3 3
33 3 3 3 3 3 3
3
3 3 33 3 3
3333333 £ 333333
33333333 33333333
333 33 33 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 33 33 3 
333 33 33 3 3 3 3 3 3 3  3 3 3 3 3 3 3 3 3 3 3 3 33 33 3 33 
333333
3
3 3 333 3 3 3 3 333 3 3
33 33 33
333 3333
3333 3333
3 33 3 3
3 3 333
3
3
3
3
33 333 3
3
3
3
3333 3333
3
3
3
333 33
3
3
3333 3333
3£ 3 3 33 33 3 3 3 3 3 3
3
3
3
3
333333333333
3
3
3
333 Ý
3 3 3 3 £ 3 3 3 3 3 33 Ù
3333 3333
33 3 3
3
3
3
3 3 3 3 3 3 3 333 33 33 33 3 3 3 3 3 3 3 3 3 3 3 33 3 3 3 3 3
3 3 3 3 3 3 3 33 3 3 3 3 3 3 3 3 3 3 3 3 33 3 3 3 3 3 3 3
3333 3333
3 3 33 3 3 3 3
3 3 3 3 3 3 3 33 3 3
3333 3333
3
3
3
3
3
3
3
3
3
333 3333
3333 33333 3
3333 3333
3 333 33 3333  333333
333333  33333 33 33
33 3 3 3 3 33 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 33 33 3 3 ñ
33 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 33 3 3 3 3 3 3
3
3333 3333
3333 33333
3333 3333
3 3 333 3 3
3 3 333 3 3
33 333
3
3
333
3333 3333
33 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 33 3 3 3 3 3 3 3 33
3
3
3333 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 333 33 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 333 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 33
333
NPV7gj3 T7[
NPV7gh3 T[

'

l\[kQ

s

l\[kQ

3

j

jAïk
ï

jms

jAs k

jmr

jAr k

jq

jAq k

.2

( }
Ó



jAp k

jmo

jAo k

jmn

jAn k

jml

jAl k

4 }

Ð

ÄÏ

Sf

 
í

3

Ð



ÄÏ

3





th uh _V/T vc 2h
. .
.
. 


.

3

2 }

3

3

ÓAt}

Ó

ÄÏ



(

3

jmp

Ð

`V(T (c 4h í Sf
.


.
h _V/T vc th í Sf
. .4
.
. 
.
.

.

3
Ó

h `V(T (c h(
.



3



Ð

ÄÏ

3

í

Sf




|Çsá

Û)NblT7Y(QUÙ}Ç&dd`bQ_\,V1WZNbYWZThNb[c@vNPWv dT7[kghT7[(S[(v7QE{jNPV\Y(oS(Tmªd,OsNb[(SNPV7ghT[{hNP[(SZx\,Ve4\

Y(QZgY(Q_SkQ_V[(NPV7l$[(v7QWZNPYWZTNb[ZqÅV`boOTVWX[(NbdVhSÓ ( [(v7QNPe7Q_V[(Nb[oyOTVWX[(NPdVjxÍÓ 4 S(NPmyT`P\[(NPV7l
\RáÅðl\[kQ
x ÓAtES(NPmyT`P\[(NfV7lE\,V3áÄël\[kQx\,VeKÓ 2 S(NPmyT`P\[(NPVl\,VÅÖßl\[kQ@\Y(Q
e7Q_S(WXYNb{Q_ejq

vÈ

U>

Ð 38·?Ñ>Ò©Ëv{v8Ì¨Í.Î·Ò^ÑjÓÔ

$33Ò$3

Q_VWXQ,xNb[v\,S\[mEdS([Ù¡\YlTmEQ_V[(S\,Ve4WZ\,V {QeQ_S(WXYNb{Q_e{o\SmR\,`P`+[(\{h`bQ,qy|vNPSv7d`PeSOd,Y

1

Ø

rh q2Q_VWXQ,x
OY(dmv;àc2QyWZ\,VWXdVS([kYTWX[\ÄÚNPVX@Ç&áëYQZgY(Q_SkQ_V[(\[(NbdV3SNPmRNP`P\Y*[kd[(v7Q$ÄÚNPVu[(v7Q$gY(dd,O
á NbO\,Vo
d,O9|vQZd,Y(Q_m
ÝqPqáQXp[Zxc&QESkgQ_WZNbOo[(vQ$Y(QZcs\YeSd,O[(vNfSÄ|q>|v7Q$Y(QZc&\YeNPS[ -Cw xAw y y
\,WX[(NbdVRNfS)[(\w,Q_VEdVR\Sk[(\[kQ|YQZgY(Q_SkQ_V[(NPV7l\,VENPV7gjT7[?l\[kQ@c@Nb[(v\,`PT7Q*\,Vegh\YNP[o÷p
. xd,Yc@Nb[(vy\,`PT7Q
.¡\,Vegh\YNb[o¦qyÅ[(vQZY(c@NPSkQ,x[(v7QY(QZcs\YeQ_T\,`PS[.pqU|vNfS@  Y(QZcs\Ye OTVWX[(NbdVWZ\,V {Q$YQZgY(Q_SkQ_V[kQ_e
{oR\UWZNbYWZThNb[Zxc@vhNPWvEdV{hNPVh\Y(oyNfV7ghT7[ÃèUIUg
I *dT[kghT7[(S[(vQ
{hNP[d,O>[(v7Q@YQZc&\Yed,{[(\,NPVQ_e~NPVSk[(\[kQ
Ù
(
èdV/\,WX[(NPdVXgjq@LpNPVWXQNb[*Y(Q_TNbYQ_Sm í í {hNP[(Ss[kdRY(QZgY(Q_S(Q_V[*[(v7QYQZc&\Ye^x WZ\,V3{QYQZgY(Q_SkQ_V[kQ_e
TS(NfV7ldV`bojë
;Jë w Ú{jNb[(SZq
á dV
rãO
  í
x[(v7Q_VE[(vQZY(Q@NPS;\Wv7dNPWXQd,O\,WX[(NPdVS;Od,Y9Q_\,WvSk[(\[kQ@[(vh\[9lNb,Q_S9Y(QZc&\Ye  - w xAw y y
QZ,QZY(o[kY\*k
 Q_WX[kd,Y(o,xhS(NPm~NP`P\Y9[kdE[(vQghY(dd,Od,O?|v7QZd,YQ_mîÝqPq9@dc2QZ,QZY
xjNbO   í p. x\,Vo~gd`PNfWXoRv\,S
\[`bQ_\,Sk[dV7Qy[kY\*t
 Q_WX[kd,Yo[(v\[Y(Q_WXQ_Nb,Q_S\ÿ. Y(QZc&\Ye>á qá@dcx[(v7QZY(Q\Y(QE\[mEdS([_ -Cw xAw [kY\*t Q_WX[kd,YNPQ_SZx
\,Ven[(v7QZY(QZOd,Y(Qu[(v7QZYQ¡NfS$\ l\gàd,O\[`PQ_\,Sk[; -Cw xzw y y ( -Cw xzw Ô5/n
 {QZ[c&QZQ_V¥gdS(S(Nb{h`PQ~\,`PT7Q_SZq1S
\{d
,Q,xjc2QWXdVWZ`fTe7Q[(v\[@\,Vo
 a\,eheNb[(Nb,Q\gghY(d_7NPmR\[(NbdV¡[kd~[(v7QO\,WX[kd,YQ_e3ÄågY(d,{h`PQ_mÈlNb,Q_S
\,`P` T7Q_V[(S|d,O

J

q&Û+NfV\,`P`bo,x7[(v7QUOTVhWX[(NbdVKÓ

Õ

Ø kThSk[|WXd,ghNbQ_S@[(v7Q\,`PT7Qd,O rh h

Od,Y

[3 

J

NPV[kdY3

Õ

¸

·Ï

J



~

¢

	Ï

¢

]Ï



¸

o{

~

¸

o{

Ú

\e7Q_WZNPS(NbdV\,`bl,d,YNb[(vhmîOd,Y[(v7QyS(TWZWZNPVhWX[WZNbYWZThNb[|\,`PT7QUghY(d,{h`bQ_muq|@v7QZY(QZOd,Y(Q,xj[(vQ$`bdc2QZY{dTVeud,O
Þ;avh\YeV7Q_S(SOd,Y[(v7QO\,WX[kd,Y(Q_e¦Äð\,`PT7QgY(d,{j`bQ_mïvd`PeSO!d,Y[(vNfS\ghgY(d_7NPmR\[(NPdVghY(d,{h`bQ_m
\,S|c&Q_`P`q
M

|vQUOd`P`bd
cNPV7lS([kYTWX[(T7Y(Q_eY(QZgYQ_SkQ_V[(\[(NPdVNfS@mEd,Y(Qyl,Q_V7QZY\,`+[(v\,V[(v7QyY(QZgYQ_SkQ_V[(\[(NPdVSmEd,Y(Q
WXdmRmEdV$[kd[(v7Q2r{gj`P\,VVNPVlsWXdm~m$TVhNb[o,q+Ã4Q&S\_o[(v\[+\,V$Ä v\,S?\

[(v7Q

~

j\,Ve

¶ â 
´ ´_µ · ´ ½­(²¸j­(² ¶ ²X·h½L¬,½ µ ¯·x
S(TWvU[(vh\[ ~ 
ã^gY(dpeTWXQ_S

 KrIUgqILKDh·INè
`è[(vu{hNb[*d,O)[(v7Q[kY\,VhS(Nb[(NbdV¡gYd,{h\{hNP`PNP[o RZKrIUgqILK h *\,Ve K\IUg
INèãsghY(dehTWXQ_Ss[(v7Q`èL[(v/{hNb[*d,O)[(v7Q
Y(QZcs\Ye
V KrIUpg q*pNPmRNf`P\Ys[kd~[(v7QghY(dd,O+d,O|v7QZd,YQ_m Ýq¹xjc&QUWZ\,V\,`PSkdRgYd
,Q$VdV\ggY(d
pNfmR\{hNP`PNP[o
d,Y)NPS?\S(TWZWZNfVWX[?Ä|xNbOp[(v7QZY(Qs\Y(Q&Ç&dd`bQ_\,VyWZNbYWZTNb[(S

~

~

Ò

Ò

d,O;ÄåG\,`PTQ_S*O!d,YS(TWZWZNPVWX[(`PoY(QZghY(Q_SkQ_V[kQ_e/Ä2SZq

8Sx~3y{Ê 1

p²2¸j­k¯ÁZ¿b² ¯tõ³k¬±± µ ½ µ °²¬¾¸¸j­k¯¬É µ R¬,½ µ ·Ï¡½p²¯¸½ µ R¬¿
 ¬­t±rË
´ ½¿À~­(²¸j­(² ¶ ²X·h½²±~«3º» µf¶ 9Þ@³tp


¶ â ´´Zµ ·

|)CYX

7

(

H F[Z â\oçH]K^

èaã&KKæ_ãHç

Ã@

DGF &F Kµæ

?

bZdc

H²çKfe7H F
g

iKj

>

,g

¶ ½L¬,½ µ ¯·j¬,­À¸7¯¿ µ´ À*õZ¯­¬

å

|v7QeNfS(WXdTV[kQ_e\,`PT7Qd,O+\,VuNPVpijVNP[kQXav7d,YNbÆZdV&ÅÄåNPS&[(v7QmR\G7NPmyTmé[kd,[(\,`^eNPS(WXdThV[kQ_e¡gQZYka
Od,YmR\,VWXQ,qÃ

v7Q_Vc&QyeNfS(WZTS(S*[(vQ$gd`PNPWXo¡QX7NPSk[kQ_VWXQygY(d,{j`bQ_mäd,Y[(v7Q$\
,QZY\l,QRWZ\,SkQgQZY(Od,YmR\,VWXQ

NPV§[(v7Q¡NPVpijVNP[kQ~v7d,YNbÆZdV^x)NP[$NPSyV7Q_WXQ_S(S(\Yo¦[kd4SkgQ_WZNbOo[(vQY(QZcs\Ye¥WXYNb[kQZYNbdV>q3Ã4Qul,Q_VQZY\,`PNbÆZQ[(v7Q
\,`PT7QOTVWX[(NbdVu\,S@O!d`P`Pd
c@SZq

þ×INð9³°¬¿âh²\,` ß ñ ·Gêd,OG NPS`G×ØSUm~\GpNPm~\,`Ãð>aLgQZY(Od,YmR\,VWXQ~ThVe7QZY\,Vogd`PNfWXo^àd,O
[ogQyþ2xhNqöQ,q7\,` ß ·ê
ñ G  í mR\G o ¸7²Z­!õ ñ ·GIUq
ád,[kQs[(v\[?\[(NPmEQXae7QZgQ_VeQ_V[^d,Y;vNfSk[kd,Y(oae7QZgQ_Ve7Q_V[^NPVpijVNP[kQXav7d,YNbÆZdVgd`PNPWXoOd,Y+\&ÅÄ NPS
|vQ







V7d,[VQ_WXQ_S(S(\YNP`PoiVNb[kQ_`boY(QZgY(Q_SkQ_V[(\{h`bQ,q+Û7d,Y+OT`f`boaLd,{jSkQZY(\{h`bQ;Ä2SZx,Nb[^[(T7YVQ_edT7[2SkQZQ2Q,qöl7qG2T7[ta
QZYmR\,V^xj_,Gñ)[(vh\[9[(v7Q|eNfS(WXdTV[kQ_eEd,Y2\
,QZY\l,Q\,`PT7QNPS)[(v7Q|gQZY(Od,YmR\,VWXQ*d,O>\S([(\[(NbdV\Y(ogd`PNPWXo,q
|vNfS9mEQ_\,VS&[(v\[sV7dvNPSk[kd,Yoae7QZgQ_VeQ_V[gd`PNfWXoygQZY(Od,YmRS9{QZ[k[kQZY&[(vh\,V[(vQ{Q_Sk[&Sk[(\[(NbdV\Y(o~dV7Q,q
S$\,VnNPmEgd,Y([(\,V[UWXdVSkQ_T7Q_VWXQ,x;\,V§d,g[(NPmR\,`9gd`PNPWXo NPSijVhNb[kQ_`boY(QZgY(Q_SkQ_V[(\{h`bQ,q/Ûd,YsÅÄ2SZx
[(vNPSe7dQ_SV7d,[v7d`fe>q$\,e\,VN)QZ[\,`q9t_,,S(v7dc2Q_e [(v\[[(vQE[(NPmEQXae7QZgQ_Ve7Q_V[NPVpijVhNb[kQXav7d,YNbÆZdV
gd`PNPWXoaLQXpNfSk[kQ_VWXQsgY(d,{h`PQ_mëO!d,Y9sÅÄ2SNPSVd,[e7Q_WZNPe\{h`PQsThVe7QZY\_,QZY\l,QgQZY(Od,YmR\,VWXQsd,Y9ThVe7QZY
[kd,[(\,`eNfS(WXdTV[kQ_e3gQZY(Od,YmR\,VWXQ,qUrãV WXdV[kY\,Sk[Zx^c&QES(v7d
cê[(vh\[[(vQS\,mEQgY(d,{h`bQ_mïOd,YSk[(\[(NbdV\Y(o
gd`PNPWZNbQ_SsNPS@áaWXdmEgh`bQZ[kQ,q

U>
ø

ú

8Sx~3y{Ê 0



ÔC

Ëv·hûûË7ü3ÍÌQhýÍ{Í.Î þL8$>Î$ÿ{Ë3

¬
Q

t uê

LÉ

Ê

¯ ·j¬­¾À µ · · µ ½²Z³ ¯,­ µ ¯·U¸p¯¿ µ´ À³k² µ!¶ ½²Z· ´ ²;¸j­k¯ÁX¿P²
( p² ¶ ½L¬,½ µ 

½L¯,½L¬¿)± µ!¶X´ ¯,â·j½²(±/¯­y¬°²Z­t¬ |
² ¸7²X­õZ¯­ R¬· ´ ² !µ ¶ á|³ ´ ¯ ¸j¿P²Z½²

¬Ï

|vQ1v\YeV7Q_SS¡gY(dd,OyNPS/Q_S(SkQ_V[(NP\,`P`bo

(

DË

[(v7Q¦S(\,mEQ§\,SuO!d,Y|v7QZd,Y(Q_m

õX¯,­»Â9«3º» ¶ â·±²X­

ñ7qPqïád,[kQ¦[(v\[3NfVÚ[(v\[

WXdVSk[kYTWX[(NbdV>xQZ,QZY(oSk[(\[(NbdV\Y(o3gd`fNPWXoud,{[(\,NPVSY(QZcs\Ye¥UOd,Y\[mEdSk[dV7QSk[kQZg^x>V\,mEQ_`bo3c@v7Q_V

yÜ
Ø NPS|Y(Q_\,Wv7Q_e^xjmEQ_\,VNfV7lE[(v\[@[(vQO!d,Ym$T`f\ENPS|S(\[(NPSkihQ_e>q2`P`>d,[(vQZYSk[kQZghS@oNPQ_`Pe¡Y(QZcs\Ye
.pq;|v7QZY(QZOd,Y(Q,xO!d,Y[(vhNPSWXdVSk[kYTWX[(NbdV>x[(vQ|[kd,[(\,`heNfS(WXdTV[kQ_eEG\,`fT7Q|NPS)l,Y(Q_\[kQZY&[(v\,V;.NPOj\,VeEdVh`boyNPO
[(v7QijVhNb[kQXav7d,YNbÆZdV\,`PT7QNPS*S(d7q9dRm~\w,Q[(v7QWXdVSk[kYTWX[(NbdVuc&d,Y(wO!d,Y|\
,QZY\l,Q$\,`PT7Q,x7c&Qv\
,Q[kd
mEdpeNbOoENb[2S(ThWv[(v\[2dVhWXQ[(vQS(NPVwRSk[(\[kQJß
Ø NPS9Y(Q_\,WvQ_e>xpQZ,QZY(oS(T{hSkQ_T7Q_V[&\,WX[(NbdV{YNPVlS;Y(QZcs\Ye
q*|v7QZY(QZOd,Y(Q,x[(vQ$\_,QZY\l,Q$\,`PT7QQ_T\,`PS$NbO)[(v7QOd,YmyT`P\ENPSS(\[(NPSti\{h`bQ,x\,VeNb[|Q_T\,`PSm
. NbO+NP[@NPS
S(NPVwSk[(\[kQ

TVS\[(NPStij\{h`PQ,q)Q_VWXQ,x{d,[(vu[(vQgY(d,{h`bQ_m~S*\Y(QUá;av\Ye^q

&dV[(\,NPVmRQ_V[yNPV¦áëO!d,Yy[(v7Q[kd,[(\,`&ehNPS(WXdTV[kQ_e¦gQZY(Od,YmR\,VhWXQRO!d`f`bd
c@S$OY(dm

[(v7QlT7Q_S(Ska\,Vepa

WvQ_W(w~\gghY(d\,Wv>}9TQ_S(S2\$Sk[(\[(NbdV\YoEgd`fNPWXo,xWZ\,`PWZTh`P\[kQNb[(S9gQZY(O!d,YmR\,VWXQ@\,Ve\,WZWXQZg[sNbO>\,VeRdV`Po
NbO^[(vQgQZYO!d,Ym~\,VWXQNPS&gdSNb[(Nb,Q,q|v7Q[kd,[(\,`^ehNPS(WXdTV[kQ_eu\,Ve[(v7Q\_,QZY\l,QUgQZY(Od,YmR\,VWXQWZ\,Vu{d,[(v
{QWZ\,`PWZT`P\[kQ_e3NPV¡gd`boVdmRNP\,`[(NPmEQ,q
rtV[(v7QES(\,mEQc&\
o,x[(v7Q[kQ_WvVNPT7Q_SgY(dNPVlV7dVh\ggY(d
pNPm~\{hNP`PNb[o¡Y(Q_S(T`b[(SOd,Y[(v7QESk[(\[(NbdV\Y(o

¹

gd`PNPWXo3NfV[(vQ$iVNb[kQv7d,YNbÆZdV4WZ\,SkQ3Lsd,Y(d`P`P\Y(o3ñ7q WZ\,V {QmRdeNbihQ_e3[kdud,{h[(\,NPV4V7dV\gghY(d_7NPmR\Ga
{hNP`fNb[oRYQ_S(T`b[(S*Od,Y@NPV7ijVNb[kQv7d,YNbÆZdVhSZq

8Sx~3y{Ê 032 p² ¶ ½L¬,½ µ ¯,·j¬­¾À µ ·¬9· µ ½²Z³tp¯­ µuê ¯,·3°G¬,¿âh²¯kõs»Â9«º» ¶ âp·j±²Z­½L¯,½L¬,¿>± µf¶Z´ ¯âp·h½²±~¯­
¬°,²X­k¬¬
Ï ²|¸7²Z­!õZ¯­SR¬· ´ ² ´ ¬·§Á²9³k¬¸¸j­k¯¬É µ R¬,½²(± µ õU¬·j±u¯·¿À µ õ@ í áË
(



|vQ|NPVpijVNP[kQXav7d,YNbÆZdV$[(NPmEQXae7QZgQ_VeQ_V[)gd`PNPWXoaLQXpNfSk[kQ_VWXQsgY(d,{h`PQ_mRS)\Y(Q@TVeQ_WZNPe\{h`bQ\,eh\,VN
QZ[s\,`qbx_,,q9Ã4QSv7d
c

[(v\[2Vd$WXdmEghT[(\{h`bQ@OTVWX[(NPdVRWZ\,VQZ,Q_V\ghgY(d_7NPmR\[kQd,g[(NPmR\,`hgd`PNPWZNbQ_SZq

8Sx~3y{Ê 0 p²½ µ R²Z³t±²¸7²Z·j±²X·j½ µ ·¬· µ ½²Z³t¯,­ µuê ¯·¦°G¬¿âh²¯tõUâp·j¯Á ¶ ²Z­°¬ÁX¿P²»Â9«º»
¬°,²X­k¬¬
Ï ²|¸7²Z­!õZ¯­SR¬· ´ ² ´ ¬·h·j¯,½@Á²9³t¬¸¸j­t¯DÉ µ E¬½²(±\Ë
7



(

â·±²X­
¶

|vQgY(dd,O?Od`P`bdc@SsO!Ydmä[(v7QgYdd,O?{o¡\,eh\,VN>QZ[@\,`q+t_,,*S(v7dc@NPV7lE[(vQTVWXdmEghT[(\{hNP`PNb[o
d,O9[(vQE[(NPmEQXae7QZgQ_Ve7Q_V[G\,`PTQ,qUrtV\,e\,VN)QZ[\,`Lq;t_,,x+OY(dm

sØ

\lNb,Q_V1+T7YNPV7lmR\,WvhNPV7Q

\,V

.q
p
mØîv\,`b[(SydV¥Q_mEg[onNfV7ghT7[Zx)[(v7Q_V¥[(v7QZYQ¡NfS$QX7\,WX[(`bo§dV7Qu[(NPmEQXae7QZgQ_VeQ_V[NPVpijVhNb[kQXav7d,YNbÆZdV
gd`PNPWXoc@Nb[(v4gQZY(Od,YmR\,VWXQï
Ô 9é x* \,`P`;d,[(vQZYU[(NPmEQXaeQZgQ_Vhe7Q_V[Ugd`fNPWZNbQ_Sv\_,QgQZY(Od,YmR\,VWXQ
x\,Vhe¥
' @[(v7Q\_,QZY\l,QEG\,`PTQ$NPS{QZ[c&QZQ_V. \,Venq|vNPS@Y(Q_eTWXQ_S[(v7QTVe7Q_WZNfe\{h`bQghY(d,{h`bQ_m
TV7d,{jSkQZY(\{h`bQE&ÅÄzNfSWXdVSk[kYThWX[kQ_e¦v\
NPVl/[(v7QROd`P`bdc@NPV7l¡gY(d,gQZY([(NPQ_SO!d,Y$\Y({hNb[kY\Yo<K&
t
$rãO

6<

h<

d,O9cv7QZ[(v7QZY\+T7YNfV7lmR\,WvNPV7Qv\,`b[(SdV Q_mEg[o3NPV7gjT7[@[kd¡[(v7Qy[(NPmEQXae7QZgQ_VeQ_V[NPVpijVhNb[kQXav7d,YNbÆZdV

gd`PNPWXoQXpNPS([kQ_VWXQgY(d,{h`PQ_mÈO!d,Y@ThV7d,{hSkQZY(\{h`bQsÅÄ2S|TVe7QZY|\
,QZY\l,QygQZYO!d,Ym~\,VWXQ,qWX[(Th\,`P`bo,x

mZa\gghY(d_7NPmR\{h`PQ,x,c2Q|WXdT`feyWv7ddSkQ
Ø¥v\,`P[(S^dV$Q_mEg[o$NPV7ghT7[Zq

\,S(S(ThmRNPV7l[(v\[;[(v7Qs\,`PT7Qsd,Oh[(v7Q*TVd,{hSkQZY(\{h`bQs&ÅÄ4c&QZY(Q

<*NPV$\|cs\_o[(vh\[?QZ,Q_Vy[(v7Q&\ggY(d
pNPm~\[(NbdVQ_V\{j`bQ_S?ThS^[kde7Q_WZNPe7Qcv7QZ[(v7QZY

Za\ggYd_7NPmR\[(NbdV/NfS*NPmEgdS(S(Nb{j`bQ,q
w ~vy~ÉÉ$yÅ 0
p²¦½ µ ~²X³k±²ã¸7²X·j±²X·h½~¬,·j±b µ!¶ ½L¯,­À³k±²¸7²Z·j±²Z·h½ µ ·¬· µ ½²Z³t¯,­ µuê ¯·Ü°G¬,¿âh²1¯kõu»Âs³
«3º» ¶ âp·j±²X­$¬°,²X­k¬¬Ï²|¸²X­õX¯­SR
 ¬· ´ ² ´ ¬,··j¯,½|Á² ³t¬¾¸¸j­k¯¬É µ R ¬,½²(±\Ë
pNPVhWXQ[(vhNPS|NPS*TVhe7Q_WZNPe\{h`PQ,x\,V
l



â

é~} F HB

?

IF

(

? ?hF


æ´å

/' /'

.\'Gñ¦MThSkQ_V\
'

|vNfS@c&d,Y(w3cs\,SS(Tggd,Y([kQ_eNfVgj\Y([{oápÛål,Y\,V[$|sÖ*a p_Ý ,ÝGñ\,Ve1|sÖ|a,Ùp

\,Ve$d`PeS(mRNP[(vjx
\,Ve{oÄQ_T[(S(Wv7QZY+@w\,e7Q_mRNfS(Wv7QZY?TS([(\,TS(WvheNbQ_VSk[Ä|Ä^l,Y\,V[ p_Ý~{G92Z{
lTp
 a\{¥TVhev7Q_V7wq;|v7Q[(vNbYeu\,T7[(v7d,Y|gQZY(Od,YmEQ_e¡gh\Y[*d,O?[(v7QUc2d,Y(w¡\[@Ä\Y([(mEdT[(v&d`P`PQZl,Q,q

U>

Ð 38·?Ñ>Ò©Ëv{v8Ì¨Í.Î·Ò^ÑjÓÔ

^$d`P`bQZY\,Ve

Ã4Q c&dT`Pe`PNPw,Q3[kdn[(v\,V7wÄ\ghvV7Q

$33Ò$3

S(QZ,QZY\,`\,V7dVopmEdTSY(QZOQZY(QZQ_SO!d,Y¡WZ\[(WvNfV7l

QZY(Y(d,YS|NPV¡Q_\Y`PNPQZY*,QZYS(NbdVS|d,O?[(vNfS*gh\gQZY_q

?

â\ jF I9Kfjâ

? H²ç ?

çH+H³_H_

C¾g

W9CB


(././.q2M^QZ[ ) IÒÒÒ*I qöp){Q|\,V~NPVSk[(\,VWXQ*d,O
IÒÒÒDI Ó x7c@v7QZYQWZ`f(\,TSkQ í  õ +(Nß 0 õ +Ô-Sß 0
Ö ¬¾¸¸7²(¬,­ ¶Eµ · ÷ µ ½ ¶¾µ Ï·âe,. ¹ ­k² ¶ ¸1Ë& ¼ NPO

Ã4Q|gYQ_SkQ_V[9[(v7Q*Y(Q_eTWX[(NPdVEO!YdmîTVhev7Q_V7w$QZ[9\,`qbx

IÒÒÒ¬I qö

õ +Ô4Sß 0
Ö Z ÖI Ö
Ö Y(Q_S(g^q Ö sNPS|\E`fNb[kQZY\,`>NPV



z

c@Nb[(v\YNP\{h`bQ_S{ (
|{ \,VeuWZ`P\,TSkQ_S ~
(
|O!d,Y 
{
{

q
4
Ã
QES(\
o3[(v\[\YNP\{h`bQ1{



v]wx4y


{

t{

q


~

o{

|{

~

~[





]





4

~[

FGÈ > í H9ILK / INMÿIQPOINRQIUTINVsc@NP[(v
H í èUI9ëp Fè çÃI_ T Ð : IºØ
K / í  t(I_
QI_
QI
M í .e_I  I
P í
( IÒÒÒ*I qöqI mIºØ
NbO¤K í
 èUIQI QILK¬h í
 t(I  Ú
QI Ú
QIOï ÐI_
è 'I
.// (I
//
//
õ + Ö ß 0 \ggQ_\YS*NPV c@Nb[(vuS(NblVTm-g
\,Ve
//
// (I
h
b
N
¤
O
K




U
è
N
I
Ð

Q

N
I
Ð

Q

L
I
K
I  wè 'I
//
í
í ØJ_
//
õ + Ö ß Ó 0 \ggQ_\YS*NPV Ó c@Nb[(vuS(NblVTm-g
\,Ve
//
(

I
b
N
¤
O
K




U
è
I



Q

I



Q

L
I
¬
K
h


è Ú(I QI Q_
I  è×ï'I
í
í
RZKrIUgqILK h  í 0 //
õ
\,Ve
\ggQ_\YS*NPV
c@Nb[(vuS(NblVTm
ég
//
+Ö ß 0
// (I
NbO¤K í
 'I QI QILK h í I
//
//
õ +Ô4Sß 0 \ggQ_\YS*NPV c@Nb[(vuS(NPlVTm még
\,Ve
//
//
//1 (I
NbO¤K í K h í êd,YK í K h í Ø
.eI d,[(v7QZY(c@NfSkQ
./
Ö I NbO°K í èUI 
(I
NPO6RZK\IUg
IºØ í
(ILKí ì Ø
0
VK\IUg7 í  .eI d,[(vQZY(c@NPSkQ
I
T GK  í /1 ØJI NbO°K í Ø
7
I NbO°K í Ò
ád,[kQ[(v\[|\,`P`[kY\,VhS(Nb[(NbdVSsNPVÈ
G  >s\Y(Qe7QZ[kQZYmRNfVNPSk[(NPWxp\,Ve¡QZ,QZY(o[kY\*k Q_WX[kd,Y(ouv\,Ss\,`PT7Q_.d,Y
qE|v7QZY(QENPS\uWXd,Y(YQ_SkgdVe7Q_VWXQ{QZ[c&QZQ_V4gd`PNPWZNbQ_SOd,Y`é
G  >\,Vhe4\,S(S(NblVmRQ_V[(Sd,O&G\,`fT7Q_S[kd/[(v7Q
\YNP\{h`bQ_SUd,O ?x)STWv¦[(v\[$gd`PNfWZNbQ_STVeQZYc@vNPWvÈ
G  >v\,S$G\,`fT7QWXd,Y(Y(Q_SkgdVe¦[kdS(\[(NPS(O!opNPV7l
Û7Ydm

z?xöc2Q$WXdVSk[kYTWX[\R&ÅÄ
*



\

*

z



o3















o3

o3

{

|{



!



-





~[

{



o3

-



~

{

o3

o3

{



C

~[

o3





{

~[





{





z

z

Iz

z

\,S(S(NPlVmEQ_V[(S*O!d,Y	zxj\,VeupNPWXQ,QZYS(\pq

?

â\ jF I9Kf

C¾g

çH+H³_H_

? H²ç ?


W9C|

&(././.q*M^QZ[

l\,NPV>xc&QUgYQ_SkQ_V[@[(v7QY(Q_eThWX[(NbdVuOY(dm¤TVev7Q_VwQZ[@\,`Lqbx

IÒÒÒDI ö \,Ve Ð WZ`P\,TS(Q_S
HJILK / INMOINRSINV&c@v7QZYQ

\YNP\{h`bQ_S{ (
È z í


G

M

~

í


í


èUI ë è çÃI_
.eI_

H

|{

 

-



(

IÒÒÒ¬I Ó

*T

~

Ð

*z{Q\~O!d,Ym$T`f\c@Nb[(v¡ç

q)@vNPS;[(NPmRQ,xc&Qe7QXijVQ*[(v7QTVd,{hSkQZY(\{h`bQ*Ä

:



UU>



K*grR Ö ë è
-

ç

Z


K / IºØ9I

!


ÔC

Ëv·hûûË7ü3ÍÌQhýÍ{Í.Î þL8$>Î$ÿ{Ë3
ú

.//
//
//
//
//
//
//

RXKrIUg
ILK h 

0

//

í

//

//
//
//
//
//
//
//1

VKrIUgp
? ? ç h? F é ?




í

_

Ó(( I I
(I
(I
(I
(I
(I
(I
.eI
ÐI
.eI

ÃK í K / ILKDh í t(IQI_  Ð
ÃK í èUIQILK h í K*grR Ö ( INèÀïçÃI Ö \ggQ_\YS*NfV c@Nb[(vuSNblVThm-g
NbOÃK í
èUIQILKDh í
è ð(IQINè<ïçÃI
Ö e7dQ_S@V7d,[|\ggQ_\Y@NPV c@Nb[(vuS(NblVTm-g
ö \ggQ_\YS|NPV c@Nb[(vuS(NPlVTm-g
NbOÃK í
çÃIQILK h í ØJI
NbOÃK í
çÃI QILKDh í I qöe7dQ_S|V7d,[@\ggQ_\Y@NfV
c@Nb[(vuSNblVThm-g
NbOÃK í KDgR Ö L
I K h í K*gR Ö ( INè×ïç
NbOÃK í KDgRÚöqL
I K¬h í Ø
NbOÃK í K¬h í êd,Y9K í KDh í ØJIUg í .Ed,YJg í

NbO

T

NbO

Y

~[

{

¢

H

~[

{





~

P{

~[

P{
¢



d,[(v7QZY(cNPSkQ

°K

Ø

RZK\IUg
IºØ .

NbO Rí ì z\,Ve
d,[(v7QZYc@NPSkQEq

&

å

/

UÏ ( µ · ÏrË|9YNPVWXQZ[kdVu¨VNb,QZYS(Nb[o¡YQ_S(SZq
Çs`bo[(v7Q,x7qt_,,qsÄQ_WZNPS(NbdV7aL[(v7QZd,Y(QZ[(NPWgj`P\,VVNPVl7q a@«¦¬¬
Ï ¬ Zê µ ·²Xx ? x0' ¬ ÝGñ7q
Ç&Q_`P`PmR\,V^xÖq@t_,Ý,q|ºÀ·j¬

¸j­k¯ ,­k¬

µ´

E)

u :

Ç&dT7[(NP`PNPQZY_x9qbxÄQ_\,V>x2q)Mqbx9ô\,V7wpSZx2qt_,,q§ÄQ_WZNPS(NPdVpaL[(v7QZd,Y(QZ[(NPWgh`f\,VVNPV7l7}R[kYThWX[(T7Y\,`



\,SS(TmEg[(NPdVS*\,Ve/WXdmEgjT7[(\[(NbdV\,`^`PQZ,QZY\l,Q,q)7¯âp­·¬¿?¯tõ	)a)@² ¶ ²¬­ ´ x

pVp

Q

x+ Gñ7q

Ç&dT7[(NP`PNPQZY_xqbx^ÄQ_\Ye7Q_V>x^ÖUqbxîd`PeSkÆ_m~NPe7[Zx>¦qt_,,Ýqgj`bdNb[(NPV7lSk[kYTWX[(TY(QyNfVgd`PNfWXo/WXdVpa
S([kYTWX[(NbdV>q?rãV

É

Ï p²¯­ µ ² ¶

X ½²X·j± µ ·

( 

»@¬¸7²Z­ ¶ õ­k¯
½ p²
)\Y(wxs\,`fNbO!d,YVNP\pq

(

pVqVq

)")	)a'+,¸j­

7²(¯­¾À »s­k¬ ´ ½ µ´ ¬¿ &¸¸j¿ µ´ ¬½ µ ¯· ¶ 
´ ½ µ ¯·= ^¯,­QR¬¿
Ï hÀ(¸p¯ ¶¾µ âe gg^q'/'D',qÜrRYQ_S(SZx|Q_V`bd

¯tõI)
µ ·

/

Á

(

)

R+

ÇsT7Y\l,d7x9Äyqbx9eQÖ@dT7l,Q_mEdV[Zx9¦qbx&ª7`PNPS(SkQ_Vw,d7x)$qàt_,,ÙqnÅVn[(v7Q¡WXdmEgh`bQX7Nb[o¦d,O|gh\Y([(NP\,`f`bo

p²(¯­(²Z½ µ´ ¬,¿Z;¯(¸jâ7½²X­ ´Zµ ²X· ´ ²Xx ~ x+_ÙpQj_/'q
É¬ ´ ½¬,·j±¬¾¸¸j­k¯¬É µ R¬,½²/¬¿¼Ï ¯,­ µ ½r ¶ õZ¯­¸p¬­X½ µ ¬,¿!¿À¯Á ¶ ²Z­°¬ÁX¿P²E«1¬­®¯,°

d,{jSkQZY(,Q_eu\Y(w,d
ue7Q_WZNPSNbdV~ghY(dWXQ_SSkQ_SZq
s\,S(S\,Ve7Y\px^$q¡t_,,q

Ë

X

*+

(

p tÅ

±² ´Zµ!¶µ ¯·¸j­k¯ ´ ² ¶¶ ² ¶ s¨V7gjT7{h`PNPSv7Q_eedWX[kd,Y\,`eNPS(SkQZY[(\[(NbdV>x7Ç&Y(d
c@V¨VhNb,QZYS(Nb[o,q

}$

s\,S(S\,Ve7Y\px;$qbx \Q_`b{h`PNfV7l7x?M9qbx;ïMNP[k[(mR\,V>x;¦q)Mq¥t_,,Ýq

X$

â¸p±¬,½² U
¶ µ ·~¸p¬­X½ µ ¬¿¿À¡¯Á ¶ ²Z­°¬ÁX¿P²«1¬­®¯,°~±² ´_µf¶¾µ ¯·¸j­k¯ ´ ² ¶¶ ² ¶
9Y(d
pNPe7Q_VhWXQ,xhÖ@v7dpe7QrtS(`P\,Ve>};Ç&Y(dc@V3¨VNb,QZYSNb[o,q
Y(QZQ_Vh`P\_cxÖqbx@dd,QZY_xUqc7qbx@

(

»*³ ´ ¯ ¸j¿P²Z½²X·² ¶¶
\,VSkQ_V>x+|q/t_,,\q



\Ë

Ö@TÆZÆZd7x|Ãzq*M9qét_,,Ýq

½ p²(¯­¾À |ÅpO!d,Yeu¨VNb,QZYS(Nb[o¡YQ_S(SZq

n)µ



(

UÏ ( Ï

´Zµ ²X·j½±,ÀG·¬
µ´ ³P¸j­k¯ ­t¬
µ ·
?Q_Wv^qhÖ|QZg^qád7q|a,Ýa_q

µ ½ ¶

 

½L¯3¸p¬­k¬¿!¿P²X¿

(

´ ¯ ¸jâ7½L¬,½ µ ¯·=

Ê Ë

/ µ · µ ½²X³ R² R¯­À
´ ¯,·h½­t¯,¿&¯tõ¸p¬,­¾½ µ ¬¿¿À1¯Á ¶ ²X­¾°G¬ÁX¿P² ¶ À ¶ ½²
¶ ¨V7ghT{h`PNPS(vQ_e
edWX[kd,Y\,`yeNPSSkQZY([(\[(NbdV>xÄQZg[Zqd,O&dmEghT[kQZY pWZNbQ_VhWXQ,x¨VNP,QZYS(Nb[o ,
d OR\,S(S(\,WvThS(SkQZ[(S \[

mRv7QZYSk[Zq

Ï ¶

\,VSkQ_V>x|qt_,,G{qd`PNPVlR&ÅÄ9S{ouSkQ_\YWvNPV7lNPVugd`PNPWXo¡Skgh\,WXQ,q*rtV»*­t¯ ´ ²²± µ ·
;¯,·_õZ²Z­k²Z· ´ f
² ?· ´ ²X­X½L¬ µ ·h½À µ K
· )­X½ µ ´Zµ ¬N
¿ ·h½²Z¿!¿ µ ²X· ´ ²gg^q p, p_q



Ï

UUU

q Q



¯tõ$½ 7²

Ð 38·?Ñ>Ò©Ëv{v8Ì¨Í.Î·Ò^ÑjÓÔ

$33Ò$3

!+q (././.qzÄopV\,mRNPW3gY(d,l,Y\,m~mRNPV7l1Od,YsÅÄ2SThS(NPV7l¦\¦O\,WX[kd,YQ_e
Ï   ½ µ ·h½²X­¾·j¬,½ µ ¯·j¬¿ ´ ¯,·_õZ²Z­k²Z· ´ ²¡¯,·à¬,­¾½ µ  ´Zµ ¬¿
Ï
Ï
 Ï
¬'(.*jXñq*Ç2YQ_W(w,Q_V7YNfe7l,Q,x|Åq
\,TSkwY(Q_Wv[Zx?§q3t_,,q»s¿b¬·· µ · 
Ï ¬·± ´ ¯·h½­k¯¿ µ · ¶ ½L¯ ´ p ¬ ¶ ½ µ´ ±¯(R ¬ µ · ¶ ÷ µ ½ µ  ¸7²Z­!õ_² ´ ½ µ ·_õZ¯­³
R¬,½ µ ¯·
sË ¨V7ghT{h`PNPS(vQ_e~e7dpWX[kd,Y\,`ehNPS(SkQZY([(\[(NPdV>x7\,S(S\,WvTSkQZ[k[(SrãVS([(Nb[(T7[kQd,O;Q_WvV7d`bd,l,o,q
$NPm/xr$Eq a|qbxpÄQ_\,V>xpqM9qbxßQ_T`bQ_\,T^xá$q9(././. q@ghgY(d_7NPmR\[kQSkd`PT7[(NPdVS;[kdUO\,WX[kd,Y(Q_e\Yw,d

eQ_WZNPS(NbdVgY(dpWXQ_S(SkQ_SNf\~l,Y(QZQ_eo3SkQ_\YWvNfV3[(v7QySkgh\,WXQd,O;ijVhNb[kQUWXdV[kY(d`P`bQZYS_qrtV »*­t¯ ´ ²²± µ ·Ï ¶
¯kõ~½p
 ²  ½ µ ·h½²X­¾·j¬,½ µ ¯·j¬,¿ ´ ¯,·_õZ²Z­k²Z· ´ ²/¯·¬­¾½ µ  ´_µ ¬¿ µ ·j½²X¿¿ µ Ï ²Z· ´ ²¸j¿b¬·· µ ·1
Ï ¬,·j± ¶X´ 7 ²(±âp¿ µ ·Ï
ghg^qq'//'D'/'(
. q*Ç2YQ_W(w,Q_V7YNfe7l,Q,x|Åq
$d`P`PQZY_x^Äyqbx+ä)\Y(Y_x?Öq/(././. q+d`PNPWXoNb[kQZY\[(NbdV1O!d,YO\,WX[kd,Y(Q_e§Ä9S_qyrtV§»*­t¯ ´ ²²± µ ·Ï ¶ ¯tõ~½7 ²
 ;¯·_õ_²X­(²X· ´ ²E¯·+· ´ ²Z­¾½L¬ µ ·h½À µ · ­¾½ µ  ´Zµ ¬¿N·j½²X¿¿ µ Ï ²Z· ´ ²DË
 ½T
\,VSkQ_V>x|@qbx@¤Û7Q_Vl7x

S([(\[kQ~Y(QZgYQ_SkQ_V[(\[(NPdV>qErãVn»s­k¯ ´ ²²(± µ · ¶ ¯tõ~½ p²
µ ·h½²Z¿!¿ µ ²X· ´ ²|¸j¿b¬·· µ · u¬·j± ¶Z´ p²±âp¿ µ · 1ghg^q^

K)

p

MNP[k[(mR\,V>xj§qjM9qt_,Gñq3Q_mRd,Y(o`PQ_S(S|gd`PNPWZNPQ_SZ}9|v7QZd,YQZ[(NPWZ\,`?`fNPmRNb[(\[(NbdVhS*\,Ve/gY\,WX[(NPWZ\,`^Y(Q_ST`b[(SZq

(

rtVuÄyqjs`PNò)xp?q7TSk{h\,VheSZx7q a$q3QZo,QZY_x©qpÃzq7ÃÚNP`PSkdV42eSZqx/­k¯

)·



¯ )· µ ³
µ E¬,¿ ¶ ½L¾
µ yâp¿b¬,½ µ ¯·¯tõI)±¬¸½ µ °²

R¬,½ ¶b *»*­t¯ ´ ²²± µ ·Ï ¶ ¯tõ½p²  µ ­k±?·h½²X­¾·j¬,½ µ ¯·j¬¿Q;¯,·_õZ²Z­k²Z· ´ ²y¯· 
²Ê¬° µ ¯­Ës3rtß9Y(Q_S(SZq
MNP[k[(mR\,V>x¦qGMqbx,ÄQ_\,V>x,q
MqbxF
$ \Q_`b{h`PNfV7l7xM9q
+qt_,,ÝqÅV[(v7Q&WXdmEgh`bQX7Nb[od,OS(d`bNfV7l|\Yw,d

eQ_WZNPS(NbdVgY(d,{j`bQ_mRSZqrtV1»s­k¯ ´ ²²(± µ ·Ï ¶ ¯kõR½p
 ² ½ ··â¬¿);¯,·_õZ²Z­k²Z· ´ ²¯·?· ´ ²X­X½L¬ µ ·h½À µ ·
­X½ µ  ´_µ ¬,¿N·h½²X¿¿ µ 
Ï ²X· ´ ²ghg^qq,' Gñv ñ\.\ q
M^d,Qt
 do,x|ÃÜqsqt_,p
q&dmEgjT7[(\[(NbdV\,`P`Po¦OQ_\,S(Nb{h`bQu{dTVheSyO!d,Ygh\Y([(NP\,`P`Po1d,{hSkQZY(,Q_e \Yw,d

eQ_WZNPS(NbdV¡gYdWXQ_S(S_qÂ?¸7²X­k¬,½ µ ¯· ¶ @² ¶ ²¬­ ´ 
 x  t
x+_/Dj 
Ýq
K+

(

p=p

)

)

=q

MThSkQ_V\px@qbx|MNLxsqbxpNb[k[(NPV7l,QZY
x*qbx*Ã4Q_`f`PSZx@qbx@

Ï ¶

ÃÚv7Q_VmEd,Y(QymEQ_mEd,Y(o/v7Q_`PghSZq*rtV»s­k¯ ´ ²²(± µ ·
)­X½ µ
¿ ·h½²X¿¿ µ ²X· ´ ²ghg^q ñ ,p
q
´_µ ¬,N



Ï

q' v'

\,e\,VNx,ÅyqbxG\,V7wpSZxqbx

d`PeS(m~Nb[(v>xc7q©t_,,qzoà{Y\,NPVåNPSROT`P`}



¯kõy½ p²

p~



½ ;¯,·_õZ²Z­k²Z· ´ ²~¯·+· ´ ²Z­¾½L¬ µ ·h½À

&dVe7dV^x$qht_,,q7ÅV[(v7Q9TVeQ_WZNPe\{hNP`fNb[o*d,OpgY(d,{j\{hNP`PNPS([(NPWgj`P\,VVNPVl

Ï ¶

\,VheNfVpijVNb[kQXavd,YNbÆZdVRgj\Y([(NP\,`P`bod,{hS(QZY(G\{j`bQ\Y(w,de7Q_WZNfS(NbdVgY(d,{h`bQ_m~SZq^rtVu»*­t¯ ´ ²²± µ ·
½ 7² p ½ 9$¬,½ µ ¯,·j¬Z
¿ ;¯,·_õZ²Z­k²Z· ´ ²R¯K
· )­X½ µ ´Zµ ¬N
¿ ·h½²Z¿!¿ µ ²X· ´ ²gg^qhÝGñ ÝGñq





\$

µ ·

/'



Ï

Q

¯tõ

W
s\,`P`PTm/xUq Eq)t_, qÅ,QZYWXdmRNPVlNPVWXdmEgh`PQZ[kQ&gQZYWXQZgh[(NbdVc@Nb[(vT7[(NP`PQsehNPSk[(NPVWX[(NPdV$mEQ_mRd,Y(o,q

Ï

 
 µ ·² ²(¬­¾· µ ·¥
Ï gg^q+_(.*
X$
Q_T`bQ_\,T>xáUqbx1$NPm/x
E
$ q a@qbx&$\Q_`P{h`PNPV7l7xjMq?qbx>Ès\,S(S(\,VeY\pxj$qÖUq$t_,,qUd`bpNPV7l~sÅÄ2S
{o§S(Q_\YWvNfV7l4[(v7QuSkgh\,WXQud,O@ijVNb[kQ¡gd`PNPWZNbQ_S_q4rãV»s­k¯ ´ ²²(± µ ·Ï ¶ ¯tõu½p
 ² ~ ½ 
 ;¯·_õ_²X­(²X· ´ ²3¯,·
+· ´ ²X­X½L¬ µ ·j½À µ · ­X½ µ  ´_µ ¬,¿N·h½²X¿¿ µ 
Ï ²X· ´ ²ghg^q7ñ
¬ ñr, Ùq
Q_T`bQ_\,T>x7á$qbxp+Q_S(vwNPV^xM9qbxeU
$ NPmuxR$ q a|qbx $ \Q_`b{h`PNfV7l7xM9q+q*t_,,q)MQ_\YVNPVlijVNP[kQXaSk[(\[kQWXdVpa
[kYd`P`bQZYS@O!d,Ygh\Y([(Nf\,`P`bod,{hSkQZY(\{h`bQ$Q_VpNbY(dVmRQ_V[(SZq@rãV4»s­k¯ ´ ²²(± µ ·Ï ¶ ¯tõ½p
 ² ~ ½
 ;¯,·_õZ²Z­k²Z· ´ ²
¯,·¡+· ´ ²X­X½L¬ µ ·j½À µ · ­¾½ µ  ´Zµ ¬¿N·j½²X¿¿ µ 
Ï ²Z· ´ ²gg^q7ñr ¬ ñr,' Ùq
TVev7Q_Vwjx§q(././,
. \q|v7Q$WXdmEgh`bQX7Nb[o¡d,O)d,g[(NPm~\,`S(mR\,`f`>gd`PNPWZNbQ_SZqs«1¬,½p ²R ¬,½ µ´Z¶ ¯tõÂ?¸7²X­k¬³
½ µ ¯· ¶ |² ¶ ²(¬­ ´ 
 x  t
x+,_Dj ¬, q
rtV1»s­k¯ ´ ²²(± µ · ¶ ¯kõy½ p² p :½ e·h½²X­¾·j¬,½ µ ¯·j¬,¿G;¯·_õ_²X­(²X· ´ ²~¯,·«1¬ ´
_,Ùqsd,Y(l\,V \,TOmR\,VhVu9T7{h`fNPS(v7QZYS_q

n

p

)

p

)

u

UUÎ

ÔC

Ëv·hûûË7ü3ÍÌQhýÍ{Í.Î þL8$>Î$ÿ{Ë3
ú

(././.{q 7² ´ (¯ ¸j¿P²UÉ µ ½À¯kõ&¸j¿¬,·· µ ·Ï÷ µ ½$¸p¬­X½ µ ¬¿!¿À³t¯Á ¶ ²Z­°¬ÁX¿P²«¦¬­®,¯°R±² ´_µ ³
Q_Wv>qjÖ@QZg^qhád7qh|Ö(././G
. aÚ' ÙqsÄ\Y([(mRdT7[(v&d`f`bQZl,Q,q

TVev7Q_Vwjxp¦q|

(

¶¾µ ¯,·~¸­t¯ ´ ² ¶¶ ² ¶

TVev7Q_VwjxG¦qbxd`PehS(mRNb[(v>xA7qbx`P`bQ_Vhe7QZY_x@qjt_,,q|v7Q2WXdmEgh`bQX7Nb[od,O7[(v7Q2gd`PNPWXoQXpNPS([kQ_VWXQ
ghY(d,{h`bQ_m

O!d,Y2gh\Y([(NP\,`P`PoaLd,{hS(QZY(G\{j`bQsijVNb[kQXavd,YNbÆZdVR\Y(w,d
e7Q_WZNPS(NPdVEgY(dpWXQ_S(SkQ_SZq>rtV»*­t¯ ´ 
² ²±³
¿ /^¯,â·±¬,½ µ ¯· ¶ ¯t¢
õ ;¯ @¸âp½²Z*
­ + ´Zµ ²X· ´ ² ¶´ ¯,·_õZ²Z­k²Z· ´ ²ggq , j ,
 q
µ · ¶	u ½ ~«¦¬,½ p² E¬½ µ´ ¬
pgYNPV7l,QZY(aLÕ;QZY`P\l7q

Ï



 

/

¬ D ¬'

(././.qE&dmEgh`PQXpNb[ouY(Q_S(T`P[(S@Od,Y

ñxÙ,pQp
 ((p. q

TVev7Q_Vwjx¦qbxd`feS(mRNb[(v^x$qbxM?TSkQ_V\pxqbx^é`P`bQ_Ve7QZY
xj|q~

iVNb[kQXav7d,YNPÆZdVU\Y(w,d
ye7Q_WZNPS(NbdVUgY(dpWXQ_S(S+gY(d,{h`PQ_mRSZq£7¯âp­·¬¿¯tõ*½ p²\)`^«4x

(

rÅ

( UÉ µ ½À\ËseeNPS(dVpaLÃ4Q_S(`bQZo,q

)\gh\,eNPm~Nb[kYNbdT>xq$qt_,Gñq`;¯ ¸jâ7½L¬,½ µ ,
¯ ·j¬¿ ´ ¯ ¸j¿P²

|S(Nb[(S(NPw`PNfSZx 7qá$q t_,,ÙqurtV[kY\,WX[(\{h`bQgY(d,{h`bQ_m~SNPV4WXdV[kY(d`9[(vQZd,Y(o,q

)\gh\,eNPm~Nb[kYNbdT>x)q$qbx)

+|)«¤7¯âp­·j¬,¿+¯tõ;¯,·h½­t¯,¿+¬·j± Â?¸½

 µuê ¬,½ µ ¯·x

µ

|SNb[(S(Nbwp`PNPSZx)q*áUq

)\gh\,eNPm~Nb[kYNbdT>xq|Uqbx

 Ê

ghY(dWXQ_SSkQ_SZq&«¦¬,½ p² R¬,½ µ´X¶

¯tõRÂ?¸7²X­k¬,½ µ 
¯ · ¶

/' D

ñx>Ù , Ù,ÝGñ7q

ur

t_,,q

|vQ WXdmRgh`bQX7Nb[o



|² ¶ ²(¬­ ´ x

pu

'

Q (.

d,Oy\Y(w,d
ðe7Q_WZNfS(NbdV

 xjñ,ñ ñÝ pq

$ \Q_`b{h`fNPV7l7x|Mq|+q t_,,qäM^Q_\YVNfV7l¥gd`fNPWZNbQ_Sc@Nb[(v QX[kQZYV\,`
Ï ¶ ¯kõ~½p²  ½_·j½²X­¾·j¬,½ µ ¯·j¬¿D;¯·_õ_²X­(²X· ´ ²¡¯·§«1¬ ´  µ ·² ²¬­· µ ·Ï
$\,T7OmR\,VV>xj7\,VuÛ7Y\,VWZNPSWXd7xs$q
 ²ÊR ¯­¾À² ¶ ½ µ E ¬½ µ ¯·¬·± ´ ¯·h½­k¯¿&¯tõ<· µ ½²¸j­k¯Á(¬Á µ ¿ µ!¶ ½ µ´¶ À ¶ ³
µ · µ ½²Z³Ú~

+Q_S(v7wpNPV>xMqbx3Q_T`PQ_\,T>xá$qbx
mRQ_mEd,Y(o,q~rtV§»*­t¯ ´ ²²± µ ·
ghg^q  pXñq*3d,Y(l\,V

q'(. ¬'
9`f\[kÆ_mR\,V>xM9q1R
$ qt_,,q
½² ¶ ¡
Ë ¨V7ghT7{h`fNPS(v7Q_ee7dpWX[kd,Y\,`9eNfS(SkQZY([(\[(NbdV^xÄQZgh\Y([(mEQ_V[Ud,O*9`PQ_WX[kYNPWZ\,`92V7lNPV7QZQZYNPV7lu\,Ve
0/

p

n

sdmEghT7[kQZY7WZNbQ_VWXQ,x\,S(S(\,WvTSkQZ[k[(SrtVSk[(Nb[(T[kQd,O;?Q_WvVd`bd,l,o,xs\,m${YNfe7l,Q,x$q

Ë

9T[kQZYmR\,V>x§qhMq@t_,Gñq|«1¬,­®,¯°~±² ´_µf¶¾µ ¯,·¸j­t¯ ´ ² ¶¶ ² ¶ c,dvhVuÃ

/

pv\,m~NbY_x7Uq@t_, q&rt



pdVSZxáQZc¥d,Y(wq

Nf`bQZo

D

sp@s|q¦7¯âp­¾·j¬¿+¯kõ½ p²-)`^« x Àq ñx>,Ù, ,q
í

('

pmR\,`f`bc2ddpe>xGÖUqGÄyqbxðdVehNbwjx|qz7q^t_ qh@v7Q2d,gh[(NPmR\,`WXdV[kY(d`d,Ojgh\Y([(NP\,`P`Pod,{jSkQZY(,Q_e\Yw,d

ghY(dWXQ_SSkQ_S*d
,QZY[(v7QiVNb[kQv7d,YNbÆZdV^qÂ?¸7²X­k¬,½ µ 
¯ · ¶
dVehNbwjx|q7q9t_
q







@² ¶ ²¬­ ´ x

uÀp

. Q .

x?  j ,q

Ë

( p²¯¾¸½ µ R¬¿ ´ ¯·h½­k¯¿¯tõ9¸p¬­X½ µ ¬,¿!¿À¯Á ¶ ²X­¾°G¬ÁX¿P²«¦¬­®,¯°*¸­t¯ ´ ² ¶¶ ² ¶ )¨VghT7{7a
`fNPS(v7Q_e¡e7dpWX[kd,Y\,`ehNPS(SkQZY([(\[(NPdV>xh[(\,V7Od,Ye/¨VNb,QZYS(NP[o,q

|S(NP[(S(Nbwp`PNPSZx,q?á$qbxîÕ\,V¥Ö|dojxÇq§t_,,Ùq4Û7Q_\[(TY(QXaL{h\,SkQ_eàmEQZ[(vdeSUO!d,Y`P\Y(l,Q¡S(WZ\,`bQe7opV\,mRNPW

 µ ·²

ghY(d,l,Y\,mRmRNfV7l7q2«1¬ ´

n

Ï

²(¬,­· µ · x

uVu

D

xÝ, Gñ7q

ÃÚvNb[kQ,xqjqbxr(r(r¾q@t_,p
q*+\Y[(NP\,`P`bod,{hSkQZY(,Q_e\Y(w,d/e7Q_WZNPS(NPdV¡gY(dpWXQ_S(SkQ_SZ}9ëS(TY(,QZo,q)·h·j¬¿ ¶
¯kõ~Â?¸7²X­k¬,½ µ ¯· ¶ |² ¶ ²(¬­ ´ x Äu x p_Ý
pq



& D/'(.

!v\,Vl7xpá$q7Mqbx7M^QZQ,xjqqbx7!vh\,V7l7xpÃzq*t_,,q9mRQZ[(v7deOd,Y|SkgQZQ_eNPV7lyT7g¡G\,`fT7QNP[kQZY\[(NbdV¡NPV
gj\Y([(NP\,`P`bod,{hSkQZY\{j`bQ\Yw,d
3e7Q_WZNfS(NbdV¡gY(dpWXQ_S(SkQ_S_q9rtV»s­k¯ ´ ²²(± µ ·Ï ¶ ¯tõ$½p
 ² ~ ½
 ;¯,·_õZ²Z­k²Z· ´ ²
¯,·¡+· ´ ²X­X½L¬ µ ·j½À µ · ­X½ µ  ´_µ ¬,¿N·h½²X¿¿ µ 
Ï ²X· ´ ²ghg^qhÙ,,ÙDp v.\' q
p

)

UU

Journal of Articial Intelligence Research 14 (2001) 29-51

Submitted 6/00; published 2/01

Speeding Up the Convergence of Value Iteration
in Partially Observable Markov Decision Processes
Nevin L. Zhang
Weihong Zhang

Department of Computer Science
Hong Kong University of Science & Technology
Clear Water Bay Road, Kowloon, Hong Kong, CHINA

lzhang@cs.ust.hk
wzhang@cs.ust.hk

Abstract

Partially observable Markov decision processes (POMDPs) have recently become popular among many AI researchers because they serve as a natural model for planning under
uncertainty. Value iteration is a well-known algorithm for nding optimal policies for
POMDPs. It typically takes a large number of iterations to converge. This paper proposes
a method for accelerating the convergence of value iteration. The method has been evaluated on an array of benchmark problems and was found to be very eective: It enabled
value iteration to converge after only a few iterations on all the test problems.

1. Introduction
POMDPs model sequential decision making problems where eects of actions are nondeterministic and the state of the world is not known with certainty. They have attracted
many researchers in Operations Research and Articial Intelligence because of their potential applications in a wide range of areas (Monahan 1982, Cassandra 1998b), one of which is
planning under uncertainty. Unfortunately, there is still a signicant gap between this potential and actual applications, primarily due to the lack of eective solution methods. For
this reason, much recent eort has been devoted to nding ecient algorithms for POMDPs
(e.g., Parr and Russell 1995, Hauskrecht 1997b, Cassandra 1998a, Hansen 1998, Kaelbling
et al. 1998, Zhang et al. 1999).
Value iteration is a well-known algorithm for POMDPs (Smallwood and Sondik 1973,
Puterman 1990). It starts with an initial value function and iteratively performs dynamic
programming (DP) updates to generate a sequence of value functions. The sequence converges to the optimal value function. Value iteration terminates when a predetermined
convergence condition is met.
Value iteration performs typically a large number of DP updates before it converges and
DP updates are notoriously expensive. In this paper, we develop a technique for reducing
the number of DP updates.
DP update takes (the nite representation of) a value function as input and returns (the
nite representation of) another value function. The output value function is closer to the
optimal than the input value function. In this sense, we say that DP update improves its
input. We propose an approximation to DP update called point-based DP update. Pointbased DP update also improves its input, but possibly to a lesser degree than standard DP
update. On the other hand, it is computationally much cheaper. During value iteration, we
c 2001 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

Zhang & Zhang
perform point-based DP update a number of times in between two standard DP updates.
The number of standard DP updates can be reduced this way since point-based DP update
improves its input. The reduction does not come with a high cost since point-based DP
update takes little time.
The rest of this paper is organized as follows. In the next section we shall give a brief
review of POMDPs and value iteration. The basic idea behind point-based DP update will
be explained in Section 3. After some theoretical preparations in Section 4, we shall work
out the details of point-based DP update in Section 5. Empirical results will be reported
in Section 6 and possible variations evaluated in Section 7. Finally, we shall discuss related
work in Section 8 and provide some concluding remarks in Section 9.

2. POMDPs and Value Iteration
2.1 POMDPs
A partially observable Markov decision process (POMDP) is a sequential decision model
for an agent who acts in a stochastic environment with only partial knowledge about the
state of its environment. The set of possible states of the environment is referred to as
the state space and is denoted by S . At each point in time, the environment is in one of
the possible states. The agent does not directly observe the state. Rather, it receives an
observation about it. We denote the set of all possible observations by Z . After receiving the
observation, the agent chooses an action from a set A of possible actions and executes that
action. Thereafter, the agent receives an immediate reward and the environment evolves
stochastically into a next state.
Mathematically, a POMDP is specied by: the three sets S , Z , and A; a reward function
r(s; a); a transition probability function P (s0 js; a); and an observation probability function
P (z js0 ; a). The reward function characterizes the dependency of the immediate reward on
the current state s and the current action a. The transition probability characterizes the
dependency of the next state s0 on the current state s and the current action a. The
observation probability characterizes the dependency of the observation z at the next time
point on the next state s0 and the current action a.

2.2 Policies and Value Functions
Since the current observation does not fully reveal the identity of the current state, the agent
needs to consider all previous observations and actions when choosing an action. Information about the current state contained in the current observation, previous observations,
and previous actions can be summarized by a probability distribution over the state space
(Astrom 1965). The probability distribution is sometimes called a belief state and denoted
by b. For any possible state s, b(s) is the probability that the current state is s. The set of
all possible belief states is called the belief space. We denote it by B.
A policy prescribes an action for each possible belief state. In other words, it is a
mapping from B to A. Associated with a policy  is its value function V  . For each belief
state b, V  (b) is the expected total discounted reward that the agent receives by following
30

Speeding Up Value Iteration in POMDPS
the policy starting from b, that is

1
X
t r ];

V  (b) = E;b[

t=0

t

(1)

where rt is the reward received at time t and
 (0<1) is the discount factor. It is known
that there exists a policy  such that V  (b)V  (b) for any other policy  and any belief
state b (Puterman 1990). Such a policy is called an optimal policy. The value function of an
optimal policy is called the optimal value function. We denote it by V  . For any positive
number , a policy  is -optimal if

V  (b) +   V  (b) 8b 2 B:

2.3 Value Iteration

To explain value iteration, we need to consider how belief state evolves over time. Let b
be the current belief state. The belief state at the next point in time is determined by the
current belief state, the current action a, the next observation z . We denote it by baz . For
any state s0 , baz (s0 ) is given by

baz (s0 ) =

Ps P (z; s0js; a)b(s)

;
(2)
P (z jb; a)
P
where P (z; s0 js; a)=P (z js0 ; a)P (s0 js; a) and P (z jb; a)= s;s0 P (z; s0 js; a)b(s) is the renormal-

ization constant. As the notation suggests, the constant can also be interpreted as the
probability of observing z after taking action a in belief state b.
Dene an operator T that takes a value function V and returns another value function
TV as follows:
X
TV (b) = max
[r(b; a) +  P (z jb; a)V (baz )] 8b 2 B
(3)
a
z

P
where r(b; a) = s r(s; a)b(s) is the expected immediate reward for taking action a in belief
state b. For a given value function V , a policy  is said to be V -improving if
X P (zjb; a)V (ba)] 8b 2 B:
(b) = arg max
[
r
(
b;
a
)
+

z
a
z

(4)

Value iteration is an algorithm for nding -optimal policies. It starts with an initial
value function V0 and iterates using the following formula:
Vn = TVn,1 :
It is known (e.g., Puterman 1990, Theorem 6.9) that Vn converges to V  as n goes to
innity. Value iteration terminates when the Bellman residual maxb jVn (b) , Vn,1 (b)j falls
below (1 , )=2. When it does, a Vn -improving policy is -optimal (e.g., Puterman 1990).
Since there are innitely many belief states, value functions cannot be explicitly represented. Fortunately, the value functions that one encounters in the process of value iteration
admit implicit nite representations. Before explaining why, we rst introduce several technical concepts and notations.
31

Zhang & Zhang

α1
α2
α3
α4

(1, 0)

(0, 1)

Figure 1: Illustration of Technical Concepts.

2.4 Technical and Notational Considerations

For convenience, we view functions over the state space vectors of size jSj. We use lower
case Greek letters  and  to refer to vectors and script letters V and U to refer to sets of
vectors. In contrast, the upper case letters V and U always refer to value functions, that is
functions over the belief space B. Note that a belief state is a function over the state space
and hence can be viewed as a vector.
A set V of vectors induces a value function as follows:

f (b) = max
b 8b 2 B;
2V

P

where b is the inner product of  and b, that is b= s (s)b(s). For convenience, we
shall abuse notation and use V to denote both a set of vectors and the value function induced
by the set. Under this convention, the quantity f (b) can be written as V (b).
A vector in a set is extraneous if its removal does not aect the function that the set
induces. It is useful otherwise. A set of vectors is parsimonious if it contains no extraneous
vectors.
Given a set V and a vector  in V , dene the open witness region R(; V ) and closed
witness region R(; V ) of  w.r.t V to be regions of the belief space B respectively given by

R(; V ) = fb 2 Bjb > 0 b; 80 2 Vnfgg
R(; V ) = fb 2 Bjb  0 b; 80 2 Vnfgg
In the literature, a belief state in the open witness region R(; V ) is usually called a witness
point for  since it testies to the fact that  is useful. In this paper, we shall call a belief
state in the closed witness region R(; V ) a witness point for .
Figure 1 diagrammatically illustrates the aforementioned concepts. The line at the
bottom depicts the belief space of a POMDP with two states. The point at the left end
represents the probability distribution that concentrates all its masses on one of the states,
while the point at the right end represents the one that concentrates all its masses on the
other state. There are four vectors 1 , 2 , 3 , and 4 . The four slanting lines represent
32

Speeding Up Value Iteration in POMDPS

V ; ):

VI(

1.
2.
3.
4.
5.
6.
7.



(1 , )=2.

do f
U

DP-UPDATE(V ).
maxb jU (b) , V (b)j;
if (r > ) V U .
g while ( r > ).
return U .

r

Figure 2: Value Iteration for POMDPs.
the linear functions i b (i=1; 2; 3; 4) of b. The value function induced by the four vectors
is represented by the three bold line segments at the top. Vector 3 is extraneous as its
removal does not aect the induced function. All the other vectors are useful. The rst
segment of the line at the bottom is the witness region of 1 , the second segment is that of
2 , and the last segment is that of 4 .

2.5 Finite Representation of Value Functions and Value Iteration

A value function V is represented by a set of vectors if it equals the value function induced
by the set. When a value function is representable by a nite set of vectors, there is a
unique parsimonious set of vectors that represents the function (Littman et al. 1995a).
Sondik (1971) has shown that if a value function V is representable by a nite set
of vectors, then so is the value function TV . The process of obtaining the parsimonious
representation for TV from the parsimonious representation of V is usually referred to as
dynamic programming (DP) update. Let V be the parsimonious set of vectors that represents
V . For convenience, we use T V to denote the parsimonious set of vectors that represents
TV .
In practice, value iteration for POMDPs is not carried out directly in terms of value
functions themselves. Rather, it is carried out in terms of sets of vectors that represent the
value functions (Figure 2). One begins with an initial set of vectors V . At each iteration,
one performs a DP update on the previous parsimonious set V of vectors and obtains a new
parsimonious set of vectors U . One continues until the Bellman residual maxb jU (b) ,V (b)j,
which is determined by solving a sequence of linear programs, falls below a threshold.

3. Point-Based DP Update: The Idea
This section explains the intuitions behind point-based DP update. We begin with the
so-called backup operator.

3.1 The Backup Operator
Let V be a set of vectors and b be a belief state. The backup operator constructs a new

vector in three steps:

33

Zhang & Zhang
1. For each action a and each observation z , nd the vector in V that has maximum inner
product with bza | the belief state for the case when z is observed after executing action
a in belief state b. If there are more than one such vector, break ties lexicographically
(Littman 1996). Denote the vector found by a;z .
2. For each action a, construct a vector a by:
X
a (s) = r(s; a) +  P (s0 ; zjs; a)a;z (s0); 8s 2 S :
z;s0

3. Find the vector, among the a 's, that has maximum inner product with b. If there
are more than one such vector, break ties lexicographically. Denote the vector found
by backup(b; V ).
It has been shown (Smallwood and Sondik 1973, Littman 1996) that backup(b; V ) is a
member of T V | the set of vectors obtained by performing DP update on V . Moreover, b
is a witness point for backup(b; V ).
The above fact is the corner stone of several DP update algorithms. The one-pass
algorithm (Sondik 1971), the linear-support algorithm (Cheng 1988), and the relaxed-region
algorithm (Cheng 1988) operate in the following way: They rst systematically search for
witness points of vectors in T V and then obtain the vectors using the backup operator. The
witness algorithm (Kaelbling et al. 1998) employs a similar idea.

3.2 Point-Based DP Update

Systematically searching for witness points for all vectors in T V is computationally expensive. Point-based DP update does not do this. Instead, it uses heuristics to come up with
a collection of belief points and backs up on those points. It might miss witness points for
some of the vectors in T V and hence is an approximation of standard DP update.
Obviously, backing up on dierent belief states might result in the same vector. In other
words, backup(b; V ) and backup(b0 ; V ) might be equal for two dierent belief states b and
b0. As such, it is possible that one gets only a few vectors after many backups. One issue in
the design of point-based DP update is to avoid this. We address this issue using witness
points.
Point-based DP update assumes that one knows a witness point for each vector in its
input set. It backs up on those points.1 The rationale is that witness points for vectors in
a given set \scatter all over the belief space" and hence the chance of creating duplicate
vectors is low. Our experiments have conrmed this intuition.
The assumption made by point-based DP update is reasonable because its input is
either the output of a standard DP update or another point-based DP update. Standard
DP update computes, as by-products, a witness point for each of its output vectors. As will
be seen later, point-based DP update also shares this property by design.

3.3 The Use of Point-Based DP Update

As indicated in the introduction, we propose to perform point-based DP update a number
of times in between two standard DP updates. To be more specic, we propose to modify
1. As will be seen later, point-based DP update also backs up on other points.

34

Speeding Up Value Iteration in POMDPS

VI1(

1.
2.
3.
4.
5.
6.
7.

V ; ):



(1 , )=2.

do f
U

DP-UPDATE(V ).
maxb jU (b) , V (b)j;
if (r > ) V POINT-BASED-VI(U ; ).
g while ( r > ).
return U .

r

U ; ):
1. do f
2.
V U.
3.
U POINT-BASED-DPU(V )
4. g while (STOP(U ; V ; )= false).
5. return V .
POINT-BASED-VI(

Figure 3: Modied Value Iteration for POMDPs.
value iteration in the way as shown in Figure 3. Note that the only change is at line
5. Instead of assigning U directly to V , we pass it to a subroutine POINT-BASED-VI and
assign the output of the subroutine to V . The subroutine functions in the same way as
value iteration, except that it performs point-based DP updates rather than standard DP
updates. Hence we call it point-based value iteration.
Figure 4 illustrates the basic idea behind modied value iteration in contrast to value
iteration. When the initial value function is properly selected,2 the sequence of value functions produced by value iteration converges monotonically to the optimal value function.
Convergence usually takes a long time partially because standard DP updates, indicated
by fat upward arrows, are computationally expensive. Modied value iteration interleaves
standard DP updates with point-based DP updates, which are indicated by the thin upward
arrows. Point-based DP update does not improve a value function as much as standard DP
update. However, its complexity is much lower. As a consequence, modied value iteration
can hopefully converge in less time.
The idea of interleaving standard DP updates with approximate updates that back up
at a nite number of belief points is due to Cheng (1988). Our work diers from Cheng's
method mainly in the way we select the belief points. A detailed discussion of the dierences
will be given in Section 8.
The modied value iteration algorithm raises three issues. First, what stopping criterion
do we use for point-based value iteration? Second, how can we guarantee the stopping
criterion can eventually be satised? Third, how do we guarantee the convergence of the
modied value iteration algorithm itself? To address those issues, we introduce the concept
of uniformly improvable value functions.
2. We will show how in Section 5.5.

35

Zhang & Zhang

.
.
.

.
.
.

standard update

point-based update

Value iteration

Modified value iteration

Figure 4: Illustration of the Basic Idea behind Modied Value Iteration.

4. Uniformly Improvable Value Functions

Suppose V and U are two value functions. We say that U dominates V and write V U if
V (b)U (b) for every belief state b. A value function V is said to be uniformly improvable if
V TV . A set U of vectors dominates another set V of vectors if the value function induced
by U dominates that induced by V . A set of vectors is unformly improvable if the value
function it induces is.

Lemma 1 The operator T is isotone in the sense that for any two value functions V and
U , V U implies TV TU . 2
This lemma is obvious and is well known in the MDP community (Puterman 1990).
Nonetheless, it enables us to explain the intuition behind the term \uniformly improvable".
Suppose V is a uniformly improvable value function and suppose value iteration starts
with V . Then the sequence of value functions generated is monotonically increasing and
converges to the optimal value function V  . This implies V TV V  . That is, TV (b) is
closer to V  (b) than V (b) for all belief states b.
The following lemma will be used later to address the issues listed at the end of the
previous section.

Lemma 2 Consider two value functions V and U . If V is uniformly improvable and
V U TV , then U is also uniformly improvable.
Proof: Since V U , we have TV TU by Lemma 1. We also have the condition U TV .
Consequently, U TU . That is, U is uniformly improvable. 2
Corollary 1 If value function V is uniformly improvable, so is TV . 2

5. Point-Based DP Update: The Algorithm

Point-based DP update is an approximation of standard DP update. When designing
point-based DP update, we try to strike a balance between quality of approximation and
36

Speeding Up Value Iteration in POMDPS
computational complexity. We also need to guarantee that the modied value iteration
algorithm converges.

5.1 Backing Up on Witness Points of Input Vectors
Let V be a set of vectors on which we are going to perform point-based DP update. As
mentioned earlier, we can assume that we know a witness point for each vector in V . Denote

the witness point for a vector  by w(). Point-based DP update rst backs up on these
points and thereby obtains a new set of vectors. To be more specic, it begins with the
following subroutine:

V ):
1. U ;.
2. for each  2 V
3.
 backup(w( ); V ).
4.
if  2= U
5.
w()
w( ).
6.
U U [ fg.
7. return U .
backUpWitnessPoints(

In this subroutine, line 4 makes sure that the resulting set U contains no duplicates and
line 5 takes note of the fact that w( ) is also a witness point for  (w.r.t T V ).

5.2 Retaining Uniform Improvability

To address convergence issues, we assume that the input to point-based DP update is
uniformly improvable and require its output to be also uniformly improvable. We will
explain later how the assumption can be facilitated and how the requirement guarantees
convergence of the modied value iteration algorithm. In this subsection, we discuss how
the requirement can be fullled.
Point-based DP update constructs new vectors by backing up on belief points and the
new vectors are all members of T V . Hence the output of point-based DP update is trivially
dominated by T V . If the output also dominates V , then it must be uniformly improvable
by Lemma 2. The question is how to guarantee that the output dominates V .
Consider the set U resulted from backUpWitnessPoints. If it does not dominate V , then
there must exist a belief state b such U (b)<V (b). Consequently, there must exist a vector
 in V such that U (b)< b. This gives us the following subroutine for testing whether
U dominates V and for, when this is not the case, adding vectors to U so that it does.
The subroutine is called backUpLPPoints because belief points are found by solving linear
programs.

U ; V ):
1. for each  2 V
2.
do f
backUpLPPoints(

3.
4.
5.

b

if b 6

dominanceCheck(
= NULL,
backup(
).



; U ).

b; V

37

Zhang & Zhang
6.
7.
8.

w(

)

b.

U U [ fg.
g while (b 6= NULL).

The subroutine examines vectors in V one by one. For each  in V , it calls another subroutine
try to nd a belief point b such that U (b)< b. If such a point is found,
it backs up on it, resulting in a new vector  (line 5). By the property of the backup
operator, b is a witness point of  w.r.t T V (line 6). There cannot be any vector in U that
equals .3 Consequently, the vector is simply added to U without checking for duplicates
(line 7). The process repeats for  until dominanceCheck returns NULL, that is when there
are no belief points b such that U (b)< b. When backUpLPPoints terminates, we have
U (b) b for any vector  in V and any belief point b. Hence U dominates V .
The subroutine dominanceCheck(; U ) rst checks whether there exists a vector  in U
that pointwise dominates  , that is (s) (s) for all states s. If such an  exists, it returns
NULL right away. Otherwise, it solves the following linear program LP(; U ). It returns the
solution point b when the optimal value of the objective function is positive and returns
NULL otherwise:4
dominanceCheck to

; U ):
1. Variables: x, b(s) for each state s
2. Maximize: x.
3. Constraints:
Ps (s)b(s)  x+ Ps (s)b(b) for all 2U
4.
Ps b(s) = 1, b(s)  0 for all states s.
5.
LP(

5.3 The Algorithm

Here is the complete description of point-based DP update. It rst backs up on the witness
points of the input vectors. Then, it solves linear programs to identify more belief points and
backs up on them so that its output dominates its input and hence is uniformly improvable.
POINT-BASED-DPU(V ):
1. U backUpWitnessPoints(V )
2. backUpLPPoints(U ; V )
3. return U .
In terms of computational complexity, point-based DP update performs exactly jVj
backups in the rst step and no more than jT Vj backups in the second step. It solves linear
programs only in the second step. The number of linear programs solved is upper bounded
by jT Vj+jVj and is usually much smaller than the bound. The numbers of constraints in
the linear programs are upper bounded by jT Vj + 1.
3. Since b is a witness of  w.r.t T V , we have b=T V (b). Since V is uniformly improvable, we also
have T V (b)V (b). Together with the obvious fact that V (b) b and the condition  b>U (b), we have
b>U (b). Consequently, there cannot be any vector in U that equals .
4. In our actual implementation, the solution point b is used for backup even when the optimal value of
the objective function is negative. In this case, duplication check is needed.

38

Speeding Up Value Iteration in POMDPS
There are several algorithms for standard DP update. Among them, the incremental
pruning algorithm (Zhang and Liu 1997) has been shown to be the most ecient both
theoretically and empirically (Cassandra et al. 1997). Empirical results (Section 6) reveal
that point-based DP update is much less expensive than incremental pruning on a number
of test problems. It should be noted, however, that we have not proved this is always the
case.

5.4 Stopping Point-Based Value Iteration

Consider the do-while loop of POINT-BASED-VI (Figure 2). Starting from an initial set of
vectors, it generates a sequence of sets. If the initial set is uniformly improvable, then the
value functions represented by the sets are monotonically increasing and are upper bounded
by the optimal value function. As such, they converge to a value function (which is not
necessarily the optimal value function). The question is when to stop the do-while loop.
A straightforward method would be to compute the distance maxb jU (b) ,V (b)j between
two consecutive sets U and V and stop when the distance falls below a threshold. To compute
the distance, one needs to solve jUj+jVj linear programs, which is time consuming. We use
a metric that is less expensive to compute. To be more specic, we stop the do-while loop
when
max
jU (w()) , V (w())j  1 :
2U
In words, we calculate the maximum dierence between U and V at the witness points of
vectors in U and stop the do-while loop when this quantity is no larger than 1 . Here 
is the threshold on the Bellman residual for terminating value iteration and 1 is a number
between 0 and 1. In our experiments, we set it at 0:1.

5.5 Convergence of Modied Value Iteration
Let Vn and Vn0 be sets of vectors respectively generated by VI (Figure 1) and VI1 (Figure

2) at line 3 in iteration n. Suppose the initial set is uniformly improvable. Using Lemma 2
and Corollary 1, one can prove by induction that Vn and Vn0 are uniformly improvable for
all n and their induced value functions increase with n. Moreover, Vn0 dominates Vn and is
dominated by the optimal value function. It is well known that Vn converges to the optimal
value function. Therefore, Vn0 must also converge to the optimal value function.
The question now is how to make sure that the initial set is uniformly improvable. The
following lemma answers this question.

Lemma 3 Let m= mins;a r(s; a), c = m=(1 , ), and c be the vector whose components
are all c. Then the singleton set fc g is uniformly improvable.
Proof: Use V to denote the value function induced by the singleton set. For any belief

state b, we have

TV (b) = max
[r(b; a) + 
a
39

X P (zjb; a)V (ba)]
z

z

Zhang & Zhang
= max
[r(b; a) + 
a

X P (zjb; a)c]
z

= max
[r(b; a) + m=(1 , )]
a
 m + m=(1 , )
= m=(1 , ) = V (b):
Therefore the value function, and hence the singleton set, is uniformly improvable. 2
Experiments (Section 6) have shown that VI1 is more ecient VI on a number of test
problems. It should be noted, however, that we have not proved this is always the case.
Moreover, complexity results by Papadimitriou and Tsitsiklis (1987) implies that the task
of nding -optimal policies for POMDPs is PSPACE-complete. Hence, the worst-case
complexity should remain the same.

5.6 Computing the Bellman Residual

In the modied value iteration algorithm, the input V to standard DP update is always
uniformly improvable. As such, its output U dominates its input. This fact can be used to
simplify the computation of the Bellman residual. As a matter of fact, the Bellman residual
maxb jU (b),V (b)j reduces maxb (U (b),V (b)).
To compute the latter quantity, one goes through the vectors in U one by one. For each
vector, one solves the linear program LP(; V ). The quantity is simply the maximum of
the optimal values of the objective functions of the linear programs. Without uniformly
improvability, we would have to repeat the process one more time with the roles of V and
U exchanged.

6. Empirical Results and Discussions

Experiments have been conducted to empirically determine the eectiveness of point-based
DP update in speeding up value iteration. Eight problems are used in the experiments.
In the literature, the problems are commonly referred to as 4x3CO, Cheese, 4x4, Part
Painting, Tiger, Shuttle, Network, and Aircraft ID. We obtained the problem les from
Tony Cassandra. Information about their sizes is summarized in the following table.
Problem jSj jZj jAj
4x3CO 11
4 11
4x4 16
2
4
Tiger 2
2
3
Network 7
2
4

Problem jSj jZj jAj
Cheese 11
4
7
Painting 4
4
2
Shuttle 8
2
3
Aircraft ID 12
5
6

The eectiveness of point-based DP update is determined by comparing the standard
value iteration algorithm VI and the modied value iteration algorithm VI1. The implementation of standard value iteration used in our experiments is borrowed from Hansen.
Modied value iteration is implemented on top of Hansen's code.5 The discount factor is
set at 0:95 and round-o precision is set at 10,6 . All experiments are conducted on an
UltraSparc II machine.
5. The implementation is available on request.

40

Speeding Up Value Iteration in POMDPS
Table 1 shows the amounts of time VI and VI1 took to compute 0.01-optimal policies
for the test problems. We see that VI1 is consistently more ecient than VI, especially on
the larger problems. It is about 1.3, 2.8, 5, 62, 141, 173, and 49 times faster than VI on the
rst seven problems respectively. For the Aircraft ID problem, VI1 was able to compute a
0.01-optimal policy in less than 8 hours, while VI was only able to produce a 33-optimal
policy after 40 hours.
4x3CO Cheese 4x4 Paint Tiger Shuttle Network Aircraft
VI
3.2
13.9 27.15 37.84 79.14 5,199 12,478
VI1
2.4
5.0 5.30
.61
.56
30
253 27,676
Table 1: Time for Computing 0.01-Optimal Policies in Seconds.
Various other statistics are given in Table 2 to highlight computational properties of
VI1 and to explain its superior performance. The numbers of standard DP updates carried
out by VI and VI1 are shown at rows 1 and 3. We see that VI1 performed no more than 5
standard updates on the test problems, while VI performed more than 125. This indicates
that point-based update is very eective in cutting down the number of standard updates
required to reach convergence. As a consequence, VI1 spent much less time than VI in
standard updates (row 2 and 4).6
Problem
4x3CO Cheese 4x4 Paint Tiger Shuttle Network
DPU #
125
129 130 127 163
174
214
VI
Time
2.00
7.63 17.83 33.39 70.44 3,198
8,738
DPU #
4
4
3
3
3
5
5
Time
.05
.09
.15
.21
.09
13
82
VI1 PBDPU #
377
219 173 244 515
455
670
Time
2.32
4.86 5.09
.37
.45
10
139
Quality Ratio
.33
.58
.74
.51
.31
0.31
.32
Complexity Ratio
.38
.37
.21 .0057 .002 .0012
.005
Table 2: Detailed Statistics.
Row 5 shows the numbers of point-based updates carried out by VI1. We see that those
numbers are actually larger than the numbers of standard updates performed by VI. This
is expected. To see why, recall that point-based update is an approximation of standard
update. Let V be a set of vectors that is uniformly improvable. Use T 0 V to denote the
sets of vectors resulted from performing point-based update on V . For any belief state b,
we have V (b)T 0 V (b)T V (b). This means that point-based update improves V but not as
much as standard update. Consequently, the use of point-based update increases the total
6. Note that times shown there do not include time for testing the stopping condition.

41

Zhang & Zhang
number of iterations, i.e the number of standard updates plus the number of point-based
updates.
Intuitively, the better point-based update is as an approximation of standard update,
the less the dierence between the total number iterations that VI1 and VI need take. So,
the ratio between those two numbers in a problem can be used, to certain extent, as a
measurement of the quality of point-based update in that problem. We shall refer to it as
the quality ratio of point-based update. Row 7 shows the quality ratios in the seven test
problems. We see that the quality of point-based update is fairly good and stable across all
the problems.
Row 8 shows, for each test problem, the ratio between the average time of a standard
update performed by VI and that of a point-based update performed by VI1. Those ratios
measure, to certain extent, the complexity of point-based update relative to standard update
and hence will be referred to as the complexity ratios of point-based update. We see that,
as predicted by the analysis in Section 5.3, point-based update is consistently less expensive
than standard update. The dierences are more than 200 times in the last four problems.
In summary, the statistics suggest that the quality of point-based update relative to
standard update is fairly good and stable and its complexity is much lower. Together with
the fact that point-based update can drastically reduces the number of standard updates,
those explain the superior performance of VI1.
To close this section, let us note that while VI nds policies with quality7 very close to
the predetermined criterion, VI1 usually nds much better ones (Table 3). This is because
VI checks policy quality after each (standard) update, while VI1 does not do this after
point-based updates.

Problem 4x3CO Cheese 4x4 Paint Tiger Shuttle Network
VI
.0095 .0099 .0099 .01
.0098 .0097 .0098
VI1
.0008 .0008 .0009 .0007 .0007 .00015 .001
Table 3: Quality of Policies Found by VI and VI1.

7. Variations of Point-Based DP Update
We have studied several possible variations of point-based update. Most of them are based
on ideas drawn from the existing literature. None of the variations were able to signicantly
enhance the eectiveness of the algorithm in accelerating value iteration. Nonetheless a brief
discussion of some of them is still worthwhile. The discussion provides further insights about
the algorithm and shows how it compares to some of the related work to be discussed in
detail in the next section.
The variations can be divide into two categories: those aimed at improving the quality
of point-based update and those aimed at reducing complexity. We shall discuss them one
by one.
7. Quality of a policy is estimated using the Bellman residual.

42

Speeding Up Value Iteration in POMDPS

7.1 Improving the Quality of Point-Based DP Update
A natural way to improve the quality of point-based update is to back up on additional
belief points. We have explored the use of randomly generated points (Cassandra 1998a),
additional by-product points, and projected points (Hauskrecht 2000). Here additional byproduct points refer to points generated at various stages of standard update, excluding the
witness points that are already being used. Projected points are points that are reachable
in one step from points that have given rise to useful vectors.
Table 4 shows, for each test problem, the number of standard updates and the amount
of time that VI1 took with and without using projected points. We see that the use of
projected points did reduce the number of standard updates by one in 4x3CO, Cheese, and
Shuttle. However, it increased the time complexity in all test problems except for Network.
The other two kinds of points and combinations of the three did not signicantly improve
VI1 either. On the contrary, they often signicantly degraded the performance of VI1.
w/o
with
w/o
with

4x3CO Cheese 4x4 Paint Tiger Shuttle Network Aircraft
4
4
3
3
3
5
5
7
3
3
3
3
3
4
5
7
2.4
5.0 5.3
.61
.56
30
253 27,676
3.2
5.6 7.4
.69
2.3
33
140 35,791

Table 4: Number of Standard DP Updates and Time That VI1 Took With and Without
Using Projected Points.
A close examination of experimental data reveals a plausible explanation. Point-based
update, as it stands, can already reduce the number of standard updates down to a just few
and among them the last two or three are the most time-consuming. As such, the possibility
of further reducing the number standard updates is low and even when it is reduced, the
eect is roughly to shift the most time-consuming standard updates earlier. Consequently,
it is unlikely to achieve substantial gains. On the other hand, the use of additional points
always increases overheads.

7.2 Reducing the Complexity of Point-Based DP Update
Solving linear programs is the most expensive operation in point-based update. An obvious
way to speed up is to avoid linear programs. Point-based update solves linear programs
and backs up on the belief points found so as to guarantee uniform improvability. If the
linear programs are to be skipped, there must be some other way to guarantee uniform
improvability. There is an easy solution to this problem. Suppose V is the set of vectors
that we try to update and it is uniformly improvable. Let U be the set obtained from V by
backing up only on the witness points, which can be done without solving linear programs.
The set U might or might not be uniformly improvable. However, the union V [ U is
guaranteed to be uniformly improvable. Therefore we can reprogram point-based update
43

Zhang & Zhang
to return the union in hope to reduce complexity. The resulting variation will be called
non-LP point-based DP update.
Another way to reduce complexity is to simplify the backup operator (Section 3.1) using
the idea behind modied policy iteration (e.g., Puterman 1990). When backing up from
a set of vectors V at a belief point, the operator considers all possible actions and picks
the one that is optimal according to the V -improving policy. To speed up, one can simply
use the action found for the belief point by the previous standard update. The resulting
operator will be called the MPI backup operator, where MPI stands for modied policy
iteration. If V is the output of the previous standard update, the two actions often are the
same. However, they are usually dierent if V is the result of several point-based updates
following the standard update.
Table 5 shows, for each test problem, the number of standard updates and the amount of
time that VI1 took when non-LP point-based update was used (together with the standard
backup operator). Comparing the statistics with those for point-based update (Tables 1
and 2), we see that the number of standard updates is increased on all test problems and the
amount of time is also increased except for the rst three problems. Here are the plausible
reasons. First, it is clear that non-LP point-based update does not improve a set of vectors
as much as point-based update. Consequently, it is less eective in reducing the number of
standard updates. Second, although it does not solve linear programs, non-LP point-based
update produces extraneous vectors. This means that it might need to deal with a large
number of vectors at later iterations and hence might not be as ecient as point-based
update after all.
4x3CO Cheese 4x4 Paint Tiger Shuttle Network Aircraft
4
5
8
4
4
7
10
8
2.38
2.38 3.4
.75
.88
44
599 32,281
Table 5: Number of Standard DP Updates and Time That VI1 Took When Non-LP PointBased Update is Used.
Extraneous vectors can be pruned. As a matter of fact, we did prune vectors that are
pointwise-dominated by others (hence extraneous) in our experiments. This is inexpensive.
Pruning of other extraneous vectors, however, requires the solution of linear programs and
is expensive. In Zhang et al. (1999), we have discussed how this can be done the most
ecient way. Still the results were not as good as those in Table 5. In that paper, we
have also explored the combination of non-LP point-based update with the MPI backup
operator. Once again, the results were not as good as those in Table 5. The reason is that
the MPI backup operator further compromises the quality of point-based update.
The quality of non-LP point-based update can be improved by using the Gauss-Seidel
asynchronous update (Denardo 1982). Suppose we are updating a set V . The idea is to,
after a vector is created by backup, add a copy of the vector to the set V right away. The
hope is to increase the components of later vectors. We have tested this idea when preparing
Zhang et al. (1999) and found that the costs almost always exceed the benets. A reason
44

Speeding Up Value Iteration in POMDPS
is that asynchronous update introduces many more extraneous vectors than synchronous
update.
In conclusion, point-based is conceptually simple and clean. When compared to its more
complex variations, it seems to be the most eective in accelerating value iteration.

8. Related Work
Work presented in this paper has three levels: point-based DP update at the bottom, pointbased value iteration in the middle, and modied value iteration at the top. In this section,
we discuss previous relevant work at each of the three levels.

8.1 Point-Based DP Update and Standard DP Update

As mentioned in Section 3.1, point-based update is closely related to several exact algorithms for standard update, namely one-pass (Sondik 1971), linear-support (Cheng 1988),
and relaxed-region (Cheng 1988). They all backup on a nite number of belief points.
The dierence is that these exact algorithms generate the points systematically, which is
expensive, while point-based update generate the points heuristically.
There are several other exact algorithms for standard DP update. The enumeration/reduction algorithms (Monahan 1982, Eagle 1984) and incremental pruning (Zhang
and Liu 1997, Cassandra et al. 1997) rst generate a set of vectors that are not parsimonious and then prune extraneous vectors by solving linear programs. Point-based DP
update never generates extraneous vectors. It might generate duplicate vectors. However,
duplicates are pruned without solving linear programs. The witness algorithm (Kaelbling
et al. 1998) has two stages. In the rst stage, it considers actions one by one. For each
action, it constructs a set of vectors based on a nite number of systematically generated
belief points using an operator similar to the backup operator. In the second stage, vectors
for dierent actions are pooled together and extraneous vectors are pruned.
There are proposals to carry out standard update approximately by dropping vectors
that are marginally useful (e.g., Kaelbling et al. 1998, Hansen 1998). Here is one idea
along this line that we have empirically evaluated. Recall that to achieve -optimality, the
stopping threshold for the Bellman residual should be  = (1 , )=2. Our idea is to drop
marginally useful vectors at various stages of standard update while keeping the overall
error under =2 and to stop when the Bellman residual falls below =2. It is easy to see
that -optimality is still guaranteed this way. We have also tried to start with a large error
tolerance in hope to prune more vectors and gradually decrease the tolerance level to =2.
Reasonable improvements have been observed especially when one does not need quality
of policy to be high. However such approximate updates are much more expensive than
point-based updates. In the context of the modied value iteration algorithm, they are
more suitable alternatives to standard updates than point-based update.

8.2 Point-Based Value Iteration and Value Function Approximation

Point-based value iteration starts with a set of vectors and generates a sequence of vector
sets by repeatedly applying point-based update. The last set can be used to approximate
the optimal value function.
45

Zhang & Zhang
Various methods for approximating the optimal value function have been developed
previously.8 We will compare them against point-based value iteration along two dimensions: (1) Whether they map one set of vectors to another, that is whether the can be
interleaved with standard updates, and (2) if they do, whether they can guarantee convergence when interleaved with standard updates.
Lovejoy (1993) proposes to approximate the optimal value function V  of a POMDP
using the optimal value function of the underlying Markov decision process (MDP). The
latter is a function over the state space. So V  is being approximated by one vector.
Littman et al. (1995b) extend this idea and approximate V  using jAj vectors, each of
which corresponds to a Q-function of the underlying MDP. A further extension is recently
introduced by Zubek and Dietterich (2000). Their idea is to base the approximation not on
the underlying MDP, rather on a so-called even-odd POMDP that is identical to the original
POMDP except that the state is fully observable at even time steps. Platzman (1980)
suggests approximating V  using the value functions of one or more xed suboptimal policies
that are constructed heuristically. Those methods do not start with a set of vectors and
hence do not map a set of vectors to another. However, they can easily be adapted to do so.
However, they all put a predetermined limit on the number of output vectors. Consequently,
convergence is not guaranteed when they are interleaved with standard updates.
Fast informed bound (Hauskrecht 1997a), Q-function curve tting (Littman et al. 1995b),
and softmax curve tting (Parr and Russell 1995) do map a set of vectors to another. However, they dier drastically from point-based value iteration and from each other in their
ways of deriving the next set of vectors from the current one. Regardless of the size of the
current set, fast informed bound and Q-function curve tting always produces jAj vectors,
one for each action. In softmax curve tting, the number of vectors is also determined a
priori, although it is not necessarily related to the number of actions. Those methods can be
interleaved with standard DP updates. Unlike point-based value iteration, they themselves
may not converge (Hauskrecht 2000). Even in cases where they do converge themselves,
the algorithms resulting from interleaving them with standard updates do not necessarily
converge due to the a priori limits on the number of vectors.
Grid-based interpolation/extrapolation methods (Lovejoy 1991, Brafman 1997, Hauskrecht
1997b) approximate value functions by discretizing the belief space using a xed or variable
grid and by maintaining values only for the grid points. Values at non-grid points are estimated by interpolation/extrapolation when needed. Such methods cannot be interleaved
with standard DP updates because they do not work with sets of vectors.
There are grid-based methods that work with sets of vectors. Lovejoy's method to lower
bound the optimal value function (Lovejoy 1991), for instance, falls into this category. This
method is actually identical to point-based value iteration except for the way it derives the
next set of vectors from the current one. Instead of using point-based update, it backs up on
grid points in a regular grid. Convergence of this method is not guaranteed. The algorithm
resulting from interleaving it with standard updates may not converge either.
8. Hauskrecht (2000) has conducted an extensive survey on previous value function approximation methods
and has empirically compared them in terms of, among other criteria, complexity and quality. It would
be interesting to also include point-based value iteration in the empirical comparison. This is not done
in the present paper because our focus is on using point-based value iteration to speed value iteration,
rather than using as a value function approximation method.

46

Speeding Up Value Iteration in POMDPS
The incremental linear-function method (Hauskrecht 2000) roughly corresponds to a
variation of point-based value iteration that uses non-LP point-based update (Section 7.2)
augmented with the Gauss-Seidel asynchronous update. The method does not have access to
witness point. So it starts, for the purpose of backup, with extreme points of the belief space
and supplement them with projected points. This choice of points appears poor because it
leads to a large number of vectors and consequently the backup process is \usually stopped
well before" convergence (Hauskrecht 2000).

8.3 Previous Work Related to Modied Value Iteration
The basic idea of our modied value iteration algorithm VI1 is to add, in between two
consecutive standard updates, operations that are inexpensive. The hope is that those
operations can signicantly improve the quality of a vector set and hence reduce the number
of standard updates.
Several previous algorithms work in the same fashion. The dierences lie in the operations that are inserted between standard updates. The reward revision algorithm (White
et al. 1989) constructs, at each iteration, a second POMDP based on the current set of
vectors. It runs value iteration on the second POMDP for a predetermined number of steps.
The output is used to modify the current set of vectors and the resulting set of vectors is
fed to the next standard update.
Why is reward revision expected to speed up value iteration? Let V be the value function
represented by the current set of vectors. The second POMDP is constructed in such way
that it shares the same optimal value function as the original POMDP if V is optimal.
As such, one would expect the two POMDPs to have similar optimal value functions if V
is close to optimal. Consequently, running value iteration on the second POMDP should
improve the current value function. And it is inexpensive to do so because the second
POMDP is fully observable.
Reward revision is conceptually much more complex than VI1 and seems to be less
ecient. According to White et al. (1989), reward revision can, on average, reduce the
number of standard updates by 80% and computational time by 85%. From Tables 1 and
2, we see that the dierences between VI1 and VI are much larger.
The iterative discretization procedure (IDP) proposed by Cheng (1988) is very similar to
VI1. There are two main dierences. While VI1 uses point-based update, IDP uses non-LP
point-based update. While point-based update in VI1 backs up on witness points and belief
points found by linear programs, non-LP point-based update in IDP backs up on extreme
points of witness regions found as by-products by Cheng's linear-support or relaxed region
algorithms.
Cheng has conducted extensive experiments to determine the eectiveness of IDP in
accelerating value iteration. It was found that IDP can cut the number of standard updates
by as much as 55% and the amount of time by as much as 80%. Those are much less
signicant than the reductions presented in Tables 1 and 2.
Hansen's policy iteration (PI) algorithm maintains a policy in the form of a nite-state
controller. Each node in the controller represents a vector. At each iteration, a standard
update is performed on the set of vectors represented in the current policy. The resulting
47

Zhang & Zhang
set of vectors is used to improve the current policy9 and the improved policy is evaluated
by solving a system of linear equations. This gives rise to a third set of vectors, which is
fed to the next standard update.
We compared the performance of Hansen's PI algorithm to VI1. Table 6 shows, for each
test problem, the number of standard updates and the amount of time the algorithm took.
Comparing with the statistics for VI1 (Table 4), we see that PI performed more standard
updates than VI1. This indicates that policy improvement/evaluation is less eective than
point-based value iteration in cutting down the number of standard updates. In terms of
time, PI is more ecient than VI1 on the rst three problems but signicantly less ecient
on all other problems.
4x3CO Cheese 4x4 Paint Tiger Shuttle Network Aircraft
3
7
7
10
14
9
18
9
.14
.87 3.4
3.8
4.5
60
1,109 66,964
Table 6: Number of Standard Updates and Time That PI Took to Compute 0.01-Optimal
Policies.
It might be possible to combine VI1 and PI. To be more specic, one can probably
insert a policy improvement/evaluation step between two point-based updates in pointbased value iteration (Figure 2). This should accelerate point-based value iteration and
hence VI1. This possibility and its benets are yet to be investigated.

9. Conclusions and Future Directions
Value iteration is a popular algorithm for nding -optimal policies for POMDPs. It typically performs a large number of DP updates before convergence and DP updates are
notoriously expensive. In this paper, we have developed a technique called point-based DP
update for reducing the number of standard DP updates. The technique is conceptually
simple and clean. It can easily be incorporated into most existing POMDP value iteration algorithms. Empirical studies have shown that point-based DP update can drastically
cut down the number of standard DP updates and hence signicantly speeding up value
iteration. Moreover, point-based DP update compares favorably with its more complex
variations that we can think also. It also compares favorably with policy iteration.
The algorithm presented this paper still requires standard DP updates. This limits its
capability of solving large POMDPs. One future direction is to investigate the properties
of point-based value iteration as an approximation algorithm by itself. Another direction is
to design ecient algorithms for standard DP updates in special models. We are currently
exploring the latter direction.
9. In Hansen's writings, policy improvement includes DP update as a substep. Here DP update is not
considered part of policy improvement.

48

Speeding Up Value Iteration in POMDPS

Acknowledgments
Research is supported by Hong Kong Research Grants Council Grant HKUST6125/98E.
The authors thank Tony Cassandra and Eric Hansen for sharing with us their programs.
We are also grateful for the three anonymous reviewers who provided insightful comments
and suggestions on an earlier version of this paper.

References

Astrom, K. J. (1965). Optimal control of Markov decision processes with the incomplete
state estimation. Journal of Computer and System Sciences, 10, 174-205.
Brafman, R. I. (1997). A heuristic variable grid solution for POMDPs. In Proceedings of
the Fourteenth National Conference on Articial Intelligence(AAAI-97), 727-733.
Cassandra, A. R., Littman, M. L., and Zhang, N. L. (1997). Incremental pruning: A
simple, fast, exact method for partially observable Markov decision processes. In
Proceedings of Thirteenth Conference on Uncertainty in Articial Intelligence, 54-61.
Cassandra, A. R. (1998a). Exact and approximate algorithms for partially observable
Markov decision processes, PhD thesis, Department of Computer Science, Brown
University.
Cassandra, A. R. (1998b). A survey of POMDP applications, in Working Notes of AAAI
1998 Fall Symposium on Planning with Partially Observable Markov Decision Processes, 17-24.
Denardo, E. V. (1982). Dynamic Programming: Models and Applications Prentice-Hall.
Eagle, J. N.(1984). The optimal search for a moving target when the search path is
constrained. Operations Research, 32(5), 1107-1115.
Cheng, H. T.(1988). Algorithms for partially observable Markov decision processes. Ph D
thesis, University of British Columbia.
Hansen, E. A. (1998). Solving POMDPs by searching in policy space. In Proceedings of
Fourteenth Conference on Uncertainty in Articial Intelligence, 211-219.
Hauskrecht, M.(1997a). Incremental methods for computing bounds in partially observable
Markov decision processes. in Proceedings of the Fourteenth National Conference on
Articial Intelligence (AAAI-97), 734-749.
Hauskrecht, M.(1997b). Planning and control in stochastic domains with imperfect information. PhD thesis, Department of Electrical Engineering and Computer Science,
Massachusetts Institute of Technology.
Hauskrecht, M. (2000). Value function approximations for partially observable Markov
decision processes, Journal of Articial Intelligence Research, 13, 33-95.
49

Zhang & Zhang
Littman, M. L., Cassandra, A. R. and Kaelbling, L. P. (1995a). Ecient dynamicprogramming updates in partially observable Markov decision processes. Technical
Report CS-95-19, Brown University.
Littman, M. L., Cassandra, A. R. and Kaelbling, L. P. (1995b). Learning policies for partially observable environments, scaling up. In Proceedings of the Fifteenth Conference
on Machine Learning, 362-370.
Littman, M. L. (1996). Algorithms for sequential decision making. Ph D thesis, Department of Computer Science, Brown University.
Kaelbling, L. P., Littman. M. L. and Cassandra, A. R.(1998). Planning and acting in
partially observable stochastic domains, Articial Intelligence, Vol 101.
Lovejoy, W. S. (1991). Computationally feasible bounds for partially observed Markov
decision processes. Operations Research, 39, 192-175.
Lovejoy, W. S. (1993). Suboptimal policies with bounds for parameter adaptive decision
processes. Operations Research, 41, 583-599.
Monahan, G. E. (1982). A survey of partially observable Markov decision processes: theory, models, and algorithms. Management Science, 28 (1), 1-16.
Parr, R., and Russell, S. (1995). Approximating optimal policies for partially observable
stochastic domains. In Proceedings of the Fourteenth International Joint Conference
on Articial Intelligence 1088-1094.
Papadimitriou, C. H., Tsitsiklis, J. N.(1987). The complexity of Markov decision processes.
Mathematics of Operations Research, 12(3), 441-450.
Platzman, L. K.(1980). Optimal innite-horizon undiscounted control of nite probabilistic systems. SIAM Journal of Control and Optimization, 18, 362-380.
Puterman, M. L. (1990), Markov decision processes, in D. P. Heyman and M. J. Sobel
(eds.), Handbooks in OR & MS., Vol. 2, 331-434, Elsevier Science Publishers.
Smallwood, R. D. and Sondik, E. J. (1973). The optimal control of partially observable
processes over a nite horizon. Operations Research, 21, 1071-1088.
Sondik, E. J. (1971). The optimal control of partially observable Markov processes. PhD
thesis, Stanford University.
Sondik, E. J. (1978). The optimal control of partially observable Markov processes over
the innite horizon, Operations Research, 21, 1071-1088.
White, C. C. III and Scherer, W. T. (1989). Solution procedures for partially observed
Markov decision processes, Operations Research, 37(5), 791-797.
Zhang, N. L., Lee, S. S., and Zhang, W.(1999). A method for speeding up value iteration
in partially observable Markov decision processes, in Proc. of the 15th Conference on
Uncertainties in Articial Intelligence.
50

Speeding Up Value Iteration in POMDPS
Zhang, N. L. and W. Liu (1997). A model approximation scheme for planning in stochastic
domains, Journal of Articial Intelligence Research, 7, 199-230.
Zubek, V. B. and Dietterich, T. G.(2000). A POMDP approximation algorithm that anticipates the need to observe. To appear in Proceedings of the Pacic Rim Conference
on Articial Intelligence (PRICAI-2000), Lecture Notes in Computer Science, New
York: Springer-Verlag.

51

