Journal of Artificial Intelligence Research 12 (2000) 199-217

Submitted 12/1999; published 5/2000

The Complexity of Reasoning with Cardinality Restrictions
and Nominals in Expressive Description Logics
Stephan Tobies

tobies@informatik.rwth-aachen.de

LuFG Theoretical Computer Science, RWTH Aachen
Ahornstr. 55, 52074 Aachen, Germany

Abstract

We study the complexity of the combination of the Description Logics ALCQ and ALCQI
with a terminological formalism based on cardinality restrictions on concepts. These combinations can naturally be embedded into C 2 , the two variable fragment of predicate logic
with counting quantifiers, which yields decidability in NExpTime. We show that this approach leads to an optimal solution for ALCQI , as ALCQI with cardinality restrictions has
the same complexity as C 2 (NExpTime-complete). In contrast, we show that for ALCQ,
the problem can be solved in ExpTime. This result is obtained by a reduction of reasoning with cardinality restrictions to reasoning with the (in general weaker) terminological
formalism of general axioms for ALCQ extended with nominals . Using the same reduction,
we show that, for the extension of ALCQI with nominals, reasoning with general axioms
is a NExpTime-complete problem. Finally, we sharpen this result and show that pure
concept satisfiability for ALCQI with nominals is NExpTime-complete. Without nominals,
this problem is known to be PSpace-complete.
1. Introduction

Description Logics (DLs) can be used in knowledge based systems to represent and reason about taxonomical knowledge of the application domain in a semantically well-defined
manner (Woods & Schmolze, 1992). They allow the definition of complex concepts (i.e.,
classes, unary predicates) and roles (binary predicates) to be built from atomic ones by
the application of a given set of constructors. For example, the following concept describes
those parents having at least two daughters:
Human u (Male t Female) u (> 2 hasChild Female) u 8hasChild:Human
This concept is an example for the DL ALCQ. ALCQ extends the \standard" DL ALC
(Schmidt-Schau & Smolka, 1991) by qualifying number restrictions, i.e., concepts restricting the number of individuals that are related via a given role (here hasChild), instead of
allowing only for existential or universal restrictions like ALC. ALCQ is a syntactic variant of
the (multi-)modal logic K with graded modalities (Fine, 1972). In this paper we will study
problems for the DLs ALCQ and ALCQI . The latter extends ALCQ with the possibility to
refer to the inverse of role relations. Additionally, in this paper we will encounter nominals,
i.e., concepts referring to single elements of the domain. The extensions of ALCQ and ALCQI
with nominals are denoted by ALCQO and ALCQIO. An example concept of ALCQIO that
describes the common children of the individuals ALICE and BOB living with ALICE or BOB
is
9hasChild 1 :ALICE u 9hasChild 1:BOB u 9livesWith:(ALICE t BOB):
c 2000 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.

fiTobies

Concept Satisfiability
GCIs
Cardinality Restr.

ALCQ

-c.
-c.
ExpTime-c.
PSpace

ExpTime

ALCQO

open

-c.
ExpTime-c.
ExpTime

ALCQI

-c.
-c.
NExpTime-c.
PSpace

ExpTime

ALCQIO

NExpTime-c.
NExpTime-c.
NExpTime-c.

Figure 1: Complexity results established in this paper (shown in bold face)
Here, the parent relationship is expressed as the inverse of the hasChild relationship.
A terminological component (TBox) allows for the organisation of defined concepts and
roles and forms the knowledge base of a DL system. TBoxes studied in DLs range from weak
ones allowing only for the acyclic introduction of abbreviations for complex concepts, over
TBoxes capable of expressing various forms of general axioms, to cardinality restrictions
that can express restrictions on the number of elements the extension of a concept may
have. In the following, we give examples of these three types of assertions.
The following TBox introduces parent as an abbreviation for a human having at least
one child and whose children are all human, toddler for very young human, and busy parent
for a parent having at least two children that are toddlers.
Parent = Human u (> 1 hasChild) u 8hasChild:Human
Toddler = Human u VeryYoung
BusyParent = Parent u (> 2 hasChild Toddler)
The next expressions are general axioms stating that males and females are disjoint (?
denotes the empty concept) and that males or females coincide with those humans having
exactly two human parents.
Female u Male = ?
Female t Male = Human u (= 2 hasChild 1 Human)
Finally, the following expression is a cardinality restriction expressing that there are at most
two earliest ancestors:
( 2 (Human u (6 0 hasChild 1 Human)))
Cardinality restriction were first introduced by Baader et al. (1996) as a terminological
formalism for the DL ALCQ; as we will see, they can express general axioms and hence are
the most expressive of the terminological formalisms considered in this paper.
A key component of a DL system is a reasoning component that provides services like
subsumption or consistency tests for the knowledge stored in the TBox. A subsumption
test, for example, could infer from the previous definitions that both Male and Female are
subsumed by Human and that BusyParent is subsumed by Parent as each busy parent must
have at least one child. There exist sound and complete algorithms for reasoning in a large
number of DLs and different TBox formalisms that are optimal with respect to the known
worst-case complexity of these problems (see Donini et al., 1996, for an overview).
200

fiThe Complexity of Cardinality Restrictions and Nominals

In this paper we establish a number of new complexity results for DLs with cardinality
restrictions or nominals. Figure 1 summarises the new complexity bounds established in
this paper. All problems are complete for their respective complexity class. This paper is
organised as follows.
After giving some basic definitions in Section 2, we show that consistency of TBoxes
with cardinality restrictions for ALCQI is a NExpTime-complete problem (Section 3). Membership in NExpTime is shown by a translation to the satisfiability problem of C 2 (Pacholski et al., 1997)1 , the two variable fragment of first order predicate logic augmented
with counting quantifiers. The matching lower bound is established by a reduction from a
NExpTime-complete bounded domino problem.
In Section 4, we show that reasoning with cardinality restrictions can be reduced to
reasoning with the (weaker) formalism of general axioms in the presence of nominals. This
yields interesting complexity results both for reasoning with cardinality restrictions and
with nominals. Using a result from (De Giacomo, 1995), the reduction shows that consistency of TBoxes with cardinality restrictions for ALCQ is in ExpTime. This improves the
result from (Baader et al., 1996), where it was shown that the problem can be solved in
NExpTime. Moreover, we show that for a DL with number restrictions, inverse roles, and
nominals reasoning problems become NExpTime-hard, which solves an open problem from
(De Giacomo, 1995). This combination is of particular interest for the application of DLs
in the area of reasoning with database schemata (Calvanese et al., 1998a, 1998b).
2. The Logic

ALCQI

Definition 2.1 Let NC be a set of atomic concept names and NR be a set of atomic role
names. Concepts in ALCQI are built inductively from these using the following rules: all
A 2 NC are concepts, and, if C , C1 , and C2 are concepts, then also

:C; C1 u C2;

and

(> n S C );

are concepts, where n 2 N and S = R or S = R 1 for some R 2 NR .
A cardinality restriction of ALCQI is an expression of the form (> n C ) or (6 n C )
where C is a concept and n 2 N ; an ALCQI -TCBox 2 is a finite set of cardinality restrictions.
The semantics of concepts is defined relative to an interpretation I = (I ; I ), which
consists of a domain I and a valuation (I ) that maps each concept name A to a subset
AI of I and each role name R to a subset RI of I  I . This valuation is inductively
extended to arbitrary concepts using the following rules, where ]M denotes the cardinality
of a set M :
(:C )I := I n C I ;
(C1 u C2 )I := C1I \ C2I ;
(> n R C )I := fa 2 I j ]fb 2 I j (a; b) 2 RI ^ b 2 C I g  ng;
(> n R 1 C )I := fa 2 I j ]fb 2 I j (b; a) 2 RI ^ b 2 C I g  ng:
1. The NExpTime-result is valid only if we assume unary coding of numbers in the counting quantifiers.
This is the standard assumption made by most results concerning the complexity of DLs.
2. The subscripted \C" indicates that the TBox consists of cardinality restrictions

201

fiTobies

	x(A)
:= Ax
for A 2 NC
	x(:C )
:= :	x(C )
	x(C1 u C2) := 	x(C1 ) ^ 	x(C2 )
	x(> n R C ) := 9ny:(Rxy ^ 	y (C ))
	x(> n R 1 C ) := 9ny:(Ryx ^ 	y (C ))
	y (C )
:= 	x(C )[xny; ynx]
	(./ n C )
:= 9./nx:	x(C ) for ./ 2 f>; 6g
	(T )
:= Vf	(./ n C ) j (./ n C ) 2 T g
Figure 2: The translation from ALCQI into C 2
An interpretation I satisfies a cardinality restriction (> n C ) iff ](C I )  n, and it satisfies (6 n C ) iff ](C I )  n. It satisfies a TCBox T iff it satisfies all cardinality restrictions
in T ; in this case, I is called a model of T and we will denote this fact by I j= T . A TCBox
that has a model is called consistent.
With ALCQ we denote the fragment of ALCQI that does not contain any inverse roles
R 1.

Using the constructors from Definition 2.1, we use (8 C ) as an abbreviation for the
cardinality restriction (6 0 :C ) and introduce the following abbreviations for concepts:
C1 t C2 = :(:C1 u :C2 )
(6 n S C ) = :(> (n + 1) S C )
C1 ! C2 = :C1 t C2
(= n S C ) = (6 n S C ) u (> n S C )
9S:C = (> 1 S C )
> = A t :A for some A 2 NC
8S:C = (6 0 S :C )
TBoxes consisting of cardinality restrictions have first been studied in (Baader et al.,
1996) for the DL ALCQ. Obviously, two concepts C; D have the same extension in an interpretation I iff I satisfies the cardinality restriction (6 0 (C u :D) t (:C u D)). Hence,
cardinality restrictions can express terminological axioms of the form C = D, which are
satisfied by an interpretation I iff C I = DI . General axioms are the most expressive TBox
formalisms usually studied in the DL context (De Giacomo & Lenzerini, 1996). One standard inference service for DL systems is satisfiability of a concept C with respect to a TCBox
T , i.e., is there an interpretation I such that I j= T and C I 6= ;. For a TBox formalism
based on cardinality restrictions this is easily reduced to TBox consistency, because obviously C is satisfiable with respect to T iff T [ f(> 1 C )g is a consistent TCBox. For this
the reason, we will restrict our attention to TCBox consistency; other standard inferences
such as concept subsumption can be reduced to consistency as well.
Until now there does not exist a direct decision procedure for ALCQI TCBox consistency.
Nevertheless this problem can be decided with the help of a well-known translation of
ALCQI -TCBoxes to C 2 (Borgida, 1996), given in Figure 2. The logic C 2 is the fragment of
predicate logic in which formulae may contain at most two variables, but which is enriched
with counting quantifiers of the form 9`. The translation 	 yields a satisfiable sentence of
C 2 if and only if the translated TCBox is consistent. Since the translation from ALCQI to C 2
202

fiThe Complexity of Cardinality Restrictions and Nominals

can be performed in linear time, the NExpTime upper bound (Gradel et al., 1997; Pacholski
et al., 1997) for satisfiability of C 2 directly carries over to ALCQI -TCBox consistency:
Lemma 2.2 Consistency of an ALCQI -TCBox T can be decided in NExpTime.
Please note that the NExpTime-completeness result from (Pacholski et al., 1997) is only
valid if we assume unary coding of numbers in the input; this implies that a number n may
not be stored in logarithmic space in some k-ary representation but consumes n units of
storage. This is the standard assumption made by most results concerning the complexity
of DLs. We will come back to this issue in Section 3.3.
3. Consistency of

ALCQI -TCBoxes is NExpTime-complete

To show that NExpTime is also the lower bound for the complexity of TCBox consistency,
we use a bounded version of the domino problem. Domino problems (Wang, 1963; Berger,
1966) have successfully been employed to establish undecidability and complexity results
for various description and modal logics (Spaan, 1993; Baader & Sattler, 1999).
3.1 Domino Systems
Definition 3.1 For n 2 N , let Zn denote the set f0; : : : ; n 1g and n denote the addition
modulo n. A domino system is a triple D = (D; H; V ), where D is a finite set (of tiles)
and H; V  D  D are relations expressing horizontal and vertical compatibility constraints
between the tiles. For s; t 2 N , let U (s; t) be the torus Zs  Zt, and let w = w0 : : : wn 1 be
a word over D of length n (with n  s). We say that D tiles U (s; t) with initial condition
w iff there exists a mapping  : U (s; t) ! D such that, for all (x; y ) 2 U (s; t),

 if  (x; y) = d and  (x s 1; y) = d0, then (d; d0 ) 2 H (horizontal constraint);
 if  (x; y) = d and  (x; y t 1) = d0 , then (d; d0 ) 2 V (vertical constraint);
  (i; 0) = wi for 0  i < n (initial condition).

Bounded domino systems are capable of expressing the computational behaviour of
restricted, so-called simple, Turing Machines (TM). This restriction is non-essential in the
following sense: Every language accepted in time T (n) and space S (n) by some one-tape TM
is accepted within the same time and space bounds by a simple TM, as long as S (n); T (n) 
2n (Borger et al., 1997).
Theorem 3.2 ((Borger et al., 1997), Theorem 6.1.2)

Let M be a simple TM with input alphabet . Then there exists a domino system D =
(D; H; V ) and a linear time reduction which takes any input x 2  to a word w 2 D with
jxj = jwj such that
 If M accepts x in time t0 with space s0, then D tiles U (s; t) with initial condition w
for all s  s0 + 2; t  t0 + 2;
 if M does not accept x, then D does not tile U (s; t) with initial condition w for any
s; t  2.
203

fiTobies

Corollary 3.3

There is a domino system D such that the following is a NExpTime-hard problem:
Given an initial condition w = w0 : : : wn 1 of length n. Does D tile the torus
U (2n+1 ; 2n+1 ) with initial condition w?
Proof. Let M be a (w.l.o.g. simple) non-deterministic TM with time- (and hence space-)
bound 2n deciding an arbitrary NExpTime-complete language L(M ) over the alphabet .
Let D be the according domino system and trans the reduction from Theorem 3.2.
The function trans is a linear reduction from L(M ) to the problem above: For v 2 
with jvj = n, it holds that v 2 L(M ) iff M accepts v in time and space 2jvj iff D tiles
U (2n+1 ; 2n+1 ) with initial condition trans(v ).
3.2 Defining a Torus of Exponential Size

Similar to proving undecidability by reduction of unbounded domino problems, where defining infinite grids is the key problem, defining a torus of exponential size is the key to
obtaining a NExpTime-completeness proof by reduction of bounded domino problems.
To be able to apply Corollary 3.3 to TCBox consistency for ALCQI , we must characterise
the torus Z2  Z2 with a TCBox of polynomial size. To characterise this torus, we use
2n concepts X0 ; : : : ; Xn 1 and Y0 ; : : : ; Yn 1 , where Xi (resp., Yi) codes the ith bit of the
binary representation of the X-coordinate (resp., Y-coordinate) of an element a.
For an interpretation I and an element a 2 I , we define pos(a) by
n

n

pos(a) := (xpos(a); ypos(a)) :=
(

nX1

xi

1

n
X

2 ;
i

=0 (

i

=0

yi

i

2

i



;

where

a 62 XiI
0; if a 62 YiI
= 01;; ifotherwise
yi =
1; otherwise :
We use a well-known characterisation of binary addition (e.g. (Borger et al., 1997)) to
relate the positions of the elements in the torus:
Lemma 3.4 Let x; x0 be natural numbers with binary representations
xi

x

=

Then
x0  x + 1

1

n
X

=0

i

1

xi

 2i and
1

n^ k^

(mod 2 ) iff
n

k

^

(

=0 j =0
1 1

n^ k_
k

(

=0 j =0

x0

=

1

n
X

=0

i

x0i

 2i :

xj

= 1) ! (xk = 1 $ x0k = 0)

xj

= 0) ! (xk = x0k ) ;

where the empty conjunction and disjunction are interpreted as true and false, respectively.
204

fiThe Complexity of Cardinality Restrictions and Nominals

Deast

=

Xk

u

n

n

(

=0 j =0
1 kG1

k
n

Xj

1

=0
1

k

=0
k=0
1k 1

k
n

(8 9north:>);
(8 (= 1 north 1 >));
(> 1 C(2 1;2 1) );	
(8 Deast u Dnorth )
n

n

:Xk u

G G

=

n

n

=0
1

k
n

G

1;2 1)

1

G

C(2n

=

n

G

C(0;0)

=  (8 9east:>);
(8 (= 1 east 1 >));
(> 1 C(0;0) );
(6 1 C(2 1;2 1) );
G

Tn

n

:Yk

Yk

) ! ((Xk ! 8east::Xk ) u (:Xk ! 8east:Xk )) u

( :Xj ) ! ((Xk ! 8east:Xk ) u (:Xk ! 8east::Xk )) u

=0 j =0
1

G

k
n

=

=0

G

Dnorth

k

((Yk ! 8east:Yk ) u (:Yk ! 8east::Yk ))

:::

Figure 3: A TCBox defining a torus of exponential size
The TCBox Tn is defined in Figure 3. The concept C(0;0) is satisfied by all elements
a of the domain for which pos(a) = (0; 0) holds. C(2 1;2 1) is a similar concept, whose
instances a satisfy pos(a) = (2n 1; 2n 1).
The concept Dnorth is similar to Deast where the role north has been substituted for east
and variables Xi and Yi have been swapped. The concept Deast (resp. Dnorth ) enforces that,
along the role east (resp. north), the value of xpos (resp. ypos) increases by one while the
value of ypos (resp. xpos) is unchanged. They are analogous to the formula in Lemma 3.4.
The following lemma is a consequence of the definition of pos and Lemma 3.4.
Lemma 3.5 Let I = (I ; I ) be an interpretation, Deast ; Dnorth defined as in Figure 3,
and a; b 2 I .
n

I implies:
(a; b) 2 eastI and a 2 Deast
I implies:
(a; b) 2 northI and a 2 Dnorth

n

xpos(b)  xpos(a) + 1
ypos(b) = ypos(a)
xpos(b) = xpos(a)
ypos(b)  ypos(a) + 1

(mod 2n)

(mod 2n)
The TCBox Tn defines a torus of exponential size in the following sense:
Lemma 3.6 Let Tn be the TCBox as defined in Figure 3. Let I = (I ; I ) be a model of
Tn . Then
(I ; eastI ; northI ) = (U (2n ; 2n ); S1 ; S2 ) ;
205

fiTobies

where U (2n; 2n ) is the torus Z2  Z2 and S1; S2 are the horizontal and vertical successor
relations on this torus.
Proof. We show that the function pos is an isomorphism from I to U (2n ; 2n ). Injectivity
of pos is shown by induction on the \Manhattan distance" d(a) of the pos-value of an element
a to the pos-value of the upper right corner.
For an element a 2 I we define d(a) by
d(a) = (2n 1 xpos(a)) + (2n 1 ypos(a)):
Note that pos(a) = pos(b) implies d(a) = d(b). Since I j= (6 1 C(2 1;2 1) ), there is
at most one element a 2 I such that d(a) = 0. Hence, there is exactly one element a
such that pos(a) = (2n 1; 2n 1). Now assume there are elements a; b 2 I such that
pos(a) = pos(b) and d(a) = d(b) > 0. Then either xpos(a) < 2n 1 or ypos(a) < 2n 1.
W.l.o.g., we assume xpos(a) < 2n 1. From I j= Tn, it follows that a; b 2 (9east:>)I . Let
a1 ; b1 be elements such that (a; a1 ) 2 eastI and (b; b1 ) 2 eastI . Since d(a1 ) = d(b1 ) < d(a)
and pos(a1 ) = pos(b1), the induction hypothesis yields a1 = b1 . From Lemma 3.5 it follows
that
xpos(a1 )  xpos(b1 )  xpos(a) + 1 (mod 2n )
ypos(a1 ) = ypos(b1 ) = ypos(a)
This also implies a = b because a1 2 (= 1 east 1:>)I and f(a; a1 ); (b; a1 )g  eastI . Hence
pos is injective.
To prove that pos is also surjective we use a similar technique. This time, we use an
induction on the distance from the lower left corner. For each element (x; y) 2 U (2n ; 2n),
we define:
d0 (x; y ) = x + y:
We show by induction that, for each (x; y) 2 U (2n ; 2n ), there is an element a 2 I
such that pos(a) = (x; y). If d0 (x; y) = 0, then x = y = 0. Since I j= (> 1 C(0;0) ), there
is an element a 2 I such that pos(a) = (0; 0). Now consider (x; y) 2 U (2n ; 2n ) with
d0 (x; y ) > 0. Without loss of generality we assume x > 0 (if x = 0 then y > 0 must hold).
Hence (x 1; y) 2 U (2n ; 2n ) and d0 (x 1; y) < d0 (x; y). From the induction hypothesis, it
follows that there is an element a 2 I such that pos(a) = (x 1; y). Then there must be
an element a1 such that (a; a1 ) 2 eastI and Lemma 3.5 implies that pos(a1 ) = (x; y). Hence
pos is also surjective.
Finally, pos is indeed a homomorphism as an immediate consequence of Lemma 3.5.
n

n

n

n

It is interesting to note that we need inverse roles only to guarantee that pos is injective. The same can be achieved by adding the cardinality restriction (6 (2n  2n) >) to
Tn , from which the injectivity of pos follows from its surjectivity and simple cardinality
considerations. Of course the size of this cardinality restriction would only be polynomial
in n if we assume binary coding of numbers. Also note that we have made explicit use of
the special expressive power of cardinality restrictions by stating that, in any model of Tn,
the extension of C(2 1;2 1) must have at most one element. This cannot be expressed
with a ALCQI -TBox consisting of terminological axioms.
n

n

206

fiThe Complexity of Cardinality Restrictions and Nominals

3.3 Reducing Domino Problems to TCBox Consistency

Once Lemma 3.6 has been proved, it is easy to reduce the bounded domino problem to
TCBox consistency. We use the standard reduction that has been applied in the DL context,
e.g., in (Baader & Sattler, 1999).
Lemma 3.7 Let D = (D; V; H ) be a domino system. Let w = w0 : : : wn 1 2 D . There is
a TCBox T (n; D; w) such that:
 T (n; D; w) is consistent iff D tiles U (2n; 2n ) with initial condition w.
 T (n; D; w) can be computed in time polynomial in n.
Proof. We define T (n; D; w) := Tn [ TD [ Tw , where Tn is defined in Figure 3, TD captures
the vertical and horizontal compatibility constraints of the domino system D, and Tw enforces the initial condition. We use an atomic concept Cd for each tile d 2 D. TD consists
of the following cardinality restrictions:
G
:(Cd u Cd0 ));
(8 Cd ); (8
d2D d0 2Dnfdg

Cd0

))); (8

G

(d;d0 )2H

G

G

d2D

(Cd ! (8east:

G

G

(8

d2D

d2D

G

(Cd ! (8north:

(d;d0 )2V

Cd0

))):

Tw consists of the cardinality restrictions
(8 (C(0;0) ! Cw0 )); : : : ; (8 (C(n 1;0) ! Cw 1 );
n

where, for each x; y, C(x;y) is a concept that is satisfied by an element a iff pos(a) = (x; y),
defined similarly to C(0;0) and C(2 1;2 1) .
From the definition of T (n; D; w) and Lemma 3.6, it follows that each model of T (n; D; w)
immediately induces a tiling of U (2n ; 2n ) and vice versa. Also, for a fixed domino system
D, T (n; D; w) is obviously polynomially computable.
The main result of this section is now an immediate consequence of Lemma 2.2, Lemma 3.7, and Corollary 3.3:
n

n

Theorem 3.8

Consistency of ALCQI -TCBoxes is NExpTime-complete, even if unary coding of numbers is
used in the input.
Recalling the note below the proof of Lemma 3.6, we see that the same argument also
applies to ALCQ if we allow binary coding of numbers.
Corollary 3.9

Consistency of ALCQ-TCBoxes is NExpTime-hard, if binary coding is used to represent
numbers in cardinality restrictions.
It should be noted that it is open if the problem can be decided in NExpTime, if binary
coding of numbers is used, since the reduction of C 2 only yields decidability in 2-NExpTime.
207

fiTobies

In the following section, we will see that, for unary coding of numbers, deciding consistency of ALCQ-TCBoxes can be done in ExpTime (Corollary 4.8). This shows that the
coding of numbers indeed has an inuence on the complexity of the reasoning problem. It
is worth noting that the complexity of pure concept satisfiability for ALCQ does not depend on the coding; the problem is PSpace-complete both for binary and unary coding of
numbers (Tobies, 2000).
For unary coding, we needed both inverse roles and cardinality restrictions for the
reduction. This is consistent with the fact that satisfiability for ALCQI concepts with respect
to TBoxes consisting of terminological axioms is still in ExpTime, which can be shown by
a reduction to the ExpTime-complete logics CIN (De Giacomo, 1995) or CPDL (Pratt,
1979). This shows that cardinality restrictions on concepts are an additional source of
complexity. One reason for this might be that ALCQI with cardinality restrictions no longer
has the tree-model property.
4. Reasoning with Nominals

Nominals, i.e., atomic concepts referring to single individualsof the domain, are studied both
in the area of DLs (Borgida & Patel-Schneider, 1994; Donini et al., 1996) and modal logics
(Gargov & Goranko, 1993; Blackburn & Seligman, 1996; Areces et al., 1999). In this section
we show how, in the presence of nominals, consistency for TCBoxes can be polynomially
reduced to consistency of TBoxes consisting of general inclusion axioms, which, in general,
is an easier problem. This correspondence is used to obtain two novel results: (i) we show
that, for unary coding, consistency of ALCQ-TBoxes consisting of cardinality restrictions
can be decided in ExpTime; (ii) we show that, in the presence of both inverse roles and
number restrictions, reasoning with nominals is strictly harder than without nominals: the
complexity of determining consistency of TBoxes with general axioms rises from ExpTime
to NExpTime, and the complexity of concept satisfiability rises from PSpace to NExpTime.
Definition 4.1 Let NI be a set of individual names (also called nominals) disjoint from
NC and NR . Concepts in ALCQIO are defined as ALCQI -concepts with the additional rule
that, for every o 2 NI , o is an ALCQIO-concept.
A general concept inclusion axiom for ALCQIO is an expression of the from C v D,
where C and D are ALCQIO-concepts. A TIBox for ALCQIO is a finite set of general
inclusion axioms for ALCQIO, where the subscript \I" stands for \Inclusion".
The semantics of ALCQIO concepts is defined similar as for ALCQI , with the additional
requirement that every interpretation maps a nominal o 2 NI to a singleton set oI  I ;
o can be seen as a name for the element in oI . Please note that we do not have a unique
name assumption, i.e., we do not assume that o1 6= o2 implies oI1 6= oI2 .
An interpretation I satisfies an axiom C v D iff C I  DI . It satisfies a TIBox Tgci iff
it satisfies all axioms in Tgci ; in this case I is called a model of Tgci, and we will denote
this fact by I j= Tgci . A TIBox that has a model is called consistent.
Cardinality restrictions, TCBoxes, and their interpretation for ALCQIO are defined analogously to ALCQI .
208

fiThe Complexity of Cardinality Restrictions and Nominals

R

With ALCQO we denote the fragment of ALCQIO that does not contain any inverse roles

1.

Consistency of TCBoxes or TIBoxes both for ALCQO and ALCQIO is Exp-hard and can be decided in NExpTime, if unary coding of numbers is used.
Proof. Consistency of TIBoxes (and hence of TCBoxes) is ExpTime-hard already for (a
syntactical variant of) ALC (Halpern & Moses, 1992). Assuming unary coding of numbers,
we can reduce the problems to satisfiability of C 2, which yields the NExpTime upper
bound.
Lemma 4.2
Time

4.1 Expressing Cardinality Restrictions Using Nominals

In the following we show how, under the assumption of unary coding of numbers, consistency
of ALCQI -TCBoxes can be polynomially reduced to consistency of ALCQIO-TIBoxes. It
should be noted that, conversely, it is also possible to polynomially reduce consistency
of ALCQIO-TIBoxes to consistency of ALCQI -TCBoxes: for an arbitrary concept C , the
cardinality restrictions f(6 1 C ); (> 1 C )g force the interpretation of C to be a singleton.
Since we do not gain any further insight from this reduction, we do not formally prove this
result.
Definition 4.3 Let T = f(./1 n1 C1 ); : : : (./k nk Ck )g be an ALCQI -TCBox. W.l.o.g., we
assume that T contains no cardinality restriction of the form (> 0 C ) as these are trivially
satisfied by any interpretation. The translation of T , denoted by (T ), is the ALCQIO-TIBox
defined as follows:

[

(T ) = f(./i ni Ci) j 1  i  kg;
where (./i ni Ci ) is defined depending on whether ./i =6 or ./i =>.
(

n
1
(./i ni Ci ) = ffoCji vv Coi tj 1  tj oi ng g [ foj v :o` j 1  j < `  n g
i
i
i
i
i
i
i

if
if

=6 ;
./i =>
./i

where o1i ; : : : ; oni are fresh and distinct nominals and we use the convention that the empty
disjunction is interpreted as :> to deal with the case ni = 0.
i

Assuming unary coding of numbers, the translation of a TCBox T is obviously computable in polynomial time.
Lemma 4.4 Let T be an ALCQI -TCBox. T is consistent iff (T ) is consistent.
Proof. Let T = f(./1 n1 C1 ); : : : (./k nk Ck )g be a consistent TCBox. Hence, there is a
model I of T , and I j= (./i ni Ci ) for each 1  i  k. We show how to construct a model
I 0 of (T ) fromj I . I 0 will be identical to I in every respect except for the interpretation of
the nominals oi (which do not appear in T ).
If ./i =6, then I j= T implies ]CiI  ni. If ni = 0, then we have0 not introduced
new nominals, and (T ) contains Ci v :>. Otherwise, we define (oji )I such that CiI 
209

fiTobies

f(oji )I 0 j 1  j  nig. This implies CiI 0  (o1i )I 0 [    [ (oni )I 0 and hence, in either case,
I 0 j= (6 ni Ci).
If ./i =>, then ni > 0 must hold, and I j= T implies ]CiI  0ni. Let x1; : : : xn be ni
distinct elements from I with fx1 ; : : : ; xn g  CiI . We set (oji )I = fxj g. Since we have
chosen distinct individuals to interpret different nominals, we have I 0 j= oji v :o`i for every
1  i < `  ni. Moreover, xj 2 CiI implies I 0 j= oji v Ci and hence I 0 j= (> ni Ci).
i

i

i

We have chosen distinct nominals for every cardinality restrictions, hence the previous
construction is well-defined and, since I 0 satisfies (./i ni Ci ) for every i, I 0 j= (T ).
For the converse direction, let I be a models of (T ). The fact that I j= T (and hence
the consistency of T ) can be shown as follows: let (./i ni Ci) be an arbitrary cardinality
restriction in T . If ./i =6 and ni = 0, then we have (6 0 Ci) = fCi v :>g and,
since I j= (T ),nwe have CiI = ; and hence I j= (6 0 Ci). If ./i =6 and
ni > 0, we have
n I
1
I
1
fCi v oi t  t oi g  (T ). From I j= (T ) follows ]Ci  ](oi t  t oi )  ni. If ./i =>,
then we have foji v Ci j 1  j  nig[foji v :o`i j 1  j < `  nig  (T ). From the first set
of axioms we get f(oji )I j 1  j  nig  CiI . From the secondSset of axioms we get that, for
every 1  j < `  ni, (oji )I 6= (o`i )I . This implies that ni = ] f(oji )I j 1  j  nig  ]CiI .
i

i

Theorem 4.5

Assuming unary coding of numbers, consistency of ALCQI -TCBoxes can be polynomially
reduced to consistency of ALCQIO-TIBoxes. Similarly, consistency of ALCQ-TCBoxes can be
polynomially reduced to consistency of ALCQO-TIBoxes.
Proof. The first proposition follows from the fact that (T ) is polynomially computable
from T if we assume unary coding of numbers and from Lemma 4.4. The second proposition
follows from the fact that the translation does not introduce additional inverse roles. If T
does not contain inverse roles, then neither does (T ), and hence the result of translating
an ALCQ-TCBox is an ALCQO-TIBox.
4.2 Complexity Results

We will now use Theorem 4.5 to obtain new complexity results both for DLs with cardinality
restrictions and with nominals.
4.2.1

ALCQ and ALCQO

De Giacomo (1995) obtains complexity results for various DLs by sophisticated polynomial
reduction to a propositional dynamic logic. The author establishes many complexity results,
one of which is of special interest for our purposes.
Theorem 4.6 ((De Giacomo, 1995), Section 7.3)

Satisfiability and logical implication for CNO knowledge bases (TBox and ABox) are Exp-complete.
The DL CNO studied by the author is a strict extension of ALCQO; TBoxes in his thesis
correspond to what we call TIBoxes in this paper. Unary coding of numbers is assumed
Time

210

fiThe Complexity of Cardinality Restrictions and Nominals

throughout his thesis. Although a unique name assumption is made, it is not inherent
to the utilised reduction since is explicitly enforced. It is thus possible to eliminate the
propositions that require a unique interpretation of individuals from the reduction. Hence,
together with Lemma 4.2, we get the following corollary.
Corollary 4.7

Consistency of ALCQO-TIBoxes is ExpTime-complete if unary coding of number is assumed.
Together with Theorem 4.5, this solves the open problem concerning the lower bound
for the complexity of ALCQ with cardinality restrictions; moreover, it shows that the NExpTime-algorithm presented in (Baader et al., 1996) is not optimal with respect to worst case
complexity.
Corollary 4.8

Consistency of ALCQ-TCBoxes is ExpTime-complete, if unary coding of numbers in cardinality and number restrictions is used.
4.2.2

ALCQIO

Conversely, using Theorem 4.5 enables us to transfer the NExpTime-completeness result
from Theorem 3.8 to ALCQIO.
Corollary 4.9

Consistency of ALCQIO-TIBoxes or TCBoxes is NExpTime-complete.
Proof. For TIBoxes, this is an immediate corollary of Theorem 4.5 and Theorem 3.8.
Reasoning with TCBoxes is as hard as for TIBoxes in the presences of nominals.
This results explains a gap in (De Giacomo, 1995). There the author establishes the
complexity of satisfiability of knowledge bases consisting of TIBoxes and ABoxes both for
CNO, which allows for qualifying number restrictions, and for CIO, which allows for inverse
roles, by reduction to an ExpTime-complete PDL. No results are given for the combination CINO, which is a strict extension of ALCQIO. Corollary 4.8 shows that, assuming
ExpTime 6= NExpTime, there cannot be a polynomial reduction from the satisfiability
problem of CINO knowledge bases to an ExpTime-complete PDL. Again, a possible explanation for this leap in complexity is the loss of the tree model property. While for CIO and
CNO, consistency is decided by searching for a tree-like pseudo-models even in the presence
of nominals, this seems no longer to be possible in the case of knowledge bases for CINO.
Unique Name Assumption It should be noted that our definition of nominals is nonstandard for Description Logics in the sense that we do not impose the unique name assumption that is widely made, i.e., for any two individual names o1 ; o2 2 NI , oI1 6= oI2 is
required. Even without a unique name assumption, it is possible to enforce distinct interpretation of nominals by adding axioms of the form o1 v :o2. Moreover, imposing a unique
name assumption in the presence of inverse roles and number restriction leads to peculiar
effects. Consider the following TIBox:
T = fo v (6 k R >); > v 9R :og
211

fiTobies

Under the unique name assumption, T is consistent iff NI contains at most k individual
names, because each individual name must be interpreted by a unique element of the domain, every element of the domain must be reachable from oI via the role R, and oI may
have at most k R-successors. We believe that this dependency of the consistency of a TIBox
on constraints that are not explicit in the TIBox is counter-intuitive and hence have not
imposed the unique name assumption.
Nevertheless, it is possible to obtain a tight complexity bound for consistency of ALCQIOTIBoxes with the unique name assumption without using Theorem 4.5, but by an immediate
adaption of the proof of Theorem 3.8.
Corollary 4.10

Consistency of ALCQIO-TIBoxes with the unique name assumption is NExpTime-complete
if unary coding of numbers assumed.
Proof. A simple inspection of the reduction used to prove Theorem 3.8, and especially
of the proof of Lemma 3.6 shows that only a single nominal, which marks the upper right
corner of the torus, is necessary to perform the reduction. If o is an individual name and
create is a role name, then the following TIBox defines a torus of exponential size:

Tn = > v 9east:>;
> v 9north:>;
> v (= 1 east 1 >); > v (= 1 north 1 >);
> v 9create:C(0;0) ; o v C(2 1;2 1) ; 	
C(2 1;2 1) v o;
> v Deast u Dnorth
n

n

n

n

Since this reduction uses only a single individual name, the unique name assumption is
irrelevant.
Internalisation of Axioms In the presence of inverse roles and nominals, it is possible
to internalise general inclusion axioms into concepts using the spy-point technique used,
e.g., in (Blackburn & Seligman, 1996; Areces et al., 1999). The main idea of this technique
is to enforce that all elements in the model of a concept are reachable from a distinct point
(the spy-point) marked by an individual name in a single step.
Definition 4.11 Let T be an ALCQIO-TIBox. W.l.o.g., we assume that T is of the form
f> v C1 ; : : : ; > v Ck g. Let spy denote a fresh role name and i a fresh individual name.
We define the function spy inductively on the structure of concepts by setting Aspy = A for
all A 2 NC , ospy = o for all o 2 NI , (:C )spy = :C spy, (C1 u C2 )spy = C1spy u C2spy , and
(> n R C )spy = (> n R (9spy :i) u C spy).
The internalisation CT of T is defined as follows:
G

=iu

>vC 2T

C spy

u

G

CT

>vC 2T

8spy:C spy

Lemma 4.12 Let T be an ALCQIO-TIBox. T is consistent iff CT is satisfiable.
Proof. For the if -direction let I be a model of CT with a 2 (CT )I . This implies iI = fag.

Let I 0 be defined by

I 0 = fag [ fx 2 I j (a; x) 2 spyI g
212

fiThe Complexity of Cardinality Restrictions and Nominals

and I 0 = I jI0 .
0
0
Claim 1: For every x 2 I and every ALCQIO-concept C , we have x 2 (C spy )I iff x 2 C I .
We proof this claim by induction on the structure of C . The only interesting case is
C = (> n R D ). In this case C spy = (> n R (9spy :i) u D spy ). We have
x 2 (> n R (9spy :i) u D spy )I
iff ]fy 2 I j (x; y) 2 RI and y 2 (9spy :i)I \ (Dspy)I g > n
() iff ]fy 2 I 0 j (x; y) 2 RI 0 and y 2 DI 0 g > n
iff x 2 (> n R D)I 0 ;
where the equivalence () holds because of set equality and 0 the definition of I 0.
By construction,0 for every > v C 2 T and every x 2 I , x 2 (C spy )I . Due to Claim 1,
this implies x 2 C I and hence I 0 j= > v C .
For the only-if -direction, let I be an interpretation with I0 j= T . We pick an
arbitrary
0
I
0
I
I
element a 2  and define an extension I of I by setting i = fag and spy = f(a; x) j
x 2 I . Since i and spy do not occur in T , we still have that I 0 j= T .
0
Claim 2: For every x 2 I and every ALCQIO-concept C that does not contain i or spy,
0
0
x 2 C I iff x 2 (C spy )I .
Again, this claim is proved by induction on the structure of concepts and the only
interesting case is C = (> n R D).
0
x 2 (> n R D )I
iff ]fy 2 I 0 j (x; y) 2 RI 0 and y 2 DI 0 g > n
() iff ]fy 2 I 0 j (x; y) 2 RI 0 ; (a; y) 2 spyI 0 ; and y 2 (Dspy)I 0 g > n
iff x 2 (> n R (9spy :i) u Dspy)I 0 :
Again, the equivalence () holds due to set equality and the definition of I 0.
Since, for every > v C0 2 T , we have I 0 j= > v C , Claim 2 yields that ( >vC 2T C spy)I 0 =
0
I and hence a 2 (CT )I
As a consequence, we obtain the sharper result that already pure concept satisfiability
for ALCQIO is a NExpTime-complete problem.
F

Corollary 4.13

Concept satisfiability for ALCQIO is NExpTime-complete.
Proof. From Lemma 4.12, we get that the function mapping a ALCQIO-TIBox T to CT
is a reduction from consistency of ALCQIO-TIBoxes to ALCQIO-concept satisfiability. From
Corollary 4.9 we know that the former problem is NExpTime-complete. Obviously, CT can
be computed from T in polynomial time. Hence, the lower complexity bound transfers.
213

fiTobies

Concept Satisfiability
GCIs
Cardinality Restr.

ALCQ

-c.
-c.
ExpTime-c.
PSpace

ExpTime

ALCQO

open

-c.
ExpTime-c.
ExpTime

ALCQI

-c.
-c.
NExpTime-c.

ALCQIO

-c.
-c.
NExpTime-c.

PSpace

NExpTime

ExpTime

NExpTime

Figure 4: Complexity of the reasoning problems
5. Conclusion

Combining the results from (De Giacomo, 1995) and (Tobies, 2000) with the results from
this paper, we obtain the classification of the complexity of concept satisfiability and TBoxconsistency for various DLs and for TBoxes consisting either of cardinality restrictions or
of general concept inclusion axioms shown in Figure 4, where we assume unary coding of
numbers.
The result for ALCQIO shows that the current efforts of extending very expressive DLs
as the logic SHIQ (Horrocks et al., 1999) and DLR(Calvanese et al., 1998c) or propositional
dynamic logics as CPDLg (De Giacomo & Lenzerini, 1996) with nominals are dicult tasks,
if one wants to obtain a practical decision procedure, since already concept satisfiability for
these logics is a NExpTime-hard problem.
We have shown that, while having the same complexity as C 2, ALCQI does not reach its
expressive power (Tobies, 1999). Cardinality restrictions, although interesting for knowledge
representation, are inherently hard to handle algorithmically. The same applies to nominals
in the presence of inverse roles and number restrictions. As an explanation for this we offer
the lack of a tree model property, which was identified by Vardi (1997) as an explanation
for good algorithmic behaviour of many modal logics.
At a first glance, our results make ALCQI with cardinality restrictions on concepts or
ALCQIO with general axioms obsolete for knowledge representation because C 2 delivers
more expressive power at the same computational price. Yet, is is likely that a dedicated
algorithm for ALCQI may have better average complexity than the C 2 algorithm; such an
algorithm has yet to be developed. This is highly desirable as it would also be applicable to
reasoning problems for expressive DLs with nominals, which have applications in the area
of reasoning with database schemata (Calvanese et al., 1998a, 1998b).
An interesting question lies in the coding of numbers: If we allow binary coding of
numbers, the translation approach together with the result from (Pacholski et al., 1997)
leads to a 2-NExpTime algorithm. As for C 2, it is an open question whether this additional
exponential blow-up is necessary. A positive answer would settle the same question for C 2
while a proof of the negative answer might give hints how the result for C 2 might be
improved. For ALCQ with cardinality restrictions, we have partially solved this problem:
with unary coding, the problem is ExpTime-complete whereas, for binary coding, it is
NExpTime-hard.

214

fiThe Complexity of Cardinality Restrictions and Nominals

Acknowledgments

I would like to thank Franz Baader, Ulrike Sattler, and the anonymous referees for valuable
comments and suggestions. This work was supported by the DFG, Project No. GR 1324/3{
1.
References

Aiello, L. C., Doyle, J., & Shapiro, S. C. (Eds.)., Proceedings of KR'96 (1996). Principles
of Knowledge Representation and Reasoning: Proceedings of the Fifth International
Conference (KR'96). Morgan Kaufmann Publishers, San Francisco, California.
Areces, C., Blackburn, P., & Marx, M. (1999). A road-map on complexity for hybrid logics.
In Proceedings of the Annual Conference of the European Association for Computer
Science Logic (CSL-99), LNCS 1683, pp. 307{321. Springer-Verlag.
Baader, F., Buchheit, M., & Hollunder, B. (1996). Cardinality restrictions on concepts.
Artificial Intelligence, 88 (1{2), 195{213.
Baader, F., & Sattler, U. (1999). Expressive number restrictions in description logics.
Journal of Logic and Computation, 9 (3), 319{350.
Berger, R. (1966). The undecidability of the dominoe problem. Memoirs of the American
Mathematical Society, 66.
Blackburn, P., & Seligman, J. (1996). Hybrid languages. Journal of Logic, Language and
Information, 3 (4), 251{272.
Borger, E., Gradel, E., & Gurevich, Y. (1997). The Classical Decision Problem. Perspectives
in Mathematical Logic. Springer-Verlag, Berlin.
Borgida, A. (1996). On the relative expressiveness of description logics and first order logics.
Artificial Intelligence, 82, 353{367.
Borgida, A., & Patel-Schneider, P. F. (1994). A semantic and complete algorithm for
subsumption in the classic description logic. Journal of Artificial Intelligence Research,
1, 277{308.
Calvanese, D., De Giacomo, G., Lenzerini, M., Nardi, D., & Rosati, R. (1998a). Source integration in data warehousing. In Proceedings of the Ninth International Workshop on
Database and Expert Systems Applications (DEXA-98), pp. 192{197. IEEE Computer
Society Press.
Calvanese, D., De Giacomo, G., & Lenzerini, M. (1998b). On the decidability of query
containment under constraints. In Proceedings of the Seventeenth ACM SIGACT
SIGMOD SIGART Symposium on Principles of Database Systems (PODS-98).
Calvanese, D., De Giacomo, G., Lenzerini, M., Nardi, D., & Rosati, R. (1998c). Description
logic framework for information integration. In Proc. of the 6th Int. Conf. on the
Principles of Knowledge Representation and Reasoning (KR'98), pp. 2{13.
215

fiTobies

De Giacomo, G. (1995). Decidability of Class-Based Knowledge Representation Formalisms. Ph.D. thesis, Dipartimento di Informatica e Sistemistica, Univ. di Roma
\La Sapienza".
De Giacomo, G., & Lenzerini, M. (1996). TBox and ABox reasoning in expressive description
logics.. In Aiello et al. (Aiello et al., 1996), pp. 316{327.
Donini, F. M., Lenzerini, M., Nardi, D., & Schaerf, A. (1996). Reasoning in description
logics. In Brewka, G. (Ed.), Foundation of Knowledge Representation, pp. 191{236.
CSLI-Publications.
Fine, K. (1972). In so many possible worlds. Notre Dame Journal of Formal Logic, 13,
516{520.
Gargov, G., & Goranko, V. (1993). Modal logic with names. J. of Philosophical Logic, 22,
607{636.
Gradel, E., Otto, M., & Rosen, E. (1997). Two-variable logic with counting is decidable.
In Proceedings, Twelth Annual IEEE Symposium on Logic in Computer Science, pp.
306{317 Warsaw, Poland. IEEE Computer Society Press.
Halpern, J. Y., & Moses, Y. (1992). A guide to completeness and complexity for model
logics of knowledge and belief. Artificial Intelligence, 54 (3), 319{379.
Horrocks, I., Sattler, U., & Tobies, S. (1999). Practical reasoning for expressive description
logics. In Proceedings of the 6th International Conference on Logic for Programming
and Automated Reasoning (LPAR'99), pp. 161{180.
Pacholski, L., Szwast, W., & Tendera, L. (1997). Complexity of two-variable logic with
counting. In Proceedings, Twelth Annual IEEE Symposium on Logic in Computer
Science, pp. 318{327 Warsaw, Poland. IEEE Computer Society Press.
Pratt, V. R. (1979). Models of program logics. In Proceedings of the Twentieth IEEE
Symposium on Foundations of Computer Science, pp. 115{122. IEEE.
Schmidt-Schau, M., & Smolka, G. (1991). Attributive concept descriptions with complements. Artificial Intelligence, 48, 1{26.
Spaan, E. (1993). Complexity of Modal Logics. Ph.D. thesis, University of Amsterdam.
Tobies, S. (1999). A NExpTime-complete description logic strictly contained in C 2. In
Flum, J., & Rodriguez-Artalejo, M. (Eds.), Proceedings of the Annual Conference
of the European Association for Computer Science Logic (CSL-99), LNCS 1683, pp.
292{306. Springer-Verlag.
Tobies, S. (2000). PSPACE reasoning for graded modal logics. Journal of Logic and Computation. To appear.
216

fiThe Complexity of Cardinality Restrictions and Nominals

Vardi, M. Y. (1997). Why is modal logic so robustly decidable?. In Descriptive Complexity
and Finite Models: Proceedings of a DIMACS Workshop, January 14-17, 1996, No. 31
in DIMACS Series in Discrete Mathematics and Theoretical Computer Science, pp.
149{184. American Math. Society.
Wang, H. (1963). Dominoes and the AEA case of the Decision Problem. Bell Syst. Tech.
J., 40, 1{41.
Woods, W. A., & Schmolze, J. G. (1992). The Kl-One family. Computers and Mathematics
with Applications { Special Issue on Artificial Intelligence, 23 (2{5), 133{177.

217

fi