Journal of Artificial Intelligence Research 37 (2010) 479-525

Submitted 12/09; published 03/10

Multiattribute Auctions Based on Generalized Additive
Independence
Yagil Engel

yagile@ie.technion.ac.il

Technion - Israel Institute of Technology
Faculty of Industrial Engineering & Management
Technion City, Haifa 32000, Israel

Michael P. Wellman

wellman@umich.edu

University of Michigan
Division of Computer Science & Engineering
2260 Hayward St, Ann Arbor, MI 48109-2121, USA

Abstract
We develop multiattribute auctions that accommodate generalized additive independent
(GAI) preferences. We propose an iterative auction mechanism that maintains prices on
potentially overlapping GAI clusters of attributes, thus decreases elicitation and computational burden, and creates an open competition among suppliers over a multidimensional
domain. Most significantly, the auction is guaranteed to achieve surplus which approximates optimal welfare up to a small additive factor, under reasonable equilibrium strategies
of traders. The main departure of GAI auctions from previous literature is to accommodate non-additive trader preferences, hence allowing traders to condition their evaluation
of specific attributes on the value of other attributes. At the same time, the GAI structure
supports a compact representation of prices, enabling a tractable auction process. We perform a simulation study, demonstrating and quantifying the significant efficiency advantage
of more expressive preference modeling. We draw random GAI-structured utility functions
with various internal structures, generate additive functions that approximate the GAI
utility, and compare the performance of the auctions using the two representations. We
find that allowing traders to express existing dependencies among attributes improves the
economic efficiency of multiattribute auctions.

1. Introduction
Multiattribute trading mechanisms extend traditional, price-only mechanisms by facilitating negotiation over a set of predefined attributes representing various non-price aspects
of a deal. Rather than negotiate over a fully specified good or service, a multiattribute
mechanism delays commitment to particular configurations until it extracts sufficient information on traders preferences. For example, a companys procurement department may
run a multiattribute auction to select a supplier of hard drives. Supplier offers may be
evaluated not only over the price they offer, but also over features such as volume, RPM,
access time, latency, transfer rate, and so on. In addition, suppliers may offer contracts
differing in terms such as warranty, delivery time, and service.
In order to account for traders preferences, the auction mechanism must extract evaluative information over a complex domain of multidimensional configurations. Constructing
and communicating a complete preference specification can pose a severe burden for even a

c
!2010
AI Access Foundation. All rights reserved.

fiEngel & Wellman

moderate number of attributes, hence practical multiattribute auctions must either accommodate partial specifications, or support compact expression of preferences assuming some
simplified form. By far the most popular multiattribute form to adopt is the simplest: an
additive representation where overall value is a linear combination of values associated with
each attribute. For example, several recent proposals for iterative multiattribute auctions
(Beil & Wein, 2003; Bichler, 2001; David, Azoulay-Schwartz, & Kraus, 2002; Parkes &
Kalagnanam, 2005) require additive preference representations.
Such additivity reduces the complexity of preference specification exponentially (compared to the general discrete case), but precludes expression of any interdependencies among
the attributes. In practice, however, interdependencies among natural attributes are quite
common. For example, the hard-drive buyer may exhibit complementary preferences for
volume and access time (since the performance effect is more salient if much data is involved), or may view a strong warranty as a good substitute for high reliability ratings.
Similarly, a sellers production characteristics can easily violate additivity, for example if
decreasing access time is technically more difficult for higher-capacity drives. In such cases
an additive value function may not be able to provide an adequate approximation of real
preferences.
On the other hand, fully general models are intractable, and multiattribute preferences
typically exhibit some structure. Our goal, therefore, is to identify the subtler yet more
widely applicable structured representations, and exploit these properties of preferences in
trading mechanisms.
We propose an iterative auction mechanism based on just such a flexible preference
structure. Our approach is inspired by the design of an iterative multiattribute procurement
auction for additive preferences, due to Parkes and Kalagnanam (2005) (PK). PK present
two auction designs: the first (NLD) makes no assumptions about traders preferences, and
lets sellers bid on the full multidimensional attribute space. Because NLD maintains an
exponential price structure, it is suitable only for small domains. The other auction (AD)
assumes additive buyer valuation and seller cost functions. It collects sell bids per attribute
level and for a single discount term. The price of a configuration is the sum of the prices of
the chosen attribute levels minus the discount.
The auction we propose also supports compact price spaces, albeit for levels of clusters of attributes rather than singletons. We employ a preference decomposition based on
generalized additive independence (GAI), a model flexible enough to accommodate interdependencies to the exact degree of accuracy desired, yet providing a compact functional
form to the extent that interdependence can be limited.
First, we build a direct, formally justified link from preference statements over priced
outcomes to a generalized additive decomposition of the willingness-to-pay (wtp) function.
After laying out this infrastructure, we employ this representation tool for the development
of a multiattribute iterative auction mechanism that allows traders to express their complex
preferences in GAI format. We then study the auctions allocational, computational, and
practical properties. Next, we present a simulation study of our proposed auction mechanism, in order to practically evaluate the economic and computational properties of GAI
auctions. We simulate the auctions using random GAI utility functions, including some
based on constrained preference structures often exhibited in applications. The simulations
let us quantify the benefits of modeling preferences accurately using GAI, in comparison to
480

fiGAI Auctions

using an additive approximation. We show that under most circumstances, a GAI auction
achieves significantly higher surplus than an auction that uses an additive approximation
of preferences.
After providing background on multiattribute preferences and multiattribute auctions
(Section 2), we develop new multiattribute structures for wtp functions, supporting generalized additive decompositions (Section 3). We describe our auction mechanism in Section 4,
followed by a detailed example in Section 5, and study the mechanisms allocational, computational, and practical properties in Section 6. We present our simulation framework in
Section 7, and discuss the experimental results in Section 8.

2. Background
In this section we provide essential background on multiattribute preferences (Sections 2.1
and 2.2) and on multiattribute auctions (Section 2.3).
2.1 Multiattribute Preferences and Utility
Let  denote the space of possible outcomes, with ! a preference relation (weak total order)
over . Let A = {a0 , . . . , an }!be a set of attributes describing . Each attribute a  A has
a domain D(a), so that   ni=1 D(ai ). Capital letters denote subsets of attributes, small
latin letters (with or without numeric subscripts) denote specific attributes, and X = A\X.
 (and variations such as  " or ) indicate specific outcome in . An instantiation to a subset
of attributes Y is denoted using prime signs (as in Y " ) or numerical superscript (as in Y 1 ).
In particular, Y " is a projection on Y of some instantiations   . To represent an
instantiation of subsets X, Y at the same time we use a sequence of instantiation symbols,
as in X 1 Y 2 .
The preference relation ! over outcomes is usually represented numerically by a value
function v() (Keeney & Raiffa, 1976).
Definition 1 (Value Function). v :   % is a value function representing ! if for any
,  "  , v()  v( " ) iff  !  " .
Clearly, any monotonic transformation of v() is also a value function for !.
In many cases it is useful to represent, beyond a simple preference order over outcomes,
a notion of strength of preferences. A value function that expresses strength of preferences is
called a cardinal value function. A measurable value function is a well-established cardinal
 over pairs of outcomes.
value framework which posits the existence of a preference order !
"
"
"
"

For some  !  and  !  , the statement (,  ) ! (,  ) means that the strength of
preference of  " over  is greater than or equal to that of  " over . Krantz, Luce, Suppes,
and Tversky (1971) establish the set of axioms ensuring the existence of a utility function

representing !.
Definition 2 (Measurable Value Function). A measurable value function (MVF) is a
value function u :   %, such that for any ,  " , ,  "  , for which  !  " and  !  " , the
following holds:
 (,  " ).
u( " )  u()  u( " )  u()  (,  " ) !
(1)

481

fiEngel & Wellman

Hence the order over differences in values of u() correspond exactly to the order over
preference differences. Note that an MVF can also be used as a value function representing
 ( "" , ) iff  " !  "" , for any .
!, because ( " , ) !
In auction theory and mechanism design, traders preferences are usually represented
using a quasi-linear value function, such as v(, p) = u()+p, where p represents a monetary
outcome.1 The cardinal value function u() expresses strength of preference, in that the
difference u( " )  u( "" ) corresponds to the additional amount a trader is willing to pay
for  " relative to  "" . For example, if  " represents a red Mercedes with a sunroof, and  ""
denotes a blue Subaru with no sunroof, then u( " )  u( "" ) is the strength of preference for
the Mercedes configuration over the Subaru. If the Mercedes costs p" and the Subaru p"" ,
then according to v(, p) the trader prefers the Mercedes deal iff u( " )  u( "" )  p"  p"" .
In fact, u() can be easily shown to be an MVF, where the preference differences correspond to differences in willingness-to-pay (Engel & Wellman, 2007). For this reason, we
use MVF as the basis for utility in this work, and assume that traders willingness-to-pay
(wtp) functions constitute an MVF.
Reasoning over full outcomes is hard in several ways. Most notably, it is difficult for
humans to compare outcomes over many dimensions, and complex for machines to store
and analyze preferences over a number of outcomes that is exponential in the number of
attributes. It is therefore useful to consider preferences over the joint product of some
Y  A, considering the rest of the attributes Y fixed on some predefined values. Such an
order is also often referred to as a ceteris paribus preference orderone partial outcome is
preferred to another all else being equal.
Definition 3 (Conditional Preference). Partial outcome Y 2 is conditionally preferred
"
"
"
to partial outcome Y 1 given Y , if Y 1 Y ! Y 2 Y . The conditional preference order over Y
"
"
"
given Y is denoted by !Y ! , hence Y 1 Y ! Y 2 Y is abbreviated Y 1 !Y ! Y 2 .
In general, conditional preferences may depend on the particular assignment chosen for
the rest of the attributes. More precisely, if Y 1 Y ! Y 2 , we could still find that Y 2 Y !! Y 1
""
"
for some Y ,= Y . When this is the case, one needs to maintain both conditional preference
orders !Y ! and !Y !! , and hence in general this scheme might not yield any computational
benefits. Fortunately, in many cases one can identify subsets Y for which this preference
reversal does not occur, that is the preference order over Y is invariant to the instantiation
of Y .
Definition 4 (Preferential Independence). Y is preferential independent (PI) of Y ,
"
""
written PI(Y, Y ), if for any Y 1 and Y 2 , and for any Y , Y , we have Y 1 !Y ! Y 2 iff Y 1 !Y !!
Y 2.
First-order preferential independence (FOPI), independence of a single attribute from
the rest, is a natural assumption in many domains. For example, in typical purchase decisions greater quantity or higher quality is more desirable regardless of the assignments
to other attributes. Preferential independence of higher order, however, requires invariance
of the tradeoffs among some attributes with respect to variation in others, a more stringent independence condition. The MPI condition, defined below, is over the global set of
attributes A, and requires all possible subsets to be PI.
1. We use the term trader when referring to either buyers or sellers.

482

fiGAI Auctions

Definition 5 (Mutual Preferential Independence). Attributes A are mutually preferential independent (MPI) iff for all Y  A, P I(Y, Y ).
Preferential independence can greatly simplify the form of v.
Theorem 1 (Debreu, 1959). A preference order over set of attributes A can be represented
by an additive value function
v(a1 , . . . , an ) =

n
"

vi (ai ),

i=1

iff A is mutually preferential independent.
Dyer and Sarin (1979) extend additivity theory to MVF, and specify the conditions
under which u() as well has an additive structure as above. Effectively, additive forms
used in trading mechanisms assume MPI over the full set of attributes, including the money
attribute. Intuitively that means willingness-to-pay for levels of an attribute or attributes
cannot be affected by the instantiation of other attributes. This sweeping condition rarely
holds in practice (Von Winterfeldt & Edwards, 1986). Therefore, recent AI literature often
relaxes the MPI assumption by imposing additivity only with respect to subsets of attributes
which may overlap.
Definition 6 (Generalized Additive
Independence). Let I1 , . . . , Ig be (not necessarily
#
disjoint) subsets of A, such that gi=1 Ii = A. The elements I1 , . . . , Ig are called generalized
additive independent (GAI) if there exist functions f1 , . . . , fg such that,
u(a1 , . . . , an ) =

g
"

fr (Ir ).

(2)

r=1

2.2 Related Work on Generalized Independence
Our definition of GAI is somewhat nonstandard. Most literature defines a GAI condition
for the expected utility function (von Neumann & Morgenstern, 1944). In that well-known
model, a particular choice results in a lottery, that is a probability distribution over outcomes. The expected utility function represents a complete preference order over lotteries.
Informally, the GAI definition requires preferences on lotteries over  to depend only on
the margins over the subsets I1 , . . . , Ig . The form of Eq. (2) is a result of that definition,
obtained by Fishburn (1967). Fishburn not only introduces the functional decomposition,
but also provides a well-defined form for the functional constituents f1 , . . . , fg . Graphical
models and elicitation procedures for GAI decomposable utility were developed within the
expected utility framework (Bacchus & Grove, 1995; Boutilier, Bacchus, & Brafman, 2001;
Gonzales & Perny, 2004; Braziunas & Boutilier, 2005). In addition, generalized additive
utility models have been employed by Hyafil and Boutilier (2006) as an aid in direct revelation mechanisms, and by Robu, Somefun, and La Poutre (2005) for opponent modeling
in bilateral multi-item negotiation.
Bacchus and Grove (1995), who in fact coined the term GAI, show that the decomposition can also be obtained as a result of a collection of local, easier to detect, binary
483

fiEngel & Wellman

independence conditions. More specifically, they rely on a form called conditional additive
independence, which, informally, corresponds to a GAI decomposition limited to two (overlapping) subsets X  A and Y  A. They prove that this condition can be expressed as
a separation criterion on a graph whose nodes correspond to A, by the means of a perfect
map (Pearl, 1988). Crucially, the utility function decomposes to GAI form over lower dimensional functions, each defined on a maximal clique of the graph. When combined with
Fishburns work, their result provides a well-defined functional form that can be obtained
from a collection of conditional additive independence conditions. This result relies on the
form of lotteries as a basis for the utility function and the independence conditions.
The expression of willingness-to-pay requires a cardinal measure of preferences, yet
without uncertainty, there is no need for an expected utility representation. We therefore
invoke the MVF framework, and in Section 3, build on the additive decompositions for MVF
developed by Dyer and Sarin (1979) to develop multiattribute preference structures for wtp.
This development enables us to follow the footsteps of Fishburn (1967) and Bacchus and
Grove (1995) and show that a well-defined GAI form for MVF can also be obtained using
a collection of easy-to-detect binary independence conditions.
2.3 Multiattribute Auctions
The distinguishing feature of a multiattribute auction is that the goods are defined by
vectors of attributes. As above, we use A to denote a set of attributes describing the domain
. A configuration is a particular attribute vector,   . Multiattribute auctions are used
primarily for procurement, as part of strategic sourcing processes (Sandholm, 2007). In
the procurement model there is a single buyer, who has a utility function (representing
willingness-to-pay) ub () for purchasing   . There are m sellers s1 , . . . , sm with utility
functions ci :   %, representing the cost for si to supply configurations in  to the buyer.
Definition 7 (Multiattribute Allocation Problem). The multiattribute allocation problem (Parkes & Kalagnanam, 2005) is:
MAP =

max

i{1,...,m},

ub ()  ci ().

(3)

An allocation (si ,   ) solving MAP is said to maximize the surplus of the procurement
problem.
MAP can be decomposed to two subproblems: first find the most efficient configuration
for each trader, and then find the trader whose efficient configuration yields the highest
surplus. We call the first part the multiattribute matching problem (Engel, Wellman, &
Lochner, 2006).
Definition 8 (Multiattribute Matching Problem). The multiattribute matching problem (MMP) for a buyer b and a seller si is:
MMP(b, si ) = arg max ub ()  ci ().


We also call a configuration   selected by MMP(b, si ) a bilaterally efficient configuration
for si .
484

fiGAI Auctions

Most of the theoretical work on surplus-maximizing multiattribute auctions relates in
some way to the foundational work by Che (1993). In Ches model, the good or service
is characterized by a single quality attribute, and each seller has an independent private
cost function over quality. The buyer announces a scoring rule to the sellers, by which
price-quality offers will be evaluated. Che suggests several types of auctions, including
the second-score auction, where the seller bidding highest score wins, and must provide a
combination of price and quality that achieves the second-best score. In the second-score
mechanism, bidding truthfully is an equilibrium in dominant strategies. In particular, Che
shows that sellers bid on the quality that maximizes the difference between the buyers
scoring rule and their own cost function; in other words, on the respective MMP solution.
Branco (1997) generalizes Ches model and some of his results to correlated costs.
This basic model was later generalized by several authors to account explicitly for multiple quality attributes, and usually restricting the scoring rule to be additive over the
attributes (Bichler, 2001; David et al., 2002). Vulkan and Jennings (2000) suggest a modified version of English auctions (iterative auctions that require new bids to increment
over current bid price) under which bidders are required to improve current score, rather
than price. Sandholm and Suri (2006) consider the incorporation of non-price attributes in
multi-item (combinatorial) auctions.
The literature surveyed above emphasizes that auctions require the buyer to reveal a
scoring function prior to bidding. In order to achieve economic efficiency, this scoring
function must convey the buyers full utility function ub (). This is a major obstacle to
practical adaption of these mechanisms. Procurement auctions are rarely an isolated event,
and the buyer-supplier relationships usually evolve and change over time, during which
suppliers may retain some market power, and take advantage of the information revealed
by the buyer. Events are sometimes conducted on a recurrent basis, and several events may
be conducted for related goods with correlated valuations. In addition, the buyer may wish
to keep secret the way her utility may be discriminating for or against particular suppliers
(Koppius, 2002).
As noted in Section 1, Parkes and Kalagnanam (2005) suggest an alternative approach,
which employs prices over the space of configurations to drive traders to the efficient configurations. Auction NLD maintains a price for each   , and sellers bid for such full
configuration in each round. Auction AD maintains a price for each level a"i  D(ai ). Prices
are initially set to be high. In each round, sellers bid on a particular value for each attribute,
and the auction selects a set of levels (again, per attribute) which are myopically buyer preferred in that round, that is, approximately maximize the buyers utility with respect to
current prices. In addition, the auction maintains a discount factor that is applied to ensure
that a single seller is eventually selected. The price of a configuration is defined as the sum
of the prices of the chosen attribute levels minus the discount. After each round, prices of
particular levels of particular attributes are decremented by a constant ", according to a set
of price change rules, ensuring that the auction ultimately converges to an efficient solution.
Both auctions are shown to obtain optimal surplus (up to "-proportional error), when
all sellers bid myopically rather than strategically (we define this concept formally in Section 6.1). The myopic behavior is shown to be an ex-post Nash equilibrium. Auction NLD
is fully expressive but not tractable when the number of attributes is large. Auction AD
is computationally efficient, but its expressiveness is limited to additive preferences (see
485

fiEngel & Wellman

discussion following Theorem 1). When traders preferences are not additive, the welfare
achieved by the auction is not necessarily optimal; that is, it does solve MAP optimally,
but with respect to inaccurate utility functions. Moreover, it is not clear how this lack of
expressiveness may affect the incentives of traders to act strategically.
Theoretically, one could also use the well-known Vickrey-Clake-Grove (VCG) mechanism. Parkes and Kalagnanam define the sell-side VCG mechanism: all traders submit
their full utility or cost functions, MAP is solved by the auction engine, and the winning
seller pays according to her VCG price (definition of this pricing is provided in Section 6.1).
In such an auction, traders can be allowed to use any compact preference structure, including GAI. However, this scheme suffers from the same disadvantages as any of the proposals
that require full revelation of utility.
To summarize, no previously suggested surplus-maximizing multiattribute procurement
auction is at the same time expressive (accommodates interdependencies between attributes),
tractable (its computations do not depend on the fully exponential domain), and preserving
of the buyers private information, meaning (minimally) that it does not require the buyer
to reveal a full utility function before extracting any bids from sellers. Our proposed mechanism, as we show theoretically and using simulations, possesses attractive properties on
all these criteria.

3. Detection of GAI Structure for Measurable Value Functions
In this section we provide the basis for the application of GAI decomposition in procurement
problems. In Section 3.1 we show how GAI can be obtained as a collection of local, weaker
conditions which are based on invariance of willingness-to-pay. In Section 3.2 we use an
example to demonstrate how this process can be used in procurement problems.
3.1 Difference Independence and GAI
Dyer and Sarin (1979) introduce for measurable value an analog to additive independence,
called difference independence. Our first step is to introduce a conditional generalization of
their definition.
Definition 9 (Conditional Difference Independence). Let X, Y  A and X  Y = ,
and define Z = A \ X  Y . X is conditionally difference independent of Y , denoted as
CDI(X, Y ), if for any Z "  D(Z), and for any X 1 , X 2  D(X), Y 1 , Y 2  D(Y ),
(X 1 Y 1 Z " , X 2 Y 1 Z " ) 
 (X 1 Y 2 Z " , X 2 Y 2 Z " ),

(4)

 and 1 both hold.
where the symbol 
 indicates that !
By the definition of MVFs (1), the CDI condition (4) can be expressed equivalently in
terms of measurable value:
u(X 1 Y 1 Z " )  u(X 2 Y 1 Z " ) = u(X 1 Y 2 Z " )  u(X 2 Y 2 Z " )
This condition states that the value, or willingness-to-pay, for a change in the assignment
to X does not depend on the current assignment of Y , for any fixed value of Z.
A CDI condition leads to a convenient decomposition of the MVF.
486

fiGAI Auctions

Lemma 2. Let u(A) be an MVF representing preference differences, with X, Y, Z as specified in Definition 9. Then CDI(X, Y ) iff
u(A) = u(X 0 , Y, Z) + u(X, Y 0 , Z)  u(X 0 , Y 0 , Z),
for any arbitrary instantiations X 0 , Y 0 .
With a single CDI condition, we can therefore replace the n-ary function u(X, Y, Z) with
two lower-dimensional functions u(X 0 , Y, Z) and u(X, Y 0 , Z). It is reasonable to assume
that one can apply more CDI conditions to further decompose the resulting functions. In
order to take full advantage of all existing CDI conditions, we introduce the notion of a
dependency graph, which is a simplification of the concept of perfect map mentioned in
Section 2.2.
Definition 10 (Dependency Graph). Let S denote a set, and R a binary relation over
2S . Then a graph G = (S, E) is a dependency graph for R if for any S1 , S2  S, it holds
that (S1 , S2 )  R iff for any a1  S1 and a2  S2 , (a1 , a2 ) 
/ E.
Hence the dependency graph expresses R as a separation criterion; two subsets have a
direct connection iff they are not in R. A dependency graph for CDI can be constructed
simply by removing any edge (a1 , a2 ) for which CDI({a1 }, {a2 }); this is because CDI(S1 , S2 )
holds iff CDI({a1 }, {a2 }) holds for any a1  S1 and a2  S2 . We use the term CDI map for
a dependency graph induced by a CDI relation.
The next theorem links the CDI condition, the CDI map, and a GAI decomposition
over A. In fact, it establishes that the functional constituents of GAI decomposition for
MVF are the same as the functional constituents of GAI decomposition for the expected
utility model, as defined by Fishburn (1967). We adopt the following conventional notation.
Let (a01 , . . . , a0n ) be a predefined vector called the reference outcome. For any I  A, the
function u([I]) stands for the projection of u(A) to I where the rest of the attributes are
fixed at their reference levels.
Theorem 3 (CDI-GAI Theorem). Let G = (A, E) be a CDI map for A, and {I1 , . . . , Ig }
a set of (overlapping) maximal cliques of G. Then
u(A) =

g
"

fr (Ir ),

(5)

r=1

where
f1 = u([I1 ]), and
for r = 2, . . . , g,

fr = u([Ir ]) +

r1
"

(6)
(1)j

j=1

"
1i1 <<ij <r

u([

j
$

Iis  Ir ]).

s=1

As a small example, Table 1 exhibits a utility function u(x1 , x2 , x3 ). Each of the three
attributes has a boolean domain, that is D(xi ) = {0, 1}. Let x0i and x1i denote the assignments 0 and 1 (respectively) to xi . We first observe that CDI({x1 }, {x3 }) holds because:2
2. Note that x02 and x12 correspond to Z ! in Definition 9.

487

fiEngel & Wellman

x1
0
1
0
1
0
1
0
1

x2
0
0
1
1
0
0
1
1

x3
0
0
0
0
1
1
1
1

u(x1 , x2 , x3 )
0
5
2
6
3
8
7
11

u(x1 , x2 , x03 )
0
5
2
6
0
5
2
6

u(x01 , x2 , x3 )
0
0
2
2
3
3
7
7

u(x01 , x2 , x03 )
0
0
2
2
0
0
2
2

u1 (I1 )
0
5
2
6
0
5
2
6

u2 (I2 )
0
0
0
0
3
3
5
5

Table 1: A utility function over three attributes, decomposable via GAI into the sum of two
functions of two attributes each. u1 () depends only on {x1 , x2 } and u2 () depends only on
{x2 , x3 }.

1. The utility difference on values of x1 given x02 is 5, for both x03 and x13 . More explicitly,
u(x11 , x02 , x03 )  u(x01 , x02 , x03 ) = 5  0 = 5, and u(x11 , x02 , x13 )  u(x01 , x02 , x13 ) = 8  3 = 5.
2. Similarly, the difference on x1 given x12 is 4, for both x03 and x13 .
Though x1 and x3 are CDI of each other, we see that both depend on x2 . For example, the
differences mentioned above for x1 are 5 and 4 given x02 and x12 (respectively), hence the
difference on x1 given fixed x3 depends on the value of x2 . The CDI map for this example
therefore includes an edge (x1 , x2 ) and an edge (x2 , x3 ). The maximal cliques of this graph
are I1 = {x1 , x2 } and I2 = {x2 , x3 }.
To obtain the numeric decomposition, we first define (x01 , x02 , x03 ) as reference values.
Next, from (6), we get u1 (I1 ) = u([I1 ]) = u(x1 , x2 , x03 ) and u2 (I2 ) = u([I2 ])  u([I1  I2 ]) =
u(x01 , x2 , x3 )  u(x01 , x2 , x03 ). The functions involved are given in Table 1. Note that the
fifth and sixth columns are obtained from the appropriate values of the fourth column; for
example, u(x01 , x2 , x3 ) for the line x1 = 1, x2 = 1, x3 = 0 is the value u(x1 , x2 , x3 ) in the line
x1 = 0, x2 = 1, x3 = 0. It is easy to verify that indeed u(x, y, z) = u1 (I1 ) + u2 (I2 ).
The CDI-GAI Theorem provides an operational form of GAI, by establishing a GAI
decomposition that can be obtained from a collection of simple CDI conditions. The assumption or detection of CDI conditions can be performed incrementally, until the MVF is
decomposed to a reasonable dimension. The CDI conditions, in turn, based as they are on
invariance of preference differences, are relatively intuitive to detect. This is particularly
true when the differences carry a direct interpretation, as in the case of willingness-to-pay:
we can check invariance of the monetary amount a buyer is willing to pay to get one outcome
over the other.
The GAI decomposition can be depicted graphically using a clique graph of the CDI
map, that is, a graph whose nodes correspond to maximal cliques of the CDI map. For our
purposes it is convenient to use a particular clique graph called a tree decomposition (or
junction tree). We introduce this well-known concept, and discuss its implications for GAI
representation.
Definition 11 (Tree Decomposition). A tree decomposition for a graph G = (N, E) is
a pair (T, I), where T = (, E) is an acyclic graph, I = {Ii | i  } is a collection of
488

fiGAI Auctions

term
MAP
MMP
MVF
PI
FOPI
MPI
GAI
CDI
CDI map
GAI tree

Meaning
Multiattribute Allocation Problem
Multiattribute Matching Problem
Measurable Value Function
Preferential Independence
First-Order Preferential Independence
Mutual Preferential Independence
Generalized Additive Independence
Conditional Difference Independence
graph whose separation criterion is CDI
tree decomposition of a CDI map

Reference
(Parkes & Kalagnanam, 2005)
(Engel et al., 2006)
(Dyer & Sarin, 1979)
(Keeney & Raiffa, 1976)
(Keeney & Raiffa, 1976)
(Bacchus & Grove, 1995)
cf. (Bacchus & Grove, 1995)
cf. (Gonzales & Perny, 2004)

Table 2: Acronym terms, with references to related literature. Empty references indicate
terms introduced in this work. The terms are arranged according to topics: (i) multiattribute economic problems, (ii) independence relations, (iii) graphical concepts.
#
subsets of N , each corresponding to a node in T , and (i) iI Ii = N , (ii) for each edge
(n1 , n2 )  E, there exists Ii such that n1 , n2  Ii , and (iii) (running intersection) for any
i, j, k  , if j is on the path from i to k in T then Ii  Ik  Ij .
Any graph can be tree-decomposed, typically in more than one way. For example, there
can be a single node in I. The width of a tree decomposition is maxiI |Ii |  1, and the
treewidth of a graph is the minimum width among all its possible tree decompositions.
It is easy to show that any maximal clique of G is contained within some i  I. Therefore, by Theorem 3, a utility function decomposes additively over the subsets I = {Ii | i 
}, where T = (, E) is a tree decomposition of the CDI map. The notion of GAI tree is
adapted from the work of Gonzales and Perny (2004), who introduce GAI graphical models
for the expected utility framework.
Definition 12 (GAI Tree). A GAI tree for u() is a tree decomposition of the CDI map
of u().
We therefore refer to the elements I1 , . . . , Ig of a GAI decomposition as the set I of a
tree decomposition. The next subsection provides a qualitative example of the CDI concept,
its dependency graph, and corresponding GAI tree.
The results of this section lay out the foundations for using GAI decomposition in
multiattribute trading mechanisms. The results generalize additive MVF theory, and justify
the application of methods developed under the expected utility framework (Bacchus &
Grove, 1995; Boutilier et al., 2001; Gonzales & Perny, 2004; Braziunas & Boutilier, 2005)
to representation of monetary value under certainty. Table 2 summarizes the acronym
terminology introduced up to this point.
3.2 Employing GAI in Procurement
In this section we demonstrate the process of obtaining a GAI decomposition from the
collection of CDI conditions. In addition, this example is used to motivate our approach
489

fiEngel & Wellman

in comparison to the work of Parkes and Kalagnanam (2005). Consider a procurement
department that wishes to purchase new hard drives (HD) for the desktops of a large
number of employees. The buyer cares about several characteristics (attributes) of the hard
drives and the particular terms of the procurement contract. Each attribute is listed with a
designated attribute name (the first letter), and its domain. In some cases (e.g., attribute
I) we use arbitrary symbols to represent domain elements, abstracting from the meaningful
interpretation they are assumed to have in context.
RPM (R) 3600, 4200, 5400 RPM
Transfer rate (T) 3.4, 4.3, 5.7 MBS
Volume (V) 60, 80, 120, 160 GB
Supplier ranking (S) 1, 2, 3, 4, 5
Quality rating (Q) (of the HD brand) 1, 2, 3, 4, 5
Delivery time (D) 10, 15, 20, 25, 30, 35 days
Warranty (W) 1, 2, 3 years
Insurance (I) (for the case the deal is signed but not implemented) 1 , 2 , 3
Payment timeline (P) 10, 30, 90 days
Compatibility (C) (with existing hardware and software) 1 , 2 , 3
Consider, for example, the pair of attributes Quality and Warranty. The value of warranty is different for different values of quality; it is higher when the quality is known to
be low, and lower when the quality is known to be high. The two attributes therefore depend on each other. Furthermore, we might expect that Volume complements both Quality
and Warranty. Larger hard drives are more prone to failures, making the quality and warranty more valuable. Similarly, there is interdependence between Supplier ranking and the
contract insurance we buy, and between Supplier ranking and the warranty the supplier provides. Other reasonable dependencies are among Delivery, Insurance, and Payment timeline
(e.g., later delivery requires better insurance, later payment reduces the need for insurance),
and between Volume to the RPM and Transfer rate. Preferences over compatibility may
not depend on any other attribute. The corresponding CDI map is depicted in Figure 1a.
As described in Section 2.1, the utility function decomposes over the elements of a tree
decomposition of the CDI map. Such a tree decomposition is depicted in Figure 1b. In this
example the set of elements of the tree decomposition correspond exactly to the maximal
cliques of the CDI map. In general the tree decomposition might include supersets of the
maximal cliques, but the decomposition can obviously be maintained over the supersets as
well.
Non-additive traders, if required to deal with an additive price space as in auction
AD (Parkes & Kalagnanam, 2005), face an exposure problem, somewhat analogous to traders
with combinatorial preferences that participate in simultaneous auctions (Wellman, Osepayshvili, MacKie-Mason, & Reeves, 2008). Essentially, the problem can manifest itself
490

fiGAI Auctions

(a)

(b)

Figure 1: HD procurement problem: (a) CDI map, (b) GAI tree.
in two ways. One type of exposure occurs from one auction round to another, as in the
following two-attribute example. A sellers conditional preference order over an attribute
a may be optimized at an assignment a1 given that the other attribute b is at b1 , but if
the assignment of b changes, a1 may become arbitrarily suboptimal. Therefore bidding a1
and b1 may result in a poor allocation if the seller is outbid on b1 (and thus must resort to
another assignment) but left winning a1 . The second exposure occurs in any single round
of the auction, if a trader bids on multiple configurations. For example, suppose configurations (a1 , b1 ) and (a2 , b2 ) are both optimal at the current prices. Because bids are collected
independently for each attribute, a trader bidding on both may end up with configuration
(a1 , b2 ), which again, may be arbitrarily suboptimal.
We can prevent exposure on the sellers part by taking simple measures in the auction
design. First, bids are collected anew each round, independently of previous rounds, hence
the first problem is avoided. Sellers can likewise avoid the second problem by limiting
themselves to bid on one configuration per round.
On the buyers side, this solution does not work because we require the buyer to bid
a full set of optimal configurations in each round, in order to ensure the auctions convergence (this becomes clearer in Section 6.1). To prevent buyer exposure, our auction design
structures prices according to the buyers preferences, and the traders bid on clusters of
interdependent attributes. In terms of the example above, if a and b are interdependent
(meaning CDI({a}, {b}) does not hold), we should be able to bid on the cluster ab. If b in
turn depends on c, we need another cluster bc. This is still simpler than a general pricing
structure that solicits bids for the cluster abc. More generally, we find all reasonable CDI
conditions which are correct for the buyer, obtain the corresponding GAI tree decomposition, and solicit bids for clusters of attributes corresponding to these GAI elements. In
Section 4, we describe our auction design in detail, along with an example in Section 5. In
Section 6.1, we prove that the auction terminates with an (approximately) optimal solution
to MAP.

4. GAI Auctions
Before introducing our auction design, we reiterate our model and notation, and provide a
definition that facilitates the auction presentation.

491

fiEngel & Wellman

4.1 Notations and Definitions
In the procurement setting, a single buyer wishes to procure a single good, in some configuration    from one of the candidate sellers s1 , . . . , sm . The buyer has some private
valuation function ub :   %+ , and similarly each seller si has a private cost function, ci .
Both ub () and ci () are MVFs, for which utility differences express differences in willingnessto-pay, as explained in Section 2.1. Assume that the buyers preferences are reflected in a
GAI structure I1 , . . . , Ig . We call an assignment to GAI element Ir a sub-configuration. We
use r to denote the sub-configuration formed by projecting configuration  to element Ir .
Definition 13 (Consistent Cover). A collection of sub-configurations {1 , . . . , g }, where
for each r  {1, . . . , g}, r is an instantiation of Ir , is a consistent cover if for any
r, r "  {1, . . . , g}, and any attribute aj  Ir  Ir! , r and r! agree on the assignment
to aj .
In words, a consistent cover is a collection of sub-configurations from which we can
compose a valid configuration. A collection {1 , . . . , g } which is a consistent cover can
equivalently be considered a configuration, which we denote by (1 , . . . , g ). For example,
consider a good with three attributes: a, b, c. Each attributes domain has two possible
assignments (e.g., {a1 , a2 } is the domain of a). Let the GAI structure be I1 = {a, b}, I2 =
{b, c}. Here, sub-configurations are assignments of the form a1 b1 , a1 b2 , b1 c1 , and so on. The
set of sub-configurations {a1 b1 , b1 c1 } is a consistent cover, corresponding to the configuration
a1 b1 c1 . In contrast, the set {a1 b1 , b2 c1 } is inconsistent.
4.2 The GAI Auction
We define an iterative, descending-price multiattribute auction that maintains a GAI pricing structure: that is, in any round t, there is a price pt (), corresponding to each subconfiguration of each GAI element. The price pt () of a configuration  at round t is
defined in terms of the sub-configuration prices and a global discount term ,
t

p () =

g
"

pt (r )  .

(7)

r=1

Importantly, the elements r may refer to overlapping attributes. Bidders submit subbids on sub-configurations and on the global discount .3 Sub-bids are submitted in each
round and they expire in the next round. A sub-bid in round t for configuration r is
automatically assigned the price pt (r ). The set of full bids of a seller contains all consistent
covers that can be generated from that sellers current set of sub-bids. The existence of a
full bid over a configuration  represents the sellers willingness to accept the price pt () for
supplying .
At the start of the auction, the buyer reports (to the auction, not to sellers) a complete
valuation function ub (). Under GAI, this can be expressed
in decomposed form (6) with
%
local functions (fb,1 , . . . , fb,g ), such that ub () =
r fb,r (r ). The initial prices of subconfigurations are set at some level above the buyers valuations, that is, p1 (r ) > fb,r (r ) for
all r . The discount  is initialized to zero. The auction has the dynamics of a descending
3. The discount term could be replaced with a uniform price reduction across all sub-configurations.

492

fiGAI Auctions

clock auction: at each round t, bids are collected for current prices and then prices are
reduced according to price rules. A seller is considered active in a round if the set of subbids she submitted contains at least one full bid. In round t > 1, only sellers who were
active in round t  1 are allowed to participate, and the auction terminates when no more
than a single seller is active. We denote the set of sub-bids submitted by si by Bit , and the
corresponding set of full bids is
Bit = { = (1 , . . . , g )   | {1 , . . . , g }  Bit }.
In the example of Section 4.1, a seller could submit sub-bids on a set of sub-configurations
such as {a1 b1 , b1 c1 }, and that combines to a full bid on a1 b1 c1 .
The auction proceeds in two phases. In the first phase (A), at each round t the auction
computes a set of buyer-preferred sub-configurations Mt : those sub-configurations that are
part of a configuration which is within " of being profit-maximizing for the buyer at the
current prices. Formally, we first define the buyer profit from a configuration  as4
bt () = ub ()  pt ().
The buyer-preferred set of sub-configurations is then defined by:
Mt = {r | bt ()  max
bt ( " )  ", r = 1, . . . , g}.
!
 

In Section 6.2 we show how Mt can be computed efficiently. We stress that though Mt
is a set of sub-configurations, the criterion for selecting them is based on the profit over
full configurations. Profits over individual sub-configurations are meaningless outside the
context of configurations.
In Phase A, the auction adjusts prices after each round, reducing the price of every
sub-configuration that has received a bid but is not in the buyers preferred set. Let " be
the prespecified price
parameter. Specifically, the Phase A price change rule is
#mdecrement
t
t
applied to all r  i=1 Bi \ M :
"
pt+1 (r )  pt (r )  .
g

[A]

Let M t denote the set of configurations that are consistent covers in Mt :
M t = { = (1 , . . . , g )   | {1 , . . . , g }  Mt }.
The auction switches to Phase B when all active sellers have at least one full bid in the
buyers preferred set:
i. Bit =   Bit  M t ,= .
[SWITCH]
Let T be the round at which [SWITCH] becomes true. At this point, the auction selects
the buyer-optimal full bid i for each seller si .
i = arg max (bT ()).
BiT

(8)

4. We drop the t superscript in generic statements involving price and profit functions, understanding that
all usage is with respect to the (currently) applicable prices.

493

fiEngel & Wellman

In Phase B, si may bid only on i . Sub-configuration prices are fixed at pT () during this
phase. The only adjustment is to , which is increased in every round by ". By (7), any
increase of  decreases the current price of each of the configurations i . The auction
terminates when at most one seller (if exactly one, designate it si ) is active. The allocation
is determined according to four distinct cases:
1. All sellers drop out in Phase A (i.e., before rule [SWITCH] holds). The auction
terminates with no allocation.
2. All active sellers drop out in the same round in Phase B. Of all the sellers that
dropped in the last round, the auction selects a seller si for which ub (i )  pT (i )
is maximal, and designates that seller as the winner si . With a single winner, the
appropriate case 3 or 4 is applied.
3. The auction terminates in Phase B with a final price above the buyers valuation,
pT (i )   > ub (i ). It is still possible that there is exactly one seller (the winning
seller) whose cost is below the buyers valuation, in which case a trade with positive
surplus is possible. Therefore, the auction offers the winner si an opportunity to
supply i at price ub (i ).
4. The auction terminates in Phase B with a final price pT (i )    ub (i ). This is the
ideal situation, where the auction allocates the chosen configuration and seller at this
resulting price.
Collect a reported valuation, ub () from the buyer;
Set high initial prices, p1 (r ) on each sub-configuration r , and set  = 0;
while not [SWITCH], and at least one active seller do
Collect sub-bids from sellers;
Compute Mt ;
Apply price change by [A];
end
Compute i ;
while more than one active seller do
Increase  by ";
Collect bids on (i , ) from sellers;
end
Implement allocation and payment to winning seller;
Algorithm 1: GAI-based multiattribute auction.
The overall auction is described by high-level pseudocode in Algorithm 1. The role
of Phase A is to guide the traders to their efficient configurations (MMP solutions), by
reducing prices on configurations that are chosen by at least one seller but not preferred by
the buyer. The price reduction makes such configurations slightly less attractive to the seller
and slightly more attractive to the buyer. Phase B is a one-dimensional competition over
the profit that remaining seller candidates can provide to the buyer. In the next section
we formalize these notions, and prove that Phase A indeed converges and that Phase B
494

fiGAI Auctions

I1
fb
f1
f2

a1 b1
65
35
35

a2 b1
50
20
20

I2
a1 b2
55
30
25

a2 b2
70
70
25

b1 c1
50
65
55

b2 c1
85
65
110

b1 c2
60
70
70

b2 c2
75
61
95

Table 3: GAI utility functions for the example domain. fb represents the buyers valuation,
and f1 and f2 costs of sellers s1 and s2 .

selects a seller whose efficient configuration yields (approximately) the highest surplus. In
Section 6.2 we discuss the computational tasks associated with the auction.

5. GAI Auction Example
We illustrate the auction with a simple three-attribute scenario, employing the two-element
GAI structure I1 = {a, b}, I2 = {b, c}. Table 3 shows the GAI utilities for the buyer
and the two sellers s1 , s2 . The efficient allocation is (s1 , a1 b2 c1 ): the buyers valuation is
55+ 85 = 140 and the cost of s1 for this configuration (boldface in the table) is 30+ 65 = 95,
hence the surplus is 45. The maximal surplus of the second-best seller, s2 , is 25, achieved
by a1 b1 c1 , a2 b1 c1 , and a2 b2 c2 . We set all initial prices over I1 to 75, all initial prices over
I2 to 90, and " = 8, meaning that price reduction for sub-configurations ("/g) is 4.
For the sake of the example we assume that each seller bids in each round on the configuration that maximizes her profit (price minus cost), with respect to prices of the current
round. In the next section we provide formal definitions and prove incentive properties for
this strategy.
Table 4 shows the progress of Phase A. Initially all configuration have the same price
(165), so sellers bid on their lowest-cost configurationa2 b1 c1 for both (with profit 80 to s1
and 90 to s2 )realized by sub-bids on a2 b1 and b1 c1 . M1 contains the sub-configurations
a2 b2 and b2 c1 of the highest value configuration a2 b2 c1 , which yields buyer profit of 10.
As we show in the next section (Lemma 7), this maximum does not change throughout
Phase A. Price is therefore decreased on a2 b1 and b1 c1 . After the price change, the profit
of s1 for a2 b1 c1 is 72, and because she has higher profit (74) on a1 b2 c2 she bids on a1 b2 and
b2 c2 . Now (round 2) their prices go down, reducing the profit on a1 b2 c2 to 66 and therefore
in round 3 s1 prefers a2 b1 c2 (profit 67). Note that at this point the configuration a2 b2 c2
yields profit of 16 to the buyer, which is within " of the maximal buyers profit (-10),
hence b2 c2 is marked to be in M3 .
After the next price change, the configurations a1 b2 c1 and a1 b2 c2 both become optimal
for s1 (profit 66), and the sub-bids a1 b2 , b2 c1 and b2 c2 capture the two. These configurations
stay optimal for another round (5), with profit 62. In round 5 the profit for configuration
a1 b2 c1 is 140  157 = 17, which is within " of maximizing the buyers profit, therefore
the sub-configuration a1 b2 is added to M5 . At this point s1 has a full bid (in fact two full
bids: a1 b2 c2 and a1 b2 c1 ) in M 5 , and she no longer changes her bids because the price of
her optimal configurations does not decrease. Seller s2 however sticks to a2 b1 c1 during the

495

fiEngel & Wellman

t
1

a1 b 1
75

2

75

3

75

4

75

5

75
s2
71

6
7
8
9

I1
a2 b 1
75
s 1 , s2
71
s2
67
s 1 , s2
63
s2
59

71
s2
67

67
, s2

59
s2
55
55
s2
51

a1 b 2
75
75
s1
71
71
s1
67
, s1
67
, s1
67
, s1
67
, s1
67
, s1

a2 b 2
75

75

75

75

75

75

75

75

75


b 1 c1
90
s 1 , s2
86
s2
82
s2
78
s2
74
s2
70
70
s2
66

66
, s2

I2
b 2 c1
90

90

90

90
, s1
90
, s1
90
, s1
90
, s1
90
, s1
90
, s1

b 1 c2
90

b 2 c2
90

90

90
s1
86

86
, s1
86
, s1
86
, s1
86
, s1
86
, s1
86
, s1

90
s1
86
86
86
s2
82
82
s2
78

Table 4: Auction progression in Phase A. Sell bids and designation of Mt (using ) are
shown below the price of each sub-configuration.

first four rounds, switching to a1 b1 c1 in round 5. It takes four more rounds for s2 and Mt
to converge (M9  B29 = {a1 b1 c1 }).
After round 9, the auction sets 1 = a1 b2 c1 (which yields more buyer profit than a1 b2 c2 )
and 2 = a1 b1 c1 . In the second phase, which starts at this point, the sellers compete on the
amount of surplus they transfer to the buyer, whose profit consequently becomes positive.
For the next round (10)  = 8, increased by 8 for each subsequent round. Note that
p9 (a1 b1 c1 ) = 133, and c2 (a1 b1 c1 ) = 90, therefore the profit of s2 at this point is 43. In
round 15,  = 48 meaning p15 (a1 b1 c1 ) = 85 and that causes s2 to drop out because his
profit becomes negative. This ends the auction, and sets the final allocation to (s1 , a1 b2 c1 )
and pT (a1 b2 c1 ) = 157  48 = 109. That leaves the buyer with a profit of 31 and s1 with a
profit of 14.

6. Analysis
We analyze the economic properties of the auction in Section 6.1, and address practical and
computational issues in Section 6.2.
6.1 Economic Properties
We adopt the following assumptions for this discussion:
A1 The optimal (seller, configuration) pair provides non-negative surplus.
A2 ub () is the real utility function of the buyer.
496

fiGAI Auctions

When the optimal solution to MAP (3) provides negative surplus and sellers do not bid
below their cost, the auction terminates in Phase A, no trade occurs, and the auction is
trivially efficient. Therefore Assumption A1 does not cause loss of generality. A2 can be
interpreted as follows: given non-truthful buyer report, our efficiency results below apply
to the face value of the buyers report rather than to the true utility.
6.1.1 Properties of the buyers profit function
For   {1, . . . , g}, we define the (partial) profit from a set of of sub-configurations 
corresponding to  as
"
b ( ) =
(fb,r (r )  p(r )).
r

The functions f come from the GAI breakdown of ub as in (6).
Lemma 4. For any  and its complement ,
b () = b ( ) + b ( )
Proof. From (6) and from the definition of b ( ) we get
"
"
b () =
(fb,r (r )  p(r )) +
(fb,r (r )  p(r )) = b ( ) + b ( ).
r

r

In round 5 of the example in the previous section, the sub-configuration a1 b2 is placed in
M because the configuration a1 b2 c1 is within " of the maximal buyer profit 10. Actually,
at that point not only a1 b2 c1 is added to M t , but also a1 b2 c2 whose buyer profit (23) is
not within " of the maximum. If a1 b2 c2 is later selected as i for some si this could lead to
additional efficiency loss, beyond ". The following lemma bounds this potential loss.
Lemma 5. Let  be a set of configurations, all within " of maximizing profit for a trader 
(buyer or seller) at given prices. Let  = {r |   , r  {1, . . . , g}}. Then any consistent
cover in  is within g" of maximizing profit for  under the same prices.
In particular, if  includes only exactly optimal configurations, any consistent cover will
be exactly optimal as well. The proof (in Appendix B.1) relies on our definition of the GAI
decomposition as a tree decomposition, and uses the partial profit function defined above
along with Lemma 4.
The bound above is tight, in that for any GAI tree and nontrivial domain we can
construct an example set  as above in which there exists a consistent cover whose utility
is exactly g" below the maximal.
As a result we get the following corollary.
Corollary 6.
  M t . bt ()  max
bt ( " )  g"
!
 

497

fiEngel & Wellman

Proof. Apply Lemma 5 for bt : define  as the set of configurations within " of max!  bt ( " ).
Mt , by its definition, serves as  in the lemma. M t is then exactly the set of consistent
covers over , and hence each   M t must be within g" of the optimum max!  bt ( " ).
We now show that, as noted in the example, the maximal profit of the buyer does not
change during Phase A.
Lemma 7. max bt () = max b1 () for any round t of Phase A.
Proof. Assume there exists some  " for which bt+1 ( " ) > bt ( " ). Then necessarily pt+1 ( " ) =
pt ( " )   for some  > 0. The only price change is by Rule [A], meaning that some w  g
t
sub-configurations of  " are not in Mt , and  = w"
g . In that case, by definition of M ,
bt ( " ) < max bt ()  ".


Therefore,
bt+1 ( " ) =  t ( " ) +  =  t ( " ) +

w"
g"
  t ( " ) +
< max bt ().

g
g

This is true for any  " whose profit improves, therefore max bt () does not change
during Phase A, and hence equals its value in round 1.
6.1.2 Straightforward bidding sellers
We now turn our attention to the sellers behavior. We first define the profit function of
seller si by it () = pt ()  ci ().
Definition 14 (Straightforward Bidder). A seller is called a straightforward bidder (SB)
if at each round t she bids on Bit as follows: if max it () < 0, then Bit = . Otherwise
select bti  arg max it (), and set
Bit = {r |   bti , r  {1, . . . , g}}.
Intuitively, SB sellers follow a myopic best response strategy, optimizing profit with
respect to current prices. This approach was termed straightforward by Milgrom (2000)
in the sense that agents bid myopically, rather than strategically anticipating subsequent
price responses.
SB sellers can choose any optimal configuration to bid on; none of the results proved
below is affected by this choice. It is also important to note that SB sellers find their optimal
full configuration bti , rather than optimize each GAI element separately. The configuration bti
is translated to its set of sub-configurations Bit . In order to calculate bti , seller si needs to find
the optimum of her current profit function. In Section 6.2 we show that this optimization
problem is tractable under the assumption that ui (), too, has a compact GAI structure.
The following is an immediate corollary of the definition of SB.
Corollary 8. For SB seller si ,
t,   Bit . it () = max
it ( " ).
!
 

498

fiGAI Auctions

In general, sellers preference structure may not coincide with the auctions price structure. Nevertheless, Corollary 8 holds by definition of SB, because Bit (defined in Section 4.2)
contains a single configuration which is the submitted bid bti . Alternatively, the definition
of SB can be modified, so sellers with GAI preferences consistent with the auctions price
structure can bid on multiple optimal configurations (if such exist). If sellers bid on multiple
configurations, this can speed up convergence. In that case bti denotes a set of submitted
configurations, Bit denotes the respective collection of sub-configurations, and Bit is the set
of consistent covers over Bit . Lemma 5 (with " = 0) entails that Corollary 8 still holds.
However, for simplicity of the analysis we retain Definition 14.
6.1.3 Efficiency given SB
Lemma 9 states that through the price system and price change rules, Phase A leads the
buyer and each of the sellers to their mutually efficient configuration. Formally, we are
interested in maximizing the function i :   %, which represents the surplus ub ()  ci ().
For any prices pt ,
i () = bt () + it ().
Lemma 9. For SB seller si , i is g"-efficient:
i (i )  max i ()  g".


Proof. Configuration i is chosen to maximize the buyers profit out of Bit at the end of
Phase A. Because Bit  M t ,= , a configuration i  M t is available in Bit , hence one
must be chosen to maximize buyers utility. For any , and for any i  Bit , we get from
Corollary 8,
iT (i )  iT (),
and from Corollary 6, we get for any i  M t ,
bT (i )  bT ()  g".
Because i  Bit  M t we can add up the two inequalities and get i (i )  i ()  g", which
is the desired result.
Based on Phase Bs simple role as a single-dimensional bidding competition over the
discount, we next assert that the overall result is efficient under SB, which in turn (Section 6.1.4) proves to be an approximately ex-post equilibrium strategy in the two phases.
Theorem 10. Given a truthful buyer and SB sellers, the surplus of the final allocation is
within (g + 1)" of the maximal surplus.
Proof Sketch: we first establish that the auction must reach Phase B. To do that, we
show that in each round of Phase A, a price of at least one sub-configuration is reduced,
whereas by Lemma 7, max bt () does not change. The latter enforces a lower bound
on how far prices can be reduced within Phase A, hence Phase A must terminate. Because
initial prices are above the buyers valuation, a seller whose surplus (MMP solution) is
positive cannot drop during that phase, so using Assumption A1 we show that the only way
499

fiEngel & Wellman

for Phase A to terminate is by reaching condition [SWITCH]. Next, we show that for any
two sellers, the surplus of the first to drop from the auction cannot be significantly higher
than that of the one who stayed longer. This ensures that the winning seller is the efficient
one, or one whose MMP surplus is almost maximal, and from Lemma 9 the auction must
obtain (almost) all of that surplus. The full proof is given in Appendix B.2.
The bound guaranteed by Theorem 10 is a worst-case bound, and as shown experimentally in the following sections the auction typically achieves efficiency closer to the optimum.
In the example of Section 5, the difference in the efficiencies of the two sellers is lower than
the potential efficiency loss (as (g + 1)" = 24). However, for that instance it is still guaranteed that s1 wins, either with the efficient allocation, or with a1 b2 c2 which provides a
surplus of 39. The reason is that these are the only two configurations of s1 with surplus
within g" = 16 of the solution to MMP(b, s1 ), hence by Lemma 9 one of them must be chosen as 1 . Both of these configurations provide more than " surplus over s2 s most efficient
configuration, and this is sufficient in order to win in Phase B.
The bound of Theorem 10 can be improved when the CDI map contains disconnected
components. For example, when a fully additive decomposition (as assumed in previous
literature) does exist, the CDI map contains a disconnected component for each attribute.
To take advantage of this disconnectedness we create a separate tree decomposition for
each disconnected components. The definition of M has to be adapted to apportion "
proportionally across the disconnected trees. Formally, we redefine Mt as follows.
Definition 15 (Buyers Preferred Set). Let G be comprised of trees G1 , . . . , Gh . Let
j denote the projection of a configuration  on the tree Gj , and gj the number of GAI
elements in Gj . Similarly, j denotes the projection of  on Gj . Define
"
t "
, r  Gj }.
Mtj = {r | bt (j )  max

(
)

g
j
j
b
g
j! j
The buyers preferred set is given by Mt =

#h

t
j=1 Mj .

Let ej = gj  1 denote the number of edges in Gj . We define a connectivity parameter,
e = maxj=1,...,h ej . It turns out that e + 1 can replace g in the approximation results. The
first step is to replace Corollary 6 with this tighter bound on the optimality of configurations
in M t .
Corollary 11.
  M t . bt ()  max
bt ( " )  (e + 1)"
!
 

Proof. We apply Lemma 5 for each Gj , but with gj g" instead of ", hence any consistent cover
over Mtj is within gj g" gj of maxj! j bt (j" ). From Lemma 4, we get that any consistent
%
cover over Mt (meaning any configuration in M t ) is within hr=1 gj g" gj of max!  bt ( " ).
%
As e + 1 = maxj=1,...,h gj , this is bounded by g" hr=1 gj (e + 1) = "(e + 1).
We can now obtain a tighter efficiency result.
Theorem 12. Given a truthful buyer and SB sellers, the surplus of the final allocation is
within (e + 2)" of the maximal surplus.
500

fiGAI Auctions

In the fully additive case this loss of efficiency reduces to 2". On the other extreme,
if the CDI map is connected then e + 1 = g, reducing Theorem 12 to Theorem 10. If we
do not assume any preference structure for the buyer, meaning that the CDI map is fully
connected, then e = 0 and the efficiency loss is again proportional to ".
6.1.4 Sellers incentives to use SB
Following Parkes and Kalagnanam (2005), we relate our auction to the Vickrey-ClarkeGroves (VCG) mechanism to establish incentive properties for the sellers. In the one-sided
multiattribute VCG auction, the buyer reports valuation ub , the sellers report cost functions
ci , and the buyer pays the sell-side VCG payment to the winning seller.
Definition 16 (Sell-Side VCG Payment). Let (  , i ) be an optimal solution to MAP.
Let (, i) be the best solution to MAP when i does not participate. The sell-side VCG
payment is
VCG(ub , ci ) = ub (  )  max(0, ub ()  ci ()).
It is well known that truthful bidding is a dominant strategy for sellers in the one-sided
VCG auction. Parkes and Kalagnanam (2005) showed that the maximal regret for buyers
from bidding truthfully in this mechanism is ub (  )  ci (  )  (ub ()  ci ()), that is, the
marginal product of the efficient seller.
As typical for iterative auctions, the VCG outcome is not exactly achieved, but the
deviation is bounded by the minimal price change.
Definition 17 (-VCG Payment). A sell-side -VCG payment for MAP is a payment p
such that
VCG(ub , ci )    p  VCG(ub , ci ) + .
When payment is guaranteed to be -VCG, sellers can affect their payment only within
that range, hence their gain from falsely reporting cost is bounded by 2.
Lemma 13. When sellers are SB, the GAI auction payment is sell-side (e + 2)"-VCG.
In the example of Section 5, the profit of the winner (14) is less than " below his VCG
profit 20. The proof (in Appendix B.4) also covers Case 3 in the allocation options of
Section 4.2, in which we force the payment to equal ub (i ).
We are now ready for our final result of this section, showing that the approximately
efficient outcome guaranteed by Theorem 12 is achieved in an (approximate) ex-post Nash
equilibrium.
Theorem 14. SB is a (3e + 5)" ex-post Nash equilibrium for sellers in the GAI auction.
That is, sellers cannot gain more than (3e + 5)" by deviating from SB, given that other
sellers follow SB.
In order to exploit even this bounded potential gain, sellers need to know, for a given
configuration in M t , whether it was explicitly selected as approximately optimal for the
buyer, or it is a combination of sub-configurations from approximately optimal configurations. It seems highly unlikely for sellers to have such information. They are more likely to
lose if they do not bid on their myopically optimal configurations.
501

fiEngel & Wellman

6.2 Computation and Complexity
The advantage of GAI auctions over an additive auction such as AD (Parkes & Kalagnanam,
2005) is in economic efficiency: by accommodating expressive bidding, the efficiency results
are with respect to a more accurate utility function. In contrast, the key advantage with respect to an auction that does not employ preference structures, such as auction NLD (Parkes
& Kalagnanam, 2005), is in computational efficiency. The property we show in this section
is that all computations are exponential only in the size of the largest GAI element, rather
than in |A|. In particular, the size of the price space the auction maintains is equal to the
total number of sub-configurations. This number is exponential in the treewidth (plus one)
of the original CDI map.5 To ensure computational tractability, one can define a priori a
constant C, and force the treewidth of the CDI map to be bounded by C by ignoring some of
the interdependencies. This is still much better than using an additive representation that
ignores all interdependencies. The constant represents a tradeoff between economic and
computational efficiency; a larger C supports a more accurate preference representation,
but the GAI elements may be larger.
!
#
For the purpose of computational analysis, let I = gr=1 aj Ir D(aj ), that is the collection of all sub-configurations. Since M t grows monotonically with t, nave generation
of the best outcomes sequentially might end up enumerating significant portions of the
domain. Fortunately, this enumeration can be avoided, and the complexity of this computation (as well as the optimization performed by the seller) grows only with |I|, that is, no
computation depends on the size of the exponential domain.
Theorem 15. The computation of Mt can be performed in time O(g|I|2 ). Moreover, the
total time spent on this task throughout the auction is O(g|I|(|I| + T )).
We obtain a bound on T , the number of rounds of Phase A, by comparing the sum of
prices of all sub-configurations in rounds 1 and T .
Theorem 16. The number of rounds required by the auction is bounded by
"
g
T 
p1 (r ) .
"
r I

%
i
Proof. Let i =
r I p (r ) (the sum of prices of all sub-configurations in round i).
i
Assume that  < 0 for some 1  i  T . Then because ub ()  0, there must exist   
for which bi () > 0. Because we chose initial prices such that for all   , b1 () < 0,
this contradicts Lemma
T  0, hence the sum of prices cannot be reduced
% 7. Therefore,
1
1
by more than  = r I p (r ) throughout the auction. Also, in each round at least one
price is reduced by g" . This leads to the required result.
This bound is rather looseits purpose is to ensure that the number of rounds does
not depend on the size of the non-factored domain. It depends on the number of subconfigurations, and on the result of dividing the initial price by the minimum price decrement. Usually Phase A converges much faster. Let the initial negative profit chosen by
the auctioneer be m = max b1 (). In the worst case, Phase A needs to run until
5. The use of the term treewidth is subject to using an optimal tree decomposition.

502

fiGAI Auctions

  . b () = m. This happens for example when r  I. pt (r ) = fb,r (r ) + m
g . That
implies that the closer the initial prices reflect the buyers valuation, the faster Phase A
converges. One extreme choice is to set p1 (r ) = fb,r (r ) + m
g . That would make Phase A
redundant, at the cost of full initial revelation of the buyers valuation (Section 2.3). Between this option and the other extreme, which is ,   I. p1 () = p1 (), the auctioneer
has a range of choices to determine the right tradeoff between convergence time and information revelation. In the example of Section 5, the choice of a lower initial price for the
domain of I1 provides some speedup by revealing a harmless amount of information. In our
simulations below, we also set constant initial prices within each GAI element.
Furthermore, many domains have natural dependencies that are mutual to traders, in
which case the price structure used by the auction may also accommodate sellers preference
structures. If so, sellers can bid on multiple equally profitable configurations in each round,
thus speeding up convergence, as discussed above in Section 6.1.
We also consider computational complexity of the SB strategy for sellers.
Theorem 17. Let b denote the treewidth of the CDI map of ub (), and let i denote the
treewidth of the CDI map of ui (). The optimization of ui ()  p() takes time exponential
in b + i in the worst case.
Proof. Consider the graph G which includes the union of the edges of the two CDI maps.
The treewidth of G is b + i in the worst case. By definition, the price function p() is
decomposed according to ub (), hence ui ()  p() decomposes according to the additive GAI
factors of ui () and ub (). Therefore, for any pair of attributes x and y which have a mutual
factor in ui ()  p(), there is an edge x, y in G. It is well known that the complexity of
combinatorial optimization is exponential only in the treewidth of such graphfor example,
using cost networks (Dechter, 1997).
Of potential concern may be the communication cost associated with the descending
auction style. The sellers need to send their bids over and over again at each round. A
simple change can be made to avoid much of the redundant communication: the auction
can retain sub-bids from previous rounds on sub-configurations whose price did not change.
Because combinations of sub-bids from different rounds can yield suboptimal configurations,
each sub-bid should be tagged with the number of the latest round in which it was submitted,
and only consistent combinations from the same round are considered to be full bids. With
this implementation sellers need not resubmit their bid until a price of at least one of its
sub-configurations has changed.
To summarize, GAI auctions are shown to perform well on the criteria mentioned in Section 2.3: they achieve approximate efficiency given reasonable incentive properties, they are
expressive enough to accommodate preferences with interdependencies among attributes,
they are tractable when the maximal size of GAI clusters is reasonably bounded, and they
do not require full revelation of utility. Performance on this last criterion is quantified in
the experimental part of the paper.

7. Experimental Design
The main idea behind GAI auctions is to improve efficiency over auctions that assume
additivity, when preferences are not additive. However, (given a fixed ") the theoretical
503

fiEngel & Wellman

efficiency guarantee of GAI auctions depends on e, the connectivity parameter of the GAI
tree. This suggests a tradeoff: complex models more accurately represent true utility, but
can increase approximation error due to higher connectivity. An obvious question is whether
more accurate preference modeling is indeed more efficient, and in particular, whether
GAI auctions are more efficient than additive auctions, given that the preferences are not
additive. To address the question experimentally, we assume that the buyers preferences
have some GAI structure, and compare the performance of GAI auctions that model this
structure with the performance of auctions that are restricted to an additive representation.
For the latter, we use an instance of GAI auction in which the pricing structure is additive,
and name it the additive approximating auction (AP). This auction is similar in principle
to auction AD (Parkes & Kalagnanam, 2005).6 To the best of our knowledge, AD is the
only proposed instance of a surplus-maximizing multiattribute auction based on additive
preferences, besides those that require full revelation of the buyers utility. In all of the
experiments, sellers employ SB strategies.
In Section 7.1 we describe how random GAI utilities are drawn, and in Section 7.2 we
extend the scheme to generate GAI utility functions that exhibit additional structure. In
Section 7.3 we show how we obtain an additive approximation of these random functions,
allowing us to simulate auction AD. The results of the simulations are presented in Section 8.
7.1 GAI Random Utility
We performed simulations using randomly generated utility functions representing the
buyers value function and sellers cost functions. Our random utility generation procedure follows the utility elicitation procedure suggested by Braziunas and Boutilier (2005),
and uses a two-step process: first we create local utility functions over each GAI element,
normalized to the range [0, 1]. Next, we draw scaling constants that represent the relative
weight of each local function in the overall utility.
More formally, let ur (Ir ) = u([Ir ]) denote a local utility function over Ir , each normalized
to [0, 1]. Next, let fr (Ir ) be defined according to the GAI functional form of Eq. (6), with
u([Ir ]) replaced with ur (Ir ), hence
f1 = u1 (I1 ), and
for r = 2, . . . , g,

fr = ur (Ir ) +

r1
"
(1)j
j=1

"
1i1 <<ij <r

ur ([

j
$

Iis  Ir ]).

(9)

s=1

Braziunas and Boutilier (2005) show that for GAI-structured utility, there exist scaling
constants r  [0, 1] such that
g
"
r fr (Ir ).
(10)
u(A) =
r=1

6. Both auctions employ an additive price space that drives bidders to their efficient configurations. AD is
efficient up to ! when the buyer and all the sellers have additive preferences. GAI auctions are !-efficient
given additive buyers preferences, and make no assumption regarding sellers preference. There are
some more structural differences: (i) AD employs more complicated price change rules, in order to allow
sellers to ignore some of the attributes, (ii) discounts can be used in any stage of AD, and the auction
selects a provisional winner at each iteration.

504

fiGAI Auctions

We refer to the functions ur (Ir ) as subutility functions. Note that values of the form
ur ([Iir  Iir! ]) are drawn only once and used in both ur (Ir ) and ur (Iir! ). This representation
lets us draw random GAI functions, for a given GAI tree structure, using the following
steps:
1. Draw random subutility functions ur (Ir ), r = 1, . . . , g in the range [0,1].
2. Compute fr (), r = 1, . . . , g using (9).
3. Draw random scaling constants r , such that
(10).

%g

r=1 r

= 1, and compute u(A) by

The scaling constants represent the importance the decision maker accords to corresponding
GAI elements in the overall decision. The procedure results in utilities that are normalized
in [0, 1]. Finally, for each particular trader we draw mean  and variance , and scale u()
to the range [  ,  + ], resulting in the utility functions ub () and ui () for i = 1, . . . , m.
7.2 Structured Subutility
A subutility function in the model above may represent any valuation over the subspace.
In practice we may often find additional structure within each GAI element. We introduce
two structures which we consider most typical and generally applicable, and we use them
for the simulations, along with completely random local functions.
As we argue in Section 2.1, typical purchase and sale decisions exhibit FOPI (first
order preferential independence), meaning that most or all single attributes have a natural
ordering of quality. For example, hard-drive buyers always prefer more memory, higher
RPM, longer warranty, and so on. To implement FOPI, we let the integer values of each
attribute represent its quality. For example, if a belongs to some GAI element Ir = {a, b},
we make sure that ur (ai , b" )  ur (aj , b" ) for any ai > aj , ai , aj  D(a), and any b"  D(b).
This must of course hold for any attribute a that is FOPI, and any GAI element Ir that
includes a. We enforce the condition after all the values for that GAI element have been
drawn, through a special-purpose sorting procedure, applied between steps 1 and 2 above.
The FOPI condition makes the random utility function more realistic, and in particular
more appropriate to the target application. Once attributes exhibit FOPI, the dependencies
among different attributes are likely to be framed as complements or substitutes. These
concepts are known primarily in the context of combinatorial preferences, that is, preferences
over combinations of distinct items. In the multiattribute framework, two attributes are
complements if an improvement in the value of both is worth more than the sum of the
same improvement in each separately. Two attributes are substitutes if it is the other way
around. These concepts are meaningful only with respect to attributes that are FOPI,
otherwise the notion of improvement is conditional on the value of other attributes.
Definition 18 (Complements and Substitutes). Let u() be a measurable value function over S " . Let a, b  S " , and Z = S " \ {a, b}, and assume that a and b are each FOPI
of the rest of the attributes. Attributes a and b are called complements if for any ai > ai
(ai , ai  D(a)) and any bj > bj (bj , bj  D(b)), and any Z "  D(Z),
u(ai , bj , Z " )  u(ai , bj , Z " ) > u(ai , bj , Z " )  u(ai , bj , Z " ) + u(ai , bj , Z " )  u(ai , bj , Z " ).
505

fiEngel & Wellman

Attributes a and b are substitutes if the inequality sign is (always) reversed.
This relationship between attributes is ruled out under an additive utility function, but
admitted under a weaker independence condition, called mutual utility independence (MUI)
(Keeney & Raiffa, 1976), which implies that the utility function can be either multiplicative
or additive. If it is multiplicative, the utility function can be represented by n singledimensional functions, n scaling constants, and a single parameter k (the MUI-factor) that
controls the strength of complementarity (k > 0) or substitutivity (k < 0) between all
pairs of attributes within a GAI element (for k = 0 the set of attributes is additive).7 For
experimental purposes, we assume that each attribute cluster (GAI element) exhibits MUI,
and that the value of k is the same for all.
In an elicitation procedure, one would normally extract the MUI scaling constants from
a user, and then compute k (Keeney & Raiffa, 1976). For our purposes, we first determine
k according to the relationship we wish to impose on the attributes, and then draw MUI
scaling constants that are consistent with this value. More explicitly, we draw random
scaling constants, and then iteratively modify all the constants, until a set of constants is
found that is consistent with k. The next step is to compute ur (Ir ) according to the MUI
formula (Keeney & Raiffa, 1976). The ur (Ir ) (for all r) are in the range [0, 1], hence at
this point we can proceed with steps 2 and 3 above. Note that in this procedure several
distinct sets of scaling constants are used: the g constants used in step 3 scale the different
GAI elements, whereas the MUI constants, per GAI element, scale the attributes within
the element.
7.3 Additive Approximation
Another issue for experiment design is how the additive auction (AP) behaves in the face
of non-additive buyer preferences, specifically how would it select the approximately buyerpreferred sets of configurations. The approach we took is to come up with an additive
function that approximates the buyers true utility function, and use it throughout the
auction. We are not aware of a better strategy, but do not rule out the possibility that one
exists.
%
A natural approach to generate a linear approximation i fi () for an arbitrary function
ub () is to use linear regression. We define an indicator variable xij for every aij  D(ai ),
and consider any value of an assignment as a data point. For example, the assignment
a1j(1) , . . . , amj(m) creates the following data point:
m
"

"

cij xij = u(a1j(1) , . . . , amj(m) ),

i=1 aij D(ai )

in which the value of the variable xij is 1 if j = j(i) and 0 otherwise. The coefficients cij
result from the regression and represent the values to be used as fi (aij ).
When the problem includes many attributes, it is not possible to consider all the points
in . Under the assumption that a compact GAI representation exists, it is sensible to
expect that we could use fewer data points for the regression. We indeed found that a small
7. We formalize this notion in Appendix D.

506

fiGAI Auctions

random sample from the joint utility yields an approximation as effective as one based on all
the points. More precisely, for the largest domain we tested (25 attributes, each with domain
of size 4) we found that the efficiency of AP does not improve when increasing the number
of sampled points beyond 200. We show a chart supporting this claim in Appendix E. Our
experiments use 300 points for all instances.
This method of comparison probably overestimates the quality of an additive approximation. In general, we would not have the true utility function explicitly when we generate
the approximation. Extraction or elicitation of the utility function is usually the most
serious bottleneck of a multiattribute mechanism. Therefore, the major reason to use an
additive approximation is to reduce the burden of elicitation. Hence in practice we would
try to obtain the additive function directly, rather than obtain the full utility and then approximate it. The result of such process is somewhat unpredictable, because the elicitation
queries may not be coherent: if willingness to pay for a1 depends on the value of b, then
what is the willingness to pay for a1 when we do not know b? We therefore consider our
experimental generation method biased in favor of the additive approximation.

8. Simulation Results
We provide detailed results of our simulation study. Section 8.1 provides and analyses economic efficiency results. Section 8.2 covers the computational study, and results regarding
revelation of private information are provided in Section 8.3.
8.1 Efficiency and GAI Structure
We measure efficiency in terms of percentage of the MAP solution, which is the surplus
achieved by the optimal seller-configuration pair. To evaluate the effect of preference modeling on efficiency, we vary structural parameters of the buyers GAI preferences: the connectivity factor e, and the size  of the largest GAI element. Performance depends on
many additional factors, such as the size of attribute domains, number of sellers, amount of
price decrement ("), and the distribution from which utility functions are drawn. To isolate
the primary structural parameters, we first tested how efficiency varies according to the
choices of these side factors, for several fixed GAI structures with fully random subutility
functions. As a result of these tests, we picked the following parameter values for the rest
of the simulations: all valuations are drawn from a uniform distribution, with buyer mean
set at 500. A mean for each seller is drawn uniformly from [500, 700]. The variance is set
at 200 for all traders. We use the same domain size of 3 or 4 for all attributes, and number
of sellers m = 5. Further explanation of the process leading to these choices is provided in
the full report (Engel, 2008).
In the following experiment we used a roughly fixed GAI structure, with g = 6 elements
and e = 5, (that is, the GAI structure is a tree, not a forest), and " = 24 (meaning reduction
of  = 4 per sub-configuration). We vary the number of attributes by varying the size of each
element. Figure 2a shows the efficiency obtained with respect to , the size of the largest
GAI element. As expected, the size of the GAI elements has negligible, or no effect on the
efficiency of GAI auctions. It has a dramatic effect on the efficiency of AP. When  = 1,
the decomposition is in fact additive and hence AP performs optimally. The performance
then deteriorates as  increases.
507

fiEngel & Wellman

(a)

(b)

Figure 2: Efficiency as a function of: (a) the size of largest GAI element (), given e = 5,
(b) the number of GAI elements (e + 1), given  = 5.
We performed the same test when using utility in which all attributes are FOPI. With
the FOPI restriction, the additive approximation is much more efficient relative to unconstrained random utility. When FOPI applies to a strict subset of the attributes, we would
expect the efficiency of AP to fall somewhere between its efficiency under FOPI and the
unrestricted case. Somewhat surprisingly, imposing FOPI renders the GAI auctions slightly
less efficient. Nevertheless, the additive approximation achieves lower efficiency compared
to the accurate preference modeling, with differences that pass the statistical significance
test (P < 0.01), for   3. Further, note that the performance of GAI auctions can always
be improved using a smaller value of " and  = g" , whereas this hardly improves performance
of AP. With  = 2, a statistically significant difference (with the same confidence level) is
already detected for   2. We used  = 2 hereafter.
The next experiment (Figure 2b) measures efficiency as a function of e, for a given fixed
. We assume connected GAI trees, so e is the number of GAI elements minus one. We
tested structures with e varying from 1 to 10, all elements of size 3 to 5, and  = 5 for
all the structures.8 On a single element, the GAI auction is similar to NLD (Parkes &
Kalagnanam, 2005), which is an auction that assigns a price to every point in the joint
domain. Here e = 0, hence the efficiency of GAI is close to perfect. This structure is on the
other extreme compared to an additive representation, and indeed the performance of AP
is particularly inferior (only 70% efficient).
With more GAI elements, the efficiency of GAI auctions declines at a very slow pace. The
theoretical potential error (e + 2)", is mostly a result of efficiency loss of i for the winning
seller, based on Lemma 5. Such efficiency loss may occur only if each sub-configuration
in i belongs to a configuration that yields the lowest profit allowed in the buyer-preferred
seta particularly rare case. In practice, the loss is closer to e, which is a much smaller
error.
The performance of AP improves as the number of elements grows while their maximal
and average sizes are fixed. Intuitively, changing the structure that way takes it closer to
8. We did not find the particular tree structure to be influential on the results; the final structure used in
the reported results has a maximum of three children per node.

508

fiGAI Auctions

(a)

(b)

Figure 3: (a) Efficiency as a function of k  0 (complements). (b) Efficiency as a function
of k  0 (substitutes).
an additive representation. Under FOPI, we see a similar phenomenon as before. However,
the difference between GAI FOPI and AP FOPI, even for ten elements, is substantial and
statistically significant.
Figures 3a and 3b present efficiency as a function of the MUI-factor k, for complements
and substitutes, respectively. We used a fixed GAI structure with four elements, the largest
of which has four attributes, and imposed the same k on all elements. As expected, the
stronger the complementarity among the attributes, the lower the efficiency of AP, whereas
this relationship does not affect the efficiency of GAI auctions. For the case of substitutes,
in contrast, the additive approximation performs well, as efficiency starts to deteriorate only
for extreme values of k. Very roughly, we can say that when relationship among attributes
(within each GAI element) is limited to (mild) substitutions, it could be a good idea to
use an additive approximation. Unfortunately, our interpretation of the parameter k lacks
quantitative scaling: there is no clear intuition of what the actual numbers mean, beyond
the qualitative classification mentioned above.
To summarize this part, the experimental results show that GAI auctions yield significant efficiency improvement in comparison to an additive auction, on almost all classes of
evaluations. Though the efficiency of an additive auction may come across as relatively
high and perhaps sufficient, such an observation is misleading in several respects. (i) In
large procurement events, 510% efficiency differences translate to large amounts of money.
(ii) The wider efficiency loss of an additive auction (with no theoretical bound) may have
an impact on incentives; SB may no longer be an approximate ex-post Nash equilibrium.
(iii) Efficiency is expected to deteriorate for larger problems with larger GAI elements, and
in particular if FOPI does not hold for many of the attributes. (iv) As argued in Section 7.3, we expect practical additive auctions to perform worse than AP with our tailored
approximation.
8.2 Computational Analysis
The computational tasks required by auction simulations were performed using the algorithms described in Appendix C. These algorithms have been suggested and applied for
509

fiEngel & Wellman

(a)

(b)

Figure 4: Number of rounds as a function of: (a) the size of largest GAI element (), given
e = 5, (b) the number of GAI elements (e + 1), given  = 5 and  = 2.
combinatorial optimization problems before (Dechter, 1997; Nilsson, 1998), therefore the
computational runtime to process a round is not of particular interest to this work. Instead,
we focus on the number of rounds the auction requires. We tested the number of rounds
required by auctions GAI and AP, under fully random and FOPI preferences, varying three
of the parameters:  (size of largest GAI element), e (connectivity), and .
The complexity in terms of number of rounds is shown in Figure 4a (with respect to )
and Figure 4b (with respect to the number of elements). We observe that under FOPI the
GAI auction takes much longer to converge, compared to the case of random preferences.
The reason is that under FOPI, the sellers and the buyers preferences can in general be seen
as opposites: at the same price, and for a specific attribute, the buyer prefers higher quality,
whereas the sellers prefer lower quality (given fixed values for the rest of the attributes),
and everyone agrees on the relative quality of attribute values. The apparent difference in
the growth rate (the FOPI case seems to have a steeper curve) is somewhat misleading: for
 = 8 (not shown) GAI under random preferences is already caught up with the same curve
we see for the FOPI case. The number of rounds, as expected, grows exponentially with
the size of the largest element. However, as observed from Figure 4b, this number does not
grow quickly as a function of the number of elements, supporting the theoretical arguments
of Section 6.2. Note also that the variance chosen for traders preferences is fixed, thus for
a small number of elements the variance over them is wider, resulting in the large number
of rounds required by GAI FOPI in that case.
For AP, the only implication of increasing  is the respective increase in the number
of attributes. As a result, the complexity of AP (not shown) grows very slowly with the
increase in . For the FOPI case, with  = 2, AP takes an average of 481 rounds for  = 1
(6 attributes) and 546 rounds for  = 6 (19 attributes). The numbers are slightly higher for
random preferences (523 to 628).
For high-dimensional multiattribute auctions, we expect that participation would typically be automated through software bidding agents (Wellman, Greenwald, & Stone, 2007).
Under these circumstances, an auction taking up to thousands of rounds should not cause
a concern. However, if for some reason rounds are expensive, we might reconsider adopt-

510

fiGAI Auctions

Figure 5: Efficiency as a function of the number of rounds.
ing additive auctions, and sacrifice efficiency in order to decrease the number of rounds.
Alternatively, we could keep using GAI auctions and increase " (and with it ). The final
experiment compares these two alternatives. We vary the level of ", in order to view efficiency as a function of the number of rounds (Figure 5). The GAI structure used for this
experiment has e = 5 and  = 5.
As evident from the chart, in most cases GAI achieves better efficiency even for a fixed
number of rounds. The only exception is when the budget of rounds is very small (under
200), and FOPI holds. In such case we need to pay with more rounds in order to get the
higher efficiency.
The total computation time, carried out by a GAI auction with 10 elements,  = 5,
d = 3,  = 2, and the rest of the parameters fixed as above, is around 11 seconds on
average, using an Intel Dual Core (2.00 Ghz) CPU, with 2048 MB RAM.
8.3 Information Revelation
A key difference between the mechanism proposed here and most previous literature is in
the extent to which the buyer is required to reveal preference information. In GAI auctions,
the buyer does not need to reveal all of its private preference information up front. Of
course, the price changes do reveal some of the buyers information. Another experimental
question is therefore whether this mechanism significantly reduces the overall amount of
information revealed by the buyer.
PK study information revelation by both the buyer and the seller, under an additivity
assumption. When the utility function is additive the amount of information revealed can
be measured in terms of constraints on the linear weights. Sellers can infer bounds on the
buyers set of weights, and the amount of information hidden from them is represented by
the fraction of the simplex that satisfies those constraints. This simplex analysis is not
possible for GAI utilities. We suggest an alternative geared towards the kind of information
revealed by the GAI auctions.
In GAI auctions, the buyers private information is partially revealed through the selection of the buyers preferred set Mt . The auction does not need to announce this directly;
in general the sellers can infer that a sub-configuration is in Mt only if it received a bid
(usually sellers will observe this only for their own bids), yet its price does not change in the

511

fiEngel & Wellman

next round. We therefore measure exactly thatfor how many sub-configurations  r there
was at least one round t such that  r  Mt  Bit for some i. More specifically, we define such
a sub-configuration as revealed, and within each GAI element we measure the fraction of
sub-configurations that are revealed by the end of the auction. This measurement overestimates the information that is actually revealed, as sellers can infer some bounds on relative
preferences but not the precise values of the functions fb (). Moreover, it assumes that each
seller observes all bids (meaning that sellers share bid information with each other), an
unrealistic event in practice.
Based on this criterion, GAI auctions reveal on average 15%25% of the buyers preferences when preferences exhibit FOPI, and 10%15% when the subutilities are completely
random. It does not seem to systematically depend on any other parameter we tested. This
validates our claim as to the advantage that GAI auctions promise over second-score types
of auctions.

9. Conclusions
We propose a novel exploitation of preference structure in multiattribute auctions. Rather
than assuming full additivity, or no structure at all, we model preferences using the generalized additive independence (GAI) decomposition. We show how a GAI representation
can be constructed from relatively simple statements of willingness-to-pay, and develop an
iterative auction mechanism directly relying on the decomposition. Our auction mechanism
generalizes the preference modeling employed by Parkes and Kalagnanam (2005), while in
essence retaining their information revelation properties. It allows for a range of tradeoffs
between the accuracy of preference representation and computational complexity of the
auction, as well as the tradeoff between buyer information revelation and the number of
rounds required for convergence.
We performed a simulation study of our proposed multiattribute auctions, compared
to a mechanism that assumes additive preferences. The study validated the usefulness
of GAI auctions when preferences are non-additive but GAI, and allowed us to quantify
the advantages for specific classes of preferences. In general, we found that our design
yields significantly higher economic efficiency in comparison to additive auctions. When
the GAI subutilities exhibit internal structures, such as FOPI, the efficiency loss of additive
approximation is less severe, but in most cases the benefit of an accurate GAI model is still
significant. Using an additive approximation may be a reasonable approach when the GAI
structure is fairly similar to an additive one, or when the auction must terminate within a
small number of rounds.
The tradeoff between expressive and compactness of preference representation is ubiquitous in applications involving preferences. On one hand, we would like to ask users for as
little as possible information; on the other, users preference statements may not be accurate or even meaningful if they cannot express important dependencies. In such problems
it could be useful to experimentally compare the accuracy of GAI and additive representations. The experimental methodologies used in this study, in particular the generation of
random structured utility functions, and finding an additive approximation to GAI functions, may therefore prove applicable to a broader class of preference research problems in
which this tradeoff exists.
512

fiGAI Auctions

Acknowledgments
This work was supported in part by NSF grants IIS-0205435 and IIS-0414710, and the
STIET program under NSF IGERT grant 0114368. Yagil Engel was supported in part by
the Aly Kaufman fellowship at the Technion. We thank anonymous reviewers for many
useful comments and suggestions.

Appendix A. Proofs of Section 3.1
Lemma 2.
Let u(A) be an MVF representing preference differences, and let X, Y, Z
define a partition of A. Then CDI(X, Y | Z) iff
u(A) = u(X 0 , Y, Z) + u(X, Y 0 , Z)  u(X 0 , Y 0 , Z),
for arbitrary instantiations X 0 , Y 0 .
Proof. Let X 0 , Y 0 be arbitrary instantiations.
u(X, Y, Z) = u(X, Y, Z)u(X 0 , Y, Z)+u(X 0 , Y, Z) = u(X, Y 0 , Z)u(X 0 , Y 0 , Z)+u(X 0 , Y, Z)
The second equality holds iff for any X 0 , Y 0 , CDI(X, Y | Z).
Theorem 3 (CDI-GAI Theorem).
Let G = (A, E) be a CDI map for A, and
{I1 , . . . , Ig } a set of overlapping maximal cliques. Then
u(A) =

g
"

fr (Ir ),

(A.1)

r=1

where
f1 = u([I1 ]), and
for r = 2, . . . , g,

fr = u([Ir ]) +

(A.2)

r1
"

"

(1)j

j=1

u([

1i1 <<ij <r

j
$

Iis  Ir ]).

s=1

Proof. We actually prove a somewhat stronger result.
Claim. Let G be a CDI map for utility function u(). Let Q = {C1 , . . . , Cw } denote the set
of maximal cliques of G. Then,
u(A) =

w
"
(1)k+1
k=1

"
1i1 <<ik w

u([

k
$

Cis ]).

(A.3)

s=1

Let G0 = (A, E 0 ) be the complete graph over the nodes of G. By definition of CDI
map, each edge (x, y)  E 0 \ E implies CDI(x, y). We use induction on a series of edge
removals. starting from the graph G0 , at each step i we remove an edge in E 0 \ E to get
0
graph Gi . After the last step i = |E 0 |  |E| and G|E ||E| = G. We prove that the claim
513

fiEngel & Wellman

holds for each graph Gi . Since A is the only clique in G0 , in step 0, Q0 = {A} and the
claim trivially hold. Following the process for step 1 provides intuition as for how the final
decomposition is obtained. We pick a pair of nodes (x, y) such that CDI(x, y). We use the
notation S a = S \ {a} for any S  A and a  A. By Lemma 2 ,
u(A) = u(x, y, Ax,y )

(A.4)

= u(x0 , y, Ax,y ) + u(x, y 0 , Ax,y )  u(x0 , y 0 , Ax,y )
= u([Ax ]) + u([Ay ])  u([Ax  Ay ]).
The set of maximal cliques of G1 is Q1 = {Ax , Ay }. Equation (A.4) shows that (A.3)
holds for Q1 .
For proving the induction step, we assume (A.3) holds at step i, and show they carry
over to step i + 1. Let (x, y) denote the edge removed in step i + 1. Let C1 , . . . , Cd (WLOG)
indicate all the sets in Qi that include both x and y. Similar to (A.4), we observe that
u([C1 ]) = u([C1x ]) + u([C1y ])  u([C1x  C1y ]).

(A.5)

Similarly for any k = 1, . . . , wi  1, and 1 < i1 <    < ik  wi ,
u([

k
$

s=1

Cis  C1 ]) = u([

k
$

s=1

Cis  C1x ]) + u([

k
$

Cis  C1y ])  u([

s=1

k
$

Cis  C1x  C1y ]). (A.6)

s=1

In (A.3) (assumed to hold before this step) each term that includes C1 can be substituted
according to (A.5) or (A.6). Doing so will result in (A.3) holding for the set (Qi \ {C1 }) 
{C1x , C1y }.
We repeat the same operation for C2 , . . . , Cd , and define the resulting collection
Qi+1 = (Qi \ {C1 , . . . , Cd })  {C1x , C1y , . . . , Cdx , Cdy }.
All elements in Qi+1 are subsets of elements in Qi , which are all maximal cliques of Gi . We
now verify the induction property:
 Any element in Qi+1 is a clique in Gi+1 , because the only difference between Gi and
Gi+1 is the removed edge (x, y), and no set in Qi+1 includes both x and y.
 Any such clique in C  Qi+1 is maximal, because it is a subset of a maximal clique
of C  Gi , and either: (i) y  C and C = C \ {x} or (ii) x  C and C = C \ {y}, or
(iii)C = C. x and y are no longer connected so C remains maximal in all cases.
 If M is a maximal clique in Gi+1 , then M  C for some C  Qi . Again either M = C,
or M = C \ {x}, or M = C \ {y}, and in all three cases M is an element in Qi+1 .
This proves the induction step.
As a result, in the last step the decomposition (A.3) holds for the set Q = Q|E0 ||E| ,
which is the set of maximal cliques of G, and hence the claim is proved.
Now define f1 , . . . , fg according to (A.2). By the claim, we get that (A.1) holds.

514

fiGAI Auctions

Appendix B. Proofs of Section 6.1
B.1 Proving Lemma 5
Lemma 5. Let  be a set of configurations, all are within " of maximizing profit for a
trader  at the a given price vector. Let  = {r |   , r  {1, . . . , g}}. Then any
consistent cover in  is within g" of maximizing profit for  at these prices.
We show that given a suboptimal consistent cover  over , we can find a suboptimal
member in , contradicting the premise of the lemma. We do that by traversing the GAI
tree in a depth-first manner, at each step we flip the sub-configurations corresponding to the
elements of the subtree to a set of sub-configurations that have the same source configuration
in  as the parent of that subtree (thus trimming that subtree). This, as we show, results
in another consistent cover that is also sub-optimal. Eventually we obtain a configuration
in  which is still suboptimal.
For that purpose we introduce the following notions:
 The operator  turns a set of sub-configurations, which is a consistent cover, into a
configuration:
{1 , . . . , g } = (1 , . . . , g ).
 Let  be a consistent cover over . The -source of an element r is a configuration
   from which it originated (meaning, r = r ).
 The operation trim replaces some of the sub-configurations of a given configuration 
with a corresponding set of sub-configurations of a different configuration , according
to the following rules. Let i denote the indices of the GAI elements, corresponding to
a subtree in the GAI-tree, whose root is the GAI element Ii . Let  denote a consistent
cover over . The operation -trim over  and i is defined if all the elements in 
corresponding to i have the same -source. Formally, there exists   , such that
r , if r  i then i = i . Now, Let  be the parent of Ii , or an arbitrary element
outside i if i is disconnected from the rest of the graph. Let    be the source of
 . Then
-trim(i , ) = {r | r 
/ i }  {r |r  i }
That is we replace each of r for r  i by the corresponding sub-configuration in ,
so that in the resulting configuration all the elements corresponding to i have the
same -source as the parent of Ii .
Lemma B.1.  " = -trim(, ) is a consistent cover.
Proof. We need to show that any pair of sub-configurations in the set {r | r 
/ i }  {r |r 
i } are consistent, that is they assign the same value to any attribute that appear in both
corresponding GAI elements.
The sub-configurations {r |r  i } are internally consistent because they have a mutual
-source . The sub-configurations {r | r 
/ i } are internally consistent because they
i
are all sub-configurations of . Let r1   and r2 
/ i denote indices of GAI elements,
such that Ir1  Ir2 ,= . Now, Ir1 is in a subtree whose root is Ii , whereas Ir2 is outside
the subtree, so the path between them must go through Ii and its parent . Due to the
515

fiEngel & Wellman

running intersection property of the GAI tree, Ir1  Ir2  Ii  . The corresponding subconfigurations i and  must be consistent because  is also the -source of , hence r1
and r2 must also be consistent.
Lemma B.2. Let  and  be defined as in Lemma 5, and let  denote a consistent cover
in . Then if  " = -trim(i , ) (for some i), then  ( " )   () + ".
Proof. Let    denote the single -source of {r | r  i }. Let  = i and  =
{1, . . . , g} \ . If  ( " ) >  () + ", then (using Lemma 4)
 ( " ) =  (" ) +  (" ) >  ( ) +  ( ) + ",
and because  = " ,

 (" ) >  ( ) + ".

Define the following cover:
 = {r" | r  }  {r | r  }
 is a consistent coveragain (as in Lemma B.1) the only possible intersection between
an element from  " and an element from  is between i (the root of  = i ) and its parent
. The corresponding sub-configurations i" and  must be consistent for the following
argument: i is consistent with  because they appear together in . i" is consistent with
 because they have the same -source by definition of -trim. Hence i and i" assign the
same values to the attributes in Ii  I . Now because i is consistent with  , so must be
i" . We get
 () =  (" ) +  ( ) >  ( ) +  ( ) + " =  () + ".
The last equation follows from the fact that all sub-configurations of  are from . This
contradicts "-optimality of   .
Proof of Lemma 5. Let  1 be a consistent cover over  contradicting the lemma, meaning
 ( 1 )  max  ()  g". We first reorder the GAI elements as 1, . . . , g, according to
the order corresponding to backtracking in Depth-First-Search: that is, starting from the
leftmost leaf, next move to its siblings, next their parent, and in general once all children
of a node Ii are visited, the next element to be visited is Ii . We perform a series of g  1
-trim operations, resulting in a series  1 , . . . ,  g . To do that, we must show that at each
step i the operation -trim(i ,  i ) is valid, that is the sub-configurations corresponding to
i have a mutual -source. If Ii is a leaf, then |i | = 1 hence the elements of i have a
single source. Otherwise,  i is a result of trimming the subtrees of all children of Ii , hence
by definition of -trim they all have the same -source as ii .
Now, consider the resulting  g . We assumed  ( 1 ) < max  ()  g", hence by
applications of Lemma B.2 in each of the g  1 -trim operations, we get  ( g ) <
max  ()  ". The last element  g is such that all its elements have a mutual -source,
meaning  g  . Therefore, we got a contradiction to the "-optimality of .

516

fiGAI Auctions

B.2 Proving Theorem 10
In order to prove Theorem 10 we need several additional claims.
Lemma B.3. The price of at least one sub-configuration must be reduced in every round of
phase A.
Proof. In each round t < T of phase A there exists an active seller i for whom Bit  M t = .
However to be active in round t, Bit ,= . Let   Bit . If r.r  Mt , then   M t by
definition of M t . Therefore there must be r , Mt .
Lemma B.4. The auction must reach phase B.
Proof. By Lemma B.3 some prices must go down in every round of phase A. Lemma 7
ensures a lower bound on how much prices can be reduced during phase A, therefore the
auction either terminates in phase A or must reach condition [SWITCH].
We set the initial prices high such that max b1 () < 0, and then max bt () < 0
during phase A by Lemma 7. By Assumption A2 the efficient allocation (  , i ) provides
positive welfare, that is i (  ) = bt (  ) + it (  ) > 0. si is SB therefore she will leave the
auction only when it (  ) < 0. This can happen only when bt (  ) > 0, therefore si does
not drop in phase A. Because Phase A continues as long as at least one seller is active, the
auction cannot terminate before reaching condition [SWITCH].
Finally, the following lemma states that for any two sellers, the potential surplus of the
first one to drop from the auction cannot be significantly higher than the potential surplus
of the one that stayed longer.
Lemma B.5. If sellers si and sj are SB, and si is active at least as long as sj is active in
phase B, then
i (i )  max j ()  (g + 1)".


Proof. From SB and the definition of phase B, sj drops when  > jT (j ). If si did not
drop before that point then iT (i )    " > jT (j )  ". Because i  M t , we get from
Corollary 6 that,
bT (i ) + iT (i )  max bT () + jT (j )  (g + 1)".


From Corollary 8, jT (j ) = max jT (). Therefore
i (i ) = bT (i ) + iT (i )  max bT () + max jT ()  (g + 1)"  max j ()  (g + 1)".






Theorem 10. Given a truthful buyer and SB sellers, the surplus of the final allocation
is within (g + 1)" of the maximal surplus.
Proof. From Lemma B.4 the auction terminates with an allocation (si , i ). From Lemma
9, the theorem is immediate in case the winning seller si is the efficient seller. Otherwise
the efficient seller is sj who dropped before or with si . The result is now immediate from
Lemma B.5.
517

fiEngel & Wellman

B.3 Proving Theorem 12
We first adapt Lemma 7, Lemma 9, and Lemma B.5 to use e + 1 instead of g.
Lemma B.6. max bt () does not change in any round t of phase A.
Proof. Let G be comprised of trees G1 , . . . , Gh , let j" denote the projection of a configuration
 " on the tree Gj , and let gj denote the number of GAI elements in Gj .
Assume there exists some j" for which bt+1 (j" ) > bt (j" ). Then necessarily pt+1 (j" ) =
t
p (j" )  . For that to happen it must be the case that some w  gj sub-configurations of
t
j" are not in Mtj , and  = w"
g . In that case, by definition of Mj ,
"
bt (j" ) < max bt (j )  gj .
j j
g
Therefore,
bt+1 (j" ) =  t (j" ) +  =  t (j" ) +

w"
gj "
  t (j" ) +
< max bt (j ).
j j
g
g

This is true for any j" whose profit improves, therefore maxj j bt (j ) does not change
during phase A. Now
max bt () = max




h
"

bt (j ) =

j=1

h
"
j=1

max bt (j ).

j j

The last equality holds because the optimal values for disconnected components of the GAI
tree are independent of each other. As a result, max bt () as well does not change during
phase A.
Lemma B.7. For SB seller si , i is (e + 1)"-efficient:
i (i )  max i ()  (e + 1)".


The proof is identical to the proof of Lemma 9, replacing g by e+1 and using Corollary 11
instead of Corollary 6.
Lemma B.8. If sellers si and sj are SB, and si is active at least as long as sj is active in
phase B, then
i (i )  max j ()  (e + 2)".


The proof here too is identical to the proof of Lemma B.5, using Corollary 11 instead
of Corollary 6.
Theorem 12. Given a truthful buyer and SB sellers, the surplus of the final allocation
is within (e + 2)" of the maximal surplus.
Proof. The proof is identical to the proof of Theorem 10, replacing Lemmas 9 and B.5 with
lemmas B.7 and B.8, respectively.

518

fiGAI Auctions

B.4 Lemma 13 and Theorem 14
Lemma 13. When sellers are SB, the GAI auction payment is sell-side (e + 2)"-VCG.
Proof. Trivially, we consider only the winning seller si . In the case that the final price is
above buyers valuation the payment ub (i ) is exactly the VCG payment. We can therefore
assume that the final price is not above the buyers valuation, and the payment to the
winning seller is pT (i )  . Let sj be the second best seller. sj drops before si , when the
discount is   ", hence,
 + " > jT (j ) = max jT ().
(B.1)


From Corollary 6,
ub (i )  pT (i )  max bT ()  (e + 1)".


Therefore (using (B.1) for the second inequality)
pT (i )    ub (i )  max b () + (e + 1)"   <


ub (i )  max bT () + (e + 2)"  max jT ()  ub (i )  max j () + (e + 2)". (B.2)






Bow because sj s survived in the auction until the discount was   ",
  jT (j ) + ".
Meaning:
pT (j )    cj (j )  ".

(B.3)

From Corollary 6
ub (i )  pT (i )  ub (j )  pT (j ) + (e + 1)".
Therefore (using (B.3) for the second inequality)
pT (i )    ub (i )  ub (j ) + pT (j )  (e + 1)"   
ub (i )  (ub (j )  cj (j ))  "  (e + 1)"  ub (i )  max j ()  (e + 2)". (B.4)


Equations (B.2) and (B.4) place the payment pT (i )   within (e + 2)" from si s VCG
payment.
Theorem 14. SB is a (3e + 5)" ex-post Nash equilibrium for sellers in the GAI auction.
That is, sellers cannot gain more than (3e+5)" by deviating from SB, given that other sellers
follow SB.
Let s1 play some arbitrary strategy 1 against SB sellers s2 , . . . , sn . If s1 does not win
she would clearly have done no worse using SB, therefore we assume s1 wins 1 in final price
p and that she gains at least (3e + 5)" from the trade. Let i  2, . . . n. The calculation of
(B.2) assumed nothing on the winning traders strategy, therefore it applies here as well:
p = pT (1 )    ub (1 )  max i () + (e + 2)".


(B.5)

Next, define the following cost function: c1 (1 ) = p  (2e + 3)" and c1 ( " ) = ,  " ,= 1 .
Assume s1 plays SB for c1 .
519

fiEngel & Wellman

Claim. By playing SB assuming cost c1 , s1 is still the winner, and her profit (wrt to c1 ())
is within (2e + 3)" of her profit playing 1 .
Proof. Clearly, s1 bids only on 1 . Let p() denote prices in the end of phase A in the new
 be the final discount.
instance of the auction, let b () denote the buyers profit, and let 
 = 1 (1 ) = p(1 ) c1 (1 ) =
Now assume for a moment that prices reach s1 s limit, that is 
p(1 )  (p  (2e + 3)").
Now (for the inequality, use pT (1 ) = ub (1 )  bT (1 ) and also (B.5)),
 = pT (1 )  p + (2e + 3)" > ub (1 )   T (1 )  (ub (1 )  max i () + (e + 2)") + (2e + 3)"

b


= max i () 


bT (1 )

+ (e + 1)".
(B.6)

Let i denote the configuration chosen for some seller si at the end of phase A in the
new instance. Since i  M T in that instance, we get that bT (i )  bT (1 )  (e + 1)".
Therefore we can modify (B.6) to state,
 > i (i )   T (i ) = pT (i )  ci (i ),

b

(B.7)

meaning that if prices reached the limit of s1 , all the other sellers dropped off. That shows
that s1 wins in the new instance as well. Furthermore, the lowest possible price paid to s1
 = p(1 )  (p  (2e + 3)"), hence that price is at least p  (2e + 3)".
is determined by 
Proof of Theorem 14. From Lemma 13:
p  V CG(c1 , c2 , . . . , cn ) + (e + 2)".
Truthful reporting is a dominant strategy for sellers in one-sided VCG auctions. Therefore
V CG(c1 , c2 , . . . , cn )  V CG(c1 , c2 , . . . , cn ).
With the result of the claim we get
p  p + (2e + 3)"  V CG(c1 , c2 , . . . , cn ) + (3e + 5)".
Therefore by playing 1 , s1 could not have gained more than (3e + 5)" above her worstcase payoff for playing SB with respect to her true cost c1 .

Appendix C. Proofs of Section 6.2
Theorem 15. The computation of Mt can be performed in time O(g|I|2 ). Moreover, the
total time spent on this task throughout the auction is O(g|I|(|I| + T )).
Proof. For simplicity of notations we assume that there is a single (connected) GAI-tree.
The extension to multiple connected components is immediate because each Mjt is computed
separately.
The functions ub and pt have the same GAI form, hence the function bt = ub  pt
has the same GAI form. As have been noted before (Boutilier et al., 2001), functions in
520

fiGAI Auctions

GAI form can be optimized using variable elimination schemes in cost networks (Dechter,
1997). In fact, our GAI structure is already a tree, in which case the optimization is linear
in the size of the domain which is |I|. However, Mt includes sub-configurations of all
configurations within " of max b (). To find it, we must find the maximum of bt , add its
sub-configurations to Mt , then find the best configuration which is not already in M t (that
is, maximal in  \ M t ) and so on. This can be done by the following procedure, adapted
from the work of Nilsson (1998):
1. For i=1,. . . , g:
 Define i = {   | 1 , . . . , i1  Mt and i 
/ Mt }.
 Find  i = arg maxi bt ().
2. The best configuration in  \ M t is   = arg maxi=1,...,g bt ( i ) (which means, a configuration which has at least one sub-configuration not in Mt ).
If bt (  )  max bt ()  ", then each sub-configuration of   that is not already in Mt is
added to Mt . Otherwise, Mt is ready.
The procedure itself performs g optimizations, each takes linear in the size of the domain. This amounts to O(g|I|). Each time this procedure is done, either at least one
sub-configuration is added to Mt , or Mt is ready. Therefore the number of times the
procedure is done per round is bounded by the number of sub-configurations |I| plus one,
giving the O(g|I|2 ) bound. Moreover, Mt is monotonically increasing in the auction. In
each round, we start from the Mt computed in the previous round. Throughout the auction,
each application of the procedure either yields a new sub-configuration in Mt , or terminates
the round, so the total number of times the procedure is performed throughout the auction
is bounded by |I| + T , leading to the overall bound of O(g|I|(|I| + T )).

Appendix D. Relating the MUI condition to Complements and
Substitutes
The definitions for the utility independence (UI) condition and MUI can be found elsewhere
(Keeney & Raiffa, 1976).
Definition 19. A MUI-factor of a set A of MUI attributes is a solution to
1+k =

n
&
(1 + kki ).
i=1

Keeney and Raiffa (1976) (KR) show that there is at most one MUI-factor in addition
to zero (Appendix 6B of their text). This ensures the soundness of the following adaptation
to their MUI representation theorem:9
Theorem D.1. Let A be a set of MUI attributes.
1. If the only MUI-factor of A is zero, then u(A) =

%n

i=1 ki ui (ai ).

9. The theorem is adapted from the book of Keeney and Raiffa (1976), Theorem 6.1, page 289.

521

fiEngel & Wellman

2. Otherwise, let k ,= 0 be a MUI-factor. Then
!n
[kki ui (ai ) + 1]  1
u(A) = i=1
.
k

(D.1)

KR go on to point out that if k > 0 we can define u" (A) = 1 + ku(A), a strategically
equivalent function to u(), and turn (D.1) into a multiplicative representation. This can
be done in a similar fashion for k < 0. Further, they show that if MUI is known to exist,
one elicitation query is sufficient in order to determine whether the form of the function is
additive or multiplicative.
The following relationship allow us to interpret the MUI factor with respect to complements and substitutes. The result generalizes and formalizes an intuition given by KR for
the case of MUI between two attributes.
Theorem D.2. Let A be a set of MUI attributes, such that there is a MUI-factor k ,= 0.
Then k > 0 iff all pairs of attributes in A are complements, and k < 0 iff all pairs of
attributes in A are substitutes.
Proof. The proof is based on the work of Keeney and Raiffa (1976), Theorem 6.1, as explained below.
Assume that u() is normalized such that u(A0 ) = 0. For each attribute a  A, let
a = {a}, and we know U I(a, a). Utility independence of such form leads to the following
functional form: there exist functions f and g such that,
u(A) = f (a) + g(a)u(a, a0 )
We instantiate this form with the assignment a0 and get
u(a0 , a) = f (a) + g(a)u(a0 , a0 ) = f (a)
Hence f (a) = u(a0 , a), and g(a) =
u(A0 ) = 0, we get

u(A)u(a0 ,a)
u(a,a0 )

g(a) =

(this development is done by KR). With

u(A)  u(a0 , a)
.
u(a, a0 )  u(a0 , a0 )

(D.2)

In proof of Theorem 6.1, KR define the MUI-factor as follows:
k=

g(a)  1
u(a0 , a)

The denominator is always positive. Furthermore, as shown by (D.2), when g(a) > 1,
u(A)  u(a0 , a) > u(a, a0 )  u(a0 , a0 ). In particular it means that for any b  a, a and b
are complements, because the inequality holds when holding fixed all attributes in a but b.
Similarly, when g(a) < 1, a and any b  a are substitutes. Putting these pieces together,
we get the desired result.

522

fiGAI Auctions

Figure 6: Efficiency of AP as a function of the number of sampling points used to devise
the additive approximation.

Appendix E. Optimal Regression Using a Small Sample
We show an experiment supporting the claim in Section 7.3: a larger set of sampling
points than the one we used for the linear regression of the utility function cannot improve
the efficiency of AP. Figure 6 shows the efficiency of AP as a function of the number of
sampling points used, for the largest domain we used in the experiments: 25 attributes with
d = 4 (e = 9 and  = 5). Similar results were shown for other distributions and for FOPI
preferences. This chart is a result of 150 experiments for each of 10 points on the x-axis,
the largest number of tests we used.

References
Bacchus, F., & Grove, A. (1995). Graphical models for preference and utility. In 11th
Conference on Uncertainty in Artificial Intelligence, pp. 310, Montreal.
Beil, D. R., & Wein, L. M. (2003). An inverse-optimization-based auction for multiattribute
RFQs. Management Science, 49, 15291545.
Bichler, M. (2001). The Future of e-Markets: Multi-Dimensional Market Mechanisms. Cambridge University Press.
Boutilier, C., Bacchus, F., & Brafman, R. I. (2001). UCP-networks: A directed graphical
representation of conditional utilities. In 17th Conference on Uncertainty in Artificial
Intelligence, pp. 5664, Seattle.
Branco, F. (1997). The design of multidimensional auctions. RAND Journal of Economics,
28 (1), 6381.
Braziunas, D., & Boutilier, C. (2005). Local utility elicitation in GAI models. In 21st
Conference on Uncertainty in Artificial Intelligence, pp. 4249, Edinburgh.
Che, Y.-K. (1993). Design competition through multidimensional auctions. RAND Journal
of Economics, 24 (4), 668680.
David, E., Azoulay-Schwartz, R., & Kraus, S. (2002). An English auction protocol for multiattribute items. In Agent Mediated Electronic Commerce IV: Designing Mechanisms
and Systems, Vol. 2531 of Lecture Notes in Artificial Intelligence, pp. 5268. Springer.
523

fiEngel & Wellman

Debreu, G. (1959). Topological methods in cardinal utility theory. In Arrow, K. J., Karlin,
S., & Suppes, P. (Eds.), Mathematical Methods in the Social Sciences, pp. 1626.
Stanford University Press.
Dechter, R. (1997). Mini-buckets: A general scheme for generating approximations in automated reasoning. In 15th International Joint Conference on Artificial Intelligence,
pp. 12971303, Nagoya.
Dyer, J. S., & Sarin, R. K. (1979). Measurable multiattribute value functions. Operations
Research, 27, 810822.
Engel, Y. (2008). Structured Preference Representation and Multiattribute Auctions. Ph.D.
thesis, University of Michigan, Ann Arbor, MI.
Engel, Y., & Wellman, M. P. (2007). Generalized value decomposition and structured
multiattribute auctions. In 8th ACM Conference on Electronic Commerce, pp. 227
236, San Diego.
Engel, Y., Wellman, M. P., & Lochner, K. M. (2006). Bid expressiveness and clearing
algorithms in multiattribute double auctions. In 7th ACM Conference on Electronic
Commerce, pp. 110119, Ann Arbor.
Fishburn, P. C. (1967). Interdependence and additivity in multivariate, unidimensional
expected utility theory. International Economic Review, 8, 335342.
Gonzales, C., & Perny, P. (2004). GAI networks for utility elicitation. In 9th International
Conference on Principles of Knowledge Representation and Reasoning, pp. 224234,
Whistler, BC.
Hyafil, N., & Boutilier, C. (2006). Regret-based incremental partial revelation mechanisms.
In 21st National Conference on Artificial Intelligence, pp. 672678, Boston, MA.
Keeney, R. L., & Raiffa, H. (1976). Decisions with Multiple Objectives: Preferences and
Value Tradeoffs. Wiley.
Koppius, O. (2002). Information Architecture and Electronic Market Performance. Ph.D.
thesis, Erasmus University, Rotterdam, The Netherlands.
Krantz, D. H., Luce, R. D., Suppes, P., & Tversky, A. (1971). Foundations of Measurement,
Vol. 1. Academic Press, New York.
Milgrom, P. (2000). Putting auction theory to work: The simultaneous ascending auction.
Journal of Political Economy, 108, 245272.
Nilsson, D. (1998). An efficient algorithm for finding the M most probable configurations
in probabilistic expert systems. Statistics and Computing, 8 (2), 159173.
Parkes, D. C., & Kalagnanam, J. (2005). Models for iterative multiattribute procurement
auctions. Management Science, 51, 435451.
Pearl, J. (1988). Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference. Morgan Kaufmann.
Robu, V., Somefun, D. J. A., & La Poutre, J. A. (2005). Modeling complex multi-issue negotiations using utility graphs. In 4th International Joint Conference on Autonomous
Agents and Multi-Agent Systems, pp. 280287, Utrecht.
524

fiGAI Auctions

Sandholm, T. (2007). Expressive commerce and its application to sourcing: How we conducted $35 billion of generalized combinatorial auctions. AI Magazine, 28 (3), 4558.
Sandholm, T., & Suri, S. (2006). Side constraints and non-price attributes in markets.
Games and Economic Behavior, 55, 321330.
von Neumann, J., & Morgenstern, O. (1944). Theory of Games and Economic Behavior.
Princeton University Press.
Von Winterfeldt, D., & Edwards, W. (1986). Decision Analysis and Behavioral Research.
Cambridge University Press.
Vulkan, N., & Jennings, N. R. (2000). Efficient mechanisms for the supply of services in
multi-agent environments. Decision Support Systems, 28, 519.
Wellman, M. P., Greenwald, A., & Stone, P. (2007). Autonomous Bidding Agents: Strategies
and Lessons from the Trading Agent Competition. MIT Press.
Wellman, M. P., Osepayshvili, A., MacKie-Mason, J. K., & Reeves, D. M. (2008). Bidding strategies for simultaneous ascending auctions. B. E. Journal of Theoretical
Economics (Topics), 8 (1).

525

fi