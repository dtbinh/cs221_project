Journal of Artificial Intelligence Research 49 (2014) 79-109

Submitted 07/13; published 01/14

Closure and Consistency In Logic-Associated Argumentation
Phan Minh Dung
Phan Minh Thang

dung.phanminh@gmail.com
thangfm@gmail.com

Computer Science and Information Management Program
Asian Institute of Technology
GPO Box 4, Klong Luang, Pathumthani 12120, Thailand

Abstract
Properties like logical closure and consistency are important properties in any logical
reasoning system. Caminada and Amgoud showed that not every logic-based argument
system satisfies these relevant properties. But under conditions like closure under contraposition or transposition of the monotonic part of the underlying logic, ASPIC-like systems
satisfy these properties. In contrast, the logical closure and consistency properties are not
well-understood for other well-known and widely applied systems like logic programming or
assumption based argumentation. Though conditions like closure under contraposition or
transposition seem intuitive in ASPIC-like systems, they rule out many sensible ASPIC-like
systems that satisfy both properties of closure and consistency.
We present a new condition referred to as the self-contradiction axiom that guarantees
the consistency property in both ASPIC-like and assumption-based systems and is implied
by both properties of closure under contraposition or transposition. We develop a logicassociated abstract argumentation framework, by associating abstract argumentation with
abstract logics to represent the conclusions of arguments. We show that logic-associated
abstract argumentation frameworks capture ASPIC-like systems (without preferences) and
assumption-based argumentation. We present two simple and natural properties of compactness and cohesion in logic-associated abstract argumentation frameworks and show that
they capture the logical closure and consistency properties. We demonstrate that in both
assumption-based argumentation and ASPIC-like systems, cohesion follows naturally from
the self-contradiction axiom. We further give a translation from ASPIC-like systems (without preferences) into equivalent assumption-based systems that keeps the self-contradiction
axiom invariant.

1. Introduction
Properties like logical closure and consistency are important properties in any logical reasoning system. Caminada and Amgoud (2007) showed that not every logic-based argument
system satisfies these relevant properties. But under conditions like closure under contraposition or transposition of the monotonic part of the underlying logic,1 these properties
are fulfilled for ASPIC systems. Prakken (2010) and later Modgil and Prakken (2013) have
developed this idea further for ASPIC+, a rich and complex logic-based argumentation
system.
The following example illustrates that there are many sensible ASPIC or assumptionbased systems that satisfy both properties of closure and consistency but are neither closed
under contraposition nor under transposition.
1. A precise definition of closure under contraposition and transposition is given in section 4.
c
2014
AI Access Foundation. All rights reserved.

fiDung & Thang

Example 1 Consider an ASPIC-like system AS = (RS, RD) where
1. RD = RD0  RD1 is a set of defeasible rules and
(a) RD0 consists of two defeasible rules
d1 : p  f

d2 : b  f

representing defaults birds fly, penguins dont and
(b) RD1 consists of a single defeasible rule
th  bh
representing the default Thais normally have black hair
2. RS = RS0  RS1 is a set of strict rules and
(a) RS0 consists of three strict rules
p

pb

p  Oj(d2 )

where Oj(d2 ) means that rule d2 is not applicable,
(b) RS1 consists of a single strict rule
 th
It is not difficult to see that AS satisfies both properties of closure and consistency.
Even though AS is neither closed under contraposition nor under transposition, there
is no reason to rule out systems like AS from consideration as long as they capture our
intuition in the concerned applications. In fact, systems like AS often offer a more natural representation of the concerned applications than those closed under contraposition or
transposition. To illuminate this point, imagine another ASPIC-like system AS  containing
the strict and defeasible rules in AS but is closed under contraposition.2
Suppose we are interested in the colour of the hair of the concerned Thai individual.
Consider the argument A :  th  bh. Let B1 :  p  f and B2 :  p  b  f . Let
CN be the consequence operator defined by the strict rules3 in AS  . From f  CN ({f, bh}),
it follows from the closure under contraposition property of CN, bh  CN ({f, f }). Therefore there is an argument B with conclusion bh that contains B1 , B2 as subarguments. B
hence attacks A. As B is attacked (by undercut) by argument C :  p  Oj(d2 ) at B2
and there is no attack against C, A is accepted in the grounded extension. But the set {A}
itself is not admissible. In other words, to draw a conclusion about the hair colour of Thais,
the system needs to resolve a completely unrelated controversy about the flying capabilities
of penguins and birds.
2. For example, by adding to AS absurdity rules representing the proposition inconsistency implies
every thing, of the form a, a  l where a is an atom appearing in RS  RD and l is a literal over this
set of atoms. It is not difficult to see that AS  is closed under contraposition (see appendix of section 1).
3. A precise definition is given in definition 1.

80

fiClosure and Consistency In Logic-Associated Argumentation

In general, the condition of closure under contraposition creates an attack against any
defeasible argument from any inconsistency in ASPIC systems. In other words, if the systems happen to contain knowledge about several causally independent domains like about
the flying penguins and the hair colour of Thais, closure under contraposition will interlink
them and making it necessary to resolve all possible inconsistencies in all parts of the systems before being able to answer any query, independent of whether these inconsistencies
are causally related to the query or not.4
In contrast, in argument systems like AS, there is no attack against A and {A} is
admissible. Controversy about the flying capabilities of penguins do not have any effect on
the acceptance of A.
Though closure under transposition avoids the problem of conflict propagation, it is not
adopted in many well-known and practical systems as an indiscriminate application of it
could lead to counter-intuitive result in many cases. For example, consider a simplified
version of example birds fly penguins dont in aspic+ whose set of strict rules is the
closure under transposition of the following strict rules:
app, b  f

p  f

pb

p  app

where app is an ordinary premise with app = app.
Therefore the rule app  p is included in the set of strict rules.
Suppose the knowledge base only consists of the ordinary premise app stating that the
default birds fly is applicable.
Without any further information, the only two arguments are: A  app and B 
A  p.
Accepting ordinary premise app simply says that there is no information at all why the
default birds fly should not be applied. It does not say anything about penguin. But closure
under transposition implies that there is definitely no penguin around (a rather slippery way
to make a conclusion).
In the context of logic programming, the rule app  p is also rather unnatural as app
is viewed as an assumption and  is the explicit negation operator whose intuitive reading
is that an explicit negation of an assertion should be based on some hard evidence, not
on another assumption (Gelfond & Lifschitz, 1990). 
In contrast to ASPIC systems, not much research has been done to study the logical
closure and consistency of the semantics of other well-known and widely applied systems
like logic programming or assumption based argumentation (Gelfond & Lifschitz, 1988;
Lifschitz, 1999; Bondarenko, Dung, Kowalski, & Toni, 1997). Properties like closure under
transposition or contraposition are not embraced in logic programming or assumption based
argumentation. Prakken (2012) has observed that assumption-based argumentation yields
unintuitive argument with unwanted conclusion if the inference rules satisfy the transposition property. It is hence natural to ask
whether there are conditions that are implied by both conditions of closure under contraposition and transposition but still guaranteeing the important properties of logical closure
and consistency, and
4. Pollock (1995) and Wu (2012) have also pointed out that classical propositional proof systems propagate
conflicts throughout the knowledge bases to unrelated parts.

81

fiDung & Thang

whether the logical closure and consistency properties could be stated and studied in a
general framework generalizing both assumption-based and ASPIC-like systems and possibly
also other logic-based argument systems ?
We will present in this paper a new condition referred to as the self-contradiction axiom5
that guarantees the consistency of complete extension semantics and is implied by both
conditions of closure under contraposition or transposition while at the same time, also
includes systems that could avoid the problem of conflict-propagation. In example 1 both
AS, AS  satisfy the self-contradiction axiom.
It turns out that the consistency and closure properties in logic-based argument systems could be studied within a general logic-associated abstract argumentation framework,
obtained by associating abstract argumentation with abstract logics to represent the conclusions of arguments. We demonstrate that logic-associated abstract argumentation frameworks capture ASPIC-like systems (without preferences) and assumption-based argumentation. We present two simple and natural properties of compactness and cohesion in
logic-associated abstract argumentation frameworks and show that they capture the logical
closure and consistency of the complete extension semantics. We demonstrate that in both
assumption-based argumentation and ASPIC-like systems cohesion follows naturally from
the self-contradiction axiom.
We further give a translation from ASPIC-like systems (without preferences) into equivalent assumption-based systems that keeps the self-contradiction property invariant.
The paper is structured as follows. In section 2 we recall abstract argumentation and
Tarski abstract logics. We then introduce in section 3 a framework in which abstract argumentation is associated to abstract logics where sentences in abstract logics represent
argument conclusions. We present in this section two simple and natural conditions of compactness and cohesion and show that they ensure the satisfaction of the properties of logical
closure and consistency of complete extensions. In sections 4, 5 we show how compactness
and cohesions could be captured naturally in ASPIC-like systems or assumption-based argumentation. We introduce in section 4 the fundamental axiom of self-contradiction and show
the connections between it and the properties of closure under contraposition and transposition. We provide in section 6 a transformation from ASPIC-like systems into equivalent
assumption-based framework. In section 7, we discuss the more recent systems based on
Tarskis abstract logics. We then conclude.6

2. Preliminaries
An abstract argumentation framework (Dung, 1995) is defined simply by a pair (AR, att)
of a set of arguments AR and att  AR  AR where (A, B)  att represents an attack
from argument A against argument B. A set of argument S attacks an argument A if
some argument in S attacks A. S attacks another set S  if S attacks an argument in
S  . S is conflict-free if it does not attack itself. S is conflicting if it attacks itself. An
argument A is acceptable wrt set of arguments S if S attacks each attack against A. S is
admissible if S is conflict-free and it counter-attacks each attack against it. The semantics
5. The intuitive reading of self-contradiction is that if X causes contradiction then X contradicts
itself.
6. A very preliminary extended abstract of this paper is published by Dung and Thang (2011).

82

fiClosure and Consistency In Logic-Associated Argumentation

of abstract argumentation is determined by the acceptability of arguments and various
associated notions of extensions. A complete extension is an admissible set containing every
argument acceptable wrt it. Complete extensions could also be viewed as conflict-free fixed
points of the characteristic function F : 2AR  2AR defined by F (S) = set of acceptable
arguments wrt S. Preferred extensions are maximal conflict-free fixed points of F while the
least fixed point of F is called the grounded extension. While there could be many preferred
extensions, there exists an unique grounded extension. A stable extension is a conflict-free
set of arguments that attacks every argument not belonging to it.
Amgoud and Besnard (2009) have proposed the use of Tarskis abstract logic in argumentation that is characterized simply by a consequence operator.
Given a language L of well-formed formulas, a Tarski abstract logic (Amgoud & Besnard,
2009) is defined by a consequence operator CN: 2L  2L such that following axioms are
satisfied:
1. (Expansion)

X  CN (X)

2. (Idempotence)
3. (Finiteness)

CN (CN (X)) = CN (X)
S
CN (X) = {CN (Y ) | Y  X and Y is finite }

4. (Absurdity)

CN ({x}) = L for some x  L

5. (Coherence)

CN () 6= L

We introduce below the consequence operator over a set of strict or inference rules.
A strict rule7 is of the form
1 , . . . , n  
where 1 , . . . , n ,  are from L.
Definition 1 Let RS be a set of strict rules. Define the consequence operator CNRS :
2L  2L as follows: For a set X  L, CNRS (X) is the smallest set such that
1. X  CNRS (X), and
2. for each rule 1 , . . . n   in RS, if {1 , . . . n }  CNRS (X) then   CNRS (X).


3. Associating Abstract Argumentation With Abstract Logics
Intuitively, an argument is a proof of some conclusion. In many cases, such proofs are constructed following some proof theory of some formal logics. Such logics could be nonmonotonic. The notions of closure and consistency are then defined according to the monotonic
parts of the underlying logics.
Many logics underlying argumentation systems like assumption-based argumentation
or ASPIC-systems do not always impose the absurdity axiom. This motivates our slight
generalization of Tarski abstract logics in the following definition.
7. often also referred to as inference rules in assumption-based argumentation.

83

fiDung & Thang

Definition 2 Given a language L, an abstract logic is defined as a pair (CN, CON T RA)
where CN: 2L  2L represents a consequence operator and CON T RA  2L is a collection
of contradictory sets such that following axioms hold:
1. CN satisfies the expansion, idempotence and finiteness axioms.
2. (Weak Absurdity) If S  CON T RA then each superset of S also belongs to CON T RA.8
3. (Weak Coherence) CN () 6 CON T RA. 
Given an abstract logic (CN, CON T RA), X is closed iff X = CN (X). A set X 
CON T RA is said to be contradictory.
A set X  L is said to be inconsistent iff its closure CN (X) is contradictory.9 X is said
to be consistent iff it is not inconsistent. X is minimal inconsistent iff X is inconsistent
and each proper subset of X is consistent.10
Definition 3 We say that an abstract logic satisfies the
strong absurdity axiom if CON T RA 6=  and for each X  CON T RA, CN (X) = L.

It follows immediately that an abstract logic is a Tarski abstract logic if it satisfies the
strong absurdity axiom and there is x  L such that {x} is inconsistent.11
Example 2 Let RS0 = { wr;  go; b  hw; m  hw} be a set of strict rules,12
and L be a language consisting of literals whose atoms occur in the rules in RS0 . Define
AL0 = (CN0 , CON T RA) as follows:
 X  CON T RA iff X contains a pair of literals {l, l}.
 CN0 is the consequence operator defined by RS0 .
For illustration, CN0 () = {wr, go}, CN0 ({m}) = {wr, go, m, hw} and CN0 ({m, b}) =
{wr, go, m, hw, b, hw}. Hence the set {m, b} is inconsistent but not contradictory.
It is not difficult to see that AL0 is an abstract logic. From CN0 ({hw, hw}) =
{hw, hw}, it follows that AL0 does not satisfy the strong absurdity axiom. 
8. Note that CON T RA could be empty like in the case of definite logic programs where L consists only of
positive literals. Nonetheless, if CON T RA 6=  then L  CON T RA.
9. In other words, a set of sentences X is inconsistent if a contradiction could be derived from it though
contradiction may not be present directly in X (i.e. an inconsistent set may not be contradictory).
10. Y is a proper subset of X if Y is a subset of X and Y 6= X.
11. To be a Tarskian one, an abstract logic needs to satisfy absurdity and coherence. Because {x} is
inconsistent, CN ({x}) is contradictory. Since strong absurdity is satisfied, CN (CN ({x})) = L. Because
of idempotence, CN (CN ({x})) = CN ({x}). Hence CN ({x}) = L. So coherence holds.
From the weak coherence axiom of abstract logic, CN () 6 CON T RA. Due to the strong absurdity,
CON T RA 6= . Due to the weak absurdity, and the fact that CON T RA 6= , it follows that L 
CON T RA. Hence CN () 6= L.
12. The rules are taken from an example by Caminada and Amgoud (2007) where wr = John wears
something that looks like a a wedding ring, m = John is married, hw = John has a wife, go =
John often goes out until late, b = John is a bachelor.

84

fiClosure and Consistency In Logic-Associated Argumentation

Inspired by Amgoud and Besnards idea (2009), we use abstract logics to represent the
conclusions of arguments but in difference to them, we do not specify in detail the structure
of individual arguments.
Definition 4 A logic-associated argumentation framework over a language L is a
quadruple (AF, , AL, Cnl) where
1. AF = (AR, att) is an abstract argumentation framework, and
2. AL = (CN, CON T RA) is an abstract logic over L, and
3. Cnl : AR  L assigns to each argument A, its conclusion Cnl(A) in L, and
4.  is a partial order13 over AR where A  B means that A is a subargument of B such
that for all arguments C  AR, if C attacks A then C attacks B. 
Remark 1
 For a set S of arguments, Cnl(S) denotes the set of the conclusions of
the arguments in S.
 The set of all subarguments of A is denoted by Sub(A). For a set of arguments S,
Sub(S) contains all subarguments of arguments in S.

We next give an example of a logic-associated argumentation framework.
Example 3 Let LAF0 = (AF0 , 0 , AL0 , Cnl) where AL0 is defined in example 2 and
AF0 = (AR0 , att0 ) such that
1. The arguments in AR0 are constructed with rules from the set of strict rules RS0 in
example 2, and a set of defeasible rules RD = {wr  m; go  b}. There are 6
arguments14 :
A1 :  wr, A3 :  wr  m, A5 :  wr  m  hw.
A2 :  go, A4 :  go  b,

A6 :  go  b  hw.

Attack relation: A5 attacks A6 and vice versa. There are no other attacks. Let
att0 = {(A5 , A6 ), (A6 , A5 )}.
2. The subargument relation 0 is the reflexive and transitive closure of A1  A3  A5
and A2  A4  A6 . 
Definition 5 Let LAF = (AF, , AL, Cnl), AL = (CN, CON T RA), be a logic-associated
argumentation framework.
1. LAF is said to satisfy the closure-property if for each complete extension E of AF,
Cnl(E) is closed wrt AL.
13. A partial order is a reflexive, asymmetric and transitive relation.
14. For a precise definition see definition 12.

85

fiDung & Thang

2. LAF is said to satisfy the consistency-property if for each complete extension E
of AF, Cnl(E) is consistent wrt AL. 
Example 4 (Continuation of example 3)
The grounded extension of AF0 is GE = {A1 , A2 , A3 , A4 }. There are two preferred
extensions E1 = {A1 , A2 , A3 , A4 , A5 } and E2 = {A1 , A2 , A3 , A4 , A6 }.
Cnl(GE) = {wr, go, m, b} and CN0 (Cnl(GE)) = Cnl(GE)  {hw, hw}. Hence the
set of conclusions of arguments in the grounded extension are neither closed nor consistent wrt the abstract logic AL0 . Hence LAF0 satisfies neither the closure-property nor the
consistency-property.
It is also easy to see that the sets of conclusions of the arguments of the two preferred
extensions are neither closed nor consistent either. 
Example 5 (Continuation of example 4)
Let RS1 = RS0  {hw  m, hw  b}. The consequence operator wrt RS1 is
denoted by CN1 . Let AL1 = (CN1 , CON T RA) and AF1 = (AR1 , att1 ) where
 AR1 = AR0  {A7 , A8 } with A7 : A5  b and A8 : A6  m,15
 att1 = {(A7 , A4 ), (A7 , A6 ), (A7 , A8 ), (A8 , A3 ), (A8 , A5 ), (A8 , A7 )},
 1 is the reflexive and transitive closure of 0 {A5  A7 , A6  A8 }.
The grounded extension of AF1 is GE  = {A1 , A2 }. Two preferred extensions of AF1
are E1 = {A1 , A2 , A3 , A5 , A7 } and E2 = {A1 , A2 , A4 , A6 , A8 }.
It is not difficult to see that the sets Cnl(GE  ) = {wr, go}, Cnl(E1 ) = {wr, go, m, hw, b},
Cnl(E2 ) = {wr, go, b, hw, m} are closed and consistent.
Let LAF1 = (AF1 , 1 , AL1 , Cnl). Both closure and consistency properties are satisfied
in LAF1 . 
From now on until the end of this section, we assume an arbitrary but fixed logicassociated framework LAF = (AF, , AL, Cnl).
It turns out that both the closure and consistency properties are based on an intuitive
idea of a base of an argument.
Definition 6 Let A be an argument and BA be a finite set of subarguments of A. BA is
said to be a base of A if following conditions are satisfied:
1. Cnl(A)  CN (Cnl(BA))
2. For each argument C, C attacks A iff C attacks BA. 
It is easy to see that for each argument A, {A} is a base of A.
In example 3, though Cnl(A5 )  CN0 (Cnl(A3 )), {A3 } is not a base of A5 since A6
attacks A5 but A6 does not attack A3 .
Note that the empty set is a base of both arguments A1 and A2 .
In contrast, in example 5, {A3 } is a base of A5 and A7 and {A4 } is a base of A6 and A8 .
15. i.e. A7   wr  m  hw  b, and A8   go  b  hw  m.

86

fiClosure and Consistency In Logic-Associated Argumentation

Definition 7
1. An argument A is said to be generated by a set of arguments S if
there is a base BA of A such that BA  Sub(S).
2. The set of all arguments generated by S is denoted by GN(S). 
It follows immediately
Lemma 1 Let S be a set of arguments. The following assertions hold:
1. For each argument A, A is generated by {A}.
2. Sub(S)  GN (S).
3. Cnl(GN (S))  CN (Cnl(Sub(S))).
4. CN (Cnl(GN (S))) = CN (Cnl(Sub(S))).
5. For each argument C, C attacks GN (S) iff C attacks S.
Proof See appendix of section 3. 
Theorem 1 Let E be a complete extension. Then GN (E) = E
Proof See appendix of section 3. 
Theorem 1 motivates the following definitions 8, 9.
Definition 8 We say that a logic-associated argumentation framework LAF is compact
if for each set of arguments S, Cnl(GN (S)) is closed. 
The argumentation framework in example 3 is not compact since for S = {A3 }, GN (S) =
{A1 , A2 , A3 } and Cnl(GN (S)) = {wr, go, m} is not closed since CN ({wr, go, m}) = {wr, go, m, hw}.
In contrast, the argumentation framework in example 5 is compact. For example,
GN (S) = {A1 , A2 , A3 , A5 , A7 } (wrt LAF1 ) and Cnl(GN (S)) = {wr, go, m, hw, b} is both
closed and consistent.
Theorem 2 Each compact logic-associated argumentation framework satisfies the closureproperty.
Proof. Let E be a complete extension. From the compactness, it follows that Cnl(GN (E))
is closed. From theorem 1, Cnl(E) is closed. 
From lemma 1, it follows that LAF is compact iff Cnl(GN (S)) = CN (Cnl(Sub(S))) iff
CN (Cnl(Sub(S)))  Cnl(GN (S)). We have proved
Lemma 2 LAF is compact iff for each set S of arguments, CN (Cnl(Sub(S)))  Cnl(GN (S))
Notation 1 Abusing the notations for simplicity, we often refer to a set of arguments
S as inconsistent (resp. consistent) if Cnl(Sub(S)) is inconsistent (resp. consistent).
87

fiDung & Thang

Intuitively, inconsistency among a set of arguments indicates a possible conflict among
its generated arguments. This insight motivates the following definitions.
Definition 9 A logic-associated argumentation framework LAF is said to be cohesive if
for each inconsistent set of argument S, GN (S) is conflicting. 
For illustration, consider the logic-associated argumentation framework in example 3.
Let S = {A3 , A4 }. It is clear that S is inconsistent. It is not difficult to see that each
base of each argument A  {A5 , A6 } contains argument A itself. Therefore GN (S) =
{A1 , A2 , A3 , A4 }. GN (S) is thus conflict-free. The framework LAF0 is hence not cohesive.
Note that the argumentation framework LAF1 in example 5 is both compact and cohesive.
Theorem 3 Let LAF be a cohesive logic-associated argumentation framework. Then LAF
satisfies the consistency-property.
Proof Let E be a complete extension. Suppose Cnl(E) is inconsistent. From the cohesion of
LAF, it follows that GN (E) is conflicting. From theorem 1, E is conflicting. Contradiction.
Hence Cnl(E) is consistent. 
It follows immediately from theorems 2 and 3:
Corollary 1 Let LAF be a compact and cohesive logic-associated argumentation framework. Then LAF satisfies both the closure- and consistency-properties. 
In the next sections, we show that ASPIC-like systems (without preferences) and assumptionbased argumentation are instances of logic-associated argumentation frameworks. We will
also introduce the axiom of self-contradiction to guarantee the cohesion (and consistency)
of these systems.

4. Argumentation with Strict and Defeasible Rules
We assume a language L of literals where a literal is an atom a or the explicit negation a
of atom a. A set of literals is said to be contradictory if it contains a pair a, a.
It is important to note that we identify a with a. For X  L, denote X = {l | l 
X}.
A defeasible rule is of the form
1 , . . . , n  
where 1 , . . . , n ,  are from L.
Definition 10 A rule-based argumentation system is a pair AS = (RS, RD) of a set RS
of strict rules and a set RD of defeasible rules such that CNRS () is not contradictory. 
The following definition 11 identifies the abstract logic underlying a rule-based argumentation system AS = (RS, RD).
88

fiClosure and Consistency In Logic-Associated Argumentation

Definition 11 Let AS = (RS, RD) be a rule-based argumentation system. Define
ALAS = (CNAS , CON T RAAS )
where CON T RAAS is the collection of all contradictory sets and CNAS = CNRS . 
It follows immediately
Lemma 3 ALAS is an abstract logic. 
We recall below the arguments and attack relations of rule-based argumentation systems
introduced by Caminada and Amgoud (2007), Prakken (2010), Pollock (1987), and Modgil
and Prakken (2013).
Definition 12

1. Rules of the form  /   , are arguments with conclusion .

2. Let r be a strict/defeasible rule of the form 1 , . . . , n  /  , n  0. Further suppose that A1 , . . . , An , n  0, are arguments with conclusions 1 , . . . , n respectively.
Then A1 , . . . , An  /   is an argument with conclusion  and last rule r.
3. Every argument is constructed by applying finitely many times the above two steps. 
We next introduce key notations.
Notation 2
1. A strict argument is an argument containing no defeasible rule. Nonstrict arguments are called defeasible arguments.
2. A basic defeasible argument is an argument whose last rule is a defeasible one,
i.e. of the form A1 , . . . , An  .
For a basic defeasible argument B, the last rule of B is denoted by Lr(B).
3. B is a subargument of an argument A of the form A1 , . . . , An  /  , denoted by
B  A, if B = A or B is a subargument of some Ai . 
Remark 2 The conclusion of an argument A is denoted by Cnl(A).
Remark 3 Arguments of the form A1 , . . . , An  /   are also often viewed as proof
trees with the root labelled by  and the children of the root are the roots of subtrees
A1 , . . . , An . Note that if n = 0, the proof tree consists of just the root.
Illustrations for argumentation systems based on strict and defeasible rules are given in
examples 3, 5.
The following notion of attack is adopted from articles of Caminada and Amgoud (2007),
Prakken (2010), Pollock (1987), and Modgil and Prakken (2013).
Definition 13 An argument A attacks an argument B (on B) if B is basic defeasible
subargument of B and one of the following conditions is satisfied:
89

fiDung & Thang

1. (Undercutting) Cnl(A) = Oj(Lr(B  )) where for a defeasible rule r, Oj(r) is an atom
denoting that rule r is applicable.
2. (Rebutting) Cnl(A) = Cnl(B  ). 
Remark 4 For simplicity, we identify a rule-based argumentation system AS with the logicassociated argumentation framework (AFAS , , ALAS , Cnl) where AFAS is the argumentation framework obtained from AS according to definitions 12,13.
Theorem 4 Rule-based argumentation systems are compact.
Proof See appendix of section 4. 
The following lemma reveals an simple but important relation between an arguments
and its basic defeasible subarguments.
Lemma 4 Let A be an argument and BD be the set of basic defeasible subarguments of A.
Then Cnl(A)  CNAS (Cnl(BD)).
Proof See appendix of section 4. 
We introduce now a fundamental condition underlying the cohesion of rule-based argumentation.
Definition 14 The abstract logic ALAS is said to satisfy the
self-contradiction axiom if for each minimal inconsistent set X  L : X  CNAS (X).16

The example below illustrates the intuition of the self-contradiction axiom using again
the famous birds fly penguins dont-example.
Example 6 Let AS = (RS, RD) where RD consists of two defeasible rules:
d1 : p  f

d2 : b  f

and RS consists of three strict rules
r0 :  p

r1 : p  b

r2 : p   Oj(d2 )

where Oj(d2 ) is an atom stating that rule d2 is applicable.
It is obvious that the set of strict rules RS is not closed under transposition. It is also
straightforward to see that CNAS ({f, f }) = {f, f } =
6 L. Hence the underlying abstract
logic ALAS satisfies neither the strong absurdity axiom nor the closure under transposition
property.17
16. The intuitive reading of self-contradiction is that if X causes contradiction then X contradicts
itself.
17. See section 4.1 for precise definitions of closure under transposition or contraposition and their relationships with strong absurdity and self-contradiction

90

fiClosure and Consistency In Logic-Associated Argumentation

It is not difficult to see that ALAS satisfies the self-contradiction axiom.18
It is not difficult to see that AS satisfies both properties of closure and consistency. 
The following theorem shows that self-contradiction is sufficient for cohesion.
Theorem 5 Suppose ALAS satisfies the self-contradiction axiom. Then AS is cohesive.
Proof See appendix of section 4. 
It follows immediately from corollary 1 that
Corollary 2 Suppose ALAS satisfies the self-contradiction axiom. Then AS satisfies both
closure- and consistency-properties.
We next relate theorem 5 and corollary 2 to the the results by Caminada and Amgoud
(2007), Prakken (2010), and Modgil and Prakken (2013).
4.1 Sufficient Conditions for Self-Contradiction in Abstract Logics ALAS
For simplicity, if there are no possibilities for misunderstanding, we often write respectively
CN , CON T RA and AL for CNAS , CON T RAAS and ALAS in this section.
We first recall the definitions of closure under contraposition and transposition from
articles of Caminada and Amgoud (2007), Prakken (2010), and Modgil and Prakken (2013).
Definition 15

1. AL is said to be

closed under contraposition if for each set X  L, for each   X if   CN (X)
then   CN (X \ {}  {}).
2. A set of strict rules RS is said to be
closed under transposition if for each rule 1 , . . . , n   in RS, all the rules
of the form 1 , . . . , i1 , , i+1 , n  i also belong to RS.
The relations between the closure under contraposition and the axioms of self-contradiction
and strong absurdity are illuminated in the following lemma.
Lemma 5
1. If AL is closed under contraposition, then AL satisfies the strong absurdity
axiom.
2. If AL satisfies the strong absurdity axiom then AL satisfies the self-contradiction axiom.
18. Let S be a minimal inconsistent set. We show S  CNAS (S). If S is contradictory then the minimality
of S implies that S = {a, a} for some a  L. The self-contradiction axioms holds obviously. Suppose
S is not contradictory. Hence there is a pair {a, a}  CNAS (S) for some atom a. It is not difficult to
see that CNAS (S) = CNAS ()  S. Therefore CNAS (S) \ S  CNAS () = {p, b, Oj(d2 )}. It follows
{a, a}  CNAS () 6=  and {a, a}  S 6= . From the minimality of S, S consists of exactly one element.
Therefore   S :   CNAS (S).

91

fiDung & Thang

Proof See appendix of section 4. 
The relations between the closure under transposition and the self-contradiction axiom
is illuminated in the following lemma.
Lemma 6 Let AS = (RS, RD) such that the set of strict rules RS is closed under transposition. Then ALAS satisfies the self-contradiction axiom.
Proof See appendix of section 4. 
The following example shows that the reverses of assertions in lemmas 5, 6 do not hold
in general.
Example 7 Let L = {a, a, b, b}. Let CONTRA be the set of all contradictory sets over
L.
1. For each X  L, define CN (X) = X. It is obvious that the abstract logic AL =
(CN, CON T RA) satisfies the self-contradiction axiom but not the strong absurdity
axiom.
2. Consider a set of strict rules RS consisting of a normal rule a  b together with
absurdity rules of the form x, x  y where x  {a, b}, y  L. Let CN be the
consequence operator wrt RS.
It is obvious that AL = (CN, CON T RA) satisfies the strong absurdity axiom (and
hence also the self-contradiction axiom). From b  CN ({a}), but a 6 CN ({b}) =
{b}, it follows that AL is not closed under contraposition.
It is clear that the set of strict rules is not closed under transposition.
3. Consider a set of strict rules RS consisting of just two strict rules a  b and b 
a. It is clear that the rule set is closed under transposition but the corresponding
consequence operator does not satisfy the strong absurdity axiom. 
The following picture illustrates the relationships between key properties of rule-based
argumentation.

Figure 1:

92

fiClosure and Consistency In Logic-Associated Argumentation

5. Assumption-Based Argumentation
Given a logical language L, an assumption-based argumentation (ABA) framework (Bondarenko et al., 1997) is a triple F = (R, A, ) where R is a set of inference rules of the form
is a (total) one-one
1 , . . . n   (for n  0), and A  L is a set of assumptions, and
mapping from A into L, where x is referred to as the contrary of x such that following
properties are satisfied:
 assumptions in A do not appear in the heads of rules in R, and
 contraries of assumptions are not assumptions, and
 if L contains an explicit negation operator  then CNR () is not contradictory wrt
, i.e. for all   L, {, } 6 CNR ().
The following edition of the birds fly penguins dont example provides an illustration.
Example 8 F = (R, A,

) where R consists of rules

not ab1 , p  f

not ab2 , b  f

p

pb

p  ab2

and A = {not ab1 , not ab2 } and not ab1 = ab1 , not ab2 = ab2 
We identify the structure of abstract logics underlying ABA frameworks below.
5.1 Assumption-based Abstract Logics
A set X  L is said to be contradictory iff
 X is contradictory wrt
or

, i.e. there exists an assumption   A such that {, }  X,

 X is contradictory wrt ,19 i.e. there exists   L such that {, }  X.
Definition 16 Let F = (R, A,

) be an ABA framework. Define

ALF = (CNF , CON T RAF )
where
1. CNF = CNR .
2. CON T RAF is the set of all contradictory sets. 
It follows immediately
Lemma 7 ALF is an abstract logic.
19. if L contains the explicit negation operator .

93

fiDung & Thang

Remark 5 For simplicity, if there are no possibilities for misunderstanding, we often write
in this section CN (S) or CON T RA for CNF (S) or CON T RAF respectively.
We adapt the self-contradiction axiom for assumption-based argumentation below.
Definition 17 Let F be an ABA framework. We say that the abstract logic ALF satisfies
the
ab-self-contradiction axiom20 if for each inconsistent set of assumptions X, there is
  X such that   CNF (X). 
5.2 Closure and Consistency in Assumption-Based Argumentation
We first recall definitions of arguments and attack relation associated to an ABA framework.
Definition 18
1. Any assumption  is an argument whose support and conclusion are
{},  respectively.
2. Let 1 , . . . n   be a rule. Further suppose that A1 , . . . , An are arguments with
conclusions 1 , . . . , n respectively. Then A1 , . . . , An   is an argument whose
conclusion is  and whose support is the union of the supports of A1 , . . . , An
3. Every argument is constructed by applying finitely many times the above two steps. 
Remark 6 Arguments are often viewed as proof trees. Arguments of the form A1 , . . . , An 
 are proof trees with the root labelled by  and the children of the root are the roots of
subtrees A1 , . . . , An . Note that if n = 0, the proof tree consists of just the root. If A is an
assumption  then the proof tree consists of just the root labelled by 
Notation 3

1. The support of an argument A is denoted by supp(A).

The support of a set of arguments S is the union of the supports of each individual
argument in it and denoted by supp(S).
2. The conclusion of an argument A is denoted by Cnl(A). 
Definition 19
supp(B).

1. An argument A attacks an argument B if Cnl(A) =  for some  

2. We say B is a subargument of an argument A of the form A1 , . . . , Ak  , denoted
by B  A, if B = A or B is a subargument of some Ai . 
Remark 7 For simplicity, we identify an assumption-based framework F with the logicassociated argumentation framework (AFF , , ALF , Cnl) where AFF is the argumentation
framework generated from F (according to definitions 18, 19).
It is not difficult to see
Theorem 6 ABA frameworks are compact.
20. ab stands for assumption-based.

94

fiClosure and Consistency In Logic-Associated Argumentation

Proof See appendix of section 5. 

Theorem 7 Let F be an ABA framework. If ALF satisfies the ab-self-contradiction axiom,
then F is cohesive.
Proof See appendix of section 5. 
It follows immediately from theorems 6,7, corollary 1
Corollary 3 Let F be an ABA framework. If ALF satisfies the ab-self-contradiction axiom,
then F satisfies both the closure- and consistency-properties. 
5.3 Logic Programming
Logic programming could be classified into three different classes of definite programs,
normal programs and extended programs with increasing complexity. Bondarenko, Dung,
Kowalski and Toni(1997) showed that logic programs are instances of assumption-based
argumentation. We discuss below the underlying abstract logics of all classes and the selfcontradiction axiom.
5.3.1 Definite Logic Programs
A definite logic program is simply an assumption-based argumentation framework F =
(R, A, ) based on a language L where
1. L consists only of ground atoms and the set of assumptions is empty.
2. Rules in R are of the form a1 , . . . , an  h where h, a1 , . . . , an are atoms from L.
As there is no contradiction in L, CON T RAF = . The ab-self-contradiction axiom
hold trivially. Since there is no attack between arguments, the only extension is the set of
all arguments. The closure and consistency properties hold obviously.

5.3.2 Normal Logic Programs
A normal logic program is an assumption-based argumentation framework F = (R, A,
based on a language L where

)

1. L consists of atoms of the form a, b, . . . together with the negation-as-failure literals
of the form not a where a is an atom.
2. Assumptions are negation-as-failure literals not a whose contraries are a.
3. Rules in R are of the form l1 , . . . , ln  h where h is an atom and l1 , . . . , ln are literals
from L.
95

fiDung & Thang

CON T RAF consists of all subsets of L that contain a pair a, not a for some atom a.
The ab-self-contradiction axiom holds obviously.21 The closure and consistency properties hence hold for all extensions of normal programs.

5.3.3 Extended Logic Programs
An extended logic program (Gelfond & Lifschitz, 1990; Lifschitz, 1999) is an assumptionbased argumentation framework F = (R, A, ) based on a language L where
1. L consists of atoms of the form a, b, . . . and their explicit negations a, b, . . . together
with the negation-as-failure literals of the form not l where l is a classical literal (i.e.
an atom or the explicit negation of an atom).
2. Assumptions are negation-as-failure literals not l whose contraries are l.
3. R consists of rules of the form l1 , . . . , ln  h where h is a classical literal and
l1 , . . . , ln are literals from L
CON T RAF consists of all subsets of L that contain a pair a, a for some atom a or a
pair l, not l for some classical literal l.
From theorems 6,7 and corollary 3, it follows immediately
Corollary 4 Let F be a extended logic program. If CNF () is not contradictory wrt  and
ALF satisfies the ab-self-contradiction axiom then F is compact and cohesive and hence
satisfies both the closure and consistency properties.

6. Translating Rule-Based Argumentation into Assumption-Based
Argumentation
We have showed in the previous two sections that the self-contradiction axioms are sufficient
and natural conditions for ensuring closure and consistency properties in both assumptionbased and rule-based argumentation.
In this section, we argue that the self-contradiction axiom in rule-based systems is
subsumed by the assumption-based self-contradiction axiom by giving a translation from
rule-based systems into equivalent assumption-based ones. More generally, the translation suggests that rule-based argument systems (without preferences) are subsumed by
assumption-based argumentation.
Let AS = (RS, RD) be an arbitrary but fixed rule-based argumentation system such
that for each r  RD, there is no rule in RS  RD whose head coincides with Oj(r) or
whose body contains an occurrence of Oj(r). We translate AS into an assumption-based
system in the following definition.
Definition 20 T (AS) = (R, A,

) is defined as follows:

21. We give a short proof here. Let X be an inconsistent set of assumptions. Hence there is an assumption
 s.t. {, }  CNF (X). Since assumptions do not appear in the heads of rules,   X.

96

fiClosure and Consistency In Logic-Associated Argumentation

1. A = {Oj(r) | r  RD }  {not l | l is the head of some rule in RD}
where Oj(r) is viewed as an assumption indicating that rule r is applicable and not l
is a negation-as-failure assumption stating that there is no evidence-to-the-contrary
of l.
2.

R = RS  {T r(r) | r  RD }
where T r(r) is of the form
Oj(r), not h, 1 , . . . , n  h
if r is of the form 1 , . . . , n  h

3.

Oj(r) = Oj(r) and not l = l 

Remark 8 Since there is no rule in RS  RD whose head is of the form Oj(r), no assumption in A coincides with the head of any rule in R. Therefore CNT (AS) () is not
contradictory wrt . It is not difficult to see that CNT (AS) () = CNAS (). CNT (AS) () is
hence not contradictory wrt . Therefore CNT (AS) () is not contradictory.
T (AS) is hence an assumption-based argumentation system.
As AS and T (AS) are distinct systems, an attentive reader may ask in what sense they
are equivalent?
Before giving a formal elaboration on this question, let us look at an example.
Example 9 Consider a simple rule-based system AS consisting of one strict rule and one
defeasible rule :
r0 :  b
r1 : b  f
There are two arguments here:
A1 :  b and A2 : A1  f
The arguments do not attack each other. Hence the only complete extension E of AS
contains both arguments A1 , A2 .
The corresponding assumption-based system T (AS) consists of two rules:
b

Oj(r1 ), not f, b  f

There are four arguments in the assumption-based system:
B1 :  b

B2 : C 0 , C 1 , B1  f

C0 : Oj(r1 )

C1 : not f

There are no attacks between these four arguments. The only complete extension E  of
T (AS) consists of all four arguments. In fact the information contained in E  is fully captured in the set S = {B1 , B2 } since C0 , C1 are subarguments of B2 , hence any attack against
97

fiDung & Thang

them is also an attack against B2 . We could view the set S as an equivalent representative
of E  . S could be viewed as representing the core of E  .
The equivalence between E and E  is captured by the correspondence between arguments
A1 , A2 and arguments B1 , B2 respectively.
Note that arguments C0 , C1 in extension E  of T (AS) explicitly represent the implicit
meta-level information contained in extension E of AS, namely, defeasible rule r1 is applicable and there is no argument with conclusion f . 
Let AF0 = (AR0 , att0 ), AF1 = (AR1 , att1 ) be the argumentation frameworks corresponding to AS, T (AS) respectively.
Definition 21 Let S be a set of arguments in AF1 . The core of S, denoted by Core(S),
is defined by
Core(S) = S \ A
i.e Core(S) contains arguments in S that are not assumptions. 
For illustration, in example 9, Core(E  ) = {B1 , B2 }.
Lemma 8
1. Let S be a set of arguments in AF1 and A be an argument in AF1 . It
holds: A is acceptable wrt S iff A is acceptable wrt Core(S).
2. Let S be a set of arguments in AF1 . S is admissible iff Core(S) is admissible.
Proof See appendix of section 6. 
The following lemma states that complete sets are identified uniquely by their cores.
Lemma 9 Let E, E  be complete extensions of AF1 . It holds:
E = E  iff Core(E) = Core(E  )
Proof See appendix of section 6. 
We present a bijection between complete extensions in AF0 and complete extensions in
AF1 by defining a natural one-one mapping from AR0 into AR1 :
Definition 22 Define
C : AR0  AR1
such that following properties are satisfied:
1. If A is of the form A1 , . . . , An  h, n  0, then C(A) is of the form
C(A1 ), . . . , C(An )  h 22
22. Note that if A is of the form  h, C(A) = A.

98

fiClosure and Consistency In Logic-Associated Argumentation

2. If A is a basic defeasible argument of the form A1 , . . . , An  h then C(A) is of the
form
Oj(r), not h, C(A1 ), . . . , C(An )  h 23
where r is the last rule of A. 
For a set of arguments S  AR0 , let C(S) = {C(A) | A  S }. It follows
Lemma 10 Let A, B  AR0 and S  AR0 . The following observations hold:
1. Cnl(A) = Cnl(C(A)).
2. C is an one-one mapping from AR0 onto AR1 \ A
3. (A, B)  att0 iff (C(A), C(B))  att1 .
4. S is admissible in AF0 if and only if C(S) is admissible in AF1 .
5. A is acceptable wrt S iff C(A) is acceptable wrt C(S)
Proof See appendix of section 6. 
Let L be the language of AS and
L0 = L \ {Oj(r), Oj(r) | r is a defeasible rule in AS}
The equivalence of AS and T (AS) is established in the following theorem.
Theorem 8 For each complete extension E of AF0 there is a complete extension E  of AF1
and vice versa such that the following properties hold:
1. C(E) = Core(E  )
2. For each literal l  L0 ,

l  Cnl(E) iff l  Cnl(E  )

Proof See appendix of section 6. 
The following theorem shows that the self-contradiction axiom in rule-based argumentation is subsumed by the ab-self-contradiction axiom in assumption-based argumentation.
Let ALi = (CNi , CON T RAi ), i = 0,1, be the abstract logics associated to AS, T (AS)
respectively.
Theorem 9 If AL0 satisfies the self-contradiction axiom then AL1 satisfies the ab-selfcontradiction axiom.
Proof See appendix of section 6. 
23. Note that if A is a defeasible rule r of the form  h, C(A) is of the form Oj(r), not h,  h.

99

fiDung & Thang

7. Discussion
Amgoud and Besnard (2009) have introduced the use of Tarskis abstract logic to study
the consistency property of logic-based argumentation. In the following, we discuss how
compactness and cohesion could be fulfilled in their systems.
As remarked earlier, a Tarski abstract logic is represented by an abstract logic where
CON T RA 6=  and for each X  CON T RA, CN (X) = L and there is x  L such that
CN ({x})  CON T RA.
A Tarski abstract logic is said to be adjunctive if for all x, y  L, if CN ({x}) 6=
CN ({x, y}) 6= CN ({y}) then there exists z such that CN ({z}) = CN ({x, y}).
A knowledge base is defined as a set   L such that for each x  , x is consistent.
An argument over  is a pair A = (X, ) where X is finite consistent support of A
denoted by supp(A), and   CN (X) is the conclusion of A denoted by Cnl(A). The
support of a set of arguments is the union of the supports of the individual arguments.
AR denotes the set of all arguments over .
X   is called a minimal conflict set if X is inconsistent and each proper subset of X
is consistent.24
For the rest of this discussion, we assume that all minimal conflict sets contain two or
more elements.
Let att  AR  AR be an attack relation.
1. att is said to be context-sensitive iff for all a, b  AR, if supp(a)supp(b) is inconsistent
then either (a, b)  att or (b, a)  att.
2. att is said to be conflict-dependent iff for all a, b  AR, if (a, b)  att then supp(a) 
supp(b) is inconsistent.
3. att is said to be symmetric iff for all a, b  AR, if (a, b)  att then (b, a)  att.
An argument B is said to be a subargument of an argument A, denoted B  A if B = A
or B = ({}, ) for some   supp(A).
Lemma 11 If all minimal conflict sets are binary and the attack relation att is contextsensitive, conflict-dependent and symmetric then LAF = (AF, , AL, Cnl) is a compact
and cohesive logic-associated argumentation framework.
Proof See appendix of section 7. 
It follows immediately from theorem 1:
Corollary 5 If all minimal conflict sets are binary and the attack relation att is contextsensitive, conflict-dependent and symmetric then LAF satisfies both properties of closure
and consistency.
24. It is not difficult to see that each minimal conflict set is finite as from CN (X) = L, and L = CN ({x})
for some x  L, it follows that x  CN (X). From the finiteness axiom, there is a finite subset Y of X
such that x  CN (Y ). Hence CN (Y ) = L. From the minimality of X, it follows X = Y . X is hence
finite.

100

fiClosure and Consistency In Logic-Associated Argumentation

Corollary 5 is rather limited due to restrictions imposed on the attack relations. This
is because the structure of arguments here is rather poor as abstract logics do not reveal
any structure of the consequence relation. Our approach of marrying abstract argumentation with abstract logics resulting in logic-associated abstract argumentation addresses this
problem by specifying the subargument structure and its relation to the attack relation.
Caminada and Amgoud (2007) have also studied unrestricted rebuts where two arguments with contrary conclusions are considered to attack each other. Defeasible argumentation with attacks based on unrestricted rebuts violates both the consistency and closure
properties except for the grounded semantics. Unrestricted rebuts did not gain much attention in the research in assumption-based argumentation or logic programming. This
suggests that there are relevant structural features underlying unrestricted attacks that are
still not understood. A sensible idea could be to study this kind of attacks within our
proposed framework of logic-associated abstract argumentation as it could shed lights on
its instances in both defeasible and assumption-based argumentation.
Non-interference, another key rationality postulate for structured argumentation has
been proposed by Caminada, Carnielli, and Dunne (2012) and studied extensively by Caminada et al. (2012), and Wu (2012). Non-interference is conceptually different to the consistency and closure properties as the later properties could be viewed as about the correctness
of the argument systems while the former is about their structural modularity. As we focus
on the correctness of argument systems, a study on their structural modularity is outside
the scope of this paper. Nonetheless, non-interference seems to be related to a property of
localizing conflicts in arguments systems where we say that an argument system is localized
if there is no argument attacking every argument. It is not difficult to see that aspic systems
that are closed under contraposition is not localized if there is a rebutting attack in it. In
contrast, the self-contradiction axiom allows us to develop localized aspic systems. It would
be interesting to see how the two concepts of localized conflicts and non-interference are
interrelated.
Toni (2008) has generalized assumption-based argumentation to represent reasoning
with both strict and defeasible rules satisfying both the rational properties of logical closure
and consistency. As we have showed in section 6, standard assumption-based argumentation
captures rule-based argumentation system by a simple and elegant transformation. Hence it
is not necessary to generalize assumption-based argumentation to capture defeasible reasoning with strict and defeasible rules. Nevertheless, the proposal by Toni (2008) is interesting.
Nielsen and Parson (2007) have also proposed a generalization of abstract argumentation
allowing sets of attacking arguments. Prakken (2010) and Modgil and Prakken (2013) had
also studied preferences between arguments. It would be interesting to see whether the
properties of compactness and cohesion are satisfied in these frameworks.
We believe that the compactness and cohesion and self-contradiction properties could
serve as guideline principles in the design of logic-based argumentation systems to ensure the
satisfaction of properties of logical closure and consistency. As pointed out by Caminada and
Amgoud (2007), there are several argument systems (Garcia & Simari, 2004; Governatori,
Maher, Antoniou, & Billington, 2004) not satisfying the consistency property. It would be
interesting to see how the results in this paper could be applied on them.
101

fiDung & Thang

Appendix A. Section 1
Let CN be the consequence operator wrt AS  . It is clear that CN () = {p, b, Oj(d2 ), th}.
Let c  CN (X) for c  L and X  L. Let x  X. We show that x  CN (Y ) where
Y = X \ {x}  {c}. If c  CN (), from the absurdity rules, it follows immediately that
x  CN (Y ). Suppose c 6 CN (). Hence c  CN (X) iff c  X or X contains a pair of
literals a, a. If c  X and x 6= c, then c  Y . Hence {c, c}  Y . From the absurdity
rules, L = CN (Y ). If c  X and x = c then x  Y . Hence x  CN (Y ). If X contains
a pair of literals a, a and x 6 {a, a}, then L = CN (Y ). If x  {a, a} then x  Y .

Appendix B. Section 3
Lemma 1 Let S be a set of arguments. The following assertions hold:
1. For each argument A, A is generated by {A}.
2. Sub(S)  GN (S).
3. Cnl(GN (S))  CN (Cnl(Sub(S))).
4. CN (Cnl(GN (S))) = CN (Cnl(Sub(S))).
5. For each argument C, C attacks GN (S) iff C attacks S.
Proof The first assertion is obvious from definitions 6 and 7. Since for each A  Sub(S),
{A}  Sub(S), it follows immediately from the first assertion that each argument in Sub(S)
is generated by S. The third assertion follow immediately from definitions 6 and 7. The
fourth assertion follows from the second and third ones.
From S  GN (S), it is clear that if C attacks S, C attacks GN (S). Suppose C attacks
GN (S). Let A  GN (S) s.t. C attacks A. Let BA be a base of A such that BA  Sub(S).
C hence attacks BA. Therefore C attacks Sub(S). Thus C attacks S. 
Theorem 1 Let E be a complete extension. Then GN (E) = E
Proof Since each attack against GN (E) is an attack against E (lemma 1, last assertion),
each attack against GN (E) is counterattacked by E as E is a complete extension. Therefore
GN (E)  E. From second assertion in lemma 1, it follows E  GN (E). Hence GN (E) =
E. 

Appendix C. Section 4
Remark 9 A strict argument over X  L is a strict argument over the set of rules RS {
 |   X}.
Remark 10 For a strict argument A over X, the set of premises of A, denoted by P rem(A),
is the set of literals from X labelling the leaves of A (viewed as a proof tree).
Theorem 4 Rule-based argumentation systems are compact.

102

fiClosure and Consistency In Logic-Associated Argumentation

Proof Let AS be a rule-based system and let S be a set of arguments wrt AS and  
CNAS (Cnl(Sub(S))). From lemma 2, we only need to show that   Cnl(GN (S)).
Let X be a minimal subset of Cnl(Sub(S)) such that   CNAS (X). Hence there is a
strict argument A0 over X with conclusion . Further let SX be a minimal set of arguments
from Sub(S) s.t. Cnl(SX ) = X. Let A be the argument obtained by replacing each leaf in
A0 (viewed as a proof tree) labelled by a literal  from X by an argument with conclusion
 from SX . It is obvious that the conclusion of A is . We show that SX is a base of
A. Suppose B is an argument attacking A. Since A0 is a strict argument over X, B must
attack a basic defeasible subargument of some argument in SX . Hence B attacks SX . Thus
A  GN (S). Hence   Cnl(GN (S)). We have proved that that the rule-based argumentation system AS is compact. 
Lemma 4 Let A be an argument and BD be the set of basic defeasible subarguments of
A. Then Cnl(A)  CNAS (Cnl(BD)).
Proof By induction on the size of A.
Basic Step A is of the form  /  .
Suppose A is of the form   then   CNAS (). From BD = , the lemma holds.
Suppose A is of the form   then BD = {A}. The lemma holds.
Inductive Step. Suppose A is of the form A1 , . . . , An  /  
Suppose A is of the form A1 , . . . , An   then A  BD. The lemma holds obviously.
Suppose A is of the form A1 , . . . , An   . Hence BD is the union of the sets
BD1 , . . . , BDn of basic defeasible subarguments of A1 , . . . , An respectively. From the induction hypothesis, Cnl(Ai )  CNAS (Cnl(BDi )), 0  i  n. Hence Cnl(A)  CNAS (Cnl(BD)).

Theorem 5 Suppose ALAS satisfies the self-contradiction axiom. Then AS is cohesive.
Proof Let S be an inconsistent set of arguments. Hence Cnl(Sub(S)) is inconsistent. Define
BD to be the set of all basic defeasible arguments in Sub(S). It is clear that BD 6= . From
lemma 4, it follows that Cnl(Sub(S)  CNAS (Cnl(BD)). Hence CNAS (Cnl(Sub(S))) =
CNAS (Cnl(BD)). Cnl(BD) is therefore inconsistent. Since ALAS satisfies the self-contradiction
axiom, there is   Cnl(BD) such that   CNAS (Cnl(BD)). Let B  BD with
Cnl(B) = . From CNAS (Cnl(Sub(S))) = CNAS (Cnl(BD)), it follows that   CNAS (Cnl(Sub(S))).
From the compactness of AS and Sub(S)  GN (S), it follows that there is an argument
A  GN (S) such that Cnl(A) = . Hence A attacks B. Since B  BD  Sub(S) 
GN (S), GN (S) is conflicting. 
Lemma 5
1. If AL is closed under contraposition, then AL satisfies the strong absurdity axiom.
2. If AL satisfies the strong absurdity axiom then AL satisfies the self-contradiction
axiom.
Proof
103

fiDung & Thang

1. Suppose AL is closed under contraposition. Let X  CON T RA. Hence there is
an atom a s.t. {a, a}  X. From a  CN ({a, }) for any literal , and from the
closure under contraposition property, it follows that   CN ({a, a}). Hence  
CN (X) for any literal . We have proved that L = CN (X) for each X  CON T RA.
From definition 10, it follows that AL satisfies the strong absurdity axiom.
2. Suppose AL satisfies the strong absurdity axiom. Let X  L such that X is minimal
inconsistent. Therefore CN (X)  CON T RA. From the idempotence axiom and the
strong absurdity axiom, CN (X) = L. It holds obviously: X  CN (X). 
Lemma 6 Let AS = (RS, RD) such that the set of strict rules RS is closed under transposition. Then ALAS satisfies the self-contradiction axiom.
Proof We first prove the following assertion.
Assertion: Let A be a strict argument over X with conclusion  and  =
6 P rem(A)  X.
Then for each   P rem(A), there is an argument B with premises in P rem(A)  {}
and conclusion  .
Proof We prove by induction on the height of A (as a proof tree).25
If the height of A is 0, the theorem is obvious.
Suppose A is of the form A1 , . . . , An   where Cnl(Ai ) = i . Let   P rem(A).
Without loss of generality, let   P rem(An ). From the closure under transposition, the rule
1 , . . . , n1 ,   n also belongs to RS. Let B be the argument A1 , . . . , An1 ,  
n .
From the induction hypothesis, there is a proof tree T r whose premises are in P rem(An )
{n } and whose conclusion is .
Let T r be the tree obtained from T r by replacing each occurrence of premise n by
the argument B. It is clear that P rem(T r )  P rem(A)  {} and Cnl(T r ) = . 
Let X  L s.t. X is minimal inconsistent. Hence there are two arguments A0 , A1
with premises in X and conclusions ,  respectively. From the minimality of X, it
holds: X = P rem(A0 )  P rem(A1 ). Let   X. Without loss of generality, suppose
  P rem(A0 ). From the above assertion, it follows that there exists an argument B with
conclusion  and P rem(B)  P rem(A0 )  {}. Let A be the argument obtained by
replacing each leaf labelled by  in B by tree A1 . It is clear that P rem(A)  X and the
conclusion of A is . 

Appendix D. Section 5
Theorem 6 ABA frameworks are compact.
Proof Let S be a set of arguments. Let SU = Sub(S) and CSU = Cnl(SU ). We only
need to prove that CN (CSU )  Cnl(GN (S)) (lemma 2). Let   CN (CSU ). It is easy
to see that there is an argument A (viewed as a proof tree) with conclusion  whose leaves
25. The height of a proof tree is the length (the number of links) of the longest path from the root to a leaf
node.

104

fiClosure and Consistency In Logic-Associated Argumentation

are labelled by sentences in CSU . Expand this proof tree at each leaf labelled by   CSU
by a proof tree representing an argument in SU with conclusion . The new proof tree
corresponds to an argument B with conclusion . The proof trees in SU that are used to
expand A obviously form a base of B. It is hence clear that B is generated by S. 
Theorem 7 Let F be an ABA framework. If ALF satisfies the ab-self-contradiction axiom,
then F is cohesive.
Proof Let S be an inconsistent set of arguments. Hence supp(S) is inconsistent. Since
CNF satisfies the assumption-based self-contradiction axiom, there is   supp(S) such
that   CNF (supp(S)). From lemma 2, there is an argument A  GN (S) such that
Cnl(A) = . It is obvious that A attacks any argument in S whose premises contain .
Since S  GN (S), GN (S) is hence conflicting. 

Appendix E. Section 6
Lemma 8
1. Let S be a set of arguments in AF1 and A be an argument in AF1 . It holds:
A is acceptable wrt S iff A is acceptable wrt Core(S).
2. Let S be a set of arguments in AF1 . S is admissible iff Core(S) is admissible.
Proof
1. Since Core(S)  S, if A is acceptable wrt Core(S), A is obviously acceptable wrt S.
Suppose now that A is acceptable wrt S. Let B attack A. Hence there is A  S s.t.
A attacks B. Therefore A is not an assumption. Hence A  Core(S). B is hence
attacked by Core(S), i.e. A is acceptable by Core(S).
2. Follows immediately from the previous assertion. 
Lemma 9. Let E, E  be complete extensions of AF1 . It holds:
E = E  iff Core(E) = Core(E  )
Proof We only need to show that Core(E) = Core(E  ) implies E = E  . The reverse
direction is obvious. Let Core(E) = Core(E  ) = S. Let A  E \ S. A is hence an
assumption acceptable wrt E. From lemma 8, A is acceptable wrt S. Thus A is acceptable
wrt E  (lemma 8). Hence A  E  . Similarly, we could show that each assumption in E  \ S
belongs to E. We thus proved E = E  . 
Lemma 10 Let A, B  AR0 and S  AR0 . The following observations hold:
1. Cnl(A) = Cnl(C(A)).
2. C is an one-one mapping from AR0 onto AR1 \ A
105

fiDung & Thang

3. (A, B)  att0 iff (C(A), C(B))  att1 .
4. S is admissible in AF0 if and only if C(S) is admissible in AF1 .
5. A is acceptable wrt S iff C(A) is acceptable wrt C(S)
Proof
1. The first assertion is obvious.
2. It is obvious that there is no argument A in AR0 such that C(A)  A.
Viewing an argument in AR0 as a proof tree, the height of a tree is defined to be the
length (i.e. number of links) of the longest path from the root to a leaf. Let AR0,k be
the set of all trees of height  k in AR0 . We prove by induction that C is one-one on
AR0,k .
It is obvious that C is one-one on AR0,0 . Suppose C is one-one on AR0,k . Let A, B
be two different arguments in AR0,k+1 . If the last rules of A,B are different then it is
obvious that C(A), C(B) are different. Suppose that the last rules of A,B are identical.
Then A, B respectively have the forms A1 , . . . , An  /  h, B1 , . . . , Bn  /  h.
Without loss of generality, we can assume that A1 6= B1 . Hence from the induction
hypothesis, C(A1 ) 6= C(B1 ). Therefore C(A) 6= C(B).
It is also straightforward to prove by induction that for each B  AR1 \ A, there is
A  AR0 such that C(A) = B.
3. (a) Suppose (A, B)  att0 . Let B  be a basic defeasible subargument of B such that
A attacks B (on B  ). There are two cases:
i. Cnl(A) = Oj(Lr(B  )) (undercut attack). From Cnl(A) = Cnl(C(A)),
it follows Cnl(C(A)) = Oj(Lr(B)) and Oj(Lr(B))  supp(C(B)). C(A)
hence attacks C(B) wrt att1 .
ii. Cnl(A) = h for h = Cnl(B  ). Hence Cnl(C(A)) = h and not h 
supp(C(B)). C(A) hence attacks C(B) wrt att1 .
(b) Suppose (C(A), C(B))  att1 . There are two cases:
i. Cnl(C(A)) = Oj(r) for some defeasible rule r such that Oj(r)  supp(C(B)).
From Cnl(A) = Cnl(C(A)), it follows Cnl(A) = Oj(r) and r is a defeasible
rule in B. Hence there is basic defeasible subargument B  of B such that
Lr(B  ) = r. Hence A attacks B on B  in AF0 .
ii. Cnl(C(A)) = h such that not h  supp(B). Hence there is basic defeasible
rule r in B such that hd(r) = h. Therefore there is a subargument B  of B
such that Lr(B  ) = r. Hence A attacks B on B  (by rebutting) in AF0 .
4. From assertion 3, it is clear that S is conflict-free iff C(S) is conflict-free.
Suppose S defends itself against all attacks. Let A attack C(S) in AF1 . Therefore A is
not an assumption. From the second assertion, there is B = C 1 (A). From assertion
3, it follows B attacks S. Therefore S attacks B. Hence C(S) attacks A.
106

fiClosure and Consistency In Logic-Associated Argumentation

Suppose C(S) defends itself against all attacks. Let A attack S in AF0 . Let B = C(A).
From assertion 3, it follows B attacks C(S). Therefore C(S) attacks B. Hence S attacks
A.
5. Follows immediately from assertion 3. 
Theorem 8 For each complete extensions E of AF0 there is a complete extension E  of
AF1 and vice versa such that following properties hold:
1. C(E) = Core(E  )
2. For each literal l  L0 , l  Cnl(E) iff l  Cnl(E  )
Proof Let E be a complete extension of AF0 . From assertion 4 in lemma 10, it follows
S = C(E) is admissible. Let AS be the set of assumptions acceptable wrt S. We show
that E  = S  AS is complete. Let B in AF1 be acceptable wrt E  . Suppose B is not an
assumption. Let A = C 1 (B). From lemma 10, assertion 5, A is acceptable wrt E. Hence
A  E. Therefore B  S. If B is an assumption, B  AS . We have proved that E  is
complete and Core(E  ) = C(E). The uniqueness of E  follows directly from the lemma 9.
Let l  L0 such that l  Cnl(E  ). Since l 6 A, it is clear that l  Cnl(Core(E  )). Hence
l  Cnl(C(E)). From the first assertion in lemma 10, it follows l  Cnl(E). 
Theorem 9 If AL0 satisfies the self-contradiction axiom then AL1 satisfies the ab-selfcontradiction axiom.
Proof Suppose AL0 satisfies the self-contradiction axiom. Let X  A be an inconsistent
set of assumptions in T (AS). We want to show that there exists   X such that  
CN1 (X). Suppose the contrary. It follows immediately that there is atom a such that
{a, a}  CN1 (X). There are two cases.
Case 1: {a, a}  A =
6 . Since a 6 A, a is an assumption. As classical negation
does not apply to negation-as-failure literal, it follows a = Oj(d) for some d  RD. From
Oj(d) = a  CN1 (X), this is a contradiction to the hypothesis that 6   X such that
  CN1 (X). This case hence can not occur.
Case 2: {a, a}  A = . Therefore {a, a}  X = . Let S1 be the set of all arguments
in AR1 \ A whose support is a subset of X. From {a, a}  CN1 (X) \ X, it follows S1 6= .
It is not difficult to see that Cnl(S1 ) = CN1 (X) \ X. Let S0 be a set of arguments
from AR0 such that S0 = C 1 (S1 ). From Cnl(S0 ) = Cnl(S1 ), it follows that Cnl(S0 ) is
closed (wrt CN0 ). It is also easy to see that Sub(S0 ) = S0 . Let BS be the set of basic
defeasible arguments in S0 . From lemma 4, it is clear that CN0 (Cnl(BS)) = Cnl(S0 ). Since
{a, a}  CN1 (X) \ X = Cnl(S0 ) = CN0 (Cnl(BS)), Cnl(BS) is hence also inconsistent
wrt AS. Because AL0 satisfies the self-contradiction axiom, there is a literal h  Cnl(BS)
such that h  CN0 (Cnl(BS)). Let  = not h. From h  Cnl(BS), it follows  
supp(C(BS))  supp(S1 ) = X. From h  CN0 (Cnl(BS)) = Cnl(S1 ) = CN1 (X) \ X, it
follows   CN1 (X). Contradiction.
We have proved that AL1 satisfies the assumption-based self-contradiction axiom. 
107

fiDung & Thang

Appendix F. Section 7
Lemma 11 If all minimal conflict sets are binary and the attack relation att is contextsensitive, conflict-dependent and symmetric then LAF = (AF, , AL, Cnl) is a compact
and cohesive logic-associated argumentation framework.
Proof To show that LAF is a logic-associated argumentation framework, we need to show
that for A, B, C  AR, if C attacks B and B  A then C attacks A. If B = A, there is nothing to prove. Suppose B = ({}, ) for some   supp(A). From the conflict-dependency,
it follows supp(C)  {} is inconsistent. Hence supp(C)  supp(A) is inconsistent. From the
context-sensitivity and symmetry of attack relation, it follows C attacks A.
Let S be a set of arguments and   CN (Cnl(Sub(S))). Hence there exists a finite
X  supp(S) such that   CN (X). Let A = (X, ). Let X = {({}, ) |   X}. It is
clear that X  Sub(S). We show that X is a base of A. Suppose B attacks A. Hence from the
conflict-dependency of att, there exists a minimal conflict set {, } such that   supp(A),
  supp(B). Hence B attacks the argument ({}, )  X . Hence A  GN (S). We have
proved CN (Cnl(Sub(S)))  Cnl(GN (S). Hence from lemma 2, AF is compact.
Let S be an inconsistent set of arguments. Hence supp(S) is inconsistent. There exists a
binary minimal conflict set {, }  supp(S). Hence arguments A = ({}, ), B = ({}, )
attack each other. As A, B  GN (S), GN (S) is conflicting. 

References
Amgoud, L., & Besnard, P. (2009). Bridging the gap between abstract argumentation
systems and logic. In SUM, pp. 1227.
Bondarenko, A., Dung, P., Kowalski, R., & Toni, F. (1997). An abstract, argumentationtheoretic approach to default reasoning. Artif. Intell., 93, 63101.
Caminada, M., & Amgoud, L. (2007). On the evaluation of argumentation formalisms.
Artificial Intelligence, 171, 286310.
Caminada, M., Carnielli, W., & Dunne, P. (2012). Semi-stable semantics. Journal of Logic
and Computation, 22 (5), 12071254.
Dung, P. M. (1995). On the acceptability of arguments and its fundamental role in nonmonotonic reasoning, logic programming and n-person gamescceptability of arguments and
its fundamental role in nonmono- tonic reasoning, logic programming and n-person
games. Artif. Intell., 77 (2), 321358.
Dung, P. M., & Thang, P. M. (2011). Closure and consistency rationalities in logic-based argumentation. In Balduccini, M., & Son, T. C. (Eds.), Logic Programming, Knowledge
Representation, and Nonmonotonic Reasoning, Vol. 6565, pp. 3343. Springer.
Garcia, A., & Simari, G. (2004). Defeasible logic programming: An argumentative approach.
TPLP, 4 (1-2), 95138.
Gelfond, M., & Lifschitz, V. (1988). The stable model semantics of logic programming. In
ICLP/SLP, pp. 579597. MIT Press.
108

fiClosure and Consistency In Logic-Associated Argumentation

Gelfond, M., & Lifschitz, V. (1990). Logic programs with classical negation. In ICLP, pp.
579597. MIT Press.
Governatori, G., Maher, M., Antoniou, G., & Billington, D. (2004). Argumentation semantics for defeasible logic. J. Log. Comput., 14 (5), 675702.
Lifschitz, V. (1999). Answer set planning (abstract). In LPNMR, pp. 373374. MIT Press.
Modgil, S., & Prakken, H. (2013). A general account of argumentation with preferences.
Artificial Intelligence, 195, 361397.
Nielsen, S., & Parson, S. (2007). A generation of dungs abstract framework for argumentation: Arguing with sets of attacking arguments. In LNCS, No. 4766, pp. 5473.
Springer Verlag.
Pollock, J. (1995). Cognitive carpentry: A blueprint for how to build a person.. MIT Press,
Cambridge MA.
Pollock, J. (1987). Defeasible reasoning. Cognitive Science, 11 (4), 481518.
Prakken, H. (2010). An abstract framework for argumentation with structured arguments.
J. Arguments and Computation, 1 (2), 93124.
Prakken, H. (2012). Some reflection on two current trends in formal argumentation. In Artikis, A., Craven, R., Cicekli, N. K., Sadighi, B., & Stathis, K. (Eds.), Logic Programs,
Norms and Action, Vol. 7360 of Lecture Notes in Computer Science, pp. 249272.
Springer Verlag.
Toni, F. (2008). Assumption-based argumentation for closed and consistent defeasible reasoning. JSAI, 390402.
Wu, Y. (2012). Between Arguments and Conclusions. Ph.D. thesis, University of Luxemburg.

109

fi