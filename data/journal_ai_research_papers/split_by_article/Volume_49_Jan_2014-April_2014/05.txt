Journal of Artificial Intelligence Research 49 (2014) 601-633

Submitted 10/13; published 04/14

Algorithms and Applications for the
Same-Decision Probability
Suming Chen
Arthur Choi
Adnan Darwiche

suming@cs.ucla.edu
aychoi@cs.ucla.edu
darwiche@cs.ucla.edu

Computer Science Department
University of California, Los Angeles
Los Angeles, CA 90095

Abstract
When making decisions under uncertainty, the optimal choices are often difficult to
discern, especially if not enough information has been gathered. Two key questions in this
regard relate to whether one should stop the information gathering process and commit
to a decision (stopping criterion), and if not, what information to gather next (selection
criterion). In this paper, we show that the recently introduced notion, Same-Decision
Probability (SDP), can be useful as both a stopping and a selection criterion, as it can provide additional insight and allow for robust decision making in a variety of scenarios. This
query has been shown to be highly intractable, being PPPP -complete, and is exemplary of
a class of queries which correspond to the computation of certain expectations. We propose the first exact algorithm for computing the SDP, and demonstrate its effectiveness on
several real and synthetic networks. Finally, we present new complexity results, such as the
complexity of computing the SDP on models with a Naive Bayes structure. Additionally,
we prove that computing the non-myopic value of information is complete for the same
complexity class as computing the SDP.

1. Introduction
Probabilistic graphical models have often been used to model a variety of decision problems,
e.g., in medical diagnosis (Pauker & Kassirer, 1980; Kahn, Roberts, Shaffer, & Haddawy,
1997; van der Gaag & Coupe, 1999), fault diagnosis (Lu & Przytula, 2006), classification
(Friedman, Geiger, & Goldszmidt, 1997; Ramoni & Sebastiani, 2001; Jordan, 2002), troubleshooting (Heckerman, Breese, & Rommelse, 1995), educational diagnosis (Butz, Hua, &
Maguire, 2004; Arroyo & Woolf, 2005; Millan, Descalco, Castillo, Oliveira, & Diogo, 2013),
and in intrusion detection (Kruegel, Mutz, Robertson, & Valeur, 2003; Modelo-Howard,
Bagchi, & Lebanon, 2008). In these and similar applications, a decision maker is typically
in a position where they must decide which tests to perform or observations to make in
order to make a better informed decision. Perhaps more critically, a decision maker must
also decide when to stop making observations and commit to a particular decision.
The Same-Decision Probability (SDP) was recently proposed by Darwiche and Choi
(2010), in order to help quantify the robustness of a decision, in the context of decisionmaking with Bayesian networks. In short, the SDP is the probability that we would make
the same decision, if we were to perform further observations that have yet to be made.
As such, the SDP can be treated as a measure for a decisions robustness with respect to
c
2014
AI Access Foundation. All rights reserved.

fiChen, Choi & Darwiche

unknown variables, quantifying our confidence that we would make the same decision, even
if we made further observations.
In this paper, we show how we can apply the SDP as a tool for information gathering, in
particular, as a way to determine if we should stop information gathering (as a stopping criterion), and if not, which pieces of information to gather next (as a selection criterion). We
compare the SDP to classical stopping and selection criteria through illustrative examples.
For instance, we demonstrate that the SDP can distinguish between stable and unstable
decisions that are indistinguishable by classical criteria. Additionally, we also show that
there are scenarios where classical criteria may call for performing further observations, but
where the SDP indicates that our decision is unlikely to change.
Notably, the SDP has been shown to be highly intractable, by Choi, Xue, and Darwiche
(2012), and the exact computation of the SDP has been limited to toy examples, with
few variables, through brute-force enumeration. In this paper, we propose the first exact
algorithm for computing the SDP. This algorithm can be applied to real-world networks that
are out of the scope of both brute-force enumeration and previously proposed approximation
algorithms, and can be further applied to synthetic networks with as many as 100 variables.
We further provide new complexity results on the SDP, which both highlight its relative
intractability (even in Naive Bayes networks), but also its relationship to a broader class
of expectation computation problems, emphasizing the broader importance of developing
effective algorithms for the SDP and related problems.
Our paper is thus structured as follows. We first introduce notation and discuss some
common stopping and selection criteria in Section 2. We then review our previously introduced work on the SDP in Section 3. In Section 4, we discuss how the SDP can be applied
as both a stopping criterion and as a selection criterion. In Section 5, we present a novel
exact algorithm for computing the SDP and discuss experimental results in Section 6. In
Section 7, we present some recent complexity results on the SDP. We then conclude our
paper in Section 8.

2. Related Work
When making decisions under uncertainty, it may be difficult to finalize a decision in the
presence of unobserved variables. Given these unobserved variables, there are two fundamental questions. The first question is whether, given the current observations, the decision
maker is ready to commit to a decision. We will refer to this as the stopping criterion for
making a decision. Assuming the stopping criterion is not met, the second question is what
additional observations should be made before the decision maker is ready to make a decision. This typically requires a selection criterion based on some measure for quantifying an
observations value of information (VOI). In this section, we first introduce some necessary
notation, and then review some commonly used stopping and selection criteria.
2.1 Notation
Throughout this paper, we use standard notation for variables and their instantiations,
where variables are denoted by upper case letters X and their instantiations by lower case
letters x. Additionally, sets of variables are denoted by bold upper case letters X and
their instantiations by bold lower case letters x. We assume that the state of the world is
602

fiAlgorithms and Applications for the Same-Decision Probability

described over random variables X, where the evidence E  X includes all known variables,
and where hidden variables U  X include all unknown variables. By definition, E  U = 
and EU = X. We often discuss the ramifications of observing a subset of hidden variables
H  U on decision making. Furthermore, we use D  U to denote the main hypothesis
variable that forms the basis for a decision.1
2.2 Stopping Criterion
Given that there are hidden variables in our model and we have the choice of whether or
not to observe some subset, a stopping criterion determines when we stop the process of
information gathering and commit to a decision. Note that we are concerned with making
a decision based on some hypothesis variable, such as the state of a patients health. For
a stopping criterion, the most basic approach used in a variety of domains is to commit
to a decision once the belief about a certain event crosses some threshold, as is done by
Pauker and Kassirer (1980), Kruegel et al. (2003), and Lu and Przytula (2006). However,
this approach may not be robust, as further observations may cause the belief about the
event to fall below the threshold. Van der Gaag and Bodlaender (2011) note the possibility
of this and pose the STOP problem, which asks whether or not the present evidence gathered
is sufficient for diagnosis, or if there exists further relevant evidence that can and should be
gathered.
Other approaches involve ensuring that the uncertainty surrounding the decision variable
is sufficiently reduced. For instance, Gao and Koller (2011) stop information gathering when
1) the conditional entropy of the interest variable is reduced beyond some threshold or 2)
the margin between the first and second most likely states of the interest variable is above
some threshold. In any case, it is clear that threshold-based stopping criteria are ubiquitous
for decision making under uncertainty.
Alternatively, there are also several stopping criteria that involve the existence of a
budget, which can be an abstract quantity to represent the available resources that can
be used for information gathering. The budget may be representative of the number of
observations that are allowed (Modelo-Howard et al., 2008; Munie & Shoham, 2008; Yu,
Krishnapuram, Rosales, & Rao, 2009; Chen, Low, Tan, Oran, Jaillet, Dolan, & Sukhatme,
2012a), or in terms of a monetary amount that may be spent on observations of varying
cost (Greiner, Grove, & Roth, 2002; Krause & Guestrin, 2009; Bilgic & Getoor, 2011). In the
context of a budget, the general stopping criterion is then to continue to make observations
until the budget is completely expended, as is done by Modelo-Howard et al. (2008) and
Munie and Shoham (2008). Krause and Guestrin (2009) and Bilgic and Getoor (2011) note
that the budget should be expended with the caveat that the value of information of an
observation is at least the cost of the observation.
2.3 Selection Criterion: Value of Information
Should the stopping criterion determine that further observations are necessary, a selection
criterion is then used to determine which variables should be selected for observation.
Ideally, we want to observe all variables that will give us additional information with regards
1. The work presented in this paper can be extended to the case of multiple hypothesis variables, but we
focus here on the case of one hypothesis variable for simplicity.

603

fiChen, Choi & Darwiche

to our decision variable. However, due to resource constraints (such as a limited budget) this
is often not possible. In this basic approach, a common selection criterion is to then select
observations that will minimize the conditional entropy of the decision variable (Vomlel,
2004; Lu & Przytula, 2006; Krause & Guestrin, 2009; Yu et al., 2009; Zhang & Ji, 2010;
Gao & Koller, 2011; Ognibene & Demiris, 2013; Shann & Seuken, 2013). The entropy of a
variable X is defined as:
H(X) = 

X

Pr (x) log Pr (x)

(1)

x

and is a measure of the uncertainty of the variables state  if the entropy of a variable is
high, that means that there is much uncertainty on what value that variable takes.2 The
uncertainty of the decision variables true state makes it difficult to make a decision. Thus, a
natural selection criterion is to observe variables to minimize the conditional entropy of the
decision variable, where the conditional entropy of variable D given variable X is defined
as:
H(D | X) =

X

H(D | x)Pr (x)

(2)

x

The conditional entropy is thus an expectation of what the entropy would be after
observing X. A similar selection criterion is to observe variables that will most greatly
increase the margin between the posterior probabilities of the first and second most-likely
states of the decision variable (Krause & Guestrin, 2009).
These selection criteria involve utilizing the notion of value of information (VOI) in order
to quantify the value of various observations (Lindley, 1956; Stratonovich, 1965; Howard,
1966; Raiffa, 1968). The VOI of a set of variables can depend on various measures. In
the two example selection criteria we have discussed, those measures would be entropy and
margins of confidence. For instance, if observing a variable X would reduce the conditional
entropy H(D | X) more than observing variable X  would (H(D | X) < H(D | X  )), then
the value of observing X would be higher.
Krause and Guestrin (2009) define a general notion of VOI that is based on different
reward functions. In particular, given an arbitrary reward function R,3 a hypothesis variable
D, and evidence e, the VOI of observing hidden variables H is:
V(R, D, H, e) = ER(R, D, H, e)  R(Pr (D | e))

(3)

where
ER(R, D, H, e) =

X

R(Pr (D | h, e))Pr (h | e)

(4)

h

is the expected reward of observing variables H and R(Pr (D | e)) is the reward had
we not observed variables H. By this definition, the reward function used by Lu and
2. In information theory, the logarithm is typically assumed to be base-2 (Cover & Thomas, 1991), which
we also assume throughout the paper for convenience.
3. A reward function is assumed to take as input the probability distribution of the hypothesis variable,
Pr (D), and return some numeric value. We discuss reward functions further in Section 7.2.

604

fiAlgorithms and Applications for the Same-Decision Probability

D

D
+


Pr (D | E1 = +, E2 = +)
0.880952
0.119048

X1

X2

E1

E2

H1

H2

Figure 1: A simple Bayesian network, under sensor readings {E1 = +, E2 = +}. Variables H1
and H2 represent the health of sensors E1 and E2 . On the left is the posterior on
the decision variable D. Network CPTs can be found in Appendix C in Figure 13.

Przytula (2006) and Krause and Guestrin (2009) to select variables in order to minimize
the conditional entropy is then R(Pr (D | e)) = H(D | e), so maximizing the expected
reward of observing variables H is then equivalent to minimizing the conditional entropy
H(D | H). Some other possible reward functions involve utility-based reward functions or
threshold-based reward functions (Munie & Shoham, 2008).4
Note that the vast majority of selection criteria use a myopic approach, in which out of
all possible observations, just one observation is considered at a time, and the observation
with the highest VOI is selected each time. This approach is greedy and short-sighted 
the optimal VOI can only be computed by computing it non-myopically (Bilgic & Getoor,
2011). We discuss the usage of non-myopic VOI in Appendix A.1.

3. Same-Decision Probability
The Same-Decision Probability (SDP) was initially introduced by Darwiche and Choi (2010)
as a confidence measure for threshold-based decisions in Bayesian networks under noisy
sensor readings. Prior to formally defining the SDP, we first show an example to provide
intuition. Consider now the Bayesian network in Figure 1, which models a scenario involving
a hypothesis variable D, and two noisy sensors E1 and E2 that influence our belief in some
hypothesis d. Networks such as this are typically used to compute the belief in the hypothesis
given some sensor readings, Pr (d | e). The basis of whether or not to make a decision often
then depends on whether or not the posterior probability of that hypothesis d surpasses
some threshold T (Hamscher, Console, & de Kleer, 1992; Heckerman et al., 1995; Kruegel
et al., 2003; Lu & Przytula, 2006).
Figure 1 shows a particular reading of two sensors and the resulting belief Pr (D = + |
E1 = +, E2 = +). Suppose our threshold is T = 0.6, then as Pr (d | e)  T , we would make a
certain decision. Notice in Figure 1 that the health of those sensors is modeled by variables
H1 and H2 . A sensor can either be truthful, stuck positive (readings always display as +),
or lying (readings show the opposite value of the actual value) (Darwiche & Choi, 2010).
If those variables had been observed, they could have informed us of the trustworthiness of
4. For more on reward functions, see the list provided by Krause and Guestrin (2009).

605

fiChen, Choi & Darwiche

H1
t
p
l
t
p
l
t
p
l

H2
t
t
t
p
p
p
l
l
l

Pr (h | e)
0.781071
0.096429
0.001071
0.096429
0.021429
0.001190
0.001071
0.001190
0.000119

Pr (d | h, e)
0.90
0.82
0.10
0.90
0.50
0.10
0.90
0.18
0.10

Table 1: Scenarios h for sensor readings e = {E1 = +, E2 = +} for the network in Figure 1,
where H = {H1 , H2 }. Cases above the threshold T = 0.6 are in bold. Note t, p, l
respectively represent a truthful, stuck positive, and lying sensor.

the sensors E1 and E2 and thus allow us to make a better decision. We want to make a
more-informed decision based on the probability Pr (d | h, e) instead of making a decision
based on just Pr (d | e).
Consider Table 1, which enumerates all of the possible health states of the sensors. In
only four of these cases does the probability of the hypothesis pass the threshold (in bold),
leading to the same decision. In the other five scenarios, a different decision would have
been made. The SDP is thus the probability of the four scenarios in which the same decision
would have been made. For this example, the SDP is:
0.781071 + 0.096429 + 0.096429 + 0.001071 = 0.975
indicating a relatively robust decision.
Choi et al. (2012) define the SDP formally as:
Definition 1 (Same-Decision Probability). Let N be a Bayesian network that is conditioned
on evidence e, where we are further given a hypothesis d, a threshold T , and a set of
unobserved variables H. Suppose we are making a decision that is confirmed by the threshold
Pr (d | e)  T . The Same-Decision Probability in this scenario is
X
[Pr (d | e, h)  T ]Pr (h | e),
(5)
SDP (d, H, e, T ) =
h

where [Pr (d | h, e)  T ] is an indicator function such that

1 if Pr (d | e, h)  T
[Pr (d | h, e)  T ] =
0 otherwise.
The SDP is notably hard to compute. Choi et al. (2012) prove that computing the SDP
is in general PPPP -complete.5 From previous work on the SDP (Darwiche & Choi, 2010;
Choi et al., 2012), the two options for computing the SDP are
5. The class PPPP can be thought of as a counting variant of the NPPP class, which contains the polynomial
time hierarchy PH and for which the MAP problem is complete (Park & Darwiche, 2004).

606

fiAlgorithms and Applications for the Same-Decision Probability

D
+


Pr (D)
0.5
0.5

D

S1

S2

S3

S4

Figure 2: A Bayesian network for intrusion detection, with its CPTs given in Table 2
1. An approximate algorithm developed by Choi et al. (2012). This algorithm uses an
augmented variable elimination algorithm that produces a potentially weak bound
based on the one-sided Chebyshev inequality.
2. A naive brute-force method that enumerates over all possible instantiations.

4. Applying the Same-Decision Probability
We investigate the use of the SDP as a stopping criterion and a selection criterion. We
contrast the usage of the SDP with traditional methods discussed in Section 2, and find
that using the SDP can provide more insight to a decision maker in some scenarios.
4.1 SDP as a Stopping Criterion
By the definition of SDP, we can see that calculating a high SDP, in contrast to calculating
a low SDP, would indicate a higher degree of readiness to make a decision, as the chances
of the decision changing given further evidence gathering is lower. In this section we show
that computing the SDP can provide additional insight and thus can distinguish scenarios
that are otherwise indistinguishable based on standard stopping criteria.
The threshold-based decision is a classical notion in decision making under uncertainty,
and it is commonly used as it requires no utilities to be elicited. Examples of thresholdbased decisions are very prevalent in educational diagnosis (Gertner, Conati, & VanLehn,
1998; Conati, Gertner, & VanLehn, 2002; Butz et al., 2004; Xenos, 2004; Arroyo & Woolf,
2005; Munie & Shoham, 2008), intrusion detection (Kruegel et al., 2003; Modelo-Howard
et al., 2008), fault diagnosis (Heckerman et al., 1995; Lu & Przytula, 2006), and medical
diagnosis (Pauker & Kassirer, 1980; Kahn et al., 1997; van der Gaag & Coupe, 1999).
Consider the sensor network in Figure 2, which may correspond to an intrusion detection
application as discussed by Kruegel et al. (2003). Here, the hypothesis variable is D =
{+, } with D = + implying an intrusion. Suppose we commit to a decision, and stop
performing observations, when our belief in the event D = + surpasses some threshold T ,
say T = 0.55. There are four sensors in this model, S1 , S2 , S3 and S4 , whose readings may
affect this decision.
Consider the two following scenarios:
1. S1 = + and S2 = +.
2. S3 = + and S4 = +.
607

fiChen, Choi & Darwiche

D S1 Pr (S1 | D)
+ +
0.55
+ 
0.45
 +
0.45
0.55
 

D S3 Pr (S3 | D)
+ +
0.60
+ 
0.40
 +
0.40
0.60
 

D S2 Pr (S2 | D)
+ +
0.55
0.45
+ 
 +
0.45
 
0.55

D S4 Pr (S4 | D)
+ +
0.65
0.35
+ 
 +
0.35
 
0.65

Table 2: CPTs for the network in Figure 2. Parameterization 1.
Since Pr (D = + | S1 = +, S2 = +) = 0.60 > 0.55 and Pr (D = + | S3 = +, S4 = +) =
0.74 > 0.55, it is clear that in both cases that the threshold has been crossed. We deem
that no further observations are necessary based on our beliefs surpassing our threshold.
Hence, when using thresholds as a stopping criterion (as is commonly done, see Kruegel
et al., 2003; Lu & Przytula, 2006; Gao & Koller, 2011), the two scenarios are identical in
that no more information is gathered and a decision is made.
From the viewpoint of SDP, however, these two scenarios are very different. In particular, the first scenario leads to an SDP of 52.97%. This means that there is a 47.03% chance
that a different decision would be made if we were to further observe the two unobserved
sensors S3 and S4 . The second scenario, however, leads to an SDP of 100%. That is, we
would with certainty know that we would make the same decision if we were to also observe
the two unobserved sensors S1 and S2 : no matter what the readings of S1 and S2 could be,
our beliefs in the event D = + would always surpass our threshold 0.55. Indeed, as we can
see in Table 2, the sensors S1 and S2 are not as strong as sensors S3 and S4 , and in this
example, they are not strong enough to reverse our decision.
This example provides a clear illustration of the utility of the SDP as a stopping criterion.
However, some may argue that it is clear that in the second case, we should stop gathering
information as Pr (D = + | S3 = +, S4 = +) = 0.74 has a larger margin from the threshold
than Pr (D = + | S1 = +, S2 = +) = 0.60.6 However, we show with the following example
that deciding to stop based solely on the margin is not robust. Consider once again the
sensor network in Figure 2 and the parameterizations of the sensor network shown in Table 5
and Table 6 (found in Appendix C), which we respectively refer to as Case 1 and Case 2.7
Note that in this example, we use a threshold of T = 0.5.
In both cases, when S3 = + and S4 = + are observed, Pr (D = + | S3 = +, S4 = +)  T .
In particular,
1. Case 1: Pr (D = + | S3 = +, S4 = +) = 0.775.
6. Thus using the aforementioned margins of confidence stopping criterion used by Gao and Koller (2011).
7. Note that the exact numbers of the CPTs are not necessary to grasp these examples  CPTs are
provided so that readers may reconstruct these networks.

608

fiAlgorithms and Applications for the Same-Decision Probability

2. Case 2: Pr (D = + | S3 = +, S4 = +) = 0.599.
By using the previously discussed margin stopping criterion, it would seem that in Case
1 we could stop information gathering, whereas for Case 2 more information gathering is
necessary. However, we can compute the SDP for both cases for more insights on the
nature of robustness in these settings. For Case 1, we find that the SDP is 0.781, whereas
for Case 2, we find that the SDP is 1.0  even though in Case 1 the margin is higher,
there is a greater chance that the decision would change given further information. This
demonstrates that we cannot use solely the margin to determine whether or not to stop
information gathering.
It is clear from these examples that SDP is a useful stopping criterion. First, the SDP
can pinpoint situations where further observations are unnecessary as they would never
reverse the decision under consideration. Second, the SDP can also identify situations
where the decision to be made is not robust, and is likely to change upon making further
observations. In addition to these examples, in Appendix A.2 we show how the SDP can be
a useful stopping criterion in the context of utility-based decisions (e.g. influence diagrams).
4.2 SDP as a Selection Criterion
We now turn our attention to the use of SDP as a criterion for deciding which variables to
observe next, assuming that some stopping criterion indicates that further observations are
necessary. Our proposal is based on using VOI as the selection criterion (see Equation 3),
while choosing the SDP as the reward function. We call this the SDP gain, and it is formally
defined as:
Definition 2. Given Definition 4 of an SDP, the SDP gain of observing variables G out
of variables H is defined as the expected SDP of observing G  H subtracted by the SDP
over H:
G(G) = E(G, H, e, T )  SDP (d, H, e, T ),
(6)
where the expected SDP is defined as:
E(G, H, e, T ) =

X

SDP (d, H \ G, ge, T )Pr (g|e)

(7)

g

and d is defined as the decision made given the current evidence.
Note that if we observe some variables G  H such that the expected SDP is 1.0, that
indicates that after observing G and making a decision, the remaining variables H \ G will
be rendered completely redundant  their observation will have no effect on the decision.
The goal of using the SDP gain as a selection criterion is to observe those variables which,
on average, will allow for the most stable decision given the collected observations.
We will next provide an example of using SDP as a selection criterion, contrasting it
with two other selection criteria: One based on reducing entropy of the hypothesis variable
D, and another based on maximizing the gap between the decision probability Pr (d|e) and
the given threshold T (Krause & Guestrin, 2009). While both criteria can be motivated as
reducing uncertainty, we show that both can indeed lead to less stable decisions than if the
SDP were to be used.
609

fiChen, Choi & Darwiche

D

D
+


Pr (D)
0.5
0.5
S1

S2

Figure 3: A Bayesian network with its CPTs given in Appendix C.

The example is given by the Bayesian network in Figure 3, where D is the hypothesis
variable and S1 /S2 are sensors. A decision is triggered when Pr (D = + | e)  .80, where
evidence e is over sensors S1 and S2 . With no observations (empty evidence e), the SDP
is 0.595, suggesting that further observations may be needed. Assuming a limited number
of observations (Heckerman et al., 1995), and using a myopic approach of observing one
variable at a time (Dittmer & Jensen, 1997), we need now to select the next variable to
observe.
Note that maximizing VOI with negative entropy as the reward function amounts to
maximizing mutual information, as H(D, X) = H(D)  H(D | X) (Cover & Thomas, 1991;
Krause & Guestrin, 2005). The mutual information between variable D and sensor S2 is
0.53 whereas the mutual information between D and sensor S1 is 0.278. Hence, observing
S2 will reduce the entropy of D the most. In terms of margin of confidence, another reward
function used by Krause and Guestrin (2009), observing S2 will on average lead to a 0.7
margin between the states D = + and D = , whereas observing S1 will only lead to a 0.6
margin between the two states.
However, if we compute the corresponding SDP gains, G(S1 ) and G(S2 ), we find that
observing S1 will, on average, lead to improving the decision stability the most. In particular, observing S1 would give us an SDP of either 1 or 0.81  for an expected SDP
of 0.905, whereas observing S2 would give us an SDP of either 0.7625, 0.5, or 1  for an
expected SDP of 0.805. Therefore, G(S1 ) = 0.31 and G(S2 ) = 0.21. Hence, observing S1
will on average allow us to make a decision that is less likely to change due to additional
information (beyond S1 ).
Some intuition to why this occurs is that although observing S2 leads to greater information gain than observing S1 , it is superfluous information. Note that Pr (D = + | S2 = ) =
0.0625, whereas Pr (D = + | S1 = ) = 0.2. Clearly, we can see that observing S2 can lead
to a more skewed distribution with minimal conditional entropy. However, in the context
of threshold-based decisions, we make a decision based solely on whether Pr (D = + | e) is
above or below the threshold, meaning that we may not put as much emphasis on how much
below or above the threshold Pr (D = + | e) is. In this case, although observing S2 can on
average lead to a more extreme distribution, observing S2 = o leads to making an extremely
nonrobust decision (a decision that would change 50% of the time with observation of S1 ).
Observing S1 before making a decision leads to a much more robust decision. This example
demonstrates the usefulness of SDP as a selection criterion for threshold-based decisions,
as the SDP can be used to select observations that lead to more robust decisions.
610

fiAlgorithms and Applications for the Same-Decision Probability

D
+


Pr (D)
0.3
0.7

D

E1

H1

H3

H2

Figure 4: A Naive Bayes network (CPTs defined in Appendix C).

5. Computing the Same-Decision Probability
Computing the SDP involves computing an expectation over the hidden variables H. The
naive brute-force algorithm would enumerate and check whether Pr (d | h, e)  T for all
instantiations h of H. We now present an algorithm that can save us the need to explore
every possible instantiation of h. To make the algorithm easier to understand, we will first
describe how to compute the SDP in a Naive Bayes network. This is no trivial problem 
we show in Section 7 that computing the SDP in a Naive Bayes network is NP-hard. We
then generalize our algorithm to arbitrary networks.
5.1 Computing the SDP in Naive Bayes Networks
We will find it more convenient to implement the test Pr (d | h, e)  T in the log-odds
domain, where:
log O(d | h, e) = log

Pr (d | h, e)
Pr (d | h, e)

(8)

T
We then define the log-odds threshold as  = log 1T
and, equivalently, test whether
log O(d | h, e)  .
In a Naive Bayes network with D as the class variable, H and E as the leaf variables,
and Q  H, the posterior log-odds after observing a partial instantiation q = {h1 , . . . , hj }
can be written as:

log O(d | q, e) = log O(d | e) +

j
X

w hi

(9)

i=1

where whi is the weight of evidence hi and defined as:
whi = log

Pr (hi | d, e)
Pr (hi | d, e)

(10)

The weight of evidence whi is then the contribution of evidence hi to the quantity
log O(d | q, e) (Chan & Darwiche, 2003). Note that all weights can be computed in time
and space linear in |H| using a floating point representation.8 Table 3 depicts the weights
of evidence for the network in Figure 4.
8. Additionally, note that for Equation 10, since in Naive Bayes networks Hi is d-separated from E given
d, the term e can be dropped from the equation. We leave the term in because for general networks, Hi
may not be d-separated from E.

611

fiChen, Choi & Darwiche

i
1
2
3

w hi
3.0
1.22
1.22

w hi
-2.17
-1.22
-1.22

Table 3: Weights of evidence for the attributes in Figure 4.
H1
0.0
H2
3.0

H2
-2.17

H3
4.22
5.44

H3
1.78
3.0

3.0

H3
0.95
0.56

0.27

2.17

H3
3.39
2.17

4.61

Figure 5: The search tree for the network of Figure 4. A solid line indicates + and a dashed
line indicates . The quantity log O(d | q, e) is displayed next to each node q in
the tree. Nodes with log O(d | q, e)   = 0 are shown in bold.

One can then compute the SDP by enumerating the instantiations of variables H and
then using Equation 9 to test whether log O(d | h, e)  . Figure 5 depicts a search tree
for the Naive Bayes network in Figure 4, which can be used for this purpose. The leaves of
this tree correspond to instantiations h of variables H. More generally, every node in the
tree corresponds to an instantiation q, where Q  H.
A brute-force computation of the SDP would then entail:
1. Initializing the total SDP to 0.
2. Visiting every leaf node h in the search tree.
3. Checking whether log O(d | h, e)   and if so, adding Pr (h | e) to the total SDP.
Figure 5 depicts the quantity log O(d | q, e) for each node q in the tree, indicating that five
leaf nodes (i.e., five instantiations of variables H) will indeed contribute to the SDP.
We now state the key observation underlying our proposed algorithm. Consider the node
corresponding to instantiation H1 = + in the search tree, with log O(d | H1 = +, e) = 3.0.
All four completions h of this instantiation (i.e., the four leaf nodes below it) are such that
log O(d | h, e)   = 0. Hence, we really do not need to visit all such leaves and add their
contributions Pr (h|e) individually to the SDP. Instead, we can simply add Pr (H1 = +|e)
to the SDP, which equals the sum of Pr (h|e) for these leaves. More importantly, we can
detect that all such leaves will contribute to the SDP by computing a lower bound using the
weights depicted in Table 3. That is, there are two weights for variable H2 , the minimum
of which is 1.22. Moreover, there are two weights for variable H3 , the minimum of which
1.22. Hence, the lowest contribution to the log-odds made by any leaf below node H1 = +
612

fiAlgorithms and Applications for the Same-Decision Probability

H1
0.0
3.0

H2
-2.17
H3
0.95
0.27

3.39

2.17

Figure 6: The reduced search tree for the network of Figure 5.
will be 1.22  1.22 = 2.44. Adding this contribution to the current log-odds of 3.0 will
lead to a log-odds of .56, which still passes the given threshold.
A similar technique can be used to compute upper bounds, allowing us to detect nodes
in the search tree where no leaf below them will contribute to the SDP. Consider for example
the node corresponding to instantiation H1 = , H2 = , with log O(d | H1 = , H2 =
, e) = 3.39. Neither of the leaves below this node will contribute to the SDP as their
log-odds do not pass the threshold. This can be detected by considering the weights of
evidence for variable H3 and computing the maximum of these weights (1.22). Adding this
to the current log-odds of 3.39 gives 2.17, which is still below the threshold. Hence, no
leaf node below H1 = , H2 =  will contribute to the SDP and this part of the search tree
can also be pruned.
If we apply this pruning technique based on lower and upper bounds, we will actually
end up exploring only the portion of the tree shown in Figure 6. The pseudocode of our
final algorithm is shown in Algorithm 1. Note that it takes linear time to compute the
upper and lower bounds. Additionally, note that the specific ordering of H in which the
search tree is constructed is directly linked to the amount of pruning. We use an ordering
heuristic that ranks each query variable Hi by the difference of its corresponding upper and
lower bound  H is then ordered from greatest difference to lowest difference as to allow
for earlier pruning.
5.2 Computing the SDP in Arbitrary Networks
We will generalize our algorithm to arbitrary networks by viewing such networks as Naive
Bayes networks but with aggregate attributes. For this, we first need the following notion.
Definition 3. A partition of H given D and E is a set S1 , . . . , Sk such that: Si  H;
Si  Sj = ; S1  . . .  Sk = H; and Si is independent (d-separated) from Sj , i 6= j, given
D and E.
Figure 7 depicts an example partition.
The intuition behind a partition is that it allows us to view an arbitrary network as a
Naive Bayes network, with class variable D and aggregate attributes S1 , . . . , Sk . That is,
each aggregate attribute Si is viewed as a variable with states si , allowing us to view each
instantiation h as a set of values s1 , . . . , sk . We now have:

613

fiChen, Choi & Darwiche

Algorithm 1 Computing the SDP in a Naive Bayes network. Note: For q = {h1 , . . . , hj },
P
wq is defined as ji=1 whi .

input:
N : Naive Bayes network with class variable D
H: attributes {H1 , . . . , Hk }
: log-odds threshold
e: evidence
output: Same-Decision Probability p

main:
global p  0.0 (initial probability)
q  {} (initial instantiation is empty set)
depth  0 (initial depth of search tree)
DFS SDP(q, H, depth)
return p
1: procedure DFS SDP(q, H, depth)
P
2:
U pperBound  log O(d | e) + wq + ki=depth+1 maxhi whi
P
3:
LowerBound  log O(d | e) + wq + ki=depth+1 minhi whi
4:
if (U pperBound < ) then return
5:
else if (LowerBound  ) then
6:
add Pr (q | e) to p, return
7:
else
8:
if depth < k then
9:
for each value hdepth+1 of attribute Hdepth+1 do
10:
DFS SDP(qhdepth+1 , H \ Hdepth+1 , depth + 1)
Proposition 1. For a partial instantiation q = {s1 , . . . , sj },
log O(d | q, e) = log O(d | e) +

j
X

w si ,

(11)

i=1

where
wsi = log

Pr (si , | d, e)
Pr (si | d, e)

Proof.
Pr (d | q, e)
Pr (d | q, e)
Pr (d | e)Pr (s1 | d, e) . . . Pr (sj | d, e)
= log
Pr (d | e)Pr (s1 | d, e) . . . Pr (sj | d, e)

log O(d | q, e) = log

= log O(d | e) +

j
X
i=1

614

w si

(12)

fiAlgorithms and Applications for the Same-Decision Probability

E1

X1

H1

H4

D

X2

H3

H5

E2

X3

H6

H2

Figure 7: The partition of H given D and E is: S1 = {H1 , H2 , H3 } S2 = {H4 }, S3 =
{H5 , H6 }.

Since Equations 11 and 12 are analogous to Equations 9 and 10, we can now use Algorithm 1 on an arbitrary network. This usage, however, requires some auxiliary computations
that were not needed or were readily available for Naive Bayes networks. We discuss these
computations next.
5.2.1 Finding a Partition
We first need to compute a partition S1 , . . . , Sk , which is done by pruning the network
structure as follows: we delete edges outgoing from nodes in evidence E and hypothesis D,
and delete (successively) all leaf nodes that are neither in H, E or D. We then identify the
components X1 , . . . , Xk of the resulting network and define each non-empty Si = H  Xi
as an element of the partition. This guarantees that in the original network structure, Si
is d-separated from Sj by D and E for i 6= j (see (Darwiche, 2009)). In Figure 7, network
pruning leads to the components X1 = {X1 , X2 , E2 , H1 , H2 , H3 }, X2 = {D, E1 , H4 } and
X3 = {X3 , H5 , H6 }.
5.2.2 Computing Posterior Log-Odds, Probability and Weights of Evidence
The quantities O(d | e), Pr (q | e) and wsi , which are referenced on Lines 2, 3, and 6 of
the algorithm, have simple closed forms in Naive Bayes networks. For arbitrary networks,
however, computing these quantities requires inference which we do using the algorithm
of variable elimination as described by Darwiche (2009). Note that the network pruning
of deleting edges and removing the leaf nodes, as discussed above, guarantees that each
factor used by variable elimination will have all its variables in some component Xi . Hence,
variable elimination can be applied to each component Xi in isolation, which is sufficient
to obtain all needed quantities.
615

fiChen, Choi & Darwiche

5.2.3 Computing the Min and Max of Evidence Weights
We finally show how to compute the upper and lower bounds, maxsi wsi and minsi wsi ,
which are referenced on Lines 2 and 3 of the algorithm. These quantities can also be
computed using variable elimination, applied to each component Xi in isolation. In this
case, however, we must eliminate variables Xi \ Si first and then variables Si . Moreover,
the first set of variables is summed-out, while the second set of variables is maxd-out or
mind-out, depending on whether we need maxsi wsi or minsi wsi . Finally, this elimination
process is applied twice, once with evidence d, e and a second time with evidence d, e.
More precisely, for every component Xi we have a set of factors for the case where D = d
and where D = d. Using the same variable ordering, we perform variable elimination on both
sets of factors to eliminate
so that
are left with a
Q iany nonquery (intermediary) variables
Q we
i
i
i
set of factors d where d = Pr (Si , d, e), and a set of factors d where d = Pr (Si , d, e).
Since the elimination order was the same, there is thus a one-to-one matching between
i
Pr i (ei ,S )
factors from both sets, and we can define a new set of factors i = id = Pr id (ei ,Si ) . We
d

d

i

can then calculate wsi and wsi by respectively maximizing and minimizing out variables.
Note that summing out variables and then maximizing variables is the variable elimination
algorithm used by Dechter (1999) in order to solve MAP. Our algorithm here differs as we
perform both maximization and minimization (to both calculate wsi and wsi ), and do so on
the set of factors i instead of on the factors (di or di ) that result from simply summing
out the intermediary variables.
Note that similarly to Dechter (1999), as we are first summing out variables and then
performing some maximization (and minimization in our case), the elimination order in
this case is constrained, meaning that we may be forced to use a poor ordering for variable
elimination that results in a high treewidth.
5.3 Complexity Analysis
Let n be the number of variables in the network, h = |H|, and w = maxi wi , where
wi is the width of constrained elimination order used
on component Xi . The best-case

time complexityof our algorithm is then O n exp w and the worst-case time complexity is
O n exp (w + h) . The intuition behind these bounds is that computing
 the maximum and
minimum weights for each aggregate attribute takes time O n exp w . This also bounds
the complexity of computing O(d|e), Pr (q|e) and corresponding weights wsi . Moreover,
depending on the weights and the
 threshold T , traversing the search tree can take anywhere
from constant time to O exp h . Since depth-first
search can be implemented with linear

space, the space complexity is O n exp w .

6. Experimental Results
We performed several experiments on both real and synthetic networks to test the performance of our algorithm across a wide variety of network structures, ranging from simple
Naive Bayes networks to highly connected networks. Real networks were either learned from
datasets provided by the UCI Machine Learning Repository (Bache & Lichman, 2013) or
616

fiAlgorithms and Applications for the Same-Decision Probability

Network
car
emdec6g
tcc4e
ttt
caa
voting
nav
fire
chess

source
UCI
HRL
HRL
UCI
CRESST
UCI
CRESST
CRESST
UCI

|H|
|h|
6
144
8
256
9
512
9
19683
14
16384
16
65536
20 1572864
24 16777216
30 1610612736

naive
0.131
0.407
0.470
6.234
6.801
21.35
642.88



approx
0.118
0.245
0.257
0.133
0.145
0.176
0.856
0.183
*

new
0.049
0.294
0.149
0.091
0.167
0.128
0.178
0.508
15.53

Table 4: Algorithm comparison on real networks. We show the time, in seconds, it takes
each algorithm, naive, approx, and new to compute the SDP in different networks.
Note that  indicates that the computation did not complete in the 20 minute
time limit that we constrained. Moreover, * indicates that there was not sufficient
memory to complete the computation.

provided by HRL Laboratories and CRESST.9 The majority of the real networks used were
diagnostic networks, which made it clear which variable should be selected as the decision
variable as it would either be the knowledge or fault variable. For the unclear cases, the
decision variable was picked at random. Both query and evidence variables were selected
at random for all real networks.
Besides this algorithm, there are two other options available to compute the SDP: 1. the
naive method to brute-force the computation by enumerating over all possible instantiations
or 2. the approximate algorithm developed by Choi et al. (2012). To compare our algorithm
with these two other approaches, we compute the SDP over the real networks. For each
network we selected at least 80% of the total network variables to be query variables so
that we could emphasize how the size of the query set greatly influences the computation
time. Each computation was given 20 minutes to complete. As we believe that the value of
the threshold can greatly affect running time, we computed the SDP with thresholds T =
[0.01, 0.1, 0.2, . . . , 0.8, 0.9, 0.99] and took the worst-case time. The results of our experiments
with the three algorithms are shown in Table 4. Note that |H| is the number of query
variables and |h| is the number of instantiations the naive algorithm must enumerate over.
Moreover,  indicates that the computation did not complete in the 20 minute time limit and
* indicates that there was not sufficient memory to complete the computation. The networks
{car,ttt,voting,nav,chess} are Naive Bayes networks whereas the networks {caa,fire} are
polytree networks and the others are more general networks.
Given the real networks that we tested our algorithm on, it is clear that the algorithm
outperforms both the naive implementation and the approximate algorithm for both Naive
Bayes networks and polytree networks. Note that the approximation algorithm is based
on variable elimination but can only use certain constrained orders. For a Naive Bayes
9. http://www.cse.ucla.edu/

617

fiChen, Choi & Darwiche

4000
3500

Average Explored Instantiations and Running Time
Number of instantiations (x 10e3)

3000
2500
2000
1500
1000
500
01

Time (s)
2

3

4
5
Number of subnetworks

6

7

8

Figure 8: Synthetic network average running time and average number of instantiations
explored by number of connected components.

network with hypothesis D being the root, the approximation algorithm will be forced to
use a particularly poor ordering, which explains its failure on the chess network.
To analyze how a more general network structure and the selected threshold affects
the performance of our algorithm, we generated synthetic networks with 100 variables and
varying treewidth using BNGenerator (Ide, Cozman, & Ramos, 2004). For each network,
we randomly selected the decision variable, 25 query variables, and evidence variables.10 We
then generated a partition for each network and grouped the networks by the size of obtained
partition (k). Our goal was to test how our algorithms running time and ability to prune
the search-space depends on k. The average time and average number of instantiations
explored are shown in Figure 8.
In general, we can see that as k increases, the number of instantiations explored by
the algorithm decreases and its runtime improves. The network becomes more similar to a
Naive Bayes structure with increasing k. Moreover, the larger k is, the more levels there are
in the search tree, which means that our algorithm will have more opportunities to prune.
In the worst case, a network may be unable to be disconnected at all (k = 1). However, even
in this case our algorithm is still, on average, more efficient compared to the brute-force
implementation  for some cases, after computing the maximum and minimum weight of
observing H, it will find that there does not exist any h that will change the decision. We
found that, given a time limit of 2 hours, the brute-force algorithm could not solve any
synthetic networks, whereas our approach solved more than 70% of such networks.
We also test how the threshold affects computation time. Here, we calculate the posterior
probability of the decision variable and then run repeatedly our algorithm with thresholds
that are varying increments away. The average running time for all increments can be seen
in Figure 9. It is evident that when the threshold is set to be further away from the initial
10. As the synthetic networks are binary, a brute-force approach would need to explore 225 instantiations.

618

fiAlgorithms and Applications for the Same-Decision Probability

1800
1600

Average Explored Instantiations and Running Time
Number of instantiations (x 10e3)

1400
1200
1000
800
600
400
200
00.0

Time (s)
0.1

0.2
0.3
0.4
0.5
Threshold distance from initial posterior

0.6

Figure 9: Synthetic network average running time and average number of instantiations
explored by threshold distance from the initial posterior probability.

posterior probability, the algorithm finishes much faster, which is perhaps expected since
the usage of more extreme thresholds would allow for more search space pruning.
Overall, our experimental results show that our algorithm is able to solve many SDP
problems that are out of reach of existing methods. We also confirm that our algorithm
completes much faster when the network can be disconnected or when the threshold is far
away from the initial posterior probability of the decision variable.

7. The Complexity of Computing the Same-Decision Probability
We present here new complexity results for the SDP. We first prove that the complexity of
computing the SDP in Naive Bayes structures is NP-hard. We then show that the general
complexity of computing the SDP lies in the same complexity class as a general expectation
computation problem that is applicable to a wide variety of queries in graphical models,
such as the computation of non-myopic value of information.
7.1 Computing the SDP in Naive Bayes
SDP is known to be PPPP -complete (Choi et al., 2012). We now show that SDP remains
hard for Naive Bayes networks.
Theorem 1. Computing the Same-Decision Probability in a Naive Bayes network is NPhard.
Proof. We reduce the number partition problem defined by Karp (1972) to computing the
SDP in a Naive Bayes model. Suppose we are given a set of positive P
integers c1P
, . . . , cn , and
we wish to determine whether there exists I  {1, . . . , n} such that jI ci = j6I cj . We
can solve this by considering a Naive Bayes network with a binary class variable D having
uniform probability, and binary attributes H1 , . . . , Hn having CPTs leading to weights of
619

fiChen, Choi & Darwiche

evidence wHi =T = ci and wHi =F = ci . The construction of these CPTs can be done by
solving the following system of equations:
Pr (Hi = T | D = T )
Pr (Hi = T | D = F )
Pr (Hi = F | D = T )
ci = log
Pr (Hi = F | D = F )
1 = Pr (Hi = T | D = T ) + Pr (Hi = F | D = T )
ci = log

1 = Pr (Hi = T | D = F ) + Pr (Hi = F | D = F )

We leave the exact derivations out (see Exercise 3.27 in Darwiche, 2009). We get the
result that:
Pr (Hi = T | D = F ) = Pr (Hi = F | D = T ) =

2ci

1
+1

Pr (Hi = T | D = T ) = Pr (Hi = F | D = F ) = 1 

2ci

1
+1

Note that given that these CPTs have been defined such that wHi =T = ci and wHi =F =
ci , the set of integers can be partitioned if there is an instantiation h = {h1 , . . . , hn } with
P
n
i=1 whi = 0 since I would then include all indices i with hi = T in this case.
First,
PnThe Naive Bayes network satisfies a number of properties that we shall use
Pnext.
n
whi is either 0,  1, or  1 since all weights whi are integers. Next, if i=1 whi = c,
i=1P
then ni=1 whi = c where hi 6= hi . Finally, Pr (h1 , . . . , hn ) = Pr (h1 , . . . , hn ) when hi 6= hi ,
as D has a uniform probability distribution and each leaf Hi has been defined with a
symmetric CPT.
Consider now the following SDP (the last step below is based on the above properties):
SDP (D = T, {H1 , . . . , Hn }, {}, 2/3)
X
[Pr (D = T | h1 , . . . , hn )  2/3]Pr (h1 , . . . , hn )
=
h1 ,...,hn

=

X

[log O(D = T | h1 , . . . , hn )  1]Pr (h1 , . . . , hn )

h1 ,...,hn

=

X

h1 ,...,hn

"

1 X
=
2

n
X

h1 ,...,hn

We then have

Pn

i=1 whi

#

whi  1 Pr (h1 , . . . , hn )

i=1

"

n
X

#

whi 6= 0 Pr (h1 , . . . , hn )

i=1

= 0 for some instantiation h1 , . . . , hn iff
" n
#
X X
whi 6= 0 Pr (h1 , . . . , hn ) < 1
h1 ,...,hn

i=1

620

fiAlgorithms and Applications for the Same-Decision Probability

Hence, the partitioning problem can be solved iff
SDP (D = T, {H1 , . . . , Hn }, {}, 2/3) < 1/2

7.2 The Complexity of Computing the Non-myopic VOI
The SDP was shown to be a PPPP -complete problem by Choi et al. (2012). The class PPPP is
essentially the counting variant of the NPPP class, which contains the polynomial hierarchy
PH and for which the MAP problem is complete (Park & Darwiche, 2004). We show in this
section that a general problem of computing expectations is also PPPP -complete, with the
non-myopic VOI and SDP being an instance of such an expectation. Thus, the development
of algorithms to compute the SDP will be beneficial to problems in the PPPP class, which
in turn benefits computing an assortment of expectations, including non-myopic VOI.
The proposed expectation computation is based on using a reward function R with
some properties that we review next. In particular, the function R is assumed to map a
probability distribution Pr (D | e) to a numeric value. We also assume that the minimum
l and maximum u of this range are polytime computable. These assumptions are not too
limitingfor example, both entropy and utility can be expressed using reward functions
that fall in this category (Krause & Guestrin, 2009).
We now consider the following computation of expectations.
D-EPT: Given a polynomial-time computable reward function R, hypothesis variable
D, unobserved variables H, evidence e, a real number N , and a distribution Pr induced
by a Bayesian network over variables X,11 the expectation decision problem asks: Is
E=

X

R(Pr (D | h, e))Pr (h | e)

h

greater than N ?
Note that the SDP falls as a special case when the reward function R is the SDP indicator
function (see Definition 4). For example, in the definition used by Choi et al. (2012), the
decision function outputs one of two decisions depending on whether Pr (d|e) > T for some
value d of D and some threshold T .
We now have the following theorems, with proofs in Appendix B.
Theorem 2. D-EPT is PPPP -hard.
Theorem 3. D-EPT is in PPPP .
This shows that D-EPT is PPPP -complete and implies that computational problems
such as computing the non-myopic VOI using a variety of reward functions is also PPPP complete.
11. This proof also holds for influence diagrams constrained to have only one decision node.

621

fiChen, Choi & Darwiche

8. Conclusion
In this paper, we have discussed some commonly used information gathering criteria for
graphical models such as value of information and have reviewed the recently introduced
notion of the Same-Decision Probability (SDP). In this paper, we have proposed the usage
of the SDP as a decision making tool by showing concrete examples of its usefulness as both
a stopping criterion and a selection criterion. As a stopping criterion, the SDP can allow
us to determine when no further observations are necessary. As a selection criterion, usage
of the SDP can allow us to select observations that allow us to increase decision robustness.
As we have justified the usage of the SDP, we have proposed an exact algorithm for its
computation. Experimental results show that this algorithm has comparable running time
to the previous approximate algorithm and is also much faster than the naive brute-force
algorithm. Finally, we have presented several new complexity results.

Acknowledgements
This paper combines and extends the work presented by Chen, Choi, and Darwiche (2012b,
2013). This work has been partially supported by ONR grant #N00014-12-1-0423, NSF
grant #IIS-1118122, and NSF grant #IIS-0916161. We would also like to thank the National
Center for Research on Evaluation, Standards, & Student Testing and Hughes Research Lab
for contributing sample diagnostic networks.

Appendix A. Miscellaneous Topics
In this section we go into more details about notions that were mentioned earlier in the
paper. In particular, we continue our discussion from Section 2.3 and go over the notion of
non-myopic value of information. Additionally, we also continue from where we left off in
Section 4.1 and expand upon the notion of SDP as a stopping criterion in the context of
utility-based decisions.
Appendix A.1 Non-myopic Value of Information
Myopic value of information is often used in many applications as it is easy to compute
(Dittmer & Jensen, 1997; Vomlel, 2004; Gao & Koller, 2011). However, the problem with
myopic selection is that it is not optimal, as at times the whole is greater than the sum of
its parts, as each individual observation in a set H seemingly may not provide significant
value, but the VOI of observing H can be very high. For instance, take the function
D = X1  X2 , where alone neither X1 nor X2 is useful, but together they are determinative
of D (Bilgic & Getoor, 2011). Only by computing the non-myopic VOI can the the optimal
VOI be obtained.
Due to the aforementioned problems with using myopic VOI, more recently, researchers
have recently suggested using the non-myopic VOI instead of myopic VOI and have proposed various methods to compute the non-myopic VOI (Heckerman, Horvitz, & Middleton,
1993; Liao & Ji, 2008; Krause & Guestrin, 2009; Zhang & Ji, 2010; Bilgic & Getoor, 2011).
Computing the non-myopic VOI of some hidden variables H is difficult as it involves com622

fiAlgorithms and Applications for the Same-Decision Probability

puting an expectation over the possible values of H, which quickly becomes intractable as
H becomes larger.
Existing algorithms for computing the non-myopic VOI are approximate algorithms
(Heckerman et al., 1993; Liao & Ji, 2008) or relatively limited algorithms that are restricted
to tree networks with few leaf variables (Krause & Guestrin, 2009). Bilgic and Getoor
(2011) have developed the Value of Information Lattice (VOILA), a framework in which
all subsets of hidden variables H are examined, and the optimal subset of features can be
found to increase classification accuracy while meeting some budget constraint.
Appendix A.2 SDP as a Stopping Criterion for Utility-based Decisions
In some cases the expected utility of different decisions, as well as the cost of reducing
uncertainty (making observations), is quantified. This is common in the decision-theoretic
setting (Howard, 1966; Howard & Matheson, 1984), where influence diagrams are commonly
used. Influence diagrams can be seen as Bayesian networks that incorporate decision and
utility nodes (Howard & Matheson, 1984; Zhang, 1998; Kjrulff & Madsen, 2008). The
selection criterion for the decision-theoretic setting is clear: the observations that lead to
the greatest increase of expected utility are selected. The usage of utilities and observation
costs is now prevalent; however, numerous researchers have noted the difficulty of coming
up with the actual numerical quantities (Glasziou & Hilden, 1989; Lu & Przytula, 2006;
Bilgic & Getoor, 2011).
To show how the SDP can be used as a stopping criterion in the decision-theoretic context of expected-utility decisions and influence diagrams (Howard & Matheson, 1984), we
extend the definition of the SDP to a more general setting to allow for more applications.
In particular, we assume that F is a polytime computable decision function that outputs
a decision d based on the distribution Pr (D | e). For instance, the decision function most
commonly used in classification is to select the class with the highest posterior probability arg maxd Pr (d | e) (Friedman et al., 1997), whereas for threshold-based decisions, the
decision function would simply be to select a decision d if Pr (D = d | e)  T .
SDP is thus defined as the probability that the same decision would be made if the
hidden states of variables H were known (Chen et al., 2012b).
Definition 4 (Same-Decision Probability  Generalized ). Given a decision function F,
hypothesis variable D, unobserved variables H, and evidence e, the Same-Decision Probability (SDP) is defined as
X
[F(Pr (D | h, e))]h Pr (h | e)
(13)
SDP (F, D, H, e) =
h

where [F(Pr (D | h, e))]h is an indicator function that

1 if F(Pr (D | h, e)) = F(Pr (D | e))
=
0 otherwise.
The original SDP definition, however, assumed that D is a binary variable, where
F(Pr (D | e)) = d when Pr (d | e)  T for some threshold T (Darwiche & Choi, 2010).
We now consider the use of SDP as a stopping criterion in the context of expectedutility decisions and influence diagrams (Howard & Matheson, 1984). In particular, we
623

fiChen, Choi & Darwiche

Q

C

S
I

P

Figure 10: An influence diagram for an investment problem.
show that by using the SDP, we can distinguish high-risk, high-reward scenarios from lowrisk, low-reward scenarios that are otherwise indistinguishable when we consider the usage
of VOI/utilities alone.
Consider the influence diagram in Figure 10, which consists of a Bayesian network with
three variables (C, Q and S), a decision node I, and a utility node P that is a direct
function of the utility function u. This influence diagram models an investment problem
in which a venture capital firm is deciding whether to invest an amount of $5 million in a
tech startup (I = T ) or allowing the money to collect interest in the bank (I = F ). In this
example, the profit of the investment (P ) depends on the decision (I) and the success of the
company (S), which in turn depends on two factors: (1) whether the existing competitor
companies are successful (C) and (2) whether the the co-founders of the startup have a high
quality, original idea (Q). Both C and Q are unobserved initially and independent of each
other. Variable S is the latent hypothesis variable in this case and thus cannot be observed.
Variables C and Q, however, can be observed for a price.
The goal here is to choose the decision I = i with the maximum expected utility:
X
EU (i | e) =
Pr (s | e)u(i, s),
s

where u(i, s) is the utility of decision I = i given evidence e on variables C and Q.
Figures 11 and 12 contain two different parameterizations of the influence diagram in
Figure 10. We will refer to these as different scenarios of the investment problem.
In both scenarios, given no evidence on variables C and Q, the best decision is I = F ,
with an expected utility of $500K. A decision maker may commit to this decision or decide
to observe variables C and Q, with the hope of finding a better decision in light of the
additional information. The classical stopping criterion here is to compute the maximum
expected utility given that we observe variables C and Q (Heckerman et al., 1993; Dittmer
& Jensen, 1997):
X
max
EU (i | c, q)Pr (c, q).
i

c,q

In both scenarios, the maximum expected utility comes out to $1, 180K, showing that
further observations may lead to a better decision.12
12. According to the formulation of Krause and Guestrin (2009), we have computed the VOI for variables
C and Q using the reward function.

624

fiAlgorithms and Applications for the Same-Decision Probability

Q
T
F

Pr (Q)
0.4
0.6

C
T
F

Pr (C)
0.6
0.4

Q
T
T
F
F

Pr (S = T | .)
0.60
0.90
0.20
0.30

C
T
F
T
F
I
T
T
F
F

S
T
F
T
F

u(I, S)
$5  106
$5  106
$5  105
$5  105

Figure 11: A parameterization of the influence diagram in Figure 10.

Q
T
F

Pr (Q)
0.1
0.9

C
T
F

Pr (C)
0.9
0.1

Q
T
T
F
F

Pr (S = T | .)
0.05
0.98
0.01
0.05

C
T
F
T
F
I
T
T
F
F

S
T
F
T
F

u(I, S)
$7  107
$5  106
$5  105
$5  105

Figure 12: A parameterization of the influence diagram in Figure 10.
Up to this point, the above two scenarios are indistinguishable from the viewpoint of
classical decision making tools. Remember that Krause and Guestrin (2009) and Bilgic and
Getoor (2011) remark that the budget for observations should be expended so long as the
value of information of the observation is greater than the cost of observation. According
to those selection criteria, both of the variables should thus be observed, as the expected
financial gain could very well increase.
The SDP, however, finds that these two scenarios are very different. In particular, with
respect to variables C and Q, the SDP is 60% in the first scenario and is 99% in the second
scenario. That is, even though we stand to make a better decision in both scenarios upon
observing variables C and Q (at least with respect to financial gain), and even though the
expected benefit from such observations is the same in both scenarios, it is very unlikely that
we would change the current decision of I = F in the second scenario in comparison to the
first. Hence, given the additional information provided by the SDP, a decision maker may
act quite differently in these two scenarios. Indeed, when we take a closer look at the second
scenario, there is a state of the world (when S = T ) where deciding to invest would yield a
very large financial gain. However, the chance of this state manifesting itself is extremely
625

fiChen, Choi & Darwiche

small (analogous to a lottery), meaning that a risk-conscious decision maker may be more
averse to gamble in the second scenario and even waste resources to observe the variables
C and D. Note that for this example we have assumed that the utility does not incorporate
any risk-factor, as if it did a rational decision maker would then always choose to gather
more information despite a low probability of changing the current decision.
This illustrates the usefulness of SDP as a stopping criterion in the context of expectedutility decisions and influence diagrams. Namely, using SDP, we can distinguish between
two very different scenarios, that are otherwise indistinguishable when we consider utilities
alone.

Appendix B. Proofs
In this section we provide proofs for Theorems 2 and 3.
Proof of Theorem 2. We show D-EPT is PPPP -hard by reduction from the following decision problem D-SDP, which corresponds to the originally proposed notion of same-decision
probability for threshold-based decisions (Darwiche & Choi, 2010).
D-SDP: Given a decision based on probability Pr (d | e) surpassing a threshold T , a set
of unobserved variables H, and a probability p, is the same-decision probability:
X
[Pr (d | h, e)  T ]Pr (h | e)
(14)
h

greater than p?
Here, [.] denotes an indicator function which evaluates to 1 if the enclosed expression is
satisfied, and 0 otherwise. D-SDP was shown to be PPPP -complete by Choi et al. (2012).
This same-decision probability corresponds to an expectation with respect to the distribution Pr (H | e), using the reward function:

1 if Pr (d | h, e)  T
R(Pr (D | h, e)) =
0 otherwise.
Thus the same-decision probability is  T iff this expectation is  T .
Proof of Theorem 3. To show that D-EPT is in PPPP , we provide a probabilistic polynomialtime algorithm, with access to a PP oracle, that answers the decision problem D-EPT
correctly with probability greater than 21 . This proof generalizes and simplifies the proof
given by Choi et al. (2012) for D-SDP.
Consider the following probabilistic algorithm that determines if E > N :
1. Sample a complete instantiation x from the Bayesian network, with probability Pr (x).
We can do this in linear time, using forward sampling (Henrion, 1986).
2. If x is compatible with e, we can use a PP-oracle to compute t = R(Pr (D | h, e)).
First, the reward function R can be computed in polynomial time, by definition.
Second, Pr (D | h, e) can be computed using a PP-oracle, since the inference is #Pcomplete (Roth, 1996), and since PPP = P#P .
626

fiAlgorithms and Applications for the Same-Decision Probability

3. Define a function a(t) = 12 + 21 tN
ul , which defines a probability used by our probabilistic
algorithm to guess whether E > N (see Lemma 1).
4. Declare that E > N with probability:
 a(t) if x is compatible with e;


1
2

if x is not compatible with e.

The probability of declaring E > N is:
r=

X
h

which is greater than

1
2

1
a(t)Pr (h, e) + (1  Pr (e))
2

(15)

iff the following set of equivalent statements hold:
X

a(t)Pr (h, e) >

h

X

a(t)Pr (h | e) >

h

1
2


1
1tN
Pr (h | e) >
+
2 2 ul
2


X 1tN
Pr (h | e) > 0
2 ul
h
X
(t  N )Pr (h | e) > 0

X 1
h

Pr (e)
2

h

X

R(Pr (D | h, e))Pr (h | e) > N.

h

Thus r >

1
2

iff E > N .

Lemma 1. The function a(t) =

1
2

+

1 tN
2 ul

maps a reward t to a probability in [0, 1].

Proof. Values u and l are given, and denote upper and lower bounds on the reward t, but
also the threshold N . Thus tN
ul is in [1, 1].
Note that a(t) denotes a probability used by our algorithm to declare whether E > N ,
which is higher or lower depending on the value of the reward t = R(Pr (D | h, e)).

Appendix C. Conditional Probability Tables
In this section we provide conditional probability tables for the networks in Figures 1, 2, 3,
and 4.

627

fiChen, Choi & Darwiche

D
+


Pr (D)
0.5
0.5

Hi
t
t
p
p
n
n
l
l

D
+
+



Xi
+

+

+

+


X1
+

+


Ei
+
+
+
+
+
+
+
+

Pr (X1 | D)
0.9
0.1
0.1
0.9

X1
+
+



Pr (Ei | Hi , Xi )
1.0
0.0
1.0
1.0
0.0
0.0
0.0
1.0

Hi
t
p
n
l

X2
+

+


Pr (X2 | X1 )
0.9
0.1
0.1
0.9

Pr (Hi )
0.81
0.09
0.09
0.01

Figure 13: The CPTs for the Bayesian network given in Figure 1. Note that for the
CPTs of variables Ei , only the lines for the case Ei = + are given, since
Pr (Ei = |Hi , Xi ) = 1  Pr (Ei = +|Hi , Xi ).

D S1 Pr (S1 | D)
+ +
0.65
+ 
0.35
0.30
 +
 
0.70

D S3 Pr (S3 | D)
+ +
0.65
+ 
0.35
0.35
 +
 
0.65

D S2 Pr (S2 | D)
+ +
0.60
+ 
0.40
 +
0.30
 
0.70

D S4 Pr (S4 | D)
+ +
0.65
+ 
0.35
 +
0.35
 
0.65

Table 5: CPTs for the network in Figure 2. Parameterization 2.

628

fiAlgorithms and Applications for the Same-Decision Probability

D S1 Pr (S1 | D)
+ +
0.50
0.50
+ 
 +
0.40
 
0.60

D S3 Pr (S3 | D)
+ +
0.55
0.45
+ 
 +
0.45
 
0.55

D S2 Pr (S2 | D)
+ +
0.50
+ 
0.50
 +
0.40
 
0.60

D S4 Pr (S4 | D)
+ +
0.55
+ 
0.45
 +
0.45
 
0.55

Table 6: CPTs for the network in Figure 2. Parameterization 3.

D S2 Pr (S2 | D)
+ +
0.75
+ o
0.2
0.05
+ 
 +
0.05
 o
0.2
 
0.75

D S1 Pr (S1 | D)
+ +
0.8
0.2
+ 
 +
0.2
 
0.8

Table 7: CPTs for the Bayesian network in Figure 3.

D H1 Pr (H1 | D)
+ +
0.80
+ 
0.20
 +
0.10
 
0.90

D H2 Pr (H2 | D)
+ +
0.70
+ 
0.30
 +
0.30
 
0.70

Table 8: CPTs for the network in Figure 4. Pr (H3 | D), Pr (E1 | D) and Pr (H2 |D) are
equal.

629

fiChen, Choi & Darwiche

References
Arroyo, I., & Woolf, B. (2005). Inferring learning and attitudes from a Bayesian network
of log file data. In Proceedings of the 12th International Conference on Artificial
Intelligence in Education, pp. 3340.
Bache, K., & Lichman, M. (2013). UCI machine learning repository..
Bilgic, M., & Getoor, L. (2011). Value of information lattice: Exploiting probabilistic independence for effective feature subset acquisition. Journal of Artificial Intelligence
Research (JAIR), 41, 6995.
Butz, C. J., Hua, S., & Maguire, R. B. (2004). A web-based intelligent tutoring system for
computer programming. In Web Intelligence, pp. 159165. IEEE Computer Society.
Chan, H., & Darwiche, A. (2003). Reasoning about Bayesian network classifiers. In Proceedings of the 19th Conference in Uncertainty in Artificial Intelligence, pp. 107115.
Chen, J., Low, K. H., Tan, C. K.-Y., Oran, A., Jaillet, P., Dolan, J., & Sukhatme, G.
(2012a). Decentralized data fusion and active sensing with mobile sensors for modeling
and predicting spatiotemporal traffic phenomena. In Proceedings of the Twenty-Eighth
Conference Annual Conference on Uncertainty in Artificial Intelligence (UAI-12), pp.
163173, Corvallis, Oregon. AUAI Press.
Chen, S., Choi, A., & Darwiche, A. (2012b). The Same-Decision Probability: A new tool
for decision making. In Proceedings of the Sixth European Workshop on Probabilistic
Graphical Models, pp. 5158.
Chen, S., Choi, A., & Darwiche, A. (2013). An exact algorithm for computing the SameDecision Probability. In Proceedings of the 23rd International Joint Conference on
Artificial Intelligence, pp. 25252531.
Choi, A., Xue, Y., & Darwiche, A. (2012). Same-Decision Probability: A confidence measure for threshold-based decisions. International Journal of Approximate Reasoning
(IJAR), 2, 14151428.
Conati, C., Gertner, A., & VanLehn, K. (2002). Using Bayesian networks to manage uncertainty in student modeling. User Modeling and User-Adapted Interaction, 12 (4),
371417.
Cover, T. M., & Thomas, J. A. (1991). Elements of Information Theory. Wiley-Interscience.
Darwiche, A. (2009). Modeling and Reasoning with Bayesian Networks (1st edition). Cambridge University Press.
Darwiche, A., & Choi, A. (2010). Same-Decision Probability: A confidence measure for
threshold-based decisions under noisy sensors. In Proceedings of the Fifth European
Workshop on Probabilistic Graphical Models, pp. 113120.
Dechter, R. (1999). Bucket elimination: A unifying framework for reasoning. Artificial
Intelligence, 113 (1), 4185.
Dittmer, S., & Jensen, F. (1997). Myopic value of information in influence diagrams. In Proceedings of the Thirteenth Conference Annual Conference on Uncertainty in Artificial
Intelligence (UAI-97), pp. 142149.
630

fiAlgorithms and Applications for the Same-Decision Probability

Friedman, N., Geiger, D., & Goldszmidt, M. (1997). Bayesian network classifiers. Machine
Learning, 29 (2-3), 131163.
Gao, T., & Koller, D. (2011). Active classification based on value of classifier. In Advances
in Neural Information Processing Systems (NIPS 2011).
Gertner, A. S., Conati, C., & VanLehn, K. (1998). Procedural help in Andes: Generating hints using a Bayesian network student model. In Proceedings of the National
Conference on Artificial Intelligence, pp. 106111.
Glasziou, P., & Hilden, J. (1989). Test selection measures. Medical Decision Making, 9 (2),
133141.
Greiner, R., Grove, A. J., & Roth, D. (2002). Learning cost-sensitive active classifiers.
Artificial Intelligence, 139 (2), 137174.
Hamscher, W., Console, L., & de Kleer, J. (Eds.). (1992). Readings in Model-Based Diagnosis. Morgan Kaufmann Publishers Inc.
Heckerman, D., Breese, J. S., & Rommelse, K. (1995). Decision-theoretic troubleshooting.
Communications of the ACM, 38 (3), 4957.
Heckerman, D., Horvitz, E., & Middleton, B. (1993). An approximate nonmyopic computation for value of information. IEEE Transactions on Pattern Analysis and Machine
Intelligence, 15 (3), 292298.
Henrion, M. (1986). Propagating uncertainty in Bayesian networks by probabilistic logic
sampling. In Proceedings of the Second Annual Conference on Uncertainty in Artificial
Intelligence (UAI-86), pp. 149163.
Howard, R. A. (1966). Information value theory. IEEE Transactions on Systems Science
and Cybernetics, 2 (1), 2226.
Howard, R. A., & Matheson, J. E. (Eds.). (1984). Readings on the Principles and Applications of Decision Analysis. Strategic Decision Group.
Ide, J. S., Cozman, F. G., & Ramos, F. T. (2004). Generating random Bayesian networks
with constraints on induced width. In Proceedings of the 16th European Conference
on Artificial Intelligence, pp. 323327.
Jordan, A. (2002). On discriminative vs. generative classifiers: A comparison of logistic
regression and naive Bayes. Advances in Neural Information Processing Systems, 14,
841.
Kahn, C. E., Roberts, L. M., Shaffer, K. A., & Haddawy, P. (1997). Construction of a
Bayesian network for mammographic diagnosis of breast cancer. Computers in Biology
and Medicine, 27 (1), 1929.
Karp, R. M. (1972). Reducibility among combinatorial problems. In Complexity of Computer Computations. Springer.
Kjrulff, U. B., & Madsen, A. L. (2008). Bayesian Networks and Influence Diagrams: A
Guide to Construction and Analysis. Springer.
Krause, A., & Guestrin, C. (2005). Near-optimal nonmyopic value of information in graphical models. In 21st Conference on Uncertainty in Artificial Intelligence, pp. 324331.
631

fiChen, Choi & Darwiche

Krause, A., & Guestrin, C. (2009). Optimal value of information in graphical models.
Journal of Artificial Intelligence Research (JAIR), 35, 557591.
Kruegel, C., Mutz, D., Robertson, W., & Valeur, F. (2003). Bayesian event classification
for intrusion detection. In Proceedings of the Annual Computer Security Applications
Conference (ACSAC).
Liao, W., & Ji, Q. (2008). Efficient non-myopic value-of-information computation for influence diagrams. International Journal of Approximate Reasoning, 49 (2), 436450.
Lindley, D. V. (1956). On a measure of the information provided by an experiment. Annals
of Mathematical Statistics, 27 (4), 9861005.
Lu, T.-C., & Przytula, K. W. (2006). Focusing strategies for multiple fault diagnosis. In
Proceedings of the 19th International FLAIRS Conference, pp. 842847.
Millan, E., Descalco, L., Castillo, G., Oliveira, P., & Diogo, S. (2013). Using Bayesian
networks to improve knowledge assessment. Computers & Education, 60 (1), 436447.
Modelo-Howard, G., Bagchi, S., & Lebanon, G. (2008). Determining placement of intrusion detectors for a distributed application through Bayesian network modeling. In
Proceedings of the 11th International Symposium on Recent Advances in Intrusion
Detection, pp. 271290.
Munie, M., & Shoham, Y. (2008). Optimal testing of structured knowledge. In AAAI08:
Proceedings of the 23rd National Conference on Artificial intelligence, pp. 10691074.
Ognibene, D., & Demiris, Y. (2013). Towards active event recognition. In Proceedings of
the 23rd International Joint Conference on Artificial Intelligence, pp. 24952501.
Park, J. D., & Darwiche, A. (2004). Complexity results and approximation strategies for
MAP explanations. Journal of Artificial Intelligence Research (JAIR), 21, 101133.
Pauker, S. G., & Kassirer, J. P. (1980). The threshold approach to clinical decision making..
The New England Journal of Medicine, 302 (20), 110917.
Raiffa, H. (1968). Decision Analysis  Introductory Lectures on Choices under Uncertainty.
Addison-Wesley.
Ramoni, M., & Sebastiani, P. (2001). Robust Bayes classifiers. Artificial Intelligence, 125 (12), 209226.
Roth, D. (1996). On the hardness of approximate reasoning. Artificial Intelligence, 82, 273
 302.
Shann, M., & Seuken, S. (2013). An active learning approach to home heating in the
smart grid. In Proceedings of the 23rd International Joint Conference on Artificial
Intelligence, pp. 28922899.
Stratonovich, R. (1965). On value of information. Izvestiya of USSR Academy of Sciences,
Technical Cybernetics, 5, 312.
van der Gaag, L. C., & Coupe, V. M. H. (1999). Sensitivity analysis for threshold decision
making with Bayesian belief networks. In AI*IA, pp. 3748.
Vomlel, J. (2004). Bayesian networks in educational testing. International Journal of
Uncertainty, Fuzziness and Knowledge-Based Systems, 12 (supp01), 83100.
632

fiAlgorithms and Applications for the Same-Decision Probability

Xenos, M. (2004). Prediction and assessment of student behaviour in open and distance
education in computers using Bayesian networks. Computers & Education, 43 (4),
345359.
Yu, S., Krishnapuram, B., Rosales, R., & Rao, R. B. (2009). Active sensing. In International
Conference on Artificial Intelligence and Statistics, pp. 639646.
Zhang, N. L. (1998). Probabilistic inference in influence diagrams. In Computational Intelligence, pp. 514522.
Zhang, Y., & Ji, Q. (2010). Efficient sensor selection for active information fusion. IEEE
Transactions on Systems, Man, and Cybernetics, Part B, 40 (3), 719728.

633

fi