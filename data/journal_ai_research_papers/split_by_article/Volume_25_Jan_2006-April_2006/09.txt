Journal of Artificial Intelligence Research 25 (2006) 349-387

Submitted 06/05; published 03/06

Representing Conversations for Scalable Overhearing
Gery Gutnik
Gal A. Kaminka

gutnikg@cs.biu.ac.il
galk@cs.biu.ac.il

Computer Science Department
Bar Ilan University
Ramat Gan 52900, Israel

Abstract
Open distributed multi-agent systems are gaining interest in the academic community
and in industry. In such open settings, agents are often coordinated using standardized
agent conversation protocols. The representation of such protocols (for analysis, validation, monitoring, etc) is an important aspect of multi-agent applications. Recently, Petri
nets have been shown to be an interesting approach to such representation, and radically
different approaches using Petri nets have been proposed. However, their relative strengths
and weaknesses have not been examined. Moreover, their scalability and suitability for
different tasks have not been addressed. This paper addresses both these challenges. First,
we analyze existing Petri net representations in terms of their scalability and appropriateness for overhearing, an important task in monitoring open multi-agent systems. Then,
building on the insights gained, we introduce a novel representation using Colored Petri
nets that explicitly represent legal joint conversation states and messages. This representation approach offers significant improvements in scalability and is particularly suitable
for overhearing. Furthermore, we show that this new representation offers a comprehensive coverage of all conversation features of FIPA conversation standards. We also present
a procedure for transforming AUML conversation protocol diagrams (a standard humanreadable representation), to our Colored Petri net representation.

1. Introduction
Open distributed multi-agent systems (MAS) are composed of multiple, independently-built
agents that carry out mutually-dependent tasks. In order to allow inter-operability of agents
of different designs and implementation, the agents often coordinate using standardized interaction protocols, or conversations. Indeed, the multi-agent community has been investing
a significant effort in developing standardized Agent Communication Languages (ACL) to facilitate sophisticated multi-agent systems (Finin, Labrou, & Mayfield, 1997; Kone, Shimazu,
& Nakajima, 2000; ChaibDraa, 2002; FIPA site, 2003). Such standards define communicative acts, and on top of them, interaction protocols, ranging from simple queries as to the
state of another agent, to complex negotiations by auctions or bidding on contracts. For
instance, the FIPA Contract Net Interaction Protocol (FIPA Specifications, 2003b) defines
a concrete set of message sequences that allows the interacting agents to use the contract
net protocol for negotiations.
Various formalisms have been proposed to describe such standards (e.g., Smith & Cohen,
1996; Parunak, 1996; Odell, Parunak, & Bauer, 2000, 2001b; AUML site, 2003). In particular, AUMLAgent Unified Modelling Languageis currently used in the FIPA-ACL standards
c
2006
AI Access Foundation. All rights reserved.

fiGutnik & Kaminka

(FIPA Specifications, 2003a, 2003b, 2003c, 2003d; Odell, Parunak, & Bauer, 2001a) 1 . UML
2.0 (AUML site, 2003), a new emerging standard influenced by AUML, has the potential to
become the FIPA-ACL standard (and a forthcoming IEEE standard) in the future. However, for the moment, a large set of FIPA specifications remains formalized using AUML.
While AUML is intended for human readability and visualization, interaction protocols
should ideally be represented in a way that is amenable to automated analysis, validation
and verification, online monitoring, etc.
Lately, there is increasing interest in using Petri nets (Petri Nets site, 2003) in modelling
multi-agent interaction protocols (Cost, 1999; Cost, Chen, Finin, Labrou, & Peng, 1999,
2000; Lin, Norrie, Shen, & Kremer, 2000; Nowostawski, Purvis, & Cranefield, 2001; Purvis,
Hwang, Purvis, Cranefield, & Schievink, 2002; Cranefield, Purvis, Nowostawski, & Hwang,
2002; Ramos, Frausto, & Camargo, 2002; Mazouzi, Fallah-Seghrouchni, & Haddad, 2002;
Poutakidis, Padgham, & Winikoff, 2002). There is broad literature on using Petri nets to
analyze the various aspects of distributed systems (e.g. in deadlock detection as shown by
Khomenco & Koutny, 2000), and there has been recent work on specific uses of Petri nets in
multi-agent systems, e.g., in validation and testing (Desel, Oberweis, & Zimmer, 1997), in
automated debugging and monitoring (Poutakidis et al., 2002), in dynamic interpretation of
interaction protocols (Cranefield et al., 2002; de Silva, Winikoff, & Liu, 2003), in modelling
agents behavior induced by their participation in a conversation (Ling & Loke, 2003) and
in interaction protocols refinement allowing modular construction of complex conversations
(Hameurlain, 2003).
However, key questions remain open on the use of Petri nets for conversation representation. First, while radically different approaches to representation using Petri nets have
been proposed, their relative strengths and weaknesses have not been investigated. Second,
many investigations have only addressed restricted subsets of the features needed in representing complex conversations such as those standardized by FIPA (see detailed discussion
of previous work in Section 2). Finally, no procedures have been proposed for translating
human-readable AUML protocol descriptions into the corresponding machine-readable Petri
nets.
This paper addresses these open challenges in the context of scalable overhearing. Here,
an overhearing agent passively tracks many concurrent conversations involving multiple participants, based solely on their exchanged messages, while not being a participant in any of
the overheard conversations itself (Novick & Ward, 1993; Busetta, Serafini, Singh, & Zini,
2001; Kaminka, Pynadath, & Tambe, 2002; Poutakidis et al., 2002; Busetta, Dona, & Nori,
2002; Legras, 2002; Gutnik & Kaminka, 2004a; Rossi & Busetta, 2004). Overhearing is useful in visualization and progress monitoring (Kaminka et al., 2002), in detecting failures in
interactions (Poutakidis et al., 2002), in maintaining organizational and situational awareness (Novick & Ward, 1993; Legras, 2002; Rossi & Busetta, 2004) and in non-obtrusively
identifying opportunities for offering assistance (Busetta et al., 2001, 2002). For instance, an
overhearing agent may monitor the conversation of a contractor agent engaged in multiple
contract-net protocols with different bidders and bid callers, in order to detect failures.
We begin with an analysis of Petri net representations, with respect to scalability and
overhearing. We classify representation choices along two dimensions affecting scalability:
1. (FIPA Specifications, 2003c) is currently deprecated. However, we use this specification since it describes
many important features needed in modelling multi-agent interactions.

350

fiRepresenting Conversations for Scalable Overhearing

(i) the technique used to represent multiple concurrent conversations; and (ii) the choice
of representing either individual or joint interaction states. We show that while the runtime complexity of monitoring conversations using different approaches is the same, choices
along these two dimensions have significantly different space requirements, and thus some
choices are more scalable (in the number of conversations) than others. We also argue that
representations suitable for overhearing require the use of explicit message places, though
only a subset of previously-explored techniques utilized those.
Building on the insights gained, the paper presents a novel representation that uses
Colored Petri nets (CP-nets) in which places explicitly denote messages, and valid joint
conversation states. This representation is particularly suited for overhearing as the number
of conversations is scaled-up. We show how this representation can be used to represent
essentially all features of FIPA AUML conversation standards, including simple and complex interaction building blocks, communicative act attributes such as message guards and
cardinalities, nesting, and temporal aspects such as deadlines and duration.
To realize the advantages of machine-readable representations, such as for debugging
(Poutakidis et al., 2002), existing human-readable protocol descriptions must be converted
to their corresponding Petri net representations. As a final contribution in this paper, we
provide a skeleton semi-automated procedure for converting FIPA conversation protocols
in AUML to Petri nets, and demonstrate its use on a complex FIPA protocol. While this
procedure is not fully automated, it takes a first step towards addressing this open challenge.
This paper is organized as follows. Section 2 presents the motivation for our work.
Sections 3 through 6 then present the proposed representation addressing all FIPA conversation features including basic interaction building blocks (Section 3), message attributes
(Section 4), nested & interleaved interactions (Section 5), and temporal aspects (Section 6).
Section 7 ties these features together: It presents a skeleton algorithm for transforming an
AUML protocol diagram to its Petri net representation, and demonstrates its use on a challenging FIPA conversation protocol. Section 8 concludes. The paper rounds up with three
appendixes. The first provides a quick review of Petri nets. Then, to complete coverage of
FIPA interactions, Appendix B provides additional interaction building blocks. Appendix C
presents a Petri net of a complex conversation protocol, which integrates many of the features
of the developed representation technique.

2. Representations for Scalable Overhearing
Overhearing involves monitoring conversations as they progress, by tracking messages that
are exchanged between participants (Gutnik & Kaminka, 2004a). We are interested in representations that can facilitate scalable overhearing, tracking many concurrent conversations,
between many agents. We focus on open settings, where the complex internal state and control logic of agents is not known in advance, and therefore exclude discussions of Petri net
representations which explicitly model agent internals (e.g., Moldt & Wienberg, 1997; Xu
& Shatz, 2001). Instead, we treat agents as black boxes, and consider representations that
commit only to the agents conversation state (i.e., its role and progress in the conversation).
The suitability of a representation for scalable overhearing is affected by several facets.
First, since overhearing is based on tracking messages, the representation must be able to
explicitly represent the passing of a message (communicative act) from one agent to another
351

fiGutnik & Kaminka

(Section 2.1). Second, the representation must facilitate tracking of multiple concurrent
conversations. While the tracking runtime is bounded from below by the number of messages
(since in any case, all messages are overheard and processed), space requirements may differ
significantly (see Sections 2.22.3).
2.1 Message-monitoring versus state-monitoring
We distinguish two settings for tracking the progress of conversations, depending on the
information available to the tracking agent. In the first type of setting, which we refer to
as state monitoring, the tracking agent has access to the internal state of the conversation
in one or more of the participants, but not necessarily to the messages being exchanged.
The other settings involves message monitoring, where the tracking agent has access only to
the messages being exchanged (which are externally observable), but cannot directly observe
the internal state of the conversation in each participant. Overhearing is a form of message
monitoring.
Representations that support state monitoring use places to denote the conversation
states of the participants. Tokens placed in these places (the net marking) denote the
current state. The sending or receiving of a message by a participant is not explicitly
represented, and is instead implied by moving tokens (through transition firings) to the new
state places. Thus, such a representation essentially assumes that the internal conversation
state of participants is directly observable by the monitoring agent. Previous work utilizing
state monitoring includes work by Cost (1999), Cost et al. (1999, 2000), Lin et al. (2000),
Mazouzi et al. (2002), Ramos et al. (2002).
The representation we present in this paper is intended for overhearing tasks, and cannot
assume that the conversation states of overheard agents are observable. Instead, it must
support message monitoring, where in addition to using tokens in state places (to denote
current conversation state), the representation uses message places, where tokens are placed
when a corresponding message is overheard. A conversation-state place and a message
place are connected via a transition to a state place denoting the new conversation state.
Tokens placed in these originating placesindicating a message was received at an appropriate
conversation statewill cause the transition to fire, and for the tokens to be placed in the
new conversation state place. Thus the new conversation state is inferred from "observing"
a message. Previous investigations, that have used explicit message places, include work
by Cost (1999), Cost et al. (1999, 2000), Nowostawski et al. (2001), Purvis et al. (2002),
Cranefield et al. (2002), Poutakidis et al. (2002)2 . These are discussed in depth below.
2.2 Representing a Single Conversation
Two representation variants are popular within those that utilize conversation places (in
addition to message places): Individual state representations use separate places and tokens
for the state of each participant (each role). Thus, the overall state of the conversation is
represented by different tokens marking multiple places. Joint state representations use a
single place for each joint conversation state of all participants. The placement of a token
2. Cost (1999), Cost et al. (1999, 2000) present examples of both state- and message- monitoring representations.

352

fiRepresenting Conversations for Scalable Overhearing

within such a place represents the overhearing agents belief that the participants are in the
appropriate joint state.
Most previous representations use individual states. In these, different markings distinguish a conversation state where one agent has sent a message, from a state where the other
agent received it. The net for each conversation role is essentially built separately, and is
merged with the other nets, or connected to them via fusion places or similar means.
Cost (1999), Cost et al. (1999, 2000) have used CP-nets with individual state places for
representing KQML and FIPA interaction protocols. Transitions represent message events,
and CP-net features, such as token colors and arc expressions, are used to represent AUML
message attributes and sequence expressions. The authors also point out that deadlines (a
temporal aspect of interaction) can be modelled, but no implementation details are provided.
Cost (1999) also proposed using hierarchical CP-nets to represent hierarchical multi-agent
conversations.
Purvis et al. (2002), Cranefield et al. (2002) represented conversation roles as separate
CP-nets, where places denote both interaction messages and states, while transitions represent operations performed on the corresponding communicative acts such as send, receive,
and process. Special in/out places are used to pass net tokens between the different CP-nets,
through special get/put transitions, simulating the actual transmission of the corresponding
communicative acts.
In principle, individual-state representations require two places in each role, for every
message. For a given message, there would be two individual places for the sender (before
sending and after sending), and similarly two more for each receiver (before receiving and
after receiving). All possible conversation statesvalid or notcan be represented. For a
single message and two roles, there are two places for each role (four places total), and four
possible conversation states: message sent and received, sent and not received, not sent but
incorrectly believed to have been received, not sent and not received. These states can be
represented by different markings. For instance, a conversation state where the message has
been sent but not received is denoted by a token in the after-sending place of the sender
and another token in the before-receiving place of the receiver. This is summarized in the
following proposition:
Proposition 1 Given a conversation with R roles and a total of M possible messages, an
individual state representation has space complexity of O(M R).
While the representations above all represent each roles conversation state separately,
many applications of overhearing only require representation of valid conversation states
(message not sent and not received, or sent and received). Indeed, specifications for interaction protocols often assume the use of underlying synchronization protocols to guarantee
delivery of messages (Paurobally & Cunningham, 2003; Paurobally, Cunningham, & Jennings, 2003). Under such an assumption, for every message, there are only two joint states
regardless of the number of roles. For example, for a single message and three rolesa
sender and two receivers, there are two places and two possible markings: A token in a
before sending/receiving place represents a conversation state where the message has not
yet been sent by the sender (and the two receivers are waiting for it), while a token in a
after sending/receiving place denotes that the message has been sent and received by both
receivers.
353

fiGutnik & Kaminka

Nowostawski et al. (2001) utilize CP-nets where places denote joint conversation states.
They also utilize places representing communicative acts. Poutakidis et al. (2002) proposed
a representation based on Place-Transition nets (PT-nets)a more restricted representation
of Petri nets that has no color. They presented several interaction building blocks, which
could then fit together to model additional conversation protocols. In general, the following
proposition holds with respect to such representations:
Proposition 2 Given a conversation with R roles and a total of M possible messages, a
joint state representation that represents only legal states has space complexity of O(M ).
The condition of representing only valid states is critical to the complexity analysis. If all
joint conversation statesvalid and invalidare to be represented, the space complexity would
be O(M R ). In such a case, an individual-state representation would have an advantage. This
would be the case, for instance, if we do not assume the use of synchronization protocols,
e.g., where the overhearing agent may wish to track the exact system state even while a
message is underway (i.e., sent and not yet received).
2.3 Representing Multiple Concurrent Conversations
Propositions 1 and 2 above address the space complexity of representing a single conversation. However, in large scale systems an overhearing agent may be required to monitor
multiple conversations in parallel. For instance, an overhearing agent may be monitoring a
middle agent that is carrying multiple parallel instances of a single interaction protocol with
multiple partners, e.g., brokering (FIPA Specifications, 2003a).
Some previous investigations propose to duplicate the appropriate Petri net representation for each monitored conversation (Nowostawski et al., 2001; Poutakidis et al., 2002). In
this approach, every conversation is tracked by a separate Petri-net, and thus the number
of Petri nets (and their associated tokens) grows with the number of conversations (Proposition 3). For instance, Nowostawski et al. (2001) shows an example where a contract-net
protocol is carried out with three different contractors, using three duplicate CP-nets. This
is captured in the following proposition:
Proposition 3 A representation that creates multiple instances of a conversation Petri net
to represent C conversations, requires O(C) net structures, and O(C) bits for all tokens.
Other investigations take a different approach, in which a single CP-net structure is used
to monitor all conversations of the same protocol. The tokens associated with conversations
are differentiated by their token color (Cost, 1999; Cost et al., 1999, 2000; Lin et al., 2000;
Mazouzi et al., 2002; Cranefield et al., 2002; Purvis et al., 2002; Ramos et al., 2002). For
example, by assigning each token a color of the tuple type hsender, receiveri, an agent can
differentiate multiple tokens in the same place and thus track conversations of different pairs
of agents3 . Color tokens use multiple bits per token; up to log C bits are required to differentiate C conversations. Therefore, the number of bits required to track C conversations
using C tokens is C log C. This leads to the following proposition.
3. See Section 4 to distinguish between different conversations by the same agents.

354

fiRepresenting Conversations for Scalable Overhearing

Proposition 4 A representation that uses color tokens to represent C multiple instances of
a conversation, requires O(1) net structures, and O(C log C) bits for all tokens.

Due to the constants involved, the space requirements of Proposition 3 are in practice
much more expensive than those of Proposition 4. Proposition 3 refers to the creation of
O(C) Petri networks, each with duplicated place and transition data structures. In contrast,
Proposition 4 refers to bits required for representing C color tokens on a single CP net.
Moreover, in most practical settings, a sufficiently large constant bound on the number of
conversations may be found, which will essentially reduce the O(log C) factor to O(1).
Based on Propositions 14, it is possible to make concrete predictions as to the scalability
of different approaches with respect to the number of conversations, roles. Table 1 shows
the space complexity of different approaches when modelling C conversations of the same
protocol, each with a maximum of R roles, and M messages, under the assumption of
underlying synchronization protocols. The table also cites relevant previous work.

Individual
States
(Proposition 1)
Joint
States
(Proposition 2)

Representing Multiple Conversations (of Same Protocol)
Multiple CP- or PT-nets
Using color tokens, single CP-net
(Proposition 3)
(Proposition 4)
Space: O(M R + C log C)
Cost (1999), Cost et al. (1999, 2000),
Space: O(M RC)
Lin et al. (2000), Cranefield et al. (2002),
Purvis et al. (2002), Ramos et al. (2002),
Mazouzi et al. (2002)
Space: O(M C)
Space: O(M + C log C)
Nowostawski et al. (2001),
This paper
Poutakidis et al. (2002)
Table 1: Scalability of different representations

Building on the insights gained from Table 1, we propose a representation using CP-nets
where places explicitly represent joint conversation states (corresponding to the lower-right
cell in Table 1), and tokens color is used to distinguish concurrent conversations (as in the
upper-right cell in Table 1). As such, it is related to the works that have these features, but
as the table demonstrates, is a novel synthesis.
Our representation uses similar structures to those found in the works of Nowostawski
et al. (2001) and Poutakidis et al. (2002). However, in contrast to these previous investigations, we rely on token color in CP-nets to model concurrent conversations, with space
complexity O(M + C log C). We also show (Sections 36) how it can be used to cover a
variety of conversation features not covered by these investigations. These features include
representation of a full set of FIPA interaction building blocks, communicative act attributes
(such as message guards, sequence expressions, etc.), compact modelling of concurrent conversations, nested and interleaved interactions, and temporal aspects.
355

fiGutnik & Kaminka

3. Representing Simple & Complex Interaction Building Blocks
This section introduces the fundamentals of our representation, and demonstrates how various simple and complex AUML interaction messages, used in FIPA conversation standards
(FIPA Specifications, 2003c), can be implemented using the proposed CP-net representation. We begin with a simple conversation, shown in Figure 1-a using an AUML protocol
diagram. Here, agent1 sends an asynchronous message msg to agent2 .




	


ff



	fi

fffi

	
ff
fi 	




	
ff
fi 	

(a) AUML representation



    
 fi    !"  
# $ %&' (

%)' 
  * "  # $

 ' ( ' 
%
+
  ' 

(b) CP-net representation

Figure 1: Asynchronous message interaction.
To represent agent conversation protocols, we define two types of places, corresponding
to messages and conversation states. The first type of net places, called message places, is
used to describe conversation communicative acts. Tokens placed in message places indicate
that the associated communicative act has been overheard. The second type of net places,
agent places, is associated with the valid joint conversation states of the interacting agents.
Tokens placed in agent places indicate the current joint state of the conversation within the
interaction protocol.
Transitions represent the transmission and receipt of communicative acts between agents.
Assuming underlying synchronization protocols, a transition always originates within a jointstate place and a message place, and targets a joint conversation state (more than one is
possiblesee below). Normally, the current conversation state is known (marked with a
token), and must wait the overhearing of the matching message (denoted with a token at
the connected message place). When this token is marked, the transition fires, automatically
marking the new conversation state.
Figure 1-b presents CP net representation of the earlier example of Figure 1-a. The CPnet in Figure 1-b has three places and one transition connecting them. The A1 B1 and the
A2 B2 places are agent places, while the msg place is a message place. The A and B capital
letters are used to denote the agent1 and the agent2 individual interaction states respectively
(we have indicated the individual and the joint interaction states over the AUML diagram
in Figure 1-a, but omit these annotations in later figures). Thus, the A1 B1 place indicates a
joint interaction state where agent1 is ready to send the msg communicative act to agent2
(A1 ) and agent2 is waiting to receive the corresponding message (B1 ). The msg message
place corresponds to the msg communicative act sent between the two agents. Thus, the
transmission of the msg communicative act causes the agents to transition to the A2 B2
356

fiRepresenting Conversations for Scalable Overhearing

place. This place corresponds to the joint interaction state in which agent1 has already sent
the msg communicative act to agent2 (A2 ) and agent2 has received it (B2 ).
The CP-net implementation in Figure 1-b also introduces the use of token colors to
represent additional information about interaction states and communicative acts. The
token color sets are defined in the net declaration, i.e. the dashed box in Figure 1-b.
The syntax follows the standard CPN ML notation (Wikstrom, 1987; Milner, Harper, &
Tofte, 1990; Jensen, 1997a). The AGEN T color identifies the agents participating in the
interaction, and is used to construct the two compound color sets.
The INTER-STATE color set is associated with agent places, and represents agents in
the appropriate joint interaction states. It is a record ha1 , a2 i, where a1 and a2 are AGEN T
color elements distinguishing the interacting agents. We apply the INTER-STATE color
set to model multiple concurrent conversations using the same CP-net. The second color
set is M SG, describing interaction communicative acts and associated with message places.
The M SG color token is a record has , ar i, where as and ar correspond to the sender and
the receiver agents of the associated communicative act. In both cases, additional elements,
such as conversation identification, may be used. See Section 4 for additional details.
In Figure 1-b, the A1 B1 and the A2 B2 places are associated with the INTER-STATE
color set, while the msg place is associated with the M SG color set. The place color set
is written in italic capital letters next to the corresponding place. Furthermore, we use
the s and r AGEN T color type variables to denote the net arc expressions. Thus, given
that the output arc expression of both the A1 B1 and the msg places is hs, ri, the s and r
elements of the agent place token must correspond to the s and r elements of the message
place token. Consequently, the net transition occurs if and only if the agents of the message
correspond to the interacting agents. The A2 B2 place input arc expression is hr, si following
the underlying intuition that agent2 is going to send the next interaction communicative
act.
Figure 2-a shows an AUML representation of another interaction building block, synchronous message passing, denoted by the filled solid arrowhead. Here, the msg communicative act is sent synchronously from agent1 to agent2 , meaning that an acknowledgement
on msg communicative act must always be received by agent1 before the interaction may
proceed.
The corresponding CP-net representation is shown in Figure 2-b. The interaction starts
in the A1 B1 place and terminates in the A2 B2 place. The A1 B1 place represents a joint
interaction state where agent1 is ready to send the msg communicative act to agent2 (A1 )
and agent2 is waiting to receive the corresponding message (B1 ). The A2 B2 place denotes
a joint interaction state, in which agent1 has already sent the msg communicative act to
agent2 (A2 ) and agent2 has received it (B2 ). However, since the CP-net diagram represents
synchronous message passing, the msg communicative act transmission cannot cause the
agents to transition directly from the A1 B1 place to the A2 B2 place. We therefore define an
intermediate A01 B10 agent place. This place represents a joint interaction state where agent2
has received the msg communicative act and is ready to send an acknowledgement on it
(B1 ), while agent1 is waiting for that acknowledgement (A01 ). Taken together, the msg
communicative act causes the agents to transition from the A1 B1 place to the A01 B10 place,
while the acknowledgement on the msg message causes the agents to transition from the
A01 B10 place to the A2 B2 place.
357

fiGutnik & Kaminka

	
ff
fi 	










 fi
   
	
ff

fi 	

 

 

	
ff
fi 	


 fi




   !"
  #$%  & '
 ( ) ( "
  * %  & '  ( ) ( "
+  ( "

(a) AUML representation

(b) CP-net representation

Figure 2: Synchronous message interaction.
Transitions in a typical multi-agent interaction protocols are composed of interaction
building blocks, two of which have been presented above. Additional interaction buildingblocks, which are fairly straightforward (or have appeared in previous work, e.g., Poutakidis
et al., 2002) are presented in Appendix B. In the remainder of this section, we present two
complex interactions building blocks that are generally common in multi-agent interactions:
XOR-decision and OR-parallel.
We begin with the XOR-decision interaction. The AUML representation to this building
block is shown in Figure 3-a. The sender agent agent1 can either send message msg1 to
agent2 or message msg2 to agent3 , but it can not send both msg1 and msg2 . The non-filled
diamond with an x inside is the AUML notation for this constraint.
 



	







	


  

ff	fi
 

!"#$  %&
  
'()' (
"#$#*%&





!



 
'()' (
)'+(
 

 ,$  %&
() (
	
	
-' . / (

ff

ff  
 





(a) AUML representation

(b) CP-net representation

Figure 3: XOR-decision messages interaction.
Figure 3-b shows the corresponding CP-net. Again, the A, B and C capital letters
are used to denote the interaction states of agent1 , agent2 and agent3 , respectively. The
358

fiRepresenting Conversations for Scalable Overhearing

interaction starts from the A1 B1 C1 place and terminates either in the A2 B2 place or in the
A2 C2 place. The A1 B1 C1 place represents a joint interaction state where agent1 is ready to
send either the msg1 communicative act to agent2 or the msg2 communicative act to agent3
(A1 ); and agent2 and agent3 are waiting to receive the corresponding msg1 /msg2 message
(B1 /C1 ). To represent the A1 B1 C1 place color set, we extend the INTER-STATE color
set to denote a joint interaction state of three interacting agents, i.e. using the INTERSTATE-3 color set. The msg1 communicative act causes the agents to transition to A2 B2
place. The A2 B2 place represents a joint interaction state where agent1 has sent the msg1
message (A2 ), and agent2 has received it (B2 ). Similarly, the msg2 communicative act causes
agents agent1 and agent3 to transition to A2 C2 place. Exclusiveness is achieved since the
single agent token in A1 B1 C1 place can be used either for activating the A1 B1 C1  A2 B2
transition or for activating the A1 B1 C1  A2 C2 transition, but not both.
A similar complex interaction is the OR-parallel messages interaction. Its AUML representation is presented in Figure 4-a. The sender agent, agent1 , can send message msg1 to
agent2 or message msg2 to agent3 , or both. The non-filled diamond is the AUML notation
for this constraint.

	
fffi
		
fi

 



	









  
 
   
  	
fffi
  
	 	

 	
fffi
 
		

 

	
fffi
 		


(a) AUML representation

  !"
 #$%& '(
)*+) *"
 #$%&%, '(
)*+) *
+)-*"
 . & '(
*+*"
  /) 01 *"

	
fffi
		
 

(b) CP-net representation

Figure 4: OR-parallel messages interaction.
Figure 4-b shows the CP-net representation of the OR-parallel interaction. The interaction starts from the A1 B1 C1 place but it can be terminated in the A2 B2 place, or in the
A2 C2 place, or in both. To represent this inclusiveness of the interaction protocol, we define
two intermediate places, the A01 B1 place and the A001 C1 place. The A01 B1 place represents a
joint interaction state where agent1 is ready to send the msg1 communicative act to agent2
(A01 ) and agent2 is waiting to receive the message (B1 ). The A001 C1 place has similar meaning, but with respect to agent3 . As normally done in Petri nets, the transition connecting
the A1 B1 C1 place to the intermediate places duplicates any single token in A1 B1 C1 place
into two tokens going into the A01 B1 and the A001 C1 places. Consequently, the two parts of
the OR-parallel interaction can be independently executed.

4. Representing Interaction Attributes
We now extend our representation to allow additional interaction aspects, useful in describing multi-agent conversation protocols. First, we show how to represent interaction
359

fiGutnik & Kaminka

message attributes, such as guards, sequence expressions, cardinalities and content (FIPA
Specifications, 2003c). We then explore in depth the representation of multiple concurrent
conversations (on the same CP net).
Figure 5-a shows a simple agent interaction using an AUML protocol diagram. This
interaction is similar to the one presented in Figure 1-a in the previous section. However,
Figure 5-a uses an AUML message guard-conditionmarked as [condition]that has the
following semantics: the communicative act is sent from agent1 to agent2 if and only if the
condition is true.



 


	
ff
fi 	



	
fffi  fffi

	
ff
fi 	

(a) AUML representation

  ! " #$
 !%& " #$

 '( ! ! " #$
fi  ) !*+,! ! " -
  
./0  !1 .2 0  !$
   3 , " -
 0  !1 0  !1
  
 0!%&10'( ! !$
4. 0  !$ 4.  0!%&$

4. 0'( ! !$
(b) CP-net representation

Figure 5: Message guard-condition
The guard-condition implementation in our Petri net representation uses transition
guards (Figure 5-b), a native feature for CP nets. The AUML guard condition is mapped
directly to the CP-net transition guard. The CP-net transition guard is indicated on the
net inscription next to the corresponding transition using square brackets. The transition
guard guarantees that the transition is enabled if and only if the transition guard is true.
In Figure 5-b, we also extend the color of tokens to include information about the
communicative act being used and its content. We extend the M SG color set definition
to a record hs, r, t, ci, where the s and r elements has the same interpretation as in previous
section (sender and receiver), and the t and c elements define the message type and content,
respectively. The t element is of a new color T Y P E, which determines communicative act
types. The c element is of a new color CON T EN T , which represents communicative act
content and argument list (e.g. reply-to, reply-by and etc).
The addition of new elements also allows for additional potential uses. For instance,
to facilitate representation of multiple concurrent conversations between the same agents
(s and r), it is possible to add a conversation identification field to both the M SG and
INTER-STATE colors. For simplicity, we refrain from doing so in the examples in this
paper.
Two additional AUML communicative act attributes that can be modelled in the CP
representation are message sequence-expression and message cardinality. The sequenceexpressions denote a constraint on the message sent from sender agent. There are a number of
sequence-expressions defined by FIPA conversation standards (FIPA Specifications, 2003c):
m denotes that the message is sent exactly m times; n..m denotes that the message is sent
anywhere from n up to m times;  denotes that the message is sent an arbitrary number of
360

fiRepresenting Conversations for Scalable Overhearing

times. An additional important sequence expression is broadcast, i.e. message is sent to all
other agents.
We now explain the representation of sequence-expressions in CP-nets, using broadcast
as an example (Figure 6-b). Other sequence expressions are easily derived from this example.
We define an INTER-STATE-CARD color set. This color set is a tuple (ha1 , a2 i, i) consisting
of two elements. The first tuple element is an INTER-STATE color element, which denotes
the interacting agents as previously defined. The second tuple element is an integer that
counts the number of messages already sent by an agent, i.e. the message cardinality.
This element is initially assigned to 0. The INTER-STATE-CARD color set is applied to
the S1 R1 place, where the S and R capital letters are used to denote the sender and the
receiver individual interaction states respectively and the S1 R1 indicates the initial joint
interaction state of the interacting agents. The two additional colors, used in Figure 6-b, are
the BROADCAST-LIST and the T ARGET colors. The BROADCAST-LIST color defines
the sender broadcast list of the designated receivers, assuming that the sender must have
such a list to carry out its role. The T ARGET color defines indexes into this broadcast list.

  

 

 	

fffi
 	

 
 
!!
	
ff
fi

fi 	ff
 



'()(  * + ,'()( ./ + ,'()( 01 * * + ,'()( 2* 3  + %'(4 56 *7
56 *# $%&
'()( 08 + 9: 
  '()( 2* 3  30 8 + ; ( 4<':
 " " 
2* 3  7 08	
ff
fi
'()( =  + %'(4  6 *7 6 *7
fi 	
:6./ 7' 601 * * 

 '()( > 180  2  +  * @ :A,3?
B 5 ) $% + , '()(   + 94%C > 180 3? 2 
	
ff
@ :A !DDD$%3  B 5  6 *- B 5   6= - B 5  608fi 	

(a) AUML representation

(b) CP-net representation

Figure 6: Broadcast sequence expression.
According to the broadcast sequence-expression semantics, the sender agent sends the
same msg1 communicative act to all the receivers on the broadcast list. The CP-net introduced in Figure 6-b models this behavior.4 The interaction starts from the S1 R1 place,
representing the joint interaction state where sender is ready to send the msg1 communicative act to receiver (S1 ) and receiver is waiting to receive the corresponding msg1
message (R1 ). The S1 R1 place initial marking is a single token, set by the initialization expression (underlined, next to the corresponding place). The initialization expression 1(hs, T ARGET (0)i, 0)given in standard CPN ML notationdetermines that the S1 R1
places initial marking is a multi-set containing a single token (hs, T ARGET (0)i, 0). Thus,
the first designated receiver is assigned to be the agent with index 0 on the broadcast list,
and the message cardinality counter is initiated to 0.
4. We implement broadcast as an iterative procedure sending the corresponding communicative act separately to all designated recipients.

361

fiGutnik & Kaminka

The msg1 message place initially contains multiple tokens. Each of these tokens represents the msg1 communicative act addressed to a different designated receiver on the
broadcast list. In Figure 6-b, the initialization expression, corresponding to the msg1 message place, has been omitted. The S1 R1 place token and the appropriate msg1 place token
together enable the corresponding transition. Consequently, the transition may fire and thus
the msg1 communicative act transmission is simulated.
The msg1 communicative act is sent incrementally to every designated receiver on the
broadcast list. The incoming arc expression (hs, ri, i) is incremented by the transition to
the outgoing (hs, T ARGET (i + 1)i, i + 1) arc expression, causing the receiver agent with
index i + 1 on the broadcast list to be selected. The transition guard constraint i < size,
i.e. i < |broadcast list|, ensures that the msg1 message is sent no more than |broadcast list|
times. The msg1 communicative act causes the agents to transition to the S2 R2 place.
This place represents a joint interaction state in which sender has already sent the msg1
communicative act to receiver and is now waiting to receive the msg2 message (S2 ) and
receiver has received the msg1 message and is ready to send the msg2 communicative act
to sender (R2 ). Finally, the msg2 message causes the agents to transition to the S3 R3
place. The S3 R3 place denotes a joint interaction state where sender has received the msg2
communicative act from receiver and terminated (S3 ), while receiver has already sent the
msg2 message to sender and terminated as well (R3 ).
We use Figure 6-b to demonstrate the use of token color to represent multiple concurrent
conversations using the same CP-net. For instance, let us assume that the sender agent is
called agent1 and its broadcast list contains the following agents: agent2 , agent3 , agent4 ,
agent5 and agent6 . We will also assume that the agent1 has already sent the msg1 communicative act to all agents on the broadcast list. However, it has only received the msg2
reply message from agent3 and agent6 . Thus, the CP-net current marking for the complete
interaction protocol is described as follows: the S2 R2 place is marked by hagent2 , agent1 i,
hagent4 , agent1 i, hagent5 , agent1 i, while the S3 R3 place contains the tokens hagent1 , agent3 i
and hagent1 , agent6 i.
An Example. We now construct a CP-net representation of the FIPA Query Interaction
Protocol (FIPA Specifications, 2003d), shown in AUML form in Figure 7, to demonstrate
how the building blocks presented in Sections 3 and 4 can be put together. In this interaction
protocol, the Initiator requests the P articipant to perform an inform action using one of two
query communicative acts, query-if or query-ref. The P articipant processes the query and
makes a decision whether to accept or ref use the query request. The Initiator may request
the P articipant to respond with either an accept or ref use message, and for simplicity,
we will assume that this is always the case. In case the query request has been accepted,
the P articipant informs the Initiator on the query results. If the P articipant fails, then
it communicates a f ailure. In a successful response, the P articipant replies with one of
two versions of inform (inform-t/f or inform-result) depending on the type of initial query
request.
The CP-net representation of the FIPA Query Interaction Protocol is presented in Figure 8. The interaction starts in the I1 P1 place (we use the I and the P capital letters
to denote the Initiator and the P articipant roles). The I1 P1 place represents a joint
interaction state where (i) the Initiator agent is ready to send either the query-if communicative act, or the query-ref message, to P articipant (I1 ); and (ii) P articipant is wait362

fiRepresenting Conversations for Scalable Overhearing

  fffi     

  

   	 


 fffi  


 fffi  fi 
fi ff fi
fi ff fi

 fifi
 fifi    
fifi  
 ff fi



 ff fi  

 fifi

 fi ff  

 fffi  fi

Figure 7: FIPA Query Interaction Protocol - AUML representation.

ing to receive the corresponding message (P1 ). The Initiator can send either a query-if
or a query-ref communicative act. We assume that these acts belong to the same class,
the query communicative act class. Thus, we implement both messages using a single
Query message place, and check the message type using the following transition guard:
[#t msg = query-if or #t msg = query-ref]. The query communicative act causes the
interacting agents to transition to the I2 P2 place. This place represents a joint interaction
state in which Initiator has sent the query communicative act and is waiting to receive
a response message (I2 ), and P articipant has received the query communicative act and
deciding whether to send an agree or a ref use response message to Initiator (P2 ). The
ref use communicative act causes the agents to transition to I3 P3 place, while the agree
message causes the agents to transition to I4 P4 place.
The P articipant decision on whether to send an agree or a ref use communicative
act is represented using the XOR-decision building block introduced earlier (Figure 3-b).
The I3 P3 place represents a joint interaction state where Initiator has received a ref use
communicative act and terminated (I3 ) and P articipant has sent a ref use message and
terminated as well (P3 ). The I4 P4 place represents a joint interaction state in which Initiator
has received an agree communicative act and is now waiting for further response from
363

fiGutnik & Kaminka

+

+


 

	 
fffi



 
 
ff

3  ? 6 ( 9  6  



, B

 

 

  

   ! "


 @Aff

     !#

' " ("  ) *+,  -.

   
$!  

	 
ff fi
 
 
ff




%

 

 

 
 
ff




%
 

   
	 
fffi

' " (" 23 +, *+,  -.


' " ("



 7,/  *8 ' 723 +, * +, .



 

 
 
ff

+, *$4,, *   ' "5 6 7 ) *+,8

6 7 ) *+, .
%
' " (" 9 4 )  ' "5  7 ) *+, 87 ) *+,8

 

: 6  7 ) *+, .

	 
fffi




' " (" ,/ *     ! 0  ! 0111.

  

&


&

: 6  79 4 ) .

: 6  7,/ * .

3 ;,

?!" 
 



 





>6 (

 



C  ?!"  D! 6 ?5     ! E
   

 
 
ff

   
	 
fffi

	 
fffi
=



=

3 ;,

 
 
ff


< <

" C   ?! "     ( 6 ?5
   ! E#

3 ;,

Figure 8: FIPA Query Interaction Protocol - CP-net representation.

P articipant (I4 ) and P articipant has sent an agree message and is now deciding which
response to send to Initiator (P4 ). At this point, the P articipant agent may send one
of the following communicative acts: inform-t/f, inform-result and f ailure. The choice is
represented using another XOR-decision building block, where the inform-t/f and informresult communicative acts are represented using a single Inf orm message place. The f ailure
communicative act causes a transition to the I5 P5 place, while the inf orm message causes
a transition to the I6 P6 place. The I5 P5 place represents a joint interaction state where
P articipant has sent a f ailure message and terminated (P5 ), while Initiator has received
a f ailure and terminated (I5 ). The I6 P6 place represents a joint interaction state in which
P articipant has sent an inf orm message and terminated (P6 ), while Initiator has received
an inf orm and terminated (I6 ).
The implementation of the [query-if ] and the [query-ref ] message guard conditions requires a detailed discussion. These are not implemented in a usual manner in view of the fact
that they depend on the original request communicative act. Thus, we create a special intermediate place that contains the original message type marked "Original M essage T ype"
in the figure. In case an inf orm communicative act is sent, the transition guard verifies
that the inf orm message is appropriate to the original query type. Thus, an inform-t/f
communicative act can be sent only if the original query type has been query-if and an
inform-result message can be sent only if the original query type has been query-ref.
364

fiRepresenting Conversations for Scalable Overhearing

5. Representing Nested & Interleaved Interactions
In this section, we extend the CP-net representation of previous sections to model nested
and interleaved interaction protocols. We focus here on nested interaction protocols. Nevertheless, the discussion can also be addressed to interleaved interaction protocols in a similar
fashion.
FIPA conversation standards (FIPA Specifications, 2003c) emphasize the importance of
nested and interleaved protocols in modelling complex interactions. First, this allows reuse of interaction protocols in different nested interactions. Second, nesting increases the
readability of interaction protocols.
The AUML notation annotates nested and interleaved protocols as round corner rectangles (Odell et al., 2001a; FIPA Specifications, 2003c). Figure 9-a shows an example of
a nested protocol5 , while Figure 9-b illustrates an interleaved protocol. Nested protocols
have one or more compartments. The first compartment is the name compartment. The
name compartment holds the (optional) name of the nested protocol. The nested protocol
name is written in the upper left-hand corner of the rectangle, i.e. commitment in Figure 9a. The second compartment, the guard compartment, holds the (optional) nested protocol
guard. The guard compartment is written in the lower left-hand corner of the rectangle, e.g.
[commit] in Figure 9-a. Nested protocols without guards are equivalent to nested protocols
with the [true] guard.
 

 

 

	 

			 


fffi

 



	
fffifi	

ff 

	
 	

fi fi



(a) Nested protocol

(b) Interleave protocol

Figure 9: AUML nested and interleaved protocols examples.
Figure 10 describes the implementation of the nested interaction protocol presented in
Figure 9-a by extending the CP-net representation to using hierarchies, relying on standard CP-net methods (see Appendix A). The hierarchical CP-net representation contains
three elements: a superpage, a subpage and a page hierarchy graph. The CP-net superpage
represents the main interaction protocol containing a nested interaction, while the CP-net
subpage models the corresponding nested interaction protocol, i.e. the Commitment Inter5. Figure 9-a appears in FIPA conversation standards (FIPA Specifications, 2003c). Nonetheless, note that
the request-good and the request-pay communicative acts are not part of the FIPA-ACL standards.

365

fiGutnik & Kaminka

action Protocol. The page hierarchy graph describes how the superpage is decomposed into
subpages.

#    ff ff ffff


ff

	

fffffi
ff    ff  ff ffff

ff   	 
 
	
fffffi 	 	
fffffi
  	   
 

#   ff 
ffffff



ff  

ff    ff ffff ff

ff  
 ff  ffff ff

	


fffffi 


	

 

 

!"

Figure 10: Nested protocol implementation using hierarchical CP-nets.
Let us consider in detail the process of modelling the nested interaction protocol in
Figure 9-a using a hierarchical CP-net, resulting in the net described in Figure 10. First, we
identify the starting and ending points of the nested interaction protocol. The starting point
of the nested interaction protocol is where Buyer1 sends a Request-Good communicative act
to Seller1 . The ending point is where Buyer1 receives a Request-Pay communicative act
from Seller1 . We model these nested protocol end-points as CP-net socket nodes on the
superpage, i.e. M ain Interaction P rotocol: B11 S11 and Request-Good are input socket
nodes and B13 S13 is an output socket node.
The nested interaction protocol, the Commitment Interaction P rotocol, is represented
using a separate CP-net, following the principles outlined in Sections 3 and 4. This net
is a subpage of the main interaction protocol superpage. The nested interaction protocol
starting and ending points on the subpage correspond to the net port nodes. The B1 S1 and
Request-Good places are the subpage input port nodes, while the B3 S3 place is an output
port node. These nodes are tagged with the IN/OUT port type tags correspondingly.
Then, a substitution transition, which is denoted using HS (Hierarchy and Substitution), connects the corresponding socket places on the superpage. The substitution transition conceals the nested interaction protocol implementation from the net superpage, i.e.
the M ain Interaction P rotocol. The nested protocol name and guard compartments are
mapped directly to the substitution transition name and guard respectively. Consequently,
in Figure 10 we define the substitution transition name as Commitment and the substitution
guard is determined to be [commit].
The superpage and subpage interface is provided using the hierarchy inscription. The
hierarchy inscription is indicated using the dashed box next to the substitution transition. The first line in the hierarchy inscription determines the subpage identity, i.e. the
366

fiRepresenting Conversations for Scalable Overhearing

Commitment Interaction P rotocol in our example. Moreover, it indicates that the substitution transition replaces the corresponding subpage detailed implementation on the superpage. The remaining hierarchy inscription lines introduce the superpage and subpage port
assignment. The port assignment relates a socket node on the superpage with a port node
on the subpage. The substitution transition input socket nodes are related to the IN-tagged
port nodes. Analogously, the substitution transition output socket nodes correspond to the
OUT-tagged port nodes. Therefore, the port assignment in Figure 10 assigns the net socket
and port nodes in the following fashion: B11 S11 to B1 S1 , Request-Good to Request-Good
and B13 S13 to B3 S3 .
Finally, the page hierarchy graph describes the decomposition hierarchy (nesting) of
the different protocols (pages). The CP-net pages, the M ain Interaction P rotocol and
the Commitment Interaction P rotocol, correspond to the page hierarchy graph nodes
(Figure 10). The arc inscription indicates the substitution transition, i.e. Commitment.

6. Representing Temporal Aspects of Interactions
Two temporal interaction aspects are specified by FIPA (FIPA Specifications, 2003c). In
this section, we show how timed CP-nets (see also Appendix A) can be applied for modelling
agent interactions that involve temporal aspects, such as interaction duration, deadlines for
message exchange, etc.
A first aspect, duration, is the interaction activity time period. Two periods can be
distinguished: transmission time and response time. The transmission time indicates the
time interval during which a communicative act, is sent by one agent and received by the
designated receiver agent. The response time period denotes the time interval in which
the corresponding receiver agent is performing some task as a response to the incoming
communicative act.
The second temporal aspect is deadlines. Deadlines denote the time limit by which
a communicative act must be sent. Otherwise, the corresponding communicative act is
considered to be invalid. These issues have not been addressed in previous investigations
related to agent interactions modelling using Petri nets.6
We propose to utilize timed CP-nets techniques to represent these temporal aspects of
agent interactions. In doing so, we assume a global clock.7 We begin with deadlines. Figure 11-a introduces the AUML representation of message deadlines. The deadline keyword
is a variation of the communicative act sequence expressions described in Section 4. It
sets a time constraint on the start of the transmission of the associated communicative act.
In Figure 11-a, agent1 must send the msg communicative act to agent2 before the defined
deadline. Once the deadline expires, the msg communicative act is considered to be invalid.
Figure 11-b shows a timed CP-net implementation of the deadline sequence expression.
The timed CP-net in Figure 11-b defines an additional MSG-TIME color set associated with
the net message places. The MSG-TIME color set extends the M SG color set, described in
Section 4, by adding a time stamp attribute to the message token. Thus, the communicative
6. Cost et al. (1999, 2000) mention deadlines without presenting any implementation details.
7. Implementing it, we can use the private clock of an overhearing agent as the global clock for our Petri
net representation. Thus, the time stamp of the message is the overhearers time when the corresponding
message was overheard.

367

fiGutnik & Kaminka



 


	
ff	fi


! ! "#$ % &'
! ! ()# % &'
! ! *+ $#$ % &'
! ! ,$#-./ # % !


	
ff
01 "#$23 1 "#$'
fiff
fi 	
	 ! ! 4 /" % !
 1 "#$2  1 "#$2
   
1()#2 1*+ $#$'
! ! 4 /". ,4 #% 4 /"  '
   
5  1 "#$' 5   1()#'
	
ff
5   1*+ $#$'

fi 	
5    % &'

(a) AUML representation

(b) CP-net representation

Figure 11: Deadline sequence expression.
act token is a record hs, r, t, ci@[T ts]. The @[..] expression denotes the corresponding token
time stamp, whereas the token time value is indicated starting with a capital T. Accordingly, the described message token has a ts time stamp. The communicative act time limit
is defined using the val deadline parameter. Therefore, the deadline sequence expression
semantics is simulated using the following transition guard: [T ts < T deadline]. This transition guard, comparing the msg time stamp against the deadline parameter, guarantees
that an expired msg communicative act can not be received.
We now turn to representing interaction duration. The AUML representation is shown in
Figure 12-a. The AUML time intensive message notation is used to denote the communicative act transmission time. As a rule communicative act arrows are illustrated horizontally.
This indicates that the message transmission time can be neglected. However, in case the
message transmission time is significant, the communicative act is drawn slanted downwards.
The vertical distance, between the arrowhead and the arrow tail, denotes the message transmission time. Thus, the communicative act msg1 , sent from agent1 to agent2 , has a t1
transmission time.
	
ff 
 
fiff
fi
	ff
   

 
	
	
    
 !"   
 #$%&   '(

)*+ ,)-+ 
2 2341 1 15 67
$%& % #.

	
ff

#


	ff

fi 	ff
#$%&  / '( 
fiff
	
	  . &  '(
2 234 156 7
	

 + , + ,

 + , +!" 
 . &% #.. &  / '( 
	
ff
0)
1+  0)  + 
fi 	ff
88
+!" 
0)
	
(a) AUML representation

(b) CP-net representation

Figure 12: Interaction duration.
368

fiRepresenting Conversations for Scalable Overhearing

The response time in Figure 12-a is indicated through the interaction thread length.
The incoming msg1 communicative act causes agent2 to perform some task before sending
a response msg2 message. The corresponding interaction thread duration is denoted through
the t2 time period. Thus, this time period specifies the agent2 response time to the incoming
msg1 communicative act.
The CP-net implementation to the interaction duration time periods is shown in Figure 12-b. The communicative act transmission time is illustrated using the timed CP-nets
@+ operator. The net transitions simulate the communicative act transmission between
agents. Therefore, representing a transmission time of t1 , the CP-net transition adds a t1
time period to the incoming message token time stamp. Accordingly, the transition @ + T t1
output arc expression denotes a t1 delay to the time stamp of the outgoing token. Thus,
the corresponding transition takes t1 time units and consequently so does the msg1 communicative act transmission time.
In contrast to communicative act transmission time, the agent interaction response time
is represented implicitly. Previously, we have defined a MSG-TIME color set that indicates
message token time stamps. Analogously, in Figure 12-b we introduce an additional INTERSTATE-TIME color set. This color set is associated with the net agent places and it presents
the possibility to attach time stamps to agent tokens as well. Now, let us assume that A2 B2
and msg2 places contain a single token each. The circled 1 next to the corresponding place,
together with the multi-set inscription, indicates the place current marking. Thus, the agent
and the message place tokens have a ts1 and a ts2 time stamps respectively. The ts1 time
stamp denotes the time by which agent2 has received the msg1 communicative act sent
by agent1 . The ts2 time stamp indicates the time by which agent2 is ready to send msg2
response message to agent1 . Thus, the agent2 response time t2 (Figure 12-a) is ts2  ts1 .

7. Algorithm and a Concluding Example
Our final contribution in this paper is a skeleton procedure for transforming an AUML
conversation protocol diagram of two interacting agents to its CP-net representation. The
procedure is semi-automatedit relies on the human to fill in some detailsbut also has
automated aspects. We apply this procedure on a complex multi-agent conversation protocol
that involves many of the interaction building blocks already discussed.
The procedure is shown in Algorithm 1. The algorithm input is an AUML protocol
diagram and the algorithm creates, as an output, a corresponding CP-net representation.
The CP-net is constructed in iterations using a queue. The algorithm essentially creates the
conversation net by exploring the interaction protocol breadth-first while avoiding cycles.
Lines 1-2 create and initiate the algorithm queue, and the output CP-net, respectively.
The queue, denoted by S, holds the initiating agent places of the current iteration. These
places correspond to interaction states that initiate further conversation between the interacting agents. In lines 4-5, an initial agent place A1 B1 is created and inserted into the
queue. The A1 B1 place represents a joint initial interaction state for the two agents. Lines
7-23 contain the main loop.
We enter the main loop in line 8 and set the curr variable to the first initiating agent
place in S queue. Lines 10-13 create the CP-net components corresponding to the current
iteration as follows. First, in line 10, message places, associated with curr agent place, are
369

fiGutnik & Kaminka

Algorithm 1 Create Conversation Net(input:AU M L,output:CP N )
1: S  new queue
2: CP N  new CP  net
3:
4:
5:

A1 B1  new agent place with color information
S.enqueue(A1 B1 )

6:
7:
8:

while S not empty do
curr  S.dequeue()

9:
10:
11:
12:
13:

M P  CreateM essageP laces(AU M L, curr)
RP  CreateResultingAgentP laces(AU M L, curr, M P )
(T R, AR)  CreateT ransitionsAndArcs(AU M L, curr, M P, RP )
F ixColor(AU M L, CP N, M P, RP, T R, AR)

14:
15:
16:
17:
18:
19:
20:
21:
22:
23:

for each place p in RP do
if p was not created in current iteration then
continue
if p is not terminating place then
S.enqueue(p)
S
S
CP N.places = CP N.places M P SRP
CP.transitions = CP N.transitions
TR
S
CP N.arcs = CP N.arcs AR

24:
25:

return CP N

created using the CreateM essageP laces procedure (which we do not detail here). This
procedure extracts the communicative acts that are associated with a given interaction
state, from the AUML diagram. These places correspond to communicative acts, which
take agents from the joint interaction state curr to its successor(s). Then in line 11, the
CreateResultingAgentP laces procedure creates agent places that correspond to interaction
state changes as a result of the communicative acts associated with curr agent place (again
based on the AUML diagram). Then, in CreateT ransitionsAndArcs procedure (line 12),
these places are connected using the principles described in Sections 36. Thus, the CP-net
structure (net places, transitions and arcs) is created. Finally, in line 13, the F ixColor procedure adds token color elements to the CP-net structure, to support deadlines, cardinality,
and other communicative act attributes.
Lines 15-19 determine which resulting agent places are inserted into the S queue for
further iteration. Only non-terminating agent places, i.e. places that do not correspond to
interaction states that terminate the interaction, are inserted into the queue in lines 18-19.
However, there is one exception (lines 16-17): a resulting agent place, which has already been
handled by the algorithm, is not inserted back into the S queue since inserting it can cause
an infinite loop. Thereafter, completing the current iteration, the output CP-net, denoted
370

fiRepresenting Conversations for Scalable Overhearing

by CP N variable, is updated according to the current iteration CP-net components in lines
21-23. This main loop iterates as long as the S queue is not empty. The resulting CP-net is
returnedline 25.

 fi fi	 

	  fifi	

ff

fi 

  fi



ff 



  

   	


	   	





 

ff 	fi
 
fiff   fiff 
fiff    
 fiff  

Figure 13: FIPA Contract Net Interaction Protocol using AUML.
To demonstrate this algorithm, we will now use it on the FIPA Contract Net Interaction
Protocol (FIPA Specifications, 2003b) (Figure 13). This protocol allows interacting agents to
negotiate. The Initiator agent issues m calls for proposals using a cf p communicative act.
Each of the m P articipants may refuse or counter-propose by a given deadline sending either
a ref use or a propose message respectively. A ref use message terminates the interaction.
In contrast, a propose message continues the corresponding interaction.
Once the deadline expires, the Initiator does not accept any further P articipant response messages. It evaluates the received P articipant proposals and selects one, several,
or no agents to perform the requested task. Accepted proposal result in the sending of
accept-proposal messages, while the remaining proposals are rejected using reject-proposal
message. Reject-proposal terminates the interaction with the corresponding P articipant.
On the other hand, the accept-proposal message commits a P articipant to perform the requested task. On successful completion, P articipant informs Initiator sending either an
inform-done or an inform-result communicative act. However, in case a P articipant has
failed to accomplish the task, it communicates a f ailure message.
371

fiGutnik & Kaminka

We now use the algorithm introduced above to create a CP-net, which represents the
FIPA Contract Net Interaction Protocol. The corresponding CP-net model is constructed in
four iterations of the algorithm. Figure 14 shows the CP-net representation after the second
iteration of the algorithm, while Figure 15 shows the CP-net representation after the fourth
and final iteration.
The Contract Net Interaction Protocol starts from I1 P1 place, which represents a joint interaction state where Initiator is ready to send a cf p communicative act (I1 ) and P articipant
is waiting for the corresponding cf p message (P1 ). The I1 P1 place is created and inserted
into the queue before the iterations through the main loop begin.
First iteration. The curr variable is set to the I1 P1 place. The algorithm creates
net places, which are associated with the I1 P1 place, i.e. a Cf p message place, and an
I2 P2 resulting agent place. The I2 P2 place denotes an interaction state in which Initiator
has already sent a cf p communicative act to P articipant and is now waiting for its response (I2 ) and P articipant has received the cf p message and is now deciding on an
appropriate response (P2 ). These are created using the CreateM essageP laces and the
CreateResultingAgentP laces procedures, respectively.
Then, the CreateT ransitionsAndArcs procedure in line 12, connects the three places
using a simple asynchronous message building block as shown in Figure 1-b (Section 3).
In line 13, as the color sets of the places are determined, the algorithm also handles the
cardinality of the cf p communicative act, by putting an appropriate sequence expression on
the transition, using the principles presented in Figure 6-b (Section 4). Accordingly, the
color set, associated with I1 P1 place, is changed to the INTER-STATE-CARD color set.
Since the I2 P2 place is not a terminating place, it is inserted into the S queue.
Second iteration. curr is set to the I2 P2 place. The P articipant agent can send, as a
response, either a ref use or a propose communicative act. Ref use and P ropose message
places are created by CreateM essageP laces (line 10), and resulting places I3 P3 and I4 P4 ,
corresponding to the results of the ref use and propose communicative acts, respectively,
are created by CreateResultingAgentP laces (line 11). The I3 P3 place represents a joint
interaction state where P articipant has sent the ref use message and terminated (P3 ), while
Initiator has received it, and terminated (I3 ). The I4 P4 place represents the joint state in
which P articipant has sent the propose message (P4 ), while Initiator has received the
message and is considering its response (I4 ).
In line 12, the I2 P2 , Ref use, I3 P3 , P ropose and I4 P4 places are connected using the
XOR-decision building block presented in Figure 3-b (Section 3). Then, the F ixColor
procedure (line 13), adds the appropriate token color attributes, to allow a deadline sequence
expression (on both the ref use and the propose messages) to be implemented as shown in
Figure 11-b (Section 6). The I3 P3 place denotes a terminating state, whereas the I4 P4
place continues the interaction. Thus, in lines 18-19, only the I4 P4 place is inserted into the
queue, for the next iteration of the algorithm. The state of the net at the end of the second
iteration of the algorithm is presented in Figure 14.
Third iteration. curr is set to I4 P4 . Here, the Initiator response to a P articipant
proposal can either be an accept-proposal or a reject-proposal. CreateM essageP laces procedure in line 10 thus creates the corresponding Accept-Proposal and Reject-Proposal message
places. The accept-proposal and reject-proposal messages cause the interacting agents to
transition to I5 P5 and I6 P6 places, respectively. These agent places are created using the
372

fiRepresenting Conversations for Scalable Overhearing

3  0 & ( )4
3  0

8


3  0 ; 4
$% 

& '( )

 

**

 	
ff fi  	ff
 

 

 
 

 




fi  	

3  0

 

! 

./. 01 "





fi ff
	





 



fi  	

4

)'<=

&

)<& ' @ 5
4

!"

!

./.01"

 	
ff
# #

) 5  3 . /

"

- -

!"

 	
ff

5 67
&

& ()4
>

/



 	
ff
fi  	

 

)4

)'<=

3  0 & '@ 5 1! 7

 

	






+ $+ $
' ,

4

fi 

& '( )

fi ff

3  0

5 67

) 5 3 9 , 9:::7

2 2

)'<=

& ()4
->

?
7

.,3!
&

)?& '@7

3  0 A= ( 5  3  .  & ( )4 ?  & ( ) 4 ?
>
>
!
8 )? 3 ;4 )4 7
>
>

& '() <B =
5 & ( )4
C ! D 67
3  0

5 67
E/ 0
3  0

& '()

5 1.F

& '()


C ! D * :::
E /   & ( ) 4 7 E / 
>
E /  & '@7
>
E / 0 ./. 015 67



<B =

< $7

 A=(7
>

Figure 14: FIPA Contract Net Interaction Protocol using CP-net after the 2nd iteration.
CreateResultingAgentP laces procedure (line 11). The I5 P5 place denotes an interaction
state in which Initiator has sent a reject-proposal message and terminated the interaction (I5 ), while the P articipant has received the message and terminated as well (P5 ). In
contrast, the I6 P6 place represents an interaction state where Initiator has sent an acceptproposal message and is waiting for a response (I6 ), while P articipant has received the
accept-proposal communicative act and is now performing the requested task before sending
a response (P6 ). The Initiator agent sends exclusively either an accept-proposal or a rejectproposal message. Thus, the I4 P4 , Reject-Proposal, I5 P5 , Accept-Proposal and I6 P6 places
are connected using a XOR-decision block (in the CreateT ransitionsAndArcs procedure,
line 12).
The F ixColor procedure in line 13 operates now as follows: According to the interaction
protocol semantics, the Initiator agent evaluates all the received P articipant proposals once
the deadline passes. Only thereafter, the appropriate reject-proposal and accept-proposal
communicative acts are sent. Thus, F ixColor assigns a MSG-TIME color set to the RejectProposal and the Accept-Proposal message places, and creates a [T ts >= T deadline] transition guard on the associated transitions. This transition guard guarantees that Initiator
cannot send any response until the deadline expires, and all valid P articipant responses
have been received. The resulting I5 P5 agent place denotes a terminating interaction state,
whereas the I6 P6 agent place continues the interaction. Thus, only I6 P6 agent place is
inserted into the S queue.
Fourth iteration. curr is set to I6 P6 . This place is associated with three communicative acts: inform-done, inform-result and f ailure. The inform-done and the informresult messages are instances of the inf orm communicative act class. Thus, CreateMessagePlaces (line 10) creates only two message places, Inf orm and F ailure. In line 11,
CreateResultingAgentP laces creates the I7 P7 and I8 P8 agent places. The f ailure communicative act causes interacting agents to transition to I7 P7 agent place, while both inf orm
messages cause the agents to transition to I8 P8 agent place. The I7 P7 place represents a
joint interaction state where P articipant has sent the f ailure message and terminated (P7 ),
373

fiGutnik & Kaminka

while Initiator has received a f ailure communicative act and terminated (I7 ). On the other
hand, the I8 P8 place denotes an interaction state in which P articipant has sent the inf orm
message (either inform-done or inform-result) and terminated (P8 ), while Initiator has
received an inf orm communicative act and terminated (I8 ). The inf orm and f ailure communicative acts are sent exclusively. Thus CreateT ransitionsAndArcs (line 12) connects
the I6 P6 , F ailure, I7 P7 , Inf orm and I8 P8 places using a XOR-decision building block.
Then, F ixColor assigns a [#t msg = inform-done or #t msg = inform-result] transition
guard on the transition associated with Inf orm message place. Since both the I7 P7 and
the I8 P8 agent places represent terminating interaction states, they are not inserted into the
queue, which remains empty at the end of the current iteration. This signifies the end of the
conversion. The complete conversation CP-net resulting after this iteration of the algorithm
is shown in Figure 15.
$% 

& '( )

*  * 
 

 	
fffi  	ff

  

 






, $ , $



.

 


.
 

fi  	

#



#



 

 



3

fi  	

'6 4!5  0 1

 


3



8 8

fi  	
+

+

 
;0 1-



fi 

fi  	

=

4  1 
L0 1

& 44!5

)'5D

fi ff

&

)5& 'G 7

5I D

 /-4!
&

)F& 'G?

FE& () =

@ )F4 EC=

7 & ( )=

)=

F
?

J ! K >?

& '( )

7 2/M

& '()

J !K * BBB 5 $?

?

L 0



5I D

EH D( ?

L 0  E& 'G?

!"

L 0 1 /0/ 127 >?

! 7

/0/ 12"
 	
ff
fi  	


2  
fi 

 



9 9

)'5D

7 >?

L 0   E& ()=

	
 



& '( )

4  1 

  0 1



 
 	
ff

?

!E




F

0 E& ()=
.

4  1  H D( 7 4  /  E& ()=

!"



 	
ff

) 7 4  / 0 E& ( ) =

=

 

! 7

/0/ 12"

7 >?
&

! 

!"



4  1 

/0/ 12 "

 
 	
ff



)=

)'5D

	




=

4  1  & 'G 7 2! ?

fi ff

!

 	
 ff

	

  

!"

/0/12"

fiff

"


fi  	

	





4  1 

7 >?

@ ) 7 4 A - ABBB?

4  1  C =

 	 
ff

fi ff

4  1 



  & '( )

' -

4  1  & ( )=

fi





:







<!
7 2  
5

/ 2   <!
7

2  
5- 1!"

 	
ff
:

fi  	

Figure 15: FIPA Contract Net Interaction Protocol using CP-net after the 4th (and final)
iteration.
The procedure we outline can guide the conversion of many 2-agent conversation protocols in AUML to their CP-net equivalents. However, it is not sufficiently developed to
address the general n-agent case. Appendix C presents a complex example of a 3-agent conversation protocol, which was successfully converted manually, without the guidance of the
algorithm. This example incorporates many advanced features of our CP-net representation
technique and would have been beyond the scope of many previous investigations.
374

fiRepresenting Conversations for Scalable Overhearing

8. Summary and Conclusions
Over recent years, open distributed MAS applications have gained broad acceptance both
in the multi-agent academic community and in real-world industry. As a result, increasing attention has been directed to multi-agent conversation representation techniques. In
particular, Petri nets have recently been shown to provide a viable representation approach
(Cost et al., 1999, 2000; Nowostawski et al., 2001; Mazouzi et al., 2002).
However, radically different approaches have been proposed to using Petri nets for modelling multi-agent conversations. Yet, the relative strengths and weaknesses of the proposed
techniques have not been examined. Our work introduces a novel classification of previous investigations and then compares these investigations addressing their scalability and
appropriateness for overhearing tasks.
Based on the insights gained from the analysis, we have developed a novel representation,
that uses CP-nets in which places explicitly represent joint interaction states and messages.
This representation technique offers significant improvements (compared to previous approaches) in terms of scalability, and is particularly suitable for monitoring via overhearing.
We systematically show how this representation covers essentially all the features required
to model complex multi-agent conversations, as defined by the FIPA conversation standards (FIPA Specifications, 2003c). These include simple & complex interaction building
blocks (Section 3 & Appendix B), communicative act attributes and multiple concurrent
conversations using the same CP-net (Section 4), nested & interleaved interactions using
hierarchical CP-nets (Section 5) and temporal interaction attributes using timed CP-nets
(Section 6). The developed techniques have been demonstrated, throughout the paper, on
complex interaction protocols defined in the FIPA conversation standards (see in particular
the example presented in Appendix C). Previous approaches could handle some of these
examples (though with reduced scalability), but only a few were shown to cover all the
required features.
Finally, the paper presented a skeleton procedure for semi-automatically converting an
AUML protocol diagrams (the chosen FIPA representation standard) to an equivalent CPnet representation. We have demonstrated its use on a challenging FIPA conversation protocol, which was difficult to represent using previous approaches.
We believe that this work can assist and motivate continuing research on multi-agent
conversations including such issues as performance analysis, validation and verification (Desel et al., 1997), agent conversation visualization, automated monitoring (Kaminka et al.,
2002; Busetta et al., 2001, 2002), deadlock detection (Khomenco & Koutny, 2000), debugging (Poutakidis et al., 2002) and dynamic interpretation of interaction protocols (Cranefield
et al., 2002; de Silva et al., 2003). Naturally, some issues remain open for future work. For
example, the presented procedure addresses only AUML protocol diagrams representing two
agent roles. We plan to investigate an n-agent version in the future.

Acknowledgments
The authors would like to thank the anonymous JAIR reviewers for many useful and informative comments. Minor subsets of this work were also published as LNAI book chapter
(Gutnik & Kaminka, 2004b). K. Ushi deserves many thanks.
375

fiGutnik & Kaminka

Appendix A. A Brief Introduction to Petri Nets
Petri nets (Petri Nets site, 2003) are a widespread, established methodology for representing
and reasoning about distributed systems, combining a graphical representation with a comprehensive mathematical theory. One version of Petri nets is called Place/Transition nets
(PT-nets) (Reisig, 1985). A PT-net is a bipartite directed graph where each node is either
a place or a transition (Figure 16). The net places and transitions are indicated through
circles and rectangles respectively. The PT-net arcs support only place  transition and
transition  place connections, but never connections between two places or between two
transitions. The arc direction determines the input/output characteristics of the place and
the transition connected. Thus, given an arc, P  T , connecting place P and transition T ,
we will say that place P is an input place of transition T and vice versa transition T is an
output transition of place P . The P  T arc is considered to be an output arc of place P
and an input arc of transition T .
















(a) Before firing




(b) After firing

Figure 16: A PT-net example.
A PT-net place may be marked by small black dots called tokens. The arc expression is
an integer, which determines the number of tokens associated with the corresponding arc.
By convention, an arc expression equal to 1 is omitted. A specific transition is enabled if
and only if its input places marking satisfies the appropriate arc expressions. For example,
consider arc P  T to be the only arc to connect place P and transition T . Thus, given
that this arc has an arc expression 2, we will say that transition T is enabled if and only
if place P is marked with two tokens. In case the transition is enabled, it may fire/occur.
The transition occurrence removes tokens from the transition input places and puts tokens
to the transition output places as specified by the arc expressions of the corresponding
input/output arcs. Thus, in Figures 16-a and 16-b, we demonstrate PT-net marking before
and after transition firing respectively.
Although computationally equivalent, a different version of Petri nets, called Colored
Petri nets (CP-nets) (Jensen, 1997a, 1997b, 1997c), offers greater flexibility in compactly
representing complex systems. Similarly to the PT-net model, CP-nets consist of net places,
net transitions and arcs connecting them. However, in CP-nets, tokens are not just single
bits, but can be complex, structured, information carriers. The type of additional information carried by the token, is called token color, and it may be simple (e.g., an integer or a
string), or complex (e.g. a record or a tuple). Each place is declared by a place color set to
376

fiRepresenting Conversations for Scalable Overhearing

only match tokens of particular colors. A CP-net place marking is a token multi-set (i.e., a
set in which a member may appear more than once) corresponding to the appropriate place
color set. CP-net arcs pass token multi-sets between the places and transitions. CP-net arc
expressions can evaluate token multi-sets and may involve complex calculation procedures
over token variables declared to be associated with the corresponding arcs.
The CP-net model introduces additional extensions to PT-nets. Transition guards are
boolean expressions, which constrain transition firings. A transition guard associated with
a transition tests tokens that pass through a transition, and will only enable the transition
firings if the guard is successfully matched (i.e., the test evaluates to true). The CP-net
transition guards, together with places color sets and arc expressions, appear as a part of
net inscriptions in the CP-net.
In order to visualize and manage the complexity of large CP-nets, hierarchical CP-nets
(Huber, Jensen, & Shapiro, 1991; Jensen, 1997a) allow hierarchical representations of CPnets, in which sub-CP nets can be re-used in higher-level CP nets, or abstracted away from
them. Hierarchical CP-nets are built from pages, which are themselves CP-nets. Superpages
present a higher level of hierarchy, and are CP-nets that refer to subpages, in addition to
transitions and places. A subpage may also function as a superpage to other subpages. This
way, multiple hierarchy levels can be used in a hierarchical CP-net structure.
The relationship between a superpage and a subpage is defined by a substitution transition, which substitutes a corresponding subpage instance on the CP-net superpage structure
as a transition in the superpage. The substitution transition hierarchy inscription supplies
the exact mapping of the superpage places connected to the substitution transition (called
socket nodes), to the subpage places (called port nodes). The port types determine the
characteristics of the socket node to port node mappings. A complete CP-net hierarchical
structure is presented using a page hierarchy graph, a directed graph where vertices correspond to pages, and directed edges correspond to direct superpage-subpage relationships.
Timed CP-nets (Jensen, 1997b) extend CP-nets to support the representation of temporal aspects using a global clock. Timed CP-net tokens have an additional color attribute
called time stamp, which refers to the earliest time at which the token may be used. Time
stamps can be used by arc expression and transition guards, to enable a timed-transition if
and only if it satisfies two conditions: (i) the transition is color enabled, i.e. it satisfies the
constraints defined by arc expression and transition guards; and (ii) the tokens are ready,
i.e. the time of the global clock is equal to or greater than the tokens time stamps. Only
then can the transition fire.

Appendix B. Additional Examples of Conversation Representation
Building Blocks
This appendix presents some additional interaction building blocks to those already described in Section 3. The first is the AND-parallel messages interaction (AUML representation shown in Figure 17-a). Here, the sender agent1 sends both the msg1 message to
agent2 and the msg2 message to agent3 . However, the order of the two communicative acts
is unconstrained.
The representation of AND-parallel in our CP-net representation is shown in Figure 17-b.
The A1 B1 C1 , A2 B2 , A2 C2 , msg1 and msg2 places are defined similarly to Figures 3-b and
377

fiGutnik & Kaminka


	

ff	fi  




      

 










  





01
 0
	
	

ff	fi

ff	fi  
 



 



	






 
	
	

ff  

ff   
 
 
   
 !"#$  %& ' ()' (
 !"#$#*%& ' ()' ()'+(
 ,$  %& ()(
-'  ./ (

(a) AUML representation

(b) CP-net representation

Figure 17: AND-parallel messages interaction.
4-b in Section 3. However, we also define two additional intermediate agent places, A01 B2 C1
and A001 B1 C2 . The A01 B2 C1 place represents a joint interaction state where agent1 has sent
the msg1 message to agent2 and is ready to send the msg2 communicative act to agent3
(A1 ), agent2 has received the msg1 message (B2 ) and agent3 is waiting to receive the msg2
communicative act (C1 ). The A001 B1 C2 place represents a joint interaction state in which
agent1 is ready to send the msg1 message to agent2 and has already sent the msg2 communicative act to agent3 (A001 ), agent2 is waiting to receive the msg1 message (B1 ) and agent3
has received the msg2 communicative act (C2 ). These places enable agent1 to send both
communicative acts concurrently. Four transitions connect the appropriate places respectively. The behavior of the transitions connecting A01 B2 C1  A2 B2 and A001 B1 C2  A2 C2
is similar to described above. The transitions A1 B1 C1  A01 B2 C1 and A1 B1 C1  A001 B1 C2
are triggered by receiving messages msg1 and msg2 , respectively. However, these transitions should not consume the message token since it is used further for triggering transitions
A01 B2 C1  A2 B2 and A001 B1 C2  A2 C2 . This is achieved by adding an appropriate message
place as an output place of the corresponding transition.
The second AUML interaction building block, shown in Figure 18-a, is the message
sequence interaction, which is similar to AND-parallel. However, the message sequence
interaction defines explicitly the order between the transmitted messages. Using the 1/msg1
and 2/msg2 notation, Figure 18-a specifies that the msg1 message should be sent before
sending msg2 .
Figure 18-b shows the corresponding CP-net representation. The A1 B1 C1 , A2 B2 , A2 C2 ,
msg1 and msg2 places are defined as before. However, the CP-net implementation presents
an additional intermediate agent placeA01 B2 C1which is identical to the corresponding
378

fiRepresenting Conversations for Scalable Overhearing


	 
fffi

 
ff


 	

  	




	
fffi

 
ff





 
  





	
fffi

 
ff
0




 



	
fffi

 
ff



  



   !"
  #$%&  ' ( ) * + )* "
  #$%& %, ' ( ) * +)* +)- * "
  . & ' (  * + * "
/ )  * "



(a) AUML representation

(b) CP-net representation

Figure 18: Sequence messages interaction.
intermediate agent place in Figure 17-b. A01 B2 C1 is defined as an output place of the
A1 B1 C1  A2 B2 transition. It thus guarantees that the msg2 communicative act can be
sent (represented by the A01 B2 C1  A2 C2 transition) only upon completion of the msg1
transmission (the A1 B1 C1  A2 B2 transition).
The last interaction we present is the synchronized messages interaction, shown in Figure 19-a. Here, agent3 simultaneously receives msg1 from agent1 and msg2 from agent2 .
In AUML, this constraint is annotated by merging the two communicative act arrows into
a horizontal bar with a single output arrow.

 	
fffi
	 	


	
fffi
	 	

 

 








	
fffi
	 	
fi1

	

	
fffi
	 	







/
	
fffi
	 	

.

.



.
.
/0

.
.
/

   
 !"#$   %& '( )'( 
 !"#$ #*  %& '( )'( )'+( 
 ,$   %&  ( ) ( 
- '  .( 

	

(a) AUML representation

(b) CP-net representation

Figure 19: Synchronized messages interaction.
379

fiGutnik & Kaminka

Figure 19-b illustrates the CP-net implementation of synchronized messages interaction.
As in previous examples, we define the A1 C1 , B1 C1 , msg1 , msg2 and A2 B2 C2 places. We
additionally define two intermediate agent places, A2 C10 and B2 C100 . The A2 C10 place represents a joint interaction state where agent1 has sent msg1 to agent3 (A2 ), and agent3 has
received it, however agent3 is also waiting to receive msg2 (C10 ). The B2 C100 place represents
a joint interaction state in which agent2 has sent msg2 to agent3 (B2 ), and agent3 has
received it, however agent3 is also waiting to receive msg1 (C100 ). These places guarantee
that the interaction does not transition to the A2 B2 C2 state until both msg1 and msg2 have
been received by agent3 .

Appendix C. An Example of a Complex Interaction Protocol
We present an example of a complex 3-agent conversation protocol, which was manually converted to a CP-net representation using the building blocks in this paper. The conversation
protocol addressed here is the FIPA Brokering Interaction Protocol (FIPA Specifications,
2003a). This interaction protocol incorporates many advanced conversation features of our
representation such as nesting, communicative act sequence expression, message guards and
etc. Its AUML representation is shown in Figure 20.
The Initiator agent begins the interaction by sending a proxy message to the Broker
agent. The proxy communicative act contains the requested proxied-communicative-act as
part of its argument list. The Broker agent processes the request and responds with either an
agree or a ref use message. Communication of a ref use message terminates the interaction.
If the Broker agent has agreed to function as a proxy, it then locates the agents matching
the Initiator request. If no such agent can be found, the Broker agent communicates
a failure-no-match message and the interaction terminates. Otherwise, the Broker agent
begins m interactions with the matching agents. For each such agent, the Broker informs the
Initiator, sending either an inform-done-proxy or a failure-proxy communicative act. The
failure-proxy communicative act terminates the sub-protocol interaction with the matching
agent in question. The inform-done-proxy message continues the interaction. As the subprotocol progresses, the Broker forwards the received responses to the Initiator agent using
the reply-message-sub-protocol communicative acts. However, there can be other failures
that are not explicitly returned from the sub-protocol interaction (e.g., if the agent executing
the sub-protocol has failed). In case the Broker agent detects such a failure, it communicates
a failure-brokering message, which terminates the sub-protocol interaction.
A CP-net representation of the FIPA Brokering Interaction Protocol is shown in Figure 21. The Brokering Interaction Protocol starts from I1 B1 place. The I1 B1 place represents a joint interaction state where Initiator is ready to send a proxy communicative
act (I1 ) and Broker is waiting to receive it (B1 ). The proxy communicative act causes the
interacting agents to transition to I2 B2 . This place denotes an interaction state in which
Initiator has already sent a proxy message to Broker (I2 ) and Broker has received it (B2 ).
The Broker agent can send, as a response, either a ref use or an agree communicative act.
This CP-net component is implemented using the XOR-decision building block presented
in Section 3. The ref use message causes the agents to transition to I3 B3 place and thus
terminate the interaction. This place corresponds to Broker sending a ref use message
and terminating (B3 ), while Initiator receiving the message and terminating (I3 ). On the
380

fiRepresenting Conversations for Scalable Overhearing


 fffi 	 ff 

 

	

    	  	
    	 	     
  

		

 		

 	

  	

 		      
   	  	

 		    
   	  	

 	    	

 	   

 !  

    	 
 


   

 		  
     	

	    	  	 !   

 	  	  	
 
 	 " ##


 !  

	  	 

 		

 !    		
 	!	  	
 !    	

Figure 20: FIPA Brokering Interaction Protocol - AUML representation.
other hand, the agree communicative act causes the agents to transition to I4 B4 place,
which represents a joint interaction state in which the Broker has sent an agree message
to Initiator (and is now trying to locate the receivers of the proxied message), while the
Initiator received the agree message.
The Broker agents search for suitable receivers may result in two alternatives. First,
in case no matching agents are found, the interaction terminates in the I5 B5 agent place.
This joint interaction place corresponds to an interaction state where Broker has sent the
failure-no-match communicative act (B5 ), and Initiator has received the message and terminated (I5 ). The second alternative is that suitable agents have been found. Then, Broker
starts sending proxied-communicative-act messages to these agents on the established list
of designated receivers, i.e. TARGET-LIST. The first such proxied-communicative-act message causes the interacting agents to transition to I4 B6 P1 place. The I4 B6 P1 place denotes
a joint interaction state of three agents: Initiator, Broker and P articipant (the receiver).
381

fiGutnik & Kaminka



 

	 
fffi

 71/



 
 
ff

-    8 7 29 7> /


B * 71/    8 7 29 7> /

 

 

2 9KB



 !   "#$% & '(

	 
fffi





 

 



$% #/0% % # &  1

 ! 

2 3 "# $%4 2 3 " #$% (

$% #/0% % #/5 &   1
2 3 "# $%4 2 3 " #$%4


9

 


 
 
ff


 ! 

 

	 
fffi

 
 
ff

 !  - .$% #$% & '(



 

   
	 
fffi

 !  %) # & *  +   +,,,(

  

 
 
ff

2 3 "# $% (

 !  - . 6 & 789 (




 ! 



$% #/0% % #/5/- 6 &
$% # /0% % #/54

 1



- 6 (
 

 

$/
:2 9


IJ ff

   


   

H2 7!/


 9/% *

 L

 !  : 0"& 1  3 "# $%4

 

=

3 " #$%49 3%) #4

 71/

 

3-. $% # $% (

-    8 7 29 7> /

G

 
 
ff

 

K  % "#% K? L ? L
	 
fffi

   
	 
fffi





>2 !  & '(
 !  % " #%&781 % " #%/


K   *  7L

E fiF


9


 
 
ffD

G

 !  % " #%/ ; 0% & " #$% < 79 = ,,(

; 0% < 79 = ? ,,, / @(
>2    3: 0"(

 

 
M

>2    * 3 " #$% (

A7  281 9 &B9  C

K  % " #% K7N @L* 7N @L

>2  9 3%)  #(
>2  73- 6(

  *
H2 7!/

 

 
 P

 

 
 
ffD


 

  *

 71/
-    8 7 29 7> /

 

	 
fffi


 

8  /6 8/





  *

	 
fffi

 
M





 
 
ff


 

 

 

9

R  /0S/9  !

Q0
   *

R  / 892 9 7 8 /9  !

	 
fffi
 
 
ffD
 

 
M O

 X/ XX (
W
 71/-    8 7 2 9 7> /


 *

 
P T 

 U78



XY Z/

9  !

H2 7!/

 
V 

	 
fffi

	 
ff fi

 
 
ffD

 
 
ff

  *

XY Z/

[
W

 (
[
 (
W


 *


 

9/R (

XY Z/ Z Z (

R   /0S/

 


*! /
: 2 /

  *

0S/
   *

   *

	 
fffi

	 
fffi

 
 
ff D

 
 
ffD
O





T

9  !

 
 

Figure 21: FIPA Brokering Interaction Protocol - CP-net representation.
The Initiator individual state remains unchanged (I4 ) since the proxied-communicative-act
message starts an interaction between Broker and P articipant. The Broker individual
state (B6 ) denotes that designated agents have been found and the proxied-communicative382

fiRepresenting Conversations for Scalable Overhearing

act messages are ready to be sent, while P articipant is waiting to receive the interaction
initiating communicative act (P1 ). The proxied-communicative-act message place is also
connected as an output place of the transition. This message place is used as part of a
CP-net XOR-decision structure, which enables the Broker agent to send either a failure-nomatch or a proxied-communicative-act, respectively. Thus, the token denoting the proxiedcommunicative-act message, must not be consumed by the transition.
Thus, multiple proxied-communicative-act messages are sent to all P articipants. This
is implemented similarly to the broadcast sequence expression implementation (Section 4).
Furthermore, the proxied-communicative-act type is verified against the type of the requested
proxied communicative act, which is obtained from the original proxy message content.
We use the Proxied-Communicative-Act-Type message type place to implement this CPnet component similarly to Figure 8. Each proxied-communicative-act message causes the
interacting agents to transition to both the I4 B7 P1 and the B6 P1 places.
The B6 P1 place corresponds to interaction between the Broker and the P articipant
agents. It represents a joint interaction state in which Broker is ready to send a proxiedcommunicative-act message to P articipant (B6 ), and P articipant is waiting for the message
(P1 ). In fact, the B6 P1 place initiates the nested interaction protocol that results in B10 P3
place. The B10 P3 place represents a joint interaction state where P articipant has sent
the reply-message communicative act and terminated (P3 ), and Broker has received the
message (B10 ). In our example, we have chosen the FIPA Query Interaction Protocol (FIPA
Specifications, 2003d) (Figures 78) as the interaction sub-protocol. The CP-net component,
implementing the nested interaction sub-protocol, is modeled using the principles described
in Section 5. Consequently, the interaction sub-protocol is concealed using the Query-SubProtocol substitution transition. The B6 P1 , proxied-communicative-act and B10 P3 places
determine substitution transition socket nodes. These socket nodes are assigned to the CPnet port nodes in Figure 8 as follows. The B6 P1 and proxied-communicative-act places are
assigned to the I1 P1 and query input port nodes, while the B10 P3 place is assigned to the
I3 P3 , I5 P5 and I6 P6 output port nodes.
We now turn to the I4 B7 P1 place. In contrast to the B6 P1 place, this place corresponds to
the main interaction protocol. The I4 B7 P1 place represents a joint interaction state in which
Initiator is waiting for Broker to respond (I4 ), Broker is ready to send an appropriate response communicative act (B7 ), and to the best of the Initiators knowledge the interaction
with P articipant has not yet begun (P1 ). The Broker agent can send one of two messages,
either a failure-proxy or an inform-done-proxy, depending on whether it has succeeded to
send the proxied-communicative-act message to P articipant. The failure-proxy message
causes the agents to terminate the interaction with corresponding P articipant agent and to
transition to I6 B8 P1 place. This place denotes a joint interaction state in which Initiator
has received a failure-proxy communicative act and terminated (I6 ), Broker has sent the
failure-proxy message and terminated as well (B8 ) and the interaction with the P articipant
agent has never started (P1 ). On the other hand, the inform-done-proxy causes the agents to
transition to I7 B9 P2 place. The I7 B9 P2 place represents an interaction state where Broker
has sent the inform-done-proxy message (B9 ), Initiator has received it (I7 ), and P articipant
has begun the interaction with the Broker agent (P2 ). Again, this is represented using the
XOR-decision building block.
383

fiGutnik & Kaminka

Finally, the Broker agent can either send a reply-message-sub-protocol or a failurebrokering communicative act. The failure-brokering message causes the interacting agents
to transition to I8 B11 P2 place. This place indicates that Broker has sent a failure-brokering
message and terminated (B11 ), Initiator has received the message and terminated (I8 ), and
P articipant has terminated during the interaction with the Broker agent (P2 ). The replymessage-sub-protocol communicative act causes the agents to transition to I9 B12 P3 place.
The I9 B12 P3 place indicates that Broker has sent a reply-message-sub-protocol message and
terminated (B12 ), Initiator has received the message and terminated (I9 ), and P articipant
has successfully completed the nested sub-protocol with the Broker agent and terminated as
well (P3 ). Thus, the B10 P3 place, denoting a successful completion of the nested sub-protocol,
is also the corresponding transition input place.

References
AUML site (2003). Agent unified modeling language, at www.auml.org..
Busetta, P., Dona, A., & Nori, M. (2002). Channelled multicast for group communications.
In Proceedings of AAMAS-02.
Busetta, P., Serafini, L., Singh, D., & Zini, F. (2001). Extending multi-agent cooperation
by overhearing. In Proceedings of CoopIS-01.
ChaibDraa, B. (2002). Trends in agent communication languages. Computational Intelligence, 18 (2), 89101.
Cost, R. S. (1999). A framework for developing conversational agents. Ph.D. thesis, Department of Computer Science, University of Maryland.
Cost, R. S., Chen, Y., Finin, T., Labrou, Y., & Peng, Y. (1999). Modeling agent conversations
with coloured Petri nets. In Proceedings of the Workshop on Specifying and Implementing Conversation Policies, the Third International Conference on Autonomous Agents
(Agents-99), Seattle, Washington.
Cost, R. S., Chen, Y., Finin, T., Labrou, Y., & Peng, Y. (2000). Using coloured petri nets
for a conversation modeling. In Dignum, F., & Greaves, M. (Eds.), Issues in Agent
Communications, Lecture notes in Computer Science, pp. 178192. Springer-Verlag.
Cranefield, S., Purvis, M., Nowostawski, M., & Hwang, P. (2002). Ontologies for interaction protocols. In Proceedings of the Workshop on Ontologies in Agent Systems, the
First International Joint Conference on Autonomous Agents & Multi-Agent Systems
(AAMAS-02), Bologna, Italy.
de Silva, L. P., Winikoff, M., & Liu, W. (2003). Extending agents by transmitting protocols
in open systems. In Proceedings of the Workshop on Challenges in Open Agent Systems, the Second International Joint Conference on Autonomous Agents & Multi-Agent
Systems (AAMAS-03), Melbourne, Australia.
Desel, J., Oberweis, A., & Zimmer, T. (1997). Validation of information system models: Petri
nets and test case generation. In Proceedings of the 1997 IEEE International Conference on Systems, Man and Cybernetics: Computational Cybernetics and Simulation,
pp. 34013406, Orlando, Florida.
384

fiRepresenting Conversations for Scalable Overhearing

Finin, T., Labrou, Y., & Mayfield, J. (1997). KQML as an agent communication language.
In Bradshaw, J. (Ed.), Software Agents. MIT Press.
FIPA site (2003). Fipa - the Foundation for Intelligent Physical Agents, at www.fipa.org..
FIPA Specifications (2003a). Fipa Brokering Interaction Protocol Specification, version H,
at www.fipa.org/specs/fipa0000033/..
FIPA Specifications (2003b). Fipa Contract Net Interaction Protocol Specification, version
H, at www.fipa.org/specs/fipa0000029/..
FIPA Specifications (2003c). Fipa Interaction Protocol Library Specification, version E, at
www.fipa.org/specs/fipa0000025/..
FIPA Specifications (2003d). Fipa Query Interaction Protocol Specification, version H, at
www.fipa.org/specs/fipa0000027/..
Gutnik, G., & Kaminka, G. (2004a). Towards a formal approach to overhearing: Algorithms
for conversation identification. In Proceedings of AAMAS-04.
Gutnik, G., & Kaminka, K. A. (2004b). A scalable Petri net representation of interaction
protocols for overhearing.. In van Eijk, R. M., Huget, M., & Dignum, F. (Eds.), Agent
Communication LNAI 3396: International Workshop on Agent Communication, AC
2004, New York, NY, USA, pp. 5064. Springer-Verlag.
Hameurlain, N. (2003). MIP-Nets: Refinement of open protocols for modeling and analysis
of complex interactions in multi-agent systems. In Proceedings of the 3rd International
Central and Eastern European Conference on Multi-Agent Systems (CEEMAS-03), pp.
423434, Prague, Czech Republic.
Huber, P., Jensen, K., & Shapiro, R. M. (1991). Hierarchies in Coloured Petri nets. In
Jensen, K., & Rozenberg, G. (Eds.), High-level Petri Nets: Theory and Application,
pp. 215243. Springer-Verlag.
Jensen, K. (1997a). Coloured Petri Nets. Basic Concepts, Analysis Methods and Practical
Use, Vol. 1. Springer-Verlag.
Jensen, K. (1997b). Coloured Petri Nets. Basic Concepts, Analysis Methods and Practical
Use, Vol. 2. Springer-Verlag.
Jensen, K. (1997c). Coloured Petri Nets. Basic Concepts, Analysis Methods and Practical
Use, Vol. 3. Springer-Verlag.
Kaminka, G., Pynadath, D., & Tambe, M. (2002). Monitoring teams by overhearing: A
multi-agent plan-recognition approach. JAIR, 17, 83135.
Khomenco, V., & Koutny, M. (2000). LP deadlock checking using partial order dependencies. In Proceedings of the 11th International Conference on Concurrency Theory
(CONCUR-00), pp. 410425, Pennsylvania State University, Pennsylvania.
Kone, M. T., Shimazu, A., & Nakajima, T. (2000). The state of the art in agent communication languages. Knowledge and Information Systems, 2, 258284.
Legras, F. (2002). Using overhearing for local group formation. In Proceedings of AAMAS02.
385

fiGutnik & Kaminka

Lin, F., Norrie, D. H., Shen, W., & Kremer, R. (2000). A schema-based approach to specifying conversation policies. In Dignum, F., & Greaves, M. (Eds.), Issues in Agent
Communications, Lecture notes in Computer Science, pp. 193204. Springer-Verlag.
Ling, S., & Loke, S. W. (2003). MIP-Nets: A compositional model of multi-agent interaction.
In Proceedings of the 3rd International Central and Eastern European Conference on
Multi-Agent Systems (CEEMAS-03), pp. 6172, Prague, Czech Republic.
Mazouzi, H., Fallah-Seghrouchni, A. E., & Haddad, S. (2002). Open protocol design for
complex interactions in multi-agent systems. In Proceedings of the First International
Joint Conference on Autonomous Agents & Multi-Agent Systems (AAMAS-02), pp.
517526, Bologna, Italy.
Milner, R., Harper, R., & Tofte, M. (1990). The Definition of Standard ML. MIT Press.
Moldt, D., & Wienberg, F. (1997). Multi-agent systems based on Coloured Petri nets. In
Proceedings of the 18th International Conference on Application and Theory of Petri
Nets (ICATPN-97), pp. 82101, Toulouse, France.
Novick, D., & Ward, K. (1993). Mutual beliefs of multiple conversants: A computational
model of collaboration in air traffic control. In Proceedings of AAAI-93, pp. 196201.
Nowostawski, M., Purvis, M., & Cranefield, S. (2001). A layered approach for modeling
agent conversations. In Proceedings of the Second International Workshop on Infrastructure for Agents, MAS and Scalable MAS, the Fifth International Conference on
Autonomous Agents, pp. 163170, Montreal, Canada.
Odell, J., Parunak, H. V. D., & Bauer, B. (2000). Extending UML in the design of multiagent systems. In Proceedings of the AAAI-2000 Workshop on Agent-Oriented Information Systems (AOIS-00).
Odell, J., Parunak, H. V. D., & Bauer, B. (2001a). Agent UML: A formalism for specifying
multi-agent interactions. In Ciancarini, P., & Wooldridge, M. (Eds.), Agent-Oriented
Software Engineering, pp. 91103. Springer-Verlag, Berlin.
Odell, J., Parunak, H. V. D., & Bauer, B. (2001b). Representing agent interaction protocols in UML. In Ciancarini, P., & Wooldridge, M. (Eds.), Agent-Oriented Software
Engineering, pp. 121140. Springer-Verlag, Berlin.
Parunak, H. V. D. (1996). Visualizing agent conversations: Using enhances Dooley graphs
for agent design and analysis. In Proceedings of the Second International Conference
on Multi-Agent Systems (ICMAS-96).
Paurobally, S., & Cunningham, J. (2003). Achieving common interaction protocols in open
agent environments. In Proceedings of the Workshop on Challenges in Open Agent
Systems, the Second International Joint Conference on Autonomous Agents & MultiAgent Systems (AAMAS-03), Melbourne, Australia.
Paurobally, S., Cunningham, J., & Jennings, N. R. (2003). Ensuring consistency in the
joint beliefs of interacting agents. In Proceedings of the Second International Joint
Conference on Autonomous Agents & Multi-Agent Systems (AAMAS-03), Melbourne,
Australia.
386

fiRepresenting Conversations for Scalable Overhearing

Petri Nets site (2003). Petri nets world: Online services for the international petri nets
community, at www.daimi.au.dk/petrinets..
Poutakidis, D., Padgham, L., & Winikoff, M. (2002). Debugging multi-agent systems using
design artifacts: The case of interaction protocols. In Proceedings of the First International Joint Conference on Autonomous Agents & Multi-Agent Systems (AAMAS-02),
pp. 960967, Bologna, Italy.
Purvis, M. K., Hwang, P., Purvis, M. A., Cranefield, S. J., & Schievink, M. (2002). Interaction protocols for a network of environmental problem solvers. In Proceedings
of the 2002 iEMSs International Meeting:Integrated Assessment and Decision Support
(iEMSs 2002), pp. 318323, Lugano, Switzerland.
Ramos, F., Frausto, J., & Camargo, F. (2002). A methodology for modeling interactions in
cooperative information systems using Coloured Petri nets. International Journal of
Software Engineering and Knowledge Engineering, 12 (6), 619636.
Reisig, W. (1985). Petri Nets: An Introduction. Springer-Verlag.
Rossi, S., & Busetta, P. (2004). Towards monitoring of group interactions and social roles
via overhearing. In Proceedings of CIA-04, pp. 4761, Erfurt, Germany.
Smith, I. A., & Cohen, P. R. (1996). Toward a semantics for an agent communications
language based on speech-acts. In Proceedings of AAAI-96.
Wikstrom, A. (1987). Functional Programming using Standard ML. International Series in
Computer Science. Prentice-Hall.
Xu, H., & Shatz, S. M. (2001). An agent-based Petri net model with application to
seller/buyer design in electronic commerce. In Proceedings of the 5th International
Symposium on Autonomous Decentralized Systems (ISAD-01), pp. 1118, Dallas,
Texas, USA.

387

fi