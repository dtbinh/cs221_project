Journal of Artificial Intelligence Research 27 (2006) 25-53

Submitted 10/05; published 9/06

Generative Prior Knowledge for Discriminative Classification
Arkady Epshteyn
Gerald DeJong

aepshtey@uiuc.edu
dejong@uiuc.edu

Department of Computer Science
University of Illinois at Urbana-Champaign
201 N. Goodwin
Urbana, IL, 61801 USA

Abstract
We present a novel framework for integrating prior knowledge into discriminative classifiers. Our framework allows discriminative classifiers such as Support Vector Machines
(SVMs) to utilize prior knowledge specified in the generative setting. The dual objective of
fitting the data and respecting prior knowledge is formulated as a bilevel program, which
is solved (approximately) via iterative application of second-order cone programming. To
test our approach, we consider the problem of using WordNet (a semantic database of
English language) to improve low-sample classification accuracy of newsgroup categorization. WordNet is viewed as an approximate, but readily available source of background
knowledge, and our framework is capable of utilizing it in a flexible way.

1. Introduction
While SVM (Vapnik, 1995) classification accuracy on many classification tasks is often
competitive with that of human subjects, the number of training examples required to
achieve this accuracy is prohibitively large for some domains. Intelligent user interfaces,
for example, must adopt to the behavior of an individual user after a limited amount of
interaction in order to be useful. Medical systems diagnosing rare diseases have to generalize
well after seeing very few examples. Any natural language processing task that performs
processing at the level of n-grams or phrases (which is frequent in translation systems)
cannot expect to see the same sequence of words a sufficient number of times even in large
training corpora. Moreover, supervised classification methods rely on manually labeled
data, which can be expensive to obtain. Thus, it is important to improve classification
performance on very small datasets. Most classifiers are not competitive with humans
in their ability to generalize after seeing very few examples. Various techniques have been
proposed to address this problem, such as active learning (Tong & Koller, 2000b; Campbell,
Cristianini, & Smola, 2000), hybrid generative-discriminative classification (Raina, Shen,
Ng, & McCallum, 2003), learning-to-learn by extracting common information from related
learning tasks (Thrun, 1995; Baxter, 2000; Fink, 2004), and using prior knowledge.
In this work, we concentrate on improving small-sample classification accuracy with
prior knowledge. While prior knowledge has proven useful for classification (Scholkopf,
Simard, Vapnik, & Smola, 2002; Wu & Srihari, 2004; Fung, Mangasarian, & Shavlik, 2002;
Epshteyn & DeJong, 2005; Sun & DeJong, 2005), it is notoriously hard to apply in practice
because there is a mismatch between the form of prior knowledge that can be employed by
classification algorithms (either prior probabilities or explicit constraints on the hypothesis
c
2006
AI Access Foundation. All rights reserved.

fiEpshteyn & DeJong

space of the classifier) and the domain theories articulated by human experts. This is
unfortunate because various ontologies and domain theories are available in abundance, but
considerable amount of manual effort is required to incorporate existing prior knowledge
into the native learning bias of the chosen algorithm. What would it take to apply an
existing domain theory automatically to a classification task for which it was not specifically
designed? In this work, we take the first steps towards answering this question.
In our experiments, such a domain theory is exemplified by WordNet, a linguistic
database of semantic connections among English words (Miller, 1990). We apply WordNet to a standard benchmark task of newsgroup categorization. Conceptually, a generative
model describes how the world works, while a discriminative model is inextricably linked to
a specific classification task. Thus, there is reason to believe that a generative interpretation
of a domain theory would seem to be more natural and generalize better across different
classification tasks. In Section 2 we present empirical evidence that this is, indeed, the
case with WordNet in the context of newsgroup classification. For this reason, we interpret
the domain theory in the generative setting. However, many successful learning algorithms
(such as support vector machines) are discriminative. We present a framework which allows
the use of generative prior in the discriminative classification setting.
Our algorithm assumes that the generative distribution of the data is given in the
Bayesian framework: P rob(data|model) and the prior P rob0 (model) are known. However,
instead of performing Bayesian model averaging, we assume that a single model M  has
been selected a-priori, and the observed data is a manifestation of that model (i.e., it is
drawn according to P rob(data|M  )). The goal of the learning algorithm is to estimate
M  . This estimation is performed as a two-player sequential game of full information.
The bottom (generative) player chooses the Bayes-optimal discriminator function f (M ) for
the probability distribution P rob(data|model = M ) (without taking the training data into
account) given the model M . The model M is chosen by the top (discriminative) player in
such a way that its prior probability of occurring, given by P rob0 (M ), is high, and it forces
the bottom player to minimize the training-set error of its Bayes-optimal discriminator
f (M ). This estimation procedure gives rise to a bilevel program. We show that, while the
problem is known to be NP-hard, its approximation can be solved efficiently by iterative
application of second-order cone programming.
The only remaining issue is how to construct the generative prior P rob0 (model) automatically from the domain theory. We describe how to solve this problem in Section 2,
where we also argue that the generative setting is appropriate for capturing expert knowledge, employing WordNet as an illustrative example. In Section 3, we give the necessary
preliminary information and important known facts and definitions. Our framework for incorporating generative prior into discriminative classification is described in detail in Section
4. We demonstrate the efficacy of our approach experimentally by presenting the results
of using WordNet for newsgroup classification in Section 5. A theoretical explanation of
the improved generalization ability of our discriminative classifier constrained by generative
prior knowledge appears in Section 6. Section 7 describes related work. Section 8 concludes
the paper and outlines directions for future research.
26

fiGenerative Prior Knowledge for Discriminative Classification

2. Generative vs. Discriminative Interpretation of Domain Knowledge
WordNet can be viewed as a network, with nodes representing words and links representing
relationships between two words (such as synonyms, hypernyms (is-a), meronyms (partof), etc.). An important property of WordNet is that of semantic distance - the length
(in links) of the shortest path between any two words. Semantic distance approximately
captures the degree of semantic relatedness of two words. We set up an experiment to
evaluate the usefulness of WordNet for the task of newsgroup categorization. Each posting
was represented by a bag-of-words, with each binary feature representing the presence of
the corresponding word. The evaluation was done on pairwise classification tasks in the
following two settings:
1. The generative framework assumes that each posting x = [x1 , .., xn ] is generated by
a distinct probability distribution for each newsgroup. The simplest version of a
Linear Discriminan Analysis (LDA) classifier posits that x|(y = 1)  N ( 1 , I) and
x|(y = 1)  N (2 , I) for posting x given label y  {1, 1}, where I  R(nn) is
the identity matrix. Classification is done by assigning the most probable label to
x: y(x) = 1  P rob(x|1) > P rob(x|  1). It is well-known (e.g. see Duda, Hart, &
Stork, 2001) that this decision rule is equivalent to the one given by the hyperplane
c1 , .., 
cn ] are estimated via
(2  1 )T x  21 (T2 2  T1 1 ) > 0. The means bi = [
i
i
1
maximum likelihood from the training data [x1 , y1 ], .., [xm , ym ] .

2. The discriminative SVM classifier sets the separating hyperplane to directly minimize
the number of errors on the training data:
c1 , .., w
cn ], bb] = arg minw,b kwk s.t. yi (wT xi + b)  1, i = 1, .., m.
[w
b = [w

Our experiment was conducted in the learning-to-learn framework (Thrun, 1995; Baxter,
2000; Fink, 2004). In the first stage, each classifier was trained using training data from the
training task (e.g., for classifying postings into the newsgroups atheism and guns). In the
second stage, the classifier was generalized using WordNets semantic information. In the
third stage, the generalized classifier was applied to a different, test task (e.g., for classifying
postings for the newsgroups atheism vs. mideast) without seeing any data from this new
classification task. The only way for a classifier to generalize in this setting is to use the
original sample to acquire information about WordNet, and then exploit this information
to help it label examples from the test sample. In learning how to perform this task, the
system also learns how to utilize the classification knowledge implicit in WordNet.
We now describe the second and third stages for the two classifiers in more detail:

1. It is intuitive to interpret information embedded in WordNet as follows: if the title
of the newsgroup is guns, then all the words with the same semantic distance to
gun (e.g., artillery, shooter, and ordnance with the distance of two) provide a
similar degree of classification information. To quantify this intuition, let li,train =
j
1
n
[li,train
, .., li,train
, .., li,train
] be the vector of semantic distances in WordNet between
each feature word j and the label of each training task newsgroup i  {1, 2}. Define
1. The standard LDA classifier assumes that x|(y = 1)  N (1 , ) and x|(y = 1)  N (2 , ) and
estimates the covariance matrix  as well as the means 1 , 2 from the training data. In our experiments,
we take  = I.

27

fiEpshteyn & DeJong

1)Train: atheism vs. guns
2)Train: atheism vs. guns
3)Train: guns vs. mideast
Test: atheism vs. mideast
Test: guns vs. mideast
Test: atheism vs. mideast
1

1

0.9

1

0.9

0.9

0.8

0.8

0.8

0.7

0.7

0.7

0.6

0.6

0.6

0.5

0.5

0.5
0

200 400 600 800 1000 1200 1400 1600 1800

0

200 400 600 800 1000 1200 1400 1600 1800

0

200 400 600 800 1000 1200 1400 1600 1800

Legend:

Generative
Discriminative

Figure 2.1: Test set accuracy as a percentage versus the number of training points for 3
different classification experiments. For each classification task, a random test
set is chosen from the full set of articles in 20 different ways. Error bars are
based on 95% confidence intervals.

P

i (v) ,

c
j
j
=v i
i,train
j
=v|
|j:li,train
j:l

, i = 1, 2, where |  | denotes cardinality of a set. i compresses

information in bi based on the assumption that words equidistant from the newsgroup
label are equally likely to appear in a posting from that newsgroup. To test the
performance of this compressed classifier on a new task with semantic distances given
j
). Notice
by li,test , the generative distributions are reconstructed via ji := i (li,test
that if the classifier is trained and tested on the same task, applying the function  i
is equivalent to averaging the components of the means of the generative distribution
corresponding to the equivalence classes of words equidistant from the label. If the
classifier is tested on a different classification task, the reconstruction process reassigns
the averages based on the semantic distances to the new labels.
2. It is less intuitive to interpret WordNet in a discriminative setting. One possible
interpretation is that coefficients w j of the separating hyperplane are governed by
semantic distances to labels, as captured by the compression function 0 (v, u) ,
P

cj

w
j
j
=u
=v,l
2,train
1,train
j
j
|j:l1,train
=v,l2,train
=u|
j:l

j
j
and reconstructed via w j := 0 (l1,test
, l2,test
).

Note that both the LDA generative classifier and the SVM discriminative classifier have
the same hypothesis space of separating hyperplanes. The resulting test set classification
accuracy for each classifier for a few classification tasks from the 20-newsgroup dataset
28

fiGenerative Prior Knowledge for Discriminative Classification

(Blake & Merz, 1998) is presented in Figure 2.1. The x-axis of each graph represents the
size of the training task sample, and the y-axis - the classifiers performance on the test
classification task. The generative classifier consistently outperforms the discriminative
classifier. It converges much faster, and on two out of three tasks the discriminative classifier
is not able to use prior knowledge nearly as effectively as the generative classifier even after
seeing 90% of all of the available training data. The generative classifier is also more
consistent in its performance - note that its error bars are much smaller than those of
the discriminative classifier. The results clearly show the potential of using background
knowledge as a vehicle for sharing information between tasks. But the effective sharing is
contingent on an appropriate task decomposition, here supplied by the tuned generative
model.
The evidence in Figure 2.1 seemingly contradicts the conventional wisdom that discriminative training outperforms generative for sufficiently large training samples. However, our
experiment evaluates the two frameworks in the context of using an ontology to transfer
information between learning tasks. This was never done before. The experiment demonstrates that the interpretation of semantic distance in WordNet is more intuitive in the
generative classification setting, probably because it better reflects the human intuitions
behind WordNet.
However, our goal is not just to construct a classifier that performs well without seeing
any examples of the test classification task. We also want a classifier that improves its
behavior as it sees new labeled data from the test classification task. This presents us
with a problem: one of the best-performing classifiers (and certainly the best on the text
classification task according to the study by Joachims, 1998) is SVM, a discriminative
classifier. Therefore, in the rest of this work, we focus on incorporating generative prior
knowledge into the discriminative classification framework of support vector machines.

3. Preliminaries
It has been observed that constraints on the probability measure of a half-space can be
captured by second-order cone constraints for Gaussian distributions (see, e.g., the tutorial
by Lobo, Vandenberghe, Boyd, & Lebret, 1998). This allows for efficient processing of such
constraints within the framework of second-order cone programming (SOCP). We intend
to model prior knowledge with elliptical distributions, a family of probability distributions
which generalizes Gaussians. In what follows, we give a brief overview of second-order
cone programming and its relationship to constraints imposed on the Gaussian probability
distribution. We also note that it is possible to extend the argument presented by Lobo et
al. (1998) to elliptical distributions.
Second-order cone program is a mathematical program of the form:
min v T x

(3.1)

x

s.t. kAi x + bi k  cTi x + di , i = 1, ..., N

(3.2)

where x  Rn is the optimization variable and v  Rn , Ai  R(ki xn) , bi  Rki , ci  Rn ,
di  R are problem parameters (kk represents the usual L2 -norm in this paper). SOCPs
can be solved efficiently with interior-point methods, as described by Lobo et al. (1998) in
a tutorial which contains an excellent overview of the theory and applications of SOCP.
29

fiEpshteyn & DeJong

We use the elliptical distribution to model distribution of the data a-priori. Elliptical
distributions are distributions with ellipsoidally-shaped equiprobable contours. The density
function of the n-variate elliptical distribution has the form f,,g (x) = c(det )1 g((x 
)T 1 (x  )), where x  Rn is the random variable,   Rn is the location parameter,
  R(nxn) is a positive definite (n  n)-matrix representing the scale parameter, function
g() is the density generator, and c is the normalizing constant. We will use the notation X  E(, , g) to denote that the random variable X has an elliptical distribution
with parameters , , g. Choosing appropriate density generator functions g, the Gaussian
distribution, the Student-t distribution, the Cauchy distribution, the Laplace distribution,
and the logistic distribution can be seen as special cases of the elliptical distribution. Using an elliptical distribution relaxes the restrictive assumptions the user has to make when
imposing a Gaussian prior, while keeping many desirable properties of Gaussians, such as:
1. If X  E(, , g), A  R(kn) , and B  Rk , then AX + B  E(A + B, AAT , g)
2. If X  E(, , g), then E(X) = .
3. If X  E(, , g), then V ar(X) = g , where g is a constant that depends on the
density generator g.
The following proposition shows that for elliptical distributions, the constraint P (w T x+b 
0)   (i.e., the probability that X takes values in the half-space {w T x + b  0} is less than
) is equivalent to a second-order cone constraint for   21 :
Proposition
3.1. If X  E(, , g), P rob(w T x + b  0)    12 is equivalent to (w T  +
 1/2
b)/g,   w, where g, is a constant which only depends on g and .
Proof. The proof is identical to the one given by Lobo (1998) and Lanckriet et al. (2001)
for Gaussian distributions and is provided here for completeness:
Assume P rob(w T x + b  0)  .

(3.3)

Let u = w T x+b. Let u denote the mean of u, and  denote its variance. Then the constraint
3.3 can be written as
uu
u
(3.4)
P rob(     )  .



 

By the properties of elliptical distributions, u = w T  + b,  = g 1/2 w, and uu


T

)
E(0, 1, g). Thus, statement 3.4 above can be expressed as P robXE(0,1,g) (X   w +b
1/2 w
k
gk
T
, which is equivalent to  w +b
 1 (), where (z) = P robXE(0,1,g) (X  z). The
1/2 w
k
gk

proposition follows with g, = g 1 ().

Proposition 3.2. For any monotonically decreasing g, P robXE(,,g) (x)   is equivalent


to 1/2 (x  )  g,c, , where g,c,, = g 1 ( ||
c ) is a constant which only depends on
g, c, , .
Proof. Follows directly from the definition of P robXE(,,g) (x).
30

fiGenerative Prior Knowledge for Discriminative Classification

4. Generative Prior via Bilevel Programming
We deal with the binary classification task: the classifier is a function f (x) which maps
instances x  Rn to labels y  {1, 1}. In the generative setting, the probability densities
P rob(x|y = 1; 1 ) and P rob(x|y = 1; 2 ) parameterized by  = [1 , 2 ] are provided (or
estimated from the data), along with the prior probabilities on class labels (y = 1) and
(y = 1), and the Bayes optimal decision rule is given by the classifier
f (x|) = sign(P rob(x|y = 1; 1 )(y = 1)  P rob(x|y = 1; 2 )(y = 1)),
where sign(x) := 1 if x  0 and 1 otherwise. In LDA, for instance, the parameters  1 and
2 are the means of the two Gaussian distributions generating the data given each label.
Informally, our approach to incorporating prior knowledge is straightforward: we assume
a two-level hierarchical generative probability distribution model. The low-level probability
distribution of the data given the label P rob(x|y; ) is parameterized by , which, in turn,
has a known probability distribution P rob0 (). The goal of the classifier is to estimate the
values of the parameter vector  from the training set of labeled points [x 1 , y1 ]...[xm , ym ].
This estimation is performed as a two-player sequential game of full information. The
bottom (generative) player, given , selects the Bayes optimal decision rule f (x|). The
top (discriminative) player selects the value of  which has a high probability of occurring
(according to P rob0 ()) and which will force the bottom player to select the decision rule
which minimizes the discriminative error on the training set. We now give a more formal
specification of this training problem and formulate it as a bilevel program. Some of the
assumptions are subsequently relaxed to enforce both tractability and flexibility.
We use an elliptical distribution E(1 , 1 , g) to model X|y = 1, and another elliptical
distribution E(2 , 2 , g) to model X|y = 1. If the parameters i , i , i = 1, 2 are known,
the Bayes optimal decision rule restricted to the class of linear classifiers 2 of the form
fw,b (x) = sign(w T x + b) is given by f (x) which minimizes the probability of error among all
linear discriminants: P rob(error) = P rob(w T x + b  0|y = 1)(y = 1) + P rob(w T x + b 
0|y = 1)(y = 1) = 12 (P robXE(1 ,1 ,g) (wT x + b  0) + P robXE(2 ,2 ,g) (wT x + b  0)),
assuming equal prior probabilities for both classes. We now model the uncertainty in the
means of the elliptical distributions i , i = 1, 2 by imposing elliptical prior distributions on
the locations of the means: i  E(ti , i , g), i = 1, 2. In addition, to ensure the optimization
problem is well-defined, we maximize the margin of the hyperplane subject to the imposed
generative probability constraints:
min kwk

(4.1)

1 ,2

s.t.yi (wT xi + b)  1, i = 1, .., m

P robi E(ti ,i ,g) (i )  , i = 1, 2

(4.2)
(4.3)
T

T

[w, b] solves min[P robXE(1 ,1 ,g) (w x + b  0) + P robXE(2 ,2 ,g) (w x + b  0)]
w,b

(4.4)
This is a bilevel mathematical program (i.e., an optimization problem in which the
constraint region is implicitly defined by another optimization problem), which is strongly
2. A decision rule restricted to some class of classifiers H is optimal if its probability of error is no larger
than that of any other classifier in H (Tong & Koller, 2000a).

31

fiEpshteyn & DeJong

NP-hard even when all the constraints and both objectives are linear (Hansen, Jaumard,
& Savard, 1992). However, we show that it is possible to solve a reasonable approximation of this problem efficiently with several iterations of second-order cone programming.
First, we relax the second-level minimization (4.4) by breaking it up into two constraints:
P robXE(1 ,1 ,g) (wT x + b  0)   and P robXE(2 ,2 ,g) (wT x + b  0)  . Thus, instead of looking for the Bayes optimal decision boundary, the algorithm looks for a decision
boundary with low probability of error, where low error is quantified by the choice of .
Propositions 3.1 and 3.2 enable us to rewrite the optimization problem resulting from
this relaxation as follows :
min kwk

(4.5)

1 ,2 ,w,b

s.t.yi (wT xi + b)  1, i = 1, .., m




 1/2
(i  ti )  , i = 1, 2
P robi E(ti ,i ,g) (i )  , i = 1, 2  i

w T 1 + b

P robXE(1 ,1 ,g) (wT x + b  0)     
 1/2   
1 w 

w T 2 + b

P robXE(2 ,2 ,g) (wT x + b  0)    
 1/2   
2 w 

(4.6)
(4.7)
(4.8)

(4.9)

Notice that the form of this program does not depend on the generator function g of the
elliptical distribution - only constants  and  depend on it.  defines how far the system
is willing to deviate from the prior in its choice of a generative model, and  bounds the
tail probabilities of error (Type I and Type II) which the system will tolerate assuming its
chosen generative model is correct. These constants depend both on the specific generator
g and the amount of error the user is willing to tolerate. In our experiments, we select
the values of these constants to optimize performance. Unless the user wants to control
the probability bounds through these constants, it is sufficient to assume a-priori only that
probability distributions (both prior and hyper-prior) are elliptical, without making any
further commitments.
Our algorithm solves the above problem by repeating the following two steps:
1. Fix the top-level optimization parameters 1 and 2 . This step combines the objectives of maximizing the margin of the classifier on the training data and ensuring that
the decision boundary is (approximately) Bayes optimal with respect to the given
generative probability densities specified by the 1 , 2 .
2. Fix the bottom-level optimization parameters w, b. Expand the feasible region of the
program in step 1 as a function of 1 , 2 . This step fixes the decision boundary and
pushes the means of the generative distribution as far away from the boundary as the
constraint (4.7) will allow.
The steps are repeated until convergence (in practice, convergence is detected when the
optimization parameters do not change appreciably from one iteration to the next). Each
step of the algorithm can be formulated as a second-order cone program:
32

fiGenerative Prior Knowledge for Discriminative Classification

Step 1. Fix 1 and 2 . Removing unnecessary constraints from the mathematical
program above and pushing the objective into constraints, we get the following SOCP:
min

(4.10)

w,b

s.t.  kwk

(4.11)

yi (wT xi + b)  1, i = 1, .., m

(4.12)

wT 

1+b

 
 1/2   
1 w 

(4.13)

w T 2 + b


 1/2   
2 w 

(4.14)

Step 2. Fix w, b and expand the span of the feasible region, as measured by
T
w 1 +b .
 1/2 
1 w

T
w 2 +b
 1/2 
2 w



Removing unnecessary constraints, we get:
w T 2 + b w T 1 + b
  

max 
 1/2 
1 ,2  1/2 
2 w 
 1 w 



 1/2
(i  ti )  , i = 1, 2
s.t. i

(4.15)
(4.16)

The behavior of the algorithm is illustrated in Figure 4.1.
The following theorems state that the algorithm converges.
Theorem
4.1. Suppose
n
o that the algorithm produces a sequence of iterates


(t) (t)
(t)
(t)
, and the quality of each iterate is evaluated by its margin w(t) .
1 , 2 , w , b
t=0
This evaluation function converges.
(t)

(t)

(t)

(t)

Proof. Let 1 , 2 be the values of the prior location parameters, and w1 , b1 be the
minimum error hyperplane the algorithm finds at the end of the t-th step. At the end of
(t+1) (t+1)
the (t + 1)-st step, w1
, b1
is still in the feasible region of the t-th step SOCP. This
(t) )T 

(t)
2 +b
1/2 (t) 
w

2

is true because the function f ( (w

(t) )T 

(t)
1 +b
1/2 (t) 
w

1

,  (w

)=

(w(t) )T 2 +b(t)
 1/2 (t) 
2 w 



(w(t) )T 1 +b(t)
 1/2 (t) 
1 w 

is monotonically increasing in each one of its arguments when the other argument is fixed,
(t+1) (t+1)
and fixing 1 (or 2 ) fixes exactly one argument. If the solution 1
, 2
at the end
(t+1)

of the (t + 1)-st step were such that
(t+1)

fixing 1

(t)

T
(t)
(w(t)
+b

) 2
 1/2 (t) 
2 w 

< , then f could be increased by

(t)

and using the value of 2 from the beginning of the step which ensures that

(t) )T 
(t)
(w
2 +b

 1/2 (t) 
2 w 

 , which contradicts the observation that f is maximized at the end of
(t+1)

the second step. The same contradiction is reached if 

T
(t)
(w(t)
+b

) 1
 1/2 (t) 
1 w 

< . Since the

minimum error hyperplane from the previous
iteration is in the feasible region at the start

(t)


must decrease monotonically from one iteration
of the next iteration, the objective w
to the next. Since it is bounded below by zero, the algorithm converges.
33

fiEpshteyn & DeJong

1)

2)

5

5

4

4

3

3

2

2

1

1

0

0

1
1

0

1

2

3

4

5

1
1

0

1

2

3

3)
5

4

4

3

3

2

2

1

1

0

0

0

5

4)

5

1
1

4

1

2

3

4

5

1
1

0

1

2

3

4

5

Figure 4.1: Steps of the iterative (hard-margin) SOCP procedure:
(The region where the hyperprior probability is larger than  is shaded for each prior
distribution. The covariance matrices are represented by equiprobable elliptical contours.
In this example, the covariance matrices of the hyperprior and the prior distributions are
multiples of each other. Data points from two different classes are represented by diamonds
and squares.)
1. Data, prior, and hyperprior before the algorithm is executed.
2. Hyperplane discriminator at the end of step 1, iteration 1
3. Priors at the end of step 2, iteration 1
4. Hyperplane discriminator at the end of step 2, iteration 2
The algorithm converges at the end of step 2 for this problem (step 3 does not move the
hyperplane).
In addition to the convergence of the objective function, the accumulation points of the
sequence of iterates can be characterized by the following theorem:
n
o
(t) (t)
Theorem 4.2. The accumulation points of the sequence 1 , 2 , w(t) , b(t) (i.e., limiting
points of its convergent subsequences) have no feasible descent directions for the original
optimization problem given by (4.5)-(4.9).
Proof. See Appendix A.
34

fiGenerative Prior Knowledge for Discriminative Classification

If a point has no feasible descent directions, then any sufficiently small step along any
directional vector will either increase the objective function, leave it unchanged, or take the
algorithm outside of the feasible region. The set of points with no feasible descent directions
is a subset of the set of local minima. Hence, convergence to such a point is a somewhat
weaker result than convergence to a local minimum.
In practice, we observed rapid convergence usually within 2-4 iterations.
Finally, we may want to relax the strict assumptions of the correctness of the prior/linear
separability of the data by introducing slack variables into the optimization problem above.
This results in the following program:
min

1 ,2 ,w,b,i ,1 ,2 ,1 ,2

kwk + C1

m
X

i + C2 (1 + 2 ) + C3 (1 + 2 )

(4.17)

i=1

s.t.yi (wT xi + b)  1  i , i = 1, .., m


 1/2

(i  ti )   + i , i = 1, 2
i

w T 1 + b 
 1/2 
  1 w    1



T
w 2 + b 
 1/2 
 2 w    2

i  0, i = 1, .., m
i  0, i = 1, 2

i  0, i = 1, 2

(4.18)
(4.19)
(4.20)
(4.21)
(4.22)
(4.23)
(4.24)

As before, this problem can be solved with the two-step iterative SOCP procedure.
Imposing the generative prior with soft constraints ensures that, as the amount of training
data increases, the data overwhelms the prior and the algorithm converges to the maximummargin separating hyperplane.

5. Experiments
The experiments were designed both to demonstrate the usefulness of the proposed approach
for incorporation of generative prior into discriminative classification, and to address a
broader question by showing that it is possible to use an existing domain theory to aid in
a classification task for which it was not specifically designed. In order to construct the
generative prior, the generative LDA classifier was trained on the data from the training
classification task to estimate the Gaussian location parameters bi , i = 1, 2, as described
in Section 2. The compression function i (v) is subsequently computed (also as described
j
in Section 2), and is used to set the hyperprior parameters via ji := i (li,test
), i = 1, 2.
In order to apply a domain theory effectively to the task for which it was not specifically
designed, the algorithm must be able to estimate its confidence in the decomposition of the
domain theory with respect to this new learning task. In order to model the uncertainty in
applicability of WordNet to newsgroup categorization, our system estimated its confidence in
homogeneity of equivalence classes of semantic distances by computing the variance of each
35

fiEpshteyn & DeJong

0.85
Bilevel Gen/Discr

0.8
0.75
0.7
0.65
0.6
0.55
0.5
0.5

0.55

0.6

0.65 0.7
SVM

0.75

0.8

0.85

Figure 5.1: Performance of the bilevel discriminative classifier constrained by generative
prior knowledge versus performance of SVM. Each point represents a unique
pair of training/test tasks, with 0.5% of the test task data used for training.
The results are averaged over 100 experiments.

P

random variable i (v) as follows: i (v) ,

j:l

c
(ji i (v))2
j
i,train=v
j
|j:li,tran
=v|

. The hyperprior confidence

matrices i , i = 1, 2 were then reconstructed
with respect to the test task semantic distances

j
i (li,test
), k = j
. Identity matrices were used as
li,test , i = 1, 2 as follows: [i ]j,k :=
0, k 6= j
covariance matrices of the lower-level prior: 1 = 2 := I. The rest of the parameters
were set as follows:  := 0.2,  := 0.01, C1 = C2 := 1, C3 := . These constants were
chosen manually to optimize performance on Experiment 1 (for the training task: atheism
vs. guns, test task: guns vs. mideast, see Figure 5.2) without observing any data from any
other classification tasks.
The resulting classifier was evaluated in different experimental setups (with different
pairs of newsgroups chosen for the training and the test tasks) to justify the following
claims:
1. The bilevel generative/discriminative classifier with WordNet-derived prior knowledge has good low-sample performance, showing both the feasibility of automatically
interpreting the knowledge embedded in WordNet and the efficacy of the proposed
algorithm.
2. The bilevel classifiers performance improves with increasing training sample size.
3. Integrating generative prior into the discriminative classification framework results
in better performance than integrating the same prior directly into the generative
framework via Bayes rule.
36

fiGenerative Prior Knowledge for Discriminative Classification

4. The bilevel classifier outperforms a state-of-the-art discriminative multitask classifier
proposed by Evgeniou and Pontil (2004) by taking advantage of the WordNet domain
theory.
In order to evaluate the low-sample performance of the proposed classifier, four newsgroups
from the 20-newsgroup dataset were selected for experiments: atheism, guns, middle east,
and auto. Using these categories, thirty experimental setups were created for all the possible
ways of assigning newsgroups to training and test tasks (with a pair of newsgroups assigned
to each task, under the constraint that the training and test pairs cannot be identical) 3 . In
each experiment, we compared the following two classifiers:
1. Our bilevel generative-discriminative classifier with the knowledge transfer functions
i (v), i (v), i = 1, 2 learned from the labeled training data provided for the training task (using 90% of all the available data for that task). The resulting prior was
subsequently introduced into the discriminative classification framework via our approximate bilevel programming approach
2. A vanilla SVM classifier which minimizes the regularized empirical risk:
min

w,b,i

m
X
i=1

i + C1 kwk2

s.t.yi (wT xi + b)  1  i , i = 1, .., m

(5.1)
(5.2)

Both classifiers were trained on 0.5% of all the available data from the test classification
task4 , and evaluated on the remaining 99.5% of the test task data. The results, averaged
over one hundred randomly selected datasets, are presented in Figure 5.1, which shows the
plot of the accuracy of the bilevel generative/discriminative classifier versus the accuracy
of the SVM classifier, evaluated in each of the thirty experimental setups. All the points
lie above the 45o line, indicating improvement in performance due to incorporation of prior
knowledge via the bilevel programming framework. The amount of improvement ranges
from 10% to 30%, with all of the improvements being statistically significant at the 5%
level.
The next experiment was conducted to evaluate the effect of increasing training data
(from the test task) on the performance of the system. For this experiment, we selected
three newsgroups (atheism, guns, and middle east) and generated six experimental setups
based on all the possible ways of splitting these newsgroups into unique training/test pairs.
In addition to the classifiers 1 and 2 above, the following classifiers were evaluated:
3. A state-of-the art multi-task classifier designed by Evgeniou and Pontil (2004). The
classifier learns a set of related classification functions ft (x) = wtT x + bt for classification tasks t  {training task, test task} given m(t) data points [x1t , y1t ], .., [xm(t)t , ym(t)t ]
3. Newsgroup articles were preprocessed by removing words which could not be interpreted as nouns by
WordNet. This preprocessing ensured that only one part of WordNet domain theory was exercised and
resulted in virtually no reduction in classification accuracy.
4. SeDuMi software (Sturm, 1999) was used to solve the iterative SOCP programs.

37

fiEpshteyn & DeJong

for each task t by minimizing the regularized empirical risk:
min

w0 ,wt ,bt ,it

X
X m(t)
t

i=1

it +

C1 X
kwt  w0 k2 + C1 kw0 k2
C2 t

s.t. yit (wtT xit + bt )  1  it , i = 1, .., m(t), t
it  0, i = 1, .., m(t), t

(5.3)
(5.4)
(5.5)

The regularization constraint captures a tradeoff between final models w t being close
to the average model w0 and having a large margin on the training data. 90% of the
training task data was made available to the classifier. Constant C1 := 1 was chosen,
and C2 := 1000 was selected from the set {.1, .5, 1, 2, 10, 1000, 105 , 1010 } to optimize
the classifiers performance on Experiment 1 (for the training task: atheism vs. guns,
test task: guns vs. mideast, see Figure 5.2) after observing .05% of the test task data
(in addition to the training task data).
4. The LDA classifier described in Section 2 trained on 90% of the test task data. Since
this classifier is the same as the bottom-level generative classifier used in the bilevel
algorithm, its performance gives an upper bound on the performance of the bottomlevel classifier trained in a generative fashion.
Figure 5.2 shows performance of classifiers 1-3 as a function of the size of the training
data from the test task (evaluation was done on the remaining test-task data). The results
are averaged over one hundred randomly selected datasets. The performance of the bilevel
classifier improves with increasing training data both because the discriminative portion of
the classifier aims to minimize the training error and because the generative prior is imposed
with soft constraints. As expected, the performance curves of the classifiers converge as the
amount of available training data increases. Even though the constants used in the mathematical program were selected in a single experimental setup, the classifiers performance
is reasonable for a wide range of data sets across different experimental setups, with the
possible exception of Experiment 4 (training task: guns vs. mideast, testing task: atheism
vs. mideast), where the means of the constructed elliptical priors are much closer to each
other than in the other experiments. Thus, the prior is imposed with greater confidence
than is warranted, adversely affecting the classifiers performance.
The multi-task classifier 3 outperforms the vanilla SVM by generalizing from data points
across classification tasks. However, it does not take advantage of prior knowledge, while our
classifier does. The gain in performance of the bilevel generative/discriminative classifier
is due to the fact that the relationship between the classification tasks is captured much
better by WordNet than by simple linear averaging of weight vectors.
Because of the constants involved in both the bilevel classifier and the generative classifiers with Bayesian priors, it is hard to do a fair comparison between classifiers constrained
by generative priors in these two frameworks. Instead, the generatively trained classifier 4
gives an empirical upper bound on the performance achievable by the bottom-level classifier
trained generatively on the test task data. The accuracy of this classifier is shown as as
a horizontal in the plots in Figure 5.2. Since discriminative classification is known to be
superior to generative classification for this problem, the SVM classifier outperforms the
38

fiGenerative Prior Knowledge for Discriminative Classification

1) Train:atheism vs. guns

2) Train:atheism vs. guns

3) Train:guns vs. mideast

Test:atheism vs. mideast

Test:guns vs. mideast

Test:atheism vs. guns

1

1

1

0.95

0.95

0.95

0.9

0.9

0.9

0.85

0.85

0.85

0.8

0.8

0.8

0.75

0.75

0.75

0.7

0.7

0.7

0.65

0.65

0.65

0.6

0.6

0.6

0.55

0.55
0

0

10 20 30 40 50 60 70 80 90 100

4) Train: guns vs. mideast

10

20

30

40

50

60

70

80

90

5) Train: atheism vs. mideast

0.55
0

1

1

1

0.95

0.95

0.9

0.9

0.9

0.85

0.85

0.85

0.8

0.8

0.8

0.75

0.75

0.75

0.7

0.7

0.7

0.65

0.65

0.65

0.6

0.6
0

10

20

30

40

50

60

70

80

90

30

40

50

60

70

80

90

Test:atheism vs. guns

0.95

0.55

20

6) Train: atheism vs. mideast

Test:guns vs. mideast

Test:atheism vs. mideast

10

0.6

0.55

0.55
0

10 20 30 40 50 60 70 80 90 100

0

10

20

30

40

50

60

70

80

90

Legend:

LDA,max performance
Bilevel Gen/Discr
SVM
Multitask SVM

Figure 5.2: Test set accuracy as a percentage versus number of test task training points for
two classifiers (SVM and Bilevel Gen/Discr) tested on six different classification
tasks. For each classification experiment, the data set was split randomly into
training and test sets in 100 different ways. The error bars based on 95%
confidence intervals.

generative classifier given enough data in four out of six experimental setups. What is more
interesting, is that, for a range of training sample sizes, the bilevel classifier constrained
by the generative prior outperforms both the SVM trained on the same sample and the
generative classifier trained on a much larger sample in these four setups. This means that,
unless prior knowledge outweighs the effect of learning, it cannot enable the LDA classifier
to compete with our bilevel classifier on those problems.
Finally, a set of experiments was performed to determine the effect of varying mathematical program parameters  and  on the generalization error. Each parameter was
varied over a set of values, with the rest of the parameters held fixed ( was increased up
to its maximum feasible value). The evaluation was done in the setup of Experiment 1 (for
39

fiEpshteyn & DeJong

1) Accuracy as a function of 

2) Accuracy as a function of 

0.18

0.18

0.16

0.16

0.14

0.14

0.12

0.12

0.1

0.1

0.08

0.08

0.06

0.06

0.04

0.04

0.02

0.02

0

0
0

0.05

0.1

0.15

0.2

0

0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9

1

Figure 5.3: Plots of test set accuracy as percentage versus mathematical program parameter
values. For each classification task, a random training set of size 9 was chosen
from the full set of test task articles in 100 different ways. Error bars are based
on 95% confidence intervals. All the experiments were performed on the training
task: atheism vs. guns, test task: guns vs. mideast.

the training task:atheism vs. guns, test task: guns vs. mideast), with the training set size
of 9 points. The results are presented in Figure 5.3. Increasing the value of  is equivalent
to requiring a hyperplane separator to have smaller error given the prior. Decreasing the
value of  is equivalent to increasing the confidence in the hyperprior. Both of these actions
tighten the constraints (i.e., decrease the feasible region). With good prior knowledge, this
should have the effect of improving generalization performance for small training samples
since the prior is imposed with higher confidence. This is precisely what we observe in the
plots of Figure 5.3.

6. Generalization Performance
Why does the algorithm generalize well for low sample sizes? In this section, we derive a
theorem which demonstrates that the convergence rate of the generalization error of the
constrained generative-discriminative classifier depends on the parameters of the mathematical program and not just the margin, as would be expected in the case of large-margin
classification without the prior. In particular, we show that as the certainty of the generative prior knowledge increases, the upper bound on the generalization error of the classifier
constrained by the prior decreases. By increasing certainty of the prior, we mean that
either the hyper-prior becomes more peaked (i.e., the confidence in the locations of the
prior means increases) or the desired upper bounds on the Type I and Type II probabilities
of error of the classifier decrease (i.e., the requirement that the lower-level discriminative
player choose the restricted Bayes-optimal hyperplane is more strictly enforced).
The argument proceeds by bounding the fat-shattering dimension of the classifier constrained by prior knowledge. The fat-shattering dimension of a large margin classifier is
given by the following definition (Taylor & Bartlett, 1998):
Definition 6.1. A set of points S = {x1 ...xm } is -shattered by a set of functions F
mapping from a domain X to R if there are real numbers r 1 , ..., rm such that, for each
b  {1, 1}m , there is a function fb in F with b(fb (xi )  ri )  , i = 1..m. We say
40

fiGenerative Prior Knowledge for Discriminative Classification

that r 1 , ..., rm witness the shattering. Then the fat-shattering dimension of F is a function
fatF () that maps  to the cardinality of the largest -shattered set S.
Specifically, we consider the class of functions
F = {x  w T x : kxk  R, kwk = 1,

(6.1)





wT (1 )
w T 2
 1/2


1/2
  , 




,
(

t
)
(

t
)



,



1
1
2
2   }.
1
2
 1/2 
 1/2 
 1 w 
 2 w 

The following theorem bounds the fat-shattering dimension of our classifier:

Theorem 6.2. Let F be the class of a-priori constrained functions defined by (6.1), and
let min (P ) and max (P ) denote the minimum and maximum eigenvalues of matrix P ,
2
2
2 ))
, where
respectively. If a set of points S is -shattered by F , then |S|  4R ( (1
2
2

2

(1 )
(1 )
2 k (max (2 ))
, kt2ktk(
,
 = max(1 , 2 ) with 1 = min( min
) and 2 = min( min
2
k2 k
k1 k
max (2 )) +kt2 k)
kt1 k2 (max (1 ))2
),
kt1 k((max (1 ))2 +kt1 k)

assuming that   0, kti k  kti  i k, and i 

1 , i
2

= 1, 2.

Proof. See Appendix B.
We have the following corollary which follows directly from Taylor and Bartletts (1998)
Theorem 1.5 and bounds the classifiers generalization error based on its fat-shattering
dimension:
Corollary 6.3. Let G be a class of real-valued functions. Then, with probability at least
1   over m independently generated examples z, if a classifier h = sgn(g)  sgn(G) has
2
margin at least  on all the examples in z, then the error of h is no more than m
(d 

8m
)log(32m)
+
log(
))
where
d
=
f
at
(
).
If
G
=
F
is
the
class
of
functions
log( 8em
G
G
d

16
2

2

2

defined by (6.1), then dF  265R (4( 2 (1 ))) . If G = F 0 is the usual class of large margin
classifiers (without the prior), then the result in (Taylor & Bartlett, 1998) shows that d F 0 
265R2
.
2
2

Notice that both bounds depend on R
. However, the bound of the classifier constrained
2
by the generative prior also depends on  and  through the term 4( 2 (1  2 )). In particular, as  increases, tightening the constraints, the bound decreases, ensuring, as expected,
quicker convergence of the generalization error. Similarly, decreasing  also tightens the
constraints and decreases the upper bound on the generalization error. For  > 12 , the
factor 4(2 (1  2 )) is less than 1 and the upper bound on the fat-shattering dimension dF
is tighter than the usual bound in the no-prior case on dF 0 .
Since  controls the amount of deviation of the decision boundary from the Bayesoptimal hyperplane and  depends on the variance of the hyper-prior distribution, tightening
of these constraints corresponds to increasing our confidence in the prior. Note that a high
value  represents high level of user confidence in the generative elliptical model. Also
note that there are two ways of increasing the tightness of the hyperprior constraint (4.7)
- one is through the user-defined parameter , the other is through the automatically
estimated covariance matrices i , i = 1, 2. These matrices estimate the extent to which the
41

fiEpshteyn & DeJong

equivalence classes defined by WordNet create an appropriate decomposition of the domain
theory for the newsgroup categorization task. Thus, tight constraint (4.7) represents both
high level of user confidence in the means of the generative classification model (estimated
from WordNet) and a good correspondence between the partition of the words imposed
by the semantic distance of WordNet and the elliptical generative model of the data. As
 approaches zero and  approaches its highest feasible value, the solution of the bilevel
mathematical program reduces to the restricted Bayes optimal decision boundary computed
solely from the generative prior distributions, without using the data.
Hence, we have shown that, as the prior is imposed with increasing level of confidence
(which means that the elliptical generative model is deemed good, or the estimates of
its means are good, which in turn implies that the domain theory is well-suited for the
classification task at hand), the convergence rate of the generalization error of the classifier
increases. Intuitively, this is precisely the desired effect of increased confidence in the prior
since the benefit derived from the training data is outweighed by the benefit derived from
prior knowledge. For low data samples, this should result in improved accuracy assuming
the domain theory is good, which is what the plots in Figure 5.3 show.

7. Related Work
There are a number of approaches to combining generative and discriminative models. Several of these focus on deriving discriminative classifiers from generative distributions (Tong
& Koller, 2000a; Tipping, 2001) or on learning the parameters of generative classifiers via
discriminative training methods (Greiner & Zhou, 2002; Roos, Wettig, Grunwald, Myllymaki, & Tirri, 2005). The closest in spirit to our approach is the Maximum Entropy
Discrimination framework (Jebara, 2004; Jaakkola, Meila, & Jebara, 1999), which performs
discriminative estimation of parameters of a generative model, taking into account the constraints of fitting the data and respecting the prior. One important difference with our
framework is that, in estimating these parameters, maximum entropy discrimination minimizes the distance between the generative model and the prior, subject to satisfying the
discriminative constraint that the training data be classified correctly with a given margin.
Our framework, on the other hand, maximizes the margin on the training data subject to
the constraint that the generative model is not too far from the prior. This emphasis on
maximizing the margin allows us to derive a-priori bounds on the generalization error of
our classifier based on the confidence in the prior which are not (yet) available for the maximum entropy framework. Another difference is that our approach performs classification
via a single generative model, while maximum entropy discrimination averages over a set of
generative models weighted by their probabilities. This is similar to the distinction between
maximum-a-posteriori and Bayesian estimation and has repercussions for tractability. Maximum entropy discrimination, however, is more general than our framework in a sense of
allowing a richer set of behaviors based on different priors.
Ng et al. (2003, 2001) explore the relative advantages of discriminative and generative
classification and propose a hybrid approach which improves classification accuracy for
both low-sample and high-sample scenarios. Collins (2002) proposes to use the Viterbi
algorithm for HMMs for inferencing (which is based on generative assumptions), combined
with a discriminative learning algorithm for HMM parameter estimation. These research
42

fiGenerative Prior Knowledge for Discriminative Classification

directions are orthogonal to our work since they do not explicitly consider the question of
integration of prior knowledge into the learning problem.
In the context of support vector classification, various forms of prior knowledge have
been explored. Scholkopf et al. (2002) demonstrate how to integrate prior knowledge about
invariance under transformations and importance of local structure into the kernel function.
Fung et al. (2002) use domain knowledge in form of labeled polyhedral sets to augment
the training data. Wu and Srihari (2004) allow domain experts to specify their confidence
in the examples label, varying the effect of each example on the separating hyperplane
proportionately to its confidence. Epshteyn and DeJong (2005) explore the effects of rotational constraints on the normal of the separating hyperplane. Sun and DeJong (2005)
propose an algorithm which uses domain knowledge (such as WordNet) to identify relevant
features of examples and incorporate resulting information in form of soft constraints on
the hypothesis space of SVM classifier. Mangasarian et al. (2004) suggest the use of prior
knowledge for support vector regression. In all of these approaches, prior knowledge takes
the form of explicit constraints on the hypothesis space of the large-margin classifier. In this
work, the emphasis is on generating such constraints automatically from domain knowledge
interpreted in the generative setting. As we demonstrate with our WordNet application,
generative interpretation of background knowledge is very intuitive for natural language
processing problems.
Second-order cone constraints have been applied extensively to model probability constraints in robust convex optimization (Lobo et al., 1998; Bhattacharyya, Pannagadatta, &
Smola, 2004) and constraints on the distribution of the data in minimax machines (Lanckriet
et al., 2001; Huang, King, Lyu, & Chan, 2004). Our work, as far as we know, is the first one
which models prior knowledge with such constraints. The resulting optimization problem
and its connection with Bayes optimal classification is very different from the approaches
mentioned above.
Our work is also related to empirical Bayes estimation (Carlin & Louis, 2000). In empirical Bayes estimation, the hyper-prior parameters of the generative model are estimated
using statistical estimation methods (usually maximum likelihood or method of moments)
through the marginal distribution of the data, while our approach learns those parameters
discriminatively using the training data.

8. Conclusions and Future Work.
Since many sources of domain knowledge (such as WordNet) are readily available, we believe
that significant benefit can be achieved by developing algorithms for automatically applying
their information to new classification problems. In this paper, we argued that the generative paradigm for interpreting background knowledge is preferable to the discriminative
interpretation, and presented a novel algorithm which enables discriminative classifiers to
utilize generative prior knowledge. Our algorithm was evaluated in the context of a complete system which, faced with the newsgroup classification task, was able to estimate the
parameters needed to construct the generative prior from the domain theory, and use this
construction to achieve improved performance on new newsgroup classification tasks.
In this work, we restricted our hypothesis class to that of linear classifiers. Extending
the form of the prior distribution to distributions other than elliptical and/or looking for
43

fiEpshteyn & DeJong

Bayes-optimal classifiers restricted to a more expressive class than that of linear separators
may result in improvement in classification accuracy for non linearly-separable domains.
However, it is not obvious how to approximate this more expressive form of prior knowledge
with convex constraints. The kernel trick may be helpful in handling nonlinear problems,
assuming that it is possible to represent the optimization problem exclusively in terms of
dot products of the data points and constraints. This is an important issue which requires
further study.
We have demonstrated that interpreting domain theory in the generative setting is
intuitive and produces good empirical results. However, there are usually multiple ways
of interpreting a domain theory. In WordNet, for instance, semantic distance between
words is only one measure of information contained in the domain theory. Other, more
complicated, interpretations might, for example, take into account types of links on the
path between the words (hypernyms, synonyms, meronyms, etc.) and exploit commonsense observations about WordNet such as words that are closer to the category label
are more likely to be informative than words farther away. Comparing multiple ways of
constructing the generative prior from the domain theory and, ultimately, selecting one of
these interpretations automatically is a fruitful direction for further research.

Acknowledgments
The authors thank the anonymous reviewers for valuable suggestions on improving the paper. This material is based upon work supported in part by the National Science Foundation
under Award NSF IIS 04-13161 and in part by the Information Processing Technology Office of the Defense Advanced Research Projects Agency under award HR0011-05-1-0040.
Any opinions, findings, and conclusions or recommendations expressed in this publication
are those of the authors and do not necessarily reflect the views of the National Science
Foundation or the Defense Advanced Research Projects Agency.

Appendix A. Convergence of the Generative/Discriminative Algorithm
Let the map	H : Z  Z determine an algorithm that, given a point (0) , generates a se
quence (t) t=0 of iterates through the iteration (t+1) = H((t) ). The iterative algorithm
(t)

(t)

in Section 4 generates a sequence of iterates (t) = [1 , 2 ]  Z by applying the following
map H:
H = H 2  H1 :
(A.1)
In step 1, H1 ([1 , 2 ]) = arg

min

[w,b]U ([1 ,2 ])

kwk ,

with the set U ([1 , 2 ]) defined by constraints:
T

(A.2)
(A.3)

yi (w xi + b)  1  0, i = 1, .., m

(A.4)

c1 (w, b; 2 , 2 )    0


wT +b
.
with the conic constraints cs (w, b; , ) , s
k1/2 wk

(A.6)

c1 (w, b; 1 , 1 )    0

44

(A.5)

fiGenerative Prior Knowledge for Discriminative Classification

In step 2, H2 (w, b) = arg

min

(1 ,2 )V

(c1 (w, b; 1 , 1 ) + c1 (w, b; 2 , 2 ))

(A.7)

with the set V given by the constraints
  o(1 ; 1 , t1 )  0

(A.8)

  o(2 ; 2 , t2 )  0

(A.9)



with o(; , t) , 1/2 (  t).
Notice that H1 and H2 are functions because the minima for optimization problems
(4.10)-(4.14) and (4.15)-(4.16) are unique. This is the case because Step 1 optimizes a
strictly convex function on a convex set, and Step 2 optimizes a linear non-constant function
on a strictly convex set.
Convergence of the objective function ((t) ) , min[w,b]U ([(t) ,(t) ]) kwk of the algorithm
1
2
was shown in Theorem 4.1. Let  denote the set of points on which the map H does not
change the value of the objective function, i.e.     (H( )) = ( ). We will
show that every accumulation point of {(t) } lies in . We will also show that every point
[1 , 2 ]   augmented with [w  , b ] = H1 ([1 , 2 ]) is a point with no feasible descent
directions for the optimization problem (4.5)-(4.9), which can be equivalently expressed as:
min kwk s.t.[1 , 2 ]  V ; [w, b]  U ([1 , 2 ])

1 ,2 ,w,b

(A.10)

In order to formally state our result, we need a few concepts from the duality theory.
Let a constrained optimization problem be given by
min f (x) s.t. ci (x)  0, i = 1, .., k
x

(A.11)

The following conditions, known as Karush-Kuhn-Tucker(KKT) conditions are necessary
for x to be a local minimum:
Proposition A.1. If x is a local minimum of (A.11), then 1 , .., k such that
P
1. f (x ) = ki=1 i ci (x )
2. i  0 for i  {1, .., k}

3. ci (x )  0 for i  {1, .., k}
4. i ci (x ) = 0 for i  {1, .., k}
1 , .., k are known as Lagrange multipliers of constraints c1 , .., ck .
The following well-known result states that KKT conditions are sufficient for x  to be
a point with no feasible descent directions:
Proposition A.2. If 1 , .., k such that the following conditions are satisfied at x :
P
1. f (x ) = ki=1 i ci (x )
45

fiEpshteyn & DeJong

2. i  0 for i  {1, .., k}
then x has no feasible descent directions in the problem (A.11)
Proof. (sketch) We reproduce the proof given in a textbook by Fletcher (1987). The proposition is true because for any P
feasible direction vector s, sT ci (x)  0 for x and for i 
T

{1, .., k}. Hence, s f (x ) = ki=1 i sT ci (x )  0, so s is not a descent direction.
The following lemma characterizes the points in the set :

Lemma A.3. Let   , and let [w  , b ] = H1 ( ) be the optimizer of ( ), and let
 = [(A.4),1 , .., (A.4),m , (A.5) , (A.6) ] be a set of Lagrange multipliers corresponding to the
constraints for the solution [w  , b ]. Define 0 = H( ), and let [w 0 , b0 ] be the optimizer of
(0 ). If 02 6= 2 , then (A.6) = 0 for some  . If 01 6= 1 , then (A.5) = 0 for some  .
If both 01 6= 1 and 02 6= 2 , then (A.6) = (A.5) = 0 for some  .
Proof. Consider the case when
02 6= 2

(A.12)

01 = 1

(A.13)

and
Since   , kw0 k = kw  k. Let 0 be a set of Lagrange multipliers corresponding to the
constraints for the solution [w 0 , b0 ]. Since w is still feasible for the optimization problem
given by (0 ) (by the argument in Theorem 4.1) and the minimum of this problem is
unique, this can only happen if
[w0 , b0 ] = [w , b ].
(A.14)
Then [w , b ] and 0 must satisfy KKT conditions for (0 ). (A.12) implies that
c1 (w ; 02 , 2 ) > c1 (w ; 2 , 2 )   by the same argument as in Theorem 4.1, which means
that, by KKT condition (4) for (0 ),
0(A.6) = 0.

(A.15)

Therefore, by KKT condition (1) for (0 ) and (A.15), at [w, b, 1 , 2 ] = [w = w0 , b =
b0 , 1 = 01 , 2 ]
"
"
"
#
#
#


m
c1 (w,b ;1 ,1 )
c1 (w,b ;2 ,2 )
kwk
X
y
x
i
i
w
+ 0(A.5) c1 (ww
=
0(A.4),i
+ 0(A.6) c1 (ww
,
 ,b; , )
kwk
,b;2 ,2 )
1
1
yi
b

b

i=1

b

which means that KKT conditions (1),(2) for the optimization problem (  ) are satisfied
0
at the point [w  , b ] with  =  . KKT condition (3) is satisfied by feasibility of [w  , b ]
and KKT condition (4) is satisfied by the same condition for (0 ) and observations (A.13),
(A.14), and (A.15).
The proofs for the other two cases (02 = 2 , 01 6= 1 and 02 6= 2 , 01 6= 1 ) are
analogous.
The following theorem states that the points in  are KKT points (i.e., points at which
KKT conditions are satisfied) for the optimization problem given by (A.10).
46

fiGenerative Prior Knowledge for Discriminative Classification

Theorem A.4. If    and let [w  , b ] = H1 ( ), then [w  , b , 1 , 2 ] is a KKT point for
the optimization problem given by (A.10).
Proof. Let 0 = H( ). Just like in Lemma A.3, we only consider the case
02 6= 2 ,

(A.16)

01 = 1  (A.6) = 0 (by Lemma A.3).

(A.17)

(the proofs for the other two cases are similar).
By KKT conditions for H2 (w , b ), at 1 = 01


(o(1 ; 1 , t))
c1 (w , b ; 1 , 1 )
= 0A.8
for some 0A.8  0.
1
1

(A.18)

By KKT conditions for H1 ( ) and (A.17), at [w, b] = [w  , b ]
"

kwk
w
kwk
b

#

=

m
X
i=1

(A.4),i



yi x i
yi



+

(A.5)

"

c1 (w,b ;1 ,1 )
w
c1 (w ,b;1 ,1 )
b

#





for some 


(A.4),1
..
(A.4),m
(A.5)





  0.


(A.19)

By (A.16),(A.17),(A.18), and (A.19), at [w, b, 1 , 2 ] = [w , b , 1 = 01 , 2 ]


 c1 (w,b ; ,1 ) 
kwk


 kwk 
1
y
x
w
i
i
w
 kwk 
w
 ,b; , ) 
m

c
(w
1
1
X
1
 yi 
 b   0 



 + 

=
 kwk  = 
b

+


(A.5)
(A.4),i  0 
  0 

c1 (w ,b ;1 ,1 ) 


 1 
i=1
1
kwk
0
0
0
2








c1 (w,b ;2 ,2 )
0
0
w 

 c1 (w ,b;2 ,2 ) 




0
0


 + 
,
b
0A.8 (A.5) 
 + (A.6) 
(o(
;
,t))
1 1
(A.6) 




0


0
1
(o(2 ;2 ,t))
c1 (w ,b ;2 ,2 )
0
2

2

which means that KKT conditions (1),(2) for the optimization problem (A.10) are satisfied
00
at the point [w  , b , 1 , 2 ] with  = [(A.4),1 , .., (A.4),m , (A.5) , (A.6) , 0A.8 (A.5) , (A.6) ].
00

 also satisfies KKT conditions (3),(4) by assumption (A.17) and the KKT conditions for
H1 and H2 .
In order to prove convergence properties of the iterates (t) , we use the following theorem
due to Zangwill (1969):
Theorem A.5. Let the map H : Z  Z determine an iterative algorithm via (t+1) =
H((t) ), let () denote the objective function, and let  be the set of points on which the
map H does not change the value of the objective function, i.e.     (H()) = ().
Suppose
47

fiEpshteyn & DeJong

1. H is uniformly compact on Z, i.e. there is a compact subset Z0  Z such that
H()  Z0 for   Z.
2. H is strictly monotonic on Z  , i.e. (H()) < ().
3. H is closed on Z  , i.e. if wi  w and H(wi )  , then  = H(w).
Then the accumulation points of the sequence of (t) lie in .
The following proposition shows that minimization of a continuous function on a feasible
set which is a continuous map of the functions argument forms a closed function.
Proposition A.6. Given
1. a real-valued continuous function f on A  B,
2. a point-to-set map U : A  2B continuous with respect to the Hausdorff metric:5
dist(X, Y ) , max(d(X, Y ), d(Y, X)), where d(X, Y ) , maxxX minyY kx  yk,
define the function F : A  B by
F (a) = arg min f (a, b0 ) = {b : f (a, b) < f (a, b0 ) for b0  U (a)},
b0 U (a)

assuming the minimum exists and is unique. Then, the function F is closed at a.
Proof. This proof is a minor modification of the one given by Gunawardana and Byrne
(2005). Let {a(t) } be a sequence in A such that
a(t)  a, F (a(t) )  b

(A.20)

The function F is closed at a if F (a) = b. Suppose this is not the case, i.e. b 6= F (a) =
arg minb0 U (a) f (a, b0 ). Therefore,
b = arg min f (b0 ) such that f (a, b) > f (a, b)
b0 U (a)

(A.21)

By continuity of f (, ) and (A.20),
f (a(t) , F (a(t) ))  f (a, b)

(A.22)

By continuity of U () and (A.20),
dist(U (a(t) ), U (a))  0  b(t)  b and b(t)  U (at ), for t.

(A.23)

(A.22), (A.23), and (A.21) imply that
K such that f (a(t) , F (a(t) )) > f (a(t) , b(t) ), for t > K

(A.24)

which is a contradiction since by assumption, F (a(t) ) = arg minb0 U (at ) f (b0 ) and by (A.24),
b(t)  U (a(t) ).
5. A point-to-set map U (a) maps a point a to a set of points. U (a) is continuous with respect to a distance
metric dist iff a(t)  a implies dist(U (a(t) ), U (a))  0.

48

fiGenerative Prior Knowledge for Discriminative Classification

Proposition A.7. The function H defined by (A.1)-(A.7) is closed.
Proof. Let {(t) } be a sequence such that (t)   . Since all the iterates (t) lie in
the closed feasible region bounded by constraints (4.6)-(4.9) and the boundary of U () is
piecewise linear in , the boundary of U ((t) ) converges uniformly to the boundary of U ( )
as (t)   , which implies that the Hausdorff distance between the boundaries converges
to zero. Since the Hausdorff distance between convex sets is equal to the Hausdorff distance
between their boundaries, dist(U ((t) ), U ( )) also converges to zero. Hence, proposition
A.6 implies that H1 is closed. The same proposition implies that H2 is closed. A composition
of closed functions is closed, hence H is closed.
We now prove the main result of this Section:
Theorem 4.2. Let H be the function defined by (A.1)-(A.7) which determines the generative/discriminative algorithm via (t+1) = H((t) ). Then accumulation points  of the
sequence (t) augmented with [w  , b ] = H1 ( ) have no feasible descent directions for the
original optimization problem given by (4.5)-(4.9).
Proof. The proof is by verifying that H satisfies the properties of Theorem A.5. Closedness
of H was shown in Proposition A.7. Strict monotonicity of ((t) ) was shown in Theorem
4.1. Since all the iterates (t) are in the closed feasible region bounded by constraints (4.6)(4.9), H is uniformly compact on Z. Since all the accumulation points  lie in , they are
KKT points of the original optimization problem by Theorem A.4, and, therefore, have no
feasible descent directions by Proposition A.2.

Appendix B. Generalization of the Generative/Discriminative Classifier
We need a few auxiliary results before proving Theorem 6.2. The first proposition bounds
the angle of rotation between two vectors w1 , w2 and the distance between them if the angle
of rotation between each of these vectors and some reference vector v is sufficiently small:
Proposition B.1. Let kw1 k = kw2 k = kvk = 1. If w1T v    0 and w2T v    0, then
1. w1T w2  22  1
p
2. kw1  w2 k  2 (1  2 )

Proof.

1. By the triangle inequality, arccos(w1T w2 )  arccos(w1T v) + arccos(w2T v)  2 arccos()
(since the angle between two vectors is a distance measure). Taking cosines of both
sides and using trigonometric equalities yields w1T w2  22  1.
2. Expand kw1  w2 k2 = kw1 k2 + kw2 k2  2w1T w2 = 2(1  w1T w2 ). Since w1T w2  22  1
from part 1, kw1  w2 k2  4(1  2 ).

The next proposition bounds the angle of rotation between two vectors t and  if they
are not too far away from each other as measured by the L2 -norm distance:
49

fiEpshteyn & DeJong

Proposition B.2. Let ktk = , k  tk   . Then

tT 
ktkkk



 2  2
(+ ) .

Proof. Expanding k  tk2 = ktk2 + kk2  2tt  and using k  tk2   2 , we get
1 ktk
2 ( kk

kk
ktk

2

tT 
ktkkk



+
 ktkkk ). We now use the triangle inequality     ktk  k  tk  kk 
ktk + k  tk   +  and simplify.

The following proposition will be used to bound the angle of rotation between the normal
w of the separating hyperplane and the mean vector t of the hyper-prior distribution:
wT 
kwkkk
ktk2 2
ktk(+ktk) ).

Proposition B.3. Let
where  = min(,

   0 and k  tk    ktk. Then

wT t
kwkktk

 (22  1),

Proof. Follows directly from Propositions B.1 (part 1) and B.2.
We now prove Theorem 6.2, which relies on parts of the well-known proof of the fatshattering dimension bound for large margin classifiers derived by Taylor and Bartlett
(1998).
Theorem 6.2. Let F be the class of a-priori constrained functions defined by 6.1, and
let min (P ) and max (P ) denote the minimum and maximum eigenvalues of matrix P ,
2
2
2 ))
respectively. If a set of points S is -shattered by F , then |S|  4R ( (1
, where
2
2

2

(1 )
(1 )
2 k (max (2 ))
, kt2ktk(
,
) and 2 = min( min
 = max(1 , 2 ) with 1 = min( min
2
k2 k
k1 k
max (2 )) +kt2 k)
kt1 k2 (max (1 ))2
),
kt1 k((max (1 ))2 +kt1 k)

assuming that   0, kti k  kti  i k, and i 

1 , i
2

= 1, 2.



Proof. First, we use the inequality min (P ) kwk  P 1/2 w  max (P ) kwk to relax the
constraints
w T 2
w T 2
 

 min (2 )
(B.1)
 1/2 
kwk
 2 w 



 1/2

= max (2 ).
(B.2)
2 (2  t2 )    k2  t2 k 
min (1
2 )



 1/2
wT 1

The constraints imposed by the second prior  1/2   , 1 (1  t1 )   are relaxed

in a similar fashion to produce:

2 w

wT (1 )
 min (1 )
kwk

(B.3)

k1  t1 k  max (1 )

(B.4)

Now, we show that if the assumptions made in the statement of the theorem hold, then
2
2
2
P
P
every subset So  S satisfies k So  (S  S0 )k  4R ( 2(1 ) .
Assume that S is -shattered by F . The argument used by Taylor and Bartlett (1998)
in Lemma 1.2 shows that, by the definition of fat-shattering, there exists a vector w 1 such
that
X
X
w1 (
So 
(S  S0 ))  |S| .
(B.5)
50

fiGenerative Prior Knowledge for Discriminative Classification

Similarly (reversing the labeling of S0 and S1  S0 ), there exists a vector w2 such that
X
X
w2 ( (S  S0 ) 
So )  |S| .
(B.6)
Hence, (w1  w2 )(
implies that

P

So 

P

(S  S0 ))  2 |S| , which, by Cauchy-Schwartz inequality,

2 |S| 
P
kw1  w2 k  P
k So  (S  S0 )k

(B.7)

The constraints on the classifier represented in B.1 and B.2 imply by Proposition B.3 that
w1T t2
w2T t2
2
2
kw1 kkt2 k  (21  1) and kw2 kkt2 k  (22  1) . Now, applying Proposition B.1 (part 2) and
simplifying, we get
q
kw1  w2 k  4

12 (1  12 ).

Applying the same analysis to the constraints B.3 and B.4, we get
q
kw1  w2 k  4 22 (1  22 ).
Combining B.7, B.8, and B.9, we get
X

X
|S| 


So 
(S  S0 )  p

2 2 (1  2 )

(B.8)

(B.9)

(B.10)

with  as defined in the statement of the theorem.
Taylor and Bartletts (1998) Lemma 1.3 proves, using the probabilistic method, that
some So  S satisfies
X
 p
X


(B.11)
So 
(S  S0 )  |S|R.

Combining B.10 and B.11 yields |S| 

4R2 (2 (12 ))
.
2

References
Baxter, J. (2000). A model of inductive bias learning. Journal of Artificial Intelligence
Research, 12, 149198.
Bhattacharyya, C., Pannagadatta, K. S., & Smola, A. (2004). A second order cone programming formulation for classifying missing data. In NIPS.
Blake,
C.,
&
Merz,
C.
(1998).
20
newsgroups
http://people.csail.mit.edu/people/jrennie/20newsgroups/..

database,

Campbell, C., Cristianini, N., & Smola, A. (2000). Query learning with large margin classifiers. In Proceedings of The Seventeenth International Conference on Machine Learning.
Carlin, B., & Louis, T. (2000). Bayes and Empirical Bayes Methods for Data Analysis.
Chapman and Hall.
Collins, M. (2002). Discriminative training methods for hidden markov models: Theory
and experiments with perceptron algorithms. In Proceedings of 2002 Conference on
Empirical Methods in Natural Language Processing.
51

fiEpshteyn & DeJong

Duda, R., Hart, P., & Stork, D. (2001). Pattern Classification. John Wiley. 2nd edition.
Epshteyn, A., & DeJong, G. (2005). Rotational prior knowledge for svms. In Proceedings
of the Sixteenth European Conference on Machine Learning.
Evgeniou, T., & Pontil, M. (2004). Regularized multi-task learning. In Proceedings of the
Tenth ACM SIGKDD International Conference on Knowledge Discovery and Data
Mining.
Fink, M. (2004). Object classification from a single example utilizing class relevance metrics.
In Advances in Neural Information Processing Systems.
Fletcher, R. (1987). Practical Methods of Optimization. John Wiley and Sons, West Sussex,
England.
Fung, G., Mangasarian, O., & Shavlik, J. (2002). Knowledge-based support vector machine
classifiers. In Advances in Neural Information Processing Systems.
Greiner, R., & Zhou, W. (2002). Structural extension to logistic regression: Discriminative
parameter learning of belief net classifiers. In Proceedings of the Eighteenth National
Conference on Artificial Intelligence.
Gunawardana, A., & Byrne, W. (2005). Convergence theorems for generalized alternating
minimization procedures. Journal of Machine Learning Research, 6, 20492073.
Hansen, P., Jaumard, B., & Savard, G. (1992). New branch-and-bound rules for linear bilevel
programming. SIAM Journal on Scientific and Statistical Computing, 13, 11941217.
Huang, K., King, I., Lyu, M. R., & Chan, L. (2004). The minimum error minimax probability
machine. Journal of Machine Learning Research, 5, 12531286.
Jaakkola, T., Meila, M., & Jebara, T. (1999). Maximum entropy discrimination. In Advances
in Neural Information Processing Systems.
Jebara, T. (2004). Machine Learning: Discriminative and Generative. Kluwer Academic
Publishers.
Joachims, T. (1998). Text categorization with support vector machines: learning with many
relevant features. In Proceedings of the Tenth European Conference on Machine Learning.
Lanckriet, G. R. G., Ghaoui, L. E., Bhattacharyya, C., & Jordan, M. I. (2001). Minimax
probability machine. In Advances in Neural Information Processing Systems.
Lobo, M. S., Vandenberghe, L., Boyd, S., & Lebret, H. (1998). Applications of second-order
cone programming. Linear Algebra and its Applications, 284 (13), 193228.
Mangasarian, O., Shavlik, J., & Wild, E. (2004). Knowledge-based kernel approximation.
Journal of Machine Learning Research.
Miller, G. (1990). WordNet: an online lexical database. International Journal of Lexicography, 3 (4).
Ng, A. Y., & Jordan, M. I. (2001). On discriminative vs. generative classifiers: A comparison
of logistic regression and naive bayes. In Advances in Neural Information Processing
Systems.
52

fiGenerative Prior Knowledge for Discriminative Classification

Raina, R., Shen, Y., Ng, A. Y., & McCallum, A. (2003). Classification with hybrid generative/discriminative models. In Advances in Neural Information Processing Systems.
Roos, T., Wettig, H., Grunwald, P., Myllymaki, P., & Tirri, H. (2005). On discriminative
bayesian network classifiers and logistic regression. Machine Learning, 59, 267296.
Scholkopf, B., Simard, P., Vapnik, V., & Smola, A. (2002). Prior knowledge in support
vector kernels. Advances in kernel methods - support vector learning.
Sturm, J. F. (1999). Using SeDuMi 1.02, a MATLAB toolbox for optimization over symmetric cones. Optimization Methods and Software, 11, 625653.
Sun, Q., & DeJong, G. (2005). Explanation-augmented svm: an approach to incorporating
domain knowledge into svm learning. In Proceedings of The Twenty Second International Conference on Machine Learning.
Taylor, J. S., & Bartlett, P. (1998). Generalization performance of support vector machines
and other pattern classifiers. In Advances in kernel methods: support vector learning.
Thrun, S. (1995). Is learning the n-th thing any easier than learning the first?. In Advances
in Neural Information Processing Systems.
Tipping, M. E. (2001). Sparse bayesian learning and the relevance vector machine. Journal
of Machine Learning Research, 1, 211244.
Tong, S., & Koller, D. (2000a). Restricted bayes optimal classifiers. In Proceedings of the
Seventeenth National Conference on Artificial Intelligence.
Tong, S., & Koller, D. (2000b). Support vector machine active learning with applications
to text classification. In Proceedings of The Seventeenth International Conference on
Machine Learning.
Vapnik, V. (1995). The Nature of Statistical Learning Theory. Springer-Verlag.
Wu, X., & Srihari, R. (2004). Incorporating prior knowledge with weighted margin support
vector machines. In Proceedings of the Tenth ACM SIGKDD International Conference
on Knowledge Discovery and Data Mining.
Zangwill, W. (1969). Convergence conditions for nonlinear programming algorithms. Management Science, 16, 113.

53

fi