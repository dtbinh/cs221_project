Journal of Artificial Intelligence Research 36 (2009) 547-556

Submitted 06/09; published 12/09

Research Note
Soft Goals Can Be Compiled Away
Emil Keyder

emil.keyder@upf.edu

Universitat Pompeu Fabra
Roc Boronat, 138
08018 Barcelona Spain

Hector Geffner

hector.geffner@upf.edu

ICREA & Universitat Pompeu Fabra
Roc Boronat, 138
08018 Barcelona Spain

Abstract
Soft goals extend the classical model of planning with a simple model of preferences.
The best plans are then not the ones with least cost but the ones with maximum utility,
where the utility of a plan is the sum of the utilities of the soft goals achieved minus
the plan cost. Finding plans with high utility appears to involve two linked problems:
choosing a subset of soft goals to achieve and finding a low-cost plan to achieve them. New
search algorithms and heuristics have been developed for planning with soft goals, and a
new track has been introduced in the International Planning Competition (IPC) to test
their performance. In this note, we show however that these extensions are not needed:
soft goals do not increase the expressive power of the basic model of planning with action
costs, as they can easily be compiled away. We apply this compilation to the problems
of the net-benefit track of the most recent IPC, and show that optimal and satisficing
cost-based planners do better on the compiled problems than optimal and satisficing netbenefit planners on the original problems with explicit soft goals. Furthermore, we show
that penalties, or negative preferences expressing conditions to avoid, can also be compiled
away using a similar idea.

1. Models
A STRIPS problem is a tuple P = hF, I, O, Gi where F is a set of fluents, I  F and
G  F are the initial state and goal situation, and O is a set of actions or operators with
precondition, add, and delete lists P re(a), Add(a), and Del(a) respectively, all of which
are subsets of F . An action sequence  = ha0 , . . . , an i is applicable in P if the actions ai ,
i = 0, . . . , n, are all in O, and there exists a sequence of states hs0 , . . . , sn+1 i, such that
s0 = I, P re(ai )  si and si+1 = si  Add(ai ) \ Del(ai ) for i = 0, . . . , n. The applicable
action sequence  achieves a fluent g if g  sn+1 , and is a plan for P if it achieves each goal
g in G, which we write as  |= G. In the classical setting, the cost of a plan c() is given
by ||, the number of actions in . This cost structure is generalized with the addition of
a cost function over the operators:
c
2009
AI Access Foundation. All rights reserved.

fiKeyder & Geffner

Definition 1 A STRIPS problem with action costs is a tuple Pc = hF, I, O, G, ci, where
+
P = hF, I, O, Gi is a STRIPS problem and c is a function c : O 
7 R+
0 where R0 stands for
the non-negative reals.
The cost of a plan  for a problem Pc is then given by
||
X

c() =

c(ai )

(1)

i=1

where ai denotes the i th action in . The cost function c() = || is obtained as a special
case when c(o) = 1 for all o  O. Adding utilities or soft goals to the problem formulation
results in a new model:
Definition 2 A STRIPS problem with action costs and soft goals is a tuple Pu = hF, I, O,
G, c, ui, where P = hF, I, O, G, ci is a STRIPS problem with action costs, and u is a partial
function u : F 7 R+ that maps a subset of fluents (the soft goals) into positive reals.
In a STRIPS problem with soft goals Pu , the utility of a plan is given by the difference
between the total utility obtained by the plan and its cost:
u() =

X

u(p)  c() .

(2)

p:|=p

A plan  for a problem with soft goals Pu is optimal when no other plan  0 has a utility
u( 0 ) higher than u(). The utility of an optimal plan for a problem with no hard goals is
never negative, as the empty plan has non-negative utility and zero cost.
The most recent International Planning Competition (IPC6) featured Sequential Optimal and Net Benefit Optimal tracks in which the objective was to find optimal plans with
respect to the models captured by Equation 1 and Equation 2 respectively (Helmert, Do,
& Refanidis, 2008).1

2. Equivalence
Given a problem P with soft goals, an equivalent problem P 0 with action costs and no soft
goals can be defined whose plans encode corresponding plans for P . This transformation,
first introduced by Keyder and Geffner (2007), is simple and direct, yet seems to have escaped the attention of researchers in the area (Smith, 2004; Sanchez & Kambhampati, 2005;
Bonet & Geffner, 2008; Baier, Bacchus, & McIlraith, 2007). Also, unlike the compilation of
soft goals into numeric variables and arbitrary plan metrics (Edelkamp, 2006), the proposed
transformation makes use of neither and requires from planners only the ability to handle
1. In PDDL3, soft goals are represented by expressions of the form ( u (is-violated hprefi)) appearing
in the problem metric where pref is a preference or soft goal associated with a formula A. When A
is a single fluent, the expression corresponds to u(A) = u in the terminology used here. Most of the
competition benchmarks contain only preferences of this form. The more general case that arises when
A is a compound formula over fluents is considered in Section 4.

548

fiSoft Goals Can Be Compiled Away

action costs, the basic functionality required in the satisficing track of the most recent IPC
(Helmert et al., 2008).2
We write actions as tuples of the form o = hPre(o), Eff(o)i, where the effects can be
positive (Adds) or negative (Deletes). We assume that for each soft goal fluent p, P also
contains a fluent p representing its negation. These can be introduced in the standard way,
adding p to the initial state if p is not initially true, and including p in the Add and Delete
lists of all actions deleting or adding p respectively (Gazen & Knoblock, 1997; Nebel, 2000).
The problem P 0 with action costs and no soft goals that is equivalent to the problem P
with soft goals can then be obtained by the following transformation:
Definition 3 For a STRIPS problem with action costs and soft goals P = hF, I, O, G, c, ui,
the compiled STRIPS problem with action costs is P 0 = hF 0 , I 0 , O0 , G0 , c0 i with
 F 0 = F  S 0 (P )  S(P )  {normal-mode, end-mode}
 I 0 = I  S(P )  {normal-mode}
 G0 = G  S 0 (P )
 O0 = O00  {collect(p), f orgo(p) | p  SG(P )}  {end}

 c(o) if o  O00
0
u(p) if o = forgo(p)
 c (o) =

0
if o = collect(p) or o = end
where
 SG(P ) = {p | (p  F )  (u(p) > 0)}
 S 0 (P ) = {p0 | p  SG(P )}
 S(P ) = {p0 | p0  S 0 (P )}
 end = h{normal-mode}, {end-mode, normal-mode}i
 collect(p) = h{end-mode, p, p0 }, {p0 , p0 }i
 forgo(p) = h{end-mode, p, p0 }, {p0 , p0 }i
 O00 = {hPre(o)  {normal-mode}, Eff(o)i | o  O}
2. Edelkamps transformation associates with the soft goals p1 , . . . , pm numeric
variables n1 , . . . , nm , each
P
with domain {0, 1}. The utility for a plan is then expressed as U () = n
i=1 ni  u(pi )  cost(), where
u(pi ) represents the utility associated with soft goal pi and ni represents the value of the numeric variable
in the final state achieved by the plan. This transformation also eliminates soft goals, but requires in its
place a plan metric whose terms (namely, whether the variables u(pi ) are 1 or 0) are state-dependent.
Current heuristics can not deal with such metrics (See Sections 3 and 4).

549

fiKeyder & Geffner

For each soft goal p in P , the transformation adds a dummy hard goal p0 in P 0 that
can be achieved in two ways: with the action collect(p) that has cost 0 but requires p to be
true, or with the action forgo(p) that has cost equal to the utility of p yet can be performed
when p is false, or equivalently when p is true. These two actions can be used only after
the end action that makes the fluent end-mode true, while the actions from the original
problem P can be used only when the fluent normal-mode is true prior to the execution of
the end action. Moreover, exactly one of {collect(p), forgo(p)} can appear for each soft goal
p in the plan, as both delete their shared precondition p0 , which no action makes true. As
there is no way to make normal-mode true again after it is deleted by the end action, all
plans  0 for P 0 have the form  0 = h, end,  00 i, where  is a plan for P and  00 is a sequence
of |S 0 (P )| collect(p) and forgo(p) actions in any order, the former appearing when  |= p,
and the latter otherwise.
The two problems P and P 0 are equivalent in the sense that there is a correspondence
between the plans for P and P 0 , and corresponding plans are ranked in the same way. More
specifically, for any plan  for P , there is a plan  0 for P 0 that extends  with the end action
and a set of collect and forgo actions, and this plan has cost c( 0 ) = u() + , where 
is a constant that is independent of both  and  0 . Finding an optimal (maximum utility)
plan  for P is therefore equivalent to finding an optimal (minimum cost) plan  0 for P 0 .
Proposition 1 (Correspondence between plans) For an applicable action sequence 
in P , let an extension  0 of  denote any sequence obtained by appending to  the end action
followed by some permutation of the actions collect(p) and forgo(p) for all p  SG(P ), when
 |= p and  6|= p respectively. Then
 is a plan for P   0 is a plan for P 0
Proof: () The new actions in P 0 do not delete any p  F , so any hard goal achieved by
 will remain true in the final state reached by  0 , and we have that  0 |= G. For all p  F
such that u(p) > 0, either  |= p or  6|= p. In the first case, p0 is achieved by collect(p), in
the second, by forgo(p), therefore  0 |= S 0 (P ). Since G0 = G  S 0 (P ), we have that  0 |= G0 .
() If  0 is a plan for P 0 , then all hard goals G in P must be made true by  0 before the
end action, as after this action only collect and forgo actions can be applied and these can
not make any p  F true. The plan obtained by removing the end action and all collect
and forgo actions must therefore achieve G and thus is a valid plan for P .
2
Proposition 2 (Correspondence between utilities and costs) Let 1 and 2 be two
plans for P , and let 10 and 20 be extensions of 1 and 2 respectively. Then,
u(1 ) > u(2 )  c(10 ) < c(20 )

0
0
Proof: Let
P  be a plan for P and  an extension of . We demonstrate that c( ) =
u() + pSG(P ) u(p). Since the summation in this expression is a constant for a given
problem P , the assertion follows directly:

550

fiSoft Goals Can Be Compiled Away

X

c( 0 ) = c() + c0 (end) +

c0 (forgo(p)) +

forgo(p) 0

X

= c() +

X

c0 (collect(p))

collect(p) 0

c0 (forgo(p))

forgo(p) 0

= c() +

X

u(p)

p:6|=p

X

= c() +

u(p) 

X

u(p)

p:|=p

pSG(P )

= u() +

X

u(p)

pSG(P )
2

Proposition 3 (Equivalence) Let  be a plan for P , and  0 be a plan for P 0 that extends
. Then,
 is an optimal plan for P   0 is an optimal plan for P 0

Proof: Direct from the two propositions above.

2

In the following section, we empirically compare the performance of net-benefit planners
on problems P with explicit soft goals to that of sequential planners on problems P 0 in
which soft goals have been compiled away. In order to improve the latter, we make the
transformation of Definition 3 more effective with a simple trick. Recall that for a single
plan  for P , there are many extensions  0 in P 0 , all containing the same actions and
having the same cost, but differing in the way the collect and forgo actions are ordered. For
efficiency purposes, the implementation enforces a fixed but arbitrary ordering p1 , . . . , pm
on the soft goals in P by adding the dummy hard goal p0i as a precondition of the actions
collect(pi+1 ) and forgo(pi+1 ) for i = 1, . . . , m  1. The result is that there is a single possible
extension  0 of every plan  in P , and the space of plans to search is therefore reduced.
This optimization is used in the experiments reported below.

3. Experimental Results
The formal results above imply that the best plans for a problem P with action costs and
soft goals can be computed by looking for the best plans for the compiled problem P 0
with action costs and no soft goals, to which standard classical planning techniques can be
applied. To test the practical value of the transformation, we evaluate the performance of
both optimal and satisficing planning techniques for soft goals. Some problems in the test
suite contain preferences over conjunctions rather than single fluents. Such preferences are
handled with a variant of the approach described above, detailed in Section 4.
The results shown in the three columns in Table 1 labelled Net-benefit optimal planners
are the results as reported by the organizers of the 2008 International Planning Competition
(IPC6) (Helmert et al., 2008). All other results were obtained using the same machines and
551

fiKeyder & Geffner

Domain
crewplanning(30)
elevators (30)
openstacks (30)
pegsol (30)
transport (30)
woodworking (30)
total

Net-benefit optimal planners
Gamer HSP*P Mips-XXL
4
16
8
11
5
4
7
5
2
24
0
23
12
12
9
13
11
9
71
49
55

Sequential optimal planners
Gamer HSP*F HSP*0 Mips-XXL
8
21
8
19
8
8
3
6
4
6
1
22
26
14
22
15
15
9
10
14
7
71
78
50

Table 1: Coverage for optimal planners: The leftmost three columns give the number of problems
solved by each of the planners in the Net Benefit Optimal track of IPC6, as reported
by the competition organizers. The rightmost four columns give the number of compiled
problems solved by the Sequential Optimal versions of these planners. Dashes indicate
that the version of the planner could not be run on that domain.

settings as used in the competition: Xeon Woodcrest computers with clock speeds of 2.33
GHz, with a time limit of 30 minutes and a memory limit of 2GB.
In the first set of experiments, we consider the problems used in the Net Benefit Optimal
(NBO) track of IPC6, in which soft goals are defined in terms of goal-state preferences
(Gerevini & Long, 2006), and compare the results obtained by the three optimal netbenefit planners with the results obtained by their Sequential Optimal (SO) variants on
their compilations.3 The three planners entered in the NBO track of IPC6 were Gamer,
Mips-XXL, and HSP*P . The SO planners we test on the compiled versions of the NBO
problems are the SO versions of Gamer (Edelkamp & Kissmann, 2008) and Mips-XXL
(Edelkamp & Jabbar, 2008) and the two SO planners HSP*F and HSP*0 (Haslum, 2008).4
These were ranked first, fifth, second, and third, respectively, in the SO track (Helmert
et al., 2008). Three out of the six domains from the NBO track of IPC6 involve numeric
variables that appear in the preconditions of actions. The SO version of Gamer does not
handle numeric variables, and we are therefore unable to run Gamer on such problems.
Numeric variables never appear as soft goals and are left untouched by our compilation.
The data in Table 1 show that the two HSP* planners from the SO track run on the
compiled problems do as well as, or better than, the best planner from the NBO track run
on the original problems with soft goals. The maximum number of solved problems for a
domain is higher for the NBO track planners in only a single domain, openstacks (7 vs. 6).
In all other domains, SO planners are able to solve a larger number of problems than the
3. The compiled problems are currently available at http://ipc.informatik.uni-freiburg.de/Domains.
4. All versions of HSP* have a bug which may cause suboptimal or invalid solutions to be computed in
domains with non-monotonic numeric variables (numeric variables whose values may both increase and
decrease) that occur in preconditions of actions or goals (See http://ipc.informatik.uni-freiburg.
de/Planners). Such variables are present only in the transport domain out of all those tested, yet plans
computed by HSP* for both versions of the domain turn out to be valid (as verified by the VAL plan
validator, Howey & Long, 2003) and optimal in the instances in which they can be checked against the
costs of plans computed by other planners.

552

fiSoft Goals Can Be Compiled Away

Domain
elevators (30)
openstacks (30)
pegsol (30)
rovers (20)
total

Net-benefit satisficing planners
SGPlan YochanPS Mips-XXL
0
0
8
2
0
2
0
5
23
8
2
1
10
7
34

Cost satisficing planners
Lama
23
28
29
17
97

Table 2: Coverage and quality for satisficing planners: The entries indicate the number of problems
for which the planner generated the best quality plan.

maximum number solved by any NBO planner. Considering the performance of the NBO
and SO variants of each planner, the compilation benefits most the two versions of the
heuristic search planner HSP* , leaving the BDD planners Gamer and Mips-XXL relatively
unaffected. Interestingly, HSP*0 using the compilation ends up solving more problems than
Gamer, the winner of the NBO track (78 vs. 71). The drastically better performance of the
SO versions of HSP* compared to the net-benefit version is the result of the simple scheme
for handling soft goals in the latter, in which optimal plans are computed for each possible
subset of soft goals in the problem (roughly), and a change in the search algorithm from
IDA* to A*.
In the second set of experiments, we consider the three domains from the NBO track
of IPC6 which do not contain numeric variables in the preconditions of actions, and the
domain rovers from the net-benefit track of IPC5. Domains containing numeric variables in
the preconditions of actions are not considered due to the lack of state-of-the-art cost-based
planners able to handle them. Domains other than rovers from the NB track of IPC5 are
not considered as they contain disjunctive, existentially qualified, or universally qualified
soft goals which our current implementation does not support. The satisficing net-benefit
planners we test on these problems are SGPlan (Hsu & Wah, 2008), the winner of the net
benefit track from IPC5, YochanPS (Benton, Do, & Kambhampati, 2009), which received
a distinguished performance award in the same competition, and a satisficing variant of
MIPS-XXL, which also received a distinguished performance award in that competition and
competed in the optimal track of IPC6. We solve the compiled versions of the problems with
LAMA, the winner of the sequential satisficing track from IPC6. YochanPS, MIPS-XXL,
and LAMA are anytime planners, and the results discussed below refer to the cost of the
best plan found by each at the end of the evaluation period of 30 minutes.
Entries in Table 2 show the number of problems in each domain for which the plan
generated by a planner is the best or only plan produced. We report this data rather than
showing graphs of plan utilities as the absolute difference between the quality of plans is not
meaningful in itself except when the shortest plans (that ignore costs and/or soft goals) for
the problem are significantly more costly. The results show that running a state-of-the-art
cost-based planner on the compiled problems yields the best plan in 98 out of the total
110 instances, almost three times the number of instances in which the best-performing
native soft goals planner, MIPS-XXL, gives the best plan. Furthermore, in 22 out of the 23
553

fiKeyder & Geffner

problems for which MIPS-XXL finds the best plan in the pegsol domain, LAMA finds a plan
with the same quality. The problems in which satisficing net-benefit planners outperform
LAMA run on the compiled problems are therefore very few.
These results appear to contradict the results reported by Benton et al. (2009), where
the native net-benefit planner, YochanPS , yields better results than a cost-based planner,
YochanCOST , run on problems compiled according to an earlier version of our transformation
(Keyder & Geffner, 2007). The discrepancy appears to be the result of the non-informative
cost-based heuristic used in YochanCOST , which leads to plans that forgo all soft goals, and
the fact that they do not make use of the optimization discussed at the end of Section 2,
which results in an unnecessary blowup of the state space. For an analysis of the differences
between some recent cost-based planners, see the paper by Keyder and Geffner (2008).

4. Extensions
We have shown that it is possible to compile away positive utilities u(p) associated with
single fluents p. We show now that this compilation can be extended to deal with positive
utilities defined on formulas over fluents and to negative utilities defined on both single
fluents and formulas. Negative utilities stand for conditions to be avoided rather than
sought; for example, a utility u(p  q) = 10 penalizes a plan that results in a state where
both p and q are true with an extra cost of 10. The compilation of soft goals defined on
formulas is based on the standard compilation of goal and precondition formulas in classical
planning (Gazen & Knoblock, 1997; Nebel, 1999).
A positive utility on a logical formula A can be compiled away by introducing a new
fluent pA that can be achieved at zero cost from any end state where A holds, and by
assigning the utility associated with A to pA . If A is a DNF formula D1  . . .  Dn , it
suffices to add n new actions a1 , . . . , an with ai = hDi , pA i for i = 1, . . . , n. If A is a
CNF formula C1  . . .  Cn , a fluent pi is introduced for each i = 1, . . . , n, along with
actions aij = hCij , pi i for j = 1, . . . , |Ci |, where Cij stands for the jth fluent of Ci . We also
introduce an action a = h{p1 , . . . , pn }, pA i that allows the addition of fluent pA in states
where A holds. All the newly introduced actions have zero cost, and must be applicable in
P 0 after the actions of the original problem P and before the collect and forgo actions. The
best extensions of any plan  that achieves A in P will then achieve pA and use the collect
action to achieve the hard goal fluent p0A associated with pA at zero cost.
A negative utility u(A) < 0 on a formula A in DNF or CNF can be compiled away in
two steps, by first substituting a positive utility u(A) on the negation A of A and then
compiling this positive utility on a formula into a utility on a single fluent as described
above. This makes use of the fact that the negation of a formula in CNF is a formula in
DNF and vice versa.

5. Summary
We have shown that soft goals do not add expressive power and can be easily compiled
away. This implies that no new search algorithms or heuristics are strictly required for
handling them. From a practical standpoint, experiments indicate that state-of-the-art
sequential planners outperform state-of-the-art net-benefit planners on compiled versions of
554

fiSoft Goals Can Be Compiled Away

the benchmarks used in recent planning competitions. Furthermore, similar transformations
can be used to compile away positive and negative utilities on logical formulas in DNF or
CNF.

Acknowledgments
We thank Malte Helmert for his help with compiling and running many of the IPC6 planners,
Patrik Haslum for his help with all aspects of various versions of HSP, and J. Benton for
his help with compiling and running YochanPS . H. Geffner is partially supported by Grant
TIN2006-15387-C03-03 from MEC, Spain.

References
Baier, J. A., Bacchus, F., & McIlraith, S. A. (2007). A heuristic search approach to planning
with temporally extended preferences. In Proc. IJCAI-07, pp. 18081815.
Benton, J., Do, M., & Kambhampati, S. (2009). Anytime heuristic search for partial satisfaction planning. Artificial Intelligence, 173 (5-6), 562592.
Bonet, B., & Geffner, H. (2008). Heuristics for planning with penalties and rewards formulated in logic and computed through circuits. Artificial Intelligence, 172 (12-13),
15791604.
Edelkamp, S. (2006). On the compilation of plan constraints and preferences. In Proc.
ICAPS-06, pp. 374377.
Edelkamp, S., & Jabbar, S. (2008). MIPS-XXL: Featuring external shortest path search for
sequential optimal plans and external branch-and-bound for optimal net benefit. In
6th. Int. Planning Competition Booklet (ICAPS-08).
Edelkamp, S., & Kissmann, P. (2008). Gamer: Bridging planning and general game playing
with symbolic search. In 6th. Int. Planning Competition Booklet (ICAPS-08).
Gazen, B., & Knoblock, C. (1997). Combining the expressiveness of UCPOP with the
efficiency of Graphplan. In Steel, S., & Alami, R. (Eds.), Proc. 4th European Conf.
on Planning, pp. 221233. Springer.
Gerevini, A., & Long, D. (2006). Preferences and soft constraints in PDDL3. In Proc.
ICAPS-06 Workshop on Preferences and Soft Constraints in Planning, pp. 4653.
Haslum, P. (2008). Additive and reversed relaxed reachability heuristics revisited. In 6th.
Int. Planning Competition Booklet (ICAPS-08).
Helmert, M., Do, M., & Refanidis, I. (2008). IPC 2008 deterministic competition. In 6th.
Int. Planning Competition Booklet (ICAPS-08).
Howey, R., & Long, D. (2003). VALs progress: The automatic validation tool for PDDL2.1
used in the international planning competition. In Proc. 2003 ICAPS Workshop on
The Competition: Impact, Organization, Evaluation, Benchmarks.
Hsu, C.-W., & Wah, B. W. (2008). The SGPlan planning system in IPC6. In 6th. Int.
Planning Competition Booklet (ICAPS-08).
555

fiKeyder & Geffner

Keyder, E., & Geffner, H. (2007). Set-additive and TSP heuristics for planning with action costs and soft goals. In Proc. ICAPS-06 Workshop on Heuristics for DomainIndependent Planning.
Keyder, E., & Geffner, H. (2008). Heuristics for planning with action costs revisited. In
Proc. 18th European Conference on Artificial Intelligence, pp. 588592.
Nebel, B. (1999). Compilation schemes: A theoretical tool for assessing the expressive
power of planning formalisms. In Proc. KI-99: Advances in Artificial Intelligence, pp.
183194. Springer-Verlag.
Nebel, B. (2000). On the compilability and expressive power of propositional planning.
Journal of Artificial Intelligence Research, 12, 271315.
Sanchez, R., & Kambhampati, S. (2005). Planning graph heuristics for selecting objectives
in over-subscription planning problems. In Proc. ICAPS-05, pp. 192201.
Smith, D. E. (2004). Choosing objectives in over-subscription planning. In Proc. ICAPS-04,
pp. 393401.

556

fi