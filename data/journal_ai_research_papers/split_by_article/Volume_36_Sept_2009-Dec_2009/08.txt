Journal of Artificial Intelligence Research 36 (2009) 387-414

Submitted 07/09; published 11/09

Approximate Strong Equilibrium in Job Scheduling Games
Michal Feldman

mfeldman@huji.ac.il

School of Business Administration
and Center for the Study of Rationality,
Hebrew University of Jerusalem, Israel.

Tami Tamir

tami@idc.ac.il

School of Computer Science,
The Interdisciplinary Center, Herzliya, Israel.

Abstract
A Nash Equilibrium (NE) is a strategy profile resilient to unilateral deviations, and is
predominantly used in the analysis of multiagent systems. A downside of NE is that it is
not necessarily stable against deviations by coalitions. Yet, as we show in this paper, in
some cases, NE does exhibit stability against coalitional deviations, in that the benefits
from a joint deviation are bounded. In this sense, NE approximates strong equilibrium.
Coalition formation is a key issue in multiagent systems. We provide a framework for
quantifying the stability and the performance of various assignment policies and solution
concepts in the face of coalitional deviations. Within this framework we evaluate a given
configuration according to three measures: (i) IR min : the maximal number , such that
there exists a coalition in which the minimal improvement ratio among the coalition members is , (ii) IR max : the maximal number , such that there exists a coalition in which
the maximal improvement ratio among the coalition members is , and (iii) DR max : the
maximal possible damage ratio of an agent outside the coalition.
We analyze these measures in job scheduling games on identical machines. In particular,
we provide upper and lower bounds for the above three measures for both NE and the wellknown assignment rule Longest Processing Time (LPT).
Our results indicate that LPT performs better than a general NE. However, LPT is not
the best possible approximation. In particular, we present a polynomial time approximation
scheme (PTAS) for the makespan minimization problem which provides a schedule with
IR min of 1 +  for any given . With respect to computational complexity, we show that
given an NE on m  3 identical machines or m  2 unrelated machines, it is NP-hard to
determine whether a given coalition can deviate such that every member decreases its cost.

1. Introduction
We consider job scheduling systems, in which n jobs are assigned to m identical machines
and incur a cost which is equal to the total load on the machine they are assigned to.1 These
problems have been widely studied in recent years from a game theoretic perspective (Koutsoupias & Papadimitriou, 1999; Andelman, Feldman, & Mansour, 2007; Christodoulou,
Koutsoupias, & Nanavati, 2004; Czumaj & Vocking, 2002; A. Fiat & Olonetsky., 2007).
In contrast to the traditional setting, where a central designer determines the allocation of
jobs to machines and all the participating entities are assumed to obey the protocol, mul1. This cost function characterizes systems in which jobs are processed in parallel, or when all jobs on a
particular machine have the same single pick-up time, or need to share some resource simultaneously.

c
2009
AI Access Foundation. All rights reserved.

fiFeldman & Tamir

tiagent systems are populated by heterogeneous, autonomous agents, which often display
selfish behavior. Different machines and jobs may be owned by different strategic entities,
who will typically attempt to optimize their own objective rather than the global objective.
Game theoretic analysis provides us with the mathematical tools to study such situations,
and indeed has been extensively used recently to analyze multiagent systems. This trend
is motivated in part by the emergence of the Internet, which is composed of distributed
computer networks managed by multiple administrative authorities and shared by users
with competing interests (Papadimitriou, 2001).
Most game theoretic models applied to job scheduling problems, as well as other network games (e.g., Fabrikant, Luthra, Maneva, Papadimitriou, & Shenker, 2003; Albers,
Elits, Even-Dar, Mansour, & Roditty, 2006; Roughgarden & Tardos, 2002; Anshelevich,
Dasgupta, Kleinberg, Tardos, Wexler, & Roughgarden, 2004), use the solution concept
of Nash equilibrium (NE), in which the strategy of each agent is a best response to the
strategies of all other agents. While NE is a powerful tool for analyzing outcomes in competitive environments, its notion of stability applies only to unilateral deviations.
In
numerous multiagent settings, selfish agents stand to benefit from cooperating by forming
coalitions (Procaccia & Rosenschein, 2006). Therefore, even when no single agent can profit
by a unilateral deviation, NE might still not be stable against a group of agents coordinating a joint deviation, which is profitable to all the members of the group. This stronger
notion of stability is exemplified in the strong equilibrium (SE) solution concept, coined by
Aumann (1959). In a strong equilibrium, no coalition can deviate and improve the utility
of every member of the coalition.

M3

3

2

5

M3

3

5

8

M2

3

2

5

M2

3

5

8

10

M1

M1

5

5
(a)

2

2

4

(b)

Figure 1: An example of a configuration (a) that is a Nash equilibrium but is not resilient against
coordinated deviations, since the jobs of load 5 and 2 all profit from the deviation demonstrated in (b).

As an example, consider the configuration depicted in Figure 1(a). In our figures, a
job is represented by a rectangle whose width corresponds to the jobs length. The jobs
scheduled on a specific machine form a vertical concatenation of rectangles. For example,
in Figure 1(a) there are three machines, and M1 processes two jobs of length 5. Note that
the internal order of jobs has no effect, since the cost of each job is defined to be the load on
the machine it is assigned to. This configuration is an NE since no job can reduce its cost
through a unilateral deviation. One might think that any NE on identical machines must
also be sustainable against joint deviations. Yet, as was already observed in (Andelman

388

fiApproximate Strong Equilibrium

et al., 2007), this may not be true.2 For example, the configuration above is not resilient
against a coordinated deviation of the coalition  consisting of the four jobs of load 5 and
2 deviating to configuration (b), where the jobs of load 5 decrease their costs from 10 to 8,
and the jobs of load 2 improve from 5 to 4. Note that the cost of the two jobs of load 3
(which are not members of the coalition) increases.
In the example above, every member of the coalition improves its cost by a (multiplicative) factor of 45 . By how much more can a coalition improve? Is there a bound on the
improvement ratio? As it will turn out, this example is in fact the most extreme one in a
sense that will be clarified below. Thus, while NE is not completely stable against coordinated deviations, in some settings, it does provide us with some notion of approximate
stability to coalitional deviations (or approximate strong equilibrium).
We also consider a subclass of NE schedules, produced by the Longest Processing Time
(LPT) rule (Graham, 1969). The LPT rule sorts the jobs in a non-increasing order of
their loads and greedily assigns each job to the least loaded machine. It is easy to verify
that every configuration produced by the LPT rule is an NE (Fotakis, S. Kontogiannis, &
Spiraklis, 2002). Is it also an SE? Note that for the instance depicted in Figure 1, LPT
would have produced an SE. However, as we show, this is not always the case.
In this paper we provide a framework for studying the notion of approximate stability
to coalitional deviations. In our analysis, we consider three different measures. The first
two measure the stability of a configuration, and uses the notion of an improvement ratio
of a job, which is defined as the ratio between the jobs costs before and after the deviation.
The third measures the worst possible effect on the non-deviating jobs, as will be explained
below.3
1. Minimum Improvement Ratio: By definition, all members of a coalition must
reduce their cost. That is, the improvement ratio of every member of the coalition is larger
than 1. Clearly, the coalition members might not share the same improvement ratio. The
minimum improvement ratio of a particular deviation is the minimal improvement ratio of
a coalition member. The minimum improvement ratio of a schedule s, denoted IR min (s),
is the maximum over all possible deviations originated from s of the minimal improvement
ratio of the deviation. In other words, there is no coalitional deviation originating from s
such that every member of the coalition reduces its cost by a factor greater than IR min (s).
A closely related notion has been suggested by Albers (2009), who defined a strategy
profile to be an -SE if there is no coalition in which each agent can improve by a factor
of more than . In our notation, a schedule s is an -SE if IR min (s) is at most . Albers
studied this notion in the context of SE existence in cost-sharing games, and showed that
for a sufficiently large , an -SE always exists. The justification behind this concept is
that agents may be willing to deviate only if they improve by a sufficiently high factor (due
to, for example, some overhead associated with the deviation).
2. This statement holds for m  3. For 2 identical machines, every NE is also an SE (Andelman et al.,
2007).
3. Throughout this paper, we define approximation by a multiplicative factor. Since the improvement and
damage ratios for all the three measures presented below are constants greater than one (as will be shown
below), the additive ratios are unbounded. Formally, for any value a it is possible to construct instances
(by scaling the instances we provide for the multiplicative ratio) in which the cost of all jobs is reduced,
or the cost of some jobs is increased, by at least an additive factor of a.

389

fiFeldman & Tamir

For three machines, we show that every NE is a 54 -SE. That is, there is no coalition
that can deviate such that every member improves by a factor larger than 54 . For this
case, we also provide a matching lower bound (recall Figure 1 above), that holds for any
2
m  3. For arbitrary m, we show that every NE is a (2  m+1
)-SE. Our proof technique
draws a connection between makespan approximation and approximate stability, where
the makespan of a configuration is defined as the maximum load on any machine in the
configuration.
We next consider schedules obtained
from the LPT rule. We show that for m = 3,

every LPT configuration is a ( 21 + 46 )-SE ( 1.1123), and we also provide a matching lower
1
bound, which holds for any m  3. For arbitrary m, we show an upper bound of 43  3m
.
The above results indicate that LPT is more stable than NE with respect to coalitional
deviations. Yet, LPT is not the best possible approximation of SE. Similar to this notion
in approximation algorithms, we define an SE-PTAS to be an assignment algorithm which
gets as input an additional parameter , specifying how close to an SE the schedule should
be and produces a (1 + )-SE in time polynomial in n, 1/. In this paper we devise an
SE-PTAS for any fixed number of machines, which also approximates the makespan within
a factor of 1 + .
2. Maximum Improvement Ratio: The maximum improvement ratio of a particular
deviation is the maximal improvement ratio experienced by some coalition member. The
maximum improvement ratio of a schedule s, denoted IR max (s), is the maximum over all
possible deviations originated from s of the maximal improvement ratio of the deviation.
In other words, there is no coalition deviation originating from s such that there exists a
member of the coalition that reduces its cost by a factor greater than IR max (s).
This notion establishes the bounds on how much an agent would gain in a deviating
coalition for which all agents gain something from the deviation. Also, this notion is similar
in spirit to stability against a large total improvement. It also suits environments in which
individuals are willing to obey a specific player as long as they are not hurt. Interestingly,
we find that given an NE configuration, the improvement ratio of a single agent may be
arbitrarily large, for any m  3. In contrast, for LPT configurations on three machines, no
agent can improve by a factor of 53 or more and this bound is tight. Thus, with respect to
IR max , the relative stability of LPT compared to NE is more significant than with respect
1
, which we believe to be tight.
to IR min . For arbitrary m, we provide a lower bound of 2  m
3. Maximum Damage Ratio: As is the case for the jobs of load 3 in Figure 1, some jobs
might get hurt as a result of a coalitional deviation. The third measure that we consider
is the worst possible effect of a deviation on jobs that are not members of the deviating
coalition. Formally, the maximum damage ratio is the maximal ratio between the costs of
a non-coalition member before and after the deviation. Variants of this measure have been
considered in distributed systems, e.g., the Byzantine Generals problem (Lamport, Shostak,
& Pease, 1982), and in rational secret sharing (Halpern & Teague, 2004).4 In Section 5,
we prove that the maximum damage ratio is less than 2 for any NE configuration, and less
4. In a rational secret sharing protocol, a set of players, each holding a share of a secret, aims to jointly
reconstruct it. Viewing the protocol as a game, the players utilities are typically assumed to satisfy the
following two basic constraints: (i) each player prefers learning the secret over not learning it, and (ii)
conditioned on having learned the secret, each player prefers as few as possible other players to learn it.

390

fiApproximate Strong Equilibrium

than 23 for any LPT configuration. Both bounds hold for any m  3, and for both cases we
provide matching lower bounds.
In summary, our results in Sections 3-5 (see Table 1) indicate that NE configurations
are approximately stable with respect to the IR min measure. Moreover, the performance of
jobs outside the coalition would not be hurt by much as a result of a coalitional deviation.
As for IR max , our results provide an additional strength of the LPT rule, which is already
known to possess attractive properties (with respect to, e.g., makespan approximation and
stability against unilateral deviations).

NE
LPT

IR min
upper bound
m3
m=3
2
5
2  m+1
4
4
3



1
3m

1
2

+


6
4

lower
bound
1
2

5
4

+

6
4

IR max
upper
lower
bound bound
unbounded
5
3 (m=3)

2

1
m

DR max
upper lower
bound bound
2
2
3
2

3
2

Table 1: Our results for the three measures. Unless specified otherwise, the results hold for
arbitrary number of machines m.
In Section 7, we study computational complexity aspects of coalitional deviations. We
find that it is NP-hard to determine whether an NE configuration on m  3 identical
machines is an SE. Moreover, given a particular configuration and a set of jobs, it is NPhard to determine whether this set of jobs can engage in a coalitional deviation. For
unrelated machines (i.e., where each job incurs a different load on each machine), the above
hardness results hold already for m = 2 machines. These results might have implications
on coalitional deviations with computationally restricted agents.
Related work: NE is shown in this paper to provide approximate stability against coalitional deviations. A related body of work studies how well NE approximates the optimal
outcome of competitive games. The Price of Anarchy was defined as the ratio between the
worst-case NE and the optimum solution (Papadimitriou, 2001; Koutsoupias & Papadimitriou, 1999), and has been extensively studied in various settings, including job scheduling
(Koutsoupias & Papadimitriou, 1999; Christodoulou et al., 2004; Czumaj & Vocking, 2002),
network design (Albers et al., 2006; Anshelevich et al., 2004; Anshelevich, Dasgupta, Tardos, Wexler, & Roughgarden, 2003; Fabrikant et al., 2003), network routing (Roughgarden
& Tardos, 2002; Awerbuch, Azar, Richter, & Tsur, 2003; Christodoulou & Koutsoupias,
2005), and more.
The notion of strong equilibrium (SE) (Aumann, 1959) expresses stability against coordinated deviations. The downside of SE is that most games do not admit any SE, even
amongst those admitting a Nash equilibrium. Various recent works have studied the existence of SE in particular families of games. For example, it has been shown that in every job
scheduling game and (almost) every network creation game, an SE exists (Andelman et al.,
2007). In addition, several papers (Epstein, Feldman, & Mansour, 2007; Holzman & LawYone, 1997, 2003; Rozenfeld & Tennenholtz, 2006) provided a topological characterization
for the existence of SE in different congestion games, including routing and cost-sharing
391

fiFeldman & Tamir

connection games. The vast literature on SE (e.g., Holzman & Law-Yone, 1997, 2003;
Milchtaich, 1998; Bernheim, Peleg, & Whinston, 1987) concentrate on pure strategies and
pure deviations, as is the case in our paper. In job scheduling settings, it was shown by
Andelman et al. (2007) that if mixed deviations are allowed, it is often the case that no SE
exists. When an SE exists, clearly, the price of anarchy with respect to SE (denoted the
strong price of anarchy by Andelman et al., 2007) is significantly better than the price of
anarchy with respect to NE (Andelman et al., 2007; A. Fiat & Olonetsky., 2007; Leonardi
& Sankowski, 2007).
Following our work, IR min bounds for the case of m = 4 machines have been provided
by Chen (2009), who extended our bound of 45 for NE schedules, and provided a bound of
( 12 +



345
30 )

 1.119 for LPT-based schedules.

2. Model and Preliminaries
In this section we give a formal description of the model and provide several useful observations and properties of deviations by coalitions.
2.1 Resilience to Deviations by Coalitions
We first present a general game theoretic setting and then describe the specific job scheduling
setting which is the focus of this paper.
A game is denoted by a tuple G = hN, (Sj ), (cj )i, where N = {1, . . . , n} is the set of
players, Sj is the finite action space of player j  N , and cj is the cost function of player j.
The joint action space of the players is S = ni=1 Si . For a joint action s = (s1 , . . . , sn )  S,
we denote by sj the actions of players j 0 6= j, i.e., sj = (s1 , . . . , sj1 , sj+1 , . . . , sn ).
Similarly, for a set of players , also called a coalition, we denote by s and s the actions
of players in  and not in , respectively. The cost function of player j maps a joint action
s  S to a real number, i.e., cj : S  R.
A joint action s  S is a pure Nash Equilibrium (NE) if no player j  N can benefit from
unilaterally deviating from his action to another action, i.e., j  N a  Sj : cj (sj , a) 
cj (s). A pure joint action of a coalition   N specifies an action for each player in the
coalition, i.e., s0  j Sj . A joint action s  S is not resilient to a pure deviation of a
coalition  if there is a pure joint action s0 of  such that cj (s , s0 ) < cj (s) for every
j   (i.e., the players in the coalition can deviate in such a way that each player strictly
reduces its cost). In this case we say that the deviation to s0 = (s , s0 ) is a profitable
deviation for coalition .
A pure joint action s  S is resilient to pure deviations by coalitions if there is no
coalition   N that has a profitable deviation from s.
Definition 2.1 A pure strong equilibrium (SE) is a pure joint action that is resilient to
pure deviations of coalitions.
Clearly, a strong equilibrium is a refinement of the notion of Nash equilibrium (in particular, if s is a strong equilibrium, it is resilient to deviations of coalitions of size 1, which
coincides with the definition of NE).

392

fiApproximate Strong Equilibrium

2.2 Job Scheduling on Identical Machines
A job scheduling setting with identical machines is characterized by a set of machines M =
{M1 , . . . , Mm }, a set {1, . . . , n} of jobs, where a job j has processing time pj . An assignment
method produces an assignment s of jobs into machines, where sj  M denotes the machine
job j is assigned to. The assignment is referred to as a schedule or a configuration (we use
the two terms interchangeably). The load of a machine Mi inP
a schedule s is the sum of the
processing times of the jobs assigned to Mi , that is Li (s) = j:sj =Mi pj . For a set of jobs
S
, let s() = j {sj } denote the set of machines on which the members of  are assigned
in schedule s.
The makespan of a schedule is the load on the most loaded machines. A social optimum
minimizes the makespan, i.e., OP T = mins makespan(s).
For each job scheduling setting define a job scheduling game with the jobs as players.
The action space Sj of player j  N are all the individual machines, i.e., Sj = M . The
joint action space is S = nj=1 Sj . A joint action s  S constitutes a schedule. In a schedule
s  S player j  N selects machine sj as its action and incurs a cost cj (s), which is the
load on the machine sj , i.e., cj (s) = Li (s), where sj = Mi . In a job scheduling game, the
makespan is also the highest cost among all players. Formally, makespan(s) = maxj cj (s).
0
Let s and s0 be two configurations. Let Pis,s
be a binary indicator whose value is 1 if
1 ,i2
there is a job j such that sj = Mi1 and s0j = Mi2 (i.e., if there is a job that chooses Mi1
in s but Mi2 in s0 ), and 0 otherwise. When clear from the context, we abuse notation and
0
denote Pis,s
by Pi1 ,i2 . In addition, we denote Li (s) and Li (s0 ) by Li and L0i , respectively.
1 ,i2
Let s0 = (s , s0 ) be a profitable deviation from s for a coalition . The improvement
ratio of a job j   such that sj = Mi1 and s0j = Mi2 (i.e., a job migrating from machine
0
Mi1 to machine Mi2 ) is denoted by IRs,s (j) = Li1 (s)/Li2 (s0 ). Clearly, for any job j  ,
0
IRs,s (j) > 1. The damage ratio of a job j 6  such that sj = s0j = Mi is denoted by
0
DRs,s (j) = Li (s0 )/Li (s).
If sj 6= s0j , we say that job j migrates in the deviation. Note that, in our terminology, a
job can be a member of a profitable deviation even if it does not migrate in the deviation.
Yet, every job that migrates in the deviation is a member of the deviating coalition by
definition.
Definition 2.2 Given schedules s and s0 = (s , s0 ), the minimal improvement ratio of s0
0
with respect to s is IR min (s, s0 ) = minj IRs,s (j). In addition, the minimal improvement
ratio of a schedule s is IR min (s) = maxs0 =(s ,s0 ),N IR min (s, s0 ).
Given schedules s and s0 = (s , s0 ), the maximal improvement ratio of s0 with respect
0
to s is IR max (s, s0 ) = maxj IRs,s (j). In addition, the maximal improvement ratio of a
schedule s is IR max (s) = maxs0 =(s ,s0 ),N IR max (s, s0 ).
Given schedules s and s0 = (s , s0 ), the maximal damage ratio of s0 with respect to s
0
is DR max (s, s0 ) = maxjN DRs,s (j). In addition, the maximal damage ratio of a schedule
s is DR max (s) = maxs0 =(s ,s0 ),N DR max (s, s0 ).
In particular, we can define the notion of -SE (Albers, 2009) in terms of the minimum
improvement ratio as follows:
Definition 2.3 A schedule s is an -strong equilibrium (-SE) if IR min (s)  .
393

fiFeldman & Tamir

We next provide several useful observations and claims we shall use in the sequel. We
refer to a profitable deviation from an NE-schedule as an NE-originated profitable deviation.
Similarly, a profitable deviations from a schedule produced by the LPT rule is referred to
as an LPT-originated profitable deviation.
The first observation shows that in any NE-originated profitable deviation, if a job
migrates to some machine, some other job must migrate out of that machine. Formally:
Observation 2.4 Let s be an NE and let s0 = (s , s0 ) be a profitable deviation. If s0j = Mi
for some j  , then j 0   such that sj 0 = Mi and s0j 0 = Mi0 for some i0 6= i.
This is obvious, since if job j strictly decreases its cost by migrating to a machine that no
other job leaves, it can also profitably migrates unilaterally, contradicting s being an NE.
We next define a special deviation structure, called a flower structure in which all the
deviations are from or to the most loaded machine.
Definition 2.5 Let M1 be the most loaded machine in a given schedule s. We say that a
s,s0
s,s0
deviation s0 obeys the flower structure if for all i > 1, P1,i
= Pi,1
= 1 and for all i, j > 1,
0

s,s
Pi,j
= 0 (See Figure 2).

M2

M3
M1

M5

M4

Figure 2: A graph representation of a coalition on 5 machines obeying the flower structure. There
0

s,s
is an edge from Mi to Mj if and only if Pi,j
= 1.

0

s,s
In particular, for m = 3, a deviation from s to s0 obeys the flower structure if P1,2
=
0

0

0

0

0

s,s
s,s
s,s
s,s
s,s
P2,1
= P1,3
= P3,1
= 1 and P2,3
= P3,2
= 0. Recall that for simplicity of presentation,
0

s,s
we write in the sequel Pi,j to denote Pi,j
and we also write Li and L0i to denote Li (s) and
Li (s0 ), respectively.

Claim 2.6 Any NE-originated profitable deviation on three machines obeys the flower structure.
Proof: Let s be an NE and M1 be the most loaded machine in s, and let s0 be a profitable
deviation. We first show that P2,3 = P3,2 = 0. Assume first that both P2,3
P = P3,2P= 1.
Thus, L02 < L3 and L03 < L2 . Clearly, since the total load does not change, i Li = i L0i .
Therefore, it must hold that L01 > L1 . However, no profitable deviation can increase the
load on the most loaded machine. A contradiction. Therefore, at most one of P2,3 , P3,2 can
be 1. Assume w.l.o.g that P2,3 = 1. By Observation 2.4 some job leaves M3 , and by the
above it cannot be to M2 . Thus, it must be that P3,1 = 1. Similarly, some job
M1 . If
Pleaves P
P1,2 = 1, then we get that L01 < L3 , L02 < L1 , and L03 < L2 , contradicting i Li = i L0i .
394

fiApproximate Strong Equilibrium

0
0
0
If P1,3 = 1 then
P we getPthat0 L1 < L3 , L2 < L2 (no job is added to M2 ), and L3 < L1 ,
contradicting i Li = i Li again. Thus, P2,3 = 0. The proof of P3,2 = 0 is analogous.
It remains to show that P1,2 = P1,3 = P2,1 = P3,1 = 1. We know that all three machines
are assigned jobs in s0 that were not assigned to them in s. By the above P2,3 = P3,2 = 0.
By Observation 2.4 some job leaves each of M2 , M3 , therefore, P2,1 = P3,1 = 1. Also, some
job leaves M1 , thus at least one of P1,2 , P1,3 equals 1. Assume w.l.o.g that P1,2 = 1. We
show that also P1,3 = 1. In particular, we show that L03 > L3 , and since P2,3 = 0 it must be
that P1,3 = 1. Assume the opposite, that is L03  L3 . We already know that
P2,1 = 1.
P P1,2 =P
Thus, L02 < L1 , L01 < L2 , and by our assumption L03  L3 . That is, i L0i < i Li . A
contradiction.

It is known that any NE schedule on two identical machines is also an SE (Andelman
et al., 2007). By the above claim, at least four jobs change machines in any profitable
deviation on three machines. Clearly, at least four jobs change machines in any coalition
on m > 3 machines. Therefore,

Corollary 2.7 Every NE-schedule is stable against deviations by coalitions of size three or
less.
The next two propositions further characterize any coalition deviation on three machines.
We show that while M1 is the most loaded machine before the deviation, it becomes the
least loaded after the deviation.
Proposition 2.8 In any NE-originated deviation on three machines, the loads on the two
less loaded machines in increasing, that is, L02 > L2 and L03 > L3 .
Proof: Assume on the contrary that L02  L2 . By Claim 2.6, P1,3 P
= P3,1 = P
1. Thus,
0 <
L03 < L1 , L01 < L3 , and by our assumption L02  L2 . That is,
L
i i
i Li . A
0
contradiction. The proof of L3 > L3 is analogous.

Proposition 2.9 In any NE-originated deviation on three machines the most loaded machine becomes the least loaded machine, that is, L01 < min(L02 , L03 ).
Proof: By Claim 2.6, P1,2 = 1, and thus L01 < L2 . By the above proposition, L2 < L02 .
Thus, L01 < L02 . The proof of L01 < L03 is symmetric.


3. -Strong Equilibrium
In this section, the stability of configurations is measured by the minimal improvement ratio
measure. We first provide a complete analysis (i.e. matching upper and lower bounds) for
three identical machines5 for both NE and LPT. For arbitrary m, we provide an upper
bound for NE and LPT, and show that the lower bounds for m = 3 hold for any m.
Theorem 3.1 Any NE schedule on three machines is a 45 -SE.
5. We note that for unrelated machines, the improvement ratio cannot be bounded within any finite factor
even for two machines. This can be seen by a simple example of two jobs and two machines, where the
load vector of job 1 is (1, ), and the load vector of job 2 is (, 1). If job i is assigned to machine i (for
i = 1, 2), the resulting configuration is an NE, with load 1 on each machine. However, both jobs can
reduce their load from 1 to  by swapping.

395

fiFeldman & Tamir

Proof: Let s be an NE-configuration on three machines, and let r = IR min (s). By Claim
2.6, the deviation obeys the flower P
structure. Therefore: L01  L2 /r , L01  L3 /r , L02 
L1 /r , and L03  L1 /r. Let P = j pj (also = L1 + L2 + L3 ). Summing up the above
inequalities we get r  (L1 + P )/(L01 + P ).
Proposition 3.2 The load on the most loaded machine is at most half of the total load,
that is, L1  P/2.
Proof: Let g = max(L1 L2 , L1 L3 ). By the flower structure, there are at least two jobs on
M1 , thus g  L1 /2 - since otherwise some job would benefit from leaving M1 , contradicting
the NE. By definition of g, we know that 2L1  L2 + L3 + 2g, and since 2g  L1 , we get
that L1  P/2.

Distinguish between two cases:
1. L01  P/5: in this case r  (L1 + P )/(L01 + P )  (3P/2)/(6P/5) = 5/4.
2. L01 < P/5: It means that L02 + L03 > 4P/5 (M2 and M3 have the rest of the load),
that is, at least one of L02 , L03 > 2P/5. W.l.o.g. let it be M2 . By the flower structure
some job from M1 migrates M2 . This jobs improvement ratio is L1 /L02 , which, by
Proposition 3.2, is less than (P/2)/(2P/5) = 5/4. Thus, again, r < 5/4.

The above analysis is tight as shown in Figure 1. Moreover, this lower bound can be
extended to any m > 3 by adding m  3 machines and m  3 heavy jobs assigned to these
machines. Thus,
Theorem 3.3 For m  3, there exists an NE schedule s such that IR min (s) = 54 .
For LPT configurations, the bound on the minimum improvement ratio is lower. The
proof of the following theorems appear in Appendix A.
Theorem 3.4 Any LPT schedule on three machines is a ( 12 +


6
4

 1.1123)-SE.

Theorem 3.5 For any m  3, there exists an LPT schedule s such that IR min (s) = 12 +


6
4 .

We next provide upper bounds for arbitrary m. Our analysis is based on drawing a
connection between the makespan approximation and the SE-approximation. Assume that
a given schedule is an r-approximation for the minimum makespan. We show that under
some conditions on the original schedule, if a subset of jobs form a coalition for which
IR min > r, then, by considering only a subset of machines, it is possible to get a schedule
which is apparently better than the optimal one. We first define the set of assignment rules
for which the above connection exists.
Definition 3.6 Let s be a schedule of an instance I = hN, M i. Given M  M , let I =
hN , M i be an instance induced by s, M such that N = {j|sj  M }. An assignment method,
A, is said to be subset-preserving if for any I and M  M , it holds that sj = sj for

any j  N , where s and s are the assignments produced by A on the instances I and I,
respectively.
396

fiApproximate Strong Equilibrium

Claim 3.7 LPT is a subset-preserving method.
Proof: The proof is by induction on the number of the jobs in N . We show that for any
k 6= N , the first k jobs in N 0 are assigned on the same machine when LPT is executed
 Note that since N is a sublist of N , the jobs in N are in the
on input I and on input I.
same order as in N . The first job is scheduled on the first empty machine among M . For
any other job j  N , by the induction hypothesis, when j is scheduled, the load on each
of the machines is identical to the load of the corresponding machines at the time j was
scheduled as a member of N . This load is generated only by jobs in N that come before j
in N . Therefore, by LPT, j is scheduled on the least loaded machine among the machines
M , that is, sj = sj . We assume that LPT uses a deterministic tie-breaking rule if there
are several least loaded machines in N . Therefore sj = sj also in this case.

Lemma 3.8 Let A be an assignment method that is (i) subset-preserving, (ii) yields Nash
equilibrium, and (iii) approximates the minimum makespan within a factor of r, where r  1
is non-decreasing in m. Then, A produces an r-SE.
Proof: Assume for contradiction that there exists an instance I such that in the schedule s
produced by A, there exists a coalition in which the improvement ratio of every member is
greater than r. Let  be such a coalition of minimum size. If there is a job j   that does
not migrate, then the set of jobs  \ {j} is a smaller coalition, contradicting the minimality
of ; therefore, for every j  , it holds that sj 6= s0j . We next show that s() = s0 ().
First, s()  s0 (), that is, for every machine in s() from which a job j migrates, there
must exist a job migrating to it, otherwise,  \ {j} is a smaller such coalition, contradicting
the minimality of . Second, s0 ()  s(), that is, for every machine to which a job j
migrates, there must exist a job migrating from it (otherwise job j can improve unilaterally,
in contradiction to s being an NE). Given that s() = s0 (), denote this set of machines by
M , and let m = |M |. Finally, let N  N be the set jobs assigned to machines in M by A,
Consider the instance I = hN , M i. Since A is subset-preserving, the jobs of N are
scheduled by A on M in I exactly as their schedule on M when scheduled as part of I. In
particular, when I is scheduled by A, the same deviation of  exists, in which every job in
 improves by a factor greater than r, and all the machines in M take part in it. In other
words, for any pair of machines i, j, such that Pi,j = 1, we have Li /L0j > r(m)  r(m),
where r(m) is the approximation ratio of A on m machines. On the other hand, since A
 where OP T (I)
 is
produces an r(m)-approximation, for any machine i, Li  r(m)OP T (I),

the minimum possible makespan of I on M machines. Therefore, if Pi,j = 1 then r(m) <
Li /L0j 


r(m)OP T (I)
.
L0j

This implies that for any machine j that receives at least one job,


L0j < OP T (I).
However, since at least one job has migrated to each of the m participating machines,
after the deviation the machines M are assigned all the jobs of N and they all have load
 A contradiction.
less than OP T (I).

Let s be an NE on M machines. Clearly, for any M  M , the induced schedule of s on
2
the set of machines M is also an NE. Also, it is known that any NE provides a (2  m+1
)approximation to the makespan (Finn & Horowitz, 1979; Schuurman & Vredeveld, 2007).
2
This implies that Lemma 3.8 can be applied with r = 2  m+1
to any assignment that yields
an NE. Therefore,
397

fiFeldman & Tamir

Corollary 3.9 Any NE schedule on m identical machines is a (2 

2
m+1 )

 SE.

The next result is a direct corollary of Lemma 3.8, Claim 3.7, and the fact that LPT
1
)-approximation to the makespan (Graham, 1969).
provides a ( 43  3m
1
Corollary 3.10 Any schedule produced by LPT on m identical machines is a ( 43  3m
)SE.

The above bounds are not tight, but the gap between the lower and upper bounds is
only a small constant.

4. Maximum Improvement Ratio
In this section, we analyze the maximum improvement ratio measure. We provide a complete analysis for NE configurations and any m  3, and for LPT configurations on three
machines. The lower bound for LPT on three machines can be extended to arbitrary m. In
contrast to the other measures we consider in this paper, where NE and LPT differ only by
a small constant, it turns out that with respect to the maximum improvement ratio, NE
and LPT are significantly different. While the improvement ratio of NE-originated deviations can be arbitrarily high, for deviations from LPT configurations, the highest possible
improvement ratio of any participating job is less than 35 .
Theorem 4.1 Fix r  1. For any m  3 machines, there exists an instance with m
machines and an NE s such that IR max (s) > r.
Proof: Given r, consider the NE-configuration on three machines given in Figure 3(a). The
coalition consists of {1, 1, 2r, 2r}. Their improved schedule is given in Figure 3(b). The
improvement ratio of the jobs of load 1 is 2r/2 = r. For m > 3, dummy machines and jobs
can be added.

M3

2r-1

1

2r

M3

2r-1

2r

4r-1

M2

2r-1

1

2r

M2

2r-1

2r

4r-1

M1

2r

4r

M1 1 1

2r
(a)

2
(b)

Figure 3: An NE-originated deviation in which the jobs of load 1 have improvement ratio
r.

In contrast to NE-originated deviations, for LPT-originated deviations we are able to
bound the maximum improvement ratio by a small constant. The proof of the following
claim is given in Appendix A.
Theorem 4.2 Let s be an LPT schedule on three machines. It holds that IRmax (s)  53 .

398

fiApproximate Strong Equilibrium

1+

2m-2+

Mm

M2

2m-3

1+

2m-2+

M2

M1

2m-3

2

2m-1

2m-3

2

2m-1



2m-3


Mm

2



2

1+ 2m-1+

M1 1+  1+ 1+

(a)

m+m

(b)

Figure 4: An LPT-originated deviation on m machines in which the job of load 1 +  assigned to
M1 has improvement ratio arbitrarily close to 2 

1
m.

The above bound is tight, as demonstrated in Figure 4 for m = 3 (where the im1
provement ratio is 2  m
= 35 ). Moreover, this figure shows that this lower bound can be
generalized for any m  3. Note that the coalitional deviation in this example obeys the
flower structure. We believe that this example is tight, as the flower structure seems to
enable the largest possible decrease in the load of a single machine. The job of load 1 + 
that remains on M1 improves its cost from 2m  1 +  to m(1 + ), that is, for this job, j,
1
IR(j) = 2m1+
m(1+) = 2  m  . Formally,
Theorem 4.3 For any m  3, there exists an LPT configuration s such that IR max (s) =
1
2 m
  for an arbitrarily small  > 0.

5. Maximum Damage Ratio
In this section, we provide results for the maximum damage a profitable deviation can
impose on jobs that do not take part in the coalition. Formally, the quality of a configuration is measured by maxj6 DR(j). We provide a complete analysis for NE and LPT
configurations and any m  3. Once again, we find that LPT provides a strictly better
performance guarantee compared to general NE: the cost of any job in an LPT schedule
cannot increase by a factor 32 or larger, while it can increase by a factor arbitrarily close to
2 for NE schedules.
Theorem 5.1 For any m, DR max (s) < 2 for every NE configuration s.
Proof: Let s0 = (s0 , s ) be a profitable deviation, and let M1 be the most loaded machine
among the machines that either a job migrated from or a job migrated into. By Observation 2.4, there must be a job that migrated out of M1 . This implies that there must be at
least two jobs on M1 in s, since if there were a single job, it could not benefit from any
deviation. Therefore, there exists a job j such that sj = M1 and pj  L1 /2. Using the fact
that s is an NE once again, we get that for any machine i 6= 1, Li  L1 /2 (otherwise job j
can improve by unilaterally migrating to Mi ).
In addition, for every machine i to which a job migrates, it must hold that L0i < L1 . This
is because a job that migrated to Mi left some machine j with load Lj  L1 . Combining

399

fiFeldman & Tamir

the above bounds, we get that for every job j that stays on some machine i to which a job
0
migrates it holds that DRs,s (j) = L0i /Li < L1 /Li  (2Li )/Li = 2.

The above analysis is tight as shown in Figure 3: The damage ratio of the jobs of load
2r  1 is (4r  1)/(2r), which can be arbitrarily close to 2. Formally,
Theorem 5.2 For any m  3, there exists an NE configuration s such that DR max (s) =
2   for an arbitrarily small  > 0.
For LPT configurations we obtain a smaller bound:
Theorem 5.3 For any m, DR max (s) <

3
2

for every LPT configuration s.

Proof: Let s0 = (s0 , s ) be a profitable deviation, and let M1 be the most loaded machine
among the machines that either a job migrated from or a job migrated into. Since every
LPT configuration is an NE, M1 must have at least two jobs (following the same arguments
as in the proof of Theorem 5.1). Assume w.l.o.g that the lightest (also last) job assigned
to M1 has load 1, and denote this job the 1-job. This assumption is valid because the
minimum improvement ratio is invariant to linear transformations. Let ` = L1  1. Since s
is an LPT configuration, for every machine i, it must hold that Li  ` (otherwise, the 1-job
would have been assigned to a different machine). In addition, since for every machine j
from which a job migrates, Lj  L1 , it must hold that for every machine i to which a job
migrates L0i < ` + 1. We distinguish between two cases.
3
case (a): `  2. Then, for every machine Mi to which a job migrates, L0i /Li < `+1
`  2.
case (b): ` < 2. We show that no profitable deviation exists in this case. If ` < 2, then
M1 has exactly 2 jobs, of loads ` and 1, since LPT assigns the jobs in a non-increasing order.
By LPT, every other machine must have (i) one job of load at least ` (and possibly other
small jobs), or (ii) two jobs of load at least 1 (and possible other small jobs). Let k and k 0
be the number of machines of type (i) and (ii), respectively (excluding M1 ). Thus, there is
a total of k + 1 jobs of load ` and 2k 0 + 1 jobs of load 1. After the deviation, no machine can
have jobs of load ` and 1 together, nor can it have three jobs of load 1. The k + 1 machines
assigned with the k + 1 jobs of load ` after the deviation cannot be assigned any other job
of load x. So, we end up with 2k 0 + 1 jobs of load 1 that should be assigned to k 0 machines.
Thus, there must be a machine with at least three jobs of load 1. Contradiction.

M3

1+2

1+

2+3

M3

1+2

1

M2

1+2

1+

2+3

M2

1+2

1+3

M1

1+3

1

3+3

M1

1+

1

(a)

1+

1

3+2
2+5
2+2

(b)

Figure 5: An LPT-originated deviation, in which the damage ratio of the job of load 1 + 2 on M3
is arbitrarily close to 32 .

The above analysis is tight as shown in Figure 5. Moreover, by adding dummy machines
and jobs it can be extended to any m  3. Formally,
400

fiApproximate Strong Equilibrium

Theorem 5.4 For any m  3, there exists an LPT configuration s such that DR max (s) =
3
2   for an arbitrarily small  > 0.

6. Approximation Scheme
In this section we present a polynomial time approximation scheme that provides a (1 + )SE. The PTAS can be applied to any fixed number of machines.
Definition 6.1 A vector (l1 , l2 , . . . lm ) is smaller than (l1 , l2 , . . . lm ) lexicographically if for
some i, li < li and for all b < i, lb = lb . A configuration s is lexicographically smaller than
s if the vector of machine loads L(s) = (L1 (s), . . . , Lm (s)), sorted in non increasing order,
is smaller lexicographically than L(s), sorted in non increasing order.
The PTAS combines a lexicographically minimal assignment of the longest k jobs with
the LPT rule applied to the remaining jobs. The value of k depends on the desired approximation ratio (to be defined later).
Formally, the algorithm Ak is defined as follows:
1. Find a lexicographically minimal assignment of the longest k jobs.
2. Add the remaining jobs greedily using the LPT rule.
In particular, since a lexicographically minimal assignment minimizes the makespan
(given by the load on the most loaded machine), the above algorithm is a PTAS for the
minimum makespan problem, as it is a restriction of the known PTAS of Graham (1966).
In Grahams algorithm, in step 1, the first k jobs are scheduled in a way that minimizes the
makespan. In our scheme, the requirement on the schedule of the long jobs is more strict.
In particular, as shown by Andelman et al. (2007), the schedule of the longest k jobs is an
SE of this sub-instance.
 
Given , let A denote the above algorithm with k = m
 . We first show that for any
subset of machines M  M , A provides a (1 + )-approximation to the makespan of the
subset of jobs scheduled on M . Formally,
Lemma 6.2 Let I = hN, M i be an instance of job scheduling with machines M and jobs
N . Let s be an output of A on I. For a given M  M , let N  N be the set of jobs
scheduled on M in s. Consider the instance I = hN , M i. Let s be the assignment of I

induced by s. Then s is (1 + )-approximation for the makespan of I.

Proof: Let LA
max (M ) denote the largest completion time of a machine in a set M in the
schedule produced by A , and let OP T (I) denote the minimum makespan of I. Let T
denote the largest completion time of a long job in N scheduled on M in the minimal
lexicographic schedule found in step 1. Since s is a minimal lexicographic assignment, T is

the minimum makespan of the long jobs of N . In particular, T is a lower bound for OP T (I),
A

thus, if the makespan on M is not increased in the second step, that is, Lmax (M ) = T ,
 Otherwise, the makespan of M is larger than T . Let j be the job
then A is optimal for I.
determining the makespan of M (the job who completes last in N ). By definition of LPT,
this implies that all the machines M were busy when job j started its execution (otherwise

401

fiFeldman & Tamir

job j could start earlier). Since the optimal schedule from step 1 has no intended idles, it

holds that all the machines M are busy during the time interval [0; LA
max (M )  pj ]
Pn
Let P =
j=1 pj be the total processing time of the n jobs in N . By the above,
A

P  m(Lmax (M )  pj ). Also, since the jobs are sorted in non-increasing order of processing

times, we have that pj  pk+1 and therefore P  m(LA
max (M )  pk+1 ). A lower bound for

the optimal solution of I is a schedule in which the load on the m machines is balanced;


  P /m, which implies that LA
thus OP T (I)
max (M )  OP T (I) + pk+1 .
A


In order to bound Lmax (M ) in terms of OP T (I), we need to bound pk+1 in terms of
 We first bound the gap between OP T (I) and OP T (I).
 The following assumption
OP T (I).
is used.
Claim 6.3 Let z be the job determining the makespan of A (I). W.l.o.g., z is not one of
the k long jobs.
Proof: Assume that the makespan of A (I) is determined by one of the long jobs. Let M1
be the machine on which z is scheduled. In particular, M1 processes only long jobs. Fix the
schedule on M1 and repeat the PTAS for the remaining jobs and machines with the same
value of k. Repeat if necessary until the makespan is determined by a job assigned using
the LPT rule.
Note that the above algorithm is still polynomial, as the PTAS might be repeated at
most m  1 times, which is a constant. The approximation ratio is improving for any subinstance: same number of jobs are considered long, but among a set of fewer jobs, that is,
a larger portion of the jobs is scheduled optimally, therefore the approximation ratio proof
is valid for the sub-instance. Finally, by merging the last PTAS result with the schedule on
the machines holding long jobs only, we get a PTAS for the whole instance, since the long
jobs were scheduled optimally in each step. Moreover, the load on each such machine is a
lower bound on the makespan of the sub-instance that was considered when the machine
gets these jobs.

 + pk+1 .
Claim 6.4 OP T (I)  OP T (I)
Proof: Let z be the job determining the makespan of A (I). By Claim 6.3, z can be assumed

to be assigned in step 2 (by LPT rule). If z  N then A (I) = LA
max (M ). Else, the load on
any machine in M is at least A (I)  pz , since otherwise job z should have been assigned
to one of the machines in M . Therefore, even if the total load of N is balanced among
  A (I)  pz . Since pz  pk+1 , and OP T (I)  A (I), we get
M , we have that OP T (I)
 + pk+1 .
OP T (I)  A (I)  OP T (I)


Claim 6.5 pk+1  OP T (I)

m
k .

Proof: Consider the k + 1 longest jobs. In an optimal schedule, some machine is assigned at
least d(k + 1)/me  1 + bk/mc of these jobs. Since each of these jobs has processing
time at least pk+1 , we conclude that OP T (I)  (1 + bk/mc)pk+1 , which implies that

402

fiApproximate Strong Equilibrium

0
pk+1  OP T (I)/(1 + bk/mc). By Claim 6.4, pk+1 
 mOP
 T (I)/(1 + bk/mc)  (OP T (I ) +

pk+1 )/(1 + bk/mc). It follows that pk+1  OP T (I)

k .
A
A





Back to the
on Lmax (I), we can now conclude that Lmax (I)  OP T (I) + pk+1 
 mbound


 + ).
OP T (I)(1 + k ) = OP T (I)(1

We can now prove the main result of this section, showing that the schedule s produced
by A , is a (1 + )-SE. The stability is proved in the following theorem. As for the running
time, for fixed m, k, a minimal lexicographic schedule of the first k jobs can be found in
O(mk ) steps. Applying the LPT rule takes additional O(nlogn). For A , we get that the
running time of the scheme is O(mm/ ), that is, exponential in m (that is assumed to be
constant) and 1/.

Theorem 6.6 A produces an (1 + )-SE.
Proof: The proof is similar to the proof of Lemma 3.8. Assume for contradiction that there
exists an instance I for A on m machines, such that in the schedule of I produced by
A , there exists a coalition in which the improvement ratio of every member is larger than
1 + . Let  be such a coalition of minimum size. For every machine from which a job
j migrates, there must exists a job migrating to it, otherwise,  \ {j} is also a coalition
having IR min > 1 + , in contradiction to the minimality of . Let M denote the set of
machines that are part of the coalition, let N  N be the set jobs assigned to M by A ,
and let m = |M |. Consider the instance I = hN , M i, and the schedule s  s. By Lemma
 The coalition  exists in s, and all
6.2, s is a (1 + )-approximation to the makespan of I.
the machines M take part in it. Moreover, each of the jobs in  improves by a factor of
more than (1 + ). In other words, for any pair of machines i, j, such that Pi,j = 1, we have
Li /L0j > 1 + . On the other hand, since s is a (1 + )-approximation, for any machine i,

T (I)
 Therefore, if Pi,j = 1 then 1 +  < L0i  (1+)OP
. In other words,
Li  (1 + )OP T (I).
0
Lj

Lj


for any machine j that receives at least one job,
< OP T (I).
However, since at least one job has migrated to each of the m participating machines,
after the deviation the machines M are assigned all the jobs of N and they all have load
 A contradiction.
less than OP T (I).

We note that for any   0, the schedule produced by algorithm A is an NE. Similar
to the stability proof of LPT (Fotakis et al., 2002), it is easy to verify that if some job
can benefit from leaving some machine Mi then also the shortest job on this machine can
benefit from the same migration. However, independent of whether this short job, of length
pj , is assigned in step 1 of the algorithm (as part of a minimal lexicographical schedule of
the long job) or in step 2 (by LPT), the gap between Li and the load on any other machine
is at most pj .
L0j

7. Computational Complexity
It is easy to see that one can determine in polynomial time whether a given configuration
is an NE. Yet, for SE, this task is more involved. In this section, we provide some hardness
results about coalitional deviations.
Theorem 7.1 Given an NE schedule on m  3 identical machines, it is NP-hard to determine if it is an SE.
403

fiFeldman & Tamir

M3

B-1

B-2

2B-3

M3

B-1

Jobs of A1

2B-1

M2

B-1

B-2

2B-3

M2

B-1

Jobs of A2

2B-1

2B

M1

B-2

2B-4

M1

Jobs of A

B-2
(b)

(a)

Figure 6: Partition induces a coalition in a schedule on identical machines.

Proof: We give a reduction from Partition. Given a set A of n integers a1 , . . . , an with
total size 2B, and the question whether there is a subset of total size B, construct the
schedule in Figure 6(a). In this schedule on three machines there are n + 4 jobs of loads
a1 , . . . , an , B  2, B  2, B  1, B  1. We assume w.l.o.g. that mini ai  3, else the whole
instance can be scaled. Thus, schedule 6(a) is an NE. For m  3, add m  3 machines each
with a single job of load 2B.
Claim 7.2 The NE schedule in Figure 6(a) is an SE if and only if there is no partition.
Proof: If there is a partition into K1 , K2 , each having total size B, then the schedule in
Figure 6(b) is better for the jobs originated from the partition instance and for the two
(B  2)-jobs. All the partition jobs improved from cost 2B to cost 2B  1, and the (B  2)jobs improved from 2B  3 to 2B  4.
Next, we show that if there is no partition then the initial schedule is an SE. By Theorem 2.7, in any action of a coalition on three machines, jobs must migrate to M1 from both
M2 and M3 . In order to decrease the load from 2B  3, the set of jobs migrating to M1
must be the set of two jobs of load B  2. Also, it must be that all the partition jobs move
away from M1 - otherwise, the total load on M1 will be at least 2B  4 + 3 = 2B  1, which
is not an improvement for the (B  2)-jobs. This implies that the jobs of M1 split between
M2 and M3 . However, since there is no partition, one of the two subsets is of total load at
least B + 1. These jobs will join a job of load B  1 to get a total load of at least 2B, which
is not an improvement over the 2B-load in the initial schedule.

This establishes the proof of the Theorem.

A direct corollary of the above proof is the following:
Corollary 7.3 Given an NE schedule and a coalition, it is NP-hard to determine whether
the coalition can deviate.
Theorem 7.1 holds for any m  3 identical machines. For m  2, a configuration is an
NE if and only if it is an SE (Andelman et al., 2007), and therefore it is possible to determine
whether a given configuration is SE in polynomial time. Yet, the following theorem shows
that for the case of unrelated machines, the problem is NP-hard already for m = 2. In the
unrelated machines environment, the processing time of a job depends on the machine on
which it is assigned. For every job j and machine i, pi,j denotes the processing time of job
j if processed by machine i.
Theorem 7.4 Given an NE schedule on m  2 unrelated machines, it is NP-hard to
determine if it is an SE.
404

fiApproximate Strong Equilibrium

Proof: We give a reduction from Partition. Given n integers a1 , . . . , an with total size
2B, and the question whether there is a subset of total size B, construct the following
instance for scheduling: there are 2 machines and n + 1 jobs with the following loads (for
 < 1/(n  1)):
pi,1 = ai +  and pi,2 = 2ai + , i  {1, . . . , n} ; pn+1,1 = B, and pn+1,2 = 2B + n.
Consider the schedule in which all the jobs 1, . . . , n are on M1 , and job n + 1 is on M2 . The
completion times of both machines are are 2B + n. It is an NE.

M2

Jn+1

2B+n

M2

M1

J1,,Jn

2B+n

M1

(a)

2B+|A2|

Jobs of A2
Jobs of A1

Jn+1

2B+|A1|

(b)

Figure 7: Partition induces a coalition in a schedule on related machines.

Claim 7.5 The NE schedule in Figure 7(a) is an SE if and only if there is no partition.
Proof: If there is a partition into A1 , A2 , each having total size B, then the schedule given
in Figure 7(b) is better for everyone. The completion time of M1 is 2B + |A1 | < 2B + n
and the completion time of M2 is 2B + |A2 | < 2B + n.
Next, we show that if there is no partition then the initial schedule is an SE. Since there
is no partition, in any partition into A1 , A2 , one of the two subsets, w.l.o.g., A1 has total
size at least B + 1. A1 will only increase its load by migrating to M2 even alone (bearing
a load of at least 2B + 2 + |A1 | instead of 2B + n). Therefore, A1 will not leave M1 .
However, if A1 stays at M1 , job n + 1 is better-off staying at M2 (since if it migrates, it
bears a load of at least 2B + 1 + |A1 | which is not smaller than 2B + n for any |A1 | and
  1/(n  1)).

This establishes the proof of the Theorem.

A direct corollary of the above proof is the following:
Corollary 7.6 Given an NE schedule on unrelated machines and a coalition, it is NP-hard
to determine whether the coalition can deviate.

8. Conclusions and Open Problems
In this paper we study how well NE schedules and a special subset of them  those obtained
as an outcome of the LPT assignment rule  approximate SE in job scheduling games. We
do so using the two measures IR min and IR max . In addition, we use the DR max measure to
study how hurtful coalitional deviations can be to agents outside the coalition. We present
upper and lower bounds for NE and LPT-based schedules, and demonstrate that LPTbased schedules perform better than general NE schedules, where the gap is more significant
under the IR max measure. For both NE and LPT, IR min is bounded by a small constant,
405

fiFeldman & Tamir

implying some notion of stability against coalitional deviations (assuming the existence of
a transition cost). As for IR max , it is bounded by a constant for LPT schedules, but there
is no universal bound for NE schedules. Yet, LPT is not the best possible approximation
to SE, as demonstrated by the SE-PTAS we design, which computes a schedule with IR min
arbitrarily close to 1.
Some of the problems that remain open are:
1. For the IR min measure, there is a gap between the upper and lower bounds for m > 4 6 .
1
2. For IR max of LPT-originated deviations, and m  3 we presented a lower bound of 2 m
5
and a matching upper bound of 3 for m = 3. Closing this gap for a general m is left as an
open problem.
3. This paper focuses on the case of identical machines. It would be interesting to study the
topic of approximate strong equilibrium in additional job scheduling settings. In particular,
the setting of uniformly related machines is part of our ongoing research, where already
the case of two machines seems rather involved. Note that, as mentioned in Section 7, for
unrelated machines, IR min is unbounded already for two machines.
4. Our measures are defined with respect to the strong equilibrium solution concept, where
a profitable deviation is defined as one in which every member of the coalition strictly
benefits. It would be interesting to consider the measures we introduce here with respect
to additional solution concepts, such as coalition-proof Nash equilibrium (Bernheim et al.,
1987) (which is stable against profitable deviations that are themselves stable against further
deviations of sub-coalitions), and also with respect to profitable deviations in which none
of the coalition members is worse-off and at least one member is strictly better-off.
In summary, we introduced three general measures for the stability and performance
of schedules under coalitional deviations. We believe that these measures can be used
to measure the stability and performance of various algorithms to coalitional deviations
and their performance in additional settings and games. We hope to see more work that
makes use of these measures within the framework of algorithmic game theory. It would be
interesting to study in what families of games Nash equilibria approximate strong equilibria
as defined by the measures introduced here.
Acknowledgments. We thank Leah Epstein and Alon Rosen for helpful discussions. We
also thank the anonymous reviewers for their insightful remarks and suggestions. The work
was partially supported by the Israel Science Foundation (grant number 1219/09).

Appendix A. Bounding IR min and IR max in LPT-originated Deviations
We first provide several observation that are valid for any LPT-originated deviation. This
observations will be used later in the analysis. Moreover, the observations characterize the
coalitions that might exist in schedules produced by the LPT-rule. Combined with the
flower structure (that characterizes all NE-originated deviations on three machines), we
get that the set of LPT-originated deviation are very limited and must follow a very strict
structure.
Let M1 be the most loaded machine. Assume w.l.o.g that the lightest (also last) job
assigned to M1 has load 1, and denote this job the 1-job. This assumption is valid because
6. Our paper provides tight bounds for m = 3 and the case of m = 4 is considered by Chen (2009).

406

fiApproximate Strong Equilibrium

the minimum improvement ratio is invariant to linear transformations. For i = 2, 3, denote
by Ki the set (and also the total load) of jobs that remain on Mi . Denote by Hi,j the set
(and also total load) of jobs migrating from Mi to Mj . For i = 1, we let K1 , H1,2 , H1,3 be
as above, but excluding the 1-job.
The next propositions show that the total size of jobs migrating from M2 , M3 to M1
and remaining on M2 , M3 is at least as large as the last job on M1 .
Proposition A.1 Each of H2,1 , H3,1 is at least 1.
Proof: We show that H2,1  1, the proof for H3,1 is analogous. Assume for contradiction
that H2,1 < 1. Since LPT schedule the jobs in non-increasing order, all jobs composing
H2,1 were assigned after the 1-job. Therefore, when the 1-job is assigned, the load on M2 is
at most K2 and at least H1,2 + H1,3 + K1 (else, LPT would assign the 1-job to M2 ). Thus,
K2  H1,2 + H1,3 + K1 . By the flower structure, some job is migrating from M1 to M2 .
Such a migration is beneficial only if L02 < L1 . Distinguish between two cases:
1. The 1-job migrates to M2 . In this case, L02 = K2 + H1,2 + 1. Therefore, K2 +
H1,2 + 1 < H1,2 + H1,3 + K1 + 1, or K2 < H1,3 + K1 . However, by the above,
K2  H1,2 + H1,3 + K1  H1,3 + K1 . A contradiction.
2. The 1-job does not migrate to M2 . In this case, L02 = K2 + H1,2 . Therefore, K2 +
H1,2 < H1,2 + H1,3 + K1 + 1, or K2 < H1,3 + K1 + 1. However, by the above,
K2  H1,2 + H1,3 + K1  1 + H1,3 + K1 . A contradiction. The last inequality follows
from the fact that H1,2 is not empty and consists of at least one job at least as big as
the smallest job on M1 .

Proposition A.2 Each of K2 , K3 is at least 1.
Proof: We first show K2  1. Assume K2 < 1, it means that when the 1-job is assigned
to M1 , the load on M2 is composed of jobs that are a subset of H2,1 only. Therefore, by
the LPT rule, H2,1  K1 + H1,2 + H1,3 . However, by Proposition 2.8, L02 > L2 , therefore
H2,1 < H1,2 + 1. Thus, K1 + H1,3 < 1. However, H1,3  1. A contradiction. To show
K3  1, note that if K3 > 1 then by a similar argument to the above H3,1  H1,2 + H1,3 . By
Proposition 2.8, L03 > L3 . Therefore H1,3 > H3,1 , implying K1 + H1,2 < 0. A contradiction.



Theorem 3.4 Any LPT configuration on three machines is a ( 21 + 46  1.1123)-SE.
Proof: Let M1 be the most loaded machine in the schedule. Recall that the lightest (also
last) job assigned to M1 is a 1-job having load 1. Let ` = L1  1. For a give LPT schedule
s and a deviation s0 = (s0 , s ), let r = IR min (s, s0 ).
By Claim 2.6,  obeys the flower structure. Therefore:
(i) r  L2 /L01 ; (ii) r 
P
0
0
0
L3 /L1 ; (iii) r  L1 /L2 ; and (iv) r  L1 /L3 . Let P = j pj , Clearly, P = L1 + L2 + L3 =
L01 + L02 + L03 . Summing up (i) and (ii), we get
L01 

L2 + L3
P  (` + 1)
=
.
2r
2r
407

(1)

fiFeldman & Tamir

By LPT, L2 , L3  `, thus P  3` + 1. Summing up (iii) and (iv), and using Equation (1)
we get
r

2L1
2(` + 1)
2(` + 1)
=

0
0
1
+ L3
P  L1
P (1  2r
)+

L02

Implying,
r(3` + 1) 

`+1
2r



2(` + 1)
1
(3` + 1)(1  2r
)+

`+1
2r

.

3` + 1 ` + 1
+
 2` + 2
2
2

and,
r

3` + 2
.
3` + 1

(2)

Case 1: `  3. In this case, Equation (2) implies r  1.1.
Case 2: ` < 3. This case requires a closer analysis. Let I be an instance for which LPT
creates a schedule with a deviation s0 = (s0 , s ) achieving the maximal IR min and ` < 3.
For i = 2, 3, denote by Hi the total load of jobs migrating from Mi to M1 , and by Ki the
total load of jobs that remain on Mi . By the flower structure, L01  H2 + H3 , therefore
H2 < K3 and H3 < K2 , else it would not be beneficial for the jobs composing H2 , H3 to
join the coalition. By Propositions A.1 and A.2, each of H2 , H3 , K2 , K3 is at least 1.
Claim A.3 The load ` on M1 is incurred by exactly two jobs.
Proof: Clearly, since we consider the case ` < 3 and the lightest job on M1 has load 1, the
load ` is incurred by at most two jobs. Assume for contradiction that ` consists of a single
job. Then, there are exactly two jobs on M1 , of loads ` and 1. By the flower structure, the
`-job must join the coalition. W.l.o.g assume it migrates to M2 . This migration is profitable
only if K2 < 1, contradicting Proposition A.2.

Therefore, we can assume w.l.o.g that in the instance achieving the maximal IR min , M1
is assigned three jobs of loads 1 + , 1 + , 1, for ,   0.
Having ` = 2 +  + , the bound in Equation (2) implies
r

8 + 3( + )
3` + 2
=
.
3` + 1
7 + 3( + )

(3)

Consider first the case in which one of the two big jobs on M1 does not migrate away
from M1 . We show that no coalition deviation is beneficial in this case. W.l.o.g, assume
that the job of length 1 +  remains on M1 and the job of length 1 +  migrates to M2 .
The migration of 1 +  is profitable only if K2 < 2 + . On the other hand, the migration
of the jobs migrating from M2 to M1 is profitable only if K2 > H3 + 1 +   2 + . A
contradiction.
Consider next the case in which the 1-job does not migrate away from M1 . W.l.o.g,
assume that the job of length 1 +  migrates to M2 and the job of length 1 +  migrates to
M3 . In order to bound r according to Equation (3), we find a lower bound for ( + ). By
Equation (1),
2r 

L2 + L3
K2 + H2 + K3 + H3
K2 + K3 + 2
6++
=


.
0
L1
1 + H2 + H3
3
3
408

(4)

fiApproximate Strong Equilibrium

The third inequality is due to the fact that the ratio is decreasing with H2 + H3 , which is
known to be at least 2 by Proposition A.1. The last inequality is since the migrations are
beneficial for the jobs leaving M1 , that is, K2 < 2 + , and K3 < 2 + .
Equation (4) implies 6r < 6 +  +  or  +  > 6r  6. Next, we apply this bound on
 +  into Equation (3) and obtain
r<

18r  10
.
18r  11



6
1
This implies r < 10
9 < 2 + 4 .
The case we did not analyze yet is the one in which all three jobs assigned to M1 migrate
away from M1 in the deviation. Assume w.l.o.g that the jobs of size 1+ and 1 are migrating
to M2 and the job of size 1 +  is migrating to M3 . Clearly, the jobs of size 1 + , 1 +  do
not migrate to the same machine because they are currently assigned with additional load
of 1 while both K2 and K3 are at least 1, by Proposition A.2. Figure 8 shows the schedule
before the migration (Figure 8(a)) and after the migration (Figure 8(b)).

M3

K3

H3

M2

K2

H2

M1

1+

1+

l

1

K3+H3

M3

K2+H2

M2

K2

1+

3+ + 

M1

H2

H3

K3

1+

K3+1+ 
1

K2+2+ 
H2+H 3

(b)

(a)

Figure 8: An LPT coalition achieving maximal IR min .
Next, we find a lower bound for  + . Considering the migration from M1 to M2 ,
we know that r  (3 +  + )/(2 +  + K2 ). Therefore  +   2r + r + K2 r  3 
2r + rK2  3 (because   0). Considering the migration from M2 to M1 , we know that
r  (K2 + H2 )/(H2 + H3 ). Therefore, K2  H2 (r  1) + H3 r. LPT assigns the 1-job
on M1 with load 2 +  + , while the load on M2 at that time was at most K2 + H2 .
Therefore 2 +  +   K2 + H2 , implying H2  2 +  +   K2 . Also, by Proposition A.1,
H3  1. We can now use these bounds on H2 , H3 to get improved bound on K2 . Specifically,
K2  (2 +  +   K2 )(r  1) + r. This implies K2 r  3r + r( + )  (2 + ( + )). Back
to the bound of  + , we now have  +   2r + 3r + r( + )  (2 + ( + ))  3. Thus,
 +   (5r  5)/(2  r). Note that (2  r) is positive since by Theorem 3.1, r < 5/4.
Finally, we apply this bound on  +  into Equation (3) and obtain
r

1 + 7r
8 + 3(5r  5)/(2  r)
=
.
7 + 3(5r  5)/(2  r)
1 + 8r



This implies r  12 + 46 .

The above bound is tight. Specifically,

Theorem 3.5 For any m  3, there exists an LPT schedule s such that IR min (s) = 12 + 46 .

6
1
+
2
4 , and consider Figure 8,
r(3+)2
, H2 = 2 +   K2 , K3 = 1
r


10+5
 6,
6 6

Proof: Let r =

where we substitute  =

K2 =

+ , and H3 = 1 (the instance with the

409

 = 0,

fiFeldman & Tamir

rounded values appears in Figure 9). It is easy to verify that all three jobs leaving M1 have
improvement ratio of exactly r = 12 + 46 , and the same holds for the two jobs migrating


to M1 . Thus, in this instance IR min = 12 + 46 . Moreover, this lower bound can be easily
extended to any m > 3 by adding dummy jobs and machines. Thus,
M3

1.633

1

2.633

M3

M2

1.367

1.266

2.633

M2

1.266

M1

1.633

1

3.633

M1

1.367

1

1.633
1

1.633

3.266

1

3.266

1

2.367

(b)

(a)

Figure 9: An LPT-originated
deviation on three machines in which all migrating jobs im
6
1
prove by 2 + 4 .


Theorem 4.2 Let s be an LPT schedule on three machines. It holds that IR max (s)  53 .
Proof: Let M1 be the most loaded machine. Recall that the lightest (also last) job assigned
to M1 is a 1-job having load 1. For i = 2, 3, Ki is the set (and also the total load) of jobs
that remain on Mi , and Hi,j is the set (and also total load) of jobs migrating from Mi to
Mj . For i = 1, we let K1 , H1,2 , H1,3 be as above, but excluding the 1-job.
The 1-job is assigned to M1 by LPT, meaning that the load on M2 and M3 is at least
K1 + H1,2 + H1,3 at that time. Since the load on M2 , M3 could only increase after the time
the 1-job is assigned, we get that
K1 + H1,2 + H1,3  K2 + H2,1

and

K1 + H1,2 + H1,3  K3 + H3,1 .

(5)

Therefore (sum up the two):
2(K1 + H1,2 + H1,3 )  K2 + K3 + H2,1 + H3,1 .

(6)

Distinguish between two cases:
(i) The 1-job remains on M1 . In This case, L1 = K1 + H1,2 + H1,3 + 1; L2 =
K2 +H2,1 ; L3 = K3 +H3,1 , while after the coalition is active L01 = K1 +H2,1 +H3,1 +1; L02 =
K2 + H1,2 ; L03 = K3 + H1,3 .
Since the jobs in H1,2 and H1,3 are part of the coalition, L02 + L03 < 2L1 . Deducing
H1,2 and H1,3 from both sides we get K2 + K3 < H1,2 + H1,3 + 2K1 + 2. Combining with
Equation 6, we get:
H1,2 + H1,3 < H2,1 + H3,1 + 2.
(7)
By Proposition A.1, each of H2,1 , H3,1 , K2 , K3 is at least 1. By Proposition 2.9, the
improvement ratio of the 1-job, which equals L1 /L01 , is the largest among the coalition.
This ratio can now be bounded as follows:
K1 + H1,2 + H1,3 + 1
K1 + H2,1 + H3,1 + 3
L1
5
=
<
 .
0
L1
K1 + H2,1 + H3,1 + 1
K1 + H2,1 + H3,1 + 1
3
410

fiApproximate Strong Equilibrium

The left inequality follows from Equation 7. The right one follow from Proposition A.1 and
from the fact that K1 might be empty.
(ii) The 1-job leaves M1 . We assume w.l.o.g that the 1-job moves to M2 . In This
case, L1 = K1 + H1,2 + H1,3 + 1; L2 = K2 + H2,1 ; L3 = K3 + H3,1 , while after the coalition
is active L01 = K1 + H2,1 + H3,1 ; L02 = K2 + H1,2 + 1; L03 = K3 + H1,3 .
Since the jobs in H1,2 and H1,3 are part of the coalition, L02 + L03 < 2L1 . Deducing
1, H1,2 and H1,3 from both sides we get K2 + K3 < H1,2 + H1,3 + 2K1 + 1. Combining with
Equation 6, we get:
H1,2 + H1,3 < H2,1 + H3,1 + 1.
(8)
By Propositions A.1 A.2, each of H2,1 , H3,1 , K2 , K3 is at least 1. If K1 is not empty
then the jobs of K1 have improvement ratio L1 /L01 which is, by Proposition 2.9, the largest
ratio among the coalition. This ratio can now be bounded as follows:
K1 + H1,2 + H1,3 + 1
K1 + H2,1 + H3,1 + 2
L1
5
=

< .
0
L1
K1 + H2,1 + H3,1
K1 + H2,1 + H3,1
3
The left inequality follows from Equation 8. The right one follows from Proposition A.1,
and from the fact that K1 is not empty and includes at least one job of load at least 1.
If K1 is empty, then as we show below, the maximal improvement ratio is less than 3/2.
We bound separately the improvement ratio of H1,2 , H1,3 , and Hi,1 (i  {1, 2}). Denote
by ri,j the IR of jobs moving from Mi to Mj . In addition to Equations 5 and 8, and to
Propositions A.1 and A.2, we also use below Proposition 2.8. Specifically, H2,1 < H1,2 + 1
and H3,1 < H1,3 . Finally, bear in mind that K1 = .
r1,2 =

H1,2 + H1,3 + 1
K2 + H2,1 + 1
K2 + H2,1 + 1
3
L1
=

<
< .
0
L2
K2 + H1,2 + 1
K2 + H1,2 + 1
K2 + H2,1
2

r1,3 =

H1,2 + H1,3 + 1
K3 + H3,1 + 1
K3 + H3,1 + 1
3
L1
=

<
< .
0
L3
K3 + H1,3
K3 + H1,3
K3 + H3,1
2

ri,1 =

Ki + Hi,1
H1,2 + H1,3
H2,1 + H3,1 + 1
Li
3
=
<
<
< .
0
L1
H2,1 + H3,1
H2,1 + H3,1
H2,1 + H3,1
2


Appendix B. List Scheduling
List Scheduling (LS) is a greedy scheduling algorithms in which the jobs are assigned to the
machines in arbitrary order, but similar to LPT, each job is assigned to the least loaded
1
machine at the time of assignment. LS is known to provide a (2  m
)-approximation to
the minimum makespan (Graham, 1966). While LS does not depart qualitatively from
LPT with respect to makespan approximation (i.e., both provide a constant approximation
to the optimal makespan), they are qualitatively different with respect to game theoretic
properties. First, LS does not necessarily produce an NE. Moreover, as we next show, LS
performs poorly with respect to the measures introduced in this paper.
The improvement ratio of a job is not bounded even if the coalition consists of a single
job. Consider for example an instance with 2 machines and jobs of lengths 1, 1, X (in that
411

fiFeldman & Tamir

order) such that X > 1. LS will produce a schedule with loads 1, 1 + X. The job of length
1 scheduled with the long job can migrate and join the other short job. Its improvement
ratio is 1 + X/2 which can be arbitrarily large.
The damage ratio of a deviation from an LS schedule is not bounded either. Consider
an instance with three machines and jobs of lengths {1  2, 1  , 1, 2, X, 2, 3}. It is easy
to verify that in the resulting LS-configuration, there exists a coalition in which the job of
length X migrates. Since X can be arbitrarily large, the damage ratio of the job in the
machine into which X migrates is arbitrarily large. We note that the damage ratio caused
by a deviation of a single job is at most 2. To see this, consider an LS configuration and
assume that a job j of length pj migrates from M1 to M2 . Denote by Bj , Aj the total
load of jobs on M1 that were assigned before and after j respectively. If Aj = 0 (j is last)
then it is not beneficial for j to migrate (Bj < L2 , else j should have been assigned to
M2 ). Else, the first job after j was assigned to M1 because Bj + pj was less than the load
at that time on M2 . Therefore L2  Bj + pj , and in particular pj  L2 . The damage
ratio is (L1 + pj )/L1  2. The analysis is tight as can be exemplified by the instance
m = 2, I = {1, 1, X}.

References
A. Fiat, H. Kaplan, M. L., & Olonetsky., S. (2007). Strong price of anarchy for machine
load balancing. In International Colloquium on Automata, Languages and Programming(ICALP).
Albers, S. (2009). On the value of coordination in network design. SIAM J. Comput., 38(6),
22732302.
Albers, S., Elits, S., Even-Dar, E., Mansour, Y., & Roditty, L. (2006). On Nash Equilibria for
a Network Creation Game. In Annual ACM-SIAM Symposium on Discrete Algorithms
(SODA).
Andelman, N., Feldman, M., & Mansour, Y. (2007). Strong Price of Anarchy. In SODA07.
Anshelevich, E., Dasgupta, A., Kleinberg, J. M., Tardos, E., Wexler, T., & Roughgarden, T.
(2004). The price of stability for network design with fair cost allocation.. In FOCS,
pp. 295304.
Anshelevich, E., Dasgupta, A., Tardos, E., Wexler, T., & Roughgarden, T. (2003). Nearoptimal network design with selfish agents. In ACM Symposium on Theory of Computing (STOC).
Aumann, R. (1959). Acceptable Points in General Cooperative n-Person Games. In Contributions to the Theory of Games, Vol. 4.
Awerbuch, B., Azar, Y., Richter, Y., & Tsur, D. (2003). Tradeoffs in Worst-Case Equilibria.
In 1st International Workshop on Approximation and Online Algorithms.
Bernheim, D. B., Peleg, B., & Whinston, M. D. (1987). Coalition-proof nash equilibria: I
concepts. Journal of Economic Theory, 42, 112.
Chen, B. (2009). Equilibria in load balancing games. Acta Mathematica Applicata Sinica,
to appear.
412

fiApproximate Strong Equilibrium

Christodoulou, G., Koutsoupias, E., & Nanavati, A. (2004). Coordination mechanisms. J.
Daz, J. Karhumaki, A. Lepisto, and D. Sannella (Eds.), Automata, Languages and
Pro- gramming, Volume 3142 of Lecture Notes in Computer Science. Berlin: Springer,
pp. 345357.
Christodoulou, G., & Koutsoupias, E. (2005). On the Price of Anarchy and Stability of
Correlated Equilibria of Linear Congestion Games. In Annual European Symposium
on Algorithms (ESA).
Czumaj, A., & Vocking, B. (2002). Tight bounds for worst-case equilibria. In ACM-SIAM
Symposium on Discrete Algorithms (SODA), pp. 413420.
Epstein, A., Feldman, M., & Mansour, Y. (2007). Strong Equilibrium in Cost Sharing
Connection Games. In ACM Conference on Electronic Commerce (ACMEC).
Fabrikant, A., Luthra, A., Maneva, E., Papadimitriou, C., & Shenker, S. (2003). On a
network creation game. In ACM Symposium on Principles of Distriubted Computing
(PODC).
Finn, G., & Horowitz, E. (1979). A linear time approximation algorithm for multiprocessor
scheduling. BIT Numerical Mathematics, 19 (3), 312320.
Fotakis, D., S. Kontogiannis, M. M., & Spiraklis, P. (2002). The Structure and Complexity of Nash Equilibria for a Selfish Routing Game. In International Colloquium on
Automata, Languages and Programming (ICALP), pp. 510519.
Graham, R. (1966). Bounds for certain multiprocessing anomalies. Bell Systems Technical
Journal, 45, 15631581.
Graham, R. (1969). Bounds on multiprocessing timing anomalies. SIAM J. Appl. Math.,
17, 263269.
Halpern, J. Y., & Teague, V. (2004). Rational secret sharing and multiparty computation.
In ACM Symposium on Theory of Computing (STOC), pp. 623632.
Holzman, R., & Law-Yone, N. (1997). Strong equilibrium in congestion games. Games and
Economic Behavior, 21, 85101.
Holzman, R., & Law-Yone, N. (2003). Network structure and strong equilibrium in route
selection games. Mathematical Social Sciences, 46, 193205.
Koutsoupias, E., & Papadimitriou, C. H. (1999). Worst-case equilibria.. In Symposium on
Theoretical Aspects of Computer Science (STACS), pp. 404413.
Lamport, L., Shostak, R., & Pease, M. (1982). The byzantine generals problem. ACM
Trans. Prog. Lang. Sys., 4, 382401.
Leonardi, S., & Sankowski, P. (2007). Network formation games with local coalitions. In
ACM Symposium on Principles of Distriubted Computing (PODC).
Milchtaich, I. (1998). Crowding games are sequentially solvable. International Journal of
Game Theory, 27, 501509.
Papadimitriou, C. H. (2001). Algorithms, games, and the internet. In ACM Symposium on
Theory of Computing (STOC), pp. 749753.

413

fiFeldman & Tamir

Procaccia, A. D., & Rosenschein, J. S. (2006). The communication complexity of coalition
formation among autonomous agents. In Int. Conference on Autonomous Agents and
Multiagent Systems (AAMAS), pp. 505512.
Roughgarden, T., & Tardos, E. (2002). How bad is selfish routing?. Journal of the ACM,
49 (2), 236  259.
Rozenfeld, O., & Tennenholtz, M. (2006). Strong and correlated strong equilibria in monotone congestion games. In Workshop on Internet and Network Economics (WINE).
Schuurman, P., & Vredeveld, T. (2007). Performance guarantees of local search for
multiproces- sor scheduling. INFORMS Journal on Computing, 19(1), 52  63.

414

fi