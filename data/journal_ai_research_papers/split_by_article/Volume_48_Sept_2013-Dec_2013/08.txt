Journal of Articial Intelligence Research 48 (2013) 783-812

Submitted 08/13; published 11/13

The Complexity of Optimal Monotonic Planning:
The Bad, The Good, and The Causal Graph
Carmel Domshlak
Anton Nazarenko

dcarmel@ie.technion.ac.il
anton.nazarenko@gmail.com

Faculty of Industrial Engineering & Management,
Technion - Israel Institute of Technology,
Haifa, Israel

Abstract
For almost two decades, monotonic, or delete free, relaxation has been one of the
key auxiliary tools in the practice of domain-independent deterministic planning. In the
particular contexts of both satiscing and optimal planning, it underlies most state-of-theart heuristic functions. While satiscing planning for monotonic tasks is polynomial-time,
optimal planning for monotonic tasks is NP-equivalent. Here we establish both negative and
positive results on the complexity of some wide fragments of optimal monotonic planning,
with the fragments being dened around the causal graph topology. Our results shed some
light on the link between the complexity of general optimal planning and the complexity
of optimal planning for the respective monotonic relaxations.

1. Introduction
In domain-independent deterministic (or classical) planning, the world states are represented by complete assignments to a set of variables, the operators allow for deterministic
modications of these assignments, and the objective is to nd a sequence of operators that
sequentially modies a given initial assignment to an assignment that satises a certain
predened goal property. In the last two decades, solvers for this problem have made spectacular advances in their empirical eciency, and this especially in the context of state-space
heuristic search planning techniques. This eciency has been made possible largely by the
ability to exploit monotonic, or delete-free, relaxations of the planning tasks (McDermott,
1999; Bonet & Gener, 2001; Homann & Nebel, 2001).
At a high level, monotonic relaxation replaces the regular value switching semantics of
planning operators with the value accumulating semantics. That is, if an operator switches
the value of a variable v from x to y, then the relaxed version of that operator extends
the value of v from {x} to {x, y}. The key point here is that applying operators under value
accumulating semantics does not reduce the applicability of operators in the future. Two
properties of monotonic relaxation make it especially valuable to automated planning. First,
while deterministic planning is PSPACE-complete even for rather conservative propositional
formalisms, planning for monotonic tasks is polynomial-time (Bylander, 1994), and thus can
be exploited for deriving heuristic estimates. Second, in numerous problems of practical
interest, plans for monotonic relaxations are not that distant from the true plans for these
problems (Homann, 2005; Helmert & Mattmuller, 2007; Helmert & Domshlak, 2009; Bonet
& Helmert, 2010). Hence, starting from the seminal HSP (Bonet & Gener, 2001) and
FF (Homann & Nebel, 2001) planning systems, exploiting, and in particular, explicitly
c
2013
AI Access Foundation. All rights reserved.

fiDomshlak & Nazarenko

planning for, monotonic relaxations became an important ingredient of most systems for
domain-independent deterministic planning. (For a comprehensive survey, see, e.g., Betz &
Helmert, 2009.)
Ideally, a planner reasoning about the cost of the plans for monotonic relaxations should
reason about the cost of optimal plans for monotonic relaxations. Unfortunately, while
regular planning for monotonic tasks is polynomial-time, optimal planning for these tasks
is NP-equivalent (Bylander, 1994), and constant-factor approximations for this problem are
provably hard as well (Betz & Helmert, 2009). Still, admissible heuristic estimates can in
principle exploit tractable fragments of optimal planning for monotonic relaxations (Katz
& Domshlak, 2010). However, to the best of our knowledge, no substantial fragments of
tractability have been revealed for monotonic optimal planning to date.
Identifying signicant fragments of tractability for optimal monotonic planning is precisely our focus here. Our special interest is in establishing connections between the complexity of optimal planning and that of optimal planning for the monotonic relaxations of
the respective planning tasks. This interest is motivated by the new and important role
of methods that combine tractable fragments of regular deterministic planning with monotonic relaxation heuristics (Helmert, 2004; Keyder & Gener, 2008a; Katz & Domshlak,
2010; Katz, Homann, & Domshlak, 2013a, 2013b; Katz & Homann, 2013). In turn, this
comparative perspective has brought us to consider planning tasks in terms of nite-domain
representations that go beyond the standard propositional representation formalisms such
as STRIPS (Fikes & Nilsson, 1971) and ADL (Pednault, 1989). Some explanation, and
possibly even justication, for this choice of analysis are in place here.
Due to their close relationship to rst-order and propositional logics, propositional representations have dominated the area of automated planning since the early days of AI research. For instance, the propositional PDDL language is still a de facto standard problem
description language in the planning community (Fox & Long, 2003). However, propositional languages blur a lot of important structure that is present in typical planning tasks of
interest. As we discuss later on, nite-domain representations (FDR) that go beyond propositional state variables (Backstrom & Klein, 1991; Backstrom & Nebel, 1995; Helmert,
2009) allowed for much deeper and much more discriminative analysis of automated planning complexity. In turn, some of these formal developments have already been translated
into practical advances in planning, allowing for the introduction of eective enhancements
of monotonic relaxation heuristics (Fox & Long, 2001; Helmert, 2004; Helmert & Gener,
2008; Keyder & Gener, 2008a; Cai, Homann, & Helmert, 2013; Katz et al., 2013a,
2013b), abstraction heuristics (Edelkamp, 2001; Helmert, Haslum, & Homann, 2007; Katz
& Domshlak, 2010), decomposition-based planning (Nissim, Brafman, & Domshlak, 2010;
Nissim & Brafman, 2012), search-topology analysis (Homann, 2011), and many others.
Nonetheless, under the value accumulating semantics of monotonic relaxation, FDR no
longer maintains its key advantage over propositional representations, because there no
longer seems to be any reason to prefer explicit representation of certain mutual exclusion
relationships between the propositions. Therefore, in principle, the results presented in
what follows can be phrased, and sometimes even extended, in the context of propositional
representations such as STRIPS. Why, then, have we chosen to view the complexity of
optimal relaxed planning through the lens of FDR? The primary reason is our interest in
comparative complexity analysis of optimal planning and optimal planning for the respective
784

fiThe Complexity of Optimal Monotonic Planning

monotonic relaxations. Departing from previously discovered fragments of tractability for
both satiscing and optimal planning, we approach the following two high-level questions:
1. For what fragments of deterministic planning, if any, is optimal planning hard but
optimal (monotonically) relaxed planning easy?
2. For what fragments of deterministic planning, if any, is optimal planning easy yet
optimal (monotonically) relaxed planning hard?
For regular planning, the best classication we have these days for its worst-case time
complexity exploits the properties of some graphical structures induced by the planning
tasks, together with various properties of the FDR state variables such as the size of their
domains. Hence, discussing optimal relaxed planning for FDR tasks keeps us in direct
relation to that well-explored complexity map of regular deterministic planning. Moreover,
we show that some known links between the planning complexity and graph-topological
properties of the FDR tasks are even stronger in the case of optimal relaxed planning.
The second reason for our choice is that recent work has already revealed interesting
interplays between (either complete or partial) monotonic relaxation of nite-domain variables and graphical structures induced by the FDR tasks. The respective results are in the
context of computational complexity of non-optimal planning (Katz et al., 2013b), heuristic estimates (Keyder & Gener, 2008b; Katz et al., 2013a; Katz & Homann, 2013), and
search-topology analysis (Homann, 2011). For instance, Homann (2011) showed that, if
the causal graph of the FDR task is acyclic, and every variable transition is invertible, then
the h+ heuristic induced by optimal relaxed plans from the evaluated states has no local
minima. This result in particular testies that examining monotonic relaxations through
the lens of FDR can lead to some crisp and concisely formulated results. The same can
be found in our work here: While we show how some of our results can be easily reformulated, and sometimes even generalized, in terms of STRIPS, some of our other results do
not conform so easily to STRIPS reformulation.
Finally, while the immediate value of our results in this work is mostly theoretical, we
would like to see them as a step towards exploiting optimal relaxed planning to devise
heuristic functions for deterministic planning. Some of our results, such as Theorem 4, can
in fact be directly used within the framework of implicit abstractions (Katz & Domshlak,
2010), while some other results can possibly be exploited within various frameworks of
partial monotonic relaxation such as, e.g., the recent red-black planning framework of Katz
et al. (2013b, 2013a). To what extent this will actually happen remains, of course, to
be seen. However, the very focus of both implicit abstractions and red-black planning on
nite-domain task representations should make it much easier to assess the relevance of our
results to these frameworks.

2. Formalism, Background, and Related Results
We use the notation [n] to refer to the set {1, . . . , n}. In directed graphs, the edge from x
to y is denoted by (x, y), and in undirected graphs, the edge between x and y is denoted by
{x, y}. By ||x|| we refer to the representation size of object x, not to be confused with |x|,
which denotes the number of elements in set x.
785

fiDomshlak & Nazarenko

2.1 FDR, MFDR, and Monotonic Relaxation
Here we adopt the terminology and notation of Katz et al. (2013b). A planning task
in nite-domain representation (FDR) is given by a quintuple  = V, A, I, G, cost,
where:
 V is a set of state variables, with each v  V being associated with a nite domain
D(v). A partial variable assignment p is a function on a variable subset V(p)  V that
assigns each v  V(p) a value p[v]  D(v) of its domain. A partial variable assignment
s is called a state if V(s) = V .
 I is an initial state. The goal G is a partial variable assignment to V .
 A is a nite set of actions. Each action a is a pair pre(a), e(a) of partial variable
assignments to V called precondition and eect, respectively.
 cost : A  R0+ is a real-valued, nonnegative action cost function.
Auxiliary notation:
 For a partial assignment p and a variable subset V   V(p), by p[V  ] we denote the
assignment provided by p to V  . For ease of presentation, we sometimes also specify
partial assignments as sets of constructs v  d, in which v  V and d  D(v).
 For a variable v  V , by Av  A we denote the actions aecting the value of v, that
is, Av = {a | v  V(e(a))}. For a sequence of actions  and a state variable v  V ,
by v we denote the restriction of  to the actions in Av .
The semantics of FDR tasks is as follows. An action a is applicable in a state s i
s[v] = pre(a)[v] for all v  V(pre(a)). Applying a in state s changes the value of every v 
V(e(a)) to e(a)[v]; the resulting state is denoted by sJaK. By sJa1 , . . . , ak K we denote the
state obtained from sequential application of the (respectively applicable) actions a1 , . . . , ak
starting at state s. Such an action sequence is an s-plan if sJa1 , . . . , ak K[V(G)] = G,
and it is an optimal s-plan if the sum of its action costs is minimal among all s-plans. The
computational task of (optimal) planning is nding an (optimal) I-plan. In what follows,
(optimal) I-plans are often referred simply as (optimal) plans for .
A monotonic nite-domain representation (MFDR) planning task is given by a
quintuple  = V, A, I, G, cost exactly as for FDR tasks, but the semantics is dierent.1
Informally, in MFDR tasks the state variables accumulate their values, rather than switching
between them. More specically, an MFDR state s is a function that assigns each v  V a
non-empty subset s[v]  D(v) of its domain. An MFDR action a is applicable in state s i
pre(a)[v]  s[v] for all v  V(pre(a)). Applying an MFDR action a in state s changes the
value of v  V(e(a)) from s[v] to s[v]  {e(a)[v]}. Respectively, an MFDR action sequence
a1 , . . . , ak  applicable in state s is an s-plan if G[v]  sJa1 , . . . , ak K[v] for all v  V(G).
In all other respects, MFDR and FDR semantics are identical.
1. It is not entirely clear to whom the original formulation of monotonic relaxation for multi-valued variable
domains should be attributed, but it can be traced back at least to the work of Helmert (2006) on the
Fast Downward planning system.

786

fiThe Complexity of Optimal Monotonic Planning

While FDR planning is PSPACE-complete even for propositional state variables, planning for MFDR tasks is polynomial time (Bylander, 1994). Starting with the HSP (Bonet
& Gener, 2001) and FF (Homann & Nebel, 2001) planning systems, exploiting this attractive property of MFDR for deriving heuristic estimates via the notion of monotonic
relaxation became a key ingredient of many planning systems. Given an FDR planning task
 = V, A, I, G, the monotonic relaxation of  is the MFDR task + = . For any
state s of , the optimal relaxation heuristic h+ (s) is dened to be the cost of the optimal
plan for the MFDR task V, A, s, G, and by (optimal) relaxed planning for  we refer
to (optimal) planning for + . If + is a plan for + , then + is referred to as a relaxed
plan for .
Finally, for both FDR and MFDR, we sometimes distinguish between planning tasks in
terms of a pair of standard graphical structures induced by the description of these tasks.
 The causal graph CG of  is a digraph over nodes V . An arc (v, v  ) is in CG i v =
v  and there exists an action a  A such that (v, v  )  V(e(a))V(pre(a))V(e(a)).
In this case, we say that (v, v  ) is induced by a. By succ(v) and pred(v) we respectively
denote the sets of immediate successors and predecessors of v in CG .
 The domain transition graph DTG(v, ) of a variable v  V is an arc-labeled
digraph over the nodes D(v) such that an arc (d, d ) labeled with pre(a)[V \ {v}]
and cost(a) belongs to the graph i both e(a)[v] = d , and either pre(a)[v] = d or
v  V(pre(a)).
2.2 Causal Graph Treewidth and Planning Complexity
Introduced by Halin (1976), tree-width went unnoticed until it was independently rediscovered by Robertson and Seymour (1984) and Arnborg, Cornell, and Proskurowski (1987). It
has since received widespread attention due to its numerous graph-theoretic and algorithmic
applications. Informally, the tree-width of a graph is a measure of how close the structure
of the graph is to a tree. For example, the tree-width of a tree is 1, regardless of its size,
whereas the tree-width of a complete graph over n nodes is n  1. Formally, the tree-width
of a graph is dened via the notion of tree decomposition as follows.
A tree decomposition of a connected undirected graph G = (V, E) is a pair T, , where
T = (V T , E T ) is a tree, i.e., a connected acyclic graph, and  : V T 7 2V such that:
1. For every v  V , the set {t  V T | v  (t)} in T is non-empty and connected.
2. For every (v, u)  E there is a t  V T such that {v, u}  (t).
The width of a tree decomposition T,  of G is max{|(t)| | t  V T }  1, and the treewidth of G, tw(G), is the minimum width over all tree decompositions of G. Following
what appears to be standard terminology, by tree-width of a digraph G we refer to the
tree-width of the undirected graph induced by G (Berwanger, Dawar, Hunter, Kreutzer, &
Obdzralek, 2012).
With the development of parametrized complexity analysis (Downey & Fellows, 1999;
Flum & Grohe, 2006), it has been shown that many NP-hard problems can be solved in
polynomial time when restricted to induce certain problem-specic graphical structures
of a xed tree-width. In particular, constraint satisfaction and constraint optimization
787

fiDomshlak & Nazarenko

problems over nite-domain variables can be solved in time polynomial in the size of the
explicit description of these problems, and exponential only in the tree-width of the induced
constraint graph (Dechter, 2003). Since the causal graph captures a high-level structure
of the planning problems, one would expect its tree-width to play a similar role in the
worst-case time complexity of both satiscing and optimal FDR planning. Unfortunately,
the results in this direction have mostly been negative.
 Under a standard assumption on parametric complexity hierarchy that W[1]  nu-FPT
(Flum & Grohe, 2006), Chen and Gimenez (2010) proved that, for any family of
digraphs C, FDR planning for tasks inducing causal graphs in C is polynomial-time if
and only if the size of connected components in C is bounded by a constant. As the
family of all digraphs with tree-width of 1 trivially fails to satisfy the latter condition,
the immediate corollary of this result is that even satiscing FDR planning restricted
to causal graphs with the tree-width of 1 is not polynomial.
 While the construction in the proof of Chen and Gimenez (2010) uses FDR tasks
with variable domains of parametric size, the work of Gimenez and Jonsson (2009b)
shows that the negative result for causal graphs with the tree-width of 1 holds even if
restricted to such planning tasks with xed variable domains. Specically, Gimenez
and Jonsson show that FDR planning over chain causal graphs is NP-hard even if
restricted to variables with domains of size 5.
These negative results on the role of the causal graphs tree-width in computational
tractability of FDR planning are strong, but apparently tell only part of the story. As
shown by Brafman and Domshlak (2006, 2013), the causal graphs tree-width does play
a role in the worst-case time complexity of FDR planning, but in a tight interplay with
another parameter called the tasks local depth. Informally, local depth of an FDR task 
captures a minmax amount of work required on a single variable in order to solve . Since
later we refer to this result of Brafman and Domshlak, a precise specication of local depth
is warranted here: denoting by P lans() the (possibly innite) set of all plans for an FDR
task , the local depth of  is
 =

min

max {|v |},

P lans() vV

that is,  is the maximal number of value changes of a single state variable, along a plan that
minimizes that quantity among the plans for . By Theorem 6 of Brafman and Domshlak
(2013), FDR tasks  can be solved in time polynomial in |||| and exponential only in
O(tw(CG )   ). Up to some possible stratications based on succinct representation of
internal variable domain dynamics, such as those suggested by Fabre, Jezequel, Haslum,
and Thiebaux (2010), this appears to be the strongest link discovered so far between the
complexity of general FDR planning and the graph-topological properties of the causal
graphs. Note also that this positive result applies only to satiscing planning; it is applicable
to optimal planning only in very limited settings (Fabre et al., 2010; Brafman & Domshlak,
2013).
788

fiThe Complexity of Optimal Monotonic Planning

3. Negative Results: The Bottleneck of Variable Domains
Our focus here is on connections between the worst-case time complexity of optimal relaxed
planning and the structure of the problems causal graphs. Note that the causal graphs
of FDR tasks are trivially invariant under monotonic relaxation: since + = , we have
CG+ = CG . As we just mentioned, previous works have already revealed certain connections between the structure of the causal graphs, and in particular its tree-width, and
the complexity of FDR planning. In what follows, we show that this link is even stronger
and somewhat more intriguing in the case of optimal relaxed planning. Having said that,
we begin with a set of negative results which, at least at rst glance, suggest that no such
link is actually likely.
Denition 1 A connected digraph G = (N, E) is a fork if it contains exactly one node
r  N with non-zero out-degree, that is, E = {(r, n) | n  N \ {r}}. Similarly, G is
an inverted fork if it contains exactly one node r  N with non-zero in-degree, that is,
E = {(n, r) | n  N \ {r}}. The respective special nodes r in fork and inverted-fork graphs
are called the roots of the graphs.
Considering FDR planning tasks with fork and inverted fork causal graphs, the rst
impression might be that these FDR fragments are restricted enough to allow for polynomialtime planning. This, however, is not the case: even non-optimal planning for FDR tasks
with such simple causal graphs is hard, and this even if all variables but the roots are further
restricted to be binary-valued (Domshlak & Dinitz, 2001). On the other hand, especially
since non-optimal relaxed planning for FDR is polynomial-time, these results have no direct
inuence on the complexity of optimal relaxed planning for the respective FDR fragments.
Nonetheless, surprisingly or not, this problem is hard.
Theorem 1 Optimal relaxed planning is NP-equivalent even if restricted to FDR tasks
with fork and inverted-fork structured causal graphs. Moreover, the result holds even if all
state variables but the roots are restricted to binary domains.
Proof: The proof is by polynomial reductions from the NP-equivalent problems of (minimum) Directed Steiner Tree and (minimum) Set Cover (Karp, 1972).
Directed Steiner Tree: Given a digraph G = (N, E) with arc weights w : E  R0+ , a
set of terminals Z  N , and a root vertex nr , nd a minimum weight arborescence
(directed tree) T rooted in nr  N such that all terminals Z are included in T .
Set Cover: Given a collection C of subsets of a nite set S, nd a minimum cardinality
subset C   C such that every element of S belongs to at least one member of C  .
Fragment I: Given a Directed Steiner Tree problem G = (N, E), w, Z, nr , the corresponding fork-structured FDR task  = V, A, I, G, cost is constructed as follows. The
variable set V contains a variable per terminal node in G, plus an extra variable r, that
is, V = {r}  VZ where VZ = {vz | z  Z}. The domain of r, D(r) = N , corresponds
to the nodes of G, and all other variables are binary-valued, with D(vz ) = {0, 1}. In the
initial state, I[r] = nr and I[v] = 0 for all v  VZ . The goal is to achieve value 1 for all
v  VZ . For each arc e = (x, y)  E, the action set A contains a root-changing action
789

fiDomshlak & Nazarenko

ae with pre(ae ) = {r  x}, e(ae ) = {r  y}, and cost(ae ) = w(e). Likewise, for each
terminal z  Z, A contains a vz -changing action az with pre(az ) = {r  z, vz  0},
e(az ) = {vz  1}, and cost(az ) = 0. This construction is clearly polynomial, the causal
graph of  forms a fork rooted at r, and the variable domains in  are as required by the
theorem. It also holds that:
(i) For any relaxed plan  for , the set of arcs {e | ae  r } in G induces a connected
sub-graph G  containing nr such that all terminals Z are included in G  (or otherwise
at least one of the leaf variables could not have been changed by  to its goal value).
Likewise, there is a directed path in G  from nr to every other node n in G  (or
otherwise the respective value n of the root variable r could not have been achieved
along ). Hence, in particular, G  contains an arborescence rooted in nr that includes
all terminals Z.
(ii) Vice versa, let T be an arborescence of G rooted in nr that includes all terminals
Z = {z1 , . . . , zm }, and let {e1 , . . . , ek } be a topological ordering of the arcs of T . Then
ae1 , . . . , aek , az1 , . . . , azm  is a relaxed plan for , and the cost of  is precisely the
weight of T .
Hence, optimal relaxed plans for  induce minimum directed Steiner trees for G = (N, E), w, Z, nr ,
and vice versa.
Fragment II: Given a Set Cover problem S, C with S = {1, 2, . . . , m} and |C| = n,
the corresponding inverted-fork structured FDR task  = V, A, I, G, cost is constructed as
follows. The variable set V contains a variable per member of C, plus an extra variable r,
that is, V = {r}{vc | c  C}. The domain of r is D(r) = {0}S, and all other variables are
binary-valued, with D(vc ) = {0, 1}. In the initial state, I[v] = 0 for all v  V . The goal is to
achieve value m for the special variable r. For i  S, and each subset c  C such that i  c,
the action set A contains a root-changing action ai;c with pre(ai;c ) = {r  (i  1), vc  1},
e(ai;c ) = {r  i}, and cost(ai;c ) = 0. Likewise, for each c  C, A contains a vc -changing
action ac with pre(ac ) = {vc  0}, e(ac ) = {vc  1}, and cost(ac ) = 1. The construction
is polynomial, the causal graph of  forms an inverted fork rooted at r, and the variable
domains in  are as required by the theorem. Note that, due to the chain-like structure of
the domain transition graphs in , there is no dierence between the plans for  and for
+ , and it is easy to verify that any plan for  induces a cover of S of the same cost, and
vice versa. Hence, optimal relaxed plans for  induce minimum set covers for S, C, and
vice versa.

Corollary 1 Optimal relaxed planning is NP-equivalent even if restricted to FDR tasks
with the causal-graph tree-width of 1.
This corollary is immediate from Theorem 1 as the undirected graphs induced by both
forks and inverted forks are a special case of trees and thus have tree-width of 1. At rst
glance, the message of Corollary 1 is discouraging with respect to our agenda: the structure
of the causal graphs does not seem to play a major role in the complexity of optimal
relaxed planning for FDR. Our next result, however, seems to be even more discouraging
with respect to the prospects of tractability of optimal relaxed planning for FDR.
790

fiThe Complexity of Optimal Monotonic Planning

Theorem 2 Optimal relaxed planning is NP-equivalent even if restricted to FDR tasks
with two state variables.
Proof: The proof is by a polynomial reduction from the (minimum) directed Steiner tree
problem, and in fact, the proof is very similar to that of the fork case of Theorem 1. Given
a Directed Steiner Tree problem G = (N, E), w, Z, nr  with Z = {z1 , . . . , zm }, we compile
it to an FDR task  = {v1 , v2 }, A, I, G, cost as follows. The domain of v1 corresponds
to the nodes of G, and the domain of v2 corresponds to the terminal nodes and the root
node, that is, D(v1 ) = N and D(v2 ) = Z  {nr }. In the initial state, both I[v1 ] = nr and
I[v2 ] = nr , and the goal is to achieve value zm for v2 . For each arc e = (x, y)  E, the
action set A contains a v1 -changing action ae with pre(ae ) = {v1  x}, e(ae ) = {v1  y},
and cost(ae ) = w(e). Likewise, denoting nr by z0 , for 1  i  m, A contains a v2 -changing
action azi with pre(azi ) = {v1  zi , v2  zi1 }, e(azi ) = {v2  zi }, and cost(azi ) = 0.
The construction is polynomial, and its correctness stems from analysis identical to that of
the proof of Theorem 1.

Theorem 2 shows that even the dimensionality of the FDR state spaces plays a secondary
role, if any, in the complexity of optimal relaxed planning. By that, however, it answers
one of the two macro-questions on our agenda:
Corollary 2 There exist fragments of FDR for which optimal planning is polynomial-time,
while optimal relaxed planning is NP-equivalent.
This corollary is immediate from Theorem 2 and polynomial-time solvability of optimal
planning for FDR tasks with a xed number of state variables.

4. Positive Results I: State Variables with Fixed-Size Domains
Depending on the readers background and intuitions, Theorem 2 can either surprise or seem
somewhat predictable. In any case, it was Theorem 2 that led us to consider a dierent
(and this time fruitful) fragmentation of optimal relaxed planning.
A closer look at Theorem 1 and Lemma 2 reveals that the size of the FDR variable
domains might be crucial in the complexity of optimal relaxed planning: While the proofs
of these two claims rely heavily on the parametric domain size of some of the state variables,
these proofs also imply that optimal relaxed planning is hard even if only a single FDR
variable comes with a parametric domain size. Departing from this observation, we now
show that, after all, the topology of the causal graph does play an interesting role in worstcase time complexity classication of optimal relaxed planning for FDR tasks. In particular,
it turns out that bounding the tree-width of the causal graph by a constant is all it takes
to achieve polynomial-time optimal relaxed planning for FDR tasks with xed-size variable
domains.
Theorem 3 For any family of directed graphs C, if the tree-width in C is bounded by a
constant, then optimal relaxed planning for FDR tasks with xed-size variable domains and
causal graphs in C is polynomial-time.
791

fiDomshlak & Nazarenko

Proof: The proof of Theorem 3 is inspired by and closely resembles the approach of Brafman
and Domshlak (2013) discussed in Section 2.2. Given an FDR task  = V, A, I, G, cost,
we compile it into a constraint optimization problem COP+ = (X , ) over nite-domain
variables X , functions , and the global objective to minimize  (X ). If + is unsolvable, then all the assignments to X evaluate the objective function to . Otherwise, the
optimum of the objective is obtained on and only on the assignments to X that correspond
to optimal plans for + , that is, to optimal relaxed plans for .
Let |V | = n,  = maxvV |D(v)|, and recall that pred(v) for state variable v  V denotes
the set of vs immediate predecessors in the causal graph.
 For each state variable v  V , X contains a variable xv that represents the choice of a
subset of actions from Av to participate in the plan we are looking for. These possible
choices form the domain D(xv ) of xv , and each such choice is represented by a set of
size smaller or equal to , with each element of that set being a quadruple
(d, id, a, t),
with d  D(v), id  {v}  pred(v), t  {1, . . . , n}, and, if id = v, then a  {a 
Av | e(a )[v] = d} and otherwise a =. At a high level, if we view state variables as
active decision makers, then d is a value that the relaxed variable v aims to achieve
and accumulate at time point t, either by itself using action a, or by delegating this
task to another variable id. As we show later on, no variable should accumulate more
than  values, and since the accumulated values are never lost, optimal plans for +
cannot be longer than n actions.
 For each state variable v  V ,  contains a non-negative, extended real-valued function v from D(xv ). Likewise, for each pair of state variables {v, w} such that the
causal graph CG contains either arc (v, w) or arc (w, v),  contains an indicator
function v,w : D(xv )  D(xw )  {0, }. To simplify the specication of v,w , we
dene a set of auxiliary constraints as follows.
(S1) [Precondition Constraint] An assignment v1 , . . . , vn  to X satises S1 i, for all
v  V , (d, v, a, t)  v implies that, for each w  V(pre(a)),
pre(a)[w]  {I[w]}  {d | (d , , , t )  w , t < t}.

(1)

(S2) [Delegation Constraint] An assignment v1 , . . . , vn  to X satises S2 i, for all v  V ,
(d, w, , t)  v implies that, for some a  Av  Aw with d  e(a)[v], (, w, a, t)  w .
(S3) [Goal Achievement Constraint] An assignment v1 , . . . , vn  to X satises S3 i, for
all v  V(G),
G[v]  {I[v]}  {d | (d, , , )  v }.
(2)
Constraint S1 ensures that preconditions of actions to which a variable is committed
are provided on time. Constraint S2 ensures that the outsourced value achievements are
fullled at the required time points. Finally, constraint S3 simply veries that the value of
v induced by v is a goal value. Importantly, S3 corresponds to a set of n unary constraints,
792

fiThe Complexity of Optimal Monotonic Planning

and S1 and S2 can both be represented as a set of binary constraints over X . Given that,
functions  are specied as

v (v ) =
cost(a),
(,v,a,)v

{
0, {v , w } satises S1(xv , xw ), S2(xv , xw ), S3(xv ) and S3(xw )
v,w (v , w ) =
,
, otherwise

(3)

where S1(xv , xw ), S2(xv , xw ), and S3(xv ) correspond to the binary and unary constraints
induced respectively by S1, S2, and S3 on the COP variables xv and xw .
Let us now take a closer look at COP+ constructed as above for the problems in the
scope of Theorem 3.
(1) The constraint network of COP+ corresponds to the undirected graph induced by the
causal graph CG+ (= CG ). Hence, since the tree-width of the latter is bounded by
a constant by the scope of the theorem, so is the tree-width of the constraint network
of COP+ . While nding an optimal tree decomposition of a graph G is NP-hard,
a tree decomposition of G with width c  tw(G) for a low constant c can be found
in time polynomial in the size of G (Robertson & Seymour, 1991; Becker & Geiger,
1996; Amir, 2010). Hence, COP+ can be solved in time polynomial in the size of its
representation using the standard message-passing algorithm for constraint optimization
over trees (Dechter, 2003).
(2) Recall that the values of the COP variable xv are sets of quadruples (d, id, a, t) of size
 . Then, the size of the xv s domain D(xv ) is upper-bounded by
(|D(v)|  |{z}
n  (|Av | + 1)  (n)) ,
| {z }
| {z } | {z }
d

id

a

(4)

t

and since  = O(1), we have |D(xv )| = O(poly(||||)). Together with (1), that implies
that COP+ can be solved in time O(poly(||||)).
We now prove the correctness of this compilation by showing that, if + is unsolvable,
then all the assignments to X evaluate the objective function  (X ) to , and otherwise, the objective is minimized on and only on the assignments to X that correspond to
optimal plans for + .
First, given an assignment  = v1 , . . . , vn  to X such that  () < , we show
that  induces a valid plan  for + of cost  (). Note that, since  () < ,
by Eq. 3 we have  satisfying constraints
S1-S3.

Consider the multi-set Z = vV {(a, t) | (, v, a, t)  v } induced by , and let
Z = {(a1 , t1 ), . . . , (am , tm )}, m = |Z|,
be an arbitrary ordering of Z such that, for 1  j < i  m, it holds that tj  ti . For
1  i  m, let v be the variable in charge of performing the action ai  in , that is,
(e(ai )[v], v, ai , ti )  v . For each w  V(pre(ai )), Eq. 1 in constraint S1 implies that either
pre(ai )[w] = I[w] or there is some (pre(ai )[w], id, a, t)  w with t < ti . In the latter case,
793

fiDomshlak & Nazarenko

if id = w, then by the construction of  , a = aj for some j < i, and by the denition
of D(xw ), pre(ai )[w] = e(aj )[w]. Otherwise, if id = w for some w = w, then by the
denition of S2, pre(ai )[w] = e(a )[w] for some (, w , a , t)  w . Thus, a = aj for some
j < i, and pre(ai )[w] = e(aj )[w]. Therefore, the action sequence
 = a1 , . . . , am 
is applicable in the initial state I of + , and given that,  satisfying S3 implies that 
is a plan for + . Finally, it is immediate from the construction of  and Eq. 3 that
cost( ) =  ().
We now show that any optimal plan  = a1 , . . . , am  for + induces an assignment
 = v1 , . . . , vn  to X such that  ( ) = cost(). By the denition of MFDR,
for 1  i  m and for each state variable v  V , IJa1 , . . . , ai1 K[v]  IJa1 , . . . , ai K[v].
By optimality of , for 1  i  m, there exists at least one variable v  V for which
IJa1 , . . . , ai1 K[v]  IJa1 , . . . , ai K[v]. In particular, that implies that actions {a1 , . . . , am }
are all dierent, and for each variable v  V , if


/v = {ai | IJa1 , . . . , ai1 K[v]  IJa1 , . . . , ai K[v]},
then2 |/v|  .
Adopting an arbitrary ordering {v1 , . . . , vn } of the state variables V , for 1  j  n, let
/vj = {aj1 , . . . , ajmj }. In turn, for 1  l  mj , let djl  D(vj ) be the value achieved and
accumulated for vj by the action ajl , i.e., IJa1 , . . . , ajl K[vj ] \ IJa1 , . . . , ajl 1 K[vj ] = {djl }. For

1  l  mj , if ajl  j1
k=1 /vk , then vj is set to contain (djl , vj , ajl , jl ), and otherwise, vj
is set to contain (djl , vk , , jl ) for k = min {k  | ajl  /vk }.
By the construction of  , each action a from  is present in the value of exactly one
variable xv , and by Eq. 3, v (v ) sums up the cost of a exactly once. Hence, if  satises
the constraints S1-S3 that are enforced by the step functions v,w , we have  ( ) =
cost(). The former also directly follows from the construction of  . For 1  j  n,
mj
let vj = {(djl , idjl , ajl , tjl )}l=1
. By the denition of the values djl as above, the set of
values {dj1 , . . . , djmj } is exactly the set of values of vj that gets accumulated by the relaxed
plan  from I, and thus satisfaction of S3 follows from  being a plan for + . Again, by
the construction of  , the sequence of time points {tj1 , . . . , tjmj } corresponds to the time
points of the rst achievements of {dj1 , . . . , djmj }, respectively, along , and for each such
rst achiever ajl along , it is captured and properly scheduled either by vi or by a neighbor
of vi in the causal graph. Hence, the constraints S1 and S2 are all satised as well. This
nalizes the proof for the compilation correctness, and thus of Theorem 3.

Note that Theorem 3 in particular answers the second macro-question on our agenda:
Corollary 3 There exist fragments of FDR for which (even satiscing) planning is NPequivalent, while optimal relaxed planning is polynomial-time.
2. That corresponds
to the well-known fact that, under our notation, optimal plans in MFDR cannot be

longer than vV |D(v)|  n.

794

fiThe Complexity of Optimal Monotonic Planning

This corollary is immediate from Theorem 3 and the discovery of Gimenez and Jonsson
(2009b) that FDR planning over chain causal graphs is NP-hard even if restricted to variables
with domains of size 5.
Following our STRIPS vs. FDR discussion in the introduction, Theorem 3 trivially
implies that optimal relaxed planning for STRIPS tasks  can be done in time polynomial
in |||| and exponential only in the tree-width of the causal graph. This is actually an
example of a tractability fragment for which one can only benet from switching to a
propositional representation: While the formulation of the result remains the same, the
coverage of the result grows because, if the size of the FDR variable domains is bounded by
 = O(1), then the tree-width of the causal graph under STRIPS representation is at most
 times larger than this under FDR. However, it can also be smaller, down to identical.
Later, however, we present some results that directly benet from the nite-domain input
representation of the planning tasks.
Our discussion in the remainder of this section addresses the readers familiar with the
work of Brafman and Domshlak (2013) in detail. This discussion can be skipped without
any loss of continuity.
At rst view, the compilation in the proof of Theorem 3 brings to mind the compilation in the algorithm
v1
v2
vn
behind the proof of Theorem 6 of Brafman and Domshlak (2013). One might thus naturally ask whether that
algorithm cannot be used directly for the proof of our
Theorem 3. As it stands, however, the algorithm of
vn+1
Brafman and Domshlak does not yield polynomialtime complexity on those tasks with which Theorem 3
is concerned. To see why, consider an FDR task  = V, A, I, G, cost with V = {v1 , . . . , vn+1 },
where, for all vi , D(vi ) = {0, 1}, I[vi ] = 0, and G[vi ] = 1, and A = {a1 , . . . , an } with
V(pre(ai )) = , V(e(ai )) = {vi , vn+1 }, and e(ai )[vi ] = e(ai )[vn+1 ] = 1. The causal graph
of , depicted above, has tree-width of 1. However, for any plan  for + , maxvV {|v |} 
n, and the local depth + is n. This is because + cannot be solved without applying each
of the n actions A at least once, and each of these actions aects the value of the variable
vn+1 . Hence, nding even a non-optimal plan for + using the algorithm of Brafman and
Domshlak (2013) will take time exponential in ||||.
As a nal note, it actually can be shown that the algorithm of Brafman and Domshlak
(2013) is optimal and polynomial-time on a sub-class of MFDR tasks like those in Theorem 3
but also restricted to single-eect operators. It is multiple-eect actions that complicate
matters, and require a dierent algorithmic approach to guarantee planning tractability.

5. Positive Results II: M-unfoldable State Variables
Despite the discouraging results in Section 3, we now return to consider FDR tasks with
parametric-size domains. Recall that, while the variable values of monotonic relaxation +
correspond to sets of values of the respective variables in , these large variable domains in
+ are given implicitly, via the variable domains D(v1 ), . . . , D(vn ) of . This conciseness of
representation, however, hides many aspects of the problem structure in + that otherwise
might have be exploited for planning eciency. In particular, reasoning about the domain
795

fiDomshlak & Nazarenko

transition graphs induced by the FDR tasks has been successfully exploited in complexity
analysis of FDR (Jonsson & Backstrom, 1998; Domshlak & Dinitz, 2001; Katz & Domshlak,
2008; Gimenez & Jonsson, 2009a). In contrast, in monotonic relaxations, the true domain
transition graphs of + , denoted henceforth as DTG(v, + ), cannot always be represented
explicitly because the number of nodes in these graphs is exponential in ||||. However,
this is not always, or does not always have to be, the case, and below we focus on planning
with such accessible monotonic variables.
Denition 2 Given an FDR planning task  = V, A, I, G, cost, the eective domain
D (v) of v  V in + consists of all value subsets   D+ (v) = 2D(v) \  that are reachable
from {I[v]} in DTG(v, + ). That is,   D (v) i
(i) I[v]  , and
(ii) for each value d  , there is a directed path from I[v] to d in the unlabeled digraph
induced by DTG(v, ) such that all the values along that path belong to .
The elements of D (v) are called the eective values of v in + .
Denition 3 Let  be an innite set of FDR tasks, and  be a property of state variables
that, for each task   , partitions the state variables of  into those that satisfy 
(referred as -variables), and those that do not satisfy . We say that -variables in  are
monotonically unfoldable (M-unfoldable) if there exists an integer k  N such that,
for every task    and every -variable v of , |D (v)| = O(||||k ).
 in Denition 3 can be any property of FDR state variables, and in particular, any
property dened with respect to the tasks causal graphs, such as root, sink, nodes
whose causal graph in-degrees are larger than their causal graph out-degrees, etc. Informally, -variables of a set of FDR tasks  are M-unfoldable if, for every task    and
every -variable v of , the relevant subgraph of DTG(v, + ) can be described explicitly
in space polynomial in the representation size of . For instance, v is trivially M-unfoldable
if the size of its domain in  is bounded by a constant, or even by O(log(||||)). More generally, let DTG (v, ) be the digraph obtained from the (labels ignored) domain transition
graph DTG(v, ) by unifying parallel edges. It is not hard to verify from Denitions 2 and 3
that v is M-unfoldable if and only if the number of arborescence subgraphs of DTG (v, )
rooted in I[v], and covering G[v] if v  V(G), is O(poly(||||)).
We now return to consider fork-structured FDR tasks. While in Theorem 1 we considered
fork-structured FDR tasks with only root variables being unrestricted, we now consider an
inverse fragment, corresponding to fork-structured FDR tasks with only root variables
being restricted. Optimal FDR planning for such tasks is polynomial-time for |D(r)| =
2 (Katz & Domshlak, 2010), but it is NP-equivalent for |D(r)| > 2 (Katz & Keyder, 2012).
In contrast, Theorem 4 below shows that optimal relaxed planning for fork-structured FDR
tasks is polynomial-time for a much wider class of root variables. Moreover, a simple
observation behind the construction in the proof of Theorem 4 is later generalized to capture
a much richer fragment of causal graphs.
Theorem 4 Optimal relaxed planning is polynomial time for any set of FDR tasks 
with fork-structured causal graphs and M-unfoldable root variables.
796

fiThe Complexity of Optimal Monotonic Planning

Proof: Let  = V, A, I, G, cost be a fork-structured FDR task with root r and Vleafs =
V \ {r} = {v1 , . . . , vn }. We assume that goal values are specied for all variables in Vleafs ;
this is because none of the leaves in Vleafs \ V(G) need to change their value at all, and thus
they can be schematically removed from the problem. Given such a FDR task , an optimal
plan for its relaxation + can be constructed as follows.
 All the eective values   D (r) consistent with the goal (that is, G[r]   if
r  V(G)) are processed one by one, independently. For each such eective value ,
we extract the following information.
(1) For the root variable r, we determine a cheapest path from I[r] to  in DTG(r, + ),
with () denoting the action sequence inducing that path.
(2) For each leaf variable v  Vleafs , we
(a) schematically remove from the domain transition graph DTG(v, ) all the
arcs labeled with actions a that are not supported by , that is, actions a
with r  V(pre(a)) and pre(a)[r]  , and then
(b) determine a cheapest path from I[v] to G[v] in that arc-reduced domain
transition graph, with  (G[v]) denoting the action sequence inducing that
path.
 Return the concatenation of action sequences ( )   (G[v1 ])  . . .   (G[vn ]) where
[
]
n


cost( (G[vi ])) ,
 = argmin cost(()) +
D (r)

i=1

and cost() for an action sequence  is the sum of the costs of actions along .
The algorithm is polynomial-time given an explicit description of the eective part of
DTG(r, + ), and thus it is polynomial-time if r is M-unfoldable. Recall that, since the
causal graph is acyclic, no action aects more than one variable. The correctness of the
algorithm stems from a simple observation that, for any relaxed plan  for a fork-structured
FDR task ,  = r  v1  . . .  vn is also a relaxed plan for , and (trivially) of identical
cost. Hence, while searching for an optimal relaxed plan for , we can restrict ourselves to
plans of the latter form, and it is immediate from the description of the algorithm that it
nds the cheapest such plan.

As an aside, following our STRIPS vs. FDR discussion, note that Theorem 4 provides
an example for exploiting value grouping induced by the FDR representation of the planning tasks. The simple algorithm in the proof exploits the fact that only the actions that
change the value of a leaf variable depend on its value, and this prevents restrictions from
being placed on either the size of the leaf domains, or on the structure of their domain
transition graphs. Of course, Theorem 4 can also be reformulated in terms of STRIPS, yet
this would require the respective partition of the propositions to be given/discovered, which
is essentially equivalent to starting with something like FDR input in the rst place.
While the scope of the tractability result in Theorem 4 is fairly limited in terms of
the causal graph structure, the nice property of the sets of optimal relaxed plans for forkstructured FDR tasks, exploited in the proof of Theorem 4, can be generalized to a much
797

fiDomshlak & Nazarenko

wider fragment of causal graphs. In turn, this generalization allows us to provide our next
tractability result for a wide fragment of optimal relaxed planning for FDR.
Lemma 1 Let  = V, A, I, G, cost be an FDR task with a directed acyclic causal graph,
and let {v1 , . . . , vn } be an arbitrary topological ordering of V with respect to CG . Then,
for any plan  for + ,  = v1  . . .  vn is also a plan for + .
Proof: Directed acyclicity of the causal graph in particular implies that no action aects
more than one variable. The proof of the lemma stems from combining this property with
(i) the fact that  preserves the order of the actions vi as in , and (ii) the core property
of monotonic relaxations + that, for any variable v, any value d  D(v), and any state s
of the relaxed task + , if d  s[v], then d  s [v] for any s reachable from s in + .
Since CG forms a DAG and the state variables are ordered according to a topological
ordering of CG , V(pre(a)[v1 ])  {v1 } for all actions a  v1 . Thus, order preservation of
v1 along  with respect to  implies that v1 is applicable in I, with IJv1 K[v1 ] = IJK[v1 ],
and IJv1 K[vi ] = I[vi ] for i > 1. Assume now that, for i  1, v1  . . .  vi is applicable in
I, and
{
IJK[vj ], j  i
IJv1  . . .  vi K[vj ] =
.
(5)
I[vj ],
j>i
Together with the topological ordering of V and order preservation of vi +1 along  with
respect to , Eq. 5 implies that vi+1 is applicable in IJv1  . . .  vi K, and
IJv1

{
IJK[vj ],
j =i+1
.
 . . .  vi KJvi+1 K[vj ] =
IJv1  . . .  vi K[vj ], otherwise

(6)

Putting Eqs. 5 and 6 together then proves the induction hypothesis, and for i = n, Eq. 5
boils down to
IJ K = IJv1  . . .  vn K = IJK.

Denition 4 Let  be an innite set of FDR tasks. We say that the tasks in  are Munfoldable if all state variables in  are M-unfoldable.
Theorem 5 Let  be an innite set of M-unfoldable FDR tasks with directed acyclic causal
graphs. If both the tree-width and node in-degree of the causal graphs in  are bounded by
a constant, then optimal relaxed planning for  is polynomial-time.
Proof: Similarly to the proof of Theorem 3, the proof of Theorem 5 is based on a planningto-COP compilation. Given an FDR task  = V, A, I, G, cost, we compile its monotonic
relaxation + into a constraint optimization problem COP+ = (X , ) over variables X ,
functions , and the global objective to minimize  (X ) such that, if + is unsolvable,
then all the assignments to X evaluate the objective function to , and otherwise, the
optimum of the objective is obtained on and only on the assignments to X that correspond
to optimal plans for + . The specic construction of COPs here relies on the property of
monotonic relaxations of DAG-structured FDR tasks expressed by Lemma 1.
798

fiThe Complexity of Optimal Monotonic Planning

Given an FDR task  = V, A, I, G, cost as in the theorem, COP+ = (X , ) is specied
as follows. For each state variable v  V ,
 X contains a variable xv with domain D(xv ) = D (v), that is, the eective domain
of v in + , and
  contains a non-negative, extended real-valued function v over v and its immediate
ancestors in the causal graph, that is, over {xv }  {xw | w  pred(v)}.
Assuming an arbitrary xed ordering {w1 , . . . , wk } of vs immediate ancestors pred(v), for
each pred  D (pred(v)) = D (w1 )      D (wk ), let DTG(v, + |pred ) denote the
restriction of DTG(v, + ) to only edges supported by pred : an edge marked with an
action a remains in DTG(v, + |pred ) if and only if, for each w  V(pre(a))\{v}, pre(a)[w] 
pred [w]. Given that, for each eective value   D (v) and each pred  D (pred(v)),
v (, pred ) =  if  is not reachable from I[v] in DTG(v, + |pred ), or if G[v] is specied
yet G[v]  . Otherwise, v (, pred ) equals the cost of a cheapest path from I[v] to 
in DTG(v, + |pred ). In what follows, the action sequence inducing that cheapest path is
denoted by (|pred ).
The properties of COP+ constructed as above for the problems in the scope of Theorem 5 are as follows.
(1) The constraint network of COP+ corresponds to (the undirected graph induced by)
the moral graph of the causal graph CG . Since both in-degree and tree-width of CG
are bounded by a constant, then so is the tree-width COP of the constraint network. As
we mentioned before, given a graph G, a tree decomposition of a graph G with width
c  tw(G) for a low constant c can be found in time polynomial in the size of G and
exponential only in tw(G). Hence, since COP = O(1), COP+ can be solved in time
polynomial in the size of its explicit representation.
(2) Since  is M-unfoldable, the domain size of each COP variable is O(poly(||||)). Together with (1), that implies that COP+ can be solved in time O(poly(||||)).
(3) By the denitions of monotonic relaxation and of domain transition graphs, explicit
description of all DTG(v, + ) for an M-unfoldable FDR task  is polynomial in ||||.
Hence, the construction of functional components , and thus of the entire COP+ , can
be done in time O(poly(||||)).
(4) By the construction of COP+ and Lemma 1, for any topological ordering {v1 , . . . , vn }
of V , every complete assignment  to the COP variables X such that

v ([v], [pred(v)]) =  = 
vV

induces a relaxed plan
([v1 ]|[pred(v1 )])  . . .  ([vn ]|[pred(vn )])
of cost  for , and vice versa. Thus, if + is solvable, then, given an assignment  
to X on which the minimization objective of COP+ is obtained, we can derive from it
(in O(poly(||||)) time) an optimal relaxed plan for . Otherwise, if + is unsolvable,
then all the assignments to X evaluate the objective function to .
799

fiDomshlak & Nazarenko

ONML
HIJK
v1


HIJK
ONML
v2


HIJK
ONML
v3

/ d1,2

d1,1
d1,1

d2,1

d1,2
d1,3

d2,2
d2,3

ONML
HIJK
HIJK
HIJK
/ ONML
/ ONML
o
d1,1 Qo Q
d1,3
d
BB QQQ | 1,2 BB
mm|
m
m
BB Q|Q|Q
B
|
m
m
BB|| QQQmmmmBBB|||
|B
mmQQQQ ||BB
|| BBmmm
Q| B
 }|||mmmmm BB!  }||| QQQQQBB! 
mv
(
HIJK
ONML
HIJK
HIJK
/ ONML
o
/ ONML
d2,1 Qo Q
d
d2,3
m
BB QQQ | 2,2 BB
m
m
|
m
BB Q|Q|Q
B
|
m
m
BB|| QQQmmmmBBB|||
|B
mmQQQQ ||BB
|| BBmmm
Q| B
 }|||mmmmm BB!  }||| QQQQQBB! 
mv
(
HIJK
ONML
HIJK
HIJK
/ ONML
/ ONML
d3,1 o
d3,2 o
d3,3

d1,1

#

/ d2,2
;

d2,1

d3,1

/ d1,3

d1,2
d1,3

#
/ d2,3
;

d2,1

#

/ d3,2
;

d2,2
d2,3

#
/ d3,3
;

(a)

(b)

Figure 1: Illustration for the example used in the discussion of Theorem 5.
This nalizes the proof of Theorem 5, and Corollary 4 below generalizes it to digraphs that
are almost DAGs.

Note that Theorem 5 provides yet another example of exploiting value grouping induced by the FDR representation of the planning tasks. Consider a planning task family
(n) = V, A, I, G, cost in which V = {v1 , . . . , vn }; for 1  i  n, D(vi ) = {di,1 , . . . , di,n };
I[vi ] = di,1 ; G[vi ] = di,n ; and actions

A=
{ai,k,j = {vi  di,k , vi1  di1,j }, {vi  di,k+1 }}.
|
{z
} |
{z
}
1i,jn
1kn1

pre

e

Figure 1a illustrates the causal graph and the domain transition graphs for the task (3) .
The causal graphs in (n) form directed chains, and thus both the tree-width and node
in-degree of the causal graphs in (n) equal 1. Likewise, the eective domain D (vi ) of
each vi in +
(n) is of size n, and thus the tractability of optimal relaxed planning for (n)
is directly covered by Theorem 5. In contrast, if each variable value di,j is represented by
a separate propositional variable, inducing the causal graph as in Figure 1b, then both the
tree-width and node in-degree in the family of the induced causal graphs are of the order
of n, and in fact, the causal graph is not even acyclic. Therefore, Theorem 5 is no longer
directly applicable.
Corollary 4 Let  be an innite set of M-unfoldable FDR tasks. If the size of the strongly
connected components, the tree-width, and the node in-degree of the causal graphs in  are
all bounded by a constant, then optimal relaxed planning for  is polynomial-time.
Proof: Any FDR task  with a causal graph whose strongly connected components (SCCs)
are of size at most k can be compiled into an equivalent FDR task m with a directed acyclic
causal graph by merging the variables of each SCC into a single variable (Seipp & Helmert,
2011). This compilation can be done in time polynomial in |||| and exponential only in k.
The causal graph CGm is obtained from the causal graph CG by contracting all nodes of
each SCC. Since node contraction can only decrease the tree-width, we have tw(CGm ) 
800

fiThe Complexity of Optimal Monotonic Planning

tw(CG ), and thus tw(CGm ) = O(1). Likewise, if the maximal node in-degree in CG
is c, then the maximal node in-degree in CGm is ck, and thus it is also O(1). Finally,
the domain of a variable u in m that is obtained by merging some s SCC {v1u , . . . , vku },
k   k, corresponds to the cross-product of the domains of these SCCs variables. It is
easy to verify from Denition 2 that D (u)  D (v1u )      D (vku ), and thus, together
with k = O(1), M-unfoldability of all v1u , . . . , vku implies |D (u)| = O(poly(||||)), tting3
Denition 3.

Returning now to the statement of Theorem 5, a few comments on its extensions beyond
Corollary 4 are in place. First, note that Theorem 5 as it is does not generalize Theorem 4 for
fork-structured FDR tasks because the latter allows for general, and not only M-unfoldable,
leaf variables. However, it is easy to see that Theorem 5 can be stratied to allow for
such generalization. Since no other variable depends on a leaf v, all we care about in v is
achieving G[v]. Thus, for any optimal relaxed plan , v induces a simple path, and not a
general arborescence, in DTG(v, ). Hence, using binary-valued (G[v] achieved: yes/no)
COP variables xv for the DAG leaf v, and specifying the respective functions v using the
procedure in the proof of Theorem 4, the scope of Theorem 5 is extended to generalize
Theorem 4.
Second, in the case of DAG-structured causal graphs, Denition 2 of eective domains,
on which the notion of M-unfoldability is based, is overly conservative. Instead of deriving
the eective domains for the variables in isolation, we can derive them in a topological order
of the causal graph, given the already derived eective domains of the immediate ancestors.
In specic domains, this can substantially extend the scope of M-unfoldability for FDR tasks
with DAG causal graphs.
Finally, Theorem 5 requires not only the tree-width, but also the in-degree of the causal
graph to be bounded by a constant. As such an extra condition, the latter is sucient,
but not necessary. Below, under the notion of prevail decomposability, we list two local
properties of state variables that guarantee polynomial-time optimal relaxed planning on
arbitrary acyclic causal graphs with a xed tree-width. It is very likely that other such
helpful properties exist, and thus the boundaries of prevail decomposability can be further
extended. Nicely, optimal relaxed planning will remain polynomial-time even if dierent
state variables satisfy dierent such properties, and even if some state variables are not
prevail decomposable, but have xed in-degree.
Denition 5 Let  be an innite set of FDR tasks, and  be a property of state variables
that, for each task   , partitions the state variables of  into those that satisfy 
(referred as -variables), and those that do not satisfy . We say that -variables in  are
prevail decomposable if, for every task    and every -variable v of , either
(i) the set PRv = {pre(a)[pred(v)] | a  Av } of preconditions of actions Av on variables
other than v is of size O(log(||||)), or
3. Note that it is possible that D (u)  D (v1u )  D  (vku ). For instance, if V = {x, y}, D(x) = D(y) =
{0, 1}, I = {x  0, y  0}, G = {x  1, y  1}, and A = {{x  0, y  1}, {x  1}, {y  0, x 
1}, {y  1}}, then D (x) = {{0}, {0, 1}}, D (y) = {{0}, {0, 1}}, but D (xy) = {{x  0, y  0}}. In
fact, this example can be easily extended so that the merged variable xy is M-unfoldable, while both
x and y are not.

801

fiDomshlak & Nazarenko

(ii) the set ARBv of arborescence subgraphs of DTG(v, ) rooted in I[v], and covering G[v]
if v  V(G), is of size O(log(||||)).
We say that the tasks in  are prevail decomposable if all state variables in  are
prevail decomposable.
Note that prevail decomposability of type (i) is tangential to the notion of M-unfoldability:
neither does the former imply the latter, nor the other way around. In contrast, prevail
decomposability of type (ii) is a direct stratication of M-unfoldability because the latter
considers a compacted version DTG (v, ) of DTG(v, ), and furthermore, allows for a
polynomial (rather than logarithmic) bound on the number of arborescence subgraphs.
Theorem 6 Let  be an innite set of M-unfoldable, prevail decomposable FDR tasks with
directed acyclic causal graphs. If the tree-width of the causal graphs in  is bounded by a
constant, then optimal relaxed planning for  is polynomial-time.
Proof: Here as well, our proof of Theorem 6 follows the planning-to-COP compilation
methodology. However, the compilation under prevail decomposability must dier from the
one in the proof of Theorem 5 since we can no longer rely on xed in-degree of the causal
graphs to derive the xed tree-width of the constraint networks from the xed tree-width
of the causal graphs. For ease of presentation, we rst specify the compilation assuming
all the state variables satisfy the specic condition (i) of Denition 5. We then extend the
specication to cover the alternative condition (ii) of Denition 5 as well.
For our construction we need to establish a certain graph-theoretic formalism and a
respective notation. Let G = (V, E) be a graph, and let N : V  2V be the node neighborhood function of G, that is, N (v) = {u | {v, u}  E}. The splitting of v  V with
the support S  N (v) transforms G by adding new vertex v  and edge {v, v  }, and, for all
u  S, removing edge {v, u} and adding edge {v  , u}. Informally, splitting can be seen as
a (non-unique) reverse process to edge contraction, and the nodes added to G by splittings
are called stretch nodes. For example, Figure 2b depicts the graph obtained from the graph
in Figure 2a by splitting the node v with the support of {x, y, u}  N (v) = {x, y, u, w},
adding a stretch node v(1) .
A graph G  is an expansion of G if G can be transformed to G  by a sequence of splittings.
For example, Figure 2c depicts the graph obtained from the graph in Figure 2a by rst
splitting the node v with the support of {x, y}  N (v) = {x, y, u, w}, and then splitting v
with the support of {u, w}  N (v) = {v(1) , u, w}. More specically, G  = (V  , E  ) is an
expansion of G = (V, E) if and only i there exist functions f : V   V and g : E  E 
such that
(a) For v  V , the subgraph of G  induced by f 1 (v) = {v   V  | f (v  ) = v} is a tree, and
(b) For {v, u}  E, if g({v, u}) = {v  , u } then f (v  ) = v and f (u ) = u.
The tree subgraph T  (v) of G  induced by f 1 (v) is called the stretch tree of v. There is a
bijective correspondence between the leaves of T  (v) and the neighbors N (v) of v via the
function g: for each {v, u}  E, there is exactly one edge in E  , g({v, u}), that directly
connects between T  (v) and T  (u). In other words, f induces a partition of V  , with each
part being the stretch tree T  (v) for some v  V , and g maps the edges of G to those edges
802

fiThe Complexity of Optimal Monotonic Planning

x-

y

-
-- 
- 
v/
  ///
//



u

w

(a)

x






v(1)

y

y

x ==

==

v(1)
v

x(1)

v

w

u(1)

@@
@

u

(b)

v(1)

y(1)

v

v(2)
u

y

x

w

(c)

v(2)

u

w(1)
w

(d)

Figure 2: Node splitting and graph expansions.
of G  that connect between the parts of this partition. Finally, if the node degree in G 
is bounded by 3, then G  is called sub-cubic. For example, the expansion in Figure 2c is
sub-cubic, while the expansion in Figure 2b is not.
The above terminology is mostly adopted from Markov and Shi (2011). In addition, we
call an expansion G  of G fully separating if the stretch trees in G  are connected only at
the stretch nodes, and not at the original nodes, of G. That is, G  = (V  , E  ) is a fully
separating expansion of G = (V, E) if there exists a function  : V  V  such that, for each
v  V , it holds that  (v)  f 1 (v) and, for each edge { (v), v  }  E  , v   f 1 (v). For
example, the expansion in Figure 2c is not fully separating, while the expansion in Figure 2d
is.4
Given the above notion of graph expansion, if we now have a problem to be solved on a
graph G, and eciency of solving this problem depends badly, possibly exponentially, on the
node degree in G, then we can try to reformulate this problem over a sub-cubic expansion
G  of G. However, if the eciency of the problem in question also depends badly on the
graphs tree-width, then the tree-width of G  should be as close as possible to that of G.
(The tree-width of G  cannot be smaller than the tree-width of G because G  has G as a
minor.) While there are numerous ecient schemes for sub-cubic graph expansion, most
of them can create expansions of arbitrarily larger tree-width than that of their expandees.
Recently, however, Markov and Shi (2011) showed that this negative side-eect can always
be eliminated, and sometimes even eciently.
Theorem 3.1 of Markov and Shi (2011) states their main result: there is a polynomialtime algorithm that, given a graph G and its tree decomposition of width w, computes a
sub-cubic expansion G  of G with tw(G  )  w + 1. In particular, this result implies that
any graph G admits a sub-cubic expansion whose tree-width is no more than tw(G) + 1, and
that this expansion can be constructed eciently for arbitrary graph families with a xed
4. Without any eective loss of generality, one can assume that  (v) = v, that is, the nodes in V are never
mapped to stretch nodes, but only to their mirrors in V  . However, here we decided to stick to the
explicit use of the  function to avoid confusion between the nodes V and the identically named nodes
in V  .

803

fiDomshlak & Nazarenko

tree-width.5 Moreover, it is straightforward to verify that any expansion can be transformed
in linear time into a fully separating expansion, without increasing the tree-width and node
degrees. Therefore, Theorem 3.1 of Markov and Shi (2011) holds even if we request fully
separating sub-cubic expansions.6
Our COP compilation exploits such tree-width friendly expansions of causal graphs.
Since our focus in Theorem 5 is on digraph families C with the tree-width in C being
bounded by a constant, by Theorem 3.1 of Markov and Shi (2011), any digraph G  C
can be eciently associated with a fully separating sub-cubic expansion G  with tree-width
 tw(G) + 1. Note, however, that the construction of G  ignores the orientation of the arcs
in G: while G is a digraph, G  is an undirected graph, and its construction is based on a
tree decomposition of the undirected graph induced by G. Since our COP compilation does
depend on the direction of the arcs in the causal graph, we will have to restore in G  the
relevant bits of this information about G.
But rst we give some auxiliary notation.
 Given a fully separating expansion G  of (the undirected graph induced by) a digraph
G = (V, E), we consider stretch trees T  (v) as if rooted in the respective nodes  (v),
and by Tv (v) we denote the subtree of T  (v) rooted at v   T  (v).
 Recalling that the graphs G of our interest here are DAGs, and that the leaves of T  (v)
are bijectively associated with the neighbors N (v) of v in G, let N in (v), N out (v) 
N (v) be the partition of vs neighbors in G into immediate ancestors and immediate
descendants of v, respectively.
out (v) we denote the respective neighbors of
 By Nvin (v)  N in (v) and Nvout
 (v)  N
v that are associated with the leaves of the stretch subtree Tv (v). That is, we have
 of T  (v) and some u  T  (u),
u  Nvin (v)  Nvout
 (v) if and only if, for some leaf v
v





G contains edge {v , u } (i.e., g({v, u}) = {v , u }).

We now proceed with specifying our COP compilation for the FDR tasks as in Theorem 6.
Given such a task  = V, A, I, G, cost, let G  = (V  , E  ) be a fully separating, sub-cubic
expansion G  of the causal graph CG with tree-width  tw(CG ) + 1. The respective
constraint optimization problem COP+ = (X , ) is specied as follows.
For each v  V , X contains a variable xv that is schematically associated with the root
 (v) of T  (v), and a variable xv /v for each stretch-tree node v   T  (v) \ { (v)}. The
domain of the variable xv is
{
{ |   D (v), G[v]  }, v  V(G)
D(xv ) =
.
(7)
D (v),
otherwise
The domain of each variable xv /v is
D(xv /v ) = {0, 1}mv  D(xv ),

(8)

5. While determining optimal tree decomposition of a graph is NP-hard, it can be done in polynomial time
for graph families having xed tree-width (Bodlaender, 1996).
6. Requiring the expansions to be fully separating is more of a luxury than a need: relying on this property
simplies the compilation scheme described next, but that scheme can also be modied so to not require
full separation.

804

fiThe Complexity of Optimal Monotonic Planning

where mv = |PRv |. That is, D(xv /v ) is a set of some pairs , , with   {0, 1}mv and  
D (v). For each   {0, 1}mv , by DTG(v, + |) we denote the restriction of DTG(v, + )
to edges supported by : Assuming an arbitrarily xed numbering of the elements of
PRv = {pr1 , . . . , prmv }, an edge marked with an action a such that pre(a)[pred(v)] = pri 
PRv remains in DTG(v, + |) if and only if [i] = 1. For   D (v), by c(|) we denote
the cost of a cheapest path from I[v] to  in DTG(v, + |); in case of unreachability,
c(|) = .
Similarly to the way each node of the causal graphs expansion G  is associated with a
COP variable, it is also associated with a non-negative, extended real-valued function. For
each state variable v  V :
(I) The stretch tree root  (v) is associated with a function v . The scope of v is
Q(v ) = {xv }  {xv /v | v   N  ( (v))},


where N  : V   2V is the node neighborhood function in G  . Note that |N  ( (v))| 
3 because G  is sub-cubic. For each   D(xv ) and each assignment  = {v , v }v N  ( (v))
to Q(v ) \ {xv },
{
c(|H() ), v   N  ( (v)) : v = 
v (, ) =
,
(9)
,
otherwise
where H() is the Hadamard, or entrywise, product of all the indicator vectors
{v }v N  ( (v)) in .
(II) Each leaf stretch node v   T  (v) is associated with a 0/ indicator function v /v ,
the scope of which is
Q(v /v ) = {xv /v , xu /u },
where u is the leaf node of T  (u) such that g({v, u}) = {v  , u }. Here the orientation
of the arcs within the causal graph CG matters. Specically, if {v, u} represents a
causal graph arc from u to v , then v /v zeroes on the assignments (v , , u , u )
such that
 the vector v enables all and only all the preconditions in PRv that are, passively
or actively, supported by the value u of u, and
 the vector u enables all the preconditions PRu , since v does not condition the
u-changing actions in our DAG-structured planning task .
That is, for each v , v   D(xv /v ) and each u , u   D(xu /u ),


0,

u = 1 
v /v (v , v , u , u ) =
1  i  mv : (v [i] = 0)  (u  V(pri )  pri [u]  u ) .


, otherwise
(10)
Note that the value of v /v is independent of the v component of v , v , u , u .
805

fiDomshlak & Nazarenko

Otherwise, if {v, u} represents a causal graph arc7 from v to u, then conversely,


0, v = 1 




v /v (v , v , u , u ) =
1  i  mu : (u [i] = 0)  (v  V(pri )  pri [v]  v ) .


, otherwise
(11)
(III) Each internal stretch node v   T  (v) is also associated with a 0/ indicator function
v /v , but its scope comprises the variable xv /v , together with all the variables xv /v
that correspond to the immediate descendants of v  in Tv (v). That is,
Q(v /v ) = {xv /v }  {xv /v | v   N  (v  )  Tv (v)}.
For each v , v   D(xv /v ) and each assignment  = {v , v } to Q(v /v ) \
{xv /v }, v /v zeroes on (v , v , ) if and only if the vector v enables all and
only all the preconditions in PRv that are (passively or actively) supported by all the
immediate ancestors u  Nvin (v) via the values these ancestors commit to at the
respective stretch-tree root COP variables xu . That is,
{
0, v = H()  v   N  (v  )  Tv (v) : v = v
v /v (v , v , ) =
. (12)
, otherwise
In other words, starting with Eqs. 10 and 11, the support provided by Nvin (v) to v is
communicated to v by the indicator vectors v in , and it is aggregated/summarized
in Eq. 12 by the Hadamard vector product H() .
Complexity-wise, the properties of the COP+ constructed as above are as follows.
(1) The constraint network of COP+ is obtained from the expansion G  by replacing each
 be a graph
subgraph of G  induced by nodes Q( ) with a clique over Q( ). Let GQ
with nodes Q( ), x  X , and edges {Q( ), Q( )} for (only) all pairs ,  such that
 is isomorphic to
Q( )  Q( ) = . By the construction of the COP functions , GQ

G . Likewise, since |Q( )  Q( )|  1 for all pairs of functions  ,  , the tree-width
 )  max |Q( )|. Together that implies
COP of the constraint network is  tw(GQ



COP  tw(GQ
)max |Q( )| = tw(G  )max |Q( )|  4tw(G  )  4(tw(CG )+1) = O(1).




Hence, since nding a constant-factor approximation to the graphs tree-width is polynomial in the size of the graph and exponential only in its tree-width, COP+ can be
solved in time polynomial in the size of its representation.
(2) By M-unfoldability of  and Eq. 7, for v  V , the domain size of each COP variable xv
is O(poly(||||)). The domain of each stretch node variable xv /v is a cross-product of
two sets. The size of the second set in Eq. 8 is O(poly(||||)) because so is the domain
size of the respective variable xv . The size of the rst set in Eq. 8 is 2|PRv | and, by
Denition 5, 2|PRv | = 2O(log(||||)) = O(poly(||||)). Together with (1), this implies that
COP+ can be solved in time O(poly(||||)).
7. Since Theorem 6 is devoted to directed acyclic causal graphs, we do not address here the case in which
CG contains both (v, u) and (u, v).

806

fiThe Complexity of Optimal Monotonic Planning

(3) By the denition of monotonic relaxation and the denition of domain transition graphs,
explicit description of all DTG(v, + ) for an M-unfoldable FDR task  is polynomial
in ||||. Hence, the construction of functional components  as in Eqs. 9-12, and thus
of the entire COP+ , can be done in time O(poly(||||)).

We now proceed to prove the correctness of COP+ = (X , ). That is, we will prove
that if + is unsolvable, then all the assignments to X evaluate the objective function
 (X ) to , and otherwise, the objective is minimized on and only on the assignments
to X that correspond to optimal plans for + .
First, given an assignment  to X such that  () < , we show that  induces
a valid plan  for + of cost  (). By Eqs. 9 and 12,  () <  implies that,
for each v  V and each xv /v in the stretch tree T  (v), [xv /v ]  {, [xv ]}. That is,
the relaxation value of v assigned by  to xv is consistently propagated to all the nodes of
T  (v), and in particular, to its leaves.
Let a leaf node xv /v in T  (v) connect T  (v) with T  (u) for some causal graph neighbor
u  N (v), and let [xv /v ] = v , [xv ]. If u  N in (v), then by Eq. 10, v /v () = 
implies that v encodes all and only all preconditions in PRv that are not disabled by the
relaxation value [xu ] of u. Otherwise, if u  N out (v), then, by the DAG structure of CG ,
u has nothing to do with preconditions of actions aecting v + , and by Eq. 11, v /v () = 
implies that v = 1 trivially enables all the preconditions in PRv .
Given that, for each (leaf or internal) stretch node in T  (v), let [xv /v ] = v , [xv ].
By the conjunctive structure of the preconditions in FDR and the Hadamard vector product
in Eq. 12, v /v () =  implies that v encodes all and only all the preconditions in PRv
that are notdisabled by the values [xu ] of all u  Nvin (v). Finally, by the denition of graph
expansion, v N  ( (v)) Nvin (v) = N in (v). Thus, by Eq. 11, v () =  implies that [xv ] is
reachable from I[v] in the properly restricted domain transition graph DTG(v, + |[Xv ])
where Xv = {xu | u  pred(v)}, and that v () equals the cost of the cheapest such
path. The rest follows from the DAG structure of CG and Lemma 1. The proof of the
opposite direction is straightforward from the construction of COP+ and the serialization
Lemma 1.


In our nal note we return to the denition of prevail decomposability, and specically, to
its second sucient condition that, for all state variables v  V , the set ARBv of arborescence
sugraphs of DTG(v, ) rooted in I[v], and covering G[v] if v  V(G), is of size O(log(||||)).
While this condition was not addressed in our COP construction so far, switching from
the rst to the second sucient condition of prevail decomposability requires only that
the semantics of the indicator vectors  be changed: Instead of encoding the support that
pred(v) provide to individual preconditions of actions in Av , they should encode the support
that pred(v) provide to the entire arborescences ARBv in DTG(v, ). Since the condition
requires |ARBv | = O(log(||||)), this support can be encoded and reasoned about eciently.
Note that the choice between the two conditions can be made on a variable-by-variable basis,
and thus the two conditions are not mutually exclusive but complementary.
807

fiDomshlak & Nazarenko


causal graph
extra condition
xed size
 = O(1)
|D(v)| = O(1)
 = O(1) & DAG |D(v)| = O(1)
 = O(1) & DAG in-degree = O(1)
 = O(1) & DAG

FDR
in P?
Yes
No
No
No
No

MFDR
in P?
No
Yes
Yes
Yes, if M-unfoldable
Yes, if M-unfoldable and
prevail decomposable

Th.
Th.
Th.
Th.
Th.

2
3
3
5
6

Table 1: A summary of our main results for optimal MFDR planning, contrasted with the
previously established complexity of the corresponding fragments of optimal FDR
planning. In the table,  is a fragment of FDR/MFDR planning, characterized
in terms of the causal graph tree-width , causal graph in-degree, and upper
bound |D(v)| on the size of the variable domains. M-unfoldability and prevail
decomposability are two properties of MFDR tasks that have been introduced and
exploited in this work.

6. Summary and Future Work
We took a step towards a ne-grained classication of worst-case time complexity of optimal
monotonic planning, with a focus on what gets harder and what gets easier when
switching from optimal planning to optimal relaxed planning, in the context of nite-domain
planning task representations. Along the way, we established both negative and positive
results on the complexity of some wide fragments of this problem, with the negative results
emphasizing the role of the structure of state variable domains, and the positive results
emphasizing the role of the causal graph topology. Table 1 lists our main results for optimal
monotonic planning, contrasted with the complexity of the corresponding fragments of
optimal FDR planning. The key conclusions are as follows.
1. Optimal planning for monotonic relaxations is hard even if restricted to very simple
causal graph structures, but the complexity there stems from the size of the state
variable domains.
2. Restricted to planning tasks with constant-bounded state variable domains, the problem becomes solvable in time exponential only in the tree-width of the causal graph,
while it is known to be very much not so even for non-optimal regular planning.
3. While the tree-width of digraphs is independent of the edge directions, exploiting
the directed structure of the causal graph together with its tree-width allows the
computational tractability to be expanded beyond xed-size state variable domains.
The latter conclusion opens an interesting venue for further investigation. While we
addressed only directed acyclic causal graphs, the scope of tractability can perhaps be expanded by exploiting some existing directed notions of graph width (Johnson, Robertson,
Seymour, & Thomas, 2001; Hunter & Kreutzer, 2008; Berwanger et al., 2012). This might
808

fiThe Complexity of Optimal Monotonic Planning

be especially appealing because the tree-width of most standard planning benchmarks under their natural FDR encodings does not appear to be xed across the respective families
of the tasks.
Another interesting direction would be to examine the results and techniques introduced here in a wider context: that of the recently introduced framework of red-black
relaxations (Katz et al., 2013b). In red-black (RB) planning, the variables are partitioned
into two sets: the black set adopts the regular, value switching semantics of FDR, while
the red set adopts the monotonic, value accumulating semantics of MFDR. In the context
of satiscing planning, complexity analysis of RB planning complexity through the lens of
causal graph topology has already led to some advances in the practice of heuristic-search
planning (Katz et al., 2013a; Katz & Homann, 2013). To take a similar step in optimal
planning, admissible heuristics that are based on RB relaxations must be devised. That, in
turn, calls for identifying tractable fragments of optimal RB planning. We are cautiously
optimistic that some of the results and techniques presented in this paper will be found valuable in the context of RB planning as well. For instance, the positive result in Theorem 4
for fork-structured MFDR tasks can be straightforwardly extended to RB tasks with only
root variables taking the monotonic semantics and all the leaves keeping their regular, FDR
semantics. Similarly, the positive result in Theorem 5 for DAG-structured MFDR tasks can
be straightforwardly extended to RB tasks with black-painted leaf variables. An interesting
question in that respect is whether computational tractability of optimal RB planning can
be extended to causal graphs in which some internal nodes get to keep their original FDR
semantics.

Acknowledgments
The work was partly supported by the Israel Science Foundation (ISF) grant 1045/12, and
the EOARD grant FA8655-12-1-2096.

References
Amir, E. (2010). Approximation algorithms for treewidth. Algorithmica, 56 (4), 448479.
Arnborg, S., Cornell, D. G., & Proskurowski, A. (1987). Complexity of nding embeddings
in a k-tree. SIAM Journal of Algebraic Discrete Methods, 8, 277284.
Backstrom, C., & Klein, I. (1991). Planning in polynomial time: The SAS-PUBS class.
Computational Intelligence, 7 (3), 181197.
Backstrom, C., & Nebel, B. (1995). Complexity results for SAS+ planning. Computational
Intelligence, 11 (4), 625655.
Becker, A., & Geiger, D. (1996). A suciently fast algorithm for nding close to optimal
junction trees. In Proceedings of the 12th Conference on Uncertainty in Articial
Intelligence (UAI), pp. 8189.
Berwanger, D., Dawar, A., Hunter, P., Kreutzer, S., & Obdzralek, J. (2012). The DAG-width
of directed graphs. Journal of Combinatorial Theory, Series B, 102 (4), 900923.
Betz, C., & Helmert, M. (2009). Planning with h+ in theory and practice. In Proceedings
of the 32nd Annual German Conference on Articial Intelligence (KI), pp. 916.
809

fiDomshlak & Nazarenko

Bodlaender, H. L. (1996). A linear-time algorithm for nding tree-decompositions of small
treewidth. SIAM Journal of Computing, 25 (6), 13051317.
Bonet, B., & Gener, H. (2001). Planning as heuristic search. Articial Intelligence, 129 (1
2), 533.
Bonet, B., & Helmert, M. (2010). Strengthening landmark heuristics via hitting sets. In
Proceedings of the 19th European Conference on Articial Intelligence, pp. 329334,
Lisbon, Portugal.
Brafman, R. I., & Domshlak, C. (2006). Factored planning: How, when, and when not.
In Proceedings of the 18th National Conference on Articial Intelligence (AAAI), pp.
809814, Boston, MA.
Brafman, R. I., & Domshlak, C. (2013). On the complexity of planning for agent teams and
its implications for single agent planning. Articial Intelligence, 198, 5271.
Bylander, T. (1994). The computational complexity of propositional STRIPS planning.
Articial Intelligence, 69 (1-2), 165204.
Cai, D., Homann, J., & Helmert, M. (2013). Enhancing the context-enhanced additive
heuristic with precedence constraints. In Proceedings of the 19th International Conference on Automated Planning and Scheduling (ICAPS), pp. 5057.
Chen, H., & Gimenez, O. (2010). Causal graphs and structurally restricted planning. Journal of Computer and System Sciences, 76 (7), 579592.
Dechter, R. (2003). Constraint Processing. Morgan Kaufmann.
Domshlak, C., & Dinitz, Y. (2001). Multi-agent o-line coordination: Structure and complexity. In Proceedings of Sixth European Conference on Planning (ECP), pp. 277288.
Downey, R. G., & Fellows, M. R. (1999). Parameterized Complexity. Springer-Verlag, New
York.
Edelkamp, S. (2001). Planning with pattern databases. In Proceedings of the European
Conference on Planning (ECP), pp. 1324.
Fabre, E., Jezequel, L., Haslum, P., & Thiebaux, S. (2010). Cost-optimal factored planning:
Promises and pitfalls. In Proceedings of the International Conference on Automated
Planning and Scheduling (ICAPS), pp. 6572.
Fikes, R. E., & Nilsson, N. (1971). STRIPS: A new approach to the application of theorem
proving to problem solving. Articial Intelligence, 2, 189208.
Flum, J., & Grohe, M. (2006). Parameterized Complexity Theory. Springer-Verlag.
Fox, M., & Long, D. (2001). Stan4: A hybrid planning strategy based on subproblem
abstraction. AI Magazine, 22 (3), 8184.
Fox, M., & Long, D. (2003). PDDL2.1: An extension to PDDL for expressing temporal
planning problems. Journal of Articial Intelligence Research, 20, 61124.
Gimenez, O., & Jonsson, A. (2009a). The inuence of k-dependence on the complexity of
planning. In Proceedings of the 19th International Conference on Automated Planning
and Scheduling (ICAPS), pp. 138145.
810

fiThe Complexity of Optimal Monotonic Planning

Gimenez, O., & Jonsson, A. (2009b). Planning over chain causal graphs for variables with
domains of size 5 is NP-hard. Journal of Articial Intelligence Research, 34, 675706.
Halin, R. (1976). s-functions for graphs. Journal of Geometry, 8, 171186.
Helmert, M. (2004). A planning heuristic based on causal graph analysis. In Proceedings
of the Fourteenth International Conference on Automated Planning and Scheduling
(ICAPS), pp. 161170.
Helmert, M. (2006). The Fast Downward planning system. Journal of Articial Intelligence
Research, 26, 191246.
Helmert, M. (2009). Concise nite-domain representations for PDDL planning tasks. Articial Intelligence, 173, 503535.
Helmert, M., & Domshlak, C. (2009). Landmarks, critical paths and abstractions: Whats
the dierence anyway?. In Proceedings of the 19th International Conference on Automated Planning and Scheduling (ICAPS), pp. 162169.
Helmert, M., & Gener, H. (2008). Unifying the causal graph and additive heuristics. In Proceedings of the 18th International Conference on Automated Planning and Scheduling
(ICAPS), pp. 140147.
Helmert, M., Haslum, P., & Homann, J. (2007). Flexible abstraction heuristics for optimal
sequential planning. In Proceedings of the 17th International Conference on Automated
Planning and Scheduling (ICAPS), pp. 200207.
Helmert, M., & Mattmuller, R. (2007). Accuracy of admissible heuristic functions in selected planning domains. In Proceedings of the 23rd AAAI Conference on Articial
Intelligence, pp. 938943.
Homann, J. (2005). When ignoring delete lists works: Local search topology in planning
benchmarks. Journal of Articial Intelligence Research, 24, 685758.
Homann, J. (2011). Analyzing search topology without running any search: On the connection between causal graphs and h+ . Journal of Articial Intelligence Research, 41,
155229.
Homann, J., & Nebel, B. (2001). The FF planning system: Fast plan generation through
heuristic search. Journal of Articial Intelligence Research, 14, 253302.
Hunter, P., & Kreutzer, S. (2008). Digraph measures: Kelly decompositions, games, and
orderings. Theoretical Computer Science, 399 (3), 206219.
Johnson, T., Robertson, N., Seymour, P. D., & Thomas, R. (2001). Directed tree-width.
Journal of Combinatorial Theory, Series B, 82 (1), 138154.
Jonsson, P., & Backstrom, C. (1998). State-variable planning under structural restrictions:
Algorithms and complexity. Articial Intelligence, 100 (12), 125176.
Karp, R. (1972). Reducibility among combinatorial problems. In Complexity of Computer
Computations, pp. 85103. Plenum Press, New York.
Katz, M., & Domshlak, C. (2008). New islands of tractability of cost-optimal planning.
Journal of Articial Intelligence Research, 32, 203288.
811

fiDomshlak & Nazarenko

Katz, M., & Domshlak, C. (2010). Implicit abstraction heuristics. Journal of Articial
Intelligence Research, 39, 51126.
Katz, M., & Homann, J. (2013). Red-black relaxed plan heuristics reloaded. In Proceedings
of the 6th Annual Symposium on Combinatorial Search (SOCS), pp. 105113.
Katz, M., Homann, J., & Domshlak, C. (2013a). Red-black relaxed plan heuristics. In
Proceedings of the 27th AAAI Conference on Articial Intelligence (AAAI), pp. 489
495.
Katz, M., Homann, J., & Domshlak, C. (2013b). Who said we need to relax all variables?. In Proceedings of the 23rd International Conference on Automated Planning
and Scheduling (ICAPS), pp. 126134.
Katz, M., & Keyder, E. (2012). Structural patterns beyond forks: Extending the complexity
boundaries of classical planning. In Proceedings of the 26th AAAI Conference on
Articial Intelligence (AAAI), pp. 17791785.
Keyder, E., & Gener, H. (2008a). Heuristics for planning with action costs revisited. In
Proceedings of the 18th European Conference on Articial Intelligence (ECAI), pp.
588592.
Keyder, E., & Gener, H. (2008b). Heuristics for planning with action costs revisited. In
Proceedings of the 18th European Conference on Articial Intelligence, pp. 588592.
Markov, I. L., & Shi, Y. (2011). Constant-degree graph expansions that preserve treewidth.
Algorithmica, 59, 461470.
McDermott, D. V. (1999). Using regression-match graphs to control search in planning.
Articial Intelligence, 109 (1-2), 111159.
Nissim, R., & Brafman, R. I. (2012). Multi-agent A for parallel and distributed systems.
In Proceedings of the 11th International Conference on Autonomous Agents and Multiagent Systems (AAMAS), pp. 12651266.
Nissim, R., Brafman, R. I., & Domshlak, C. (2010). A general, fully distributed multiagent planning algorithm. In Proceedings of the 9th International Conference on
Autonomous Agents and Multiagent Systems (AAMAS), pp. 13231330.
Pednault, E. (1989). ADL: Exploring the middle ground between STRIPS and the situation calculus. In Proceedings of the 1st International Conference on Principles of
Knowledge Representation and Reasoning, pp. 324331.
Robertson, N., & Seymour, P. D. (1984). Graph minors III: Planar tree-width. Journal of
Combinatorial Theory, 36, 4963.
Robertson, N., & Seymour, P. D. (1991). Graph minors X: Obstructions to tree decomposition. Journal of Combinatorial Theory, Series B, 52 (2), 153190.
Seipp, J., & Helmert, M. (2011). Fluent merging for classical planning problems. In Proceedings of the ICAPS-2011 Workshop on Knowledge Engineering for Planning and
Scheduling (KEPS), pp. 4753.

812

fi