Journal of Artificial Intelligence Research 21 (2004) 579-594

Submitted 08/03; published 05/04

Can We Learn to Beat the Best Stock
Allan Borodin

bor@cs.toronto.edu

Department of Computer Science
University of Toronto
Toronto, ON, M5S 3G4 Canada

Ran El-Yaniv

rani@cs.technion.ac.il

Department of Computer Science
Technion - Israel Institute of Technology
Haifa 32000, Israel

Vincent Gogan

vincent@cs.toronto.edu

Department of Computer Science
University of Toronto
Toronto, ON, M5S 3G4 Canada

Abstract
A novel algorithm for actively trading stocks is presented. While traditional expert
advice and universal algorithms (as well as standard technical trading heuristics) attempt
to predict winners or trends, our approach relies on predictable statistical relations between
all pairs of stocks in the market. Our empirical results on historical markets provide strong
evidence that this type of technical trading can beat the market and moreover, can beat
the best stock in the market. In doing so we utilize a new idea for smoothing critical
parameters in the context of expert learning.

1. Introduction
The portfolio selection (PS) problem is a challenging problem for machine learning, online
algorithms and, of course, computational finance. As is well known (e.g. see Lugosi, 2001)
sequence prediction under the log loss measure can be viewed as a special case of portfolio selection, and perhaps more surprisingly, from a certain worst case minimax criterion,
portfolio selection is not essentially any harder (than prediction) as shown in (Cover & Ordentlich, 1996) (see also Lugosi, 2001, Thm. 20 & 21). But there seems to be a qualitative
difference between the practical utility of universal sequence prediction and universal
portfolio selection. Simply stated, universal sequence prediction algorithms under various
probabilistic and worst-case models appear to work very well in practice whereas the known
universal portfolio selection algorithms do not seem to provide any substantial benefit over
a naive investment strategy (see Section 5).
A major pragmatic question is whether or not a computer program can consistently
outperform the market. A closer inspection of the interesting ideas developed in information theory and online learning suggests that a promising approach is to exploit the natural
volatility in the market and in particular to benefit from simple and rather persistent statistical relations between stocks rather than to try to predict stock prices or winners.

c
2004
AI Access Foundation. All rights reserved.

fiBorodin, El-Yaniv, & Gogan

We present a non-universal portfolio selection algorithm1 , which does not try to predict
winners. The motivation behind our algorithm is the rationale behind constant rebalancing
algorithms and the worst case study of universal trading introduced by Cover (1991). Not
only does our proposed algorithm substantially beat the market on historical markets,
it also beats the best stock. So why are we presenting this algorithm and not just simply
making money? There are, of course some caveats and obstacles to utilizing the algorithm.
But for large investors the possibility of a goose laying silver (if not golden) eggs is not
perhaps impossible.

2. The Portfolio Selection Problem
Assume a market with m stocks. Let vt = (vt (1), . . . , vt (m)) be the daily closing prices2
of the m stocks for the tth day, where vt (j) is the price of the jth stock. It is convenient
to work with relative prices xt (j) = vt (j)/vt1 (j) so that an investment of $d in the jth
stock just before the tth day yields dxt (j) dollars. We let xt = (xt (1), . . . , xt (m)) denote the
market vector of relative prices corresponding to the tth day. A portfolio b is an allocation
of wealth in the stocks, specified by the proportions b = (b(1),
P . . . , b(m)) of current dollar
wealth invested in each of the stocks, where b(j) P
0 and j b(j) = 1. The daily return
of a portfolio b w.r.t. a market vector x is b  x = j b(j)x(j) and the (compound) total
return, retX (b1 , . . .Q
, bn ), of a sequence of portfolios b1 , . . . , bn w.r.t. a market sequence
X = x1 , . . . , xn is nt=1 bt  xt . A portfolio selection algorithm A is any deterministic or
randomized rule for specifying a sequence of portfolios and we let retX (A) denote its total
return for the market sequence X.
The simplest strategy is to buy-and-hold stocks using some portfolio b. We denote this
strategy by BAHb and let U-BAH denote the uniform buy-and-hold when b = (1/m, . . . , 1/m).
We say that a portfolio selection algorithm beats the market when it outpeforms U-BAH
on a given market sequence although in practice the market can be represented by some
non-uniform BAH.3 Buy-and-hold strategies rely on the tendency of successful markets to
grow. Much of modern portfolio theory focuses on how to choose a good b for the buyand-hold strategy. The seminal ideas of Markowitz (1959) yield an algorithmic procedure
for choosing the weights of the portfolio b so as to minimize the variance for any feasible
expected return. This variance minimization is possible by placing appropriate (larger)
weights on subsets of sufficiently anti-correlated stocks, an idea which we shall also utilize.
We denote the optimal in hindsight buy-and-hold strategy (i.e. invest only in the best
stock) by BAH .
An alternative approach to the static buy-and-hold is to dynamically change the portfolio
during the trading period. This approach is often called active trading. One example of
active trading is constant rebalancing; namely, fix a portfolio b and (re)invest your dollars
each day according to b. We denote this constant rebalancing strategy by CBALb and let
CBAL denote the optimal (in hindsight) CBAL. A constant rebalancing strategy can often
1. Any PS algorithm can be modified to be universal by investing any fixed fraction of the initial wealth in
a universal algorithm.
2. There is nothing special about daily closing prices and the problem can be defined with respect to any
(sub)sequence of the (intra-day) sequence of all price offers which appear in the stock market.
3. For example the Dow Jones Industrial Average (DJIA) is calculated as a non uniform average of the 30
DJIA stocks; see e.g. http://www.dowjones.com/

580

fiCan We Learn to Beat the Best Stock

take advantage of market fluctuations to achieve a return significantly greater than that of
is always at least as good as the best stock BAH and in some real market
sequences a constant rebalancing strategy will take advantage of market fluctuations and
significantly outperform the best stock (see e.g. Table 1). For now, consider Cover and
Glusss (1986) classic (but contrived) example
of cash and one stock
 1  consisting

 1 ofa1market
, 12 , . . .. Now consider the CBALb
and the market sequence of price relatives 1/2
, 2 , 1/2
with b = ( 21 , 12 ). On each odd day the daily return of CBALb is 21 1+ 12 12 = 34 and on each even
day, it is 3/2. The total return over n days is therefore (9/8)n/2 , illustrating how a constant
rebalancing strategy can yield exponential returns in a no-growth market. Under the
assumption that the daily market vectors are observations of identically and independently
distributed (i.i.d) random variables, it is shown in (Cover & Thomas, 1991) that CBAL
performs at least as good (in the sense of expected total return) as the best online portfolio
selection algorithm. However, many studies (see e.g. Lo & MacKinlay, 1999) argue that
stock price sequences do have long term memory and are not i.i.d.
A non-traditional objective (in computational finance) is to develop online trading
strategies that are in some sense always guaranteed to perform well.4 Within a line of
research pioneered by Cover (Cover & Gluss, 1986; Cover, 1991; Cover & Ordentlich, 1996)
one attempts to design portfolio selection algorithms that can provably do well (in terms
of their total return) with respect to some online or offline benchmark algorithms. Two
natural online benchmark algorithms are the uniform buy and hold U-BAH, and the uniform
1
1
,..., m
). A natural
constant rebalancing strategy U-CBAL, which is CBALb with b = ( m

offline benchmark is BAH and a more challenging offline benchmark is CBAL .
A portfolio selection algorithm A is called universal if for every market sequence X over
n days, it guarantees a subexponential ratio (in n) between its return retX (A) and that of
retX (CBAL ). In particular, Cover and Ordentlichs Universal Portfolios algorithm (Cover,
1991; Cover & Ordentlich, 1996), denoted here by UNIVERSAL, was proven to be universal;
more specifically for every market sequence X of m stocks over n days, it guarantees the
subexponential (indeed polynomial) ratio
 m1 
(1)
retX (CBAL )/retX (UNIVERSAL) = O n 2 .
BAH . CBAL

From a theoretical perspective this is surprising as this performance ratio is bounded by
a polynomial in n (for fixed m) whereas CBAL is capable of exponential returns. From a
practical perspective, this bound is not very useful because the empirical returns observed
for CBAL portfolios is often not exponential in the number of trading days. However, the
motivation that underlies the potential of CBAL algorithms is useful! We follow this motivation and develop a new algorithm which we call ANTICOR. By attempting to systematically
follow the constant rebalancing philosophy, ANTICOR is capable of some extraordinary performance in the absence of transaction costs, or even with very small transaction costs.
4. A trading strategy is online if it computes the portfolio for the (t+1)st day using only market information
for the first t days. This is in contrast to offline algorithms such as U-BAH , CBAL and the optimal
strategy of picking the best stock for each individual day. Such offline algorithms compute a sequence
of portfolios as a function of the entire market sequence.

581

fiBorodin, El-Yaniv, & Gogan

3. Trying to Learn the Winners
The most direct approach to expert learning and portfolio selection is a (reward based)
weighted average prediction scheme, which adaptively computes a weighted average of
experts by gradually increasing (by some multiplicative or additive update rule) the relative
weights of the more successful experts. In this section we briefly discuss some related
portfolio selection results along these lines.
For example, in the context of the PS problem consider the exponentiated gradient
EG() algorithm proposed by (Helmbold et al., 1998). The EG() algorithm computes the
next portfolio to be
bt (j) exp {xt (j)/(bt  xt )}
bt+1 (j) = Pm
,
j=1 bt (j) exp {xt (j)/(bt  xt )}
where  is a learning rate parameter. EG was designed to greedily choose the best portfolio
for yesterdays market xt while at the same time paying a penalty from movingp
far from yesterdays portfolio. For a universal bound on EG, Helmbold et al. set  = 2xmin 2(log m)/n
where xmin is a lower bound on any price relative.5 It is easy to see that as n increases, 
decreases to 0 so that we can think of  as being very small in order to achieve universality.
When  = 0, the algorithm EG() degenerates to the uniform CBAL (assuming we started
with a uniform portfolio) which is not a universal algorithm. It is also the case that if each
day the price relatives for all stocks were identical, then EG (as well as other PS algorithms)
will converge to the uniform CBAL. Combining a small learning rate with a reasonably
balanced market we expect the performance of EG to be similar to that of the uniform
CBAL and this is confirmed by our experiments (see Table 1).6
Covers universal algorithms adaptively learn each days portfolio by increasing the
weights of successful CBALs. The update rule for these universal algorithms is
R
b  rett (CBALb )d(b)
bt+1 = R
,
rett (CBALb )d(b)
where () is some prior distribution over portfolios. Thus, the weight of a possible portfolio
is proportional to its total return rett (b) thus far times its prior. The particular universal algorithm we consider in our experiments uses the Dirichlet prior (with parameters
( 21 , . . . , 12 )) (Cover & Ordentlich, 1996).7 Somewhat surprisingly, as noted in (Cover & Ordentlich, 1996) the algorithm is equivalent to a static weighted average (given by (b)) over
all CBALs (see also Borodin & El-Yaniv, 1998, p. 291). This equivalence helps to demystify
the universality result and also shows that the algorithm can never outperform CBAL .
5. Helmbold et al. show how to eliminate the need to know xmin and n. While EG can be made universal,
its performance ratio is only sub-exponential (and not polynomial) in n.
6. Following Helmbold et al. we fix  = 0.01 in our experiments. Additional experiments, for a wide range
of fixed  settings, confirm that for our datasets the choice of  = 0.01 is an optimal or near optimal
choice. Of course, it is possible to adaptively set  throughout the trading period, but that is beyond
the scope of this paper.
7. The papers (Cover, 1991; Cover & Ordentlich, 1996; Blum & Kalai, 1998) consider a simpler version
of this algorithm where the (Dirichlet) prior is uniform. This algorithm is also universal and achieves
a ratio (nm1 ). Experimentally (on our datasets) there is a negligible difference between these two
variants and here we only report on the results of the asymptotically optimal algorithm.

582

fiCan We Learn to Beat the Best Stock

A different type of winner learning algorithm can be obtained from any sequence
prediction strategy, as noted in (Borodin, El-Yaniv, & Gogan, 2000). For each stock j, a
(soft) sequence prediction algorithm provides a probability p(j) that the next symbol will
be j  {1, . . . , m}. We view this as a prediction that stock j will have the best relative
price for the next day and set bt+1 (j) = pj . The paper (Borodin et al., 2000) considers
predictions made using the prediction component of the well-known Lempel-Ziv (LZ) lossless
compression algorithm (Ziv & Lempel, 1978). This prediction component is nicely described
in (Langdon, 1983) and in (Feder, 1991). As a prediction algorithm, LZ is provably powerful
in various senses. First it can be shown that it is asymptotically optimal with respect to any
stationary and ergodic finite order Markov source (Rissanen, 1983; Ziv & Lempel, 1978).
Moreover, Feder shows that LZ is also universal in a worst case sense with respect to the
(offline) benchmark class of all finite state prediction machines. To summarize, the common
approach to devising PS algorithms has been to attempt and learn winners using simple or
more sophisticated winner learning schemes.

4. The Anticor Algorithm
We propose a different approach, motivated by a CBAL-inspired philosophy. How can we
interpret the success of the uniform CBAL on the Cover and Gluss example of Section 2?
Clearly, the uniform CBAL here is taking advantage of price fluctuation by constantly transferring wealth from the high performing stock to the relatively low performing stock. Even
in a less contrived market, a CBAL is capable of large returns. A market model favoring
the use of a CBAL is one in which stock growth rates are stable in the long term and occasional larger return rates will be followed by smaller rates (and vice versa). This market
phenomenon is is sometimes called reversal to the mean.
There are many ways that one can interpret and implement algorithms based on the
philosophy of reversal to the mean. In particular, any CBAL can be viewed as a static
implementation of this philosophy. We now describe the motivation and basic ingredients in
our ANTICOR algorithm which adaptively (based on recent empirical statistics) and rather
aggressively8 implements reversal to the mean.
For a given trading day, consider the most recent past w trading days, where w is some
integer parameter. The growth rate of any stock i during this window of time is measured
by the product of relative prices during this window.9 Motivated by the assumption that we
have a portfolio of stocks that are all performing similarly in terms of long term growth rates,
ANTICORs first condition for transferring money from stock i to stock j is that the growth
rate for stock i exceeds that of stock j in this most recent window of time.10 In addition,
the ANTICOR algorithm requires some indication that stock j will start to emulate the past
growth of stock i in the near future. To this end, ANTICOR requires a positive correlation
between stock i during the second last window and stock j during the last window. The
relative extent to which we will transfer money from stock i to stock j will depend on
8. Our ANTICOR algorithm is aggressive (say, compared to CBAL) in the sense that it can transfer all
assets out of a given stock. Various heuristics can be used to moderate this behavior.
9. Since we would rather deal with arithmetic instead of geometric means we will use the logarithms of
relative prices.
10. Note that here the umderlying model assumption is reversal to the same mean. One can modify the
algorithm so as to account for different means.

583

fiBorodin, El-Yaniv, & Gogan

the strength of this correlation as well as the strength of the self anti-correlations for
stocks i and j (again in two consecutive windows). ANTICOR is so named because we use
these correlations and anticorrelations in consecutive windows to indicate the potential for
anticorrelations of the growth rates for stocks i and j in the near future (with hopefully the
growth rate of stock j becoming greater than that of stock i).
Formally, we define
LX1 = log(xt2w+1 ), . . . , log(xtw )T and LX2 = log(xtw+1 ), . . . , log(xt )T ,

(2)

where log(xk ) denotes (log(xk (1)), . . . , log(xk (m))). Thus, LX1 and LX2 are the two vector
sequences (equivalently, two w  m matrices) constructed by taking the logarithm over the
market subsequences corresponding to the time windows [t  2w + 1, t  w] and [t  w + 1, t],
respectively. We denote the jth column of LXk by LXk (j). Let k = (k (1), . . . , k (m)),
be the vectors of averages of columns of LXk . Similarly, let k , be the vector of standard
deviations of columns of LXk . The cross-correlation matrix (and its normalization) between
column vectors in LX1 and LX2 are defined as11
1
(LX1 (i)  1 (i))T (LX2 (j)  2 (j));
w

1
(
Mcov (i,j)
1 (i)2 (j) 1 (i), 2 (j) 6= 0;
Mcor (i, j) =
0
otherwise.

Mcov (i, j) =

(3)

Mcor (i, j)  [1, 1] measures the correlation between log-relative prices of stock i over the
first window and stock j over the second window. We note that if 1 (i) (respectively,
2 (j)) is zero over some window then the growth rate of stock i during the second last
window (respectively, stock j during the last window) is constant during this window. For
sufficiently large windows of time constant growth of any stock i is unlikely. However, in
this unlikely case we choose not to move money into or out of such a stock i.12
For each pair of stocks i and j we compute claimij , the extent to which we want to shift
our investment from stock i to stock j. Namely, there is such a claim iff 2 (i) > 2 (j) and
Mcor (i, j) > 0 in which case claimij = Mcor (i, j) + A(i) + A(j) where A(h) = |Mcor (h, h)| if
Mcor (h, h) < 0, else 0. Following our interpretation for the success of a CBAL, Mcor (i, j) > 0
is used to predict that stocks i and j will be correlated in consecutive windows (i.e. the
current window and the next window based on the evidence for the last two windows) and
Mcor (h, h) < 0 predicts that stock h P
will be negatively auto-correlated over consecutive
windows. Finally,
b
(i)
=
b
(i)
+
t
j6=i [transferji  transferij ] where transferij =
P t+1
bt (i)  claimij / j claimij . A pseudocode summarizing the ANTICOR algorithm appears
in Figure 1. The pseudocode describes the routine ANTICOR(w, t, Xt , bt ) that receives a
window size w, the current trading day t, the historical market sequence Xt (giving the
market vectors corresponding to days 1, . . . , t) and the current portfolio bt defined to be
bt = bt1xt (bt (1)xt (1), . . . , bt (m)xt (m)). The routine is first called with an empty historical
market sequence and with bt being the uniform portfolio (over m stocks). The routine
11. Recall that the correlation coefficient is a normalized covariance with the covariance divided by
the product of the standard deviations; that is, Cor(X, Y ) = Cov(X, Y )/(std(X)  std(Y )) where
Cov(X, Y ) = E[(X  mean(X))(Y  mean(Y ))].
12. Of course, other approaches can be used to accommodate constant or nearly constant growth rate.

584

fiCan We Learn to Beat the Best Stock

returns the new portfolio, to which we should rebalance at the start of the (t + 1)st trading
day.
Algoritm ANTICOR(w, t, Xt , bt )
Input:
1. w: Window size
2. t: Index of last trading day
3. Xt = x1 , . . . , xt : Historical market sequence
4. bt : current portfolio (by the end of trading day t)
Output: bt+1 : Next days portfolio
1. Return the current portfolio bt if t < 2w.
2. Compute LX1 and LX2 as defined in Equation (2), and 1 and 2 , the (vector) averages of
LX1 and LX2 , respectively.
3. Compute Mcor (i, j) as defined in Equation (3).
4. Calculate claims: for 1  i, j  m, initialize claimij = 0
5. If 2 (i)  2 (j) and Mcor (i, j) > 0 then
(a) claimij = claimij + Mcor (i, j);
(b) if Mcor (i, i) < 0 then claimij = claimij  Mcor (i, i);
(c) if Mcor (j, j) < 0 then claimij = claimij  Mcor (j, j);
6. Calculate new portfolio: Initialize bt+1 = bt . For 1  i, j  m
P
(a) Let transferij = bti  claimij / j claimij ;
(b) bt+1
= bt+1
 transferij ;
i
i
(c) bt+1
= bt+1
+ transferji ;
i
i

Figure 1: Algorithm

ANTICOR

Our ANTICORw algorithm has one critical parameter, the window size w. In Figure 2
we depict the total return of ANTICORw on two historical datasets as a function of the
window size w = 2, . . . , 30 (detailed descriptions of these datasets appear in Section 5). As
we might expect, the performance of ANTICORw depends significantly on the window size.
However, for all w, ANTICORw beats the uniform market and, moreover, it beats the best
stock using most window sizes. Of course, in online trading we cannot choose w in hindsight.
Viewing the ANTICORw algorithms as experts, we can try to learn the best expert. But the
windows, like individual stocks, induce a rather volatile set of experts and standard expert
combination algorithms (Cesa-Bianchi et al., 1997) tend to fail.13
Alternatively, we can adaptively learn and invest in some weighted average of all ANTICORw
algorithms with w less than some maximum W . The simplest case is a uniform investment on all the windows; that is, a uniform buy-and-hold investment on the algorithms
ANTICORw , w  [2, W ], denoted by BAHW (ANTICOR). Figure 3 graphs the total return of
BAHW (ANTICOR) as a function of W for all values of 2  W  50 for the four datasets we
consider here. Considering these graphs, our choice of W = 30 was arbitrary but clearly not
13. This assertion is based on empirical studies we conducted with various expert advice algorithms.

585

fiBorodin, El-Yaniv, & Gogan

NYSE: Anticorw vs. window size

TSX: Anticorw vs. window size

120

BAH(Anticor(Window))
Anticor(Window)
Best Stock
Market Return

8

10

80

Anticorw

5

Total Return

Total Return (logscale)

100

10

BAH(Anticorw)
Anticorw
Best Stock
Market

Best Stock

Anticorw
Best Stock

60

40

2

10

20

1

10

0

10

2

5

10

15

20

25

0

30

5

10

Window Size (w)

(a)

30

BAH(Anticorw)
Anticorw

Best Stock
Market Return

2.5

Best Stock
Market Return

Anticorw

8

Total Return

Total Return

25

DJIA: Anticorw vs. window size

3

BAH(Anticor )
w
Anticorw

10

20

(b)

SP500: Anticorw vs. window size
12

15
Window Size (w)

Anticorw
6

2

1.5

4
2

1

Best Stock

Best Stock

1
5

10

15

20

25

30

Window Size (w)

5

10

15

20

25

30

Window Size (w)

(c)
Figure 2:

0.5

(d)

ANTICORw s

total return (per $1 investment) vs. window size 2  w  30 for
(a) NYSE; (b) TSX; (c) SP500; (d) DJIA. The dashed (red) lines represent the
final return of the best stock and the dash-dotted (blue) lines, the final return
the (uniform) market. The dotted (green) horizontal lines represent a uniform
investment on a number of ANTICORw applications as later described.

optimal. Of course, we could try to optimize the parameter W for each particular dataset
by training the algorithm on historical data before beginning to trade. However, our claim
is that almost any choice of W will yield returns that beat the best stock (the only exception
is W = 2 in the DJIA dataset).
Since we now consider the various algorithms as stocks (whose prices are determined by
the cumulative returns of the algorithms), we are back to our original portfolio selection
problem and if the ANTICOR algorithm performs well on stocks it may also perform well on
algorithms. We thus consider active investment in the various ANTICORw algorithms using
ANTICOR. We again consider all windows w  W . Of course, we can continue to compound
the algorithm any number of times. Here we compound twice and then use a buy-and-hold
investment. The resulting algorithm is denoted BAHW (ANTICOR(ANTICOR)). One impact of
this compounding, depicted in Figure 4, is to smooth out the anti-correlations exhibited in
the stocks. It is evident that after compounding twice the returns become almost completely
586

fiCan We Learn to Beat the Best Stock

NYSE: Total Return vs. Max Window

30

7

6

25

BAH (Anticor)
W

BAHW(Anticor)

5

10

Total Return

Total Return (logscale)

10

TSX: Total Return vs Max Window
BAHW(Anticor)

10

Best Stock
Market

4

10

3

10

Best Stock

20
BAHW(Anticor)
15

10

2

Best Stock
Market

Best Stock

10

1

5

10

0

10

2

10

20

30

40

2

50

10

20

(a)
1.6

W

6

Total Return

Total Return

1.4

5

Best Stock
4

Figure 3:

BAHW(Anticor)
Best Stock

1.2

BAHW(Anticor)

1

3

1
2

BAHW(Anticor)

20

30

Best Stock
Market

0.8

Best Stock
Market
10

50

DJIA: Total Return vs Max Window

BAH (Anticor)

2

40

(b)

SP500: Total Return vs Max Window
7

30

Maximal Window Size (W)

Maximal Window size (W)

40

50

2

10

20

30

Maximal Window Size (W)

Maximal Window Size (W)

(c)

(d)

40

50

BAHW (ANTICOR)s

total return (per $1 investment) as a function of the maximal
window W : NYSE (a); TSX (b); SP500 (c); DJIA (d).

correlated thus diminishing the possibility that additional compounding will substantially
help.14 This idea for smoothing critical parameters may be applicable in other learning
applications. The challenge is to understand the conditions and applications in which the
process of compounding algorithms will have this smoothing effect.

5. An Empirical Comparison of the Algorithms
We present an experimental study of the the ANTICOR algorithm and the three online
learning algorithms described in Section 3. We focus on BAH30 (ANTICOR), abbreviated by
ANTI1 and BAH30 (ANTICOR(ANTICOR)), abbreviated by ANTI2 . Four historical datasets are
used. The first NYSE dataset, is the one used in (Cover, 1991; Cover & Ordentlich, 1996;
Helmbold et al., 1998) and (Blum & Kalai, 1998). This dataset contains 5651 daily prices
for 36 stocks in the New York Stock Exchange (NYSE) for the twenty two year period July
3rd , 1962 to Dec 31st , 1984. The second TSX dataset consists of 88 stocks from the Toronto
Stock Exchange (TSX), for the five year period Jan 4th , 1994 to Dec 31st , 1998. The third
14. This smoothing effect also allows for the use of simple prediction algorithms such as expert advice
algorithms (Cesa-Bianchi et al., 1997), which can now better predict a good window size. We have not
explored this direction.

587

fiBorodin, El-Yaniv, & Gogan

DJIA: Dec 14, 2002  Jan 14, 2003
Anticor1

Stocks
1.1

2

Anticor

2.2
2.6

1

Total Return

2.8

2

0.9

2.4
1.8

0.8

2.2

1.6
0.7

2

1.4
0.6

1.8

1.2

0.5

1.6

1

0.4
5 10 15 20 25
Days

5 10 15 20 25
Days

5 10 15 20 25
Days

Figure 4: Cumulative returns for last month of the DJIA dataset: stocks (left panel);
ANTICORw algorithms trading the stocks (denoted ANTICOR1 , middle panel);
ANTICORw algorithms trading the ANTICOR algorithms (right panel).

dataset consists of the 25 stocks from SP500 which (as of Apr. 2003) had the largest market
capitalization. This set spans 1276 trading days for the period Jan 2nd , 1998 to Jan 31st ,
2003. The fourth dataset consists of the thirty stocks composing the Dow Jones Industrial
Average (DJIA) for the two year period (507 days) from Jan 14th , 2001 to Jan 14th , 2003.15
Algorithm
Market (U-BAH)
Best Stock
CBAL
U-CBAL
ANTI1
ANTI2
LZ
EG
UNIVERSAL

NYSE
14.49
54.14
250.59
27.07
17,059,811.56
238,820,058.10
79.78
27.08
26.99

TSX
1.61
6.27
6.77
1.59
26.77
39.07
1.32
1.59
1.59

SP500
1.34
3.77
4.06
1.64
5.56
5.88
1.67
1.64
1.62

DJIA
0.76
1.18
1.23
0.81
1.59
2.28
0.89
0.81
0.80

NYSE1
0.11
0.32
2.86
0.22
246.22
1383.78
5.41
0.22
0.22

TSX1
1.67
37.64
58.61
1.18
7.12
7.27
4.80
1.19
1.19

SP5001
0.87
1.65
1.91
1.09
6.61
9.69
1.20
1.09
1.07

DJIA1
1.43
2.77
2.97
1.53
3.67
4.60
1.83
1.53
1.53

Table 1: Monetary returns in dollars (per $1 investment) of various algorithms for four
different datasets and their reversed versions. The winner and runner-up for each
market appear in boldface. All figures are truncated to two decimals.
These four datasets are quite different in nature (the market returns for these datasets
appear in the first row of Table 1). While every stock in the NYSE increased in value, 32
of the 88 stocks in the TSX lost money, 7 of the 25 stocks in the SP500 lost money and
15. The four datasets, including their sources and individual stock compositions can be downloaded from
http://www.cs.technion.ac.il/rani/portfolios.

588

fiCan We Learn to Beat the Best Stock

25 of the 30 stocks in the negative market DJIA lost money. With the exception of the
TSX, these data sets include only highly liquid stocks with large market capitalizations. In
order to maximize the utility of these datasets and yet present rather different markets, we
also ran each market in reverse. This is simply done by reversing the order and inverting
the relative prices. The reverse datasets are denoted by a -1 superscript. Some of the
reverse markets are particularly challenging. For example, all of the NYSE1 stocks are
going down. Note that the forward and reverse markets (i.e. U-BAH) for the TSX are both
increasing but that the TSX1 is also a challenging market since so many stocks (56 of 88)
are declining.
Table 1 reports on the total returns of the various algorithms for all eight datasets. We
see that prediction algorithms such as LZ can do quite well and the more aggressive ANTI1
and ANTI2 have excellent and sometimes fantastic returns. Note that these active strategies
beat the best stock and even CBAL in all markets with the exception of the TSX1 in which
case they still significantly outperform the market. The reader may well be distrustful of
what appears to be such unbelievable returns for ANTI1 and ANTI2 especially when applied
to the NYSE dataset. However, recall that the NYSE dataset consists of n = 5651 trading
days and the y such that y n = the total NYSE return is approximately 1.0029511 for
ANTI1 (respectively, 1.0074539 for ANTI2 ); that is, the average daily increase is less than
.3% (respectively, .75%). We observe that learning algorithms such as UNIVERSAL and EG
have no substantial advantage over U-CBAL. Some previous expositions of these algorithms
highlighted particular combinations of stocks where the returns significantly outperformed
the best stock. But the same can be said for U-CBAL.
DJIA: Cumulative Total Returns
2.2

Cumulative Total Return

2

Anti1
Anti2
Best Stock
Market

Anti2
1

Anti

1.8
1.6
1.4
1.2

Best Stock

1
0.8

Market

Jan01

Jan02

Jan03

Date

Figure 5: DJIA: Cumulative returns of of
(the market).

ANTI1 , ANTI2 ,

the best stock and a uniform

BAH

The total returns of ANTI1 and ANTI2 presented in Table 1 are impressive but are far
from telling a complete story. Consider the graphs in figure 6. While both ANTI1 and ANTI2
perform well with respect to the uniform market and the best stock throughout most of the
investment period, there are some periods where the cumulative return of these strategies
589

fiBorodin, El-Yaniv, & Gogan

decrease. This (not surprising) behavior indicates that there is a certain degree of risk in
using these investment algorithms.
In finance the standard risk measure is the standard deviation of the return. In Table 2
we provide annualized returns and risks as well as risk-adjusted returns for all markets
and algorithms considered here.16 For example, the annualized return of the best stock in
the DJIA set is 8.6%, its annualized risk (standard deviation) is 42% and its annualized
risk-adjusted return (Sharpe ratio) is 11%.
Algorithm
Market
(U-BAH)
Best Stock
CBAL
U-CBAL
ANTI1
ANTI2
LZ
EG
UNIVERSAL

NYSE
12  14%
58%
19  24%
63%
27  30%
78%
15  13%
88%
110  28%
367%
136  35%
370%
21  23%
76%
15  13%
88%
15  13%
87%

TSX
10  12%
46%
44  55%
73%
46  40%
106%
9  13%
44%
93  45%
196%
108  60%
172%
5  25%
6%
9  13%
44%
9  13%
44%

SP500
5  24%
8%
30  51%
50%
31  42%
65%
10  22%
28%
40  37%
95%
41  44%
86%
10  25%
25%
10  22%
28%
10  22%
27%

DJIA
12  24%
-67%
8  42%
11%
11  26%
27%
9  25%
-54%
26  35%
62%
50  39%
119%
5  28%
-33%
9  25%
-54%
9  25%
-55%

NYSE1
9  15%
-86%
4  21%
-41%
4  40%
1%
6  13%
-77%
27  27%
86%
38  33%
101%
7  21%
17
6  13%
-77%
6  13%
-77%

TSX1
10  22%
29%
106  104%
98%
125  78%
156%
3  13%
-3%
48  41%
107%
48  46%
96%
36  27%
117%
3  13%
-2%
3  13%
-2%

SP5001
2  22%
-28%
10  32%
20%
13  27%
35%
1  21%
-9%
45  32%
126%
56  36%
143%
3  26%
-0.8%
1  22%
-9%
1  22%
-11%

DJIA1
19  25%
61%
65  114%
54%
71  76%
88%
23  25%
77%
90  31%
277%
113  35%
304%
35  27%
112%
23  25%
77%
23  25%
76%

Table 2: Annualized returns and respective annualized volatilities as well as annualized riskadjusted returns (Sharpe Ratio) of the various algorithms over three datasets and
their reversed versions. The winner and runner-up Sharpe Ratio for each market
appear in boldface. All figures are truncated to two decimals.

6. On Commissions, Trading Friction and Other Caveats
When handling a portfolio of m stocks our algorithm may perform up to m transactions
per day. A major concern is therefore the commissions it will incur. Within the proportional commission model (see e.g. Blum & Kalai, 1998; Borodin & El-Yaniv, 1998, Section
14.5.4) there exists a fraction   (0, 1) such that an investor pays at a rate of /2 for
each buy and for each sell. Therefore, the return
of a sequence b1 , . . . , bn of portfolios

Q 
P
with respect to a market sequence x1 , . . . , xn is t bt  xt (1  j 2 |bt (j)  bt (j)|) , where
16. The annualized return is estimated using the geometric mean ofthe individual daily returns and the risk
is the standard deviation of these daily returns multiplied by 252 where 252 is the assumed standard
number of trading days per year. These calculations are standard. The (annualized) Sharpe ratio
(Sharpe, 1975) is the ratio of annualized return minus the risk-free return (taken to be 4%) divided by
the (annualized) standard deviation.

590

fiCan We Learn to Beat the Best Stock

bt = bt1xt (bt (1)xt (1), . . . , bt (m)xt (m)).17 Our investment algorithm in its simplest form
can tolerate very small proportional commission rates and still beat the best stock. The
graphs in Figure 6 depict the total returns of BAH30 (ANTICOR) with proportional commission factor  = 0.1%, 0.2%, . . . , 1%. The strategy can withstand small commission factors.
For example, with  = 0.1% the algorithm still beat the best stock in all four markets we
consider (and it beats the market with  < 0.4%). Moreover it still clearly beats the market
whenever  < 0.4%.
NYSE

10

30

5

Best Stock

10

TSX

25

Anti1
Return

Return (logscale)

10

Market

20
15
10
5

0

10

0

6

0.2
0.4
0.6
0.8
Commission Rate ()

0
0

1

SP500

2

0.2
0.4
0.6
0.8
Commission Rate ()

1

DJIA

5
Return

Return

4
3
2

1.5

1

1
0

0.1 0.2
0.4
0.6
0.8
Commission Rate ()

Figure 6: Total returns of
0.1%, 0.2%, . . . , 1%.

0.5
0

1

BAH30 (ANTICOR)

0.2
0.4
0.6
0.8
Commission Rate ()

1

with proportional commissions 

=

However, some current online brokers charge very small proportional commissions, perhaps in addition to a small flat commission rate for all trades.18 This means that a large
investor can scale up the investment and suffer only a small proportional transaction rate.
An additional caveat is our assumption that all trades could be implemented using the
closing price. While in principle there is nothing special about the closing price (i.e. our
algorithms can trade at any time during the trading day) practical consideration related
to dataset gathering and availability dictated the use of these prices.19 Our algorithms
17. We note that Blum and Kalai (1998) showed that the performance guarantee of UNIVERSAL still holds
(and gracefully degrades) in the case of proportional commissions.
18. For example, on its USA site, E*TRADE (https://us.etrade.com) offers a flat fee of $10 for any trade
up to 5000 shares and then $.01/share thereafter.
19. Specifically, historical closing prices are in the public domain and allow for experimental reproducibility.
Historical intraday trading quotes can also be gathered but such data is usually protected and can be
costly to obtain.

591

fiBorodin, El-Yaniv, & Gogan

assume that all portfolio adjustments are implemented using the quoted prices they receive
as inputs. This means that all transactions are implemented simultaneously using the
quoted prices. With current online brokers a computerized system can issue all transaction
orders almost instantly but there is no guarantee that they will be all implemented instantly.
This trading friction will necessarily generate discrepancies between the input prices and
implementation prices.
A related problem that one must face when actually trading is the difference between
bid and ask prices. These bid-ask spreads (and the availability of stocks for both buying and
selling) are functions of stock liquidity and are typically small for large market capitalization
stocks. We consider here only very large market cap stocks.
Any report of abnormal returns using historical markets should be suspected of data
snooping. In particular, all of our historical data sets are conditioned on the fact that
all stocks were traded every day and there were no bankrupcies or stocks that became
virtually worthless in any of these data sets. Furthermore, when a dataset is excessively
mined by testing many strategies there is a substantial chance that one of the strategies
will be successful by simple over-fitting. Another data snooping hazard is stock selection.
Our ANTICOR algorithms were fully developed using only the NYSE and TSX datasets.
The DJIA and SP500 sets were obtained (from public domain sources) after the algorithms
were fixed. Finally, our algorithm has one parameter (the maximal window size W ). Our
experiments clearly indicate that the algorithms performance is robust with respect to W
(see, for example, Figure 4).

7. Concluding Remarks
Traditional work in financial economics tend to focus on the understanding of stock price
determination. The main question there is: Can we predict the stock market? Judging by
the extensive but inconclusive work done in financial forecasting, perhaps this is not the most
beneficial question to ask. Rather, can a computer program consistently outperform the
market? Besides practicality, it is clear that any successful portfolio selection algorithm is in
itself a mathematical model that can provide some new intuition on stock price formation.
For example, in our case, the algorithms suggest that some stock price fluctuations are
sufficiently periodic and anti-correlated.
A number of well-respected works report on statistically robust abnormal returns
for simple technical analysis heuristics, which slightly beat the market. For example,
the landmark study of Brock, Lakonishok, and LeBaron (1992) apply 26 simple trading
heuristics to the DJIA index from 1897 to 1986 and provide strong support for technical
analysis heuristics. While consistently beating the market is considered a significant (if not
impossible) challenge, our approach to portfolio selection indicates that beating the best
stock is an achievable goal. While we have mainly focused on an idealized frictionless
setting, we believe that even in such a frictionless setting (which seems like a reasonable
starting point) no such results have been previously claimed in the literature.
The results presented here raise various interesting questions. Since simple statistical
relations such as correlation give rise to such outstanding returns it is plausible that various
other, perhaps more sophisticated machine learning techniques, can give rise to better

592

fiCan We Learn to Beat the Best Stock

portfolio selection algorithms capable of larger returns and tolerating larger commissions
fees.
On the theoretical side, what is missing at this point of time is an analytical model which
better explains why our active trading strategies are so successful. In this regard, we are
investigating various statistical adversary models along the lines suggested by Raghavan
(1992) and Chou et al. (1995). Namely, we would like to show that an algorithm performs
well (relative to some benchmark) for any market sequence that satisfies certain constraints
on its empirical statistics.
One final caveat needs to be mentioned. Namely, the entire theory of portfolio selection
algorithms assumes that any one portfolio selection algorithm has no impact on the market!
But just like any goose laying golden eggs, widespread use will soon lead to the end of the
goose. In our case, the market will quickly react to any method which does consistently
and substantially beat the market.

Acknowledgments
We thank Michael Loftus for his helpful comments. We also thank Izzy Nelken and Super
Computing Inc. for their help in validating the DJIA dataset.

References
Blum, A., & Kalai, A. (1998). Universal portfolios with and without transaction costs.
Machine Learning, 30 (1), 2330.
Borodin, A., & El-Yaniv, R. (1998). Online Computation and Competitive Analysis. Cambridge University Press.
Borodin, A., El-Yaniv, R., & Gogan, V. (2000). On the competitive theory and practice
of portfolio selection. In Proc. of the 4th Latin American Symposium on Theoretical
Informatics (LATIN00), pp. 173196.
Brock, L., Lakonishok, J., & LeBaron, B. (1992). Simple technical trading rules and the
stochastic properties of stock returns. Journal of Finance, 47, 17311764.
Cesa-Bianchi, N., Freund, Y., Haussler, D., Helmbold, D., Schapire, R., & Warmuth, M.
(1997). How to use expert advice. Journal of the ACM, 44 (3), 427485.
Chou, A., Cooperstock, J., El-Yaniv, R., Klugerman, M., & Leighton, T. (1995). The
statistical adversary allows optimal money-making trading strategies. In Proceedings
of the 6th Annual ACM-SIAM Symposium on Discrete Algorithms.
Cover, T. (1991). Universal portfolios. Mathematical Finance, 1, 129.
Cover, T., & Gluss, D. (1986). Empirical bayes stock market portfolios. Advances in Applied
Mathematics, 7, 170181.
Cover, T., & Ordentlich, E. (1996). Universal portfolios with side information. IEEE
Transactions on Information Theory, 42 (2), 348363.
Cover, T., & Thomas, J. (1991). Elements of Information Theory. John Wiley & Sons, Inc.
Feder, M. (1991). Gambling using a finite state machine. IEEE Transactions on Information
Theory, 37, 14591465.
593

fiBorodin, El-Yaniv, & Gogan

Helmbold, D., Schapire, R., Singer, Y., & Warmuth, M. (1998). Portfolio selection using
multiplicative updates. Mathematical Finance, 8 (4), 325347.
Langdon, G. (1983). A note on the Lempel-Ziv model for compressing individual sequences.
IEEE Transactions on Information Theory, 29, 284287.
Lo, A., & MacKinlay, C. (1999). A Non-Random Walk Down Wall Street. Princeton
University Press.
Lugosi, G. (2001).
Lectures on prediction
URL:http://www.econ.upf.es/lugosi/ihp.ps.

of

individual

sequences.

Markowitz, H. (1959). Portfolio Selection: Efficient Diversification of Investments. John
Wiley and Sons.
Raghavan, P. (1992). A statistical adversary for on-line algorithms. dimacs Series in
Discrete Mathematics and Theoretical Computer Science, 7, 7983.
Rissanen, J. (1983). A universal data compression system. IEEE Transactions on Information Theory, 29, 656664.
Sharpe, W. (1975). Adjusting for risk in portfolio performance measurement. Journal of
Portfolio Management, 2934. Winter.
Ziv, J., & Lempel, A. (1978). Compression of individual sequences via variable rate coding.
IEEE Transactions on Information Theory, 24, 530536.

594

fi