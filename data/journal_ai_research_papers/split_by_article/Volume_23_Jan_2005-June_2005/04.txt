Journal of Artificial Intelligence Research 23 (2005) 167-243

Submitted 07/04; published 02/05

Combining Spatial and Temporal Logics:
Expressiveness vs. Complexity
David Gabelaia
Roman Kontchakov
Agi Kurucz

gabelaia@dcs.kcl.ac.uk
romanvk@dcs.kcl.ac.uk
kuag@dcs.kcl.ac.uk

Department of Computer Science, Kings College London
Strand, London WC2R 2LS, U.K.

Frank Wolter

frank@csc.liv.ac.uk

Department of Computer Science, University of Liverpool
Liverpool L69 7ZF, U.K.

Michael Zakharyaschev

mz@dcs.kcl.ac.uk

Department of Computer Science, Kings College London
Strand, London WC2R 2LS, U.K.

Abstract
In this paper, we construct and investigate a hierarchy of spatio-temporal formalisms
that result from various combinations of propositional spatial and temporal logics such as
the propositional temporal logic PT L, the spatial logics RCC-8, BRCC-8, S4u and their
fragments. The obtained results give a clear picture of the trade-off between expressiveness
and computational realisability within the hierarchy. We demonstrate how different combining principles as well as spatial and temporal primitives can produce NP-, PSPACE-,
EXPSPACE-, 2EXPSPACE-complete, and even undecidable spatio-temporal logics out of
components that are at most NP- or PSPACE-complete.

1. Introduction
Qualitative representation and reasoning has been quite successful in dealing with both
time and space. There exists a wide spectrum of temporal logics (see, e.g., Allen, 1983;
Clarke & Emerson, 1981; Manna & Pnueli, 1992; Gabbay, Hodkinson, & Reynolds, 1994;
van Benthem, 1995). There is a variety of spatial formalisms (e.g., Clarke, 1981; Egenhofer
& Franzosa, 1991; Randell, Cui, & Cohn, 1992; Asher & Vieu, 1995; Lemon & Pratt,
1998). In both cases determining the computational complexity of the respective reasoning
problems has been one of the most important research issues. For example, Renz and Nebel
(1999) analysed the complexity of RCC-8, a fragment of the region connection calculus RCC
with eight jointly exhaustive and pairwise disjoint base relations between spatial regions
introduced by Egenhofer and Franzosa (1991) and Randell and his colleagues (1992); Nebel
and Burckert (1995) investigated the complexity of Allens interval algebra; numerous results
on the computational complexity of the point-based propositional linear temporal logic PT L
over various flows of time were obtained by Sistla and Clarke (1985) and Reynolds (2003,
2004). In many cases these investigations resulted in the development and implementation
of effective reasoning algorithms (see, e.g., Wolper, 1985; Smith & Park, 1992; Egenhofer
& Sharma, 1993; Schwendimann, 1998; Fisher, Dixon, & Peim, 2001; Renz & Nebel, 2001;
Hustadt & Konev, 2003).
c
2005
AI Access Foundation. All rights reserved.

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

space

.

X

X

X

X

X

.
F
-

0

1

2

3

time

Figure 1: Topological temporal model.
The next apparent and natural step is to combine these two kinds of reasoning. Of
course, there have been attempts to construct spatio-temporal hybrids. For example, the
intended interpretation of Clarkes (1981, 1985) region-based calculus was spatio-temporal.
Region connection calculus RCC (Randell et al., 1992) contained a function space(X, t)
for representing the space occupied by object X at moment of time t. Muller (1998a)
developed a first-order theory for reasoning about motion of spatial entities. However, all
of these formalisms turn out to be too expressive from the computational point of view:
they are undecidable. Moreover, as far as we know, no serious attempts to investigate and
implement partial (say, incomplete) algorithms capable of spatio-temporal reasoning with
these logics have been made.
The problem of constructing spatio-temporal logics with better algorithmic properties and analysing their computational complexity was first attacked by Wolter and Zakharyaschev (2000b); see also the popular and extended version (Wolter & Zakharyaschev,
2002) of that conference paper, as well as (Bennett & Cohn, 1999; Bennett, Cohn, Wolter,
& Zakharyschev, 2002; Gerevini & Nebel, 2002).
The main idea underlying all these papers is to consider various combinations of wellbehaved spatial and temporal logics. The intended spatio-temporal structures can be
regarded then as the Cartesian products of the intended time-line and topological (or some
other) spaces that are used to model the spatial dimension. Figure 1 shows such a product
(of the flow of time F = hN, <i and the two-dimensional Euclidean space T) with a moving
spatial object X. The moving object can be viewed either as a 3D spatio-temporal entity
(in this particular case) or as the collection of the snapshots or slices of this entity at each
moment of time; for a discussion see, e.g., (Muller, 1998b) and references therein. In this
paper, we use the snapshot terminology and understand by a moving spatial object (or,
more precisely, interpret such an object as) any set of pairs hX, ti where, for each point t
168

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

of the flow of time, X is a subset of the topological spacethe state of the spatial object at
moment t.
The expressive power (and consequently the computational complexity) of the combined
spatio-temporal formalisms obviously depends on three parameters:
1. the expressivity of the spatial component,
2. the expressivity of the temporal component, and
3. the interaction between the two components allowed in the combined logic.
Regardless of the chosen component languages, the minimal requirement for a spatiotemporal combination to be useful is its ability to
express changes in time of the truth-values of purely spatial propositions.

(PC)

Typical examples of logics meeting this spatial propositions truth change principle are the
combinations of RCC-8 and Allens interval calculus (Bennett et al., 2002; Gerevini & Nebel,
2002) and those combinations of RCC-8 and PT L introduced by Wolter and Zakharyaschev
(2000b) that allow applications of temporal operators to Boolean combinations of RCC-8 relations. Languages satisfying (PC) can capture, for instance, some aspects of the continuity
of change principle (see, e.g., Cohn, 1997) such as
(A) if two images on the computer screen are disconnected now, then they either remain
disconnected or become externally connected in one quantum of the computers time.
Another example is the following statement about the geography of Europe:
(B) Kaliningrad is disconnected from the EU until the moment when Poland becomes
a tangential proper part of the EU, after which Kaliningrad and the EU will be
externally connected forever.
However, languages meeting (PC) do not necessarily satisfy our second fundamental
spatial object change principle according to which we should be able to
express changes or evolutions of spatial objects in time.

(OC)

In logical terms, (PC) refers to the change of truth-values of propositions, while (OC) to
the change of extensions of predicates; see Fig. 2 where X at moment t denotes the state
of X at moment t + 1. Here are some examples motivating (OC):
(C) Continuity of change: the cyclones current position overlaps its position in an hour.
(D) Two physical objects cannot occupy the same space: if tomorrow object X is at the
place where object Y is today, then Y will have to move by tomorrow.
(E) Geographic regions change: the space occupied by Europe never changes.
(F) Geographic regions change: in two years the EU will be extended with Romania and
Bulgaria.
(G) Fairness conditions on regions: it will be raining over every part of England ever and
ever again.
169

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

space

.

X

X
X

X

X
T

T

T
-F

.
t

t+1

t+2

time

Figure 2: Temporal operators on regions.
(H) Mutual exclusion: if Earth consists of water and land, and the space occupied by
water expands, then the space occupied by land shrinks.
It should be clear that to represent these statements we have to refer to the evolution of
spatial objects in time (say, to compare objects X and X)it is not enough to only take
into account the change of the truth-values of propositions speaking about spatial objects.
The main aim of this paper is to investigate the trade-off between the expressive power
and the computational behaviour of spatio-temporal hybrids satisfying the (PC) and (OC)
principles and interpreted in various spatio-temporal structures. Our purpose is to show
what computational obstacles one can expect if the application domain requires this or that
kind of interactions between temporal and spatial operators.
The spatio-temporal logics we consider below are combinations of fragments of PT L
interpreted over different flows of time with fragments of the propositional spatial logic S4u
(equipped with the interior and closure operators, the universal and existential quantifiers
over points in space as well as the Booleans) interpreted in topological spaces. This choice
is motivated by the following reasons:
 The component logics are well understood and established in temporal and spatial
knowledge representation; all of them are supported by reasonably effective reasoning
procedures.
 By definition, implicit or explicit temporal quantification is necessary to capture (OC),
and fragments of PT L are the weakest languages with such quantification we know of.
170

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

Allens interval calculus, for example, does not provide means for any quantification
over intervals. It is certainly suitable for spatio-temporal hybrids satisfying (PC) (see
Bennett et al., 2002; Gerevini & Nebel, 2002) but there is no natural conservative
way of combining it with spatial formalisms to meet (OC). On the other hand, it is
embedded in PT L (Blackburn, 1992). A natural alternative to PT L would be the
extension of Allens calculus by means of quantification over intervals introduced by
Halpern and Shoham (1986), but unfortunately this temporal logic turns out to be
highly undecidable.
 Although the logic S4u was originally introduced in the realm of modal logic (see
below for details), the work of Bennett (1994), Nutt (1999), Renz (2002) and Wolter
and Zakharyaschev (2000a) showed that it can be regarded as a unifying language
that contains many spatial formalisms like RCC-8, BRCC-8 or the 9-intersections of
Egenhofer and Herring (1991) as fragments.
Apart from the choice of component languages and the level of their interaction, the expressive power and the computational complexity of spatio-temporal logics strongly depend
on the restrictions we may want to impose on the intended spatio-temporal structures and
the interpretations of spatial objects.
 We can choose among different flows of time (say, discrete or dense, infinite or finite)
 and among different topological spaces (say, arbitrary, Euclidean or Aleksandrov).
 At each time point we can interpret spatial objects as arbitrary subsets of the topological space, as regular closed (or open) ones, as polygons, etc.
 To represent the assumption that everything eventually comes to an end, we only
do not know when, one can restrict the class of intended models by imposing the
finite change assumption which states that no spatial object can change its spatial
configuration infinitely often, or the more liberal finite state assumption according
to which every spatial object can have only finitely many possible states (although it
may change its states infinitely often).
The paper is organised as follows. In Section 2 we introduce in full detail the component
spatial and temporal logics to be combined later on. In particular, besides the standard
spatial logics like RCC-8 or the 9-intersections of Egenhofer and Herring (1991), we consider
their generalisations in the framework of S4u and investigate the computational complexity. For example, we show that the maximal fragment of S4u dealing with regular closed
spatial objects turns out to be PSPACE-complete, while a natural generalisation of the
9-intersections is still in NP. In Section 3 we introduce a hierarchy of spatio-temporal logics
outlined above, provide them with a topological-temporal semantics, and analyse their computational properties. First we show that spatio-temporal logics satisfying only the (PC)
principle are not more complex than their components. Then we consider maximal combinations of S4u with (fragments of) PT L meeting both (PC) and (OC) and see that this
straightforward approach does not work: the resulting logics turn out to be undecidable.
Finally, we systematically investigate the trade-off between expressivity and complexity of
spatio-temporal formalisms and construct a hierarchy of decidable logics satisfying (PC)
171

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

and (OC) whose complexity ranges from PSPACE to 2EXPSPACE. These and other results, possible implementations as well as open problems are discussed in Section 4. For the
readers convenience most important (un)decidability and complexity results obtained in
this paper are summarised in Table 1 on page 193. All technical definitions and detailed
proofs can be found in the appendices.

2. Propositional Logics of Space and Time
We begin by introducing and discussing the spatial and the temporal formalisms we are
going to combine later on in this paper.
2.1 Logics of Space
We will be dealing with a number of logics suitable for qualitative spatial representation
and reasoning: the well-known RCC-8, BRCC-8 and S4u , as well as certain fragments of the
last one. The intended interpretations for all of these logics are topological spaces.
A topological space is a pair T = hU, Ii in which U is a nonempty set, the universe of
the space, and I is the interior operator on U satisfying the standard Kuratowski axioms:
for all X, Y  U ,
I(X  Y ) = IX  IY,

IX  IIX,

IX  X

and IU = U.

The operator dual to I is called the closure operator and denoted by C: for every X  U ,
we have CX = U  I(U  X). Thus, IX is the interior of a set X, while CX is its closure.
X is called open if X = IX and closed if X = CX. The complement of an open set is
closed and vice versa. The boundary of a set X  U is defined as CX  IX. Note that X
and U  X have the same boundary.
2.1.1 S4u
Our most expressive spatial formalism is S4u i.e., the propositional modal logic S4 extended with the universal modalities. The pedigree of this logic is quite unusual. S4 was
introduced independently by Orlov (1928), Lewis (in Lewis & Langford, 1932), and Godel
(1933) without any intention to reason about space. Orlov and Godel understood it as
a logic of provability (in order to provide a classical interpretation for the intuitionistic
logic of Brouwer and Heyting) and Lewis as a logic of necessity and possibility, that is, as
a modal logic. Besides the Boolean connectives and propositional variables, the language of
S4 contains two modal operators: I (it is necessary or provable) and C, the dual of I (it is
possible or consistent). In other words, the formulas of S4 can be defined as follows:


::=

p

| 

| 1 u 2

| I,

(1)

where the p are variables. Set C = I . We denote the modal operators by I and C
(rather than the conventional 2 and 3) because we understand, following an observation
made by several logicians in the late thirties and early forties (Stone, 1937; Tarski, 1938;
Tsao Chen, 1938; McKinsey, 1941), S4 as a logic of topological spaces: if we interpret the
propositional variables as subsets of a topological space, the Booleans as the standard settheoretic operations, and I and C as, respectively, the interior and the closure operators
172

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

on the space, then an S4-formula is modally consistent if and only if it is satisfiable in a
topological spacei.e., its value is not empty under some interpretation.1
More precisely, a topological model is a pair of the form M = hT, Ui, where T = hU, Ii
is a topological space and U, a valuation, is a map associating with every variable p a set
U(p)  U . Then the valuation U is inductively extended to arbitrary S4-formulas by taking:
U( ) = U  U( ),

U(1 u 2 ) = U(1 )  U(2 ),

U(I ) = IU( ).

Expressions  of the form (1) are interpreted as subsets of topological spaces; that is why we
will call them spatial terms. In particular, propositional variables of S4 will be understood
as spatial variables.

The language of S4u extends S4 with the universal and the existential quantifiers 2

and 3, respectively (known in modal logic as the universal modalities). Given a spatial
  to say that the part of space (represented by)  is not empty (there is
term  , we write 3
  means that  occupies the whole space (all points belong to  ).
at least one point in  ); 2
By taking Boolean combinations of such expressions we arrive at what will be called spatial
formulas. A BNF definition looks as follows:2



::= 2

|



| 1  2 ,

  . Spatial formulas can be either true or false in
  = 2
where the  are spatial terms. Set 3
topological models. The truth-relation M |= a spatial formula  is true in a topological
model Mis defined in the standard way:

 M |= 2

iff

U( ) = U ,

 M |= 

iff

M 6|= ,

 M |= 1  2

iff

M |= 1 and M |= 2 .

Say that a spatial formula  is satisfiable if there is a topological model M such that M |= .
The seemingly simple query language S4u can express rather complex relations between
sets in topological spaces. For example, the formula
 (q @ p)  2
 (p @ Cq)  3
 p  3
 Iq
2

says that a set q is dense in a nonempty set p, but has no interior (here 1 @ 2 is an
abbreviation for 1 u 2 ).
The following folklore complexity result has been proved in different settings (see, e.g.,
Nutt, 1999; Areces, Blackburn, & Marx, 2000):
Theorem 2.1. (i) S4u enjoys the exponential finite model property; i.e., every satisfiable
spatial formula  is satisfiable in a topological space whose size is at most exponential in
the size of .
(ii) Satisfiability of spatial formulas in topological models is PSPACE-complete.
1. Moreover, according to McKinsey (1941) and McKinsey and Tarski (1944), any n-dimensional Euclidean
space, for n  1, is enough to satisfy all consistent S4-formulas.
2. Formally, the language of S4u as defined above is weaker than the standard one, say, that of Goranko
and Passy (1992). However, one can easily show that they have precisely the same expressive power:
see, e.g., (Hughes & Cresswell, 1996) or (Aiello & van Benthem, 2002b).

173

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

One way of proving this theorem is first to observe that every satisfiable spatial formula
is satisfied in an Aleksandrov model, i.e., a model based on an Aleksandrov topological
spacealias a standard Kripke frame for S4 (see, e.g., McKinsey & Tarski, 1944; Goranko
& Passy, 1992).
We remind the reader that a topological space is called an Aleksandrov space (Alexandroff, 1937) if arbitrary (not only finite) intersections of open sets are open. A Kripke frame
(or simply a frame) for S4 is a pair the form G = hV, Ri, where V is a nonempty set and
R a transitive and reflexive relation (i.e., a quasi-order ) on V . Every such frame G induces
the interior operator IG on V : for every X  V ,
IG X = {x  X | y  V (xRy  y  X)}.
In other words, the open sets of the topological space TG = hV, IG i are the upward closed
(or R-closed ) subsets of V . The minimal neighbourhood of a point x in TG (that is the
minimal open set to contain x) consists of all those points that are R-accessible from x. It
is well-known (see, e.g., Bourbaki, 1966) that TG is an Aleksandrov space and, conversely,
every Aleksandrov space is induced by a quasi-order.
Now, to complete the proof, it suffices to recall that S4 is PSPACE-hard (Ladner,
1977) and use, say, the standard tableau technique to establish the exponential finite model
property and construct a PSPACE satisfiability checking algorithm for spatial formulas.
Although being of the same computational complexity as S4, the logic S4u is more
expressive. A standard example is that spatial formulas can distinguish between arbitrary
and connected3 topological spaces. Consider, for instance, the formula
 (Cp @ p)  2
 (p @ Ip)  3
p
 p  2
2

(2)

saying that p is both closed and open, nonempty and does not coincide with the whole space.
It can be satisfied only in a model whose underlying topological space is not connected, while
all satisfiable S4-formulas are satisfied in connected (e.g., Euclidean) spaces.
Another example illustrating the expressive power of S4u is the formula
 (p @ Cp)  2
 (p @ Cp)
p  2
3

(3)

defining a nonempty set p such that both p and p have empty interiors. In fact, the second
and the third conjuncts say that p and p consist of boundary points only.
2.1.2 RCC-8 as a Fragment of S4u
In qualitative spatial representation and reasoning, it is quite often assumed that spatial
terms can only be interpreted by regular closed (or open) sets of topological spaces (see,
e.g., Davis, 1990; Asher & Vieu, 1995; Gotts, 1996). One of the reasons for imposing this
restriction is to exclude from consideration such pathological sets as p in (3). Recall that a
set X is regular closed if X = CIX, which clearly does not hold for any set p satisfying (3).
Another reason is to ensure that the space occupied by a physical body is homogeneous
in the sense that it does not contain parts of different dimensionality. For example, the
3. We remind the reader that a topological space is connected if its universe cannot be represented as the
union of two disjoint nonempty open sets.

174

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

.
X

IX

CIX

.
Figure 3: Regular closure.
subset X of the Euclidean plane in Fig. 3 consists of three parts: a 2D ellipse with a hole, a
2D circle, and a 1D curve connecting them. This curve disappears if we form the set CIX,
which is regular closed because CICIX = CIX, for every X and every topological space.
In this paper, we will consider several fragments of S4u dealing with regular closed sets.
From now on we will call such sets regions. Perhaps, the best known language devised
for speaking about regions is RCC-8 which was introduced in the area of Geographical
Information Systems (see Egenhofer & Franzosa, 1991; Smith & Park, 1992) and as a
decidable subset of Region Connection Calculus RCC (Randell et al., 1992). The syntax of
RCC-8 contains eight binary predicates,
 DC(X, Y )  regions X and Y are disconnected,
 EC(X, Y )  X and Y are externally connected,
 EQ(X, Y )  X and Y are equal,
 PO(X, Y )  X and Y partially overlap,
 TPP(X, Y )  X is a tangential proper part of Y ,
 NTPP(X, Y )  X is a nontangential proper part of Y ,
 the inverses of the last twoTPPi(X, Y ) and NTPPi(X, Y ),
which can be combined using the Boolean connectives. For example, given a spatial database
describing the geography of Europe, we can query whether the United Kingdom and the
Republic of Ireland share a common border. The answer can be found by checking whether
the RCC-8 formula EC(UK, RoI) follows from the database.
The arguments of the RCC-8 predicates are called region variables; they are interpreted
by regular closed setsi.e., regionsof topological spaces. The satisfiability problem for
RCC-8 formulas under such interpretations is NP-complete (Renz & Nebel, 1999).
The expressive power of RCC-8 is rather limited. It only operates with simple regions and does not distinguish between connected and disconnected ones, regions with and
without holes, etc. (Egenhofer & Herring, 1991). Nor can RCC-8 represent complex relations between more than two regions. Consider, for example, three countries (say, Russia,
Lithuania and Poland) such that not only each one of them is adjacent to the others, but
there is a point where all the three meet. To express this fact we may need a ternary
predicate like
EC3(Russia, Lithuania, Poland).
(4)
175

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

To analyse possible ways of extending the expressive power of RCC-8, it will be convenient to view it as a fragment of S4u (that RCC-8 can be embedded into S4u was first shown
by Bennett, 1994). Observe first that, for every spatial variable p, the spatial term
CIp

(5)

is interpreted as a regular closed set in every topological model. So, with every region
variable X of RCC-8 we can associate the spatial term %X = CIpX , where pX is a spatial
variable, and then translate the RCC-8 predicates into spatial formulas by taking:
 (%
 (I%
EC(X, Y ) = 3
X u %Y )  3
X u I%Y ),
 (%
DC(X, Y ) = 3
X u %Y ),
 (%
 (%
EQ(X, Y ) = 2
X @ %Y )  2
Y @ %X ),
 (%
 (%
 (I%
PO(X, Y ) = 3
X u I%Y )  2
X @ %Y )  2
Y @ %X ),
 (%
 (%
 (%
TPP(X, Y ) = 2
X @ %Y )  2
Y @ %X )  2
X @ I%Y ),
 (%
 (%
NTPP(X, Y ) = 2
X @ I%Y )  2
Y @ %X )

(TPPi and NTPPi are the mirror images of TPP and NTPP, respectively). The first of these
formulas, for instance, says that two regions are externally connected iff the intersection of
the regions is not empty, whereas the intersection of their interiors is. It should be clear
that an RCC-8 formula is satisfiable in a topological space if and only if its translation into
S4u defined above is satisfiable in a topological model.
This translation also shows that in RCC-8 any two regions can be related in terms of
truth/falsity of atomic spatial formulas of the form
 (% u % ),
2
1
2

 (I% u I% ),
2
1
2

 (%
2
1 @ %2 )

and

 (%
2
1 @ I%2 ),

where %1 and %2 are spatial terms of the form (5). For example, the first of these formulas
says that the intersection of two regions is empty, whereas the last one states that one region
is contained in the interior of another one. In other words, RCC-8 can be regarded as part
of the following fragment of S4u :
%

::= CIp,



::= %1 u %2




::= 2

|

| I%1 u I%2


| %1 @ %2

| %1 @ I%2 ,

| 1   2 .

Here we distinguish between two types of spatial terms. Those of the form % will be
called atomic region termsthey represent the (regular closed) regions we want to compare.
Spatial terms of the form  are used to relate regions to each other (note that their extensions
are not necessarily regular closed).
Actually, the fragment introduced above is a bit more expressive than RCC-8: for example, it contains (appropriately modified) formula (2) which can be satisfied only in disconnected topological spaces, while all satisfiable RCC-8 formulas are satisfiable in any
Euclidean space (Renz, 1998). However, it will be convenient for us not to distinguish
between these two spatial logics. First, it will turn out that the same technical results regarding their computational complexity hold for them even when combined with temporal
176

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

logics. And second, the more intuitive and concise language of RCC-8 is more suitable for
illustrations. For instance, we do not distinguish between the region variable X and the
 (% u % ).
region term %X and use DC(%1 , %2 ) as an abbreviation for 3
1
2
The definition above suggests two ways of increasing the expressive power of RCC-8
(while keeping all regions regular closed):
(i) by allowing more complex region terms %, and
(ii) by allowing more ways of relating them (i.e., more complex terms  ).
2.1.3 BRCC-8 as a Fragment of S4u
The language BRCC-8 of Wolter and Zakharyaschev (2000a) (see also Balbiani, Tinchev, &
Vakarelov, 2004) extends RCC-8 in direction (i). It uses the same eight binary predicates
as RCC-8 and allows not only atomic regions but also their intersections, unions and complements. For instance, in BRCC-8 we can express the fact that a region (say, the Swiss
Alps) is the intersection of two other regions (Switzerland and the Alps in this case):
EQ(SwissAlps, Switzerland u Alps).

(6)

We can embed BRCC-8 to S4u by using almost the same translation as in the case of RCC-8.
The only difference is that now, since Boolean combinations of regular closed sets are not
necessarily regular closed, we should prefix compound spatial terms with CI. This way we
can obtain, for example, the spatial term
CI (Switzerland u Alps)
representing the Swiss Alps. In the same manner we can treat other set-theoretic operations,
which leads us to the following definition of Boolean region terms:
%

::=

CIp

| CI%

| CI(%1 u %2 ).

In other words, Boolean region terms denote precisely the members of the well-known
Boolean algebra of regular closed sets. (The union t is expressible via intersection and
 
complement in the usual way.) To simplify notation, given a spatial term  , we write 
to denote the result of prefixing CI to every subterm of  ; in particular,
 
 
 


   
p = CIp,
 = CI 
and 1 u 2 = CI( 1 u 2 ).
 
Note that  is (equivalent to) a Boolean region term, for every spatial term  . Now the
Swiss Alps from the example above can be represented as Switzerland u Alps .
It is of interest to note that Boolean region terms do not increase the complexity of
reasoning in arbitrary topological models: the satisfiability problem for BRCC-8 formulas is
still NP-complete (however, it becomes PSPACE-complete if all intended models are based
on connected spaces). On the other hand, BRCC-8 allows some restricted comparisons of
more than two regions as, e.g., in (6). Nevertheless, as we shall see below, ternary relations
like (4) are still unavailable in BRCC-8: they require different ways of comparing regions;
cf. (ii).
177

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

2.1.4 RC
Egenhofer and Herring (1991) proposed to relate any two regions in terms of the 9-intersections33-matrix specifying emptiness/nonemptiness of all (nine) possible intersections
of the interiors, boundaries and exteriors of the regions. Recall that, for a region X, these
three disjoint parts of the space hU, Ii can be represented as
IX,

X  (U  IX)

and

U  X,

respectively. By generalising this approach to any finite number of regions, we obtain the
following fragment RC of S4u :
%

::= Boolean region terms,



::= %




::= 2

| I%
|

| 



| 1 u 2 ,

| 1   2 .

In other words, in RC we can define relations between regions in terms of emptiness/nonemptiness of sets formed by using arbitrary set-theoretic operations on regions and their
interiors. However, nested applications of the topological operators are not allowed (an
example where such applications are required can be found in the next section).
Clearly, both RCC-8 and BRCC-8 are fragments of RC. Moreover, unlike BRCC-8, the
language of RC allows us to consider more complex relations between regions. For instance,
the ternary relation required in (4) can now be defined as follows:
 (%
 (I%
 (I%
 (I%
EC3(X, Y, Z) = 3
X u %Y u %Z )  3
X u I%Y )  3
Y u I%Z )  3
Z u I%X ).

Another, more abstract, example is the formula
 % u    u %  I%
3
1
i
i+1 u    u I%j u %j+1 u    u %k u I%k+1 u    u I%n



which says that
regions %1 , . . . , %i meet somewhere inside the region occupied jointly by all
%i+1 , . . . , %j , but outside the regions %j+1 , . . . , %k and not inside %k+1 , . . . , %n .
Although RC is more expressive than both RCC-8 and BRCC-8, reasoning in this language is still of the same computational complexity:
Theorem 2.2. The satisfiability problem for RC-formulas in arbitrary topological models
is NP-complete.
This result will be proved in Appendix A. Lemma A.1 shows that every satisfiable RCformula can be satisfied in a model based on the Aleksandrov space that is induced by a
disjoint union of n-broomsi.e., quasi-orders of the form depicted in Fig. 4. Topological
spaces of this kind have a rather primitive structure satisfying the following property:
(rc) only the roots of n-brooms can be boundary points, and the minimal neighbourhood
of every boundary pointi.e., the n-broom containing this pointmust contain at
least one internal point and at least one external point.
178

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

b

b
b
b
*

HH
Y




J
]
H

 
HHJ
HJ b


depth 0
depth 1

Figure 4: n-broom (for n = 4).
For example, spatial formula (3) cannot be satisfied in a model with this property, and so
it is not in RC.
By Lemma A.2, the size of such a satisfying model is polynomial (in fact, quadratical)
in the length of the input RC-formula, and so we have a nondeterministic polynomial time
algorithm. Actually, the proof is a straightforward generalisation of the complexity proof
for BRCC-8 given by Wolter and Zakharyaschev (2000a): the only difference is that in the
case of BRCC-8 it is sufficient to consider only 2-brooms (which were called forks). This
means, in particular, that ternary relation (4)which is satisfiable only in a model with an
n-broom, for n  3is indeed not expressible in BRCC-8.
Remark 2.3. In topological terms, n-brooms are examples of so-called door spaces where
every subset is either open or closed. However, the modal theory of n-brooms defines a
wider and more interesting topological class known as submaximal spaces in which every
dense subset is open. Submaximal spaces have been around since the early 1960s and have
generated interesting and challenging problems in topology. For a survey and a systematic
study of these spaces see (Arhangelskii & Collins, 1995) and references therein.
2.1.5 RC max
One could go even further in direction (ii) and impose no restrictions whatsoever on the
ways of relating Boolean region terms. This leads us to the maximal fragment RC max of
S4u in which spatial terms are interpreted by regular closed sets. Its syntax is defined as
follows:
%

::= Boolean region terms,



::= %




::= 2

| 
|

| 1 u 2


| I,

| 1  2 ,

To understand the difference between RC and RC max , consider the RC max -formula
  
 
 
 
   
 


3
q1 u I q1  2
q1 u I q1 @ C I q1 u q2 u I q2
.

(7)

 
It says that the boundary of q1 is not empty and that
 every neighbourhood of every
point
  in this boundary contains an internal point of q1 that belongs to the boundary of
q2 (compare with property (rc) above). The simplest Aleksandrov model satisfying this
formula is of depth 2; it is shown in Fig. 5.
The price we have to pay for this expressivity is that the complexity of RC max is the
same as that of full S4u :
179

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

q1 q2

q1 q2

q1 q2

b
b
]
J



J


J b


b

depth 0








q1 q2


]
J


J
J 

q1 q2 b

depth 1
depth 2

Figure 5: Model satisfying formula (7).
Theorem 2.4. The satisfiability problem for RC max -formulas is PSPACE-complete.
The upper bound follows from Theorem 2.1 and the lower bound is proved in Appendix A, where we construct a sequence of RC max -formulas such that each of them is
satisfiable in an Aleksandrov space of cardinality at least exponential in the length of the
formula. The first formula of the sequence is similar to (7) above.
It is of interest to note, however, that RC max is still not expressive enough to define such
pathological sets as p in (3) which is clearly not regular closed.
To conclude this section, we summarise the inclusions between the spatial languages
introduced above:
RCC-8

$

BRCC-8

$

RC

$

RC max

$

S4u .

For more discussions of spatial logics of this kind we refer the reader to the paper (PrattHartmann, 2002).
2.2 Temporal Logics
As was said in the introduction, the temporal components of our spatio-temporal hybrids
are (fragments of) the propositional temporal logic PT L interpreted in various flows of time
which are modelled by strict linear orders F = hW, <i, where W is a nonempty set of time
points and < is a (connected, transitive and irreflexive) precedence relation on W .
The language PT L is based on the following alphabet:
 propositional variables p0 , p1 , . . . ,
 the Booleans  and , and
 the binary temporal operators U (until) and S (since).
The set of PT L-formulas is defined in the standard way:


::=

p

|



| 1   2

| 1 U  2

| 1 S 2 .

PT L-models are pairs of the form M = hF, Vi such that F = hW, <i is a flow of time
and V, a valuation, is a map associating with each variable p a set V(p)  W of time
points (where p is supposed to be true). The truth-relation (M, w) |= , for an arbitrary
PT L-formula  and w  W , is defined inductively as follows, where (u, v) denotes the open
interval {w  W | u < w < v}:
180

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

 (M, w) |= p

w  V(p),

iff

 (M, w) |= 

(M, w) 6|= ,

iff

 (M, w) |= 1  2

(M, w) |= 1 and (M, w) |= 2 ,

iff

 (M, w) |= 1 U 2
all u  (w, v),

iff

there is v > w such that (M, v) |= 2 and (M, u) |= 1 for

 (M, w) |= 1 S 2
all u  (v, w).

iff

there is v < w such that (M, v) |= 2 and (M, u) |= 1 for

A PT L-formula  is satisfied in M if (M, w) |=  for some w  W .
We took the operators U and S as primitive simply because all other important temporal
operators can be defined via them. For example, 3F (sometime in the future) and 2F
(always in the future) are expressible via U as
3F  = > U ,

2F  = 3F ,

(> is the logical constant true) which means that
 (M, w) |= 3F 

iff

there is v > w such that (M, v) |= ,

 (M, w) |= 2F 

iff

(M, v) |=  for all v > w.

As our intended flows of time are strict linear orders, the next-time operator
definable via U by taking
 =  U 



is also

( is the logical constant false) which perfectly reflects our intuition: if F is discrete then
 (M, w) |= 

iff

(M, w + 1) |= ,

where w + 1 is the immediate successor of w in F. The reader should not have problems in
defining the past versions of 3F , 2F and .
The following results are due to Sistla and Clarke (1985) and Reynolds (2003, 2004):
Theorem 2.5. The satisfiability problem for PT L-formulas is PSPACE-complete for each
of the following classes of flows of time: all strict linear orders, all finite strict linear orders,
hN, <i, hZ, <i, hQ, <i, hR, <i.
Note, however, that reasoning becomes somewhat simpler if we take 3F , 2F and their
past counterparts (but no , U and S) as the only temporal primitives. Denote by PT L2
the corresponding fragment of PT L. Then, according to the results of Ono and Nakamura
(1980), Sistla and Clarke (1985), and Wolter (1996), we have:
Theorem 2.6. The satisfiability problem for PT L2 -formulas is NP-complete for each of
the classes of flows of time mentioned in Theorem 2.5.
181

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

3. Combinations of Spatial and Temporal Logics
In this section we introduce and discuss various ways of combining logics of space and time.
First we construct spatio-temporal logics satisfying only the (PC) principle (see the introduction) and show that they inherit good computational properties of their components.
Being encouraged by these results, we then consider maximal combinations of S4u with
(fragments of) PT L meeting both (PC) and (OC) and see that such a straightforward approach does not work: we end up with undecidable logics. This leads us to a systematic
investigation of the trade-off between expressivity and computational complexity of spatiotemporal formalisms. The result is a hierarchy of decidable logics satisfying (PC) and (OC)
whose complexity ranges from PSPACE to 2EXPSPACE.
3.1 Spatio-Temporal Logics with (PC)
We begin our investigation of combinations of the spatial and temporal logics introduced
above by considering the language PT L[S4u ] in which the temporal operators can be applied
to spatial formulas but not to spatial terms (this way of temporalising a logic was first
introduced by Finger and Gabbay, 1992). A precise syntactic definition of PT L[S4u ]-terms
 and PT L[S4u ]-formulas  is as follows:


::= p




::= 2

| 
|

| 1 u 2


| I,

| 1  2

|  1 U 2

| 1 S  2 .

Note that the definition of PT L[S4u ]-terms coincides with the definition of spatial terms
in S4u which reflects the fact that PT L[S4u ] cannot capture the change of spatial objects
in time. We have imposed no restrictions upon the temporal operators in formulasso the
combined language still has the full expressive power of PT L. (Clearly, S4u is a fragment
of PT L[S4u ].)
In a similar way we can introduce spatio-temporal logics based on all other spatial
languages we are dealing with: RCC-8, BRCC-8, RC and RC max . For example, the temporalisation PT L[BRCC-8] of BRCC-8 (denoted by ST 0 in the hierarchy of Wolter and
Zakharyaschev 2002) allows applications of the temporal operators to RCC-8 predicates but
not to Boolean region terms. These languages can be regarded as fragments of PT L[S4u ]
in precisely the same way as their spatial components were treated as fragments of S4u .
We illustrate the expressive power of PT L[RCC-8] by formalising sentences (A) and (B)
from the introduction:
DC(Image1 , Image2 )  DC(Image1 , Image2 )  EC(Image1 , Image2 ),

DC(Kaliningrad, EU) U TPP(Poland, EU) 
2F

(A)
(B)


TPP(Poland, EU)  EC(Kaliningrad, EU) .

Sentences (C)(H) cannot be expressed in this language (or even in PT L[S4u ]): they require
comparisons of states of spatial objects at different time instants.
The intended semantics of PT L[S4u ] (and all other spatio-temporal logics considered
in this paper) is rather straightforward. A topological temporal model (a tt-model, for short)
is a triple of the form M = hF, T, Ui, where F = hW, <i is a flow of time, T = hU, Ii a
182

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

topological space, and U, a valuation, is a map associating with every spatial variable p
and every time point w  W a set U(p, w)  U the space occupied by p at moment
w; see Fig. 1. The valuation U is inductively extended to arbitrary PT L[S4u ]-terms (i.e.,
spatial terms) in precisely the same way as for S4u , we only have to add a time point as a
parameter:
U( , w) = U  U(, w),

U(1 u 2 , w) = U(1 , w)  U(2 , w),

U(I, w) = IU(, w).

The truth-values of PT L[S4u ]-formulas are defined in the same way as for PT L:

 (M, w) |= 2

 (M, w) |= 

iff
iff

U(, w) = U ,
(M, w) 6|= ,

 (M, w) |= 1  2

iff

(M, w) |= 1

 (M, w) |= 1 U 2
all u  (w, v),

iff

there is v > w such that (M, v) |= 2 and (M, u) |= 1 for

 (M, w) |= 1 S 2
all u  (v, w).

iff

there is v < w such that (M, v) |= 2 and (M, u) |= 1 for

and

(M, w) |= 2 ,

And as in the pure temporal case, the operators 2F , 3F ,  as well as their past counterparts
can be defined in terms of U and S.
A PT L[S4u ]-formula  is said to be satisfiable if there exists a tt-model M such that
(M, w) |=  for some time point w.
The following optimal complexity result will be obtained in Appendix B.1:
Theorem 3.1. The satisfiability problem for PT L[S4u ]-formulas in tt-models based on
arbitrary flows of time, (arbitrary) finite flows of time, hN, <i, hZ, <i, hQ, <i, or hR, <i, is
PSPACE-complete.
The proof of this theorem is based on the fact that the interaction between spatial and
temporal components of PT L[S4u ] is very restricted. In fact, for every PT L[S4u ]-formula 
one can construct a PT L-formula  by replacing every occurrence of a (spatial) subformula
  in  with a fresh propositional variable p . Then, given a PT L-model N = hF, Vi for
2

 and a moment of time w, we take the set
  | (N, w) |= p }  {2
  | (N, w) |= p }
w = {2



of spatial formulas. It is not hard to see that if w is satisfiable for every w in F, then there
is a tt-model satisfying  and based on the flow F. Now, to check whether  is satisfiable,
it suffices to use a suitable nondeterministic algorithm (see, e.g., Sistla & Clarke, 1985;
Reynolds, 2003, 2004) which guesses a PT L-model for  and then, for each time point w,
to check satisfiability of w . This can be done using polynomial space in the length of .
Theorem 3.1 (together with Theorem 2.5) shows that all spatio-temporal logics of the
form PT L[L], for L  {RCC-8, BRCC-8, RC, RC max }, are also PSPACE-complete over the
standard flows of time.
183

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

Now let us consider temporalisations of spatial logics with the (NP-complete) fragment PT L2 of PT L. By Theorems 2.4 and 3.1, both PT L2 [S4u ] and PT L2 [RC max ] are
PSPACE-complete. However, for simpler (NP-complete) spatial components we obtain a
better result:
Theorem 3.2. The satisfiability problem for PT L2 [RC]-formulas in tt-models based on
each of the classes of flows of time mentioned in Theorem 3.1 is NP-complete.
The proof is essentially the same as that of Theorem 3.1, but now nondeterministic
polynomial-time algorithms for the component logics are available. It follows from Theorem 3.2 that PT L2 [RCC-8] and PT L2 [BRCC-8] are NP-complete as well.
3.2 Maximal Combinations with (PC) and (OC)
As we saw in the previous section, the computational complexity of spatio-temporal logics
without (OC) is the maximum of the complexity of their components, which reflects the
very limited interaction between spatial and temporal operators in languages without any
means of expressing (OC).
A maximalist approach to constructing spatio-temporal logics capable of capturing
both (PC) and (OC) is to allow unrestricted applications of the Booleans, the topological
and the temporal operators to form spatio-temporal terms.
Denote by PT L  S4u the spatio-temporal language given by the following definition:


::= p




::= 2

| 
|

|  1 u 2


| I

| 1  2

| 1 U 2

| 1 U  2

| 1 S 2 ,
| 1 S 2 .

Expressions of the form  will be called spatio-temporal terms. Unlike the previous section,
these terms can be time-dependent. The definition of expressions of the form  is the
same as for PT L[S4u ]; they will be called PT L  S4u -formulas. All of the languages from
Section 3.1, including PT L[S4u ], are clearly fragments of PT L  S4u .
As before, we can introduce the temporal operators 2F , 3F ,  as well as their past
counterparts applicable to formulas. Moreover, these operators can now be used to form
spatio-temporal terms: for example,
3F  = > U ,

2F  = 3F 

and



=  U ,

where  denotes the empty set and > the whole space.
Spatio-temporal formulas are supposed to represent propositions speaking about moving
spatial objects represented by spatio-temporal terms. The truth-values of propositions in
spatio-temporal structures can vary in time, but do not depend on points of spacesthey
are defined in precisely the same way as in the case of PT L[S4u ]. But how to understand
temporalised terms?
The meaning of  should be clear: at moment w, it denotes the space occupied by 
at the next moment w + 1 (see Fig. 2). For example, we can write




 I Cyclone
3
u I Cyclone
184

(C)

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

to say that regions Cyclone and
the introduction). The formula

Cyclone

overlap (thereby formalising sentence (C) from

EQ(EU, EU t Romania t Bulgaria)

(F)

says that in two years the EU (as it is today) will be extended with Romania and Bulgaria.
Note that EQ(EU, EU t Romania t Bulgaria) has a different meaning because the EU
may expand or shrink in a year. It is also not hard to formalise sentences (D), (E) and (H)
from the introduction:
EQ(X, Y )  EQ(Y, Y ),

(D)

2F EQ(Europe, Europe),

(E)

EQ(Earth, W t L)  EC(W, L)  P(W, W )  P(L, L),

(H)

where P(X, Y )X is a part of Y denotes the disjunction of EQ(X, Y ), TPP(X, Y ) and
NTPP(X, Y ).
The intended interpretation of terms of the form 3F  , 2F  (and their past counterparts)
is a bit more sophisticated. It reflects the standard temporal meanings of propositions
3F x    and 2F x   , for all points x in the topological space:
 at moment w, term 3F  is interpreted as the union of all spatial extensions of  at
moments v > w;
 at moment w, term 2F  is interpreted as the intersection of all spatial extensions of
 at moments v > w.
For example, consider Fig. 2 with moving spatial object X depicted on it at three consecutive
moments of time (it does not change after t + 2). Then 3F X at t is the union of X and
X at t and 2F X at t is the intersection of X and X at t (i.e., X).
As another example, take the spatial object Rain. Then
 3F Rain at moment w occupies the space where it will be raining at some time points
v > w (which may be different for different places). 2F Rain at w occupies the space
where it will always be raining after w.
 2F 3F Rain at w is the space where it will be raining ever and ever again after w,
while 3F 2F Rain comprises all places where it will always be raining starting from
some future moments of time.
This interpretation shows how to formalise sentence (G) from the introduction:
P(England, 2F 3F Rain).

(G)

Now, what can be the meaning of Rain U Snow? Similarly to the readings of 2F  and
3F  above, we adopt the following definition:
 at moment w, the spatial extension of 1 U 2 consists of those points x of the topological
space for which there is v > w such that x belongs to 2 at moment v and x is in 1
at all u whenever w < u < v.
185

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

The past counterpart of Ui.e., the operator since Scan be used to say that the part of
Russia that has been remaining Russian since 1917 is not connected to the part of Germany
(Konigsberg) that became Russian after the Second World War (Kaliningrad):
DC(Russia S Russian Empire, Russia S Germany).
The models M = hF, T, Ui for PT L  S4u are precisely the same topological temporal
models we introduced for PT L[S4u ]. However, now we need additional clauses defining
extensions of spatio-temporal terms:

[ 
\
 U(1 U 2 , w) =
U(2 , v) 
U(1 , u) ,
v>w

 U(1 S 2 , w) =

[ 

u(w,v)

U(2 , v) 

v<w

\


U(1 , u) .

u(v,w)

Then we also have:
U(3F , w) =

[

U(, v)

and

U(2F , w) =

v>w

\

U(, v),

v>w

and, for discrete F,
U(, w) = U(, w + 1).
The truth-values of PT L  S4u -formulas are computed in precisely the same way as in the
case of PT L[S4u ]. A PT L  S4u -formula  is called satisfiable if there exists a tt-model
M such that (M, w) |=  for some time point w.
At first sight it may appear that the computational properties of the constructed logic should not be too badafter all, its spatial and temporal components are PSPACEcomplete. It turns out, however, that this is not the case:
Theorem 3.3. The satisfiability problem for PT L  S4u -formulas in tt-models based on
the flows of time hN, <i or hZ, <i is undecidable.
Without going into details of the proof of this theorem, one might immediately conjecture that it is the use of the infinitary operators U, 2F and 3F in the construction of
spatio-temporal terms that makes the logic over-expressive. Moreover, the whole idea of
topological temporal models based on infinite flows of time may look counterintuitive in
the context of spatio-temporal representation and reasoning (unlike, say, models used to
represent the behaviour of reactive computer systems).
There are different approaches to avoid infinity in tt-models. The most radical one is to
allow only finite flows of time. A more cautious approach is to impose the following finite
change assumption on models (based on infinite flows of time):
FCA No term can change its spatial extension infinitely often.
This means that under FCA we consider only those valuations U in tt-models hF, T, Ui
that satisfy the following condition: for every spatio-temporal term  , there are pairwise
disjoint intervals I1 , . . . , In of F = hW, <i such that W = I1      In and the state of 
remains constant on each Ij , i.e., U(, u) = U(, v) for any u, v  Ij . It turns out, however,
186

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

that in the case of discrete flows of time FCA does not give us anything new as compared
to arbitrary finite flows of time. More precisely, one can easily show that the satisfiability
problem for PT L  S4u -formulas in tt-models satisfying FCA and based on hN, <i or
hZ, <i is polynomially reducible to satisfiability in tt-models based on finite flows of time,
and the other way round. Note also that for the flows of time mentioned above, FCA can
be captured by the formulas 3F 2F EQ(, F  ) (and its past counterpart for hZ, <i), for
every spatio-temporal term  .
A more liberal way of reducing infinite unions and intersections to finite ones is to
adopt the finite state assumption:
FSA Every term may have only finitely many possible states (although it may
change its states infinitely often).
Say that a tt-model hF, T, Ui satisfies FSA if, for every spatio-temporal term  , there are
finitely many sets A1 , . . . , Am in the space T such that {U(, w) | w  W } = {A1 , . . . , Am }.
Such models can be used, for instance, to capture periodic fluctuations due to season or
climate changes, say, a daily tide. Similarly to FCA finitising the flow of time, FSA
virtually makes the underlying topological space finite. The following proposition will be
proved in Appendix B:
Proposition 3.4. A PT L  S4u -formula is satisfiable in a tt-model with FSA and based
a flow of time F iff it is satisfiable in a tt-model based on F and a finite (Aleksandrov )
topological space.
Unfortunately, none of these approaches works for PT L  S4u we still have:
Theorem 3.5. (i) The satisfiability problem for PT L  S4u -formulas in tt-models based
on (arbitrary) finite flows of time is undecidable.
(ii) The satisfiability problem for PT L  S4u -formulas in tt-models based on the flows
of time hN, <i or hZ, <i and satisfying FSA is undecidable.
The next-time operator  does not look so harmful as the infinitary U, 2F , 3F , and
still can capture some aspects of (OC) (see formulas (C), (D), (F) and (G) above). So let
us consider the fragment PT L  S4u of PT L  S4u with spatio-temporal terms of the form:


::=

p

| 

| 1 u 2

| I

|

.

In other words, PT L  S4u does not allow applications of temporal operators different from
 to form spatio-temporal terms (but they are still available as formula constructors). This
means that we can compare the states of a spatial object X over a bounded set of time
points only: for any time point t and any natural numbers n, m  0, we can compare at t
the state of X at t + n with its state at t + m.
This fragment is definitely less expressive than full PT L  S4u . For instance, according
to Lemma B.1, PT L  S4u -formulas do not distinguish between arbitrary tt-models and
those based on Aleksandrov topological spaceswe will call them Aleksandrov tt-models.
On the other hand, the set of PT L  S4u -formulas satisfiable in Aleksandrov models is
a proper subset of those satisfiable in arbitrary tt-models. Consider, for example, the
PT L  S4u -formula
 (2 Ip @ I2 p).
2
F
F
187

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

One can readily see that it is true in every Aleksandrov tt-model, but its negation can be
satisfied in a topological model. For it suffices to take the flow F = hN, <i and the topology
T = hR, Ii with the T
standard interior operator I on the real line, select a sequence Xn of
open sets such that nN Xn is not open, e.g., Xn = (1/n, 1/n), and put U(p, n) = Xn .
However, even this seemingly weak interaction between topological and temporal operators turns out to be dangerous:
Theorem 3.6. The satisfiability problem for PT L  S4u -formulas in tt-models based on
the flows of time hN, <i or hZ, <i is undecidable. It is undecidable as well for tt-models
satisfying FSA or based on (arbitrary) finite flows of time.
Theorem 2.6 might suggest considering the fragment PT L2  S4u with 2F and its past
counterpart 2P as the only temporal primitives applicable both to formulas and terms:


::= p




::= 2

| 
|

| 1 u 2


| I

| 1   2

| 2F 

| 2F 

| 2P ,

| 2P .

Yet again the result is negative:
Theorem 3.7. The satisfiability problem for PT L2  S4u -formulas in tt-models (with or
without FSA) based on the flows of time hN, <i or hZ, <i is undecidable. It is undecidable
as well for tt-models based on (arbitrary) finite flows of time.
These undecidability results (the strongest ones, Theorems 3.6 and 3.7, to be more
precise) will be proved in Appendix B.2 by a reduction of Posts correspondence problem
which is known to be undecidable (Post, 1946). As we will see from the proofs, these
theorems actually hold for the future fragments of the corresponding languages.
3.3 Decidable Spatio-Temporal Logics with (PC) and (OC)
An important lesson we learn from (the proofs of) the negative results of Section 3.2 is that
full S4u is too expressive for computationally well-behaved combinations with fragments of
PT L. On the other hand, as was said in Section 2.1.2, qualitative spatial representation and
reasoning often requires extensions of spatial variables to be regular closed (i.e., regions).
This restriction is very important for constructing decidable spatio-temporal logics with
(PC) and (OC). First, the undecidability proofs from Appendix B.2 do not go through
in this case. And second, as will be shown below, decidable combinations of PT L and
some of the fragments of S4u introduced in Section 2.1 do exist. In fact, we will construct
a hierarchy of decidable spatio-temporal logics of different computational complexity by
imposing various restrictions on regions themselves, the ways they can be compared, and
the interactions between spatial and temporal constructors.
We begin by considering the simplest combination of PT L and RCC-8 capturing (PC)
and (OC). This logic called PT LRCC-8 (it was introduced under the name ST 
1 by Wolter
and Zakharyaschev, 2002) operates with spatio-temporal region terms of the form
%

::=

CIp

| CI%.

To relate these terms, we are allowed to use the eight binary predicates of RCC-8; then arbitrary temporal operators and Boolean connectives can be applied to produce PT L  RCC-8
188

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

formulas. Typical examples of such formulas are (A), (B), (D) and (E) above. Note that
(C) can be regarded as a PT L  RCC-8 formula as well (two regions overlap iff they are
neither disconnected nor externally connected). On the other hand, (F), (H) and (G) are
not PT LRCC-8 formulas because the first two use the t operation on region terms and (G)
uses temporal operators 2F and 3F on region terms.
As before, PT L  RCC-8 formulas are interpreted in topological temporal models (or
tt-models). However, only discrete flows of time do make sense for this language. Although
the interaction between topological and temporal operators is similar to that in PT L  S4u
(clearly, PT LRCC-8 is a fragment of PT LS4u ), we have the following rather unexpected
and encouraging result:
Theorem 3.8. The satisfiability problem for PT L  RCC-8 formulas in tt-models based on
hN, <i, hZ, <i or (arbitrary) finite flows of time is PSPACE-complete.
This theorem will be proved in Appendix C.5. The idea of the proof is similar to that of
Theorem 3.1: we consider the spatial and the temporal parts of a given formula separately.
However, to take into account the interaction between these parts, we use the so-called
completion property of RCC-8 (cf. Balbiani & Condotta, 2002) with respect to a certain
class C of models: given a satisfiable set  of RCC-8 formulas and a model in C satisfying
a subset of , one can extend this partial model to a model in C satisfying the whole .
What happens if we extend the expressive power of the spatial component by allowing
Boolean operators on spatio-temporal region terms, i.e., jump from RCC-8 to BRCC-8?
Define spatio-temporal Boolean region terms by taking
%

::=

CIp

| CI%

| CI(%1 u %2 ) | CI%.

Denote by PT L  BRCC-8 the language obtained from PT L  RCC-8 by allowing spatiotemporal Boolean region terms as arguments of the RCC-8 predicates (this language was
called ST 1 by Wolter and Zakharyaschev, 2002). Formulas (A)(F) and (H) belong to
PT L  BRCC-8, but (G) uses the 2F and 3F operators on regions and so is not in PT L 
BRCC-8.
Now, another surprise is that the replacement of RCC-8 with BRCC-8 in our temporal
context results in an exponential jump of the computational complexity (remember that
both RCC-8 and BRCC-8 are NP-complete):
Theorem 3.9. The satisfiability problem for PT L  BRCC-8 formulas in tt-models based
on the flows of time hN, <i or hZ, <i is EXPSPACE-complete. It is EXPSPACE-complete
as well for models satisfying FSA or based on (arbitrary) finite flows of time.
The EXPSPACE upper bound (see Appendix C.3) is proved by a polynomial embedding of PT L  BRCC-8 into the one-variable fragment QT L1 of first-order temporal logic,
which is known to be EXPSPACE-complete (Hodkinson, Kontchakov, Kurucz, Wolter, &
Zakharyaschev, 2003). To construct this embedding, we first show that PT L  BRCC-8 is
complete with respect to Aleksandrov tt-models. In fact, we prove that every satisfiable
formula of the more expressive logic PT L  S4u introduced in Section 3.2 can be satisfied
in an Aleksandrov tt-model (see Lemma B.1 and the discussion above). Lemma C.1 then
shows that to satisfy a PT L  BRCC-8 formula, it suffices to take an Aleksandrov tt-model
189

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

based on a partial order of depth 1. By Lemma C.2, the width of the partial order can be
bounded by 2 (just as in the case of BRCC-8), and therefore unions of forks (or 2-brooms)
are enough to satisfy PT L  BRCC-8 formulas. These Aleksandrov tt-models based on
unions of forks can be encoded by means of unary predicates of QT L1 .
The EXPSPACE lower bound is proved in Appendix C.1 by encoding the corridor
tiling problem. It can also be established by a direct polynomial embedding of QT L1 into
PT LBRCC-8. To illustrate the idea, consider the QT L1 -formula x (P (x) P (x)) saying
that, for every point of the space, either it is in P now or will be there tomorrow. The same
statement can be expressed in PT L  BRCC-8 by the formula EQ(P t P, E)  DC(E, E),
where the last conjunct makes E empty.
Now let us make one more step in space and extend BRCC-8 to RC, thus obtaining the
spatio-temporal language PT L  RC with the following syntax:
%

::= CIp



::= %




::= 2

| CI%

| I%
|

| CI(%1 u %2 ) | CI%,

| 



| 1 u 2 ,

| 1  2

|  1 U 2

| 2 S  2 .

The reader should not be surprised now (although the authors were) that the extra expressivity results in one more exponential gap:
Theorem 3.10. The satisfiability problem for PT L  RC-formulas in tt-models based on
the flows of time hN, <i or hZ, <i is 2EXPSPACE-complete. It is 2EXPSPACE-complete
as well for models satisfying FSA or based on (arbitrary) finite flows of time.
The lower bound is established in Appendix C.1 and the upper bound in Appendix C.2.
Perhaps, it is proper time now to have a closer look at the emerging landscape. What
exactly causes these exponential jumps ? Can we locate more precise borders in the ladder
PSPACEEXPSPACE2EXPSPACE?
By analysing the proof of Theorem 3.8 (see Appendix C.5), we note that not so much
can be added to RCC-8. In fact, the maximal spatio-temporal logic (denoted by PT LRC 2 )
for which this proof goes through is based on spatio-temporal terms of the form
| CI%,

%

::= CIp



::= %



::= 1 u 2 .

| I%

| %

| I%,

On the other hand, even the addition of predicates of the form EQ(X, Y t Z) is enough
to make the logic EXPSPACE-hard (see Remark C.3). Thus, PT L  RCC-8 (or rather
its extension PT L  RC 2 ) is located pretty close to the border between PSPACE and
EXPSPACE spatio-temporal logics.
The following fragment RC  of RC indicates where the border between EXPSPACE
and 2EXPSPACE may lie:
%

::= Boolean region terms,



::= %

| ,



::= I%

| 



::= 1 u    u m

| 1 u 2 ,

190

| u

| .

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

Intuitively, the  and the  are spatial terms interpreted by regular closed and regular open4
sets, respectively (the interior of a region is regular open, the complement of a regular closed
set is regular open (and vice versa), regular closed sets are closed under unions and regular
open ones are closed under intersections). Thus,  can be regarded as a generalisation of
region terms and  as a generalisation of the interiors of regions. In other words, RC  is
the fragment of RC in which only the following ways of relating regions are available:
 there is a point where some regions meet;
 a region intersects the interior of another one;
 the interior of a region is not empty.
It is readily checked that BRCC-8 is a fragment of RC  . Moreover, it is a proper fragment
because (4) belongs to the latter but not to the former. The formula

 



 ( N orthKorea
2
u SouthKorea ) @ DmZone
(8)
(saying that the demilitarised zone between the North Korea and the South Korea consists
of the border between them along with some adjacent territories) shows that RC  is a
proper subset of RC:
BRCC-8 $ RC  $ RC.
Although RC  extends BRCC-8, it gives rise to the spatio-temporal logic of the same
computational complexity:
Theorem 3.11. The satisfiability problem for PT L  RC  -formulas in tt-models based on
the flows of time hN, <i or hZ, <i is EXPSPACE-complete. It is EXPSPACE-complete as
well for models satisfying FSA or based on (arbitrary) finite flows of time.
The lower bound follows immediately from Theorem 3.9 and the proof of the upper
bound is similar to that of Theorem 3.9 (see Appendix C.3). Again, due to the restriction
on possible ways of relating regions, we can polynomially bound the width n of n-brooms
that are required to satisfy PT LRC  -formulas (cf. Lemma C.2). In fact, we need formulas
similar to (8) in order to increase complexity to 2EXPSPACE.
The constructed hierarchy of decidable spatio-temporal logics still leaves at least one
important question: do there exist decidable spatio-temporal logics that allow applications
of the temporal operators U, 2F , 3F to region terms and what is their complexity? Consider
the languages PT L  L, for L  {BRCC-8, RC  , RC}, which differ from PT L  L only in
the definition of spatio-temporal region terms:
%

::=

CIp

| CI%

| CI(%1 u %2 ) | CI(%1 U %2 ) | CI(%1 S %2 ).

The following two theorems provide a positive (though partial) answer to this question:
Theorem 3.12. The satisfiability problem for PT L  BRCC-8 and PT L  RC  -formulas
in tt-models based on hN, <i or hZ, <i and satisfying FSA, or based on (arbitrary) finite
flows of time is EXPSPACE-complete.
4. Remember that a set X is regular open if ICX = X.

191

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

Theorem 3.13. The satisfiability problem for PT L  RC-formulas in tt-models based
on hN, <i or hZ, <i and satisfying FSA, or based on (arbitrary) finite flows of time is
2EXPSPACE-complete.
The upper bounds mentioned in these two theorems are proved in Appendices C.3 and
C.2, respectively. The lower bounds follow from the results for PT LBRCC-8 (Theorem 3.9)
and PT L  RC  (Theorem 3.10).
To appreciate the following theorem, the reader should recall that both PT L2 and RC 
are NP-complete:
Theorem 3.14. The satisfiability problem for PT L2 BRCC-8 and PT L2 RC  -formulas
in tt-models based on hN, <i or hZ, <i and satisfying FSA, or based on (arbitrary) finite
flows of time is EXPSPACE-complete.
Actually it is a consequence of the EXPSPACE-hardness of QT L1 with the sole temporal
operator 2F (see Hodkinson et al., 2003).
Unfortunately, very little is known about the complexity of our spatio-temporal languages interpreted in tt-models based on dense or arbitrary flows of time. In fact, the only
result we know of can be proved using the recent work (Hodkinson, 2004; Hodkinson et al.,
2003):
Theorem 3.15. The satisfiability problem for PT L  BRCC-8 and PT L  RC  -formulas
in tt-models satisfying FSA and based on hQ, <i, hR, <i or arbitrary flows of time belongs
to 2EXPTIME and is EXPSPACE-hard.

4. Conclusion
We have provided an in-depth analysis of the computational complexity of various spatiotemporal logics interpreted in Cartesian products of flows of time and topological spaces.
Some of these results are collected in Table 1. The design of the languages was driven by the
idea to cover the most basic features of spatio-temporal hybrids combining standard logics
of time and mereotopology, with the aim being to see how complex reasoning with these
hybrids could be. We did not try to fine-tune the languages for real-world applications. On
the contrary, we tried to keep them as pure and representative as possible and determine
computational challenges which any multi-dimensional approach to reasoning about space
and time would face. With this research objective in mind, we discuss now some conclusions
that can be drawn from Table 1.
The conclusion to be drawn from the undecidability results is easy: do not try to
implement a sound, complete and terminating algorithm which is supposed to decide the
satisfiability problem for PT L  S4u , PT L  S4u or PT L2  S4u you will never succeed.
If decision procedures are required, then alternative languages have to be devised.
The interpretation of the complexity results for decidable logics is not so transparent:
it is well-known that such results do not provide us with immediate conclusions regarding
the behaviour of implemented systems. For example, sometimes algorithms running in
exponential time in the worst-case perform better on practical problems than worst-case
optimal algorithms that run in polynomial time. Indeed, the complexity results should be
analysed together with their proofsif significant conclusions are required (cf. Nebel, 1996).
192

filanguage

n/a

spatial component L

flow
RCC-8

PT L[L]

N, Z,Q, R,
finite
or
arbitrary
N, Z

PT L2  L

RC

RC max

NP

PSPACE

PSPACE

(Thm. 2.4)

(Thm. 2.1)

NP

PSPACE

(Thm. 3.2)

(Thm. 3.1)

PSPACE
(Thm. 3.1)

PSPACE
(Thm. 3.8)


finite
 EXPSPACE
or
 PSPACE
N, Z+FSA

EXPSPACE

2EXPSPACE

(Thm. 3.9)

(Thm. 3.10)

?

?


finite
 EXPSPACE EXPSPACE
 2EXPSPACE
or
 NP
 EXPSPACE
(Thm. 3.14)
N, Z+FSA
arbitrary 

or
 2EXPTIME
 2EXPTIME
?
Q, R
 NP
 EXPSPACE
with FSA

undecidable
(Thm. 3.6)

undecidable
(Thm. 3.7)



N, Z

S4u

(Thm. 2.2)

NP

N, Z

PT L  L

BRCC-8

N, Z,Q, R,
finite
or
arbitrary

PT L  L

PT L2 [L]

of time

L

Combining Spatial and Temporal Logics: Expressiveness vs. Complexity

?

?

?

undecidable

?

(Thm. 3.3)


finite
 EXPSPACE EXPSPACE
or
 PSPACE
(Thm. 3.12)
N, Z+FSA

arbitrary 
 2EXPTIME
or
 2EXPTIME

EXPSPACE
Q, R
 PSPACE
(Thm. 3.15)
with FSA

2EXPSPACE

?

(Thm. 3.13)

?

undecidable
(Thm. 3.5)

?

?

Table 1: Complexity of the satisfiability problem for spatial and spatio-temporal logics.

193

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

Only the proofs show where the sources of the complexity are and whether they could be
relevant for practical problems and the implementation of algorithms.
In this respect our proofs are actually rather informative. The decidability proof for
PT L[S4u ] immediately provides us with a modular algorithm combining any known procedures for the components. The EXPSPACE-completeness results for PT L  BRCC-8
(with FSA) and PT L  BRCC-8 show an extremely close link between the spatio-temporal
languages and the one-variable fragment of first-order temporal logic. The algorithmic
problems investigated in the context of first-order temporal logic are, therefore, of the same
character as those we deal with in the spatio-temporal context. Thus, the experience of
working with algorithms for (fragments of) first-order temporal logics (Hodkinson, Wolter,
& Zakharyaschev, 2000; Degtyarev, Fisher, & Konev, 2003; Kontchakov, Lutz, Wolter, &
Zakharyaschev, 2004) about which we have a pretty good knowledge by now almost directly
translates to insights into possible algorithms for spatio-temporal logics. The PSPACEcompleteness result for PT L  RCC-8 is obtained by means of a reduction (modulo RCC-8
reasoning) to PT L. So we can conclude from the proof that it will be sufficient to have
good solvers for RCC-8 and PT L to obtain a reasonable prover for PT L  RCC-8. The
interaction between the two components turned out to be rather weak.
In conclusion, the complexity proofs clearly show the algorithmic problems to be solved
when dealing with the spatio-temporal logics presented in this paper. In particular, devising
algorithms for these logics should be conceived as part of the more general enterprise of
developing algorithms for propositional and the one-variable fragment of first-order temporal
logic.
Here are some comments on and explanations of the most important results in Table 1:
1. The undecidability result for PT L  S4u , PT L  S4u and PT L2  S4u solves a major
open problem of Wolter and Zakharyaschev (2002). It shows that, while S4u is a
suitable candidate for efficient pure spatial reasoning (Bennett, 1996; Renz & Nebel,
1998; Aiello & van Benthem, 2002a), its temporal extensions satisfying both (PC)
and (OC) are not suitable for practical spatio-temporal representation and reasoning.
2. Logics like PT L  BRCC-8 may turn out to be undecidable when interpreted in
arbitrary topological temporal models. One of the main origins of their expressive
power is a possibility to form infinite intersections and unions of regions. However, we
can tame the computational behaviour of these logics by imposing natural restrictions
on the classes of admissible models such as FSA.
3. The PSPACE upper bound for PT L  RCC-8 and the EXPSPACE lower bound for
PT L  BRCC-8 solve two other major open problems of Wolter and Zakharyaschev
(2002). It is of interest to note that the spatial fragments of PT L  RCC-8 and
PT L  BRCC-8 have the same computational complexity: both are NP-complete
over arbitrary topological spaces. Thus the additional Boolean connectives on spatial
regions interacting with the next-time operator  can make the logic substantially
more complex.
4. The 2EXPSPACE-completeness result for PT L  RC with FSA and PT L  RC is another example when a seemingly tiny increase of expressiveness results in a significant
jump of complexity.
194

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

5. PSPACE-completeness of PT L  RCC-8 is a particularly good news, since it shows
that this combination of PT L and RCC-8 has the same computational complexity
as PT L itself, for which surprisingly fast systems have been implemented (Schwendimann, 1998; Hustadt & Konev, 2003). This gives us hope that practical algorithms
for PT LRCC-8 can be implemented. Indeed, the proof shows that it may be possible
to encode the satisfiability problem for PT LRCC-8 into the satisfiability problem for
PT L and then use PT L provers. We note that this complexity result has been conjectured by Demri and DSouza (2002) and that our proof uses some ideas of Balbiani
and Condotta (2002).
6. On the other hand, the EXPSPACE lower bounds for PT L  BRCC-8 with FSA and
PT LBRCC-8 do not necessarily mean that reasoning with these logics is hopeless. In
fact, we show that both of them can be regarded as fragments of the one-variable firstorder temporal logic, for which tableau- and resolution-based decision procedures have
been developed and implemented (Degtyarev et al., 2003; Kontchakov et al., 2004).
Of course, there are many directions of further research in spatio-temporal knowledge representation and reasoning. Here we mention only some of them that are closely related to
the logics we have considered above.
 In this paper, we confined ourselves to considering linear flows of time. It may be
of interest, however, to investigate the computational properties of spatio-temporal
logics based on the branching time paradigm (see, e.g., Clarke & Emerson, 1981;
Emerson & Halpern, 1985) in order to model uncertainty about the future. Recent
results by Hodkinson, Wolter and Zakharyaschev (2001, 2002) give hope that such
logics can be decidable.
 We confined ourselves to considering only mereotopological formalisms for the spatial
dimension. It would be also of interest to consider spatial logics of directions (Ligozat,
1998), shape (Galton & Meathrel, 1999), size (Zimmermann, 1995), position (Clementini, Di Felice, & Hernandez, 1997), or even their hybrids (Gerevini & Renz, 2002).
We note that some results in this direction have been recently obtained by Balbiani
and Condotta (2002) and Demri and DSouza (2002).
 Another interesting and important perspective in both spatial and spatio-temporal
representation and reasoning is to move from arbitrary topological spaces to those
induced by metric spaces and introduce explicit and/or implicit numerical parameters.
First encouraging steps in this direction have been made in the work (Kutz, Sturm,
Suzuki, Wolter, & Zakharyaschev, 2003).
We conclude the paper with a number of open problems:
1. What is the precise computational complexity of PT L  BRCC-8 with FSA over
dense flows of time and arbitrary strict linear orders?
2. Are logics of the form PT L  L and PT L2  L, for L  {RC, BRCC-8, RCC-8},
decidable without FSA?
195

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

3. Are combinations of PT L and PT L2 with RC max (satisfying both (PC) and (OC))
decidable?
4. Is PT L  S4u undecidable over dense flows of time and arbitrary strict linear orders?
5. Is PT L  RCC-8 with FSA decidable in PSPACE?

Acknowledgments
The work on this paper was partially supported by U.K. EPSRC grants no. GR/R45369/01,
GR/R42474/01, GR/S61966/01 and GR/S63182/01. The work of the third author was also
partially supported by Hungarian Foundation for Scientific Research grants T30314 and
035192.
Special thanks are due to the referees of the first version of this paper whose remarks,
criticism and constructive suggestions have led to many days of intensive and exciting
research, new results and, hopefully, a better paper.

Appendix A. Complexity of Spatial Logics
In this appendix we prove Theorems 2.2 and 2.4. In these proofs we use the fact that S4u
(as well as its fragments) is complete with respect to (finite) Aleksandrov topological spaces
(McKinsey & Tarski, 1944; Goranko & Passy, 1992). Recall from p. 174 that an Aleksandrov
(topological ) model is a pair of the form M = hG, Vi, where G = hV, Ri is a quasi-order
and V is a map from the set of spatial variables into 2V . It will be more convenient for us
to unify notation for spatial formulas and spatial terms and write (M, x) |=  instead of
x  V( ), for  a spatial term and x a point in V . In particular, by the definition of the
interior and closure operators in Aleksandrov spaces,
(M, x) |= I

iff

(M, x) |= C

iff


y  V xRy  (M, y) |=  ,

y  V xRy  (M, y) |=  .

By the length `() of a formula  we understand the number of subformulas and subterms occurring in .
Proof of Theorem 2.2. The proof follows from Lemmas A.1 and A.2 below which show
together that every satisfiable RC-formula can be satisfied in an Aleksandrov model of size
polynomial (in fact, quadratical) in the length of the input formula (in other words, RC has
the polynomial finite model property). Thus, we have a nondeterministic polynomial time
algorithm for the satisfiability problem.
q
In fact, Lemma A.1 shows that RC is complete with respect to a subclass of Aleksandrov
spaces, namely, finite disjoint unions of finite brooms. Recall from p. 179 that a broom is
a partial order b of the form h{r}  V0 , Ri, where R is the reflexive closure of {r}  V0
(see Fig. 4). We call r the root of b and points in V0 the leaves of b; they are also referred
to as points of depth 1 and 0, respectively. A broom b is said to be a -broom,   , if
|V0 |  . In particular, we call a broom finite if it is an n-broom, for some n < .
196

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

Lemma A.1. Every satisfiable RC-formula is satisfied in an Aleksandrov model based on
a finite disjoint union of finite brooms.
Proof. As is well-known, if an RC-formula  is satisfiable then it can be satisfied in a finite
Aleksandrov model M = hG, Vi, G = hV, Ri. Define a new relation R0 on V by taking R0
to be the reflexive closure of R  (V1  V0 ), where
V0 = {x  V | y (xRy   yRx)}

and V1 = V  V0 .

(Without loss of generality we may assume that V1 6=  and no y  V0 has more than one
proper R-predecessor.) Let G0 = hV, R0 i and M0 = hG0 , Vi. Clearly, G0 is a partial order as
required. We prove that, for every RC-formula ,
M |= 

iff

M0 |= .

(9)

First we show that, for every Boolean region term % and every x  V ,
(M0 , x) |= %

iff

(M, x) |= %.

(10)

By definition, (M0 , x) |= p iff (M, x) |= p, for every spatial variable p. It is readily seen that
for every y  V0 and every spatial term  , we have (M0 , y) |=  iff (M, y) |=  . Now, if % is
a Boolean region term then % = CI for some spatial term  , and we clearly have:

(M, x) |= CI iff y  V xRy and z  V (yRz  (M, z) |=  )

iff y  V0 xR0 y and (M, y) |= 

iff y  V0 xR0 y and (M0 , y) |= 

iff y  V0 xR0 y and (M0 , y) |= I
iff

(M0 , x) |= CI.

Next, we extend (10) to spatial terms of the form I% where % is a Boolean region term. If
(M, x) |= I% then (M, y) |= % whenever xRy, and so, by R0  R, we have (M0 , x) |= I%.
Conversely, suppose (M0 , x) |= I%. Take any y with xRy and any z  V0 with yRz. We
claim that (M, z) |= %. Indeed, if x  V1 then this follows by IH from xR0 z. If x  V0
then zRx. Since (M0 , x) |= %, by IH and % = CI , we obtain (M, z) |= %. Now (M, y) |= %
follows by yRz and % = CI . Thus, (M, x) |= I%.
Finally, we can easily extend (10) to arbitrary spatial terms and formulas of RC because
both are constructed from spatial terms of the form % and I%, with % a Boolean region term,
using operators that do not depend on the structure of the underlying partial order. Thus
we have (9).
q
Lemma A.2. Every satisfiable RC-formula  is satisfied in an Aleksandrov model based
on a disjoint union of at most `() many 2`()-brooms.
Proof. Remember that every RC-formula  is (equivalent to) a Boolean combination of
5
 ,...,3

    , the spatial term
spatial formulas from some set  = {3
1
m }. For each 3

5. In the following proof we consider

  as an abbreviation for 3
 as primary and 2
.
3

197

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

 is also a Boolean (or rather set-theoretic) combination of some %1 , . . . , %k , I%01 , . . . , I%0m ,
where the %i and the %0i are Boolean region terms.
It follows from Lemma A.1 that  is satisfied in an Aleksandrov model M = hG, Vi,
  
where G = hV, Ri is a finite disjoint union of finite brooms. For every 3
 with

M |= 3 , fix a point x  V such that (M, x ) |=  . We may assume that the x are
   .
pairwise distinct and that the roots of all brooms are the points of the form x for 3

   .
Therefore, G is a disjoint union of  `() many finite brooms b , for 3

    , and each
Let us construct a new model M0 as follows. For each broom b , 3

%   , we pick
 a leaf y,% of b (if any) such that (M, y,% ) |= %,
 a leaf y,% of b (if any) such that (M, y,% ) |= %
and remove the other leaves of b . Denote by b0 the resulting broom. Clearly, it is a 2`()    , and M0 = hG0 , Vi.
broom. Let G0 = hV 0 , R0 i be the disjoint union of all b0 , for 3

It is easy to see that G0 is as required.
   ,
Now, to show that  is satisfied in M0 , it suffices to prove that, for all 3


M0 |= 3

iff

 .
M |= 3

(11)

By definition of M0 , for all leaves y of G0 and all spatial terms  ,
(M0 , y) |= 

iff

(M, y) |= .

  
Next, for every root x of b , every 3
 and every %   , we have (M, x ) |= % iff
there is a leaf y such that x Ry and (M, y) |= % (simply because % = CI, for some ). It
follows from the construction of M0 that (M, x ) |= % iff (M0 , x ) |= %, for every %   .
It also follows that (M, x ) |= I% implies (M0 , x ) |= I%. Conversely, if (M0 , x ) |= I%, but
(M, x ) 6|= I% then there is a leaf y such that x Ry and (M, y) 6|= % which is a contradiction.
Since intersection and complement do not depend on the structure of the underlying frame,
we have (M0 , x ) |=  iff (M, x ) |=  , for every root x of b , which proves (11).
q

Proof of Theorem 2.4. The PSPACE upper bound follows from Theorem 2.1. The proof
of PSPACE-hardness is by reduction of the validity problem for quantified Boolean formulas
which is known to be PSPACE-complete (Stockmeyer, 1987). We will slightly modify the
proof of Ladner (1977) (that shows the PSPACE-hardness of S4), in order to take into
account that the variables in RC max -formulas are always prefixed by CI.
We may assume that quantified Boolean formulas are of the form
 = Q1 p1 . . . Qn pn 0 ,
where Qi  {, } and 0 is a Boolean formula with variables p1 , . . . , pn . As is well known,
all possible truth assignments to p1 , . . . , pn can be arranged as the leaves of a full binary
tree of depth n. The left subtree of the root contains all truth assignments with p1 true
and the right subtree those with p1 false; then we branch on p2 , then p3 , and so on. We
can determine whether  is valid by pruning this full binary tree: whenever Qi is , then
we keep both subtrees at the ith level, and whenever Qi is  then only one of them. If this
198

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

00
q 3 , p 1 , p2 , p 3

r

I
3@

00
q 3 , p 1 , p2

00
q 3 , p 2 , p3

r
3

00
q 3 , p2

r

r
3

I
3@

@

@
@
q ,p ,p
2@r - r 2 1 2
6
1

@
@
2 r -r
6

r - r q 1 , p1
YH
H
HH
H

1

r -r

q 2 , p2

q1

*





HH

r rq
H

0

0

Figure 6: An Aleksandrov model that may satisfy  , for  = p1 p2 p3 0 .
way we can end up with a tree such that all its leaves evaluate 0 to true, then  is valid,
otherwise not.
We will generate the leaves of this binary tree in Aleksandrov models with the help of
an RC max -formula. More precisely, we will construct an RC max -formula  such that
 its length is polynomial in the length of , and
  is satisfied in an Aleksandrov model iff  is valid.
Take fresh spatial variables q0 , . . . , qn , and put, for i = 0, . . . , n,
   
q0 u q1
if i = 0;



   

i =
qi1 u qi u qi+1 ,
if 0 < i < n;







qn1 u qn ,
if i = n.
Now consider the variables p1 . . . , pn of 
variables, and let 00 be the result of
 as spatial
replacing every occurrence of pi with pi in 0 . Put
^
^




+

+
00
 
 
 

 = 3
2
2
0 
i1 @ (i t i ) 
i1 @ (i u i )  2
n @ ,
Qi =

Qi =

where, for i = 1, . . . , n,
 
i = C i u pi

and

 
i+ = C i u I pi .

Clearly,  is an RC max -formula and its length is polynomial in the length of .
Suppose first that  is valid. Then Fig. 6 shows the structure of a possible Aleksandrov
model satisfying  .
The converse direction is similar to that of Ladners proof (1977). Suppose that  is
satisfied
in an Aleksandrov model M. Then, for each necessary sequence of truth values for
 
p1 , . . . , pn , there is a point in M reflecting this sequence (we do not use the structure
of the spatial terms i here). Since, by the last conjunct of  , 00 holds in M at all these
points, we obtain that the quantified Boolean formula  must be valid.
q
199

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

Appendix B. Spatio-Temporal Logics Based on S4u
In this appendix we prove Theorems 3.1, 3.2, 3.6 and 3.7 as well as Proposition 3.4. Then
Theorems 3.3 and 3.5 are immediate corollaries of Theorem 3.6. But first, some general
results are established to be used later on.
We remind the reader that by an Aleksandrov tt-model we mean a tt-model based on an
Aleksandrov (topological) space. Every such model can be regarded as a triple of the form
K = hF, G, Vi, where F = hW, <i is a flow of time, G = hV, Ri a quasi-order, and V is a map
associating with every spatial variable p and every time point w  W a set V(p, w)  V .
As in Appendix A, instead of x  V(, w) we write (K, hw, xi) |=  to unify notation for
spatio-temporal formulas and terms.
Given a spatio-temporal formula , we denote by sub  the set of all its subformulas
and by term  the set of all spatio-temporal terms occurring in .
Lemma B.1. (i) If a PT L  S4u -formula  is satisfied in a tt-model with FSA and based
on a flow of time F, then  is satisfied in an Aleksandrov tt-model with FSA and based
on F.
(ii) If a PT L  S4u -formula  is satisfied in a tt-model based on a flow of time F, then
 is satisfied in an Aleksandrov tt-model based on F as well.
Moreover, in both cases we can choose an Aleksandrov tt-model K = hF, G, Vi satisfying
 (with F = hW, <i and G = hV, Ri) in such a way that for all w  W , x  V and
spatio-temporal terms  , the set
Aw,x, = {y  V | xRy and (K, hw, yi) |=  }
contains an R-maximal point 6 (provided of course that Aw,x, 6= ).
Proof. The proof uses the StoneJonssonTarski representation of topological Boolean
algebras (in particular, topological spaces) in the form of general frames (see, e.g., Goldblatt,
1976 or Chagrov & Zakharyaschev, 1997).
(i) Suppose that  is satisfied in a tt-model M = hF, T, Ui with FSA and based on a
topological space T = hU, Ii. Denote by V the set of all ultrafilters over U . For any two
ultrafilters x1 , x2  V , put x1 Rx2 iff A  U (IA  x1  A  x2 ). It is easy to see that R
is a quasi-order on V . Define an Aleksandrov tt-model K = hF, G, Vi by taking G = hV, Ri
and V(p, w) = {x  V | U(p, w)  x}. We show by induction on the construction of a
spatio-temporal term  that, for all w  W and x  V ,
(K, hw, xi) |= 

iff

U(, w)  x.

(12)

The basis of induction and the case of the Booleans are trivial. The case of  = I 0 is
standard (consult Goldblatt, 1976 or Chagrov & Zakharyaschev, 1997).
Case  = 1 U 2 . Assume that (K, hw, xi) |= 1 U 2 . Then there is v > w such that
(K, hv, xi) |= 2 and (K, hu, xi) |= 1 for all u in the interval (w, v). By IH, U(2 , v)  x and
U(1 , u)  x for all u  (w, v). Since
\
U(1 U 2 , w)  U(2 , v) 
U(1 , u),
u(w,v)

6. A point z is said to be R-maximal in A  V if, for every z 0  A, we have z 0 Rz whenever zRz 0 .

200

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

we shall have U(1 U 2 , w)  x if we show that
\
U(1 , u)  x.
U(2 , v) 

(13)

u(w,v)

In view of FSA, we can find time points u1 , . . . , ul  (w, v) such that
\
U(1 , u),
U(1 , u1 )      U(1 , ul ) =
u(w,v)

which yields (13) because ultrafilters are closed under finite intersections.
Conversely, let U(1 U 2 , w)  x. By FSA, there are time points v1 , . . . vl such that

[ 
\
U(1 , u) .
U(1 U 2 , w) =
U(2 , vi ) 
1il

u(w,vi )

And since x is an ultrafilter,
U(2 , vi ) 

\

U(1 , u)  x,

u(w,vi )

for some i, 1  i  l. Therefore, by IH, (K, hvi , xi) |= 2 and (K, hu, xi) |= 1 for all
u  (w, vi ). Hence (K, hw, xi) |= 1 U 2 .
Case  = 1 S 2 is considered analogously.
Now, we show that, for all w  W and spatio-temporal terms  ,

(K, w) |= 2

iff

U(, w) = U.

  . Then (K, hw, yi) |=  for all y  V , and so, by IH, U(, w)  y
Suppose that (K, w) |= 2
for all y  V . But then U(, w) = U . Conversely, if U(, w) = U then U(, w)  y for all
 .
y  V , from which, by IH, (K, w) |= 2
It follows immediately that  is satisfied in K. It should be also clear that K satisfies
FSA. This proves (i). The existence of R-maximal points in sets of the form Aw,x, (where
w  W , x  V and  is a spatio-temporal term) follows from a result of Fine (1974); see
also (Chagrov & Zakharyaschev, 1997, Theorem 10.36).

(ii) The construction is the same as in (i). First we show by induction that, for every
spatio-temporal term  of PT L  S4u , (K, hw, xi) |=  iff U(, w)  x. This time, however,
instead of U and S we need the inductive step for .
Case  =  0 . We have (K, hw, xi) |=  0 iff there exists an immediate successor w0 of
w such that (K, hw0 , xi) |=  0 iff, by IH, there is an immediate successor w0 of w such that
U( 0 , w0 )  x. It remains to recall that U( 0 , w) = U( 0 , w0 ) whenever w0 is the immediate
successor of w and U( 0 , w) =  whenever w has no immediate successor.
The remaining part of the proof is the same as in (i).
q
Proof of Proposition 3.4. The implication () follows immediately from the definition.
() Suppose that a PT LS4u -formula  is satisfied in a tt-model with FSA and a flow
of time F = hW, <i. Then, by Lemma B.1 (i),  is satisfiable in an Aleksandrov tt-model
M = hF, G, Vi with FSA and based on a quasi-order G = hV, Ri. In view of FSA, for
201

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

every   term , there are finitely many sets A1 , . . . , Ak  V such that {V(, w) | w 
W } = {A1 , . . . , Ak }. Therefore, there are finitely many time points w1 , . . . , wm  W such
that, for every w  W , there is wi , 1  i  m, with V(, w) = V(, wi ) for all   term .
Now we use the Lemmon filtration (see, e.g., Chagrov & Zakharyaschev, 1997) to construct
a tt-model based on a finite Aleksandrov topological space. First, define an equivalence
relation  on V by taking x  y if
(M, hwi , xi) |= 

iff

(M, hwi , yi) |= ,

for all i, 1  i  m, and   term .

Denote by [x] the equivalence class of x  V . The set V / of pairwise distinct equivalence
classes is clearly finite. Define a binary relation S on V / by taking [x]S[y] if
(M, hwi , yi) |= I

whenever (M, hwi , xi) |= I,

for all i, 1  i  m, and   term .

Clearly, S is well-defined, reflexive and transitive, and so G0 = hV / , Si is a finite quasiorder. Let V0 (p, w) = {[x] | x  V(p, w)}, for every spatial variable p and every w  W .
Consider the tt-model M0 = hF, G0 , V0 i. First we show that for all   term , x  V
and w  W ,
(M, hw, xi) |= 
iff
(M0 , hw, [x]i) |= .
The basis of induction follows from the definition of V0 , the cases of intersection and complement are trivial, and those of temporal operators follow by IH.
Suppose that (M, hw, xi) |= I and [x]S[y]. Then there is a moment wi such that
(M, hw, zi) |=  iff (M, hwi , zi) |=  , for all   term  and z  V . By the definition of S,
we have (M, hwi , yi) |=  , and so (M, hw, yi) |=  . Finally, by IH, (M0 , hw, [y]i) |=  , and
since y was arbitrary, we obtain (M0 , hw, [x]i) |= I .
Conversely, let (M0 , hw, [x]i) |= I and xRy. Then [x]S[y], and so (M0 , hw, [y]i) |=  ,
from which, by IH, (M, hw, yi) |=  . Thus, (M, hw, xi) |= I .
Finally, by a straightforward induction on the structure of , one can show that
(M, w) |= 

iff

(M0 , w) |= ,

for all   sub  and w  W . It follows that  is satisfied in M0 .

q

B.1 Temporalisations of S4u
Lemma B.2. Let  be a finite set of S4u -formulas. Then there is a finite quasi-order G
such that every satisfiable subset    is satisfied in some Aleksandrov model based on G.
Proof. For every satisfiable   , fix a model based on a finite quasi-order G = hV , R i
and satisfying . Let n = max{|V | :   ,  is satisfiable} and let G be the disjoint
union of n full n-ary (transitive) trees of depth n whose nodes are clusters of cardinality
n. It is not difficult to see that every G is a p-morphic image of G. Therefore, every
satisfiable    is satisfied in an Aleksandrov model based on G.
q
Proof of Theorem 3.1. PSPACE-hardness follows from Theorem 2.1 or 2.5. We show
the matching upper bound.
Let  be a PT L[S4u ]-formula. Since  is a PT L  S4u -formula, by Lemma B.1 (ii), it
is satisfiable in a tt-model iff it is satisfiable in an Aleksandrov tt-model based on the same
202

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

  of  we associate a fresh propositional
flow of time. With every (spatial) subformula 2

variable p and denote by  the PT L-formula that results from  by replacing all its
  with p .
subformulas of the form 2
We claim that  is satisfiable in an Aleksandrov

tt-model over a flow of time F = hW, <i iff

 there exists a temporal model N = hF, Ui satisfying  and,
  | (N, w) |= p }  {2
  | (N, w) |= p } of spatial
 for every w  W , the set w = {2


formulas is satisfiable.

The implication () is obvious. Conversely,
S suppose that we have a temporal model N
satisfying the conditions above. Let  = wW w . By Lemma B.2, there is a finite
quasi-order G such that, for every w  W , we have hG, Vw i |= w for some valuation
Vw . It should be clear that  is satisfied in the Aleksandrov tt-model hF, G, Vi, where
V(p, w) = Vw (p), for every spatial variable p and every w  W .
Now, to devise a decision procedure for PT L[S4u ] which uses polynomial space in the
length of the input formula, one can take the corresponding nondeterministic PSPACE
algorithm for PT L (Sistla & Clarke, 1985; Reynolds, 2004, 2003) and modify it as follows.
The algorithm constructs a pure temporal model N = hF, Ui for  and every time it
produces a state for a time instant w  W , it additionally checks whether the set w of
spatial formulas is satisfiable. By Theorem 2.1, this extra test can also be performed by a
PSPACE algorithm, which does not increase the complexity of the combined algorithm. q
Proof of Theorem 3.2. The proof is essentially the same as that of Theorem 3.1, but now
nondeterministic polynomial-time algorithms for the component logics are available.
q
B.2 Undecidability of PT L  S4u and PT L2  S4u
Note that although our spatio-temporal languages contain no propositional variables, we
 p can be regarded as a proposition.
still can simulate them: for a spatial variable p, formula 2
 p, for a spatial
Thus, in what follows by a propositional variable p we mean the formula 2
variable p (note the different typefaces used to denote propositional and spatial variables).
Proof of Theorem 3.6. The proof is by reduction of the undecidable Posts (1946) correspondence problem or PCP, for short. It is formulated as follows. Given a finite alphabet
A and a finite set P of pairs hv1 , u1 i , . . . , hvk , uk i of nonempty finite words


ff


ff
vi = bi1 , . . . , bili ,
ui = ci1 , . . . , ciri
(i = 1, . . . , k)
over A, an instance of PCP, decide whether there exist an N  1 and a sequence i1 , . . . , iN
of indices such that
vi1      viN = ui1      uiN ,
(14)
where  is the concatenation operation. We will construct (using only future-time temporal
operators) a PT L  S4u -formula A,P such that
(i) the length of A,P is a polynomial function in the size of both A and P ;
(ii) if A,P is satisfiable in a tt-model based on hN, <i then there exist an N  1 and a
sequence i1 , . . . , iN of indices such that (14) holds;
203

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

(iii) if there exist an N  1 and a sequence i1 , . . . , iN of indices such that (14) holds then
A,P is satisfiable in a tt-model with FSA and based on hN, <i;
(iv) A,P is satisfiable in a tt-model based on hN, <i iff A,P is satisfiable in a tt-model
based on a finite flow of time.
The case of hZ, <i follows immediately. By Lemma B.1 (ii), it suffices to consider only
Aleksandrov tt-models for A,P .
We build A,P using spatial variables lefta and righta (a  A), left, right and stripe, as
well as propositional variables pairi , for every pair hvi , ui i, 1  i  k, and range.
The variable range is required to relativise temporal operators 2F and 3F in order to
ensure that we can construct a model based on a finite flow of time. The variable stripe is
used to introduce a new strict closure operator in Aleksandrov spaces by taking, for every
spatio-temporal term  ,


S = stripe @ C(stripe u C ) u stripe @ C(stripe u C ) .
Denote by Sn a sequence of n operators S. Other abbreviations we need are 1  2 which
stands for (1 @ 2 ) u (2 @ 1 ) and 2+
F  which replaces   2F .
The formula A,P is defined as the conjunction
A,P = range  stripe  pair  eq  left  right ,
where
range = range  3F range  2F (range  2F range),


_
^
3
range

pair

(pair

pair
)
,
pair = 2+
F
i
i
j
F
1ik


 (stripe  stripe) ,
3F range  2


^
 (left
= 3F range 
2

right
)
a
a ,

stripe =
eq

1i<jk

2+
F

aA

left is the conjunction of (15)(21), for all i with 1  i  k,
^
G


+

2+
lefta ,
F 3 lefta u leftb  2F 2 left 
aA

a6=b
a,bA

^

(15)




2+
F pairi  2(lefta @ lefta ) ,

(16)

aA

 left  2+ 2
2
F (left @ Sleft),

2+
F
2+
F

(17)

 (left @
pairi  2
,
^
 ((Sj left u Sj+1 left) @ left i
2
pairi 
b



Sli left)

li j

j<li
left

pairi  3
i ,

(18)

) ,

(19)
(20)

 ((left u Sleft) @
2F pairi  2

204

left 
S
i ) ,

(21)

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity
b

b

b

b

yn4 b
.
..
.
.
.

b

b

b

.
.
.

.
.
.

.
.
.

b

b

b

yn3 +1 b
yn3 b
.
..
.
.
.

yn2 +1 b
yn2 b
.
..
.
.
.

yn1 +1 b
yn1 b 

.
..
.
.
li
.
 1
b
y1
pairi1
0

b

b

.
.
.

.
.
.

b

b

b

trb


li
 3

b
btr


li
 4

trb

bili4
vi4

. 4
.
.

br

bi14

br

bili3

. 3
.
.

vi3
rb

br

bi13

rb

br

bili2

. 2
.
.


.
.
l
.
 i2
b

rb

rb

br

bi12

trb

rb

rb

br

bili1

vi2

. 1
.
.

vi1
rb

rb

pairi2
1

b = left
r = left
t = left u Sleft

rb

pairi3
2
range

pairi4
3

br

bi11

4

...

Figure 7: Model satisfying left , for N = 4.
where
ileft = leftbi u S leftbi u S(leftbi u    u Sleftbi ) . . .
1

2

3



li

(remember that li is the length of the word vi ). The conjunct right is defined by replacing
in left all occurrences of left with right, lefta with righta (for a  A), li with ri and ileft
with iright , which is defined similarly. (Note that pairi occurs in both left and right .)
Let us prove that A,P is as required. Suppose that (M, 0) |= A,P , for an Aleksandrov
tt-model M = hhN, <i , G, Vi with G = hV, Ri. Since (M, 0) |= eq , we can find an N ,
1  N < , such that
^
 (left
(M, N ) |= range 
2
(22)
a  righta ).
aA

In view of range , we have (M, j) |= range for all j, 0  j  N . Let i1 , . . . , iN be the
sequence of indices such that, for 1  j  N , we have (M, j  1) |= pairij (pair ensures
that there is a unique sequence of this sort). We claim that (14) holds for this sequence.
Since stripe holds in M at 0, we have, for every y  V , (M, h0, yi) |= stripe iff
(M, hj, yi) |= stripe for all j, 0  j  N . Denote by Rs the transitive binary relation
on V defined by taking xRs y if there is z  V such that xRzRy and (M, h0, xi) |= stripe
holds iff (M, h0, zi) 6|= stripe. Then we clearly have that, for every j, 0  j  N , and every
xV,
(M, hj, xi) |= S

iff

there is y  V such that xRs y and (M, hj, yi) |= .

Call a sequence hy1 , . . . , yl i of (not necessarily distinct) points from V an Rs -path in
V(left, j) of length l if y1 , . . . , yl  V(left, j) and y1 Rs y2 Rs . . . Rs yl . For every sequence
205

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

z1 , . . . , zl of points from V(left, j) we define
leftwordj (z1 , . . . , zl ) = ha1 , . . . , al i ,
where the ai are the (uniquely determined by (15)) symbols from A with (M, hj, zi i) |= leftai .
We will show now that, for every j, 1  j  N , the following holds:


ff
(a) there exists an Rs -path y1 , . . . , ynj in V(left, j) of length nj = li1 +    + lij such
that
leftwordj (y1 , . . . , ynj ) = vi1  . . . vij ;
(b) every Rs -path in V(left, j) is of length  nj ;


ff
(c) for every Rs -path y1 , . . . , ynj in V(left, j), we have
leftwordj (y1 , . . . , ynj ) = vi1  . . . vij .
Indeed, for j = 1, we have (a) by (M, 0) |= pairi1 and (20), (b) by (17) and (18), and
(c)

 by (19).ff Now assume inductively that (a)(c) hold for some j, 1  j < N . Let
y1 , . . . , ynj be a maximal Rs -path in V(left, j). First, by (16), y1 , . . . , ynj  V(left, j + 1).


ff
Second, since (M, j, ynj ) |= left u Sleft and (M, j) |= pairij+1 , (21) now implies that
ff


there exist ynj +1 , . . . , ynj +lij+1 such that y1 , . . . , ynj +lij+1 is an Rs -path in V(left, j + 1),
as required in 
(a). For (b) and
ff (c), observe first that for every Rs -path hy1 , . . . , yl i in
V(left, j + 1), y1 , . . . , yllij+1 is an Rs -path in V(left, j), by (18). So l  nj+1 must
hold. If l = nj+1 then leftwordj (y1 , . . . , yllij+1 ) = vi1  . . .  vij by the induction hypothesis, and so leftwordj+1 (y1 , . . . , yllij+1 ) = vi1  . . .  vij by (16). On the other hand,
leftwordj+1 (yllij+1 +1 , . . . , yl ) = vij+1 by (19), and so we have leftwordj+1 (y1 , . . . , yl ) =
vi1  . . . vij  vij+1 , as required.
We can repeat the argument above for the right side as well. For every sequence
z1 , . . . , zl of points from V(right, j), define
rightwordj (z1 , . . . , zl ) = ha1 , . . . , al i ,
where the ai are the uniquely determined elements of A such that (M, hj, zi i) |= rightai .
We then have, for every 1  j  N :


ff
(a0 ) there is an Rs -path y1 , . . . , ymj in V(right, j) of length mj = ri1 +    + rij such that
rightwordj (y1 , . . . , ymj ) = ui1  . . . uij ;
(b0 ) every Rs -path in V(right, j) is of length  mj ;


ff
(c0 ) for every Rs -path y1 , . . . , ymj in V(right, j), we have
rightwordj (y1 , . . . , ymj ) = ui1  . . . uij .
206

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

Now, by (15) and (22), we have V(left, N ) = V(right, N ). By (a), there exists an Rs path hy1 , . . . , yl i in V(left, N ) such that l = nN and leftwordN (y1 , . . . , yl ) = vi1  . . . viN .
By (b0 ), we have nN  mN . Similarly, using (a0 ) and (b), we obtain mN  nN , from which
nN = mN . Hence, by (c0 ), rightwordN (y1 , . . . , yl ) = ui1  . . . uiN . Since, by (22),
leftwordN (y1 , . . . , yl ) = rightwordN (y1 , . . . , yl ),
we finally obtain vi1  . . . viN = ui1  . . . uiN , as required.
Conversely, suppose there is an N  1 and a sequence i1 , . . . , iN for which (14) holds.
We will show that A,P is satisfiable in an Aleksandrov tt-model M = hhN, <i , hN, i , Vi
with FSA. Let nj = li1 +    + lij and mj = ri1 +    + rij for every j, 1  j  N . By our
assumption, nN = mN and we have
vi1  . . . viN = ha1 , . . . , anN i = ui1  . . . uiN .
Define a valuation V by taking
 V(range, j) is true iff 0  j  N ,
 V(stripe, j) = {2m | m < , 0  j  N },
 V(pairi , j  1) is true iff i = ij and 1  j  N ,
 V(lefta , j) = {k | 1  k  nj , ak = a} for a  A and 1  j  N ,
 V(righta , j) = {k | 1  k  mj , ak = a} for a  A and 1  j  N ,
S
S
V(righta , j).
V(lefta , j) and V(right, j) =
 V(left, j) =
aA

aA

One can easily check that under this valuation we have (M, 0) |= A,P and M satisfies
FSA. It is also readily seen that A,P is satisfiable in a tt-model based on hN, <i iff it is
satisfiable in a tt-model based on a finite flow of time.
q
Proof of Theorem 3.7. We show this by modifying formulas from the proof of Theorem 3.6. First, we replace stripe with
+

2+
F 2(stripe @ 2F stripe)  2F 2(stripe @ 2F stripe).

Then, left is the conjunction of (150 )(210 ), for all i with 1  i  k,
^
G


+

2+
lefta ,
F 3 lefta u leftb  2F 2 left 
aA

a6=b
a,bA

^

(150 )



2+
F pairi  2(lefta @ 2F lefta ) ,

(160 )

aA

 left  2+ 2
2
F (left @ Sleft),

2+
F
2+
F

(170 )


 (left @ 3 Sli left) ,
pairi  2
F
^
 (left u 2 left) @ 2 ((Sj left u Sj+1 left) @ left i
pairi 
2
F
F
b

li j

j<li
left

pairi  2F 3
i ,

2F

(180 )

) ,

(190 )
(200 )

left 
 ((left u Sleft) @ 2 S
pairi  2
F
i ) ,

207

(210 )

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

where the ileft are defined exactly as in the proof of Theorem 3.6. Formula right is modified
in a similar way.
q
Remark B.3. In fact, the set of PCP instances without solutions is not recursively enumerable and therefore, the proofs above show that the sets of PT L  S4u and PT L2  S4u formulas which are true in all models based on hN, <i, hZ, <i or finite flows of time are not
recursively enumerable either. Therefore, these logics are not recursively axiomatisable.

Appendix C. Spatio-Temporal Logics Based on RC
In this appendix we establish lower and upper complexity bounds for a wide range of
decidable spatio-temporal combinations and, in particular, prove Theorems 3.83.15. We
begin with a straightforward generalisation of Lemma A.1 to the spatio-temporal case:
Lemma C.1. (i) If a PT L  RC-formula  is satisfiable in a tt-model with FSA and based
on a flow of time F then  is satisfiable in an Aleksandrov tt-model based on F and a finite
disjoint union of finite brooms.
(ii) If a PT L  RC-formula  is satisfiable in a tt-model based on a flow of time F then 
is satisfiable in an Aleksandrov tt-model based on F and a (possibly infinite) disjoint union
of -brooms.
Proof. (i) By Lemma B.1 (i),  is satisfiable in an Aleksandrov tt-model based on F and a
finite quasi-order G. The rest of the proof is similar to that of Lemma A.1. Further details
are left to the reader.
(ii) By Lemma B.1 (ii),  is satisfiable in an Aleksandrov tt-model based on F and a
quasi-order G = hV, Ri. The rest of the proof again is similar to that of Lemma A.1. We
only note that although G can be infinite, still for every x  V there is a y  V0 such that
xRy. This is guaranteed by the condition that the set Aw,x,> has a maximal point.
q
Observe that Aleksandrov spaces are essentially infinite in case (ii) of Lemma C.1 and a
generalisation of Lemma A.2 does not go through. First, we can easily enforce a topological
space to be infinite using the PT L  RCC-8 formula

2+
F NTTP(p, p).

Moreover, the formula
 
 
   

( p
p )
3
u I p )  2+
F 2( p @


2+
F2



 
  

 
p u I p @ I p u p u p

is satisfied in an Aleksandrov tt-model based on a single -broom, but cannot be satisfied
in an Aleksandrov tt-model based on a union of n-brooms for any finite n.
On the other hand, Aleksandrov tt-models based on disjoint unions of n-brooms, where
n is bounded by the width of the formula, are enough for spatio-temporal logics based on
RC  . Recall that spatial terms  of PT L  RC  (and PT L  RC  ) are defined as follows


::= %

| ,



::= I%

| 



::= 1 u    u m

| 1 u 2 ,

208

| u

| ,

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

where the % are spatio-temporal Boolean region terms of PT L  BRCC-8 (and PT L 
BRCC-8, respectively). It is not hard to see that, for every tt-model M = hF, T, Vi with
F = hW, <i, T = hU, Ii and every w  W , we have
V(, w) = CIV(, w)

and

V(, w) = ICV(, w),

(23)

i.e., the  are always interpreted by regular closed sets, whereas the  by regular open ones.
We define the width w() of a PT L  RC  -formula  as the maximal number m of
 ( u    u 
conjuncts in its subformulas of the form 2
1
m ), if such subformulas exist, and put
w() = 1 otherwise.
Lemma C.2. (i) If a PT L  RC  -formula  is satisfiable in a tt-model with FSA and
based on a flow of time F then  is satisfiable in an Aleksandrov tt-model based on F and a
finite disjoint union of w()-brooms.
(ii) If a PT L  RC  -formula  is satisfiable in a tt-model based on a flow of time F
then  is satisfiable in an Aleksandrov tt-model based on F and a (possibly infinite) disjoint
union of w()-brooms.
Proof. By Lemma C.1, we may assume that  is satisfied in an Aleksandrov tt-model M =
hF, G, Vi, where F = hW, <i and G = hV, Ri is a disjoint union of brooms (in (i), the union
and the brooms are finite). Without loss of generality we may assume that  is composed
 ,...,3
  },7
(using temporal operators and the Booleans) from formulas of the set  = {3
1
n
where every i has one of the following forms
1 u    u m ,

u

or

,

(24)

and the i ,  and  are as defined above.
  
  , we fix a point x
For every 3
 and every w  W with (M, w) |= 3
,w  V such
that (M, hw, x,w i) |=  . We may assume that the x,w are pairwise distinct and that the
   .
roots of all the brooms are the points of the form x,w for some w  W and 3

  
Therefore, G is a disjoint union of brooms b,w , for 3
 and w  W .
Let us construct a model M0 = hF, G0 , V0 i as follows. Given a broom b,w , we delete
some of its leaves depending on the form of  . Three cases are possible:
Case  = 1 u    u m : take m leaves y1 , . . . , ym of b,w such that (M, hw, yi i) |= i and
x,w Ryi for i = 1, . . . , m and remove all leaves different from y1 , . . . , ym .
Case  =  u : take a leaf y of b,w such that (M, hw, yi) |=  and x,w Ry and remove
all other leaves. Note that, by (23), we have (M, hw, yi) |= , and therefore (M, hw, yi) |=  .
Case  = : take a leaf y of b,w such that x,w Ry and remove all other leaves. By (23),
we have (M, hw, yi) |=  .
Denote by b0,w the resulting broom. Clearly, it is a w()-broom. Let G0 = hV 0 , R0 i be
0
  
the disjoint union of all b,w , for 3
 and w  W . It should be clear that G is as
0
required. Finally, we define V by taking for every spatial variable p, every w  W and
every x  V 0 ,
x  V0 (p, w)
7. We treat

iff

there is y  V 0 of depth 0 such that xR0 y and y  V(p, w).

 as an abbreviation.
 as primitive and 2
3

209

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

   ,
To show that  is satisfied in M0 , we first prove that, for all w  W and all 3


(M0 , w) |= 3

iff

 .
(M, w) |= 3

It is readily proved by induction that we have (M0 , hw, xi) |=  iff (M, hw, xi) |=  , for all
points x  V 0 of depth 0, all w  W and all spatio-temporal terms  .
  
Then, by the construction, we also have that, for all formulas 3
 and all w  W ,
0


  implies
(M, w) |= 3 implies (M , w) |= 3 . So it remains to show that (M, w) |= 3
0
0
  for all 3
  
(M , w) |= 3
 and all w  W . Suppose that we have (M , hw, xi) |=  and
  . Consider three possible cases for  :
(M, w) |= 3
Case  = 1 u    u m . Then, for every i, 1  i  m, there is yi  V 0 of depth 0 such
that xR0 yi and (M0 , hw, yi i) |= i . But then (M, hw, yi i) |= i and, by (23), (M, hw, xi) |= i .
.
Therefore, (M, hw, xi) |=  , contrary to (M, w) |= 3
0
Case  =  u . Then there is y  V of depth 0 such that xR0 y, (M0 , hw, yi) |=  and,
by (23), (M0 , hw, yi) |= . Thus (M0 , hw, yi) |=  . But then (M, hw, yi) |=  , contrary to
.
(M, w) |= 3
Case  = . Then there is y  V 0 of depth 0 with xR0 y and, by (23), (M0 , hw, yi) |=  .
.
But then (M, hw, yi) |=  , contrary to (M, w) |= 3
Now, by a straightforward induction we can easily show that, for all w  W and all
formulas  built from  using the temporal operators and the Booleans,
(M0 , w) |= 

iff

(M, w) |= .

It follows that  is satisfied in M0 .

q

C.1 Lower Complexity Bounds (I)
Proof of Theorem 3.10, lower bound. The proof is by reduction of an arbitrary problem in 2EXPSPACE to the satisfiability problem of PT L  RC. Let A be a (single-tape,
deterministic) Turing machine such that A halts on every input (accepting or rejecting it),
f (n)
and A uses  22
cells of the tape on any input of length n, for some polynomial f . Given
any such Turing machine A and an input x for it, we will construct a PT L  RC-formula
A,x (using only future-time temporal operators) such that
(i) the length of A,x is polynomial in the size of A and x;
(ii) if A,x is satisfiable in a tt-model based on hN, <i then A accepts x; and
(iii) if A accepts x then A,x is satisfiable in a tt-model with FSA and based on hN, <i.
The case of hZ, <i as a flow of time (with or without FSA) follows immediately. The case
of finite flows of time can be proved by relativising the temporal operators of A,x (say,
by a propositional variable range as in the proof of Theorem 3.6 in Appendix B.2 and in
the proof of the lower bound of Theorem 3.9 below): we can obtain a formula 0A,x such
that 0A,x is satisfiable in an Aleksandrov tt-model based on hN, <i iff it is satisfiable in an
Aleksandrov tt-model based on the same quasi-order but on a finite flow of time. So this
way all the lower bound results of this theorem follow.
210

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

Given a Turing machine A, polynomial f , and input x = hx1 , . . . , xn i as above, let
d = f (n),
exp(1, d) = d  2d and exp(2, d) = exp(1, d)  2exp(1,d) .
Then we have
22

f (n)

 exp(2, d).

(25)

Our plan is as follows. First, we will show that yardsticks of length exp(2, d) (similar to
those used by Stockmeyer, 1974 or Halpern and Vardi, 1989) can be encoded by PT L  RCformulas of length polynomial in d. These yardsticks will be used to define a temporal
operator exp(2,d) . Then, using this operator, we will encode the computation of A on
input x.
By Lemma C.1 (ii), if a PT LRC-formula A,x is satisfied in a tt-model based on a flow
of time hN, <i, then it is satisfied in an Aleksandrov tt-model M = hhN, <i , G, Ui, where
G = hV, Ri is a disjoint union of -brooms. Take such a model M and suppose that the
PT L  RC-formula8

 


aux
(26)
2+
F 2 aux 


is true in M at moment 0. Since region aux does not change over time, we can divide all
points

 in V into three disjoint sets: external, boundary and internal points with respect to
aux i.e., those satisfying








ep(aux) = aux ,
bp(aux) = aux u I aux
and
I aux ,
respectively. Note that every boundary point has a non-boundary R-successor, so boundary
points can only be of depth 1. In what follows

 we simply speak about external and boundary
points not mentioning with respect to aux .
We define the exp(2,d) operator by a PT L  RC-formula of length polynomial in d as
follows:
(a) First, we encode yardsticks of length d. We will use different formulas for yardsticks
on external points and for yardsticks on boundary points.
(b) Then, with the help of d-yardsticks, we encode yardsticks of length exp(1, d). We
will again use different formulas for external and boundary points.
(c) Next, with the help of exp(1, d)-yardsticks on both boundary and external points, we
encode yardsticks of length exp(2, d) on boundary points.
(d) Finally, with the help of exp(2, d)-yardsticks on boundary points, we define a polynomial-length exp(2,d) operator applicable to propositional variables.
Step (a). Suppose that (26) and the following formula hold in M at 0:


+
ext

2+
F 2 bp(aux) @ 0,d  2F 2 ep(aux) @ 0,d
where
0,d =



(27)


l

 

 d1
j delim0
,
delim0  d delim0 u
delim0 @
j=1

8. Recall that 1  2 stands for (1 @ 2 ) u (2 @ 1 ). We assume that u and t bind stronger than .

211

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

ext results from 
and 0,d
0,d by replacing each occurrence of delim0 with ext delim0 .


Take a boundary point z. Suppose that v  N is such that (M, hv, xi) |= delim0 . By
0,d , for every time moment w  v,


(M, hw, zi) |= delim0
iff
w  v (mod d),


that is, on z, delim0 holds once inevery
 d time instants, starting from v.By the second

conjunct of (27), external points of aux behave similarly with respect to ext delim0 .
Step (b). To encode yardsticks of length exp(1, d), recall first that every number a < 2d
can be represented in binary by asequence
a0 . . . ad1 of bits. We will mark the bits of

binary numbers by a region term bit1 as
 follows. Given a boundary point z and a time
moment v such that (M, hv, zi) |= delim0 , we say that an interval [w, w + d  1], for some
w = v + j  d, j  N, encodes a number a < 2d on z, if for every i < d,


(M, hw + i, zi) |= bit1
iff
ai = 1.

Recall that the binary representation b0 . . . bd1 is the successor of a0 . . . ad1 modulo
the following holds: for all i, 0  i < d, we have ai = bi iff aj = 0, for some j, i < j
We will use the d-intervals starting from v to encode < 2d numbers in such a way
consecutive intervals encode consecutive (modulo 2d ) numbers, starting from 0.
So, suppose that (26), (27) and the following formula hold in M at 0:


ext
ext


 2+
2+
F 2 ep(aux) @ 1,d u 1,d ,
F 2 bp(aux) @ 1,d u 1,d

2d if
< d.
that

(28)

where
1,d

=

1,d

=







 

lwr1  delim0 t bit1 u lwr1
u
 



 




  
zr1  bit1 u delim0 t zr1
u delim1  delim0 u zr1 ,



 

lwr1 
bit1  d bit1 ,

ext and  ext result from 
and both 1,d
1,d and 1,d , respectively, by attaching prefix ext to all
1,d
of their spatial variables (save aux).


Take a boundary point z. Suppose that v  N is such
 that (M, hv, zi) |= delim1 .
Then, by the last conjunct of 1,d , we have (M, hv, zi) |= delim0 . Since, by (a), delim0
holds once in every d time instants on z, delim0 marks the starting moment of each
d-interval. Then, by the first conjunct of 1,d , for every i, 0  i < d, we have9




(M, hv + i, zi) |= lwr1
iff
(M, hv + j, zi) |= bit1 , for all j, i < j < d.

Therefore, 1,d says that consecutive < 2d numbers (starting with 0) are encoded by consecutive d-intervals (starting from v). Similarly to the first conjunct of 1,d , its second conjunct
ensures that, for every i, 0  i < d,
 


(M, hv + i, zi) |= zr1
iff
(M, hv + j, zi) |= bit1 , for all j, i  j < d.
9. Since
apply the U operator

we cannot

  to form
 spatio-temporal
 terms,
 auxiliary regions

 are
 used instead:

lwr1  delim0 t bit1 u lwr1 ensures that lwr1 behaves as bit1 U delim0 . This
equality term can indeed be regarded as a fixed point characterisation of the U operator.
Note

 also that


we do not need to require (as we should do for the fixed point characterisation) lwr1 @ 3F delim0 to
be true because the eventuality is already enforced by 0,d .

212

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity



So, by the last conjunct of 1,d , delim1 holds on z once in every exp(1, d) = d  2d time
instants, starting
 from v. By
 the second conjunct of (28), external points behave similarly
with respect to ext delim1 .
Step (c). Now we construct yardsticks of length exp(2, d), using the exp(1, d)-yardsticks
constructed in (b). Suppose that (26)(28) and the following formulas hold in M at 0:

2+
F 2 bp(aux) @






ext delim1
 2+
@ (ep(aux) t bp(aux)) ,
F 2 ext delim1


2+
F 2 ep(aux) @ 1,d (bit2 ) ,


2+
F 2 bp(aux) @ 2,d u 2,d ,


(29)
(30)
(31)

where 2,d is defined similarly to 1,d and
1,d (bit2 )

=



jm1 bit2







 

 

delim1 u bit2
t ext delim1 u jm1 bit2 ,









=
bit2  I bit2
u lwr2 
bit2  J1,d bit2 ,


= I (aux u ext delim1 ) @ jm1 bit2 .
ext

2,d
J1,d bit2



Take a boundary point z. Suppose v is a time moment such that (M, hv, zi) |= delim2 .
Then, by the last conjunct of 2,d , (M, hv, zi) |= delim1 . We know from (b) that delim1
holds on z once in every exp(1, d) time instants starting from v. So, by 2,d and the first
conjunct of 2,d we intend to express that consecutive < 2exp(1,d) numbers (starting with
0) are encoded by consecutive
 exp(1, d)-intervals starting from v. If we could do this then,
by the last conjunct of 2,d , delim2 would hold on z once in every exp(2, d) time instants
starting from v. The only problem (and the only
from step (b)) is that to mark
 difference

exp(1,d)
the bits of < 2
binary numbers by a term bit2 , we need to show that the (polynomial


length) term J1,d bit2 actually defines exp(1,d) bit2  in the sense that, for every w  v,
(M, hw, zi) |= J1,d bit2



ff


(M, w + exp(1, d), z ) |= bit2 .

iff

(32)

Suppose first that (M, hw, zi) |= J1,d bit2 . Then,
by (29),
yw
 there is an external R-successor


of z (of depth 0) such that (M, hw, yw i) |= ext delim1 , and so (M, hw, yw i) |= jm1 bit2 .
On the other hand, it is not hard to see that if (M, hw, zi) 6|= J1,d bit2 , then there
 is
0
0
an external R-successor yw of z (of depth 0) such that (M, hw, yw i) |= ext delim1 but


0 i) |= jm bit .
(M, hw, yw
2
1


In both cases, it is readily checked that if (M, hw, yi) |= ext delim1 , for some external
point y, then, by (30),


(M, hw, yi) |= jm1 bit2



ff


(M, w + exp(1, d), y ) |= bit2 .

iff

Now (32) follows by the first conjunct of 2,d .
Step (d). We are now in a position to define a polynomial-length exp(2,d) operator J2,d
applicable to propositional variables. Recall that a propositional variable p stands for spatial
 p, where p is a spatial variable associated with p. Now, for every propositional
formula 2
213

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

variable p we intend to apply the new operator to, we introduce a fresh spatial variable
jm2 p. Suppose that (26)(31) and the following formulas hold in M at 0:



2+
F 3 bp(aux) u delim2 ,
 
 



2+
 2+
F 2 p  2 p
F 2 2,d (p),

(33)
(34)

where 2,d (p) is obtained by replacing bit2 , jm1 bit2 and ext delim1 in 1,d (bit2 ) with p,
jm2 p and delim2 , respectively. Let




 (bp(aux) u
delim2 ) @ jm2 p .
J2,d p = 2
We claim that, for every time moment w and every propositional variable p,
(M, w) |= J2,d p

(M, w + exp(2, d)) |= p.

iff

(35)

Suppose first that (M,
point z such

 w) |= J2,d p. Then, by (33), there is a boundary
that (M, hw, zi) |= delim2 , and therefore (M, hw, zi) |= jm2 p . On the other hand,

if (M, w) 6|= J2,d p, then there is a boundary point z 0 with (M, hw, z 0 i) |= delim2 but




(M, hw, z 0 i) |= jm2 p . In both cases, it is readily checked that if (M, hw, zi) |= delim2 ,
for some boundary point z, then, by the second conjunct of (34),


(M, hw, zi) |= jm2 p



ff
 
(M, w + exp(2, d), z ) |= p .

iff

Now (35) follows by the first conjunct of (34).
Finally, we are in a position to define the PT L  RC-formula A,x that encodes the
computation of Turing machine A on input x. Let A be the tape alphabet (with the blank
symbol b  A) and S the set of states (with two halt states syes and sno in S) of A. We use
the symbol  
/ A to mark the left end of the tape. We know that the space used by A on
f (n)
input x = hx1 , . . . , xn i is  22 , which is  exp(2, d) by (25). So we can represent each
configuration of the computation of A on x as a finite word
h, a1 , . . . , ai1 , hs, ai i , ai+1 , . . . , am , b, . . . , bi
of length exp(2, d), where a1 , . . . , am  A and hs, ai i  S  A represents the current state
and the active cell. The transition function  of A takes triples of the form hai , hs, aj i , ak i
(for ai  A  {}, aj , ak  A, s  S  {syes , sno }) to similar triples. For instance,
(ai , hs, aj i , ak ) = hai , aj , hs0 , ak ii
means that, when being in state s and reading symbol aj , the new state should be s0 and
the head should move one cell to the right. We also assume that, for all ai  A  {} and
aj , ak  A, we have (ai , hsyes , aj i , ak ) = hai , aj , ak i and (ai , hsno , aj i , ak ) = hai , aj , ak i
meaning that the head is removed after A is being halted.
Now, for every   A  {}  (S  A), we introduce a fresh propositional variable p .
Let A,x be the conjunction of (26)(31), (33) and an instance of (34), for each p , as well
214

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

'

$ '

exp(1, d) many l0j
exp(1,d)
 l0

c
c
r
c
c
c 
H
1
Y
*

HH@



I

6
@


ep(aux)
I aux

HH


@ 
r0 - rd
bp(aux)

&

...

j
exp(1, d) many lexp(2,d)1
exp(1,d)
lexp(2,d)1


c
r
c
c
c
c 
H
1
Y
*

HH@



I

6
@

ep(aux)
I aux

HH


@ rd

-

rexp(2,d)1
% &

|

$

bp(aux)

{z
exp(2, d) many (exp(1, d) + 1)-brooms

%

}

Figure 8: Structure of yardsticks.
as the following formulas:
^

2+
F p  p ,

(36)

,A{}SA
6=

p  (phs0 ,x1 i  (px2  (    (pxn  pb U p )    ))),
2+
F



af

head 

_


phs,ai ,

(37)
(38)

hs,aiSA

^

2+
F



af




head  p  J2,d p0   p  J2,d p 0   p  J2,d p 0 , (39)

(,,)=
h0 , 0 , 0 i


2+
F 

^

af



head  af head  af head  pa  J2,d pa ,

(40)

aA{}

3F

_

phsyes ,ai  3F

aA

_

phsno ,ai .

(41)

aA

Suppose first that A,x holds in M at time moment 0. By (36)(40) and (35), the consecutive
configurations of the computation of A on input x are properly encoded along the time
axis. (For instance, p holds once in every exp(2, d) time moments.) Finally, (41) says that
A accepts input x.
Conversely, suppose that A accepts input x. We will define an Aleksandrov tt-model
M = hhN, <i , G, Ui with FSA that satisfies A,x . Let the partial order G = hV, Ri be a
disjoint union of exp(2, d) many (exp(1, d) + 1)-brooms (see Fig. 8):
V = {ri | i < exp(2, d)}  {lij | i < exp(2, d), j  exp(1, d)},
zRy

iff

z=y

or z = ri , y = lij , for some i, j.

Suppose that the number of steps in the computation of A on x is m. Then M will have
a prefix of length N = m  exp(2, d) after which the final configuration (without a halting
state) repeats to infinity. For w  N, let
exp(1,d)

U(w, aux) = {li

215

| i < exp(2, d)}.

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

Then it is easy to see that the boundary points are the ri , and the external points are the
lij , for i < exp(1, d). Now put, for every w  N,
U(w, delim2 ) = {li

exp(1,d)

|iw

(mod exp(2, d))},

exp(1,d)
U(w, delim1 ) = {li
exp(1,d)
U(w, delim0 ) = {li
U(w, ext delim1 ) = {liv |
U(w, ext delim0 ) = {liv |

|iw

(mod exp(1, d))},

|iw

(mod d)},

vw

(mod exp(1, d)), i < exp(2, d)},

vw

(mod d), i < exp(2, d)}.

The valuations for the other variables should be clear. We then have


exp(1,d)
(M, hw, zi) |= delim2
iff z = ri or z = li
for some i  w (mod exp(2, d)),


exp(1,d)
(M, hw, zi) |= delim1
iff z = ri or z = li
for some i  w (mod exp(1, d)),


v
(M, hw, zi) |= ext delim1
iff z = ri or z = li for some v  w (mod exp(2, d))
and i < exp(2, d),
and so on, as required. It is not hard to see that M satisfies FSA and (M, 0) |= A,x .

q

Proof of Theorem 3.9, lower bound. The proof is by reduction of the 2n -corridor tiling
problem which is known to be EXPSPACE-complete (Chlebus, 1986; van Emde Boas, 1997).
The problem can be formulated as follows: given an instance T = hT, t0 , t1 , ni, where T is
a finite set of tile types, t0 , t1  T and n > 0, decide whether there is an m  N such that
T tiles the m  2n -grid (or corridor) in such a way that t0 is placed onto h0, 0i, t1 onto
hm  1, 0i, and the top and bottom sides of the corridor are of some fixed colour, say, white.
Suppose T = hT, t0 , t1 , ni is given. Our aim is to construct (using only future-time
temporal operators) a PT L  BRCC-8 formula T such that
(i) the length of T is a polynomial function of |T | and n;
(ii) if T is satisfiable in a tt-model based on hN, <i then there is m  N such that T tiles
the m  2n -corridor;
(iii) if there is m  N such that T tiles the m  2n -corridor, then T is satisfiable in a
tt-model with FSA and based on hN, <i;
(iv) T is satisfiable in a tt-model based on hN, <i iff it is satisfiable in a tt-model based
on a finite flow of time.
The case of hZ, <i follows immediately.
Recall that, by Lemma C.2 (ii), if T is satisfied in a tt-model then it is satisfied in
an Aleksandrov tt-model M = hhN, <i , G, Vi, where G = hV, Ri is a disjoint union of brooms. To explain the meaning of T s subformulas, we assume that such a model M is
given. Throughout the proof we use only a restricted subset of RCC-8 predicates: for spatiotemporal terms 1 and 2 constructed from spatial variables using only the complement, the
intersection and the next-time operator , we need EQ(1 , 2 ) as well as two abbreviations
P(1 , 2 ) = EQ(1 , 2 )  TPP(1 , 2 )  NTPP(1 , 2 ) and E 1 = DC(1 , 1 ) standing for 1
216

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

m  2n

0

(m + 1)  2n

count
range

0



0

1



1

2



2

3



4

3



0

5

6



1



2

7



3

8

9



0



1

10



2

11



3

12



0

13



1

14



2

15



3

16

...



0

Figure 9: Counting formulas for m = 3 and n = 2.
is a part of 2  and 1 is nonempty, respectively. Clearly, this language forms a subset of
PT L  BRCC-8 (in fact, as we show in Remark C.3 below, the proof goes through for an
even more restricted subset of the langauge).
Our first step in the construction of T (which will contain, among many others, spatial
variables t for all t  T ) is to write down formulas forcing a sequence y0 , y1 , . . . , ym2n 1
of distinct points (of depth 0) from V , for some m  N, such that, for each i < m  2n ,
(M, hi, yi i) |= t for a unique tile type t  T . If i = k  2n + j, for some k < m, j < 2n ,
then we will use yi (at time i) to encode the pair hk, ji of the m  2n -grid. Thus, the up
neighbour hk, j + 1i of hk, ji will be coded by the point yi+1 at time i + 1, while its right
neighbour hk + 1, ji by yi+2n at moment i + 2n (see Fig. 10).
Let q0 , . . . , qn1 be pairwise distinct propositional variables and
d

n1
j = qd00      qn1
,

where dn1 . . . d0 is the binary representation of j < 2n , q0i = qi and q1i = qi , for each i.
Suppose that the formula



+
count  0  count U (0  2+
(42)
F count)  2F count  
is true in M at 0, where count is a fresh propositional variable and  is the following
counting formula (the length of which is polynomial in n)

^

^  ^
^

qi  qk 
=
qi  qk 
(qi  qi )
 2n 1  0 .
k<n

i<k

i<k

k<i<n

Then there is an m  N such that count is true before moment (m + 1)  2n and false starting
from (m+1)2n . The sequence 0 , 1 , . . . , 2n 1 is repeated m+1 times along the time-line,
i.e., while count is true. Let
range = 3F (count  0 ).
Clearly, range is true before moment m  2n and then always false (see Fig. 9).
Let equ, p0 , . . . , pn1 and e0 , . . . , en1 be fresh distinct spatial variables, and
d

n1
j = pd00 u    u pn1
,

where dn1 . . . d0 is the binary representation of j < 2n , p0i = pi and p1i = pi , for each i.
Suppose that (42) and
l 
^
^


+

2+
e

2
2+
EQ
equ,
q

EQ(e
,
p
)

(43)
i
i
i
i
F
F
F EQ pi , pi
i<n

i<n

i<n

217

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

are true in M at 0. Then, by the first two conjuncts of (43), for all i  N and y  V of
depth 0, there is j < 2n such that (M, hi, yi) |= equ iff (M, i) |= j and (M, hi, yi) |= j . By
the last conjunct of (43), we then have


(M, hi, yi) |= equ iff j < 2n (M, i) |= j and (M, hk, yi) |= j , for all k  N . ()
We can generate the required sequence of points yi using the formulas:
range  2+
(range  E tile),
 F

G  l
2+
EQ
tile,
equ
u
t
u
no
t
in
future
,
F
tT

^

2+
F P no t in future,

(44)
(45)

tT
t


u no t in future ,

(46)

tT

where tile and the no t in future (for all t  T ) are fresh spatial variables. Indeed, suppose
the conjunction of (42)(46) holds at time 0 in M. Then, by the first conjunct of (44) and
(42), (M, 0) |= range  0 and, by the second conjunct of (44), (M, h0, y0 i) |= tile for some
y0  V . We may assume that y0 is of depth 0. Then, by (45), we have
(a0 ) (M, h0, y0 i) |= equ, and, by (), (M, hk, y0 i) |= 0 for all k  N;
(b0 ) for all t  T , (M, h0, y0 i) |= no t in future and, by (46), (M, hk, y0 i) |= t for all k > 0.
Next, by (42), we have (M, 1) |= range  1 and, by (44), there is y1  V (again, of depth
0) such that (M, h1, y1 i) |= tile. In particular, we have:
(a1 ) (M, h1, y1 i) |= equ, and, by (), (M, hk, y1 i) |= 1 for all k  N;
(b1 ) for all t  T , (M, h1, y1 i) |= no t in future and, by (46), (M, hk, y1 i) |= t for all k > 1.
By (b0 ), (M, h1, y0 i) |= t, for all t  T , and thus y1 6= y0 . Now we consider y1 at moment 1
and use the same argument to find a point y2  V (which is different from y1 by (b1 )), and
so forth; see Fig. 10. This gives us points y0 , y1 , . . . , ym2n 1 (of depth 0) from V we need.
Our next aim is to write down formulas that could serve as pointers to the up and right
neighbours of a given pair in the corridor (at this moment we do not bother about its top
border). Consider the formulas

tile ,
2+
(47)
F EQ up,

+
2F EQ right, equ u no equ U tile ,
(48)

+
2F EQ no equ U tile, tile t  equ u no equ U tile ,
(49)
where up, right and no equ U tile are fresh spatial variables.
i, j < m  2n ,
 (M, hi, yj i) |= up
 (M, hi, yj i) |= right

iff

j = i + 1;
iff

j = i + 2n .
218

We claim that, for all

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

b = t for all
q q= no equ U

range

V
3 

y11

q

q

q

equ
q

q

q

q

2 

y10

q

q

equ
q

q

q

q

1 

y9

q

equ
q

q

q

q

0 

q
y8 equ

q

q

q

3 

y7

q

q

q

equ
q
right

equ
q
right

equ
q
right

equ
q
right

equ
q
right

2 

y6

q
q

equ
q
right

1 

y5

q

0 

y4

equ
q
right

3 

y3

q

q

2 

y2

q

up
q

1 

y1

up
q

0 

r
y0 equ
tile
0



0

q



equ
r
tile

q

q

q

q

q

up
q



equ
q
right

up
r
q equ
b
tile
up
r
q
q
q equ
b
b
tile
up
r
q
q equ
b
b
b
tile
up
r
q equ
b
b
b equ
b
tile
equ
r
b
b
b equ
b
b
tile
b
b
b equ
b
b
b

q

q

b

b

equ
b

b

b

b

equ
b

b

b

b

equ
b

1

2

3

4

5

6

7

8

9

10

11

12



6
right

6

up
r
q
q
q equ
tile
up
r
q
q
q equ
b
b
b equ
b
b
b
b
tile
up
q
q equ
b
b
b equ
b
b
b
b equ
b
r
tile
up
r
q equ
b
b
b equ
b
b
b
b equ
b
b
tile
equ
r
b
b
b equ
b
b
b
b equ
b
b
b
tile
b
b
b equ
b
b
b
b equ
b
b
b
b

b

1



2



3



0



1



2



3



0

tT
tile



1



2



3



up

6 6
s


up

6
c- right

... |

{z

}

3  22 corridor

0

Figure 10: Satisfying T , n = 2, in a tt-model based on space with 3  22 points.
The former is obvious. Let us prove the latter. To show that (M, hi, yj i) |= right, for
j = i + 2n , we first observe that (M, hj, yj i) |= equ and (M, hi, yj i) |= equ by (). It follows
from (M, hj, yj i) |= tile by (49) that (M, hj  1, yj i) |= no equ U tile. Then, applying
(49) (from right to left) sufficiently many times, we obtain (M, hi, yj i) |= no equ U tile,
(M, hi  1, yj i) 6|= no equ U tile, and so (M, hi, yj i) |= right.
Conversely, suppose that (M, hi, yj i) |= right for some yj . Then (M, hi, yj i) |= equ and,
by () (note that i + 2n < (m + 1)  2n , and so count is still true at i + 2n ),
(M, hi + 2n , yj i) |= equ.

()

We have (M, hi, yj i) |= no equ U tile. Then applying (49) (from left to right) sufficiently
many times we arrive at (M, hi + 2n  1, yj i) |= no equ U tile which together with ()
gives (M, hi + 2n , yj i) |= tile. But then j = i + 2n .
It should be noted that at every time point the extension of no equ U tile coincides with
the extension of the term equ U tile on elements of the sequence y0 , . . . , ym2n , and that (49)
is indeed the fixed point characterisation of this U operator.
Finally, the formulas below ensure that every point of the m  2n -corridor is covered by
at most one tile, h0, 0i is covered by t0 , hm  1, 0i by t1 , the top and bottom sides are white
219

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

and that the colours on adjacent edges of adjacent tiles match:
^
0
2+
F E (t u t ),

(50)

t,t0 T
t6=t0





P(tile, t0 )  2+


range

3


range

P
tile,
t
,
0
0
1
F
F


_

n
2+
P tile, t ,
F 2 1 

(51)
(52)

tT
up(t)=white


_

2+


P
tile,
t
,
0
F

(53)

tT
down(t)=white

^



0
n
t
in
future
,
2+


E
t

P
up,
no
2 1
F

(54)

t,t0 T

up(t)6=down(t0 )

^



0
.
E
t

P
right,
no
t
in
future
2+
F

(55)

t,t0 T
right(t)6=left(t0 )

Let T be the conjunction of (42)(55). Suppose that T holds at 0 in M. Then there
is m  N such that (M, m  2n  1) |= range and, for every i  m  2n , (M, i) |= range.
Then we define a map  : m  2n  T by taking
 (k, j) = t

iff

(M, hi, yi i) |= t and i = k  2n + j.

We leave it to the reader to check that  is a tiling of m  2n , as required.
For the other direction, suppose that there is a tiling  of the m  2n -corridor by T , for
some m > 0. Then T is satisfied in the Aleksandrov tt-model M = hhN, <i , hV, Ri , Vi,
where V = {y0 , . . . , ym2n 1 }, R is the minimal reflexive relation on V ,
V(t, i) = {yi  V |  (k, j) = t and i = k  2n + j},
and the other variables of T are interpreted as shown in Fig. 10. Clearly, M satisfies
FSA. Moreover, T is satisfiable in tt-models over finite flows of time iff it is satisfiable in
tt-models over hN, <i. Details are left to the reader.
q
Remark C.3. It may be of interest to note that the language used in the proof above is
rather limited. In fact, it is enough to extend the PSPACE-complete logic PT L  RCC-8
with predicates of the form EQ(%1 , %2 t %3 ) (where the %i are atomic spatio-temporal region
terms) to make it EXPSPACE-hard. To show this, we transform the PT LBRCC-8 formula
T constructed above in the following way. First, we take a fresh spatial variable u (denoting

the universe) and add to T the conjunct 2+
F EQ(u, u). Next, for every spatio-temporal
Boolean region term % of T , we introduce a spatial variable neg % (the complement of %
+
with respect to u), add to T conjuncts 2+
F EQ(u, % t neg %)  2F DC(%, neg %), and replace
every occurrence of % in the resulting formula with neg %. Finally, for every spatio-temporal
term of the form %1 u %2 , we introduce a fresh spatial variable %1 and %2 , add the conjuncts
+
+
2+
F P(%1 and %2 , %1 )  2F P(%1 and %2 , %2 )  2F P(%1 , neg %2 t %1 and %2 )

220

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

and replace occurrences of %1 u %2 with %1 and %2 . One can readily see that (i) the length of
the resulting formula 0T is linear in the length of T and (ii) 0T is satisfiable in a tt-model
based on hN, <i (with FSA) iff T is satisfiable in a tt-model based on hN, <i (with FSA).
C.2 Upper Complexity Bounds (I): Quasimodels for PT L  RC
In this appendix we define quasimodels for PT L  RC in the spirit of the paper (Hodkinson
et al., 2000) in order to establish the upper complexity bounds of Theorems 3.10 and 3.13.
We remind the reader that spatio-temporal terms of PT L  RC are of the form:
| I%



::= %

%

::= CIp

| 

| CI%

| 1 u 2 ,
| CI(%1 u %2 ) | CI(%1 U %2 ) | CI(%1 S %2 ),

and that PT L  RC forms a sublanguage of PT L  RCit differs from the latter only in
the definition of spatio-temporal region terms:
%

::=

CIp

| CI%

| CI(%1 u %2 ) | CI%.

Let  be a PT L  RC-formula. Recall from p. 200 that by sub  we denote the set of
all subformulas of  and by term  the set of all its spatio-temporal terms including those
of the form  and %. A type t for  is a subset of term  such that
 for every 1 u 2  term ,
 for every   term ,

1 u 2  t

 t

iff

iff

1  t and 2  t;


/ t.

Clearly, the number [() of different types for  is bounded by 2|term | .
A broom type b for  is a pair hhT, i , ti, where hT, i is a broom (with T 0 being its
leaves) and t a labelling function associating with each x  T a type t(x) for  such that
the following conditions hold:
(bt0) t(x) 6= t(y), for each pair of distinct points x, y  T 0 ;
(bt1) for every x  T 0 ,
 for every CI(%1 u%2 )  term , CI(%1 u%2 )  t(x) iff %1  t(x) and %2  t(x),
 and for every CI%  term , CI%  t(x) iff % 
/ t(x);
(bt2) for every I%  term ,
(bt3) for every %  term ,

I%  t(x)
%  t(x)

iff
iff

%  t(y) for every y  T , x  y;
y  T 0 with x  y and %  t(y).

Broom types b1 = hhT1 , 1 i , t1 i and b2 = hhT2 , 2 i , t2 i for  are said to be isomorphic if
 for every x1  T10 , there is x2  T20 such that t1 (x1 ) = t2 (x2 ) and
 for every x2  T20 , there is x1  T10 such that t1 (x1 ) = t2 (x2 ).
Clearly, given two isomorphic broom types b1 and b2 , we also have t1 (r1 ) = t2 (r2 ), where
r1 and r2 are the roots of b1 and b2 , respectively.
A quasistate for  is a pair hs, mi, where s is a Boolean-saturated subset of sub  and m a
disjoint union hhT, i , ti of broom types b1 , . . . , bn for  such that the following conditions
hold:
221

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

(qs0) bi and bj are not isomorphic, for i 6= j;
   sub ,
  s
(qs1) for every 2
2

iff

  t(x) for every x  T .
[()

Clearly, the number ]() of quasistates for  is bounded by 22
 2|sub | .
Fix a flow of time F = hW, <i. A basic structure for  is a pair hF, qi, where q is a
function associating with each w  W a quasistate q(w) = hsw , mw i for  such that, for
each w  W ,
 for every 1 U 2  sub , 1 U 2  sw iff there is v > w such that 2  sv and
1  su for all u  (w, v);
 for every 1 S 2  sub , 1 S 2  sw iff there is v < w such that 2  sv and
1  su for all u  (v, w).
Let hF, qi be a basic structure for , where q(w) = hsw , mw i and mw = hhTw , w i , tw i
for w  W . Denote by Tw0 the set of all leaves in hTw , w i and by Tw1 the set of all roots
of brooms in it. A 1-run through hF, qi is a function r giving for each w  W a point
r(w)  Tw1 ; a coherent and saturated 0-run through hF, qi is a function r giving for each
w  W a point r(w)  Tw0 such that the following conditions hold:
 for every CI(%1 U %2 )  term , CI(%1 U %2 )  tw (r(w)) iff there is v > w such that
%2  tv (r(v)) and %1  tu (r(u)) for all u  (w, v);
 for every CI(%1 S %2 )  term , CI(%1 S %2 )  tw (r(w)) iff there is v < w such that
%2  tv (r(v)) and %1  tu (r(u)) for all u  (v, w).
Say that a quadruple Q = hF, q, R, Ci is a quasimodel for  based on F if hF, qi is a basic
structure for , R = R0  R1 , with R1 being a set of 1-runs and R0 a set of coherent and
saturated 0-runs through hF, qi, and C the reflexive closure of a subset of R1  R0 such
that
(qm2) w0  W   sw0 ;
(qm3) for every w  W and every x  Tw , there is r  R with r(w) = x;
(qm4) for all r, r0  R, if r C r0 then r(w) w r0 (w) for all w  W ;
(qm5) for all r  R, w  W and x  Tw0 , if r(w) w x then there is r0  R0 such that
r0 (w) = x and r C r0 .
A quasimodel Q is said to be finitary if the set R of runs is finite.
Lemma C.4. A PT L  RC-formula  is satisfiable in an Aleksandrov tt-model based on
a flow of time F and a (finite) disjoint union of (finite) brooms iff there is a (finitary)
quasimodel for  based on F.
Proof. () Let  be a PT L  RC-formula and Q = hF, q, R, Ci a quasimodel for , where
F = hW, <i and q(w) = hsw , hhTw , w i , tw ii for w  W . We construct an Aleksandrov
tt-model M = hF, G, Vi by taking G = hR, Ci and, for each spatial variable p and w  W ,
V(p, w) = {r | CIp  tw (r(w))}.
222

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

Clearly, if Q is finitary then G is finite. Thus, it remains to prove that  is satisfied in M.
First, we show by induction on the construction of a region term %  term  that, for
every w  W and every r  R,
(M, hw, ri) |= %

iff

%  tw (r(w)).

(56)

The basis of induction: % = CIp. Let (M, hw, ri) |= %. Then there is r0  R such that
r C r0 and (M, hw, r0 i) |= Ip. By (qm4), r(w) w r0 (w). Take any y  Tw0 , r0 (w) w y. By
(qm5), there is a run r00  R0 such that r0 C r00 and r00 (w) = y. Then (M, hw, r00 i) |= p
and, by the definition of V, CIp  tw (r00 (w)) and, by (bt3), %  tw (r(w)).
Conversely, if %  tw (r(w)) then, by (bt3), there is y  Tw0 with r(w) w y and
%  tw (y). By (qm5), there is r00  R0 , r C r00 , such that r00 (w) = y. Then CIp  tw (r00 (w))
and, by the definition of V, (M, hw, r00 i) |= p. Therefore, (M, hw, ri) |= %.
The induction steps for % = CI%1 , CI(%1 u %2 ), CI(%1 U %2 ) and CI(%1 S %2 ) are similar,
but instead of the definition of V, we use (bt1) for the cases of the Booleans and coherence
and saturatedness of r00 for the cases of temporal operators.
Next, we extend (56) to arbitrary spatio-temporal terms   term .
Case  = I%. Suppose that (M, hw, ri) |= I%. Take any y  Tw , r(w) w y. If y  Tw0
then, by (qm5), there is r0  R0 such that r C r0 and r0 (w) = y. If y 
/ Tw0 then clearly
y = r(w) and take r0 = r. We have (M, hw, r0 i) |= %, which, by IH, implies %  tw (r0 (w)).
Therefore, %  tw (y) for every y w r(w) and, by (bt2), I%  tw (r(w)).
Conversely, if I%  tw (r(w)) then, by (bt2), %  tw (y), for every y w r(w). Take any
run r0  R such that r C r0 . By (qm4), r(w) w r0 (w), and so %  tw (r0 (w)), from which,
by IH, (M, hw, r0 i) |= %. Hence, (M, hw, ri) |= I%.
Cases  = 1 u 2 and 1 follow from IH by the definition of type.
Finally, we show by induction on the construction of   sub  that, for every w  W ,
(M, w) |= 

iff

  sw .

(57)

  . Suppose (M, w) |= 2
  . Take any x  T . By (qm3), there is r  R
Case  = 2
w
such that r(w) = x. Then (M, hw, ri) |=  and, by IH,   tw (r(w)). Therefore, by (qs1),
   s . Conversely, let 2
   s . Take any run r  R. By (qs1), we have   t (r(w)),
2
w
w
w
 .
from which, by IH, (M, hw, ri) |=  . Hence, (M, w) |= 2
Cases  = 1  2 and 1 follow from IH by the Boolean-saturatedness of the sw .
It follows from (57) and (qm2) that  is satisfiable in M.

() Let  be a PT L  RC-formula and suppose that  is satisfied in an Aleksandrov
tt-model M = hF, G, Vi, where F = hW, <i and G = h, i is a disjoint union of brooms.
Denote by 0 and 1 the leaves and the roots of brooms in G, respectively. With every
pair hw, xi  W   we associate the type
t(w, x) = {  term  | (M, hw, xi) |=  }.
Fix a w  W and define a binary relation on  as follows. For x, x0  0 , let x w x0 iff
t(w, x) = t(w, x0 ) and, for z, z 0  1 , let z w z 0 iff the brooms generated by z and z 0 are
isomorphic, i.e.,
x  0 (z  x  x0  0 (z 0  x0  x w x0 )) 
x0  0 (z 0  x0  x  0 (z  x  x w x0 )).
223

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

Clearly, w is an equivalence relation on . Denote by [x]w the w -equivalence class of x
and define a map fw by taking, for each x  ,
(
[x]w ,
x  1 ,
fw (x) =
h[z]w , [x]w i , x  0 and z  1 such that z  x.
Since G is a disjoint union of brooms, fw is well-defined. Now put
Tw = {fw (x) | x  },
u w v

iff

x, y  

tw (fw (x)) = t(w, x),

such that x  y, u = fw (x) and v = fw (y),

for x  .

By definition of fw , hTw , w i is a union of brooms and tw is well-defined. Consider the
structure hsw , mw i, where
mw = hhTw , w i , tw i

and

sw = {  sub  | (M, w) |= }.

It is readily seen that for each of the brooms of mw we have (bt0) and that mw satisfies
(qs0). Moreover, as fw is a p-morphism from h, i onto hTw , w i, we also have (bt1)
(bt3) and (qs1). So, by taking q(w) = hsw , mw i for each w  W we obtain a basic structure
hF, qi for  satisfying (qm2).
It remains to define appropriate runs through hF, qi. For k = 0, 1, let Rk be the set of
all maps r : w 7 fw (x) for x  k . Clearly, R1 and R0 are sets of 1- and coherent and
saturated 0-runs, respectively. Put R = R0  R1 and for r, r0  R, r C r0 iff r(w) w r0 (w)
for all w  W . Then (qm4) holds by definition. Let v  W and y  Tv . Then there
is x   such that fv (x) = y. Clearly, R contains the run r : w 7 fw (x), which proves
(qm3). Finally, let r  R, v  W and y  Tv0 be such that r(v) v y. There are some
z, x   such that fw (z) = r(w), for every w  W , and fv (x) = y. We clearly have z  x
and x  0 . Then take the run r0 : w 7 fw (x). By definition, r C r0 , which proves (qm5).
Thus, Q = hF, q, R, Ci is a quasimodel for . Note that if G is finite then R is finite as
well and therefore, Q is finitary.
q
We are now in a position to establish the upper complexity bounds of the satisfiability
problem for PT L  RC- and PT L  RC-formulas in tt-models based on hN, <i, hZ, <i or
arbitrary finite flows of time.
Proof of Theorem 3.10, upper bound. We consider the cases of hN, <i and hZ, <i.
The case of arbitrary finite flows of time and that of tt-models with FSA and based on
hN, <i and hZ, <i will follow from Theorem 3.13.
One can readily check that as for the propositional temporal logic PT L, we have the
following polynomial reductions for PT L  RC:
 satisfiability in tt-models based on hZ, <i can be polynomially reduced to satisfiability
in tt-models based on hN, <i;
 satisfiability in tt-models based on hN, <i can be polynomially reduced to satisfiability
of formulas without past-time temporal operators.
224

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

So, in what follows we consider the simplest case of the satisfiability problem, that is for
PT L  RC-formulas without past-time temporal operators in tt-models based on hN, <i.
We present a nondeterministic 2EXPSPACE satisfiability checking algorithm which is
similar to that of Sistla and Clarke (1985). First, one can prove (with the help of Lemmas C.1 (ii) and C.4) an analogue of (Hodkinson et al., 2000, Theorem 24) which states
that a PT L  RC-formula  is satisfiable in tt-model based on hN, <i iff there are l1 , l2  N
such that

2
l1  ](),
0 < l2  |term |  2[()  ]() + ]()
and a balloon-like quasimodel Q = hhN, <i , q, R, Ci for  with q(l1 + n) = q(l1 + l2 + n)
for every n  N. Although Theorem 24 of (Hodkinson et al., 2000) was proved for the
monodic fragment of first-order temporal logic, the basic idea of extracting a balloon-like
quasimodel from an arbitrary one works for PT L  RC as well. The only difference is that
quasistates now are more complex: they can be regarded as sets of sets of types for  (not
just sets of types) and thus, both l1 and l2 are triple exponential in the length `() of .
Then a quasimodel Q can be guessed in 2EXPSPACE by an algorithm which is very similar
to that in the proof of (Hodkinson et al., 2003, Theorem 4.1).
q
Proof of Theorem 3.13, upper bound. The proof is similar to that of Theorem 3.10.
Again, one can show that all the cases are polynomially reducible to the case of satisfiability
of PT L  RC-formulas without past-time temporal operators in tt-models with FSA and
based on hN, <i. To take the FSA into account, we can prove (using Lemmas C.1 (i)
and C.4) analogues of Theorems 29 and 35 of (Hodkinson et al., 2000) which state that a
PT L  RC-formula  is satisfiable in a tt-model with FSA and based on hN, <i iff there
is a finitary balloon-like quasimodel for  based on hN, <i. The condition of finiteness for
the set of runs can also be ensured by an algorithm similar to that of Theorem 3.10.
q
C.3 Upper Complexity Bounds (II):
Embedding into First-Order Temporal Logic
In this appendix we introduce the first-order temporal language QT L and use some known
complexity results for fragments of QT L to obtain upper complexity bounds for spatiotemporal logics based on RC  (and therefore, on BRCC-8).
The alphabet of QT L consists of individual variables x1 , x2 , . . . , predicate symbols
P1 , P2 , . . . , each of which is of some fixed arity, the Booleans, the universal x and existential x quantifiers for each variable x, and the temporal operators U, S (with their
derivatives , 3F , 2F , etc.). Note that our language contains neither constant symbols
nor equality (we simply do not need them to obtain our complexity results).
QT L is interpreted in first-order temporal models of the form M = hF, D, Ii, where
F = hW, <i is a flow of time, D a nonempty set, the domain of M, and I a function
associating with every moment of time w  W a first-order structure
D
E
I(w)
I(w)
I(w) = D, P0 , P1 , . . . ,
I(w)

the state of M at moment w, where each Pi
is a relation on D of the same arity as Pi .
An assignment in D is a function a from the set of individual variables to D. Given such
an assignment and a QT L-formula , we define the truth-relation (M, w) |=a  by taking
225

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

u = CIp

x1b
depth 0
depth 1

e = CIp

'

xn1
b

x2b

$

xnb

u
e
e
u
...
*

YH
H


I
@

H @

HH

@ u
H
b

=

Pj1 [db ]Pj2 [db ] . . .Pjn1 [db ]Pjn [db ]
&

%

x0b

db

Figure 11: Representing n-broom b with region CIpj by a point in a first-order model.
I(w)

 (M, w) |=a Pi (x1 , . . . , xm ) iff ha(x1 ), . . . , a(xm )i  Pi

,

0

 (M, w) |=a x  iff (M, w) |=a , for every assignment a0 in D which differ from a
only on x,
plus the standard clauses for the Booleans and temporal operators. We say that a QT Lformula  is satisfied in M if (M, w) |=a  for some w  W and some assignment a in D.
If all free variables of  are among x1 , . . . , xm , then instead of (M, w) |=a  we often write
(M, w) |= [d1 , . . . , dm ], where di = a(xi ) for all i, 1  i  m.
Denote by QT L1 the one-variable fragment of QT L, i.e., the set of all QT L-formulas
which contain at most one individual variable, say, x. Without loss of generality we may
assume that all predicate symbols of QT L1 are at most unary.
Now we define an embedding of spatio-temporal languages based on RC  into QT L1 .
Recall that, by Lemma C.2 (i), if a PT L  RC  -formula  of width n is satisfied in a
tt-model with FSA then  is also satisfiable in an Aleksandrov tt-model based on the same
flow of time and a finite disjoint union of n-brooms. Similarly, if a PT L  RC  -formula 
of width n is satisfiable then  is also satisfiable in an Aleksandrov tt-model based on the
same flow of time and possibly infinite disjoint union of n-brooms.
To cover both cases, let  be a PT L  RC  -formula of width n. We show how to
construct a QT L1 -formula n of length linear in `() such that every Aleksandrov tt-model
based on a (finite) union of n-brooms satisfying  gives rise to a first-order temporal model
(with finite domain, respectively) satisfying n and vice versa. Thus, we polynomially
reduce the satisfiability problem for spatio-temporal languages to that for QT L1 .
Suppose that  is satisfied in an Aleksandrov tt-model M = hF, G, Vi, where F = hW, <i
and G is a (finite or infinite) disjoint union of n-brooms. With every n-broom b of G we
associate an element db of the first-order domain D. Then, for every spatial variable pj in ,
we fix n different unary predicate symbols Pj1 (x), . . . , Pjn (x) with the following meaning:
Pji (x) is true on db  D at moment w  W iff the i-th leaf of b (xib in Fig. 11) belongs to
i
region CIp at w. Define n distinct translations n , 1  i  n, encoding the truth values
of spatio-temporal region terms of  on leaves of G by taking, for a spatial variable pj and
terms %1 and %2 ,
i

(CIpj )n = Pji (x),
i

i

i

(CI%1 )n = (%1 )n ,
i

i

i

i

(CI(%1 U %2 ))n = (%1 )n U (%2 )n ,

i

i

(CI(%1 u %2 ))n = (%1 )n  (%2 )n ,
i

i

(CI(%1 S %2 ))n = (%1 )n S (%2 )n .
226

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

Next we extend these n translations to arbitrary spatio-temporal terms of . First we
0
introduce a translation n to encode the truth value of arbitrary spatio-temporal terms in
the roots of the n-brooms of G: for a region term %, let
0n

(%)

n
_

=

k

(%)n .

k=1
0

The formula above shows, in particular, that n is redundant for region terms since their
0
truth values in the roots can be computed as defined by n . For a spatio-temporal term
of the form I%, where % is a region term, we take
0n

(I%)

n
^

=

k

(%)n

and

i

i

(I%)n = (%)n

for all i, 1  i  n,

k=1

and then, for spatio-temporal terms 1 and 2 ,10
i

i

(1 )n = (1 )n

i

i

i

(1 u 2 )n = (1 )n  (2 )n

and

for all i, 0  i  n.

Finally, we define the translation n of subformulas of : for a spatio-temporal term  ,
n

(2 )


0n

= x ( )



n
^

k

x ( )n

k=1

and, for spatio-temporal formulas 1 and 2 ,
(1 )n = 1n ,

(1  2 )n = 1n  2n ,

(1 U 2 )n = 1n U 2n ,

(1 S 2 )n = 1n S 2n ,

Clearly, the length of n is linear in both n and `().
Lemma C.5. A PT L  RC  -formula  of width n is satisfiable in an Aleksandrov tt-model
based on a (finite) disjoint union of n-brooms iff n is satisfiable in a first-order temporal
model (with a finite domain) based on the same flow of time.
Proof. () Suppose that  is satisfied in an Aleksandrov tt-model M = hF, G, Vi, where
0 1
n
F = hW, <i, G = hV, Ri is a disjoint
 unionffof n-brooms

 0 n ffb = hWb , Rb i, Wb = {xb , xb , . . . , xb }
0
1
and Rb is the reflexive closure of { xb , xb , . . . , xb , xb } (see Fig. 11).
Construct a first-order temporal model N = hF, D, Ii by taking D to be the set of all
db for n-brooms b in G and, for every w  W ,
D
E
I(w)
I(w)
I(w)
I(w)
I(w) = D, P11 , . . . , P1n , P21 , . . . , P2n , . . . ,
where for each spatial variable pj in  and each i, 1  i  n,
I(w)

Pji



ff
= {db  D | (M, w, xib ) |= pj }.

10. For brevity, in this definition we follow the syntax of PT L  RC rather than PT L  RC  .

227

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

Note that D is finite whenever G is finite.
Now, by induction on the construction of a spatio-temporal region term % of , it can
easily be shown that for every w  W , every n-broom b in G and every i, 1  i  n,


ff
i
(58)
(N, w) |= (%)n [db ] iff (M, w, xib ) |= %.
Next, (58) can be extended to arbitrary spatio-temporal terms  of  and i, 0  i  n:
i

(N, w) |= ( )n [db ]

ff


iff (M, w, xib ) |= .

(59)

The cases for i, 1  i  n, trivially follow from (58) and the fact that leaves have no
successors but themselves. Consider now i = 0. The case  = % holds simply because region
terms are interpreted by regular closed sets:


ff


ff
(M, w, x0b ) |= %
iff
(M, w, xkb ) |= %, for some k, 1  k  n,
(60)
If  = I% then, on one hand,


ff
(M, w, x0b ) |= I%

iff



ff
(M, w, xkb ) |= %,

for all k, 0  k  n,

0

and on the other, by the definition of n ,
0

(N, w) |= (I%)n [db ]

iff

k

(N, w) |= (%)n [db ],

for all k, 1  k  n,

which together with (60) and IH yields (59). The cases of the Booleans are trivial.
Finally, we show that for every   sub , we have
(N, w) |=  n

iff

(M, w) |= .

 :
Case  = 2
  )n
(N, w) |= (2

k

iff

db  D k  {0, 1, . . . , n} (N, w) |= ( )n [db ]


ff
b in G k  {0, 1, . . . , n} (M, w, xkb ) |= 

iff

 .
(M, w) |= 2

iff

The remaining cases are trivial. It follows that n is satisfied in N.
() Assume that  is satisfied in a first-order temporal model N = hF, D, Ii, where
F = hW, <i and, for every w  W ,
D
E
I(w)
I(w)
I(w)
I(w)
I(w) = D, P11 , . . . , P1n , P21 , . . . , P2n , . . . .
With every point d  D we associate an n-broom bd = hWbd , Rbd i so that the sets Wbd ,
for d  D, are pairwise disjoint and each contains n + 1 distinct elements x0bd , . . . , xnbd .
Construct an Aleksandrov tt-model M = hF, G, Vi by taking
 G to be the disjoint union of n-brooms {bd | d  D},

	
i
 V(pj , w) = xibd | (N, w) |= (CIpj )n [d], 0  i  n and d  D .
228

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

Clearly, if D is finite then G is finite as well.
By a straightforward induction one can show that for all w  W , d  D, spatio-temporal
region terms %, spatio-temporal terms  , subformulas  of , and all i, 0  i  n,


ff
i
iff
(M, w, xibd ) |= %
(i > 0),
(N, w) |= (%)n [d]


ff
in
i
(N, w) |= ( ) [d]
iff
(M, w, xbd ) |= ,
(N, w) |=  n

iff

(M, w) |= .

For example,
0

(N, w) |= (I%)n [d]

iff
iff
iff

k

(N, w) |= (%)n [d], for all k, 0  k  n
ff


(M, w, xkbd ) |= %, for all k, 0  k  n
ff


(M, w, x0bd ) |= I%.
q

It follows that  is satisfied in M.
Now we obtain the upper complexity bounds for combinations of PT L and RC  :

Proof of Theorem 3.11, upper bound. Follows from Lemmas C.2 (ii) and C.5 together
with the results on the complexity of the one-variable fragment of QT L (Halpern & Vardi,
1989; Sistla & German, 1987; Hodkinson et al., 2000, 2003).
q
Proof of Theorem 3.12, upper bound. Similar to the proof above.

q

Proof of Theorem 3.15, upper bound. The proof follows from Lemmas C.2 (i) and C.5
together with the upper complexity bound of the guarded monodic (and so the one-variable)
fragment of QT L (Hodkinson, 2004).
q
C.4 Lower Complexity Bounds (II): Embedding First-Order Temporal Logic
We are now in a position to prove Theorem 3.14 and establish the lower complexity bounds
for spatio-temporal logics based on BRCC-8 (and so for those based on RC  as well). Denote
by QT L12 the one-variable fragment of QT L with sole temporal operator 2F . We define a
polynomial embedding of QT L12 into PT L2  BRCC-8. Note that a similar embedding of
the full one-variable fragment QT L1 into PT L  BRCC-8 can be regarded as an alternative
way to prove the lower complexity bound of Theorem 3.12.
A QT L12 -formula is said to be a basic Q-formula if it is of the form x (x), where
(x) is quantifier-free and contains no propositional variables. A QT L12 -sentence  is in Qnormal form if it is built from basic Q-formulas using the Booleans and temporal operator
2F . In other words, sentences in Q-normal form do not contain nested quantifiers and use
only unary predicate symbols. The following observation should not come as a surprise (see,
e.g., Hughes & Cresswell, 1996):
Lemma C.6. For every QT L12 -sentence  one can effectively construct a QT L12 -sentence

b in Q-normal form such that  is satisfiable in a first-order temporal model with a flow of
time F (and having finite domain) iff 
b is satisfiable in a first-order temporal model based
on F (and having finite domain). Moreover, the length of 
b is linear in the length of .
229

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

Proof. Without loss of generality we may assume that  contains no occurrences of . To
transform  into its Q-normal form, we first introduce a fresh unary predicate symbol Pi (x)
for every propositional variable pi in  and replace each occurrence of pi with x Pi (x).
Denote the resulting formula by 0 . For every subformula  of 0 define a formula  ] by
taking inductively
(P (x))] = P (x),
()] =  ] ,

(x )] = Px (x),
(1  2 )] = 1]  2] ,

where Px (x) is a fresh unary predicate symbol. Let

^

2+
x Px (x)  x Px (x) 

b = x ]0 
F

(2F )] = 2F  ] ,

x Px (x)  x  ]




.

xsub0

One can readily show by induction that 
b is satisfiable in a first-order temporal model based
on F (and having finite domain) iff  is satisfiable in a first-order temporal model based on
F (and having finite domain). Moreover, 
b is in Q-normal form.
q
Now, given a QT L12 -formula  in Q-normal form, denote by  the result of replacing
all occurrences of basic Q-formulas x (x) in  with EQ( , >), where > is a region term
representing the whole space (for instance, CIu t CIu for a fresh spatial variable u), and
the translation  of quantifier-free formulas (x) is defined by taking:
(P (x)) = CIp,

() = CI   ,

(1  2 ) = CI(1 u 2 ),

(2F ) = CI2F   ,

where P (x) is a unary predicate symbol and p a spatial variable standing for P (x). Clearly,
 belongs to PT L2  BRCC-8.
Lemma C.7. A QT L12 -sentence  in Q-normal form is satisfiable in a first-order temporal
model based on a flow of time F and having finite domain iff  is satisfiable in a tt-model
based on F and satisfying FSA.
Proof. () Suppose that  is in Q-normal form and M = hF, D, Ii is a first-order temporal


ff
I(w)
model, where F = hW, <i and, for all w  W , I(w) = D, P0 , . . . , . Let (M, w0 ) |=  for
some w0  W . Construct an Aleksandrov tt-model M0 = hF, G, Vi by taking G = hD, Ri,

I(w) 	
where R = {hd, di | d  D} and V(pi , w) = hw, di | d  Pi
. Note that the topological
space TG = hD, IG i induced by G is discrete, i.e., for all X  D,
IG X = CG X = X.
It follows by induction that for every quantifier-free QT L12 -formula , every w  W and
every d  D we have
(M, w) |= [d]

iff

(M0 , hw, di) |=  .

Therefore, for every basic Q-formula x (x) and every w  W , (M, w) |= x (x) iff
(M0 , w) |= EQ( , >). It follows by induction that (M0 , w0 ) |=  .
230

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

() Suppose that  is satisfied in a tt-model based on F = hW, <i. By Lemma C.1 (i),
is satisfied in an Aleksandrov tt-model M = hF, G, Vi, where G = hV, Ri is a disjoint
union of brooms. Denote by V0  V the set of leaves of G and define a first-order temporal
model M0 = hF, V0 , Ii by taking, for each w  W ,


ff
I(w)
I(w)
I(w) = V0 , P0 , . . .
and
Pi
= V(pi , w)  V0 .


Clearly, for every X  V , we have IG X  V0 = CG X  V0 = X  V0 , where TG = hV, IG i is
the topological space induced by G. So we obtain by induction that for every quantifier-free
QT L12 -formula , all w  W and all d  V0
(M0 , w) |= [d]

iff

(M, hw, di) |=  .

A regular closed set X  V in TG coincides with V iff it contains V0 . So, for all basic
Q-formulas x (x) and all w  W , (M0 , w) |= x (x) iff (M, w) |= EQ( , >). It follows
by induction that  is satisfied in M0 .
q
Proof of Theorem 3.14, lower bound. By Lemmas C.6 and C.7 the satisfiability problem for QT L12 -formulas in first-order temporal models with finite domains and based on
hN, <i, hZ, <i or arbitrary finite flows of time is polynomially reducible to satisfiability of PT L2  BRCC-8 formulas in tt-models with FSA. Since the former is known to
be EXPSPACE-hard (Hodkinson et al., 2003) for hN, <i and hZ, <i, the latter is also
EXPSPACE-hard in these cases. It should be noted that the result of Hodkinson and
his colleagues (2003) can readily be extended to the case of arbitrary finite flows of time
(by reduction of a finite version of the corridor tiling problem). This gives us the lower
complexity bound for PT L2  BRCC-8 in the case of finite flows of time.
q
C.5 PSPACE-complete Spatio-Temporal Logic
In this appendix we prove Theorem 3.8. In fact, we show that the satisfiability problem for
PT L  RC 2 an extension of PT L  RCC-8is decidable in PSPACE, where RC 2 is the
sublanguage of S4u with spatial terms  restricted to the following:
%

::= CIp,



::= %



::= I%



::= 1 t 2

|

I%,
|

%,
|

1 t 2

|

 t .

As before, we denote by  spatial terms representing regular closed sets (regions) and by
 those representing regular open sets (the interiors of regions). Clearly, this definition is
equivalent to the definition on p. 190 (where we did not make an explicit distinction between
 and ). It is easy to see that RC 2 contains RCC-8, but is less expressive than BRCC-8.
Spatio-temporal terms  of PT L  RC 2 are constructed from region terms of the form
%

::=

CIp

|

CI%

in the same way as spatial terms of RC 2 . Finally, PT L  RC 2 -formulas are composed from
  using the Booleans and the temporal operators.
atomic formulas of the form 2
231

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

We will reduce the satisfiability problem for PT LRC 2 to that for PT L. This reduction
will be done in a number steps.
Let F = hW, <i be a flow of time (as in the formulation of Theorem 3.8) and  a
PT L  RC 2 -formula. We begin by removing the next-time operator from the subterms of .
To this end, let 0 =  and for each variable p from the set
1

=

{p | CICIp  term 0 },

we introduce a fresh spatial variable p0 , and then put
^

+ 
 (CICIp  CIp0 ) ,
1 =  1 
2+
2
>

2
P F
p1

where 1 is the result of replacing each occurrence of CICIp in 0 with CIp0 and
 (% t % ). Next, for each p from
 (%
 (% t % )  2
2
1
2
1
2
1  %2 ) stands for 2
2

=

{p | CICIp  term 1 },

we introduce a fresh spatial variable p0 , and set
^
+
2 =  2 
2+
P 2F

>


 (CICIp  CIp0 ) ,
2

p1 2

where 2 is the result of replacing each occurrence of CICIp in 1 with CIp0 . By repeating
this process sufficiently many times we can obtain a formula
^

+ 
 (CICIp  CIp0 ) ,
2
>

2
(61)

e =  
2+
P F
p

where  is a suitable set of spatial variables, and  contains no  in region terms, that
is,  is a PT L[RC 2 ]-formula. (Note that  is such that if a spatial variable p occurs in
 then either CICIp 
/ term  or p   .) It should be clear that the length of 
e is
linear in the length of , and  is satisfiable in a tt-model based on F iff 
e is satisfiable in
a tt-model based on F.
Thus, it suffices to reduce the satisfiability problem for PT L  RC 2 -formulas of the
form (61) to the satisfiability problem for PT L-formulas. Let us now recall the function
 from Appendix B.1 which maps PT L[S4u ]-formulas (in particular, PT L[RC 2 ]-formulas)
  , let (2
  ) = p , where p
to PT L-formulas. Namely, for every atomic RC 2 -formula 2

 is
a fresh propositional variable. Then, given the PT L[RC 2 ]-formula  , define  to be the
  in it with (2
  ) .
result of replacing every occurrence of 2
As is shown in the proof of
Theorem 3.1,  is satisfiable in a tt-model over F = hW, <i iff
(s1) there exists a temporal model N = hF, Ui satisfying  and,
(s2) for every w  W , the set
  | (N, w) |= p ,   term  }  {2
  | (N, w) |= p ,   term  }
w = {2
(62)





of RC 2 -formulas is satisfiable.
232

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

To preserve satisfiability of not only  but the whole ,
e we have to ensure somehow that
(s3) the points satisfying w do have predecessors and successors satisfying w1 and
w+1 , respectively.
In the remainder of the appendix we first describe an encoding of the satisfiability
problem for sets of RC 2 -formulas of the form (62) in Boolean logic, which will be used as
part of our final reduction. Then we prove a completion property of RC 2 (cf. Balbiani &
Condotta, 2002) in the class of exhaustive models that contain sufficiently many points of
every type. Roughly, the completion property says that, given a set  of the form (62) and
an exhaustive model satisfying some subset of , one can extend the valuation of the model
to satisfy the whole . This property will make it possible to solve problem (s3) above. It is
worth noting that a similar construction works for stronger languages such as BRCC-8, but
then, to enjoy the completion property, sets (62) may need exponentially many formulas (in
the number of spatial variables) and, therefore, the reduction to PT L will be exponential
as well. For RC 2 it suffices to consider sets (62) with a quadratic number of formulas, which
results in a quadratic reduction.
C.5.1 Properties of RC 2 -formulas
For any finite set  = {p1 , . . . , pn } of spatial variables, let

	

AtFm =
2
|  is an RC 2 -term with variables from  .
Clearly, every RC 2 -formula with spatial variables from  is a Boolean combination of spatial
formulas from AtFm . It should be also clear that |AtFm |  16  ||2 .
As the width of RC 2 -formulas is  2 (see p. 209 for the definition), by Lemmas A.1 and
C.2 (ii), an RC 2 -formula is satisfiable iff it is satisfiable in an Aleksandrov topological model
based on a disjoint union of 2-brooms, alias forks. In what follows we will regard every such
model M as a disjoint union of fork models m = hf, vi, where f = hW, Ri, W = {x0 , x1 , x2 },
R is the reflexive closure of {hx0 , x1 i, hx0 , x2 i} and v a valuation of the spatial variables.
Given 0  , we say that fork models m1 = hf, v1 i and m2 = hf, v2 i are 0 -equivalent and
write m1 0 m2 , if v1 (CIp) = v2 (CIp) for every p  0 .
Given some   AtFm and   AtFm , we say that  is an f-consequence of  and
write  |=f  if m |=  implies m |=  for every fork model m based on f.  is said to be
closed (under
f-consequences) if, for
 , we have    whenever  |=f .

	 every   AtFm
c
 | 2
   AtFm
Let c = 2
   . Then    is satisfiable iff  is closed and satisfiable.
This means, in particular, that to check whether the set w in (62) is satisfiable, it is enough
  | (N, w) |= p ,   term }.
to consider only the closure of {2

Now we characterise |=f in terms of the Boolean consequence relation |=. As we know
from Appendix C.3, spatial formulas can be embedded into the one-variable fragment of
first-order logic. More precisely, it can easily be shown that first-order translations of
formulas from AtFm are (equivalent to) formulas of the form (which are actually Krom
formulas; see, e.g., Borger, Gradel, & Gurevich, 1997):
1
1 
2
2 
 ( t  ))2 = x  2   2
(2
 x 12  22 ,
1
2
1
2
1
1 
2
2 
 ( t  ))2 = x  2   2
(2
 x 12  22 ,
1
2
1
2

233

(63)
(64)

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

1

1 

 ( t  ))2 = x  2   2
(2
1
2
1
2

1

2 

 x 12  22

2

1 

 x 12  22

2
2 
 x 12  22 , (65)

where


i2

(
Pji (x),
if  = CIpj ,
=
Pji (x), if  = ICIpj

and 

i2

(
Pji (x),
if  = ICIpj ,
=
Pji (x), if  = CIpj ,

for i = 1, 2.

It follows from the proof of Lemma C.5 that an RC 2 -formula  is satisfied in an Aleksandrov
2 is satisfied in
model M based on a disjoint union of forks iff its first-order

 translation
ff 
0
1
2
0
a first-order model where every fork f = hW, Ri of M, W = x , x , x , x Rx1 and x0 Rx2 ,
is encoded by a domain element df with Pji (x) being true on df iff (M, xi ) |= CIpj , for
i = 1, 2 (see Fig. 11). Since in the definition of closed sets we only consider Aleksandrov
models based on a single fork f, the domains of respective first-order models contain a single
element df . This means that (63)(65) can be encoded by the Boolean formulas
2
2
1  2 ,
1
1
2
2
 ( t  )) =
(2
1  2  1  2 ,
1
2
2
1
1
1
 ( t  )) =
(2
1  2  1  2 
1
2
1

1

 ( t  )) =
(2
1  2
1
2





2

1

1  2



2
2
1  2 ,



where
(
qji ,
if  = CIpj ,
 =
qji , if  = ICIpj
i

(
qji ,
if  = ICIpj ,
 =
qji , if  = CIpj ,
i

and

for i = 1, 2.

Thus, with every   AtFm we can associate the conjunction  of the  -translations of
formulas in  such that the following holds:
Claim C.8. For every   AtFm ,  |=f 

iff

 |=   .

To construct the closure of   AtFm and to check whether  is satisfiable, we can
use the following resolution-like inference rules:
()

()

 ( t %)
2
1

 (I% t  )
2
2

()1

 ( t  )
2
1
2

%
2

%
2



2(1 t )


()

 (I% t  )
2
1
 (% t  )
2
1

2(0


t 2 )

 ( t  )
2
1
2

()2

 (% t  )
2
1
 (I% t  )
2
1


0

 = %,  = I%;
for
 = %, 0 = %;


 = I%, 0 = I%;

together with the equivalences:
% = 2
 I%,
2

% = 2
 I%,
2

 (% t  ) = 2
 (I% t  ),
2
1
1

 (% t  ) = 2
 (I% t  ),
2
1
1

where % = CIp for some p  , 1 and 2 are of the form % or I%, and 1 and 2 of the form
I% or %. It is readily checked that the above rules are sound, and so if  is derivable from ,
then  is not satisfiable. On the other hand, if  is not satisfiable then  can be regarded
234

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

as an unsatisfiable set of binary and unary propositional clauses and, using the standard
resolution procedure, one can construct a derivation of the empty clause from  which,
in turn, can be mimicked by applications of the above rules (and equivalences) to derive
 from . Moreover, since the propositional resolution is subsumption complete (see, e.g.,
Slagle, Chang, & Lee, 1969), we can also derive all consequences of , thereby obtaining its
closure.
Now we encode the above rules and equivalences as Boolean formulas with variables p ,
   AtFm . For instance, () and () are encoded by
for 2



%  2
%
 ( t  )
 ( t %)  2
 (I% t  )  2
2

and
2
,
2
1
2
1
respectively. Denote by  the conjunction of all such formulas for spatial variables from
. Then we have the following:
Claim C.9. For every   AtFm ,  is closed and satisfiable iff the Boolean formula
h ^
i
^
p
p 
(66)
 
  AtFm 
2


  
2

is satisfiable.
Finally, to ensure (s3), we need the following completion property of RC 2 :
Lemma C.10. Let  be a closed subset of AtFm , 0   and 0 =   AtFm0 . Then
(i) 0 is closed and (ii) for every fork model m0 , if m0 |= 0 then there is a fork model m
such that m0 0 m and m |= .
Proof. Claim (i) is clear. To show (ii), we define the characteristic formula  of m0 on 0
by taking:
(
^
qji , if (m0 , xi ) 6|= CIpj ,


 =
lji
and
lji =
qji ,
if (m0 , xi ) |= CIpj .
p  , i=1,2
j

0

If m0 |= 0 then it follows immediately from the definitions that 0   is satisfiable. Our
aim is to show that    is also satisfiable, which would mean that there is a fork model
m as required. Suppose otherwise. Then  |= . We can regard  as a set of unary and
 . According
binary clauses and  as a clause with 2  |0 | literals lji , the negations of the lji
to the subsumption theorem (Slagle et al., 1969), by applying the standard resolution rule
to  , we can derive a clause lj1 i1  lj2 i2 which subsumes  (i.e., its both literals occur in
). Since  is closed, we have lj1 i1  lj2 i2 among the clauses of  and as the ljk ik are the
i
 k -translations of spatial terms for spatial variables from 0 , we conclude that lj1 i1  lj2 i2
is indeed among the clauses of 0 , contrary to 0   being satisfiable.
q
C.5.2 The Polynomial Translation of PT L  RC 2 into PT L
Now we are in a position to define a polynomial (at most quadratic) translation  of
PT L  RC 2 into PT L. Starting with a given formula , we construct the PT L  RC 2 formula 
e of the form (61):
^

+ 
 (CICIp  CIp0 ) ,

e =  
2+
>2
P 2F
p

235

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

where  is a PT L[RC 2 ]-formula. Let 0 = {p0 | p   } and let  denote the smallest
set of spatial variables containing   0 and all spatial variables occurring in  . Given

   AtFm
  0 the formula from AtFm 0
2
 , denote by 2
 obtained from 2 by replacing
0
0
every occurrence of p   with p   . Consider the PT L-formula


=





+
2+
P 2 F 



+
2+
P 2F

>



^


  2
  0 ) .
(2

  AtFm
2


Lemma C.11. For every PT L  RC 2 -formula , 
e is satisfiable in a tt-model based on
F = hW, <i iff  is satisfiable in a temporal model based on F.
Proof. () Let (M, w0 ) |= .
e Construct a temporal model N = hF, Vi by taking, for

2  AtFm ,
  }.
V(p ) = {w  W | (M, w) |= 2
It is easy to see that (N, w0 ) |=  .
() Let (N, w0 ) |=  for some w0  W . For every w  W , set
   AtFm
w = {2
 | (N, w) |= p }.

Let w , for w  W , be a set of all non--equivalent fork models m with m |= w . By
Claim C.9, the w are closed and satisfiable, so the sets w are nonempty. We use the
elements of the w as building blocks for exhaustive states in the tt-model we are going to
construct in order to satisfy .
First we show that each element of w has a successor in w+1 and a predecessor in
w1 (provided that w has a successor and predecessor, respectively). More precisely, we
say that a pair of fork models m = hf, vi and m0 = hf, v0 i is suitable and write m  m0 if
v(CIp0 ) = v0 (CIp), for every p   .
(succ) Let m  w , m = hf, vi, and let w  W have a successor w + 1. By the third
conjunct of  , we have
w  AtFm0

=

  0  AtFm 0
{2
 | (N, w) |= p 0 }

=

  0  AtFm 0
{2
 | (N, w + 1) |= p }.

Therefore,
w+1  AtFm

=

   AtFm
{2
 | (N, w) |= p 0 }.

Now, by m  w , we have m |= w  AtFm0 . So if we define a fork model m0 = hf, v0 i by
taking v0 (p) = v(p0 ), for all p   (and arbitrary otherwise), then m0 |= w+1  AtFm
follows. Since w+1 is closed, by Lemma C.10, we can find a fork model m00 = hf, v00 i such
that m00  m0 and m00 |= w+1 . It follows that m  m00 and m00 is -equivalent to some
fork model in w+1 (i.e., we may assume that m00  w+1 ).
(pred ) Similarly, for every m  m , m = hf, vi, and every w  W with a predecessor
w  1, there is m00 = hf, v00 i such that m00  w1 and m00  m.
It should be clear that for every fork model m  w and every w  W , we can define a
function rm,w that gives for each u  W a fork model rm,w (u)  u such that rm,w (w) = m
236

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

and rm,w (u)  rm,w (u + 1), whenever u + 1 is a successor of u. Let  be the set of all such
functions rm,w , for w  W and m  w .
We are now ready to define an Aleksandrov tt-model M = hF, G, Vi satisfying .
e Let
G = hW, Ri be a disjoint union of ||-many forks fr = hWr , Rr i, Wr = {x0r , x1r , x2r }, x0r Rr x1r
and x0r Rr x2r , for each r  , and let V(p, w) = {xir  W | (r(w), xir ) |= CIp}, for all p  
and w  W . We show by induction on the construction of   sub  that, for every w  W ,
(M, w) |= 

iff

(N, w) |=  .

  . Suppose that (M, w) |= 2
  but (N, w) 6|= p . Then 2
 
Case  = 2
/ w and, since

  . It follows that
w is closed (by Claim C.9 and  being true at w), we have w 6|=f 2
  , and so there is r   such that r(w) = m,
there is a fork model m  w with m |= 2
  . Conversely, if (N, w) |= p

contrary to (M, w) |= 2
 then, by construction, (M, w) |= 2 .
The cases of the Booleans and temporal operators are trivial.
As the second conjunct of 
e is satisfied by construction, we obtain (M, w0 ) |= .
e
q

References
Aiello, M., & van Benthem, J. (2002a). Logical patterns in space. In Barker-Plummer,
D., Beaver, D. I., van Benthem, J., & Scotto di Luzio, P. (Eds.), Words, Proofs and
Diagrams, pp. 525. CSLI Publications, Stanford.
Aiello, M., & van Benthem, J. (2002b). A modal walk through space. Journal of Applied
Non-Classical Logics, 12 (34), 319364.
Alexandroff, P. (1937). Diskrete Raume. Matematicheskii Sbornik, 2 (44), 501518.
Allen, J. (1983). Maintaining knowledge about temporal intervals. Communications of the
ACM, 26, 832843.
Areces, C., Blackburn, P., & Marx, M. (2000). The computational complexity of hybrid
temporal logics. Logic Journal of the IGPL, 8, 653679.
Arhangelskii, A., & Collins, P. (1995). On submaximal spaces. Topology and its Applications, 64, 219241.
Asher, N., & Vieu, L. (1995). Toward a geometry of common sense: A semantics and a
complete axiomatization of mereotopology. In Mellish, C. (Ed.), Proceedings of the
14th International Joint Conference on Artificial Intelligence (IJCAI-95), pp. 846
852. Morgan Kaufmann.
Balbiani, P., & Condotta, J.-F. (2002). Computational complexity of propositional linear
temporal logics based on qualitative spatial or temporal reasoning. In Armando, A.
(Ed.), Proceedings of Frontiers of Combining Systems (FroCoS 2002), Vol. 2309 of
Lecture Notes in Computer Science, pp. 162176. Springer.
Balbiani, P., Tinchev, T., & Vakarelov, D. (2004). Modal logics for region-based theories of
space. Manuscript.
Bennett, B. (1994). Spatial reasoning with propositional logic. In Proceedings of the 4th
International Conference on Knowledge Representation and Reasoning, pp. 5162.
Morgan Kaufmann.
237

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

Bennett, B. (1996). Modal logics for qualitative spatial reasoning. Logic Journal of the
IGPL, 4, 2345.
Bennett, B., & Cohn, A. (1999). Multi-dimensional multi-modal logics as a framework
for spatio-temporal reasoning. In Proceedings of the Hot topics in Spatio-temporal
reasoning workshop, IJCAI-99, Stockholm.
Bennett, B., Cohn, A., Wolter, F., & Zakharyschev, M. (2002). Multi-dimensional modal
logic as a framework for spatio-temporal reasoning. Applied Intelligence, 17, 239251.
Blackburn, P. (1992). Fine grained theories of time. In Aurnague, M., Borillo, A., Borillo,
M., & Bras, M. (Eds.), Proceedings of the 4th European Workshop on Semantics of
Time, Space, and Movement and Spatio-Temporal Reasoning, pp. 299320, Chateau
de Bonas, France. Groupe Langue, Raisonnement, Calcul, Toulouse.
Borger, E., Gradel, E., & Gurevich, Y. (1997). The Classical Decision Problem. Perspectives
in Mathematical Logic. Springer.
Bourbaki, N. (1966). General topology, Part 1. Hermann, Paris and Addison-Wesley.
Chagrov, A., & Zakharyaschev, M. (1997). Modal Logic, Vol. 35 of Oxford Logic Guides.
Clarendon Press, Oxford.
Chlebus, B. (1986). Domino-tiling games. Journal of Computer and System Sciences, 32,
374392.
Clarke, B. (1981). A calculus of individuals based on connection. Notre Dame Journal of
Formal Logic, 23, 204218.
Clarke, B. (1985). Individuals and points. Notre Dame Journal of Formal Logic, 26, 6175.
Clarke, E., & Emerson, E. (1981). Design and synthesis of synchronisation skeletons using
branching time temporal logic. In Kozen, D. (Ed.), Logic of Programs, Vol. 131 of
Lecture Notes in Computer Science, pp. 5271. Springer.
Clementini, E., Di Felice, P., & Hernandez, D. (1997). Qualitative representation of positional information. Artificial Intelligence, 95, 317356.
Cohn, A. (1997). Qualitative spatial representation and reasoning techniques. In Brewka,
G., Habel, C., & Nebel, B. (Eds.), KI-97: Advances in Artificial Intelligence, Vol. 1303
of Lecture Notes in Computer Science, pp. 130. Springer.
Davis, E. (1990). Representations of Commonsense Knowledge. Morgan Kaufmann.
Degtyarev, A., Fisher, M., & Konev, B. (2003). Monodic temporal resolution. In Baader,
F. (Ed.), Proceedings of the 19th International Conference on Automated Deduction (CADE-19), Vol. 2741 of Lecture Notes in Artificial Intelligence, pp. 397411.
Springer.
Demri, S., & DSouza, D. (2002). An automata-theoretic approach to constraint LTL. In
Agrawal, M., & Seth, A. (Eds.), Proceedings of the 22nd Conference on Foundations
of Software Technology and Theoretical Computer Science (FST TCS 2002), Vol. 2556
of Lecture Notes in Computer Science, pp. 121132. Springer.
Egenhofer, M., & Franzosa, R. (1991). Point-set topological spatial relations. International
Journal of Geographical Information Systems, 5, 161174.
238

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

Egenhofer, M., & Herring, J. (1991). Categorizing topological relationships between regions,
lines and points in geographic databases. Tech. rep., University of Maine.
Egenhofer, M., & Sharma, J. (1993). Assessing the consistency of complete and incomplete
topological information. Geographical Systems, 1, 4768.
Emerson, E., & Halpern, J. (1985). Decision procedures and expressiveness in the temporal
logic of branching time. Journal of Computer and System Sciences, 30, 124.
Fine, K. (1974). Logics containing K4, part I. Journal of Symbolic Logic, 39, 229237.
Finger, M., & Gabbay, D. (1992). Adding a temporal dimension to a logic system. Journal
of Logic, Language and Information, 2, 203233.
Fisher, M., Dixon, C., & Peim, M. (2001). Clausal temporal resolution. ACM Transactions
on Computational Logic (TOCL), 2, 1256.
Gabbay, D., Hodkinson, I., & Reynolds, M. (1994). Temporal Logic: Mathematical Foundations and Computational Aspects, Volume 1. Oxford University Press.
Galton, A., & Meathrel, R. (1999). Qualitative outline theory. In Dean, T. (Ed.), Proceedings
of the 16th International Joint Conference on Artificial Intelligence (IJCAI-99), pp.
10611066. Morgan Kaufmann.
Gerevini, A., & Nebel, B. (2002). Qualitative spatio-temporal reasoning with RCC-8 and Allens interval calculus: Computational complexity. In Proceedings of the 15th European
Conference on Artificial Intelligence (ECAI02), pp. 312316. IOS Press.
Gerevini, A., & Renz, J. (2002). Combining topological and size constraints for spatial
reasoning. Artificial Intelligence, 137, 142.
Godel, K. (1933). Eine Interpretation des intuitionistischen Aussagenkalkuls. Ergebnisse
eines mathematischen Kolloquiums, 4, 3940.
Goldblatt, R. (1976). Metamathematics of modal logic, Part I. Reports on Mathematical
Logic, 6, 4178.
Goranko, V., & Passy, S. (1992). Using the universal modality: gains and questions. Journal
of Logic and Computation, 2, 530.
Gotts, N. (1996). An axiomatic approach to topology for spatial information systems. Tech.
rep. 96.25, School of Computer Studies, University of Leeds.
Halpern, J., & Shoham, Y. (1986). A propositional modal logic of time intervals. In Proceedings of the 1st Annual IEEE Symposium on Logic in Computer Science (LICS86),
pp. 279292. IEEE Computer Society.
Halpern, J., & Vardi, M. (1989). The complexity of reasoning about knowledge and time I:
lower bounds. Journal of Computer and System Sciences, 38, 195237.
Hodkinson, I. (2004). Complexity of monodic packed fragment over linear and real time. To
appear in Annals of Pure and Applied Logic, available at http://www.doc.ic.ac.uk/
/~imh/papers/cxmonlin.pdf.
Hodkinson, I., Kontchakov, R., Kurucz, A., Wolter, F., & Zakharyaschev, M. (2003). On
the computational complexity of decidable fragments of first-order linear temporal
239

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

logics. In Reynolds, M., & Sattar, A. (Eds.), Proceedings of TIME-ICTL 2003, pp.
9198. IEEE Computer Society.
Hodkinson, I., Wolter, F., & Zakharyaschev, M. (2000). Decidable fragments of first-order
temporal logics. Annals of Pure and Applied Logic, 106, 85134.
Hodkinson, I., Wolter, F., & Zakharyaschev, M. (2001). Monodic fragments of first-order
temporal logics: 20002001 A.D. In Nieuwenhuis, R., & Voronkov, A. (Eds.), Logic
for Programming, Artificial Intelligence and Reasoning, Vol. 2250 of Lecture Notes in
Artificial Intelligence, pp. 123. Springer.
Hodkinson, I., Wolter, F., & Zakharyaschev, M. (2002). Decidable and undecidable fragments of first-order branching temporal logics. In Proceedings of the 17th Annual
IEEE Symposium on Logic in Computer Science (LICS 2002), pp. 393402. IEEE
Computer Society.
Hughes, G., & Cresswell, M. (1996). A New Introduction to Modal Logic. Methuen, London.
Hustadt, U., & Konev, B. (2003). TRP++ 2.0: A temporal resolution prover. In Baader,
F. (Ed.), Proceedings of the 19th International Conference on Automated Deduction
(CADE-19), Vol. 2741 of Lecture Notes in Computer Science, pp. 274278. Springer.
Kontchakov, R., Lutz, C., Wolter, F., & Zakharyaschev, M. (2004). Temporalising tableaux.
Studia Logica, 76, 91134.
Kutz, O., Sturm, H., Suzuki, N.-Y., Wolter, F., & Zakharyaschev, M. (2003). Logics of
metric spaces. ACM Transactions on Computational Logic, 4, 260294.
Ladner, R. (1977). The computational complexity of provability in systems of modal logic.
SIAM Journal on Computing, 6, 467480.
Lemon, O., & Pratt, I. (1998). On the incompleteness of modal logics of space: advancing complete modal logics of place. In Kracht, M., de Rijke, M., Wansing, H., &
Zakharyaschev, M. (Eds.), Advances in Modal Logic, Volume 1, pp. 115132. CSLI
Publications, Stanford.
Lewis, C., & Langford, C. (1932). Symbolic Logic. Appleton-Century-Crofts, New York.
Ligozat, G. (1998). Reasoning about cardinal directions. Journal of Visual Languages and
Computing, 9, 2344.
Manna, Z., & Pnueli, A. (1992). The Temporal Logic of Reactive and Concurrent Systems.
Springer.
McKinsey, J. (1941). A solution of the decision problem for the Lewis systems S2 and S4,
with an application to topology. Journal of Symbolic Logic, 6, 117134.
McKinsey, J., & Tarski, A. (1944). The algebra of topology. Annals of Mathematics, 45,
141191.
Muller, P. (1998a). A qualitative theory of motion based on spatio-temporal primitives.
In Cohn, A., Schubert, L., & Shapiro, S. (Eds.), Proceedings of the 6th International
Conference on Principles of Knowledge Representation and Reasoning (KR98), pp.
131142. Morgan Kaufmann.
240

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

Muller, P. (1998b). Space-time as a primitive for space and motion. In Guarino, N. (Ed.),
Proceedings of the International Conference on Formal Ontology in Information Systems (FOIS98), Vol. 46 of Frontiers in Artificial Intelligence and Applications, pp.
6376. IOS Press.
Nebel, B., & Burckert, H. (1995). Reasoning about relations: A maximal tractable subclass
of Allens interval algebra. Journal of the ACM, 42, 4366.
Nebel, B. (1996). Artificial intelligence: A computational perspective. In Brewka, G. (Ed.),
Principles of Knowledge Representation, pp. 237266. CSLI Publications.
Nutt, W. (1999). On the translation of qualitative spatial reasoning problems into modal
logics. In Burgard, W., Christaller, T., & Cremers, A. (Eds.), Advances in Artificial Intelligence. Proceedings of the 23rd Annual German Conference on Artificial
Intelligence (KI99), Vol. 1701 of Lecture Notes in Computer Science, pp. 113124.
Springer.
Ono, H., & Nakamura, A. (1980). On the size of refutation Kripke models for some linear
modal and tense logics. Studia Logica, 39, 325333.
Orlov, I. (1928). The calculus of compatibility of propositions. Mathematics of the USSR,
Sbornik, 35, 263286. (In Russian).
Post, E. (1946). A variant of a recursively unsolvable problem. Bulletin of the AMS, 52,
264268.
Pratt-Hartmann, I. (2002). A topological constraint language with component counting.
Journal of Applied Non-Classical Logics, 12, 441467.
Randell, D., Cui, Z., & Cohn, A. (1992). A spatial logic based on regions and connection.
In Nebel, B., Rich, C., & Swartout, W. (Eds.), Proceedings of the 3rd International
Conference on Principles of Knowledge Representation and Reasoning (KR92), pp.
165176. Morgan Kaufmann.
Renz, J. (1998). A canonical model of the region connection calculus. In Cohn, A., Schubert,
L., & Shapiro, S. (Eds.), Proceedings of the 6th International Conference on Principles of Knowledge Representation and Reasoning (KR98), pp. 330341. Morgan
Kaufmann.
Renz, J., & Nebel, B. (1998). Spatial reasoning with topological information. In Freksa, C.,
Habel, C., & Wender, K. (Eds.), Spatial CognitionAn Interdisciplinary Approach
to Representation and Processing of Spatial Knowledge, Vol. 1404 of Lecture Notes in
Computer Science, pp. 351372. Springer.
Renz, J., & Nebel, B. (1999). On the complexity of qualitative spatial reasoning. Artificial
Intelligence, 108, 69123.
Renz, J. (2002). A canonical model of the region connection calculus. Journal of Applied
Non-Classical Logics, 12, 469494.
Renz, J., & Nebel, B. (2001). Efficient methods for qualitative spatial reasoning. Journal
of Artificial Intelligence Research, 15, 289318.
Reynolds, M. (2003). The complexity of the temporal logic with until over general linear
time. Journal of Computer and System Science, 66, 393426.
241

fiGabelaia, Kontchakov, Kurucz, Wolter, & Zakharyaschev

Reynolds, M. (2004). The complexity of the temporal logic over the reals. Submitted,
available at http://www.csse.uwa.edu.au/~mark/research/Online/CORT.htm.
Schwendimann, S. (1998). A new one-pass tableau calculus for PLTL. In de Swart, H. (Ed.),
Proceedings of the International Conference on Automated Reasoning with Analytic
Tableaux and Related Methods (TABLEAUX-98), Vol. 1397 of Lecture Notes in Artificial Intelligence, pp. 277291. Springer.
Sistla, A., & Clarke, E. (1985). The complexity of propositional linear temporal logics.
Journal of the Association for Computing Machinery, 32, 733749.
Sistla, A., & German, S. (1987). Reasoning with many processes. In Proceedings of the
Second IEEE Symposium on Logic in Computer Science (LICS87), pp. 138153. IEEE
Computer Society.
Slagle, J., Chang, C.-L., & Lee, R. (1969). Completeness theorems for semantic resolution
in consequence-finding. In Proceedings of the 1st International Joint Conference on
Artificial Intelligence (IJCAI69), pp. 281286. William Kaufmann.
Smith, T., & Park, K. (1992). An algebraic approach to spatial reasoning. International
Journal of Geographical Information Systems, 6, 177192.
Stockmeyer, L. (1974). The Complexity of Decision Problems in Automata Theory and
Logic. Ph.D. thesis, MIT.
Stockmeyer, L. (1987). Classifying the computational complexity of problems. Journal of
Symbolic Logic, 52, 143.
Stone, M. (1937). Application of the theory of Boolean rings to general topology. Transactions of the AMS, 41, 321364.
Tarski, A. (1938). Der Aussagenkalkul und die Topologie. Fundamenta Mathematicae, 31,
103134.
Tsao Chen, T. (1938). Algebraic postulates and a geometric interpretation of the Lewis
calculus of strict implication. Bulletin of the AMS, 44, 737744.
van Benthem, J. (1995). Temporal logic. In Gabbay, D., Hogger, C., & Robinson, J. (Eds.),
Handbook of Logic in Artificial Intelligence and Logic Programming, Vol. 4, pp. 241
350. Oxford Scientific Publishers.
van Emde Boas, P. (1997). The convenience of tilings. In Sorbi, A. (Ed.), Complexity, Logic
and Recursion Theory, Vol. 187 of Lecture Notes in Pure and Applied Mathematics,
pp. 331363. Marcel Dekker Inc.
Wolper, P. (1985). The tableau method for temporal logic: An overview. Logique et Analyse,
28, 119152.
Wolter, F. (1996). Properties of tense logics. Mathematical Logic Quarterly, 42, 481500.
Wolter, F., & Zakharyaschev, M. (2000a). Spatial reasoning in RCC-8 with Boolean region
terms. In Horn, W. (Ed.), Proceedings of the 14th European Conference on Artificial
Intelligence (ECAI 2000), pp. 244248. IOS Press.
Wolter, F., & Zakharyaschev, M. (2000b). Spatio-temporal representation and reasoning
based on RCC-8. In Cohn, A., Giunchiglia, F., & Seltman, B. (Eds.), Proceedings of
242

fiCombining Spatial and Temporal Logics: Expressiveness vs. Complexity

the 7th Conference on Principles of Knowledge Representation and Reasoning (KR
2000), pp. 314. Morgan Kaufmann.
Wolter, F., & Zakharyaschev, M. (2002). Qualitative spatio-temporal representation and
reasoning: a computational perspective. In Lakemeyer, G., & Nebel, B. (Eds.), Exploring Artificial Intelligence in the New Millenium, pp. 175216. Morgan Kaufmann.
Zimmermann, K. (1995). Measuring without measures: the delta-calculus. In Frank, A., &
Kuhn, W. (Eds.), Proceedings of the 2nd International Conference on Spatial Information Theory (COSIT), Vol. 988 of Lecture Notes in Computer Science, pp. 5967.
Springer.

243

fi