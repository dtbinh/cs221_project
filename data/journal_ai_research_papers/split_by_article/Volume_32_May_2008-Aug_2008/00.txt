Journal of Artificial Intelligence Research 32 (2008) 1-36

Submitted 05/07; published 5/08

Enhancing Cooperative Search with Concurrent Interactions
MANISTER @ BIU .013. NET. IL

Efrat Manisterski
Department of Computer Science,
Bar-Ilan University, Ramat Gan, 52900 Israel

SARNED @ CS . BIU . AC . IL

David Sarne
Department of Computer Science,
Bar-Ilan University, Ramat Gan, 52900 Israel

SARIT @ CS . BIU . AC . IL

Sarit Kraus
Department of Computer Science,
Bar-Ilan University, Ramat Gan, 52900 Israel

Abstract
In this paper we show how taking advantage of autonomous agents capability to maintain
parallel interactions with others, and incorporating it into the cooperative economic search model
results in a new search strategy which outperforms current strategies in use. As a framework for
our analysis we use the electronic marketplace, where buyer agents have the incentive to search
cooperatively. The new search technique is quite intuitive, however its analysis and the process of
extracting the optimal search strategy are associated with several significant complexities. These
difficulties are derived mainly from the unbounded search space and simultaneous dual affects of
decisions taken along the search. We provide a comprehensive analysis of the model, highlighting,
demonstrating and proving important characteristics of the optimal search strategy. Consequently,
we manage to come up with an efficient modular algorithm for extracting the optimal cooperative
search strategy for any given environment. A computational based comparative illustration of the
system performance using the new search technique versus the traditional methods is given, emphasizing the main differences in the optimal strategys structure and the advantage of using the
proposed model.

1. Introduction
Coalition formation is well recognized as a key process in a multi-agent systems, mostly desirable in
environments where a group of agents can perform a task more efficiently than any single agent can
(Lermann & Shehory, 2000). In recent years many coalition formation models have been suggested,
for various domains (Talukdar, Baerentzen, Gove, & de Souza, 1998; Dias, 2004), particularly for
electronic commerce (Tsvetovat, Sycara, Chen, & Ying, 2000; Yamamoto & Sycara, 2001; Sarne
& Kraus, 2005). In the latter context, the most common coalition is a coalition of buyers, derived
mainly from the potential of obtaining volume discounts (Tsvetovat et al.; Sarne & Kraus, 2003)
and the ability to search cooperatively for market opportunities in a more efficient manner (Sarne &
Kraus, 2005).

c
2008
AI Access Foundation. All rights reserved.

fiM ANISTERSKI , S ARNE , & K RAUS

The cooperative economic search1 incentive derives principally from the existence of search
costs found in MAS. These costs reflect the resources (not necessarily monetary) that need to be
invested or consumed while searching for opportunities in the environment (Sarne & Kraus, 2005)
(e.g., searching for an opportunity to buy a product in the context of the electronic marketplace).
The scenario of having search costs is common in MAS where the agent needs (for its decision
making process) immediate information concerning market opportunities. Given the richness of
opportunities and the dynamic and open nature of these environments, central mechanisms are usually incapable of supplying such information with the level of completeness and accuracy required
by the agent, certainly not without a cost. Thus the agent needs to spend some of its resources on
search related activities. Despite the reduction in the magnitude of these search costs in the electronic commerce era, the continuous growth in the number of retailers and virtual stores over the
Internet, followed by a phenomenal increase in the number of opportunities available, makes the
overall search cost an important parameter affecting buyers search strategy (Choi & Liu, 2000;
Kephart & Greenwald, 2002; Sarne & Kraus, 2005; Bakos, 1997).
In this context, the cooperative search offers the advantage of sharing, reusing and re-allocating
opportunities among the coalition members (Sarne & Kraus, 2005). For example, using cooperative
search agents can exploit opportunities which would have been discarded otherwise if each of the
agents would have conducted an alternative separate search. Nevertheless, the process of forming
and maintaining the coalition induces some overhead, derived mainly from the communication and
coordination activities (Sarne & Kraus, 2003), thus the coalition should set its search strategy in a
cost/effective manner.
A classic example of the above in traditional markets is the procurement management officer
of a corporation. Instead of having each individual in the cooperation spend time and resources
on locating its specific requested supplies, the task is delegated to the procurement management
officer. Here, in addition to the price discounts obtained for aggregated demands of identical items,
the procurement management officer becomes highly updated with the different offers and specific
supplies available by the different merchants in the markets. As a result the cost of locating the
best deal for each request becomes significantly smaller (in comparison to the equivalent search
conducted by each of the individuals).
The basic concepts by which a coalition should manage the cooperative search, including an
analysis and computational means for extracting its optimal search strategies, are given by Sarne
and Kraus (2005). Nevertheless, the assumption used in that model for constructing the coalitions
strategy is that the coalition interacts with one seller agent at a time. Such an assumption ignores
the inherent strength of autonomous agents, which is their capability to efficiently interact with
several other agents in parallel. This capability derives primarily from their improved communication capabilities and their ability to process an enormous amount of information in a short time
compared to people. In this paper, we take advantage of this capability and incorporate it into the
cooperative economic search model, supplying a comprehensive analysis of the resulting parallel
cooperative search variant. As we show throughout the paper, the parallel model weakly dominates
the existing sequential cooperative search model described by Sarne and Kraus: it has the potential
of significantly improving the searchers performance in various environments, and always guarantees reaching at least the performance of the existing cooperative search model. In particular, the
parallel interaction is preferable whenever an agents search cost is non-linear or combines fixed
1. As opposed to the classical AI search (Hart, Nilsson, & Raphael, 1968) in which an agent seeks a sequence of actions
that will bring it from an initial state to a desired goal state.

2

fiE NHANCING C OOPERATIVE S EARCH

WITH

C ONCURRENT I NTERACTIONS

components (e.g. operational costs), depending on the number of interactions maintained (e.g. advantage of size). In such cases, the adoption of the parallel technique by the coalition suggests a
reduction in the average cost per interaction with seller agents.
Moreover, the improvement achieved using the parallel technique increases when there is a finite decision horizon (i.e., whenever the coalition has a deadline for finishing its search). In addition
to the advantage of reducing the average cost per interaction, in finite horizon settings the coalition
benefits from the fact that it can increase the intensity of the search and, thus, scan more opportunities (in comparison to the sequential search model described by Sarne & Kraus, 2005) prior to
reaching the deadline.
While the integration of parallel interactions technique into a single agents search process is
quite intuitive, finding the optimal (overall utility maximization) strategy for the cooperative search
case is not trivial at all. The major difficulty derives from the fact that different coalition members
may have heterogeneous multi-attribute utility functions. Therefore, extracting the value encapsulated in future streams of opportunities is complex. We overcome this difficulty and present an
algorithm for extracting the coalition strategy. Our algorithm facilitates the calculation process of
the coalition strategy and it is polynomial in the number of parallel interactions. This is a significant improvement over the brute-force algorithm which is exponential in the number of parallel
interactions.
Similar to the model introduced by Sarne and Kraus (2005), we apply the multi-attribute utility
theory (MAUT) (Keeney & Raiffa, 1976) to analyze preferences with multiple attributes in our agent
based search mechanism. This enables a set of preferences to be represented by a numerical utility
function. We consider the agents to be heterogeneous, i.e. each having its own utility function. The
model is general, though we emphasize several specific implementation aspects relating to the B2C
market (businesses selling products or services to end-user consumers), where sellers can supply
almost any demanded volume, and to the C2C market (transactions between consumers), where
sellers offer single items for sale. Based on the proposed analysis, the coalition can calculate its
optimal strategy given the utility functions of the coalition members and the specific environment
in which it operates.
Three basic stages are common to all coalition formation models (Sandholm, Larson, Andersson, Shehory, & Tohme, 1999; Tsvetovat et al., 2000): coalition structure generation (where the
agents form/join the coalition), executing the coalition task, and dividing the generated value among
the coalition members. Among these three stages our focus is on finding the optimal search strategy
for the coalition, given its structure and the opportunity distribution. As suggested by Sarne and
Kraus (2005), the coalition operates in its environment alongside many other coalitions differing in
their size, their members utility functions and the products they are seeking. These other coalitions,
as well as the different individual utility functions play an important role when studying the stability
of a coalition and the issue of revealing the true utility function (truth telling). The analysis of these
important issues is based on the ability to properly derive the coalitions utility given any specific
self structure and the environment within which it operates. 2 This paper aims to supply this functionality, laying the foundation and enabling research of many of the important aspects of coalition
formation given above in the context of cooperative search (truth telling, stability, payoff division,
etc.).
2. The utility considered is the agents reported, not necessarily true, utility function, since the goal is to extract the
optimal strategy for a given input.

3

fiM ANISTERSKI , S ARNE , & K RAUS

The main contributions of this work are fourfold: First, we formally model and analyze the
parallel cooperative search problem of agents operating in a costly environment. The parallel cooperative search model is a general search model and can be applied in various domains in addition
to the electronic marketplace that is used as a framework for our work. Second, we show that in
many environments the parallel cooperative search outperforms the previous search strategies (either
when each agent searches by itself or when using a cooperative sequential search). Furthermore,
we draw attention to scenarios where sequential cooperative search is proven to be non-beneficial,
however parallel cooperative search is a favorable technique. Third, we supply an algorithm that
facilitates the calculation of the coalitions optimal strategy, and significantly reduces the complexities associated with the attempt to extract this strategy from an appropriate set of equations. Finally
we provide a comprehensive analysis of the parallel model for a finite decision horizon. We draw
attention to the significant improvement that can be achieved by integrating the parallel technique
into cooperative search in the finite decision horizon.
The rest of the paper is organized as follows. Section 2 reviews the related work, emphasizing
the uniqueness of the proposed parallel cooperative search model. The model description and its
underlying assumptions are given in section 3. In section 4, we formally describe the performance
of the coalition when using the parallel cooperative search as a function of the strategy used and
present the complexities associated with extracting the optimal search strategy. By exploring the
unique characteristics of the coalitions optimal strategy when using the cooperative parallel search
we manage to overcome this computational complexity. This process is described in section 5. Consequently, we present an efficient algorithm for extracting the optimal cooperative search strategy.
Some interesting properties of the new search model, with regard to the market in which it takes
place, are illustrated in section 6. In section 7, a finite decision horizon variant of the model is
discussed. The parallel cooperative search performance and its advantages over the current search
models, both in infinite and finite decision horizons, are illustrated in section 8. Finally, we conclude
with a discussion and suggested future research directions in section 9.

2. Related Work
In many scenarios autonomous agents in multi-agent environments may cooperate in order to perform tasks. The need for cooperation may arise either when an agent is incapable of completing a
task by itself or when operating as a group can improve the overall performance (Breban & Vassileva, 2001; Lermann & Shehory, 2000; Tsvetovat et al., 2000). Group based cooperative behavior
can be found in various domains, such as solving complex optimization problems (Talukdar et al.,
1998), military and rescue domains (Dias, 2004), e-business applications (Tsvetovat et al., 2000;
Yamamoto & Sycara, 2001) and many more. The recognition of the advantages encapsulated in
teamwork and cooperative behaviors, is the main driving force of many coalition formation models
in the area of cooperative game theory and MAS (Lermann & Shehory, 2000; Li, Rajan, Chawla, &
Sycara, 2003; Shehory & Kraus, 1998). Many examples from the the extensive literature on coalition formation can be found in books and journals (Kahan & Rapoport, 1984). In the electronic
market domain, most authors focus on coalitions formed to obtain volume discounts Tsvetovat
et al., Yamamoto and Sycara. Additional coalition formation models for the electronic marketplace
consider extensions of the transaction-oriented coalitions into long-term ones Breban and Vassileva,
and for large-scale electronic markets Lermann and Shehory.

4

fiE NHANCING C OOPERATIVE S EARCH

WITH

C ONCURRENT I NTERACTIONS

Traditionally, the majority of this research effort has focused on issues concerning the optimal
division of agents into disjoint exhaustive coalitions (Sandholm et al., 1999; Yamamoto & Sycara,
2001), division of coalition payoffs Yamamoto and Sycara and enforcement methods for interaction
protocols. Only a few authors have considered the coalitions problem of determining its strategy
in the electronic commerce domain, once the coalition is formed (Ito, Ochi, & Shintani, 2002).
Nevertheless, other than a single exception (Sarne & Kraus, 2005), none of the proposed models
have considered a coalition search in a costly environment, and in particular none of them (including
Sarne & Kraus, 2005) have made use of its capabilities to maintain parallel interactions.
The problem of a searcher operating in a costly environment, seeking to maximize his long term
utility is addressed in classical search theory (Lippman & McCall, 1976; McMillan & Rothschild,
1994, and references therein). There are three main search models that can be found in the literature.
The first search model is the Fixed Sample Size (FSS) model, introduced by Stigler (1961). In this
model the searcher first chooses the sample size and then draws a single sample where all observations are made simultaneously. The second model is the Single Agent Sequential Search (SASS)
strategy (Rothschild, 1974; Lippman and McCall). In this model the searcher draws exactly one observation at a time. Based on the value of the observations drawn till that time, the searcher decides
whether to draw another observation. His decision depends upon what he observed. Attempts to
adopt the sequential search model for agent-based electronic trading environments associated with
search costs are suggested by Choi and Liu (2000), and Kephart and Greenwald (2002), though the
main focus is on establishing the appropriate characteristics of the environment and search strategy
rather than the computational aspects of extracting it. The last search method, Single Agent Parallel Search (SAPS) (Benhabib & Bull, 1983; Gal, Landsberger, & Levykson, 1981; Morgan, 1983;
Morgan & Manning, 1985), encompasses the above search models as special cases. In this model
the searcher may choose both the number of samples taken and the sample size in each period. This
latter method, which outperforms the other two, is in fact the single agents equivalent to our parallel
cooperative search model considered in this paper. Nevertheless, search theory has mainly focused
on a single searcher, looking for a single opportunity, either as a one sided (taking the environments
reaction to the search strategy used by the agent to be static) or two sided (as a matching model,
analyzed from the equilibrium perspective) model. The analysis of a cooperative search is lacking.
This, is in-spite of the fact that cooperative search has been proven (Sarne & Kraus, 2005) to be
inherently different from a single agents search in relation to its complexity, strategy structure and
solution methodology.
Several extensions of economic search theory have been suggested for the case of a consumer
searching for multiple different commodities, while facing imperfect information about prices (Gatti,
1999; Carlson & McAfee, 1984; Burdett & Malueg, 1981). Here, we can find different variants
where the consumer visits one or more stores in order to minimize the total expenditure. Nevertheless, the attempt to adjust the proposed methods suggested in these models to support our parallel
cooperative search process results in a solution complexity that is exponential in the number of parallel interactions. In contrast our algorithm for extracting the optimal search strategy is polynomial
in the number of parallel interactions.

3. The Parallel Cooperative Search Model
We base our model description and formulation on the definitions given by Sarne and Kraus (2005)
and extend them to reflect the agents parallel search capabilities. We consider an electronic mar5

fiM ANISTERSKI , S ARNE , & K RAUS

ketplace where numerous buyer and seller agents can be found. Each agent is interested in buying
or offering to sell a well defined product. A product can be offered by many different seller agents
under various terms and policies (including price). We assume that while buyer agents are ignorant
of individual seller agents offers, they are acquainted with the overall distribution of opportunities
(where an opportunity is defined as the option to buy the product under specific terms and policies)
in the marketplace.
Assuming there are no central mechanisms or mediators which can supply the agents with full
immediate information concerning current market opportunities, each agent needs to search for
appropriate opportunities to buy its requested product. Throughout the search the buyer agents
locate seller agents and learn about their offers by interacting with them. Each buyer agent evaluates
opportunities using its own multi-attribute utility function. Buyer agents may have heterogeneous
preferences and thus the utility from a given opportunity differs according to the evaluating buyer
agent.
In its most basic form, each buyer agent interacts with several sellers in parallel at each stage of
its search thus learns about a new set of opportunities. Based on the agents evaluation of the utility
that can be gained from each opportunity in the set, the agent makes a decision whether to exploit
any of the opportunities it encountered throughout its search (i.e. buy from any of the sellers) or
resume its search in a similar method. A decision to resume the search is always accompanied by
the number of parallel interactions to be conducted next.
The search activity is assumed to be costly (Choi & Liu, 2000; Kephart & Greenwald, 2002;
Sarne & Kraus, 2005; Bakos, 1997). For each search stage in which the buyer agent locates, interacts
and evaluates seller agents, the process induces a search cost. This cost is a function of the number
of parallel interactions initiated and maintained by the agent. The search cost structure is principally
a parameter of the markets liquidity and volatility, and thus it is assumed to be shared by all buyer
agents operating in the specific marketplace. Recognizing the benefits of a cooperative search,
buyer agents, interested in similar products or interchangeable products, may form coalitions (Sarne
& Kraus, 2005). There are various methods by which the coalition members can coordinate their
cooperative search (e.g. assign a representative agent to search on behalf of the coalition or simply
take turns searching), each deriving a different search cost overhead structure. The coalitions search
costs are assumed to increase both as a function of the number of parallel interactions it forms
and the number of buyer agents in the coalition. 3 We assume a buyer agents utility from a given
opportunity may be interpreted into monetary terms. Thus the utilities are additive and the total
search utility can be obtained by subtracting the search cost that the process induces from this
value.
As part of its search process, the coalition needs to set a strategy for determining, given any set
of known opportunities, whether to terminate or resume its search. In the latter case, the coalition
also needs to determine the number of parallel interactions to be used in the next search round.
The optimal strategy is the one maximizing its expected total search utility (opportunities utility
minus search costs). As discussed in detail in the cooperative search model (Sarne & Kraus, 2005),
given the option of side-payments the overall utility maximization strategy taken by the coalition
is always the preferred one by all coalition members (i.e. no conflict of interests), regardless of
the pre-set coalitions payoff division protocol. Given the coalitions goal of maximizing the overall coalition utility, its decision is not influenced by the payoff division protocol, nor by coalition
3. The reason for correlating the coalitions search cost with the number of coalition members is mainly associated with
some coordination overhead (Sarne & Kraus, 2005).

6

fiE NHANCING C OOPERATIVE S EARCH

WITH

C ONCURRENT I NTERACTIONS

stability considerations, but rather influences these two factors (Sarne & Kraus, 2005). Any of the
agents pre-determined portion of the coalitions utility will increase in its absolute value along with
the increase of the net coalition utility, thus the overall utility maximization strategy is the preferred
strategy by all agents at every stage of the search.

4. Parallel Cooperative Search (PCS) Analysis
The following section formally defines the search environment and the coalitions search strategy.
For convenience, all the notations given, and their meanings, are summarized in a table at the end
of the paper.
Let B = (B1 , B2 , ..., Bk ) be the set of the attributes defining any of the potentially available
opportunities in the market, where each attribute B i can be assigned a value from the finite set
(bimin , ..., bimax ). An opportunitys type is defined by the vector ~o i = (b1 , b2 , ...bk ), assigning a value
bi to each specific attribute Bi .4 We use O p to denote the space of potential opportunity types the
coalition may encounter. The opportunity types distribution in the marketplace is denoted by the
probability function p(~o), ~oO p p(~o) = 1. We consider a coalition A = {a 1 , a2 , ..., a|A| } of a general
size, where a j is the j th buyer agent in the coalition. Each buyer agent, a j , evaluates opportunities
using a utility function U j : O p  R, where U j (~o) is the agents utility from opportunity type ~o. We
denote the search cost associated with having a coalition of n agents maintaining w simultaneous
interactions with seller agents over a search round by the function c(w, n).
Let  be the collection of all possible sets of opportunities in the environment in which the
agents reside. Given a set of known opportunities  known   the coalition needs to determine
its strategy (whether to terminate/resume the search and the number of parallel interactions in the
later case). Similar to the analysis suggested for the Sequential Cooperative Search (SCS) model
(Sarne & Kraus, 2005) we can reduce the large number of world states in which a coalition can
be, by adopting a representation of states through sets of effective known opportunities. For that
purpose we consider a function alloc :   O np that maps a given set of opportunities  to the
coalition members in A (i.e. an allocation) in a way that the aggregated agents utility when using
this allocation is maximized.5 In B2C markets the same opportunity may be allocated to more than
one agent, while in C2C markets each opportunity is restricted to only one agent. Given a coalition

/ to represent the allocation resulting from applying
A, we use alloc() = (~y1 , ...
yn ), ~yi  (  {0})
the function alloc over the set , where ~y i denotes the opportunity associated with agent a i (yi = 0/
denotes that no opportunity was allocated to agent a i ).
The computation method used by the function alloc is market-dependent. While in B2C markets
the function assigns each agent the opportunity that maximizes its utility, ~y j  = arg max~y U j (~y), j =
1, ..., n, in C2C markets alloc can be computed by solving a maximum weighted matching in a
bipartite graph (Avis & Lai, 1988). Specifically for a set of opportunities    found in the C2C
market we construct a graph G = (V1 ,V2 , E), where each vertex of V1 corresponds to an agent in A
and each vertex in V2 corresponds to an opportunity ~o  . An edge connects an agent a j in V1 and
an opportunity ~o in V2 (each member in the two groups has edges connecting it to all the members
4. Notice that ~o is noted as a vector since it assigns a specific value to each of the different attributes, terms and
conditions associated with a specific opportunity. For example, a specific opportunity to buy a calculator can be
represented by the vector ~o = (scienti f ic, 20$, small display, pocket, 1Y R warranty).
5. If there is more than one allocation that maximizes the overall coalition utility then the function alloc chooses one of
them according to a pre-defined order.

7

fiM ANISTERSKI , S ARNE , & K RAUS

of the other group). The weight of such an edge is the utility for agent a j from opportunity ~o, U j (~o).
Here alloc() = (~y1 , .., y~n ), where {(a1 , y~1 ), .., (an , y~n )} is a maximum weighted matching in G  . To
illustrate the computation used by the function alloc, we use the following example:
Example 1. Consider the following environment:
Environment 1. There are three agents, a 1 , a2 and a3 , searching for a product (e.g., memory chip)
characterized by two attributes, B 1 (e.g., quality) and B2 (e.g., store rating). Each attribute can have
either the value 1 or 2, with an equal probability of 1/2. This means that there are four possible
opportunities ~o1 = (1, 1) (both attributes values are equal to 1), ~o 2 = (1, 2), ~o3 = (2, 1), and ~o4 =
(2, 2). The utility function of agents a 1 , a2 and a3 are U1 (~o) = 9B1 + B2 , U2 (~o) = 4B1 + 5B2 , and
U3 (~o) = B1 + 10B2 , respectively. Table 1 summarizes the environments setting.
Opportunity
~o1
~o2
~o3
~o4

(Attribute1,
Attribute2)
(1,1)
(1,2)
(2,1)
(2,2)

Probability
Agent a1
10
11
19
20

1
4
1
4
1
4
1
4

Utility
Agent a2
9
14
13
18

Agent a3
11
21
12
22

Table 1: Agents utilities for the four opportunities in Environment 1
Assume the coalition has already interacted with 4 sellers, encountering two opportunities of
type ~o1 and two single opportunities of types ~o 3 and ~o4 . Here, the set of known opportunities is
known = {~o1 ,~o1 ,~o3 ,~o4 }.
We first calculate alloc(known ) for the coalition operating in the B2C market. In this market
we assume that sellers can supply any demanded volume. Therefore the allocation that maximizes
the coalitions overall utility is assigning each agent the opportunity that maximizes its utility over
known . Since opportunity ~o4 maximizes the utility of each of the agents, we obtain alloc( known ) =
(~o4 ,~o4 ,~o4 ).
In C2C markets the above allocation is impossible, since opportunity ~o 4 can be assigned only to
one of the agents (each seller offers a single item for sale). In this case the optimal allocation can
be calculated by solving a maximum matching problem resulting in the assignment alloc( known ) =
(~o3 ,~o1 ,~o4 ).
Given a set of known opportunities  known , we can use the function alloc and its consequent
allocation alloc(known ) to calculate the immediate utility of the coalition if it terminates the search
at the current time point. This utility, defined as the aggregated agents utility when each of the
agents is allocated according to allocation alloc( known ), is denoted by Vt (known ) (abbreviation for
Vterminate ) and can be calculated using:
n

Vt (known ) =

 U j (~y j )

j=1

/ = 0,  j.
where alloc(known ) = (~y1 , ...~yn ) and U j (0)
8

(1)

fiE NHANCING C OOPERATIVE S EARCH

WITH

C ONCURRENT I NTERACTIONS

Notice that up to this point, the world state space upon which the coalition defines its strategy
is defined by the set of opportunities  known known to the coalition. This space is potentially very
large. In order to reduce the strategys space, we introduce the concept of equivalence between
different sets of opportunities within the context of cooperative search. We consider two sets of
opportunities 0 , 00   to be equivalent (0  00 ), if the following hold: (a) Vt (00 ) = Vt (0 ); and
(b) Vt (0  ) = Vt (00  ) for any set of opportunities    that the coalition may encounter in the
future. For any two equivalent sets  0 , 00 , the coalition is indifferent to knowing the opportunities
in 0 or the opportunities in 00 . This is because any set of opportunities the coalition will encounter
in the future results in a similar utility, thus the coalitions overall utility will be the same in both
cases. Moreover, since the coalitions decisions are merely determined by its overall utility and
in both cases similar utilities are reached with similar probabilities, the coalition uses the same
search strategy (either terminates the search or uses the same number of parallel interactions in the
subsequent search stage) for both opportunities sets.
Notice that according to the definition above equivalent is a transitive relation ( 0  00 , 00 
000
  0  000 ). Moreover, 0  00 implies that (0  )  (00  ),   . Given an allocation
` = (~y1 , ..., y~n ) of a set , we use {`} to denote the set of opportunities that appear in `.
Similar to former cooperative search models (Sarne & Kraus, 2005; Manisterski, 2007) the
following theorem holds in our cooperative search model (and can be proven in a similar manner).
Theorem 1. Any set of opportunities  is equivalent to the set of opportunities returned by the
function alloc(). Formally stated:   {alloc()}.
Theorem 1 enables us to reduce the set of known opportunities that affect the coalitions strategy.
The immediate implication of the Theorem 1 is that the coalitions strategy is affected only by the
subset of known defined by {alloc(known )}. Thus the coalition does not need to keep all its known
opportunities. It can reduce its set of known opportunities with which it determines its strategy
to a subset, s. Given this result, we define state to be the set s of opportunities that are members
of {alloc(known )}. Formally, we can calculate the state s of a coalition A acquainted with a set
known of known opportunities by using the function s = state( known ) = {alloc(known )}. We use
SA to denote the set of all possible states of a coalition A. This definition significantly simplifies our
analysis and enables the coalition to calculate its optimal strategy exclusively based on the sets of
opportunities that are in SA . The following example illustrates the computation of a state.
Example 2. Consider the environment and the set of known opportunities described in Example
1. As computed in Example 1, the allocation that maximizes the coalitions overall utility in the
B2C market is alloc(known ) = (~o4 ,~o4 ,~o4 ). Thus the coalitions current state in the B2C market is
state(known ) = {~o4 }. As a result the coalition can ignore the other opportunities it encountered
{~o1 ,~o1 ,~o3 } and its strategy (terminate or resume the search and the number of parallel interactions
in the later case) is the same as its strategy when  known = {~o4 }. Similarly, the coalitions state in
the C2C market includes the opportunities in alloc( known ) thus state(known ) = {~o3 ,~o1 ,~o4 }.
The coalitions transition from one state to another during the search in the B2C and the C2C
markets can be described as a directed acyclic graph (DAG). The vertices of this graph present
all potential coalition states. A directed edge (s, s 0 ) connects two states, s and s0 , if there is an
opportunity ~o  O p that changes the current coalitions state from s to s 0 (i.e ~o, s.t state(s ~o) = s0 ).
To better understand the use of the DAG in these markets, we use the following two environments:
9

fiM ANISTERSKI , S ARNE , & K RAUS

Environment 2. There are two agents a 1 and a2 searching for a product (e.g., a computer mouse)
in a B2C market associated with 3 types of opportunities (e.g., 3 models): o~ 1 , o~2 and o~3 . Table 2
summarizes the environments setting.
Opportunity
~o1
~o2
~o3

Utility
Agent a1 Agent a2
5
10
10
5
20
21

Table 2: Agents utilities for the three opportunities in Environment 2
Environment 3. There are two agents a 1 and a2 searching for a product (e.g., a used book) in a
C2C market associated with two types of opportunities (e.g., English edition and American edition):
o~1 and o~2 . Table 3 summarizes the environments setting.
Opportunity
~o1
~o2

Utility
Agent a1 Agent a2
5
10
10
5

Table 3: Agents utilities for the two opportunities in Environment 3
Figure 1(a) and Figure 1(b) show the DAG of states for Environment 2 (the B2C market) and
Environment 3 (the C2C market) described below, respectively. Notice that it is possible to have
opportunities that do not change the coalitions current state (since these opportunities do not increase the coalitions overall utility). To simplify the graph we did not mark these opportunities. It
is notable that in the C2C market all sets that include up to n opportunities are feasible states (state
s is feasible if it belongs to SA , i.e. there is a set  such that state() = s). This does not hold in
the B2C market. For example, the set {~o 1 ,~o3 } is not a feasible state since ~o3 maximizes all agents
utility. Thus if the coalition encounters this opportunity all other opportunities can be ignored.
Any coalition A that reaches a state s along its search can change its state to s 0 only if there is a
sequence of directed edges from state s to state s 0 . The coalition can conduct parallel interactions,
thus can transition within a single search round to a state s 0 which is not directly connected to
state s. For example, in Environment 3, when in state s = {} the coalition can change its state to
s0 = {~o1 ,~o2 } after one search round (even though there is no a directed edge between them). This
can happen when the coalition conducts two or more parallel interactions in which it encounters
opportunities ~o1 and ~o2 . The transition to a new state suggests that in the new state the coalition has
a termination utility equal to or higher than the utility at its current state.
We define a strategy as a function x : S A  N, where x(s) = 0 if the agent decides to terminate
its search; otherwise x(s) is the number of parallel interactions the coalition should maintain next,
when in state s. We denote the optimal strategy by x  .
We define V (s, w) as the coalitions expected utility when using w parallel interactions when
in state s (assuming any search decision taken at a future state s 0 6= s will make use of the optimal
number of parallel interactions). The term V (s, 0) denotes the immediate utility obtained, if the
10

fiE NHANCING C OOPERATIVE S EARCH

{o1}

o1
{o1,o2}

o3

{}

o1

o2

o2
o3

C ONCURRENT I NTERACTIONS

o3

{}

o1

WITH

o2

{o1}

{o2}

{o2}

o1
o3

o1

o2

{o1,o1}
o2

{o3}

(a)

o2
{o2,o2}

{o1,o2}

o1

(b)

Figure 1: States Diagram of (a) Environment 2 (B2C market); (b) Environment 3 (C2C market).

coalition decides to terminate the search at state s, thus: V (s, 0) = Vt (s). The value w (w  N,
w  0) that maximizes the coalitions expected utility V (s, w), is equal to x  (s):
x (s) = arg max V (s, w)
w

(2)

The coalitions expected utility from this point onwards when using its optimal strategy, denoted
V  (s), can be expressed as:
V  (s) = maxwV (s, w) = V (s, x (s))

(3)

In order to formulate the appropriate equation for V (s, w) (from which x  (s) and V  (s) can be
derived) we make use of several additional notations and definitions. Consider a search round in
which the coalition interacts simultaneously with w seller agents, yielding a set  w = {~
o1 , ..., o~w },
~oi  O p of opportunities. Let w be the collection of all w-sized sets of opportunities that can be
produced in the environment in which the coalition operates. We denote by p w (w ) the probability
of encountering a specific set of opportunities  w , when maintaining w random interactions with
seller agents.
Similar to the basic cooperative search (Sarne & Kraus, 2005) we divide the w-sized opportunities space, w , into two sub-spaces, containing improving and non-improving w-sized sets of opportunities for the coalitions utility, respectively. Nevertheless, this definition needs to be extended
to fit the scenario of parallel search as follows. Given the number of simultaneous interactions,
w, and a state s, let simprovew be the collection of all w-size sets of opportunities,  w , that change
the coalitions current state (formally stated as:  simprovew = {w |w  w and state(s  w ) 6= s}).
We denote the complementary set of  simprovew by sstayw (the set that includes all w-size sets of
opportunities w that do not change the coalitions current state).
Therefore when the coalition encounters the set of opportunities  w , we can distinguish two
possible scenarios:
(1) w belongs to sstayw and the coalitions current state is still s. In this case the coalitions future
expected utility (i.e., from this point on) remains V (s, w). This is derived from the stationary nature 6
6. Stationary strategy is a strategy in which each player chooses the same moves in every structurally equivalent subgame
(Baron & Ferejohn, 1989).

11

fiM ANISTERSKI , S ARNE , & K RAUS

of the problem - if no better state has been reached, the search resumes using the same number of
parallel interactions w, yielding the same expected utility.
(2) w belongs to simprovew and the coalitions current state changes to s 0 = state(s  w ) 6= s. Since
we assume that the coalitions decision taken at a future state s 0 6= s will make use of the coalitions
optimal strategy x (s0 ), the coalitions expected utility can be expressed as V  (state(s  w )).
By using the above analysis, the expected utility when using w parallel interactions while in
state s, V (s, w), can now be expressed as (w > 0):
V (s, w) =c(w, n)+



pw (w )V
w simprovew



(s0 )+



pw (w )V (s, w)
w sstayw

(4)

where s0 is the coalitions new state after it encounters a set of opportunities  w , s0 = state(s  w ).
After applying some basic mathematical manipulations on the above term we obtain:
V (s, w) =

c(w, n) + w simprove pw (w )V  (s0 )
w

1  w sstayw pw (w )

(5)

Since 1  w sstayw pw (w ) = w simprove pw (w ) we obtain:
w

V (s, w) =

c(w, n) + w simprove pw (w )V  (s0 )
w

w simprovew pw (w )

(6)

Notice that in the case where no new better state can be reached, the denominator becomes zero, and
V (s, w) = . This is quite straightforward since the coalition maintains an endless costly search
(trying to reach a better state that actually does not exist). Here, inevitably the coalitions optimal
strategy is to terminate the search. This important characteristic is used later to design the proposed
algorithms for extracting the optimal search strategy.
At this point, one may attempt to compute the coalitions strategy x  by solving a set of equations
of types 1, 3 and 6. Nevertheless, this straightforward solution approach is accompanied by many
inherent complexities, derived from the structure of the equations. First, notice that Equation 6
is a recursive equation and one needs to know the optimal strategy taken in future states s 0 when
extracting the optimal strategy of a given state s. Second, the computation of V (s, w) in Equation
6 is exponential in the number of parallel interactions, w, used (affecting the number of sets in
simprovew , both in the denominator and numerator). Last, according to the above formulation, the
potential number of parallel interactions that may be used is not bounded 7 , thus reaching a local
maximum does not guarantee that a higher utility cannot be obtained. Therefore, an algorithmic
approach that can reduce the complexity of extracting the optimal cooperative parallel search is
favorable.

5. Algorithmic Approach
In this section we present a comprehensive analysis of the problem, emphasizing some unique
characteristics of the coalitions optimal strategy. These findings lead to an algorithm for computing
V (s, w) with a polynomial complexity in the number of potential interactions, w (which is the key
component for computing x (s) and V  (s)).
7. The number of opportunities is theoretically infinite due to the high arrival rate of new opportunities as derived from
such a dynamic environment.

12

fiE NHANCING C OOPERATIVE S EARCH

WITH

C ONCURRENT I NTERACTIONS

5.1 Reducing Calculation Complexity
Recall that when attempting to solve the problem as a set of equations (see section 4) the potential
number of parallel interactions that may be used is unbounded. Nevertheless, in order to extract
x (s) it is essential to supply the coalition with an upper bound, w smax , for the optimal number of
parallel interactions to be used when in state s. In order to overcome this difficulty and to suggest
an upper bound for wsmax we make use of the following notation. We use S s = (s1 , ...s|SA | ) to denote
the states constituting SA , sorted by their termination utilities Vt (s)8 , where s1 is the state with the
highest expected utility Vt (s) in SA .
The following proposition suggests an efficient upper bound for x  (s).
i
i
Proposition 1. For each state si an upper bound wsmax
, to x (si ) can be calculated using wsmax
= dwe,
where w is the solution to the following equation:

(7)

c(w, n) = Vt (s1 ) Vt (si )

i
The suggested bound is valid simply because for every value of w greater than w smax
the search cost
associated with the following immediate search round c(w, n) is greater than any possible future
improvement in the coalitions utility Vt (s1 ) Vt (si ) (since the maximum additional utility that the
coalition can gain is bounded by the difference between the coalitions overall maximum utility
Vt (s1 ) and its immediate utility from its current state Vt (si )). Later on, we show that the above upper
bound value is a byproduct of the main loop in our proposed algorithm, thus it does not even need
to be directly calculated.
Having an upper bound for x (s) is an important step towards a solution, however the calculation
of V (s, w) (from which x (s) can be derived) is still exponential in the number of parallel interactions
used, w. Our analysis, which is based on the restructuring of the different elements composing
V (s, w), allows us to bypass this complexity through the introduction of a finite algorithm with a
polynomial computational complexity in w that will inevitably identify the optimal strategy for the
coalition.
In order to reduce the complexity of computing the coalitions best strategy, we make use of the
following notations and definitions:

 We use pstay (s, w) to denote the probability the coalition will remain in the same state s after
conducting w parallel interactions. This can be calculated as the probability of none of the
encountered w opportunities changing the coalitions state:
pstay (s, w) = (pstay (s, 1)) = (
w



p(~o))w

(8)

{~o}sstay1

The term 1(pstay (s, 1))w can now be used as a better structured representation of the element
w simprovew pw (w ) in Equation 6.
 We use V new (s, k) to denote the coalitions expected utility obtained from potentially reaching
new states (e.g. different than s) after maintaining k parallel interactions, while using the
optimal strategy x (s0 ) for each new future state s0 . The term V new (s, k) does not take into
account the cost associated with the current k interactions. However it does consider the
8. If there are several states with equal utility they are sorted according to a pre-defined order.

13

fiM ANISTERSKI , S ARNE , & K RAUS

search costs associated with any further search stages, originating in new states. Notice that
V new (s, k) is equal to zero if the coalition remains in state s after k interactions. The term
V new (s, k) can be expressed as:
(
)
 (state(s   )) k > 0
s
p
(
)V

k
k improve k k
k
V new (s, k) =
.
(9)
0
k=0
Note that V new (s, w) is actually one of the elements in Equation 6. Therefore, Equation 6 can
now be formulated as (w > 0):
V (s, w) =

c(w, n) +V new (s, w)
1  pstay (s, 1)w

(10)

The calculation of V new (s, w) using Equation 9 is still exponential in the number of the parallel
interactions. In order to efficiently compute V new (s, w) in Equation 10 we consider the w simultaneous interactions as w sequential interactions, associated with no search costs. This fully complies
with the definition of V new (s, w) as given above (as the cost of the w interactions is already considered). The justification for the above representation method is given in the Lemma 1 which follows
directly from Theorem 1.
Lemma 1. A new state reached by obtaining a new set of opportunities is equivalent to a state
reached by sequentially obtaining pairwise disjoint subsets of this set. Formally stated, given a set
/ i 6= j, 1w1  ...  rwr = w and a
w and any number of subsets 1w1 , ..., rwr , iwi  w , iwi  wj j = 0,
state s, then the following holds:
r
state(s, w )  state(state(...state(state(s  1w1 )  2w2 )...  r1
wr1 )  wr )

(11)

Proof. We begin by proving the following supporting lemma:
Lemma 2. Let 0 , 00   be two sets of opportunities. If  0  00 then   , state(0  ) 
state(00  ).
Proof. Since 0  00 , then from the definition of the equivalence relation it follows that  0   00 
. From Theorem 1 and the state definition it follows that  0    {alloc(0  )} = state(0  )
and 00    {alloc(00  )} = state(00  ). From the transitive characteristic of the equivalence
relation it follows that state(0  )  state(00  ).
Let s be a state and let w be a set of opportunities. We prove Lemma 1 by induction on the
number of disjoint sets r. For r = 2, let  0w0 and 00w00 be any sets that satisfy 0w0  00w00 = w and
/ From Theorem 1 and the state definition we obtain:
0w0  00w00 = 0.
s  0w0  {alloc(s  0w0 )} = state(s  0w0 )

(12)

From 12 and Lemma 2 it follows that
state(s  w ) = state(s  0w0  00w00 )  state(state(s, 0w0 )  00w00 )

(13)

We assume that for any number of disjoint sets r  M and r > 2,  1w1 , ..., rwr , iwi  w , iwi  wj j =
/ i 6= j, 1w1  ...  rwr = w Equation 11 holds and we prove that Equation 11 holds for r=M+1.
0,
14

fiE NHANCING C OOPERATIVE S EARCH

WITH

C ONCURRENT I NTERACTIONS

Given w and sets 1w1 , ..., rwr , we can decompose w to two disjoint sets wwr and rwr , where
wwr = w \ rwr . Therefore as we proved for r = 2 the following holds:
state(s  w )  state(state(s, wwr )  rwr ).

(14)

In addition we can decompose the set  wwr to r  1  M sets 1w1 , ..., r1
wr1 . Therefore using the
induction assumption:
state(s  wwr )  state(...state(state(s,  1w1 )  2w2 )...  r1
wr1 )

(15)

From Lemma 2 and 15 we obtain:
r
state(state(s  wwr )  rwr )  state(state(...state(state(s   1w1 )  2w2 )...  r1
wr1 )  wr )

(16)

From 14, 16 and the transitive characteristic of the equivalence relation it follows that:
r
state(s  w )  state(state(...state(state(s   1w1 )  2w2 )...  r1
wr1 )  wr )
A specific case of the above Lemma 1 is when each subset consists of a single opportunity. Thus
the calculation of V new (s, k) can recursively rely on the values V new (s0 , k  1), where s0 represents
any of the new states reached after obtaining one additional opportunity from O p . Therefore in
order to compute V new (s, k), we merely consider the expected utility after conducting one interaction
from the planned k interactions. Here, with a probability of p stay (s, 1) the coalition remains in the
same state s, where the expected utility (having k  1 additional interactions to go) is V new (s, k  1)
(recall that V new (s, 0) = 0 according to Equation 9). Otherwise, if a new state s 0 is reached after
a single interaction, then there is the possibility of reaching further new states in the remaining
k  1 interactions (taking these states utility into consideration by the term V new (s0 , k  1)) or with a
probability of pstay (s0 , k  1) remaining in the new state s0 even after the additional k  1 interactions
(in which case the utility is the one obtained by resuming the search from this state and on using the
optimal strategy, V  (s0 )). The above description is encapsulated in the following recursive equation:
V

new

(s, k) =

(

pstay (s, 1)V new (s, k  1) + {~o}simprove p(~o)(V new (s0 , k  1) + pstay(s0 , k  1)V  (s0 )) k > 0
1
0
k=0
(17)

where s0 = state(s ~o ). Notice that when repeating the calculation using the above equation with
an increasing k value starting from k = 1, each iteration includes only a single unknown parameter,
(V new (s, k)). In addition, the values V new (s0 , k  1) and V  (s0 ) do not depend on values that were
computed for state s (s0 precedes s in the set Ss ).
5.2 The Algorithm for Computing the Coalitions Optimal Strategy
The above analysis leads to an algorithm for computing the coalitions optimal strategy (Algorithm
1). This algorithm computes the coalitions strategy and its expected utility for all possible states
init
SA . Its execution time is polynomial in w init
max (for convenience we use wmax to denote the bound for
the number of parallel interactions w, when the coalition begins its search, i.e., coalitions state is
s = sinit = {}).
Notice that at each stage of its execution, algorithm 1 reuses components computed in earlier
stages. For example, V new (s, w) appears both in the computation of V (s, w) (using Equation 10), in
the computation of V new (s0 , w + 1) (using Equation 17, when ~o0  O p such that state(s0 ~o0 ) = s)
15

)

fiM ANISTERSKI , S ARNE , & K RAUS

Algorithm 1 An algorithm for computing the optimal search strategy x 
Input: O p - set of potential opportunity types in the market; p(~o) - opportunity types probability
function; n - coalitions size; U j (), j = 1, ..., n - coalition members utility functions; c(w, n) search cost function; SA - set of all possible states of a coalition A.
Output: x (s) s  SA - the coalitions optimal strategy.
1: Build the set of ordered states S s
2: for i=1 to |Ss | do
3:
Set V (si , 0) = Vt (si ) using Equation 1
4:
Set V new (si , 0) = 0
5:
Set w = 1
6:
while c(w, n)  (Vt (s1 ) Vt (sinit )) do
7:
Compute V new (si , w) using Equation 17
8:
Compute V (si , w) using Equation 10
9:
w++;
10:
end while
11:
Set x (si ) = arg maxw0 (0,...,w1) V (si , w0 ), V  (si ) = V (si , x (si ))
12: end for
13: Return (x (si ), i = 1, ..., s|SA | )
and in the computation of V new (s00 , w + 1) (using Equation 17, when ~o00  O p such that state(s00 
~o00 ) = s). Storing the result for each such computational element in the memory, for the purpose of
reusing it at later stages, significantly improves the efficiency of the algorithm. This is accomplished
by using two matrixes V and V new of size |SA |  (winit
max + 1), in which the corresponding V (s, w) and
V new (s, w) values are stored for each pair (s, w), representing a state and the correlated result of each
number of parallel interactions that is used for the calculations. Additionally, we store x  and V 
values by using two arrays of size |S A | for reusing x (s0 ) and V  (s) in the computation of V new (s, w).
Theorem 2. Algorithm 1 returns the optimal strategy of the coalition in a polynomial time of w init
max .
Proof. In our proof, we assume that we use the matrices V and V new for storing the values computed along the execution of the algorithm as described above. In order to build the set of ordered
states Ss , the algorithm needs to compute the coalitions termination utility for each of the states
in SA , according to equation 1. Computing the coalitions termination utility for a given state
takes O(|A|3 ) in C2C markets9 and O(|A|2 ) in B2C markets10 . The coalitions termination utility is calculated for each state s  S A . Thus the overall complexity of computing the coalitions
termination utility for all states is O(|S A ||A|2 ) and O(|SA ||A|3 ) in B2C and C2C markets, respectively (the sets Ss and SA have the same size). Sorting the members in S A in order to build Ss takes
O(|SA | log |SA |). The computation of step 3 takes a constant time assuming that we stored for each
9. As mentioned previously, computing the coalitions termination utility in C2C markets is equivalent to finding a
maximum matching in a weighted bipartite graph. Finding maximum matching in a weighted bipartite graph can be
done in O(n(n log n + m)), where n is the number of vertices and m is the number of edges (Wang, Makedon, & Ford,
2004). Since in our graph each agent is connected to all opportunities, and the number of opportunities in a given
state is bounded by the number of agents, the process of computing the coalitions termination utility takes O(|A|3 ).
10. As mentioned previously, computing the coalitions termination utility in B2C markets can be done by finding an
opportunity for each agent in the coalition that maximizes its utility. As the number of opportunities in a given state
is bounded by the number of agents, computing the coalitions termination utility takes O(|A|2 ).

16

fiE NHANCING C OOPERATIVE S EARCH

WITH

C ONCURRENT I NTERACTIONS

state its coalitions termination utility when S s was built. Steps 3-5 are performed for all states,
thus, the overall complexity is O(|S A |). The loop in step 6 is performed at most w init
max times. This
init
is because when reaching a value w = w max + 1 in step 6, the loop condition no longer holds (i.e.,
c(w, n) > (Vt (s1 ) Vt (sinit ))). Notice that the first elements calculated are for state s 1 (i.e. the one
with the maximum utility) according to the loop in step 2. Here, as explained in section 4, the expected utility from any strategy by which the search is resumed (i.e., using w  1) is V (s, w) = 
1
(formally, since simprove
= 0/ w then pstay (s1 , w) = 1 and V new (s1 , w) = 0 w  (1, .., winit
max ), thus,
w
init
V (s1 , w) =  w  (1, .., wmax )). Therefore, the optimal strategy in state s 1 is to terminate the
search, i.e. x (s1 ) = 0 and V (s1 , 0) = Vt (s1 ). For any other state, s, when reaching step 7, the
algorithm has already computed both V  (s0 ) and V new (s0 , w) w  (0, ..winit
max ) for each potential future new state s0 originating from state s. This is due to the fact that all future states of state s
appear before s in the set of ordered states S s (either because of a higher utility, or equal utility
yet sorted before s according to the function alloc). In addition, for any number of parallel interactions w  1, the algorithm has already computed V new (s, w  1). Therefore, the computation
time in step 7 sums up to an order of |O p | components that have already been computed. Then,
when reaching step 8, the value of V new (which is part of the numerator in equation 10) has been
already computed. Therefore, if we ignore, for now, the time of computing the coalitions new
state s0 when it encounters opportunity ~o given it is in a state s and the time of computing p stay
values, the computation of step 7 takes O(|O p |) and the computation of step 8 takes a constant
time. Since these steps are performed at most w init
max |SA | times, the overall complexity of computing these steps is O(|O p |winit
|S
|).
In
step
11,
the
algorithm chooses the maximum value among
A
max
winit
values
that
have
already
been
computed.
Since
this step is performed for each state s  S s ,
max
the overall complexity of performing this step is O(w init
max |SA |). The complexity of computing the
coalitions new state s0 when it encounters opportunity ~o given that its current state is s depends
on the market type. In B2C markets, the complexity is O(|A|) if we store for each state s also its
alloc(s) value (we compute this value when we compute the coalitions termination utility). In
C2C markets, computing the new state takes O(|A| 3 )11 . We can store these values using a matrix S f uture of size |SA |  |O p | in which the new state s0 = state(s ~o) is stored for each pair (s,~o).
Therefore, the overall complexity of computing future states for all states is O(|S A ||A||O p |) in B2C
markets, and O(|SA ||A|3 |O p |) in C2C markets. Computing pstay (s, w) can be done in a constant
time based on pstay (s, w  1). Moreover, we can store these values using a matrix Pstay of size
stay (s, w) is stored for each pair (s, w). Therefore, the total com|SAg |  winit
max in which the value p
plexity of computing pstay values is O(|SA |  winit
max ). Given this analysis, the overall complexity
of the algorithm is O(|SA ||A|2 + |SA | log |SA | + |SA ||O p |winit
max + |SA ||A||O p |) in B2C markets, and
O(|SA | log |SA | + |SA ||A|3 |O p | + |SA ||O p |winit
)
in
C2C
markets.
Hence the algorithm is polynomial
max
init
in wmax .

Note the algorithm uses winit
max as an upper bound for the optimal number of interactions x (si ),
i
i = 1, ..., |Ss | . This bound is valid since according to Equation 7 the value of w smax
increases
as Vt (si ) decreases and the coalitions termination utility reaches its minimum in the initial state
(Vt (sinit ) = Vt ({}) = 0). This suggests a further significant improvement of the above algorithm.
si
Instead of using winit
max for all states, we calculate a specific upper bound, w max , for each state si in
step 6, according to Equation 7. At some point this may require re-computation of V (s i , w) for w

11. Computing the coalitions new state in C2C markets is done by finding a maximum matching in a weighted bipartite
graph (see footnote 10 for complexity analysis).

17

fiM ANISTERSKI , S ARNE , & K RAUS

values that were not used in previous execution stages of the algorithm; however, the total number
of calculations for each state si in many cases will significantly decrease 12 .

6. Properties of the Parallel Cooperative Search (PCS) Model
Prior to extending the above analysis to scenarios where the coalition faces a finite decision horizon,
we emphasize some interested unique characteristics of the parallel cooperative search derived from
the general analysis. First we wish to emphasize that the PCS model is a generalization of both the
Single Agent Parallel Search (SAPS) and the Sequential Cooperative Search (SCS) model as stated
in the following proposition.
Proposition 2. The cooperative parallel search is a generalization of both the single agent parallel
search and the cooperative sequential search models 13 .
Proof. From the analysis given in section 4 it is clear that Algorithm 1 results in the same strategy
used in the cooperative sequential search and in the single agents parallel search, for the specific
i
cases in which si wsmax
= 1 parallel interactions or n = 1 agents, respectively. 14
Furthermore, we emphasize that the coalitions expected utility never decreases when using our
proposed mechanism in comparison to the sequential cooperative search. Indeed in the case where
maintaining more than a single interaction is not a favorable strategy Algorithm 1 results in one
interaction at a time strategy, as used in the sequential cooperative search. Obviously if using the
parallel interaction does not decrease the search cost (i.e. the search cost of conducting any number
of interactions sequentially is equal or smaller than conducting the interactions in parallel), then the
sequential cooperative search is the dominating strategy as stated in the next proposition.
Proposition 3. If the cost of conducting any number of parallel interactions is equal or higher than
the cost of conducting these interactions sequentially (i.e w, w  c(1, n)  c(w, n)) then the use of
the parallel search can at most match the expected utility of the sequential cooperative search.
Proof. Consider an optimal cooperative parallel search strategy x par . Obviously there is a state
s  SA satisfying: (1) The coalitions strategy in s is to conduct more than one interaction, x par (s) > 1
(2) For any future state s0 of s the coalition conducts at most one interaction (or terminates search),
i.e., xpar (s0 )  1. If we replace the parallel search strategy when in state s with the sequential
search from this state on then the expected utility can only increase. This is because in the worst
case scenario the coalition will execute w interactions incurring at most the same cost as in x par ,
ending up with the same expected termination utility. For any other case, whenever the coalition
reaches state s0 where its strategy according to xpar is to terminate its search prior to completing w
interactions, the expected utility is at least the expected utility achieved by using x par (otherwise
the coalitions strategy in s0 according to xpar will be to resume the search) . Therefore the use of
the new strategy can only improve the expected utility. Using backward induction we can apply
the same logic to all former states for which x par implies more than one interaction in parallel.
12. The extent of the achieved improvement is highly correlated with the specific environment in which the coalition
operates.
13. Notice that in this context the single agent sequential search is a specific case of the single agent parallel search,
where the agent interacts with a single seller agent at a time.
14. Assuming similar cost structures in all three models.

18

fiE NHANCING C OOPERATIVE S EARCH

WITH

C ONCURRENT I NTERACTIONS

Consequently, we obtain that the sequential strategy results in at least as large an expected utility as
xpar .
Next we consider the case where the agents are fully homogeneous (in terms of their utility
functions) and operate in B2C markets. Here, we can prove that the optimal strategy of the coalition
is stationary (i.e. does not change according to the current state). Furthermore, we show that
the stationary strategy characteristic holds not only for fully homogeneous agents but also when
the agents have correlated preferences. Two agents a i and a j have correlated preferences when
agent ai prefers ~o0 over ~o00 if and only if agent a j prefers opportunity ~o0 over ~o00 (i.e ~o0 ,~o00  O p ,
U j (~o0 )  U j (~o00 )  Ui (~o0 )  Ui (~o00 )) and vice versa.
Theorem 3. In the B2C market, if all the agents have correlated preferences, the search strategy
is based on a reservation value15 Urv . In such a scenario the number of parallel interactions the
coalition uses according to the optimal strategy (in case it resumes the search) is fixed during the
search (s  SA such that Vt (s) < Urv exists x (s) = w f ixed ).
Proof. In the above scenario, the search problem is equivalent to the problem of a single agent
with a utility function equal to the sum of the different agents utilities, U = U 1 +U2 + ... +Un . In
this case after terminating the search, all of the coalition members are always assigned the same
opportunity. Therefore, the search strategy is reservation value based, and the search is terminated
upon reaching such an opportunity with a utility exceeding a pre-set reservation value U rv . Since
the probability of reaching such an opportunity does not depend on the coalitions state, the number
of parallel interactions used throughout the search is fixed.
Nevertheless Theorem 3 does not hold in the C2C market even when the agents are homogeneous as the next lemma states.
Lemma 3. In the C2C market even for fully homogeneous agents (all agents have the same utility
functions) the search strategy is not always stationary and the optimal number of parallel interactions can be changed during the search according to the coalitions current state.
Proof. In order to prove this lemma, we consider a coalition that operates in a C2C market in the
following environment:
Environment 4. Assume a coalition of two agents, a 1 and a2 , searching for a product (e.g., a used
book) characterized by one attribute (e.g., indicating whether the book is signed by the author) with
two possible values, 1 (signed) and 2 (not signed). This results in two opportunity types, o~ 1 = (1)
and o~2 = (2). Assume opportunity o~1 is rare and can be found with a probability of 1/100, while
opportunity o~2 is very common (a probability of 99/100). Both agents utilities are 100 for the rare
opportunity and 1 for the common opportunity. Consider that the cost of conducting w parallel
interactions is equal to the cost of conducting w interactions sequentially, c(w, n) = wc(1, n), where
the cost of conducting a single interaction is c(1, n) = 0.1 + 0.05n, (n > 1). Table 4 summarizes
environments setting.
We consider the two following states: (1) The coalition starts its search (the coalitions current
state is its initial state s = {}) (2) The coalition encounters opportunity o~ 1 (the coalitions current
15. A reservation value is a value that the coalition sets a-priori and terminates the search if reached an opportunity
associated with a utility greater than or equal to this value (Sarne & Kraus, 2005).

19

fiM ANISTERSKI , S ARNE , & K RAUS

Opportunity

Attribute

Probability

~o1
~o2

signed
not signed

0.01
0.99

Utility
Agent a1 Agent a2
100
100
1
1

Table 4: Agents utilities for the four opportunities in Environment 4
state is s0 = {~
o1 }).
In order for the coalition to terminate its search all its members should exploit opportunity o~ 1 (otherwise the expected utility from resuming the search exceeds the search cost). Thus in order for the
coalition to terminate the search in the former case (the coalitions state is s = {}) it must encounter
opportunity o~1 twice and in the latter case (the coalitions state is s 0 = {~
o1 }) it has to encounter
opportunity o~1 once. Thus we expect that the number of optimal interactions, where the coalitions
state is s, to be different from the number of optimal interactions, where its state is s 0 . Indeed
the computation of the coalitions optimal number of interactions (using Algorithm 1) results in
x (s) = 299 and x (s0 ) = 161.

7. Finite Decision Horizon
An important variant of the cooperative parallel search is the one where the agents forming the
coalition are restricted by a deadline for finalizing their search. For example, consider a coalition
that searches for costumes for its members to wear to a costume party. In this case the coalition
can not search for the costumes forever since the customs have a value for the coalition members
only if purchased prior to the party. This type of environment is often referred to in search theory as
a finite decision horizon environment. Specifically, within the context of this paper we consider
finite decision horizon environments where the coalition as a whole should terminate its search prior
to or within the next r search rounds. Note that in the sequential search this definition is equivalent
to the definition stating that the coalition can conduct at most r additional interactions.
In addition to the general advantages recognized in the parallel cooperative search, in finite decision horizon environments the model can enable the coalition to conduct more than the maximum
r interactions facilitated by the sequential model (whenever necessary). Moreover, in some environments where the coalition cannot improve its performance by interacting with several sellers in
parallel (e.g., in cases such as those described in Proposition 3), the introduction of a finite decision
horizon constraint creates a strong incentive to interact with more than a single seller at a time. This
is illustrated in the following example:
Example 3. Consider a coalition that operates in a B2C market, having the same characteristics
as in Environment 4, which was introduced in section 6. In this environment the coalitions optimal
strategy when having an infinite decision horizon is to search sequentially (see Proposition 3). Nevertheless, for various finite decision horizon values the coalition can benefit from using the parallel
search technique. The most trivial example in this case is when the coalition has to terminate its
search within the next search round. In this case, if the coalition conducts several interactions in
the next round, its probability to encounter opportunity o~1 increases in comparison to the case in
which it conducts only a single search. For example if the coalition conducts 100 interactions it
has a probability of 0.99100 to encounter only opportunity o~2 during its search and a probability of
20

fiE NHANCING C OOPERATIVE S EARCH

WITH

C ONCURRENT I NTERACTIONS

1  0.99100 to encounter opportunity o~1 during its search and its expected utility can be expressed
as: (1  0.99100 )  Vt ({~
o1 }) + 0.99100Vt ({~
o2 })  c(100, 2) = (1  0.99100 )  200 + (0.99)100  2 
0.2  100 = 107.52. This value is significantly greater than its expected utility when using the sequential cooperative search which is 0.01 Vt ({~
o1 }) + 0.99Vt ({~
o2 })  c(1, 2) = 3.78.
In order to compute the coalitions strategy in a finite decision horizon model variant we extend
our definitions to include the number of remaining search rounds, r. We use V (s, w, r) to denote the
coalitions expected utility, when it conducts w interactions in the next round and has to terminate
its search within the next r rounds. The term V (s, 0, r) denotes the immediate utility obtained, if the
coalition decides to terminate the search at state s, thus: V (s, 0, r) = Vt (s). We denote by x (s, r) and
V  (s, r) the coalitions optimal strategy and its expected utility (when using its optimal strategy) at
state s, if it should terminate its search within the next r rounds.
The V  (s, r) and x (s, r) calculation is similar to the infinite decision horizon case, except that
whenever the coalition reaches its decision deadline it inevitably terminates its search. Namely, if
r = 0, then x (s, 0) = 0 and the coalitions expected utility V  (s, 0) is equal to Vt (s).

arg maxw V (s, w, r) r > 0
(18)
x (s, r) =
0
r=0
(19)

V  (s, r) = V (s, x (s), r)

We begin by computing V (s, w, r), when r > 0 (since V (s, w, 0) = 0, w). Here, we can apply the
same analysis methodology used in section 4. However, the expected utility of the coalition when
resuming its search following the current search stage should reflect the change in the decision
horizon. Therefore, instead of using Equation 4, we should use the following modification:



V (s, w, r) = c(w, n) +

w simprovew

pw (w )V  (s0 , r  1) + pstay (s, w)V  (s, r  1),

w > 0, r > 0
(20)

where = state(s  w ).
The computation of Equation 20 is exponential in the number of parallel interactions. In order
to reduce the complexity of V(s,w,r) for r > 0 we consider the two following cases:
s0

 w = 1: the coalition encounters a single opportunity thus Equation 20 can be expressed as:
V (s, 1, r) = c(1, n) +



{~o}simprove

p(~o)V  (state(s ~o ), r  1) +



p(~o)V  (s, r  1),

r > 0

{~o}sstay1

1

(21)
In this case, no additional computational complexity is introduced, in comparison to the SCS
model (Sarne & Kraus, 2005).
 w > 1: here we attempt to find a computational means for extracting the value of the term
w simprovew V  (s0 , r  1) + pstay (s, w)V  (s, r  1) (in Equation 20) in complexity polynomial
in w. This expression denotes the coalitions expected utility when it conducts w interactions
without considering the cost associated with conducting the w interactions. In order to efficiently compute this value we consider the coalitions expected utility after conducting one of
its w interactions and obtaining opportunity ~o. In this case, the coalitions expected utility is
21

fiM ANISTERSKI , S ARNE , & K RAUS

equal to the coalitions expected utility when starting from state state(s ~o) and conducting
w  1 interactions plus a cost equivalent to the cost of maintaining these w  1 interactions,
c(w  1, n) (these are added since they were already subtracted from the expected utility in
Equation 20 and V (state(s ~o), w  1, r) subtracts them again):
V (s, w, r) = c(w, n) +



p(~o)(V (state(s ~o), w  1, r) + c(w  1, n)),

~oO p

w > 1, r > 0
(22)

The sum in Equation 22 can be represented as the sum of the expected utility over the opportunities that change the coalitions current state and the sum over the opportunities that do not change
the coalitions current state:
V (s, w, r) = c(w, n)+



p(~o)V (s0 , w1, r)+

{~o}simprove
1

p(~o)V (s, w1, r)+c(w1, n),

{~o}sstay1

w > 1, r > 0
(23)

where = state(s ~o).
Equations 23 and 21 facilitate the calculation of V (s, w, r) in a polynomial time of w. In order
to find the coalitions optimal strategy, the efficient bound for the optimal number of interactions
given in Equation 7 is also valid for the finite decision horizon variant.
The above analysis leads to Algorithm 2 which is a modification of Algorithm 1. This algorithm
computes the coalitions strategy and expected utility for all states in S A . In order to compute
V  (s, r), this algorithm uses backward induction. It starts by computing V  (si , 0) for all states.
Here, the coalition is forced to terminate its search thus the algorithm sets the expected utility to be
equal to the termination utility: V  (si , 0) = Vt (si ). Then, the algorithm computes V (s i , r, w) for r > 0
using Equation 21 and 23 starting from w = 1 till c(w, n)  Vt (s1 ) Vt (sinit ). The algorithm sets the
coalitions optimal strategy to be the number of interactions w that maximizes V (s i , r, w).
Similar to the infinite decision horizon case, Algorithm 2 reuses components computed in earlier
stages in each stage of its execution. Nevertheless, in this case in order to store the results in the
memory for reuse later, we need a three dimensional matrix V of size |S A |  (winit
max + 1)  (rmax + 1)
where rmax is the initial decision horizon. The corresponding V (s, w, r) values are stored for each
triplet (s, w, r), representing a coalitions state, the number of simultaneous interactions used and
the limit on the number of rounds that the coalition can conduct. Additionally, we store V  (s, r)
and x (s, r) values in two matrixes V and X of size |S A |  (rmax + 1) for reusing x (s0 , r  1) and
V  (s0 , r  1) in the computation of V (s, w, r).
In the following theorem we prove that algorithm 2 returns the coalitions optimal strategy and
its expected utility, in a polynomial time of w init
max (the bound on the number of parallel interactions
computed using Equation 7) and rmax .
s0

Theorem 4. Algorithm 2 returns the optimal strategy of the coalition and its expected utility from
following this strategy, where it should terminate its search within the next r max rounds, in a polynomial time of winit
max and rmax .
Proof. In our proof, we assume the use of matrices for storing the computed values as described
above. The process of extracting Ss can be done exactly as in the finite decision horizon. Thus, step
1 is of complexity O(|SA ||A|2 + |SA | log |SA |) and O(|SA ||A|3 + |SA | log |SA |) for B2C markets, and in
22

fiE NHANCING C OOPERATIVE S EARCH

WITH

C ONCURRENT I NTERACTIONS

Algorithm 2 An algorithm for computing the optimal search strategy x  when the coalition should
terminate its search within the next r max rounds
Input: O p - set of potential opportunity types in the market; p(~o) - opportunity types probability
function; n - coalitions size; U j (), j = 1, ..., n - coalition members utility functions; r max - the
maximum number of search rounds until terminating the search (the decision horizon); c(w, n)
- search cost function; SA - set of all possible states of a coalition A.
Output: x (s, r),V  (s, r) s  Ss , 0  r  rmax - the coalitions optimal strategy and its expected
utility.
1: Build the set of ordered states S s
2: for i = 1 to |Ss | do
3:
Set x (si , 0) = 0
4:
Set V  (si , 0) = Vt (si ) using Equation 1
5: end for
6: for r = 1 to rmax do
7:
for i=1 to |SA | do
8:
Set V (si , 0, r) = Vt (si ) using Equation 1
9:
Compute V (si , 1, r) using Equation 21
10:
Set w = 2
11:
while c(w, n)  (Vt (s1 ) Vt (sinit )) do
12:
Compute V (si , w, r) using Equation 23
13:
w++;
14:
end while
15:
Set x (si , r) = arg maxw0 (0,...,w1) V (si , w0 , r), V  (si , r) = V (si , x (si , r), r)
16:
end for
17: end for
18: Return (x (si , r), i = 1, ..., s|SA | , r = 0, ..., rmax )
C2C markets, respectively. The computation in steps 3 and 4 takes a constant time, assuming that we
stored for each state its coalitions termination utility when we built S s . These steps are performed
for all states, thus, the overall complexity of computing these steps throughout the loop is O(|S A |).
Again, step 8 can be performed in a constant time, assuming the coalitions termination utility is
stored for each state. For any state, s, and for any limit on the number of search rounds r > 0 when
reaching step 9 of the algorithm, the algorithm has already computed V  (s0 , r  1) for each potential
future new state s0 originating from state s. Therefore, the computation in step 9 is simply the summing of order of |O p | components that have already been computed. Consequently, if we ignore
the time of computing the coalitions new states s 0 (we will add the time for computing these values
later), the computation of this step takes O(|O p |). Since steps 8-9 are performed rmax |SA | times,
the overall complexity of computing these steps (when ignoring the time of computing the new
states) is O(|O p |rmax |SA |). Notice that when w = winit
max + 1 we obtain c(w, n) > (Vt (s1 ) Vt (sinit )).
Thus, the loop in step 11 is performed at most w init
max times. For any w > 0 when reaching step 12,
0
the algorithm has already computed V (s , w  1, r) for each potential future new state s 0 originating
from state s. Therefore, the computation in step 12 takes O(|O p |) when ignoring the time of computing the new states. Since this step is performed r max |SA |winit
max times, the overall complexity of
computing this step (when ignoring the time of computing the new states) is O(|O p |rmax |SA |winit
max ).
23

fiM ANISTERSKI , S ARNE , & K RAUS

In step 15, the coalition chooses the maximum value among the w init
max values that have already been
computed. Since this step is performed for each state s  S s , and for each r  {0, ..., rmax }, the
overall complexity of performing this step is O(w init
max |SA |rmax ). Computing the coalitions new state
s0 when it encounters opportunity ~o given that its current state is s can be done as described in the
infinite decision horizon case. Thus, the overall complexity of computing future states for all states
is O(|SA ||A||O p |) in B2C markets, and O(|SA ||A|3 |O p |) in C2C markets. Given this analysis, the
2
overall complexity of the algorithm is O(|S A | log |SA | + |SA ||O p |winit
max rmax + |SA ||A| + |SA ||A||O p |)
3
in B2C markets, and O(|SA | log |SA | + |SA ||O p |winit
max rmax + |SA ||A| |O p |) in C2C markets. Hence the
16
init
algorithm is polynomial in wmax and rmax .
Similar to the infinite decision horizon a significant improvement in the above algorithms peri , for each state, s
formance can be achieved by calculating and using the specific upper bound, w smax
i
in step 11, according to Equation 7.
In the following section we illustrate some properties of the PCS model both for the infinite and
finite decision horizons model variants.

8. Illustrative Examples of the PCS Model
With an efficient means for calculating the coalitions optimal strategy when using parallel cooperative search, we can now demonstrate some specific properties of this search method. As a reference
we use the Single Agents Parallel Search (SAPS), the Single Agents Sequential Search (SASS)
and the Sequential Cooperative Search (SCS) models.
8.1 Infinite Decision Horizon
We begin by illustrating the parallel cooperative search with an infinite decision horizon. First we
demonstrate the influence of the level of heterogeneity in the utility functions of the different coalition members on the coalitions performance (in terms of the expected utility achieved). In order
to demonstrate this we use the following environment, which was used originally for evaluating the
performance of the SCS model (Sarne & Kraus, 2005):
Environment 5. A coalition of two agents, a 1 and a2 , searching for opportunities defined by two
attributes, B1 (e.g., quality) and B2 (e.g., store rating), where each attribute can have a value from
the discrete range of (1, ..., 5) with an equal probability for each of the values. The agents are
heterogeneous in respect to the way they evaluate each potential opportunity. Agent a 1 is associated with the utility function U1 (~o) = B1 + B2 , while agent a2 is associated with the utility function
U2 (~o) = 2(1  )B1 + 2B2 . Thus, the parameter  indicates the level of the agents similarity/heterogeneity. The search cost of any single agent for conducting a single interaction is c base for
w parallel interactions (w > 1): c(w, 1) = c base + c parallel  (w  1). The search cost of a coalition
of size n is c(w, n) = c(w, 1)ln(n + 1), (n > 1).
Figure 2 depicts the expected utility per agent when using the different search methods 17 in the
C2C market (left hand-side) and the B2C market (right hand-side) as a parameter of the similarity
level, , between the utility functions of the agents constituting the coalition.

16. The algorithm uses winit
max as an upper bound for the optimal number of interactions x (si ), i = 1, ..., |SA |. This bound
si
is valid since according to Equation 7 the value of wmax increases as Vt (si ) decreases and the coalitions termination
utility reaches its minimum in the initial state (Vt ({}) = 0).
17. For the cooperative models the average expected utility per coalition member measure is used.

24

fiE NHANCING C OOPERATIVE S EARCH

utility
9.3

utility
9.3
9.1

1

WITH

9.1

PCS

C ONCURRENT I NTERACTIONS

PCS
1

8.9

8.9

2

2
SAPS
8.5
8.3

SAPS

8.7

8.7

8.5

3

SCS

8.3

4

8.1

SASS

7.9
7.7

3
SCS

8.1
7.9

4

SASS

7.7

0.01 0.11 0.21 0.31 0.41 0.51 0.61 0.71 0.81 0.91

0.01 0.11 0.21 0.31 0.41 0.51 0.61 0.71 0.81 0.91

similarity level ( )

Figure 2: Average expected utility per buyer agent as a function of similarity level for different models in
different markets

Curve 1 in each graph depicts the average expected utility when the two agents form a coalition as a function of the similarity level  between the agents utility functions, making use of
the suggested parallel cooperative search. Here, the search cost of conducting a single interaction
was set at 0.2 (cbase = 0.2) and the search cost to conduct additional interactions was set to 0.05
(c parallel = 0.05). As expected our model (represented by curve 1) outperforms the SCS model (represented by curve 3) in terms of the expected utility for the agents. The other two curves describe
the average expected utility of the agents when each searches separately using the Single Agent
Parallel Search (SAPS) (represented by curve 2) and the Single Agent Sequential Search (SASS)
(represented by curve 4) models. In this specific environment the use of the cooperative parallel
search also outperforms the single agent parallel search model though this is not always the case.
Notice that the results obtained for the cooperative parallel search are consistent with a general
characteristic of cooperative search (Sarne & Kraus, 2005) by which the use of the method in the
B2C market results in a better expected utility than in the C2C market. In the case of the separated
single searches (SAPS and SASS models) the market type does not affect the strategy structure nor
the expected utility since each agent searches only for a single opportunity for its own benefit.
Figure 2 also reflects an interesting insight which contradicts an important strategy domination
relationship found between single and cooperative sequential search techniques of fully homogeneous agents (i.e. with the same utility function, as in the case where  = 0.5 in our example)
operating in C2C markets. While for the sequential search the use of the single agent search always outperforms the cooperative search in the C2C markets (when considering fully homogeneous
agents) (Sarne & Kraus, 2005), here we have actual evidence that where parallel search is concerned,
the cooperative search technique may outperform the aggregated result of the single homogeneous
agents search.
Figure 3 shows the expected utility per agent when using the different search methods in the
C2C market (left hand-side) and the B2C market (right hand-side) as a parameter of the cost of
conducting an additional interaction c parallel (notice that the agents performance is not affected by
this value in the SASS and the SCS models). The results are based on Environment 5 (the same
environment we used for Figure 2), where  = 0.1 and c base = 0.2. As expected as the cost c parallel
25

fiM ANISTERSKI , S ARNE , & K RAUS

decreases the average expected utility using the parallel models (PSC and SAPS models) increases
(and thus the greater the improvement in comparison to the sequential models). Note that whenever
c parallel  cbase the performance converges to the one achieved by obtaining one observation at a
time, as used in the sequential models. This behavior is correlated with Proposition 3.

0.17

0.21

9.7

utility

utility

9.7

9.5

9.5

9.3

9.3

9.1

1

9.1

PCS

1
8.9

8.9

SAPS

8.7

2

2
3

8.5

SCS

8.3

4

8.1

SAPS

8.7

8.5

3

PCS

SCS

8.3

4

SASS

SASS

8.1

0.01

0.05

0.09

0.13

0.17

0.21

0.01

0.05

0.09

0.13

0.17

0.21

cost of parallel interaction

Figure 3: Average expected utility per buyer agent as a function of c parallel when using the different search
methods in different markets

The cost of conducting an additional interaction c parallel also influences the optimal number
of interactions that the coalition should conduct. Figure 4 shows the optimal number of parallel
interactions that the coalition should conduct at the beginning of its search, x  ({}), as a function
of c parallel in the same environment that we used for Figure 3 (Environment 5). As expected, the
optimal number of interactions, x ({}), increases as c parallel decreases and is equal to 1, when
c parallel  cbase .
In Figure 4 the coalitions optimal number of interactions using the PCS model is higher when
the coalition operates in the C2C market than when in the B2C market. While this can have an
intuitive explanation (in the C2C market each opportunity can be exploited by only one of the agents
so the coalition needs to encounter more opportunities in the C2C market) it cannot be generalized.
The following example illustrates a scenario in which the optimal number of interactions is actually
greater when operating in a B2C market.
Environment 6. A coalition of two agents, a 1 and a2 , searching for a product (e.g., a computer
game) associated with 4 types of opportunities {~o 1 ,~o2 ,~o3 ,~o4 } (e.g., representing different configurations). The agents utilities and opportunities distribution are given in Table 5. The search cost
of any single agent to conduct a single interaction is c base = 0.2, and the search cost of conducting
an additional search is c parallel = 0.1, c(w, 1) = cbase + c parallel  (w  1). The search cost for a
coalition is c(w, n) = c(w, 1)ln(n + 1), (n > 1).
Figure 5 shows the optimal number of interactions used by the coalition (in the SCS model)
or the agent (in the SAPS model) at the beginning of the search, when operating in Environment
6. As one can see the coalitions optimal number of interactions using the PCS model in the B2C
26

fiE NHANCING C OOPERATIVE S EARCH

optimal # of interactions

32

WITH

C ONCURRENT I NTERACTIONS

(1) Coalition in B2C

28
(2) Coalition in C2C
24

1
(3) Agent A1

20
4

(4) Agent A2

16
12

3

2

8
4
0
0.01

0.06

0.11

cost of parallel interaction

0.16

0.21

Figure 4: Coalitions or agents optimal number of parallel interactions at the beginning of its search as a
function of c parallel

Opportunity

Probability

~o1
~o2
~o3
~o4

0.499
0.25
0.25
0.001

Utility
Agent a1 Agent a2
0
0
0
1
1
0
100
100

Table 5: Agents utilities for the four opportunities in Environment 6
market (44) is larger than the coalitions optimal number of parallel interactions in the C2C market
(8). Moreover this figure contradicts two additional hypothesis that one may presume about the
optimal number of a coalitions parallel interactions. The first is that the coalitions optimal number
of parallel interactions is at most equal to the overall number of parallel interactions, when each of
the agents conducts the search autonomously. As can be seen in Figure 5, the optimal number of
parallel interactions in the B2C market is greater than the total number of parallel interactions, when
each of the agents conducts its search autonomously (10 + 10 = 20 < 44). The second hypothesis
suggests that the coalitions optimal number of parallel interactions is at least the number of parallel
interactions, when each of the agents conducts the search autonomously. This, again is proven
wrong in Figure 5, where the coalitions optimal number of parallel interactions in the C2C market
(8) is smaller than the number of parallel interactions of agent a 1 (10), and the number of parallel
interactions of agent a2 (10).
Next we introduce and make use of a simpler sample environment for demonstrating some
additional properties of the cooperative parallel search.
Environment 7. A coalition of two agents, a 1 and a2 , searching for opportunities defined by two
attributes, B1 (e.g., quality) and B2 (e.g., store rating), where each attribute can have a value from
the discrete range of (1, 2) with an equal probability for each of the values. The utility functions
used are U1 (~o) = 1.9B1 + 0.1B2 and U2 (~o) = 0.1B1 + 1.9B2 . The search cost of a single agent
27

fiM ANISTERSKI , S ARNE , & K RAUS

x*({})
45

36
27
18
9
0
PCS in
C2C

PCS in
B2C

SAPS of
Agent 1

SAPS of
Agent 2

Figure 5: Coalitions optimal number of parallel interactions at the beginning of its search
is c(w, 1) = 0.5 + 0.05w, and for a coalition it is c(w, n) = c(w, 1)  ln(n + 1), (n > 1). Table 6
summarizes the environments setting.
Opportunity
~o1
~o2
~o3
~o4

(Attribute1,
Attribute2)
(1,1)
(1,2)
(2,1)
(2,2)

Probability
1
4
1
4
1
4
1
4

Utility
Agent a1 Agent a2
2
2
2.1
3.9
3.9
2.1
4
4

Table 6: Agents utilities for the four opportunities in Environment 7

7.1
utility
7
6.9
6.8
6.7
6.6
6.5
6.4
1

2

3

4

5

6

7

8

9

10

# of parallel interactions (w)

Figure 6: Coalitions overall expected utility as a function of w
Figure 6 depicts the expected coalitions overall utility with respect to the number of interactions
conducted at the beginning of the search (i.e. the first search stage, before the coalition knows about
any of the opportunities), assuming that in all the other states the coalition uses the optimal number
28

fiE NHANCING C OOPERATIVE S EARCH

WITH

C ONCURRENT I NTERACTIONS

of parallel interactions, x (s). Here, we can see the effect of two conflicting forces: as the number of
parallel interactions the coalition uses in this stage increases, the probability of associating a better
opportunity with any of the two coalition members increases. However the overall search cost
associated with the search stage increases. From the figure, we conclude that the optimal number of
parallel interactions to be used in this stage is x  ({}) = 5.
An additional important characteristic of the cooperative parallel search we wish to emphasize
concerns the number of parallel interactions used as part of the optimal search strategy along the
search. While in a single agents parallel search the search strategy is stationary (i.e. the number
of parallel interactions used does not change along the search process) in our model the number of
parallel interactions along the search that needs to be maintained depends on the coalitions state
(i.e. the set of opportunities known to the coalition). This is demonstrated in the directed acyclic
graph (DAG) given in Figure 7, which describes the search process in Environment 7. The vertices
of this graph present potential coalitions states (the state is determined according to the relevant
set of known opportunities, correlated with the definition given in section 4). An edge connects
two states s and s0 only if there is a possibility to reach state s over the following search round if
the coalition conducts the search according to the optimal search strategy. For example a directed
edge connects between s = {} and s0 = {(1, 2), (2, 1)}, since the coalition can proceed from s to s 0
if it conducts the five parallel interactions according to the optimal search strategy and encounters
opportunities (1, 2) and (2, 1). Notice that when reaching states {(1, 2), (2, 1)} and {(2, 2), (2, 2)}
the optimal strategy of the coalition is to terminate the search. Therefore there is no edge originating
in these states. As illustrated in Figure 7, the number of parallel interactions the coalition should
use according to the optimal search strategy (denoted by x  (s)) depends on the coalitions state. For
comparison purposes, notice that in any of the single agents separate search (i.e. the single agent
parallel search model) the optimal strategy is to constantly use 4 parallel interactions (as long as the
agents strategy is to resume the search).

x*(s)=4
{(1,2)}
x*(s)=5

{}
Vt(s)=0

x*(s)=5

Vt(s)=6

{(1,1)}
Vt(s)=4

x*(s)=0
{(1,2),(2,1)}
Vt(s)=7.8
x*(s)=0

x*(s)=4
{(2,1)}
Vt(s)=6

{(2,2)}
Vt(s)=8

Figure 7: Optimal strategy and potential transitions between states in a simple B2C market

8.2 Finite Decision Horizon
In this section we demonstrate some properties of the PCS model variant where the coalition is
given a finite decision horizon. First we explore the influences of the cost of conducting an addi29

fiM ANISTERSKI , S ARNE , & K RAUS

tional interaction, c parallel , on an agents expected utility. Figure 8 depicts the results obtained from
varying c parallel between 0.01 and 0.3. In this figure we use the same environment used for Figure
3 (Environment 5), where  = 0.1, cbase = 0.2 with a decision horizon of two search rounds. As
the cost of conducting an additional interaction c parallel decreases, the coalitions expected utility
using the parallel models PSC and SAPS increases and its superiority over the sequential models
increases. Moreover as shown in Figure 8 the parallel model outperforms the sequential model even
when c parallel  cbase (e.g., for c parallel = 0.2). Recall that when c parallel  cbase the parallel technique does not improve the expected utility when having an infinite decision horizon (as suggested
in Proposition 3).
9.6

utility

utility

9.6

9.1

9.1

8.6

1

2
8.1

PCS

SAPS
8.1

SAPS

7.6
7.1

1 PCS
2

8.6

7.6

4

SASS

3

7.1

SCS
4

6.6

6.6

3
6.1
0.01

SASS

SCS
6.1
0.06

0.11

0.16

0.21

0.26

0.01

0.06

0.11

0.16

0.21

0.26

cost of parallel search

Figure 8: The average expected utility per buyer agent as a function of c parallel when the coalition should
terminate its search within the two next rounds.

Another factor that affects the expected utility is the decision horizon, represented by the value
of the parameter r. Figure 9 presents the coalitions expected utility as a function of r. In this figure
we used the same environment that we used in Figure 8, where we set the cost of each additional
search, c parallel = 0.2. As observed in Figure 9, in all search models, the earlier the coalition should
terminate its search the smaller its expected utility. Moreover, the expected utility improvement
obtained in the PCS (in comparison to the SCS) and SAPS (in comparison to the SASS) models
increases as r decreases. In this case the ability to conduct parallel interactions compensates for the
small number of search rounds that the coalition can conduct. Note that as r increases, the average
expected utility per buyer agent converges to the average expected utility per buyer agent in the
infinite decision horizon model.
Finally, Figure 10 depicts the optimal number of interactions for a coalition (in the PCS model)
or an agent (in the SAPS model) at the beginning of the search, as a function of r. For this figure
we used the same environment parameters that were used in Figure 9. As expected the number of
parallel interactions increases as r decreases.
As we have demonstrated throughout this section, the PCS outperforms the sequential cooperative search. Generally, the magnitude of improvement depends on the size of the domain, the search
cost structure, and the different utility functions used.

30

fiE NHANCING C OOPERATIVE S EARCH

utility
2

7.7

utility

PCS

1

8.2

WITH

SAPS

4

SASS

PCS
1
3

8.3

SCS

SAPS
2

7.2
6.7

C ONCURRENT I NTERACTIONS

4

7.8

SASS

6.2
7.3

5.7
5.2

6.8

3

4.7

SCS

4.2

6.3

3.7
3.2

5.8
1

5

9

13

1

4

7

10

13

limit on number of search rounds- r

Figure 9: The average expected utility per buyer agent as a function of the limit of the number of search

optimal # of interactions

rounds, r

(1) Coalition in B2C

8

(2) Coalition in C2C
6

3

(3) Agent A1
2
(4) Agent A2

4

4
1
2

0

1

5

9

limit on number of search rounds- r

13

Figure 10: Optimal number of interactions as a function of the decision horizon, r

9. Discussion and Conclusions
The capability of using parallel interactions as part of a search process is inherent in the infrastructure of autonomous information agents. When using the cooperative parallel search, the coalition
should use a new strategy, different in its structure in comparison to the optimal strategy used in the
cooperative sequential search and in a single agents parallel search. As expected, the use of the new
model has the potential of significantly improving the coalitions expected utility as demonstrated
in the previous section. Furthermore, we emphasize that the coalitions expected utility will never
decrease when using our proposed mechanism in comparison to pure sequential cooperative search.
This is mainly because the suggested algorithm will converge to one interaction at a time strategy,
as used in the sequential cooperative search (which is a specific case of our model) in the case where
31

fiM ANISTERSKI , S ARNE , & K RAUS

maintaining more than a single interaction in some of the world states is not favorable. Obviously
if the search cost is linear and depends solely on the number of interactions being maintained, then
there is no use for the coalition to increase the number of sellers with whom it interacts in a given
search round. Nevertheless, scenarios in which the coalitions search cost combines additional fixed
components or non-linear dependency on the number of interactions maintained are much more realistic (Sarne & Kraus, 2005). In these scenarios the parallel cooperative search yields large benefits
for searchers.
While the parallel cooperative search weakly dominates the sequential cooperative search, it
does not necessarily dominate autonomous search (where the agents search by themselves instead
of cooperatively). The decision of whether to use the parallel cooperative search autonomously
depends on the amount of coalition overhead costs induced by the cooperative search. Therefore,
having the computational means developed in this work enables the agents to identify fruitful opportunities for searching cooperatively. Generally, the introduction of the parallel cooperative search
model substantially increases the number of scenarios in which agents will prefer to search cooperatively.
The novelty of the analysis given in this paper is threefold. First it supplies us with a better
understanding of the space of opportunities, dividing it into improving and non-improving areas.
Thus, instead of having dual simultaneous dependencies between states we can now define a single
directional dependency for each pair of states. Second, it supplies a bound for the optimum number
of parallel interactions that the coalition uses in each state in its optimal strategy. Third we represent the parallel search as a sequential process, without breaching any of the model assumptions.
These three features allow us to overcome the main complexity associated with the attempt to solve
the problem as a set of equations and proffer a finite algorithm that is polynomial in the number
of parallel interactions (rather than the brute-force algorithm which is exponential in the number
of parallel interactions) and inevitably reaches the optimal strategy. Moreover, we provide a comprehensive analysis of the parallel model for extracting the optimal search strategy given a finite
decision horizon. Here, as we illustrate, the coalition can benefit significantly more than the infinite
decision horizon from the integration of parallel interactions into the cooperative search. The PCS
model (both in its finite and infinite decision horizon forms) is general and can be applied to any
coalition regardless of the cost function and the preferences used by its agents. Further adaptation
to additional markets (other than C2C and B2C) can be achieved by appropriately modifying the
allocation function used for assigning each agent with one of the opportunities found along the
search.
The focus of this research is on finding the optimal search strategy for the coalition, given its
structure, the opportunity distribution, and the reported members preferences. It treats the coalition as a unified entity sharing a common goal (to maximize the sum of its members utilities).
Nevertheless, there are various, important aspects of coalition formation, in the context of cooperative search, that do not always correlate with the assumptions used and should therefore be further
addressed. For example, there may be an incentive for coalition members to misreport their preferences when side-payments are used. Alternatively, agents may be able to form side coalitions,
and free-ride actively searching coalitions by having only a single agent as a member of the actively
searching coalition (that member would act as a spy for the side coalition). Moreover, there
can be environments where agents may face tight budget constraints that could be violated within
coalition side-payments. The analysis of these important issues is based on the ability to properly
derive the coalitions utility given any specific setting. This paper supplies this functionality, laying
32

fiE NHANCING C OOPERATIVE S EARCH

WITH

C ONCURRENT I NTERACTIONS

the foundation and enabling such research. Future work should encompass and extend the scope of
research to include these additional topics associated with the coalition formation process, such as
the coalition stability and the division of payoffs between the coalition members. Other important
extensions should include the relaxation of some assumptions in the underlying opportunity model
(e.g., different deadlines on different opportunities).

Acknowledgments
This work was supported in part by NSF grant no IIS0705587 and ISF. Kraus is also affiliated with
UMIACS.

Appendix A. A Summary of Notations
Notation

Meaning

B = (B1 , B2 , ..., Bk )

The set of the attributes defining each of the potentially available opportunities in the market, where each attribute B i can be
assigned a value from the finite set (b imin , ..., bimax ).
The space of potential opportunity types the coalition may encounter.
A coalition of agents.
Agent a j s utility from opportunity type ~o.
The search cost associated with having a coalition of n agents
maintaining w simultaneous interactions with seller agents.
A function that maps a given set of opportunities  known to the
coalition members in A in a way that the aggregated agents utility
is maximized
The state s of a coalition A acquainted with a set  known of known
opportunities.
The set of all possible states of a coalition A throughout its search.
The immediate utility for the coalition if it terminates the search
given a set of known opportunities  known .
The coalitions expected utility when using w parallel interactions
when in state s.
The immediate utility obtained, if the coalition decides to terminate the search at state s.
The number of parallel interactions that the coalition conducts at
state s according to its optimal strategy.
The collection of all w-sized sets of opportunities that can be produced in the environment the coalition operates.

Op
A
U j (~o)
c(w, n)
alloc(known )

state(known )
SA
Vt (known ):
V (s, w)
V (s, 0)
x (s)
w

33

fiM ANISTERSKI , S ARNE , & K RAUS

Notation
pw (w )
simprovew
sstayw
Ss
pstay (s, w)
wsmax
winit
max
V new (s, k)

r
x (s, r)
V  (s, r)

V (s, w, r)

Meaning
The probability of encountering a specific set of opportunities  w ,
when maintaining w random interactions with seller agents.
The collection of all w-sized sets of opportunities,  w , that change
the coalitions current state s.
The collection of all w-sized sets of opportunities,  w , that does
not change the coalitions current state s.
The set of all states belonging to SA , sorted according to their
termination utilities Vt (s).
The probability the agent stays at the same state s after conducting
w parallel interactions.
The upper bound for the optimal number of parallel interactions
to be used when the coalition in state s.
The upper bound for the optimal number of parallel interactions
to be used when the coalition begins its search (s = {}).
The coalitions expected utility obtained by potentially reaching
new states (e.g. different than s) after executing k parallel interactions (without incorporating the search cost of conducting these
k interactions), assuming future strategy uses x  (s0 ) in each new
future state s0 .
Finite Decision Horizon
The maximum number of search rounds that the coalition can
conduct.
The coalitions optimal strategy at state s, if it needs to terminate
its search within the next r search rounds.
The expected utility of a coalition restricted to maximum r further
search rounds, when reaching a state s assuming it acts optimally
throughout its search.
The coalitions expected utility when it conducts w interactions
in the next round and has to terminate its search within the next r
rounds.

References
Avis, D., & Lai, C. (1988). The probabilistic analysis of a heuristic for the assignment problem.
SIAM J. Comput., 17(4), 732741.
Bakos, Y. (1997). Reducing buyer search costs: Implications for electronic marketplaces. Management Science, 42(12), 167692.
Baron, D. P., & Ferejohn, J. A. (1989). Bargaining in legislatures. American Political Science
Review, 83(4), 11811206.
Benhabib, J., & Bull, C. (1983). Job search: The choice of intensity. J. of Political Economy, 91(5),
747764.

34

fiE NHANCING C OOPERATIVE S EARCH

WITH

C ONCURRENT I NTERACTIONS

Breban, S., & Vassileva, J. (2001). Long-term coalitions for the electronic marketplace. In B.
Spencer, ed., Proceedings of E-Commerce Applications Workshop.
Burdett, K., & Malueg, D. A. (1981). The theory of search for several goods. Journal of Economic
Theory, 24, 362376.
Carlson, J. A., & McAfee, R. P. (1984). Joint search for several goods. Journal of Economic Theory,
32, 337345.
Choi, S., & Liu, J. (2000). Optimal time-constrained trading strategies for autonomous agents. In
Proceedings of MAMA-2000, pp. 1113.
Dias, M. (2004). TraderBots: A New Paradigm for Robust and Efficient Multirobot Coordination in
Dynamic Environments. Ph.D. thesis, Robotics Institute, Carnegie Mellon University.
Gal, S., Landsberger, M., & Levykson, B. (1981). A compound strategy for search in the labor
market. International Economic Review, 22(3), 597608.
Gatti, J. (1999). Multi-commodity consumer search. Journal of Economic Theory, 86(2), 219244.
Hart, P. E., Nilsson, N. J., & Raphael, B. (1968). A formal basis for the heuristic determination of
minimum cost paths. IEEE Transactions on Systems, Science and Cybernetics, 4(2), 100107.
Ito, T., Ochi, H., & Shintani, T. (2002). A group-buy protocol based on coalition formation for
agent-mediated e-commerce. International Journal of Computer and Information Science
(IJCIS), 3(1), 1120.
Kahan, J., & Rapoport, A. (1984). Theories of Coalition Formation. Hillsdale, NJ:Lawrence Erlbaum Associates.
Keeney, R., & Raiffa, H. (1976). Decisions with Multiple Objectives: Preferences and Value Tradeoffs. New York, US:John Wiley & Sons.
Kephart, J., & Greenwald, A. (2002). Shopbot economics. JAAMAS, 5(3), 255287.
Lermann, K., & Shehory, O. (2000). Coalition formation for large scale electronic markets. In
Proceedings of ICMAS-00, pp. 167174.
Li, C., Rajan, U., Chawla, S., & Sycara, K. (2003). Mechanisms for coalition formation and cost
sharing in an electronic marketplace. In Proceedings of ICEC-03, pp. 68  77.
Lippman, S., & McCall, J. (1976). The economics of job search: A survey. Economic Inquiry,
14(3), 155189.
Manisterski, E. (2007). Protocols and Strategies for Agents Teamwork. Ph.D. thesis, Department of
Computing Science, Bar Ilan University.
McMillan, J., & Rothschild, M. (1994). Search. In Aumann, R. J., & Sergiu Hart, A. (Eds.),
Handbook of Game Theory with Economic Applications, pp. 905927. Elsevier.
Morgan, P. (1983). Search and optimal sample size. Review of Economic Studies, 50(4), 659675.
Morgan, P., & Manning, R. (1985). Optimal search. Econometrica, 53(4), 923944.
Rothschild, M. (1974). Searching for the lowest price when the distribution of prices is unknown.
Journal of Political Economy, 82(4), 689711.
Sandholm, T., Larson, K., Andersson, M., Shehory, O., & Tohme, F. (1999). Coalition structure
generation with worst case guarantees. Artificial Intelligence, 111(1-2), 209238.
35

fiM ANISTERSKI , S ARNE , & K RAUS

Sarne, D., & Kraus, S. (2003). The search for coalition formation in costly environments. In
Proceedings of CIA-03, pp. 117136.
Sarne, D., & Kraus, S. (2005). Cooperative exploration in the electronic marketplace. In Proceedings of AAAI-05, pp. 158163.
Shehory, O., & Kraus, S. (1998). Methods for task allocation via agent coalition formation. Artificial
Intelligence, 101(1-2), 165200.
Stigler, G. (1961). The economics of information. Journal of Political Economy, 69(3), 213225.
Talukdar, S., Baerentzen, L., Gove, A., & de Souza, P. S. (1998). Asynchronous teams: Cooperation
schemes for autonomous agents. Journal of Heuristics, 4(4), 295321.
Tsvetovat, N., Sycara, K., Chen, Y., & Ying, J. (2000). Customer coalitions in electronic markets.
In Proceedings of AMEC-00, pp. 121138.
Wang, Y., Makedon, F., & Ford, J. (2004). A bipartite graph matching framework for finding correspondences between structural elements in two proteins. In Proceedings of EMBC-04, Vol. 42,
pp. 297275.
Yamamoto, J., & Sycara, K. (2001). A stable and efficient buyer coalition formation scheme for
e-marketplaces. In Proceedings of Agents-01, pp. 576583.

36

fi