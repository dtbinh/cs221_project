Journal of Artificial Intelligence Research 47 (2013) 351-391

Submitted 03/13; published 06/13

Strong Equivalence of Qualitative Optimization Problems
Wolfgang Faber

faber@mat.unical.it

Department of Mathematics
University of Calabria
Via P. Bucci cubo 30B, 87036 Rende, Italy

Miroslaw Truszczynski

mirek@cs.uky.edu

Department of Computer Science
University of Kentucky
329 Rose Street, Lexington, KY 40506-00633, USA

Stefan Woltran

woltran@dbai.tuwien.ac.at

Institute of Information Systems
Vienna University of Technology
Favoritenstrae 911, 1040 Vienna, Austria

Abstract
We introduce the framework of qualitative optimization problems (or, simply, optimization problems) to represent preference theories. The formalism uses separate modules to
describe the space of outcomes to be compared (the generator ) and the preferences on outcomes (the selector ). We consider two types of optimization problems. They differ in the
way the generator, which we model by a propositional theory, is interpreted: by the standard propositional logic semantics, and by the equilibrium-model (answer-set) semantics.
Under the latter interpretation of generators, optimization problems directly generalize
answer-set optimization programs proposed previously. We study strong equivalence of
optimization problems, which guarantees their interchangeability within any larger context. We characterize several versions of strong equivalence obtained by restricting the
class of optimization problems that can be used as extensions and establish the complexity
of associated reasoning tasks. Understanding strong equivalence is essential for modular
representation of optimization problems and rewriting techniques to simplify them without
changing their inherent properties.

1. Introduction
We introduce the framework of qualitative optimization problems in which, following the design of answer-set optimization (ASO) programs (Brewka, Niemela, & Truszczynski, 2003),
we use separate modules to describe the space of outcomes to be compared (the generator )
and the preferences on the outcomes (the selector ). In all optimization problems we consider, the selector module follows the syntax and the semantics of preference modules in
ASO programs, and the generator is given by a propositional theory. When this propositional theory is interpreted according to the standard propositional logic semantics, that is,
outcomes to be compared are classical models of the generator, we speak about classical optimization problems (CO problems, for short). When the generator theory is interpreted by
the semantics of equilibrium models (Pearce, 1997), we speak about answer-set optimization
problems (ASO problems, for short). We use this terminology, as equilibrium models are
c
2013
AI Access Foundation. All rights reserved.

fiFaber, Truszczynski, & Woltran

usually referred to as answer sets (Ferraris, 2005) for historical reasons. In ASO problems,
the answer sets of the generator are the outcomes used to determine the optimal outcomes.
Representing and reasoning about preferences in qualitative settings is an important
research area for knowledge representation and qualitative decision theory. The main objectives are to design expressive yet intuitive languages to model preferences, and to develop automated methods to reason about formal representations of preferences in these
languages. The literature on the subject of preferences is vast. We refer the reader to articles in the special issue of the Artificial Intelligence Magazine (Goldsmith & Junker, 2008)
and to a recent monograph by Kaci (2011) for a thorough discussion of the area and for
additional references.
Understanding when optimization problems are equivalent, in particular, when one can
be interchanged with another within any larger context, is fundamental to any preference
formalism. Speaking informally, optimization problems P and Q are interchangeable or
strongly equivalent when for every optimization problem R (context), P R and QR define
the same optimal models. Understanding when one optimization problem is equivalent to
another in this sense is essential for preference analysis, modular preference representation,
and rewriting techniques to simplify optimization problems into forms more amenable to
processing, without changing any of their inherent properties. Let us consider a multi-agent
setting, in which agents combine their preferences on some set of alternatives with the goal
of identifying optimal ones. Can one agent in the ensemble be replaced with another so that
the set of optimal alternatives is unaffected not only now, but also under any extension of
the ensemble in the future? Strong equivalence of agents optimization problems is precisely
what is needed to guarantee this full interchangeability property!
The notion of strong equivalence is of general interest, by no means restricted to preference formalisms. In some cases, most notably for classical logic, it coincides with equivalence,
the property of having the same models. However, if the semantics is not monotone, that is,
extending the theory may introduce new models not only eliminate some, strong equivalence
becomes a strictly stronger concept, and the one to adopt if theories being analyzed are to be
placed within a larger context. The nonmonotonicity of the semantics is the salient feature
of nonmonotonic logics (Marek & Truszczynski, 1993) and strong equivalence of theories in
nonmonotonic logics, especially logic programming with the answer-set semantics (Gelfond
& Lifschitz, 1991), was extensively studied in that setting (Lifschitz, Pearce, & Valverde,
2001; Turner, 2003; Eiter, Fink, & Woltran, 2007b). Preference formalisms also often
behave nonmonotonically as adding a new preference may cause a non-optimal outcome
(model) to become an optimal one. Thus, in preference formalisms, equivalence and strong
equivalence are typically different notions. Accordingly, strong equivalence was studied for
logic programs with rule preferences (Faber & Konczak, 2006), programs with ordered disjunction (Faber, Tompits, & Woltran, 2008) and programs with weak constraints (Eiter,
Faber, Fink, & Woltran, 2007a).
We extend the study of strong equivalence to the formalism of qualitative optimization
problems. The formalism is motivated by the design of answer-set optimization (ASO) programs of Brewka et al. (2003). It borrows two key features from ASO programs that make it
an attractive alternative to the preference modeling approaches based on logic programming
that we mentioned above. First, following ASO programs, optimization problems provide
a clear separation of hard constraints, which specify the space of feasible outcomes, and
352

fiStrong Equivalence of Qualitative Optimization Problems

preferences (soft constraints) that impose a preference ordering on feasible outcomes. Second, optimization problems adopt the syntax and the semantics of preference rules of ASO
programs that correspond closely to linguistic patterns of simple conditional preferences
used by humans.
The separation of preference modules from hard constraints facilitates eliciting and representing preferences. It is also important for characterizing strong equivalence. When a
clear separation is not present, like in logic programs with ordered disjunctions (Brewka,
Niemela, & Syrjanen, 2004), strong equivalence characterizations are cumbersome as they
have to account for complex and mostly implicit interactions between hard constraints
and preferences. For optimization problems, which impose the separation, we have onedimensional forms of strong equivalence, in which only hard constraints or only preferences
are added. These one-dimensional concepts are easier to study yet provide enough information to construct characterizations for the general case.
Main Contributions.

Our main contribution can be summarized as follows.

 We propose a general framework of qualitative optimization problems, extending in
several ways the formalism of ASO programs. We focus on two important instantiations of the framework, the classes of classical optimization (CO) problems and
answer-set optimization (ASO) problems. The latter one directly generalizes ASO
programs.
 We identify the problem of strong equivalence for theories in general preference formalisms. We point out that strong equivalence and equivalence do not coincide (in
general) in preference formalisms and that it is the concept of strong equivalence
that is fundamental for such issues as theory modularity, rewriting and simplification. Strong equivalence was studied earlier in the context of logic programs and logic
programs extended with preferences on rules or on atoms in the heads of rules (and
was similarly motivated). However, to the best of our knowledge, this is the first
paper that studies strong equivalence for a more typical preference formalism that
represents preferences in terms of preferred properties (modeled by formulas) and
independently of constraints defining outcomes to compare. As such, it is of more
relevance to the mainstream preference research than the previous studies.
 We characterize the concept of strong equivalence of optimization problems relative
to changing selector modules. The characterization is independent of the semantics
of generators and so, applies both to CO and ASP problems. We also characterize
strong equivalence relative to changing generators (with preferences fixed). In this
case, not surprisingly, the characterization depends on the semantics of generators.
However, we show that the dependence is quite uniform, and involves a characterization of strong equivalence of generators relative to their underlying semantics, when
they are considered on their own as propositional theories. Finally, we combine the
characterizations of the one-dimensional concepts of strong equivalence into a characterization of the general combined notion.
 We develop our results for the case when preferences are ranked. In practice, preferences are commonly ranked due to the hierarchical structure of preference providers.
353

fiFaber, Truszczynski, & Woltran

The general case we study allows for additions of preferences of ranks from a specified interval [i, j]. This covers the case when only some segment in the hierarchy of
preference providers is allowed to add preferences (top decision makers, middle management, low-level designers), as well as the case when there is no distinction between
the importance of preferences (the non-ranked case).
 We establish the complexity of deciding whether two optimization problems are strongly equivalent relative to changing selectors, generators, or both. Our results show that
these problems range from being co-NP- to P3 -complete.
Organization. In the following section, we introduce the concept of an optimization
problem and the necessary terminology, and define all equivalence problems we are interested
in here. We also discuss the relationship of optimization problems to further formalisms
from the literature, in particular to ASO programs. In Section 3 we provide our results for
the case where selectors may vary but no new hard constraints are allowed. Section 4 in
turn characterizes the strong equivalence notion, where preferences are unaffected but the
generator parts are subject to change. In Section 5 we finally show how the characterizations
obtained in the previous sections have to be combined in order to capture the general case
of strong equivalence. Our complexity analysis is presented in Section 6, followed by a
discussion of our results and considerations about future directions of research.
We present proof sketches and some of the simpler and not overly technical proofs in the
main text to facilitate understanding of the results at the intuitive level. Detailed proofs
can be found in the Appendix.
This article is a substantially extended version of an earlier published conference version
(Faber, Truszczynski, & Woltran, 2012).

2. Optimization Problems
In this section we provide the basic definitions of optimization problems in Section 2.1,
followed in Section 2.2 by definitions of the strong equivalence notions on optimization
problems that are studied in the remainder of the paper. Finally, in Section 2.3 we provide
a discussion on related formalisms.
2.1 Basic Definitions
A qualitative optimization problem (an optimization problem, from now on) is an ordered
pair P = (T, S), where T is called the generator and S the selector. The role of the
generator is to specify the family of outcomes to be compared. The role of the selector S
is to define a relation  on the set of outcomes and, consequently, define the notion of an
optimal outcome. The relation  induces relations > and : we define I > J if I  J and
J 6 I, and I  J if I  J and J  I. For an optimization problem P , we write P g and P s
to refer to its generator and selector, respectively.
Generators. As generators we use propositional theories in the language determined by
a fixed countable universe (or alphabet) U of propositional variables that form atomic
propositions, a Boolean constant , and Boolean connectives ,  and , and where we
define the constant >, and the connectives  and  in the usual way as > := ,  :=
354

fiStrong Equivalence of Qualitative Optimization Problems

  , and    := (  )(  ), respectively.1 Models of the generator, as defined
by the semantics used, represent outcomes of the corresponding optimization problem.
We consider two quite different semantics for generators: the classical propositional logic
semantics and the semantics of equilibrium models (Pearce, 1997). Thus, outcomes are
either models or equilibrium models, depending on the semantics chosen. The first semantics
is of interest due to the fundamental role and widespread use of classical propositional logic,
in particular, as a means to describe constraints. Equilibrium models generalize answer sets
of logic programs to the case of arbitrary propositional theories (Pearce, 1997; Ferraris, 2005)
and are often referred to as answer sets. The semantics of equilibrium models is important
due to the demonstrated effectiveness of logic programming with the semantics of answer
sets for knowledge representation applications. We use the terms equilibrium models and
answer sets interchangeably.
Throughout the paper, we represent interpretations as subsets of U, which contain
exactly those atomic propositions that are interpreted as true. We write I |=  to state that
an interpretation I  U is a (classical propositional) model of a formula . Furthermore,
we denote the set of classical models of a formula or theory T by Mod (T ).
Equilibrium models arise in the context of the propositional logic of here-and-there, or
the logic HT for short (Heyting, 1930). We briefly recall here definitions of concepts, as
well as properties of the logic HT that are directly relevant to our work. We refer to the
papers by Pearce (1997) and Ferraris (2005) for further details.
The logic HT is a logic located between the intuitionistic and the classical logics. Interpretations in the logic HT are pairs hI, Ji of standard propositional interpretations such
that I  J. We write hI, Ji |=HT  to denote that a formula  holds in an interpretation
hI, Ji in the logic HT. The relation |=HT is defined recursively as follows:
1. hI, Ji 6|=HT 
2. for an atom a, hI, Ji |=HT a precisely when a  I
3. hI, Ji |=HT    if hI, Ji |=HT  or hI, Ji |=HT 
4. hI, Ji |=HT    if hI, Ji |=HT  and hI, Ji |=HT 
5. hI, Ji |=HT    if J |=    (classical satisfiability), and hI, Ji 6|=HT  or
hI, Ji |=HT .
An equilibrium model or answer set of a propositional theory T is a standard interpretation I such that hI, Ii |=HT T and for every proper subset J of I, hJ, Ii 6|=HT T . Answer
sets of a propositional theory T are also classical models of T . The converse is not true in
general. We denote the set of all answer sets of a theory T by AS (T ), and the set of all
HT-models of T by ModHT (T ), that is, ModHT (T ) = {hI, Ji | I  J, hI, Ji |=HT T }.
For each of the semantics there are two natural concepts of equivalence. Two theories T1
and T2 are equivalent if they have the same models (classical or equilibrium, respectively).
They are strongly equivalent if for every theory S, T1  S and T2  S have the same models
(again, classical or equilibrium, respectively).
1. While the choice of primitive connectives is not common for the language of classical propositional logic,
it is standard for the of logic here-and-there which underlies the answer-set semantics.

355

fiFaber, Truszczynski, & Woltran

For classical semantics, strong equivalence and equivalence coincide. It is not so for
the semantics of equilibrium models. The result by Lifschitz et al. (2001) states that two
theories T1 and T2 are strongly equivalent for equilibrium models if and only if T1 and T2
are equivalent in the logic HT, that is, ModHT (T1 ) = ModHT (T2 ). We will now illustrate the
notions of HT-models and equilibrium models, and relate the latter to the classical ones.
Here and in all other examples, we consider only classical and HT-models over the alphabet
consisting of atoms explicitly mentioned in the theories discussed. That is sufficient to
determine all equilibrium models on the one hand (which happen to consist only of atoms
that are mentioned) and, on the other, to show that they differ from classical ones.
Example 1 Let us consider the theory Ta = {a  a}. The classical models of Ta (under the
restriction mentioned above) are  and {a}, so a being true and a being false are both possible
outcomes. The HT-models (again, under the same restriction) are h, i, h, {a}i, and
h{a}, {a}i. Hence, there is only one answer set (equilibrium model) . The other possible
candidate, {a}, is not an answer set. While h{a}, {a}i |=HT Ta holds, also h, {a}i |=HT Ta
does. Thus, intuitively, the theory does not contain any cause for a to hold.
Next, let us consider the theory Tb = {ab}. The classical models are {a}, {b} and {a, b},
and the HT-models are h{a}, {a}i, h{b}, {b}i, h{a}, {a, b}i, h{b}, {a, b}i and h{a, b}, {a, b}i.
The answer sets are therefore {a} and {b}, but not {a, b}. Again the intuition is that the
theory does not contain a cause for a and b to hold simultaneously.
Finally, let us consider the theory Tc = {(a  b)  (b  a)}. The classical models
are the same as for Tb , that is, Mod (Tc ) = {{a}, {b}, {a, b}}. We also have ModHT (Tc ) =
{h{a}, {a}i, h{b}, {b}i, h{a}, {a, b}i, h{b}, {a, b}i, h{a, b}, {a, b}i, h, {a, b}i} = ModHT (Tb )
{h, {a, b}i}. The answer sets are again the same as for Tb : AS (Tc ) = {{a}, {b}}.
We observe that Tb and Tc are equivalent for both the classical and equilibrium setting
(they have the same classical and equilibrium models). The former implies that they are
also strongly equivalent in the classical setting. However, they are not strongly equivalent in
the equilibrium setting because ModHT (Tb ) 6= ModHT (Tc ) (cf. the characterization of strong
equivalence under the equilibrium semantics by Lifschitz et al. (2001)). And indeed, for
S = {a  b, b  a}, we obtain AS (Tb  S) = {{a, b}}, while AS (Tc  S) = .
We recall that optimization problems under the classical interpretation of generators
are referred to as classical optimization problems or CO problems, and when we use the
answer-set semantics for generators, we speak about answer-set optimization problems or
ASO problems.
Selectors. We follow the definitions of preference modules in ASO programs (Brewka
et al., 2003), adjusting the terminology to our more general setting. A selector is a finite
set of ranked preference rules
j
1 >    > k  
(1)
where k and j are positive integers, and i , 1  i  k, and  are propositional formulas
over U. For a rule r of the form (1), the number j is the rank of r, denoted by rank (r),
hd (r) = {1 , . . . , k } is the head of r and  is the body (the condition) of r, bd (r). Moreover,
we write hd i (r) to refer to formula i .
If rank (r) = 1 for every preference rule r in a selector S, then S is a simple selector.
1
Otherwise, S is ranked. We often omit 1 from the notation  for simple selectors. For
356

fiStrong Equivalence of Qualitative Optimization Problems

a selector S, and i, j  {0, 1, 2, . . .}  {}, we define S[i,j] = {r  S | i  rank (r)  j}
(where we assume that for every integer k, k < ) and write [i, j] for the rank interval
{k | k an integer, i  k  j}. We extend this notation to optimization problems. For
P = (T, S) and a rank interval [i, j], we set P[i,j] = (T, S[i,j] ). For some rank intervals we
use shorthands, for example = i for [i, i], < i for [1, i  1],  i for [i, ], and similar.
For an interpretation I, a satisfaction
degree of a preference rule r is vI (r) = min{i | I |=
W
hd i (r)}, if I |= bd (r) and I |= hd (r); otherwise, the rule is irrelevant to I, and vI (r) = 1.
Intuitively, the lower the satisfaction degree the better the outcome. Thus, a preference
rule 1 >    > k   can informally be read as follows: irrelevant outcomes (those
not satisfying , or not satisfying any i ) and outcomes satisfying 1 are most preferred,
followed by outcomes satisfying 2 , and then outcomes satisfying 3 , etc. We note that
Brewka et al. (2003) represented the satisfaction degree of an irrelevant rule by a special
non-numeric degree, treated as being equivalent to 1. The difference is immaterial and the
two approaches are equivalent.
Selectors determine a preference relation on interpretations. Given interpretations I
and J and a simple selector S, I S J holds precisely when for all r  S, vI (r)  vJ (r).
Therefore, I >S J holds if and only if I S J and there exists r  S such that vI (r) < vJ (r);
I S J holds if and only if for every r  S, vI (r) = vJ (r).
Given a ranked selector S, we define I S J if for every preference rule r  S, vI (r) =
vJ (r), or if there is a rule r0  S such that the following three conditions hold:
1. vI (r0 ) < vJ (r0 )
2. for every r  S of the same rank as r0 , vI (r)  vJ (r)
3. for every r  S of smaller rank than r0 , vI (r) = vJ (r).
Moreover, I >S J if and only if there is a rule r0 for which the three conditions above hold,
and I S J if and only if for every r  S, vI (r) = vJ (r). Given an optimization problem
P = (T, S), we often write P for S (and similarly for > and ). Furthermore, for a set
V  2U and a relation  (like >, , or ) over 2U , we write V for the restriction of  to
V , that is, V = {(A, B)   | A, B  V }. The relationship between equalities of , >,
and  of two optimization problems is as follows.
Lemma 1 For all optimization problems P and Q, and every set V  2U , PV = Q
V
Q
P
implies >PV = >Q
V and V = V .
P
Proof. Suppose PV = Q
V and let I, J be interpretations such that I>V J. By definiQ
Q
Q
P
P
tion, IV J but J6V I. By assumption IV J and J6V I, implying I>V J. In case IPV J
Q
we have IPV J and JPV I. By assumption IQ
V J and JV I hold as well and we conclude
Q
Q
P
P
IQ
V J. The other direction (I>V J implies I>V J, and IV J implies IV J) is analogous. 2

Some aspects of ASO selectors require additional discussion. First, a preference rule
may be irrelevant to an outcome. This is the case when the outcome does not satisfy the
condition of a rule or, when it does, if it does not satisfy any formula in the head of the
rule. In such cases, we define the outcome to be most desirable with respect to the rule.
In making this choice, we followed the original definition (Brewka et al., 2003) (modulo a
357

fiFaber, Truszczynski, & Woltran

minor simplification mentioned earlier). Obviously, other choices could be considered, too.
For instance, we could define irrelevant outcomes to be the least desirable with respect to
the rule. We could also restrict attention only to selectors that do no permit irrelevance at
all (a preference rule does not allow irrelevance if it has no body and if the disjunction of
all options in the head is a tautology). This would eliminate the need to address that issue
altogether, however, at the price of a more constraining definintion of selector rules.
Ultimately, the question what is the right design choice here is of secondary importance
as the semantics of preference rules we adopted provides us the flexibility to represent other
possible definitions. In particular, we note that the semantics of the rule
1 > . . . > n  
is the same as that of the rule
1   > . . . >  n    .
In other words, the conditions (the rule bodies) are only a modeling device making preference
rules better correspond to conditional preferences expressed in natural language. They can
be compiled away. As for the second type of irrelevance, the formalism of selectors allows
the user to override the default we adopted. We can make our adopted design choice explicit,
that is, making outcomes not satisfying any of the options in the head explicitly the most
desirable. Intuitively, it is sufficient to rewrite the rule (without body, since bodies can be
removed, as shown earlier)
1 > . . . > n 
to
1  (1  . . .  n ) > . . . > n ,
or, equivalently,
1  (2  . . .  n ) > . . . > n 
while the following rewriting makes them least desirable:
1 > . . . > n  (1  . . .  n ) ,
or, equivalently,
1 > . . . > n  (1  . . .  n1 )  .
Another question concerns rules with only one option in the head. Intuitively, given
our semantics they should not be important, because their satisfaction degree is always 1.
Indeed, Corollary 12 later in the paper provides a formal result that confirms this statement.
Optimal (preferred) outcomes. For an optimization problem P , (P ) denotes the set
of all outcomes of P , that is, the set of all models (under the selected semantics) of the
generator of P . Thus, (P ) stands for all models of P in the framework of CO problems
and for all answer sets of P , when ASO problems are considered. A model I  (P ) is
optimal or preferred for P if there is no model J  (P ) such that J >P I. We denote the
set of all preferred models of P by (P ).
The following lemma asserts that if the preference relation of two optimization problems
is equal on their sets of outcomes, then the preferred models coincide. This result follows
358

fiStrong Equivalence of Qualitative Optimization Problems

immediately from the definitions and will be useful in the sequel. Its statement brings up a
subtle notational issue. Formally, a (strict) preorder is a pair (D, >), where D is a set (the
domain of the preorder) and > is a transitive acyclic binary relation on D (the preorder
relation). Two preorders are equal if they have the same domain and the same relation on
that domain. Typically, whenever the domain is understood, we refer to preorders just by
pointing to their relation symbols. Often, however, we write >D for the preorder relation
symbol to make the domain explicit in the notation. This is what we do in the statement
of the result below.
Lemma 2 Let P and Q be optimization problems with >P(P ) = >Q
(Q) . Then, (P ) = (Q).
Proof.
As observed above, the equality of preorders implies the equality of the domains. In our case, the equality >P(P ) = >Q
(Q) implies (P ) = (Q). Hence, for each
P
Q
I, J  (P ) = (Q), I > J iff I > J. The result follows now directly from the definition
of preferred outcomes. 2
We also observe that eliminating rules of large ranks can only make unpreferred outcomes preferred, and never make preferred outcomes unpreferred. We recall that, for a
given optimization problem P = (T, S), P<i = P[1,i1] = (T, S[1,i1] ) is the corresponding
optimization problem with all rules with rank i or higher removed.
Lemma 3 For every optimization problem P and every i  1, (P<i )  (P ).
Proof. Let us assume that I 
/ (P<i ). In case I 
/ (P<i ), we have I 
/ (P ), and I 
/ (P )
P
<i
follows. Otherwise, there is an interpretation J  (P<i ) such that J >
I. Thus, there
s , say of rank j, such that (i) v (r) < v (r); (ii) for every r 0  P s with the
is a rule r  P<i
J
I
<i
s with rank less then j, v (r 0 ) = v (r 0 ).
rank j, vJ (r0 )  vI (r0 ); and (iii) for every r0  P<i
J
I
We note that, since (P<i ) = (P ), J  (P ). Moreover, j < i and so the sets of rules
s coincide. Thus, J >P I follows and,
with ranks less than or equal to j in P s and P<i
consequently, I 
/ (P ). 2

2.2 Notions of Equivalence
We define the union of optimization problems as expected, that is, for P1 = (T1 , S1 ) and
P2 = (T2 , S2 ), we set P1  P2 = (T1  T2 , S1  S2 ). Two optimization problems P1 and
P2 are strongly equivalent with respect to a class R of optimization problems (referred
to as a class of contexts or simply contexts) if for every optimization problem R  R,
(P1  R) = (P2  R).
We consider three general classes of contexts. First and foremost, we are interested in
the class LU of all optimization problems over U. We also consider the families LgU and
LsU of all optimization problems of the form (T, ) and (, S), respectively. The first class
consists of optimization problems which, when added to any other problem, can affect the
set of feasible outcomes but cannot affect the preference relation. We call such optimization
problems generator problems. The second class consists of optimization problems which,
when added to any other problem, do not change the set of feasible outcomes but change
359

fiFaber, Truszczynski, & Woltran

(in general) the preference relation. We call such optimization problems selector problems.
These one-dimensional contexts provide essential insights into the general case. For these
two classes, we speak of strong gen-equivalence, denoted g , and strong sel-equivalence,
denoted s , respectively. For the general class LU of all optimization problems we simply
speak of strong equivalence, denoted sg .
We recall that the notion of strong equivalence is, by definition, underlying the replacement property. In fact, for an optimization problem P = (T, S) containing a subproblem
Q = (T 0 , S 0 ) (i.e. T 0  T and S 0  S) we can guarantee that Q can be replaced in P
by another subproblem R without changing the optimal outcomes, if Q sg R. Indeed, if
Q sg R holds, one can faithfully replace Q by R in any optimization problem (otherwise
we would have (Q  P 0 ) 6= (R  P 0 ) for some P 0  LU ).
Constraining ranks of rules in selectors gives rise to additional classes of contexts parameterized by rank intervals [i, j]:
s,[i,j]

1. LU

[i,j]

2. LU

= {(, S)  LsU | S = S[i,j] }

= {(T, S)  LU | S = S[i,j] }

The first class of contexts gives rise to strong sel-equivalence with respect to rules of
rank in [i, j], denoted by s,[i,j] . The second class of contexts yields the concept of strong
s,[i,j]
equivalence with respect to rules of rank in [i, j]. We denote it by g
. We call problems
[1,1]
=1
in the class LU = LU simple optimization problems.
2.3 Relation to Other Preference Formalisms
Optimization problems are most closely related to ASO programs (Brewka et al., 2003).
The formalism of optimization problems extends ASO programs in several ways. First,
the generators of optimization problems are arbitrary propositional theories. Under the
semantics of equilibrium models, the generators properly extend logic programs with the
answer-set semantics, which are used as generators in ASO programs. Second, the selectors
of optimization problems use arbitrary propositional formulas in the heads of preference
rules, as well as for conditions in their bodies, which again generalizes the selectors of
ASO programs. Finally, optimization problems explicitly allow for alternative semantics of
generators, a possibility mentioned but not pursued by Brewka et al. (2003).
As we already noted in the introduction there is vast literature on preference representation and reasoning (The special issue of Artificial Intelligence Magazine, Goldsmith &
Junker, 2008, and the monograph by Kaci, 2011, are two comprehensive sources of relevant
references. For a survey on preference approaches on top of nonmonotonic formalisms, see
Delgrande, Schaub, Tompits, & Wang, 2004). Discussing it goes beyond the scope of the
present paper, especially as the problem that we focus on here (strong equivalence) has
not been considered much in the preference research before, and there are essentially no
relevant earlier results except those we already mentioned in the introduction (Faber &
Konczak, 2006; Faber et al., 2008; Eiter et al., 2007a). Nevertheless, since our work uses
the preference formalism of ASO problems, an extension of the formalism of ASO programs
by Brewka et al. (2003) that has not received as much attention in the preference research
as some others, we will make a few comments on our choice.
360

fiStrong Equivalence of Qualitative Optimization Problems

First, ASO problems are explicit about the constraints that must not be violated (the
generator part) and preferences, that is, weaker constraints that only make some outcomes
more desirable than others (the selector part). In that ASO problems match well with practical settings, as typically both kinds of constraints are at play. For instance, in a product
configuration problem there are physical constraints limiting the space of available possibilities (not every type of engine can be put in a small family sedan, moon roof is not available
with the basic engine option, etc.), as well as user preferences that describe what the user
would like to have if possible. Preferential reasoning (optimization) in the presence of (hard)
constraints has received substantial attention. A representative approach in which CP-nets
(Boutilier, Brafman, Domshlak, Hoos, & Poole, 2003) are combined with constraints was
described in the paper by Boutilier, Brafman, Domshlak, Hoos, and Poole (2004).
The choice of propositional logic to represent constraints (the generator part in our formalism) is standard. However, in contrast with other approaches, in addition to the classical
semantics we also consider an appealing alternative, the semantics of answer sets. This is
important as the resulting formalism of answer-set programming (Marek & Truszczynski,
1999; Niemela, 1999) is steadily gaining on acceptance as a constraint language and is
supported by ever improving computational tools (Calimeri, Ianni, Krennwallner, & Ricca,
2012).
On the other hand, our choice of the formalism for the selector part is less obvious.
There are several reasons that motivated us. The first, and the one we already mentioned
earlier, is that preference rules have a natural reading agreeing well with the linguistic
patterns that humans use when formulating qualitative conditional preferences. Second,
as demonstrated in the original work where ASO selectors were introduced (Brewka et al.,
2003), they can be used to approximate preference relations that are defined by CP-nets
(Boutilier et al., 2003), one of the most broadly studied qualitative preference systems,
but has better computational properties. For instance, the dominance problem is in P
as opposed to being NP-hard or even PSPACE-complete for some generalized classes of
CP-nets (Goldsmith, Lang, Truszczynski, & Wilson, 2008).
Third, individual preference rules are closely related to one of the standard approaches
to representing preferences based on possibilistic logic. In that approach (we only give the
most basic details here, for a more comprehensive discussion we refer to Kaci, 2011, Ch.
3.3.3), a preference theory consists of formulas, each with a distinct rank (the assumption
that ranks are distinct is not limiting as formulas with repeating ranks can be conjuncted
into a single formula of that rank). The quality of an outcome is given by its score defined
as the minimum rank of a formula that the outcome does not satisfy (, if all formulas are
satisfied). The higher the score, the better the outcome. Let {1 , . . . , n } be a preference
theory, with the index i in i representing the rank of i . It is clear that the preference
semantics of that theory as described above is precisely captured by our preference rule
n > n1 > . . . > 1 > 1 
where i = 1  . . .  i , for i = 1, . . . , n. Thus, ASO problems subsume the preference
formalism based on possibilistic logic.
Finally, the selector part of ASO problems typically consists of several preference rules
and these rules may have different ranks. That allows us to model preferences coming from
different sources and having different importance. In such cases, the main issue is that
361

fiFaber, Truszczynski, & Woltran

of integrating these individual preferences into a single order. There is no single broadly
accepted way to do so. The approach used by our formalism boils down to the Pareto
principle, arguably the common core of all such integration principles. Accordingly, our
formalism allows conflicting rules in the selector (for instance, a > b  and b > a ) but
leaves such conflicts unresolved resulting in incomparability. As for the ranks, the lower the
rank, the more important the rule is. Rules of less importance are used to compare outcomes
only if the rules of more importance do not distinguish them. This way of handling ranks
is natural and shows up in many preference formalisms.
One prominent example in this context is prioritized (propositional) circumscription
(Lifschitz, 1985), where minimization (of certain atoms in models of a formula) is defined
with respect to classes of atoms of different priority. Formally, let T be a theory over
atoms A and (P1 , . . . , Pn , V, F ) be a partition on A. Then, a model M  Mod (T ) is called
(P1 , . . . , Pn , V, F )-minimal if there is no N  Mod (T ), such that (i) N  (P1      Pi1 ) =
M  (P1      Pi1 ) and N  Pi  M  Pi for some 1 Si  n, and (ii) N  F = M  F . The
intuition behind the definition is that atoms in P = i Pi are to be minimized, with the
assignments to V allowed to vary, while assignments to F are to be kept fixed. Atoms in P
are minimized such that those in P1 have the highest priority followed by those in P2 , etc.
The relation to ranks is quite obvious. One can show that the (P1 , . . . , Pn , V, F )-minimal
models of a theory T coincide with the preferred outcomes of the CO problem X = (T, S),
where the selector S is given by
1

1

S = {f > f  > | f  F }  {f > f  > | f  F }
i

 {p > p  > | p  Pi , 1  i  n}).
Indeed preference rules in the first two sets ensure that only interpretations with the same
fixed part are comparable, and preference rules in the last group precisely reflect the prioritized process of minimization of atoms in P1  . . .  Pn .
Let us just finally mention here that our formalism of optimization problems gives not
only a handle for classical prioritized circumscription, but also for circumscription put on
top of logic programs (this is not meaningless, as in the forms currently prevalent in answer
set programming, answer sets are not necessarily minimal models, see for instance Simons,
Niemela, & Soininen, 2002). To this end it suffices to apply the embedding using ASO
problems instead of CO problems.

3. Strong Sel-Equivalence
We start by analyzing the case of strong sel-equivalence that turns out to be the core case
for our study. Indeed, characterizations of strong sel-equivalence naturally imply characterizations for the general case thanks to the following simple observation.
Proposition 4 Let P and Q be optimization problems (either under classical or answer-set
s,[i,j]
semantics for the generators) and [i, j] a rank interval. Then P g
Q if and only if for
every generator R  LgU , P  R s,[i,j] Q  R.
s,[i,j]

Proof. () Let R  LgU . Since P g

s,[i,j]

Q, P  R g
362

Q  R and so, P  R s,[i,j] Q  R.

fiStrong Equivalence of Qualitative Optimization Problems

[i,j]

() Let R be any optimization problem in LU . We have P R = (P (Rg , ))(, Rs ) and
QR = (Q(Rg , ))(, Rs ). Moreover, by the assumption we have that P (Rg , ) s,[i,j]
Q  (Rg , ). Thus,
((P  (Rg , ))  (, Rs )) = ((Q  (Rg , ))  (, Rs )).
s,[i,j]

It follows that (P  R) = (Q  R) and, consequently, that P g

Q. 2

Furthermore, the set of outcomes of an optimization problem P is unaffected by changes
in the selector module. It follows that the choice of the semantics for generators does not
matter for characterizations of strong sel-equivalence. Thus, whenever in this section we
refer to the set of outcomes of an optimization problem P , we use the notation (P ), and
not the more specific one, Mod (P g ) or AS (P g ), that applies to CO and ASO problems,
respectively.
To formally state the subsequent results, we need one more auxiliary notation. For an
optimization problem P , we define diff P (I, J) to be the largest k such that I P<k J. If
for every k we have I P<k J, then we set diff P (I, J) = . It is clear that diff P (I, J) is
well-defined. Moreover, as I P<1 J, diff P (I, J)  1. The following lemma characterizes
the relation >P Q for ranked optimization problems P and Q.
Lemma 5 Let P and Q be optimization problems, and I, J be interpretations. Then,
I >P Q J holds if and only if one of the following conditions holds:
1. diff P (I, J) < diff Q (I, J) and I >P J;
2. diff P (I, J) > diff Q (I, J) and I >Q J;
3. diff P (I, J) = diff Q (I, J), I >P J and I >Q J.
Proof. The if direction is evident. To prove the only-if direction, we note that the
cases diff P (I, J) < diff Q (I, J) and diff P (I, J) > diff Q (I, J) are obvious, too. Thus, let us
assume diff P (I, J) = diff Q (I, J) = i. Clearly, i <  (otherwise, I P Q J, contrary to the
assumption). It follows that for every rule r  P s  Qs of rank less than i, vI (r) = vJ (r).
Next, for every r  P s  Qs of rank i, vI (r)  vJ (r). Finally, there are rules r  P s and
r0  Qs , each of rank i such that vI (r) 6= vJ (r) and vI (r0 ) 6= vJ (r0 ) (since diff P (I, J) = i
and diff Q (I, J) = i). It follows that vI (r) < vJ (r) and vI (r0 ) < vJ (r0 ). Thus, I >P J and
I >Q J, as needed. 2
Our first main result concerns strong sel-equivalence relative to selectors consisting of
preference rules of ranks in a rank interval [i, j]. Special cases for strong sel-equivalence will
follow as corollaries.
Considering strong sel-equivalence means that preference rules may be added to optimization problems. There are three main effects of doing so: outcomes that are equally good
may become strictly comparable, strict comparability may be turned into incomparability,
and the order of strict comparability may be reversed. To illustrate these phenomena, we
show how they may affect strong sel-equivalence using the forthcoming examples. Importantly, they lead us towards conditions that are necessary for strong sel-equivalence and
that motivate our characterization of that property that we formally state in Theorem 6.
363

fiFaber, Truszczynski, & Woltran

Example 2 Let P1 = (T1 , S1 ), where T1 is a theory generating exactly two outcomes {a}
and {b} (for example {a  b}) and S1 =  is empty. Clearly, (P1 ) = {{a}, {b}}, because
{a} and {b} are equally good with respect to P1 . It is possible to make them comparable
i
by adding new preference rules. For example, let R1 = (, {a > b }), where i  1. Now,
{a} >P1 R1 {b} and thus (P1  R1 ) = {{a}}. It is evident that for any pair of equally good
interpretations I, J one can find a context consisting only of preference rules that will make
I strictly preferred to J (each new rule should have I at least as preferred as J and one of
them should strictly prefer I to J), and that the precise ranks in such a context are not of
importance.
Example 3 Let P2 = (T1 , S2 ), where T1 is a theory generating exactly two outcomes {a}
i
and {b}, and S2 = {a > b } for some rank i  1. Clearly, {a} >P2 {b} and therefore
(P2 ) = {{a}}. It is possible to make {a} and {b} incomparable by adding an appropriate
i
context, for example R2 = (, {b > a }). We obtain {a} >
6 P2 R2 {b} and {b} >
6 P2 R2 {a},
thus (P2  R2 ) = {{a}, {b}}.
It is important to note that the rank of the context preference rule must be exactly equal
to the rank of the original preference rule in order to achieve this effect, otherwise one
preference rule would override the other. In general, for any pair of strictly comparable
interpretations I, J one can find an appropriate context that makes I and J incomparable,
but in contrast to Example 2, the context must make use of rules of particular ranks.
Example 4 Let P3 = (T1 , S3 ), where T1 is a theory admitting exactly two outcomes {a}
i
and {b}, and S3 = {a > b } for some rank i  2. Clearly, {a} >P3 {b} and therefore
(P3 ) = {{a}}. It is possible to reverse the comparability of {a} and {b} by adding an
1
appropriate context, for example R3 = (, {b > a }). We obtain {b} >P3 R3 {a}, thus
(P3  R3 ) = {{b}}.
It is important to note that, in order to achieve this effect, the context must contain
preference rules of lower ranks than the preference rules that originally ordered I and J,
as that original ordering has to be overridden. This also means that the technique is not
applicable for preference rules of rank 1. In general, for any pair of strictly comparable
interpretations I, J, where the comparison stems from preference rules of rank > 1, adding
any context consisting of preference rules of lower rank that reverse comparability of I and J
results in the reversed strict order. As in Example 3, the context must make use of particular
ranks.
These three effects may be exploited in order to construct examples of problems that
are not strongly sel-equivalent and suggest necessary conditions for strong sel-equivalence.
The first effect can turn preferred outcomes into non-preferred, while the second and third
can turn non-preferred outcomes into preferred ones. The second and third effects imply
conditions that are more specialized (context that needs rules of particular ranks).
2

3

Example 5 Consider P4 = (T1 , {a > b }) and Q4 = (T1 , {a > b }), where T1 is a
theory admitting exactly two outcomes {a} and {b}. We have {a} >P4 {b}, {a} >Q4 {b},
and (P4 ) = (Q4 ) = {{a}}. The two problems are therefore equivalent. However, there is
364

fiStrong Equivalence of Qualitative Optimization Problems

a discrepancy with respect to the ranks of the preference rules, which we can take advantage
of in order to show that the programs are not strongly sel-equivalent.
3
Let us consider the context R4 = (, {b > a }). This context exploits the second effect
mentioned above and makes {a} and {b} incomparable with respect to Q4 extended with
R4 ({a} 6>Q4 R4 {b} and {b} 6>Q4 R4 {a}) thus turning also {b} into a preferred outcome
(Q4  R4 ) = {{a}, {b}}. On the other hand, the new preference rule has no effect on P4 ,
as its rank is weaker than that of the only preference rule of P4 , hence (P4  R4 ) = {{a}},
and therefore P4 6s,[3,i] Q4 for all i  3.
Analyzing this example, we can observe that what the context R4 exploits is a difference
in the preferred outcomes when considering only preference rules of rank lower than 3.
Indeed, ((P4 )<3 ) = {{a}} and ((Q4 )<3 ) = {{a}, {b}}.
2

4

Example 6 Next, let us consider P5 = P4 = (T1 , {a > b }) and Q5 = (T1 , {a > b }),
where T1 is a theory admitting exactly two outcomes {a} and {b}. We have {a} >P5 {b},
{a} >Q5 {b}, and (P5 ) = (Q5 ) = {{a}}. Also here, we can observe that ((P5 )<3 ) =
{{a}} and ((Q5 )<3 ) = {{a}, {b}}. The only difference to Example 5 is that the preference
rule in Q5 is of rank 4.
Also here it is possible to construct a context that witnesses that P5 is not strongly sel3
3
equivalent to Q5 , using only preference rules of rank 3: R5 = (, {a > b , b > a }).
Here, we directly add conflicting preference rules that override the preference rule in Q5
and are overridden by the preference rule in P5 . So, also here we get (P5  R5 ) = {{a}}
and (Q5  R5 ) = {{a}, {b}}, and P5 6s,[3,i] Q5 for all i  3.
Examples 5 and 6 motivate condition (1) of Theorem 6. Moreover, it is also rather easy
to see that any counterexample to P s,[i,j] Q will involve only outcomes from (P<i ) =
(Q<i ), as no selector context in the rank interval [i, j] can make other outcomes preferred.
However, from a different point of view, condition (1) of Theorem 6 is also fairly weak, as
it does not cover some easy cases of strong sel-non-equivalence, as shown in the following
example.
2

2

Example 7 Let us define P6 = P4 = (T1 , {a > b }) and Q6 = (T1 , {b > a }), where T1
is a theory admitting exactly two outcomes {a} and {b}. We have {a} >P6 {b}, {b} >Q6 {a},
and (P6 ) = {{a}} 6= (Q6 ) = {{b}}. So P6 and Q6 are not even equivalent, hence also
P6 6s,[i,j] Q6 for any rank interval [i, j]. However, ((P6 )<2 ) = {{a}, {b}} and ((Q6 )<2 ) =
{{a}, {b}}. So condition (1) of Theorem 6 is satisfied for rank intervals [2, j].
Condition (2) of Theorem 6 covers cases like the one in Example 7. This example is
rather simple, as it does not even require a context in order to create a witness for strong
sel-non-equivalence, while in general one has to create a context in order to make certain
outcomes preferred. What remains to be considered are cases in which there is a discrepancy
stemming from preference rules inside the context rank interval.
2

3

Example 8 Let P7 = (T1 , {a > b }) and Q7 = (T1 , {a > b }), where T1 is a theory
admitting exactly two outcomes {a} and {b} (this is the pair of problems P4 and Q4 from
2
Example 5). Consider now the context R7 = (, {b > a }). Unlike R4 in Example 5, this
365

fiFaber, Truszczynski, & Woltran

rule has rank 2. The context makes {a} and {b} incomparable with respect to the extended
P7 ({a} 6>P7 R7 {b} and {b} 6>P7 R7 {a}), thus turning {b} into a preferred outcome, and
keeping {a} as such. Therefore, (P7  R7 ) = {{a}, {b}}. On the other hand, the new
preference rule overrides the one of Q7 , turning {b} into a preferred outcome and making
{a} non-preferred, (Q7  R7 ) = {{b}}. Therefore P7 6s,[2,i] Q7 for all i  2.
Unlike in Example 5, ((P7 )<2 ) = ((Q7 )<2 ) = {{a}, {b}}, so there is a different reason that allows for this counterexample. Here, we observe that diff P7 ({a}, {b}) = 2 6=
diff Q7 (a, b) = 3, which allows for adding an appropriate preference rule of rank 2. It is
important that we had to add a rule of one of the two differing ranks. Indeed, there is
no context comprising only rules of rank one that can serve as a counterexample to strong
sel-equivalence, and indeed P7 s,[1,1] Q7 .
This finally motivates condition (3) of Theorem 6: if there are two outcomes (as discussed
earlier, we can restrict ourselves to outcomes in (P<i ) = (Q<i ) for a context rank interval
[i, j]) which differ on ranks such that one of the ranks is inside the rank interval, we can use
constructions as in Example 8 in order to obtain a counterexample to strong sel-equivalence.
We can show that the three conditions of Theorem 6 indeed do characterize strong selequivalence.
Theorem 6 For all ranked optimization problems P and Q, and every rank interval [i, j],
P s,[i,j] Q if and only if the following conditions hold:
1. (P<i ) = (Q<i )
2. >P(P<i ) = >Q
(Q<i )
3. for every I, J  (P<i ) such that i < diff P (I, J) or i < diff Q (I, J), diff P (I, J) =
diff Q (I, J) or both diff P (I, J) > j and diff Q (I, J) > j.
The proof of this result is quite involved and requires several auxiliary properties. We
provide it in the appendix (together with proofs of our other main results).
Next, we discuss some special cases of the characterization in Theorem 6. First, we
consider the case i = 1, which allows for a simplification of Theorem 6.
Corollary 7 For all ranked optimization problems P and Q, and every rank interval [1, j],
P s,[1,j] Q if and only if the following conditions hold:
1. (P ) = (Q)
2. >P(P ) = >Q
(Q)
3. for every I, J  (P ), diff P (I, J) = diff Q (I, J) or both diff P (I, J) > j and diff Q (I, J) >
j.
Proof. Starting from Theorem 6, we note that the selectors of P<1 and Q<1 are empty and
hence (P<1 ) = (P ) and (Q<1 ) = (Q). Moreover, if the precondition i < diff P (I, J)
or i < diff Q (I, J) in condition (3) of Theorem 6 is not satisfied for i = 1 and a pair
I, J  (P ), then one of diff P (I, J) = 1 and diff Q (I, J) = 1 holds, and together with
366

fiStrong Equivalence of Qualitative Optimization Problems

diff P (I, J) = diff Q (I, J) the consequent is satisfied in that case as well, which allows for
omitting the precondition. 2
If in addition j = , we obtain the case of rank-unrestricted selector contexts, and
condition (3) can be simplified once more, since diff P (I, J) > j and diff Q (I, J) > j never
hold for j = .
Corollary 8 For all optimization problems P and Q, P s Q (equivalently, P s,1 Q or
P s,[1,] Q) if and only if the following conditions hold:
1. (P ) = (Q)
2. >P(P ) = >Q
(Q)
3. for every I, J  (P ), diff P (I, J) = diff Q (I, J).
Next, we note that if an optimization problem P is simple (all rules are of rank 1), then
diff P (I, J) > 1 if and only if diff P (I, J) = , which is equivalent to I P J. This observation leads to the following characterization of strong sel-equivalence of simple optimization
problems.
Corollary 9 For all simple optimization problems P and Q, the following statements are
equivalent:
(a) P s Q (equivalently, P s,[1,] Q)
(b) P s,=1 Q (equivalently, P s,[1,1] Q)
(c) (P ) = (Q) and P(P ) =Q
(Q) .
Proof. The implication (a)(b) is evident from the definitions.
(b)(c) From Corollary 7, with j = 1, we obtain (P ) = (Q). The condition P(P ) =Q
(Q)
follows from conditions (2) and (3) of that corollary. Indeed, let us consider I, J  (P )
such that I P J and distinguish two cases. If (i) diff P (I, J) = 1 then I >P J and by
condition (2) of Corollary 7, also I >Q J, implying I Q J. If (ii) diff P (I, J) > 1 then
by condition (3) of Corollary 7, diff Q (I, J) > 1. Since P, Q are simple, I Q J, and
consequently I Q J. By symmetry, we also have that I Q J implies I P J. Thus,
P(P ) =Q
(Q) .
Q
P
(c)(a) From (c) it follows by Lemma 1 that >P(P ) =>Q
(Q) and (P ) =(Q) . Thus,
conditions (1) and (2) of Corollary 8 follow. To prove condition (3), let us first assume
diff P (I, J) > 1 for I, J  (P ). It follows that diff P (I, J) =  and thus I P(P ) J. Since
Q
Q
P
Q
P(P ) =Q
(Q) , we get I (Q) J and thus diff (I, J) = . Hence diff (I, J) = diff (I, J).

For diff Q (I, J) > 1 we reason analogously. In the last remaining case, diff P (I, J) = 1 and
diff Q (I, J) = 1. Thus, we directly obtain diff P (I, J) = diff Q (I, J). By Corollary 8, P s Q
follows. 2

367

fiFaber, Truszczynski, & Woltran

Corollary 9 shows, in particular, that for simple problems there is no difference between
the relations s,1 and s,=1 . This property reflects the role of preference rules of rank 2
and higher. They allow us to break ties among optimal outcomes, as defined by preference
rules of rank 1. Thus, they can eliminate some of these outcomes from the family of optimal
ones, but they cannot introduce new optimal outcomes. Therefore, they do not affect strong
sel-equivalence of simple problems. This property has the following generalization to ranked
optimization problems.
Corollary 10 Let P and Q be ranked optimization problems and let k be the maximum
rank of a preference rule in P  Q. Then the relations s,k (equivalently, s,[k,] ) and
s,=k (equivalently, s,[k,k] ) coincide.
Proof. Clearly, P s,k Q implies P s,=k Q. Thus, it is enough to prove that if P s,=k Q
then P s,k Q. Using the characterization of Theorem 6, we observe that conditions (1)
and (2) for P s,=k Q and P s,k Q are the same. Since P s,=k Q, we have that for
every I, J  (P<k ) such that k < diff P (I, J) or k < diff Q (I, J), diff P (I, J) = diff Q (I, J)
or both diff P (I, J) > k and diff Q (I, J) > k. Let us consider I, J  (P<k ) such that
diff P (I, J) > k. It follows that diff Q (I, J) > k. Since k is the maximum rank of a preference rule in P or Q, diff P (I, J) =  and diff Q (I, J) = . Thus, diff P (I, J) = diff Q (I, J).
The case diff Q (I, J) > k is similar and we obtain that for every I, J  (P<k ) such that
k < diff P (I, J) or k < diff Q (I, J), diff P (I, J) = diff Q (I, J). That property implies condition (3) for P s,k Q. Thus, P s,k Q follows. 2
Our observation on the role of preference rules with ranks higher than ranks of rules in
P or Q also implies that P and Q are strongly sel-equivalent relative to selectors consisting
exclusively of such rules if and only if P and Q are equivalent (have the same optimal
outcomes), and if optimal outcomes that tie in P also tie in Q and conversely. Formally,
we have the following result.
Corollary 11 Let P and Q be ranked optimization problems and let k be the maximum
rank of a preference rule in P  Q. Then P s,k+1 Q if and only if (P ) = (Q) and
P(P ) =Q
(Q) .
Proof. Clearly, P<k+1 = P and Q<k+1 = Q and so, (P<k+1 ) = (P ) and (Q<k+1 ) =
(Q). Thus, the only-if part follows by Theorem 6 (condition (1) of that theorem reduces
to (P ) = (Q) and condition (3) implies P(P ) =Q
(Q) ). To prove the if part, we note
that condition (1) of Theorem 6 holds by the assumption. Moreover, the relations >P(P ) and
>Q
(Q) are empty and so, they coincide. Thus, condition (2) of Theorem 6 holds. Finally, if
I, J  (P ), and diff P (I, J) > k + 1, then diff P (I, J) =  and so, I P J. By the assumption, I Q J, that is, diff Q (I, J) =  = diff P (I, J). The case when diff Q (I, J) > k + 1 is
similar. Thus, condition (3) of Theorem 6 holds, too, and P s,k+1 Q follows. 2
Lastly, we give some simple examples illustrating how our results can be used to safely
modify or simplify optimization problems, that is rewrite one into another strongly selequivalent one.
368

fiStrong Equivalence of Qualitative Optimization Problems

Example 9 Let P = (T, S), where T = {a  b  c, (a  b), (a  c), (b  c)} and S = {a >
c , b > c }, and P 0 = (T, S 0 ), where S 0 = {a  b > c }. Regarding these problems
as CO problems, we have that (P ) = (P 0 ) = {{a}, {b}, {c}}. Moreover, it is evident that
0
P(P ) =P(P 0 ) . Thus, by Corollary 9, P and P 0 are strongly sel-equivalent. In other words,
we can faithfully replace rules a > c , b > c  in the selector of any optimization problem
with generator T by the single rule a  b > c .
For an example of a more general principle, we note that removing preference rules with
only one formula in the head yields a problem that is strongly sel-equivalent.
Corollary 12 Let P and Q be two CO or ASO problems such that P g = Qg and Qs is
obtained from P s by removing all preference rules with only one formula in the head (i.e.,
rules r for which |hd (r)| = 1). Then P and Q are strongly sel-equivalent.
Proof. Conditions (1)-(3) of Theorem 6 all follow from an observation that for every interpretation I and every preference rule r with |hd (r)| = 1, vI (r) = 1. 2

4. Strong Gen-Equivalence
We now focus on the case of strong gen-equivalence. The semantics of generators makes
a difference here but the difference concerns only the fact that under the two semantics
we consider, the concepts of strong equivalence are different. Other aspects of the characterizations are the same. Specifically, generators have to be strongly equivalent relative to
the selected semantics. Indeed, as the following example shows, if the generators are not
strongly equivalent, one can extend them uniformly so that after the extension one problem
has a single outcome, which is then trivially an optimal one, too, while the other one has
no outcomes and so, no optimal ones.
Example 10 Consider a CO problem P8 = (T8 , S8 ), where T8 = {a  b} and S8 = {a >
b }. There are two outcomes here, {a} and {b}, that is, (P8 ) = {{a}, {b}}. Let r be the
only preference rule in S8 . Clearly, v{a} (r) = 1 and v{b} (r) = 2. Thus, {a} >P8 {b} and so,
(P8 ) = {{a}}.
In addition, let Q8 = (T80 , S8 ) be a CO problem, where T80 = {a  b} and S8 is as
above. Then, (Q8 ) = {{a}} and, trivially, (Q8 ) = {{a}}. It follows that P8 and Q8
are equivalent, as they specify the same optimal outcomes. However, they are not strongly
gen-equivalent (and so, also not strongly equivalent). Indeed, let R8 = ({a}, ). Then
(P8  R8 ) = {{b}} and so, (P8  R8 ) = {{b}}. On the other hand, (Q8  R8 ) =  and,
therefore, (Q8  R8 ) = .
Moreover, the preference relation > defined by the selectors of the problems considered
must coincide.
Example 11 Let P9 = (T9 , S9 ) be a CO problem, where T9 = {a  b  c, (a  b), (a 
c), (b  c)} and S9 = {a > b , a > c }. We have (P9 ) = {{a}, {b}, {c}}, and
{a} >P9 {b}, {a} >P9 {c}, and {b} and {c} are incomparable. Thus, (P9 ) = {{a}}. Let
369

fiFaber, Truszczynski, & Woltran

now Q9 = (T9 , S90 ) be a CO problem, where S90 = {a > b > c }. Clearly, (Q9 ) = (P9 ) =
{{a}, {b}, {c}}. Moreover, {a} >Q9 {b} >Q9 {c}. Thus, (Q9 ) = {{a}} and so, P9 and Q9
are equivalent. However, they are not strongly (gen-)equivalent. Indeed, let R9 = ({a}, ).
Then, (P9  R9 ) = {{b}, {c}} but (P9  R9 ) = {{b}}.
The main insight here is that differences in the preference relation may be hidden
by preferred outcomes but, if they are present, they can be exposed by eliminating the
preferred outcomes that obscure them with the appropriately selected generator context.
All of these considerations apply to both the CO and ASO problems, and therefore we
formulate a single theorem that handles both types of problems.
Theorem 13 For all CO (ASO, respectively) problems P and Q, P g Q if and only if
P g and Qg are strongly equivalent (that is, Mod (P g ) = Mod (Q g ) for CO problems, and
ModHT (P g ) = ModHT (Qg ) for ASO problems) and >PMod(P g ) = >Q
Mod(Q g ) .
In view of Examples 10 and 11, the result is not unexpected. The two examples demonstrated that the conditions of the characterization cannot, in general, be weakened.
From Corollary 8 and Theorem 13, it follows that strong sel-equivalence of CO problems
is a stronger property than their strong gen-equivalence.
Corollary 14 For all CO problems P and Q, P s Q implies P g Q.
In general the implication in Corollary 14 cannot be reversed, as shown in the following
example.
Example 12 Let us consider problems P10 = (T10 , S10 ) and Q10 = (T10 , ), where T10 =
{a  b} and S10 = {a > b , b > a }. We have (P10 ) = (Q10 ) = {{a}, {b}}.
Moreover, {a} 6P10 {b} and {b} 6P10 {a}. Thus, (P10 ) = {{a}, {b}}. Since Qs10 =
, we also have (trivially) that {a} Q10 {b}. Thus, (Q10 ) = {{a}, {b}}, too, and the
problems P10 and Q10 are equivalent. They are not strongly sel-equivalent, though. Let
R10 = (, {a > b }). Then, P10  R10 = P10 and so, (P10  R10 ) = {{a}, {b}}. On the
other hand, {a} >Q10 R10 {b}. Thus, (Q10  R10 ) = {{a}}.
However, by virtue of Theorem 13, they are strongly gen-equivalent. Indeed, trivially
g
g
g
g
Mod (P10
) = Mod (Q10
) and, writing M for Mod (P10
) = Mod (Q10
), the relations >PM10 and
10
>Q
M are both empty and therefore equal.
The relation between strong sel-equivalence and strong gen-equivalence of ASO problem
is more complex. In general, neither property implies the other even if both problems P
and Q are assumed to be simple. It is so because P s Q if and only if AS(P g ) =
g
AS(Qg ) and PAS(P g ) =Q
AS(Qg ) (Corollary 9), and P g Q if and only of ModHT (P ) =
g
g
ModHT (Qg ) and >PMod(P g ) =>Q
Mod(Q g ) (Theorem 13). Now, AS(P ) = AS(Q ) (regular
equivalence of programs) does not imply ModHT (P g ) = ModHT (Qg ) (strong equivalence)
Q
P
and >PMod(P g ) =>Q
Mod(Q g ) does not imply AS(P g ) =AS(Qg ) .
We conclude the section with one more corollary concerning strong gen-equivalence of
problems with empty selectors.

370

fiStrong Equivalence of Qualitative Optimization Problems

Corollary 15 For all CO (ASO, respectively) problems P and Q such that P s = Qs = ,
P g Q if and only if P g and Qg are strongly equivalent under the respective semantics
(that is, Mod (P g ) = Mod (Q g ) for CO problems, and ModHT (P g ) = ModHT (Qg ) for ASO
problems).
The result is evident from the definitions. However, it is also an immediate consequence
of Theorem 13. Indeed, when optimization problems P and Q have empty selectors, the cong
g
dition >PMod(P g ) = >Q
Mod(Q g ) is equivalent to Mod (P ) = Mod (Q ), which is a consequence
of strong equivalence of P g and Qg . Thus, for problems with empty selectors the right
hand of the equivalence in the assertion of Theorem 13 reduces to just strong equivalence
of the generators.

5. Strong Equivalence  the Combined Case
Finally, we consider the relation sg , which results from considering contexts that combine
both generators and selectors. Since generators may vary here, as in the previous section,
the semantics of generators matters. But, as in the previous section, the difference boils
down to different characterizations of strong equivalence of generators.
We start with a result characterizing strong equivalence of CO and ASO problems
relative to combined contexts (both generators and selectors possibly non-empty) with
selectors consisting of rules of rank at least i and at most j, respectively.
Theorem 16 For all ranked CO (ASO, respectively) problems P and Q, and every rank
s,[i,j]
interval [i, j], P g
Q if and only if the following conditions hold:
1. P g and Qg are strongly equivalent (that is, Mod (P g ) = Mod (Q g ) for CO problems,
and ModHT (P g ) = ModHT (Qg ) for ASO problems)
2. >PMod(P g ) = >Q
Mod(Q g )
3. for every I, J  Mod (P g ) such that i < diff P (I, J) or i < diff Q (I, J), diff P (I, J) =
diff Q (I, J) or both diff P (I, J) > j and diff Q (I, J) > j
P

Q

<i
<i
4. >Mod(P
g ) = >Mod(Q g ) .

The corresponding characterizations for CO and ASO problems differ only in their respective conditions (1), which now reflect different conditions guaranteeing strong equivalence of generators under the classical and answer-set semantics. Moreover, the four conditions of Theorem 16 can be obtained by suitably combining and extending the conditions
of Theorem 6 and Theorem 13. First, as combined strong equivalence implies strong genequivalence, condition (1) is taken from Theorem 13. Second, we modify conditions (2)
and (3) from Theorem 6 replacing (P<i ) with Mod (P g ) (and accordingly (Q<i ) with
Mod (Qg )), as each classical model of P g can give rise to an optimal classical or equilibrium
one upon the addition of a context, an aspect also already visible in Theorem 13.
Finally, we have to add a new condition stating that the relations >P<i and >Q<i coincide
on the sets of models of P g and Qg . When generators are allowed to be extended, one can
make any two of their models to be the only outcomes after the extension. If the two
371

fiFaber, Truszczynski, & Woltran

outcomes, say I and J, are related differently by the corresponding strict relations induced
by rules with ranks less than i, say I >P<i J but not I >Q<i J, then I is optimal and J is
not optimal in the problem extending P no matter what preference rules of ranks from the
interval [i, j] we use (rules of rank i and higher have no effect on how I and J are ordered).
On the other hand, if I and J are incomparable by >Q<i , they remain incomparable after
Q is extended. If I and J are equally good with respect to rules of rank < i, they can be
rendered incomparable by means of preference rules of rank i. In each case, J is optimal
after Q is extended. Finally, if J >Q<i I, then J remains optimal no matter what preference
rules of ranks i and higher we add. It follows that if the two relations >P<i and >Q<i are
s,[i,j]
different, we cannot have P g
Q and the condition (4) is necessary.
As in the previous section, the case when the selectors of P and Q are empty reduces
to strong gen-equivalence of the generators.
Corollary 17 For all CO (ASO, respectively) problems P and Q such that P s = Qs =
s,[i,j]
, and for every rank interval [i, j], P g
Q if and only if P g and Qg are strongly
equivalent under the respective semantics (that is, Mod (P g ) = Mod (Q g ) for CO problems,
and ModHT (P g ) = ModHT (Qg ) for ASO problems).
The result is a simple consequence of Theorem 16. The condition (1) in that theorem
implies that Mod (P g ) = Mod (Q g ) and so, since the selectors of P and Q are empty, all the
remaining conditions become trivially true.
We conclude this section with observations concerning the relation sg for both CO and
ASO problems. The contexts relevant here may contain preference rules of arbitrary ranks.
We start with the case of CO problems, where the results are stronger. While they can be
derived from the general theorems above, we will present here arguments relying on results
from previous sections, which is possible since for CO problems equivalence and strong
equivalence of generators coincide.
We saw in the last section that for CO problems s is a strictly stronger relation than
g . In fact, for CO problems, s coincides with the general relation sg .
Theorem 18 For all CO problems P and Q, P sg Q if and only if P s Q.
Proof. The only-if implication is evident. To prove the converse implication, we will
use Proposition 4, which reduces checking for strong equivalence to checking for strong
sel-equivalence. Let R  LgU be a generator problem. Since P s Q, from Corollary 8 we
have Mod (P g ) = Mod (Qg ). Consequently, Mod ((P  R)g ) = Mod ((Q  R)g ). Writing M
for Mod (P g ) and M 0 for Mod ((P  R)g ) we have M 0  M . Thus, also by Corollary 8,
QR
>PMR
0 =>M 0 . Finally, condition (3) of Corollary 8 for P and Q implies condition (3) of
that corollary for P  R and Q  R (as R has no preference rules and M 0  M ). It follows,
again by Corollary 8, that P  R s Q  R. Thus, by Proposition 4, P sg Q. 2
In the case of simple CO problems and the ranked interval [1, 1], the argument above
can be repeated using instead of Corollary 8 the equivalence of (b) and (c) from Corollary
9. In this way, one can show that for simple CO problems, the relations s,=1
and s,=1
g
coincide. Thus, by Corollary 9 (the equivalence of (a) and (b)) and Theorem 18, for simple
CO problems all four relations sg , s,=1
, s,=1 , and s coincide and we obtain the following
g
result.
372

fiStrong Equivalence of Qualitative Optimization Problems

Corollary 19 For all simple CO problems P and Q, all properties P sg Q, P s,=1
Q,
g
P s,=1 Q and P s Q are equivalent.
For simple ASO problems we still have that sg and s,=1
coincide but in general these
g
notions are different from s and s,=1 (cf. the subtle difference in condition (c) compared
to Corollary 9).
Corollary 20 For all simple ASO problems P and Q, the following conditions are equivalent
s,[1,]

(a) P sg Q (equivalently, P g

Q)

s,[1,1]

(b) P s,=1
Q (equivalently, P g
g

Q)

(c) ModHT (P g )=ModHT (Qg ) and PMod(P g ) = Q
Mod(Qg ) .
Proof. The implication (a)(b) is evident.
Let us assume (b). By Theorem 16, we have ModHT (P g )=ModHT (Qg ). This identity
implies Mod (P g ) = Mod (Qg ). Let us assume that for some I, J  Mod (P g ), I PMod(P g ) J.
Q
If I >PMod(P g ) J then, by Theorem 16, I >Q
Mod(Qg ) J and so, I Mod(Qg ) J. Otherwise,

I P J and so, diff P (I, J) = . By Theorem 16, diff Q (I, J) > 1. Since Q is simple,
diff Q (I, J) = . Thus, I Q J and, also, I Q
Mod(Qg ) J. The converse implication follows
by symmetry. Thus, (c) holds.
Finally, we assume (c) and prove (a). To this end, we show that conditions (1)(4) of
Theorem 16 hold. Directly from the assumptions, we have that condition (1) holds. Condition (2) follows from Lemma 1. Moreover, we also have that Mod (P g ) = Mod (Qg ). To prove
condition (3), let us assume that I, J  Mod (P g ) and that diff P (I, J) > 1. Since P is simple,
I P J. Thus, I Q J and, consequently, diff P (I, J) =  = diff Q (I, J). Finally, condition
P<i
Q<i
g
g
(4), i.e. >Mod(P
g ) = >Mod(Q g ) , obviously holds in case i = 1 and Mod (P ) = Mod (Q ). 2

6. Complexity
In this section, we study the problems of deciding the various notions of strong equivalence.
Typically the comparisons between sets of outcomes in the characterizations determine the
respective complexity. We start with results concerning strong sel-equivalence.
Theorem 21 Given optimization problems P and Q, deciding P s Q is co-NP-complete
in case of CO problems and P2 -complete in case of ASO problems.
Proof. [Sketch, a detailed argument is provided in Appendix B.] For membership, we focus on
the complementary problem and consider pairs of interpretations I, J that violate at least
one of the conditions stated in Corollary 8. Clearly, if such a witness pair of interpretations
exists, there is also such a witness pair that is built only from atoms that occur in the
problems P and Q. Once such a pair is guessed, it can be verified in polynomial time (for
CO problems) or in polynomial time using an NP oracle (for ASO problems) that it indeed
373

fiFaber, Truszczynski, & Woltran

violates the conjunction of the three conditions from Corollary 8. The main observation is
that model checking is polynomial for the classical semantics, but co-NP-complete for the
equilibrium semantics (see Pearce, Tompits, & Woltran, 2009, Thm. 8).
Hardness follows from considering the equivalence problem for optimizations problems
with empty selectors, which is known to be co-NP-hard (for classical semantics) and P2 hard (for equilibrium semantics, see Pearce et al., 2009, Thm. 11). 2
For the ranked case, we observe an increase in complexity, which can be explained by
the characterization given in Theorem 6. Instead of outcome checking, this characterization
involves optimal outcome checking, which is more difficult (unless the polynomial hierarchy
collapses).
Theorem 22 Given optimization problems P and Q and a rank interval [i, j], deciding
P s,[i,j] Q is P2 -complete in case of CO problems and P3 -complete in case of ASO
problems.
Proof. [Sketch, a detailed argument is provided in Appendix B.] The membership part essentially follows the same arguments as the proof of Theorem 21, but here the problem of
deciding I  (P<i ) is in co-NP for CO problems and in P2 for ASO problems.
For the hardness part, we reduce the following problem to sel-equivalence of CO problems: Given two propositional theories S and T , decide whether they possess the same
minimal models. This problem is known to be P2 -complete (e.g., Eiter et al., 2007b,
Thm. 6.15), and the problem remains hard if S and T are in negation normal form (NNF)
given over the same alphabet. We adapt a construction used by Brewka et al., (2011).
Given a negation normal form theory T , we construct a CO problem PT by setting
PTg

= T [u/u0 ]  {u  u0 | u  U }, and

PTs

= {u0 > u | u  U },

where U denotes the set of atoms occurring in T , and T [u/u0 ] stands for the theory
resulting from replacing all u by u0 in T (we note that the ranks of rules in the selector
are 1).
The elements in (PT ) are in a one-to-one correspondence to the minimal models of
T . For theories S and T over U it follows that S and T have the same minimal models if
and only if (PS ) = (PT ). Since the problems PS and PT have the same selectors, that
latter condition is equivalent to PS s,2 PT (which can be shown directly or exploiting our
characterization of s,2 ).
Concerning the hardness part for ASO problems, we use the following problem: given
two open quantified Boolean formulas (QBFs) Y (X, Y ), Y (X, Y ), decide whether they
possess the same minimal models. This problem is P3 -hard (see Lemma 30 in Appendix
A). For (X, Y ), we construct P as follows:
Pg = {z  z 0 | z  X  Y } 
{(y  y 0 )  w, w  y, w  y 0 | y  Y } 
{[z/z 0 ]  w, w  w},
Ps = {x0 > x | x  X},
374

fiStrong Equivalence of Qualitative Optimization Problems

where [z/z 0 ] stands for the formula obtained by replacing all z by z 0 in (X, Y ) (again,
we stress that the ranks of rules in the selector are 1). The elements in (P ) are in a
one-to-one correspondence to the minimal models of Y (X, Y ). Now we can reason as
above and show that for  and  over X  Y , formulas Y (X, Y ) and Y (X, Y ) have
the same minimal models if and only if P s,2 P . 2
In Theorem 22 the rank interval [i, j] is given as input. When fixing the interval, the
hardness results still hold, provided that i > 1. In fact, the critical condition in Corollary 7
is (P<i ) = (Q<i ); for rank intervals [1, j], the selectors become empty and the condition
is reduced to (P ) = (Q), which is easier to decide.
Our characterizations imply that all the remaining problems are in co-NP. For strong
gen-equivalence, co-NP-hardness follows directly from Theorem 13 and co-NP-completeness
of deciding strong equivalence between two propositional theories (for both semantics).
Theorem 23 Given two CO (ASO, respectively) problems P and Q, deciding P g Q is
co-NP-complete.
Finally, for the combined case the hardness result follows from Theorem 16 and co-NPcompleteness of deciding strong equivalence of propositional theories.
Theorem 24 Given ranked CO (ASO, respectively) problems P and Q, and rank interval
s,[i,j]
[i, j], deciding P g
Q is co-NP-complete.
By construction, all hardness results hold already for simple optimization problems.

7. Discussion
We introduced the formalism of optimization problems, generalizing the principles of ASO
programs, in particular, the separation of hard and soft constraints (Brewka et al., 2003).
We focused on two important specializations of optimization problems: CO problems and
ASO problems. We studied various forms of strong equivalence for these classes of optimization problems, depending on what contexts are considered. Specifically, we considered
the following cases: new preference information is added, but the hard constraints remain unchanged (strong sel-equivalence); hard constraints are added but preferences remain
unchanged (strong gen-equivalence); both hard constraints and preferences can be added
(strong equivalence). To the best of our knowledge, this natural classification of equivalences in preference formalisms has not been studied yet. In certain cases some of these
notions coincide (Theorem 18) but this is no longer true when the underlying semantics is
changed or ranks in contexts are restricted.
In previous work, the notion of strong equivalence (both hard constraints and preferences
can be added) has been studied for logic programs with weak constraints by Eiter et al.,
(2007a) and logic programs with ordered disjunctions (LPODs) by Faber et al., (2008).
While for the former formalism, a separation of strong equivalence into different notions
 as suggested here for ASO problems  would be possible (it is instructive to compare
Eiter et al., 2007a, Lemma 23, to our results, e.g., Corollary 20), a similar separation for
strong equivalence is not straightforward for LPODs. The reason is the syntactic nature of
LPOD rules which act like hard constraints and preference rules at the same time. Faber et
375

fiFaber, Truszczynski, & Woltran

al., (2008) considered strong equivalence with respect to contexts that are logic programs
(which is similar to strong gen-equivalence) and the combined case of strong equivalence
(called strong equivalence for arbitrary contexts there), but they did not consider any
counterpart to the notion of strong sel-equivalence. In fact, it is even unclear whether in
every LPOD the generating and selecting modules can be cleanly separated.
In our paper, we established characterizations of all three types of strong equivalence.
They exhibit striking similarities. The characterizations of strong sel-equivalence for CO
and ASO problems in Theorem 6 are precisely the same, mirroring the fact that generators are not subject to change. Theorem 13 concerns strong gen-equivalence for CO and
ASO problems. In each case, the characterizations consist of two requirements: the strong
equivalence of generators, and the equality of the strict preference relations restricted to
the class of models of the generators. The only difference comes from the fact that strong
equivalence for classical and the equilibrium-model semantics have different characterizations. Theorem 16 which concerns the combined case of strong equivalence also does not
differentiate between CO and ASO problems other than implicitly (as before, the conditions
of strong equivalence are different for the two semantics). Moreover, the characterizations
provided by Theorem 16 arise in a rather systematic way from those given in Theorems 6
and 13. This being the case in each of the different semantics we used strongly suggests that
there are some abstract principles at play here. We are currently pursuing this direction,
conjecturing that this is an inherent feature of preference formalisms with separation of
logical and preferential constraints.
Coming back to LPODs, these comments suggest that identifying a split representation for that formalism might be of interest. It could lead to alternative characterizations of (combined) strong equivalence derived from the characterizations of the two
one-dimensional variants.
Next, we note that our results give rise to problem rewriting methods that transform
optimization problems into strongly equivalent ones. We provided two simple examples
illustrating that application of our results in Example 9 and Corollary 12. Similar examples
can be constructed for our results concerning strong gen-equivalence and (combined) strong
equivalence. A more systematic study of optimization problem rewriting rules that result
in strongly equivalent problems will be a subject of future work.
Finally, we established the complexity of deciding whether optimization problems are
strongly equivalent. Notably, in the general case of strong (combined) equivalence the problem is co-NP-complete for both CO and ASO problems. The same holds true for the strong
gen-equivalence problem. For the strong sel-equivalence problem, the situation is more
complex. When contexts of the form [1, j] or [1, ] are considered, the problem of deciding
strong sel-equivalence is co-NP-complete for CO problems and P2 -complete for ASO problems. If any rank interval is allowed as part of input or if the rank interval is fixed to [i, j],
with i  2, the problem gets computationally harder: in case of ASO problems, P3 -hard; in
case of CO problems P2 -hard. The difference between CO problems and ASO problems in
the case of strong sel-equivalence with respect to contexts consisting of preference rules with
ranks in the intervals [1, j] or [1, ] comes from the fact that the corresponding concepts
of strong sel-equivalence depend, in particular, on whether two theories are equivalent with
respect to models (CO problems) and with respect to equilibrium models (ASO problems).
These two types of equivalence have different complexities. The jump in the complexity for
376

fiStrong Equivalence of Qualitative Optimization Problems

strong sel-equivalence when arbitrary rank intervals [i, j] are allowed or if they are fixed so
that i  2 comes from the fact that in such cases, the concept depends on properties of the
class of outcomes that are optimal with respect to rules of ranks less than i, while in other
cases it depends on properties of the class of models. Decision problems concerning optimal
outcomes (such as: do two theories have the same optimal models) are harder than the
corresponding versions of the problems for models, explaining the jump. The results for
strong sel-equivalence also imply that ranked optimization problems cannot be efficiently
simulated by simple optimization problems.

Acknowledgments
We thank the reviewers for their useful and constructive comments. The first author was
supported by Regione Calabria and EU under POR Calabria FESR 2007-2013 within the
PIA project of DLVSYSTEM s.r.l., and by MIUR under the PRIN project LoDeN. The
second author was supported by the NSF grant IIS-0913459.

Appendix A. Useful Lemmas
We provide here several lemmas that we use later in the proofs of the results discussed in
the main body of the paper.
The first two lemmas are given without proofs, as they are easy consequences of results
by Ferraris (2005) and Ferraris and Lifschitz (2005).
Lemma 25 Let P be a theory, I be a classical model of P , and let [I] = {a   | a 
U \ I}  {a   | a  I}. Then, AS (P  [I]) = Mod (P   [I ]) = {I}.
Lemma 26 Let P be a theory, I, J two of its (classical) models such that I 6= J, and let
[I, J] = {a  b | a  I, b  J}
 {a  b | a  I, b  U \ J}
 {a  b | a  U \ I, b  J}
 {a  b | a  U \ I, b  U \ J}.
Then AS (P  [I, J]) = Mod (P   [I , J ])) = {I, J}.
Lemma 27 Let P be an optimization problem, I  (P<j ), where j  1, and let
j

j

Rj [I] = {a > >  | a  I}  {a > >  | a  U \ I)}.
Then
1. I  (P  Rj [I]);
2. for every J such that J 6= I and I Pj J, I >P Rj [I] J.
377

fiFaber, Truszczynski, & Woltran

Proof. When proving (1), to simplify the notation, we write R for Rj [I]. Since I  (P<j ),
I  (P ). Clearly, (P  R) = (P ) and so, I  (P  R). To show that I  (P  R),
let us consider an arbitrary interpretation J  (P  R) and assume that J >P R I. In
particular, J 6= I and so, diff R (I, J) = j. If diff P (I, J) < j, then diff P R (I, J) < j.
Consequently, J >(P R)<j I. Since all rules in R are of rank j, it follows that J >P<j I, a
contradiction with the fact that I  (P<j ). Thus, diff P (I, J)  j. Since diff R (I, J) = j,
we have diff P R (I, J) = j. Therefore, J >P R I implies J >R I, a contradiction again
(since, by definition of Rj [I] = R, I R J for each interpretation J). It follows that for
every J  (P  R), J 6>P R I, that is, I  (P  R).
The assertion (2) is evident, since by definition of Rj [I] = R, I >R J for each interpretation J 6= I. 2

Lemma 28 Let P be an optimization problem, I, J interpretations such that I, J  (P<j ),
be the union of the following sets of rules:
where j  1, and let Rj0 [I, J]  Ls,j
U
j

{a  b > >  | a, b  I  J}
j

{a  b > >  | a  I, b  U \ J}
j

{a  b > >  | a  U \ I, b  J}
j

{a  b > >  | a  U \ I, b  U \ J}.
Then all of the following hold:
1. for every r  Rj0 [I, J], vI (r) = vJ (r) = 1;
2. for every interpretation K 
/ {I, J}, there is a rule r  Rj0 [I, J] such that vK (r) = 2;
3. I >P J if and only if J 
/ (P  Rj0 [I, J]).
Proof. To simplify the notation, we write R0 for Rj0 [I, J].
The assertion (1) is evident. To prove the assertion (2), we note that the conjunction
of all formulas that appear as top options in the preference rules of R0 is equivalent to
^
^
^
^


{a | a  I}  {a | a  U \ I} 
{b | b  J}  {b | b  U \ J} .
That formula has only two models: I and J. Thus, for every other interpretation K, at
least one of the formulas that appears as top options in the preference rules of R0 is not
satisfied by K. For the corresponding preference rule r, vK (r) = 2.
Finally, to prove the assertion (3), let us assume that I >P J. Together with (1), it
0
implies that I >P R J. Thus, J 
/ (P  R0 ). To prove the converse implication, let us
0
assume that I 6>P J. Together with (1), it implies that I 6>P R J. Next, we note that if
0
diff P (J, K) < j, then since J  (P<j ), K 6>P R J. If diff P (J, K)  j, then property (2)
0
proved above implies that K 6>P R J. Since K is an arbitrary interpretation different from
0
I and J, and since I 6>P R J, J  (P  R0 ) follows. 2

378

fiStrong Equivalence of Qualitative Optimization Problems

Next, we note a property that allows us to infer the strong sel-equivalence of two problems treated as CO problems from the strong sel-equivalence of the same problems when
treated as ASO problems (and conversely). The property relies on the fact that changing
selectors only does not affect the class of outcomes. The proof is simple and we omit it.
Lemma 29 Let P and Q be optimization problems such that Mod (P g ) = AS (P g ) and
Mod (Q g ) = AS (Qg ), and [i, j] a rank interval. Then, P s,[i,j] Q when P and Q are viewed
as CO problems, if and only if P s,[i,j] Q when P and Q are viewed as ASO problems.
The final results in this section will be useful for the complexity results.
Lemma 30 Deciding whether open QBFs Y (X, Y ) and Y (X, Y ), where  and  are
in negation normal form, have the same minimal models is P3 -hard.
Proof. We show the result by a reduction from the P3 -hard problem of deciding satisfiability for QBFs of the form ZXY , where  is in negation normal form. Let  be a
QBF of such a form and consider the following formulas, where Z 0 = {z 0 | z  Z}, and u
and v are fresh atoms:
^
^

 =
(z  z 0 )  (
x  u)    (v  v)
zZ

 =

^
zZ

xX
0

(z  z )  (

^


x  v)    (u  u).

xX

It is clear that  and  are in negation normal form. The only difference between 
compared to  is that the latter uses u where the former uses v and vice versa, and the
only point of including the conjuncts v  v and u  u is to have occurrences of u and v
in both  and . We show that Y (U, Y ) and Y (U, Y ) have the same minimal models
(with open variables U = Z  Z 0  X  {u, v}) if and only if  is true.
We note that when considering models and minimal models of Y (U, Y ) and Y (U, Y )
we can move the quantifier Y so that it appears directly in front of . It is so because
there are no occurrences of atoms from Y in  and in  outside of .
It is also clear that if M contains neither u nor v, then M is a model of Y (U, Y ) if
and only if M is a model of Y (U, Y ). Consequently, for each such M it holds that M is
a minimal model of Y (U, Y ) if and only if M is a minimal model of Y (U, Y ).
Only-if direction: Let us assume  is false. Then, there exists an interpretation I  Z
of atoms in Z, such that for every interpretation J of atoms in X, Y  is false. Let us
consider Mu = I  (Z \ I)0  X  {u}. Clearly, Mu is a model of YV. If N is a model of
Y  and N  Mu , then I  (Z \ I)0  N because of the conjunct zZ (z  z 0 ). Thus,
N  Z = I. It follows that Y  is false when atoms in Z and X are interpreted by N and,
consequently, X  {u}  N . Thus, N = Mu , which implies that Mu is a minimal model of
Y . Essentially the same argument shows that Mv = I  (Z \ I)0  X  {v} is a minimal
model of Y . Since Mu 6= Mv , Y  and Y  have different minimal models.
If-direction: Let us assume that ZXY  is true. Let M be a minimal model of Y .
Clearly, v 
/ M (as M \ {v} is also a model of Y ). Let us assume that u  M . Let us
assume in addition that X \ M 6= . These assumptions imply that for the interpretations
379

fiFaber, Truszczynski, & Woltran

I = M Z of atoms in Z and J = M X of atoms in X, Y  is true. It follows that M \{u}
is a model of Y , a contradiction. Thus, X  M . Let I = M  Z. Since ZXY  is
true, there is an interpretation J  X of atoms in X such that Y  is true, with atoms
in Z interpreted by I and atoms in X interpreted by J. It follows that I  (Z \ I)0  J
is a model of Y . Since I  (Z \ I)0  J  M , this is a contradiction. It follows that
u
/ M . Consequently, by the comment above, M is a minimal model of . The converse
holds by the symmetry argument. Thus, the two formulas have the same minimal models. 2

Lemma 31 Given a ranked preference rule r, and an interpretation I, calculating vI (r)
can be done in polynomial time.
Proof. Initialize a variable i with 1. Check whether I 6|= bd (r) and if so, halt. Then, check
whether I |= hd i (r) and if so, halt; otherwise increment i and continue checking; if no more
options in the head of r exist, set i = 1. Each of the checks is a model checking task for a
propositional formula and hence in polynomial time. Upon halting, i is equal to vI (r). 2

Lemma 32 Given an optimization problem P and two interpretations I, J, calculating
diff P (I, J) can be done in polynomial time.
Proof. Initialize a variable x with , scan the rules in P s and for each ranked preference
rule r  P s , determine whether vI (r) 6= vJ (r) (in polynomial time due to Lemma 31). If so,
set x to rank (r) if rank (r) < x. After having processed all rules, x is equal to diff P (I, J). 2

Lemma 33 Given an optimization problem P , and two interpretations I, J, deciding whether
I >P J holds can be done in polynomial time.
Proof. First, sort the rules in P s by their ranks. Starting from the lowest rank upwards,
do the following for each rank i: Check for all rules of rank i whether vI (r) < vJ (r) or
vI (r)  vJ (r). If vI (r) < vJ (r) holds at least for one rule and vI (r)  vJ (r) for all other
rules of rank i, accept. If there are rules r and r0 of the rank i such that vI (r) < vJ (r) and
vI (r0 ) > vJ (r0 ), reject. If all ranks have been processed, reject. By Lemma 31, all steps are
doable in polynomial time. 2

Lemma 34 Given a classical optimization problem P and an interpretation I, deciding
whether I  (P ) is in co-NP.
Proof. We show that a witness J for the complementary problem (deciding whether
I 
/ (P )) can be verified in polynomial time. If J = I, verify in polynomial time that
I does not satisfy the propositional theory P g , which is well-known to be feasible in polynomial time. Otherwise, verify in polynomial time that J satisfies P g and that J >P I (both
in polynomial time, the latter by Lemma 33). 2

380

fiStrong Equivalence of Qualitative Optimization Problems

Lemma 35 Given an answer set optimization problem P and an interpretation I, deciding
whether I  (P ) is in P2 .
Proof. We show that a witness J for the complementary problem (deciding whether
I 
/ (P )) can be verified in polynomial time using an NP oracle. If J = I, verify that I
does not satisfy P g using the NP oracle. This is possible because answer-set checking is
co-NP-complete (Pearce et al., 2009, Thm. 8). Otherwise, verify using the NP oracle that J
satisfies the propositional theory P g and that J >P I (in polynomial time by Lemma 33). 2

Appendix B. Proofs
Theorem 6 For all ranked optimization problems P and Q, and every rank interval [i, j],
P s,[i,j] Q if and only if the following conditions hold:
1. (P<i ) = (Q<i )
2. >P(P<i ) = >Q
(Q<i )
3. for every I, J  (P<i ) such that i < diff P (I, J) or i < diff Q (I, J), diff P (I, J) =
diff Q (I, J) or both diff P (I, J) > j and diff Q (I, J) > j.
s,[i,j]

Proof. () Let R  LU
and let I  (P  R). By Lemma 3, I  ((P  R)<i ). Since
s,[i,j]
R  LU , R<i = (, ). Thus, I  (P<i ). By assumption, it follows that I  (Q<i ).
In particular, I  (Q<i ) and, as (Q<i ) = (Q), I  (Q). Since Rg = , we have
I  (Q  R). To show that I  (Q  R) we have to show that there is no J  (Q  R)
such that J >QR I. Let us assume to the contrary that such a J exists. By Lemma 5,
there are three possibilities.
First, we assume that diff Q (I, J) < diff R (I, J) and J >Q I. The latter property
implies diff Q (I, J)  i (otherwise, we would have J >Q<i I, contrary to I  (Q<i )).
In particular, we have I Q<i J and, since I  (Q<i ), it follows that J  (Q<i ). By
(1), J  (P<i ). Thus, by (2), J >P I. If diff Q (I, J)  j then diff R (I, J) > j and, as
s,[i,j]
R  LU , diff R (I, J) = . Since J >P I, J >P R I. Otherwise, i  diff Q (I, J) < j. If
i < diff Q (I, J) then, by (3), diff P (I, J) = diff Q (I, J). If i = diff Q (I, J), then again by (3),
diff P (I, J)  i. In either case, diff P (I, J) < diff R (I, J). Since J >P I, J >P R I.
s,[i,j]
Next, let us assume that diff Q (I, J) > diff R (I, J) and J >R I. Since R  LU ,
it follows that diff R (I, J)  i and so, diff Q (I, J) > i. We recall that I  (Q<i ).
Thus, J  (Q<i ) and, consequently, J  (P<i ). If diff Q (I, J)  j then, by (3),
diff P (I, J) = diff Q (I, J) and so, diff P (I, J) > diff R (I, J). If j < diff Q (I, J) then, also
by (3), j < diff P (I, J). Since diff Q (I, J) > diff R (I, J), diff R (I, J) <  and, consequently,
diff R (I, J)  j. Thus, diff P (I, J) > diff R (I, J) in this case, too. Since J >R I, J >P R I
follows.
Finally, let us assume that diff Q (I, J) = diff R (I, J), J >Q I and J >R I. Since
s,[i,j]
R  LU , diff R (I, J)  i. Thus, diff Q (I, J)  i and, since I  (Q<i ), J  (Q<i ). By
(1) we have J  (P<i ) and, by (2), J >P I. Consequently, J >P R I.
In all cases we obtained J >P R I, contrary to I  (P  R), a contradiction.
381

fiFaber, Truszczynski, & Woltran

() Let us assume that (P<i ) 6= (Q<i ). Without loss of generality, we can assume
that there is I  (P<i ) \ (Q<i ) and define R = (, Ri [I])  LUs,=i , where Ri [I] is as in
Lemma 27. By that lemma, I  (P  R). On the other hand, since I 
/ (Q<i ) and
s,=i Q, contrary to
R  Ls,=i
,
I

/
((Q

R)
).
By
Lemma
3,
I

/
(Q

R).
Thus,
P

6
<i
U
the assumption.
It follows that (P<i ) = (Q<i ), that is, that condition (1) holds. To prove condition
(2), let us consider interpretations I, J  (P<i ) such that I >P J. Let Ri0 [I, J] be the
selector defined in Lemma 28. Since I >P J, Lemma 28(3) implies that J 
/ (P  Ri0 [I, J]).
Consequently, J 
/ (Q  Ri0 [I, J]). By Lemma 28(3) again, it follows that I >Q J. By
Q
symmetry, I > J implies I >P J and so, condition (2) holds.
To prove condition (3), let us assume that there are interpretations I and J that satisfy
the assumptions but violate the corresponding conclusion. In what follows, we write p for
diff P (I, J) and q for diff Q (I, J). Thus, we have p > i or q > i, p 6= q, and p  j or
q  j. Without loss of generality, we can assume that p < q. It follows that p is finite and,
consequently, that diff P (I, J) <  and I 6= J. Moreover, i < q and p  j.
Let us assume first that p < i. We take the problem R = (, Ri [J]), where Ri [J] is as
specified in Lemma 27 and define P 0 = P  R and Q0 = Q  R. Since I, J  (P<i ) we
also have I, J  (Q<i ). By our assumptions, q > i. Thus, J Qi I and, in particular,
J Qi I. We recall that I 6= J. Consequently, by the assertion (2) of Lemma 27 we have
0
0 ) and diff P 0 (I, J) =
that J >Q I. Since all rules in R have ranks i, we have I, J  (P<i
0
0
diff P (I, J) < i. It follows that J 6>P I (otherwise, by diff P (I, J) < i we would have
0
J >P<i I). Let us define R0 = (, Ri0 [I, J]), where Ri0 [I, J] is as specified in Lemma 28. Since
0
J 6>P I, by the assertion (3) of that lemma, I  (P 0  R0 ). We have P 0  R0 = P  (R  R0 ).
Thus, I  (P  (R  R0 )) and, by P s,[i,j] Q, I  (Q  (R  R0 )) = (Q0  R0 ). By the
0
assertion (3) of Lemma 28, J 6>Q I, a contradiction.
Next, let p = i. Clearly, I 6>P J or J 6>P I. Without loss of generality, let us assume
that J 6>P I. Let R0 = (, Ri [I, J]), and let us define P 0 = P  R0 and Q0 = Q  R0 . Since
0 ). Moreover, from J 6>P I
all rules in R0 have ranks i, I, J  (P<i ) implies I, J  (P<i
0
it follows by Lemma 28(1) that J 6>P I. Let R = (, Ri [J]). All rules in R have rank i
0
0
and diff P (I, J) = diff P (I, J) = i. Thus, it follows that J 6>P R I. Moreover, for every
0
0
0 ). If diff P 0 (K, I)  i,
K
/ {I, J}, if diff P (K, I) < i, then K 6>P R I follows from I  (P<i
0
then K 6>P R I follows from Lemma 28(2). Thus, I  (P 0  R). On the other hand, we
0
recall that diff Q (I, J) = q > i. Thus, diff Q (I, J) > i, too (Lemma 28(1)). It follows that
0
0
J Qi I. Consequently, by Lemma 27(2), we have J >Q R I. Thus, I 
/ (Q0  R), a
contradiction.
It follows that p > i. To complete the proof of (3), we recall that p  j. Clearly, I 6>P J
or J 6>P I. Without loss of generality, let us assume that J 6>P I. Let R0 = (, Ri [I, J]), and
let us define P 0 = P  R0 and Q0 = Q  R0 . Let us assume that for some interpretation K 
/
0
P0
P
P
{I, J}, K > I. By Lemma 28(2), it follows that diff (I, K) < i. Thus, diff (I, K) < i,
0
a contradiction with I  (P<i ). Thus, for every interpretation K 
/ {I, J}, K 6>P I
0
and, by the same argument, K 6>P J. Consequently, for every interpretation K 
/ {I, J},
0
0
P<p
P<p
K 6>
I and K 6>
J. In addition, since I, J  (P<i ), by Lemma 28(1) we obtain
0
0
0 ). In addition, by Lemma 28(1),
that neither I >P<p J nor J >P<p I. Thus, I, J  (P<p
0
0
diff P (I, J) = diff P (I, J) = p and, since J 6>P I, J 6>P I.
382

fiStrong Equivalence of Qualitative Optimization Problems

0

0

Let R = (, Rp [J]). As (i) diff P (I, J) = p, (ii) J 6>P I, and (iii) all rules in R have
0
0
rank p, it follows that J 6>P R I. Moreover, for every K 
/ {I, J}, if diff P (K, I) < i, then
0
0
0
0 ). If diff P (K, I)  i, then K 6>P R I follows from
K 6>P R I follows from I  (P<i
Lemma 28(2) (and the definition of P 0 ). Thus, I  (P 0  R). On the other hand, we
0
recall that diff Q (I, J) = q > p. Thus, diff Q (I, J) > p, too (Lemma 28(1)). It follows that
0
0
/ (Q0  R), a
J Qp I. Consequently, by Lemma 27(2), we have J >Q R I. Thus, I 
s,[i,j]
0
0
0
contradiction (we recall that P 
Q, P = P  (R  R ), Q = Q  (R  R0 ), and, as
s,[i,j]
p  j, R  R0  LU ). 2
Theorem 13 For all CO (ASO, respectively) problems P and Q, P g Q if and only if
P g and Qg are strongly equivalent (that is, Mod (P g ) = Mod (Q g ) for CO problems, and
ModHT (P g ) = ModHT (Qg ) for ASO problems) and >PMod(P g ) = >Q
Mod(Q g ) .
Proof. () The first assumption implies strong equivalence of the generators P g and Qg
relative to the corresponding semantics (we recall that in the case of classical semantics,
strong and standard equivalence coincide). It follows that for every problem R  LgU ,
(P  R) = (Q  R). Moreover, for each semantics, (P  R)  Mod (P g  Rg )  Mod (P g )
and, similarly, (Q  R)  Mod (Qg  Rg )  Mod (Qg ). Since >PMod(P g ) = >Q
Mod(Q g ) , and
QR
R
By Lemma 2,
R  LgU does not change preferences, we have >P(P
g Rg ) = >(Qg Rg ) .
(P  R) = (Q  R).

() Let us assume that P g and Qg are not strongly equivalent. Then, there is a problem
R  LgU such that (P  R) 6= (Q  R). Without loss of generality, we can assume that for
some interpretation I, I  (P  R) \ (Q  R). Let us define a problem T  LgU by setting
T = ([I], ), where [I] is as defined in Lemma 25. By that lemma, (P  R  T ) = {I}
and (Q  R  T ) = . The former property implies that I is necessarily preferred, that is
I  (P RT ), and the latter one implies that (QRT ) = . This is a contradiction with
the assumption that P g Q. Thus, P g and Qg are strongly equivalent, that is, Mod (P g ) =
Mod (Qg ), in the case P and Q are CO problems, and ModHT (P g ) = ModHT (Qg ), in the
case P and Q are ASO problems.
Since ModHT (P g ) = ModHT (Qg ) implies Mod (P g ) = Mod (Qg ), the latter identity holds
in each of the two cases. Because of the equality, we will write M for both Mod (P g ) and
Mod (Qg ). It remains to show that >PM =>Q
M . Towards a contradiction, let us assume that
there are I, J  M that are in exactly one of these two relations; without loss of generality
we will assume that I >P J and I 6>Q J. The former identity implies, in particular, that
I 6= J. Let T = ([I, J], ), where [I, J] is a theory defined in Lemma 26. By that lemma,
(P  T ) = (Q  T ) = {I, J}. Clearly, J 
/ (P  T ) and J  (Q  T ), contrary to our
assumption that P g Q. 2
Theorem 16 For all ranked CO (ASO, respectively) problems P and Q, and every rank
s,[i,j]
interval [i, j], P g
Q if and only if the following conditions hold:
1. P g and Qg are strongly equivalent (that is, Mod (P g ) = Mod (Q g ) for CO problems,
and ModHT (P g ) = ModHT (Qg ) for ASO problems)
2. >PMod(P g ) = >Q
Mod(Q g )
383

fiFaber, Truszczynski, & Woltran

3. for every I, J  Mod (P g ) such that i < diff P (I, J) or i < diff Q (I, J), diff P (I, J) =
diff Q (I, J) or both diff P (I, J) > j and diff Q (I, J) > j
P

Q

<i
<i
4. >Mod(P
g ) = >Mod(Q g ) .

Proof. () By Proposition 4, it suffices to prove that for every R  LgU , P R s,[i,j] QR.
By (1), we have that (P  R) = (Q  R) (we recall that (P ) denotes the set of outcomes of an optimization problem P ; (P ) = Mod (P g ) in the case of CO problems, and
(P ) = AS (P g ) in the case of ASO problems). Moreover, for each type of problems, we also
have (P  R)  Mod (P g  R g )  Mod (P g ) and, similarly, (Q  R)  Mod (Q g  R g ) 
Mod (Q g ). Since all rules in R have rank at least i, by condition (4) it follows that
(P R)
(QR)
>(P R)<i =>(QR)<i . By Lemma 2, we have ((P  R)<i ) = ((Q  R)<i ) and so, condition
(1) of Theorem 6 holds for P  R and Q  R. Since ((P  R)<i )  (P  R)  Mod (P g ),
and since the corresponding inclusions hold for Q, too, conditions (2)(3) of this theorem
for P and Q imply conditions (2)(3) from Theorem 6 for P  R and Q  R. Thus, by
Theorem 6, P  R s,[i,j] Q  R.
s,[i,j]

() Let us assume that P g
Q. Then, P g Q follows and, by Theorem 13, implies the
appropriate version of condition (1). Since ModHT (P g ) = ModHT (Qg ) implies Mod (P g ) =
Mod (Q g ), for each of the two versions of the assertion we have Mod (P g ) = Mod (Q g ).
From now on in the proof, we write M for Mod (P g ) and, because of the equality, also for
Mod (Q g ).
Next, for interpretations I, J  M such that I 6= J, we define R = ([I, J], ), where
[I, J] is as in Lemma 26. Let us define P1 = P R and Q1 = QR. We have P1 s,[i,j] Q1 .
Moreover, by Lemma 26, we also have that (P1 ) = (Q1 ) = {I, J}.
To prove condition (4), let us assume that I >P<i J. It follows that I >P1 J (we recall
that R contains no preference rules). Since (P1 ) = {I, J}, J 
/ (P1 ) and I  (P1 ). By
the assumption, J 
/ (Q1 ). Since (Q1 ) = {I, J}, we have that I >Q1 J. In particular,
I  (Q1 ). If diff Q (I, J) < i then, since R has no preference rules, I >Q<i J. Thus, let us
assume that diff Q (I, J)  i and let us define R0 = (, Ri [J]), where Ri [J] is as in Lemma
27. Since (i) I >P<i J, (ii) R has no preference rules, and (iii) all preference rules in R0 have
0
rank i, it follows that I >P1 R J. The generator module in R0 is empty. It follows that
(P1  R0 ) = (Q1  R0 ) = {I, J}. Thus, J 
/ (P1  R0 ) and, consequently, J 
/ (Q1  R0 ).
Q
Q1
Since diff (I, J)  i, diff (I, J)  i. Moreover, I  (Q1 ) and so, also I  ((Q1 )<i ).
Thus, J  ((Q1 )<i ). By Lemma 27, J  (Q1  R0 ), a contradiction. The argument shows
that I >P<i J implies I >Q<i J. The converse implication follows by symmetry and so,
condition (4) holds.
To prove condition (2), let us assume that I >P J. If diff P (I, J) < i, then I >P<i J
and, by (4), I >Q<i J. Thus, I >Q J. Let us assume then that diff P (I, J)  i. Since
(P1 ) = {I, J} and since I >P J implies I >P1 J, J 
/ (P1 ). Thus, J 
/ (Q1 ). Since
(Q1 ) = {I, J}, I >Q1 J and so, I >Q J.
To prove condition (3), without loss of generality we assume that i < diff P (I, J). Thus,
we also have i < diff P1 (I, J) and that I, J  ((P1 )<i ), the latter follows from the properties that (P1 ) = {I, J} and that diff P1 (I, J) = diff P (I, J) > i. Since P1 s,[i,j] Q1 ,
condition (3) of Theorem 6 holds for P1 , Q1 , I and J, that is, diff P1 (I, J) = diff Q1 (I, J) or
both diff P1 (I, J) > j and diff Q1 (I, J) > j. Consequently, diff P (I, J) = diff Q (I, J) or both
384

fiStrong Equivalence of Qualitative Optimization Problems

diff P (I, J) > j and diff Q (I, J) > j, that is, condition (3) holds. 2
Theorem 21 Given optimization problems P and Q, deciding P s Q is co-NP-complete
in case of CO problems and P2 -complete in case of ASO problems.
Proof. For membership, we consider the complementary problem. By Corollary 8, it can
be specified as the problem to decide whether at least one of the conditions (1) - (3) below
holds:
1. (P ) 6= (Q), or equivalently, for some I, exactly one of the identities I  (P ) and
I  (Q) holds;
2. for some I, J  (P ), diff P (I, J) 6= diff Q (I, J);
3. >P(P ) 6= >Q
(Q) , or equivalently, for some I, J, we have I, J  (P )  (Q) and exactly
one of the properties I >P J and I >Q J holds.
We show that the problem is in NP for CO problems and in P2 for ASO problems. We
say that a pair of interpretations I, J is a witness for an instance of that problem to be a
YES instance if it demonstrates one of the conditions (1) - (3) to hold. It is easy to see
that if a witness exists, then there is a witness I, J such that I and J consist only of atoms
that occur in P and Q. Once such a witness is guessed, condition (1) can be verified in
polynomial time for CO problems (this is a model-checking problem for an interpretation
and a theory) and, for ASO problems, in polynomial time with the assist of two calls to
an NP oracle, since model checking for the equilibrium-model semantics is co-NP-complete
(Theorem 8, Pearce et al. (2009)). Since condition (2) can be verified in polynomial time by
Lemma 32, and condition (3) in polynomial time for CO problems and in polynomial time
with the assist of four calls to an NP oracle for ASO problems (Lemma 33 and the result
by Pearce et al., (2009) mentioned above), the membership part of the assertion follows.
For hardness, we observe that in case of problems with empty selectors, s coincides
with equivalence of propositional theories in case of CO problems, and with equivalence of
equilibrium theories in case of ASO problems. The former is well known to be co-NP-hard,
the latter is P2 -hard (Theorem 11, Pearce et al. (2009)). 2
Theorem 22 Given optimization problems P and Q and rank interval [i, j], deciding
P s,[i,j] Q is P2 -complete in case of CO problems and P3 -complete in case of ASO
problems.
Proof. To prove the membership part, we consider the complementary problem. By
Theorem 6, that problem consists of deciding whether it is the case that at least one of the
following conditions holds:
1. (P<i ) 6= (Q<i ), or equivalently, for some interpretation I, exactly one of the properties I  (P<i ) and I  (Q<i ) holds;
2. >P(P<i ) 6= >Q
(Q<i ) , or equivalently, for some interpretations I, J  (P<i )  (Q<i )
exactly one of the properties I >P J or I >Q J holds;
3. for some I, J  (P<i )  (Q<i ) such that i < diff P (I, J) or i < diff Q (I, J),
diff P (I, J) 6= diff Q (I, J) and it holds that diff P (I, J)  j or diff Q (I, J)  j.
385

fiFaber, Truszczynski, & Woltran

We call each pair of interpretations I, J that demonstrates that one of the conditions above
holds a witness. It is easy to see that if there is witness, there is also one that consists only
of atoms that occur in P and Q. We show that the complementary problem is in P2 for
CO problems and in P3 for ASO problems by showing that a witness once guessed can
be verified in polynomial time, using an NP oracle when dealing with a CO problem and a
P2 oracle when dealing with an ASO problem.
Consider a witness I, J of two interpretations. One can test whether I, J verifies
condition (1) (only I matters here) in polynomial time with two calls to an NP oracle for CO problems (Lemma 34), and with two calls to a P2 oracle for ASO problems
(Lemma 35). To verify condition (2), we need four calls to the respective oracles to test
that I, J  (P<i )  (Q<i ) and polynomial-time computation to test that exactly one of
the properties I >P J or I >Q J holds (Lemma 33). Similarly, for condition (3), we use
four calls to the respective oracles to test that I, J  (P<i )  (Q<i ) and polynomial-time
computation to test the condition involving diff P (I, J) and diff Q (I, J) (Lemma 32).
For the hardness part, we start with the case of CO problems. Therefore, we reduce the
following problem to strong sel-equivalence: given two propositional theories S and T , decide
whether they possess the same minimal models. This problem is known to be P2 -complete
(for instance, equivalence for positive disjunctive programs is known to P2 -complete, see
e.g., Eiter et al., 2007b, Thm. 6.15, which means testing whether two propositional formulas
of a particular class have the same minimal models). The problem remains hard if S and T
are in negation normal form over the same alphabet. Given a negation normal form theory
T we construct a CO problem PT such that the elements in (PT ) are in a one-to-one
correspondence to the minimal models of T . We adapt a construction used in (Brewka
et al., 2011). Specifically, we set
PTg = T [u/u0 ]  {u  u0 | u  U },
where U is the collection of atoms occurring in T , and T [u/u0 ] stands for replacing all u
by u0 in T , and
PTs = {u0 > u | u  U }.
Our first observation is that each outcome of PT must be of the form I  {y 0 | y  U \ I}
where I  U . For each interpretation I  U we write I + = I  {y 0 | y  U \ I}. It is clear
that I |= u if and only if I + |= u0 , and hence also I |= T if and only if I + |= T [u/u0 ].
Hence there is a one-to-one mapping between models M of T and outcomes M + of PT .
Now let us assume that M +  (PT ). Then M |= T , and for any N  M we we have
N 6|= T . Indeed if N |= T , then N + |= PTg and for rules r  PTs of the form u0 > u, where
u  M \ N , we obtain vN + (r) = 1 < 2 = vM + (r) and for all other rules r0 in PTs we have
vN + (r0 ) = 2 = vM + (r0 ). That implies N + >PT M + , contradicting M +  (PT ). Thus, M
is a minimal model of T .
Conversely, let us assume that M is a minimal model of T . Then M +  (PT ) and for
all N +  (PT ) we have that N + >PT M + does not hold, implying M +  (PT ). Indeed,
if N + >PT M + , then vN + (r) < vM + (r) for at least one r  PTs and vN + (r0 )  vM + (r0 ) for
all r0  PTs . The latter implies N  M and the former shows that N 6= M . Since N |= T it
contradicts the assumption that M is a minimal model of T . It follows that M +  (PT ).
We thus have that M +  (PT ) if and only if M is a minimal model of T . Moreover,
for S and T over U it follows that S and T have the same minimal models if and only
386

fiStrong Equivalence of Qualitative Optimization Problems

if PS s,2 PT . Indeed, for any R  LUs,2 it is easy to verify that (PS ) = (PS  R)
and (PT ) = (PT  R). That observation follows from the fact that there are no distinct
I, J  (PS ) such that I PS J and no distinct I, J  (PT ) such that I PT J. Thus,
rules in R which, being of weaker rank, can only break ties, do not affect the sets of optimal
outcomes.
Concerning hardness for ASO problems, we can use a similar idea. However, we shall
use the following problem: given two open QBFs Y (X, Y ), Y (X, Y ), decide whether
these two QBFs possess the same minimal models. By Lemma 30, this problem is P3 -hard
and, moreover, we can assume that  and  are in negation normal form. The reduction
then combines the idea from above with the reduction for general ASP consistency (Eiter
& Gottlob, 1995). More precisely, for each z  X  Y we introduce a new variable z 0 , and
then we construct P for a given (X, Y ) as follows:
Pg = {z  z 0 | z  X  Y } 
{(y  y 0 )  w, w  y, w  y 0 | y  Y } 
{[z/z 0 ]  w, w  w},
where [z/z 0 ] stands for replacing all z by z 0 , and w is a globally new atom. For the
selector we set
Ps = {x0 > x | x  X}.
Any equilibrium model M of Pg must contain w (otherwise w  w would be unsatisfied),
and it must also contain all of {y, y 0 | y  Y } (otherwise w  y, w  y 0 would be
unsatisfied); we write W for {y, y 0 | y  Y }  {w}  the set contained in each equilibrium
model. Moreover, each equilibrium model M must be of the form V  {z 0 | z  X \ V }  W .
Indeed, one of x and x0 must hold for each x  X to satisfy xx0 , but not both, as otherwise
hM \ {x}, M i |=HT Pg as well, contradicting the fact that M is an equilibrium model of Pg .
For each interpretation I  X we write I + = I  {x0 | x  X \ I}  W of Pg . One can show
that I is a model of Y (X, Y ) if and only if I + is an equilibrium model of Pg . Indeed, if I
satisfies Y (X, Y ), then hI + , I + i |=HT Pg and for all J  I + it holds that hJ, I + i 6|=HT Pg .
On the other hand, if I does not satisfy Y (X, Y ) then there exists J  Y such that
I  J 6|= (X, Y ). It follows that hI + \ ({y | y 
/ J}  {y 0 | y  J}  {w}), I + i |=HT Pg (the
key element of the argument here is that [z/z 0 ] contains no occurrences of negation, as 
is in negation normal form and so, I + \ ({y | y 
/ J}  {y 0 | y  J}  {w}) 6|= [z/z 0 ]; that
+
property allows one to show hI \({y | y 
/ J}{y 0 | y  J}{w}), I + i |=HT [z/z 0 ]  w).
+
Thus, I is not an equilibrium model of Pg .
Once the correspondence between models M of Y (X, Y ) and outcomes (equilibrium
models) M + of P is established, we can handle the issue of minimality as in the case of CO
problems. Let us assume first that M +  (P ). Then, as we just demonstrated, M satisfies
Y (X, Y ). Moreover, we have that for any N  M , N does not satisfy Y (X, Y ). Indeed
if N would satisfy Y (X, Y ), then we would have (i) N +  (P ), (ii) for rules r  Ps of
the form u0 > u, where u  M \ N , vN + (r) = 1 < 2 = vM + (r), and (iii) for all other rules
r0 in Ps , vN + (r0 ) = 2 = vM + (r0 ); these three properties would imply N + >P M + , contradicting M +  (P ). Conversely, let us assume that M is a minimal model of Y (X, Y ).
Then M +  (P ) and for all N +  (P ) we can show that N + >P M + does not hold
387

fiFaber, Truszczynski, & Woltran

(implying M +  (P )). To this end, we reason as follows. If N + >P M + would hold,
then vN + (r) < vM + (r) for at least one r  Ps , and vN + (r0 )  vM + (r0 ), for all r0  Ps .
This of course implies N  M and, since N satisfies Y (X, Y ) (we recall that N + is an
equilibrium model of Pg and so, N is a model of Y (X, Y )), it contradicts the assumption
that M is a minimal model of Y (X, Y ). We thus have that M +  (P ) if and only if M
is a minimal model of Y (X, Y ). From that fact, reasoning as in the case of CO problems,
we obtain that that Y (X, Y ) and Y (X, Y ) have the same minimal models if and only
if P s,2 P . 2
Theorem 23 Given two CO (ASO, respectively) problems P and Q, deciding P g Q is
co-NP-complete.
Proof. Deciding strong equivalence of propositional theories under the classical semantics
is co-NP-hard as in such case, strong equivalence and equivalence coincide. It is also coNP-hard under the equilibrium-model semantics (Lin, 2002). Thus, the hardness part of
the assertion follows from Corollary 15.
To prove membership, we consider the complementary problem. By Theorem 13, it
consists of deciding whether at least one of the conditions (1) and (2) below holds:
1. P g and Qg are not strongly equivalent or, equivalently, Mod (P g ) 6= Mod (Q g ), for CO
problems, and ModHT (P g ) 6= ModHT (Qg ), for ASO problems;
2. >PMod(P g ) 6= >Q
Mod(Q g ) or, equivalently, for some interpretations I, J that are models
g
of both P and Qg , exactly one of the properties I >P J and I >Q J holds.
Consequently, we consider a pair of interpretations I, J to be a witness for an instance
of that problem to be a YES instance if I is a model (for CO problems) or hI, Ji is an
HT-model (for ASO problems) of exactly one of the two theories P g and Qg , or if I, J are
models of both P g and Qg and exactly one of the properties I >P J and I >Q J holds.
It is easy to see that if a witness exists, then there is a witness I, J such that I and
J consist only of atoms that occur in P and Q. After such a witness is guessed, verifying
it (showing that condition (1) or (2) holds) can be done in polynomial time. It is well
known that checking whether I is a model (hI, Ji is an HT-model) of a propositional theory
can be done in polynomial time, and the same holds true for deciding I >P J and I >Q J
(Lemma 33). Thus, the complementary problem is in NP. 2
Theorem 24 Given ranked CO (ASO, respectively) problems P and Q, and rank interval
s,[i,j]
[i, j], deciding P g
Q is co-NP-complete.
Proof. For membership, we consider the complementary problem. By Theorem 16, it
consists of deciding whether at least one of the conditions (1) - (4) below holds:
1. P g and Qg are not strongly equivalent (that is, Mod (P g ) 6= Mod (Q g ) for CO problems,
ModHT (P g ) 6= ModHT (Qg ) for ASO problems);
2. for some interpretations I, J that are models of both Mod (P g ) and Mod (Q g ), exactly
one of properties I >PMod(P g ) J and I >Q
Mod(Q g ) J holds;
388

fiStrong Equivalence of Qualitative Optimization Problems

3. for some I, J  Mod (P g ) such that i < diff P (I, J) or i < diff Q (I, J), diff P (I, J) 6=
diff Q (I, J) and it holds that diff P (I, J)  j or diff Q (I, J)  j;
P

Q

<i
<i
4. >Mod(P
g ) 6= >Mod(Q g ) or, equivalently, for some interpretations I, J that are models of
both Mod (P g ) and Mod (Q g ), exactly one of properties I >P<i J and I >Q<i J holds.

We prove that the complementary problem is in NP. As in other proofs, we use for a
membership witness a pair of interpretations I, J that explicitly demonstrates that one of
the conditions (1) - (4) holds. As before, if such a witness exists, there is also one consisting
of atoms occurring in programs P and Q only. For each condition, given such a pair I, J
(restricted to atoms from P and Q), one can verify in polynomial time whether the condition
holds (for condition (1), we repeat the argument from the previous proof, for conditions (2)
and (4), we use Lemma 33, and for condition (3)  Lemma 32).
Hardness follows directly from co-NP-completeness of deciding strong equivalence between two propositional theories under either of the semantics we consider and from Corollary 17. 2

References
Boutilier, C., Brafman, R., Domshlak, C., Hoos, H., & Poole, D. (2003). CP-nets: A tool
for representing and reasoning with conditional ceteris paribus preference statements.
Journal of Artificial Intelligence Research, 21, 135191.
Boutilier, C., Brafman, R., Domshlak, C., Hoos, H., & Poole, D. (2004). Preference-based
constrained optimization with CP-nets. Computational Intelligence, 20, 137157.
Brewka, G., Niemela, I., & Syrjanen, T. (2004). Logic programs with ordered disjunctions.
Computational Intelligence, 20 (2), 335357.
Brewka, G., Niemela, I., & Truszczynski, M. (2003). Answer set optimization. In Gottlob,
G., & Walsh, T. (Eds.), Proceedings of the 18th International Joint Conference on
Artificial Intelligence (IJCAI 2003), pp. 867872. Morgan Kaufmann.
Brewka, G., Niemela, I., & Truszczynski, M. (2011). Answer set optimization. Unpublished
manuscript.
Calimeri, F., Ianni, G., Krennwallner, T., & Ricca, F. (2012). The answer set programming
competition. AI Magazine, 33 (4), 114118.
Delgrande, J. P., Schaub, T., Tompits, H., & Wang, K. (2004). A classification and survey of preference handling approaches in nonmonotonic reasoning. Computational
Intelligence, 20 (2), 308334.
Eiter, T., Faber, W., Fink, M., & Woltran, S. (2007a). Complexity results for answer set
programming with bounded predicate arities and implications. Annals of Mathematics
and Artificial Intelligence, 51 (24), 123165.
Eiter, T., Fink, M., & Woltran, S. (2007b). Semantical characterizations and complexity of
equivalences in answer set programming. ACM Transactions on Computational Logic,
8 (3).
389

fiFaber, Truszczynski, & Woltran

Eiter, T., & Gottlob, G. (1995). On the computational cost of disjunctive logic programming:
Propositional case. Annals of Mathematics and Artificial Intelligence, 15 (3/4), 289
323.
Faber, W., Truszczynski, M., & Woltran, S. (2012). Strong equivalence of qualitative optimization problems. In Brewka, G., Eiter, T., & McIlraith, S. A. (Eds.), Proceedings
of the 13th International Conference on Principles of Knowledge Representation and
Reasoning (KR 2012), pp. 188198. AAAI Press.
Faber, W., & Konczak, K. (2006). Strong order equivalence. Annals of Mathematics and
Artificial Intelligence, 47 (12), 4378.
Faber, W., Tompits, H., & Woltran, S. (2008). Notions of strong equivalence for logic
programs with ordered disjunction. In Brewka, G., & Lang, J. (Eds.), Proceedings
of the 11th International Conference on Principles of Knowledge Representation and
Reasoning (KR 2008), pp. 433443. AAAI Press.
Ferraris, P. (2005). Answer sets for propositional theories. In Baral, C., Greco, G., Leone,
N., & Terracina, G. (Eds.), Proceedings of the 8th International Conference on Logic
Programming and Nonmonotonic Reasoning (LPNMR 2005), Vol. 3662 of Lecture
Notes in Computer Science, pp. 119131. Springer.
Ferraris, P., & Lifschitz, V. (2005). Mathematical foundations of answer set programming.
In We Will Show Them! Essays in Honour of Dov Gabbay, pp. 615664. College
Publications.
Gelfond, M., & Lifschitz, V. (1991). Classical negation in logic programs and disjunctive
databases. New Generation Computing, 9, 365385.
Goldsmith, J., Lang, J., Truszczynski, M., & Wilson, N. (2008). The computational complexity of dominance and consistency in CP-nets. Journal of Artificial Intelligence
Research, 33, 403432.
Goldsmith, J., & Junker, U. (Eds.). (2008). Special Issue on Preferences, Vol. 29(4) of AI
Magazine.
Heyting, A. (1930). Die formalen Regeln der intuitionistischen Logik. Sitzungsberichte der
Preussischen Akademie der Wissenschaften, 1, 4256.
Kaci, S. (2011). Working with Preferences. Springer.
Lifschitz, V. (1985). Computing circumscription. In Joshi, A. K. (Ed.), Proceedings of
the 9th International Joint Conference on Artificial Intelligence (IJCAI 1985), pp.
121127. Morgan Kaufmann.
Lifschitz, V., Pearce, D., & Valverde, A. (2001). Strongly equivalent logic programs. ACM
Transactions on Computational Logic, 2 (4), 526541.
Lin, F. (2002). Reducing strong equivalence of logic programs to entailment in classical
propositional logic. In Fensel, D., Giunchiglia, F., McGuiness, D. L., & Williams, M.A. (Eds.), Proceedings of the 8th International Conference on Principles of Knowledge
Representation and Reasoning (KR 2002), pp. 170176. Morgan Kaufmann.
Marek, V. W., & Truszczynski, M. (1993). Nonmonotonic Logic; Context-Dependent Reasoning. Springer, Berlin.
390

fiStrong Equivalence of Qualitative Optimization Problems

Marek, V., & Truszczynski, M. (1999). Stable models and an alternative logic programming
paradigm. In Apt, K., Marek, W., Truszczynski, M., & Warren, D. (Eds.), The Logic
Programming Paradigm: a 25-Year Perspective, pp. 375398. Springer, Berlin.
Niemela, I. (1999). Logic programming with stable model semantics as a constraint programming paradigm. Annals of Mathematics and Artificial Intelligence, 25 (3-4), 241273.
Pearce, D. (1997). A new logical characterisation of stable models and answer sets. In Dix,
J., Pereira, L. M., & Przymusinski, T. (Eds.), Proceedings of the 6th International
Workshop on Non-Monotonic Extensions of Logic Programming (NMELP 1996), Vol.
1216 of Lecture Notes in Computer Science, pp. 5770. Springer.
Pearce, D., Tompits, H., & Woltran, S. (2009). Characterising equilibrium logic and nested
logic programs: Reductions and complexity. Theory and Practice of Logic Programming, 9 (5), 565616.
Simons, P., Niemela, I., & Soininen, T. (2002). Extending and implementing the stable
model semantics. Artificial Intelligence, 138, 181234.
Turner, H. (2003). Strong equivalence made easy: Nested expressions and weight constraints.
Theory and Practice of Logic Programming, 3 (45), 609622.

391

fi