Journal Artificial Intelligence Research 29 (2007) 4977

Submitted 09/06; published 05/07

Solution-Guided Multi-Point Constructive Search Job
Shop Scheduling
J. Christopher Beck

jcb@mie.utoronto.ca

Department Mechanical & Industrial Engineering
University Toronto, Canada

Abstract
Solution-Guided Multi-Point Constructive Search (SGMPCS) novel constructive
search technique performs series resource-limited tree searches search
begins either empty solution (as randomized restart) solution
encountered search. small number elite solutions maintained
search. introduce technique perform three sets experiments
job shop scheduling problem. First, systematic, fully crossed study SGMPCS
carried evaluate performance impact various parameter settings. Second,
inquire diversity elite solution set, showing, contrary expectations,
less diverse set leads stronger performance. Finally, compare best parameter
setting SGMPCS first two experiments chronological backtracking, limited
discrepancy search, randomized restart, sophisticated tabu search algorithm set
well-known benchmark problems. Results demonstrate SGMPCS significantly
better constructive techniques tested, though lags behind tabu search.

1. Introduction
number metaheuristic evolutionary approaches optimization described
solution-guided, multi-point searches. example, genetic mimetic algorithms, population solutions maintained used basis search. new
generation created combining aspects current generation: search therefore
guided existing solutions. population contains number individual solutions,
search makes use multiple points search space. Traditional single-point metaheuristics, tabu search, augmented similar way. TSAB tabu
search (Nowicki & Smutnicki, 1996) maintains elite pool consisting small number
best solutions found far search. Whenever basic search reaches
threshold number moves without finding new best solution, search restarted one
elite solutions. Again, higher-level search guided multiple existing solutions,
though guidance somewhat different genetic algorithms.
Solution-Guided Multi-Point Constructive Search (SGMPCS) 1 framework designed
allow constructive search guided multiple existing (suboptimal) solutions
problem instance. randomized restart techniques (Gomes, Selman, & Kautz,
1998), framework consists series tree searches restricted resource limit,
1. previous conference workshop publications, SGMPCS referred simply Multi-Point Constructive Search (Beck, 2006; Heckman & Beck, 2006; Beck, 2005a, 2005b). Empirical evidence
importance solution guidance motivated change name reflective important
differences work existing tree search techniques.
c
2007
AI Access Foundation. rights reserved.

fiBeck

typically maximum number fails. resource limit reached, search restarts.
difference randomized restart SGMPCS keeps track small set elite
solutions: best solutions found. search restarted, starts
empty solution, randomized restart, one elite solutions.
paper, undertake first fully crossed systematic empirical study SGMPCS. particular, Section 3 investigate different parameter settings impact search performance makespan-minimization variant job shop scheduling problem. Results indicate guidance elite solutions contributes significantly
algorithm performance but, somewhat unexpectedly, smaller elite set size results
better performance. Indeed, elite set size one showed best performance.
result motivates subsequent experimentation diversity elite set Section 4.
show, contrary expectation consistent elite set size one,
less diverse elite set, stronger performance. discussed in-depth Section
6, two sets experiments call question extent exploitation
multiple points search space important performance SGMPCS.
final experiment (Section 5) compares best parameter settings found first two
experiments chronological backtracking, limited discrepancy search (Harvey, 1995),
randomized restart, state-of-the-art tabu search (Watson, Howe, & Whitley, 2006)
set well-known benchmarks. results show SGMPCS significantly outperforms constructive search methods perform well tabu
search.
contributions paper follows:
1. introduction systematic experimental evaluation Solution-Guided MultiPoint Constructive Search (SGMPCS).
2. investigation importance diversity elite set performance
SGMPCS.
3. demonstration SGMPCS significantly out-performs chronological backtracking, limited discrepancy search, randomized restart benchmark set job
shop scheduling problems.

2. Solution-Guided Multi-Point Constructive Search
Pseudocode basic Solution-Guided Multi-Point Constructive Search algorithm
shown Algorithm 1. algorithm initializes set, e, elite solutions enters
while-loop. iteration, probability p, search started empty solution
(line 6) randomly selected elite solution (line 12). former case,
best solution found search, s, better worst elite solution, replaces
worst elite solution. latter case, replaces starting elite solution, r,
better r. individual search limited maximum number fails
incurred. optimal solution found proved overall bound
computational resources (e.g., CPU time, number fails) reached, best elite
solution returned.
elite solutions initialized search technique. paper, use 50
independent runs randomized texture-based heuristic employed
50

fiSolution-Guided Multi-Point Constructive Search

SGMPCS():
1
2
3
4
5
6
7
8

9
10
11
12
13
14

15

initialize elite solution set e
termination criteria unmet
rand[0, 1) < p
set upper bound cost function
set fail limit, l
:= search(, l)
6= better worst(e)
replace worst(e)
end
else
r := randomly chosen element e
set upper bound cost function
set fail limit, l
:= search(r, l)
6= better r
replace r
end
end
end
return best(e)
Algorithm 1: SGMPCS: Solution-Guided Multi-Point Constructive Search

main search (see Section 3.2). backtracking done upper bound placed
cost function. Without upper bound, run find solution, though probably one
quite low quality. initial set 50 solutions, |e| best solutions inserted
elite set. primary goal initialization quickly populate elite set.
Previous work (Beck, 2006) shown spending effort run find
good starting solutions (e.g., via backtracking search) significantly improve overall
performance, number runs impact. variance quality among
initial solutions high, best starting solution large elite set much better
small elite set. difference alone sufficient skew experiments
measured impact different elite set sizes overall performance. mitigate
effect generate fixed number elite solution candidates (i.e., 50) choose
|e| best. interesting direction future work adaptively determine best time
transition elite pool generation main search.
2.1 Search
lines 6 12 search(r, l) function standard tree search randomization,
limited number fails, l, and, r 6= , guided solution r. search function
returns best solution found, any, indication whether search space
exhausted. Given large enough fail limit, individual search completely search
space. Therefore, completeness approach depends policy setting
increasing fail limit. see Experiment 3 (Section 5), SGMPCS able
51

fiBeck

find optimal solutions prove optimality. place restrictions
search, allowing tree traversal technique used. particular, experiment
chronological backtracking limited discrepancy search (Harvey, 1995).
r 6= , search guided reference solution, r. guiding solution
simply used value ordering heuristic: search using (randomized) variable
ordering heuristic specifying value assigned variable one
reference solution, provided still domain variable.
search tree created asserting series choice points form: hV = xihVi 6=
xi, Vi variable x value assigned V . Given importance variable
ordering heuristics constructive search, expect order choice points
impact search performance. SGMPCS can, therefore, use variable ordering
heuristic choose next variable assign. choice point formed using value
assigned reference solution or, value reference solution inconsistent,
heuristically chosen value. formally, let reference solution, r, set variable
assignments, {hV1 = x1 i, hV2 = x2 i, . . . , hVm = xm i}, n, n number
variables. variable ordering heuristic complete freedom choose variable, V ,
assigned. xi dom(Vi ), hVi = xi r, choice point made x = x .
Otherwise, xi
/ dom(Vi ), value ordering heuristic used choose x dom(V ).
need account possibility x
/ dom(Vi ) reference solution
necessarily valid solution later SGMPCS search process. take simple
example, reference solution cost 100 constrain search find
better solution, reach reference solution. Rather, via constraint propagation,
reach dead-end different solution.
technique starting constructive search reference solution quite general.
Existing high-performance variable ordering heuristics exploited and, addressing
case xi
/ dom(Vi ), make assumptions changes constraint model
may made reference solution originally found. particular,
means elite solution could solution relaxation full problem.
2.2 Setting Bounds Cost Function
individual search (lines 6 12), place upper bound cost function.
bound impact set solutions and, therefore, solutions may
enter elite set. Intuitions constructive search metaheuristics differ
appropriate choice upper bound. standard tree search optimization
discrete cost function, usual approach use c 1 upper bound, c
best solution found far. Using higher bound would expand search space
without providing heuristic benefit. contrast, standard metaheuristic approach,
search usually restricted enforcing upper bound cost acceptable states:
search allowed travel worse states order (hopefully) find better ones.
consequence, common replace elite solution better, necessarily
best-known, solution found. Since elite solutions used heuristically guide search,
even solutions best-known provide heuristic guidance.
two perspectives result two policies:
1. Global Bound: Always set upper bound search cost c 1.
52

fiSolution-Guided Multi-Point Constructive Search

2. Local Bound: starting empty solution, set upper bound
equal one less cost worst elite solution. starting elite
solution, set upper bound one less cost starting solution.

constraint programming, back-propagation extent placing bound
cost function results domain reductions decision variables. Previous experiments
SGMPCS optimization problems strong back-propagation (such job shop
scheduling objective minimizing makespan) show global bound policy
superior (Beck, 2006). problems weaker back-propagation satisfaction
problems (where back-propagation), local bound approach performs better
(Beck, 2006; Heckman & Beck, 2006). Based results, use global bound
policy here.
2.3 Related Work
SGMPCS directly inspired TSAB tabu search algorithm (Nowicki & Smutnicki, 1996) noted above. TSAB, elite pool consisting small number best
solutions found maintained search. Whenever basic tabu search stagnates,
is, reaches threshold number moves without finding new best solution,
search restarted one elite solutions. tabu list modified
search restarted, follow different search path. basic mechanism,
adapted constructive search, used SGMPCS. number years, TSAB
state-of-the-art algorithm job shop scheduling problems. recently
over-taken i-TSAB, algorithm based TSAB makes sophisticated use
elite pool (Nowicki & Smutnicki, 2005). in-depth analysis i-TSAB see
work Watson, Howe, Whitley (2006).
SGMPCS performs series resource-limited tree searches. clear behaviour related extensive work randomized restart (Gomes et al., 1998; Horvitz,
Ruan, Gomes, Kautz, Selman, & Chickering, 2001; Kautz, Horvitz, Ruan, Gomes, & Selman, 2002; Gomes, Fernandez, Selman, & Bessiere, 2005; Hulubei & OSullivan, 2006).
Indeed, setting p, probability searching empty solution, 1 results
randomized restart technique. observed search effort chronological
backtracking given variable ordering forms heavy-tailed distribution. Intuitively,
means randomly chosen variable ordering non-trivial chance resulting
either small large cost find solution problem instance. solution
found threshold amount effort, beneficial restart search different
variable ordering new ordering non-trivial probability quickly leading
solution.
number techniques make use randomized heuristic backtracking (Prestwich, 2002; Jussien & Lhomme, 2002; Dilkina, Duan, & Havens, 2005)
form hybrid local search tree search allow exploration search space
constrained standard tree search. approaches differ SGMPCS
fundamental level: use (multiple) existing solutions guide search.
53

fiBeck

3. Experiment 1: Parameter Settings
primary purpose experiment understand impact different parameter settings performance SGMPCS algorithms. present fully crossed
experiment evaluate impact varying parameters SGMPCS.
3.1 SGMPCS Parameters
Elite Set Size number elite solutions maintained search
key parameter controlling extent multiple points search space
exploited SGMPCS. seem significant experimentation
elite set size metaheuristic community, anecdotally, hybrid tabu search
elite set smaller six performs much worse larger elite sets job shop
scheduling problems.2 paper, experiment elite set sizes {1, 4, 8, 12, 16, 20}.
Proportion Searches Empty Solution p parameter controls
probability searching empty solution versus searching one elite
solutions. high p value result algorithm behaviour similar randomized restart
indeed, p = 1 randomized restart algorithm. One reason p parameter
included SGMPCS intuition impact diversity
elite pool: higher p value diverse elite pool solutions
unrelated current elite solutions likely enter pool. see
Experiment 2, intuition contradicted empirical results. Here, study
p = {0, 0.25, 0.5, 0.75, 1}.
Fail Limit Sequence resource limit sets number fails allowed
tree search. Rather constant limit faced problem tuning
limit (Gomes et al., 1998), following work Kautz, Horvitz, Ruan, Gomes, Selman
(2002), adopt dynamic restart policy limit number fails changes
problem solving. look two simple fail limit sequences (seq):
Luby - fail limit sequence optimal sequence satisfaction problems condition knowledge solution distribution (Luby, Sinclair, &
Zuckerman, 1993). sequence follows: 1, 1, 2, 1, 1, 2, 4, 1, 1, 2, 1, 1, 2, 4, 8,
.... is, fail limit first second searches 1 fail, third search
2 fails, on. sequence independent outcome searches
whether search empty solution guided elite solution.
Polynomial (Poly) - fail limit initialized 32 reset 32 whenever new
best solution found. Whenever search fails find new best solution, bound
grows polynomially adding 32 fail limit. value 32 chosen give
reasonable increase fail limit iteration. tuning done determine
value 32. Luby limit, Poly fail limit independent choice
search empty solution elite solution.
2. Jean-Paul Watson personal communication.

54

fiSolution-Guided Multi-Point Constructive Search

Backtrack Method Finally, noted above, style individual tree search
limited chronological backtracking. Whether search begins empty solution
elite solution, choice search performed. particular,
backtracking (bt) factor either standard chronological backtracking limited discrepancy
search (LDS) (Harvey, 1995). either case, search limited fail limit
described above.
3.2 Experimental Details
experimental problems job shop scheduling problem (JSP) instances. n job
shop scheduling problem consists set n jobs, consisting complete ordering
activities. activity duration specified resource must
execute. ordering activities job represents chain precedence constraints:
activity cannot start preceding activity job completed. activity
begins execution, must execute complete duration (i.e., pre-emption allowed).
unary capacity resources, meaning resource used one
activity time. optimal solution JSP sequence activities
resource union job sequences resource sequences acyclic,
makespan (the time start earliest job end latest job)
minimized. JSP NP-hard (Garey & Johnson, 1979) received extensive study
operations research artificial intelligence literature (Jain & Meeran,
1999).
experimental instances twenty 20 20 problem instances generated using
existing generator (Watson, Barbulescu, Whitley, & Howe, 2002). durations
activities independently drawn uniform probability [1, 99]. machine
routings generated create work-flow problems job visits first 10 machines second 10 machines. Within two machine sets, routings
generated randomly uniform probability. Work-flow JSPs used
shown difficult JSPs random machine routings (Watson, 2003).
algorithm run 20 CPU minute time-out, problem instance solved
10 times independently given parameter configuration. algorithms implemented
ILOG Scheduler 6.2 run 2GHz Dual Core AMD Opteron 270 2Gb RAM
running Red Hat Enterprise Linux 4.
experiment, dependent variable mean relative error (MRE) relative
best solution known problem instance. MRE arithmetic mean
relative error run problem instance:
MRE (a, K, R) =

1 X X c(a, k, r) c (k)
|R||K|
c (k)

(1)

rR kK

K set problem instances, R set independent runs different random
seeds, c(a, k, r) lowest cost found algorithm instance k run r, c (k)
lowest cost known k. problem instances generated experiment,
best-known solution found either algorithms tested variations used
preliminary experiments.3
3. Problem instances best-known solutions available author.

55

fiBeck

variable ordering heuristic chooses pair activities resource
sequence. Texture-based heuristics (Beck & Fox, 2000) used identify resource
time point maximum contention among activities choose pair
unordered activities, branching two possible orders. heuristic randomized
specifying hresource, time pointi pair chosen uniform probability
top 10% critical pairs. starting search elite solution, heuristic
used choose pair activities sequenced, ordering found solution
asserted. standard constraint propagation techniques scheduling (Nuijten, 1994;
Laborie, 2003; Le Pape, 1994) used algorithms.
3.3 Results
fully crossed experimental design implemented, consisting four factors (|e|, p, seq,
bt) total 120 cells (6 5 2 2). cell result 10 runs
20 problem instances, time limit run 20 minutes. results
generated 333 CPU days.
Analysis variance (ANOVA) MRE 1200 seconds shows factors
interactions significant p 0.005. ANOVA shown Table 1.
Factor(s)
e
p
bt
seq
e:p
e:bt
p:bt
e:seq
p:seq
bt:seq
e:p:bt
e:p:seq
e:bt:seq
p:bt:seq
e:p:bt:seq
Residuals

Df
5
4
1
1
20
5
4
5
4
1
20
20
5
4
20
23880

Sum Sq
0.9995
21.9376
0.8626
0.4924
0.3735
0.1144
0.3023
0.1359
0.2265
0.0036
0.0372
0.0503
0.0041
0.0078
0.0105
3.8821

Mean Sq
0.1999
5.4844
0.8626
0.4924
0.0187
0.0229
0.0756
0.0272
0.0566
0.0036
0.0019
0.0025
0.0008
0.0020
0.0005
0.0002

F value
1229.6015
33736.2277
5306.1350
3028.6761
114.8711
140.7780
464.9442
167.1942
348.3872
22.1468
11.4361
15.4859
5.0191
12.0281
3.2147

Pr(>F)
< 2.2e-16
< 2.2e-16
< 2.2e-16
< 2.2e-16
< 2.2e-16
< 2.2e-16
< 2.2e-16
< 2.2e-16
< 2.2e-16
2.540e-06
< 2.2e-16
< 2.2e-16
0.0001342
9.144e-10
1.547e-06

Table 1: Summary analysis variance found using R statistical package (R
Development Core Team, 2006). factors interactions significant
p 0.005.

attain detailed view results, Tukey HSD test (R Development Core
Team, 2006) performed factors. Tukey HSD allows comparison multiple means controlling problems multiple testing. Table 2 shows
that, significance level p 0.005:
Smaller |e| significantly better larger |e|.
56

fiSolution-Guided Multi-Point Constructive Search

p = 0 p = 0.25 significantly different. However, result
significantly lower MRE p = 0.50. p > 0.25, smaller value p better.
Luby fail limit sequence significantly better Poly sequence.
Chronological backtracking significantly better LDS.
|e|
p
seq
bt

1 < 4 < 8 < 12 < 16 < 20
{0, 0.25} < 0.50 < 0.75 < 1.00
Luby < Poly
chron < lds

Table 2: results independent Tukey HSD tests factor. Significance level
test parameter p 0.005. < b means incurs lower MRE
b, difference MRE values statistically significant. Parenthesis
(i.e., {}) indicate statistically significant difference MRE.
Finally, Table 3 presents five best five worst parameter settings determined
MRE 1200 CPU seconds. interesting note five worst settings
p = 1.00, corresponds pure randomized restart algorithm.
|e|

p
BT
Seq.
MRE
Five Best Parameter Settings
1 0.25 chron Luby 0.03158449
4 0.25 chron Luby 0.03308468
1 0.25 chron Poly 0.03328429
4 0.50 chron Luby 0.03390888
1 0.50 chron Poly 0.03421443
Five Worst Parameter Setting
4 1.00 chron Poly 0.12637893
20 1.00 chron Poly 0.12645527
1 1.00 chron Poly 0.12651117
12 1.00 chron Poly 0.12653876
8 1.00 chron Poly 0.12711269

Table 3: best worst parameter combinations Experiment 1 based MRE.
graphical representation results experiment impractical. However,
statistical analysis based performance set parameter values 1200
seconds, evolution performance time reflected results.
Given arbitrariness 1200 second time limit, valid question wonder
results would change given different limit. address concern provide
graphical sense results, present graphs experimental results one
parameter varied others held best values. parameters
two values (i.e., seq bt) display results two different values |e| well.
Elite Set Size: |e| Figure 1 shows results varying elite set size
parameter settings follows: p = 0.25, seq = Luby, bt = chron. differences
57

fiBeck

various levels |e| conclusion lower |e| results better performance
seen hold time limits less 1200 seconds. fact, superiority
algorithms small |e| visible early search; 200 seconds,
gaps among algorithms begin narrow.
0.2

SGMPCS |e|=20 (p=0.25, seq=luby, bt=chron)
SGMPCS |e|=16 (p=0.25, seq=luby, bt=chron)
SGMPCS |e|=12 (p=0.25, seq=luby, bt=chron)
SGMPCS |e|=8 (p=0.25, seq=luby, bt=chron)
SGMPCS |e|=4 (p=0.25, seq=luby, bt=chron)
SGMPCS |e|=1 (p=0.25, seq=luby, bt=chron)

Mean Relative Error

0.15

0.1

0.05

0

0

200

400

600
Time (secs)

800

1000

1200

Figure 1: mean relative error SGMPCS set makespan JSPs size
elite set varied.
Given importance diversity elite solution sets within metaheuristic literature, performance algorithms elite size 1 somewhat surprising
seems contradict original intuitions motivations SGMPCS.
return point Experiment 2.
Probability Search Empty Solution: p Figure 2 displays results
varying p holding parameter values constant |e| = 1, seq = Luby,
bt = chron. dramatic result performance p = 1.00, pure
randomized restart technique. settings p result performance
order magnitude4 better p = 1.00.
Unlike experiments |e| values, observe change relative
strengths different parameter settings different time limits. p = 0.25
results best performance time limits, low limits p = 0 appears out-perform
p = 0.50 p = 0.75. Later, latter two parameter values result better performance
p = 0. Note apparent contradiction statistical significance findings
4. MRE value achieved p = 1.00 1200 seconds achieved p values less 100
seconds.

58

fiSolution-Guided Multi-Point Constructive Search

0.2

SGMPCS p=1.00 (|e|=1, seq=luby, bt=chron)
SGMPCS p=0.00 (|e|=1, seq=luby, bt=chron)
SGMPCS p=0.75 (|e|=1, seq=luby, bt=chron)
SGMPCS p=0.50 (|e|=1, seq=luby, bt=chron)
SGMPCS p=0.25 (|e|=1, seq=luby, bt=chron)

Mean Relative Error

0.15

0.1

0.05

0

0

200

400

600
Time (secs)

800

1000

1200

Figure 2: mean relative error varying p-values SGMPCS makespan JSPs.
Table 2 explained fact interaction among parameters
p = 0 performs better values rest parameters.
Fail Sequence: seq Plots comparing two different fail sequences shown Figure
3 p = 0.25, bt = chron, two different |e| values, |e| = 1 |e| = 4.
run-times less 100 CPU seconds, Poly fail sequence performs better
Luby sequence conditions. threshold, Luby performs better.
Backtracking Method: bt Finally, Figure 4 displays result varying backtracking method parameters p = 0.25, seq = luby, |e| = 1 |e| = 4. Using
chronological backtracking problems clearly results superior performance
time limits compared LDS.
3.4 Summary
experiment demonstrates job shop scheduling makespan minimization,
best-performing parameter settings SGMPCS are: small elite set, relatively low
probability starting search empty solution, Luby fail limit sequence,
chronological backtracking. general, results robust changes time limit
placed runs.
One careful interpreting results number reasons.
1. shown ANOVA, parameters statistically significant interactions,
directly seen performance p = 0, |e| = 1 Figure 2.
59

fiBeck

0.2

SGMPCS poly, |e|=4 (p=0.25, bt=chron)
SGMPCS luby, |e|=4 (p=0.25, bt=chron)
SGMPCS poly, |e|=1 (p=0.25, bt=chron)
SGMPCS luby, |e|=1 (p=0.25, bt=chron)

Mean Relative Error

0.15

0.1

0.05

0

0

200

400

600
Time (secs)

800

1000

1200

Figure 3: mean relative error makespan JSPs two different fail sequences
|e| = 1 |e| = 4.

2. statistically significant effect factors, exception
poor performance p = 1.00, performance different parameter settings
displayed graphs wildly varying. differences among
levels different factors may statistically significant, may practically
significant. advantage SGMPCS suggests fine tuning
parameters really necessary: SGMPCS somewhat robust sense
small changes parameters result small changes performance (again,
exception p = 1.00).
3. results presented based single problem, job shop scheduling
makespan minimization. comment applicability results
problems Section 6.2.

4. Experiment 2: Impact Elite Set Diversity
SGMPCS designed number intuitions impact diversity performance likely effect different parameter settings performance. particular,
test following intuitions:
higher |e| tend result higher diversity. strict relationship
possible solutions e identical.
60

fiSolution-Guided Multi-Point Constructive Search

0.2

SGMPCS lds, |e|=4 (p=0.25, seq=luby)
SGMPCS lds, |e|=1 (p=0.25, seq=luby)
SGMPCS chron, |e|=4 (p=0.25, seq=luby)
SGMPCS chron, |e|=1 (p=0.25, seq=luby)

Mean Relative Error

0.15

0.1

0.05

0

0

200

400

600
Time (secs)

800

1000

1200

Figure 4: mean relative error using Luby fail limit either chronological backtracking LDS makespan JSPs.

higher p value tend increase diversity. Since higher p increases proportion searches empty solution, lead wider exploration
search space therefore diverse elite set.
extent exploitation multiple points search space important
SGMPCS reflected performance sets different levels
diversity. is, important simultaneously share search effort among
number regions search space, would expect higher levels diversity
would out-perform lower levels threshold diminishing returns.
4.1 Measuring Diversity
disjunctive graph (Pinedo, 2005) standard representation job shop scheduling
problem activity node precedence constraints relating activities
job directed, conjunctive arcs. pair activities different jobs
resource, disjunctive arc: arc directed either
way. solution, disjunctive arc must oriented one direction graph
(which contains conjunctive arcs) acyclic.
Following work Watson, Beck, Howe, Whitley (2003), measure diversity
elite pool mean pair-wise disjunctive graph distance. binary variable
introduced disjunctive constraint one value represents one orientation
arc value, opposite orientation. solution problem therefore
61

fiBeck

represented assignment disjunctive graph variables. distance
pair solutions simply Hamming distance disjunctive graph
variable assignments. given elite set, take mean pair-wise distance measure
diversity.
Clearly, measure well-formed |e| = 1. assume diversity
elite set size 1 0.
4.2 Initial Evaluation Diversity
initial evaluation diversity simply measure diversity problem instances subset parameter values used Experiment 1. SGMPCS solver
instrumented calculated pair-wise Hamming distance whenever new solution
inserted elite set.
Figure 5 displays diversity elite set time different elite set sizes.
expected, higher elite set size results higher diversity. However, interesting
note stability diversity: first 100 seconds, diversity set changes
little, quality solutions (see Figure 1) continues improve.
1200

Mean Pair-wise Hamming Distance

1000

800

SGMPCS |e| = 20 (p=0.25, seq=luby, bt=chron)
SGMPCS |e| = 16 (p=0.25, seq=luby, bt=chron)
SGMPCS |e| = 12 (p=0.25, seq=luby, bt=chron)
SGMPCS |e| = 8 (p=0.25, seq=luby, bt=chron)
SGMPCS |e| = 4 (p=0.25, seq=luby, bt=chron)

600

400

200

0

0

200

400

600
Time (secs)

800

1000

1200

Figure 5: diversity measured mean pair-wise Hamming distance among solutions
elite set different elite set sizes.
Figure 6 shows diversity changing p values. Contrary expectations,
higher p values exhibit lower diversity. analysis shows primary cause
pattern way elite solutions replaced. search starts
elite solution, improved solution replaces starting solution. fail
limit relatively low, starting solution is, high probability, closest
62

fiSolution-Guided Multi-Point Constructive Search

elite solution improved solution. Therefore, replacing starting elite solution
relatively small impact overall diversity. contrast, search starts
empty solution, worst elite solution replaced improved solution.
demonstrate below, difference replacement policy results significantly lower elite
pool diversity searches start empty solution: diversity decreases
increasing p.
1200

Mean Pair-wise Hamming Distance

1000

800

600
SGMPCS p = 0.00 (|e|=4, seq=luby, bt=chron)
SGMPCS p = 0.25 (|e|=4, seq=luby, bt=chron)
SGMPCS p = 0.50 (|e|=4, seq=luby, bt=chron)
SGMPCS p = 0.75 (|e|=4, seq=luby, bt=chron)
SGMPCS p = 1.00 (|e|=4, seq=luby, bt=chron)

400

200

0

0

200

400

600
Time (secs)

800

1000

1200

Figure 6: diversity measured mean pair-wise Hamming distance among solutions
elite set values p.

4.3 Manipulating Diversity
Motivated interpretation results Figure 6, section experiment
manipulation diversity changing elite solution replacement rule. Three
levels diversity defined follows:
Low Diversity: Regardless whether search starts elite solution empty
solution, improved solution replaces worst elite one. distance-based criteria
used. initialization phase, follow approach used above: 50
elite solutions independently generated without constraining makespan,
|e| best solutions inserted elite set.
Medium Diversity: standard elite set replacement rules used Experiment 1
defined Section 2 used.
63

fiBeck

High Diversity: search starts empty solution, closest elite solution
replaced improving solution found. search starts elite solution, starting solution replaced. noted above, latter rule results
replacement closest solution high probability. Therefore, two rules
almost always equivalent replacing closest solution. initialization
phase, |e| solutions generated inserted elite pool. Then, additional
50 |e| solutions generated and, one solutions better worst
elite solution, new solution inserted elite set, replacing closest elite
solution.
verify manipulations indeed affect diversity elite set expected,
conduct initial experiment subset parameter space. Using problem
instances Experiment 1 hardware software configurations, solved
problem instance 10 times diversity condition varying |e| p.
Rather fully crossed experiment, set |e| = 4 varied p 0 1,
set p = 0.25 varied |e| 4 20.
Figures 7 8 demonstrate manipulations affect diversity
elite set expected. show different diversity levels two |e| values
two p values displaying data impractical. interesting note
high low diversity conditions, effect diversity parameters disappears:
little variation diversity |e| p varied two diversity
conditions.
1200

Mean Pair-wise Hamming Distance

1000

800

High: |e| = 8 (p=0.25, seq=luby, bt=chron)
High: |e| = 4 (p=0.25, seq=luby, bt=chron)
Medium: |e| = 8 (p=0.25, seq=luby, bt=chron)
Medium: |e| = 4 (p=0.25, seq=luby, bt=chron)
Low: |e| = 8 (p=0.25, seq=luby, bt=chron)
Low: |e| = 4 (p=0.25, seq=luby, bt=chron)

600

400

200

0

0

200

400

600
Time (secs)

800

1000

1200

Figure 7: diversity measured mean pair-wise Hamming distance among solutions
elite set different diversity levels |e| = 4 |e| = 8.

64

fiSolution-Guided Multi-Point Constructive Search

1200

Mean Pair-wise Hamming Distance

1000

800
High: p = 0.00 (|e|=4, seq=luby, bt=chron)
High: p = 0.25 (|e|=4, seq=luby, bt=chron)
Medium: p = 0.00 (|e|=4, seq=luby, bt=chron)
Medium: p = 0.25 (|e|=4, seq=luby, bt=chron)
Low: p = 0.00 (|e|=4, seq=luby, bt=chron)
Low: p = 0.25 (|e|=4, seq=luby, bt=chron)

600

400

200

0

0

200

400

600
Time (secs)

800

1000

1200

Figure 8: diversity measured mean pair-wise Hamming distance among solutions
elite set different diversity levels p = 0 p = 0.25.

4.4 Experimental Details
verified indeed three different diversity settings, test
impact different diversity levels performance SGMPCS. perform fully
crossed experiment three independent variables: |e| which, above, takes values
{1, 4, 8, 12, 16, 20}; p which, above, takes values {0, 0.25, 0.5, 0.75, 1}; diversity
(div) taking values low, medium, high corresponding manipulations described
above. conditions, use chronological backtracking Luby fail limit sequence.
experimental details including problem instances, hardware software,
1200 CPU second time limit, heuristics propagators, evaluation criteria
(MRE) Experiment 1 (see Section 3.2).
4.5 Results
fully crossed experimental design results 90 cells (6 5 3). cell result
10 runs 20 problem instances 20 minute time limit. results
generated 250 CPU days.
summary analysis variance shown Table 4. results demonstrate
factors interactions significant p 0.005. Tukey HSD test (R
Development Core Team, 2006) significance level p 0.005 done
factors, results summarized Table 5. Tukey HSD results indicate that:
65

fiBeck

Experiment 1, lower |e| better, though case significant
difference |e| = 1 |e| = 4.
p = 0 significantly worse p = 0.50 turn significantly worse
p = 0.25. Recall Experiment 1, p = 0 significantly different
p = 0.25.
Lower diversity better medium turn better high diversity.
Factor(s)
e
p
div
e:p
e:div
p:div
e:p:div
Residuals

Df
5
4
2
20
10
8
40
17910

Sum Sq
0.0709
21.4690
0.0706
0.0584
0.0234
0.0563
0.0186
3.1008

Mean Sq
0.0142
5.3673
0.0353
0.0029
0.0023
0.0070
0.0005
0.0002

F value
81.9130
31000.5636
204.0232
16.8679
13.4938
40.6166
2.6925

Pr(>F)
< 2.2e-16
< 2.2e-16
< 2.2e-16
< 2.2e-16
< 2.2e-16
< 2.2e-16
4.298e-08

Table 4: Summary analysis variance found using R statistical package (R
Development Core Team, 2006). factors interactions significant
p 0.005.

|e|
p
div

{1, 4} < 8 < {12, 16} < 20
0.25 < 0.50 < 0 < 0.75 < 1.00
low < medium < high

Table 5: results independent Tukey tests factor diversity experiment.
Significance level test parameter p 0.005.
Finally, Table 6 presents parameter values result five lowest five
highest MRE results. Note previous best set parameter values (|e| = 1, p = 0.25,
div = med) incurs slightly worse MRE |e| = 4, p = 0.25, div = low.
4.6 Summary
experiment diversity addressed number intuitions:
expected, larger elite set results higher elite set diversity.
Contrary expectations, higher probability searching empty solution
decreases diversity. able show impact directly due
p value rather different elite set replacement rules.
Finally, importantly, appears diversity elite set negatively
correlated performance: lower diversity, higher performance.
66

fiSolution-Guided Multi-Point Constructive Search

|e|
p
Div
MRE
Five Best Parameter Settings
4 0.25 low
0.03085739
1 0.25 med 0.03158449
8 0.25 low
0.03224803
16 0.25 low
0.03231168
12 0.25 low
0.03233298
Five Worst Parameter Setting
20 1.00 med 0.12482888
8 1.00 low
0.12484571
1 1.00 low
0.12487085
12 1.00 med 0.12488335
16 1.00 low
0.12489075

Table 6: Best worst parameters diversity experiments.
result calls question extent SGMPCS performance based
exploiting multiple points search space. exploitation important
performance, would expect higher diversity out-perform lower diversity.
return question Section 6.

5. Experiment 3: Benchmark Comparison Techniques
first two experiments concentrated providing basic data performance
different parameter settings SGMPCS initial inquiry reasons underlying
SGMPCS performance. experiment, turn comparisons SGMPCS
existing heuristic search techniques.
5.1 Experimental Details
use three sets well-known JSP benchmark problem instances (Taillard, 1993).
set contains 10 instances, different sets problems different size: 20 15,
20 20, 30 15. problems numbered 11 though 40. 5 instances
used development SGMPCS.
Five algorithms tested:
Standard chronological backtracking (Chron): non-randomized version
texture-based heuristic employed used together global constraint propagators. heuristic randomized, one run done
problem instance.
Limited Discrepancy Search (LDS): identical algorithm Chron except
backtracking LDS.
5. See http://ina2.eivd.ch/collaborateurs/etd/problemes.dir/ordonnancement.dir/ordonnancement.html
benchmark instances. best-known upper lower bounds latest summary
file website, dated 23/11/05.

67

fiBeck

Randomized Restart (Restart): randomized restart algorithm using
randomized texture-based heuristic global constraint propagators used
Experiment 1 2. backtracking restarts chronological fail
limit used Luby limit. problem instance solved 10 times.
Solution-Guided Multi-Point Constructive Search (SGMPCS): take best parameters Experiments 1 2: |e| = 4, p = 0.25, seq = Luby, bt = chron,
div = low. parameter settings, sole difference SGMPCS
Restart use elite set fact searches guided elite
solution. particular, use heuristics, propagators, fail limit sequence,
type backtracking. problem instance solved 10 times.
Iterated Simple Tabu Search (i-STS): i-STS algorithm sophisticated multiphase tabu search built model state-of-the-art i-TSAB (Nowicki & Smutnicki,
2005) goal simplifying order study various components
contribute overall performance (Watson et al., 2006). Taillard benchmarks, i-STS slightly under-performs i-TSAB terms solution quality given
equal number iterations.6 use parameters recommended7 Taillard
instances: |E| = 8, Xa = 40000, Xb = 7000, pi = pd = 0.5. full definition
parameters, see work Watson et al. (2006).
time limit run 3600 CPU seconds. experimental details,
including hardware software first four algorithms, evaluation criteria
Experiment 1 (see Section 3.2). i-STS algorithm Watson et al.s
C++ implementation run hardware algorithms, meaning
direct run-time comparison meaningful.
constructive search-based approaches (i.e., algorithms tested except
i-STS), Global Bound policy followed (see Section 2.2): whenever new best solution
found, global upper bound cost function modified one less
new best cost. particular, means Restart benefits back-propagation
cost constraint exactly way SGMPCS does.
5.2 Results
mean best makespan found problem set shown Tables 7 9.
Table 10 shows performance terms finding proving optimal makespan
problems optimal solution known.
5.2.1 Comparing Constructive Search Algorithms
20 15 problems (Table 7), SGMPCS dominates constructive algorithms,
finding lowest makespan (as judged mean makespan), one instance
(instance 14). particular, problem instances mean SGMPCS solution better
best solution found Restart. terms mean relative error, SGMPCS outperforms constructive algorithms factor 3 8.
6. previous experiments, use CPU time limit. estimated i-STS 5
7 times slower i-TSAB.
7. Jean-Paul Watson, personal communication.

68

fiSolution-Guided Multi-Point Constructive Search

Prob.
11
12
13
14
15
16
17
18
19
20
MRE

LB/UB
1323/1359
1351/1367
1282/1342
1345
1304/1339
1302/1360
1462
1369/1396
1297/1335
1318/1348
(vs. UB)

Chron
1444
1587
1401
1496
1436
1496
1597
1663
1457
1387
0.0956

LDS
1410
1411
1401
1345
1403
1424
1485
1464
1388
1390
0.0343

Restart
mean
best
1412.4
1408
1404.7
1402
1388.6
1385
1378.5
1370
1432.2
1427
1416.2
1408
1509.0
1507
1459.9
1456
1393.5
1386
1388.1
1378
0.0389 0.0348

SGMPCS
mean
best
1387.8
1365
1377.2
1367
1352.9
1343
1345.2 1345
1375.9
1364
1373.3
1365
1472.7
1462
1423.2
1400
1349.9
1335
1361.5
1356
0.0122 0.0036

i-STS
mean
best
1366.6
1365
1376.3
1375
1349.7
1347
1345
1345
1350.2
1342
1362.3
1362
1467.8
1464
1407.1
1404
1339.2
1335
1355.3
1350
0.0049 0.0026

Table 7: Results Taillards 20 15 instances. Bold entries indicate best performance
across five algorithms instance. Restart, SGMPCS, i-STS,
use mean makespan performance measure. include best
makespan found algorithms solve instance multiple times.
indicates optimal makespan found proved problem
instance. final row shows mean relative error (relative best-known
upper bound) algorithm.

interesting note similar performance LDS Restart. observe
using dynamic variable ordering, LDS performs partial restarts jumping
top tree introduce discrepancy. suggests performance
LDS dynamic variable orderings may due exploitation heavy-tails
phenomenon. similar results JSP instances section support
idea. knowledge relationship commented before.

Prob.
21
22
23
24
25
26
27
28
29
30
MRE

LB/UB
1539/1644
1511/1600
1472/1557
1602/1646
1504/1595
1539/1645
1616/1680
1591/1603
1514/1625
1473/1584
(vs. UB)

Chron
1809
1689
1657
1810
1685
1827
1827
1778
1718
1666
0.0793

LDS
1699
1659
1620
1676
1669
1723
1755
1645
1678
1659
0.0373

Restart
mean
best
1694.5
1686
1654.0
1649
1614.2
1602
1697.5
1694
1673.1
1664
1706.9
1701
1754.6
1750
1663.7
1656
1665.5
1660
1646.5
1641
0.0366 0.0324

SGMPCS
mean
best
1665.7
1649
1632.1
1621
1571.4
1561
1663.9
1652
1619.6
1608
1669.4
1656
1715.6
1706
1628.1
1619
1642.2
1626
1606.9
1598
0.0146 0.0072

i-STS
mean
best
1648.0
1647
1614.1
1600
1560.2
1557
1653.2
1647
1599.3
1595
1653.3
1651
1690.0
1687
1617.4
1614
1628.0
1627
1587.2
1584
0.0044 0.0019

Table 8: Results Taillards 20 20 instances. See caption Table 7.
Table 8 displays results 20 20 problems. Again, SGMPCS dominates
constructive algorithms, finding mean makespan better best
makespan found constructive techniques. SGMPCS unable find
69

fiBeck

solutions good best-known upper bound instances. terms
MRE, SGMPCS out-performs algorithms factor 3 5.

Prob.
31
32
33
34
35
36
37
38
39
40
MRE

LB/UB
1764
1774/1795
1778/1791
1828/1829
2007
1819
1771
1673
1795
1631/1674
(vs. UB)

Chron
2118
2163
2138
2096
2110
2411
2018
2005
2118
2106
0.190

LDS
1912
1975
1987
1989
2007
1964
1947
1853
1904
1870
0.0832

Restart
mean
best
1896.8
1888
1983.1
1978
2021.6
2015
1968.4
1962
2007.0 2007
1957.1
1949
1940.3
1935
1822.0
1817
1896.1
1881
1859.4
1855
0.0813 0.0776

SGMPCS
mean
best
1774.0
1766
1828.3
1804
1840.9
1814
1863.9
1833
2007.0 2007
1832.7 1819
1810.6
1787
1701.7
1691
1803.5 1795
1714.7
1690
0.0147 0.0051

i-STS
mean
best
1764.0
1764
1813.4
1804
1804.2
1799
1831.9
1831
2007.0
2007
1819.7
1819
1791.1
1778
1675.7
1673
1799.3
1797
1689.4
1686
0.0044 0.0022

Table 9: Results Taillards 30 15 instances. See caption Table 7.
Table 9 displays results largest problem instances (30 15). instances
one, mean solution found SGMPCS better best solution
constructive algorithms. instance 35, SGMPCS equals performance
LDS Restart finding (and, cases, proving) optimal solution. Overall,
SGMPCS factor 5 13 better terms MRE.
Prob.
14
17
31
35
36
37
38
39

Opt.
1345
1462
1764
2007
1819
1771
1673
1795

Chron
0(0)
0(0)
0(0)
0(0)
0(0)
0(0)
0(0)
0(0)

LDS
10(10)
0(0)
0(0)
10(0)
0(0)
0(0)
0(0)
0(0)

Restart
0(0)
0(0)
0(0)
10(2)
0(0)
0(0)
0(0)
0(0)

SGMPCS
9(9)
1(0)
0(0)
10(4)
1(1)
0(0)
0(0)
3(3)

i-STS
10(0)
0(0)
10(10)
10(0)
8(0)
0(0)
1(1)
0(0)

Table 10: Results Taillard instances optimal solution known.
first two columns problem index optimal makespan respectively.
rest columns number runs algorithm found
optimal solution and, parenthesis, number times proved optimality. Recall Chron LDS run per instance
stochastic. However, provide fair basis comparison, present
results assuming produced identical results ten runs per instance.
i-STS complete algorithm, structural characteristics solution imply optimality (Nowicki & Smutnicki, 1996).
solution characteristic found, i-STS able prove optimality
shown two instances: tai31 tai38.

70

fiSolution-Guided Multi-Point Constructive Search

Finally, Table 10 presents number runs algorithm able find
prove optimal solutions problem instances known optimal. SGMPCS
finds optimal solution least five instances proves optimality least
four instances. Chron unable find prove optimality instances,
Restart one instance, LDS able find optimal solution
two instances prove one.
5.2.2 SGMPCS vs. i-STS
almost instances Tables 8 9 i-STS performs substantially better SGMPCS. many cases, mean solution found i-STS better best found
SGMPCS. However, seven ten smallest instances (Table 7), best solution
found SGMPCS good better found i-STS, SGMPCS strictly
better five instances. larger problems, however, mean makespan found
i-STS better found SGMPCS instances.
Recall algorithm run 3600 CPU seconds. include
graphs run-time distributions, observed performance gap terms
MRE SGMPCS i-STS 3600 seconds present time points 60
seconds. words, i-STS substantially out-performs SGMPCS first 60 seconds
thereafter algorithms find better solutions rate.
Table 10 shows one area SGMPCS clearly superior i-STS
proving optimality solutions. i-STS complete algorithm, identify
solutions particular structure optimal (Nowicki & Smutnicki, 1996). SGMPCS
able find prove optimality within time limit four instances least one run
i-STS two instances.
5.3 Summary
30 problem instances used experiment, mean solution found SGMPCS
better best solution found constructive techniques 28
instances. remaining instances, SGMPCS performs well LDS Restart
instance 35 slightly worse LDS instance 14. Overall, terms mean
relative error, SGMPCS 3 13 times better constructive search
algorithms different problem sets.
SGMPCS perform well i-STS terms mean makespan; however,
smaller problems best solution able find better i-STS five
instances.

6. Discussion Future Work
paper demonstrates Solution-Guided Multi-Point Constructive Search significantly out-perform existing constructive search techniques solving hard combinatorial
search problems trails behind state-of-the-art metaheuristic search. section, present preliminary ideas regarding reasons observed performance,
discussion generality SGMPCS, directions extensions SGMPCS.
71

fiBeck

6.1 SGMPCS Work?
extent SGMPCS out-performs existing constructive search approaches solving hard combinatorial search problems, interesting question arising
experiments understanding reasons strong performance. speculate
three, non-mutually exclusive, candidates: exploitation heavy-tails,
impact revisiting previous high-quality solutions, use multiple elite solutions.
6.1.1 Exploiting Heavy-Tails
SGMPCS restart-based algorithm. Even p = 0, search periodically restarts, albeit
value ordering based elite solution. believe likely, therefore,
SGMPCS exploits heavy-tailed distributions much way randomized restart
(Gomes et al., 2005; Gomes & Shmoys, 2002).
One way test idea reproduce Gomes et al.s original experiment SGMPCS
follows: random variable ordering, solve problem instance optimality starting
given sub-optimal solution, s, record search effort involved; repeat k different random variable orderings large k; finally observe frequency distribution
search effort. whole experiment repeated different starting solutions.
resulting distributions exhibit heavy-tailed behaviour, reasons randomized
restart able take advantage heavy-tailed distributions may shared SGMPCS.
currently pursuing experiment.
6.1.2 Revisiting Solutions
believe likely experiment suggested Section 6.1.1 demonstrate
SGMPCS takes advantage heavy-tailed distributions, significant performance
advantage SGMPCS Restart Experiment 3 well poor performance
p = 1 parameter setting Experiments 1 2, lead us expect
additional factors needed account performance SGMPCS.
believe leading candidate one additional factors impact
revisiting high-quality solutions using different variable ordering. time elite
solution revisited different variable ordering, different search tree created.
resource-limited chronological search visit nodes deep tree resource
limit reached. However, different variable ordering results different set nodes
deep tree are, therefore, within reach search. 8 strong results
SGMPCS |e| = 1 may indication mechanism responsible strong
performance sampling solutions close elite solution different search trees.
primary direction future research formalize meaning close within
search tree provide firm empirical foundation investigate impact
revisiting solutions. hope adapt significant work fitness-distance correlation
(Hoos & Stuzle, 2005) local search literature constructive search.

8. Similar reasoning applies use LDS.

72

fiSolution-Guided Multi-Point Constructive Search

6.1.3 Exploiting Multiple Points Search Space
use multiple solutions and, specifically, balance intensification
diversification viewed important metaheuristic literature (Rochat
& Taillard, 1995). Intensification suggests searching region good solutions
diversification suggests searching areas searched before. Furthermore,
one important aspects metaheuristics based elite solutions
diversity elite set maintained (Watson, 2005).
However, experiments presented suggest increased diversity
important factor performance SGMPCS. best performance achieved
small elite set sizes even, Experiment 1, elite set size 1. Based
results, original motivations SGMPCS are, say least, suspect.
results may due idiosyncrasies makespan JSP problem. experiments problems (see below) directly manipulated diversity,
results indicated better relative performance larger elite set sizes observed
here. may indication problems see positive contribution
maintaining multiple viewpoints.
speculative note, closer look Figure 1 may show diversity play
role search performance. figure shows greatest differences performance
different elite set sizes comes early search, relatively easy find
improving solution. Later search, performance difference narrows, though
close completely within time limit. One interpretation pattern that, early
search, relatively easy improve upon existing elite solutions, large elite
pool distracts search guiding elite solution significantly worse
best elite solution. narrowing performance gap may simply due
fact that, better solutions, harder improve upon regardless
size elite set, rate improvement decrease. Since algorithms
lower |e| better solutions, rate slows earlier. alternative explanation
maintaining multiple elite solutions positive influence initial
easy phase search. better solutions harder find, diverse elite set
may help search probability least one elite solutions better
solution vicinity rises elite set size. 9 experimentation required
investigate intuitions.
6.2 Generality
SGMPCS general technique conducting constructive search: nothing SGMPCS
framework specific scheduling constraint programming. However, paper
one type problem used evaluate SGMPCS therefore question practical
utility generality addressed.
Existing work shows SGMPCS effectively applied optimization
satisfaction problems quasigroup-with-holes completion (Beck, 2005b; Heckman &
Beck, 2006), job shop scheduling objective minimize weighted tardiness (Beck,
2006), multi-dimensional knapsack optimization (Heckman & Beck, 2007). addi9. explanation accurate, adaptive strategy |e| growing search might worth
investigating.

73

fiBeck

tion, recent work Sellmann Ansotegui (2006) demonstrates good performance
closely related technique diagonally ordered magic squares SAT instances.
However, SGMPCS performs worse randomized restart (though better chronological backtracking) magic square instances, randomized restart SGMPCS
perform much worse chronological backtracking satisfaction version multidimensional knapsack problem (Heckman & Beck, 2006).
application SGMPCS variety problems demonstrates indeed
general technique whose impact applied beyond job shop scheduling.
time, negative results problems point lack understanding
mechanisms behind SGMPCS performance motivates future work.
6.3 Extending SGMPCS
immediate focus future work understanding reasons performance, number ways framework extended.
First, implied speculations regarding impact diversity Section 6.1.3,
dynamic parameter learning (Horvitz et al., 2001) would appear useful SGMPCS
framework. example, one could imagine adapting p search depending
relative success searching empty solution versus searching elite solution.
Second, given metaheuristics community working elite solutions
number years, number techniques may fruitfully extend SGMPCS. example, path relinking (Glover, Laguna, & Marti, 2004) pair elite solutions
taken end-points local search trajectory. Path relinking elegant counterpart
SGMPCS: two elite solutions chosen, variable assignments common
fixed, defining sub-space variable assignments two solutions differ.
Unlike path relinking local search, constructive search one perform complete search sub-space post no-good removing sub-space future
consideration. preliminary experiments approach appear promising.
Third, clause learning techniques, originated conflict learning constraint
programming (Prosser, 1993), widely used restart state-of-the-art satisfiability
solvers (Huang, 2007). seems natural investigate combining conflict learning
solution-guidance. techniques may interesting relationship former tries
learn mistakes led dead-end latter attempts heuristically
identify correct decisions made.
Finally, work loosely coupled hybrid search techniques share single solutions
(Carchrae & Beck, 2005) easily generalizable share set solutions. date, rather
able exploit full solution shared technique, constructive search
able use bound cost function. Therefore, revisiting solutions
provides way exploit much richer information (i.e., full solutions) available
hybrid search technique.

7. Conclusion
paper presents first fully crossed study Solution-Guided Multi-Point Constructive Search. Using set job shop scheduling problems, varied SGMPCS parameter
settings control size elite set, probability searching empty so74

fiSolution-Guided Multi-Point Constructive Search

lution, fail sequence, form backtracking, diversity level elite set.
Experiments indicated low elite set sizes, low probability searching empty
solution, Luby fail sequence, chronological backtracking, low diversity lead
best performance. compared best SGMPCS parameters found existing constructive search techniques state-of-the-art tabu search algorithm well-known
set benchmark problems. results demonstrated SGMPCS significantly outperforms chronological backtracking, limited discrepancy search, randomized restart
out-performed tabu search algorithm.
primary contribution paper introduction new search framework
demonstration significantly out-perform existing constructive search
techniques. Secondary contributions include demonstration impact elite set
diversity performance opposite expected (i.e., low diversity leads
higher performance) identification research directions reasons underlying
performance SGMPCS focusing quantification effects heavy-tails,
impact revisiting solutions different variable orderings, exploitation
multiple points search space.

Acknowledgments
research supported part Natural Sciences Engineering Research
Council ILOG, S.A. Thanks Jean-Paul Watson, Daria Terekhov, Tom Carchrae,
Ivan Heckman, Lei Duan comments early versions paper. preliminary
version parts work previously published (Beck, 2006).

References
Beck, J. C. (2005a). Multi-point constructive search. Proceedings Eleventh International Conference Principles Practice Constraint Programming (CP05),
pp. 737741.
Beck, J. C. (2005b). Multi-point constructive search: Extended remix. Proceedings
CP2005 Workshop Local Search Techniques Constraint Satisfaction, pp. 1731.
Beck, J. C. (2006). empirical study multi-point constructive search constraintbased scheduling. Proceedings Sixteenth International Automated Planning
Scheduling (ICAPS06), pp. 274283.
Beck, J. C., & Fox, M. S. (2000). Dynamic problem structure analysis basis
constraint-directed scheduling heuristics. Artificial Intelligence, 117 (1), 3181.
Carchrae, T., & Beck, J. C. (2005). Applying machine learning low knowledge control
optimization algorithms. Computational Intelligence, 21 (4), 372387.
Dilkina, B., Duan, L., & Havens, W. (2005). Extending systematic local search job
shop scheduling problems. Proceedings Eleventh International Conference
Principles Practice Constraint Programming (CP05), pp. 762766.
Garey, M. R., & Johnson, D. S. (1979). Computers Intractability: Guide Theory
NP-Completeness. W.H. Freeman Company, New York.
75

fiBeck

Glover, F., Laguna, M., & Marti, R. (2004). Scatter search path relinking: advances
applications. Onwubolu, G., & Babu, B. (Eds.), New Optimization Techniques
Engineering. Springer.
Gomes, C. P., Selman, B., & Kautz, H. (1998). Boosting combinatorial search
randomization. Proceedings Fifteenth National Conference Artificial Intelligence (AAAI-98), pp. 431437.
Gomes, C. P., Fernandez, C., Selman, B., & Bessiere, C. (2005). Statistical regimes across
constrainedness regions. Constraints, 10 (4), 317337.
Gomes, C., & Shmoys, D. (2002). Completing quasigroups latin squares: structured
graph coloring problem. Proceedings Computational Symposium Graph
Coloring Generalizations.
Harvey, W. D. (1995). Nonsystematic backtracking search. Ph.D. thesis, Department
Computer Science, Stanford University.
Heckman, I., & Beck, J. C. (2006). empirical study multi-point constructive search
constraint satisfaction. Proceedings Third International Workshop
Local Search Techniques Constraint Satisfaction.
Heckman, I., & Beck, J. C. (2007). empirical study multi-point constructive search
constraint satisfaction. Submitted Constraints.
Hoos, H., & Stuzle, T. (2005). Stochastic Local Search: Foundations Applications.
Morgan Kaufmann.
Horvitz, E., Ruan, Y., Gomes, C., Kautz, H., Selman, B., & Chickering, M. (2001).
bayesian approach tacking hard computational problems. Proceedings
Seventeenth Conference Uncertainty Artificial Intelligence (UAI-2001), pp.
235244.
Huang, J. (2007). effect restarts efficiency clause learning. Proceedings
Twentieth International Joint Conference Artificial Intelligence (IJCAI07),
pp. 23182323.
Hulubei, T., & OSullivan, B. (2006). impact search heuristics heavy-tailed
behaviour. Constraints, 11 (23), 159178.
Jain, A. S., & Meeran, S. (1999). Deterministic job-shop scheduling: Past, present
future. European Journal Operational Research, 113 (2), 390434.
Jussien, N., & Lhomme, O. (2002). Local search constraint propagation conflictbased heuristics. Artificial Intelligence, 139, 2145.
Kautz, H., Horvitz, E., Ruan, Y., Gomes, C., & Selman, B. (2002). Dynamic restart policies.
Proceedings Eighteenth National Conference Artifiical Intelligence (AAAI02), pp. 674681.
Laborie, P. (2003). Algorithms propagating resource constraints AI planning
scheduling: Existing approaches new results. Artificial Intelligence, 143, 151188.
Le Pape, C. (1994). Implementation resource constraints ILOG Schedule: library
development constraint-based scheduling systems. Intelligent Systems Engineering, 3 (2), 5566.
76

fiSolution-Guided Multi-Point Constructive Search

Luby, M., Sinclair, A., & Zuckerman, D. (1993). Optimal speedup Las Vegas algorithms.
Information Processing Letters, 47, 173180.
Nowicki, E., & Smutnicki, C. (1996). fast taboo search algorithm job shop problem.
Management Science, 42 (6), 797813.
Nowicki, E., & Smutnicki, C. (2005). advanced tabu algorithm job shop problem.
Journal Scheduling, 8, 145159.
Nuijten, W. P. M. (1994). Time resource constrained scheduling: constraint satisfaction approach. Ph.D. thesis, Department Mathematics Computing Science,
Eindhoven University Technology.
Pinedo, M. (2005). Planning Scheduling Manufacturing Services. Springer.
Prestwich, S. (2002). Combining scalability local search pruning techniques
systematic search. Annals Operations Research, 115, 5172.
Prosser, P. (1993). Hybrid algorithms constraint satisfaction problem. Computational
Intelligence, 9 (3), 268299.
R Development Core Team (2006). R: Language Environment Statistical Computing. R Foundation Statistical Computing, Vienna, Austria. ISBN 3-900051-07-0.
Rochat, Y., & Taillard, E. D. (1995). Probabilistic diversification intensification local
search vehicle routing. Journal Heuristics, 1, 147167.
Sellmann, M., & Ansotegui, C. (2006). Disco-novo-gogo: Integrating local search complete saerch restarts. Proceedings Twenty-First National Conference
Artificial Intelligence (AAAI06), pp. 10511056.
Taillard, E. D. (1993). Benchmarks basic scheduling problems. European Journal
Operational Research, 64, 278285.
Watson, J.-P. (2003). Empirical Modeling Analysis Local Search Algorithms
Job-Shop Scheduling Problem. Ph.D. thesis, Dept. Computer Science, Colorado
State University.
Watson, J.-P. (2005). metaheuristics failure modes: case study tabu search jobshop scheduling. Proceedings Fifth Metaheuristics International Conference.
Watson, J.-P., Barbulescu, L., Whitley, L. D., & Howe, A. E. (2002). Contrasting structured
random permutation flow-shop scheduling problems: search-space topology
algorithm performance. INFORMS Journal Computing, 14 (2), 98123.
Watson, J.-P., Beck, J. C., Howe, A. E., & Whitley, L. D. (2003). Problem difficulty
tabu search job-shop scheduling. Artificial Intelligence, 143 (2), 189217.
Watson, J.-P., Howe, A. E., & Whitley, L. D. (2006). Deconstructing Nowicki Smutnickis i-TSAB tabu search algorithm job-shop scheduling problem. Computers
Operations Research, 33 (9), 26232644.

77


