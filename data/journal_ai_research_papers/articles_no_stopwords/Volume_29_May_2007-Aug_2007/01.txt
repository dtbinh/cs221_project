Journal Artificial Intelligence Research 29 (2007) 1947

Submitted 03/06; published 05/07

Computationally Feasible VCG Mechanisms
Noam Nisan

noam@cs.huji.ac.il

School Computer Science Engineering,
Hebrew University Jerusalem, Israel

Amir Ronen

amirr@ie.technion.ac.il

Faculty Industrial Engineering & Management,
Technion - Israel Institute Technology,
Haifa 32000, Israel

Abstract
major achievement mechanism design theory general method construction truthful mechanisms called VCG (Vickrey, Clarke, Groves). applying
method complex problems combinatorial auctions, diculty arises: VCG
mechanisms required compute optimal outcomes are, therefore, computationally infeasible. However, optimal outcome replaced results sub-optimal
algorithm, resulting mechanism (termed VCG-based) longer necessarily truthful.
rst part paper studies phenomenon depth shows near
universal. Specically, prove essentially reasonable approximations heuristics combinatorial auctions well wide class cost minimization problems yield
non-truthful VCG-based mechanisms. generalize results ane maximizers.
second part paper proposes general method circumventing
problem. introduce modication VCG-based mechanisms agents
given chance improve output underlying algorithm. agents behave
truthfully, welfare obtained mechanism least good one obtained
algorithms output. provide strong rationale truth-telling behavior.
method satises individual rationality well.

1. Introduction
Mechanism design sub-eld game theory microeconomics studies design protocols non-cooperative environments. environments participating
agents follow goals necessarily act instructed mechanism.
theory traditionally applied economic applications auctions various kinds. introduction mechanism design found several books (Osborne
& Rubinstein, 1994; Mas-Collel, Whinston, & Green, 1995). recent years, problems
border mechanism design computer science attracted attention
many researchers, within outside AI community. particular, mechanism
design models applied multi-agent systems (Rosenschein & Zlotkin, 1994; Wellman,
Wurman, Walsh, & MacKie-Mason, 2001; Shoham & Tanaka, 1997; Shoham & Tennenholtz, 2001), decentralized resource task allocations (Nisan & Ronen, 2001; Wellman
et al., 2001; Elkind, Sahai, & Steiglitz, 2004; Porter, Ronen, Shoham, & Tennenholtz, 2002),
economic electronic commerce applications (Parkes, 1999; Cramton, 1997), communication networks (Feigenbaum, Papadimitriou, & Shenker, 2000; Anderson, Kelly, &
Steinberg, 2002).
c
2007
AI Access Foundation. rights reserved.

fiNisan & Ronen

canonical mechanism design problem described follows: set rational
agents needs collaboratively choose outcome nite set possibilities.
agent privately known valuation function v : R quantifying agents
benet possible outcome. agents supposed report valuation
functions v () centralized mechanism. goal mechanism choose

outcome maximizes total welfare v (o). main diculty agents may
choose misreport valuations attempt aect outcome liking.
manipulations likely severely damage resulting welfare (simulations
demonstrate welfare loss found Carroll & Grosu, 2005). tool
mechanism uses motivate agents reveal truth monetary payments.
payments need designed way ensures rational agents always reveal
true valuations. Mechanisms property called incentive compatible truthful
(in dominant strategies). date, one general method, called VCG (Vickrey, 1961;
Clarke, 1971; Groves, 1973) (or slightly generally, ane maximization), known
designing payment structure1 . settings, known method
sole available one (Roberts, 1979; Lavi, Nisan, & Mualem, 2003).
Many novel applications mechanism design complex require implementation
computer systems. Cases point include combinatorial auctions multiple items
concurrently sold auction (Cramton, Shoham, & Steinberg, 2006), decentralized
task resource allocation problems (Nisan & Ronen, 2001; Wellman et al., 2001),
networking applications (Feigenbaum et al., 2000; Anderson et al., 2002). many
applications, range possible outcomes huge even nding outcome
maximizes total welfare known NP-complete. Since cases computing
optimal outcome intractable, VCG method cannot applied.
natural general approach development mechanisms cases would
use sub-optimal polynomial time algorithm computing outcome, calculate
payments applying VCG payment rule underlying algorithm. term
mechanisms VCG-based.
starting point paper observation, noted already researchers
(Lehmann, OCallaghan, & Shoham, 2002; Nisan & Ronen, 2001), VCG-based mechanisms necessarily truthful. Thus, rational agents may lie, taking advantage quirks
outcome determination algorithm.
1.1 VCG-based Mechanisms Generally Truthful
rst part paper examines last phenomenon depth shows
near universal: essentially reasonable VCG-based mechanisms truthful.
rst turn attention combinatorial auctions characterize class truthful VCG-based mechanisms problem2 . say allocation algorithm
1. Recently, truthful mechanisms, ane maximizers, obtained combinatorial
auctions (Bartal, Gonen, & Nisan, 2003).
2. importance combinatorial auctions twofold. First, direct applications FCC
auctions. Second, abstract many problems resource allocation among self-interested agents.
comprehensive survey research combinatorial auctions found recent book (Cramton
et al., 2006).

20

fiComputationally Feasible VCG Mechanisms

combinatorial auctions reasonable if, whenever item desired single agent only,
agent receives item. characterization leads following corollary:
Theorem: truthful VCG-based mechanism combinatorial auctions reasonable (unless uses exponential optimal allocation algorithm).
particular, unless P = N P , every polynomial time, truthful VCG-based mechanism
reasonable.
Loosely speaking, show essentially degree freedom available truthful VCG-based mechanisms choice range optimize. Within range
perfect optimization needed. theorem seems intuitive VCG payments identify
agents utility society, thus social welfare optimized
mechanism, agents motivated lie order so. Yet, argument
shows outcome must locally optimal locality dened deviation
single agent. heart argument delicate hybrid argument showing
general context local optimization essentially implies global optimization.
Next study family problems termed cost minimization allocation problems.
family contains many natural decentralized task allocation problems mechanism
design versions shortest path problem (Elkind et al., 2004; Nisan & Ronen, 2001;
Rosenschein & Zlotkin, 1994). call mechanism problem degenerate
exist inputs cause produce results arbitrarily far optimal.
Theorem: cost minimization allocation problem, sub-optimal truthful VCGbased mechanism degenerate.
word order signicance results. VCG-based mechanisms
special case truthful mechanisms essentially general
method known truthful mechanisms non-single dimensional settings. Moreover,
certain settings known indeed truthful mechanisms (Roberts, 1979;
Lavi et al., 2003). precisely, weighted versions VCG-based mechanisms called
ane maximizers truthful, results extend (as show) cases well.
Consequently, results imply designing truthful mechanisms computationally
intractable problems requires either restricting range outcomes (getting unreasonable degenerate mechanisms) developing entirely new techniques truthful
mechanisms may even exist. similar implication results intractability
stems computational considerations, rather communication considerations (Cramton et al., 2006, Chapter 11).
1.2 Second Chance Mechanism
second part paper proposes general method circumventing diculty
constructing truthful mechanisms. VCG-based mechanisms lose incentive
compatibility, still pose special property. Loosely speaking, mechanism,
reason agent misreport valuation help algorithm compute
better outcome. would exploit property obtain mechanisms
almost truthful.
21

fiNisan & Ronen

Given algorithm corresponding optimization problem dene second chance mechanism based it. mechanism modication VCG-based
mechanism where, addition valuations, agents allowed submit appeal
functions. appeal function allows agent give algorithm input (a vector
declared valuations), dierent original input, without misreporting
type. agents behave truthfully, welfare obtained mechanism
least good one obtained algorithms output.
formulate rationale truthful behavior mechanism. Informally,
argument follows: reasonable assumptions, situation agent
believes benecial lie mechanism, better agent report
actual type mechanism ask appeal check whether lie really helps it.
Thus, agent construct truthful strategy premised fact aware
situation another strategy would better. believe strong
argument truth-telling.
construct version mechanism satises individual rationality well.
generalization results ane maximization compensation bonus
mechanisms (Nisan & Ronen, 2001) straightforward.
Several alternative approaches aimed handling diculty developing truthful
mechanisms suggested past. One approach construction mechanisms
computationally hard manipulate (e.g., Bartholdi et al., 1992). best
knowledge manipulations hard worst case (e.g., may NPhard always compute manipulation). Nevertheless, hardness rule
possibility manipulations may easy compute typical cases. Another
possible approach consider equilibria VCG (Holzman, Kr-Dahav, Monderer, &
Tennenholtz, 2004; Holzman & Monderer, 2004). However, apparent way
agents coordinate equilibria. Several recent works construct ascending mechanisms
combinatorial auctions (e.g. Parkes, 1999). mechanisms rely assumptions
agents dierent (e.g., myopic behavior). may interesting
compare virtues mechanisms ours.
multi-round mechanisms combinatorial auctions let agents improve
provisional allocation proposed tested past (Banks, Ledyard, & Porter,
1989). argument truthfulness second chance mechanisms may provide partial
explanation relative success reported experiments.

2. Preliminaries
section formally present model. attempt much possible use
standard notions mechanism design computational complexity theories.
2.1 Mechanism Design Problems
section formulates class mechanism design problems study.
Denition 1 (utilitarian mechanism design problem) (utilitarian) mechanism design problem described by:
1. nite set allowed outputs.
22

fiComputationally Feasible VCG Mechanisms

2. agent = (1, . . . , n) real function v (o O) called valuation type.
quantication benet possible output terms
common currency. v (.) privately known agent i.
3. mechanisms output addition mechanism hands agent pi units
currency, utility ui equals3 v (o) + pi . utility agent aims
optimize.
4. goal mechanism select output maximizes total

welfare g(v, o) = v (o).
example problem found Section 2.4.
Note goal problems maximize total welfare necessarily
revenue. goal, known economic eciency, justied many settings
extensively studied economics.
direct revelation mechanism, participants simply asked reveal types
mechanism. Based declarations mechanism computes output
payment pi agents.
Denition 2 (mechanism) (direct revelation) mechanism pair = (k, p)
that:
output function k accepts input vector w = (w1 , . . . , wn ) declared valuation
functions4 returns output k(w) O.
payment function p(w) = (p1 (w), . . . , pn (w)) returns real vector quantifying
payment handed mechanism agents (e.g. pi = 2, mechanism
pays two units currency agent i).
agents try maximize utility thus may lie mechanism.
lies might severely reduce total welfare, mechanism carefully
designed benet agents report types truthfully.
Notation: denote tuple (a1 , ...ai1 , ai+1 , ..., ) ai . let (ai , ai ) denote
tuple (a1 , . . . , ).
Denition 3 (truthful mechanism) mechanism called truthful truth-telling
dominant strategy, i.e., every agent type v every type declaration wi
agents, agents utility maximized declares real valuation function
vi.
example consider famous Vickrey auction (Vickrey, 1961): seller wishes
sell one item auction. n buyers, privately knowing valuation v
item. (The value winning assumed zero.) Vickrey auction
buyers simply asked valuation; item allocated buyer
3. assumption called quasi-linearity common mechanism design.
4. consider issue represent valuations.

23

fiNisan & Ronen

highest bid price second highest. reader may verify mechanism
truthful. Another example truthful mechanism found Section 2.4.
general, communication protocol mechanism complicated. simple
observation known revelation principle dominant strategies (e.g., Mas-Collel et al.,
1995, pp. 871) states every mechanism agents dominant strategies,
exists equivalent truthful mechanism. Thus, w.l.o.g. possible focus
truthful mechanisms.
2.2 VCG-based Mechanisms
subsection presents celebrated VCG mechanisms. Intuitively, mechanisms
solve utilitarian problems identifying utility truthful agents declared
total welfare. generalize mechanisms.
Denition 4 (VCG mechanism, (via Groves, 1973)) mechanism = (k, p) belongs
VCG family if:
k(w) maximizes total welfare according w. is, w, k(w) arg maxo g(w, o).
payment calculated according VCG formula: pi (w) =
hi (wi ) (hi (.) arbitrary function wi ).



j=i w

j (k(w))

+

reader may verify Vickrey auction VCG mechanism. well known
VCG mechanisms truthful (Groves, 1973).
Unfortunately, many applications, task nding output k(w) maximizes total welfare computationally infeasible (e.g., NP-hard). paper
consider VCG mechanisms optimal algorithm replaced sub-optimal
computationally feasible one.
Denition 5 (VCG-based mechanism) Let k(w) algorithm maps type declarations allowable outputs. call = (k(w), p(w)) VCG mechanism based

k(.) p(.) calculated according VCG formula: pi (w) = j=i wj (k(w)) + hi (wi )
(where hi (.) arbitrary function wi ).
Obviously, VCG-based mechanism based optimal algorithm VCG mechanism. Note payment function VCG-based mechanism identical
VCG payment algorithm k(.) plugged payment formula.
characterize utility agent VCG-based mechanisms. utility equivalent
total welfare according declared types agents actual type
agent consideration.
Lemma 2.1 (VCG-based utility) Consider VCG-based mechanism dened allocation algorithm k(.), functions (h1 (.), . . . , hn (.)). Suppose actual valuation
agent v , declarations w = (w1 (.), . . . , wn (.)). utility agent
equals g((v , wi ), k(w)) + hi (wi ).
24

fiComputationally Feasible VCG Mechanisms

Proof: proof immediate denitions. agents utility equals v (k(w)) +

pi (w) = v (k(w)) + j=i v j (k(w)) + hi (wi ) = g((v , wi ), k(w)) + hi (wi ).
words, VCG-based mechanism identies utility truthful agents
total welfare. particular, k(.) optimal, g((v , wi ), k(w)) maximized
agent truthful. implies VCG mechanisms truthful truthfulness
necessarily preserved VCG-based mechanisms.
2.2.1 Example: Non Optimal Vickrey Auction
section demonstrates problems might occur optimal algorithm
VCG mechanism replaced sub-optimal one. Consider sale single item.
already commented, Vickrey auction VCG mechanism. algorithm allocates

item agent highest declared value. function hi (wi ) = j=i wj (o)
equals negation second highest value case winning.
Consider mechanism optimal algorithm replaced algorithm
chooses second highest agent. mechanism give object
agent second highest declaration price third highest agent.
Suppose three agents. Alice value $2 million, Bob
value $1.7 million, Carol value $1 million. agents truthful,
Bob wins pays $1 million. case Alices benet reduce declaration
Bobs. Similarly, Alice wins, Bob would lower declaration further,
on. Note natural situations Carol win well.
dicult see dominant strategies game. outcome
mechanism highly unpredictable, depending heavily agents beliefs
others, risk attitude, level sophistication. mechanism
yield inecient outcomes. eciency loss may get much worse underlying
optimization problem complex combinatorial structure (simulations demonstrate
context scheduling done Carroll & Grosu, 2005).
2.2.2 Affine-based mechanisms
possible slightly generalize class VCG mechanisms obtain mechanisms
called ane maximizers. mechanisms maximize ane transformations valuations. domain valuations unrestricted, ane maximizers sole
truthful mechanisms (Roberts, 1979; Lavi et al., 2003). Similarly VCG, generalize
mechanisms incorporate sub-optimal algorithms.
Notation: Let = (a0 , . . . , ) n + 1-tuple a0 (.) valuation function,
a1 , . . . , strictly positive. dene weighted welfare ga (w, o) output

a0 (o) + i>0 ai wi (o) w vector types output.
Denition 6 (ane-based mechanism) Let k(w) algorithm maps type declarations allowable outputs, = (a0 , . . . , ) n + 1-tuple a0 (.)
valuation function, a1 , . . . , strictly positive. call = (k(w), p(w)) ane

mechanism based k p calculated according formula: pi (w) = a1i ( j=i,0 aj
wj (k(w)) + hi (wi )) (where hi () arbitrary function wi ).
25

fiNisan & Ronen

function a0 (.) interpreted preferences mechanism set
alternatives a1 , . . . , weights agents. VCG mechanisms,
agents utility convenient characterization.
Lemma 2.2 (ane-based utility) Consider ane-based mechanism dened
allocation algorithm k(.), tuple functions h1 (.), . . . , hn (.). Suppose
actual valuation agent v , declarations w = (w1 (.), . . . , wn (.)).
utility agent equals a1i (ga ((v , wi ), k(w)) + hi (wi )).
Proof: proof immediate denitions. agents utility equals v (k(w) +
pi (w)) = a1i (ai v (k(w)) + pi (w) = a1i (ga ((v , wi ), k(w)) + hi (wi )).
words, ane-based mechanism identies agents utility ane
transformation valuations aims optimize. particular, k(.) maximizes
ga (w, .), mechanism truthful.
2.3 Computational Considerations Mechanism Design
section adopts standard notions computational complexity revelation mechanisms.
Denition 7 (polynomial mechanism) mechanism (k, p) called polynomial time
computable k(w) p(w) run polynomial time (in size w).
Note VCG-based mechanism polynomial output algorithm functions hi (.) polynomial. sometimes call polynomial algorithms mechanisms
computationally feasible.
Denition 8 (NP-complete problem) mechanism design problem called NP-Complete
problem nding output maximizes total welfare NP-Complete.
use term feasible denote acceptable computational time infeasible
unacceptable computational time. particular, NP-hard problems exponential algorithms considers infeasible, polynomial algorithms considered feasible. use
non-standard terms results limited specic complexity
classes.
2.4 Example: Combinatorial Auctions
problem combinatorial auctions extensively studied recent years (a recent
book found Cramton et al., 2006). importance problem twofold.
Firstly, several important applications rely (e.g., FCC auction Cramton, 1997).
Secondly, generalization many problems interest, particular eld
electronic commerce.
problem: seller wishes sell set items (radio spectra licenses, electronic
devices, etc.) group agents desire them. agent has, every subset
items, non-negative number v (s) represents much worth
it. v (.) privately known agent i. make two standard additional assumptions
agents type space:
26

fiComputationally Feasible VCG Mechanisms

externalities valuation agent depends items allocated
it. words, every two allocations x = (x1 , . . . , xn ) = (y1 , . . . , yn ),
xi = yi , v (x) = v (y). Thus, denote valuation agent
v : 2S R.
Free disposal Items non-negative values, i.e., t, v (s) v (t). Also,
v () = 0.


Items either complementary, i.e., v (S ) v (S) + v (T ), substitutes, i.e.,

v (S ) v (S) + v (T ) (for disjoint ). example, buyer may willing
pay $200 T.V. set, $150 VCR, $450 $200 two VCRs.
agent gets set si items, payment pi , utility v (si ) + pi . (The
payments combinatorial auctions non-positive.) utility agent tries
optimize. example, agent prefers buy $1000 valued VCR $600, gaining
$400, rather buy $1500 valued VCR $1250.
VCG mechanism combinatorial auction, participants rst required
reveal valuation functions mechanism. mechanism computes,
according agents declarations, allocation maximizes total welfare.
payment agents calculated according VCG formula. Lemma
2.1, utility ui = v (si ) + pi agents maximized reveals true
valuation mechanism. agents truthful, mechanism maximizes
total welfare.
Consider, however, computational task faced mechanism. types
declared, mechanism needs select, among possible allocations, one maximizes total welfare. problem known NP-Complete. Therefore, unless
number agents items small, mechanism computationally infeasible.
Even problem nding
allocation approximates optimal allocation within

reasonable factor |S| N P -Complete (Zuckerman, 2006). Nevertheless, various
heuristics tractable sub-cases analyzed literature (Cramton et al.,
2006, Chapter 13). would nd way turn sub-optimal algorithms
mechanisms.
note that, general, revealing valuation function requires exponential communication. ignore communication issues paper, subsequent work (Ronen,
2001) extends second chance method address communication limitations well.

3. Limitations Truthful VCG-based Mechanisms
section studies limitations truthful VCG-based mechanisms. Section 3.1 characterizes mechanisms important problem combinatorial auctions (see Section
2.4). characterization precludes possibility obtaining truthfulness applying
VCG rules many proposed heuristics combinatorial auctions (e.g., greedy
algorithms Lehmann et al., 2002 Nisan, 2000). Moreover, show truthful
non-optimal VCG-based mechanism combinatorial auctions suers abnormal behavior. Section 3.2 shows many natural cost minimization problems, truthful
VCG-based mechanism either optimal produces results arbitrarily far
27

fiNisan & Ronen

optimal. result, problem computationally intractable, truthful computationally feasible VCG-based mechanism inputs cause produce degenerate
results. Furthermore, since standard algorithmic techniques yield anomalies,
might dicult develop algorithms plugged truthful mechanisms.
generalize results ane-based mechanisms well.
3.1 Truthful VCG-based Mechanisms Combinatorial Auctions
section characterizes class truthful VCG-based mechanisms combinatorial
auctions.
Denition 9 (maximal range) Let k(w) algorithm maps type decladf



rations allowable outputs. Let V = ni=1 V space possible types let
V V subspace V . Let denote range k V , i.e. = {k(w)|w V }.
say k maximal range V every type w V , k(w) maximizes g
O. say k maximal range maximal range V .
Consider, example, algorithm combinatorial auctions allocates
items (the set S) agent highest valuation v (S). Clearly, polynomial
time algorithm maximal range . welfare obtained allocation
algorithm achieves least factor max(1/n, 1/|S|) optimal welfare (where n
denotes number agents).
Proposition 3.1 VCG-based mechanism output algorithm maximal
range truthful.
Proof: mechanism VCG mechanism set allowable outputs
range output algorithm. Lemma 2.1 mechanism truthful.
show proposition almost characterizes class truthful
VCG-based mechanisms combinatorial auction problem.
Notation: let V denote space types v = (v 1 , . . . , v n ) two
dierent allocations x y, g(v, x) = g(v, y). (Recall g(.) denotes total welfare.)
dicult see V contains almost types, i.e. V V measure zero
V .
Theorem 3.2 VCG-based mechanism combinatorial auction problem truthful,
output algorithm maximal range V .
Proof: Assume contradiction = (k, p) truthful k(.) maximal
range V . Since functions hi (.) aect truthfulness mechanism,

assume zero, i.e., assume i, pi (w) = j=i wj (k(w)).

According Lemma 2.1, utility agent equals v (k(w)) + j=i wj (k(w)) =
g((v , wi ), k(w)).
Let denote range k(.) V let v V type k(v)
optimal O. Let = arg maxoO g(v, o) optimal allocation among O. Note
28

fiComputationally Feasible VCG Mechanisms

denition V , unique. Finally, let w V type = k(w).
type exists since range algorithm.
Dene type vector z



z (s) =

v (s)

.

stands suciently large number. words, agent strongly desires
set . Apart this, v z identical. assume z V . Otherwise
could add suciently small noise (s) z claims remain true.
show z forces algorithm output y. show
algorithm outputs type z, must output type v
contradiction.
Lemma 3.3 = k(z).
Proof: Dene sequence type vectors by:
w0 = (w1 , . . . , wn )
w1 = (z 1 , w2 , . . . , wn )
w2 = (z 1 , z 2 , w3 , . . . , wn )
..
.
wn = (z 1 , . . . , z n ).
words, every agent turn moves wi z . assume wj V
j. dicult see z modied adding small noise it, way
guarantees above.
Claim 3.4 k(w1 ) = y.
Proof: Assume contradiction false. denition V obtain
g(w1 , k(w1 )) = g(w1 , y).
Consider case agent 1s type z 1 types others w2 , . . . , wn .
declaring w1 , agent 1 force algorithm decide y. Since mechanism
truthful, must g(w1 , k(w1 )) > g(w1 , y).
Since large, must k 1 (w1 ) 1 (i.e., agent 1 gets items gets

type w1 ). Thus, denition z 1 , obtain + nj=2 wj (k(w1 )) >

+ nj=2 wj (y). Because, due free disposal assumption, w1 (k(w1 )) w1 (y),


obtain w1 (k(w1 )) + nj=2 wj (k(w1 )) > w1 (y) + nj=2 wj (y) (even z perturbed).
Thus, g(w0 , k(w1 )) > g(w0 , y).
Therefore, type agent 1 w1 , better declaring z 1 , forcing
mechanism output k(w1 ). contradicts truthfulness mechanism.
Similarly, induction j, obtain k(wj ) = j, particular wn = z.
completes proof Lemma 3.3.
show k(z) = implies k(v) = contradiction. Consider
following sequence type vectors:
29

fiNisan & Ronen

v0 = (v 1 , . . . , v n )
v1 = (z 1 , v 2 , . . . , v n )
..
.
vn = (z 1 , . . . , z n ).
words, every agent turn, moves v z . choose z
vj V .
Claim 3.5 vj , maximizes g O.
Proof: show v1 . proof j > 1 follows similar argument.
Assume contradiction x = maximizes welfare v1 . Since arbitrarily
large must x1 . Consequently, cases agent 1s valuation equals .
Recall uniquely maximizes g v0 . Thus, every allocation x = y,




v 1 (y) + nj=2 v j (y) > v 1 (x) + nj=2 v j (x). Therefore, + nj=2 v j (y) > + nj=2 v j (x).
left hand side equals g(v1 , y) right hand side equals g(v1 , x). Thus, g(v1 , y) >
g(v1 , x) contradiction.
Claim 3.6 k(vn1 ) = y.
Proof: showed k(vn ) = y. (Recall vn = z.) showed uniquely
maximizes g(vn1 , .). Let xn1 = k(vn1 ). Assume contradiction xn1 = y. According Lemma 2.1, utility agent n truthful g(vn1 , xn1 ). Thus,
agent ns type v n , better declaring z n obtaining utility g(vn1 , y).
contradicts truthfulness mechanism.
Similarly, downward induction j, obtain k(v0 ) = y. v0 = v
assumed k(v) = contradiction. completes proof Theorem 3.2.
Remarks theorem characterizes output algorithms could incorporated truthful VCG-based mechanisms zero-measured subset types.
characterization holds even set possible types discrete (under mild
condition type vector z dened agents indierent
allocations). theorem gives rise several interesting algorithmic combinatorial questions. example, given approximation factor c 1, minimal
size sub-family every v, maxyO g(v, y) c gopt (v)? limited
version question analyzed Holzman et al., 2004 Holzman & Monderer,
2004.
Corollary 3.7 Consider VCG-based mechanism combinatorial auction output algorithm k. mechanism truthful, exists output algorithm k, maximal
range, every v, g(v, k(v)) = g(v, k(v)).
Proof: Let denote range k V , dene another algorithm optimal
range v, k(v) arg maxoO . According Proposition 3.1, VCG mechanism
30

fiComputationally Feasible VCG Mechanisms

based k truthful. Consider case agents truthful. Recall
utility agents determined resulting total welfare. Thus, dicult
see welfares g(v, k(v)) g(v, k(v)) must continuous v. Two continuous real
functions, identical dense subspace, identical whole space
thus corollary follows.
show non-optimal truthful VCG-based mechanisms suer following
disturbing abnormal behavior:
Denition 10 (reasonable mechanism) mechanism combinatorial auctions
called reasonable whenever exists item j agent that:
1. S, j
/ S, v (S {j}) > v (S), and,
2. every agent l = i, S, v (S {j}) = v (S),
j allocated agent i.
Simply put, situations one agent desires item, agent gets it.
Theorem 3.8 non-optimal truthful VCG-based mechanism combinatorial auctions
reasonable.
Proof: Consider mechanism m. According Corollary 3.7 exists equivalent
mechanism = (k, p), optimal range. Since must sub-optimal,
exists least one partition = (s1 , . . . , sn ) range mechanism.
Dene vector types by:

1 x si

v (x) =
0 otherwise.
words, agent wants single set si , two agents want item
(as sets disjoined). Since range must k(v) = s. Since
strictly optimal, k(v) must suboptimal. Hence, exists least one agent
get si . particular, exists least one item j si agent
get. Since agent desires j, theorem follows.
Corollary 3.9 Unless P = N P , polynomial time truthful VCG-based mechanism
combinatorial auctions reasonable.
believe natural allocation algorithms (e.g., linear programming relaxations, algorithms greedily allocate items agents, local search algorithms)
yield anomaly. particular, presume agent wants single
subset items subsets disjoined, algorithm nd optimal
allocation. Thus, corollary suggests might dicult develop allocation
algorithms yield truthful VCG-based mechanisms.
show generalize results ane-based mechanism. Given tuple
= (a0 , . . . , ), dene V space types v two dierent
allocations x y, ga (v, x) = ga (v, y). Similarly unweighted case, say
algorithm optimal range respect ga (.) always produces allocations
maximize ga (.).
31

fiNisan & Ronen

Theorem 3.10 Consider ane-based mechanism combinatorial auction problem
dened allocation algorithm k(.), tuple = (a0 , . . . , ). mechanism
truthful, k(.) maximal range respect ga (.) V .
Proof: (sketch) proof similar proof Theorem 3.2 thus sketch it.
Dene V similarly w.r.t. ane transformation ga (.). Assume contradiction
exists type vector v k(v) optimal O. Let optimal
allocation range O, w V k(w) = y. According Lemma 2.2,
utility agent maximized weighted welfare ga ((v , wi ), .). Thus,
possible proceed along lines proof Theorem 3.2: Dene type vector z
similarly; then, start w gradually transform agents z conclude
k(z) = y; gradually transform agents z v show k(v) = y, i.e.,
contradiction.
Open Questions currently know whether theorems similar Theorem 3.2
hold valuations bounded. Moreover, know get rid
usage V . Thus, preclude possibility Corollary 3.7 hold
space possible types discrete. know whether hold
allocation algorithm randomized whether Bayesian versions theorems apply
expected externality mechanism (dAspremont & Gerard-Varet, 1979) (an analog
VCG Bayesian model). leave future research. conjecture similar
theorems apply many mechanism design problems.
3.2 Truthful VCG-based Mechanisms Cost Minimization Problems
show many natural cost minimization problems, truthful VCG-based
mechanism either optimal produces results arbitrarily far optimal.
start sample problem.
Multicast transmissions: communication network modeled directed graph
G = (V, E). edge e privately owned link. cost te sending message along
edge privately known owner. Given source V set V
terminals, mechanism must select subtree rooted covers terminals.
message broadcasted along tree. assume agent owns cut
network.
Naturally, goal mechanism select, among possible trees, tree R

minimizes total cost:
eR te . goal agent maximize prot:

pi (eR owned i) te . dicult see utilitarian mechanism design
problem.
example introduced Feigenbaum et al., 2000 (using dierent model).
motivated need broadcast long messages (e.g., movies) Internet.
generalize example.
Denition 11 (cost minimization allocation problem)
cost minimization allocation problem (CMAP) mechanism design problem described by:
32

fiComputationally Feasible VCG Mechanisms

). let =
Type space type agent described vector (v1i , . . . , vm



mi . (In multicast example corresponds negation cost te .)

Allowable outputs output denoted bit vector x = (x11 , . . . , x1m1 , . . . , xn1 , . . . , xnmn )
{0, 1}m . denote (xi1 , . . . , ximi ) xi . may additional constraints
set allowable outputs. (In example x corresponds tree networks
graph xij equals 1 corresponding edge chosen tree.)
following conditions satised:
) describes type agent w v (as
Unbounded costs v = (v1i , . . . , vm


vectors), w describes type.

Independence monotonicity valuation v depends bits xi . (In
example, agent valuation given tree depends edges it.)
j, wji vji , every output x, wi (xi ) v (xi ).
Forcing condition every type v, allowable output x real number ,
dene type v[]


v[]ij

=

vji


xij = 1
otherwise.

forcing condition satised every allowable output = x, lim g(t(), y) =
.
Many natural decentralized task allocation problems goal minimize
total cost given constraints belong class. particular reader may
verify multicast example falls category. Another example shortest
path problem studied extensively recent years (e.g., Rosenschein & Zlotkin, 1994; Archer
& Tardos, 2002; Elkind et al., 2004).
Notation: type v let gopt (v) denote optimal value g. denote g(v, k(v))
gk (v).
Denition 12 (degenerate algorithm) output algorithm k called degenerate
g (v)gopt (v)
unbounded, i.e., exist vs rk (v) arbitrarily
ratio rk (v) = k|gopt (v)|+1
large.
degenerate algorithm arbitrarily far optimal, additively multiplicatively. Note confused standard notion approximation
ratio, denition corresponds single problem. particular, number agents
xed. note rule possibility algorithm
good non worst case metric.
Theorem 3.11 VCG-based mechanism CMAP truthful, output algorithm either optimal degenerate.
33

fiNisan & Ronen

stating proof let us illustrate using multicast transmission example.
Suppose start type vector leads sub-optimal solution. raise
cost edge, utility owner cannot increase (due truthfulness
Lemma 2.1). gradually raise cost edges except ones optimal
tree. Still, algorithm choose sub-optimal tree. However, cost
suboptimal tree arbitrarily high optimal cost remains same.
Proof: Let = (k, p) non-optimal truthful VCG-based mechanism CMAP.

Theorem 3.2, assume pi (w) = j=i wj (k(w)). Let v type vector k(v)
optimal let = opt(v) optimal output.
dene type z by:


zji =

vji
yji = 1
otherwise.

arbitrarily large.
Consider type sequence:
v0 = (v 1 , . . . , v n )
v1 = (z 1 , v 2 , . . . , v n )
..
.
vn = (z 1 , . . . , z n ).
Claim 3.12 j, = opt(vj ).
Proof: denition optimal v0 . Let x = allocation. independence
condition, j, g(vj , y) = g(v0 , y). monotonicity, g(vj , x) g(v0 , x). Together,
g(vj , x) g(v0 , x) g(v0 , y) = g(vj , y).
Claim 3.13 g(v1 , k(v1 )) < g(v1 , y)
Proof: Assume contradiction claim false. Since optimal v1 ,
means g(v1 , k(v1 )) = g(v1 , y). independence, g(v1 , y) = g(v0 , y). Recall
k(v0 ) suboptimal g(v0 , y) > g(v0 , k(v0 )). monotonicity (we worsen
type agent 1), g(v0 , k(v1 )) g(v1 , k(v1 )). Thus, together g(v0 , k(v1 )) g(v1 , k(v1 )) =
g(v1 , y) = g(v0 , y) > g(v0 , k(v0 )). particular, g(v0 , k(v1 )) > g(v0 , k(v0 )).
Consider case agent 1s type v 1 declarations agents
(v 2 , . . . , v n ). According Lemma 2.1, utility truthful, equals g(v0 , k(v0 )).
hand, falsely declares z 1 , utility equals g(v0 , k(v1 )). Since showed
g(v1 , k(v1 )) > g(v0 , k(v0 )), contradicts truthfulness mechanism.
Similarly, obtain g(vn , k(vn )) < g(vn , y) = g(v0 , y). forcing condition,
g(vn , k(vn )) . Thus, algorithm degenerate.
Corollary 3.14 Unless P = N P , polynomial time truthful VCG-based mechanism
NP-hard CAMP degenerate.
34

fiComputationally Feasible VCG Mechanisms

Note due revelation principle, theorems section hold mechanism agents dominant strategies. Similarly Theorem 3.11, mechanism
uses VCG payments non-optimal ex-post Nash equilibrium equilibria
arbitrarily far optimal.
show generalize theorems section ane-based mechanisms.
Theorem 3.15 ane-based mechanism (k, p) CMAP truthful, output
algorithm either optimal degenerate.
Proof:(sketch) proof almost identical proof Theorem 3.11. Let v
type k(w) optimal w.r.t. corresponding ane transformation ga .
dene type vector z similarly Theorem 3.11 consider sequence type vectors
agent turn changes type wi z . Due incentive compatibility
Lemma 2.2 , utility agent cannot increase, meaning weighted welfare
ga remains sub-optimal. Due forcing condition, outputs except optimal,
arbitrarily high cost. means algorithm degenerate.
compensation bonus mechanism (Nisan & Ronen, 2001) identies utility
agents total welfare similarly VCG, i.e., utility agent described similarly Lemma 2.1. Thus, theorems section applied
compensation bonus mechanisms well.

4. Second Chance Mechanisms
date, ane maximization known general method development
truthful mechanisms. Therefore, results previous section leave much hope
development truthful mechanisms many complex problems.
section proposes method circumventing problem. Consider VCG-based
mechanism. immediate consequence Lemma 2.1 reason agent
misreport type help algorithm improve overall result. leads
intuition agents cannot improve upon underlying algorithm,
better truthful. would exploit special property VCG-based
mechanisms construct mechanisms almost truthful.
Given algorithm corresponding optimization problem dene second chance mechanism based it. mechanism modication VCG-based
mechanism addition valuations, agents allowed submit appeal
functions. appeal function allows agent give algorithm input (vector
declared valuations) dierent original input without misreporting
type. agents behave truthfully, welfare obtained mechanism least
good one obtained algorithms output.
formulate rationale truthfulness second chance mechanisms. Informally, argument follows: reasonable assumptions, situation
agent believes benecial lie mechanism, better report
actual type mechanism ask appeal check whether lie indeed helpful.
Thus, agent construct truthful strategy premised fact aware
35

fiNisan & Ronen

situation another strategy better it. believe strong
argument truth-telling.
generalization results ane maximization compensation bonus
mechanisms straightforward.
4.1 Mechanism
section formulate second chance mechanism basic properties.
Denition 13 (appeal function) Let V =
appeal partial function5 l : V V .



Vi

denote type space agents.

semantics appeal l(.) is: agents type vector v = (v1 , . . . , vn ),
believe output algorithm k(.) produces better result (w.r.t. v) given
input l(v) instead actual input v. appeal function gives agent opportunity
improve algorithms output. v domain l(.), semantics
agent know cause algorithm compute better result k(v).
second chance mechanism dened Figure 4.1. modication VCG
allows agents submit appeal functions well.

execution manager mechanism publishes outcome determination algorithm time limit computation time appeal.
Declaration agent submits type declaration wi appeal function li (.)
mechanism. appeals must adhere specied time limit.
Allocation Let w = (w1 , . . . , wn ). mechanism computes k(w), k(l1 (w)), . . . , k(ln (w))
chooses among outputs one maximizes total welfare (according
w).
Payment Let denote chosen output. mechanism calculates payments ac
cording VCG formula: pi = j=i wj (o) + hi (wi , li ) (where hi (.) real
function).
Figure 1: Second Chance Mechanism
Remarks agents send programs represent appeal functions mechanism. programs executed mechanism. mechanism terminate
computation appeal units computation time (and refer vector
declarations w appeals domain). Thus, assume w.l.o.g.
appeals adhere given time limit. discussion choice time limit
alternative representations appeal functions appears Section 4.3. believe
possible construct software tools APIs make formulation
appeals easy task.
5. function f : R called partial domain subset D, i.e. Dom(f ) D.

36

fiComputationally Feasible VCG Mechanisms

functions hi (.) play role agents considerations every hi (.)
independent actions. Section 4.4 possible simply assume hi (.) 0
i. Section 4.4 use functions order satisfy individual rationality.
Denition 14 (truthful action) action second chance mechanism pair
(wi , li ) wi type declaration li (.) appeal function. action called
truthful wi = v .
following observation key property mechanism.
Proposition 4.1 Consider second chance mechanism output algorithm k.
every type vector v = (v 1 , . . . , v n ), agents truth-telling, g(v, o) g(w, k(v)).

words, agents truth-telling, result mechanism least
good k(v). proof immediate denition mechanism.
formulate analog Lemma 2.1. proof similar lemmas proof
henceforth omitted.
Lemma 4.2 (second chance utility) Consider second chance mechanism. Let
chosen output. utility agent equals g((v , wi ), o) + hi (wi , li ).

Therefore, informally, benecial agent declare wi = v either helps
output algorithm k(.) compute better result (w.r.t. (v , wi )) helps one
appeals agents.
Note lying second chance mechanism may harm agent two ways. First,
damage output algorithm k(.). Second, cause mechanism measure
welfare according wrong type vector thus cause choose inferior output.
Notation: say second chance mechanism T-limited time limit species
. Similarly, algorithm called T-limited computational time never exceeds
units computation.
following proposition obvious.
Proposition 4.3 Consider -limited second chance mechanism. output algorithm
mechanism -limited, overall computational time mechanism
O(nT ).

4.1.1 toy example
Consider combinatorial auction two items. type agent 3-tuple representing
value every non empty subset items. Suppose agent values pair
items $3 million values every single item $1 million. type is, therefore, v =
37

fiNisan & Ronen

{3, 1, 1}. Suppose agent notices allocation algorithm often produces better
allocations declares wi = {3, 0, 0} (i.e., hides willingness accept one item).
VCG-based mechanism agent may prefer declare wi instead actual type.
might cause two problems:
1. Even others truthful, may many type vectors v belonging agents, declaring wi damages chosen allocation, i.e.,
g((v , wi ), k((wi , wi ))) < g((v , wi ), k((v , wi ))).
2. Even case every agent chooses declaration wi
g((v , wi ), k((wi , v ))) g((v , wi ), k(w)), may according actual
type vector v output k(w) may inferior k(v) (i.e., g(v, k(w)) < g(v, k(v))).
second chance mechanism enables agent check whether declaring falsied type
would yield better result. Instead declaring wi = {3, 0, 0}, agent declare
actual type dene appeal li (w ) = (wi , wi ). way agent enjoys
worlds. cases falsied type better, mechanism prefer k((wi , wi ))
k((v , wi )). cases truthful declaration better, mechanism prefer
k((v , wi )). Note mechanism allows appeal modify declaration
agent submitted whole vector declarations. allow us
provide strong argument truth-telling.
Possible Variants Second Chance Mechanism One alternative denition
mechanism let agents submit outcome determination algorithms instead
appeals. possible apply reasoning similar variant. However,
formulating output algorithms might demanding task many applications.
delicate dierences.
Another possibility dene multi-round variant mechanism. rst
round agents submit type declarations w. Then, round, agent gets
chance improve allocation found algorithm k(w). mechanism terminates
agent improves current allocation. strategy space multi-round mechanisms complex. Yet, myopic behavior (Parkes, 1999), arguments similar
used justify truthful behavior. arguments may explain relative
success ad hoc mechanisms iterative VCG (IVG) AUSM6 reported Banks
et al., 1989.
Standard Equilibria Second Chance Mechanisms second chance mechanism
uses VCG payments and, therefore, theorems rst part paper apply it.
Lemma 4.2, vector truthful actions ex post equilibrium
resulting allocation optimal range algorithm. Moreover, consider agent
let (wi , li ) set actions agents. (wi , li ) best response
agent resulting allocation optimal range underlying
algorithm respect (v , wi ). least intuitively, nding response least
6. mechanisms spirit second chance mechanism, let agents improve
allocation. actual rules mechanisms complicated described Banks et al.,
1989.

38

fiComputationally Feasible VCG Mechanisms

hard nding allocation optimal range algorithm. Thus, one
expect agents follow equilibrium strategies traditional sense. argue
similar arguments made every game computing best response
computationally dicult. Hence, argument takes account agents
limitations required. note succeed nding natural complexity
limitations truth-telling equilibria agents. leave
intriguing open problem.
4.2 Rationale Truth-telling
noted, standard equilibria expected second chance mechanisms.
section formulates rationale truth-telling mechanisms. rst introduce
notion feasibly dominant actions7 takes account fact agents
capabilities limited. demonstrate reasonable assumptions
agents, truthful, polynomial time, feasibly dominant actions exist.
4.2.1 Feasible Truthfulness
basic models equilibria game theory justied implicit assumption
agents capable computing best response functions. many games,
however, action space huge function complex computed, even
approximately within reasonable amount time. situations assumption
seems longer valid.
section re-formulate concept dominant actions assumption
agents limited capability computing best response. concept meant
used context one stage games, i.e. games agents choose
actions without knowing anything others choices. second chance mechanism
one stage-game. nutshell, action feasibly dominant agent aware
situation (a vector agents actions) another action better it.
Notation: denote action space agent Ai . Given tuple = (a1 , . . . , )
actions chosen agents, denote utility agent ui (a).
Denition 15 (revision function) revision function agent partial function
form bi : Ai Ai .
semantics bi (ai ) knew actions others ai , would choose
bi (ai ) (instead ai ). revision function captures cases agent knows
would act knew others actions. Note optimal revision functions
standard best-response functions. vector actions ai belong
domain bi (.), semantics agent prefers stick action.
Denition 16 (feasible non-regret) Let agent, bi (.) revision function,
ai vector actions agents. action ai satises feasible non-regret
7. make standard distinction action strategy mapping agents type
action.

39

fiNisan & Ronen

condition (w.r.t. ai bi ), either ai domain bi ui ((bi (ai ), ai ))
ui (a).
words, actions may better ai , agent unaware
cannot compute choosing action.
revision function agent optimal, feasible non-regret equivalent
standard non-regret (best response) condition.
Denition 17 (feasibly dominant action) Let agent, bi (.) revision function.
action ai called feasibly dominant (w.r.t. bi (.)) every vector ai actions
agents, ai satises feasible non-regret condition (w.r.t. ai bi ).
Put dierently, action ai feasibly dominant (when choosing action) agent
aware action ai vector ai actions agents,
better choosing ai others choose ai . dominant action always feasibly
dominant. revision function optimal, feasibly dominant action dominant.
Example order demonstrate concept feasibly dominant actions consider
chess match Alice Bob submit computer programs play behalf.
Currently, course known compute equilibrium chess therefore
standard equilibria relevant analysis game. program aA feasibly
dominant Alice aware possible program Bob
better submitting another program.
Denition 18 (feasibly truthful action) action ai second chance mechanism
called feasibly truthful both, truthful feasibly dominant.
4.2.2 Natural revision functions give rise feasibly truthful actions
Beforehand showed agents truthful, total welfare least
g(v, k(v)). argued feasibly truthful action available, agent strong
incentive choose it. subsection demonstrates reasonable assumptions
agents, polynomial time feasibly truthful actions exist.
Notation: let denote empty appeal. (w, ) denote action vector
declaration agent wi appeals empty.
Denition 19 (appeal-independent revision function) revision function bi (.)
called appeal independent every vector domain includes empty appeals, i.e.
ai dom(bi ), exists vector wi ai = (wi , ).
say appeal independent function -limited computational time
bounded every appeal function range.
class appeal-independent revision functions represents agents explore
output algorithm (or alternatively, base choice action solely output
algorithm). approach seems reasonable space appeals agents
40

fiComputationally Feasible VCG Mechanisms

huge, apparent structure. least intuitively, seems unreasonable agent
able lie way improve result appeals agents
signicant probability. Moreover, commented, agent obvious potential
loss misreporting type.
Theorem 4.4 Consider second chance mechanism -limited output algorithm.
Suppose agent -limited appeal-independent revision function. every
= (T ), mechanism -limited, agent feasibly truthful action.
Proof: Let bi (.) agents revision function. Dene appeal li (.) follows.
every vector wi , let (wi , ) = bi ((wi , )). Let w = (wi , wi ). Consider outputs
o1 = k(w) o2 = k( (w)). dene li (w) better two outputs, i.e.,
li (w) = arg maxj=1,2 g((v , wi ), oj ). Intuitively, li (.) checks whether declaring wi helpful
agent.
Claim 4.5 ai = (v , li ) feasibly truthful.
Proof: not, exists vector ai = (wi , ) domain bi (.)
u(ai , ai ) < u(bi (ai ), ai ). Let bi (ai ) = (wi , ). Recall according Lemma 4.2,
agents utility equivalent total welfare g((v , wi ), o) chosen output
(up adding hi (.), independent agents actions).
Consider case agents action bi (ai ). Let denote chosen output
case. According denition mechanism, taken set {o1 , o2 }
welfare measured according declaration w.
agent chooses truthful action ai , output (denoted o) chosen
outputs o0 = k((v , wi )) (from denition mechanism), both, o1 , o2 (from
denition li ). superset set outputs rst case. Moreover,
output chosen according right type vector (v , wi ). Thus, g((v , wi ), o)
g((v , wi ), o), implying agent higher utility second case contradiction.
remains show li (.) (T )-limited. obvious both, k(.) (.)
-limited. completes proof theorem.
Given agents revision function, easy construct appeal li (.) dened (i.e.,
construct program computes it). Thus, agent appeal independent
function, guarantee feasibly dominant action.
general class revision functions found Appendix. Interestingly,
tradeo generality class time limit, suces
feasible truthfulness.
4.3 Remarks Choice Time Limit
Sections 4.2.2 A.1 demonstrate two natural classes revision functions
agents polynomial time feasibly truthful actions. claim every
revision function practice fall categories. Yet, plausible
case many applications. general, exists tradeo generality
41

fiNisan & Ronen

class revision functions time limit required feasible truthfulness.
particular, without time limit, submitting optimal appeal dominant.
hand, plausible small time limits suce practice. leave
comprehensive study tradeo future research.
interesting future direction develop representations appeal functions
relate time limit imposed agent actual revision function. One possibility
represent appeals decision trees agents required supply
leaf , type vector v , algorithms result strictly improved given
l(t ) instead actual input v . v proves mechanism computational time
required compute leaf indeed needed order represent agents revision
function. related possibility allow agent purchase additional computational
time.
Currently, know whether every polynomial class revision functions guarantees existence polynomial feasibly truthful actions. agent substantial
knowledge appeal space agents, may able nd falsied declaration causes typical appeals produce better results. case, may
benecial agent lie. know whether knowledge exist practice.
yes, may possible overcome allowing agents submit meta-appeals,
i.e., functions let agents modify input appeals agents.
leave future research.
4.4 Obtaining Individual Rationality
basic desirable property mechanisms utility truthful agent guaranteed
non-negative (individual rationality). section construct variant second
chance mechanisms satises property.
Let gopt (v) denote optimal welfare obtained type vector v . shall
assume agent i, exists type v every v = (v 1 , . . . , v n ),
gopt ((v , v )) gopt (v). call type lowest. combinatorial auction
example, lowest type dened zero valuation v (s) = 0 every combination
items.
Clarke mechanism (Clarke, 1971) VCG mechanism hi (wi ) = gopt (v , wi ),

i.e., pi (w) = j=i wj (opt(w)) gopt (v , (wi )). words, agent pays welfare
loss causes society. Thus, natural dene payment VCG-based

mechanism j=i wj (opt(w)) g((v , wi ), k((v , wi ))).
truthfulness, individual rationality may preserved optimal algorithm Clarke mechanism replaced sub-optimal one. order x
need ensure result algorithm improve declaration wi
replaced lowest type v .

Denition 20 (lowest type closure) Given allocation algorithm k(w) dene
lowest type closure k best allocation (according w) among outputs (k(w), k((v 1 , w1 )), . . . , k((v n , w
Since k(.) calls k(.) n times, k -limited, k O(nT )-limited.
Claim 4.6 every w, g(w, k(w)) g((v , wi ), k((v , wi ))).
42

fiComputationally Feasible VCG Mechanisms

Proof: Since k((v , wi )) candidate output k tests, g(w, k(w)) g(w, k((v , wi ))).
Given denition v , g(w, k((v , wi ))) g((v , wi ), k(v , wi )), claim follows.
Denition 21 (second chance-IR) Given allocation algorithm k(w) time limit
dene corresponding second chance-IR mechanism second chance mechanism
output algorithm k(.), time limit , every agent i, hi (wi ) = g((v , wi ), k((v , wi ))).
utility truthful agent mechanism equals ui = g(w, o)g((v , wi ), k((v , wi )))
g(w, k(w)) g((v , wi ), k((v , wi ))) 0. Therefore, mechanism satises individual rationality.

5. Conclusion Future Research
paper studies VCG mechanisms optimal outcome determination algorithm
replaced sub-optimal computationally tractable algorithm. rst part
paper shows wide range problems, mechanisms lose game theoretic
virtues optimal counterparts. Similar results hold ane maximization.
results leave much hope development polynomial time truthful mechanisms
many problems high complexity.
second part paper proposes general method overcoming diculty
constructing truthful mechanisms. Given algorithm underlying optimization
problem dene second chance mechanism based it. demonstrate
reasonable assumptions agents, truth-telling still rational strategy
agents. agents truthful, welfare obtained mechanism least
good one obtained underlying algorithm.
Successful implementation second chance mechanisms relies several tools
developed particular, tools description valuations appeal functions.
engineering issues require exploration.
important stress second chance method yet tested.
particular, truthfulness agents validated experimentally.
hand, believe practice, small time limits agents appeals likely
guarantee truthfulness agents. Several questions regarding payment properties
second chance mechanisms open. leave future research.
Several open questions, directly stem work, raised within body
paper.

Acknowledgments
thank Abraham Newman Motty Perry helpful discussions various stages
work. thank Ron Lavi, Ahuva Mualem, Elan Pavlov, Inbal Ronen, anonymous
reviewers comments earlier drafts paper. Noam Nisan supported
grants Israel Science Foundation USA-Israel Binational Science
Foundation. Amir Ronen supported part grant number 969/06 Israel
Science Foundation. preliminary version paper appeared proceedings
3rd ACM Conference Electronic Commerce (EC 01).
43

fiNisan & Ronen

Appendix A. d-bounded Revision Functions
class d-bounded revision functions represents agents that, addition output
algorithm, explore polynomial family potential appeals agents. class
generalization d-limited appeal-independent functions.
Denition 22 (d-bounded revision function) say revision function bi (.)
d-bounded following hold:
1. revision function bi (.) O(nd )-limited.
2. Let
L = {lj | li,j , wi s.t. (wi , (li , li,j )) Dom(bi )}



{li | (wi , li ), wi s.t. (wi , li ) = bi ((wi , li ))}

family appeals appear either domain range bi (.).
|L| = O(nd ).
3. exists constant c every appeal l L cnd -limited.
Theorem A.1 Consider second chance mechanism O(nd )-limited output algorithm. Suppose agent d-bounded revision function. every = (n2d ),
mechanism -limited, agent feasibly truthful action.
Proof: Let agent let bi revision function. use simulation
argument order dene appeal li (.). every vector wi compute following
outputs:
1. o0 = k(w).
2. Similarly proof Theorem 4.4, let L = {1 . . . |L| } family
appeal functions domain range bi . j = 1, . . . |L| dene
oj = k(j (w))).
3. Dene l(w) = arg max0j|L| g((v , wi ), oj ) output maximum welfare
according (v , wi ) among outputs dened above.
Claim A.2 li (.) n2d -limited.
Proof: W.l.o.g. running time k(.) bounded cnd . Otherwise, raise
constant. According denitions, appeal li performs nd + 1 computations,
requiring cnd time units. Thus, overall computation takes O(n2d ).
Claim A.3 ai = (v , li ) feasibly truthful.
Proof: Assume contradiction exists action vector ai dom(bi )
u((ai , ai ) < u((bi (ai ), ai ).
Consider case agent chooses bi (ai ) = (wi , ). mechanism takes
output maximizes welfare (according w) following set outputs:
44

fiComputationally Feasible VCG Mechanisms

1. o0 = k(w).
2. oj = k(lj (w)) every j = i, i.e. result appeals agents.
3. oi = k( (w)).
agent chooses ai , outputs measured according right type
vector (vi , wi ). Moreover, taken following superset outputs S:
1. o0 = k((vi , wi )) (from denition mechanism).
2. oj = k(lj ((vi , wi ))) every j = i, i.e., result appeals agents
(also, denition mechanism).
3. oj = k( (w)) every L. Since ai domain bi , set includes
outputs form k(lj (w)) case chooses bi (ai ). contains
result appeal (w).
4. k(w) (from denition li (.)).
Let chosen output case. Since set outputs second case
superset rst, g((vi , wi ), o) g((vi , wi ), o). According Lemma 4.2 utility
agent choosing ai thus higher choosing bi (ai ) contradiction.
completes proof Theorem A.1.
case appeal-independent functions, theorem gives prescription constructing appeal guarantees agent feasibly dominant action.

References
Anderson, E., Kelly, F., & Steinberg, R. (2002). contract balancing mechanism
sharing capacity communication network.. appear.
Archer, A., & Tardos, E. (2002). Frugal path mechanisms. Proceedings 13th
Annual ACM-SIAM Symposium Discrete Algorithms, 991999.
Banks, J., Ledyard, J., & Porter, D. (1989). Allocating uncertain unresponsive resources: experimental approach. RAND Journal Economics, 20, 125.
Bartal, Y., Gonen, R., & Nisan, N. (2003). Incentive compatible multi unit combinatorial
auctions. Proceedings Ninth Conference Theoretical Aspects Rationality
Knowledge, pp. 7287.
Bartholdi, J. J., Tovey, C. A., & Trick., M. A. (1992). hard control election?.
Mathematical Computer Modelling (Special Issue Formal Theories Politics),
16, 2740.
Carroll, T. E., & Grosu, D. (2005). Distributed algorithmic mechanism design scheduling
unrelated machines. Proceedings 8th International Symposium Parallel
Architectures, Algorithms, Networks, pp. 194199.
45

fiNisan & Ronen

Clarke, E. H. (1971). Multipart pricing public goods. Public Choice, 1733.
Cramton, P. (1997). fcc spectrum auction: early assessment. Journal Economics
Management Strategy, 431495.
Cramton, P., Shoham, Y., & Steinberg, R. (2006). Combinatorial Auctions. MIT Press.
dAspremont, C., & Gerard-Varet, L. (1979). Incentives incomplete information. Journal Public Economics, 11 (1), 2545.
Elkind, E., Sahai, A., & Steiglitz, K. (2004). Frugality path auctions. Proceedings
15th Annual ACM-SIAM Symposium Discrete Algorithms, pp. 701709.
Feigenbaum, J., Papadimitriou, C., & Shenker, S. (2000). Sharing cost multicast
transmissions. Proceeding Thirty-Second Annual ACM Symposium Theory
Computing.
Groves, T. (1973). Incentives teams. Econometrica, 41, 617631.
Holzman, R., Kr-Dahav, N., Monderer, D., & Tennenholtz, M. (2004). Bundling equilibrium combinatorial auctions. Games Economic Behavior, 47, 104123.
Holzman, R., & Monderer, D. (2004). Characterization ex post equilibrium vcg
combinatorial auctions. Games Economic Behavior, 47, 87103.
Lavi, R., Nisan, N., & Mualem, A. (2003). Towards characterization truthful combinatorial auctions. Proceedings 44th Annual IEEE Symposium Foundations
Computer Science.
Lehmann, D., OCallaghan, L., & Shoham, Y. (2002). Truth revelation rapid, approximately ecient combinatorial auctions. Journal ACM, 49 (5), 577602.
preliminay version appeared Proc. rst ACM Conference Electronic Commerce.
Mas-Collel, A., Whinston, W., & Green, J. (1995). Microeconomic Theory. Oxford university
press.
Nisan, N. (2000). Bidding allocation combinatorial auctions. Proceedings
Second ACM Conference Electronic Commerce, pp. 112.
Nisan, N., & Ronen, A. (2001). Algorithmic mechanism design. Games Economic
Behaviour, 35, 166196. Extended abstract appeared Proceedings Thirty
First Annual ACM symposium Theory Computing.
Osborne, M. J., & Rubinstein, A. (1994). Course Game Theory. MIT press.
Parkes, D. (1999). ibundle: ecient ascending price bundle auction.. Proceedings
ACM Conference Electronic Commerce (EC-99), pp. 148157.
Porter, R., Ronen, A., Shoham, Y., & Tennenholtz, M. (2002). Mechanism design
execution uncertainty. Proceedings 18th Conference Uncertainty
Articial Intelligence, pp. 414421.
Roberts, K. (1979). characterization implementable choise rules. Laont, J.-J.
(Ed.), Aggregation Revelation Preferences, pp. 321349. North-Holland. Papers
presented rst European Summer Workshop Econometric Society.
46

fiComputationally Feasible VCG Mechanisms

Ronen, A. (2001). Mechanism design incomplete languages. Proceedings
Third ACM Conference Electronic Commerce, 105114.
Rosenschein, J. S., & Zlotkin, G. (1994). Rules Encounter: Designing Conventions
Automated Negotiation Among Computers. MIT Press.
Shoham, Y., & Tanaka, K. (1997). dynamic theory incentives multi-agent systems
(preliminary report). Proceedings Fifteenth International Joint Conferences
Articial Intelligence, pp. 626631.
Shoham, Y., & Tennenholtz, M. (2001). fair imposition tasks multi-agent systems.
Proceedings International Conference Articial Intelligence, pp. 1083
1088.
Vickrey, W. (1961). Counterspeculation, auctions competitive sealed tenders. Journal
Finance, 837.
Wellman, M., Wurman, P., Walsh, W., & MacKie-Mason, J. (2001). Auction protocols
decentralized scheduling. Games Economic Behavior, 35, 271303.
Zuckerman, D. (2006). Linear degree extractors inapproximability max clique
chromatic number. Proceedings 38th ACM Symposium Theory
Computing, Seattle, Washington, USA.

47


