journal artificial intelligence

submitted published

talplanner third international
competition extensions control rules
jonas kvarnstrom
martin magnusson

jonkv ida liu se
marma ida liu se

department computer information science
linkoping university
se linkoping sweden

abstract
talplanner forward chaining planner relies domain knowledge shape
temporal logic formulas order prune irrelevant parts search space talplanner recently participated third international competition
clear emphasis increasing complexity domains used benchmark tests expressivity required represent domains system
many planners talplanner support aspects increase expressivity number changes planner required short
introduction talplanner article describes changes made
competition describe process introducing suitable
domain knowledge several competition domains

introduction
planners talplanner kvarnstrom doherty doherty kvarnstrom
kvarnstrom doherty haslum doherty kvarnstrom kvarnstrom
doherty kvarnstrom allows user specify goal shape set
atemporal logic formulas must satisfied final state executing
plan unlike planners talplanner allows specification set temporal
logic formulas must satisfied entire state sequence generated plan
obviously formulas used specify temporally extended goals
safety maintenance goals must upheld throughout execution plan
however possible specify constraints related traditional measures plan
quality constraints forbid certain stupid actions taking place
blockhead blocks world planner kibler morris tlplan bacchus
kabanza initially inspired development talplanner example
logistics domain one may specify temporally extended goal stating package
destination never picked goal stating trucks driving
two locations use shortest path constraints processed
talplanner order automatically extract control knowledge used
forward chaining search process opposed used filter candidate plan
generated given sufficiently strong constraints planner efficiently prune
search tree making easier plan among remaining nodes often
article search control aspect fact primary reason introducing
temporally extended goal case goal usually referred control rule
c

ai access foundation rights reserved

fikvarnstrom magnusson

although forward chaining planners may sometimes suffer lack goal directedness
compared types planners use explicitly represented domain dependent
knowledge one way compensating deficiency significantly forward
chaining planner complete description past current states
facilitates use complex operator types complex preconditions conditional
effects expressivity useful talplanner participated third international competition ipc clear emphasis increasing
complexity domains used benchmark tests expressivity required
represent domains system fact talplanner already support
several features present ipc use numeric
state variables temporally extended actions variable duration
nevertheless several extensions changes implemented
competition order accommodate semantics pddl version
pddl domain definition language fox long used specify
domains instances extensions changes first topic
article introduction talplanner sections extensions
discussed section second topic describing domain dependent
control rules used six benchmark domains hand tailored
track competition importantly process generating rules
reasoning behind section describe changes
made talplanner competition section finally conclude
discussion positive negative sides search control knowledge
talplanner together pointers towards possible future topics
please see long fox information basic setup
competition detailed descriptions domains used timing plan
quality

representation tal talplanner
semantics talplanner extended version tal c karlsson
gustafsson doherty gustafsson karlsson kvarnstrom member
tal temporal action logics family narrative non monotonic linear discrete
metric time logics reasoning action change tal c developed
modeling domains may include use incomplete information delayed effects
actions finite infinite chains indirect effects interacting concurrent actions independent processes directly triggered action invocations consequently seen
ideal choice initial version talplanner extensions
could conceivably implemented foreseeable future
tal narrative consists set labeled statements high level macro language
l nd basic language number statement classes observations fluent
values labeled obs action descriptions acs action occurrences occ domain constraints
dom dependency constraints modeling causal relations indirect effects dep
formal semantics l nd defined translation order sorted first order
base language l fl circumscription policy providing solution frame
ramification doherty gustafsson doherty doherty et al
http www dur ac uk p long competition html
http www cs toronto edu aips



fitalplanner ipc extensions control rules

l nd language designed easily extended different tasks extension may take shape specialized macro type
statement illustrated figure talplanner goal narrative uses version l nd
called l nd contains standard classes l nd statements together
several types related statements extensions accompanied
extensions translation function variation tal still share
base language l fl
however talplanner use
l nd
l nd

translation directly plantalplanner
tal
tal
ning
process instead makes direct use
plan narrative
goal narrative
higher level l nd goal narrative
forward chaining search process
l fl
l fl
generates plan narrative set
storder
storder
timed action occurrences corresponding
theory
theory
plan added
circ
circ
goal entailed final state
l fl
quantifier elimination
l fl
q e
section attempt
storder
storder
provide intuitive understanding tal
theory
theory goal
used domain specifications concrete examples
figure tal talplanner relation
standard logistics domain
set objects packages transported truck locations city
airplane airports different cities next section contains information search process use control rules see doherty et al
detailed description tal see kvarnstrom doherty
information talplanner
notation formulas l nd statements shown input syntax
talplanner exception connectives quantifiers may written
ordinary logical symbols increased clarity free variables implicitly
universally quantified
types objects state variables
although planners restricted declaring unstructured set objects
representing types unary predicates tal order sorted allows user specify
hierarchy object types sorts logistics domain modeled standard
sort boolean true false together seven user specified types loc location
subtypes airport city thing subtypes obj vehicle latter
subtypes truck plane
talplanner allows use numeric types order keep semantics
types clear integers fixed point numbers numbers fixed number
decimals allowed lower upper bounds must declared numeric
type standard arithmetic operators available numeric types
given interpretation semantic attachment
state variables represented tal fluents restricted



fikvarnstrom magnusson

predicates take values arbitrary user specified sort logistics domain
one could use two boolean fluents thing loc obj vehicle together cityvalued fluent city loc denoting city containing location loc
initial state
given fluents defined initial state logistics instance
specified l nd observation statements
obs city pos
city city pos
city
obs obj pos truck pos
observations consist tal c fixed fluent formulas formulas form denoting fact fluent formula holds time fluent formula boolean
combination elementary fluent formulas form f
v f v input notation
denoting fact fluent f takes value v boolean fluents
second observation shorthand notation f f f input notation allowed
notation extended open closed semi open temporal intervals addition
formulas function value f denotes value f time
goal goal statements goal expressions
statement class goals labeled goal added l nd goal statement
consists fluent formula must hold goal state
goal obj airport obj pos
ability test whether formula entailed state goal useful
temporally extended goals domain dependent control rules therefore macro
added goal expression goal holds iff goal instance conjunction goal statements entails fluent formula stated differently goal true
must true every goal state translation l fl somewhat complex
see kvarnstrom doherty information
note valid plan must end goal state sufficient visit goal state
temporarily could case operator effects multiple timepoints
first satisfying goal destroying concurrent plans
created plans desired reason would course easy modify
definition planner accordingly
operator definitions
since tal c logic reasoning action change notion actions
used modeling operators although talplanner use
semantics extended language l nd contains operator macro
providing syntax facilitates use resource constraints planningoriented concepts present standard tal c line standard
tal practice preserving logical base language l fl semantics providing
different variations high level macro language l nd adapted special
tasks


fitalplanner ipc extensions control rules

examples demonstrate operator definition syntax three six
logistics operators examples shown ipc benchmark domains
discussed
operator load truck obj truck loc
precond obj loc truck loc
effects
obj loc false obj truck true
operator unload truck obj truck loc
precond obj truck truck loc
effects
obj truck false obj loc true
operator drive truck loc loc
precond truck loc city loc
city loc loc loc
effects
truck loc false truck loc true
although used simple logistics operators talplanner allows
use context dependent quantified effects well prevail conditions unlike pure
preconditions prevail conditions limited invocation state operator
refer entire interval operator executed interval
prevail condition must hold explicitly specified provides additional flexibility
compared requiring precondition must hold throughout execution
action
resources
talplanner limited generating sequential plans resource consumption production could handled plain operator effects example loading truck
requires one unit space amount available space could decreased follows
operator load truck obj truck loc
precond obj loc truck loc
effects
space truck value space truck
concurrent clearly sufficient since multiple parallel invocations
load truck would still consume one unit space reason talplanner
explicit support resources kvarnstrom et al
resources declared manner similar ordinary fluents
parameters take values arbitrary integer fixed point domain unlike
planners talplanner provides one type resource provides several types
resource effects resources produced consumed borrowed
automatically returned exclusively meaning borrower exclusive
use resource specified interval non exclusively multiple actions
borrow units certain resource concurrently latter case may appear
strange useful one wants use resource semaphore mutex
finally resources assigned completely value



fikvarnstrom magnusson

following example loading truck consumes one unit space
operator load truck obj truck loc
precond obj loc truck loc
effects
obj loc false obj truck true
resources consume space truck amount
unlike ordinary fluents resource res multiple aspects queried used
formulas operator preconditions control rules timepoint initial amount available init res certain amount may consumed time
step consumed res produced produced res borrowed exclusively borrowed res
borrowed non exclusively borrowed nonex res remaining amount
available available res must minimum minimum res
maximum maximum res allowed ability refer aspects directly allows
user specify complex resource constraints simple minimum maximum value resource control rule defining maximum amount may
consumed per time step
concludes description domain definitions tal following
sections structure talplanners forward chaining search tree
search process constrained control rules

search control rules
forward chaining planner talplanner searches plan tree root
corresponds initial state outgoing edge corresponds one
operators applicable source node two trivial examples shown figure
notation means action executed time time
sequential figure action added time step
previous action ended concurrent figure b talplanner still adds single
action time plan constraint time action executed
relaxed action must start start existing action current
plan prefix end existing action searching tree preference
given actions invoked earlier timepoints words talplanner tries add
many applicable actions possible timepoint stepping next
timepoint figure b subtree starting executing action
time time would explored backtracking subtree starting
happens take slightly less time execute due differences
state action invoked search process ends soon planner
found plan ending state satisfying goal exact definition search tree
available kvarnstrom doherty sequential talplanner kvarnstrom
et al concurrent talplanner
although common view node search tree consisting single state
operator function states states sufficient talplanner
several reasons single operator may generate multiple states evaluation
temporally extended goal domain dependent control rule may require access
entire state history beginning initial state concurrent future



fitalplanner ipc extensions control rules

initial
node













initial
node




















goal
node









goal
node



















sequential



b concurrent

figure forward chaining search space
state may modified several operators reaches final configuration
reasons convenient view node consisting state sequence
equivalently logical model indicated figure
simple forward chaining planner implemented searching tree
standard search iterative deepening depth first search although
complete search clearly enough make planner complete
equally clear certain degree goal directedness required make search process
efficient achieved domain dependent control rules
domain dependent control rules
fully automated planner generally supplied initial state
set acceptable goal states often specified propositional first order formulas
must hold goal state set operators used plan
planner determine search plan efficiently possible exception
command line options fine tuned user
however cases user additional information domain
could use planner information may difficult extract mechanically
simple domain specification case would make sense allow user
supply information planner although entails somewhat work
user may lead finding plans quickly finding plans higher quality
course many different kinds additional information could given
planner talplanner inspired tlplan bacchus kabanza allows
user specify set first order tal formulas must entailed final plan
serves two separate purposes first allows specification complex temporally
extended goals safety conditions must upheld throughout execution
plan second additional constraints final plan often allow planner
prune entire branches search tree since proven leaf branch
violate least one goal many cases pruning main reason
use formula case often called control rule allowing planner
prune branches efficiently requires additional analysis described kvarnstrom



fikvarnstrom magnusson

control rules logistics domain
following control rules use logistics domain control
rule examples given ipc benchmark domains discussed
first package loaded onto plane plane required move
e goal requires location another city second unloaded
package plane package must arrived correct city satisfying goal
third package destination moved
control name load necessary
obj plane obj loc
loc goal obj loc city loc
city loc
obj plane
control name unload necessary
obj plane plane loc
loc goal obj loc city loc
city loc
obj plane
control name objects remain destinations
obj loc goal obj loc obj loc
note rules could course expressed logically equivalent
forms variations would identical performance since talplanner internally
normalizes many aspects control formulas domain analysis phase

third international competition
second international competition ipc domains used
mainly strips expressivity support typed objects required
domains could use adl style quantified conditional effects restricted strips
versions provided
although expect increase expressivity third competition ipc quite surprised extent changes fortunately talplanner
already supported many requirements others easily implemented despite make rather significant changes order handle
combination extensions efficiently discuss
requirements affected talplanner together improvements
prompted domains used competition
adl style operator definitions
though strips versions domains ipc
complex versions domains required use quantified conditional effects
current planners talplanner limited strips expressivity already
support



fitalplanner ipc extensions control rules

numeric types arithmetic
ipc domains required numeric values emulated values ordinary
objects miconic elevator domain example floor numbers emulated
objects named f f next floor calculated f
explicitly defined predicate floor floor
taken simplest versions ipc domains
numeric versions domains numeric types required
arithmetic operators used already supported talplanner
unfortunately enough time write control rules domains
concurrency
despite fact ipc domains provided potential concurrent
actions driving several trucks concurrently logistics domain
reward exploiting potential plan quality measured terms number
operators plan terms amount time required execute plan
consequently several planners including talplanner generated sequential plans
even highly concurrent domains
ipc plan quality mainly measured terms timepoint
last operator finished executing makespan plan scheduling terms
planner generating sequential plans would severely handicapped fortunately
concurrent version talplanner already implemented together support
resources kvarnstrom et al could used competition
although concurrent talplanner already applied number domains
competition provided us varied set domains sometimes exploited
concurrency slightly different ways provided us ideas improvements
talplanner several minor enhancements talplanners formula analysis
implemented first phase competition allowing handle certain
types control formulas efficiently concurrent
operators non unit context dependent duration
ipc plan operator used single time step simpletime timed
versions ipc domains operators could non unit duration
example walking requires time driving already supported
talplanner changes required
timed versions ipc domains durations operators could context dependent could specified arithmetic expressions
requiring support numeric types already discussed example time
required drive truck two locations could specified distance
locations divided speed particular truck already supported
talplanner
talplanner permits effects take place multiple timepoints within duration
action although used competition



fikvarnstrom magnusson

non integer time
ipc contest domains required operator durations calculated
precision least three decimals posed us underlying tal c
logic integer time therefore true talplanner introducing
non integer time properly would required changes underlying tal semantics
could done time available therefore simply multiplied
durations thousand printing plan time values divided thousand
operators extended duration
initial implementation talplanner assumed although
operators might extended durations something interesting would happening
significant proportion discrete time steps within duration example
operator invoked might duration time steps effects take place
time time time assumption influenced
data structures talplanner appeared reasonable time
since domains literature used single step operators
nevertheless intention extend structures
handling plans sparse effects discrete time steps contain effects
would difficult partly reason
interesting issues tackled instead continuously postponed
ipc finally provided us compelling reason change data structures
together number example domains could used test changes
example operator timed domain ipc might duration say
requiring discrete time steps effects take place beginning
end action led us implement sparse state structure
change whose time complexity accidentally depended duration
operator rather number time steps something actually happened
current version talplanner allows state structures used depending
characteristics domain
moving targets rule
already mentioned talplanners semantics use tal competition uses pddl semantic differences two approaches usually major trouble way
effects durative actions modeled pddl essence pddl predicates
numerical fluents affected effects action considered moving
targets preconditions another action allowed refer
timepoint instead certain intermediate interval arbitrarily chosen
units time required assertion fact subsequent use
fact even beginning plan actions cannot begin exactly time
tal effects taking place time assumed give fluents values exactly
timepoint values immediately used uncertainty
exact time effect takes place one example explicitly state



fitalplanner ipc extensions control rules

value unknown inner part certain interval known end
interval though yet implemented talplanner
changing talplanner use exact pddl semantics question
since would change fundamental assumptions planner instead
necessary come workaround let us simulate semantics
several ways could done one method would involve making minor changes
action definitions order assert final effects action slightly later
units time later exact competition instead implemented trivial
modification way plan printed timepoint something happens
plan example operator invoked additional delay inserted
ensures plans safe according pddl semantics sometimes leads
generating slightly worse plans necessary
finding shortest paths
rover driverlog domains vehicles people must travel along road networks different roads may different costs lengths essential
take shortest path two points
although possible define shortest path talplanners input
language formulas become somewhat complicated finding shortest path
two locations weighted graph places roads seems useful many domains
therefore implemented directly planner
fact two implemented one finding cost shortest
path two given locations one finding distance closest location
satisfying given formula example closest location reasonable destination
certain truck driverlog domain functions called control
rules order ensure step one takes leads location shortest
path current destination

modeling competition domains
eight domains third international competition six intended hand tailored planners except final domain umtranslog domains
exist least four different variations strips numeric numeric quantities
involved simpletime operators take constant non unit time timed
operator durations may depend actual parameters specific operator invocation
talplanner participated six domains due lack time creating control
rules limited participation strips simpletime timed versions
domains
section describe domains translated pddl
talplanner discuss control rules created handle domains
efficiently main focus two domains zenotravel satellite
domains describe control rules used competition well
incremental process creating rules omitting technical details
couple complex rules turned minimal impact planner performance
plan quality remaining domains depots driverlog rovers umtranslog


fikvarnstrom magnusson

describe general intuitions behind control rules omitting actual formulas
due space restrictions first though begin comments process
formalizing domains
pre defined pddl domains half work twice time
order create formal description real world domain course
necessary thorough understanding domain plans
domain eventually going used several reasons required
reasons equally valid regardless whether formalization
eventually used input fully automated planner hand tailored planner
talplanner
first understanding domain required order determine aspects
domain truly need modeled types predicates functions aspects
abstracted away example standard formalization logistics domain
model distances locations allows trucks move two
locations one time step sufficient purposes plan optimal
given abstraction may extremely suboptimal actually carried real trucks
usually lack teleportation abilities similarly model package sizes
weights cargo capacities trucks airplanes neither model truck drivers
acceptable working hours drivers additional costs incurred overtime pay time
required maintenance activities changing winter tires year
aspects need modeled depends much particular application one
mind
second detailed understanding domain required order determine
operators available planner exactly preconditions effects
represented within abstract logical model domain
finally hand tailored planners domain must understood order
able guide search domain dependent heuristics control rules
usually aspects domain modeled time much
information knowledge domain gathered order suitable
set predicates operators needed even fully automated planner
reused development control rules heuristics hand tailored planner
competition however task divided two parts organizers
define set domains pddl competitors handtailored track suitable ways guiding planners one way one could say
competitors need half work since formalization already done
task finding control rules remains unfortunately still necessary
understand domain thoroughly order write control rules
complex domains half work isolation might easily take twice time
since constraints involved domain understood pddl
formalization rather talking domain experts especially true
complex umtranslog logistics domain significant amount time spent
trying determine exactly packages allowed move
loaded unloaded kinds vehicle



fitalplanner ipc extensions control rules

figure zenotravel instance strips
another caused use predefined formalization
domain degree detail used model determined advance real
world would likely minimum level detail required anything
level would acceptable may seem intuitively
adding details ought make harder would best
remain minimum level detail true especially
control rules involved seen timed zenotravel domain example
control rules would simpler effective possible refuel
specific level real world rather simple abstract refuel
operator unconditionally fills tank completely
taken complaint organization competition
allowing different planners use different formalizations would course completely
infeasible nevertheless present additional encountered
degree real world domains deserve mentioned
zenotravel domain
zenotravel domain number aircraft fly people cities
five actions available persons may board debark aircraft aircraft may fly
zoom fly quickly fuel refuel restrictions many people
aircraft carry flying zooming equivalent except zooming generally
faster uses fuel figure shows example arrows pointing
goal locations
zenotravel strips
operator definitions strips version zenotravel domain
operators less directly translated pddl representation
main difference pddl representation uses pddl level single



fikvarnstrom magnusson

step actions stricter concept mutual exclusion talplanner
automatically enforces certain invariants fact aircraft leave
person boarding location aircraft modified fly used
precondition board tal c semantics used talplanner similar
pddl level durative actions invariant conditions must stated
explicitly done prevail conditions considered separate
true pre conditions note strips formalization fly zoom take
amount time since single step actions possible
operator
precond
prevail
effects

board person aircraft city
person city aircraft city
aircraft city
person city false person aircraft true

operator
precond
prevail
effects

debark person aircraft city
person aircraft aircraft city
aircraft city
person aircraft false person city true

operator fly aircraft city city flevel flevel
precond aircraft city fuel level aircraft flevel next flevel flevel
effects
aircraft city false fuel level aircraft flevel false
aircraft city true fuel level aircraft flevel true
operator zoom aircraft city city flevel flevel flevel
precond aircraft city fuel level aircraft flevel
next flevel flevel next flevel flevel
effects
aircraft city false fuel level aircraft flevel false
aircraft city true fuel level aircraft flevel true
operator
precond
prevail
effects

refuel aircraft city flevel flevel
fuel level aircraft flevel next flevel flevel aircraft city
aircraft city
fuel level aircraft flevel false fuel level aircraft flevel true

translating operator definitions time create set control rules
basically two ways first one sit think suitable
properties plan write control rules ensure properties
hold second one instruct planner branch explored
search tree observing output one identify obviously stupid choices made
planner choosing action instance inevitably leads backtracking
performing actions useless given goals control rules written
prevent branches tree explored approaches
covered
begin first method attempting number reasonable control rules
simply thinking properties zenotravel domain given experience
domains fact quite easy example many domains
certain goals satisfied one never allow


fitalplanner ipc extensions control rules

destroyed zenotravel domain people destinations never need
board aircraft gives rise following control rule
control name board necessary
person aircraft person aircraft
city city person city goal person city city city
tal formula states state transition person
aircraft time person aircraft time person
boarded aircraft must reason allowed person must
certain city must goal person another city
noted previously control formulas usually written many different forms
example would equally valid state person city
therefore aircraft required somewhere else next
timepoint person still board aircraft
control name board necessary
person city city goal person city city city
person aircraft
note although may first glance appear planner would extraordinarily stupid destroy goals already satisfied many cases
temporarily destroying goal necessary order satisfy goals example goal certain aircraft certain location already
reached destination might still fly number people destinations
return destination
another natural idea since aircraft follow predetermined routes zenotravel
usually real life would say people debark
reached final destination
control name debark goal city
person aircraft person aircraft
city aircraft city goal person city
potential rule cases optimal plan might require
number people debark one plane board number planes could
fly destination concurrently strictly forbidden debark whenin goal city common occurs many domains
user determine depending requirements application
planner used
number possible choices could ignore accept suboptimal plans skip rule completely let planner search vastly greater
search space order plan guaranteed optimal compromise
attempt create weaker rule cut search space degree
gives optimal closer optimal plans competition conditions
somewhat artificial clearly stated would beneficial planner
spend ten times much effort finding plan plan five percent better
average guessed would case consequently chose include
control rule stated


fikvarnstrom magnusson

future better solution would likely prefer plans person
debark reaching destination still allow plans alternative
discussed detail conclusions
given two rules might continue second finding
control rules run talplanner simple instance consider operator
sequences planner examines depth first search process beginning
sequence instance figure complete plan generated
planner contains operators requires time steps shown ipc
strips format timepoint action invoked followed
action instance









board person plane city
board person plane city
fly plane city city fl fl
fly plane city city fl fl
board person plane city
board person plane city
fly plane city city fl fl
fly plane city city fl fl










debark person plane city
debark person plane city
fly plane city city fl fl
fly plane city city fl fl
fly plane city city fl fl
refuel plane city fl fl
fly plane city city fl fl
fly plane city city fl fl

refuel plane city fl fl
refuel plane city fl fl
fly plane city city fl fl
fly plane city city fl fl
refuel plane city fl fl
fly plane city city fl fl
refuel plane city fl fl


beginning operator sequence appears reasonable time airplanes
seem flying around randomly control rules guiding apparently
mainly luck caused planes reasonable cities fly time
make airplanes goal directed identify three important reasons airplane
move city city goal asserts aircraft must end city
plan complete one passengers wants go city
person waiting picked airplane city following rule formalizes
three intuitions
control name planes fly goal
aircraft city aircraft city
city aircraft city
goal aircraft city
person person aircraft goal person city
person person city goal person city
control rules talplanner quickly produce set plans handcoded ipc competition although plans optimal nearly bad example given together plans require
total operators time steps plan example figure requires
operators time steps
nevertheless still improvements made first criterion
admissible allows plane visit destination even still needs pick
drop passengers one way preventing would add condition
passengers must reached destinations
define persons arrived
person city goal person city person city



fitalplanner ipc extensions control rules

control name planes fly goal
aircraft city aircraft city
city aircraft city
persons arrived goal aircraft city
person person aircraft goal person city
person person city goal person city
improves plan quality slightly talplanner requires operators
time steps control rule fact strict seen following
plan tail handcoded strips number








fly plane city city fl fl
fly plane city city fl fl
refuel plane city fl fl
refuel plane city fl fl
debark person plane city
debark person plane city
debark person plane city








refuel plane city fl fl
refuel plane city fl fl
refuel plane city fl fl
refuel plane city fl fl
fly plane city city fl fl
fly plane city city fl fl

example plane plane wait passengers debarked
several planes could go final destinations even though
clearly see real reason wait potential passengers
already picked plane plane already enough fuel
alter control rule according insight plane go final destination
passengers board plane headed towards destination
person left picked persons already arrived currently
board planes
define persons arrived planes
person city goal person city person city aircraft person aircraft
control name planes fly goal
aircraft city aircraft city
aircraft city
goal aircraft city persons arrived planes
person person aircraft goal person city
person person aircraft goal person city
person person city goal person city
yields another minor improvement talplanner requires operators
time steps example used end plan looks follows





fly plane city city fl fl
fly plane city city fl fl
fly plane city city fl fl
refuel plane city fl fl






debark person plane city
debark person plane city
debark person plane city
fly plane city city fl fl

study plans generated current set rules quickly identify
another obvious number airplanes may fly location pick
person necessary reasonable balance finding
optimal plans finding plans quickly contest attempted high quality


fikvarnstrom magnusson

probably non optimal plan quickly possible done ensuring
one airplane may go given place time sole purpose
going pick person waiting
control name planes fly goal
aircraft city aircraft city
city aircraft city
goal aircraft city persons arrived planes
person person aircraft goal person city
person person aircraft goal person city
person person city goal person city
aircraft aircraft city aircraft aircraft
rule provides major improvement complete set plans requires
operators time steps
far controlled airplanes fly people board airplane
debark rules governing refueling quick look plan one
larger instances reveals whenever aircraft nothing else
refuel seems little bit wasteful satisfied adding rule stating
airplanes must refuel tanks empty rule perfect since
airplane may miss opportunity pre emptively refuel still refuel one fuel
level even going fly provide significant improvement bringing
number operators number time steps still
minor adjustments made rules used competition adjustments include modification board necessary ensure
person must travel city city choose plane already needs
visit city city possible since less likely increase total
number flights
one final change prompted fact intended differences timing
fly zoom cannot modelled correctly strips version domain since
operators must take amount time difference two
operators zoom uses twice much fuel although would possible
add control rule ensuring zoom used easier simply remove
zoom operator domain definition
zenotravel simpletime
simpletime version zenotravel quite similar strips version
difference actions may non unit duration certain preconditions
must hold throughout execution action talplanner operator definitions
changed accordingly example board fly operators changed follows
operator board person aircraft city
precond person city aircraft city
prevail
aircraft city
duration
effects
person city false person aircraft true



fitalplanner ipc extensions control rules

figure zenotravel instance simpletime
operator fly aircraft city city flevel flevel
precond aircraft city fuel level aircraft flevel next flevel flevel
duration
effects
aircraft city false fuel level aircraft flevel false
aircraft city true fuel level aircraft flevel true
run planner set simpletime instances get almost immediate
planner claims plan instances reason
course control rules must satisfied valid plan rules
designed underlying assumption actions unit duration example
consider planes fly goal states plane leaves city time
meaningful destination fly action invoked plane must
city city beginning next time step interval
aircraft present city finally arrives city time steps later
words planes fly goal ensures fly operator cannot used
quite originally intended
one way solving would alter planes fly goal say
plane leaves city time meaningful destination unfortunately duration flight would encoded directly control rule instead
operator would work timed version operators
variable durations fact would even work simpletime zoom
operator must taken account
instead domain model augmented fluent flying aircraft city
keeps track whether plane flying destination ensure
fluent kept date following added effects fly zoom operators
flying aircraft city true flying aircraft city false fly
flying aircraft city true flying aircraft city false zoom
planes fly goal rule changed follows stating
aircraft ceases city must flying reasonable destination
control name planes fly goal
aircraft city aircraft city
city flying aircraft city
arises boarding fluent boarding person aircraft added
used whenever necessary given changes following first steps


fikvarnstrom magnusson

plan generated talplanner instance figure shown ipc
timed format timepoint action invoked followed
action instance duration action
board person plane city
fly plane city city fl fl
zoom plane city city fl fl fl
intuitively flying zooming plane time impossible
forgotten specify planner actions preconditions satisfied
time prevail conditions effects actions contradict
since take place different timepoints fly ends time zoom
ends time
several ways specifying fly zoom mutually exclusive
example would possible introduce interval effect stating flying aircraft
city must hold throughout inner execution intervals actions become false
end action
flying aircraft city true flying aircraft city false fly
flying aircraft city true flying aircraft city false zoom
would possible use semaphore resource aircraft specific resource
initial value borrowed exclusively fly zoom actions
one solutions used talplanner finally rewards us short correct plan
board person plane city
fly plane city city fl fl
board person plane city
debark person plane city
fly plane city city fl fl
debark person plane city
plan length maxtime
improved remember strips version never made use zoom
operator simpletime version flying takes time steps uses one unit
fuel zooming takes time steps uses two units fuel refueling one unit
takes time steps therefore opposite
situation zoom better fly commenting unwanted fly operator yields
following plan
board person plane city
zoom plane city city fl fl fl
board person plane city
debark person plane city
zoom plane city city fl fl fl
debark person plane city
plan length maxtime



fitalplanner ipc extensions control rules

zenotravel timed
timed version complicates timing actions boarding disembarking times constant specific defined respective
definition two functions boarding time debarking time refueling fills
plane maximum capacity consumes time relative amount fuel received
refuel rate aircraft aircraft fast speed slow speed
corresponding fast burn slow burn fuel consumption distances cities
specified distance city city function
timed version operator durations correctly calculated precision
three decimals prompting talplanner changes discussed sections
extensions talplanner implemented changes needed
transform simpletime domain timed version
important difference perhaps fact depending speed fuel
consumption values defined situation operator used
sometimes better use fly operator sometimes better use zoom operator
unlike strips version fly better simpletime domain
zoom better
zooming better flying may seem would easy answer
question given interested minimizing time check whether
refueling aircraft sufficiently able zoom followed zooming destination
would faster refueling enough able fly flying slowly
destination handled first clause use fly instead zoom
precondition fly altered require use fly instead zoom true
precondition zoom requires use fly instead zoom false interested
minimizing combination time fuel usage could taken
account
quite sufficient handle though airplane maximum
fuel capacity destination distant may able zoom handled
second clause use fly instead zoom
yet another possible tie one refueling action flight
one would expect real world two reasons
first airplanes may already fuel initial state situations
plane might zoom destination without incurring additional cost assuming
time required executing plan metric used plane
already enough fuel anyway never refuel
second unlike simpletime version airplane cannot refuel enough
refuel operator fills tank completely change likely introduced
order make task easier reducing number possible actions choose
example planner needs create ground instances operator
might trouble refuel operator would take amount fuel floating
point argument despite probable intention behind change introduces
control formulas planes tank half full enough fuel
zoom b might fill entire tank continuing c
used fly operator might able continue c without refueling



fikvarnstrom magnusson

means one would take possible future flights account determining
whether fly zoom domain modeled detail would
existed
given two complications guaranteeing optimal near optimal plan
control rule easy indeed expected competition decided
satisfied heuristic compromise adding third clause use fly instead zoom
ensuring zooming would require refueling immediately flying would fly
operator would used
fly probably better zoom
define use fly instead zoom aircraft city city
fly faster wrt speed refueling
slow speed aircraft slow burn aircraft refuel rate aircraft
fast speed aircraft fast burn aircraft refuel rate aircraft
zoom impossible across given distance
distance city city fast burn aircraft capacity aircraft
zoom refuel immediately fly
fuel aircraft distance city city slow burn aircraft
fuel aircraft distance city city fast burn aircraft
zenotravel discussion
finding control rules yield good usually suboptimal plans difficult
zenotravel domain risks involved flying plane pick passengers
since passengers fit plane refueling possible city
words really possible get stuck looking solution since
graph cities fully connected route necessary
fourth version zenotravel called numeric available contest due
lack time decided compete domain
among things numeric version contains additional constraint number passengers aircraft carry first glance constraint may seem
introduce however enforced zoom operator since
numeric domain make use durational operators suffers
strips domain zoom operator consumes fuel limits number
passengers deliver advantages faster flying
real difficulty numeric version comes use specific metrics
measure quality solution example one planner may
required minimize total time total fuel used another may
required minimize total time usually satisfied finding
plans good optimal quality done tuning control rules
example introducing use fly instead zoom function determine whether fly
zoom used discussed tuning naturally done domain level
rather level optimizing version talplanner development



fitalplanner ipc extensions control rules

figure depots instance strips
depots domain
depots domain illustrated figure contains locations trucks hoists movable
crates pallets whose locations fixed trucks move crates two locations
carry number crates time hoists distributed among
locations load crates trucks stack crates surfaces pallets crates
goal bring crates certain configuration stacks
stack placed specific pallet
strips depots domain combination two well known domains
logistics domain blocks world therefore seems natural start taking
look existing control rules two domains see whether rules
combined easily whether complex rules required due interactions
moving stacking blocks
begin blocks world part unbounded blocks world
used benchmark domain ipc talplanner used modified version
rules bacchus kabanza ensure planner adds blocks
good towers stacks already final position
dismantled later order remove block lower level rules reused
depots domain one prerequisite availability temporary storage crates
since worst case every single stack crates must torn completely
possible start stacking crates top fortunately although
limited number pallets trucks somewhat counter intuitively contain number
crates planner use storage minor changes required
order handle two separate types surfaces pallets crates
continuing logistics part one simple rule reused standard
logistics domain unload crate goal location dual rule load crate
needs moved required blocks world rules ensure hoist
lift block unless needs moved therefore already impossible load
blocks truck
remains ensure vehicles drive locations use
standard logistics domain truck drive another location package


fikvarnstrom magnusson

figure driverlog instance strips
needs picked delivered due use stacks crates
depots domain rule must modified vehicle may drive location
crate must moved another location crate must
stacked differently crate truck needs location
destination ready crate location
truck yet picked
simpletime simpletime version lifting dropping crates still takes one unit
time loading takes three units unloading four driving ten changes made
ensure mutual exclusion example hoists lift one crate time
driving fluent introduced keep track trucks headed similar flying
zenotravel
timed timed domain time required loading unloading crate depends powerful hoist weight crate time required
driving two locations depends speed truck distance
locations minor changes required handle domains although
higher quality plans could certainly produced taking timing account
determining hoists trucks use
driverlog domain
driverlog illustrated figure yet another logistics domain time introducing
concept truck drivers road maps number packages transported
locations trucks two sets routes connecting locations links
trucks travel paths drivers walk along driving truck truck
one driver time load many packages needed
strips several control rules used previous logistics domains useful driverlog
minor modifications example packages loaded trucks
need moved unloaded reached final destination
hand number changes necessary due use road maps
importantly vehicles previously allowed drive locations immediately useful packages picked delivered driverlog


fitalplanner ipc extensions control rules

domain may direct roads locations specified predicate
link truck may move several intermediate locations
order reach destination consequently control rules must relaxed allow
trucks visit locations useful nevertheless degree
goal directedness still required one possible method identify vehicle
set locations vehicle might useful require chooses one
location takes shortest path chosen destination method used
competition help built shortest path discussed section control rule stating step invocation drive walk must
decrease distance current destination following definitions explained

define reasonable truck location truck location
omitted due space constraints
distfeature driving distance domain integer link link
mindistfeature driving distance location satisfying formula
distfeature driving distance domain integer
define driving distance reasonable destination truck location
driving distance location satisfying formula location
reasonable truck location truck
boolean fluent reasonable truck location truck loc defined terms logic formula
specifies whether given location reasonable destination given truck
timepoint evaluated driving distance function accesses shortest
path length shortest path given
road links specified link predicate driving distance location satisfyingformula function accesses another version shortest path used
driving distance reasonable destination order shortest distance location
location satisfies reasonable truck location since links cost
sufficient require whenever truck moves driving distance reasonabledestination decreases
changes required due use drivers may drivers
trucks packages loaded truck planner knows truck
driver drivers disembark still packages truck
goal truck must somewhere else drivers may walk along
paths order reach truck trucks drivers must select one useful destination
take shortest path chosen destinations
additional control rules ensure multiple trucks choose destination
unnecessarily multiple drivers choose walk location
simpletime simpletime version loading unloading objects takes two units
time driving takes ten units walking takes twenty units operators changed
accordingly going fluent introduced keep track drivers trucks
moving towards location yet arrived minor adjustments must
made control rules
timed timed version time required walk drive two locations


fikvarnstrom magnusson

determined pair functions specified instance since individual road
segments different lengths method used ensure drivers trucks used
shortest path current destination longer sufficient must modified
slightly major changes timed version
rovers domain
rovers domain simulates simplified planetary exploration expedition lander vessel
carries number rovers planet surface provides communication link back
earth rover subset general capabilities retrieving soil samples retrieving
rock samples capturing images cameras support different imaging modes
cameras mounted rovers storage compartments one rover
hold one soil sample one rock sample data sample must sent
lander communication link missions revolve around navigating waypoints
planets surface collect samples take images specified objectives
visible certain waypoints terrain may prevent rovers going directly
two waypoints different rovers handle different terrain list routes rover
use provided
strips following control scheme similar one used driverlog limit
movements rovers locations perform useful action collecting
rock sample capturing image finding path one waypoint
another solved way driverlog except rover
set routes waypoints
simpletime changes simpletime version trivial operator durations
changed mutual exclusion relations need enforced fluent calibrating camera keeps track whether certain camera calibrated
timed timed version introduces concept energy rover limited
amount energy action consumes energy similar
use fuel zenotravel domain major difference rovers
equipped solar panels recharge rover waypoints
rover go directly exposed sun requirement solar
panels work airplanes zenotravel domain refuel anywhere fuel
usage relevant terms minimization resource usage whereas rover uses
energy unwisely get stuck shade unable anything go anywhere
prevent let planner backtrack search better plan
introduce stricter rules keep energy levels mind deciding rover
allowed latter taken
critical point rover enough energy reach waypoint
sun recharge shortest path possible control rule
determine distance closest waypoint exposed sun addition
waypoints previously allowed reasonable rover go waypoint
exposed sun rover enough energy perform action
go recharge exist waypoints affordable
reasonable visit



fitalplanner ipc extensions control rules

figure satellite instance strips
satellite domain
satellite domain number satellites orbit earth equipped set
scientific imaging instruments satellites turn space targeting stars planets interesting phenomena capture images different instrument operation modes
modes include regular infrared imaging spectrographic thermographic
readings different planners task schedule series observations satellites used efficiently figure shows small example
instance arrows showing directions satellites pointing
directions represented explicit coordinates instead satellites turn
direction giving turn operator argument specifying star planet
phenomenon satellite point instruments first need activated
switch calibrated calibration target calibrate operator
capture images take image satellite enough power operate one
instrument time switching active instruments initiated switch
operator deactivate first instrument
satellite strips
since task consists collecting number images begin restricting use
take image images mentioned goal
control name take pictures goals
image direction mode image direction mode
goal image direction mode
next step restrict directions satellites turn may actually help collecting images task split control rule point ingoal directions definition goal directions satellite allowed turn towards
direction take picture calibrate instrument goal specifies satellite



fikvarnstrom magnusson

point direction work left
define goal direction satellite direction
take image possible satellite direction
instrument
power instrument calibrated instrument
calibration target instrument direction board instrument satellite
goal pointing satellite direction images collected
take image possible function checks image collected
already taken satellite necessary instrumentation
ready active instrument calibrated satellite may first turn towards
another direction calibrate
define take image possible satellite direction
mode goal image direction mode
image direction mode
instrument
power instrument calibrated instrument
board instrument satellite supports instrument mode
switch switch operators still regulated control rules
planner quickly takes habit repeatedly flipping power different instruments
instrument powered calibrated much
possible switching another instrument seems reasonable usefulness function
putting value usefulness particular instrument helps decide instrument
power first
define usefulness instrument
value sum mode supports instrument mode mode needed goal mode
define mode needed goal mode
direction goal image direction mode image direction mode
add one usefulness score instrument imaging mode supports
needed goal score used control rule chooses
satellites useful instrument
control name use useful instrument
power instrument power instrument
usefulness instrument
satellite instrument
usefulness instrument usefulness instrument
board instrument satellite board instrument satellite
switching instrument allowed instrument longer required
control name dont switch instrument dont
power instrument power instrument
mode supports instrument mode mode needed goal mode



fitalplanner ipc extensions control rules

run less obvious improvements analyzing planner output
reveals one remaining inefficiency satellites often simultaneously decide turn
direction picture needs taken direction despite fact
one satellite needs take picture similar situation zenotravel
domain number aircraft may concurrently choose pick passenger
differences due fact reason satellite point
certain direction order calibrate take image makes task
somewhat easier
therefore solved different way resource mutual
exclusion resource called point towards direction capacity
borrowed temporarily turn duration turn one satellite turns towards
specific direction satellite turn towards without causing resource conflict
still leaves one first satellite finished turning longer
owns point towards resource therefore another satellite immediately start
turning towards longer possible one satellite turn towards
direction first satellite taking pictures satellites
turn direction one one finally desired pictures taken
direction goal direction sees longer valid reason point
towards solved changing definition goal direction letting
take image borrow resource
clearly type swarming occurs quite often concurrent domains
principled solution investigated future
satellite simpletime
simpletime version changes duration operators turning takes five time
units switching instrument takes two units calibrating takes five units taking picture takes seven units couple helper fluents turning towards calibrating
image generalized image exists taken power generalized power
switch action executed keep track actions begun
completed affected control rules updated accordingly
satellite timed
timed version satellite domain includes two functions calibration time
specifies time required calibrate slew time function represents time
required satellite turn two directions neither changes prompts
significant changes simpletime control
satellite discussion
satellite domain provide real challenge long planner trying
correct plan finding short plan harder especially timed version
would require additional analysis determine order images collected
satellites used image control rules seemed
bit overkill especially since yet created control rules complex
umtranslog domain reason decided satisfied done


fikvarnstrom magnusson

far surprised plans generated turned considerably
lower quality produced planners
contest informed reason least main reason
automatic generator created instances randomized slew times
every pair directions check geometrical consistency would
present real world situation subconsciously assumed instances
satisfied triangle inequality case teams
discovered example handcoded turning satellite directly
phenomenon groundstation takes units time turning two
carefully selected intermediate directions requires units time
initial testing shows taking consideration built
shortest path yields significantly shorter plans plan length measured
time point goals satisfied
another potential improvement would change last clause goal direction
allow satellites turn towards direction specified goals soon one started
taking last picture rather waiting one finished taking last picture
umtranslog domain
umtranslog domain another logistics domain types predicates
functions operators size complexity incomparable previously
encountered logistics domains contest
since formal domain definition information provided domain
high level description work information
domain pddl definition major previous
domains since generally quite simple easy understand give
us umtranslog significant amount time spent trying
determine exactly packages allowed move loaded
unloaded kinds vehicles retrospect would probably better
teams skip umtranslog domain completely spend
time numeric complex versions domains
domain trucks trains aircraft transport packages locations
must follow strict movement patterns locations transportation hubs
transportation centers rest ordinary locations package allowed
move hierarchy move two locations
layer longest possible route package thus ordinary location
transportation center hub another hub transportation center finally
another ordinary location
domain groups locations cities grouped regions trucks
travel two locations city existing road route
two cities trains planes use predefined routes transportation centers
hubs great number restrictions complicate movements packages must
compatible vehicle loaded vehicle must enough free space
loaded heavily wider longer higher route destination
location accepts finally locations vehicles routes must available use


fitalplanner ipc extensions control rules

control rules previous domains specify reasonable location limit
vehicle movements destinations reasonable truck might want pick
deliver package location truck cannot reach goal location
package unload package transportation center picked another vehicle
control rules allow trucks pick several packages makes finding
optimal solutions impossible general case simplifies search acceptable
solutions great deal imminent risk packages truck
carrying end wrong location allowed travel picking
packages along way since packages must move according specified pattern
transportation centers hubs moving package arrived location
transportation center allowed package stuck restricting
trucks picking one package time avoids
large group loading unloading rules controlling among
things opening closing valves doors loading unloading packages
finally packages loaded vehicles actually able take useful
location
creating control rules meeting contest deadline left time get domain
working concurrent instead make sequential
given time set control rules could definitely improved speed
less issue search allowed higher quality plans generated
better instances would needed guidelines developing better control
rules since contest make full use intended transportation scheme
transportation centers hubs

improvements competition
though competition ended aips conference april
work talplanner naturally cease still many improvements
made couple related development domains
control rules implemented summer
domain visualization
discussed description zenotravel domain process creating control
rules domain often involves incremental improvements talplanner run
number instances one set control rules possibly without control
rules beginning resulting search tree analyzed order determine
bad choices made avoided improved control
rules repeated planner consistently finds plans good quality
process one must study output planner
structure particular instance solved example driverlog
may necessary draw road network used instance
pen study paths taken trucks people packages
road network order discover whether improvements would possible
often particular inefficiency appears one large set
instances tracing execution plan hand obviously tedious time


fikvarnstrom magnusson

consuming task ought automated far possible
led development tpvis generic graphical visualization framework
talplanner tpvis framework used generate domain images article
provides animated display consisting set nodes node
container atomic object containers may represent vehicles contain
packages locations since vehicles packages objects location
similar concepts atomic nodes may used packages instruments
satellite type object displayed edges nodes
indicate form relationship objects obvious interpretation
two location nodes connected transportation route built layout engine
generate layout automatically manually adjust visual coordinates
node
visualization framework used concrete plugins adapted specific domains driverlog plugin example displays locations container nodes
linked paths drivers walk links trucks drive trucks
containers contained within specific location shown figure page
plan generated tpvis animates actual movements objects
locations creates better instinctive feel domain two dimensional
graph display gives overview difficult provide text output
addition animating graph tpvis simultaneously lists partial plan leading
current state goals planner tries satisfy tpvis provides
limited form interactive since point process allows
user force planner backtrack explore different search branch
development tpvis initiated contest
graphical visualization available work contest domains would
saved lot time possibly tree two
automatic translation pddl talplanner
although obvious automatic translator pddl talplanners input format urgent features implemented
instead decided translate ipc domains hand retrospect mistake risk making error somewhere translation becomes imminent
dealing complex domains umtranslog operators
highly complex preconditions translating long formulas hand quite time
consuming semi automatic translator therefore implemented decrease amount
work involved translation process reduce risk introducing errors
definition

discussion conclusions
third international competition major step forward terms
expressibility required represent benchmark domains provided number
interesting challenges planner wanted participate competition
article described challenges affected talplanner shown number
extensions made order meet challenges article includes


fitalplanner ipc extensions control rules

number domain dependent control rules competition domains rather
presenting exhaustive list pre packaged control rules attempted place
emphasis explaining incremental analysis process eventually leads final
formulas going particular detail zenotravel domain
could seen examples shown control rules often simple
natural common sense rules difficult generate given basic knowledge domain rules complex still difficult
understand verify someone spent effort generate unfortunately rules quite unintuitive rules complex
easily understood rules occasionally forbid optimal plans
extent rules might avoided gaining experience good practices
writing control rules extending expressivity language control
rules written complex conditions expressed succinctly
natural manner simply spending little bit time control rules
available competition much time spent teaching
working planner implementation however another important cause
complexity certain rules probably attempting express search control
knowledge way control rules prune search tree great
extent even simple depth first search sufficient efficiently finding good
plans remainder tree
search control knowledge easily expressed manner certainly mean control rules abandoned altogether instead
learn experience control rules might one multi purpose
tool efficiently easily solve instead
one would expect one useful tool deserves place toolbox
combined approaches mention one rather obvious
example would possible devise heuristic forward chaining planner whose search
tree would pre pruned control rule techniques talplanner control rules
could written exclude plans heuristic gives suboptimal potentially
providing plans closer optimal even domains heuristic search
function provides good plans may often efficient state number constraints
explicit control rules
extensions talplanner considered least since time
second competition long clear us eventually examined explored could start working
though strengths weaknesses control rules explored depth
work therefore focused mostly investigating far possible
take talplanner current shape explicit control rules means
controlling search process work proved rather fruitful talplanner well ipc well ipc planner becoming reasonably
mature improvements made planner
released general use might time take step back consider relation
approaches depth done previously order investigate
possible advantages hybrid approaches
course mean nothing done within pure


fikvarnstrom magnusson

talplanner framework contrary many additional topics pursued
including investigating application talplanner plan optimization
simplest approaches might involve applying standard optimal graph search pruned search tree generated talplanner extending planner
handle incomplete knowledge non deterministic operators many topics
next focus yet determined

acknowledgements
supported part witas project wallenberg foundation

references
bacchus f kabanza f temporal logics express search control knowledge artificial intelligence
doherty p reasoning action change occlusion cohn g
ed proceedings th european conference artificial intelligence ecai pp john wiley sons available ftp ftp ida liu se pub labs
kplab people patdo ecai ps gz
doherty p gustafsson j karlsson l kvarnstrom j tal temporal action
logics language specification tutorial electronic transactions artificial
intelligence available http www ep liu se ej etai
doherty p kvarnstrom j talplanner empirical investigation temporal
logic forward chaining planner dixon c fisher eds proceedings
th international workshop temporal representation reasoning pp
ieee computer society available ftp ftp ida liu se pub labs kplab people
patdo time final ps gz
doherty p kvarnstrom j talplanner temporal logic planner ai
magazine
fox long pddl extension pddl expressing temporal
domains journal artificial intelligence issue
gustafsson j doherty p embracing occlusion specifying indirect effects
actions aiello l c doyle j shapiro c eds proceedings th
international conference principles knowledge representation reasoning
kr pp san francisco morgan kaufmann publishers available ftp
ftp ida liu se pub labs kplab people patdo final kr ps gz
karlsson l gustafsson j reasoning concurrent interaction journal
logic computation
kibler morris p dont stupid hayes p j ed proceedings
th international joint conference artificial intelligence ijcai pp
kvarnstrom j doherty p talplanner project page http www ida liu se
patdo aiicssite kplab projects talplanner



fitalplanner ipc extensions control rules

kvarnstrom j doherty p talplanner temporal logic forward chaining
planner annals mathematics artificial intelligence
kvarnstrom j doherty p haslum p extending talplanner concurrency
resources horn w ed proceedings th european conference
artificial intelligence ecai vol frontiers artificial intelligence
applications pp amsterdam ios press available ftp ftp ida liu se
pub labs kplab people patdo www ecai ps gz
kvarnstrom j applying domain analysis techniques domain dependent control
talplanner ghallab hertzberg j traverso p eds proceedings
sixth international conference artificial intelligence scheduling
aips pp aaai press menlo park california
long fox rd international competition
analysis journal artificial intelligence issue




