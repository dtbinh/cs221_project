Journal Artificial Intelligence Research 20 (2003) 145-148

Submitted 9/03; published 12/03

Commentary
PDDL2.1 Art Possible?
Commentary Fox Long
Drew McDermott

drew.mcdermott@yale.edu

Dept Computer Science, Yale University,
PO Box 208285, New Haven, CT 065208285

Abstract
PDDL2.1 designed push envelope planning algorithms do,
succeeded. adds two important features: durative actions, take time (and
may continuous effects); objective functions measuring quality plans.
concept durative actions flawed; treatment semantics reveals
strong attachment way many contemporary planners work. Future PDDL
innovators focus producing clean semantics additions language,
let planner implementers worry coupling algorithms problems expressed
latest version language.

things considered, Fox Long done terrific job producing PDDL2.1. know
experience getting committee agree language requires delicate combination diplomacy decree. language extensions emerged 2002
competition exactly anyone wanted, apparently everyone live
them. PDDL2.1 serving sturdy basis evaluating comparing planning algorithms, prime purpose language first place. appears
next competition minor extensions, revisions, necessary.
top work negotiating syntax language, Fox Long produced semantics, display paper, plus elaborate semantics fully
autonomous processes, make PDDL2.1, unfortunately. (I
2002 competition committee, and, explain below, enthusiastic others
committee concept durative actions.)
Probably important innovation PDDL2.1 introduction objective
functions plans, thus making plan quality important plan existence. far
planners able much objective functions, indicates thoroughly weve conditioned classical-planning framework. Objective functions
become much important future.
main defect PDDL2.1 syntax semantics tailored closely
currently popular style planner. example, functions allowed, exactly
one kind, namely, take non-numeric arguments denote time-varying numeric
quantities. is, (f ---args--- ), arg must identifier overall value
must number change situation situation. paradigmatic example
(amount-in tank1), might denote volume fuel tank1. term
(object-at-distance 3) allowed. restrictions? many planners
eliminate variables outset solution attempt instantiating terms
c
2003
AI Access Foundation. rights reserved.

fiMcDermott

possible combinations objects mentioned problem statement. tactic may
sound unpromising, many problems reasonable size works surprisingly well.
However, soon universe objects becomes infinite tactic stops working,
means numbers cant treated ordinary objects. means general
functions cant part language. function midpoint: Location
Location Location, would generate infinite set terms (midpoint
loc-a (midpoint loc-b loc-a)).
PDDL 1.0, problems arise functions language. main goal designing agree lowest-common-denominator notation many planners could obviously cope with, could become standard
problem statement. language succeeded quite well regard,1
standard framework discussions go next. discussions,
several relevant considerations:
1. real-world problems need solved?
2. problems lie beyond solvable fringe current state art?
3. constructs given clean semantics? coherent semantics all?
4. constructs current planning algorithms cope with?
listed declining order importance, although grant
important. believe PDDL2.1 gives much weight consideration 4,
example functions good case point. Functions play several different roles
logical theory, PDDL domains are, get it. assemblyplanning domain, someone might want function top (top cylinder-3) denotes
top piece worked on. considerations come play?
1. Assembly planning real-world problem.
2. lies well beyond currently solvable, probably far beyond.
3. semantics functions mathematical logic well understood, use
solutions here.
4. Current planning algorithms cant cope functions, easily
extended handle functions top, cant recursively nested.
Given answers, considering examples, seems clear adding functions PDDL good idea: would make language easier use realistic problems,
many cases would impose minimal burden current planners. presence
functions makes set problems unsolvable planning system, system
detect problem encountered go next one. wanted
to, could add :functions requirements flag language, hardly seems worth
trouble. But, said above, much weight attached abilities current
planners PDDL2.1 ended function declaration whose syntax functions
needlessly restricted whose semantics needlessly complex.
1. precise, succeeded well action-based planners, went nowhere hierarchical planners.

146

fiPDDL2.1 Art Possible?

see phenomenon durative actions, is, actions require
specified amount time execute. committee thrash compromise
things, mainly revolving around far go beyond state art. minority
(including me, well Fox Long) thought obvious next step
able model autonomous processes, differ actions two respects:
continuous effects, run whenever conditions true (precondition
quite right term), matter target agent (the one executing plans) does.
example boiling water: long water pot, water 100
degrees Celsius, water boil away, continuously decreasing volume. agent
make use processes making conditions true false appropriate times.
Unfortunately, majority committee thought putting processes PDDL
big leap, instead add durative actions. Fox Longs paper
shows, term durative action really refers two completely different species: actions
take fixed amount time matter what, traveling New York
London;2 actions whose duration partly control planner,
boiling water. difference flagged syntactically whether :duration field
durative action equality (species 1) inequality (species 2). agent executes
action species 1, loses freedom duration action.
agent sitting airplane, taking hike. seems unproblematic,
consider cleaning warehouse, might modeled taking amount time
proportional messiness warehouse. weird idealization imagine
robot might commit cleaning warehouse, essentially prisoner
decision warehouse clean.
Duratives species 2 avoid problem, essentially sneaking autonomous processes
theory strange form. allowed use autonomous processes,
long pretend target agent executing them. Rather connect process
directly condition, suppose agent decide stop process
point consistent constraints ?d, duration action. So, Figure 14
Fox Longs paper, rather autonomous process started
stopped changing truth value (onHeatSource pot ), say (onHeatSource
pot ) becomes true false agent starts stops heat-water action.
turn-on turn-off actions required.
first remark make difference action target agent
stop one must wait end marked syntactically. Suppose
possible agent get locked kitchen boiling water.
longer stop boiling. PDDL2.1, impossible sort thing
expressed. closest come make (over (in agent kitchen))
condition durative action, soon agent leaves kitchen must
bring heat-water action close, plan invalid.
impression planners handle duratives handle species
1, committee decided include duratives. seems clear
species 2 headed extinction favor straightforward autonomous processes.
2. Assuming flight time fixed may seem extreme idealization, allowing time vary
(probabilistically?) would push PDDL far beyond classical-planning roots; none controversies
mentioned ever question knowability future.

147

fiMcDermott

Fox Long define semantics duratives terms ordinary actions plus monitoring actions make sure conditions remain true intervals
theyre supposed true. possible know exactly monitoring actions
supposed inserted changes fluents linear. way specifying semantics, has, unfortunately, run course. Fox Long point out,
future increases complexity temporal constructs make harder express
semantics PDDL, harder verify plan correct.
details durative semantics echo issues arose connection
semantics functions. tricky part semantics actions incorporating
STRIPS assumption actions represented terms add lists delete lists,
turn requires assuming situations represented finite lists atomic
formulas. One might suppose numbers would complicate picture
infinite number them, fortunately numbers dont compromise
STRIPS world view. specify blocks location numerical coordinates, still
one location, moving involves deleting assertion stating old location
adding new one.
Why, then, Fox Long work hard keep numerical assertions strictly separate
non-numeric? flatten action definitions assigning semantics? quantifiers handled substituting possible terms variables?
answer questions odd restrictions functions: Many
current planners depend generating possible instances action.
usually clarifies semantics language greatly defined without direct
connection implementation reasoning system language. (McDermott,
2003) sketch formal semantics extension PDDL containing true autonomous
processes. fulcrum framework set truth conditions process definitions.
obvious link requirements planning algorithm, fact
semantics allows processes would quite difficult cope exploit. However,
hard find subsets process definitions, including corresponding durative
actions, current planners, slight extensions, could handle.
One key goals PDDL beginning put pressure
automated-planning community make planners handle realistic class planning
problems. new versions PDDL restricted ways congenial existing planners,
sends mixed message, urging us new territory, time reassuring us
algorithms might still basically correct. planning community doesnt really
need much reassurance; opt domain-definition language clear syntax
clean semantics find algorithms solve problems domains
language describes.

References
McDermott, D. (2003). formal semantics processes PDDL. Proceedings
ICAPS-03 Workshop PDDL.

148


