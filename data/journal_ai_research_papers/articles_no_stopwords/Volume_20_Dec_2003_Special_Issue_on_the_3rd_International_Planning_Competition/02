journal artificial intelligence

submitted published

commentary
power modelinga response pddl
fahiem bacchus

fbacchus cs toronto edu

department computer science
kings college road
university toronto
toronto ontario
canada h

abstract
commentary argue although pddl useful standard
competition design properly consider issue domain modeling
hence would advocate use specifying domains outside context
competition rather field needs explore different approaches
grapple directly effectively modeling utilizing
diverse pieces knowledge typically domains

introduction
fox long terrific job organizing competition non trivial
component work specifying extension pddl much interesting
range could addressed competition although extension represents
useful standard competition design ignores power reality
domain modeling argue features pddl unnecessary
similar effects easily captured robust modeling
domain
tlplan system competed competition despite
fact tlplans specification language direct support features
pddl still able encode competition domains tlplan utilizes
language designed suitable robustly modeling domains
found many features pddl used competition fact easy
capture simply robust modeling domain
pddl takes adding features language rather
requiring domain robustly modeled perhaps surprising given
dichotomy still persists ai field dichotomy work
domain independent control intensive work controlintensive tends ignore applicability power state art search
work domain independent tends ignore power
gained requirements imposed domain modeling researchers
freely acknowledge importance components however one rarely finds work
tlplan includes constructs expressing domain specific control information referring
component language

c

ai access foundation rights reserved

fibacchus

durative action load truck
parameters truck
l location
cargo
c crane
duration duration
precondition l
l
empty c
effect
loading
end loading


action move truck
parameters truck

precondition loading



figure converting conditions
interface two issues many researchers work
issues
rest commentary elaborate argument presenting examples
features approaches appearing pddl demonstrate insensitivity domain
modeling

coordinating concurrent actions
section pddl document constructs presented support durative
actions actions whose effects immediate ordinary non durative
actions occur end fixed duration duration
constant specified functional term obvious extension used e g bacchus
ady action could range effects different future
timepoint included pddl without extension start
end specifiers reasonable ways specifying delayed effects
non instantaneous actions concurrency control becomes issue achieve
kind control pddl provides condition constructs start end
tlplan provide end constructs
start simply ordinary precondition yet still able model
domains without would argue general constructs
necessary
guilty colleagues
instead one must ascend much complex specification continuous effects presented
section pddl document achieve degree flexibility



fia response pddl


consider load truck action given figure pddl article contains
condition l e truck must stay location
load must moved allowed move vehicle
loaded similarly drive car refueled
turn oven used bake cake attempt tie
shoelaces running etc knowledge abounds common sense conditions
natural language use progressive tenses refer ongoing activities similarly
natural way model condition simply action assert
activity ongoing use negation activity precondition actions
could interfere resulting transformation load truck action given
figure
figure load truck action advertises initiated going loading
truck adding loading predicate state end action predicate
deleted actions move truck could interfere loading blocked adding
loading preconditions technique able replace
conditions used competition domains interestingly replacements
made domain sensible readable
consider brief advantages modeling effects adding progressive
predicates state
method realized without extending standard strip adl semantics
actions preconditions still encapsulates interactions actions presence conditions one would examine every
action see conditions interfered one
actions effects put another way actions activation condition continues
markovian e dependent current state current state continues
carry information needed determine action applied
conditions one needs examine currently active actionsthe
state longer encapsulates necessary information
finally seems resulting domain natural easier
understand
modularity
one concern avoiding conditions appears
make adding actions domain non modular non modularity potentially arises
adding actions could interfered previous actions
adding actions could interfere previous actions
first case arises add actions refuel repair change tire etc
interfered existing action move truck solution
adding non interference preconditions would seem require modifying description
thanks david smith martha pollock pointing needed address issue
modularity



fibacchus

move truck add refueling repairing changing tire
etc preconditionsa precondition every action added
second case arises add action tow truck changes
location truck would ensure add preconditions
progressives required block interfering previously defined actions
second case perhaps problematic since require modifying
old actions however first case issue since one might want modify
definition previous actions already debugged
conditions need make changes old actions
worry effects actions old however would argue
modularity exists syntactic levelit syntactically easy modify domain
description accommodate actions corresponding modularity
semantic level interferences action old still exists
cases cannot simply ignore interactions leaving planner
conditions resolve found developing domains many cases
action added domain bug domain specification appears
example plans one would expect longer found planner often bug
lies action often bug found specification old actions
domain longer operates expected one still left task unraveling
interactions specification general specifying rich domain requires understanding
possible interactions domain task conditions
help
could argued job planner unravel interactions
domain argument believe trivializes job specifying domain
planners job compute interactions actions sequence
complex composition actions getting domain correctly specified difficult task
requires least understanding actions interact statically even one leave
dynamic interactions planner
fortunately systems interactions actions relatively local
typically relatively structured way actions interfere
makes specifying domains feasible
one take advantage structure build robust domain provide
advantages semantic well syntactic modularity critical component building
good domain ability use definitions axioms feature provided
pddl tlplan e g one define predicate symbol first order
formula previous defined symbols defining right high level constructs one
typically provide explicit representation structure interactions
domain advantage one obtains declarative representation
structure thus achieving natural easier understand domain specification
example one could define predicate must stationary
disjunction
loading changing tire repairing refueling
move truck l l action need single precondition
must stationary action requires truck station

fia response pddl

durative action load truck
parameters truck
l location
cargo
c crane
duration duration
precondition l
l
empty c
effect
loading
end loading
holding c
l
end holding c
end holding c holding c
end holding c load failed


figure converting end conditions
ary accommodated simply adding disjunct definition must bestationary advantage explicitly introducing concept
must stationary helps understanding structuring domain contrast conditions one concept changing
simple example difference appears trivial key idea
concept must stationary domain use build
complicated concepts
explicit progressive preconditions allows coordination far complex shared uses resource example specify refueling driving
require exclusive use truck changing tire done concurrently
repairing truck concurrently loading conditions accommodated action explicitly mention excluded activities precondition
axioms grouping structuring activities complex conditions
conditions action preconditions case
explicit description domain easier understand debug modify
end
end strange condition fact appear competition
domains would argue needed easily captured
constructs rather unnatural would never appear reasonable
domain model end intended support flexibility whereby action
release condition actions might delete condition long
condition subsequently restored time condition effect
breaking markovian nature normal action specifications natural way
model situation would claim simply use conditional end effects
required condition holds end desired effect created otherwise bad
effect occur modified load truck action given figure



fibacchus

durative action burnmatch
parameters match l location
duration duration
precondition
l
effect
light source l
dark l light l

burning
end burning burning
end light source l
burning
light l
dark l

action blowoutmatch
parameters match l location
precondition l
burning
effect
burning
light source l
light l
dark l


figure alternate model burn match
modification instead end holding c condition simply
changed effects action holding c holds end action
action normal effects otherwise adds state marker indicating
load failed add load failed goal planner would search
ways falsifying antecedent effect assuming load failed cannot
undone e planner would search ways ensuring holding c true
end action note exactly planner would ensure
ordinary precondition holds reduce construct
standard features

unspecified durations
another feature pddl ability specify ranges durations actions
intent actual duration action might affected actions
burnmatch heat water actions figures pddl document
examples range utilized duration
flexible durations strange make action dependent future
actions furthermore convinced necessary rather think
natural way model situations would introduce two actions one start
action light match start heating liquid one end action blow
match take liquid heat figures present alternate
burnmatch starts match burning toggling lighting status location
light location posts default completion



fia response pddl

durative action heat water
parameters p pan
duration duration temperature p heat rate
precondition full p
onheatsource p
bypan
effect heating p
heating start p current time
end bypan heating p heating p
end heating p assign temperature p
end bypan heating p burn pot p
action take heat
parameters p pan
startt time
precondition heating p
heating start p startt
bypan
effect heating p
burn pot p
increase temperature p
current time startt heat rate

figure alternate model heat water
match burning maximum duration match still burning end
maximum duration extinguished lighting status toggled match
source light hand match extinguished earlier
blowoutmatch action
heat water action starts water heating burn match default
maximum duration pan still heated end time raises
temperature pan degrees agent pan takes pan
heat otherwise pan continues heated causing become burnt
keeping previous discussion wanting end preconditions note
pans temperature never rises assuming water keeps boiling
marks time heating started current time time action
executed take heat action take pan heat time
uses start time heating calculate temperature water pot
burnt temperature remains set heat water
suggesting alternate action specifications right
e g heat water cannot account putting pot back heat taking
suggesting case variable durations made
really necessary even natural domain modeling

conclusions
could list components pddl seem unnecessary
believe point made pddl essential competition
certainly strong supporter usefulness competition furthering
however would suggest outside context competition


fibacchus

issue features included domain specification language
needs grounded application languages domains even
simplified ones designed modeled many different ways believe
better produce robust simpler languages develop
languages features really needed
think many ideas contained pddl useful e g way
continuous change treated nevertheless would encourage anyone try
construct dealing features rather would encourage
development inspired issues arise interesting
domains think incorporation features languages
needs motivated compelling examples

references
bacchus f ady resources concurrency forward chaining
proceedings international joint conference artificial intelligence ijcai pp




