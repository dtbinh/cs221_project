Journal Artificial Intelligence Research 20 (2003) 149-154

Submitted 9/03; published 12/03

Commentary
Case Durative Actions: Commentary PDDL2.1
David E. Smith
NASA Ames Research Center
Computational Sciences Division, Mail Stop: 269-2
Moffett Field, CA 94035, U.S.A.

DESMITH@ARC.NASA.GOV

Abstract
addition durative actions PDDL2.1 sparked controversy. Fox Long
argued actions considered instantaneous, start stop processes.
Ultimately, limited notion durative actions incorporated language. argue
notion still impoverished, underlying philosophical position
regarding durative actions shorthand start action, process, stop action
ignores realities modelling execution complex systems.

1. Introduction
PDDL2.1 introduces limited notion time classical STRIPS planning framework.
particular, introduces notion durative actions, is, actions take time. However, notion durative action rather limited, somewhat begrudging. reflects
underlying philosophical position Fox Long actions really instantaneous,
initiate terminate continuous processes. According view, durative actions
seen shorthand start action, process, stop action. result, durative
actions lack important features, namely ability require (pre)conditions hold
specified intervals, effects take place arbitrary time points within
action. Fox Long argued features captured breaking durative action series smaller actions effects beginning end,
preconditions beginning, end, entire action. However,
representation exceptionally cumbersome, ignores fact agent may
separate control actions. addition, representation forces planner
additional work order connect actions.

2. Example
illustrate problems PDDL2.1 notion durative action, consider simple
example spacecraft must turn order point instrument particular target.
order turn spacecraft, thrusters reaction control system (RCS) fired order
supply angular velocity. spacecraft coasts pointing correct direction (or nearly so), RCS thrusters fire order stop rotation. Firing
thrusters consumes propellant, requires controller dedicated task.
addition, thrusters firing, vibration spacecraft, certain
operations cannot performed. thruster firings relatively quick, coasting
phase not. general, turning large spacecraft slow process may take several
minutes. reason speedy turns require greater acceleration deceleration,
therefore consume propellant.

fiS MITH

first question need answer is, best way model complex operation? could model turning operation initial action start spacecraft turning, another action stop turn, interspersed processes model
craft between. level detail, seems reasonable model
physics. However, may well turning guidance built primitive operations spacecraft, possibility starting stopping turns
independently. could model operation consisting instantaneous action
start turn, followed finite process terminates turn complete.
bother? fact is, interested effects process, initiated
starting turn. reasons, seems natural proper regard durative action, effects take place throughout action.
lets suppose want model operation durative action PDDL2.1.
could say something like:
(:durative-action turn
:parameters (?current-target ?new-target - target)
:duration
(= ?duration (/ (angle ?current-target ?new-target)1
(turn-rate)))
:condition
(and (at start (pointing ?current-target))
(at start (>= (propellant) propellant-required))
(at start (not (controller-in-use))))
:effect
(and (at start (not (pointing ?current-target)))
(at start (decrease (propellant) propellant-required))
(at start (controller-in-use))
(at start (vibration))
(at end (not (controller-in-use)))
(at end (not (vibration)))
(at end (pointing ?new-target))))

However, model action quite conservative. ties controller entire
turn operation, specifies vibration present entire operation. addition,
consumes required propellant beginning operation. reality, RCS
firing beginning end turn. result, controller needed two periods, vibration present two periods, propellant
consumed two periods. might matter coast phase relatively quick. However, indicated earlier, turning large spacecraft take several
minutes. Unfortunately, PDDL2.1 rather limited notion durative action cannot
specify action conditions effects times start end action.

3. Decomposition Sub-actions
Fox Long pointed out2 possible model durative action intermediate conditions effects breaking sequence sub-actions. turn
action would need three sub-actions illustrated below: start-turn action, coast
action, stop-turn action, together turn action bind together.

1. Note assumes precomputed provided angles possible pairs targets.
want this, must provide (vector) direction target planner would need
ability vector arithmetic trigonometry within formulas.
2. Personal communication.

150

fiT C ASE



URATIVE CTIONS : C OMMENTARY PDDL2.1

(:durative-action turn
:parameters (?current-target ?new-target - target)
:duration
(= ?duration (/ (angle ?current-target ?new-target)
(turn-rate)))
:condition
(and (at start (pointing ?current-target))
(at start (>= (propellant) propellant-required))
(at end (finished)))
:effect
(and (at start (not (pointing ?current-target)))
(at start (turning))
(at start (enabled-start-turn))
(at end (not (turning)))
(at end (not (finished-turning)))
(at end (pointing ?new-target))))
(:durative-action start-turn
:parameters ()
:duration
(= ?duration (start-turn-duration))
:condition
(and (at start (not (controller-in-use)))
(at start (>= (propellant) (/ propellant-required 2)))
(over (turning))
(over (enabled-start-turn)))
:effect
(and (at start (decrease (propellant) (/ propellant-required 2)))
(at start (controller-in-use))
(at start (vibration))
(at end (not (controller-in-use)))
(at end (not (vibration)))
(at end (not (enabled-start-turn)))
(at end (enabled-coast))))
(:durative-action coast
:parameters ()
:duration
(= ?duration (coast-duration))
:condition
(and (over (turning))
(over (enabled-coast)))
:effect
(and (at end (not (enabled-coast)))
(at end (enabled-stop-turn))))
(:durative-action stop-turn
:parameters ()
:duration
(= ?duration (RCS-duration))
:condition
(and (at start (not (controller-in-use)))
(at start (>= (propellant) (/ propellant-required 2)))
(over (turning))
(over (enabled-stop-turn)))
:effect
(and (at start (decrease (propellant) (/ propellant-required 2)))
(at start (controller-in-use))
(at start (vibration))
(at end (not (controller-in-use)))
(at end (not (vibration)))
(at end (not (enabled-stop-turn)))
(at start (finished))))

Figure 1 shows graphically actions tied together. goal pointing
particular target, turn action required. turn action end precondition
(finished), satisfied adding stop-turn action3. Stop-turn
151

fiS MITH

condition (enabled-stop-turn) satisfied end effect coast action.
Likewise, coast action condition (enabled-coast) satisfied end effect start-turn action. start-turn action condition
(enabled-start-turn) satisfied start effect turn action. result,
turn action forces three sub-actions plan, sub-action forces predecessor sub-actions turn action plan. three sub-actions
condition (turning) satisfied turn action. result, way
consistently achieved three sub-actions packed sequentially
turn action.
pointing(?current)
turning
enabled-start-turn

pointing(?target)
turning
finished

turn

pointing(?current)

finished

enabled-start-turn
enabled-coast

start-turn
turning
enabled-start-turn

coast
turning
enabled-coast

enabled-coast
enabled-stop-turn

finished

enabled-stop-turn

stop-turn
turning
enabled-stop-turn

Figure 1: Sub-actions Turn operation. Start, end, over-all conditions
shown action. interconnecting start end effects shown
action. simplicity, omitted effects concerning vibration, controller
use, propellant usage
two additional subtleties representation. first that, although
three sub-actions occur turn action, obvious requirement
occur turn action. Suppose tried place start-turn
action previous turn action. previous turn action would three subactions, wayward start-turn action would conflict sub-actions. Thus,
order make work, would push three sub-actions earlier turn
action, on. Realizing cannot work requires difficult induction argument.
seems unlikely existing planner could actually infer this, trial
error. result, process generating plans involving actions would incur significant computational overhead, engage needless search.
second subtlety overlooked decomposition computing
durations sub-actions bit tricky. reasonable assume start
stop turn actions fixed duration, duration coast action depends current
3. turns (finished) effect stop-turn must start effect rather end effect. reason
occur end effect, stop-turn action would need complete prior end turn
action, since (finished) effect mutex (not finished) end effect turn action. Despite
asymmetry representation, stop turn still forced occur wholly within turn action
overall condition (turning).

152

fiT C ASE



URATIVE CTIONS : C OMMENTARY PDDL2.1

target orientations spacecraft. fact, duration coast action must
duration turn action minus durations start stop turn actions.
way introduce additional numeric turn-duration function set
turn action, used compute duration coast action.
process decomposing action sub-actions complex convoluted? all, HTN planning paradigm done time. reason
generative planning adopted view, better worse, one allowed
directly specify action used actions connected other.
result, order force sub-actions abut fit within turn action, must
tricky things. One might argue need HTN capability order model
actions. Indeed, would certainly make things easier. However, another way.

4. Richer Durative Actions
One approach dealing modelling problem admit richer language
modelling durative actions. make convenient model actions turn action,
need able specify conditions must hold various points intervals within
action, effects take place various points intervals within action.
many possible ways one could express conditions effects, one
straw-man possibility:
(:durative-action turn
:parameters (?current-target ?new-target - target)
:duration
(= ?duration (/ (angle ?current-target ?new-target) (turn-rate)))
:condition
(and (at start (pointing ?current-target))
(at start (>= (propellant) propellant-required))
(at start (not (controller-in-use)))
(at (- end RCS-duration) (>= (propellant) (/ propellant-required 2)))
(at (- end RCS-duration) (not (controller-in-use))))
:effect
(and (at start (not (pointing ?current-target)))
(at start (decrease (propellant) (/ propellant-required 2)))
(over [start (+ start RCS-duration)] (controller-in-use))
(over [start (+ start RCS-duration)] (vibration))
(at (- end RCS-duration) (decrease (propellant) (/ propellant-required 2)))
(over [(- end RCS-duration) end] (controller-in-use))
(over [(- end RCS-duration) end] (vibration))
(at end (pointing ?new-target))))

need explicitly construct actions starting stopping turn,
coasting. reason, need worry durations connecting
sub-actions. Instead, simply specified effects appropriate times
turn action. Note specified vibration controller use interval effects. seems
less cumbersome specifying two separate effects stating controller use
beginning interval, longer use end. However,
fundamental difference two encodings: encoding above, possibility another independent action could somehow make controller available
interval use. Bedrax-Weiss et. al. (2003) argued introduction
explicit notion resource PDDL language. notion could
simplify encoding even further, specifying controller reusable
resource required turn action appropriate intervals. Vibration (or stability) could treated resource, although somewhat less intuitive so.
153

fiS MITH

One final issue avoided notion continuous change. spacecraft
example, certainly continuous change going on. Propellant burned instantaneously, orientation spacecraft changes continuously. question is,
need model this? Certainly domains necessary reason continuous change. Fox Long point out, concurrent actions well simultaneous consumption production resources, may necessary reason
resources change course actions. example, Mars rover receives
energy solar panels time driving place place. Since battery minimum maximum capacity, one cannot model easily using discrete
consumption production effects. However, consumption production happen
simultaneously, one model continuous change taking place start end
action. sufficient spacecraft example since actions increase
propellant, one cannot perform two simultaneous actions affect spacecrafts
orientation.

5. Conclusion
Durative actions PDDL2.1 limited, expressing complex durative actions
decomposition sub-actions difficult clumsy. time, clear
modelling actions turning spacecraft terms processes either necessary useful, particularly possibility process deliberately interrupted.
domains this, richer, expressive notion durative action seems right
modelling tool. Note would argue modelling processes completely
unnecessary. However, many practical planning applications overkill. results
complex representation planning process necessary.
cheating model complex processes durative actions? course is. modelling cheating. real world physics, nothing instantaneous indivisible,
cheating model anything instantaneous action. Yet, usually content model
action turning light switch instantaneous indivisible, even though
take small amount time, complex processes behind it. durative action
different simply choosing model details process structure behind
action, even though may necessary model fact action takes time,
effects take place different times action. many practical applications, durative actions essential modelling tool, deserve richer treatment
provided PDDL2.1.

References
Bedrax-Weiss, T., McGann, C. & Ramakrishnan, S. (2003) Formalizing resources planning. Proceedings ICAPS-03 Workshop PDDL.
Fox, M. & Long, D. (2002) PDDL+: Modeling continuous time dependent effects. Proceedings 3rd International NASA Workshop Planning Scheduling Space.
Fox, M. & Long, D. (2003) PDDL2.1: extension PDDL expressing temporal planning domains. Journal Artificial Intelligence Research, issue.

154


