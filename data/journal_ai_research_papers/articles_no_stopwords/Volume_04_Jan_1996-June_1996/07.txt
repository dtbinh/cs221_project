Journal Artificial Intelligence Research 4 (1996) 287{339

Submitted 1/96; published 5/96

Planning Contingencies: Decision-based Approach
Louise Pryor

louisep@aisb.ed.ac.uk

Gregg Collins

collins@ils.nwu.edu

Department Artificial Intelligence, University Edinburgh
80 South Bridge
Edinburgh EH1 1HN, Scotland
Institute Learning Sciences, Northwestern University
1890 Maple Avenue
Evanston, IL 60201, USA

Abstract

fundamental assumption made classical AI planners uncertainty
world: planner full knowledge conditions plan
executed outcome every action fully predictable. planners cannot
therefore construct contingency plans, i.e., plans different actions performed
different circumstances. paper discuss issues arise representation
construction contingency plans describe Cassandra, partial-order contingency
planner. Cassandra uses explicit decision-steps enable agent executing plan
decide plan branch follow. decision-steps plan result subgoals acquire
knowledge, planned way subgoals. Cassandra thus
distinguishes process gathering information process making decisions.
explicit representation decisions Cassandra allows coherent approach
problems contingent planning, provides solid base extensions use
different decision-making procedures.

1. Introduction
Many plans use everyday lives specify ways coping various problems
might arise execution. words, incorporate contingency plans .
contingencies involved plan often made explicit plan communicated
another agent, e.g., \try taking Western Avenue, it's blocked use Ashland,"
\crank lawnmower twice, still doesn't start jiggle spark plug." Socalled classical planners 1 cannot construct plans sort, due primarily reliance
three perfect knowledge assumptions:
1. planner full knowledge initial conditions plan
executed, e.g., whether Western Avenue blocked;
2. actions fully predictable outcomes, e.g., cranking lawnmower definitely either work work;
1. category includes systems strips (Fikes & Nilsson, 1971), hacker (Sussman, 1975), noah
(Sacerdoti, 1977) molgen (Stefik, 1981a, 1981b). Recent classical planners include tweak (Chapman, 1987), snlp (McAllester & Rosenblitt, 1991) ucpop (Penberthy & Weld, 1992). term
due Wilkins (1988).

c 1996 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiPryor & Collins
3. change world occurs actions performed planner, e.g., nobody
else use car empty gas tank.
assumptions world totally predictable ; need contingency
plans.
perfect knowledge assumptions idealization planning context intended simplify planning process. allow development planning algorithms
provable properties completeness correctness. Unfortunately,
domains realistic: mostly, world extent unpredictable. Relying perfect knowledge assumptions unpredictable world may prove
cost-effective planner's uncertainty domain small, cost recovering failure low. general, however, may lead planner forgo options
would available potential problems anticipated advance.
example, assumption weather sunny, forecast, may neglect
take along umbrella; forecast later turns erroneous, impossible
use umbrella stay dry. cost recovering failure high, failing
prepare possible problems advance expensive mistake. order avoid
mistakes sort, autonomous agent complex domain must able make
execute contingency plans.
Recently, number researchers begun investigating possibility
relaxing perfect knowledge assumptions staying close framework
classical planning (Etzioni, Hanks, Weld, Draper, Lesh, & Williamson, 1992; Peot & Smith,
1992; Pryor & Collins, 1993; Draper, Hanks, & Weld, 1994a; Goldman & Boddy, 1994a).
work embodied Cassandra,2 contingency planner whose plans following
features:
include specific decision steps determine possible courses
action pursue;
Information gathering steps distinct decision-steps;
circumstances possible perform action distinguished
necessary perform it.

1.1 Issues Contingency Planner

contingency planner must able construct plans expected succeed
despite unknown initial conditions uncertain outcomes nondeterministic actions.
effective contingency planner must possess following capabilities:
must able anticipate outcomes nondeterministic actions;
must able recognize uncertain outcome threatens achievement
goal;
must able make contingency plans possible outcomes various
sources uncertainty affect given plan;
2. Cassandra Trojan prophet fated believed accurately predicted future
disasters. earlier version Cassandra described (Pryor & Collins, 1993).

288

fiPlanning Contingencies: Decision-based Approach


must able schedule sensing actions detect occurrence particular
contingency;



must produce plans executed correctly regardless contingency
arises.

design Cassandra addresses issues. However, several issues
addressed:


considered problem determining whether worth planning
particular outcome;



Cassandra probabilistic planner: cannot make use information
likelihood otherwise events;



ignored possibility interleaving planning execution (but see Section 7.4);



Cassandra handle exogenous events;



version Cassandra described cannot solve Moore's bomb toilet
problem (McDermott, 1987): find plans involve deciding
courses action succeed different contingencies (but see Section 6.5.5).

Cassandra assumes sources uncertainty possible outcomes known,
plans affect achievement goals. firmly classical
planning mold: job construct plans guaranteed achieve goals.
decide plan, plan for. Moreover, although believe Cassandra
sound complete, systematic. addition, current implementation
slow practical use.

1.2 Note Terminology

word conditional used variety senses literature. avoid use
altogether, except describing work authors use specialized
senses: example, conditional actions conditioning Peot Smith (1992).
use term contingency plan refer plan contains actions may may
actually executed, depending circumstances hold time. use
term context-dependent refer action effects depend context
action performed.

1.3 Outline

paper present Cassandra, describe algorithm detail, discuss
approach takes important issues contingency planning, show handles
variety example problems.
start describing structure Cassandra's plans. Section 2 describes
Cassandra represents actions, including uncertain outcomes; explains system
289

fiPryor & Collins
labels allows determination alternative courses action
contingency plan pursued; introduces notion explicit decision steps.
Section 3 brie describes basic planning algorithm absence uncertainty.
Section 4 explains algorithm extended handle uncertain outcomes actions.
particular, structure Cassandra's decisions considered, problems
ensuring soundness plan constructed. resulting algorithm described
detail properties discussed Section 5.
Section 6 consider issues arise contingency planning. Section 7
describes related work planning uncertainty. Finally, Section 8 summarizes
contributions work discusses limitations.

2. Cassandra's Plan Representation

Cassandra's representation contingency plans three major components:
action representation supports uncertain outcomes;
plan schema;
system labels keeping track elements plan relevant
contingencies.
components described remainder section.

2.1 Action Representation

Cassandra's action representation modified form strips operator (Fikes & Nilsson, 1971). consists preconditions executing action effects may
become true result executing it, standard strips operator. syntax
used ucpop (Penberthy & Weld, 1992). ucpop, action effects
complex standard strips effects: may associated set secondary preconditions , govern occurrence effect (Pednault, 1988, 1991).
Secondary preconditions allow representation context-dependent effects actions,
i.e., effects depend upon context action executed. use secondary preconditions critical Cassandra's ability represent uncertain effects,
hence nondeterministic actions, discuss Section 2.1.1.
Figure 1 shows simplified operator schema action making selection
soft-drink machine (the effects describing \make another selection" indicator light
turned omitted). operator describes two possible effects carrying
action: effect acquiring soda, depends secondary precondition
soda selected type available; effect \make another selection"
indicator light come on, depends secondary precondition soda
selected type available. effects depend upon preconditions money
entered machine machine plugged in.
2.1.1 Representing Uncertain Effects

uncertain effect Cassandra context-dependent effect unknown precondition , i.e., precondition planner neither knowingly perceive deliberately affect.
290

fiPlanning Contingencies: Decision-based Approach

Action:

(make-selection ?machine ?selection)

Preconditions:
Effects:

(:and (money-entered ?machine)
(plugged-in ?machine))
(:when
(available ?machine ?selection)
:effect (:and (dispensed ?selection)
(:not (money-entered ?machine))))
(:when
(:not (available ?machine ?selection))
:effect (another-selection-indicator-on ?machine))

secondary precondition
secondary precondition

Figure 1: Simplified representation operating vending machine
example, malfunctioning soft-drink machine may operate intermittently; planner aware intermittent functioning, unaware conditions govern
behavior, correct functioning device depends upon unknown precondition. point view planner, uncertain effect nondeterministic;
planner cannot tell advance whether occur. Clearly, definition fundamentally subjective: another planner better information might able specify
precisely conditions device functions properly, example knew
internal mechanism machine worked. another example, consider
happens coin tossed: principle, given perfect knowledge forces
distances involved, would possible predict outcome. practice, knowledge
unavailable effect action uncertain. principle, would possible
specify conditions would lead coin landing tails up; practice,
conditions unknown.
interesting note circumstances might possible planner
learn predict outcomes hitherto regarded uncertain: example,
learned soda machine worked. \Unknown" refers current situation.
representation would facilitate learning, would simply involve learning new
secondary preconditions rather whole new action representation.
Unknown preconditions play syntactic role normal preconditions within
operator schema; represented expressions formed using pseudo-predicate
:unknown. effect secondary precondition type occur
certain contexts cannot distinguished planner contexts
occur.
Figure 2 depicts simplified example operator uncertain effect|it represents action operating soft-drink machine intermittently fails dispense
soda despite operated correctly. operator two uncertain effects, one
soda dispensed, soda dispensed.
Clearly, uncertainty respect effects stems single underlying source, namely uncertainty whether machine malfunction.
effect, two unknown preconditions operator represent alternative results
underlying source uncertainty. relationship ected two arguments
291

fiPryor & Collins

Action:
Preconditions:
Effects:

(enter-selection ?machine)
(:and (money-entered ?machine)
(plugged-in ?machine))
(:when (:and (available ?machine ?selection)
(:unknown ?ok T))
:effect (dispensed ?selection))
(:when (:and (available ?machine ?selection)
(:unknown ?ok F))
:effect (:not (dispensed ?selection)))
(:when (available ?machine ?selection)
:effect (:not (money-entered ?machine)))
(:when (:not (available ?machine ?selection))
:effect (another-selection-indicator-on ?machine))

uncertain effect
uncertain effect

Figure 2: Operating faulty soft-drink machine
:unknown pseudo-predicate, first designates source uncertainty
associated, second designates particular outcome
uncertainty represents. possible contexts effectively partitioned set
equivalence classes, context class producing outcome
uncertainty. outcome used label equivalence class. condition
form (:unknown ?class outcome) true actual context class
designated outcome.
Notice instantiation operator introduce new source uncertainty,
means first argument unknown precondition must represented
variable operator schema. Cassandra binds variable unique identifier (i.e.,
skolem constant) operator instantiated.
Cassandra's representation assumed different sources uncertainty
independent other. source uncertainty linked uncertain outcomes
one operator, single operator may introduce number sources
uncertainty, may number outcomes. source uncertainty
exhaustive set mutually exclusive outcomes, unique name.
2.1.2 Representing Sources Uncertainty

key element Cassandra's design use single format represent sources
uncertainty affect planning. particular, uncertainty assumed manifest
uncertain effects planning operators, outlined above. Uncertainty initial
conditions handled within format treating initial conditions though
effects phantom \start step" action. treatment initial conditions,
initially developed reasons unrelated problem representing uncertain
outcomes, common snlp family planners Cassandra belongs.
Cassandra's formulation ignores uncertainty might stem outside interference
execution agent's plans, except inasmuch represented
292

fiPlanning Contingencies: Decision-based Approach
incomplete knowledge initial conditions. is, course, limitation classical
planners general; change world assumed caused directly actions
agent.

2.2 Basic Plan Representation

Cassandra's plan representation extension used ucpop (Penberthy & Weld,
1992) snlp (McAllester & Rosenblitt, 1991; Barrett, Soderland, & Weld, 1991),
turn derived representation used nonlin (Tate, 1977). plan represented
schema following components:
set steps ;
set anticipated effects steps;
set links relating effects steps produce consume (a step
consumes effect requires effect achieve one preconditions).
Note links effect denote protection intervals , i.e., intervals particular
conditions must remain true order plan work properly.
set variable bindings instantiating operator schema;
partial ordering steps;
set open conditions , i.e., unestablished goals;
set unsafe links , i.e., links conditions could falsified
effects plan.
plan complete contains open conditions unsafe links.

2.3 Representing Contingencies

contingency plan intended achieve goal regardless foreseeable
contingencies associated actually arise execution. construct valid contingency plan, planner must able enumerate contingencies. set
foreseeable contingencies computed sources uncertainty associated plan. effect, contingency one possible set outcomes relevant
sources uncertainty.
2.3.1 Contingency Labels

Keeping track whether plan achieves goal every contingency somewhat
complex process. Cassandra, cnlp, uses system labels accomplish necessary
bookkeeping (Peot & Smith, 1992). goal, step, effect Cassandra's plan labeled
indicate contingencies element participates:
Goals labeled indicate contingencies must achieved;
Effects labeled indicate contingencies expected occur,
i.e., contingencies goals satisfy arise;
293

fiPryor & Collins


Steps labeled indicate contingencies must performed, i.e.,
union contingencies effects expected occur.

preconditions effect become new goals, labels correspond
labels effect give rise them.
general, assumed particular step could executed contingency,
albeit possibly purpose. However, sometimes necessary rule particular step
particular contingency means preventing interference plan
contingency. example, consider plan achieve goal coin heads
up, first action toss coin (see Section 4.2.3 detailed discussion
plan). one contingency coin lands heads up, actions required.
another contingency, coin lands tails must turned order goal
achieved. clear, however, turning action must performed
first contingency: would mean goal coin heads
achieved. Cassandra, ruling steps accomplished associating negative labels
plan steps indicate contingencies steps executed.
Peot Smith (1992) call process conditioning .
addition, every step depends, directly indirectly, particular outcome
given source uncertainty ruled every contingency involves alternative
outcome source uncertainty. discuss reason restriction
detail below.
Cassandra's labeling system thus provides clear guidance agent executing
plan, simply performs steps whose positive labels ect actual circumstances hold execution. Steps neither positive negative labels involving
current contingency affect goals, guaranteed executable.
contrast, agent executing plan produced cnlp guided reason labels attached steps. cnlp's plans, action need executed least one goals
represented reason labels feasible. agent must therefore method
deciding top-level goals feasible. assume done comparing
context labels top-level goal (which labeled represented
dummy actions) circumstances actually hold. Cassandra's method thus
simpler: agent simply uses positive labels plan steps instead using
labels attached step indicate goals whose context labels must analyzed.
general principles label propagation Cassandra are:


Positive labels, denote plan element concerned contributes goal
achievement contingency, propagate along causal links subgoals
plan elements establish them;



Negative labels, denote plan element concerned would prevent goal
achievement contingency, propagate along causal links effects plan
elements establish.

details given Section 5.1.4.
294

fiPlanning Contingencies: Decision-based Approach

KEY
Link

Western
Drive
Western
Belmont

Western Check
traffic
Western

Take Western
Evanston
know
traffic
status

condition

Alternative
control flow

Decide
Take Belmont
Ashland

Belmont

Ashland

Take Ashland
Evanston

Figure 3: plan includes decision-step
2.3.2 Representing Decisions

Planning seen process deciding advance done
(Collins, 1987). need contingency plans arises necessary decisions cannot
made advance missing information (see Section 6.4). decisions cannot
made advance, must made plan executed. agent executing
contingency plan must point decide possible courses action
pursue, words branch take.
Previous work effect assumed agent execute steps
consistent contingency actually holds (Warren, 1976; Peot & Smith, 1992).
However, determination steps consistent cannot (by definition) made
advance; order know contingency holds execution, agent executing
plan must general gather information decision based. ensure
viable plan, planner must able guarantee steps required gather
information con ict required carry rest plan. Therefore,
planner must general able include information gathering steps, well
steps support decision making, plan constructing. Cassandra achieves
representing decisions explicitly plan steps. preconditions decisionsteps include goals possession information relevant making decision;
scheduling actions obtain information thus handled normal planning process.
instance, consider contingency plan alluded above: \try taking Western Avenue, it's blocked use Ashland ." execution plan, agent must
point decide branch plan execute. decision-step case
would precondition knowing whether Western Avenue blocked not,
would cause planner schedule information-gathering action check trac
status Western. operation might turn precondition Western, achieved traveling junction Western Belmont.
decision taken, agent either take Western Evanston continue along
Belmont Ashland.
Assuming goal plan Evanston, final plan might depicted
Figure 3. Note control ow decision represented heavy lines. Solid lines
diagram represent links, action tail link achieving precondition
295

fiPryor & Collins
action head link. plan, agent take Western Evanston
one contingency, take Belmont Ashland Ashland Evanston
other.3
Notice order determine appropriate precondition given decision-step,
planner must way determining exactly need know order
make decision execution time. somewhat complex determination depends
part decision-making process carried out. Cassandra, decisions
modeled evaluation set condition-action rules form:
condition 1 contingency 1
condition 2 contingency 2
...
condition n contingency n
possible outcome given uncertainty gives rise decision rule; condition
decision-rule specifies set effects agent test order determine
whether execute contingency plan outcome. example, decision-rules
driving plan example would look this:
Western Avenue blocked
execute contingency using Ashland
Western Avenue blocked execute contingency using Western
Cassandra's derivation inference rules decisions explained detail Section 4.
preconditions decision-step goals know truth values conditions
decision-rules: thus knowledge goals (McCarthy & Hayes, 1969; Pryor, 1995)
(see Section 6.4). goals treated way preconditions
step. Cassandra thus requires special provisions allow construction
information-gathering plans.
explicit representation decision-steps provides basis supporting alternative
decision procedures. Cassandra's basic model decision procedure quite
simple, complex decision procedures supported within framework (one
procedure described Section 6.5.5). example, model could changed
differential-diagnosis procedure. representation decision procedures templates
way actions represented templates would allow planner choose
alternative methods making decision way choose
alternative methods achieving subgoal. even better approach might formulate
explicit goal make correct decision, allow system construct plan
achieve goal using inferential operators. However, would effect require
goals operators stated meta-language describing preconditions
results operators. yet addressed possibility detail.
Cassandra's separation gathering information making decisions
allows one information-gathering step serve several decisions. allows exible use
information-gathering actions; effective difference actions
action may appear plan.
3. Appendix shows plans Cassandra constructs examples described paper.
plan Section A.1.

296

fiPlanning Contingencies: Decision-based Approach
New step Add plan new step effect establish open condition. Add
step preconditions secondary preconditions effect open conditions. open condition
becomes completed link.
Reuse step Make open condition complete link effect existing plan step. Add
secondary preconditions effect open conditions.

Figure 4: Resolving open conditions

3. Planning Without Contingencies
section brie review basic planning algorithm Cassandra based.
follows closely used ucpop (Penberthy & Weld, 1992), turn based
snlp (McAllester & Rosenblitt, 1991). principal difference ucpop snlp
use secondary preconditions (see Collins & Pryor, 1992).
Cassandra attempt construct contingency plan encounters
uncertainty. point, constructs plan much manner
planners snlp family. fact, uncertainty ever introduced plan,
Cassandra effectively function ucpop would circumstances.
Planning proceeds alternation two processes: resolving open conditions
protecting unsafe links . processes involves choice methods, may
therefore give rise several alternative ways extend current plan. possible
extensions constructed, best-first search algorithm guides planner's exploration
space partial plans.
initial plan consists two steps: start step, preconditions
initial conditions effects, goal step, goal conditions preconditions
effects. planner attempts modify initial plan complete :
i.e., open conditions unsafe links.

3.1 Resolving Open Conditions
planning process driven need satisfy open conditions, initially
simply input goals. course planning satisfy open condition, new subgoals
may generated; added set open conditions. planner
establish open condition one two ways: introducing new step plan,
reusing existing step making use one effects (see Figure 4). secondary
preconditions effect establishes condition become open conditions. new
step added, preconditions step become open conditions well. Finally,
time open condition established, link added plan protect newly
established condition.
One way establishing condition simply notice condition true
initial state. initial conditions treated results start operator,
always part plan, method treated establishment reusing
existing step; indeed, simplification motivation representing initial
conditions way.
297

fiPryor & Collins
link establishing condition Cond unsafe effect Eff plan (other effect
SourceEff establishes Cond (possible) effect GoalEff either established disabled
link) following properties:
Unification One postconditions Eff possibly unify either Cond negation;
Ordering step produces Eff can, according partial order, occur step
produces GoalEff step produces SourceEff.
unsafe link may resolved one three ways:
Ordering Modify ordering steps plan ensure step producing Eff occurs either
step produces SourceEff step produces GoalEff;
Separation Modify variable bindings plan ensure threatening effect Eff cannot fact
unify threatened condition Cond;
Preservation Introduce new open condition plan disable Eff. new open condition
negation one Eff's secondary preconditions.

Figure 5: Unsafe links

3.2 Protecting Unsafe Links
Whenever open condition established, links plan may jeopardized either
new step threatens existing link, new link threatened
existing step. situations link unsafe shown Figure 5. general,
link considered unsafe effect plan could possibly interfere
condition established link.
three general methods protecting threatened link (see Figure 5). First,
ordering used constrain threatening action occur either beginning
end threatened link. Second, threatening effect threatened
link separated imposing constraints variables involved effect
cannot unified established condition. Third, link preserved
generating new subgoal disable effect threatens link.

4. Contingency Planning
Cassandra proceeds described previous section either plan completed
uncertainty introduced. section describes uncertainties introduced
handled.
example plan involving uncertainty, let us consider version Moore's
classic \bomb toilet" problem (McDermott, 1987), goal bomb
disarmed , initial conditions bomb package1 bomb package2 .
uncertainty case lies initial conditions: depending outcome
uncertainty, start operator either effect bomb package1
effect bomb package2 .

4.1 Contingencies
Uncertainty introduced plan open condition plan achieved
uncertain effect, i.e., effect unknown precondition. bomb-in-the-toilet
298

fiPlanning Contingencies: Decision-based Approach

KEY
Move
package1
Pa
cka
toi ge
let

Start

Link

condition

Link
uncertain
effect

condition

Dunk
package1

Bomb
package1

Bomb
disarmed

End

Figure 6: introduction uncertainty plan
example, instance, Cassandra may achieve condition bomb disarmed selecting
dunk operator, preconditions package toilet , bomb
package . condition bomb package established identifying
bomb package1 , effect start operator. However,
condition uncertain, determined noting unknown precondition.
Cassandra attempt deal uncertainty introducing new contingency (or
new contingencies) plan. state plan introduction
uncertainty illustrated Figure 6.
4.1.1 Introducing Contingencies

Cassandra notices uncertainty current plan becomes dependent upon particular outcome uncertainty use uncertain effect, i.e., effect
unknown precondition specifies outcome uncertainty. plan
Cassandra built point effect plan branch outcome.
Since branches must constructed possible outcomes uncertainty,
Cassandra makes copy overall goal possible outcome uncertainty,
copy carrying label indicating outcome uncertainty must
achieved. thus effectively splits plan set branches, one possible
outcome uncertainty.4
planning otherwise identical goals, Cassandra must make certain
element branch goal one outcome relies different outcome
uncertainty. words, goal, subgoals, may achieved effect
depends, directly indirectly, outcome uncertainty one
goal's label. described above, Cassandra achieves using system negative
labels indicating contingencies particular plan elements must excluded.
4. alternative method would split plan two branches, regardless number outcomes.
case, one branch would associated given outcome uncertainty,
would associated possible outcomes uncertainty. effectively sensp
operates (Etzioni et al., 1992).

299

fiPryor & Collins

Move
package1


Bomb 1
package

Start

KEY

Pa
ckag
toil e1
et

Bomb
packagin
e2
2
age
ack ilet
P
Move

package2

II
Dunk
package1

Bomb
disarm
e

Link

condition

Link
uncertain
effect

condition



End
Dunk
package2

Bomb ed
disarm

III
IV

Element label classes


package1 contingency

II

package1 contingency
package2 contingency

III

package2 contingency
package1 contingency

IV

package2 contingency

Figure 7: contingency plan disarm bomb
bomb-in-the-toilet example, plan made dependent upon uncertain
outcome bomb package1 , new copy top level goal bomb disarmed added
set open conditions. new copy given label indicating belongs
contingency bomb package2 .5 existing top level goal
subgoals labeled indicate belong contingency bomb
package1 . effect bomb package1 , action dunk package1 , effects
action dunk package1 labeled indicate cannot play role
contingency bomb package2 .
Notice action move package1 , although plays role plan contingency bomb package1 , fact depend upon bomb
package1 . could principle made part plan disarming bomb
contingency bomb package2 , prove useful anything.
indicated fact negative label package2 contingency.
Cassandra attempts achieve new open condition bomb disarmed , may
choose dunk operator (notice prohibited using effects
existing dunk operator). new instance dunk operator turn gives rise
subgoal bomb package dunked. achieved
identification effect bomb package2 . plan thus constructed depicted
Figure 7 (the decision-step omitted clarity) listed Section A.2.
4.1.2 Uncertainties Multiple Outcomes

Although algorithm described deal uncertainties number
possible outcomes, far discussed examples two possible outcomes.
fact, two-outcome uncertainties suce describe majority problems
5. Note describing contingency way clarity exposition. actual label
constructed described Section 2.3.1.

300

fiPlanning Contingencies: Decision-based Approach

Package location1
Pickup
package

Drive ?car
location1
Start


ot
Rob tion1
loca

KEY



Link
Link
uncertain
effect

Decide

condition

condition

Alternative
control flow

B

Incomplete
portion
plan

Figure 8: partial plan pick package
considered. Indeed, technically, situation could described terms number
two-outcome uncertainties. However, hard think situations might
naturally represented terms source uncertainty two outcomes.
example, suppose planner interested getting hold particular object
situation object known one three places. case,
start pseudo-operator would naturally represented three uncertain effects
(one possible location object) associated alternative outcomes
single source uncertainty. Cassandra's plan acquiring object would involve
three contingencies, one possible location.
4.1.3 Multiple Sources Uncertainty

plan may involve two sources uncertainty, case plan
one set branches. example, suppose Cassandra given goal picking
package one two locations, one two cars available
use. uncertainty regarding location package encountered first
construction plan, Cassandra respond building plan involving
two contingencies, one location. Call contingencies B (see Figure 8
Section A.3).
point construction plan contingency A, Cassandra
encounter uncertainty concerning car available make current
plan dependent upon one particular outcome uncertainty. Since new source
uncertainty arises context planning contingency A, contingency effect
bifurcated two contingencies: A1 , package location 1 car 1
301

fiPryor & Collins

Package location1
car1 available

Drive car1
location1

Robot
location1

Package location1

Start

car2 available

Drive car2
location1

1
Decide


Robot n1
io

loca

2

Link
uncertain
effect

Decide

Pickup
package

KEY
Link



Pickup
package

condition

condition

Alternative
control flow

B

Incomplete
portion
plan

Figure 9: plan two sources uncertainty
available; A2 , package location 1 car 2 available). Cassandra
must replace existing contingency labels contingency A1 labels. must
introduce new copy top-level goal labeled contingency A2 .
Note Cassandra must plan scratch achieve top-level goal contingency
A2 , spite fact already viable plan goal contingency A1 .
necessary situations may encountered successful plans
involve using different methods achieve goal two contingencies. example,
extreme differences two cars might necessitate different plans driving
(e.g., detailed representation situation presented here,
differences might affect routes cars could driven places
could parked). Cassandra must therefore consider possible ways achieve
goal contingency A2 search completion plan. particular car used
fact affect driving plan, one path search space result
isomorphic contingency plans A1 A2 (see Figure 9 Section A.4).
reasoning applies extension plan deal contingency B .
cannot assumed priori plan contingency B way resemble
plan constructed contingency A. interesting consequence
302

fiPlanning Contingencies: Decision-based Approach
uncertainty concerning availability cars necessarily arise given plan
contingency B . example, location package contingency B close
enough agent could get without using car, final plan might
three contingencies: A1 (location 1 car 1), A2 (location 1 car 2), B (location
2, foot).
Cassandra may, course, produce extension plan car used
contingency B well, case encounter uncertainty associated
location car, proceed bifurcate contingency B done
previously contingency A. limit, plan involve one contingency every
member cross product possible outcomes relevant uncertainties. However,
important note every member cross-product set must appear
contingency, since, shown, uncertainties may arise given particular
outcomes uncertainties.

4.2 Decision-steps

Cassandra encounters new source uncertainty adds decision-step plan
represent act determining path plan followed
execution. following ordering constraints added plan time:


decision-step must occur step uncertainty associated;



decision-step must occur step precondition whose achievement
depends particular outcome uncertainty.

4.2.1 Formulating Decision-rules

decision-step operational, must effective procedure
agent executing plan determine decision make. Cassandra, action
deciding contingency execute modeled evaluation set conditionaction rules form:
condition 1 contingency 1
condition 2 contingency 2
condition 3 contingency 3
...
Cassandra annotates decision-step plan set rules used
make decision. executing agent make decision evaluating
rules comes decision-step course executing plan. order
evaluate decision-rule, executing agent must able determine whether rule's
antecedent holds. preconditions decision-step must thus include goals know
current status condition appears antecedent rule condition.
preconditions decision-step become open conditions plan way
preconditions step.
intended effect evaluating decision-rules choose appropriate contingency given outcome particular uncertainty, conditions diagnostic
particular outcomes uncertainty. executing agent cannot, course, directly
303

fiPryor & Collins
determine outcome uncertainty, must infer presence absence
effects depend upon outcome.
straightforward approach constructing antecedent conditions
decision-rule would analyze plan operators identify effects could
expected result given outcome uncertainty, make condition
conjunction effects. However, turns overkill. fact,
necessary check effects given outcome uncertainty actually
used establish preconditions contingency associated outcome .
words, necessary verify contingency plan can, fact, succeed.
interesting consequence executing agent might, principle, end selecting
contingency plan even though outcome uncertainty one
plan associated. Notice would cause problem execution
plan, since would occur conditions plan's success met.
fact, shall see, Cassandra depends effect certain circumstances.
antecedent condition decision-rule thus conjunction direct effects
particular outcome used establish preconditions contingency plan
outcome. Decision-rules constructed incrementally plan elaborated.
discuss Cassandra's construction rules detail Section 4.2.3 below.
approach used formulating Cassandra's decision-rules consistent
Morgenstern's observation agent execute plan \make sure"
events plan executable (Morgenstern, 1987).
4.2.2 Adding Decision-rule Example

bomb-in-the-toilet example, Cassandra introduce decision-step determine
whether bomb package1 . uncertainty initial conditions,
decision constrained occur start step. must occur
either dunk actions, since depend upon particular outcomes uncertainty.
decide step precondition know whether bomb package1 .
actions available would allow determine this|X-raying box,
example|Cassandra achieve precondition one actions, decide
basis branch plan execute.
4.2.3 Cassandra Constructs Decision-rules

point planning process Cassandra constructs decision-rule,
one precondition plan known depend upon particular outcome uncertainty gave rise decision: namely, one led Cassandra discovering
uncertainty first place. decision-rule set Cassandra initially builds thus
looks this:
effect 1 contingency 1

contingency 2

contingency 3
...
construction plan, Cassandra must modify initial rule set time
effect depending directly source uncertainty used establish open condition
304

fiPlanning Contingencies: Decision-based Approach

Action:

(toss-coin ?coin)

Preconditions:

(holding ?agent ?coin)

Effects:

(:when (:unknown ?U H)
:effect (:and (flat ?coin)
(heads ?coin)))
(:when (:unknown ?U T)
:effect (:and (flat ?coin)
(tails ?coin)))
(:when (:unknown ?U E)
:effect (on-edge ?coin)))

uncertain effect
uncertain effect
uncertain effect

Figure 10: Representing action tossing coin
plan. particular, Cassandra must determine contingency open
condition resides, conjoin effect existing antecedent decision-rule
contingency.
Consider, example, happens coin tossed. might say theory
three possible outcomes action: coin land heads up;
tails up; edge (Figure 10). Suppose Cassandra given goal
coin at. established using at-heads effect tossing it. Since
uncertain effect, Cassandra introduces two new contingencies plan, one
outcome coin lands tails up, another outcome lands
edge.
introduction contingencies mandates introduction decision-step
whose initial rule set looks this:6
(flat coin) [U1: H] rule heads

[U1: T] rule tails

[U1: E] rule edge
time, new open condition (know-if (flat coin)) introduced precondition decision-step, new goal conditions introduced must achieved
contingencies [U1: T] [U1: E]. Cassandra next establishes goal condition contingency [U1: T] using at-tails effect toss step. decision-rules associated
tails contingency thus modified follows:
(flat coin) [U1: H] rule heads
(flat coin) [U1: T] rule tails

[U1: E] rule edge
Finally, goal condition established contingency [U1:E] introducing new
step, tip, plan. precondition tip step coin edge,
established on-edge effect toss action. Since effect depends directly
6. Assuming ?U, variable representing source uncertainty, instantiated U1.

305

fiPryor & Collins
upon uncertainty U1, decision-rule edge contingency modified include
condition:
(flat coin)
[U1: H] rule heads
(flat coin)
[U1: T] rule tails
(on-edge coin) [U1: E] rule edge
Since plan complete, final set decision-rules (see Section A.5). Notice
rules discriminate heads-up outcome tails-up outcome.
fact, either outcome do, reason make discrimination. plan
executed either conditions depends solely upon order agent
executing plan chooses evaluate decision-rules.7
somewhat complex problem arises give Cassandra goal
coin flat heads-up. case effects established using toss
action. lead introduction two new contingencies plan, one
coin lands tails up, one lands edge. Although Cassandra
could establish (flat coin) tails-up case, would fail complete plan,
coin would heads-up. However, turn-over action used,
leaving coin flat heads-up given flat tails-up begin with.
point decision-rules follows:
(and (flat coin) (heads-up coin)) [U1: H] rule heads
(and (flat coin) (tails-up coin)) [U1: T] rule tails

[U1: E] rule edge
Cassandra must plan goal outcome coin lands
edge. effects established result tip action. However,
result heads-up uncertain effect tip action, since coin might easily
land tails up. Cassandra must therefore add another new contingency coin
lands tails tipped. instance, goal established using
turn-over action, tails-up precondition action established
uncertain result tip action. final decision-rule set first decision
follows:
(and (flat coin) (heads-up coin)) [U1: H] rule heads
(and (flat coin) (tails-up coin)) [U1: T] rule tails
(on-edge coin)
[U1: E] rule edge
on-edge contingency pursued, another decision, stemming uncertain
result tip, must added plan. name second source uncertainty U2,
rules decision are:
(heads-up coin) [U2: H]
(tails-up coin) [U2: T]
plan depicted Figure 11 shown Section A.6.
7. obvious extension Cassandra would construction post-processor spots decision-rules
discriminate particular sets outcomes, prunes plan remove super uous
contingencies. Note cannot determined plan complete whether condition
pertains.

306

fiPlanning Contingencies: Decision-based Approach

flat
heads
flat
tails

heads

Decide

flat



Tip
coin

Decide

KEY

tails

condition

Link uncertain effect

ad

edge

Link

End

heads



Toss
coin

Turn coin


Turn coin


condition

flat

Alternative control flow
Incomplete portion plan

Figure 11: plan two decisions
Kick door

lock broken

Open
door





op

Link

Decide

condition

End

Start

lock

KEY

en

inta

ct



Pick
lock

n
pe

Alternative
control flow





door
unlocked

Open
door

Figure 12: Opening door
4.2.4 Decision-rules Unsafe Links

fact Cassandra allows decision-rules fully differentiate outcomes uncertainty raises somewhat subtle issue. Consider partial plan
opening locked door shown Figure 12. action kicking door has, let us say,
two possible outcomes, one lock broken one agent's foot
broken. plan contingency lock broken simply open door.
plan alternative contingency pick lock open door.
Since second plan depend causally outcome uncertainty (the
agent's foot broken order pick lock open door),
decision-rules based discussion would be:
307

fiPryor & Collins



(lock-broken)





[O: L]
[O: F]

rule lock broken
rule foot broken

Notice case pick action depends lock intact,
action may effect lock longer intact. words, kick
action potentially clobbers precondition pick. However, planner arguably
ignore clobbering, two actions belong different contingencies.
valid, though, structure decision-rules guarantees agent
choose execute contingency involving pick outcome kick
lock broken. decision-rules clearly enforce this. solution
case augment decision-rule contingency lock broken
test whether lock fact intact. results following decision-rules (the plan
shown Section A.7):
kick




(lock-broken)
(not (lock-broken))




[O: L]
[O: F]

rule lock broken
rule foot broken

Cassandra augments decision-rules way whenever direct effect uncertainty
could clobber link different contingency.

5. Contingency Planning Algorithm
section give details Cassandra's algorithm. properties considered
Section 6.

5.1 Plan Elements

plan consists steps, effects, links (some may unsafe), open conditions,
variable bindings, partial ordering, contingency labels. plan complete
open conditions unsafe links.
5.1.1 Steps Effects

plan step Step represents action. may enabling preconditions. least
one effect Eff. instantiation operator.
plan step may decision-step Decide. decision-step enabling preconditions
form (know-if Cond) condition Cond. Decide set decision-rules.
effect Eff represents results action. attached step Step, representing action. may secondary preconditions. least one postcondition
Cond, condition becomes true result executing Step secondary
preconditions hold.
5.1.2 Links Open Conditions

link represents causal dependency plan, specifying condition Cond established effect Eff, Cond postcondition. Eff secondary preconditions
SecPre result step Step. link supports step SupStep effect SupEff
condition Cond one of:
308

fiPlanning Contingencies: Decision-based Approach
enabling precondition SupStep;
secondary precondition effect SupEff result SupStep;
negation secondary precondition effect result SupStep, thus
preserving link.
link unsafe contingency Conting required effect
ClobberEff postcondition ClobberCond (the clobbering condition) resulting step
ClobberStep that:
Either ClobberCond unify Cond;
Cond form (know-if KnowCond) ClobberCond unify KnowCond;
Step ClobberStep occur steps Step SupStep;
Effect ClobberEff occur contingency Conting.
open condition (an unachieved subgoal) represented Cassandra incomplete
link, i.e., link missing information effect establishes it.


5.1.3 Bindings Orderings

Plan bindings (codesignation constraints) specify relationships variables
constants. following relationships possible:
Two variables may codesignate;
variable may designate constant;
variable may constrained designate constant;
Two variables may constrained codesignate.
ordering constrains order two steps respect other, step
S1 must precede step S2 (S1 < S2).
5.1.4 Contingency Labels

Every step, effect open condition partial plan two sets contingency labels
attached it. interests brevity, refer labels link; case,
mean labels step effect link establishes.
contingency label two parts: symbol representing source uncertainty,
symbol representing possible outcome source uncertainty. Positive contingency labels denote circumstances plan element must necessarily
occur; negative contingency labels denote circumstances plan element cannot
must occur.
Contingency labels must propagated plan. general, positive contingency labels propagated goals effects establish them, negative
contingency labels propagated steps effects result them.
details follows:
309

fiPryor & Collins
Plan (PartList)

1. Choose partial plan Plan PartList;
2. Plan complete, finish;
3. unsafe link Unsafe:
resolve (Plan, Unsafe) add resulting plans PartList;
Return step 1;
4. open condition Open:
establish (Plan, Open) add resulting plans PartList;
Return step 1.

Figure 13: Top level planning algorithm


step inherits positive labels effects result it;



step inherits negative labels effects establish enabling preconditions;



effect inherits positive labels steps whose enabling preconditions
establishes;



effect inherits positive labels effects whose secondary preconditions
establishes;



effect inherits negative labels step results;



effect inherits negative labels effects establish secondary preconditions;



open condition inherits positive labels step effect required
establish.

Cassandra's system label propagation based cnlp complex.
Indeed, rather complex would like. complexity mandated
need deal operators involve multiple context-dependent effects,
result step effects necessarily share labels.

5.2 Algorithm

planning process starts constructing partial plan consisting two steps:


initial step preconditions initial conditions effects;



goal step effects goal conditions enabling preconditions.

plan added (initially empty) list partial plans PartList. Planning
proceeds shown Figure 13.
remains describe threats unsafe links resolved open
conditions established.
310

fiPlanning Contingencies: Decision-based Approach
Resolve (Plan, Unsafe)

1. Initialize list NewPlans;
2. unification clobbering condition ClobberCond condition Cond established link
Unsafe involves adding codesignation constraints bindings Plan:
Make possible modification bindings Plan ensures ClobberCond cannot
unify Cond;
Add resulting partial plan NewPlans;
3. clobbering step ClobberStep precede step Step establishes Unsafe:
Add ordering ensure ClobberStep precedes Step;
Add resulting partial plan NewPlans;
4. step SupStep supported Unsafe precede ClobberStep:
Add ordering ensure SupStep precedes ClobberStep;
Add resulting partial plan NewPlans;
5. Prevent clobbering effect ClobberEff occurring contingency Conting link
Unsafe unsafe:
one of:
(a) Add negation secondary preconditions ClobberEff open condition
positive contingency label Conting;
(b) Add Conting negative contingency labels ClobberStep;
(c) Add Conting negative contingency labels effect SupEff step SupStep
Unsafe supports;
appropriate modify relevant decision-rule discussed Section 4.2.4;
Add orderings ensure step ClobberStep occurs steps Step SupStep;
Propagate labels appropriate;
Add resulting partial plan NewPlans;
6. Return NewPlans.

Figure 14: Resolving threats
5.2.1 Resolving Threats Unsafe Links

Figure 14 shows threats resolved. methods shown steps 2, 3, 4
standard methods found snlp ucpop; often termed separation, demotion,
promotion respectively. say methods step 5 disable threat.
methods steps 5a 5b ensure threatening effect occur given
contingency. method step 5a modification standard method found ucpop
planners use secondary preconditions. Essentially, idea prevent
effect occurring ensuring context occurs cannot hold.
method 5b prevents effect occurring contingency forbidding execution
step produces it. method step 5c notes established step effect
cannot occur given contingency. techniques result inconsistent labeling
plan element (so that, example, cannot occur every contingency
required) resulting partial plan abandoned, represents dead end
search space.
311

fiPryor & Collins
5.2.2 Establishing Open Conditions

Figure 15 shows procedure used. Procedure EstablishPre shows methods adding
new step reusing existing step; essentially methods used ucpop
extended ect need check propagate contingency labels.
Procedure EstablishUnk shows methods adding new decision reusing existing
decision specific Cassandra. issues involved discussed Section 4.2.

6. Issues Contingency Planning

Cassandra partial order planner directly descended ucpop, sound, complete, systematic|all plans produced ucpop guaranteed achieve goals,
plan ucpop find it, ucpop never revisits partial plan.
section discuss properties related issues context contingency planning.

6.1 Soundness

Ucpop's soundness depends perfect knowledge assumptions discussed Section 1.
particular, ucpop's plans sound initial conditions fully specified,

possible effects actions specified operators represent them.
uncertainties involved plan, Cassandra equivalent ucpop therefore
constructs sound plans.
uncertainties involved plan, longer assumed initial
conditions effects actions fully specified. Indeed, uncertainties arise
assumptions violated. However, assumptions adapted account
presence uncertainty: would possible, example, insist possible
initial conditions action effects specified. Cassandra's representation, means
every source uncertainty must specified use unknown secondary
preconditions, every possible outcome source uncertainty must specified.
conjecture Cassandra sound conditions. proof would follow
procedure adding new goals whenever new source uncertainty
encountered ensures every goal achieved every possible outcome uncertainty.

6.2 Completeness

conjecture Cassandra complete limited sense that, sound plan
form construct, Cassandra find it. believe simple
extension ucpop's completeness. uncertainties involved, Cassandra
always find plan way ucpop. introduction source uncertainty
plan leads addition new contingent goals. Cassandra find plan
new goals appropriate contingency. Thus, goal indeed
achieved every contingency, Cassandra find plan achieves it, long
way determining contingency holds.
example, plan disarm bomb described Section 4.1 relies
method determining package bomb in. McDermott's presentation
example, two packages indistinguishable, point example
illustrate nonetheless plan succeed disarming bomb, namely,
312

fiPlanning Contingencies: Decision-based Approach
Establish (Plan, Open)

1. open condition type :unknown EstablishPre (Plan, Open) return resulting list
plans;
2. open condition type :unknown source uncertainty Uncertainty outcome Outcome
EstablishUnk (Plan, Open, Uncertainty, Outcome) return resulting list plans.

EstablishPre (Plan, Open)

1. Initialize list NewPlans;
2. effect Eff resulting step Step Plan
Eff occur every contingency Open must established
Eff precede step SupStep Open required support
postcondition EffCond Eff unify condition Cond Open required
establish:
Complete link Open using Eff establishing effect;
Add resulting partial plan NewPlans;
3. operator effect Eff postcondition EffCond unify Cond:
Instantiate new step Step;
Complete link Open using Eff establishing effect;
Add enabling preconditions Step open conditions;
Add resulting partial plan NewPlans;
4. plan NewPlans:
Add ordering ensure Step precedes SupStep;
Add bindings necessary ensure EffCond unifies Cond;
Add secondary preconditions SecPre Eff open conditions;
Propagate labels appropriate;
5. Return NewPlans.

EstablishUnk (Plan, Open, Uncertainty,

Outcome)
1. Initialize list NewCPlans;
2. Uncertainty new source uncertainty plan:
Add new decision-step DecStep uncertainty Uncertainty;
Add new top-level goals open conditions appropriate labels;
Add resulting partial plan NewCPlans;
3. Uncertainty existing source uncertainty plan:
Find existing decision-step DecStep uncertainty Uncertainty;
Add resulting partial plan NewCPlans;
4. plan NewCPlans:
Modify decision-rule DecStep Outcome include Cond antecedent;
Add (know-if Cond) open condition required establish DecStep;
Add orderings ensure DecStep precedes SupStep;
Propagate labels appropriate;
5. Return NewCPlans.

Figure 15: Establishing open conditions
313

fiPryor & Collins
dunking packages (McDermott, 1987). algorithm described previous section
cannot find plan situation impossible achieve preconditions
decision-step determines package dunk. Section 6.5.5 discuss
example detail describe simple extension Cassandra allows correct
plan (to dunk packages) found.
Ucpop's completeness, soundness, depends perfect knowledge assumptions discussed Section 1. Cassandra's completeness depends three extensions
assumptions:


sources uncertainty specified;



specified outcomes exhaustive;



actions available allow determination outcome uncertainty, even indirectly.

Unfortunately, conditions necessary sucient. Cassandra
find plans actions uses determine contingency interfere
achievement goal. instance, might dropping action available
would detonate bomb inside package dropped. certainly action
allows determination outcome uncertainty, sound plan
makes use it.
order useful notion Cassandra's completeness, must therefore specify form plans construct. problem common proving
completeness planner: example, claim snlp, say, incomplete
cannot find plan bomb-in-the-toilet problem. say instead
valid plan form construct. fairly simple specify form
plans snlp construct: consist partially ordered sequences steps,
executed. introduction contingencies makes description
Cassandra's plans rather complex; yet formalize description,
actively working direction. Informally, Cassandra construct plans
every source uncertainty include step decide one relevant plan branches.
extension Cassandra solves bomb-in-the-toilet problem
construct plans meet criterion.

6.3 Systematicity

Ucpop systematic: never visit partial plan twice searching. Cas-

sandra, described paper, systematic; may visit partial plans
search space once. Consider plan disarm bomb discussed
Section 4.1. plan, two different ways establishing goal disarm
bomb: dunking package1 , dunking package2 . Cassandra initially choose
either way establishing goal, leading case introduction contingency
necessity replanning achieve goal contingency. search
paths arrive final plan, search systematic.
Cassandra could made systematic insisting handling contingencies
certain order, search path uses order treated dead end.
314

fiPlanning Contingencies: Decision-based Approach
However, extension added currently debate
desirability systematicity. example, Langley (1992) argues non-systematic
search method, iterative sampling, often better systematic method, depth-first
search, problems multiple solutions deep solution paths. Peot
Smith (1992) observe performance non-systematic version snlp better
original systematic version. ascribed behavior fact
exploring duplicate plans consumed less overhead ensuring systematicity.

6.4 Knowledge Goals
agent executing contingency plans must able acquire information actual
state world determine possible courses action pursue.
system constructs contingency plans must able plan information
acquisition: general, acquisition process may arbitrarily complex (Pryor & Collins,
1991).
early uential discussion goals possess knowledge world
McCarthy Hayes (1969). Since then, various theories developed
account (e.g., Moore, 1985; Haas, 1986; Morgenstern, 1987; Steel, 1995).
common thread work knowledge goals arise need specify
actions performed; words, need make actions operational . Work area whole concentrated able describe
represent knowledge goals, largely ignored issues involved building planners
construct plans containing them.
structure Cassandra based notion knowledge goals arise
need make decisions actions performed (Pryor, 1995). view,
planning process deciding advance done (Collins,
1987). world conforming perfect knowledge assumptions classical planning
always possible world totally predictable, plans therefore need
contain knowledge goals. However, assumptions relaxed may
possible make decisions advance information necessary make
available planner. information may unavailable either planner's
limited knowledge world events nondeterministically cause
conditions affect decisions yet occurred. cases may
possible planner determine decision must made even though cannot
time actually make it. case planner defer decision: plan make
future, necessary information available. Part plan
acquire information; plan thus contains knowledge goals.
Cassandra's use \unknown" preconditions indicate nondeterminism thus crucial
part mechanism. Cassandra, knowledge goals arise result deferring decisions. deferred decisions represented explicitly plans, arise
directly incompleteness Cassandra's knowledge world, whether
effects nondeterministic actions incompletely specified initial conditions.
forms uncertainty handled way: Cassandra recognized need defer decision, reason deferral important except
inasmuch results incomplete knowledge world.
315

fiPryor & Collins
view knowledge goals arising deferred decisions basically consistent
view needed order make actions operational, differs
traditional view knowledge goals directly preconditions physical actions,
instead preconditions actions make decisions. example, McCarthy
Hayes consider problem combination safe: commonly held action
opening safe precondition know combination. Cassandra, however,
goal knowing combination would arise subgoal deciding plan branch
follow, would branch possible combination.8 branches would
arise Cassandra's incomplete knowledge world: initial conditions
plan executed fully specified.
Cassandra uses variant syntactic approach proposed Haas (1986) represent
knowledge goals, limiting knowledge goals form know-if(fact). turns
adequate if, assume, possible outcomes given uncertainty known.
general, representation used Cassandra, based strips representation add
delete lists, less powerful logics proposed either Morgenstern Haas.

6.5 Miscellaneous Issues Contingency Planning
Cassandra's approach raises number questions concerning desired behavior
contingency planner, many obvious answers. section brie
consider issues raised.
6.5.1 Dependence Outcomes Superfluous Contingencies

fact contingency plan assumes particular outcome uncertainty means
cannot depend upon different outcome uncertainty. Cassandra
enforce constraint plan must causally depend upon outcome assumes.
instance, example described Section 2.3.2, plan take Ashland
actually depend Western blocked; could executed successfully regardless
level trac Western.
observation raises interesting question: plan contingency turns
depend outcome uncertainty gave rise it, would
obviate need plans alternative contingencies? instance, example,
might seem sensible execute plan use Ashland regardless whether Western
blocked. might thus seem planner edit plan way
eliminate apparently super uous contingencies. However, easily shown
version plan involve dependence outcome uncertainty
generated elsewhere search space. example, would mean
planner would fact consider plan simply involved taking Ashland. search
heuristics penalize plans involving contingencies appropriately plan
preferred contingency plan, things equal.
8. raises obvious question whether planning advance every possibility sensible
thing do. See Section 7.4 discussion issue.

316

fiPlanning Contingencies: Decision-based Approach
6.5.2 One-sided Contingencies

preceding discussion notwithstanding, plan involving contingencies always
superior plan involving contingency. planner might fact construct
plan Western/Ashland one. take clear-cut example, suppose Pat needs
$50 bet horse. might try borrow $50 Chris, outcome
action uncertain|Chris might refuse. Alternatively, could rob convenience store.
robbery plan would (we shall stipulate) involve uncertainties, bad plan
reasons. would better first try borrow $50 Chris, then,
fails, rob convenience store. Cassandra could generate plan. order make
prefer plan contingency-free alternative, however, search metric would
take account estimated costs various actions, perform something akin
expected value computation. (See, example, Feldman & Sproull, 1977; Haddawy &
Hanks, 1992, discussions decision-theoretic measures applied planning.) order
execute plan properly, would necessary way knowing
borrowing plan preferred robbery plan possible execute
either them.
6.5.3 Identical Branches

possible single plan could work well several different outcomes
uncertainty. instance, suppose action asking Chris $50 three possible
outcomes: either Pat gets money Chris happy (at opportunity
favor); Pat gets money Chris unhappy (at obliged
favor); Pat get money all. Pat constructs plan tries
borrow $50 Chris bet horse, then, assuming plan depend
upon Chris's happiness (which might, example, Pat needed get ride track
Chris), plan work either \get money + Chris happy" outcome
\get money + Chris unhappy" outcome.
Cassandra could find plan, would effect find twice|once
outcome uncertainty|and would still require decision-step discriminate
outcomes. inecient two ways: extra search time required
find essentially plan twice wasted, effort put making
unnecessary decision. looking ways avoid former problem. latter
could solved post-processor would \merge" identical contingency plans,
implemented technique.
6.5.4 Branch Merging

possible construct plan branches split reunite. instance,
consider Western/Ashland plan again. context goal get
Evanston arises might obligation deliver toast dinner held
Evanston restaurant. contingency due uncertainty trac Western Avenue
would case seem affect portion plan concerned getting
Evanston; probably little bearing wording toast, choice wine,
on. natural way frame plan might thus assume regardless
317

fiPryor & Collins
contingency carried out, planner eventually arrive certain location
Evanston, point single plan developed achieve final goal.
Constructing plan way would result compact plan description,
might thus reduce effort needed construct plan avoiding, example,
construction multiple copies subplan. considering methods
branch re-merging might achieved, methods considered far seem
complicate planning process considerably.
6.5.5 Fail-safe Planning

discussed Section 6.2, Cassandra's operation relies able determine,
even indirectly, outcome uncertainty. However, may always
possible, necessary precondition existence viable plan.
bomb-in-the-toilet problem, example, valid plan Cassandra cannot find:
dunk packages.
suggests method constructing plans face uncertainty
outcome uncertainty cannot determined|what one might call fail-safe plans.
Whenever uncertainty arises principle possible might non-contingent
plan would achieve goal whatever outcome uncertainty. find
plan, planner must construct version contingency plan actions
contingency branches arising uncertainty executed unconditionally.
Cassandra extended way, adding new type decision, one
execute branches parallel (Collins & Pryor, 1995). plan containing
decision sound none actions must performed achieve goal
one contingency interfere actions must performed
contingency, ability perform actions independent outcome
uncertainty. conditions clearly hold bomb-in-the-toilet problem.
Cassandra reason possibility labeling scheme distinguishes
actions must performed given contingency need
performed. possible execute branches actions branch may
performed (but need not) branches.
parallel decision added plan extended version Cassandra, new
goals added usual way labeling handled differently. branches
separated, Cassandra longer reason causal links one branch
affected actions another branch.
6.5.6 Contingent Failure

Cassandra produce plan possible achieve goal plan
possible contingencies. Often, however, goal cannot fact achieved outcome
underlying uncertainty. Consider, instance, Peot Smith's example trying
get ski resort car, road leading resort either clear blocked
snowdrifts (Peot & Smith, 1992). road clear, goal achieved,
blocked, plans doomed failure.
planner expected recognize impossibility achieving goal
general case (Chapman, 1987). However, possible approach suggested Peot
318

fiPlanning Contingencies: Decision-based Approach
Smith. could introduce alternative method resolving open goal conditions: simply
assume goal question fails.
undesirable method resolving open goal conditions subgoal fact
achievable, theory plans involving contingent failure considered
planner failed find plan goals achieved. sometimes
possible, general problem determining whether successful plan
undecidable. may always partial plans involve goal failure
cannot completed. example, partial plan modified may become
complex, resolution open condition involving introduction
unachieved subgoals. case, plans involving contingent failure never considered
unless ranked plans involve contingent failure. order
generally useful, approach must weakened: instead considering goal failure
avenues attack failed, apply high fixed penalty plans involving
failed goals. aim would fix penalty high enough contingent failure would
apply genuine cases goals unachievable. However, would necessity
heuristic approach completeness would lost.

7. Related Work
Cassandra constructed using ucpop (Penberthy & Weld, 1992) platform. Ucpop
partial order planner handles actions context-dependent effects universally quantified preconditions effects. Ucpop extension snlp (Barrett et al.,
1991; McAllester & Rosenblitt, 1991) uses subset Pednault's adl representation
(Pednault, 1989).
early contingency planner Warren's warplan-c (1976). Contingency planning
less abandoned mid seventies early nineties,9 sensp
(Etzioni et al., 1992) cnlp (Peot & Smith, 1992). sensp cnlp members
snlp family: sensp is, Cassandra, based ucpop, cnlp based directly
snlp. C-buridan (Draper et al., 1994a; Draper, Hanks, & Weld, 1994b), probabilistic
contingency planner, based probabilistic planner buridan (Kushmerick, Hanks,
& Weld, 1995) (which based snlp) cnlp. Plinth (Goldman & Boddy,
1994a, 1994b) total-order planner based McDermott's Pedestal (1991),
strongly uenced cnlp treatment contingency plans.
Warplan-c, unlike planners considered here, use strips-based
action representation, based predicate calculus. could handle actions
two possible outcomes, merge resulting plan branches.
Sensp differs planners considered here. represents uncertainty
use run-time variables, distinguished ordinary variables treated
constants whose values yet known. sensp plan branches arise
introduction information-gathering steps bind run-time variables. Sensp handles
plan branching constructing separate plans achieve goal particular
contingency. combines separate plans later stage, keeping branches
totally separate. Sensp thus considers contingency branches separately, rather
9. Neither noah (Sacerdoti, 1977) Interplan (Tate, 1975) explicitly addressed issues uncertainty,
although tackled problems involving (Collins & Pryor, 1995).

319

fiPryor & Collins
parallel. Actions achieve knowledge goals may preconditions sensp:
restriction required order maintain completeness.
surprisingly, Cassandra, cnlp, c-buridan, lesser extent Plinth,
many respects similar. except Plinth use basic snlp algorithm, use
extended strips representations. Cassandra differs cnlp Plinth principally
way uncertainty represented (Section 7.1); difference important implications handling knowledge goals (Section 7.2). principal difference
Cassandra c-buridan lies latter's use probabilities (Section 7.3).
Contingency planning one approach problem planning uncertainty. aim contingency planning construct single plan succeed
circumstances: essentially extension classical planning.
approaches planning uncertainty share aim: probabilistic planners
aim construct plans high probability succeeding (Section 7.3); systems
interleave planning execution attempt plan fully advance (Section 7.4).
approaches possible address problem determining contingencies planned for, currently possible Cassandra. third
approach reactive planning, behavior controlled set reaction
rules (Section 7.5).

7.1 Representation Uncertainty
cnlp Plinth, uncertainty represented combination uncertain outcomes nondeterministic actions effects observing outcomes. threevalued logic used: postcondition action may true , false , unknown .
example, action tossing coin might postcondition unk(side-up ?x). Special conditional actions , unknown precondition several mutually
exclusive sets postconditions, used observe results nondeterministic actions. example, operator observe results tossing coin might
precondition unk(side-up ?x) three possible outcomes: (side-up heads),
(side-up tails), (side-up edge).
Cnlp thus spreads representation uncertainty action whose execution produces uncertainty action observes result. consequence
cnlp cannot use observation action observe results different
actions. example, would require different actions observe results tossing
coin (which three possible outcomes) tipping coin landed edge
(which two possible outcomes).
Plinth, notion conditional action extended cover action (not
observation actions) nondeterministic effects planner's world model .
example, image-processing domain operator remove noise image may
may succeed. However, outcome evident soon applied,
special observation action required.
cnlp Plinth, information-gathering actions included plan whenever
action uncertain effects occurs. necessary uncertainty actually
represented information-gathering action rather action actually
320

fiPlanning Contingencies: Decision-based Approach
produces uncertainty. Knowledge goals thus represented explicitly two
systems.
representation used cnlp Plinth arises desire use \single
model world, representing planner's state knowledge, rather
complex formalization including epistemic ground formulas" (Goldman & Boddy,
1994b). operator therefore represents effects execution underlying action planner's knowledge world, effects
actual state world. is, course, important represent actions affect
planner's world model, believe important represent affect
world. all, purpose reasoning actions achieve goals world,
planner's world model. particular, execution nondeterministic action actual effects, although may indeed unknown planner,
occurred cannot altered. Cassandra's representation ects this: indeed, Cassandra reason possible effects without scheduling observation actions.
means extension Cassandra can, example, solve original bomb-in-thetoilet problem, possible actions resolve uncertainty
package contains bomb: bomb's state represented planner's
world model stage beginning, known armed,
end, packages dunked known safe.
implication method representing uncertainty diculty
representing actions whose uncertain effects cannot determined execution
single action. Consider, example, malfunctioning soda machine one
indicator lights cannot make change, another lights run
product requested. Suppoe that, functioning correctly, two
indicators light simultaneously. malfunctions, must kicked make
work. Observing either light enough determine uncertain effect
(working properly malfunctioning) occurred.

7.2 Knowledge Goals
method representing uncertainty cnlp Plinth important implications
knowledge goals handled plans.
acquisition information planning task (Pryor & Collins, 1991,
1992; Pryor, 1994). general, sequence actions required achieve given knowledge
goal may arbitrarily complex. example, action observe tossed coin might
require observer appropriate location; cases, might
several different possible methods information gathering, involving perception,
involving reasoning, combination. contingency planner, whose plans
necessarily involve achievement knowledge goals, must therefore able plan
fully generally information gathering.
confusion source uncertainty observation uncertain results
limits ways knowledge goals achieved cnlp Plinth: must
achieved special observation actions specify uncertain outcomes.
result representation terms planner's world model, means
represent effects actions (except ag unknown)
321

fiPryor & Collins
planner observed (or otherwise incorporated world model).
discussion issue Goldman Boddy (1994b) explicitly exclude knowledge
goals consideration. point out, planning uncertainty requires
distinction made actual state world planner's knowledge
it. order plan effectively knowledge goals, must represented.
done Cassandra separating representation uncertainty representation
information-gathering. effect results deterministically action, Cassandra
reasons need observe it, forms part world model.
uncertain effect, hand, incorporated unconditionally Cassandra's
world model; noted possibly true, (if necessary) Cassandra sets
subgoal determine whether indeed true.
Sensp, uses uwl representation goals actions, three different
kinds precondition used represent information goals either alone
combination (Etzioni et al., 1992). well satisfy preconditions, may achieved
actions observation, uwl hands-off preconditions indicating
value propositions must changed order achieve subgoal, find-out
preconditions. latter ways similar preconditions know-if propositions
Cassandra. precondition (find-out (P . v)) tells planner ascertain
whether P truth value v. certain circumstances type precondition
may achieved action changes value P. Knowledge goals may thus
represented find-out preconditions satisfy preconditions (often used conjunction
hands-off preconditions). Etzioni et al. argue knowledge goals
achieved actions change value proposition question
change required another purpose plan. believe unnecessary
limitation, circumstances enforcement actions may best way
achieving knowledge goals.

7.3 Probabilistic Decision-theoretic Planning
constructing plans, Cassandra recognizes presence uncertainty
extent. planners specifically address issues probability: example, buridan
constructs plans whose probability achieving goal given threshold (Kushmerick et al., 1995); Drips uses utility different possible outcome various
plans choose one highest expected utility (Haddawy & Suwandi, 1994).
Neither buridan drips constructs contingency plans, i.e., plans involve alternative courses action performed different circumstances. C-buridan, based
buridan, constructs contingency plans likely succeed (Draper et al., 1994b,
1994a). represents extension cnlp direction decision-theoretic planning.
Probabilistic planners use information probabilities possible uncertain
outcomes construct plans likely succeed. Cassandra, hand, cannot
use information constructs plans guaranteed succeed. Probabilistic
planning, relies explicit probabilities, less powerful
deterministic contingency planning performed Cassandra. Cassandra cannot use
information probabilities construct plans circumstances
information available. example, order solve bomb-in-the-toilet problem,
322

fiPlanning Contingencies: Decision-based Approach
c-buridan would information, least make assumption,

probabilities bomb package. Whatever assumptions made might
turn wrong, thus invalidating basis plan.
believe would possible build probabilistic planner using ideas
c-buridan Cassandra. explicit representation decisions Cassandra,
planner would provide excellent opportunity investigating use different
decision procedures. C-buridan relies full knowledge probabilities
time constructs plans. knowledge, other, may available
plan executed. would relatively simple add decision procedures
Cassandra's decision representation depend information probabilities, e.g.,
follow particular course action probability given outcome exceeds
certain value. introduction decision procedures might, course, result
introduction knowledge goals determine probabilities, possibly leading eventually
system would construct plans perform empirical studies determine probabilities.
problem associated contingency planning branch merging, i.e.,
determination whether two steps separate branches treated step.
C-buridan performs full merging: effect probabilistic algorithm
based. Adding capability Cassandra area future work. major
problem encountered considering branch merging identify variables
different branches other: c-buridan's representations include variables,
problem arise. may cause diculties adaptation c-buridan's
merging mechanism Cassandra's use.
advantage combining probabilistic planning contingency planning resulting ability judge whether worth planning given contingency. One
limitations Cassandra present form requirement every possible contingency planned for. complex situations makes resulting plans cumbersome.
Moreover, Cassandra's performance deteriorates number distinct branches
plan. cost determining presence particular branch would significantly change probability plan's success might well much less cost
constructing branch. interesting issue considered future.

7.4 Interleaving Planning Execution

Although Cassandra's plans may include sensing actions, course action
actually executed depending results actions, Cassandra
interleave planning execution. Plans fully specified executed.
circumstances clearly inecient. Consider, example, Cassandra
constructs plan open combination safe (see Section 6.4). requires prior knowledge
possible combinations, constructs plan branch combination.
obvious alternative would construct plan fully specified
information-gathering step, execute plan stage and, information
gathered, construct rest plan.10 could done Cassandra
introducing another type decision procedure, planning achieve goal,
assuming would always possible find plan achieve goal. strong
10. See Section 8.2 discussion issue alternative approach.

323

fiPryor & Collins
assumption, would certainly valid cases problem opening safe.
area future work. Interleaving planning execution way would
advantage would necessary plan contingencies actually
arise. would however lose advantages planning advance. example,
possible interference actions performed information gathering
might missed, leading planner find suboptimal plans. Indeed, sensing actions
may general change world, executing full construction viable plan
might unfortunate result making achievement goal impossible.
Planners interleave planning execution include ipem (Ambros-Ingerson & Steel,
1988), xii (Golden, Etzioni, & Weld, 1994) Sage (Knoblock, 1995). three use
basic interleaving technique: planning possible steps
executed. thus set decide advance exactly planning
necessary, plans include explicit provision planning.
effects different interleaving strategies investigated design bump (Olawsky
& Gini, 1990). Continue Elsewhere strategy much preplanning possible
performed; Stop Execute strategy, goals defined terms sensor readings
executed soon encountered. found neither strategy
clear advantage other, strategies sometimes produced plans
suboptimal might fail.

7.5 Reactive Planning

different approach problem planning uncertainty taken reactive
planning paradigm. approach, specific sequence actions planned advance.
contingency planning, planner given set initial conditions goal.
However, instead producing plan branches, produces set condition-action
rules: example, universal plans (Schoppers, 1987) Situated Control Rules (SCRs)
(Drummond, 1989).
theory, reactive planning system handle exogenous events well uncertain
effects unknown initial conditions: possible provide reaction rule every
possible situation may encountered, whether circumstances would
lead envisaged. contrast, contingency planner Cassandra cannot
handle exogenous events cannot predict them. Cassandra contingency planners focus planning effort circumstances predicted possible (or likely,
case probabilistic contingency planner c-buridan).
would possible represent Cassandra's contingency plans sets conditionaction rules, using causal links preconditions specify conditions
action performed. However, reasoning required execution time
use reaction rules required execute contingency plan. Instead simply
executing next step plan, reasoning branch points, use reaction
rules requires evaluation conditions every cycle order select relevant rule.

8. Discussion

described Cassandra, partial-order contingency planner represent uncertain outcomes construct contingency plans outcomes. design Cassandra
324

fiPlanning Contingencies: Decision-based Approach
based coherent view issues arising planning uncertainty. recognizes
that, uncertain world, distinction must drawn actual state
world planner's model it; instantiates intuitively natural account
knowledge goals exist arise; bases treatment plan branching
requirements agent execute plan. result, Cassandra explicitly
plans gather information allows information-gathering actions fully general.
coherence design provides solid base advanced capabilities
use varying decision-making procedures.

8.1 Contributions
principal contribution work lies explicit representation decision steps
implications handling knowledge goals. Cassandra is, believe,
first planner decisions represented explicit actions plans
constructs. Cassandra's knowledge goals arise specifically need decide
alternative courses action, preconditions decision actions. Cassandra thus
consistent view planning process making decisions advance.
view, contingency plans plans defer decisions information
based available (Pryor, 1995). Different plan branches correspond
different decision outcomes.
use explicit decision steps, Cassandra distinguishes sensing
information-gathering actions one hand, decision making other. One
important reason making distinction decision may depend
one piece information, available performing different actions. addition,
separating information-gathering decision-making provides basis introducing alternative methods making decisions. example, extension Cassandra described
Section 6.5.5 introduces type decision directs executing agent perform
branches resulting given source uncertainty, allows construction
plans succeed situations way telling actual outcome (e.g., bomb-in-the-toilet problem). believe explicit representation
different methods making decisions important direction future research.
knowledge goals arise preconditions decisions Cassandra, need
know whether particular plan branch work distinguished need know
actual outcome uncertainty. Cassandra plan determine outcomes unless
relevant achievement otherwise goals. Moreover, Cassandra
treat knowledge goals special cases: plans achieve may complex plans
achieve goals. well planning achieve knowledge goals arise
preconditions decisions, Cassandra produce plans top-level knowledge goals.
Two features Cassandra worth noting: exibility afforded labeling
scheme; potential learning adaptation afforded representation
uncertainty.
Cassandra's labeling scheme, although complex, allows agent executing plan
distinguish three classes action: must executed given
contingency; must not; whose execution affect achievement
325

fiPryor & Collins
goal contingency.11 feature paves way extension described
allows Cassandra build plans requiring execution branches resulting
source uncertainty.
Cassandra's representation makes assumptions intrinsic nature uncertainty. unknown precondition simply denotes information context
produce particular effect action available planner. may
information principle unknowable (in domains involving quantum effects,
example); much likely uncertainty results limitations
planner information available it. general, agent operating real-world
domain much effective learn improve performance adapt
changing conditions. use unknown preconditions represent uncertainty means
circumstances would relatively simple incorporate results learning adaptation planner's domain knowledge. example, planner might
discover predict certain outcomes: could change unknown preconditions
ones ecting new knowledge. If, hand, discovered predicted
effects consistently failing occur, could change relevant preconditions
unknown ones.

8.2 Limitations

Cassandra one increasing number planners aim extend techniques
classical planning realistic domains. Cassandra designed operate domains
two three principal constraints observed classical planners relaxed:
namely, allow non-deterministic actions incomplete knowledge initial conditions. Cassandra is, however, subject third constraint, changes take place
except result actions specified plan. clearly limits effectiveness
many real-world domains. Moreover, limits extent nondeterminism
incompleteness knowledge handled. Cassandra's plans necessarily
achieve goals sources uncertainty ignored, possible outcomes
specified.
Cassandra cannot make use information likely particular outcomes are,
unlike probabilistic decision-theoretic planners; cannot plan interleave planning
execution; provide reaction rules possible circumstances.
solve problems valid plans involving ways discriminating
possible outcomes; algorithm given cannot solve original version bombin-the-toilet problem, although extension described Section 6.5.5 (Collins
& Pryor, 1995).
algorithm described paper two major practical limitations: first,
plans produces often complex necessary; second, time taken
produce plans precludes use except simple problems.
complexity Cassandra's plans results necessity planning every
contingency lack branch merging. example, suppose open
combination safe could obtain money pay evening out. Cassandra's
11. agents make use information, guarantee third type step
actually executable.

326

fiPlanning Contingencies: Decision-based Approach
plan goal enjoying evening would one branch possible safe
combination. branch would start actions open safe,
different combination, would continue actions going restaurant
movies, say, would identical branch. simpler plan would
merge separate branches safe opened. consideration methods
branch merging area future work (see Sections 6.5.4 7.3).
circumstances, example, plan complexity could reduced
use run-time variables, introduced ipem (Ambros-Ingerson
& Steel, 1988) used sensp (Etzioni et al., 1992) (see Section 7).
uncertainty value action parameter takes (which case opening
combination safe) would possible use run-time variable represent parameter, obviating need separate plan branches. Implementing strategy would
require effective methods determining effects uncertainty limited
parameter values. general, notion indicates possible approach problem
branch merging: taking least commitment approach variable binding,
way least commitment approach taken step ordering partial order
planner. would allow concept \conditional" variable binding: variable
binding could labeled required forbidden given contingency.
analyzed complexity Cassandra's algorithm, believe
exponential. effect multiple plan branches, whose presence
increases number steps plan increases number potential
interactions number ways resolving them. Certainly, subjective impression
Cassandra runs even slowly planners snlp family. Effective
domain-independent search control heuristics dicult find, many (toy)
domains used Cassandra even problem-specific heuristics hard come
by.

8.3 Conclusion
Cassandra planning system based firmly classical planning paradigm. Many
strengths weaknesses classical planning systems. example,
believe certain circumstances plans valid guaranteed
find valid plan one exists. However, techniques uses valid limited
circumstances, computational complexity make direct scaling unlikely
feasible.
view, principal strengths Cassandra arise explicit representation
decisions plans. shown use decisions provides natural account
knowledge goals arise planning process. sketched
decisions used basis extensions provide added functionality. new
type decision allows fail-safe plans, provide method solving problems
bomb-in-the-toilet problem (Section 6.5.5); another type decision may provide
effective method interleaving planning execution (Section 7.4).
believe use explicit decision procedures enable extension
range applicability techniques classical planning. general, idea constructing
single plan succeed circumstances is, feel, unlikely productive:
327

fiPryor & Collins
real world complex uncertain enough trying predict behavior detail
simply impossible. However, use decision procedures that, example, involve
probabilistic techniques interleave planning execution, appears likely provide
exible framework that, although inevitably sacrificing completeness correctness,
provide basis effective, practical planning real world.

Appendix A. Cassandra's Plans
appendix shows plans constructed Cassandra examples body
paper. plan consists initial conditions, plan steps goals. initial conditions
shown top plan. unknown shown depending
particular contingency. plan steps shown next. shown number
denoting order plan. numbers parentheses show order
steps added plan. right step contingency labels.
brevity, individual effects step always omitted links establish
step's enabling secondary preconditions often omitted.
Finally, bottom plan come goal conditions. goal stated first,
contingency goal shown links establish it. usual, contingency
labels right.

A.1 Plan Get Evanston
plan shown Figure 3 discussed Section 2.3.2. Note decision-step
single active decision-rule. situation discussed comments onesided contingencies Section 6.5: route using Western quicker clear,
Ashland route slower always possible.
Initial:

[TRAFFIC0S: GOOD] (NOT (TRAFFIC-BAD))
[TRAFFIC0S: BAD] (TRAFFIC-BAD)
(AND (AT START) (ROAD WESTERN) (ROAD BELMONT) (ROAD ASHLAND))

Step

1 (4): (GO-TO-WESTERN-AT-BELMONT)
YES: [TRAFFIC0S: GOOD BAD]
(AND (NOT (AT START)) (ON WESTERN) (ON BELMONT))
0 -> (AT START)

Step

2 (3): (CHECK-TRAFFIC-ON-WESTERN)
(KNOW-IF (TRAFFIC-BAD))
1 -> (ON WESTERN)

Step

3 (2): (DECIDE TRAFFIC0S)
(and (NOT (TRAFFIC-BAD))

) => [TRAFFIC0S: GOOD]
(and
) => [TRAFFIC0S: BAD]
2 -> (KNOW-IF (TRAFFIC-BAD))

Step

4 (6): (TAKE-BELMONT)

YES: [TRAFFIC0S: BAD]
: [TRAFFIC0S: GOOD]
(AND (NOT (ON WESTERN)) (ON ASHLAND))
1 -> (ON BELMONT)

328

fiPlanning Contingencies: Decision-based Approach
Step

5 (5): (TAKE-ASHLAND)

YES: [TRAFFIC0S: BAD]
: [TRAFFIC0S: GOOD]

(AT EVANSTON)
4 -> (ON ASHLAND)
Step

: [TRAFFIC0S: GOOD]

6 (1): (TAKE-WESTERN)

YES: [TRAFFIC0S: GOOD]
: [TRAFFIC0S: BAD]

(AT EVANSTON)
1 -> (ON WESTERN)
0 -> (NOT (TRAFFIC-BAD))
Goal:

: [TRAFFIC0S: BAD]
: [TRAFFIC0S: BAD]

(AT EVANSTON)
GOAL
5 -> (AT EVANSTON)

YES: [TRAFFIC0S: BAD]
: [TRAFFIC0S: GOOD]

6 -> (AT EVANSTON)

YES: [TRAFFIC0S: GOOD]
: [TRAFFIC0S: BAD]

GOAL

Complete!

A.2 Disarming Bomb

plan shown Figures 6 7 discussed Section 4.1.1. Note
moving steps dunking steps always possible, necessary one
outcome uncertainty. fail-safe plan (see Section 6.2) therefore possible.
Initial:

[UNK0S: O2] (CONTAINS PACKAGE-2 BOMB)
[UNK0S: O1] (CONTAINS PACKAGE-1 BOMB)
(AND (AT PACKAGE-1 RUG) (AT PACKAGE-2 RUG))

Step

1 (5): (X-RAY PACKAGE-2)
(KNOW-IF (CONTAINS PACKAGE-2 BOMB))

Step

2 (3): (X-RAY PACKAGE-1)
(KNOW-IF (CONTAINS PACKAGE-1 BOMB))

Step

3 (2): (DECIDE UNK0S)
(and (CONTAINS PACKAGE-2 BOMB)

) => [UNK0S: O2]
(and (CONTAINS PACKAGE-1 BOMB)

) => [UNK0S: O1]
1 -> (KNOW-IF (CONTAINS PACKAGE-2 BOMB))
2 -> (KNOW-IF (CONTAINS PACKAGE-1 BOMB))

Step

4 (7): (MOVE RUG TOILET PACKAGE-1)
YES: [UNK0S: O1]
(AND (NOT (AT PACKAGE-1 RUG)) (AT PACKAGE-1 TOILET))
0 -> (AT PACKAGE-1 RUG)

Step

5 (6): (MOVE RUG TOILET PACKAGE-2)
YES: [UNK0S: O2]
(AND (NOT (AT PACKAGE-2 RUG)) (AT PACKAGE-2 TOILET))
0 -> (AT PACKAGE-2 RUG)

Step

6 (4): (DUNK PACKAGE-2)
(WET PACKAGE-2)

YES: [UNK0S: O2]

329

fiPryor & Collins
5 -> (AT PACKAGE-2 TOILET)
(DISARMED BOMB)
0 -> (CONTAINS PACKAGE-2 BOMB)
Step

7 (1): (DUNK PACKAGE-1)
(WET PACKAGE-1)
4 -> (AT PACKAGE-1 TOILET)
(DISARMED BOMB)
0 -> (CONTAINS PACKAGE-1 BOMB)

Goal:

: [UNK0S: O1]
YES: [UNK0S: O1]

: [UNK0S: O2]

(DISARMED BOMB)
GOAL
6 -> (DISARMED BOMB)

YES: [UNK0S: O2]
: [UNK0S: O1]

7 -> (DISARMED BOMB)

YES: [UNK0S: O1]
: [UNK0S: O2]

GOAL

Complete!

A.3 Fetching Package

plan Figure 8, discussed Section 4.1.3, involves one source uncertainty
hence contains one decision-step. two possible ways achieving goal,
one outcome uncertainty.
Initial:

(AVAILABLE CAR-1)
[LOC0S: B] (PACKAGE-AT LOCATION-2)
[LOC0S: A] (PACKAGE-AT LOCATION-1)
(AND (IS-CAR CAR-1) (IS-CAR CAR-2) (LOCATION LOCATION-1)
(LOCATION LOCATION-2))

Step

1 (2): (ASK-ABOUT-PACKAGE)
(KNOW-IF (PACKAGE-AT LOCATION-2))
0 -> (LOCATION LOCATION-2)
(KNOW-IF (PACKAGE-AT LOCATION-1))
0 -> (LOCATION LOCATION-1)

Step

2 (1): (DECIDE LOC0S)
(and (PACKAGE-AT

(and (PACKAGE-AT

1 -> (KNOW-IF
1 -> (KNOW-IF

LOCATION-2)
) => [LOC0S: B]
LOCATION-1)
) => [LOC0S: A]
(PACKAGE-AT LOCATION-2))
(PACKAGE-AT LOCATION-1))

Step

3 (4): (DRIVE CAR-1 LOCATION-1)
(AT LOCATION-1)
0 -> (AVAILABLE CAR-1)

YES: [LOC0S: A]

Step

4 (3): (DRIVE CAR-1 LOCATION-2)
(AT LOCATION-2)
0 -> (AVAILABLE CAR-1)

YES: [LOC0S: B]

Goal:

(AND (AT ?LOC) (PACKAGE-AT ?LOC))

330

fiPlanning Contingencies: Decision-based Approach

GOAL

YES: [LOC0S: B]
4 -> (AT LOCATION-2)
0 -> (PACKAGE-AT LOCATION-2)

GOAL

: [LOC0S: A]
YES: [LOC0S: A]

3 -> (AT LOCATION-1)
0 -> (PACKAGE-AT LOCATION-1)

: [LOC0S: B]

Complete!

A.4 Fetching Another Package

plan Figure 9, discussed Section 4.1.3, two sources uncertainty two
decision-steps. four possible ways achieving goal, one combination
outcomes two sources uncertainty.
Initial:

Step





(AND

[CAR0S: C2] (AVAILABLE
[CAR0S: C1] (AVAILABLE
[LOC0S: B] (PACKAGE-AT
[LOC0S: A] (PACKAGE-AT
(IS-CAR CAR-1) (IS-CAR
(LOCATION LOCATION-2))

CAR-2)
CAR-1)
LOCATION-2)
LOCATION-1)
CAR-2) (LOCATION LOCATION-1)

1 (5): (ASK-ABOUT-CAR)

YES: [LOC0S: B]

(KNOW-IF (AVAILABLE CAR-2))
0 -> (IS-CAR CAR-2)
(KNOW-IF (AVAILABLE CAR-1))
0 -> (IS-CAR CAR-1)
Step

2 (4): (DECIDE CAR0S)
YES: [LOC0S: B]
(and (AVAILABLE CAR-2)

) => [CAR0S: C2]
(and (AVAILABLE CAR-1)

) => [CAR0S: C1]
1 -> (KNOW-IF (AVAILABLE CAR-2))
1 -> (KNOW-IF (AVAILABLE CAR-1))

Step

3 (2): (ASK-ABOUT-PACKAGE)

YES: [CAR0S: C2 C1]

(KNOW-IF (PACKAGE-AT LOCATION-2))
0 -> (LOCATION LOCATION-2)
(KNOW-IF (PACKAGE-AT LOCATION-1))
0 -> (LOCATION LOCATION-1)
Step

4 (1): (DECIDE LOC0S)
(and (PACKAGE-AT

(and (PACKAGE-AT

3 -> (KNOW-IF
3 -> (KNOW-IF

YES: [CAR0S: C2 C1]
LOCATION-2)
) => [LOC0S: B]
LOCATION-1)
) => [LOC0S: A]
(PACKAGE-AT LOCATION-2))
(PACKAGE-AT LOCATION-1))

Step

5 (8): (DRIVE CAR-2 LOCATION-1)

YES: [LOC0S: A][CAR0S: C2]

331

fiPryor & Collins
: [CAR0S: C1]
(AT LOCATION-1)
0 -> (AVAILABLE CAR-2)
Step

: [CAR0S: C1]

6 (6): (DRIVE CAR-2 LOCATION-2)

YES: [LOC0S: B][CAR0S: C2]
: [CAR0S: C1]

(AT LOCATION-2)
0 -> (AVAILABLE CAR-2)
Step

: [CAR0S: C1]

7 (7): (DRIVE CAR-1 LOCATION-1)

YES: [LOC0S: A][CAR0S: C1]
: [CAR0S: C2]

(AT LOCATION-1)
0 -> (AVAILABLE CAR-1)
Step

: [CAR0S: C2]

8 (3): (DRIVE CAR-1 LOCATION-2)

YES: [LOC0S: B][CAR0S: C1]
: [CAR0S: C2]

(AT LOCATION-2)
0 -> (AVAILABLE CAR-1)
Goal:

: [CAR0S: C2]

(AND (AT ?LOC) (PACKAGE-AT ?LOC))
GOAL
5 -> (AT LOCATION-1)
0 -> (PACKAGE-AT LOCATION-1)

YES: [LOC0S: A][CAR0S: C2]
: [CAR0S: C1]
: [LOC0S: B]

6 -> (AT LOCATION-2)
0 -> (PACKAGE-AT LOCATION-2)

YES: [LOC0S: B][CAR0S: C2]
: [CAR0S: C1]
: [LOC0S: A]

8 -> (AT LOCATION-2)
0 -> (PACKAGE-AT LOCATION-2)

YES: [LOC0S: B][CAR0S: C1]
: [CAR0S: C2]
: [LOC0S: A]

7 -> (AT LOCATION-1)
0 -> (PACKAGE-AT LOCATION-1)

YES: [LOC0S: A][CAR0S: C1]
: [CAR0S: C2]
: [LOC0S: B]

GOAL

GOAL

GOAL

Complete!

A.5 Tossing Coin

Section 4.2.3 described plan ending coin. decision plan
distinguish coin landing heads-up tails-up|the decision rules
ambiguous.
Initial:

(HOLDING-COIN)

Step

1 (2): (TOSS-COIN)
(AND (NOT (HOLDING-COIN)) (ON-TABLE))
0 -> (HOLDING-COIN)

Step

2 (4): (INSPECT-COIN)
(AND (KNOW-IF (FLAT-COIN)) (KNOW-IF (HEADS-UP))
(KNOW-IF (TAILS-UP)) (KNOW-IF (ON-EDGE)))

332

fiPlanning Contingencies: Decision-based Approach
Step

3 (3): (DECIDE UNK2S)
(and (FLAT-COIN)

) => [UNK2S: H]
(and (FLAT-COIN)

) => [UNK2S: T]
(and (ON-EDGE)

) => [UNK2S: E]
2 -> (KNOW-IF (FLAT-COIN))
2 -> (KNOW-IF (ON-EDGE))

Step

4 (1): (TIP-COIN)

YES: [UNK2S: E]
: [UNK2S: H T]

(FLAT-COIN)
1 -> (ON-EDGE)
Goal:

: [UNK2S: H T]

(FLAT-COIN)
GOAL
1 -> (FLAT-COIN)

YES: [UNK2S: T]
: [UNK2S: H E]

1 -> (FLAT-COIN)

YES: [UNK2S: H]
: [UNK2S: E]

4 -> (FLAT-COIN)

YES: [UNK2S: E]
: [UNK2S: H T]

GOAL

GOAL

Complete!

A.6 Tossing Another Coin
plan Figure 11 two decisions unambiguous decision-rules. four
ways achieving goal plan, two sources uncertainty.
Initial:

(HOLDING-COIN)

Step

1 (1): (TOSS-COIN)
(AND (NOT (HOLDING-COIN)) (ON-TABLE) (KNOW-IF (FLAT-COIN))
(KNOW-IF (HEADS-UP)) (KNOW-IF (TAILS-UP)) (KNOW-IF (ON-EDGE)))
0 -> (HOLDING-COIN)

Step

2 (2): (DECIDE TOSS1S)
(and (FLAT-COIN)
(HEADS-UP)

(and (ON-EDGE)

(and (FLAT-COIN)
(TAILS-UP)

1 -> (KNOW-IF
1 -> (KNOW-IF
1 -> (KNOW-IF
1 -> (KNOW-IF

Step

) => [TOSS1S: H]
) => [TOSS1S: E]

) => [TOSS1S: T]
(ON-EDGE))
(FLAT-COIN))
(TAILS-UP))
(HEADS-UP))

3 (4): (TIP-COIN)

YES: [TOSS1S: E]

333

fiPryor & Collins
: [TOSS1S: H]
(AND (FLAT-COIN) (KNOW-IF (HEADS-UP)) (KNOW-IF (TAILS-UP)))
1 -> (ON-EDGE)
: [TOSS1S: H T]
Step

4 (5): (DECIDE TIP4S)

YES: [TOSS1S: E]
: [TOSS1S: H]

(and (TAILS-UP)

) => [TIP4S:
(and (HEADS-UP)

) => [TIP4S:
3 -> (KNOW-IF (TAILS-UP))
3 -> (KNOW-IF (HEADS-UP))
Step

5 (3): (TURN-OVER)

(HEADS-UP)
1 -> (TAILS-UP)

: [TOSS1S: H E]

6 (6): (TURN-OVER)

YES: [TOSS1S: E][TIP4S: T]
: [TOSS1S: H][TIP4S: H]
: [TOSS1S: H]

3 -> (FLAT-COIN)
(HEADS-UP)
3 -> (TAILS-UP)
Goal:

H]
: [TOSS1S: H]
: [TOSS1S: H]
YES: [TOSS1S: T]
: [TOSS1S: E H]
: [TOSS1S: H E]

1 -> (FLAT-COIN)

Step

T]

: [TOSS1S: H][TIP4S: H]

(AND (FLAT-COIN) (HEADS-UP))
GOAL
3 -> (FLAT-COIN)
6 -> (HEADS-UP)

YES: [TOSS1S: E][TIP4S: T]
: [TOSS1S: H]
: [TOSS1S: H][TIP4S: H]

3 -> (FLAT-COIN)
3 -> (HEADS-UP)

YES: [TOSS1S: E][TIP4S: H]
: [TOSS1S: H]
: [TOSS1S: H T][TIP4S: T]

1 -> (FLAT-COIN)
5 -> (HEADS-UP)

YES: [TOSS1S: T]
: [TOSS1S: H E]
: [TOSS1S: E H]

1 -> (FLAT-COIN)
1 -> (HEADS-UP)

YES: [TOSS1S: H]
: [TOSS1S: E]
: [TOSS1S: E]

GOAL

GOAL

GOAL

Complete!

A.7 Opening Door
Section 4.2.4 described plan opening locked door without key; depicted
Figure 12. plan Cassandra produces situation shown here. Even
though preconditions pick step depend effect kick step, former
cannot performed lock broken result kicking door. decision-rules
ect dependence.
334

fiPlanning Contingencies: Decision-based Approach
Initial:

(LOCK-INTACT)

Step

1 (2): (KICK)

Step

2 (4): (LOOK)
(AND (KNOW-IF (LOCKED)) (KNOW-IF (LOCK-INTACT))
(KNOW-IF (FOOT-BROKEN)))

Step

3 (3): (DECIDE KICK2S)
(and ((LOCK-INTACT))

) => [KICK2S: F]
(and (NOT (LOCKED))

) => [KICK2S: L]
2 -> (KNOW-IF (LOCKED))

Step

4 (6): (PICK)

YES: [KICK2S: F]
: [KICK2S: L]

(NOT (LOCKED))
0 -> (LOCK-INTACT)
Step

: [KICK2S: L]

5 (5): (OPEN-DOOR)

YES: [KICK2S: F]
: [KICK2S: L]

(OPEN)
4 -> (NOT (LOCKED))
Step

: [KICK2S: L]

6 (1): (OPEN-DOOR)

YES: [KICK2S: L]
: [KICK2S: F]

(OPEN)
1 -> (NOT (LOCKED))
Goal:

: [KICK2S: F]

(OPEN)
GOAL
5 -> (OPEN)

YES: [KICK2S: F]
: [KICK2S: L]

6 -> (OPEN)

YES: [KICK2S: L]
: [KICK2S: F]

GOAL

Complete!

Acknowledgements
Thanks Dan Weld Tony Barrett supplying ucpop code, Mark Peot Robert
Goldman comments earlier drafts, Fitzgerald many useful discussions,
anonymous reviewers constructive helpful criticism. Much
work performed first author student Institute Learning
Sciences, Northwestern University. work supported part AFOSR
grant number AFOSR-91-0341-DEF. Institute Learning Sciences established
1989 support Andersen Consulting, part Arthur Andersen Worldwide
Organization. Institute receives additional support Ameritech North West
Water, Institute Partners, IBM.
335

fiPryor & Collins

References

Allen, J., Hendler, J., & Tate, A. (Eds.). (1990). Readings Planning. Morgan Kaufmann,
San Mateo, CA.
Ambros-Ingerson, J., & Steel, S. (1988). Integrating planning, execution, monitoring.
Proceedings Seventh National Conference Artificial Intelligence, pp. 83{88
St Paul, MN. AAAI. (Allen, Hendler, & Tate, 1990).
Barrett, A., Soderland, S., & Weld, D. S. (1991). Effect step-order representations
planning. Technical report 91-05-06, Department Computer Science Engineering, University Washington, Seattle.
Chapman, D. (1987). Planning conjunctive goals. Artificial Intelligence, 32, 333{377.
(Allen et al., 1990).
Collins, G. C. (1987). Plan creation: Using strategies blueprints. Technical report
YALEU/CSD/RR 599, Department Computer Science, Yale University.
Collins, G., & Pryor, L. (1992). Achieving functionality filter conditions partial
order planner. Proceedings Tenth National Conference Artificial Intelligence, pp. 375{380 San Jose, CA. AAAI.
Collins, G., & Pryor, L. (1995). Planning uncertainty: key issues. Proceedings
Fourteenth International Joint Conference Artificial Intelligence, pp. 1567{
1573 Montreal, Canada. IJCAI.
Draper, D., Hanks, S., & Weld, D. (1994a). probabilistic model action leastcommitment planning information gathering. Proceedings Tenth Conference Uncertainty Artificial Intelligence, pp. 178{186 Seattle, WA. Morgan
Kaufmann.
Draper, D., Hanks, S., & Weld, D. (1994b). Probabilistic planning information gathering contingent execution. Proceedings Second International Conference
Artificial Intelligence Planning Systems, pp. 31{36 Chicago, IL. AAAI Press.
Drummond, M. (1989). Situated control rules. Proceedings First International
Conference Principles Knowledge Representation Reasoning, pp. 103{113
Toronto. Morgan Kaufmann.
Etzioni, O., Hanks, S., Weld, D., Draper, D., Lesh, N., & Williamson, M. (1992). approach planning incomplete information. Proceedings Third International Conference Knowledge Representation Reasoning, pp. 115{125 Boston,
MA. Morgan Kaufmann.
Feldman, J. A., & Sproull, R. F. (1977). Decision theory artificial intelligence II:
hungry monkey. Cognitive Science, 1, 158{192. (Allen et al., 1990).
Fikes, R. E., & Nilsson, N. J. (1971). STRIPS: new approach application
theorem proving problem solving. Artificial Intelligence, 2, 189{208. (Allen
et al., 1990).
336

fiPlanning Contingencies: Decision-based Approach
Golden, K., Etzioni, O., & Weld, D. (1994). Omnipotence without omniscience: Ecient
sensor management planning. Proceedings Twelfth National Conference
Artificial Intelligence, pp. 1048{1054. AAAI Press.
Goldman, R. P., & Boddy, M. S. (1994a). Conditional linear planning. Proceedings
Second International Conference Artificial Intelligence Planning Systems, pp.
80{85 Chicago, IL. AAAI Press.
Goldman, R. P., & Boddy, M. S. (1994b). Representing uncertainty simple planners.
Proceedings Fourth International Conference Principles Knowledge
Representation Reasoning, pp. 238{245 Bonn. Morgan Kaufmann.
Haas, A. R. (1986). syntactic theory belief action. Artificial Intelligence, 28,
245{292.
Haddawy, P., & Hanks, S. (1992). Representations decision-theoretic planning: Utility
functions deadline goals. Proceedings Third International Conference
Principles Knowledge Representation Reasoning, pp. 71{82 Boston, MA.
Morgan Kaufmann.
Haddawy, P., & Suwandi, M. (1994). Decision-theoretic refinement planning using inheritance abstraction. Proceedings Second Internatinal Conference Artificial
Planning Systems, pp. 266{271 Chicago. AAAI Press.
Knoblock, C. (1995). Planning, executing, sensing, replanning information gathering. Proceedings Fourteenth International Joint Conference Artificial
Intelligence, pp. 1686{1693 Montreal. IJCAI.
Kushmerick, N., Hanks, S., & Weld, D. (1995). algorithm probabilistic planning.
Artificial Intelligence, 76, 239{286.
Langley, P. (1992). Systematic nonsystematic search strategies. Proceedings
First International Conference Artificial Intelligence Planning Systems, pp. 145{
152 College Park, Maryland. Morgan Kaufmann.
McAllester, D., & Rosenblitt, D. (1991). Systematic nonlinear planning. Proceedings
Ninth National Conference Artificial Intelligence, pp. 634{639 Anaheim, CA.
AAAI.
McCarthy, J., & Hayes, P. J. (1969). philosophical problems standpoint
artificial intelligence. Meltzer, B., & Michie, D. (Eds.), Machine Intelligence 4, pp.
463{502. Edinburgh University Press. (Allen et al., 1990).
McDermott, D. (1987). critique pure reason. Computational Intelligence, 3, 151{160.
McDermott, D. (1991). Regression planning. International Journal Intelligent Systems,
6 (4), 357{416. available Yale TR YALEU/CSD/RR 752.
Moore, R. C. (1985). formal theory knowledge action. Hobbs, J. R., & Moore,
R. C. (Eds.), Formal Theories Commonsense World. Ablex, Norwood, NJ.
(Allen et al., 1990).
337

fiPryor & Collins
Morgenstern, L. (1987). Knowledge preconditions actions plans. Proceedings
Tenth International Joint Conference Artificial Intelligence, pp. 867{874
Milan. IJCAI.
Olawsky, D., & Gini, M. (1990). Deferred planning sensor use. Proceedings
Workshop Innovative Approaches Planning, Scheduling Control, pp. 166{
174 San Diego, CA. DARPA.
Pednault, E. P. D. (1988). Extending conventional planning techniques handle actions
context-dependent effects. Proceedings Seventh National Conference
Artificial Intelligence, pp. 55{59 St Paul, MN. AAAI.
Pednault, E. P. D. (1989). ADL: Exploring middle ground STRIPS
situation calculus. Proceedings First International Conference Principles
Knowledge Representation Reasoning, pp. 324{332. Morgan Kaufmann.
Pednault, E. P. D. (1991). Generalizing nonlinear planning handle complex goals
actions context-dependent effects. Proceedings Twelfth International
Joint Conference Artificial Intelligence, pp. 240{245 Sydney, Australia. IJCAI.
Penberthy, J. S., & Weld, D. S. (1992). UCPOP: sound, complete, partial order planner ADL. Proceedings Third International Conference Knowledge
Representation Reasoning, pp. 103{114 Boston, MA. Morgan Kaufmann.
Peot, M. A., & Smith, D. E. (1992). Conditional nonlinear planning. Proceedings
First International Conference Artificial Intelligence Planning Systems, pp.
189{197 College Park, Maryland. Morgan Kaufmann.
Pryor, L. (1994). Opportunities planning unpredictable world. Technical report 53,
Institute Learning Sciences, Northwestern University.
Pryor, L. (1995). Decisions, decisions: Knowledge goals planning. Hallam, J. (Ed.),
Hybrid Problems, Hybrid Solutions (Proceedings AISB-95), Frontiers Artificial
Intelligence Applications, pp. 181{192. IOS Press, Amsterdam.
Pryor, L., & Collins, G. (1991). Information-gathering planning task: position paper.
Notes AAAI workshop Knowledge-Based Construction Probabilistic
Decision Models, pp. 101{105 Anaheim, CA. AAAI.
Pryor, L., & Collins, G. (1992). Planning perceive: utilitarian approach. Working
notes AAAI Spring Symposium: Control Selective Perception, pp. 113{122
Stanford, CA. AAAI.
Pryor, L., & Collins, G. (1993). Cassandra: Planning contingencies. Technical report 41, Institute Learning Sciences, Northwestern University.
Sacerdoti, E. (1977). structure plans behavior. American Elsevier, New York.
Schoppers, M. J. (1987). Universal plans reactive robots unpredictable environments.
Proceedings Tenth International Joint Conference Artificial Intelligence,
pp. 1039{1046 Milan. IJCAI.
338

fiPlanning Contingencies: Decision-based Approach
Steel, S. (1995). Knowing how: semantic approach. Hallam, J. (Ed.), Hybrid Problems,
Hybrid Solutions (Proceedings AISB-95), Frontiers Artificial Intelligence
Applications, pp. 193{202. IOS Press, Amsterdam.
Stefik, M. (1981a). Planning constraints (MOLGEN: Part 1). Artificial Intelligence,
16, 111{140. (Allen et al., 1990).
Stefik, M. (1981b). Planning constraints (MOLGEN: Part 2). Artificial Intelligence,
16, 141{170.
Sussman, G. J. (1975). computer model skill acquisition. American Elsevier, New
York.
Tate, A. (1975). Using goal structure direct search problem solver. Ph.D. thesis,
University Edinburgh.
Tate, A. (1977). Generating project networks. Proceedings Fifth International
Joint Conference Artificial Intelligence, pp. 888{893 Cambridge, MA. IJCAI.
(Allen et al., 1990).
Warren, D. (1976). Generating conditional plans programs. Proceedings
Summer Conference Artificial Intelligence Simulation Behaviour, pp.
344{354 Edinburgh. AISB.
Wilkins, D. E. (1988). Practical Planning: Extending Classical AI Planning Paradigm.
Morgan Kaufmann, San Mateo, CA.

339


