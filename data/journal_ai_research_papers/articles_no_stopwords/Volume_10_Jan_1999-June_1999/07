journal artificial intelligence

submitted published

squeaky wheel optimization
david e joslin

david joslin com

technologies
e las colinas blvd
irving tx

david p clements

computational intelligence laboratory
university oregon
eugene

clements cirl uoregon edu

abstract

describe general optimization term squeaky wheel optimization swo swo greedy used construct solution
analyzed trouble spots e elements improved likely
improve objective function score analysis used generate
priorities determine order greedy constructs next
solution construct analyze prioritize cycle continues limit reached
acceptable solution found
swo viewed operating two search spaces solutions prioritizations
successive solutions indirectly related via prioritization
analyzing prior solution similarly successive prioritizations generated constructing analyzing solutions coupled search interesting properties
discuss
report encouraging experimental two domains scheduling
arise fiber optic cable manufacturing graph coloring fact
domains different supports claim swo general technique optimization

overview
describe general optimization term squeaky wheel optimization swo joslin clements core swo construct analyze prioritize
cycle illustrated figure solution constructed greedy making decisions order determined priorities assigned elements
solution analyzed elements trouble makers
priorities trouble makers increased causing greedy constructor deal
sooner next iteration cycle repeats termination condition
occurs
iteration analyzer determines elements causing
trouble current solution prioritizer ensures constructor
gives attention elements next iteration squeaky wheel gets
grease construction analysis prioritization terms elements

c ai access foundation morgan kaufmann publishers rights reserved

fijoslin clements

analyzer
blame

solution

constructor

priorities

prioritizer

figure construct analyze prioritize cycle
define domain scheduling domain example elements might
tasks graph coloring elements might nodes colored
three main components swo

constructor given sequence elements constructor generates solution

greedy backtracking sequence determines order
decisions made thought strategy recipe
constructing solution solution may violate hard constraints

analyzer analyzer assigns numeric blame factor elements

contribute aws current solution example minimizing lateness
scheduling one objectives blame would assigned late
tasks
key principle behind swo solutions reveal structure analyzing solution often identify elements solution work well
elements work poorly resource used full capacity example may
represent bottleneck information structure local
may apply part search space currently examination may
useful determining search go next
prioritizer prioritizer uses blame factors assigned analyzer modify
previous sequence elements elements received blame moved
toward front sequence higher blame element
moved
priority sequence plays key role swo dicult element moves
forward sequence handled sooner constructor tends handled
better thus decreasing blame factor dicult elements rise rapidly place
sequence handled well blame assigned drops
causing slowly sink sequence parts
handled well given increased priority eventually dicult elements sink back
point longer handled well causing receive higher blame
move forward sequence elements easy handle sink
end sequence stay


squeaky wheel optimization

iteration priorities c b
late b







c

iteration priorities b c
late c









b
iteration priorities c b
late b











c



b









task

b
c

duration deadline









c






b

figure simple example
illustrate swo cycle consider simplified scheduling example suppose
single production line three tasks schedule b c one task
performed time execution starts duration deadline task
shown figure objective minimize number late tasks optimal
solution one late task
suppose initial priority sequence hc b constructor schedules tasks
order earliest possible time resulting schedule two late tasks b
suppose analyzer assigns one point blame late task
unit time late case b c receive units blame
respectively figure shows prioritization schedule constructor builds
prioritization late tasks blame assigned
next cycle prioritizer must take previous priority sequence
blame assigned analyzer generate priority sequence simple prioritizer
might sort tasks numeric blame descending order resulting
priority sequence hb c
second cycle tasks c late scoring points blame
respectively priority sequence ha c b
third solution constructed priority sequence one late task b
receives points blame point optimal solution continue
running swo however might expect since typically know
reached optimality swo attempt fix wrong current solution
since task b late priority would increased resulting solution would
fix expense others would enter short cycle alternating
last two schedules address introducing randomization
prioritizer
although example highly simplified would clearly better
sophisticated ways implement three modules figure shows behavior
illustrated simple example ected real domain figure shows changing
position priority sequence three tasks scheduling domain described
detail following section one task job starts high priority
remains relatively high priority level see task scheduled
effectively therefore receives little blame priority tends drop


fipriority

high

joslin clements

low

job
job
job

















iteration

figure examples priority changes time
drop far ceases scheduled well acquires significant level
blame moves quickly back higher priority
two tasks shown figure behave quite differently one task job
starts relatively high priority task easy schedule little
blame even scheduled late sequence successive iterations
priority task tend decrease steadily task illustrated job
opposite starting low priority moving fairly steadily toward
high priority
following section discusses characteristics swo make effective technique optimization discuss implementations swo scheduling
graph coloring final sections discuss related work describe directions
future summarize findings

key ideas

experimental swo general optimization
section explore insights makes swo effective
useful think swo searching two coupled spaces illustrated figure
one search space familiar solution space priority space moves
solution space made indirectly via prioritization analyzing
prior solution similarly successive prioritizations generated constructing
analyzing solution blame analysis modify
previous prioritization
point solution space represents potential solution
corresponding point priority space derived analyzing solution attempt
capture information structure search space vicinity solution
swo constructs solution scratch priorities thought providing


squeaky wheel optimization

construct

p
analyze
prioritize

p



construct


priority space
solution space

figure coupled search spaces
information pitfalls common current region solution space elements solution tended sources diculty number iterations
increasing priority makes likely constructor handle elements
good way
one consequence coupled search spaces small change sequence
elements generated prioritizer may correspond large change corresponding
solution generated constructor compared solution previous iteration moving element forward sequence significantly change state
resulting solution addition elements occur sequence must
accommodate element state example scheduling domain moving task
earlier priority sequence may allow placed different manufacturing line
thus possibly changing mix jobs run line line
scheduled previous iteration one small change consequences
element follows lower priority tasks fill gaps left
higher priority tasks scheduled
large move coherent sense similar
might expect moving higher priority task propagating effects
change moving lower priority tasks needed single move may correspond
large number moves search looks local changes solution
may thus dicult
fact swo makes large moves search spaces one obvious difference
swo traditional local search techniques wsat selman kautz cohen
another difference swo moves never selected effect
objective function instead unlike hillclimbing techniques move made
response trouble spots found current solution resulting move may
uphill move motivated trouble spots


fijoslin clements

priority space local optima elements solution
assigned equal blame swo tends avoid getting trapped local optima analysis
prioritization practice suggest changes sequence thus changing
solution generated next iteration guarantee swo
become trapped small cycle however implementations introduced
small amounts randomness basic cycle restart swo periodically
initial sequence
another aspect local search typically point solution space associated single value objective function score solution talk
hillclimbing generally refer terrain described objective function score
space solutions process analysis swo thought synthesizing
complex description terrain breaking solution component
elements assigning score prioritization translates analysis
strategy constructor use generate next solution
assigning scores individual elements solution allows swo take advantage
fact real often combine elements dicult get right
plus others easy scheduling presented tasks
assigned production lines others allow much exibility
due dates close release time others lot leeway sometimes
possible identify dicult elements static analysis interactions
complex elements causing diculty one part search space may
trouble another rather trying identify elements globally
dicult analyzing entire swo analyzes individual solutions order
elements locally dicult globally dicult elements tend identified time
dicult across large parts search space
assigning blame adjusting priorities identified actual solutions swo avoids dependence complex domain dependent heuristics belief
independence particularly important complex domains even best
heuristics miss key interactions therefore inhibit search exploring
good areas heuristic incorrectly labels unpromising swo uses actual solutions
discover areas search space promising

swo scheduling
section describes application swo fiber optic production line scheduling
derived data provided lucent technologies particular plant
cable may assembled one parallel production lines cable type
subset production lines compatible time required produce
cable depend compatible lines selected cable setup
time depends cable type predecessor setups
certain pairs cable types infeasible task preemption allowed e cable
started processing line finishes without interruption
cable assigned release time due date production cannot begin
release time objective function includes penalty missing due dates penalty
setup times


squeaky wheel optimization

implementation

describe implementation terms three main components swo

constructor constructor builds schedule adding tasks one time

order occur priority sequence task added selecting line
position relative tasks already line task may inserted
two tasks already line beginning end line schedule
changes relative positions tasks already line considered
task line assigned earliest possible start time subject
ordering e task starts release time immediately previous
task line whichever greater
possible insertion points schedule relative tasks already
line constructor calculates effect objective function task
placed best scoring location ties broken randomly tasks
placed constructor applies swo individual line schedules attempting
improve score line reordering cables assigned

analyzer assign blame task current schedule analyzer first calculates

lower bound minimum possible cost task could contribute
schedule example task release time later due date
late every schedule minimum possible cost already includes
penalty minimum possible setup costs included given schedule
blame assigned task excess cost difference actual
cost minimum possible cost excess lateness costs assigned tasks
late excess setup costs split adjacent tasks

prioritizer blame assigned prioritizer modifies previous sequence tasks moving tasks non zero blame factors forward sequence
tasks moved forward distance increases magnitude blame
move back sequence front task must high blame
factor several iterations call sticky sort

current implementation considerable room improvement analysis
feedback currently used simple construction schedules could take
heuristics account preferring place task line
slack things equal

experimental

six sets test data ranging size tasks parallel
production lines largest largest manufacturer required
practice compare following solution methods
swo

applies swo architecture running fixed number iterations
returning best schedule finds


fijoslin clements

data
set







best
obj







swo

avg
obj







avg
time







tabu

obj







time







ip

obj







time







table experimental scheduling
tabu

ip

uses tabu search glover laguna local search moves
increase cost permitted avoid getting trapped local optima avoid
cycling uphill move made allowed immediately undone

applies integer programming ip solver encoding described

task swo far effective tabu ip tabu
example failed feasible schedule running hours
smallest tabu ip able solutions swo outperformed
substantial margin
table presents swo tabu ip swo ten trials
run averaged tabu ip implementations deterministic
single run shown second column table shows best
objective function value ever observed remaining columns
objective function value running times swo tabu ip ip
experiments run sun sparcstation model ip experiments run
ibm rs model faster machine
best values observed combining swo ip reported
work swo generated solutions running produced number
good schedules ip solver invoked combine elements solutions
better solution although improvements achieved ip solver relatively
small order achieved improvement quickly swo unable
achieve degree optimization even given substantially time
noting hybrid effective swo alone much
effective ip alone focus performance individual techniques
note first fairly naive implementation swo scheduling
already outperformed tabu ip moreover improved implementation
reported still fairly simple successful without relying domain dependent
heuristics take evidence effectiveness due
cleverness construction analysis prioritization techniques due
effectiveness swo cycle identifying responding whatever elements
happen causing diculty local region search


squeaky wheel optimization



lines job position run
























position priority sequence
order lines job run









position priority sequence
order th iteration producing solution best known

figure comparison heuristic priorities priorities derived swo
instructive compare good heuristic ordering sequence derived swo good heuristic scheduling domain one used
initially populate priority sequence sort tasks number production
lines task could feasibly assigned empty schedule task
scheduled many lines likely easier schedule one compatible
small number lines therefore expected need lower priority
top graph figure shows sequence tasks determined heuristic
lower graph illustrates changes priority tasks swo run fourteen
iterations enough improve solution derived sequence within percent
best known solution
figure illustrates heuristic generally accurate swo move
tasks compatible production lines positions relatively
high priority ecting fact contrary heuristic tasks turned
relatively dicult schedule well tasks compatible production lines actually easy schedule well moved relatively low priorities

restarts
swo solver used produce reported table restarted priority
queue every n iterations n number jobs noisy
heuristic used initially populate priority queue used restart
restart cutoff picked rather ad hoc manner careful analysis


fijoslin clements

iterations
feasible


per success mean success mean success
mean sample
restart
rate cost
rate cost
rate
cost
size

























































table experimental restarts scheduling domain
different restart cutoff values might lead producing better solutions faster
additional insight workings swo
restarts often used non systematic search avoid getting trapped local optima
cycles see parkes walser empirical study wsat
references restarts used systematic search escape exponentially large
regions search space contain solution gomes selman kautz
local optima pose little threat swo since directly driven uphill downhill
considerations swo use large coherent moves tends escape unpromising parts search space quickly however swo open getting trapped cycle
restarts used means escape
scheduling swo unlikely get tight cycle priority
queues solutions repeat exactly due presence random tie breaking
several places presence noise prioritizer however belief
swo get trapped cycle similar priority queues solutions repeat
ran series experiments task determine impact
restart cutoffs summarized table restart cutoffs ranged
every iterations every iterations success rate mean cost
shown value three different solution qualities success rate indicates
probability solution least given quality found given pass
mean cost average number total iterations get solution quality
feasible solution thresholds swo reaches percent success rate
well reaching maximum restart cutoff used experiments
sense easy swo produce solutions least qualities


squeaky wheel optimization

thresholds indicate easy swo solve cutoff
greater average number uninterrupted iterations takes produce solution
used solve minimum cost easy appears
small restart cutoff hurt big cutoff
numbers solution quality threshold tell different story success
rate still climbing experiment ends mean cost actually risen
minimum solution quality restart cutoff minimizes mean cost falls
around range mean costs rise steeply restart cutoffs range
slowly cutoffs larger example hard swo
shows care needs taken choosing restart strategy
additional needed determine set restart cutoff automatically
arbitrary
data indicates swo benefit restarts point
threshold restart cutoffs increase cutoff general led
superlinear increase success rate another indicator swo learning
iteration iteration iterations per restart success rate initially
climbs sublinearly appears level open question tells us
search space

swo graph coloring
applied swo different domain graph coloring objective
color nodes graph two adjoining nodes color
minimizing number colors

implementation

priority sequence graph coloring consists ordered list nodes solver
trying produce coloring uses colors target set one less
color used color best solution far describe implementation
terms three main components swo

constructor constructor assigns colors nodes priority sequence order

node color previous solution still available e adjacent node
yet target set color assigned fails tries
assign color current target set picking color least constraining
adjacent uncolored nodes e color reduces adjacent nodes remaining
color choices least none target colors available constructor tries
grab color target set neighbors color grabbed
neighbor nodes color least one choice within target
set multiple colors grabbed least constraining one picked
color target set grabbed color outside target set assigned
nodes early priority sequence likely wide range
colors pick nodes come later may grab colors earlier nodes
earlier nodes color options within target set


fijoslin clements

swo
ig
dist impasse
par impasse
tabu

colors
time colors
time colors
time colors
time colors
time
dsjc




dsjc




dsjc



dsjc

c





c








r










r c






r






r










r c





r






dsjr






dsjr c




dsjr





r






r c



r






























latin sqr


le





le b





le c




le




mulsol






school






school nsh







table experimental graph coloring

analyzer blame assigned node whose assigned color outside target set
amount blame increasing additional color must added
target set ran experiments several different variations color
analysis performed reasonably

prioritizer prioritizer modifies previous sequence nodes moving nodes
blame forward sequence according much blame received
done way done scheduling initial sequence list
nodes sorted decreasing degree order noise added slightly shue
sort


squeaky wheel optimization

experimental
applied swo standard set graph coloring including random graphs
application graphs model register allocation class scheduling
collected second dimacs implementation challenge johnson trick
includes several culberson luo glover
parker ryan lewandowski condon morgenstern range
nodes edges nodes edges
glover et al general search technique tabu
branch bound rather graph coloring specific
worst reported average group morgenstern used distributed
impasse best overall colorings required target
number colors well several specific parameters passed
solver lewandowski condon found good solutions set
used hybrid parallel impasse systematic search processor
cm culberson luo used iterated greedy ig bears
similarity swo ig simplest group solution quality falls
impasse tabu solves entire set percent time
taken methods ig impasse discussed related
work
table compares swo ig culberson luo distributed
impasse morgenstern parallel impasse lewandowski condon tabu
glover et al one column shows number colors required
run time cpu seconds bold face indicates number colors
within best table
used pentium pro mhz workstation running linux swo graph coloring
experiments times shown four reported
johnson trick ig impasse tabu normalized times
dimacs benchmarking program dfmax provided purpose therefore
timing comparisons approximate machine ran dfmax r benchmark
seconds times reported machines used
seconds tabu experiments seconds ig seconds impasse
seconds parallel impasse dfmax benchmark runs single
processor unsuitable normalizing times parallel impasse report
unnormalized times
variety termination conditions used swo terminated iterations
ig terminated iterations without improvement distributed impasse used
wide variety different termination conditions solve different
common element across distributed impasse stopped target
number colors provided input parameter reached times reported
parallel impasse times took best solution found time
took terminate hours tabu ran
determined could make progress hour passed whichever came
first


fijoslin clements


tabu

avg percent best group




iterated greedy


squeaky wheel



par impasse

dist impasse








time cpu seconds







figure experimental quality solution vs time
tabu numbers single run numbers
averages runs parallel impasse runs distributed impasse parallel
impasse runs swo ig distributed impasse
figure summarizes performance technique set
solved solver graph indicates average solution quality
average amount time needed solve set ideal location graph
origin producing high quality solutions little time points shown
techniques points reported papers curve shown swo
shows performs given varying amounts time solve set graph
shows swo clearly outperforms tabu general purpose technique
terms quality speed swo outperforms ig graph coloring specific
terms quality speed impasse solvers clearly produce best solutions
group however impasse domain specific method solvers represent
much programming effort swo solver uses general purpose search technique
implemented less month single programmer

alternate configurations swo
note scheduling work first naive implementation swo graph
coloring produced respectable even without color reuse color grabbing least
constraining heuristic first free color found picked swo matched ig
beat however half remaining ig better
colors
explore sensitivity swo implementation details tried following
approaches constructor prioritizer ran swo combinations


squeaky wheel optimization

construction without color grabbing
analysis blame nodes receive color outside target set

first node priority sequence causes color outside target set
introduced color grabbing used determination blame
final color assigned node

difference solution quality worst combination best combination
less percent even alternative standard sort instead
sticky sort fairly fundamental change added mix spread
worst best still percent

related work

importance prioritization greedy idea first fit
bin packing example relies placing items bins decreasing order
size garey johnson another example grasp greedy randomized adaptive
search procedure feo resende grasp differs several ways
first prioritization construction aspects closely coupled grasp
element added solution constructed remaining elements reevaluated heuristic thus order elements added solution
may depend previous decisions second order elements selected
trial determined heuristic randomization trials independent
learning iteration iteration grasp
doubleback optimization dbo crawford extent inspiration
swo another similar abstract local search als crawford dalal
walser designing swo began looking dbo extremely
successful solving standard type scheduling however dbo useful
objective minimize makespan limited types constraints
handle limitations began thinking principles behind
dbo looking effective generalization dbo fact viewed
instance swo dbo begins performing right shift schedule shifting
tasks far right go boundary resulting right shifted
schedule left tasks extent tasks critical
corresponds analysis swo tasks removed right shifted schedule
taking left tasks first ordering corresponds prioritization swo
task removed placed schedule earliest possible start time e greedy
construction
swo als attempt generalize dbo als views priority space
use terminology swo space abstract schedules performs local
search space unlike swo prioritization modified corresponding
move solution space downhill away optimal modified prioritization
discarded old prioritization restored usual local search als
sometimes makes random moves order escape local minima
als list scheduling pinson prins rullier scheduling
deal domains include precedence constraints tasks accommodate


fijoslin clements

precedence constraints constructing schedules left right temporally task cannot
placed schedule predecessors placed order
analysis prioritization construction appropriately coupled sucient
simply increase priority task late constructor may able
place task lot decisions made consequently
amount blame must propagated task predecessors
commercial scheduler optiflex syswerda uses genetic
modify sequence tasks constraint schedule constructor generates
schedules sequences optiflex viewed instance swo
genetic replacing analysis effect analysis instead emerges
relative fitness members population
two graph coloring bear similarity swo impasse class coloration neighborhood search impasse morgenstern lewandowski condon
swo maintains target set colors produces feasible colorings given
coloring impasse places nodes colored outside target set impasse
set iteration node selected impasse set noisy degree
heuristic assigned random color target set neighbor nodes
con ict moved impasse set
iterated greedy ig culberson luo swo uses sequence nodes
create coloring iteration uses coloring produce
sequence next iteration method used generate sequence differs
swo key observation behind ig nodes color
current solution grouped together next sequence e adjacent
sequence next solution worse current solution ig achieves
improvement manipulating order groups occur sequence
several heuristics including random color descending color
ascending cardinality group ig learns groupings nodes runs
learn diculty nodes node place sequence
indicates nothing expected detected diculty

analysis future work

section summarizes several areas future suggested reported
previous sections

scaling

swo uses fast greedy constructing solutions demonstrated
effectiveness realistic size greatest threat scalability swo
constructs solution scratch iteration partial solution
seen use history mechanism graph coloring
color node previous solution means many cases
need check possible colors significantly speeds construction
fundamental solution would develop incremental version
swo selective reuse colors graph coloring solver small step
direction allows constructor avoid spending time evaluating alternatives


squeaky wheel optimization

previous choice still works generally may possible look
changes made prioritization modify corresponding solution way
generates solution would constructed scratch
prioritization seems feasible could done domains least small
changes prioritization may large portions solution
unaffected
interesting possibility view swo performing local search
plus certain kind propagation small change priorities may correspond large
change solution example increasing priority one task scheduling
may change position schedule consequence lower priority
tasks may shued around accommodate change similar
might expect moving higher priority task propagating effects
change moving lower priority tasks well single move may correspond large
number moves search looks local changes schedule
may thus dicult
view investigating call priority limited propagation plp plp local changes made solution propagation
allowed occur subject current prioritization propagation allowed occur
direction lower priority elements effect small change made
consequences change allowed ripple plan propagation
occur directions decreasing priority ripples propagation decrease
magnitude propagation possible prioritization generated
analyzing resulting solution possible analysis incrementally
well resulting identical swo many interesting
characteristics

coordination modules
swo effective obvious analysis prioritization construction must
work together improve quality solutions already discussed complications arise constraints placed order constructor
make decisions case list scheduling als construction done
strictly left right without complex analysis search spaces effectively become uncoupled changes priority cause constructor fix
discovered analysis
another way search become uncoupled related notion excess cost
discussed scheduling implementation calculation excess cost analyzer
turned key idea improving performance swo however sometimes tasks must handled badly order achieve good overall solution one
scheduling described previously two sacrificial tasks whenever
good solution found analyzer assigns high blame sacrificial tasks
constructor handles well next iteration means resulting solution
poor overall quality aws cause tasks move ahead
sacrificial tasks priority sequence swo brie explore space


fijoslin clements

good solutions cases extent analysis actually hurting ability
swo converge good solutions
ideally would generalize notion excess cost recognize sacrificial
tasks allow tasks handled badly without receiving proportionate blame
task must sacrificed solutions may possible use
learning mechanism accomplish
however notion sacrificial task subtle suppose
example scheduling construction two airplanes p p
key task respectively requiring shared resource r
resource con ict must give r early schedule starting
construction plane p p must give r early schedule
opposite whichever two tasks started early finish time
late
suppose construct schedule goes first late thus receiving
heavy blame factor swo increases priority consequence goes first
subsequent schedule late next iteration go
first could alternate manner forever would swo would
fail explore option effectively would jumping back forth
option building plane p first option building plane p first
without remaining one region search space long enough refine solution
diculty neither identified sacrificial task assuming
two planes identical cannot simply argue symmetry
pick one two tasks sacrificed however could identify sacrificial
task role plays solution could achieve need task
sacrificed must one belongs whichever plane started later analyzer
could reduce blame assigned task schedule whichever task happens
would allow swo explore region search much effectively
interchangeable roles would arise even clearly introduction conditional elements solution suppose example scheduling
constructor may choose include include task instances
type adding however many instances needed satisfy resource requirement
tasks instances task type interchangeable
penalizing one may simply cause shuing instances really address
moreover conditional tasks clear analyzer
assign blame set task instances current schedule may different
set task instances successor schedules
address concerns notion prioritization could generalized apply
additional aspects scheduling might mean prioritizing tasks
resources time intervals propose prioritizations
limited fixed elements scheduling example
may non conditional tasks resources etc example domains
elements fixed sense issue
one intuition behind proposal elements tend define
roles earlier example tasks corresponding two planes
built critical element task per se actually resource r early


squeaky wheel optimization

schedule phase resource r receives high priority later phase resource
r receives lower priority whichever two tasks occurs later recognized
less critical exactly capture notion role would
comes lot closer current addition assigning priorities fixed
elements advantage applicable conditional
tasks currently way explore



swo

local search

although ability make large coherent moves strength
weakness swo poor making small tuning moves solution space
coupled search view swo suggests obvious remedy swo could combined local
search solution space look improvements vicinity good solutions
similarly making small changes prioritization would generally smaller moves
solution space going full analysis prioritization
cycle
yet another alternative genetic techniques crossover types
mutation pool nodes done optiflex many hybrid approaches possible believe coupled search view swo helps identify interesting
strategies combining moves sizes kinds search spaces adapting
dynamically relative solution qualities

conclusions
experience fairly straightforward implement swo domain
usually fairly obvious ways construct greedy solutions analyze
solution assign blame elements naive implementations swo tend
perform reasonably well
found view swo performing coupled search two different
search spaces informative helpful characterize kinds moves
swo makes search spaces effect avoiding local optima
etc hope continuing gain deeper understanding makes swo work
able say effective design swo
number directions future suggests begun scratch
surface squeaky wheel optimization

acknowledgments
authors wish thank robert stubbs lucent technologies providing data
used scheduling experiments authors wish thank george l nemhauser
markus e puttlitz martin w p savelsbergh collaborated swo
hybrid ai many useful discussions came collaboration
without would access lucent markus wrote
framework scheduling experiments tabu ip implementations


fijoslin clements

authors thank members cirl james crawford technologies
helpful comments suggestions would thank andrew parkes
particular suggestions insights graph coloring domain
effort sponsored air force oce scientific air force materiel command usaf grant number f defense advanced
projects agency darpa rome laboratory air force materiel command
usaf agreements f f national
science foundation grant number cda
u government authorized reproduce distribute reprints governmental purposes notwithstanding copyright annotation thereon views conclusions
contained herein authors interpreted necessarily representing ocial policies endorsements expressed implied defense
advanced projects agency rome laboratory air force oce scientific
national science foundation u government
work reported done authors cirl

references

crawford j dalal walser j abstract local search proceedings
aips workshop combinatorial search conjunction
fourth international conference artificial intelligence systems aips
crawford j resource constrained project scheduling proceedings artificial intelligence manufacturing workshop pp
culberson j c luo f exploring k colorable landscape iterated
greedy johnson trick pp
feo resende g greedy randomized adaptive search procedures
journal global optimization
garey r johnson computers intractability guide
theory np completeness w h freeman
glover f laguna tabu search kluwer
glover f parker ryan j coloring tabu branch bound johnson
trick pp
gomes c selman b kautz h boosting combinatorial search randomization proceedings aaai pp
johnson trick eds cliques coloring satisfiability second
dimacs implementation challenge vol dimacs series discrete
mathematics theoretical computer science american mathematical society


squeaky wheel optimization

joslin clements squeaky wheel optimization proceedings aaai pp
lewandowski g condon experiments parallel graph coloring heuristics
applications graph coloring johnson trick pp
morgenstern c distributed coloration neighborhood search johnson trick
pp
parkes walser j tuning local search satisfiability testing proceedings
aaai pp
pinson e prins c rullier f tabu search solving resourceconstrained project scheduling euro wg pms euro working
group project management scheduling pp louvain belgium
selman b kautz h cohen b local search strategies satisfiability
testing johnson trick pp
syswerda g p generation schedules genetic procedure u patent
number




