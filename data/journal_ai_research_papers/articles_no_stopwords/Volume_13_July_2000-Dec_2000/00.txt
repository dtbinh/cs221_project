Journal Artificial Intelligence Research 13 (2000) 1-31

Submitted 8/99; published 8/00

Space Efficiency Propositional Knowledge Representation
Formalisms
Marco Cadoli

cadoli@dis.uniroma1.it

Dipartimento di Informatica e Sistemistica
Universita di Roma La Sapienza
Via Salaria 113, I-00198, Roma, Italy

Francesco M. Donini

donini@dis.uniroma1.it

Politecnico di Bari
Dipartimento di di Elettrotecnica ed Elettronica
Via Orabona 4, I-70125, Bari, Italy

Paolo Liberatore
Marco Schaerf

liberato@dis.uniroma1.it
schaerf@dis.uniroma1.it

Dipartimento di Informatica e Sistemistica
Universita di Roma La Sapienza
Via Salaria 113, I-00198, Roma, Italy

Abstract
investigate space efficiency Propositional Knowledge Representation (PKR)
formalism. Intuitively, space efficiency formalism F representing certain piece
knowledge , size shortest formula F represents . paper
assume knowledge either set propositional interpretations (models) set
propositional formulae (theorems). provide formal way talking relative
ability PKR formalisms compactly represent set models set theorems.
introduce two new compactness measures, corresponding classes, show
relative space efficiency PKR formalism representing models/theorems directly
related classes. particular, consider formalisms nonmonotonic reasoning,
circumscription default logic, well belief revision operators stable
model semantics logic programs negation. One interesting result formalisms
time complexity necessarily belong space efficiency class.

1. Introduction
last years large number formalisms knowledge representation (KR)
proposed literature. formalisms studied several perspectives, including semantical properties, computational complexity. investigate
space efficiency, property minimal size needed represent certain piece knowledge given formalism. study motivated fact
piece knowledge represented two formalisms using different amount
space. Therefore, else remaining same, formalism could preferred another
one needs less space store information.
definition space efficiency, however, simple. Indeed, formalism may allow
several different ways represent piece knowledge. example, let us assume
want represent piece knowledge today Monday. Propositional

c
2000
AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiCadoli, Donini, Liberatore, & Schaerf

Logic may decide use single propositional variable monday. fact today
Monday represented formula monday, formula monday,
well monday (rain rain), formulae Propositional Logic
logically equivalent monday represent exactly information.
Propositional Logic, consider shortest equivalent formulae used
represent information have. principle applied generic
formalism: allows several formulae represent information, take
account shortest one. Therefore, say space efficiency formalism F
representing certain piece knowledge size shortest formula F
represents . Space efficiency called succinctness compactness formalism
measure ability representing knowledge small amount space.
paper focus propositional KR (PKR) formalisms. give
formal definition formalisms propositional one not: intuitively,
propositional formalism, quantifications allowed, thus formulae
syntactically bounded formed using propositional connectives, plus
kind nonclassical connectives (for instance, negation logic programs, etc.).
far, discussed knowledge represents. possible way think
piece knowledge represents facts inferred it. words,
knowing something knowing everything logically implied.
second way cases natural think piece knowledge
set states world consider possible.
formal way, say knowledge represented either set propositional interpretations (those describing states world consider plausible) set
formulae (those implied know). Consequently, focus reasoning
problems model checking theorem proving. following example shows
really think knowledge ways.
Example 1 want eat fast food, want either sandwich salad
(but both), either water coke (but both).
Propositional Logic, choice represented model, following
models represent possible choices (models represented writing letters
mapped true).
= {{sandwich, water}, {sandwich, coke}, {salad, water}, {salad, coke}}
representing set choices use formulae instead models. case,
write set formulae whose models represent exactly allowed choices,
follows.
C = (sandwich salad) (sandwich salad) (sandwich salad)
(water coke) (water coke) (coke water)

Actually, get rid redundancies, end following formula.
F = (sandwich salad) (sandwich salad) (water coke) (water coke)
2

fiSpace Efficiency Propositional Knowledge Representation Formalisms

formally, F represents set models A, interpretation I,
holds |= F . formula F represents set formulae C,
Cn(F ) = Cn(C), Cn(.) function gives set conclusions
drawn propositional formula.
1.1 State Art
question deeply investigated, related space efficiency,
possibility translating formula expressed one formalism formula expressed
another formalism (under assumption, course, formulae represent
knowledge).
cases, analysis possibility translating formulae different
formalisms Propositional Logic (PL). example, Ben-Eliyahu Dechter (1991, 1994)
proposed translation default logic PL, translation disjunctive logic
programs PL, Winslett (1989) introduced translation revised knowledge
bases PL, Gelfond, Przymusinska, Przymusinskyi (1989) defined translation
circumscription PL.
translations, well many ones literature, lead
exponential increase size formula, worst case. best known
translation yields formula target formalism exponential size w.r.t.
formula source formalism, natural question arising whether exponential
blow due specific translation, intrinsic problem. example,
although proposed translations default logic PL lead exponential blow
up, cannot conclude possible translations suffer problem: could
polynomial translation exists, discovered far.
works focussed question whether kind exponential increase
size intrinsic not. Cadoli, Donini, Schaerf (1996) shown many interesting fragments default logic circumscription cannot expressed polynomialtime fragments PL without super-polynomially increasing size formulae.
proved super-polynomial increase size necessary translating
unrestricted propositional circumscription (Cadoli, Donini, Schaerf, & Silvestri, 1997)
operators belief revision PL (Cadoli, Donini, Liberatore, & Schaerf, 1999;
Liberatore, 1995).
Gogic collegues (1995) analyzed relative succinctness several PKR formalisms
representing sets models. Among results, showed skeptical default logic
represent sets models succinctly circumscription.
Kautz, Kearns, Selman (1995) Khardon Roth (1996, 1997) considered
representations knowledge bases based notion characteristic model, comparing
representations, e.g., based clauses. showed representation
knowledge bases characteristic models sometimes exponentially compact
ones, converse true cases.
However, results based specific proofs, tailored specific reduction, help us define equivalence classes space efficiency KR
formalisms. recent paper (Cadoli, Donini, Liberatore, & Schaerf, 1996b), new complexity measure decision problems, called compilability, introduced.

3

fiCadoli, Donini, Liberatore, & Schaerf

present paper show new measure directly used characterize space
efficiency PKR formalisms. emphasize methodological aspects, expressing
general context many results presented before.
1.2 Goal
notion polynomial time complexity great importance KR (as well many
fields computer science), problems solved polynomial time
considered easy, computational point view.
notion polynomial many-one reducibility intuitive meaning
applied KR: exists polynomial many-one reduction one formalism
another one, time complexity reasoning two formalisms comparable.
allows say, e.g., inference PL coNP-complete, i.e. one hardest
problems among complexity class coNP.
result, formal tool comparing difficulty reasoning two
formalisms. missing way saying one formalism able represent
information less space.
Example 2 consider lunch scenario previous example. show
reduce size representation using circumscription instead Propositional
Logic. PL, knowledge previous example represented formula F :
F = (sandwich salad) (sandwich salad) (water coke) (water coke)
set models formula A, models exactly minimal
models formula Fc defined follows.
Fc = (sandwich salad) (water coke)
definition circumscription (McCarthy, 1980) holds F equivalent
CIRC(Fc ; {sandwich, salad, water, coke}, , ). Note Fc shorter F . result
proved hold arbitrary sets models, may conclude circumscription
space efficient Propositional Logic representing knowledge expressed sets
models.
goal provide formal way talking relative ability PKR formalisms compactly represent information, information either set models
set theorems. particular, would able say specific PKR
formalism provides one compact ways represent models/theorems among
PKR formalisms specific class.
1.3 Results
introduce two new compactness measures (model theorem compactness)
corresponding classes (model-C thm-C, C complexity class P, NP, coNP,
etc.). classes form two hierarchies isomorphic polynomial-time hierarchy
(Stockmeyer, 1976). show relative space efficiency PKR formalism
4

fiSpace Efficiency Propositional Knowledge Representation Formalisms

directly related classes. particular, ability PKR formalism compactly
represent sets models/theorems directly related class model/theorem
hierarchy belongs to. Problems higher model/theorem hierarchy represent
sets models/theorems compactly formalisms lower classes.
classification obtained general framework making direct
comparisons specific translations various PKR formalisms. Furthermore,
approach allows simple intuitive notion completeness model
theorem hierarchies. notion precisely characterizes relation
formalisms different levels, relations formalisms level.
interesting result two PKR formalisms model checking inference belong
time complexity class may belong different compactness classes. may
suggest criterion choosing two PKR formalisms reasoning
time complexitynamely, choose compact one. Also, two PKR formalisms
may belong theorem compactness class, yet different model compactness
classes. stresses importance clarifying whether one wants represent models
theorems choosing PKR formalism.
1.4 Outline
next section introduce notation assumptions adopt
work. Section 3 (Compilability) briefly recall notions non-uniform computation important follows recall basic definitions compilability
classes (Cadoli et al., 1996b). Section 4 (Reductions) describe constraints
impose reductions, Section 5 (Space Efficiency) introduce compactness
classes. Section 6 (Applications) actually compare many known PKR formalisms
using framework. Finally, Section 7 (Related Work Conclusions) compare
work proposals presented literature draw conclusions.

2. Notations Assumptions
section define knowledge bases formalisms are. Since want
consider formalisms different syntax semantics, need
general definitions. Let us consider, base case, formalism propositional calculus.
Formally, assume composed three parts:
1. syntax, used define well-formed formulae;
2. proof theory, allows saying formula follows another one;
3. model-theoretic semantics, establishes model satisfies formula.
syntax defined finite alphabet propositional symbols L = {a, b, c, . . .},
possibly subscripts, usual set propositional connectives , , .
terms knowledge representation, proof theory seen way extracting knowledge knowledge base. example, knowledge base c,
fact b holds. thus say formula b part knowledge represented
c.
5

fiCadoli, Donini, Liberatore, & Schaerf

cases, want knowledge bases represent models rather sets formulas.
interpretation alphabet propositional variables L mapping L
{true, false}. model-theoretic semantics propositional calculus usual way
extending interpretation L well-formed formulas.
Let us extend definition generic formalisms: formalism composed
syntax, proof theory, model-theoretic semantics.
remark formalism syntax: instance, default logic includes
ternary connective : denoting default rules, logic programming special
unary connective not(), on. knowledge base formalism F simply wellformed formula, according syntax formalism.
formalism proof theory well. proof theory formalism F
binary relation `F set knowledge bases formulae. Intuitively, F B `F means
consequence knowledge base KB, according rules formalism
F . result, set formulae implied knowledge base KB exactly
knowledge represented KB.
base comparison two different formalisms concept equivalence,
allowing saying two knowledge bases (of two different formalisms) represent
piece knowledge. Since knowledge represented knowledge base set
formulas implies, assume syntax formulae
formalisms. Namely, always assume formulae implied knowledge
base well-formed formulae propositional calculus. words, formalism
syntax knowledge bases: however, assume proof theory relates
knowledge bases (formulae syntax formalism) propositional formulae. So,
writing KB `F , assume KB knowledge base syntax F ,
propositional formula.
allows saying two knowledge bases KB1 KB2 , expressed two different formalisms F1 F2 , represent piece knowledge: true when,
propositional formula holds KB1 `F1 KB2 `F2 .
model-theoreric semantics formalism relation |=F propositional
models knowledge bases. case, assume fixed alphabet L, thus set
interpretations common formalisms. model knowledge base
KB relation, write |=F KB. Intuitively, means model
supports piece knowledge represented KB.
remark formalisms, e.g. credolous default logic (Reiter, 1980),
proof theory, model-theoretic semantics. possible conceive
formalisms model-theoretic semantics proof theory.
defined, assume related following formula:
KB `F

iff

. |= KB implies |=

Regarding proof theory formalisms, consider formulae shorter
knowledge base, is, assume knowledge represented knowlegde
base KB set formulae KB `F , size size
KB. done two reasons: first, formulas larger KB likely

6

fiSpace Efficiency Propositional Knowledge Representation Formalisms

contain large parts actually independent KB; second, give technicals
result simple way using compilability classes introduced next section.
Assumption 1 consider formulae whose size less equal
knowledge base.
formalisms consider satisfy right-hand side distruibutivity conjunction,
is, KB `F KB `F KB `F . assumption size
restrictive case, CNF formula.

3. Compilability Classes
assume reader familiar basic complexity classes, P, NP (uniform)
classes polynomial hierarchy (Stockmeyer, 1976; Garey & Johnson, 1979).
briefly introduce non-uniform classes (Johnson, 1990). sequel, C, C0 , etc. denote
arbitrary classes polynomial hierarchy.
assume input instances problems strings built alphabet .
denote empty string assume alphabet contains special
symbol # denote blanks. length string x denoted |x|.
Definition 1 advice function takes integer returns string.
Advices important complexity theory definitions results often
based special Turing machines determine result oracle free,
is, constant time.
Definition 2 advice-taking Turing machine Turing machine enhanced
possibility determine A(|x|) constant time, x input string.
course, fact A(|x|) determined constant time (while
intractable even undecidable function) makes definitions based advice-taking
Turing machine different ones based regular Turing machine. example,
advice-taking Turing machine calculate polynomial time many functions
regular Turing machine cannot (including untractable ones).
Note advice function size input, input itself.
Hence, advice-taking Turing machines closely related non-uniform families circuits
(Boppana & Sipser, 1990). Clearly, advice allowed access whole instance,
would able determine solution problem constant time.
Definition 3 advice-taking Turing machine uses polynomial advice exists
polynomial p advice oracle satisfies |A(n)| p(n) nonnegative
integers n.
non-uniform complexity classes based advice-taking Turing machines.
paper consider simplified definition, based classes polynomial hierarchy.

7

fiCadoli, Donini, Liberatore, & Schaerf

Definition 4 C class polynomial hierarchy, C/poly class languages defined Turing machines time bounds C, augmented polynomial advice.
class C/poly known non-uniform C, non-uniformity due
presence advice. Non-uniform uniform complexity classes related: Karp
Lipton (1980) proved NP P/poly p2 = p2 = PH, i.e., polynomial hierarchy collapses second level, Yap (1983) generalized results, particular
showing NP coNP/poly p3 = p3 = PH, i.e., polynomial hierarchy
collapses third level. inprovement results given Kobler
Watanabe (1998): proved kp pk /poly implies polynomial hierarchy collapses ZPP(pk+1 ). collapse polynomial hierarchy considered
unlikely researchers structural complexity.
summarize definitions results proposed formalize compilability
problems (Cadoli et al., 1996b), adapting context terminology PKR
formalisms. remark aim paper give formalization
compilability problems, analyze problems point view. Rather, show
use compilability classes technical tool proving results relative
efficiency formalisms representing knowledge little space.
Several papers literature focus problem reducing complexity
problems via preprocessing phase (Kautz & Selman, 1992; Kautz et al., 1995; Khardon
& Roth, 1997). motivates introduction measure complexity problems
assuming preprocessing allowed. Following intuition knowledge base
known well questions posed it, divide reasoning problem two parts:
one part fixed accessible off-line (the knowledge base), second one varying,
accessible on-line (the interpretation/formula). Compilability aims capturing on-line
complexity solving problem composed inputs, i.e., complexity respect
second input first one preprocessed arbitrary way. next
section show close connection compilability space efficiency PKR
formalisms.
function f called poly-size exists polynomial p strings
x holds |f (x)| p(|x|). exception definition x represents number:
case, impose |f (x)| p(x). result, say function used
advice-taking turing machine polysize function.
function g called poly-time exists polynomial q x, g(x)
computed time less equal q(|x|). definitions easily extend
binary functions usual.
define language pairs subset . necessary represent
two inputs PKR reasoning problem, i.e., knowledge base (KB), formula
interpretation. example, problem Inference Propositional Logic (pli)
defined follows.
pli = {hx, yi | x set propositional formulae (the KB), formula, x ` y}
well known pli coNP-complete, i.e., one hardest problems
among belonging coNP. goal prove pli hardest theorem8

fiSpace Efficiency Propositional Knowledge Representation Formalisms

proving problem among coNP solved preprocessing first input
arbitrary way, i.e., KB. end, introduce new hierarchy classes,
non-uniform compilability classes, denoted k;C, C generic uniform complexity
class, P, NP, coNP, p2 .
Definition 5 (k;C classes) language pairs belongs k;C iff
exists binary poly-size function f language pairs 0 C hx, yi
holds:
hf (x, |y|), yi 0 iff hx, yi
Notice poly-size function f takes input x (the KB) size
(either formula interpretation). done technical reason, is,
assumption allows obtaining results impossible prove function f
takes x input (Cadoli et al., 1996b). assuption useful proving negative results,
is, theorems impossibility compilation: indeed, impossible reduce
complexity problem using function takes x |y| input,
reduction impossible using function taking x argument.
Theorem 1 (Cadoli, Donini, Liberatore, & Schaerf, 1997, Theorem 6) Let C
class polynomial hierarchy . problem belongs k;C
exists poly-size function f language pairs 0 ,
hx, yi holds that:
1. |y| k, hf (x, k), yi 0 hx, yi S;
2. 0 C.
Clearly, problem whose time complexity C k;C: take f (x, |y|) = x
0 = S. interesting problem C may belong k;C0
C0 C, e.g.,, problems NP k;P. true example problems
belief revision (Cadoli et al., 1999). rest paper, however, mainly focus
complete problems, defined below. pictorial representation class k;C
Figure 1, assume 0 C.
problem pli method proving belongs k;P known. order
show (probably) belong k;P, define notion reduction
completeness.
Definition 6 (Non-uniform comp-reducibility) Given two problems B,
non-uniformly comp-reducible B (denoted nucomp B) iff exist two poly-size
binary functions f1 f2 , polynomial-time binary function g every
pair hx, yi holds hx, yi hf1 (x, |y|), g(f2 (x, |y|), y)i B.
nucomp reductions represented depicted Figure 2. reductions
satisfy important properties reduction.
Theorem 2 (Cadoli et al., 1996b, Theorem 5) reductions nucomp satisfy transitivity compatible (Johnson, 1990) class k;C every complexity class C.
9

fiCadoli, Donini, Liberatore, & Schaerf

f
!
!1

x

| | ! |y|


6

hx, yi
-

S0

-

Figure 1: representation k;C.
x
|y|
||


- f1
- f2

6

-x

?

g
-

-y

0

0

Figure 2: nu-comp-C reductions.

Therefore, possible define notions hardness completeness k;C
every complexity class C.
Definition 7 (k;C-completeness) Let language pairs C complexity class.
k;C-hard iff problems k;C nucomp S. Moreover,
k;C-complete k;C k;C-hard.
right complexity class completely characterize problem pli.
fact pli k;coNP-complete (Cadoli et al., 1996b, Theorem 7). Furthermore, hierarchy
formed compilability classes proper polynomial hierarchy
proper (Cadoli et al., 1996b; Karp & Lipton, 1980; Yap, 1983) fact widely conjectured
true.
Informally, may say k;NP-hard problems compilable P,
considerations know exists preprocessing fixed part
makes on-line solvable polynomial time, polynomial hierarchy collapses.
holds k;coNP-hard problems. general, problem k;C-complete
class C regarded toughest problem C, even arbitrary preprocessing fixed part. hand, problem k;C problem that,
preprocessing fixed part, becomes problem C (i.e., compilable C).
close section giving another example use compilability classes
well-known formalism Circumscription (McCarthy, 1980). Let x propositional
formula. minimal models x truth assignments satisfying x
positive values possible (w.r.t. set containment). problem consider is: check
whether given model minimal model propositional formula. problem, called
Minimal Model checking (mmc), reformulated problem model checking
Circumscription, known co-NP-complete (Cadoli, 1992).
10

fiSpace Efficiency Propositional Knowledge Representation Formalisms

consider knowledge base x given off-line, truth assignment
given on-line, obtain following definition:
mmc = {hx, yi | minimal model x }
problem shown k;coNP-complete (Cadoli et al., 1996b, Theorem 13).
Hence, unlikely k;P; is, unlikely exists
off-line processing knowledge base, yielding (say) data structure x0 ,
given y, checked polynomial time whether minimal model x.
This, course, unless x0 exponential size. observation applies x0
knowledge base Propositional Logic, led interpretation Circumscription
compact, succint, PL (Cadoli, Donini, & Schaerf, 1995; Gogic et al., 1995).
framework allows generalize results PKR formalisms, shown
sequel.

4. Reductions among KR Formalisms
define forms reduction PKR formalisms analyze
following sections. formula always represented string alphabet ,
hence consider translations functions transforming strings.
Let F1 F2 two PKR formalisms. exists poly-size reduction F1
F2 , denoted f : F1 7 F2 , f poly-size function given knowledge
base KB F1 , f (KB) knowledge base F2 . Clearly, reductions restricted
produce meaningful output. particular, discuss reductions preserve
models original theory.
semantic approach Gogic collegues (1995) models two
knowledge bases must exactly same. words, knowledge base KB
formalism F1 translated knowledge base KB 0 formalism F2 , |=F1 KB
|=F2 KB 0 . approach summarized by: reduction
formalisms F1 F2 way translate knowledge bases F1 knowledge bases F2 ,
preserving sets models. semantics intuitively grounded, easy
show examples two formalisms consider equally space-efficient cannot
translated other. Let us consider instance variant propositional calculus
syntax formulas must form x1 F , F regular
formula variables x2 , . . .. Clearly, formalism able represent knowledge
space propositional calculus (apart polynomial factor). However,
according definition, formalism cannot translated propositional calculus:
knowledge base equivalent KB = x1 . Indeed, model
KB , model consistent knowledge base modified propositional
calculus contains x1 .
propose general approach deal functions f change
language KB. end, allow translation gKB models KB
models f (KB). stress that, general possible, translation may depend
KB i.e., different knowledge bases may different translations models.
want translation easy compute, since otherwise computation gKB could
hide complexity reasoning formalism. However, observe end,
11

fiCadoli, Donini, Liberatore, & Schaerf

sufficient impose gKB computable polynomial time. fact, KB
fixed, models could trivially translated models f (KB) constant time, using
lookup table. table would exponentially large, though; want
forbid. Hence, impose gKB circuit polynomial-size wrt KB. still use
functional notation gKB (M ) denote result applying model circuit
gKB . formal definition follows.
Definition 8 (Model Preservation) poly-size reduction f : F1 7 F2 satisfies modelpreservation exists polynomial p that, knowledge base KB F1
exists circuit gKB whose size bounded p(|KB|), every interpretation
variables KB holds |=F1 KB iff gKB (M ) |=F2 f (KB).
rationale model-preserving reduction knowledge base KB first
formalism F1 converted knowledge base f (KB) second one F2 ,
reduction model F1 easily translated model
gKB (M ) F2 .
require g depend KB, transformation f , general, could take
actual form KB account. happens following example modelpreserving translation.
Example 3 reduce fragment skeptical default logic (Kautz & Selman, 1991)
circumscription varying letters, using transformation introduced Etherington
(1987). Let hD, W prerequisite-free normal (PFN) default theory, i.e., defaults
form : , generic formula. Let Z set letters occurring
hD, W i. Define PD set letters {a | : D}. function f defined
following way: f (hD, W i) = CIRC(T ; PD ; Z), = W {a |a PD },
PD letters minimized, Z (the set letters occurring hD, W i)
varying letters. show f model-preserving poly-size reduction. fact, given
set PFN defaults let gD function interpretation Z,
gD (M ) = {a PD |M |= }. Clearly, f poly-size, gD realized circuit
whose size polynomial |D|, model least one extension hD, W iff
gD (M ) |= CIRC(T ; PD ; Z). dependence g stresses fact that,
case, circuit g depend whole knowledge base hD, W i, D.
Clearly, models preserved, theorems preserved well. weaker form
reduction following one, theorems preserved. case
allow theorems KB translated simple circuit gKB theorems KB.
Definition 9 (Theorem Preservation) poly-size reduction f : F1 7 F2 satisfies theorempreservation exists polynomial p that, knowledge base KB F1 ,
exists circuit gKB whose size bounded p(|KB|), every formula
variables KB, holds KB `F1 iff f (KB) `F2 gKB ().
theorem-preserving reduction property similar model-preserving
reduction, knowledge bases used represent theorems rather models.
Namely, knowledge base KB translated another knowledge base f (KB)
12

fiSpace Efficiency Propositional Knowledge Representation Formalisms

used represent set theorems. precisely, theorem
KB represented theorem gKB () f (KB).
Winslett (1989) shown example reduction updated knowledge bases
PL theorem-preserving model-preserving. Using Winsletts reduction, one
could use machinery propositional reasoning KB,
update (plus reduction). reduction shown previous Example 3
theorem-preserving, time g identity circuit.
remark definitions reduction general proposed
Gogic collegues (1995). fact, authors consider notion analogous
Definition 8. case g identity i.e., models two formalisms
identical. allowing simple translation g models Definition 8 covers
general forms reductions preserving models, one Example 3.

5. Comparing Space Efficiency PKR Formalisms
section show use compilability classes defined Section 3 compare
succinctness PKR formalisms.
Let F1 F2 two formalisms representing sets models. prove
knowledge base F1 reduced, via poly-size reduction, knowledge base
F2 satisfying model-preservation compilability class problem
model checking (first input: KB, second input: interpretation) F2 higher equal
compilability class problem model checking F1 .
Similarly, prove theorem-preserving poly-size reductions exist
compilability class problem inference (first input: KB, second input: formula, cf.
definition problem pli) F1 higher equal compilability class
problem inference F2 .
order simplify presentation proof theorems introduce
definitions.
Definition 10 (Model hardness/completeness) Let F PKR formalism C
complexity class. problem model checking F belongs compilability class
k;C, model varying part instances, say F model-C.
Similarly, model checking k;C-complete (hard), say F model-C-complete
(hard).
Definition 11 (Theorem hardness/completeness) Let F PKR formalism
C complexity class. problem inference formalism F belongs
compilability class k;C, whenever formula varying part instance, say
F thm-C. Similarly, inference k;C-complete (hard), say F thmC-complete (hard).
definitions implicitly define two hierarchies, parallel polynomial hierarchy (Stockmeyer, 1976): model hierarchy (model-P,model-NP,model-p2 ,etc.)
theorem hierarchy (thm-P,thm-NP,thm-2p ,etc.). higher formalism model
hierarchy, efficiency representing models analogously theorems.
example (Cadoli et al., 1996, Thm. 6), characterize model theorem classes
Propositional Logic.
13

fiCadoli, Donini, Liberatore, & Schaerf

Theorem 3 PL model-P thm-coNP-complete.
formally establish connection succinctness representations
compilability classes. following theorems, complexity classes C, C1 , C2 belong
polynomial hierarchy (Stockmeyer, 1976). Theorems 5 7 assume
polynomial hierarchy collapse.
start showing existence model-preserving reductions formalism
another one easily obtained levels model hierarchy satisfy simple
condition.
Theorem 4 Let F1 F2 two PKR formalisms. F1 model-C F2 modelC-hard, exists poly-size reduction f : F1 7 F2 satisfying model preservation.
Proof. Recall since F1 model-C, model checking F1 k;C, since F2
model-C-hard, model checking F1 non-uniformly comp-reducible model checking
F2 . is, (adapting Def. 6) exist two poly-size binary functions f1 f2 ,
polynomial-time binary function g every pair hKB, holds
|=F1 KB g(f2 (KB, |M |), ) |=F2 f1 (KB, |M |)
(note g poly-time function appearing Def. 6, different gKB
poly-size circuit appearing Def. 8).
observe |M | computed KB simply counting letters appearing KB; let f3 counting function, i.e., |M | = f3 (KB). Clearly, f3 poly-size.
Define reduction f f (KB) = f1 (KB, f3 (KB)). Since poly-size functions closed
composition, f poly-size. show f model-preserving reduction.
Definition 8, need prove exists polynomial p knowledge
base KB F1 , exists poly-size circuit gKB every interpretation
variables KB holds |=F1 KB iff gKB (M ) |=F2 f (KB).
proceed follows: Given KB F1 , compute z = f2 (KB, |M |) = f2 (KB, f3 (KB)).
Since f2 f3 poly-size, z size polynomial respect |KB|. Define circuit
gKB (M ) one computing g(z, ) = g(f2 (KB, f3 (KB)), ). Since g poly-time
function inputs, z poly-size KB, exists representation g(z, )
circuit gKB whose size polynomial wrt KB. construction, |=F1 KB iff
gKB (M ) |=F2 f (KB). Hence, thesis follows.
following theorem, instead, gives simple method prove modelpreserving reduction one formalism another one.

Theorem 5 Let F1 F2 two PKR formalisms. polynomial hierarchy
collapse, F1 model-C1 -hard, F2 model-C2 , C2 C1 , poly-size
reduction f : F1 7 F2 satisfying model preservation.
Proof. show reduction exists, C1 /poly C2 /poly implies
polynomial hierarchy collapses level (Yap, 1983). Let complete problem
class C1 e.g., C1 p3 may validity -quantified boolean formulae
(Stockmeyer, 1976). Define problem follows.
= {hx, yi | x = (the empty string) A}
14

fiSpace Efficiency Propositional Knowledge Representation Formalisms

already proved (Cadoli et al., 1996b, Thm. 6) k;C1 -complete. Since model
checking F1 model-C1 -hard, non-uniformly comp-reducible model checking
F1 . is, (adapting Def. 6) exist two poly-size binary functions f1 f2 ,
polynomial-time binary function g every pair h, yi, holds h, yi
g(f2 (, |y|), y) |=F1 f1 (, |y|). Let |y| = n. Clearly, knowledge base f1 (, |y|)
depends n, i.e., exactly one knowledge base integer. Call KBn .
Moreover, f2 (, |y|) = f2 (, n) depends n only: call (for Oracle). Observe
KBn polynomial size respect n.
exists poly-size reduction f : F1 7 F2 satisfying model preservation, given
knowledge base KBn exists poly-size circuit hn g(On , y) |=F1 KBn
hn (g(On , y)) |=F2 f (KBn ).
Therefore, k;C1 -complete problem non-uniformly reduced problem
k;C2 follows: Given y, size |y| = n one obtains (with preprocessing)
f (KBn ) . one checks whether interpretation hn (g(On , y)) (computable
polynomial time given n, ) model F2 f (KBn ). fact model
checking F2 k;C2 , k;C1 k;C2 . proved previous paper
result implies C1 /poly C2 /poly (Cadoli et al., 1996b, Thm. 9),
turns implies polynomial hierarchy collapses (Yap, 1983).
theorems show hierarchy classes model-C exactly characterizes
space efficiency formalism representing sets models. fact, two formalisms
level model hierarchy reduced via poly-size
reduction (Theorem 4), poly-size reduction formalism (F1 ) higher
hierarchy one (F2 ) lower class (Theorem 5). latter case say
F1 space-efficient F2 .
Analogous results (with similar proofs) hold poly-size reductions preserving theorems.
Namely, next theorem shows infer existence theorem-preserving reductions,
one gives way prove theorem-preserving reduction
one formalism another one.
Theorem 6 Let F1 F2 two PKR formalisms. F1 thm-C F2 thm-Chard, exists poly-size reduction f : F1 7 F2 satisfying theorem preservation.
Proof. Recall since F1 thm-C, inference F1 k;C, since F2 thm-Chard, inference F1 non-uniformly comp-reducible inference F2 . is, (adapting
Def. 6) exist two poly-size binary functions f1 f2 , polynomial-time binary
function g1 every pair hKB, holds
KB `F1 f1 (KB, ||) `F2 g(f2 (KB, ||), )
(here distinguish poly-time function g appearing Def. 6 poly-size circuit
gKB appearing Def. 9).
Using Theorem 1 replace || upper bound formula.
Assumption 1, know size less equal size KB; therefore
replace || |KB|. formula becomes
KB `F1 f1 (KB, |KB|) `F2 g(f2 (KB, |KB|), )
15

fiCadoli, Donini, Liberatore, & Schaerf

Define reduction f f (KB) = f1 (KB, f3 (KB)), f3 poly-size function
computes size input. Since poly-size functions closed composition,
f poly-size.
Now, show f theorem-preserving reduction, i.e.,f satisfies Def. 9.
amounts proving knowledge base KB F1 exists circuit gKB ,
whose size poynomial wrt KB, every formula variables KB
holds KB `F1 iff f (KB) `F2 gKB ().
proceed proof Theorem 4: Given KB F1 , let z = f2 (KB, f3 (KB)).
Since f2 f3 poly-size, z polynomial size respect |KB|. Define gKB () =
g(z, ) = g(f2 (KB, f3 (KB)), ). Clearly, gKB represented circuit polynomial
size wrt KB. construction, KB `F1 iff f (KB) `F2 gKB (). Hence, claim
follows.
Theorem 7 Let F1 F2 two PKR formalisms. polynomial hierarchy
collapse, F1 thm-C1 -hard, F2 thm-C2 , C2 C1 , poly-size
reduction f : F1 7 F2 satisfying theorem preservation.
Proof. show reduction exists, C1 /poly C2 /poly polynomial
hierarchy collapses level (Yap, 1983). Let complete problem class C1 .
Define problem proof Theorem 5: problem k;C1 -complete (Cadoli
et al., 1996b, Thm. 6). Since inference F1 thm-C1 -hard, non-uniformly compreducible inference F1 . is, (adapting Def. 6) exist two poly-size binary
functions f1 f2 , polynomial-time binary function g every pair h, yi,
h, yi f1 (, |y|) `F1 g(f2 (, |y|), y). Let |y| = n. Clearly, knowledge
base f1 (, |y|) depends n, i.e., one knowledge base integer. Call
KBn . Moreover, f2 (, |y|) = f2 (, n) depends n: call (for Oracle).
Observe KBn polynomial size respect n.
exists poly-size reduction f : F1 7 F2 satisfying theorem preservation,
given knowledge base KBn exists poly-time function hn KBn `F1
g(On , y) f (KBn ) `F2 hn (g(On , y)).
Therefore, k;C1 -complete problem non-uniformly reduced problem
k;C2 follows: Given y, size |y| = n one obtains (with arbitrary preprocessing)
f (KBn ) . one checks whether formula hn (g(On , y)) (computable polytime given ) theorem F2 f (KBn ). fact inference F2
k;C2 , k;C1 k;C2 . follows C1 /poly C2 /poly (Cadoli et al.,
1996b, Thm. 9), implies polynomial hierarchy collapses (Yap, 1983).
Theorems 4-7 show compilability classes characterize precisely relative
capability PKR formalisms represent sets models sets theorems. example,
consequence Theorems 3 7 poly-size reduction PL
syntactic restriction PL allowing Horn clauses preserves theorems, unless
polynomial hierarchy collapses. Kautz Selman (1992) proved non-existence
reduction problem strictly related pli using specific proof.

16

fiSpace Efficiency Propositional Knowledge Representation Formalisms

6. Applications
section devoted application theorems presented previous section.
Using Theorems 4-7 results previously known literature, able asses
model- theorem-compactness PKR formalisms.
assume definitions Propositional Logic, default logic (Reiter, 1980),
circumscription (McCarthy, 1980) known. Definitions WIDTIO, SBR, GCWA,
stable model semantics appropriate subsections.
following proofs refer problem 3QBF, is, problem verifying
whether quantified Boolean formula XY.F valid, X disjoint sets
variables, F set clauses alphabet X , composed three literals.
example, simple formula belonging class is: x1 , x2 y1 , y2 ((x1 y2 )
(x1 x2 y1 ) (y1 x2 y2 ) (x1 x2 )).
problem deciding validity 3QBF complete class p2 . consequence, corresponding problem 3QBF, deciding whether input composed
string () fixed part quantified Boolean formula XY.F varying
one, complete class k;2p (Liberatore, 1998). Notice hardness
proofs show sequel use problems without meaningful fixed part.
6.1 Stable Model Semantics
Stable model semantics (SM) introduced Gelfond Lifschitz (1988) tool
provide semantics logic programs negation. original proposal one
standard semantics logic programs. recall definition propositional
stable model.
Let P propositional, general logic program. Let subset (i.e., interpretation) atoms P . Let P program obtained P following way:
clause C P contains body negated atom C deleted;
body clause contains negated atom 6 deleted
body clause. least Herbrand model P stable model
P.
formalism sm, consider program P knowledge base. write
P |=sm Q denote query Q implied logic program P Stable Model
semantics.
order prove result, need define kernel graph.
Definition 12 (Kernel) Let G = (V, E) graph. kernel G set K V
that, denoting H = V K, holds:
1. H vertex cover G
2. j H, exists K (i, j) E.
state theorem compilability class inference stable model
semantics, corresponding theorem compactness class.
Theorem 8 problem inference Stable Model semantics k;coNP-complete,
thus Stable Model Semantics thm-coNPcomplete.
17

fiCadoli, Donini, Liberatore, & Schaerf

Proof. Membership class follows fact problem coNP-complete
(Marek & Truszczynski, 1991). hardness, adapt proof Marek
Truszczynski (1991) showing deciding whether query true stable models
coNP-hard.
Let kernel language {, G} G graph least one kernel.
Let |G| = n, observe G cannot vertices size n.
show n, exists logic program Pn every graph G
n vertices, exists query QG G kernel iff Pn 6|=sm QG .
Let alphabet Pn composed following 2n2 + n propositional letters:
{ai |i {1..n} } {rij , sij |i, j {1..n} }.
program Pn defined as:
aj
sij
rij

:
:
:



ai , rij

rij
i, j {1..n}


sij

Given graph G = (V, E), query QG defined
QG = (

_

(i,j)E

rij ) (

_

rij )

(i,j)6E

reduction kernel sm defined as: f1 (x, n) = Pn , i.e., f1 depends
second argument, f2 (x, n) = , i.e., f2 constant function, g = Qy , i.e., given
graph G, circuit g computes query QG .
result, k; reduction. show reduction correct, i.e.,
h, Gi kernel (G kernel) iff Pn 6|=SM QG .
If-part. Suppose Pn 6|=SM QG . Then, exists stable model Pn
|= QG . Observe QG equivalent conjunction rij (i, j) E,
rij (i, j) 6 E. Simplifying Pn QG obtain clauses:
aj : ai , (i, j) E

(1)

Observe contains sij (i, j) 6 E, order stable, i.e.,
support atoms rij (i, j) E contains atom sij (i, j) E.
Let H = {j|aj }, K = {i|ai 6 }. H vertex cover G, since
edge (i, j) E, satisfy corresponding clause (1) aj : ai , hence either
ai , aj . Moreover, j H, atom aj , since
stable model, exists clause aj : ai ai 6 , is, K. Therefore,
K kernel G.
Only-if part. Suppose G = (V, E) kernel K, let H = V K. Let
interpretation
= {rij |(i, j) E} {sij |(i, j) 6 E} {aj |j H}

Obviously, 6|= QG . show stable model Pn , i.e., least
Herbrand model PnM . fact, PnM contains following clauses:
sij
rij
aj

: rij

(i, j) 6 E

(2)

K

(4)

(i, j) E

18

(3)

fiSpace Efficiency Propositional Knowledge Representation Formalisms

Clauses last line obtained clauses Pn form aj : ai , rij ,
clauses H (hence ai ) deleted, clauses negated
atom ai deleted, since K, hence ai 6 . aj , vertex j H,
hence edge (i, j) E, K. Hence clauses (4) (3) PnM , hence
least Herbrand model PnM exactly aj j H.
6.2 Minimal Model Reasoning
One successful form non-monotonic reasoning based selection
minimal models. Among various formalisms based minimal model semantics consider Circumscription (McCarthy, 1980) Generalized Closed World Assumption
(GCWA) (Minker, 1982), formalism represent knowledge closed world.
assume reader familiar Circumscription, briefly present
definition GCWA. model semantics GCWA defined (a letter):
|=GCW KB iff |= KB{a | positive clause , KB 6` KB 6` a}
present results two formalisms.
Theorem 9 problem model checking Circumscription k;coNP-complete, thus
Circumscription model-coNP-complete.
result trivial corollary theorem already proved (Cadoli et al., 1997, Theorem 6). fact, proof implicitly shows model checking circumscription
k;coNP-complete.
Theorem 10 problem model checking GCWA k;P, thus GCWA
model-P.
Proof. already pointed (Cadoli et al., 1997), possible rewrite GCW A(T )
propositional formula F that, given model , |= GCW A(T )
|= F . Moreover, size F polynomially bounded size .
consequence, model compactness GCWA class PL. Theorem 3
thesis follows.
Theorem 11 problem inference Circumscription k;p2 -complete, thus Circumscription thm-p2 -complete.
result trivial corollary theorem published previous paper (Cadoli
et al., 1997, Theorem 7) implicitly shows inference circumscription k;2p complete.
Theorem 12 problem inference GCWA k;coNP-complete, thus GCWA
thm-coNP-complete.
Proof. already pointed proof Theorem 10, possible rewrite
GCW A(T ) formula F equivalent it. consequence, formula
theorem GCW A(T ) theorem F . Thus, GCWA
theorem compexity PL. Since GCWA generalization PL, follows GCWA
theorem compactness class PL. Hence, GCWA thm-coNP-complete.
19

fiCadoli, Donini, Liberatore, & Schaerf

6.3 Default Logic
subsection present results default logic, two variants (credulous
skeptical). details two main variants default logic, refer
reader paper Kautz Selman (1991). Notice model-compactness
applicable skeptical default logic.
Theorem 13 problem model checking skeptical default logic k;p2 complete,
thus skeptical default logic model-p2 complete.
Proof. proof membership straightforward: since model checking skeptical
default logic p2 (Liberatore & Schaerf, 1998), follows k;p2 .
proof k;p2 -hardness similar proof p2 -hardness (Liberatore & Schaerf,
1998). reduction problem 3QBF. Let h, instance 3QBF,
= XY.F represents valid 3QBF formula, string.
Let n size formula F . implies variables formula
n. Let = {1 , . . . , k } set clauses three literals alphabet.
number clauses three literals alphabet n variables less O(n3 ),
thus bounded polynomial n.
prove XY.F valid model extension hW, Di,

=

W

=

[ : ci



ci

: ci
,
ci

= {ci | F }







[ : w (w xi ) : w (w xi )

,

w xi

xi X

w xi



(

:w

V

ci

w



set {ci | 1 k} set new variables, one-to-one elements .
Note W depends size n F , depends F . result,
nucomp reduction.
prove formula valid model extension
default theory hW, Di. similar already published proof (Liberatore &
Schaerf, 1998). Consider evaluation C1 variables {ci } evaluation X1
variables X. Let D0 following set defaults.
0

=

[ : ci [ : ci

ci C1

ci

ci 6C1

ci



[ : w (w xi )

w xi

xi X1

[

xi X1



: w (w xi )
w xi



set defaults chosen set R consequences corresponds
sets C1 X1 . Namely, have:
ci C1 iff R |= ci

ci 6 C1 iff R |= ci

xi X1 iff R |= w xi

xi 6 X1 iff R |= w xi
20

)

fiSpace Efficiency Propositional Knowledge Representation Formalisms

Now, prove consequences set defaults extension
default theory QBF formula valid. Since defaults semi-normal,
prove that:
1. set consequences D0 consistent;
2. default applicable, is, default whose precondition
consistent R.
Consistency R follows construction: assigning ci true ci C1 , etc.,
obtain model R.
:ci
prove default applicable. ci C1 , default c

:ci
applicable, vice versa, ci C1 , ci applicable. Moreover, none

i)
, applicable xi 6 X1 , case w xi R, thus
defaults :w(wx
wxi
w would follow (while w justification default). similar statement holds
:w(wxi )
xi X1 .
wxi

V

:w

ci


result, applicable default may last one,
(recall
w
F negated). default applicable if, given evaluation ci
xi s, set clauses satisfiable. amount say: extension
last default applicable QBF formula valid. Now,
last default applicable, model extension w
consequence last default w 6|= . converse holds: last default
applicable model default theory.
result, QBF valid model given default theory.

Theorem 14 inference problem skeptical default logic k;p2 complete, thus skeptical default logic thm-2p complete.
Proof. Since inference skeptical default logic p2 , k;p2 . k;p2 -hardness
comes simple reduction circumscription. Indeed, circumscription
formula equivalent conjunction extensions default theory hT, Di,
(Etherington, 1987):
D=

[ : xi

xi

result, CIRC(T ) |= Q Q implied hT, Di skeptical semantics. Since hT, Di depends (and Q) nucomp reduction. Since
inference circumscription k;2p -complete (see Theorem 11), follows skeptical
default logic k;2p -hard.
Theorem 15 inference problem credulous default logic k;p2 complete, thus
credulous default logic thm-p2 complete.

21

fiCadoli, Donini, Liberatore, & Schaerf

Proof. proof similar proof model checking skeptical default logic.
Indeed, problems k;p2 complete. Since problem p2 , proved Gottlob
(1992), k;p2 . Thus, prove hard class.
prove 3QBF problem reduced problem verifying whether
formula implied extensions default theory (that is, inference credulous
default logic).
Namely, formula XY.F valid Q derived extension
default theory hD, W i, W defined follows ( set
clauses three literals alphabet F , C set new variables, one-to-one
).
W

=

=

[ : ci

ci

ci C

Q =

^

F

ci

: ci
,
ci

^

6F





[ : xi

xi X

xi

: xi
,
xi





(

V

(

ci C ci

w

) :

)

ci w

Informally, proof goes follows: truth evaluation variables C
X set defaults justified consistent. simple necessary
sufficient condition consequences set defaults extension
following. If, evaluation, formula


^



ci =true

valid, last default applicable, thus extension contains w. converse
holds: formula valid evaluation, variable w
extension.
result, exists extension Q holds exists
extension ci true F , w holds.
variables ci given value, formula equivalent F . result,
extension exists exists truth evaluation variables X
F valid.
6.4 Belief Revision
Many formalisms belief revision proposed literature, focus
two them: WIDTIO (When Doubt Throw Out) SBR (Skeptical Belief Revision).
Let K set propositional formulae, representing agents knowledge world.
new formula added K, problem possible inconsistency K
arises. first step define set sets formulae W (K, A) following
way:
W (K, A) = {K 0 K 0 maximal consistent subset K {A} containing }
22

fiSpace Efficiency Propositional Knowledge Representation Formalisms

set formulae K 0 W (K, A) maximal choice formulae K
consistent and, therefore, may retain incorporating A. definition
set leads two different revision operators: SBR WIDTIO.
SBR Skeptical Belief Revision (Fagin, Ullman, & Vardi, 1983; Ginsberg, 1986). revised
.
theory defined set theories: K = {K 0 | K 0 W (K, A)}. Inference
revised theory defined inference theories:
K `SBR Q iff

K 0 W (K, A) , K 0 ` Q

model semantics defined as:
|=SBR K iff

exists K 0 W (K, A) |= K 0

WIDTIO Doubt Throw (Winslett, 1990). simpler (but somewhat
drastical) approach so-called WIDTIO, retain formulae K
belong sets W (K, A). Thus, inference defined as:
K `W IDT IO Q iff



W (K, A) ` Q

model semantics formalism defined as:
|=W IDT IO K

iff

|=

\

W (K, A)

results model compactness shown Liberatore Schaerf (2000).
recall them.
Theorem 16 (Liberatore & Schaerf, 2000, Theorem 11) problem model checking WIDTIO k;P, thus WIDTIO model-P.
Theorem 17 (Liberatore & Schaerf, 2000, Theorem 5) problem model checking Skeptical Belief Revision k;coNP-complete, thus Skeptical Belief Revision
model-coNP-complete.
results theorem compactness quite simple provide proofs.
Theorem 18 problem inference WIDTIO k;coNP-complete, thus WIDTIO
thm-coNP-complete.
Proof. Membership class thm-coNP immediately follows definition. fact,
rewrite K propositional formula computing set W (K, A)
constructing intersection. construction intersection size less equal
size K A. consequence, preprocessing, deciding whether formula Q
follows K problem coNP. Hardness follows obvious fact PL
reduced WIDTIO PL thm-coNP-complete (see Theorem 3).
Theorem 19 problem inference Skeptical Belief Revision k;p2 -complete,
thus Skeptical Belief Revision thm-p2 -complete.
23

fiCadoli, Donini, Liberatore, & Schaerf

Propositional
Logic
WIDTIO
Skeptical
Belief Revision
Circumscription
GCWA

Skeptical
Default Reasoning
Credulous
Default Reasoning
Stable Model
Semantics

Time Complexity
P

p2 -complete
(Liberatore & Schaerf, 1996)
coNP-complete
(Liberatore & Schaerf, 1996)
coNP-complete
(Cadoli, 1992)
coNP-hard,
p2 [log n]
(Eiter & Gottlob, 1993)
p2 -complete
(Liberatore & Schaerf, 1998)
N/A

Space Efficiency
model-P

model-P
Th. 16
model-coNP-complete
Th. 17
model-coNP-complete
Th. 9
model-P
Th. 10

P


model-P


model-p2 -complete
Th. 13
N/A

Table 1: Complexity model checking Space Efficiency Model Representations
Proof. Membership follows complexity results Eiter Gottlob (1992),
show deciding whether K `SBR Q p2 -complete problem. Hardness
follows easily Theorem 17. fact, |=SBR K iff K 6`SBR f orm(M ),
f orm(M ) formula represents model . consequence, model checking
reduced complement inference. Thus inference k;p2 -complete.
6.5 Discussion
Tables 1 2 summarize results space efficiency PKR formalisms
proved (a dash denotes folklore result).
First all, notice space efficiency always related time complexity.
example, compare detail WIDTIO circumscription. table follows
model checking harder WIDTIO circumscription, inference
complexity cases. Nevertheless, since circumscription thm-p2 -complete
WIDTIO thm-coNP-complete (and thus thm-p2 ), exists poly-size reduction
WIDTIO circumscription satisfying theorem preservation. converse
hold: since circumscription thm-2p -complete WIDTIO thm-coNP, unless Polynomial Hierarchy collapse theorem-preserving poly-size reduction
former formalism latter. Hence, circumscription compact formalism
WIDTIO represent theorems. Analogous considerations done models.
Intuitively, due fact WIDTIO model checking inference
require lot work revised knowledge base alonecomputing intersection

24

fiSpace Efficiency Propositional Knowledge Representation Formalisms

Propositional
Logic
WIDTIO
Skeptical
Belief Revision
Circumscription
GCWA
Skeptical
Default Reasoning
Credulous
Default Reasoning
Stable Model
Semantics

Time Complexity
coNP-complete
(Cook, 1971)
p2 -complete
(Eiter & Gottlob, 1992) & (Nebel, 1998)
p2 -complete
(Eiter & Gottlob, 1992)
p2 -complete
(Eiter & Gottlob, 1993)
p2 -complete
(Eiter & Gottlob, 1993) & (Nebel, 1998)
p2 -complete
(Gottlob, 1992)
p2 -complete
(Gottlob, 1992)
coNP-complete
(Marek & Truszczynski, 1991)

Space Efficiency
thm-coNP-complete
(Cadoli et al., 1996)
thm-coNP-complete
Th. 18
thm-p2 -complete
Th. 19
thm-p2 -complete
Th. 11
thm-coNP-complete
Th. 12
thm-p2 -complete
Th. 14
thm-p2 -complete
Th. 15
thm-coNP-complete
Th. 8

Table 2: Complexity inference Space Efficiency Theorem Representations
elements W (K, A). done, one left model checking inference
PL. Hence, WIDTIO space efficiency PL, circumscription.
Figures 3 4 contain information Tables 1 2, highlight existing reductions. figure contains two diagrams, left one showing existence
polynomial-time reductions among formalisms, right one showing existence polysize reductions. arrow formalism another denotes former
reduced latter one. use bidirectional arrow denote arrows directions
dashed box enclose formalisms reduced one another. Note
formalisms appropriate representing sets models, others perform
better sets formulae. interesting relation exists skeptical default reasoning
circumscription. model-preserving poly-size reduction circumscription skeptical default reasoning (Gogic et al., 1995), theorem-preserving poly-size
reduction exists, shown Theorem 14.

7. Related Work Conclusions
idea comparing compactness KR formalisms representing information
novel AI. well known first-order circumscription represented secondorder logic (Schlipf, 1987). Kolaitis Papadimitriou (1990) discuss several computational
aspects circumscription. Among many interesting results show reduction
restricted form first-order circumscription first-order logic. proposed reduction
increase size original formula exponential factor. left open
problem show whether increase intrinsic, different compactness
properties two formalisms, exists space-efficient reduction.

25

fiCadoli, Donini, Liberatore, & Schaerf

- Skeptical

WIDTIO

Default

Skeptical Default

6

6

GCWA
6

SBR - Circumscription

SBR - Circumscription

.

6

6

PL - Stable Model

PL - WIDTIO

a. Time Complexity

- GCWA - Stable
Model

b. Space Efficiency

Figure 3: Complexity Model Checking vs. Space Efficiency Model Representation

WIDTIO - GCWA

6

?
Skeptical
SBR - Circum - Default



PL -

Credulous
Default



SBR - Circum-



Skeptical
Default

AK


Stable
Model

Credulous
Default






Stable
PL- WIDTIO - GCWA - Model

a. Time complexity

b. Space efficiency

Figure 4: Complexity Inference vs. Space Efficiency Theorem Representation

26

fiSpace Efficiency Propositional Knowledge Representation Formalisms

first-order language used, results compactness existence reductions
reported Schlipf (1995).
Khardon Roth (1996, 1997), Kautz, Kearns Selman (1995) propose modelbased representations KB Propositional Logic, compare formula-based
representations. Although results significant comparing representations within
PL, refer formalism, hence applicable comparison different PKR formalisms. comment applies idea representing
KB efficient basis Moses Tennenholz (1996), since refers one
PKR formalism, namely, PL.
active area research studies connections various non-monotonic logics.
particular, several papers discussing existence translations polynomial time satisfy intuitive requirements modularity faithfulness.
Janhunen (1998), improving results Imielinski (1987) Gottlob (1995), shows
default logic expressive, among non-monotonic logics examined, since
circumscription autoepistemic logic modularly faithfully embedded default logic, way around. results interest help
fully understand relation among many knowledge representation formalisms,
directly related ours. fact, allow translations general
polynomial time, papers consider translations use
polynomial time satisfy additional requirements.
first result compactness representations propositional language presented, best knowledge, Kautz Selman (1992). show that, unless
collapse polynomial hierarchy, size smallest representation
least Horn upper bound propositional theory superpolynomial size
original theory. results presented different form comprehensive paper (Selman & Kautz, 1996). technique used proof
used us researchers prove several results relative complexity
propositional knowledge representation formalisms (Cadoli et al., 1996, 1997, 1999; Gogic
et al., 1995).
recent paper (Cadoli et al., 1996b) introduced new complexity measure, i.e.,
compilability. paper shown measure inherently related
succinctness PKR formalisms. analyzed PKR formalisms respect two succinctness measures: succinctness representing sets models succinctness representing
sets theorems.
main advantage framework machinery necessary formal way
talking relative ability PKR formalisms compactly represent information.
particular, able formalize intuition specific PKR formalism provides
one compact ways represent models/theorems among PKR formalisms
specific class.
opinion, proposed framework improves state art two different
aspects:
1. proofs presented previous papers compare pairs PKR formalisms, example propositional circumscription Propositional Logic (Cadoli
et al., 1997). results allow precise classification level
27

fiCadoli, Donini, Liberatore, & Schaerf

compactness considered formalisms. Rephrasing adapting results
framework allows us infer circumscription model-coNP-complete
thm-p2 -complete. consequence, space-efficient
WIDTIO belief revision formalism representing sets models sets theorems.
2. Using proposed framework possible find criteria adapting existent
polynomial reductions showing C-hardness reductions show model-C thmC-hardness, C class polynomial hierarchy (Liberatore, 1998).

Acknowledgments
paper extended revised version paper authors appeared
proceedings fifth international conference principles knowledge representation reasoning (KR96) (Cadoli, Donini, Liberatore, & Schaerf, 1996a). Partial
supported given ASI (Italian Space Agency) CNR (National Research
Council Italy).

References
Ben-Eliyahu, R., & Dechter, R. (1991). Default logic, propositional logic constraints.
Proceedings Ninth National Conference Artificial Intelligence (AAAI91),
pp. 379385.
Ben-Eliyahu, R., & Dechter, R. (1994). Propositional semantics disjunctive logic programs. Annals Mathematics Artificial Intelligence, 12, 5387.
Boppana, R., & Sipser, M. (1990). complexity finite functions. van Leeuwen, J.
(Ed.), Handbook Theoretical Computer Science, Vol. A, chap. 14. Elsevier Science
Publishers (North-Holland), Amsterdam.
Cadoli, M. (1992). complexity model checking circumscriptive formulae. Information Processing Letters, 44, 113118.
Cadoli, M., Donini, F., Liberatore, P., & Schaerf, M. (1996a). Comparing space efficiency
propositional knowledge representation formalisms. Proceedings Fifth International Conference Principles Knowledge Representation Reasoning
(KR96), pp. 364373.
Cadoli, M., Donini, F. M., Liberatore, P., & Schaerf, M. (1996b). Feasibility unfeasibility off-line processing. Proceedings Fourth Israeli Symposium Theory
Computing Systems (ISTCS96), pp. 100109. IEEE Computer Society Press.
url = ftp://ftp.dis.uniroma1.it/PUB/AI/papers/cado-etal-96.ps.gz.
Cadoli, M., Donini, F. M., Liberatore, P., & Schaerf, M. (1997).
Preprocessing intractable problems.
Tech. rep. DIS 24-97, Dipartimento di
url =
Informatica e Sistemistica, Universita di Roma La Sapienza.
http://ftp.dis.uniroma1.it/PUB/AI/papers/cado-etal-97-d-REVISED.ps.gz.
28

fiSpace Efficiency Propositional Knowledge Representation Formalisms

Cadoli, M., Donini, F. M., Liberatore, P., & Schaerf, M. (1999). size revised
knowledge base. Artificial Intelligence, 115 (1), 2564.
Cadoli, M., Donini, F. M., & Schaerf, M. (1995). compact representations propositional circumscription. Proceedings Twelfth Symposium Theoretical Aspects Computer Science (STACS95), pp. 205216. Extended version RAP.14.95
DIS, Univ. Roma La Sapienza, July 1995.
Cadoli, M., Donini, F. M., & Schaerf, M. (1996). intractability non-monotonic reasoning
real drawback?. Artificial Intelligence, 88 (12), 215251.
Cadoli, M., Donini, F. M., Schaerf, M., & Silvestri, R. (1997). compact representations
propositional circumscription. Theoretical Computer Science, 182, 183202.
Cook, S. A. (1971). complexity theorem-proving procedures. Proceedings
Third ACM Symposium Theory Computing (STOC71), pp. 151158.
Eiter, T., & Gottlob, G. (1992). complexity propositional knowledge base revision,
updates counterfactuals. Artificial Intelligence, 57, 227270.
Eiter, T., & Gottlob, G. (1993). Propositional circumscription extended closed world
reasoning 2p -complete. Theoretical Computer Science, 114, 231245.
Etherington, D. V. (1987). Reasoning incomplete information. Morgan Kaufmann,
Los Altos, Los Altos, CA.
Fagin, R., Ullman, J. D., & Vardi, M. Y. (1983). semantics updates databases.
Proceedings Second ACM SIGACT SIGMOD Symposium Principles
Database Systems (PODS83), pp. 352365.
Garey, M. R., & Johnson, D. S. (1979). Computers Intractability: Guide
Theory NP-Completeness. W.H. Freeman Company, San Francisco, Ca.
Gelfond, M., & Lifschitz, V. (1988). stable model semantics logic programming.
Proceedings Fifth Logic Programming Symposium, pp. 10701080. MIT
Press.
Gelfond, M., Przymusinska, H., & Przymusinsky, T. (1989). relationship
circumscription negation failure. Artificial Intelligence, 38, 4973.
Ginsberg, M. L. (1986). Conterfactuals. Artificial Intelligence, 30, 3579.
Gogic, G., Kautz, H. A., Papadimitriou, C., & Selman, B. (1995). comparative linguistics knowledge representation. Proceedings Fourteenth International
Joint Conference Artificial Intelligence (IJCAI95), pp. 862869.
Gottlob, G. (1992). Complexity results nonmonotonic logics. Journal Logic
Computation, 2, 397425.
Gottlob, G. (1995). Translating default logic standard autoepistemic logic. Journal
ACM, 42, 711740.
29

fiCadoli, Donini, Liberatore, & Schaerf

Imielinski, T. (1987). Results translating defaults circumscription. Artificial Intelligence, 32, 131146.
Janhunen, T. (1998). intertranslatability autoepistemic, default priority
logics, parallel circumscription. Proceedings Sixth European Workshop
Logics Artificial Intelligence (JELIA98), No. 1489 Lecture Notes Artificial
Intelligence, pp. 216232. Springer-Verlag.
Johnson, D. S. (1990). catalog complexity classes. van Leeuwen, J. (Ed.), Handbook
Theoretical Computer Science, Vol. A, chap. 2. Elsevier Science Publishers (NorthHolland), Amsterdam.
Karp, R. M., & Lipton, R. J. (1980). connections non-uniform uniform
complexity classes. Proceedings Twelfth ACM Symposium Theory
Computing (STOC80), pp. 302309.
Kautz, H. A., Kearns, M. J., & Selman, B. (1995). Horn approximations empirical data.
Artificial Intelligence, 74, 129145.
Kautz, H. A., & Selman, B. (1991). Hard problems simple default logics. Artificial
Intelligence, 49, 243279.
Kautz, H. A., & Selman, B. (1992). Forming concepts fast inference. Proceedings
Tenth National Conference Artificial Intelligence (AAAI92), pp. 786793.
Khardon, R., & Roth, D. (1996). Reasoning models. Artificial Intelligence, 87, 187
213.
Khardon, R., & Roth, D. (1997). Defaults relevance model-based reasoning. Artificial
Intelligence, 97, 169193.
Kobler, J., & Watanabe, O. (1998). New collapse consequences NP small circuits.
SIAM Journal Computing, 28 (1), 311324.
Kolaitis, P. G., & Papadimitriou, C. H. (1990). computational aspects circumscription. Journal ACM, 37 (1), 114.
Liberatore, P. (1995). Compact representation revision Horn clauses. Yao, X. (Ed.),
Proceedings Eighth Australian Joint Artificial Intelligence Conference (AI95),
pp. 347354. World Scientific.
Liberatore, P. (1998). Compilation intractable problems application artificial
intelligence.
Ph.D.
thesis,
Dipartimento di Informatica e Sistemistica, Universita di Roma La Sapienza. URL =
ftp://ftp.dis.uniroma1.it/pub/AI/papers/libe-98-c.ps.gz.
Liberatore, P., & Schaerf, M. (1996). complexity model checking belief revision update. Proceedings Thirteenth National Conference Artificial
Intelligence (AAAI96), pp. 556561.

30

fiSpace Efficiency Propositional Knowledge Representation Formalisms

Liberatore, P., & Schaerf, M. (1998). complexity model checking propositional
default logics. Proceedings Thirteenth European Conference Artificial
Intelligence (ECAI98), pp. 1822.
Liberatore, P., & Schaerf, M. (2000). compactness belief revision update operators. Tech. rep., Dipartimento di Informatica e Sistemistica, Universita di Roma La
Sapienza.
Marek, W., & Truszczynski, M. (1991). Autoepistemic logic. Journal ACM, 38 (3),
588619.
McCarthy, J. (1980). Circumscription - form non-monotonic reasoning. Artificial
Intelligence, 13, 2739.
Minker, J. (1982). indefinite databases closed world assumption. Proceedings
Sixth International Conference Automated Deduction (CADE82), pp. 292
308.
Moses, Y., & Tennenholtz, M. (1996). Off-line reasoning on-line efficiency: knowledge
bases. Artificial Intelligence, 83, 229239.
Nebel, B. (1998). hard revise belief base?. Dubois, D., & Prade, H. (Eds.),
Belief Change - Handbook Defeasible Reasoning Uncertainty Management Systems, Vol. 3. Kluwer Academic.
Reiter, R. (1980). logic default reasoning. Artificial Intelligence, 13, 81132.
Schlipf, J. S. (1987). Decidability definability circumscription. Annals Pure
Applied Logic, 35, 173191.
Schlipf, J. S. (1995). survey complexity undecidability results logic programming. Annals Mathematics Artificial Intelligence, 15, 257288.
Selman, B., & Kautz, H. A. (1996). Knowledge compilation theory approximation.
Journal ACM, 43, 193224.
Stockmeyer, L. J. (1976). polynomial-time hierarchy. Theoretical Computer Science,
3, 122.
Winslett, M. (1989). Sometimes updates circumscription. Proceedings Eleventh
International Joint Conference Artificial Intelligence (IJCAI89), pp. 859863.
Winslett, M. (1990). Updating Logical Databases. Cambridge University Press.
Yap, C. K. (1983). consequences non-uniform conditions uniform classes. Theoretical Computer Science, 26, 287300.

31


