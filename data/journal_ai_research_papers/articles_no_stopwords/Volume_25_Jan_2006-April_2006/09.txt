Journal Artificial Intelligence Research 25 (2006) 349-387

Submitted 06/05; published 03/06

Representing Conversations Scalable Overhearing
Gery Gutnik
Gal A. Kaminka

gutnikg@cs.biu.ac.il
galk@cs.biu.ac.il

Computer Science Department
Bar Ilan University
Ramat Gan 52900, Israel

Abstract
Open distributed multi-agent systems gaining interest academic community
industry. open settings, agents often coordinated using standardized
agent conversation protocols. representation protocols (for analysis, validation, monitoring, etc) important aspect multi-agent applications. Recently, Petri
nets shown interesting approach representation, radically
different approaches using Petri nets proposed. However, relative strengths
weaknesses examined. Moreover, scalability suitability
different tasks addressed. paper addresses challenges. First,
analyze existing Petri net representations terms scalability appropriateness overhearing, important task monitoring open multi-agent systems. Then,
building insights gained, introduce novel representation using Colored Petri
nets explicitly represent legal joint conversation states messages. representation approach offers significant improvements scalability particularly suitable
overhearing. Furthermore, show new representation offers comprehensive coverage conversation features FIPA conversation standards. present
procedure transforming AUML conversation protocol diagrams (a standard humanreadable representation), Colored Petri net representation.

1. Introduction
Open distributed multi-agent systems (MAS) composed multiple, independently-built
agents carry mutually-dependent tasks. order allow inter-operability agents
different designs implementation, agents often coordinate using standardized interaction protocols, conversations. Indeed, multi-agent community investing
significant effort developing standardized Agent Communication Languages (ACL) facilitate sophisticated multi-agent systems (Finin, Labrou, & Mayfield, 1997; Kone, Shimazu,
& Nakajima, 2000; ChaibDraa, 2002; FIPA site, 2003). standards define communicative acts, top them, interaction protocols, ranging simple queries
state another agent, complex negotiations auctions bidding contracts.
instance, FIPA Contract Net Interaction Protocol (FIPA Specifications, 2003b) defines
concrete set message sequences allows interacting agents use contract
net protocol negotiations.
Various formalisms proposed describe standards (e.g., Smith & Cohen,
1996; Parunak, 1996; Odell, Parunak, & Bauer, 2000, 2001b; AUML site, 2003). particular, AUMLAgent Unified Modelling Languageis currently used FIPA-ACL standards
c
2006
AI Access Foundation. rights reserved.

fiGutnik & Kaminka

(FIPA Specifications, 2003a, 2003b, 2003c, 2003d; Odell, Parunak, & Bauer, 2001a) 1 . UML
2.0 (AUML site, 2003), new emerging standard influenced AUML, potential
become FIPA-ACL standard (and forthcoming IEEE standard) future. However, moment, large set FIPA specifications remains formalized using AUML.
AUML intended human readability visualization, interaction protocols
ideally represented way amenable automated analysis, validation
verification, online monitoring, etc.
Lately, increasing interest using Petri nets (Petri Nets site, 2003) modelling
multi-agent interaction protocols (Cost, 1999; Cost, Chen, Finin, Labrou, & Peng, 1999,
2000; Lin, Norrie, Shen, & Kremer, 2000; Nowostawski, Purvis, & Cranefield, 2001; Purvis,
Hwang, Purvis, Cranefield, & Schievink, 2002; Cranefield, Purvis, Nowostawski, & Hwang,
2002; Ramos, Frausto, & Camargo, 2002; Mazouzi, Fallah-Seghrouchni, & Haddad, 2002;
Poutakidis, Padgham, & Winikoff, 2002). broad literature using Petri nets
analyze various aspects distributed systems (e.g. deadlock detection shown
Khomenco & Koutny, 2000), recent work specific uses Petri nets
multi-agent systems, e.g., validation testing (Desel, Oberweis, & Zimmer, 1997),
automated debugging monitoring (Poutakidis et al., 2002), dynamic interpretation
interaction protocols (Cranefield et al., 2002; de Silva, Winikoff, & Liu, 2003), modelling
agents behavior induced participation conversation (Ling & Loke, 2003)
interaction protocols refinement allowing modular construction complex conversations
(Hameurlain, 2003).
However, key questions remain open use Petri nets conversation representation. First, radically different approaches representation using Petri nets
proposed, relative strengths weaknesses investigated. Second,
many investigations addressed restricted subsets features needed representing complex conversations standardized FIPA (see detailed discussion
previous work Section 2). Finally, procedures proposed translating
human-readable AUML protocol descriptions corresponding machine-readable Petri
nets.
paper addresses open challenges context scalable overhearing. Here,
overhearing agent passively tracks many concurrent conversations involving multiple participants, based solely exchanged messages, participant
overheard conversations (Novick & Ward, 1993; Busetta, Serafini, Singh, & Zini,
2001; Kaminka, Pynadath, & Tambe, 2002; Poutakidis et al., 2002; Busetta, Dona, & Nori,
2002; Legras, 2002; Gutnik & Kaminka, 2004a; Rossi & Busetta, 2004). Overhearing useful visualization progress monitoring (Kaminka et al., 2002), detecting failures
interactions (Poutakidis et al., 2002), maintaining organizational situational awareness (Novick & Ward, 1993; Legras, 2002; Rossi & Busetta, 2004) non-obtrusively
identifying opportunities offering assistance (Busetta et al., 2001, 2002). instance,
overhearing agent may monitor conversation contractor agent engaged multiple
contract-net protocols different bidders bid callers, order detect failures.
begin analysis Petri net representations, respect scalability
overhearing. classify representation choices along two dimensions affecting scalability:
1. (FIPA Specifications, 2003c) currently deprecated. However, use specification since describes
many important features needed modelling multi-agent interactions.

350

fiRepresenting Conversations Scalable Overhearing

(i) technique used represent multiple concurrent conversations; (ii) choice
representing either individual joint interaction states. show runtime complexity monitoring conversations using different approaches same, choices
along two dimensions significantly different space requirements, thus
choices scalable (in number conversations) others. argue
representations suitable overhearing require use explicit message places, though
subset previously-explored techniques utilized those.
Building insights gained, paper presents novel representation uses
Colored Petri nets (CP-nets) places explicitly denote messages, valid joint
conversation states. representation particularly suited overhearing number
conversations scaled-up. show representation used represent
essentially features FIPA AUML conversation standards, including simple complex interaction building blocks, communicative act attributes message guards
cardinalities, nesting, temporal aspects deadlines duration.
realize advantages machine-readable representations, debugging
(Poutakidis et al., 2002), existing human-readable protocol descriptions must converted
corresponding Petri net representations. final contribution paper,
provide skeleton semi-automated procedure converting FIPA conversation protocols
AUML Petri nets, demonstrate use complex FIPA protocol.
procedure fully automated, takes first step towards addressing open challenge.
paper organized follows. Section 2 presents motivation work.
Sections 3 6 present proposed representation addressing FIPA conversation features including basic interaction building blocks (Section 3), message attributes
(Section 4), nested & interleaved interactions (Section 5), temporal aspects (Section 6).
Section 7 ties features together: presents skeleton algorithm transforming
AUML protocol diagram Petri net representation, demonstrates use challenging FIPA conversation protocol. Section 8 concludes. paper rounds three
appendixes. first provides quick review Petri nets. Then, complete coverage
FIPA interactions, Appendix B provides additional interaction building blocks. Appendix C
presents Petri net complex conversation protocol, integrates many features
developed representation technique.

2. Representations Scalable Overhearing
Overhearing involves monitoring conversations progress, tracking messages
exchanged participants (Gutnik & Kaminka, 2004a). interested representations facilitate scalable overhearing, tracking many concurrent conversations,
many agents. focus open settings, complex internal state control logic agents known advance, therefore exclude discussions Petri net
representations explicitly model agent internals (e.g., Moldt & Wienberg, 1997; Xu
& Shatz, 2001). Instead, treat agents black boxes, consider representations
commit agents conversation state (i.e., role progress conversation).
suitability representation scalable overhearing affected several facets.
First, since overhearing based tracking messages, representation must able
explicitly represent passing message (communicative act) one agent another
351

fiGutnik & Kaminka

(Section 2.1). Second, representation must facilitate tracking multiple concurrent
conversations. tracking runtime bounded number messages
(since case, messages overheard processed), space requirements may differ
significantly (see Sections 2.22.3).
2.1 Message-monitoring versus state-monitoring
distinguish two settings tracking progress conversations, depending
information available tracking agent. first type setting, refer
state monitoring, tracking agent access internal state conversation
one participants, necessarily messages exchanged.
settings involves message monitoring, tracking agent access
messages exchanged (which externally observable), cannot directly observe
internal state conversation participant. Overhearing form message
monitoring.
Representations support state monitoring use places denote conversation
states participants. Tokens placed places (the net marking) denote
current state. sending receiving message participant explicitly
represented, instead implied moving tokens (through transition firings) new
state places. Thus, representation essentially assumes internal conversation
state participants directly observable monitoring agent. Previous work utilizing
state monitoring includes work Cost (1999), Cost et al. (1999, 2000), Lin et al. (2000),
Mazouzi et al. (2002), Ramos et al. (2002).
representation present paper intended overhearing tasks, cannot
assume conversation states overheard agents observable. Instead, must
support message monitoring, addition using tokens state places (to denote
current conversation state), representation uses message places, tokens placed
corresponding message overheard. conversation-state place message
place connected via transition state place denoting new conversation state.
Tokens placed originating placesindicating message received appropriate
conversation statewill cause transition fire, tokens placed
new conversation state place. Thus new conversation state inferred "observing"
message. Previous investigations, used explicit message places, include work
Cost (1999), Cost et al. (1999, 2000), Nowostawski et al. (2001), Purvis et al. (2002),
Cranefield et al. (2002), Poutakidis et al. (2002)2 . discussed depth below.
2.2 Representing Single Conversation
Two representation variants popular within utilize conversation places (in
addition message places): Individual state representations use separate places tokens
state participant (each role). Thus, overall state conversation
represented different tokens marking multiple places. Joint state representations use
single place joint conversation state participants. placement token
2. Cost (1999), Cost et al. (1999, 2000) present examples state- message- monitoring representations.

352

fiRepresenting Conversations Scalable Overhearing

within place represents overhearing agents belief participants
appropriate joint state.
previous representations use individual states. these, different markings distinguish conversation state one agent sent message, state
agent received it. net conversation role essentially built separately,
merged nets, connected via fusion places similar means.
Cost (1999), Cost et al. (1999, 2000) used CP-nets individual state places
representing KQML FIPA interaction protocols. Transitions represent message events,
CP-net features, token colors arc expressions, used represent AUML
message attributes sequence expressions. authors point deadlines (a
temporal aspect interaction) modelled, implementation details provided.
Cost (1999) proposed using hierarchical CP-nets represent hierarchical multi-agent
conversations.
Purvis et al. (2002), Cranefield et al. (2002) represented conversation roles separate
CP-nets, places denote interaction messages states, transitions represent operations performed corresponding communicative acts send, receive,
process. Special in/out places used pass net tokens different CP-nets,
special get/put transitions, simulating actual transmission corresponding
communicative acts.
principle, individual-state representations require two places role, every
message. given message, would two individual places sender (before
sending sending), similarly two receiver (before receiving
receiving). possible conversation statesvalid notcan represented.
single message two roles, two places role (four places total), four
possible conversation states: message sent received, sent received, sent
incorrectly believed received, sent received. states
represented different markings. instance, conversation state message
sent received denoted token after-sending place sender
another token before-receiving place receiver. summarized
following proposition:
Proposition 1 Given conversation R roles total possible messages,
individual state representation space complexity O(M R).
representations represent roles conversation state separately,
many applications overhearing require representation valid conversation states
(message sent received, sent received). Indeed, specifications interaction protocols often assume use underlying synchronization protocols guarantee
delivery messages (Paurobally & Cunningham, 2003; Paurobally, Cunningham, & Jennings, 2003). assumption, every message, two joint states
regardless number roles. example, single message three rolesa
sender two receivers, two places two possible markings: token
sending/receiving place represents conversation state message
yet sent sender (and two receivers waiting it), token
sending/receiving place denotes message sent received
receivers.
353

fiGutnik & Kaminka

Nowostawski et al. (2001) utilize CP-nets places denote joint conversation states.
utilize places representing communicative acts. Poutakidis et al. (2002) proposed
representation based Place-Transition nets (PT-nets)a restricted representation
Petri nets color. presented several interaction building blocks,
could fit together model additional conversation protocols. general, following
proposition holds respect representations:
Proposition 2 Given conversation R roles total possible messages,
joint state representation represents legal states space complexity O(M ).
condition representing valid states critical complexity analysis.
joint conversation statesvalid invalidare represented, space complexity would
O(M R ). case, individual-state representation would advantage.
would case, instance, assume use synchronization protocols,
e.g., overhearing agent may wish track exact system state even
message underway (i.e., sent yet received).
2.3 Representing Multiple Concurrent Conversations
Propositions 1 2 address space complexity representing single conversation. However, large scale systems overhearing agent may required monitor
multiple conversations parallel. instance, overhearing agent may monitoring
middle agent carrying multiple parallel instances single interaction protocol
multiple partners, e.g., brokering (FIPA Specifications, 2003a).
previous investigations propose duplicate appropriate Petri net representation monitored conversation (Nowostawski et al., 2001; Poutakidis et al., 2002).
approach, every conversation tracked separate Petri-net, thus number
Petri nets (and associated tokens) grows number conversations (Proposition 3). instance, Nowostawski et al. (2001) shows example contract-net
protocol carried three different contractors, using three duplicate CP-nets.
captured following proposition:
Proposition 3 representation creates multiple instances conversation Petri net
represent C conversations, requires O(C) net structures, O(C) bits tokens.
investigations take different approach, single CP-net structure used
monitor conversations protocol. tokens associated conversations
differentiated token color (Cost, 1999; Cost et al., 1999, 2000; Lin et al., 2000;
Mazouzi et al., 2002; Cranefield et al., 2002; Purvis et al., 2002; Ramos et al., 2002).
example, assigning token color tuple type hsender, receiveri, agent
differentiate multiple tokens place thus track conversations different pairs
agents3 . Color tokens use multiple bits per token; log C bits required differentiate C conversations. Therefore, number bits required track C conversations
using C tokens C log C. leads following proposition.
3. See Section 4 distinguish different conversations agents.

354

fiRepresenting Conversations Scalable Overhearing

Proposition 4 representation uses color tokens represent C multiple instances
conversation, requires O(1) net structures, O(C log C) bits tokens.

Due constants involved, space requirements Proposition 3 practice
much expensive Proposition 4. Proposition 3 refers creation
O(C) Petri networks, duplicated place transition data structures. contrast,
Proposition 4 refers bits required representing C color tokens single CP net.
Moreover, practical settings, sufficiently large constant bound number
conversations may found, essentially reduce O(log C) factor O(1).
Based Propositions 14, possible make concrete predictions scalability
different approaches respect number conversations, roles. Table 1 shows
space complexity different approaches modelling C conversations
protocol, maximum R roles, messages, assumption
underlying synchronization protocols. table cites relevant previous work.

Individual
States
(Proposition 1)
Joint
States
(Proposition 2)

Representing Multiple Conversations (of Protocol)
Multiple CP- PT-nets
Using color tokens, single CP-net
(Proposition 3)
(Proposition 4)
Space: O(M R + C log C)
Cost (1999), Cost et al. (1999, 2000),
Space: O(M RC)
Lin et al. (2000), Cranefield et al. (2002),
Purvis et al. (2002), Ramos et al. (2002),
Mazouzi et al. (2002)
Space: O(M C)
Space: O(M + C log C)
Nowostawski et al. (2001),
paper
Poutakidis et al. (2002)
Table 1: Scalability different representations

Building insights gained Table 1, propose representation using CP-nets
places explicitly represent joint conversation states (corresponding lower-right
cell Table 1), tokens color used distinguish concurrent conversations (as
upper-right cell Table 1). such, related works features,
table demonstrates, novel synthesis.
representation uses similar structures found works Nowostawski
et al. (2001) Poutakidis et al. (2002). However, contrast previous investigations, rely token color CP-nets model concurrent conversations, space
complexity O(M + C log C). show (Sections 36) used cover
variety conversation features covered investigations. features include
representation full set FIPA interaction building blocks, communicative act attributes
(such message guards, sequence expressions, etc.), compact modelling concurrent conversations, nested interleaved interactions, temporal aspects.
355

fiGutnik & Kaminka

3. Representing Simple & Complex Interaction Building Blocks
section introduces fundamentals representation, demonstrates various simple complex AUML interaction messages, used FIPA conversation standards
(FIPA Specifications, 2003c), implemented using proposed CP-net representation. begin simple conversation, shown Figure 1-a using AUML protocol
diagram. Here, agent1 sends asynchronous message msg agent2 .













fffi












(a) AUML representation




!"
# $ %&' (

%)'
* " # $

' ( '
%
+
'

(b) CP-net representation

Figure 1: Asynchronous message interaction.
represent agent conversation protocols, define two types places, corresponding
messages conversation states. first type net places, called message places,
used describe conversation communicative acts. Tokens placed message places indicate
associated communicative act overheard. second type net places,
agent places, associated valid joint conversation states interacting agents.
Tokens placed agent places indicate current joint state conversation within
interaction protocol.
Transitions represent transmission receipt communicative acts agents.
Assuming underlying synchronization protocols, transition always originates within jointstate place message place, targets joint conversation state (more one
possiblesee below). Normally, current conversation state known (marked
token), must wait overhearing matching message (denoted token
connected message place). token marked, transition fires, automatically
marking new conversation state.
Figure 1-b presents CP net representation earlier example Figure 1-a. CPnet Figure 1-b three places one transition connecting them. A1 B1
A2 B2 places agent places, msg place message place. B capital
letters used denote agent1 agent2 individual interaction states respectively
(we indicated individual joint interaction states AUML diagram
Figure 1-a, omit annotations later figures). Thus, A1 B1 place indicates
joint interaction state agent1 ready send msg communicative act agent2
(A1 ) agent2 waiting receive corresponding message (B1 ). msg message
place corresponds msg communicative act sent two agents. Thus,
transmission msg communicative act causes agents transition A2 B2
356

fiRepresenting Conversations Scalable Overhearing

place. place corresponds joint interaction state agent1 already sent
msg communicative act agent2 (A2 ) agent2 received (B2 ).
CP-net implementation Figure 1-b introduces use token colors
represent additional information interaction states communicative acts.
token color sets defined net declaration, i.e. dashed box Figure 1-b.
syntax follows standard CPN ML notation (Wikstrom, 1987; Milner, Harper, &
Tofte, 1990; Jensen, 1997a). AGEN color identifies agents participating
interaction, used construct two compound color sets.
INTER-STATE color set associated agent places, represents agents
appropriate joint interaction states. record ha1 , a2 i, a1 a2 AGEN
color elements distinguishing interacting agents. apply INTER-STATE color
set model multiple concurrent conversations using CP-net. second color
set SG, describing interaction communicative acts associated message places.
SG color token record , ar i, ar correspond sender
receiver agents associated communicative act. cases, additional elements,
conversation identification, may used. See Section 4 additional details.
Figure 1-b, A1 B1 A2 B2 places associated INTER-STATE
color set, msg place associated SG color set. place color set
written italic capital letters next corresponding place. Furthermore, use
r AGEN color type variables denote net arc expressions. Thus, given
output arc expression A1 B1 msg places hs, ri, r
elements agent place token must correspond r elements message
place token. Consequently, net transition occurs agents message
correspond interacting agents. A2 B2 place input arc expression hr, si following
underlying intuition agent2 going send next interaction communicative
act.
Figure 2-a shows AUML representation another interaction building block, synchronous message passing, denoted filled solid arrowhead. Here, msg communicative act sent synchronously agent1 agent2 , meaning acknowledgement
msg communicative act must always received agent1 interaction may
proceed.
corresponding CP-net representation shown Figure 2-b. interaction starts
A1 B1 place terminates A2 B2 place. A1 B1 place represents joint
interaction state agent1 ready send msg communicative act agent2 (A1 )
agent2 waiting receive corresponding message (B1 ). A2 B2 place denotes
joint interaction state, agent1 already sent msg communicative act
agent2 (A2 ) agent2 received (B2 ). However, since CP-net diagram represents
synchronous message passing, msg communicative act transmission cannot cause
agents transition directly A1 B1 place A2 B2 place. therefore define
intermediate A01 B10 agent place. place represents joint interaction state agent2
received msg communicative act ready send acknowledgement
(B1 ), agent1 waiting acknowledgement (A01 ). Taken together, msg
communicative act causes agents transition A1 B1 place A01 B10 place,
acknowledgement msg message causes agents transition
A01 B10 place A2 B2 place.
357

fiGutnik & Kaminka



































!"
#$% & '
( ) ( "
* % & ' ( ) ( "
+ ( "

(a) AUML representation

(b) CP-net representation

Figure 2: Synchronous message interaction.
Transitions typical multi-agent interaction protocols composed interaction
building blocks, two presented above. Additional interaction buildingblocks, fairly straightforward (or appeared previous work, e.g., Poutakidis
et al., 2002) presented Appendix B. remainder section, present two
complex interactions building blocks generally common multi-agent interactions:
XOR-decision OR-parallel.
begin XOR-decision interaction. AUML representation building
block shown Figure 3-a. sender agent agent1 either send message msg1
agent2 message msg2 agent3 , send msg1 msg2 . non-filled
diamond x inside AUML notation constraint.




















!"#$ %&

'()' (
"#$#*%&





!




'()' (
)'+(


,$ %&
() (


-' . / (










(a) AUML representation

(b) CP-net representation

Figure 3: XOR-decision messages interaction.
Figure 3-b shows corresponding CP-net. Again, A, B C capital letters
used denote interaction states agent1 , agent2 agent3 , respectively.
358

fiRepresenting Conversations Scalable Overhearing

interaction starts A1 B1 C1 place terminates either A2 B2 place
A2 C2 place. A1 B1 C1 place represents joint interaction state agent1 ready
send either msg1 communicative act agent2 msg2 communicative act agent3
(A1 ); agent2 agent3 waiting receive corresponding msg1 /msg2 message
(B1 /C1 ). represent A1 B1 C1 place color set, extend INTER-STATE color
set denote joint interaction state three interacting agents, i.e. using INTERSTATE-3 color set. msg1 communicative act causes agents transition A2 B2
place. A2 B2 place represents joint interaction state agent1 sent msg1
message (A2 ), agent2 received (B2 ). Similarly, msg2 communicative act causes
agents agent1 agent3 transition A2 C2 place. Exclusiveness achieved since
single agent token A1 B1 C1 place used either activating A1 B1 C1 A2 B2
transition activating A1 B1 C1 A2 C2 transition, both.
similar complex interaction OR-parallel messages interaction. AUML representation presented Figure 4-a. sender agent, agent1 , send message msg1
agent2 message msg2 agent3 , both. non-filled diamond AUML notation
constraint.


fffi





















fffi




fffi






fffi



(a) AUML representation

!"
#$%& '(
)*+) *"
#$%&%, '(
)*+) *
+)-*"
. & '(
*+*"
/) 01 *"


fffi



(b) CP-net representation

Figure 4: OR-parallel messages interaction.
Figure 4-b shows CP-net representation OR-parallel interaction. interaction starts A1 B1 C1 place terminated A2 B2 place,
A2 C2 place, both. represent inclusiveness interaction protocol, define
two intermediate places, A01 B1 place A001 C1 place. A01 B1 place represents
joint interaction state agent1 ready send msg1 communicative act agent2
(A01 ) agent2 waiting receive message (B1 ). A001 C1 place similar meaning, respect agent3 . normally done Petri nets, transition connecting
A1 B1 C1 place intermediate places duplicates single token A1 B1 C1 place
two tokens going A01 B1 A001 C1 places. Consequently, two parts
OR-parallel interaction independently executed.

4. Representing Interaction Attributes
extend representation allow additional interaction aspects, useful describing multi-agent conversation protocols. First, show represent interaction
359

fiGutnik & Kaminka

message attributes, guards, sequence expressions, cardinalities content (FIPA
Specifications, 2003c). explore depth representation multiple concurrent
conversations (on CP net).
Figure 5-a shows simple agent interaction using AUML protocol diagram.
interaction similar one presented Figure 1-a previous section. However,
Figure 5-a uses AUML message guard-conditionmarked [condition]that
following semantics: communicative act sent agent1 agent2
condition true.













fffi fffi





(a) AUML representation

! " #$
!%& " #$

'( ! ! " #$
) !*+,! ! " -

./0 !1 .2 0 !$
3 , " -
0 !1 0 !1

0!%&10'( ! !$
4. 0 !$ 4. 0!%&$

4. 0'( ! !$
(b) CP-net representation

Figure 5: Message guard-condition
guard-condition implementation Petri net representation uses transition
guards (Figure 5-b), native feature CP nets. AUML guard condition mapped
directly CP-net transition guard. CP-net transition guard indicated
net inscription next corresponding transition using square brackets. transition
guard guarantees transition enabled transition guard true.
Figure 5-b, extend color tokens include information
communicative act used content. extend SG color set definition
record hs, r, t, ci, r elements interpretation previous
section (sender receiver), c elements define message type content,
respectively. element new color P E, determines communicative act
types. c element new color CON EN , represents communicative act
content argument list (e.g. reply-to, reply-by etc).
addition new elements allows additional potential uses. instance,
facilitate representation multiple concurrent conversations agents
(s r), possible add conversation identification field SG
INTER-STATE colors. simplicity, refrain examples
paper.
Two additional AUML communicative act attributes modelled CP
representation message sequence-expression message cardinality. sequenceexpressions denote constraint message sent sender agent. number
sequence-expressions defined FIPA conversation standards (FIPA Specifications, 2003c):
denotes message sent exactly times; n..m denotes message sent
anywhere n times; denotes message sent arbitrary number
360

fiRepresenting Conversations Scalable Overhearing

times. additional important sequence expression broadcast, i.e. message sent
agents.
explain representation sequence-expressions CP-nets, using broadcast
example (Figure 6-b). sequence expressions easily derived example.
define INTER-STATE-CARD color set. color set tuple (ha1 , a2 i, i) consisting
two elements. first tuple element INTER-STATE color element, denotes
interacting agents previously defined. second tuple element integer
counts number messages already sent agent, i.e. message cardinality.
element initially assigned 0. INTER-STATE-CARD color set applied
S1 R1 place, R capital letters used denote sender
receiver individual interaction states respectively S1 R1 indicates initial joint
interaction state interacting agents. two additional colors, used Figure 6-b,
BROADCAST-LIST ARGET colors. BROADCAST-LIST color defines
sender broadcast list designated receivers, assuming sender must
list carry role. ARGET color defines indexes broadcast list.







fffi




!!









'()( * + ,'()( ./ + ,'()( 01 * * + ,'()( 2* 3 + %'(4 56 *7
56 *# $%&
'()( 08 + 9:
'()( 2* 3 30 8 + ; ( 4<':
" "
2* 3 7 08


'()( = + %'(4 6 *7 6 *7

:6./ 7' 601 * *

'()( > 180 2 + * @ :A,3?
B 5 ) $% + , '()( + 94%C > 180 3? 2


@ :A !DDD$%3 B 5 6 *- B 5 6= - B 5 608fi

(a) AUML representation

(b) CP-net representation

Figure 6: Broadcast sequence expression.
According broadcast sequence-expression semantics, sender agent sends
msg1 communicative act receivers broadcast list. CP-net introduced Figure 6-b models behavior.4 interaction starts S1 R1 place,
representing joint interaction state sender ready send msg1 communicative act receiver (S1 ) receiver waiting receive corresponding msg1
message (R1 ). S1 R1 place initial marking single token, set initialization expression (underlined, next corresponding place). initialization expression 1(hs, ARGET (0)i, 0)given standard CPN ML notationdetermines S1 R1
places initial marking multi-set containing single token (hs, ARGET (0)i, 0). Thus,
first designated receiver assigned agent index 0 broadcast list,
message cardinality counter initiated 0.
4. implement broadcast iterative procedure sending corresponding communicative act separately designated recipients.

361

fiGutnik & Kaminka

msg1 message place initially contains multiple tokens. tokens represents msg1 communicative act addressed different designated receiver
broadcast list. Figure 6-b, initialization expression, corresponding msg1 message place, omitted. S1 R1 place token appropriate msg1 place token
together enable corresponding transition. Consequently, transition may fire thus
msg1 communicative act transmission simulated.
msg1 communicative act sent incrementally every designated receiver
broadcast list. incoming arc expression (hs, ri, i) incremented transition
outgoing (hs, ARGET (i + 1)i, + 1) arc expression, causing receiver agent
index + 1 broadcast list selected. transition guard constraint < size,
i.e. < |broadcast list|, ensures msg1 message sent |broadcast list|
times. msg1 communicative act causes agents transition S2 R2 place.
place represents joint interaction state sender already sent msg1
communicative act receiver waiting receive msg2 message (S2 )
receiver received msg1 message ready send msg2 communicative act
sender (R2 ). Finally, msg2 message causes agents transition S3 R3
place. S3 R3 place denotes joint interaction state sender received msg2
communicative act receiver terminated (S3 ), receiver already sent
msg2 message sender terminated well (R3 ).
use Figure 6-b demonstrate use token color represent multiple concurrent
conversations using CP-net. instance, let us assume sender agent
called agent1 broadcast list contains following agents: agent2 , agent3 , agent4 ,
agent5 agent6 . assume agent1 already sent msg1 communicative act agents broadcast list. However, received msg2
reply message agent3 agent6 . Thus, CP-net current marking complete
interaction protocol described follows: S2 R2 place marked hagent2 , agent1 i,
hagent4 , agent1 i, hagent5 , agent1 i, S3 R3 place contains tokens hagent1 , agent3
hagent1 , agent6 i.
Example. construct CP-net representation FIPA Query Interaction
Protocol (FIPA Specifications, 2003d), shown AUML form Figure 7, demonstrate
building blocks presented Sections 3 4 put together. interaction
protocol, Initiator requests P articipant perform inform action using one two
query communicative acts, query-if query-ref. P articipant processes query
makes decision whether accept ref use query request. Initiator may request
P articipant respond either accept ref use message, simplicity,
assume always case. case query request accepted,
P articipant informs Initiator query results. P articipant fails,
communicates f ailure. successful response, P articipant replies one
two versions inform (inform-t/f inform-result) depending type initial query
request.
CP-net representation FIPA Query Interaction Protocol presented Figure 8. interaction starts I1 P1 place (we use P capital letters
denote Initiator P articipant roles). I1 P1 place represents joint
interaction state (i) Initiator agent ready send either query-if communicative act, query-ref message, P articipant (I1 ); (ii) P articipant wait362

fiRepresenting Conversations Scalable Overhearing

fffi






fffi


fffi



fifi
fifi
fifi






fifi



fffi

Figure 7: FIPA Query Interaction Protocol - AUML representation.

ing receive corresponding message (P1 ). Initiator send either query-if
query-ref communicative act. assume acts belong class,
query communicative act class. Thus, implement messages using single
Query message place, check message type using following transition guard:
[#t msg = query-if #t msg = query-ref]. query communicative act causes
interacting agents transition I2 P2 place. place represents joint interaction
state Initiator sent query communicative act waiting receive
response message (I2 ), P articipant received query communicative act
deciding whether send agree ref use response message Initiator (P2 ).
ref use communicative act causes agents transition I3 P3 place, agree
message causes agents transition I4 P4 place.
P articipant decision whether send agree ref use communicative
act represented using XOR-decision building block introduced earlier (Figure 3-b).
I3 P3 place represents joint interaction state Initiator received ref use
communicative act terminated (I3 ) P articipant sent ref use message
terminated well (P3 ). I4 P4 place represents joint interaction state Initiator
received agree communicative act waiting response
363

fiGutnik & Kaminka

+

+





fffi







3 ? 6 ( 9 6



, B







! "


@Aff

!#

' " (" ) *+, -.


$!










%












%




fffi

' " (" 23 +, *+, -.


' " ("



7,/ *8 ' 723 +, * +, .









+, *$4,, * ' "5 6 7 ) *+,8

6 7 ) *+, .
%
' " (" 9 4 ) ' "5 7 ) *+, 87 ) *+,8



: 6 7 ) *+, .


fffi




' " (" ,/ * ! 0 ! 0111.



&


&

: 6 79 4 ) .

: 6 7,/ * .

3 ;,

?!"










>6 (





C ?!" D! 6 ?5 ! E








fffi


fffi
=



=

3 ;,






< <

" C ?! " ( 6 ?5
! E#

3 ;,

Figure 8: FIPA Query Interaction Protocol - CP-net representation.

P articipant (I4 ) P articipant sent agree message deciding
response send Initiator (P4 ). point, P articipant agent may send one
following communicative acts: inform-t/f, inform-result f ailure. choice
represented using another XOR-decision building block, inform-t/f informresult communicative acts represented using single Inf orm message place. f ailure
communicative act causes transition I5 P5 place, inf orm message causes
transition I6 P6 place. I5 P5 place represents joint interaction state
P articipant sent f ailure message terminated (P5 ), Initiator received
f ailure terminated (I5 ). I6 P6 place represents joint interaction state
P articipant sent inf orm message terminated (P6 ), Initiator received
inf orm terminated (I6 ).
implementation [query-if ] [query-ref ] message guard conditions requires detailed discussion. implemented usual manner view fact
depend original request communicative act. Thus, create special intermediate place contains original message type marked "Original essage ype"
figure. case inf orm communicative act sent, transition guard verifies
inf orm message appropriate original query type. Thus, inform-t/f
communicative act sent original query type query-if
inform-result message sent original query type query-ref.
364

fiRepresenting Conversations Scalable Overhearing

5. Representing Nested & Interleaved Interactions
section, extend CP-net representation previous sections model nested
interleaved interaction protocols. focus nested interaction protocols. Nevertheless, discussion addressed interleaved interaction protocols similar
fashion.
FIPA conversation standards (FIPA Specifications, 2003c) emphasize importance
nested interleaved protocols modelling complex interactions. First, allows reuse interaction protocols different nested interactions. Second, nesting increases
readability interaction protocols.
AUML notation annotates nested interleaved protocols round corner rectangles (Odell et al., 2001a; FIPA Specifications, 2003c). Figure 9-a shows example
nested protocol5 , Figure 9-b illustrates interleaved protocol. Nested protocols
one compartments. first compartment name compartment.
name compartment holds (optional) name nested protocol. nested protocol
name written upper left-hand corner rectangle, i.e. commitment Figure 9a. second compartment, guard compartment, holds (optional) nested protocol
guard. guard compartment written lower left-hand corner rectangle, e.g.
[commit] Figure 9-a. Nested protocols without guards equivalent nested protocols
[true] guard.











fffi






fffifi










(a) Nested protocol

(b) Interleave protocol

Figure 9: AUML nested interleaved protocols examples.
Figure 10 describes implementation nested interaction protocol presented
Figure 9-a extending CP-net representation using hierarchies, relying standard CP-net methods (see Appendix A). hierarchical CP-net representation contains
three elements: superpage, subpage page hierarchy graph. CP-net superpage
represents main interaction protocol containing nested interaction, CP-net
subpage models corresponding nested interaction protocol, i.e. Commitment Inter5. Figure 9-a appears FIPA conversation standards (FIPA Specifications, 2003c). Nonetheless, note
request-good request-pay communicative acts part FIPA-ACL standards.

365

fiGutnik & Kaminka

action Protocol. page hierarchy graph describes superpage decomposed
subpages.

# ffff






fffffi
ffff




fffffi
fffffi



#
ffffff





ffff


ffff




fffffi








!"

Figure 10: Nested protocol implementation using hierarchical CP-nets.
Let us consider detail process modelling nested interaction protocol
Figure 9-a using hierarchical CP-net, resulting net described Figure 10. First,
identify starting ending points nested interaction protocol. starting point
nested interaction protocol Buyer1 sends Request-Good communicative act
Seller1 . ending point Buyer1 receives Request-Pay communicative act
Seller1 . model nested protocol end-points CP-net socket nodes
superpage, i.e. Interaction P rotocol: B11 S11 Request-Good input socket
nodes B13 S13 output socket node.
nested interaction protocol, Commitment Interaction P rotocol, represented
using separate CP-net, following principles outlined Sections 3 4. net
subpage main interaction protocol superpage. nested interaction protocol
starting ending points subpage correspond net port nodes. B1 S1
Request-Good places subpage input port nodes, B3 S3 place output
port node. nodes tagged IN/OUT port type tags correspondingly.
Then, substitution transition, denoted using HS (Hierarchy Substitution), connects corresponding socket places superpage. substitution transition conceals nested interaction protocol implementation net superpage, i.e.
Interaction P rotocol. nested protocol name guard compartments
mapped directly substitution transition name guard respectively. Consequently,
Figure 10 define substitution transition name Commitment substitution
guard determined [commit].
superpage subpage interface provided using hierarchy inscription.
hierarchy inscription indicated using dashed box next substitution transition. first line hierarchy inscription determines subpage identity, i.e.
366

fiRepresenting Conversations Scalable Overhearing

Commitment Interaction P rotocol example. Moreover, indicates substitution transition replaces corresponding subpage detailed implementation superpage. remaining hierarchy inscription lines introduce superpage subpage port
assignment. port assignment relates socket node superpage port node
subpage. substitution transition input socket nodes related IN-tagged
port nodes. Analogously, substitution transition output socket nodes correspond
OUT-tagged port nodes. Therefore, port assignment Figure 10 assigns net socket
port nodes following fashion: B11 S11 B1 S1 , Request-Good Request-Good
B13 S13 B3 S3 .
Finally, page hierarchy graph describes decomposition hierarchy (nesting)
different protocols (pages). CP-net pages, Interaction P rotocol
Commitment Interaction P rotocol, correspond page hierarchy graph nodes
(Figure 10). arc inscription indicates substitution transition, i.e. Commitment.

6. Representing Temporal Aspects Interactions
Two temporal interaction aspects specified FIPA (FIPA Specifications, 2003c).
section, show timed CP-nets (see Appendix A) applied modelling
agent interactions involve temporal aspects, interaction duration, deadlines
message exchange, etc.
first aspect, duration, interaction activity time period. Two periods
distinguished: transmission time response time. transmission time indicates
time interval communicative act, sent one agent received
designated receiver agent. response time period denotes time interval
corresponding receiver agent performing task response incoming
communicative act.
second temporal aspect deadlines. Deadlines denote time limit
communicative act must sent. Otherwise, corresponding communicative act
considered invalid. issues addressed previous investigations
related agent interactions modelling using Petri nets.6
propose utilize timed CP-nets techniques represent temporal aspects
agent interactions. so, assume global clock.7 begin deadlines. Figure 11-a introduces AUML representation message deadlines. deadline keyword
variation communicative act sequence expressions described Section 4.
sets time constraint start transmission associated communicative act.
Figure 11-a, agent1 must send msg communicative act agent2 defined
deadline. deadline expires, msg communicative act considered invalid.
Figure 11-b shows timed CP-net implementation deadline sequence expression.
timed CP-net Figure 11-b defines additional MSG-TIME color set associated
net message places. MSG-TIME color set extends SG color set, described
Section 4, adding time stamp attribute message token. Thus, communicative
6. Cost et al. (1999, 2000) mention deadlines without presenting implementation details.
7. Implementing it, use private clock overhearing agent global clock Petri
net representation. Thus, time stamp message overhearers time corresponding
message overheard.

367

fiGutnik & Kaminka










! ! "#$ % &'
! ! ()# % &'
! ! *+ $#$ % &'
! ! ,$#-./ # % !




01 "#$23 1 "#$'
fiff

! ! 4 /" % !
1 "#$2 1 "#$2

1()#2 1*+ $#$'
! ! 4 /". ,4 #% 4 /" '

5 1 "#$' 5 1()#'


5 1*+ $#$'


5 % &'

(a) AUML representation

(b) CP-net representation

Figure 11: Deadline sequence expression.
act token record hs, r, t, ci@[T ts]. @[..] expression denotes corresponding token
time stamp, whereas token time value indicated starting capital T. Accordingly, described message token ts time stamp. communicative act time limit
defined using val deadline parameter. Therefore, deadline sequence expression
semantics simulated using following transition guard: [T ts < deadline]. transition guard, comparing msg time stamp deadline parameter, guarantees
expired msg communicative act received.
turn representing interaction duration. AUML representation shown
Figure 12-a. AUML time intensive message notation used denote communicative act transmission time. rule communicative act arrows illustrated horizontally.
indicates message transmission time neglected. However, case
message transmission time significant, communicative act drawn slanted downwards.
vertical distance, arrowhead arrow tail, denotes message transmission time. Thus, communicative act msg1 , sent agent1 agent2 , t1
transmission time.



fiff








!"
#$%& '(

)*+ ,)-+
2 2341 1 15 67
$%& % #.




#





#$%& / '(
fiff

. & '(
2 234 156 7


+ , + ,

+ , +!"
. &% #.. & / '(


0)
1+ 0) +

88
+!"
0)

(a) AUML representation

(b) CP-net representation

Figure 12: Interaction duration.
368

fiRepresenting Conversations Scalable Overhearing

response time Figure 12-a indicated interaction thread length.
incoming msg1 communicative act causes agent2 perform task sending
response msg2 message. corresponding interaction thread duration denoted
t2 time period. Thus, time period specifies agent2 response time incoming
msg1 communicative act.
CP-net implementation interaction duration time periods shown Figure 12-b. communicative act transmission time illustrated using timed CP-nets
@+ operator. net transitions simulate communicative act transmission
agents. Therefore, representing transmission time t1 , CP-net transition adds t1
time period incoming message token time stamp. Accordingly, transition @ + t1
output arc expression denotes t1 delay time stamp outgoing token. Thus,
corresponding transition takes t1 time units consequently msg1 communicative act transmission time.
contrast communicative act transmission time, agent interaction response time
represented implicitly. Previously, defined MSG-TIME color set indicates
message token time stamps. Analogously, Figure 12-b introduce additional INTERSTATE-TIME color set. color set associated net agent places presents
possibility attach time stamps agent tokens well. Now, let us assume A2 B2
msg2 places contain single token each. circled 1 next corresponding place,
together multi-set inscription, indicates place current marking. Thus, agent
message place tokens ts1 ts2 time stamps respectively. ts1 time
stamp denotes time agent2 received msg1 communicative act sent
agent1 . ts2 time stamp indicates time agent2 ready send msg2
response message agent1 . Thus, agent2 response time t2 (Figure 12-a) ts2 ts1 .

7. Algorithm Concluding Example
final contribution paper skeleton procedure transforming AUML
conversation protocol diagram two interacting agents CP-net representation.
procedure semi-automatedit relies human fill detailsbut
automated aspects. apply procedure complex multi-agent conversation protocol
involves many interaction building blocks already discussed.
procedure shown Algorithm 1. algorithm input AUML protocol
diagram algorithm creates, output, corresponding CP-net representation.
CP-net constructed iterations using queue. algorithm essentially creates
conversation net exploring interaction protocol breadth-first avoiding cycles.
Lines 1-2 create initiate algorithm queue, output CP-net, respectively.
queue, denoted S, holds initiating agent places current iteration.
places correspond interaction states initiate conversation interacting agents. lines 4-5, initial agent place A1 B1 created inserted
queue. A1 B1 place represents joint initial interaction state two agents. Lines
7-23 contain main loop.
enter main loop line 8 set curr variable first initiating agent
place queue. Lines 10-13 create CP-net components corresponding current
iteration follows. First, line 10, message places, associated curr agent place,
369

fiGutnik & Kaminka

Algorithm 1 Create Conversation Net(input:AU L,output:CP N )
1: new queue
2: CP N new CP net
3:
4:
5:

A1 B1 new agent place color information
S.enqueue(A1 B1 )

6:
7:
8:

empty
curr S.dequeue()

9:
10:
11:
12:
13:

P CreateM essageP laces(AU L, curr)
RP CreateResultingAgentP laces(AU L, curr, P )
(T R, AR) CreateT ransitionsAndArcs(AU L, curr, P, RP )
F ixColor(AU L, CP N, P, RP, R, AR)

14:
15:
16:
17:
18:
19:
20:
21:
22:
23:

place p RP
p created current iteration
continue
p terminating place
S.enqueue(p)


CP N.places = CP N.places P SRP
CP.transitions = CP N.transitions
TR

CP N.arcs = CP N.arcs AR

24:
25:

return CP N

created using CreateM essageP laces procedure (which detail here).
procedure extracts communicative acts associated given interaction
state, AUML diagram. places correspond communicative acts,
take agents joint interaction state curr successor(s). line 11,
CreateResultingAgentP laces procedure creates agent places correspond interaction
state changes result communicative acts associated curr agent place (again
based AUML diagram). Then, CreateT ransitionsAndArcs procedure (line 12),
places connected using principles described Sections 36. Thus, CP-net
structure (net places, transitions arcs) created. Finally, line 13, F ixColor procedure adds token color elements CP-net structure, support deadlines, cardinality,
communicative act attributes.
Lines 15-19 determine resulting agent places inserted queue
iteration. non-terminating agent places, i.e. places correspond
interaction states terminate interaction, inserted queue lines 18-19.
However, one exception (lines 16-17): resulting agent place, already
handled algorithm, inserted back queue since inserting cause
infinite loop. Thereafter, completing current iteration, output CP-net, denoted
370

fiRepresenting Conversations Scalable Overhearing

CP N variable, updated according current iteration CP-net components lines
21-23. main loop iterates long queue empty. resulting CP-net
returnedline 25.



fifi




























fiff fiff
fiff
fiff

Figure 13: FIPA Contract Net Interaction Protocol using AUML.
demonstrate algorithm, use FIPA Contract Net Interaction
Protocol (FIPA Specifications, 2003b) (Figure 13). protocol allows interacting agents
negotiate. Initiator agent issues calls proposals using cf p communicative act.
P articipants may refuse counter-propose given deadline sending either
ref use propose message respectively. ref use message terminates interaction.
contrast, propose message continues corresponding interaction.
deadline expires, Initiator accept P articipant response messages. evaluates received P articipant proposals selects one, several,
agents perform requested task. Accepted proposal result sending
accept-proposal messages, remaining proposals rejected using reject-proposal
message. Reject-proposal terminates interaction corresponding P articipant.
hand, accept-proposal message commits P articipant perform requested task. successful completion, P articipant informs Initiator sending either
inform-done inform-result communicative act. However, case P articipant
failed accomplish task, communicates f ailure message.
371

fiGutnik & Kaminka

use algorithm introduced create CP-net, represents
FIPA Contract Net Interaction Protocol. corresponding CP-net model constructed
four iterations algorithm. Figure 14 shows CP-net representation second
iteration algorithm, Figure 15 shows CP-net representation fourth
final iteration.
Contract Net Interaction Protocol starts I1 P1 place, represents joint interaction state Initiator ready send cf p communicative act (I1 ) P articipant
waiting corresponding cf p message (P1 ). I1 P1 place created inserted
queue iterations main loop begin.
First iteration. curr variable set I1 P1 place. algorithm creates
net places, associated I1 P1 place, i.e. Cf p message place,
I2 P2 resulting agent place. I2 P2 place denotes interaction state Initiator
already sent cf p communicative act P articipant waiting response (I2 ) P articipant received cf p message deciding
appropriate response (P2 ). created using CreateM essageP laces
CreateResultingAgentP laces procedures, respectively.
Then, CreateT ransitionsAndArcs procedure line 12, connects three places
using simple asynchronous message building block shown Figure 1-b (Section 3).
line 13, color sets places determined, algorithm handles
cardinality cf p communicative act, putting appropriate sequence expression
transition, using principles presented Figure 6-b (Section 4). Accordingly,
color set, associated I1 P1 place, changed INTER-STATE-CARD color set.
Since I2 P2 place terminating place, inserted queue.
Second iteration. curr set I2 P2 place. P articipant agent send,
response, either ref use propose communicative act. Ref use P ropose message
places created CreateM essageP laces (line 10), resulting places I3 P3 I4 P4 ,
corresponding results ref use propose communicative acts, respectively,
created CreateResultingAgentP laces (line 11). I3 P3 place represents joint
interaction state P articipant sent ref use message terminated (P3 ),
Initiator received it, terminated (I3 ). I4 P4 place represents joint state
P articipant sent propose message (P4 ), Initiator received
message considering response (I4 ).
line 12, I2 P2 , Ref use, I3 P3 , P ropose I4 P4 places connected using
XOR-decision building block presented Figure 3-b (Section 3). Then, F ixColor
procedure (line 13), adds appropriate token color attributes, allow deadline sequence
expression (on ref use propose messages) implemented shown
Figure 11-b (Section 6). I3 P3 place denotes terminating state, whereas I4 P4
place continues interaction. Thus, lines 18-19, I4 P4 place inserted
queue, next iteration algorithm. state net end second
iteration algorithm presented Figure 14.
Third iteration. curr set I4 P4 . Here, Initiator response P articipant
proposal either accept-proposal reject-proposal. CreateM essageP laces procedure line 10 thus creates corresponding Accept-Proposal Reject-Proposal message
places. accept-proposal reject-proposal messages cause interacting agents
transition I5 P5 I6 P6 places, respectively. agent places created using
372

fiRepresenting Conversations Scalable Overhearing

3 0 & ( )4
3 0

8


3 0 ; 4
$%

& '( )



**

















3 0



!

./. 01 "


















4

)'<=

&

)<& ' @ 5
4

!"

!

./.01"



# #

) 5 3 . /

"

- -

!"




5 67
&

& ()4
>

/









)4

)'<=

3 0 & '@ 5 1! 7










+ $+ $
' ,

4



& '( )



3 0

5 67

) 5 3 9 , 9:::7

2 2

)'<=

& ()4
->

?
7

.,3!
&

)?& '@7

3 0 A= ( 5 3 . & ( )4 ? & ( ) 4 ?
>
>
!
8 )? 3 ;4 )4 7
>
>

& '() <B =
5 & ( )4
C ! 67
3 0

5 67
E/ 0
3 0

& '()

5 1.F

& '()


C ! * :::
E / & ( ) 4 7 E /
>
E / & '@7
>
E / 0 ./. 015 67



<B =

< $7

A=(7
>

Figure 14: FIPA Contract Net Interaction Protocol using CP-net 2nd iteration.
CreateResultingAgentP laces procedure (line 11). I5 P5 place denotes interaction
state Initiator sent reject-proposal message terminated interaction (I5 ), P articipant received message terminated well (P5 ).
contrast, I6 P6 place represents interaction state Initiator sent acceptproposal message waiting response (I6 ), P articipant received
accept-proposal communicative act performing requested task sending
response (P6 ). Initiator agent sends exclusively either accept-proposal rejectproposal message. Thus, I4 P4 , Reject-Proposal, I5 P5 , Accept-Proposal I6 P6 places
connected using XOR-decision block (in CreateT ransitionsAndArcs procedure,
line 12).
F ixColor procedure line 13 operates follows: According interaction
protocol semantics, Initiator agent evaluates received P articipant proposals
deadline passes. thereafter, appropriate reject-proposal accept-proposal
communicative acts sent. Thus, F ixColor assigns MSG-TIME color set RejectProposal Accept-Proposal message places, creates [T ts >= deadline] transition guard associated transitions. transition guard guarantees Initiator
cannot send response deadline expires, valid P articipant responses
received. resulting I5 P5 agent place denotes terminating interaction state,
whereas I6 P6 agent place continues interaction. Thus, I6 P6 agent place
inserted queue.
Fourth iteration. curr set I6 P6 . place associated three communicative acts: inform-done, inform-result f ailure. inform-done informresult messages instances inf orm communicative act class. Thus, CreateMessagePlaces (line 10) creates two message places, Inf orm F ailure. line 11,
CreateResultingAgentP laces creates I7 P7 I8 P8 agent places. f ailure communicative act causes interacting agents transition I7 P7 agent place, inf orm
messages cause agents transition I8 P8 agent place. I7 P7 place represents
joint interaction state P articipant sent f ailure message terminated (P7 ),
373

fiGutnik & Kaminka

Initiator received f ailure communicative act terminated (I7 ).
hand, I8 P8 place denotes interaction state P articipant sent inf orm
message (either inform-done inform-result) terminated (P8 ), Initiator
received inf orm communicative act terminated (I8 ). inf orm f ailure communicative acts sent exclusively. Thus CreateT ransitionsAndArcs (line 12) connects
I6 P6 , F ailure, I7 P7 , Inf orm I8 P8 places using XOR-decision building block.
Then, F ixColor assigns [#t msg = inform-done #t msg = inform-result] transition
guard transition associated Inf orm message place. Since I7 P7
I8 P8 agent places represent terminating interaction states, inserted
queue, remains empty end current iteration. signifies end
conversion. complete conversation CP-net resulting iteration algorithm
shown Figure 15.
$%

& '( )

* *



fffi










, $ , $



.




.




#



#









3



'6 4!5 0 1




3



8 8


+

+


;0 1-







=

4 1
L0 1

& 44!5

)'5D



&

)5& 'G 7

5I

/-4!
&

)F& 'G?

FE& () =

@ )F4 EC=

7 & ( )=

)=

F
?

J ! K >?

& '( )

7 2/M

& '()

J !K * BBB 5 $?

?

L 0



5I

EH D( ?

L 0 E& 'G?

!"

L 0 1 /0/ 127 >?

! 7

/0/ 12"





2






9 9

)'5D

7 >?

L 0 E& ()=






& '( )

4 1

0 1







?

!E




F

0 E& ()=
.

4 1 H D( 7 4 / E& ()=

!"






) 7 4 / 0 E& ( ) =

=



! 7

/0/ 12"

7 >?
&

!

!"



4 1

/0/ 12 "







)=

)'5D






=

4 1 & 'G 7 2! ?



!








!"

/0/12"

fiff

"










4 1

7 >?

@ ) 7 4 - ABBB?

4 1 C =






4 1



& '( )

' -

4 1 & ( )=







:







<!
7 2
5

/ 2 <!
7

2
5- 1!"



:



Figure 15: FIPA Contract Net Interaction Protocol using CP-net 4th (and final)
iteration.
procedure outline guide conversion many 2-agent conversation protocols AUML CP-net equivalents. However, sufficiently developed
address general n-agent case. Appendix C presents complex example 3-agent conversation protocol, successfully converted manually, without guidance
algorithm. example incorporates many advanced features CP-net representation
technique would beyond scope many previous investigations.
374

fiRepresenting Conversations Scalable Overhearing

8. Summary Conclusions
recent years, open distributed MAS applications gained broad acceptance
multi-agent academic community real-world industry. result, increasing attention directed multi-agent conversation representation techniques.
particular, Petri nets recently shown provide viable representation approach
(Cost et al., 1999, 2000; Nowostawski et al., 2001; Mazouzi et al., 2002).
However, radically different approaches proposed using Petri nets modelling multi-agent conversations. Yet, relative strengths weaknesses proposed
techniques examined. work introduces novel classification previous investigations compares investigations addressing scalability
appropriateness overhearing tasks.
Based insights gained analysis, developed novel representation,
uses CP-nets places explicitly represent joint interaction states messages.
representation technique offers significant improvements (compared previous approaches) terms scalability, particularly suitable monitoring via overhearing.
systematically show representation covers essentially features required
model complex multi-agent conversations, defined FIPA conversation standards (FIPA Specifications, 2003c). include simple & complex interaction building
blocks (Section 3 & Appendix B), communicative act attributes multiple concurrent
conversations using CP-net (Section 4), nested & interleaved interactions using
hierarchical CP-nets (Section 5) temporal interaction attributes using timed CP-nets
(Section 6). developed techniques demonstrated, throughout paper,
complex interaction protocols defined FIPA conversation standards (see particular
example presented Appendix C). Previous approaches could handle
examples (though reduced scalability), shown cover
required features.
Finally, paper presented skeleton procedure semi-automatically converting
AUML protocol diagrams (the chosen FIPA representation standard) equivalent CPnet representation. demonstrated use challenging FIPA conversation protocol, difficult represent using previous approaches.
believe work assist motivate continuing research multi-agent
conversations including issues performance analysis, validation verification (Desel et al., 1997), agent conversation visualization, automated monitoring (Kaminka et al.,
2002; Busetta et al., 2001, 2002), deadlock detection (Khomenco & Koutny, 2000), debugging (Poutakidis et al., 2002) dynamic interpretation interaction protocols (Cranefield
et al., 2002; de Silva et al., 2003). Naturally, issues remain open future work.
example, presented procedure addresses AUML protocol diagrams representing two
agent roles. plan investigate n-agent version future.

Acknowledgments
authors would thank anonymous JAIR reviewers many useful informative comments. Minor subsets work published LNAI book chapter
(Gutnik & Kaminka, 2004b). K. Ushi deserves many thanks.
375

fiGutnik & Kaminka

Appendix A. Brief Introduction Petri Nets
Petri nets (Petri Nets site, 2003) widespread, established methodology representing
reasoning distributed systems, combining graphical representation comprehensive mathematical theory. One version Petri nets called Place/Transition nets
(PT-nets) (Reisig, 1985). PT-net bipartite directed graph node either
place transition (Figure 16). net places transitions indicated
circles rectangles respectively. PT-net arcs support place transition
transition place connections, never connections two places two
transitions. arc direction determines input/output characteristics place
transition connected. Thus, given arc, P , connecting place P transition ,
say place P input place transition vice versa transition
output transition place P . P arc considered output arc place P
input arc transition .
















(a) firing




(b) firing

Figure 16: PT-net example.
PT-net place may marked small black dots called tokens. arc expression
integer, determines number tokens associated corresponding arc.
convention, arc expression equal 1 omitted. specific transition enabled
input places marking satisfies appropriate arc expressions. example,
consider arc P arc connect place P transition . Thus, given
arc arc expression 2, say transition enabled
place P marked two tokens. case transition enabled, may fire/occur.
transition occurrence removes tokens transition input places puts tokens
transition output places specified arc expressions corresponding
input/output arcs. Thus, Figures 16-a 16-b, demonstrate PT-net marking
transition firing respectively.
Although computationally equivalent, different version Petri nets, called Colored
Petri nets (CP-nets) (Jensen, 1997a, 1997b, 1997c), offers greater flexibility compactly
representing complex systems. Similarly PT-net model, CP-nets consist net places,
net transitions arcs connecting them. However, CP-nets, tokens single
bits, complex, structured, information carriers. type additional information carried token, called token color, may simple (e.g., integer
string), complex (e.g. record tuple). place declared place color set
376

fiRepresenting Conversations Scalable Overhearing

match tokens particular colors. CP-net place marking token multi-set (i.e.,
set member may appear once) corresponding appropriate place
color set. CP-net arcs pass token multi-sets places transitions. CP-net arc
expressions evaluate token multi-sets may involve complex calculation procedures
token variables declared associated corresponding arcs.
CP-net model introduces additional extensions PT-nets. Transition guards
boolean expressions, constrain transition firings. transition guard associated
transition tests tokens pass transition, enable transition
firings guard successfully matched (i.e., test evaluates true). CP-net
transition guards, together places color sets arc expressions, appear part
net inscriptions CP-net.
order visualize manage complexity large CP-nets, hierarchical CP-nets
(Huber, Jensen, & Shapiro, 1991; Jensen, 1997a) allow hierarchical representations CPnets, sub-CP nets re-used higher-level CP nets, abstracted away
them. Hierarchical CP-nets built pages, CP-nets. Superpages
present higher level hierarchy, CP-nets refer subpages, addition
transitions places. subpage may function superpage subpages.
way, multiple hierarchy levels used hierarchical CP-net structure.
relationship superpage subpage defined substitution transition, substitutes corresponding subpage instance CP-net superpage structure
transition superpage. substitution transition hierarchy inscription supplies
exact mapping superpage places connected substitution transition (called
socket nodes), subpage places (called port nodes). port types determine
characteristics socket node port node mappings. complete CP-net hierarchical
structure presented using page hierarchy graph, directed graph vertices correspond pages, directed edges correspond direct superpage-subpage relationships.
Timed CP-nets (Jensen, 1997b) extend CP-nets support representation temporal aspects using global clock. Timed CP-net tokens additional color attribute
called time stamp, refers earliest time token may used. Time
stamps used arc expression transition guards, enable timed-transition
satisfies two conditions: (i) transition color enabled, i.e. satisfies
constraints defined arc expression transition guards; (ii) tokens ready,
i.e. time global clock equal greater tokens time stamps.
transition fire.

Appendix B. Additional Examples Conversation Representation
Building Blocks
appendix presents additional interaction building blocks already described Section 3. first AND-parallel messages interaction (AUML representation shown Figure 17-a). Here, sender agent1 sends msg1 message
agent2 msg2 message agent3 . However, order two communicative acts
unconstrained.
representation AND-parallel CP-net representation shown Figure 17-b.
A1 B1 C1 , A2 B2 , A2 C2 , msg1 msg2 places defined similarly Figures 3-b
377

fiGutnik & Kaminka




























01
0































!"#$ %& ' ()' (
!"#$#*%& ' ()' ()'+(
,$ %& ()(
-' ./ (

(a) AUML representation

(b) CP-net representation

Figure 17: AND-parallel messages interaction.
4-b Section 3. However, define two additional intermediate agent places, A01 B2 C1
A001 B1 C2 . A01 B2 C1 place represents joint interaction state agent1 sent
msg1 message agent2 ready send msg2 communicative act agent3
(A1 ), agent2 received msg1 message (B2 ) agent3 waiting receive msg2
communicative act (C1 ). A001 B1 C2 place represents joint interaction state
agent1 ready send msg1 message agent2 already sent msg2 communicative act agent3 (A001 ), agent2 waiting receive msg1 message (B1 ) agent3
received msg2 communicative act (C2 ). places enable agent1 send
communicative acts concurrently. Four transitions connect appropriate places respectively. behavior transitions connecting A01 B2 C1 A2 B2 A001 B1 C2 A2 C2
similar described above. transitions A1 B1 C1 A01 B2 C1 A1 B1 C1 A001 B1 C2
triggered receiving messages msg1 msg2 , respectively. However, transitions consume message token since used triggering transitions
A01 B2 C1 A2 B2 A001 B1 C2 A2 C2 . achieved adding appropriate message
place output place corresponding transition.
second AUML interaction building block, shown Figure 18-a, message
sequence interaction, similar AND-parallel. However, message sequence
interaction defines explicitly order transmitted messages. Using 1/msg1
2/msg2 notation, Figure 18-a specifies msg1 message sent
sending msg2 .
Figure 18-b shows corresponding CP-net representation. A1 B1 C1 , A2 B2 , A2 C2 ,
msg1 msg2 places defined before. However, CP-net implementation presents
additional intermediate agent placeA01 B2 C1which identical corresponding
378

fiRepresenting Conversations Scalable Overhearing



fffi













fffi
















fffi



0









fffi










!"
#$%& ' ( ) * + )* "
#$%& %, ' ( ) * +)* +)- * "
. & ' ( * + * "
/ ) * "



(a) AUML representation

(b) CP-net representation

Figure 18: Sequence messages interaction.
intermediate agent place Figure 17-b. A01 B2 C1 defined output place
A1 B1 C1 A2 B2 transition. thus guarantees msg2 communicative act
sent (represented A01 B2 C1 A2 C2 transition) upon completion msg1
transmission (the A1 B1 C1 A2 B2 transition).
last interaction present synchronized messages interaction, shown Figure 19-a. Here, agent3 simultaneously receives msg1 agent1 msg2 agent2 .
AUML, constraint annotated merging two communicative act arrows
horizontal bar single output arrow.


fffi




fffi














fffi

fi1




fffi








/

fffi


.

.



.
.
/0

.
.
/


!"#$ %& '( )'(
!"#$ #* %& '( )'( )'+(
,$ %& ( ) (
- ' .(



(a) AUML representation

(b) CP-net representation

Figure 19: Synchronized messages interaction.
379

fiGutnik & Kaminka

Figure 19-b illustrates CP-net implementation synchronized messages interaction.
previous examples, define A1 C1 , B1 C1 , msg1 , msg2 A2 B2 C2 places.
additionally define two intermediate agent places, A2 C10 B2 C100 . A2 C10 place represents joint interaction state agent1 sent msg1 agent3 (A2 ), agent3
received it, however agent3 waiting receive msg2 (C10 ). B2 C100 place represents
joint interaction state agent2 sent msg2 agent3 (B2 ), agent3
received it, however agent3 waiting receive msg1 (C100 ). places guarantee
interaction transition A2 B2 C2 state msg1 msg2
received agent3 .

Appendix C. Example Complex Interaction Protocol
present example complex 3-agent conversation protocol, manually converted CP-net representation using building blocks paper. conversation
protocol addressed FIPA Brokering Interaction Protocol (FIPA Specifications,
2003a). interaction protocol incorporates many advanced conversation features
representation nesting, communicative act sequence expression, message guards
etc. AUML representation shown Figure 20.
Initiator agent begins interaction sending proxy message Broker
agent. proxy communicative act contains requested proxied-communicative-act
part argument list. Broker agent processes request responds either
agree ref use message. Communication ref use message terminates interaction.
Broker agent agreed function proxy, locates agents matching
Initiator request. agent found, Broker agent communicates
failure-no-match message interaction terminates. Otherwise, Broker agent
begins interactions matching agents. agent, Broker informs
Initiator, sending either inform-done-proxy failure-proxy communicative act.
failure-proxy communicative act terminates sub-protocol interaction matching
agent question. inform-done-proxy message continues interaction. subprotocol progresses, Broker forwards received responses Initiator agent using
reply-message-sub-protocol communicative acts. However, failures
explicitly returned sub-protocol interaction (e.g., agent executing
sub-protocol failed). case Broker agent detects failure, communicates
failure-brokering message, terminates sub-protocol interaction.
CP-net representation FIPA Brokering Interaction Protocol shown Figure 21. Brokering Interaction Protocol starts I1 B1 place. I1 B1 place represents joint interaction state Initiator ready send proxy communicative
act (I1 ) Broker waiting receive (B1 ). proxy communicative act causes
interacting agents transition I2 B2 . place denotes interaction state
Initiator already sent proxy message Broker (I2 ) Broker received (B2 ).
Broker agent send, response, either ref use agree communicative act.
CP-net component implemented using XOR-decision building block presented
Section 3. ref use message causes agents transition I3 B3 place thus
terminate interaction. place corresponds Broker sending ref use message
terminating (B3 ), Initiator receiving message terminating (I3 ).
380

fiRepresenting Conversations Scalable Overhearing


fffi



























!










!



" ##


!





!
!
!

Figure 20: FIPA Brokering Interaction Protocol - AUML representation.
hand, agree communicative act causes agents transition I4 B4 place,
represents joint interaction state Broker sent agree message
Initiator (and trying locate receivers proxied message),
Initiator received agree message.
Broker agents search suitable receivers may result two alternatives. First,
case matching agents found, interaction terminates I5 B5 agent place.
joint interaction place corresponds interaction state Broker sent
failure-no-match communicative act (B5 ), Initiator received message terminated (I5 ). second alternative suitable agents found. Then, Broker
starts sending proxied-communicative-act messages agents established list
designated receivers, i.e. TARGET-LIST. first proxied-communicative-act message causes interacting agents transition I4 B6 P1 place. I4 B6 P1 place denotes
joint interaction state three agents: Initiator, Broker P articipant (the receiver).
381

fiGutnik & Kaminka






fffi

71/







- 8 7 29 7> /


B * 71/ 8 7 29 7> /





2 9KB



! "#$% & '(


fffi











$% #/0% % # & 1

!

2 3 "# $%4 2 3 " #$% (

$% #/0% % #/5 & 1
2 3 "# $%4 2 3 " #$%4


9









!




fffi





! - .$% #$% & '(







fffi

! %) # & * + +,,,(







2 3 "# $% (

! - . 6 & 789 (




!



$% #/0% % #/5/- 6 &
$% # /0% % #/54

1



- 6 (




$/
:2 9


IJ






H2 7!/


9/% *

L

! : 0"& 1 3 "# $%4



=

3 " #$%49 3%) #4

71/



3-. $% # $% (

- 8 7 29 7> /

G







K % "#% K? L ? L

fffi



fffi





>2 ! & '(
! % " #%&781 % " #%/


K * 7L

E fiF


9






G

! % " #%/ ; 0% & " #$% < 79 = ,,(

; 0% < 79 = ? ,,, / @(
>2 3: 0"(






>2 * 3 " #$% (

A7 281 9 &B9 C

K % " #% K7N @L* 7N @L

>2 9 3%) #(
>2 73- 6(

*
H2 7!/




P










*

71/
- 8 7 29 7> /




fffi




8 /6 8/





*


fffi



















9

R /0S/9 !

Q0
*

R / 892 9 7 8 /9 !


fffi








X/ XX (
W
71/- 8 7 2 9 7> /


*


P

U78



XY Z/

9 !

H2 7!/


V


fffi












*

XY Z/

[
W

(
[
(
W


*




9/R (

XY Z/ Z Z (

R /0S/




*! /
: 2 /

*

0S/
*

*


fffi


fffi
















9 !




Figure 21: FIPA Brokering Interaction Protocol - CP-net representation.
Initiator individual state remains unchanged (I4 ) since proxied-communicative-act
message starts interaction Broker P articipant. Broker individual
state (B6 ) denotes designated agents found proxied-communicative382

fiRepresenting Conversations Scalable Overhearing

act messages ready sent, P articipant waiting receive interaction
initiating communicative act (P1 ). proxied-communicative-act message place
connected output place transition. message place used part
CP-net XOR-decision structure, enables Broker agent send either failure-nomatch proxied-communicative-act, respectively. Thus, token denoting proxiedcommunicative-act message, must consumed transition.
Thus, multiple proxied-communicative-act messages sent P articipants.
implemented similarly broadcast sequence expression implementation (Section 4).
Furthermore, proxied-communicative-act type verified type requested
proxied communicative act, obtained original proxy message content.
use Proxied-Communicative-Act-Type message type place implement CPnet component similarly Figure 8. proxied-communicative-act message causes
interacting agents transition I4 B7 P1 B6 P1 places.
B6 P1 place corresponds interaction Broker P articipant
agents. represents joint interaction state Broker ready send proxiedcommunicative-act message P articipant (B6 ), P articipant waiting message
(P1 ). fact, B6 P1 place initiates nested interaction protocol results B10 P3
place. B10 P3 place represents joint interaction state P articipant sent
reply-message communicative act terminated (P3 ), Broker received
message (B10 ). example, chosen FIPA Query Interaction Protocol (FIPA
Specifications, 2003d) (Figures 78) interaction sub-protocol. CP-net component,
implementing nested interaction sub-protocol, modeled using principles described
Section 5. Consequently, interaction sub-protocol concealed using Query-SubProtocol substitution transition. B6 P1 , proxied-communicative-act B10 P3 places
determine substitution transition socket nodes. socket nodes assigned CPnet port nodes Figure 8 follows. B6 P1 proxied-communicative-act places
assigned I1 P1 query input port nodes, B10 P3 place assigned
I3 P3 , I5 P5 I6 P6 output port nodes.
turn I4 B7 P1 place. contrast B6 P1 place, place corresponds
main interaction protocol. I4 B7 P1 place represents joint interaction state
Initiator waiting Broker respond (I4 ), Broker ready send appropriate response communicative act (B7 ), best Initiators knowledge interaction
P articipant yet begun (P1 ). Broker agent send one two messages,
either failure-proxy inform-done-proxy, depending whether succeeded
send proxied-communicative-act message P articipant. failure-proxy message
causes agents terminate interaction corresponding P articipant agent
transition I6 B8 P1 place. place denotes joint interaction state Initiator
received failure-proxy communicative act terminated (I6 ), Broker sent
failure-proxy message terminated well (B8 ) interaction P articipant
agent never started (P1 ). hand, inform-done-proxy causes agents
transition I7 B9 P2 place. I7 B9 P2 place represents interaction state Broker
sent inform-done-proxy message (B9 ), Initiator received (I7 ), P articipant
begun interaction Broker agent (P2 ). Again, represented using
XOR-decision building block.
383

fiGutnik & Kaminka

Finally, Broker agent either send reply-message-sub-protocol failurebrokering communicative act. failure-brokering message causes interacting agents
transition I8 B11 P2 place. place indicates Broker sent failure-brokering
message terminated (B11 ), Initiator received message terminated (I8 ),
P articipant terminated interaction Broker agent (P2 ). replymessage-sub-protocol communicative act causes agents transition I9 B12 P3 place.
I9 B12 P3 place indicates Broker sent reply-message-sub-protocol message
terminated (B12 ), Initiator received message terminated (I9 ), P articipant
successfully completed nested sub-protocol Broker agent terminated
well (P3 ). Thus, B10 P3 place, denoting successful completion nested sub-protocol,
corresponding transition input place.

References
AUML site (2003). Agent unified modeling language, www.auml.org..
Busetta, P., Dona, A., & Nori, M. (2002). Channelled multicast group communications.
Proceedings AAMAS-02.
Busetta, P., Serafini, L., Singh, D., & Zini, F. (2001). Extending multi-agent cooperation
overhearing. Proceedings CoopIS-01.
ChaibDraa, B. (2002). Trends agent communication languages. Computational Intelligence, 18 (2), 89101.
Cost, R. S. (1999). framework developing conversational agents. Ph.D. thesis, Department Computer Science, University Maryland.
Cost, R. S., Chen, Y., Finin, T., Labrou, Y., & Peng, Y. (1999). Modeling agent conversations
coloured Petri nets. Proceedings Workshop Specifying Implementing Conversation Policies, Third International Conference Autonomous Agents
(Agents-99), Seattle, Washington.
Cost, R. S., Chen, Y., Finin, T., Labrou, Y., & Peng, Y. (2000). Using coloured petri nets
conversation modeling. Dignum, F., & Greaves, M. (Eds.), Issues Agent
Communications, Lecture notes Computer Science, pp. 178192. Springer-Verlag.
Cranefield, S., Purvis, M., Nowostawski, M., & Hwang, P. (2002). Ontologies interaction protocols. Proceedings Workshop Ontologies Agent Systems,
First International Joint Conference Autonomous Agents & Multi-Agent Systems
(AAMAS-02), Bologna, Italy.
de Silva, L. P., Winikoff, M., & Liu, W. (2003). Extending agents transmitting protocols
open systems. Proceedings Workshop Challenges Open Agent Systems, Second International Joint Conference Autonomous Agents & Multi-Agent
Systems (AAMAS-03), Melbourne, Australia.
Desel, J., Oberweis, A., & Zimmer, T. (1997). Validation information system models: Petri
nets test case generation. Proceedings 1997 IEEE International Conference Systems, Man Cybernetics: Computational Cybernetics Simulation,
pp. 34013406, Orlando, Florida.
384

fiRepresenting Conversations Scalable Overhearing

Finin, T., Labrou, Y., & Mayfield, J. (1997). KQML agent communication language.
Bradshaw, J. (Ed.), Software Agents. MIT Press.
FIPA site (2003). Fipa - Foundation Intelligent Physical Agents, www.fipa.org..
FIPA Specifications (2003a). Fipa Brokering Interaction Protocol Specification, version H,
www.fipa.org/specs/fipa0000033/..
FIPA Specifications (2003b). Fipa Contract Net Interaction Protocol Specification, version
H, www.fipa.org/specs/fipa0000029/..
FIPA Specifications (2003c). Fipa Interaction Protocol Library Specification, version E,
www.fipa.org/specs/fipa0000025/..
FIPA Specifications (2003d). Fipa Query Interaction Protocol Specification, version H,
www.fipa.org/specs/fipa0000027/..
Gutnik, G., & Kaminka, G. (2004a). Towards formal approach overhearing: Algorithms
conversation identification. Proceedings AAMAS-04.
Gutnik, G., & Kaminka, K. A. (2004b). scalable Petri net representation interaction
protocols overhearing.. van Eijk, R. M., Huget, M., & Dignum, F. (Eds.), Agent
Communication LNAI 3396: International Workshop Agent Communication, AC
2004, New York, NY, USA, pp. 5064. Springer-Verlag.
Hameurlain, N. (2003). MIP-Nets: Refinement open protocols modeling analysis
complex interactions multi-agent systems. Proceedings 3rd International
Central Eastern European Conference Multi-Agent Systems (CEEMAS-03), pp.
423434, Prague, Czech Republic.
Huber, P., Jensen, K., & Shapiro, R. M. (1991). Hierarchies Coloured Petri nets.
Jensen, K., & Rozenberg, G. (Eds.), High-level Petri Nets: Theory Application,
pp. 215243. Springer-Verlag.
Jensen, K. (1997a). Coloured Petri Nets. Basic Concepts, Analysis Methods Practical
Use, Vol. 1. Springer-Verlag.
Jensen, K. (1997b). Coloured Petri Nets. Basic Concepts, Analysis Methods Practical
Use, Vol. 2. Springer-Verlag.
Jensen, K. (1997c). Coloured Petri Nets. Basic Concepts, Analysis Methods Practical
Use, Vol. 3. Springer-Verlag.
Kaminka, G., Pynadath, D., & Tambe, M. (2002). Monitoring teams overhearing:
multi-agent plan-recognition approach. JAIR, 17, 83135.
Khomenco, V., & Koutny, M. (2000). LP deadlock checking using partial order dependencies. Proceedings 11th International Conference Concurrency Theory
(CONCUR-00), pp. 410425, Pennsylvania State University, Pennsylvania.
Kone, M. T., Shimazu, A., & Nakajima, T. (2000). state art agent communication languages. Knowledge Information Systems, 2, 258284.
Legras, F. (2002). Using overhearing local group formation. Proceedings AAMAS02.
385

fiGutnik & Kaminka

Lin, F., Norrie, D. H., Shen, W., & Kremer, R. (2000). schema-based approach specifying conversation policies. Dignum, F., & Greaves, M. (Eds.), Issues Agent
Communications, Lecture notes Computer Science, pp. 193204. Springer-Verlag.
Ling, S., & Loke, S. W. (2003). MIP-Nets: compositional model multi-agent interaction.
Proceedings 3rd International Central Eastern European Conference
Multi-Agent Systems (CEEMAS-03), pp. 6172, Prague, Czech Republic.
Mazouzi, H., Fallah-Seghrouchni, A. E., & Haddad, S. (2002). Open protocol design
complex interactions multi-agent systems. Proceedings First International
Joint Conference Autonomous Agents & Multi-Agent Systems (AAMAS-02), pp.
517526, Bologna, Italy.
Milner, R., Harper, R., & Tofte, M. (1990). Definition Standard ML. MIT Press.
Moldt, D., & Wienberg, F. (1997). Multi-agent systems based Coloured Petri nets.
Proceedings 18th International Conference Application Theory Petri
Nets (ICATPN-97), pp. 82101, Toulouse, France.
Novick, D., & Ward, K. (1993). Mutual beliefs multiple conversants: computational
model collaboration air traffic control. Proceedings AAAI-93, pp. 196201.
Nowostawski, M., Purvis, M., & Cranefield, S. (2001). layered approach modeling
agent conversations. Proceedings Second International Workshop Infrastructure Agents, MAS Scalable MAS, Fifth International Conference
Autonomous Agents, pp. 163170, Montreal, Canada.
Odell, J., Parunak, H. V. D., & Bauer, B. (2000). Extending UML design multiagent systems. Proceedings AAAI-2000 Workshop Agent-Oriented Information Systems (AOIS-00).
Odell, J., Parunak, H. V. D., & Bauer, B. (2001a). Agent UML: formalism specifying
multi-agent interactions. Ciancarini, P., & Wooldridge, M. (Eds.), Agent-Oriented
Software Engineering, pp. 91103. Springer-Verlag, Berlin.
Odell, J., Parunak, H. V. D., & Bauer, B. (2001b). Representing agent interaction protocols UML. Ciancarini, P., & Wooldridge, M. (Eds.), Agent-Oriented Software
Engineering, pp. 121140. Springer-Verlag, Berlin.
Parunak, H. V. D. (1996). Visualizing agent conversations: Using enhances Dooley graphs
agent design analysis. Proceedings Second International Conference
Multi-Agent Systems (ICMAS-96).
Paurobally, S., & Cunningham, J. (2003). Achieving common interaction protocols open
agent environments. Proceedings Workshop Challenges Open Agent
Systems, Second International Joint Conference Autonomous Agents & MultiAgent Systems (AAMAS-03), Melbourne, Australia.
Paurobally, S., Cunningham, J., & Jennings, N. R. (2003). Ensuring consistency
joint beliefs interacting agents. Proceedings Second International Joint
Conference Autonomous Agents & Multi-Agent Systems (AAMAS-03), Melbourne,
Australia.
386

fiRepresenting Conversations Scalable Overhearing

Petri Nets site (2003). Petri nets world: Online services international petri nets
community, www.daimi.au.dk/petrinets..
Poutakidis, D., Padgham, L., & Winikoff, M. (2002). Debugging multi-agent systems using
design artifacts: case interaction protocols. Proceedings First International Joint Conference Autonomous Agents & Multi-Agent Systems (AAMAS-02),
pp. 960967, Bologna, Italy.
Purvis, M. K., Hwang, P., Purvis, M. A., Cranefield, S. J., & Schievink, M. (2002). Interaction protocols network environmental problem solvers. Proceedings
2002 iEMSs International Meeting:Integrated Assessment Decision Support
(iEMSs 2002), pp. 318323, Lugano, Switzerland.
Ramos, F., Frausto, J., & Camargo, F. (2002). methodology modeling interactions
cooperative information systems using Coloured Petri nets. International Journal
Software Engineering Knowledge Engineering, 12 (6), 619636.
Reisig, W. (1985). Petri Nets: Introduction. Springer-Verlag.
Rossi, S., & Busetta, P. (2004). Towards monitoring group interactions social roles
via overhearing. Proceedings CIA-04, pp. 4761, Erfurt, Germany.
Smith, I. A., & Cohen, P. R. (1996). Toward semantics agent communications
language based speech-acts. Proceedings AAAI-96.
Wikstrom, A. (1987). Functional Programming using Standard ML. International Series
Computer Science. Prentice-Hall.
Xu, H., & Shatz, S. M. (2001). agent-based Petri net model application
seller/buyer design electronic commerce. Proceedings 5th International
Symposium Autonomous Decentralized Systems (ISAD-01), pp. 1118, Dallas,
Texas, USA.

387


