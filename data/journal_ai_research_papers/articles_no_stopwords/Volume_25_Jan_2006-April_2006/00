Journal Artificial Intelligence Research 25 (2006) 1-15

Submitted 08/05; published 01/06

Engineering Note
Engineering Conformant Probabilistic Planner
Nilufer Onder
Garrett C. Whelan
Li Li

nilufer@mtu.edu
gcwhelan@mtu.edu
lili@mtu.edu

Department Computer Science
Michigan Technological University
1400 Townsend Drive
Houghton, MI 49931

Abstract
present partial-order, conformant, probabilistic planner, Probapop competed blind track Probabilistic Planning Competition IPC-4. explain
adapt distance based heuristics use probabilistic domains. Probapop
incorporates heuristics based probability success. explain successes
difficulties encountered design implementation Probapop.

1. Introduction
Probapop conformant probabilistic planner took part probabilistic track
4th International Planning Competition (IPC-4). conformant planner
competed. conformant probabilistic planning paradigm (Hyafil & Bacchus, 2003)
actions state initialization probabilistic, i.e., several possible
outcomes annotated probability occurrence. addition, planning problem
conformant, i.e., planner construct best plan possible without assuming
results actions performed observed. example conformant
probabilistic planning problem, consider student applying graduate studies. Suppose
application needs include several forms prepared student single
letter recommendation written professor (one letter sufficient one
letter acceptable). assume typical professor students department
80% probability sending letter time. problem student asks
one professor letter, probability complete application 0.8.
student observes professor sent letter due date, way
complete application would late ask another professor. Thus,
observation actions useless way student increase chances
getting letter ask one professor send letter. 9 professors
asked, probability getting letter 0.999997 close 1. Obviously,
asking many people costly, therefore student weigh benefits increased
probability costs asking several people.
conformant probabilistic planners task find best sequence actions
possible results actions predefined probabilities cannot observed.
regard, conformant probabilistic planners classified non-observable Markov
c
2006
AI Access Foundation. rights reserved.

fiOnder, Whelan & Li

decision processes (NOMDPs) (Boutilier, Dean, & Hanks, 1999). Fully-observable MDPs
(FOMDP) extreme MDPs agent complete cost-free
sensors indicate current state. Planners adopt FOMDP framework
generate policies functions states actions. NOMDP based planners
generate unconditional sequences actions based predictive model,
environment cannot observed (Boutilier et al., 1999). middle ground partially
observable MDPs (POMDPs) contingency plans domain observable execution actions may depend results observations (Kaelbling,
Littman, & Cassandra, 1998; Majercik & Littman, 1999; Onder & Pollack, 1999; Hansen
& Feng, 2000; Karlsson, 2001; Hoffmann & Brafman, 2005). conformant
planners model imperfect actions may multiple possible results
model probability information (Ferraris & Giunchiglia, 2000; Bertoli, Cimatti, & Roveri,
2001; Brafman & Hoffmann, 2004).
work Probapop motivated incentive partial-order planning
viable option conformant probabilistic planning. main reasons threefold.
First, partial-order planners worked well parametric lifted actions,
useful coding large domains. Second, due least commitment strategy step
ordering, partial-order planning (POP) produces plans highly parallelizable. Third,
many planners handle rich temporal constraints based POP
paradigm (Smith, Frank, & Jonsson, 2000). Given advantages, intuition
design Probapop bring together two paradigms model states explicitly:
POP planners represent states search space plans, blind
planners cannot observe state observation actions available.
basic approach form base plans using deterministic partial-order planning
techniques, estimate best way improve plans. Recently, Repop
(Nguyen & Kambhampati, 2001) Vhpop (Younes & Simmons, 2003) planners
demonstrated heuristics speed non-partial-order planners used
scale partial-order planning. show distance-based heuristics (McDermott,
1999; Bonet & Geffner, 2001) implemented using relaxed plan graphs partial-order
planners Repop Vhpop employed probabilistic domains.
heuristics coupled selective plan improvement heuristics incremental planning
techniques result significant advantages. result, Probapop makes partial-order
planning feasible probabilistic domains. work Probapop invaluable
understanding identifying key solutions issues probabilistic conformant
planning.

2. Probapop Partial-Order Planning
partial-order probabilistic planning, implemented Buridan (Kushmerick, Hanks,
& Weld, 1995) probabilistic planning algorithm top Vhpop (Younes & Simmons,
2003), recent partial-order planner. partially ordered plan 6-tuple, <STEPS,
BIND, ORD, LINKS, OPEN, UNSAFE>, representing sets actions, binding constraints, ordering constraints, causal links, open conditions, unsafe links, respectively. binding
constraint constraint action parameters action parameters ground
literals. ordering constraint Si Sj represents fact step Si precedes Sj .
2

fiEngineering Conformant Probabilistic Planner

causal link triple < Si , p, Sj >, Si producer step, Sj consumer step
p represents condition supported Si Sj . open condition pair < p, >,
p condition needed step S. causal link < Si , p, Sj > unsafe plan
contains threatening step Sk Sk p among effects, Sk may intervene
Si Sj . Open conditions unsafe links collectively referred flaws.
planning problem quadruple < D, I, G, >, where, domain theory consisting
(probabilistic) operators, initial state probability distribution states, G
set literals must true end execution, termination criterion
probability threshold time limit. objective planner find
maximal probability plan takes agent G. several plans
probability success, one least number steps cost preferred.
Probapop algorithm shown Figure 1 based classical POP algorithm
(Russell & Norvig, 2003; Younes & Simmons, 2003). first constructs initial plan
converting initial goal dummy initial goal steps, using first
last steps plan empty body. refines plans search queue
meets termination criterion. termination criterion implemented
include time limit (e.g., stop 5 minutes), memory limit (e.g., stop 256MB),
probability threshold (e.g., stop finding plan 0.9 higher probability),
lack significant progress (e.g., stop probability success cannot increased
). possible specify multiple termination criterion use earliest one
becomes true. termination criterion met plan highest probability
returned.
Plan refinement operations involve repairing flaws. open condition closed
adding new step domain theory, reusing step already plan. unsafe
link handled promotion, demotion, separation (when lifted actions used)
operations, confrontation (Penberthy & Weld, 1992). techniques part
Vhpop implementation. Consider step Sk threatening causal link < Si , p, Sj >.
Promotion involves adding extra ordering constraint Sk comes Sj (Sj Sk
added ORD). Demotion involves adding extra ordering constraint k
comes Si (Sk Si added ORD). Separation involves adding extra inequality
constraint BIND Sk threatening effect longer unify p. Finally,
actions multiple effects, confrontation used making commitment
non-threatening effects Sk , i.e., effects Sk contain proposition
unifies p. Note deterministic domains, action multiple
effects due multiple secondary preconditions (when conditions). probabilistic domains,
probabilistic actions always multiple effects.
search conducted using A* algorithm guided ranking function
provides f value. usual plan , f () = g() + h(), g() cost
plan, h() estimated cost completing it. ranking function used
Merge step algorithm order plans search queue. competition
Probapop used distance based heuristic (ADD) explained next section.
flaw selection strategy Select-Flaw method, used Vhpops static, gives
priority static open conditions, i.e., condition whose value altered action
domain theory. flaws plan contain static open conditions
threats handled next; lowest priority given remaining open conditions.
3

fiOnder, Whelan & Li

function Probapop (D, initial, goal, T)
returns solution plan, failure
** plans Make-Minimal-Plan(initial, goal)
** BestPlan null
** loop
**** termination criterion met return BestPlan
**** plans empty return failure
**** plan Remove-Front(plans)
**** Solution?(plan) return plan
**** plans Merge(plans, Refine-Plan(plan))
** end
function Refine-Plan (plan)
returns set plans (possibly null)
** Flaws(plan) empty
**** ProbSuccess (plan) > ProbSuccess (BestPlan)
******* BestPlan plan
**** plan Reopen-Conditions(plan)
** flaw Select-Flaw(plan)
** flaw open condition choose:
****** return Reuse-Step(plan, flaw)
****** return Add-New-Step(plan, flaw)
** flaw threat choose:
****** return Demotion(plan, flaw)
****** return Promotion(plan, flaw)
****** return Separation(plan, flaw)
****** return Confrontation(plan, flaw)

Figure 1: probabilistic POP algorithm.

comment heuristics flaw selection techniques following discussion
competition results.
deterministic POP algorithm, plan considered complete
flaws, i.e., OPEN = UNSAFE = . probabilistic domains, possibility complete
plans insufficient probability success (e.g., 1 ) improved.
Probapop improves plans conducting search reopening conditions
fail explained next section. Probapop viewed first searching
plan complete deterministic sense, searching way improve
plan. current implementation, discard search queue finding
first plan subsequent improvements made first complete plan found.
future, plan implement multiple search queues order able jump
different plans improvements. Figure 2a, show initial plan
corresponds student application domain mentioned first section. open
conditions sending forms (forms-sent) getting letter reference (letter-sent).
Probapop uses Vhpop guided ranking flaw selection heuristics produce
complete plan 80% probability success shown Figure 2b. straight line shows
causal link two actions zigzag line refers causal link plan
4

fiEngineering Conformant Probabilistic Planner

fragment omitted clarity exposition. Probapop reopens condition
letter-sent (Figure 3a) resumes search using heuristics come
improved plan involves asking two professors shown Figure 3b. Assuming
ASK-PROFx action probabilistic effects, probability success
0.8 first complete plan 0.8 + 0.2 0.8 second complete plan. Several
iterations reopen search leads Probapop find plan probability
0.999997. plan cannot improved single precision arithmetic.
INITIAL

INITIAL

ASK PROF1

formssent

lettersent

formssent

lettersent

GOAL

GOAL

(a)

(b)

Figure 2: Starting empty plan finding first plan.

INITIAL

INITIAL

ASK PROF1

formssent

lettersent

ASK PROF1

lettersent

formssent

GOAL

lettersent

ASK PROF2

lettersent

GOAL

(a)

(b)

Figure 3: Starting complete plan finding improved plan.

3. Distance Based Ranking Probapop
Vhpop deterministic partial order-planner described Younes Simmons (2003)
supports distance based heuristics provide estimate total number new actions
needed close open condition. starting search, planner builds planning
graph (Blum & Furst, 1997), literals initial state first level,
continues expand graph reaches level goal literals present.
planning graph different Graphplans planning graph sense
5

fiOnder, Whelan & Li

relaxed, i.e., delete lists ignored thus mutex relationships computed (Bonet
& Geffner, 2001).
order able generate relaxed planning graph multiple probabilistic
effects present, one would need split many plan graphs leaves
probabilistic action. avoid potential blow up, split action domain
theory many deterministic actions number nonempty effect lists. split
action represents different way original action would work. Figure 4, show
action A1, two probabilistic effects b P Q true, one effect c
P true Q false, effect otherwise. split action corresponds one
set non-empty effects. Probapop, plan graph uses split actions, plans
constructed always contain full original action planner correctly assess
probability success. using split actions, compute good estimate
number actions needed complete plan use distance based heuristics.
A1
P
Q

prec: P, Q

prec: P, Q

A11

~P

A12
b



~Q

prec: P, ~Q
0.7

0.3



b

c

A13
c

Figure 4: Probabilistic action A1 split deterministic actions A1-1, A1-2, A1-3.
important distinction deterministic partial-order planning probabilistic
partial-order planning multiple support plan literals. deterministic case,
open condition permanently removed list flaws resolved.
probabilistic case, reopened planner search additional steps
increase probability literal. Buridan system implements technique
reopening previously closed conditions complete plan resuming search
find another complete plan. implementation employs selective reopening (SR)
conditions guaranteed achieved reopened. words,
literals supported probability 1 reopened. Note checking
probability literals costly probabilistic plans, save cost performing
check mandatory assessment complete plans. Obviously, avoiding redundant
searches advantage planner. current implementation reopen
supported literals probability less 1. leave selection among
new set preconditions flaw selection heuristic. implementation
contain probability based heuristics.
important note neither split actions selective reopening technique
change base soundness completeness properties Buridan algorithm. split
actions used relaxed plan graph, reopening technique block
alternatives sought would already covered plan search
queue.
6

fiEngineering Conformant Probabilistic Planner

4. Probapop IPC-4
Probapop among 7 domain-independent planners competed probabilistic
track IPC-4. domain-independent mean planner uses PPDDL description domain solve planning problem employ previously coded
control information. Table 1 show brief description planners (Edelkamp,
Hoffman, Littman, & Younes, 2004; Younes, Littman, Weissman, & Asmuth, 2005; Bonet
& Geffner, 2005; Fern, Yoon, & Givan, 2006; Thiebaux, Gretton, Slaney, Price, & Kabanza,
2006). competition conducted follows: planner given set 24
problems written probabilistic PDDL (PPDDL) allotted 5 minutes solve
problem. this, server simulated possible way executing plan sending
sequence states starting initial state planners responded state
action based solution found. 30 simulations conducted
problem. goal-based problems success measured whether goal reached
end simulation. reward-based problems total reward calculated.
set 24 problems included types.
competition included various domains listed below:
Blocksworld: Includes pick put actions action fail.
6 problems 5, 8, 11, 15, 18 21 blocks given. goal build one
towers blocks.
Colored Blocksworld: actions Blocksworld domain.
block one three colors. goal towers specified using existential
quantifiers, e.g., green block table, red block green
block.
Exploding Blocksworld: similar Blocksworld domain first put-down
action permanently destroy bottom object (block table). Replanning
repetition based approaches fail easily due irreversible nature explosion.
Boxworld: box transportation problem load, unload, drive fly actions.
drive action fail taking truck wrong city.
Fileworld: objective includes actions put papers files matching
type. type paper found using observation action
probabilistics outcomes.
Tireworld: actions include moving several cities tire go flat
trip.
Towers Hanoise: variation Towers Hanoi problem discs
moved singles doubles discs may slip move.
Zeno travel: travel domain includes actions related flying. actions
boarding flying fail.
noted competition domains designed full observability
needed changed incorporate blind planner. instance, PICKUP action
7

fiOnder, Whelan & Li

Planner (code)
UMass (C)
NMRDPP (G1)
Classy (J2)
FF-rePlan (J3)
mGPT (P)
Probapop (Q)
CERT (R)

Description
Symbolic heuristic search based symbolic AO* loops (LAO*)
symbolic real-time dynamic programming (RTDP)
Solving decision problems non-Markovian (and hence Markovian)
rewards
Approximate policy iteration inductive machine learning using
random-walk problems
Deterministic replanner using Fast Forward
Labeled real-time dynamic programming (LRTDP) lower bounds
extracted deterministic relaxations MDP
POP-style plan-space A* search distance based heuristics failure
analysis
Heuristic state space search structured policy iteration algorithm,
factored MDPs, reachability analysis

Table 1: Domain-independent planners listed order competition code.

Blocksworld domain precondition requires block picked
held arm. action two probabilistic effects, one resulting
block held, held. planner assumes
observability, plan involving PICKUP action cannot improved action
cannot executed unless preconditions hold. Thus, Probapop planner cannot
insert second PICKUP action cover case first one fails. help
competition organizers, implemented workaround actions
executed conditions hold effect rather causing error.
Probapop (competition name Q) attempted 4 24 problems. two planners
attempted problems Classy (J2) FF-rePlan (J3).
planners attempted 3 10 problems listed Table 2. Probapop attempted
small number problems due three reasons. First, started building Probapop,
Vhpops version 2.0. performance Vhpop significantly improved better
memory handling techniques version 2.2 time competition
convert implementation newer version. Second, competition Blocksworld
domains included universally quantified preconditions supported Vhpop.
implementation preconditions including FORALL keyword efficient.
Third, implementation disables feature Vhpop allows use multiple
search queues different heuristics. prohibited us constructing several search
queues different heuristic using one finishes earliest.
therefore pick single heuristic run competition problems. result,
picked ADD ranking metric static flaw selection technique ran
problems combination.
competition results announced, observed three domain
independent planners, namely Classy (J2), FF-rePlan (J3), mGPT (P),
able solve largest Blocksworld problems whereas Probapop able solve
5-blocks problem (the competition included domains 5, 8, 11, 15, 18, 21
8

fiEngineering Conformant Probabilistic Planner

Planner
Umass (C)
NMRDPP (G1)
Classy (J2)
FF-rePlan (J3)
mGPT (P)
Probapop (Q)
CERT (R)

#
problems
4
7
18
24
10
4
3

bw-nc-r-5
30
30
30
30
30
11
30

tire-nr
30
9

7
16
7
9

tire-r
30
30

30
30
6
0

zeno
30
30

0
30
1
27

Table 2: number successes 30 trials obtained planners use
domain knowledge. problems attempted Probapop (Q) listed.
dash means planner attempt problem. Bw-nc-r-5
Blocksworld problem 5 blocks. Tire-nr tire-r goal reward
based problems Tireworld domain. Zeno problem using Zeno
travel domain problem.

blocks). Therefore, looked ways improving performance Probapop
problems. first reimplemented Probapop Vhpops newer version 2.2. Second,
brought language competition Blocksworld domain closer STRIPS.
particular, removed FORALL preconditions conditions. example,
replaced PPDDL PICK-UP action shown Figure 5 two actions shown
Figure 6. However, version upgrade language simplification sufficient
enable Probapop solve 8-blocks problem. explained before, Probapops strategy
first find base plan improve plan possible failure points, therefore
finding base plan crucial. next looked heuristics flaw selection
strategies make Blocksworld problems solvable. begin discussing
explaining Vhpops ADD heuristic detail.
(:action pick-up-block-from
* :parameters (?top - block ?bottom)
* :effect (when (and (not (= ?top ?bottom)) (on-top-of ?top ?bottom)
****************** (forall (?b - block) (not (holding ?b)))
****************** (forall (?b - block) (not (on-top-of ?b ?top))))
************ (and (decrease (reward) 1)
************ (probabilistic 0.75 (and (holding ?top) (not (on-top-of ?top ?bottom)))
*************** ******** 0.25 (when (not (= ?bottom table))
*************** ************* (and (not (on-top-of ?top ?bottom)) (on-top-of ?top table)))))))

Figure 5: PPDDLs PICK-UP action
ADD heuristic achieves good performance computing sum step costs
open conditions relaxed planning graph, i.e., heuristic cost plan
computed h() = hadd (OP EN ()). cost achieving literal q level
first action achieves q: hadd (q) = minaGA(q) hadd (a) GA(q) 6= , GA(q)
9

fiOnder, Whelan & Li

(:action pick-up
* :parameters (?x)
* :precondition (and (clear ?x) (ontable ?x) (handempty))
* :effect
* ** (probabilistic 0.75
* **** (and (not (ontable ?x)) (not (clear ?x)) (not (handempty)) (holding ?x))))
(:action unstack
* :parameters (?x ?y)
* :precondition (and (on-top-of ?x ?y) (clear ?x) (handempty))
* :effect
* ** (probabilistic 0.75
* **** (and (holding ?x) (clear ?y) (not (clear ?x)) (not (handempty)) (not (on-top-of ?x ?y)))))

Figure 6: Simplified form PPDDLs PICK-UP action.
action effect q. Note hadd (q) 0 q holds initially,
q never holds. level action first level preconditions become true:
hadd (a) = 1 + hadd (P REC(a)). ADDR heuristic modification ADD heuristic
takes action reuse account, thus addition conditions described above,
heuristic cost literal q 0 plan already contains action achieve q.
observed ADDR effective ADD Blocksworld domain
tested variety flaw selection strategies implemented Vhpop together ADDR.
show flaw selection strategies tried Table 3. adopt notation given
Pollack et al. (1997) revised Younes Simmons (2003). notation,
strategy ordered list selection criteria LR refers least refinements
first, MCadd refers cost computed using ADD, MWadd refers work
using ADD. Open conditions divided three categories use heuristics.
static open condition open condition whose literal provided
initial state, i.e., action literal effect. local open condition refers
open conditions recently added action used maintain focus
achievement single goal. unsafe open condition refers open condition whose
causal link would threatened.
five main strategies prioritize flaws differently. ucpop strategy
gives priority threats, static strategy gives priority static open conditions, lcfr
strategy handles flaws order least expected cost, mc strategy orders open conditions
respect cost extracted relaxed planning graph, mw strategy orders
open conditions respect expected work extracted relaxed planning graph.
strategy loc annotation gives priority local open conditions among open
conditions, strategy conf annotation gives priority unsafe open conditions
among open conditions. refer reader paper Younes Simmons
(2003) thorough description heuristics well experimental results
domains.
depict results experiments Blocksworld problems first
third lines Table 4 (the second fourth lines Tables 4 5 explained later).
10

fiEngineering Conformant Probabilistic Planner

Strategy
ucpop
static
lcfr
lcfr-loc
lcfr-conf
lcfr-loc-conf
mc
mc-dsep
mc-loc
mc-dsep
mw
mw-dsep
mw-loc
mw-loc-dsep

Description
{n,s} LIFO / {o} LIFO
{t} LIFO / {n,s} LIFO / {o} LIFO
{n,s,o} LR
{n,s,l} LR
{n,s,u} LR / {o} LR
{n,s,u} LR / {l} LR
{n,s} LR / {o} MCadd
{n} LR / {o} MCadd / {s} LR
{n,s} LR / {l} MCadd
{n} LR / {l} MCadd / {s} LR
{n,s} LR / {o} MWadd
{n} LR / {o} MWadd / {s} LR
{n,s} LR / {l} MWadd
{n} LR / {l} MWadd / {s} LR

Table 3: description variety flaw selection strategies Vhpop. n nonseparable threat, separable threat, open condition, static
open condition, l local open condition, u unsafe open condition.

seen lcfr mc strategies work problem 8 blocks.
larger problems solvable. actions lifted, tried make search
space smaller delaying separable threats. Peot Smith (1993) explain delaying
separable threats may result decreased branching factor may many
ways add inequality constraints separation. delay might help
threat disappear variables bound. modified best working strategies,
namely variants mc mw, implemented delay separable threats (in Table 3
shown dsep suffix.) show planning times experiments
without dsep Table 5 (we repeat columns Table 4 comparison).
results show time improvement seen 5-blocks problem. problems
8 blocks show increase time threat must checked see
separable. Delaying threats made 8-blocks problem solvable using mc-loc, mw,
mw-loc strategies. However, larger problems solvable strategy.
results experiments various heuristics strategies show
search time increases dramatically going 5 8 blocks larger problems
solvable. able find heuristic combination solve larger problems.
noticed competition Blocksworld problems list goal towers top bottom
planner spends lot time dead end plans original goal order
preserved. tower built top bottom, initial goals almost always
undone achieve later goals. concluded interaction cannot
detected heuristics used designed consider subgoals
isolation. Koehler Hoffmann (2000) describe polynomial time algorithm
order goals minimize type undoing. algorithm operates ground
11

fiOnder, Whelan & Li

5
5o
8
8o

ucpop

static

lcfr

80
0



70
0



0
10
55K


lcfrloc
60
50



lcfrconf
570
10



lcfrloc-conf
90
770



mc
10
0
13K
42K

mcloc
50
40



mw
0
0

41K

mwloc
20
30



mwloc-conf
220
120



Table 4: Time (msec) required find base plan Blocksworld problems 5
8 blocks.

5
5o
8
8o

mc
10
0
13K
42K

mc-dsep
0
0
73K
104K

mc-loc
40
50



mc-loc-dsep
20
30
22K


mw
0
0

41K

mw-dsep
0
0
73K
103K

mw-loc
20
30



mw-loc-dsep
30
20
22K


Table 5: Time (msec) required find base plan delaying separable threats
Blocksworld problems 5 8 blocks.

action descriptions generated action schemas implemented
planning system (Hoffman & Nebel, 2001). used algorithm order
top-level goals repeated experiments ordering essentially builds
towers bottom top. results ordered goals shown lines 2
4 tables 4 5. Ordering goals mixed results. example, 8 blocks
problem, made lcfr heuristic usable mw heuristic usable. However,
lowest time increased 13K 41K milliseconds larger problems still
solvable.
final strategy combine planning approach used planner
POP-style search. particular, ordered top-level goals using FFs ordering algorithm ran Vhpop n times problems n top level goals. first problem
first goal Vhpop returned plan, steps simulated find
resulting state. second problem resulting state initial state goals 1
2 goal 1 would preserved redone goal 2 would achieved.
used strategy default heuristics Vhpop solve problem 21 blocks,
total time 70 milliseconds phases taking 0 milliseconds. Koehler
Hoffmann (2000) explain approach works well invertible planning problems,
i.e., problems Blocksworld actions reversible. case, tradeoff
possibility less optimal plans plan ith goal set working
+ 1st goal. second tradeoff getting several partially-ordered plans
breakpoints problems rather single maximally parallel plan. believe
worthwhile work algorithm combines individual plans preserve
least commitment ordering. Possible strategies causally link action preconditions
12

fiEngineering Conformant Probabilistic Planner

latest producers use approach Edelkamp (2004) parallelize sequential plans
using critical path analysis.

5. Conclusion Future Work
presented design implementation Probapop, partial-order, probabilistic,
conformant planner. described distance-based condition-probability based
heuristics used. discussed advantages disadvantages using incremental algorithm goals first ordered submitted one one. short
term plans involve implementing multiple search queues different base plans reincorporating ADL constructs PPDDL. future work involves three threads. one,
looking improving performance Probapop adding probability information planning graph probability open conditions optimistically
estimated. considering addition domain specific information (Kuter &
Nau, 2005) probabilistic domains. second thread, exploring middle
ground observability full observability considering POMDP-like problems partial-order setting. Finally, would incorporate hill climbing techniques
probabilistic framework. current Probapop 2.0 software available
www.cs.mtu.edu/nilufer.

Acknowledgments
work supported Research Excellence Fund grant Nilufer Onder
Michigan Technological University. thank JAIR IPC-4 special track editor David E.
Smith, anonymous reviewers helpful comments.

References
Bertoli, P., Cimatti, A., & Roveri, M. (2001). Heuristic search + symbolic model checking
= efficient conformant planning. Proceedings Eighteenth International Joint
Conference Artificial Intelligence (IJCAI-01), pp. 467472.
Blum, A. L., & Furst, M. L. (1997). Fast planning planning graph analysis. Artificial
Intelligence, 90, 281300.
Bonet, B., & Geffner, H. (2001). Planning heuristic search. Artificial Intelligence, 129 (12), 533.
Bonet, B., & Geffner, H. (2005). mGPT: probabilistic planner based heuristic search.
Journal Artificial Intelligence Research, 24, 933944.
Boutilier, C., Dean, T., & Hanks, S. (1999). Decision theoretic planning: Structural assumptions computational leverage. Journal Artificial Intelligence Research,
11, 194.
Brafman, R. I., & Hoffmann, J. (2004). Conformant planning via heuristic forward search:
new approach. Proceedings Fourteenth International Conference Automated
Planning & Scheduling (ICAPS-04), pp. 355364.
13

fiOnder, Whelan & Li

Edelkamp, S. (2004). Extended critical paths temporal planning. Workshop Integrating Planning Scheduling International Conference Automated Planning
Scheduling (ICAPS-04), pp. 3845.
Edelkamp, S., Hoffman, J., Littman, M., & Younes, H. (2004). International planning competition. Proceedings Fourteenth International Conference Automated Planning
& Scheduling (ICAPS-04).
Fern, A., Yoon, S., & Givan, R. (2006). Approximate policy iteration policy language
bias: Solving relational Markov decision processes. Journal Artificial Intelligence
Research, 25.
Ferraris, P., & Giunchiglia, E. (2000). Planning satisfiability nondeterministic domains. Proceedings Seventeenth National Conference Artificial Intelligence
(AAAI-00), pp. 748754.
Hansen, E. A., & Feng, Z. (2000). Dynamic programming POMDPs using factored
state representation. Proceedings Fifth International Conference Artificial
Intelligence Planning & Scheduling (AIPS-00), pp. 130139.
Hoffman, J., & Nebel, B. (2001). planning system: Fast plan generation
heuristic search. Journal Artificial Intelligence Research, 14, 253302.
Hoffmann, J., & Brafman, R. I. (2005). Contingent planning via heuristic forward search
implicit belief states. Proceedings Fifteenth International Conference
Automated Planning & Scheduling (ICAPS-05), pp. 7180.
Hyafil, N., & Bacchus, F. (2003). Conformant probabilistic planning via CSPs. Proceedings Thirteenth International Conference Automated Planning & Scheduling
(ICAPS-03), pp. 205214.
Kaelbling, L. P., Littman, M. L., & Cassandra, A. R. (1998). Planning acting
partially observable stochastic domains. Artificial Intelligence, 101, 99134.
Karlsson, L. (2001). Conditional progressive planning uncertainty. Proceedings
Eighteenth International Joint Conference Artificial Intelligence (IJCAI-01), pp.
431436.
Koehler, J., & Hoffmann, J. (2000). reasonable forced goal orderings use
agenda-driven planning algorithm. Journal Artificial Intelligence Research,
12, 339386.
Kushmerick, N., Hanks, S., & Weld, D. S. (1995). algorithm probabilistic planning.
Artificial Intelligence, 76, 239286.
Kuter, U., & Nau, D. (2005). Using domain-configurable search control probabilistic planners. Proceedings Twentieth National Conference Artificial Intelligence
(AAAI-05).
Majercik, S. M., & Littman, M. L. (1999). Contingent planning uncertainty via
stochastic satisfiability. Proceedings Sixteenth National Conference Artificial Intelligence (AAAI-99), pp. 549556.
McDermott, D. (1999). Using regression-match graphs control search planning. Artificial Intelligence, 109 (1-2), 111159.
14

fiEngineering Conformant Probabilistic Planner

Nguyen, X., & Kambhampati, S. (2001). Reviving partial order planning. Proceedings
Eighteenth International Joint Conference Artificial Intelligence (IJCAI-01), pp.
459464.
Onder, N., & Pollack, M. E. (1999). Conditional, probabilistic planning: unifying algorithm effective search control mechanisms. Proceedings Sixteenth
National Conference Artificial Intelligence (AAAI-99), pp. 577584.
Penberthy, J. S., & Weld, D. S. (1992). UCPOP: sound, complete, partial order planner
ADL. Proceedings Third International Conference Principles Knowledge
Representation & Reasoning (KR-92), pp. 103114.
Peot, M. A., & Smith, D. E. (1993). Threat-removal strategies partial order planning.
Proceedings Eleventh National Conference Artificial Intelligence (AAAI-93),
pp. 492499.
Pollack, M. E., Joslin, D., & Paolucci, M. (1997). Flaw selection strategies partial-order
planning. Journal Artificial Intelligence Research, 6, 223262.
Russell, S. J., & Norvig, P. (2003). Artificial Intelligence: Modern Approach, Second
Edition. Pearson Education, Upper Saddle River, NJ.
Smith, D. E., Frank, J., & Jonsson, A. K. (2000). Bridging gap planning
scheduling. Knowledge Engineering Review, 15 (1), 4783.
Thiebaux, S., Gretton, C., Slaney, J., Price, D., & Kabanza, F. (2006). Decision-theoretic
planning non-Markovian rewards. Journal Artificial Intelligence Research, 25.
Younes, H. L., Littman, M. L., Weissman, D., & Asmuth, J. (2005). first probabilistic
track international planning competition. Journal Artificial Intelligence
Research, 24, 851887.
Younes, H., & Simmons, R. (2003). VHPOP: Versatile heuristic partial order planner.
Journal Artificial Intelligence Research, 20, 405430.

15


