journal artificial intelligence

submitted published

note
time bounded best first search reversible non reversible
search graphs
carlos hernandez

carlos hernandez u unab cl

departamento de ciencias de la ingeniera
universidad andres bello
santiago chile

jorge baier

jabaier ing puc cl

departamento de ciencia de la computacion
pontificia universidad catolica de chile
santiago chile

roberto asn

rasin ucsc cl

departamento de ingeniera informatica
universidad catolica de la santsima concepcion
concepcion chile

abstract
time bounded real time single agent deterministic search expands
states graph order unlike interleaves search action execution known outperform state art real time search korfs learning
real time lrta benchmarks studied detail sometimes
considered true real time search since fails non reversible even
goal still reachable current state propose study time bounded
best first search tb bfs straightforward generalization time bounded
best first search furthermore propose restarting time bounded weighted tbr
wa deals adequately non reversible search graphs eliminating
backtracking moves incorporating search restarts heuristic learning non reversible
prove tb bfs terminates deduce cost bounds solutions returned
time bounded weighted tb wa instance tb bfs furthermore prove tbr
wa reasonable conditions terminates evaluate tb wa grid pathfinding
puzzle addition evaluate tbr wa racetrack compare
lss lrtwa variant lrta exploit lookahead search weighted
heuristic general observation performance tb wa tbr wa improves weight parameter increased addition time bounded almost
outperform lss lrtwa significant margin

introduction
many search applications time scarce resource examples range video game path
finding handful milliseconds given search controlling automated
characters bulitko bjornsson sturtevant lawrence highly dynamic robotics schmid
tomic ruess hirschmuller suppa settings usually assumed standard
search able compute complete solution action required
thus execution search must interleaved
c

ai access foundation rights reserved

fih ern andez baier

time bounded bjornsson bulitko sturtevant suitable searching tight time constraints nutshell given parameter k runs standard search
towards goal rooted initial state k expansions completed move performed search still needed resumed move computed follows agent
path found root node best node b search frontier
agent moved towards b following path otherwise performs backtracking move returning agent previous state terminates agent goal
state solution
time bounded relevant real time search community
significantly superior well known real time heuristic search applications
indeed hernandez baier uras koenig showed significantly outperforms state theart real time heuristic search rtaa koenig likhachev dartaa
hernandez baier pathfinding
relatively time bounded studied deeply literature one reasons perhaps inability adequately deal non reversible
indeed non reversible real time search fail soon
led agent dead end state e one goal unreachable timebounded however additional failure condition fail soon backtrack
move required unreversible action thus class cannot solve limited compared real time search example well known lrta korf
reason time bounded sometimes excluded experimental comparisons
real time search see e g burns ruml p
extend time bounded search two directions already noted
authors bjornsson et al time bounded limited first
contribution study implications search
instead specifically generalize time bounded time bounded best first search
general instance best first search call tb
applying time bounded second contribution extension
time bounded search allows deal adequately non reversible
propose restarting time bounded weighted call
tbr wa seen lying middle ground time bounded
learning real time search korfs learning real time lrta
fact tbr wa restarts search current state backtracking move available
updates heuristic function
carry theoretical analysis time bounded weighted tb wa instance
tb bfs tbr wa tb wa establish upper lower bounds
solution cost cost bound establishes domains solution cost may reduced
significantly increasing w without increasing search time hence contrast weighted solving offline search might obtain better solutions
increasing weight important since suggests tb wa w
preferred tb domains wa runs faster wa
run faster see e g wilt ruml known many situations
experimentally evaluate tb wa pathfinding benchmarks puzzle
tbr wa racetrack three benchmarks observe performance improvement w increased addition observe tb wa significantly superior tb


fit ime b ounded b est f irst earch r eversible n reversible earch g raphs

lss lrtwa rivera baier hernandez real time search use
weighted heuristics
extends work appears conference proceedings hernandez asn baier
including empirical analysis benchmarks counter strike maps racetrack
puzzle extending pathfinding experiments neighbor connectivity providing lower bound cost solution returned tb wa theorem
introducing analyzing evaluating tbr wa
rest organized follows start describing background needed
rest describe tb bfs tbr bfs including formal analysis
properties describe experimental finish summary
perspectives future

background
describe background rest
search reversible non reversible environments
search graph tuple g finite set states set edges
represent actions available agent state path graph
sequence states sn si si n
sn say successor edge moreover every
define succ
cost function c search graph c p
r e associates action
positive cost cost path sn c n
c si si e sum
costs edge considered path cost optimal path one
lowest cost among paths denote cost c addition denote
ct cost cost optimal path visits states
cost optimal path sn sn si n
search tuple c sstart sgoal g search graph sstart
sgoal states c cost function g search graph g reversible
symmetric whenever search reversible
search graph reversible consequently non reversible search graph
contains action contain action
solution search path sstart sgoal
best first search
best first search bfs pearl encompasses family search static environments associate evaluation function f every state priority
f f viewed promising node bfs starts initializing
priority states search space infinity except sstart priority set
f sstart priority queue open initialized containing sstart iteration
extracts open state lowest priority successor computes evaluation fs considering path found fs lower f


fih ern andez baier

added open f set fs repeats process sgoal open
lowest priority
pseudo code presented f value state usually implemented
attribute open list implemented priority list furthermore assume
cost fs computed line function path via thus fs take finite
number values execution bfs depends finite number simple
paths connect initial state
best first search




sroot scurrent
open
foreach
f
f sroot evaluation sroot
insert sroot open
open
let state minimum f value open
sgoal
return
remove open
foreach succ
fs evaluation function considering discovered
fs f
f fs
parent
insert open



return solution

















instance best first search weighted wa pohl wa computes evaluation function terms two functions g h g value corresponds cost
lowest cost path found far towards implemented attribute wa evaluation function defined f g wh g cost lowest cost path
found sstart addition h non negative user given heuristic function h
estimates cost path sgoal finally w real number greater equal
pseudo code wa obtained storing g value attribute state h value computed external function resulting pseudo code
appears
heuristic function h admissible h c sgoal function
h consistent h sgoal h c h every edge search graph
consistency implies path h c h turn implies
admissibility
bfss closed listdenoted henceforth closed defined set states
open g infinity words contains states
path known considered expansion
bfs initially sets f infinity every start node wa translates setting g infinity
except sstart



fit ime b ounded b est f irst earch r eversible n reversible earch g raphs

weighted




sroot scurrent
open
foreach
g
f
g sroot
f sroot wh sroot
insert sroot open
open
let state minimum f value open
sgoal
return
remove open
foreach succ
gs min g g c
gs g
g gs
f g wh
parent
insert open



return solution




















h admissible wa known solution whose cost cannot exceed wc sstart sgoal
wa may return increasingly worse solutions w increased advantage increasing w search time usually decreased fewer states expanded w
wa equivalent hart nilsson raphael another interesting generalizes
well known property consistent heuristics formally stated follows
lemma ebendt drechsler every moment execution weighted
state sroot h consistent upon expansion state line holds
g wc sroot
another instance best first search greedy best first search gbfs f equal
user given heuristic function h wa used sufficiently large value w
wa gbfs rank nodes similar way indeed let fgbfs fwa denote respectively f
function gbfs wa w exceeds g value every node ever generated
two nodes generated g value
fgbfs h h fgbfs hold fwa fwa however
even w sufficiently large reverse true since fwa fwa hold
true h h g value fwa acts practice tie breaker
real time heuristic search
real time search objective solve search subject additional real time
constraint constraint constant amount time independent size given
search end expected perform one actions
sequence constant small relation time would required offline


fih ern andez baier

search solve search performing actions agent reached
goal process repeats iteration understood two consecutive
episodes search episode path computed execution episode
actions path performed
rather receiving time limit seconds real time search receive parameter say k guarantee computational time taken search episode bounded
non decreasing function k example real time search local search space
learning real time lss lrta koenig sun receives search
p parameter k search episode runs bounded execution rooted
current state expands k states following updates heuristic values
states closed list run update usually referred learning step makes h
informed guarantees following holds every closed list
h min cclosed h
topen



execution episode performs actions appear path found current
state towards state lowest f value open list reversible search spaces h
lss lrta









input search p natural number k
sstart
goal state
run k states expanded goal node best state open
best state closed list lowest f value
closed
update h value equation holds
move along path found best
best

initially consistent shown lss lrta terminates search
solution koenig sun search space non reversible however termination cannot
guaranteed see later time bounded without restarts prove solution
exist well property hold whose search expands nodes
whose distance current state bounded lss lrta
comparing two real time search
one way frequently used literature compare two real time search b
comparing cost returned paths configured way
search episodes approximately duration assume real time search
requires n search episodes solve search runtime say
average time per search episode run n
evaluate relative performance two b use set benchmark
p set parameters parameter obtain
record average solution cost p average time per episode
likewise b plot average solution cost versus average time per episode
curve top curve b clearly


fit ime b ounded b est f irst earch r eversible n reversible earch g raphs

state b superior b returns better quality solutions comparable search time
per episode
another used compare real time search game time
model hernandez et al model time partitioned uniform time intervals
agent execute one movement time interval search movements done
parallel objective move agent start location goal location
time intervals possible game time model motivated video games video games often
partition time game cycles couple milliseconds long bulitko et al
game time model implementation real time search
modified stop search soon units timewhere parameterhave passed

time bounded best first search
time bounded tb bjornsson et al real time search
intuitively tb understood runs search sstart sgoal
alternates search phase execution phase goal reached search phase
bounded number states expanded execution phase two cases
agent path sstart best state open forward movement
path performed otherwise performs backtracking moves agent
moved state came search phase execute path connecting
sstart sgoal already found terminates agent reached
goal
generalization tb time bounded best first search simply replaces
tb best first search pseudo code shown parameters
search c sstart sgoal integer k refer lookahead
parameter
tb bfs uses variable scurrent store current state agent movetogoal procedure called main implements loop alternates search execution initialization
lines scurrent initialized sstart among things bfss open list set
contain sstart goal state reached represented fact variable
goalf ound false bounded version bfs called line expands k states
computes path sstart state open minimizes evaluation function f
path built quickly following parent pointers stored variable path execution phase lines current position agent scurrent path agent
performs action determined state immediately following scurrent path otherwise
backtracking move implemented moving agent parent search tree bfs
parent scurrent use backtracking moves mechanism guarantees agent
eventually reach state variable path worst case agent eventually reach
sstart soon state reached agent start moving towards state believed
closest goal
equivalent tb bfs replaced finally call timebounded greedy best first search tb gbfs use greedy
best first search instead bfs
note length path cannot general bounded constant size
bound computation search episode use technique described


fih ern andez baier

time bounded best first search











































procedure initializesearch
sroot scurrent
open
foreach
f
f sroot evaluation sroot
insert sroot open
goalfound false
function bounded best first search
expansions
open expansions k f sgoal mintopen f
let state minimum f value open
remove open
foreach succ
compute fs considering discovered
fs f
f fs
parent
insert open
expansions expansions
open return false
let sbest state minimum priority open
sbest sgoal goalfound true
path path sroot sbest
return true
function movetogoal
scurrent sstart
initializesearch
scurrent sgoal
goalfound false
bounded best first search false return false
scurrent path
scurrent state scurrent path
else
scurrent parent scurrent
execute movement scurrent
return true
procedure main
movetogoal true
print agent goal state
else
print solution



fit ime b ounded b est f irst earch r eversible n reversible earch g raphs

bjornsson et al whereby additional counter analogous k used measure
effort path extraction omitted pseudocode clarity
properties
analyze interesting properties proposed first
tb tb bfs terminates finds solution one exists important
property since many real time heuristic search e g lss lrta enter infinite loop
unsolvable second prove upper lower bound cost solutions
returned tb wa bound interesting since suggests increasing w one might
obtain better solutions rather worse
theorem tb bfs move agent goal state given reversible search p
solution p exists otherwise eventually print solution
proof follows fact best first search eventually finds path towards goal
fact search space finite state inserted open
finite number times addition moves carried including moving
parent executable reversible search space

important note reason tb bfs eventually print solution
unsolvable dependent fact open list used lss lrta cannot
detect unsolvable search expand locality around current state
characteristic agent centered search koenig class
tb bfs member
following two lemmas intermediate allow us prove upper bound
cost solutions obtained tb wa apply tb knowledge
lemma theorem proven tb
assume p c sstart sgoal reversible search
tb wa run parameter w h admissible heuristic furthermore
assume c max u v c u v c min u v c u v n w number
expansions needed wa solve p finally assume k n w reasonable
assumption given real time setting
lemma cost moves incurred agent controlled tb wa goalfound
becomes true bounded b n w
cc bounded b n w
cc
k
k
proof n w states expanded goalfound becomes true k states expanded
per call search procedure clearly b n w
c number calls best firstk
search terminates without setting goalfound true move costs least c c
follows

focus cost incurred complete path found following lemma
related property enjoyed tb stated theorem hernandez et al
lemma cost moves incurred agent controlled tb wa goalfound
become true cannot exceed wc sstart sgoal


fih ern andez baier

proof assume goalfound become true let path starts sstart ends
scurrent defined following parent pointers back sstart path prefix
path lowest f value state previous run wa therefore lemma
c wc sstart sgoal worst case terms number movements necessary reach
goal path coincide sstart case agent backtrack
way back sstart sstart reached agent move goal path cost
wc sstart sgoal thus agent may incur cost higher wc sstart sgoal reach
goal

obtain lower bound upper bound solution cost tb wa
follows straightforwardly two previous lemmas
theorem let c solution cost obtained tb wa
b

n w
n w
cc c b
cc wc sstart sgoal
k
k

proof put together inequalities implied lemmas



first observation shown empirically domains
w increased n w may decrease substantially gaschnig example reports
puzzle n exponential depth solution whereas n w large w
subexponential domains grid pathfinding well known high values
w substantial reductions expanded nodes see e g likhachev gordon thrun
thus increasing w lower bound first term upper bound may
decrease substantially second term upper bound wc sstart sgoal increasing
w may increase linearly w suggests situations better rather
worse quality solutions may found w increased see later confirmed
experimental evaluation
second observation bounds factor b n w kc decreases k increases suggests k large e close n w increasing w may actually lead
decreased performance
putting observations together theorem suggests tb wa produce better solutions tba k relatively small wa expands fewer nodes
offline mode wa expand fewer nodes exist wilt
ruml
finally hard see theorem generalized provide
optimality guarantees given two search b provide bounds whose
relative performance known theorem used predictor relative performance
tb versus tb b
non reversible search via restarting
non reversible well known real time heuristic search lss lrta
fail execution episode state path goal visited
time bounded tb bfs fail condition
fail soon physical backtrack required non reversible action second condition


fit ime b ounded b est f irst earch r eversible n reversible earch g raphs

failure reason sometimes time bounded discarded use nonreversible domains objective section propose time bounded
used non reversible fail due latter condition due former
modification tb wa non reversible comes incorporating
two key characteristics real time search lss lrta search restarts heuristic
updates indeed whenever physical backtracking available generally
predefined restart condition holds restarts search addition avoid getting
trapped infinite loops updates heuristic update rule lsslrta call resulting restarting time bounded weighted tbr wa
shows details tbr wa lines relevant difference
previous restarts search agent path certain
restart condition must become true action leading current state
scurrent parent parent scurrent
restarting time bounded weighted






















function movetogoal
scurrent sstart
initializesearch
scurrent sgoal
goalfound false
bounded wa false return false
scurrent path
scurrent state scurrent path
execute movement scurrent
else restart condition holds
update heuristic function h lss lrta update rule equation
initializesearch
else
scurrent parent scurrent
execute movement scurrent
return true
procedure main
movetogoal true
print agent goal state
else
print solution

note prior restarting updates heuristic lss lrta would
implemented version dijkstras note number states may
need updated may bounded constant needed compute update
incremental manner across several episodes refer reader analysis koenig
sun hernandez baier details implementation proofs
correctness
ermination tbr wa
tbr wa used reversible non reversible domains heuristic function h
initially consistent search graph strongly connected terminates


fih ern andez baier

theorem let p search strongly connected search graph tbr wa
run consistent heuristic h finds solution p
proof theorem depends intermediate proofs
appear elsewhere following establishes h consistent remains consistent
updated
lemma koenig sun h consistent remains consistent h updated
equation
another intermediate says h cannot decrease update following equation
lemma koenig sun h initially consistent h every cannot decrease
h updated following equation
another intermediate says h finitely converges intuitively means even
wanted apply infinite number updates h point h change
anymore
definition finite convergence series functions finitely converges function f
exists n every n holds fm f addition say series
functions finitely converges exists function f finitely converges
lemma let h consistent heuristic function p strongly connected graph let
hi hk function assigning hk hk
updating hk equation set closed open generated bounded weighted
run rooted arbitrary state finitely converges
proof first observation hk bounded positive number every
every k indeed lemma hk consistent thus admissible every k
addition solution hk c sgoal every every k
second observation set h values state take finite even
infinite formally prove h hk k finite set indeed hard verify
induction leave exercise reader equation every k
holds hk c ks h possibly empty path ks originating finishing
recall hk bounded observe finitely many paths
graph whose cost bounded conclude h finite set every
proof follows contradiction assuming finitely converge
non decreasing lemma possibility increases infinitely often implies
least one state h infinite contradiction conclude finitely
converges

note previous lemma saying anything function converges
need know function rest proof last intermediate
related ebendt drechsler stated section lemma
lemma every moment execution weighted state sroot h consistent
every state open list holds g wcclosed sroot


fit ime b ounded b est f irst earch r eversible n reversible earch g raphs

proof let cost optimal path sroot visits states closed let
state precedes part optimal path
cclosed sroot c cclosed sroot



successor holds
g g c



g wc sroot



g wc sroot c



g wcclosed sroot wc w cclosed sroot c



lemma

inequalities imply
w cclosed c

substituting equation
g wcclosed sroot




finishes proof
provide proof main section

proof theorem let us assume terminate thus enters infinite
loop note means restarts infinite number times otherwise weighted
would eventually goal state allowing agent reach goal assume moment
infinite execution h converged know lemma let
infinite sequence states si state search restarted prove
every h si h si
let denote contents open list exactly expanded si closed
denote contents closed list immediately heuristic updated equation
following holds
h si cclosed si h





rewrite equation
wh si wcclosed si wh



let g denote g value exactly si preferred expansion
prove wcclosed si g indeed closed follows lemma
fact cclosed c w hand open obtain
wcclosed si g lemma use fact write
wh si g wh




fih ern andez baier

preferred expand si instead g wh g si
wh si hence
wh si g si wh si

finally w g si obtain h si h si
implies sequence states strictly decreasing h values
state space finite must case si sj j j would
lead conclude h si h si contradiction


experimental
section presents experimental objective experimental evaluation
understand effect weight configuration performance tb wa tbr
wa end evaluate tb wa reversible search grid pathfinding
puzzle tbr wa non reversible racetrack reference compare
lss lrtwa rivera et al version lss lrta uses weighted rather
search phase used since among real time search
able exploit weights search lss lrtwa configured perform
single action execution phase
decided include wlss lrta rivera et al another real time
search exploits weights two reasons first focused relatively large lookahead values lookahead values rivera et al
grid terrain observe improvements significant second observed
puzzle wlss lrta yields worse performance w increased
section report neighbor grids similar manner reported
earlier publication hernandez et al section reports neighbor
grids game time model cf section section reports non reversible
maps deterministic version setting used evaluate stochastic shortestpath bonet geffner finally subsection reports puzzle
path finding tasks section section evaluated neighbor bulitko
et al koenig likhachev neighbor
grids aine likhachev see
figure costs movements respectively orthogonal diagonal
chess knight movements implementation agent cannot jump obstacles addition diagonal movement illegal x x x
obstacle neighbor neighbor grids use octile distance euclidean
distance heuristic values respectively experiments run intel r core tm ghz machine gbytes ram running linux common
code base use standard binary heap open ties open broken favor larger
g values rule breaking ties
neighbor neighbor grid maps
evaluated considering solution cost runtime measures solution quality
efficiency respectively several lookahead weight values
used maps video game baldurs gate bg room maps
rooms maps different size starcraft sc available n sturtevants


fit ime b ounded b est f irst earch r eversible n reversible earch g raphs

neighbor bg maps







cost log scale

cost log scale






tb

w






w


neighbor counter strike maps

lookahead
lookahead
lookahead
lookahead
lookahead
lookahead




tb



neighbor starcraft maps







tb

w






w

tb

tb

w










tb

w









w

tb




w

tb

tb

w





w




tb

w

tb

















w











lookahead
lookahead
lookahead
lookahead
lookahead
lookahead

tb




cost log scale

lookahead
lookahead
lookahead
lookahead
lookahead
lookahead


cost log scale

neighbor room maps






lookahead
lookahead
lookahead
lookahead
lookahead
lookahead

e















tb

w








tb

w








w
tb

w








tb

w








tb

tb

w















tb

w








tb

w








tb

w










tb

w



w

tb

tb

w













figure neighbor solution cost tends decrease w lookahead parameter
increased

path finding repository sturtevant addition used large maps counter strike
cs whose sizes range
evaluated six lookahead values maps six
lookahead values sc cs maps used six weight values
map generated random solvable search resulting bg rooms sc
cs
figures performance measures neighbor grid maps note
average search time per episode across lookahead
parameter search time per episode proportional lookahead parameter
depends variable particular depend weight thus fair conclusions
drawn comparing two configurations lookahead parameter set
value


fih ern andez baier

neighbor bg maps






tb

w






w


neighbor counter strike maps

lookahead
lookahead
lookahead
lookahead
lookahead
lookahead

runtime ms

runtime ms










neighbor starcraft maps



w


tb

tb

w




w







tb







tb


w







tb


w







w
tb


tb


w










w

tb


tb


w




















w











tb

runtime ms



lookahead
lookahead
lookahead
lookahead
lookahead
lookahead



tb

lookahead
lookahead
lookahead
lookahead
lookahead
lookahead


runtime ms

neighbor room maps





lookahead
lookahead
lookahead
lookahead
lookahead
lookahead















tb
w

tb
w








tb
w




tb
w







tb
w

w

tb
w











tb

tb

w









w








tb

tb

w













w
tb

tb

w















figure neighbor search time typically decreases w lookahead parameter
increased

observe following relations hold maps regarding solution cost search time

solution cost lookahead values solution cost decreases w increased significant improvements observed lower lookahead values surprising light
cost bound theorem large lookahead parameters value w
affect solution cost significantly lookahead parameter increases fewer search
episodes needed less physical backtracks back moves needed hernandez et al
back moves strongly influence performance tb wa
w increased number back moves decreases explains improvement solution quality example bg maps lookahead average reduction
back moves comparing w w whereas lookahead
reduction comparing w w


fit ime b ounded b est f irst earch r eversible n reversible earch g raphs

neighbor bg maps
lookahead
lookahead
lookahead
lookahead
lookahead
lookahead
















cost log scale

cost log scale






tb

w






w


neighbor counter strike maps

lookahead
lookahead
lookahead
lookahead
lookahead
lookahead




tb



neighbor starcraft maps







tb

w





w




tb


w

tb

tb

w










tb

w






tb

w









w

tb


w

tb






w




tb

w









tb

lookahead
lookahead
lookahead
lookahead
lookahead
lookahead


cost log scale


cost log scale

neighbor room maps





lookahead
lookahead
lookahead
lookahead
lookahead
lookahead

e















tb

w








tb

w








w
tb

w








tb

w








tb

tb

w















tb

w








tb

w








tb

w










tb

w



w

tb

tb

w













figure neighbor solution cost tends decrease w lookahead parameter
increased

search time w increased search time decreases significantly lower lookahead values
decreases moderately higher lookahead values rooms observe largest
improvements w increased behavior rooms explained wa
performs well type map w
figures performance measures neighbor grid maps observe
relations observed neighbor grid maps regarding solution cost search time
n eighbor versus n eighbor g rid aps
lower cost solutions obtained neighbor grids neighbor grids lookahead values bg note exist neighbor movements
expensive neighbor moves small lookaheads neighbor solutions may
similar number moves worse quality neighbor solutions hand


fih ern andez baier

neighbor bg maps






tb

w







neighbor counter strike maps

lookahead
lookahead
lookahead
lookahead
lookahead
lookahead

runtime ms

runtime ms

w




neighbor starcraft maps










w


tb

tb

w




w














tb
w







tb
w







tb
w








tb
w



tb
w

tb
w

















tb







w













tb

runtime ms



lookahead
lookahead
lookahead
lookahead
lookahead
lookahead



tb

lookahead
lookahead
lookahead
lookahead
lookahead
lookahead


runtime ms

neighbor room maps





lookahead
lookahead
lookahead
lookahead
lookahead
lookahead















tb
w

tb
w








tb
w




tb
w







tb
w

w

tb
w











tb

tb

w









w








tb

tb

w













w
tb

tb

w















figure neighbor search time typically decreases w lookahead parameter increased



b

figure neighborhoods neighborhoods b



fit ime b ounded b est f irst earch r eversible n reversible earch g raphs

neighbor counter strike maps


tb wa
tb wa
tb wa
tb wa
tb wa
tb wa











tb wa
tb wa
tb wa
tb wa
tb wa
tb wa


number time intervals

number time intervals



neighbor counter strike maps























duration time interval ms













duration time interval ms

figure game time model
similar quality observed lookahead values tb wa almost values w
lookahead configurations neighbor grids performs fewer moves neighbor grids
example sc w lookahead parameter neighbor grids need
factor moves neighbor grids note however neighbor moves
higher cost neighbor moves regarding runtime tb wa neighbor connectivity runs faster tb wa neighbor connectivity happens expansion
state neighbor connectivity takes time expanding state neighbor
connectivity
game time model
report tb wa game time model counter strike maps neighbor grids use milliseconds duration time
intervals setting quality solution measured number time intervals
required solve fewer intervals used better solution quality

figure shows average performance observe length time interval increases tb wa yields solutions better quality hand w increased tb wa
obtains better solutions observed clearly duration intervals
small e g ms observe better quality solutions rather neighbor
connectivity neighbor connectivity agent perform knight move
single interval
non reversible search graphs racetrack
section compare tbr wa lss lrtwa deterministic version racetrack barto bradtke singh bonet geffner race

fih ern andez baier

extended hansen racetrack


tbr wa
tbr wa
tbr wa
tbr wa
lss lrt wa
lss lrt wa
lss lrt wa
lss lrt wa




tbr wa
tbr wa
tbr wa
tbr wa
lss lrt wa
lss lrt wa
lss lrt wa
lss lrt wa



number actions


number actions

game map racetrack















average time per search ms













































































average time per search ms

figure racetrack grids
track represented grid cells marked obstacles similar grid pathfinding
move agent set initial positions cells marked final
position nevertheless agent associated velocity set actions
involve accelerating vertically horizontally performing op action maintains
current velocity
state racetrack tuple x vx vy x position vehicle
vx vy velocity vector actions represented tuples form ax ay
ax ay correspond acceleration vector unlike original version barto
et al actions deterministic one initial one destination cell
actions deterministic ax ay performed x vx vy state given
x vx vy vx vx ax vy vy ay x computed considering
vehicle changes velocity vx vy moving movement towards x
would lead crashing obstacle bonet geffner leave vehicle next
obstacle velocity
experiments used two racetracks firstwhich refer hrtis
grid corresponds extended version racetrack used hansen zilberstein grid use game map ar sr baldurs gate
whose size x refer map grt
generated random test cases hrt grt manhattan distance
initial state goal state greater half width map absolute
value components velocity vector restricted heuristic
use euclidean distance divided maximum speed
evaluated tbr wa lss lrtawa four weight values figure shows plot number actions versus average time per search episode tbr wa
number actions corresponds sum number moves plus number times


fit ime b ounded b est f irst earch r eversible n reversible earch g raphs

tbwa
tbwa
tbwa
tbwa
lss lrtwa
lss lrtwa
lss lrtwa
lss lrtwa


























lookahead



tbwa
tbwa
tbwa
tbwa
lss lrtwa
lss lrtwa
lss lrtwa
lss lrtwa




























puzzle
number expansions log scale

cost log scale

puzzle

lookahead

figure cost time comparison tb wa lss lrtwa

vehicle move tbr wa make movements search
restarted
important note time spent updating heuristic proportional number
states updated update tbr wa may take time update
lss lrtwa closed list may contain states former
reason use comparison average time per search considers search
update time
hrt figure observe worst behavior one obtained tbr wa
improve performance increasing w tbr wa used weight
greater clearly yields best performance grt worst tbr wa lss lrta improve increasing
weight
benchmark used fewer game maps carried
confidence analysis cost solutions hrt showed costs
best configuration tbr wa could away true mean
lss lrta costs could away true mean grt hand
difference performance two best configurations tbr lss lrtwa
statistically significant
finally experiments showed computational cost learning phase tb wa
higher lss lrta wa indeed number updates carried tb wa
times less number updates carried lss lrta wa hrt time
less grt explains better performance terms runtime


fih ern andez baier

puzzle
chose puzzle another domain evaluating time bounded
build puzzle implementation extending richard korfs implementation available carlos linaress homepage present tb wa lss lrt wa
use test cases presented korf uses manhattan distance heuristic
domain report slightly different way first omit tb
tb wa w terminate reasonable time due fact
needs many expansions solving hardest test cases second use number
expansions instead runtime efficiency measure domain found measure
stable since general solving take much time
w w w thus time prone affected external factors
controlled operating system
figure shows performance tb wa lss lrt wa use lookahead values
weights observe following relations
solution cost solution cost tb wa decreases w increased almost lookahead
values tb wa obtains better lss lrtwa lookahead values
w w performance tb wa worse performence lsslrta hand tb wa w obtains solution times better
average solution obtained lss lrta lss lrtwa w
number expansions number expansions tb wa decreases w increased
tb wa efficient lss lrtwa lookahead values w
worst performing configuration tb wa w
note curve remains flat several configurations small
number expansions needed solve
conclusion considering solution cost number expansions puzzle tb wa
better instance average solution cost tb wa times better
average average solution cost lss lrta
compare greedy parberry real time domainspecific unlike

summary conclusions
introduced time bounded best first search generalization real time search
time bounded addition introduced restarting version time bounded
tbr wa unlike tb bfs better coverage non reversible domains
carried theoretical analysis tb wa tbr wa including termination
cost bound tb wa given weight w bound suggests tb wa
significantly superior tb precisely search wa expands significantly
fewer states addition bound suggests tb wa may yield benefits
domains wa run offline yield improvements theoretical
bounds easily adapted instances best first search offer guarantees solution
http scalab uc es clinares download source ida ida html



fit ime b ounded b est f irst earch r eversible n reversible earch g raphs

quality tbr wa proved termination strongly connected graphs even contain
non reversible actions property enjoyed real time search lrta
family enjoyed tb bfs
experimental evaluation focused pathfinding puzzle racetrack
found tb wa tbr wa significantly superior real time
search lrta family addition found performance tends improve
weight parameter increased without increasing time per search episode finding
interesting although quality improved increasing lookahead parameter
increases time spent search episode
well known many search benchmarks wa may expand significantly fewer nodes
consistent experiments time bounded versions suboptimal
weighted produce significantly better solutions obtained tb improvements less noticeable lookahead parameter large predicted theory
first observe performance gains weights real time setting
indeed findings consistent rivera et al obtain better solutions
weighted heuristics work adds another piece evidence justifies studying
incorporation weights real time e g ribs eda sturtevant bulitko
bjornsson sharon felner sturtevant finally sla shue zamani
lrts bulitko lee two perform backtracking moves
investigation whether restarts could provide benefits left future
work

acknowledgements
thank vadim bulitko providing counter strike maps partly funded
fondecyt grant number

references
aine likhachev truncated incremental search faster replanning exploiting
suboptimality proceedings th aaai conference artificial intelligence aaai
bellvue washington usa
barto g bradtke j singh p learning act real time dynamic programming artificial intelligence
bjornsson bulitko v sturtevant n r tba time bounded proceedings
st international joint conference artificial intelligence ijcai pp
bonet b geffner h labeled rtdp improving convergence real time dynamic
programming icaps vol pp
bulitko v lee g learning real time search unifying framework journal
artificial intelligence
bulitko v bjornsson sturtevant n lawrence r real time heuristic search
game pathfinding applied artificial intelligence computer games springer
burns e ruml w b heuristic search time matters journal artificial
intelligence


fih ern andez baier

ebendt r drechsler r weighted search unifying view application artificial
intelligence
gaschnig j exactly good heuristics toward realistic predictive theory bestfirst search reddy r ed proceedings th international joint conference
artificial intelligence ijcai pp william kaufmann
hansen e zilberstein lao heuristic search finds solutions
loops artificial intelligence
hart p e nilsson n raphael b formal basis heuristic determination
minimal cost paths ieee transactions systems science cybernetics
hernandez c asn r baier j time bounded best first search proceedings
th symposium combinatorial search socs
hernandez c baier j avoiding escaping depressions real time heuristic
search journal artificial intelligence
hernandez c baier j uras koenig tbaa time bounded adaptive
proceedings th international joint conference autonomous agents multi
agent systems aamas pp valencia spain
koenig agent centered search artificial intelligence magazine
koenig likhachev fast replanning navigation unknown terrain ieee
transactions robotics
koenig likhachev real time adaptive proceedings th international
joint conference autonomous agents multi agent systems aamas pp
koenig sun x comparing real time incremental heuristic search real time
situated agents autonomous agents multi agent systems
korf r e real time heuristic search artificial intelligence
korf r e linear space best first search artificial intelligence
likhachev gordon g j thrun ara anytime provable bounds
sub optimality proceedings th conference advances neural information
processing systems nips vancouver canada
parberry memory efficient method fast computation short puzzle solutions
ieee trans comput intellig ai games
pearl j heuristics preintelligent search strategies computer solving
addison wesley longman publishing co inc boston usa
pohl heuristic search viewed path finding graph artificial intelligence

rivera n baier j hernandez c incorporating weights real time heuristic
search artificial intelligence
schmid k tomic ruess f hirschmuller h suppa stereo vision indoor outdoor navigation flying robots ieee rsj international conference intelligent robots systems iros pp


fit ime b ounded b est f irst earch r eversible n reversible earch g raphs

sharon g felner sturtevant n r exponential deepening real time agentcentered search proceedings th symposium combinatorial search socs pp

shue l zamani r admissible heuristic search komorowski h j
ras z w eds proceedings th international symposium methodologies
intelligent systems ismis vol lncs pp springer
sturtevant n benchmarks grid pathfinding transactions computational
intelligence ai games
sturtevant n r bulitko v bjornsson learning agent centered search
proceedings th international joint conference autonomous agents multi agent
systems aamas pp toronto ontario
wilt c ruml w weighted fail proceedings th symposium combinatorial search socs niagara falls ontario canada




