Journal Artificial Intelligence Research 56 (2016) 693-745

Submitted 03/16; published 08/16

Qualitative Spatial Logics Buffered Geometries
Heshan Du

H.Du@leeds.ac.uk

University Leeds, UK

Natasha Alechina

Natasha.Alechina@nottingham.ac.uk

University Nottingham, UK

Abstract
paper describes series new qualitative spatial logics checking consistency
sameAs partOf matches spatial objects different geospatial datasets,
especially crowd-sourced datasets. Since geometries crowd-sourced data usually accurate precise, buffer geometries margin error level
tolerance R0 , define spatial relations buffered geometries. spatial logics
formalize notions buffered equal (intuitively corresponding possibly sameAs),
buffered part (possibly partOf), near (possibly connected) far (definitely disconnected). sound complete axiomatisation logic provided respect
models based metric spaces. logics, satisfiability problem shown
NP-complete. Finally, briefly describe logics used system generating debugging matches spatial objects, report positive experimental
evaluation results system.

1. Introduction
motivation work qualitative spatial logics comes needs integrating
disparate geospatial datasets, especially crowd-sourced geospatial datasets. Crowd-sourced
data involves non-specialists data collection, sharing maintenance. Compared
authoritative geospatial data, collected surveyors geodata professionals, crowd-sourced data less accurate less well structured, often provides richer
user-based information reflects real world changes quickly much lower cost
(Jackson, Rahemtulla, & Morley, 2010). interests national mapping agencies,
government organisations, users geospatial data able integrate
use different geospatial data synergistically.
Geospatial data matching refers problem establishing correspondences (matches)
spatial objects represented different geospatial datasets. essential step
data comparison, data integration enrichment, change detection data update.
Matching authoritative geospatial data crowd-sourced geospatial data non-trivial
task. Geometry representations location place different datasets usually exactly same. Objects sometimes represented different levels
granularity. example, consider geometries objects Nottingham city centre given
Ordnance Survey Great Britain (OSGB) (2012) OpenStreetMap (OSM) (2012)
Figure 1. position shape Prezzo Ristorante represented differently
OSGB data (dotted) OSM data (solid). Victoria Shopping Centre represented
whole OSM, several shops OSGB.
c
2016
AI Access Foundation. rights reserved.

fiDu & Alechina

Figure 1: Prezzo Ristorante Victoria Shopping Centre represented OSGB (dotted)
OSM (solid)

order integrate datasets, need determine objects
(represent entity) sometimes objects one dataset parts objects
dataset (as example Victoria Shopping Centre). statements
representing two types relations referred sameAs matches partOf
matches respectively. One way produce matches use locations geometries
objects, although course use lexical labels associated objects,
names restaurants etc. previous work (Du, Alechina, Jackson, & Hart, 2016),
present method generates matches using location lexical information
spatial objects. generated matches may contain errors, seen retractable
assumptions require validation checking. One way use logical reasoning
check consistency matches respect statements input datasets.
using description logic reasoning, correctness matches checked respect
classification information. example, wrong state spatial objects
b same, Bank b Clinic, concepts Bank Clinic
disjoint, containing common elements. However, sufficient validating
matches spatial objects1 . example, two spatial objects close
one dataset cannot matched two spatial objects far away apart
dataset, matter whether type not. Therefore, spatial
reasoning required validate matches regard location information, addition
description logic reasoning.
Spatial logic studies relations geometrical structures spatial languages describing (Aiello, Pratt-Hartmann, & van Benthem, 2007). variety
spatial relations, topological connectedness regions, relations based distances,
relations expressing orientations directions, etc. spatial logic, spatial relations
represented formal language, first order logic fragments, inter1. works (Lutz & Milicic, 2007) extending description logics concrete domains constraint systems, region connection calculus (RCC) (Randell, Cui, & Cohn, 1992) Allens
Interval Algebra (Allen, 1983). description logic reasoner Pellet (Sirin, Parsia, Grau, Kalyanpur,
& Katz, 2007) extended PelletSpatial (Stocker & Sirin, 2009), supports qualitative spatial
reasoning RCC. However, later show appropriate use RCC application.

694

fiQualitative Spatial Logics Buffered Geometries

preted structures based geometrical spaces, topological spaces, metric
spaces Euclidean spaces. field qualitative spatial reasoning, several spatial
formalisms developed representing reasoning topological relations,
Region Connection Calculus (RCC) (Randell et al., 1992), 9-intersection
model (Egenhofer & Franzosa, 1991) extensions (Clementini & Felice, 1997; Roy
& Stell, 2001; Schockaert, Cock, Cornelis, & Kerre, 2008b, 2008a; Schockaert, Cock, &
Kerre, 2009). addition, formalisms representing reasoning directional relations (Frank, 1991, 1996; Ligozat, 1998; Balbiani, Condotta, & del Cerro,
1999; Goyal & Egenhofer, 2001; Skiadopoulos & Koubarakis, 2004), well relative
absolute distances (Zimmermann, 1995; Clementini, Felice, & Hernandez, 1997; Wolter &
Zakharyaschev, 2003, 2005). Recent comprehensive surveys qualitative spatial representations reasoning provided Cohn Renz (2008) Chen, Cohn, Liu, Wang,
OuYang, Yu (2015).
Qualitative spatial reasoning shown applicable geospatial data (Bennett, 1996; Bennett, Cohn, & Isli, 1997; Guesgen & Albrecht, 2000; Mallenby, 2007; Mallenby & Bennett, 2007; Li, Liu, & Wang, 2013), location information spatial
objects comes single data source. application described paper different, location representations spatial object come different sources
usually exactly same. Rather treating differences geometric
representations logical contradictions, would tolerate slight geometric differences
treat qualitatively defined large differences logical contradictions used detecting
wrong matches. specifically, establishing matches two sets spatial
objects, set matches gives rise contradiction, match must wrong
retracted. addition, would provide explanations help users understand contradiction exists matches wrong. following,
assess appropriateness several existing spatial formalisms purposes.
Region Connection Calculus (RCC) (Randell et al., 1992) first order formalism
based regions connection relation C, axiomatised reflexive
symmetric. Two regions x, connected (i.e. C(x, y) holds), closures share
point. Based connection relation, several spatial relations defined regions.
Among them, eight jointly exhaustive pairwise disjoint (JEPD) relations identified:
DC (Disconnected), EC (Externally Connected), P (Partially Overlap), P P (Tangential
Proper Part), N P P (Non-Tangential Proper Part), P P (Inverse Tangential Proper
Part), N P P (Inverse Non-Tangential Proper Part) EQ (Equal). referred
RCC8, well-known field qualitative spatial reasoning.
9-intersection model developed Egenhofer Franzosa (1991) Egenhofer
Herring (1991) based point-set interpretation geometries. comparing
nine intersections interiors, boundaries exteriors point-sets, identifies 29
mutually exclusive topological relations. 9-intersection model provides comprehensive
formal categorization binary topological relations points, lines regions.
small number 29 relations realisable particular space (Egenhofer &
Herring, 1991). Restricting point-sets simple regions (regions homeomorphic disks),
512 relations collapse RCC8 relations.
described application, found difficult use spatial formalisms
Region Connection Calculus (Randell et al., 1992) 9-intersection model (Egenhofer
695

fiDu & Alechina

& Franzosa, 1991), since presuppose accurate geometries regions sharp boundaries define spatial relations based connection relation. strict
crowd-sourced geospatial data. shown Figure 2, a1 sameAs a2 , representing
Prezzo Ristorante; b1 sameAs b2 , referring Blue Bell Inn. Though sameAs
matches correct, topological inconsistency still exists, since a1 b1 disconnected
(DC), a2 b2 externally connected (EC), spatial relations DC EC
disjoint. Therefore, relations based connection strict crowd-sourced geospatial
data possibly inaccurate may contain errors.

Figure 2: OSGB data, Prezzo Ristorante (a1 ) Blue Bell Inn (b1 ) disconnected, whilst OSM data, (a2 b2 ) externally connected.
egg-yolk theory independently developed Lehmann Cohn (1994), Cohn
Gotts (1996b, 1996a), Roy Stell (2001) extending RCC theory
Clementini Felice (1996, 1997) extending 9-intersection model, order represent reason regions indeterminate boundaries. theory, region
indeterminate boundary (an indeterminate region) represented pair regions,
egg yolk, maximum extension minimum extension
indeterminate region respectively (similar upper approximation lower approximation rough set theory, Pawlak, Polkowski, & Skowron, 2007). yolk
empty always proper part egg. egg-yolk theory presupposes
existence core part region vague part. described application,
location represented using two disconnected polygons authoritative geospatial dataset crowd-sourced geospatial dataset respectively. case,
could define certain inner region disconnected polygons, otherwise,
inconsistent treat different representations location.
aware several approaches (Fine, 1975; Zadeh, 1975; Smith, 2008)
representing vague concepts relations, adopted extend classical
theories RCC 9-intersection model. main approach assign degree
truth degree membership concepts relations. example, fuzzy region
connection calculus (fuzzy RCC) (Schockaert et al., 2008b, 2008a, 2009), connection
relation C defined reflexive symmetric fuzzy relation. regions a, b, C(a, b)
denotes degree b connected. Using C primitive relation,
every RCC relation R redefined calculate degree R holds.
fuzzy RCC similar formalisms may applied case shown Figure 2.
example, appropriate membership function relation EC, EC(a1 , b1 ) = 0.8
696

fiQualitative Spatial Logics Buffered Geometries

Figure 3: Buffering geometry X distance ; three dashed circles buffered part
(BPT) solid circle; dashed circle solid circle buffered equal
(BEQ)

EC(a2 , b2 ) = 1, contradiction arise. adopt approach
matching problem, mainly good way define degree membership,
difficult generate user-friendly explanations matches wrong
underlying reasoning numerical relatively obscure.
logic S(M ) proposed developed Sturm, Suzuki, Wolter, Zakharyaschev (2000), Kutz, Sturm, Suzuki, Wolter, Zakharyaschev (2002), Kutz, Wolter,
Sturm, Suzuki, Zakharyaschev (2003), Wolter Zakharyaschev (2003, 2005),
Kutz (2007) reasoning distances. logic S(M ) makes possible define
concepts object within distance 100 meters School. S(M )
parameter set. typical example Q0 . satisfiability problem finite set
S(Q0 ) formulas metric space EXPTIME-complete (Wolter & Zakharyaschev,
2003). S(M ) developed problem geospatial data matching. However, designed logics introduced paper, discovered form
proper fragment S(Q0 ). detect problematic matches, reason distances objects, reasoning restricted qualitative kind.
complexity satisfiability problem logics NP-complete, makes
somewhat suitable automatic debugging matches full S(Q0 ).
syntax semantics S(M ) proofs proper fragment relations
provided later paper (see Section 3).
paper, present series new qualitative spatial logics developed validating
matches spatial objects: logic NEAR FAR buffered points (LNF) (Du,
Alechina, Stock, & Jackson, 2013), logic NEAR FAR buffered geometries
(LNFS) logic part whole buffered geometries (LBPT) (Du & Alechina,
2014a, 2014b). notion buffer (ISO Technical Committee 211, 2003) used model
uncertainty geometry representations, tolerating slight differences margin
error level tolerance R0 . shown Figure 3, buffer geometry X
geometry contains exactly points within distance X. buffer
X denoted buffer (X , ). geometry X possibly represented inaccurately
within margin error one dataset, corresponding representation
dataset assumed somewhere within buffer (X , ).
spatial logics involve four spatial relations BufferedPartOf (BPT), BufferedEqual
(BEQ), NEAR FAR. formalize notions possibly partOf, possibly sameAs,
possibly connected (given possible displacement ) definitely disconnected
(even displaced ) respectively. geometry X BufferedPartOf geometry X 0 ,
X within buffer (X 0 , ); two geometries BufferedEqual, BufferedPartOf
697

fiDu & Alechina

Figure 4: NEAR FAR
(Figure 3). assume two geometries X X 0 two diferent
datasets may correspond object BufferedEqual. parameter
captures margin error representation geometries. Two geometries X,
NEAR, corresponding geometries X 0 , 0 dataset could connected,
i.e. distance(X, ) [0, 2] (Figure 4). Clearly, FAR(X , ) holds, NEAR(X , )
false X dataset. addition, want exclude
possibility NEAR(X 0 , 0 ) may hold X 0 , 0 (corresponding X, respectively)
dataset. Therefore define FAR(X , ) distance(X, ) (4, +) (Figure 4). possible two geometries X, NEAR FAR, is,
distance(X, ) (2, 4].
way defining BEQ, N EAR F AR similar defining distance
relations points Moratz Wallgrun (2012), point assigned one
reference distances. distance relations two points X, defined
comparing distance X, reference distances X .
different points different reference distances indicating nearness, distance
relations may symmetric. Differing work Moratz Wallgrun (2012),
relations defined points general geometries, every
geometry reference distances (, 2 4), leads symmetric
definitions BEQ, N EAR F AR. provide sound complete sets axioms
support reasoning BEQ, BP , N EAR F AR relations (see Section 4). reasoning useful verifying matches spatial representations different sources.
explained previous work (Du et al., 2013), though relations named
N EAR F AR, attempt model human notions nearness proximity,
influenced several factors, absolute distance, relative distance, frame
reference, object size, travelling costs reachability, travelling distance attractiveness
objects (Guesgen & Albrecht, 2000). work, provide strict mathematical
definition calculation whether two objects considered N EAR
F AR, based margin error . makes approach less likely
suitable simulation human notions nearness, provides useful tool verifying
consistency matches. following arguments formalized checking consistency
sameAs partOf matches: spatial objects a1 , b1 sameAs partOf spatial objects
a2 , b2 respectively, a1 , b1 N EAR, a2 , b2 F AR, contradiction exists.
rest paper structured follows. Section 2, Section 3 Section 4 provide
introduction new spatial logics: syntax semantics, relationships
logic S(M ), axioms theorems. Section 5 Section 6 present
proofs soundness, completeness, decidability complexity theorems LBPT,
proofs LNF LNFS similar LBPT expressive LNF
LNFS. Section 7 describes LBPT used debugging matches objects
698

fiQualitative Spatial Logics Buffered Geometries

different geospatial datasets. Section 8 discusses generality limitations spatial
logics. Section 9 concludes paper.

2. Syntax Semantics
language L(LN F ) defined
, := BEQ(a, b) | N EAR(a, b) | F AR(a, b) | |
a, b individual names. def ( ). language L(LN F S)
exactly L(LN F ). language L(LBP ) almost L(LN F )
L(LN F S), except BP instead BEQ predicate. L(LBP ) defined
, := BP (a, b) | N EAR(a, b) | F AR(a, b) | | .
L(LN F ), L(LN F S) L(LBP ) interpreted models based metric
space. Every individual name involved LNF formula mapped point, whilst
involved LNFS/LBPT formula mapped arbitrary geometry
non-empty set points.
Definition 1 (Metric Space) metric space pair (, d), non-empty
set (of points) metric , i.e. function : R0 ,
x, y, z , following axioms satisfied:
1. identity indiscernibles: d(x, y) = 0 iff x = y;
2. symmetry: d(x, y) = d(y, x);
3. triangle inequality: d(x, z) d(x, y) + d(y, z).
Definition 2 (Metric Model LNF) metric model LNF tuple (, d, I, ),
(, d) metric space, interpretation function maps individual
name element , R0 margin error. notion |= (
true model ) defined follows:
|= BEQ(a, b) iff (I (a), (b)) [0 , ];
|= N EAR(a, b) iff (I (a), (b)) [0 , 2 ];
|= F AR(a, b) iff (I (a), (b)) (4 , );
|= iff 6|= ;
|= iff |= |= ,
a, b individual names, , formulas L(LN F ).
Definition 3 (Metric Model LNFS/LBPT) metric model LNFS/LBPT
tuple (, d, I, ), (, d) metric space, interpretation function
maps individual name non-empty set elements , R0 margin
error. notion |= ( true model ) defined follows:
699

fiDu & Alechina

|= BP (a, b) iff pa (a) pb (b) : (pa , pb ) [0 , ];
|= N EAR(a, b) iff pa (a) pb (b) : (pa , pb ) [0 , 2 ];
|= F AR(a, b) iff pa (a) pb (b) : (pa , pb ) (4 , );
|= iff 6|= ;
|= iff |= |= ,
a, b individual names, , formulas L(LN F S)/L(LBP ). BEQ(a, b)
defined BP (a, b) BP (b, a).
notions validity satisfiability metric models standard. formula
satisfiable true metric model. formula valid (|= ) true
metric models (hence negation satisfiable). logic LNF/LNFS/LBPT
set valid formulas language L(LN F )/L(LN F S)/L(LBP ) respectively.

3. Relationship logic S(M )
logic S(M ), well variations, developed Sturm et al. (2000), Kutz
et al. (2002, 2003), Wolter Zakharyaschev (2003, 2005), Kutz (2007) reasoning
distances.
S(M ) family logics defined relative parameter set Q0 .
subject following two conditions: a, b + b r, + b ,
r = sup bounded, otherwise r = ; a, b b > 0, b .
alphabet S(M ) consists
infinite list region variables X1 , X2 ,...;
infinite list location constants c1 , c2 ,...;
set constant {ci } every location constant ci ;
.
binary distance (), equality (=) membership () predicates;
boolean operators u, (and derivatives t, > );
two distance quantifiers <a , duals <a , , every ;
two universal quantifiers .
S(M ) terms defined as:
s, := Xi | {ci } | > | | | u | <a | | s.
addition standard description logic concept constructions, S(M ) define
concept objects distance less instances concept
s: <a s, similarly distance a. <a defined <a (s)
(s) respectively.
700

fiQualitative Spatial Logics Buffered Geometries

S(M ) formulas defined
.
, := c | = | (c1 , c2 ) < | (c1 , c2 ) | | .
.
.
.
Further, v abbreviation (s u t) = =
6 abbreviation (s = t).
(c1 , c2 ) > (c1 , c2 ) defined ((c1 , c2 ) a) ((c1 , c2 ) < a) respectively.
S(M )-model B structure form:
B
B = hW, d, X1B , X2B , ..., cB
1 , c2 , ...i

hW, di metric space (Definition 1), XiB subset W , cB

element W . value S(M )-term B computed inductively
follows:
>B = W , B = ;
{ci }B = {cB
};
(s)B = W sB ;
B
(s1 u s2 )B = sB
1 s2 ;

(<a s)B = {x W | sB : d(x, y) < a};
(a s)B = {x W | sB : d(x, y) a};
(s)B = {x W | sB }.
<a , dual <a , respectively. instance,
(<a s)B = {x W | W : (d(x, y) < sB )}.
truth condition B |= , S(M )-formula, defined follows:
B |= c iff cB sB ;
.
B
B |= s1 = s2 iff sB
1 = s2 ;
B |= (k, l) < iff d(k B , lB ) < a;
B |= (k, l) iff d(k B , lB ) a;
B |= iff B 6|= ;
B |= iff B |= B |= .
set S(M ) formulas satisfiable, exists S(M )-model B
B |= every . denoted B |= .
proved LNF/LNFS/LBPT proper fragments logic S(Q0 ).
Strictly speaking, holds Q0 , later show finite set
LNF/LNFS/LBPT formulas satisfiable R0 , satisfiable = 1.
words, acts scaling factor (see proof Lemma 43).
701

fiDu & Alechina

Lemma 1 individual names a, b, S(M ) formula {a} v {b} expressible
LNF.
Proof. Let M1 , M2 metric models2 . M1 = (1 , d, I1 , ), M2 = (2 , d, I2 , ).
M1 , 1 = {o1 , o2 }, d(o1 , o2 ) = . I1 (a) = o1 , I1 (b) = o2 . individual name x
differing a, b, I1 (x) = o1 .
M2 , 2 = {o}. I2 (a) = o, I2 (b) = o. individual name x differing a, b,
I2 (x) = o. individual name y, Ii ({y}) = {Ii (y)}, {1, 2}.
definitions M1 , M2 , individual names x, y, d(I1 (x), I1 (y)) [0, ],
d(I2 (x), I2 (y)) = 0. atomic LNF formula x, y, Definition 2, M1 |=
iff M2 |= . easy induction logical connectives, LNF formula , M1 |=
iff M2 |= .
Since I1 ({a}) = {o1 }, I1 ({b}) = {o2 } I2 ({a}) = I2 ({b}) = {o}, truth definition S(M ) formulas, M1 |= ({a} v {b}), M2 6|= ({a} v {b}). Hence, {a} v {b}
equivalent LNF formula.
Lemma 2 logic LNF proper fragment logic S(Q0 ).
Proof. Every atomic LNF formula expressible S(Q0 ):
BEQ(a, b) ((a, b) 0) ((a, b) );
N EAR(a, b) ((a, b) 0) ((a, b) 2);
F AR(a, b) ((a, b) > 4).
means LNF formulas expressed fragment S(Q0 ) (the image
LNF translation above) contains location constants, binary distance predicate boolean connectives , . Lemma 1, LNF proper fragment
S(M ).
Lemma 3 individual names a, b, S(M ) formula v b expressible
LNFS/LBPT.
Proof. Let M1 , M2 metric models3 . M1 = (1 , d, I1 , ), M2 = (2 , d, I2 , ).
M1 , 1 = {o1 , o2 }, d(o1 , o2 ) = . I1 (a) = {o1 }, I1 (b) = {o2 }. individual
name x differing a, b, I1 (x) = {o1 }.
M2 , 2 = {o}. I2 (a) = {o}, I2 (b) = {o}. individual name x differing
a, b, I2 (x) = {o}.
atomic LNFS/LBPT formula x, y, Definition 3, M1 |= iff
M2 |= . easy induction logical connectives, LNFS/LBPT formula ,
M1 |= iff M2 |= .
2. Note construct models one-dimensional two-dimensional Euclidean space similar
way prove lemma.
3. Note construct models one-dimensional two-dimensional Euclidean space similar
way prove lemma.

702

fiQualitative Spatial Logics Buffered Geometries

truth definition S(M ) formulas, M1 |= (a v b) M2 6|= (a v b).
Hence, v b equivalent LNFS/LBPT formula.
Lemma 4 logic LNFS/LBPT proper fragment S(Q0 ).
Proof. Every atomic LNFS/LBPT formula expressible S(Q0 ):
(For LNFS) BEQ(a, b) iff (a v ( b)) (b v ( a));
(For LBPT) BP (a, b) iff (a v ( b));
.
N EAR(a, b) iff (a u (2 b) =
6 );
.
F AR(a, b) iff (a u (4 b) = ).
Note formulas right belong fragment S(Q0 ) image
LNFS/LBPT translation above.
correctness translation BEQ(a, b) BP (a, b) S(Q0 ) follows directly truth definition BEQ BP (Definition 3). show translation N EAR F AR correct, consider truth definition N EAR(a, b)
equivalent 0 dmin (a, b) 2 F AR(a, b) dmin (a, b) > 4, dmin (a, b) =
inf{d(pa , pb ) | pa I(a), pb I(b)}. shown Wolter Zakharyaschev (2005)
.
dmin (a, b) iff u (m b) =
6 . makes translation formulas
truth conditions defined Definition 3. Lemma 3, LNFS/LBPT proper
fragment S(Q0 ).
Wolter Zakharyaschev (2003) proved satisfiability problem finite set
S(Q0 ) formulas metric space EXPTIME-complete, provides upper
bound complexity satisfiability problems LNF, LNFS LBPT metric
space.
Kutz et al. (2002) Kutz (2007) gave axioms inference rules connecting S(M )
terms (e.g. 0 s) S(M ) variants. However, axiomatisation
going present LNF, LNFS LBPT formulas (corresponding S(M ) formulas
rather S(M ) terms).

4. Axioms Theorems
section presents sound complete axiomatisation logic LNF/LNFS/LBPT
respectively. axiomatic systems used basis rule-based reasoner
described later Section 7 4 .
following calculus (which refer LNF) sound complete
LNF:
Axiom 0 tautologies classical propositional logic
4. important complete axiomatisation. Otherwise, reasoner detect
LNF/LNFS/LBPT inconsistencies caused problematic matches.

703

fiDu & Alechina

Axiom 1 BEQ(a, a);
Axiom 2 BEQ(a, b) BEQ(b, a);
Axiom 3 N EAR(a, b) N EAR(b, a);
Axiom 4 F AR(a, b) F AR(b, a);
Axiom 5 BEQ(a, b) BEQ(b, c) N EAR(c, a);
Axiom 6 BEQ(a, b) N EAR(b, c) BEQ(c, d) F AR(d, a);
Axiom 7 N EAR(a, b) N EAR(b, c) F AR(c, a);
MP Modus ponens: , ` .
following calculus (which refer LNFS) sound complete
LNFS:
Axiom 0 tautologies classical propositional logic
Axiom 1 BEQ(a, a);
Axiom 2 BEQ(a, b) BEQ(b, a);
Axiom 3 N EAR(a, b) N EAR(b, a);
Axiom 4 F AR(a, b) F AR(b, a);
Axiom 5 BEQ(a, b) BEQ(b, c) N EAR(c, a);
Axiom 6 BEQ(a, b) N EAR(b, c) BEQ(c, d) F AR(d, a);
Axiom 8 N EAR(a, b) BEQ(b, c) BEQ(c, d) F AR(d, a);
MP Modus ponens: , ` .
Axiom 7 calculus LNF holds points, arbitrary geometries,
two points within line polygon far other. Axiom 7
replaced Axiom 8 LNFS. axioms LNFS LNF.
following calculus (which refer LBPT) sound complete
LBPT:
Axiom 0 tautologies classical propositional logic
Axiom 3 NEAR(a, b) NEAR(b, a);
Axiom 4 FAR(a, b) FAR(b, a);
Axiom 9 BPT (a, a);
Axiom 10 BPT (a, b) BPT (b, c) NEAR(c, a);
704

fiQualitative Spatial Logics Buffered Geometries

Axiom 11 BPT (b, a) BPT (b, c) NEAR(c, a);
Axiom 12 BPT (b, a) NEAR(b, c) BPT (c, ) FAR(d , a);
Axiom 13 NEAR(a, b) BPT (b, c) BPT (c, ) FAR(d , a);
MP Modus ponens: , ` .
calculus LBPT similar calculus LNFS. Changing predicates BEQ
BP , LNFS Axioms 1, 6, 8 replaced Axioms 9, 12, 13 respectively LBPT. Since
BP symmetric, LNFS Axiom 2 corresponding axiom LBPT,
LNFS Axiom 5 replaced two LBPT axioms, Axiom 10 Axiom 11.
notion derivability ` LNF/LNFS/LBPT calculus standard. formula
derivable ` . set LNF/LNFS/LBPT-inconsistent formula
derives .
proved following theorems LNF, LNFS LBPT.
Theorem 1 (Soundness Completeness) LNF/LNFS/LBPT calculus sound
complete metric models, namely
` |=
(every derivable formula valid every valid formula derivable).
Theorem 2 (Decidability Complexity) satisfiability problem finite set
LNF/LNFS/LBPT formulas metric space NP-complete.
following sections, give proofs results case LBPT.
proofs LNF LNFS similar. LBPT, following derivable formulas,
refer facts completeness proof:
Fact 14 BP (a, b) N EAR(a, b);
Fact 15 N EAR(a, b) F AR(a, b);
Fact 16 N EAR(a, b) BP (b, c) F AR(c, a);
Fact 17 BP (a, b) F AR(a, b);
Fact 18 BP (a, b) BP (b, c) F AR(c, a);
Fact 19 BP (b, a) BP (b, c) F AR(c, a);
Fact 20 BP (a, b) BP (b, c) BP (c, d) F AR(d, a);
Fact 21 BP (b, a) BP (b, c) BP (c, d) F AR(d, a);
Fact 22 BP (a, b) BP (b, c) BP (c, d) BP (d, e) F AR(e, a);
Fact 23 BP (b, a) BP (b, c) BP (c, d) BP (d, e) F AR(e, a);
Fact 24 BP (b, a) BP (c, b) BP (c, d) BP (d, e) F AR(e, a).
shown Facts 17-24, chain four BP implies negation F AR,
F AR defined > 4 distance away Definition 3.
705

fiDu & Alechina

5. Soundness Completeness LBPT
section shows LBPT calculus sound complete metric models.
Though several definitions lemmas presented previous work (Du et al.,
2013; Du & Alechina, 2014b), proofs presented complete, structured, accurate (small errors corrected) simplified.
proof soundness (every LBPT derivable formula valid: ` |= )
easy induction length derivation . Axioms 3, 4, 9-13 valid (by
truth definition BP , N EAR F AR) modus ponens preserves validity.
rest section, prove completeness (every LBPT valid formula derivable):
|= `
actually prove finite set LBPT formulas consistent,
metric model satisfying it. finite set formulas rewritten formula
conjunction formulas . consistent, iff consistent (6` ).
metric model satisfying , satisfies , thus 6|= . Therefore,
show consistent, exists metric model satisfying it,
show 6` , 6|= . shows 6` 6|= contraposition get
completeness.
completeness theorem proved constructing metric model maximal
consistent set (Definition 4) finite consistent set LBPT formulas (Lemma 5).
Definition 4 (MCS) set formulas language L(LBP ) maximal consistent, consistent, set LBPT formulas set individual names
properly containing inconsistent. maximal consistent set formulas,
call CS.
Proposition 1 (Properties MCSs) CS, then,
closed modus ponens: , , ;
derivable, ;
formulas : ;
formulas , : iff ;
formulas , : iff .
Lemma 5 (Lindenbaums Lemma) consistent set formulas language
L(LBP ), CS + set individual names
+ .
Let 0 , 1 , 2 , ... enumeration LBPT formulas set individual names
. + defined follows:
0 = ;
n+1 = n {n }, consistent, otherwise, n+1 = n {n };
706

fiQualitative Spatial Logics Buffered Geometries

+ =



n0 n .

finite consistent set formulas , construct metric model satisfying
maximal consistent set + , contains set individual names
, follows. Firstly, equivalently transform + B(+ ), set basic
quantified formulas. construct set distance constraints D(+ ) B(+ ).
key concept path-consistency set distance constraints.
Definition 5 (Non-negative Interval) interval h non-negative, h [0, +).
Definition 6 (Distance Constraint, Distance Range) distance constraint statement form d(p, q) g, p, q constants representing points, d(p, q) stands
distance p, q, g non-negative interval, stands distance
range p, q.
Definition 7 (Composition) d1 , d2 non-negative real numbers, composition {d1 } {d2 } defined as: {d1 } {d2 } = [|d1 d2 |, d1 + d2 ] 5 . g1 , g2 nonnegative intervals, composition interval union {d1 }{d2 },
d1 g1 , d2 g2 , is,

g1 g2 = d1 g1 ,d2 g2 {d1 } {d2 }.
assumed set distance constraints contains one distance range
pair constants p, q involved D, closed symmetry, i.e. d(p, q) g
D, d(q, p) g D.
Definition 8 (Path-Consistency) set distance constraints D, every pair
different constants p, q involved D, distance range strengthened successively
applying following operation fixed point reached:
: g(p, q) g(p, q) (g(p, s) g(s, q))
constant D, 6= p, 6= q, g(p, q) denotes distance range p, q.
process called enforcing path-consistency D. fixed point, every pair
constants p, q, g(p, q) 6= , called path-consistent.
paper, say interval referred process enforcing path-consistency
D, occurs involved enforcement operation g(p, q) g(p, q)
(g(p, s)g(s, q)). words, used g(p, q), g(p, s) g(s, q). distance constraint
appears process enforcing path-consistency D, distance range (an interval)
referred process enforcing path-consistency D.
way enforcing path-consistency set distance constraints defined
almost enforcing path-consistency binary constraint satisfaction
problem (CSP) (Renz & Nebel, 2007; van Beek, 1992), except operation :
g(p, q) g(p, q) (g(p, s) g(s, q)) ( composition operator non-negative intervals,
Definition 7) applied instead k : Rij Rij (Rik Rkj ) ( composition operator
5. Based d(x, z) d(x, y) + d(y, z) (Property 3 Definition 1).

707

fiDu & Alechina

relations). time complexity path-consistency algorithm CSP O(n3 ) (van
Beek, 1992; Mackworth & Freuder, 1985), n number variables involved
input set binary constraints. path-consistency algorithm CSP adapted
easily enforcing path-consistency set distance constraints. time complexity
resulting path-consistency algorithm O(n3 ), n number constants
involved input set distance constraints. Later paper, show
process enforcing path-consistency D(+ ) terminates, fixed point
reached O(n3 ) (see Lemma 33).
constructing set distance constraints D(+ ) + , prove Metric
Model Lemma, Metric Space Lemma Path-Consistency Lemma stated below.
notion path-consistency acts bridge lemmas.
Lemma 6 (Metric Model Lemma) Let finite consistent set formulas, +
CS contains set individual names .
metric space satisfies D(+ ), extended metric model satisfying + .
Lemma 7 (Metric Space Lemma) Let finite consistent set formulas, +
CS contains set individual names . D(+ )
path-consistent, metric space (, d) distance constraints
D(+ ) satisfied.
Lemma 8 (Path-Consistency Lemma) Let finite consistent set formulas,
+ CS contains set individual names . Then,
D(+ ) path-consistent.
Using three lemmas, prove completeness LBPT: finite set formulas
LBPT-consistent, exists metric model satisfying it.
Proof. LBPT-consistent, Lindenbaums Lemma (Lemma 5), CS
+ set individual names + . Path-Consistency
Lemma (Lemma 8) Metric Space Lemma (Lemma 7), metric space (, d)
distance constraints D(+ ) satisfied. Metric Model Lemma
(Lemma 6), metric space extended metric model satisfying + . Since
+ , satisfies .
detailed proofs Metric Model Lemma, Metric Space Lemma PathConsistency Lemma provided Section 5.1, Section 5.2 Section 5.3 respectively.
Note that, paper, + denotes CS contains given finite consistent set
formulas set individual names .
5.1 Metric Model Lemma
section shows construct set distance constraints D(+ ) + ,
presents proof Metric Model Lemma.
definition properties MCSs (Definition 4 Proposition 1), following
lemma holds.
708

fiQualitative Spatial Logics Buffered Geometries

Lemma 9 + CS, pair individual names a, b occurring ,
exactly one following cases holds + :
1. case(a, b) = BP (a, b) BP (b, a);
2. case(a, b) = BP (a, b) BP (b, a);
3. case(a, b) = BP (a, b) BP (b, a);
4. case(a, b) = BP (a, b) BP (b, a) N EAR(a, b);
5. case(a, b) = N EAR(a, b) F AR(a, b);
6. case(a, b) = F AR(a, b),
case(a, b) denotes formula holds a, b case.
Lemma 9 proved using LBPT axioms facts (such Axiom 3, Facts 14, 15)
way proving lemma LNF (see Du et al., 2013). full proof Lemma 9
provided Appendix A.
construction set distance constraints D(+ ) + two main steps:
Step 1 every pair individual names a, b occurring , translate case(a, b)
set first order formulas equi-satisfiable case(a, b). union
sets first order formulas B(+ ) (hence, B(+ ) equi-satisfiable.).
step described Definition 9 Definition 10.
Step 2 construct set distance constraints D(+ ) B(+ ). step described Definitions 11-13.
LBPT formulas, first order formulas corresponding truth definition
Definition 3. use formulas form d(p, q) g abbreviations equivalent
first order formulas. example, d(p, q) [0, ] abbreviates d(p, q) 0 d(p, q) .
Observe that6
BP (a, b) pa pb b : (pa , pb ) [0 , ] equi-satisfiable ;
N EAR(a, b) pa pb b : (pa , pb ) [0 , 2 ] equi-satisfiable;
F AR(a, b) pa pb b : (pa , pb ) (4 , ) equi-satisfiable.
Definition 9 (Basic Quantified Formula) refer first order formulas
following forms basic quantified formulas:
pa pb b : (pa , pb ) g;
pa pb b : (pa , pb ) g;
6. Note pa pb b : (pa , pb ) [0 , ], actually quantifying metric space.
sense, precise say, example, BP (a, b) satisfiable metric model, iff
pa pb b : (pa , pb ) [0 , ] satisfiable metric space.

709

fiDu & Alechina

pa pb b : (pa , pb ) g;
pa pb b : (pa , pb ) g,
g non-negative interval. abbreviations four forms defined
(a, b, g), (a, b, g), (a, b, g) (a, b, g) respectively. words, example,
(a, b, g) (pa pb b : (pa , pb ) g).
translate formula case listed Lemma 9 basic quantified
formulas, used count number points needed interpreting individual
names occurring later.
Definition 10 (B(+ )) CS + set individual names ,
corresponding set basic quantified formulas B(+ ) constructed follows. every
pair individual names a, b, translate case(a, b) basic quantified formulas:
translate(BP (a, b) BP (b, a)) = {(a, b, [0, ]), (b, a, [0, ])};
translate(BP (a, b) BP (b, a)) = {(a, b, [0, ]), (b, a, (, ))};
translate(BP (a, b) BP (b, a)) = {(a, b, (, )), (b, a, [0, ])};
translate(BP (a, b) BP (b, a) N EAR(a, b)) = {(a, b, (, )),
(b, a, (, )), (a, b, [0, 2]), (b, a, [0, 2])};
translate(N EAR(a, b) F AR(a, b)) = {(a, b, (2, )), (b, a, (2, )),
(a, b, [0, 4]), (b, a, [0, 4])};
translate(F AR(a, b)) = {(a, b, (4, )), (b, a, (4, ))},
R0 fixed margin error. Let names() set individual names
occurring . Then,

B(+ ) = anames(),bnames() translate(case(a, b)).
following, set basic quantified formulas B(+ ), construct set
distance constraints D(+ ), show metric space satisfying D(+ ),
extended model + . words, constructing metric
set points used interpret individual names.
number points needed interpreting individual name depends
numbers different forms formulas B(+ ). individual name a, let us predict
many particular constants points(a) (points assigned individual name a)
specified finite set formulas B(+ ). points(a) contains least
one constant. formula B(+ ) says exists constant points(a),
constant particular constant within points(a). pair different individual names
a, b, (a, b, g) (b, a, g) B(+ ), count one them; (a, b, g)
B(+ ), map constants points(a) constant points(b).
Lemma 9 Definition 10, B(+ ), pair different individual names a, b
R {, , } never R(a, b, g1 ) R(a, b, g2 ), g1 6= g2 , time.
cardinality points(a) specified follows.
710

fiQualitative Spatial Logics Buffered Geometries

Definition 11 (num(a, B(+ )) points(a)) Let names() set individual names
occurring 7 . individual name names(),
num(a, B ( + )) = |{b names( ) | g : (a, b, g) B ( + )}|
num(a, B ( + )) = |{b names( ) | g : (a, b, g) B ( + )}|
num(a, B ( + )) = |{b names( ) | g : (b, a, g) B ( + )}|
num(a, B ( + )) = num(a, B ( + )) + num(a, B ( + )) + num(a, B ( + )).
points(a) set constants {p1a , . . . , pna }, n = num(a, B(+ )).
Definition 12 (Witness formula) witness formula (a, b, g) pair
constants pa points(a), pb points(b) d(pa , pb ) g. witness formula
(a, b, g) (b, a, g) constant pa points(a), constant pb points(b),
d(pa , pb ) g. constant clean formula, witness formula.
Definition 13 (D(+ )) Let B(+ ) corresponding set basic quantified formulas
CS + . every individual name , assign fixed set new constants points(a) it. construct set distance constraints D(+ ) follows,
iterating basic quantified formulas B(+ ) eliminating quantifiers new
constants. Initially, D(+ ) = {}. every individual name , every constant
pa points(a), add d(pa , pa ) {0} D(+ ). every pair different individual
names a, b,
(a, b, g) B ( + ), take clean constants pa points(a), pb points(b),
add (pa , pb ) = (pb , pa ) g D(+ ), pa , pb become witness (a, b, g);
(a, b, g) B ( + ), take clean constant pa points(a), every pb points(b),
add (pa , pb ) = (pb , pa ) g D(+ ), pa becomes witness (a, b, g);
(b, a, g) B ( + ), take clean constant pb points(b), every pa points(a),
add (pa , pb ) = (pb , pa ) g D(+ ), pb becomes witness (b, a, g);
(a, b, g) B ( + ), take clean constant pb points(b), every pa points(a),
add (pa , pb ) = (pb , pa ) g D(+ ), pb becomes witness (a, b, g);
(b, a, g) B ( + ), take clean constant pa points(a), every pb points(b),
add (pa , pb ) = (pb , pa ) g D(+ ), pa becomes witness (b, a, g);
(a, b, g) B ( + ), every pair constants pa points(a), pb points(b),
add (pa , pb ) = (pb , pa ) g D(+ ).
every pair different constants p, q D(+ ), add (p, q) = (q, p) [0 , )
D(+ ), repeatedly replace (p, q) = (q, p) g1 (p, q) = (q, p) g2
(p, q) = (q, p) (g1 g2 ), one distance range pair p, q
D(+ ).
7. definition + , + contains set individual names .

711

fiDu & Alechina

Definition 13, every pair different individual names a, b, check whether
(a, b, g) B ( + ) holds check whether (b, a, g) B ( + ) holds, possible one holds. reason, check (a, b, g) B ( + )
(b, a, g) B ( + ) separately. Definition 10, (a, b, g) B ( + ) iff (b, a, g) B ( + ).
Hence need check one them. check whether (a, b, g) B ( + )
holds, (a, b, g) B ( + ) iff (b, a, g) B ( + ).
Lemma 10 constructing D(+ ), individual name a, number clean
constants needed points(a) larger num(a, B(+ )).
Proof. Definition 10, individual name a, (a, a, [0, ]) B(+ ). Definition 11, num(a, B(+ )) 1.
involved formula form (a, b, g), (a, b, g) (b, a, g),
individual name b, Definition 11, num(a, B(+ )) = 1. Definition 13,
need clean constants points(a).
Otherwise, Lemma 9 Definition 10, B(+ ), pair different individual
names a, b R {, , }, never R(a, b, g1 ) R(a, b, g2 ), g1 6= g2 ,
time. Definition 13, (a, b, g) B(+ ), take one clean constant
points(a), num(a, B(+ )) clean constants needed total formulas
form. Similarly, num(a, B(+ )) (num(a, B(+ )) 1) clean constants needed
formulas forms (a, b, g) (b, a, g) respectively, a, b different individual
names. need clean constant points(a) formulas forms.
Definition 11, num(a, B(+ )) enough.
D(+ ) B(+ ) equi-satisfiable way assign witnesses
formulas. specifically, pair different individual names a, b, (a, b, g)
B(+ ), map constants points(a) constant points(b).
words, B 0 (+ ) set formulas resulting replacing every (a, b, g) B(+ )
(b, a, g), D(+ ) B 0 (+ ) equi-satisfiable. Since every individual name
interpreted non-empty set constants, model satisfies (b, a, g), satisfies
(a, b, g), vice versa. Hence, constructing D(+ ) B 0 (+ ) rather B(+ )
imposes stronger restrictions (i.e. (a, b, g) B(+ ) replaced (b, a, g) B 0 (+ ))
metric space compared required + . However, later show
+ consistent, D(+ ) satisfied metric space proving Metric
Space Lemma Path-Consistency Lemma following sections.
proving Metric Model Lemma, let us look important properties
D(+ ), shown Lemmas 11-13. proof Lemma 11 provided Appendix A.
Lemma 12 follows proof Lemma 11.
Lemma 11 distance range g occurring D(+ ),
g {{0}, [0, ], (, ), [0, 2], (2, ), (2, 4], (4, ), [0, )}.
Lemma 12 p points(a), q points(b), 6= b, d(p, q) {0} D(+ ).
Lemma 13 number constants D(+ ) finite.
712

fiQualitative Spatial Logics Buffered Geometries

Proof. assumed finite consistent set formulas n (a finite number) individual names. Lemma 9 Definition 10, B(+ ) contains f =
(n + 2n(n 1)) formulas n individual names. Definition 11, individual
name a, num(a, B(+ )) f . Definition 13, number constants D(+ )
nf .
Metric Model Lemma proved follows.
Lemma 14 metric model satisfies B(+ ), satisfies + .
Proof. lemma follows two observations. First, Lemma 9, + entailed
set C(+ ) = {case(a, b) : names(+ ), b names(+ )}. Second, Definition 10,
B(+ ) translation truth conditions C(+ ) first order logic. metric model
satisfies B(+ ), satisfies C(+ ), hence satisfies + .
Lemma 6 (Metric Model Lemma) Let finite consistent set formulas,
+ CS contains set individual names .
metric space satisfies D(+ ), extended metric model satisfying + .
Proof. Suppose metric space satisfies D(+ ). extend metric model
interpreting every individual name occurring + points(a), corresponding set
constants size num(a, B(+ )) (Definition 11 Definition 13). Definition 13,
formula form (a, a, [0, ]) satisfied . pair different individual names, every , formula witness, formulas satisfied
. Therefore, metric model B(+ ). Lemma 14, metric model + .

5.2 Metric Space Lemma
process enforcing path-consistency (Definition 8) involves application
composition operator (Definition 7), present several lemmas Section 5.2.1 demonstrate main calculation rules properties intervals obtained composition. Section 5.2.2, characterize distance constraints D(+ ) appearing
process enforcing path-consistency D(+ ). Using definitions lemmas introduced Section 5.2.1 Section 5.2.2, Metric Space Lemma proved
Section 5.2.3.
5.2.1 Composition Operator
section, present several lemmas show main calculation rules composition operator properties intervals obtained composition. lemmas
important understanding several proofs later sections.
Lemmas 15-16 follow Definition 7.
Lemma 15 Let g1 , g2 non-negative intervals. d3 g1 g2 , exist d1 g1 ,
d2 g2 d3 [|d1 d2 |, d1 + d2 ].
713

fiDu & Alechina

Lemma 16 (Calculation Composition) (m, n), (s, t), (m, ), (s, ), {l}, {r}
non-negative non-empty intervals, H1 , H2 , H non-negative intervals, following
calculation rules hold:
1. {l} {r} = [l r, l + r], l r;
2. {l} (s, t) = (s l, + l), l;
3. {l} (s, t) = [0, + l), l (s, t);
4. {l} (s, t) = (l t, + l), l;
5. {l} (s, +) = (s l, +), l;
6. {l} (s, +) = [0, +), < l;
7. (m, n) (s, t) = (s n, + n), n;
8. (m, n) (s, t) = [0, + n), (m, n) (s, t) 6= ;
9. (m, n) (s, +) = (s n, +), n;
10. (m, n) (s, +) = [0, +), < n;
11. (m, +) (s, +) = [0, +);
12. H1 = ;
13. H1 H2 = H2 H1 ;
14. (H1 H2 ) H = (H1 H) (H2 H);


15. ( k Hk ) H = k (Hk H), k N>0 ;
16. (H1 H2 ) H = (H1 H) (H2 H), (H1 H2 ) 6= ;
17. (H1 H2 ) H = H1 (H2 H).
Lemma 16, Rule 14 special case Rule 15, k = 2. Rule 16 states
composition operation distributive non-empty intersections intervals.
necessary require H1 H2 6= , otherwise property may hold. example,
H1 = [0, 1], H2 = [2, 3], H = [1, 2], (H1 H2 ) H = whilst (H1 H) (H2 H) =
[0, 3] [0, 5] 6= . similar property defined Li, Long, Liu, Duckham,
(2015) RCC relations. proofs last three calculation rules provided
Appendix A, whilst others obvious.
interval h form (l, u), [l, u), (l, u] [l, u], call l greatest lower
bound h, represented glb(h), u least upper bound h, represented lub(h).
show interesting properties regarding composition intervals
greatest lower/least upper bounds.
Lemma 17 non-negative non-empty intervals g, h, following properties hold:
714

fiQualitative Spatial Logics Buffered Geometries

1. lub(g h) = lub(g) + lub(h);
2. glb(g h) max(glb(g), glb(h)).
Proof. Follows Lemma 16.
non-empty interval h right-closed, iff h = [x, y] h = (x, y]. h right-open, iff
h = [x, y) h = (x, y). h right-infinite, iff h = [x, ) h = (x, ). h left-closed, iff
h = [x, y] h = [x, y). h left-open, iff h = (x, y] h = (x, y).
Lemma 18 Let g1 , g2 , g3 non-negative non-empty right-closed intervals, g1 g2 g3 ,
lub(g1 ) lub(g2 ) + lub(g3 ).
Proof. Suppose g1 g2 g3 . Since lub(g1 ) g1 , lub(g1 ) g2 g3 . Lemma 15,
exist d2 g2 , d3 g3 , lub(g1 ) d2 + d3 . Since d2 lub(g2 ), d3 lub(g3 ),
lub(g1 ) lub(g2 ) + lub(g3 ).
Lemma 19 Let g1 , g2 , g3 non-negative non-empty intervals, g1 g2 g3 . g1 rightinfinite, g2 g3 right-infinite.
Proof. Suppose g1 right-infinite. Since g1 g2 g3 , g2 g3 right-infinite. Definition 7 Lemma 16, g2 g3 right-infinite.
5.2.2 Distance Constraints D(+ ) DS(+ )
section, characterize distance constraints appear process
enforcing path-consistency D(+ ) two main steps:
Step 1 characterize intervals involved D(+ ), well composition
intervals. step described Definition 14 Lemmas 20-24.
Step 2 introduce notion DS(+ ) set containing distance constraints
appearing process enforcing path-consistency D(+ ), characterize
distance constraints DS(+ ). step described Definitions 15-17
Lemmas 25-31.
Definition 14 (Primitive, Composite, Definable Intervals) Let h non-negative
interval. h primitive, h one [0, ], (, ), [0, 2], (2, ), (2, 4], (4, ),
[0, ). h composite, obtained composition least two primitive
intervals. h definable, primitive composite.
Lemma 20 non-negative interval h, h {0} = h.
Proof. Follows Definition 7.
Since Lemma 20 holds, call {0} identity interval.
715

fiDu & Alechina

Lemma 21 interval occurs D(+ ), identity interval primitive
interval.
Proof. Follows Definition 14 Lemma 11.
Lemma 22 h definable interval, h 6= .
Proof. Follows Definition 14 Definition 7.
Lemma 23 interval h definable, following properties hold:
1. glb(h) = n, n {0, 1, 2, 3, 4};
2. lub(h) = + lub(h) = m, N>0 .
Proof. Let us prove induction structure h.
Base case: h primitive. Definition 14, n {0, 1, 2, 4}, lub(h) = + {1, 2, 4}.
Inductive step: Suppose Properties 1, 2 hold interval ht obtained
composition primitive intervals, N>0 (induction hypothesis).
show Properties 1, 2 hold interval ht+1 obtained composition
(t + 1) primitive intervals.
ht+1 , exist ht primitive interval hp ht+1 = ht hp .
induction hypothesis, glb(ht ) = nt , nt {0, 1, 2, 3, 4}; lub(ht ) = + lub(ht ) = mt ,
mt N>0 . base case, glb(hp ) = np , np {0, 1, 2, 4}; lub(hp ) = + lub(hp ) =
mp , mp {1, 2, 4}. Lemma 17, lub(ht+1 ) = lub(ht ) + lub(hp ). Thus, Property 2 holds.
Lemma 16,
lub(ht ) < glb(hp ), glb(ht+1 ) = glb(hp ) lub(ht );
lub(hp ) < glb(ht ), glb(ht+1 ) = glb(ht ) lub(hp );
otherwise, glb(ht+1 ) = 0.
Since mt > 0 mp > 0, glb(ht+1 ) = nt+1 , nt+1 < 4. case, nt+1 {0, 1, 2, 3}
(Property 1 holds).
Lemma 24 h identity definable interval, then:
1. lub(h) = 0, iff h = {0};
2. lub(h) = , iff h = [0, ];
3. glb(h) = 4, iff h = (4, ).
Proof. Follows Lemma 17, Lemma 23 proof.
start characterize distance constraints appear process
enforcing path-consistency D(+ ).
716

fiQualitative Spatial Logics Buffered Geometries

Definition 15 (DS(+ )) DS(+ ) minimal set distance constraints
following holds:
distance constraint D(+ ) DS(+ );
distance constraints d(p, q) h d(q, s) g DS(+ ), d(p, s) h g
DS(+ );
distance constraints d(p, q) h d(p, q) g DS(+ ), d(p, q) h g
DS(+ ),
p, q, constants D(+ ).
definition above, DS(+ ) required minimal, interval
involved DS(+ ) either D(+ ) obtained applying composition intersection
operations intervals D(+ ). generality, restrict p, q, different
constants. example, possible p = q.
Lemma 25 distance constraint appears process enforcing path-consistency
D(+ ), DS(+ ).
Proof. Follows Definition 8 (path-consistency) Definition 15.
DS(+ ) covers distance constraints appearing process enforcing pathconsistency D(+ ). However, every distance constraint DS(+ ) necessarily
appears process enforcing path-consistency D(+ ). example, D(+ )
contains exactly one distance constraint d(p, p) [0, ], Definition 15, d(p, p)
[0, 2] DS(+ ) (so d(p, p) [0, n], n N>0 ), Definition 8, d(p, p)
[0, 2] appear process enforcing path-consistency. easy see
DS(+ ) infinite set.
concept DS(+ ) similar concept distributive subalgebra defined
Li et al. (2015), composition operation distributes non-empty intersections
intervals involved DS(+ ) (Rule 16 Lemma 16). However, work, composition
operation defined intervals rather relations.
Lemma 26 distance constraint d(p, q) h DS(+ ), h non-negative
interval.
Proof. distance constraint d(p, q) h D(+ ), Lemma 11, h non-negative
interval. Definitions 5, 7 definition intersection, applying composition
intersection non-negative intervals, obtain non-negative intervals. Definition 15,
h non-negative interval.
Differing previous version (Du & Alechina, 2014b), following definitions
lemmas restricted non-empty intervals.
Recall non-empty interval h right-closed, iff h = [x, y] h = (x, y]. h
right-open, iff h = [x, y) h = (x, y). h right-infinite, iff h = [x, ) h = (x, ). h
left-closed, iff h = [x, y] h = [x, y). h left-open, iff h = (x, y] h = (x, y).
717

fiDu & Alechina

Lemma 27 distance constraint d(p, q) h DS(+ ) h 6= , h either
right-infinite right-closed.
Proof. Let n denote total number times applying composition intersection
obtain h, n 0. prove induction n.
Base case: n = 0, d(p, q) h D(+ ). Lemma 11, h either right-infinite
right-closed. Inductive step: Suppose statement holds non-empty h
obtained applying composition intersection n times (induction
hypothesis). show holds non-empty h obtained
applying composition intersection (n + 1) times.
last step obtain h intersection, Definition 15, exist non-empty
h1 , h2 h = h1 h2 . induction hypothesis, hi , {1, 2}, hi
either right-infinite right-closed. intersection rules, h either right-infinite
right-closed.
last step obtain h composition, Definition 15, exist nonempty h1 , h2 h = h1 h2 . induction hypothesis, hi , {1, 2}, hi
either right-infinite right-closed. composition rules (Lemma 16), h either
right-infinite right-closed.


Lemma 28 distance constraint d(p, q) h DS(+ ) h 6= , glb(h) 6= 0,
h left-open.
Proof. Let n denote total number times applying composition intersection
obtain h, n 0. prove induction n.
Base case: n = 0, d(p, q) h D(+ ). Lemma 11, glb(h) 6= 0,
h left-open. Inductive step: Suppose statement holds non-empty h
obtained applying composition intersection n times (induction
hypothesis). show holds non-empty h obtained
applying composition intersection (n + 1) times.
last step obtain h intersection, Definition 15, exist nonempty h1 , h2 h = h1 h2 . induction hypothesis, hi , {1, 2},
glb(hi ) 6= 0, hi left-open. intersection rules, glb(h) 6= 0, h
left-open.
last step obtain h composition, Definition 15, exist non-empty
h1 , h2 h = h1 h2 . glb(h) 6= 0, composition rules (Lemma 16),
h1 h2 = . Suppose lub(h1 ) glb(h2 ), glb(h) = glb(h2 )lub(h1 ). Lemma 26
glb(h) 6= 0, glb(h) > 0, thus glb(h2 ) > lub(h1 ). Lemma 26, lub(h1 )
0, thus glb(h2 ) > 0. induction hypothesis, h2 left-open. composition rules
(Lemma 16), h left-open. Similarly, holds lub(h2 ) glb(h1 ).
718

fiQualitative Spatial Logics Buffered Geometries


distance constraint d(p, q) h DS(+ ), Definition 15, h obtained
applying composition and/or intersection operations n 0 times intervals occurring
D(+ ). applying intersection operation generate new bound,
greatest lower/least upper bound (and openness) h must
interval D(+ ) composition intervals D(+ ). formalize rationale
concepts Left-Definable Right-Definable characterize distance constraints DS(+ ). Later, show every distance constraint d(p, q) h (h 6= )
DS(+ ) left-definable right-definable. Left-Definable Right-Definable key
concepts proving Path-Consistency Lemma, establish correspondences
distance constraint DS(+ ) sequence distance constraints D(+ ).
non-empty interval h left-open, greatest lower bound represented
glb (h). h left-closed, greatest lower bound represented glb+ (h). h
right-open, least upper bound represented lub (h). h right-closed,
least upper bound represented lub+ (h).
Definition 16 (Left-Definable) distance constraint d(p1 , pn ) hs (n > 1) leftdefinable, iff hs 6= exists sequence distance constraints d(pi , pi+1 ) hi
(0 < < n) D(+ ), = h1 ... hn1 , following holds:
1. hs left-open, left-open glb (m) = glb (hs );
2. hs left-closed, left-closed glb + (m) = glb + (hs );
3. hs m.
Definition 17 (Right-Definable) distance constraint d(p1 , pn ) hs (n > 1) rightdefinable, iff hs 6= exists sequence distance constraints d(pi , pi+1 ) hi
(0 < < n) D(+ ), = h1 ... hn1 , following holds:
1. hs right-open, right-open lub (m) = lub (hs );
2. hs right-closed, right-closed lub + (m) = lub + (hs );
3. hs m.
important distinguish definition left-definable/right-definable distance
constraints (Definitions 16 17) Definition 14 (Definable Intervals). example,
distance constraints d(p1 , p2 ) {0} d(p2 , p3 ) {0} D(+ ), d(p1 , p3 ) {0}
left-definable right-definable, {0} definable interval. distance constraints
d(p1 , p2 ) [0, ] d(p2 , p3 ) (4, ) D(+ ), d(p1 , p3 ) (3, 5] leftdefinable, (3, 5] definable interval.
Lemma 29 Let h, g non-negative intervals. distance constraints d(p, q) h
d(q, s) g left-definable right-definable, d(p, s) h g left-definable
right-definable.
719

fiDu & Alechina

Proof. Since d(p, q) h d(q, s) g right-definable, Definition 17, h 6= ,
g 6= . Definition 7, h g 6= . Definition 17, D(+ ), exist sequence
distance constraints d(p, x2 ) h1 , ..., d(xn1 , q) hn1 d(p, q) h sequence
distance constraints d(q, y2 ) g1 , ..., d(yt1 , s) gt1 d(q, s) g respectively satisfying
three properties. Let us take union two sequences new one, is,
d(p, x2 ) h1 , ..., d(xn1 , q) hn1 , d(q, y2 ) g1 , ..., d(yt1 , s) gt1 . composition
rules (Lemma 16), new sequence satisfies properties Definition 17 d(p, s) hg.
Hence, d(p, s) h g right-definable.
composition rules (Lemma 16), h g 6= , glb+ (h g) = 0. use
new sequence above. Let m1 = (h1 ... hn1 ), m2 = (g1 ... gt1 ). Definition 17,
h m1 , g m2 . m1 m2 6= , therefore, glb+ (m1 m2 ) = 0. Definition 7,
h g m1 m2 . Definition 16, d(p, s) h g left-definable.
h g = , let us suppose glb(h) lub(g). Since d(p, q) h left-definable
d(q, s) g right-definable, Definitions 16 17 respectively, D(+ ), exist
sequence distance constraints d(p, q) h sequence distance constraints
d(q, s) g, satisfying corresponding properties. composition rules (Lemma
16), union two sequences satisfies properties Definition 16 d(p, s) hg.
Hence, d(p, s) h g left-definable. Similarly, show d(p, s) h g left-definable,
glb(g) lub(h).
Lemma 30 Let h, g non-negative intervals. distance constraints d(p, q) h
d(p, q) g left-definable right-definable, h g 6= , d(p, q) h g leftdefinable right-definable.
Proof. applying intersections generate new bound h g 6= ,
left/right bound h g h g. left bound h g
h, Definition 16, sequence used showing d(p, q) h
left-definable used show d(p, q) h g left-definable. cases similar.
Lemma 31 distance constraint d(p, q) h DS(+ ) h 6= , leftdefinable right-definable.
Proof. Let n denote total number times applying composition intersection
obtain h, n 0. prove induction n.
Base case: n = 0, d(p, q) h D(+ ). Definitions 16 17, d(p, q) h
left-definable right-definable.
Inductive step: Suppose statement holds non-empty h obtained
applying composition intersection n times (induction hypothesis).
show holds non-empty h obtained applying composition
intersection (n + 1) times. Definition 15, last operation obtain h either
composition intersection. former case, exist d(p, s) g1 d(s, q) g2
DS(+ ), g1 g2 = h. h 6= , Definition 7, gi 6= , {1, 2}. Since g1
g2 obtained applying composition intersection n times,
induction hypothesis, d(p, s) g1 d(s, q) g2 left-definable right-definable.
720

fiQualitative Spatial Logics Buffered Geometries

Lemma 29, d(p, q) h left-definable right-definable. latter case, exist
d(p, q) g1 d(p, q) g2 DS(+ ), g1 g2 = h. h 6= , intersection
rules, gi 6= , {1, 2}. induction hypothesis, d(p, q) g1 d(p, q) g2 leftdefinable right-definable. Lemma 30, d(p, q) h left-definable right-definable.

generality, exclude possibility d(p, q) DS(+ ). However,
follows proof Path-Consistency Lemma Section 5.3 d(p, q)
DS(+ ). Alternatively, direct proof, see Lemmas 45 46 Appendix C.
5.2.3 Proving Metric Space Lemma
following, show metric space satisfying D(+ ), D(+ ) pathconsistent (Metric Space Lemma). Firstly, show process enforcing patchconsistency D(+ ) terminates. Lemma 13, number constants D(+ )
finite. Let us suppose number constants D(+ ) N>0 .
Lemma 32 Let N>0 number constants D(+ ). non-empty
right-closed interval h referred process enforcing path-consistency D(+ ),
lub+ (h) 4t.
Proof. non-empty right-closed interval h occurs D(+ ), Lemma 11,
lub+ (h) 4 4t.
Otherwise, generated application composition and/or intersection operators Definition 8. Composition creates larger least upper bounds (Lemma 17), whilst
intersection not. Since h right-closed, lub+ (h) obtained composing right-closed
intervals (Lemma 16). constants, longest chain involves (t 1) intervals.
lub+ (h) maximal use (t 1) intervals least upper bound
interval 4. Thus, lub+ (h) 4t.
Lemma 33 Let N>0 number constants D(+ ). Enforcing path-consistency
D(+ ), fixed point reached O(t3 ).
Proof. Definition 8, Lemmas 23 fact intersection generate new
bounds, interval appearing process enforcing path-consistency D(+ ),
following properties hold:
1. glb(s) = n, n {0, 1, 2, 3, 4};
2. lub(s) = + lub(s) = m, N>0 .
interval h appearing D(+ ), enforcing path-consistency (Definition 8), h
become h0 h. Lemma 11, h 6= . Lemma 27, h either right-closed
right-infinite, h0 , right-closed right-infinite.
h right-closed, h0 = h0 right-closed. h0 right-closed,
Lemma 11, lub(h0 ) lub(h) 4. Properties 1, 2, finitely many
possibilities h0 .
721

fiDu & Alechina

h right-infinite, h0 , right-closed right-infinite.
h0 right-closed, Lemma 32, lub(h0 ) 4t. Properties 1, 2,
finitely many possibilities h0 .
h0 right-infinite, Property 1, finitely many possibilities
greatest lower bound, thus h0 .
Since case, finitely many possibilities h0 , fixed point always reached.
Suppose widest non-negative interval [0, ) appears process enforcing
path-consistency D(+ ). worst case, firstly, [0, ) strengthened [0, u],
u 4t (by Lemma 32), [0, u] strengthened time. Hence, [0, )
strengthened (4t + 1) times. constants, Definition 13, O(t2 )
distance constraints D(+ ). interval h appearing D(+ ), h [0, ), hence h
strengthened (4t + 1) times. Therefore, total time strengthening
distance constraints O(t3 ).
following lemma shows construct metric space D(+ ). used
prove Metric Space Lemma.
Lemma 34 Let N>0 number constants D(+ ), Df (+ ) fixed point
enforcing path consistency D(+ ). D(+ ) path-consistent, Ds (+ ) obtained
Df (+ ) replacing every right-infinite interval {5t}, every right-closed interval h
{lub(h)}, Ds (+ ) path-consistent.
Proof. Suppose D(+ ) path-consistent. Lemma 25, Df (+ ) DS(+ ). Definition 8, interval h appearing Df (+ ), h 6= . Lemma 27, h either right-infinite
right-closed. prove Ds (+ ) path-consistent, need show three
distance ranges, {npq }, {nqs }, {nps } Ds (+ ) three constants p, q, s,
1. npq nqs + nps ;
2. nqs npq + nps ;
3. nps npq + nqs .
Let hpq , hqs , hps denote corresponding distance ranges {npq }, {nqs }, {nps } respectively
Df (+ ), Definition 8,
hpq hqs hps ;
hqs hpq hps ;
hps hpq hqs .
prove Ds (+ ) path-consistent cases:
every hi (i {pq, qs, ps}) right-closed, ni = lub(hi ). Lemma 18, 1-3
hold.
722

fiQualitative Spatial Logics Buffered Geometries

Otherwise, right-closed. Lemma 19, least two
right-infinite.
right-infinite, ni = 5t. Since 5t 5t + 5t, 1-3 hold.
Otherwise, one right-closed. Let hpq right-closed. Then,
npq = lub(hpq ), nqs = 5t, nps = 5t. Lemma 32 R0 , lub(hpq )
4t < 5t. Lemma 26, lub(hpq ) 0. Since lub(hpq ) < 5t + 5t
5t 5t + lub(hpq ), 1-3 hold.

Lemma 7 (Metric Space Lemma) Let finite consistent set formulas, +
CS contains set individual names . D(+ )
path-consistent, metric space (, d) distance constraints
D(+ ) satisfied.
Proof. Suppose D(+ ) path-consistent. Let set constants D(+ ),
used interpret individual names occurring , shown Definition 13. = ,
trivial. Let us assume 6= . number constants denoted N>0 .
Lemma 33, fixed point Df (+ ) reached enforcing path-consistency D(+ ).
Let Ds (+ ) set distance constraints obtained Df (+ ) replacing every
right-infinite interval {5t}, every right-closed interval h {lub(h)}. Since every
distance constraint Ds (+ ) form d(p, q) {r}, r R0 , d(p, q) {r}
equivalent d(p, q) = r, metric (distance function) defined . Definition 13
Lemma 34, pair constants x, y, x = y, d(x, y) = 0 holds Ds (+ );
x 6= y, d(x, y) > 0 holds Ds (+ ). Thus, d(x, y) = 0 iff x =
Ds (+ ). Definitions 13 8, pair constants x, y, d(x, y) = d(y, x) holds
Ds (+ ). Lemma 34, Ds (+ ) path-consistent. Thus, constants x, y, z,
d(x, z) d(x, y) + d(y, z) holds Ds (+ ). Definition 1, (, d) Ds (+ )
metric space distance constraints D(+ ) satisfied.

5.3 Path-Consistency Lemma
section proves Path-Consistency Lemma contradiction, supposing D(+ )
path-consistent. examine every case first interval obtained
enforcing path-consistency. case, show derivable corresponding
LBPT formulas + using LBPT axioms. contradicts assumption +
consistent. Lemma 35 used generate possible cases make sure duplicated ones
generated. using Lemma 35, proof Path-Consistency Lemma largely
simplified, compared previous version (Du & Alechina, 2014b).
Lemma 35 Let g, h non-negative intervals. g h = iff (g h) {0} = .
Proof. g h 6= , Definition 7, 0 (g h).
0 (gh), Lemma 15, exist d1 g, d2 h 0 [|d1 d2 |, d1 +d2 ].
Thus, d1 = d2 . Therefore, g h 6= .
723

fiDu & Alechina

Since g h 6= iff 0 (g h), contraposition get g h = iff (g h) {0} = .
Knowing least upper bound greatest lower bound definable interval h, Lemmas 36-42 show possible ways h obtained composition primitive
intervals. Lemma 36 Lemma 39 proved below. Proofs lemmas similar omitted.
Lemma 36 interval h definable, lub(h) = 2, h primitive interval [0, 2]
h obtained composition two [0, ].
Proof. h primitive, Definition 14, h = [0, 2].
h composite, Definition 14, exist two definable intervals g1 , g2
g1 g2 = h. Lemma 17, lub(g1 ) + lub(g2 ) = 2. Lemma 23, lub(g1 ) , lub(g2 ) ,
thus lub(g1 ) = , lub(g2 ) = . Lemma 24, h = [0, ] [0, ].

Lemma 37 interval h definable, lub(h) = 3, h obtained composition
[0, ] [0, 2] composition three [0, ].
Lemma 38 interval h definable, lub(h) = 4, h primitive interval (2, 4],
h obtained composition two [0, 2], composition two [0, ] one
[0, 2] composition four [0, ].
Lemma 39 interval h definable, glb(h) = 3, h obtained composition
[0, ] (4, ).
Proof. Definition 14, h cannot primitive.
Since h composite, Definition 14, exist two definable intervals g1 , g2
g1 g2 = h. g1 g2 = , otherwise, Lemma 16, glb(h) = 0.
Without loss generality, let us suppose lub(g1 ) glb(g2 ). Lemma 16, glb(g2 )
lub(g1 ) = 3. Lemma 23, glb(g2 ) 4, lub(g1 ) , thus glb(g2 ) = 4, lub(g1 ) = .
Lemma 24, h obtained composition [0, ] (4, ).
Lemma 40 interval h definable, glb(h) = 2, h primitive interval (2, )
(2, 4], h obtained composition [0, 2] (4, ) composition
two [0, ] one (4, ).
Lemma 41 interval h definable, glb(h) = , h primitive interval (, ),
h obtained composition [0, ] (2, ), composition [0, ]
(2, 4], composition one [0, ], one [0, 2] one (4, ), composition
three [0, ] one (4, ).
Lemma 42 interval h definable left-open, glb(h) = 0, h obtained
exactly following ways:
composition [0, ] (, );
724

fiQualitative Spatial Logics Buffered Geometries

composition [0, 2] (2, );
composition two [0, ] one (2, );
composition [0, 2] (2, 4];
composition two [0, ] one (2, 4];
composition (2, 4] (4, );
composition two [0, 2] one (4, );
composition two [0, ], one [0, 2] one (4, );
composition four [0, ] one (4, ).
previous work (Du et al., 2013; Du & Alechina, 2014b), presented slightly
different way prove Path-Consistency Lemma LNF LBPT respectively:
first empty interval obtained using strengthening operator, is, g1 (g2 g3 ) =
gi 6= , {1, 2, 3}. gi may {0} primitive interval, written
xi (yi zi ), xi , yi , zi may identity primitive internal also.
latter case, since gi = xi (yi zi ) 6= , xi , yi , zi empty. Since composition
operation distributive non-empty intersections intervals (Rule 16 Lemma 16),
use Rule 16 repeatedly rewrite g1 (g2 g3 ) every interval identity
primitive interval. final form h1 ... hn = , n > 1, hx (0 < x n)
{0} definable interval. Thus exist two intervals hi , hj (0 < n, 0 < j n,
6= j) hi hj = . look different combinations
lub(hi ) glb(hj ). exactly 15 combinations. paper, proof
Path-Consistency Lemma largely simplified. shows sufficient examine 5
rather 15 combinations.
Lemma 8 (Path-Consistency Lemma) Let finite consistent set formulas,
+ CS contains set individual names . Then,
D(+ ) path-consistent.
Proof. Suppose D(+ ) path-consistent. Definitions 8, 15 Lemma 25,
d(p, q) DS(+ ), constants p, q. Lemma 11, distance range g
occurring D(+ ), g 6= . Definitions 15, 7, intersection rules, last operation
obtain first interval intersection. Definition 15, exist d(p, q) g1
d(p, q) g2 DS(+ ), g1 6= , g2 6= , g1 g2 = . Lemma 26, g1 , g2
non-negative intervals. Lemma 35, g1 g2 = iff (g1 g2 ) {0} = .
Definition 13 Definition 15, d(q, p) g2 DS(+ ). Since d(p, q) g1
DS(+ ), Definition 15, d(p, p) (g1 g2 ) DS(+ ). Definition 7, g1 g2 6= .
Lemma 31, d(p, p) (g1 g2 ) left-definable right-definable. Let h = g1 g2 .
Since d(p, p) h left-definable, Definition 16, exists sequence distance
constraints d(pi , pi+1 ) hi (0 < < n) D(+ ), p = p1 = pn h0 =
h1 ... hn1 , h h0 greatest lower bound (including value
725

fiDu & Alechina

openness) h h0 . Definition 14, Lemmas 21 20, h0 identity definable
interval. Lemma 23, glb(h0 ) {0, , 2, 3, 4}. Therefore, (g1 g2 ) {0} = iff one
following holds:
glb(h) {, 2, 3, 4};
h left-open glb (h) = 0.
check whether derived every case using axioms (or derivable facts).
Axiom 3 Axiom 4, N EAR F AR symmetric.
1. glb(h) = : look different ways h0 obtained sequence
distance constraints d(pi , pi+1 ) hi (0 < < n) D(+ ) p = p1 = pn
h0 = h1 ... hn1 (see Definition 16). every hi {0} primitive interval (by
Lemma 21), Lemma 41 specifies different ways obtain h0 :
(a) h0 primitive interval (, +): Definition 16, d(p1 , pn ) (, +)
D(+ ) n = 2. p = p1 = pn , d(p, p) (, +) D(+ ). Suppose
p points(a) individual name . proof Lemma 11, (, +)
come formulas form (x, y, (, )), x, individual names. Definition 10, (x, y, (, )) come BP (x, y).
Since d(p, p) (, +) D(+ ) p points(a), BP (a, a) + .
Axiom 9, BP (a, a) .
(b) h0 obtained composition [0, ] (2, ) composition
[0, ] (2, 4]:
proof Lemma 11 Definition 10, BP (a, b) + BP (b, a) + ,
N EAR(a, b) + N EAR(b, a) + .
Fact 14, BP (x1 , x2 ) N EAR(x1 , x2 ) , {x1 , x2 } = {a, b}.
(c) h0 obtained composition one [0, ], one [0, 2] one (4, ):
proof Lemma 11 Definition 10, BP (a, b) + BP (b, a) + ,
N EAR(b, c) + , N EAR(c, b) + , F AR(c, a) + , F AR(a, c) + .
Fact 16, BP (x2 , x1 )N EAR(x2 , x3 )F AR(x3 , x1 ) , {x1 , x2 , x3 } = {a, b, c}.
(d) h0 obtained composition three [0, ] one (4, +):
proof Lemma 11 Definition 10, three BP one
F AR four individual names a, b, c, d. BP refers either BP (x, y)
BP (y, x). cases (for example, + , BP (a, b), BP (c, b),
BP (d, c) F AR(a, d)) valid, different constants
taken points(b), individual name b (by Definition 13).
consequence, invalid case, sequence consisting distance constraints
d(pi , pi+1 ) hi (0 < < n, p = p1 = pn ) cannot exist D(+ ). need
consider valid cases, listed below.
i. BP (x1 , x2 ), BP (x2 , x3 ), BP (x3 , x4 ), F AR(x4 , x1 ),
{x1 , x2 , x3 , x4 } = {a, b, c, d}. Fact 20, BP (x1 , x2 ) BP (x2 , x3 )
BP (x3 , x4 ) F AR(x4 , x1 ) .
ii. BP (x2 , x1 ), BP (x2 , x3 ), BP (x3 , x4 ), F AR(x4 , x1 ),
{x1 , x2 , x3 , x4 } = {a, b, c, d}. Fact 21, BP (x2 , x1 ) BP (x2 , x3 )
BP (x3 , x4 ) F AR(x4 , x1 ) .
726

fiQualitative Spatial Logics Buffered Geometries

Cases 2-5 use similar arguments. following proof, BP refers either
BP (x, y) BP (y, x) (whichever makes corresponding case valid). N EAR
F AR symmetric, thus order x, matter.
2. glb(h) = 2: Definition 16 Lemma 21, Lemma 40 specifies different
ways obtain h0 sequence distance constraints d(pi , pi+1 ) hi (0 < < n)
D(+ ):
(a) h0 primitive interval (2, ) (2, 4]:
N EAR(a, a), using Axiom 9 Fact 14.
(b) h0 obtained composition [0, 2] (4, +) :
one N EAR one F AR, using Fact 15.
(c) h0 obtained composition two [0, ] one (4, +):
two BP one F AR, using Facts 18 19.
3. glb(h) = 3: Definition 16 Lemma 21, Lemma 39 specifies ways
obtain h0 sequence distance constraints d(pi , pi+1 ) hi (0 < < n)
D(+ ). Lemma 39, h0 obtained composition [0, ] (4, +).
one BP one F AR, using Fact 17.
4. glb(h) = 4: Definition 16 Lemma 21, Lemma 24 specifies ways
obtain h0 sequence distance constraints d(pi , pi+1 ) hi (0 < < n)
D(+ ). Lemma 24, h0 = (4, +). F AR(a, a), using Axiom 9 Fact 17.
5. glb (h) = 0: Definition 16 Lemma 21, Lemma 42 specifies ways
obtain h0 sequence distance constraints d(pi , pi+1 ) hi (0 < < n)
D(+ ):
(a) h0 obtained composition [0, ] (, ): Definition 13, ensuring
different constants taken points(x),
BP (x1 , x2 ) + BP (x1 , x2 ) + , {x1 , x2 } = {a, b}.
BP (x1 , x2 ) BP (x1 , x2 ) .
(b) h0 obtained composition [0, 2] (2, ) composition
[0, 2] (2, 4]:
one N EAR one N EAR, using Axiom 3.
(c) h0 obtained composition two [0, ] one (2, ) composition two [0, ] one (2, 4]:
two BP one N EAR, using Axioms 10 11.
(d) h0 obtained composition (2, 4] (4, ):
one F AR one F AR, using Axiom 4.
(e) h0 obtained composition two [0, 2] one (4, ):
two N EAR one F AR.
case invalid. Definition 16, D(+ ) contains d(pa , pb ) [0, 2], d(pb , pc )
[0, 2] d(pa , pc ) (4, ), pa points(a), pb points(b), pc
points(c), individual names a, b, c. Definitions 10 13, d(pa , pb ) [0, 2]
d(pb , pc ) [0, 2] cannot come N EAR(a, b) N EAR(b, c) + (by
727

fiDu & Alechina

proof Lemma 11, clear cannot come formulas
well), two different constants taken points(b) witnesses
(a, b, [0, 2]) (b, c, [0, 2]) respectively.
(f) h0 obtained composition two [0, ], one [0, 2] one (4, ):
two BP , one N EAR one F AR, using Axioms 12 13.
(g) h0 obtained composition four [0, ] one (4, ):
four BP one F AR, using Facts 22-24.
valid case, derivable using corresponding axioms facts, contradicts
assumption + consistent. Therefore, D(+ ) path-consistent.
alternative way prove Path-Consistency Lemma, believe
longer complicated one presented paper, since may provide
additional intuitions reader, sketch Appendix B.

6. Decidability Complexity LBPT
section, establish complexity LBPT satisfiability problem. complexity LNF/LNFS satisfiability problem established similar way.
complexity satisfiability problems important, related complexity
problem finding inconsistencies, basis approach debugging
matches geospatial datasets.
Definition 18 (Size Formula) size LBPT formula s() defined follows:
s(BP (a, b)) = 3, s(N EAR(a, b)) = 3, s(F AR(a, b)) = 3;
s() = 1 + s();
s( ) = 1 + s() + s(),
a, b individual names, , formulas L(LBP ).
set LBPT formulas conjunction formulas equi-satisfiable,
combined size LBPT formulas set defined size conjunction
formulas S.
Next prove Theorem 2 LBPT: satisfiability problem finite set LBPT
formulas metric space NP-complete.
Proof. NP-hardness LBPT satisfiability problem follows NP-hardness
satisfiability problem propositional logic, included LBPT.
prove LBPT satisfiability problem NP, show finite set
LBPT formulas satisfiable, guess metric model verify
model satisfies , time polynomial combined size formulas .
Suppose finite set LBPT formulas, number individual names
n. completeness proof shows that, satisfiable, satisfiable metric model
728

fiQualitative Spatial Logics Buffered Geometries

size polynomially bounded number individual names . recap
construction metric model , first construct B(+ ), corresponding set
basic quantified formulas MCS + containing , construct model
B(+ ). Definition 10, number formulas B(+ ) f = (n + 2n(n 1)).
Definitions 11 13, every individual name , assign fixed set new
constants, points(a) = {p1a , . . . , pxa }, x = num(a, B(+ )). Since x f , number
constants = nf . Lemma 34 proofs Metric Space Lemma,
model , every value assigned distance function form m, N0 ,
5t.
guess metric model this. Let combined size formulas .
n < s. every individual name , assign {p1a , . . . , pxa }, x < 2s2 . results
set constants , size < 2s3 . every pair constants p, q ,
assign d(p, q), N0 , < 10s3 . verify (, d) metric space,
Definition 1, O(s9 ).
verify satisfies , need verify satisfies conjunction formulas . R(a, b), R {BP T, N EAR, F AR}, a, b individual names,
verify R(a, b) satisfied, takes time polynomial |points(a)| |points(b)|,
thus O(s4 ). Hence, verifying satisfies done O(s5 ).
Section 3, mentioned acts scaling factor metric model.
stated Lemma 43 follows proofs completeness theorem Theorem 2.
proof LBPT provided below. proof LNF/LNFS similar.
Lemma 43 finite set LNF/LNFS/LBPT formulas satisfiable metric model
R0 , iff satisfiable metric model = 1.
Proof.[for LBPT] Suppose finite set LBPT formulas, number individual
names n combined size formulas s. Definition 18, n < s.
completeness proof shows that, satisfiable, satisfiable metric model
= (, d, I, ) constructed shown Section 5.1 Section 5.2. Definition 13,
every individual name , assign {p1a , . . . , pxa }, x = num(a, B(+ )) < 2s2 .
results set constants , size < 2s3 . every constant p ,
assign d(p, p) = 0. Definition 13 Lemma 34, every pair different constants
p, q , assign d(p, q), N>0 , < 10s3 . metric model,
Definition 1 proof Metric Space Lemma, x, y, z ,
1. d(x, y) = 0, iff x = y;
2. d(x, y) = mxy , iff d(y, x) = mxy ;
3. d(x, z) = mxz , d(x, y) = mxy , d(y, z) = myz , mxz mxy + myz .
satisfies , Definition 3, following holds:
|= BP (a, b) iff pa (a) pb (b) : (pa , pb ) [0 , ];
|= N EAR(a, b) iff pa (a) pb (b) : (pa , pb ) [0 , 2 ];
729

fiDu & Alechina

|= F AR(a, b) iff pa (a) pb (b) : (pa , pb ) (4 , );
|= iff 6|= ;
|= iff |= |= ,
a, b individual names, , formulas L(LBP ).
setting = 1, (, d) still metric space, following holds x, y, z :
1. d(x, y) = 0 iff x = y;
2. d(x, y) = mxy , iff d(y, x) = mxy ;
3. d(x, z) = mxz , d(x, y) = mxy , d(y, z) = myz , mxz mxy + myz .
setting = 1, definitions BP , N EAR F AR change accordingly well.
One easily see still satisfies replacing every 1.
Similar, metric model = 1, obtain metric model
R0 multiplying every distance value . One easily see still satisfies multiplying distance values , multiplying greatest lower
bounds least upper bounds intervals truth definitions BP , N EAR
F AR .

7. Validating Matches using Spatial Logic
spatial logics LN F , LN F LBP used verify consistency sameAs
partOf matches spatial objects different geospatial datasets. every
spatial object point geometry, apply LN F , otherwise, apply LN F
LBP . LBP reasoning used together description logic reasoning
geospatial data matching system MatchMaps (Du, Nguyen, Alechina, Logan, Jackson, &
Goodwin, 2015; Du, 2015). LBP reasoning description logic reasoning complement
sense LBP reasoning verifies matches regarding spatial information
whilst description logic reasoning verifies matches regarding classification information,
unique name assumption stronger version it. following, describe
LBPT used debugging matches.
dedicated LBPT reasoner integrated assumption-based truth maintenance
system (ATMS) (de Kleer, 1986) developed part MatchMaps. implements
LBPT axioms definition BEQ(a, b) BP (a, b) BP (b, a) set inference
rules. efficiency reasons, one-to-one correspondence rules axioms. speed matching avoid cycles, facts N EAR(a, b) stored
one order b, symmetry axioms removed. remaining axioms
involving symmetric relation gives rise several rules, compensate removal
symmetry. example, axiom
BPT (b, a) NEAR(b, c) BPT (c, ) FAR(d , a)
gives rise rule corresponding following implication:
BPT (b, a) NEAR(c, b) BPT (c, ) FAR(d , a)
730

fiQualitative Spatial Logics Buffered Geometries

(with N EAR(c, b) instead N EAR(b, c)). However set rules trivially equivalent
set axioms.
Possible matches form sameAs(a, b) partOf (a, b) (a partOf b) generated assumptions, withdrawn involved derivation contradiction
description logic LBPT. order apply LBPT reasoning, sameAs(a, b)
replaced BEQ(a, b), partOf (a, b) replaced BP (a, b). substitutions
affect correctness matching results MatchMaps, MatchMaps adopts definitions sameAs partOf sameAs(a, b) entails BEQ(a, b) partOf (a, b)
entails BP (a, b). N EAR(a, b) F AR(a, b) facts generated objects a, b
dataset involved matches across two datasets (there
object c dataset BEQ(a, c), BP (a, c) BP (c, a) holds,
similarly b).
LBPT reasoner derives new formulas applying inference rules previously
derived formulas, ATMS maintains dependencies derived consequences
set assumptions (corresponding possible matches). particular, maintains
minimal sets assumptions responsible derivation (false), referred nogoods
ATMS terminology. minimal sets assumptions responsible contradiction
used decide matches wrong withdrawn.
experiments, LBPT reasoner ATMS used validate matches
spatial objects OSM data (building layer) OSGB MasterMap data (Address Layer
Topology Layer) (Du et al., 2015). study areas city centres Nottingham UK
Southampton UK. Nottingham data obtained 2012, Southampton
data 2013. numbers spatial objects case studies shown Table 1.

Nottingham
Southampton

OSM spatial objects
281
2130

OSGB spatial objects
13204
7678

Table 1: Data used Evaluation

initial matches generated matching method implemented MatchMaps.
detailed matching method provided Du et al. (2016). method consists
two main steps: matching geometries matching spatial objects. spatial object
geospatial dataset ID, location information (coordinates geometry)
meaningful labels, names types, represents object real world.
geometry refers point, line polygon, used represent location
information geospatial datasets.
geometry matching requires level tolerance, difference geometry
representation spatial object expected different datasets. discussing
domain experts geospatial science, decided apply level tolerance
matching method spatial logic used MatchMaps. experiments
described Du et al. (2015), level tolerance geometry matching set
20 meters, based published estimate positional accuracy OSM data.
OSM positional accuracy estimated 20 meters UK (Haklay, 2010).
recent work (Du et al., 2016), analysed level tolerance affects
731

fiDu & Alechina

precision recall matching results geographic area Nottingham
(the data shown first row Table 1) using 12 different levels tolerance
within range 1 80 meters. shows that, Nottingham case, 20 meters
good estimate, though optimal value.
Following first step matching method, first aggregate adjacent single geometries, shops within shopping center, establish correspondences
aggregated geometries using geometry matching. second step, match
spatial objects located corresponding aggregated geometries comparing
similarity names types spatial objects several different cases (one-to-one, manyto-one many-to-many). difficult case match
two aggregated geometries contain objects {a1 , . . . , } one dataset objects
{b1 , . . . , bk } dataset (many-to-many matching case). cannot decide
exact matches automatically using names types objects, generate matches
possibly correct objects two sets: pair ai , bj similar labels, generate sameAs(ai , bj ), partOf (ai , bj ), partOf (bj , ai ). apply reasoning
LBPT description logic verify consistency matches. use description
logic reasoning described Du (2015).

Figure 5: Examples using LNFS LBPT validating matches
minimal set statements involved contradiction contains one
retractable assumption, domain expert needed decide correctness retractable assumptions remove wrong one(s) restore consistency. Location information visualized provided help domain experts make decisions.
shown Figure 5, a1 , b1 , c1 , d1 (dotted) OSGB data a2 , b2 , c2 , d2 (solid)
OSM data. left example, LNFS Axiom 6 (or LBPT Axiom 12
BEQ(a, b) BP (a, b) BP (b, a)), minimal set statements deriving inconsistency consists BEQ(a1 , a2 ), BEQ(b1 , b2 ), N EAR(a1 , b1 ), F AR(a2 , b2 ). clear
BEQ(b1 , b2 ) wrong, N EAR(a1 , b1 ) F AR(a2 , b2 ) facts. right example,
BP (d2 , d1 ) wrong, contradicts BP (c2 , c1 ), N EAR(c2 , d2 ), F AR(c1 , d1 )
LBPT Axiom 12. consequence, sameAs partOf matches corresponding
BEQ(b1 , b2 ) BP (d2 , d1 ) respectively incorrect.
Table 2 shows numbers nogoods generated LBPT reasoner ATMS.
mentioned earlier, nogoods justifications false: minimal sets statements
contradiction derivable. number interactions number
times users asked take actions use strategies resolve problems (a strategy
heuristic allows users retract similar statements time, example,
732

fiQualitative Spatial Logics Buffered Geometries

Nottingham
Southampton

nogoods
172
268

retracted BEQ/BPT
31
114

retracted sameAs/partOf
1325
488

interactions
3
7

Table 2: LBPT Verification Matches

retracting partOf (o, x) x differing object o). result LBPT reasoning
removal BEQ BPT assumptions, withdraw 1325 sameAs/partOf assumptions
Nottingham case 488 sameAs/partOf assumptions Southampton case.
LBPT validation matches, MatchMaps achieved high precision ( 90%)
recall ( 84%) Nottingham Southampton cases.
described previous work (Du, Alechina, Hart, & Jackson, 2015), MatchMaps
used 12 experts University Nottingham Ordnance Survey Great
Britain match 100 buildings places Southampton. graphical user interface MatchMaps provided allowing users take different types actions remove
wrong matches. number actions decision time users recorded.
precision recall matching results compared obtained without using user-involved verification. Experimental results showed using reasoning
LBPT description logic, precision recall matches generated MatchMaps
improved average 9% 8% respectively. human effort reduced,
sense decision time required much less fully manual matching
process.

8. Discussion
spatial logics LNF, LNFS LBPT generally applicable reason spatial objects whose locations represented different levels accuracy granularity different
datasets. Locations spatial objects represented using vector data (coordinates)
raster data (images). Sometimes, spatial objects different datasets, measuring
whether locations buffered equal directly difficult impossible, example,
locations represented images without knowing coordinates. cases,
spatial objects may matched comparing shapes images using lexical information.
matter matches spatial objects generated, LNF/LNFS/LBPT
reasoning could used verify consistency matches regard relative locations
(N EAR/F AR facts) spatial objects dataset, often reliable
easy capture.
Another potential application logics matching non-georeferenced volunteered spatial information sketch data (Egenhofer, 1997; Kopczynski, 2006; Wallgrun,
Wolter, & Richter, 2010). Instead created surveying mapping techniques, sketch data often created person memory schematizing authoritative geospatial data. sketch map cannot provide precise metric information
exact distance size spatial object, roughly shows several kinds qualitative
relations (e.g. nearness directions) spatial objects. work Wallgrun
et al. (2010), qualitative spatial reasoning (based dipole relation algebra presented
Moratz, Renz, & Wolter, 2000 checking connectivity cardinal direction calculus
733

fiDu & Alechina

presented Ligozat, 1998) used task matching sketch map road network larger geo-referenced data set, example, OpenStreetMap. Endpoints
junctions roads extracted relative directions represented checked
spatial reasoning. spatial logic LNF applied similarly check relative
distances endpoints junctions roads. N EAR/F AR relations
points indicate length roads. task matching sketch map polygonal
objects (e.g. buildings places), logic LNFS/LBPT applied. Suppose users
draw sketch map buildings estimate distances buildings
N EAR F AR regarding agreed level tolerance . N EAR F AR relations
buildings geo-referenced map calculated automatically. mapping
sketch map geo-referenced map checked reasoning logic
LNFS/LBPT. example, two buildings specified F AR sketch
map cannot matched two buildings N EAR geo-referenced map.
main limitation new spatial logics require level tolerance
using logics, value spatial objects different sizes
types (such buildings, roads, rivers lakes). example, margin error
used cities larger buildings. Ideally, value vary
size type spatial object checked. motivates development
new spatial logics reason sizes types spatial objects, addition
relative locations.
paper, theorems proved respect metric space. However,
models based metric space may realisable 2D Euclidean space,
realistic geospatial data. Suppose four points pi , {1, 2, 3, 4}.
point pi , d(pi , pi ) = 0. pair them, d(pi , pj ) = d(pj , pi ) = 1. clear
metric space satisfying distance constraints,
2D Euclidean space. Wolter Zakharyaschev (2003, 2005) proved satisfiability
problem finite set S(Q0 ) formulas 2D Euclidean space R2 undecidable,
whilst proper fragments may decidable. proved satisfiability problem
finite set LNF formulas 2D Euclidean space decidable PSPACE (Du,
2015), whether satisfiability problem finite set LNFS/LBPT formulas
2D Euclidean space decidable still unknown. remains open whether
LNF/LNFS/LBPT calculus complete models based 2D Euclidean space. not,
theoretical challenge design logics complete 2D Euclidean spaces,
hence provide accurate debugging matches logics metric spaces.
Finally, use description logic new spatial logics may able detect
wrong matches. example, spatial objects X, one dataset X 0 , 0
dataset, sameAs(X, X 0 ) correct, N EAR south X, 0
N EAR north X 0 , sameAs(Y, 0 ) wrong cannot detected.
deal this, could extend logics existing spatial formalisms reasoning
directional relations (Frank, 1991, 1996; Ligozat, 1998; Balbiani et al., 1999; Goyal
& Egenhofer, 2001; Skiadopoulos & Koubarakis, 2004).
734

fiQualitative Spatial Logics Buffered Geometries

9. Conclusion Future Work
presented series new qualitative spatial logics LNF, LNFS LBPT validating
matches spatial objects, especially crowd-sourced geospatial data. models
based metric space, sound complete axiomatisation provided corresponding
theorems proved logic. LNF, LNFS LBPT satisfiability problems
metric space NP-complete. LBPT reasoner ATMS implemented
used part MatchMaps. Experimental results show LBPT reasoner
used verify consistency matches respect location information
detect obvious logical errors effectively. future work, investigate whether
LNF/LNFS/LBPT calculus complete models based 2D Euclidean space
develop new spatial logics (e.g. reasoning directional relations object sizes
addition distances) provide accurate debugging matches.

Acknowledgments
would thank anonymous reviewers provided excellent comments
helped us improve paper.

Appendix A. Proofs
Lemma 9 + CS, pair individual names a, b occurring ,
exactly one following cases holds + :
1. case(a, b) = BP (a, b) BP (b, a);
2. case(a, b) = BP (a, b) BP (b, a);
3. case(a, b) = BP (a, b) BP (b, a);
4. case(a, b) = BP (a, b) BP (b, a) N EAR(a, b);
5. case(a, b) = N EAR(a, b) F AR(a, b);
6. case(a, b) = F AR(a, b),
case(a, b) denotes formula holds a, b case.
Proof. pair individual names a, b occurring + , have:
` (B B 1 N F ) (B B 1 N F ) (B B 1 N F ) (B B 1 N F )
(B B 1 N F ) (B B 1 N F ) (B B 1 N F ) (B B 1 N F )
(B B 1 N F ) (B B 1 N F ) (B B 1 N F ) (B B 1 N F )
(BB 1 N F )(BB 1 N F )(BB 1 N F )(BB 1 N F )
B, B 1 , N, F stand BP (a, b), BP (b, a), N EAR(a, b), F AR(a, b) respectively.
Table 3,
` (B B 1 ) (B B 1 ) (B B 1 ) (B B 1 N ) (N F ) F .
735

fiDu & Alechina

B
1
1
1
1
1
1
1
1
0
0
0
0
0
0
0
0

B 1
1
1
1
1
0
0
0
0
1
1
1
1
0
0
0
0

N
1
1
0
0
1
1
0
0
1
1
0
0
1
1
0
0

F
1
0
1
0
1
0
1
0
1
0
1
0
1
0
1
0

Prime Implicant

B B 1



B B 1



B B 1



B B 1 N
F
N F

Axiom/Fact used
Fact 15
Facts 14, 15, Axiom
Fact 14, Axiom 3
Fact 14, Axiom 3
Fact 15
Facts 14, 15, Axiom
Fact 14, Axiom 3
Fact 14, Axiom 3
Fact 15
Facts 14, 15, Axiom
Fact 14, Axiom 3
Fact 14, Axiom 3
Fact 15
Fact 15
Facts 14, 15, Axiom
Fact 14, Axiom 3

3

3

3

3

Table 3: truth table, 1 stands true, 0 stands false


Lemma 11 distance range g occurring D(+ ),
g {{0}, [0, ], (, ), [0, 2], (2, ), (2, 4], (4, ), [0, )}.
Proof. Suppose p, q constants d(p, q) g D(+ ). Let us look g
different cases:
p = q: Definition 13, g = {0}.
p 6= q:
p points(a), q points(a), individual name a:
Definition 13, g = [0, ).
p points(a), q points(b), different individual names a, b:
Lemma 9 Definition 10, exactly one following cases holds:
C1
C2
C3
C4
C5
C6

{(a, b, [0, ]), (b, a, [0, ])} B(+ )
{(a, b, [0, ]), (b, a, (, ))} B(+ )
{(a, b, (, )), (b, a, [0, ])} B(+ )
{(a, b, (, )), (b, a, (, )), (a, b, [0, 2]), (b, a, [0, 2])} B(+ )
{(a, b, (2, )), (b, a, (2, )), (a, b, [0, 4]), (b, a, [0, 4])} B(+ )
{(a, b, (4, )), (b, a, (4, ))} B(+ )

C1:
exactly one p, q witness (a, b, [0, ]) (b, a, [0, ]),
Definition 13, construction process, d(p, q) [0, ] added
736

fiQualitative Spatial Logics Buffered Geometries

D(+ ), d(p, q) [0, +) added D(+ ). Since [0, ]
[0, +) = [0, ], g = [0, ].
else p witness (b, a, [0, ]) q witness (a, b, [0, ]),
Definition 13, construction process, d(p, q) [0, ] added
D(+ ), d(p, q) [0, ] added D(+ ) again,
d(p, q) [0, +) added D(+ ). Since [0, ] [0, ] [0, +) =
[0, ], g = [0, ].
else, Definition 13, g = [0, +).
C2:
q witness (a, b, [0, ]), Definition 13, construction
process, d(p, q) [0, ] added D(+ ), d(p, q) [0, )
added D(+ ). Since [0, ] [0, ) = [0, ], g = [0, ].
else q witness (b, a, (, )), Definition 13, construction process, d(p, q) (, ) added D(+ ), d(p, q)
[0, ) added D(+ ). Since (, ) [0, ) = (, ), g = (, ).
else, Definition 13, g = [0, +).
C3:
p witness (a, b, (, )), Definition 13, construction
process, d(p, q) (, ) added D(+ ), d(p, q) [0, )
added D(+ ). Since (, ) [0, ) = (, ), g = (, ).
else p witness (b, a, [0, ]), Definition 13, construction
process, d(p, q) [0, ] added D(+ ), d(p, q) [0, )
added D(+ ). Since [0, ] [0, ) = [0, ], g = [0, ].
else, Definition 13, g = [0, +).
C4:
pair p, q witness (a, b, [0, 2]), Definition 13,
construction process, d(p, q) [0, 2] added D(+ ),
d(p, q) [0, ) added D(+ ). Since [0, 2] [0, ) = [0, 2],
g = [0, 2].
else exactly one p, q witness (a, b, (, )) (b, a, (, )),
Definition 13, construction process, d(p, q) (, )
added D(+ ), d(p, q) [0, ) added D(+ ). Since
(, ) [0, ) = (, ), g = (, ).
else p witness (a, b, (, )) q witness (b, a, (, )),
Definition 13, construction process, d(p, q) (, ) added
D(+ ), d(p, q) (, ) added D(+ ) again,
d(p, q) [0, ) added D(+ ). Since (, ) (, ) [0, ) =
(, ), g = (, ).
else, Definition 13, g = [0, +).
C5:
pair p, q witness (a, b, [0, 4]), Definition 13,
construction process, d(p, q) [0, 4] added D(+ ), then,
737

fiDu & Alechina

d(p, q) (2, ) added satisfy formulas, d(p, q)
[0, ) added D(+ ). Since [0, 4] (2, ) [0, ) = (2, 4],
g = (2, 4].
else, Definition 13, d(p, q) (2, ) added satisfy formulas, d(p, q) [0, ) added D(+ ). Since (2, ) [0, ) =
(2, ), g = (2, ).
C6, Definition 13, d(p, q) (4, ) added, d(p, q) [0, )
added D(+ ). Since (4, ) [0, ) = (4, ), g = (4, ).
Therefore, g {{0}, [0, ], (, ), [0, 2], (2, ), (2, 4], (4, ), [0, )}.
Lemma 16 (Calculation Composition) (m, n), (s, t), (m, ), (s, ), {l},
{r} non-negative non-empty intervals, H1 , H2 , H non-negative intervals,
following calculation rules hold:
1. {l} {r} = [l r, l + r], l r;
2. {l} (s, t) = (s l, + l), l;
3. {l} (s, t) = [0, + l), l (s, t);
4. {l} (s, t) = (l t, + l), l;
5. {l} (s, +) = (s l, +), l;
6. {l} (s, +) = [0, +), < l;
7. (m, n) (s, t) = (s n, + n), n;
8. (m, n) (s, t) = [0, + n), (m, n) (s, t) 6= ;
9. (m, n) (s, +) = (s n, +), n;
10. (m, n) (s, +) = [0, +), < n;
11. (m, +) (s, +) = [0, +);
12. H1 = ;
13. H1 H2 = H2 H1 ;
14. (H1 H2 ) H = (H1 H) (H2 H);


15. ( k Hk ) H = k (Hk H), k N>0 ;
16. (H1 H2 ) H = (H1 H) (H2 H), (H1 H2 ) 6= ;
17. (H1 H2 ) H = H1 (H2 H).
738

fiQualitative Spatial Logics Buffered Geometries



Proof.[for Rule 15] Suppose ( k Hk ) H.S Lemma 15, exist d1 k Hk
d2 H {d1 } {d2 }. Since d1 k Hk , exists k N>0
d1 Hk . SinceSd1 Hk k, d2 H, Definition 7, Hk H, k.
Therefore k (Hk H).

Suppose
k (Hk H). Then, thereSexists k N>0 Hk H.
Since Hk k Hk , Definition 7, ( k Hk ) H.
Proof.[for Rule 16] Suppose H1 H2 6= . Then, Hi 6= , {1, 2}. Since H1 , H2 , H
non-negative intervals, intersection rules Definition 7, (H1 H2 ) H
(H1 H)(H2 H) non-negative intervals. Let L = (H1 H2 )H, R = (H1 H)(H2 H).
H = , Rule 12, L = R = ; otherwise, show L = R cases:
H1 H2 H2 H1 : H1 H2 , Definition 7, H1 H H2 H.
L = H2 H = R. H2 H1 , similarly, L = H1 H = R.
H1 6 H2 H2 6 H1 : Without loss generality, let us suppose glb(H1 ) glb(H2 )
lub(H1 ) lub(H2 ). Then, glb(H1 H2 ) = glb(H2 ), lub(H1 H2 ) = lub(H1 ).
prove L = R, sufficient show following properties hold:
1. lub(L) = lub(R);
2. glb(L) = glb(R);
3. lub(L) L iff lub(R) R;
4. glb(L) L iff glb(R) R.
Rules 1-14 intersection rules, lub(L) = lub(H1 H2 ) + lub(H) = lub(H1 ) +
lub(H). lub(R) = min(lub(H1 ) + lub(H), lub(H2 ) + lub(H)) = lub(H1 ) + lub(H).
Thus, lub(L) = lub(R) (Property 1 holds).
lub(H1 ) H1 lub(H) H, Rules 1-14 intersection rules, lub(L) L
lub(R) R; otherwise, lub(L) 6 L lub(R) 6 R. Thus, Property 3 holds.
prove Property 2 Property 4 cases:
H H1 = H H2 = :
lub(H) glb(H1 ):
glb(L) = glb(H1 H2 ) lub(H) = glb(H2 ) lub(H).
glb(R) = max(glb(H1 ) lub(H), glb(H2 ) lub(H)) = glb(H2 ) lub(H).
Thus, glb(L) = glb(R) (Property 2 holds).
glb(H2 ) H2 lub(H) H, Rules 1-14 intersection rules,
glb(L) L glb(R) R; otherwise, glb(L) 6 L glb(R) 6 R. Thus,
Property 4 holds.
glb(H) lub(H2 ):
glb(L) = glb(H) lub(H1 H2 ) = glb(H) lub(H1 ).
glb(R) = max(glb(H) lub(H1 ), glb(H) lub(H2 )) = glb(H) lub(H1 ).
Similar case above, clear Property 2 Property 4 hold.
H H1 6= H H2 = : then, H (H1 H2 ) = .
glb(L) = glb(H1 H2 ) lub(H) = glb(H2 ) lub(H).
739

fiDu & Alechina

glb(R) = max(0, glb(H2 ) lub(H)) = glb(H2 ) lub(H).
Similar cases above, clear Property 2 Property 4 hold.
H H1 = H H2 6= : then, H (H1 H2 ) = .
glb(L) = glb(H) lub(H1 H2 ) = glb(H) lub(H1 ).
glb(R) = max(glb(H) lub(H1 ), 0) = glb(H) lub(H1 ).
Similar cases above, clear Property 2 Property 4 hold.
H H1 6= H H2 6= :
since H1 , H2 , H intervals H1 H2 6= , H (H1 H2 ) 6= .
glb(L) = 0.
glb(R) = max(0, 0) = 0.
Rules 1-14, glb(L) L glb(R) R.
clear Property 2 Property 4 hold.
every case, Properties 1-4 hold.
Therefore, L = R.
Proof.[for Rule 17] Let
L = (H1 H2 ) H, R = H1 (H2 H).
Definition 7, LS= ( d1 H1 ,d2 H2 {d1 } {d2 }) H.
Rule 15, L = d1 H1 ,d2 H2 (({d1 } {d2 }) H).
Rule 13, ({d1 } {d2 }) H = H
({d1 } {d2 }).
Rule 15, H ({d
1 } {d2 }) = dH ({d} ({d1 } {d2 })).
Rule 13, L =
d1 H1 ,d2 H2 ,dH (({d1 } {d2 }) {d}).
Similarly, R = d1 H1 ,d2 H2 ,dH ({d1 } ({d2 } {d})).
prove L = R, sufficient show
({d1 } {d2 }) {d} = {d1 } ({d2 } {d}).
Let l = ({d1 } {d2 }) {d}, l = [|d1 d2 |, d1 + d2 ] {d};
r = {d1 } ({d2 } {d}), r = {d1 } [|d2 d|, d2 + d].
prove l = r cases:
[|d1 d2 |, d1 + d2 ]: Definition 7, l = [0, d1 + d2 + d].
d1 + d2 d, d2 + d1 , d1 + d2 .
Thus, d1 [|d2 d|, d2 + d]. Definition 7, r = [0, d1 + d2 + d].
6 [|d1 d2 |, d1 + d2 ]:
> d1 + d2 : Definition 7, l = [d d1 d2 , d1 + d2 + d].
d1 < d2 = |d2 d|.
Definition 7, r = [d d2 d1 , d1 + d2 + d].
< |d1 d2 |: Definition 7, l = [|d1 d2 | d, d1 + d2 + d].
d1 d2 : < d1 d2 , is, d1 > d2 + d.
Definition 7, r = [d1 d2 d, d1 + d2 + d].
d1 < d2 : < d2 d1 , is, d1 < d2 d.
Definition 7, r = [d2 d1 , d1 + d2 + d].
case, l = r. Therefore, L = R.

740

fiQualitative Spatial Logics Buffered Geometries

Appendix B. Alternative Proof Path-Consistency Lemma
appendix, would provide sketch alternative proof idea
Path-Consistency Lemma, since may appeal readers proof
presented Section 5.3. alternative proof uses Lemma 44.
Lemma 44 distance constraint d(p, q) h DS(+ ) h =
6 , exist
+
d(p, q) m1 d(p, q) m2 DS( ) h = m1 m2 , m1 m2
identity definable intervals.
Proof. Lemma 31, d(p, q) h left-definable right-definable. Definition 16,
exists sequence distance constraints d(pi , pi+1 ) hi (p1 = p, pn = q, 0 < < n)
D(+ ), m1 = h1 ... hn1 , h m1 , h m1 greatest
lower bound (both value openness). Definition 15, d(p, q) m1 DS(+ ).
Lemma 21 Definition 14, m1 identity definable interval. Similarly, Definition 17, exists m2 h m2 , h m2 least upper bound
(both value openness), d(p, q) m2 DS(+ ), m2 identity definable interval. intersection rules, h = m1 m2 .
Proof.[sketch alternative proof Path-Consistency Lemma] Suppose D(+ )
path-consistent. exist d(p, q) g1 d(p, q) g2 DS(+ ), g1 6= ,
g2 6= , g1 g2 = . Lemma 44, exist d(p, q) m1 d(p, q) s1 DS(+ )
g1 = m1 s1 , m1 s1 identity definable intervals. Similarly,
g2 = m2 s2 , m2 s2 identity definable intervals. g1 g2 =
holds iff one following holds: m1 m2 = , m1 s2 = , s1 m2 = , s1 s2 = .
Without loss generality, let us suppose m1 m2 = . Lemma 35, m1 m2 =
iff (m1 m2 ) {0} = . Let = m1 m2 . identity definable interval.
Since d(p, q) m1 d(p, q) m2 DS(+ ), m1 6= , m2 6= , Lemma 31,
d(p, q) m1 d(p, q) m2 left-definable right-definable. Since d(p, q) m2 ,
d(q, p) m2 . Lemma 29, d(p, p) left-definable right-definable. rest
proof almost proof Path-Consistency Lemma (starting
Lemma 23, glb(h0 ) {0, , 2, 3, 4}) presented Section 5.3. discuss different
ways obtain given greatest lower bound (the role similar h0 ) check
whether derived every valid case.

Appendix C. Consequences Path-Consistency Lemma
appendix, state explicitly implications Path-Consistency Lemma.
Lemma 45 Let finite consistent set formulas. distance constraint d(p, q) h
DS(+ ), h 6= .
Proof. Follows immediately proof Path-Consistency Lemma.
Lemma 46 Let finite consistent set formulas. distance constraint d(p, p) h
DS(+ ), 0 h.
741

fiDu & Alechina

Proof. Suppose distance constraint d(p, p) h DS(+ ) 0 6 h. Definition 13
Definition 15, d(p, p) {0} D(+ ). Definition 15, d(p, p) (h {0}) = .
contradicts fact d(p, p) DS(+ ) (by Lemma 45). Therefore, 0 h.

References
Aiello, M., Pratt-Hartmann, I., & van Benthem, J. (Eds.). (2007). Handbook Spatial
Logics. Springer.
Allen, J. F. (1983). Maintaining Knowledge Temporal Intervals. Communications
ACM, 26 (11), 832843.
Balbiani, P., Condotta, J., & del Cerro, L. F. (1999). New Tractable Subclass
Rectangle Algebra. Proceedings 16th International Joint Conference
Artifical Intelligence, pp. 442447.
Bennett, B. (1996). Application Qualitative Spatial Reasoning GIS. Proceedings
1st International Conference GeoComputation, Vol. I, pp. 4447.
Bennett, B., Cohn, A. G., & Isli, A. (1997). Logical Approach Incorporating Qualitative Spatial Reasoning GIS (Extended Abstract). Proceedings 3rd
International Conference Spatial Information Theory, Vol. 1329 Lecture Notes
Computer Science, pp. 503504. Springer.
Chen, J., Cohn, A. G., Liu, D., Wang, S., OuYang, J., & Yu, Q. (2015). survey
qualitative spatial representations. Knowledge Engineering Review, 30 (1), 106
136.
Clementini, E., & Felice, P. D. (1996). algebraic model spatial objects indeterminate boundaries. Proceedings GISDATA specialist meeting Geographic
Objects Undeterminate Boundaries, pp. 155169.
Clementini, E., & Felice, P. D. (1997). Approximate Topological Relations. International
Journal Approximate Reasoning, 16 (2), 173204.
Clementini, E., Felice, P. D., & Hernandez, D. (1997). Qualitative Representation Positional Information. Artificial Intelligence, 95 (2), 317356.
Cohn, A. G., & Gotts, N. M. (1996a). Representing Spatial Vagueness: Mereological Approach. Proceedings 5th International Conference Principles Knowledge
Representation Reasoning, pp. 230241.
Cohn, A. G., & Gotts, N. M. (1996b). Egg-Yolk Representation Regions
Indeterminate Boundaries. Proceedings GISDATA Specialist Meeting
Geographical Objects Undetermined Boundaries, pp. 171187.
Cohn, A. G., & Renz, J. (2008). Qualitative Spatial Representation Reasoning.
Handbook Knowledge Representation, pp. 551596. Elsevier.
de Kleer, J. (1986). assumption-based TMS. Artificial Intelligence, 28 (2), 127162.
Du, H. (2015). Matching Disparate Geospatial Datasets Validating Matches using Spatial
Logic. Ph.D. thesis, School Computer Science, University Nottingham, UK.
742

fiQualitative Spatial Logics Buffered Geometries

Du, H., & Alechina, N. (2014a). Logic Part Whole Buffered Geometries.
Proceedings 21st European Conference Artificial Intelligence, pp. 997998.
Du, H., & Alechina, N. (2014b). Logic Part Whole Buffered Geometries.
Proceedings 7th European Starting AI Researcher Symposium, pp. 91100.
Du, H., Alechina, N., Hart, G., & Jackson, M. (2015). Tool Matching Crowd-sourced
Authoritative Geospatial Data. Proceedings International Conference
Military Communications Information Systems, pp. 18. IEEE.
Du, H., Alechina, N., Jackson, M., & Hart, G. (2016).
Method Matching Crowd-sourced Authoritative Geospatial Data. Transactions GIS.
http://dx.doi.org/10.1111/tgis.12210.
Du, H., Alechina, N., Stock, K., & Jackson, M. (2013). Logic NEAR FAR.
Proceedings 11th International Conference Spatial Information Theory, Vol.
8116 Lecture Notes Computer Science, pp. 475494. Springer.
Du, H., Nguyen, H., Alechina, N., Logan, B., Jackson, M., & Goodwin, J. (2015). Using
Qualitative Spatial Logic Validating Crowd-Sourced Geospatial Data. Proceedings 29th AAAI Conference Artificial Intelligence (the 27th Conference
Innovative Applications Artificial Intelligence), pp. 39483953.
Egenhofer, M. J. (1997). Query processing spatial-query-by-sketch. Journal Visual
Languages Computing, 8 (4), 403424.
Egenhofer, M. J., & Franzosa, R. D. (1991). Point Set Topological Spatial Relations. International Journal Geographical Information Systems, 5 (2), 161174.
Egenhofer, M. J., & Herring, J. R. (1991). Categorizing Binary Topological Relations
Regions, Lines, Points Geographic Databases. Tech. rep., University
Maine.
Fine, K. (1975). Vagueness, truth logic. Synthese, 30, 263300.
Frank, A. U. (1991). Qualitative Spatial Reasoning Cardinal Directions. Proceedings
7th Austrian Conference Artificial Intelligence, pp. 157167.
Frank, A. U. (1996). Qualitative Spatial Reasoning: Cardinal Directions Example.
International Journal Geographical Information Science, 10 (3), 269290.
Goyal, R. K., & Egenhofer, M. J. (2001). Similarity Cardinal Directions. Jensen, C. S.,
Schneider, M., Seeger, B., & Tsotras, V. J. (Eds.), Advances Spatial Temporal
Databases, Vol. 2121 Lecture Notes Computer Science, pp. 3655. Springer.
Guesgen, H. W., & Albrecht, J. (2000). Imprecise reasoning geographic information
systems. Fuzzy Sets Systems, 113 (1), 121131.
Haklay, M. (2010). good volunteered geographical information? comparative
study OpenStreetMap Ordnance Survey datasets. Environment Planning
B: Planning Design, 37 (4), 682703.
ISO Technical Committee 211 (2003). ISO 19107:2003 Geographic information Spatial
schema. Tech. rep., International Organization Standardization (TC 211).
743

fiDu & Alechina

Jackson, M., Rahemtulla, H., & Morley, J. (2010). synergistic use authenticated
crowd-Sourced data emergency response. Proceedings 2nd International
Workshop validation GeoInformation products crisis management, pp. 9199.
Kopczynski, M. (2006). Efficient spatial queries sketches. Proceedings ISPRS
Technical Commission II Symposium, pp. 1924.
Kutz, O. (2007). Notes Logics Metric Spaces. Studia Logica, 85 (1), 75104.
Kutz, O., Sturm, H., Suzuki, N., Wolter, F., & Zakharyaschev, M. (2002). Axiomatizing
Distance Logics. Journal Applied Non-Classical Logics, 12 (3-4), 425440.
Kutz, O., Wolter, F., Sturm, H., Suzuki, N., & Zakharyaschev, M. (2003). Logics metric
spaces. ACM Transactions Computational Logic, 4 (2), 260294.
Lehmann, F., & Cohn, A. G. (1994). EGG/YOLK Reliability Hierarchy: Semantic
Data Integration Using Sorts Prototypes. Proceedings 3rd International
Conference Information Knowledge Management, pp. 272279.
Li, S., Liu, W., & Wang, S. (2013). Qualitative constraint satisfaction problems: extended framework landmarks. Artificial Intelligence, 201, 3258.
Li, S., Long, Z., Liu, W., Duckham, M., & Both, A. (2015). redundant topological
constraints. Artificial Intelligence, 225, 5176.
Ligozat, G. . (1998). Reasoning Cardinal Directions. Journal Visual Languages &
Computing, 9 (1), 2344.
Lutz, C., & Milicic, M. (2007). Tableau Algorithm Description Logics Concrete
Domains General TBoxes. Journal Automated Reasoning, 38 (1-3), 227259.
Mackworth, A. K., & Freuder, E. C. (1985). Complexity Polynomial Network
Consistency Algorithms Constraint Satisfaction Problems. Artificial Intelligence,
25 (1), 6574.
Mallenby, D. (2007). Grounding Geographic Ontology Geographic Data. AAAI
Spring Symposium - Logical Formalizations Commonsense Reasoning, pp. 101106.
Mallenby, D., & Bennett, B. (2007). Applying Spatial Reasoning Topographical Data
Grounded Ontology. Proceedings 2nd International Conference GeoSpatial
Semantics, No. 4853 Lecture Notes Computer Science, pp. 210227. Springer.
Moratz, R., Renz, J., & Wolter, D. (2000). Qualitative Spatial Reasoning Line
Segments. Proceedings 14th European Conference Artificial Intelligence,
pp. 234238.
Moratz, R., & Wallgrun, J. O. (2012). Spatial reasoning augmented points: Extending
cardinal directions local distances. Journal Spatial Information Science, 5 (1),
130.
OpenStreetMap (2012). Free Wiki World Map. http://www.openstreetmap.org.
Ordnance Survey (2012). Ordnance Survey. http://www.ordnancesurvey.co.uk.
Pawlak, Z., Polkowski, L., & Skowron, A. (2007). Rough Set Theory. Wiley Encyclopedia
Computer Science Engineering. John Wiley & Sons, Inc.
744

fiQualitative Spatial Logics Buffered Geometries

Randell, D. A., Cui, Z., & Cohn, A. G. (1992). Spatial Logic based Regions Connection. Proceedings 3rd International Conference Principles Knowledge
Representation Reasoning, pp. 165176.
Renz, J., & Nebel, B. (2007). Qualitative Spatial Reasoning Using Constraint Calculi.
Aiello, M., Pratt-Hartmann, I., & van Benthem, J. (Eds.), Handbook Spatial Logics,
pp. 161215. Springer.
Roy, A. J., & Stell, J. G. (2001). Spatial Relations Indeterminate Regions. International Journal Approximate Reasoning, 27 (3), 205234.
Schockaert, S., Cock, M. D., Cornelis, C., & Kerre, E. E. (2008a). Fuzzy region connection
calculus: interpretation based closeness. International Journal Approximate
Reasoning, 48 (1), 332347.
Schockaert, S., Cock, M. D., Cornelis, C., & Kerre, E. E. (2008b). Fuzzy region connection calculus: Representing vague topological information. International Journal
Approximate Reasoning, 48 (1), 314331.
Schockaert, S., Cock, M. D., & Kerre, E. E. (2009). Spatial reasoning fuzzy region
connection calculus. Artificial Intelligence, 173 (2), 258298.
Sirin, E., Parsia, B., Grau, B. C., Kalyanpur, A., & Katz, Y. (2007). Pellet: practical
OWL-DL reasoner. Journal Web Semantics, 5 (2), 5153.
Skiadopoulos, S., & Koubarakis, M. (2004). Composing cardinal direction relations. Artificial Intelligence, 152 (2), 143171.
Smith, N. J. (2008). Vagueness Degrees Truth. Oxford University Press.
Stocker, M., & Sirin, E. (2009). PelletSpatial: Hybrid RCC-8 RDF/OWL Reasoning Query Engine. Proceedings 5th International Workshop OWL:
Experiences Directions.
Sturm, H., Suzuki, N., Wolter, F., & Zakharyaschev, M. (2000). Semi-qualitative Reasoning
Distances: Preliminary Report. Proceedings Logics Artificial
Intelligence, European Workshop, JELIA, pp. 3756.
van Beek, P. (1992). Reasoning Qualitative Temporal Information. Artificial Intelligence, 58 (1-3), 297326.
Wallgrun, J. O., Wolter, D., & Richter, K. (2010). Qualitative matching spatial information. Proceedings 18th ACM SIGSPATIAL International Symposium
Advances Geographic Information Systems, pp. 300309.
Wolter, F., & Zakharyaschev, M. (2003). Reasoning Distances. Proceedings
18th International Joint Conference Artificial Intelligence, pp. 12751282.
Wolter, F., & Zakharyaschev, M. (2005). logic metric topology. Journal
Symbolic Logic, 70 (3), 795828.
Zadeh, L. A. (1975). Fuzzy logic approximate reasoning. Synthese, 30 (3-4), 407428.
Zimmermann, K. (1995). Measuring without Measures: Delta-Calculus. Proceedings
2nd International Conference Spatial Information Theory, pp. 5967.

745


