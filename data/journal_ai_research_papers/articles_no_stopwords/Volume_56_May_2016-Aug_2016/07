journal artificial intelligence

submitted published

efficient mechanism design online scheduling
xujin chen
xiaodong hu

xchen amss ac cn
xdhu amss ac cn

amss chinese academy science beijing china

tie yan liu
weidong
tao qin

tyliu microsoft com
weima microsoft com
taoqin microsoft com

microsoft beijing china

pingzhong tang

kenshin mail tsinghua edu cn

tsinghua university beijing china

changjun wang

wcj amss ac cn

beijing university technology beijing china

bo zheng

zhengb mails tsinghua edu cn

tsinghua university beijing china

abstract
concerns mechanism design online scheduling strategic setting
setting job owned self interested agent may misreport release
time deadline length value job need determine
schedule jobs payment agent focus design
incentive compatible ic mechanisms study maximization social welfare e
aggregated value completed jobs competitive analysis first derive two lower
bounds competitive ratio deterministic ic mechanism characterize
landscape one bound holds equal length jobs
bound ln holds unequal length jobs maximum ratio
lengths two jobs propose deterministic ic mechanism
simple mechanism works well two preemption restart
model mechanism achieve optimal competitive ratio equal length jobs


near optimal ratio
ln unequal length jobs
small constant preemption resume model mechanism achieve
optimal competitive ratio equal length jobs near optimal competitive ratio
within factor unequal length jobs

introduction
online scheduling widely studied literature baruah koren mao mishra
raghunathan rosier shasha wang baruah haritsa sharma porter
zheng fung chan chin poon wong ting job characterized release time deadline length value successful completion
deadline inspired emerging areas computational economics cloud computing consider strategic setting online scheduling job
owned self interested agent may incentive manipulate schedulc

ai access foundation rights reserved

fichen hu liu qin tang wang zheng

ing order better specific agent may deliberately delay
release time job inflate length misreport value deadline
given situation carefully designed online scheduling mechanism needed
regulate strategic behaviors agents approximately optimize system
objectives work focus maximization social welfare e total
value completed jobs use competitive analysis lavi nisan evaluate
performance mechanism compares social welfare implemented
mechanism without knowledge future jobs optimal offline
allocation knowledge future jobs
work consider two scheduling preemption restart model ting
preemption resume model porter preempted jobs first
model restart beginning jobs second model resume
break point since preemption assumed work two
referred restart model resume model respectively involved jobs
called non resumable resumable respectively
formulation
consider online scheduling infinite time period r suppose
single machine processes one job given time jobs come
time use j denote set jobs job j j owned self interested
agent denoted j simplicity characterized private type
j rj dj lj vj r r rj release time dj deadline
lj length e processing time vj value job completed
deadline
resumable job j completed processed lj time units total
release time rj deadline dj non resumable job j completed
processed lj consecutive time units release time rj deadline
dj
let maxi jj llji maximum ratio lengths two jobs
simplicity assume job lengths normalized e lj j j assume
known advance following practice work chan et al ting

study direct revelation mechanisms agent participates simply
declaring type job j rj dj lj vj time rj use denote profile
reported types agents given declared types agents mechanism
used schedule allocate jobs determine payment agent
consider reasonable mechanisms schedule job reported
deadline schedule job processed reported length
given certain mechanism job sequence use qj denote whether
job j completed time completed qj otherwise qj
referred weighted throughput scheduling literature
note release time referred arrival time online auction literature parkes
earliest time agent full knowledge job thus earliest time job
available scheduling process



fiefficient mechanism design online scheduling

value agent j extracts mechanism represented qj dj vj
p
social welfare mechanism represented w j qj dj vj
let pj denote amount money mechanism charges agent j assume agents quasi linear preferences nisan e utility agent j
uj j qj dj vj pj
since agents self interested may misreport types strategic way
easy see misreport shorter length dominated strategy otherwise
job cannot completed even scheduled mechanism since lj lj therefore
agents underreport lengths jobs similar work porter
assume system return completed job agent j dj
way restrict agents report dj dj addition assume agent
knowledge job release time rj rj
considering potential misreport agents concerned incentive
compatible individually rational mechanisms mechanism incentive compatible
ic agent j regardless behaviors agents truthful reporting
type maximizes utility mechanism individually rational ir
job j truthful reporting leads non negative utility addition would
mechanism approximately maximize social welfare say mechanism strictly
c competitive exist job sequence c w w opt
opt denotes optimal offline mechanism sometimes say
competitive ratio c
related work
online scheduling studied non strategic setting lipton
tomkins borodin el yaniv bar noy guha naor schieber zheng
et al kolen lenstra papadimitriou spieksma ting nguyen
whose focus design strategic setting nisan ronen lavi
nisan friedman parkes porter hajiaghayi kleinberg mahdian
parkes parkes whose focus mechanism design
non strategic setting case lower bound competitive
ratio deterministic given woeginger competitive
deterministic constructed zheng et al restart model
competitive deterministic designed kim restart
resume competitive randomized introduced restart model
work fung et al lower bound provided work epstein
levin restricting release time deadlines integers randomized
e
competitive ratio e
proposed chin et al

deterministic competitive ratio proposed englert et
actually viewed decision mechanism designer rather assumption
decision crucial ensure incentive compatibility see later
since care social welfare performance opt competitive analysis
depends schedule regardless payments call opt optimal offline allocation
simply optimal allocation



fichen hu liu qin tang wang zheng

al best lower bounds currently randomized chin
fung deterministic hajek

general values lower bound competitive ratio deterministic
derived work chan et al lower bound improved



ln ting fung competitive ratio log
given restart model scheduling discrete time considered
work durr jez nguyen particular lower bound improved


model
ln ln competitive designed resume q
randomized competitive ratio log lower bound logloglog
provided canetti irani
assuming maximum ratio value densities value divided length

two jobs bounded known number competitive

given koren shasha bound optimal matching lower
bound given baruah et al
rich literature concerned non preemptive scheduling lipton
tomkins goldman parwatikar suri goldwasser ding zhang
ding ebenlendr sgall zhang ebenlendr sgall however
easily verified bounded competitive ratio cannot designed
setting unrestricted values arbitrary release time therefore common
assumption added non preemptive scheduling proportional values e
value job proportional length work goldman et al
tight upper lower bound given deterministic competitiveness
jobs equal length thus equal value blog c competitive randomized
provided general value matching log lower bound lipton
tomkins within constant factor
strategic setting work lavi nisan assuming integer time
points scheduling case studied authors
incentive compatible mechanism obtain constant competitive ratio
payment must made job completed hence propose family
semi myopic competitive ratio assumption semi myopic
strategies work hajiaghayi et al specific scheduling
considered restart model deterministic ic mechanism competitive
ratio designed lower bound given deterministic ic mechanism
however knowledge case restart model resume model
studied perspective mechanism design considering incentive
issues work fills gap
assuming maximum ratio value densities value divided length
two jobs bounded known number ic mechanism competitive


ratio designed porter proved
lower bound competitive ratio deterministic mechanism
recently online scheduling mechanisms investigated cloud computing zaman grosu azar ben aroya devanur jain zhang li jiang liu
vasilakos liu lucier menache naor yaniv mashayekhy nejad grosu
vasilakos wu gu li tao chen works mechanisms


fiefficient mechanism design online scheduling

designed allocate computational resources users users use virtual machines entire period requested model jobs non preemptive
differs setting

main summarized follows
first order characterize boundary derive two lower bounds
competitive ratio online deterministic ic mechanism one bound
holds situation jobs equal length e bound
improves previous lower bound hajiaghayi et al bound

ln characterizes asymptotical property competitive ratio
variance job lengths e sufficiently large
second design simple mechanism prove restart resume
ic achieves good social welfare
restart model competitive ratio small


particular ratio
ln large
enough small constant
resume model competitive ratio


small particular ratio
ln large
enough slightly worse restart model within
factor
worth mentioning
comparing lower bounds see restart resume
optimal equal length jobs near optimal within
constant factor unequal length jobs
comparison best known without considering incentive compat


ibility asymptotically speaking improves best known ratio log
ting


restart model
ln improves best known ratio


ln durr jez nguyen resume model
ln
thus even one care strategic aspect would still
nice use

note designing mechanisms online scheduling generally difficult
since combines challenges mechanism design e ensuring incentive compatibility
challenges online e dealing uncertainty future inputs
would highlight main techniques used work tackle challenges
allocation rule mechanism uses carefully selected function trade
three key elements value length degree completion trade function
delicate sense ensures efficiency monotonicity
crucial incentive compatibility


fichen hu liu qin tang wang zheng

order obtain good competitive ratios resume model design two nontrivial virtual charging schemes bound performance proposed mechanism
integral charging scheme segmental charging scheme
focus single machine model work extends multiple
identical machines one way extension similar work lucier et al
assumed h machines allocated job given
time parameter h stands common parallelism bound system
details extension found appendix e another way extend
multiple identical machines assume job j needs fixed number machines
processed please refer working zheng qin tang liu
details

lower bounds
section present two lower bounds competitive ratio deterministic
ic mechanism hold restart resume
competitive analysis interpreted game designer online
mechanism adversary given mechanism adversary selects sequence
jobs maximizes competitive ratio ratio social welfare obtained
offline optimal social welfare obtained therefore key
proving lower bounds construct subtle adversary behaviors
first introduce two notions dominant job shadow job
definition dominant job deterministic ic mechanism competitive
ratio c job called dominant job release time ri vi larger
c times total value jobs whose release time later ri
easy see order obtain reasonable competitive ratio dominant job
tight deadline mechanism must schedule release time ri otherwise
consider case jobs released ri case mechanism
cannot obtain competitive ratio c gives dominant job
definition shadow job suppose job tight deadline e di ri li
job called shadow job parameters ri li vi except
later deadline di
clearly shadow job flexible completed later shadow
jobs following lemma holds ic mechanism non trivial
competitive ratio
lemma shadow job argument deterministic ic mechanism
non trivial competitive ratio c completes job tight deadline di
scenario scenario substitutes shadow job job must
complete job time di
working consider restart model ignore misreport release time
deadline



fiefficient mechanism design online scheduling

proof suppose completed job di scenario could consider subsidiary scenario includes jobs scenario adds several dominant jobs
remember call job dominant value sufficiently large see definition
dominant jobs released one one di di di bd di c respectively
denoted bd di c accordingly di deadline job
deadline shadow job whats dominant jobs unit length
tight deadline claim achieve desired non trivial competitive ratio
must complete dominant jobs thus time interval di occupied
reason follows schedule dominant job j bd di c
consider scenario includes jobs release time later di j
since scenario indistinguishable time di j know
schedule dominant job j scenario hence cannot obtain competitive ratio c
subsidiary scenario indistinguishable scenario time di
job completed di furthermore existence dominant jobs
job completed finally however job falsely declares type
job e misreports deadline di would completed time
di better contradicting incentive compatibility
following derive lower bounds leveraging lemma first following
theorem specifies lower bound jobs equal length e note
concerns strategic setting woeginger shows competitive
ratio deterministic non strategic setting least
theorem deterministic ic mechanism obtain competitive ratio
less
prove theorem addition adversary argument similar
work woeginger need perturb job sequence leverage
shadow job argument
intuitively construct special job set tight deadline jobs released one
one two jobs collide deadline one job later
release time mechanism impossible two jobs
completed values jobs carefully selected later released
job valuable earlier one predecessor value difference
two neighboring jobs constrained small enough additive constant furthermore
job set values first last jobs set obey specific amplification
along execution mechanism adversary would release series job
sets mechanism completes one job adversary stops releasing job
subtleness lies choosing time release job sets mechanism almost
completes job job set adversary may release job set whose jobs
collide job collide predecessor job way
mechanism would abandon current job complete
optimal allocation completes several jobs previous job sets
scenario contradicts monotonicity condition see strict definition start section
theorem work parkes shows monotonicity necessary incentive
compatibility



fichen hu liu qin tang wang zheng

valuable job e last job newly released job set job however
mechanism complete job discrepancy leads lower bound
competitive ratio detailed proof found




set
r




vq w




v
v v



figure structure set v w
proof suppose contradiction exists deterministic ic mechanism
achieves competitive ratio adopt notation set
introduced woeginger define set v w w v
set jobs q satisfying following properties
v v vq w vj vj vj j q hence q integer
less wv
e call magnifying parameter set
lj dj rj j e jobs unit length tight deadlines
r rq dq thus two jobs collide
call split point set
define release time set release time first job figure shows
visual structure set v w adversary behavior follows
adversary behavior adversary release set one another depending
first set set released time
definition set know first job set value last job
set value value difference two neighboring jobs upper
bounded
next specify adversary release seti
adversary sets parameters seti specify
notations used detailed table
proof construct scenario job perturbed later deadline thus
completed later make use shadow job argument analysis makes lower
bound increased compared previous lower bound non strategic setting



fiefficient mechanism design online scheduling

seti
job ij
rij dij vij
wi
ti

job
job

table summary notation proof theorem
th released set full set vi wi ti
j th job seti
release time deadline value job ij
value last job seti
split point seti
magnifying parameter seti
trigger job seti
preceding job seti

adversary behavior
initial release set time
completed job

almost completes j th job j seti precisely executing
job ij di j rij period time since rij

release seti time di j

else

release job

end
end
worth mentioning seti triggered non first job seti
almost completed call job trigger job ii set released
job completed
suppose trigger jobs set seti named successively accordingly denote job release time earlier trigger job
call preceding jobs line know seti
released deadline note trigger job preceding job
located seti
specify parameters seti set vi wi ti remember
set defined set
adversary sets vi equal value trigger job seti
vi vi note vi value first job seti
pi
adversary sets wi max vi j
vj vi
w v
adversary sets ti di di di di deadlines trigger job
preceding job note setting ti di di jobs seti
released di di hence jobs collide trigger job
none collides job
figure illustrates adversary releases set example
example almost completes j th job j seti seti released
deadline job j value first job seti equal vij


fichen hu liu qin tang wang zheng





ri




seti




vi

seti


vij
vi j



v vij

ti
figure example seti seti

according gives trigger jobs switches schedule
job newly released set adversary release set one another
one may wonder whether adversary release set infinitely words
subscript seti tend infinity
answer seen definition wi since
lemma work woeginger finite numberp denote k steps vk
must less corresponding sum term vk k
j vj wk vk
must hold remember vk wk denote value first job last job setk
respectively thus exists one job setk according matter
whether completes job adversary release job therefore
setk ultimate set job k ultimate job
far clarified adversarys behaviors next derive
lower bound adversary
according structure set know adversary allows
complete one job actually completed job first job set
e job trigger job k first job seti k e job
ultimate job k let us analyze one one
completes job consider scenario job substituted
shadow job whose deadline late enough e even started executed
deadline last job set still completed time according
lemma mechanism must complete job time thus abandon
last job value w set therefore obtains social welfare
v however optimal allocation first completes last job set
job obtains social welfare contradicts fact
competitive ratio since
completes trigger job job k without loss generality
denote job job ij know vij vi vi completes job ij
k similarly consider scenario job ij substituted
shadow job ij whose deadline late enough lemma must complete
job ij time dij obtaining social welfare vij vi vi however social
welfare optimal allocation
p completes jobs
p last job seti
job ij least ij vj wi vij ij vj j wi vij


fiefficient mechanism design online scheduling

p
vi
j vj vij vi vi
contradicts fact competitive ratio

pi

j vj

completes ultimate job k consider scenario adversary
releases two copies job k setk clearly scenario choose one
copy complete denote completed copy job k job
k consider scenario job k substituted shadow job
k whose deadline unit time later job k according lemma
must complete job k dk obtains social welfare vk however

optimal allocation completes
pk jobs k job k
pk job k
obtain social welfare least j vj vk vk j vj j wk vk
pk
pk
j vj vk vk vk remember
j vj vk
p
setk vk wk vk k
j vj contradicts fact
competitive ratio

second understand asymptotic property lower bound large
construct scenarios inspired example durr et al obtain following
theorem
theorem sufficiently large deterministic ic mechanism obtain
competitive ratio less ln particular deterministic ic mechanism
obtain competitive ratio less ln
proof convenience analysis denote
let us consider following adversary behaviors


ln

r de assume

adversary behavior time long job b type b released
well two short jobs type moreover integer
moment mechanism schedules job b two short jobs
unit length released tight deadline job
released otherwise values jobs satisfy



v v



e

note job job type cases analyzed
naturally applied
according adversary behavior know adversary allows complete
one job actually completed job job job
job b analyze three cases follows
mechanism schedules job consider scenario
includes jobs b job job type
shadow job according lemma mechanism must
complete job obtains social welfare however scenario
optimal mechanism complete job b first schedule time
complete optimal social welfare ratio


fichen hu liu qin tang wang zheng

mechanism schedules job consider scenario
includes jobs b job job type
et shadow job according lemma mechanism
schedule job time complete thus mechanism
obtains social welfare v however one optimal mechanisms
schedule complete jobs schedule time
complete resulting following optimal social welfare

x

de

e





e





r


x

e





e





z



r





e e

r

r

de



r



r e e f r e f r v
r

introduced function f defined f r r e considering
ln r r ex x sides converge
x approaches
r

f r r e r

r





f r approaches grows ratio
mechanism schedules completes job b obtaining social welfare
consider scenario includes jobs job b job
b type b shadow job b similarly claim
ic mechanism schedule job b time complete time thus
mechanism obtains social welfare v b however one optimal
mechanisms schedule complete small jobs
schedule complete job b leads social welfare least
z


x
x





de
e r
e
e r
r

r

de
r











e
f r e
f r eln

ln
ln
f r f r
f r
v b
e
e
e
r e



e ln equation larger f r
v b therefore ratio
combining three cases together prove nonexistence ln competitive mechanisms since f r competitive ratio
least ln

mechanism design
section describe simple mechanism whose allocation payment rules
given works surprisingly well restart resume


fiefficient mechanism design online scheduling

handles settings different values unified framework
contrast previous works durr et al need design separate different
deal different values
mechanism
introducing mechanism first introduce concept valid active time
uncompleted job j time denoted


min x j restart model
ej r
resume model
x j ds



x mechanisms allocation function maps time point available job machine idle indicator function returns
argument true zero otherwise note ej take vector
argument example ej shorthand ej job sequence
seen restart model time job j received allocation
time preempted ej resume
model ej accumulated processing time job j time
say job j feasible time reported release time
completed yet enough time completed reported
deadline e dj lj ej use jf denote set feasible jobs time

according time assigns priority score vj lj ej
feasible job j jf processes feasible job highest
priority ties broken favor job smaller rj located
determined later competitive analysis payment rule
essentially critical value payment parkes similar secondprice auction hence payment equal minimum bid agents make
remain allocated following pseudocode j denotes reported types jobs
j

equation since valid candidate minimization exist
x j restart model ej
note use critical value payment payment completed job j depends
jobs types rj dj mechanism allows returning completed job reported
deadline calculation critical value payment face trouble possible agent j misreports
much later deadline obtain cheaper payment job completed returned
true deadline reason restrict mechanism return completed job reported
deadline worth mentioning payment must made job completed lavi
nisan shown incentive compatible mechanism obtain constant
competitive ratio



fichen hu liu qin tang wang zheng


allocation rule
time
jf
x arg maxjjf vj lj ej
else x
end
payment rule
job j
qj dj
pj min v qj rj dj lj v j dj
j

j

else pj
end
intuition mechanism two fold first ensure efficiency one must trade
value length job larger value higher priority job larger
remaining length lower priority uses simple priority function achieve
tradeoff seen priority score vj lj ej job positively correlated
value negatively correlated remaining length second ensure ic
uses critical value payment rule monotone allocation rule
note allocation rule payment rule implemented efficiently
allocation rule enough consider time point jobs arrive
existing jobs completed give appendix
payment agent computed polynomial time
clearly critical value payment rule individually rational
following subsection prove incentive compatibility
incentive compatibility
call allocation rule mechanism monotone job truthfully reported type
j rj dj lj vj cannot completed mechanism dominated declaration
type j rj dj lj vj cannot make completed
according theorem work parkes order establish
truthfulness mechanism enough prove monotonicity allocation rule
theorem mechanism incentive compatible restart model resume
model
proof prove monotonicity allocation rule assume job j
completed j truthfully declared denote case rue
j cannot completed declaring j rj dj lj vj rj rj
lj lj dj dj vj vj denote case f alse
suppose job j ever executed k times rue case define
following points execution job j let tsi tpi ith time job j starts
strict definition monotonicity start section
say type j dominated type j denoted j j rj rj dj dj
lj lj vj vj



fiefficient mechanism design online scheduling

execution preempted respectively k let ta arg inf ej
dj lj time job j abandoned job j never started set
ts tp ta
refer p rj ts tp ts tpk ta p p pk pending period
job j ts tp ts tp tsk tpk ak executing period
job j
first consider monotonicity regard rj regardless variables clearly
definition ta declaring rj ta could cause job completed thus
restrict attention rj rj ta p
necessary condition job j completed f alse job j
executed sometime period p however according lemma see job j
cannot executed p therefore declaring rj rj cannot cause job completed
intuitively lemma says case rue f alse set jobs
scheduled period p must thus job j cannot executed period p
consider dj lj vj proof essentially proof rj
declaring dj dj lj lj vj vj improve job js priority
cannot change execution jobs pending period p declaring dj dj
lj lj vj vj cannot cause job completed proves allocation
rule monotone
following formally introduce lemma used theorem
lemma introduce additional notation case rue f alse denote
j j respectively set jobs ever executed p denote
respectively set jobs ever pending
lemma j j j j
proof consider job according defintion case rue job
lower priority job j period p
relation means case rue job cannot executed period p
obvious since job j higher priority pending period p
relation means case f alse job cannot executed period p
prove contradiction suppose job executed time point p
denote ti min p x assume ti pn n k observation
pending period pn n k
h n

observation pending period pn schedules jobs sequence jn jn
h n number active jobs pn case rue know
h n
release time job jn jn period pn particular release time job
h n
jn pn n exactly time tpn job jn jn completed abandoned
pn idle time pn
use fj denote priority job j time suppose case
h n
rue job jni one jn jn executed ti priority fjni ti
job may appear sequence preempted resumed restarted later



fichen hu liu qin tang wang zheng

case f alse since executed ti according observation deduce
priority job time ti e ti must larger fjni ti
therefore deduce must executed sometime period ui
otherwise executed time ti case rue contradicting
fact similarly denote si min ui x assume si
n
claim case f alse priority job time si e si satisfies
inequality

p
fjni ti tm si
si
p
fjni ti tm si

n
n

otherwise priority job time ti fjni ti consider case
periods si tpm allocated
according definition si know si first time executed period
therefore priority job si remains shifting case rue
case f alse however case rue job j executed time si hence
priority larger si periods si tpm allocated
j therefore time ti job j priority larger fjni ti contradicting fact
jni executed time ti
relation means matter case rue case f alse jobs executed
period p relation derived naturally relation

competitive analysis
section mechanism performs quite well terms social welfare
comparison optimal offline allocation full knowledge future
jobs beginning execution
perform competitive analysis need design virtual charging schemes
certain virtual charging scheme every job j completed optimal allocation opt
charge value partial value job f completed virtual charging
scheme satisfies property every job f completed receives total charge
cvf succeed showing competitive ratio c
designing ingenious virtual charging scheme crucial competitive analysis
following design different virtual charging schemes obtain competitive
ratio restart model resume model respectively
use parameter priority function mechanism first derive
competitive ratios functions specify later section choose
suitable respect optimize performance derive competitive
ratios terms
introduce notation used section section
denote f sequence jobs completed time job f
sequence let tf time job f completed convenience denote
divide time f intervals tf tf f f tf


fiefficient mechanism design online scheduling

analysis restart model
study restart model first assume without loss generality optimal
allocation opt interrupt allocation since interrupted jobs non resumable
following theorem
theorem restart model competitive ratio











proof introduce virtual charging scheme follows completed job j
opt completed mechanism value charged
otherwise e job j completed consider time sj j begins
execution opt note opt interrupt allocation j exactly allocated
time period sj sj lj sj must time interval recall tf tf
charge value j f define j tf sj time amount sj
tf job j feasible time sj according lemma know priority
jobs j time sj vf tf sj vf j meanwhile priority j time
sj vj lj vj lj vf j e vj vf j lj defer formal statement
proof lemma end subsection
calculate maximum total value charged completed job f
time interval denote sequence jobs opt whose starting time sj
belongs ordered sm remember define j tf sj
time amount sj tf clear
j lj j j since j allocated completed time interval
sj sj furthermore job lengths normalized e lj deduce



j
j

j j
recall p
f may completed opt therefore total charge
job f vf
j vj upper bounded
vf vf


x
j



j lj

vf

l




x



j

vf

l



j

j



shows mechanism


x




j

vf






x
j

competitive


actually competitive ratio obtained way tight e ratio

best possible give example appendix b tightness

lemma time point sj job j f feasible time sj
priority j sj vf tf sj moreover value j vj vf tf sj lj
proof note sj time interval according definition know
f unique job completed prove lemma
enumerating possible cases
executing job sj job f know priority job f time
sj exactly vf tf sj priority job f time tf vf clearly priority
j sj larger job f thus larger vf tf sj


j

fichen hu liu qin tang wang zheng

executing job sj job f assume executes job j jk
f successively time period sj tf k since f unique job
completed deduce j preempted j j preempted j jk
preempted f finally f completed time tf denote k time points
j jk preempted respectively denote fj priority job
j time use backward induction first know priority job jk
k larger job f e fjk k vf tf k since jk preempted
jk k know priority jk k larger jk
hence fjk k fjk k fjk k k k vf tf k eventually
get fj vf tf since j executed time sj deduce
fj sj vf tf sj clearly priority j time sj e vj lj larger
j thus larger vf tf sj
arranging vj lj ej sj vf tf sj get vj vf tf sj lj ej sj vf tf sj lj
ej sj valid active time job j time sj
remarks lemma f unique job completed
time interval priorities executing jobs monotonically increase
lemma applies restart model resume model lemma provides
useful tool relate priority feasible job j time point sj
completed job f
analysis resume model
compared restart model competitive analysis resume model much
complicated resume model job executed several disjointed
time intervals charging scheme used previous subsection longer works
need design virtual charging scheme
introducing virtual charging scheme introduce notation
used subsection let j denote number disjoint time segments
j
allocated completed job j opt j j sj denote corresponding starting
time segment
say allocation contains violation exist two completed jobs j
two segments starting time sai sci sbj sdj sai sbj sci sdj
allocation called standard contain violation means allocation
standard completed job starting time execution two segments
another jobs allocation completion time time interval e
two segments provide obvious yet useful fact offline
optimal allocation
claim exists optimal allocation standard
detailed proof please refer appendix c without loss generality assume
optimal allocation opt standard
claim presents important property standard allocation used
following proofs
j job j affect analysis



fiefficient mechanism design online scheduling

claim execution opt job js execution starting time two
segments another jobs allocation job js completion time time
interval e two segments
analyze competitive ratio resume model propose two virtual
charging schemes referred integral charging scheme segmental charging scheme
respectively integral charging scheme charge whole value job j
optimal allocation opt job completed mechanism segmental
charging scheme charge value j segment different segments
job may charged different jobs completed mechanism two

schemes theorem upper bound competitive ratio mechanism



ln respectively discussed section two ratios work situations
different values e first one works well small second one works
well large
theorem resume model competitive ratio








particular satisfies competitive ratio min

ln






proof theorem given section section
integral charging scheme
remember denote f sequence jobs completed time
job f sequence denote tf time job f completed
integral charging scheme restrict total number jobs excluding f
charged job f allow number exceed btf tf c particular
introduce notation saturation definition
definition saturated job f number jobs excluding f
charged f less btf tf c say f unsaturated otherwise f
saturated
let w denote set jobs completed opt wf w denote set jobs
j w j let denote set jobs w whose values already
charged jobs completed
integral charging scheme described scheme simplicity refer line
step line step line step
give intuitive explanations step step
step job f f f pick btf tf c jobs wf
charge values f rule picking jobs follows largest j first k th
picked job j later tf k
slight abuse notations still denote job j thus start time first segment j



fichen hu liu qin tang wang zheng

scheme integral charging scheme
initial
job w completed mechanism charge value
add
w

f f

k btf tf c

j k j j tf k j wf

j k

set j arg maxj j k j add j charge value f

end

end

end

f f

wf

set j arg maxj wf j add j









j

sj hj hj f f
charge js value unsaturated job smallest completion time
set f f hj
j
else sj tf
charge js value unsaturated job smallest completion time
set f f
end
end
end
end

step consider jobs w whose values charged job first
j
two steps consider job j j located interval sj
located hj
tf charge value unsaturated job job set f f hj
f f rule selecting unsaturated job follows smallest completion time
first
three steps jobs w charged completed jobs
see claim first give two observations
observation integral charging scheme job f f
time number jobs charged f start time opt tf
charged step btf tc
observation integral charging scheme job f f completed
mechanism total number jobs charged f excluding f
btf tf c
observation derived lines scheme observation derived
restriction saturated job charged



fiefficient mechanism design online scheduling

claim integral charging scheme jobs w charged jobs
completed mechanism
proof suppose contrary exists wf charged job
rt
f f f hi introduce notation ei opt ds denote
valid active time resumable job time opt since length every job
least exists allocation segment job ei ei
opt suppose belongs h definition hi
h hi
according assumption know charged f b jobs
f f f h saturated charging process charge
job
point deduce step least btf c jobs whose
values charged f j tf observation otherwise would
charged f step denote ja set btf c jobs
point b recall job f f f f h saturated
bti ti c jobs whose values charged f see definition hence deduce
least btf tf c btf h tf h c jobs whose values
charged f f h starting time satisfying j tf h
particular among jobs btf h c jobs j tf h
whose value must charged f h therefore deduce least
btf tf c btf h tf h c btf h c
jobs whose values charged f f h j denote jb
set jobs
note ja jb jobs ja charged f jobs jb charged
f f h therefore deduce number jobs start time contained
least ja jb e
btf c btf tf c btf h tf h c btf h c
tf h btf h c bs c

bs c jobs different recall assume
opt standard hence jobs entirely scheduled e time segments
job allocated claim since length every job least
reach contradiction
according integral charging scheme charges completed job f three
origins corresponding three steps scheme step obviously charge
job f vf calculate maximum total charge step
stated formulation section assume job lengths located simplicity
however scaling proofs easily generalized case lmin lmin
lmin shortest length jobs
step might btf h c jobs j tf h could
charged f h ii step jobs j h could charged f h



fichen hu liu qin tang wang zheng

suppose total number jobs charged f step rename
according claim vj vf j lj lemma used
j tf j j according rule picking jobs step
j j clear sum values jobs
vf


x
j

j lj vf


x

j vf

j


x

j



j

remains calculate maximum total charge step according observation
know number jobs charged f step btf tf c
need bound value job j key build relationship
value value job f however according charging rule step
start time j job j located time interval case cannot
use lemma directly derive inequality vj vf j lj remains
check whether j feasible tf note tf left endpoint time interval
define critical time job tj dj lj prove tj tf
job j must feasible time tf thus applying lemma easily get
vj vf tf tf lj vf tf tf



fortunately following lemma shows tj tf holds
lemma according charging scheme j wf charged completed job
f k k hj critical time job j satisfies tj tf k
proof prove lemma contradiction suppose tj tf k total length
j

jobs whose opt allocation j sj


j

sj

dj j lj dj lj j tj j tf k j

j

lj

j lj



since j charged f k step know jobs f f f k
saturated thus least
btf j c btf tf c btf k tf k c btf k j c
jobs whose start time belongs interval j tf k
recall opt standard hence jobs allocated time segments
first segment last segment job j according claim equation
equation constitute contradiction since every jobs length least
combining analysis know total charge f step
vf assuming
jobs charged f step total charge
pm j
jobs vf j
according equation number jobs charged
f step btf tf c according definition value


fiefficient mechanism design online scheduling

job vf tf tf according equation therefore total charge
f
vf vf


x

btf tf c

j btf tf c vf tf tf vf

j

x

j

j



upper bounded vf
indicating competitive ratio mechanism

upper bounded






segmental charging scheme
j

recall use j j sj

denote starting time time segments allocated

j
j j j

j

job j opt let
denote time segments lj lj lj denote
length
segmental charging scheme segment kj given value j ljk
v
j ljj value density job j describe segmental charging scheme
scheme simplicity refer line type charge line type
charge line type charge
scheme segmental charging scheme










segment kj opt
mechanism completes j deadline
charge value j ljk j
else skj f f j vf j j tf skj

charge value j ljk f
else
charge j ljk f f first job completed time tj
tj critical time job j
end
end

clear type charge received job f vf next bound
type type charges
v

lemma total type charge job f receives lnf
proof let r denote set job segments whose charges f type
kj r charge j ljk line scheme know j vf j
j tf skj thus total type charge
x
kj r

j ljk

vf

x
kj r

j ljk

vf

x z
kj r

j

j ljk



x

z
dx vf




x dx

vf

ln

second inequity holds therefore f receives total type charge
v
lnf


fichen hu liu qin tang wang zheng

following study type charge denote r set job segments
constitute type charges f
first claim satisfies condition get skj skj ljk tf tf
lj tf tf kj r claim
claim satisfies function g x x x x
skj skj ljk tf tf lj kj r
proof prove skj skj ljk tf tf lj need prove inequality
tf skj tf lj ljk



inequality skj tf lj ljk holds skj ljk lj dj lj tj tf
next prove tf skj suppose skj f later might
equal according type charging rule j

vj
lj



vf j

j tf skj
use condition g x x x x

v
v
l
lj j hence ljj vj lj combining two inequalities ljj vf j


vj
lj



vj lj vj lj vf j thus vj vf j lj contradicts fact
f completed tf priority vf lemma used therefore
tf skj
claim know allocation segments p
type charges f
restricted interval tf tf hence derive k r ljk
j

lemma satisfies function g x x x x total

type charge job f receives vf
ln
proof according type charging rule j completed mechanism
consider critical point j e tj time interval applying lemma

v
v
deduce vj lj vf tf tj vf therefore ljj flj bound
lj

total type charge f receives
x
kj r

j ljk

x vj
x vf
x ljk
k
ljk
l

v

f
lj
g lj
lj lj j
k
k
k

j r

j r

note function g lj lj lj increasing lj

lj ln

g lj





lj



ln



j r


ln

lj


ln


ln

decreasing



claim know skj skj ljk tf tf lj tf tf kj r


therefore one hand kj r ln
lj denote set r


fiefficient mechanism design online scheduling

k
kj r lj

hand kj r lj
p

set r b k rb ljk ln


j
becomes



p

x
kj r

x

j ljk vf

kj r

x ljk
x ljk
ljk
vf


g lj
g lj
g lj
k

k
b
j r

p
vf


ln

kj r



ljk

p


kj r b



j r

ljk

vf

means type charge bounded vf
ln

denote




ln










lemmas obtain total charge
job f completed mechanism vf
ln implies

competitive ratio mechanism upper bounded
ln
discussions
advantage mechanism handle settings different values
unified framework need set parameter different values theorem
theorem adapt different settings job lengths shown
following corollaries
corollary setting ln arbitrary small constant


mechanism achieves competitive ratio
ln restart model

competitive ratio



ln

resume model

proof found appendix corollary following
discussions


restart model mechanism achieves competitive ratio
ln




improves upon best known algorithmic log
ting
standard online scheduling without strategic behavior

resume model large mechanism achieves competitive ratio



ln slightly worse obtained restart
model within factor asymptotically speaking near optimal since
competitive ratio order w r lower bound shown
theorem furthermore analysis generalizes obtained durr et
al continuous value time strategic setting
relatively small ratios given corollary become loose
particular approaches ratios infinity since ln
approaches case need different setting see corollary


note function g x x x increasing x ln
decreasing x ln
therefore


need require naturally derive g x x x x



fichen hu liu qin tang wang zheng


corollary choosing
competitive ratio mechanism

e restart model resume model

similarly following discussions
competitive ratio linear since bounded e
particular ratios corollary become
restart resume model matches lower bound given theorem
regard say optimal hand shows
lower bound theorem tight

conclusion future work
studied online scheduling strategic setting summarized table proved restart model resume model
competitive ratio ic mechanism cannot less cannot less
ln large designed simple ic mechanism schedule jobs
single machine proved near optimal approximation guarantees terms
social efficiency restart model resume model competitive
analysis shown table mechanism optimal terms competitive ratio
restart model resume model near optimal
restart model large enough
table summary bounds competitive ratio
restart model
resume model
model

asymptotic

asymptotic


lb ic mech






ln
ln




ub proposed mech




ln
ln
proving lower bounds introduce shadow job argument reflects
ic constraint argument helpful extending bounds non strategic setting
strategic setting second contribution work design several virtual
charging schemes analyze competitive ratio mechanism ideas
virtual charging schemes methodological significance may used address

multiple directions explore future
interesting whether ic competitive mechanism designed
hybrid model exist resumable non resumable jobs many
strategic issues may arise hybrid model example resumable job disguise
non resumable job get better
another open whether tighter competitive analysis made
resume model conjecture competitive ratio obtained

restart model resume model
uniform form
furthermore given popularity cloud computing todays industry
practical importance extend work setting job scheduling multiple heterogeneous machines


fiefficient mechanism design online scheduling

appendix critical value payment
please note critical time point means time
point jobs arrive existing jobs completed
compute critical value payment restart model
job j completed
run without job j let set critical time points
rj dj
every
exists job k x k define ft vk lk ek
else ft
end
every time point rj dj lj

define ft max ft lj
end
let f mint ft
pj f lj
end
compute critical value payment resume model
job j completed
run without job j
let tm set denoted critical time points rj dj
rj
denote period two critical time point zi ti ti

every ti
exists job k x ti k define fti vk lk ek ti
else fti
end
initially h
h lj
arg minti fti ties broken favor smaller ti
initially e

every time point ti satisfies fti ft e
e e zi
ti

add ti h h zi
end
end
let earliest critical time point let arg maxti fti
denote critical time points k
denote relevant periods critical time points z z zk z


pj ft lj z zk
end


fichen hu liu qin tang wang zheng

appendix b example analysis tightness
example b two types jobs long short length long jobs
length short jobs let p large integer number long short
jobs p p respectively first long job j l released time type
l p job jil type il
l
l
long job jp
type p
p p p job jpl type
l
p p p p p small constants satisfying p
meanwhile short jobs follows j p denote
jjs jth short job whose type js j p j p j p
j p
l
verified one job jp
completed mechanism
p
social welfare
optimal solution short jobs
l
l
completed successively social welfare
completed jp jp


p



p p therefore competitive ratio
p
mechanism least p
tends



p

appendix c proof claim
proof suppose optimal allocation opt standard e exist completed job
two segments beginning time sai sci completed job j two segments
beginning time sbj sdj sai sbj sci sdj following process
obtain standard optimal allocation length job js b th segment denote ljb
larger c th segment denote lic exchange c th segment js
b th segment located sbj sbj lic otherwise exchange js b th segment c th
segment located sci lic ljb scj lic segments order remains
unchanged easy see allocation still feasible obtains
social welfare kind exchanges violation obtain
standard optimal allocation

appendix proof corollary
proof every constant c large enough x xc x e
large enough choosing ln
ln ln ln


e ln


ln
taylors theorem know


ln
thus competitive ratio




c ln






ln restart model


ln



c ln ln
ln resume model
respectively



fiefficient mechanism design online scheduling

appendix e multiple machines extension
suppose c identical machines process one job
given time similar work lucier et al assume h
machines allocated single job given time parameter stands
common parallelism bound system
notion preemption specified follow job may processed number
machines h number machines allocated job may fluctuate
number decreases treat job preempted thus notation
preemption restart preemption resume defined accordingly
job j j characterized private type j rj dj sj vj instead lj
use sj denote jobs size e g number machine hours required complete
job without causing confusion let maximum ratio sizes
two jobs maxi jj ssji simplicity assume job sizes fall
jobs identical size otherwise different sizes
e simple case h
case design mechanism single machine mechanism
payment rule exactly allocation rule shown
similar since job processed
one machine mechanism choose c jobs jf highest
priorities vi si ei execute note valid active time job j time
computed
c z
x
ej
xi j ds





p
indicator function arg maxst c
xi j
say treating resumable jobs non resumable jobs simple summarize
theoretical properties theorem e
allocation rule mechanism

jf c
process c jobs highest priorities jf
else process jobs jf
end
theorem e mechanism ic following properties




restart model setting



get competitive ratio


setting
ln arbitrary small get

another competitive ratio ln
resume model setting ln arbitrary small


get competitive ration
ln
theorem following discussions


fichen hu liu qin tang wang zheng

similar done single machine setting restart model
give two competitive ratios small first ratio better
particular competitive ratio becomes thus optimal
according theorem large second ratio better instead
near optimal according theorem
different obtained single machine setting resume
model cannot match lower bound multi machine setting
proof proof theorem e essentially proof single machine
setting virtual charging scheme charge completed job optimal allocation
job completed exactly machine difference
integral charging scheme resume model apply multiple machines
setting use segment charging scheme resume model
e general case h
handle general case design mechanism divides c machines
bc hc equally sized virtual machines consisting h machines treats every
virtual machine single machine performing scheduling virtual
machine used process one job remaining c bc hc h machines
idle
allocation rule mechanism
divide c machines bc hc equal sized virtual machines
run mechanism following modification
capacity bc hc
demand size sj h job j
compared case h setting h imposes flexibilities
optimal offline allocation example job may processed number machines
h optimal allocation might executed exactly
h machines fortunately use similar segmental charging idea h case
resolve challenge get competitive ratio shown following theorem


theorem e mechanism ic competitive ratio
ln

setting
resume model

ln


arbitrary small matter restart model

following discussions theorem setting h
complicated could obtain setting h
particular h divides c idle machine may obtain
competitive ratio setting h however h divide c idle
machines introduce additional factor competitive ratio besides
competitive ratio restart model better resume model
competitive ratio cannot reach


fiefficient mechanism design online scheduling

proof need exists optimal allocation view
jobs resumable jobs optimal allocation time every job
processed exactly h machines machine assuming h divides c
directly use obtained special case h suppose opt optimal
offline allocation j set jobs completed opt j j use
mj denote number machines processing j time opt
divide time intervals tk tk k time interval
tk tk mj change j j allocate jobs
time interval tk tk bc hc virtual machines allocate jobs
one one e previous virtual machine full start allocate jobs
another empty virtual machine tk empty respect tk rtk besides

every job allocated continuously one one size allocation tkk mj dt
easily verified allocation every job j j allocated legitimately
j allocated rj dj processed h machines time
complete deadline since j legitimately completed opt

references
azar ben aroya n devanur n r jain n cloud scheduling setup
cost proceedings twenty fifth annual acm symposium parallelism
architectures pp acm
bar noy guha naor j schieber b approximating throughput
multiple machines real time scheduling siam journal computing

baruah koren g mao mishra b raghunathan rosier l shasha
wang f competitiveness line real time task scheduling realtime systems
baruah k haritsa j sharma n line scheduling maximize task
completions proceedings real time systems symposium pp ieee
borodin el yaniv r online computation competitive analysis vol
cambridge university press cambridge
chin f fung p online scheduling partial job values timesharing randomization help algorithmica
ding j ebenlendr sgall j zhang g online scheduling equal length
jobs parallel machines proceedings th annual european conference
pp springer verlag
ding j zhang g online scheduling hard deadlines parallel machines
algorithmic aspects information management pp springer
durr c jez l nguyen k online scheduling bounded length jobs
maximize throughput journal scheduling


fichen hu liu qin tang wang zheng

ebenlendr sgall j lower bound scheduling unit jobs immediate
decision parallel machines approximation online pp
springer verlag
friedman e j parkes c pricing wifi starbucks issues online mechanism
design proceedings th acm conference electronic commerce pp
acm
goldman parwatikar j suri online scheduling hard deadlines
journal
goldwasser h patience virtue effect slack competitiveness
admission control journal scheduling
hajek b competitiveness line scheduling unit length packets
hard deadlines slotted time proceedings th annual conference
information sciences systems
hajiaghayi kleinberg r mahdian parkes c online auctions
usable goods proceedings th acm conference electronic commerce
pp acm
kolen w lenstra j k papadimitriou c h spieksma f c interval
scheduling survey naval logistics nrl
lavi r nisan n competitive analysis incentive compatible line auctions
theoretical computer science
lavi r nisan n online ascending auctions gradually expiring items
journal economic theory
lipton r j tomkins online interval scheduling proceedings
fifth annual acm siam symposium discrete vol pp
lucier b menache naor j yaniv j efficient online scheduling
deadline sensitive jobs proceedings th acm symposium parallelism
architectures pp acm
w zheng b qin tang p liu online mechanism design cloud
computing corr abs
mashayekhy l nejad grosu vasilakos v incentive compatible
online mechanisms resource provisioning allocation clouds cloud computing cloud ieee th international conference pp ieee
nguyen k improved online scheduling maximizing throughput equal length
jobs computer sciencetheory applications pp springer
nisan n introduction mechanism design computer scientists algorithmic
game theory
nisan n ronen algorithmic mechanism design games economic
behavior
parkes c online mechanisms algorithmic game theory ed n nisan
roughgarden e tardos v vazirani cambridge university press


fiefficient mechanism design online scheduling

porter r mechanism design online real time scheduling proceedings
th acm conference electronic commerce pp acm
ting h f near optimal scheduler demand data broadcasts theoretical
computer science
wu x gu li g tao j chen j x online mechanism design
vms allocation private cloud network parallel computing pp
springer
zaman grosu online mechanism dynamic vm provisioning
allocation clouds th international conference cloud computing cloud
pp ieee
zhang h li b jiang h liu f vasilakos v liu j framework
truthful online auctions cloud computing heterogeneous user demands
proceedings infocom pp ieee
zheng f fung p chan w chin f poon c k wong p w improved line broadcast scheduling deadlines computing combinatorics
pp springer




