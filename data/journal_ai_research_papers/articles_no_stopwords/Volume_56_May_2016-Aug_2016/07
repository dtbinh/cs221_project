Journal Artificial Intelligence Research 56 (2016) 429-461

Submitted 02/16; published 07/16

Efficient Mechanism Design Online Scheduling
Xujin Chen
Xiaodong Hu

xchen@amss.ac.cn
xdhu@amss.ac.cn

AMSS, Chinese Academy Science, Beijing, China

Tie-Yan Liu
Weidong
Tao Qin

tyliu@microsoft.com
weima@microsoft.com
taoqin@microsoft.com

Microsoft Research, Beijing, China

Pingzhong Tang

kenshin@mail.tsinghua.edu.cn

Tsinghua University, Beijing, China

Changjun Wang

wcj@amss.ac.cn

Beijing University Technology, Beijing, China

Bo Zheng

zhengb10@mails.tsinghua.edu.cn

Tsinghua University, Beijing, China

Abstract
paper concerns mechanism design online scheduling strategic setting.
setting, job owned self-interested agent may misreport release
time, deadline, length, value job, need determine
schedule jobs, payment agent. focus design
incentive compatible (IC) mechanisms, study maximization social welfare (i.e.,
aggregated value completed jobs) competitive analysis. first derive two lower
bounds competitive ratio deterministic IC mechanism characterize
landscape research: one bound 5, holds equal-length jobs;
bound ln + 1 o(1), holds unequal-length jobs, maximum ratio
lengths two jobs. propose deterministic IC mechanism show
simple mechanism works well two models: (1) preemption-restart
model, mechanism achieve optimal competitive ratio 5 equal-length jobs
1

near optimal ratio ( (1)
2 + o(1)) ln unequal-length jobs, 0 < < 1
small constant; (2) preemption-resume model, mechanism achieve
optimal competitive ratio 5 equal-length jobs near optimal competitive ratio
(within factor 2) unequal-length jobs.

1. Introduction
Online scheduling widely studied literature (Baruah, Koren, Mao, Mishra,
Raghunathan, Rosier, Shasha, & Wang, 1992; Baruah, Haritsa, & Sharma, 1994; Porter,
2004; Zheng, Fung, Chan, Chin, Poon, & Wong, 2006; Ting, 2008), job characterized release time, deadline, length, value successful completion
deadline. Inspired emerging areas computational economics cloud computing, consider strategic setting online scheduling problem, job
owned self-interested agent may incentive manipulate schedulc
2016
AI Access Foundation. rights reserved.

fiChen, Hu, Liu, Ma, Qin, Tang, Wang & Zheng

ing algorithm order better off. specific, agent may deliberately delay
release time job, inflate length, misreport value deadline.
Given situation, carefully designed online scheduling mechanism needed
regulate strategic behaviors agents (approximately) optimize system
objectives. work, focus maximization social welfare, i.e., total
value completed jobs.1 use competitive analysis (Lavi & Nisan, 2004) evaluate
performance mechanism, compares social welfare implemented
mechanism (without knowledge future jobs) optimal offline
allocation (with knowledge future jobs).
work, consider two scheduling models: preemption-restart model (Ting,
2008) preemption-resume model (Porter, 2004). preempted, jobs first
model restart beginning; jobs second model resume
break point. Since preemption always assumed work, two models
referred restart model resume model, respectively, involved jobs
called non-resumable resumable, respectively.
1.1 Problem Formulation
consider online scheduling models infinite time period = R0 . Suppose
single machine processes one job given time. Jobs come
time, use J denote set jobs. job j J owned self-interested
agent (which denoted j simplicity); characterized private type
j = (rj , dj , lj , vj ) R>0 R>0 , rj release time2 , dj deadline,
lj length (i.e., processing time), vj value job completed
deadline.
resumable job j completed processed lj time units total
release time rj deadline dj , non-resumable job j completed
processed lj consecutive time units release time rj deadline
dj .
Let = maxi,jJ llji maximum ratio lengths two jobs.
simplicity, assume job lengths normalized, i.e., lj [1, ] j J, assume
known advance following practice work Chan et al. (2004) Ting
(2008).
study direct revelation mechanisms, agent participates simply
declaring type job j = (rj , dj , lj , vj ) time rj . use denote profile
reported types agents. Given declared types agents, mechanism
used schedule/allocate jobs determine payment agent.
consider reasonable mechanisms (1) schedule job reported
deadline (2) schedule job processed reported length.
Given certain mechanism job sequence , use qj (, t) denote whether
job j completed time (if completed, qj (, t) = 1; otherwise qj (, t) = 0).
1. referred weighted throughput scheduling literature.
2. Note release time referred arrival time online auction literature (Parkes, 2007).
earliest time agent full knowledge job. Thus earliest time job
available scheduling process.

430

fiEfficient Mechanism Design Online Scheduling

value agent j extracts mechanism represented qj (, dj )vj ,
P
social welfare mechanism represented W (M, ) = j qj (, dj )vj .
Let pj () denote amount money mechanism charges agent j. assume agents quasi-linear preferences (Nisan, 2007), i.e., utility agent j
uj (, j ) = qj (, dj )vj pj ().
Since agents self-interested, may misreport types strategic way.
easy see misreport shorter length dominated strategy; otherwise,
job cannot completed even scheduled mechanism (since lj < lj ). Therefore,
agents underreport lengths jobs. Similar work Porter
(2004), assume system return completed job agent j dj .3
way, restrict agents report dj dj . addition, assume agent
knowledge job release time, rj rj .
Considering potential misreport agents, concerned incentive
compatible individually rational mechanisms. mechanism incentive compatible
(IC) if, agent j, regardless behaviors agents, truthful reporting
type maximizes utility. mechanism individually rational (IR)
job j, truthful reporting leads non-negative utility. addition, would
mechanism (approximately) maximize social welfare. say mechanism (strictly)
c-competitive exist job sequence c W (M, ) < W (opt, ),
opt denotes optimal offline mechanism4 . Sometimes say
competitive ratio c.
1.2 Related Work
online scheduling problem studied non-strategic setting (Lipton &
Tomkins, 1994; Borodin & El-Yaniv, 1998; Bar-Noy, Guha, Naor, & Schieber, 2001; Zheng
et al., 2006; Kolen, Lenstra, Papadimitriou, & Spieksma, 2007; Ting, 2008; Nguyen, 2011)
(whose focus algorithm design) strategic setting (Nisan & Ronen, 2001; Lavi &
Nisan, 2004; Friedman & Parkes, 2003; Porter, 2004; Hajiaghayi, Kleinberg, Mahdian, &
Parkes, 2005; Parkes, 2007) (whose focus mechanism design).
Non-strategic setting. case = 1, lower bound 4 competitive
ratio deterministic algorithm given Woeginger (1994). 4.56-competitive
deterministic algorithm constructed Zheng et al. (2006) restart model,
4.24-competitive deterministic algorithm designed Kim (2011) restart
resume models. 2-competitive randomized algorithm introduced restart model
work Fung et al. (2014), lower bound 1.693 provided work Epstein
Levin (2010). restricting release time deadlines integers, randomized
e
algorithm competitive ratio e1
1.582 proposed Chin et al. (2006),

deterministic algorithm competitive ratio 2 2 1 1.828 proposed Englert et
3. Actually, viewed decision mechanism designer rather assumption.
decision crucial ensure incentive compatibility see later.
4. Since care social welfare performance opt competitive analysis,
depends schedule, regardless payments, call opt optimal offline allocation,
simply optimal allocation.

431

fiChen, Hu, Liu, Ma, Qin, Tang, Wang & Zheng

al. (2012). best lower bounds currently 1.25 randomized algorithms (Chin &
Fung, 2003) 1.618 deterministic algorithms (Hajek, 2001).

general values , lower bound competitive ratio deterministic
algorithm derived work Chan et al. (2004). lower bound improved

6
5/6 )
2 ln 1 Ting Fung (2008), algorithm competitive ratio log + O(
given restart model. scheduling problem discrete time considered
work Durr, Jez Nguyen (2012). particular, lower bound improved


model.
ln o(1), (3 + o(1)) ln -competitive algorithm designed resume q
randomized algorithm competitive ratio O(log()) lower bound ( logloglog )
provided Canetti Irani (1998).
Assuming maximum ratio value densities (value divided length)

two jobs bounded known number , (1 + )2 -competitive algorithm

given Koren Shasha (1995). bound (1 + )2 optimal matching lower
bound given Baruah et al. (1992).
rich literature concerned non-preemptive scheduling (Lipton &
Tomkins, 1994; Goldman, Parwatikar, & Suri, 2000; Goldwasser, 2003; Ding & Zhang,
2006; Ding, Ebenlendr, Sgall, & Zhang, 2007; Ebenlendr & Sgall, 2009). However,
easily verified algorithm bounded competitive ratio cannot designed
setting unrestricted values arbitrary release time. Therefore, common
assumption added non-preemptive scheduling problem proportional values, i.e.,
value job proportional length. work Goldman et al. (2000),
tight upper lower bound 2 given deterministic competitiveness
jobs equal length (thus, equal value), 6(blog2 c + 1)-competitive randomized
algorithm provided general value , matching (log ) lower bound (Lipton &
Tomkins, 1994) within constant factor.
Strategic setting. work Lavi Nisan (2015), assuming integer time
points, scheduling problem = 1 case studied. authors show
incentive compatible mechanism obtain constant competitive ratio,
payment must made job completed. Hence, propose family
semi-myopic algorithms competitive ratio 3, assumption semi-myopic
strategies. work Hajiaghayi et al. (2005), specific scheduling problem
= 1 considered restart model. deterministic IC mechanism competitive
ratio 5 designed, lower bound 2 given deterministic IC mechanism.
However, knowledge, case > 1 either restart model resume model
studied perspective mechanism design (considering incentive
issues). work fills gap.
Assuming maximum ratio value densities (value divided length)
two jobs bounded known number , IC mechanism competitive


ratio (1 + )2 + 1 designed Porter (2004), proved (1 + )2 + 1
lower bound competitive ratio deterministic mechanism.
Recently, online scheduling mechanisms investigated cloud computing (Zaman & Grosu, 2012; Azar, Ben-Aroya, Devanur, & Jain, 2013; Zhang, Li, Jiang, Liu,
Vasilakos, & Liu, 2013; Lucier, Menache, Naor, & Yaniv, 2013; Mashayekhy, Nejad, Grosu,
& Vasilakos, 2014; Wu, Gu, Li, Tao, Chen, & Ma, 2014). works, mechanisms
432

fiEfficient Mechanism Design Online Scheduling

designed allocate computational resources users, users use virtual machines entire period requested. model, jobs non-preemptive,
differs setting.
1.3 Results
main results summarized follows.
First, order characterize boundary research, derive two lower bounds
competitive ratio online deterministic IC mechanism. One bound 5,
holds situation jobs equal length (i.e., = 1). bound
improves previous lower bound 2 (Hajiaghayi et al., 2005). bound

ln + 1 o(1), characterizes asymptotical property competitive ratio
variance job lengths, i.e., , sufficiently large.
Second, design simple mechanism 1 prove restart resume
models 1 IC, achieves good social welfare.
restart model, 1 competitive ratio + 2 + (1 + 1 ) small (in
1

particular, ratio 5 = 1), ( (1)
2 + o(1)) ln large ( 16
enough), 0 < < 1 small constant.
resume model, 1 competitive ratio ( + 1)(1 + 1 ) + 1
2

small (in particular, ratio 5 = 1), ( (1)
2 + o(1)) ln large
( 16 enough), slightly worse restart model (within
factor 2).
worth mentioning that:
Comparing lower bounds, see that, restart resume
models, 1 optimal equal-length jobs ( = 1), near optimal (within
constant factor) unequal-length jobs.
comparison best-known algorithms without considering incentive compat5
6
6
ibility, asymptotically speaking, 1 improves best-known ratio log
+O( ) (Ting,
1

2008) restart model ( (1)
2 + o(1)) ln ; improves best-known ratio
2

(3+o(1)) ln (Durr, Jez, & Nguyen, 2012) resume model ( (1)
2 +o(1)) ln .
Thus even one care strategic aspect, 1 would still
nice algorithm use.

Note designing mechanisms online scheduling problems generally difficult
since combines challenges mechanism design (i.e., ensuring incentive compatibility)
challenges online algorithms (i.e., dealing uncertainty future inputs).
would highlight main techniques used work tackle challenges.
(1) allocation rule mechanism 1 uses carefully selected function trade-off
three key elements: value, length, degree completion. trade-off function
delicate sense ensures efficiency monotonicity
crucial incentive compatibility.
433

fiChen, Hu, Liu, Ma, Qin, Tang, Wang & Zheng

(2) order obtain good competitive ratios resume model, design two nontrivial virtual charging schemes bound performance proposed mechanism:
integral charging scheme segmental charging scheme.
focus single machine model paper, work extends multiple
identical machines. One way extension similar work Lucier et al. (2013),
assumed h machines allocated job given
time, parameter h stands common parallelism bound system.
details extension found Appendix E. Another way extend results
multiple identical machines assume job j needs fixed number machines
processed. Please refer working paper (Ma, Zheng, Qin, Tang, & Liu,
2014) details.5

2. Lower Bounds
section, present two lower bounds competitive ratio deterministic
IC mechanism, hold restart resume models.
competitive analysis interpreted game designer online
mechanism adversary. Given mechanism 1 , adversary selects sequence
jobs maximizes competitive ratio, ratio social welfare obtained
offline optimal algorithm social welfare obtained 1 . Therefore, key
proving lower bounds construct subtle adversary behaviors.
first introduce two notions, dominant job shadow job.
Definition 2.1 (Dominant Job). deterministic IC mechanism competitive
ratio c, job called dominant job release time ri , vi larger
c times total value jobs whose release time later ri .
easy see that, order obtain reasonable competitive ratio, dominant job
tight deadline, mechanism must schedule release time ri . Otherwise,
consider case jobs released ri . case, mechanism
cannot obtain competitive ratio c gives dominant job i.
Definition 2.2 (Shadow Job). Suppose job tight deadline, i.e., di = ri + li ,
job i0 called shadow job i, i0 parameters (ri , li , vi ) i, except
later deadline (d0i > di ).
Clearly, shadow job i0 flexible completed later. shadow
jobs, show following lemma holds IC mechanism non-trivial
competitive ratio.
Lemma 2.3 (Shadow Job Argument). deterministic IC mechanism
non-trivial competitive ratio c, completes job (with tight deadline di )
scenario I, scenario 0 , substitutes shadow job i0 job i, must
complete job i0 time di .
5. working paper, consider restart model, ignore misreport release time
deadline.

434

fiEfficient Mechanism Design Online Scheduling

Proof. Suppose completed job i0 di scenario 0 , could consider subsidiary scenario 00 , includes jobs scenario 0 adds several dominant jobs.
Remember call job dominant value sufficiently large (see Definition 2.1).
dominant jobs released one one di , di + 1, . . . , di + bd0i di c respectively,
denoted 0, 1, . . . , bd0i di c accordingly, di deadline job d0i
deadline shadow job i0 . Whats more, dominant jobs unit length
tight deadline. claim that, achieve desired (non-trivial) competitive ratio,
must complete dominant jobs, thus time interval [di , d0i ) occupied. (The
reason follows: schedule dominant job j {0, 1, . . . , bd0i di c},
consider scenario 000 , includes jobs release time later di + j
00 . Since scenario 000 indistinguishable 00 time di + j, know
schedule dominant job j scenario 000 , hence cannot obtain competitive ratio c.)
subsidiary scenario 00 indistinguishable scenario 0 time di ,
job i0 completed di . Furthermore, existence dominant jobs,
job i0 completed finally. However, job i0 falsely declares type
job i, i.e., misreports deadline di , would completed time
di better off, contradicting incentive compatibility6 .
following, derive lower bounds leveraging Lemma 2.3. First, following
theorem specifies lower bound jobs equal length (i.e., = 1). Note
result concerns strategic setting, Woeginger (1994) shows competitive
ratio deterministic algorithm non-strategic setting least 4.
Theorem 2.4. = 1, deterministic IC mechanism obtain competitive ratio
less 5.
prove theorem, addition using adversary argument similar
work Woeginger (1994), need perturb job sequence leverage
shadow job argument.
Intuitively, construct special job set, tight-deadline jobs released one
one, two jobs collide (that is, deadline one job later
release time other, mechanism, impossible two jobs
completed). values jobs carefully selected later released
job valuable earlier one (predecessor), value difference
two neighboring jobs constrained small-enough additive constant. Furthermore,
job set, values first last jobs set obey specific amplification.
Along execution mechanism, adversary would release series job
sets. mechanism completes one job, adversary stops releasing job.
subtleness lies choosing time release job sets: mechanism almost
completes job job set, adversary may release new job set whose jobs
collide job collide predecessor job a. way,
mechanism would abandon current job complete it,
optimal allocation completes: (1) several jobs previous job sets, (2)
6. scenario contradicts monotonicity condition (see strict definition start Section 3.2);
Theorem 1.15 work Parkes (2007) shows monotonicity necessary incentive
compatibility.

435

fiChen, Hu, Liu, Ma, Qin, Tang, Wang & Zheng

valuable job (i.e., last job) newly released job set, (3) job a.7 However,
mechanism complete job a. discrepancy leads lower bound
competitive ratio. detailed proof found below.




SET
r1




vq = w




v2
v1 = v



Figure 1: Structure SET (v, w, t, )
Proof. Suppose contradiction exists deterministic IC mechanism
achieves competitive ratio 5 0 < < 1. adopt notation SET
introduced Woeginger (1994). Define SET (v, w, t, ) (for w v > 0, > 0 > 0)
set jobs {1, 2, . . . , q} satisfying following properties:
(1) v1 = v, vq = w, vj < vj+1 vj + 1 j q 1. Hence, q integer
less wv
e. call magnifying parameter SET .
(2) lj = dj rj = 1, j, i.e., jobs unit-length tight deadlines.
(3) 0 r1 < < rq < < d1 < < dq , thus, two jobs collide other.
call split point SET .
define release time SET release time first job. Figure 1 shows
visual structure SET (v, w, t, ). adversary behavior follows.
Adversary Behavior: adversary release SET one another depending
. First, SET0 = SET (1, , 1/2, ) released time 0, = 4 /2 < /4.
definition SET , know first job SET0 value 1, last job
SET0 value , value difference two neighboring jobs upper
bounded .
Next, specify: (1) adversary release new SETi (i 1), (2)
adversary sets parameters SETi (i 1). (1), specify Algorithm 1.
notations used Algorithm 1 detailed Table 1.
7. proof, construct new scenario, job perturbed later deadline, thus
completed later. make use shadow job argument analysis, makes lower
bound increased 1, compared previous lower bound non-strategic setting.

436

fiEfficient Mechanism Design Online Scheduling

SETi
job ij
rij , dij vij
wi
ti

job
job

Table 1: Summary notation proof Theorem 2.4
i-th released SET , full, SET (vi1 , wi , ti , )
j-th job SETi .
release time, deadline value job ij.
value last job SETi
split point SETi
magnifying parameter SETi
trigger job SETi1
preceding job SETi1

Algorithm 1: Adversary Behavior
1: Initial: Release SET0 time 0.
2: completed job,
3:
almost completes j-th job (j 2) SETi (Precisely, executing
job ij di(j1) rij period time since rij ).
4:
Release SETi+1 time di(j1) .
5:
else
6:
release job.
7:
end
8: end
worth mentioning that: (i) SETi+1 triggered non-first job SETi
almost completed, call job trigger job. (ii) SET released
job completed .
Suppose trigger jobs SET0 , . . . , SETi1 named 1 , . . . , successively. Accordingly, denote job release time earlier trigger job 1, . . . , i,
call preceding jobs. Line 4 Algorithm 1, know new SETi
released deadline i. Note trigger job preceding job
located SETi1 .
specify parameters SETi = SET (vi1 , wi , ti , ), 1. Remember
SET0 defined SET (1, , 1/2, ), = 4 /2 < /4.
adversary sets vi1 equal value trigger job SETi1 ,
vi = vi1 . Note vi1 value first job SETi .
Pi1
adversary sets = /2i , wi = max{( 1)vi1 j=1
vj1 , vi1 } 2,
w1 = ( 1)v11 .
adversary sets ti = (di + di )/2, di di deadlines trigger job
preceding job i. Note setting ti = (di + di )/2, jobs SETi
released di di . Hence, new jobs collide trigger job
none collides job i.
Figure 2 illustrates adversary releases new SET example.
example, almost completes j-th job (j 2) SETi . SETi+1 released
deadline job i(j 1), value first job SETi+1 equal vij .
437

fiChen, Hu, Liu, Ma, Qin, Tang, Wang & Zheng





ri1




SETi




vi1

SETi+1


vij
vi(j1)



v(i+1)1 = vij

ti+1
Figure 2: example SETi+1 SETi

According Algorithm 1, always gives trigger jobs switches schedule
job newly released SET , adversary release new SET one another.
One may wonder whether adversary release new SET infinitely. words,
subscript SETi tend infinity?
answer no, seen definition wi . Since 2 < < 4,
Lemma 4.3 work Woeginger (1994), finite numberP(denote k) steps, vk1
must less corresponding sum term ( 1)vk1 k1
j=1 vj1 , wk = vk1
must hold. Remember vk1 wk denote value first job last job SETk
respectively, thus exists one job SETk . According Algorithm 1, matter
whether completes job not, adversary release job. Therefore,
SETk ultimate SET job k1 ultimate job.
far, clarified adversarys behaviors. Next, show derive
lower bound based adversary.
According Algorithm 1 structure SET , know adversary allows
complete one job. Actually, completed job be: (1) first job SET0
(i.e., job 01); (2) trigger job , 1 k; first job SETi , 1 < k (i.e., job
i1); (3) ultimate job k1. Let us analyze one one.
(1) completes job 01, consider scenario job 01 substituted
shadow job 010 , whose deadline late enough (i.e., even started executed
deadline last job SET0 , still completed time). According
Lemma 2.3, mechanism must complete job 010 time 1, thus abandon
last job (with value w0 = ) SET0 . Therefore, obtains social welfare
v01 = 1. However, optimal allocation (which first completes last job SET0
job 010 ) obtains social welfare + 1. contradicts fact
competitive ratio 5 , since + 1 = (4 /2) + 1 > 5 .
(2) completes trigger job job i1, 1 k, without loss generality,
denote job job ij, know vij = vi = vi1 . completes job ij,
1 k, similarly, consider scenario job ij substituted
shadow job (ij)0 , whose deadline late enough. Lemma 2.3, must complete
job (ij)0 time dij , obtaining social welfare vij = vi = vi1 . However, social
welfare optimal allocation
P(which completes jobs
P1, . . . , i, last job SETi ,
job (ij)0 ) least ij=1 vj + wi + vij > ij=1 (vj1 j1 ) + wi + vij >
438

fiEfficient Mechanism Design Online Scheduling

P
2 + ( 1)vi1 i1
j=1 vj1 + vij > ( + 1)vi1 /2 > (5 )vi1 .
contradicts fact competitive ratio 5 .

Pi

j=1 vj1

(3) completes ultimate job k1, consider scenario adversary
releases two copies job k1 SETk . Clearly, scenario, choose one
copy complete. denote completed copy job (k1)1 job
(k1)2 . consider scenario job (k1)1 substituted shadow job
(k1)0 , whose deadline unit-time later job k1. According Lemma 2.3,
must complete job (k1)0 dk1 obtains social welfare vk1 . However,
0
optimal allocation (which completes
Pk jobs 1, . . . , k, job (k1)
Pk 2 , job (k1) )
obtain social welfare least j=1 vj + vk1 + vk1 > j=1 (vj1 j1 ) + wk + vk1 >
Pk
Pk1
j=1 vj1 + vk1 > ( + 1)vk1 /2 > (5 )vk1 . Remember
j=1 vj 2 + ( 1)vk1
P
SETk , vk1 = wk = ( 1)vk1 k1
j=1 vj1 . contradicts fact
competitive ratio 5 .

Second, understand asymptotic property lower bound large,
construct scenarios inspired example Durr et al. (2012) obtain following
theorem.
Theorem 2.5. sufficiently large, deterministic IC mechanism obtain
competitive ratio less ln + 1 o(1). particular, deterministic IC mechanism
obtain competitive ratio less ln + 0.94 16.
Proof. convenience analysis, denote =
Let us consider following adversary behaviors.


ln ,

r = de 1, assume 16.

Adversary Behavior: time 0, long job B type B = (0, , , ) released,
well two short jobs a1 a1 type (0, 1, 1, 1). Moreover, integer
moment 0 1, mechanism schedules job B [0, t), two short jobs
at+1 at+1 unit length released t, tight deadline + 1, new job
released otherwise. values jobs satisfy:
(
1
< ,
v(at ) = v(at ) =
(1)

1
e
.
Note job job type, cases analyzed at0
naturally applied at0 .
According adversary behavior, know adversary allows complete
one job. Actually, completed job be: (1) job at0 t0 < ; (2) job at0
t0 ; (3) job B. analyze three cases follows.
(1) mechanism schedules job at0 t0 < , consider scenario
includes jobs B, a1 , a1 , . . . , at0 1 , at0 1 , at0 job a0t0 . Here, job a0t0 type (t0
1, + 1, 1, 1), shadow job at0 . According Lemma 2.3, mechanism must
complete job a0t0 t0 obtains social welfare 1. However, scenario,
optimal mechanism complete job B first, schedule a0t0 time
complete it, optimal social welfare + 1. ratio + 1.
439

fiChen, Hu, Liu, Ma, Qin, Tang, Wang & Zheng

(2) mechanism schedules job at0 t0 , consider scenario
includes jobs B, a1 , a1 , . . . , at0 1 , at0 1 , at0 , job a0t0 . Here, job a0t0 type (t0
1, t0 + 1, 1, et0 /1 ), shadow job at0 . According Lemma 2.3, mechanism
schedule job a0t0 time t0 complete a0t0 . Thus, mechanism
obtains social welfare v(a0t0 ). However, one optimal mechanisms
schedule complete jobs = 1, . . . , t0 , schedule a0t0 time t0
complete it, resulting following optimal social welfare
t0
X

de 1 +

e


1


+e

t0
1


=r+

t0
X

e


1


+e

t0
1


Z

t0

r



t0

e 1 + e 1

r

t=r+1

t=de

t0

r+

t0

=r e 1 + ( + 1)e 1 = f (, r) + ( + 1)e 1 = f (, r) + ( + 1)v(a0t0 ).
r

Here, introduced function f defined f (, r) r e 1 . Considering
= ln r = 1, r (0, 1]. ex 1 + x sides converge
1 x approaches 0,
r

f (, r) = r e 1 r

r
= 0,


(2)

f (, r) approaches 0 grows. ratio + 1 o(1).
(3) mechanism schedules completes job B, obtaining social welfare ,
consider scenario includes jobs a1 , a1 , . . . , , job B 0 . Here, job
B 0 type B 0 = (0, 2, , ), shadow job B. Similarly, claim
IC mechanism schedule job B 0 time 0 complete time . Thus,
mechanism obtains social welfare v(B 0 ). However, one optimal
mechanisms schedule complete small jobs = 0 1,
schedule complete job B 0 . leads social welfare least
Z


X
X



1
1
de 1 +
e + = r +
e 1 +
e + r +
r

t=r+1

t=de
r
1



1



1


+ e
+ = f (, r) + e
+ = f (, r) + eln 1 +

ln
ln
=f (, r) + + = f (, r) + 2
+ = f (, r) + (
+ 1)v(B 0 ).
e
e
e
=r e

(3)

16, e ln . equation larger f (, r) +
( + 1)v(B 0 ). Therefore ratio + 1 o(1).
Combining three cases together, prove nonexistence ( ln + 1 o(1))competitive mechanisms. Since f (, r) 0.06 16, competitive ratio
least ln + 0.94 16.

3. Mechanism Design
section, describe simple mechanism 1 (whose allocation payment rules
given Algorithm 2), works surprisingly well restart resume
440

fiEfficient Mechanism Design Online Scheduling

models, handles settings different values unified framework.
contrast, previous works (Durr et al., 2012) need design separate different
algorithms deal different values .
3.1 Mechanism 1
introducing mechanism, first introduce concept valid active time
uncompleted job j, time t, denoted

(
min{s|x(t0 ) = j, t0 [s, t)}, restart model
ej (t) := R
resume model
0 (x(s) = j)ds,

(4)

x(t) mechanisms allocation function, maps time point available job, 0 machine idle.8 () indicator function returns 1
argument true, zero otherwise. Note ej () take vector
argument. example, ej (, t) shorthand ej (t) job sequence .
seen restart model, time t, job j received allocation
time t0 < preempted that, ej (t) = t0 . resume
model, ej (t) accumulated processing time job j time t.
say job j feasible time (1) reported release time t; (2)
completed yet; (3) enough time completed reported
deadline, i.e., dj lj ej (t). use JF (t) denote set feasible jobs time
t.
According Algorithm 2, time t, 1 assigns priority score, vj lj ej (,t) ,
feasible job j JF (t), always processes feasible job highest
priority (ties broken favor job smaller rj ). located (0, 1)
determined later competitive analysis. payment rule 1
essentially critical-value payment (Parkes, 2007), similar secondprice auction. Hence, payment equal minimum bid agents make
remain allocated.9 following pseudocode, j denotes reported types jobs
j.

8. Equation 4, since s=t valid candidate minimization, exist s, s.t.,
x(t0 ) = j, t0 [s, t) restart model, ej (t) = 0.
9. Note use critical-value payment, payment completed job j depends
jobs types rj dj . mechanism allows returning completed job reported
deadline, calculation critical-value payment face trouble: possible agent j misreports
much later deadline obtain cheaper payment, job completed returned
true deadline. reason restrict mechanism return completed job reported
deadline. worth mentioning that, payment must made job completed, (Lavi
& Nisan, 2015) shown incentive compatible mechanism obtain constant
competitive ratio.

441

fiChen, Hu, Liu, Ma, Qin, Tang, Wang & Zheng

Algorithm 2:
Allocation Rule
time
JF (t) 6=
x(t) arg maxjJF (t) (vj lj ej (,t) )
else x(t) 0
end
Payment Rule
job j
qj (, dj ) = 1
pj () = min(v 0 |qj (((rj , dj , lj , v 0 ), j ), dj ) = 1)
j

j

else pj () = 0
end
intuition mechanism two-fold. First, ensure efficiency, one must trade
value length: job larger value higher priority, job larger
remaining length lower priority. 1 uses simple priority function achieve
tradeoff: seen, priority score vj lj ej (,t) job positively correlated
value negatively correlated remaining length. Second, ensure IC,
1 uses critical-value payment rule monotone10 allocation rule.
Note allocation rule payment rule implemented efficiently.
allocation rule, enough consider time point new jobs arrive
existing jobs completed. And, give algorithms Appendix show
payment agent computed polynomial time.
Clearly, critical-value payment rule, 1 individually rational.
following subsection, prove incentive compatibility.
3.2 Incentive Compatibility
call allocation rule mechanism monotone, job truthfully reported type
j = (rj , dj , lj , vj ) cannot completed mechanism, dominated11 declaration
type j = (rj , dj , lj , vj ) cannot make completed either.
According Theorem 1.13 work Parkes (2007), order establish
truthfulness mechanism, enough prove monotonicity allocation rule.
Theorem 3.1. Mechanism 1 incentive compatible, restart model resume
model.
Proof. prove monotonicity allocation rule 1 . Assume job j
completed 1 j truthfully declared (we denote case rue).
show j cannot completed either declaring j = (rj , dj , lj , vj ), rj rj ,
lj lj , dj dj vj vj . denote case F alse.
Suppose job j ever executed k > 0 times rue case, define
following points execution job j: let tsi tpi ith time job j starts
10. strict definition monotonicity start Section 3.2.
11. say type j dominated type j (denoted j j ) rj rj , dj dj ,
lj lj vj vj .

442

fiEfficient Mechanism Design Online Scheduling

execution preempted respectively, = 1, 2, . . . , k, let ta = arg inf (ej (t) +
dj < lj ) time job j abandoned. job j never started, set
ts1 = tp1 = ta .
refer P = [rj , ts1 ) [tp1 , ts2 ) . . . [tpk , ta ] = P0 P1 . . . Pk pending period
job j, = [ts1 , tp1 ) [ts2 , tp2 ) . . . [tsk , tpk ) = A1 A2 . . . Ak executing period
job j.
first consider monotonicity regard rj , regardless variables. Clearly,
definition ta , declaring rj > ta could cause job completed. Thus,
restrict attention rj [rj , ta ] = P A.
necessary condition job j completed (in F alse) job j
executed sometime period P . However, according Lemma 3.2 (see below), job j
cannot executed P . Therefore, declaring rj rj cannot cause job completed.
Intuitively, Lemma 3.2 says that, case rue F alse, set jobs
scheduled period P must same. Thus, job j cannot executed period P .
consider dj , lj vj . proof essentially proof rj :
declaring dj dj , lj lj vj vj improve job js priority, result,
cannot change execution jobs pending period P . declaring dj dj ,
lj lj vj vj cannot cause job completed. proves allocation
rule 1 monotone.
following, formally introduce Lemma 3.2, used theorem.
lemma introduce additional notation: case rue F alse, denote
J J respectively set jobs ever executed P , denote
respectively set jobs ever pending A.
Lemma 3.2. (1) J = , (2) J = , (3) J = J.
Proof. Consider job I, according defintion I, case rue, job
lower priority job j period P .
Relation (1) means that, case rue, job cannot executed period P .
obvious, since job j (with higher priority i) pending period P .
Relation (2) means that, case F alse, job cannot executed period P either.
prove contradiction. Suppose job executed time point P .
denote ti = min{t P |x(t) = i}, assume ti Pn 0 n k. observation
pending period Pn , 0 n k.
h(n)

Observation 3.3. pending period Pn , 1 schedules jobs sequence12 jn1 . . . jn
(h(n) 1, number active jobs Pn ) case rue, know (1)
h(n)
release time job jn2 . . . jn period Pn ; particular, release time job
h(n)
jn1 Pn (n 1) exactly time tpn (2) job jn1 . . . jn either completed abandoned
Pn ; idle time Pn .
Here, use fj (t) denote priority job j time t. Suppose that, case
h(n)
rue, job jni (one jn1 . . . jn ) executed ti , priority fjni (ti ).
12. job may appear sequence preempted resumed/restarted later.

443

fiChen, Hu, Liu, Ma, Qin, Tang, Wang & Zheng

case F alse, since executed ti , according Observation 3.3, deduce
priority job time ti , i.e., (ti ) must larger fjni (ti ).
Therefore, deduce must executed sometime period Ui =
(A1 . . .An ). Otherwise, executed time ti case rue, contradicting
fact I. Similarly, denote si = min{t Ui |x(t) = i}, assume si
1 n.
claim, case F alse, priority job time si , i.e., (si ) satisfies
inequality below.
(
p
fjni (ti ) |An |+|An1 |++|Am+1 |+|tm si | ,
(si ) >
p
fjni (ti ) |tm si | ,

n 1;
= n.

Otherwise, priority job time ti fjni (ti ) (consider case
periods [si , tpm ), Am+1 , . . . , An1 , allocated i).
According definition si , know si first time executed period
A. Therefore, priority job si remains shifting case rue
case F alse. However, case rue, job j executed time si (hence,
priority larger (si )), periods [si , tpm ), Am+1 , . . . , An1 , allocated
j. Therefore, time ti , job j priority larger fjni (ti ), contradicting fact
jni executed time ti .
Relation (3) means that, matter case rue case F alse, jobs executed
period P same. Relation (3) derived naturally Relation (2).

4. Competitive Analysis
section, show mechanism 1 performs quite well terms social welfare
comparison optimal offline allocation, full knowledge future
jobs beginning execution.
perform competitive analysis, need design virtual charging schemes.
certain virtual charging scheme, every job j completed optimal allocation opt,
charge value (or partial value) job f completed 1 . virtual charging
scheme satisfies property every job f completed 1 receives total charge
cvf , succeed showing 1 competitive ratio c.
Designing ingenious virtual charging scheme crucial competitive analysis.
following, design different virtual charging schemes obtain competitive
ratio 1 restart model resume model respectively.
use parameter priority function mechanism 1 , first derive
competitive ratios functions . specify later (in Section 4.3) choose
suitable (with respect ) optimize performance 1 , derive competitive
ratios terms .
Here, introduce notation used Section 4.1 Section 4.2.
Denote (1, 2, . . . , F ) sequence jobs completed 1 time. job f
sequence, let tf time job f completed, convenience denote t0 = 0.
Divide time F + 1 intervals = [tf 1 , tf ), f = 1, 2, . . . , F , [tF , +).
444

fiEfficient Mechanism Design Online Scheduling

4.1 Analysis Restart Model
study restart model first. assume, without loss generality, optimal
allocation opt interrupt allocation, since interrupted jobs non-resumable.
following theorem.
Theorem 4.1. restart model, 1 competitive ratio

1
1

+

1


+ 1.

Proof. introduce virtual charging scheme follows. completed job j
opt, completed mechanism 1 , value charged itself.
Otherwise (i.e., job j completed 1 ), consider time sj j begins
execution opt. Note opt interrupt allocation, j exactly allocated
time period [sj , sj + lj ). sj must time interval (recall = [tf 1 , tf )),
charge value j f . Define j := tf sj time amount sj
tf . job j feasible time sj , according Lemma 4.2, know priority
jobs j time sj vf tf sj = vf j ; meanwhile, priority j time
sj vj lj . vj lj vf j , i,e., vj vf j lj . defer formal statement
proof Lemma 4.2 end subsection.
calculate maximum total value charged completed job f 1 .
time interval , denote (1, 2, . . . , m), sequence jobs opt whose starting time sj
belongs ordered s1 > s2 > > sm . Remember define j := tf sj
time amount sj tf . clear 0 < 1 < 2 < <
j lj j1 2 j m, since j allocated completed time interval
[sj , sj1 ]. Furthermore, job lengths normalized, i.e., 1 lj , deduce
that:
(
0
j = 1
j
(5)
j 1 j 2.
Recall < 1 P
f may completed opt. Therefore total charge
job f vf +
j=1 vj , upper bounded
vf + vf


X
j=1



j lj

vf (1 +

l1

+


X



j1

) vf (1 +

l1

+

j=1

j=2

1
+
shows mechanism 1 ( 1

m1
X

1


j

) vf (1 +



+


X
j=0

+ 1)-competitive.

1
Actually, competitive ratio obtained way tight, i.e., ratio 1
+ 1 + 1
best possible 1 . give example Appendix B show tightness.

Lemma 4.2. time point sj , job j (6= f ) feasible time sj ,
priority j sj vf tf sj . Moreover, value j, vj , vf tf sj lj .
Proof. Note that, sj time interval , according definition , know
f unique job completed 1 . prove lemma
enumerating possible cases.
(1) executing job sj job f , know priority job f time
sj exactly vf tf sj (because priority job f time tf vf ). Clearly, priority
j sj larger job f , thus larger vf tf sj .
445

j ).

fiChen, Hu, Liu, Ma, Qin, Tang, Wang & Zheng

(2) executing job sj job f , assume 1 executes job j1 , . . . , jk
f successively13 time period [sj , tf ), k 1. Since f unique job
completed , deduce that: j1 preempted j2 , j2 preempted j3 ,...,jk
preempted f , finally f completed time tf . Denote 1 , . . . , k time points
j1 , . . . , jk preempted respectively. denote fj (t) priority job
j time t. use backward induction: First, know priority job jk
k larger job f , i.e., fjk (k ) vf tf k . Then, since jk1 preempted
jk k1 , know priority jk1 k1 larger jk .
Hence, fjk1 (k1 ) fjk (k1 ) = fjk (k ) k k1 vf tf k1 . eventually,
get fj1 (1 ) vf tf t1 . Since j1 executed time sj , deduce
fj1 (sj ) vf tf sj . Clearly, priority j time sj (i.e., vj lj ) larger
j1 , thus larger vf tf sj .
arranging vj lj ej (sj ) vf tf sj , get vj vf tf sj lj +ej (sj ) vf tf sj lj ,
ej (sj ) 0 valid active time job j time sj .
remarks Lemma 4.2: (1) f unique job completed 1
time interval , priorities executing jobs monotonically increase . (2)
Lemma 4.2 applies restart model resume model. (3) Lemma 4.2 provides
useful tool relate priority feasible job (j) time point (sj )
completed job f .
4.2 Analysis Resume Model
Compared restart model, competitive analysis resume model much
complicated, resume model, job executed several disjointed
time intervals. charging scheme used previous subsection longer works,
need design new virtual charging scheme.
introducing new virtual charging scheme, introduce notation
used subsection. Let (j) denote number disjoint time segments
(j)
allocated completed job j opt, s1j , s2j , . . . , sj denote corresponding starting
time segment.
say allocation contains violation exist two completed jobs j,
two segments starting time sai , sci sbj , sdj sai < sbj < sci < sdj .
allocation called standard contain violation. means allocation
standard, completed job, starting time execution two segments
another jobs allocation, completion time time interval (i.e.,
two segments). provide obvious yet useful fact offline
optimal allocation below.
Claim 4.3. exists optimal allocation standard.
detailed proof, please refer Appendix C. Without loss generality, assume
optimal allocation opt standard.
Claim 4.4 presents important property standard allocation, used
following proofs.
13. Here, j1 job j, affect analysis.

446

fiEfficient Mechanism Design Online Scheduling

Claim 4.4. execution opt, job js execution-starting time two
segments another jobs allocation, job js completion time time
interval (i.e., two segments).
analyze competitive ratio 1 resume model, propose two new virtual
charging schemes (referred integral charging scheme segmental charging scheme,
respectively). integral charging scheme, charge whole value job j
optimal allocation opt job completed mechanism 1 ; segmental
charging scheme, charge value j segment, different segments
job may charged different jobs completed mechanism 1 . using two

schemes, Theorem 4.5 upper bound competitive ratio mechanism 1 1
+1
1
2
+ ln +1 respectively. discussed Section 4.3, two ratios work situations
different values, i.e., first one works well small second one works
well large .
Theorem 4.5. resume model, competitive ratio 1


1



+ 1.

particular, satisfies , competitive ratio 1 min{ 1 + 1,
2
ln + 1}.

1


+

proof theorem given Section 4.2.1 Section 4.2.2.
4.2.1 Integral Charging Scheme
Remember denote (1, 2, . . . , F ) sequence jobs completed 1 time.
job f sequence, denote tf time job f completed.
integral charging scheme, restrict total number jobs (excluding f itself)
charged job f : allow number exceed btf tf 1 c+1. particular,
introduce notation saturation Definition 4.6.
Definition 4.6 (Saturated). job f , number jobs (excluding f )
charged f less btf tf 1 c + 1, say f unsaturated; otherwise f
saturated.
Let W denote set jobs completed opt, Wf W denote set jobs
j W s1j . Let denote set jobs W whose values already
charged jobs completed 1 .
integral charging scheme described Scheme 1. simplicity, refer Line
1 2 Step 1, Line 4 11 Step 2, Line 12 21 Step 3.
give intuitive explanations Step 2 Step 3.
Step 2, job f (f = 1, . . . , F ), pick btf tf 1 c + 1 jobs Wf
charge values f . rule picking jobs follows largest s1j first, k-th
picked job14 s1j later tf k + 1.
14. slight abuse notations, still denote job j, thus start time first segment s1j .

447

fiChen, Hu, Liu, Ma, Qin, Tang, Wang & Zheng

SCHEME 1: Integral Charging Scheme
1: Initial: .
2: job W , completed mechanism 1 , charge value itself,
add A.
3: W \ 6= ,
4:
f = 1 F ,
5:
k = 0 btf tf 1 c,
6:
J k := {j 0 | (s1j 0 tf k) (j 0 Wf \ A)};
7:
J k 6= ,
8:
Set j = arg maxj 0 J k (s1j 0 ), add j A, charge value f .
9:
end
10:
end
11:
end
12:
f = F 1,
13:
Wf \ 6= ,
14:
Set j = arg maxj 0 Wf \A (s1j 0 ), add j A;
15:
16:
17:
18:
19:
20:
21:
22:

(j)

sj +hj 0 hj F f ,
Charge js value unsaturated job smallest completion time
set {f + 1, . . . , f + hj };
(j)
else sj [tF , +),
Charge js value unsaturated job smallest completion time
set {f + 1, . . . , F };
end
end
end
end

Step 3, consider jobs (in W ) whose values charged job first
(j)
two steps. Consider job j s1j located interval sj
located +hj (or
[tF , +)). charge value unsaturated job job set {f + 1, . . . , f + hj } (or
{f + 1, . . . , F }). rule selecting unsaturated job follows smallest completion time
first.
show three steps jobs W charged completed jobs
1 (see Claim 4.9). First, give two observations below.
Observation 4.7. integral charging scheme, job f {1, 2, . . . , F }
time , number jobs charged f start time opt [t, tf )
(charged step 2) btf tc + 1.
Observation 4.8. integral charging scheme, job f {1, 2, . . . , F } completed
mechanism 1 , total number jobs charged f (excluding f )
btf tf 1 c + 1.
Observation 4.7 derived Lines 5-6 Scheme 1, Observation 4.8 derived
restriction saturated job charged more.

448

fiEfficient Mechanism Design Online Scheduling

Claim 4.9. integral charging scheme, jobs W charged jobs
completed mechanism 1 .
Proof. Suppose contrary exists Wf charged job
Rt
{f, f + 1, . . . , f + hi }. Here, introduce notation ei (t) = 0 (opt(s) = i)ds denote
valid active time resumable job time opt. Since length every job
least 1,15 exists allocation segment [s0 , s00 ] job ei (s0 ) < 1, ei (s00 ) 1,
opt(t) = [s0 , s00 ]. Suppose s00 belongs +h . definition hi ,
h hi .
According assumption, know: (a) charged f . (b) jobs
{f + 1, f + 2, . . . , f + h} saturated charging process charge
job i.
point (a), deduce Step 2, least btf s1i c + 1 jobs (whose
values charged f ) s1j (s1i , tf ] (by Observation 4.7). Otherwise would
charged f Step 2. denote Ja set btf s1i c + 1 jobs.
point (b), recall job f 0 (f 0 {f + 1, . . . , f + h}) saturated
bti ti1 c+ 1 jobs whose values charged f 0 (see Definition 4.6). Hence, deduce
least (btf +1 tf c + 1) + + (btf +h tf +h1 c + 1) jobs (whose values
charged {f + 1, . . . , f + h}) starting time satisfying s1j (s1i , tf +h ].
particular, among jobs, (btf +h s00 c + 1) jobs s1j (s00 , tf +h ]
(whose value must charged f + h).16 Therefore, deduce least
(btf +1 tf c + 1) + + (btf +h tf +h1 c + 1) (btf +h s00 c + 1)
jobs (whose values charged {f + 1, . . . , f + h}) s1j (s1i , s00 ] (denote Jb
set jobs).
Note Ja Jb = , jobs Ja charged f , jobs Jb charged
{f + 1, . . . , f + h}. Therefore, deduce number jobs start time contained
(s1i , s00 ] least |Ja | + |Jb |, i.e.,
(btf s1i c + 1) + (btf +1 tf c + 1) + + (btf +h tf +h1 c + 1) (btf +h s00 c + 1)
>(tf +h s1i ) (btf +h s00 c + 1) bs00 s1i c 1.
(6)
So, bs00 s1i c 1 jobs different [s1i , s00 ]. Recall assume
opt standard, hence, jobs entirely scheduled (s1i , s00 ), i.e., time segments
job allocated (s1i , s00 ) (Claim 4.4). Since length every job least
1, reach contradiction.
According integral charging scheme, charges completed job f three
origins, corresponding three steps Scheme 1. Step 1, obviously, charge
job f vf . calculate maximum total charge Step 2.
15. stated Problem Formulation section, assume job lengths located [1, ] simplicity.
However, scaling, results proofs easily generalized case [lmin , lmin ],
lmin shortest length jobs.
16. Because: (i) Step 2, might (btf +h s00 c + 1) jobs s1j (s00 , tf +h ] could
charged f + h; (ii) Step 3, jobs s1j +h could charged f + h.

449

fiChen, Hu, Liu, Ma, Qin, Tang, Wang & Zheng

Suppose total number jobs charged f Step 2 m. rename
1, 2, . . . , according 1 2 , claim vj vf j lj (Lemma 4.2 used
here), j := tf s1j , 1 j m. According rule picking jobs Step 2,
j j 1. clear sum values jobs
vf


X
j=1

j lj vf


X

j1 = vf

j=1


X

j .

(7)

j=0

remains calculate maximum total charge Step 3. According Observation
4.8, know number jobs charged f Step 3 btf tf 1 c+1m.
need bound value job j. key build relationship
value value job f . However, according charging rule Step
3, start time s1j job j located time interval . case, cannot
use Lemma 4.2 directly derive inequality vj vf j lj . remains
check whether j feasible tf 1 (note tf 1 left endpoint time interval ).
define critical time job tj := dj lj . prove tj tf 1 ,
job j must feasible time tf 1 1 . Thus, applying Lemma 4.2, easily get
vj vf tf tf 1 lj vf tf tf 1 .

(8)

Fortunately, following lemma shows tj tf 1 holds.
Lemma 4.10. According charging scheme, j Wf charged completed job
f + k (where 1 k hj ), critical time job j satisfies tj tf +k1 .
Proof. prove lemma contradiction suppose tj < tf +k1 . total length
(j)

jobs whose opt allocation s1j sj


(j)

(sj

dj s1j lj = (dj lj ) s1j = tj s1j < tf +k1 s1j .

(j)

+ lj

) s1j lj ,

(9)

Since j charged f +k, Step 3 know jobs {f +1, f +2, . . . , f +k1}
saturated. Thus, least
(btf s1j c + 1) + (btf +1 tf c + 1) + + (btf +k1 tf +k2 c + 1) btf +k1 s1j c + 1 (10)
jobs whose start time belongs interval (s1j , tf +k1 ).
Recall opt standard. Hence, jobs allocated time segments
first segment last segment job j (according Claim 4.4), Equation (9)
Equation (10) constitute contradiction since every jobs length least 1.
Combining analysis above, know that: (1) total charge f Step 1
vf ; (2) assuming
jobs charged f Step 2, total charge
Pm j
jobs vf j=0
according Equation (7); (3) number jobs charged
f Step 3 btf tf 1 c + 1 according Definition 4.6, value
450

fiEfficient Mechanism Design Online Scheduling

job vf tf tf 1 according Equation (8). Therefore, total charge
f
vf + vf

m1
X

btf tf 1 c+1

j + (btf tf 1 c + 1 m)vf tf tf 1 vf (1 +

j=0

X

j ),

j=0



upper bounded vf (1 + 1
), indicating competitive ratio mechanism

1 upper bounded


1

+ 1.

4.2.2 Segmental Charging Scheme
(j)

Recall use s1j , s2j , . . . , sj

denote starting time time segments allocated

(j)
1j , 2j , . . . , j

(j)

job j opt. Let
denote time segments, lj1 , lj2 , . . . , lj denote
length them.
segmental charging scheme, segment kj given value j ljk ,
v
j := ljj value density job j. describe segmental charging scheme
Scheme 2. simplicity, refer Line 2 3 Type-1 charge, Line 4 5 Type-2
charge, Line 6 7 Type-3 charge.
SCHEME 2: Segmental Charging Scheme
1:
2:
3:
4:
5:
6:
7:
8:
9:

segment kj opt
mechanism 1 completes j deadline,
Charge value j ljk j.
else skj f {1, 2, , . . . , F }, j vf j 1 , j := tf skj ,

Charge value j ljk f .
else
Charge j ljk f , f first job completed 1 time tj on,
tj critical time job j.
end
end

clear Type-1 charge received job f vf . Next, bound
Type-2 Type-3 charges.
v

Lemma 4.11. total Type-2 charge job f receives lnf .
Proof. Let R2 denote set job segments whose charges f Type-2.
kj R2 , charge j ljk . Line 4 Scheme 2, know j vf j 1 ,
j = tf skj . Thus total Type-2 charge
X
kj R2

j ljk

vf

X
kj R2

j 1 ljk

vf

X Z
kj R2

j

j ljk



x1

Z
dx vf
0



x1 dx

vf
,
ln

second inequity holds < 1. Therefore, f receives total Type-2 charge
v
lnf .
451

fiChen, Hu, Liu, Ma, Qin, Tang, Wang & Zheng

following, study Type-3 charge denote R3 set job segments
constitute Type-3 charges f .
First, claim that, satisfies condition, get [skj , skj + ljk ] [tf , tf +
lj ] [tf , tf + ] kj R3 (Claim 4.12).
Claim 4.12. satisfies function: g(x) = x x 1 x ;
[skj , skj + ljk ] [tf , tf + lj ], kj R3 .
Proof. prove [skj , skj + ljk ] [tf , tf + lj ], need prove inequality below:
tf skj tf + lj ljk .

(11)

inequality skj tf + lj ljk holds (skj + ljk ) lj dj lj = tj tf .
Next prove tf skj . Suppose skj 0 f 0 (If 0 later , might
equal ). according Type-3 charging rule, j =

vj
lj

0

> vf 0 j 1 ,

j0 = tf skj .
use condition : g(x) = x x 1 x .
0
v
v
l
lj j , hence ljj vj lj 1 . Combining two inequalities ( ljj > vf 0 j 1
0

vj
lj

0

vj lj 1 ), vj lj > vf 0 j , thus vj > vf 0 j lj , contradicts fact
f 0 completed tf 0 priority vf 0 (Lemma 4.2 used here). Therefore,
tf skj .
Claim 4.12, know allocation segments P
Type-3 charges f
restricted interval [tf , tf + ]. Hence, derive k R3 ljk .
j

Lemma 4.13. satisfies function: g(x) = x x 1 x ; total
).
Type-3 charge job f receives vf ( 1
ln +
Proof. According Type-3 charging rule, j completed mechanism;
consider critical point j, i.e., tj (in time interval ), applying Lemma 4.2,

v
v
deduce vj lj vf tf tj vf . Therefore ljj flj . bound
lj

total Type-3 charge f receives
X
kj R3

j ljk =

X vj
X vf
X ljk
k
ljk
l
=
v
,
f
lj
g(lj )
lj lj j
k
k
k

j R3

j R3

Note function g(lj ) = lj lj increasing 1 lj
1
lj ln
.
g(lj )

(



1 lj


1
ln

(12)

j R3

1
ln

lj , >

1
ln .

1
ln

decreasing

(13)

Claim 4.12, know [skj , skj + ljk ] [tf , tf + lj ] [tf , tf + ] kj R3 .
1

Therefore, one hand, kj R3 ln
lj (denote set R3 ),
452

fiEfficient Mechanism Design Online Scheduling

k
kj R3a lj

; hand, kj R3 lj
P
1
set R3b ), k Rb ljk ln
.
3
j
Then, (12) becomes



P

X
kj R3

X

j ljk vf

kj R3

X ljk
X ljk
ljk
= vf (
+
)
g(lj )
g(lj )
g(lj )
k

k
b
j R3

P
vf (

1
ln

kj R3a



ljk

P
+

kj R3b



j R3

ljk

) vf (

means Type-3 charge bounded vf ( 1
ln +

(denote

(14)

1
ln


+
),



1
).

Based Lemmas 4.11 4.13, obtain ,17 total charge
job f completed mechanism 1 vf ( 1 + 2
ln + 1). implies
1
competitive ratio mechanism 1 upper bounded + 2
ln + 1.
4.3 Discussions
advantage mechanism handle settings different values
unified framework. need set parameter different values Theorem
4.1 Theorem 4.5 adapt different settings job lengths (as shown
following corollaries).
Corollary 4.14. setting = 1(1)2 ln , > 0 arbitrary small constant,
1

mechanism 1 achieves competitive ratio ( (1)
2 + o(1)) ln restart model
2
competitive ratio ( (1)
2 + o(1))


ln

resume model.

proof found Appendix D. Corollary 4.14, following
discussions:
1

(1) restart model, mechanism 1 achieves competitive ratio ( (1)
2 +o(1)) ln ,
5

6
6
improves upon best-known algorithmic result log
+ O( ) (Ting, 2008)
standard online scheduling without strategic behavior.

(2) resume model, large, mechanism 1 achieves competitive ratio
2

( (1)
2 + o(1)) ln , slightly worse result obtained restart
model (within factor 2). Asymptotically speaking, 1 near optimal, since
competitive ratio order (w.r.t. ) lower bound shown
Theorem 2.5. Furthermore, analysis generalizes results obtained Durr et
al. (2012) continuous value time strategic setting.
(3) relatively small, ratios given Corollary 4.14 become loose.
particular, approaches 1, ratios approach infinity since ln
approaches 0. case, need different setting (see Corollary 4.15).
1
1
17. Note that, function g(x) = x x increasing 1 x ln
decreasing x ln
. Therefore,


need require , naturally derive g(x) = x x 1 x .

453

fiChen, Hu, Liu, Ma, Qin, Tang, Wang & Zheng


Corollary 4.15. choosing = +1
, competitive ratio mechanism 1 + 2 +
1
(1 + ) < + 2 + e restart model ( + 1)(1 + 1 ) + 1 resume model.

Similarly, following discussions:
(1) competitive ratio 1 linear , since (1 + 1 ) bounded e.
(2) particular, = 1, ratios corollary become 5
restart resume model, matches lower bound given Theorem 2.4.
regard, say 1 optimal. hand, shows
lower bound 5 Theorem 2.4 tight.

5. Conclusion Future Work
paper, studied online scheduling problem strategic setting. summarized Table 2, proved restart model resume model,
competitive ratio IC mechanism cannot less 5 = 1 cannot less
ln + 1 o(1) large . designed simple IC mechanism 1 schedule jobs
single machine proved near optimal approximation guarantees (in terms
social efficiency) restart model resume model competitive
analysis: shown Table 2, mechanism optimal terms competitive ratio
restart model resume model = 1, near optimal
restart model large enough.
Table 2: Summary bounds competitive ratio
Restart Model
Resume Model
Model
=1
asymptotic
=1
asymptotic


LB IC mech.
5
+
1

o(1)
5
ln
ln + 1 o(1)
1
2


UB proposed mech.
5
( (1)
5
( (1)
2 + o(1)) ln
2 + o(1)) ln
proving lower bounds, introduce shadow job argument reflects
IC constraint. argument helpful extending bounds non-strategic setting
strategic setting. second contribution work design several virtual
charging schemes analyze competitive ratio mechanism. ideas
virtual charging schemes methodological significance may used address
problems.
multiple directions explore future.
interesting problem whether IC competitive mechanism designed
hybrid model, exist resumable non-resumable jobs. Many new
strategic issues may arise hybrid model. example, resumable job disguise
non-resumable job get better off?
Another open problem whether tighter competitive analysis 1 made
resume model. conjecture competitive ratio obtained 1
1
+ 1 + 1, restart model resume model.
uniform form: 1
Furthermore, given popularity cloud computing todays industry,
practical importance extend work setting job scheduling multiple heterogeneous machines.
454

fiEfficient Mechanism Design Online Scheduling

Appendix A. Algorithms Critical-Value Payment
Please note critical time point Algorithm 3 Algorithm 4 means time
point new jobs arrive existing jobs completed.
Algorithm 3: Compute critical-value payment restart model
job j completed
Run Algorithm 1 without job j. Let set critical time points
[rj , dj ).
every
exists job k x(t) = k, define ft = vk lk ek (t) ;
else ft = 0;
end-for
every time point t0 [rj , dj lj )
0
Define ft0 = max{ft / : (T [t0 , t0 + lj ))};
end-for
Let f = mint0 ft0 .
pj = f / lj .
end
Algorithm 4: Compute critical-value payment resume model
job j completed
Run Algorithm 1 without job j.
Let {t0 , t1 , . . . , tm } set (denoted ) critical time points [rj , dj ),
t0 = rj .
Denote period two critical time point zi = ti ti1 ,
= 1, 2, . . . , m.
every ti
exists job k x(ti ) = k, define fti = vk lk ek (ti ) ;
else fti = 0;
end-for
Initially, , h = 0.
h < lj
t0 = arg minti \T fti , ties broken favor smaller ti ;
Initially, e0 = 0;
0
every time point ti t0 satisfies fti ft0 e
e0 = e0 + zi ;
ti
/ ,
add ti , h = h + zi ;
end-for
end-while
Let t01 earliest critical time point . Let = arg maxti fti .
Denote critical time points t01 t02 , t03 , . . . , t0k .
Denote relevant periods critical time points z10 , z20 , . . . , zk0 , z .
0
0
pj = ft / lj (z1 ++zk ) .
end
455

fiChen, Hu, Liu, Ma, Qin, Tang, Wang & Zheng

Appendix B. Example Analysis Tightness
Example B.1. two types jobs: long short. length long jobs ,
length short jobs 1. Let p large integer, number long short
jobs p + 1 p 1 respectively. first long job J0l released time 0, type
0l = (0, , , 1). p 2 1, job Jil type il = (i( ), (i + 1) i, , ).
l
l
Long job Jp1
type p1
= ((p 1)( ), (p + 2), , (p1) + ). Job Jpl type
l
p = (p(), (p+1)p, , p+ ). Here, small constants satisfying p 1
. meanwhile, short jobs follows. j = 1, . . . , p1, denote
Jjs jth short job, whose type js = (j (p1), j +1(p1), 1, (j+1)+(p1) ).
j = 1, . . . , p 1.
l
verified one job Jp1
completed mechanism 1 ,
(p1)
social welfare
. optimal solution, short jobs
l
l
completed successively, social welfare
completed, that, Jp Jp1
2
3
(p1)
(
+
+ ... +
) + (p1) + p . Therefore, competitive ratio
p1
mechanism 1 least ( p2 + . . . + + 1) + 1 + = 1
+ 1 + , tends
1
1
1
+ 1 + 1, p .

Appendix C. Proof Claim 4.3
Proof. Suppose optimal allocation opt standard, i.e., exist completed job
two segments beginning time sai sci completed job j two segments
beginning time sbj sdj sai < sbj < sci < sdj . following process
obtain standard optimal allocation: length job js b-th segment (denote ljb )
larger c-th segment (denote lic ), exchange c-th segment js
b-th segment located [sbj , sbj + lic ]; otherwise, exchange js b-th segment c-th
segment located [sci + lic ljb , scj + lic ]. segments, order remains
unchanged. easy see new allocation still feasible obtains
social welfare. kind exchanges violation, obtain
standard optimal allocation.

Appendix D. Proof Corollary 4.14
Proof. every constant c < 1 large enough x, (1 xc )x e.
large enough, choosing = 1 (1 )2 ln , 1,
(1 )2 ln (1) ln (1) ln

)
e(1) ln (1) = o(
).

ln
using Taylors theorem, know
= (1

ln = (1 + o(1))(1 ) = (1 + o(1))
Thus competitive ratio

1
1

c2 ln
.


1

+ 1 + 1 = ( (1)
2 + o(1)) ln restart model,

2
ln

2

+ 1 + 1 = ( c2 ln (2 + o(1)) + o( ln )) + 1 = ( (1)
2 + o(1)) ln resume model,
respectively.

456

fiEfficient Mechanism Design Online Scheduling

Appendix E. Multiple Machines Extension
Suppose C identical machines, process one job
given time. Similar work Lucier et al. (2013), assume h
machines allocated single job given time. parameter stands
common parallelism bound system.
notion preemption specified follow: job may processed number
machines 1 h, number machines allocated job may fluctuate,
number decreases 0, treat job preempted. Thus, notation
preemption-restart preemption-resume defined accordingly.
job j J characterized private type j = (rj , dj , sj , vj ). Instead lj ,
use sj denote jobs size (e.g., number machine hours required complete
job). Without causing confusion, let maximum ratio sizes
two jobs: = maxi,jJ ssji . simplicity, assume job sizes fall [1, ]. = 1,
jobs identical size; otherwise different sizes.
E.1 Simple Case: h = 1
case, design new mechanism 2 based single-machine mechanism 1 .
payment rule 2 exactly 1 , allocation rule shown
Algorithm 2, similar 1 . Since job processed
one machine, mechanism choose C jobs (if any) JF (t) highest
priorities vi si ei (,t) execute. Note valid active time job j time
computed
C Z
X
ej (t) =
(xi (s) = j)ds.
(15)
i=1

t0

P
() indicator function, t0 = arg maxst [ C
i=1 (xi (s) = j)] = 0.
say, treating resumable jobs non-resumable jobs simple. summarize
theoretical properties 2 Theorem E.1.
Algorithm 5: allocation rule Mechanism 2

|JF (t)| C
process C jobs highest priorities JF (t);
else process jobs JF (t).
end
Theorem E.1. Mechanism 2 IC following properties:

(+1) ,
1 (1 )2

restart model, setting =
1
)

get competitive ratio + 2 +

(1 +
2 ; setting =
ln arbitrary small > 0, get
1
another competitive ratio ( (1)2 + o(1)) ln .
resume model, setting = 1 (1 )2 ln arbitrary small > 0,
2

get competitive ration ( (1)
2 + o(1)) ln .
theorem, following discussions.
457

fiChen, Hu, Liu, Ma, Qin, Tang, Wang & Zheng

(1) Similar done single-machine setting, restart model,
give two competitive ratios 2 . small, first ratio better
(in particular, = 1, competitive ratio becomes 5 thus optimal
according Theorem 2.4). large, second ratio better instead
near optimal according Theorem 2.5.
(2) Different obtained single-machine setting, resume
model, cannot match lower bound 5 = 1 multi-machine setting.
Proof. proof Theorem E.1 essentially proof single machine
setting, virtual charging scheme, charge completed job optimal allocation
job completed 2 exactly machine. difference
integral charging scheme resume model apply multiple machines
setting more. use segment charging scheme resume model.
E.2 General Case: h 1
handle general case, design new mechanism 3 , divides C machines
bC/hc equally-sized virtual machines (each consisting h machines), treats every
virtual machine single machine performing scheduling. is, virtual
machine used process one job, remaining C bC/hc h machines
idle.
Algorithm 6: allocation rule Mechanism 3
(1) Divide C machines bC/hc equal-sized virtual machines.
(2) Run mechanism 2 following modification:
Capacity: bC/hc.
Demand size: sj /h job j.
compared case h = 1, setting h 1 imposes flexibilities
optimal offline allocation. example, job may processed number machines
1 h optimal allocation might always executed exactly
h machines. Fortunately, use similar segmental charging idea h = 1 case
resolve challenge get competitive ratio shown following theorem.
4

Theorem E.2. Mechanism 3 IC competitive ratio ( (1)
2 + o(1)) ln

3 setting = 1 (1 )2
resume model.

ln


arbitrary small > 0, matter restart model

following discussions theorem. setting h 1
complicated could always obtain results setting h = 1.
particular, h divides C, idle machine may obtain
competitive ratio setting h = 1. However, h divide C, idle
machines introduce additional factor 2 competitive ratio. Besides,
competitive ratio restart model better resume model,
competitive ratio cannot reach 5 = 1.
458

fiEfficient Mechanism Design Online Scheduling

Proof. need show exists optimal allocation (we view
jobs resumable jobs optimal allocation) time every job
processed either exactly h machines machine (assuming h divides C).
directly use results obtained special case h = 1. Suppose opt optimal
offline allocation J set jobs completed opt. j J , use
mj (t) denote number machines processing j time opt.
divide time intervals [tk , tk+1 ), k = 0, 1, 2, , time interval
[tk , tk+1 ), mj (t) change j J . show allocate jobs
time interval [tk , tk+1 ). bC/hc virtual machines, allocate jobs
one one, i.e., previous virtual machine full, start allocate jobs
another empty virtual machine tk (empty respect [tk ,Rtk+1 )). Besides,

every job allocated continuously one one size allocation tkk+1 mj (t)dt.
easily verified allocation every job j J allocated legitimately
(j allocated [rj , dj ] processed h machines time)
complete deadline since j legitimately completed opt.

References
Azar, Y., Ben-Aroya, N., Devanur, N. R., & Jain, N. (2013). Cloud scheduling setup
cost. Proceedings twenty-fifth annual ACM symposium Parallelism
algorithms architectures, pp. 298304. ACM.
Bar-Noy, A., Guha, S., Naor, J., & Schieber, B. (2001). Approximating throughput
multiple machines real-time scheduling. SIAM Journal Computing, 31 (2),
331352.
Baruah, S., Koren, G., Mao, D., Mishra, B., Raghunathan, A., Rosier, L., Shasha, D., &
Wang, F. (1992). competitiveness on-line real-time task scheduling. RealTime Systems, 4 (2), 125144.
Baruah, S. K., Haritsa, J., & Sharma, N. (1994). On-line scheduling maximize task
completions. Proceedings Real-Time Systems Symposium, pp. 228236. IEEE.
Borodin, A., & El-Yaniv, R. (1998). Online computation competitive analysis, Vol. 2.
Cambridge University Press Cambridge.
Chin, F. Y., & Fung, S. P. (2003). Online scheduling partial job values: timesharing randomization help?. Algorithmica, 37 (3), 149164.
Ding, J., Ebenlendr, T., Sgall, J., & Zhang, G. (2007). Online scheduling equal-length
jobs parallel machines. Proceedings 15th annual European conference
Algorithms, pp. 427438. Springer-Verlag.
Ding, J., & Zhang, G. (2006). Online scheduling hard deadlines parallel machines.
Algorithmic Aspects Information Management, pp. 3242. Springer.
Durr, C., Jez, L., & Nguyen, K. T. (2012). Online scheduling bounded length jobs
maximize throughput. Journal Scheduling, 15 (5), 653664.
459

fiChen, Hu, Liu, Ma, Qin, Tang, Wang & Zheng

Ebenlendr, T., & Sgall, J. (2009). lower bound scheduling unit jobs immediate
decision parallel machines. Approximation Online Algorithms, pp. 4352.
Springer-Verlag.
Friedman, E. J., & Parkes, D. C. (2003). Pricing wifi starbucks: issues online mechanism
design. Proceedings 4th ACM conference Electronic commerce, pp. 240
241. ACM.
Goldman, S. A., Parwatikar, J., & Suri, S. (2000). Online scheduling hard deadlines.
Journal Algorithms, 34 (2), 370389.
Goldwasser, M. H. (2003). Patience virtue: effect slack competitiveness
admission control. Journal Scheduling, 6 (2), 183211.
Hajek, B. (2001). competitiveness on-line scheduling unit-length packets
hard deadlines slotted time. Proceedings 35th annual Conference
Information Sciences Systems.
Hajiaghayi, M., Kleinberg, R., Mahdian, M., & Parkes, D. C. (2005). Online auctions
re-usable goods. Proceedings 6th ACM conference Electronic commerce,
pp. 165174. ACM.
Kolen, A. W., Lenstra, J. K., Papadimitriou, C. H., & Spieksma, F. C. (2007). Interval
scheduling: survey. Naval Research Logistics (NRL), 54 (5), 530543.
Lavi, R., & Nisan, N. (2004). Competitive analysis incentive compatible on-line auctions.
Theoretical Computer Science, 310, 159180.
Lavi, R., & Nisan, N. (2015). Online ascending auctions gradually expiring items.
Journal Economic Theory, 156, 4576.
Lipton, R. J., & Tomkins, A. (1994). Online interval scheduling. Proceedings
Fifth Annual ACM-SIAM Symposium Discrete Algorithms, Vol. 94, pp. 302311.
Lucier, B., Menache, I., Naor, J. S., & Yaniv, J. (2013). Efficient online scheduling
deadline-sensitive jobs. Proceedings 25th ACM symposium Parallelism
algorithms architectures, pp. 305314. ACM.
Ma, W., Zheng, B., Qin, T., Tang, P., & Liu, T. (2014). Online mechanism design cloud
computing. CoRR, abs/1403.1896.
Mashayekhy, L., Nejad, M. M., Grosu, D., & Vasilakos, A. V. (2014). Incentive-compatible
online mechanisms resource provisioning allocation clouds. Cloud Computing (CLOUD), 2014 IEEE 7th International Conference on, pp. 312319. IEEE.
Nguyen, K. T. (2011). Improved online scheduling maximizing throughput equal length
jobs. Computer ScienceTheory Applications, pp. 429442. Springer.
Nisan, N. (2007). Introduction mechanism design (for computer scientists). Algorithmic
game theory, 209, 242.
Nisan, N., & Ronen, A. (2001). Algorithmic mechanism design. Games Economic
Behavior, 35, 166196.
Parkes, D. C. (2007). Online mechanisms. Algorithmic Game Theory, ed. N. Nisan, T.
Roughgarden, E. Tardos, V. Vazirani, Cambridge University Press, 411439.
460

fiEfficient Mechanism Design Online Scheduling

Porter, R. (2004). Mechanism design online real-time scheduling. Proceedings
5th ACM conference Electronic commerce, pp. 6170. ACM.
Ting, H.-F. (2008). near optimal scheduler on-demand data broadcasts. Theoretical
Computer Science, 401 (1), 7784.
Wu, X., Gu, Y., Li, G., Tao, J., Chen, J., & Ma, X. (2014). Online mechanism design
VMS allocation private cloud. Network Parallel Computing, pp. 234246.
Springer.
Zaman, S., & Grosu, D. (2012). online mechanism dynamic vm provisioning
allocation clouds. 5th International Conference Cloud Computing (CLOUD),
pp. 253260. IEEE.
Zhang, H., Li, B., Jiang, H., Liu, F., Vasilakos, A. V., & Liu, J. (2013). framework
truthful online auctions cloud computing heterogeneous user demands.
Proceedings INFOCOM, pp. 15101518. IEEE.
Zheng, F., Fung, S. P., Chan, W.-T., Chin, F. Y., Poon, C. K., & Wong, P. W. (2006). Improved on-line broadcast scheduling deadlines. Computing Combinatorics,
pp. 320329. Springer.

461


