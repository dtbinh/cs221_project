Journal Artificial Intelligence Research 7 (1997) 283-317

Submitted 8/97; published 12/97

Bidirectional Heuristic Search Reconsidered
Hermann Kaindl
Gerhard Kainz

hermann.kaindl@siemens.at
gerhard.kainz@siemens.at


Siemens AG Osterreich,
PSE
Geusaugasse 17
A{1030 Vienna, Austria

Abstract

assessment bidirectional heuristic search incorrect since first
published quarter century ago. quite long time, search strategy
achieve expected results, major misunderstanding
reasons behind it. Although still wide-spread belief bidirectional heuristic
search aicted problem search frontiers passing other, demonstrate
conjecture wrong. Based finding, present new generic approach
bidirectional heuristic search new approach dynamically improving heuristic
values feasible bidirectional search only. approaches put perspective
traditional recently proposed approaches order facilitate
better overall understanding. Empirical results experiments new approaches
show bidirectional heuristic search performed eciently
limited memory. results suggest bidirectional heuristic search appears
better solving certain dicult problems corresponding unidirectional search.
provides evidence usefulness search strategy long neglected.
summary, show bidirectional heuristic search viable consequently propose
reconsidered.

1. Background Introduction
problem represented state space graph, solutions problem
paths given start node goal/target node t. Finding solution
attempted searching graph. search guided heuristic information,
called heuristic search. work heuristic search problem solving deals
unidirectional approaches, start heading towards node (see, e.g.,
Pearl, 1984).
one goal node explicitly given search operators reversible,
bidirectional search possible, proceeds forward direction
backward direction (see, e.g., Nilsson, 1980). Strictly speaking,
even required operators inverses. necessary given node n
set parent nodes pi determined exist operators lead pi
n. Searching backwards means generating parent nodes successively goal node
(see, e.g., Russell & Norvig, 1995). words, backward search implements reasoning
operators backward direction.
illustrating example class problems bidirectional search
usefully applied, consider finding find shortest path two given places
using given map city. case one-way streets, bidirectional search implements
c 1997 AI Access Foundation Morgan Kaufmann Publishers. rights reserved.

fiKaindl & Kainz

reasoning following: \in order arrive t, one-way street leading towards
may used". slightly adapted problem class, cost driving street may

different, depending driving direction. steep street top mountain
may serve example. Bidirectional search works correctly case:
backward search implements reasoning backward direction takes account
cost driving forward direction. formally, k1(m; n) = k2(n; m) cost
optimal path n. k2 used notational convenience only.1 bidirectional
search algorithms dealt paper work correctly conditions
require operators reversible cost path either
direction.
Bidirectional search shown ecient unidirectional counterpart
heuristic knowledge unavailable, inverse result originally found
experiments bidirectional heuristic search Pohl (1971). Since kind search
work expected, consensus conjecture bidirectional heuristic
search aicted problem search frontiers passing without intersecting.
situation metaphorically compared Pohl missiles pass other,
illustrated figure reprinted Nilsson (1980, Fig. 2.11). Nilsson conjectured
case bidirectional search may expand twice many nodes would
unidirectional one.
original algorithm BHPA proposed Pohl (1971) may actually show
inecient performance, missile metaphor wrong misleading. demonstrate
bidirectional heuristic search actually aicted problem search frontiers
passing other. performance BHPA much worse originally expected
two different reasons:
1. BHPA's search frontiers typically go other.
2. major effort spent search frontiers already met: finding
better solutions one found first meeting search frontiers
optimal one; finally proving indeed better solution possible.
first reason specific BHPA incidentally resolved technical improvements introduced related algorithm BS* Kwa (1989). second
issue, however, major obstacle eciency BS* actually bidirectional search algorithm performs heuristic front-to-end evaluations, i.e., evaluations
estimate minimal cost path evaluated node search front
t. Note, kind evaluations performed typical unidirectional search.
common belief missile metaphor, however, so-called wave-shaping
algorithms developed de Champeaux (1983), de Champeaux Sint (1977),
Politowski Pohl (1984), idea steer search \wave-fronts" together.
contrast BHPA BS*, algorithms perform front-to-front evaluations, i.e., evaluations estimate minimal cost path evaluated node one search
front nodes opposing front. fact, algorithms achieve large reductions
number nodes searched compared algorithms perform front-to-end evaluations. However, either excessively computationally demanding,
1. notation explained Appendix.

284

fiBidirectional Heuristic Search Reconsidered

restriction solution quality. Still, reductions number nodes
searched using front-to-front evaluations come from? all, algorithms performing
front-to-end evaluations suffer problem search frontiers passing
other.
order answer important question, let us shortly focus common property
heuristic evaluation functions estimate minimal cost path applying
heuristic knowledge static information encoded state information node
evaluated. static evaluation functions typically evaluate error, i.e.,
difference minimal cost path heuristic estimate cases
greater zero. approach improve accuracy given static evaluation function
perform search utilize results. Since involves dynamic changes, call
dynamic evaluation function. Dynamic evaluations bounded look-ahead search
studied various contexts Kaindl Scheucher (1992).
static evaluation errors typically smaller paths smaller cost,
observed Pearl (1984). Front-to-front evaluations therefore typically accurate
front-to-end evaluations. addition, costs paths nodes
opposing search frontier (or s, respectively) known, overall evaluations
front-to-front algorithms much accurate front-to-end evaluations. Since
former utilize results search opposing direction, may view
approach dynamically improving heuristic values static evaluation function. Due
asset, wave-shaping algorithms achieve large reductions terms nodes generated
since perform front-to-front evaluations. However, quite expensive terms
running time (per node examined), calls finding appropriate balance.
fact, Dillenburg Nelson (1994) well Manzini (1995) developed recent nontraditional approach bidirectional search called perimeter search achieves exactly
this.
devised new computationally much cheaper approach dynamic improvements call difference approach. utilizes differences known costs
heuristic estimates given evaluation function improve heuristic estimates
function. difference approach applied bidirectional heuristic search
algorithms perform heuristic front-to-end evaluations. exemplified two new
methods dynamic improvements heuristic evaluations search.
devised new approach bidirectional heuristic search performs heuristic
front-to-end evaluations, dynamic improvements heuristic evaluations
search embedded eciently effectively. approach generic sense
encompasses whole class (non-traditional) bidirectional search algorithms.
show paper, instantiated case availability sucient
memory well case limited memory.
results experiments suggest bidirectional heuristic search improve
unidirectional heuristic search respect generated nodes running time
(for certain problems finding optimal solutions). Since missile metaphor wrong,
bidirectional heuristic search using approach without time-consuming
front-to-front evaluations. So, bidirectional heuristic search viable propose
reconsidered.
285

fiKaindl & Kainz

paper organized following manner. First, discuss previous work
present new theoretical empirical results existing approaches bidirectional
heuristic search. describe new generic approach non-traditional bidirectional
search two instantiations. Thereafter propose new approach dynamically
improving heuristic values based differences known costs heuristic
estimates. presentation experimental results applying approaches,
discuss context various approaches bidirectional heuristic search
previously proposed.

2. Previous Work

order make paper self-contained, sketch essentials previous work
heuristic search algorithms focus bidirectional heuristic search, without going
detail necessary understand new results previous work
new approaches.

2.1 Unidirectional Heuristic Search Algorithms

Many unidirectional search algorithms presented, would prohibitive
review here. Rather, focus unidirectional algorithms form
basis bidirectional search discussed paper. First, review traditional
best-first search algorithm A* (Hart, Nilsson, & Raphael, 1968). Then, shortly explain
linear-space algorithm IDA* (iterative-deepening-A*) proposed Korf (1985). Finally,
review algorithm called Trans (Reinefeld & Marsland, 1994) implements form
enhanced iterative-deepening search.
A* maintains set Open so-called open nodes generated
yet expanded, i.e., frontier nodes. Much best-first search algorithm, always
selects node Open minimum estimated cost, one considers \best".
node expanded moved Open Closed. A* specifically estimates
cost node n evaluation function form f (n) = g (n)+ h(n), g (n)
(sum) cost path found n, h(n) heuristic estimate cost
reaching goal n, i.e., cost optimal path goal t. h(n)
never overestimates cost (it said admissible) solution exists, A*
guaranteed return optimal (minimum-cost) solution (it said admissible).
certain conditions, A* optimal admissible unidirectional heuristic search
algorithms using information, sense never expands nodes
(Dechter & Pearl, 1985). emphasize optimality result
A* compares unidirectional competitors, bidirectional approach may well
improve performance A*. major limitation A* memory requirement,
proportional number nodes stored therefore practical cases
exponential.
IDA* designed address memory problem, using heuristic
evaluation function f (n) A*. IDA* performs iterations depth-first searches. Consequently, linear-space requirements only. Although performing depth-first searches
iteratively deeper deeper heavily used computer chess programs
context alpha-beta minimax search since sixties still use (see Kaindl, 1990),
286

fiBidirectional Heuristic Search Reconsidered

B1
k1(A,B1)



k1(A,B2) B2
h1(B2)

g1(A)

h1(B1)

k1(A,B3)
h1(A)

B3


h1(B3)

H1(A) = max( h1(A), min( k1(A,Bi) + h1(Bi) ) )





Figure 1: illustration back-up idea.
application approach problem-solving searches marked breakthrough
solving dicult problems. IDA*'s depth-first searches guided threshold
initially set estimated cost s; threshold succeeding iteration
minimum f -value exceeded threshold previous iteration.
IDA* shows best performance trees, one major problems
pure form cannot deal duplicate nodes sense transpositions. transposition
arises, several paths lead node, search space represented
directed acyclic graph (DAG). disadvantage IDA* relates advantage
requiring linear space.
Fortunately, computers memory available needed IDA*.
memory utilized recognizing duplicate nodes two ways, using finite state machine (Taylor & Korf, 1993), transposition table implemented hash table (Reinefeld
& Marsland, 1994). Due general applicability wider variety domains,
since bidirectional algorithms partly make use it, focus latter technique.
algorithm Trans proposed Reinefeld Marsland (1994) uses transposition
table IDA*. Since size table deliberately parameterized,
approach utilizing limited memory. Analogously earlier applications transposition
tables computer chess programs, Trans utilizes table actually two purposes:

recognizing transpositions;
caching best heuristic values acquired dynamically.
Since latter use dicult understand, explain underlying idea
depth. back-up idea illustrated Fig. 1. normal search
nodes Bi statically evaluated stored, values still used backing
node stored | case Trans transposition table.
dynamic value minimum estimated costs best paths found
nodes Bi . Unless static evaluator consistent, useful store maximum
dynamic static value node. cached node re-searched,
improved value often used instead value assigned directly static
evaluation function.
Apart use Trans, back-up idea actually widely applied many algorithms MA* (Chakrabarti, Ghose, Acharya, & DeSarkar, 1989), MREC (Sen & Bagchi,
1989), RTA* (Korf, 1990), SMA* (Russell, 1992) (Ghosh, Mahanti, & Nau, 1994).
287

fiKaindl & Kainz

advantages little overhead steady (though often modest) improvement
increasing memory size. addition, idea works goal condition instead
goal node specified, i.e., require goal node explicitly given. However,
applicable re-searched cached nodes, cannot see could make
sense context traditional best-first search A*.

2.2 Traditional Approach Bidirectional Heuristic Search
First, look older approach bidirectional heuristic search forward
backward searches alternate. call traditional approach. encompasses
algorithms performing front-to-end others performing front-to-front evaluations.
2.2.1 Front-to-end Evaluations

Since first proposed algorithm bidirectional heuristic search called BHPA (Pohl, 1971)
performed front-to-end evaluations, let us begin approach. employs heuristic
evaluation functions hd (n) estimate cost optimal path evaluated
node n s, respectively, depending search direction d. precisely, h1 (n)
estimates cost optimal path n forward search, h2 (n)
n backward search. Note, always optimal path
found (i.e., s) therefore cost path estimated
evaluation function fd uses hd heuristic component. viewpoint
backward search targets node s, however, may seem cost frontier
estimated heuristically, precisely cost frontier.
issue matters cost path either direction.
view BHPA search essentially two A*-type searches opposite directions,
i.e., traditional best-first searches.2 performed quasi-simultaneously, i.e.,
sequential machine one node expanded another, search direction changed
(at least) time time. decision searching forward backward direction
made anew node expansion according cardinality criterion (Pohl, 1971):

jOpen1j jOpen2j 1 else 2
Whenever search frontiers meet node n, solution found. cost
g1(n) + g2(n), i.e., cost path found forward search n, plus
cost path found backward search n t. Even two parts
solution forward backward search optimal, however, concatenated
solution path necessarily optimal. Therefore, algorithm requires special
termination condition guaranteeing optimal solutions. termination condition
2. precisely, BHPA viewed consist two HPA searches (Pohl, 1970) opposing directions.
long heuristic function used consistent values weighted equally gd -values,
relevant difference check whether Open become empty. admissible consistent
heuristic functions, option move nodes back Closed Open important, new better
gd -value found. heuristic function consistent hd (m) hd (n) + kd (m; n) nodes n.
implies hd admissible, i.e., heuristic function never overestimates real cost.

288

fiBidirectional Heuristic Search Reconsidered

BHPA follows:

Lmin max[ min f1(x); min f2 (x)]
x2Open1

x2Open2

(1)

condition essentially means cost Lmin best (least costly) complete
path found far larger estimate computed fd -values
search frontiers. heuristic used estimates admissible, path
must already optimal solution order satisfy termination condition. Since
understanding condition important paper, elaborate depth
below.
Implicitly condition successful termination improved algorithm
BS* (Kwa, 1989), removes nodes n whose fd -values Lmin terminates
Open1 Open2 empty. technique removing nodes called trimming
BS*, newly generated nodes placed sets open nodes all,
called screening. techniques improve BHPA \just" respect
saving memory, BS* additionally includes improvements reduce number nodes
generated. major improvements following:

nipping: node selected expansion already Closed opposite search tree, put Closed current search tree without
expansion;
pruning: situation, descendants node Open opposite
search tree removed.

BHPA BS* admissible fd consistent. However, BHPA's results
clearly less ecient A* finding optimal solutions, BS* never
shown really ecient A*.
Koll Kaindl (1993) first conjecture missile metaphor misleading explanation provided (preliminary) evidence finding. Based
realizing fulfilling termination condition (1) key issue, developed
ecient "-admissible search algorithms, typically find solutions known error
bound faster generate fewer nodes corresponding derivative A* guarantees error bound. algorithms provided, however, improvements
finding optimal solutions, require exponential space BHPA, BS* A*.
Based approach, Kaindl Khorsand (1994) showed bidirectional
heuristic search using limited memory possible using unidirectional search
algorithm cope limited memory | SMA* (Russell, 1992). However,
runtime eciency insucient.
2.2.2 Front-to-front Evaluations

Since long time consensus belief search frontiers would
pass other, research focused algorithms would force \wavefronts" meet
\wave-shaping" techniques: BHFFA (de Champeaux & Sint, 1977), BHFFA2
(de Champeaux, 1983), d-node retargeting (Politowski & Pohl, 1984) generalized
algorithm (encompassing BHPA BHFFA2) (Davis, Pollack, & Sudkamp, 1984).
289

fiKaindl & Kainz


h(A,B1)

g1(A)
B1

h1(A)

k2(t,B1)
h(A,B2)




h(A,B3)

B2 k2(t,B2)
k2(t,B3)

H1(A) = max( h1(A), min( h(A,Bi) + k2(t,Bi) ) )


B3

Figure 2: illustration front-to-front idea.
algorithms perform front-to-front evaluations show bidirectional heuristic
search ecient terms number nodes generated.
Since basic idea front-to-front evaluations important understanding
paper, illustrate using Fig. 2. evaluation node nodes Bi
opposite search front available storage, costs optimal paths
every Bi estimated. Adding known costs paths Bi goal node
t, normally accurate dynamic estimates gained static front-to-end
evaluator directly estimates cost t.
However, algorithms performing front-to-front evaluations either excessively computationally demanding, restriction solution quality.
compute heuristic estimates nodes one search frontier nodes
other, order estimate paths going nodes opposite frontier
vice versa. So, effort evaluations needed single node selection
expansion may even seem proportional cross product numbers nodes
frontiers. use appropriate data structures, effort reduced become proportional number descendants expanded node times
size opposite search frontier.3 Still, excessively computationally demanding frontiers may contain order millions nodes. keeping effort
practical non-trivial problems, algorithm may either restrict computation
certain (small) number nodes promising values keep search direction
focused single target node opposing frontier several steps retargeting
it. approaches typically terminate non-optimal solutions therefore obviously
lose admissibility, i.e, guarantee finding optimal solutions.

2.3 Non-traditional Approach Bidirectional Heuristic Search

So, traditional approaches succeed improve unidirectional search
finding guaranteeing optimal solutions. particular, algorithms based
traditional best-first search exponential storage requirements. may seem
bidirectional search needs store nodes least one frontier search
opposing side recognize meeting frontier (typically implemented
hashing scheme). Instead storing frontiers forward backward
searches alternate, possible search one direction first storing nodes,
3. According personal communication Dennis de Champeaux.

290

fiBidirectional Heuristic Search Reconsidered

search direction. call non-traditional approach bidirectional
heuristic search.
approach perimeter search (Dillenburg & Nelson, 1994; Manzini, 1995).
perimeter search, breadth-first search generates stores nodes around
predetermined (and fixed) perimeter depth. final frontier breadth-first search
called perimeter. search finished nodes stored, forward search
starts s, targeting perimeter nodes. Depending given problem
available storage, forward search performed A* IDA* fashion.
former implemented PS* (Dillenburg & Nelson, 1994), latter IDPS*
(Dillenburg & Nelson, 1994) BIDA* (Manzini, 1995). perimeter depth,
IDPS* BIDA* search exactly nodes. However, BIDA* temporarily removes
perimeter nodes cannot affect computation evaluation function
consequently reduces number heuristic front-to-front evaluations compared
IDPS*. Due improvement, BIDA* far ecient terms running time
IDPS*.
BIDA* achieves good results (sliding-tile) Fifteen Puzzle domain. investigate case contrast traditional approaches bidirectional
heuristic search. particular, show results experiments varying perimeter
depth, i.e., varying perimeter size storage use.

3. New Results Previous Approaches

Still, seems previous approaches bidirectional heuristic search understood properly. Therefore, present new results propose
new approaches.

3.1 Theoretical Results

present new theoretical results bounds number nodes expanded
traditional bidirectional heuristic search front-to-end evaluations. Since runtime
performance proportional number nodes expanded, bounds
potential eciency. assume availability consistent heuristic evaluation function
hd directions.
First make explicit principally known result form lemma, since need
particular result proving new results. addition, understanding important
understanding results. Note, however, termination condition bidirectional search significantly different termination conditions unidirectional search
A* given Pearl (1984).

Lemma 3.1 (a sucient condition successful termination BHPA BS*):

solution path t, BHPA BS* terminate successfully (i.e.,
finding path) iff following conditions satisfied:
(i) least one search frontiers BHPA BS* minimum f -value must
raised least value optimal solution C , is, minx2Opend fd (x)
C ;
(ii) optimal solution must found, is, Lmin = C .
291

fiKaindl & Kainz

Proof: need concerned whether algorithms indeed find optimal

solutions, since corresponding proofs given Pohl (1971) Kwa (1989), respectively. focus exactly termination condition Formula (1)
fulfilled | BHPA explicit termination condition, BS* implicit
explained above. minimum f -values Opend first values f1 (s) f2 (t),
respectively. Since fd consistent exceed C . minimum f -values Opend
increases gradually nodes f -values < C least one search frontier
expanded (or nipped pruned BS*). Since maximum minimum f -values
Opend used, one least one must become C . search,
Lmin C always holds, optimal solution found, Lmin = C .
2
order establish bounds number node expansions, let us first focus
upper bound number nodes expanded BHPA.

Theorem 3.1 number node expansions BHPA bounded
#(BHPA) < #(A )1 + #(A)2

Proof: worst case, BHPA may perform A*-type searches
directions completely, exception least one node expansion. Even Lmin =
C achieved last node expansion one direction, immediately thereafter
termination condition fulfilled according Lemma 1. Therefore, opposite direction
least one node expansion saved.
2
sense, bound may look quite weak, actually Nilsson (1980) conjectured bidirectional heuristic search may expand twice many nodes would
corresponding unidirectional one. conjecture based assumption originally
published Pohl (1971) search frontiers may pass without intersecting.
recently, however, empirical evidence found Koll Kaindl (1993)
assumption invalid, i.e., frontiers typically meet rather early even without
using wave-shaping techniques. So, question may arise whether
conditions result Theorem 3.1 reasonable useful. order show conditions, define strong symmetry property search spaces. Although may seem
completely unrealistic assumption, dicult imagine search space
property. Searches optimal solutions TSP (traveling salesman problem)
instances need generate nodes represent visiting neighboring cities
start city. Since city final city visited, reverse search
opposing direction needs generate nodes exactly cities, etc. So, least
straight-forward implementation bidirectional search TSP works symmetric
space. symmetric TSP instances (where arc costs independent
direction) usual heuristic evaluations functions TSP (like minimum
spanning tree heuristic), turns perfectly A*-symmetric search space.
Definition 3.1 Let f11 = h1(s); f12; : : :; f1k,1; f1k = C different f -values expanded

nodes forward direction analogously f21 = h2 (t); f22; : : :; f2k,1; f2k = C
backward direction. search space perfectly A*-symmetric iff A* expands
number nodes f -value forward direction backward direction,
is, #j (A)1 = #j (A )2 j = 1 : : :k.
2
292

fiBidirectional Heuristic Search Reconsidered

Theorem 3.2 search space perfectly A*-symmetric f -values distinct
direction,

#(BHPA) = 2 #(A) , 1 3

Proof: perfectly A*-symmetric search space, numbers nodes expanded
directions A*-type searches within BHPA strictly last 2
f -values, termination possible point; since distinct
direction, amounts 2 nodes remaining 2 f -values:
#(A )1 , 2 = #(A)2 , 2
Depending Lmin = C achieved, 1 3 nodes must expanded
fulfill termination condition. Summing proves theorem.
2
Since practice f -values normally distinct (in direction), show
consequence realistic assumption | occurrence many different f -values.
meant sense number nodes f -value small compared
number nodes expanded.

Corollary 3.1 search space perfectly symmetric many different f values,

#(BHPA) 2 #(A)

Proof: Since several nodes f -value, expansion
3 nodes may saved optimal solution already found.
number nodes f -value small compared number nodes expanded,
however, #(BHPA).
2
So, strong assumption symmetry BHPA expands close twice many
nodes A*. possible conjecture Nilsson (1980) supported although
original assumption appears valid?
point search frontiers BHPA meet early, i.e., pass
without intersecting, go other! So, possibly large
region search space explored twice (as illustrated Fig. 3).
BS* avoids double exploration (see Fig. 3). Unfortunately, appears
dicult quantify size region. So, cannot determine tighter upper bound
number nodes expanded BS* without assumptions.
Fig. 3 illustrates search frontiers BS* typically \ragged".
means meetings occur \middle" well near (as observed
experiments).
let us look lower bounds number nodes expanded BHPA.
need assumption symmetry show general results.
Theorem 3.3 numbers nodes expanded BHPA bounded
min(X1; X2) + 1 #(BHPA)
293

fiKaindl & Kainz

A*





BHPA





region search space explored twice

BS*





nipping

pruning

Figure 3: illustration traditional bidirectional heuristic search front-to-end evaluations.
Xd = #d (A ) , #kd (A) number nodes would expand search
direction minus number nodes value fdk = C .
Proof: lower bound represents case earliest termination according Lemma
1. (At least 1 node expanded direction.)
2
Corollary 3.2 f -values distinct direction, number nodes
expanded BHPA bounded
min(#1 (A); #2(A)) #(BHPA)
Proof: Xd = #d (A) , 1 since 1 node n fd(n) = C .
2
Corollary 3.3 maximal improvement BHPA given
#(A) , min(X1; X2) , 1:
Proof: min(X1; X2) + 1 minimum number nodes expanded BHPA.
2
essence, shown certain conditions traditional bidirectional heuristic search front-to-end evaluations exemplified BHPA expand close twice
many nodes A*. original conjecture result based
apparently wrong assumption, found another | even obvious | effect
(partly) responsible.
addition, shown BHPA cannot much ecient A*
respect node expansions even best case. variant BS* without pruning
technique, lower bound number nodes expanded applies. general,
major problem traditional bidirectional heuristic search front-to-end evaluations
cost satisfying termination condition.
294

fiBidirectional Heuristic Search Reconsidered

3.2 Empirical Results

order provide evidence missile metaphor misleading, present new
empirical data performance BS*. Since perimeter search seems become
ecient increasing perimeter depth (Manzini, 1995), investigated
behavior experiments two different domains. present new empirical results
experiments provide explanation perimeter search works well
Fifteen Puzzle domain.
3.2.1 BS*

BS* classical best-first search algorithm requires exponential memory. So,
aware BS* implementation yet able solve dicult problem instances
Fifteen Puzzle, given domain-specific knowledge puzzle
Manhattan distance heuristic. experiments, BS* able solve 59 100
instances used Korf (1985), available 256 Mbytes main storage (on
Convex C3220).
gathered data runs BS* provide empirical evidence
missile metaphor misleading (in addition data already given Koll Kaindl
(1993)). average, BS* found first solution generation 7.2 percent
total number nodes generated. quality solution average 6.3
percent worse optimal solution. continuing searches, BS* found
optimal solutions generation 22.4 percent total number nodes generated
(again average). is, search effort BS* spent verify optimality.
means search frontiers BS* meet relatively early without use
wave-shaping techniques, even optimal solutions found rather quickly. However,
even BS* already found optimal solution problem instance,
\know" solution optimal. So, must continue search generate
remaining nodes order prove fact better solution available.
Relatively overall higher effort, BHPA would find first solution even \earlier"
BS*. course, BHPA needs exactly number nodes BS*
search frontiers meet. first meeting, however, would generate
nodes BS* search frontiers go other. search frontiers
would, however, pass illustrated missile metaphor, solutions could
found early.
3.2.2 Perimeter Search

Perimeter search achieved good results Fifteen Puzzle domain, solve
Fifteen Puzzle problem instance relatively fast limited memory. However,
approach bidirectional heuristic search seems understood suciently yet.
So, made experiments increasing perimeter depth two different domains.
results may seem quite surprising. cannot yet explain theoretically,
important right, try explain intuitively.
experiments, feasible use complete set 100 Fifteen Puzzle
problem instances used Korf (1985). Fig. 4 shows domain BIDA* works
well, especially terms number nodes generated. data normalized
295

fiResults relative Korfs IDA* %

Kaindl & Kainz

50

Nodes generated

45

Running time

40

35.3

42.0

34.2

35

32.7

30.7

29.7

30

28.0

27.8

29.1

27.4

25
20
15
10
5

4.1

3.2

2.5

1.9

1.5

1.1

0.9

0.7

0.5

0.4

0
10

11

12

13

14

15

16

17

18

19

BIDA* Perimeter Depth

Figure 4: Comparison BIDA* different perimeter depths Fifteen Puzzle (100
instances) | time optimum.
respective search effort IDA* (in Korf's implementation), since first
algorithm able solve random instances Fifteen Puzzle.4 running times
good.5
Consistently (Manzini, 1995, Table 1), Fig. 4 shows steady decrease
number nodes generated required running time increasing perimeter depth
reaches 16. perimeter depth, however, BIDA* achieves minimum running
time. exact perimeter depth optimum occurs may depend several
factors machine used eciency implementation. new
important finding is, however, optimum actually exists BIDA*.
optimum perimeter depth shown exist PS* Dillenburg Nelson (1994),
data presented Manzini (1995) suggested increasing perimeter depth
number evaluations performed BIDA* even decreases. larger perimeter depths,
however, savings terms node generation obviously outweighed larger cost
front-to-front evaluations. Note, data presented Manzini (1995)
show optimum amount memory required storing perimeter
depths greater 14 exhausted resources available experiments reported
there.
4. give idea overall diculty given problem set, note IDA* generates 363
million nodes average, needs slightly less half hour Convex C3220.
5. BIDA*'s result worse data reported Manzini (1995). primarily due use
different machine different implementation based ecient code IDA*
puzzle provided us Korf using. implementation overhead especially
wave shaping shows clearly even using runtime optimizations described Manzini
(1995). access implementation Manzini, E-mail communication
given hints it, agreement overall effect relative
running times due different implementations IDA*.

296

fiBidirectional Heuristic Search Reconsidered

Knowing existence optimum helps us better understand improvement perimeter search traditional approach bidirectional heuristic search
based front-to-front evaluations exemplified, e.g., BHFFA. advantage improved evaluation accuracy balanced large overhead time consumption
node evaluations. BIDA* tuned towards optimum, algorithm
BHFFA typically balance regard. BHFFA reason
find optimal solutions quite easy problems, perimeter search comparably much cheaper
per node searched, since much smaller frontier \targeted".
Although performance perimeter search cannot improved deliberately
using memory, optimum running time BIDA* Fifteen Puzzle
problems good. So, wanted see whether results
achieved another domain used experimenting algorithms.
made experiments finding optimal solutions set maze problems.6
problems, BIDA* based IDA* inecient due high number iterations. So,
used PS* (Dillenburg & Nelson, 1994) implements common underlying idea
| perimeter search | based A*. A* works well maze problems,
seems runtime optimization BIDA* cannot practically used A*-based
algorithm due excessive storage requirements, since every node Open information
every perimeter node would stored may affect computation
front-to-front evaluations. fact, Manzini (1995) states technique
applied depth-first search algorithm.
Based experiments, perimeter search approach appears work satisfactorily illustrated Fig. 5 | neither terms generated nodes terms
running time. data normalized respective search effort A*, since seems
ecient algorithm problem instances fit memory (see
optimality result A* unidirectional competitors Dechter & Pearl, 1985).7
Even comparably larger perimeter depths (50, 100, : : : , 250), numbers generated
nodes marginally improve (up 93.9 percent number nodes generated A*
shown figure), running time becomes quite high (up 358.7 percent).
running time reduced perimeter depths smaller 25,
real savings number nodes generated therefore improvement A*
observed.
considering different performances perimeter search domains, question arises, works well Fifteen Puzzle satisfactorily maze. Let us consider reason good results first, closer look
case perimeter depth 1. minimal perimeter around node Fifteen
6. use domain inspired use Rao et al. (1991). Problem instances
domain model task navigation presence obstacles. 100 instances drawn randomly
using approach behind Xwindows demo package Xmaze. heuristic evaluator, use
Manhattan distance Rao et al. (1991).
experiments, made following adaptations. order allow transpositions,
\install" wall three percent cases. leads roughly \density" transpositions
Fifteen Puzzle. Moreover, use much larger mazes | 2000 2000, order focus
dicult instances these, use instances h1 (s) 2000.
7. give idea overall diculty given problem set, note A* generates 2.7
million nodes average, needs less two minutes Convex C3220.

297

fiKaindl & Kainz

358.7
350

Nodes generated

Results relative A* %

303.0

Running time

300

244.0

250
185.1

200
150
100

139.0
119.8
99.3

98.7

97.4

96.2

95.0

93.9

50
0
25

50

100

150

200

250

PS* Perimeter Depth

Figure 5: Comparison PS* different perimeter depths maze problems (100
instances).
Puzzle contains two nodes. Still, perimeter approach saves half node
generations IDA*.
major improvement explained quite simply looking approach
improving heuristic evaluation function. Perimeter search \discovers"
search analogous improvement Manhattan distance heuristic presented
Korf Taylor (1996, p. 1203) name \last moves heuristic" (more precisely
part dealing exactly last move).8 precisely, cases dynamic
values increase h1 (n) two units, i.e., twice (unit) cost either arcs
two perimeter nodes.9 improved evaluations, many node generations
saved even using perimeter nodes.
Still, question remains improvements observed maze domain.
domains arcs unit costs, found major differences help us
explain phenomenon. Fifteen Puzzle problems relatively short (optimal) solutions,
due unit costs arcs overall cost solution relatively small (53.1
average). comparison, maze problems (in mazes size used) relatively
long (optimal) solutions relatively high cost solution (5262 average).
8. heuristic based last move solution, must return blank goal position.
order allow blank position, tiles next blank goal position must
certain places. Manhattan distance accommodate corresponding path
therefore increased two units.
9. relates property Manhattan distance heuristic itself. cases, increase
cost known arc (with cost 1) added increase heuristic estimate
evaluated node perimeter node (also 1) compared estimate t. remaining cases,
heuristic estimate evaluated node perimeter node reduces (by 1) compared
estimate t, cancels cost known arc.

298

fiBidirectional Heuristic Search Reconsidered

differences ected differences heuristic values (although used
domains less heuristic). given set Fifteen Puzzle problem
instances, h1 (s) = 37:1 average much smaller h1 (s) = 2361 given set
problem instances maze domain. data heuristic values
\Think-A-Dot" problems used Dillenburg Nelson (1994), note mean
path length given 18.4, i.e., even much smaller Fifteen Puzzle.
Let us assume Fifteen Puzzle maze domain
number perimeter nodes twice cost arc (i.e., two units) added.
means resulting dynamic evaluation improves static evaluation
absolute amount, quite different relative amount: 5.4 percent Fifteen
Puzzle compared 0.08 percent maze domain. So, dynamic improvement
heuristic effect much higher Fifteen Puzzle, leads much larger savings
terms node generations effort front-to-front evaluations.
summary, Fifteen Puzzle perimeter nodes improve static
evaluation, since twice (unit) costs arcs even cases simply
added. large effect domain heuristic values typically smaller
40. maze instances size experimented with, heuristic values
two orders magnitude larger, therefore many perimeter nodes would
required achieve much effect. These, however, make perimeter search expensive
terms running time probably storage requirement.
considerations, clear effect front-to-front evaluations
much steering frontiers together, rather improve heuristic evaluations
dynamically. particular, example two perimeter nodes illustrates
\wave shaping" real effect, rather improvement evaluation accuracy.

4. Generic Approach Non-Traditional Bidirectional Search
developed new generic approach bidirectional heuristic search integrates various
search algorithms typically leads hybrid combinations. Since approach
allow changing search direction once, viewed non-traditional
form bidirectional search.
major steps generic approach are:10
1. Assign search direction even nearly available memory
traditional best-first search.
2. Perform traditional best-first search assigned direction using given memory.
3. Unless best-first search already found optimal solution, perform search
reverse direction. Use memory structure built previous best-first
search, possibly together additional memory still available, compute
use front-to-end evaluations.
would dicult perceive even general approach subsumes
perimeter search. expensive front-to-front evaluations, however, wanted
10. approach different one proposed earlier (Kaindl, Kainz, Leeb, & Smetana, 1995).

299

fiKaindl & Kainz

transpositions

linear-space search



best-first search


Figure 6: specialization generic approach.
devise approach avoids need find balance cost
evaluations beneficial effect.
useful specialization generic approach uses memory sides
search space illustrated Fig. 6. traditional best-first search uses assigned
memory usual, e.g., A*, linear-space search uses much memory still
available transposition table (Reinefeld & Marsland, 1994). former first orders
sequence node generations finds transpositions. latter uses memory
finding transpositions another part search space, caching accurate
heuristic evaluations closer t.
limited memory available, approach exible. instance,
memory transposition table assigned, approach combines linear-space search
conventional best-first search bidirectional style. may look quite similar
BIDA*, note approach contrast performs front-to-end evaluations.
memory best-first search used find solutions earlier meeting frontier
(rather t).
sucient memory available even solving dicult problem instances
domain, search reverse direction may performed traditional bestfirst search A*. all, A* certain conditions certain sense optimal
respect node expansions (Dechter & Pearl, 1985).

4.1 Instantiating Limited Memory
First show generic approach instantiated limited memory
available. course, instantiation make use available domain-specific
information. particular, combine unidirectional search algorithms
best suit properties domain (see, e.g., Rao et al., 1991; Zhang & Korf, 1993).
example, domains IDA* choice, others depth-first branch-and-bound
(Lawler & Wood, 1966) much better. case limited memory, either
preferred A*.
present experimental results Fifteen Puzzle, domain
characterized distinct cost values. condition, reasonable
select IDA* linear-space search algorithm, since dicult problem instances
Fifteen Puzzle require much memory using A*, Manhattan distance
heuristic used. Since A* makes good use consistent heuristics one (Dechter &
Pearl, 1985), select part best-first search.
300

fiBidirectional Heuristic Search Reconsidered

Based key idea bidirectional search, let A* IDA* search opposite
directions steps 2 3 generic approach, respectively. instantiation
generic approach leads BAI (Bidirectional A* { IDA*).
Optionally, may give IDA* search part available memory
transposition table. Fig. 6 illustrates instantiation. call variant BAI due
use table BAI-Trans.
A* cannot find solution using given memory, IDA* searches reverse
direction towards frontier prior search. Since consider case finding
optimal solutions, search cannot always terminate immediately solution found.
better solution may exist, algorithm must find optimal one subsequently
prove optimal.
technically, IDA* part must changed slightly. Instead find
goal node, solution found whenever depth-first search meets frontier
opposing A* search. cost solution smaller cost best solution
found far (or first solution found) value stored. course, cost
best solution found far may sub-optimal, algorithm yet know
already optimal. However, stored value exceed non-overestimating
threshold IDA* part, depth-first search exited successfully optimal
solution.
addition necessary changes, IDA* part advantage start
increased initial threshold based admissible estimate optimal solution cost
determined A* part. Since assume consistent heuristic h, minimum
f = g + h nodes Open always admissible estimate. Therefore, estimate
higher usual initial threshold IDA*, used instead.
Moreover, necessary IDA* part search space already
explored A*. technically, depth-first search invoked IDA* meets
closed node opposing A* search frontier, branch cut (meeting open
node general insucient). call nipping according analogous method
described Kwa (1989).
ecient implementation Fifteen Puzzle even effort hashing every
node causes overhead cannot ignored. Therefore, implemented BAI
way avoids hashing nodes | based heuristic estimate |
knows frontier opposing A* search still reach.
According step 1 generic approach, search directions must assigned
A* IDA* part, respectively. traditional bidirectional search, Pohl (1971)
proposed used cardinality criterion problem determining frontier
select node expansion: continue searching frontier fewer open
nodes. utilized node expansion traditional bidirectional search
algorithms, BAI decide issue beginning whole search.
search space suciently symmetric, initial search direction
determined random. search space least slightly asymmetric
specific knowledge determining search direction available, seems reasonable
make shallow probes search space sides use idea behind
cardinality criterion. Since BAI incorporates IDA*, using algorithm probing
consistent overall approach. example Fifteen Puzzle, first
301

fiKaindl & Kainz

iterations IDA* searched sides, direction fewer generated
nodes assigned IDA* part overall search, since especially dicult problems
search much deeper A* part.
Let us shortly discuss behavior BAI. best case, would seem
A*. fact, BAI even better pure A*. BAI assigns search direction
dynamically, lead better results systematically going one direction.
worst case, BAI perform part A*, without savings IDA* part
(except effect nipping).
key question BAI saves effort without enough memory available
completing A* search. Primarily, save one IDA*'s iterations. Due
better initial threshold, early iterations saved. Since earlier
iterations comparably cheap, helps much less saving last iteration.
search terminated complete iteration IDA* cost best
solution already found larger new increased threshold. Therefore, large
savings possible BAI terminates earlier pure IDA*.

4.2 Instantiating Sucient Memory
let us sketch generic approach instantiated case sucient
memory available sense even solving dicult problem instances
domain, traditional best-first search terminate successfully given memory.
case interest order see whether bidirectional search better A*,
sense optimal unidirectional algorithms.
sucient memory available, instead IDA* (or depth-first branch-and-bound)
reverse search employ A*. fact, easy construct algorithm analogously BAI described above, using A* instead IDA*. instantiation
generic approach leads BAA (Bidirectional A* { A*). algorithm changes
search direction contrast BS*. better utilization approach
dynamically improving heuristic values based differences, introduce slight
variation algorithm below.

5. Approach Dynamically Improving Heuristic Values based
Differences
new approach dynamic improvements heuristic evaluations search based
differences known costs heuristic estimates. differences utilized
two concrete methods presented below. basic idea common methods
many nodes search, actual cost path
already known. Since static heuristic values normally gained rather cheaply,
differences computed signify error made evaluation compared
cost known path. differences utilized improve heuristic estimates
search.
order able compute differences, search must bidirectional.
focus context non-traditional approach bidirectional heuristic search
described above. Actually, application possible context traditional bidirec302

fiBidirectional Heuristic Search Reconsidered


B1
h1(A)

g1(A)

Search
frontier



g2*(B1)

Diff1*(B1)
h1(B1)


B2 Diff1*(B2)

Diff1*(Bi) = g2*(Bi) - h1(Bi)

Diff1*(B3)

Mindiff1 = min( Diff1*(Bi) )

B3



H1(A) = h1(A) + Mindiff1

Figure 7: illustration Add idea.
tional search BS*. involves, however, intricacies beyond scope
paper. So, interested reader referred (Kainz, 1996).

5.1 Add Method

first method instantiates approach adding constant derived differences heuristic values static evaluation function. Therefore, call Add
method.
Note, adding constant evaluations change order node
expansions unidirectional search algorithm A*. So, benefit approach
may immediately obvious. However, bidirectional search algorithms using frontto-end evaluations, estimates compared cost best solution found far
(which necessarily already optimal one), better estimates available
comparisons improves eciency due earlier termination. explain
detail apply approach context non-traditional approach
bidirectional heuristic search.
See Fig. 7 key idea method. assume consistency static heuristic
evaluator hd . Around goal node t, search examined part graph stored
optimal paths nodes Bi closed fringe t. node Bi , heuristic
value h1 (Bi ) computed subtracted optimal path cost g2(Bi ) = g2(Bi ) =
h1 (Bi ), resulting Diff1 (Bi ). actually error made heuristic evaluation
node Bi . minimum Diff1(Bi ) nodes Bi fringe computed |
call Mindiff1 .
point Add method consistent heuristic value h1 (A)
node outside stored graph underestimates h1 (A) least Mindiff1 . prove
precisely below, first need show result Diff1.

Lemma 5.1 heuristic h1 consistent, optimal path node n
intermediary node

Diff1(m) Diff1(n)
holds, i.e., Diff1 decrease optimal path decreasing distance goal
node t.
303

fiKaindl & Kainz

Proof: heuristic h1 consistent,
h1 (n) h1 (m) + k1 (n; m)
simply obtain

g2(m) , h1 (m) g2(m) + k1(n; m) , h1 (n)
Since n one optimal path t, know

g2(n) = g2(m) + k1 (n; m)
substitutions obtain

g2(m) , h1 (m) g2(n) , h1 (n)
equivalently
Diff1(m) Diff1(n)

2

proves lemma.

Theorem 5.1 heuristic h1 consistent, possible compute admissible

heuristic H1 node outside search frontier around

H1(A) = h1(A) + Mindiff1 h1 (A)

Proof: path exists node t, optimal path must exist,
let go frontier node Bj . (If path exists, h1 (A) infinite
theorem holds.) Lemma 1 definition Mindiff1 know
Mindiff1 Diff1(Bj ) Diff1 (A)

Since Diff1 error made heuristic h1 , write

h1 (A) + Diff1(A) = h1 (A)
substitution obtain

h1(A) + Mindiff1 h1 (A)

2

proves theorem.

Corollary 5.1 H1(A) admissible estimate frontier node.
Proof: replace Bj proof Theorem 3.1 without changing validity.
2

304

fiBidirectional Heuristic Search Reconsidered

Theorem 5.2 heuristic h1 consistent, H1 consistent.
Proof: heuristic h1 consistent,
h1 (n) h1 (m) + k1 (n; m)
Adding constant Mindiff1 sides leads

h1 (n) + Mindiff1 h1 (m) + Mindiff1 + k1(n; m)
means

H1(n) H1(m) + k1(n; m)
proves theorem.
2
let us sketch Add method utilized context nontraditional approach bidirectional heuristic search. using BAA, example,
first A* search must used compute value Mindiff1 (we assume starts
node t). Optimal paths nodes within search frontier guaranteed
frontier nodes themselves. suboptimal path found frontier node,
however, known optimal path leads another frontier node
optimal path t. So, change fmin, since costs suboptimal paths
cannot uence minimum. Mindiff1 reverse A* search constant
added h1 . call resulting algorithm Add-BAA.
course, larger value Mindiff1 preferred given amount search.
So, search starting around better guided expanding always one
nodes n minimal Diff1 (n). call variant Add-BDA.11
necessary check, whether node evaluated outside fringe
graph around t. simply achieved Add-BAA Add-BDA hashing,
done anyway. node fringe first A* search matched,
solution already found, first node path inside stored graph around
matched, path need pursued further, since optimal continuation
already known. So, evaluator H1 actually used, consistent, therefore
A* re-open nodes (Pearl, 1984). search terminates selects
node n expansion f1 (n) = g1 (n) + H1 (n) smaller cost
best solution found far, proven way optimal one.
details method theoretical properties refer interested
reader (Kainz, 1994).

5.2 Max Method

second method computes estimate based differences uses
maximum static estimate. Therefore, call Max method.
See Fig. 8 key idea method. assume consistency static heuristic
evaluator hd , path cost g1(A) known. know
evaluation node A: h2 (A) g1(A). difference Diff2 (A) = g1 (A) , h2 (A).
use difference construction admissible estimate F1 (A) cost
11. Earlier called Add-A* (Kainz & Kaindl, 1996).

305

fiKaindl & Kainz



k1(A,B1)

g1(A)
h1(A)

Diff2(A)
h2(A)

B1

h2(B1)

g*
2(B1)

h2(B2)



h2(B3)

Diff2(A) = g1(A) - h2(A)
fmin2 = min( g*2 (Bi) + h2(Bi) )

*
B2 g2(B2)


g*2(B3)

B3



H1(A) = max( h1(A), fmin2 - h2(A) )
F1(A) = max( f1(A), fmin2 + Diff2(A) )

Figure 8: illustration Max idea.
optimal path constrained go A. Note, g1(A) = g1(A)
necessary, call difference used Diff2(A) instead Diff2 (A).
addition, assume search performed reverse direction.
search, assume nodes Bi closed fringe optimal paths
known, cost g2(Bi ). Therefore, possible compute
fmin2 = min
(g (B ) + h2 (Bi ))
2

Based assumptions, construct dynamic evaluation function
follows.
Theorem 5.3 heuristic h1 consistent, possible compute admissible
heuristic h01 node outside search frontier around
h01(A) = fmin2 , h2(A) h1 (A)
Proof: Every path must go frontier node Bj . cost Cj
path bounded follows:
Cj k1(A; Bj ) + g2(Bj )
h1 consistent, possible estimate optimal cost path two nodes

k1(A; Bj ) h2 (Bj ) , h2 (A)
Therefore, write
Cj h2(Bj ) , h2 (A) + g2(Bj )
Since fmin2 = min
(g (B ) + h2 (Bi )), write
2

Cj fmin2 , h2 (A)
valid cost path including optimal one,

conclude

proves theorem.

h1(A) fmin2 , h2 (A)
306

2

fiBidirectional Heuristic Search Reconsidered

Corollary 5.2 h01(A) admissible estimate frontier node.
Proof: replace Bj proof Theorem 3.3 without changing validity.
2

dynamic evaluation function necessarily better nodes static
function, useful combine functions:

H1(A) = max(h1(A); fmin2 , h2 (A))
Since admissible resulting function admissible. value fmin2
changes search, however, H1 consistent.
Since formula computing H1 originally derived difference Diff2 (A) =
g1(A) , h2 (A) included, derive overall evaluation function

F1 (A) = max(f1(A); fmin2 + Diff2 (A))
let us sketch Max method utilized context nontraditional approach bidirectional heuristic search. using BAI, example,
A* search starting first must used compute value fmin2 (we assume
starts node t). Again, Add method, necessary optimal
paths frontier nodes known. getting values fmin2 large
possible given amount search, usual strategy selecting node minimal
f2 appropriate here.
subsequent IDA* search within BAI must perform hashing graph stored
around order check, whether node evaluated outside fringe
graph around t. latter case new solution found. call resulting algorithm
Max-BAI. transposition table (Reinefeld & Marsland, 1994) used addition
BAI-Trans, call Max-BAI-Trans.
interestingly, IDA* utilize Max method without additional storage
requirements. Let us sketch basic approach linear-space application
method here. IDA* normally searches one direction only, let alternate
search direction iteration solution found. Actually, procedure
outside generic approach bidirectional search presented above. include
since linear-space approach special interest. fmini computed one iteration
used subsequent iteration, must search alternate direction
use value. example, iteration searching s, adapted IDA*
computes hmax1 = max(h1 (Bi )) nodes Bi . value used estimate
subsequent iteration checking, whether node evaluated \outside":
h1 (A) > hmax1 true, node cannot \inside" H1(A) safely used.
check substitutes hashing stored graph. Since static heuristic function normally
underestimates, however, nodes heuristic H1 used although would
theoretically correct use it. call resulting algorithm based idea
Max-IDA*.
details method theoretical properties refer interested
reader (Kainz, 1996).
307

fiKaindl & Kainz

Results relative Korf's IDA* %

100.0 100.0

Nodes generated

100

Running time
76.1

80

67.1

66.7 66.7
54.4

60

50.8

40

30.1

27.6

27.4

24.5
15.4

13.9

20

4.3

0.9
0
MaxIDA*

IDA*

IDA*Probing

IDPS*
Depth=2

Trans

BIDA*
Depth=16

BAITrans

Max-BAITrans

Figure 9: Comparison Fifteen Puzzle (100 instances).

6. Results Experiments New Approaches

order provide empirical evidence effectiveness eciency
new approaches, made experiments two different domains: Fifteen Puzzle mazes.

6.1 Fifteen Puzzle

First let us look specific experimental results finding optimal solutions
set Fifteen Puzzle problems, complete set 100 instances used Korf
(1985). compare algorithms achieve previously best results domain
new algorithms. compared algorithms use domain-specific knowledge
puzzle Manhattan distance heuristic.12 main storage available
Convex C3220 used 256 Mbytes.
Fig. 9 shows comparison several algorithms terms average number node
generations running times. data normalized respective search
effort IDA* (in Korf's implementation). already noted above, IDA* needs average
slightly less half hour machine used find optimal solution
one problem instance. So, even slight improvements mean notable savings time.
IDA*, Max-IDA* IDA*-Probing linear-space algorithms use additional
storage, performance cannot compete algorithms use 256
Mbytes. Max-IDA* generates 54.4 percent number nodes generated IDA*
due dynamic improvements heuristic evaluations according difference
approach. Since these, however, imply overhead per node searched, needs 76.1
percent IDA*'s running time. IDA*-Probing variant IDA* uses
probing idea selecting search direction. Although search space sliding-tile
puzzle appears quite symmetric, interesting see much gained
selecting search direction dynamically. Since IDA*-Probing overhead
running time, even faster Max-IDA*. order see well probing via three
iterations already indicates better search direction, compared result
12. much improved heuristic functions, much ecient searches result (Culberson & Schaeffer,
1996) even solving Twenty-Four Puzzle instances become feasible (Korf & Taylor, 1996).

308

fiBidirectional Heuristic Search Reconsidered

perfect oracle. Using would still generate 64 percent IDA*'s nodes, i.e., IDA*Probing overhead generated nodes determining search direction
less 0.1 percent overall 3 percent worse this. Systematically searching
backward direction, however, significantly better systematically searching
forward direction due high standard deviations, although saves 17 percent.
IDPS* uses nodes additional storage perimeter. Due
related overhead front-to-front evaluations, needs running time
IDA*-Probing, although generates much fewer nodes.13
Trans (using 256 Mbytes memory) achieves savings half running time
compared IDA*. saves even much node generations amount memory,
effort hashing slows down.14
Another technique prune duplicate nodes proposed Taylor Korf (1993),
using finite state machine. results included Fig. 9, since lack data
running time (no data given Taylor Korf (1993), reimplement technique). IDA* employing pruning technique generated 100.7 million
nodes set instances reported Taylor Korf (1993), means
27.7 percent number nodes generated pure IDA*. finite state machine
achieved result contained 55,441 states, requiring modest amount storage.
course, finite state machine must built pre-processing stage first.
use search involves small constant overhead running time. So,
sliding-tile puzzles, approach seems better transposition tables
eliminating duplicates. actually appears represent successful approach yet
solving Fifteen Puzzle problems using unidirectional search.
principle, provided available storage BIDA* (Manzini, 1995),
ecient algorithm perimeter approach. given 256 Mbytes storage,
BIDA* store maximum 1 million perimeter nodes. would correspond
perimeter depth 19, BIDA* generates 0.4 percent number nodes
generated IDA*, needs 42 percent IDA*'s running time. So, shown Fig.
4 use memory savings number nodes generated,
optimum running time smaller perimeter size (16), show
Fig. 9. reduced perimeter, BIDA* achieves best result terms nodes
13. results reported Dillenburg Nelson (1994) based runs using different sample set
Fifteen Puzzle, different perimeter depth. Using perimeter depth (4), results
Korf's set re-implementation even better terms number node generations,
much slower terms running time (even slower IDA*). personal communication
John Dillenburg turned implementation IDA* slower Korf's one (which
using) factor 60 per generated node. implementation overhead especially
wave shaping show clearly ecient one. Since smaller perimeter
depth means fewer stored nodes therefore less overhead wave shaping, perimeter depth
2 results better running time, consequently show data figure.
14. data figure gained using re-implementation Trans based ecient code provided
Jonathan Shaeffer. Note different way presenting results: absolute data figure vs.
relative problem diculty Reinefeld Marsland (1994). re-implement Trans, since
data performance Trans amount memory used available, since
integrate technique algorithms. Actually, Trans+Move best algorithm
described Reinefeld Marsland (1994), absolute results less one percent better
Trans. Therefore, re-implement Trans+Move cannot include
figure.

309

fiKaindl & Kainz

generated | 0.9 percent number nodes generated IDA*. BIDA*'s
overhead computing front-to-front evaluations smaller IDPS*, BIDA*
needs 27.4 percent IDA*'s running time.15
algorithms BAI-Trans Max-BAI-Trans store maximum 5 million nodes
implementation algorithms given 256 Mbytes storage. BAI-Trans
generates clearly nodes (13.9 percent IDA*) BIDA*, since overhead
per node much smaller, running time even slightly better (24.5 percent). Max-BAITrans | additionally utilizing new difference approach | achieves fastest searches,
needing 15.4 percent time needed IDA*. achieving result, uses
4 million nodes Max method (and BAI) 1 million nodes Trans. order
see uence Trans, compare result Max-BAI (not shown
Fig. 9 order clutter it) uses 4 million nodes Max method
(and BAI). Needing 19.2 percent time used IDA*, slightly slower
Max-BAI-Trans, shows comparably modest uence Trans.
summary, new approach bidirectional heuristic search enhanced Max
method achieves fastest searches finding optimal solutions Fifteen Puzzle
using Manhattan distance heuristic knowledge source. superiority Max-BAI-Trans terms running time previous algorithms statistically
significant. example, probability improvement running time
BIDA* due chance uctuation smaller 0.15 percent according test
compares means paired samples absolute running times, even much
smaller according test data relative diculty instance
well according sign test.16 using less ecient implementations IDA*
basis, difference would become smaller, since approach less overhead per
node searched therefore \gains" less compared pure IDA*. However, prefer
compare algorithms using ecient implementation available.
details results see (Kainz, 1996).

6.2 Mazes

order get better understanding usefulness new approach, made
experiments second domain | finding shortest paths maze.
maze problems described Subsection 3.2. addition 2000 2000
mazes, made experiments much smaller 1000 1000 mazes, order see
whether size uences relative performance various algorithms. compare
known algorithms achieve best results domain (as far found)
algorithms Add-BAA Add-BDA. traditional shortest-path algorithm Dijkstra
(1959) corresponds A* without using heuristic knowledge, need explicitly
include experiments. experiments, compared algorithms use
domain-specific knowledge Manhattan distance heuristic, main
storage available Convex C3220 used 256 Mbytes.
15. noted already Subsection 3.2, BIDA*'s result worse data reported Manzini
(1995), primarily due using different machine different implementation based
ecient code IDA* puzzle provided us Korf using.
16. details statistic tests used refer interested reader (Kaindl, Leeb, & Smetana,
1994; Kaindl & Smetana, 1994).

310

fiBidirectional Heuristic Search Reconsidered

Results relative A* %

160

Nodes generated

144.2

Running time

140
120

119.8
103.5

99.3

100 100

99.3
87.5

100

70.7 71.7

80
60
40
20
0
BS*

PS*
Depth=25

A*

Add-BAA

Add-BDA

Figure 10: Comparison maze problems (100 instances).
Fig. 10 shows comparison several algorithms terms average number
node generations running times. data normalized respective search
effort A*. already noted above, A* needs average less two minutes
machine used find optimal solution one problem instance.
BS* generates slightly nodes solving problems A* (103.5 percent),
running time even worse. may seem implementation BS*
could optimized, clear overhead compared A*. So,
BS* certainly improve A* here.
PS* (Dillenburg & Nelson, 1994) | using perimeter search, i.e., front-to-front
method | generates 99.3 percent number nodes A*, needs 119.8 percent
time used A*. data correspond perimeter depth 25,
best results shown Fig. 5 terms running time (see discussion
Subsection 3.2). So, PS* cannot really improve A* here.
algorithms Add-BAA Add-BDA generate clearly fewer nodes A* (87.5
70.7 percent, respectively). better performance Add-BDA ects higher
Mindiff1 value achieved guiding first two best-first searches
expanding always one nodes n minimal Diff1(n). precisely, Add-BDA
achieved Mindiff1 = 1174 (from reverse search 750k nodes), Add-BAA achieved
Mindiff1 = 811 (from reverse search even 1000k nodes). performance AddBAA terms running time is, however, still much A* (at least
implementation derived BS*). Add-BDA achieves fastest searches, needing
71.7 percent time needed A*. So, application approach dynamically
improving heuristic values feasible little overhead.
superiority Add-BDA previous algorithms statistically significant.
example, probability improvement terms running time A* due
chance uctuation smaller 0.005 percent according three statistic tests
made analogously Fifteen Puzzle data. significance result
holds improvement respect number node generations. Add-BDA
A* well algorithms compared generate child nodes
node expansions, superiority Add-BDA algorithms statistically
311

fiKaindl & Kainz

Table 1: Overview approaches bidirectional heuristic search.
front-to-front
front-to-end
traditional
BHFFA, BHFFA2 BHPA, BS*
non-traditional PS*, IDPS*, BIDA* Max-BAI-Trans, Add-BDA
significant respect. particularly interesting, since optimality result
A* unidirectional algorithms stated sense A* never expands node
could skipped (unidirectional) algorithm (Dechter & Pearl, 1985).
Since relative results 1000 1000 mazes similar, show
explicitly (see, however, Kainz, 1996). provide empirical evidence
performance algorithms peculiar certain size mazes.

7. Discussion
presentation new approach bidirectional heuristic search experimental results, let us put perspective. Table 1 provides overview existing
approaches according way evaluating way organizing change(s)
search direction. algorithms instantiate new generic approach fall
category non-traditional bidirectional heuristic search algorithms (that change search
direction once) perform front-to-end evaluations. approach allows
coping limited memory (e.g., Max-BAI Max-BAI-Trans), useful
case sucient memory (e.g., Add-BDA).
Due avoiding expensive front-to-front evaluations, approach dynamically improving heuristic evaluations less effective perimeter search saving node generations (at least Fifteen Puzzle domain). However, less overhead therefore
ecient per node searched terms running time.
viewpoint Table 1, approach somehow \completes" picture bidirectional heuristic search. (Note, however, non-traditional approach found
independently work perimeter search.) Still, ample opportunity
research bidirectional search, especially looking perspectives. Another issue is, e.g., whether linear-space search involved not. propose
paper Max-IDA*, algorithm alternates search direction every
iteration order able use information previous iteration improving
heuristic evaluations dynamically. Yet another perspective whether algorithm
designed find optimal solutions not. paper, focused admissible
search algorithms. discussed above, however, exist "-admissible bidirectional
search algorithms guarantee solutions known error bound, well others
find solutions without guarantee quality (e.g., d-node retargeting).
contrasting traditional non-traditional approaches bidirectional
heuristic search, may appear strange less exible approach delivers
better results. \better" change search direction once?
dicult provide generally convincing answer question, let us summarize
observations:
312

fiBidirectional Heuristic Search Reconsidered

Traditional bidirectional search typically requires exponential space. Kaindl

Khorsand (1994) showed search possible using limited memory,
complexity algorithms runtime eciency insucient.

perimeter depths perimeter search successful, perimeters

much smaller frontiers traditional front-to-front algorithms.
parameterizing perimeter depth possible balance effort front-tofront evaluations effect improving heuristic evaluations dynamically.

runtime optimizations BIDA* IDPS* feasible perimeter
stays constant (at least iteration).

Mindiff value Add method becomes higher search computing

generates nodes. So, context traditional bidirectional search
initially small.

Applying Max idea becomes much complex, e.g., BS* search
frontiers change (Kainz, 1996).

general, one major problems heuristic search use available
limited memory effectively. Pure unidirectional approaches utilizing limited memory led
less convincing results (Chakrabarti et al., 1989; Sen & Bagchi, 1989; Russell, 1992;
Ghosh et al., 1994; Reinefeld & Marsland, 1994) non-traditional approaches
bidirectional search shown Table 1. particular, generic approach allows
exible effective use available memory. is, however, partly due integration
various unidirectional strategies. Future work may investigate direct use unidirectional approaches utilizing limited memory instantiations generic approach
bidirectional search.
addition, bidirectional search allows use memory dynamically improving
heuristic evaluations ways infeasible strictly unidirectional search.
demonstrated front-to-front approach well difference method.
following simple idea implicitly behind approaches may illustrate this. Given
breadth-first (uniform-cost) search depth d, node outside frontier must
least + 1 steps away start s. reverse search towards may use
fact compute estimate node outside frontier least + 1.
idea cannot used strictly unidirectional search. Note, however, approaches
discussed much complex useful simple idea. Since take
known costs heuristic estimates well differences account,
provide much better estimates especially nodes far outside already given
opposite search frontier.
sense, possible view difference approach learning, since
differences predicted actual outcomes important. Usual machine
learning research, however, strives using results one problem instance solving
subsequent instances, attempt. in-depth discussion relationship
outside scope paper. Note, however, approaches using front-tofront evaluations could considered viewpoint.
313

fiKaindl & Kainz

8. Conclusion

Based new insights previous approaches bidirectional heuristic search, propose paper

new generic approach non-traditional bidirectional search front-to-end evaluations,

new approach dynamically improving heuristic values context.
showed successfully instantiate generic approach important
case available memory limited. memory utilized eciently
improving heuristic values. certain problems sucient memory available,
proposed instantiation form algorithm challenges A*,
certain sense optimal unidirectional search algorithms. optimality result A*
unidirectional competitors Dechter Pearl (1985) imply bidirectional
search cannot ecient, experiments found empirical evidence
new algorithm ecient A* terms node expansions
running time. showed approach ecient terms running time
bidirectional unidirectional search approach using information
two different domains. results statistically significant.
traditional bidirectional search yet achieve improvements admissible unidirectional search, non-traditional way performing opposing searches
sequence | exemplified perimeter search approach | seems
great potential. sense, show bidirectional heuristic search viable
consequently propose search strategy reconsidered.

Acknowledgements

years, several people cooperated first author research heuristic
search particular bidirectional search: Aliasghar Khorsand, Andreas Koll, Angelika
Leeb, Harald Smetana Roland Steiner. work served basis work
presented paper. experiments Convex C3220 computing
center TU Vienna available. implementations based ecient
code IDA* A* puzzle made available Richard Korf ecient hashing
schema Jonathan Shaeffer. Finally, acknowledge useful comments earlier drafts
Andreas Auer, Dennis de Champeaux, Stefan Kramer, Giovanni Manzini, Ira Pohl
Roland Steiner. Parts paper already appeared Proc. Fourteenth International
Joint Conference Artificial Intelligence (IJCAI-95) Proc. Thirteenth National
Conference Artificial Intelligence (AAAI-96).

Appendix. Glossary Notation
s;


C

Start node goal/target node, respectively.
Current search direction index; search forward
direction = 1, backward direction = 2.
Cost optimal path t.
314

fiBidirectional Heuristic Search Reconsidered

kd (m; n)
gd(n)
hd (n)
gd(n); hd(n)
fd (n)
fdj
Hd(n)
Fd (n)
Lmin
Opend
Closedd
jOpendj

#(a)
#d (a)
#jd (a)

Cost optimal path n = 1, n = 2.
Cost optimal path n = 1, n = 2.
Cost optimal path n = 1, n = 2.
Estimates gd(n) hd (n), respectively.
Static evaluation function: gd (n) + hd (n).
One f -values expanded nodes search direction d.
Dynamic estimate hd (n).
Dynamic evaluation function: gd (n) + Hd (n).
Cost best (least costly) complete path found far t.
set open nodes search direction d.
set closed nodes search direction d.
Number nodes Opend .
Number nodes expanded algorithm a.
Number nodes expanded algorithm search direction d.
Number nodes value fdj expanded algorithm
search direction d.

References

Chakrabarti, P., Ghose, S., Acharya, A., & DeSarkar, S. (1989). Heuristic search restricted memory. Artificial Intelligence, 41 (2), 197{221.
Culberson, J., & Schaeffer, J. (1996). Searching pattern databases. McCalla, G.
(Ed.), Advances Artificial Intelligence, pp. 402{416. Springer-Verlag, Berlin.
Davis, H., Pollack, R., & Sudkamp, T. (1984). Towards better understanding bidirectional search. Proc. Fourth National Conference Artificial Intelligence (AAAI84), pp. 68{72. Menlo Park, CA: AAAI Press / MIT Press.
de Champeaux, D. (1983). Bidirectional heuristic search again. J. ACM, 30 (1), 22{32.
de Champeaux, D., & Sint, L. (1977). improved bidirectional heuristic search algorithm.
J. ACM, 24 (2), 177{191.
Dechter, R., & Pearl, J. (1985). Generalized best-first strategies optimality A.
J. ACM, 32 (3), 505{536.
Dijkstra, E. (1959). note two problems connexion graphs. Numerische
Mathematik 1, pp. 269{271.
Dillenburg, J., & Nelson, P. (1994). Perimeter search. Artificial Intelligence, 65 (1), 165{178.
Ghosh, S., Mahanti, A., & Nau, D. (1994). ITS: ecient limited-memory heuristic
tree search algorithm. Proc. Twelfth National Conference Artificial Intelligence
(AAAI-94), pp. 1353{1358. Menlo Park, CA: AAAI Press / MIT Press.
Hart, P., Nilsson, N., & Raphael, B. (1968). formal basis heuristic determination
minimum cost paths. IEEE Transactions Systems Science Cybernetics (SSC),
SSC-4 (2), 100{107.
315

fiKaindl & Kainz

Kaindl, H. (1990). Tree searching algorithms. Marsland, T., & Schaeffer, J. (Eds.),
Computers, Chess, Cognition, pp. 133{158. Springer-Verlag, New York.
Kaindl, H., Kainz, G., Leeb, A., & Smetana, H. (1995). use limited memory
heuristic search. Proc. Fourteenth International Joint Conference Artificial Intelligence (IJCAI-95), pp. 236{242. San Francisco, CA: Morgan Kaufmann Publishers.
Kaindl, H., & Khorsand, A. (1994). Memory-bounded bidirectional search. Proc. Twelfth
National Conference Artificial Intelligence (AAAI-94), pp. 1359{1364. Menlo Park,
CA: AAAI Press / MIT Press.
Kaindl, H., Leeb, A., & Smetana, H. (1994). Improvements linear-space search algorithms. Proc. Eleventh European Conference Artificial Intelligence (ECAI-94),
pp. 155{159. Chichester, England: Wiley.
Kaindl, H., & Scheucher, A. (1992). Reasons effects bounded look-ahead search.
IEEE Transactions Systems, Man, Cybernetics (SMC), 22 (5), 992{1007.
Kaindl, H., & Smetana, H. (1994). Experimental comparison heuristic search algorithms.
AAAI-94 Workshop Experimental Evaluation Reasoning Search Methods,
pp. 11{14.
Kainz, G. (1994). Heuristische Suche Graphen mit der Differenz-Methode. Diplomarbeit,
Technische Universitat Wien, Vienna, Austria.
Kainz, G. (1996). Neue Algorithmen fur die bidirektionale heuristische Suche. Doctoral
dissertation, Technische Universitat Wien, Vienna, Austria.
Kainz, G., & Kaindl, H. (1996). Dynamic improvements heuristic evaluations
search. Proc. Thirteenth National Conference Artificial Intelligence (AAAI-96),
pp. 311{317. Menlo Park, CA: AAAI Press / MIT Press.
Koll, A., & Kaindl, H. (1993). Bidirectional best-first search bounded error: Summary
results. Proc. Thirteenth International Joint Conference Artificial Intelligence
(IJCAI-93), pp. 217{223. San Francisco, CA: Morgan Kaufmann Publishers.
Korf, R. (1985). Depth-first iterative deepening: optimal admissible tree search. Artificial Intelligence, 27 (1), 97{109.
Korf, R. (1990). Real-time heuristic search. Artificial Intelligence, 42 (2{3), 189{212.
Korf, R., & Taylor, L. (1996). Finding optimal solutions Twenty-Four Puzzle. Proc.
Thirteenth National Conference Artificial Intelligence (AAAI-96), pp. 1202{1207.
Menlo Park, CA: AAAI Press / MIT Press.
Kwa, J. (1989). BS : Admissible Bidirectional Staged Heuristic Search Algorithm.
Artificial Intelligence, 38 (2), 95{109.
Lawler, E., & Wood, D. (1966). Branch-and-bound methods: survey. Operations Research,
14 (4), 699{719.
316

fiBidirectional Heuristic Search Reconsidered

Manzini, G. (1995). BIDA*: improved perimeter search algorithm. Artificial Intelligence,
75 (2), 347{360.
Nilsson, N. (1980). Principles Artificial Intelligence. Tioga, Palo Alto, CA.
Pearl, J. (1984). Heuristics: Intelligent Search Strategies Computer Problem Solving.
Addison-Wesley, Reading, MA.
Pohl, I. (1970). First results effect error heuristic search. Meltzer, B., &
Michie, D. (Eds.), Machine Intelligence 5, pp. 219{236. Edinburgh University Press,
Edinburgh.
Pohl, I. (1971). Bi-directional search. Machine Intelligence 6, pp. 127{140 Edinburgh.
Edinburgh University Press.
Politowski, G., & Pohl, I. (1984). D-node retargeting bidirectional heuristic search.
Proc. Fourth National Conference Artificial Intelligence (AAAI-84), pp. 274{277.
Menlo Park, CA: AAAI Press / MIT Press.
Rao, V., Kumar, V., & Korf, R. (1991). Depth-first vs best-first search. Proc. Ninth
National Conference Artificial Intelligence (AAAI-91), pp. 434{440. Menlo Park,
CA: AAAI Press / MIT Press.
Reinefeld, A., & Marsland, T. (1994). Enhanced iterative-deepening search. IEEE Transactions Pattern Analysis Machine Intelligence (PAMI), 16 (12), 701{709.
Russell, S. (1992). Ecient memory-bounded search methods. Proc. Tenth European
Conference Artificial Intelligence (ECAI-92), pp. 1{5. Chichester, England: Wiley.
Russell, S., & Norvig, P. (1995). Artificial Intelligence: Modern Approach. Prentice Hall,
Englewood Cliffs, NJ.
Sen, A., & Bagchi, A. (1989). Fast recursive formulations best-first search allow
controlled use memory. Proc. Eleventh International Joint Conference Artificial Intelligence (IJCAI-89), pp. 297{302. San Francisco, CA: Morgan Kaufmann
Publishers.
Taylor, L., & Korf, R. (1993). Pruning duplicate nodes depth-first search. Proc.
Eleventh National Conference Artificial Intelligence (AAAI-93), pp. 756{761.
Menlo Park, CA: AAAI Press / MIT Press.
Zhang, W., & Korf, R. (1993). Depth-first vs. best-first search: new results. Proc.
Eleventh National Conference Artificial Intelligence (AAAI-93), pp. 769{775.
Menlo Park, CA: AAAI Press / MIT Press.

317


