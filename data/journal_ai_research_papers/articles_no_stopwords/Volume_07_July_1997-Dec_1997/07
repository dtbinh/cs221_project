journal artificial intelligence

submitted published

bidirectional heuristic search reconsidered
hermann kaindl
gerhard kainz

hermann kaindl siemens
gerhard kainz siemens


siemens ag osterreich
pse
geusaugasse
vienna austria

abstract

assessment bidirectional heuristic search incorrect since first
published quarter century ago quite long time search strategy
achieve expected major misunderstanding
reasons behind although still wide spread belief bidirectional heuristic
search aicted search frontiers passing demonstrate
conjecture wrong finding present generic
bidirectional heuristic search dynamically improving heuristic
values feasible bidirectional search approaches put perspective
traditional recently proposed approaches order facilitate
better overall understanding empirical experiments approaches
bidirectional heuristic search performed eciently
limited memory suggest bidirectional heuristic search appears
better solving certain dicult corresponding unidirectional search
provides evidence usefulness search strategy long neglected
summary bidirectional heuristic search viable consequently propose
reconsidered

background introduction
represented state space graph solutions
paths given start node goal target node finding solution
attempted searching graph search guided heuristic information
called heuristic search work heuristic search solving deals
unidirectional approaches start heading towards node see e g
pearl
one goal node explicitly given search operators reversible
bidirectional search possible proceeds forward direction
backward direction see e g nilsson strictly speaking
even required operators inverses necessary given node n
set parent nodes pi determined exist operators lead pi
n searching backwards means generating parent nodes successively goal node
see e g russell norvig words backward search implements reasoning
operators backward direction
illustrating example class bidirectional search
usefully applied consider finding shortest path two given places
given map city case one way streets bidirectional search implements
c ai access foundation morgan kaufmann publishers rights reserved

fikaindl kainz

reasoning following order arrive one way street leading towards
may used slightly adapted class cost driving street may

different depending driving direction steep street top mountain
may serve example bidirectional search works correctly case
backward search implements reasoning backward direction takes account
cost driving forward direction formally k n k n cost
optimal path n k used notational convenience bidirectional
search dealt work correctly conditions
require operators reversible cost path
direction
bidirectional search shown ecient unidirectional counterpart
heuristic knowledge unavailable inverse originally found
experiments bidirectional heuristic search pohl since kind search
work expected consensus conjecture bidirectional heuristic
search aicted search frontiers passing without intersecting
situation metaphorically compared pohl missiles pass
illustrated figure reprinted nilsson fig nilsson conjectured
case bidirectional search may expand twice many nodes would
unidirectional one
original bhpa proposed pohl may actually
inecient performance missile metaphor wrong misleading demonstrate
bidirectional heuristic search actually aicted search frontiers
passing performance bhpa much worse originally expected
two different reasons
bhpa search frontiers typically go
major effort spent search frontiers already met finding
better solutions one found first meeting search frontiers
optimal one finally proving indeed better solution possible
first reason specific bhpa incidentally resolved technical improvements introduced related bs kwa second
issue however major obstacle eciency bs actually bidirectional search performs heuristic front end evaluations e evaluations
estimate minimal cost path evaluated node search front
note kind evaluations performed typical unidirectional search
common belief missile metaphor however called wave shaping
developed de champeaux de champeaux sint
politowski pohl idea steer search wave fronts together
contrast bhpa bs perform front front evaluations e evaluations estimate minimal cost path evaluated node one search
front nodes opposing front fact achieve large reductions
number nodes searched compared perform front end evaluations however excessively computationally demanding
notation explained appendix



fibidirectional heuristic search reconsidered

restriction solution quality still reductions number nodes
searched front front evaluations come performing
front end evaluations suffer search frontiers passing

order answer important question let us shortly focus common property
heuristic evaluation functions estimate minimal cost path applying
heuristic knowledge static information encoded state information node
evaluated static evaluation functions typically evaluate error e
difference minimal cost path heuristic estimate cases
greater zero improve accuracy given static evaluation function
perform search utilize since involves dynamic changes call
dynamic evaluation function dynamic evaluations bounded look ahead search
studied contexts kaindl scheucher
static evaluation errors typically smaller paths smaller cost
observed pearl front front evaluations therefore typically accurate
front end evaluations addition costs paths nodes
opposing search frontier respectively known overall evaluations
front front much accurate front end evaluations since
former utilize search opposing direction may view
dynamically improving heuristic values static evaluation function due
asset wave shaping achieve large reductions terms nodes generated
since perform front front evaluations however quite expensive terms
running time per node examined calls finding appropriate balance
fact dillenburg nelson well manzini developed recent nontraditional bidirectional search called perimeter search achieves exactly

devised computationally much cheaper dynamic improvements call difference utilizes differences known costs
heuristic estimates given evaluation function improve heuristic estimates
function difference applied bidirectional heuristic search
perform heuristic front end evaluations exemplified two
methods dynamic improvements heuristic evaluations search
devised bidirectional heuristic search performs heuristic
front end evaluations dynamic improvements heuristic evaluations
search embedded eciently effectively generic sense
encompasses whole class non traditional bidirectional search
instantiated case availability sucient
memory well case limited memory
experiments suggest bidirectional heuristic search improve
unidirectional heuristic search respect generated nodes running time
certain finding optimal solutions since missile metaphor wrong
bidirectional heuristic search without time consuming
front front evaluations bidirectional heuristic search viable propose
reconsidered


fikaindl kainz

organized following manner first discuss previous work
present theoretical empirical existing approaches bidirectional
heuristic search describe generic non traditional bidirectional
search two instantiations thereafter propose dynamically
improving heuristic values differences known costs heuristic
estimates presentation experimental applying approaches
discuss context approaches bidirectional heuristic search
previously proposed

previous work

order make self contained sketch essentials previous work
heuristic search focus bidirectional heuristic search without going
detail necessary understand previous work
approaches

unidirectional heuristic search

many unidirectional search presented would prohibitive
review rather focus unidirectional form
basis bidirectional search discussed first review traditional
best first search hart nilsson raphael shortly explain
linear space ida iterative deepening proposed korf finally
review called trans reinefeld marsland implements form
enhanced iterative deepening search
maintains set open called open nodes generated
yet expanded e frontier nodes much best first search
selects node open minimum estimated cost one considers best
node expanded moved open closed specifically estimates
cost node n evaluation function form f n g n h n g n
sum cost path found n h n heuristic estimate cost
reaching goal n e cost optimal path goal h n
never overestimates cost said admissible solution exists
guaranteed return optimal minimum cost solution said admissible
certain conditions optimal admissible unidirectional heuristic search
information sense never expands nodes
dechter pearl emphasize optimality
compares unidirectional competitors bidirectional may well
improve performance major limitation memory requirement
proportional number nodes stored therefore practical cases
exponential
ida designed address memory heuristic
evaluation function f n ida performs iterations depth first searches consequently linear space requirements although performing depth first searches
iteratively deeper deeper heavily used computer chess programs
context alpha beta minimax search since sixties still use see kaindl


fibidirectional heuristic search reconsidered

b
k b



k b b
h b

g

h b

k b
h

b


h b

h max h min k bi h bi





figure illustration back idea
application solving searches marked breakthrough
solving dicult ida depth first searches guided threshold
initially set estimated cost threshold succeeding iteration
minimum f value exceeded threshold previous iteration
ida shows best performance trees one major
pure form cannot deal duplicate nodes sense transpositions transposition
arises several paths lead node search space represented
directed acyclic graph dag disadvantage ida relates advantage
requiring linear space
fortunately computers memory available needed ida
memory utilized recognizing duplicate nodes two ways finite state machine taylor korf transposition table implemented hash table reinefeld
marsland due general applicability wider variety domains
since bidirectional partly make use focus latter technique
trans proposed reinefeld marsland uses transposition
table ida since size table deliberately parameterized
utilizing limited memory analogously earlier applications transposition
tables computer chess programs trans utilizes table actually two purposes

recognizing transpositions
caching best heuristic values acquired dynamically
since latter use dicult understand explain underlying idea
depth back idea illustrated fig normal search
nodes bi statically evaluated stored values still used backing
node stored case trans transposition table
dynamic value minimum estimated costs best paths found
nodes bi unless static evaluator consistent useful store maximum
dynamic static value node cached node searched
improved value often used instead value assigned directly static
evaluation function
apart use trans back idea actually widely applied many chakrabarti ghose acharya desarkar mrec sen bagchi
rta korf sma russell ghosh mahanti nau


fikaindl kainz

advantages little overhead steady though often modest improvement
increasing memory size addition idea works goal condition instead
goal node specified e require goal node explicitly given however
applicable searched cached nodes cannot see could make
sense context traditional best first search

traditional bidirectional heuristic search
first look older bidirectional heuristic search forward
backward searches alternate call traditional encompasses
performing front end others performing front front evaluations
front end evaluations

since first proposed bidirectional heuristic search called bhpa pohl
performed front end evaluations let us begin employs heuristic
evaluation functions hd n estimate cost optimal path evaluated
node n respectively depending search direction precisely h n
estimates cost optimal path n forward search h n
n backward search note optimal path
found e therefore cost path estimated
evaluation function fd uses hd heuristic component viewpoint
backward search targets node however may seem cost frontier
estimated heuristically precisely cost frontier
issue matters cost path direction
view bhpa search essentially two type searches opposite directions
e traditional best first searches performed quasi simultaneously e
sequential machine one node expanded another search direction changed
least time time decision searching forward backward direction
made anew node expansion according cardinality criterion pohl

jopen j jopen j else
whenever search frontiers meet node n solution found cost
g n g n e cost path found forward search n plus
cost path found backward search n even two parts
solution forward backward search optimal however concatenated
solution path necessarily optimal therefore requires special
termination condition guaranteeing optimal solutions termination condition
precisely bhpa viewed consist two hpa searches pohl opposing directions
long heuristic function used consistent values weighted equally gd values
relevant difference check whether open become empty admissible consistent
heuristic functions option move nodes back closed open important better
gd value found heuristic function consistent hd hd n kd n nodes n
implies hd admissible e heuristic function never overestimates real cost



fibidirectional heuristic search reconsidered

bhpa follows

lmin max min f x min f x
x open

x open



condition essentially means cost lmin best least costly complete
path found far larger estimate computed fd values
search frontiers heuristic used estimates admissible path
must already optimal solution order satisfy termination condition since
understanding condition important elaborate depth

implicitly condition successful termination improved
bs kwa removes nodes n whose fd values lmin terminates
open open empty technique removing nodes called trimming
bs newly generated nodes placed sets open nodes
called screening techniques improve bhpa respect
saving memory bs additionally includes improvements reduce number nodes
generated major improvements following

nipping node selected expansion already closed opposite search tree put closed current search tree without
expansion
pruning situation descendants node open opposite
search tree removed

bhpa bs admissible fd consistent however bhpa
clearly less ecient finding optimal solutions bs never
shown really ecient
koll kaindl first conjecture missile metaphor misleading explanation provided preliminary evidence finding
realizing fulfilling termination condition key issue developed
ecient admissible search typically solutions known error
bound faster generate fewer nodes corresponding derivative guarantees error bound provided however improvements
finding optimal solutions require exponential space bhpa bs
kaindl khorsand showed bidirectional
heuristic search limited memory possible unidirectional search
cope limited memory sma russell however
runtime eciency insucient
front front evaluations

since long time consensus belief search frontiers would
pass focused would force wavefronts meet
wave shaping techniques bhffa de champeaux sint bhffa
de champeaux node retargeting politowski pohl generalized
encompassing bhpa bhffa davis pollack sudkamp


fikaindl kainz


h b

g
b

h

k b
h b




h b

b k b
k b

h max h min h bi k bi


b

figure illustration front front idea
perform front front evaluations bidirectional heuristic
search ecient terms number nodes generated
since basic idea front front evaluations important understanding
illustrate fig evaluation node nodes bi
opposite search front available storage costs optimal paths
every bi estimated adding known costs paths bi goal node
normally accurate dynamic estimates gained static front end
evaluator directly estimates cost
however performing front front evaluations excessively computationally demanding restriction solution quality
compute heuristic estimates nodes one search frontier nodes
order estimate paths going nodes opposite frontier
vice versa effort evaluations needed single node selection
expansion may even seem proportional cross product numbers nodes
frontiers use appropriate data structures effort reduced become proportional number descendants expanded node times
size opposite search frontier still excessively computationally demanding frontiers may contain order millions nodes keeping effort
practical non trivial may restrict computation
certain small number nodes promising values keep search direction
focused single target node opposing frontier several steps retargeting
approaches typically terminate non optimal solutions therefore obviously
lose admissibility e guarantee finding optimal solutions

non traditional bidirectional heuristic search

traditional approaches succeed improve unidirectional search
finding guaranteeing optimal solutions particular
traditional best first search exponential storage requirements may seem
bidirectional search needs store nodes least one frontier search
opposing side recognize meeting frontier typically implemented
hashing scheme instead storing frontiers forward backward
searches alternate possible search one direction first storing nodes
according personal communication dennis de champeaux



fibidirectional heuristic search reconsidered

search direction call non traditional bidirectional
heuristic search
perimeter search dillenburg nelson manzini
perimeter search breadth first search generates stores nodes around
predetermined fixed perimeter depth final frontier breadth first search
called perimeter search finished nodes stored forward search
starts targeting perimeter nodes depending given
available storage forward search performed ida fashion
former implemented ps dillenburg nelson latter idps
dillenburg nelson bida manzini perimeter depth
idps bida search exactly nodes however bida temporarily removes
perimeter nodes cannot affect computation evaluation function
consequently reduces number heuristic front front evaluations compared
idps due improvement bida far ecient terms running time
idps
bida achieves good sliding tile fifteen puzzle domain investigate case contrast traditional approaches bidirectional
heuristic search particular experiments varying perimeter
depth e varying perimeter size storage use

previous approaches

still seems previous approaches bidirectional heuristic search understood properly therefore present propose
approaches

theoretical

present theoretical bounds number nodes expanded
traditional bidirectional heuristic search front end evaluations since runtime
performance proportional number nodes expanded bounds
potential eciency assume availability consistent heuristic evaluation function
hd directions
first make explicit principally known form lemma since need
particular proving addition understanding important
understanding note however termination condition bidirectional search significantly different termination conditions unidirectional search
given pearl

lemma sucient condition successful termination bhpa bs

solution path bhpa bs terminate successfully e
finding path iff following conditions satisfied
least one search frontiers bhpa bs minimum f value must
raised least value optimal solution c minx opend fd x
c
ii optimal solution must found lmin c


fikaindl kainz

proof need concerned whether indeed optimal

solutions since corresponding proofs given pohl kwa respectively focus exactly termination condition formula
fulfilled bhpa explicit termination condition bs implicit
explained minimum f values opend first values f f
respectively since fd consistent exceed c minimum f values opend
increases gradually nodes f values c least one search frontier
expanded nipped pruned bs since maximum minimum f values
opend used one least one must become c search
lmin c holds optimal solution found lmin c

order establish bounds number node expansions let us first focus
upper bound number nodes expanded bhpa

theorem number node expansions bhpa bounded
bhpa

proof worst case bhpa may perform type searches
directions completely exception least one node expansion even lmin
c achieved last node expansion one direction immediately thereafter
termination condition fulfilled according lemma therefore opposite direction
least one node expansion saved

sense bound may look quite weak actually nilsson conjectured bidirectional heuristic search may expand twice many nodes would
corresponding unidirectional one conjecture assumption originally
published pohl search frontiers may pass without intersecting
recently however empirical evidence found koll kaindl
assumption invalid e frontiers typically meet rather early even without
wave shaping techniques question may arise whether
conditions theorem reasonable useful order conditions define strong symmetry property search spaces although may seem
completely unrealistic assumption dicult imagine search space
property searches optimal solutions tsp traveling salesman
instances need generate nodes represent visiting neighboring cities
start city since city final city visited reverse search
opposing direction needs generate nodes exactly cities etc least
straight forward implementation bidirectional search tsp works symmetric
space symmetric tsp instances arc costs independent
direction usual heuristic evaluations functions tsp minimum
spanning tree heuristic turns perfectly symmetric search space
definition let f h f f k f k c different f values expanded

nodes forward direction analogously f h f f k f k c
backward direction search space perfectly symmetric iff expands
number nodes f value forward direction backward direction
j j j k



fibidirectional heuristic search reconsidered

theorem search space perfectly symmetric f values distinct
direction

bhpa

proof perfectly symmetric search space numbers nodes expanded
directions type searches within bhpa strictly last
f values termination possible point since distinct
direction amounts nodes remaining f values

depending lmin c achieved nodes must expanded
fulfill termination condition summing proves theorem

since practice f values normally distinct direction
consequence realistic assumption occurrence many different f values
meant sense number nodes f value small compared
number nodes expanded

corollary search space perfectly symmetric many different f values

bhpa

proof since several nodes f value expansion
nodes may saved optimal solution already found
number nodes f value small compared number nodes expanded
however bhpa

strong assumption symmetry bhpa expands close twice many
nodes possible conjecture nilsson supported although
original assumption appears valid
point search frontiers bhpa meet early e pass
without intersecting go possibly large
region search space explored twice illustrated fig
bs avoids double exploration see fig unfortunately appears
dicult quantify size region cannot determine tighter upper bound
number nodes expanded bs without assumptions
fig illustrates search frontiers bs typically ragged
means meetings occur middle well near observed
experiments
let us look lower bounds number nodes expanded bhpa
need assumption symmetry general
theorem numbers nodes expanded bhpa bounded
min x x bhpa


fikaindl kainz







bhpa





region search space explored twice

bs





nipping

pruning

figure illustration traditional bidirectional heuristic search front end evaluations
xd kd number nodes would expand search
direction minus number nodes value fdk c
proof lower bound represents case earliest termination according lemma
least node expanded direction

corollary f values distinct direction number nodes
expanded bhpa bounded
min bhpa
proof xd since node n fd n c

corollary maximal improvement bhpa given
min x x
proof min x x minimum number nodes expanded bhpa

essence shown certain conditions traditional bidirectional heuristic search front end evaluations exemplified bhpa expand close twice
many nodes original conjecture
apparently wrong assumption found another even obvious effect
partly responsible
addition shown bhpa cannot much ecient
respect node expansions even best case variant bs without pruning
technique lower bound number nodes expanded applies general
major traditional bidirectional heuristic search front end evaluations
cost satisfying termination condition


fibidirectional heuristic search reconsidered

empirical

order provide evidence missile metaphor misleading present
empirical data performance bs since perimeter search seems become
ecient increasing perimeter depth manzini investigated
behavior experiments two different domains present empirical
experiments provide explanation perimeter search works well
fifteen puzzle domain
bs

bs classical best first search requires exponential memory
aware bs implementation yet able solve dicult instances
fifteen puzzle given domain specific knowledge puzzle
manhattan distance heuristic experiments bs able solve
instances used korf available mbytes main storage
convex c
gathered data runs bs provide empirical evidence
missile metaphor misleading addition data already given koll kaindl
average bs found first solution generation percent
total number nodes generated quality solution average
percent worse optimal solution continuing searches bs found
optimal solutions generation percent total number nodes generated
average search effort bs spent verify optimality
means search frontiers bs meet relatively early without use
wave shaping techniques even optimal solutions found rather quickly however
even bs already found optimal solution instance
know solution optimal must continue search generate
remaining nodes order prove fact better solution available
relatively overall higher effort bhpa would first solution even earlier
bs course bhpa needs exactly number nodes bs
search frontiers meet first meeting however would generate
nodes bs search frontiers go search frontiers
would however pass illustrated missile metaphor solutions could
found early
perimeter search

perimeter search achieved good fifteen puzzle domain solve
fifteen puzzle instance relatively fast limited memory however
bidirectional heuristic search seems understood suciently yet
made experiments increasing perimeter depth two different domains
may seem quite surprising cannot yet explain theoretically
important right try explain intuitively
experiments feasible use complete set fifteen puzzle
instances used korf fig shows domain bida works
well especially terms number nodes generated data normalized


firesults relative korfs ida

kaindl kainz



nodes generated



running time










































































bida perimeter depth

figure comparison bida different perimeter depths fifteen puzzle
instances time optimum
respective search effort ida korf implementation since first
able solve random instances fifteen puzzle running times
good
consistently manzini table fig shows steady decrease
number nodes generated required running time increasing perimeter depth
reaches perimeter depth however bida achieves minimum running
time exact perimeter depth optimum occurs may depend several
factors machine used eciency implementation
important finding however optimum actually exists bida
optimum perimeter depth shown exist ps dillenburg nelson
data presented manzini suggested increasing perimeter depth
number evaluations performed bida even decreases larger perimeter depths
however savings terms node generation obviously outweighed larger cost
front front evaluations note data presented manzini
optimum amount memory required storing perimeter
depths greater exhausted resources available experiments reported

give idea overall diculty given set note ida generates
million nodes average needs slightly less half hour convex c
bida worse data reported manzini primarily due use
different machine different implementation ecient code ida
puzzle provided us korf implementation overhead especially
wave shaping shows clearly even runtime optimizations described manzini
access implementation manzini e mail communication
given hints agreement overall effect relative
running times due different implementations ida



fibidirectional heuristic search reconsidered

knowing existence optimum helps us better understand improvement perimeter search traditional bidirectional heuristic search
front front evaluations exemplified e g bhffa advantage improved evaluation accuracy balanced large overhead time consumption
node evaluations bida tuned towards optimum
bhffa typically balance regard bhffa reason
optimal solutions quite easy perimeter search comparably much cheaper
per node searched since much smaller frontier targeted
although performance perimeter search cannot improved deliberately
memory optimum running time bida fifteen puzzle
good wanted see whether
achieved another domain used experimenting
made experiments finding optimal solutions set maze
bida ida inecient due high number iterations
used ps dillenburg nelson implements common underlying idea
perimeter search works well maze
seems runtime optimization bida cannot practically used
due excessive storage requirements since every node open information
every perimeter node would stored may affect computation
front front evaluations fact manzini states technique
applied depth first search
experiments perimeter search appears work satisfactorily illustrated fig neither terms generated nodes terms
running time data normalized respective search effort since seems
ecient instances fit memory see
optimality unidirectional competitors dechter pearl
even comparably larger perimeter depths numbers generated
nodes marginally improve percent number nodes generated
shown figure running time becomes quite high percent
running time reduced perimeter depths smaller
real savings number nodes generated therefore improvement
observed
considering different performances perimeter search domains question arises works well fifteen puzzle satisfactorily maze let us consider reason good first closer look
case perimeter depth minimal perimeter around node fifteen
use domain inspired use rao et al instances
domain model task navigation presence obstacles instances drawn randomly
behind xwindows demo package xmaze heuristic evaluator use
manhattan distance rao et al
experiments made following adaptations order allow transpositions
install wall three percent cases leads roughly density transpositions
fifteen puzzle moreover use much larger mazes order focus
dicult instances use instances h
give idea overall diculty given set note generates
million nodes average needs less two minutes convex c



fikaindl kainz




nodes generated

relative



running time








































ps perimeter depth

figure comparison ps different perimeter depths maze
instances
puzzle contains two nodes still perimeter saves half node
generations ida
major improvement explained quite simply looking
improving heuristic evaluation function perimeter search discovers
search analogous improvement manhattan distance heuristic presented
korf taylor p name last moves heuristic precisely
part dealing exactly last move precisely cases dynamic
values increase h n two units e twice unit cost arcs
two perimeter nodes improved evaluations many node generations
saved even perimeter nodes
still question remains improvements observed maze domain
domains arcs unit costs found major differences help us
explain phenomenon fifteen puzzle relatively short optimal solutions
due unit costs arcs overall cost solution relatively small
average comparison maze mazes size used relatively
long optimal solutions relatively high cost solution average
heuristic last move solution must return blank goal position
order allow blank position tiles next blank goal position must
certain places manhattan distance accommodate corresponding path
therefore increased two units
relates property manhattan distance heuristic cases increase
cost known arc cost added increase heuristic estimate
evaluated node perimeter node compared estimate remaining cases
heuristic estimate evaluated node perimeter node reduces compared
estimate cancels cost known arc



fibidirectional heuristic search reconsidered

differences ected differences heuristic values although used
domains less heuristic given set fifteen puzzle
instances h average much smaller h given set
instances maze domain data heuristic values
think dot used dillenburg nelson note mean
path length given e even much smaller fifteen puzzle
let us assume fifteen puzzle maze domain
number perimeter nodes twice cost arc e two units added
means resulting dynamic evaluation improves static evaluation
absolute amount quite different relative amount percent fifteen
puzzle compared percent maze domain dynamic improvement
heuristic effect much higher fifteen puzzle leads much larger savings
terms node generations effort front front evaluations
summary fifteen puzzle perimeter nodes improve static
evaluation since twice unit costs arcs even cases simply
added large effect domain heuristic values typically smaller
maze instances size experimented heuristic values
two orders magnitude larger therefore many perimeter nodes would
required achieve much effect however make perimeter search expensive
terms running time probably storage requirement
considerations clear effect front front evaluations
much steering frontiers together rather improve heuristic evaluations
dynamically particular example two perimeter nodes illustrates
wave shaping real effect rather improvement evaluation accuracy

generic non traditional bidirectional search
developed generic bidirectional heuristic search integrates
search typically leads hybrid combinations since
allow changing search direction viewed non traditional
form bidirectional search
major steps generic
assign search direction even nearly available memory
traditional best first search
perform traditional best first search assigned direction given memory
unless best first search already found optimal solution perform search
reverse direction use memory structure built previous best first
search possibly together additional memory still available compute
use front end evaluations
would dicult perceive even general subsumes
perimeter search expensive front front evaluations however wanted
different one proposed earlier kaindl kainz leeb smetana



fikaindl kainz

transpositions

linear space search



best first search


figure specialization generic
devise avoids need balance cost
evaluations beneficial effect
useful specialization generic uses memory sides
search space illustrated fig traditional best first search uses assigned
memory usual e g linear space search uses much memory still
available transposition table reinefeld marsland former first orders
sequence node generations finds transpositions latter uses memory
finding transpositions another part search space caching accurate
heuristic evaluations closer
limited memory available exible instance
memory transposition table assigned combines linear space search
conventional best first search bidirectional style may look quite similar
bida note contrast performs front end evaluations
memory best first search used solutions earlier meeting frontier
rather
sucient memory available even solving dicult instances
domain search reverse direction may performed traditional bestfirst search certain conditions certain sense optimal
respect node expansions dechter pearl

instantiating limited memory
first generic instantiated limited memory
available course instantiation make use available domain specific
information particular combine unidirectional search
best suit properties domain see e g rao et al zhang korf
example domains ida choice others depth first branch bound
lawler wood much better case limited memory
preferred
present experimental fifteen puzzle domain
characterized distinct cost values condition reasonable
select ida linear space search since dicult instances
fifteen puzzle require much memory manhattan distance
heuristic used since makes good use consistent heuristics one dechter
pearl select part best first search


fibidirectional heuristic search reconsidered

key idea bidirectional search let ida search opposite
directions steps generic respectively instantiation
generic leads bai bidirectional ida
optionally may give ida search part available memory
transposition table fig illustrates instantiation call variant bai due
use table bai trans
cannot solution given memory ida searches reverse
direction towards frontier prior search since consider case finding
optimal solutions search cannot terminate immediately solution found
better solution may exist must optimal one subsequently
prove optimal
technically ida part must changed slightly instead
goal node solution found whenever depth first search meets frontier
opposing search cost solution smaller cost best solution
found far first solution found value stored course cost
best solution found far may sub optimal yet know
already optimal however stored value exceed non overestimating
threshold ida part depth first search exited successfully optimal
solution
addition necessary changes ida part advantage start
increased initial threshold admissible estimate optimal solution cost
determined part since assume consistent heuristic h minimum
f g h nodes open admissible estimate therefore estimate
higher usual initial threshold ida used instead
moreover necessary ida part search space already
explored technically depth first search invoked ida meets
closed node opposing search frontier branch cut meeting open
node general insucient call nipping according analogous method
described kwa
ecient implementation fifteen puzzle even effort hashing every
node causes overhead cannot ignored therefore implemented bai
way avoids hashing nodes heuristic estimate
knows frontier opposing search still reach
according step generic search directions must assigned
ida part respectively traditional bidirectional search pohl
proposed used cardinality criterion determining frontier
select node expansion continue searching frontier fewer open
nodes utilized node expansion traditional bidirectional search
bai decide issue beginning whole search
search space suciently symmetric initial search direction
determined random search space least slightly asymmetric
specific knowledge determining search direction available seems reasonable
make shallow probes search space sides use idea behind
cardinality criterion since bai incorporates ida probing
consistent overall example fifteen puzzle first


fikaindl kainz

iterations ida searched sides direction fewer generated
nodes assigned ida part overall search since especially dicult
search much deeper part
let us shortly discuss behavior bai best case would seem
fact bai even better pure bai assigns search direction
dynamically lead better systematically going one direction
worst case bai perform part without savings ida part
except effect nipping
key question bai saves effort without enough memory available
completing search primarily save one ida iterations due
better initial threshold early iterations saved since earlier
iterations comparably cheap helps much less saving last iteration
search terminated complete iteration ida cost best
solution already found larger increased threshold therefore large
savings possible bai terminates earlier pure ida

instantiating sucient memory
let us sketch generic instantiated case sucient
memory available sense even solving dicult instances
domain traditional best first search terminate successfully given memory
case interest order see whether bidirectional search better
sense optimal unidirectional
sucient memory available instead ida depth first branch bound
reverse search employ fact easy construct analogously bai described instead ida instantiation
generic leads baa bidirectional changes
search direction contrast bs better utilization
dynamically improving heuristic values differences introduce slight
variation

dynamically improving heuristic values
differences
dynamic improvements heuristic evaluations search
differences known costs heuristic estimates differences utilized
two concrete methods presented basic idea common methods
many nodes search actual cost path
already known since static heuristic values normally gained rather cheaply
differences computed signify error made evaluation compared
cost known path differences utilized improve heuristic estimates
search
order able compute differences search must bidirectional
focus context non traditional bidirectional heuristic search
described actually application possible context traditional bidirec

fibidirectional heuristic search reconsidered


b
h

g

search
frontier



g b

diff b
h b


b diff b

diff bi g bi h bi

diff b

mindiff min diff bi

b



h h mindiff

figure illustration add idea
tional search bs involves however intricacies beyond scope
interested reader referred kainz

add method

first method instantiates adding constant derived differences heuristic values static evaluation function therefore call add
method
note adding constant evaluations change order node
expansions unidirectional search benefit
may immediately obvious however bidirectional search frontto end evaluations estimates compared cost best solution found far
necessarily already optimal one better estimates available
comparisons improves eciency due earlier termination explain
detail apply context non traditional
bidirectional heuristic search
see fig key idea method assume consistency static heuristic
evaluator hd around goal node search examined part graph stored
optimal paths nodes bi closed fringe node bi heuristic
value h bi computed subtracted optimal path cost g bi g bi
h bi resulting diff bi actually error made heuristic evaluation
node bi minimum diff bi nodes bi fringe computed
call mindiff
point add method consistent heuristic value h
node outside stored graph underestimates h least mindiff prove
precisely first need diff

lemma heuristic h consistent optimal path node n
intermediary node

diff diff n
holds e diff decrease optimal path decreasing distance goal
node


fikaindl kainz

proof heuristic h consistent
h n h k n
simply obtain

g h g k n h n
since n one optimal path know

g n g k n
substitutions obtain

g h g n h n
equivalently
diff diff n



proves lemma

theorem heuristic h consistent possible compute admissible

heuristic h node outside search frontier around

h h mindiff h

proof path exists node optimal path must exist
let go frontier node bj path exists h infinite
theorem holds lemma definition mindiff know
mindiff diff bj diff

since diff error made heuristic h write

h diff h
substitution obtain

h mindiff h



proves theorem

corollary h admissible estimate frontier node
proof replace bj proof theorem without changing validity




fibidirectional heuristic search reconsidered

theorem heuristic h consistent h consistent
proof heuristic h consistent
h n h k n
adding constant mindiff sides leads

h n mindiff h mindiff k n
means

h n h k n
proves theorem

let us sketch add method utilized context nontraditional bidirectional heuristic search baa example
first search must used compute value mindiff assume starts
node optimal paths nodes within search frontier guaranteed
frontier nodes suboptimal path found frontier node
however known optimal path leads another frontier node
optimal path change fmin since costs suboptimal paths
cannot uence minimum mindiff reverse search constant
added h call resulting add baa
course larger value mindiff preferred given amount search
search starting around better guided expanding one
nodes n minimal diff n call variant add bda
necessary check whether node evaluated outside fringe
graph around simply achieved add baa add bda hashing
done anyway node fringe first search matched
solution already found first node path inside stored graph around
matched path need pursued since optimal continuation
already known evaluator h actually used consistent therefore
open nodes pearl search terminates selects
node n expansion f n g n h n smaller cost
best solution found far proven way optimal one
details method theoretical properties refer interested
reader kainz

max method

second method computes estimate differences uses
maximum static estimate therefore call max method
see fig key idea method assume consistency static heuristic
evaluator hd path cost g known know
evaluation node h g difference diff g h
use difference construction admissible estimate f cost
earlier called add kainz kaindl



fikaindl kainz



k b

g
h

diff
h

b

h b

g
b

h b



h b

diff g h
fmin min g bi h bi


b g b


g b

b



h max h fmin h
f max f fmin diff

figure illustration max idea
optimal path constrained go note g g
necessary call difference used diff instead diff
addition assume search performed reverse direction
search assume nodes bi closed fringe optimal paths
known cost g bi therefore possible compute
fmin min
g b h bi


assumptions construct dynamic evaluation function
follows
theorem heuristic h consistent possible compute admissible
heuristic h node outside search frontier around
h fmin h h
proof every path must go frontier node bj cost cj
path bounded follows
cj k bj g bj
h consistent possible estimate optimal cost path two nodes

k bj h bj h
therefore write
cj h bj h g bj
since fmin min
g b h bi write


cj fmin h
valid cost path including optimal one

conclude

proves theorem

h fmin h




fibidirectional heuristic search reconsidered

corollary h admissible estimate frontier node
proof replace bj proof theorem without changing validity


dynamic evaluation function necessarily better nodes static
function useful combine functions

h max h fmin h
since admissible resulting function admissible value fmin
changes search however h consistent
since formula computing h originally derived difference diff
g h included derive overall evaluation function

f max f fmin diff
let us sketch max method utilized context nontraditional bidirectional heuristic search bai example
search starting first must used compute value fmin assume
starts node add method necessary optimal
paths frontier nodes known getting values fmin large
possible given amount search usual strategy selecting node minimal
f appropriate
subsequent ida search within bai must perform hashing graph stored
around order check whether node evaluated outside fringe
graph around latter case solution found call resulting
max bai transposition table reinefeld marsland used addition
bai trans call max bai trans
interestingly ida utilize max method without additional storage
requirements let us sketch basic linear space application
method ida normally searches one direction let alternate
search direction iteration solution found actually procedure
outside generic bidirectional search presented include
since linear space special interest fmini computed one iteration
used subsequent iteration must search alternate direction
use value example iteration searching adapted ida
computes hmax max h bi nodes bi value used estimate
subsequent iteration checking whether node evaluated outside
h hmax true node cannot inside h safely used
check substitutes hashing stored graph since static heuristic function normally
underestimates however nodes heuristic h used although would
theoretically correct use call resulting idea
max ida
details method theoretical properties refer interested
reader kainz


fikaindl kainz

relative korf ida



nodes generated



running time
































maxida

ida

ida probing

idps
depth

trans

bida
depth

baitrans

max baitrans

figure comparison fifteen puzzle instances

experiments approaches

order provide empirical evidence effectiveness eciency
approaches made experiments two different domains fifteen puzzle mazes

fifteen puzzle

first let us look specific experimental finding optimal solutions
set fifteen puzzle complete set instances used korf
compare achieve previously best domain
compared use domain specific knowledge
puzzle manhattan distance heuristic main storage available
convex c used mbytes
fig shows comparison several terms average number node
generations running times data normalized respective search
effort ida korf implementation already noted ida needs average
slightly less half hour machine used optimal solution
one instance even slight improvements mean notable savings time
ida max ida ida probing linear space use additional
storage performance cannot compete use
mbytes max ida generates percent number nodes generated ida
due dynamic improvements heuristic evaluations according difference
since however imply overhead per node searched needs
percent ida running time ida probing variant ida uses
probing idea selecting search direction although search space sliding tile
puzzle appears quite symmetric interesting see much gained
selecting search direction dynamically since ida probing overhead
running time even faster max ida order see well probing via three
iterations already indicates better search direction compared
much improved heuristic functions much ecient searches culberson schaeffer
even solving twenty four puzzle instances become feasible korf taylor



fibidirectional heuristic search reconsidered

perfect oracle would still generate percent ida nodes e ida probing overhead generated nodes determining search direction
less percent overall percent worse systematically searching
backward direction however significantly better systematically searching
forward direction due high standard deviations although saves percent
idps uses nodes additional storage perimeter due
related overhead front front evaluations needs running time
ida probing although generates much fewer nodes
trans mbytes memory achieves savings half running time
compared ida saves even much node generations amount memory
effort hashing slows
another technique prune duplicate nodes proposed taylor korf
finite state machine included fig since lack data
running time data given taylor korf reimplement technique ida employing pruning technique generated million
nodes set instances reported taylor korf means
percent number nodes generated pure ida finite state machine
achieved contained states requiring modest amount storage
course finite state machine must built pre processing stage first
use search involves small constant overhead running time
sliding tile puzzles seems better transposition tables
eliminating duplicates actually appears represent successful yet
solving fifteen puzzle unidirectional search
principle provided available storage bida manzini
ecient perimeter given mbytes storage
bida store maximum million perimeter nodes would correspond
perimeter depth bida generates percent number nodes
generated ida needs percent ida running time shown fig
use memory savings number nodes generated
optimum running time smaller perimeter size
fig reduced perimeter bida achieves best terms nodes
reported dillenburg nelson runs different sample set
fifteen puzzle different perimeter depth perimeter depth
korf set implementation even better terms number node generations
much slower terms running time even slower ida personal communication
john dillenburg turned implementation ida slower korf one
factor per generated node implementation overhead especially
wave shaping clearly ecient one since smaller perimeter
depth means fewer stored nodes therefore less overhead wave shaping perimeter depth
better running time consequently data figure
data figure gained implementation trans ecient code provided
jonathan shaeffer note different way presenting absolute data figure vs
relative diculty reinefeld marsland implement trans since
data performance trans amount memory used available since
integrate technique actually trans move best
described reinefeld marsland absolute less one percent better
trans therefore implement trans move cannot include
figure



fikaindl kainz

generated percent number nodes generated ida bida
overhead computing front front evaluations smaller idps bida
needs percent ida running time
bai trans max bai trans store maximum million nodes
implementation given mbytes storage bai trans
generates clearly nodes percent ida bida since overhead
per node much smaller running time even slightly better percent max baitrans additionally utilizing difference achieves fastest searches
needing percent time needed ida achieving uses
million nodes max method bai million nodes trans order
see uence trans compare max bai shown
fig order clutter uses million nodes max method
bai needing percent time used ida slightly slower
max bai trans shows comparably modest uence trans
summary bidirectional heuristic search enhanced max
method achieves fastest searches finding optimal solutions fifteen puzzle
manhattan distance heuristic knowledge source superiority max bai trans terms running time previous statistically
significant example probability improvement running time
bida due chance uctuation smaller percent according test
compares means paired samples absolute running times even much
smaller according test data relative diculty instance
well according sign test less ecient implementations ida
basis difference would become smaller since less overhead per
node searched therefore gains less compared pure ida however prefer
compare ecient implementation available
details see kainz

mazes

order get better understanding usefulness made
experiments second domain finding shortest paths maze
maze described subsection addition
mazes made experiments much smaller mazes order see
whether size uences relative performance compare
known achieve best domain far found
add baa add bda traditional shortest path dijkstra
corresponds without heuristic knowledge need explicitly
include experiments experiments compared use
domain specific knowledge manhattan distance heuristic main
storage available convex c used mbytes
noted already subsection bida worse data reported manzini
primarily due different machine different implementation
ecient code ida puzzle provided us korf
details statistic tests used refer interested reader kaindl leeb smetana
kaindl smetana



fibidirectional heuristic search reconsidered

relative



nodes generated



running time























bs

ps
depth



add baa

add bda

figure comparison maze instances
fig shows comparison several terms average number
node generations running times data normalized respective search
effort already noted needs average less two minutes
machine used optimal solution one instance
bs generates slightly nodes solving percent
running time even worse may seem implementation bs
could optimized clear overhead compared
bs certainly improve
ps dillenburg nelson perimeter search e front front
method generates percent number nodes needs percent
time used data correspond perimeter depth
best shown fig terms running time see discussion
subsection ps cannot really improve
add baa add bda generate clearly fewer nodes
percent respectively better performance add bda ects higher
mindiff value achieved guiding first two best first searches
expanding one nodes n minimal diff n precisely add bda
achieved mindiff reverse search k nodes add baa achieved
mindiff reverse search even k nodes performance addbaa terms running time however still much least
implementation derived bs add bda achieves fastest searches needing
percent time needed application dynamically
improving heuristic values feasible little overhead
superiority add bda previous statistically significant
example probability improvement terms running time due
chance uctuation smaller percent according three statistic tests
made analogously fifteen puzzle data significance
holds improvement respect number node generations add bda
well compared generate child nodes
node expansions superiority add bda statistically


fikaindl kainz

table overview approaches bidirectional heuristic search
front front
front end
traditional
bhffa bhffa bhpa bs
non traditional ps idps bida max bai trans add bda
significant respect particularly interesting since optimality
unidirectional stated sense never expands node
could skipped unidirectional dechter pearl
since relative mazes similar
explicitly see however kainz provide empirical evidence
performance peculiar certain size mazes

discussion
presentation bidirectional heuristic search experimental let us put perspective table provides overview existing
approaches according way evaluating way organizing change
search direction instantiate generic fall
category non traditional bidirectional heuristic search change search
direction perform front end evaluations allows
coping limited memory e g max bai max bai trans useful
case sucient memory e g add bda
due avoiding expensive front front evaluations dynamically improving heuristic evaluations less effective perimeter search saving node generations least fifteen puzzle domain however less overhead therefore
ecient per node searched terms running time
viewpoint table somehow completes picture bidirectional heuristic search note however non traditional found
independently work perimeter search still ample opportunity
bidirectional search especially looking perspectives another issue e g whether linear space search involved propose
max ida alternates search direction every
iteration order able use information previous iteration improving
heuristic evaluations dynamically yet another perspective whether
designed optimal solutions focused admissible
search discussed however exist admissible bidirectional
search guarantee solutions known error bound well others
solutions without guarantee quality e g node retargeting
contrasting traditional non traditional approaches bidirectional
heuristic search may appear strange less exible delivers
better better change search direction
dicult provide generally convincing answer question let us summarize
observations


fibidirectional heuristic search reconsidered

traditional bidirectional search typically requires exponential space kaindl

khorsand showed search possible limited memory
complexity runtime eciency insucient

perimeter depths perimeter search successful perimeters

much smaller frontiers traditional front front
parameterizing perimeter depth possible balance effort front tofront evaluations effect improving heuristic evaluations dynamically

runtime optimizations bida idps feasible perimeter
stays constant least iteration

mindiff value add method becomes higher search computing

generates nodes context traditional bidirectional search
initially small

applying max idea becomes much complex e g bs search
frontiers change kainz

general one major heuristic search use available
limited memory effectively pure unidirectional approaches utilizing limited memory led
less convincing chakrabarti et al sen bagchi russell
ghosh et al reinefeld marsland non traditional approaches
bidirectional search shown table particular generic allows
exible effective use available memory however partly due integration
unidirectional strategies future work may investigate direct use unidirectional approaches utilizing limited memory instantiations generic
bidirectional search
addition bidirectional search allows use memory dynamically improving
heuristic evaluations ways infeasible strictly unidirectional search
demonstrated front front well difference method
following simple idea implicitly behind approaches may illustrate given
breadth first uniform cost search depth node outside frontier must
least steps away start reverse search towards may use
fact compute estimate node outside frontier least
idea cannot used strictly unidirectional search note however approaches
discussed much complex useful simple idea since take
known costs heuristic estimates well differences account
provide much better estimates especially nodes far outside already given
opposite search frontier
sense possible view difference learning since
differences predicted actual outcomes important usual machine
learning however strives one instance solving
subsequent instances attempt depth discussion relationship
outside scope note however approaches front tofront evaluations could considered viewpoint


fikaindl kainz

conclusion

insights previous approaches bidirectional heuristic search propose

generic non traditional bidirectional search front end evaluations

dynamically improving heuristic values context
showed successfully instantiate generic important
case available memory limited memory utilized eciently
improving heuristic values certain sucient memory available
proposed instantiation form challenges
certain sense optimal unidirectional search optimality
unidirectional competitors dechter pearl imply bidirectional
search cannot ecient experiments found empirical evidence
ecient terms node expansions
running time showed ecient terms running time
bidirectional unidirectional search information
two different domains statistically significant
traditional bidirectional search yet achieve improvements admissible unidirectional search non traditional way performing opposing searches
sequence exemplified perimeter search seems
great potential sense bidirectional heuristic search viable
consequently propose search strategy reconsidered

acknowledgements

years several people cooperated first author heuristic
search particular bidirectional search aliasghar khorsand andreas koll angelika
leeb harald smetana roland steiner work served basis work
presented experiments convex c computing
center tu vienna available implementations ecient
code ida puzzle made available richard korf ecient hashing
schema jonathan shaeffer finally acknowledge useful comments earlier drafts
andreas auer dennis de champeaux stefan kramer giovanni manzini ira pohl
roland steiner parts already appeared proc fourteenth international
joint conference artificial intelligence ijcai proc thirteenth national
conference artificial intelligence aaai

appendix glossary notation



c

start node goal target node respectively
current search direction index search forward
direction backward direction
cost optimal path


fibidirectional heuristic search reconsidered

kd n
gd n
hd n
gd n hd n
fd n
fdj
hd n
fd n
lmin
opend
closedd
jopendj



jd

cost optimal path n n
cost optimal path n n
cost optimal path n n
estimates gd n hd n respectively
static evaluation function gd n hd n
one f values expanded nodes search direction
dynamic estimate hd n
dynamic evaluation function gd n hd n
cost best least costly complete path found far
set open nodes search direction
set closed nodes search direction
number nodes opend
number nodes expanded
number nodes expanded search direction
number nodes value fdj expanded
search direction

references

chakrabarti p ghose acharya desarkar heuristic search restricted memory artificial intelligence
culberson j schaeffer j searching pattern databases mccalla g
ed advances artificial intelligence pp springer verlag berlin
davis h pollack r sudkamp towards better understanding bidirectional search proc fourth national conference artificial intelligence aaai pp menlo park ca aaai press mit press
de champeaux bidirectional heuristic search j acm
de champeaux sint l improved bidirectional heuristic search
j acm
dechter r pearl j generalized best first strategies optimality
j acm
dijkstra e note two connexion graphs numerische
mathematik pp
dillenburg j nelson p perimeter search artificial intelligence
ghosh mahanti nau ecient limited memory heuristic
tree search proc twelfth national conference artificial intelligence
aaai pp menlo park ca aaai press mit press
hart p nilsson n raphael b formal basis heuristic determination
minimum cost paths ieee transactions systems science cybernetics ssc
ssc


fikaindl kainz

kaindl h tree searching marsland schaeffer j eds
computers chess cognition pp springer verlag york
kaindl h kainz g leeb smetana h use limited memory
heuristic search proc fourteenth international joint conference artificial intelligence ijcai pp san francisco ca morgan kaufmann publishers
kaindl h khorsand memory bounded bidirectional search proc twelfth
national conference artificial intelligence aaai pp menlo park
ca aaai press mit press
kaindl h leeb smetana h improvements linear space search proc eleventh european conference artificial intelligence ecai
pp chichester england wiley
kaindl h scheucher reasons effects bounded look ahead search
ieee transactions systems man cybernetics smc
kaindl h smetana h experimental comparison heuristic search
aaai workshop experimental evaluation reasoning search methods
pp
kainz g heuristische suche graphen mit der differenz methode diplomarbeit
technische universitat wien vienna austria
kainz g neue algorithmen fur die bidirektionale heuristische suche doctoral
dissertation technische universitat wien vienna austria
kainz g kaindl h dynamic improvements heuristic evaluations
search proc thirteenth national conference artificial intelligence aaai
pp menlo park ca aaai press mit press
koll kaindl h bidirectional best first search bounded error summary
proc thirteenth international joint conference artificial intelligence
ijcai pp san francisco ca morgan kaufmann publishers
korf r depth first iterative deepening optimal admissible tree search artificial intelligence
korf r real time heuristic search artificial intelligence
korf r taylor l finding optimal solutions twenty four puzzle proc
thirteenth national conference artificial intelligence aaai pp
menlo park ca aaai press mit press
kwa j bs admissible bidirectional staged heuristic search
artificial intelligence
lawler e wood branch bound methods survey operations



fibidirectional heuristic search reconsidered

manzini g bida improved perimeter search artificial intelligence

nilsson n principles artificial intelligence tioga palo alto ca
pearl j heuristics intelligent search strategies computer solving
addison wesley reading
pohl first effect error heuristic search meltzer b
michie eds machine intelligence pp edinburgh university press
edinburgh
pohl bi directional search machine intelligence pp edinburgh
edinburgh university press
politowski g pohl node retargeting bidirectional heuristic search
proc fourth national conference artificial intelligence aaai pp
menlo park ca aaai press mit press
rao v kumar v korf r depth first vs best first search proc ninth
national conference artificial intelligence aaai pp menlo park
ca aaai press mit press
reinefeld marsland enhanced iterative deepening search ieee transactions pattern analysis machine intelligence pami
russell ecient memory bounded search methods proc tenth european
conference artificial intelligence ecai pp chichester england wiley
russell norvig p artificial intelligence modern prentice hall
englewood cliffs nj
sen bagchi fast recursive formulations best first search allow
controlled use memory proc eleventh international joint conference artificial intelligence ijcai pp san francisco ca morgan kaufmann
publishers
taylor l korf r pruning duplicate nodes depth first search proc
eleventh national conference artificial intelligence aaai pp
menlo park ca aaai press mit press
zhang w korf r depth first vs best first search proc
eleventh national conference artificial intelligence aaai pp
menlo park ca aaai press mit press




