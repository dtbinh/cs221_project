journal artificial intelligence

submitted published

first probabilistic track
international competition
hakan l younes

lorens cs cmu edu

computer science department
carnegie mellon university
pittsburgh pa usa

michael l littman
david weissman
john asmuth

mlittman cs rutgers edu
dweisman cs rutgers edu
jasmuth cs rutgers edu

department computer science
rutgers university
piscataway nj usa

abstract
international competition ipc included probabilistic
track first time describe domain specification language created
track evaluation methodology competition domains developed
participating teams

background
fourth international competition ipc held part international conference scheduling icaps vancouver british columbia
june request icaps organizers sven koenig shlomo zilberstein
asked create first probabilistic track part ipc
overriding goal first probabilistic track bring together two
communities converging similar set issues aid creating comparable tools evaluation metrics one community consists markov decision process
mdp researchers interested developing apply powerfully expressive
representations environments consists researchers incorporating
probabilistic decision theoretic concepts cross fertilization begun intent probabilistic track create set
shared benchmarks metrics could crystallize efforts area study
created domain description language called ppddl described section ppddl stands probabilistic domain definition language analogy pddl mcdermott introduced ipc ppddl modeled
pddl fox long domain description language deterministic domains
used ipc syntactically language strips adl flavor includes
probabilistic constructs focus energy participants issues dealing uncertainty chose include constructs durative actions ppddl
basing domain description language pddl sought remain spirit
existing competition hope bring communities
c

ai access foundation rights reserved

fiyounes littman weissman asmuth

together ppddl representation relational although representations
explicit objects traditional feature mdp domain description languages
exploit features begun appear expected participants
propositionalize domains running
part
fully functional parser ppddl provided participants c form
plan validator simple planner basic tools convert ppddl decisiondiagram representation provided many ways handling rich constructs
ppddl main hurdle many participants tried provide much
assistance could dimension
although ppddl supports numerical fluents feature used fullest
extent competition numerical quantities used representing reward
values reward effects required additive
since classical track well established point helpful contrast
probabilistic track differs defining difference course actions
uncertain effects pickup action blocksworld might behave differently
different occasions even state single difference number
significant consequences first optimal action choices reaching goal may
function probabilistic outcomes along waya single sequence actions may
sufficient difficult output plan reason
decided separate plan synthesis execution two phases instead evaluated
planners online second unpredictability effects even optimal plan
reaching goal may get unlucky fail probability reason
evaluated planner multiple times include separate
optimal planner track addition since planners may fail reach goal state
executions needed way trading goal attainment action
cost decided score execution goal reward minus action cost chose goal
reward section describes evaluation methodology detail
total designed eight domains competition section domains
simply noisy versions classical domains domains designed
specifically thwart greedy replanning approaches ignore uncertainty
ten planners seven different groups entered competition
competition presented section deterministic replanner performed best overall
primarily due disproportionate number noisy classical
evaluation suite domains proved challenging participating planners
latter domains could serve basis future probabilistic competitions

probabilistic pddl
section describes input language ppddl used probabilistic
track ppddl essentially syntactic extension levels pddl fox
long complete syntax ppddl given appendix assume
reader familiar pddl focus language features
include probabilistic effects rewards detailed account ppddl provided


fithe first probabilistic track ipc

name
bomb package package
bomb package package
toilet clogged
bomb defused

type
boolean
boolean
boolean
boolean

init
true
false
false
false

init
false
true
false
false

table state variables initial values bomb toilet
younes littman semantics ppddl given
terms discrete time markov decision process howard puterman
probabilistic effects
define probabilistic decision theoretic need add support
probabilistic effects syntax probabilistic effects
probabilistic p e pk ek
meaning
pk effect ei occurs probability pi require constraints pi
pi fulfilled probabilistic effect declares exhaustive set probabilityweighted outcomes however allow probability effect pair left
effect empty words
probabilistic p e pl el


pl

pi

syntactic sugar
probabilistic p e pl el q
pl

q pi representing empty effect state changes
example effect probabilistic clogged means probability
state variable clogged becomes true next state probability
state remains unchanged
figure shows encoding ppddl bomb toilet example described
kushmerick hanks weld requirements flag probabilistic effects
signals probabilistic effects used domain definition
two packages one contains bomb bomb defused dunking
package containing bomb toilet probability toilet becoming
clogged package placed thus rendering goal state unreachable
definition figure shows initial conditions ppddl
probabilistic particular example define two possible initial states equal
probability true initial state given execution table lists
state variables bomb toilet values two possible initial
states intuitively think initial conditions ppddl
effects action forced scheduled right time note
goal involves negation definition declares
negative preconditions requirements flag


fiyounes littman weissman asmuth

define domain bomb toilet
requirements conditional effects probabilistic effects
predicates bomb package pkg toilet clogged
bomb defused
action dunk package
parameters pkg
effect bomb package pkg
bomb defused
probabilistic toilet clogged
define bomb toilet
domain bomb toilet
requirements negative preconditions
objects package package
init probabilistic bomb package package
bomb package package
goal bomb defused toilet clogged
figure ppddl encoding bomb toilet example

ppddl allows arbitrary nesting conditional probabilistic effects see example
figure feature contrast popular encodings probabilistic strips
operators psos kushmerick et al factored psos dearden boutilier
allow conditional effects nested inside probabilistic effects arbitrary
nesting add expressiveness language allow exponentially
compact representations certain effects given set state variables
actions rintanen ppddl action however translated set psos
polynomial increase size representation consequently follows
littman ppddl grounding full instantiation
action schemata representationally equivalent dynamic bayesian networks dean
kanazawa another popular representation mdp
still worth noting single ppddl action schema represent large number
actions single predicate represent large number state variables meaning
ppddl often represent succinctly representations example number actions represented objects n
action schemata arity c nc bounded polynomial size
original representation n grounding means prerequisite ppddl
planners could conceivably take advantage compact representation
working directly action schemata
rewards
markovian rewards associated state transitions encoded fluents numeric
state variables ppddl reserves fluent reward accessed reward reward
represent total accumulated reward since start execution rewards associated


fithe first probabilistic track ipc

define domain coffee delivery
requirements negative preconditions
disjunctive preconditions
conditional effects mdp
predicates office raining umbrella wet
coffee user coffee
action deliver coffee
effect office coffee
probabilistic
user coffee
coffee
increase reward
probabilistic coffee
user coffee
increase reward
office coffee
probabilistic coffee
user coffee
increase reward
coffee user coffee
increase reward
wet
increase reward


figure part ppddl encoding coffee delivery domain

state transitions update rules action effects use reward fluent
restricted action effects form hadditive opi hreward fluenti hf expi
hadditive opi increase decrease hf expi numeric expression involving reward action preconditions effect conditions allowed refer
reward fluent means accumulated reward considered
part state space initial value reward zero restrictions use
reward fluent allow planner handle domains rewards without
implement full support fluents
requirements flag rewards introduced signal support rewards
required domains require probabilistic effects rewards declare mdp
requirements flag implies probabilistic effects rewards
figure shows part ppddl encoding coffee delivery domain described
dearden boutilier reward awarded user coffee
deliver coffee action executed reward awarded wet false
execution deliver coffee note total reward awarded
executing deliver coffee action execution action leads state
user coffee wet hold


fiyounes littman weissman asmuth

plan objectives
regular pddl goals used express goal type performance objectives goal statement
goal probabilistic encodes objective probability
achieving maximized unless explicit optimization metric specified
instantiated domain declaring
rewards requirement default plan objective maximize expected reward
goal statement specification reward oriented identifies set
absorbing states addition transition rewards specified action effects possible
associate one time reward entering goal state done goal reward
f construct f numeric expression
general statement metric maximize f definition means
expected value f maximized reward oriented example instance coffee delivery domain figure would declare metric maximize
reward optimization criterion declaration default rewards
requirement specified ppddl defines goal achieved special optimization
metric used explicitly specify plan objective maximize
minimize probability goal achievement value goal achieved fluent
execution ends goal state expected value goal achieved therefore equal
probability goal achievement declaration metric maximize goal achieved
takes precedence reward specifications domain definition
default rewards requirement specified example bomb
toilet figure
ppddl semantics
completeness present formal semantics ppddl terms
mapping probabilistic transition system rewards defines
set state variables v possibly containing boolean numeric state variables
although consider without numeric state variables
section assignment values state variables defines state state space
set states representing possible assignments values
variables addition
v defines initial state distribution
p
p ss p p probability distribution states
formula g v characterizing set goal states g g one time reward
rg associated entering goal state set actions instantiated ppddl
action schemata goal directed without explicit rewards use
rg
probability reward structure
action consists precondition effect ea action applicable
state g error apply state
g goal states absorbing action may applied state satisfying
g requirement must hold order applicable consistent
semantics pddl fox long permits modeling forced chains
actions effects recursively defined follows see rintanen


fithe first probabilistic track ipc

null effect represented ppddl
b b effects b v boolean state variable
r v v r effect
c e effect c formula v e effect
e en effect e en effects
p
e pn en effect e en effects pi n
p
n
pi
effect b sets boolean state variable b true next state b sets b false
next state effects form r v used associate rewards transitions
described
action ha ea defines transition probability matrix pa state reward
vector ra pa j probability transitioning state j applying
state ra expected reward executing action state
readily compute entries reward vector action effect formula ea let c
characteristic function boolean formula c c c
otherwise expected reward effect e applied state denoted r e
computed following inductive definition

r

r b

r b

r r v v

r c e c r e
n
x
r e en
r ei

n
x
r p e pn en
pi r ei


factored representation probability matrix pa obtained generating
dynamic bayesian network dbn representation action effect formula ea
use bayesian inference dbn obtain monolithic representation pa
structure factored representation exploited decision
theoretic see example work boutilier dearden goldszmidt
hoey st aubin hu boutilier boutilier dean hanks guestrin koller
parr venkataraman
bayesian network directed graph node graph represents state
variable directed edge one node another represents causal dependence
node associated conditional probability table cpt cpt state variable
xs node represents probability distribution possible values x conditioned
values state variables whose nodes parents xs node bayesian network


fiyounes littman weissman asmuth

factored representation joint probability distribution variables represented
network
dbn bayesian network specific structure aimed capturing temporal
dependence state variable x create duplicate state variable x x
representing situation present time x representing situation one time
step future directed edge present time state variable x future time
state variable encodes temporal dependence edges two presenttime state variables future time present time state variable present
depend future however edge two future time state
variables edges called synchronic edges used represent correlated effects
dbn factored representation joint probability distribution present time
future time state variables transition probability matrix discrete time
markov process
generate dbn representing transition probability matrix
ppddl action avoid representational blowup introduce multi valued auxiliary
variable probabilistic effect action effect auxiliary variables introduced indicate possible outcomes probabilistic effect occurs allowing
representation correlate effects specific outcome auxiliary variable
associated probabilistic effect n outcomes take n different values
ppddl effect e size e consist e distinct probabilistic effects hence
number auxiliary variables required encode transition probability matrix
action effect e e future time versions auxiliary
variables necessary ppddl boolean state variables need
order maxaa ea nodes dbns representing transition probability
matrices actions
provide compositional generating dbn represents transition probability matrix ppddl action precondition effect ea assume
effect consistent b b occur outcome
overlapping conditions dbn empty effect simply consists nodes
present time node x connected future time counterpart x cpt x
non zero entries pr x x pr x x
holds reward effect r v change value state variables
next consider simple effects b b let xb state variable associated
ppddl atom b effects eliminate edge xb xb cpt
xb entry pr xb effect b pr xb effect b
conditional effects c e take dbn e add edges presenttime state variables mentioned formula c future time state variables
dbn e entries cpt state variable x correspond settings
present time state variables satisfy c remain unchanged entries set
x true otherwise value x change effect condition
satisfied
dbn effect conjunction e en constructed dbns
n effect conjuncts value pr x x dbn conjunction set
transformation increase size dbns exponentially unless context specific dbns
used boutilier friedman goldszmidt koller



fithe first probabilistic track ipc

r

r

r
hu
iw
uhc
hc
io

raining
umbrella
wet
user coffee
coffee
office

hu

hu

iw

iw

uhc

uhc

aux

hc

hc

aux

io

io

aux

aux

















io

















hc

















uhc

















uhc


































figure dbn structure left deliver coffee action coffee delivery domain cpt uhc future time version state variable
user coffee shown right

maximum pr x x dbns conjuncts maximum used
state variable set true false conjunctive effect set true
false one effect conjuncts effects assumed consistent
taking maximum separate probability tables still probability table
finally construct dbn probabilistic effect p e pn en introduce
auxiliary variable used indicate one n outcomes occurred
node parents entries cpt pr pi
given dbn ei add synchronic edge state variables x
value pr x x j set pr x x j otherwise
transformation repeated n outcomes n dbns dbns
trivially combined single dbn probabilistic effect
mutually exclusive preconditions value
example figure shows dbn encoding transition probability matrix
deliver coffee action whose ppddl encoding given figure
three auxiliary variables action effect contains three probabilistic effects
node labeled uhc future time version state variable user coffee four
parents including one auxiliary variable consequently cpt node
rows shown right figure
optimality criteria
shown construct mdp ppddl encoding
plan objective maximize expected reward mdp objective
interpreted different ways example expected discounted reward expected total


fiyounes littman weissman asmuth

reward suitable interpretation depends process oriented example coffee delivery discounted reward typically
desirable total reward often interpretation chosen goal oriented
example bomb toilet ppddl include facility
enforcing given interpretation specifying discount factor
competition used expected total reward optimality criterion without
discounting care required design ensure
expected total reward bounded optimal policy following restrictions
made used competition
goal statement identifying set absorbing goal states
positive reward associated transitioning goal state
negative reward cost associated action
done action available states could used end accumulation reward
conditions ensure mdp model positive bounded
model puterman positive reward transitioning goal state
since goal states absorbing outgoing transitions maximum
value state bounded goal reward furthermore done action ensures
action available state guarantees non negative future reward

evaluation methodology
classical plan series operators successful plan one
applied initial state achieves goal probabilistic many
proposals plan representations straight line plans plan trees policy graphs triangle
tables example none considered widely accepted standard addition even
simple plans challenging evaluate exactly non deterministic environment
possible outcomes need checked combined littman goldsmith
mundhenk
reasons chose evaluate planners simulation plan validator server individual acted clients planners connected
validator received initial state returned operator action dialog
continued terminating condition reached point validator evaluated
performance planner trajectory initial state terminating condition entire process repeated several times averaged multiple
runs
evaluation scheme blurs distinction planner executor
means computation longer one time preprocessing cost something integrated action selection planner quality therefore needs combination
expected utility running time simplicity set time threshold allowed
reward gathered time ran time threshold known competitors
whose planners could take consideration deciding balance computation


fithe first probabilistic track ipc

action since know whether participants would reuse one trajectory speed next set overall time limit applied total
repetitions evaluator given domain
concretely evaluations participants presented twenty previously unseen ppddl format evaluate participants connected one
evaluation servers cmu rutgers server provided planner
initial state planner selected returned action dialogue iterated
goal reached time ran planner sent done action value
obtained goal reward goal reached minus sum
action costs procedure repeated times maximum
minutes averaged
two types evaluation set reward goal
goal success percentage determined participants score
action costs reward every action fixed cost times
completion recorded explicitly used ranking planners completed
less runs minutes given score unfinished runs
design server believed time needed computation
planner would far outweigh possible communication delay however preliminary
evaluations participantsespecially halfway across worldexperienced disruptive levels latency evaluating planners connecting remotely server
formal evaluation offered participants local accounts cmu nearly
availed option
communication client server
communication participants client program server took place
xml made decision two reasons first parsing messages
easily managed format trivial parties involvedmany solid xml parsers exist
public domain second bandwidth great concernas mentioned
previous section participants ran clients machine hosted
server true excessively large messages take valuable processing
time specific case large messages corresponded large state spaces
took somewhat longer process altogether xml parsing limiting
factor
client connected server would request certain run
server would lead client running times sending state
receiving clients action creating state old
state action sending back figure gives schematic illustration
conversation client server specific format xml element
described appendix b
prior competition example client written c distributed
participants minimize difficulties dealing nuts bolts protocol
allowing instead focus design


fiyounes littman weissman asmuth

client hsession requesti
server hsession initi
loop rounds
client hround requesti
server hround initi
loop termination conditions
server hstatei
client hacti hnoopi hdonei
server hend round
server hend sessioni

figure interaction client planners server environment evaluation system

generator domains
several example domains provided participants advance serve testbeds
parser planner development addition parameterized generators
provided two domain classesblocksworld boxworld described detail
section availability domains served allow participants learn manually automatically domains create domain specific solutions
approaches evaluated independently separate category

competition domains
section describes domains used competition machine readable versions
domains found online competition web site
http www cs rutgers edu mlittman topics ipc pt
blocksworld traditional
traditional blocksworld domain stray far original blocksworld domain domain consists two types objects blocks tables domain
exactly one table instance number blocks number
blocks specific actions domain pick block putdown block instance initial configuration goal configuration
blocks given goal move blocks initial configuration goal configuration domain comes two flavors goal version
reward version within reward version cost one unit every time action
pick block executed reward reaching goal configuration
domains used competition blocksworld domain
incorporates probabilistic effects adding slip probability
time block picked put block slip fall onto table


fithe first probabilistic track ipc

probability course intended action put block onto table
effect achieved blocksworld domain extremely simple
domain yet offers lot insight process two important features
domain
basic policy solve domain
initial configuration place blocks onto table block
top another block
b starting bottom place block place final configuration
note without noise n blocks policy takes n steps steps
block part steps block part b hence costs n
units basic inexpensive way solve domain
state space domain increases exponentially number blocks
thus domain aims testing planners could easy maybe slightly
expensive policy state space large good policy far
complexity domain concerned one easier domains plan
hope many planners would quite well domain
generation program random traditional blocksworld domains provided
participants competition generated program
availability generator allowed participants test planners many
liked advance evaluation
blocksworld color
colored blocksworld domain variant traditional blocksworld presented
traditional blocksworld colored blocksworld consists two types objects
tables blocks domain exactly one table instance
number blocks actions domain still pick block
put block domain comes two flavors goal reward
major difference traditional blocksworld domain block colored
blocksworld domain assigned color goal configuration specified terms
block colors rather specific blocks thus general many different valid goal
configurations goal conditions expressed existential quantification example
ppddl fragment
goal exists b green b
exists b blue b top b b
states goal green block top blue block
noise colored blocksworld domain traditional blocksworld domain colored blocksworld domain incorporates probabilistic effects
adding slip probability time block picked put block
slip fall onto table probability


fiyounes littman weissman asmuth

notice although goal configuration existentially quantified hence precisely specified basic policy used solve traditional blocksworld
used solve colored blocksworld solve colored blocksworld
unstack blocks bottom fashion choose block satisfies
color constraint place appropriate position
colored blocksworld domain aims add complexity traditional blocksworld domain incorporating existential quantification goal configuration
indeterminacy goal colored blocksworld domain make
considerably harder traditional counterpart thus colored blocksworld
may impossible given planner solve reasonable amount time whereas
planner would traditional blocksworld
size
generation program random colored blocksworld domains provided participants competition generated program
boxworld
boxworld domain modeled traditional logistics domain domain consists
four types objects cities boxes trucks planes graph
superimposed cities two different types edges one denoting ability
drive one city another denoting ability fly one city
actions domain load box truck city unload boxfrom truck city load box plane city unload box plane city drivetruck fly plane goal reward versions domain included
evaluation within reward version cost unit every time
load box truck city load box plane city executed cost units
every time drive truck executed cost units every time fly plane
executed instance initial configuration determines graph
superimposed cities identifies locations boxes trucks planes
determines final destination box arrive goal configuration
specifies destination every box goal move initial
configuration state box destined location
noise enters domain action drive truck action executed
desired effect achieved probability probability truck
end expected destination however probability truck get lost
end wrong destination city three cities truck
may get lost trying execute drive truck action truck actually gets
lost end cities equal probability probability

blocksworld domains generation program random boxworld domains
provided participants competition generated
program
important note existentially quantified goal formula colored blocksworld
grounded excessively long fact serious bottleneck larger instances domain
planners avoid grounding benefit competition
plan validator grounded goal formula



fithe first probabilistic track ipc

exploding blocksworld
exploding blocksworld domain dead end version traditional blocksworld
domain described earlier traditional blocksworld domain two types
objects tables blocks two actions pick block put blockon initial configuration goal configuration blocks given goal
domain move blocks initial configuration goal configuration
key difference domain traditional blocksworld domain
every block exploding blocksworld domain initially set detonate every time
put block action executed block put yet
detonated detonate probability noise domain
block detonates executing put block action object beneath block
whether table another block destroyed longer accessible within
domain block detonates safe longer detonate
exploding blocksworld domain aims testing planners ability think ahead
formally actions executed possible reach state goal
cannot reached consider example executing standard blocksworld
blocks unstacked table goal configuration constructed
seven blocks unstacked probability
table destroyed rendering unsolvable
one strategy solving exploding blocksworld never place unsafe
block top something valuable table block needed final stack instead
block first disarmed placing top block needed
final configuration block exists
illustrate strategy instance used competition shown figure four blocks needed goal configuration
start repeatedly picking block placing block block
detonates next detonate block way block block
block safe place block table block top block completes left tower stage safe moves blocks
clear pick block put block last action leads failure
probability successful right tower completed block clear
use detonate block block safely placed top block finally
center tower completed placing block top block failure
probability total success probability given plan
fact optimal given action costs
along several test domains exploding blocksworld specifically designed
replanning strategy performs suboptimally gets stuck high probability
replanning strategy would ignore probability detonation try replan
something unexpected happens however high probability
render goal state unreachable
fileworld
fileworld fairly basic domain consists k files n folders files
filed actions domain get type reports folder given file


fiyounes littman weissman asmuth

initial state















goal













figure exploding blocksworld used competition note
goal condition require block table

belongs get folder one n retrieves folder filing
cabinet file one n inserts given file folder
return one n returns folder filing cabinet
domain comes reward version cost executing action
get folder cost executing action file actions
explicit costs since must used conjunction get folder file
initial configuration specifies many folders competition
used files folders goal configuration specifies files
must filed note initial configuration specify folder file go
files cannot filed folder constraint noise comes
domain
file filed destination folder must determined destination
folder file obtained executing action get type file question
parameter action executed file passed parameter assigned folder
folder files destination equal probability probability n
file destination folder filed folder
fileworld domain tests planners ability consider strategies choose
one minimizes cost particular straightforward plan achieve goal
carry following series actions file turn
get type get type
get destination folder executing get folder
place file appropriate folder executing file action
return folder executing return action
although plan works costly cost would k k number
files get folder expensive file cheap executed every file
less costly fact optimal plan described first executes get type every
file folder n least one file destination
runs get folder next files every file belongs folder file
uses return preparation getting next folder


fithe first probabilistic track ipc

expected reward optimal plan n k n number
folders k number files analysis gives optimal expected reward
competition domain designed reward planners able
reason initial destination uncertainty files recognize second
plan much less costly preferred straightforward brute force plan
tireworld
tireworld another domain tests planners ability plan ahead uncertainty
domain consists one type object namely locations domain comes two
flavors goal version reward version actions common versions
move car load tire change tire reward version additional
action call aaa
within reward version cost every time one actions move car
load tire change tire executed cost every time action callaaa executed initial configuration defines set locations
superimposed graph locations roads subset locations representing
locations spare tires starting location graph goal configuration
defines destination location graph goal move
starting location goal location
noise tireworld comes action move car time action
executed car drives one city another get flat tire probability
car flat tire cannot execute action move car
tire fixed car ability store one spare tire pick
executing action load tire location spare tire car
holding spare tire change tire action invoked fix flat however
car currently spare action disabled goal version
flat tire may dead end car gets flat carries spare tire
reward version planner choice executing one actions change tire
car spare call aaa high cost repair flat thus reward
version dead ends goal reachable notice since cost
call aaa large compared costs change tire load tire fixing flat
less expensive car spare tire
figure illustrates tireworld used competition next compare
probability reaching goal state two different plans illustrate
ideal plan looks domain
optimal plan would look ahead attempt keep spare tires accessible
possible avoid dead ends start state car must make three steps without
flat tire reach first spare cc occur probability
car needs go four steps without getting two flats make next spare
gets zero flats probability one flat probability
four step segment traversed probability one
spare tire three four step segments must traversed successfully reach
ck finally spare last two steps traveled certainty thus total
success probability event sequence note estimate


fiyounes littman weissman asmuth

spare tire
boxed locations
start

goal




ca
c

cn

cd

cc

c

cm

cb
c

ce

cf

cg

ch

ci
c

c

c

cj

ck

c c

c

cl
c









figure tireworld domain used competition
lower bound success probability optimal strategy factor
probability getting flat tire upon arrival state spare tire furthermore
car location cf ch spare flat unnecessary traverse
loop pick spare tire location cm accounting factors get
success probability
contrast greedy replanning would gather spares since utility
comes realization something might go wrong planner best
plan go directly c c shortest step route success probability
percent best success probability computed
reward version optimal success probability one
call aaa action available however cost action equals
reward reaching goal better end execution done
action repair flat tire call aaa action hence best strategy
goal version optimal reward version well gives reward
greedy strategy outlined would expected reward
call aaa action used fix flat tires expected reward drops
towers hanoise
name suggests domain noisy version famous towers hanoi
domain two types objects disks pegs
used competition five disks three pegs actions domain
single move big moved single move big moved double move big moved
double move big moved action names suggest one move one two


fithe first probabilistic track ipc

disks time single move double move outcome move dependent
whether biggest disk moved yet big moved big moved objective domain maximize probability reaching goal configuration
rewards
initial configuration defines starting positions disks towers
hanoi five disks stacked first peg bottom top largest smallest
order goal configuration defines destination positions disks
destination positions towers hanoi namely five disks
stacked order initial configuration last peg goal
move disks starting configuration goal configuration
actions towers hanoise noisy outcomes particular executing action
possible drop disk lost forever thus bringing execution dead
end success probabilities

action
single move big moved
single move big moved
double move big moved
double move big moved

success probability





notice probability succeeding move dependent number disks
moved whether big disk moved yet
every sequence actions success probability less one
possible reach goal certainty maximize probability reaching
goal careful comparison must made move big disk first last
peg necessary move four smaller disks middle peg subgoal
achieved executing single move big moved fifteen times smaller disks
resulting success probability accomplished moving
four smaller disks two units two double move big moved three times
resulting low success probability approximately
next big disk moved first last peg success probability
single move big moved four smaller disks need moved
time middle peg last peg big disk moved
success probabilities change two strategies yield success probabilities
single move big moved double move big moved
planner chooses optimally step would switch single moves double
moves big disk place resulting total success probability
one ignores probabilities uses single moves lower
success probability planner ignores probabilities
minimizes number steps double moves lower success probability
still thus optimum performance planner must realize
policy consider success probabilities actions influenced
status big disk


fiyounes littman weissman asmuth

zeno travel
last domain zeno travel domain used ipc instances
domain involve airplanes move people cities airplane requires fuel fly flown two different speedsthe higher speed requiring
fuel instance used one aircraft two people three cities seven
fuel levels actions domain start boarding complete boarding startdebarking complete debarking start refueling complete refueling start flying
complete flying start zooming complete zooming initial configuration
specifies location plane initial fuel level plane location
people well initializations allow arithmetic type operations
fuel level objects goal configuration specifies destination plane destinations people noise domain comes family complete x
actions time complete x action executed desired effect
probability k positive integer k note k function action executed specifically k complete boarding k complete debarking
desired effect achieved effect occurs probability
k structure meant represent actions random duration durative action x represented two primitive actions start x complete x giving
x duration geometrically distributed
ultimately presented real challenge neglected include
action costs since actions standard desired effect none planner
simple continue execute action effect achieved without incurring cost

competition
initial announcement competition put together mailing list
researchers expressing interest development ppddl server evaluation
criteria practice domains progressed kept community informed releasing
series faqs may faq september faq november faq
early core group participants became evident competition logistics
finalized leading june participants ran planners previously
unseen test tabulated scores set evaluation categories
presented icaps vancouver canada
following subsections describe competitions participants evaluation tracks

participants
although twenty teams registered competition initially seven teams four continents ultimately competed produced ten different planners evaluated
subsets domains groups planners
group c umass
participants zhengzhu feng university massachusetts eric hansen mississippi state university


fithe first probabilistic track ipc

description symbolic heuristic search
group e dresden flucap formerly fcplanner
participants eldar karabaev olga skvortsova dresden university
technology
description first order heuristic search
group g anu nmrdpp
participants charles gretton david price sylvie thiebaux australian
national university
descriptions g planner primarily designed domains non markovian rewards g nmrdpp augmented control knowledge
group j purdue
participants sungwook yoon alan fern robert givan purdue university
descriptions j human written policy classys policy language purdue humans j offline policy iteration reduction classification automatically acquiring domain specific policy classy j deterministic replanner
replan
group p simon bolvar mgpt
participants blai bonet universidad simon bolvar hector geffner universitat
pompeu fabra
description labeled rtdp lower bounds extracted description
group q michigan tech probapop
participants nilufer onder garrett c whelan li li michigan technological university
description pop style planner sensing
group r cert
participants florent teichteil konigsbuch patrick fabiani cert
description probabilistic reachability heuristic dbns
evaluation tracks
clear discussions leading competition different groups
prioritizing efforts differently wanted ensure diverse set powerful
approaches recognized decided tabulate several different ways
acknowledge value different approaches six tracks


fiyounes littman weissman asmuth

overall track used reward evaluation criterion domains goal
achievement counted goal domains domains blocksworld colored blocksworld boxworld exploding blocksworld fileworld
tireworld towers hanoise zeno travel
goal track ignored action costs counted goal achievement
unit reward thus emphasizing approaches maximized probability
reaching goal state domains used
overall track blocksworld colored blocksworld boxworld exploding
blocksworld fileworld tireworld towers hanoise zeno travel
overall non blocks box blocksworld boxworld dominated full set
wanted see subtler handled domains exploding
blocksworld fileworld tireworld towers hanoise zeno travel
domain specific domain specific allowed human tuned rules domain specific
tuning automatically generated rules specific domain
allowed evaluated generated domains blocksworld colored
blocksworld boxworld
conformant planners category produce straight line plans blind
intermediate states encountered prepared unobservable versions domains
evaluate planners category domains blocksworld colored blocksworld
boxworld exploding blocksworld fileworld tireworld towers
hanoise zeno travel

display evaluation track plotted cumulative reward achieved
participant set evaluation reward accumulated left right
reward tracks goal achievement counted without
explicitly specified goal reward plots highlight one planner advantage
another greater slope well total difference score height difference
lines
figure displays overall category two planners j p produced
significantly positive others replanning j clearly
dominating others j crowned overall winner p runner figure
displays conformant category consisted solely q
uncontested winner category
similar visible goal track displayed figure j
comes ahead p achieving runner status comparing figures
reveals margin victory j p r g diminished goalbased category suggests j sensitive rewards themselveschoosing
cheaper paths among multiple paths available goal set used
competition distinction significant graphs look similar
however different set test might revealed fundamental tradeoff



zeno travel

tower hanoise

tireworld reward

tireworld goal

fileworld

exploding blocksworld

boxworld goal

boxworld goal

boxworld

boxworld

boxworld

colored blocksworld goal

colored blocksworld

blocksworld goal

blocksworld

blocksworld

blocksworld



blocksworld

blocksworld

blocksworld

cumulative reward

first probabilistic track ipc

j
p
c
g
r
q











figure competition overall category conformant category line marked q numbers parentheses indicate size
number blocks blocksworld domains number cities boxes respectively boxworld domains

fiyounes littman weissman asmuth

j
p
c
g
r
q



cumulative goal probability













zeno travel

tower hanoise

tireworld reward

tireworld goal

fileworld

exploding blocksworld

boxworld goal

boxworld goal

boxworld

boxworld

boxworld

colored blocksworld goal

colored blocksworld

blocksworld goal

blocksworld

blocksworld

blocksworld

blocksworld

blocksworld

blocksworld



figure competition goal category
seeking maximize reward seeking reach goal high probability
future competitions could attempt highlight important issue
interesting note j outstanding performance stems primarily
early blocksworld boxworld amenable
replanning later set handled well j
planners
figure displays non block box category indeed j performed
much poorly category planner c taking top spot
runner spot closely contested planners r g g pulled ahead
last claim honors planner p performed nearly well
set
figure gives detailed view non blocks box category
optimal score indicated graphs note planner cs
performance tireworld domain well optimal fixed bug
competition server allowed disabled actions executed planner p displayed
outstanding performance fileworld goal tireworld
attempt solve tower hanoise therefore fell behind g r overall planner r
used time per round planner g zeno travel domain ultimately
cost r second place could complete runs domain
note planners received negative score reward oriented
optimal scores necessarily apply planner q conformant planner



fithe first probabilistic track ipc

c
g
r
p
j
q



cumulative reward









zeno travel

tower hanoise

tireworld reward

tireworld goal

fileworld

exploding blocksworld



figure summary competition overall non blocks box category
counted negative scores individual zero overall evaluation
give advantage planners even attempt solve planner q
entrant except possibly c receive positive score reward
tireworld planners negative score used expensive
call aaa action ensure goal reached
domain specific planners shown figure highest scoring
planners j g difference primarily due two largest
blocksworld j solved effectively g performance
five domain specific planners colored blocksworld virtually indistinguishable mentioned earlier grounding goal condition validator prevented us
larger instances might otherwise separated planners
domain
two planners domain specific category ineligible
tuning subcategory hand tuned domains thus j j
took top spots subcategory interesting note j spite
general purpose plannerit fact created domain specific overtook
j due two small boxworld j solved j missed
figure summarizes competition six evaluation categories

conclusion
happy outcomes first probabilistic track international
competition addition bringing attention important set challenges


fiyounes littman weissman asmuth

exploding blocksworld

tireworld goal






max prob



goal probability












c

g


p

j


q


r


c













prob
max prob
reward
max reward
g

j

q

r

p

q

prob
max prob
reward
max reward





c

p




goal probability








j

tireworld reward

reward

goal probability

fileworld

g


















reward

goal probability

max prob








r

c

g

tower hanoise

j

p

q

r

zeno travel
max prob







goal probability

goal probability

max prob












c

g

j


p


q


r

c

g

j

p

q

r

figure competition non blocks box indicates planner
attempt solve indicates anomalous due bug
server allowed execution disabled actions note two
graphs center reward scales right



fithe first probabilistic track ipc

j
g
j
j
e




cumulative reward








boxworld goal

boxworld goal

boxworld

boxworld

boxworld

colored blocksworld goal

colored blocksworld goal

colored blocksworld goal

colored blocksworld

colored blocksworld

colored blocksworld

blocksworld goal

blocksworld

blocksworld

blocksworld

blocksworld

blocksworld

blocksworld



figure competition domain specific categories tuning
category ignore j g e lines graph marked
asterisks

category
overall
goal domains
overall non blocks box
domain specific tuning
domain specific
conformant

st
j
j
c
j
j
q

nd
p
p
g
j
g

figure summary competition category



fiyounes littman weissman asmuth

appears helped spur community use uniform comparison
providing domain language set benchmarks yoon fern givan
spite success feel changes could made future competitions would increase value community first competition logistics
side server logged outcomes interactions planners domains
keep exhaustive record actions taken timing information retrospect
information would helpful identifying planners addressed
domains whether took suboptimal actions got unlucky addition
server provisions security simple password reservation system would
helped evaluations go much smoothly would prevented inadvertent
access server one group another assigned evaluation slot
domain side hope future competitions able focus interesting
domains found simply adding noisy action failures deterministic domain
enough produce interesting probabilistic problemsfor domains straightforward replanning effective non blocksworld domains created
mastered planners hope retained form future
evaluations
progression competitions classical track hope future competitions
probabilistic track move toward domains grounded real life data real world
including handling partially observability time second competition
slated held conjunction ipc urge interested members
community participate help keep competition moving productive
direction benefit field

acknowledgments
appreciate support national science foundation royal swedish
academy engineering sciences well feedback sven koenig shlomo zilberstein paul batchis bob givan hector geffner participants contributed
design competition jair editor david smith anonymous reviewers provided invaluable insights document tried reflect final manuscript
material upon work supported national science foundation
grant royal swedish academy engineering sciences iva
grants hans werthen fund opinions findings conclusions recommendations expressed material author necessarily reflect
views national science foundation iva



fithe first probabilistic track ipc

appendix bnf grammar ppddl
provide full syntax ppddl extended bnf notation following conventions
rule form hnon terminal expansion
alternative expansions separated vertical bar
syntactic element surrounded square brackets optional
expansions optional syntactic elements superscripted requirements flag
available requirements flag specified domain currently
defined example htypes def typing syntax domain definitions
means htypes def may occur domain definitions include typing
flag requirements declaration
asterisk following syntactic element x means zero occurrences
x plus following x means least one occurrence x
parameterized non terminals example htyped list x represent separate rules
instantiation parameter
terminals written typewriter font
syntax lisp particular case significant example x x
equivalent parenthesis essential part syntax semantic
meaning extended bnf notation number whitespace characters
space newline tab etc may occur tokens
domains
syntax domain definitions pddl except durative actions
allowed declarations constants predicates functions allowed
order respect one another must come type declarations
precede action declarations
hdomaini

hrequire def
hrequire keyi
htypes def
hconstants def
hpredicates def

define domain hnamei
hrequire def
htypes def typing
hconstants def
hpredicates def
hfunctions def fluents
hstructure def
requirements hrequire keyi
see section
types htyped list name
constants htyped list name
predicates hatomic formula skeletoni


fiyounes littman weissman asmuth

hatomic formula skeletoni
hpredicatei
hfunctions def
hfunction skeletoni
hfunction symbol
hstructure def
haction def
htyped list x
htypei
hprimitive typei
hfunction typed list x
hfunction typei

hpredicatei htyped list variable
hnamei
functions hfunction typed list function skeleton
hfunction symbol htyped list variable
hnamei
haction def
see section
hx typing hx htypei htyped list x
hprimitive typei hprimitive typei
hnamei
hx
typing hx hfunction typei hfunction typed list x
number

hnamei string characters starting alphabetic character followed
possibly empty sequence alphanumeric characters hyphens underscore characters hvariablei hnamei immediately preceded question mark
example office ball names gripper variable
actions
action definitions goal descriptions syntax pddl
haction def

action haction symbol
parameters htyped list variable
haction def bodyi
haction symbol
hnamei
haction def bodyi
precondition hgdi
effect heffecti
hgdi
hatomic formula term hgdi
equality htermi htermi
equality htermi htermi
negative preconditions hatomic formula term
disjunctive preconditions hgdi
disjunctive preconditions hgdi
disjunctive preconditions imply hgdi hgdi
existential preconditions exists htyped list variable
hgdi
universal preconditions forall htyped list variable
hgdi
fluents hf compi
hatomic formula x hpredicatei hx hpredicatei
htermi
hnamei hvariablei
hf compi
hbinary compi hf expi hf expi
hbinary compi

hf expi
hnumber hf head term


fithe first probabilistic track ipc

hf head x
hbinary opi

hbinary opi hf expi hf expi hf expi
hfunction symbol hx hfunction symbol


hnumber sequence numeric characters possibly single decimal point
position sequence negative numbers written hnumber
syntax effects extended allow probabilistic effects
arbitrarily interleaved conditional effects universal quantification
heffecti

hp effecti heffecti
conditional effects forall htyped list variable heffecti
conditional effects hgdi heffecti
probabilistic effects probabilistic hprob effecti
hp effecti
hatomic formula term hatomic formula term
fluents hassign opi hf head term hf expi
rewards hadditive opi hreward fluenti hf expi
hprob effecti
hprobabilityi heffecti
hassign opi
assign scale scale hadditive opi
hadditive opi increase decrease
hreward fluenti reward reward

hprobabilityi hnumber value interval

syntax definitions extended allow specification
probability distribution initial states permit association one time
reward entering goal state otherwise identical syntax pddl
definitions
hproblemi

hobjects def
hiniti
hinit el
hp init el
hprob init el
ha init el
hgoal
hgoal speci
hmetric speci

define hnamei
domain hnamei
hrequire def
hobjects def
hiniti
hgoal
objects htyped list name
init hinit el
hp init el
probabilistic effects probabilistic hprob init el
hatomic formula name fluents hf head name hnumber
hprobabilityi ha init el
hp init el hp init el
hgoal speci hmetric speci hmetric speci
goal hgdi goal reward hground f expi rewards
metric hoptimizationi hground f expi


fiyounes littman weissman asmuth

hoptimizationi minimize maximize
hground f expi hnumber hf head name
hbinary opi hground f expi hground f expi
hground f expi
total time total time
goal achieved goal achieved
rewards hreward fluenti
requirements
table requirements ppddl requirements imply others
abbreviations common sets requirements domain stipulates requirements
assumed declare requirement strips
requirement
strips
typing
equality
negative preconditions
disjunctive preconditions
existential preconditions
universal preconditions
quantified preconditions
conditional effects
probabilistic effects
rewards
fluents
adl

mdp

description
basic strips style adds deletes
allow type names declarations variables
support built predicate
allow negated atoms goal descriptions
allow disjunctive goal descriptions
allow exists goal descriptions
allow forall goal descriptions
existential preconditions
universal preconditions
allow forall action effects
allow probabilistic action effects
allow reward fluent action effects
optimization metric
allow numeric state variables
strips typing equality
negative preconditions
disjunctive preconditions
quantified preconditions
conditional effects
probabilistic effects rewards



fithe first probabilistic track ipc

client

server

session request


session init



round request


round init



state


action


spec



state


action


spec

end round












repeat










end session



figure successful communication session

appendix b communication protocol
adopt xml syntax client server communication protocol use
extended bnf notation appendix describe syntax protocol messages
hnamei hnumber terminals defined exactly way ppddl
hinteger nonempty string numeric characters hmessagei arbitrary character
string possibly empty
figure shows expected sequence messages session starts client
sending hsession requesti message server server replies hsession initi
message tells client number evaluation rounds run start
evaluation round client sends hround requesti message server replies
hround initi message point evaluation round starts server sends
hturn responsei message client hstatei message hend round
message every hstatei message client receives sends haction speci message
return client receives hend round message ends current evaluation
round client starts evaluation round hround requesti message
server waits hend sessioni message server case rounds
already run server sends herror message client error occurs
example server receives unexpected message client


fiyounes littman weissman asmuth

b client messages
client messages following form
hsession requesti session request
name hnamei name
hnamei
session request
hround requesti

round request

haction speci
hactioni
htermi

act hactioni act done
action name hnamei name htermi action
term hnamei term

b server messages
server messages following form
hsession initi

session init
sessionid hinteger sessionid
setting
rounds hinteger rounds
allowed time hinteger allowed time
allowed turns hinteger allowed turns
setting
session init

hround initi

round init
round hinteger round
sessionid hinteger sessionid
time left hinteger time left
rounds left hinteger rounds left
round init

hturn responsei hstatei hend round
hend round
end round
hstatei goal reached
time spent hinteger time spent
turns used hinteger turns used
end round
hstatei
state goal hatomi hfluenti state
hatomi
atom hpredicatei htermi atom
hfluenti
fluent hfunctioni htermi hvaluei fluent
hpredicatei
predicate hnamei predicate
hfunctioni
function hnamei function
htermi
term hnamei term


fithe first probabilistic track ipc

hvaluei

value hnumber value

hend sessioni

end session
sessionid hinteger sessionid
hnamei
rounds hinteger rounds
goals
failed hinteger failed
reached
successes hinteger successes
time average hnumber time average
reached
goals
metric average hnumber metric average
end session

herror

error hmessagei error



fiyounes littman weissman asmuth

references
boutilier c dean hanks decision theoretic structural assumptions computational leverage journal artificial intelligence

boutilier c dearden r goldszmidt exploiting structure policy construction mellish c ed proceedings fourteenth international joint
conference artificial intelligence pp montreal canada morgan kaufmann publishers
boutilier c friedman n goldszmidt koller context specific independence bayesian networks proceedings twelfth annual conference
uncertainty artificial intelligence uai pp portland
dean kanazawa k model reasoning persistence causation
computational intelligence
dearden r boutilier c abstraction approximate decision theoretic artificial intelligence
fox long pddl extension pddl expressing temporal
domains journal artificial intelligence
guestrin c koller parr r venkataraman efficient solution
factored mdps journal artificial intelligence
hoey j st aubin r hu boutilier c spudd stochastic
decision diagrams laskey k b prade h eds proceedings fifteenth
conference uncertainty artificial intelligence pp stockholm sweden
morgan kaufmann publishers
howard r dynamic programming markov processes john wiley sons
york ny
howard r dynamic probabilistic systems vol markov john wiley
sons york ny
kushmerick n hanks weld probabilistic
artificial intelligence
littman l probabilistic propositional representations complexity proceedings fourteenth national conference artificial intelligence
pp providence ri american association artificial intelligence aaai
press
littman l goldsmith j mundhenk computational complexity
probabilistic journal artificial intelligence
mcdermott ai systems competition ai magazine

puterman l markov decision processes discrete stochastic dynamic programming john wiley sons york ny


fithe first probabilistic track ipc

rintanen j expressive equivalence formalisms sensing
giunchiglia e muscettola n nau eds proceedings thirteenth international conference automated scheduling pp trento
italy aaai press
yoon fern givan r learning measures progress domains
proceedings twentieth national conference artificial intelligence pp

younes h l littman l ppddl extension pddl expressing
domains probabilistic effects tech rep cmu cs carnegie
mellon university pittsburgh pa




