Journal Artificial Intelligence Research 33 (2008) 3377

Submitted 09/07; published 09/08

ICE: Expressive Iterative Combinatorial Exchange
Benjamin Lubin
Adam I. Juda
Ruggiero Cavallo
Sebastien Lahaie
Jeffrey Shneidman
David C. Parkes

blubin@eecs.harvard.edu
adamjuda@post.harvard.edu
cavallo@eecs.harvard.edu
slahaie@eecs.harvard.edu
jeffsh@eecs.harvard.edu
parkes@eecs.harvard.edu

School Engineering Applied Sciences
Harvard University
Cambridge, 02138

Abstract
present design analysis first fully expressive, iterative combinatorial
exchange (ICE). exchange incorporates tree-based bidding language (TBBL)
concise expressive CEs. Bidders specify lower upper bounds TBBL
value different trades refine bounds across rounds. bounds allow price
discovery useful preference elicitation early rounds, allow termination
efficient trade despite partial information bidder valuations. computation
exchange carefully optimized exploit structure bid-trees avoid enumerating trades. proxied interpretation revealed-preference activity rule, coupled
simple linear prices, ensures progress across rounds. exchange fully implemented, give results demonstrating several aspects scalability economic
properties simulated bidding strategies.

1. Introduction
Combinatorial exchanges combine generalize two different mechanisms: double auctions
combinatorial auctions. double auction (DA), multiple buyers sellers trade
units identical good (McAfee, 1992). combinatorial auction (CA), single seller
multiple heterogeneous items sale (de Vries & Vohra, 2003; Cramton, Shoham,
& Steinberg, 2006). buyer CA may complementarities (I want B)
substitutabilities (I want B) goods, provided expressive
bidding language describe preferences. common goal design DAs
CAs implement efficient allocation, allocation maximizes
total social welfare.
combinatorial exchange (CE) (Parkes, Kalagnanam, & Eso, 2001) combinatorial
double auction brings together multiple buyers sellers trade multiple heterogeneous goods. CEs potential use wireless spectrum allocation (Cramton, Kwerel, &
Williams, 1998; Kwerel & Williams, 2002), airport takeoff landing slot allocation (Ball,
Donohue, & Hoffman, 2006; Vossen & Ball, 2006), financial markets (Saatcioglu,
Stallaert, & Whinston, 2001). domains incumbents property
rights, necessary facilitate complex multi-way reallocation resources. Another potential application domain CEs allocate resources shared distributed
c
2008
AI Access Foundation. rights reserved.

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes

systems, PlanetLab (Fu, Chase, Chun, Schwab, & Vahdat, 2003). CEs find
use task allocation robot teams, making potentially powerful tool multiagent systems community (Gerkey & Mataric, 2002; Bererton, Gordon, & Thrun, 2003;
Dias, Zlot, Kalra, & Stentz, 2006). Finally, CEs promise mechanisms expressive
sourcing multiple bid-takers, perhaps representing different profit centers within organization; see associated work expressive sourcing using one-sided CAs (Sandholm,
2007).
paper presents design first fully expressive, iterative combinatorial exchange (ICE). designing iterative exchange, share motivation earlier work
iterative CAs: wish mitigate elicitation costs focusing bidders, case
price discovery activity rules, values relevant trades. important
determining value even single potential trade challenging problem complex domains (Sandholm & Boutilier, 2006; Compte & Jehiel, 2007). Moreover,
bidders often wish reveal little information possible avoid leaking information
competitors. describing central design principles support ICE mechanism,
highlight following aspects:
bidder interacts ICE first defining structured representation valuation different trades. Defined tree-based bidding language (TBBL),
concisely defines set trades interest bidder. bidder must annotate
tree initial lower upper bounds value different trades.
lower upper bounds valuations allows exchange identify
provisional trade provisional payments round, generate provisional clearing price item market. round ICE, bidder
required tighten bounds TBBL bid make precise trade
preferred given current prices.
ICE hybrid demand-revealing process direct-revelation mechanism, simple (linear) prices guiding preference elicitation bids submitted
direct claims valuation functions TBBL language,
expressive bids finally used clear exchange.
ICE terminates, payment rule used determine payments made,
received, participant. suggesting payments defined way
seeks mitigate opportunities manipulation exchange, ICE agnostic
particular payment rule adopted. given rule, prices quoted
round defined part approximate payments, aggregated across
provisional trade suggested bidder. concreteness, adopt Threshold
rule (Parkes et al., 2001) defining final payments, minimizes ex post regret
truthful bidding across budget-balanced payment rules, holding bids
participants fixed; see work Milgrom (2007). 1 say
1. aware existence mechanism design solutions approximately efficient, truthful
(i.e., truthful bidding dominant-strategy equilibrium) budget-balanced, sealed bid (i.e.,
non iterative) CEs. Nevertheless, true payment rules developed leveraged
directly within ICE would allow ICE inherit truthful bidding (i.e., revising TBBL bounds
remain consistent bidders true valuation) ex post Nash equilibrium, achieved
iterative Generalized Vickrey auctions (Mishra & Parkes, 2007).

34

fiICE: Iterative Combinatorial Exchange

incentive issues related payment rules important design successful CEs.
Rather, orthogonal design ICE main focus work.
propose novel activity rules, designed mitigate opportunities
strategic behavior.
highlight following technical contributions made work:
tree-based bidding language (TBBL) extends earlier CA bidding languages support bidders wish simultaneously buy sell, specification valuation
bounds, use generalized choose operators provide concise representations OR* LGB (Boutilier & Hoos, 2001; Nisan, 2006). TBBL
directly encoded within mixed-integer programming (MIP) formulation
winner determination problem.
Despite quoting prices items bundles items, ICE able converge
efficient trade straightforward (i.e., non-strategic) bidders. Efficiency
established duality theory prices sufficiently accurate. Otherwise,
direct proof based reasoning upper lower valuation bounds always
available, even combinatorics instance preclude duality-based proof.
Preference elicitation performed combination two novel activity rules.
first modified revealed-preference activity rule (MRPAR), requires
bidder make precise trade preferred round. second
delta improvement activity rule (DIAR), requires bidder refine bid
improve price accuracy prove improvement possible. coupled
together rules ensure useful progress towards determining efficient trade
made round.
summarize, three main reasons prefer explicit value representations
repeated demand reports context iterative CE: (a) provisional allocation
computed round 1, since upper lower bounds value available, (b)
combinatorics domain directly handled clearing exchange efficiency
limited adopting simple (linear) prices, (c) proofs (approximate) efficiency
available reasoning directly bounds valuations despite adopting simple
(linear) prices.
exchange fully implemented Java (with C-based MIP solver). present
scalability results showing performance across wide number bidders, goods valuation complexity well benchmarks provide qualitative understanding
characteristics mechanism. experimental results (with straightforward bidders)
show exchange quickly converges efficient trade, taking average
7 rounds example domain 100 goods 20 different types 8 bidders
valuation functions containing average 112 TBBL nodes. domain,
find bidders leave upwards 62% maximum attainable value undefined
efficient trade known, 56% final payments determined, indicating
bidders able leave large amounts value space unrefined. exchange
terminates problems average 8.5 minutes 3.2GHz dual-processor dualcore workstation 8GB memory. includes time winner determination,
pricing, activity rules, well time simulate agent bidding strategies.
35

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes

1.1 Related Work
Many ascending-price one-sided CAs known literature (Parkes & Ungar, 2000a;
Wurman & Wellman, 2000; Ausubel & Milgrom, 2002; de Vries, Schummer, & Vohra,
2007; Mishra & Parkes, 2007). Direct elicitation approaches, bidders respond
explicit queries valuations, proposed one-sided CAs (Conen &
Sandholm, 2001; Hudson & Sandholm, 2004; Lahaie & Parkes, 2004; Lahaie, Constantin, &
Parkes, 2005). particular relevance ascending CAs designed work
simple prices items (Dunford, Hoffman, Menon, Sultana, & Wilson, 2003; Kwasnica,
Ledyard, Porter, & DeMartini, 2005). computing (approximately competitive) linear
prices, generalize extend methods. Building work Rassenti, Smith,
Bulfin (1982), earlier papers consider bids bundles individually, find prices
exact winning bids minimize pricing error losing bids. Generalizing
TBBL expressive language, propose instead compute prices minimize
worst-case pricing error bidders (rather bids individual trades), considering
preferred trade consistent TBBL bid bidder. work
Dunford et al. (2003) Kwasnica et al. (2005) incorporate additional tie-breaking
stages, case lexicographically minimize error find prices closely
approximate provisional payments. latter step appears novel.
Linear prices important practical applications. prices adopted
FCC wireless spectrum auctions (Cramton, 2006), within clock auctions
procurement electricity generation (Cramton, 2003), essential part
proposed design airport landing slot auction Laguardia airport (Ball et al. 2007).
Linear competitive equilibrium prices exist two-sided markets indivisibilities
assignment problem agent buy sell single item (but may
interested multiple different items) (Shapley & Shubik, 1972). general linear,
competitive equilibrium prices exist combinatorial markets nonconvexities;
see work Kelso Crawford (1982), Bikhchandani Mamer (1997), Bikhchandani
Ostroy (2002), ONeill, Sotkiewicz, Hobbs, Rothkopf, Stewart (2005) related
discussions.
ICE proxied architecture sense bidders submit refine bounds
TBBL bids directly exchange, information used drive price dynamics
ultimately clear exchange. Earlier work considered proxied approaches,
application one-sided ascending-price CAs (Parkes & Ungar, 2000b; Ausubel &
Milgrom, 2002). Given focus simple, linear prices, ICE considered provide
two-sided generalization clock-proxy design Ausubel, Cramton, Milgrom,
initial stage linear price discovery followed best-and-final sealedbid stage (Ausubel et al., 2006). Activity rules shown important
practice. instance, Milgrom-Wilson activity rule requires bidder
active minimum percentage quantity spectrum eligible
bid critical component auction rules used FCC wireless spectrum
auctions (Milgrom, 2004). ICE adopts variation clock-proxy auctions revealedpreference activity rule.
well known exact efficiency together budget balance possible
Myerson-Satterthwaite impossibility result (Myerson & Satterthwaite, 1983). Given
36

fiICE: Iterative Combinatorial Exchange

this, Parkes et al. study sealed-bid combinatorial exchanges introduced Threshold
payment rule (Parkes et al., 2001); see work Milgrom (2007) Day Raghavan (2007) recent discussion. Double auctions truthful bidding dominant strategy equilibrium known unit demand settings (McAfee, 1992)
slightly expressive domains (Babaioff & Walsh, 2005; Chu & Shen, 2007). However,
truthful, budget-balanced mechanisms useful efficiency properties known
general CE problem.
Voucher-based schemes proposed alternative method extend onesided CAs exchanges (Kwerel & Williams, 2002). mechanisms collect goods
sellers run one-sided auction sellers buy-back
goods vouchers used provide seller share revenue collected
goods. Although voucher-based schemes facilitate design exchanges
one-sided auction technology, ICE design offers nice advantage providing equal
symmetric expressiveness participants. aware previous studies
fully expressive iterative CEs. Smith, Sandholm, Simmons previously studied iterative CEs, handle limited expressiveness adopt direct-query based approach
enumerative internal data structure scale (Smith et al., 2002).
novel feature earlier design (not supported here) item discovery, items
available trade need known advance. Earlier work considered sealed-bid
combinatorial exchanges purpose contingent trades financial markets, including
aspects expressiveness winner determination (Saatcioglu et al., 2001).
Several bidding languages CAs previously proposed, arguably
compelling allow bidders explicitly represent logical structure valuation goods via standard logical operators. refer logical bidding
languages (Nisan, 2006). Closest generality TBBL LGB language (Boutilier &
Hoos, 2001), allows arbitrarily nested levels, combining goods trades
standard propositional logic operators, provides k-of operator, used represent
willingness pay k trades quantifies over; see work Rothkopf, Pekec,
Harstad (1998) restricted tree-based bidding language. key insight, Boutilier
specifies MIP formulation Winner Determination (WD) using LGB , provides positive empirical performance results using commercial solver, suggesting computational
feasibility moving expressive logical language (Boutilier, 2002). TBBL shares
structural elements LGB language important differences semantics. LGB , semantics propositional logic, items
allocation able satisfy tree multiple places. Although make LGB especially
concise settings, semantics propose provide representational locality,
value one component tree understood independently rest
tree.
1.2 Outline
Section 2 introduces preliminary concepts, defining efficient trade competitive equilibrium prices. Section 3 defines sealed-bid CE, introducing TBBL providing MIP
used solve winner determination. Section 4 extends TBBL allow valuation
bounds defines MRPAR DIAR activity rules. main theoretical results
37

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes

described well method determine price feedback round. Section 5
gives number illustrative examples operation ICE. Section 6 presents main
experimental results. conclude Section 7. Appendix provides algorithm
two activity rules together details bidding logic used simulated
bidding agents.

2. Preliminaries
basic environment considers set bidders, N = {1, . . . , n}, interested
trading multiple units distinct, indivisible goods, set different types goods
denoted G = {1, . . . , m}. bidder initial endowment goods valuation
different trades. Let x0 = (x01 , . . . , x0n ) denote initial endowment goods,
x0i = (x0i1 , . . . , x0im ) x0ij Z+ indicate number units good type j G
initially held bidder N . trade = (1 , . . . , n ) denotes change allocation,
= (i1 , . . . , imP
)
ij Z denoting change number units item j
P
bidder i. Let = jG x0ij denote total supply exchange. write
denote bidder active trade, i.e., buys sells least one item.
2.1 Efficient Trade
bidder value vi (i ) R component trade . value positive
negative, represents change value final allocation x0i +
initial allocation x0i . valuation initial allocation information private
bidder, assume externalities, bidders value depends

individual trade. assume free disposal,
P vi (i ) vi (i ) trade


, i.e., ij ij j. Let v() = vi (i ).
Utility modeled quasi-linear, ui (i , p) = vi (i ) p trade payment
p R. implies bidders modeled risk neutral assumes
budget constraints. payment, p, negative, indicating bidder
may receive payment trade. use term payoff interchangeably utility.
quasi-linearity, Pareto optimal (i.e., efficient) trade maximize social
welfare, equivalent total increase value bidders due trade.
Given instance CE problem, defined tuple (v, x0 ), i.e., valuation profile
v = (v1 , . . . , vn ) initial allocation x0 = (x01 , . . . , x0n ), efficient trade , defined
follows:
Definition 1 Given CE instance (v, x0 ), efficient trade solves
X
max
vi (i )
(1 ,...,n )

s.t.

(1)



ij + x0ij 0,
X
ij = 0,

i, j

(2)

j

(3)



ij Z
Constraints (2) ensure bidder sells items initial allocation.
free disposal, impose strict balance supply demand goods
38

fiICE: Iterative Combinatorial Exchange

solution constraints (3), i.e., allocate unwanted items bidder. adopt
F(x0 ) denote set feasible trades, given constraints given initial
allocation x0 , (x0 ) set feasible trades bidder i. Note valuation
function vi cannot explicitly represented value possible trade bidder i,
number trades scales O(sm ), maximal number units
item market different items. TBBL language (introduced
Section 3) leads concise formulation efficient trade problem mixed-integer
program.
initial allocation x0i may private agent i. assume throughout bidders
truthful revealing information, motivate supposing participants
cannot sell items actually (or pay suitably high penalty do).
2.2 Competitive Equilibrium Prices
Linear prices, = (1 , . . . , ), define
Pa price j good price bidder
trade defined p (i ) = j ij j = . prices play important role
ICE. particular interest set competitive equilibrium prices:
Definition 2 Linear prices competitive equilibrium (EQ) prices CE problem
(v, x0 ) feasible trade F(x0 ) that:
vi (i ) p (i ) vi (i ) p (i ),

(x0 ),

(4)

every bidder i. say trade, , supported prices .
Theorem 1 (Bikhchandani & Ostroy, 2002) trade supported competitive equilibrium prices efficient trade.
practice, exact EQ prices unlikely exist. Instead, useful define
concept approximate EQ prices approximately efficient trade:
Definition 3 Linear prices -approximate competitive equilibrium (EQ) prices
CE problem (v, x0 ) R0 , feasible trade F(x0 ) that:
vi (i ) p (i ) + vi (i ) p (i ),

(x0 ),

(5)

every bidder i.
-approximate EQ prices, trade every bidder within 0
maximizing utility. Furthermore, say trade z-approximate total value
trade within z total value efficient trade.
Theorem 2 trade supported -approximate EQ prices 2 min(M, n2 )approximate efficient trade.
Proof: Fix instance (v, x0 ) consider (, ). trade 6=
X
X
[vi (i ) p (i )],
[vi (i ) p (i ) + ]




39

(6)

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes

-EQ prices
values P
prices zero bidders P
notP
participate
P

=
( ) = 0 (since
( ) =
p
p
p


trade.






=


P
Pi
P
P P
0 )). Then,
ij = 0, ij = 0 j, F(xP
= j j P
Pi j ij jP




(i ) + vi (i ). Fix := , efficient trade . Then, vi (i ) +
viP
vi (i ),
=

X

n
min(2A#(x0 ), n) min(2 min(M, n), n) = 2 min(M, )
2


(7)



A#(x0 ) maximal number bidders trade feasible trade given x0 .
second inequality follows bidders trade number
goods trade bidders market thus A#(x0 ) min(M, n).


3. Step One: TBBL-Based Sealed-Bid Combinatorial Exchange
first flesh details non-iterative, TBBL-based CE bidder
submits sealed bid TBBL language.
Bidding language. tree-based bidding language (TBBL) designed expressive
concise, entirely symmetric respect buyers sellers, easily provide
bidders buying selling goods; i.e., ranging simple swaps highly
complex trades. Bids expressed annotated bid trees, define bidders change
value possible trades. main feature TBBL general intervalchoose logical operator internal nodes coupled rich semantics propagating
values within tree. Leaves tree annotated traded items nodes
annotated changes values (either positive negative). TBBL designed
changes value expressed trades rather total value allocations.
Examples provided Figures 1 2.
Consider bid tree Ti bidder i. Let Ti denote node tree, let
vi () R denote value specified node (perhaps negative). Let Leaf (Ti ) Ti
subset nodes representing leaves Ti let Child () Ti denote children
node . nodes except leaves labeled interval-choose operator ICyx ().
leaf labeled buy sell, units qi (, j) Z good j associated
leaf , qi (, j ) = 0 otherwise. good j may simultaneously occur multiple
leaves tree, given semantics tree described below.
IC operator defines range number children be, must
be, satisfied node satisfied: ICyx () node (where x non-negative
integers) indicates bidder willing pay satisfaction least x
children. suitable values x operator include many
logical connectors. instance: ICnn () node n children equivalent
operator; ICn1 () equivalent operator; IC11 () equivalent XOR
operator.2
say satisfaction ICyx () node defined following two rules:
2. equivalence implies TBBL directly express XOR, XOR/OR languages (Nisan,
2006).

40

fiICE: Iterative Combinatorial Exchange

R1 Node ICyx () may satisfied least x children
satisfied.
R2 node satisfied, none children may satisfied.
One consider R1 first pass defines set candidates satisfaction.
candidate set refined R2. Besides defining value propagated, virtue
R2 logical operators act constraints trades acceptable provide
necessary sufficient conditions.3
Given tree Ti , (change in) value trade defined sum values
satisfied nodes, set satisfied nodes chosen provide maximal total
value. Let sat () {0, 1} denote whether node tree Ti bidder satisfied,
sat = {sat (), Ti }. solution sat valid tree Ti trade , written
sat valid (Ti , ), rules R1 R2 must hold internal nodes {Ti\Leaf (Ti )}
ICyx ():
x sat ()

X

sat ( ) sat ()

(8)

Child()

Equation (8) enforces interval-choose constraints, ensuring
less appropriate number children satisfied node satisfied.
constraint ensures time node root satisfied, parent
satisfied. require, sat valid (Ti , ), total increase quantity
item across satisfied leaves greater total number units awarded
trade:
X

qi (, j)sat () ij ,

j G

(9)

Leaf (Ti )

free disposal, allow trade assign additional units item overand-above required order activate leaves bid tree. works sellers
well buyers: sellers trade negative requires total number
items indicated sold tree least total number items traded away
bidder trade.
Given constraints, total value trade , given bid-tree Ti bidder i,
defined solution optimization problem:
vi (Ti , ) = max
sat

X

vi ()sat ()

(10)

Ti

s.t. (8), (9)
Example 1 Consider airline operating slot-controlled airport already owns
several morning landing slots, none evening. order expand business
airline wishes acquire least two possibly three evening slots. However,
needs offset cost purchase selling one morning slots. Figure 1 shows
TBBL valuation tree expressing kind swap.
41

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes



IC3
2

Buy 4pm $1

Buy 6pm $4

XOR

Buy 8pm $3

Sell 5am $-2

Sell 7am $-9

Sell 9am $-5

Figure 1: simple TBBL tree airline interested trading landing slots.
working numerous examples frequently found cumbersome
capture even simple trades languages specified values allocations, case
existing languages. Indeed, earlier work, demonstrate natural instances
TBBL exponentially concise OR* LGB (Cavallo et al. 2005).
fact, TBBLs conciseness incomparable OR* LGB extended simple
ways strictly dominate earlier languages.
Winner Determination. problem determining efficient trade given bids
called winner determination (WD) problem. WD problem CAs (and thus
CEs) NP-hard (Rothkopf et al., 1998). approach adopt formulate problem mixed-integer program (MIP), solve branch-and-cut algorithms (Nemhauser & Wolsey, 1999). similar approach proved successful solving
WD problem CAs (de Vries & Vohra, 2003; Boutilier, 2002; Sandholm, 2006).
Given tree Ti , useful adopt notation denote node Ti
satisfied trade . formulate WD problem bid trees = (T1 , . . . , Tn )
initial allocation x0 :
WD(T, x0 ) : max
,sat

XX


vi ()sat ()

Ti

s.t. (2), (3)
sat valid (Ti , ),



sat () {0, 1}, ij Z,
sat = (sat 1 , . . . , sat n ). tree structure made explicit MIP formulation:
decision variables represent satisfaction nodes capture logic
TBBL language linear constraints; related approach approach
considered application LGB (Boutilier, 2002). this, O(nB + mn)
variables constraints, B maximal number nodes bid tree.
formulation determines trade simultaneously determining value bidders
activating nodes bid trees.
Payments. Given reported valuation functions v = (v1 , . . . , vn ) bidder,
Vickrey-Clarke-Groves (VCG) (e.g. Krishna, 2002) mechanism collects following pay3. R1 naturally generalizes approach taken LGB , internal node satisfied according
operator subset children satisfied. semantics LGB , however, treat logical
operators way specifying added value (positive negative) results attaining
combinations goods. use R2 imposes constraints acceptable trades.

42

fiICE: Iterative Combinatorial Exchange

ments bidder:
pvcg,i = vi (i ) (V (v) Vi (v)),

(11)

efficient trade, V (v) reported value trade Vi (v)
reported value efficient trade economy without bidder i, vi =
(v1 , . . . , vi1 , vi+1 , . . . , vn ). Let us refer vcg,i = V (v) Vi (v) VCG discount.
problem VCG mechanism context CE may run budget deficit total payments negative. alternative payment method provided
Threshold rule (Parkes et al., 2001):
pthresh,i = vi (i ) thresh,i ,

(12)

discounts thresh,i P
picked minimize maxi (vcg,i thresh,i ) subject
thresh,i vcg,i thresh,i V (v). Threshold payments exactly budget
balanced minimize maximal deviation VCG outcome across balanced
rules.
Bidder 1
Bidder 2



IC3
1
XOR

Buy C $6
Buy $10

Sell $-4

Buy B $5

Sell C $-3

Sell B $-8

Figure 2: Two bidders three items {A, B, C}. efficient trade bidder 1 sell
buy C.

Example 2 Consider two bidders Figure 2. Bidder 1 potentially sell one
items (A B) get Bidder 2s item, C, right price. Bidder 2 interested
buying one Bidder 1s items selling item. consider
possible trades: Bidder 1 trades C gets $2 value Bidder 2 gets $7.
Bidder 1 trades B C gets $-2 value Bidder 2 gets $2. trade occurs
bidders get $0 value. Therefore efficient trade swap C.
efficient trade creates surplus $9 removing either bidder results
null trade, bidders Vickrey discount $9. Thus use VCG payments,
Bidder 1 pays $2-$9=$-7 Bidder 2 pays $7-$9=$-2 exchange runs deficit.
Threshold payment rule chooses payments minimally deviate VCG
maintaining budget balance. minimization reduces discounts $4.50, thus
Bidder 1 pays $2-$4.50=$-2.50 Bidder 2 pays $7-$4.50=$2.50.

4. Step Two: Making Exchange Iterative
defined sealed-bid, TBBL-based exchange modify design make
iterative. Rather provide exact valuation interesting trades, bidder
43

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes

Figure 3: ICE system overview
annotates single TBBL tree upper lower bounds valuation. ICE
mechanism proceeds rounds, illustrated Figure 3.
ICE proxied design bidder proxy facilitate valuation
refinement. round, bidder responds prices interacting proxy agent
order tighten bounds TBBL tree meet activity rules. exchange
chooses provisional valuation profile (denoted v = (v1 , . . . , vn ) figure),
valuation vi bidder picked fall within bidders current valuation bounds
(and tend towards lower valuation bound progress made towards determining
final trade). Then, exchange computes provisional trade checks whether
conditions moving last-and-final round satisfied. Approximate equilibrium
prices computed based valuation profile v trade new round
begins. last-and-final round, final payments trade computed terms
lower valuations; semantics lower bounds guarantee bidder
willing pay least amount (or receive payment amount) order
complete trade.
Let v v denote lower upper valuation functions reported bidder
particular round ICE, adopt WD(v) denote WD problem valuation
profile v = (v1 , . . . , vn ). ICE parameterized target approximation error (0, 1],
requires total value optimal trade given current lower-bound
valuation profile (i.e., solves WD(v)) close total value efficient trade :
P
v()

vi (i )
P
EFF() =
) = v( )
v
(


(13)

However, true valuation v thus trade uncertain within ICE thus
later introduce techniques estblish bound.
round, ICE goes following steps:
1. last-and-final round, implement trade solves WD(v)
collect Threshold payments defined valuations v. STOP.
ELSE,
44

fiICE: Iterative Combinatorial Exchange

2. Solve WD(v) obtain . Use valuation bounds prices determine lowerbound, eff , allocative efficiency EFF() . eff next
round designated last-and-final round.
3. Set [0, 1], tending 1 eff tends 1, provisional valuation profile
v = (v1 , . . . , vn ), vi (i ) = v (i )+(1)v (i ), expressed TBBL tree
value node Ti vi () = v () + (1 )v ().
4. Solve WD(v ) find provisional trade , determine Threshold payments
provisional valuation profile, v .

5. Compute linear prices, Rm
0 , approximate CE prices given valuations v
trade , breaking ties best approximate provisional Threshold payments
finally minimize difference price items.

6. Report (i , ) bidder N , whether next round last-andfinal.
transitioning next round, proxy agents responsible guiding bidders
make refinements lower- upper-bound valuations order meet activity
rules ensure progress towards efficient trade across rounds. follows, (a)
extend TBBL capture lower upper valuation bounds, (b) describe two activity
rules, (c) explain compute price feedback, (d) provide main theoretical results.
developing theoretical experimental results ICE assume straightforward
bidders, bidders refine upper lower bounds valuations keep true
valuation consistent bounds.
Extending TBBL. first extend TBBL allow bidder report lower upper
bound (v (), v ()) value node Ti , turn induces valuation
functions v (Ti , ) v (Ti , ), using exact semantics (10). bounds
trade interpreted bounding payment bidder considers acceptable.
bidder commits complete trade payment less equal lowerbound refuse complete trade payment greater upper-bound.
exact value, thus true willingness-to-pay, remains unknown except v () = v ()
nodes. say bid-tree Ti bidder well-formed v () v ()
nodes Ti . case v (Ti , ) v (Ti , ) trades . refer
difference v () v () value uncertainty node . efficient trade
often determined partial information bidder valuations. Consider
following simple variant Example 2:
Example 3 structure bidders trees Figure 4 Example 2
nodes annotated bounds. Let x [3, 8] denote Bidder 1s true value buy
C [4, 1] denote Bidder 2s true value sell C. three feasible trades
are: (1) trade C, (2) trade B C, (3) trade. first trade already provably
efficient. Fixing x y, minimal value 4+9+xy least 5+7+xy,
value second trade. Moreover, worst-case value 4 + 9 + 3 4 0, value
null trade.
45

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes

Bidder 1
Bidder 2



IC3
1
XOR

Buy C $8
$3
Buy $12
$9

Sell $-3
$-4

Sell B

Buy B $7
$3

Sell C $-1
$-4

$-5
$-10

Figure 4: Two bidders, partial value information defined bid tree. One
already prove efficient trade bidder 1 sell buy C.
4.1 Activity Rules
Activity rules used guide preference elicitation process round ICE.
Without activity rule, rational bidder would likely wait last moment
revise valuation information, free-riding price discovery enabled bids
participants. every bidder behave way exchange would reduce
sealed-bid mechanism lose desirable properties.4 Thus, activity rules critical
mitigating opportunities strategic behavior.5
ICE employs two activity rules. presenting activity rules, specify
explicit consequences failing meet activity rule. One simple possibility
default action automatically set upper valuation bound every node bid
tree maximum provisional price node6 lower-bound value
node. entirely analogous bidder ascending-clock auction stops
bidding price: permitted bid higher price future rounds.
Modified Revealed-Preference Activity Rule (MRPAR). first rule, MRPAR,
based simple idea. require bidders refine valuation bounds round,
trade optimal (i.e., maximizes surplus) bidder given
current prices possible valuations consistent bounds. MRPAR loosely
based around revealed-preference based activity rule, advocated clock-proxy
auction one-sided CA (Ausubel et al., 2006).
Let vi Ti TBBL tree Ti denote valuation vi consistent value bounds
tree. bounds tight everywhere, vi exactly valuation function
defined tree Ti . simple variant (RPAR), requires enough information
valuation bounds establish one trade weakly preferred trades
prices, i.e.
(x0 ) s.t. vi (i ) p (i ) vi (i ) p (i ),

vi Ti , (x0 )

(RPAR)

Note bidder always meet rule defining exact valuation vi tight
value bounds every node bid tree; case, trade arg maxi (x0 ) [vi (i )
4. problem evocatively described snake grass problem. See Kwerels forward
Milgroms book (2004).
5. conflict assumption straightforward bidding: design strategic
case despite assuming straightforward bidding provide tractable theoretical experimental
analysis; moreover, presence activity rules helps motivate straightforward bidding.
6. provisional price node defined minimal total price across feasible trades
subtree rooted node satisfied.

46

fiICE: Iterative Combinatorial Exchange

p (i )] satisfies RPAR. say prices strict EQ prices (v , ) when:
vi (i ) p (i ) > vi (i ) p (i ),

(x0 ) \ {i } ,

(14)

every bidder N .
Theorem 3 prices strict EQ prices provisional valuation profile v trade
, every bidder retains vi bid tree meeting RPAR, trade
efficient bidders straightforward.
Proof: Fix bidder i. Let denote trade satisfies RPAR. vi consistent
revised bid tree bidder i, have:
vi (i ) p (i ) vi (i ) p (i ),

(x0 ).

(15)

Moreover, must = , vi (i ) p (i ) > vi (i ) p (i )
strictness prices. Instantiating RPAR trade, true valuations vi Ti
(since bidders straightforward), have:
vi (i ) p (i ) vi (i ) p (i ),

(x0 ),

(16)

prices p EQ prices respect true valuations. efficiency claim
follows welfare theorem, Theorem 1.

particular, provisional trade efficient given strict EQ prices every bidder
meets rule without modifying bounds way. Strict EQ prices required
prevent problems involving ties:
Buyer

Seller

XOR

Buy $8



$4
Buy B $4
$2

$-6
Sell $-9
$-20

$-2
Sell B $-6
$-10

Figure 5: Example illustrate failure simple RPAR rule without strict EQ
prices. True values shown bold efficient outcome
trade.
Example 4 TBBL trees shown Figure 5 trade occur truthful
valuation (which indicated bold value bounds). However, suppose = 0
provisional valuations efficient traded. Prices = (6, 2) EQ
(but strict EQ) prices given v , buyer indifferent buying
buying B seller indifferent selling A, selling B, making sale.
buyer passes RPAR without changing bounds bounds already establish
(weakly) prefers B, prefers trade, possible valuations.
Similarly, seller passes RPAR without changing bounds bounds establish
weakly prefers trade selling combination B given current
prices. Thus, activity even though current provisional trade inefficient.
47

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes

order better handle sorts ties, slightly strengthen RPAR modified
RPAR (MRPAR), requires exists (x0 )
(i , , vi ) 0,
either =





(i , , vi )

> 0,

vi Ti , (x0 )
vi

Ti .

(17)
(18)

(i , , vi ) = vi (i ) p (i ) (vi (i ) p (i )) denotes profit bidder
trade given vi prices . (17) RPAR additional requirements enforce
satisfying trade either strictly preferred . need show
strict preference prevents deadlock shown Example 4. seller shown
weak preference trading selling A. MRPAR, seller must
show strictly prefers , case reducing upper-bounds
B, thus ensuring progress.
actual rule adopted ICE -MRPAR, parameterized accuracy parameter
0, providing relaxation MRPAR useful even exact
EQ prices defined respect ( , v ) round.
Definition 4 Given provisional trade , linear prices , accuracy parameter 0,
-MRPAR requires every bidder refines value bounds TBBL tree Ti
satisfies:
(i , , vi ) ,

vi Ti ,

(19)

or, (x0 )
(i , , vi ) 0,

vi Ti , (x0 )

(20)

(i , , vi )

vi

(21)

> ,

Ti

simple matter check -MRPAR reduces MRPAR = 0. Phrasing
description allow rule interpreted without relaxation,
-MRAPR requires bidder must adjust valuation bounds establish
provisional trade [within ] maximizing profit possible valuations (19),
trade satisfies RPAR (20) strictly preferred [by least ] provisional
trade (21). RPAR, one show bidder always meet -MRPAR (for
) defining exact valuation.7
Lemma 1 every bidder meets -MRPAR without precluding vi updated bid
tree, prices -approximate EQ prices respect provisional valuation profile
v trade , bidders straightforward, provisional trade
2 min(M, n2 )-approximate efficient trade.
7. Let vi denote valuation. -MRPAR satisfied via (19) arg maxi (x0 ) [vi (i )
p ()] satisfy -MRPAR. satisfies (20) construction. Now, let denote trade









vi (i ) p (i ) > vi (
) p (i ) + . vi (i ) p (i ) vi (i ) p (i ) > vi (i ) p (i ) + ,
(21).

48

fiICE: Iterative Combinatorial Exchange

Proof: Fix bidder i. -EQ, (i , , vi ) (x0 ). Consider
6= . vi remains bid tree, must (i , , vi )
-MRPAR cannot satisfied via (20) (21). Therefore, -MRPAR satisfied every
bidder via (19) provisional trade satisfying trade. Therefore prove
prices, , -approximate EQ prices valuations, including true valuation
since bidders straightforward within bounds. efficiency trade
follows Theorem 2.

turn provides simple proof efficiency ICE approximate CE
prices exist upon termination. Suppose ICE defined terminate soon prices
-accurate v retained bid tree bidders meeting activity rule,
quiescence reached bidder refines bounds meeting rule.
variation, provisional trade trade finally implemented.
Theorem 4 ICE -MRPAR 2 min(M, n2 )-efficient prices -accurate
respect (v , ) upon termination bidders straightforward.
Proof: ICE terminates either (a) prices -accurate v retained
bid tree bidders appeal directly Lemma 1, (b) bidder refines
bounds meeting -MRPAR, case vi remains space valuations consistent
bid tree bidder.

following simple corollary, considers property ICE
domain approximately accurate EQ prices exist:
Corollary 1 ICE -MRPAR 2 min(M, n2 )-efficient -accurate competitive
equilibrium prices exist valuations valuation domain bidders
straightforward.
Specializing domains exact EQ prices exist (e.g., unit-demand preferences
assignment model Shapley Shubik, 1972; see work Bikhchandani
Mamer, 1997) ICE MRPAR efficient straightforward bidders.
XOR

Buy $8
$2

Buy B $5
$4

XOR

Buy $8=v
$2=x

(a) Passes -MRPAR

Buy B $8=y
$4=w

(b) Fails -MRPAR

Figure 6: -MRPAR provisional trade Buy A, = 3, B = 4 = 2
Example 5 illustrate -MRPAR rule consider single bidder valuation tree
Figure 6(a). Suppose provisional trade allocates bidder, prices
= 3, B = 4 = 2. bidder satisfied -MRPAR guaranteed
$2-$3=$-1 payoff within possible $5-$4=$1 payoff B. consider
Figure 6(b), relaxed upper-bound buy B $8. bidder fails -MRPAR
guaranteed $-1 payoff within possible payoff B
$8-$4=$4. Let [x, v] [w, y] denote lower upper bounds, buy buy
B respectively, revised meeting rule. pass rule, bidder two choices:
49

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes

Demonstrate best response. bidder need adjust x
make x 3 4 2 x 3; e.g., values x = $2, = $5 solve this,
Figure 6(a), many possibilities.
Demonstrate another trade (e.g., buy B) $2 better ,
i.e., w 4 > v 3 + 2 w v > 3, buy B weakly better null trade,
i.e., w 4 0. instance, bidders true values vA = $3, vB = $8
x 3 v w 8 rule cannot satisfied first case. But,
buyer establish buy B best-response, e.g., setting v = $4, w = $7,
v = $3, w = $6.
Remark: Computation Bidder Feedback. definition MRPAR naively
suggests checking compliance requires explicitly considering valuations vi Ti
trades (x0 ). Fortunately, necessary. present Appendix
method check MRPAR given prices , provisional trade bid tree Ti solving three
MIPs. Moreover, explain solution MIPs provides nice feedback
bidders. ICE automatically identify set nodes bidder needs increase
lower bound set nodes bidder needs decrease upper bound
meeting MRPAR.
Delta Improvement Activity Rule (DIAR). -MRPAR, quite possible
ICE get stuck, bidders satisfying activity rule without changing
bounds, prices less accurate (with respect ( , v )). Therefore,
need activity rule continue drive reduction value uncertainty, i.e.,
gap upper bound values lower bound values, even face inaccurate
prices, ideally way remains price-directed sense using prices
determine trades (and turn nodes TBBL trees) bidder
focused on.
introduce purpose second (and novel) activity rule (DIAR), fills
role requiring bidders reveal information improve price accuracy and,
limit, full information nodes matter. Defined way, DIAR rule
nicely complements -MRPAR rule. establish efficiency
provisional trade directly via valuation bounds, see Section 4.3,
actually need fully accurate prices order close exchange. Thus, DIAR
rule imply bidders reveal full information. Rather, presence DIAR
ensures good performance practice well good theoretical properties.
experiments enable DIAR rounds ICE, fires parallel -MRPAR.
practice, see progress refining valuation information occurs due
-MRPAR, progress early rounds occurs due -MRPAR. Experimental
support provided Section 6.8
providing specifics DIAR, identify node Ti bid tree
bidder interesting fixed instance (v, x0 ), node satisfied
feasible trade. following simple lemma:
8. variation way ICE defined, DIAR could used rounds price error
provisional valuation trade greater error associated -MRPAR.
-MRPAR sufficient approximate efficiency prices accurate enough.

50

fiICE: Iterative Combinatorial Exchange

Lemma 2 value uncertainty interesting nodes bid trees
biders, bidders straightforward, efficient.
Proof: value uncertainty thus exact information value interesting
nodes implies difference value exactly known pairs feasible
trades uninteresting nodes, either node never satisfied trade
(and thus value matter) node satisfied every trade thus actual
value matter defining difference value pairs trades.
difference value pairs trades important determining efficient trade.

DIAR focuses bidder particular interesting nodes correspond trades
pricing error large, error could still reduced refining
valuation bounds node. Given prices provisional trade , main focus
k
DIAR following upper-bound , amount prices might misprice
trade ki (x0 ) respect bidder true valuation:
k

= max
[vi (ki ) p (ki ) (vi (i ) p (i ))]

vi Ti

(22)

call DIAR error trade ki , note depends current
prices well current bid tree provisional trade, true valuation
unknown center. DIAR error provides upper bound additional payoff
bidder could achieve trade ki trade . order trades, 1i , 2i , . . .,
1
1i maximal DIAR error, , = maxi (x0 ) [vi (i ) p (i )
(vi (i ) p (i ))] pricing error respect provisional trade provisional
valuation profile. error pricing algorithm designed minimize
round, error used Theorem 2 reference -accurate prices.
Thus, see maximal DIAR error bounds amount prices
1
approximate EQ prices, 0 bidders current prices
exact EQ prices respect ( , v ).
satisfy DIAR bidder must reduce DIAR error trade largest error
error reduced (some error may intrinsic given current prices
uncertainty bidders valuation), establish providing exact
value information throughout tree none DIAR error trades due
value uncertainty. Figure 7 illustrates difference MRPAR DIAR.
bidder satisfy MRPAR making clear lower bound payoff
trade greater upper bound trades, still leave large uncertainty
value. DIAR requires bidder refine upper bound node
corresponds trade DIAR error (and thus potentially actual
approximation prices) large. rule illustrated Figure 8.
DIAR parameterized 0. refer formal rule -DIAR:
Definition 5 satisfy -DIAR given provisional trade prices , bidder must
modify valuation bounds to:
(a) reduce DIAR error trade, ji (x0 ), least
k

(b) prove error cannot improved trades ki (x0 ) 1 k < j,
k

(c) establish cannot improved trade ki (x0 ).
51

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes

Figure 7: Stylized effect MRPAR
DIAR bounds
trades

Figure 8: Trades bidder i, ordered
DIAR error reducing left
right. bidder must reduce,
least , DIAR error
trade greatest
error possible
prove (via valuation bounds)
impossible improve
trades larger error.

particular, even bidder case (c) above, still forced narrow
bounds progress made towards bounding efficiency. practice, define
parameter large start smaller later rounds.
XOR

$6
Buy $4
$2

$8
Buy B $5
$3

XOR

$10
Buy C $10
$4

$6
Buy $4
$2

(a) Fails DIAR

$7
Buy B $5
$3

Buy C

$10
$10
$9.01

(b) Passes DIAR

Figure 9: Respecting DIAR provisional trade Buy A, = 4, B = 5, C = 6
= 1
Example 6 Consider tree Figure 9(a) provisional trade buy A, prices
= ($4, $5, $6) DIAR parameter = 1. DIAR error trade, defined via
(22), listed decreasing order, are:
1

C = ($10 $6) ($2) = $6
2

B = ($8 $5) ($2) = $5
3

= ($0 $0) ($2) = $2
4

= ($2 $4) ($2) = $0,
$2 = $2 $4 worst-case profit provisional trade. Now, see
1
cannot made smaller lowering upper-bound leaf buy C bound
52

fiICE: Iterative Combinatorial Exchange

already tight truthful value $10. Instead bidder must demonstrate
decrease = 1 impossible raising lower bound buy C 9.01. However
2
decreased = 1, reducing upper-bound buy B 8 7, giving
us tree Figure 9(b).
Lemma 3 ICE incorporates DIAR, straightforward bidder must eventually reveal
complete value information interesting nodes bid tree 0.
Proof: Fix provisional trade consider trade, 1i (x0 ) 6= , maximal
DIAR error. Continue assume straightforward bidders. Recall vi () denotes
bidders true value node TBBL tree. case analysis nodes Ti , meeting
DIAR rule trade 0 requires:
(i) Nodes 1i \ . Decrease upper-bound vi (), true value, reduce
error. Increase lower-bound vi () prove progress possible.
(ii) Nodes \ 1i . Increase lower-bound vi (), true value, reduce
error. Decrease upper-bound vi () prove progress
possible.
(iii) Nodes 1i . change required.
(iv) Nodes
/ 1i . change required.
Continue fix , consider impact DIAR 0
rule met successive trades, moving 1i 2i onwards. Eventually, value
bounds nodes
/ least one feasible trade driven truth
(i), value bounds nodes least one feasible trade
driven truth (ii). Noting null trade always feasible, bidder
ultimately reveal complete value information except nodes satisfied
feasible trade.

Putting together following simple theorem, considers convergence property ICE DIAR activity rule.
Theorem 5 ICE -DIAR rule terminate efficient trade
bidders straightforward 0.
Proof: Immediate Lemma 2 Lemma 3.

practice, use -MRPAR DIAR role DIAR ensure convergence instances exist good, supporting EQ prices. use
DIAR lead, case, full revelation bidder valuations
prove efficiency directly terms valuation bounds different trades (see Section 4.3).
Remark: Computation Bidder Feedback. present Appendix method
check -DIAR given prices , provisional trade , bidders bid tree past
round proposed new bid tree solving two MIPs. Moreover, solution
MIPs provides nice feedback bidders. ICE automatically identify trade,
turn corresponding nodes bid tree, bidder must provide
information.
53

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes

4.2 Generating Linear Prices
Given provisional trade , provisional valuations v , given provisional payments determined (according payment rule, Threshold,
adopted exchange), approximate clearing prices computed round according following rules:
I: Accuracy (ACC). First, compute prices minimize maximal error
best-response constraints across bidders.
II: Fairness (FAIR). Second, break ties prefer prices minimize maximal
deviation provisional payments across bidders.
III: Balance (BAL). Third, break ties prefer prices minimize maximal
difference price across items.
Taken together, steps designed promote informativeness prices
driving progress across rounds. Balance well motivated domains items
likely similar value dissimilar, preferring prices similar across items
rejecting extremal prices. Note prices may ascend descend round
round general tend towards increasing accuracy, shall see
experimentally Section 6.
Buyer

Seller



Buy $8



Buy B $8

Sell $-6

Sell B $-6

Figure 10: simple example illustrate pricing. ACC prices AB $12 $16,
FAIR narrows $14 BAL requires = $7, B = $7
Example 7 Consider example Figure 10 one buyer interested buying AB
one seller interested selling AB. buyers sellers values item
8 -6 respectively. efficient outcome given values trade complete.
ACC requires 12 +B 16, thus allows range prices. Threshold payment
splits difference, buyer pays 14 seller FAIR adds constraint
+ B = 14. Finally, BAL requires = B = 7.
three stages occur turn. interest space, present
basic formulation Accuracy stage: define maximally accurate EQ prices first
considering following LP:

s.t.


acc
= min acc
,acc
X
X
j ij vi (i )
j ij + acc ,
vi (i )
j

j

acc 0,
j 0,

j G
54

i, (x0 )

(23)

fiICE: Iterative Combinatorial Exchange

prices minimize maximal loss payoff across bidders trade compared trade bidder would prefer given provisional valuation v , i.e.,
minimize maximal value (i , , vi ), = arg maxi (x0 ) [vi (i ) p (i )].
Prices solve LP refined lexicographically, fixing worst-case pricing error (ACC) working try additionally minimize next largest pricing
error on. Given maximally accurate prices, triggers series lexicographical refinements best approximate payments (FAIR) without reducing pricing
accuracy, eventually series lexicographical refinements try maximally balance prices across distinct items (BAL). addition improving quality
prices, process ensures uniqueness prices.
Accuracy, Fairness Balance problems exponential number
constraints price accuracy constraints (23) (which carried forward
subsequent stages) defined trades (x0 ) bidders i.
therefore infeasible even write problems down. Rather solve explicitly,
use constraint generation (e.g. Bertsimas & Tsitsiklis, 1997) dynamically generate
sufficient subset constraints. Constraint generation (CG) considers relaxed program
contains manageable subset constraints, solves optimality.
Given solution relaxed program, subproblem used either prove
solution optimal full program, find violated constraint full problem
introduced (now strengthened) relaxed program resolved. case
subproblem variation winner determination IP Section 3,
concisely formulated solved via branch-and-cut.9
4.3 Establishing Bounds Efficiency
Consider round ICE. round starts announcement prices, denote
, provisional trade. round ends every bidder met
-MRPAR -DIAR activity rules. question address is: established
efficiency trade defined lower-bound valuations end round?
perhaps unsurprising MRPAR sufficient provide efficiency claims
prices suitably accurate. interesting coupling MRPAR
DIAR ensures ICE converges provably efficient trade cases,
efficiency often established independently prices reasoning directly lower
upper valuation bounds. theoretical analysis convergence efficiency, assume
straightforward bidders, mean bidder always retains true valuation
within valuation bounds. (All results could equivalently phrased terms efficiency
claims respect reported valuations.)
closing round, ICE makes determination whether move
last-and-final round. Bidders notified occurs. last-and-final round
9. pricing step computationally intensive steps ICE therefore heavily optimized.
practice, found useful employ heuristics seed set constraints used CG.
developed algorithmic techniques speed search appropriate set constraints
context lexicographic refinement: provisional Locking multiple lexicographic values
CG check, lazy constraint checks subset conditions CG routinely
checked, even though complete set eventually enforced. Please see technical report www.
eecs.harvard.edu/~blubin/ice complete details pricing method.

55

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes

provides final opportunity bidders update lower valuation bound information
(without exceeding upper bounds). exchange finally terminates efficient
trade payments determined respect lower valuation bounds:
lower bounds considered beP
ultimate bid submitted bidder
ICE terminates. Let arg maxF (x0 ) v (i ) denote trade optimal given
lower bound valuations. explained Section 4, ICE parameterized target
approximation error, , providing lower-bound relative efficiency
efficient trade true valuations. challenge obtain useful bounds
relative efficiency EFF() trade . provide two methods, one price-based
uses duality theory second directly reasons bounds bidder
valuations. consider turn.
price-based proof efficiency. already seen Section 2.2 bound
efficiency provisional trade sometimes established via prices. provides
simple method establish bound efficiency trade . Fix 0. v
denoting provisional valuation profile start round t, corresponding
provisional trade, know
(a) bidders meet -MRPAR leaving v within bounds,
(b) prices -approximate EQ prices v ,
(c) equal , i.e., efficient trade given refined lower bound valuations,
trade
2 min(M, n2 )-approximation
efficient trade Theorem 2.
P
P
vi (i ) + 2 min(M, n2 ) vi (i ), then,
P
2 min(M, n2 )
2 min(M, n2 )
vi (i )
P
P
,

1



1

EFF() = P


maxF (x0 ) v ()
vi ( )
vi (i )

(24)

define price . Conditioned (ac) met, bound available,
satisfy price small enough parameter. bound available
set price := 0.
direct proof efficiency. provide complementary, direct, method
establish relative efficiency working refined valuation bounds
end round t. First, given bid tree Ti , useful define perturbed valuation
respect trade , assigning following values node :

v () , sat (i )
vi () =
(25)
v () , otherwise,
sat (i ) node satisfied given tree Ti lower bound valuations
v nodes, given trade . valuation function vi associated TBBL tree Ti
defined minimize value nodes satisfied trade maximize value
nodes. concept, given valuation bounds, establish
following bound,




v()
v()
v ()
v()
,
(26)

min
= min
=
EFF() =




v( ) v T, F (x0 ) v ( )
F (x0 ) v( )
v()
56

fiICE: Iterative Combinatorial Exchange

Figure 11: Determining efficiency bound based lower upper valuations.

define direct . Notation v = (v1 , . . . , vn ), trade maximizes
P
vi (i ) across feasible trades. first inequality holds domain
minimization includes v trade = . first equality holds
6= , worst-case efficiency occurs value v selected minimize
value nodes \ , maximize value nodes \ , minimize value
shared nodes, . Whatever choice , valuation provided perturbed
valuation v. final equality, v() = v() definition, optimal trade
maximizes value denominator, i.e., trade . Figure 11 schematically
illustrates various trades values used bound, particular provides
graphical intuition v() v() v( ) v() = maxv [v ( ) v ()]
v( ) v().
Combining together. Given methods establish lower-bound eff =
max( price , direct ) relative efficiency trade . ICE defined move
last-and-final round either following hold:
(a) error bound eff
(b) trade even optimistic (i.e., upper-bound) valuations.
Combining Theorem 5, immediately get main result.
Theorem 6 ICE incorporates -MRPAR -DIAR bidders
straightforward, exchange terminates trade within target approximation error , 0 0.
use -DIAR sufficient establish result. However, use
prices MRPAR drives elicitation practice, particularly fix
-MRPAR tiny constant actual use. Empirical support this, along
quality price-based bound direct efficiency bounds, provided Section 6.
parameter -DIAR, find simple rule:
:=

1 X X v () v ()
,
2n
|Ti |


(27)

Ti

works well. tends towards zero value information revealed participants.
One last element design ICE precise method provisional
valuation profile v = v + (1 )v constructed. important
57

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes

used determine provisional trade price feedback. simple approach works
well define := max(0.5, eff ). find lower bound 0.5 useful heuristic
early rounds eff likely small, making ICE adopt provisional valuation
middle valuation bounds much known. effect push
towards 1 thus v towards v efficiency bound eff improves.10

5. Illustrative Examples
section illustrate behavior exchange two simple examples.
examples provided give qualitative feel behavior. construct examples
populate ICE simple, automated bidding agents. agents use MIPguided heuristics minimize amount information revealed course passing
activity rules, maintaining true value within lower- upper-bounds
(i.e., act straightforward way). reluctance reveal information models
basic tenet design, costly participants refine reveal
information values different trades. detailed explanation operation
bidding agents provided Appendix.
section, presenting main experimental results, move
last-and-final round. Rather, bidding agents programmed continue improve
bids past round efficiency already proved (and last-and-final
round would ordinarily declared), payments within desired accuracy
tolerance. avoid need program agents strategy bid
last-and-final round.
Prices
9.5

3.5

9


B
Efficient Allocation

8.5
3
8
2.5

7.5

Pessimistic
Alpha
Optimistic

2

Price

Average Allocation Value

Allocation Value
4

7
6.5

1.5

6
1
5.5
Provable
Efficiency

0.5
0
0

0.2

0.4
0.6
% Complete

Provable
Efficiency

5
0.8

4.5
0

1

(a) Allocative value

0.2

0.4
0.6
% Complete

0.8

1

(b) Prices

Figure 12: AgentA: $8, AgentB: B $8, AgentAB: B $10.
10. domains, may important require payments (rather efficiency
trade ) accurate enough moving last-and-final round. bound payments
computed analogous way efficiency. Whether required practice likely
domain-specific depend, instance, whether payments tend accurate anyway
time trade approximately accurate, impact strategic behavior.

58

fiICE: Iterative Combinatorial Exchange

Example 8 Consider market no-reserve seller two items B, three
buyers. AgentA demands value $8, AgentB demands B value $8,
AgentAB demands B value $10. Figure 12(a) shows quickly
exchange discovers correct trade. price $5 $8 accurate
situation, see prices Figure 12(b) quickly meet condition.
Fairness drives prices towards $6, eventual Threshold payments
AgentA AgentB. Balance ensures prices remain two items.

Prices

Allocation Value

25

0.7

20

0.5
0.4

15

Pessimistic
Alpha
Optimistic

0.3

Price

Average Allocation Value

0.6


B
Efficient Allocation

10

0.2

5
0.1
0
0

Provable
Efficiency

Provable
Efficiency
0.2

0.4
0.6
% Complete

0.8

0
0

1

(a) Allocative value

0.2

0.4
0.6
% Complete

0.8

1

(b) Prices

Figure 13: Seller -$10, Swapper: swap B $8, Buyer B $4
Example 9 Consider example Seller offering reserve $10, Swapper
willing pay $8 swap B A, Buyer willing pay $4 B.
complex example, takes 4 rounds, illustrated Figure 13(a), trade
found pessimistic trade. Revelation drives progress towards completed trade,
see Figure 13(b), reflected falling prices goods. Thus
see price feedback providing accurate information participants:
price eventually becomes low enough buying bidders actually want trade
occur exchanges provisional trade switches. worth
noting greater valuations Seller Swapper place good result net
higher price good B.

6. Experimental Analysis
section report results set experiments designed provide
proof-of-concept ICE. results illustrate scalability ICE realistic problem
sizes provide evidence effectiveness elicitation process techniques
bound efficiency provisional trade.
59

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes

Implementation. First, brief aside experimental implementation. ICE approximately 20,000 lines extremely tight Java code, broken functional packages
described Table 1.11 prototype modular researchers may easily replace
components experimentation.12 ICEs complexity, essential
code constructed rigid hierarchy avoids obscuring high level logic behind
details generating, running integrating results MIPs. end,
system written series progressively abstractmini-languages
defines clean, understandable API next higher level logic. hierarchy provides
way hide extremely delicate steps needed handle numerical issues come
trying repeatedly solve coupled optimization problems, constraints
one problem may defined terms slightly inaccurate results earlier problem.
constraints presented paper must carefully relaxed monitored
order handle numerical precision issues. bottom hierarchy
MIP specification fed generalized back-end optimization solver interface13 (we
currently support CPLEX LGPL-licensed LPSolve), handles machine loadbalancing parallel MIP/LP solving. concurrent solving capability essential,
need handle tens thousands comparatively simple MIPs/LPs.
Component
Agent
Model
Bidding Language
Exchange Driver & Communication
Activity/Closing Rule Engines
WD Engine
Pricing Engine
MIP Builders
Framework & Instrumentation
JOpt
Instance Generator

Purpose
Strategic behavior information revelation decisions
XML support load goods true valuations
Implements TBBL
Controls exchange, coordinates agent behavior
MRPAR, DIAR Closing Rules
Logic WD
Logic three pricing stages
Translates engines optimization APIs
Wire components together & Gather data
Optimization API wrapping CPLEX
Random Problem Generator

Lines
2001
1353
2497
1322
1830
685
1317
2206
2642
2178
497

Table 1: Exchange components code breakdown

Experimental set-up. experiments, -parameter MRPAR set near
zero MRPAR DIAR activity rule fire every round. rule used
define -parameter DIAR exactly described Section 4.1. adopt
straightforward bidding agents employed Section 5 (see Appendix
details). simulation, adopt Threshold payment rule terminate ICE
per-agent error payment relative correct payment within 5% average
per-agent value efficient trade. typical instances, incurs additional 4
rounds beyond would required last-and-final round. timing
wall clock time, separately count large number parallel threads
execution system. experiments run dual-processor dual-core Pentium
11. Code size measured physical source line code (SLOC).
12. Please contact authors access source code.
13. http://www.eecs.harvard.edu/econcs/jopt

60

fiICE: Iterative Combinatorial Exchange

IV 3.2GHz 8GB memory CPLEX 10.1. results averaged 10 trials.
problem instances available http://www.eecs.harvard.edu/~blubin/ice.
instance generator begins generating set G good types. Next, j G
creates 1 copies good type, forming total potential supply market s|G|
goods (exactly many units supply depends precise structure bid trees).
unit assigned one bidders uniformly random. generator creates
bid tree Ti bidder recursively growing it, starting root adopting
two phases. tree depthLow, node receives number children drawn
uniform outDegreeLow outDegreeHigh (a percentage designated
leaves), resulting exponential growth number nodes phase.
width depth refer number nodes depth. point,
carefully control expected number children node order make
expected width conform triangle distribution depth depthLow depthMid
depthHigh: linearly increase expected width depth depthLow
depthMid fixed multiple () width depthLow, linearly decrease
expected width back zero depthHigh.14 provides complex deep trees without
inherently introducing exponential number nodes.
internal node must assigned parameters interval choose operator.
typically choose high-triangle distribution 1 number children
x low-triangle distribution 1 y. bias towards introduction
IC operators permit wide choice number children. internal node
assigned bonus drawn according uniform distribution. leaf node assigned
buy node probability [0, 1], specific good type node
chosen among good types sale market. node assigned
quantity drawing low-triangle distribution 1 total number
existence.15 unit value node drawn specific buy distribution,
typically uniform, multiplied quantity assigned nodes bonus.
leaf nodes assigned sell nodes goods bonuses determined similarly,
time goods selected among previously assigned bidder.16
6.1 Experimental Results: Scalability
first set results present focuses computational properties ICE.
Figure 14 shows runtime performance system increase number
bidders holding parameters constant. example, 100 goods 20 types
traded bidders average 104 node trees. graph shows total
wall clock time parts system. see super-linear growth solve time
14. Note setting depthLow =depthMid =depthHigh one still grow full tree given depth
eliminating phase 2.
15. total number goods given type existence may actually available purchase
price given structure seller trees. Thus bias towards small quantities buy nodes large
quantities sell nodes produces interesting problem instances.
16. experiments, vary 2 |G| 128, 1 128, 2 |N | 20, 2 outDegreeLow 8,
2 outDegreeHigh 8, 2 depthLow 6, 2 depthMid 6, 2 depthHigh 8, set balanced buy
probability = 0.5, set width multiplier second phase = 2. examples,
buy node bonuses drawn uniformly [10, 100], sell nodes bonuses drawn uniformly
[100, 10] internal nodes bonuses uniformly [25, 25].

61

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes

4

10

3000

Good Scalability (Mean 10 runs)

Agent Scalability (Mean 10 runs)

Concurrent CPU Time (s)

Concurrent CPU Time (s)

2500

2000

1500

1000

3

10

500

2

0
0

5

10

15

20

10 0
10

25

1

2

10

10

Agents

3

10

Good Types

Figure 14: Effect number bidders
run-time ICE

Figure 15: Effect number good
types run-time ICE

number bidders, constants growth markets large
numbers bidders efficiently solved (solving 20 bidders around 40 minutes).
error bars plots standard error statistic.
Figure 15 see effect varying number types goods (retaining
5 units good supply) computation time. example adopt
10 bidders, tree generation parameters. likely explanation eventual
concavity run-time performance suggested decrease average (item)
price upon termination ICE number types goods increased (see Figure 16).
average price provides good proxy competitiveness market. Adding
120
Mean Linear Price (Mean 10 runs)

Mean Linear Price

100

80

60

40

20

0 0
10

1

2

10

10

3

10

Goods

Figure 16: Effect number goods average item price upon termination
ICE.
62

fiICE: Iterative Combinatorial Exchange

4

4

10

10

3

3

10
Concurrent CPU Time (s)

Concurrent CPU Time (s)

10

2

10

1

10

2

10

1

10

Node Degree Scalability (Mean 10 runs)
0

10 0
10

Power law fit
1

0.4243 x

Tree Depth Scalability (Mean 10 runs)

1.59
0

2

10
10
Number Nodes Tree

10 0
10

3

10

Figure 17: Effect bid-tree size runtime ICE: Varying nodeout degree.

Power law fit
1

0.7553 x
2

10
10
Number Nodes Tree

1.45
3

10

Figure 18: Effect bid-tree size runtime ICE: Varying tree
depth.

goods problem initially make winner determination problem difficult,
large over-supply, point outcome easier determine.
Figures 17 18 illustrate change run time size bid trees.
use first phase tree-generator avoid confounding effects size
structural complexity. experiments, 100 goods 20 types traded 10
bidders. Figure 17 vary number children given node Figure 18
vary depth tree. Increasing branching factor and/or tree depth results
exponential growth tree size, necessarily corresponds exponential growth
runtime. However, account instead plotting number nodes
trees, see graphs indicate near-polynomial increase runtime
tree size. fit polynomial function data form = Axb , indicating
growth approximately degree 1.5 range tree sizes considered
experiments.
6.2 Empirical Results: Economic Properties
second set results present focus economic properties ICE:
efficiency trade across rounds, effectiveness preference elicitation, accuracy
stability prices. set experiments average 10 problem instances,
8 bidders, potential supply 100 goods 20 types, bid trees
average 104 nodes.
Figure 19 plots true efficiency trades computed pessimistic (lower bounds
v), provisional (-valuation v ) optimistic (upper bounds v) valuations across rounds.
graph follow, x-axis indicates number rounds completed
percentage total number rounds termination enables results
aggregated across multiple instances, different number total
63

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes

100

10000

80

8000

70

7000

60
Mean
Provable 95%
Efficiency
SE

50
40
30

6000
5000
4000
Mean
Provable 95%
Efficiency
SE

3000
2000

Pessimistic
Alpha
Optimistic

20
10
0

MRPAR
DIAR

9000

Mean Slack Revealed

% Efficient

90

0.2

0.4
0.6
% Complete

0.8

1000
0
0

1

Figure 19: Efficiency optimistic, provisional, pessimistic trades
across rounds.

0.2

0.4
0.6
% Complete

0.8

1

Figure 20: Average reduction value uncertainty due rule.

rounds.17 vertical (dashed) line indicates average percentage complete
trade provably 95% efficient. exchange remains open past point payments
converge (and simulate outcome last-and-final round continuing
progress straightforward bidding agents). two lines either side represent
one standard error statistic.
Figure 19, see exchange quickly converges highly efficient trades, taking
average 6.8 rounds achieve efficiency. general, optimistic trade (i.e., computed
upper bounds v) higher (true) efficiency pessimistic one (i.e., computed
lower bounds v), efficiency provisional trade typically better
both. justifies design decision adopt provisional valuations provisional
trade driving exchange dynamics. suggests exchanges traditional
paradigm improving bids (i.e., increasing lower bound claims valuations) would allow
little useful feedback early rounds: efficiency pessimistic tradeall would
available without information upper-bounds bidder valuationsis initially
poor.
Figure 20 shows average amount revelation caused MRPAR DIAR
round ICE. Revelation measured terms absolute tightening upper
lower bounds, summed across bid trees. MRPAR activity rule main driving
force behind revelation information vast majority revelation (in absolute
terms) occurs within first 25% rounds. DIAR plays role making progress towards
identifying efficient trade MRPAR substantially reduced value
uncertainty despite firing every round. One think MRPAR rockets
main engine, DIAR thruster mid-course correction. ICE determines efficient
17. data point represents average across 10 instances, determined averaging
underlying points neighborhood. Error-bars indicate standard error (SE) mean. Thus,
figures essentially histogram rendered line graph.

64

fiICE: Iterative Combinatorial Exchange

80

30
Price Volatility (Mean 10 runs)

% Regret Price (Mean 10 runs)

70

% Regret Price

% Difference final price

25
60
50
40
30

Mean
Provable 95%
Efficiency
SE

20

20

15

Mean
Provable 95%
Efficiency
SE

10

5

10
0
0

0.2

0.4
0.6
% Complete

0.8

0
0

1

Figure 21: Price trajectory: Closeness
prices round final
prices

0.2

0.4
0.6
% Complete

0.8

1

Figure 22: Regret best-response bidders due price inaccuracy relative final prices.

trade average node TBBL tree still retains gap upper lower
bounds value node equal around 62% maximum (true) value node
could contribute bidders value, roughly maximum marginal value contributed
node feasible trades. see ICE successful directing preference elicitation
information relevant determining efficient trade.
provide two different views effectiveness prices. Figure 21 shows
mean percentage absolute difference prices computed round
prices computed final round. Prices quickly converge. experiments
driven exchange beyond efficient solution order converge Threshold
payments, see price information already available point
efficiency. Figure 22 provides information quality price feedback. plot
regret, averaged across bidders runs, best-response trade determined
intermediate prices comparison best-response final prices, regret
defined terms lost payoff final prices. Define regret bidder
best response = arg maxi (x0 ) [vi (i ) p (i )], prices , given final prices
, as:


) p ( )
v
(


100%.
Regreti (i , ) = 1
(28)
max vi (i ) p (i )
(x0 )

payoff trade , evaluated prices , approaches bestresponse trade prices , Regreti (i , ) approaches 0%. Figure 22 plots average
regret across bidders function number rounds completed ICE. regret
low: 11.2% averaged across rounds efficient trade determined
7.0% averaged across rounds. regret falls across rounds shows prices
become informative rounds proceed.
65

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes

100
90
80

% Efficient

70
60
50
40
30
20
10
0
0

Closing Rule Prediction
Truth
0.2

0.4
0.6
% Complete

0.8

1

Figure 23: Comparison actual efficiency pessimistic trade direct
bound.
Finally, present experimental results relate two methods ICE employs
bound final efficiency pessimistic trade. total pricing error across
bidders round determined within pricing terms ( , v ), normalized
total true value efficient trade, already small (at 8.5%) initial rounds
falls around 3% final rounds ICE. suggests price-based bound
quite informative, although note defined terms error given ( , v )
immediately map price-based accuracy claim true valuations
current trade defined lower bound valuations. Figure 23 compares actual efficiency
pessimistic trade round estimated direct bound efficiency
available exchange. confirms direct bound reasonably tight,
effective bounding true efficiency regardless accuracy prices.

7. Conclusions
work designed implemented scalable highly expressive iterative combinatorial exchange. design includes many interesting features, including: new treebased language combinatorial exchange environments, new method construct approximate linear prices expressive languages, proxied architecture optimistic
pessimistic valuations coupled price-based activity rules drive preference elicitation, direct method estimate final efficiency trade terms valuation
bounds. adopting proxy agents receive direct, expressive claims upper
lower valuations bounds able form claims efficiency despite using
linear prices. bounds allow good progress early rounds, even
efficient trade lower bound (pessimistic) values. Experimental results
automated, simple bidding agents indicate good behavior terms scalability
economic properties.
66

fiICE: Iterative Combinatorial Exchange

many intriguing opportunities future work. especially interesting
instantiate special-cases ICE design domains exist strategyproof,
static (two-sided) combinatorial market designs. would bring straightforward bidding
strategies ex post Nash equilibrium. example, possible integrate
methods trade-reduction (McAfee, 1992) generalizations (Babaioff & Walsh,
2005; Chu & Shen, 2007) domains restricted expressiveness. consider
ICE combinatorial auction rather exchange, direct appeal VCG payments would provide incentive compatibility. two major directions future work
to: (a) modify design allow bidders refine structure, valuation
bounds TBBL tree, across rounds; (b) extend ICE work dynamic environment changing bidder population, instance maintaining linear price feedback
periodically clearing. Recent progress on-line mechanism design includes truthful,
dynamic double auctions simple expressiveness (Blum, Sandholm, & Zinkevich,
2006; Bredin, Parkes, & Duong, 2007), extend kind expressiveness
price sophistication present ICE; see work Parkes (2007) recent survey.
Lastly, incentive properties ICE much dependent payment rule used
argues analysis Threshold rule alternatives.

Acknowledgments
work supported part NSF grant IIS-0238147. earlier version paper
appeared Proc. 6th ACM Conference Electronic Commerce, 2005. TBBL language described workshop paper (Cavallo et al., 2005). primary authors
paper Benjamin Lubin, Adam Juda David Parkes. Thanks anonymous
reviewers associate editor JAIR extremely helpful comments. Nick Elprin, Loizos
Michael Hassan Sultan contributed earlier versions work. thanks
students Al Roths class (Econ 2056) participated trial system
Cynthia Barnhart airline domain expertise. would thank Evan Kwerel
George Donohue early motivation encouragement. computation
used preparation manuscript performed Crimson Grid Harvard School Engineering Applied Sciences. Finally, papers genesis CS
286r Topics Interface Computer Science Economics taught Harvard
Spring 2004. Thanks students many early, innovative ideas.

Appendix A. Computation MRPAR
section show MRPAR computed solving sequence 3 MIPs.
begin considering special case = 0. general case follows almost immediately.
Define candidate passing trade, L
, as:
L
arg

max v (i ) p (i )

(x0 )

breaking ties
(i) maximize v (i ) v (i )
(ii) favor
67

(29)

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes

computed solving one MIP maximize v (i ) p (i ), followed
second MIP objective incorporated constraint v (i ) v (i )
becomes objective. Given perturbed valuation vi , defined respect trade L
(as
Section 4), define witness trade, U
,
as:

U
arg

max vi (i ) p (i ).

(30)

(x0 )

found solving third MIP. Given prices , provisional trade
bid tree Ti , computational MRPAR rule (C-MRPAR) case = 0
defined as:
L
U
U
(1) v (L
) p (i ) vi (i ) p (i ) ,and

L
L


(2) L
= , v (i ) p (i ) > vi (i ) p (i )

establish C-MRPAR equivalent MRPAR, defined (19)(21).
Lemma 4 Given trades , prices , tree Ti , (i , , vi ) 0, vi Ti
v (i ) p (i ) vi (i ) p (i ), vi defined respect trade .
Proof: Direction () immediate since vi Ti . Consider direction () suppose,


contradiction, v (i ) p (i ) vi (i )
Pp (i ) exists vi Ti






vi (i ) p (i ) < vi (i ) p (i ). Subtract [vi () v ()] sides,

indicates node satisfied trade , get
X
X
X
X
v () p (i ) <
vi () +
vi ()
vi () +
X



X



vi ()



v () +

\i

X

vi () +

\i

X







\i

X

v (i ) p (i ) <

X

v () p (i ) <

v () +

\i

vi (i )

p



X

v () p (i )

(31)








vi () +

X

v () p (i ) (32)



(i ),

(33)

contradiction.



Lemma 5 Given trade , prices , tree Ti (i , , vi ) 0, vi Ti ,
U
(x0 ), v (i ) p (i ) vi (U
) p (i ), vi defined respect
U
trade witness trade.
0
Proof: Direction () immediate since vi Ti U
(x ). Consider direction

U
() suppose, contradiction, v (i ) p (i ) vi (i ) p (U
) exists

0




(x ) vi Ti (i , , vi ) < 0. Lemma 4, means
v (i ) p (i ) < vi (i ) p (i ). But, contradiction
U
v (i ) p (i ) vi (U
) p (i )

=

max

0

(x )

vi (i )

p

(34)


(i )



vi (i )

p



(i )

(35)


68

fiICE: Iterative Combinatorial Exchange

Theorem 7 C-MRPAR equivalent -MRPAR = 0.
Proof: Comparing (17) (18) C-MRPAR, given Lemmas 4 5,
left show sufficient check L
, candidate pass MRPAR.
is, need show (x0 ) satisfies MRPAR L
satisfies
MRPAR. argue follows:
1. Trade must solve maxi (x0 ) [v (i ) p (i )]. Otherwise,
v (i ) p (i ) > v (i ) p (i ). contradiction (17).
2. Trade must break ties favor maximizing v (i ) v (i ). Otherwise,
profit v , v (i ) v (i ) > v (i ) v (i ).
implies v (i ) v (i ) > v (i ) v (i ), (i , , v ) > (i , , v ). But, since
profit v (i , , v ) = 0 (i , , v ) > 0.
contradiction (17).
3. Proceed case analysis. Either = , case done
explicitly selected candidate passing trade L
. case, let
L
denote

feasible
solutions

(29)

consider

difficult
case |L

| > 1.
L

argue satisfies MRPAR, trade L
,
6= . MRPAR, (i , , vi ) 0, vi Ti . particular,
vi (i )p (i ) vi (i )p (i ), vi defined respect , equivalently,
v (i ) p (i ) vi (i ) p (i ).

(36)

v (i ) p (i ) = v (i ) p (i ),

(37)

hand,


since L
. Taking (36) together (37), must satisfies
uncertain value nodes Ti satisfied . Moreover, since v (i )
v (i ) = v (i ) v (i ), trades must satisfy exactly uncertain value
nodes. Finally, (37) profit fixed value nodes Ti must
trades. conclude profit vi Ti
current prices MRPAR satisfied either trade.


understand importance tie-breaking rule (i) selecting candidate
passing trade, L
, C-MRPAR, consider following example MRPAR = 0:
Example 10 bidder XOR(+A, +B) value 5 leaf +A value range
[5,10] leaf +B. Suppose prices currently 3 B = +B.
MRPAR rule satisfied market knows however remaining value
uncertainty +B resolved bidder always (weakly) prefer +B +A +B
. Notice +A +B pessimistic utility, +B satisfy
MRPAR. +B maximal value uncertainty, therefore selected +A
C-MRPAR.
69

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes

understand importance selecting, evaluating, U
respect vi rather
v , consider following example (again = 0). illustrates role shared
uncertainty tree, occurs multiple trades share node uncertain
value value, although uncertain, resolved way trades.
Example 11 bidder XOR(+A, +B) value bounds [5, 10] root node
value 1 leaf +A. Suppose prices currently 3 B = +B.
MRPAR rule satisfied bidder strictly prefers +A +B, whichever way
uncertain value root node ultimately resolved. C-MRPAR selects L
buy
(L ) = 5 + 1 3 = 3. valuation v , witness trade buy B
)

p
A, payoff v (L



would selected payoff 10 3 = 7 seem violate MRPAR. But, whichever
way uncertain value root resolved affect +A +B way.
addressed setting vi () = v () = 5 root node, value adopted
determining payoff L
. Evaluated vi , witness buy (1)
C-MRPAR trivially satisfied (2) satisfied since 3 > 5 3 = 2.
-MRPAR > 0, adopt slight variation, -C-MRPAR procedure
defined as:
(1) Check (i , , vi ) vi Ti , (x0 ) directly, application
Lemma 5 valuation vi defined respect trade , test
U
v (i ) p (i ) vi (U
) p (i )

(38)

(2) satisfied fall back C-MRPAR verify (20) (21),

candidate passing trade L
modified (29) drop tie-breaking favor
L

L
second step C-MRPAR modified require v (i ) p (i ) > vi (i )
p (i ) + , vi defined respect L
.
argument adopted proof Theorem 7 remains valid establishing

sufficient consider L
, defined -C-MRPAR, case pass
activity rule.

Appendix B. Computation DIAR
-DIAR rule verified solving two MIPs. first optimization problem
identifies trade maximal DIAR error current bounds refinement
improved error least :
Pi =

max [vi0 (i ) p (i ) (v 0i (i ) p (i ))]

(x0 )

(39)

s.t. (vi0 (i ) p (i ) (v 0i (i ) p (i )))
= C +

max

(x0 )

(vi1 (i ) p (i ) (v 1i (i ) p (i )))

(40)

vi0 (i )

(41)



p (i )

s.t. vi0 (i ) v 0i (i ) vi1 (i ) + v 1i (i ) ,
70

(42)

fiICE: Iterative Combinatorial Exchange

vi0 vi1 defined respect , v 0 v 1 represent valuations defined
bidders refinement respectively, C = v 0i (i ) p (i ). Note
problem could infeasible, case define Pi := .
second optimization identifies trade maximal DIAR error v 1 still
allows possibility valuation bounds provide error reduction v 0 :
=

max [vi0 (i ) p (i ) (v 0i (i ) p (i ))]

(x0 )

(43)

s.t. (vi0 (i ) p (i ) (v 0i (i ) p (i )))
(v 1i (i ) p (i ) (vi1 (i ) p (i )))
= C +

max vi0 (i ) p (i )

(x0 )

s.t. vi0 (i ) v 0i (i ) v 1i (i ) + vi1 (i ) ,

(44)
(45)
(46)

vi defined respect , vi similarly defined respect .
second term (44) recognizes remains possible decrease value
new lower-bound v 1i (i ), increasing value new upper-bound v 1i (i )
except nodes shared , giving vi1 (i ). see (46) equivalent
to:
X
X
[v 1i () v 0i ()] ,
[v 0i () v 1i ()] +
\



\i

calculates amount refinement still possible service reducing
DIAR error. Note problem could infeasible, case define := .
ultimately compare two solutions, bidder passes DIAR Pi .

Appendix C. Automated Bidding Agents Bidder Feedback
bidding agents used simulation experiments designed minimize
amount information revealed order pass activity rules remaining
straightforward true valuation consistent lower upper valuations.
summarizing behavior bidding agents, three things explain: (a)
method adopt place last-and-final round; (b) feedback provided
ICE bidders meeting MRPAR DIAR; (c) logic followed
bidding agents. Rather define method bidding agents adjust bounds
last-and-final round, keep ICE open simulation past point would
ordinarily go last-and-final. Past point, bidding agents continue refine
bounds ICE terminates payments within desired accuracy.
bidding agent phase reduces uncertainty multiplicative factor
nodes active current provisional trade provisional trades
economies bidder removed. adopted simulation purposes only.
bidding agents operate loop, heuristically modifying valuation bounds
trying meet MRPAR DIAR querying proxy advice. proxy provides
guidance help bidding agent refine valuation meet activity
rule. MRPAR DIAR, optimization problems solved checking
whether bidder satisfied activity rule provide information guide
71

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes

U
bidder. First consider MRPAR recall L
candidate passing trade
witness trade. following lemma easy, stated without proof:

Lemma 6 MRPAR satisfied current valuation bounds, bidder must
U
increase lower bound least one node {L
\ }, decrease upper bound
U
L
least one node {i \ }, order meet activity rule.
simple bidder makes changes subset nodes, bidder
inquire passed activity rule. proxy respond yes
revise set nodes bidding agent refine valuation bounds.
similar functionality provided DIAR. time trade solves second MIP
(with DIAR error ) provided feedback, together information much
bidder must either reduce error, constrain possibilities
trade, satisfy DIAR. bidding agent determine information nodes
must modify, much total, free decide much modify
node satisfy rule. key agent design following lemma:
Lemma 7 trade straightforward bidder passes MRPAR (for = 0) must
trade weakly preferred bidder trades true valuation.
Proof: contradiction. Suppose true valuation vi Ti trade meets MRPAR
weakly preferred trade true valuation prices . Then, exists
trade (x0 ) (i , , vi ) > 0. But, contradiction MRPAR
since (i , , vi ) 0 vi Ti (x0 ), including vi = vi = .
use observation define procedure UpdateMRPAR bidder
intelligently refine valuation bounds meet MRPAR. Let trade
hope pass MRPAR, define ui (i , ) = vi (i ) p (i ), ui (i , ) = v (i )
p (i ), ui (i , ) = vi (i ) p (i ), vi defined respect candidate passing
trade . high-level approach follows:
function UpdateMRPAR
arg maxi (x0 ) ui (i , )
ui (i , ) < 0
reduce slack ui (i , )
end
U
arg maxi (x0 ) ui (i , )
ui (i , ) < ui (U
, )
U
Heuristically reduce upper bounds U
\ ui (i , ) ui (i , )
remaining slack heuristically reduce lower bounds \ U

U
arg maxi (x0 ) ui (i , )
end
6=
ui (i , ) ui (i , )
Heuristically reduce upper bounds \ ui (i , ) ui (i , )
remaining slack heuristically reduce lower bounds \
72

fiICE: Iterative Combinatorial Exchange

end
end
return
end function
bidding agent makes use couple optimization modalities exposed
proxy bidder. procedure first chooses preferred trade truth
trade pass MRPAR ; bidding agent requests proxy finds
trade solving MIP. trade negative profit, bidding agent attempts
demonstrate positive profit trade. Next, bidding agent enters loop, wherein
repeatedly requests proxy run MIP calculates witness trade U
respect
. long witness profit preferred
trade, bidding agent adjust bounds reverse mis-ordering. Lastly,
bidding agent must pass MRPAR, merely RPAR, bidding agent attempts
show strict preference identical.
meeting DIAR, bidding agent responds F 0 0 parameter
provided proxy follows. Let F trade chosen maximization
calculates F . high-level approach follows:
function updateDIAR
Proxy says still passed DIAR
F modified reduce DIAR error last round
Heuristically reduce upper-bound slack F \
Heuristically reduce lower-bound slack \ F
else
Heuristically reduce upper-bound slack \ F
Heuristically reduce lower-bound slack F \
end
end
end function
bidding agent attempts make current failing trade pass DIAR possible
reducing error respect trade. Otherwise, reduces bounds prove
DIAR could made pass trade loops next trade.

References
Ausubel, L., Cramton, P., & Milgrom, P. (2006). clock-proxy auction: practical
combinatorial auction design. Cramton et al. (Cramton et al., 2006), chap. 5.
Ausubel, L. M., & Milgrom, P. (2002). Ascending auctions package bidding. Frontiers
Theoretical Economics, 1, 142.
Babaioff, M., & Walsh, W. E. (2005). Incentive-compatible, budget-balanced, yet highly
efficient auctions supply chain formation. Decision Support Systems, 39, 123149.
Ball, M., Donohue, G., & Hoffman, K. (2006). Auctions safe, efficient, equitable
allocation airspace system resources. Cramton et al. (Cramton et al., 2006),
73

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes

chap. 20.
Ball, M. O., Ausubel, L. M., Berardino, F., Cramton, P., Donohue, G., Hansen, M., &
Hoffman, K. (2007). Market-based alternatives managing congestion new yorks
laguardia airport. Proceedings AirNeth Annual Conference.
Bererton, C., Gordon, G., & Thrun, S. (2003). Auction mechanism design multi-robot
coordination. Proc. 17th Annual Conf. Neural Information Processing Systems
(NIPS03).
Bertsimas, D., & Tsitsiklis, J. (1997). Introduction Linear Optimization. Athena Scientific.
Bikhchandani, S., & Mamer, J. W. (1997). Competitive equilibrium exchange economy
indivisibilities. Journal Economic Theory, 74, 385413.
Bikhchandani, S., & Ostroy, J. M. (2002). package assignment model. Journal
Economic Theory, 107 (2), 377406.
Blum, A., Sandholm, T., & Zinkevich, M. (2006). Online algorithms market clearing.
Journal ACM, 53, 845879.
Boutilier, C. (2002). Solving concisely expressed combinatorial auction problems.
Proceedings 18th National Conference Artificial Intelligence, pp. 359366.
Boutilier, C., & Hoos, H. (2001). Bidding languages combinatorial auctions. Proc.
17th International Joint Conference Artificial Intelligence, pp. 11211217.
Bredin, J., Parkes, D. C., & Duong, Q. (2007). Chain: dynamic double auction framework
matching patient agents. Journal Artificial Intelligence Research, 30, 133179.
Cavallo, R., Parkes, D. C., Juda, A. I., Kirsch, A., Kulesza, A., Lahaie, S., Lubin, B.,
Michael, L., & Shneidman, J. (2005). TBBL: Tree-Based Bidding Language
Iterative Combinatorial Exchanges. Multidisciplinary Workshop Advances
Preference Handling (IJCAI).
Chu, L. Y., & Shen, Z. M. (2007). Truthful double auction mechanisms e-marketplace.
Operations Research. appear.
Compte, O., & Jehiel, P. (2007). Auctions information acquisition: Sealed-bid Dynamic Formats?. Rand Journal Economics, 38 (2), 355372.
Conen, W., & Sandholm, T. (2001). Preference elicitation combinatorial auctions..
Wellman, & Shoham (Wellman & Shoham, 2001), pp. 256259.
Cramton, P. (2003). Electricity Market Design: Good, Bad, Ugly.
Proceedings Hawaii International Conference System Sciences.
Cramton, P. (2006). Simultaneous ascending auctions. Cramton et al. (Cramton et al.,
2006), chap. 3.
Cramton, P., Kwerel, E., & Williams, J. (1998). Efficient relocation spectrum incumbents.
Journal Law Economics, 41, 647675.
Cramton, P., Shoham, Y., & Steinberg, R. (Eds.). (2006). Combinatorial Auctions. MIT
Press.
74

fiICE: Iterative Combinatorial Exchange

Day, R., & Raghavan, S. (2007). Fair payments efficient allocations public sector
combinatorial auctions. Management Science, 53 (9), 1389.
de Vries, S., Schummer, J., & Vohra, R. V. (2007). ascending Vickrey auctions
heterogeneous objects. Journal Economic Theory, 132, 95118.
de Vries, S., & Vohra, R. V. (2003). Combinatorial auctions: survey. Informs Journal
Computing, 15 (3), 284309.
Dias, M., Zlot, R., Kalra, N., & Stentz, A. (2006). Market-based multirobot coordination:
survey analysis. Proceedings IEEE, 94, 12571270.
Dunford, M., Hoffman, K., Menon, D., Sultana, R., & Wilson, T. (2003). Testing linear
pricing algorithms use ascending combinatorial auctions. Tech. rep., SEOR,
George Mason University. Submitted INFORMS J.Computing.
Fu, Y., Chase, J., Chun, B., Schwab, S., & Vahdat, A. (2003). Sharp: architecture
secure resource peering. Proceedings 19th ACM symposium Operating
systems principles, pp. 133148. ACM Press.
Gerkey, B. P., & Mataric, M. J. (2002). Sold!: Auction methods multi-robot coordination.
IEEE Transactions Robotics Automation, Special Issue Multi-robot Systems,
18, 758768.
Hudson, B., & Sandholm, T. (2004). Effectiveness query types policies preference
elicitation combinatorial auctions. Proc. 3rd Int. Joint. Conf. Autonomous
Agents Multi Agent Systems, pp. 386393.
Kelso, A. S., & Crawford, V. P. (1982). Job matching, coalition formation, gross
substitutes. Econometrica, 50, 14831504.
Krishna, V. (2002). Auction Theory. Academic Press.
Kwasnica, A. M., Ledyard, J. O., Porter, D., & DeMartini, C. (2005). new improved
design multi-object iterative auctions. Management Science, 51, 419434.
Kwerel, E., & Williams, J. (2002). proposal rapid transition market allocation
spectrum. Tech. rep., FCC Office Plans Policy.
Lahaie, S., Constantin, F., & Parkes, D. C. (2005). power demand queries
combinatorial auctions: Learning atomic languages handling incentives. Proc.
19th Int. Joint Conf. Artificial Intell. (IJCAI05).
Lahaie, S., & Parkes, D. C. (2004). Applying learning algorithms preference elicitation.
Proc. 5th ACM Conf. Electronic Commerce (EC-04), pp. 180188.
McAfee, R. P. (1992). dominant strategy double auction. J. Economic Theory, 56,
434450.
Milgrom, P. (2004). Putting Auction Theory Work. Cambridge University Press.
Milgrom, P. (2007). Package auctions package exchanges (2004 Fisher-Schultz lecture).
Econometrica, 75, 935966.
Mishra, D., & Parkes, D. C. (2007). Ascending price Vickrey auctions general valuations.
Journal Economic Theory, 132, 335366.
75

fiLubin, Juda, Cavallo, Lahaie, Shneidman & Parkes

Myerson, R. B., & Satterthwaite, M. A. (1983). Efficient mechanisms bilateral trading.
Journal Economic Theory, 28, 265281.
Nemhauser, G., & Wolsey, L. (1999). Integer Combinatorial Optimization. WileyInterscience.
Nisan, N. (2006). Bidding languages combinatorial auctions. Cramton et al. (Cramton
et al., 2006), chap. 9.
Nisan, N., Roughgarden, T., Tardos, E., & Vazirani, V. (Eds.). (2007). Algorithmic Game
Theory. Cambridge University Press.
ONeill, R. P., Sotkiewicz, P. M., Hobbs, B. F., Rothkopf, M. H., & Stewart, Jr., W. R.
(2005). Efficient market-clearing prices markets nonconvexities. European
Journal Operations Research, 164, 269285.
Parkes, D. C. (2007). On-line mechanisms. Nisan et al. (Nisan, Roughgarden, Tardos,
& Vazirani, 2007), chap. 16. appear.
Parkes, D. C., Kalagnanam, J. R., & Eso, M. (2001). Achieving budget-balance
Vickrey-based payment schemes exchanges. Proc 17th International Joint Conference Artificial Intelligence, pp. 11611168.
Parkes, D. C., & Ungar, L. H. (2000a). Iterative combinatorial auctions: Theory practice. Proc. 17th National Conference Artificial Intelligence (AAAI-00), pp.
7481.
Parkes, D. C., & Ungar, L. H. (2000b). Preventing strategic manipulation iterative
auctions: Proxy agents price-adjustment. Proc. 17th National Conference
Artificial Intelligence (AAAI-00), pp. 8289.
Rassenti, S. J., Smith, V. L., & Bulfin, R. L. (1982). combinatorial mechanism airport
time slot allocation. Bell Journal Economics, 13, 402417.
Rothkopf, M. H., Pekec, A., & Harstad, R. M. (1998). Computationally manageable combinatorial auctions. Management Science, 44 (8), 11311147.
Saatcioglu, K., Stallaert, J., & Whinston, A. B. (2001). Design financial portal. Communications ACM, 44, 3338.
Sandholm, T. (2006). Optimal winner determination algorithms. Cramton et al. (Cramton et al., 2006), chap. 14.
Sandholm, T. (2007). Expressive Commerce Application Sourcing:
Conducted $35 Billion Generalized Combinatorial Auctions. AI Magazine, 28 (3),
45.
Sandholm, T., & Boutilier, C. (2006). Preference elicitation combinatorial auctions.
Cramton et al. (Cramton et al., 2006), chap. 10.
Shapley, L. S., & Shubik, M. (1972). assignment game I: core. Int. Jounral
Game Theory, 1, 111130.
Smith, T., Sandholm, T., & Simmons, R. (2002). Constructing clearing combinatorial
exchanges using preference elicitation. AAAI-02 workshop Preferences AI
CP: Symbolic Approaches.
76

fiICE: Iterative Combinatorial Exchange

Vossen, T. W. M., & Ball, M. O. (2006). Slot trading opportunities collaborative ground
delay programs. Transportation Science, 40, 1528.
Wellman, M. P., & Shoham, Y. (Eds.). (2001). Proc. 3rd ACM Conf. Electronic Commerce (EC-01), New York, NY. ACM.
Wurman, P. R., & Wellman, M. P. (2000). AkBA: progressive, anonymous-price combinatorial auction. Proc. 2nd ACM Conf. Electronic Commerce (EC-00), pp.
2129.

77


