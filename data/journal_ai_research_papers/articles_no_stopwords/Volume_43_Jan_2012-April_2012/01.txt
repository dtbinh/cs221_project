Journal Artificial Intelligence Research 43 (2012) 43-86

Submitted 07/11; published 01/12

Robust Local Search Solving RCPSP/max
Durational Uncertainty
Na Fu
Hoong Chuin Lau
Pradeep Varakantham

na.fu.2007@phdis.smu.edu.sg
hclau@smu.edu.sg
pradeepv@smu.edu.sg

School Information Systems,
Singapore Management University,
80 Stamford Road, 178902 Singapore

Fei Xiao

feixiao@gmail.com

Google Inc.
1600 Amphitheatre Parkway Mountain View,
CA 94043 USA

Abstract
Scheduling problems manufacturing, logistics project management frequently modeled using framework Resource Constrained Project Scheduling
Problems minimum maximum time lags (RCPSP/max). Due importance
problems, providing scalable solution schedules RCPSP/max problems
topic extensive research. However, existing methods solving RCPSP/max assume
durations activities known certainty, assumption hold
real world scheduling problems unexpected external events manpower
availability, weather changes, etc. lead delays advances completion activities.
Thus, paper, focus providing scalable method solving RCPSP/max
problems durational uncertainty. end, introduce robust local search
method consisting three key ideas: (a) Introducing studying properties two
decision rule approximations used compute start times activities respect dynamic realizations durational uncertainty; (b) Deriving expression robust
makespan execution strategy based decision rule approximations; (c) robust
local search mechanism efficiently compute activity execution strategies robust
durational uncertainty. Furthermore, provide enhancements local search
exploit temporal dependencies activities. experimental results illustrate
robust local search able provide robust execution strategies efficiently.

1. Introduction
Research scheduling typically considered problems deterministic durations.
real-world scheduling problems, unexpected external events manpower availability,
weather changes, etc. lead uncertainty durations activities.
growing interest account data uncertainty (Herroelen & Leus, 2005; Beck &
Wilson, 2007; Rodrguez, Vela, Puente, & Hernandez-Arauzo, 2009) providing optimized schedules. paper focuses important issue durational uncertainty
scheduling problems. specifically, consider scheduling problems
complex resource constraints temporal dependencies activities.
c
2012
AI Access Foundation. rights reserved.

fiFu, Lau, Varakantham, & Xiao

broadly two approaches tackling scheduling problems durational
uncertainty. One adopt hybrid proactive reactive methods, e.g., work
Vonder, Demeulemeester, Herroelen (2007), initial baseline schedule
computed offline, modified (if required) execution reactively based
occurrence external events. second approach, e.g., paper Mohring
Stork (2000), design schedule policies provide online decision rules
time t, policy decides task(s) may start resource(s) assign.
paper, adopt latter approach focus computation robust schedule
policy.
computational perspective, stochasticity adds great deal complexity
underlying deterministic scheduling problem. example, infinite-resource project
scheduling problem processing times two possible discrete values, problem
computing expected makespan (or point cumulative distribution
optimal makespan), #P-hard (Hagstrom, 1988; Mohring,
2001). shown
P
scheduling problem 1|stoch pj ; dj = d|E[ wj Uj ], problem computing
policy (i.e., execution strategy) maximizing probability job completes exactly
deadline PSPACE-hard (Dean, Goemans, & Vondrak, 2004). Daniels Carrillo
(1997) consider one-machine scheduling problem probabilistic durations,
objective capture likelihood schedule yields actual performance worse
given target level. shown NP-hard even though underlying
deterministic problem solved polynomial time.
concrete problem interest paper Resource Constrained Project
Scheduling Problem minimum maximum time lags (abbrev. RCPSP/max),
great importance manufacturing, logistics project management. Though
problems shown NP-Hard (Bartusch, Mohring, & Radermacher, 1988),
local search based techniques (Demeulemeester & Herroelen, 2002) achieved great
success solving problems. Taking cue recent advancements
robust optimization, propose robust local search method solving RCPSP/max
problem durational uncertainty risk management perspective. precisely,
(a) employ concepts robust optimization compute robust makespan
proven success probability (or risk failure) execution strategy; (b) use
local search methods computing execution strategy seeks minimize robust
makespan.
recent approach (Beck & Wilson, 2007) provides techniques compute robust
baseline schedule risk management perspective, durations activities
modeled random variables. Given value 0 < 1, interested compute schedule minimal (probabilistic) makespan probability successful
execution least 1 realizations durational uncertainty. main
contribution derive lower bound -makespan given schedule
solving deterministic problem. considered Job-shop Scheduling Problem (JSP)
represents special case RCPSP/max (which problem interest
paper).
Unlike JSPs, complex resource constraints activity dependencies
RCPSP/max problems durational uncertainty. account these, compute
execution strategy (also known commonly schedule policy) called Partial Order Schedule
44

fiRobust Local Search Solving RCPSP/max Durational Uncertainty

(POS) instead schedule. combine techniques robust optimization classical
local search compute POS minimizes robust makespan. robust makespan
value probability realized makespan schedule (derived
POS) exceed greater (1 ), realizations uncertainty. Thus,
compute upper bound makespan values opposed lower bound computation
work Beck Wilson (2007).
specifically, make three key contributions paper. Firstly, introduce
two decision rule approximations define expressions start times activities based
random variables used represent durational uncertainties: (a) Segregated Linear
Approximation(SLA) (b) Generalized Non-Linear Approximation (GNLA). Secondly,
derive expressions upper bound robust makespan employing one sided
Chebyshevs inequality decision rule approximations above. Finally, perform local
search execution strategy using robust makespan upper bound. provide
enhancements consider feedback robustness execution strategies improve
performance local search.
order demonstrate effectiveness methods, evaluate performance
benchmark problem sets RCPSP/max Job-shop Scheduling Problems (JSPs)
durational uncertainty. Furthermore, make house comparison amongst various
enhancements developed paper. Finally, due absence competing algorithms
solving RCPSP/max problems provide indication performance provided
robust local search, compare existing best solver JSPs durational
uncertainty.
next section, present brief background models solution concepts
referred paper. present decision rule approximations Section 3
computation robust makespan upper bound Section 4. detailed description
robust local search enhancements provided Section 5 Section 6. Finally,
experimental setup results provided Section 7.

2. Preliminaries
section, briefly describe notations along scheduling models
robust optimization concepts relevance paper.
2.1 Definitions Notations
given Ben-Tal Nemirovski (2002), classify variables stochastic
optimization problem 2 types: Adjustable Non-Adjustable variables.
Definition 1. Non-Adjustable variables priori decisions must made
actual realization uncertainty.
Definition 2. Adjustable variables (also known recourse variables) wait-and-see
variables adjust part uncertain data become known.
example, scheduling problem RCPSP uncertain task durations,
non-adjustable variables represent execution policy, e.g., POS proposed
Policella, Smith, Cesta, Oddi (2004), need constructed priori,
45

fiFu, Lau, Varakantham, & Xiao

adjustable variables associated actual start times tasks,
set respect execution policy dynamic realizations uncertainty.
random variable denoted x bold face lower case letters x
represent vectors.
2.2 RCPSP/max
describe deterministic RCPSP/max scheduling problem along extension handle durational uncertainty. explain execution policy uncertain
duration extension RCPSP/max.
2.2.1 Deterministic RCPSP/max
RCPSP/max problem (Bartusch et al., 1988) consists N activities {a1 , a2 ..., },
activity aj (j = 1, ...N ) executed certain amount time units
without preemption. activity aj fixed duration processing time dj ,
assumed non-negative real number non-negative integer number. addition,
dummy activities a0 +1 d0 = dN +1 = 0 introduced represent beginning
completion project, respectively.
start time schedule ss assignment start times activities a1 , a2 ..., , i.e.
vector ss = (st(a1 ), st(a2 ), ...st(aN )) st(ai ) represents start time activity ai
st(a0 ) assumed 0. Let et(ai ) end time activity ai . Since durations
deterministic preemption allowed,
st(ai ) + di = et(ai ).

(1)

project makespan start time final dummy activity st(aN +1 )
equals
st(aN +1 ) = maxi=1,...N et(ai ).
(2)
Schedules subject two kinds constraints, temporal constraints resource
constraints. Temporal constraints restrict time lags activities. minimum
time lag Tijmin start time two different activities ai aj says
st(aj ) st(ai ) Tijmin

(3)

Specially, Tijmin = 0 means activity aj cannot started activity ai begins.
maximum time lag Tijmax start time two different activities ai aj says

st(aj ) st(ai ) Tijmax
(4)
Tijmax = 0 means activity aj cannot started activity ai begins.
definition, time lags connect start times two related activities, known
start-to-start time lags. start-to-end, end-to-end, end-to-start time lags easily transformed general start-to-start time lags deterministic case given Bartusch
et al. (1988). schedule ss = (st(a1 ), st(a2 ), ...st(aN )) time feasible, time lag
constraints satisfied start times st(ai ) (i = 1, ...N ).
resource unit reusable available another activity longer used
current activity. type resource limited capacity, Ck (k = 1, 2..., K)
46

fiRobust Local Search Solving RCPSP/max Durational Uncertainty

units. activity ai requires rik units resource type k k = 1, 2..., K. Let
A(t) = {i {1, 2...N }|st(ai ) et(ai )} set activities processed
time instant t. schedule resource feasible time instant t, total demand
resource k exceed capacity Ck , i.e.
X
rik Ck .
(5)
iA(t)

schedule ss called feasible time resource feasible. objective
deterministic RCPSP/max scheduling problem find feasible schedule
project makespan minimized.

Figure 1: Project Instance.

1

time

Figure 2: Example Schedule.

47

fiFu, Lau, Varakantham, & Xiao

Example 1. Figure 1, show simple example deterministic RCPSP problem
special case RCPSP/max precedence constraints (rather arbitrary time lags) activities expository purposes. circle indicates activity
number inside circle representing activity ID. two numbers top
activity represent duration number units resource required
activity. example, 9 activities one type resource, capacity
resource limited 10. noted activities 0 10 dummy activities introduced source sink dependency graph. Arrows activities
represent temporal dependencies. feasible schedule makespan 13 represented
Figure 2.
2.2.2 RCPSP/max Durational Uncertainty Robust Makespan
paper, consider RCPSP/max problems durational uncertainty. duration
activity specified sum mean value deviation: di = d0i + zi , d0i
mean di zi perturbation part expected value 0 standard
deviation . noted irrespective distribution type, always
represent di di = d0i + zi d0i mean zi perturbation part
E(zi ) = 0. addition, assume random variables, {zi }, corresponding
durational uncertainty independent other.
Similar deterministic RCPSP/max, start-to-start constraints still deterministic. However, unlike deterministic case, types constraints (end-to-start
etc.) cannot converted deterministic start-to-start constraints . Instead equivalent start-to-start constraint stochastic one shown following expressions
end-to-start constraint. noted even though converted constraints
stochastic, techniques still applicable (with minor modifications) types
time lag constraints. robust local search techniques depend computation
maximum sum random variables even stochastic time lag constraints
remains case. paper, purposes exposition, present techniques
assuming temporal dependencies provided start-to-start constraints.
st(aj ) et(ai ) Tijmax
st(aj ) (st(ai ) + di ) Tijmax
st(aj ) st(ai ) Tijmax + di
deterministic setting, start time schedules computed values makespan
used evaluate performance schedule. However, durational uncertainty involved, project makespan becomes random variable schedule
replaced execution strategy. following sections, introduce Partial
Order Schedule (POS) (Policella et al., 2004), serves execution strategy
scheduling project.
Given level risk 0 < 1, goal problem find strategy minimum value (across strategies) robust makespan. define
robust makespan makespan value probability feasible schedule (i.e.
assignment start times activities) instantiated strategy completed
robust makespan least 1 .
48

fiRobust Local Search Solving RCPSP/max Durational Uncertainty

2.2.3 Partial Order Schedule
Partial Order Schedule (POS) first proposed Policella et al. (2004). defined
set activities, partially ordered schedule total activity order
consistent partial order resource time feasible. Mathematically, POS
represented graph node represents activity edges represent
precedence constraints activities. Within POS, activity retains set
feasible start times, provide flexibility respond unexpected disruptions.
POS constructed given RCPSP instance via chaining algorithm (where
one algorithm described below).
1

Figure 3: Example POS
Example 2. Figure 3 provides POS problem instance introduced Example 1.
10 units resource shown left side figure.
unit represents chain. activity require multiple resource units hence
shown multiple resource units. instance, activity 6 shown resource units
4, 7 8. solid arrow activities represents temporal dependency provided
original problem. Solid arrow activities 1 2 one example.
dotted arrow activities represents temporal dependency introduced since
activities executed resource unit. added remove resource
conflict. example dependency introduced activity 2 activity
6. explanatory purposes consider one resource type example, however
general case, exists multiple resource types dependency diagram
every resource type.
2.2.4 Chaining Algorithm
Chaining procedure dispatching activities different resource units (henceforth
referred chains) based temporal resource feasibility. chaining
process, activity allocated one resource chains based number
resource requirement activity. chaining process, activity
scheduled executed resource unit, additional edge (indicating precedence
49

fiFu, Lau, Varakantham, & Xiao

relationship) added last activity selected chain activity
eliminate possible resource conflicts.
following, describe basic chaining algorithm proposed Policella et al.
(2004). algorithm, feasible schedule first obtained using simple greedy heuristic.
Consequently, POS constructed chaining method follows: First, set
activities sorted according start times given feasible solution; Then,
activities allocated different chains order, chain corresponds
unit certain type resource. chain called available activity end time
last activity allocated chain greater start time activity
feasible schedule. activity allocated chain, precedence constraint
activity last activity chain posted. activities
require one unit one types resources, allocated
number chains number equal overall number resource units required
activity.
Example 3. Take Figure 3 example. Given schedule Figure 2 input,activities
first sorted according starting time sequence activities presented
as: (7,1,2,8,3,5,4,6,9). chaining procedure first picks activity 7 randomly allocates
five chains fulfill resource requirement. available chains belonging
dummy activity 0.Thus, five chains 1 5 created posts precedence
relationship current last activity 0 activity 7. Activity 7 becomes last
activity chains. Activity 1 treated way. available chains
activity 2 belonging activity 1. Activity 2 randomly assigned chain 8
10 edge activity 1 activity 2 indicating precedence relationship
added. procedure continues activities dispatched chains number
equals resource requirement, finally chained POS 3 yielded. However,
randomness chaining procedure, activity 6 allocated chains belong
three different activities: activity 2, activity 1 activity 7. tie together
execution three previously unrelated activities: (activity 2, activity 6),(activity 1, activity
6) (activity 7, activity 6), would decrease flexibility execution.
reduce inter-dependencies activities much possible chaining
procedure, Policella, Cesta, Oddi, Smith (2009) developed two heuristics. One direct
advantage approaches synchronization points solution reduced:
Activities require one resource units allocated subset
chains. achieved scanning list available chains last activity
chain : (a) requires multiple resource units; (b) previously assigned
another resource unit allocated current activity.
Activities precedence constraint defined original problem allocated
set chains. implemented choosing chain last
activity precedence constraint current activity.
Example 4. Figure 4 provides POS computed using mentioned chaining
algorithm RCPSP problem described Example 1. allocating activity 6,
50

fiRobust Local Search Solving RCPSP/max Durational Uncertainty

1

Figure 4: POS computed Removed Synchronization Point
available chains divided two sets: {chain 10, chain 9} {chain 8, chain7,
chain6}. first set contains chains last activity (i.e. activity 5) already
ordered problem definition respect activity 6. chain (for example, chain 10)
randomly chosen set last activity activity 5. Then, remaining
available chains activity 6 redivided two sets: {chain 9} {chain 8, chain7,
chain6}. first set contains chains activity 5 (i.e. last activity first
picked chain) last activity second set remaining. Activity 6 first
allocated chains belonging first subset satisfy remaining resource requirements.
case, synchronization points caused activities 1 6, activities 7 6
allocated different chains disappeared.
2.3 Job-shop Scheduling Problem (JSP) Durational Uncertainty
classical JSP consists set n jobs set machines. job Ji (i = 1, ...n)
consists sequence ni operations denoted Oij (j = 1, ...ni )
processed given order.
P convenience, enumerate operations jobs Ok ,
k = 1, ...N N = nj=1 nj . operation Ok positive duration denoted
dk must executed dedicated machine denoted Mk . operation
started must executed entire duration. operations require
resource overlap execution. Thus, operations partitioned two sets:
job sets resource sets. Job sets referring operations corresponding job
resource sets referring operations require resource.
solution total ordering operations resource set, conflict
job ordering. path solution sequence operations follows
job ordering ordering various resource sets solution s. length
path equal sum durations operations path. makespan
solution make(s) length longest path. minimum makespan
JSP problem defined minimum value makespans solutions, i.e.
mins make(s). operation Ok associated start time st(Ok ) end time
51

fiFu, Lau, Varakantham, & Xiao

et(Ok ). schedule assignment starting times st(Ok ) (k = 1, ...N ) operations
machines. objective find schedule optimizes total makespan
(makespan completion time last operation): maxN
k=1 et(Ok ),
minimum value longest path solutions. job shop scheduling problem
special case RCPSP resources unary capacity activity (i.e.
operation) consumes one resource.
propagate notations RCPSP/max durational uncertainty
JSP durational uncertainty, i.e. processing time activity (i.e. operation)
dOk modeled sum expected value d0Ok random part zOk : dOk =
d0Ok + zOk . objective find robust makespan given level risk.
2.4 Segregated Random Variables
primitive random variable zk one zero mean. Examples primitive random
variable include U (a, a) (uniform distribution constants a) N (0, )
(normal distribution mean 0 variance 2 ). mentioned earlier, assume
every uncertain distribution equal sum nominal value (mean)
deviation, represented one (or possibly more) primitive random variable z. straight
forward representation, one primitive random variable zk associated
uncertain variable. recent work Chen, Sim, Sun, Zhang (2008), primitive
random variable zk represented 2 segregated random variables zk+ (read z-plus) zk
(z-minus):
z = z + z

(6)

z = max {z, 0}

(7)

+



z = max {z, 0} .

(8)

following Table 1, give examples respective values mean p ,
variance p 2 , 2 segregated variables z + z .
z
U (a, a)
N (0, )

V ar(z)

p 2 , 2

p ,m

a2

5a2
48
(1) 2
2


4

2

3
2

Table 1: Values mean variance segregated variables Uniform
Normal Distribution
underlying assumption use segregated random variables mean
variance individual segregated variables provided random variables
employed. aware mean variance values segregated variables
distributions normal uniform.
2.5 Decision Rules Optimization Data Uncertainty
optimization problems data uncertainty, decision rule specifies dependence
adjustable variables uncertainty parameters non-adjustable variables. Let z
52

fiRobust Local Search Solving RCPSP/max Durational Uncertainty

x denote set primitive random variables non-adjustable variables respectively.
example linear decision rule framework proposed Ben-Tal Nemirovski
(2002), setting value adjustable decision variable S(x, z) assumed
affinely dependent subset N number primitive random variables:
S(x, z) = c0 +

N
X

ck (x)zk

(9)

k=1

ck (x) (1 k N ) coefficient derived x.
Another example segregated linear decision rule framework proposed Chen
et al. (2008), adjustable decision variable
assumed tobe affinely dependent
+

+
set N segregated random variables z1 , z1 , . . . , zN
, zN . Hence, segregated
linear decision rule following general form:
S(x, z) = c0 +



PN

k=1


+

c+
z
+
c
z
k k
k k .

(10)

show below, segregated linear decision rule allows us easily obtain upper
bound subset random variables (see Eqn 14), possible linear
decision rule framework proposed Ben-Tal Nemirovski (2002).
Given mean variance segregated variable E(zk+ ) = E(zk ) = k ,
2
2
, express expected value variance
V ar(zk ) = mk
V ar(zk+ ) = pk
adjustable variable as:
E[S(x, z)] = c0 +

N
X



c+
k k + ck k



(11)

k=1

N n

X
+ 2
2

V ar[S(x, z)] =
ck pk + ck mk 2c+
.
c

k
k k

(12)

k=1

3. Decision Rules RCPSP/max Durational Uncertainty
RCPSP/max durational uncertainty, decision rule specifies dependence
activity start times durational uncertainty associated activities. make
comparison Equation 9, x represents POS generated; tasks start
time associated adjustable variable S(x, z), c0 represents earliest start
time task POS, ck (x) encodes task k related task
POS.
scheduling context, start time activity dependent start times
preceding activities, i.e. Adjustable variables S(x, z) dependent one another.
activity either start end activity (i.e. series) end
multiple activities occurring simultaneously (i.e. parallel). Thus, adjustable variables
functions adjustable variables addition operator (to model serial
activities) and/or maximum operator (to model parallel activities).
53

fiFu, Lau, Varakantham, & Xiao

Given number adjustable variables, may express sum adjustable
variable form segregated linear decision rule follows:
PM
=

i=1 Si (x, z)
PM 0 PN nPM + +
i=1 ci +
k=1
i=1 ci,k zk

+

PM


i=1 ci,k zk


.

(13)

Similarly, given set C adjustable variables, may express upper bound
maximum variables adjustable variable form segregated
linear decision rule:
maxiC {Si (x, z)}
n
P
n

P
N


+
+
maxiC {c0i } + N
max
{c
}z
+
max
{c
}z
.
iC
iC
k=1
k=1
i,k k
i,k k

(14)

specifically, output solving RCPSP/max involves POS represented
graph activities vertices precedence constraints activities
edges. Given POS graph, x = (V, E), V set activities E set
temporal dependencies (an edge (u, v) represents temporal dependency states
activity v occur activity u). activity v V , decision rule
computing start time defined recursively follows:
Sv (x, z) = max {d0u + zu + Su (x, z)}.
(u,v)E

(15)

Equation 15 recursive expression defined combination sum maximum set random variables. noted combinations sum maximum random variables cannot computed exactly hence present two operational
decision rule approximations evaluate recursive expression Equation 15: (a) Segregated Linear Approximation(SLA); (b) General Non-Linear Approximation(GNLA).
noted Sv computable long mean variance Su computable
demonstrated approximations.
3.1 Segregated Linear Approximation (SLA)
decision rule, duration activity defined based segregated random
variables introduced Section 2.4. uncertain duration mean processing
time d0 , represent sum three components: mean d0 , lateness z + (i.e.
0}),
max{d d0 , 0}), earliness z (i.e. max{d0 d,
= d0 + z + z .

(16)

normally distributed duration, i.e., z N {0, }, respective values mean
variance segregated variables summarized as:

E[z + ] = E[z ] =
2
( 1) 2
V ar[z + ] = V ar[z ] =
.
2
54

(17)
(18)

fiRobust Local Search Solving RCPSP/max Durational Uncertainty

describe computation Sv (x, z) representing durational uncertainty
activities using segregated random variables. Upper bounds sum maximum
random variables derived linear functions segregated variables illustrated
below:
Sum random variables : case project network involving k activities,
two either precedence constraints competing
resource units, solution form POS requires computation sum
activity durations. start time activity starting k-activity project
expressed as:
P
Sk (x, (z+ , z )) = ki=1 (d0i + zi+ zi ).
(19)
P
Thus, adjustable variable Sk mean ki=1 d0i uncertainty captured
Pk
+
random variable, positive segregated component
i=1 zi
Pk

negative segregated component
i=1 zi . Mean variance segregated
variables known hence mean variance Sk easy compute.
Max random variables: Consider activities executed concurrently,
upper bound start time activity starting parallel k-activity
project network SLA represented linear function positive segregated
components duration perturbations:
P
(20)
Sk (x, (z+ , z )) maxi=1,...k {d0i } + ki=1 zi+ .
Thus, adjustable variable Sk upper bound mean maxi=1,...k {d0i }
uncertainty
P captured random variable positive segregated component given ki=1 zi+ negative segregated component. Mean variance
segregated variables known hence mean variance Sk easy
compute.
Since, cases (sum max) Sk expressed linearly subset random segregated variables, recursive computation straightforward. Compared linear
decision rules (Ben-Tal & Nemirovski, 2002), superiority SLA (Chen et al., 2008) lies
ability linearly express upper bound subset random variables dissecting uncertainty positive negative components. approximation
increases tractability scalability, comes expense losing accuracy.
3.2 General Non Linear Approximation (GNLA)
SLA efficient, typically provide loose upper bounds robust makespan
due linear approximation computing max random variables. section,
describe General Non Linear Approximation (GNLA), restricted
affine dependencies. clarity comparison purposes, use G denote start
time instead used SLA.
Given mean variance values duration uncertainty, describe approximation involved computing mean variance sum max activities
55

fiFu, Lau, Varakantham, & Xiao

used Equation 15. recalled irrespective distribution
always represent = d0 + z, d0 mean
uncertain duration d,
z perturbation part. Thus, E(z) = 0.
3.2.1 Sum Random Variables
compute sum stochastic durations serial k activity project network follows:
Gk (x, z) =

k
X

(d0i + zi ).

(21)

i=1

case, similar representation SLA. Mean variance Gk computed
follows:
Since {zi }i=1,...k random variables zero mean, calculate expected
value as:
k
k
X
X
0
E[ (di + zi )] =
d0i .
i=1

(22)

i=1

{zi } assumed independent other, variance value computed
following expression:
k
k
X
X
0
V ar[ (di + zi )] =
V ar[zi ],
i=1

(23)

i=1

normal distribution zi N (0, ),
k
k
X
X
V ar[ (d0i + zi )] =
i2 .
i=1

(24)

i=1

Note expressions expected value variance case serial activities
identical ones used Wu, Brown, Beck (2009).
3.2.2 Max Random Variables
ease explanation, begin considering two activities executed parallel
extend analysis multiple parallel activities. GNLA, (unlike SLA)
max random variables approximated expected value variance
max approximately calculated.
Expected Value Variance Max Two Variables
decision rule represent starting time activity, begin
completion two parallel activities defined as:
G2 (z) max{d01 , d02 } + max{z1 , z2 }.
Note tighten bound Eqn 20 replacing z1+ + z2+ max{z1 , z2 }.
56

(25)

fiRobust Local Search Solving RCPSP/max Durational Uncertainty

derive expressions expected value variance adjustable variable,
i.e., RHS term Eqn 25. Firstly, focus expected value:
E[max{d01 , d02 } + max{z1 , z2 }] = max{d01 , d02 } + E[max{z1 , z2 }].

(26)

general case, difficult derive exact expression E[max{z1 , z2 }] hence,
provide upper bound.
following Propositions 1 2, compute expected value variance
general case E(z) 0 (note assume E(z) = 0 primitive random variables). calculate general case required computation
expected value variance two random variables (next subsection).
Proposition 1. expected value maximum two general distributions, z1
z2 nonnegativepmeans less
1
1
V ar[z1 ] + V ar[z2 ] + (E[z1 ])2 + (E[z2 ])2 .
2 (E[z1 ] + E[z2 ]) + 2
Proof. begin considering following two equalities:
max{z1 , z2 } + min{z1 , z2 } = z1 + z2
max{z1 , z2 } min{z1 , z2 } = |z1 z2 |.
sum two equalities.
1
max{z1 , z2 } = (z1 + z2 + |z1 z2 |).
2

(27)

Thus, compute expected value maximum using following equation:
1
E[max{z1 , z2 }] = (E[z1 ] + E[z2 ] + E|z1 z2 |).
2

(28)

addition, using definition variance, obtain:
V ar|z1 z2 | = E(z1 z2 )2 (E|z1 z2 |)2 0.
Therefore,
p
E|z1 z2 | p E(z1 z2 )2
= pE(z12 ) + E(z22 ) 2E(z1 )E(z2 )
pE(z12 ) + E(z22 )
= V ar[z1 ] + V ar[z2 ] + E(z1 )2 + E(z2 )2 .
Substituting final expression Eqn 29 Eqn 28 yields bound
p
E[max{z1 , z2 }] 12 (E[z1 ] + E[z2 ]) + 12 V ar[z1 ] + V ar[z2 ] + (E[z1 ])2 + (E[z2 ])2 .

(29)

(30)

Hence proof.
Note paper, assume E(z) = 0, thus, tighter bound obtained
Eqn 30:
p
(31)
E[max{z1 , z2 }] 21 V ar[z1 ] + V ar[z2 ].
57

fiFu, Lau, Varakantham, & Xiao

special case {zi } (i = 1, ...k) normally identically distributed,
i.e. zi N (0, ), know work Clark (1961) closed form
representation expected value maximum k = 2:

E[max{z1 , z2 }] = .

focus deriving expressions variance maximum two general
distributions, i.e., V ar[max(z1 , z2 )].
Proposition 2. variance maximum two general distributions, z1 z2
nonnegative means less V ar(z1 ) + V ar(z2 ) + 21 (E(z1 ))2 + 12 (E(z2 ))2 .
Proof. Eqn 27,
V ar[max(z1 , z2 )] = 41 V ar[z1 + z2 + |z1 z2 |]
= 14 (V ar[z1 + z2 ] + V ar|z1 z2 | + 2COV
p (z1 + z2 , |z1 z2 |))
1
4 (V ar[z1 + z2 ] + V ar|z1 z2 | + 2 V ar[z1 + z2 ]V ar|z1 z2 |)
12 (V ar[z1 + z2 ] + V ar|z1 z2 |).

(32)

Firstly, consider following two equations.
V ar|z1 z2 | = E(z1 z2 )2 (E|z1 z2 |)2
2

(33)

2

V ar(z1 z2 ) = E(z1 z2 ) (E(z1 z2 ))
Subtracting second first yields

V ar|z1 z2 | = V ar(z1 z2 ) + (E(z1 z2 ))2 (E|z1 z2 |)2 .
Now, substitute expression last term Eqn 32 obtain:
V ar[max(z1 , z2 )] V ar(z1 ) + V ar(z2 ) + 12 (E(z1 ) E(z2 ))2 21 (E|z1 z2 |)2 .

(34)

specific distribution duration perturbation known, obtain
bound V ar[max(z1 , z2 )] as:
V ar[max(z1 , z2 )] V ar(z1 ) + V ar(z2 ) + 12 (E(z1 ))2 + 12 (E(z2 ))2 .

(35)

Hence proof.
Note paper, assume E(z) = 0, thus, tighter bound obtained
Eqn 35:
V ar[max(z1 , z2 )] V ar(z1 ) + V ar(z2 ).
(36)
interesting consider special case random variables normally
distributed. first state following lemma1 .
1. found statistics texts, found online http://en.wikipedia.org/wiki/Halfnormal distribution.

58

fiRobust Local Search Solving RCPSP/max Durational Uncertainty

Lemma 3.1. X normally distributed X N (0, ), = |X| half-normally
distributed,
r
2
E(Y ) =
.
(37)

normal distribution zi N (0, ), since z1 z2 normally distributed,
z1 z2 N (0, 1 + 2 ), conclude Lemma 3.1 |z1 z2 | follows half-normal
distribution
r
2
E|z1 z2 | = (1 + 2 )
.
(38)

Thus, substitute expression Eqn 34, express upper bound
variance value maximum duration perturbation two activities, zi N (0, )
:
V ar[max(z1 , z2 )] (1

2
1
)( 2 + 22 ) 1 2 .
1


(39)

Expected Value Variance Max Multiple Variables
Extending two k (k > 2) parallel activities, completion time upper
bounded by:
Gk (z) max {d0i } + max {zi }.
(40)
i=1,...k
i=1,...k
following, first compute variance value RHS term
use similar procedure compute expected value. basic expression variance
RHS is:
V ar[ max {d0i } + max {zi }] = V ar[ max {zi }].
(41)
i=1,...k

i=1,...k

i=1,...k

obtain value V ar[ max {zi }] general probability distributions, take
i=1,...k

advantage analysis provided two-parallel-activity case above. following
steps outline overall idea:
(a) Firstly, group activity set {a1 , ..., ak } couple set {C1 , ..., Cd k e },
2

element Cj (j = 1, ...d k2 e) contains two different activities Cj = {aj1 , aj2 } chosen
activity set. Note k odd, final element couple set contains
one activity.
(b) couple Cj , apply maximum operator duration perturbations involving activities. Denote cj = max{zj1 , zj2 }, zj1 zj2 duration perturbations
two activities involved Cj , V ar(cj ) calculated based expression
two-parallel-activity case.
(c) max {zi } = max {cj }. (Note one activity contained
i=1,...k

j=1,...d k2 e

Cd k e k odd). Then, build another couple set {C1 , ..., Cd k e },
2
2
method steps (1) (2) used compute V ar[ max {cj }] based
j=1,...d k2 e

Eqn 35 and/or Eqn 36 and/or Eqn 39.
59

fiFu, Lau, Varakantham, & Xiao

numerous ways (exponential k) generating couple set {C1 , ..., Cd k e }
2
k activities parallel. couple sets lead different levels tightness
derived robust makespan. compute grouping provides best robust fitness
random variables generic distributions open problem. Instead, focus
heuristic computes best grouping normal distribution zi N (0, ).
obtained solving following optimization problem:
X
max
j1 j2

(42)
k
j=1,...b 2 c

denotes grouping technique decision variable; {Cj } couple
set constructed activity set grouping method t; j1 j2 standard
deviations data perturbation durations activities contained Cj . intuition
employing optimization problem obtained Equation 39. noted
computing tighter bound variance implies considering highest possible value
product primitive variances. Hence, reason employing optimization
problem Equation 42.
Proposition 3. solution optimization problem Eqn 42 obtained
ordering k activities non-increasing order variance values grouping
two nearest activities according order, i.e. Cj = {aj1 , aj2 }, j = 1, ...b k2 c
standard deviations following order:
11 12 21 22 , ...b k c1 b k c2 .
2

2

(43)

Proof. Suppose another grouping method t0 , elements couple
set except two couples 2 ordering different, i.e., Cm =
{am1 , an2 } Cn = {am2 , an1 } (m 6= n), Cm = {am1 , am2 } Cn = {an1 , an2 }
. Without loss generality, assume > n Eqn 43,
m1 m2 n1 n2 .

(44)

Since t0 supposed provide solution less ( defined Eqn 42) ,
i.e.
11 12 + ... + m1 n2 + ... + n1 m2 + ... + b k c1 b k c2
2
2

11 12 + ... + m1 m2 + ... + n1 n2 + ... + b k c1 b k c2 .
2
2
Therefore,
m1 n2 + n1 m2 m1 m2 + n1 n2 ,
equivalent to: (m1 n1 )(n2 m2 ) 0.
contradicts Eqn 44 (except case standard deviations equal,
case mixing order affect anything). Thus, exists t0
different least two couples better objective value. general case
2. noted ordering change one couple, method still produces
solution within couple variance computation consider order.

60

fiRobust Local Search Solving RCPSP/max Durational Uncertainty

t0 multiple (more two) couples different easily derived
case (and omitted due space constraints).
Hence proof.
analyzing expected value E[ max {zi }], apply procedure emi=1,...k

ployed calculate variance, i.e., based group solution returned
optimization problem, first calculate expected value couple then, get
final bound following Eqn 30 and/or Eqn 31 and/or Eqn 32.
present, unable show effectivness grouping heuristic (Equation 42) analytically general case. However, show intuition behind
grouping heuristic providing analytical comparison3 example
four activities (normally distributed durations) executed parallel, i.e. zi N (0, ),
assume 1 2 3 4 (no loss generality).
representation makespan grouping heuristic (denoted Mheu )
random grouping (denoted Mran ) are, respectively:
Mheu = max{d01 , d02 , d03 , d04 } + max{max{z1 , z2 }, max{z3 , z4 }}
Mran = max{d01 , d02 , d03 , d04 } + max{max{z1 , z4 }, max{z2 , z3 }}.
Let us first examine mean variance values Mheu . Eqn 31,
p
E(max{z1 , z2 }) 12 p12 + 22
E(max{z3 , z4 }) 12 32 + 42 .

(45)

(46)

Eqn 39,
V ar[max(z1 , z2 )] (1 1 )(12 + 22 ) 2 1 2
V ar[max(z3 , z4 )] (1 1 )(32 + 42 ) 2 3 4 .

(47)

Eqn 30, Eqn 35, Eqn 46 Eqn 47, obtain bounds mean variance
values Mheu 4 :
q
p
p
P
1
1
2
2
2
2
E(Mheu ) const + 4 ( 1 + 2 + 3 + 4 ) + 2 ( 45 1 ) 4i=1 i2 2 (1 2 + 3 4 )
(48)
P
V ar(Mheu ) ( 98 1 ) 4i=1 i2 2 (1 2 + 3 4 ).
Similarly, mean variance values Mran calculated,
q
p
p
P
E(Mran ) const + 14 ( 12 + 42 + 22 + 32 ) + 12 ( 54 1 ) 4i=1 i2 2 (1 4 + 2 3 )
(49)
P
V ar(Mran ) ( 89 1 ) 4i=1 i2 2 (1 4 + 2 3 ).
Eqn 57, bounds fitness Mheu (denoted F itheu ) Mran (denoted
F itran ) respectively represented function RHS Eqn 48 Eqn 49.
examine difference value two bounds, F itheu F itran . Let us first
compare first term RHS mean values Eqn 48 Eqn 49, since
p
p
p
p
2
2
2
( p
32 + 42 )2 ( 12 + p
22 + 32 )2
1 + 2 +
4 +
(50)
2
2
2
2
2
2
2
2
2
2
= 2 1 3 + 2 4 + 1 4 + 2 3 2 1 3 + 22 42 + 12 22 + 32 42
3. calculation use robust fitness function provided Definition 57 introduced Section 4.
4. Note const Eqn 48 Eqn 49 max{d01 , d02 , d03 , d04 }.

61

fiFu, Lau, Varakantham, & Xiao

Proposition 3,
1 4 + 2 3 1 2 + 3 4 ,

(51)

12 42 + 22 32 (12 22 + 32 42 ) = (1 4 + 2 3 )2 (1 2 + 3 4 )2 0.

(52)

thus,

Eqn 51, Eqn 52, Eqn 48 Eqn 49, bounds mean variance
values Mheu lower Mran . Given robust fitness function Eqn 57,
conclude
F itheu F itran 0

(53)

independent . words, grouping heuristic provide tighter
fitness bound random grouping.

4. Robust Fitness Function
makespan (start time dummy sink activity) RCPSP/max durational uncertainty function non-adjustable variables x random variables representing durational uncertainty z represented using S(x, z) SLA G(x, z)
GNLA. Recall robust optimization problem find minimum value F
following probability bound observed5 :
P (S(x, z) F ) (1 )

(54)

one-sided Chebyshevs Inequality, obtain bound robust objective value F function expected value variance adjustable fitness
function, i.e.:
q
q
(55)
V ar[S(x, z)] F P (S(x, z) F ) (1 )
E[S(x, z)] + 1

Hence, reformulate robust optimization problem follows:
min F
s.t.

E[S(x, z)] +

q

q
1


V ar[S(x, z)] F

(56)

model, derive robust fitness function used
local search framework:
Definition 3. Given 0 < 1 adjustable fitness function S(x, z) defined above,
robust fitness function, f (x, z, ), defined
r
q
1
f (x, z, ) = E[S(x, z)] +
V ar[S(x, z)]
(57)

goal local search mechanism find local minima f . addition, local
search typically requires fitness function computed many times hence
imperative computation fitness function efficient.
5. show computation SLA robust fitness function. substituting G, obtain
fitness function GNLA.

62

fiRobust Local Search Solving RCPSP/max Durational Uncertainty

4.1 Schedule Infeasibility Given POS
noted fitness function, f assumes schedule generated
POS, x always executable. However, due durational uncertainty maximum
time lags, schedule always executable. direct way measure IP r(POS)
probability infeasibility POS (i.e. probability POS lead infeasible schedule) lies computation probability infeasibility activity ai
IP r(ai ), exist feasible start time temporal constraints
respect ai satisfied. IP r(POS) calculated probability
least one activity infeasible. However, due temporal dependencies activities
providing theoretical expression overall probability infeasibility open problem. Therefore, propose simulation approach, simulate POS execution
multiple trials compute probability eciently approximately. illustration,
experimented benchmark J10 instances PSPLib (Kolisch, Schwindt,
& Sprecher, 1998) RCPSP/max additional durational uncertainty follows
normal distribution mean 0 variance 1. generated 1000 sample realizations
POS obtained SLA, check infeasibility respect original temporal
(including maximum time lag) constraints. Examples probability infeasibility
obtained simulation PSP1, PSP4, PSP13 0.18, 0.17 0.001. However,
problems PSP3, PSP5 etc. probability infeasibility 0,
maximal time lags much larger variance durational uncertainty.

5. Robust Local Search Algorithm
section present decision rule approximations introduced SLA, GNLA
integrated robust fitness function local search mechanisms provide
solution problems represented RCPSP/max durational uncertainty.
proposed algorithm outlined follows. Steps 1, 2, 5 6 standard steps local
search algorithm. Steps 3 4 represent departure standard local search deal
uncertainty.
1. Generate initial solution
usually obtained using simple greedy heuristic.
2. Generate neighborhood solutions
Generate pool neighbor solutions current solution.
3. Employ one decision rule approximations (SLA GNLA)
adjustable variables check feasibility
candidate solution x solution pool, derive coefficients Ck (x)
adjustable variable. Subsequently, solution check constraint violation
reject feasible.
4. Evaluate robust fitness function f
feasible solution x, evaluate f obtain robust objective values.
solution lowest robust objective value current best robust solution.
63

fiFu, Lau, Varakantham, & Xiao

5. Apply penalty (optional)
advanced local search strategies may require penalty applied prevent
caught local minima. case tabu-search example,
tabu-list updated tabu move applied. case iterated local search,
perturbation move applied current local minima.
6. Termination criteria
termination criteria met, return solution lowest robust fitness
function value else repeat optimization cycle determining next move.
Algorithm 1 provides robust local search algorithm guided decision rule using
, , G , G , G , obtain local search algoSLA. substituting Snow

min
min
rithm using GNLA. Given RCPSP/max durational uncertainty level risk
(0 < 1), algorithm returns POS (locally) minimal robust makespan,
(or G GNLA). essence, perform robust local search neighborhood set
activity lists. activity list (al) defined precedence-constraint feasible sequence
used heuristics generate earliest start time schedules solving standard
RCPSP problem (Kolisch & Hartmann, 2005).
Different activity lists explored local moves. context, consider
activity list sequence activities satisfy non-negative minimal time lag
constraint. Due existence maximal time lag constraint RCPSP/max, scheduling
activities earliest possible start time based order position activity list
may restrict schedule much may even return feasible schedule. Thus,
schedule activity sequentially based order position activity list,
assign starting time randomly picking time domain feasible start
times.
According experiments, new randomized approach returns feasible
solutions earliest start time one. finding feasible schedule, POS
generated applying chaining procedure proposed Policella et al. (2004). Then,
(or G GNLA) value computed according POS. Intuitively, using
randomized approach may return schedule large baseline scheduled completion
time. However, apply shortest path algorithm resulting POS generate
earliest start time schedule smaller makespan.
mentioned above, may difficult find feasible schedule satisfies minimal
maximal time lag constraints using activity list. fact, believe set
activity lists, many may yield feasible schedule. overcome problem
follows. define set activity lists result feasible (or infeasible) schedules
F (or I). seek design local search algorithm following characteristics:
a) Starting activity list I, local search move activity list F
within short time. b) Starting activity list F , local search move
activity list minimal (or G GNLA)value. c) diversify
exploration activity lists F allowing local search move activity list
F activity list I, since activity lists F region may reachable
one another simple local moves. flavor strategic oscillation proposed
meta-heuristics research.
64

fiRobust Local Search Solving RCPSP/max Durational Uncertainty

Algorithm 1 Robust Local Search
1: Generate activity list al randomly
2: Find start time schedule, ss randomly according al
3: al F
4:
P OS chaining(ss)

Compute Snow
according P OS
5:


6:
Update Smin Snow
7: else
8:
Record first activity cannot scheduled
9: end
10: 1 Max Iteration
al
11:
12:
Shift activity ahead al randomly al
else
13:
14:
Select two activities b c al randomly
15:
Swap b c al al
16:
end
17:
Find randomized start time schedule ss0 according al
18:
al0 F
P OS 0 chaining(ss0 )
19:
20:
Compute according P OS 0

21:
al Snow



22:
Snow
23:
al al0

24:
Smin



Smin
25:
26:
end
27:
end
28:
else al
29:
al al0
30:
else
31:
p rand(0, 1)
p < 0.01
32:
33:
al al0
34:
Record first activity cannot scheduled
35:
end
36:
end
37: end

65

fiFu, Lau, Varakantham, & Xiao

detailed robust local search procedure given Algorithm 1. procedure starts
randomly generating activity list al, sequence activities satisfy
non-negative minimum time lag constraint (Line 1). Line 2, schedule ss produced
based ordering activities activity list al. first perform domain reduction
distance graph using Floyd-Warshall algorithm, feasible range
start time activity based temporal constraints obtained.
schedule activity sequentially based order position activity list.
activity, first pick start time randomly feasible domain evaluate resource
constraints duration activity (i.e. check current resource capacity exceeds
resource amount used activity). yes, set start time activity,
run shortest path algorithm reduce domains remaining activities, update
current resource capacity due consumption activity. resource constraints
satisfied, try set start time randomly prescribed maximum
numbers retries. start time current activity set, proceed iteratively
next activity according activity list. Line 4, chaining() employed
generate POS baseline schedule (section 2.2.4). ax Iteration refers
maximum number iterations robust local search. apply two different types
local moves. converge quickly activity list F, first local move designed
schedule activity causing temporal resource conflict earlier time.
randomly shift ahead first activity cannot scheduled current
activity list (Line 12). activity list F, second local move randomly
pick two activities swap current activity list, satisfying nonnegative minimal time lag constraints (Line 14-15). move accepted, results
smaller equal value (Line 18-29). explore different activity lists, include
small probability accept move leads infeasible schedule (Line 31-35).
probability move activity list F one set 0.01. minimal
.
value saved Smin

worst-case computational complexity analysis given follows. iteration
local search, three major components: randomized schedule generation, POS
construction fitness calculation. process randomized schedule generation,
perform domain reduction resource checking iteration, thus complexity
O(N (N 3 + H K w)) N number activities, H maximum planning
horizon, K number types resources, w prescribed maximum number
retries activity setting randomized start time. POS construction
process works follows: set activities first sorted according start times
generated deterministic schedule sorting part costs O(N logN );
proceeds allocate activity total units needed type resource. Let
maxcap maximum capacity among resources. cost computing POS
O(N logN + N K maxcap ). determining fitness value generated
POS, examine edge edge check connected parallel serial
respect predecessors costs O(N + e) e number edges POS
(e < N 2 ). Thus, worst-case complexity proposed robust local search algorithm
O(T N (N 3 + H K w + K maxcap )) number iterations local search.
66

fiRobust Local Search Solving RCPSP/max Durational Uncertainty

6. Enhancing Robust Local Search
section, describe two enhancements improve basic local search method
described Section 5. Firstly, describe ordering generation, pre-processing
step used identify precedence ordering activities. precedence ordering
used focus local search activity lists. Secondly, describe new chaining
method generate POS feasible schedule.
6.1 Ordering Generation
Ordering Generation pre-processing step identifies precedence relationships
pairs activities. key idea certain pairs activities, always better
(with respect robust makespan) ordering among activities. goal
identify pairs activities employ ordering focus local search
activity lists chaining method used compute POS feasible schedule.
deciding ordering pair activities, b, two key steps:
(i) Sample set generation: Generate two sets activity lists. first set consists
activity lists occurs b. second set generated swapping activities
b every activity list first set; (ii) Order determination: step, first
compute POS robust makespan activity lists two sets. comparing
robust makespan values corresponding activity lists two sets, determine
ordering activities. explain steps following subsections.
problem n activities, Cn2 pairs activities. decide
orders pairs, ordering computation needs implemented Cn2 times,
computationally expensive. Based observation, first propose PairsSelection heuristic selectively choose certain number activities pairs whose ordering
significant impact robust makespan.
Pairs-Selection heuristic picks activity pair: (a) precedence related
original problem definition; (b) exists least one type resource,
total demand activities exceeds resource capacity. intuition behind
picking activity pair two activities cannot executed parallel
deciding ordering relationship imperative eliminate resource conflict. One main
advantage heuristic number pairs activities need ordered
significantly reduced. Now, describe two steps ordering generation below:
6.1.1 Sample Set Generation
first randomly generate activity lists initial sample set denoted .
element activity list represented ali sequence activities,
= 1, ...m, i.e.
= {ali |ali = (a1 , a2 , ...an ), {1, ...m}}.
pair activities (ak , al ) resulting Pairs-Selection heuristic, define
two sample sets represented ak al al ak . ak al activity lists
, except activity list al ak , activities swapped.
ak al = {aliak al |i {1, ...m}},
67

fiFu, Lau, Varakantham, & Xiao

(
(a1 , a2 , ..., ak , ...al , ...an ) ali = (a1 , a2 , ..., al , ...ak , ...an )
.
aliak al =
ali
ali = (a1 , a2 , ..., ak , ...al , ...an )
Similarly, al ak constructed incrementally selecting activity list
initial set al ak reverse order ak al , i.e.
al ak = {alial ak |i {1, ...m}},
(
(a1 , a2 , ..., al , ...ak , ...an ) ali = (a1 , a2 , ..., ak , ...al , ...an )
alial ak =
.
ali
ali = (a1 , a2 , ..., al , ...ak , ...an )
Thus, activity list sample set ak al share positions activities
except ak al corresponding activity list set al ak , al precedes ak .
6.1.2 Order Determination
determine activity order selected pair activities based sample
sets obtained last phase. pair (ak , al ), construct new instance posting
precedence constraint ak al al ak original instance, based new
instance, determine fitness denoted fiak al fial ak aliak al
alial ak , respectively.
Note aliak al alial ak share elements positions except
order ak al . Thus, order ak al considered reason
fitness aliak al alial ak differs. decide order ak al , define index
variable denoted ivak al measures percentage samples one
order ak proceeds al wins, i.e.
P

ivak al =



min(

al
ak
f k
f l


ak al
ak ,0)
|f
f l
|





.

define Index Parameter activities ak al denoted IPak al
benchmark index variable ivak al determining order ak al . parameter IPak al prescribed users different values (usually larger 50%)
represent different levels confidence order ak al matters causing fitness
variance, thus represents different controllability ivak al .
value index variable ivak al larger value IPak al , set order
ak al since indicates higher probability b provide better robustness
b a; ivak al less 1 IPak al , set al ak ; cases, order
ak al settled.
6.2 Improved Chaining based Robustness Feedback
noted Preliminaries section, activity a, may exist multiple
choices resource chains assigned. addition, different chaining heuristics lead POSes different robust makespan values. section,
propose new chaining heuristic dispatches activities resource chains predicting
improvement robust makespan generated POS.
68

fiRobust Local Search Solving RCPSP/max Durational Uncertainty

Algorithm 2 Robustness-Feedback Resource Chaining (Activity a, Schedule S, Order G)
1: C Find set available chains, C activity based
2: P Collect chains C last activity chain preceding problem
3: Collect chains C last activity chain ordered G
4: P 6=
5:
k Get first available chain P
6: else 6=
7:
k Get first available chain
8: else
9:
k Get first available chain C
10: end
11: Post constraint last activity chain k (denoted last(k)) activity
12: requires one resource unit
13:
C1 chains C last activity last(k)
14:
C2 C \ C1
15:
resource units required
16:
choose first available chain belonging C1
17:
chain feasible
18:
choose first available chain belonging C2
19:
end
20:
end
21: end
latest chaining method aims increase flexibility described Section 2.2.4, chains first randomly picked superior subset (i.e., chains
last activity already ordered, chains sharing last element). Since objective makespan-related time becomes concern, build work Policella
et al. (2009) pick first available chain wherever available. updated chaining
method called Robustness-Feedback based Resource Chaining.
Example 5. Figure 5 provides POS provided chaining heuristic used
Example 1. seen, compared POS 4, key difference allocation
activity 5 6. new heuristic, seen parallelism
hence reduced robust makespan high probability.
employing Ordering Generation algorithm conjunction chaining
heuristic, consider information ordered pairs allocating resource
units activity. motivation activity activity b (for example,
b) ordered, high probability precedence relationship result
better solution. Algorithm 2 provides pseudo code Robustness-Feedback
Resource Chaining heuristic Ordering.

7. Experimental Evaluation
section, first evaluate scalability quality execution strategies
provided robust local search various enhancements introduced paper.
69

fiFu, Lau, Varakantham, & Xiao

1

Figure 5: POS Robustness Feedback Chaining
Secondly, establish benchmark performance, compare best known
technique solving JSP problems durational uncertainty. noted
robust local search method developed solve RCPSP/max problems durational
uncertainty hence exploit structure present JSP problems. Furthermore,
described earlier, optimization metrics approaches different.
7.1 Experimental Setup
two sets problems consider described subsections
below. Additionally, indicate algorithms compared data
sets section.
7.1.1 RCPSP/max Durational Uncertainty
problems considered RCPSP/max durational uncertainty obtained
extending three benchmark sets available RCPSP/max problems, J10, J20
J30 specified PSPLib (Kolisch et al., 1998). set contains 270 problem
instances duration activity ranging 1 10. maximum number
activities J10, J20 J30 10, 20 30, respectively. activity ai , set
expected value d0i stochastic duration corresponding deterministic duration
given benchmarks, assume duration uncertainty normally distributed,
i.e. zi N (0, ). Henceforth, refer J10, J20 J30 RCPSP/max problems
durational uncertainty. run algorithms problems four different duration
variabilities = {0.1, 0.5, 1, 2} four increasing levels risk = {0.01, 0.05, 0.1, 0.2}.
70

fiRobust Local Search Solving RCPSP/max Durational Uncertainty

RCPSP/max problems durational uncertainty, compare robust local
search guided using two decision rule approximations SLA GNLA. Furthermore, compare different enhancements robust local search RCPSP/max
problems durational uncertainty. compare five different variants robust local
search decision rule approximation: (a) (GNLA) refers basic robust local search
guided GNLA decision rule approximation; (b) (GNLA+RC) robust local search
new Robustness-feedback Chaining heuristic guided GNLA; (c) (GNLA+) refers
basic robust local search additional local search iterations, number
local search iterations determined based problem set (as described later); (d)
(GNLA+OG) Order Generation heuristic top GNLA guided robust local search;
finally (e) (GNLA+OG+RC) Order Generation Robustness-feedback
Chaining heuristics GNLA guided robust local search.
number local search iterations robust local search set 1000. reduce
stochasticity effects robust local search, average 10 random executions
problem instance. code implemented C++ executed Core(TM)2
Duo CPU 2.33GHz processor FedoraCore 11 (Kernel Linux 2.6.29.4-167.fc11.i586).
7.1.2 JSP Durational Uncertainty
JSPs, (GNLA) compared probabilistic makespan results provided
Beck Wilson (2007). benchmark problems, consider instances generated
using existing generator work Watson, Barbulescu, Whitley, Howe (2002)
durations drawn uniformly interval [1,99]. Specifically, focus three
sets probabilistic JSPs size {44,66,1010} (where 44 problems consists 4
jobs consisting 4 activities each) set, three uncertainty levels {0.1,0.5,1}
considered.
7.2 Comparison SLA GNLA
first compare average robust makespan 270 problem instances obtained robust
local search guided decision rule approximations proposed Section 3.1
Section 3.2. refer robust makespan computed using SLA using GNLA
G . Figure 6 provides results three sets RCPSP/max problems
durational uncertainty. results, show robust makespan affected
level risk standard deviation duration uncertainty. X-axis represents
different combinations risk standard deviation durational uncertainty, shown
table Figure 6. runs every instance takes couple seconds hence
report CPU times here. key observations conclusions interest Figure 6
follows:
Irrespective , level risk increases, robust makespan decreases
SLA GNLA. Clearly, lower risk planner willing take,
higher robust value generated execution strategy. method
capable quantifying trade off, help planner decide
desired strategies.
71

fiFu, Lau, Varakantham, & Xiao

105

95

G*

S*

85

75

65

55

45
1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

(a) Results J10
146
136

G*

S*

126
116
106
96
86
76
1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

(b) Results J20
170
160

G*

S*

150
140
130
120
110
100
1

2

3

4

5

6

7

8

9

10

11

12

13

14

(c) Results J30

Figure 6: Comparison Robustness SLA GNLA.
72

15

16

fiRobust Local Search Solving RCPSP/max Durational Uncertainty

Irrespective , degree duration variability increases, robust makespan
increases SLA GNLA, value becomes sensitive
level risk constrained small value (e.g. = 0.01).
lower values , specifically 0.01, provides lower values robust
makespan G . hand, higher values {0.05, 0.1, 0.2}, G
provides superior performance . yet understand reason drop
performance = 0.01, observed consistently across RCPSP/max
benchmark problems.
problem instance, observe monotonicity absolute
difference robust makespan G risk values. level risk takes
value around 0.02, (SLA) slightly lower value G (GNLA). However,
risk becomes 0.02, superiority GNLA increases higher values risk.
Figure 7 illustrates randomly picked J10 instance = 1 = 2.
pattern observed across problem instances J10, J20 J30.
105

65

95

60

85

55

75

50

65

S*

45

S*

55

G*

40

G*

45

35

35

30

25

25

0.005 0.01 0.02 0.03 0.04 0.05 0.1 0.15 0.2 0.25 0.3

0.005 0.01 0.02 0.03 0.04 0.05 0.1 0.15 0.2 0.25 0.3

(a) Results randomly selected J10 example (b) Results randomly selected J10 example
=1
=2

Figure 7: Comparison Robust Makespan.
Next, Figure 8, compare quality execution strategies obtained using
SLA GNLA. precisely, compare distributions actual makespans
schedules computed using decision rule approximations. purpose, generate
set 100 samples realizations durational uncertainty test 270 instances
benchmark set different levels risk = 0.2, = 0.1 = 0.05 obtain
respective POS, compute actual makespans schedules derived
respective POS given realization samples. difference real makespans
obtained POSs generated two different decision rule approximations observed
across board examples three sets values except 0.01. randomly
select three problem instances benchmark set present results Figure 8.
Figure 8 compares cumulative frequency distributions actual makespans.
observe GNLA provided far better realized makespans SLA - absolute
terms, well distributionally. J20, except 2 cases, rest actual makespan
73

fiFu, Lau, Varakantham, & Xiao

82

100%
80

80%
78
76

60%

74

40%

72

20%

70

0%

68

69

71

73

75

77

79

81

(a) Results randomly selected J10 example = 0.2

100%

60

80%
55
60%
50
40%
45

20%

40

0%
41

43

45

47

49

51

53

55

57

(b) Results randomly selected J20 example = 0.1
110
100%
105
80%
100

60%

95

40%
20%

90
0%
85

86 88 90 92 94 96 98 100 102 104 106 108

(c) Results randomly selected J30 example = 0.05

Figure 8: Comparison Actual Makespans Gap G .(Lines left pictures top indicating: Computed , Actual Simulation, Computed G , Actual G Simulation.)

74

fiRobust Local Search Solving RCPSP/max Durational Uncertainty

values obtained SLA higher ones obtained GNLA. Similar trends
observed J10 J30.
illustrate difference quality absolute two upper bounds, provide
four lines (computed , actual , computed G actual G ) indicating upper
bounds computed using algorithms simulation 100 samples.
7.3 Comparing Robust Local Search Enhancements
Since, already shown GNLA performs better SLA, show performance enhancements GNLA section. noted enhancements SLA provided similar results conclusions GNLA based enhancements
outperforming SLA based enhancements. Since Ordering Generation heuristic requires
additional rounds robust makespan computation, include benchmark called
(GNLA+) (which GNLA plus extra iterations local search) make fair comparison.
avoid complexity considering pairs activities, consider pairs
activities ordering would improve performance. proposed Pairs-Selection
heuristic select pairs activities. number extra iterations local search
(GNLA+) benchmark number activity pairs picked Pairs-Selection
heuristic times number samples used Ordering Generation process.
experimental results shows average number activity pairs 270 instances selected Pairs-Selection heuristic J10, J20 J30 5, 14, 28 respectively.
work, set = 100. Thus, extra iterations (GNLA+) benchmark
J10, J20 J30 500, 1400 2800, respectively. performance enhancements shown Figure 9(a), Figure 9(b), Figure 9(c) J10, J20 J30 respectively.
charts, represented X-axis robust makespan Y-axis. So,
lower values better Y-axis.
Given key observations conclusions made results:
Irrespective durational uncertainty, (GNLA+RC) (GNLA+OG) provide
better robust makespan values (GNLA) (GNLA+) J10 J30.
indicates new Robustness Feedback Chaining heuristic Order
Determination able provide robust partial ordered schedules J10
J30. improvement seems increase number activities, i.e.
difference obvious instances J30 J10. Furthermore,
difference consistently observed across problems. However, improvement
consistent J20 cases (GNLA+RC) (GNLA+OG)
perform (GNLA) (GNLA+). instance J20 problems, (GNLA+)
provides better performance (GNLA+RC) (GNLA+OG) = 0.01
= 1.5.
extra iterations local search (GNLA+) improve solution quality
much J10. However, improves solution quality J20 J30. could
optimal solution obtained within 1000 iterations smaller
problems.
cases, (GNLA+RC+OG) provides lowest robust makespan among
enhancements. Thus, OG RC enhancements combination degrade
75

fiFu, Lau, Varakantham, & Xiao

(a) Results J10

76

fiRobust Local Search Solving RCPSP/max Durational Uncertainty

(b) Results J20

77

fiFu, Lau, Varakantham, & Xiao

(c) Results J30

Figure 9: Comparison Robust Local Search Enhancements.

78

fiRobust Local Search Solving RCPSP/max Durational Uncertainty

MNPM
CB
G

Problem Size
44
UL=0.1 UL=0.5 UL=1
1.023
1.046
1.128
1.066
1.123
1.282

Problem Size
66
UL=0.1 UL=0.5 UL=1
1.021
1.073
1.168
1.095
1.190
1.273

Problem Size
1010
UL=0.1 UL=0.5 UL=1
1.024
1.101
1.215
1.210
1.225
1.263

Table 2: Comparison CB solver(UL:Uncertainty Level).
performance improvement obtained individually. cases, difference
significant J10 = 0.1 = 0.01. hand,
cases (GNLA+RC+OG) provide lowest robust makespan,
J20 = 0.5 = 0.01.
7.4 Comparing JSPs Durational Uncertainty
section, compare performance GNLA approach (referred G )
best known solver Job Shop Scheduling Problems proposed Beck Wilson (2007) (referred CB). fair comparison two approaches, employ
Mean Normalized Makespan (MNPM) metric defined Beck Wilson:
N P (a, L) =

1 X D(a, l)
|L|
Dlb (l)

(58)



L set problem instances, D(a, l) probabilistic makespan (i.e., robust
makespan work) instance l algorithm generated Monte Carlo simulation,
Dlb (l) lower bound probabilistic makespan.
denote best MNPM values aross different algorithms reported Beck
Wilson CB. compare MNPM values work obtained
replacing D(a, l) Eqn 58 upper bound robust makespan POS
generated GNLA-guided local search. runs 4 4 6 6 instances took less
minute, 10 10 instances took 15 minutes.
Table 2 provides results. performance solver comparable CB solver
across problem instances. comparison illustrates local search mechanism
generic (different types scheduling problems) able provide performance
par near optimal approaches. performance comparable, CB provides
better MNPM values approach due following key reasons: (a) approach
exploit structure specific JSPs (jobs consisting sequence operations).
hope improve approach exploit near future. (b) robust local
search reasons upper bounds (due Chebyshev inequality), loose.

8. Related Work
Resource-Constrained Project Scheduling Problem minimum maximum time
lags, RCPSP/max, (or known Resource-Constrained Project Scheduling Problem
Generalized Precedence Relations, RCPSP-GSR) strongly NP-hard combinatorial optimization problem; even decision problem determining whether
79

fiFu, Lau, Varakantham, & Xiao

RCPSP/max instance feasible solution NP-complete (Bartusch et al., 1988).
survey recent developments new applications RCPSP/max given
Neumann, Schwindt, Zimmermann (2006).
However, find much study considers RCPSP/max uncertainty.
One paper dealing variable durations RCPSP/max done Lombardi
Milano (2009), activity durations range given lower upper bounds.
precedence constraint posting approach (Policella, Cesta, Oddi, & Smith, 2007)
adopted. Whereas work, consider RCPSP/max durational uncertainty
activity duration modeled random variable known mean variance
values.
Research scheduling uncertainty received much attention Artificial
Intelligence Operations Research communities. complete survey recent AI
papers robust project scheduling 2004, one may refer work Herroelen
Leus (2005) production scheduling (Aytug, Lawley, McKay, Mohan, & Uzsoy,
2005). Broadly, one may classify techniques tackle scheduling uncertainty
two categories: Proactive Scheduling design priori schedule schedule policy
take account possible uncertainty may occur; Reactive Scheduling modifies
re-optimizes baseline schedule unexpected event occurs. interest
proactive scheduling concerned robust scheduling focuses
obtaining proactive schedules maintain high level performance uncertainty.
main idea proactive techniques build global solution hopefully
need revised execution time. One divide research area three
categories, according information uncertainties taken
account generating robust stable schedules would without using
information (Bidot, Vidal, Laborie, & Beck, 2009): 1. generating one complete generic
schedule proved execute correctly scenarios arising execution;
2. generating flexible solution decisions postponed made
execution; 3. generating conditional solution mutually exclusive decisions
developed,the one chosen dependent observations execution,
markov decision processes. following, briefly look first two cases since
related work.
8.1 Generating Generic Schedule
first method making generic schedule insensitive online perturbations
produce complete robust schedule taking account possible scenarios, i.e.
schedule strong controllability (Vidal & Fargier, 1999). Rather dealing execution 100% confidence, probabilistic techniques proposed build schedules
probabilistic guarantee threshold value optimization metric
makespan. Another example generic schedule generation fuzzy scheduling (Herroelen & Leus, 2005): instead stochastic variables probabilistic distributions, fuzzy
set scheduling use fuzzy numbers modeling uncertainties based possibility theory;
recent work Rodrguez et al. (2009) modeled uncertain durations fuzzy numbers
improved local search solve Job Shop Scheduling Problem. following,
80

fiRobust Local Search Solving RCPSP/max Durational Uncertainty

provide details work related strong controllability probabilistic
techniques.
8.1.1 Strong Controllable Techniques
Strong Controllability introduced Vidal Fargier (1999) Simple Temporal
Networks Uncertainty (STNU) controllability achievable polynomial
time. existence uncontrollable events controlled exogenous factors, often referred Nature, STNU strongly controllable exists least
one universal schedule suits situation. schedule might computed off-line
beforehand. Strong controllability strictest form STNU. strongly controllable
network means schedule executed without regard contingent events.
useful applications contingent events cannot observed exactly.
8.1.2 Probabilistic Techniques
Instead generating global solution suitable realizations uncertainties, probabilistic techniques build schedule probabilistic guarantee deterministic
optimization measure respect threshold value, e.g., find schedule
highest probability project makespan exceed particular value.
Daniels Carrillo (1997) defined -robust schedule one maximum probability achieving given performance level, e.g., total flow time greater
given threshold. presented branch-and-bound heuristic techniques find robust schedule one-machine manufacturing context performs best within given
confidence level. Job Shop Scheduling Problem, Beck Wilson (2007) consider
activity durations random variables; given level risk 0 1, interested
solution minimal (probabilistic) makespan probability execution
least 1 .
8.2 Generating Flexible Schedule
Another way producing robust schedule taking account uncertainty introduce
flexibility schedule. idea subset decisions made offline
rest postponed made online, decisions made information
becomes precise certain (Bidot et al., 2009). following, discuss three
subcategories works deal generating flexible schedules.
8.2.1 Dynamic Controllable Techniques
STNU Dynamic Controllable (Vidal & Fargier, 1999) exists solution
always instantiated incrementally based outcomes contingent edges past.
execution strategy using dynamic controllability needed produce incremental
solution based subsequent revelation contingent events. Morris Muscettola
(2005) proposed pseudo-polynomial algorithm handle dynamic controllability STNUs
based constraint satisfaction. Techniques proposed Wah Xin (2004)
optimize bounds durations contingent edges resulting STNU
dynamic controllable.
81

fiFu, Lau, Varakantham, & Xiao

8.2.2 Redundancy-based Techniques
Redundancy-based scheduling another proactive technique scheduling. idea
generate schedule includes allocation extra resources and/or time
schedule buffers help absorb impact unexpected events without
rescheduling execution. Davenport, Gefflot, Beck (2001) proposed techniques
generating robust schedules based insertion temporal slacks critical activities allocated possibly breakable resources. Lambrechts, Demeulemeester,
Herroelen (2010) analytically determined expected increase activity duration due
resource breakdown. Based information, simulation-based time buffering used
protect schedule disruptions caused resource availability.
8.2.3 Partial Order Schedule (POS)
Even buffering, baseline schedules may become brittle face unpredictable execution dynamics quickly get invalidated. Instead baseline schedule, another line
work consider design good schedule policies. One example notion
Partial Order Schedules (POS) defined Policella et al. (2004) seeks retain
temporal flexibility whenever problem constraints allow often absorb unexpected deviation predictive assumptions. considered robustness measures
fluidity flexibility. Generating POS another example flexible approaches:
subset sequencing decisions made offline remaining decisions made online
using dispatching rule (Bidot et al., 2009). Different methods generating POS
compared terms robustness resulting schedules work Rasconi, Cesta,
Policella (2010). work, apply concept POS execution policy.
Given RCPSP/max instance, mean variance values segregated variables
data perturbations level risk, objective work determine POS
locally minimal robust value.
8.3 Scenario-based Optimization Scheduling
Another line work deals scheduling uncertainty based use
scenarios (scenario-based optimization). example, Kouvelis, Daniels, Vairaktarakis
(2000) introduced concept robustness scheduling problems. considered uncertain processing times proposed methods generate robust schedule based
maximum absolute deviation robust solution possible scenarios
given scenario set. shortcoming kind approach scenarios assumed
known advance, scenario space usually exponentially large. Noteworthy mention two notions solution robustness quality robustness,
solution robustness (or stability) refers insensitivity actual start times, whereas
quality robustness refers insensitivity solution quality (i.e. makespan) different
scenarios (Herroelen & Leus, 2005). Another pioneering scenario-based optimization work
Mulvey, Vanderbei, Zenios (1995) handles tradeoff solution
robustness (if solution remains close optimal scenarios) model robustness
(if solution remains feasible scenarios).
82

fiRobust Local Search Solving RCPSP/max Durational Uncertainty

8.4 Robust Optimization Scheduling
recent development Operations Research saw potential applying concept
Robust Optimization deal uncertainty. Ben-Tal Nemirovski (2002) Bertsimas Sim (2003) proposed robust optimization models assumptions
underlying probability distribution data needed. idea often approximate
data uncertainty tractable (convex) uncertainty set, optimization performed
set. results robust counterpart formulation conic (such second-order
cone) optimization problem solved polynomial time. However,
works reported literature applying robust optimization scheduling,
due mainly high-degree combinational nature problem. One application
process scheduling problem chemical engineering, works Janak,
Lin, Floudas (2007) Li Ierapetritou (2008). notable recent breakthrough
robust optimization tractable approximation models solve stochastic optimization
problems found Chen et al. (2008). work makes use linear segregated decision rules relevant solving combinatorial scheduling problems durational
uncertainty work exploit mechanism incorporate local search.

9. Conclusion
Given level risk 0 < 1 chosen planner, investigated problem finding
minimum (1 )-guaranteed makespan (i.e. Robust Makespan) proposed methods
find schedule policy (POS) uncertainty dynamically realized,
execution policy result solution whose value good robust makespan.
first put forward new decision rule utilized scheduling help specify start times
activities respect execution policy dynamic realizations data uncertainty.
Based decision rule, new fitness function derived evaluate robustness,
finally integrated local search framework produce solution
robust makespan. Experimental results illustrate improved performance local search
new fitness evaluation, provider tighter bounds robust makespan
better partial order schedules compared existing method.
simplicity adopted upper bound approach assume independence among durational uncertainties. One future work treat correlations
durational uncertainties, since task duration could correlated others real
life. example, correlations occur external event peculiar single
task, universal, weather conditions, seasonal peaks. situations,
durational delays correlated direction. occurs, decision
rules proposed paper break unfortunately, since even covariances
pairs duration variables given, complex analytically model extent
one duration combination (resulting SUM MAX operators)
durations change together. turn complicates analysis variance
makespan variable, hence robust makespan. Extending work handle
covariances interesting future direction.

83

fiFu, Lau, Varakantham, & Xiao

Acknowledgments
paper extends previous research Lau, Ou, Xiao (2007) Fu, Varakantham,
Lau (2010). authors wish thank reviewers insightful comments.

References
Aytug, H., Lawley, M. A., McKay, K., Mohan, S., & Uzsoy, R. (2005). Executing production schedules face uncertainties: review future directions.
European Journal Operational Research, Vol. 165(1), pp. 86110.
Bartusch, M., Mohring, R. H., & Radermacher, F. J. (1988). Scheduling project networks
resource constraints time windows. Annals Operations Research, 16 (1-4),
201240.
Beck, J. C., & Wilson, N. (2007). Proactive algorithms job shop scheduling probabilistic durations. Journal Artificial Intelligence Research, 28 (1), 183232.
Ben-Tal, A., & Nemirovski, A. (2002). Robust optimization - methodology applications.
Mathematical Programming, 92, 453480.
Bertsimas, D., & Sim, M. (2003). Robust discrete optimization network flows. Mathematical Programming, 98, 4971.
Bidot, J., Vidal, T., Laborie, P., & Beck, J. C. (2009). theoretic practical framework
scheduling stochastic environment. Journal Scheduling, 12, 315344.
Chen, X., Sim, M., Sun, P., & Zhang, J. (2008). linear decision-based approximation
approach stochastic programming. Operations Research, 56 (2), 344357.
Clark, C. E. (1961). Greatest Finite Set Random Variables. Operations Research,
9, 145162.
Daniels, R., & Carrillo, J. (1997). Beta-robust scheduling single-machine systems
uncertain processing times. IIE Transactions, 977985.
Davenport, A. J., Gefflot, C., & Beck, J. C. (2001). Slack-based techniques robust
schedules. Proceedings 6th European Conferences Planning (ECP).
Dean, B. C., Goemans, M. X., & Vondrak, J. (2004). Approximating stochastic knapsack
problem: benefit adaptivity. FOCS, pp. 208217.
Demeulemeester, E. L., & Herroelen, W. S. (2002). Project scheduling : research handbook.
Kluwer Academic Publishers, Boston.
Fu, N., Varakantham, P., & Lau, H. C. (2010). Towards finding robust execution strategies
rcpsp/max durational uncertainty. Proceedings International Conference
Automated Planning Scheduling (ICAPS), pp. 7380.
84

fiRobust Local Search Solving RCPSP/max Durational Uncertainty

Hagstrom, J. N. (1988). Computational complexity pert problems. Networks, 18, 139
147.
Herroelen, W., & Leus, R. (2005). Project scheduling uncertainty: Survey
research potentials. European Journal Operational Research, Vol. 165(2), pp.
289306.
Janak, S., Lin, X., & Floudas, C. (2007). new robust optimization approach scheduling
uncertainty :ii. uncertainty known probability distribution. Computers
Chemical Engineering, 31, 171195.
Kolisch, R., & Hartmann, S. (2005). Experimental investigation heuristics resourceconstrained project scheduling: update.. European Journal Operational Research.
Kolisch, R., Schwindt, C., & Sprecher, A. (1998). Benchmark Instances Project Scheduling Problems, pp. 197212. Kluwer Academic Publishers, Boston.
Kouvelis, P., Daniels, R. L., & Vairaktarakis, G. (2000). Robust scheduling two-machine
flow shop uncertain processing times. IIE Transactions, 32, 421432.
Lambrechts, O., Demeulemeester, E., & Herroelen, W. (2010). Time slack-based techniques
robust project scheduling subject resource uncertainty. Open access publications
katholieke universiteit leuven urn:hdl:123456789/272147, Katholieke Universiteit
Leuven.
Lau, H. C., Ou, T., & Xiao, F. (2007). Robust local search application generating
robust schedules. Proceedings International Conference Automated Planning
Scheduling (ICAPS), pp. 208215.
Li, Z., & Ierapetritou, M. G. (2008). Robust optimization process scheduling
uncertainty. Industrial Engineering Chemistry Research, 47 (12), 41484157.
Lombardi, M., & Milano, M. (2009). precedence constraint posting approach
rcpsp time lags variable durations. Proceedings 15th international
conference Principles practice constraint programming, CP09, pp. 569583
Berlin, Heidelberg. Springer-Verlag.
Mohring, R. H. (2001). Scheduling uncertainty: Bounding makespan distribution.
Computational Discrete Mathematics, pp. 7997.
Mohring, R. H., & Stork, F. (2000). Linear preselective policies stochastic project
scheduling. Mathematical Methods Operations Research, 52 (3), 501515.
Morris, P., & Muscettola, N. (2005). Temporal dynamic controllability revisited. Proceedings 20th National Conference Artificial Intelligence, pp. 11931198. AAAI
Press.
Mulvey, J. M., Vanderbei, R. J., & Zenios, S. J. (1995). Robust optimization large-scale
systems. Operations Research, 43.
85

fiFu, Lau, Varakantham, & Xiao

Neumann, K., Schwindt, C., & Zimmermann, J. (2006). Resource-constrained project
scheduling time windows. International Series Operations Research Management Science, 92, 375408.
Policella, N., Cesta, A., Oddi, A., & Smith, S. (2009). Solve-and-robustify. Journal
Scheduling, 12, 299314. 10.1007/s10951-008-0091-7.
Policella, N., Cesta, A., Oddi, A., & Smith, S. F. (2007). precedence constraint posting
partial order schedules: csp approach robust scheduling. AI Communications,
20, 163180.
Policella, N., Smith, S. F., Cesta, A., & Oddi, A. (2004). Generating robust schedules
temporal flexibility.. Proceedings International Conference Automated Planning Scheduling (ICAPS), pp. 209218.
Rasconi, R., Cesta, A., & Policella, N. (2010). Validating scheduling approaches
executional uncertainty. Journal Intelligent Manufacturing, 21 (1), 4964.
Rodrguez, I. G., Vela, C. R., Puente, J., & Hernandez-Arauzo, A. (2009). Improved local
search job shop scheduling uncertain durations. Proceedings International Conference Automated Planning Scheduling (ICAPS).
Vidal, T., & Fargier, H. (1999). Handling contingency temporal constraint networks:
consistency controllabilities. Journal Experimental Theoretical Artificial
Intelligence, 11, 2345.
Vonder, S., Demeulemeester, E., & Herroelen, W. (2007). classification predictivereactive project scheduling procedures. Journal Scheduling, 10 (3), 195207.
Wah, B. W., & Xin, D. (2004). Optimization bounds temporal flexible planning
dynamic controllability. IEEE International Conference Tools Artificial
Intelligence, 0, 4048.
Watson, J.-P., Barbulescu, L., Whitley, L. D., & Howe, A. E. (2002). Contrasting structured
random permutation flow-shop scheduling problems: Search-space topology
algorithm performance. INFORMS Journal Computing, 14, 98123.
Wu, C. W., Brown, K. N., & Beck, J. C. (2009). Scheduling uncertain durations: Modeling beta-robust scheduling constraints.. Computers Operations Research,
36, 23482356.

86


