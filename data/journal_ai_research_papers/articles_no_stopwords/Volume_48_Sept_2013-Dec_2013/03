Journal Artificial Intelligence Research 48 (2013) 583-634

Submitted 4/13; published 11/13

Protecting Moving Targets Multiple Mobile Resources
Fei Fang
Albert Xin Jiang
Milind Tambe

feifang@usc.edu
jiangx@usc.edu
tambe@usc.edu

University Southern California
Los Angeles, CA 90089 USA

Abstract
recent years, Stackelberg Security Games successfully applied solve resource allocation scheduling problems several security domains. However, previous
work mostly assumed targets stationary relative defender
attacker, leading discrete game models finite numbers pure strategies. paper
contrast focuses protecting mobile targets leads continuous set strategies
players. problem motivated several real-world domains including protecting ferries escort boats protecting refugee supply lines. contributions include:
(i) new game model multiple mobile defender resources moving targets
discretized strategy space defender continuous strategy space attacker.
(ii) efficient linear-programming-based solution uses compact representation
defenders mixed strategy, accurately modeling attackers continuous strategy using novel sub-interval analysis method. (iii) Discussion analysis multiple
heuristic methods equilibrium refinement improve robustness defenders mixed
strategy. (iv) Discussion approaches sample actual defender schedules defenders mixed strategy. (iv) Detailed experimental analysis algorithms ferry
protection domain.

1. Introduction
last years, game-theoretic decision support systems successfully deployed several domains assist security agencies (defenders) protecting critical infrastructure ports, airports air-transportation infrastructure (Tambe, 2011; Gatti,
2008; Marecki, Tesauro, & Segal, 2012; Jakob, Vanek, & Pechoucek, 2011). decision support systems assist defenders allocating scheduling limited resources
protect targets adversaries. particular, given limited security resources
possible cover secure target times; simultaneously, attacker observe defenders daily schedules, deterministic schedule defender
exploited attacker (Paruchuri, Tambe, Ordonez, & Kraus, 2006; Kiekintveld,
Islam, & Kreinovich, 2013; Vorobeychik & Singh, 2012; Conitzer & Sandholm, 2006).
One game-theoretic model deployed schedule security resources
domains Stackelberg game leader (the defender) follower (the
attacker). model, leader commits mixed strategy, randomized
schedule specified probability distribution deterministic schedules; follower
observes distribution plays best response (Korzhyk, Conitzer, & Parr, 2010).
Decision-support systems based model successfully deployed, including
ARMOR LAX airport (Pita, Jain, Marecki, Ordonez, Portway, Tambe, Western,
c
2013
AI Access Foundation. rights reserved.

fiFang, Jiang, & Tambe

Paruchuri, & Kraus, 2008), IRIS US Federal Air Marshals service (Tsai, Rathi,
Kiekintveld, Ordonez, & Tambe, 2009), PROTECT US Coast Guard (Shieh,
An, Yang, Tambe, Baldwin, DiRenzo, Maule, & Meyer, 2012).
previous work game-theoretic models security assumed either stationary
targets airport terminals (Pita et al., 2008), targets stationary relative
defender attacker, e.g., trains (Yin, Jiang, Johnson, Kiekintveld, Leyton-Brown,
Sandholm, Tambe, & Sullivan, 2012) planes (Tsai et al., 2009), players
move along targets protect attack them). stationary nature leads
discrete game models finite numbers pure strategies. paper focus
security domains defender needs protect mobile set targets.
attacker attack targets point time movement, leading
continuous set strategies. defender deploy set mobile escort resources (called
patrollers short) protect targets. assume game zero-sum, allow
values targets vary depending locations time. defenders
objective schedule mobile escort resources minimize attackers expected utility.
call problem Multiple mobile Resources protecting Moving Targets (MRMT).
first contribution paper novel game model MRMT called MRMTsg .
MRMTsg attacker-defender Stackelberg game model continuous set strategies attacker. contrast, defenders strategy space continuous,
discretize MRMTsg three reasons. Firstly, let defenders strategy space
continuous, space mixed strategies defender would infinite
dimensions, makes exact computation infeasible. Secondly, practice, patrollers
able fine-grained control vehicles, makes actual
defenders strategy space effectively discrete one. Finally, discretized defender strategy space subset original continuous defender strategy space, optimal
solution calculated formulation feasible solution original game
gives lower-bound guarantee defender terms expected utility original continuous game. hand, discretizing attackers strategy space
highly problematic illustrate later paper. particular, deploy
randomized schedule defender assumption attacker could
attack certain discretized time points, actual attacker could attack
time point, leading possibly worse outcome defender.
second contribution CASS (Solver Continuous Attacker Strategies), efficient
linear program exactly solve MRMTsg . Despite discretization, defender strategy
space still exponential number pure strategies. overcome shortcoming
compactly representing defenders mixed strategies marginal probability variables.
attacker side, CASS exactly efficiently models attackers continuous strategy
space using sub-interval analysis, based observation given defenders
mixed strategy, attackers expected utility piecewise-linear function. Along way
presenting CASS, present DASS (Solver Discretized Attacker Strategies),
finds minimax solutions MRMTsg games constraining attacker attack
discretized time points. clarity exposition first derive DASS CASS
case targets move one-dimensional line segment. later show DASS
CASS extended case targets move two-dimensional space.
584

fiProtecting Moving Targets Multiple Mobile Resources

third contribution focused equilibrium refinement. game multiple
equilibria, defender strategy found CASS suboptimal respect uncertainties attackers model, e.g., attacker attack certain time
intervals. present two heuristic equilibrium refinement approaches game.
first, route-adjust, iteratively computes defender strategy dominates earlier strategies. second, flow-adjust, linear-programming-based approach. experiments
show flow-adjust computationally faster route-adjust route-adjust
effective selecting robust equilibrium strategies.
Additionally, provide several sampling methods generating practical patrol routes
given defender strategy compact representation. Finally present detailed experimental analyses algorithm ferry protection domain. CASS deployed
US Coast Guard since April 2013.
rest article organized follows: Section 2 provides problem statement.
Section 3 presents MRMTsg model initial formulation DASS CASS
one-dimensional setting. Section 4 discusses equilibrium refinement, followed Section
5 gives generalized formulation DASS CASS two-dimensional settings.
Section 6 describes sample patrol route Section 7 provides experimental
results ferry protection domain. Section 8 discusses related work, followed Section
9, provides concluding remarks, Section 10, discusses future work.
end article, Appendix provides table listing notations used article,
Appendix B provides detailed calculation finding intersection points
2-D case.

2. Problem Statement
One major example practical domains motivating paper problem protecting ferries carry passengers many waterside cities. Packed hundreds
passengers, may present attractive targets attacker. example, attacker
may ram suicide boat packed explosives ferry happened attacks
French supertanker Limburg USS Cole (Greenberg, Chalk, & Willis, 2006).
case, intention attacker detected gets close ferry.
Small, fast well-armed patrol boats (patrollers) provide protection ferries
(Figure 1(a)), detecting attacker stopping armed weapons. However, often limited numbers patrol boats, i.e., cannot protect ferries
times locations. first focus case ferries patrol boats move
one-dimensional line segment (this realistic setting simplifies exposition);
discuss two-dimensional case Section 5.
2.1 Domain Description
problem, L moving targets, F1 , F2 , ..., FL . assume targets
move along one-dimensional domain, specifically straight line segment linking two terminal points name B. sufficient capture real-world domains
ferries moving back-and-forth straight line two terminals
many ports around world; example green line shown Figure 1(b).
provide illustration geometric formulation problem Figure 2.1.
585

fiFang, Jiang, & Tambe

(a)

(b)

Figure 1: (a) Protecting ferries patrol boats; (b) Part map New York Harbor Commuter Ferry Routes. straight line linking St. George Terminal
Whitehall Terminal indicates public ferry route run New York City Department Transportation.

targets fixed daily schedules. schedule target described continuous function Sq : q = 1, ..., L index target, = [0, 1]
continuous time interval (e.g., representing duration typical daily patrol shift)
= [0, 1] continuous space possible locations (normalized) 0 corresponding
terminal 1 terminal B. Thus Sq (t) denotes position target Fq
specified time t. assume Sq piecewise linear.
defender W mobile patrollers move along protect targets,
denoted P1 , P2 , ..., PW . Although capable moving faster targets,
maximum speed vm . defender attempts protect targets, attacker
choose certain time certain target attack. (In rest paper, denote
defender attacker he). probability attack success depends
positions patrollers time. Specifically, patroller detect try
intercept anything within protection radius cannot detect attacker prior
radius. Thus, patroller protects targets within protective circle radius
(centered current position), shown Figure 2.1.
















Figure 2: example three targets (triangles) two patrollers (squares).
protective circles patrollers shown protection radius . patroller
protects targets protective circle. Patroller P1 protecting F2 P2
protecting F3 .

586

fiProtecting Moving Targets Multiple Mobile Resources

Symmetrically, target protected patrollers whose protective circles cover
it. attacker attacks protected target, probability successful attack
decreasing function number patrollers protecting target. Formally,
use set coefficients {CG } describe strength protection.
Definition 1. Let G {1, ..., W } total number patrollers protecting target Fq ,
i.e., G patrollers Fq within radius G patrollers.
CG [0, 1] specifies probability patrollers successfully stop attacker.
require CG1 CG2 G1 G2 , i.e., patrollers offer better protection.
previous work security games (Tambe, 2011; Yin et al., 2012; Kiekintveld,
Jain, Tsai, Pita, Ordonez, & Tambe, 2009), model game Stackelberg game,
defender commits randomized strategy first, attacker respond
strategy. patrol schedules domains previously created hand;
hence suffer drawbacks hand-drawn patrols, including lack randomness (in
particular, informed randomness) reliance simple patrol patterns (Tambe, 2011),
remedy paper.
2.2 Defender Strategy
pure strategy defender designate movement schedule patroller.
Analogous targets schedule, patrollers schedule written continuous
function Ru : u = 1, ..., W index patroller. Ru must compatible
patrollers velocity range. mixed defender strategy randomization
pure strategies, denoted f .
2.3 Attacker Strategy
attacker conducts surveillance defenders mixed strategy targets schedules; may execute pure strategy response attack certain target certain
time. attackers pure strategy denoted hq, ti q index target
attack time attack.
2.4 Utility Function
assume game zero-sum. attacker performs successful attack target Fq
location x time t, gets positive reward Uq (x, t) defender gets Uq (x, t),
otherwise players get utility zero. positive reward Uq (x, t) known function
accounts many factors practice. example, attacker may effective
attack target stationary (such terminal point) target
motion. targets position decided schedule, utility function
written Uq (t) Uq (Sq (t), t). assume target Fq , Uq (t) represented
piecewise linear function t.
2.5 Equilibrium
Since game zero-sum, Strong Stackelberg Equilibrium calculated finding
minimax/maximin strategy (Fudenberg & Tirole, 1991; Korzhyk et al., 2010). is,
587

fiFang, Jiang, & Tambe

find optimal defender strategy finding strategy minimizes maximum
attackers expected utility.
Definition 2. single patroller case, attacker expected utility attacking target Fq
time given defender mixed strategy f
AttEUf (Fq , t) = (1 C1 f (Fq , t))Uq (t)

(1)

Uq (t) reward successful attack, f (Fq , t) probability patroller
protecting target Fq time C1 protection coefficient single patroller.
drop subscript f obvious context. C1 Uq (t) constants given
attackers pure strategy hq, ti, AttEU(Fq , t) purely decided (Fq , t). definition
multiple patrollers given Section 3.4. denote attackers
maximum expected utility
AttEUm
f = max AttEUf (Fq , t)
q,t

(2)

optimal defender strategy strategy f AttEUm
f minimized, formally
f arg minf 0 AttEUm
f0

(3)

2.6 Assumptions
problem, following assumptions made based discussions domain
experts. provide justifications assumptions. appropriate
current domain application, relaxing assumptions future applications remains
issue future work; provide initial discussion Section 10.
attackers plan decided off-line, i.e., attacker take account
patrollers current partial route (partial pure strategy) executing attack:
assumption similar assumption made applications security games
justified elsewhere (An, Kempe, Kiekintveld, Shieh, Singh, Tambe, & Vorobeychik, 2012; Pita, Jain, Ordonez, Portway, Tambe, Western, Paruchuri, & Kraus,
2009; Tambe, 2011). One key consideration given attackers limited
resources well, generate execute complex conditional plans
change based on-line observations defenders pure strategy difficult
risky.
single attacker assumed instead multiple attackers: assumption arises
performing even single attack already costly attacker. Thus,
coordinating attackers time even harder therefore
significantly less likely attacker.
game assumed zero-sum: case, objectives defender
attacker direct conflict: preventing attack higher potential damage
bigger success defender game.
588

fiProtecting Moving Targets Multiple Mobile Resources

schedules targets deterministic: domains focus on, potential
delays targets schedules usually within several minutes any,
targets try catch fixed schedules soon possible. Therefore,
even delays occur, deterministic schedule target viewed
good approximation actual schedule.

3. Models
section, introduce MRMTsg model uses discretized strategy space
defender continuous strategy space attacker. clarity exposition,
introduce DASS approach compute minimax solution discretized attacker
strategy space (Section 3.2), followed CASS attackers continuous strategy space
(Section 3.3). first assume single patroller Sections 3.1 3.3
generalize multiple patrollers Section 3.4.
3.1 Representing Defenders Strategies
subsection, introduce discretized defender strategy space compact
representation used represent defenders mixed strategy. show compact
representation equivalent intuitive full representation, followed several properties
compact representation.
Since defenders strategy space discretized, assume patroller
makes changes finite set time points = {t1 , t2 , ..., tM }, evenly spaced across
original continuous time interval. t1 = 0 starting time tM = 1 normalized
ending time. denote distance two adjacent time points: = tk+1
tk = M11 . set small enough target Fq , schedule Sq (t)
utility function Uq (t) linear interval [tk , tk+1 ] k = 1, . . . , 1, i.e.,
target moving uniform speed utility successful attack changes
linearly intervals. Thus, t0 breakpoint Sq (t) Uq (t)
q, represented t0 = tK0 K0 integer.
addition discretization time, discretize line segment AB
targets move along set points = {d1 , d2 , ..., dN } restrict patroller
located one discretized points di discretized time point tk . Note
necessarily evenly distributed targets locations restricted tk .
time interval [tk , tk+1 ], patroller moves constant speed location di
time tk location dj time tk+1 . movements compatible speed limit
vm possible. points d1 , d2 , ..., dN ordered distance terminal A,
d1 refers dN refers B. Since time interval discretized points,
patrollers route Ru represented vector Ru = (dru (1) , dru (2) , ..., dru (M ) ). ru (k)
indicates index discretized distance point patroller located time
tk .
explained Section 1, discretized defenders strategy space
computational reasons. even clear whether equilibrium exists original
game continuous strategy space players. discretization made
practical constraint patrollers.
589

fiFang, Jiang, & Tambe

expository purpose, first focus case single defender resource
generalize larger number resources later. single defender resource,
defenders mixed strategy full representation assigns probability patrol
routes executed. Since time step patroller choose go
N different locations, N possible patrol routes total number
achievable speed limit (or vm large enough). exponentially growing
number routes make analysis based full representation intractable.
Therefore, use compact representation defenders mixed strategy.
Definition 3. compact representation single defender resource compact
way represent defenders mixed strategy using flow distribution variables {f (i, j, k)}.
f (i, j, k) probability patroller moving di time tk dj time tk+1 .
complexity compact representation O(M N 2 ), much efficient
compared full representation.
Proposition 1. strategy full representation mapped compact representation.
Proof sketch: H possible patrol routes R1 , R2 , ..., RH , mixed defender
strategy represented full representation probability vector (p(R1 ), ...p(RH ))
p(Ru ) probability taking route Ru . Taking route Ru means patroller
moves dru (k) dru (k+1) time [tk , tk+1 ], edge ERu (k),Ru (k+1),k taken
route Ru chosen. total probability taking edge Ei,j,k sum
probabilities routes Ru Ru (k) = Ru (k + 1) = j. Therefore, given
strategy full presentation specified probability vector (p(R1 ), ...p(RH )),
construct compact representation consisting set flow distribution variables
{f (i, j, k)}
X
f (i, j, k) =
p(Ru ).
(4)
Ru :Ru (k)=i Ru (k+1)=j

Figure 3 shows simple example illustrating compact representation. Numbers
edges indicate value f (i, j, k). use Ei,j,k denote directed edge linking
nodes (tk , di ) (tk+1 , dj ). example, f (2, 1, 1), probability patroller moving
d2 d1 time t1 t2 , shown edge E2,1,1 node (t1 , d2 ) node
(t2 , d1 ). similar compact representation used earlier Yin et al. (2012),
use continuous setting.
Note different mixed strategies full representation mapped
compact representation. Table 1 shows two different mixed defender strategies full representations mapped mixed strategy compact representation
shown Figure 3. probability route labeled edges route full
representation. Adding numbers particular edge Ei,j,k routes full
representation together, get f (i, j, k) compact representation.
Theorem 1. Compact representation lead loss solution quality.
590



Protecting Moving Targets Multiple Mobile Resources













Figure 3: Compact representation: x-axis shows time intervals; y-axis discretized
distance-points one-dimensional movement space.

R1 = (d1 , d1 , d1 )




R1 = (d1 , d1 , d1 )




Full Representation 1
R2 = (d1 , d1 , d2 )
R3 = (d2 , d1 , d1 )


R4 = (d2 , d1 , d2 )



Full Representation 2
R2 = (d1 , d1 , d2 )
R3 = (d2 , d1 , d1 )

R4 = (d2 , d1 , d2 )





Table 1: Two full representations mapped compact representation
shown Figure 3.

Proof sketch: complete proof theorem relies calculations Section
3.2 3.3. provide sketch. Recall goal find optimal defender
strategy f minimizes maximum attacker expected utility AttEUm
f .
show next subsections, (Fq , t) calculated compact representation
{f (i, j, k)}. two defender strategies full representation mapped
compact representation {f (i, j, k)}, function
AttEU function according Equation 1. Thus value AttEUm
f
two defender strategies. optimal mixed defender strategy compact representation
still optimal corresponding defender strategies full representation.
exploit following properties compact representation.
Property 1.
ForPany time interval [tk , tk+1 ], sum flow distribution variables
PN
N
equals 1:
i=1
j=1 f (i, j, k) = 1.
Property 2. sum flows go particular node equals sum
P flows
go node. Denote sum node (tk , di ) p(i, k), p(i, k) = N
j=1 f (j, i, k
PN
1) = j=1 f (i, j, k). p(i, k) equal marginal probability patroller
location di time tk .
P
Property 3. Combining Property 1 2, N
i=1 p(i, k) = 1.
591

fiFang, Jiang, & Tambe

3.2 DASS: Discretized Attacker Strategies
subsection, introduce DASS, mathematical program efficiently finds minimax solutions MRMTsg -based games assumption attacker attack
one discretized time points tk . problem, need minimize v v
maximum attackers expected utility. Here, v maximum AttEU(Fq , t)
target Fq discretized time point tk .
Equation (1), know AttEU(Fq , t) decided (Fq , t), probability
patroller protecting target Fq time t. Given position target Sq (t),
define protection range q (t) = [max{Sq (t)re , d1 }, min{Sq (t)+re , dN }]. patroller
located within range q (t), distance target patroller
thus patroller protecting Fq time t. (Fq , t) probability
patroller located within range q (t) time t. discretized time points
tk , patroller located discretized distance point di , define
following.

Definition 4. I(i, q, k) function two values. I(i, q, k) = 1 di q (tk ),
otherwise I(i, q, k) = 0.

words, I(i, q, k) = 1 means patroller located di time tk protect target Fq . Note value I(i, q, k) calculated directly input
parameters (di , Sq (t) ) stored look-up table. particular, I(i, q, k)
variable formulations follow. simply encodes relationship di
location target Fq tk . probability patroller di time tk
p(i, k).
(Fq , tk ) =

X


AttEU(Fq , tk ) =

1 C1

i:I(i,q,k)=1

p(i, k),

X
i:I(i,q,k)=1


p(i, k) Uq (tk ).

(5)

(6)

Equation (6) follows Equations (1) (5), expressing attackers expected utility
discretized time points. Finally, must address speed restrictions patroller. set
flows corresponding actions achievable zero,1 is, f (i, j, k) = 0
|dj di | > vm t. Thus, DASS formulated linear program. linear program

1. Besides speed limit, model practical restrictions domain placing constraints
f (i, j, k).

592

fiProtecting Moving Targets Multiple Mobile Resources

solves number targets one defender resource.
min

z

(7)

f (i,j,k),p(i,k)

f (i, j, k) [0, 1],

i, j, k

(8)

f (i, j, k) = 0,

i, j, k |dj di | > vm

(9)

p(i, k) =

N
X

f (j, i, k 1),

i, k > 1

(10)

f (i, j, k),

i, k <

(11)

k

(12)

q, k

(13)

j=1

p(i, k) =

N
X
j=1

N
X

p(i, k) = 1,

i=1

z AttEU(Fq , tk ),

Constraint 8 describes probability range. Constraint 9 describes speed limit. Constraints 1011 describes Property 2. Constraint 12 exactly Property 3. Property 1
derived Property 2 3, listed constraint. Constraint (13) shows
attacker chooses strategy gives maximal expected utility among
possible attacks discretized time points; AttEU() described Equation (6).
3.3 CASS: Continuous Attacker Strategies
subsection, generalize problem one continuous attacker strategy set
provides linear-programming-based solution CASS. CASS efficiently finds optimal
mixed defender strategy assumption attacker attack time
continuous time interval = [0, 1]. assumption, DASSs solution quality
guarantee may fail: attacker chooses attack tk tk+1 , may get
higher expected reward attacking tk tk+1 . Consider following example,
defenders compact strategy tk tk+1 shown Figure 4.
defenders strategy three non-zero flow variables f (3, 4, k) = 0.3, f (3, 1, k) = 0.2,
f (1, 3, k) = 0.5, indicated set three edges E + = {E3,4,k , E3,1,k , E1,3,k }.
target Fq moves d3 d2 constant speed [tk , tk+1 ]. schedule depicted
straight line segment Sq . dark lines L1q L2q parallel Sq distance
. area indicates protection range q (t) time (tk , tk+1 ).
Consider time points edge E + intersects one L1q , L2q , label
r , r = 1 . . . 4 Figure 4). Intuitively, time points defender
qk
patrol could potentially enter leave protection range target. simplify
0
5
notation, denote tk qk
k+1 qk . example, patroller moving d3
0 1
d4 (or equivalently, taking edge E3,4,k ) protects target qk
qk
0 , 1 ], distance target less
E3,4,k L11 L21 [qk
qk
r r+1 ,
equal protection radius . Consider sub-intervals qk
qk
r = 0 . . . 4. Since within five sub-intervals, patroller enters leaves
593

fiFang, Jiang, & Tambe

protection range, probability target protected constant
sub-interval, shown Figure 5(a).
























Figure 4: example show target moving d3 d2 [tk , tk+1 ] pror , r+1 ], patroller either always protects target
tected. sub-interval [qk
qk
never protects target. Equivalently, target either always within
protective circle patroller always outside circle.

Suppose Uq (t) decreases linearly 2 1 [tk , tk+1 ] C1 = 0.8.
calculate attackers expected utility function AttEU(Fq , t) (tk , tk+1 ), plotted
Figure 5(b). AttEU(Fq , t) linear sub-interval function discontinuous
1 , . . . , 4 patroller leaving entering protection
intersection points qk
qk
r left as:
range target. denote limit AttEU approaches qk
r
lim AttEU(Fq , t) = AttEU(Fq , qk
)

r
tqk

Similarly, right limit denoted as:
r+
lim AttEU(Fq , t) = AttEU(Fq , qk
)

r+
tqk

2 ,
Fq target, attacker choose attack time immediately qk
getting expected utility arbitrarily close 1.70. According Equation (6),
2+
get AttEU(Fq , tk ) = 1.20 AttEU(Fq , tk+1 ) = 1.00, lower AttEU(Fq , qk
).
Thus, attacker get higher expected reward attacking tk tk+1 ,
violating DASSs quality guarantee.
However, discontinuities attackers expected utility function, maximum might exist. implies minimax solution concept might welldefined game. thus define solution concept minimizing supremum
AttEU(Fq , t).

594

fiProtecting Moving Targets Multiple Mobile Resources





0.50

1.70
1.43
1.20
1.00

0.20
0.00
















(a) Probability target protected
constant sub-interval.











(b) attackers expected utility linear
sub-interval.

Figure 5: Sub-interval analysis (tk , tk+1 ) example shown Figure 4.]
Definition 5. supremum attackers expected utility smallest real number
greater equal elements infinite set {AttEU(Fq , t)}, denoted
sup AttEU(Fq , t).
supremum least upper bound function AttEU(Fq , t). CASS
model, Equation 2 modified
AttEUm
f = sup AttEUf (Fq , t)

(14)

q,t

defender strategy f minimax AttEUm
f maximized, i.e.,
f arg minf 0 sup AttEUf 0 (Fq , t)
2+
)=
example, supremum attackers expected utility (tk , tk+1 ) AttEU(Fq , qk
1.70. rest paper, specify supremum used instead maximum easily inferred context.
deal possible attacks discretized points find
optimal defender strategy? generalize process (called sub-interval analysis)
possible edges Ei,j,k . make use piecewise linearity AttEU(Fq , t)
fact potential discontinuity points fixed, allows us construct
linear program solves problem optimality. name approach CASS
(Solver Continuous Attacker Strategies).
first introduce general sub-interval analysis. target Fq time
interval (tk , tk+1 ), calculate time points edges Ei,j,k L1q , L2q intersect,
denoted intersection points. sort intersection points increasing order, denoted
r , r = 1 . . . ,
0
qk
qk
qk total number intersection points. Set qk = tk


qkqk

+1

r , r+1 ), r = 0, ..., .
= tk+1 . Thus (tk , tk+1 ) divided sub-intervals (qk
qk
qk

Lemma 1. given target Fq , AttEU(Fq , t) piecewise-linear t. Furthermore,
exists fixed set time points, independent defenders mixed strategy,
AttEU(Fq , t) linear adjacent pair points. Specifically, points
r defined above.
intersection points qk
595

fiFang, Jiang, & Tambe

r , r+1 ) target F , feasible edge E
Proof: sub-interval (qk
q
i,j,k either
qk
1
2
totally Lq , similarly Lq . Otherwise new intersection
point contradicts definition sub-intervals. edge Ei,j,k L1q
L2q , distance patroller taking edge target Fq less , meaning
target protected patroller. edge Ei,j,k taken probability f (i, j, k),
total probability target protected ((Fq , t)) sum f (i, j, k) whose
corresponding edge Ei,j,k two lines sub-interval. (Fq , t) constant
sub-interval thus attackers expected utility AttEU(Fq , t) linear
sub-interval according Equation 2 Uq (t) linear [tk , tk+1 ]. Discontinuity
exist intersection points upper bound number points
target Fq N 2 .
r , r+1 ), 0
Define coefficient Arqk (i, j) C1 edge Ei,j,k L1q L2q (qk
qk
otherwise. According Equation (1) fact (Fq , t) sum f (i, j, k) whose
r , r+1 ).
corresponding coefficient Arqk (i, j) = C1 , following equation (qk
qk


N X
N
X

(15)
AttEU(Fq , t) = 1
Arqk (i, j)f (i, j, k) Uq (t)
i=1 j=1

Piecewise linearity AttEU(Fq , t) means function monotonic sub-interval
supremum found intersection points. linearity, supremum
r , r+1 ) chosen one-sided limits endpoints,
AttEU (qk
qk
(r+1)

r+
) AttEU(Fq , qk
). Furthermore, Uq (t) decreasing [tk , tk+1 ],
AttEU(Fq , qk
supremum
(r+1)
r+
) otherwise AttEU(Fq , qk
). words, attackers
AttEU(Fq , qk
r+1
r r+1 . Thus, CASS
r
strategies (qk , qk ) dominated attacking time close qk
qk
adds new constraints Constraints 813 consider attacks occur (tk , tk+1 ).
add one constraint sub-interval respect possible supremum value
sub-interval:

min

z

(16)

f (i,j,k),p(i,k)

subject constraints (8 . . . 13)
(r+1)

r+
z max{AttEU(Fq , qk
), AttEU(Fq , qk

)}

(17)

k {1 . . . }, q {1 . . . L}, r {0 . . . Mqk }
linear program stands core CASS differentiate name
solver name linear program following. linear constraints included Constraint 17 added CASS using Algorithm 1. input
algorithm include targets schedules {Sq }, protection radius , speed limit
vm , set discretized time points {tk } set discretized distance points {di }.
Function CalInt(L1q , L2q , vm ) Line 1 returns list intersection time points
0
possible edges Ei,j,k parallel lines L1q , L2q , additional points tk qk


+1

r , r+1 ) Line 1 returns coefficient
tk+1 qkqk . Function CalCoef(L1q , L2q , vm , qk
qk
r
r
matrix Aqk . Aqk easily decided checking status midpoint time. Set

596

fiProtecting Moving Targets Multiple Mobile Resources

r + r+1 )/2 denote patrollers position
tmid = (qk
mid edge Ei,j,k taken
qk
Ei,j,tmid , thus Arqk (i, j) = C1 Ei,j,tmid q (tmid ). Lines 11 add constraint respect
(r+1)

r+
larger value AttEU(Fq , qk
) AttEU(Fq , qk
) CASS sub-interval
r+1
r
(qk , qk ). means attacker chooses attack Fq sub-interval, best
r , r+1 ).
choice decided larger value two side-limits AttEU (qk
qk

Algorithm 1: Add constraints described Constraint 17
Input: Sq , , vm , {tk }, {di };
k 1, . . . , 1
q 1, . . . , L
L1q Sq + , L2q Sq ;


+1

0 , . . . , qk
CalInt(L1q , L2q , vm );
qk
qk
r 0, . . . , Mqk
r , r+1 );
Arqk CalCoef(L1q , L2q , vm , qk
qk
Uq (t) decreasing [tk , tk+1 ]
r+
add constraint z AttEU(Fq , qk
)
end
else
(r+1)
add constraint z AttEU(Fq , qk
)
end
end
end
end

Theorem 2. CASS computes (in polynomial time) exact solution (minimax)
game discretized defender strategies continuous attacker strategies.
Proof: According Lemma 1, AttEU(Fq , t) piecewise linear discontinuity
r . intersection points divide time space
occur intersection points qk
sub-intervals. piecewise linearity, supremum AttEU(Fq , t) equals
limit endpoint least one sub-interval. defenders strategy f
feasible, feasible z linear program 16-17 less limit values
intersection points according Constraint 17 values discretized time points tk
according Constraint 13, thus v upper bound AttEU(Fq , t) f . z
minimized objective function, z greater supremum AttEU(Fq , t)
given defender strategy f , z minimum set supremum
corresponding defender strategies. Thus get optimal defender strategy f .
total number variables linear program O(M N 2 ). number constraints represented Algorithm 1 O(M N 2 L) number intersection points
2(M 1)N 2 target. number constraints represented Constraints
813 O(M N 2 ). Thus, linear program computes solution polynomial time.
Corollary 1. solution CASS provides feasible defender strategy original
continuous game gives exact expected value strategy.
597

fiFang, Jiang, & Tambe

3.4 Generalized Model Multiple Defender Resources
subsection, generalize DASS CASS solve problem multiple defender resources. multiple patrollers, patrollers coordinate
other. Recall protection coefficient CG Definition 1, target better protected
patrollers close (within radius ). protection provided
target determined patrollers locations known. Thus sufficient
calculate probability individual edge taken single patroller case.
presence multiple patrollers, need complex representation explicitly describe defender strategy. illustrate generalization multiple defender
resources case, first take two patrollers example. two patrollers,
patrol strategy represented using flow distribution variables {f (i1 , j1 , i2 , j2 , k)}.
flow distribution variables defined Cartesian product two duplicated sets
feasible edges {Ei,j,k }. f (i1 , j1 , i2 , j2 , k) joint probability first patroller
moving di1 dj1 second patroller moving di2 di2 time tk
tk+1 , i.e., taking edge Ei1 ,j1 ,k Ei2 ,j2 ,k respectively. corresponding marginal distribution variable p(i1 , i2 , k) represents probability first patroller di1
second di2 time tk . Protection coefficients C1 C2 used one two
patrollers protecting target respectively.
attackers expected utility written
AttEU(Fq , t) = (1 (C1 1 (Fq , t) + C2 2 (Fq , t))) Uq (t)
1 (Fq , t) probability one patroller protecting target Fq time
2 (Fq , t) probability patrollers protecting target. attacks
happen discretized points tk , make use I(i, q, k) Definition 4
I(i1 , q, k) + I(i2 , q, k) total number patrollers protecting ferry time tk .
X
1 (Fq , tk ) =
p(i1 , i2 , k)
i1 ,i2 :I(i1 ,q,k)+I(i2 ,q,k)=1
X
2 (Fq , tk ) =
p(i1 , i2 , k)
i1 ,i2 :I(i1 ,q,k)+I(i2 ,q,k)=2

Constraints attacks occurring (tk , tk+1 ) calculated algorithm
looks Algorithm 1. main difference coefficient matrix Arqk
expression AttEU. set values coefficient matrix Arqk (i1 , j1 , i2 , j2 ) C2
edges Ei1 ,j1 ,k Ei2 ,j2 ,k L1q L2q , C1 one edges
r , r+1 )
protects target. attackers expected utility function (qk
qk
X
AttEU(Fq , t) = (1
Arqk (i1 , j1 , i2 , j2 )f (i1 , j1 , i2 , j2 , k)) Uq (t)
i1 ,j1 ,i2 ,j2

general case W defender resources, use {f (i1 , j1 , ..., iW , jW , k)} represent patrol strategy.
Definition 6. compact representation multiple defender resources compact way
represent defenders mixed strategy using flow distribution variables {f (i1 , j1 , ..., iW , jW , k)}.
{f (i1 , j1 , ..., iW , jW , k)} joint probability patroller moving diu time tk
dju time tk+1 u = 1 . . . W .
598

fiProtecting Moving Targets Multiple Mobile Resources

Given generalized compact representation, get following equations calculating attackers expected utility function protection probability:


W
X
AttEU(Fq , t) = 1
CQ Q (Fq , t) Uq (t)
Q=1

Q (Fq , tk ) =

X
i1 ,...,iW :

W
P

p(i1 , . . . , iW , k)
I(iu ,q,k)=Q

u=1

Q number patrollers protecting target. modify Algorithm 1 apply
multiple defender resource case. Set Arqk (i1 , j1 , ..., iW , jW ) CQ Q edges
{Eiu ,ju ,k } L1q L2q .
conclude linear program generalized CASS multiple patrollers follows.
min

z

(18)

f (i1 ,j1 ,...,iW ,jW ,k),p(i1 ,...,iW ,k)

f (i1 , j1 , . . . , iW , jW , k) = 0, i1 , . . . , iW , j1 , . . . , jW u, |dju diu | > vm
(19)
n
n
X
X
p(i1 , . . . , iW , k) =
...
f (j1 , i1 , . . . , jW , iW , k 1), i1 , . . . , iW , k > 1
j1 =1

jW =1

n
X

n
X

(20)
p(i1 , . . . , iW , k) =

...

j1 =1

f (i1 , j1 , . . . , iW , jW , k), i1 , . . . , iW , k <

jW =1

(21)
n
X
i1 =1

...

n
X

p(i1 , . . . , iW , k) = 1, k

(22)

iW =1

z AttEU(Fq , tk ), q, k
z

(r+1)
r+
max{AttEU(Fq , qk
), AttEU(Fq , qk
)}, k, q, r

(23)
(24)

number variables linear program O(M N 2W ) number constraints O(M N W ). reasonable examine potentially efficient alternatives.
summarize results examination concluding using current
linear program would appear currently offer best tradeoff terms solution quality time least current domains application; although discussed below,
significant future work might reveal alternatives approaches future domains.
first question examine computational complexity problem
hand: generating optimal patrolling strategies multiple patrollers graph. Unfortunately, despite significant attention paid topic, currently, complexity remains
unknown. specifically, question computational complexity generating patrols
multiple defenders graphs different types received significant attention (Letchford, 2013; Korzhyk et al., 2010). studies illustrate several cases problem
NP-hard, cases problem known polynomial time, despite significant effort, problem complexity many cases remains unknown (Letchford & Conitzer,
599

fiFang, Jiang, & Tambe

2013). Unfortunately, graph turns different cases considered
work. Indeed, DASS model explained game homogeneous defender
resources patrolling graph, similar cases already considered.
However, prior results cannot explain complexity game structure
graph fit prior graphs.
Given computational complexity results directly available, may examine
approaches provide efficient approximations. provide overview two
approaches (providing experimental results Section 7.1.6). first approach attempts
provide compact representation hope providing speedup. end,
apply intuitive approach uses individual strategy profile patroller
calculates best possible mixed strategy combination. Unfortunately, approach
inefficient run-time even DASS model may result suboptimal solution.
Thus, although compact, approach fails achieve goal; explain
approach next.
Assume patroller independently follows mixed strategy. Denote individual mixed strategy patroller u fu (iu , ju , tk ), probability target
protected Q players represented polynomial expression {fu (iu , ju , tk )}
order Q. optimization problem converted minimizing objective function z
non-linear constraints. Assume two patrollers, potential attack
target q time tk , denote probability patroller u protecting target
$u . $u linear fu , attackers expected utility attack represented

AttEU(Fq , tk ) = (1 C1 ((1 $1 )$2 + (1 $2 )$1 ) C2 $1 $2 )Uq (tk )
constraint z AttEU(Fq , tk ) quadratic f , due fact joint probability
represented product individual probability patroller. constraints ensured convex feasible region known polynomial
algorithms solving kind non-convex optimization problems. attempt solve
problem converting mathematical program non-convex objective function linear constraints, i.e., instead minimizing z constraints z AttEU(Fq , tk ),
incorporate constraints objective function
z = max{AttEU(Fq , tk )}
q,k

(25)

results Section 7.1.6 show solve mathematical program MATLAB using function fmincon interior-point method DASS model, algorithm
fails get feasible solution efficiently even enough time given, solution
still suboptimal may get stuck local minimum. conclude, although
approach compact helps saving memory, inefficient run-time may
result loss solution quality.
second approach takes step reduce run-time complexity, making
polynomial approximation algorithm, lead high degradation solution quality. approach, iteratively compute optimal defender strategy
newly added resource unit given existing strategies previous defender resources.
Namely, first calculate f1 (i1 , j1 , tk ) one patroller available calculate
600

fiProtecting Moving Targets Multiple Mobile Resources

f2 (i2 , j2 , tk ) given value f1 (i1 , j1 , tk ). way, need solve W linear programs
complexity O(M N 2 ) approach much faster compared former one. Unfortunately, approach fails capture coordination patrollers effectively
thus may result high degradation solution quality. example, suppose
two targets constant utility U , one target stays terminal one
stays terminal B. Further, suppose protection coefficient always 1 target
protected one patrollers. two patrollers available, optimal solution would protect one targets way, targets protected
probability 1 expected utility function attacker 0. defender
strategy calculated patroller sequentially discussed above, solution would
protect target probability 0.5 players, making attackers expected
utility 0.25%U . words, reach suboptimal solution, wasting resources
patrollers end protecting target probability 0.25. case,
already see 0.25 probability target unprotected clearly
optimal solution existed protected targets probability 1. Thus, even
two patrollers solution leads potentially significant loss expected utility;
therefore, solution clearly appears inadequate purposes.
Given discussion, would appear fast approximation may lead
significant losses solution quality may efficient enough. Fortunately current
application domains, current deployment CASS protecting ferries (e.g.,
Staten Island Ferry New York), number defender resources limited.
lack resources main reason optimization using security games becomes critical.
result, current approach CASS adequate current domains ferry
protection. research scale-up issue future work.

4. Equilibrium Refinement
game often multiple equilibria. Since game zero-sum, equilibria achieve
objective value. However, attacker deviates best response,
equilibrium strategies defender may provide better results others.
Consider following example game. two targets moving [t1 , t2 ] (no
discretization): one moves d3 d2 moves d1 d2 (See
Figure 6(a)). Suppose d3 d2 = d2 d1 = = 0.5d. one patroller
available protection coefficient C1 = 1. targets utility functions decrease
10 1 [t1 , t2 ] (See Figure 6(b)). one equilibrium, f3,2,1 = f1,2,1 = 0.5, i.e.,
patroller randomly chooses one target follows way. another equilibrium,
f3,3,1 = f1,1,1 = 0.5, i.e., patroller either stays d1 d3 . either equilibrium,
attackers best response attack t1 , maximum expected utility 5.
However, attacker physically constrained (e.g., due launch point locations)
attack earlier t0 t0 > 11 (where 11 intersection time point
11 = (t1 + t2 )/2), defender strategies choose attack either
targets t0 . attackers expected utility Uq (t0 )/2 first equilibrium
50% probability patroller following target. However second
equilibrium, assured succeed get utility Uq (t0 ) distance
chosen target d1 (or d3 ) larger t0 , i.e., chosen target unprotected
601

fiFang, Jiang, & Tambe

t0 . case, defender strategy first equilibrium preferable one
second; indeed, first defender strategy dominates second one, mean
first equally good better second matter strategy attacker
chooses. provide formal definition dominance Section 4.1.








10




1
















(a) Two targets moves schedules S1
S2 .







(b) Utility function
targets decreasing linearly
time.

Figure 6: example show one equilibrium outperforms another attacker
constrained attack [t0 , t2 ] t0 > 11 .
goal improve defender strategy robust constrained
attackers keeping defenders expected utility unconstrained attackers
same. task selecting one multiple equilibria game instance
equilibrium refinement problem, received extensive study game theory
(van Damme, 1987; Fudenberg & Tirole, 1991; Miltersen & Srensen, 2007). finite
security games, An, Tambe, Ordonez, Shieh, Kiekintveld (2011) proposed techniques
provide refinement Stackelberg equilibrium. However little prior
research computation equilibrium refinements continuous games.
section, introduce two equilibrium refinement approaches: route-adjust
(Section 4.1) flow-adjust (Section 4.2). approaches applied improve
feasible defender strategy applied optimal defender strategy
existing equilibrium, get new equilibria robust optimal defender
strategies.
expository simplicity, still use single-resource case example,
methods applicable multiple-resources case. results shown evaluation
section experimentally illustrates two refinement methods significantly improve
performance.
4.1 Route Adjust
Given f defender strategy one equilibrium game, find defender
strategy f 0 attacker strategy (q, t), defenders expected utility
f 0 equal higher one f , one f 0 strictly higher
one f least one specific attacker strategy, say f 0 dominates f .
Intuitively, defender choose f 0 instead f f 0 least good f
602

fiProtecting Moving Targets Multiple Mobile Resources

attacker strategy achieve better performance attacker strategies.
equilibrium strategy f 0 robust unknown deviations attacker side.
give formal definition dominance follows.
Definition 7. Defender strategy f dominates f 0 q, t, DefEUf (Fq , t) DefEUf 0 (Fq , t),
q, t, DefEUf (Fq , t) > DefEUf 0 (Fq , t); equivalently zero-sum game, q, t,
AttEUf (Fq , t) AttEUf 0 (Fq , t), q, t, AttEUf (Fq , t) < AttEUf 0 (Fq , t).
Corollary 2. Defender strategy f dominates f 0 q, t, (Fq , t) 0 (Fq , t) q, t,
(Fq , t) > 0 (Fq , t).
Definition 7 simply restates commonly used weak dominance definition game
theory specific game. Corollary 2 follows Equation (1).
section, introduce route-adjust approach gives procedure
finding defender strategy f 1 dominates given defender strategy f 0 . Route-adjust
provides final routes using steps: (i) decompose flow distribution f 0 component
routes; (ii) route, greedily find route provides better protection targets;
(iii) combine resulting routes new flow distribution, f 1 , dominates f 0
f 1 different f0 . detailed process listed Algorithm 2. illustrate
approach using simple dominated strategy shown Figure 3.
accomplish step (i), decompose flow distribution iteratively finding route
contains edge minimum probability. shown Figure 7, first randomly
choose route contains edge E1,2,2 , f (1, 2, 2) = 0.4 minimum among flow
variables. choose R2 = (d1 , d1 , d2 ), set p(R2 ) = f (1, 2, 2) = 0.4.
edge route R2 subtract 0.4 original flow, resulting residual flow.
continue extract routes residual flow route left. Denote Z
number non-zero edges flow distribution graph, Z decreased least
1 iteration. algorithm terminate Z steps Z
routes found. result step (i) sparse description defender mixed strategy
full representation. discuss Section 6, decomposition constitutes one
method executing compact strategy.
step (ii), adjust routes greedily. end, first introduce
r coefficient
dominance relation edges routes, using intersection points qk
r
matrix Aqk (i, j) defined Section 3.3.
Definition 8. Edge Ei,j,k dominates edge Ei0 ,j 0 ,k [tk , tk+1 ] Arqk (i, j) Arqk (i0 , j 0 ),
q = 1..L, r = 0..Mqk , q, r Arqk (i, j) > Arqk (i0 , j 0 ).
dominance relation edges based comparison protection provided
targets sub-interval. following dominance relation routes, denote
edge Eru (k),ru (k+1),k E(u, k) simplify notation, .
Definition 9. Route Ru = (dru (1) , . . . , dru (M ) ) dominates Ru0 = (dru0 (1) , . . . , dru0 (M ) )
k = 1 . . . 1, E(u, k) = E(u0 , k) E(u, k) dominates E(u0 , k) k E(u, k)
dominates E(u0 , k).
Route Ru dominates Ru0 edge Ru either dominates
corresponding edge Ru0 least one edge Ru dominates corresponding edge
Ru0 .
603

fiFang, Jiang, & Tambe

Algorithm 2: Route-Adjust
Input: mixed defender strategy f
Output: updated mixed defender strategy f 0
(i) Decompose f multiple routes iteratively finding route contains
edge minimum probability:
(a) Initialize remaining flow distribution f = f route set = .
Initialize probability distribution routes p(Ru ) = 0, u.
(b) max f(i, j, k) > 0
i. Set (i0 , j0 , k0 ) = arg mini,j,k:f(i,j,k)>0 f(i, j, k).
ii. Set fmin = f(i0 , j0 , k0 ).
iii. Find arbitrary route Ru0 ru0 (k0 1) = i0 ru0 (k0 ) =
j0 (i.e., edge Ei0 ,j0 ,k0 route) f(ru0 (k), ru0 (k+1), k) > 0,
k (i.e., edges route non-zero remaining flow).
iv. Add Ru0 set p(Ru0 ) = fmin .
v. Set f(i, j, k) = f(i, j, k) fmin ru0 (k 1) = ru0 (k) = j.
end
(ii) Adjust route greedily get new set routes 0 corresponding new probability distribution p0 :
(a) Initialize new set 0 = new probability distribution p0 (Ru ) = 0,
u.
(b) 6=
i. Pick route Ru S.
ii. Adjust Ru get new route Ru0 : given Ru specified
k , set ru0 (k) = ru (k) k 6= k . Set ru0 (k ) = i0 that: 1)
E(u1 , k 1) E(u1 , k ) meet speed constraint; 2) Ru0 dominates Ru choice i0 ; 3) Ru0 dominated route
choice i0 . i0 exists, set ru0 (k ) = ru (k )
iii. Add Ru 0 set p0 (Ru0 ) = p(Ru ).
iv. Remove Ru S.
end
(iii) Reconstruct new compact representation f 0 0 p0 according
Equation 4.

604

fiProtecting Moving Targets Multiple Mobile Resources

, ,
p R 0.4

, ,
p R 0.2






































, ,
p R 0.4
















Figure 7: Step (i): decomposition. Every time route containing minimal flow variable
subtracted residual graph left decomposition. original flow distribution thus decomposed three routes R2 , R1 , R3
probability 0.4, 0.2 0.4 respectively.

Denote original route adjusted Ru new route Ru0 . greedy
way improve route replace one node route. want replace
node time tk , ru0 (k) = ru (k), k 6= k dru (k ) original
route replaced dru0 (k ) . patrollers route changes [tk 1 , tk +1 ]. Thus,
edges E(u, k 1) E(u, k ) original route replaced E(u0 , k 1)
E(u0 , k ) new route.
trying find new route Ru0 dominates original route provide equal
protection targets. selection ru0 (k ) needs meet requirements
specified Algorithm 2. first one describes speed limit constraint. second
one actually requires changed edges E(u0 , k 1) E(u0 , k ) either equal
dominate corresponding edges original route (and dominance relation exist
least one edge). third requirement attains local maximum. new node
exist specified k , return original route Ru .
iterate process new route get final route denoted Ru0
several iterations state convergence reached. state convergence
reached, resulting route Ru0 keeps unchanged matter k chosen
next iteration.
example Figure 7, assume targets moving schedule d1 d1 d2 ,
d3 d2 = d2 d1 = d, = 0.1d utility function constant. adjust route
one iteration changing patrollers position time t3 , i.e., ru (3). t3
last discretized time point, edge E(u, 2) may changed. R1 = (d1 , d1 , d1 ),
enumerate possible patrollers positions time t3 choose one according
three constraints mentioned above. case, candidates d1 d2 ,
corresponding new routes R1 (unchanged) R2 = (d1 , d1 , d2 ) respectively. Note
edge Ed1 ,d2 ,2 dominates Ed1 ,d1 ,2 former one protects target way
[t2 , t3 ] thus R2 dominates R1 . d2 chosen patrollers position t3 R2
605

fiFang, Jiang, & Tambe

chosen new route. adjustment routes non-zero probability
decomposition shown Table 2.
Ru
R1 = (d1 , d1 , d1 )
R2 = (d1 , d1 , d2 )
R3 = (d2 , d1 , d1 )

p(Ru ) decomposition
0.2
0.4
0.4

Adjusted Routes
(d1 , d1 , d2 ) = R2
(d1 , d1 , d2 ) = R2
(d2 , d1 , d2 ) = R4

Table 2: Step (ii): Adjust route greedily.

R1
R2
R3
R4

Ru
= (d1 , d1 , d1 )
= (d1 , d1 , d2 )
= (d2 , d1 , d1 )
= (d2 , d1 , d2 )

p0 (Ru ) adjustment
0
0.6
0
0.4

Composed Flow Distribution









Table 3: Step (iii): compose new compact representation.
new routes get step (ii) original routes dominate
original routes. is, whenever route Ru chosen according defender mixed
strategy resulting step (i), always equally good better choose corresponding new route Ru0 instead, Ru0 provides equal protection
targets Ru . Suppose H possible routes defender strategy step
(i), denoted R1 , ..., RH . adjusting routes, get new defender strategy
(p0 (R1 ), p0 (R2 ), ..., p0 (RH )) full representation (See Table 3). routes taken
higher probability (e.g. p0 (R2 ) = 0.2 + 0.4 = 0.6) lower probability
(e.g. p0 (R3 ) = 0) compared original strategy. step (iii), reconstruct new
compact representation according Equation 4. accomplished via process
inverse decomposition exactly map strategy full
representation compact representation. example above, result shown
Table 3.
Theorem 3. steps (i)(iii), get new defender strategy f 1 dominates
original one f 0 f 1 different f 0 .
Proof: continue use notation decomposition step (i) yields
routes R1 , ..., RH . flow distribution variable original distribution f 0 (i, j, k),
decomposed H sub-flows {fu0 (i, j, k)} according route decomposition. fu0 (i, j, k) =
p(Ru ) = ru (k), j = ru (k + 1) fu0 (i, j, k) = 0 otherwise. Thus following
equation.
XH
f 0 (i, j, k) =
f 0 (i, j, k)
(26)
u=1 u
X
=
fu0 (i, j, k)
(27)
u:ru (k)=i,ru (k+1)=j

adjust route separately, non-zero sub-flow fu0 (i, j, k) edge E(u, k) moved
edge E(u0 , k) route Ru adjusted Ru0 . Reconstructing flow distribution f 1
606

fiProtecting Moving Targets Multiple Mobile Resources

regarded adding sub-flows adjustment together edge.
means, f 1 composed set sub-flows adjustment, denoted {fu1 (i0 , j 0 , k)}.
subscript u represents index original route indicate moved
edge E(u, k). fu1 (i0 , j 0 , k) = fu0 (ru (k), ru (k + 1), k), i0 = Ru0 (k) j 0 = Ru0 (k + 1);
otherwise fu1 (i0 , j 0 , k) = 0. Similarly Equation 27, following equation f 1 .
f 1 (i0 , j 0 , k) =
=

XH

f 1 (i0 , j 0 , k)
u=1 u

X
u0 :ru0 (k)=i0 ,ru0 (k+1)=j 0

(28)
fu1 (i0 , j 0 , k)

(29)

Based adjustment made, Ru0 dominates Ru thus E(u0 , k)
dominates E(u, k). edge E(u, k) protects target Fq time t,
corresponding edge E(u0 , k) adjustment protects target Fq time t.
Recall Section 3.3 (Fq , t) sum f (i, j, k) whose corresponding edge
Ei,j,k protect target Fq time t. denote 0 (Fq , t) 1 (Fq , t) probabilities protection corresponding f 0 f 1 respectively. According Equation 27,
0 (Fq , t) viewed sum non-zero sub-flows fu0 (i, j, k) corresponding E(u, k) protects target Fq time t. fu0 (i, j, k) term summation
calculate 0 (Fq , t), means E(u, k) protects Fq thus corresponding E(u0 , k)
protects Fq t, corresponding sub-flow fu1 (ru0 (k), ru0 (k + 1), k) f 1 term
summation calculate 1 (Fq , t). leads conclusion 0 (Fq , t) 1 (Fq , t). Note
q, t, 0 (Fq , t) = 1 (Fq , t), routes kept unchanged step (ii) otherwise
contradicts fact new route dominates original route. According
Corollary 2, f 1 dominates f 0 different f 0 .
example Figure 7, f 0 (1, 1, 2) decomposed two non-zero terms f10 (1, 1, 2) =
0.2 f30 (1, 1, 2) = 0.4 along routes R1 R3 (See Figure 7). adjustment,
get corresponding subflows f11 (1, 2, 2) = 0.2, f31 (1, 2, 2) = 0.4. Recall targets
schedule d1 d1 d2 . flow distribution adjustment (See Table 5) gives
protection target [t2 , t3 ]. Since flow equal t1 t2 (and therefore
protection same), overall new strategy dominates old strategy.
Therefore, apply route-adjust optimal defender strategy calculated CASS
get robust equilibrium. step (iii) allows us prove Theorem 3, notice
end step (ii), probability distribution set routes
sample actual patrol routes. two defender resources, generalized
version Definition 8 used define dominance relation edge tuple
(Ei1 ,j1 ,k , ..., EiW ,jW ,k ) coefficient matrix multiple patrollers Arqk (i1 , j1 , ..., iW , jW ).
ways adjust route. Instead adjusting one node
route, adjust consecutive nodes time, example, adjust
ru0 (k ) ru0 (k + 1) checking edges E(u0 , k 1), E(u0 , k ) E(u0 , k + 1). However,
need tradeoff performance efficiency algorithm. tradeoff
discussed Section 7.
4.2 Flow Adjust
Whereas route-adjust tries select equilibrium robust attackers playing
suboptimal strategies, second approach, flow-adjust, attempts select new equilibri607

fiFang, Jiang, & Tambe

um robust rational attackers constrained attack time interval [tk , tk+1 ]. discuss below, flow-adjust focuses weaker form dominance,
implies larger set strategies dominated (and thus could potentially
eliminated) compared standard notion dominance used route-adjust; however flow-adjust guarantee elimination dominated strategies.
denote DefEUkf defender expected utility attacker constrained attack
time interval [tk , tk+1 ] attacker provides best response given defender strategy f . Formally, DefEUkf = minq{1...L},t[tk ,tk+1 ] {DefEUf (Fq , t)}. give
following definition local dominance.
Definition 10. Defender strategy f locally dominates f 0 DefEUkf DefEUkf 0 , k.2
Corollary 3. Defender strategy f locally dominates f 0
min
q{1...L},t[tk ,tk+1 ]

{DefEUf (Fq , t)}

min
q{1...L},t[tk ,tk+1 ]

{DefEUf 0 (Fq , t)}, k,

equivalently zero-sum game,
max
q{1...L},t[tk ,tk+1 ]

{AttEUf (Fq , t)}

max
q{1...L},t[tk ,tk+1 ]

{AttEUf 0 (Fq , t)}, k.

Corollary 3 follows fact attacker plays best response given
defender strategy, means f locally dominates f 0 maximum attacker
expected utilities time interval [tk , tk+1 ] given f greater f 0 .
Compared Definition 7, gives standard condition dominance, local
dominance weaker condition; is, f dominates f 0 f locally dominates f 0 ,
however converse necessarily true. Intuitively, whereas Definition 7 attacker
play (possibly suboptimal) strategy, attackers possible deviations
best response restricted. result, set locally dominated strategies
includes set dominated strategies. Definition 10, f locally dominates f 0 ,
attacker rational (i.e., still playing best response) constrained attack
time interval [tk , tk+1 ], f preferable f 0 defender. corollary
even rational attacker constrained attack union
intervals, f still preferable f 0 f locally dominates f 0 . One intuition local
dominance concept following: suppose suspect attacker restricted
(unknown) subset time, due logistical constraints. logistical constraints
would likely make restricted time subset contiguous union small number
contiguous sets. Since sets well-approximated unions intervals [tk , tk + 1],
local dominance serve approximate notion dominance respect
attackers.
Flow-adjust looks defender strategy f 1 locally dominates original defender
strategy f 0 . achieve this, simply adjust flow distribution variables f (i, j, k)
keeping marginal probabilities p(i, k) same. Figure 8 shows example game
two discretized intervals [t1 , t2 ] [t2 , t3 ] (only first interval shown). Suppose
maximal attacker expected utility 5U0 equilibrium attained second
2. dont require exists least one k DefEUkf > DefEUkf 0 .

608

fiProtecting Moving Targets Multiple Mobile Resources

interval [t2 , t3 ]. attackers utility success constant U0 first interval
[t1 , t2 ], defender strategy [t1 , t2 ] could arbitrarily chosen attackers
expected utility [t1 , t2 ] worst case smaller attackers best response
[t2 , t3 ]. However, attacker constrained attack [t1 , t2 ] only, defender strategy
first interval make difference. example, one target moving
d1 d2 [t1 , t2 ]. schedule ferry shown dark lines parallel
lines L11 L21 respect protection radius = 0.2(d2 d1 ) shown dashed
lines. marginal distribution probabilities p(i, k) 0.5 protection coefficient
C1 = 1. f 0 , defenders strategy taking edges E1,1,1 E2,2,1 probability
0.5 attackers maximum expected utility U0 , achieved around time
(t1 + t2 )/2 neither two edges E1,1,1 E2,2,1 within targets protection
range. adjust flows edge E1,2,1 E2,1,1 , shown Figure 8(b), attackers
maximum expected utility [t1 , t2 ] reduced 0.5U0 edge E1,2,1 within targets
protection range way. rational attacker constrained attack
[t1 , t2 ] get lower expected utility given defender strategy f 1 given f 0 , thus
equilibrium f 1 robust kind deviation attacker side.




















(a) f 0 : patroller taking
edges E1,1,1 E2,2,1
probability 0.5.










(b) f 1 : patroller taking
edges E1,2,1 E2,1,1
probability 0.5.

Figure 8: example flow adjust. rational attacker constrained attack
[t1 , t2 ] choose attack around time (t1 + t2 )/2 get utility U0 given f 0
attack around t1 t2 get utility 0.5U0 given f 1 .

flow-adjust, construct 1 new linear programs, one time interval
[tk , tk +1 ], k = 1 . . . 1 find new set flow distribution probabilities f (i, j, k )
achieve lowest local maximum [tk , tk +1 ] unchanged p(i, k ) p(i, k + 1).
609

fiFang, Jiang, & Tambe

linear program interval [tk , tk +1 ] shown below.
min v

f (i,j,k )

f (i, j, k ) = 0, |dj di | > vm
n
X

p(i, k + 1) =
f (j, i, k ), {1 . . . n}
j=1

p(i, k ) =

n
X

f (i, j, k ), {1 . . . n}

j=1

v AttEU (Fq , tk ), q {1 . . . L}, k {k , k + 1}
(r+1)

r+
v max{AttEU (Fq , qk
), AttEU (Fq , qk

)}

q {1 . . . L}, r {0 . . . Mqk }
linear program appears similar linear program CASS,
significant differences. Unlike CASS, marginal probabilities p(i, k ) known
constants provided input mentioned above, separate program
[tk , tk +1 ]. Thus, get f (i, j, k ) local maximum [tk , tk +1 ]
minimized. Denote minimum vk1 . original flow distribution f 0 , get
AttEUf 0 (Fq , t) denote original local maximum value [tk , tk +1 ] vk0 .
subset {f 0 (i, j, k )} original flow distribution f 0 feasible solution linear
program above, vk1 vk0 , noting equality happens interval
attackers best response chosen.
Note change made f (i, j, k) interval [tk , tk +1 ] affect
performance f intervals marginal probabilities p(i, k) kept same,
i.e., changing f (i, j, k ) based linear program independent change
f (i, j, k), k 6= k . solve 1 linear programs independently.
calculating f (i, j, k ) k = 1..M 1, get new defender strategy f 1
combining solutions f (i, j, k ) different linear programs together. vk1 vk0 ,

max
q{1...L},t[tk ,tk +1 ]

AttEUf 0 (Fq , t)

max
q{1...L},t[tk ,tk +1 ]

AttEUf 1 (Fq , t)

k = 1..M 1, i.e., f 1 locally dominates f 0 .
hand, restricted strategies p(i, k),
may exist another strategy f 2 different set p(i, k) locally dominates f 1 .
Finding locally dominating strategies different p(i, k) original topic
future research.
Although two refinement approaches provide necessarily lead nondominated strategy corresponding dominance definition, two approaches
guaranteed find robust (or least indifferent) equilibrium faced
constrained attackers compared original equilibrium obtain CASS. Clearly,
two refinement approaches exhaust space refinement approaches
refinement approaches possible may lead equilibria better
610

fiProtecting Moving Targets Multiple Mobile Resources

(e.g. dominate) one found CASS. However, likely different defender
strategies resulting different equilibrium refinements comparable
terms dominance, i.e., constrained attackers, one equilibrium might turn
better constrained attackers, another equilibrium might better.
computational costs may differ well. Thus, understanding space refinement
approaches terms computational cost output quality, determining
approach adopted circumstances important challenge future
work.

5. Extension Two-Dimensional Space
DASS CASS presented Section 3 based assumption
targets patrollers move along straight line. However, complex model
needed practical domains. example, Figure 9 shows part route map
Washington State Ferries, several ferry trajectories. number patroller
boats tasked protect ferries area, necessarily optimal simply
assign ferry trajectory patroller boat calculate patrolling strategies
separately according CASS described Section 3. ferry trajectories close
other, patrolling strategy take account ferries area
much efficient, e.g., patroller protect ferry moving Seattle Bremerton
first, change direction halfway protect another ferry moving Bainbridge
Island back Seattle.

Figure 9: Part route map Washington State Ferries
section, extend previous model complex case, targets patrollers move two-dimensional space provide corresponding linearprogram-based solution. use single defender resource example, generalize multiple defenders end section.
5.1 Defender Strategy 2-D
one-dimensional case, need discretize time space defender
calculate defenders optimal strategy. time interval discretized set
time points = {tk }. Let G = (V, E) represents graph set vertices V
corresponds locations patrollers may at, discretized time points
, E set feasible edges patrollers take. edge e E satisfies
611

fiFang, Jiang, & Tambe

maximum speed limit patroller possibly practical constraints (e.g., small
island may block edges).
5.2 DASS 2-D
attack occurs discretized time points, linear program DASS
described Section 3 applied two-dimensional settings distance
Constraint 9 substituted Euclidean distance 2-D space nodes Vi Vj .
min

v

(30)

f (i,j,k),p(i,k)

f (i, j, k) [0, 1], i, j, k

(31)

f (i, j, k) = 0, i, j, k ||Vj Vi || > vm

(32)

p(i, k) =

N
X

f (j, i, k 1), i, k > 1

(33)

f (i, j, k), i, k <

(34)

j=1

p(i, k) =

N
X
j=1

N
X

p(i, k) = 1, k

(35)

i=1

v AttEU(Fq , tk ), q, k

(36)

Note f (i, j, k) represents probability patroller moving node Vi
Vj [tk , tk+1 ]. Recall Figure 2.1, patroller protects targets within protective
circle radius . However, one-dimensional space, care straight
line AB, used q (t) = [max{Sq (t) , d1 }, min{Sq (t) + , dN }] protection
range target Fq time t, essence line segment. contrast, whole
circle needs considered protection range two-dimensional space
extended protection range written q (t) = {V = (x, y) : ||V Sq (t)|| }.
change affects value I(i, q, k) thus value AttEU (Fq , tk ) Constraint 36.
5.3 CASS 2-D
attacking time chosen continuous time interval , need
analyze problem similar way Section 3.3. protection radius ,
means patrollers located within circle whose origin Sq (t) radius
protect target Fq . assume target change speed direction
time [tk , tk+1 ], circle move along line 2-D space. track
circle 3-D space x axes indicate position 2-D z axis
time, get oblique cylinder, similar cylinder except top
bottom surfaces displaced (See Figure 10). patroller moves
vertex Vi ( V ) vertex Vj time [tk , tk+1 ], protects target
within surface. 3-D space described above, patrollers movement
represented straight line.
612

fiProtecting Moving Targets Multiple Mobile Resources







V



V









r

Figure 10: illustration calculation intersection points two-dimensional
setting. x axes indicates position 2-D z axis
time. simplify illustration, z axis starts time tk . example,
two intersection points occurring time points ta tb .

Intuitively, two intersection points patrollers route
3-D space surface. proved analytically calculating exact
time intersection points. Assume patroller moving V1 = (x1 , y1 )
V2 = (x2 , y2 ) target moving Sq (tk ) = (x1 , y1 ) Sq (tk+1 ) = (x2 , y2 )
[tk , tk+1 ] (an illustration shown Figure 10). get time intersection points,
solve quadratic equation coordination parameters protection radius
. present detailed calculation Appendix B. root quadratic equation
within interval [tk , tk+1 ], indicates patrollers route intersects
surface time point. two intersection points. find
intersection points, analysis Section 3.3 applies claim
Lemma 1. conclude need consider attackers strategies
r one-dimensional case denote
intersection points. use notation qk
sorted intersection points get following linear program 2-D case.
min

v

(37)

f (i,j,k),p(i,k)

subject constraints(31 . . . 36)
(r+1)

r+
v max{AttEU(Fq , qk
), AttEU(Fq , qk

)}

(38)

k {1 . . . }, q {1 . . . L}, r {0 . . . Mqk }
Algorithm 1 still used add constraints linear program CASS
2-D case. main difference compared CASS 1-D case since Euclidean
distance 2-D used Constraint 32 need use extended definition q (t)
2-D deciding entries coefficient matrix Arqk (i, j).
multiple defender resources, linear program described Section 3.4 applicable extended definition q (t) used calculate AttEU Constraint 19
613

fiFang, Jiang, & Tambe

substituted following constraint:
f (i1 , j1 , . . . , iW , jW , k) = 0, i1 , . . . , iW , j1 , . . . , jW u, kVju Viu k > vm t.

6. Route Sampling
discussed generate optimal defender strategy compact representation; however, defender strategy executed taking complete route.
need sample complete route compact representation. section,
give two methods sampling show corresponding defender strategy full
representation methods applied.
first method convert strategy compact representation Markov
strategy. Markov strategy setting defender strategy patrollers
movement tk tk+1 depends location patroller tk . denote
(i, j, k) conditional probability moving di dj time tk tk+1 given
patroller located di time tk . words (i, j, k) represents chance
taking edge Ei,j,k given patroller already located node (tk , di ). Thus, given
compact defender strategy specified f (i, j, k) p(i, k),
(i, j, k) = f (i, j, k)/p(i, k), p(i, k) > 0.

(39)

(i, j, k) arbitrary number p(i, k) = 0. get sampled route first
determining start patrolling according p(i, 1); tk , randomly choose
go tk tk+1 according conditional probability distribution (i, j, k).
distribution sampling procedure matches given marginal variables
edge Ei,j,k sampled probability p(i, k)(i, j, k) = f (i, j, k). sampling method
actually leads full representation route Ru = (dru (1) , dru (2) , ..., dru (M ) ) sampled
Q 1
probability p(ru (1), 1)
k=1 (ru (k), ru (k + 1), k), product probability
initial distribution probability taking step. method intuitively
straightforward patrol route decided online patrol, i.e.,
position patroller tk+1 decided patroller reaches position tk ,
makes defender strategy unpredictable. downside method
number routes chosen non-zero probability high N .
2-D case, patroller located node Vi time tk . sampling process exactly
(i, j, k) used denote probability moving Vi Vj
[tk , tk+1 ].
second method sampling based decomposition process mentioned
Section 4.1 (step (i)). discussed first sampling method, sampling
essentially restoring full representation compact representation. shown
Table 1, multiple ways assign probabilities different routes decomposition process route-adjust constructively defines one them. make use
information get process, sample route according probability
assigned decomposed route. number routes chosen non-zero probability
N 2 , much less first method thus becomes feasible describe
strategy full representation, providing routes chosen positive probability. Different sampling approaches may necessitated different application
614

fiProtecting Moving Targets Multiple Mobile Resources

requirements. applications might require defender obtain strategy full
representation presented small number pure strategies. However,
applications, strategy decided on-line, potentially hand-held smartphone (Luber, Yin, Fave, Jiang, Tambe, & Sullivan, 2013) may preferred.
Therefore, based needs application, different sampling strategies might
selected.

7. Evaluation
use different settings ferry protection domain compare performance
terms attackers expected utility AttEU(Fq , t). zero-sum game, lower
value AttEU indicates higher value defenders expected utility.
run experiments 1-D 2-D setting. evaluate performance
CASS show sampling results. evaluate improvement two
refinement approaches 1-D. Section 7.1 shows results 1-D setting; Section
7.2 2-D setting.
7.1 Experiments One Dimensional Setting
1-D setting, first evaluate performance solvers show much
performance improved using refinement methods. show sampled
routes example setting evaluate CASS varying number patrollers.
7.1.1 Experimental Settings
used following setting experiments one dimensional case. complex
spatio-temporal game; rather discrete security game previous work.
three ferries moving terminals B total distance AB = 1.
simulation time 30 minutes. schedules ferries shown Figure 11,
x-axis indicates time y-axis distance terminal A. Ferry 1
Ferry 3 moving B Ferry 2 moving B A. maximum speed
patrollers vm = 0.1/min protection radius = 0.1. Experiments
one-dimensional case using 2 patrollers (where C1 = 0.8, C2 = 1.0), except
Section 7.1.5 report experiments different numbers patrollers.

distance

1

0.5

0
0

Ferry1
Ferry2
Ferry3

10

time

20

30

Figure 11: Schedules ferries

615

fiFang, Jiang, & Tambe

7.1.2 Performance Solvers
compare strategies calculated CASS DASS baseline strategy.
baseline strategy, two patrollers choose ferry probability 1/3 (uniformly
random) move alongside offer full protection, leaving two unprotected
(strategy observed practice). First wished stress-test CASS using complex
utility functions realistic case follows. Therefore, tested 4 different
discretization levels (details discretization levels included Table 4) random
utilities, discretization level, created 20 problem instances. problem
instances different across levels. ferry protection domain, utility function
ferry usually depends ferrys position, instance utilities uniformly
randomly chosen [0, 10] discretized distance points; example shown
Figure 12(a). chosen discretization levels ensured Uq (t) linear
time interval [tk , tk+1 ] target Fq . Figure 12(a), x-axis indicates distance
terminal A, y-axis indicates utility successful attack ferry located
distance d. Figure 12(b), x-axis plots four discretization levels y-axis plots
average attacker expected utility plays best response 20 instances baseline,
DASS CASS. CASS shown outperform DASS baseline differences
statistically significant (p < 0.01). Note different sets instances generated
different discretization levels, cannot compare results across levels directly.
However, helpful better understanding models. figure, find
solution quality DASS varies lot sometimes worse naive strategy
(e.g., level 1). DASS calculates optimal solution considers
attacks discretized time points. Figure 12(b), solution quality measured
AttEU , calculated maximum continuous attacker strategy set.
gap optimal objective function DASS actual AttEU given
optimal solution DASS may vary different strategies different discretization levels.
Another interesting observation average solution quality CASS almost
discretization levels. Despite difference instance sets, result implies
improvement finer discretization may limited CASS.
Level
1
2
3
4

(minutes)
10
5
2.5
2


4
7
13
16


0.5
0.25
0.125
0.1

N
3
5
9
11

Table 4: Details discretization levels. experiments mentioned section,
distance space evenly discretized, parameterized = di+1 di .

Next turn realistic utility function ferry domain, U -shape
inverse U -shape. Figure 13(a) shows sample utility curve attacker gains
higher utility closer shore. fix utility shore 10, vary utility
middle (denoted Umid ), value floor U -shape top
inverse U -shape evaluate strategies. Figure 13(b), Umid shown x-axis
616

fiProtecting Moving Targets Multiple Mobile Resources

8

Ave(AttEUm)

U utility

10

5

0
0

0.5
distance

1

(a) Randomized attacker utility function

NAIVE
DASS
CASS

6
4
2
0

Level1 Level2 Level3 Level4

(b) Average solution quality different
strategies

Figure 12: Performance different randomized utility function settings. utility
function set experiments function distance Terminal A.
utility function piece-wise linear value discretized distance
points di chosen randomly [0,10].

15
Sup(AttEU)

U utility

10
8
6
4
0

0.5
distance

5
0
0

1

(a) Realistic attacker utility function
Umid = 5

10

NAIVE
DASS
CASS

5

10
Umid

15

20

(b) Solution quality different strategies

Figure 13: Performance different realistic utility function settings. utility function U-shape inverse U-shape. utility around distance 0.5 denoted
Umid . compare defender strategy given DASS CASS
baseline Umid changing 1 20.

compare performance strategies terms attackers expected utility
plays best response y-axis. conclude 1) strategy calculated CASS
outperforms baseline DASS; 2) DASS may actually achieve worse results
baseline.
Among different experiment settings discretization utility function,
choose one instance provide detailed analysis it. refer instance
example setting following section. example setting, discretization
level 4 used utility curve shown Figure 13(a), parameters involved
described Section 7.1.1. Figure 14 compares attacker expected utility function
DASS CASS used respectively. x-axis indicates time t, y-axis
indicates attackers expected utility attacks Ferry 1 time t. strategy calculated DASS, worst performance discretized time points 3.50 (AttEU(F1 , 20)),
however, supremum AttEU(F1 , t), [0, 30] high 4.99 (AttEU(F1 , 4+ )),
617

fiFang, Jiang, & Tambe

5

AttEU

4
3
2
1
0

DASS
CASS
10
20
time

30

Figure 14: attackers expected utility function given defender strategy calculated
DASS vs CASS example setting. expected utilities discretized
time points indicated squares CASS dots DASS. maximum
AttEU CASS 3.82, 30%less maximum AttEU
DASS, 4.99.

experimentally shows taking consideration attacks discretized time points necessary. strategy calculated CASS, supremum
AttEU(F1 , t) reduced 3.82.
7.1.3 Improvement Using Refinement Methods
compare refinement approaches described Section 4 analyze tradeoff
performance improvement runtime. Three approaches considered comparison: route-adjust, flow-adjust variation route-adjust, denoted route-adjust2.
step (ii) route-adjust, replace every node route one-by-one sequence.3
step (ii) route-adjust2, replace every consecutive pair nodes route sequence.
first show results example setting. Figure 15(a), compare AttEU(Fq , t)
function defender strategy given CASS one route-adjust Ferry
1. shows attack aiming target time, defender strategy
route-adjust refinement equally good better one original equilibrium,
thus defender performs equally better matter attacker constrained
time, i.e., defender strategy route-adjust dominates original strategy. Figure
15(b) comparison AttEU function defender strategy route-adjust
one route-adjust2 Ferry 1. one route-adjust2 dominate
one route-adjust overall former appears perform better latter
frequently larger amounts. use average value AttEU function
metric performance, show route-adjust2 better route-adjust
example setting later Table 5. Figure 15(c) shows comparison AttEU
function defender strategy given CASS defender strategy
3. supplementary experiments, tested route-adjust iterations, e.g., repeating
process replacing every node sequence five times. extra benefit insignificant
runtime increases proportionally number iterations. light this, choose replace
node experiments reported article.

618

fi4

4

3

3

AttEU

AttEU

Protecting Moving Targets Multiple Mobile Resources

2

CASS
RouteAdjust

1
0

10

time

20

2
1
0

30

(a) AttEU function Ferry 1
route-adjust (one node time)

RouteAdjust
RouteAdjust2
10

time

20

30

(b) AttEU function Ferry 1
route-adjust2 (two nodes time)

AttEU

4
3
2
1
0

CASS
FlowAdjust
10

time

20

30

(c) Performance flow-adjust

Figure 15: Performance equilibrium refinement approaches.
flow-adjust Ferry 1. strategy given CASS dominated one
flow-adjust Definition 7, investigate maximum AttEU time
interval [tk , tk+1 ], shown Table 6, find defender strategy flow-adjust
locally dominates original strategy.
list worst case performance average performance AttEU function
ferries example setting four defender strategies (CASS, route-adjust, routeadjust2, flow-adjust) Table 5, conclude 1) worst case performance
strategies flow-adjust same, means defender achieves exactly
expected utility towards unconstrained rational attacker; 2) average performance
flow-adjust slightly better CASS, outperformed route-adjust
route-adjust2, takes much less time run compared two; 3)
example setting, adjust two consecutive nodes time, performance better
adjusting one node time, difference significant much
expensive terms run-time.
Strategies
CASS
Route-Adjust
Route-Adjust2
Flow-Adjust

Worst Case Performance
3.82
3.82
3.82
3.82

Average Performance
3.40
2.88
2.76
3.34

Runtime (minutes)
8.96
32.31
0.50

Table 5: Comparison different refinement approaches terms average performance
runtime. runtime refinement process calculated.

619

fiFang, Jiang, & Tambe

time interval [tk , tk+1 ]
[2, 4]
[4, 6]
[6, 8]
[8, 10]
[10, 12]
[12, 14]
[14, 16]

maximum

3.7587
3.8182
3.8153
3.8137
3.8052
3.8050
3.7800

maximum

3.6675
3.8182
3.6164
3.6316
3.6316
3.5664
3.2100

time interval [tk , tk+1 ]
[16, 18]
[18, 20]
[20, 22]
[22, 24]
[24, 26]
[26, 28]
[28, 30]

maximum

3.8111
3.8182
3.8182
3.8182
3.8182
3.8182
3.8182

maximum

3.7291
3.8182
3.8182
3.8182
3.8182
3.8182
3.8182

Table 6: maximum attackers expected utility time interval decreases
flow-adjust used.

Figure 16(a) Figure 16(b) shows maximum average improvement
route-adjust, route-adjust2 flow-adjust, averaged 20 instances Level 4
randomized utilities used Figure 12(b); Figure 16(c) shows
average runtime. maximum improvement largest difference AttEU
function given defender strategy calculated CASS one refinement.
average improvement average difference two functions. standard
deviations instances shown error bars. Figure 16 confirms refinement approaches improve defender strategy calculated CASS terms
maximum performance average performance thus provide better defender strategies given possible constrained attackers. Route-adjust2 achieves improvement,
route-adjust, flow-adjust least. Flow-adjust achieves much less improvement
compared two approaches. One explanation constraints
strong require marginal probabilities unchanged likely
little changes made original defender strategy. difference routeadjust2 route-adjust significant. terms run-time, flow-adjust least
expensive, route-adjust second route-adjust2 most. Route-adjust2 significantly expensive compared two. conclude route-adjust
better choice considering tradeoff improvement runtime.
7.1.4 Sampled Routes
first convert defender strategy example setting Markov strategy
sample 1000 pair patrol routes. defender strategy used one
route-adjust. sample, pair routes chosen step step two patrol
boats according joint conditional probability distribution {(i1, j1, i2, j2, k)}.
routes two patrol routes chosen simultaneously coordinating
other. cannot show pair separately 1000 samples. Instead, Figure
17(a) shows frequency taken 1000 samples edge. x-axis
indicates time y-axis distance terminal A. width edge
indicates frequency chosen least one patroller. Although Figure 17(a)
precisely depict samples, provides rough view routes taken
patrol boats.
620

fiProtecting Moving Targets Multiple Mobile Resources

0.6

routeadjust
routeadjust2
flowadjust

2

Ave Improvement

Max Improvement

2.5

1.5
1
0.5

routeadjust
routeadjust2
flowadjust

0.4
0.2

0

0

Runtime (minutes)

(a) Average maximal improvement

(b) Average average improvement
routeadjust
routeadjust2
flowadjust

40
30
20
10
0

(c) Average runtime

Figure 16: Comparison refinement approaches.

Figure 17(b) shows pair routes highest probability use
decomposition method sampling. solid lines show patrol boats routes
dashed lines show ferries schedules. get 3958 different pair patrol routes total
decomposition process shown pair routes chosen probability 1.57%.

1

distance

distance

1
0.8
0.6
0.4
0.2
0
0

5

10

15

20

25

0.8
0.6

0.2
0
0

30

time

Patrol Boat 1
Patrol Boat 2

0.4

5

10

15

20

25

30

time

(a)

(b)

Figure 17: Results sampling example setting: (a) Frequency edge
chosen first sampling method based Markov strategy used. (b)
Decomposed routes highest probability superimposed ferry schedules
second sampling method based decomposition used.

621

fiAttacker EU

6
4

log(Runtime (seconds))

Fang, Jiang, & Tambe

1 patroller
2 patrollers
3 patrollers
4 patrollers

2
0

1
0
1

3

Attacker EU

4

(b) Runtime Level 1
log(Runtime (seconds))

(a) Solution quality Level 1
5

1 patroller
2 patrollers
3 patrollers
4 patrollers

2

1 patroller
2 patrollers
3 patrollers

3
2
1
0

(c) Solution quality Level 2

3
2

1 patroller
2 patrollers
3 patrollers

1
0
1
2

(d) Runtime Level 2

Figure 18: Performance varying number patrollers.

7.1.5 Number Patrollers
Figure 18(a) shows improvement performance CASS increasing number
patrollers discretization Level 1. x-axis shows number patrollers
y-axis indicates average attackers maximal expected utility, i.e., expected reward
plays best response. results averaged 20 random utility settings
discretization Level 1. fewer patrollers, performance defender varies lot
depending randomized utility function (as indicated standard deviation shown
error bar). variance gets much smaller patrollers, means
defender sufficient resources different instances. Figure 18(b) shows run-time
CASS. y-axis indicates average natural logarithm runtime. surprisingly,
run-time increases number patrollers increases.
Figure 18(c) 18(d) show average performance run-time CASS discretization Level 2, using set utility settings used Level 1. results
1 3 patrollers shown. program runs memory 4 patrollers
N 8 = 2734375 flow distribution variables least N 4 = 8757 constraints. Note
average solution quality Level 2 better result Level 1 (e.g.,
average attacker EU 1 patroller 4.81 Level 1 4.13 Level 2), indicates
higher level granularity improve solution quality. However, granularity clearly
affect ability scale-up; means need consider tradeoff
solution quality memory used one way combat scaling-up problem
reduce level granularity. Nonetheless, number patrollers encountered
real-world scenarios New York order 3 4, CASS capable
least key real-world scenarios.
622

fiProtecting Moving Targets Multiple Mobile Resources

7.1.6 Approximation Approach Multiple Defender Resources
tested first approximation approach multiple defender resources described
Section 3.4 example setting. used fmincon function interior-point
method MATLAB minimize non-linear objective function (Equation 25). Table
7 lists different run-time value objective function achieved given different
iteration number (denoted MaxIter ). function ensured provide feasible
solution iteration number large enough, shown first two rows.
compared result LP formulation DASS, implemented
MATLAB using linprog function. DASS solved within 8.032 seconds provides
optimal solution AttEUm = 3.5, approximation approach outperformed
run-time efficiency solution quality. approach fails provide feasible solution
efficiently even sufficient time given (more 400 times run-time
LP formulation), maximum attacker expected utility 18% larger optimal
solution. mainly new formulation approximation approach
longer linear convex, making difficult find global maximum.
axIter
3000
10000
900000

Run time(sec)
4.14
17.21
3298

AttEUm
infeasible
infeasible
4.0537

Table 7: Performance approximation approach.

7.2 Experiments Two Dimensional Setting
settings 2-D space complex even single patroller. show
example setting motivated ferry system Seattle, Bainbridge island
Bremerton shown Figure 9. example setting, three terminals (denoted A,B
C) non-collinear 2-D space shown Figure 19(a). Ferry 1 Ferry
2 moving trajectory Terminal B C (denoted Trajectory 1)
Ferry 3 Ferry 4 moving trajectory Terminal B (denoted
Trajectory 2). schedules four ferries shown Figure 19(b), x-axis
time y-axis distance common terminal B. Ferry 1 moves
C B, Ferry 2 moves B C, Ferry 3 moves B Ferry 4 moves
B. Similar one-dimensional scenario ferry domain, assume utility
decided ferrys position utility function shown Figure 19(c).
x-axis distance common terminal B y-axis utility two
trajectories respectively. 2-D space discretized grid shown Figure 19(d)
x = 1.5 = 1 indicating interval x-axis y-axis. patroller
located one intersection points grid graph discretized time points.
simulation time 60 minutes = 13, i.e., tk+1 tk = 5 minutes. speed limit
patroller = 0.38 available edges patroller take
[tk , tk+1 ] shown Figure 19(d). one patroller involved. protection radius
set = 0.5, protection coefficient C1 = 0.8.
623

fiFang, Jiang, & Tambe

C

2



distance Terminal B

Terminals 2D
Trajectory 1
B

1

Trajectory 2
0


0

1.5

3

4.5

x

Ferry Schedules
1

0.6
0.4
0.2
0
0

60

Edges Available
2

Ferry Trajectory1
Ferry Trajectory2

6



utility

40

(b) Ferry schedules

Utility Function
8

20

time

(a) Three terminals
10

Ferry1
Ferry2
Ferry3
Ferry4

0.8

1

4
2
0
0

0.2

0.4

0.6

0.8

0
0

1

1.5

3

4.5

x

distance Terminal B
(c) Utility function

(d) Available edges

Figure 19: example setting two-dimensional space
Figure 20(a) compares performance DASS CASS Ferry 2. Ferry 2 chosen
strategies, attackers best response attack Ferry 2. x-axis
time t, y-axis attacker expected utility attacking Ferry 1 time t.
maximum AttEU CASS 6.1466, 12% lower compared result DASS,
6.9817. Figure 20(b) 20(c) show two sampled route given strategy calculated
CASS 2-D map dashed lines represents ferry trajectories.
patroller starts node text start follows arrowed route, ends
node text end end patrol. may stay nodes text
stay. patrol routes shown intuitive way ambiguous. exact
route listed table time position. routes sampled based
converted Markov strategy, total number patrol routes may chosen
non-zero probability 4.49 1010 .

8. Related Work
section discuss literature related work. first discuss work
computation game-theoretic patrolling strategies, discuss work continuous
games, finally discuss work equilibrium refinement.
mentioned introduction, Stackelberg games widely applied security domains, although work considered static targets (e.g., Korzhyk
et al., 2010; Krause, Roper, & Golovin, 2011; Letchford & Vorobeychik, 2012; Kiekintveld
624

fiProtecting Moving Targets Multiple Mobile Resources

Sampled Route CASS

7

stay

6


AttEU

2

4
0

stay
staystart
end

1

DASS
CASS

5

0

20
40
time

60

0

1.5

3

4.5

x

(a) Solution quality DASSand CASS
Ferry 2

(b) Sampled route 1 superimposed ferry
trajectories

Sampled Route CASS
staystart



2

stay
end

1

0
0

1.5

3

4.5

x
(c) Sampled route 2 superimposed ferry
trajectories

Figure 20: Experimental results two-dimensional settings

et al., 2013). Agmon, Kraus, Kaminka (2008) proposed algorithms computing
mixed strategies setting perimeter patrol adversarial settings mobile robot
patrollers. Similarly, Basilico, Gatti, Amigoni (2009) computed randomized leader strategies robotic patrolling environments arbitrary topologies. Even
players mobile, e.g., hider-seeker games (Halvorson, Conitzer, & Parr, 2009),
infiltration games (Alpern, 1992) search games (Gal, 1980), targets (if any) assumed static. Tsai et al. (2009) applied Stackelberg games domain scheduling
federal air marshals board flights. targets (i.e., flights) domain mobile,
players restricted move along targets protect attack them.
stationary nature leads discrete game models finite numbers pure strategies.
Bosansky, Lisy, Jakob, Pechoucek (2011) Vanek, Jakob, Hrstka, Pechoucek
(2011) studied problem protecting moving targets. However, considered
model defender, attacker targets discretized movements
directed graph. discretization attacker strategy spaces introduce suboptimality
solutions, shown DASS. We, work, generalize strategy space attacker continuous realm compute optimal strategies even
setting. Furthermore, provide efficient scalable linear formulation,
Bosansky et al. presented formulation non-linear constraints, faced problems
scaling larger games even single defender resource.
625

fiFang, Jiang, & Tambe

Yin et al. (2012) considered domain patrolling public transit networks (such
LA Metro subway train system) order catch fare evaders. players
ride along trains follow fixed schedule, domain inherently discrete
modeled patrolling problem finite zero-sum Bayesian game. Yin et al. proposed
compact representation defender mixed strategies flows network. adapt
compact representation idea continuous domain. particular, domain need
model interaction defenders flow attackers continuous strategy
space. proposed sub-interval analysis used spatio-temporal reasoning efficiently
reduce problem finite LP.
Games continuous strategy spaces well-studied game theory. Much
economics literature focused games whose equilibria solved analytically
(and thus question computation arise), example classical theory
auctions (see e.g., Krishna, 2009). Recent computational approaches analysis
design auctions focused discretized versions auction games (e.g.,
Thompson & Leyton-Brown, 2009; Daskalakis & Weinberg, 2012). research
efficiently solving two-player continuous games specific types utility functions,
zero-sum games convex-concave utility functions (Owen, 1995) separable
continuous games polynomial utility functions (Stein, Ozdaglar, & Parrilo, 2008).
Johnson, Fang, Tambe (2012) studied continuous game model protecting forests
illegal logging. model target (i.e., forest) stationary,
simplifying assumptions (e.g., forest circular shape) able solve
game efficiently. contrast existing work, game model moving targets
continuous domain, resulting utility functions discontinuous thus existing
approaches applicable. CASS algorithm solves game optimally without
needing discretize attackers strategy space.
extensive literature equilibrium refinement; however existing work
computation equilibrium refinement focuses finite games. simultaneousmove finite games, solution concepts perfect equilibrium proper equilibrium
proposed refinements Nash equilibrium (Fudenberg & Tirole, 1991). Miltersen
Srensen (2007) proposed efficient algorithm computing proper equilibria finite zero-sum games. finite security games, et al. (2011) proposed refinement
Stackelberg equilibrium techniques computing refinements. resulting
defender strategy robust possibilities constrained capabilities attacker.
existing approaches rely finiteness action sets, thus applicable
setting. Simon Stinchcombe (1995) proposed definitions perfect equilibrium
proper equilibrium infinite games continuous strategy sets, however
propose computational procedure resulting solution concepts. Exact computation equilibrium refinements continuous games MRMTsg remains challenging
open problem.

9. Conclusion
paper makes several contributions computing optimal strategies given moving targets mobile patrollers. First, introduce MRMTsg , novel Stackelberg game model
takes consideration spatial temporal continuity. model, targets move
626

fiProtecting Moving Targets Multiple Mobile Resources

fixed schedules attacker chooses attacking time continuous time
interval. Multiple mobile defender resources protect targets within protection
radius, bring continuous space analysis. Second, develop fast solution
approach, CASS, based compact representation sub-interval analysis. Compact representations dramatically reduce number variables designing optimal patrol
strategy defender. Sub-interval analysis reveals piece-wise linearity attacker
expected utility function shows finite set dominating strategies attacker. Third, propose two approaches equilibrium refinement CASSs solutions:
route-adjust flow-adjust. Route-adjust decomposes patrol routes, greedily improves
routes composes new routes together get new defender strategy. Flowadjust fast simple algorithm adjusts flow distribution achieve optimality
time interval keeping marginal probability discretized time points
unchanged. Additionally, provide detailed experimental analyses ferry protection
domain. CASS deployed US Coast Guard since April 2013.

10. Future Work
several important avenues future work. include: (i) use decreasing
function model protection provided targets instead using fixed protection
radius; (ii) handle practical constraints patrol boat schedule easily implementable; (iii) efficiently handle complex uncertain target schedules utility
functions.
provide initial discussion relaxation assumptions
listed Section 2 used throughout paper:
allow complex uncertain target schedules, may model problem
game targets follow stochastic schedules. framework may still apply
may need enriched (e.g., using approaches use MDPs represent
defender strategies, see Jiang, Yin, Zhang, Tambe, & Kraus, 2013). Coordinating
multiple defenders becomes important challenge. may helpful
cases appeal prior work multi-agent teamwork, given
significant uncertainty cases leading need on-line coordination
(Tambe, 1997; Stone, Kaminka, Kraus, & Rosenschein, 2010; Kumar & Zilberstein,
2010; Yin & Tambe, 2011).
focus environments multiple attackers coordinate attacks,
may need enhance framework. Prior results Korzhyk,
Conitzer, Parr (2011) stationary targets discrete time would helpful
addressing challenge, although case moving targets continuous space
time cases provides significant challenge. Combining
previous item future work, complex multiple defender multiple attacker scenario
would appear significant computational challenge.

627

fiFang, Jiang, & Tambe

Acknowledgments
thank USCG officers, particularly Craig Baldwin, Joe Direnzo Francis
Varrichio officers sector New York, exceptional collaboration. views
expressed herein author(s) construed official reflecting
views Commandant U.S. Coast Guard. research supported
US Coast Guard grant HSHQDC-10-D-00019 MURI grant W911NF-11-1-0332.
thank anonymous reviewers valuable suggestions.
preliminary version work appears conference paper (Fang, Jiang, &
Tambe, 2013). several major advances article: (i) Whereas earlier work
confined targets move 1-D space, provide significant extension algorithms
(DASS CASS) article enable targets patrollers move 2D space; provide detailed experimental results 2-D extension. (ii)
provide additional novel equilibrium refinement approaches experimentally compare
performance equilibrium refinement approach offered earlier work;
allows us offer improved understanding equilibrium refinement space. (iii)
discuss several sampling methods detail sample actual patrol routes mixed
strategies generate discussion missing earlier work. (iv) provide
detailed proofs omitted previous version work.

628

fiProtecting Moving Targets Multiple Mobile Resources

Appendix A. Notation Table

Notation
MRMT
MRMTsg
L
Fq
A, B


Sq (t)
W
Pu
vm

CG
Uq (t)

N
tk
di

Ru
ru (k)
f (i, j, k)
p(i, k)
Ei,j,k
p(Ru )
AttEU(Fq , t)
q (t)
(Fq , t)
I(i, q, k)
L1q ,L2q
r
qk
r
AttEU(Fq , qk
)
Mqk
Arqk (i, j)
E(u, k)

Meaning
problem multiple Mobile Resources protecting Moving Targets
Game model continuous set strategies attacker MRMT.
Number ferries.
Ferry index q.
Terminal points.
Continuous time interval finite set time points.
Continuous space possible locations set distance points.
Ferry schedule. Position target Fq specified time t.
Number patrollers.
Patroller index u.
Speed limit patroller.
Protection radius patroller.
Probability attacker stopped G patrollers.
Positive reward successful attack target Fq time attacker.
Number discretized time points.
Number discretized distance points.
Discretized time point.
Discretized distance point.
Distance two adjacent time points.
Patrol route patroller Pu . discretization defenders strategy space,
Ru described vector.
patroller located dru (k) time tk .
Flow distribution variable. Probability patroller moves di dj
time [tk , tk+1 ].
Marginal distribution variable. Probability patroller located di tk .
directed edge linking nodes (tk , di ) (tk+1 , dj ).
Probability taking route Ru .
Attacker expected utility attacking target Fq time t.
Protection range target Fq time
Probability patroller protecting target Fq time t.
Whether patroller located di time tk protecting target Fq .
Lines Sq (t) .
rth intersection point [tk , tk+1 ] respect target Fq .
r .
Left/right-side limit AttEU(Fq , t) qk
Number intersection points [tk , tk+1 ] respect target Fq .
r , r+1 ]; 0 otherwise.
C1 patroller taking edge Ei,j,k protect target Fq [qk
qk
Short Eru (k),ru (k+1),k .
Table 8: Summary notations involved paper.

629

fiFang, Jiang, & Tambe

Appendix B. Calculation Intersection Points CASS 2-D Settings
calculate time patrollers route intersects protection range
target patroller moving V1 = (x1 , y1 ) V2 = (x2 , y2 ) target
moving Sq (tk ) = (x1 , y1 ) Sq (tk+1 ) = (x2 , y2 ) [tk , tk+1 ]. patrollers
position given time [tk , tk+1 ] denoted (x, y) targets position denoted
(x, y).
tk
(x2 x1 ) + x1 ,
tk+1 tk
tk
(x2 x1 ) + x1 ,
x =
tk+1 tk

tk
(y2 y1 ) + y1
tk+1 tk
tk
=
(y2 y1 ) + y1
tk+1 tk

x=

y=

(40)
(41)

intersection point, distance patrollers position targets position
equals protection radius , looking time
(x x)2 + (y y)2 = re2

(42)

substituting variables Equation 42 Equations 4041, denoting
(x2 x1 ) (x2 x1 )
,
tk+1 tk
(y2 y1 ) (y2 y1 )
A2 =
,
tk+1 tk
A1 =

B1 = x1 x1 ,
B2 = y1 y1 ,

Equation 42 simplified
(A1 A1 tk + B1 )2 + (A2 A2 tk + B2 )2 = re2 .

(43)

Denote C1 = B1 A1 tk C2 = B2 A2 tk , easily get two roots
quadratic equation,
p
2(A1 C1 + A2 C2 ) 2 (A1 C1 + A2 C2 )2 (A21 + A22 )(C12 + C22 re2 )
ta,b =
.
(44)
2(A21 + A22 )
ta tb time valid intersection point within time interval
consideration ([tk , tk+1 ]).

References
Agmon, N., Kraus, S., & Kaminka, G. A. (2008). Multi-robot perimeter patrol adversarial
settings. IEEE International Conference Robotics Automation (ICRA), pp.
23392345.
Alpern, S. (1992). Infiltration Games Arbitrary Graphs. Journal Mathematical Analysis Applications, 163, 286288.
630

fiProtecting Moving Targets Multiple Mobile Resources

An, B., Kempe, D., Kiekintveld, C., Shieh, E., Singh, S. P., Tambe, M., & Vorobeychik, Y.
(2012). Security games limited surveillance. Proceedings Twenty-Sixth
AAAI Conference Artificial Intelligence, pp. 12411248.
An, B., Tambe, M., Ordonez, F., Shieh, E., & Kiekintveld, C. (2011). Refinement strong
stackelberg equilibria security games. Proceedings Twenty-Fifth AAAI
Conference Artificial Intelligence (AAAI), pp. 587593.
Basilico, N., Gatti, N., & Amigoni, F. (2009). Leader-follower strategies robotic patrolling environments arbitrary topologies. Proceedings 8th International Conference Autonomous Agents Multiagent Systems (AAMAS) Volume 1, pp. 5764.
Bosansky, B., Lisy, V., Jakob, M., & Pechoucek, M. (2011). Computing time-dependent
policies patrolling games mobile targets. 10th International Conference
Autonomous Agents Multiagent Systems (AAMAS) - Volume 3, pp. 989996.
Conitzer, V., & Sandholm, T. (2006). Computing optimal strategy commit to.
Proceedings 7th ACM Conference Electronic Commerce, EC 06, pp. 8290.
Daskalakis, C., & Weinberg, S. M. (2012). Symmetries optimal multi-dimensional mechanism design. Proceedings 13th ACM Conference Electronic Commerce,
EC 12, pp. 370387.
Fang, F., Jiang, A. X., & Tambe, M. (2013). Optimal patrol strategy protecting moving
targets multiple mobile resources. Proceedings 2013 International Conference Autonomous Agents Multi-agent Systems, AAMAS 13, pp. 957964.
Fudenberg, D., & Tirole, J. (1991). Game Theory. MIT Press.
Gal, S. (1980). Search Games. Academic Press, New York.
Gatti, N. (2008). Game theoretical insights strategic patrolling: Model algorithm
normal-form. Proceedings 18th European Conference Artificial Intelligence
(ECAI), pp. 403407.
Greenberg, M., Chalk, P., & Willis, H. (2006). Maritime terrorism: risk liability. Rand
Corporation monograph series. RAND Center Terrorism Risk Management Policy.
Halvorson, E., Conitzer, V., & Parr, R. (2009). Multi-step Multi-sensor Hider-Seeker Games.
IJCAI.
Jakob, M., Vanek, O., & Pechoucek, M. (2011). Using agents improve international
maritime transport security. Intelligent Systems, IEEE, 26 (1), 9096.
Jiang, A. X., Yin, Z., Zhang, C., Tambe, M., & Kraus, S. (2013). Game-theoretic randomization security patrolling dynamic execution uncertainty. Proceedings
2013 international conference Autonomous agents multi-agent systems,
AAMAS 13, pp. 207214.
Johnson, M. P., Fang, F., & Tambe, M. (2012). Patrol strategies maximize pristine forest
area. Proceedings Twenty-Sixth AAAI Conference Artificial Intelligence
(AAAI), pp. 295301.
631

fiFang, Jiang, & Tambe

Kiekintveld, C., Islam, T., & Kreinovich, V. (2013). Security games interval uncertainty. Proceedings 2013 International Conference Autonomous Agents
Multi-agent Systems, AAMAS 13, pp. 231238.
Kiekintveld, C., Jain, M., Tsai, J., Pita, J., Ordonez, F., & Tambe, M. (2009). Computing
optimal randomized resource allocations massive security games. Proceedings
8th International Conference Autonomous Agents Multiagent Systems
- Volume 1, AAMAS 09, pp. 689696.
Korzhyk, D., Conitzer, V., & Parr, R. (2010). Complexity computing optimal Stackelberg
strategies security resource allocation games. Proceedings 24th National
Conference Artificial Intelligence (AAAI), pp. 805810.
Korzhyk, D., Conitzer, V., & Parr, R. (2011). Security games multiple attacker resources. Proceedings Twenty-Second international joint conference Artificial Intelligence - Volume Volume One, IJCAI11, pp. 273279. AAAI Press.
Krause, A., Roper, A., & Golovin, D. (2011). Randomized sensing adversarial environments. Proceedings 22nd International Joint Conference Artificial
Intelligence (IJCAI), pp. 21332139.
Krishna, V. (2009). Auction theory. Academic press.
Kumar, A., & Zilberstein, S. (2010). Anytime planning decentralized POMDPs using
expectation maximization. Proceedings Twenty-Sixth Conference Uncertainty Artificial Intelligence, pp. 294301.
Letchford, J. (2013). Computational Aspects Stackelberg Games. Ph.D. thesis, Duke
University.
Letchford, J., & Conitzer, V. (2013). Solving security games graphs via marginal probabilities. Proceedings Twenty-Seventh AAAI Conference Artificial Intelligence (AAAI), pp. 591597.
Letchford, J., & Vorobeychik, Y. (2012). Computing optimal security strategies interdependent assets. Conference Uncertainty Artificial Intelligence (UAI),
pp. 459468.
Luber, S., Yin, Z., Fave, F. D., Jiang, A. X., Tambe, M., & Sullivan, J. P. (2013). Gametheoretic patrol strategies transit systems: trusts system mobile app
(demonstration). International Conference Autonomous Agents Multiagent
Systems (AAMAS)[Demonstrations Track], pp. 13771378.
Marecki, J., Tesauro, G., & Segal, R. (2012). Playing repeated stackelberg games unknown opponents. Proceedings 11th International Conference Autonomous
Agents Multiagent Systems, AAMAS 12, pp. 821828.
Miltersen, P. B., & Srensen, T. B. (2007). Computing proper equilibria zero-sum games.
Proceedings 5th International Conference Computers Games, CG06,
pp. 200211.
Owen, G. (1995). Game Theory (3rd ed.). Academic Press.
632

fiProtecting Moving Targets Multiple Mobile Resources

Paruchuri, P., Tambe, M., Ordonez, F., & Kraus, S. (2006). Security multiagent systems
policy randomization. Proceedings fifth international joint conference
Autonomous agents multiagent systems, AAMAS 06, pp. 273280.
Pita, J., Jain, M., Marecki, J., Ordonez, F., Portway, C., Tambe, M., Western, C., Paruchuri,
P., & Kraus, S. (2008). Deployed ARMOR protection: application game theoretic model security Los Angeles International Airport. Proceedings
7th International Joint Conference Autonomous Agents Multiagent Systems:
Industrial Track, AAMAS 08, pp. 125132.
Pita, J., Jain, M., Ordonez, F., Portway, C., Tambe, M., Western, C., Paruchuri, P., &
Kraus, S. (2009). Using game theory los angeles airport security.. AI Magazine,
30, 4357.
Shieh, E., An, B., Yang, R., Tambe, M., Baldwin, C., DiRenzo, J., Maule, B., & Meyer,
G. (2012). PROTECT: deployed game theoretic system protect ports
United States. Proceedings 11th International Conference Autonomous
Agents Multiagent Systems - Volume 1, AAMAS 12, pp. 1320.
Simon, L. K., & Stinchcombe, M. B. (1995). Equilibrium refinement infinite normal-form
games. Econometrica, 63 (6), 14211443.
Stein, N. D., Ozdaglar, A., & Parrilo, P. A. (2008). Separable low-rank continuous
games. International Journal Game Theory, 37 (4), 475504.
Stone, P., Kaminka, G. A., Kraus, S., & Rosenschein, J. S. (2010). Ad hoc autonomous
agent teams: Collaboration without pre-coordination. Proceedings 24th AAAI
Conference Artificial Intelligence, pp. 15041509.
Tambe, M. (1997). Towards flexible teamwork. JOURNAL ARTIFICIAL INTELLIGENCE RESEARCH, 7, 83124.
Tambe, M. (2011). Security Game Theory: Algorithms, Deployed Systems, Lessons
Learned. Cambridge University Press.
Thompson, D. R. M., & Leyton-Brown, K. (2009). Computational analysis perfectinformation position auctions. Proceedings 10th ACM conference Electronic commerce, EC 09, pp. 5160.
Tsai, J., Rathi, S., Kiekintveld, C., Ordonez, F., & Tambe, M. (2009). IRIS - tool
strategic security allocation transportation networks. Eighth International
Conference Autonomous Agents Multiagent Systems - Industry Track, AAMAS
09, pp. 3744.
van Damme, E. (1987). Stability Perfection Nash equilibria. Springer-Verlag.
Vanek, O., Jakob, M., Hrstka, O., & Pechoucek, M. (2011). Using multi-agent simulation
improve security maritime transit. Proceedings 12th International
Workshop Multi-Agent-Based Simulation (MABS), pp. 116.
Vorobeychik, Y., & Singh, S. (2012). Computing stackelberg equilibria discounted stochastic games. Proceedings Twenty-Sixth Conference Artificial Intelligence (AAAI), pp. 14781484.
633

fiFang, Jiang, & Tambe

Yin, Z., Jiang, A. X., Johnson, M. P., Kiekintveld, C., Leyton-Brown, K., Sandholm, T.,
Tambe, M., & Sullivan, J. P. (2012). TRUSTS: Scheduling randomized patrols
fare inspection transit systems. Proceedings Twenty-Fourth Conference
Innovative Applications Artificial Intelligence (IAAI), pp. 23482355.
Yin, Z., & Tambe, M. (2011). Continuous time planning multiagent teams temporal
constraints. Proceedings Twenty-Second international joint conference
Artificial Intelligence - Volume Volume One, IJCAI11, pp. 465471. AAAI Press.

634


