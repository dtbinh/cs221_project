Journal Articial Intelligence Research 48 (2013) 783-812

Submitted 08/13; published 11/13

Complexity Optimal Monotonic Planning:
Bad, Good, Causal Graph
Carmel Domshlak
Anton Nazarenko

dcarmel@ie.technion.ac.il
anton.nazarenko@gmail.com

Faculty Industrial Engineering & Management,
Technion - Israel Institute Technology,
Haifa, Israel

Abstract
almost two decades, monotonic, delete free, relaxation one
key auxiliary tools practice domain-independent deterministic planning.
particular contexts satiscing optimal planning, underlies state-of-theart heuristic functions. satiscing planning monotonic tasks polynomial-time,
optimal planning monotonic tasks NP-equivalent. establish negative
positive results complexity wide fragments optimal monotonic planning,
fragments dened around causal graph topology. results shed
light link complexity general optimal planning complexity
optimal planning respective monotonic relaxations.

1. Introduction
domain-independent deterministic (or classical) planning, world states represented complete assignments set variables, operators allow deterministic
modications assignments, objective nd sequence operators
sequentially modies given initial assignment assignment satises certain
predened goal property. last two decades, solvers problem made spectacular advances empirical eciency, especially context state-space
heuristic search planning techniques. eciency made possible largely
ability exploit monotonic, delete-free, relaxations planning tasks (McDermott,
1999; Bonet & Gener, 2001; Homann & Nebel, 2001).
high level, monotonic relaxation replaces regular value switching semantics
planning operators value accumulating semantics. is, operator switches
value variable v x y, relaxed version operator extends
value v {x} {x, y}. key point applying operators value
accumulating semantics reduce applicability operators future. Two
properties monotonic relaxation make especially valuable automated planning. First,
deterministic planning PSPACE-complete even rather conservative propositional
formalisms, planning monotonic tasks polynomial-time (Bylander, 1994), thus
exploited deriving heuristic estimates. Second, numerous problems practical
interest, plans monotonic relaxations distant true plans
problems (Homann, 2005; Helmert & Mattmuller, 2007; Helmert & Domshlak, 2009; Bonet
& Helmert, 2010). Hence, starting seminal HSP (Bonet & Gener, 2001)
(Homann & Nebel, 2001) planning systems, exploiting, particular, explicitly
c
2013
AI Access Foundation. rights reserved.

fiDomshlak & Nazarenko

planning for, monotonic relaxations became important ingredient systems
domain-independent deterministic planning. (For comprehensive survey, see, e.g., Betz &
Helmert, 2009.)
Ideally, planner reasoning cost plans monotonic relaxations
reason cost optimal plans monotonic relaxations. Unfortunately,
regular planning monotonic tasks polynomial-time, optimal planning tasks
NP-equivalent (Bylander, 1994), constant-factor approximations problem
provably hard well (Betz & Helmert, 2009). Still, admissible heuristic estimates
principle exploit tractable fragments optimal planning monotonic relaxations (Katz
& Domshlak, 2010). However, best knowledge, substantial fragments
tractability revealed monotonic optimal planning date.
Identifying signicant fragments tractability optimal monotonic planning precisely focus here. special interest establishing connections complexity optimal planning optimal planning monotonic relaxations
respective planning tasks. interest motivated new important role
methods combine tractable fragments regular deterministic planning monotonic relaxation heuristics (Helmert, 2004; Keyder & Gener, 2008a; Katz & Domshlak,
2010; Katz, Homann, & Domshlak, 2013a, 2013b; Katz & Homann, 2013). turn,
comparative perspective brought us consider planning tasks terms nite-domain
representations go beyond standard propositional representation formalisms
STRIPS (Fikes & Nilsson, 1971) ADL (Pednault, 1989). explanation,
possibly even justication, choice analysis place here.
Due close relationship rst-order propositional logics, propositional representations dominated area automated planning since early days AI research. instance, propositional PDDL language still de facto standard problem
description language planning community (Fox & Long, 2003). However, propositional languages blur lot important structure present typical planning tasks
interest. discuss later on, nite-domain representations (FDR) go beyond propositional state variables (Backstrom & Klein, 1991; Backstrom & Nebel, 1995; Helmert,
2009) allowed much deeper much discriminative analysis automated planning complexity. turn, formal developments already translated
practical advances planning, allowing introduction eective enhancements
monotonic relaxation heuristics (Fox & Long, 2001; Helmert, 2004; Helmert & Gener,
2008; Keyder & Gener, 2008a; Cai, Homann, & Helmert, 2013; Katz et al., 2013a,
2013b), abstraction heuristics (Edelkamp, 2001; Helmert, Haslum, & Homann, 2007; Katz
& Domshlak, 2010), decomposition-based planning (Nissim, Brafman, & Domshlak, 2010;
Nissim & Brafman, 2012), search-topology analysis (Homann, 2011), many others.
Nonetheless, value accumulating semantics monotonic relaxation, FDR
longer maintains key advantage propositional representations,
longer seems reason prefer explicit representation certain mutual exclusion
relationships propositions. Therefore, principle, results presented
follows phrased, sometimes even extended, context propositional
representations STRIPS. Why, then, chosen view complexity
optimal relaxed planning lens FDR? primary reason interest
comparative complexity analysis optimal planning optimal planning respective
784

fiThe Complexity Optimal Monotonic Planning

monotonic relaxations. Departing previously discovered fragments tractability
satiscing optimal planning, approach following two high-level questions:
1. fragments deterministic planning, any, optimal planning hard
optimal (monotonically) relaxed planning easy?
2. fragments deterministic planning, any, optimal planning easy yet
optimal (monotonically) relaxed planning hard?
regular planning, best classication days worst-case time
complexity exploits properties graphical structures induced planning
tasks, together various properties FDR state variables size
domains. Hence, discussing optimal relaxed planning FDR tasks keeps us direct
relation well-explored complexity map regular deterministic planning. Moreover,
show known links planning complexity graph-topological
properties FDR tasks even stronger case optimal relaxed planning.
second reason choice recent work already revealed interesting
interplays (either complete partial) monotonic relaxation nite-domain variables graphical structures induced FDR tasks. respective results
context computational complexity non-optimal planning (Katz et al., 2013b), heuristic estimates (Keyder & Gener, 2008b; Katz et al., 2013a; Katz & Homann, 2013),
search-topology analysis (Homann, 2011). instance, Homann (2011) showed that,
causal graph FDR task acyclic, every variable transition invertible,
h+ heuristic induced optimal relaxed plans evaluated states local
minima. result particular testies examining monotonic relaxations
lens FDR lead crisp concisely formulated results.
found work here: show results easily reformulated, sometimes even generalized, terms STRIPS, results
conform easily STRIPS reformulation.
Finally, immediate value results work mostly theoretical,
would see step towards exploiting optimal relaxed planning devise
heuristic functions deterministic planning. results, Theorem 4,
fact directly used within framework implicit abstractions (Katz & Domshlak,
2010), results possibly exploited within various frameworks
partial monotonic relaxation as, e.g., recent red-black planning framework Katz
et al. (2013b, 2013a). extent actually happen remains, course,
seen. However, focus implicit abstractions red-black planning
nite-domain task representations make much easier assess relevance
results frameworks.

2. Formalism, Background, Related Results
use notation [n] refer set {1, . . . , n}. directed graphs, edge x
denoted (x, y), undirected graphs, edge x denoted
{x, y}. ||x|| refer representation size object x, confused |x|,
denotes number elements set x.
785

fiDomshlak & Nazarenko

2.1 FDR, MFDR, Monotonic Relaxation
adopt terminology notation Katz et al. (2013b). planning task
nite-domain representation (FDR) given quintuple = V, A, I, G, cost,
where:
V set state variables, v V associated nite domain
D(v). partial variable assignment p function variable subset V(p) V
assigns v V(p) value p[v] D(v) domain. partial variable assignment
called state V(s) = V .
initial state. goal G partial variable assignment V .
nite set actions. action pair pre(a), e(a) partial variable
assignments V called precondition eect, respectively.
cost : R0+ real-valued, nonnegative action cost function.
Auxiliary notation:
partial assignment p variable subset V V(p), p[V ] denote
assignment provided p V . ease presentation, sometimes specify
partial assignments sets constructs v d, v V D(v).
variable v V , Av denote actions aecting value v,
is, Av = {a | v V(e(a))}. sequence actions state variable v V ,
v denote restriction actions Av .
semantics FDR tasks follows. action applicable state
s[v] = pre(a)[v] v V(pre(a)). Applying state changes value every v
V(e(a)) e(a)[v]; resulting state denoted sJaK. sJa1 , . . . , ak K denote
state obtained sequential application (respectively applicable) actions a1 , . . . , ak
starting state s. action sequence s-plan sJa1 , . . . , ak K[V(G)] = G,
optimal s-plan sum action costs minimal among s-plans.
computational task (optimal) planning nding (optimal) I-plan. follows,
(optimal) I-plans often referred simply (optimal) plans .
monotonic nite-domain representation (MFDR) planning task given
quintuple = V, A, I, G, cost exactly FDR tasks, semantics dierent.1
Informally, MFDR tasks state variables accumulate values, rather switching
them. specically, MFDR state function assigns v V
non-empty subset s[v] D(v) domain. MFDR action applicable state
pre(a)[v] s[v] v V(pre(a)). Applying MFDR action state changes
value v V(e(a)) s[v] s[v] {e(a)[v]}. Respectively, MFDR action sequence
a1 , . . . , ak applicable state s-plan G[v] sJa1 , . . . , ak K[v] v V(G).
respects, MFDR FDR semantics identical.
1. entirely clear original formulation monotonic relaxation multi-valued variable
domains attributed, traced back least work Helmert (2006)
Fast Downward planning system.

786

fiThe Complexity Optimal Monotonic Planning

FDR planning PSPACE-complete even propositional state variables, planning MFDR tasks polynomial time (Bylander, 1994). Starting HSP (Bonet
& Gener, 2001) (Homann & Nebel, 2001) planning systems, exploiting attractive property MFDR deriving heuristic estimates via notion monotonic
relaxation became key ingredient many planning systems. Given FDR planning task
= V, A, I, G, monotonic relaxation MFDR task + = .
state , optimal relaxation heuristic h+ (s) dened cost optimal
plan MFDR task V, A, s, G, (optimal) relaxed planning refer
(optimal) planning + . + plan + , + referred relaxed
plan .
Finally, FDR MFDR, sometimes distinguish planning tasks
terms pair standard graphical structures induced description tasks.
causal graph CG digraph nodes V . arc (v, v ) CG v =
v exists action (v, v ) V(e(a))V(pre(a))V(e(a)).
case, say (v, v ) induced a. succ(v) pred(v) respectively
denote sets immediate successors predecessors v CG .
domain transition graph DTG(v, ) variable v V arc-labeled
digraph nodes D(v) arc (d, ) labeled pre(a)[V \ {v}]
cost(a) belongs graph e(a)[v] = , either pre(a)[v] =
v V(pre(a)).
2.2 Causal Graph Treewidth Planning Complexity
Introduced Halin (1976), tree-width went unnoticed independently rediscovered Robertson Seymour (1984) Arnborg, Cornell, Proskurowski (1987).
since received widespread attention due numerous graph-theoretic algorithmic
applications. Informally, tree-width graph measure close structure
graph tree. example, tree-width tree 1, regardless size,
whereas tree-width complete graph n nodes n 1. Formally, tree-width
graph dened via notion tree decomposition follows.
tree decomposition connected undirected graph G = (V, E) pair T, ,
= (V , E ) tree, i.e., connected acyclic graph, : V 7 2V that:
1. every v V , set {t V | v (t)} non-empty connected.
2. every (v, u) E V {v, u} (t).
width tree decomposition T, G max{|(t)| | V } 1, treewidth G, tw(G), minimum width tree decompositions G. Following
appears standard terminology, tree-width digraph G refer
tree-width undirected graph induced G (Berwanger, Dawar, Hunter, Kreutzer, &
Obdzralek, 2012).
development parametrized complexity analysis (Downey & Fellows, 1999;
Flum & Grohe, 2006), shown many NP-hard problems solved
polynomial time restricted induce certain problem-specic graphical structures
xed tree-width. particular, constraint satisfaction constraint optimization
787

fiDomshlak & Nazarenko

problems nite-domain variables solved time polynomial size
explicit description problems, exponential tree-width induced
constraint graph (Dechter, 2003). Since causal graph captures high-level structure
planning problems, one would expect tree-width play similar role
worst-case time complexity satiscing optimal FDR planning. Unfortunately,
results direction mostly negative.
standard assumption parametric complexity hierarchy W[1] nu-FPT
(Flum & Grohe, 2006), Chen Gimenez (2010) proved that, family
digraphs C, FDR planning tasks inducing causal graphs C polynomial-time
size connected components C bounded constant.
family digraphs tree-width 1 trivially fails satisfy latter condition,
immediate corollary result even satiscing FDR planning restricted
causal graphs tree-width 1 polynomial.
construction proof Chen Gimenez (2010) uses FDR tasks
variable domains parametric size, work Gimenez Jonsson (2009b)
shows negative result causal graphs tree-width 1 holds even
restricted planning tasks xed variable domains. Specically, Gimenez
Jonsson show FDR planning chain causal graphs NP-hard even
restricted variables domains size 5.
negative results role causal graphs tree-width computational
tractability FDR planning strong, apparently tell part story.
shown Brafman Domshlak (2006, 2013), causal graphs tree-width play
role worst-case time complexity FDR planning, tight interplay
another parameter called tasks local depth. Informally, local depth FDR task
captures minmax amount work required single variable order solve . Since
later refer result Brafman Domshlak, precise specication local depth
warranted here: denoting P lans() (possibly innite) set plans FDR
task , local depth
=

min

max {|v |},

P lans() vV

is, maximal number value changes single state variable, along plan
minimizes quantity among plans . Theorem 6 Brafman Domshlak
(2013), FDR tasks solved time polynomial |||| exponential
O(tw(CG ) ). possible stratications based succinct representation
internal variable domain dynamics, suggested Fabre, Jezequel, Haslum,
Thiebaux (2010), appears strongest link discovered far
complexity general FDR planning graph-topological properties causal
graphs. Note positive result applies satiscing planning; applicable
optimal planning limited settings (Fabre et al., 2010; Brafman & Domshlak,
2013).
788

fiThe Complexity Optimal Monotonic Planning

3. Negative Results: Bottleneck Variable Domains
focus connections worst-case time complexity optimal relaxed
planning structure problems causal graphs. Note causal graphs
FDR tasks trivially invariant monotonic relaxation: since + = ,
CG+ = CG . mentioned, previous works already revealed certain connections structure causal graphs, particular tree-width,
complexity FDR planning. follows, show link even stronger
somewhat intriguing case optimal relaxed planning. said that,
begin set negative results which, least rst glance, suggest
link actually likely.
Denition 1 connected digraph G = (N, E) fork contains exactly one node
r N non-zero out-degree, is, E = {(r, n) | n N \ {r}}. Similarly, G
inverted fork contains exactly one node r N non-zero in-degree, is,
E = {(n, r) | n N \ {r}}. respective special nodes r fork inverted-fork graphs
called roots graphs.
Considering FDR planning tasks fork inverted fork causal graphs, rst
impression might FDR fragments restricted enough allow polynomialtime planning. This, however, case: even non-optimal planning FDR tasks
simple causal graphs hard, even variables roots
restricted binary-valued (Domshlak & Dinitz, 2001). hand, especially
since non-optimal relaxed planning FDR polynomial-time, results direct
inuence complexity optimal relaxed planning respective FDR fragments.
Nonetheless, surprisingly not, problem hard.
Theorem 1 Optimal relaxed planning NP-equivalent even restricted FDR tasks
fork inverted-fork structured causal graphs. Moreover, result holds even
state variables roots restricted binary domains.
Proof: proof polynomial reductions NP-equivalent problems (minimum) Directed Steiner Tree (minimum) Set Cover (Karp, 1972).
Directed Steiner Tree: Given digraph G = (N, E) arc weights w : E R0+ ,
set terminals Z N , root vertex nr , nd minimum weight arborescence
(directed tree) rooted nr N terminals Z included .
Set Cover: Given collection C subsets nite set S, nd minimum cardinality
subset C C every element belongs least one member C .
Fragment I: Given Directed Steiner Tree problem G = (N, E), w, Z, nr , corresponding fork-structured FDR task = V, A, I, G, cost constructed follows.
variable set V contains variable per terminal node G, plus extra variable r,
is, V = {r} VZ VZ = {vz | z Z}. domain r, D(r) = N , corresponds
nodes G, variables binary-valued, D(vz ) = {0, 1}.
initial state, I[r] = nr I[v] = 0 v VZ . goal achieve value 1
v VZ . arc e = (x, y) E, action set contains root-changing action
789

fiDomshlak & Nazarenko

ae pre(ae ) = {r x}, e(ae ) = {r y}, cost(ae ) = w(e). Likewise,
terminal z Z, contains vz -changing action az pre(az ) = {r z, vz 0},
e(az ) = {vz 1}, cost(az ) = 0. construction clearly polynomial, causal
graph forms fork rooted r, variable domains required
theorem. holds that:
(i) relaxed plan , set arcs {e | ae r } G induces connected
sub-graph G containing nr terminals Z included G (or otherwise
least one leaf variables could changed goal value).
Likewise, directed path G nr every node n G (or
otherwise respective value n root variable r could achieved
along ). Hence, particular, G contains arborescence rooted nr includes
terminals Z.
(ii) Vice versa, let arborescence G rooted nr includes terminals
Z = {z1 , . . . , zm }, let {e1 , . . . , ek } topological ordering arcs .
ae1 , . . . , aek , az1 , . . . , azm relaxed plan , cost precisely
weight .
Hence, optimal relaxed plans induce minimum directed Steiner trees G = (N, E), w, Z, nr ,
vice versa.
Fragment II: Given Set Cover problem S, C = {1, 2, . . . , m} |C| = n,
corresponding inverted-fork structured FDR task = V, A, I, G, cost constructed
follows. variable set V contains variable per member C, plus extra variable r,
is, V = {r}{vc | c C}. domain r D(r) = {0}S, variables
binary-valued, D(vc ) = {0, 1}. initial state, I[v] = 0 v V . goal
achieve value special variable r. S, subset c C c,
action set contains root-changing action ai;c pre(ai;c ) = {r (i 1), vc 1},
e(ai;c ) = {r i}, cost(ai;c ) = 0. Likewise, c C, contains vc -changing
action ac pre(ac ) = {vc 0}, e(ac ) = {vc 1}, cost(ac ) = 1. construction
polynomial, causal graph forms inverted fork rooted r, variable
domains required theorem. Note that, due chain-like structure
domain transition graphs , dierence plans
+ , easy verify plan induces cover cost,
vice versa. Hence, optimal relaxed plans induce minimum set covers S, C,
vice versa.

Corollary 1 Optimal relaxed planning NP-equivalent even restricted FDR tasks
causal-graph tree-width 1.
corollary immediate Theorem 1 undirected graphs induced
forks inverted forks special case trees thus tree-width 1. rst
glance, message Corollary 1 discouraging respect agenda: structure
causal graphs seem play major role complexity optimal
relaxed planning FDR. next result, however, seems even discouraging
respect prospects tractability optimal relaxed planning FDR.
790

fiThe Complexity Optimal Monotonic Planning

Theorem 2 Optimal relaxed planning NP-equivalent even restricted FDR tasks
two state variables.
Proof: proof polynomial reduction (minimum) directed Steiner tree
problem, fact, proof similar fork case Theorem 1. Given
Directed Steiner Tree problem G = (N, E), w, Z, nr Z = {z1 , . . . , zm }, compile
FDR task = {v1 , v2 }, A, I, G, cost follows. domain v1 corresponds
nodes G, domain v2 corresponds terminal nodes root
node, is, D(v1 ) = N D(v2 ) = Z {nr }. initial state, I[v1 ] = nr
I[v2 ] = nr , goal achieve value zm v2 . arc e = (x, y) E,
action set contains v1 -changing action ae pre(ae ) = {v1 x}, e(ae ) = {v1 y},
cost(ae ) = w(e). Likewise, denoting nr z0 , 1 m, contains v2 -changing
action azi pre(azi ) = {v1 zi , v2 zi1 }, e(azi ) = {v2 zi }, cost(azi ) = 0.
construction polynomial, correctness stems analysis identical
proof Theorem 1.

Theorem 2 shows even dimensionality FDR state spaces plays secondary
role, any, complexity optimal relaxed planning. that, however, answers
one two macro-questions agenda:
Corollary 2 exist fragments FDR optimal planning polynomial-time,
optimal relaxed planning NP-equivalent.
corollary immediate Theorem 2 polynomial-time solvability optimal
planning FDR tasks xed number state variables.

4. Positive Results I: State Variables Fixed-Size Domains
Depending readers background intuitions, Theorem 2 either surprise seem
somewhat predictable. case, Theorem 2 led us consider dierent
(and time fruitful) fragmentation optimal relaxed planning.
closer look Theorem 1 Lemma 2 reveals size FDR variable
domains might crucial complexity optimal relaxed planning: proofs
two claims rely heavily parametric domain size state variables,
proofs imply optimal relaxed planning hard even single FDR
variable comes parametric domain size. Departing observation,
show that, all, topology causal graph play interesting role worstcase time complexity classication optimal relaxed planning FDR tasks. particular,
turns bounding tree-width causal graph constant takes
achieve polynomial-time optimal relaxed planning FDR tasks xed-size variable
domains.
Theorem 3 family directed graphs C, tree-width C bounded
constant, optimal relaxed planning FDR tasks xed-size variable domains
causal graphs C polynomial-time.
791

fiDomshlak & Nazarenko

Proof: proof Theorem 3 inspired closely resembles approach Brafman
Domshlak (2013) discussed Section 2.2. Given FDR task = V, A, I, G, cost,
compile constraint optimization problem COP+ = (X , ) nite-domain
variables X , functions , global objective minimize (X ). + unsolvable, assignments X evaluate objective function . Otherwise,
optimum objective obtained assignments X correspond
optimal plans + , is, optimal relaxed plans .
Let |V | = n, = maxvV |D(v)|, recall pred(v) state variable v V denotes
set vs immediate predecessors causal graph.
state variable v V , X contains variable xv represents choice
subset actions Av participate plan looking for. possible
choices form domain D(xv ) xv , choice represented set
size smaller equal , element set quadruple
(d, id, a, t),
D(v), id {v} pred(v), {1, . . . , n}, and, id = v, {a
Av | e(a )[v] = d} otherwise =. high level, view state variables
active decision makers, value relaxed variable v aims achieve
accumulate time point t, either using action a, delegating
task another variable id. show later on, variable accumulate
values, since accumulated values never lost, optimal plans +
cannot longer n actions.
state variable v V , contains non-negative, extended real-valued function v D(xv ). Likewise, pair state variables {v, w}
causal graph CG contains either arc (v, w) arc (w, v), contains indicator
function v,w : D(xv ) D(xw ) {0, }. simplify specication v,w ,
dene set auxiliary constraints follows.
(S1) [Precondition Constraint] assignment v1 , . . . , vn X satises S1 i,
v V , (d, v, a, t) v implies that, w V(pre(a)),
pre(a)[w] {I[w]} {d | (d , , , ) w , < t}.

(1)

(S2) [Delegation Constraint] assignment v1 , . . . , vn X satises S2 i, v V ,
(d, w, , t) v implies that, Av Aw e(a)[v], (, w, a, t) w .
(S3) [Goal Achievement Constraint] assignment v1 , . . . , vn X satises S3 i,
v V(G),
G[v] {I[v]} {d | (d, , , ) v }.
(2)
Constraint S1 ensures preconditions actions variable committed
provided time. Constraint S2 ensures outsourced value achievements
fullled required time points. Finally, constraint S3 simply veries value
v induced v goal value. Importantly, S3 corresponds set n unary constraints,
792

fiThe Complexity Optimal Monotonic Planning

S1 S2 represented set binary constraints X . Given that,
functions specied

v (v ) =
cost(a),
(,v,a,)v

{
0, {v , w } satises S1(xv , xw ), S2(xv , xw ), S3(xv ) S3(xw )
v,w (v , w ) =
,
, otherwise

(3)

S1(xv , xw ), S2(xv , xw ), S3(xv ) correspond binary unary constraints
induced respectively S1, S2, S3 COP variables xv xw .
Let us take closer look COP+ constructed problems
scope Theorem 3.
(1) constraint network COP+ corresponds undirected graph induced
causal graph CG+ (= CG ). Hence, since tree-width latter bounded
constant scope theorem, tree-width constraint network
COP+ . nding optimal tree decomposition graph G NP-hard,
tree decomposition G width c tw(G) low constant c found
time polynomial size G (Robertson & Seymour, 1991; Becker & Geiger,
1996; Amir, 2010). Hence, COP+ solved time polynomial size
representation using standard message-passing algorithm constraint optimization
trees (Dechter, 2003).
(2) Recall values COP variable xv sets quadruples (d, id, a, t) size
. Then, size xv domain D(xv ) upper-bounded
(|D(v)| |{z}
n (|Av | + 1) (n)) ,
| {z }
| {z } | {z }


id



(4)



since = O(1), |D(xv )| = O(poly(||||)). Together (1), implies
COP+ solved time O(poly(||||)).
prove correctness compilation showing that, + unsolvable,
assignments X evaluate objective function (X ) , otherwise, objective minimized assignments X correspond
optimal plans + .
First, given assignment = v1 , . . . , vn X () < , show
induces valid plan + cost (). Note that, since () < ,
Eq. 3 satisfying constraints
S1-S3.

Consider multi-set Z = vV {(a, t) | (, v, a, t) v } induced , let
Z = {(a1 , t1 ), . . . , (am , tm )}, = |Z|,
arbitrary ordering Z that, 1 j < m, holds tj ti .
1 m, let v variable charge performing action ai , is,
(e(ai )[v], v, ai , ti ) v . w V(pre(ai )), Eq. 1 constraint S1 implies either
pre(ai )[w] = I[w] (pre(ai )[w], id, a, t) w < ti . latter case,
793

fiDomshlak & Nazarenko

id = w, construction , = aj j < i, denition
D(xw ), pre(ai )[w] = e(aj )[w]. Otherwise, id = w w = w,
denition S2, pre(ai )[w] = e(a )[w] (, w , , t) w . Thus, = aj
j < i, pre(ai )[w] = e(aj )[w]. Therefore, action sequence
= a1 , . . . ,
applicable initial state + , given that, satisfying S3 implies
plan + . Finally, immediate construction Eq. 3
cost( ) = ().
show optimal plan = a1 , . . . , + induces assignment
= v1 , . . . , vn X ( ) = cost(). denition MFDR,
1 state variable v V , IJa1 , . . . , ai1 K[v] IJa1 , . . . , ai K[v].
optimality , 1 m, exists least one variable v V
IJa1 , . . . , ai1 K[v] IJa1 , . . . , ai K[v]. particular, implies actions {a1 , . . . , }
dierent, variable v V ,


/v = {ai | IJa1 , . . . , ai1 K[v] IJa1 , . . . , ai K[v]},
then2 |/v| .
Adopting arbitrary ordering {v1 , . . . , vn } state variables V , 1 j n, let
/vj = {aj1 , . . . , ajmj }. turn, 1 l mj , let djl D(vj ) value achieved
accumulated vj action ajl , i.e., IJa1 , . . . , ajl K[vj ] \ IJa1 , . . . , ajl 1 K[vj ] = {djl }.

1 l mj , ajl j1
k=1 /vk , vj set contain (djl , vj , ajl , jl ), otherwise, vj
set contain (djl , vk , , jl ) k = min {k | ajl /vk }.
construction , action present value exactly one
variable xv , Eq. 3, v (v ) sums cost exactly once. Hence, satises
constraints S1-S3 enforced step functions v,w , ( ) =
cost(). former directly follows construction . 1 j n,
mj
let vj = {(djl , idjl , ajl , tjl )}l=1
. denition values djl above, set
values {dj1 , . . . , djmj } exactly set values vj gets accumulated relaxed
plan I, thus satisfaction S3 follows plan + . Again,
construction , sequence time points {tj1 , . . . , tjmj } corresponds time
points rst achievements {dj1 , . . . , djmj }, respectively, along ,
rst achiever ajl along , captured properly scheduled either vi neighbor
vi causal graph. Hence, constraints S1 S2 satised well.
nalizes proof compilation correctness, thus Theorem 3.

Note Theorem 3 particular answers second macro-question agenda:
Corollary 3 exist fragments FDR (even satiscing) planning NPequivalent, optimal relaxed planning polynomial-time.
2. corresponds
well-known fact that, notation, optimal plans MFDR cannot

longer vV |D(v)| n.

794

fiThe Complexity Optimal Monotonic Planning

corollary immediate Theorem 3 discovery Gimenez Jonsson
(2009b) FDR planning chain causal graphs NP-hard even restricted variables
domains size 5.
Following STRIPS vs. FDR discussion introduction, Theorem 3 trivially
implies optimal relaxed planning STRIPS tasks done time polynomial
|||| exponential tree-width causal graph. actually
example tractability fragment one benet switching
propositional representation: formulation result remains same,
coverage result grows because, size FDR variable domains bounded
= O(1), tree-width causal graph STRIPS representation
times larger FDR. However, smaller, identical.
Later, however, present results directly benet nite-domain input
representation planning tasks.
discussion remainder section addresses readers familiar
work Brafman Domshlak (2013) detail. discussion skipped without
loss continuity.
rst view, compilation proof Theorem 3 brings mind compilation algorithm
v1
v2
vn
behind proof Theorem 6 Brafman Domshlak (2013). One might thus naturally ask whether
algorithm cannot used directly proof
Theorem 3. stands, however, algorithm
vn+1
Brafman Domshlak yield polynomialtime complexity tasks Theorem 3
concerned. see why, consider FDR task = V, A, I, G, cost V = {v1 , . . . , vn+1 },
where, vi , D(vi ) = {0, 1}, I[vi ] = 0, G[vi ] = 1, = {a1 , . . . , }
V(pre(ai )) = , V(e(ai )) = {vi , vn+1 }, e(ai )[vi ] = e(ai )[vn+1 ] = 1. causal graph
, depicted above, tree-width 1. However, plan + , maxvV {|v |}
n, local depth + n. + cannot solved without applying
n actions least once, actions aects value variable
vn+1 . Hence, nding even non-optimal plan + using algorithm Brafman
Domshlak (2013) take time exponential ||||.
nal note, actually shown algorithm Brafman Domshlak
(2013) optimal polynomial-time sub-class MFDR tasks Theorem 3
restricted single-eect operators. multiple-eect actions complicate
matters, require dierent algorithmic approach guarantee planning tractability.

5. Positive Results II: M-unfoldable State Variables
Despite discouraging results Section 3, return consider FDR tasks
parametric-size domains. Recall that, variable values monotonic relaxation +
correspond sets values respective variables , large variable domains
+ given implicitly, via variable domains D(v1 ), . . . , D(vn ) . conciseness
representation, however, hides many aspects problem structure + otherwise
might exploited planning eciency. particular, reasoning domain
795

fiDomshlak & Nazarenko

transition graphs induced FDR tasks successfully exploited complexity
analysis FDR (Jonsson & Backstrom, 1998; Domshlak & Dinitz, 2001; Katz & Domshlak,
2008; Gimenez & Jonsson, 2009a). contrast, monotonic relaxations, true domain
transition graphs + , denoted henceforth DTG(v, + ), cannot always represented
explicitly number nodes graphs exponential ||||. However,
always, always be, case, focus planning
accessible monotonic variables.
Denition 2 Given FDR planning task = V, A, I, G, cost, eective domain
(v) v V + consists value subsets D+ (v) = 2D(v) \ reachable
{I[v]} DTG(v, + ). is, (v)
(i) I[v] ,
(ii) value , directed path I[v] unlabeled digraph
induced DTG(v, ) values along path belong .
elements (v) called eective values v + .
Denition 3 Let innite set FDR tasks, property state variables
that, task , partitions state variables satisfy
(referred -variables), satisfy . say -variables
monotonically unfoldable (M-unfoldable) exists integer k N that,
every task every -variable v , |D (v)| = O(||||k ).
Denition 3 property FDR state variables, particular,
property dened respect tasks causal graphs, root, sink, nodes
whose causal graph in-degrees larger causal graph out-degrees, etc. Informally, -variables set FDR tasks M-unfoldable if, every task
every -variable v , relevant subgraph DTG(v, + ) described explicitly
space polynomial representation size . instance, v trivially M-unfoldable
size domain bounded constant, even O(log(||||)). generally, let DTG (v, ) digraph obtained (labels ignored) domain transition
graph DTG(v, ) unifying parallel edges. hard verify Denitions 2 3
v M-unfoldable number arborescence subgraphs DTG (v, )
rooted I[v], covering G[v] v V(G), O(poly(||||)).
return consider fork-structured FDR tasks. Theorem 1 considered
fork-structured FDR tasks root variables unrestricted, consider
inverse fragment, corresponding fork-structured FDR tasks root variables
restricted. Optimal FDR planning tasks polynomial-time |D(r)| =
2 (Katz & Domshlak, 2010), NP-equivalent |D(r)| > 2 (Katz & Keyder, 2012).
contrast, Theorem 4 shows optimal relaxed planning fork-structured FDR
tasks polynomial-time much wider class root variables. Moreover, simple
observation behind construction proof Theorem 4 later generalized capture
much richer fragment causal graphs.
Theorem 4 Optimal relaxed planning polynomial time set FDR tasks
fork-structured causal graphs M-unfoldable root variables.
796

fiThe Complexity Optimal Monotonic Planning

Proof: Let = V, A, I, G, cost fork-structured FDR task root r Vleafs =
V \ {r} = {v1 , . . . , vn }. assume goal values specied variables Vleafs ;
none leaves Vleafs \ V(G) need change value all, thus
schematically removed problem. Given FDR task , optimal
plan relaxation + constructed follows.
eective values (r) consistent goal (that is, G[r]
r V(G)) processed one one, independently. eective value ,
extract following information.
(1) root variable r, determine cheapest path I[r] DTG(r, + ),
() denoting action sequence inducing path.
(2) leaf variable v Vleafs ,
(a) schematically remove domain transition graph DTG(v, )
arcs labeled actions supported , is, actions
r V(pre(a)) pre(a)[r] ,
(b) determine cheapest path I[v] G[v] arc-reduced domain
transition graph, (G[v]) denoting action sequence inducing
path.
Return concatenation action sequences ( ) (G[v1 ]) . . . (G[vn ])
[
]
n


cost( (G[vi ])) ,
= argmin cost(()) +
(r)

i=1

cost() action sequence sum costs actions along .
algorithm polynomial-time given explicit description eective part
DTG(r, + ), thus polynomial-time r M-unfoldable. Recall that, since
causal graph acyclic, action aects one variable. correctness
algorithm stems simple observation that, relaxed plan fork-structured
FDR task , = r v1 . . . vn relaxed plan , (trivially) identical
cost. Hence, searching optimal relaxed plan , restrict
plans latter form, immediate description algorithm
nds cheapest plan.

aside, following STRIPS vs. FDR discussion, note Theorem 4 provides
example exploiting value grouping induced FDR representation planning tasks. simple algorithm proof exploits fact actions
change value leaf variable depend value, prevents restrictions
placed either size leaf domains, structure domain
transition graphs. course, Theorem 4 reformulated terms STRIPS, yet
would require respective partition propositions given/discovered,
essentially equivalent starting something FDR input rst place.
scope tractability result Theorem 4 fairly limited terms
causal graph structure, nice property sets optimal relaxed plans forkstructured FDR tasks, exploited proof Theorem 4, generalized much
797

fiDomshlak & Nazarenko

wider fragment causal graphs. turn, generalization allows us provide next
tractability result wide fragment optimal relaxed planning FDR.
Lemma 1 Let = V, A, I, G, cost FDR task directed acyclic causal graph,
let {v1 , . . . , vn } arbitrary topological ordering V respect CG . Then,
plan + , = v1 . . . vn plan + .
Proof: Directed acyclicity causal graph particular implies action aects
one variable. proof lemma stems combining property
(i) fact preserves order actions vi , (ii) core property
monotonic relaxations + that, variable v, value D(v), state
relaxed task + , s[v], [v] reachable + .
Since CG forms DAG state variables ordered according topological
ordering CG , V(pre(a)[v1 ]) {v1 } actions v1 . Thus, order preservation
v1 along respect implies v1 applicable I, IJv1 K[v1 ] = IJK[v1 ],
IJv1 K[vi ] = I[vi ] > 1. Assume that, 1, v1 . . . vi applicable
I,
{
IJK[vj ], j
IJv1 . . . vi K[vj ] =
.
(5)
I[vj ],
j>i
Together topological ordering V order preservation vi +1 along
respect , Eq. 5 implies vi+1 applicable IJv1 . . . vi K,
IJv1

{
IJK[vj ],
j =i+1
.
. . . vi KJvi+1 K[vj ] =
IJv1 . . . vi K[vj ], otherwise

(6)

Putting Eqs. 5 6 together proves induction hypothesis, = n, Eq. 5
boils
IJ K = IJv1 . . . vn K = IJK.

Denition 4 Let innite set FDR tasks. say tasks Munfoldable state variables M-unfoldable.
Theorem 5 Let innite set M-unfoldable FDR tasks directed acyclic causal
graphs. tree-width node in-degree causal graphs bounded
constant, optimal relaxed planning polynomial-time.
Proof: Similarly proof Theorem 3, proof Theorem 5 based planningto-COP compilation. Given FDR task = V, A, I, G, cost, compile monotonic
relaxation + constraint optimization problem COP+ = (X , ) variables X ,
functions , global objective minimize (X ) that, + unsolvable,
assignments X evaluate objective function , otherwise,
optimum objective obtained assignments X correspond
optimal plans + . specic construction COPs relies property
monotonic relaxations DAG-structured FDR tasks expressed Lemma 1.
798

fiThe Complexity Optimal Monotonic Planning

Given FDR task = V, A, I, G, cost theorem, COP+ = (X , ) specied
follows. state variable v V ,
X contains variable xv domain D(xv ) = (v), is, eective domain
v + ,
contains non-negative, extended real-valued function v v immediate
ancestors causal graph, is, {xv } {xw | w pred(v)}.
Assuming arbitrary xed ordering {w1 , . . . , wk } vs immediate ancestors pred(v),
pred (pred(v)) = (w1 ) (wk ), let DTG(v, + |pred ) denote
restriction DTG(v, + ) edges supported pred : edge marked
action remains DTG(v, + |pred ) if, w V(pre(a))\{v}, pre(a)[w]
pred [w]. Given that, eective value (v) pred (pred(v)),
v (, pred ) = reachable I[v] DTG(v, + |pred ), G[v] specied
yet G[v] . Otherwise, v (, pred ) equals cost cheapest path I[v]
DTG(v, + |pred ). follows, action sequence inducing cheapest path
denoted (|pred ).
properties COP+ constructed problems scope Theorem 5 follows.
(1) constraint network COP+ corresponds (the undirected graph induced by)
moral graph causal graph CG . Since in-degree tree-width CG
bounded constant, tree-width COP constraint network.
mentioned before, given graph G, tree decomposition graph G width
c tw(G) low constant c found time polynomial size G
exponential tw(G). Hence, since COP = O(1), COP+ solved time
polynomial size explicit representation.
(2) Since M-unfoldable, domain size COP variable O(poly(||||)). Together (1), implies COP+ solved time O(poly(||||)).
(3) denitions monotonic relaxation domain transition graphs, explicit
description DTG(v, + ) M-unfoldable FDR task polynomial ||||.
Hence, construction functional components , thus entire COP+ ,
done time O(poly(||||)).
(4) construction COP+ Lemma 1, topological ordering {v1 , . . . , vn }
V , every complete assignment COP variables X

v ([v], [pred(v)]) = =
vV

induces relaxed plan
([v1 ]|[pred(v1 )]) . . . ([vn ]|[pred(vn )])
cost , vice versa. Thus, + solvable, then, given assignment
X minimization objective COP+ obtained, derive
(in O(poly(||||)) time) optimal relaxed plan . Otherwise, + unsolvable,
assignments X evaluate objective function .
799

fiDomshlak & Nazarenko

ONML
HIJK
v1


HIJK
ONML
v2


HIJK
ONML
v3

/ d1,2

d1,1
d1,1

d2,1

d1,2
d1,3

d2,2
d2,3

ONML
HIJK
HIJK
HIJK
/ ONML
/ ONML

d1,1 Qo Q
d1,3

BB QQQ | 1,2 BB
mm|


BB Q|Q|Q
B
|


BB|| QQQmmmmBBB|||
|B
mmQQQQ ||BB
|| BBmmm
Q| B
}|||mmmmm BB! }||| QQQQQBB!
mv
(
HIJK
ONML
HIJK
HIJK
/ ONML

/ ONML
d2,1 Qo Q

d2,3

BB QQQ | 2,2 BB


|

BB Q|Q|Q
B
|


BB|| QQQmmmmBBB|||
|B
mmQQQQ ||BB
|| BBmmm
Q| B
}|||mmmmm BB! }||| QQQQQBB!
mv
(
HIJK
ONML
HIJK
HIJK
/ ONML
/ ONML
d3,1
d3,2
d3,3

d1,1

#

/ d2,2
;

d2,1

d3,1

/ d1,3

d1,2
d1,3

#
/ d2,3
;

d2,1

#

/ d3,2
;

d2,2
d2,3

#
/ d3,3
;

(a)

(b)

Figure 1: Illustration example used discussion Theorem 5.
nalizes proof Theorem 5, Corollary 4 generalizes digraphs
almost DAGs.

Note Theorem 5 provides yet another example exploiting value grouping induced FDR representation planning tasks. Consider planning task family
(n) = V, A, I, G, cost V = {v1 , . . . , vn }; 1 n, D(vi ) = {di,1 , . . . , di,n };
I[vi ] = di,1 ; G[vi ] = di,n ; actions

A=
{ai,k,j = {vi di,k , vi1 di1,j }, {vi di,k+1 }}.
|
{z
} |
{z
}
1i,jn
1kn1

pre

e

Figure 1a illustrates causal graph domain transition graphs task (3) .
causal graphs (n) form directed chains, thus tree-width node
in-degree causal graphs (n) equal 1. Likewise, eective domain (vi )
vi +
(n) size n, thus tractability optimal relaxed planning (n)
directly covered Theorem 5. contrast, variable value di,j represented
separate propositional variable, inducing causal graph Figure 1b,
tree-width node in-degree family induced causal graphs order
n, fact, causal graph even acyclic. Therefore, Theorem 5 longer
directly applicable.
Corollary 4 Let innite set M-unfoldable FDR tasks. size strongly
connected components, tree-width, node in-degree causal graphs
bounded constant, optimal relaxed planning polynomial-time.
Proof: FDR task causal graph whose strongly connected components (SCCs)
size k compiled equivalent FDR task directed acyclic
causal graph merging variables SCC single variable (Seipp & Helmert,
2011). compilation done time polynomial |||| exponential k.
causal graph CGm obtained causal graph CG contracting nodes
SCC. Since node contraction decrease tree-width, tw(CGm )
800

fiThe Complexity Optimal Monotonic Planning

tw(CG ), thus tw(CGm ) = O(1). Likewise, maximal node in-degree CG
c, maximal node in-degree CGm ck, thus O(1). Finally,
domain variable u obtained merging SCC {v1u , . . . , vku },
k k, corresponds cross-product domains SCCs variables.
easy verify Denition 2 (u) (v1u ) (vku ), thus, together
k = O(1), M-unfoldability v1u , . . . , vku implies |D (u)| = O(poly(||||)), tting3
Denition 3.

Returning statement Theorem 5, comments extensions beyond
Corollary 4 place. First, note Theorem 5 generalize Theorem 4
fork-structured FDR tasks latter allows general, M-unfoldable,
leaf variables. However, easy see Theorem 5 stratied allow
generalization. Since variable depends leaf v, care v
achieving G[v]. Thus, optimal relaxed plan , v induces simple path,
general arborescence, DTG(v, ). Hence, using binary-valued (G[v] achieved: yes/no)
COP variables xv DAG leaf v, specifying respective functions v using
procedure proof Theorem 4, scope Theorem 5 extended generalize
Theorem 4.
Second, case DAG-structured causal graphs, Denition 2 eective domains,
notion M-unfoldability based, overly conservative. Instead deriving
eective domains variables isolation, derive topological order
causal graph, given already derived eective domains immediate ancestors.
specic domains, substantially extend scope M-unfoldability FDR tasks
DAG causal graphs.
Finally, Theorem 5 requires tree-width, in-degree causal
graph bounded constant. extra condition, latter sucient,
necessary. Below, notion prevail decomposability, list two local
properties state variables guarantee polynomial-time optimal relaxed planning
arbitrary acyclic causal graphs xed tree-width. likely
helpful properties exist, thus boundaries prevail decomposability
extended. Nicely, optimal relaxed planning remain polynomial-time even dierent
state variables satisfy dierent properties, even state variables
prevail decomposable, xed in-degree.
Denition 5 Let innite set FDR tasks, property state variables
that, task , partitions state variables satisfy
(referred -variables), satisfy . say -variables
prevail decomposable if, every task every -variable v , either
(i) set PRv = {pre(a)[pred(v)] | Av } preconditions actions Av variables
v size O(log(||||)),
3. Note possible (u) (v1u ) (vku ). instance, V = {x, y}, D(x) = D(y) =
{0, 1}, = {x 0, 0}, G = {x 1, 1}, = {{x 0, 1}, {x 1}, {y 0, x
1}, {y 1}}, (x) = {{0}, {0, 1}}, (y) = {{0}, {0, 1}}, (xy) = {{x 0, 0}}.
fact, example easily extended merged variable xy M-unfoldable,
x not.

801

fiDomshlak & Nazarenko

(ii) set ARBv arborescence subgraphs DTG(v, ) rooted I[v], covering G[v]
v V(G), size O(log(||||)).
say tasks prevail decomposable state variables
prevail decomposable.
Note prevail decomposability type (i) tangential notion M-unfoldability:
neither former imply latter, way around. contrast, prevail
decomposability type (ii) direct stratication M-unfoldability latter
considers compacted version DTG (v, ) DTG(v, ), furthermore, allows
polynomial (rather logarithmic) bound number arborescence subgraphs.
Theorem 6 Let innite set M-unfoldable, prevail decomposable FDR tasks
directed acyclic causal graphs. tree-width causal graphs bounded
constant, optimal relaxed planning polynomial-time.
Proof: well, proof Theorem 6 follows planning-to-COP compilation
methodology. However, compilation prevail decomposability must dier
one proof Theorem 5 since longer rely xed in-degree causal
graphs derive xed tree-width constraint networks xed tree-width
causal graphs. ease presentation, rst specify compilation assuming
state variables satisfy specic condition (i) Denition 5. extend
specication cover alternative condition (ii) Denition 5 well.
construction need establish certain graph-theoretic formalism
respective notation. Let G = (V, E) graph, let N : V 2V node neighborhood function G, is, N (v) = {u | {v, u} E}. splitting v V
support N (v) transforms G adding new vertex v edge {v, v }, and,
u S, removing edge {v, u} adding edge {v , u}. Informally, splitting seen
(non-unique) reverse process edge contraction, nodes added G splittings
called stretch nodes. example, Figure 2b depicts graph obtained graph
Figure 2a splitting node v support {x, y, u} N (v) = {x, y, u, w},
adding stretch node v(1) .
graph G expansion G G transformed G sequence splittings.
example, Figure 2c depicts graph obtained graph Figure 2a rst
splitting node v support {x, y} N (v) = {x, y, u, w}, splitting v
support {u, w} N (v) = {v(1) , u, w}. specically, G = (V , E )
expansion G = (V, E) exist functions f : V V g : E E

(a) v V , subgraph G induced f 1 (v) = {v V | f (v ) = v} tree,
(b) {v, u} E, g({v, u}) = {v , u } f (v ) = v f (u ) = u.
tree subgraph (v) G induced f 1 (v) called stretch tree v.
bijective correspondence leaves (v) neighbors N (v) v via
function g: {v, u} E, exactly one edge E , g({v, u}), directly
connects (v) (u). words, f induces partition V ,
part stretch tree (v) v V , g maps edges G edges
802

fiThe Complexity Optimal Monotonic Planning

x-



-
--
-
v/
///
//



u

w

(a)

x






v(1)





x ==

==

v(1)
v

x(1)

v

w

u(1)

@@
@

u

(b)

v(1)

y(1)

v

v(2)
u



x

w

(c)

v(2)

u

w(1)
w

(d)

Figure 2: Node splitting graph expansions.
G connect parts partition. Finally, node degree G
bounded 3, G called sub-cubic. example, expansion Figure 2c
sub-cubic, expansion Figure 2b not.
terminology mostly adopted Markov Shi (2011). addition,
call expansion G G fully separating stretch trees G connected
stretch nodes, original nodes, G. is, G = (V , E ) fully
separating expansion G = (V, E) exists function : V V that,
v V , holds (v) f 1 (v) and, edge { (v), v } E , v f 1 (v).
example, expansion Figure 2c fully separating, expansion Figure 2d
is.4
Given notion graph expansion, problem solved
graph G, eciency solving problem depends badly, possibly exponentially,
node degree G, try reformulate problem sub-cubic expansion
G G. However, eciency problem question depends badly
graphs tree-width, tree-width G close possible G.
(The tree-width G cannot smaller tree-width G G G
minor.) numerous ecient schemes sub-cubic graph expansion,
create expansions arbitrarily larger tree-width expandees.
Recently, however, Markov Shi (2011) showed negative side-eect always
eliminated, sometimes even eciently.
Theorem 3.1 Markov Shi (2011) states main result: polynomialtime algorithm that, given graph G tree decomposition width w, computes
sub-cubic expansion G G tw(G ) w + 1. particular, result implies
graph G admits sub-cubic expansion whose tree-width tw(G) + 1,
expansion constructed eciently arbitrary graph families xed
4. Without eective loss generality, one assume (v) = v, is, nodes V never
mapped stretch nodes, mirrors V . However, decided stick
explicit use function avoid confusion nodes V identically named nodes
V .

803

fiDomshlak & Nazarenko

tree-width.5 Moreover, straightforward verify expansion transformed
linear time fully separating expansion, without increasing tree-width node
degrees. Therefore, Theorem 3.1 Markov Shi (2011) holds even request fully
separating sub-cubic expansions.6
COP compilation exploits tree-width friendly expansions causal graphs.
Since focus Theorem 5 digraph families C tree-width C
bounded constant, Theorem 3.1 Markov Shi (2011), digraph G C
eciently associated fully separating sub-cubic expansion G tree-width
tw(G) + 1. Note, however, construction G ignores orientation arcs
G: G digraph, G undirected graph, construction based
tree decomposition undirected graph induced G. Since COP compilation
depend direction arcs causal graph, restore G
relevant bits information G.
rst give auxiliary notation.
Given fully separating expansion G (the undirected graph induced by) digraph
G = (V, E), consider stretch trees (v) rooted respective nodes (v),
Tv (v) denote subtree (v) rooted v (v).
Recalling graphs G interest DAGs, leaves (v)
bijectively associated neighbors N (v) v G, let N (v), N (v)
N (v) partition vs neighbors G immediate ancestors immediate
descendants v, respectively.
(v) denote respective neighbors
Nvin (v) N (v) Nvout
(v) N
v associated leaves stretch subtree Tv (v). is,
(v) u (u),
u Nvin (v) Nvout
(v) if, leaf v
v





G contains edge {v , u } (i.e., g({v, u}) = {v , u }).

proceed specifying COP compilation FDR tasks Theorem 6.
Given task = V, A, I, G, cost, let G = (V , E ) fully separating, sub-cubic
expansion G causal graph CG tree-width tw(CG ) + 1. respective
constraint optimization problem COP+ = (X , ) specied follows.
v V , X contains variable xv schematically associated root
(v) (v), variable xv /v stretch-tree node v (v) \ { (v)}.
domain variable xv
{
{ | (v), G[v] }, v V(G)
D(xv ) =
.
(7)
(v),
otherwise
domain variable xv /v
D(xv /v ) = {0, 1}mv D(xv ),

(8)

5. determining optimal tree decomposition graph NP-hard, done polynomial time
graph families xed tree-width (Bodlaender, 1996).
6. Requiring expansions fully separating luxury need: relying property
simplies compilation scheme described next, scheme modied require
full separation.

804

fiThe Complexity Optimal Monotonic Planning

mv = |PRv |. is, D(xv /v ) set pairs , , {0, 1}mv
(v). {0, 1}mv , DTG(v, + |) denote restriction DTG(v, + )
edges supported : Assuming arbitrarily xed numbering elements
PRv = {pr1 , . . . , prmv }, edge marked action pre(a)[pred(v)] = pri
PRv remains DTG(v, + |) [i] = 1. (v), c(|) denote
cost cheapest path I[v] DTG(v, + |); case unreachability,
c(|) = .
Similarly way node causal graphs expansion G associated
COP variable, associated non-negative, extended real-valued function.
state variable v V :
(I) stretch tree root (v) associated function v . scope v
Q(v ) = {xv } {xv /v | v N ( (v))},


N : V 2V node neighborhood function G . Note |N ( (v))|
3 G sub-cubic. D(xv ) assignment = {v , v }v N ( (v))
Q(v ) \ {xv },
{
c(|H() ), v N ( (v)) : v =
v (, ) =
,
(9)
,
otherwise
H() Hadamard, entrywise, product indicator vectors
{v }v N ( (v)) .
(II) leaf stretch node v (v) associated 0/ indicator function v /v ,
scope
Q(v /v ) = {xv /v , xu /u },
u leaf node (u) g({v, u}) = {v , u }. orientation
arcs within causal graph CG matters. Specically, {v, u} represents
causal graph arc u v , v /v zeroes assignments (v , , u , u )

vector v enables preconditions PRv are, passively
actively, supported value u u,
vector u enables preconditions PRu , since v condition
u-changing actions DAG-structured planning task .
is, v , v D(xv /v ) u , u D(xu /u ),


0,

u = 1
v /v (v , v , u , u ) =
1 mv : (v [i] = 0) (u V(pri ) pri [u] u ) .


, otherwise
(10)
Note value v /v independent v component v , v , u , u .
805

fiDomshlak & Nazarenko

Otherwise, {v, u} represents causal graph arc7 v u, conversely,


0, v = 1




v /v (v , v , u , u ) =
1 mu : (u [i] = 0) (v V(pri ) pri [v] v ) .


, otherwise
(11)
(III) internal stretch node v (v) associated 0/ indicator function
v /v , scope comprises variable xv /v , together variables xv /v
correspond immediate descendants v Tv (v). is,
Q(v /v ) = {xv /v } {xv /v | v N (v ) Tv (v)}.
v , v D(xv /v ) assignment = {v , v } Q(v /v ) \
{xv /v }, v /v zeroes (v , v , ) vector v enables
preconditions PRv (passively actively) supported
immediate ancestors u Nvin (v) via values ancestors commit
respective stretch-tree root COP variables xu . is,
{
0, v = H() v N (v ) Tv (v) : v = v
v /v (v , v , ) =
. (12)
, otherwise
words, starting Eqs. 10 11, support provided Nvin (v) v
communicated v indicator vectors v , aggregated/summarized
Eq. 12 Hadamard vector product H() .
Complexity-wise, properties COP+ constructed follows.
(1) constraint network COP+ obtained expansion G replacing
graph
subgraph G induced nodes Q( ) clique Q( ). Let GQ
nodes Q( ), x X , edges {Q( ), Q( )} (only) pairs ,
isomorphic
Q( ) Q( ) = . construction COP functions , GQ

G . Likewise, since |Q( ) Q( )| 1 pairs functions , , tree-width
) max |Q( )|. Together implies
COP constraint network tw(GQ



COP tw(GQ
)max |Q( )| = tw(G )max |Q( )| 4tw(G ) 4(tw(CG )+1) = O(1).




Hence, since nding constant-factor approximation graphs tree-width polynomial size graph exponential tree-width, COP+
solved time polynomial size representation.
(2) M-unfoldability Eq. 7, v V , domain size COP variable xv
O(poly(||||)). domain stretch node variable xv /v cross-product
two sets. size second set Eq. 8 O(poly(||||)) domain
size respective variable xv . size rst set Eq. 8 2|PRv | and,
Denition 5, 2|PRv | = 2O(log(||||)) = O(poly(||||)). Together (1), implies
COP+ solved time O(poly(||||)).
7. Since Theorem 6 devoted directed acyclic causal graphs, address case
CG contains (v, u) (u, v).

806

fiThe Complexity Optimal Monotonic Planning

(3) denition monotonic relaxation denition domain transition graphs,
explicit description DTG(v, + ) M-unfoldable FDR task polynomial
||||. Hence, construction functional components Eqs. 9-12, thus
entire COP+ , done time O(poly(||||)).

proceed prove correctness COP+ = (X , ). is, prove
+ unsolvable, assignments X evaluate objective function
(X ) , otherwise, objective minimized assignments
X correspond optimal plans + .
First, given assignment X () < , show induces
valid plan + cost (). Eqs. 9 12, () < implies that,
v V xv /v stretch tree (v), [xv /v ] {, [xv ]}. is,
relaxation value v assigned xv consistently propagated nodes
(v), particular, leaves.
Let leaf node xv /v (v) connect (v) (u) causal graph neighbor
u N (v), let [xv /v ] = v , [xv ]. u N (v), Eq. 10, v /v () =
implies v encodes preconditions PRv disabled
relaxation value [xu ] u. Otherwise, u N (v), then, DAG structure CG ,
u nothing preconditions actions aecting v + , Eq. 11, v /v () =
implies v = 1 trivially enables preconditions PRv .
Given that, (leaf internal) stretch node (v), let [xv /v ] = v , [xv ].
conjunctive structure preconditions FDR Hadamard vector product
Eq. 12, v /v () = implies v encodes preconditions PRv
notdisabled values [xu ] u Nvin (v). Finally, denition graph
expansion, v N ( (v)) Nvin (v) = N (v). Thus, Eq. 11, v () = implies [xv ]
reachable I[v] properly restricted domain transition graph DTG(v, + |[Xv ])
Xv = {xu | u pred(v)}, v () equals cost cheapest
path. rest follows DAG structure CG Lemma 1. proof
opposite direction straightforward construction COP+ serialization
Lemma 1.


nal note return denition prevail decomposability, specically,
second sucient condition that, state variables v V , set ARBv arborescence
sugraphs DTG(v, ) rooted I[v], covering G[v] v V(G), size O(log(||||)).
condition addressed COP construction far, switching
rst second sucient condition prevail decomposability requires
semantics indicator vectors changed: Instead encoding support
pred(v) provide individual preconditions actions Av , encode support
pred(v) provide entire arborescences ARBv DTG(v, ). Since condition
requires |ARBv | = O(log(||||)), support encoded reasoned eciently.
Note choice two conditions made variable-by-variable basis,
thus two conditions mutually exclusive complementary.
807

fiDomshlak & Nazarenko


causal graph
extra condition
xed size
= O(1)
|D(v)| = O(1)
= O(1) & DAG |D(v)| = O(1)
= O(1) & DAG in-degree = O(1)
= O(1) & DAG

FDR
P?
Yes





MFDR
P?

Yes
Yes
Yes, M-unfoldable
Yes, M-unfoldable
prevail decomposable

Th.
Th.
Th.
Th.
Th.

2
3
3
5
6

Table 1: summary main results optimal MFDR planning, contrasted
previously established complexity corresponding fragments optimal FDR
planning. table, fragment FDR/MFDR planning, characterized
terms causal graph tree-width , causal graph in-degree, upper
bound |D(v)| size variable domains. M-unfoldability prevail
decomposability two properties MFDR tasks introduced
exploited work.

6. Summary Future Work
took step towards ne-grained classication worst-case time complexity optimal
monotonic planning, focus gets harder gets easier
switching optimal planning optimal relaxed planning, context nite-domain
planning task representations. Along way, established negative positive
results complexity wide fragments problem, negative results
emphasizing role structure state variable domains, positive results
emphasizing role causal graph topology. Table 1 lists main results optimal
monotonic planning, contrasted complexity corresponding fragments
optimal FDR planning. key conclusions follows.
1. Optimal planning monotonic relaxations hard even restricted simple
causal graph structures, complexity stems size state
variable domains.
2. Restricted planning tasks constant-bounded state variable domains, problem becomes solvable time exponential tree-width causal graph,
known much even non-optimal regular planning.
3. tree-width digraphs independent edge directions, exploiting
directed structure causal graph together tree-width allows
computational tractability expanded beyond xed-size state variable domains.
latter conclusion opens interesting venue investigation.
addressed directed acyclic causal graphs, scope tractability perhaps expanded exploiting existing directed notions graph width (Johnson, Robertson,
Seymour, & Thomas, 2001; Hunter & Kreutzer, 2008; Berwanger et al., 2012). might
808

fiThe Complexity Optimal Monotonic Planning

especially appealing tree-width standard planning benchmarks natural FDR encodings appear xed across respective families
tasks.
Another interesting direction would examine results techniques introduced wider context: recently introduced framework red-black
relaxations (Katz et al., 2013b). red-black (RB) planning, variables partitioned
two sets: black set adopts regular, value switching semantics FDR,
red set adopts monotonic, value accumulating semantics MFDR. context
satiscing planning, complexity analysis RB planning complexity lens
causal graph topology already led advances practice heuristic-search
planning (Katz et al., 2013a; Katz & Homann, 2013). take similar step optimal
planning, admissible heuristics based RB relaxations must devised. That,
turn, calls identifying tractable fragments optimal RB planning. cautiously
optimistic results techniques presented paper found valuable context RB planning well. instance, positive result Theorem 4
fork-structured MFDR tasks straightforwardly extended RB tasks
root variables taking monotonic semantics leaves keeping regular, FDR
semantics. Similarly, positive result Theorem 5 DAG-structured MFDR tasks
straightforwardly extended RB tasks black-painted leaf variables. interesting
question respect whether computational tractability optimal RB planning
extended causal graphs internal nodes get keep original FDR
semantics.

Acknowledgments
work partly supported Israel Science Foundation (ISF) grant 1045/12,
EOARD grant FA8655-12-1-2096.

References
Amir, E. (2010). Approximation algorithms treewidth. Algorithmica, 56 (4), 448479.
Arnborg, S., Cornell, D. G., & Proskurowski, A. (1987). Complexity nding embeddings
k-tree. SIAM Journal Algebraic Discrete Methods, 8, 277284.
Backstrom, C., & Klein, I. (1991). Planning polynomial time: SAS-PUBS class.
Computational Intelligence, 7 (3), 181197.
Backstrom, C., & Nebel, B. (1995). Complexity results SAS+ planning. Computational
Intelligence, 11 (4), 625655.
Becker, A., & Geiger, D. (1996). suciently fast algorithm nding close optimal
junction trees. Proceedings 12th Conference Uncertainty Articial
Intelligence (UAI), pp. 8189.
Berwanger, D., Dawar, A., Hunter, P., Kreutzer, S., & Obdzralek, J. (2012). DAG-width
directed graphs. Journal Combinatorial Theory, Series B, 102 (4), 900923.
Betz, C., & Helmert, M. (2009). Planning h+ theory practice. Proceedings
32nd Annual German Conference Articial Intelligence (KI), pp. 916.
809

fiDomshlak & Nazarenko

Bodlaender, H. L. (1996). linear-time algorithm nding tree-decompositions small
treewidth. SIAM Journal Computing, 25 (6), 13051317.
Bonet, B., & Gener, H. (2001). Planning heuristic search. Articial Intelligence, 129 (1
2), 533.
Bonet, B., & Helmert, M. (2010). Strengthening landmark heuristics via hitting sets.
Proceedings 19th European Conference Articial Intelligence, pp. 329334,
Lisbon, Portugal.
Brafman, R. I., & Domshlak, C. (2006). Factored planning: How, when, not.
Proceedings 18th National Conference Articial Intelligence (AAAI), pp.
809814, Boston, MA.
Brafman, R. I., & Domshlak, C. (2013). complexity planning agent teams
implications single agent planning. Articial Intelligence, 198, 5271.
Bylander, T. (1994). computational complexity propositional STRIPS planning.
Articial Intelligence, 69 (1-2), 165204.
Cai, D., Homann, J., & Helmert, M. (2013). Enhancing context-enhanced additive
heuristic precedence constraints. Proceedings 19th International Conference Automated Planning Scheduling (ICAPS), pp. 5057.
Chen, H., & Gimenez, O. (2010). Causal graphs structurally restricted planning. Journal Computer System Sciences, 76 (7), 579592.
Dechter, R. (2003). Constraint Processing. Morgan Kaufmann.
Domshlak, C., & Dinitz, Y. (2001). Multi-agent o-line coordination: Structure complexity. Proceedings Sixth European Conference Planning (ECP), pp. 277288.
Downey, R. G., & Fellows, M. R. (1999). Parameterized Complexity. Springer-Verlag, New
York.
Edelkamp, S. (2001). Planning pattern databases. Proceedings European
Conference Planning (ECP), pp. 1324.
Fabre, E., Jezequel, L., Haslum, P., & Thiebaux, S. (2010). Cost-optimal factored planning:
Promises pitfalls. Proceedings International Conference Automated
Planning Scheduling (ICAPS), pp. 6572.
Fikes, R. E., & Nilsson, N. (1971). STRIPS: new approach application theorem
proving problem solving. Articial Intelligence, 2, 189208.
Flum, J., & Grohe, M. (2006). Parameterized Complexity Theory. Springer-Verlag.
Fox, M., & Long, D. (2001). Stan4: hybrid planning strategy based subproblem
abstraction. AI Magazine, 22 (3), 8184.
Fox, M., & Long, D. (2003). PDDL2.1: extension PDDL expressing temporal
planning problems. Journal Articial Intelligence Research, 20, 61124.
Gimenez, O., & Jonsson, A. (2009a). inuence k-dependence complexity
planning. Proceedings 19th International Conference Automated Planning
Scheduling (ICAPS), pp. 138145.
810

fiThe Complexity Optimal Monotonic Planning

Gimenez, O., & Jonsson, A. (2009b). Planning chain causal graphs variables
domains size 5 NP-hard. Journal Articial Intelligence Research, 34, 675706.
Halin, R. (1976). s-functions graphs. Journal Geometry, 8, 171186.
Helmert, M. (2004). planning heuristic based causal graph analysis. Proceedings
Fourteenth International Conference Automated Planning Scheduling
(ICAPS), pp. 161170.
Helmert, M. (2006). Fast Downward planning system. Journal Articial Intelligence
Research, 26, 191246.
Helmert, M. (2009). Concise nite-domain representations PDDL planning tasks. Articial Intelligence, 173, 503535.
Helmert, M., & Domshlak, C. (2009). Landmarks, critical paths abstractions: Whats
dierence anyway?. Proceedings 19th International Conference Automated Planning Scheduling (ICAPS), pp. 162169.
Helmert, M., & Gener, H. (2008). Unifying causal graph additive heuristics. Proceedings 18th International Conference Automated Planning Scheduling
(ICAPS), pp. 140147.
Helmert, M., Haslum, P., & Homann, J. (2007). Flexible abstraction heuristics optimal
sequential planning. Proceedings 17th International Conference Automated
Planning Scheduling (ICAPS), pp. 200207.
Helmert, M., & Mattmuller, R. (2007). Accuracy admissible heuristic functions selected planning domains. Proceedings 23rd AAAI Conference Articial
Intelligence, pp. 938943.
Homann, J. (2005). ignoring delete lists works: Local search topology planning
benchmarks. Journal Articial Intelligence Research, 24, 685758.
Homann, J. (2011). Analyzing search topology without running search: connection causal graphs h+ . Journal Articial Intelligence Research, 41,
155229.
Homann, J., & Nebel, B. (2001). planning system: Fast plan generation
heuristic search. Journal Articial Intelligence Research, 14, 253302.
Hunter, P., & Kreutzer, S. (2008). Digraph measures: Kelly decompositions, games,
orderings. Theoretical Computer Science, 399 (3), 206219.
Johnson, T., Robertson, N., Seymour, P. D., & Thomas, R. (2001). Directed tree-width.
Journal Combinatorial Theory, Series B, 82 (1), 138154.
Jonsson, P., & Backstrom, C. (1998). State-variable planning structural restrictions:
Algorithms complexity. Articial Intelligence, 100 (12), 125176.
Karp, R. (1972). Reducibility among combinatorial problems. Complexity Computer
Computations, pp. 85103. Plenum Press, New York.
Katz, M., & Domshlak, C. (2008). New islands tractability cost-optimal planning.
Journal Articial Intelligence Research, 32, 203288.
811

fiDomshlak & Nazarenko

Katz, M., & Domshlak, C. (2010). Implicit abstraction heuristics. Journal Articial
Intelligence Research, 39, 51126.
Katz, M., & Homann, J. (2013). Red-black relaxed plan heuristics reloaded. Proceedings
6th Annual Symposium Combinatorial Search (SOCS), pp. 105113.
Katz, M., Homann, J., & Domshlak, C. (2013a). Red-black relaxed plan heuristics.
Proceedings 27th AAAI Conference Articial Intelligence (AAAI), pp. 489
495.
Katz, M., Homann, J., & Domshlak, C. (2013b). said need relax variables?. Proceedings 23rd International Conference Automated Planning
Scheduling (ICAPS), pp. 126134.
Katz, M., & Keyder, E. (2012). Structural patterns beyond forks: Extending complexity
boundaries classical planning. Proceedings 26th AAAI Conference
Articial Intelligence (AAAI), pp. 17791785.
Keyder, E., & Gener, H. (2008a). Heuristics planning action costs revisited.
Proceedings 18th European Conference Articial Intelligence (ECAI), pp.
588592.
Keyder, E., & Gener, H. (2008b). Heuristics planning action costs revisited.
Proceedings 18th European Conference Articial Intelligence, pp. 588592.
Markov, I. L., & Shi, Y. (2011). Constant-degree graph expansions preserve treewidth.
Algorithmica, 59, 461470.
McDermott, D. V. (1999). Using regression-match graphs control search planning.
Articial Intelligence, 109 (1-2), 111159.
Nissim, R., & Brafman, R. I. (2012). Multi-agent parallel distributed systems.
Proceedings 11th International Conference Autonomous Agents Multiagent Systems (AAMAS), pp. 12651266.
Nissim, R., Brafman, R. I., & Domshlak, C. (2010). general, fully distributed multiagent planning algorithm. Proceedings 9th International Conference
Autonomous Agents Multiagent Systems (AAMAS), pp. 13231330.
Pednault, E. (1989). ADL: Exploring middle ground STRIPS situation calculus. Proceedings 1st International Conference Principles
Knowledge Representation Reasoning, pp. 324331.
Robertson, N., & Seymour, P. D. (1984). Graph minors III: Planar tree-width. Journal
Combinatorial Theory, 36, 4963.
Robertson, N., & Seymour, P. D. (1991). Graph minors X: Obstructions tree decomposition. Journal Combinatorial Theory, Series B, 52 (2), 153190.
Seipp, J., & Helmert, M. (2011). Fluent merging classical planning problems. Proceedings ICAPS-2011 Workshop Knowledge Engineering Planning
Scheduling (KEPS), pp. 4753.

812


