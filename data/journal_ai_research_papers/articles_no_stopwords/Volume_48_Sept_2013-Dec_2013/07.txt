Journal Artificial Intelligence Research 48 (2013) 953-1000

Submitted 09/13; published 12/13

Constraint Solver Flexible Protein Models
Federico Campeotto

campe8@nmsu.edu

Dept. Computer Science, New Mexico State University
Depts. Math. & Computer Science, University Udine

Alessandro Dal Palu

alessandro.dalpalu@unipr.it

Dept. Math. & Computer Science, University Parma

Agostino Dovier

agostino.dovier@uniud.it

Dept. Math. & Computer Science, University Udine

Ferdinando Fioretto

ffiorett@cs.nmsu.edu

Dept. Computer Science, New Mexico State University
Depts. Math. & Computer Science, University Udine

Enrico Pontelli

epontell@cs.nmsu.edu

Dept. Computer Science, New Mexico State University

Abstract
paper proposes formalization implementation novel class constraints aimed modeling problems related placement multi-body systems
3-dimensional space. multi-body system composed body elements, connected
joint relationships constrained geometric properties. emphasis investigation use multi-body systems model native conformations protein
structureswhere body represents entity protein (e.g., amino acid,
small peptide) geometric constraints related spatial properties
composing atoms. paper explores use proposed class constraints support
variety different structural analysis proteins, loop modeling structure
prediction.
declarative nature constraint-based encoding provides elaboration tolerance
ability make use additional knowledge analysis studies. filtering
capabilities proposed constraints allow control number representative
solutions withdrawn conformational space protein, means
criteria driven uniform distribution sampling principles. scenario possible
select desired degree precision and/or number solutions. filtering component
automatically excludes configurations violate spatial geometric properties
composing multi-body system. paper illustrates implementation constraint
solver based multi-body perspective empirical evaluation protein structure
analysis problems.

1. Introduction
Constraint Programming (CP) declarative programming methodology gained
predominant role addressing large scale combinatorial optimization problems.
paradigm, CP provides tools necessary guide modeling resolution search
problemsin particular, offers declarative problem modeling (in terms variables
constraints), ability rapidly propagate effects search decisions, flexible
efficient procedures explore search space possible solutions. field CP
c
2013
AI Access Foundation. rights reserved.

fiCampeotto, Dal Palu, Dovier, Fioretto, & Pontelli

roots seminal work Sutherland (1963) Sketchpad system,
successive efforts systems CONSTRAINTS (Sussmann & Steele, 1980) ThingLab
(Borning, 1981). years, CP become paradigm choice address hard search
problems, drawing integrating ideas diverse domains, Artificial Intelligence
Operations Research (Rossi, van Beek, & Walsh, 2006). declarative nature
CP enables fast natural modeling problems, facilitating development,
rapid exploration different models resolution techniques (e.g., modeling choices,
search heuristics).
recent years, several research groups started appreciating potential constraint programming within realm Bioinformatics. field Bioinformatics presents
number open research problems grounded critical exploration combinatorial search space, highly suitable manipulated constraint-based search.
Constraint methodologies applied analyze DNA sequences instance,
locate Cis-regulatory elements (Guns, Sun, Marchal, & Nijssen, 2010), DNA restriction
maps construction (Yap & Chuan, 1993), pair-wise multiple sequence alignment (Yang, 1998; Yap, 2001; Tsai, Huang, Yu, & Lu, 2004). Constraint methodologies
applied biological networks (Corblin, Trilling, & Fanchon, 2005; Larhlimi &
Bockmayr, 2009; Ray, Soh, & Inoue, 2010; Gay, Fages, Martinez, & Soliman, 2011; Gebser,
Schaub, Thiele, & Veber, 2011) biological inference problems, Haplotype inference (Graca, Marques-Silva, Lynce, & Oliveira, 2011; Erdem & Ture, 2008),
phylogenetic inference (Erdem, 2011).
particular area Bioinformatics witnessed extensive use CP techniques
domain structural biologyi.e., branch molecular biology biochemistry
deals molecular structure nucleic acids proteins, structure
affects behavior functions. Constraint Programming progressively gained pivotal
role providing effective ways explore space conformations macromolecules,
address problems secondary tertiary structure prediction, flexibility, motif discovery, docking (Backofen, Will, & Bornberg-Bauer, 1999; Krippahl & Barahona, 2002;
Thebault, de Givry, Schiex, & Gaspin, 2005; Dal Palu, Dovier, & Pontelli, 2007; Mann
& Dal Palu, 2010; Shih & Hwang, 2011; Krippahl & Barahona, 2005; Dal Palu, Spyrakis,
& Cozzini, 2012b; Chelvanayagam, Knecht, Jenny, Benner, & Gonnet, 1998; Yue & Dill,
2000). Two comprehensive surveys use constraint-based methods structural
Bioinformatics recently proposed (Dal Palu, Dovier, Fogolari, & Pontelli, 2012a;
Barahona & Krippahl, 2008).
focus work use constraint-based technology support structural
studies proteins. Proteins macromolecules fundamental importance way
regulate vital functions biological processes. structural properties critical
determining biological functions proteins (Skolnick, Fetrow, & Kolinski, 2000; Baker
& Sali, 2001) investigating protein-protein interactions, central virtually cellular processes (Alberts, Johnson, Lewis, Raff, Roberts, & Walter, 2007).
refer Protein Structure Prediction (PSP) problem problem determining
tertiary structure protein knowledge primary structure and/or knowledge structures (e.g., secondary structure components, templates homologous
proteins). PSP problem often broken specialized classes problems
related specific aspects tertiary structure protein, side-chain geometry
954

fiA Constraint Solver Flexible Protein Models

prediction (Dunbrack, 2002), loop modeling prediction (Go & Scheraga, 1970; Xiang, Soto,
& Honig, 2002; Rufino, Donate, Canard, & Blundell, 1997; Soto, Fasnacht, Zhu, Forrest, &
Honig, 2008), protein flexibility investigation (Bennett & Huber, 1984).
classes problems share common rootsthe need track possible conformations chains amino acids. variations problem relate factors
length chain considered (from short peptides case loop modeling
entire proteins general PSP case) diverse criteria employed selection
solutions, as, instance, lowest basin effective energy surface, composed
intra-molecular energy protein plus solvation free energy (Karplus &
Shakhnovich, 1992; Lazaridis, Archontis, & Karplus, 1995).
Modeling variability protein chain involves many degrees freedom
needed represent different protein conformations. Tracking variability requires
exploration vast conformational space. Model simplifications adopted reduce
computational cost, instance backbone-only models represent backbone
proteins, side-chain representation could simplified single central point (centroid)
describing center mass, one adopt approximated representation space
though lattice models.
Nevertheless, even strong simplifications, search space remains intractable
prevents use brute-force search methods space possible conformations
(Crescenzi, Goldman, Papadimitriou, Piccolboni, & Yannakakis, 1998).
Constraint programming methodologies found natural use addressing PSP
related problemswhere structural chemical properties modeled terms
constraints spatial positions atoms, transforming search conformations
constraint satisfaction/optimization problem. proposed approaches range
pure ab initio methods (Backofen et al., 1999; Dal Palu et al., 2007) methods based
NMR data (Krippahl & Barahona, 1999) methods based fragments assembly (Dal
Palu, Dovier, Fogolari, & Pontelli, 2010). spite efforts, design effective
approaches filter space conformations lead feasible search remains
challenging open problem.
work present constraint solver targeted modeling general class protein
structure studies. particular solution suitable address protein structure analysis
study, requiring generation set unbiased sampled diverse conformations
satisfy certain given restraints. One unique features solution presented
work capability generate uniformly distributed sampling target protein regions
among given portion Cartesian space selected granularityaccounting
spatial rotational properties.
abstract problem general multi-body system, composing body
constrained means geometric properties related bodies joint
relationships. body represent entity protein, individual amino
acid small peptide (e.g., protein fragment). Bodies relate spatial positions
organization individual atoms composing it.
view exploration protein structures multi-body systems suggests number different constraints, used model different classes structural studies
applied filter infeasible (or unlikely) conformations. propose investigation
several classes constraints, terms theoretical properties practical use
955

fiCampeotto, Dal Palu, Dovier, Fioretto, & Pontelli

filtering. Particular emphasis given Joined-Multibody (JM) constraint, whose
satisfaction prove NP-complete. Realistic protein models require assembly
hundreds different body versions, making problem intractable. study efficient
approximated propagator, called JM filtering (JMf), allows us efficiently compute
classes solutions, partitioned structural similarity controlled tolerance error.
perspective novel holds strong potential. structural problems investigating computationally intractable; use global constraints specifically designed
meet needs enables effective exploration search space greater
potential effective approximations.
multi-body model provides interesting perspective exploring space
conformationswhile actual search operates discrete sets alternatives (e.g., sets
fragments), filtering process avails reasoning processes operates continuous
domain; allows propagation filtering effective.
proposed multi-body constraints filtering techniques constitute core
resolution engine FIASCO (Fragment-based Interactive Assembly protein Structure
prediction Constraints), efficient C++-based constraint solver. demonstrate
flexibility efficiency FIASCO using engine model solve class
problems derived loop modeling instances. Throughout paper show
ability FIASCO providing uniform efficient modeling platform studying
different structural properties (that been, far, addressed using significantly
distinct methods tools). declarative nature constraint-based methods supports
level elaboration tolerance offered frameworks protein structure
prediction, facilitating integration additional knowledge guiding studies (e.g.,
availability information secondary structure elements).
rest paper organized follows. Section 2, provide high-level
background biological chemical properties proteins review commonly used approaches address structural studies. Section 3, develop constraint
framework dealing fragments multi-body structures. Section 4 describes
implementation constraints propagation schemes FIASCO system.
Section 5 report experimental results using FIASCO collection
benchmarks loop modeling. Section 6 provides concluding remarks.
preliminary version research pursued paper presented (Campeotto,
Dal Palu, Dovier, Fioretto, & Pontelli, 2012). work Campeotto et al. focused
one new class constraints targeting problem loop closure, work presented
paper provides comprehensive constraint system, focused modeling structural
protein properties investigating different types problems (e.g., structure prediction,
studies flexibility). present manuscript includes precise detailed
formalization extensive experimentation comparison.

2. Background, General Context, Related Work
section briefly review basic Biology notions, introduce problems
tackling paper refer selection related literature.
956

fiA Constraint Solver Flexible Protein Models

H

side
chain

N

C

H

H

N
C'

H
C


C'
side
chain



Figure 1: schematic sequence two amino acids showing amino acid backbone
side chains. arrow C 0 N denotes peptidic bond.
2.1 General Background
protein molecule made smaller building blocks, called amino acids. One amino acid
connected another one peptidic bond. Several amino acids pairwise
connected linear chain forms whole protein. backbone protein,
illustrated Figure 1, formed sequence N C C 0 atoms contained amino
acid. backbone rather flexible allows large degree freedom protein.
amino acid characterized variable group atoms influences specific
physical chemical properties. group, named side chain, ranges 1 18 atoms
connects C atom amino acid. 20 kinds amino acids found
common eukaryotic organisms.
Proteins made 10 1, 000 amino acids, average globular protein
300 amino acids long. amino acid contains 724 atoms, therefore number
atoms arrangements space grow easily beyond computational
power. Since beginning protein simulation studies, different algorithms exploring conformations devised, molecular dynamics, local search, Monte
Carlo, genetic algorithms, constraint approaches, well different geometric representations (Neumaier, 1997).
literature, several geometric models proteins proposed. One choice
influences quality complexity computational approaches number
points describe single amino acid.
simplest representation one amino acid represented one
point, typically C atom, given robust geometric property: distance
C atoms two consecutive amino acids preserved low variance (roughly 3.81A).
Usually, volumetric constraints enforced points, order simulate
average occupancy amino acid. representation visualized chain
beads moved space.
refined representation models store (or all) points backbone, plus
centroid mass (CG) represents whole side chain connects C atom.
models, amino acid described different C CG distances CG volumes.
centroid approximation side-chain flexibility allows refined
energetic models, number points taken care still low. paper

957

fiCampeotto, Dal Palu, Dovier, Fioretto, & Pontelli

Figure 2: native structure intact influenza virus M1 protein (indexed 1EA3
PDB) modeled full atom, 5@ model, simple C C model
(from left right). secondary structures (-helices) emphasized.

Figure 3: Amino acid concatenation 5@ model
use particular case simplified models, 5@ model, described precisely
below. particular instance coarse-grained protein models (Clementi, 2008;
Shehu, 2010). end spectrum, atom amino acid represented
one point. representation accurate, time allows
accurate energetic considerations. drawback computational demand
handling backbone side-chain flexibility increases significantly.
Figure 2 report three representations protein.
paper select intermediate representation amino acids atoms
N, C , C 0 backbone centroid side chain (CG) accounted for.
include oxygen (O) atom attached C 0 atom, atom together
C 0 N identifies triangle chemically stable along backbone used
assembly amino acids (see complete formalization). position
two H atoms backbone deduced position atoms
deal explicitly. conclusion, deal 5 atomic elements per amino
acid: 4 atoms N C C 0 centroid CG. briefly refer representation
5@ model. Figure 3 illustrates atoms involved concatenation
two consecutive amino acids. Inter-atomic distances consecutive atoms fixed
due chemical bonds; thus, differences structures identified
differences angles involved. common find substructures

958

fiA Constraint Solver Flexible Protein Models

protein consecutive amino acids arranged according repeated characteristic
patterns. property found almost every protein; refer typical patterns
secondary structure elements. common examples -helices -sheets
(see Figure 2).
2.2 Context Proposed Work
paper present tool assembling reasoning amino acids
space. similar approaches (e.g, Simons, Kooperberg, Huang, & Baker, 1997),
system relies set admissible elementary shapes (or fragments) represents
spatial dictionary arrangements every part protein.
element dictionary general enough describe specific atomic structure
either single amino acid longer sequence (even hundreds amino acids long).
amino acid sequence, several alternative arrangements expected populate
database, offer various hypothesis local shape sequence.
protein partitioned contiguous fragments arranged according one
possible shapes recorded database.
sequence amino acids free rotate bonds space (typically two degrees
freedom along backbone several others along side chain); however, due
chemical properties physical occupancy specific types amino acids
involved surrounding environment, arrangements impossible and/or unlikely. core assumption assembling approaches rely statistical database
arrangements describe local feasible behavior, order direct search candidates high probability energetically favorable. presence multiple
candidate fragments every part protein requires combinatorial search among
possible choices that, assembled together, leads alternative putative configurations
protein. search process charge verifying feasibility assembly,
since combination local arrangements could generate non-feasible global shape, e.g.,
one leads spatial clash atoms different fragments. one (or more)
fragment described one single arrangement, part protein rigidly imposed.
particular degenerate case exploited describe rigid parts protein.
specific combination fragment length number instances fragment determines type protein problem modeled. range complete backbone
flexibility (fragments made hundreds choices amino acids) secondary structure - loop models (interleaving longer fragments modeling helices/-strands shorter
fragments).
library fragments usually derived content Protein Data Bank
(PDB, www.pdb.org) contains 96,000 protein structures. design adopted
study parametric choice library fragments use. example,
experiments use library fragments derived subset PDB known
top-500 (Lovell, Davis, Arendall, de Bakker, Word, Prisant, Richardson, & Richardson,
2003), contains non redundant proteins preserves statistical relevance. Alternative libraries fragments obtained use sophisticated protein database
search algorithms, FREAD (Choi & Deane, 2010). retrieve information depending specific amino acid sequence, since local properties greatly influence typical

959

fiCampeotto, Dal Palu, Dovier, Fioretto, & Pontelli

arrangements observed. Moreover, build libraries different sequences lengths h, even
longer sequences statistical coverage becomes weak. Nevertheless, Micheletti, Seno,
Maritan (2000) conjectured relatively small set fragment shapes (a dozens)
length 5, able describe virtually protein. Handl, Knowles, Vernon, Baker,
Lovell (2012) demonstrate size structure search space affected
choice fragment length used optimize search process. Similar considerations explored others (Hegler, Latzer, Shehu, Clementi,
& Wolynes, 2009). Recent work show efficiently build dictionaries (Fogolari,
Corazza, Viglino, & Esposito, 2012). models easily accommodated
framework.
considered sequence associated several configurations 5@ models, placed
according standardized coordinate system. activity, consider C 0
group preceding amino acid N atom following amino acid.
extra information needed fragments combination, assuming fragment
connected two peptidic bonds. Therefore, specific sequence, store
occurrences
C 0 N C C 0 N
| {z }
h times
relative positions. order reduce impact specific properties
database used, cluster set way two fragments RMSD1 less
given threshold, one stored. example, length h = 1
RMSD threshold .2A, derive fragment database roughly 90 fragments per
amino acid.
CG information added later using statistical considerations side-chain mobility, accounted clustering described (Fogolari, Esposito,
Viglino, & Cattarinussi, 1996).
2.3 Protein Structure Prediction
protein structure prediction problem, sequence amino acids composing protein (known primary structure) given input; task predict three
dimensional (3D) shape (known native conformation tertiary structure)
protein standard conditions.
common assumption, based Anfinsens work (1973), 3D structure
minimizes given energy function modeling atomic force fields, candidate best approximates functional state protein. setting, choice
number atoms used represent amino acid controls quality
computational complexity.
Moreover, spatial domains proteins points (e.g., atoms, centroids)
placed impact type algorithms search performed.
domain either continuous, often represented floating point coordinates,
discrete, often derived discretization space based crystal lattice structure.
1. Root Mean Square Deviation captures overall similarity space corresponding atoms,
performing optimal roto-translation best overlap two structures.

960

fiA Constraint Solver Flexible Protein Models

geometric model determined, necessary introduce energy
function, mostly based atoms considered distances. structure prediction problem, energy function used assign score geometrically feasible
candidate; candidate optimal score represents solution prediction
problem.
Let us briefly review popular approaches problem, particular emphasis solutions rely constraint programming technology.
natural approach investigating protein conformations simulations
physical movements atoms molecules is, unfortunately, beyond current computational capabilities (Jauch, Yeo, Kolatkar, & Clarke, 2007; Ben-David, Noivirt-Brik, Paz,
Prilusky, Sussman, & Levy, 2009; Kinch, Yong Shi, Cong, Cheng, Liao, & Grishin, 2011).
originated variety alternative approaches, many based comparative modelingi.e., small structures related protein family members used templates
model global structure protein interest (Jones, 2006; Fujitsuka, Chikenji, &
Takada, 2006; Simons et al., 1997; Lee, Kim, Joo, Kim, & Lee, 2004; Karplus, Karchin,
Draper, Casper, Mandel-Gutfreund, Diekhans, & Source., 2003). methods, often
referred fragments assembly, protein structure assembled using small protein subunits templates present relevant sequence similarities (homologous affinity) w.r.t.
target sequence.
literature, Constraint Programming (CP) techniques shown potential:
structural variability protein modeled constraints, constraint solving
performed order deduce optimal structure (Backofen & Will, 2006; Barahona
& Krippahl, 2008; Dal Palu, Dovier, & Fogolari, 2004; Dal Palu et al., 2010). CP
used provide approximated solutions ab-initio lattice-based modeling protein
structures, using local search large neighboring search (Shmygelska & Hoos, 2005;
Dotu, Cebrian, Van Hentenryck, & Clote, 2011); exact resolution problem lattice
spaces using CP, along clever symmetry breaking techniques, investigated (Backofen & Will, 2006). approaches solve constraint optimization problem
based simple energy function (HP). precise energy function used
Dal Palu et al. (2004, 2007), information secondary structures (i.e., -helices,
-sheets) taken consideration. Due approximation errors introduced
lattice discretization, approaches scale medium-size proteins. Off-lattice
models, based idea fragment assembly, implemented using Constraint Logic
Programming Finite Domains, presented (Dal Palu et al., 2010; Dal Palu,
Dovier, Fogolari, & Pontelli, 2011), applied structure prediction
structural analysis problems. instance, Dal Palu et al. (2012b) use approach generate sets feasible conformations studies protein flexibility. use
CP analyze NMR data related problem protein docking
investigated (Barahona & Krippahl, 2008).
context ab-initio prediction, recent work (Olson, Molloy, & Shehu, 2011)
shown increasing complexity conformational search spaceby using
refined fragment libraryin combination sampling strategy, enhances
generation near-native structure sets. work Shehu (2009) Molloy, Saleh,
Shehu (2013) illustrates various enhancement fragment-based assembly process leading
faster computations improved sampling conformation spacee.g., using
961

fiCampeotto, Dal Palu, Dovier, Fioretto, & Pontelli

tree-based methods inspired motion planning guarantee progress towards minimal
energy conformations maintaining geometrically separate conformations. terms
energy landscape, native state generally lower free energy non-native structures,
extremely difficult locate. Hence, targeted conformational sampling may aid
protein structure prediction different near-native structure used guide
search; several schemes based Monte Carlo movements sampling conformation
space fragments assembly proposed (Shmygelska & Levitt, 2009; Xu &
Zhang, 2012; Debartolo, Hocky, Wilde, Xu, Freed, & Sosnick, 2010). Methods based
non-uniform probabilistic mass functions (derived previously generated decoys)
proposed aid problem (Simoncini, Berenger, Shrestha, & Zhang, 2012).
Sampling, however, remains great challenge protein complex topologies and/or
large sizes (Kim, Blum, Bradley, & Baker, 2009; Shmygelska & Levitt, 2009).
widely accepted proteins, native state, considered dynamic
entities instead steady rigid structures. Indeed, recent years research focus
shifted towards prediction schemes take account non-static nature proteins,
supported recent observations based magnetic resonance techniques. Processes
enzyme catalysis, protein transport antigen recognition rely ability proteins
change conformation according required conditions. dynamic nature
visualized set different structures coexist time. generation
sets capture non-redundant structures (in pure geometric terms) great
challenge (Kim et al., 2009). Robotics inverse kinematics methods extensively
explored sampling proteins conformational space (Zhang & Kavraki, 2002; Cortes
& Al-Bluwi, 2012) molecular simulations (Al-Bluwi, Simeon, & Cortes, 2012; Moll,
Schwarz, & Kavraki, 2007; Noonan, OBrien, & Snoeyink, 2005; Kirillova, Cortes, Stefaniu,
& Simeon, 2008).
motivation work provide ability generating protein set
contains optimal sub-optimal candidates, order capture dynamic information
behavior protein. desirable property conformations returned
pool sufficiently diverse uniformly distributed 3D space.
2.4 Protein Loop Modeling
protein loop modeling problem restricted version structure prediction problem. use problem working example remaining part paper.
context, protein structure already partially defined, e.g., large number
atoms already placed space. Usually, common scenario derives Xray crystallography analysis, spatial resolution atoms degenerates presence
regions protein exposed surface presents increased
instability. Since crystal contains several copies protein order perform measurement, regions appear fuzzy, therefore placement atoms
regions may ambiguous. Usually, regions, referred loops, involved
secondary structures, instead stable. dealing homology modeling, protein found another organism, typically shows variations
sequence due evolution, especially loop regions, since less essential
protein stability functionality. Starting homologous protein structure, usually

962

fiA Constraint Solver Flexible Protein Models

loops need recomputed specialized loop modeling approach use
minimization techniques.
length loop typically range 2 20 amino acids; nevertheless,
compared secondary structures, flexibility loops produces large, physically
consistent, conformation search spaces. Constraints mutual positions orientations (dihedral angles) loop atoms deduced used simplify search.
restrictions defined loop closure constraints. Figure 2, (simple)
possible scenario two macro-structures (two helices) connected loop.
setting, assume know position two helices, loop atoms
determined.
procedure protein loop modeling typically consists 3 phases: sampling, filtering,
ranking (Jamroz & Kolinski, 2010). Sampling commonly based loop candidate generation, using dihedral angles sampled structural databases (Felts, Gallicchio,
Chekmarev, Paris, Friesner, & Levy, 2008), subsequent candidate modification order
satisfy loop closure constraints. conformations checked w.r.t. loop constraints geometries rest structure, loops detected
physically infeasible, e.g., causing steric clashes, discarded filtering procedure.
Popular methods used loop modeling include Cyclic Coordinate Descent (CCD)
method (Canutescu & Dunbrack, 2003), algorithms based inverse kinematics (Kolodny,
Guibas, Levitt, & Koehl, 2005; Shehu & Kavraki, 2012), Self-Organizing (SOS) algorithm (Liu, Zhu, Rassokhin, & Agrafiotis, 2009), simultaneously satisfy loop
closure steric clash restrictions iteratively superimposing small fragments (amide
C ) adjusting distances atoms, Wriggling method (Cahill, Cahill,
& Cahill, 2003), employs suitably designed Monte Carlo local moves satisfy loop
closure constraints. Multi-method approaches proposede.g., Lee, Lee,
Park, Coutsias, Seok (2010) propose loop sampling method combines fragment
assembly analytical loop closure, based set torsion angles satisfying imposed
constraints. Ab initio methods (Rapp & Friesner, 1999; Fiser, Do, & Sali, 2000; Jacobson,
Pincus, Rapp, Day, Honig, Shaw, & Friesner, 2004; Spassov, Flook, & Yan, 2008; Deane
& Blundell, 2001; Felts et al., 2008; Xiang et al., 2002) methods based templates
extracted structural databases (Choi & Deane, 2010) explored.
Finally, ranking stepe.g., based statistical potential energy, DOPE (Shen
& Sali, 2006), DFIRE (Zhou & Zhou, 2002), one proposed Fogolari et al. (2007),
used select best loop candidates.
sampling filtering procedures work together direct search towards structurally diverse admissible loop conformations, order maximize
probability including candidate close native one reduce time needed
analyze candidates. work motivated need controlling properties resulting set candidates. particular, model structural diversity
distance orientation backbone make sampling phase guided loop
constraints.
Fragment-based assembly methods investigated context loop
modeling (Lee et al., 2010; Zhang & Hauser, 2013). Shehu Kavraki (2012) review
great detail loop modeling techniques.

963

fiCampeotto, Dal Palu, Dovier, Fioretto, & Pontelli

Figure 4: left: two fragments B1 (light grey) B2 (dark grey)
points(B1 ) = ((0, 0), (1, 0), (1, 1), (2, 1)) points(B2 ) = ((4, 0), (3, 0), (3, 1), (4, 1), (4, 2)).
arrows address initial points. right: observe rotating B2 90 degrees translating -3 units x-axis, last three points B1 (last(B1 ))
first three points B2 (first(B2 )) perfectly overlap. Thus, end(B1 ) _ front(B2 ).

3. Constraint Solving 3D Fragments
assume reader familiarity basic principles constraint programming constraint satisfaction problems (CSP); reader referred, e.g., Handbook Constraint Programming (Rossi et al., 2006). Section, introduce
formalization effective solution tackle practical applications concerning
placement 3D fragments. applications described combinatorial problems,
modeled set variables, representing entities problem deals with, set
constraints, representing relationships among entities. context constraint
programming system, variables constraints adopted provide solution
CSP, is, assignment variables satisfies constraints. extend
concept enabling constraint solver find representative solution CSP
satisfies additional properties expressed among variables whole solution set.
3.1 Terminology
fragment B composed ordered list least three (distinct) 3D points, denoted
points(B). number points fragment referred length. front-
end-anchors fragment B, denoted front(B) end(B), two lists containing
first three last three points points(B). B(i) denote i-th point
fragment B. two ordered lists points p~ ~q, write p~ _ ~q
perfectly overlapped rigid coordinate translation and/or rotation (briefly, rototranslation)see Figure 4 (let us assume z coordinate 0 points omitted
simplicity).
non-empty set fragments length called body. body
used model set possible shapes sequence points. say body
length k fragment contains length k.
multi-body sequence S1 , . . . , Sn bodies.

964

fiA Constraint Solver Flexible Protein Models

Figure 5: left right: body S1 composed unique fragment, bodies
S2 S3 composed two fragments each. Arrows address initial points fragments.
~ = S1 , S2 , S3 constitutes multi-body. rightmost
three bodies length 4.
figure report spatial shapes associated four rigid bodies obtained
~ One identified full lines, three dashed
multi-body S.
lines. Observe rigid body identified ((0, 0), (1, 0), (1, 1), (2, 1), (2, 0), (3, 0))
obtained rotation 180 degrees fragment ((2, 0), (3, 0), (3, 1), (4, 1)) S2
x axis (flipping) translation 1 units x +1 units y. Observe
moreover rigid body identified ((0, 0), (1, 0), (1, 1), (2, 1), (2, 0), (1, 0)) contains
point (1, 0) twice.
~ = S1 , . . . , Sn , rigid body
~ sequence fragments
Given multibody
B1 , . . . , Bn , Bi Si = 1, . . . , n end(Bi ) _ front(Bi+1 ), = 1, . . . , n1.
rigid body uniquely identified sequence B1 , . . . , Bn ; however, consecutive
fragments overlapped, rigid body alternatively identified list points
form spatial shape. Figure 5 report examples bodies, multi-bodies, rigid
bodies. previous example, assume z coordinate 0 points.
Remark 3.1 (Working Example) concepts related loop-modeling problem. Points atoms. fragment spatial shape atoms. last three atoms
one fragment overlap first three atoms another fragment, join them.
body set admissible shapes given list atoms. multi-body S1 , . . . , Sn
sequence elements, corresponding sequence atoms (of amino acids).
idea last three atoms body Si first three successive
body Si+1 . rigid body possible complete shape atoms, provided last three
atoms fragment selected set Si overlap first three atoms fragment
selected Si+1 .
overlapping points end(Bi ) front(Bi+1 ) constitute i-th joint rigid
body. number rigid bodies obtained single multi-body S1 , . . . , Sn
bounded ni=1 |Si |. Figure 6 provides schematic general representation rigid
body.
rigid body defined overlap joints, relies chain relative rototranslations fragments. points points(Bi ) therefore positioned according
(homogeneous) coordinate system associated fragment Bi1 . Note
reference system B1 defined, whole rigid body completely positioned.2
2. exception case points joint collinear. Points p1 , . . . , pn , n 3
collinear points p3 , p4 , . . . , pn belongs straight line containing two points p1 p2 .

965

fiCampeotto, Dal Palu, Dovier, Fioretto, & Pontelli

Figure 6: schematic representation rigid body. joints connecting two adjacent
fragments emphasized. points points(B) fragment represented
circles. fragment extends first point joint last point
successive joint.
relative positions two consecutive fragments Bi1 Bi rigid body (2 n)
defined transformation matrix Ti R44 . matrix depends standard
Denavit-Hartenberg parameters (Hartenberg & Denavit, 1995) obtained start
end fragmentsthe reader referred work LaValle (2006) details.
denote product T1 T2 . . . Ti (x, y, z, 1)T Ti (x, y, z).
Let us analyze first matrix T1 . fragment B1 forced start given
point oriented given way; case matrix T1 defines roto-translation
B1 fulfilling constraints. absence constraints, assume B1
normalized T1 i.e.,its first point (0, 0, 0), second point aligned along z axis
third belongs plane formed x z axes. orientation referred
reference system 0 .
= 1, . . . , n, coordinate system conversion (x0 , 0 , z 0 ), point (x, y, z)
points(Bi ) coordinate system B1 , obtained by:
(x0 , 0 , z 0 , 1)T = T1 T2 . . . Ti (x, y, z, 1)T = Ti (x, y, z)

(1)

Homogeneous transformations last value tuple always 1.
rest paper, focus 5@ model; however proposed formalization
methods used models, e.g., C C model. latter
case, points(Bi ) contains least 3 amino acids, joints guaranteed noncolinear, due chemical properties backbone. combining C fragments,
specific rotational angles full-atom backbone lost imprecise multibody assembly produced.
fragment body associated sequence amino acids. fragment sequence
h 1 amino acids described body length 4h + 3, modeling concatenation
atoms represented regular expression: C 0 O(N C C 0 O)h N . representation first last sequence C 0 atoms coincide front- end-anchor,
respectively, employed process assembling consecutive fragments (i.e.,
used roto-translation).
discretized R3 space represented regular lattice, composed cubic cells
side length equal given parameter k. cell referred 3D voxel
(or, simply, voxel ); assume voxel receives unique identifier. denote
voxel(p, k) identifier voxel contains 3D point p context
discretization space using cubes side length equal k. spatial quantization
allows efficient treatment approximated propagation required
geometric constraints introduced following sections.
966

fiA Constraint Solver Flexible Protein Models

3.2 Variables Domains
Let us define variables adopted describe entities problem fragments.
domain variable V set allowable values V , denoted
DV . deal fragments placements 3D space adopt two distinct types
variables:
Finite Domain Variables (FDVs): domain finite domain variable finite
set non negative integer numbers.
Point Variables (PVs): variables assume coordinates 3D point R3 .
domains are, initially, 3D boxes identified two opposite vertices hmin, maxi,
done discrete solver COLA (Dal Palu, Dovier, & Pontelli, 2005, 2007).
Remark 3.2 (Working Example) Following Remark 3.1, FDVs identifiers
various fragments body, PVs used represent 3D coordinates assigned
various structural points (e.g., atoms, centroids) interest molecule
considered. Clearly, values PVs depend deterministically values FDVs
(and vice-versa).
variable assigned domain contains unique value; case point variables,
happens DV = hmin, maxi min = max.
3.3 Constraints
section, formalize constraints define fragments placement,
used describe Protein Structure problems context fragment assembly.
3.3.1 Distance Constraints
Distance constraints model spatial properties point variables operating 3D space.
Point variables P Q related distance constraint form
kP Qk op

(2)

k k Euclidean norm, R+ op .
built-in global constraint alldistant associates minimal radius di point
variable Pi (i = 1, . . . , n) ensures spheres surrounding pair point variables
intersect:
alldistant(P1 , . . . , Pn , d1 , . . . , dn ),
(3)
constraint equivalent constraints kPi Pj k di +dj i, j {1, . . . , n}, <
j. used avoid steric clashes among different atoms (and centroids),
different volumes. Checking consistency alldistant constraint (given domains
variables Pi ) NP-complete (Dal Palu, Dovier, & Pontelli, 2010)the proof based
encoding bin-packing problem using alldistant constraint, holds true
even particular setting, point variables intervals R3 domains.
Remark 3.3 (Working Example) alldistant constraint introduced avoid clashes
rigid body obtained multi-body S1 , . . . , Sn . distance constraints
967

fiCampeotto, Dal Palu, Dovier, Fioretto, & Pontelli

Figure 7: Fragments assembled overlapping plane R , described rightmost
C 0 , O, N atoms first fragment (left), plane L , described leftmost
C 0 , O, N atoms second fragment (right), common nitrogen atom
useful extra information known (e.g., one might inferred biological
arguments pair amino acid stay within certain distance).
3.3.2 Fragment Constraint
Fragment constraints relate finite domain variables point variables. Let us assume
database F fragments, F [i] represents i-th fragment database.
Thus, given FDV variable V , F [V ] denotes fragment indexed V V
instantiated. fragments stored F ordered list 3D points.
Given list point variables P~ , constraint:
fragment(V, P~ , F )

(4)

states exists roto-translation Rot P~ = Rot F [V ]namely, V =
list points P~ take form fragment F [i]. simplicity,
omit database F clear context. Intuitively, constraints ensure
fragment choice reproduce correct shape associated 3D point,
regardless space orientation fragment. orientation determined
joined multi-body constraint presented following section.
3.3.3 Centroid Constraint
centroid constraint enforces relation among four PVs. Intuitively, first three
associated atoms N, C , C 0 amino acid fourth related
centroid CG. constraint parametric w.r.t. type amino acid
deterministically establishes position CG depending position points:
centroid(PN , PC , PC 0 , PCG , a)

(5)

Figure 7 centroids displayed along backbone purple circles labeled
CG. constraint used database fragment contains full backbone information. centroid information used place missing full-atom side
chain. side-chain centroid computed taking account average C -side-chain
center mass distance, average bend angle formed side-chain center-of-massC -C 0 , torsional angle formed N -C -C 0 -side-center mass (Fogolari et al.,
968

fiA Constraint Solver Flexible Protein Models

1996). abstraction allows us reduce number fragments consider, removing
fragments would geometrically conflict position CG. Consider
single side chain may 100 main configurations (rotamers).
3.3.4 Table Constraint
constraint used restrict assignments set FDVs (representing fragments)
specific tuples choices. useful modeling specific local collaborative
behavior involves one fragment; example, happens modeling
secondary structure multiple arrangements underlying amino acids and/or specific
approximation strategies employed.
~ k-tuple FDVs. table (or
Let F set k-tuples integer values V
combinatorial) constraint, form
~ ,F)
table(V

(6)

~ assumes values restricted tuples listed F , i.e.,
requires list variables V
~
exists F V [i] = t[i], 0, . . . , k 1.
Remark 3.4 (Working Example) Going back loop-modeling problem, role
fragment constraint evident: relates (IDs the) selected fragments multibody 3D positions various atoms involved. centroid constraint
instead introduced add position centroid represents side chain
5@ representation. table constraint common constraint constraint languages
useful info consecutive fragments rigid body known due external
knowledge.
3.3.5 Joined Multibody Constraint
Joined Multibody (JM) constraint enforces relation list FDVs encoding
multibody. limits spatial domains various fragments composing multibody
order retain fragments assemble properly compenetrate.
~ V
~ , A,
~ E,
~ i, where:
joined-multibody (JM) constraint described tuple: J = hS,
~ = S1 , . . . , Sn multi-body. Let B = {B1 , . . . , Bk } set fragments S,
~

Sn
i.e., B = i=1 Si .
~ = V1 , . . . , Vn list FDVs, domains DVi = {j : Bj Si }.
V
~ = A1 , A2 , A3 , E~ = E1 , . . . , E3n lists sets 3D points that:

A1 A2 A3 set admissible points front(B), B S1 ;
E3i2 E3i1 E3i set admissible points end(B), B Si , = 1, . . . , n;
constant, used express minimal distance constraint different point.
~ {1, . . . , |B|} s.t. exist
solution JM constraint J assignment : V
matrices T1 , . . . , Tn (used ) following properties:
Domain: = 1, . . . , n, (Vi ) DVi .
Joint: = 1, . . . , n 1, let (a1 , a2 , a3 ) = end(B(Vi ) ) (b1 , b2 , b3 ) = front(B(Vi+1 ) ),
holds (for j = 1, 2, 3):
Ti (ajx , ajy , ajz ) = Ti+1 (bjx , bjy , bjz )
969

fiCampeotto, Dal Palu, Dovier, Fioretto, & Pontelli

Spatial Domain: Let (a1 , a2 , a3 ) = front(B(V1 ) ), T1 aj Aj {1}.3 =
1, . . . , n, let (e1 , e2 , e3 ) = end(B(Vi ) )
Ti (ejx , ejy , ejz ) E3(i1)+j {1}
1 j 3 T2 , . . . , Ti (in Ti ) matrices overlap end(B(Vi1 ) )
front(B(Vi ) )
Minimal Distance: j, ` = 1, . . . , n, j < `, points points(B(Vj ) )
b points(B(V` ) ), holds that:4
kTj (ax , ay , az ) T` (bx , , bz )k
proved establishing consistencyi.e., existence solutionof JM
constraints NP-complete (Campeotto et al., 2012). proved remains
NP complete even assuming fragments problem three
atoms spatial position, holds last three atoms (of
course fragments allowed contain three atoms otherwise problem
trivial). proof reported www.cs.nmsu.edu/fiasco/.
Remark 3.5 (Working Example) JM constraint contains exactly ingredients
~ corresponding FDs
needed modeling loop problem. multi-body S,
~ , set possible 3D points loop starts
~ set possible 3D
V
~
points loop ends E weak version alldistant constraint pair
~
atoms avoid clashes, solutions (non clashing) rigid bodies starts
~
ends E.
Let us observe JM constraint explicitly forbid spatial positions PVs
variables (save first three last three points loop). However,
additional constraints explicitly required domain definition PVs variables
used encoding.
Remark 3.6 choice using three points overlap resembles method proposed
Kolodny, Guibas, Levitt, Koehl (2005). hand, observe
technical exercise modify JM constraints allow parametric
overlap contiguous fragments.

4. FIASCO Constraint Solver
present overall structure implementation hybrid constraint solver capable
handling classes constraints described previous section.
4.1 Constraint Solving
distinctive feature FIASCO possibility handle continuous domains cost
keeping discrete library choices (finite domain variables). handling fragments
allows us reason spatial properties efficient descriptive way
pure 3D domain modeling adopted previous proposals. Moreover, FIASCO allows
3. product {1} necessary use homogeneous coordinates.
4. Let us observe weak form alldistant constraint different distances
point allowed. is, sense, closer alldifferent constraint.

970

fiA Constraint Solver Flexible Protein Models

solver uniformly sample search space means spatial equivalence relation
used control tradeoff accuracy efficiency. particularly
effective finite domains heavily populated, critical component
model real-world problems.
constraint solver builds classical prop-labeling tree exploration constraint propagation phases interleaved non-deterministic branching phases used
explore different value assignments variables (Apt, 2009). solver able handle
point variables finite domain variablesthis reason refer
hybrid solver. particular, assignments finite domain variables guide search;
values imply assignments point variables, turn may propagate reduce
domains point variables finite domain variables. Moreover, propagation technique implemented JM constraint classical filtering techniqueit
approximated technique describe later.
presence point variables allows, principle, infinite number domain values
R3 . However, noted information carried assembling fragments (encoded
finite domain variables) much informative complex demanding
model 3D continuous space (e.g., Oct-trees, CSG, no-goods). particular, direct
kinematics encoded JM constraint able efficiently identify set admissible
regions point variable fast, approximated, controlled way. Therefore,
point variables seen internal aid propagation. variables updated
JM propagation phase interact JM propagator prune
corresponding fragment variables. Distance constraints point variables included
standard AC3 propagation loop domains updates.
aspect extends classical solver structure capability controlling amount search tree explored. search tree contains large number
branches similar, point view geometric distance
corresponding point variables. goal produce subset feasible solutions
exhibit significant 3D differences themselves. accomplished introducing
possibility explore subtree given depth, enumerating specific limited
number branches, rather following standard recursion propagation expansion. achieve behavior, necessary selectively interfere standard
recursive call solver, implement non-deterministic assignment partial tuples
finite domain variables. resembles implementation table constraint,
dynamically created search. strategy allows us significantly reduce
number branches explored subtree, produces significant results
selection branches controlled adequate partitioning function. work,
propose effective partitioning function based measure 3D similarity point
variables; used direct search along specific branches controlled depth
adequately separated partitioning function. practically realized
introducing form look-ahead, controlled JM propagator, returns set
partial assignments well filtered domains finite domain variables.
4.1.1 Hybrid Solver

971

fiCampeotto, Dal Palu, Dovier, Fioretto, & Pontelli

~ , P~ , D,
~ C, `)
Algorithm 1 search(V
~ , P~ , D,
~ C, `
Require: V
~ |
1: ` > |V
2:
output (P~ )
3:
return
4: end
5: fragment index f Dv`
~ , P~ , D)
~
6:
AC-3(C {v` = f }, V
nm
7:

get table JM()
8:
n > 0
9:
Non-deterministically select 1..n
10:
j = 1..m
11:
C C {v`+j = [i][j]}
12:
end
~ , P~ , D,
~ C, ` + m)
13:
search(V
14:
else
~ , P~ , D,
~ C, ` + 1)
15:
search(V
16:
end
17:
end
18: end
general structure solver highlighted Algorithm 1. solver designed
~ = v1 , . . . , vn finite domains variables, together domains
process list V
Dv1 , . . . , Dvn them. Intuitively, domain set indices set fragments.
Moreover, solver receives list P~ = p1 , . . . , p5n 5 n point variables,
variables p4i , . . . , p4i+4 related fragment domain Dvi . point variable
~
pj has, turn, spatial domain Dpj . C represents constraints elements V
P~ . Finally, solver receives input current level ` exploration
search tree (set 1 first time procedure called). sake simplicity,
choice variables assigned based ordering input list (more
sophisticated selection strategies easily introduced). enter level `,
assume variables v1 , . . . , v`1 already assigned.
~ already assigned
Let us briefly describe algorithm. variables V
(lines 14), search algorithm terminates returns computed solution, represented values assigned variables P~ . Otherwise, non-deterministically select
fragment index domain variable v` assign variable. Lines 67
indicate execution standard constraint propagation step (using AC-3). propagation step fails, assume another non-deterministic choice made, possible.
Every reference non-deterministic choice algorithm corresponds creation
choice-point target backtracking case failure (for simplicity,
assume chronological backtracking). succeeds, leading possible reduction
~ computation proceed. table constraint might produced
domains D,
propagation JM constraint AC-3 procedure (see details).
case (lines 89), (m) variables non-deterministically assigned
values table (lines 912), search continues less variables
972

fiA Constraint Solver Flexible Protein Models

assigned (line 13). case, search continue one less
variable (v` ) assigned (line 15).
peculiar feature constraint solver (not reported abstract algorithm
defined) used avoid search solutions similar others.
Let us assume 3D space partitioned cubic voxels size k A. Then, given list
~ list PVs P~ , user state:
FDVs V
~ , P~ , k)
uniqueseq(V

(7)

constraint forces solver prune search tree following way. Given
~ variable assigned next step
partial assignment , let v V
~
p1 , . . . , ph P PVs consequently instantiated. constraint ensures
two assignments 1 , 2 extending v, p1 , . . . , ph holds exists least
one {1, . . . , h} 1 (pi ) 2 (pi ) belong voxel.
4.2 Constraint Propagation
section, discuss propagation rules associated various constraints introduced Section 3.3; applied within call AC-3 procedure (line 6
Algorithm 1). constraint propagation used reduce domain size PVs
FDVs, ensuring constraint consistency. AC-3 standard implementation fixpoint
propagation loop (Apt, 2009; Rossi et al., 2006).
4.2.1 Joined Multibody Constraint
JM constraint complex constraint triggered leftmost points involved constraint (anchors) instantiated. JM propagation (JMf) based
analysis distribution space points involved. goal propagation reduce domains FDVs identification fragments
cannot contribute generation rigid body compatible corresponding Point Variable domains. viewed form hyper-arc consistency
set fragments. Moreover, due complexity precision considerations,
propagator approximated use spatial equivalence relation (), identifies
classes tuples fragments; classes property spatially different
one another.
allows compact handling combinatorics multi-body, controlled
error threshold allows us select precision filtering. equivalence relation
captures rigid bodies geometrically similar, allowing search compact
small differences among them.
~ V
~ , A,
~ E,
~ i, along
JMf algorithm receives input JM-constraint hS,
set G points available placement bodies,
equivalence relation .
sake readability, assume domain information variables avail~ , Tab). process, algorithm
able. algorithm builds table constraint table (V
makes use function (lines 7 8); function takes input two lists ~a ~b
3D points, computes homogeneous transformation overlap ~b ~a. call
973

fiCampeotto, Dal Palu, Dovier, Fioretto, & Pontelli

Algorithm 2 JMf algorithm.
~ V
~ , A,
~ E,
~ , G,
Require: S,
Ensure: Tab
~ |; Tab =
1: n |V



T1 start(B) A1 A2 A3






T1 end(B) E1 E2 E3



2: R1 (B, T1 ) B S1 , T1
p points(B).q G. k(T1 p) qk





c C involving p.consistent(c))
3: P1 {T1 end(B) | (B, T1 ) R1 }
4: = 2, . . . , n
5:
Pi = ; Ri = ;
6:
E
Pi1 /

= (E, start(B)) 6= fail






end(B) E3i2 E3i1 E3i
7:
Ri Ri B Si
p points(B).q G. k(T p) qk





c C involving p.consistent(c))
8:
Pi {(E, start(B)) end(B) | B Ri }
9:
end
10:
compute Pi / filter Ri accordingly
11: end
12: representative L Pn /
13:
Tab = Tab (L)
14: end
function fail ~a 6_ ~b. simplicity, fourth component (always 1)
homogeneous transformation explicitly reported algorithm.
~ |, algorithm computes sets Ri Pi , respectively
= 1, . . . , n = |V
contain fragments Si still lead solution, corresponding allowed
3D positions end-points. fragment B Ri+1 denote parent(B)
set fragments B 0 Ri end(B 0 ) _ front(B) via . fragment B,
denote label(B) corresponding FD value associated.
computing/updating Ri Pi , fragments end-anchors contained
bounds E3i2 , E3i1 , E3i kept. Fragments would cause points collapsei.e.,
due distance smaller previously placed pointsare filtered (lines 2
7). Moreover, spatial positions points first fragment validated
(line 2); finally, enforce consistency check constraint c C involving points
points(B) Si retain points potentially reach admissible positions
(lines 2 7).
~ | 1 iterations (lines 411). First Ri Pi computed
algorithm performs |V
basis sets end-anchors previous level Pi1 starting point
selected fragment B, filtering overlapping lead
wrong portions space (lines 78). filtering based applied (line 10).
step, set triples 3D points Pi clustered using . representative
equivalence class chosen (within Pi ) corresponding fragment Ri identified;
(non-identified) fragments filtered Ri . Let us note

974

fiA Constraint Solver Flexible Protein Models

filtering based clustering performed initial step P1 , typically
already captured restrictions imposed A.
fragments reachable last iteration determined representatives
selected, populate Tab set tuples associated representative L.
~ allows us overlap last point
function (L) returns assignments V
L.
JMf algorithm parametric w.r.t. clustering relation function selecting
representative; express degree approximation rigid bodies
built. proposed clustering relation loop modeling takes account two factors: (a) positions end-anchors 3D space (b) orientation
plane formed fragments anchor L w.r.t. fixed reference system 0 adopted
FIASCO (c.f. Figure 7). combination clusterings allows capture local geometrical
similarities, since spatial rotational features taken account.
spatial clustering (a) used following. Given set fragments, three end
points C 0 (end anchors) cluster considered, centroid triangle
C 0 computed. use three parameters: kmin , kmax N, kmin kmax , r R,
r 0. start selecting set kmin fragments, pairwise distant least 2r.
fragments selected representatives equivalence class fragments fall
within sphere radius r centered centroid representative. clustering
ensures rather even initial distribution clusters, however fragments may fall
within kmin clusters. allow create kmax kmin new clusters,
covering sphere radius r. Remaining fragments assigned closest
cluster. employed technique variant k-means clustering algorithm called
leader clustering algorithm; allows fast implementation acceptable results.
orientation clustering (b) partitions fragments according relative orientation planes R w.r.t. 0 . plane spatial orientation described Euler angles
, , frame w.r.t. 0 . algorithm produces variable number partitions depending . particular, given threshold > 0 3 (360/) possible partitions
describing equal regions sphere though interval ( / 2 , / 2 , / 2 ).
fragment allotted partition determined .
final cluster intersection two partitioning algorithms. defines
equivalence relation depending kmin , kmax , r, . representative selection
function selects fragment partition according preferences (e.g.,
frequent fragment, closest center, etc.).
Note r = 0, = 360, kmax unbounded, clustering performed
would cause combinatorial explosion every possible end-anchor whole
problem. spatial error introduced depends r . = 360, error
introduced step bounded 2r dimension. iteration
errors linearly increased, since new fragment placed initial error gathered
previous iterations, thus resulting 2nr bound last end-anchor. Clearly
bound coarse, average experimental results show better performances.
Similar considerations argued rotational errors, however intersection
two clusterings, provide, general, much tighter bound.

975

fiF. Campeotto et al.

Campeotto, Dal Palu, Dovier, Fioretto, & Pontelli

Figure
8: graphical
representation
propagation
JM constraint
theconstraint
variables Viover
, . . . , Vthe
i+3 .variables Vi , . . . , Vi+
Figure
9: graphical
representation
theofpropagation

JM
(a) simultaneous placement elements domain variable Vi+1 simulated,
(a) simultaneous placement elements domain variable Vi+1 simulated,
overlapping corresponding fragment end-anchor fragment associated element
overlapping
eachsetcorresponding
fragment
end-anchor
fragment
element
domain
Vi .
points Pi+1
computedwith
clustered
using theofrelation
(pointsassociated
within
domain
Vieach
.
set one
points
Pi+1
computed
andchosen
clustered
using fragments
relation (points
dotted
ellipses). ofFor
cluster
fragment
representative
hence
(highlighted
dotted
ellipses).
Forcollection
cluster
one fragment
representative
hence
(highlighted fragmen
filled
rightmost
circle).
representatives
constitutes
set Ri+1
(b) Thechosen
previous
step iswith
performed
circle).
basis
end-anchors
fragmentsconstitutes
representatives
ini+1 (b) previo
filled
rightmost

collectionrelated
representatives
thechosen
set R
previous
filled
box,on
represents

setthe
points
G
available
placement
step islevel.
performed

basis
end-anchors
related
thefor
fragments
representatives chosen
bodies (for instance due distance constraint). fragment falling area discarded.

previous
level.

filled
box,
represents

set

points
G



available
placeme
(c) last iteration JMf algorithm set points Pi+3 clustered,

bodies
(for
instance
due


distance
constraint).


fragment
falling


area
discarde
reach desired position retained, instance front-anchor associated fragment next
(c)


last
iteration


JMf
algorithm

set

points
P


clustered,


th
variable, sequence fragments able lead condition (marked thick
i+3 lines) selected
populate

table
Tab.
reach desired position retained, instance front-anchor associated fragment ne
variable, sequence fragments able lead condition (marked thick lines) select
populate table Tab.
976

fiA Constraint Solver Flexible Protein Models

P
||P-Q||d

Q
Figure 9: effect distance constraint ||P Q|| propagation. Empty boxes
represent original PVs domains full boxes represent reduced PVs domains
effect constraint propagation.
4.2.2 Distance Constraints
propagation distance constraints approximated technique reduces
size box domains. introduce following operations PVs box domains
two variables P Q used describe propagation rule
following subsections:
Domain intersection: DP DQ = hmax(Pmin , Qmin ), min(Pmax , Qmax )i
Domain union: DP DQ = hmin(Pmin , Qmin ), max(Pmax , Qmax )i
Domain dilatation:
DP + = hPmin d, Pmin + di
max(P, Q) = (max(Px , Qx ), max(Py , Qy ), max(Pz , Qz )), (and similarly min),
P + = (Px + d, Py + d, Pz + d).
Given two point variables P Q, domains DP DQ , respectively, simplification rule constraint ||P Q|| updates domains follows:
DP = ((DQ + d) DP )

DQ = ((DP + d) DQ )

(8)

ensures points DP DQ positioned within approximation
sphere radius d. sphere approximated considering box inscribing (a cube
side 2d), illustrated Figure 9.
propagation constraint ||P Q|| harder coarse representation
box domains adopted work model PVs allow description
complex polyhedron. hence apply simple form bound consistency described
following rule:

(DP DQ ) = hl, ui, ||u l|| <
P

||P Q|| :
= , DQ =


establishes unsatisfiability constraint.
977

(9)

fiCampeotto, Dal Palu, Dovier, Fioretto, & Pontelli

4.2.3 Fragment Constraint
propagation fragment constraints fragment(V, P~ , ) exploited solution
search enforce assembly process fragment [V ] along point variables
P1 , . . . , Pn P~ . Recall DV domain V containing references {j1 , . . . , jk }
database fragments .
P1

= {p1 }, DP2 = {p2 }, DP3 = {p3 }, DV = {j1 , . . . , jk }
~

fragment(V, P , ) :
jk
n
^

[
{((p1 , p2 , p3 ), [f ]) [f ](i)}
DPi = DPi


i=1

(10)

f =j1

((p1 , p2 , p3 ), [f ]) roto-translation applied overlap first three
points fragment [f ] start-anchor (p1 , p2 , p3 ).
conjunction bottom part rule re-evaluates domains P1 , P2 , P3 ,
may reduce singleton domains empty whenever compatible
selected fragment.
4.2.4 Centroid Constraint
positions atoms N , C C 0 amino acids determined,
propagation algorithm enforces value PV PCG involved centroid constraint.

P
N = {pN }, DC = {pC }, DPC 0 = {pC 0 }

centroid(PN , PC , PC 0 , PCG , a) : P
(11)
CG = (DPCG {cg(pN , pC , pC 0 , a)})
cg(pN , pC , pC 0 , a) support function returns center mass
side chain amino acid considering points pN , pC , pC 0 , described
Sect. 3.3.3.
4.2.5 Implementation Details
proposed solver relies efficient C++ implementation, carefully designed
allow additional tailored solving capability without need reshaping core structures.
internal representation domains finite domain variables abstracted two arrays length size initial domain. One array points
values Boolean bit-mask states whether value still
domain. flags set 0, current partial assignment cannot part solution
overall constraint; exactly one set 1, variable assigned value.
representation implies linear scan domains propagation
justified reasonably small size domains target application (typically less
100 values). internal representation domains point variables simply
pair hmin, maxi uniquely characterizes 3D box R3 . Since variables used
mostly distance constraints, representation expressive enough (Oct-trees
considered significant advantage).
Point Variables propagation described above; variables instantiated
fragment selection.
978

fiA Constraint Solver Flexible Protein Models

management uniqueseq property (7) implemented dedicated data
structure based hash tables. Every time PV assigned, value mapped 3D
voxel fixed size. 3D grid implemented via Hash Table voxel indexes keys
points contained voxels values. operations performed O(1)
(amortized complexity).
4.3 One JM Constraints
briefly describe modeled two problems FIASCO. JM constraint
able model geometrically assembly fragments therefore used every
protein model. single JM covers protein ensures flexibility, however long
proteins computational precision issues arise. beneficial model
protein multiple JM constraints, e.g. JM (i, j) JM (j, k) amino acids
j covered JM constraints overlap common amino acid.
practical choice improves approximate search allows increase number
different solutions produced. practice, protein section handled JM constraint
potentially combined different arrangements sections. Therefore,
expected number solutions found grows exponentially number JM
constraints. JM constraint parameters used control clustering precision
number conformations found.

5. Experimental Results
report experimental results obtained FIASCO system (available
http://www.cs.nmsu.edu/fiasco). Experiments conducted Linux Intel Core i7
860, 2.5 GHz, memory 8 GB, machine. solver implemented C++.
fragment database adopted FREAD database shown effective loop structure prediction (Choi & Deane, 2010). parameters analysis 5.1.4
use database fragments length 1. fragments classified amino
acid class frequency occurrence whole top-500.
set system model two applications described below. particular,
Section 5.1 analyze loop modeling scenario focus performances JM
filtering examining filtering power computational costs. Next, compare
quality loop conformations generated, measuring RMSD proposed loop
respect native conformation. present relationships among
JM parameters control quality efficiency.
Section 5.2 show examples ab-initio protein structure prediction
conclude comparison FIASCO constraint solvers, protein models
described common subset constraints.
5.1 Loop Modeling
loop modeling problem formalized presence two known (large) fragments
fixed space. sequence amino acids length n given connecting
two parts protein. JM constraint defined sequence, particular
attention starting ending points fixed. start first fragment
979

fiCampeotto, Dal Palu, Dovier, Fioretto, & Pontelli

Figure 10: example loop computed tool
end last fragment, namely sequence C 0 (initial points) coordinates
~a = (a1 , a2 , a3 ), sequence C 0 (final points) coordinates ~e = (e1 , e2 , e3 )
known. one caveat end points: due discrete nature fragment
assembly, unlikely exactly reach final points. accommodate errors,
require JM constraint produces results fall within threshold
corresponding final points.
Figure 10 show Example loop computed tool (the parts protein
connected shown left connecting loop right).
Additional spatial constraints points (e.g. no-good regions determined presence
atoms) given. constant (now = 1.5A) asserts minimum distance
pairs atoms.
5.1.1 Filtered Search Space Performances
selected 30 protein targets set non-redundant X-ray crystallography structures
done Canutescu Dunbrack (2003). partitioned proteins 3 classes
according loop region lengths (n = 4, 8, 12). model CSP uses
fragment assembly model loop, particular using JM constraint loop
region.
assess filtering capabilities FIASCO, perform exhaustive search generating solution protein targets. Using clusterization 0.2A, number
different fragments length 1 found amino acid (see Fig. 11). size
domains corresponding FDVs bound 100this adequate sampling
describe reasonable amino acid flexibility. cases number fragments
exceeds 100, 100 frequent ones kept.
increases likelihood generating loop structure similar native
one. loop length n generates exponential search space size bounded 100n .
selected variable leftmost one. Fragments selected decreasing frequency order.
imposed JM constraint every 4 consecutive amino acids. clustering
parameters set follows: kmin value equal size domains,

980

fi100 120 140
80
60
40
0

20

N. different Fragments

Constraint Solver Flexible Protein Models



C



E

F

G

H



K

L



N

P

Q

R





V

W



Amino acids

Figure 11: Number different fragments (after clustering) per amino acid dataset
used different values kmax based loop lengths. values r set
120 0.5 setting. summary parameters listed Table 1.
Table 1 report average times needed exhaustively explore loop search
space, average number solutions generated.
n
4
8
12

# JM
1
2
3

JM Parameters
kmin kmax

100 1000 120
100
500 120
100
100 120

r
0.5
0.5
0.5

Full JM
# Solutions Time (s)
597
3.13
98507
10.12
328309
28.87

Table 1: Loop Modeling settings average running times (in seconds) number
solutions generated.

5.1.2 JM Approximated Propagator Quality
Even approximated JM produces small set solutions, show
good representation overall variability protein structure. test,
compare solutions means RMSD original structures. experiments
carried 30 protein targets settings described Table 1,
exception kmax loop set size 12, set 500.
Figure 12 show bar chart RMSD predictions protein
loop within group targets analyzed. Precisely, x-axis 30 (10
loop length) protein targets. bar reports best RMSD (dark), average
RMSD (grey), worst RMSD (light grey) found. Numbers bars represent
number loops found (multiplied factors indicated underneath). results
biased fragment database use: excluded fragments belong

981

fi2.1
0.15

1.1

3.7

0.3

0.38

6
5.6

4.7

1.3
0.78

0.59

0.96
1.3

1.3

1.1

0.67

0.65
0.83

0.64

0.68

0.31

0.77

0.71
0.2

0.52

0.19

1.3

6

0.92

8

Best Rmsd
Avg Rmsd
Worst Rmsd

4
0

2

RMSD (Angstrm)

2.9

Campeotto, Dal Palu, Dovier, Fioretto, & Pontelli

. 105

. 103

Length 4

Length 8

. 107

Length 12

Figure 12: RMSD comparison Loop Set (x-axis: 30 protein targets)

deposited protein targets. Therefore, possible reconstruct original
target loop none searches expected reach RMSD equal 0.
loops length 8 12, exploration whole conformational search space
using simple search procedure would result excessively long computation time.
enforces need propagator JM, filtering algorithm successfully removes
redundant conformations allows us cover whole search space short period
time.
Fig. 12 loop predictions calculated using fragments length 1. study
choice affects time accuracy sampling model loops length
12 using fragment length 3, 6, 9. Best RMSDs reported Figure 13.
experiments kept settings used (kmax = 500). Moreover, JM constraint
imposed fragments order cover whole fragment (e.g, fragments
length 3 set JM constraint every three consecutive amino acids) set time-out
3600 Seconds.
Notice increasing length fragments accuracy decreases due
reduced size domains. Nevertheless, time reduced since sampling
performed smaller search space JM constraints cover longer sequences amino
acids. average times are: 1580.14, 0.98, 0.74 seconds using fragments length 3,
6, 9 respectively.

982

fi3
2
0

1

RMSD (Angstrm)

4

5

Constraint Solver Flexible Protein Models

Len3

Len6

Len9

Figure 13: RMSD comparison loop sampling loops length 12 using fragments
length 3, 6, 9.

983

fiCampeotto, Dal Palu, Dovier, Fioretto, & Pontelli

5.1.3 Comparison State-of-the-art Loop Samplers
section, compare method three state-of-the-art loop samplers: Cyclic
Coordinate Descent (CCD) algorithm (Canutescu & Dunbrack, 2003), Self-Organizing
algorithm (SOS) (Liu, Zhu, Rassokhin, & Agrafiotis, 2009), FALCm method (Lee,
Lee, Park, Coutsias, & Seok, 2010).
Table 2 shows average best RMSD benchmarks length 4, 8 12
computed four programs. report results given Table 2 Canutescu
Dunbrack CCD, Table 1 Liu et al. SOS, Table II Lee et al.
FALCm method, RMSDs obtained adopting settings JMf provided
best results previous section (see Subsection 5.1.5). noted
results line produced systems.
Loop
Length
4
8
12

Average (best) RMSD
CCD
SOS
FALCm
JMf
0.56
0.20
0.22
0.27
1.59
1.19
0.72
0.93
3.05
2.25
1.81
1.58

Table 2: Comparison loop sampling methods
execution time reported appear competitive (e.g., considered
results reported Soto et al., 2008).
5.1.4 JM Parameters Analysis
section, analyze impact JM parameters quality best
solutions found execution times. particular, aim experiments
shed light relationship JM constraint settings results.
Figure 14, analyze impact kmax execution times (left)
precision (right) filtering JM constraint. top bottom, use
= 60, 120, 360. tests performed protein loops length 4 (see section
above), adopting cluster parameters, r {0.5, 1.0, 3.0, 5.0}, kmin = 100. dot
plots represents average best RMSD found predictions (left)
average execution time (right). RMSD values tend decrease smaller clustering
parameters r number clusters increases, filtering time increases
kmax increases.
Figure 15 study relation RMSD number JMs
cover given target loop protein Voxel-side parameter. experiments
used values {100, 250, 500, 800, 1000} kmax , set r = 1, = 120,
averaged RMSDs values resulting sample set structures. relation
RMSD number JM well average worst computational times
shown Fig. 15 left. use medium-length loop taken protein 1XPC
(res. 216-230) vary number JMs cover loop (the side voxel
set 3A). figure observe increasing number JMs (i.e.
covering less amino acids single JM) RMSD decreases computational
cost higher. Notice best RMSD given loop covered 4 JM

984

fiA Constraint Solver Flexible Protein Models

0.9



50.0


0.8

0.6

10.0


r


0.5

r

Time (s)

)
RMSD (A

0.7

0.5
1.0
3.0
5.0



0.4



0.5
1.0
3.0
5.0

1.0


0.3

0.5


0.2





10000

100

0.1

100

1000

5000

1000

5000

JM kmax

10000

JM kmax

50.0


0.9


0.8
10.0

0.6

r



0.5
1.0
3.0
5.0



0.5

Time (s)

)
RMSD (A

0.7
r





1.0

0.4

0.5
1.0
3.0
5.0

0.5



0.3




0.2

100

1000

5000

10000

100

1000

JM kmax

5000

10000

JM kmax

0.9





0.8



0.6

r




0.5

0.5
1.0
3.0
5.0

Time (s)

)
RMSD (A

0.7

r

1.0



0.5

0.5
1.0
3.0
5.0

0.4



0.3




5000

10000

0.2

100

1000

100

JM kmax

1000

5000

10000

JM kmax

Figure 14: Comparison best RMSD values execution times varying
kmax clustering parameter = 60 (top), 120 (center), 360 (bottom)

985

fi7
RMSD

1LE0
1MXN
1FDF

0

0

1

2

3

2091.72 (3216.94)

1105.63 (2057.83)

194.70 (411.95)

9.53 (19.54)

11.73 (18.42)

4
2

RMSD

4

5

6

6

8

Campeotto, Dal Palu, Dovier, Fioretto, & Pontelli

1

2

3

4

5

0

N.of JM

20

40

60

80

100

VoxelSide

Figure 15: Left: RMSD (best average) Time (average worst) values increasing
number JM constraints completely cover target loop length 15. Right:
Average (dotted line) best (solid line) RMSD targets 1LE0 length 12 (top),
1MXN length 16 (medium), 1FDF length 25 (low). JM-Voxel-side parameter
voxels clustering varies 3 100. JM kmax parameter varies
100 1000. targets completely covered multiple JM-constraints.
constraint (i.e., JM constraint four consecutive amino acids). rule thumb
suggest use JM constraint cover 3 4 consecutive amino acids since
setting produces best results within acceptable time. Fig. 15 right report
best RMSD (solid line) average RMSD (dotted line) structures found using
multiple JM constraints cover sequences 4 consecutive amino acids whole
target proteins. Namely, protein target length n, set JM constraints
+ 3, = 3 j, 0 j < n/3. experiments, considered three proteins
relatively short length, order obtain complete exploration search space
reasonable computational time: 1LE0 (length 12), 1MXN (length 16), 1FDF (length
24). Moreover used values {3, 5, 10, 20, 30, 50, 100} side voxels used
clustering.
Figure 15 observe voxel size (enabled uniqueseq)
impact clustering values lower 30A (recall proteins diameter
less 30A). voxel sides lower 3A observe substantial improvement
terms quality, time required solver compute solutions increases
exponentially.
5.1.5 Results Summary Default Parameters
provide guidelines may helpful tune JM parameters given
protein modeling problem. suggest several levels parametrization might used
according user needs respect running time prediction accuracy. stress

986

fiA Constraint Solver Flexible Protein Models

merely guidelines, outlined empirical evaluations, several
tests done establish desired tuning.
suggest set JM model sequence least 3 amino acids general
longer 8, payoff computational load JM clustering. default choice
kmin set average size variable domains involved JM constraint,
suggest set kmax least kmin greater 10000. latter,
together number consecutive JM constraints, greatest impact
computational cost prediction accuracy. Computational costs grow number
consecutive JM increases, time produce general higher
accuracy. trend exhibited growing kmax parameter. Table 3 illustrates
five basic settings could used incrementally establish trade running
times prediction accuracy. first level (Lev. 1) associated faster computational
times lower accuracy last one (Lev. 5) slowest accurate.
second column table indicates length amino acid sequence modeled
single JM.
Lev.
1
2
3
4
5

n.JM
8
8
6
4
4

kmin
|D|
|D|
|D|
|D|
|D|

kmax
500
1000
100
500
1000


120
120
120
120
120

r
5
3
3
3
1

Speed






Accuracy






Table 3: JM default parameters

5.2 Application Protein Structure Prediction
protein structure prediction problem, model generic backbone multiple
JM constraints. principle, unique JM constraint model whole problem.
previous cases, split smaller parts, moreover, presence secondary
structure valid help placement JM constraints handle loops
consecutive pair. simple search generate pool conformations, energy
scoring select best candidate. used statistical energy function developed
5@ model, energy function used instead.
section, study applicability FIASCO protein structure prediction
problem. particular, consider prediction problems secondary structure
elements protein given. Furthermore, order assess potential structure,
introduce energy functionthe adopted previous studies,
precisely described http://www.cs.nmsu.edu/fiasco.
modeling, used information location type
secondary structure elements primary sequence provided directly Protein
Data Bank. imposed sequence JM constraints every consecutive
pair secondary structure elements. number consecutive JM constraints varied
according length unstructured sequence modeled, covering 5
amino acids single JM constraint. addition one JM constraint imposed
first amino acid beginning first secondary structure element another
987

fiCampeotto, Dal Palu, Dovier, Fioretto, & Pontelli

end last secondary structure element last amino acid (the tails
protein). domains initial end points JM constraints set
admissible points (a box large enough contain protein). search phase,
first secondary structure deterministically set space. labeling proceeds
JM constraint attached leading next secondary structure on.
Tails instantiated end.
propagation constraints generates set admissible structures, represents possible folds target protein. set, select structure
minimum energy; extract structure minimum RMSD, order evaluate
quality energy function. tests adopt FREAD database. Table 4
reports best energy values found FIASCO. RMSD columns reported
corresponding RMSD associated conformation best energy found solver.
#JM column reports total number JM used model protein, together
maximum number consecutive JM adopted model contiguous sequence
amino acids (within parentheses).
Protein ID
1ZDD
2GP8
2K9D
1ENH
2IGD
1SN1
1AIL
1B4R
1JHG

Len.
35
40
44
54
60
63
69
79
100

# JM
4(2)
4(2)
5(2)
4(1)
7(2)
7(3)
4(1)
11(2)
7(1)

Energy
100513
138110
204693
309896
295882
358874
411077
313590
572950

RMSD
2.05
6.28
2.52
8.21
10.50
5.55
4.59
6.11
4.51

Time (Min.)
11.42
8.55
2.69
31.67
26.47
14.82
4.46
8.41
4.50

Table 4: Ab initio prediction FIASCO.
results show quality predictions computed FIASCO (6.3 average
RMSD) competitive (and, shown following section, par better
produced methods). results particularly encouraging proteins longer
length, sampling search space aids development admissible structures.
time required FIASCO completely explore search space depends strongly
type mutual arrangement secondary structure elements target.
example, protein 2K9D protein 1ENH length, FIASCO
significantly faster first protein second one. observation
made proteins 2IGD 1SN1. results reported Table 4 promising
suggest feasible approach solve ab initio prediction problem.
future work, explore integration local search techniques (e.g., largeneighboring search), order sample search space decrease time
needed explore it.

988

fiA Constraint Solver Flexible Protein Models

5.3 Comparison FIASCO State-of-the-Art Constraint Solvers
section, motivate choice designing ad-hoc solver instead using
general-purpose constraint solver. particular provide comparison FIASCO
state-of-the-art constraint solving. results justify choice implementing new
solver scratch instead using available constraint programming library constraint programming language. solver chosen comparison Gecode (Gecode
Team, 2013), efficient solver winner recent MiniZinc challenges (Stuckey, Becket, & Fischer, 2010).
Gecode recently introduced (in version 4.0) handling floating point variables.
Nevertheless, since Gecode fastest solver FD variables, first encoded
PSP discretizing fragments positions. particular, multiplied real
number scaling factor (100) obtain integer values. spatial position encoded
triple variables, representing coordinates point. operation (e.g.,
multiplications) applied variables requires re-scaling result; unfortunately
leads ineffective propagation. particularly evident dealing distance
constraints, require implementation Euclidean distance pairs triples
variables.
order understand solvers capabilities propagate constraints placement overlapping fragment implemented three versions code, considered
different number constraints, precisely:
1. implementation uses JM constraint (JM only)
2. implementation adds alldistant constraint
3. implementation adds alldistant centroid constraints
cases use complete search (in particular, clustering tabling constraints
lines 10 1214 Algorithm 2 disabled).
Table 5, report execution times required FIASCO Gecode (with
considered constraints) determine increasing number solutions, 1, 000
1, 000, 000. solutions computed target protein 1ZDD length
35. Table 5 shows execution time solvers increases proportionally
number solutions found. However, FIASCO one order magnitude faster Gecode
unconstrained case, two orders magnitude faster cases. main
reason FIASCO specifically developed handle finite domains 3D point
variables, approximated FD variables Gecode. Constraints
approximations propagate poorly slowly. Moreover, approximation fragments
using finite domain variables introduces approximation errors, grow search
phase (and consequently, less solutions returned constrained cases). errors
may result final structures relatively imprecise coordinates atoms
converted back real values.
Table 6, consider small sequence four amino acids (SER TRP THR TRPthe
first four amino acids protein 1LE0), generate solutions. report
values best average RMSD among structures sets solutions computed using FIASCO Gecode implementation complete enumeration
989

fiCampeotto, Dal Palu, Dovier, Fioretto, & Pontelli

Number
solutions
1000
10000
100000
1000000

JM
0.030
0.312
3.006
29.859

FIASCO
alldistant alldistant + centroid
0.051
0.059
0.476
0.612
4.794
6.040
47.669
61.385

JM
0.358
2.571
25.407
252.815

Gecode
alldistant alldistant + centroid
2.531
3.807
21.056
35.370
209.569
347.831
2186.83
3632.39

Table 5: Comparison execution times FIASCO Gecode, increasing number
solutions different sets considered constraints.
domains. observe FIASCO significantly faster exploring search space,
moreover, approximation introduces errors leads loss feasible solutions.

JM
alldistant
alldistant + centroid

N. sol.
810000
805322
805322

FIASCO
Time (sec.) RMSD
20.493
0.167
33.493
0.167
38.953
0.167

Avg. RMSD
1.570
1.564
1.564

N. sol
810000
774463
169441

Gecode
Time (sec.) RMSD
181.102
0.190
252.974
0.190
140.644
0.580

Avg. RMSD
1.596
1.591
1.880

Table 6: Number solutions, time, best RMSD, average RMSD set structures
found FIASCO Gecode complete enumeration solution space using
different constraints
encoded constraint satisfaction problem using new version
Gecode allows employ float variables. labeled finite domain variables
allow select fragments, values point variables obtained constraint
propagation. Since constraint propagation float variables based interval arithmetics,
turns amino acids intervals large able reconstructing protein evaluating energy value. instance, complete
assignment variables related fragments protein 1ZDD, domains
float variables associated position first two amino acids singletons,
related tenth amino acids intervals size one two A; even worse,
domains atoms eleventh amino acids unbounded. stage
labeling float variables required computational time orders magnitude higher
reported Table 6 finite domain Gecode implementation.
Constraint solvers ECLiPSe (Cheadle, Harvey, Sadler, Schimpf, Shen, & Wallace, 2003) Choco (Choco Team, 2008) support mixed use integer
real variables. ECLiPSe Prolog-based language handles integer real variables together. However, great number matrix operations required application fit well Prolog implementation. Furthermore, current trend
ECLiPSe replace direct constraint solving translation FlatZinc.
case Choco, current support Real Variables still development (c.f.
http://choco.sourceforge.net/userguide.pdfpage 3). Things may change
next releases.
experimented another constraint solver, implementing multi-body
constraints using JaCoP library (JaCoP Team, 2012), similar way done
Gecode. Eventually, tested protein used results reported Table 5,

990

fiA Constraint Solver Flexible Protein Models

observe substantial difference terms execution time,
Gecode implementation.
terms protein structure prediction, design FIASCO influenced
previous work TUPLES system (Dal Palu et al., 2011). TUPLES
constraint solver protein structure prediction, based fragments assembly. Figure 16
compares performance TUPLES FIASCO set proteins discussed
Section 5.2. make comparison fair, make use energy function
systems assume secondary structure elements known. Note
important differences two systems. TUPLES implemented using
constraint logic programming techniques, specifically, SICStus Prolog (Swedish Institute
Computer Science, 2012); TUPLES make use floating point variables;
hand, TUPLES introduces heuristic search mechanism based large neighboring
search.
results show quality predictions computed FIASCO (6.3 average
RMSD) better quality predictions computed TUPLES (9.4 average
RMSD). complete sampling search space allows us obtain better results
proteins longer length benchmark ( 63). Instead, shorter proteins,
obtain comparable results. similarity quality depends use
energy function systems. Notice energy function used designed
simpler model adopted TUPLES (C C ). Moreover, TUPLES based Prolog
implementation provide floating point variables hence value must
rounded approximated. aspects explain quality differences
RMSD Best RMSD found FIASCO behavior
proteins (e.g., 1ZDD, 2GP8 ) (energy) RMSD values better FIASCO even
corresponding energy (RMSD) values higher TUPLES. execution times
FIASCO significantly faster TUPLES, spite FIASCOs lack sophisticated
search heuristic.
performed comparison state-of-the-art online Robetta predictor (Raman, Vernon, Thompson, Tyka, Sadreyev, Pei, Kim, Kellogg, DiMaio, Lange, Kinch, Sheffler, Kim, Das, Grishin, & Baker, 2009) first four proteins Table 6. built
dictionary 3 9 amino acid long peptides Robetta interface,
disabled homology inference, order maintain fair comparison. results are:
1ZDD computed 21s 5.92 RMSD, 2GP8 computed 16s 5.44 RMSD, 2K9D
computed 22s 4.65 RMSD, 1ENH computed 39s 2.74 RMSD. noted
results line Robetta predictor.
Let us conclude section mentioning results reported previous section
(where compared FIASCO TUPLES) provide implicit comparison another off-the-shelf solver, SICStus Prolog constraint logic programming solver (Swedish
Institute Computer Science, 2012).

6. Conclusions
paper, presented novel constraint (joined-multibody) model rigid bodies
connected joints, constrained degrees freedom 3D space. presented
polynomial time approximated filtering algorithm joined-multibody constraint,
991

fiCampeotto, Dal Palu, Dovier, Fioretto, & Pontelli

Figure 16: Comparison RMSD Execution Time TUPLES FIASCO

992

fiA Constraint Solver Flexible Protein Models

exploits geometrical features rigid bodies. particular, filtering algorithm
combined search heuristics produce pool admissible solutions
uniformly sampled. allows direct control quality number solutions.
filtering algorithm based 3D clustering procedure able cope
high variability rigid bodies, preserving computational cost. practical
advantages joined-multibody constraint shown extensive set real protein
simulations two main categories: protein loop reconstruction structure prediction
(ab-initio). tests showed parameters constraint able control
effectively quality computational cost search. conclusion, constraint
solver FIASCO able model effectively various common protein case-studies analyses.
future work, applications side, plan explore protein loop closure
problem, use specific databases scoring functions. close problem
protein flexibility, plan use FIASCO solver generate conformational space
long scale movements nuclear receptors (Dal Palu et al., 2012b). Finally, plan use
FIASCO general context protein structure prediction combination local
search methods protein-ligand spatial constraints. constraint side, plan
integrate JM filtering algorithm distance constraints, order generate
accurate clusters; plan integrate spatial constraints inferred bounds
energy terms (e.g., favorable contributions provided pairing secondary structure
elements translate energy bounds distance constraints). plan investigate
use multiple JM constraints model super-secondary structures placement,
useful capture important functional structural protein features. latter
thought imposing several spatial path preferences given chain points. Finally,
intend integrate constraint solver visual interface make easily available
Biologist practitioners porting parts tool within GPU-based
framework recently explored Campeotto, Dovier, Pontelli (2013).

Acknowledgments
thank Federico Fogolari comments several parts work. authors
would express gratitude JAIR reviewers helped us sensibly improve
presentation.

References
Al-Bluwi, I., Simeon, T., & Cortes, J. (2012). Motion Planning Algorithms Molecular
Simulations: Survey. Computer Science Review, 6 (4), 125143.
Alberts, B., Johnson, A., Lewis, J., Raff, M., Roberts, K., & Walter, P. (2007). Molecular
Biology Cell (5th Edition edition). Garland Science.
Anfinsen, C. B. (1973). Principles Govern Folding Protein Chains. Science, 181,
223230.
Apt, K. (2009). Principles Constraint Programming. Cambridge University Press.
Backofen, R., & Will, S. (2006). Constraint-Based Approach Fast Exact Structure
Prediction 3-Dimensional Protein Models. Constraints, 11 (1), 530.
993

fiCampeotto, Dal Palu, Dovier, Fioretto, & Pontelli

Backofen, R., Will, S., & Bornberg-Bauer, E. (1999). Application Constraint Programming Techniques Structure Prediction Lattice Proteins Extended Alphabet.
Bioinformatics, 15(3), 234242.
Baker, D., & Sali, A. (2001). Protein Structure Prediction Structual Genomics. Science,
294 (5540), 9396.
Barahona, P., & Krippahl, L. (2008). Constraint Programming Structural Bioinformatics.
Constraints, 13 (1-2), 320.
Ben-David, M., Noivirt-Brik, O., Paz, A., Prilusky, J., Sussman, J. L., & Levy, Y. (2009).
Assessment CASP8 Structure Predictions Template Free Targets. Proteins, 77,
5065.
Bennett, W., & Huber, R. (1984). Structural Functional Aspects Domain Motions
Proteins. Crit. Rev. Biochem., 15, 291384.
Borning, A. (1981). Programming Language Aspects ThingLab, ConstraintOriented Simulation Laboratory. ACM Transactions Programming Languages
Systems, 3 (4), 353387.
Cahill, S., Cahill, M., & Cahill, K. (2003). Kinematics Protein Folding. Journal
Computational Chemistry, 24 (11), 13641370.
Campeotto, F., Dovier, A., & Pontelli, E. (2013). Protein Structure Prediction GPU:
Declarative Approach Multi-agent Framework. International Conference
Parallel Processing (ICPP), pp. 474479. IEEE Computer Society Press.
Campeotto, F., Dal Palu, A., Dovier, A., Fioretto, F., & Pontelli, E. (2012). Filtering
Technique Fragment Assembly-Based Proteins Loop Modeling Constraints.
Milano, M. (Ed.), CP, Vol. 7514 Lecture Notes Computer Science, pp. 850866.
Springer.
Canutescu, A., & Dunbrack, R. (2003). Cyclic coordinate descent: robotics algorithm
protein loop closure. Protein Sci, 12, 963972.
Cheadle, A. M., Harvey, W., Sadler, A. J., Schimpf, J., Shen, K., & Wallace, M. G. (2003).
ECLiPSe: Introduction. Technical report IC-Parc 031, IC-Parc, Imperial College
London.
Chelvanayagam, G., Knecht, L., Jenny, T., Benner, S., & Gonnet, G. (1998). Combinatorial Distance-Constraint Approach Predicting Protein Tertiary Models
Known Secondary Structure. Folding Design, 3, 149160.
Choco Team (2008). Choco: Open Source Java Constraint Programming Library.
Workshop Open-Source Software Integer Constraint Programming. Available http://www.emn.fr/z-info/choco-solver/.
Choi, Y., & Deane, C. M. (2010). FREAD Revisited: Accurate Loop Structure Prediction
Using Database Search Algorithm. Proteins, 78 (6), 143140.
Clementi, C. (2008). Coarse-grained Models Protein Folding: Toy Models Predictive
Tools?. Curr Opin Struct Biol, 18, 1015.
994

fiA Constraint Solver Flexible Protein Models

Corblin, F., Trilling, L., & Fanchon, E. (2005). Constraint Logic Programming Modeling
Biological System Described Logical Network. Workshop ConstraintBased Methods Bioinformatics.
Cortes, J., & Al-Bluwi, I. (2012). Robotics Apporach Enhance Conformational Sampling Proteins. International Design Engineering Technical Conferences
Computers Information Engineering Conference, Vol. 4, pp. 11771186. ASME.
Crescenzi, P., Goldman, D., Papadimitriou, C., Piccolboni, A., & Yannakakis, M. (1998).
Complexity Protein Folding. Proceedings Thirtieth Annual ACM
Symposium Theory Computing, pp. 597603. ACM Press.
Dal Palu, A., Dovier, A., Fogolari, F., & Pontelli, E. (2012a). Protein Structure Analysis
Constraint Programming. Cozzini, P., & Kellogg, G. (Eds.), Computational
Approaches Nuclear Receptors, chap. 3, pp. 4059. Royal Society Chemistry.
Dal Palu, A., Spyrakis, F., & Cozzini, P. (2012b). New Approach Investigating Protein
Flexibility Based Constraint Logic Programming: First Application Case
Estrogen Receptor. European Journal Medicinal Chemistry, 49, 127140.
Dal Palu, A., Dovier, A., & Fogolari, F. (2004). Constraint Logic Programming Approach
Protein Structure Prediction. BMC Bioinformatics, 5, 186.
Dal Palu, A., Dovier, A., Fogolari, F., & Pontelli, E. (2010). CLP-based protein fragment
assembly. Theory Practice Logic Programming, 10 (4-6), 709724.
Dal Palu, A., Dovier, A., Fogolari, F., & Pontelli, E. (2011). Exploring Protein Fragment
Assembly Using CLP. Walsh, T. (Ed.), Proceedings International Joint
Conference Artificial Intelligence, IJCAI, pp. 25902595. IJCAI/AAAI.
Dal Palu, A., Dovier, A., & Pontelli, E. (2005). New Constraint Solver 3D Lattices
Application Protein Folding Problem. International Conference Logic
Programming Artificial Intelligence Reasoning, pp. 4863. Springer Verlag.
Dal Palu, A., Dovier, A., & Pontelli, E. (2007). Constraint Solver Discrete Lattices,
Parallelization, Application Protein Structure Prediction. Software Practice
Experience, 37 (13), 14051449.
Dal Palu, A., Dovier, A., & Pontelli, E. (2010). Computing Approximate Solutions
Protein Structure Determination Problem using Global Constraints Discrete
Crystal Lattices. International Journal Data Mining Bioinformatics, 4 (1),
120.
Deane, C., & Blundell, T. (2001). CODA. Combined Algorithm Predicting Structurally Variable Regions Protein Models. Protein Sci, 10, 599612.
Debartolo, J., Hocky, G., Wilde, M., Xu, J., Freed, K., & Sosnick, T. (2010). Protein
Structure Prediction Enhanced Evolutionary Diversity: SPEED. Protein Science,
19 (3), 520534.
Dotu, I., Cebrian, M., Van Hentenryck, P., & Clote, P. (2011). Lattice Protein Structure
Prediction Revisited. IEEE/ACM Trans. Comput. Biology Bioinform, 8 (6), 1620
1632.
995

fiCampeotto, Dal Palu, Dovier, Fioretto, & Pontelli

Dunbrack, R. (2002). Rotamer Libraries 21st Century. Curr. Opin. Struct. Biol.,
12 (4), 431440.
Erdem, E. (2011). Applications Answer Set Programming Phylogenetic Systematics.
Logic Programming, Knowledge Representation, Nonmonotonic Reasoning, pp.
415431. Springer Verlag.
Erdem, E., & Ture, F. (2008). Efficient Haplotype Inference Answer Set Programming.
National Conference Artificial Intelligence (AAAI), pp. 436441. AAAI/MIT
Press.
Felts, A., Gallicchio, E., Chekmarev, D., Paris, K., Friesner, R., & Levy, R. (2008). Prediction Protein Loop Conformations using AGBNP Implicit Solvent Model
Torsion Angle Sampling. J Chem Theory Comput, 4, 855868.
Fiser, A., Do, R., & Sali, A. (2000). Modeling Loops Protein Structures. Protein Sci,
9, 17531773.
Fogolari, F., Esposito, G., Viglino, P., & Cattarinussi, S. (1996). Modeling Polypeptide
Chains C Chains, C Chains C , C Chains Ellipsoidal Lateral
Chains. Biophysical Journal, 70, 11831197.
Fogolari, F., Pieri, L., Dovier, A., Bortolussi, L., Giugliarelli, G., Corazza, A., Esposito, G.,
& Viglino, P. (2007). Scoring Predictive Models using Reduced Representation
Proteins: Model Energy Definition. BMC Structural Biology, 7 (15), 117.
Fogolari, F., Corazza, A., Viglino, P., & Esposito, G. (2012). Fast Structure Similarity
Searches among Protein Models: Efficient Clustering Protein Fragments. Algorithms
Molecular Biology, 7, 16.
Fujitsuka, Y., Chikenji, G., & Takada, S. (2006). SimFold Energy Function De Novo
Protein Structure Prediction: Consensus Rosetta. Proteins, 62, 381398.
Gay, S., Fages, F., Martinez, T., & Soliman, S. (2011). Constraint Program Subgraph
Epimorphisms Application Identifying Model Reductions Systems Biology.
Workshop Constraint-Based Methods Bioinformatics.
Gebser, M., Schaub, T., Thiele, S., & Veber, P. (2011). Detecting Inconsistencies Large
Biological Networks Answer Set Programming. Theory Practice Logic
Programming, 11 (2-3), 323360.
Gecode Team (2013). Gecode: Generic Constraint Development Environment. Available
http://www.gecode.org.
Go, N., & Scheraga, H. (1970). Ring Closure Local Conformational Deformations
Chain Molecules. Macromolecules, 3, 178187.
Graca, A., Marques-Silva, J., Lynce, I., & Oliveira, A. (2011). Haplotype Inference
Pseudo-Boolean Optimization. Annals OR, 184 (1), 137162.
Guns, T., Sun, H., Marchal, K., & Nijssen, S. (2010). Cis-regulatory Module Detection Using
Constraint Programming. IEEE International Conference Bioinformatics
Biomedicine (BIBM), pp. 363368.
996

fiA Constraint Solver Flexible Protein Models

Handl, J., Knowles, J., Vernon, R., Baker, D., & Lovell, S. (2012). Dual Role
Fragments Fragment-Assembly Methods De Novo Protein Structure Prediction.
Proteins: Structure, Function Bioinformatics, 80 (2), 490504.
Hartenberg, R., & Denavit, J. (1995). Kinematic Notation Lower Pair Mechanisms
Based Matrices. Journal Applied Mechanics, 77, 215221.
Hegler, J., Latzer, J., Shehu, A., Clementi, C., & Wolynes, P. (2009). Restriction Versus
Guidance Protein Structure Prediction. Proc Natl Acad Sci U.S.A., 106 (36), 15302
15307.
Jacobson, M., Pincus, D., Rapp, C., Day, T., Honig, B., Shaw, D., & Friesner, R. (2004).
Hierarchical Approach All-atom Protein Loop Prediction. Proteins, 55, 351367.
JaCoP Team (2012). JaCoP web page, visited November 2012..
http://www.jacop.eu.

Available

Jamroz, M., & Kolinski, A. (2010). Modeling Loops Proteins: Multi-method Approach. BMC Struct. Biol., 10 (5).
Jauch, R., Yeo, H., Kolatkar, P. R., & Clarke, N. D. (2007). Assessment CASP7 Structure
Predictions Template Free Targets. Proteins, 69, 5767.
Jones, D. (2006). Predicting Novel Protein Folds using FRAGFOLD. Proteins, 45,
127132.
Karplus, K., Karchin, R., Draper, J., Casper, J., Mandel-Gutfreund, Y., Diekhans, M.,
& Source., R. H. (2003). Combining local structure, fold-recognition, new fold
methods protein structure prediction. Proteins, 53 (6), 491497.
Karplus, M., & Shakhnovich, E. (1992). Protein Folding: Theoretical Studies Thermodynamics Dynamics. Protein Folding, pp. 127195. WH Freeman.
Kim, D. E., Blum, B., Bradley, P., & Baker, D. (2009). Sampling Bottlenecks De novo
Protein Structure Prediction. Journal Molecular Biology, 393 (1), 249 260.
Kinch, L., Yong Shi, S., Cong, Q., Cheng, H., Liao, Y., & Grishin, N. V. (2011). CASP9
assessment free modeling target predictions. Proteins, 79, 5973.
Kirillova, S., Cortes, J., Stefaniu, A., & Simeon, T. (2008). NMA-Guided Path Planning Approach Computing Large-Amplitude Conformational Changes Proteins.
Proteins: Structure, Function, Bioinformatics, 70 (1), 131143.
Kolodny, R., Guibas, L., Levitt, M., & Koehl, P. (2005). Inverse Kinematics Biology:
Protein Loop Closure Problem. International Journal Robotics Research,
24 (2-3), 151163.
Krippahl, L., & Barahona, P. (2002). Psico: Solving Protein Structures Constraint
Programming Optimization. Constraints, 7 (4-3), 317331.
Krippahl, L., & Barahona, P. (2005). Applying Constraint Programming Rigid Body
Protein Docking. Principles Practice Constraint Programming, pp. 373
387. Springer Verlag.
Krippahl, L., & Barahona, P. (1999). Applying Constraint Programming Protein Structure Determination. Principles Practice Constraint Programming, pp. 289
302. Springer Verlag.
997

fiCampeotto, Dal Palu, Dovier, Fioretto, & Pontelli

Larhlimi, A., & Bockmayr, A. (2009). New Constraint-Based Description SteadyState Flux Cone Metabolic Networks. Discrete Applied Mathematics, 157 (10),
22572266.
LaValle, S. (2006). Planning Algorithms. Cambridge University Press.
Lazaridis, T., Archontis, G., & Karplus, M. (1995). Enthalpic Contribution Protein
Stability: Atom-Based Calculations Statistical Mechanics. Adv. Protein Chem.,
47, 231306.
Lee, J., Kim, S., Joo, K., Kim, I., & Lee, J. (2004). Prediction Protein Tertiary Structure
using Profesy, Novel Method Based Fragment Assembly Conformational
Space Annealing. Proteins, 56 (4), 704714.
Lee, J., Lee, D., Park, H., Coutsias, E., & Seok, C. (2010). Protein Loop Modeling Using
Fragment Assembly Analytical Loop Closure. Proteins, 78 (16), 34283436.
Liu, P., Zhu, F., Rassokhin, D., & Agrafiotis, D. (2009). Self-organizing Algorithm
Modeling Protein Loops. PLOS Comput Biol, 5 (8).
Lovell, S., Davis, I., Arendall, W., de Bakker, P., Word, J., Prisant, M., Richardson, J., &
Richardson, D. (2003). Structure Validation C Geometry: , C Deviation.
Proteins, 50, 437450.
Mann, M., & Dal Palu, A. (2010). Lattice Model Refinement Protein Structures.
Workshop Constraint-Based Methods Bioinformatics.
Micheletti, C., Seno, F., & Maritan, A. (2000). Recurrent oligomers proteins: optimal scheme reconciling accurate concise backbone representations automated
folding design studies. proteins, 40 (4), 662674.
Moll, M., Schwarz, D., & Kavraki, L. (2007). Roadmap Methods Protein Folding. Humana Press.
Molloy, K., Saleh, S., & Shehu, A. (2013). Probabilistic Search Energy Guidance
Biased Decoy Sampling Ab-Initio Protein Structure Prediction. IEEE/ACM Trans.
Comput. Biology Bioinform, PrePrint.
Neumaier, A. (1997). Molecular Modeling Proteins Mathematical Prediction
Protein Structure. SIAM Review, 39, 407460.
Noonan, K., OBrien, D., & Snoeyink, J. (2005). Protein Backbone Motion Inverse
Kinematics. International Journal Robotics Research, 24 (11), 971982.
Olson, B. S., Molloy, K., & Shehu, A. (2011). Search Protein Native State
Probabilistic Sampling Approach. J. Bioinformatics Computational Biology,
9 (3), 383398.
Raman, S., Vernon, R., Thompson, J., Tyka, M., Sadreyev, R., Pei, J., Kim, D., Kellogg, E.,
DiMaio, F., Lange, O., Kinch, L., Sheffler, W., Kim, B.-H., Das, R., Grishin, N. V.,
& Baker, D. (2009). Structure Prediction CASP8 All-atom Refinement using
Rosetta. Proteins, 77 (Suppl. 9), 8999.
Rapp, C. S., & Friesner, R. A. (1999). Prediction Loop Geometries using Generalized
Born Model Solvation Effects. Proteins, 35, 173183.
998

fiA Constraint Solver Flexible Protein Models

Ray, O., Soh, T., & Inoue, K. (2010). Analyzing Pathways Using ASP-Based Approaches.
Algebraic Numeric Biology, 4th International Conference, pp. 167183. Springer
Verlag.
Rossi, F., van Beek, P., & Walsh, T. (2006). Handbook Constraint Programming. Elsevier
Science Inc.
Rufino, S., Donate, L., Canard, L., & Blundell, T. (1997). Predicting Conformational
Class Short Medium Size Loops Connecting Regular Secondary Structures:
Application Comparative Modeling. J. Mol. Biol., 267, 352367.
Shehu, A. (2009). Ab-Initio Tree-Based Exploration Enhance Sampling Low-Energy
Protein Conformations. Proceedings Robotics: Science Systems V.
Shehu, A. (2010). Conformational Search Protein Native State, pp. 431452. John
Wiley & Sons. Inc.
Shehu, A., & Kavraki, L. (2012). Modeling Structures Motions Loops Protein
Molecules. Entropy, 14, 252290.
Shen, M., & Sali, A. (2006). Statistical Potential Assessment Prediction Protein
Structures. Protein Sci, 15, 25072524.
Shih, E., & Hwang, M.-J. (2011). Use Distance Constraints Protein-Protein
Docking Computations. Proteins: Structure, Function, Bioinformatics, 80 (1),
194205.
Shmygelska, A., & Hoos, H. (2005). Ant Colony Optimisation Algorithm 2D
3D Hydrophobic Polar Protein Folding Problem. BMC Bioinformatics, 6, 3052.
Shmygelska, A., & Levitt, M. (2009). Generalized Ensemble Methods De Novo Structure
Prediction. Proceedings National Academy Science (USA), 106 (5), 1415
1420.
Simoncini, D., Berenger, F., Shrestha, R., & Zhang, K. (2012). Probabilistic FragmentBased Protein Structure Prediction Algorithm. PLOS One, 7 (7), e38799.
Simons, K., Kooperberg, C., Huang, E., & Baker, D. (1997). Assembly Protein Tertiary
Structures Fragments Similar Local Sequences using Simulated Annealing
Bayesian Scoring Functions. J. Mol. Biol., 268, 209225.
Skolnick, J., Fetrow, J., & Kolinski, A. (2000). Structural Genomics Importance
Gene Function Analysis. Nat. Biotechnology, 18 (3), 283287.
Soto, C., Fasnacht, M., Zhu, J., Forrest, L., & Honig, B. (2008). Loop Modeling: Sampling,
Filtering, Scoring. Proteins: Structure, Function, Bioinformatics, 70, 834
843.
Spassov, V., Flook, P., & Yan, L. (2008). LOOPER: Molecular Mechanics-based Algorithm Protein Loop Prediction. Protein Eng, 21, 91100.
Stuckey, P. J., Becket, R., & Fischer, J. (2010). Philosophy MiniZinc Challenge.
Constraints, 15 (3), 307316.
Sussmann, G., & Steele, G. (1980). CONSTRAINTS: Language Expressing AlmostHierarchical Descriptions. Artificial Intelligence, 14 (1), 139.
999

fiCampeotto, Dal Palu, Dovier, Fioretto, & Pontelli

Sutherland, I. (1963). Sketchpad: Man-Machine Graphical Communication System. Tech.
rep. 296, Lincoln Laboratory, MIT.
Swedish Institute Computer Science (2012). SICStus Prolog Home Page. http://www.
sics.se/sicstus/.
Thebault, P., de Givry, S., Schiex, T., & Gaspin, C. (2005). Combining Constraint Processing Pattern Matching Describe Locate Structured Motifs Genomic
Sequences. Fifth Workshop Modeling Solving Problems Constraints,
pp. 5360.
Tsai, Y., Huang, Y., Yu, C., & Lu, C. (2004). MuSiC: Tool Multiple Sequence
Alignment Constraints. Bioinformatics, 20 (14), 23092311.
Xiang, Z., Soto, C., & Honig, B. (2002). Evaluating Conformal Energies: Colony Energy
Application Problem Loop Prediction. PNAS, 99, 74327437.
Xu, D., & Zhang, Y. (2012). Ab Initio Protein Structure Assembly Using Continuous
Structure Fragments Optimized Knowledge-based Force Field. Proteins, 80 (7),
17151735.
Yang, R. (1998). Multiple Protein/DNA Sequence Alignment Constraints. International Conference Practical Applications Constraint Programming.
Yap, R. (2001). Parametric Sequence Alignment Constraints. Constraints, 6, 157172.
Yap, R., & Chuan, H. (1993). Constraint Logic Programming Framework Constructing
DNA Restriction Maps. Artificial Intelligence Medicine, 5 (5), 447464.
Yue, K., & Dill, K. (2000). Constraint Based Assembly Tertiary Protein Structures
Secondary Structure Elements. Proteins Science, 9 (10), 19351946.
Zhang, M., & Kavraki, L. (2002). New Method Fast Accurate Derivation
Molecular Conformations. Journal Chemical Information Computer Sciences,
42 (1), 6470.
Zhang, Y., & Hauser, K. (2013). Unbiased, Scalable Sampling Protein Loop Conformations Probabilistic Priors. BMC Structural Biology, (to appear http:
// www. indiana. edu/ ~ motion/ slikmc/ papers/ BMC_ Zhang. pdf ).
Zhou, H., & Zhou, Y. (2002). Distance-scaled, Finite Ideal-gas Reference State Improves
Structure-derived Potentials Mean Force Structure Selection Stability Prediction. Protein Sci, 11, 27142726.

1000


